method
返回一个实现Listener接口的对象. 该接口有一个方法
func (l Listener) Accept() (c Conn, err os.Error)
which will allow a server to be built. Using this, the multi-threaded Echo server
given earlier becomes
这将允许构建一个服务器。使用它, 将使前面给出的多线程Echo 服务器改变
/* ThreadedIPEchoServer
*/
package main
import (
"fmt"
"net"
"os"
)
func main() {
service := ":1200"
listener, err := net.Listen("tcp", service)
checkError(err)
for {
conn, err := listener.Accept()
if err != nil {
continue
}
go handleClient(conn)
}
}
func handleClient(conn net.Conn) {
defer conn.Close()
var buf [512]byte
for {
n, err := conn.Read(buf[0:])
if err != nil {
return
}
_, err2 := conn.Write(buf[0:n])
if err2 != nil {
return
}
}
}
func checkError(err error) {
if err != nil {
fmt.Fprintf(os.Stderr, "Fatal error: %s", err.Error())
os.Exit(1)
}
}
If you want to write a UDP server, then there is an interface PacketConn and a method
to return an implementation of this:
如果你想写一个UDP 服务器, 这里有一个 PacketConn的接口，和一个实现了该接口的方法:
func ListenPacket(net, laddr string) (c PacketConn, err os.Error)
This interface has primary methods ReadFrom and WriteTo to handle packet reads and
writes.
这个接口的主要方法ReadFrom和WriteTo用来处理数据包的读取和写入。
The Go net package recommends using these interface types rather than the concrete
ones. But by using them, you lose specific methods such
as SetKeepAlive or TCPConn and SetReadBuffer of UDPConn, unless you do a type cast.
It is your choice.
Go 的net包建议使用接口类型而不是具体的实现类型。但是，通过使用它们，你失去了具体的方法，
比如SetKeepAlive或TCPConn和UDPConn的SetReadBuffer，除非你做一个类型转换。如何选择在
于你。
3.11 Raw sockets and the type IPConn 原始套接字和 IPConn 类
型
This section covers advanced material which most programmers are unlikely to need.
it deals with raw sockets, which allow the programmer to build their own IP protocols,
or use protocols other than TCP or UDP
本节涵盖了大多数程序员可能需要的高级资料。它涉及raw sockets, ，允许程序员建立自己的 IP
协议，或使用TCP 或UDP 协议。
TCP and UDP are not the only protocols built above the IP layer. The site
http://www.iana.org/assignments/protocol-numbers lists about 140 of them (this list
is often available on Unix systems in the file/etc/protocols). TCP and UDP are only
numbers 6 and 17 respectively on this list.
TCP 和UDP 并不是建立在IP 层之上唯一的协议。该网站：
http://www.iana.org/assignments/protocol-numbers 列表上大约有140 关于它们(该列表往
往在Unix 系统的/etc/protocols文件上。)。TCP 和UDP 在这个名单上分别为 6 和17。
Go allows you to build so-called raw sockets, to enable you to communicate using
one of these other protocols, or even to build your own. But it gives minimal support:
it will connect hosts, and write and read packets between the hosts. In the next
chapter we will look at designing and implementing your own protocols above TCP;
this section considers the same type of problem, but at the IP layer.
Go 允许你建立所谓的原始套接字，使您可以使用这些其它协议通信，或甚至建立你自己的。但它提
供了最低限度的支持: 它会连接主机, 写入和读取和主机之间的数据包。在接下来的章节中，我们将
着眼于设计和实现自己的基于TCP 之上的协议; 这部分认为同样的问题存在于IP 层。
To keep things simple, we shall use almost the simplest possible example: how to
send a ping message to a host. Ping uses the "echo" command from the ICMP protocol.
This is a byte-oriented protocol, in which the client sends a stream of bytes to
another host, and the host replies. the format is:
为了简单起见，我们将使用几乎最简单的例子: 如何发送一个ping 消息给主机。Ping 使用"echo"
命令的ICMP 协议。这是一个面向字节协议, 客户端发送一个字节流到另一个主机, 并等待主机的答
复。格式如下:
 The first byte is 8, standing for the echo message
 The second byte is zero
 The third and fourth bytes are a checksum on the entire message
 The fifth and sixth bytes are an arbitrary indentifier
 The seventh and eight bytes are an arbitrary sequence number
 The rest of the packet is user data
 首字节是8, 表示echo 消息
 第二个字节是0
 第三和第四字节是整个消息的校验和
 第五和第六字节是一个任意标识
 第七和第八字节是一个任意的序列号
 该数据包的其余部分是用户数据
The following program will prepare an IP connection, send a ping request to a host
and get a reply. You may need to have root access in order to run it successfully.
下面的程序将准备一个IP 连接，发送一个 ping 请求到主机，并得到答复。您可能需要root 权限才
能运行成功。
/* Ping
*/
package main
import (
"bytes"
"fmt"
"io"
"net"
"os"
)
func main() {
if len(os.Args) != 2 {
fmt.Println("Usage: ", os.Args[0], "host")
os.Exit(1)
}
addr, err := net.ResolveIPAddr("ip", os.Args[1])
if err != nil {
fmt.Println("Resolution error", err.Error())
os.Exit(1)
}
conn, err := net.DialIP("ip4:icmp", addr, addr)
checkError(err)
var msg [512]byte
msg[0] = 8 // echo
msg[1] = 0 // code 0
msg[2] = 0 // checksum, fix later
msg[3] = 0 // checksum, fix later
msg[4] = 0 // identifier[0]
msg[5] = 13 //identifier[1]
msg[6] = 0 // sequence[0]
msg[7] = 37 // sequence[1]
len := 8
check := checkSum(msg[0:len])
msg[2] = byte(check >> 8)
msg[3] = byte(check & 255)
_, err = conn.Write(msg[0:len])
checkError(err)
_, err = conn.Read(msg[0:])
checkError(err)
fmt.Println("Got response")
if msg[5] == 13 {
fmt.Println("identifier matches")
}
if msg[7] == 37 {
fmt.Println("Sequence matches")
}
os.Exit(0)
}
func checkSum(msg []byte) uint16 {
sum := 0
// assume even for now
for n := 1; n > 16) + (sum & 0xffff)
sum += (sum >> 16)
var answer uint16 = uint16(^sum)
return answer
}
func checkError(err error) {
if err != nil {
fmt.Fprintf(os.Stderr, "Fatal error: %s", err.Error())
os.Exit(1)
}
}
func readFully(conn net.Conn) ([]byte, error) {
defer conn.Close()
result := bytes.NewBuffer(nil)
var buf [512]byte
for {
n, err := conn.Read(buf[0:])
result.Write(buf[0:n])
if err != nil {
if err == io.EOF {
break
}
return nil, err
}
}
return result.Bytes(), nil
}
3.12 Conclusion 结论
This chapter has considered programming at the IP, TCP and UDP levels. This is often
necessary if you wish to implement your own protocol, or build a client or server
for an existing protocol.
本章着重IP, TCP 和UDP 级别的编程。如果你想实现自己的协议，或用现有的协议建立一个客户端
或服务器，这些内容往往很重要。
Copyright Jan Newmarch, PI:EMAIL
版权所有 Jan Newmarch, PI:EMAIL
If you like this book, please contribute using Flattr
or donate using PayPal
Chapter 4 第四章
Data serialisation 数据序列化
Communication between a client and a service requires the exchange of data. This
data may be highly structured, but has to be serialised for transport. This chapter
looks at the basics of serialisation and then considers several techniques supported
by Go APIs.
客户端与服务之间通过数据交换来通信。因为数据可能是高度结构化的，所以在传输前必须进行序列
化。这一章将研究序列化基础并介绍一些Go API 提供的序列化技术。
4.1 Introduction 简介
A client and server need to exchange information via messages. TCP and UDP provide
the transport mechanisms to do this. The two processes also have to have a protocol
in place so that message exchange can take place meaningfully.
客户端与服务器需要通过消息来交换信息。TCP 与UDP是消息传递的两种机制，在这两种机制之上就
需要有合适的协议来约定传输的内容的含义。
Messages are sent across the network as a sequence of bytes, which has no structure
except for a linear stream of bytes. We shall address the various possibilities for
messages and the protocols that define them in the next chapter. In this chapter
we concentrate on a component of messages - the data that is transferred.
在网络上，消息被当作字节序列来传输，它们是没有结构的，仅仅只是一串字节流。我们将在下一章
讨论定义消息与协议涉及到的的各种问题。本章，我们只重点关注消息的一个方面 - 被传输的数据
A program will typically build complex data structures to hold the current program
state. In conversing with a remote client or service, the program will be attempting
to transfer such data structures across the network - that is, outside of the
application's own address space.
程序通常构造一个复杂的数据结构来保存其自身当前的状态。在与远程的客户端或服务的交互中，程
序会通过网络将这样的数据结构传输到 -应用程序所在的地址空间之外的地方
Programming languages use structured data such as
编程语言使用的结构化的数据类型有
 records/structures
 variant records
 array - fixed size or varying
 string - fixed size or varying
 tables - e.g. arrays of records
 non-linear structures such as
o circular linked list
o binary tree
o objects with references to other objects
 记录/结构
 可变记录
 数组 - 固定大小或可变大小
 字符串 - 固定大小或可变大小
 表 - 例如:记录构成的数组
 非线程结构，比如
循环链表
o
二叉树
o
含有其他对象引用的对象
o
None of IP, TCP or UDP packets know the meaning of any of these data types. All that
they can contain is a sequence of bytes. Thus an application has to serialise any
data into a stream of bytes in order to write it, and deserialise the stream of bytes
back into suitable data structures on reading it. These two operations are known
as marshalling and unmarshalling respectively.
IP，TCP 或者UDP 网络包并不知道这些数据类型的含义，它们只是字节序列的载体。因此，写入网
络包的时候，应用需要将要传输的(有类型的)数据 序列化成字节流，反之，读取网络包的时候，
应用需要将字节流反序列化成合适的数据结构，这两个操作被分别称为编组和解组。
For example, consider sending the following variable length table of two columns
of variable length strings:
例如:考虑发送如下这样一个由两列可变长度字符串构成的可变长度的表格
fred programmer
liping analyst
sureerat manager
This could be done by in various ways. For example, suppose that it is known that
the data will be an unknown number of rows in a two-column table. Then a marshalled
form could be
这可以通过多种方式来完成。比如：假设知道数据是一个未知行数的两列表格，那么编组形式可能是:
3 // 3 rows, 2 columns assumed
4 fred // 4 char string,col 1
10 programmer // 10 char string,col 2
6 liping // 6 char string, col 1
7 analyst // 7 char string, col 2
8 sureerat // 8 char string, col 1
7 manager // 7 char string, col 2
Variable length things can alternatively have their length indicated by terminating
them with an "illegal" value, such as '\0' for strings:
可变长度的事物都可以通过用一个“非法”的终结值,比如对于字符串来说的'\0',来间接获得它们的
长度
3
fred\0
programmer\0
liping\0
analyst\0
sureerat\0
manager\0
Alternatively, it may be known that the data is a 3-row fixed table of two columns
of strings of length 8 and 10 respectively. Then a serialisation could be
假设知道数据是一个三行两列且每列长度分别是8 或10 的表格，那么序列化的结果可能是:
fred\0\0\0\0
programmer
liping\0\0
analyst\0\0\0
sureerat
manager\0\0\0
Any of these formats is okay - but the message exchange protocol must specify which
one is used, or allow it to be determined at runtime.
这些格式中的任意一种都是可行的- 但是消息交换协议必须指定使用哪一种(格式)，或者约定在运
行期再做决定。
4.2 Mutual agreement 交互协议
The previous section gave an overview of the issue of data serialisation. In practise,
the details can be considerably more complex. For example, consider the first
possibility, marshalling a table into the stream
前一小节总结了在数据序列化过程中可能遇到的各种问题。而在实际操作中，需要考虑的细节还更多
一些，例如：先考虑下面这个问题，如何将下面这个表编组成流.
3
4 fred
10 programmer
6 liping
7 analyst
8 sureerat
7 manager
Many questions arise. For example, how many rows are possible for the table - that
is, how big an integer do we need to describe the row size? If it is 255 or less,
then a single byte will do, but if it is more, then a short, integer or long may
be needed. A similar problem occurs for the length of each string. With the characters
themselves, to which character set do they belong? 7 bit ASCII? 16 bit Unicode? The
question of character sets is discussed at length in a later chapter.
许多问题冒出来了。例如：这个表格可能有多少行？- 即我们需要多大的整数来表示表格的大小，如
果它只有255 行或者更少，那么一个字节就够了，如果更大一些，就可能需要short，integer 或
者long 来表示了。对于字符串的长度也存在同样的问题，对字符本身来说，它们属于哪种字符集? 7
位的ASCII？16 位的 Unicode？字符集的问题将会在后面的章节里详细讨论。
The above serialisation is opaque or implicit. If data is marshalled using the above
format, then there is nothing in the serialised data to say how it should be
unmarshalled. The unmarshalling side has to know exactly how the data is serialised
in order to unmarshal it correctly. For example, if the number of rows is marshalled
as an eight-bit integer, but unmarshalled as a sixteen-bit integer, then an incorrect
result will occur as the receiver tries to unmarshall 3 and 4 as a sixteen-bit integer,
and the receiving program will almost certainly fail later.
上面的序列化是不透明的或者被称为隐式的，如果采用这种格式来编组数据，那么序列化后的数据中
没有包含任何指示它应该被如何解组的信息。为了正确的解组，解组的一端需要精确的知晓编组的方
式。如果数据的行数以8 位整型数的方式编组，却以16 位整型的方式解组，那么接收者将得到错误
的解码结果。比如接受者尝试将3 与4 当作16 位整型解组，在后续的程序运行的时候肯定会失败。