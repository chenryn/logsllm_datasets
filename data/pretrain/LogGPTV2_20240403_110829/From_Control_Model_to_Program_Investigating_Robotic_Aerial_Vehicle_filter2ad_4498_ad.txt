rameter or ﬂight mission (Cases 1-9). Or they can only be
triggered by a certain environment factor (e.g., wind speed in
Case 10). Such accidents abound in real-world RAV opera-
tions [13]. Due to their hazardous nature and in compliance
with safety regulations, we run these realistic accidents us-
ing a software-in-the-loop (SITL) RAV simulator [3], with a
real control program and logs but simulated vehicle and ex-
ternal environment. Widely used in drone industry, the SITL
simulator provides high-ﬁdelity simulation of the vehicle as
well as the physical environment it operates in (including
aerodynamics and disturbances). We leverage MAVLink [13]
3https://github.com/ArduPilot/ardupilot/issues/12121
USENIX Association
29th USENIX Security Symposium    921
V44851V3V8V24930V8V2V3V44929V3V8V24852V8V2V3ሷ𝑟𝑥4850𝑚V3V7V4Control Loop Iteration Numberሷ𝑟𝑥Data Flow NData Flow 1ሶ𝑘𝑥ሶ𝑘𝑥Table 2: List of accident cases caused by control-semantic
bugs.
Case
ID
Still Vulnerable
in ArduPilot 3.5
Root Cause (Bug)
Condition
Category
Impact
Patch
Commit
Number
and up?
Controller
Parameter
Corruption
Extreme
vehicle
instability or
ﬂy off course
Extreme
vehicle
instability
or crash
Extreme
vehicle
instability
or crash
Extreme
vehicle
instability
or crash
Crash
after slow
movement
Moving to
an invalid
location
Flight
Mission
Corruption
Command
& turn
Command
& altitude
change
Command
& turn
Command
& turn
Command
& speed
change
Command
Crash
Command
Crash
Command
Crash
Command
Data
Processing
Error
1
2
3
4
5
6
7
8
9
10
Crash
Weak
or no
wind
range
range
kP
check
parameter
angular
variable
leading to
x,
No range check of
kP parameter for x,
y-axis velocity con-
trollers
No range check of
kP parameter for z-
axis velocity con-
troller
No
of kP
for
roll
controller
check
No
of
parameter
for pitch angular
controller
Wrong
name
out-of-range
y-axis velocity
Wrong waypoint
computation based
on
non-existent
coordinate
Invalid type-casting
of z-axis location
causing an integer
overﬂow
Missing divided-by-
zero check of kP
parameter for z-axis
position controller
Missing divided-by-
zero check of kP pa-
rameter for x, y-axis
position controllers
Missing divided-by-
zero check in angu-
lar calculation
9f1414a∗
9f1414a∗
9f1414a∗
9f1414a∗
Yes
Yes
Yes
Yes
e80328d
No
9739859
No
756d564
No
c2a290b
c03e506
29da80d
No
No
No
∗ The bug is partially patched by ArduPilot developers and still vulnerable.
to trigger control-semantic bugs by issuing GCS commands
to adjust control/mission parameters. MAVLink is able to
communicate with both real and simulated RAVs.
Investigation Results Table 3 presents the results of our
investigations using MAYDAY. For each case, MAYDAY ﬁrst
performs the control-level investigation, which identiﬁes the
initial digressing controller and infers the CVDG-level cor-
ruption path(s) by analyzing the control-level log. MAYDAY
then performs then program-level investigation, which iden-
tiﬁes the portion of control program code that implements
the CVDG-level paths. We clarify that the ﬁnal output of
MAYDAY is not the speciﬁc buggy line of code per se. Instead,
it is a small subset of program code (basic blocks) which the
investigator will further inspect to pinpoint and conﬁrm the
bug.
Control-Level Investigation: The 2nd and 3rd columns of
Table 3 show the initial digressing controller and the CVDG-
level corruption path identiﬁed in each case, respectively. The
4th column shows the number of control loop iterations (du-
ration) between the initial corruption of the control variable
and the initial occurrence of controller digression. For Cases
1-7, that duration can be arbitrarily long. More speciﬁcally,
the initial corruption of a control variable on the CVDG-level
path may happen ﬁrst in just a few iterations (e.g., 8 in Case
1). But the controller’s initial digression could happen an ar-
Table 3: Investigation results of accident cases in Table 2.
SLoC: Source lines of code.
Control-Level Investigation
Program-Level
Investigation
# of Iterations from
Initial Corruption to
Initial Digression
# of
Basic
Blocks
SLoC
Bug
Found?
Case
ID
1
2
3
4
5
6
7
8
9
10
Initial
Digressing
Controller
x, y-axis
Velocity
z-axis
Velocity
Roll
Angle
Pitch
Angle
x, y-axis
Velocity
x, y-axis
Position
z-axis
Position
z-axis
Position
x, y-axis
Position
Roll, Pitch,
Yaw Angle
CVDG-Level
Corruption Path
P → ˙kxy → ¨rxy
P → ˙kz → ¨rz
P → kroll → ˙rroll
P → kpitch → ˙rpitch
M → ˙rxy
M → rxy
M → rz
P → kz → ˙rz
P → kxy → ˙rxy
S → xrpy → ˙rrpy
≥ 4
≥ 4
≥ 4
≥ 4
≥ 4
≥ 4
≥ 4
4
4
1
34
32
50
50
12
48
48
9
41
7
89
85
121
121
44
137
135
30
94
22
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
bitrary number of iterations later, depending on the timing of
the vehicle’s operation that “sets off” the digression (e.g., a
turn or a change of altitude). Such “low-and-slow” nature of
accidents makes it harder to connect their symptoms to causes
and highlights the usefulness of MAYDAY.
Program-Level Investigation: The 5th and 6th columns of
Table 3 show respectively the number of control program
basic blocks and lines of source code identiﬁed by MAYDAY
for each case. Notice that the numbers are fairly small (from
7 to 50 basic blocks, or 22 to 137 lines of code), indicating a
low-effort manual program inspection. We conﬁrm that the
actual bug behind each case is indeed located in the code
identiﬁed by MAYDAY.
Bug Detection Capability Comparison We have also con-
ducted a comparative evaluation with (1) two off-the-shelf
bug-ﬁnding tools: Cppcheck 1.9 [22] and Coverity [21], and
(2) RVFuzzer [51], to detect the bugs behind the 10 accident
cases. We used the most recent stable version of Cppcheck
with all its available analysis options to leverage Cppcheck’s
full capability. For Coverity, we used its online service ver-
sion. For RVFuzzer, we used its latest version. The results are
shown in Table 4.
Comparison with Cppcheck and Coverity Neither Cppcheck
nor Coverity reported any of the bugs behind the 10 cases. For
Cases 1-6, without knowledge about the control model, it is