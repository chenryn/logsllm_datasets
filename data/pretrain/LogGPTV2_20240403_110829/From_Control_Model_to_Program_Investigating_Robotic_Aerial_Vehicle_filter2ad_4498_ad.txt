### Accidents and Their Triggers

Accidents in RAV (Remotely Actuated Vehicle) operations can be triggered by specific parameters or flight missions (Cases 1-9), or they can be initiated by certain environmental factors, such as wind speed (Case 10). These types of accidents are common in real-world RAV operations [13]. Due to their hazardous nature and to comply with safety regulations, we simulate these realistic accidents using a software-in-the-loop (SITL) RAV simulator [3]. This simulation includes a real control program and logs, but the vehicle and external environment are simulated. The SITL simulator, widely used in the drone industry, provides high-fidelity simulations of the vehicle and its operating environment, including aerodynamics and disturbances. We use MAVLink [13] to trigger control-semantic bugs by issuing GCS (Ground Control Station) commands to adjust control or mission parameters. MAVLink is capable of communicating with both real and simulated RAVs.

### Investigation Results

Table 2 lists the accident cases caused by control-semantic bugs, along with their root causes, conditions, categories, impacts, and patch commit numbers.

| Case ID | Still Vulnerable in ArduPilot 3.5 | Root Cause (Bug) | Condition | Category | Impact | Patch Commit Number |
|---------|----------------------------------|------------------|-----------|----------|--------|---------------------|
| 1       | Yes                              | No range check of kP parameter for x, y-axis velocity controllers | Extreme vehicle instability or fly off course | Controller Parameter Corruption | Crash | 9f1414a* |
| 2       | Yes                              | No range check of kP parameter for z-axis velocity controller | Extreme vehicle instability or crash | Controller Parameter Corruption | Crash | 9f1414a* |
| 3       | Yes                              | No range check of kP parameter for roll controller | Extreme vehicle instability or crash | Controller Parameter Corruption | Crash | 9f1414a* |
| 4       | Yes                              | No range check of kP parameter for pitch angular controller | Extreme vehicle instability or crash | Controller Parameter Corruption | Crash | 9f1414a* |
| 5       | No                               | Wrong name out-of-range y-axis velocity | Crash after slow movement | Data Processing Error | e80328d | No |
| 6       | No                               | Invalid type-casting of z-axis location causing an integer overflow | Moving to an invalid location | Flight Mission Corruption | 9739859 | No |
| 7       | No                               | Missing divided-by-zero check of kP parameter for z-axis position controller | Command & turn | Command & altitude change | 756d564 | No |
| 8       | No                               | Missing divided-by-zero check of kP parameter for x, y-axis position controllers | Command & turn | Command & speed change | c2a290b | No |
| 9       | No                               | Missing divided-by-zero check in angular calculation | Command & turn | Command | c03e506 | No |
| 10      | No                               | Weak or no wind range check | Command & turn | Command | 29da80d | No |

* The bug is partially patched by ArduPilot developers and still vulnerable.

### Control-Level and Program-Level Investigations

Table 3 presents the results of our investigations using MAYDAY. For each case, MAYDAY first performs a control-level investigation, which identifies the initial digressing controller and infers the CVDG (Control Variable Dependency Graph)-level corruption path(s) by analyzing the control-level log. Then, MAYDAY performs a program-level investigation, which identifies the portion of the control program code that implements the CVDG-level paths. The final output of MAYDAY is a small subset of program code (basic blocks) that the investigator will further inspect to pinpoint and confirm the bug.

| Case ID | Initial Digressing Controller | CVDG-Level Corruption Path | # of Iterations from Initial Corruption to Initial Digression | # of Basic Blocks | SLoC | Bug Found? |
|---------|-------------------------------|-----------------------------|---------------------------------------------------------------|-------------------|------|------------|
| 1       | x, y-axis Velocity            | P → ˙kxy → ¨rxy             | ≥ 4                                                          | 34                | 89   | (cid:88)    |
| 2       | z-axis Velocity               | P → ˙kz → ¨rz                | ≥ 4                                                          | 32                | 85   | (cid:88)    |
| 3       | Roll Angle                    | P → kroll → ˙rroll           | ≥ 4                                                          | 50                | 121  | (cid:88)    |
| 4       | Pitch Angle                   | P → kpitch → ˙rpitch         | ≥ 4                                                          | 50                | 121  | (cid:88)    |
| 5       | x, y-axis Velocity            | M → ˙rxy                     | ≥ 4                                                          | 12                | 44   | (cid:88)    |
| 6       | x, y-axis Position            | M → rxy                      | ≥ 4                                                          | 48                | 137  | (cid:88)    |
| 7       | z-axis Position               | M → rz                       | ≥ 4                                                          | 48                | 135  | (cid:88)    |
| 8       | z-axis Position               | P → kz → ˙rz                 | 4                                                            | 9                 | 30   | (cid:88)    |
| 9       | x, y-axis Position            | P → kxy → ˙rxy               | 4                                                            | 41                | 94   | (cid:88)    |
| 10      | Roll, Pitch, Yaw Angle        | S → xrpy → ˙rrpy             | 1                                                            | 7                 | 22   | (cid:88)    |

### Bug Detection Capability Comparison

We conducted a comparative evaluation with two off-the-shelf bug-finding tools, Cppcheck 1.9 [22] and Coverity [21], and RVFuzzer [51] to detect the bugs behind the 10 accident cases. We used the most recent stable version of Cppcheck with all available analysis options, and for Coverity, we used its online service version. For RVFuzzer, we used the latest version. The results are shown in Table 4.

### Comparison with Cppcheck and Coverity

Neither Cppcheck nor Coverity reported any of the bugs behind the 10 cases. For Cases 1-6, without knowledge about the control model, it is challenging for these tools to identify the bugs.