除了提供本地容器解析，嵌入式 DNS 服务器还处理任何外部请求。正如我们在前面的例子中看到的，来自 Docker 主机的搜索域(在我的例子中为`lab.lab`)仍然被传递给容器，并在它们的`resolv.conf`文件中进行配置。从主机获知的名称服务器成为嵌入式 DNS 服务器的转发器。这允许嵌入式 DNS 服务器处理任何容器名称解析请求，并将外部请求移交给 Docker 主机使用的名称服务器。这种行为可以在服务级别被覆盖，也可以在运行时将`--dns`或`--dns-search`标志传递给容器。例如，我们可以再启动两个`web1`容器实例，并在任一情况下指定一个特定的 DNS 服务器:
```
user@docker1:~$ docker run -dP --net=mybridge1 --name=web4 \
--dns=10.20.30.13 jonlangemak/web_server_1
19e157b46373d24ca5bbd3684107a41f22dea53c91e91e2b0d8404e4f2ccfd68
user@docker1:~$ docker run -dP --net=mybridge1 --name=web5 \
--dns=8.8.8.8 jonlangemak/web_server_1
700f8ac4e7a20204100c8f0f48710e0aab8ac0f05b86f057b04b1bbfe8141c26
user@docker1:~$
```
### 注
注意`web4`会接收`10.20.30.13`作为 DNS 转发器，即使我们没有明确指定。这是因为这也是 Docker 主机使用的 DNS 服务器，如果没有指定，容器将从主机继承。这里指定它是为了示例。
现在，如果我们尝试解析任一容器上的本地 DNS 记录，我们可以看到在`web1`的情况下，它可以工作，因为它定义了本地 DNS 服务器，而在`web2`上的查找失败，因为`8.8.8.8`不知道`lab.lab`域:
```
user@docker1:~$ docker exec -it web4 ping docker1.lab.lab -c 2
PING docker1.lab.lab (10.10.10.101): 48 data bytes
56 bytes from 10.10.10.101: icmp_seq=0 ttl=64 time=0.080 ms
56 bytes from 10.10.10.101: icmp_seq=1 ttl=64 time=0.078 ms
--- docker1.lab.lab ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.078/0.079/0.080/0.000 ms
user@docker1:~$ docker exec -it web5 ping docker1.lab.lab -c 2
ping: unknown host
user@docker1:~$
```
# 创建 Docker 域名系统别名
在嵌入 DNS 之前，将容器别名为不同名称的唯一方法是使用链接。正如我们在以前的食谱中看到的，这仍然是用于创建本地化或容器特定别名的方法。但是，如果您想要一个更大范围的别名，一个连接到给定网络的任何容器都可以解析的别名，该怎么办？嵌入式 DNS 服务器提供所谓的网络范围别名，这些别名在给定的用户定义网络中是可解析的。在本食谱中，我们将向您展示如何在用户定义的网络中创建网络范围的别名。
## 做好准备
在本食谱中，我们将在单个 Docker 主机上演示配置。假设该主机安装了 Docker，并且 Docker 处于默认配置。我们将更改主机上的名称解析设置，因此您将需要根级访问权限。
## 怎么做…
网络别名可以用几种不同的方式来定义。它们可以在容器运行时定义，也可以在将容器连接到网络时定义。同样，网络别名仅在容器实现用户定义的网络时才提供。如果不同时指定用户定义的网络，就无法创建网络别名。Docker 将阻止您在容器运行时指定它们:
```
user@docker1:~$ docker run -dP --name=web1 --net-alias=webserver1 \
jonlangemak/web_server_1
460f587d0fb3e70842b37736639c150b6d333fd0b647345aa7ed9e0505ebfd2d
docker: Error response from daemon: Network-scoped alias is supported only for containers in user defined networks.
user@docker1:~$
```
如果我们创建一个用户定义的网络并将其指定为容器配置的一部分，该命令将成功执行:
```
user@docker1:~$ docker network create -d bridge mybridge1
663f9fe0b4a0dbf7a0be3c4eaf8da262f7e2b3235de252ed5a5b481b68416ca2
user@docker1:~$ docker run -dP --name=web1 --net=mybridge1 \
--net-alias=webserver1 jonlangemak/web_server_1
05025adf381c7933f427e647a512f60198b29a3cd07a1d6126bc9a6d4de0a279
user@docker1:~$
```
创建别名后，我们可以将其视为特定容器配置的一部分。例如，如果我们现在检查容器`web1`，我们将在其网络配置下看到一个定义的别名:
```
user@docker1:~$ docker inspect web1
……
                “mybridge1”: {
                    “IPAMConfig”: null,
                    “Links”: null,
                    “Aliases”: [
                        “webserver1”,
                        “6916ac68c459”
                    ],
                    “NetworkID”: “a75b46cc785b88ddfbc83ad7b6ab7ced88bbafef3f64e3e4314904fb95aa9e5c”,
                    “EndpointID”: “620bc4bf9962b7c6a1e59a3dad8d3ebf25831ea00fea4874a9a5fcc750db5534”,
                    “Gateway”: “172.18.0.1”,
                    “IPAddress”: “172.18.0.2”,
……
user@docker1:~$
```
现在，让我们启动另一个名为`web2`的容器，看看我们能否解析别名:
```
user@docker1:~$ docker run -dP --name=web2 --net=mybridge1 \
jonlangemak/web_server_2
9b6d23ce868bf62999030a8c1eb29c3ca7b3836e8e3cbb7247d4d8e12955f117
user@docker1:~$ docker exec -it web2 ping webserver1 -c 2
PING webserver1 (172.18.0.2): 48 data bytes
56 bytes from 172.18.0.2: icmp_seq=0 ttl=64 time=0.104 ms
56 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.091 ms
--- webserver1 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.091/0.098/0.104/0.000 ms
user@docker1:~$
```
这里有几件有趣的事情要指出。首先，这种定义别名的方法与链接方法有很大的不同，不仅仅是范围。通过链接，源容器指定了它希望目标容器别名的内容。对于网络别名，源容器设置自己的别名。
其次，这仅仅是因为容器`web2`和`web1`在同一个用户定义的网络上。因为别名的作用域是整个用户定义的网络，这意味着同一容器可以通过不同用户定义的网络上的不同别名。例如，让我们创建另一个用户定义的网络:
```
user@docker1:~$ docker network create -d bridge mybridge2
d867d7ad3a1f639cde8926405acd3a36e99352f0e2a45871db5263caf3b59c44
user@docker1:~$
```
现在，让我们将容器`web1`附在上面:
```
user@docker1:~$ docker network connect --alias=fooserver mybridge2 web1
```
回想一下，我们说过您也可以将网络范围的别名定义为`network connect`子命令的一部分:
```
user@docker1:~$ docker inspect web1
……
                “mybridge1”: {
                    “IPAMConfig”: null,
                    “Links”: null,
                    “Aliases”: [
                        “webserver1”,
                        “6916ac68c459”
                    ],
                    “NetworkID”: “a75b46cc785b88ddfbc83ad7b6ab7ced88bbafef3f64e3e4314904fb95aa9e5c”,
                    “EndpointID”: “620bc4bf9962b7c6a1e59a3dad8d3ebf25831ea00fea4874a9a5fcc750db5534”,
                    “Gateway”: “172.18.0.1”,
                    “IPAddress”: “172.18.0.2”,
                    “IPPrefixLen”: 16,
                    “IPv6Gateway”: “”,
                    “GlobalIPv6Address”: “”,
                    “GlobalIPv6PrefixLen”: 0,
                    “MacAddress”: “02:42:ac:12:00:02”
                },
                “mybridge2”: {
                    “IPAMConfig”: {},
                    “Links”: null,
                    “Aliases”: [
                        “fooserver”,
                        “6916ac68c459”
                    ],
                    “NetworkID”: “daf24590cc8f9c9bf859eb31dab42554c6c14c1c1e4396b3511524fe89789a58”,
                    “EndpointID”: “a36572ec71077377cebfe750f4e533e0316669352894b93df101dcdabebf9fa7”,
                    “Gateway”: “172.19.0.1”,
                    “IPAddress”: “172.19.0.2”,
user@docker1:~$
```
注意容器`web1`现在有两个别名，每个网络一个。因为容器`web2`只连接到一个网络，所以它仍然只能解析与`mybridge1`网络相关的别名:
```
user@docker1:~$ docker exec -it web2 ping webserver1 -c 2
PING webserver1 (172.18.0.2): 48 data bytes
56 bytes from 172.18.0.2: icmp_seq=0 ttl=64 time=0.079 ms
56 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.123 ms
--- webserver1 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.079/0.101/0.123/0.000 ms
user@docker1:~$ docker exec -it web2 ping fooserver -c 2
ping: unknown host
user@docker1:~$
```
然而，一旦将`web2`连接到`mybridge2`网络，它现在能够解析两个别名:
```
user@docker1:~$ docker network connect mybridge2 web2
user@docker1:~$ docker exec -it web2 ping webserver1 -c 2
PING webserver1 (172.18.0.2): 48 data bytes
56 bytes from 172.18.0.2: icmp_seq=0 ttl=64 time=0.064 ms
56 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.097 ms
--- webserver1 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.064/0.081/0.097/0.000 ms
user@docker1:~$ docker exec -it web2 ping fooserver -c 2
PING fooserver (172.19.0.2): 48 data bytes
56 bytes from 172.19.0.2: icmp_seq=0 ttl=64 time=0.080 ms
56 bytes from 172.19.0.2: icmp_seq=1 ttl=64 time=0.087 ms
--- fooserver ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.080/0.083/0.087/0.000 ms
user@docker1:~$
```
有趣的是，Docker 还允许您为多个容器定义相同的别名。例如，现在让我们启动名为`web3`的第三个容器，并使用与`web1` ( `webserver1`)相同的别名将其连接到`mybridge1`:
```
user@docker1:~$ docker run -dP --name=web3 --net=mybridge1 \
--net-alias=webserver1 jonlangemak/web_server_1
cdf22ba64231553dd7e876b5718e155b1312cca68a621049e04265f5326e063c
user@docker1:~$
```
现在为容器`web1`和`web2`定义了别名。然而，从`web2`解析别名的尝试仍然指向`web1`:
```
user@docker1:~$ docker exec -it web2 ping webserver1 -c 2
PING webserver1 (172.18.0.2): 48 data bytes
56 bytes from 172.18.0.2: icmp_seq=0 ttl=64 time=0.066 ms
56 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.088 ms
--- webserver1 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.066/0.077/0.088/0.000 ms
user@docker1:~$
```
如果我们断开或停止容器`web1`，我们应该会看到分辨率现在变为`web3`，因为它仍然在网络上活动，并且具有相同的别名:
```
user@docker1:~$ docker stop web1
web1
user@docker1:~$ docker exec -it web2 ping webserver1 -c 2
PING webserver1 (172.18.0.4): 48 data bytes
56 bytes from 172.18.0.4: icmp_seq=0 ttl=64 time=0.085 ms
56 bytes from 172.18.0.4: icmp_seq=1 ttl=64 time=0.091 ms
--- webserver1 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.085/0.088/0.091/0.000 ms
user@docker1:~$
```
该功能可以在高可用性或故障转移方面为您提供一些有趣的选项，尤其是在与覆盖网络类型结合使用时。
应当注意，该功能适用于所有用户定义的网络类型，包括覆盖网络类型。我们在这些例子中使用了桥来保持例子的简单。