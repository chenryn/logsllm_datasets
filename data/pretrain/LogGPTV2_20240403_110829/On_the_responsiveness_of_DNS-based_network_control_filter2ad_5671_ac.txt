# 文本优化

## 图3：LDNS对NS记录TTL违规持续时间的累积分布函数(CDF)

图3展示了LDNS在NS记录上TTL违规持续时间的累积分布函数。实线代表随机选取的LDNS样本的CDF；虚线代表请求次数最多的前93个LDNS的CDF。

### 图4：根据NAC大小划分的所有LDNS及违规LDNS的相对分布

图4展示了所有LDNS（左侧柱状图）和违规LDNS（右侧柱状图）根据其对应NAC大小的相对分布情况。我们发现，NAC长度为21-24的LDNS占全部LDNS的约19%，但在违规服务器中占比高达26%，这表明这些较小的集群具有相对较高的违规比例。另一方面，NAC长度为9-12的LDNS占服务器总数的约8%，但仅占违规者的4%。NAC长度为13-16和17-20的集群，违规者分布较为均匀。

尽管基于有限样本，我们的测量结果表明，在较小的NAC中（特别是长度为21-24的NAC），非合规LDNS的比例较高。改变这些小网络中的LDNS操作可能会消除大量无响应的本地DNS服务器。

### 4.3 额外发现

从我们的分析中自然引出的一个问题是，为什么违规数量如此显著。一种直觉可能是某些特定的非合规DNS服务器实现是主要原因。或者大多数违规行为可以追溯到少数配置错误的网络。在本节中，我们将描述一些额外的分析来探讨这些问题。

#### DNS实现
显然，寻找TTL违规的根本原因在于DNS服务器实现。为了进行这项分析，我们将违规LDNS服务器列表与2003年10月收集的DNS实现测量中的LDNS地址列表结合。我们的结果仅限于广泛使用的Berkeley Internet Name Domain (BIND) 实现[4]。我们找到了11,744个共同的LDNS地址，这些地址有可用的BIND版本响应。其中，2237个地址属于我们在观察中发现的违反TTL的LDNS。表1列出了所有LDNS和违规LDNS中排名前十的BIND实现。

从表1来看，并没有一个单一的BIND发行版被大多数违规LDNS使用。因此，很难从我们的数据集中论证单个软件实现是TTL违规的主要原因。

**表1：LDNS BIND版本**

| BIND 版本 | 所有 LDNS 计数 | 违规 LDNS 计数 |
|-----------|-----------------|-----------------|
| 9.2.1     | 2199            | 248             |
| 8.2.3-REL | 712             | 148             |
| 9.2.2     | 378             | 64              |
| 8.3.4-REL | 339             | 114             |
| 9.1.3     | 294             | 29              |
| 9.2.0     | 276             | -               |
| 8.3.3-REL | 219             | 50              |
| 8.2.2-P5  | 210             | 55              |
| 8.3.3-REL-NOESW | 183 | 55 |
| 8.2.4-REL | 165             | 30              |

#### 识别不合规网络
我们对客户端网络进行了简单的枚举，以初步了解是否有少数客户端或网络主要负责我们在Web访问数据中观察到的TTL违规。对于每个事件，我们将违规客户端的IP地址聚类成C类网络（例如/24集群），并根据从集群中观察到的独特地址数量对其进行排名。然后，我们重点关注了顶级违规集群的网络，看看是否出现任何模式。需要注意的是，这种方法受到客户端工作负载的限制；我们对顶级违规者的识别取决于每个集群中客户对Web事件的受欢迎程度。尽管如此，仍有一些有趣的观察结果，我们将在下面讨论。

在三个事件中的两个，顶级违规集群属于一个流行搜索引擎的Web爬虫。这表明爬虫继续访问实时Web页面而没有重新解析相应的主机名。我们还发现了一些特定区域网络的情况，这些网络中有许多违规客户端。例如，在2003年6月的事件中，排名前13的集群属于亚洲的一个省级网络和欧洲的一个拨号ISP。另一个值得注意的发现在2003年4月的事件中，一家美国ISP的拨号和宽带用户生成了大量的不合规请求。最后，我们在所有三个事件日志的顶级违规集群中发现了属于同一企业网络多个站点的客户端地址。最后几个例子特别有趣，因为它们暗示DNS TTL违规实际上可能是由于特定网络中的配置错误（或优化）导致的。

### 5. 前瞻性DNS的架构支持
我们的先前观察表明，DNS在提供细粒度网络控制方面的能力有限。然而，正如我们所主张的那样，它在合作环境中仍然可以用于实现网络控制。例如，内容或应用提供商可以与受益客户合作部署基于DNS的控制机制。这些客户可能愿意修改他们的DNS基础设施，以启用动态服务器选择或路由控制等性能增强功能。

理想情况下，内容提供商可以简单地将A记录上的TTL设置得非常激进，并建议其客户确保其LDNS服务器和客户端应用程序遵守这些TTL。正如早期的工作[6]所示，以这种方式降低A记录上的TTL并不会显著降低DNS缓存命中率，也不会导致广域DNS流量大幅增加。因此，如果客户承诺获得更好的性能或可用性回报，这是一个可行的选择。

除了简单的基于TTL的机制外，还可以通过在内容或服务提供商与客户LDNS服务器之间建立带外协商通道来在合作环境中实现额外的控制。下面概述了两种采用这一思想的方法。

#### 推送式失效
在这种方法中，ADNS和LDNS服务器在初始的DNS请求和响应交换期间进行带外协商。修改ADNS服务器相对容易，因为它由感兴趣于使用基于DNS控制的内容发布者控制。客户修改其LDNS服务器以接受来自ADNS的失效通知。此外，这些客户的LDNS服务器必须根据失效通知清除其缓存。来自ADNS的失效通知可以触发新的解析，也可以包含LDNS应使用的替代地址，直到下一次通信。再次强调，参与的LDNS集合很可能属于大型“高端”客户，他们将从这种方法中获得更高的可用性和性能。这些客户网络中的客户端更有可能到达内容发布者的轻载镜像站点，并且应该能够更快地获取内容。

#### 自适应租约
最后一种方法需要ADNS和LDNS之间的紧密集成，并且还需要更明确的合作。在这种方法中，ADNS会根据请求频率和LDNS服务器背后的客户基础的重要性将LDNS服务器列表划分为不同的类别。“高流量”类别的客户（无论是按流量还是按他们产生的收入计算）应该愿意接受租约并定期续订。

在租约期间，ADNS服务器将支持资源记录的细粒度失效。这些失效可以由ADNS感知到的需要强制其客户端使用不同地址的需求触发。或者，LDNS可以轮询ADNS以获取记录更新。租约续订周期可能取决于LDNS的相对重要性，但它也可能受到其他因素的影响，如预期路径性能变化的频率。租约可以通过带有租约期限作为TTL的资源记录(RR)传达给LDNS。

### 6. 总结
本文考虑了基于DNS的网络控制技术（如CDN中的服务器选择或多宿主终端网络中的链路选择）可以期望的响应程度。我们收集了大型网站的客户端访问行为以及LDNS访问大型CDN中的名称服务器的请求的测量数据。结果显示，大多数客户端和LDNS遵守DNS TTL，但仍有相当一部分不遵守。例如，在我们的测量中，多达47%的Web事件客户端和14%的LDNS不遵守DNS TTL。而且，那些违反TTL的客户端通常违规时间很长，超过两小时。我们还提出了一些架构技术，包括主动失效和自适应租约，这些技术可以在应用提供商与其客户之间合作部署，以提高基于DNS的控制的响应能力。

作为未来的工作，我们计划进行更积极的LDNS行为研究，例如使用探针触发DNS查找以衡量其对TTL的遵守情况。我们还打算进一步调查不合规的原因，并开发和评估我们的初步架构技术。

### 致谢
我们非常感谢Roberto De Prisco（Akamai）、Bruce Maggs（Akamai和CMU）和Herbie Pearthree（IBM全球服务）在获取本次研究的日志数据方面的帮助。我们还要感谢Oliver Spatscheck、Michael Rabinovich、Duane Wessels和匿名审稿人对本文提供的宝贵反馈。

### 参考文献
[1] P. Albitz and C. Liu. DNS and BIND. O’Reilly and Associates, 2001.
[2] E. Cohen and H. Kaplan. Proactive caching of DNS records: Addressing a performance bottleneck. In Proceedings of the Symposium on Applications and the Internet, January 2001.
[3] V. Duvvuri, P. Shenoy, and R. Tewari. Adaptive leases: A strong consistency mechanism for the World Wide Web. IEEE Transactions on Knowledge and Data Engineering, 5(5):1266–1276, September 2003.
[4] Internet Systems Consortium. ISC BIND. http://www.isc.org/sw/bind.
[5] J. Jung, B. Krishnamurthy, and M. Rabinovich. Flash Crowds and Denial of Service Attacks: Characterization and Implications for CDNs and Web Sites. In International World Wide Web Conference (WWW), May 2002.
[6] J. Jung, E. Sit, H. Balakrishnan, and R. Morris. DNS performance and the effectiveness of caching. IEEE/ACM Transactions on Networking, 10(5), October 2003.
[7] B. Krishnamurthy, R. Liston, and M. Rabinovich. DEW: DNS-enhanced Web for faster content delivery. In International World Wide Web Conference (WWW), Budapest, Hungary, 2003.
[8] B. Krishnamurthy and J. Wang. On Network-Aware Clustering of Web Clients. In Proceedings of ACM SIGCOMM, Stockholm, Sweden, August 2000.
[9] B. Krishnamurthy, C. Wills, and Y. Zhang. On the use and performance of content distribution networks. In Proceedings of ACM SIGCOMM Internet Measurement Workshop (IMW), San Francisco, CA, November 2001.
[10] Z. M. Mao, C. D. Cranor, F. Douglis, M. Rabinovich, O. Spatscheck, and J. Wang. A precise and efficient evaluation of the proximity between web clients and their local DNS servers. In Proceedings of USENIX Annual Technical Conference, Monterey, CA, June 2002.
[11] North American Network Operators’ Group. Nanog mailing list. http://www.nanog.org/mailinglist.html, 1999, 2000.
[12] A. Shaikh, R. Tewari, and M. Agrawal. On the effectiveness of DNS-based server selection. In Proceedings of IEEE INFOCOM, Anchorage, AK, April 2001.
[13] University of Oregon. Route views project. http://routeviews.org.
[14] D. Wessels and M. Fomenkov. Wow, that’s a lot of packets. In Proceedings of Passive and Active Measurement Workshop (PAM), La Jolla, CA, April 2003.
[15] D. Wessels, M. Fomenkov, N. Brownlee, and kc claffy. Measurements and laboratory simulations of the upper DNS hierarchy. In Proceedings of Passive and Active Measurement Workshop (PAM), Antibes Juan-les-Pins, France, April 2004.