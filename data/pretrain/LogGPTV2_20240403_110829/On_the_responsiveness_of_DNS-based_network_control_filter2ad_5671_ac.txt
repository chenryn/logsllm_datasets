t
i
w
s
r
e
v
r
e
s
.
c
a
r
F
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
 0
LDNS Random Sample
LDNS Top 93
 5
 10
 15
 20
Max TTL violation (hours)
(a) All LDNSes
LDNS Random Sample
LDNS Top 93
 5
 10
 15
 20
Max TTL violation (hours)
(b) Violating LDNSes
Figure 3: CDFs of the duration of the TTL violation on NS
records by LDNSes. The solid line shows the CDF for the ran-
dom sample of LDNSes; the dashed line shows the CDF for the
top 93 requesting LDNSes.
l
a
t
o
t
f
o
e
g
a
t
n
e
c
r
e
P
100%
90%
80%
70%
60%
50%
40%
30%
20%
10%
0%
1.3
1.7
19.4
37.9
36.4
31.6
4.6
1.4
8.4
LDNS server subnet size
/25 to /32
/21 to /24
/17 to /20
/13 to /16
/9 to /12
/0 to /8
26.4
30.4
1.4
All LDNS Servers
Violating Servers
Figure 4: Relative distribution of all LDNSes (left bar) and of
violating LDNSes (right bar) according to the size of their cor-
responding NAC.
The results for this characterization are shown in Figure 4. We
see that LDNSes in NACs of lengths 21–24 constitute about 19% of
all LDNSes, but 26% of all violating servers, suggesting that these
small clusters have a relatively higher fraction of violators. On the
other hand, LDNSes in NACS of lengths 9–12, constitute about 8%
of the servers, but only 4% of the violators. NACs of lengths 13–16,
and 17–20, have a more even distribution of violators.
Our measurements, though based on a limited sample, suggest
that the relative proportion of non-compliant LDNSes is higher in
smaller NACs (especially in NACs of lengths 21–24). Changing
the operation of LDNSes in these smaller networks could eliminate
a substantial number of non-responsive local DNS servers.
4.3 Additional ﬁndings
A natural question that arises from our analysis is why the num-
ber of violations is so signiﬁcant. One intuition may be that partic-
ular noncompliant DNS server implementations are primarily re-
sponsible. Or perhaps most of the violations can be traced to a
relatively small number of misconﬁgured networks. In this section,
we describe some additional analyses to consider these questions.
DNS implementations. An obvious place to look for root causes
of TTL violations is in DNS server implementations. To perform
this analysis, we combined our list of violating LDNS servers with
a list of LDNS addresses gathered from earlier measurements of
DNS implementations taken in October 20032. Our results are lim-
ited to Berkeley Internet Name Domain (BIND) implementations,
which is widely used in the Internet [4]. We found 11,744 common
LDNS addresses for which a BIND version response was available.
Of these, 2237 addresses belonged to LDNSes that violated TTLs
according to our observations. In Table 1, we list the top 10 BIND
implementations over all LDNSes and also the top implementations
of violating LDNSes. The table omits the count of DNS error mes-
sages returned in response to the version queries (e.g., NOTIMP,
REFUSED, SERVFAIL, and FORMERR). These responses, partic-
ularly NOTIMP, often indicate a non-BIND implementation such
as Microsoft Windows DNS or TinyDNS.
From Table 1, there does not seem to be a single distribution of
BIND that is used by a large majority of violating LDNSes. It is
therefore difﬁcult to argue from our data sets that a single software
implementation is responsible for TTL violations.
2It is possible that the BIND version discovered in October 2003
for a particular address was changed by March 2004.
All LDNSes
count
BIND version
2199
9.2.1
712
8.2.3-REL
378
9.2.2
339
8.3.4-REL
294
9.1.3
276
9.2.0
219
8.3.3-REL
8.2.2-P5
210
8.3.3-REL-NOESW 183
8.2.4-REL
165
Violating LDNSes
count
BIND version
248
9.2.1
148
8.2.3-REL
114
8.3.4-REL
9.2.2
64
8.3.3-REL-NOESW 55
8.2.2-P5
55
50
8.3.3-REL
42
8.2.2-P5
30
8.2.4-REL
9.1.3
29
Table 1: LDNS BIND versions
Identifying noncompliant networks. We performed a sim-
ple enumeration of client networks to gain some initial insight into
whether a few clients or networks were primarily responsible for
observed TTL violations in our Web access data. For each of the
events, we clustered the IP addresses of violating clients into class
C networks (e.g., /24 clusters) and ranked them according to how
many unique addresses were observed from the cluster. We then fo-
cused on identifying the networks of the top few violating clusters
to see if any patterns emerged. Note that this approach is limited by
the client workload; our identiﬁcation of the top violators is subject
to the popularity of the Web events among clients in each cluster.
Nevertheless, a few interesting observations arose which we dis-
cuss below.
In two of the three events, the top violating clusters belonged to
the Web crawler of a popular search engine. This indicates that
crawlers continue to visit live Web pages without re-resolving the
corresponding hostnames. We also found a few cases of speciﬁc
regional networks that were responsible for many violating clients.
In the June 2003 event, for example, the top 13 clusters belong to
two networks, a provincial network in Asia and a dial-up ISP in
Europe. Another notable ﬁnding from the April 2003 event was
the relatively large number of noncompliant requests generated by
dial-up and broadband subscribers of a single U.S. ISP. Finally, we
found client addresses belonging to multiple sites of the same en-
terprise network among the top violating clusters in all three event
logs. The last few examples are particularly interesting, since they
imply that DNS TTL violations may in fact be due to misconﬁgu-
rations (or optimizations) in speciﬁc networks.
5. ARCHITECTURAL SUPPORT FOR
PROACTIVE DNS
Our previous observations suggest that DNS has limited abil-
ity to provide ﬁne-grained network control. However, as we argue
below, it can still be useful to attain network control in cooper-
ative settings. For example, content or application providers can
deploy DNS-based control mechanisms in cooperation with cus-
tomers who stand to beneﬁt. These customers may be willing to
modify their DNS infrastructure to enable performance enhance-
ments such as dynamic server selection or route control.
Ideally, the content provider can simply set the TTL on A records
aggressively and advise its customers to ensure that their LDNS
servers and client applications obey these TTLs. As earlier work [6]
has shown, lowering TTLs on A records in this manner does not
signiﬁcantly reduce DNS cache hit rates, or cause a large increase
in wide-area DNS trafﬁc. Therefore, this is a viable option for cus-
tomers to consider if they are promised better performance or avail-
ability in return.
In addition to simple TTL-based mechanisms, it is possible to
achieve additional control in cooperative settings by establishing
out-of-band negotiation channels between the content or service
providers and the customer LDNS servers. Below we outline two
approaches that employ this idea.
Push-based invalidation. In this approach, the ADNS and
LDNS servers negotiate out of band during the initial exchange of
DNS request and response. Modifying the ADNS server is rela-
tively easy, since it is under the control of the content publisher,
who is interested in using DNS-based control. Customers modify
their LDNS servers to accept invalidations from the ADNS. Fur-
ther, these customer LDNS servers must act on the invalidations by
ﬂushing out their caches. Such an invalidation from the ADNS can
trigger a new resolution or can include an alternate address that the
LDNS should use until the next communication. Again, the par-
ticipating set of LDNSes would likely belong to large, “high-end”
customers who would gain increased availability and performance
from such an approach. The clients in these customer networks
are more likely to reach lightly loaded mirror sites of the content
publisher and should be able to fetch content faster.
Adaptive leases. The ﬁnal approach requires tighter integration
between the ADNS and LDNS, and also entails more explicit coop-
eration. In this approach, the ADNS will partition the list of LDNS
servers into different classes based on their request frequency and
the importance of the client base behind those LDNS servers. Cus-
tomers in the “high-volume” class (either in terms of trafﬁc or the
revenue they generate) should be willing to accept leases and peri-
odically renew them.
During the duration of the lease, the ADNS server will support
ﬁne-grained invalidations of resource records. These invalidations
could be triggered by the perceived need at the ADNS to force its
clients to employ a different address. Alternately, the LDNS can
poll the ADNS for updates in the records. The lease renewal period
will likely depend on the relative importance of the LDNS but it
can be inﬂuenced by a variety of other factors, such as the expected
frequency of changes in the performance of the path between the
publisher and the client. The lease can be communicated to the
LDNS via a resource record (RR) with the duration of the lease
being set as the TTL for the record, for example.
6. SUMMARY
In this paper, we consider the degree of responsiveness that can
be expected from DNS-based network control techniques such as
server selection in CDNs or link selection in multihomed end-networks.
We collect measurements of client access behavior for large Web
sites, as well as requests from LDNSes accessing nameservers in
a large CDN. Our results show a majority of clients and LDNSes
honor DNS TTLs, but a signiﬁcant fraction does not. For exam-
ple up to 47% of Web event clients, and 14% of LDNSes in our
measurements do not adhere to DNS TTLs. Moreover, those that
violate TTLs do so by a large amount, in excess of 2 hours. We also
suggested several architectural techniques, including proactive in-
validation and adaptive leases, that can be deployed cooperatively
between application providers and their customers to improve the
responsiveness of DNS-based control.
As future work, we plan to conduct a more active study of LDNS
behavior, for example using probes to trigger DNS lookups to gauge
their adherence to TTLs. We also intend to further investigate
causes of noncompliance, and develop and evaluate our initial ar-
chitectural techniques.
Acknowledgment
We are very grateful to Roberto De Prisco (Akamai), Bruce Maggs
(Akamai and CMU), and Herbie Pearthree (IBM Global Services)
for their assistance in obtaining log data for this study. We also
thank Oliver Spatscheck, Michael Rabinovich, Duane Wessels, and
the anonymous reviewers for their valuable feedback on the paper.
7. REFERENCES
[1] P. Albitz and C. Liu. DNS and BIND. O’Reilly and
Associates, 2001.
[2] E. Cohen and H. Kaplan. Proactive caching of DNS records:
Addressing a performance bottleneck. In Proceedings of the
Symposium on Applications and the Internet, January 2001.
[3] V. Duvvuri, P. Shenoy, and R. Tewari. Adaptive leases: A
strong consistency mechanism for the World Wide Web.
IEEE Transactions on Knowledge and Data Engineering,
5(5):1266–1276, September 2003.
[4] Internet Systems Consortium. ISC BIND.
http://www.isc.org/sw/bind.
[5] J. Jung, B. Krishnamurthy, and M. Rabinovich. Flash
Crowds and Denial of Service Attacks: Characterization and
Implications for CDNs and Web Sites. In International
World Wide Web Conference (WWW), May 2002.
[6] J. Jung, E. Sit, H. Balakrishnan, and R. Morris. DNS
performance and the effectiveness of caching. IEEE/ACM
Transactions on Networking, 10(5), October 2003.
[7] B. Krishnamurthy, R. Liston, and M. Rabinovich. DEW:
DNS-enhanced Web for faster content delivery. In
International World Wide Web Conference (WWW),
Budapest,Hungary, 2003.
[8] B. Krishnamurthy and J. Wang. On Network-Aware
Clustering of Web Clients. In Proceedings of ACM
SIGCOMM, Stockholm, Sweden, August 2000.
[9] B. Krishnamurthy, C. Wills, and Y. Zhang. On the use and
performance of content distribution networks. In
Proceedings of ACM SIGCOMM Internet Measurement
Workshop (IMW), San Francisco, CA, November 2001.
[10] Z. M. Mao, C. D. Cranor, F. Douglis, M. Rabinovich,
O. Spatscheck, and J. Wang. A precise and efﬁcient
evaluation of the proximity between web clients and their
local DNS servers. In Proceedings of USENIX Annual
Technical Conference, Monterey, CA, June 2002.
[11] North American Network Operators’ Group. Nanog mailing
list. http://www.nanog.org/mailinglist.html,
1999,2000.
[12] A. Shaikh, R. Tewari, and M. Agrawal. On the effectiveness
of DNS-based server selection. In Proceedings of IEEE
INFOCOM, Anchorage, AK, April 2001.
[13] University of Oregon. Route views project.
http://routeviews.org.
[14] D. Wessels and M. Fomenkov. Wow, that’s a lot of packets.
In Proceedings of Passive and Active Measurement
Workshop (PAM), La Jolla, CA, April 2003.
[15] D. Wessels, M. Fomenkov, N. Brownlee, and kc claffy.
Measurements and laboratory simulations of the upper DNS
hierarchy. In Proceedings of Passive and Active
Measurement Workshop (PAM), Antibes Juan-les-Pins,
France, April 2004.