updated each time a node is added to V (cid:48). To eﬃciently im-
plement this step, we crucially rely on the ability to process
a single row of the matrix, which can be safely performed
only when the node labeling is random and does not reveal
information about the structure of the graph. We obtain
the algorithm given below, which takes as input adjacency
matrix M representing the graph G. Because edge weights
in G can be arbitrary, we assume that each cell Mv,u of M
contains two ﬁelds: (i) Boolean ﬁeld adjacent, which is set
if (v, u) ∈ E and (ii) numeric value weight indicating the
weight of the edge (v, u).
Algorithm 4:
0. If the numbering of the nodes in G may convey in-
formation about the structure of the graph, randomly
and consistently permute the rows and columns of ad-
jacency matrix M .
1. Choose a single node v from G, e.g., at position 1 in M .
Set V (cid:48) = {v} and E(cid:48) = ∅. Create (protected) vector C
of size |V |, where each element of C, Ci, contains two
ﬁelds: weight and parent. Initialize each [Ci.weight]
to ∞ (which for practical purposes can be any constant
larger than any weight in M ) and each [Ci.parent] to
⊥.
2. Retrieve row at position v from M and update C using
Mv. That is, for each i we store in Ci the minimum of
Ci and the weight at Mv,i if v is adjacent to i. Then if
Ci.weight is updated to the weight stored at Mv,i, we
also store v in Ci.parent. The pseudo-code for oblivi-
ous implementation of this step is:
1. for i = 1 to |V | − 1 do
2.
3.
?
[cond] = ([Mv,i.weight]
< [Ci])[Mv,i.adjacent]
[Ci.weight] = [cond][Mv,i.weight] + (1− [cond])·
[Ci.parent] = [cond] · v + (1 − [cond])[Ci.parent]
3. Locate the minimum element of C, Cimin , considering
[Ci.weight]
4.
only locations i such that i (cid:54)∈ V (cid:48). That is, execute:
1. [min] = ∞
2. [imin] = 0
3. for i = 1 to |V | − 1 do
4.
if i (cid:54)∈ V (cid:48) then
[cond] = ([Ci.weight]
[min] = [cond][Ci.weight] + (1 − [cond])[min]
[imin] = [cond] · i + (1 − [cond])[imin]
5.
6.
7.
8. imin = open(imin)
?
< [min])
4. Update the minimum spanning tree by setting V (cid:48) =
V (cid:48) ∪ {imin}, E(cid:48) = E(cid:48) ∪ {([Cimin .parent], [imin])}, and
v = imin. Repeat steps 2–4 |V | − 2 times and output
the edges E(cid:48).
Recall that the nodes of the graph are randomly permuted
and the order in which they are added to V (cid:48) does not reveal
information about the graph. This means that the nodes
that form the set V (cid:48) are not protected, where each node is
added to V (cid:48) exactly once. This means that in step 3 we need
to consider only the nodes that have not yet been added to
the minimum spanning tree.
Correctness of this algorithm follows from the correctness
of Prim’s algorithm.
5.3 Analysis
5.3.1 Complexity analysis
The performance of our algorithm is not diﬃcult to assess:
steps 1–3 take O(|V |) time, while step 4 takes O(1) time.
Because these steps are repeated O(|V |) times, we arrive at
O(|V |2) overall time. It is optimal with matrix adjacency
representation and when |E| = Θ(|V |2). If step 0 is neces-
sary, however, the overall time raises to O(|V |2 log(|V |)).
5.3.2
To show that the minimum spanning tree algorithm is
oblivious, we as before follow Deﬁnition 1 and show that
the revealed information is indistinguishable from random.
Security analysis
Theorem 4. The minimum spanning tree algorithm is
data-oblivious.
Proof. We analyze each major operation in the algo-
rithm with input G = (V, E). Step 0 calls random shuﬄing,
which can be performed obliviously. Step 1 does not use
the input, only the input’s size. In step 2, after retrieving
a row of the adjacency matrix, the execution that follows
uses the same instructions and accesses the same memory
for all input graphs. Then, because this step is executed
multiple times, each iteration accesses a row corresponding
to a unique node. Since we know that the node ordering
is random and each node is used exactly once, the access
pattern induces a random permutation on the set of nodes
and is therefore indistinguishable from access patterns of
randomly chosen graphs. Steps 3 and 4 execute the same
instructions and access the same memory locations for all
input graphs and are therefore data-oblivious.
6. BUILDING SECURE PROTOCOLS
In this section we brieﬂy illustrate how our oblivious al-
gorithms can be used to build protocols for graph problems
suitable for secure computation and outsourcing. We use
the BFS algorithm for illustration purposes.
Using the setting of section 1.3 with respect to compu-
tation participants, we denote the computational parties as
P1, . . ., Pn and deﬁne security in presence of semi-honest par-
ticipants (who follow the prescribed computation, but might
attempt to learn additional information about private data
from the messages that they receive) as follows:
Definition 2. Let parties P1, . . ., Pn engage in a protocol
Π that computes function f (in1, . . ., inn) = (out1, . . ., outn),
where ini and outi denote the input and output of party Pi,
respectively. Let VIEWΠ(Pi) = (ini, ri, m1, . . ., mk) denote
the view of participant Pi during the execution of protocol
Π, which is formed by its input, internal random coin tosses
ri, and messages m1, . . ., mk passed between the parties dur-
ing protocol execution. Let I = {Pi1 , Pi2 , . . ., Pit} denote a
subset of the participants for t < n and VIEWΠ(I) denote
the combined view of participants in I during the execution
of protocol Π (i.e., the union of the views of the partici-
pants in I). We say that protocol Π is t-private in presence
of semi-honest adversaries if for each coalition of size at
most t there exists a probabilistic polynomial time simulator
SI such that {SI (inI , f (in1, . . ., inn)} ≡ {VIEWΠ(I), outI},
Pi∈I{outi}, and ≡ denotes
Pi∈I{ini}, outI =(cid:83)
where inI =(cid:83)
computational or statistical indistinguishability.
To obtain a solution that complies with the above security
deﬁnition, we employ a (n, t) threshold linear secret sharing
scheme (such as [35]), using which a secret s is split into n
shares. Then any t + 1 shares can be used to reconstruct
s exactly, while possession of t or fewer shares information-
theoretically reveals no information about s. Using such
techniques for data protection, we obtain the following se-
cure protocol for BFS computation:
1. The input party/parties distribute shares of the graph
(in the form of adjacency matrix M ) to the computa-
tional parties and indicate what node is the source.
2. If the node labels are not random, the computational
parties use a random permutation to randomize the
graph representation.
3. The parties execute Algorithm 1 on shares using the
following building blocks for computing with shares:
(a) addition and subtraction of shares, multiplication
of a shared value by a known or shared value con-
stitute elementary operations;
(b) comparisons and equality tests are implemented
using protocols LT and Eq, respectively, from [13];
(c) random permutation is achieved by ﬁrst choosing
random labels for all elements to be permuted,
e.g., by calling PRandFld from [13], and oblivi-
ously sorting the elements using the chosen ran-
dom labels as the sorting key as, e.g., shown in [5].
4. The parties send their shares of the result to the output
party/parties.
Security of the above solution can be shown based on
the facts that (1) the building blocks have been previously
proven secure in the same security model and (2) compo-
sition of secure building blocks leads to the security of the
overall solution using the composition theorem from [12]. In
more detail, to build a simulator as speciﬁed in Deﬁnition 2,
we can invoke the corresponding simulators of the building
blocks to simulate the view of a coalition of computational
parties which is indistinguishable from the real protocol ex-
ecution.
7. CONCLUSIONS
In this work we design data-oblivious algorithms for sev-
eral classical graph problems, namely, breadth-ﬁrst search,
single-source single-destination shortest path, minimum span-
ning tree, and maximum ﬂow. The algorithms are designed
to work on protected data and have applications to secure
computation and outsourcing. The algorithms have optimal,
or close to optimal, performance for dense graphs or when
adjacency matrix is used to represent the input graphs. It
is an open problem to design eﬃcient data-oblivious algo-
rithms for sparse graphs.
8. ACKNOWLEDGMENTS
This work was supported in part by grants CNS-1223699
from the National Science Foundation, FA9550-13-1-0066
from the Air Force Oﬃce of Scientiﬁc Research, and FA8750-
11-2-0218 from Air Force Research Laboratory. Any opin-
ions, ﬁndings, and conclusions or recommendations expressed
in this publication are those of the authors and do not nec-
essarily reﬂect the views of the funding agencies.
9. REFERENCES
[1] M. Ajtai. Oblivious RAMs without cryptographic
assumptions. In STOC, pages 181–190, 2010.
[2] L. Arge, M. Bender, E. Demaine, B. Holland-Minkley,
and J. Munro. Cache-oblivious priority queue and
graph algorithm applications. In STOC, pages
268–276, 2002.
[3] L. Arge, M. Bender, E. Demaine, B. Holland-Minkley,
and J. Munro. An optimal cache-oblivious priority
queue and its application to graph algorithms. SIAM
Journal on Computing, pages 1672–1695, 2007.
[4] M. Atallah, K. Frikken, and S. Wang. Private
outsourcing of matrix multiplication over closed
semi-rings. In SECRYPT, pages 136–144, 2012.
[5] M. Blanton and E. Aguiar. Private and oblivious set
and multiset operations. In ASIACCS, 2012.
[6] M. Blanton, M. Atallah, K. Frikken, and Q. Malluhi.
Secure and eﬃcient outsourcing of sequence
comparisons. In ESORICS, pages 505–522, 2012.
[7] D. Boneh, D. Mazieres, and R. Popa. Remote oblivious
storage: Making oblivious RAM practical. Technical
Report MIT-CSAIL-TR-2011-018, MIT, 2011.
[8] J. Brickell and V. Shmatikov. Privacy-preserving
graph algorithms in the semi-honest model. In
ASIACRYPT, pages 236–252, 2005.
[9] G. Brodal. Cache-oblivious algorithms and data
structures. In SWAT, pages 3–13, 2004.
[10] G. Brodal, R. Fagerberg, U. Meyer, and N. Zeh.
Cache-oblivious data structures and algorithms for
undirected breadth-ﬁrst search and shortest paths. In
SWAT, pages 480–492, 2004.
[11] C. Cachin, S. Micali, and M. Stadler. Computationally
private information retrieval with polylog
communication. In EUROCRYPT, pages 402–414,
1999.
[12] R. Canetti. Security and composition of multiparty
cryptographic protocols. Journal of Cryptology,
13(1):143–202, 2000.
[13] O. Catrina and S. de Hoogh. Improved primitives for
secure multiparty integer computation. In SCN, pages
182–199, 2010.
[14] B. Chor, O. Goldreich, E. Kushilevitz, and M. Sudan.
Private information retrieval. In FOCS, pages 41–50,
1995.
[15] B. Chor, E. Kushilevitz, O. Goldreich, and M. Sudan.
Private information retrieval. Journal of the ACM,
pages 965–981, 1998.
[16] T. Cormen, C. Leiserson, R. Rivest, and C. Stein.
Introduction to algorithms. The MIT Press, 2009.
[17] I. Damg˚ard, S. Meldgaard, and J. Nielsen. Perfectly
secure oblivious RAM without random oracles. In
TCC, pages 144–163, 2011.
[18] D. Eppstein, M. Goodrich, and R. Tamassia.
Privacy-preserving data-oblivious geometric
algorithms for geographic data. In GIS, pages 13–22,
2010.
[19] C. Erway, A. Kupcu, C. Papamanthou, and
R. Tamassia. Dynamic provable data possession. In
CCS, pages 213–222, 2009.
[20] P. Failla. Heuristic search in encrypted graphs. In
SECURWARE, pages 82–87, 2010.
[21] K.B. Frikken and P. Golle. Private social network
analysis: how to assemble pieces of a graph privately.
In ACM Workshop on Privacy in the Electronic
Society (WPES), pages 89–98, 2006.
[22] C. Gentry and Z. Ramzan. Single-database private
information retrieval with constant communication
rate. In ICALP, pages 803–815, 2005.
[23] O. Goldreich. Towards a theory of software protection
and simulation by oblivious RAMs. In STOC, pages
182–194, 1987.
[24] O. Goldreich and R. Ostrovsky. Software protection
and simulation on oblivious RAMs. Journal of the
ACM, 43(3):431–473, 1996.
[25] M. Goodrich. Randomized Shellsort: A simple
oblivious sorting algorithm. In SODA, pages
1262–1277, 2010.
[26] M. Goodrich. Data-oblivious external-memory
algorithms for the compaction, selection, and sorting
of outsourced data. In SPAA, pages 379–388, 2011.
[27] M. Goodrich and M. Mitzenmacher.
Privacy-preserving access of outsourced data via
oblivious RAM simulation. In ICALP, pages 576–587,
2011.
[28] M. Goodrich, O. Ohrimenko, and R. Tamassia.
Data-oblivious graph drawing model and algorithms.
Arxiv preprint arXiv:1209:0756, 2012.
[29] E. Kushilevitz, S. Lu, and R. Ostrovsky. On the (in)
security of hash-based oblivious RAM and a new
balancing scheme. In SODA, pages 143–156, 2012.
[30] E. Kushilevitz and R. Ostrovsky. Replication is not
needed: Single database, computationally-private
information retrieval. In FOCS, pages 364–373, 1997.
[31] H. Lipmaa. An oblivious transfer protocol with
log-squared total communication. In Information
Security Conference (ISC), pages 314–328, 2005.
[32] K. Mouratidis and M. Yiu. Shortest path computation
with no information leakage. VLDB Endowment,
5(8):692–703, 2012.
[33] R. Ostrovsky. Eﬃcient computation on oblivious
RAMs. In STOC, pages 514–523, 1990.
[34] B. Pinkas and T. Reinman. Oblivious RAM revisited.
In CRYPTO, pages 502–519, 2010.
[35] A. Shamir. How to share a secret. Communications of
the ACM, 22(11):612–613, 1979.
[36] E. Shi, E. Stefanov, and M. Li. Oblivious RAM with
O((log N )3) worst-case cost. In ASIACRYPT, pages
197–214, 2011.
[37] E. Stefanov, E. Shi, and D. Song. Towards practical
oblivious RAM. In Network and Distributed System
Security Symposium (NDSS), 2012.
[38] S. Wang, X. Ding, R. Deng, and F. Bao. Private
information retrieval using trusted hardware. In
ESORICS, pages 49–64, 2006.
[39] P. Williams and R. Sion. Usable PIR. In Network and
Distributed System Security Symposium (NDSS), 2008.
[40] P. Williams, R. Sion, and B. Carbunar. Building
castles out of mud: Practical access pattern privacy
and correctness on untrusted storage. In CCS, pages
139–148, 2008.
[41] A. Yao. How to generate and exchange secrets. In
FOCS, pages 162–167, 1986.