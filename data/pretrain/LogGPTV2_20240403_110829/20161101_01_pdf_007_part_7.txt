 Index Cond: (tbl_cost_align.id > 1998999963)
 Buffers: shared hit=5054
 Total runtime: 6.331 ms
 (5 rows)
 30301.33-25386.67 = 4914.66 --得到blocks = 4914.66.
EXPLAIN成本因子校准
 更新等式 :
 20181.67 = 4914.66*random_page_cost + cpu_tuple_cost*5031 + cpu_index_tuple_cost*5031 + cpu_operator_cost*5205
 接下来要做的是通过stap统计出random_page_cost.
 pg93@db-172-16-3-150-> taskset -c 1 /home/pg93/pgsql9.3.1/bin/postgres >/dev/null 2>&1
 [root@db-172-16-3-150 ~]# sync; echo 3 > /proc/sys/vm/drop_caches
 digoal=# select pg_backend_pid();
 pg_backend_pid
 ----------------
 10009
 (1 row)
EXPLAIN成本因子校准
 [root@db-172-16-3-150 ~]# taskset -c 2 stap -e '
 global a
 probe process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__start") {
 delete a
 println("query__start ", user_string($arg1), "pid:", pid())
 }
 probe vfs.read.return {
 t = gettimeofday_ns() - @entry(gettimeofday_ns())
 # if (execname() == "postgres" && devname != "N/A")
 a[pid()] 1998999963;
 QUERY PLAN
 ------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_tbl_cost_align_id on postgres.tbl_cost_align (cost=0.43..5003.15 rows=5031 width=45) (actual time=0.609..1844.415
rows=5037 loops=1)
 Output: id, info, crt_time
 Index Cond: (tbl_cost_align.id > 1998999963)
 Buffers: shared hit=152 read=4902
 Total runtime: 1846.683 ms
 (5 rows)
EXPLAIN成本因子校准
 query__start explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align where id>1998999963;pid:10009
 10009**4946**368362 -- 得到random_page_cost
 query__done explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align where id>1998999963;pid:10009
 value |-------------------------------------------------- count
 2048 | 0
 4096 | 0
 8192 | 33
 16384 | 2
 32768 | 6
 65536 | 4
 131072 |@@@@@@@@@@@@@@@@@@@ 1193
 262144 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 2971
 524288 |@@@@@@@@@@@@ 729
 1048576 | 2
 2097152 | 5
 4194304 | 0
 8388608 | 1
 16777216 | 0
 33554432 | 0
EXPLAIN成本因子校准
 更新等式, 使用时间等式 :
 等式1 :
 1844.415 = 4914.66*0.368362 + 0.00018884145574257426*5031 + cpu_index_tuple_cost*5031 + cpu_operator_cost*5205
 cpu_tuple_cost用例子1中计算得到的0.00018884145574257426
 cpu_index_tuple_cost和cpu_operator_cost的比例用系统默认的2 : 1.
 等式2 :
 cpu_index_tuple_cost/cpu_operator_cost = 2
 最终得到 :
 cpu_index_tuple_cost = 0.00433497085216479990
 cpu_operator_cost = 0.00216748542608239995
EXPLAIN成本因子校准
 结合例子1 得到的两个常量, 所有的5个常量值就调整好了.
 digoal=# set cpu_tuple_cost=0.00018884145574257426;
 SET
 digoal=# set cpu_index_tuple_cost = 0.00433497085216479990;
 SET
 digoal=# set cpu_operator_cost = 0.00216748542608239995;
 SET
 digoal=# set seq_page_cost=0.014329;
 SET
 digoal=# set random_page_cost = 0.368362;
 SET
auto_explain插件的使用
 http://blog.163.com/digoal@126/blog/static/16387704020115825612145/
 auto_explain的目的是给数据库中执行的SQL语句一个执行时间阈值, 超过阈值的话, 记录下当时这个SQL的执行计划到日
志中, 便于未来查看这个SQL执行计划有没有问题.
 编译安装
 [root@db-172-16-3-150 ~]# export PAHT=/home/pg93/pgsql/bin:$PATH
 [root@db-172-16-3-150 ~]# which pg_config
 /usr/bin/pg_config
 [root@db-172-16-3-150 ~]# cd /opt/soft_bak/postgresql-9.3.4/contrib/auto_explain/
 [root@db-172-16-3-150 auto_explain]# gmake clean
 [root@db-172-16-3-150 auto_explain]# gmake
 [root@db-172-16-3-150 auto_explain]# gmake install
 auto_explain 有两种使用方法
 会话级使用
 数据库级使用
auto_explain插件的使用
 会话级使用举例
 digoal=# load 'auto_explain';
 LOAD
 digoal=# set auto_explain.log_min_duration=0; 设置SQL执行时间阈值
 SET
 digoal=# select * from t limit 1;
 查看日志
 2013-12-10 14:32:15.587 CST,"postgres","digoal",12933,"[local]",52a6b506.3285,11,"SELECT",2013-12-10 14:30:30
CST,2/180059,0,LOG,00000,"duration: 0.043 ms plan:
 Query Text: select * from t limit 1;
 Limit (cost=0.00..0.03 rows=1 width=108)
 -> Seq Scan on t (cost=0.00..1409091.04 rows=50000004 width=108)",,,,,,,,"explain_ExecutorEnd, auto_explain.c:320","psql"
auto_explain插件的使用
 数据库级使用
 vi $PGDATA/postgresql.conf
 shared_preload_libraries = 'pg_stat_statements, auto_explain'
 auto_explain.log_min_duration = 100ms
 修改shared_preload_libraries需要重启数据库
 pg93@db-172-16-3-150-> pg_ctl restart -m fast
PostgreSQL plan cache management
 src/backend/utils/cache/plancache.c
 http://www.postgresql.org/docs/9.3/static/spi-spi-prepare.html
 http://www.postgresql.org/docs/9.3/static/plpgsql-implementation.html
 http://www.postgresql.org/docs/9.3/static/libpq-exec.html
PostgreSQL plan cache management
 PostgreSQL 根据统计信息和成本因子计算出各种组合的成本, 计算总成本最低的组合即得到的执行计划(plan).
 如果每次都需要计算的话, 将耗费大量的CPU资源. 因此需要将计算好的plan缓存起来, 减少CPU开销.
 prepared statement支持plan cache.
 simple query 不支持plan cache.
 plan缓存需要考虑的几个问题.
 1. 当SQL语句有参数时, 参数不同, 最低总成本对应的执行计划可能不同. 选择使用plan cache还是重新计算plan?
 2. 当SQL语句涉及的数据对象发生变化时, 需要将plan cache失效.
 3. 目前PostgreSQL plan cache是基于会话的, 所以当使用连接池时, 必须是会话模式才可以配合plan cache使用.
 因此PostgreSQL有一个专门的plan缓存管理机制.
 选择使用plan cache(generic plan)还是重新计算plan(custom plan)?
 choose_custom_plan@ src/backend/utils/cache/plancache.c
PostgreSQL plan cache management
 choose_custom_plan函数.
 /*
 * choose_custom_plan: choose whether to use custom or generic plan
 *
 * This defines the policy followed by GetCachedPlan.
 */
 static bool
 choose_custom_plan(CachedPlanSource *plansource, ParamListInfo boundParams)
 {
 double avg_custom_cost;
 /* One-shot plans will always be considered custom */ // 如果plansource->is_oneshot非0, 使用custom plan. 用于客户端强制custom plan
 if (plansource->is_oneshot)
 return true;
 /* Otherwise, never any point in a custom plan if there's no parameters */
 if (boundParams == NULL) // 如果prepared statement的SQL没有参数, 直接使用generic plan.
 return false;
 /* ... nor for transaction control statements */
 if (IsTransactionStmtPlan(plansource)) // 事务控制语句使用generic plan , 如begin;end;savepoint;rollback; rollback to;
 return false;
PostgreSQL plan cache management
 /* See if caller wants to force the decision */
 if (plansource->cursor_options & CURSOR_OPT_GENERIC_PLAN) // 用于SPI_prepare_cursor 接口函数强制generic|custom plan的flags
 return false;
 if (plansource->cursor_options & CURSOR_OPT_CUSTOM_PLAN)
 return true;
 /* Generate custom plans until we have done at least 5 (arbitrary) */ // 累计custom plan次数小于5次则继续使用custom plan.
 if (plansource->num_custom_plans total_custom_cost / plansource->num_custom_plans;
PostgreSQL plan cache management
 /*
 * Prefer generic plan if it's less expensive than the average custom
 * plan. (Because we include a charge for cost of planning in the
 * custom-plan costs, this means the generic plan only has to be less
 * expensive than the execution cost plus replan cost of the custom
 * plans.)
 *
 * Note that if generic_cost is -1 (indicating we've not yet determined
 * the generic plan cost), we'll always prefer generic at this point.
 */
 if (plansource->generic_cost magic == CACHEDPLANSOURCE_MAGIC);
 Assert(plansource->is_complete);
 /* This seems worth a real test, though */
 if (useResOwner && !plansource->is_saved)
 elog(ERROR, "cannot apply ResourceOwner to non-saved cached plan");
 /* Make sure the querytree list is valid and we have parse-time locks */
 qlist = RevalidateCachedQuery(plansource);
 /* Decide whether to use a custom plan */
 customplan = choose_custom_plan(plansource, boundParams);