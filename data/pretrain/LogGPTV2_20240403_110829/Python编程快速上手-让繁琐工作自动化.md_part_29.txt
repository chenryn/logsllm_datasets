shutil.copy()将复制一个文件，shutil.copytree()将复制整个文件夹，以及它包含
的文件夹和文件。调用 shutil.copytree(source, destination)，将路径 source 处的文件
夹，包括它的所有文件和子文件夹，复制到路径 destination 处的文件夹。source 和
destination参数都是字符串。该函数返回一个字符串，是新复制的文件夹的路径。
在交互式环境中输入以下代码：
>>> import shutil, os
>>> os.chdir('C:\\')
>>> shutil.copytree('C:\\bacon', 'C:\\bacon_backup')
'C:\\bacon_backup'
shutil.copytree()调用创建了一个新文件夹，名为 bacon_backup，其中的内容与
原来的bacon文件夹一样。现在你已经备份了非常非常宝贵的“bacon”。
9.1.2 文件和文件夹的移动与改名
调用 shutil.move(source, destination)，将路径 source 处的文件夹移动到路径
destination，并返回新位置的绝对路径的字符串。
如果 destination 指向一个文件夹，source 文件将移动到 destination 中，并保持
原来的文件名。例如，在交互式环境中输入以下代码：
158 Python编程快速上手——让繁琐工作自动化
>>> import shutil
>>> shutil.move('C:\\bacon.txt', 'C:\\eggs')
'C:\\eggs\\bacon.txt'
假定在 C:\目录中已存在一个名为 eggs 的文件夹，这个 shutil.move()调用就是
说，“将C:\bacon.txt移动到文件夹C:\eggs中。
如果在 C:\eggs 中原来已经存在一个文件 bacon.txt，它就会被覆写。因为用这
种方式很容易不小心覆写文件，所以在使用move()时应该注意。
destination 路径也可以指定一个文件名。在下面的例子中，source 文件被移动
并改名。
>>> shutil.move('C:\\bacon.txt', 'C:\\eggs\\new_bacon.txt')
'C:\\eggs\\new_bacon.txt'
这一行是说，“将 C:\bacon.txt 移动到文件夹 C:\eggs，完成之后，将 bacon.txt
文件改名为new_bacon.txt。”
前面两个例子都假设在C:\目录下有一个文件夹eggs。但是如果没有eggs文件
夹，move()就会将bacon.txt改名，变成名为eggs的文件。
>>> shutil.move('C:\\bacon.txt', 'C:\\eggs')
'C:\\eggs'
这里，move()在 C:\目录下找不到名为 eggs 的文件夹，所以假定 destination 指
的是一个文件，而非文件夹。所以bacon.txt文本文件被改名为eggs（没有.txt文件
扩展名的文本文件），但这可能不是你所希望的！这可能是程序中很难发现的缺陷，
因为move()调用会很开心地做一些事情，但和你所期望的完全不同。这也是在使用
move()时要小心的另一个理由。
最后，构成目的地的文件夹必须已经存在，否则Python会抛出异常。在交互式
环境中输入以下代码：
>>> shutil.move('spam.txt', 'c:\\does_not_exist\\eggs\\ham')
Traceback (most recent call last):
File "C:\Python34\lib\shutil.py", line 521, in move
os.rename(src, real_dst)
FileNotFoundError: [WinError 3] The system cannot find the path specified:
'spam.txt' -> 'c:\\does_not_exist\\eggs\\ham'
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
File "", line 1, in 
shutil.move('spam.txt', 'c:\\does_not_exist\\eggs\\ham')
File "C:\Python34\lib\shutil.py", line 533, in move
copy2(src, real_dst)
File "C:\Python34\lib\shutil.py", line 244, in copy2
copyfile(src, dst, follow_symlinks=follow_symlinks)
File "C:\Python34\lib\shutil.py", line 108, in copyfile
with open(dst, 'wb') as fdst:
FileNotFoundError: [Errno 2] No such file or directory: 'c:\\does_not_exist\\
eggs\\ham'
第9章 组织文件 159
Python在does_not_exist目录中寻找eggs和ham。它没有找到不存在的目录，
所以不能将spam.txt移动到指定的路径。
9.1.3 永久删除文件和文件夹
利用os模块中的函数，可以删除一个文件或一个空文件夹。但利用shutil模块，
可以删除一个文件夹及其所有的内容。
• 用os.unlink(path)将删除path处的文件。
• 调用 os.rmdir(path)将删除 path 处的文件夹。该文件夹必须为空，其中没有任
何文件和文件夹。
• 调用shutil.rmtree(path)将删除path处的文件夹，它包含的所有文件和文件夹都
会被删除。
在程序中使用这些函数时要小心！可以第一次运行程序时，注释掉这些调用，
并且加上 print()调用，显示会被删除的文件。这样做是一个好主意。下面有一个
Python 程序，本来打算删除具有.txt 扩展名的文件，但有一处录入错误（用粗体突
出显示 ），结果导致它删除了.rxt文件。
import os
for filename in os.listdir():
if filename.endswith('.rxt'):
os.unlink(filename)
如果你有某些重要的文件以.rxt 结尾，它们就会被不小心永久地删除。作为替
代，你应该先运行像这样的程序：
import os
for filename in os.listdir():
if filename.endswith('.rxt'):
#os.unlink(filename)
print(filename)
现在os.unlink()调用被注释掉，所以Python会忽略它。作为替代，你会打印出
将被删除的文件名。先运行这个版本的程序，你就会知道，你不小心告诉程序要删
除.rxt文件，而不是.txt文件。
在确定程序按照你的意图工作后，删除 print(filename)代码行，取消
os.unlink(filename)代码行的注释。然后再次运行该程序，实际删除这些文件。
9.1.4 用send2trash 模块安全地删除
因为Python内建的shutil.rmtree()函数不可恢复地删除文件和文件夹，所以 用起
来可能有危险。删除文件和文件夹的更好方法，是使用第三方的 send2trash 模块。
你可以在终端窗口中运行pip install send2trash，安装该模块（参见附录A，其中更
详细地解释了如何安装第三方模块）。
利用send2trash，比Python常规的删除函数要安全得多，因为它会将文件夹和
160 Python编程快速上手——让繁琐工作自动化
文件发送到计算机的垃圾箱或回收站，而不是永久删除它们。如果因程序缺陷而用
send2trash删除了某些你不想删除的东西，稍后可以从垃圾箱恢复。
安装send2trash后，在交互式环境中输入以下代码：
>>> import send2trash
>>> baconFile = open('bacon.txt', 'a') # creates the file
>>> baconFile.write('Bacon is not a vegetable.')
25
>>> baconFile.close()
>>> send2trash.send2trash('bacon.txt')
一般来说，总是应该使用 send2trash.send2trash()函数来删除文件和文件夹。虽
然它将文件发送到垃圾箱，让你稍后能够恢复它们，但是这不像永久删除文件，不
会释放磁盘空间。如果你希望程序释放磁盘空间，就要用os和shutil来删除文件和
文件夹。请注意，send2trash()函数只能将文件送到垃圾箱，不能从中恢复文件。
9.2 遍历目录树
假定你希望对某个文件夹中的所有文件改名，包括该文件夹中所有子文件夹中
的所有文件。也就是说，你希望遍历目录树，处理遇到的每个文件。写程序完成这
件事，可能需要一些技巧。好在，Python提供了一个函数，替你处理这个过程。
请看C:\delicious文件夹及其内容，如图9-1所示。
图9-1 一个示例文件夹，包含3个文件夹和4个文件
这里有一个例子程序，针对图9-1的目录树，使用了os.walk()函数：
import os
for folderName, subfolders, filenames in os.walk('C:\\delicious'):
第9章 组织文件 161
print('The current folder is ' + folderName)
for subfolder in subfolders:
print('SUBFOLDER OF ' + folderName + ': ' + subfolder)
for filename in filenames:
print('FILE INSIDE ' + folderName + ': '+ filename)
print('')
os.walk()函数被传入一个字符串值，即一个文件夹的路径。你可以在一个 for
循环语句中使用os.walk()函数，遍历目录树，就像使用range()函数遍历一个范围的
数字一样。不像range()，os.walk()在循环的每次迭代中，返回3个值：
1．当前文件夹名称的字符串。
2．当前文件夹中子文件夹的字符串的列表。
3．当前文件夹中文件的字符串的列表。
所谓当前文件夹，是指 for 循环当前迭代的文件夹。程序的当前工作目录，不
会因为os.walk()而改变。
就像你可以在代码for i in range(10):中选择变量名称i一样，你也可以选择前面
列出来的3个字的变量名称。我通常使用foldername、subfolders和filenames。
运行该程序，它的输出如下：
The current folder is C:\delicious
SUBFOLDER OF C:\delicious: cats
SUBFOLDER OF C:\delicious: walnut
FILE INSIDE C:\delicious: spam.txt
The current folder is C:\delicious\cats
FILE INSIDE C:\delicious\cats: catnames.txt
FILE INSIDE C:\delicious\cats: zophie.jpg
The current folder is C:\delicious\walnut
SUBFOLDER OF C:\delicious\walnut: waffles
The current folder is C:\delicious\walnut\waffles
FILE INSIDE C:\delicious\walnut\waffles: butter.txt.
因为os.walk()返回字符串的列表，保存在subfolder和filename变量中，所以你
可以在它们自己的 for 循环中使用这些列表。用你自己定制的代码，取代 print()函
数调用（或者如果不需要，就删除for循环）。
9.3 用 zipfile 模块压缩文件
你可能熟悉 ZIP 文件（带有.zip 文件扩展名），它可以包含许多其他文件的压缩
内容。压缩一个文件会减少它的大小，这在因特网上传输时很有用。因为一个ZIP文
件可以包含多个文件和子文件夹，所以它是一种很方便的方式，将多个文件打包成一
个文件。这个文件叫做“归档文件”，然后可以用作电子邮件的附件，或其他用途。
162 Python编程快速上手——让繁琐工作自动化
利用zipfile模块中的函数，Python程序可以创建和打开（或解压）ZIP文件。
假定你有一个名为example.zip的zip文件，它的内容如图9-2所示。
图9-2 example.zip的内容
可以从http://nostarch.com/automatestuff/下载这个ZIP文件，或者利用计算机上
已有的一个ZIP文件，接着完成下面的操作。
9.3.1 读取ZIP 文件
要读取ZIP文件的内容，首先必须创建一个ZipFile对象（请注意大写首字母Z
和 F）。ZipFile 对象在概念上与 File 对象相似，你在第 8 章中曾经看到 open()函数
返回 File 对象：它们是一些值，程序通过它们与文件打交道。要创建一个 ZipFile
对象，就调用zipfile.ZipFile()函数，向它传入一个字符串，表示.zip文件的文件名。
请注意，zipfile是Python模块的名称，ZipFile()是函数的名称。
例如，在交互式环境中输入以下代码：
>>> import zipfile, os
>>> os.chdir('C:\\') # move to the folder with example.zip
>>> exampleZip = zipfile.ZipFile('example.zip')
>>> exampleZip.namelist()
['spam.txt', 'cats/', 'cats/catnames.txt', 'cats/zophie.jpg']
>>> spamInfo = exampleZip.getinfo('spam.txt')
>>> spamInfo.file_size
13908
>>> spamInfo.compress_size
3828
 >>> 'Compressed file is %sx smaller!' % (round(spamInfo.file_size / spamInfo
.compress_size, 2))
'Compressed file is 3.63x smaller!'
>>> exampleZip.close()
ZipFile 对象有一个 namelist()方法，返回 ZIP 文件中包含的所有文件和文件夹
的字符串的列表。这些字符串可以传递给ZipFile对象的getinfo()方法，返回一个关
于特定文件的ZipInfo对象。ZipInfo对象有自己的属性，诸如表示字节数的file_size
和compress_size，它们分别表示原来文件大小和压缩后文件大小。ZipFile对象表示
整个归档文件，而ZipInfo对象则保存该归档文件中每个文件的有用信息。
处的命令计算出example.zip压缩的效率，用压缩后文件的大小除以原来文件
第9章 组织文件 163
的大小，并以%s字符串格式打印出这一信息。
9.3.2 从ZIP 文件中解压缩
ZipFile对象的extractall()方法从ZIP 文件中解压缩所有文件和文件夹，放到当
前工作目录中。
>>> import zipfile, os
>>> os.chdir('C:\\') # move to the folder with example.zip
>>> exampleZip = zipfile.ZipFile('example.zip')
 >>> exampleZip.extractall()
> >> exampleZip.close()
运行这段代码后，example.zip 的内容将被解压缩到 C:\。或者，你可以向
extractall()传递的一个文件夹名称，它将文件解压缩到那个文件夹，而不是当前工作
目录。如果传递给 extractall()方法的文件夹不存在，它会被创建。例如，如果你用
exampleZip.extractall('C:\\ delicious')取代处的调用，代码就会从example.zip中解压
缩文件，放到新创建的C:\delicious文件夹中。
ZipFile对象的extract()方法从ZIP文件中解压缩单个文件。继续交互式环境中
的例子：
>>> exampleZip.extract('spam.txt')
'C:\\spam.txt'
>>> exampleZip.extract('spam.txt', 'C:\\some\\new\\folders')
'C:\\some\\new\\folders\\spam.txt'
>>> exampleZip.close()