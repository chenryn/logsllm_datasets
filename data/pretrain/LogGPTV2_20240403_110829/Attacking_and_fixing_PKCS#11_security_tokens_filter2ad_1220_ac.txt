behaving randomly. However, if a token implements its at-
tribute policy in the manner in which we can describe it, i.e.
as a combination of sticky on, sticky oﬀ, conﬂict and tied at-
tributes, then our process is complete in the sense that the
model built will reﬂect exactly what the token can do (mod-
ulo the usual Dolev-Yao abstractions for cryptography).
In our testing, the model performed very well: the Tookan
consistently found true attacks on ﬂawed tokens, and we
were unable to ﬁnd ‘by hand’ any attacks on tokens which
the model checker deemed secure. This suggests that real
devices do indeed implement their attribute policies in a
manner similar to our model.
4. RESULTS
In this section, we report experimental results from using
our tool to ﬁnd attacks on commercially available devices.
We acquired as many tokens as we could subject to our
lab budgets, and the retail or loan availability of single to-
kens and cards. Tokens cost anything from 20 to 400 USD,
with the global market estimated at 5 billion USD3. We also
tested our tool on two software simulators, intended for de-
velopment purposes. Table 3 summarises the outcome of the
analysis. For each token, we give a summary of the conﬁgu-
ration information obtained from the token and a core subset
of the attacks we found. Our testing on tokens is ongoing.
Latest results can be viewed at the project website4.
4.1 Implemented functionality
Columns ‘sym’ and ‘asym’ respectively indicate whether
or not symmetric and asymmetric key cryptography are sup-
ported, i.e.
the values of supports_symmetric_keys and
supports_asymmetric_keys from the extracted conﬁgura-
tion. We do not attempt to distinguish which particular
cryptographic algorithms are supported in our analysis, since
it is not relevant to the kinds of attacks we are looking for.
Both kinds of cryptography are available on all the devices
except three: the Eutron Crypto Identity ITSEC, Gemalto
Smart Enterprise Guardian and the Gemalto SafeSite Clas-
sic TPC IS V1, which only provide asymmetric key cryptog-
raphy. This last device should implement both symmetric
and asymmetric cryptography according to its speciﬁcation,
but the one we tested could not generate and use symmetric
keys. This may be a hardware issue with the speciﬁc token
we possess.
Column ‘cobj’ refers to the possibility of inserting exter-
nal, unencrypted, keys on the device via C_CreateObject
PKCS#11 function, i.e. whether create_object is included
in the list of functions in the extracted conﬁguration. This
is allowed by almost all of the analysed tokens. Although
this command does not directly violate a security property,
allowing known keys onto a device is generally a dangerous
3InfoSecurity Magazine
//fanaticmedia.com/infosecurity/archive/Feb10/
AuthenticationTokensstory.htm
4http://secgroup.ext.dsi.unive.it/pkcs11-security
February
2010,
http:
thing: an attacker might import an untrusted wrapping key
from outside and ask the device to wrap a sensitive internal
key with it [8].
The next column, ‘chan’, refers to the possibility of chang-
ing key attributes through C_SetAttributeValue. This func-
tionality can easily be abused if not limited in some way.
For example, it is clear (and stated in the standard) that it
should never be possible to make a sensitive key nonsensi-
tive. The behaviour of the C_SetAttributeValue command
for a particular token is reported to the model checker via the
sticky_on and sticky_off lists. A tick in this column indi-
cates that at least one attribute was found that was not both
sticky_on and sticky_off. The three Feitian devices cor-
rectly limit C_SetAttributeValue so that a sensitive key can
never be changed into nonsensitive. However, this is of no
use, since these tokens let any user directly access sensitive
and unextractable keys (see attacks a3 and a4), disregarding
the standard. The Sata and the Gemalto SafeSite Classic V2
devices are the only ones which allow the sensitive attribute
to be unset with no limitation; this is in a perverse sense
coherent, as just like the Feitian devices, they let any user
access sensitive/unextractable keys. An interesting case is
the Eracom HSM simulator, which allows attribute change,
but correctly implements the above mentioned policy, i.e.,
it disallows making a sensitive key nonsensitive, while also
making sensitive keys unreadable:
in this way, once a key
is set as sensitive it will never become directly accessible.
Subtler attacks on the keys are still possible by exploiting
wrap/unwrap functions (see below attacks a1 and a2).
The following two columns, ‘w’ and ‘ws’, respectively in-
dicate whether the token permits wrapping of nonsensitive
and sensitive keys. It is discouraging to observe that every
device providing ‘ws’, i.e., the wrapping of sensitive keys,
is also vulnerable to attack. All the other devices avoid
attacks at the price of removing such functionality. Forbid-
ding the wrapping of sensitive keys is a quite limiting de-
sign choice since it compromises any proper management of
sensitive keys among diﬀerent devices. Wrapping sensitive
keys is necessary in order to export/import those keys in a
secure way. Most of these ‘limited’ tokens simply remove
the whole wrapping functionality, i.e., both ‘w’ and ‘ws’.
There are however two devices which allow the wrapping of
nonsensitive keys only: SafeNet iKey and Siemens CardOS.
Although this choice is less restrictive than removing the
whole wrapping functionality, it seems diﬃcult to think of
an application where this would be a useful functionality. As
we will discuss in the next section, it is indeed possible to
produce a secure token conﬁguration which allows wrapping
(and unwrapping) of sensitive keys.
4.2 Attacks
Attack a1 is a wrap/decrypt attack as discussed in section
2. The attacker exploits a key k2 with attributes wrap and
decrypt and uses it to attack a sensitive key k1. Using our
notation from section 3:
Wrap:
SDecrypt:
h(n2, k2), h(n1, k1) → {|k1|}k2
h(n2, k2), {|k1|}k2 → k1
As we have discussed above, the possibility of inserting new
keys in the token (column ‘cobj’) might simplify further the
attack. It is suﬃcient to add a known wrapping key:
new n2−−−−→ h(n2, k2)
k2
CreateObject:
Wrap:
h(n2, k2), h(n1, k1) → {|k1|}k2
266Supported Functionality
chan w ws
Attacks found
a2
a4
X X X X
a1
a3
X
X X X X
X X
X X
X X
X X X
X X X
X X X
a5 mc
a1
a1
a3
a3
a3
Company
Aladdin
Athena
Bull
Eutron
Feitian
Feitian
Feitian
Gemalto
MXI Security
SafeNet
Sata
ACS
Athena
Gemalto
Gemalto
Gemalto
Siemens
Eracom
IBM
USB
Card
Soft
Device
Model
eToken PRO
ASEKey
Trustway RCI
Crypto Id. ITSEC
StorePass2000
ePass2000
ePass3003Auto
Smart Enterprise Guardian
Stealth MXP Bio
iKey 2032
DKey
ACOS5
ASE Smartcard
Cyberﬂex V2
SafeSite Classic TPC IS V1
SafeSite Classic TPC IS V2
CardOS V4.3 B
HSM simulator
opencryptoki 2.3.1
Acronym Description
sym asym cobj
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X X X X X X X a3
X X
X
a2
X X X
X
X X X X
X X X X
X
X X X a3
a4
a1
a1
X
X
Supported
functionality
Attacks
sym
asym
cobj
chan
w
ws
a1
a2
a3
a4
a5
mc
symmetric-key cryptography
asymmetric-key cryptography
inserting new keys via C_CreateObject
changing key attributes
wrapping keys
wrapping sensitive keys
wrap/decrypt attack based on symmetric keys