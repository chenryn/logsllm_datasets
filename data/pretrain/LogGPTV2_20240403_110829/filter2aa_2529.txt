# Bypassing Android Password Manager Apps Without Root

## Authors
- **Stephan Huber**
  - Mobile Security Researcher at Fraunhofer SIT
  - Enjoys teaching students in Android (app) hacking
  - Twitter: @teamsik

- **Siegfried Rasthofer**
  - Head of Department Secure Software Engineering at Fraunhofer SIT
  - Founder of CodeInspect
  - Web: [www.rasthofer.info](http://www.rasthofer.info)
  - Twitter: @teamsik

## Acknowledgements
- Benedikt Hiemenz
- Daniel Hitzel
- Daniel Magin
- Joseph Varghese
- Julien Hachenberger
- Max Kolhagen
- Michael Tröger
- Philipp Roskosch
- Wittmann Andreas

## Overview
This document outlines the methods and vulnerabilities that can be exploited to bypass Android password manager apps without root access. It covers various attack vectors, including premium feature exploitation, master password reset, and data extraction techniques.

## Common Password Managers and Their Popularity
| App | Google Play Downloads |
|-----|-----------------------|
| Keeper | 10 – 50 million |
| Keepsafe | 10 – 50 million |
| 1Password | 1 – 5 million |
| Dashlane | 1 – 5 million |
| Lastpass | 1 – 5 million |
| Avast | 0.5 – 1 million |
| MyPasswords | 0.5 – 1 million |
| F-Secure | 100 – 500 thousand |
| PasswordManager | 50 – 100 thousand |

## Vulnerabilities Identified
1. **Premium Features for Free**
   - Exploiting intent communication to enable premium features.
2. **Resetting Master Password with Ease**
   - Bypassing the common password reset process.
3. **Breaking C.I.A. without ROOT**
   - Exploiting security weaknesses in the app's architecture.
4. **Lost Device Scenario**
   - Exploiting the lost device scenario to gain unauthorized access.
5. **MitM Attack**
   - Intercepting and modifying network traffic.
6. **Via Third-Party App**
   - Using a third-party app to exploit vulnerabilities.

### Example: Premium Upgrade for Free
```java
adb shell am start -n com.example.app/.DatabaseSettings –ei PAID-STATUS 2

class DatabaseSettings {
    protected static boolean PAID = false;
    
    protected void onCreate(Bundle bundle) {
        if (getIntent().getIntExtra("PAID-STATUS", 0) == 2) {
            PAID = true;
        }
    }

    public void onActivityCreated(Bundle bundle) {
        checkBoxForBackup.setEnabled(PAID);
    }
}
```

### Resetting Master Password
#### Common Password Reset Process
1. **Forgot Password**
2. **Verification Code via Email**
3. **Security Question**
4. **Reset Master Password**

#### Lost-Device Scenario
```bash
adb shell am start -n com.xyz.android_apps.noname/.DeepLinkActivity
```

### Extracting the Master Secret
#### Extraction Methods
- **ADB Backup**
- **MitM Attack**
- **Browser File Access**
- **Residue Attack**

#### Decryption Methods
- **Plaintext**
- **Custom Crypto**
- **Hardcoded Symmetric Keys**
- **Custom Obfuscation**

### Authentication Process
#### HTTP + Custom Crypto
1. **HTTP POST Request**
2. **Seed Generation**
3. **Key Derivation**
4. **Data Encryption/Decryption**

```java
seed = time[ms];
key = random(seed);
enc_data = AES(key, auth_data);
dec_data = AES(key, enc_data);
```

### Best Practices: Secure Communication
- **Correct SSL/TLS Implementation**
- **Stronger SSL/TLS (Pinning)**
- **Android 7 Supports Pinning (Security Configuration File)**
- **Use Libraries with Pinning Support (e.g., OkHttp)**

### Browser File Access
#### API Accessing Browser Elements
- **Credentials**
- **Password Manager**

#### Injection
- **Base64 Encoded Data**
- **File Path**: `file:///data/data/package.name/shared_prefs/passwd_pref.xml`

### Residue Attack
#### Android AccountManager
- **Centralized Registry for User’s Online Accounts**
- **SQLITE Database for Storing Tokens or Temporary Credentials**
- **API Provides Access for Applications**

#### Example
```bash
/data/system/users/0 # ls -l accounts.db
-rw-rw---- system system 241664 2017-04-03 10:58 accounts.db
```

### Demo Time!
#### AccountManager
| ID | Email | Type | Token |
|----|-------|------|-------|
| 1  | PI:EMAIL | com.account | secret |

### Recommendations
1. **Use Android KeyStore**
2. **Key Derivation (e.g., PBKDF2, Conceal, bcrypt)**
3. **No Static Keys**
4. **Use AES/CBC or AES/GCM**
5. **Disable Backup Flag**
6. **Do Not Store Master Pass in Plaintext**
7. **Do Not Store Master Pass in Local App Folder**

### Summary of Vulnerabilities
| App | Master/PIN | Hardcoded Key | Sandbox Bypass | Side Channel | Subdomain | Data Leakage | Partial Encryption | Broken Sync |
|-----|------------|---------------|----------------|--------------|-----------|--------------|--------------------|-------------|
| Keeper | X | X | X | X | X | X |  |  |
| LastPass | X | X | X | X | X | X |  |  |
| 1Password | X | X | X | X | X | X |  |  |
| MyPasswords | X | X | X | X | X | X |  |  |
| Avast | X | X | X | X | X | X |  |  |
| F-Secure | X | X | X | X | X | X |  |  |
| Keepsafe | X | X | X | X | X | X |  |  |
| PasswordManager | X | X | X | X | X | X |  |  |

### Contact Information
- **Stephan Huber**
  - Email: [PI:EMAIL](mailto:PI:EMAIL)
- **Siegfried Rasthofer**
  - Email: [PI:EMAIL](mailto:PI:EMAIL)
  - Twitter: @teamsik
  - Website: [www.team-sik.org](http://www.team-sik.org)

---

**This is the end, my friend.**