  1. EHLO主机名  
对于每个EHLO（或HELO）命令，exim将主机名的指针存储在sender_host_name中。  
store_free（）旧名称  
store_malloc（）新名称
        smtp_in.c: 1833 check_helo
    /* Discard any previous helo name */
    if (sender_helo_name != NULL)
    {
    store_free(sender_helo_name);
    sender_helo_name = NULL;
    }
    ...
    if (yield) sender_helo_name = string_copy_malloc(start);
    return yield;
  2. 无法识别的命令  
对于每个无法识别的带有不可打印字符的命令，exim都会分配一个缓冲区来将其转换为可打印的  
store_get（）存储错误消息
        smtp_in.c: 5725 smtp_setup_msg
    done = synprot_error(L_smtp_syntax_error, 500, NULL,
     US"unrecognized command");
  3. AUTH  
在大多数身份验证过程中，exim使用base64编码与客户端进行通信。 编码和解码字符串存储在由store_get（）分配的缓冲区中。  
store_get（）用于字符串  
可以包含不可打印的字符，NULL字节  
不一定是null终止
  4. 重置EHLO / HELO，MAIL，RCPT  
每当有命令正确完成时，exim就会调用smtp_reset（）。
此函数调用store_reset（）将块链重置为重置点，这意味着在last命令后所有通过store_get（）分配的storeblocks都会被释放。  
store_reset（）重置点（在函数的开始处设置）  
在释放块的时候添加
        smtp_in.c: 3771 smtp_setup_msg
    int
    smtp_setup_msg(void)
    {
    int done = 0;
    BOOL toomany = FALSE;
    BOOL discarded = FALSE;
    BOOL last_was_rcpt = FALSE;
    void *reset_point = store_get(0);
    DEBUG(D_receive) debug_printf("smtp_setup_msg entered\n");
    /* Reset for start of new message. We allow one RSET not to be counted as a
    nonmail command, for those MTAs that insist on sending it between every
    message. Ditto for EHLO/HELO and for STARTTLS, to allow for going in and out of
    TLS between messages (an Exim client may do this if it has messages queued up
    for the host). Note: we do NOT reset AUTH at this point. */
    smtp_reset(reset_point);
# Exploit steps
* * *
为了充分利用off-by-one，解码后的base64数据下的块应该易于释放和控制。
经过多次尝试，我们发现sender_host_name是一个不错的选择。
我们安排堆布局，为base64数据留下一个空闲的块，高于sender_host_name。我们在sender_host_name之前留下一个空闲快给base64数据  
  1. Put a huge chunk into unsorted bin  
首先，我们发送一个包含巨大主机名的EHLO消息，以使其在堆中分配和释放,留下一个0x6060长度的unsorted bin。
  2. Cut the first storeblock  
然后我们发送一个无法识别的字符串来触发store_get（）并在释放的块内分配storeblock。
  3. Cut the second storeblock and release the first one  
我们再次发送EHLO消息以获得第二个存储区。 由于EHLO完成后调用了smtp_reset，所以第一个块被顺序释放。  
堆布局准备好后，我们可以使用off-by-one覆盖原始块大小。 我们将0x2021修改为0x20f1，这稍微扩展了块。  
  4. Send base64 data and trigger off-by-one  
要触发off-by-one，我们启动一个AUTH命令来发送base64数据。 溢出字节正好覆盖下一个块的第一个字节并扩展下一个块。
  5. Forge a reasonable chunk size  
由于块已扩展，下一块块的开始被更改为原始块的内部。 因此，我们需要让它看起来像一个正常的块来通过glibc的理智检查。
我们在这里发送另一个base64字符串，因为它需要空字节和不可打印字符来伪造块大小。
  6. Release the extended chunk  
要控制扩展块的内容，我们需要首先释放块，因为我们无法直接编辑块。 也就是说，我们应该发送一个新的EHLO消息来释放旧的主机名。
但是，正常的EHLO消息在成功之后会调用smtp_reset，这可能会导致程序中止或崩溃。 为了避免这种情况，我们发送一个无效的主机名称，如a+。
  7. Overwrite the next pointer of overlapped storeblock  
块释放后后，我们可以使用AUTH检索它并覆盖部分重叠的存储块。 这里我们使用一种称为partial write的技巧。
有了这个，我们可以在不破坏ASLR（地址空间布局随机化）的情况下修改指针。
我们部分地改变了包含ACL（访问控制列表）字符串的storeblock的下一个指针。 ACL字符串是由一组全局指针指向的，例如：
        uschar *acl_smtp_auth;
    uschar *acl_smtp_data;
    uschar *acl_smtp_etrn;
    uschar *acl_smtp_expn;
    uschar *acl_smtp_helo;
    uschar *acl_smtp_mail;
    uschar *acl_smtp_quit;
    uschar *acl_smtp_rcpt
这些指针在exim进程开始时根据配置进行初始化设置。 例如，如果configure中有一行acl_smtp_mail =
acl_check_mail，则指针acl_smtp_mail指向字符串acl_check_mail。 无论何时使用MAIL
FROM，exim都会先扩展acl_check_mail来执行ACL检查。 在扩展时，如果遇到$ {run
{cmd}}，exim会尝试执行命令，所以只要我们控制ACL字符串，就可以实现代码执行。
另外，我们不需要直接劫持程序控制流程，因此我们可以轻松地绕过诸如PIE（位置独立可执行文件），NX等保护机制。
  8. Reset storeblocks and retrieve the ACL storeblock  
现在，ACL存储块位于链接列表链中。 一旦smtp_reset（）被触发，它将被释放，然后我们可以通过分配多个块来再次检索它。
  9. Overwrite ACL strings and trigger ACL check  
最后，我们覆盖包含ACL字符串的整个块。 现在我们发送诸如EHLO，MAIL，RCPT等命令来触发ACL检查。
一旦我们触及配置中定义的acl，我们就可以实现远程代码执行。
参考链接：  