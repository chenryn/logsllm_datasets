### Attack Results on Ciphertext Blocks

**Table 1.** Attack results applied to ciphertext blocks containing 1, 2, and 3 unknown bytes from a group of alphabetic and numeric characters.

| Queries | Unknown Bytes |
|---------|---------------|
| 37      | 1             |
| 2,145   | 2             |
| 143,811 | 3             |
| 37      | 1             |
| 2,139   | 2             |
| 143,409 | 3             |

The variation in the number of queries is due to the different plaintext validation models used in the XML Encryption and JWE standards. The JWE standard employs a stricter verification for padding, which reduces the number of oracle queries required by the attacker.

### Extension to Full Plaintext Recovery Attack

Our evaluation demonstrates that an attacker can efficiently decrypt ciphertexts with a large number of known bytes in the plaintext. An attacker who can control parts of the plaintext can also recover high-entropy plaintexts using the technique from Duong and Rizzo's BEAST attack [25].

**Basic Idea:**
- The attacker uses their control over the plaintext to prepend the unknown high-entropy plaintext with \( n - 1 \) known bytes, where \( n \) is the block size of the block cipher in bytes.
- This leaves only the last byte of the first block unknown, which can be recovered relatively efficiently.
- The attacker then prepends the high-entropy plaintext with \( n - 2 \) known bytes, and the process continues until the full high-entropy plaintext is recovered.

By repeatedly executing this divide-and-conquer strategy, the attacker can recover the entire high-entropy plaintext.

### Practical Examples of BC Attacks on Public-Key Cryptography

Both XML Encryption and JWE specify public-key encryption according to PKCS#1 v1.5 and v2.0 as mandatory. Similarly, both XML Signature and JWS specify PKCS#1 v1.5 signatures as mandatory.

**Bleichenbacher's Attack on PKCS#1 v1.5:**
- **Requirements:**
  1. The application allows the RSA public key \((N, e)\) used for PKCS#1 v2.0 encryption (or RSA-signatures) to also be used for PKCS#1 v1.5 encryption.
  2. The application provides a PKCS#1 v1.5 validity oracle.

It has been observed [37] that both XML Encryption and JWE inherently provide PKCS#1 v1.5 validity oracles. Therefore, Property 2 is met by these standards.

**Property 1:**
- Neither standard distinguishes between keys for PKCS#1 v2.0 encryption, PKCS#1 v1.5 encryption, and PKCS#1 v1.5 signatures. Some providers even recommend reusing RSA keys across different algorithms.
- The metadata accompanying the ciphertext (e.g., EncryptedKey element in XML Encryption, header segment in JWE) are typically not integrity-protected, allowing an attacker to change them arbitrarily.

This enables an attacker to trick the receiver into applying the PKCS#1 v1.5 decryption algorithm to an arbitrary value \( y \) modulo \( N \). Combined with the PKCS#1 v1.5 validity oracle and Bleichenbacher’s attack [13], this allows the attacker to invert the RSA function \( m \rightarrow m^e \mod N \), enabling decryption of PKCS#1 v2.0 ciphertexts or forging RSA signatures with respect to key \((N, e)\).

### Experimental Results

To assess the practicality and performance of the attack, we implemented Bleichenbacher’s attack on XML Encryption [13, 37] and applied it to the Nimbus-JWT library. The PKCS#1 v1.5 validity oracle was provided by exceptions thrown by the library.

**Experiment:**
- Repeated 10,000 times with a fresh 1024-bit RSA key generated using the standard Java key pair generator.
- Decrypting a random PKCS#1 v2.0 ciphertext took about 171,000 oracle queries on average.
- Forging a JSON Web Signature for an arbitrary message took about 218,000 queries on average.

**Table 2.** Experimental results of BC attacks on PKCS#1 v2.0 ciphertexts and PKCS#1 v1.5 signatures.

| Type                          | Mean # of Queries | Median # of Queries | Maximum # of Queries | Minimum # of Queries |
|-------------------------------|-------------------|---------------------|----------------------|----------------------|
| PKCS#1 v2.0 Ciphertext        | 171,228           | 59,236              | 142,344,067          | 4,089                |
| PKCS#1 v1.5 Signature         | 218,305           | 66,984              | 395,671,626          | 20,511               |

Attacks with 2048 and 4096-bit RSA keys resulted in only a slightly higher number of requests.

**Improvements:**
- Bardou et al. [7] have described significantly improved variants of Bleichenbacher’s attack, reducing the number of oracle queries dramatically. We expect these improvements to lead to more efficient BC attacks.

### Practical Countermeasures

#### Unifying Error Messages
- Suppressing detailed error messages on the application level is one approach to prevent attacks based on such messages.
- However, other side channels, such as timing differences or techniques like XML Encryption wrapping, can still enable efficient attacks even if the server responds with a unified error message.

#### Disallowing Legacy Algorithms
- Disallowing all legacy algorithms would destroy interoperability for parties that can only run older algorithms.
- For example, the attack on XML Encryption showed the insecurity of CBC mode, but GCM adoption is slow due to platform limitations.

#### Key Separation
- **Symmetric Algorithms:** The key separation countermeasure is simple and effective. We recommend its application in the final version of JWE.
- **Asymmetric Algorithms:** The key separation principle can prevent BC attacks on public-key schemes like PKCS#1 v2.0. However, some standards and providers still allow the use of the same RSA key pair for different cryptographic algorithms.

### Communication with Developers

We discussed our attacks with developers of several frameworks and summarize their approaches to counter them.

#### Apache CXF and WSS4J
- **WS-Security Policy:** Apache CXF supports the WS-Security Policy standard, which allows the server to define specific algorithms that clients must use. However, the current design checks algorithms after decryption, allowing adversaries to use the server as a plaintext/ciphertext validity oracle.
- **Decrypting Only Signed Elements:** Setting the `REQUIRE SIGNED ENCRYPTED DATA ELEMENTS` parameter to true can thwart our attacks, but this would break many existing use-cases.

#### Ping Identity
- Ping Identity suggested using the same asymmetric key pair for signature and encryption. After notification, they updated their documentation and changed their implementation to decrypt only signed XML ciphertexts. RSA PKCS#1 v1.5 will be disabled by default for senders, though receivers will still support it for interoperability.

#### Shibboleth
- Shibboleth supports federated identity management and decryption of XML messages. After communication, they decided to blacklist RSA PKCS#1 v1.5 by default in the newest Service provider version (Shibboleth 2.5.0).

### Conclusions

Backwards compatibility attacks arise when a cryptographic standard offers a choice between several algorithms, some of which have known vulnerabilities. The mere presence of these insecure options can adversely affect the security of state-of-the-art algorithms. We demonstrated practical attacks on W3C’s XML Encryption and JSON Web Encryption and proposed practical and effective countermeasures to mitigate these attacks.