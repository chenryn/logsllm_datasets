queries
37
2,145
143,811
37
2,139
143,409
Table 1. Attack results applied on ciphertext
blocks containing 1, 2, and 3 unknown bytes
from a group of alphabetic and numeric char-
acters.
The different numbers of queries is caused by different
plaintext validation models being used in the XML Encryp-
tion and JWE standards: the validation model in JWE em-
ployes a stricter veriﬁcation for the padding, which results
in less oracle queries being needed by the attacker.
Extension to a Full Plaintext Recovery Attack.
Our
evaluation shows that an attacker is able to efﬁciently de-
crypt ciphertexts with a large number of known bytes in the
plaintext. We note that an attacker who is able to control
parts of the plaintext is also able to recover high-entropy
plaintexts, by employing the technique from Duong and
Rizzo’s BEAST attack [25].
Let us sketch the basic idea of this technique. The at-
tacker uses its control over the plaintext to prepend the
unknown high-entropy plaintext with n − 1 known bytes,
where n is the block-size of the block cipher in bytes. Thus,
only the last byte of the ﬁrst block is unknown to the at-
tacker, and can be recovered relatively efﬁciently with the
above procedure. In the next step, the attacker prepends the
high-entropy plaintext with n − 2 known bytes. Since the
ﬁrst byte of the plaintext is already recovered, there is again
only one unknown byte in the resulting plaintext. By exe-
cuting Algorithm 1 repeatedly with this divide-and-conquer
strategy, the attacker is able to recover the full high-entropy
plaintext.
5.3 Practical Examples of BC Attacks on
Public-Key Cryptography
As described in Sections 5.1.1 and 5.1.2, both XML En-
cryption and JWE specify public-key encryption according
to PKCS#1 v1.5 and v2.0 as being mandatory. Similarly,
both XML Signature and JWS specify PKCS#1 v1.5 signa-
tures as being mandatory.
Recall from Section 4.3 that the known attack of Ble-
ichenbacher on PKCS#1 v1.5 can be used to decrypt
PKCS#1 v2.0 ciphertexts or to forge RSA-signatures if two
requirements are met:
1. The application allows the RSA public-key (N, e) used
for PKCS#1 v2.0 encryption (or RSA-signatures) to be
also used for PKCS#1 v1.5 encryption; and
2. the application provides a PKCS#1 v1.5 validity ora-
cle.
It was recently observed [37] that both XML Encryption
and JWE inherently provide PKCS#1 v1.5 validity oracles.9
Thus, Property 2 is met by XML Encryption and JWE.
It remains to show that Property 1 is also met. Indeed,
neither standard distinguishes between keys for PKCS#1
v2.0 encryption, PKCS#1 v1.5 encryption, and PKCS#1
v1.5 signatures (as noted before, some providers even rec-
ommend re-use of RSA-keys across different algorithms).
Let (N, e) be the RSA public key of a receiver. A cipher-
text according to PKCS#1 (regardless of v1.5 or v2.0), con-
sists of a single integer y modulo N. Thus, in order to apply
the correct decryption algorithm to y, the receiver needs ad-
ditional information, namely the version (v1.5 or v2.0) of
PKCS#1 according to which the ciphertext c was encrypted
by the sender. In both XML Encryption and JWE, this infor-
mation is provided in metadata10 accompanying the cipher-
text. These metadata are (typically) not integrity-protected.
Thus, an attacker can change them arbitrarily.
This enables an attacker to trick the receiver into apply-
ing the PKCS#1 v1.5 decryption algorithm to an arbitrary
value y modulo N. In combination with the PKCS#1 v1.5
validity oracle from [37] and Bleichenbacher’s attack [13],
this sufﬁces to invert the RSA-function m (cid:55)→ me mod N
on an arbitrary value y. This in turn allows to decrypt
PKCS#1 v2.0 ciphertexts or to forge RSA-signatures with
respect to key (N, e), as explained in Section 4.3.
Experimental Results.
In order to assess the practicabil-
ity and performance of the attack, we implemented Ble-
ichenbacher’s attack on XML Encryption [13, 37] and ap-
plied it to the Nimbus-JWT library. The PKCS#1 v1.5 va-
lidity oracle was provided by exceptions thrown by this li-
brary.11
The experiment was repeated 10,000 times, each time
with a fresh 1024-bit RSA-key, which was generated using
the standard Java key pair generator.12 Decrypting a random
PKCS#1 v2.0 ciphertext took about 171,000 oracle queries
on average. Forging a JSON Web Signature for an arbi-
trary message took about 218,000 queries on average. See
9Typically PKCS#1 v1.5 validity oracles are a result of careless imple-
mentations, provided by timing differences or distinguishable error mes-
sages. A noteworthy aspect of [37] is, that the availability of these validity
oracles is not (only) an implementational issue, but an inherent property
of both standards. This is a consequence of the way in which PKCS#1
v1.5-based public-key encryption is combined with CBC-based symmet-
ric encryption, see [37] for details.
10The EncryptedKey element in XML Encryption, the header seg-
ment in JWE.
11In practice one would instead use the more elaborate attack techniques
of [37] to determine whether a given ciphertext is PKCS#1 v1.5 valid.
12java.security.KeyPairGenerator.
Mean Median Maximum # Minimum #
of queries
of queries
171,228
59,236
142,344,067
4,089
218,305
66,984
395,671,626
20,511
PKCS#1 v2.0
Ciphertext
PKCS#1 v1.5
Signature
Table 2. Experimental results of BC attacks on PKCS#1 v2.0 ciphertexts and PKCS#1 v1.5 signatures.
Table 2 for details.
Executing the attacks with 2048 and 4096-bit RSA-keys
resulted in only a slightly higher number of requests.
Improvements. Very recently, Bardou et al. [7] have de-
scribed signiﬁcantly improved variants of Bleichenbacher’s
attack that allow to reduce the number of oracle queries dra-
matically. We did not implement these optimizations yet,
but since the improvements in [7] are very general, we ex-
pect that they lead to much more efﬁcient BC attacks, too.
5.4 Practical Countermeasures
In this section we discuss why several seemingly sim-
ple countermeasures (cf. Sections 3.2 and 4.4) are hard to
employ in practice.
5.4.1 Unifying Error Messages
In our experimental analysis, we applied BC attacks on the
library level by exploiting (relatively detailed) error mes-
sages returned by the decryption algorithm. One obvious
approach to prevent attacks based on such detailed error
messages is to suppress all error messages on the applica-
tion level, hoping that an attacker that does not receive any
information about the reason for a decryption failure (in-
correct decryption, invalid plaintext format, etc.) will not
be able to mount the attack with reasonable efﬁciency.
However, we note that there exist several other additional
side-channels turning servers into validity oracles that en-
able efﬁcient attacks, even if the server responds with a uni-
ﬁed error message. First, it has been shown that by attacking
XML Encryption in Web Services an attacker can determine
if a ciphertext contains a valid plaintext or not even if the
Web Service returns only two types of responses (valid or
invalid) by employing a technique called XML Encryption
wrapping [67]. This technique can be applied to symmet-
ric as well as asymmetric ciphertexts, and has proven to be
practical when applied to major Web Services frameworks,
even if the messages are authenticated with XML Signa-
tures. We believe similar attacks can be executed against
JWE libraries, too.
Second, there may be further side channels. A classical
example is different timing behaviour in case of different
errors, which again would allow to distinguish which type
of error has occurred [37].
5.4.2 Disallowing Legacy Algorithms
Another obvious countermeasure would be to disallow all
legacy algorithms and to use only state-of-the-art cryptosys-
tems. Unfortunately, this countermeasure would also de-
stroy interoperability for all parties that are only capable
of running older algorithms. This is a real issue: for ex-
ample, the attack on XML Encryption from [38] showed
the insecurity of CBC-mode in XML Encryption. There-
fore GCM is now available as an additional option in the
standard. Even though the attack was published almost one
year ago (and was disclosed to vendors and developers sev-
eral months earlier), users applying important Web Services
frameworks like Apache Axis2 [4] or SAML-based Single
Sign-On [15] frameworks like Shibboleth [66] cannot adapt
GCM as the platforms these frameworks are running on do
not support GCM.
In the case of XML Encryption and Web Services one
may also apply WS-Security Policy [48]. This standard al-
lows the deﬁnition of policies forcing usage of speciﬁc algo-
rithms in client-server communication. However, it is still
questionable how strictly these policy restrictions are imple-
mented. We present some details about the implementation
of this standard in Apache CXF in Section 5.5.
5.4.3 Key Separation
Symmetric Algorithms.
The key separation counter-
measures proposed in Section 3.2 is simple and effective.
As the JWE standard is still in a draft version, we strongly
recommend to consider application of this principle in the
ﬁnal version of JWE. To our knowledge, the implementa-
tion of key separation is currently under discussion in the
XML Encryption Working Group, motivated by the attacks
presented in this paper.
Asymmetric Algorithms.
The key separation princi-
ple can also prevent BC attacks on public-key schemes
like PKCS#1 v2.0. Unfortunately, it seems that the im-
portance of this principle is not well-understood in prac-
tice. For instance, the WS-Security Policy standard [48]
explicitly mentions in Section 7.5 that it is possible to use
the same RSA key pair for encryption and signature pro-
cessing. Moreover, some providers suggest their users to
use the same RSA key pair for different cryptographic algo-
rithms [31, 60].
We have learned that the XML Encryption Working
Group will include considerations about key separation
mechanisms in the XML Encryption standard.
5.5 Communication with Developers
We discussed our attacks with developers of several
frameworks. In this section we summarize some approaches
that developers have followed to counter them.
The most recent draft of XML Encryption which in-
cludes AES-GCM is not widely adopted yet (note that the
ﬁrst public version dates to March 2012). The only frame-
work we are aware of that currently supports this version is
Apache CXF [5].
5.5.1 Apache CXF and WSS4J
Apache CXF is one of the Web Services frameworks utiliz-
ing the tested Apache WSS4J library [6].
WS-Security Policy. One possibility to restrict the list of
algorithms that can be used by Web Services is provided by
the WS-Security Policy standard [48]. This standard allows
the server to deﬁne speciﬁc algorithms that clients must use.
Apache CXF supports the WS-Security Policy standard and
correctly checks the algorithms used in the encrypted XML
messages. However, the speciﬁc design of the Apache CXF
framework means that algorithms used for data decryption
are checked after the message is decrypted. This means
the adversary is able to force the server to decrypt arbitrary
data with arbitrary cryptographic algorithms, which in turn
allows to use the server as an plaintext/ciphertext validity
oracle, as required for our attacks.
The Apache CXF developers are now redesigning
Apache WSS4J and Apache CXF implementations to check
the used security algorithms before ciphertexts are de-
crypted.
Decrypting only signed elements. Another countermea-
sure thwarting our attacks is to process only those encrypted
elements that were signed by XML Signatures [67]. Apache
WSS4J library includes a conﬁguration parameter called
REQUIRE SIGNED ENCRYPTED DATA ELEMENTS.
If
then any symmetrically encrypted
this is set to true,
EncryptedData elements that are not signed are re-
jected without processing. In the default conﬁguration, this
parameter is set to false.
The developers have considered to default this parameter
to true for EncryptedData elements secured with the
CBC mode encryption in the next framework release. How-
ever, they have decided against this modiﬁcation as it would
break many existing use-cases.
5.5.2 Ping Identity
Ping Identity [36] is an identity management solution
provider supporting SAML-based Single Sign-On [15]. It
provides their customers with products such as PingFed-
erate that can play the role of an Identity Provider (which
authenticates identities and issues SAML tokens) or a Ser-
vice Provider (which validates SAML tokens and signs in
to integrated systems). Both products enable users to apply
XML Encryption.
In its documentation, Ping Identity suggested its users
could use the same asymmetric key pair for signature as
well as encryption processing [60]. We notiﬁed the frame-
work developers. The Ping Identity website was updated
immediately and the suggestion removed. Moreover, we
cooperated with the developers and evaluated XML En-
cryption processing in their Service provider and Identity
provider implementations. We found that our BC attacks
were applicable to the Service provider implementation in
all the provided settings. The BC attacks against the Iden-
tity provider implementation could be executed for speciﬁc
settings where XML Signatures are not applied.13
The Ping Identity developers have changed their imple-
mentation such that only signed XML ciphertexts will be
decrypted. This will be available in the next release of their
product. Furthermore, the RSA PKCS#1 v1.5 algorithm
will be disabled by default for message creators (senders).
For interoperability reasons receivers will still need to sup-
port RSA PKCS#1 v1.5. Even though the latter still enables
BC attacks, this is a step towards phasing out RSA PKCS#1
v1.5.
5.5.3 Shibboleth
Shibboleth [66] is a SAML-based framework supporting
federated identity management deployments. Decryption
of XML messages is supported only in the Service provider
implementation. XML Encryption is enabled by default in
the Shibboleth deployments.
13The attacks against the Identity provider are signiﬁcant, since they
allow an attacker to forge Identity provider signatures for arbitrary SAML
tokens when the same key pair for signature and encryption processing is
used.
After we communicated the attacks to the framework de-
velopers, they decided to blacklist RSA PKCS#1 v1.5 by
default in the newest Service provider version (Shibboleth
2.5.0).
6. Conclusions
We explored backwards compatibility attacks, which
arise when a cryptographic standard offers a choice between
several algorithms to perform the same cryptographic task
and when some of those algorithms have known vulnera-
bilities. Our main point is that the mere presence of these
insecure options can adversely affect the security of state-
of-the-art algorithms, which would otherwise be invulner-
able to attack. We demonstrated this point by describing
practical attacks on the current versions of two important
cryptographic standards, namely W3C’s XML Encryption
and JSON Web Encryption. We proposed practical and ef-
fective countermeasures that thwart these backwards com-