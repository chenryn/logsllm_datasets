attacks and store them in the main-memory which subsequently
speeds up after-the-fact investigation.
ACKNOWLEDGMENTS
We thank the anonymous reviewers for their comments and sugges-
tions. Wajih Ul Hassan was partially supported by the Sohaib and
Sara Abbasi Computer Science Fellowship. This work was funded in
part by the NSF under contracts CNS-16-57534 and CNS-17-50024.
Any opinions, findings, conclusions, or recommendations expressed
in this material are those of the authors and do not necessarily re-
flect the views of their employers or the sponsors.
12
REFERENCES
[1] [n.d.]. Cortex XDR. https://www.paloaltonetworks.com/cortex/cortex-xdr.
[2] [n.d.]. CrowdStrike. https://www.crowdstrike.com/.
[3] [n.d.]. Event tracing. https://docs.microsoft.com/en-us/windows/desktop/ETW/
event-tracing-portal.
[4] [n.d.]. The Linux audit daemon. https://linux.die.net/man/8/auditd.
[5] [n.d.]. MTTD vs MTTK.
https://www.threatstack.com/blog/how-to-use-
automation-to-decrease-mean-time-to-know.
[6] [n.d.]. Netwrix Auditor. https://www.netwrix.com/network_auditing_software_
features.html.
[7] 2014. CVE-2014-6271. https://nvd.nist.gov/vuln/detail/CVE-2014-6271.
[8] 2018. Persistent netcat backdoor. https://www.offensive-security.com/metasploit-
unleashed/persistent-netcat-backdoor/.
[9] 2018. Ransom.Wannacry. https://symc.ly/2NSK5Rg.
[10] 2018. VPNFilter: New Router Malware with Destructive Capabilities. https:
//symc.ly/2IPGGVE.
[11] 2019. Apache Kafka. https://kafka.apache.org/.
[12] 2019. Automated Incident Response: Respond to Every Alert. https://swimlane.
com/blog/automated-incident-response-respond-every-alert/.
[13] 2019. Automated Security Intelligence (ASI). https://www.nec.com/en/global/
techrep/journal/g16/n01/160110.html.
[14] 2019. Breach Detection. https://link.medium.com/6HpgbLgZuW.
[15] 2019. Cyber Threat Hunting Review. https://blog.usejournal.com/cyber-threat-
hunting-basics-52fca11a4e1d.
endpoint-threat-detection/.
[16] 2019. Endpoint Monitoring & Security. https://logrhythm.com/solutions/security/
[17] 2019. Google core libraries for Java. https://github.com/google/guava.
[18] 2019. How Many Alerts is Too Many to Handle? https://www2.fireeye.com/
StopTheNoise-IDC-Numbers-Game-Special-Report.html.
[19] 2019.
How WannaCrypt attacks.
https://www.zdnet.com/article/how-
wannacrypt-attacks/.
[20] 2019. MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption. https:
//www.rapid7.com/db/modules/exploit/windows/smb/ms17_010_eternalblue.
[21] 2019. Neo4j. https://neo4j.com/.
[22] 2019. New Research from Advanced Threat Analytics. https://prn.to/2uTiaK6.
[23] 2019. Over 18,000 Redis Instances Targetted. https://duo.com/decipher/over-
18000-redis-instances-targeted-by-fake-ransomware.
[24] 2019. Petya ransomware outbreak. https://www.symantec.com/blogs/threat-
intelligence/petya-ransomware-wiper.
[25] 2019. Redis in-memory data structure store. https://redis.io/.
[26] 2019. RedisGraph - a graph database module for Redis. https://oss.redislabs.com/
redisgraph/.
[27] 2019. RocksDB | A persistent key-value store. https://rocksdb.org/.
[28] 2019. What is SIEM? https://logz.io/blog/what-is-siem/.
[29] 2 [n.d.]. Equifax says cyberattack may have affected 143 million in the U.S.
https://www.nytimes.com/2017/09/07/business/equifax-cyberattack.html.
[30] Adam Bates, Wajih Ul Hassan, Kevin Butler, Alin Dobra, Bradley Reaves, Patrick
Cable, Thomas Moyer, and Nabil Schear. 2017. Transparent web service auditing
via network provenance functions. In WWW.
[31] Adam Bates, Dave Tian, Kevin R. B. Butler, and Thomas Moyer. 2015. Trustworthy
whole-system provenance for the Linux kernel. In USENIX Security.
[32] Chen Chen, Harshal Tushar Lehri, Lay Kuan Loh, Anupam Alur, Limin Jia,
Boon Thau Loo, and Wenchao Zhou. 2017. Distributed Provenance Compression.
In SIGMOD.
[33] Marco Cova, Davide Balzarotti, Viktoria Felmetsger, and Giovanni Vigna. 2007.
Swaddler: An approach for the anomaly-based detection of state violations in web
applications. In International Workshop on Recent Advances in Intrusion Detection.
Springer, 63–86.
[34] Hervé Debar and Andreas Wespi. 2001. Aggregation and correlation of intrusion-
detection alerts. In International Workshop on Recent Advances in Intrusion Detec-
tion. Springer, 85–103.
[35] David Ediger, Rob McColl, Jason Riedy, and David A Bader. 2012. Stinger: High
performance data structure for streaming graphs. In Conference on High Perfor-
mance Extreme Computing. IEEE.
[36] FireEye. 2019.
Incident Investigation. https://www.fireeye.com/solutions/
incident-investigation.html.
[37] Peng Gao, Xusheng Xiao, Ding Li, Zhichun Li, Kangkook Jee, Zhenyu Wu,
Chung Hwan Kim, Sanjeev R. Kulkarni, and Prateek Mittal. 2018. SAQL: A
Stream-based Query System for Real-Time Abnormal System Behavior Detection.
In USENIX Security Symposium.
[38] Ashish Gehani and Dawood Tariq. 2012. SPADE: Support for provenance auditing
in distributed environments. In Middleware (Montreal, Quebec, Canada).
[39] Xueyan Han, Thomas Pasqueir, Adam Bates, James Mickens, and Margo Seltzer.
2020. Unicorn: Runtime Provenance-Based Detector for Advanced Persistent
Threats. In NDSS.
[40] Wajih Ul Hassan, Adam Bates, and Daniel Marino. 2020. Tactical Provenance
Analysis for Endpoint Detection and Response Systems. In IEEE S&P.
[41] Wajih Ul Hassan, Shengjian Guo, Ding Li, Zhengzhang Chen, Kangkook Jee,
Zhichun Li, and Adam Bates. 2019. NoDoze: Combatting threat alert fatigue with
automated provenance triage. In NDSS (San Diego, CA).
[42] Wajih Ul Hassan, Mark Lemay, Nuraini Aguse, Adam Bates, and Thomas Moyer.
2018. Towards scalable cluster auditing through grammatical inference over
provenance graphs. In NDSS (San Diego, CA).
[43] Wajih Ul Hassan, Mohammad A Noureddine, Pubali Datta, and Adam Bates. 2020.
OmegaLog: High-Fidelity Attack Investigation via Transparent Multi-layer Log
Analysis. In NDSS.
[44] Md Nahid Hossain, Sadegh M Milajerdi, Junao Wang, Birhanu Eshete, Rigel
Gjomemo, R Sekar, Scott D Stoller, and VN Venkatakrishnan. 2017. SLEUTH: Real-
time attack scenario reconstruction from COTS audit data. In USENIX Security.
[45] Md Nahid Hossain, Sanaz Sheikhi, and R Sekar. 2020. Combating Dependence
Explosion in Forensic Analysis Using Alternative Tag Propagation Semantics. In
IEEE S&P.
[46] Md Nahid Hossain, Junao Wang, R. Sekar, and Scott D. Stoller. 2018. Dependence-
Preserving data compaction for scalable forensic analysis. In USENIX Security
Symposium.
[47] Yang Ji, Sangho Lee, Evan Downing, Weiren Wang, Mattia Fazzini, Taesoo Kim,
Alessandro Orso, and Wenke Lee. 2017. Rain: Refinable attack investigation with
on-demand inter-process information flow tracking. In CCS. ACM.
[48] Samuel T. King and Peter M. Chen. 2003. Backtracking Intrusions. In SOSP. ACM.
[49] Samuel T King, Zhuoqing Morley Mao, Dominic G Lucchetti, and Peter M Chen.
2005. Enriching Intrusion Alerts Through Multi-Host Causality.. In NDSS.
[50] Christopher Kruegel, Darren Mutz, William Robertson, and Fredrik Valeur. 2003.
Bayesian event classification for intrusion detection. In 19th Annual Computer
Security Applications Conference, 2003. Proceedings. IEEE, 14–23.
[51] Christopher Kruegel and Giovanni Vigna. 2003. Anomaly detection of web-based
attacks. In Proceedings of the 10th ACM conference on Computer and communica-
tions security. ACM, 251–261.
[52] Pradeep Kumar and H. Howie Huang. 2019. GraphOne: A Data Store for Real-time
Analytics on Evolving Graphs. In USENIX FAST.
[53] Yonghwi Kwon, Fei Wang, Weihang Wang, Kyu Hyung Lee, Wen-Chuan Lee,
Shiqing Ma, Xiangyu Zhang, Dongyan Xu, Somesh Jha, Gabriela Ciocarlie, et al.
2018. MCI: Modeling-based Causality Inference in Audit Logging for Attack
Investigation. In NDSS.
[54] Kyu Hyung Lee, Xiangyu Zhang, and Dongyan Xu. 2013. High accuracy attack
provenance via binary-based execution partition. In NDSS (San Diego, CA).
[55] Kyu Hyung Lee, Xiangyu Zhang, and Dongyan Xu. 2013. LogGC: Garbage
collecting audit log. In CCS.
[56] Hyeontaek Lim, Donsu Han, David G Andersen, and Michael Kaminsky. 2014.
MICA: A holistic approach to fast in-memory key-value storage. USENIX.
[57] Yushan Liu, Mu Zhang, Ding Li, Kangkook Jee, Zhichun Li, Zhenyu Wu, Jungh-
wan Rhee, and Prateek Mittal. 2018. Towards a Timely Causality Analysis for
Enterprise Security. In NDSS.
[58] Shiqing Ma, Kyu Hyung Lee, Chung Hwan Kim, Junghwan Rhee, Xiangyu Zhang,
and Dongyan Xu. 2015. Accurate, low cost and instrumentation-free security
audit logging for Windows. In ACSAC. ACM.
[59] Shiqing Ma, Juan Zhai, Yonghwi Kwon, Kyu Hyung Lee, Xiangyu Zhang, Gabriela
Ciocarlie, Ashish Gehani, Vinod Yegneswaran, Dongyan Xu, and Somesh Jha.
2018. Kernel-supported cost-effective audit logging for causality tracking. In
USENIX ATC.
[60] Shiqing Ma, Juan Zhai, Fei Wang, Kyu Hyung Lee, Xiangyu Zhang, and Dongyan
Xu. 2017. MPI: Multiple Perspective Attack Investigation with Semantic Aware
Execution Partitioning. In USENIX Security.
[61] Shiqing Ma, Xiangyu Zhang, and Dongyan Xu. 2016. ProTracer: Towards practical
provenance tracing by alternating between logging and tainting. In NDSS (San
Diego, CA).
[62] Sadegh M. Milajerdi, Birhanu Eshete, Rigel Gjomemo, and V.N. Venkatakrishnan.
2019. POIROT: Aligning Attack Behavior with Kernel Audit Records for Cyber
Threat Hunting. In CCS. ACM.
[63] S. M. Milajerdi, R. Gjomemo, B. Eshete, R. Sekar, and V. N. Venkatakrishnan.
2019. HOLMES: Real-Time APT Detection through Correlation of Suspicious
Information Flows. In IEEE S&P.
[64] Charlie Miller and Chris Valasek. 2015. Remote exploitation of an unaltered
passenger vehicle. (2015).
[65] David Moore, Vern Paxson, Stefan Savage, Colleen Shannon, Stuart Staniford,
and Nicholas Weaver. 2003. Inside the Slammer Worm. IEEE Security and Privacy
1, 4 (July 2003), 33–39. https://doi.org/10.1109/MSECP.2003.1219056
[66] Rajesh Nishtala, Hans Fugal, Steven Grimm, Marc Kwiatkowski, Herman Lee,
Harry C Li, Ryan McElroy, Mike Paleczny, Daniel Peek, Paul Saab, et al. [n.d.].
Scaling Memcache at Facebook.
[67] Steven Noel, Eric Robertson, and Sushil Jajodia. 2004. Correlating intrusion
events and building attack scenarios through attack graph distances. In Computer
Security Applications Conference, 2004. 20th Annual. IEEE, 350–359.
[68] Thomas Pasquier, Xueyuan Han, Thomas Moyer, Adam Bates, Olivier Hermant,
David Eyers, Jean Bacon, and Margo Seltzer. 2018. Runtime analysis of whole-
system provenance. In CCS. ACM.
13
[69] Xiaokui Shu, Frederico Araujo, Douglas L Schales, Marc Ph Stoecklin, Jiyong
Jang, Heqing Huang, and Josyula R Rao. 2018. Threat intelligence computing. In
ACM CCS.
[70] Splunk Inc. [n.d.]. splunk. https://www.splunk.com.
[71] Yutao Tang, Ding Li, Zhichun Li, Mu Zhang, Kangkook Jee, Xusheng Xiao, Zhenyu
Wu, Junghwan Rhee, Fengyuan Xu, and Qun Li. 2018. Nodemerge: Template
based efficient data reduction for big-data causality analysis. In CCS. ACM.
Dan Feng, and Zhipeng Tan. 2011. Compressing Provenance Graphs.
[74] Zhang Xu, Zhenyu Wu, Zhichun Li, Kangkook Jee, Junghwan Rhee, Xusheng
Xiao, Fengyuan Xu, Haining Wang, and Guofei Jiang. 2016. High Fidelity Data
Reduction for Big Data Security Dependency Analyses. In CCS.
[72] Alfonso Valdes and Keith Skinner. 2001. Probabilistic alert correlation. In Inter-
national Workshop on Recent Advances in Intrusion Detection. Springer, 54–68.
[73] Yulai Xie, Kiran-Kumar Muniswamy-Reddy, Darrell D. E. Long, Ahmed Amer,
thing that is affected by the large global list size is the time to
complete each eviction cycle after every ∆Tevict time windows as
shown in the Figure 12a. However, since our eviction algorithm is
asynchronous it does not affect the throughput of our system.
A APPENDIX
A.1 Optimal Parameters
Swift has three configurable parameters:∆Tpromote, Global list
size k, and ∆Tevict . In this section, we evaluate our reasons of
choosing the optimal configuration in our experiments.
A.1.1 Promotion Epoch. The Epochal Causality Hypothesis H1 for
causal graph pattern access states that we need to keep events for
a certain epoch (∆Tpromote) in the tracking cache to minimize the
miss ratio of the main-memory for causal events. So, in order to
find the promotion epoch ∆Tpromote for our enterprise dataset, we
set out to experiment with different ∆Tpromote. Intuitively, larger
the ∆Tpromote means that our tracking cache miss ratio will be
less; however, this also means that we will be keeping more events
in the tracking cache. So essentially we need to find a sweet spot
between miss ratio and maximum size of tracking cache. Therefore,
we define the tracking cache (TC) utilization as follows:
TCutilization = Missr atio × Maxevents
In the above equation, we multiple the miss ratio by max events
that are present in tracking cache during each run to get utilization.
Our results are shown in the Figure 11. We can see that with 800
sec we get maximum utilization where we have both low miss ratio
and low maximum TC size.
(a)
(b)
Figure 12: Effect of changing global list size on average time to com-
plete on eviction cycle and max number of events in the suspicious
cache (SC) after eviction.
Another factor that can be used to find out required global list
size for an enterprise is the number of alerts that are generated by
enterprise’s underlying TDS. Since these threat alerts are related
to anomalous behaviour, by storing large global list size we can
store more information regarding these alerts in the main-memory
all the time. NEC Labs America generated 300 threat alerts per
day. Since our attack dataset spans over 10 days we set the global
list size to be 3000 so that we can store at least 10 days of threat
alerts’ provenance data in the main-memory. Figure 12b shows
how increasing the global list size increased the overall size of
main-memory.
A.1.3 Eviction Window. We run eviction algorithm after every
∆Tevict time window. Greater the eviction window time, the greater
Swift will take to complete one eviction cycle as shown in the
Figure 13. However, since our eviction algorithm is asynchronous
it does not matter how much time it takes to complete one eviction
cycle. For experiments we picked ∆Tevict = 1600 since it worked
well during our deployment; however, any value of ∆Tevict can be
picked by the user as long as it is after ∆Tpromote time window.
Figure 11: Finding optimal Promotion Epoch ∆Tpr omot e for our ex-
periment dataset.
A.1.2 Global List Size. Global list size k is directly correlated with
number of most anomalous paths any enterprise wants to store
in the main-memory. Given an enterprise with larger resources
can potentially store more anomalous paths in the main-memory
which can accelerate the investigation of threats alerts later. One
14
(a)
(b)
Figure 13: Effect of changing ∆Tevict on average time to complete
on eviction cycle.
 12000 14000 16000 18000 20000 22000 24000 26000 28000 30000 0 200 400 600 800 1000 1200 1400 1600 1800 2000TCutilizationPromotion Epoch (sec)Tracking Cache 0 2 4 6 8 10 12 14 16 1820040080016003200Avg. Time to complete eviction (sec)Global List Size 0 1000 2000 3000 4000 5000 6000 7000 800020040080016003200Max events in SC after evictionGlobal List Size 0 10 20 30 40 50 60 7080016003200640012800Avg. Time took per evict cycle (sec)Δ Tevict 0 5 10 15 20 2580016003200640012800Avg. events evicted per cycle (kilo)Δ Tevict