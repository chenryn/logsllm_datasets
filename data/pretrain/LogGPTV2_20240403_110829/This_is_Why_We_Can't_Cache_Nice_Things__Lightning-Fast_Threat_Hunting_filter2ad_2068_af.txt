### Optimized Text

#### Attacks and Main-Memory Storage
Storing attack data in main memory significantly accelerates post-incident investigations.

#### Acknowledgments
We extend our gratitude to the anonymous reviewers for their valuable comments and suggestions. Wajih Ul Hassan was partially supported by the Sohaib and Sara Abbasi Computer Science Fellowship. This research was partially funded by the National Science Foundation (NSF) under contracts CNS-16-57534 and CNS-17-50024. The opinions, findings, conclusions, or recommendations expressed in this document are those of the authors and do not necessarily reflect the views of their employers or sponsors.

#### References
1. [n.d.]. Cortex XDR. https://www.paloaltonetworks.com/cortex/cortex-xdr.
2. [n.d.]. CrowdStrike. https://www.crowdstrike.com/.
3. [n.d.]. Event Tracing. https://docs.microsoft.com/en-us/windows/desktop/ETW/event-tracing-portal.
4. [n.d.]. The Linux Audit Daemon. https://linux.die.net/man/8/auditd.
5. [n.d.]. MTTD vs MTTK. https://www.threatstack.com/blog/how-to-use-automation-to-decrease-mean-time-to-know.
6. [n.d.]. Netwrix Auditor. https://www.netwrix.com/network_auditing_software_features.html.
7. 2014. CVE-2014-6271. https://nvd.nist.gov/vuln/detail/CVE-2014-6271.
8. 2018. Persistent Netcat Backdoor. https://www.offensive-security.com/metasploit-unleashed/persistent-netcat-backdoor/.
9. 2018. Ransom.Wannacry. https://symc.ly/2NSK5Rg.
10. 2018. VPNFilter: New Router Malware with Destructive Capabilities. https://symc.ly/2IPGGVE.
11. 2019. Apache Kafka. https://kafka.apache.org/.
12. 2019. Automated Incident Response: Respond to Every Alert. https://swimlane.com/blog/automated-incident-response-respond-every-alert/.
13. 2019. Automated Security Intelligence (ASI). https://www.nec.com/en/global/techrep/journal/g16/n01/160110.html.
14. 2019. Breach Detection. https://link.medium.com/6HpgbLgZuW.
15. 2019. Cyber Threat Hunting Review. https://blog.usejournal.com/cyber-threat-hunting-basics-52fca11a4e1d.
16. 2019. Endpoint Monitoring & Security. https://logrhythm.com/solutions/security/endpoint-threat-detection/.
17. 2019. Google Core Libraries for Java. https://github.com/google/guava.
18. 2019. How Many Alerts is Too Many to Handle? https://www2.fireeye.com/StopTheNoise-IDC-Numbers-Game-Special-Report.html.
19. 2019. How WannaCrypt Attacks. https://www.zdnet.com/article/how-wannacrypt-attacks/.
20. 2019. MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption. https://www.rapid7.com/db/modules/exploit/windows/smb/ms17_010_eternalblue.
21. 2019. Neo4j. https://neo4j.com/.
22. 2019. New Research from Advanced Threat Analytics. https://prn.to/2uTiaK6.
23. 2019. Over 18,000 Redis Instances Targeted. https://duo.com/decipher/over-18000-redis-instances-targeted-by-fake-ransomware.
24. 2019. Petya Ransomware Outbreak. https://www.symantec.com/blogs/threat-intelligence/petya-ransomware-wiper.
25. 2019. Redis In-Memory Data Structure Store. https://redis.io/.
26. 2019. RedisGraph - A Graph Database Module for Redis. https://oss.redislabs.com/redisgraph/.
27. 2019. RocksDB | A Persistent Key-Value Store. https://rocksdb.org/.
28. 2019. What is SIEM? https://logz.io/blog/what-is-siem/.
29. [n.d.]. Equifax Says Cyberattack May Have Affected 143 Million in the U.S. https://www.nytimes.com/2017/09/07/business/equifax-cyberattack.html.
30. Adam Bates, Wajih Ul Hassan, Kevin Butler, Alin Dobra, Bradley Reaves, Patrick Cable, Thomas Moyer, and Nabil Schear. 2017. Transparent Web Service Auditing via Network Provenance Functions. In WWW.
31. Adam Bates, Dave Tian, Kevin R. B. Butler, and Thomas Moyer. 2015. Trustworthy Whole-System Provenance for the Linux Kernel. In USENIX Security.
32. Chen Chen, Harshal Tushar Lehri, Lay Kuan Loh, Anupam Alur, Limin Jia, Boon Thau Loo, and Wenchao Zhou. 2017. Distributed Provenance Compression. In SIGMOD.
33. Marco Cova, Davide Balzarotti, Viktoria Felmetsger, and Giovanni Vigna. 2007. Swaddler: An Approach for the Anomaly-Based Detection of State Violations in Web Applications. In International Workshop on Recent Advances in Intrusion Detection. Springer, 63–86.
34. Hervé Debar and Andreas Wespi. 2001. Aggregation and Correlation of Intrusion-Detection Alerts. In International Workshop on Recent Advances in Intrusion Detection. Springer, 85–103.
35. David Ediger, Rob McColl, Jason Riedy, and David A Bader. 2012. Stinger: High-Performance Data Structure for Streaming Graphs. In Conference on High Performance Extreme Computing. IEEE.
36. FireEye. 2019. Incident Investigation. https://www.fireeye.com/solutions/incident-investigation.html.
37. Peng Gao, Xusheng Xiao, Ding Li, Zhichun Li, Kangkook Jee, Zhenyu Wu, Chung Hwan Kim, Sanjeev R. Kulkarni, and Prateek Mittal. 2018. SAQL: A Stream-Based Query System for Real-Time Abnormal System Behavior Detection. In USENIX Security Symposium.
38. Ashish Gehani and Dawood Tariq. 2012. SPADE: Support for Provenance Auditing in Distributed Environments. In Middleware (Montreal, Quebec, Canada).
39. Xueyan Han, Thomas Pasquier, Adam Bates, James Mickens, and Margo Seltzer. 2020. Unicorn: Runtime Provenance-Based Detector for Advanced Persistent Threats. In NDSS.
40. Wajih Ul Hassan, Adam Bates, and Daniel Marino. 2020. Tactical Provenance Analysis for Endpoint Detection and Response Systems. In IEEE S&P.
41. Wajih Ul Hassan, Shengjian Guo, Ding Li, Zhengzhang Chen, Kangkook Jee, Zhichun Li, and Adam Bates. 2019. NoDoze: Combatting Threat Alert Fatigue with Automated Provenance Triage. In NDSS (San Diego, CA).
42. Wajih Ul Hassan, Mark Lemay, Nuraini Aguse, Adam Bates, and Thomas Moyer. 2018. Towards Scalable Cluster Auditing through Grammatical Inference over Provenance Graphs. In NDSS (San Diego, CA).
43. Wajih Ul Hassan, Mohammad A Noureddine, Pubali Datta, and Adam Bates. 2020. OmegaLog: High-Fidelity Attack Investigation via Transparent Multi-Layer Log Analysis. In NDSS.
44. Md Nahid Hossain, Sadegh M Milajerdi, Junao Wang, Birhanu Eshete, Rigel Gjomemo, R Sekar, Scott D Stoller, and VN Venkatakrishnan. 2017. SLEUTH: Real-Time Attack Scenario Reconstruction from COTS Audit Data. In USENIX Security.
45. Md Nahid Hossain, Sanaz Sheikhi, and R Sekar. 2020. Combating Dependence Explosion in Forensic Analysis Using Alternative Tag Propagation Semantics. In IEEE S&P.
46. Md Nahid Hossain, Junao Wang, R. Sekar, and Scott D. Stoller. 2018. Dependence-Preserving Data Compaction for Scalable Forensic Analysis. In USENIX Security Symposium.
47. Yang Ji, Sangho Lee, Evan Downing, Weiren Wang, Mattia Fazzini, Taesoo Kim, Alessandro Orso, and Wenke Lee. 2017. Rain: Refinable Attack Investigation with On-Demand Inter-Process Information Flow Tracking. In CCS. ACM.
48. Samuel T. King and Peter M. Chen. 2003. Backtracking Intrusions. In SOSP. ACM.
49. Samuel T. King, Zhuoqing Morley Mao, Dominic G Lucchetti, and Peter M. Chen. 2005. Enriching Intrusion Alerts Through Multi-Host Causality. In NDSS.
50. Christopher Kruegel, Darren Mutz, William Robertson, and Fredrik Valeur. 2003. Bayesian Event Classification for Intrusion Detection. In 19th Annual Computer Security Applications Conference, 2003. Proceedings. IEEE, 14–23.
51. Christopher Kruegel and Giovanni Vigna. 2003. Anomaly Detection of Web-Based Attacks. In Proceedings of the 10th ACM Conference on Computer and Communications Security. ACM, 251–261.
52. Pradeep Kumar and H. Howie Huang. 2019. GraphOne: A Data Store for Real-Time Analytics on Evolving Graphs. In USENIX FAST.
53. Yonghwi Kwon, Fei Wang, Weihang Wang, Kyu Hyung Lee, Wen-Chuan Lee, Shiqing Ma, Xiangyu Zhang, Dongyan Xu, Somesh Jha, Gabriela Ciocarlie, et al. 2018. MCI: Modeling-Based Causality Inference in Audit Logging for Attack Investigation. In NDSS.
54. Kyu Hyung Lee, Xiangyu Zhang, and Dongyan Xu. 2013. High Accuracy Attack Provenance via Binary-Based Execution Partition. In NDSS (San Diego, CA).
55. Kyu Hyung Lee, Xiangyu Zhang, and Dongyan Xu. 2013. LogGC: Garbage Collecting Audit Log. In CCS.
56. Hyeontaek Lim, Donsu Han, David G. Andersen, and Michael Kaminsky. 2014. MICA: A Holistic Approach to Fast In-Memory Key-Value Storage. USENIX.
57. Yushan Liu, Mu Zhang, Ding Li, Kangkook Jee, Zhichun Li, Zhenyu Wu, Junghwan Rhee, and Prateek Mittal. 2018. Towards a Timely Causality Analysis for Enterprise Security. In NDSS.
58. Shiqing Ma, Kyu Hyung Lee, Chung Hwan Kim, Junghwan Rhee, Xiangyu Zhang, and Dongyan Xu. 2015. Accurate, Low-Cost, and Instrumentation-Free Security Audit Logging for Windows. In ACSAC. ACM.
59. Shiqing Ma, Juan Zhai, Yonghwi Kwon, Kyu Hyung Lee, Xiangyu Zhang, Gabriela Ciocarlie, Ashish Gehani, Vinod Yegneswaran, Dongyan Xu, and Somesh Jha. 2018. Kernel-Supported Cost-Effective Audit Logging for Causality Tracking. In USENIX ATC.
60. Shiqing Ma, Juan Zhai, Fei Wang, Kyu Hyung Lee, Xiangyu Zhang, and Dongyan Xu. 2017. MPI: Multiple Perspective Attack Investigation with Semantic Aware Execution Partitioning. In USENIX Security.
61. Shiqing Ma, Xiangyu Zhang, and Dongyan Xu. 2016. ProTracer: Towards Practical Provenance Tracing by Alternating Between Logging and Tainting. In NDSS (San Diego, CA).
62. Sadegh M. Milajerdi, Birhanu Eshete, Rigel Gjomemo, and V.N. Venkatakrishnan. 2019. POIROT: Aligning Attack Behavior with Kernel Audit Records for Cyber Threat Hunting. In CCS. ACM.
63. S. M. Milajerdi, R. Gjomemo, B. Eshete, R. Sekar, and V. N. Venkatakrishnan. 2019. HOLMES: Real-Time APT Detection through Correlation of Suspicious Information Flows. In IEEE S&P.
64. Charlie Miller and Chris Valasek. 2015. Remote Exploitation of an Unaltered Passenger Vehicle. (2015).
65. David Moore, Vern Paxson, Stefan Savage, Colleen Shannon, Stuart Staniford, and Nicholas Weaver. 2003. Inside the Slammer Worm. IEEE Security and Privacy 1, 4 (July 2003), 33–39. https://doi.org/10.1109/MSECP.2003.1219056
66. Rajesh Nishtala, Hans Fugal, Steven Grimm, Marc Kwiatkowski, Herman Lee, Harry C. Li, Ryan McElroy, Mike Paleczny, Daniel Peek, Paul Saab, et al. [n.d.]. Scaling Memcache at Facebook.
67. Steven Noel, Eric Robertson, and Sushil Jajodia. 2004. Correlating Intrusion Events and Building Attack Scenarios through Attack Graph Distances. In Computer Security Applications Conference, 2004. 20th Annual. IEEE, 350–359.
68. Thomas Pasquier, Xueyuan Han, Thomas Moyer, Adam Bates, Olivier Hermant, David Eyers, Jean Bacon, and Margo Seltzer. 2018. Runtime Analysis of Whole-System Provenance. In CCS. ACM.
69. Xiaokui Shu, Frederico Araujo, Douglas L. Schales, Marc Ph. Stoecklin, Jiyong Jang, Heqing Huang, and Josyula R. Rao. 2018. Threat Intelligence Computing. In ACM CCS.
70. Splunk Inc. [n.d.]. Splunk. https://www.splunk.com.
71. Yutao Tang, Ding Li, Zhichun Li, Mu Zhang, Kangkook Jee, Xusheng Xiao, Zhenyu Wu, Junghwan Rhee, Fengyuan Xu, and Qun Li. 2018. Nodemerge: Template-Based Efficient Data Reduction for Big-Data Causality Analysis. In CCS. ACM.
72. Alfonso Valdes and Keith Skinner. 2001. Probabilistic Alert Correlation. In International Workshop on Recent Advances in Intrusion Detection. Springer, 54–68.
73. Yulai Xie, Kiran-Kumar Muniswamy-Reddy, Darrell D. E. Long, Ahmed Amer, and others. 2011. Compressing Provenance Graphs.
74. Zhang Xu, Zhenyu Wu, Zhichun Li, Kangkook Jee, Junghwan Rhee, Xusheng Xiao, Fengyuan Xu, Haining Wang, and Guofei Jiang. 2016. High Fidelity Data Reduction for Big Data Security Dependency Analyses. In CCS.

#### Appendix

##### A.1 Optimal Parameters
Swift has three configurable parameters: ∆Tpromote, Global list size k, and ∆Tevict. In this section, we evaluate our reasons for choosing the optimal configuration in our experiments.

###### A.1.1 Promotion Epoch
The Epochal Causality Hypothesis (H1) states that we need to keep events for a certain epoch (∆Tpromote) in the tracking cache to minimize the miss ratio in main memory for causal events. To determine the optimal promotion epoch ∆Tpromote for our enterprise dataset, we conducted experiments with different values of ∆Tpromote. Intuitively, a larger ∆Tpromote means a lower tracking cache miss ratio but also more events in the tracking cache. Therefore, we need to find a balance between miss ratio and maximum size of the tracking cache. We define the tracking cache (TC) utilization as follows:
\[ \text{TCutilization} = \text{Missratio} \times \text{Maxevents} \]
In the above equation, we multiply the miss ratio by the maximum number of events present in the tracking cache during each run to get the utilization. Our results, shown in Figure 11, indicate that with 800 seconds, we achieve the highest utilization, balancing low miss ratio and low maximum TC size.

(a)
(b)
Figure 12: Effect of changing global list size on average time to complete one eviction cycle and the maximum number of events in the suspicious cache (SC) after eviction.

###### A.1.2 Global List Size
The global list size k is directly correlated with the number of most anomalous paths an enterprise wants to store in main memory. Enterprises with larger resources can store more anomalous paths, accelerating the investigation of threat alerts later. One factor to consider is the number of alerts generated by the enterprise's underlying Threat Detection System (TDS). Since these alerts are related to anomalous behavior, storing a larger global list size allows us to keep more information about these alerts in main memory. NEC Labs America generated 300 threat alerts per day. Since our attack dataset spans 10 days, we set the global list size to 3000 to store at least 10 days of threat alert provenance data in main memory. Figure 12b shows how increasing the global list size increases the overall size of main memory.

###### A.1.3 Eviction Window
We run the eviction algorithm after every ∆Tevict time window. The greater the eviction window time, the longer Swift will take to complete one eviction cycle, as shown in Figure 13. However, since our eviction algorithm is asynchronous, it does not affect the system's throughput. For our experiments, we chose ∆Tevict = 1600, which worked well during deployment. Users can choose any value for ∆Tevict as long as it is after the ∆Tpromote time window.

Figure 11: Finding the optimal Promotion Epoch ∆Tpromote for our experiment dataset.

(a)
(b)
Figure 13: Effect of changing ∆Tevict on the average time to complete one eviction cycle.

| Δ Tevict (sec) | Avg. Time to Complete Eviction Cycle (sec) |
|---------------|-------------------------------------------|
| 0             | 800                                       |
| 10            | 1600                                      |
| 20            | 3200                                      |
| 30            | 6400                                      |
| 40            | 12800                                     |

| Δ Tevict (sec) | Avg. Events Evicted per Cycle (kilo) |
|---------------|--------------------------------------|
| 0             | 800                                  |
| 5             | 1600                                 |
| 10            | 3200                                 |
| 15            | 6400                                 |
| 20            | 12800                                |

This optimized text aims to improve clarity, coherence, and professionalism while maintaining the original content.