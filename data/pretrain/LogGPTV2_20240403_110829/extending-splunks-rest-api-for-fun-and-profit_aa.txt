Copyright © 2016 Splunk Inc. 
Extending Splunk’s REST API 
for Fun and Profit 
James Ervin 
Principal Engineer, Security and Compliance SoluBons Splunk, Inc. 
DisclaimerDuring the course of this presentaBon, we may make forward looking statements regarding future events or the expected performance of the company. We cauBon you that such statements reflect our current expectaBons and esBmates based on factors currently known to us and that actual events or results could differ materially. For important factors that may cause actual results to differ from those contained in our forward-looking statements, please review our filings with the SEC. The forward-looking statements made in the this presentaBon are being made as of the Bme and date of its live presentaBon. If reviewed aRer its live presentaBon, this presentaBon may not contain current or accurate informaBon. We do not assume any obligaBon to update any forward looking statements we may make. In addiBon, any informaBon about our roadmap outlines our general product direcBon and is subject to change at any Bme without noBce. It is for informaBonal purposes only and shall not, be incorporated into any contract or other commitment. Splunk undertakes no obligaBon either to develop the features or funcBonality described or to include any such feature or funcBonality in a future release.2 
Overview 
At the conclusion of this presentaBon, you should be able to discuss the following: 
 What is a REST API? 
How does Splunk implement REST style? 
How can I extend Splunk’s REST API within my applicaBon? Do I have to use REST style? 
Why would I want to do any of this? 
3 
REST Style: DefiniBon 
REST (RepresentaBonal State Transfer) is a set of architectural constraints that make a web applicaBon “RESTful”*:client-server interacBon over HTTP stateless communicaBon 
cacheable content 
etc. 
REST is a way to do IPC (interprocess communicaBon) over HTTP. 
*Cf. Architectural Styles and the Design of Network-based SoRware Architectures; Fielding, R. h`p://www.ics.uci.edu/~fielding/pubs/dissertaBon/top.htm. 2000. 
4 
	REST Style: PracBcal ConsideraBons REST is a style, rather than a standard or a protocol.There is no formal protocol specificaBon for REST, in the way that there is for XML-RPC, SOAP, etc. 
 In pracBce, this can be both liberaBng and frustraBng. 
As an API designer, you have many degrees of freedom to work with. 
As an API consumer, APIs you interact with will differ subtly, even within the limited degrees of freedom offered by REST. At the broadest level, note that the style does not specify a default format, although XML and JSON are commonly implemented.5 
InteracBng with Splunk REST: direct 	Splunk’s REST API can be interacted with directly in two ways: 
Via a request to a port: localhost://8089 (served by the splunkd process) 
curl -k -u admin:changeme 
https://127.0.0.1:8089/services/saved/searches?count=1
Q: How do I interact with Splunk REST on port 8089, when my browser is making requests to port 8000? Doesn’t this violate same-origin policy?A: Yes! See the next slide for the alternaBve access mechanism… 
6 
InteracBng with Splunk REST: proxied 
Via request to port localhost://8000 (“splunkweb”): 
curl –k 'https://my_hostname:8000/en-US/splunkd/__raw/services/ saved/searches?output_mode=json&count=1' -H 'Cookie: 
splunkweb_csrf_token_8000=11602893886132396046; 
session_id_8000=b1cba29d67a369c9b2410c4885a0bca1da0ab6fd;splunkd_8000=vjRt4ZFCbiyplxbUW2qDFe9EqTH3jCFciaRa^ul8RTQUDD_XN4WY4MT nzue6frZBd^j1xS2MC8p4oUXWWuIoGDia4tNgSNntTAgfudmFLjkKI2PtiBK0xMnf6KS afjg’
This is how you interact with Splunk REST from your Javascript code. Note the inclusion of the language (en-US) and the splunkd/__rawprefix – this is important! 
7 
Proxying REST Calls: History7 
Proxying REST Calls: History 
Prior to Splunk 6.2, Splunk’s own REST API endpoints were whitelisted internally and were exposed on port 8000 through a Python proxy (proxy.py), which was executed as part of the Python splunkweb process (a CherryPy web server). 
This had two disadvantages: 
1. Python code execuBon was required for each REST call.2. The set of proxied endpoints could not be extended by apps! So apps had to include a separate Python component known as a “Splunkweb controller” in order to proxy their own endpoints. This led to extensive duplicaBon of code. 
8 
Proxying REST Calls: History 
In Splunk 6.2, the “expose” keyword was introduced in web.conf. This permits direct pass-through of requests to custom REST endpoints to the C++ splunkd back-end. This has two advantages:1.
2. Python code is no longer involved in the “hot path” from client to server for custom REST endpoints as long as access is done via the /splunkd/__raw URI. (Other URIs are sBll proxied by Python and may be slower!) 
The app developer can now expose a REST endpoint directly via configuraBon, without wriBng addiBonal code. 
9 
Anatomy of a REST Call: Pre-Splunk 6.2Anatomy of a REST Call: Pre-Splunk 6.2 
| Client  | 1. Client request  | splunkweb process  | 2. Proxied request  | 2. Proxied request  | 2. Proxied request  | 2. Proxied request  |
|---|---|---|---|---|---|---|
| Client  |1. Client request  |splunkweb process  |5. Proxied response  |Splunkd process  |Splunkd process  |Splunkd process  || Client  |6. Server response  |splunkweb process  |5. Proxied response  |Splunkd process  |Splunkd process  |Splunkd process  |
| Client  |6. Server response  |(root.py, port 8000)  |(splunkd, port 8089)  |(splunkd, port 8089)  |(splunkd, port 8089)  |(splunkd, port 8089)  |
| Client  |6. Server response  |(imported)  |3. setup request/ |3. setup request/ |4. execute request/  |4. execute request/  || Client  |6. Server response  |(imported)  |response (XML)*  |response (XML)*  |response (XML)*  |response (XML)*  |
* = new Python process 
Custom controller script 	Custom REST handler script 
Anatomy of a REST Call: Post-Splunk 6.2 	1. Client request (to /splunkd/__raw) 
| Client  | 6. Server response  | Splunkd process  | Splunkd process  |
|---|---|---|---||---|---|---|---|
| Client  |6. Server response  |(splunkd, port 8000 and 8089)  |(splunkd, port 8000 and 8089)  |
| Client  |6. Server response  |3. setup request/ |4. execute request/  |
| Client  |6. Server response  |response (XML)*  |response (XML)*  |
Custom REST handler script 
* = new Python process 
11 
Proxying REST Calls: Basic ConfiguraBon 
In web.conf (Splunk 6.2 and up):In web.conf (Splunk 6.2 and up): 
[expose:correlation_searches] 
pattern = alerts/reviewstatuses 
methods = GET,POST
Note that the URL is what’s actually “exposed” here. You can even expose Core endpoints that aren’t exposed by default. The above would correspond to a URL of: 
https://your_hostname:8000/en-US/splunkd/__raw/services/ alerts/reviewstatuses
12 
Proxying REST Calls: Wildcarding12 
Proxying REST Calls: Wildcarding 
[expose:correlation_searches]
pattern = alerts/correlationsearches/*
methods = GET,POST
This exposes a URL of: 
https://your_hostname:8000/en-US/splunkd/__raw/services/alerts/ correlationsearches/SEARCH_NAME_HERE
But NOT: 
https://your_hostname:8000/en-US/splunkd/__raw/services/alerts/ correlationsearches
13 
Splunk REST: DocumentaBon13 
Splunk REST: DocumentaBon 
Splunk provides a (mostly) RESTful API. This API is served up on any running Splunk instance, usually on port 8089, and is well-documented here: 
REST API Reference Manual – URI Quick Reference 
h`p://docs.splunk.com/DocumentaBon/Splunk/latest/RESTREF/RESTlist
REST API User Manual 
h`p://docs.splunk.com/DocumentaBon/Splunk/latest/RESTUM/RESTusing
restmap.confrestmap.conf 
h`p://docs.splunk.com/DocumentaBon/Splunk/latest/Admin/Restmapconf
14 
Extending the API: Why? 
QuesBon: Why would you want to extend the REST API? 
Answer(s): Several reasons, most of which are just general principles of good soRware design. 
1. 
2. 
3. 
4. 
5. 
6. 
7. EncapsulaBon 
ComputaBon 
FuncBonality 
AbstracBon 
Performance 
App Management 
Cloud CompaBbility 
15Cloud CompaBbility 
15 
Extending the API: EncapsulaBon In the Enterprise Security app, we frequently encounter product requirements that require construcBon of a new concept. 
Example: 
A “correlaBon search” consists of up to 3 configuraBon objects: 
 A savedsearches.conf entry 
Metadata about the search’s related regulatory compliance sewngs in “governance.conf”Metadata about the search’s workflow in “correlaBonsearches.conf” 
EncapsulaBon behind an API permits manipulaBon of these enBBes as a unit or “single concept”.* 
* Note: Splunk does NOT provide transacBonal semanBcs on configuraBon files. 
16 
Extending the API: ComputaBon 	Certain types of computaBon might be unsafe to perform solely in the browser. 
Usually, this means argument validaBon.Example: 
If you create a custom configuraBon file that has specialized validaBon requirements, a custom REST handler to provide server-side validaBon may be required. 
17 
Extending the API: FuncBonality 	The Core Splunk REST API may not provide a certain feature you need. 
Example: 
In an earlier version of Enterprise Security, in order to propagate some configuraBon changes acrossa Search Head Cluster (SHC), we had to write a REST handler that would “fan out” modificaBons 
across a cluster so that edits made on one search head would be visible on the other search heads. 
These cases are generally rare. Internally, we generally don’t encourage development of significant 
“plumbing” of this sort at the app level, when it should really be done in the Core splunkd process.18 
Extending the API: AbstracBon 
You may need to future-proof your app by providing a layer of abstracBon, so that future modificaBons to the app can be made without requiring significant front-end or user experience work. 
Example: 
ES contains a small API that provides for storage of small files in the KV store as encoded strings. By wriBng an API for this, instead of forcing the front-end to write to KV store APIs, we retain the flexibility to swap out the storage layer at any Bme without requiring significant UI work.19 
Extending the API: Performance 
OperaBons that would generate many round-trips to the server, oRen benefit from being wrapped in a REST API. 
Example: 
ES contains a feature known as the “Notable Event Framework” which overlays a minimal BckeBng workflow system on top of indexed Splunk events. EdiBng events via this framework usually requires issuing mulBple calls to determine the exisBng status and ownership of an event, and then validaBng that the current user has permission to change that status (for instance: not all analysts may be allowed to “close” incidents).Doing the status check completely in the browser would generate possibly thousands of calls to and from the server, which would be prohibiBvely expensive. 
20 
Extending the API: App Management 
1.
2. Using the “triggers” stanza in app.conf, you have the ability to force REST calls to your handler to occur (or not occur) upon app state changes (install, update, enable, disable).Splunk’s “layered conf” system is a very simple data persistence mechanism. You can use this when you need to store a bit of data and don’t want to be restricted to indexing it and only being able to get at it via search. 
Example: 
In the Enterprise Security app, we uBlize this to force the customer to go through the setup process again following an app upgrade, so that they receive the newest configuraBons.[triggers] 
reload.ess_setup = access_endpoints /admin/ess_configured
21 
Extending the API: Cloud CompaBbility 
	In Splunk Cloud, you can’t make the same assumpBons about your storage or local environment. 
Nor does the customer have shell access to the server! 
This means that any operaBon you used to do by hand via direct edits to configuraBon files, or viaother direct filesystem access, is be`er done by exposing the funcBon in a REST API. 
This is probably the most important reason to begin uUlizing custom REST handlers in your app. 
Cf. Steve Yegge’s infamous google+ rant: h`ps://plus.google.com/+RipRowan/posts/eVeouesvaVX on 
the importance of interfaces as they pertain to plazorm development. 