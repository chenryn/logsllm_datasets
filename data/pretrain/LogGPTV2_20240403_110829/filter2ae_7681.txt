# 在Windows下利用IoDriverObjectType控制内核驱动加载的探索与研究

##### 译文声明
本文为翻译文章，译文仅供参考，具体内容和含义以原文为准。

在端点检测与响应（EDR）或其它类型的安全软件中，我们通常需要监控当前系统的内核驱动加载情况。一种常用的方法是通过`PsSetLoadImageNotifyRoutine`设置模块加载回调例程来监控Ring 3和Ring 0模块的加载。回调函数`PLOAD_IMAGE_NOTIFY_ROUTINE`的第二个参数用于判断：如果PID为0，则表示正在加载驱动；若PID非零，则表示加载的是DLL。此方法的优点在于其底层性和通用性。然而，这种方法也存在明显的缺点，比如由于太过基础且广泛使用，很容易被发现并绕过。此外，在回调函数执行时，内核驱动可能已经加载完毕，导致入口点已执行完成。

本文将探讨一种新的方法来监测并控制内核模块的加载。首先，我们需要了解内核加载驱动的过程。为此，我们将编写一个简单的驱动程序，并使用VMware双机调试进行测试。（如不熟悉VMware双机调试，请自行查阅相关资料）

连接到被调试虚拟机后，在Windbg中输入`sxe ld demo.sys`，然后运行`go`命令。当系统尝试加载这个驱动时，Windbg会自动暂停。此时，输入`kb`查看调用栈，可以看到内核会在单独的线程中加载驱动。

```
# RetAddr : Args to Child : Call Site
00 fffff800`04b1748d : fffff880`0456b8a0 fffff880`031ac0d0 00000000`00000001 fffff800`04b74dfe : nt!DebugService2+0x5
01 fffff800`04b74ecb : fffff880`031ac000 fffffa80`016de070 fffff880`0456b9b8 00000000`00000007 : nt!DbgLoadImageSymbols+0x4d
02 fffff800`04e47bfd : fffffa80`00eeee20 fffff8a0`0000001c fffff800`04d84a30 fffff880`0456b888 : nt!DbgLoadImageSymbolsUnicode+0x2b
03 fffff800`04e6286b : fffff880`031ac000 fffff880`0456b8f8 00000000`00000000 fffff880`0456b8d8 : nt!MiDriverLoadSucceeded+0x2bd
04 fffff800`04e64ebd : fffff880`0456b9b8 00000000`00000000 00000000`00000000 00000000`00000000 : nt!MmLoadSystemImage+0x80b
05 fffff800`04e65875 : 00000000`00000001 00000000`00000000 00000000`00000000 fffffa80`0231c1e0 : nt!IopLoadDriver+0x44d
06 fffff800`04a8b161 : fffff800`00000000 ffffffff`8000077c fffff800`04e65820 fffffa80`006db040 : nt!IopLoadUnloadDriver+0x55
07 fffff800`04d21166 : 00000000`00000000 fffffa80`006db040 00000000`00000080 fffffa80`006b71d0 : nt!ExpWorkerThread+0x111
08 fffff800`04a5c486 : fffff800`04bf6e80 fffffa80`006db040 fffffa80`006da680 00000000`00000000 : nt!PspSystemThreadStartup+0x5a
09 00000000`00000000 : fffff880`0456c000 fffff880`04566000 fffff880`0456ae60 00000000`00000000 : nt!KiStartSystemThread+0x16
```

接下来，在驱动的入口点`DriverEntry`处设置断点，继续执行直到停在入口点。此时，使用`!process`命令可以发现当前上下文是`system`。再次使用`kb`查看调用栈，可以看到当前执行到了入口点位置：

```
01 fffff880`0456b960 fffff800`04e65875 nt!IopLoadDriver+0xa07
02 fffff880`0456bc30 fffff800`04a8b161 nt!IopLoadUnloadDriver+0x55
03 fffff880`0456bc70 fffff800`04d21166 nt!ExpWorkerThread+0x111
04 fffff880`0456bd00 fffff800`04a5c486 nt!PspSystemThreadStartup+0x5a
05 fffff880`0456bd40 00000000`00000000 nt!KiStartSystemThread+0x16
```

从汇编代码中可以看出，`call qword ptr [rbx+58h]`这行代码正是执行了驱动的入口点函数。为了进一步验证我们的假设，可以在IDA中查看`rbx`即`DRIVER_OBJECT`结构体，从而确认这里的`call`指令确实是在调用`DriverInit`。

基于以上分析，我们可以探索新的方法来控制驱动的加载。在内核处理过程中，有许多操作可以作为切入点，例如内存分配、创建内核对象、权限判断等。本文重点讨论如何通过内核对象管理器来控制驱动加载。Windows内部维护了大量的对象，包括文件、进程、线程、管道、事件、内核镜像等。在使用这些对象之前，操作系统会先创建对象并将其插入到对象管理器中。因此，在加载内核模块镜像时，同样需要创建一个对象并将其插入到对象管理器中。

通过追踪`DRIVER_OBJECT`的生成过程，我们可以在`IopLoadDriver`函数中找到`ObInsertObject`函数调用，该函数负责将`DRIVER_OBJECT`对象插入到对象管理器中。具体路径如下：

```
v10 = ObInsertObject(v21, 0i64, 1u, 0, 0i64, &Handle);
```

在`ObInsertObject`内部，会调用`ObInsertObjectEx`，进而调用`ObpCreateHandle`。后者会调用`ObpPreInterceptHandleCreate`函数，这是针对当前对象类型的回调函数。因此，可以通过注册回调函数来控制对象的插入过程。

在之前的示例基础上，添加一段代码注册回调函数：

```c
Globals.ob_operation_registrations.ObjectType = IoDriverObjectType;
Globals.ob_operation_registrations.Operations |= OB_OPERATION_HANDLE_CREATE;
Globals.ob_operation_registrations.Operations |= OB_OPERATION_HANDLE_DUPLICATE;
Globals.ob_operation_registrations.PreOperation = CBTdPreOperationCallback;
Globals.ob_operation_registrations.PostOperation = CBTdPostOperationCallback;
Globals.ob_registration.Version                    = ObGetFilterVersion();
Globals.ob_registration.OperationRegistrationCount = 1;
//CBObRegistration.Altitude                   = CBAltitude;
Globals.ob_registration.RegistrationContext        = NULL;
Globals.ob_registration.OperationRegistration      = &(Globals.ob_operation_registrations);     
Status = ObRegisterCallbacks (
   &(Globals.ob_registration),
   &(Globals.registration_handle)       // save the registration handle to remove callbacks later
   ); 
if ( NT_SUCCESS(Status))
{
    Globals.ob_protect_installed = TRUE;
}
```

重新启动双机调试，在入口点设置断点。成功注册回调函数后，安装Sysmon软件并观察是否进入回调函数。通过单步调试，可以看到`sysmonDrv`驱动的入口点被成功修改。接着，在`FakeDriverEntry`函数中设置断点，继续执行后发现驱动加载失败，说明我们已经成功控制了驱动的加载过程。

总结而言，虽然有些知识已是常识，但更多新方法仍需不断研究、实践和验证才能得出意想不到的结果。本文所介绍的回调注册方法并非简单易行，需要通过逆向工程调整标志位等手段实现。希望读者能够在此基础上深入探究。