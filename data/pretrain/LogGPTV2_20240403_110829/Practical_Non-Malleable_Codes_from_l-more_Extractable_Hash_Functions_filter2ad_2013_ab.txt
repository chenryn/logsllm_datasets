5The size of the CRS is O(k), see [45]. The size of the CRS in our construction is roughly 32k bits, cf.
4
Scheme
[4]
[3] 3
[4] + [2]
[51] + [2] + [54] + [45]
This work
O(cid:0)(|s| + k)7 log7(|s| + k)(cid:1)
Codeword length
O(max{|s|, k})
|s| + O(cid:0)k7(cid:1)
|s| + O(cid:0)k2(cid:1)
|s| + 9 · k + 2 · log2(k)
Model
Information-theoretic
Information-theoretic
Assumption
N/A
N/A
Computational
Authenticated Encryption (AE)
Computational, CRS 5
Computational, CRS
Leakage-Resilient PKE + robust NIZK
1-time Leakage-Resilient AE + KEA
Table 1: Comparison of multi-bit NMC’s in the split-state model. k is the security parameter.
In the information-theoretic setting, typically security breaks with probability  = 2−Ω(k); in the
computational setting, we have  = negl(k), e.g.,  = k−ω(1) or 2−Ω(k), depending on how strong
the underlying computational assumption is.
1.2 Technical Overview
Concepts of extractability and (cid:96)-more extractability. Informally, a family of functions,
H, is extractable, if for a uniform h ∈ H, sampling an element v ∈ Image(h), without actually
evaluating the function on a pre-image s, such that h(s) = v, is infeasible. This idea is formalized
for any algorithm Av, there exists an extractor EAv , such that, if Av
in the following way:
produces some v ∈ Image(h), EAv outputs s, such that h(s) = v. Clearly, such families are
interesting only if they posses some sort of hardness property, like one-wayness, otherwise the
problem is trivial.
In this work, we introduce the notion of (cid:96)-more extractable hash function families, for which
the extractability property holds, even if Av is given access to (cid:96) valid hash values. Even though
(cid:96)-more extractability looks similar to extractability (0-more extractability in our deﬁnition), we
provide a separation between those two primitives. Before explaining further details, we ﬁrst
recall the underlying assumption, t-KEA, and the construction of Bitansky et al. [11].
t-KEA and the extractable hash function family of [11]. Assuming a group G, of prime
order p, the Knowledge of Exponent Assumption (KEA), introduced by Damg˚ard [30], states
the following: any adversary that is given a generator, g, of G, and a random group element ga,
produces the pair (gs, gas), only if it “knows” the exponent s. The assumption was later extended
by [9, 46], by requiring that, given gr1, gar1, gr2, gar2, it is infeasible to produce v = gr1s1+r2s2
and va, without “knowing” s1, s2. This assumption, generalized for t = poly(log |G|) pairs gri,
gari, is referred to as t-KEA by [11].
An element from the hash function family of [11] is described by the pair (gr, gar), for
uniformly random vector r, and element a. Note that, gr denotes the value (gr1, . . . , grt), where
r = (r1, . . . , rt). The hash of a message s = (s1, . . . , st), is the pair (g(cid:104)r,s(cid:105), ga(cid:104)r,s(cid:105)), where (cid:104)r, s(cid:105)
denotes the inner product of r, s. It is not hard to see that the hash value can be computed
eﬃciently given the message and the description of the hash function, and assuming the t-KEA,
the above hash function family is extractable, or in our terminology, 0-more extractable. As we
argue in the next paragraph, this family is not 1-more extractable, and thus, extractability does
not imply (cid:96)-more extractability.
1-more Extractable Collision Resistant Hash (ECRH). Suppose the adversary receives
a hash value v = h(s) = (g(cid:104)r,s(cid:105), ga(cid:104)r,s(cid:105)), for some unknown message s, and then computes
v(cid:48) = vx = (g(cid:104)r,xs(cid:105), ga(cid:104)r,xs(cid:105)), for some non-zero x, of its choice. Clearly, the new hash value v(cid:48)
equals h(xs), and thus, it is valid. Then, assuming an extractor for the current family, under
the “1-more” setting, we can retrieve the original message s, by ﬁrst extracting xs and then
dividing it by x. This idea can be turned into a DLog solver, and thus, assuming the hardness
of DLog with respect to G, we show in Lemma 3.5, that the above construction is not 1-more
extractable.
Next we present our strategy for constructing 1-more ECRH. Our main observation is that,
even though the above hash function family is malleable, the modiﬁed hash value, v(cid:48), has some
structure: it is the hash value of the message yielded after applying an aﬃne transformation on
the original message, s, (in the above case, the aﬃne transformation was x· s). Interestingly, we
show that under the t-KEA, applying an aﬃne transformation is the only thing the adversary
can do! In particular, we show that, if the adversary outputs a valid, new hash value, v(cid:48), then
5
there exists an extractor that extracts an aﬃne transformation on the underlying message. So, in
order to make the hash non-malleable (and then 1-more extractable), we ﬁrst encode c ← Enc(s)
using a non-malleable code against aﬃne functions, and then we compute v = (g(cid:104)r,c(cid:105), ga(cid:104)r,c(cid:105)).
This approach can be viewed as a computational analogue of a non-malleable reduction, as
previously used by [4], and then formally presented by [3] (both are in the information-theoretic
setting).
It turns out that, in order to apply the methodology described above, a slightly stronger
ﬂavor of non-malleability is required for the underlying code, which we formalize as randomness
simulatable non-malleable codes. Below, we brieﬂy discuss this notion and we give the main idea
of the proposed scheme.
Randomness simulatable NM codes against aﬃne tampering. This notion of non-
malleability is stronger than the standard one, in the sense that, besides simulating the pre-image
of the tampered codeword, ˜s, the simulator, also produces the randomness of the encoder, ˜sr,
such that the encoding of ˜s with randomness ˜sr, produces the tampered codeword. The main
idea of our construction method is given in the next paragraph.
1, s2
i = s(cid:48)
2). Then, for any codeword c = (s1, s2, s(cid:48)
For any message s, the encoder secret shares s into (s1, s2), using a two-out-of-two, additive,
1, s(cid:48)
secret sharing scheme, and outputs c = (s1, s2, s2
2),
i, for i ∈ {1, 2}, the decoder outputs s1 + s2, otherwise,
decoding proceeds as follows: if s2
it outputs ⊥. An aﬃne tampering function, f , against the code is described by the pair (b, d),
and the application of f on a codeword c, yields the codeword d· c + b. We prove security of the
above code by considering the following cases (roughly). If d = 0, then the tampered codeword
is completely overwritten by b, and clearly, the output of the decoder depends only on b. If
d (cid:54)= 0, then, we argue that, either the attack leaves the codeword intact, i.e., d = 1, b = 0, or
the decoding of the tampered codeword is ⊥, with overwhelming probability.
In Section 5.2, we formally deﬁne randomness simulatable, non-malleable codes, and prove
security for the proposed scheme.
It is worth to point out that the idea of constructing a
NM-code for aﬃne functions, as an intermediate step for providing split-state codes, was also
followed by [4], still, our technique diﬀers signiﬁcantly, and their code does not directly satisfy
our requirements. Moreover, in [24] the authors construct AMD codes, still their notions are
slightly diﬀerent and do ﬁt in our framework.
NM codes against split-state tampering. Our construction of non-malleable codes is in-
spired by the one of Liu and Lysyanskaya [51], so we ﬁrst recall their construction. To encode
a message s, their encoder outputs (sk, (pk, Epk(s), π)), where E is the encryption algorithm of a
leakage resilient, semantically secure, public-key encryption scheme (KGen, E, D), sk, pk, denote
the secret key and public key, respectively, and π is a non-interactive proof of knowledge (robust
NIZK), that proves the existence of a valid secret key, decrypting the ciphertext to the message
s.
Our construction signiﬁcantly improves the eﬃciency of [51] by reﬁning their approach: (1)
we replace the leakage resilient public key encryption with a one-time, symmetric-key, leakage
resilient authenticated encryption; (2) we replace the (robust) NIZK proof with our 1-more-
(r, sk), (e =
ECRH. Our encoder works as follows: to encode a message s, the encoder outputs
(cid:16)
(cid:17)
Esk(s), v = h(r, sk))
authenticated encryption scheme, sk is the secret key and h is a (randomized) 1-more ECRH.
, where E is the encryption algorithm of a symmetric, leakage resilient
Here the reader can easily observe that, using a function h that is extractable, or in our
terminology, 0-more extractable, is not a good idea. Since generic authenticated encryption
schemes guarantee security only if the secret key remains the same, it is possible to break security
if one modiﬁes sk as well. In fact, it is possible to construct an authenticated encryption such
that it becomes insecure if the secret key is modiﬁed. Therefore, if the hash is malleable, then
the tampering function may compute (e(cid:48) = Esk(cid:48)(s + 1), v(cid:48) = h(r, sk(cid:48))), where the sk(cid:48) is a bad key
that does not provide security. The tampered codeword clearly decodes to a related message,
and thus cannot be non-malleable. Our 1-more extractability property resolves this issue: even
if the attacker is given access to a valid hash value v, it cannot produce a valid hash value v(cid:48),
6
unless it knows a valid pre-image. Proving security for the above construction requires to handle
multiple subtleties, and we refer the reader to Section 4 for further details.
Putting things together. We construct a one-time, symmetric, leakage resilient authenticated
encryption scheme, that in order to sustain 2 · k + log2 k bits of leakage, it requires key and
ciphertext length |s| + 5· k + 2· log2(k) (cf. Sections 7, A.3)). In addition, for our 1-more ECRH
we have |r| = |v| = 2k (see Constructions 5.8 and 5.2). Therefore, the total codeword length is
|s| + 9 · k + 2 · log2(k) (or |s| + 18k, cf. A.3). The encoding and decoding procedures require
128 group operations (64 exponentiations plus 64 multiplications), independently of the message
length, plus the cost of one-time authenticated encryption and decryption, respectively.
1.3 Related work
The ﬁrst non-malleable code in the split-state model, for the information-theoretic setting was
proposed by [34], yet their scheme can only encode single-bit messages. Subsequent construc-
tions for multi-bit messages are discussed in the previous section. Non-malleable codes for
other function classes have been extensively studied, e.g., bit-wise independent tampering [35],
bounded-size function classes [39], the k-split setting [20], block-wise tampering [18, 22], and
bounded depth and fan-in circuits [6]. The work of [3] develops beautiful connections among
diﬀerent function classes.
Other aspects of non-malleable codes have also been studied, such as rate-function class
tradeoﬀ, in the information-theoretic setting [21]. Other variants of non-malleable codes have
been proposed, such as continuous non-malleable codes [37], augmented non-malleable codes [2],
locally decodable/updatable non-malleable codes [19, 27, 28, 38], which were used to secure the
implementation of RAM computation, and non-malleable codes with split-state refresh [36].
Leakage resilience was also considered as an additional feature, e.g., [19, 28, 36, 51].
A related line of work in tamper resilience aims to protect circuit computation against tam-
pering attacks on circuit wires [25, 26, 40, 48] or gates [50]. In this setting, using non-malleable
codes for protecting the circuit’s private memory is an option, still in order to achieve security
the encoding and decoding procedures should be protected against fault injection attacks using
the techniques from [25, 26, 40, 48, 50].
KEAs and previous work. In [30], Damg˚ard introduces KEA to construct a CCA-secure
encryption scheme. In [9, 46], the authors extend the assumption of [30], and construct three-
round, zero-knowledge arguments. Abe and Fehr [1] construct the ﬁrst perfect NIZK for NP with
adaptive soundness, by extending the assumption of [9]. Prabhakaran and Xue [59] constructed
statistically-hiding sets for trapdoor DDH groups [32], by introducing a new knowledge assump-
tion. Gennaro et al. [42] proved that a modiﬁed version of the Okamoto-Tanaka key-agreement
protocol [56] satisﬁes perfect forward secrecy against fully active attackers, by introducing a
new knowledge assumption. In [10–12, 41, 44], the authors construct succinct, non-interactive,
arguments of knowledge (SNARKs), and NIZKs, while in [52], Mie presents a private informa-
tion retrieval (PIR), scheme. In [15, 16, 29], Canetti and Dakdouk provide an extensive study
on extractable functions.
In [57], Parno et al. show how to perform veriﬁable computation,
eﬃciently.
In [13, 14], the authors show that, assuming indistinguishability obfuscation [8], extractable
one-way functions, and thus ECRHs, does not exist against adversaries receiving arbitrary,
polynomial-size, auxiliary input, if the extractor is ﬁxed before the attacker’s auxiliary input.
On the other hand, they show that, under standard assumptions, extractable one-way functions,
may exist against adversaries with bounded auxiliary input.
In this work, and as it is suggested by [13], we consider individual auxiliary, i.e., we allow
the auxiliary info of the extractor to depend on the attacker’s auxiliary info, and therefore, we
do not contradict the impossibility results of [13, 14].
7
2 Preliminaries
In this section we present basic primitives and notation that we use in our constructions.
Deﬁnition 2.1 (Notation). N+, R+, denote the set of positive natural and real numbers, re-
spectively. For t ∈ N+, [t] is the set {1, . . . , t}. For vectors x, y, (cid:104)x, y(cid:105) is the inner product of
x, y, and [x]i is the i-th coordinate of x. For strings x, y, x||y, is the concatenation of x, y,
and |x| denotes the length of x. For a distribution D over a set X , x ← D, denotes sampling an
element x ∈ X , according to D, x $← X , denotes sampling a uniform element x, from X , and UX
(cid:80)
denotes the uniform distribution over X . The statistical distance between two random variables
X, Y , with range D, is denoted by ∆(X, Y ), i.e., ∆(X, Y ) = 1
u∈D | Pr[X = u] − Pr[Y = u]|.
Moreover, “≈” and “≈c”, denote statistical and computational indistinguishability, respectively.
A function f : N → R+ is negligible, if for every positive polynomial poly(·), and all suﬃciently
large k, f (k) ≤ 1/poly(k), and negl(k) denotes an unspeciﬁed, negligible function, in k. For a
random variable X, H∞(X) and ˜H∞(X), denote the min-entropy, and average min-entropy, of
X, respectively. Finally, for any element g and vector r = (r1, . . . , rt), gr = (gr1, . . . , grt).
2
Below, we deﬁne coding schemes, based on the deﬁnitions of [35, 51].
Deﬁnition 2.2. (Coding scheme in the Common Reference String (CRS) Model [51])