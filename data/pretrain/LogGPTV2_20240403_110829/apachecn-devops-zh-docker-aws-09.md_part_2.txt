在本章的后面，您将为示例应用容器创建一个自定义入口点脚本，它将使用前面示例中的命令在启动时向应用容器环境注入机密。
# 使用 AWS 命令行界面更新机密
回想一下第 8 章，驱动 todobackend 应用的 Django 框架需要配置一个名为`SECRET_KEY`的环境变量，该变量用于各种加密操作。在本章的前面，当您创建**信任/凭证**机密时，您只为用于数据库密码的`MYSQL_PASSWORD`变量创建了一个键/值对。
让我们看看现在如何更新**的 todo back/credentials**机密，为`SECRET_KEY`变量添加一个值。您可以通过运行`aws secretsmanager update-secret`命令，引用机密的标识并指定新的机密值来更新机密:
```
> aws secretsmanager get-random-password --password-length 50 --exclude-characters "'\""
{
    "RandomPassword": "E2]eTfO~8Z5)&amp;0SlR-&amp;XQf=yA:B(`,p.B#R6d]a~X-vf?%%/wY"
}
> aws secretsmanager update-secret --secret-id todobackend/credentials \
    --kms-key-id alias/secrets-key \
    --secret-string '{
 "MYSQL_PASSWORD":"some-super-secret-password",
 "SECRET_KEY": "E2]eTfO~8Z5)&amp;0SlR-&amp;XQf=yA:B(`,p.B#R6d]a~X-vf?%%/wY"
 }'
{
    "ARN": "arn:aws:secretsmanager:us-east-1:385605022855:secret:todobackend/credentials-f7AQlO",
    "Name": "todobackend/credentials",
    "VersionId": "cd258b90-d108-4a06-b0f2-849be15f9c33"
}
```
Updating a Secret Value Using the AWS CLI
在前面的例子中，请注意，您可以使用`aws secretsmanager get-random-password`命令为您生成一个随机密码，这对于`SECRET_KEY`变量来说是理想的。从这个机密中排除使用`--exclude-characters`的引号和引号字符是很重要的，因为这些字符通常会导致处理这些值的 bash 脚本出现问题。
然后运行`aws secretsmanager update-secret`命令，指定正确的 KMS 键标识，并提供一个包含`MYSQL_PASSWORD`和`SECRET_KEY`键/值对的更新的 JSON 对象。
# 使用 AWS 命令行界面删除和恢复机密
删除机密可以通过运行`aws secretsmanager delete-secret`命令来实现，如下例所示:
```
> aws secretsmanager delete-secret --secret-id test/credentials
{
    "ARN": "arn:aws:secretsmanager:us-east-1:385605022855:secret:test/credentials-l3JdTI",
    "Name": "test/credentials",
    "DeletionDate": 1526198116.323
}
```
Deleting a Secret Value Using the AWS CLI
请注意，AWS 机密管理器不会立即删除您的机密，而是计划在 30 天内删除机密。在此期间，机密不可访问，但是可以在计划删除日期之前恢复，如下例所示:
```
> aws secretsmanager delete-secret --secret-id todobackend/credentials
{
    "ARN": "arn:aws:secretsmanager:us-east-1:385605022855:secret:todobackend/credentials-f7AQlO",
    "Name": "todobackend/credentials",
    "DeletionDate": 1526285256.951
}
> aws secretsmanager get-secret-value --secret-id todobackend/credentials
An error occurred (InvalidRequestException) when calling the GetSecretValue operation: You can’t perform this operation on the secret because it was deleted.
> aws secretsmanager restore-secret --secret-id todobackend/credentials
{
    "ARN": "arn:aws:secretsmanager:us-east-1:385605022855:secret:todobackend/credentials-f7AQlO",
    "Name": "todobackend/credentials"
}
> aws secretsmanager get-secret-value --secret-id todobackend/credentials \
 --query SecretString --output text
{
  "MYSQL_PASSWORD":"some-super-secret-password",
  "SECRET_KEY": "E2]eTfO~8Z5)&amp;0SlR-&amp;XQf=yA:B(`,p.B#R6d]a~X-vf?%%/wY"
}
```
Restoring a Secret Value Using the AWS CLI
您可以看到，在删除机密后，您无法访问该机密，但是，一旦您使用`aws secretsmanager restore-secret`命令恢复机密，您就可以再次访问您的机密。
# 在容器启动时注入机密
Docker 中机密管理的一个挑战是以安全的方式将机密传递给容器。
下图说明了一种有些天真但可以理解的方法，它使用环境变量将您的机密直接作为明文值注入，这就是我们在第 8 章中采用的方法:
![](img/b8598acf-a39f-4589-a201-c349a97e31bd.png)
Injecting passwords via environment variables
这种方法易于配置和理解，但是从安全角度来看，它并不被认为是最佳实践。当您采取这样的方法时，您可以通过检查 ECS 任务定义以明文查看您的凭据，如果您在 ECS 容器实例上运行`docker inspect`命令，您也可以以明文查看您的凭据。您还可能会无意中使用这种方法记录您的机密，这可能会无意中与未经授权的第三方共享，因此显然这种方法不被认为是好的做法。
另一种被认为更安全的方法是将您的机密存储在安全的凭据存储中，并让您的应用在启动或需要机密时检索机密。AWS Secrets Manager 是提供这种功能的安全凭据存储的一个示例，显然这是我们将在本章中重点介绍的解决方案。
当您将机密存储在安全的凭据存储(如 AWS 机密管理器)中时，您有两种获取机密的常规方法，如下图所示:
*   **应用注入机密:**通过这种方法，您的应用包括对直接与您的凭据存储接口的支持。在这里，您的应用可能会寻找具有静态名称的机密，或者通过环境变量注入机密名称。在 AWS 机密管理器的例子中，这意味着您的应用代码将使用 AWS SDK 对 AWS 机密管理器进行适当的应用编程接口调用来检索机密值。
*   **入口点脚本注入机密:**通过这种方法，您可以将应用所需的机密的名称配置为标准环境变量，入口点脚本在应用之前运行，从 AWS 机密管理器中检索机密，并将它们作为环境变量注入内部容器环境。虽然这听起来像是在 ECS 任务定义级别配置环境变量的类似方法，但不同之处在于，这是在应用外部配置的环境变量后在容器内部发生的，这意味着它们不会暴露给 ECS 控制台或`docker inspect`命令:
![](img/1f2b0532-b097-4637-861e-d3492194ff46.png)
Using a Credential Store to Store and Retrieve Passwords
从安全角度来看，应用注入机密的方法通常被认为是最好的方法，但是它确实要求应用明确支持与您使用的凭据存储进行交互，这意味着需要额外的开发和成本来支持这种方法。
入口点脚本方法被认为不太安全，因为您在应用之外公开了一个机密，但是机密的可见性只在容器本身之内，而在外部是不可见的。使用入口点脚本的好处是不需要应用专门支持与凭据存储的交互，这使得它成为一个更通用的解决方案，可以在运行时以对大多数组织来说足够安全的方式提供机密，这是我们现在将关注的方法。
# 创建入口点脚本
Docker `ENTRYPOINT`指令配置容器执行的第一个命令或脚本。当结合`CMD`指令进行配置时，将执行`ENTRYPOINT`命令或脚本，其中`CMD`命令作为参数传递给入口点脚本。这建立了一种非常常见的模式，即入口点执行初始化任务，例如向环境中注入机密，然后环境根据传递给脚本的命令参数调用应用。
下面的示例演示了如何为 todo back and 示例应用创建入口点脚本，该脚本应该放在 todo back and 存储库的根目录下:
```
> pwd
/Users/jmenga/Source/docker-in-aws/todobackend
> touch entrypoint.sh > tree -L 1 .
├── Dockerfile
├── Makefile
├── docker-compose.yml
├── entrypoint.sh
└── src
1 directory, 4 files
```
Creating an Entrypoint Script in the Todobackend Repository
以下示例显示了入口点脚本的内容，该脚本将来自 AWS 机密管理器的机密注入到环境中:
```
#!/bin/bash
set -e -o pipefail
# Inject AWS Secrets Manager Secrets
# Read space delimited list of secret names from SECRETS environment variable
echo "Processing secrets [${SECRETS}]..."
read -r -a secrets  export SECRETS="db/credentials app/credentials"
```
Defining Multiple Secrets
回到前面的例子，脚本循环遍历数组中的每个机密，使用`aws secretsmanager get-secret-value`命令获取每个机密的`SecretString`值，然后将每个值传递给`jq`实用程序，将`SecretString`值解析为 JSON 对象，并生成一个 shell 表达式，将每个机密密钥和值导出为环境变量。请注意，`jq`表达式包含大量转义，以确保特殊字符按字面意思解释，但该表达式的本质是为凭据中的每个键/值对输出`export *key*='*value*'`。
为了进一步理解这一点，您可以使用之前创建的`todobackend/credentials`密码在命令行运行相同的命令:
```
> aws secretsmanager get-secret-value --secret-id todobackend/credentials \
 --query SecretString --output text \
 | jq -r 'to_entries[] | "export \(.key)='\''\(.value)'\''"'
export MYSQL_PASSWORD='some-super-secret-password'
export SECRET_KEY='E2]eTfO~8Z5)&amp;0SlR-&amp;XQf=yA:B(`,p.B#R6d]a~X-vf?%%/wY'
```
Generating a Shell Expression to Export Secrets into the Environment
在前面的例子中，请注意输出是您将要执行的将密钥/值对注入环境的单个`export`命令。每个环境变量值也是单引号，以确保 bash 将所有特殊字符视为文字值。
回到前面的例子，for 循环中的`eval $vars`语句只是将生成的导出语句作为 shell 命令进行评估，这导致每个键/值对被注入到本地环境中。
Capturing the output of the `aws secretsmanager ...` command substitution in a separate variable ensures any errors that occur in this command substitution will be relayed back to your entrypoint script. You might be tempted to just run a single `eval $(aws secretsmanager ..)` statement in the for loop, however taking such an approach would mean if the `aws secretsmanager ...` command substitution exits with an error, your entrypoint script will not be aware of this error and will continue executing, which may lead to strange behavior for your application.
一旦循环完成，最终的`exec "$@"`语句将控制权交给传递给入口点脚本的参数——这些参数由特殊的`$@`外壳变量表示。例如，如果您的入口点脚本被调用为`entrypoint python3 manage.py migrate --noinput`，那么`$@` shell 变量将保存参数`python3 manage.py migrate --noinput`，最终的`exec`命令将启动并将控制权移交给`python3 manage.py migrate --noinput`命令。
It is very important to use the `exec "$@"` approach in your container entrypoint scripts, as `exec` ensures that the parent process of your container becomes whatever the command arguments that were passed to the entrypoint. If you didn't use `exec` and just ran the commands, the parent bash process that is running the script would remain the parent process of your container, and the bash process (rather than your application) would received subsequent signals to terminate the container when the container is stopped. You typically want your application to receive these signals, so that your application can gracefully clean up before terminating.
# 向 Dockerfile 添加入口点脚本
现在，您已经在 todobackend 存储库中建立了入口点脚本，您需要将该脚本添加到现有的 Dockerfile 中，并使用`ENTRYPOINT`指令确保该脚本被指定为入口点:
```
...
...
# Release stage
FROM alpine
LABEL=todobackend
# Install operating system dependencies
RUN apk add --no-cache python3 mariadb-client bash curl bats jq && \
 pip3 --no-cache-dir install awscli
# Create app user
RUN addgroup -g 1000 app && \
    adduser -u 1000 -G app -D app
# Copy and install application source and pre-built dependencies
COPY --from=test --chown=app:app /build /build
COPY --from=test --chown=app:app /app /app
RUN pip3 install -r /build/requirements.txt -f /build --no-index --no-cache-dir
RUN rm -rf /build
# Create public volume
RUN mkdir /public
RUN chown app:app /public
VOLUME /public
# Entrypoint script
COPY entrypoint.sh /usr/bin/entrypoint