:::
在花费时间将 SysV
初始化脚本转换为单元文件之前，请确保在别处尚未执行转换。Red Hat
Enterprise Linux
中安装的所有核心服务都有默认的单元文件，许多第三方软件包也是如此。
将初始化脚本转换成单元文件需要分析脚本并从中提取所需信息。基于这个数据，您可以创建一个单元文件。因为初始化脚本可能会有很大差异，具体取决于服务类型，因此您可能需要使用比本章中介绍的更多配置选项进行转换。请注意，systemd
单元不再支持 init 脚本提供某种级别的定制。
脚本标题中提供了转换所需的大部分信息。以下示例显示了在 Red Hat
Enterprise Linux 6 中启动 `postfix`{.literal} 服务初始化脚本的打开部分：
``` literallayout
!/bin/bash # postfix Postfix Mail Transfer Agent # chkconfig: 2345 80 30 # description: Postfix is a Mail Transport Agent, which is the program that moves mail from one machine to another. # processname: master # pidfile: /var/spool/postfix/pid/master.pid # config: /etc/postfix/main.cf # config: /etc/postfix/master.cf  BEGIN INIT INFO # Provides: postfix MTA # Required-Start: $local_fs $network $remote_fs # Required-Stop: $local_fs $network $remote_fs # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: start and stop postfix # Description: Postfix is a Mail Transport Agent, which is the program that moves mail from one machine to another. # END INIT INFO
```
在上面的例子中,只有以 [**\# chkconfig**]{.strong} 和 [**\#
description**]{.strong} 开头的行是强制的，因此您可能不会在不同的 init
文件中找到其他行。[**BEGIN INIT INFO** ]{.strong} 和 [**END INIT
INFO**]{.strong} 行之间连接的文本名为 [**Linux Standard Base (LSB)
header**]{.strong}。如果指定，LSB
标头包含定义服务描述、依赖项和默认运行级别的指令。下面是一个分析任务概述，旨在收集新单元文件所需的数据。postfix
初始化脚本用作示例。
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#con_finding-the-systemd-service-description_assembly_working-with-systemd-unit-files}查找 systemd 服务描述 {.title}
:::
您可以在以 [**#description**]{.strong}
开头的行中找到有关脚本的描述性信息。将此描述与单元文件的 \[Unit\]
部分中的 `Description`{.literal} 选项中的服务名称一同使用。LSB
标头可能在 [**#Short-Description**]{.strong} 和
[**#Description**]{.strong} 行中包含类似的数据。
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#ref_finding-the-systemd-service-dependencies_assembly_working-with-systemd-unit-files}查找 systemd 服务依赖项 {.title}
:::
LSB 标头可能包含一些在服务间组成相依性指令。大多数可以转换到 systemd
单元选项，请查看下表：
::: table
[]{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#tabl-systemd-Init_Deps}
**表 17.4. LSB 标头中的依赖项选项**
::: table-contents
  LSB 选项                                             描述                                                                                                                                                                                                                          单元文件的对等
  ---------------------------------------------------- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------------
  `Provides`{.literal}                                 指定服务的引导工具名称，可在其他初始化脚本中引用（使用\"\$\"前缀）。因为单元文件根据文件名指向其他单元，所以不再需要这个操作。                                                                                                --
  `Required-Start`{.literal}                           包含所需服务的引导工具名称。这被转换为排序依赖关系，引导工具名称替换为相应服务或所属服务的单元文件名。例如，如果是 `postfix`{.literal}，\$network 上的 Required-Start 依赖关系被转换为 network.target 上的 After 依赖关系。   `After`{.literal}, `Before`{.literal}
  `Should-Start`{.literal}                             比 Required-Start 更弱的依赖项。Should-Start 依赖项失败不会影响服务的启动。                                                                                                                                                   `After`{.literal}, `Before`{.literal}
  `required-Stop`{.literal}, `Should-Stop`{.literal}   组成负依赖关系。                                                                                                                                                                                                              `Conflicts`{.literal}
:::
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#con_finding-default-targets-of-the-service_assembly_working-with-systemd-unit-files}查找服务的默认目标 {.title}
:::
以 [**#chkconfig**]{.strong}
开始的行包含三个数字值。最重要的是第一个代表启动该服务的默认运行级别的数字。将这些运行级别映射到等同的
systemd 目标。然后在单元文件的 \[Install\] 部分中的 `WantedBy`{.literal}
选项中列出这些目标。例如： `postfix`{.literal} 之前在运行级别 2、3、4 和
5 中启动，它们转换为 multi-user.target 和
graphical.target。请注意，graphical.target 依赖于
multiuser.target，因此不需要同时指定。您可能会在 LSB 标头的
[**#Default-Start**]{.strong} 和 [**#Default-Stop**]{.strong}
行中找到默认和禁用运行级别的信息。
[**#chkconfig**]{.strong}
行里指定的其他两个值代表初始化脚本的启动和关闭优先级。如果 [**systemd
加载初始化脚本，则这些值由 systemd**]{.strong}
解释，但没有等效的单元文件。
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#con_finding-files-used-by-the-service_assembly_working-with-systemd-unit-files}查找该服务使用的文件 {.title}
:::
初始化脚本需要从专用目录中载入功能库，并允许导入配置、环境和 PID
文件。环境变量在初始化脚本标头中以 [**#config**]{.strong}
开头的行指定，该行转换为 `EnvironmentFile`{.literal}
单元文件选项。[**#pidfile**]{.strong} init 脚本行中指定的 PID 文件通过
`PIDFile`{.literal} 选项导入到单元文件中。
未包含在初始化脚本标头中的关键信息是该服务可执行文件的路径，以及该服务可能需要的一些其他文件。在之前的
Red Hat Enterprise Linux 版本中，init 脚本使用 Bash case
语句来定义服务对默认操作的行为，如 [**start[]{.strong}、stop**]{.strong}
或 [**restart**]{.strong}，以及自定义定义的操作。以下摘录自
`postfix`{.literal} 初始化脚本显示了要在 service 启动时执行的代码块：
``` literallayout
conf_check() {
    [ -x /usr/sbin/postfix ] || exit 5
    [ -d /etc/postfix ] || exit 6
    [ -d /var/spool/postfix ] || exit 5
}
make_aliasesdb() {
	if [ "$(/usr/sbin/postconf -h alias_database)" == "hash:/etc/aliases" ]
	then
		# /etc/aliases.db might be used by other MTA, make sure nothing
		# has touched it since our last newaliases call
		[ /etc/aliases -nt /etc/aliases.db ] ||
			[ "$ALIASESDB_STAMP" -nt /etc/aliases.db ] ||
			[ "$ALIASESDB_STAMP" -ot /etc/aliases.db ] || return
		/usr/bin/newaliases
		touch -r /etc/aliases.db "$ALIASESDB_STAMP"
	else
		/usr/bin/newaliases
	fi
}
start() {
	[ "$EUID" != "0" ] && exit 4
	# Check that networking is up.
	[ ${NETWORKING} = "no" ] && exit 1
	conf_check
	# Start daemons.
	echo -n $"Starting postfix: "
	make_aliasesdb >/dev/null 2>&1
	[ -x $CHROOT_UPDATE ] && $CHROOT_UPDATE
	/usr/sbin/postfix start 2>/dev/null 1>&2 && success || failure $"$prog start"
	RETVAL=$?
	[ $RETVAL -eq 0 ] && touch $lockfile
        echo
	return $RETVAL
}
```
init 脚本的可扩展性允许指定从
`start （）函数块调用的两个自定义功能：conf _check`{.literal} （）和
make_aliasesdb``{=html} (``{=html}
)。然后,上面的代码中提到几个外部文件和目录：主服务可执行文件
`/usr/sbin/postfix`{.literal}、`/etc/postfix/`{.literal} 和
`/var/spool/postfix/`{.literal} 配置目录，以及
`/usr/sbin/postconf/`{.literal} 目录。
[**System**]{.strong} d
只支持预定义的操作，但通过ExecStart、`ExecStart`{.literal}
`Pre、ExecStart`{.literal} `Post、Exec`{.literal}
`Stop 和Exec`{.literal} `Reload`{.literal} 选项启用自定义可执行文件。在
service start 中执行 `/usr/sbin/postfix`{.literal}
以及支持脚本。转换复杂的 init
脚本需要了解脚本中的每个语句的用途。其中一些语句特定于操作系统版本，因此您不需要转换它们。另一方面，新环境中可能需要进行一些调整，无论是在单元文件还是服务可执行文件中，还是在支持文件中。
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#proc_modifying-existing-unit-files_assembly_working-with-systemd-unit-files}修改现有单元文件 {.title}
:::
在系统中安装的服务会附带保存在 `/usr/lib/systemd/system/`{.literal}
目录中的默认单元文件。系统管理员不应该直接修改这些文件，因此任何自定义都必须仅限于
`/etc/systemd/system/`{.literal} 目录中的配置文件。
::: orderedlist
**流程**
1.  根据所需更改的程度，选择以下方法之一：
    ::: itemizedlist
    -   在 `/etc/systemd/system/unit.d/`{.literal}
        中创建一个附加配置文件的目录。我们推荐在大多数用例中使用这个方法。它启用了额外的功能来扩展默认配置，同时仍然引用原始的单元文件。因此，软件包升级引入的默认单元的更改会被自动应用。请参阅
        [扩展默认单元配置](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#extending-the-default-unit-configuration_working-with-systemd-unit-files){.link}
    -   在 `/etc/systemd/system/`{.literal} 中创建原始单元文件
        `/usr/lib/systemd/system/`{.literal}
        的副本并在此进行修改。这个副本会覆盖原始文件，因此不会应用软件包更新带来的更改。这个方法对无论软件包更新都应保留的重要单元更改都很有用。详情请参阅
        [覆盖默认单元配置](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#overriding-the-default-unit-configuration_working-with-systemd-unit-files){.link}。
    :::
2.  要返回单元的默认配置，请删除 `/etc/systemd/system/ 中的`{.literal}
    自定义配置文件。
3.  要在不重启系统的情况下对单元文件应用更改，请执行：
    ``` literallayout
    systemctl daemon-reload
    ```
    `daemon-reload`{.literal}
    选项重新加载所有单元文件并重新创建依赖项树，这是立即将任何更改应用到单元文件所必需的。另外，您可以使用以下命令得到同样的结果，该命令必须以
    `root`{.literal} 用户执行：
    ``` literallayout
    init q
    ```
4.  如果修改后的单元文件属于正在运行的服务，则必须重启该服务以接受新设置：
    ``` literallayout
    systemctl restart name.service
    ```
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
要修改由 SysV initscript 处理的服务的属性（如依赖项或超时），请不要修改
initscript 本身。相反，请为该服务创建一个 `systemd`{.literal}
置入配置文件，如
[扩展默认单元配置](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#extending-the-default-unit-configuration_working-with-systemd-unit-files){.link}
[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#overriding-the-default-unit-configuration_working-with-systemd-unit-files](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#overriding-the-default-unit-configuration_working-with-systemd-unit-files){.link}
中所述。
然后，以与普通 `systemd`{.literal} 服务相同的方式管理该服务。
例如：要扩展 `network`{.literal} 服务的配置，不要修改
`/etc/rc.d/init.d/network`{.literal} initscript 文件。反之，创建新目录
`/etc/systemd/system/network.service.d/`{.literal} 和一个
`systemd`{.literal} drop-in 文件
`/etc/systemd/system/network.service.d/my_config.conf`{.literal}。然后将修改的值放到
drop-in 文件中。注： `systemd`{.literal} 知道 `network`{.literal} 服务为
`network.service`{.literal}，这就是为什么创建的目录必须名为
`network.service.d`{.literal}
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#proc_extending-the-default-unit-configuration_assembly_working-with-systemd-unit-files}扩展默认单元配置 {.title}
:::
这部分论述了如何使用附加配置选项扩展默认单元文件。
::: orderedlist
**流程**
1.  要使用附加配置选项扩展默认单元文件，请首先在
    `/etc/systemd/system/`{.literal}
    中创建配置目录。如果扩展服务单元，以 `root`{.literal}
    用户身份执行以下命令：
    ``` literallayout
    mkdir /etc/systemd/system/name.service.d/
    ```
    使用您要扩展的服务的名称替换
    [*name*]{.emphasis}。以上语法适用于所有单元类型。
2.  在上一步中创建的目录中创建配置文件。请注意，文件名必须以
    [**.conf**]{.strong} 后缀结尾。类型：
    ``` literallayout
    touch /etc/systemd/system/name.service.d/config_name.conf
    ```
    使用配置文件的名称替换
    [*config_name*]{.emphasis}。此文件遵循通常的单元文件结构，因此必须在适当的部分中指定所有指令，请参阅单元文件
    [结构](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#unit-file-structure_working-with-systemd-unit-files){.link}。
    例如，要添加自定义依赖项，请使用以下内容创建配置文件：
    ``` literallayout
    [Unit]
    Requires=new_dependency
    After=new_dependency
    ```
    这里的 [*new_dependency*]{.emphasis}
    代表这个单元被标记为依赖项。另一个例子是主进程退出后重新启动服务的配置文件，延迟
    30 秒：
    ``` literallayout
    [Service]
    Restart=always
    RestartSec=30
    ```
    建议您创建仅关注一项任务的小配置文件。这些文件可轻松地移动或者链接到其他服务的配置目录。
3.  要应用对单位所做的更改，以 `root`{.literal} 用户身份执行：
    ``` literallayout
    systemctl daemon-reload
    systemctl restart name.service
    ```
:::
::: example
[]{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#exam-systemd-Extending_Unit_Config}
**例 17.1. 扩展 httpd.service 配置**
::: example-contents
要修改 httpd.service 单元，以便在启动 Apache 服务时自动执行自定义 shell
脚本，请执行以下步骤。
::: orderedlist
1.  创建目录和自定义配置文件：
    ``` literallayout
    # mkdir /etc/systemd/system/httpd.service.d/
    ```
    ``` literallayout
    # touch /etc/systemd/system/httpd.service.d/custom_script.conf
    ```
2.  如果想要用 Apache 自动启动的脚本位于
    `/usr/local/bin/custom.sh`{.literal}，在
    `custom_script.conf`{.literal} 文件中插入以下文本：
    ``` literallayout
    [Service]
    ExecStartPost=/usr/local/bin/custom.sh
    ```
3.  要应用单元更改，请执行：
    ``` literallayout
    # systemctl daemon-reload
    ```
    ``` literallayout
    # systemctl restart httpd.service
    ```
:::
:::
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
`/etc/systemd/system/`{.literal} 配置文件中的配置文件优先于
`/usr/lib/systemd/system/`{.literal}
中的单元文件。因此，如果配置文件包含只能指定一次的选项，如
`Description`{.literal} 或
`ExecStart`{.literal}，则此选项的默认值将被覆盖。请注意，在
`systemd-delta`{.literal}
命令的输出中，[监控覆盖单元中描述的单元](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#monitoring-overriden-units_working-with-systemd-unit-files){.link}
始终标记为 \[EXTENDED\]，即使在 sum 中，某些选项实际上也会被覆盖。
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#proc_overriding-the-default-unit-configuration_assembly_working-with-systemd-unit-files}覆盖默认单元配置 {.title}
:::
这部分论述了如何覆盖默认单元配置。
::: orderedlist
**流程**
1.  要在更新提供该单元文件的软件包后保留更改，首先要将该文件复制到
    `/etc/systemd/system/`{.literal} 目录。要做到这一点，以
    `root`{.literal} 用户身份执行以下命令：
    ``` literallayout
    cp /usr/lib/systemd/system/name.service /etc/systemd/system/name.service
    ```
    其中 [*name*]{.emphasis}
    代表您希望修改的服务单元的名称。以上语法适用于所有单元类型。
2.  使用文本编辑器打开复制的文件，并进行必要的修改。要应用单元更改，以