This intuitive argument, however, assumes that the protocol
satisfies certain standard properties. As alluded to above, there is
an assumption that the set of messages broadcast by a group of
processors will reflect their resource balances and that the adversary
will have a minority resource balance. There is also an assumption
that broadcast messages will (in some sense) point to a particular
position on the blockchain. So we will have to formalise these ideas,
and the results we prove will only hold modulo the assumption
that these standard properties are satisfied.
First, let us formalise the idea that messages always point to a
position on the blockchain.
satisfies all of the following:
Definition 5.2. We say that a protocol is in standard form if it
• The protocol has standard functionality (see Definition 4.5).
• Every broadcast message is ‘attached’ to a specific block
(blocks being attached to themselves).
• While B is confirmed for p, the state transition diagram S will
only instruct p to broadcast messages which are attached to
B or descendants of B.
Reflecting the resource pool. Now let us try to describe how the
permitter might reflect the resource pool. We will need a simple
way to say that one set of processors consistently has a higher
resource balance than another.
Definition 5.3. For Θ > 1, we say a set of public keys U1 domi-
nates another set U2, denoted U1 >Θ U2, if the following holds
for all sets of broadcast messages M and all timeslots t:
R (U, t, M ).
(cid:88)
U∈U1
R (U, t, M ) > Θ · (cid:88)
U∈U2
Next, we will need to formalise the idea that, if one set of keys
dominates another, then they will be able to broadcast discernibly
different sets of messages. Recall that, in the timed setting, each
message m corresponds to a timeslot tm, which can be determined
from m. We write M[t1, t2] to denote the set {M| ∀m ∈ M, tm ∈
[t1, t2]}. We will say that the set of keys U0 is directed to broadcast
M if, for every m ∈ M, there is some member of U0 that is given
permission to broadcast m and is directed to broadcast m by the
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1017protocol. We will say that U0 is able to broadcast M if, for every
m ∈ M, there is some member of U0 that is given permission to
broadcast m. We define M∗ := {M| M is finite}. We let T be the set
of functions T : D × M → R≥0 (so that the total resource balance
T ∈ T). We say that a set of keys U0 has total resource balance
U∈U0 R (U, t, M ). In the definition
below, we say r is sublinear in |D| if, for each Θ, ε,T , and for every
α ∈ (0, 1), it holds that r (Θ, ε,T , |D|) 1 × R>0 ×
T × N → N and X : R>1 × R>0 × T × N → 2M∗, such that:
(1) r is sublinear in |D|.
(2) If U1 ∪ U2 has total resource balance T , and if U1 >Θ U2,
then, when the protocol is run with security parameter ε and
for |D| many timeslots, the following holds with probability
> 1 − ε: For all intervals of timeslots [t1, t2] with t2 − t1 ≥
r (Θ, ε,T , |D|), there exists some element of X(Θ, ε,T , |D|) ∩
M[t1, t2] which U1 is directed to broadcast, while U2 is not
able to broadcast any element of X(Θ, ε,T , |D|) ∩ M[t1, t2].
So in Definition 5.4, r specifies a number of timeslots. Then X
specifies certain sets of messages M such that, if U1 >Θ U2 and
U1 ∪ U2 has total resource balance T , then U1 can be expected to
broadcast one of these sets M in any interval of sufficient length
(i.e. the length specified by r). To make this interesting, we also
have that U2 can be expected not to make such broadcasts. To
see why this is a natural and reasonable condition to assume, it is
instructive to consider the example of Sized Bitcoin. Suppose that
in some execution the honest users always have at least 60% of
the mining power. Then, over any long period of time r, we can
be fairly sure that honest users will get to make at least 50% of
the expected number of block broadcasts, while the adversary is
unlikely to be able to make such broadcasts if r is large enough.
In fact, the exponentially fast convergence for the law of large
numbers guaranteed by bounds like Hoeffding’s inequality, means
r only needs to grow with ln 1/p, where p is the probability of error
(i.e. the probability these conditions on the block broadcasts don’t
hold in a given interval). It is therefore not difficult to see that Sized
Bitcoin would reflect the resource pool if it could be implemented in
a timed setting. Similar arguments can be made for all well known
PoS protocols,16 and these are implemented in the timed setting.
Definition 5.5. In the bounded adversary setting it is assumed
(i) U1 >Θ U2 for some determined input parameter Θ > 1,
where U1 is the set of keys controlled by non-faulty proces-
sors, and U2 is the the set of keys controlled by the adversary.
(ii) (S, O, C) reflects the resource pool.
Finally, we can now formalise the idea that under standard con-
ditions, standard protocols in the sized setting produce certificates.
that:
16The example of Snow White was discussed previously. As suggested in Section 1, one
way to define X in the context of Snow White is to consider long chains of sufficient
density, meaning that they have members corresponding to most possible timeslots,
that they cannot likely be produced by a (sufficiently bounded) adversary.
Theorem 5.6. Consider the timed, bounded adversary and sized
setting. If P is in standard form, then there exists a faithful recalibra-
tion that produces certificates.
Proof. To define our recalibration (P′, C′), suppose we are given
values for ε, T , Θ and D. We need to specify a value ε′ to give as
input to P (we will leave other values unchanged), and we must also
define C′. Then we need to show that the new extended protocol is
uniformly live and produces certificates.
We define ε′ := ε/4. Towards defining C′, suppose that P sat-
isfies uniform liveness with respect to ℓε′,D. We divide the dura-
:= i · (ℓε′,D +
tion into intervals of length ℓε′,D, by defining ti
r (Θ, ε′, T , |D|)). From the definition of uniform liveness we have
the following.
($1) With probability > 1−ε/4 it holds that, for all i with ti ≤ |D|,
all users have at least i many confirmed blocks by the end
of timeslot ti.
], and write M[Ii] to denote M[ti , t∗
Now suppose (P, C) satisfies Definition 5.4 with respect to r and
X. For each i > 0, define t∗
:= ti + r (Θ, ε′, T , |D|). Let Ii be the
interval [ti , t∗
]. Let U1 be the
i
set of keys controlled by non-faulty processors, and let U2 be the
the set of keys controlled by the adversary. According to Definition
5.4, we can then conclude that:
($2) It holds with probability > 1 − ε/4 that, whenever Ii is
contained in the duration, there exists some element of
X(Θ, ε′, T , |D|) ∩ M[Ii] which U1 is directed to broadcast,
while U2 is not able to broadcast any element of this set.
i
i
Since P is uniformly secure, we also know that:
($3) With probability > 1 − ε/4, there do not exist incompati-
ble blocks B1, B2, timeslots t1, t2 and U1, U2 such that Bi is
confirmed for Ui at ti for i ∈ {1, 2}.
So now define X∗ (Θ, ε′, T , |D|) to be all those M in X(Θ, ε′, T , |D|)
for which there exists i such that all of the following hold: (i) Ii ⊆ D;
(ii) M ∈ M[Ii], and; (iii) For some chain C of length i with leaf B,
all messages in M are attached B or its descendants.
Now if M ∈ X∗ (Θ, ε′, T , |D|), then let iM be the (unique) i such
that (i)–(iii) hold for i and M, let C be as specified in (iii) for iM , and
define C∗ (M ) := C. We also define C∗ (∅) = ∅. This function C∗ is
almost the notion of confirmation that we want for our recalibration,
but the problem is that it is only defined for very specific values of
M. We will use C∗ to help us define C′ that is defined for all possible
M. Combining ($1), ($2) and ($3), and the definition of X∗, it follows
that with probability > 1 − ε both of the following hold:
(1) If M, M′ ∈ X∗ (Θ, ε′, T , |D|) are both broadcast, then all
(2) For every i > 0, there exists M ∈ X∗ (Θ, ε′, T , |D|) which is
In order to define C′ for our recalibration, we can then pro-
ceed as follows. Given arbitrary M, choose M′ ⊆ M such that
M′ ∈ X∗ (Θ, ε′, T , |D|) and iM′ is maximal, or if there exists no
M′ satisfying these conditions then define M′ := ∅. We define
C′(M ) := C∗ (M′). It follows from (1) and (2) above that (P′, C′)
produces certificates and satisfies uniform liveness with respect to
ℓ′
ε,D := ℓε′,D + 2r (Θ, ε′, T , |D|).
□
blocks in C∗ (M ) are compatible with all those in C∗ (M′).
broadcast and such that iM = i.
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1018REFERENCES
[1] Eduardo AP Alchieri, Alysson Neves Bessani, Joni da Silva Fraga, and Fabíola
Greve. 2008. Byzantine consensus with unknown participants. In International
Conference On Principles Of Distributed Systems. Springer, 22–40.
[2] Vivek Bagaria, Sreeram Kannan, David Tse, Giulia Fanti, and Pramod Viswanath.
2019. Prism: Deconstructing the blockchain to approach physical limits. In
Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications
Security. 585–602.
[3] Iddo Bentov, Rafael Pass, and Elaine Shi. 2016. Snow White: Provably Secure
Proofs of Stake. IACR Cryptology ePrint Archive 2016, 919 (2016).
[4] Ethan Buchman. 2016. Tendermint: Byzantine fault tolerance in the age of
blockchains. Ph.D. Dissertation.
[5] Ran Canetti. 2001. Universally composable security: A new paradigm for cryp-
tographic protocols. In Proceedings 42nd IEEE Symposium on Foundations of
Computer Science. IEEE, 136–145.
[6] David Cavin, Yoav Sasson, and André Schiper. 2004. Consensus with unknown
participants or fundamental self-organization. In International Conference on
Ad-Hoc Networks and Wireless. Springer, 135–148.
[7] Jing Chen, Sergey Gorbunov, Silvio Micali, and Georgios Vlachos. 2018. ALGO-
RAND AGREEMENT: Super Fast and Partition Resilient Byzantine Agreement.
IACR Cryptol. ePrint Arch. 2018 (2018), 377.
(2016).
[8] Jing Chen and Silvio Micali. 2016. Algorand. arXiv preprint arXiv:1607.01341
[9] Cynthia Dwork, Nancy A. Lynch, and Larry Stockmeyer. 1988. Consensus in the
[10] Juan A Garay, Aggelos Kiayias, and Nikos Leonardos. 2018. The Bitcoin Backbone
Presence of Partial Synchrony. J. ACM 35, 2 (1988), 288–323.
Protocol: Analysis and Applications. (2018).
tem.(2008).
[11] Aggelos Kiayias, Alexander Russell, Bernardo David, and Roman Oliynykov. 2017.
Ouroboros: A provably secure proof-of-stake blockchain protocol. In Annual
International Cryptology Conference. Springer, 357–388.
[12] Andrew Lewis-Pye and Tim Roughgarden. 2021. Byzantine Generals in the
Permissionless Setting. arXiv preprint arXiv:2101.07095 (2021).
[13] Nancy A Lynch. 1996. Distributed algorithms. Elsevier.
[14] Satoshi Nakamoto et al. 2008. Bitcoin: A peer-to-peer electronic cash sys-
[15] Michael Okun. 2005. Distributed computing among unacquainted processors in the
[16] Rafael Pass, Lior Seeman, and abhi shelat. 2016. Analysis of the Blockchain
presence of Byzantine failures. Hebrew University of Jerusalem.
Protocol in Asynchronous Networks. eprint.iacr.org/2016/454.
ePrint Archive, Report 2019/943.(2019). https://eprint. iacr.org.
[17] Ling Ren. 2019. Analysis of nakamoto consensus. Technical Report. Cryptology
[18] Maofan Yin, Dahlia Malkhi, Michael K Reiter, Guy Golan Gueta, and Ittai Abra-
ham. 2019. HotStuff: BFT consensus with linearity and responsiveness. In Pro-
ceedings of the 2019 ACM Symposium on Principles of Distributed Computing.
347–356.
6 APPENDIX – TABLE 1.
term
B
C
D
∆
meaning
a block
a notion of confirmation
the duration
bound on message delay during synchronous
intervals
the security parameter
a protocol instance
a message
a set of messages
the set of all possible sets of messages
a permitter oracle
a processor
a permission set
a permissionless protocol
a request set
the resource pool
a state transition diagram
a message
a timeslot
a request in the timed setting
a timing rule
a public key
a request in the untimed setting
the set of all public keys
the set public keys for p
ε
In
m
M
M
O
p
P
P
R
R
S
σ
t
(t, U, M, A)
T
U
(U, M, A)
U
Up
Table 1: Some commonly used variables and terms.
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1019