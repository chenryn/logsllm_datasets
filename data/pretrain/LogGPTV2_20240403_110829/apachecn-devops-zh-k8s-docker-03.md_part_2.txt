要创建用户定义的网络，可以使用 Docker CLI 中的 `network` 管理选项和 `create` 子命令。其语法相对简单；您只需提供新网络所需的名称，Docker 将自动为您创建该网络。例如，若要创建一个名为 `frontend` 的新网络，请执行以下命令：

```
docker network create frontend
```

执行后，系统将返回新创建网络的唯一标识符。如果您再次列出所有网络（通过运行 `docker network ls`），将会看到一个新的桥接网络已经可用。

由于我们仅指定了网络名称而未指定其他参数，Docker 会自动为该网络分配一个非重叠的 IP 范围。然而，如果您希望创建一个具有特定子网（如 `192.168.10.0/24`）及默认网关（如 `192.168.10.1`）的新网络，并命名为 `backend`，则需在 `docker network create` 命令中添加 `--subnet` 和 `--gateway` 选项：

```
docker network create --subnet=192.168.10.0/24 --gateway=192.168.10.1 backend
```

当您像这样创建了一个新的网络时，Docker 会在主机上绑定一个新的 IP 地址，这个地址与 `create` 命令中使用的网关地址相同。这使得您的主机能够将网络流量路由至连接到此交换机上的任何容器。容器可以通过设置主机 IP 作为其默认网关来访问外部网络资源。

### 将容器连接到用户定义的网络

要在启动容器的同时将其连接到某个特定网络，可以在 `docker run` 命令中加入 `--network` 选项。比如，如果想让一个新的 NGINX 容器连接到之前创建的 `frontend` 网络，只需要在启动容器时添加 `--network=frontend` 参数即可：

```
docker run -d --name frontend --network=frontend nginx
```

上述命令将在名为 `frontend` 的自定义网络上启动一个名为 `frontend` 的新 NGINX 容器。

### 动态更改正在运行的容器的网络

与默认网络相比，使用自定义网络的一个主要优点是能够在不重启容器的情况下动态地修改其网络配置。要实现这一点，您可以利用 Docker 提供的 `connect` 和 `disconnect` 选项，配合具体的网络名和容器名进行操作。当使用 `connect` 时，可以向容器添加额外的网络；而使用 `disconnect` 则可以从容器中移除某个网络而不必停止它。

假设我们有一个已分配了 `frontend` 网络的 NGINX 容器，但我们现在想要将其切换至 `backend` 网络。首先，需要通过 `docker network connect` 命令将 `backend` 网络附加给容器；接着再用 `docker network disconnect` 移除原有的 `frontend` 连接。

值得注意的是，单个容器也可以同时隶属于多个网络。这种配置对于那些既需要访问特殊网络（例如支持巨型帧传输）又需要保持常规互联网连接的应用程序来说非常有用。不过，实现这样的多网络配置可能涉及到复杂的路由规则设定，在这里不做深入讨论。

### 删除不再需要的网络

当不再需要某用户定义的网络时，可使用 `docker network rm <network_name>` 来从系统中移除它。此外，还有一种更简便的方法——使用 `docker network prune` 自动清理所有未被任何容器使用的闲置网络。需要注意的是，这些删除操作都是不可逆的，因此在执行前请务必确认您的选择。

### 在无网络环境下运行容器

有时出于安全考虑，您可能希望在一个完全隔离的环境中测试可疑容器。此时，可以通过在启动容器时加上 `--network=none` 参数来达到目的。这样做意味着容器将不会拥有任何形式的网络接口或连接。

对于已经在运行中的容器，如果怀疑其内部存在恶意活动且不能轻易停机的话，则可以直接断开其现有网络连接，从而限制其对外部环境的影响范围，同时保留当前运行状态以供进一步分析。

### 暴露容器服务

了解了以上关于 Docker 网络管理的基础知识之后，下一步就是学习如何在启动容器时暴露必要的端口以便接收外部请求。这里有两种常见的方法：一是直接使用主机网络模式（`host`），二是通过映射桥接网络上的端口。前者虽然简化了配置过程，但由于缺乏明确的端口映射机制，可能会导致随着部署规模扩大而难以追踪各个服务的实际监听情况。因此，除非确实有特殊需求或者只打算部署少量容器，否则建议优先考虑第二种方式。