要创建用户定义的网络，我们使用 Docker CLI 中的`network management`选项以及`create`选项。语法很简单；您只需要为新网络提供所需的网络名称，Docker 就会创建新网络。要创建一个名为 frontend 的新网络，我们只需执行以下命令:
![Figure 3.5 – Output from creating a Docker network ](img/Fig_3.4_B15514.jpg)
图 3.5–创建 Docker 网络的输出
这将返回网络标识。如果您再次列出网络，您将看到一个新的网桥网络可用:
![Figure 3.6 – Docker network list ](img/Fig_3.5_B15514.jpg)
图 3.6–Docker 网络列表
由于我们没有指定网络名称以外的任何选项，Docker 将为网络分配一个不重叠的 IP 范围。
如果您想使用网关`192.168.10.1`创建第二个使用`192.168.10.0/24`子网的名为后端的网络，您只需将`--subnet`和`--gateway`添加到`docker network create`命令中:
![Figure 3.7 – Adding options example ](img/Fig_3.6_B15514.jpg)
图 3.7–添加选项示例
当您创建一个新网络时，就像我们在后端网络示例中所做的那样，Docker 在主机上绑定了一个新的 IP，该 IP 等于我们在`create`命令中使用的网关地址。以下是在我们的主机上使用`ip addr`的输出:
![Figure 3.8 – Host IP added after network creation ](img/Fig_3.7_B15514.jpg)
图 3.8–网络创建后添加的主机 IP
这将允许您的主机将网络流量路由到连接到交换机的任何容器。容器可以通过使用主机的 IP 作为默认网关来访问主机外部的网络资源。
现在您已经创建了一个用户定义的网络，让我们看看在运行映像时如何将新网络分配给一个容器。
## 将容器连接到用户定义的网络
通过在`docker run`命令中添加`--network`选项，您可以在启动容器时将容器连接到特定网络。要将新的 NGINX 容器附加到我们之前创建的前端网络，我们只需要在启动容器时添加`--network=frontend`:
![Figure 3.9 – Connecting a network at startup ](img/Fig_3.8_B15514.jpg)
图 3.9–启动时连接网络
前面的命令将在名为`frontend`的用户定义网络上启动一个名为 frontend 的新 NGINX 容器。
## 在运行的容器上更改网络
我们提到与默认网络相比，使用用户定义的网络的一个优势是能够在不停止容器的情况下动态更改容器的网络。
要更改正在运行的容器的网络，您可以使用称为`connect`和`disconnect`的 Docker 网络选项，以及网络名称和容器名称。当您使用`connect`选项时，您可以向容器中添加网络，而如果您使用`disconnect`选项，您可以从容器中移除网络，而无需停止容器。
在我们的 NGINX 示例中，我们分配了前端网络，但是如果我们想将其更改为后端网络，我们只需要添加一个网络并删除另一个网络。第一步是使用`docker network connect`命令连接后端网络:
![Figure 3.10 – Connecting a network ](img/Fig_3.9_B15514.jpg)
图 3.10–连接网络
这将把名为后端的网络连接到名为前端的容器。
第二步是使用`disconnect`选项移除前端网络:
![Figure 3.11 – Disconnecting a network ](img/Fig_3.10_B15514.jpg)
图 3.11–断开网络
您可能想知道是否可以将一个容器连接到多个网络，答案是肯定的。如果您要求容器访问需要巨型帧的网络，但它也需要访问标准网络连接，您可以将容器连接到两个不同的用户定义的网络。详细描述这个场景超出了本书的范围，可能会成为一个复杂的主题，因为它可能需要在容器中创建自定义路由，但是知道这是可以做到的并且有特定的用例是很好的。
## 移除网络
如果您不再需要用户定义的网络，您可以使用`docker network rm `命令从您的主机中删除该网络。要删除我们之前创建的前端网络，我们将执行网络名称为`frontend`的`docker network rm`命令:
![Figure 3.12 – Removing a network ](img/Fig_3.11_B15514.jpg)
图 3.12–移除网络
如果您有多个要删除的网络，则可以使用`prune`命令，该命令将删除主机上所有未使用的网络。这类似于修剪未使用的卷。您只需运行`docker network prune`即可删除未使用的网络:
![Figure 3.13 – Pruning a network ](img/Fig_3.12_B15514.jpg)
图 3.13–修剪网络
一旦您确认要继续，Docker 将列出已删除的网络。在我们的例子中，它删除了一个名为`network4`的网络。
就像我们之前讨论的`volume prune`命令一样，**这是一个单向的过程**。当您对选择“是”来修剪网络时，没有撤销，因此在验证操作之前，请始终确保 **100%** 您想要删除网络。
## 运行没有联网的容器
请记住，如果您启动一个没有网络选项的容器，它将开始连接到默认桥接网络。您可能需要测试一个可能包含可疑内容的容器，将其连接到`network`可能会危及整个网络。
这和物质世界没什么不同。例如，如果您有一台机器似乎在以恶意方式运行，您将关闭网络端口或断开网络电缆。在容器领域，我们可能在主机上运行多个容器，并且我们可能无法在不影响许多工作负载的情况下简单地拉动电缆。我们有两个选项可用，这取决于容器是否已经在运行，如果是，您不想失去运行状态。
如果容器停止，您可以在启动容器时使用`--network=none`选项，在没有连接网络的情况下简单地启动容器。除了我们将网络名称指定为`none`之外，这与使用用户定义的网络启动容器的过程相同。
如果您怀疑容器中有恶意运行的东西，您可能无法停止它。如果您需要查看正在运行的进程、内存内容等，停止映像会破坏正在运行的任何东西，并且您可能会丢失有价值的信息。您可以直接断开正在运行的容器与网络的连接，而不是使用网络值 none 来停止和重新启动容器。这将限制容器影响本地映像之外的任何东西的能力。
## 公开容器服务
现在您已经知道了 Docker 中可用的网络选项，下一步是在启动容器时公开您希望接受流量的任何端口。公开端口有两种选择。第一种是使用`host network`选项，第二种是在容器启动时暴露桥网络上的端口。使用`host network`选项更容易，因为您不需要任何手动端口映射，但是随着运行容器数量的增加，跟踪端口变得很困难。我们仅建议您在计划运行单个容器时使用`host network`选项。
## 使用主机网络暴露端口
正如我们在本章前面提供的表格中所述，*“使用主机网络驱动程序的容器将不会获得 IP 地址，并且不需要公开端口来允许传入流量。”*由于容器将直接在主机网络上启动，完全绕过 Docker 的网络栈，您不需要为容器公开任何端口。
例如，要使用主机网络启动主机上运行 NGINX 的 web 服务器，您可以运行`docker run`命令，同时提供`host`作为网络类型:
![Figure 3.14 – Using the host network option ](img/Fig_3.13_B15514.jpg)
图 3.14–使用主机网络选项
我们想要验证容器是否正在运行，并查看任何可能暴露的端口，因此我们将运行`docker ps`来列出正在运行的容器。容器显示为正在运行，但是在`PORTS`下，我们没有看到任何列表:
![Figure 3.15 – Example port view from a host connection ](img/Fig_3.14_B15514.jpg)
图 3.15–主机连接的端口视图示例
由于容器是使用`host network`选项启动的，我们不需要暴露任何端口。我们一直在使用的 NGINX 容器运行在端口`8080`上，由于它绕过了 Docker 网络，证明它正在使用端口`8080`的唯一方法是在主机系统上运行`netstat`:
![Figure 3.16 – Host netstat showing port 8080 in use ](img/Fig_3.15_B15514.jpg)
图 3.16–主机 netstat 显示端口 8080 正在使用
看起来容器正在端口 8080 上运行并监听。从网络上的另一台机器，我们可以打开浏览器，输入 Docker 主机的 IP 地址，并使用端口 8080:
![Figure 3.17 – NGINX running on a host network ](img/Fig_3.16_B15514.jpg)
图 3.17–在主机网络上运行的 NGINX
在这里，我们收到了来自 NGINX 的欢迎页面，证明容器正在运行。
由于`docker ps`命令没有列出正在使用的端口，因此当使用`host network`选项时，如果您的主机运行多个容器，您可以看到您可能开始失去对分配端口的跟踪。这就是为什么我们建议限制使用`host network`选项，除非您运行的是单个容器或需要主机联网的容器。
重要说明
正如我们所说的，套接字在主机上必须是唯一的。在我们的示例中，我们一直使用单个网卡和单个 IP 地址，这意味着一个端口只能在主机上使用一个。由于套接字是 IP 地址和端口的组合，您可以向单个网卡添加第二个 IP 地址，或者添加一个具有新 IP 地址的附加网卡，以创建一个新的、唯一的套接字。这将允许您创建一个已分配端口到另一个进程的新绑定，因为套接字是唯一的。
现在，让我们停止 NGINX 容器，再次查看`netstat`以显示端口不再使用了。我们将使用以下命令:
```
sudo docker stop nginx
sudo docker rm nginx