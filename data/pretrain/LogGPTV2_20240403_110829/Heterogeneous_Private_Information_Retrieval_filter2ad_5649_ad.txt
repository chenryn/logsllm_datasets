2)
...
fr(x(cid:48)
q)
(cid:104) (cid:126)F (x(cid:48)
(cid:105)
=(cid:2)f1(x(cid:48)
q+1)
f2(x(cid:48)
q+1)
. . .
q+1)(cid:3)
fr(x(cid:48)
Qr =
q+1)
(11)
where fi() is the polynomial function corresponding to the
record i. The client sends the query matrices Qr and Qc to
the servers.
C. The Servers Respond
After receiving the query matrices, each server will cal-
culate the multiplication of Rc/r = Qc/r × D mod(n), and it
will return the results to the client. Note that the servers do not
know the values of rij, X(cid:48), X, and the prime numbers (pjs).
D. Reconstructing the Records by the Client
Using the responses received from the servers, R = Rc||Rr,
the client will construct s polynomials φk(x). Each φk is a q-
degree polynomial that produces the kth elements of the q
queried records.
Each column k of R contains q + 1 points for a polynomial
j, Rj,k) for 1 ≤ j ≤ (q + 1). Each
φk(x), i.e., the points (x(cid:48)
Rj,k (for 1 ≤ j ≤ q + 1 and 1 ≤ k ≤ s) is given by:
j) × Di,k mod(n)
(cid:48)
fi(x
i=1
r(cid:88)
r(cid:88)
q+1(cid:88)
i=1
Rj,k =
=
=
(Di,k × q+1(cid:88)
× r(cid:88)
(cid:48)v−1
j
(x
v=1
(ai,v × x
(cid:48)v−1
j
)) mod(n)
(12)
(ai,v × Di,k)) mod(n)
v=1
= φk(x
i=1
(cid:48)
j) mod(n)
where φk() is a polynomial of degree q, and ai,v is the vth
coefﬁcient of the polynomial fi(x). φk has a degree of q, and
therefore the client can derive it using Lagrange interpolation
by using the q + 1 points (x(cid:48)
j, Rj,k) for 1 ≤ j ≤ (q + 1).
Finally, the client retrieves the responses to her q queries
using the derived φ·(·) polynomials by feeding the x-
coordinates X = {x1, . . . , xq} into φk(xj). Speciﬁcally, the
client derives the kth element of the jth queried record, Dβj ,k,
as:
Dβj ,k = φk(xj) mod(pj) for 1 ≤ k ≤ s, 1 ≤ j ≤ q
(13)
E. Communication Overhead
Since the client uses q prime numbers (one for each query),
the upload and download overheads are linear with the number
of queries. To retrieve q records, the client should send q2 ×
r × w bits to the rich server, and q × r × w bits to the poor
server. The rich server will send back q2 × s× w bits, and the
poor server will send back q × s × w bits.
F. Security
This PIR protocol is built on our PIR-tailored secret sharing
scheme of Section IV, so its security is based on the underlying
PIR-tailored secret sharing scheme. Our HPIR protocol uses r
PIR-tailored secret sharing functions (one for each database
record), and retrieves q secrets at each round. To provide
8
information-theoretic security, the set of q secrets should have
a degree of freedom more than q × r. In a two-servers setting,
the rich server will know q × r points of these PIR-tailored
secret sharing schemes, so the number of independent variables
in the system should be more than 2 × q × r. There would be
(2q + 1) × r + 2q + 2 random variables inside the system:
(q + 1) × r variables of rij, q × r secret values of δij, q + 1
random variables of X, and q +1 random variables of X(cid:48). If the
poor server does not collude with the rich server, the degree
of freedom of secrets will be more than the q × r threshold.
Therefore, our HPIR is information-theoretic secure if at least
one of the PIR servers does not collude with the others.
VII. OUR HPIR ALGORITHM (COMPLETE VERSION)
Why extending the design As mentioned above, the basic
version of our HPIR protocol has high communication costs
due to using q prime numbers (one for each query). Our
extended protocol uses only two prime numbers P = {p1, p2}
for query construction, therefore reduces communication costs
signiﬁcantly. To preserve its information-theoretic security,
we add multiple parameters to its polynomials. To do so,
we make the x-coordinates of the PIR-tailored secret sharing
polynomials unique for each row of the database, and unknown
to the servers.
Improving efﬁciency by introducing unique x-coordinates
for each PIR-tailored secret sharing function Recall from
and database elements, i.e., φk(x) mod(n) = (cid:80)r
Section VI-D that the constructed PIR-tailored secret sharing
polynomials, φk(·)s, are functions of client polynomials fi(x)
i=1 fi(x) ×
Di,k mod(n) for 1 ≤ k ≤ s. To be able to extract the kth
element of the desired rows (β) using servers’ responses, the
querying client should remove the effect of the undesired
records (Di,k(x), for i /∈ β) in φk(x). To do so, the client
should construct the polynomials in a way that for any inputs
sample x ∈ X, the functions fi(x) output zero for i /∈ β,
and output a non-zero value for i ∈ β. Recall that each client
polynomial fi(x) can be represented as:
q+1(cid:88)
m=1
fi(x) =
(cid:89)
(cid:96)m(x) =
1≤v≤q+1,v(cid:54)=m
ym × (cid:96)m(x) mod(n)
(x − xv)
(xm − xv)
mod(n)
(14)
where (xm, ym)’s are the points used to generate the
polynomials. As can be seen from the above equation, there are
two approaches for making each polynomial (fi(x)) zero for
i /∈ β. The ﬁrst approach is making ym zero in (14) for input
x = xm, so (xm, 0) is one of the points used for interpolation
of all the polynomials (fi(x)) for i /∈ β. This requires a ﬁx
set of x-coordinates X = {x1, . . . , xq+1} be used across all
of the r PIR-tailored secret sharing polynomials. This is what
has been done by prior PIR protocols [30], [37], [26], [20].
The second approach to make fi(x) zero for i /∈ β is to
make (cid:96)m(x) in (14) zero by choosing x and xv in a way
that x − xv becomes zero. In mod(pj), if pj|(x − xv) or
pj|ym (where | means division), then fi(x) mod(pj) will
produce zero. In this approach, the x-coordinates used for
generating functions, xms, can be different from the input x-
coordinate, x. This approach enables us to choose different
random x-coordinates for each polynomial. In our complete
HPIR protocol, we combine these two approaches, i.e., we use
different x-coordinates and y-coordinates for the PIR-tailored
secret sharing polynomials. Combining these two approaches
enables us to use just two prime numbers in constructing
the PIR-tailored secret sharing polynomials, which reduces
the communication overhead as explained below. This is
while the basic version of our protocol (Section VI) needs
q prime numbers. Speciﬁcally, in our basic protocol, all of
the calculations are in mod(n), and n is the multiplication of
q prime numbers, so size of sending and receiving elements
linearly depends on the number of queries. Using just two
prime numbers in our PIR-tailored secret sharing constructions
will keep the size of each element in query and response
vectors to be ﬁxed and independent of the number of queries.
This will improve the efﬁciency of our complete HPIR in
upload and download bandwidth consumption by sending and
receiving smaller elements.
Preserving the degree of freedom of secrets using two
prime numbers
In the basic version of the protocol, the
x-coordinates are ﬁxed for all of the secret sharing polyno-
mials; however, for the complete version we use different x-
coordinates for constructing each polynomial. We add q new
random variables r(cid:48)
ij in x-coordinates of each polynomial,
which doubles the degree of freedom of the secrets compared
to the basic version (Section VI). If an adversarial server
removes the effect of half of the prime numbers, the secrets
will still have a high enough degree of freedom. To do so,
the client will create half of the PIR-tailored secret sharing
points using p1 (i.e., (p1 × random + secret)), and the other
half using p2. Algorithm VII.1 summarizes our complete HPIR
protocol.
Correctness:
In extracting the requested records (step C2 in
Algorithm VII.1), when j is an even number (j%2 == 0),
the client will use p1, otherwise (j is an odd number) she
will use p2, where j is the index of the query. Below we
demonstrate the correctness of our HPIR protocol (when j is
even) by showing that the client can always reconstruct her
queried records using our HPIR protocol.
φk(αj) × fβj (αj)
−1 mod(p1) = (
fi(αj) × Di,k)
r(cid:88)
yi,m × q+1(cid:89)
q+1(cid:88)
i=1
r(cid:88)
(
−1 mod(p1) = (
× fβj (αj)
× Di,k) × fβj (αj)
× fβj (αj)
−1 mod(p1) = Dβj ,k
i=1
v=1,v(cid:54)=m
−1 mod(p1) = fβj (αj) × Dβj ,k
m=1
αj − xi,v
xi,m − xi,v
)
(15)
where Dβj ,k is the kth element of the jth query. As can be
seen, the effect of undesired records (i /∈ β) will be cancelled
−1 mod(p1) since fi(αj)
in the calculation of φk(αj)×fβj (αj)
will produce zero for them in mod(p1).
A. Communication Costs
To retrieve q records, the client should send 2 × q × r × w
bits to the rich server, and 2 × r × w to the poor server. The
rich server will send back 2 × q × s × w bits, and the poor
server will send back 2 × s × w bits.
9
(r(cid:48)
(ri,j × p1) + δi,j mod(n)
(ri,j × p2) + δi,j mod(n)
ri,j mod(n)
Client (querying for block numbers β = {β1, . . . , βq}) :
P1. Choose two prime numbers P = {p1, p2} with more than w bits (pi > 2w).
P2. Calculate n = p1 × p2, and release it to the servers.
P3. Choose q random distinct {α1, . . . , αq} from Z∗
n.
P4. Construct r polynomials of degree q. For generating the ith function, the client will take the following steps:
P4(a). Construct (q + 1) x-coordinates X = {xi,1, . . . , xi,q+1} as follows for 1 ≤ i ≤ r (r(cid:48)
from Z∗
i,j and r(cid:48) are random numbers
n such that gcd(xi,j − xi,k, n) = 1 for a speciﬁc i and different j and ks:
i,j × p1) + αj mod(n)
(r(cid:48)
i,j × p2) + αj mod(n)
r(cid:48) mod(n)
for 1 ≤ j ≤ q, j%2 == 0 (even)
for 1 ≤ j ≤ q, j%2 == 1 (odd)
for j = q + 1
xi,j =
yi,j =
P4(b). Construct (q + 1) y-coordinates Y = {yi,1, . . . , yi,q+1} as follows for 1 ≤ i ≤ r (ri,j is a random number from Z∗
n):
for 1 ≤ j ≤ q, j%2 == 0 (even)
for 1 ≤ j ≤ q, j%2 == 1 (odd)
for j = q + 1
P4(c). Use Lagrange polynomial interpolation to ﬁnd fi(x) of degree q that satisﬁes (xi,j, yi,j) for 1 ≤ i ≤ r, 1 ≤ j ≤ q + 1.
P5. Choose q random distinct x-coordinates X(cid:48) = {x(cid:48)
P6. Send matrix Qc to the rich server (Qc[j][i] = fi(x(cid:48)
P7. Send the the query matrix Qr (Qr[0][i] = fi(r(cid:48)) = ri,j) for 1 ≤ i ≤ r, j = q + 1) to the poor server.
Each Server:
S1. Multiply the Qc and Qr matrices to the database matrix, and return the results (Rc = Qc ∗ D and Rr = Qr ∗ D) to
the client.
Client:
C1. Construct polynomials φk(x) (for 1 ≤ k ≤ s) that satisfy (x(cid:48)
Lagrange polynomial interpolation.
C2. extract the items of queried records (for 1 ≤ j ≤ q, 1 ≤ k ≤ s):
Dβj ,k =
j, Rc[j][k]) for 1 ≤ j ≤ q and (r(cid:48), Rr[0][k]) using
1, . . . , x(cid:48)
q}.
j) for 1 ≤ i ≤ r, 1 ≤ j ≤ q).
(cid:40)
−1 mod(p1)
−1 mod(p2)
j%2 == 0 (even)
j%2 == 1 (odd)
φk(αj) × fβj (αj)
φk(αi) × fβj (αj)
Algorithm VII.1: Our HPIR Protocol (Complete Version)
Pseudo-random number generator for coordinates We can
further improve the communication overhead of the poor server
by having the client use a pseudo-random number generator
to generate the query vectors of the poor server. For our
protocol, instead of random ri,q+1 for 1 ≤ i ≤ r, client
will generate r numbers {g1, g2, . . . , gr} in mod(n) using a
random seed. Now, the client in our basic HPIR will construct
the polynomials as follows:
yi,j =
(ri,j × pj) + δi,j mod(n)
gi mod(n)
for 1 ≤ j ≤ q
for j = q + 1
(16)
(cid:40)
and in the complete version, client will construct the polyno-
mials as follows:
(ri,j × p1) + δi,j mod(n)
(ri,j × p2) + δi,j mod(n)
gi mod(n)
yi,j =
for 1 ≤ j ≤ q, j%2 == 0
for 1 ≤ j ≤ q, j%2 == 1
for j = q + 1
(17)
Therefore, instead of sending r elements to the poor server,
she will just send the seed of the pseudo-random number
generator, and the poor server can reproduce these r numbers
the query vector. Note that
{g1, g2, . . . , gr} and construct
using a PRNG will downgrade our security guarantee from
information-theoretic to computational security; this is because
in the presence of PRNG, the rich server is able to perform a
(computationally intensive) exhaustive search to ﬁnd the seed
of the PRNG.
B. Security
Information-theoretic security If all the PIR servers do not
collude, they can not learn anything about client’s queries.
There are (3q + 1) × r + 2q + 1 variables in the system that
are only known to the querying client: (q + 1) × r variables