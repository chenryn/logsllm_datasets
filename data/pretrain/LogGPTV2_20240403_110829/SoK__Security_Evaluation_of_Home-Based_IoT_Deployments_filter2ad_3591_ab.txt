services, assisting developers in generating correct triggers
for their applications, and providing short-lived tokens with
constrained access to a device’s functions.
Somewhat related, Wilson et al. [46] looked at empowering
IoT users that trust the vendors with their private data. The
technique is known as TLS-Rotate and Release (TLS-RaR),
which requires an auditor entity collecting TLS packets to
request the session key from the vendor to decrypt the com-
munication. The vendor then rotates the TLS session key and
discloses to the auditor the prior key to decrypt the collected
TLS packets. The audit system must be deployed on the end-
user demarcation side and collects trafﬁc for devices that they
wish to audit.
3) Stakeholders: The vendor controls the cloud endpoints
(see Figure 1) and the users do not have a way to in-
spect or control what their device sends to the cloud end-
points [66], [75]. Additionally, third-party cloud providers of-
fer infrastructure-as-a-service (IaaS) and platform-as-a-service
(PaaS) to IoT deployment. Many of the IoT devices rely on
cloud-based infrastructure to run their services. Unplanned
outages[76], infrastructure compromises[77], and intentional
attacks[78] impact the deployment of the cloud endpoints.
When it comes to cloud infrastructure conﬁguration and API
implementation ([23], [25], [45]), the vendor is responsible for
the mitigation of the vulnerabilities.
Newer IoT devices are taking advantage of managed IoT
platforms, which ofﬂoad much of the security responsibilities
to the public cloud providers. On the other hand, the majority
of the proposed frameworks ([44], [46], [48]) are user-centric
and give end-users visibility and control in a limited way. The
work by Fernandes et al. [48] and Wilson et al. [46] is a
hybrid approach and can be deployed jointly by vendors and
users or by a trusted third-party. As for cloud providers, the
vendor can mitigate their exposure by diversifying and over
subscribing to different cloud providers.
4) Take Away: IoT cloud endpoints exhibit insecure cloud
deployment through conﬁguration and API implementation,
but these vulnerabilities can be addressed with readily avail-
able tools for cloud security. Additional measurements are
needed to further understand the extent of these miscon-
ﬁgurations in cloud deployments. The Censys Project [79]
is a valuable source of data that can allow researchers to
historically analyze IoT infrastructure. Further, the IoT cloud
integration platforms introduce new challenges that mimic
classical work like Decentralized Trust Management [80].
Integration cloud platforms offer users a way to chain multiple
IoT devices to execute tasks based on an event, and they suffer
from over-privilege recipes and privacy implications, which is
demonstrated in the work of Surbatovic et al. [47].
Fernandes et al. [48] utilized prior techniques for the IoT
cloud platforms by applying trust management systems and
token authentication protocols to the IoT platforms. Vendors
are adapting managed IoT cloud platforms, which shifts the
security responsibility to cloud providers like Amazon IoT
Core [81], Azure IoT Hub [82], and Google Cloud IoT [83].
IoT cloud endpoints are relying more on third-party infrastruc-
ture to deploy and run their services, which means vendors
should consider a contingency plan for unplanned outages
and infrastructure compromises. Additional studies are needed
to understand the managed IoT cloud platforms and what
possible weaknesses exist.
Cloud Endpoint: The cloud endpoints suffer from mis-
conﬁguration and vulnerable services that can be prop-
erly secured using industry standards. Third-party cloud
providers play an important role by offering securely
managed IoT platforms, which vendors are adapting.
Toolchains for developing, analyzing, and deploying third-
party applications via integration platforms require addi-
tional attention.
D. Communication
Communication edges (see Figure 3) in IoT deployment fall
into two classes of protocols, Internet protocol (IP) and low-
energy (LE) protocol. Both communications can exist on the
user demarcation (see Figure 1) of the network, but only IP
communication can go over the Internet. Researchers from
industry and academia both are heavily invested in the security
of network communication because of its applicability in other
areas.
Most home-based IoT systems implement four types of
communication protocols: IP, Zigbee, Z-Wave, and Bluetooth-
LE (BLE). IoT devices choose to use the IP suite for com-
munication due to its reliability and proven capability of
transferring incredible volumes of global network trafﬁc. The
IP protocol is stateless and offers no security, but it can be
supplemented by the use of TCP and TLS/SSL protocols to
provide the security features needed. Based on the literature,
we identiﬁed ﬁve popular application layer protocols that
home-based IoT devices use, namely: DNS, HTTP, UPnP,
NTP, and custom implementations.
1) Attack Vectors: The DNS protocol
is a lightweight
protocol that Internet services rely on, but inadvertently leaks
private information based on the recursive and client conﬁgu-
rations. Kintis et al. [64] found that open recursive DNS that
enable EDNS Client Subnet feature (ECS) [84] (which embeds
a truncated portion of the client’s IP address) have privacy
implications. Selvi [55] demonstrated how a MITM attack
on NTP was used to bypass HTTP strict transport security
(HSTS). The HTTP protocol gives a more reliable mode of
transportation, but like DNS and NTP, it does not provide any
conﬁdentiality or integrity. Bellissimo et al. [85] and Samuel
et al. [67] demonstrated how an insecure protocol like HTTP
allows attackers to MITM and backdoor the system software
update process.
IoT devices widely rely on UPnP protocol to offer easy
conﬁguration and control. UPnP uses the HTTP protocol,
hence inherits the same ﬂaws [86]. Garcia [50] showed how at-
tackers abuse UPnP because it lacks authentication, validation,
and logging. GNUcitizen [87] demonstrated how an UPnP
(cid:18)(cid:20)(cid:23)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:49 UTC from IEEE Xplore.  Restrictions apply. 
enabled device is vulnerable to cross-site scripting (XSS)
vulnerabilities, while HD Moore [88] presented statistics and
measurements around UPnP enabled devices on the Internet.
Their work demonstrates that unauthenticated and unencrypted
use of application layer protocols enables attackers to mass
exploit devices, which leads to additional attacks. TLS/SSL
sessions provide conﬁdentiality and integrity, which help ad-
dress the inherent ﬂaws in these communication protocols.
Researchers have thoroughly examined the TLS/SSL proto-
cols and uncovered severe vulnerabilities. Starting off in 2011,
BEAST [49] exposed the initialization vector (IV) ﬂaw in TLS
1.0, which allowed attackers to predict the IV of the next
message in the stream. In 2012, CRIME [58] showed how TLS
sessions that allow compression, like Google’s SPDY protocol,
were susceptible to session hijacking. In 2013, AlFardan et
al. [51] used malformed packets to infer time delays, a side-
channel attack, in the MAC veriﬁcation to statistically infer
the plaintext from the ciphertext. AlFardan et al. [54] also
showed how the RC4 stream cipher weakens the security of
TLS sessions. POODLE [56] exposed a downgrade ﬂaw in
SSL 3.0 that allowed for insecure communication between two
parties. Beurdouche et al. [59] found ﬂaws in several client
and server implementations of TLS/SSL libraries that allow
MITM attacks, including the FREAK [57] vulnerability.
Additional attacks disclosed by Adrian et al. [60] and
DROWN [62] illustrated the difﬁculty of implementing se-
cure communication protocols. Many IoT communications are
susceptible to MITM attacks because they support older ver-
sions of TLS/SSL protocols. TLS/SSL is also widely used in
managed IoT platforms to secure the communication channels.
Emerging managed IoT platforms, like AWS IoT Core [81],
Azure IoT Hub [82], and Google Cloud IoT [83], implement
custom protocols that utilize certiﬁcates and TLS/SSL. These
protocols and platforms are sparsely documented but rely
on time-tested technologies to implement secure end-to-end
communication.
The BLE [89], Zigbee [90], and Z-Wave [91] protocols have
many security problems. Ryan [52] showed a severe ﬂaw in the
key-exchange protocol for Bluetooth, which allows an attacker
to passively recover the session key. Jasek [63] demonstrated
how attackers can passively and actively abuse the generic
attribute proﬁle in the GATT layer found in Bluetooth network
stack. Zillner et al. [61] showed how the Default Trust Center
Link Key deﬁned by the Zigbee Alliance [90] is the same
across all devices. Fouladi et al. [53] showed how a hard-coded
constant in the Z-Wave ﬁrmware is used to derive session keys,
which eventually became publicly known. Legacy versions of
LE protocols have critical security ﬂaws, which many home-
based IoT devices implement in hardware; hence limits their
mitigation options.
Aside from the inherent ﬂaws, LE protocols offer a prox-
imity feature that authentication systems rely on to identify
geographical presence. Ho et al. [92] showed how relay attacks
were possible against LE protocols by serializing the LE
packets and relaying them over IP. Researchers have shown
that MITM relay attacks against LE protocols are practical
and break the geographical proximity, which authentication
systems rely on. These communication channels can have
privacy concerns as demonstrated by Apthorpe et al. [65] and
Wood et al. [66].
2) Mitigations: For HTTP, UPnP, DNS, and NTP protocols,
the suggested mitigations include disabling the ECS feature in
DNS, using updated versions of the NTP protocol (NTPv4),
and using TLS/SSL with insecure protocols (HTTPS). For
TLS/SSL implementation ﬂaws, upgrading the server-side and
client-side libraries to the latest version should address the
vulnerabilities. Further, disabling weak or vulnerable TLS/SSL
versions reduces exposure but loses backward compatibility.
For LE-based communication, the ﬁrst generation of Zigbee
and Z-Wave protocols have critical ﬂaws and have limited
mitigation options. Vendors can disable insecure portions of
these protocols [93] at the expense of compatibility.
A recent direction by researchers is the work found in
Apthorpe et al. [65] and Wood et al. [66]. Wood et al. [66]
proposed a system that monitors the home network and
inform users of sensitive data sent by IoT devices. Apthorpe
et al. [65] demonstrated how trafﬁc shaping on the home
network can prevent side-channel snooping. This direction of
research requires additional attention to empower consumers
in protecting their networks and privacy.
Devices electing to use Z-Wave must now opt for Z-Wave
Plus, which has improved security [94] and over-the-air (OTA)
update capabilities. Also, Zigbee added a new security model
to allow for secure-key distribution known as Trust Center
(TC) [95]. TC is a trusted entity within the Zigbee network
that is authorized to distribute keys to Zigbee client devices.
TC gives each Zigbee connected device a unique encryption
key, unlike the legacy key distribution schema. To mitigate
relay attacks in LE protocols, Ho et al. [92] introduced a
touch-based-intent communication approach using body-area
network (BAN) for signal propagation.
3) Stakeholders: End-users cannot address the communi-
cation ﬂaws since the implementation is on the device, the
cloud endpoint, or in the mobile application. Further, vendors
have limited options in addressing the communication vulner-
abilities since some ﬂaws require a hardware upgrade, but in
some cases they can disable them [93]. The vendors can patch
vulnerable libraries on the device, the mobile application, and
the cloud endpoints.
Internet service providers (ISPs) have visibility into the
utilization of IP based protocols, but they are not directly
responsible for any mitigation. For ISPs to be involved, they
must provide network and legal policies that deﬁne their role.
As for the LE protocols, vendors can mitigate legacy devices
by disabling vulnerable pairing. Users can use alternate meth-
ods for pairing LE devices with IoT hubs if such options exists.
Users can buy newer devices that offer next generation secure
LE protocols, like Z-Wave Plus and Zigbee.
4) Take Away: Communication channels provide essential
functions for home-based IoT. Home-based IoT devices have
adapted industry standards for IP and LE protocols, but they
suffer from legacy libraries that in some cases cannot be ﬁxed.
(cid:18)(cid:20)(cid:23)(cid:26)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:49 UTC from IEEE Xplore.  Restrictions apply. 
Vendors bear the responsibilities for addressing the vulner-
abilities in the communication channels. Further, cloud end-
points and mobile applications can be updated by the vendor
directly, but vendors must be proactive and informed about
vulnerabilities affecting their software. IoT devices continue
to rely on insecure protocols like UPnP and, as we will
show next, rarely encrypt their communication on the LAN.
End-users do not know if their device or mobile application
is vulnerable to weak encryption or MITM attacks unless
they analyze and test the communication trafﬁc. An informed
power-user might segment their local network into trusted and
untrusted zones to limit the exposure.
TLS/SSL addresses insecure protocols that are susceptible
to MITM attacks, but they also exhibit ﬂaws in their im-
plementation and deployment. The work of Clark et al. [96]
provided additional analysis regarding SSL and HTTPS. ISPs
can provide reports outlining best network practices and
statistics about device and protocol utilization. Managed cloud
IoT platforms use custom communication protocols that rely
on public-key infrastructure (PKI) and TLS/SSL protocols.
Further studies are required to investigate protocols used by
managed cloud IoT platforms. These new platforms are not
well studied and warn for further investigation to identify any
weaknesses.
Communication: IoT devices rely on insecure protocols
that do not offer conﬁdentiality or integrity but mitigate
them by using TLS/SSL protocols. Many devices lack
encryption on the LAN, which leave them susceptible
to MITM attacks. The TLS/SSL protocols exhibit ﬂaws
in implementation and deployment and require vendors
to be vigilant. Managed cloud IoT platforms use custom
protocols, which require further auditing. ISPs have a
wealth of information that can guide vendors to secure
deployments.
IV. EVALUATION
We evaluated 45 devices spanning categories that include
appliances, cameras, home assistants, home automation, me-
dia, and network devices. A full overview of the devices is
in Appendix A Table III. We used a mix of commercial and
open-source tools to conduct the evaluation; all of the com-
mercial tools have open-source counterparts. Our methodology
and evaluation require minimal technical expertise to replicate
and is deliberately devised to appeal to a wide range of tech-
nical audiences allowing them to contribute to this effort. Our
evaluation results are summarized in Table II and additional
details of the evaluation is found in Appendix A Table IV.
Speciﬁc device evaluation cases are found in Appendix B.
A. Experiment Setup
Our network setup has three main components, the IoT
subnet, custom Linux gateway, and an assessment machine.
The assessment machine runs all our evaluation tools and
sits on the same subnet as the IoT devices. Our gateway is
a Debian Jessie Linux machine, which manages the network
services (DHCP, DNS, etc.) and connects the IoT subnet to
the Internet. Additionally, our gateway full-packet captures
all IP trafﬁc originating from the IoT subnet. We used a 24-
port switch to connect wired IoT devices via Ethernet and a
wireless access point for devices that require 802.11 WLAN.
All the IoT devices are assigned a static IP based on their
MAC address.
B. Data
We examine different types of data generated by analyzing
the device, mobile application, cloud endpoint, and network
trafﬁc. The interaction between these components generate
network trafﬁc (node interaction via edges, see Section II-A)
that we capture, extract, and classify into application-level pro-
tocols to build the evaluation tables in Appendix A Table VII.
We generate the scan data based on security audit
tools
that assess running services on the devices and cloud end-
points, which we then provide the evaluation report
in
Appendix A Table V and Table VI. We use mobile application
audit tools to ﬁnd issues related to the security properties
deﬁned earlier in Section II-B. The audit reports provide
summaries of over-privileged applications, embedded sensitive
data, and programming errors. We use this data summary
to generate the evaluation report for each mobile application
in Appendix A Table IV.
C. Challenges
We faced several challenges evaluating the IoT deployments
including, but not limited to, automated device updates, cloud
endpoint classiﬁcation, wireless network analysis, and decryp-
tion of iOS applications. Automatic updates bias our device
evaluation because the device state changes when updates
are applied, which we had to disable on conﬁgurable de-
vices. Cloud endpoint classiﬁcation was involved and required
manual analysis to ensure high accuracy due to increased
utilization of content delivery networks (CDN). The wireless
access point used WPA2 conﬁguration, which limited our
visibility into wireless-to-wireless device communication from
the data collected at the egress (gateway) point of our IoT
environment. We ran two different access points that forced
trafﬁc to traverse the gateway so we can gain visibility. Apple
iOS applications were encrypted in the App Store and required
a jailbroken iOS device to download, decrypt, and copy the
iOS application locally. Once we had a copy of the iOS
application, we used various open source and commercial tools
to audit them.
D. Device
We used Nessus Scanner [97] to scan devices for service dis-
covery, service proﬁling, and vulnerability assessment. Nessus
Scanner annotates the CVE [98] information with the versions
of running services and provides a summary of their security
state. Nessus Scanner uses the CVSS [99] scoring system to
rate the severity of the discovered vulnerability on a scale from
one to ten and categorizes them into low, medium, high, and
critical.
(cid:18)(cid:20)(cid:24)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:49 UTC from IEEE Xplore.  Restrictions apply. 
TABLE II: This table is a summary of each evaluated device per graph component in Figure 3. There are four components,
namely: the device (D), mobile application (A), cloud endpoints (C), and the communication channels (E). The evaluation uses
Nessus scanner to assess the device and cloud endpoints; Kryptowire, MobSF, and Qark to assess the mobile applications;
Nessus Monitor, ntopng, sslsplit, and Wireshark to assess the communication protocols. The device section summarizes the
number of running services and issues found. The mobile application summarizes excessive permissions, sensitive data, or
incorrectly use of cryptographic protocols. The communication category summarizes the susceptibility to MITM attack and
the communication channel state as fully encrypted ((cid:2)), partially encrypted ((cid:3)(cid:4)), or not encrypted ((cid:4)). For additional details
see Appendix A
Device Services
Appendix A
Table VI
Mobile Application
Appendix A
Table IV
Sensitive
Running
Services
Security
Issues
Over-
priviliged
Data
Cloud Endpoints
Appendix A
Table V
Communication
Appendix A
Table VII
Service
Issues MITM Encryption
Device
Amazon Echo
Amazon Fire TV
Apple HomePod
Apple TV (4th Gen)
August Doorbell
Belkin Netcam
Belkin WeMo Crockpot
Belkin WeMo Link
Belkin WeMo Motion
Belkin WeMo Switch
Bose SoundTouch 10
Canary
Caseta Wireless
Chamberlain myQ
Garage Opener
Chinese Webcam
D-Link DCS5009L
Google Home
Google Home Mini
Google OnHub
Harmon Kardon Invoke
Insteon Hub
Koogeek Lightbulb
LIFX Virtual Bulb
Logi Circle
Logitech Harmony
MiCasaVerde VeraLite
Nest Cam IQ
Nest Camera
Nest Guard
Netgear Arlo
nVidia Shield
Philips HUE
Piper NV
Ring Doorbell
Roku 4
Roku TV
Roomba
Samsung SmartThings
Samsung SmartTV
Securiﬁ Almond
Sonos
TP-Link WiFi Bulb
TP-Link WiFi Plug
Wink 2 Hub
Withings Home
Crypto
Issues
SSL
Issues






—



—


—
—
—


—


—




—
—



—

—
—
—
—
—
—
—
—

—

—






—




—
—















—


—

—
—
—


—

—



—
—



—
—
—
—
—
—
—






















(cid:2)
(cid:3)(cid:4)
(cid:2)
(cid:2)
(cid:3)(cid:4)
(cid:3)(cid:4)
(cid:3)(cid:4)
(cid:3)(cid:4)
(cid:3)(cid:4)
(cid:3)(cid:4)
(cid:3)(cid:4)
(cid:2)
(cid:3)(cid:4)
(cid:2)
(cid:4)
(cid:4)
(cid:3)(cid:4)
(cid:3)(cid:4)
(cid:3)(cid:4)
(cid:2)
(cid:4)
(cid:2)
(cid:3)(cid:4)
(cid:2)
(cid:3)(cid:4)
(cid:3)(cid:4)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:3)(cid:4)
(cid:3)(cid:4)
(cid:2)
(cid:2)
(cid:3)(cid:4)
(cid:3)(cid:4)
(cid:3)(cid:4)
(cid:2)
(cid:3)(cid:4)
(cid:3)(cid:4)
(cid:3)(cid:4)
(cid:2)
(cid:2)
(cid:3)(cid:4)
(cid:2)
1
1
4
3
1
1
0
1
1
1
4
0
2
1
4
3
5
5
1
5
4
2
0
0
2
4
0
0
0
0
2
2
3
0
2
2
1
1
4
2
3
1
0
4
1
0
0
0
0
0
1
0
1
1
1
1
0
0
0
1
2
2
2
0
1
6
0
0
0
1
6
0
0
0
0
3
0
0
0
0
0
0
1
1
1
3
0
0
4
0


—
—


—

—









—




—

—












—
—







—
—


—




—

—




(cid:18)(cid:20)(cid:24)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:49 UTC from IEEE Xplore.  Restrictions apply. 
We consider any classiﬁcation of the categories high or
critical by the CVSS scoring system as problematic and note
it in Table II.
We evaluated 45 devices and found a total of 84 running
services and 39 issues related to those running services. We
found devices with running services such as SSH, UPnP,
HTTP web server, DNS, Telnet, RTSP, and custom services.
Many devices conﬁgure TLS/SSL for their services, but their
conﬁgurations had several issues. For example, the certiﬁcates
were self-signed, they supported weak to medium ciphers, they
used short TLS/SSL keys, they permitted the use of vulnerable
versions of SSL (v2, v3, and CBC mode), and had expired
certiﬁcates. Further, some devices ran outdated and vulnerable
services that allowed remote code execution, leaked sensitive
information, and ran unauthenticated services.
For example, the Insteon hub runs a web server with TLS
on port 443 and listens on port 22 for SSH connections. The
certiﬁcate used for the TLS connection is expired and self-
signed, while the TLS service allowed for weak ciphers like
RC4 and insecure protocol like SSLv3. Similarly, the Wink
2, Sonos Speakers, nVidia Shield, Google Home, Samsung
SmartTV, and Samsung SmartThings all had issues with their
certiﬁcates or TLS/SSL conﬁgurations. The Wink 2 and Sonos
both used short SSL keys of size 1024 bits. Other devices like
D-Link DCS5009L, Bose SoundTouch 10, Chinese webcam,
and Securiﬁ Almond lacked encryption for service authentica-
tion, which allows any device on the LAN to snoop.
Devices that run UPnP services have no authentication or
security built in and by default are insecure. Devices like
the MiCasaVerda VeraLite, Wink 2, Sonos, Bose SoundTouch
10, Samsung SmartTV, Logitech Harmony, and Roku all run
UPnP services that allow anyone on the LAN to control the
device. Speciﬁcally, the MiCasaVerda VeraLite uses vulnerable
versions of the UPnP service libraries that have public exploits,
such as libupnp 1.6.18 (CVE-2012-5965), dropbear 2016.72
(CVE-2012-0920), and UPnP RunLua (CVE-2013-4863). A
complete list of CVEs with CVSS scores of high and critical
are found in Appendix B Table VIII.
We found 16 devices with running services that had no
issues, and ten devices that did not expose running services.
For example, the Nest camera uses a push/pull client approach,
which limits the exposure of running services.
Findings. The device evaluation found issues related to
the device setup, software updates, and service conﬁgura-
tions. Additional evaluation results for each device is found
in Appendix A Table VI.
E. Mobile Application
We used MobSF [100], Qark [101], and services from
Kryptowire [102] to statically and dynamically evaluate each
mobile application for the IoT devices. We looked at both the
Android and the iOS applications and presented the vulnerable
of the two 3 in Table II. There are 42 devices that have a
companion mobile application. We analyzed a total of 83
3The portal contains the data for both platforms iOS and Android.
mobile applications of which 41 are Android and 42 are iOS.
We found that 39 devices had one or more issues related to
permissions, sensitive data, or incorrect use of cryptography.
We observed 24 over-privileged mobile applications that ask
for permissions on the mobile device that are not used by the
application code.
As for sensitive data, we found 15 mobile applications
to have hard-coded sensitive data like API keys for Google
Geocoding, Google Maps, fabric.io, HockyApp, Localytics,
Microsoft Virtual Earth, Umeng, and other credentials to cloud
and device services. We found 17 mobile applications that did
not implement cryptographic protocols securely or had hard-
coded static keys and initialization vectors (IVs). The crypto-
graphic implementations relied on older or broken algorithms
like AES-128 and MD5 hash, respectively. Other applications
did not enforce SSL and allowed for communication over
unveriﬁed connections.
Findings. The evaluation identiﬁes issues with inherent trust
between mobile applications and devices that the systematized
work neglects. A summary of our mobile application evalu-
ation is provided in Table II and additional details are found
in Appendix A Table IV.
F. Cloud Endpoints
We used Nessus Scanner to discover, proﬁle, and assess
running services on the cloud endpoints. On the IoT network,
we observed over 4,000 cloud endpoint domains across the 45
devices. We classiﬁed each domain into one of four categories:
ﬁrst-party, third-party, hybrid, and unknown. First-party refers
to cloud-based services that run on the vendor’s infrastructure,
third-party refers to subscription services like content delivery
networks (CDN), hybrid refers to cloud-based infrastructures
(IaaS), like Amazon AWS or Microsoft Azure, that host IoT
cloud services, and Unknown refers to unclassiﬁed infrastruc-
ture due to ambiguity. We classiﬁed 950 domains as ﬁrst-
party, 1287 domains as third-party, 630 domains as hybrid, and
1288 domains as unknown. The unknown category includes
unattributable domains for a device. For example, the Hulu
application running on a Smart TV uses an AWS CloudFront
domain, which gives us no indication if the domain belongs
to Hulu or the Smart TV.
For each cloud endpoint, we evaluated the running services
and TLS/SSL conﬁgurations,
if applicable. We found 18
devices that used outdated services, leaked sensitive informa-
tion, lacked encryption for authentication, or ran a vulnerable
service. We found eight devices using cloud endpoints that
are vulnerable and have public exploits. Additionally, seven
devices authenticated with cloud endpoints in clear text. We
found 26 devices using cloud endpoints that have TLS/SSL
conﬁguration issues, like self-signed certiﬁcates, domain name
mismatch, and support for vulnerable versions of TLS/SSL
protocol.
We found ten devices that used misconﬁgured cloud end-
points, which allowed for sensitive information disclosure
like ﬁle paths and running processes on the server. We saw
four devices use cloud endpoints that ran outdated operating
(cid:18)(cid:20)(cid:24)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:49 UTC from IEEE Xplore.  Restrictions apply. 
systems with expired vendor support (Ubuntu 10 and Ubuntu
12).
Findings. The evaluation found issues with deployment of
unsupported legacy OS and sensitive information disclosure.
We summarize our ﬁndings in Table II and provide additional
details in Appendix A Table V.
G. Communication
We used Nessus Network Monitor [97], ntop-ng [103],
Wireshark [104], and sslsplit [105] to proﬁle the communi-
cation edges for each device. We manually inspected trafﬁc
and tested them for MITM attack using sslsplit. IoT devices
connect with their components using IP based channels, rep-
resented as edges in the model graph (see Figure 3). We
classiﬁed three types of connections, device-to-cloud (D-C),
mobile application-to-device (A-D), and mobile application-
to-cloud (A-C). We observed 43 devices connecting to cloud
endpoints (D-C), 35 mobile applications connecting to cloud
endpoints (A-C), and 27 mobile applications connecting to
devices through the local area network (LAN) (A-D).
We categorized these connections into ﬁve application pro-
tocols, namely: DNS, HTTP, UPnP, NTP, and custom. The
custom category refers to device-speciﬁc application protocols.
Smart devices utilize many protocols, but in our lab, we only
observe the ﬁve listed above. We found 41 devices used the
DNS protocol, where 6 of them did not respect the network
conﬁgured DNS recursive server, and instead used Google’s or
OpenDNS’s servers. We found that 38 devices used the HTTP
protocol and 34 of them used TLS/SSL sessions (HTTPS).
We found 21 devices that used the UPnP protocol either by
sending a multicast SSDP request or responding to an SSDP
request. Additionally, we saw 25 devices that used the NTP
protocol for time synchronization. We observed 28 devices
that used custom protocols that were speciﬁc to a device. For
example, Google products (OnHub, Home, and Home mini)
all sent trafﬁc to Google’s servers using a custom protocol on
ports 5228 and 5223.
The majority of the devices used encryption over the In-
ternet (D-C). We found 25 devices that encrypted all their
communication, 15 devices that partially encrypted their com-
munication, and two devices that did not encrypt their commu-
nication to the cloud endpoints. As for the mobile applications
(A-C), 24 encrypted all their communication, ten partially
encrypted their communication, and one did not encrypt its
communication to the cloud endpoints. On the LAN (A-D)
we observed ﬁve devices that encrypted their communication,
two devices that partially encrypted their communication, and
20 that did not encrypt their communication. Few devices,
like the Chinese webcam, did not have a companion mobile
application but provided an HTTP interface that allows any
device on the LAN to authenticate and interact with.
In addition to the communication analysis, we actively
MITM attacked every communication edge to test their sus-
ceptibility. We found in total 20 devices had one or more of
their communication edges susceptible to a MITM attack. We
found four device-to-cloud (D-C) communications that were
susceptible, two mobile application-to-cloud (A-C) commu-
nications that were susceptible, and 20 application-to-device
(A-D) communications that were susceptible.
Findings. The evaluation ﬁnds that not all communication
channels are secured and lack endpoint veriﬁcation. We found
devices that leak usage information by forcefully using third-
party recursive DNS servers. Table II summarizes the device
encryption and MITM attack and additional details are found
in Appendix A Table VII.
H. Mitigations
Device. Affected devices should patch through secure chan-
nels to ensure the integrity of the update. Vendors can limit
running services on IoT devices and follow a client approach
where the device is managed through cloud endpoints using
push/pull requests. Device conﬁgurations can be remedied
using a conﬁgure-before-operable approach, where the device
will not activate without proper conﬁguration and setup. Many
devices follow a conﬁgure-before-operable approach, and it
should be mandated by industry standards. Finally, endpoint
(cloud or mobile) veriﬁcation ensures only authenticated
parties can interact with the device. Vendors can limit the
interaction to a sandboxed environment and assign temporal
ﬁne-grained access control for required resources. Trusted
endpoints should not operate with unfettered access, and
devices should enforce authentication time-outs for all parties.
Modern home-based IoT devices are equipped with enough
compute power ( [106], [107]) to apply many of the suggested
mitigations, contrary to the popular belief that they are under-
powered and energy-constrained devices.
Mobile. Over-privileged applications can have privacy con-
cerns regarding user’s activities. Mobile platforms should
implement a system to derive permissions based on functional
analysis of the application and grant permissions temporar-
ily at runtime. Further, sensitive information, such as API
keys, should be derived when the application is installed
on the mobile device and stored in an encrypted key store.
Cryptographic protocols are difﬁcult to implement correctly,
and therefore developers should rely on mature libraries with
proper implementations. Finally, developers should adhere to
the recommended guidelines that accompany these libraries.
Cloud. Managed platforms and conﬁguration management
tools can alleviate the vulnerable services on the cloud end-
points. Vendors should utilize commercial platforms that are
managed by experienced professionals. Similarly, automating
cloud endpoint conﬁguration through API integration can
reduce the chances of misconﬁguration. For example, Let’s
Encrypt [108] can automatically renew certiﬁcates for servers.
Cloud endpoints should not support insecure protocols, but
instead, they should verify both endpoint devices and mobile
applications.
Communication. Network communication between all IoT
components should adhere to the same security standards
(LAN or Internet). Vendors must use the latest secure pro-
tocols, offer limited functionality for backward compatibility,
(cid:18)(cid:20)(cid:24)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:49 UTC from IEEE Xplore.  Restrictions apply. 
enforce protocol upgrade requirements, and verify endpoints.
Endpoint veriﬁcation will ensure MITM attacks are not suc-
cessful and protect the integrity of the communication. Ven-
dors should default to a fail state if endpoints are not veriﬁable.
Additionally, vendors can provide an option to install custom
certiﬁcates in IoT deployments for transparency.
V. PROPOSALS
A. Stakeholders
Vendors. Vendors have to get
the security requirements
correct for every component at every level,
including the
design, implementation, and deployment of IoT systems. Our
evaluation shows that many vendors strive for device security