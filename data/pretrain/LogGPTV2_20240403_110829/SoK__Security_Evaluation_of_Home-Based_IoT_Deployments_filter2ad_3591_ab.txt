### Services and Token Management
Services are provided to assist developers in generating correct triggers for their applications. Additionally, these services offer short-lived tokens with constrained access to a device’s functions.

### Empowering IoT Users
Wilson et al. [46] explored methods to empower IoT users who trust vendors with their private data. Their technique, known as TLS-Rotate and Release (TLS-RaR), involves an auditor entity that collects TLS packets and requests the session key from the vendor to decrypt the communication. The vendor then rotates the TLS session key and provides the previous key to the auditor, enabling the decryption of the collected TLS packets. This audit system must be deployed on the end-user side and is used to collect traffic for devices they wish to audit.

### Stakeholders: Vendor Control and Cloud Endpoints
The vendor controls the cloud endpoints (see Figure 1), and users have no way to inspect or control what their devices send to these endpoints [66], [75]. Third-party cloud providers offer infrastructure-as-a-service (IaaS) and platform-as-a-service (PaaS) for IoT deployments. Many IoT devices rely on cloud-based infrastructure to run their services. Unplanned outages [76], infrastructure compromises [77], and intentional attacks [78] can impact the deployment of cloud endpoints. For cloud infrastructure configuration and API implementation ([23], [25], [45]), the vendor is responsible for mitigating vulnerabilities.

Newer IoT devices are leveraging managed IoT platforms, which offload much of the security responsibilities to public cloud providers. However, most proposed frameworks ([44], [46], [48]) are user-centric and provide limited visibility and control. The work by Fernandes et al. [48] and Wilson et al. [46] presents a hybrid approach that can be jointly deployed by vendors and users or by a trusted third party. Vendors can mitigate their exposure by diversifying and subscribing to different cloud providers.

### Key Takeaways: Insecure Cloud Deployment
IoT cloud endpoints exhibit insecure cloud deployment through configuration and API implementation, but these vulnerabilities can be addressed with readily available tools for cloud security. Additional measurements are needed to understand the extent of these misconfigurations in cloud deployments. The Censys Project [79] provides valuable historical data for analyzing IoT infrastructure. Furthermore, IoT cloud integration platforms introduce new challenges, such as over-privileged recipes and privacy implications, as demonstrated by Surbatovic et al. [47].

Fernandes et al. [48] applied trust management systems and token authentication protocols to IoT platforms. Vendors are increasingly adopting managed IoT cloud platforms, shifting security responsibility to cloud providers like Amazon IoT Core [81], Azure IoT Hub [82], and Google Cloud IoT [83]. As IoT cloud endpoints rely more on third-party infrastructure, vendors should consider contingency plans for unplanned outages and infrastructure compromises. Further studies are needed to understand the managed IoT cloud platforms and identify potential weaknesses.

### Cloud Endpoint Security
Cloud endpoints suffer from misconfiguration and vulnerable services, which can be properly secured using industry standards. Third-party cloud providers play a crucial role by offering securely managed IoT platforms, which vendors are increasingly adopting. Toolchains for developing, analyzing, and deploying third-party applications via integration platforms require additional attention.

### Communication Protocols
Communication in IoT deployments falls into two classes of protocols: Internet protocol (IP) and low-energy (LE) protocol. Both types of communication can exist on the user demarcation (see Figure 1), but only IP communication can traverse the Internet. Researchers from both industry and academia are heavily invested in network communication security due to its broad applicability.

Most home-based IoT systems implement four types of communication protocols: IP, Zigbee, Z-Wave, and Bluetooth Low Energy (BLE). IoT devices often use the IP suite for communication due to its reliability and proven capability for handling large volumes of global network traffic. While the IP protocol is stateless and offers no security, it can be supplemented with TCP and TLS/SSL to provide necessary security features. Based on the literature, we identified five popular application layer protocols used by home-based IoT devices: DNS, HTTP, UPnP, NTP, and custom implementations.

### Attack Vectors
The DNS protocol, while lightweight, inadvertently leaks private information based on recursive and client configurations. Kintis et al. [64] found that open recursive DNS servers with the EDNS Client Subnet feature (ECS) [84] can have privacy implications. Selvi [55] demonstrated how a man-in-the-middle (MITM) attack on NTP could bypass HTTP strict transport security (HSTS). The HTTP protocol provides a reliable mode of transportation but, like DNS and NTP, does not offer confidentiality or integrity. Bellissimo et al. [85] and Samuel et al. [67] showed how an insecure protocol like HTTP allows attackers to perform MITM and backdoor the system software update process.

IoT devices widely rely on the UPnP protocol for easy configuration and control. Since UPnP uses the HTTP protocol, it inherits the same flaws [86]. Garcia [50] demonstrated how attackers abuse UPnP due to its lack of authentication, validation, and logging. GNUcitizen [87] and HD Moore [88] highlighted the vulnerability of UPnP-enabled devices to cross-site scripting (XSS) and other attacks. Unauthenticated and unencrypted use of application layer protocols enables mass exploitation of devices, leading to further attacks. TLS/SSL sessions provide confidentiality and integrity, addressing inherent flaws in these communication protocols.

Researchers have thoroughly examined TLS/SSL protocols and uncovered severe vulnerabilities. For example, BEAST [49] exposed an initialization vector (IV) flaw in TLS 1.0, allowing attackers to predict the IV of the next message. CRIME [58] showed how TLS sessions with compression, like Google’s SPDY protocol, were susceptible to session hijacking. AlFardan et al. [51] used malformed packets to infer time delays, a side-channel attack, to statistically infer plaintext from ciphertext. They also demonstrated how the RC4 stream cipher weakens TLS session security. POODLE [56] exposed a downgrade flaw in SSL 3.0, allowing for insecure communication. Beurdouche et al. [59] found flaws in several client and server implementations of TLS/SSL libraries, including the FREAK [57] vulnerability.

Additional attacks disclosed by Adrian et al. [60] and DROWN [62] illustrate the difficulty of implementing secure communication protocols. Many IoT communications are susceptible to MITM attacks because they support older versions of TLS/SSL. Managed IoT platforms, such as AWS IoT Core [81], Azure IoT Hub [82], and Google Cloud IoT [83], implement custom protocols that use certificates and TLS/SSL. These protocols and platforms are sparsely documented but rely on time-tested technologies for secure end-to-end communication.

### Low-Energy Protocol Security
BLE, Zigbee, and Z-Wave protocols have numerous security issues. Ryan [52] discovered a severe flaw in the Bluetooth key-exchange protocol, allowing passive recovery of the session key. Jasek [63] demonstrated how attackers can abuse the generic attribute profile in the GATT layer of the Bluetooth stack. Zillner et al. [61] showed that the Default Trust Center Link Key defined by the Zigbee Alliance [90] is the same across all devices. Fouladi et al. [53] revealed that a hard-coded constant in the Z-Wave firmware is used to derive session keys, which became publicly known. Legacy versions of LE protocols have critical security flaws, and many home-based IoT devices implement these in hardware, limiting mitigation options.

LE protocols offer a proximity feature that authentication systems rely on to identify geographical presence. Ho et al. [92] demonstrated how relay attacks against LE protocols are possible by serializing and relaying LE packets over IP. Researchers have shown that MITM relay attacks against LE protocols are practical and break the geographical proximity, leading to privacy concerns as demonstrated by Apthorpe et al. [65] and Wood et al. [66].

### Mitigations
For HTTP, UPnP, DNS, and NTP protocols, suggested mitigations include disabling the ECS feature in DNS, using updated versions of the NTP protocol (NTPv4), and using TLS/SSL with insecure protocols (HTTPS). For TLS/SSL implementation flaws, upgrading server-side and client-side libraries to the latest version addresses vulnerabilities. Disabling weak or vulnerable TLS/SSL versions reduces exposure but may lose backward compatibility.

For LE-based communication, the first generation of Zigbee and Z-Wave protocols have critical flaws and limited mitigation options. Vendors can disable insecure portions of these protocols [93] at the expense of compatibility. Recent research by Apthorpe et al. [65] and Wood et al. [66] proposes systems that monitor home networks and inform users of sensitive data sent by IoT devices. Traffic shaping on the home network can prevent side-channel snooping, requiring additional attention to empower consumers in protecting their networks and privacy.

Devices using Z-Wave must now opt for Z-Wave Plus, which has improved security [94] and over-the-air (OTA) update capabilities. Zigbee added a new security model for secure-key distribution known as Trust Center (TC) [95]. TC is a trusted entity within the Zigbee network authorized to distribute keys to Zigbee client devices, providing each connected device with a unique encryption key. To mitigate relay attacks in LE protocols, Ho et al. [92] introduced a touch-based-intent communication approach using body-area networks (BAN) for signal propagation.

### Stakeholders: Addressing Communication Flaws
End-users cannot address communication flaws since the implementation is on the device, cloud endpoint, or mobile application. Vendors have limited options in addressing communication vulnerabilities, as some flaws require hardware upgrades. Vendors can patch vulnerable libraries on the device, mobile application, and cloud endpoints.

Internet service providers (ISPs) have visibility into the utilization of IP-based protocols but are not directly responsible for mitigation. ISPs can provide network and legal policies defining their role. For LE protocols, vendors can mitigate legacy devices by disabling vulnerable pairing. Users can use alternate methods for pairing LE devices with IoT hubs if such options exist. Users can also purchase newer devices that offer next-generation secure LE protocols, such as Z-Wave Plus and Zigbee.

### Key Takeaways: Communication Channels
Communication channels provide essential functions for home-based IoT. Home-based IoT devices have adapted industry standards for IP and LE protocols but suffer from legacy libraries that, in some cases, cannot be fixed. Vendors bear the responsibility for addressing vulnerabilities in communication channels. Cloud endpoints and mobile applications can be updated by the vendor, but vendors must be proactive and informed about vulnerabilities affecting their software. IoT devices continue to rely on insecure protocols like UPnP and rarely encrypt their communication on the LAN. End-users do not know if their device or mobile application is vulnerable to weak encryption or MITM attacks unless they analyze and test the communication traffic. An informed power-user might segment their local network into trusted and untrusted zones to limit exposure.

TLS/SSL addresses insecure protocols susceptible to MITM attacks but also exhibits flaws in implementation and deployment. Clark et al. [96] provided additional analysis regarding SSL and HTTPS. ISPs can provide reports outlining best network practices and statistics about device and protocol utilization. Managed cloud IoT platforms use custom communication protocols that rely on public-key infrastructure (PKI) and TLS/SSL protocols. Further studies are required to investigate protocols used by managed cloud IoT platforms, as these new platforms are not well studied and require further investigation to identify any weaknesses.

### Evaluation
We evaluated 45 devices spanning categories that include appliances, cameras, home assistants, home automation, media, and network devices. A full overview of the devices is in Appendix A Table III. We used a mix of commercial and open-source tools to conduct the evaluation; all commercial tools have open-source counterparts. Our methodology and evaluation require minimal technical expertise to replicate and are designed to appeal to a wide range of technical audiences, allowing them to contribute to this effort. Our evaluation results are summarized in Table II, with additional details in Appendix A Table IV. Specific device evaluation cases are in Appendix B.

### Experiment Setup
Our network setup includes three main components: the IoT subnet, a custom Linux gateway, and an assessment machine. The assessment machine runs all our evaluation tools and sits on the same subnet as the IoT devices. Our gateway, a Debian Jessie Linux machine, manages network services (DHCP, DNS, etc.) and connects the IoT subnet to the Internet. It also performs full-packet captures of all IP traffic originating from the IoT subnet. We used a 24-port switch to connect wired IoT devices via Ethernet and a wireless access point for devices requiring 802.11 WLAN. All IoT devices are assigned a static IP based on their MAC address.

### Data
We examine different types of data generated by analyzing the device, mobile application, cloud endpoint, and network traffic. The interaction between these components generates network traffic (node interaction via edges, see Section II-A) that we capture, extract, and classify into application-level protocols to build the evaluation tables in Appendix A Table VII. We generate scan data based on security audit tools that assess running services on the devices and cloud endpoints, providing the evaluation report in Appendix A Table V and Table VI. We use mobile application audit tools to find issues related to the security properties defined earlier in Section II-B. The audit reports provide summaries of over-privileged applications, embedded sensitive data, and programming errors. We use this data summary to generate the evaluation report for each mobile application in Appendix A Table IV.

### Challenges
We faced several challenges evaluating IoT deployments, including automated device updates, cloud endpoint classification, wireless network analysis, and decryption of iOS applications. Automatic updates bias our device evaluation because the device state changes when updates are applied, which we had to disable on configurable devices. Cloud endpoint classification was involved and required manual analysis to ensure high accuracy due to increased utilization of content delivery networks (CDN). The wireless access point used WPA2 configuration, which limited our visibility into wireless-to-wireless device communication from the data collected at the egress (gateway) point of our IoT environment. We ran two different access points to force traffic to traverse the gateway, gaining visibility. Apple iOS applications were encrypted in the App Store and required a jailbroken iOS device to download, decrypt, and copy the iOS application locally. Once we had a copy of the iOS application, we used various open-source and commercial tools to audit them.

### Device Evaluation
We used Nessus Scanner [97] to scan devices for service discovery, service profiling, and vulnerability assessment. Nessus Scanner annotates the Common Vulnerabilities and Exposures (CVE) [98] information with the versions of running services and provides a summary of their security state. Nessus Scanner uses the Common Vulnerability Scoring System (CVSS) [99] to rate the severity of the discovered vulnerability on a scale from one to ten, categorizing them into low, medium, high, and critical.

### Summary of Evaluated Devices
Table II summarizes the evaluation of each device per graph component in Figure 3. There are four components: the device (D), mobile application (A), cloud endpoints (C), and communication channels (E). The evaluation uses Nessus scanner to assess the device and cloud endpoints; Kryptowire, MobSF, and Qark to assess the mobile applications; Nessus Monitor, ntopng, sslsplit, and Wireshark to assess the communication protocols. The device section summarizes the number of running services and issues found. The mobile application summarizes excessive permissions, sensitive data, or incorrect use of cryptographic protocols. The communication category summarizes the susceptibility to MITM attacks and the communication channel state as fully encrypted ((cid:2)), partially encrypted ((cid:3)(cid:4)), or not encrypted ((cid:4)). Additional details are in Appendix A.

### Findings: Device Evaluation
The device evaluation found issues related to device setup, software updates, and service configurations. We evaluated 45 devices and found a total of 84 running services and 39 issues related to those running services. We found devices with running services such as SSH, UPnP, HTTP web server, DNS, Telnet, RTSP, and custom services. Many devices configure TLS/SSL for their services, but their configurations had several issues, including self-signed certificates, support for weak to medium ciphers, short TLS/SSL keys, use of vulnerable versions of SSL (v2, v3, and CBC mode), and expired certificates. Some devices ran outdated and vulnerable services that allowed remote code execution, leaked sensitive information, and ran unauthenticated services.

For example, the Insteon hub runs a web server with TLS on port 443 and listens on port 22 for SSH connections. The certificate used for the TLS connection is expired and self-signed, and the TLS service allows for weak ciphers like RC4 and insecure protocols like SSLv3. Similarly, the Wink 2, Sonos Speakers, nVidia Shield, Google Home, Samsung SmartTV, and Samsung SmartThings all had issues with their certificates or TLS/SSL configurations. The Wink 2 and Sonos both used short SSL keys of size 1024 bits. Other devices like D-Link DCS5009L, Bose SoundTouch 10, Chinese webcam, and Securiﬁ Almond lacked encryption for service authentication, allowing any device on the LAN to snoop.

Devices that run UPnP services have no authentication or security built in and are inherently insecure. Devices like the MiCasaVerda VeraLite, Wink 2, Sonos, Bose SoundTouch 10, Samsung SmartTV, Logitech Harmony, and Roku all run UPnP services that allow anyone on the LAN to control the device. Specifically, the MiCasaVerda VeraLite uses vulnerable versions of the UPnP service libraries that have public exploits, such as libupnp 1.6.18 (CVE-2012-5965), dropbear 2016.72 (CVE-2012-0920), and UPnP RunLua (CVE-2013-4863). A complete list of CVEs with CVSS scores of high and critical are in Appendix B Table VIII.

We found 16 devices with running services that had no issues, and ten devices that did not expose running services. For example, the Nest camera uses a push/pull client approach, limiting the exposure of running services.

### Mobile Application Evaluation
We used MobSF [100], Qark [101], and services from Kryptowire [102] to statically and dynamically evaluate each mobile application for the IoT devices. We analyzed both Android and iOS applications and presented the vulnerable findings in Table II. There are 42 devices that have a companion mobile application. We analyzed a total of 83 mobile applications, with 41 being Android and 42 being iOS. We found that 39 devices had one or more issues related to permissions, sensitive data, or incorrect use of cryptography. We observed 24 over-privileged mobile applications that ask for permissions on the mobile device that are not used by the application code.

As for sensitive data, we found 15 mobile applications to have hard-coded sensitive data like API keys for Google Geocoding, Google Maps, fabric.io, HockyApp, Localytics, Microsoft Virtual Earth, Umeng, and other credentials to cloud and device services. We found 17 mobile applications that did not implement cryptographic protocols securely or had hard-coded static keys and initialization vectors (IVs). The cryptographic implementations relied on older or broken algorithms like AES-128 and MD5 hash, respectively. Other applications did not enforce SSL and allowed for communication over unverified connections.

### Findings: Mobile Application Evaluation
The evaluation identifies issues with inherent trust between mobile applications and devices that the systematized work neglects. A summary of our mobile application evaluation is provided in Table II, with additional details in Appendix A Table IV.

### Cloud Endpoint Evaluation
We used Nessus Scanner to discover, profile, and assess running services on the cloud endpoints. On the IoT network, we observed over 4,000 cloud endpoint domains across the 45 devices. We classified each domain into one of four categories: first-party, third-party, hybrid, and unknown. First-party refers to cloud-based services that run on the vendor’s infrastructure, third-party refers to subscription services like content delivery networks (CDN), hybrid refers to cloud-based infrastructures (IaaS), like Amazon AWS or Microsoft Azure, that host IoT cloud services, and Unknown refers to unclassified infrastructure due to ambiguity. We classified 950 domains as first-party, 1287 domains as third-party, 630 domains as hybrid, and 1288 domains as unknown. The unknown category includes unattributable domains for a device. For example, the Hulu application running on a Smart TV uses an AWS CloudFront domain, giving us no indication if the domain belongs to Hulu or the Smart TV.

For each cloud endpoint, we evaluated the running services and TLS/SSL configurations, if applicable. We found 18 devices that used outdated services, leaked sensitive information, lacked encryption for authentication, or ran a vulnerable service. We found eight devices using cloud endpoints that are vulnerable and have public exploits. Additionally, seven devices authenticated with cloud endpoints in clear text. We found 26 devices using cloud endpoints that have TLS/SSL configuration issues, such as self-signed certificates, domain name mismatch, and support for vulnerable versions of TLS/SSL protocol.

We found ten devices that used misconfigured cloud endpoints, allowing for sensitive information disclosure like file paths and running processes on the server. We saw four devices use cloud endpoints that ran outdated operating systems with expired vendor support (Ubuntu 10 and Ubuntu 12).

### Findings: Cloud Endpoint Evaluation
The evaluation found issues with the deployment of unsupported legacy OS and sensitive information disclosure. We summarize our findings in Table II, with additional details in Appendix A Table V.

### Communication Evaluation
We used Nessus Network Monitor [97], ntop-ng [103], Wireshark [104], and sslsplit [105] to profile the communication edges for each device. We manually inspected traffic and tested them for MITM attacks using sslsplit. IoT devices connect with their components using IP-based channels, represented as edges in the model graph (see Figure 3). We classified three types of connections: device-to-cloud (D-C), mobile application-to-device (A-D), and mobile application-to-cloud (A-C). We observed 43 devices connecting to cloud endpoints (D-C), 35 mobile applications connecting to cloud endpoints (A-C), and 27 mobile applications connecting to devices through the local area network (LAN) (A-D).

We categorized these connections into five application protocols: DNS, HTTP, UPnP, NTP, and custom. The custom category refers to device-specific application protocols. Smart devices utilize many protocols, but in our lab, we only observe the five listed above. We found 41 devices used the DNS protocol, where six did not respect the network-configured DNS recursive server and instead used Google’s or OpenDNS’s servers. We found that 38 devices used the HTTP protocol, and 34 of them used TLS/SSL sessions (HTTPS). We found 21 devices that used the UPnP protocol either by sending a multicast SSDP request or responding to an SSDP request. Additionally, we saw 25 devices that used the NTP protocol for time synchronization. We observed 28 devices that used custom protocols specific to a device. For example, Google products (OnHub, Home, and Home mini) all sent traffic to Google’s servers using a custom protocol on ports 5228 and 5223.

The majority of the devices used encryption over the Internet (D-C). We found 25 devices that encrypted all their communication, 15 devices that partially encrypted their communication, and two devices that did not encrypt their communication to the cloud endpoints. For mobile applications (A-C), 24 encrypted all their communication, ten partially encrypted their communication, and one did not encrypt its communication to the cloud endpoints. On the LAN (A-D), we observed five devices that encrypted their communication, two devices that partially encrypted their communication, and 20 that did not encrypt their communication. Few devices, like the Chinese webcam, did not have a companion mobile application but provided an HTTP interface that allows any device on the LAN to authenticate and interact with.

In addition to the communication analysis, we actively performed MITM attacks on every communication edge to test their susceptibility. We found in total 20 devices had one or more of their communication edges susceptible to a MITM attack. We found four device-to-cloud (D-C) communications that were susceptible, two mobile application-to-cloud (A-C) communications that were susceptible, and 20 application-to-device (A-D) communications that were susceptible.

### Findings: Communication Evaluation
The evaluation finds that not all communication channels are secured and lack endpoint verification. We found devices that leak usage information by forcefully using third-party recursive DNS servers. Table II summarizes the device encryption and MITM attack, with additional details in Appendix A Table VII.

### Mitigations
**Device:** Affected devices should patch through secure channels to ensure the integrity of the update. Vendors can limit running services on IoT devices and follow a client approach where the device is managed through cloud endpoints using push/pull requests. Device configurations can be remedied using a configure-before-operable approach, where the device will not activate without proper configuration and setup. Many devices follow a configure-before-operable approach, and it should be mandated by industry standards. Finally, endpoint (cloud or mobile) verification ensures only authenticated parties can interact with the device. Vendors can limit the interaction to a sandboxed environment and assign temporal fine-grained access control for required resources. Trusted endpoints should not operate with unfettered access, and devices should enforce authentication time-outs for all parties. Modern home-based IoT devices are equipped with enough compute power ([106], [107]) to apply many of the suggested mitigations, contrary to the popular belief that they are under-powered and energy-constrained devices.

**Mobile:** Over-privileged applications can have privacy concerns regarding user activities. Mobile platforms should implement a system to derive permissions based on functional analysis of the application and grant permissions temporarily at runtime. Sensitive information, such as API keys, should be derived when the application is installed on the mobile device and stored in an encrypted key store. Cryptographic protocols are difficult to implement correctly, and therefore developers should rely on mature libraries with proper implementations. Finally, developers should adhere to the recommended guidelines that accompany these libraries.

**Cloud:** Managed platforms and configuration management tools can alleviate the vulnerable services on the cloud endpoints. Vendors should utilize commercial platforms that are managed by experienced professionals. Automating cloud endpoint configuration through API integration can reduce the chances of misconfiguration. For example, Let’s Encrypt [108] can automatically renew certificates for servers. Cloud endpoints should not support insecure protocols but should verify both endpoint devices and mobile applications.

**Communication:** Network communication between all IoT components should adhere to the same security standards (LAN or Internet). Vendors must use the latest secure protocols, offer limited functionality for backward compatibility, enforce protocol upgrade requirements, and verify endpoints. Endpoint verification will ensure MITM attacks are not successful and protect the integrity of the communication. Vendors should default to a fail state if endpoints are not verifiable. Additionally, vendors can provide an option to install custom certificates in IoT deployments for transparency.

### Proposals
**Stakeholders:**
- **Vendors:** Vendors must get the security requirements correct for every component at every level, including the design, implementation, and deployment of IoT systems. Our evaluation shows that many vendors strive for device security but often fall short. Vendors should prioritize security throughout the product lifecycle and work closely with security experts to identify and mitigate vulnerabilities.