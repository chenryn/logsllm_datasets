### Performance Degradation with w = 1
When \( w = 1 \), the performance is either equal to or worse than the baseline configuration. In the following section, we demonstrate that for all other configurations (where \( w > 1 \)), the performance is either equal to or better than the baseline.

### Impact of Decision Pattern with Simultaneous Round Participation

In the CT-consensus, the coordinator of round \( r \) is blocked in the final phase of round \( r \) until it gathers \( n - f \) votes. In contrast, HMMR-consensus allows the coordinator (and any other process) to participate in the next round as soon as it has sent its own vote, thanks to a window size greater than 1. This rapid participation is particularly beneficial when the coordinator of round \( r \) is correct but suspected by many other processes. Additionally, all positive votes generated in recent rounds are taken into account, which may enable a decision as soon as a majority of positive votes is observed by the set of coordinators, represented by \( X \), during one of the \( w \) rounds executed in parallel. It is important to note that managing the window does not require additional messages. The space cost of this mechanism is low, requiring only a single counter for each round in the window.

Before analyzing the case where simultaneous round participation and decentralized decision co-exist, we study the scenario with the smallest value of the decision pattern parameter (\( x = 2 \)) while increasing the window size (\( w > 1 \)).

### Simultaneous Round Participation and Bad QoS

As expected, simultaneous round participation, represented by \( w > 1 \), is especially advantageous in scenarios where the failure detector provides poor Quality of Service (QoS). As shown in Figure 2, even with the minimal configuration for \( X \) (\( x = 2 \)), the performance degradation caused by wrong suspicions (PFD varying from 5% to 20%) is significantly smaller when simultaneous rounds are executing (\( w > 1 \)) compared to the baseline configuration (\( w = 1 \)). This is because some processes (those in \( X \)) have more opportunities to decide during consecutive rounds, despite the occurrence of wrong suspicions. Moreover, the overhead incurred by implementing simultaneous rounds can be negligible, making a larger window size (\( w \)) beneficial for achieving better performance.

### Performance Results for Baseline and Simultaneous Rounds

Figure 2 illustrates the performance results for the baseline configuration and the one using simultaneous round participation (\( w > 1 \)) and minimal decentralization (\( x = 2 \)). Choosing \( w = n \) corresponds to the best configuration. In this case, the performance obtained with \( x = 2 \), \( w = n \), and PFD = 20% can be even better than the baseline configuration (\( x = 2 \) and \( w = 1 \)) when the failure detector is perfect (PFD = 0%).

### Performance Gains with Decentralized Decision

Figure 3 shows the performance results for the protocol considering the best configuration for \( w \) (\( w = n \)) and \( 2 \leq x \leq n \), compared to the baseline configuration. The values plotted represent the gains or losses when comparing the performance of a particular configuration with the baseline. By varying \( x \), different performance gains can be achieved, which generally increase as the PFD becomes worse. These gains occur because more processes (those in \( X \)) are allowed to decide autonomously during more rounds (\( w = n \)).

When the PFD worsens, the performance gains from adopting a decentralized decision increase. This is due to the use of simultaneous round participation (\( w > 1 \)), which helps to mitigate the negative effects of wrong suspicions. The impact of decentralized decision is always positive, except for the 1st-smallest decision time when failure detectors are perfect. In this case, the choice of \( x \) has little impact on performance because the first process to decide the consensus tends to be the coordinator of the first round. This lack of difference is due to the homogeneous network load in the simulations. Performance gains may appear in scenarios with heterogeneous workloads, where processes have different speeds. In such cases, a higher value of \( x \) increases the chances of finding a faster process in the deciders set.

### Optimal Configuration for Performance Gains

From the results in Figure 3, significant performance gains are obtained for the kth-decision time when \( x = k \). For higher values of \( x \), the performance gains stabilize. Thus, choosing \( x = k \) seems to be the best solution when limiting the number of exchanged messages is a concern. Otherwise, \( x = n \) is a good choice, as it contributes to similar performance gains.

### Comparison of Best and Baseline Configurations

Figure 4 compares the best configuration (\( w = n \), \( x = n \)) with the baseline configuration (\( w = 1 \), \( x = 2 \)). In a fault-free scenario without wrong suspicions (PFD = 0%), the results for the 1st-decision time show similar behavior in both configurations. In the presence of wrong suspicions (PFD â‰¥ 5%), the impact of a poor QoS of the failure detector is entirely masked when \( w \) and \( x \) are set to \( n \). The protocol exhibits nearly the same performance regardless of the QoS of the failure detector. Only minor degradation is observed (7.3% for the 1st-smallest decision). Analyzing the curves in Figure 4, we see that the results for the worst QoS (PFD = 20%) are close to or even better than those for the baseline configuration without wrong suspicions (PFD = 0%). For example, for the 5th-smallest decision time, the best result for the baseline configuration was 45.55ut, while for \( w = n \) and \( x = n \), it was 36.82ut, resulting in a performance gain of 19.2%.

### Summary of Key Points
- **w = 1**: Performance is equal to or worse than the baseline.
- **w > 1**: Performance is equal to or better than the baseline.
- **Simultaneous Round Participation**: Beneficial in scenarios with poor QoS.
- **Decentralized Decision**: Generally improves performance, especially with high PFD.
- **Optimal Configuration**: \( w = n \) and \( x = k \) or \( x = n \) depending on the need to limit message exchange.