utilized: (1) Least-recently-used replacement policy: the least recently
used cache entry in a cache set will be replaced. Intel architecture
uses this policy [22]; (2) Round-Robin replacement policy: the cache
lines that are rst lled will be cleared rst; (3) Pseudo-random
replacement policy: a random cache line will be evicted. In the ARM
architecture, a pseudo-random replacement policy is used, which
usually makes cache-based attacks harder to implement [21, 31].
Cache in TrustZone Architecture. Unlike some banked system
registers, there is only one copy of cache that is shared between
normal and secure world. Each cache line has one bit to indicate
if its content is from a secure or normal world memory region.
Even though this extend bit can prevent normal world components
from accessing cache contents of secure world, the design of shared
cache still makes some cross-world cache attacks possible.
2.4 Previous Cache Attacks
Previous cache attacks utilize time dierences between a cache
hit and a cache miss to infer whether specic code/data has been
accessed. We briey overview several attacks that have been widely
exploited on both Intel and ARM architectures.
Both E+T and P+P can be used to determine
which cache sets have been accessed by a victim [29]. Both of them
have been used to reconstruct cryptography key in a victim pro-
gram [15, 22, 29] and perform cross-VM attacks [24, 44–46]. In these
two approaches, attackers can only achieve set-level granularity,
but they do not need to map objects in the memory space of the
victim into their own memory space. Previous research eort also
showed that the pseudo-random replacement policy on ARM makes
P+P much harder than it is on Intel architectures [21, 42].
443
The objective of F+R is to determine which specic
cache lines are accessed by a victim program. First, the attacker
maps objects in the victim’s address space into its own. The attacker
then ushes specic cache lines, schedules the victim program,
and checks which the cache lines that were ushed have been
reloaded. This technique was rst implemented using the CLFLUSH
instruction provided in the Intel architecture [41], and it has been
used to extract cryptographic keys [14, 16, 17]. E+R was
proposed for ARM by replacing the ush action with eviction [13,
43].
Because the cache references and misses caused by F+R
and P+P could be monitored by hardware performance
counters, Gruss et al. [12] proposed F+F that only relies
on the execution time of the ush instruction to detect if a cache
line has been loaded by a victim program.
Even though F+R, E+R and F+F
provide ner-grained attacks at the cache line level, they all need
shared memory between an attacker program and a victim program.
In this paper, we assume the secure world and normal world commu-
nication parties do not share memory. Therefore, these techniques
cannot be adopted.
3 ASSUMPTIONS AND ATTACK MODEL
We assume a solution, such as SeCReT [18], that only allows au-
thenticated normal world components to use the communication
channel, is running in secure world monitor mode. Such a solution
safely maintains a list of predened normal world components
that are allowed to use the legitimate channels. We also assume
that there is a strong monitor that can understand all transmit-
ted data between the normal and secure world and block illegal
communications.
The goal of an attacker is to smuggle sensitive information that
is only accessible in the secure world to the normal world. To this
end, the attacker runs a component, namely Receiver in the normal
world and another component, namely Sender in the secure world.
Because legitimate communication channels, including parameters
passed by registers and shared memory, between the normal world
and the secure world are under inspection by a SeCReT or a strong
monitor, it is impossible for the Sender and the Receiver to transfer
sensitive data from the secure to the normal world using such
channels without being detected. To bypass this kind of cross-world
communication monitoring, the Sender and the Receiver need to
use channels that are not governed by the sentries implemented in
the monitor mode.
We assume the attacker has kernel privileges in the normal world,
so the Receiver can use privileged instructions to access the PMU.
This constraint can be loosened if the perf_event_open system call
is provided to monitor “L1/L2 cache rell events” in userland. The
Sender can simply be a secure world application (trusted applica-
tion), and it is not necessary for it to have kernel privileges. This
is because the Sender will only need to inuence cache by read-
ing/writing memory regions and does not need to access the PMU.
However, having the Sender running in the kernel space enables
it to steal information that is not available for userland processes.
Running an application in the secure world is very feasible for
the attacker who can either leverage vulnerabilities of the secure
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
H. Cho et al.
Device
Samsung
Tizen TV
SoC
N/A
CPU (cores)
32-bit
Cortex-A17 (4)
L1 Cache
32KB, 4-way,
128 sets
L2 Cache
1024KB, 16-way,
1024 sets
Inclusiveness
Inclusive
Secure World OS
SecureOS
Normal World OS
Tizen OS
on Linux 4.1.10
Hikey board HiSilicon
64-bit
Kirin 620 Cortex-A53 (8)
32KB, 4-way,
128 sets
512KB, 16-way,
512 sets
Inclusive
ARM Trusted
Firmware, OP-TEE
Linux 4.1.0
Table 1: Test Environments.
world interfaces as shown in [20, 27] or bypass application vetting
mechanisms [9]. The use of downloadable TAs, which are predicted
to be used widely [39], would increase the chance as well.
In summary, in our attack model attackers are not stronger than
their counterparts in previous events [26, 33] or in the attack model
presented in SeCReT [18], except that the Sender, which can be a
userland application, is a must. Our implementation suggests such
an application could be implemented in hundreds of lines of C code.
Moreover, our attack can be carried out even when mechanisms,
such as strong monitors, that are more powerful than normal world
component authentication, such as SeCReT, are deployed between
the two worlds.
Depending on the hardware the attack is performed on and
resources the attacker possesses, we articulate two attack scenarios:
single-core and cross-core.
(1) Single-core scenario: This scenario occurs when either the
targeted device only has a single-core CPU or the attacker can only
control one of the cores in a multi-core CPU. Because there is only
one core available to the attacker, the attacker needs to use the
SMC instruction to switch between the normal and secure world. In
addition, in this scenario the attacker can use either L1 cache or L2
cache. Note that even if the attacker can use the SMC instruction in
this scenario, it is not possible to send sensitive information directly
using the SMC instruction or shared memory due to the sentry in
the monitor mode;
(2) Cross-core scenario: In this scenario, the attacker can execute
the Receiver in the normal world and the Sender in the secure world
on two dierent cores at the same time. Because dierent cores
do not share L1 cache, the covert channel can only be constructed
using the L2 cache. Therefore, the inclusiveness of L2 cache aects
the result. In this scenario, there is no need for the attacker to use
the SMC instruction to switch between the worlds.
In this paper, we attempt to solve the challenges in building
cross-world covert channels in both aforementioned scenarios. All
experiments are performed on the two environments as listed in
Table 1. In addition, we use a TRACE32 hardware debugger1 to
trace cache operations on the Tizen TV.
4 CROSS-WORLD COVERT CHANNELS
At a high level, to build cache-based covert channels, the Receiver
rst makes the whole cache or some specic cache lines enter
a known state. To this end, the Receiver can ll the cache with
contents from its own address space. In the second step, the Sender
carefully changes states of some cache lines by evicting the contents
of those lines and placing its own contents there. In the third step,
1http://www.lauterbach.com/
Algorithm 1: P+C-based Cross-world Covert Chan-
nels. x is the message to be sent.
/* Receiver: Prime
*/
for Each L1-D cache line do
1 if Single-core covert channel then
2
3
4
Clean & Invalidate the L1-D cache line
Load data to ll the L1-D cache line
Yield control to the secure world by executing SMC
for Each L2 cache line do
5
6 if Cross-core covert channel then
7
8
9
10
Clean & Invalidate the L1-D cache line
Clean & Invalidate the L2 cache line
Load data to ll the L1-D & L2 cache lines
11
Clean & Invalidate the whole L1-D cache
/* Sender: Write to covert channel
Occupy x L1-D cache lines
Yield control to the normal world by executing SMC
12 if Single-core covert channel then
13
14
15 if Cross-core covert channel then
16
Occupy x L2 cache lines
/* Receiver: Count
17 Determine how many cache lines are changed by Sender
18 Apply bucket method for further noise reduction
*/
*/
the Receiver detects such changes to decipher the message the
Sender transmits. Note that, in almost all the platforms, neither the
Sender nor the Receiver can directly read the content of any cache
line. Therefore, the message is actually delivered using channels
such as which specic cache lines or sets have been changed in
previous projects [21, 32, 37]. To receive such information, the
Receiver accesses its own address space again and uses cache hit or
miss to detect how many cache lines have been changed.
Our approach follows this general idea with some changes that
are tailor-made for the TrustZone architecture. In particular, we
propose P+C, it uses the number of changed cache lines
as the covert channel instead of which cache lines or sets. Algo-
rithm 1 demonstrates the overall workow of building cross-world
covert channels using P+C. As shown in Lines 2–4 and
7–11, the Receiver rst Ps the cache. Because covert channels
are based on the number of cache misses, the results of the P
step can have a strong inuence on the reliability and bandwidth of
the covert channel. Due to the pseudo-random cache replacement
444
P+C: Novel Cross-world Covert Channels on ARM TrustZone
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Algorithm 2: An Alternative Method.
/* The following lines replace Lines 2-4 in
Algorithm 1
*/
Clean & Invalidate the L1-D cache set
1 for Each L1-D cache set do
2
3 for Each L1-D cache set do
4
Load data to ll the L1-D cache set
Figure 1: Cache misses introduced by world switching.
policy, an eective and ecient P method is not very straight-
forward. We discuss the P method in detail in Section 4.2.
In the single-core scenario, the Receiver then needs to yield
control to the secure world so the Sender can execute as shown
in Line 5. In the cross-core scenario, this step is omitted. Then,
as shown in Lines 13 and 16, the Sender writes data to the covert
channel by occupying x cache lines, where x is the message to be
sent. In this step, the cache replacement policy could be the obstacle
again. Consequently, a similar method in P is used for accurate
message writing. In the single-core scenario, the Sender then yields
control to the normal world so that the Receiver can decode the
message as shown in Line 14. Lastly, the Receiver Cs how many
cache lines are changed as shown in Line 17 and uses a simple noise
reduction method to get the message as shown in Line 18.
The main dierence in single-core and cross-core scenario is
that the L2 cache is used in the cross-core scenario instead of the
L1-D cache. We discuss the details of the dierences in Section 4.5.
4.1 P+C Overview