1 contract Radixsort implements Sort.sort {
2 mode efficient {
3 requires resource CPU {
4 frequency = 2.400 [MHz]
5 max time = f1 [ms]
6 max energy = f2 [J] }
7 provides max response_time = time + x1
8 }
9 mode fastest {
10 requires resource CPU {
11 frequency = 3.000 [MHz]
12 max time = f3 [ms]
13 max energy = f4 [J] }
14 provides max response_time = time + x2
15 }
16 }
Listing 1.1. Example of a QCL contract for radix sort.
Contracts, like the discussed example, can then be used to generate problem
formulations for off-the-shelf constraint satisfaction and optimization problem
solvers.
5.3 Optimization
To determine the service with a particular CPU frequency an algorithm should
be run on, we use an integer linear program (ILP) as shown in Listing 1.2. For
clarity, we only show an ILP example for the decision whether radix sort shall
be executed on one of two servers with different CPU frequencies in either the
most energy-efficient or the fastest way. In the example, all values referring to
server N1 correspond to the measurement values shown in the last section for
a sort request of 30 million elements. The values referring to server N2 are not
based on measurements, but introduced to show the general applicability of the
approach to multiple servers.
1 min: energy#N1 + energy#N2;
2 //decide for one server and variant
3 b#rdx#eff#N1 + b#rdx#fast#N1 + b#rdx#eff#N2 + b#rdx#fast#N2
4 = 1;
5 //approximated runtime per decision
6 time#N1 = 1620b#rdx#eff#N1 + 1164b#rdx#fast#N1;
7 //base load + decision-induced consumption
8 energy#N1 = 97 + 324b#rdx#eff#N1 + 376b#rdx#fast#N1;
9 //min frequency + sweet spot-min frequency
10 frequency#N1 = 1200 + 1000b#rdx#eff#N1 + 2000b#rdx#fast#N1;
11 time#N2 = 1120b#rdx#eff#N2 + 940b#rdx#fast#N2;
12 energy#N2 = 100 + 420b#rdx#eff#N2 + 530b#rdx#fast#N2;
13 frequency#N2 = 1200 + 1000b#rdx#eff#N2 + 2000b#rdx#fast#N2;
14
15 bin b#rdx#eff#N1,b#rdx#fast#N1,b#rdx#eff#N2,b#rdx#fast#N2;
Listing 1.2. Example of an Integer Linear Program for self-adaptive software.
The ILP example comprises 4 decision variables and 3 usage variables per
server. The decision variables of the optimization problem have the form:
b#algorithm#variant#server
The prefixing b denotes the Boolean type of the variable, which is explicitly
stated as constraint on lines 22 and 23, and algorithm, variant and server,
delimited by pounds (#), denote the respective algorithm, variant (energy effi-
cient or fast) and server. The meaning of b#rdx#eff#N1 = 1 is the decision
touseradixsortinitsenergy-efficientvariantonserverN1.Thus,eachdecision
is represented by a variable. Each server is characterized by the variables time,
energy and frequency, which include the name of the server separated by a
pound. They denote the time required on, the energy spent by and the CPU
frequency used for the respective server.
The objective function of the ILP is a linear combination of the problem’s
variables. In the example, the objective function specifies the goal to minimize
the energy consumption of both servers for user requests to sort n elements.
Then, two types of constraints are generated for a specific request (e.g., the
invocation of sort for a list of 30 million elements as in the example above).
First, a structural constraint to ensure the selection of at least one variant is
generated (cf. line 3 and 4). Second, for each server variable (time, energy and
frequency)aconstraint,reflectingtheimpactofadecisiononthemisgenerated.
For example, the constraint in line 6 and 7 specifies that deciding for radix sort
in efficient mode on server N1 will require 1620ms, whereas using fast mode
will require only 1164ms. For energy consumption, the idle consumption has
to be considered in addition. The constraint on line 9 and 10 reflects an idle
consumption of 97J and the respective consumption of radix sort in the most
efficient and fastest mode. Considering the idle consumption is important if
the servers are always powered. The frequency constraint on line 12 and 13
reflects the minimum possible frequency (1200MHz), the sweet spot frequency
(1000+1200MHz), and the maximum possible frequency (1000+2000MHz).
5.3
0.3
]sm[ 5.2
emiT 0.2
srevreS
gnivloS 5.1
10 8 0.1 fo rebmuN
6 4 5.0
2
0 0.0
0 2 4 6 8 10
Number of Algorithms
Fig.6. Time to Compute Adaptation Decision.
Tosolvethisoptimizationproblem,standardsolverslikeLPSolve[16]canbe
applied. The time required to solve problems as shown in the example, depends
on the number of modes (i.e., execution variants) for which we used m = 2
representingthemostefficientandthefastestvariant,thenumberofalgorithms
for the same task A (e.g., different sort algorithms) and the number of servers
N. Fig. 6 shows the time required to solve ILPs with A = [1..10] algorithms
with 2 modes each on N = [2..10] servers. As can be seen, the time to derive
the decision is negligible. It took ≈3.1ms to identify which algorithm out of 10
to run on which of 10 servers.
5.4 Limitations
The approach we presented is feasible for Big Data intensive tasks since the
processing of one single task can take several minutes. For tasks with a short
duration (typically less that 2 seconds), managed by multi-process operating
systems, the approach is generally not, or at least not easily, applicable. If two
distinct data-intensive tasks have different sweet spot frequencies and the tasks
aremulti-tasked,theoperatingsystemneedstoswitchthesweetspotfrequencies
rapidly or choose the frequency that minimizes the overall energy consumption.
Nonetheless, the future generation of processors will most likely enable setting
the frequency of individual cores, making the sweet spot approach valid for a
broader type of tasks beyond data-intensive ones.
6 Related Work and Future work
TheclosestexistingresearchtoourworkwasconductedbyLivingstonetal.[3].
Their work classifies software applications as memory- and compute-bound. For
memory-bound applications, they demonstrate that a higher energy-efficiency
is achieved at lower CPU frequencies since memory behaves as a bottleneck.
Forcompute-boundapplications,ahigherenergy-efficiencyisachievedathigher
CPU frequencies since finishing work quickly is the best approach for efficiency.
Foralgorithmswhichcannotbepurelyclassifiedasmemory-orcompute-bound,
they propose to use sweet spot frequencies, a benchmarked optimal frequency
between the lowest and highest frequency. Our work confirms the findings by
Livingston et al. also in newer computer architectures and makes a detailed
analysis of sweet spot frequencies.
Other related work can be classified taking into account the level at which
energy-efficiency analysis was conducted. We use the terms macro-, meso-, and
micro-level to express studies conducted with large software applications, algo-
rithms, and instructions. At the macro-level, researchers (cf. [13]) have looked
intotheenergy-efficiencyoflargemanagementinformationsystemssuchasERP,
CRM, and databases. While it is important to look into the efficiency of such
systems to identify fields of improvements, the approach taken does not allow
to gather insights on how software could be re-engineered differently to obtain
energy reductions. At the meso-level, Bunse et al. [17] evaluate various sorting
algorithms in battery powered mobile communication using smartphones. The
resultsindicatethatinsertionsortismostefficient.Rivoireetal.[18]investigate
system-level benchmarks for sorting. Nonetheless, the work does not explore
the effect of CPU frequency on software energy-efficiency. At the micro-level,
Ong and Yan [19] use an abstract machine to study the energy consumption of
search and sorting algorithms. The energy requirement of each instruction was
estimated and, e.g., an ALU access consumes 8×10−12 joule per 32 bits. Their
Software Hardware
Programming
language
Code Instruction set
optimization (integer, fpoint, mm)
Hardware
Algorithm our work
periphery
Service context Data characteristics
(SLAs, preferences) (ranges)
Data centre
context (fuses,
Service energy contracts) Data
Fig.7. Dimensions and directions of energy-efficient software research.
findings indicate that the energy consumption can differ in orders of magnitude
between algorithms, and, also, that faster algorithms can sometimes consume
more energy than slower ones. In [20], the authors propose a first-order, linear
power estimation model that uses performance counters to estimate CPU and
memoryconsumption.Theaccuracyofthemodelestimatesconsumptionwithin
4% of the measured CPU consumption.
Ourlong-termresearchgoalistostudyhowenergy-efficientmechanismscan
be implementation as part of self-adaptive software and service systems that
change their behavior and implementation, and affect the computing environ-
menttoreduceenergyconsumption.Fig.7showsrelevantdimensionsofresearch
in this field.
7 Conclusion
Software applications for data analytics over Big Data typically have a high en-
ergyconsumption.Inthispaperwestudiedamechanismtomakedata-intensive
processing tasks more energy efficient. Our findings indicate that the existence
of CPU sweet spots can be explored in three ways: 1) by adapting the CPU fre-
quency to sweet spots, the maximum power used by data analytics tasks can be
established;2)theuseofsweetspotsleadstoeffectiveenergygainsofupto25%
; and 3) sweet spots enable the design of new and more efficient self-adaptive
softwarearchitectures.Ourresultsareimportant,especiallyforlargeclouddata
centers(e.g.,Facebook,LinkedIn,andTwitter),sincetheycanleadtothedesign
of new software and scheduling policies to reduce energy consumption of data
analytics and business intelligence applications.
Acknowledgements
ThisworkhasbeenpartiallyfundedbytheGermanResearchFoundation(DFG)
under project agreements SFB 912/1 2011 and SCHI 402/11-1.
This is an “executable” paper. All measurement results, executable source code
usedfortheexperiments,logsandtracescanbefoundonlineattheexperimental
results platform Areca7.
References
[1] J.Koomey.,“GrowthinDatacenterelectricityuse2005to2010,” AnalyticsPress,
2011. [Online]. Available: http://www.analyticspress.com/datacenters.html
[2] P. Zadrozny and R. Kodali, Big Data Analytics Using Splunk: Deriving
Operational Intelligence from Social Media, Machine Data, Existing Data
Warehouses, and Other Real-Time Streaming Sources. Apress, 2013. [Online].
Available: http://books.google.de/books?id=CK9AYF8WTsoC
[3] K. Livingston, N. Triquenaux, T. Fighiera, J. Beyler, and W. Jalby, “Computer
using too much power? give it a rest (runtime energy saving technology),”
ComputerScience-ResearchandDevelopment,pp.1–8,2012.[Online].Available:
http://dx.doi.org/10.1007/s00450-012-0226-0
[4] K. Choi, R. Soma, and M. Pedram, “Fine-Grained Dynamic Voltage and Fre-
quencyScalingforPreciseEnergyandPerformanceTrade-OffBasedontheRatio
of Off-Chip Access to On-Chip Computation Times,” in Proceedings of the con-
ferenceonDesign,automationandtestinEurope(DATE),February2004,Paris,
France.
[5] L.Brochard,R.Panda,andF.Thomas,“Powerconsumptionofclusters:Control
andOptimization,” IndustryTalkatFourthInternationalConferenceonEnergy-
Aware High Performance Computing (EnA-HPC), September 2013.
[6] D. Versick, I. Waßmann, and D. Tavangarian, “Power consumption estimation
of CPU and peripheral components in virtual machines,” ACM SIGAPP Applied
Computing Review, vol. 13, no. 3, pp. 17–25, September 2013.
[7] D. E. Knuth, The Art of Computer Programming. Addison-Wesley, 1998, vol. 3
- Sorting and Searching, 2nd Edition.
[8] H. Herodotou, H. Lim, G. Luo, N. Borisov, L. Dong, F. B. Cetin, and S. Babu,
“Starfish:Aself-tuningsystemforbigdataanalytics.” inCIDR,vol.11,2011,pp.
261–272.
[9] D. Hackenberg, T. Ilsche, R. Schone, D. Molka, M. Schmidt, and W. E. Nagel,
“Powermeasurementtechniquesonstandardcomputenodes:Aquantitativecom-
parison,” 2013 IEEE International Symposium on Performance Analysis of Sys-
tems and Software (ISPASS), vol. 0, pp. 194–204, 2013.
[10] R. Schöne, D. Hackenberg, and D. Molka, “Memory performance at reduced
cpu clock speeds: an analysis of current x86_64 processors,” in Proceedings
of the 2012 USENIX conference on Power-Aware Computing and Systems, ser.
HotPower’12. Berkeley,CA,USA:USENIXAssociation,2012,pp.9–9.[Online].
Available: http://dl.acm.org/citation.cfm?id=2387869.2387878
7 http://areca.co/26/The-Cost-of-Sorting
[11] M.P.I.Forum.(2012,Sep.)Mpi:Amessage-passinginterfacestandard-version
3.0. http://www.mpi-forum.org/docs/mpi-3.0/mpi30-report.pdf.
[12] ISO/IEC, “ISO/IEC 14882:2011: Programming languages – C++,” Tech. Rep.,
1998.
[13] E. Capra, C. Francalanci, and S. Slaughter, “Measuring application software en-
ergy efficiency,” IT Professional, vol. 14, no. 2, pp. 54–61, March 2012.
[14] ISO/IEC,“ISO/IEC25010:Systemsandsoftwareengineering-Systemsandsoft-
ware Quality Requirements and Evaluation (SQuaRE) - System and software
quality models,” Tech. Rep., 2010.
[15] S. Götz, C. Wilke, S. Richly, and U. Aßmann, “Approximating quality contracts
for energy auto-tuning software,” in Proceedings of First International Workshop
on Green and Sustainable Software (GREENS 2012), 2012.
[16] K. Eikland and P. Notebaert, “LP Solve 5.5 reference guide,”
http://lpsolve.sourceforge.net/5.5/ (access on 26.11.2012).
[17] C.Bunse,H.Höpfner,S.Roychoudhury,andE.Mansour,“Choosingthebestsort-
ingalgorithmforoptimalenergyconsumption,”inProceedingsoftheInternational
Conference on Software and Data Technologies (ICSOFT), 2009, pp. 199–206.
[18] S. Rivoire, M. A. Shah, P. Ranganathan, and C. Kozyrakis, “Joulesort: A bal-
anced energy-efficiency benchmark,” in Proceedings of the ACM SIGMOD Intl.
Conference on Management of Data (SIGMOD), 2007.
[19] P.-W.OngandR.-H.Yan,“Power-conscioussoftwaredesign-aframeworkformod-
elingsoftwareonhardware,” inLow Power Electronics, 1994. Digest of Technical
Papers., IEEE Symposium, Oct 1994, pp. 36–37.
[20] G.ContrerasandM.Martonosi,“Powerpredictionforintelxscalereg;processors
usingperformancemonitoringunitevents,” inLowPowerElectronicsandDesign,
2005. ISLPED ’05. Proceedings of the 2005 International Symposium on, Aug
2005, pp. 221–226.