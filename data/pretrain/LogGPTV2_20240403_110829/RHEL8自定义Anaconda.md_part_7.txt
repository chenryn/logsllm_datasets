# []{#developing-installer-add-ons_customizing-anaconda.html#tui-add-on-basic-features_developing-installer-add-ons}TUI 附加组件基本特性 {.title}
:::
Anaconda
还支持基于文本的接口(TUI)。这个界面的功能有更多限制，但在某些系统上，它可能是交互式安装的唯一选择。有关基于文本的界面和图形界面以及
TUI 限制之间的区别的更多信息，请参阅 ["Anaconda
和附加组件介绍"一节](#developing-installer-add-ons_customizing-anaconda.html#introduction-to-anaconda-and-add-ons_developing-installer-add-ons "Anaconda 和附加组件介绍"){.xref}。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
要在您的附加组件中添加对文本界面的支持，请在 tui
目录下创建新的子软件包集合，如 ["Anaconda
附加组件结构"一节](#developing-installer-add-ons_customizing-anaconda.html#anaconda-add-on-structure_developing-installer-add-ons "Anaconda 附加组件结构"){.xref}
所述。
:::
安装程序中支持的文本模式基于 `simpleline`{.literal}
库，该库仅允许非常简单的用户交互。文本模式界面：
::: itemizedlist
-   不支持光标移动 - 相反，其作用类似于行打印机。
-   不支持任何视觉增强功能，例如使用不同的颜色或字体。
:::
在内部，`简单行`{.literal} 工具包有三个主要类：
`App`{.literal}、`UIScreen`{.literal} 和
`Widget`{.literal}。小部件是包含要在屏幕上打印信息的单元。它们被放置在
UIScreens 中，由 App 类的单一实例切换。在基本元素上，`hub`{.literal}
`s、spoke 和 'dialogs 都`{.literal} 以类似图形界面的方式包含各种小部件。
附加组件最重要的类是 `NormalTUISpoke`{.literal} 和
`pyanaconda.ui.tui.spokes`{.literal}
软件包中定义的各种类。所有这些类都基于 `TUIObject`{.literal}
类，它本身等同于 [???](){.xref} 中讨论的 `GUIObject`{.literal} 类。每个
TUI spoke 都是从 `NormalTUISpoke 类继承的`{.literal} Python 类，覆盖 API
定义的特殊参数和方法。因为文本界面比 GUI 简单，所以只有两个这样的参数：
::: itemizedlist
-   `标题`{.literal} - 确定 spoke 的标题，类似于 GUI 中的标题参数.
-   `category`{.literal} - 将 spoke
    类别确定为字符串；类别名称不显示在任何位置，它仅用于分组。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
TUI 处理类别与 GUI 不同。建议为您的新 spoke
分配预先存在的类别。创建新类别需要修补 Anaconda，这不会带来任何好处。
:::
每个 spoke 也都应该覆盖多种方法，即
`init`{.literal}、`初始化`{.literal}、`刷新`{.literal}
``{.literal}、`应用`{.literal}、`执行`{.literal}、`输入`{.literal}、`提示`{.literal}
和 `属性`{.literal}
（`ready`{.literal}、`已完成`{.literal}、`强制`{.literal} 和
`状态`{.literal}）。
::: itemizedlist
**其它资源**
-   请参阅
    ["添加对附加图形用户界面(GUI)的支持"一节](#developing-installer-add-ons_customizing-anaconda.html#adding-support-for-the-add-on-graphical-user-interface-gui_developing-installer-add-ons "添加对附加图形用户界面(GUI)的支持"){.xref}。
:::
:::
::: section
::: titlepage
# []{#developing-installer-add-ons_customizing-anaconda.html#defining-a-simple-tui-spoke_developing-installer-add-ons}定义简单 TUI Spoke {.title}
:::
以下示例演示了在 Hello World
示例附加组件中实施简单的文本用户界面(TUI)发言人：
::: itemizedlist
**先决条件**
-   您已在 tui 目录下创建了一组新的子软件包，如 ["Anaconda
    附加组件结构"一节](#developing-installer-add-ons_customizing-anaconda.html#anaconda-add-on-structure_developing-installer-add-ons "Anaconda 附加组件结构"){.xref}
    所述。
:::
::: itemizedlist
**流程**
-   根据以下示例，使用所有必要的定义创建模块来添加对附加文本用户界面(TUI)的支持：
:::
::: example
[]{#developing-installer-add-ons_customizing-anaconda.html#def-simple-TUI}
**例 4.10. 定义简单 TUI Spoke**
::: example-contents
``` literallayout
def init(self, app, data, storage, payload, instclass):
    """
    :see: simpleline.render.screen.UIScreen
    :param data: data object passed to every spoke to load/store data
                 from/to it
    :type data: pykickstart.base.BaseHandler
    :param storage: dummy object storing storage-related information
     :type storage: blivet.Blivet
    :param payload: object storing packaging-related information
    :type payload: pyanaconda.packaging.Payload
    """
    NormalTUISpoke.init(self, data, storage, payload)
    self.title = N_("Hello World")
    self._container = None
    self._hello_world_module = HELLO_WORLD.get_proxy()
    self._reverse = False
    self._entered_text = ""
def initialize(self):
    """
    The initialize method that is called after the instance is created.
    The difference between init and this method is that this may take
    a long time and thus could be called in a separate thread.
    :see: pyanaconda.ui.common.UIObject.initialize
    """
    NormalTUISpoke.initialize(self)
    self._reverse = self._hello_world_module.Reverse
    self._entered_text = "".join(self._hello_world_module.Lines)
def refresh(self, args=None):
    """
    The refresh method that is called every time the spoke is displayed.
    It should update the UI elements according to the contents of
    internal data structures.
    :see: pyanaconda.ui.common.UIObject.refresh
    :see: simpleline.render.screen.UIScreen.refresh
    :param args: optional argument that may be used when the screen is
                 scheduled
    :type args: anything
    """
    self._reverse = self._hello_world_module.Reverse
    self._entered_text = "".join(self._hello_world_module.Lines)
    self._container = ListColumnContainer(columns=1)
    self.window.add(self._container)
    self._container.add(CheckboxWidget(title="Reverse", completed=self._reverse),
                                   callback=self._change_reverse)
    self._container.add(EntryWidget(title="Hello world text", value=self._entered_text),
                                   callback=self._change_lines)
    self._window.add_separator()
def apply(self):
    """
    The apply method that is called when the spoke is left. It should
    update the contents of internal data structures with values set in the spoke.
    """
    self._hello_world_module.SetReverse(self._reverse)
    lines = self._entered_text.splitlines(True)
    self._hello_world_module.SetLines(lines)
def execute(self):
    """
    The execute method that is called when the spoke is left. It is
    supposed to do all changes to the runtime environment according to
    the values set in the spoke.
    """
    # nothing to do here
    pass
def input(self, args, key):
    """
    The input method that is called by the main loop on user's input.
    :param args: optional argument that may be used when the screen is
                 scheduled
    :type args: anything
    :param key: user's input
    :type key: unicode
    :return: if the input should not be handled here, return it, otherwise
                 return InputState.PROCESSED or InputState.DISCARDED if the input was
                 processed successfully or not respectively
    :rtype: enum InputState
    """
    if self._container.process_user_input(key):
        return InputState.PROCESSED_AND_REDRAW
    else:
        return super().input(args=args, key=key)
```
:::
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
如果 `init 方法仅调用 ancestor 的 init`{.literal}，则不需要覆盖
`init`{.literal} 方法，但示例中的注释描述了以明确的方式传递给 spoke
类构造器的参数。
:::
在上例中：
::: itemizedlist
-   `初始化`{.literal} 方法为 spoke
    的内部属性设置默认值，然后通过刷新方法更新，供应用方法用于更新内部数据结构。
-   `执行方法`{.literal} 具有与 GUI
    中等效方法相同的目的；在本例中，该方法无效。
-   `输入`{.literal} 法特定于文本界面；Kickstart 或 GUI
    中没有等效项。`输入`{.literal} 法负责用户交互。
-   `输入`{.literal}
    法处理输入的字符串，并根据其类型和值采取措施。上例询问了任何值，然后将它存储为内部属性（密钥）。在更复杂的附加组件中，您通常需要执行一些非特权操作，如解析字母作为操作、将数字转换为整数、显示额外屏幕或切换布尔值。
-   输入类的 `返回`{.literal} 值必须是 `InputState`{.literal} 枚举或
    `输入`{.literal}
    字符串本身，如果此输入应该由不同的屏幕处理。与图形模式相反，离开
    spoke 时不会自动调用 `应用`{.literal}
    方法；必须从输入法明确调用它。同样适用于关闭（隐藏） spoke
    屏幕：必须从 `关闭`{.literal} 方法显式调用它。
:::
若要显示另一个屏幕，例如，您需要在不同的发言人中输入的附加信息，您可以实例化另一个
`TUIObject 并使用`{.literal}
`ScreenHandler.push_screen_modal（）`{.literal} 显示它。
由于基于文本界面的限制，TUI
发言人的结构往往非常相似，它由应选中或取消选中并由用户填充的复选框或条目组成。
:::
::: section
::: titlepage
# []{#developing-installer-add-ons_customizing-anaconda.html#using-normaltuispoke-to-define-a-text-interface-spoke_developing-installer-add-ons}使用 NormalTUISpoke 定义文本接口 Spoke {.title}
:::
["定义简单 TUI
Spoke"一节](#developing-installer-add-ons_customizing-anaconda.html#defining-a-simple-tui-spoke_developing-installer-add-ons "定义简单 TUI Spoke"){.xref}
示例演示了实现 TUI
发言人的方法，其方法处理打印和处理可用的和提供的数据。但是，使用
`pyanaconda.ui.tui.spokes`{.literal} 包中的
`Normal EditTUISpoke`{.literal}
类来实现这一目标。通过继承此类，您只需指定应在其中设置的字段和属性，即可实施典型的
TUI 发言人。以下示例演示了这一点：
::: itemizedlist
**先决条件**
-   您已在 `TUI`{.literal} 目录下添加了一组新的子软件包，如 ["Anaconda
    附加组件结构"一节](#developing-installer-add-ons_customizing-anaconda.html#anaconda-add-on-structure_developing-installer-add-ons "Anaconda 附加组件结构"){.xref}
    所述。
:::
::: itemizedlist
**流程**
-   根据以下示例，创建包含所有必要定义的模块，以添加对 Add-on
    文本用户界面(TUI)的支持。
:::
::: example
[]{#developing-installer-add-ons_customizing-anaconda.html#us-normal-TUI-spoke}
**例 4.11. 使用 NormalTUISpoke 定义文本接口 Spoke**
::: example-contents
``` literallayout
class HelloWorldEditSpoke(NormalTUISpoke):
    """Example class demonstrating usage of editing in TUI"""
    category = HelloWorldCategory
    def init(self, data, storage, payload):
        """
        :see: simpleline.render.screen.UIScreen
        :param data: data object passed to every spoke to load/store data
                     from/to it
        :type data: pykickstart.base.BaseHandler
        :param storage: object storing storage-related information
                        (disks, partitioning, bootloader, etc.)
        :type storage: blivet.Blivet
        :param payload: object storing packaging-related information
        :type payload: pyanaconda.packaging.Payload
        """
        NormalTUISpoke.init(self, data, storage, payload)
        self.title = N_("Hello World Edit")
        self._container = None
        # values for user to set
        self._checked = False
        self._unconditional_input = ""
        self._conditional_input = ""
    def refresh(self, args=None):
        """
        The refresh method that is called every time the spoke is displayed.
        It should update the UI elements according to the contents of
        self.data.
        :see: pyanaconda.ui.common.UIObject.refresh
        :see: simpleline.render.screen.UIScreen.refresh
        :param args: optional argument that may be used when the screen is
                     scheduled
        :type args: anything
        """
        super().refresh(args)
        self._container = ListColumnContainer(columns=1)
        # add ListColumnContainer to window (main window container)
        # this will automatically add numbering and will call callbacks when required
        self.window.add(self._container)
        self._container.add(CheckboxWidget(title="Simple checkbox", completed=self._checked),
                            callback=self._checkbox_called)
        self._container.add(EntryWidget(title="Unconditional text input",
                                        value=self._unconditional_input),
                            callback=self._get_unconditional_input)
        # show conditional input only if the checkbox is checked
        if self._checked:
            self._container.add(EntryWidget(title="Conditional password input",
                                            value="Password set" if self._conditional_input
                                            else ""),
                                callback=self._get_conditional_input)
        self._window.add_separator()
    @property
    def completed(self):
        # completed if user entered something non-empty to the Conditioned input
        return bool(self._conditional_input)
    @property
    def status(self):