another private API called allApplications() in the Mo-
bileCoreServices.framework . This private API can be
used to get all the bundle IDs of installed apps which in-
clude both running and unstarted apps. After getting the
installed app list, hackers can sell them to analytic or ad-
vertisement companies, or hackers can analyze and exploit
vulnerabilities of these installed apps so to launch persistent
attack on these devices.
6.1.3 User Events Monitoring and Controlling
We encountered another interesting enpublic app called “i-
Control”. This app can monitor and control user events (e.g.,
touches on the screen, home button press and volume button
press) in the background on iOS 5.X and 6.X. For monitor-
ing, it uses the GSEventRegisterEventCallBack() method
of GraphicsServices.framework to register call backs for
system wide user events. After that, every user event will
invoke this call back method. In this call back, the app can
get the user event information by parsing the IOHIDEven-
tRef structure. For controlling, the app ﬁrst uses SBFront-
mostApplicationDisplayIdentifier() method of Spring-
BoardServices.framework to get the app at the front. After
that, the app uses GSSendEvent() method of GraphicsSer-
vices.framework to send the user events to the front app.
Attackers can use such mechanisms for malicious purposes.
For example, potential attackers can use such information to
reconstruct every character the victim inputs (e.g., stealing
user’s password). In addition, attackers can use this app as
a trojan to control the victim’s non-jailbroken phone from
remote.
Fortunately, Apple ﬁxed these monitoring and controlling
private APIs on iOS 7.0 by adding permission controls. How-
ever, after analyzing the private APIs of IOKit.framework ,
we have discovered another call back registration method of
user events: IOHIDEventSystemClientRegisterEventCall-
back(). After registration, the app can still monitoring the
system wide user events in the background on iOS 7.0. We
have reported this issue to Apple. Apple applied a CVE
(Common Vulnerabilities and Exposures) for us [8] and ﬁxed
this ﬂaw on iOS 7.1.
6.1.4
iOS 3rd-party App Installation and 3rd-party
Markets
It is diﬀerent from Cydia which targets only jailbroken
devices, we have found several 3rd-party app markets (e.g.,
SearchForApp and Rabbit Assistant) which target both non-
jailbroken and jailbroken iOS devices. These markets are
enpublic apps and these apps use similar techniques for app
management and installation. For app management, these
apps use MobileInstallationLookup() method of Mobile-
Installation.framework to get the pList information of in-
stalled apps from the iOS system. After that, they use SB-
SCopyLocalizedApplicationNameForDisplayIdentifier method
and SBSCopyIconImagePNGDataForDisplayIdentifier method
of SpringBoardServices.framework to get the app names
and icons. For app installation, it is interesting that these
market apps have several ways to install 3rd-party apps on
both jailbroken and non-jailbroken iOS devices. For jail-
broken iOS devices, since there is no app signature veriﬁ-
cation, they use MobileInstallationInstall method and
MobileInstallationUninstall method of MobileInstal-
lation.framework to install and uninstall other 3rd-party
apps. For non-jailbroken iOS devices, these market apps
use “itms-services” (mentioned in Sec. 2) to install oth-
er enpublic apps or pirated apps. Because some companies
release their apps in enterprise/developer version for beta
testing, these 3rd-party app markets collected them and re-
lease them on their markets. Although customers can get
the apps for free on non-jailbroken devices, they are tak-
ing high security risks (e.g., personal information leakage,
remotely monitoring and control) of using these apps. For
more discussion about pirated apps, please refer to Sec. 7.
6.1.5 Phishing Attack and Unlimited Background Run-
ning
We have found another interesting enpublic app called
“Buddy Pro”. This is an app which can get the location
of incoming phone calls. It has several interesting features:
First, it can run in the background forever. Second, it can
auto start after system rebooting. Thirdly, it can pop up
a dialog on the incoming call screen to show the location
information. These features are dangerous in that a hack-
er can use them to launch a phishing attack on the user.
Note that running app in the background is very important
for phishing apps, because the app needs to stay alive for
monitoring sensitive information (e.g., keystrokes or ﬁnger
movement). However, in iOS, all running tasks are under
a strict time limit (around 600 seconds for iOS 6 and 180
seconds for iOS 7/8) for processing.
By analyzing the app using our system, we ﬁnd two ways
for the app to run in the background forever and one way
for the app to auto start after rebooting:
• The app can use AVAudioPlayer to play a silent mu-
sic in the background and uses a property called Au-
dioSessionProperty_OverrideCategoryMixWithOthers.
By using this property, the silent music can be played
with other music without being detected. In addition,
the app will not appear on the music panel. Hence,
the app can run continuously without being detected.
• The app can use two undocumented UIBackground-
Modes, Continuous and unboundedTaskCompletion, to
run in the system background forever. Generally s-
peaking these two undocumented UIBackgroundModes
can only be used by system apps, so third-party apps
cannot bypass the App Store review if they use un-
documented UIBackgroundModes. However, authors
in [35, 27] showed that it is possible to bypass the re-
view process and it would be dangerous that an app
can monitor phone call events in the background forv-
er.
• The app can use a UIBackgroundMode called VOIP
(Voice -Over -Internet Protocol) to start automatical-
ly after the system rebooting. Because an app VOIP
needs to maintain a persistent network connection so
that it can receive incoming calls and other relevan-
t data.
In order to ensure that the VOIP services
Figure 7: Real AppStore Login Dialog
Figure 8: Fake AppStore Login Dialog
are always available, the iOS system will relaunch the
VOIP app in the background immediately after sys-
tem boot. Therefore, unless the customer terminates
the app manually, the app can always monitor phone
call events even after rebooting the device.
In “Buddy Pro” app, we have found two dangerous private
API calls : CFUserNotificationCreate() and CFUserNoti-
ficationReceiveResponse() of CoreFoundation.framework
. These two private APIs can create and pop up interactive
dialogs on the foremost screen and then receive user’s re-
sponse. Unlike UIAlertView class, the app can only pop up
dialogs on its own screen. Using CFUserNotificationCre-
ate() and CFUserNotificationReceiveResponse(), one ap-
p can always pop up dialogs to the foremost screen (includes
other apps’ screen and home screen) in the background. This
is very dangerous, because hackers can easily build a “phish-
ing” app to steal users’ accounts. In order to demonstrate,
we built an example “phishing” app. This “phishing” app
can pop up a fake login dialog (to diﬀerentiate, we changed
the letter “K” to lower case) in the AppStore app (Fig. 7
and Fig. 8).
In addition, we built such a “phishing” app
and disguised it as the Twitter app. If the user opens this
“phishing” app, it will run in the background forever and
it will auto start after rebooting. In addition, it will moni-
tor the runtime process information of the system. What’s
more, by using the “CVE-2014-4423” vulnerability [23], the
”phishing” could get information about the currently-active
iCloud account, including the name of the account. When
the user opens the AppStore app, it will pop up a fake login
dialog on the foremost screen. After the user enters his pass-
word, the “phishing” app will send the user’s password to the
remote server. Note that the demo used the 7.1 version of
iOS system on a non-jailbroken iPhone 5s device.
6.2 App Vulnerabilities Statistics and Case S-
tudies
Within the 1408 enpublic apps, we have found 14 (1%)
apps containing URL scheme vulnerabilities. Most of the
scheme vulnerabilities crash the corresponding app. Howev-
er, there are two interesting cases, “PandaSpace” and “iDe-
vice Tool” that may become targets for exploits. For sen-
sitive information leakage, 901 (64%) enpublic apps trans-
form sensitive information through unencrypted HTTP or
store the information in plain text on the phone. Tab. 4
shows the statistics of UDID, MAC address, IMEI, IMSI,
telephone number, GPS (Global Position System), installed
app list and password leakage through HTTP and local data
storage. After obtaining the personal information, hackers
can sell them to analytic or advertisement companies. In ad-
dition, they can implement advanced persistent attack after
getting the installed app list or password.
Unencrypted Data # of apps % of apps
UDID
MAC address
IMEI
IMSI
Telephone number
GPS
Installed app list
Password
50.3%
20.3%
10.8%
3.1%
9.5%
5.8%
6.0%
0.3%
453
183
97
28
86
52
54
3
Table 4: Statistics of Unencrypted Data Leakage
6.2.1 Remotely Install 3rd-party Apps
“PandaSpace” is a 3rd-party market app. As we men-
tioned before, these 3rd-party markets are enpublic apps
which can manage and install other 3rd-party apps. We
found that attackers can remotely exploit the URL scheme
vulnerability of “PandaSpace” to install any 3rd-party apps
on jailbroken iOS devices. By parsing the .plist ﬁle, we
found “PandaSpace” contains URL schemes. We recursively
scan the private API calls in the handleOpenURL() method
of the app. We found a dangerous API call, MobileInstal-
lationInstall(), in the handle URL scheme method. After
that, we analyzed the handleOpenURL() function of “Pan-
daSpace” manually. We found that when “PandaSpace” re-
ceives a valid .ipa ﬁle download URL, it will download the
.ipa ﬁle from this URL and then install it on the device.
Attackers may use this URL scheme to install other apps on
victims’ iOS devices. For example, attackers can create a
malicious website with the following HTML script:
When victims visit this malicious webiste using Safari,
“PandaSpace” will download the app and install it on the
phone. Although using the URL scheme vulnerability of
“PandaSpace” can not directly install 3rd-party apps on a
non-jailbroken iOS devices, attackers can use this vulnera-
bility to trick users to install other enpublic apps.
6.2.2
“iDevice Tool” is an enpublic app used by developers to
debug iOS systems. It uses several private APIs to gain sys-
tem information (e.g., UDID, mac address and system logs).
We found that hackers can use the URL scheme vulnerabil-
ity of “iDevice Tool” to email all the system information to
a speciﬁc email address. For example, when the user visits
a malicious website with the following content:
System Log Leakage
“iDevice Tool” will send the system log of “AppName” to
the email address, “PI:EMAIL”.
6.2.3 Location Information Leakage
“Sina weather forecast” is a weather report app.
It has
both App Store version and enterprise version. In the en-
terprise version, it uses GPS (Global Positioning System) to
get the location of the user and then uses private API to
get the system information (e.g., UDID) of the device. Af-
ter that, it sends these sensitive information to its server in
plain text. For example, here is the captured HTTP request:
POST http://forecast.sina.cn/app/update.php?device
=iPhone&uid=32aee18d40fcb4c24e5988c76b4e9f0
d84fb8***&os=ios6.1.2&city=CHXX0***&pver=3.249
&pt=2&token=ff0007a31c005916d5e45b360481f1
1e05b40f010405731e94c8&pid=free
This HTTP leaks the UDID (“32aee18d40fcb4c24e5988c-
76b4e9f0d84fb8***”), iOS version (“6.1.2”) and location in-
formation ( the city number, “CHXX0***” ). If the server’s
information is leaked (e.g., through heart bleed attack), at-
tackers can easily get the user’s location through the UDID.
6.2.4 Username and Password Leakage
“eHi Taxi” is an iOS app providing services to call a tax-
i. It provides an App Store version and also an enterprise
version. However, both versions have the same vulnerability
that they transfer the user’s phone number, name and pass-
word in plain text through HTTP, as shown in the captured
HTTP post:
POST: http://myehilogin.1hai.cn/Customer/Login/Log-
inMobile
TextView: LoginName=5109318***&LoginPassword=pass***
Hence, attackers can easily sniﬀ and harvest these private
information. After getting user’s account, hackers can call
taxis using victim’s money. In addition, the victim may use
the same account for other apps. Therefore, hackers may
launch advanced persistent attack to these devices. Note
that this vulnerability is not speciﬁc to enpublic apps.
7. DISCUSSION
In this section, we ﬁrst discuss about pirated apps on iOS.
Then we discuss the limitation of our system and possible
improvements.
7.1 Pirated Apps on Non–jailbroken iOS De-
vices
As we mentioned in Sec. 2, iOS apps have four distribu-
tion ways: test apps on iOS devices, App Store, ad hoc and
in–house channels. The ﬁrst distribution channel is for de-
bugging iOS apps only, developers need to use XCode and
USB connection to install iOS apps. Customers usually in-
stall iOS apps from the second channel, the Apple Store.
Given that Apple has the review process for apps on Ap-
p Store, we assume apps on Apple Store are genuine ones.
However, pirated apps can use ad hoc and in–house channels
to distribute to non–jailbroken iOS devices. For example, a
malware developer can extract a paid iOS app from a jail-
broken iOS device and package it into an .ipa ﬁle. He or she
can then use the developer key from iOS developer program
or iOS enterprise program to resign the .ipa ﬁle. After that
customers may install the pirated apps through iTunes or
itms–services without paying for them. In addition, because
hackers have already reverse engineered the iTunes proto-
col, so that they can install the .ipa ﬁles on non–jailbroken
iOS devices without iTunes [17] [16]. Although ad hoc dis-
tribution has a 100 device install limit, hackers can rename
the Bundle name of the app, iTunes will then treat the re-
named app as a new app with another 100 device limitation.
Therefore, hackers can use this method to attract customers
to download free pirated apps which are not free in Apple
Store from their third–party markets, and then use adver-
tisement to gain money. In this case, both iOS developers
for the original app and Apple become victims.
7.2 Limitation and Future Work
Because enterprise iOS apps observe no regulation on us-
ing dynamic loading techniques, it is diﬃcult for traditional
static analysis methodologies to get the payload behavior be-
fore execution. Therefore, our system uses dynamic analysis
to handle the dynamic loading behavior. However, dynamic
analysis may not have a good code coverage since an app
may have hundreds or thousands execution paths. Dynamic
analysis can only explore a single execution path at a time
and it is hard for the dynamic analysis system to trigger the
expected result without the right input. Currently, we use
simple behavior trigger techniques (e.g., launching the app,
making a telephone call and locking the screen), so iAnalyt-
ics cannot guarantee complete code coverage of all dynamic
loading behaviors. A possible improvement is to perform
symbolic execution to compute all of the feasible paths and
we are considering this in our future work.
For unencrypted sensitive information leakage, we only fo-
cus on the HTTP protocol and plain text data. However,
apps may use other protocols to transfer unencrypted da-
ta or simple encrypted data through network sockets.
In
addition, iOS system has several internal communication
techniques (e.g., shared keychain access and custom URL
scheme). If the app does not encrypt the data or it has a
faulty logic design, it is possible for other apps to sniﬀ or
hijack the exchanged data. For capturing sockets and the
data of internal communication, the system needs to pro-
vide hooking service on the related methods, triggering the
behavior, having simple decryption engine and determining
the transferred data structure. We plan to address such ex-
tension in our future work.
8. RELATED WORK
There have been number of works which aim to bypass the
code signing and app review process of Apple App Store.
A common method is to Jailbreak [31][10][28] the system
so to obtain the root privilege and permanently disable the
code signing mechanism. In addition, hackers distribute iOS
malware on jailbroken devices [32]. Although jailbreaking is
feasible [26], it is getting more and more diﬃcult because
Apple actively ﬁxes known vulnerabilities and iOS becomes
more mature. Despite the increasing diﬃculty of exploiting
iOS, our ﬁndings show that it is possible to distribute apps