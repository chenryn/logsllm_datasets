### 6.6.3 Conflict Detection

This section discusses the synchronization process and conflict detection in EDB Postgres Replication Server.

#### Synchronization Process
When synchronization replication occurs, either on demand or on a scheduled basis, changes from one master node are pushed to other master nodes. For more information on this process, see Section 2.2.11.

#### Conflict Detection in a 3-Node Example
To illustrate the conflict detection process, consider a 3-node example with master nodes A, B, and C.

1. **Loading Pending Transactions:**
   - The replication server loads the first set of pending transactions from master node A. Transactions are processed in sets to avoid loading a large number of rows into memory, which could cause heap space issues.
   
2. **Update Transaction:**
   - For an update transaction, the replication server queries the target master node (e.g., node B) to load the related row.
   - If the old column value on the source master node (A) is different from the current column value on the target master node (B), the transaction is marked as an update/update conflict.
   - If the related row is not found on the target master node, it is marked as an update/delete conflict.

3. **Delete Transaction:**
   - For a delete transaction, the replication server queries the target master node to load the related row.
   - If the related row is not found on the target master node, the transaction is marked as a delete/delete conflict.

4. **Logging Conflicts:**
   - When a conflict is detected, the conflict information (transaction ID, conflict type, and detection timestamp) is logged in the conflict table on the target master node.

5. **Conflict Resolution:**
   - The replication server checks if a conflict resolution strategy has been selected for the specific table.
   - If a strategy is found, it is applied, and the conflict status is marked as resolved.
   - If no strategy can be applied, the conflict status is marked as unresolved (or pending).

6. **Replicating Changes:**
   - If no conflict is detected, the transactional change is replicated to the target master node, and the transaction status for that target node is marked as completed in the source master node's control schema.
   - A transaction status mapping for each target master node is maintained on all master nodes. For example, node A contains two mappings of status – one for node B and another for node C.

7. **Repeating the Process:**
   - The above steps are repeated to process and replicate all pending transaction sets from master node A to master node B.
   - Next, the publication server replicates the pending transactional changes from master node A to the next target master node, C.
   - Once the changes from master node A are replicated to nodes B and C, the publication server replicates the pending changes from master node B to nodes A and C.
   - Finally, the changes from master node C are replicated to nodes A and B.

### 6.6.4 Conflict Resolution Strategies

Several built-in conflict resolution options are available to support automatic conflict resolution. These options are applicable to update/update and delete/delete conflicts. Uniqueness (insert/insert), update/delete, and delete/update conflicts are marked as unresolved and must be manually reconciled.

#### Built-In Conflict Resolution Options

1. **Earliest Timestamp:**
   - The row changes involved in an update conflict are compared based on the timestamp of when the update occurred on each node. The row change that occurred earliest is applied, and the later changes are discarded.

2. **Latest Timestamp:**
   - Similar to the earliest timestamp option, but the row change with the latest timestamp is accepted, and the earlier changes are discarded.

3. **Node Priority:**
   - The row change from the master node with the highest priority level is applied, while the changes from lower priority nodes are discarded. The node priority level is an integer ranging from 1 to 10, where 1 is the highest priority and 10 is the lowest.

4. **Custom:**
   - Custom conflict handling applies only to update/update conflicts. You must supply a PL/pgSQL program to resolve any conflicts. See Section 6.6.8 for more information on using custom conflict handling.

#### Delete/Delete Conflict
- A delete/delete conflict is always resolved implicitly, regardless of the conflict resolution option. The net impact is the removal of the given row, which has already been removed from both the source and target nodes.

#### Tracking Transaction Timestamps
- For the earliest and latest timestamp conflict resolution strategies, the transaction timestamp is tracked in a column with the `TIMESTAMP` data type in the shadow table.

#### Changing Conflict Resolution Strategy
- The conflict resolution strategy for a given table can be changed to a different strategy. See Section 6.8 for more details.

### 6.6.5 Conflict Prevention – Uniqueness Case

Since there is no automatic built-in resolution strategy for uniqueness conflicts, this section discusses strategies to prevent such conflicts. These strategies are typically implemented by the DBA and are based on numeric values generated by a sequence, such as for a unique primary key.

#### Possible Strategies

1. **Node-Specific Sequence Range:**
   - Reserve a sequence range for each master node. For example, master node A would have a MINVALUE of 1 and a MAXVALUE of 1000, master node B would have a MINVALUE of 1001 and a MAXVALUE of 2000, and so on. This ensures that a unique ID is always generated across all master nodes.

2. **Start Value Variation:**
   - Assign a different start value to each node. For example, master node A would have a START value of 1, node B would have 2, and node C would have 3. An increment greater than or equal to the number of nodes guarantees unique IDs.

3. **Common Sequence:**
   - All nodes share a common sequence object. However, this approach slows down transaction processing due to network round-trips associated with each ID generation.

4. **MMR-Ready Sequence:**
   - This technique enhances the use of sequences and provides a more flexible, reliable approach for a distributed, multiple database architecture. It is recommended over the previously listed sequence techniques. See Section 6.6.6 for more information.

### 6.6.6 Conflict Prevention with an MMR-Ready Sequence

An MMR-ready sequence can be used to generate unique identifiers for each row in publication tables that do not have an inherent, unique identifier. This sequence incorporates a function and a sequence to return `BIGINT` data type, integer values, combining a user-assigned, unique database identifier for each master node with a sequence generated within that master node.

#### Characteristics of an MMR-Ready Sequence

1. **Uniqueness:**
   - The combination of the unique database identifier with the sequence ensures that each row in a given table will have a unique value across all master nodes.

2. **Clustered Index Support:**
   - An MMR-ready sequence does not impair the usage of a clustered index to provide retrieval efficiency. MMR-ready sequence values are returned in a typical, ordered sequence, not as random values like UUIDs.

3. **Effective Migration Support:**
   - Tables already utilizing a sequence can be modified to use an MMR-ready sequence with minimal impact on existing primary keys and foreign keys.

4. **Reliability and Maintainability:**
   - In summary, an MMR-ready sequence provides a reliable and maintainable method to avoid uniqueness conflicts.

### 6.6.6.1 Creating an MMR-Ready Sequence

The following steps outline how to create an MMR-ready sequence in a database to participate as a master node in a multi-master replication system. Begin these steps with the database to be used as the master definition node.

1. **Assign a Unique Database Identifier:**
   - Assign a unique, database identifier as an integer from 1 to 1024, inclusive. Issue the following commands to create and set the database identifier:
     ```sql
     ALTER DATABASE dbname SET cluster.unique_db_id TO db_id;
     SET cluster.unique_db_id TO db_id;
     ```
   - Use a different `db_id` value for each database.

2. **Create a Sequence:**
   - Create a sequence to uniquely identify each table row within the database:
     ```sql
     CREATE SEQUENCE seq_name START WITH 1 INCREMENT BY 1 NO CYCLE;
     ```
   - Multiple sequences can be created if it is desired to use separate sequences for multiple tables within the publication. Ensure the same sequence name is used across all databases for the same given table.

3. **Create the MMR-Ready Sequence Function:**
   - Create the following function that returns the next MMR-ready sequence value when a row is inserted into the table:
     ```sql
     CREATE OR REPLACE FUNCTION mmr_sequence_nextval (
       seq_id VARCHAR
     )
     RETURNS bigint
     LANGUAGE sql
     AS
     $function$
     SELECT (
       (SELECT current_setting('cluster.unique_db_id'))::bigint
       << 52)::bigint +
       nextval($1::regclass);
     $function$;
     ```
   - The sequence name created in Step 2 is specified as the `seq_id` input argument when the function is added to the DEFAULT clause of the publication table column.

4. **(Optional) Create a Function to Obtain the Current MMR-Ready Sequence Value:**
   - Create the following function to obtain the current MMR-ready sequence value:
     ```sql
     CREATE OR REPLACE FUNCTION mmr_sequence_currval (
       seq_id VARCHAR
     )
     RETURNS bigint
     LANGUAGE sql
     AS
     $function$
     SELECT (
       (SELECT current_setting('cluster.unique_db_id'))::bigint
       << 52)::bigint +
       currval($1::regclass);
     $function$;
     ```
   - The `mmr_sequence_nextval` function must be invoked in the current session before calling the `mmr_sequence_currval` function.

5. **Add or Modify the Publication Table Column:**
   - Add or modify the publication table column that is to use the MMR-ready sequence. The column data type must be `BIGINT`. The `mmr_sequence_nextval` function is specified in the DEFAULT clause:
     ```sql
     CREATE TABLE table_name (
       id BIGINT NOT NULL PRIMARY KEY
       DEFAULT mmr_sequence_nextval('seq_name'),
       field VARCHAR2(20)
     );
     ```
   - The column will typically be the primary key.

6. **Repeat Steps for Other Databases:**
   - Repeat steps 1 through 4 for the other databases to be added as master nodes. Note that Step 5 is omitted for the additional master nodes as the publication table definitions are replicated from the master definition node to the additional master nodes when they are created, as described in Section 6.3.

7. **Create the Complete Multi-Master Replication System:**
   - Create the complete multi-master replication system as described in Chapter 6.

### 6.6.6.2 MMR-Ready Sequence Example

The following is an example of a 3-master node system using an MMR-ready sequence. The databases to be used as the master nodes are `mmrnode_a`, `mmrnode_b`, and `mmrnode_c`. A publication table named `mmr_seq_tbl` uses the MMR-ready sequence.

#### Commands for `mmrnode_a` (Master Definition Node)
```sql
ALTER DATABASE mmrnode_a SET cluster.unique_db_id TO 1;
SET cluster.unique_db_id TO 1;

CREATE SEQUENCE mmr_seq START WITH 1 INCREMENT BY 1 NO CYCLE;

CREATE OR REPLACE FUNCTION mmr_sequence_nextval (
  seq_id VARCHAR
)
RETURNS bigint
LANGUAGE sql
AS
$function$
SELECT (
  (SELECT current_setting('cluster.unique_db_id'))::bigint
  << 52)::bigint +
  nextval($1::regclass);
$function$;

CREATE OR REPLACE FUNCTION mmr_sequence_currval (
  seq_id VARCHAR
)
RETURNS bigint
LANGUAGE sql
AS
$function$
SELECT (
  (SELECT current_setting('cluster.unique_db_id'))::bigint
  << 52)::bigint +
  currval($1::regclass);
$function$;

CREATE TABLE mmr_seq_tbl (
  id BIGINT NOT NULL PRIMARY KEY
  DEFAULT mmr_sequence_nextval('mmr_seq'),
  field VARCHAR2(20)
);
```

#### Commands for `mmrnode_b`
```sql
ALTER DATABASE mmrnode_b SET cluster.unique_db_id TO 2;
SET cluster.unique_db_id TO 2;

CREATE SEQUENCE mmr_seq START WITH 1 INCREMENT BY 1 NO CYCLE;

CREATE OR REPLACE FUNCTION mmr_sequence_nextval (
  seq_id VARCHAR
)
RETURNS bigint
LANGUAGE sql
AS
$function$
SELECT (
  (SELECT current_setting('cluster.unique_db_id'))::bigint
  << 52)::bigint +
  nextval($1::regclass);
$function$;

CREATE OR REPLACE FUNCTION mmr_sequence_currval (
  seq_id VARCHAR
)
RETURNS bigint
LANGUAGE sql
AS
$function$
SELECT (
  (SELECT current_setting('cluster.unique_db_id'))::bigint
  << 52)::bigint +
  currval($1::regclass);
$function$;
```

#### Commands for `mmrnode_c`
```sql
ALTER DATABASE mmrnode_c SET cluster.unique_db_id TO 3;
SET cluster.unique_db_id TO 3;

CREATE SEQUENCE mmr_seq START WITH 1 INCREMENT BY 1 NO CYCLE;

CREATE OR REPLACE FUNCTION mmr_sequence_nextval (
  seq_id VARCHAR
)
RETURNS bigint
LANGUAGE sql
AS
$function$
SELECT (
  (SELECT current_setting('cluster.unique_db_id'))::bigint
  << 52)::bigint +
  nextval($1::regclass);
$function$;

CREATE OR REPLACE FUNCTION mmr_sequence_currval (
  seq_id VARCHAR
)
RETURNS bigint
LANGUAGE sql
AS
$function$
SELECT (
  (SELECT current_setting('cluster.unique_db_id'))::bigint
  << 52)::bigint +
  currval($1::regclass);
$function$;
```

By following these steps, you can effectively prevent uniqueness conflicts in a multi-master replication system using an MMR-ready sequence.