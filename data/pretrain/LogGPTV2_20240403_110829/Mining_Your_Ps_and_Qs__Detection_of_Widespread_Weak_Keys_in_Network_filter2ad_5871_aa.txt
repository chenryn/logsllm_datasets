title:Mining Your Ps and Qs: Detection of Widespread Weak Keys in Network
Devices
author:Nadia Heninger and
Zakir Durumeric and
Eric Wustrow and
J. Alex Halderman
Mining Your Ps and Qs: Detection of
Widespread Weak Keys in Network Devices
Nadia Heninger†∗
Zakir Durumeric‡∗
† University of California, San Diego
PI:EMAIL
Eric Wustrow‡
J. Alex Halderman‡
‡ The University of Michigan
{zakir, ewust, jhalderm}@umich.edu
Abstract
RSA and DSA can fail catastrophically when used with
malfunctioning random number generators, but the extent
to which these problems arise in practice has never been
comprehensively studied at Internet scale. We perform
the largest ever network survey of TLS and SSH servers
and present evidence that vulnerable keys are surprisingly
widespread. We ﬁnd that 0.75% of TLS certiﬁcates share
keys due to insufﬁcient entropy during key generation,
and we suspect that another 1.70% come from the same
faulty implementations and may be susceptible to com-
promise. Even more alarmingly, we are able to obtain
RSA private keys for 0.50% of TLS hosts and 0.03% of
SSH hosts, because their public keys shared nontrivial
common factors due to entropy problems, and DSA pri-
vate keys for 1.03% of SSH hosts, because of insufﬁcient
signature randomness. We cluster and investigate the vul-
nerable hosts, ﬁnding that the vast majority appear to be
headless or embedded devices. In experiments with three
software components commonly used by these devices,
we are able to reproduce the vulnerabilities and identify
speciﬁc software behaviors that induce them, including
a boot-time entropy hole in the Linux random number
generator. Finally, we suggest defenses and draw lessons
for developers, users, and the security community.
1
Introduction and Roadmap
Randomness is essential for modern cryptography, where
security often depends on keys being chosen uniformly at
random. Researchers have long studied random number
generation, from both practical and theoretical perspec-
tives (e.g., [8, 13, 15, 17, 21, 23]), and a handful of major
vulnerabilities (e.g., [5, 19]) have attracted considerable
scrutiny to some of the most critical implementations.
Given the importance of this problem and the effort and
attention spent improving the state of the art, one might
∗The ﬁrst two authors both made substantial contributions.
expect that today’s widely used operating systems and
server software generate random numbers securely. In this
paper, we test that proposition empirically by examining
the public keys in use on the Internet.
The ﬁrst component of our study is the most compre-
hensive Internet-wide survey to date of two of the most
important cryptographic protocols, TLS and SSH (Sec-
tion 3.1). By scanning the public IPv4 address space,
we collected 5.8 million unique TLS certiﬁcates from
12.8 million hosts and 6.2 million unique SSH host keys
from 10.2 million hosts. This is 67% more TLS hosts
than the latest released EFF SSL Observatory dataset [18].
Our techniques take less than 24 hours to scan the entire
address space for listening hosts and less than 96 hours
to retrieve keys from them. The results give us a macro-
scopic perspective of the universe of keys.
Next, we analyze this dataset to ﬁnd evidence of several
kinds of problems related to inadequate randomness. To
our surprise, at least 5.57% of TLS hosts and 9.60% of
SSH hosts use the same keys as other hosts in an appar-
ently vulnerable manner (Section 4.1). In the case of TLS,
at least 5.23% of hosts use manufacturer default keys that
were never changed by the owner, and another 0.34%
appear to have generated the same keys as one or more
other hosts due to malfunctioning random number gener-
ators. Only a handful of the vulnerable TLS certiﬁcates
are signed by browser-trusted certiﬁcate authorities.
Even more alarmingly, we are able to compute the
private keys for 64,000 (0.50%) of the TLS hosts and
108,000 (1.06%) of the SSH hosts from our scan data
alone by exploiting known weaknesses of RSA and DSA
when used with insufﬁcient randomness. In the case of
RSA, distinct moduli that share exactly one prime factor
will result in public keys that appear distinct but whose
private keys are efﬁciently computable by calculating
the greatest common divisor (GCD). We implemented
an algorithm that can compute the GCDs of all pairs of
11 million distinct public RSA moduli in less than 2 hours
(Section 3.3). Using the resulting factors, we are able to
obtain the private keys for 0.50% of TLS hosts and 0.03%
of SSH hosts (Section 4.2). In the case of DSA, if a DSA
key is used to sign two different messages with the same
ephemeral key, an attacker can efﬁciently compute the
signer’s long-term private key. We ﬁnd that our SSH scan
data contain numerous DSA signatures that used the same
ephemeral keys during signing, allowing us to compute
the private keys for 1.6% of SSH DSA hosts (Section 4.3).
To understand why these problem are occurring, we
manually investigated hundreds of the vulnerable hosts,
which were representative of the most commonly repeated
keys as well as each of the private keys we obtained
(Section 3.2). Nearly all served information identifying
them as headless or embedded systems, including routers,
server management cards, ﬁrewalls, and other network de-
vices. Such devices typically generate keys automatically
on ﬁrst boot, and may have limited entropy sources com-
pared to traditional PCs. Furthermore, when we examined
clusters of hosts that shared a key or factor, in nearly all
cases these appeared to be linked by a manufacturer or
device model. These observations lead us to conclude
that the problems are caused by speciﬁc defective imple-
mentations that generate keys without having collected
sufﬁcient entropy. We identiﬁed vulnerable devices and
software from dozens of manufacturers, including some of
the largest names in the technology industry, and worked
to notify the responsible parties.
In the ﬁnal component of our study, we experimen-
tally explore the root causes of these vulnerabilities by
investigating several of the most common open-source
software components from the population of vulnerable
devices (Section 5). Based on the devices we identiﬁed, it
is clear that no one implementation is solely responsible,
but we are able to reproduce the vulnerabilities in plau-
sible software conﬁgurations. Every software package
we examined relies on /dev/urandom to generate cryp-
tographic keys; however, we ﬁnd that Linux’s random
number generator (RNG) can exhibit a boot-time entropy
hole that causes urandom to produce deterministic output
under conditions likely to occur in headless and embed-
ded devices. In experiments with OpenSSL and Dropbear
SSH, we show how repeated output from the system RNG
can lead not only to repeated long-term keys but also to
factorable RSA keys and repeated DSA ephemeral keys
due to the behavior of application-speciﬁc entropy pools.
Given the diversity of the devices and software im-
plementations involved, mitigating these problems will
require action by many different parties. We draw lessons
and recommendations for developers of operating sys-
tems, cryptographic libraries, and applications, and for de-
vice manufacturers, certiﬁcate authorities, end users, and
the security and cryptography communities (Section 7).
We have also created an online key-check service to allow
users to test whether their keys are vulnerable.
It is natural to wonder whether these results should
call into question the security of every RSA or DSA key.
Based on our analysis, the margin of safety is slimmer
than we might like, but we have no reason to doubt the
security of most keys generated interactively by users on
traditional PCs. While we took advantage of the details
of speciﬁc cryptographic algorithms in this paper, we con-
clude that the blame for these vulnerabilities lies chieﬂy
with the implementations. Ultimately, the results of our
study should serve as a wake-up call that secure random
number generation continues to be an unsolved problem
in important areas of practice.
Online resources
For an extended version of this paper,
partial source code, and our online key-check service, visit
https://factorable.net.
2 Background
In this section, we review the RSA and DSA public-key
cryptosystems and discuss the known weaknesses of each
that we used to compromise private keys. We then discuss
how an adversary might exploit compromised keys to
attack SSH and TLS in practice.
2.1 RSA review
An RSA [35] public key consists of two integers: an ex-
ponent e and a modulus N. The modulus N is the product
of two randomly chosen prime numbers p and q. The
private key is the decryption exponent
d = e−1 mod (p− 1)(q− 1).
Anyone who knows the factorization of N can efﬁciently
compute the private key for any public key (e,N) using
the preceding equation. When p and q are unknown, the
most efﬁcient known method to calculate the private key
is to factor N into p and q and use the above equation to
calculate d [9].
Factorable RSA keys
No one has been publicly
known to factor a well-generated 1024-bit RSA mod-
ulus; the largest known factored modulus is 768 bits,
which was announced in December 2009 after a multi-
year distributed-computing effort [28]. In contrast, the
greatest common divisor (GCD) of two 1024-bit integers
can be computed in microseconds. This asymmetry leads
to a well-known vulnerability: if an attacker can ﬁnd two
distinct RSA moduli N1 and N2 that share a prime factor
p but have different second prime factors q1 and q2, then
the attacker can easily factor both moduli by computing
their GCD, p, and dividing to ﬁnd q1 and q2. The attacker
can then compute both private keys as explained above.
2.2 DSA review
A DSA [32] public key consists of three so-called do-
main parameters (two prime moduli p and q and a gener-
ator g of the subgroup of order q mod p) and an integer
y = gx mod p, where x is the private key. The domain
parameters may be shared among multiple public keys
without compromising security. A DSA signature con-
sists of a pair of integers (r,s): r = gk mod p mod q and
s = (k−1(H(m) + xr)) mod q, where k is a randomly cho-
sen ephemeral private key and H(m) is the hash of the
message.
Low-entropy DSA signatures DSA is known to fail
catastrophically if the ephemeral key k used in the signing
operation is generated with insufﬁcient entropy [4]. (El-
liptic curve DSA (ECDSA) is similarly vulnerable. [11])
If k is known for a signature (r,s), then the private key
x can be computed from the signature and public key as
follows:
x = r−1(ks− H(m)) mod q.
If a DSA private key is used to sign two different messages
with the same k, then an attacker can efﬁciently compute
the value k from the public key and signatures and use
the above equation to compute the private key x [29]. If
two messages m1 and m2 were signed using the same
ephemeral key k to obtain signatures (r1,s1) and (r2,s2),
then this will be immediately clear as r1 and r2 will be
equal. The ephemeral key k can be computed as:
k = (H(m1)− H(m2))(s1 − s2)−1 mod q.
2.3 Attack scenarios
The weak key vulnerabilities we describe in this paper can
be exploited to compromise two of the most important
cryptographic transport protocols used on the Internet,
TLS and SSH, both of which commonly use RSA or DSA
to authenticate servers to clients.
TLS
In TLS [16], the server sends its public key in a
TLS certiﬁcate during the protocol handshake. The key
is used either to provide a signature on the handshake
(when Difﬁe-Hellman key exchange is negotiated) or to
encrypt session key material chosen by the client (when
RSA-encrypted key exchange is negotiated).
If the key exchange is RSA encrypted, a passive eaves-
dropper with the server’s private key can decrypt the mes-
sage containing the session key material and use it to
decrypt the entire session. If the session key is negoti-
ated using Difﬁe-Hellman key exchange, then a passive
attacker will be unable to compromise the session key
from just a connection transcript. However, in both cases,
an active attacker who can intercept and modify trafﬁc
between the client and server can man-in-the-middle the
connection in order to decrypt or modify the trafﬁc.
SSH In SSH, host keys allow a server to authenticate
itself to a client by providing a signature during the pro-
tocol handshake. There are two major versions of the
protocol. In SSH-1 [38], the client encrypts session key
material using the server’s public key. SSH-2 [39] uses a
Difﬁe-Hellman key exchange to establish a session key.
The user manually veriﬁes the host key ﬁngerprint the
ﬁrst time she connects to an SSH server. Most clients then
store the key locally in a known_hosts ﬁle and automati-
cally trust it for all subsequent connections.
As in TLS, a passive eavesdropper with a server’s pri-
vate key can decrypt an entire SSH-1 session. However,
because SSH-2 uses Difﬁe-Hellman, it is vulnerable only
to an active man-in-the-middle attack. In the SSH user au-
thentication protocol, the user-supplied password is sent
in plaintext over the encrypted channel. An attacker who
knows a server’s private key can use the above attacks
to learn a user’s password and escalate an attack to the
system.
3 Methodology
In this section, we explain how we performed our Internet-
wide survey of public keys, how we attributed vulnerable
keys to devices, and how we efﬁciently factored poorly
generated RSA keys.
3.1
Internet-wide scanning
We performed our data collection in three phases: dis-
covering IP addresses accepting connections on TCP
port 443 (HTTPS) or 22 (SSH); performing a TLS or
SSH handshake and storing the presented certiﬁcate chain
or host key; and parsing the collected certiﬁcates and
host keys into a relational database. Table 1 summarizes
the results.
Host discovery
In the ﬁrst phase, we scanned the
public IPv4 address space to ﬁnd hosts with port 443
or 22 open. We used the Nmap 5 network exploration
tool [33]. We executed our ﬁrst host discovery scan be-
ginning on October 6, 2011 from 25 Amazon EC2 Micro
instances spread across ﬁve EC2 regions (Virginia, Cali-
fornia, Japan, Singapore, and Ireland). The scan ran at an
average of 40,566 IPs/second and ﬁnished in 25 hours.
Certiﬁcate and host-key retrieval
For TLS, we imple-
mented a certiﬁcate fetcher in Python using the Twisted
event-driven network framework. We fetched TLS cer-
tiﬁcates using an EC2 Large instance with ﬁve processes
each maintaining 800 concurrent connections. We started
fetching certiﬁcates on October 11, 2011.
To efﬁciently collect SSH host keys, we implemented
a simple SSH client in C, which is able to process up-
wards of 1200 hosts/second by concurrently performing
Hosts with open port 443 or 22
Completed protocol handshakes
Distinct RSA public keys
Distinct DSA public keys
Distinct TLS certiﬁcates
Trusted by major browsers
SSL Observatory
(12/2010)
≈16,200,000
7,704,837
3,933,366
1,906
4,021,766
1,455,391