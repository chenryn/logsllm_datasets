ﬂip conﬁguration that causes the highest percentage of SDCs.
Thus, the single bit-ﬂip model provides a pessimistic upper-
bound on SDCs for most of the programs.
It is interesting to note that even when the single bit-ﬂip
model does not result in pessimistic SDC results, two errors
are enough to result in the highest (pessimistic) percentage of
SDCs, regardless of the value of win-size selected (see Table
III). The value of this observation is that in the case of the
inject-on-read technique, there is no need to perform more than
two injections to estimate the error resilience of a system.
Fig. 4 also shows that except for a couple of programs such
as CRC32 and susan-smoothing, there is not much variation
between the percentage of SDCs obtained for different win-
CONFIGURATIONS THAT RESULTED IN THE HIGHEST PERCENTAGES OF
SDCS, AMONG ALL MULTIPLE BIT-FLIP ERROR CAMPAIGNS.
Table III
Program
basicmath
qsort
susan corner
susan edge
susan smoothing
FFT
IFFT
CRC32
dijkstra
sha
stringsearch
bfs
histo
sad
spmv
inject-on-read
inject-on-write
max-
MBF
win-size
max-
MBF
win-size
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
100
100
1000
1000
1000
1
1
100
4
10
RND(2-10)
1000
RND(2-10)
1000
1000
3
3
4
3
3
2
2
2
3
2
2
2
6
2
2
1
1
1
1
1
1
1
100
4
1
4
1000
1
4
RND(11-100)
size conﬁgurations. In other words, when studying the impact
of multiple bit-ﬂip errors on programs, the win-size parameter
does not matter much for the SDC percentages. However,
Table III shows the win-size conﬁgurations that caused the
highest percentage of SDCs, among all multiple-bit error
campaigns. We can see that when using the inject-on-read
technique, higher window sizes are more likely to result in the
highest percentage of SDCs. This is because a high percentage
of data-items targeted by errors when using the inject-on-read
technique are memory addresses. Injecting errors into memory
addresses are mostly detected by the exception mechanisms
(see Fig. 1a). Thus, multiple injections into registers that are
within a small window are more likely to result in an address
corruption that raises an exception,
thereby resulting in a
higher percentage of Detections than when consecutive errors
are injected into registers that are within a larger window.
Result summary (inject-on-read technique):
RQ2-Answer: The single bit-ﬂip model provides a pessimistic
upper-bound on SDCs for most of the programs.
RQ3-Answer: Two errors are enough to cause the highest
percentage of SDCs.
RQ4-Answer: Window size does not have much effect on the
percentage of SDCs.
b) Results for the inject-on-write Technique: Fig. 5
shows the SDC results for the experiments targeting bits of
multiple registers using the inject-on-write technique. The 95%
conﬁdence intervals for the results presented here are between
±0.26 for dijkstra and ±0.97 for sha. From the ﬁgure, we
can see that the single bit-ﬂip model results in a pessimistic
estimate of the percentage of SDCs for only around half of
the programs. In the other half, single bit-ﬂip errors result in
(a) inject-on-read
(b) inject-on-write
Figure 3. Distribution of the number of activated errors before causing a program to crash, given that max-MBF is equal to 30.
Figure 4. SDC results for experiments targeting bits (from 1 to 30) of multiple registers using the inject-on-read technique. Here the RND (α, β) refers to a
randomly selected value between α and β.
Figure 5. SDC results for experiments targeting bits (from 1 to 30) of multiple registers using the inject-on-write technique. Here the RND (α, β) refers to
a randomly selected value between α and β.
2 (for dijkstra) to 17 (for basicmath) percentage points of lower
SDCs compared to the multiple bit-ﬂip conﬁgurations that
cause the highest percentage of SDCs. The high percentage of
difference for basicmath could yet again be explained using the
results presented in Fig. 1, where injecting single bit-ﬂip errors
in basicmath result in the lowest percentage of Detections.
This implies that there are fewer hardware exceptions raised
in these programs, which means fewer errors are detected and
hence results in higher percentage of SDCs.
The results of our multiple bit-ﬂip campaigns show that,
in the case of using the multiple bit-ﬂips, three errors are
sufﬁcient to cause the highest percentage of SDCs for 114
out of 120 program/win-size pairs (corresponding to 95%
of the pairs). Out of these 114 pairs, 93 and 21 of them
correspond to when the max-MBF is equal to two and three,
respectively. Out of the 120 program/win-size pairs, there are
also ﬁve cases where four errors are needed to cause the
highest percentage of SDCs; however, compared to when three
errors are injected, these cases only result in at most one
percentage point of higher percentage of SDCs, which is not a
signiﬁcant difference. The only exception is the histo program
using the window size of one, where six errors are needed to
cause the highest percentage of SDCs.
Comparing Fig. 4 and Fig. 5 suggests that depending on
the fault injection technique used, different numbers of errors
need to be injected into the system to produce a pessimistic
estimate of the percentage of SDCs. However, aggregating the
results from both techniques, injecting three errors is sufﬁcient
to result in the highest percentage of SDCs.
Fig. 5 also shows that for many of the programs, the win-
size parameter has a signiﬁcant effect on the percentage of
SDCs when using the inject-on-write technique (unlike the
inject-on-read technique). Further, according to Table III, when
using the inject-on-write technique, lower window sizes are
more likely to result in the highest percentage of SDCs, which
is different from what we observed for the inject-on-read
technique. This is because a higher percentage of data-items
targeted by errors are data variables, in contrast to the inject-
on-read technique where they were address variables. Injecting
errors into data variables mostly result in Benign or SDC
outcome categories. Thus, by injecting multiple errors within a
small window size, the likelihood of causing an SDC increases
as there is less opportunity for the effect of an error to be
masked before the next injection; thus, we can choose smaller
window sizes for pruning.
Result summary (inject-on-write technique):
RQ2-Answer: The single bit-ﬂip model does not result
pessimistic percentage of SDCs for half of the programs.
RQ3-Answer: Three errors are enough to cause the highest
percentage of SDCs in 95% of the program/win-size pairs.
RQ4-Answer: Lower window size values are more likely to
result in the highest percentage of SDCs.
in
3) Sensitivity of Fault Injection Locations to Multiple Bit-
In this section, we study whether the results
Flip Errors:
Figure 6.
categories due to the injection of multiple-bit errors.
State diagram showing transitions between different outcome
obtained for single bit-ﬂip campaigns can be used to prune
the multiple bit-ﬂip error space with respect to the program
location into which the ﬁrst error should be injected. Our goal
is to inject the ﬁrst error of each multiple bit-ﬂip experiment
in locations that would eventually cause an SDC and are not
covered by the single bit-ﬂip model. We explain this using Fig.
6, which shows how injecting multiple bit-ﬂip errors would
affect the results of a single bit-ﬂip experiment.
In Fig. 6, ts, tb and td correspond to when a single bit-
ﬂip error is injected into a speciﬁc location in the program,
resulting in SDC, Benign or Detection, respectively. All other
transitions correspond to when multiple bit-ﬂip errors are
injected starting from the same program location, and change
the result of the single bit-ﬂip outcome. For example, tb−s
refers to a change in the fault injection result from Benign
to SDC due to the injection of multiple bit-ﬂip errors. Fig. 6
illustrates two transitions where injecting additional bit-ﬂip
errors into the program changes its result from Benign or
Detection to an SDC, thereby decreasing its resilience:
• Transition I (td−s). Injecting single bit-ﬂip error into a
location results in the Detection category, but injecting
multiple bit-ﬂip errors changes the result to an SDC.
• Transition II (tb−s). Injecting single bit-ﬂip error into
a location results in the Benign category, but injecting
multiple bit-ﬂip errors changes the results to an SDC.
injection technique. To get
To ﬁnd the likelihood of the above transitions, we conduct
two fault injection campaigns for each program, one for each
fault
the worst-case estimates,
we use the max-MBF/win-size pairs that caused the highest
percentage of SDCs when conducting multiple bit-ﬂip fault
injection campaigns (see Table III). We choose the location of
the ﬁrst error of each multiple bit-ﬂip experiment from those
chosen for the single bit-ﬂip model. We do not consider the
ts−s transition as we only consider cases that would add to
the number of SDCs (i.e., pessimistic percentage of SDCs).
Table IV shows the results. From the table, we can see
that Transition I is very unlikely (in most cases below 1%),
LIKELIHOOD OF TRANSITION I AND TRANSITION II.
Table IV
Program
basicmath
qsort
susan corner
susan edge
susan smoothing
FFT
IFFT
CRC32
dijkstra
sha
stringsearch
bfs
histo
sad
spmv
inject-on-read
inject-on-write
Tran. I
1.1%
0.7%
0.1%
1.2%
0.3%
0.4%
0.5%
0.8%
0.0%
1.0%
0.1%
0.2%
0.1%
12.9%
0.1%
Tran. II
31.9%
13.4%