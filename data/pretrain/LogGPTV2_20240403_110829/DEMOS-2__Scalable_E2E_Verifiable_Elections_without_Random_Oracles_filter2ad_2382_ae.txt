buttons to proceed. Suppose the voter chooses ‘A’ (resp.
‘B’), the system opens
the version B (resp. A) of the ballot by revealing the randomness used to create all
the ciphertexts in version B (resp. A), r1,(b), . . . , rm,(b). The voter can export the
data and use any third-party auditing software to perform the check. The VSD then
computes the NIZK proofs for the version A of the ballot; for j ∈ {1, 2, . . . , m}, the
j = Encpk(ej; rj,(a)) ∧ ej ∈ {0, 1}}.
VSD computes π(a)
Note that in above NIZK proofs, Prov0/1 uses the vid(cid:96) as the h2 in the description of
Section 4.2.1 instead of generating a fresh h2 = gα1
for crs(0) and crs(1) every time.
2
j=1 rj,(a), and computes
π(a) ← NIZK{crsm; (e, r(a)) : c(a) = Encpk(e; r(a)) ∧ e ∈ [mmin, mmax]}. The VSD posts
the ballot blt(cid:96) :=
j=1 ej, and r(a) = (cid:80)m
It then sets c(a) = (cid:81)m
, e = (cid:80)m
(cid:111)
j ← NIZK{crsm; (ej, rj,(a)) : c(a)
j=1 c(a)
to the BB.
vid(cid:96), ‘A’,
(cid:28)
(cid:29)
(cid:110)
c(a)
j
, π(a)
j
j
, π(a)
j∈[m]
The voter’s receipt is deﬁned as rec(cid:96) := (vid(cid:96), ‘A’, rec(a)) assuming version A of the
ballot was selected during the Cast protocol.
17
5.4 Tally and Result
5.4.1 Producing the Sigma Protocols Challenge
After the election is ﬁnished, the voters’ coins are collected to produce the Sigma protocol
challenge. On the BB, everyone can identify the version of each submitted ballot. We
interpret ‘A’ as 0, ‘B’ and 1, and if the voter did not submit a ballot, his coin is ﬁxed as
0. Denote ρj as the voter Vj’s coin and ρ = (ρ1, ρ2, . . . , ρn). As studied in [KZZ15], the
voters’ coins can be modeled as an adaptive non-oblivious bit ﬁxing source. Nevertheless,
we still want to produce a single challenge if only computationally bounded adversaries
are considered. Assume hash is a cryptographic collision resistant hash function such that
there is no known algorithm can ﬁnd a collision with 22κ expected steps. We compute
the challenge ch ← hash(ρ). In the following theorem, we show that if H∞(ρ) ≥ κ, then
H∞(hash(ρ)) ≥ κ.
Theorem 4. Let X be an n-bit eﬃciently sampleable distribution with H∞(X) ≥ κ.
Let hash : {0, 1}∗ (cid:55)→ {0, 1}λ be a cryptographic hash function, where λ > 2κ is a security
parameter. If H∞(hash(X))  2−κ
and ∀x : Pr[x ← X] ≤ 2−κ.
Therefore, σ must have collisions. Consider the algorithm Aσ that repetitively samples
x from X at random and stores hash(x), trying to ﬁnd a collision for σ. Given that
Pr[x ← X : hash(X) = σ] > 2−κ, the expected running time for Aσ to ﬁnd a collision
(cid:4)
for the hash image σ is less than 22κ.
5.4.2 Finalizing the Election
The election server computes the tally ciphertexts by multiplying all the valid sub-
mitted ciphertexts for each option on the BB. The tally ciphertexts are denoted by
(E1, . . . , Em), where Ej = (Ej,1, Ej,2). Next, each trustee Ti fetches all the posted
information from BB and checks its consistency. After that, Ti:
• Computes and sends the following response messages to the election server (EA):
– Σdlog
(cid:111)
(cid:110)
1 };
(2) {(αi) : h1,i = gαi
(βi) : u0,i = gβi
;
1
0 };
1 ∧ u2,i = uγi
(2) {(γi) : u1,i = gγi
– Σdlog
(2)
– Σddh
• For j ∈ {1, . . . , m}:
– Computes and sends to the the election server (EA) the partial decryption
(cid:111)
Dj,i = Eγi
j,1 together with the proof
(cid:110)
πi,j ← NIZK
crsm; (γi) : h1,i = gγi
1 ∧ Dj,i = Eγi
j,1
.
the election server, for j ∈ [m], computes τj = Dlogg1(Ej,2/(cid:81)k
After all the trustees partial decryption of the tally ciphertexts has been posted,
i=1 Dj,i). The discrete
n steps, given the knowledge that τj ∈ [0, n],
logarithm can be solved in approximately
as there are maximum n possible votes for each option in total. It then posts the ﬁnal
tally τ = (τ1, . . . , τm) on the BB and informs all the voters by email.
√
18
5.5 Verify
After the Setup protocol, each trustee Ti is able to check the consistency between the
posted election parameters on the BB and its private state sti. The voter checks the
following:
• There is a unique ballot blt(cid:96) indexed by vid(cid:96) in the election transcript info.
• The data in blt(cid:96) hashes to the rec(cid:96).
• There is no duplicated ciphertexts and NIZK proofs across the entire election
transcript info.
• All the NIZK proofs in each ballot blt(cid:96) uses vid(cid:96) as a part of the second layer
CRS’s.
• All the Sigma and NIZK proofs are valid.
6 Security
6.1 On the Non-malleability of the NIZK Proofs
It is well-known that GS proofs are malleable with respect to the same CRS. More
speciﬁcally, given a GS proof, π, for the statement x with respect to crs, anyone can
re-randomize the proof to produce a distinct proof π∗ for x respect to crs. To prevent
replay attacks, all the duplicated ciphertexts shall be removed. However, the adversary
can still copy and re-randomize some honest voters’ ciphertexts as well as their attached
NIZK proofs if the same CRS is used among all the voters. To address this issue, each
voter is required to use a distinct vid(cid:96) as a part of her second layer CRS’s.
Regarding privacy, recall that we assume the election servers (EA and BB) are honest;
in particular, all the voter ID’s {vid(cid:96)}(cid:96)∈[n] should be generated honestly such that no
one knows the discrete logarithms: Dlogg2(vid(cid:96)) for all (cid:96) ∈ [n] and Dlogvid(cid:96)1
(vid(cid:96)2) for all
(cid:96)1 (cid:54)= (cid:96)2 ∈ [n]. We now show that, given c = Encpk(b) for an unknown b ∈ {0, 1} together
with a proof π generated by the NIZK proof system Γ0/1 using vid1, no PPT adversary
(cid:54)= pk, and ˆπ that includes vid2 as a part of its
can produce ˆc = Encpk(cid:48)(b), where pk(cid:48)
second layer CRS’s with non-negligible probability.
Recall that in the NIZK proof system Γ0/1 described in Section 4.2.1 the prover
generates crs(0) and crs(1) and shows, via a DDH tuple NIZK proof described in 4.1,
that the ciphertext c encrypts 0 using crs(0) and c encrypts 1 using crs(1). Since the
DDH tuple NIZK proof is perfectly sound, if c encrypts b, the proof that uses crs(b)
must be perfectly sound and the proof that uses crs(1−b) must be simulatable. By the
description of the NIZK proof systemΓddh, crs(b) and crs(1−b) must be encryptions of 1
and 0 respectively under the “public key”, pk1 = vid1. Similarly, in ˆπ, ˆcrs(b) and ˆcrs(1−b)
must be encryptions of 1 and 0 respectively under the “public key”, pk2 = vid2. Hence,
the non-malleability problem is reduced to the following theorem.
Theorem 5. Given randomly chosen pk1, pk2 and c0 = Encpk1(m), c1 = Encpk1(1 −
m) for unknown m ∈ {0, 1}, the probability that a PPT adversary A produces ˆc0 =
Encpk2(m), ˆc1 = Encpk2(1 − m) is negligible ,if the underlying encryption scheme is
IND-CPA secure.
19
Proof. The proof is via reduction. Assume there is a PPT adversary A who can produce
ˆc0 = Encpk2(m), ˆc1 = Encpk2(1 − m). Then, we can contruct an adversary B who can
win the IND-CPA game of the underlying encryption scheme as follows:
In the IND-CPA game, B is given pk1 and it sends m0 = 0, m1 = 1 to the IND-CPA
challenger C. B will receive c0 = Encpk1(mb) from C and will be challenged to guess b.
B then computes c1 = Encpk1(1)/c0 = Encpk1(1 − mb) and generates (sk2, pk2). Next, it
sends c0, c1, pk1 and pk2 to A. Upon receiving ˆc0 and ˆc1 from A, B decrypts ˆc0 and ˆc1.
Finally, it sends b(cid:48) to C, if ˆc0 and ˆc1 are indeed encryptions of b(cid:48) and 1 − b(cid:48), otherwise,
she sends random b(cid:48) ← {0, 1} to C.
Clearly, B wins when A succeeds (i.e., ˆc0 and ˆc1 are indeed encryptions of b(cid:48) and
1 − b(cid:48)). Therefore if the probability that A wins is p, we have that
Pr[B wins] = Pr[A succeeds] · Pr[B wins|A succeeds] + Pr[A fails] · Pr[B wins|A fails] =
= p · 1 + (1 − p) · 1/2 = 1/2 + p/2.
(cid:4)
6.2 Privacy
Our system achieves the simulation-based privacy deﬁned in Section 3.2. Similarly to
[KZZ15], we utilize complexity leveraging. Speciﬁcally, we choose the security parame-
ters such that breaking the SXDH assumption of Genbp and ﬁnding a collision for hash
is much harder than guessing the challenge of the Sigma protocols.
Theorem 6. Assume there exists a constant κ, 0 < κ < 1 such that for any 2λκ-time
adversary A the advantage of breaking the SXDH assumption of Genbp is negl(λ). Let
n, m, t, k ∈ N, where 0 < k < n. Then, for every m, n, t = poly(λ) and every k < λκ,
the e-voting system Π described in Section 5 is k-private, unless there is an explicit
algorithm that can ﬁnd a collision for hash : {0, 1}∗ (cid:55)→ {0, 1}λ in 2λκ time.
Proof. (Sketch) Given an adversary A, we construct a simulator S s.t. IDEALF m,n,t
,S,Z (λ)
and REALΠ,A,Z (λ) are computationally ingistinguishable. Without loss of generality, let
Tw be the honest trustee. The simulator S operates as follows:
priv
priv
At the beginning of the experiment, S selects all the voters’ coins (including both
honest and corrupted voters) at random, denoted as ρ = (ρ1, . . . , ρn) ∈ {0, 1}n and pro-
duces the challenge of the Sigma protocols using ρ. When S receives (sid, vote,O,V,U)
from F m,n,t
, it simulates Π in the Setup protocol playing roles as EA and BB, and
interacting with all the corrupted trustees. In addition, it generates T = {T1, . . . , Tw}
and allows A to corrupt all the trusteed except from Tw. In the simulation of Tw, S
performs the following modiﬁcations: it sets u2,(w) = uγw
0 /g1 and simulates a proof for
the fake DDH relation of (g1, u0, u1,(w), u2,(w)). Once all the trustees have completed
their Setup, S generates vid(cid:96) such that d(cid:96) = Dlogg2(vid(cid:96)) is known. It then sends the
credentials to all the voters.
During the Cast protocol, S plays the role of the EA and BB. Upon receiving
for an honest V(cid:96), S executes a Cast protocol on behalf of V(cid:96)
(sid, cast, V(cid:96)) from F m,n,t
with a random U(cid:96) ∈ U. After all the voters cast their ballots, S plays the role of the
EA interacting with the corrupted trustees in the Tally protocol. Importantly, S sends
suitably long messages to EA to fake the Tally interaction for Tw. Due to the secure
channel between Tw and the EA, A cannot tell Tw’s Tally protocol is fake.
priv
20
compute γ =(cid:80)k
After all the corrupted trustees ﬁnish the Tally protocol, S does not post their
tally messages to the BB; instead, it stores the set of the transcripts of all the Sigma
protocols and rewinds the state of the experiment to the Cast protocol of the last
honest voter, VL. In the second run, S executes the Cast protocol for VL again but
this time it chooses a diﬀerent ballot version to submit. Namely, S ﬂips the coin of VL.
Then, S completes the rest of the protocol in the second run until all the corrupted
trustees ﬁnish the Tally protocol. If there is no collision for hash, the challenge of the
Σ protocols must be distinct from that of the ﬁrst run, otherwise we obtain a collision
ﬁnding algorithm for hash. Hence, S obtains another set of the transcripts of all the Σ
protocols with a diﬀerent challenge. Subsequently, S utilizes the knowledge extractor
to extract all the corrupted trustees’ witnesses αi, βi, γi, i (cid:54)= [k] \ {w}. Hence, S can
i=1 γi. Note that now the master CRS crsm is an encryption of 0 and
thus it is a perfectly simulatable CRS and γ is the trapdoor.
After that, S rewinds the state of the experiment to the beginning of the Cast
protocol and starts a third run. In the Cast protocol, S uses the pre-generated coins
(cid:96) (cid:54)∈ U and simulates the
ρ(cid:96) of each honest voter V(cid:96). In addition, it encrypts an invalid U∗
NIZK proofs using the trapdoor γ. In case the corrupted voters’ coins do not match
the pre-generated (guessed) coins, S resets back to the beginning of the experiment and
starts over. S repeats the above procedure until it has three runs of the execution and
the voters’ coins of the third run execution is guessed correctly. The expected running
time to make this happen is 2k · poly(λ) < 2λκ.
Subsequently, for each corrupted voter V(cid:96), S uses d(cid:96) to decrypt all the second layer
CRSs in her ballot blt(cid:96) on the BB, and thus determine U(cid:96).
If U(cid:96) (cid:54)∈ U, S aborts.
Otherwise, S sends (sid, cast, V(cid:96),U(cid:96)) to F m,n,t