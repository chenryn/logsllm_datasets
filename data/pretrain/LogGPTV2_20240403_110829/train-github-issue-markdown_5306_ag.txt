以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 构建过程日志

**编译 C++ 对象文件**
- 正在构建 C++ 对象文件：
  - `third_party/protobuf/cmake/CMakeFiles/libprotoc.dir/src/google/protobuf/compiler/objectivec/objectivec_enum.cc.o`
  - `third_party/protobuf/cmake/CMakeFiles/libprotoc.dir/src/google/protobuf/compiler/objectivec/objectivec_enum_field.cc.o`
  - `third_party/protobuf/cmake/CMakeFiles/libprotoc.dir/src/google/protobuf/compiler/objectivec/objectivec_extension.cc.o`
  - `third_party/protobuf/cmake/CMakeFiles/libprotoc.dir/src/google/protobuf/compiler/objectivec/objectivec_field.cc.o`
  - `third_party/protobuf/cmake/CMakeFiles/libprotoc.dir/src/google/protobuf/compiler/objectivec/objectivec_file.cc.o`
  - `third_party/protobuf/cmake/CMakeFiles/libprotoc.dir/src/google/protobuf/compiler/objectivec/objectivec_generator.cc.o`
  - `third_party/protobuf/cmake/CMakeFiles/libprotoc.dir/src/google/protobuf/compiler/objectivec/objectivec_helpers.cc.o`
  - `third_party/protobuf/cmake/CMakeFiles/libprotoc.dir/src/google/protobuf/compiler/objectivec/objectivec_map_field.cc.o`
  - `third_party/protobuf/cmake/CMakeFiles/libprotoc.dir/src/google/protobuf/compiler/objectivec/objectivec_message.cc.o`
  - `third_party/protobuf/cmake/CMakeFiles/libprotoc.dir/src/google/protobuf/compiler/objectivec/objectivec_message_field.cc.o`
  - `third_party/protobuf/cmake/CMakeFiles/libprotoc.dir/src/google/protobuf/compiler/objectivec/objectivec_oneof.cc.o`
  - `third_party/protobuf/cmake/CMakeFiles/libprotoc.dir/src/google/protobuf/compiler/objectivec/objectivec_primitive_field.cc.o`
  - `third_party/protobuf/cmake/CMakeFiles/libprotoc.dir/src/google/protobuf/compiler/php/php_generator.cc.o`
  - `third_party/protobuf/cmake/CMakeFiles/libprotoc.dir/src/google/protobuf/compiler/plugin.cc.o`
  - `third_party/protobuf/cmake/CMakeFiles/libprotoc.dir/src/google/protobuf/compiler/plugin.pb.cc.o`
  - `third_party/protobuf/cmake/CMakeFiles/libprotoc.dir/src/google/protobuf/compiler/python/python_generator.cc.o`
  - `third_party/protobuf/cmake/CMakeFiles/libprotoc.dir/src/google/protobuf/compiler/ruby/ruby_generator.cc.o`
  - `third_party/protobuf/cmake/CMakeFiles/libprotoc.dir/src/google/protobuf/compiler/subprocess.cc.o`
  - `third_party/protobuf/cmake/CMakeFiles/libprotoc.dir/src/google/protobuf/compiler/zip_writer.cc.o`

**编译 CUDA 文件**
- 编译 `collectives/reduce.cu` 到 `/home/feng/pytorch/build/nccl/obj/collectives/reduce.o`
- 编译 `collectives/reduce_scatter.cu` 到 `/home/feng/pytorch/build/nccl/obj/collectives/reduce_scatter.o`
- 编译 `all_reduce.cu` 到 `/home/feng/pytorch/build/nccl/obj/collectives/device/all_reduce_sum.o`
- 编译 `broadcast.cu` 到 `/home/feng/pytorch/build/nccl/obj/collectives/device/broadcast_sum.o`
- 编译 `reduce.cu` 到 `/home/feng/pytorch/build/nccl/obj/collectives/device/reduce_sum.o`

**警告信息**
- NVCC 警告：`compute_20`, `sm_20` 和 `sm_21` 架构已弃用，可能在未来的版本中移除（使用 `-Wno-deprecated-gpu-targets` 选项来抑制此警告）。
- ptxas 警告：指定的最大寄存器数量 96 过大，将被忽略。

**链接库文件**
- 链接 CXX 共享库 `../../../../lib/libmkldnn.so`
- 链接 CXX 静态库 `../../../lib/libprotoc.a`
- 链接 CXX 可执行文件 `../../../bin/protoc`
- 链接 CXX 静态库 `../../lib/libonnx_proto.a`
- 链接 CXX 静态库 `../lib/libcaffe2_protos.a`
- 链接 CXX 静态库 `../../lib/libonnx.a`

**生成协议缓冲区文件**
- 正在运行 C++/Python 协议缓冲区编译器：
  - `/home/feng/pytorch/caffe2/proto/prof_dag.proto`
  - `/home/feng/pytorch/caffe2/proto/predictor_consts.proto`
  - `/home/feng/pytorch/caffe2/proto/torch.proto`
  - `/home/feng/pytorch/caffe2/proto/caffe2.proto`
  - `/home/feng/pytorch/caffe2/proto/hsm.proto`
  - `/home/feng/pytorch/caffe2/proto/metanet.proto`
  - `/home/feng/pytorch/caffe2/proto/caffe2_legacy.proto`
  - `/home/feng/pytorch/third_party/onnx/onnx/onnx.in.proto`
  - `/home/feng/pytorch/third_party/onnx/onnx/onnx-operators.in.proto`

**处理 ONNX 文件**
- 处理 `/home/feng/pytorch/third_party/onnx/onnx/onnx.in.proto` 并生成相关文件
- 处理 `/home/feng/pytorch/third_party/onnx/onnx/onnx-operators.in.proto` 并生成相关文件

**构建目标**
- 已构建目标 `mkldnn`
- 已构建目标 `libprotoc`
- 已构建目标 `protoc`
- 已构建目标 `gen_onnx_proto`
- 已构建目标 `onnx_proto`
- 已构建目标 `Caffe2_PROTO`
- 已构建目标 `Caffe2_perfkernels_avx2`
- 已构建目标 `Caffe2_perfkernels_avx`
- 已构建目标 `onnx`
- 已构建目标 `caffe2_protos`

---

通过这种结构化的方式，日志内容更加清晰易读，并且关键步骤和警告信息一目了然。