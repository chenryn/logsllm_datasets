`docker volume rm`子命令使您能够删除不再需要的卷:
```
$ sudo docker volume rm example
example
```
现在我们已经熟悉了 Docker 卷管理，让我们在接下来的章节中深入探讨数据共享。
## 共享主机数据
前面，我们描述了使用`Dockerfile`中的`VOLUME`指令在 Docker 映像中创建数据卷的步骤。然而，Docker 没有提供任何机制来在构建期间装载主机目录或文件，以确保 Docker 映像是可移植的。Docker 提供的唯一配置是在容器启动期间将主机目录或文件装载到容器的数据卷中。Docker 通过`docker run`子命令的`-v`选项公开主机目录或文件挂载工具。`-v`选项有五种不同的格式，列举如下:
*   `-v `
*   `-v :`
*   `-v ::`
*   `-v :`
*   `-v ::`
``格式是 Docker 主机中的绝对路径，``是容器文件系统中的绝对路径，``是使用`docker volume create`子命令创建的卷的名称，``可以是只读(`ro`)或读写(`rw`)模式。第一种`-v `格式已经在本章的*数据卷*部分进行了解释，作为在容器启动过程中创建挂载点的一种方法。第二种和第三种格式使我们能够将文件或目录从 Docker 主机装载到容器装载点。第四种和第五种格式允许我们挂载使用`docker volume create`子命令创建的卷。
我们想通过几个例子来更深入地了解主机的数据共享。在第一个示例中，我们将演示如何在 Docker 主机和容器之间共享目录，在第二个示例中，我们将演示文件共享。
这里，在第一个示例中，我们将目录从 Docker 主机挂载到容器，在容器上执行一些基本的文件操作，并从 Docker 主机验证这些操作，具体如下步骤所示:
1.  首先，让我们用`docker run`子命令的`-v`选项启动一个交互式容器，将 Docker 主机目录的`/tmp/hostdir`装载到容器的`/MountPoint`中:
```
      $ sudo docker run -v /tmp/hostdir:/MountPoint \
 -it ubuntu:16.04
```
If `/tmp/hostdir` is not found on the Docker host, the Docker Engine will create the directory per se. However, the problem is that the system-generated directory cannot be deleted using the `-v` option of the `docker rm` subcommand.
2.  成功启动容器后，我们可以使用`ls`命令检查`/MountPoint`的存在:
```
 root@4a018d99c133:/# ls -ld /MountPoint
 drwxr-xr-x 2 root root 4096 Nov 23 18:28 
 /MountPoint
```
3.  现在，我们可以使用`mount`命令继续检查挂载细节:
```
 root@4a018d99c133:/# mount | grep MountPoint
 /dev/xvda2 on /MountPoint type ext3 
 (rw,noatime,nobarrier,errors=
 remount-ro,data=ordered)
```
4.  在这里，我们将验证`/MountPoint`，使用`cd`命令更改到`/MountPoint`目录，使用`touch`命令创建几个文件，并使用`ls`命令列出文件，如下脚本所示:
```
 root@4a018d99c133:/# cd /MountPoint/
 root@4a018d99c133:/MountPoint# touch {a,b,c}
 root@4a018d99c133:/MountPoint# ls -l
 total 0
 -rw-r--r-- 1 root root 0 Nov 23 18:39 a
 -rw-r--r-- 1 root root 0 Nov 23 18:39 b
 -rw-r--r-- 1 root root 0 Nov 23 18:39 c
```
5.  在新终端上使用`ls`命令验证`/tmp/hostdir` Docker 主机目录中的文件可能是值得的，因为我们的容器在现有终端上以交互模式运行:
```
 $ sudo ls -l /tmp/hostdir/
 total 0
 -rw-r--r-- 1 root root 0 Nov 23 12:39 a
 -rw-r--r-- 1 root root 0 Nov 23 12:39 b
 -rw-r--r-- 1 root root 0 Nov 23 12:39 c
```
在这里，我们可以看到与第 4 步中看到的相同的文件集。但是，您可能已经注意到文件时间戳的不同。这个时间差是由于 Docker 主机和容器之间的时区差异造成的。
6.  最后，让我们以`4a018d99c133`容器标识为参数运行`docker inspect`子命令，看看 Docker 主机和容器装载点之间是否设置了目录映射，如下命令所示:
```
 $ sudo docker inspect \
 --format='{{json .Mounts}}' 4a018d99c133
 [{"Source":"/tmp/hostdir",
 "Destination":"/MountPoint","Mode":"",
 "RW":true,"Propagation":"rprivate"}]
```
显然，在`docker inspect`子命令的前面输出中，Docker 主机的`/tmp/hostdir`目录安装在容器的`/MountPoint`安装点上。
对于第二个示例，我们将从 Docker 主机将文件装载到容器中，从容器更新文件，并从 Docker 主机验证这些操作，如以下步骤所示:
1.  为了将文件从 Docker 主机装载到容器中，文件必须预先存在于 Docker 主机中。否则，Docker 引擎将使用指定的名称创建一个新目录，并将其装载为目录。我们可以从使用`touch`命令在 Docker 主机上创建一个文件开始:
```
      $ touch /tmp/hostfile.txt
```
2.  使用`docker run`子命令的`-v`选项启动一个交互式容器，将`/tmp/hostfile.txt` Docker 主机文件作为`/tmp/mntfile.txt`装载到容器中:
```
      $ sudo docker run -v /tmp/hostfile.txt:/mntfile.txt \
 -it ubuntu:16.04
```
3.  成功启动容器后，现在让我们使用`ls`命令检查`/mntfile.txt`是否存在:
```
 root@d23a15527eeb:/# ls -l /mntfile.txt
 -rw-rw-r-- 1 1000 1000 0 Nov 23 19:33 /mntfile.txt
```
4.  然后，使用`mount`命令继续检查安装细节:
```
 root@d23a15527eeb:/# mount | grep mntfile
 /dev/xvda2 on /mntfile.txt type ext3 
 (rw,noatime,nobarrier,errors=remount-ro,data=ordered)
```
5.  然后，使用`echo`命令将一些文本更新到`/mntfile.txt`:
```
      root@d23a15527eeb:/# echo "Writing from Container" 
 > mntfile.txt
```
6.  同时，切换到 Docker 主机中的不同终端，并使用`cat`命令打印`/tmp/hostfile.txt` Docker 主机文件:
```
 $ cat /tmp/hostfile.txt
 Writing from Container 
```
7.  最后，以`d23a15527eeb`容器标识作为参数运行`docker inspect`子命令，查看 Docker 主机和容器装载点之间的文件映射:
```
 $ sudo docker inspect \
 --format='{{json .Mounts}}' d23a15527eeb
 [{"Source":"/tmp/hostfile.txt", 
 "Destination":"/mntfile.txt",
 "Mode":"","RW":true,"Propagation":"rprivate"}]
```
从前面的输出中，很明显来自 Docker 主机的`/tmp/hostfile.txt`文件作为`/mntfile.txt`安装在容器内。
对于最后一个示例，我们将创建一个 Docker 卷，并将一个命名的数据卷装载到一个容器中。在这个例子中，我们不会像前面两个例子那样运行验证步骤。但是，我们鼓励您运行我们在第一个示例中列出的验证步骤。
1.  使用`docker volume create`子命令创建命名数据卷，如下所示:
```
      $ docker volume create --name namedvol
```
2.  现在，使用`docker run`子命令的`-v`选项启动一个交互式容器，将`namedvol`命名数据值装载到容器的`/MountPoint`中:
```
      $ sudo docker run -v namedvol:/MountPoint \
 -it ubuntu:16.04
```
During the launch of the container, Docker Engine creates `namedvol` if it is not created already.
3.  成功启动容器后，您可以重复第一个示例的验证步骤 2 到 6，并且在这个示例中您也会发现相同的输出模式。
### 主机数据共享的实用性
在前一章中，我们在 Docker 容器中启动了一个 HTTP 服务。但是，如果您没记错的话，HTTP 服务的日志文件仍然在容器中，不能从 Docker 主机直接访问。在本节中，我们将逐步阐述从 Docker 主机访问日志文件的过程:
1.  让我们从启动 Apache2 HTTP 服务容器开始，通过使用`docker run`子命令的`-v`选项，将 Docker 主机的`/var/log/myhttpd`目录装载到容器的`/var/log/apache2`目录中。在本例中，我们通过调用以下命令来利用我们在上一章中构建的`apache2`映像:
```
      $ sudo docker run -d -p 80:80 \
 -v /var/log/myhttpd:/var/log/apache2 apache2
9c2f0c0b126f21887efaa35a1432ba7092b69e0c6d523ffd50684e27eeab37ac
```