 The use of setLen is another optimization. It ensures that the string isn’t reallo-
cated but is instead reused. The parse procedure is executed at least 7 million times,
so a tiny optimization creates massive gains in total execution speed. 
FINDING THE MOST POPULAR ARTICLE
Now that the parsing code has been introduced, all that’s left is to find the most pop-
ular article on the English Wikipedia. The following listing shows the finished
sequential_counts application with the latest changes shown in bold.
import os, parseutils
proc parse(line: string, domainCode, pageTitle: var string,
countViews, totalSize: var int) =
var i = 0
Listing 6.15
The output of sequential_counts.nim
Listing 6.16
The finished sequential_counts.nim
Calls the parse
procedure and passes
it the current line
together with
variables where
tokens can be stored
Displays the title of each
page that was found in
the page-counts file
Licensed to   
167
Parsing data
domainCode.setLen(0)
i.inc parseUntil(line, domainCode, {' '}, i)
i.inc
pageTitle.setLen(0)
i.inc parseUntil(line, pageTitle, {' '}, i)
i.inc
countViews = 0
i.inc parseInt(line, countViews, i)
i.inc
totalSize = 0
i.inc parseInt(line, totalSize, i)
proc readPageCounts(filename: string) =
var domainCode = ""
var pageTitle = ""
var countViews = 0
var totalSize = 0
var mostPopular = ("", "", 0, 0)
for line in filename.lines:
parse(line, domainCode, pageTitle, countViews, totalSize)
if domainCode == "en" and countViews > mostPopular[2]:
mostPopular = (domainCode, pageTitle, countViews, totalSize)
echo("Most popular is: ", mostPopular)
when isMainModule:
const file = "pagecounts-20160101-050000"
let filename = getCurrentDir() / file
readPageCounts(filename)
WARNING: RELEASE MODE
Ensure that you compile sequential_counts.nim in
release mode by passing the -d:release flag to the Nim compiler. Without
that flag, the execution time of the application will be significantly longer.
Replace the contents of sequential_counts.nim with the code in listing 6.16, and then
compile it in release mode and run it. After a few seconds, you should see output sim-
ilar to the following.
Most popular is: (Field0: en, Field1: Main_Page, Field2: 271165, Field3: 4791
147476)
The most popular page in the English Wikipedia is in fact the main page! This makes
a lot of sense, and although it’s obvious in hindsight, it’s trivial to edit the code you’ve
written to find more-interesting statistics. I challenge you to edit sequential_counts
.nim and play around with the data. You can try finding the top-10 most popular pages
in the English Wikipedia, or you can download different page-counts files and com-
pare the results.
 You should now have a good understanding of how you can parse data effectively.
You’ve learned what bottlenecks you should look out for in your Nim applications and
how to fix them. The next step is to parallelize this parser so that its execution time is
even lower on multicore CPUs. 
Listing 6.17
Output for sequential_counts.nim
Defines a tuple to store the 
four parsed fields for the most 
popular page
Checks whether the current line
contains information about a
page from the English
Wikipedia and whether its view
count is greater than that of the
currently most popular page
If it’s greater, saves it as the 
new most popular page
Licensed to   
168
CHAPTER 6
Parallelism
6.4
Parallelizing a parser
In order for the program to be parallel, it must make use of threads. As mentioned
previously, there are two ways that threads can be created in Nim: using the threads
module, or using the threadpool module. Both will work, but the threadpool mod-
ule is more appropriate for this program.
6.4.1
Measuring the execution time of sequential_counts
Before we parallelize the code, let’s measure how long sequential_counts takes to
execute.
 This can be done very easily on UNIX-like OSs by using the time command. Exe-
cuting time ./sequential_counts should output the execution time of sequential_
counts.nim. On a MacBook Pro with an SSD and a dual-core 2.7 GHz Intel Core i5
CPU, which includes hyperthreading, the execution time is about 2.8 seconds.
 On Windows, you’ll need to open a new Windows PowerShell window, and
then use the Measure-Command command to measure the execution time. Executing
Measure-Command {./sequential_counts.exe} should output the execution time.
 The program currently runs in a single thread and is very CPU-intensive. This
means its speed can be significantly improved by making it parallel. 
6.4.2
Parallelizing sequential_counts
Create a new parallel_counts.nim file. This is the file that we’ll populate with code
from now on.
 How can the threadpool module be used to parallelize this code? You may be
tempted to spawn the parse procedure, but this won’t work because it needs var
parameters that can’t safely be passed to a spawned procedure. It also wouldn’t help
much, because a single call to parse is relatively quick.
 Before you can parallelize this code, you must first change the way that the page-
counts file is read. Instead of reading each line separately, you need to read the file in
larger fragments. But what size fragment should you read?
 Consider the following scenario. The page-counts file begins with the following
lines:
en Main_Page 123 1234567
en Nim_(programming_language) 100 12415551
If the fragment size is so small that only "en Main_Page" is read, the program will fail
because the size of the fragment is insufficient.
 Alternatively, a fragment might contain valid data at the start, but it may end with a
line that was not fully read, such as "en Main_Page 123 1234567\nen Nim_". This
data will need to be split after every newline ("\n"), and each line will need to be
parsed separately. The last line in this example will lead to an error, because it’s not
complete. A solution is to find where the last line ends, and then defer parsing the
line that hasn’t been fully read until the next time a fragment of the file is read.
Licensed to   
169
Parallelizing a parser
 Here’s how parallel_counts.nim should work:
 Instead of reading lines, a large fragment of text should be read.
 A new procedure called parseChunk should be created. 
 The parseChunk procedure should receive a fragment of text, go through each
line, and pass the line to the parse procedure.
 At the same time, it should check which of the parsed pages are the most popular.
 The parseChunk procedure should be spawned. A slice of the fragment should
be passed to parseChunk, and the slice should not contain any incomplete lines.
 The incomplete line should be saved. Once the next fragment is read, the
incomplete line should be prepended to the newly read fragment.
TERMINOLOGY
The term chunk is synonymous with the term fragment, and
throughout this chapter both will be used interchangeably. A slice means a
subset of the full data, such as a substring.
Listings 6.18, 6.19, and 6.20 show different sections of a parallel_counts.nim file that
implements this solution. 
6.4.3
Type definitions and the parse procedure
Listing 6.18 starts with the top section of the file, which is not much different from the
sequential version. This section includes the import statement, some new type defini-
tions, and the original parse procedure. A new Stats type is defined to store page-
count statistics about a specific page; this type will be used to store the most popular
page in each spawned procedure. The Stats type will be returned from the spawned
procedure, so it must be a ref type because spawn currently can’t spawn procedures
that return custom value types. A new procedure called newStats is also defined,
which constructs a new empty Stats object. There’s also the definition of $, which
converts a Stats type to a string.
import os, parseutils, threadpool, strutils
type
Stats = ref object
domainCode, pageTitle: string
countViews, totalSize: int
proc newStats(): Stats =
Stats(domainCode: "", pageTitle: "", countViews: 0, totalSize: 0)
Listing 6.18
The top section of parallel_counts.nim
The threadpool module is required 
for spawn, and the strutils module 
is required for the % operator.
Defines a new Stats type that will hold 
information about a page’s statistics. 
The type has to be defined as a ref 
because a procedure that returns a 
non-ref type can’t be spawned.
The Stats type defines fields for 
each of the parsed tokens.
Defines a new procedure called newStats that 
acts as a constructor for the Stats type
Licensed to   
170
CHAPTER 6
Parallelism
proc `$`(stats: Stats): string =
"(domainCode: $#, pageTitle: $#, countViews: $#, totalSize: $#)" % [
stats.domainCode, stats.pageTitle, $stats.countViews, $stats.totalSize
]
proc parse(line: string, domainCode, pageTitle: var string,
countViews, totalSize: var int) =
if line.len == 0: return
var i = 0
domainCode.setLen(0)
i.inc parseUntil(line, domainCode, {' '}, i)
i.inc
pageTitle.setLen(0)
i.inc parseUntil(line, pageTitle, {' '}, i)
i.inc
countViews = 0
i.inc parseInt(line, countViews, i)
i.inc
totalSize = 0
i.inc parseInt(line, totalSize, i)
6.4.4
The parseChunk procedure
Listing 6.19 shows the middle section of the parallel_counts.nim file. It defines a new
procedure called parseChunk, which takes a string parameter called chunk and
returns the most popular English Wikipedia page in that fragment. The fragment con-
sists of multiple lines of page-count data.
 The procedure begins by initializing the result variable; the return type is a ref
type that must be initialized so that it’s not nil. The rest of the procedure is similar to
the readPageCounts procedure in the sequential_counts.nim file. It defines four vari-
ables to store the parsed tokens, and then it iterates through the lines in the chunk
using the splitLines iterator, and parses each of the lines.
proc parseChunk(chunk: string): Stats =
result = newStats()
var domainCode = ""
var pageTitle = ""
var countViews = 0
var totalSize = 0
for line in splitLines(chunk):
parse(line, domainCode, pageTitle, countViews, totalSize)
if domainCode == "en" and countViews > result.countViews:
result = Stats(domainCode: domainCode, pageTitle: pageTitle,
countViews: countViews, totalSize: totalSize)
Listing 6.19
The middle section of parallel_counts.nim
Defines a $ operator
for the Stats type so
that it can be
converted to a string
easily. In practice,
this means that echo
can display it.
The parse procedure is the same.
The parseChunk procedure is very 
similar to the readPageCounts 
procedure in sequential_counts.nim.
Initializes the result 
variable with a new value 
of the Stats type
Creates variables 
to store the 
parsed tokens.
Iterates
over
every
line in
chunk
Calls the parse
procedure on each
line inside the chunk
to parse into the 4
fields: domainCode,
pageTitle, countViews,
and totalSize
Checks if the parsed page is in the English Wikipedia and 
whether it got more views than the page stored in result
If that’s the case, result is
assigned the parsed page.
Licensed to   
171
Parallelizing a parser
6.4.5
The parallel readPageCounts procedure
Listing 6.20 shows the readPageCounts procedure, which has been modified signifi-
cantly since the last time you saw it in listing 6.16. It now takes an optional parameter
called chunkSize that determines how many characters it should read each iteration.
But the procedure’s implementation is what differs most. The file is opened manually
using the open procedure, followed by definitions of variables required to properly
store the results of the fragment-reading process.
 The fragment-reading process is complicated by the fact that the code needs to
keep track of unfinished lines. It does so by moving backwards through the contents
of buffer, which stores the fragment temporarily, until it finds a newline character.
The buffer string is then sliced from the start of the fragment to the end of the last
full line in the fragment. The resulting slice is then passed to the parseChunk proce-
dure, which is spawned in a new thread using spawn.
 The end of the fragment that hasn’t yet been parsed is then moved to the beginning
of the buffer. In the next iteration, the length of the characters that will be read will be
chunkSize minus the length of the buffer that wasn’t parsed in the last iteration.
proc readPageCounts(filename: string, chunkSize = 1_000_000) =
var file = open(filename)
var responses = newSeq[FlowVar[Stats]]()
var buffer = newString(chunkSize)
var oldBufferLen = 0
while not endOfFile(file):
let reqSize = chunksize - oldBufferLen
let readSize = file.readChars(buffer, oldBufferLen, reqSize) + oldBufferLen 
var chunkLen = readSize
while chunkLen >= 0 and buffer[chunkLen - 1] notin NewLines:
chunkLen.dec
Listing 6.20
The last section of parallel_counts.nim
The open procedure is now used to 
open a file. It returns a File object 
that’s stored in the file variable.
The readPageCounts procedure now includes 
a chunkSize parameter with a default value of 
1_000_000. The underscores help 
readability and are ignored by Nim.
Defines a new buffer string of
length equal to chunkSize.
Fragments will be stored here.
Defines a new responses sequence
to hold the FlowVar objects that
will be returned by spawn
Defines a variable to store the 
length of the last buffer that 
wasn’t parsed
Loops until the full file is read
Calculates the number of 
characters that need to be read
Uses the readChars procedure to read the reqSize number of
characters. This procedure will place the characters that it
reads starting at oldBufferLen, which will ensure that the old
buffer isn’t overwritten. The oldBufferLen is added because
that’s the length of the old buffer that was read previously.
Creates a variable to store the
fragment length that will be parsed
Decreases the chunkLen variable until
chunkLen - 1 points to any newline character
Licensed to   
172
CHAPTER 6
Parallelism
responses.add(spawn parseChunk(buffer[0 ..  mostPopular.countViews:
mostPopular = statistic
echo("Most popular is: ", mostPopular)
file.close()
when isMainModule:
const file = "pagecounts-20160101-050000"
let filename = getCurrentDir() / file
readPageCounts(filename)
The parallel version is unfortunately more complex, but the complexity is mostly
restricted to the readPageCounts procedure, where the algorithm for reading the file
in fragments adds great complexity to the program. In terms of the line count,
though, the parallel version is only about twice as long. 
6.4.6
The execution time of parallel_counts
Merge listings 6.18, 6.19, and 6.20 into a single parallel_counts.nim file. Then compile
and run the program. Make sure you pass both the --threads:on flag as well as the
-d:release flag to Nim when compiling. Measure the execution time using the tech-
niques described in section 6.4.1.
 On a MacBook Pro with an SSD and a dual core 2.7 GHz Intel Core i5 CPU that
includes hyperthreading, the execution time is about 1.2 seconds, which is less than
half of the 2.8 seconds that the sequential version took to execute. That’s a consider-
able difference!
 On UNIX-like systems, the time command allows you to verify that the parallel ver-
sion is in fact parallel by looking at its CPU usage. For example, the time command out-
puts ./parallel_counts 4.30s user 0.25s system 364% cpu 1.251 total, showing that
parallel_counts was using 364% of the available CPU. In comparison, sequential_
counts almost always shows around 99% CPU usage. This high CPU usage percentage
proves that parallel_counts is using all cores together with hyperthreading.
Assigns the part of the
fragment that wasn’t parsed
to the beginning of buffer
Creates a new thread to execute the 
parseChunk procedure and passes a slice of 
the buffer that contains a fragment that can 
be parsed. Adds the FlowVar[string] 
returned by spawn to the list of responses.
Iterates through each response
Blocks the main thread until the response 
can be read and then saves the response 
value in the statistics variable
Checks if the most popular
page in a particular
fragment is more popular
than the one saved in the
mostPopular variable. If it is,
overwrites the mostPopular
variable with it.
Ensures that the file 
object is closed
Licensed to   
173
Dealing with race conditions
 Now that you’ve seen how to parallelize a parser, you should have a better idea
about how to parallelize Nim code in general. The last sections of this chapter will
teach you about race conditions and how to avoid them. 
6.5
Dealing with race conditions
You don’t typically need to worry about race conditions when writing concurrent code
in Nim because of the restriction that Nim puts on GC-safe procedures: memory
belonging to another thread can’t be accessed in a spawned procedure or a proce-
dure marked using the {.thread.} pragma.
 A race condition occurs when two or more threads attempt to read and write to a
shared resource at the same time. Such behavior can result in unpredictable results
that often are difficult to debug. This is one of the reasons why Nim prevents the shar-
ing of some resources between threads. Nim instead prefers data to be shared using
alternative methods such as channels, which prevent race conditions.
 Sometimes these methods aren’t appropriate for certain use cases, such as when
lots of data needs to be modified by the thread. Because of this, Nim also supports
shared memory. Sharing memory via global variables is easy as long as you only want
to share value types. Sharing reference types is much harder because you must make
use of Nim’s manual memory-management procedures.
WARNING: SHARED MEMORY
Using shared memory is risky because it
increases the chances for race conditions in your code. Also, you must man-
age the memory yourself. I advise you to only use shared memory if you’re
certain that it’s required and if you know what you’re doing. In future ver-
sions of Nim, using shared memory will likely become safer and much easier.
Listing 6.21 implements a simple program that increments the value of a global vari-
able inside two threads running in parallel. The result is a race condition.
import threadpool
var counter = 0
proc increment(x: int) =
for i in 0 .. <x:
var value = counter
value.inc
counter = value
spawn increment(10_000)
spawn increment(10_000)
sync()
echo(counter)
Listing 6.21
Race condition with shared memory
The threadpool module 
defines the spawn procedure.
Defines a global variable called counter
Iterates from 0 to x-1
Defines a new local variable called value 
and assigns it the value of counter
Increments