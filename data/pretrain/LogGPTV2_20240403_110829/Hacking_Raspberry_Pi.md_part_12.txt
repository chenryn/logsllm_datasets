### Understanding Audio Quality and Bitrates

The quality of MP3 audio is significantly influenced by its bitrate. Lower bitrates result in a noticeable degradation of sound quality, while higher bitrates provide a more faithful reproduction of the original audio.

### Obtaining a PicoBoard

The PicoBoard is manufactured and sold by Sparkfun Electronics. As of this writing, the price is $44.95. Please note that the PicoBoard, as sold by Sparkfun, does not include the necessary mini USB cable required for use. Additionally, the PicoBoard uses a mini USB cable, not the micro USB cable used by the Raspberry Pi.

### Using a PicoBoard with Scratch on Raspberry Pi

To ensure optimal performance, the Raspberry Pi requires at least 700 mA of power. It is recommended to use a powered USB hub to connect external devices, including the PicoBoard. 

1. **Powering the PicoBoard:**
   - Connect the PicoBoard’s USB cable to a powered USB hub, not directly to the Raspberry Pi.

2. **Automatic Detection:**
   - The Raspbian OS automatically detects the PicoBoard, making it immediately usable. This is beneficial because you would need to manually install device drivers for Windows and OS X (available from the Cricket website at http://is.gd/GTkHm7).

### Task: Using the PicoBoard in Scratch

Now that you have your PicoBoard, let's learn how to use it with your Raspberry Pi.

1. **Ensure Detection:**
   - Make sure the PicoBoard is plugged in and detected by Scratch. You can test this using the ScratchBoard watcher.
   
2. **Add a ScratchBoard Watcher:**
   - Navigate to the Sensing blocks palette, right-click the slider sensor value block, and select "show ScratchBoard watcher" from the shortcut menu. This adds a Stage monitor (watcher) that displays the current values of all sensors on the PicoBoard.

3. **Download the Scratch Project:**
   - Open a web browser and download the Scratch project called “PicoBoard Tester” (http://is.gd/ry5nra).

4. **Open and Run the Project:**
   - In Scratch, click File > Open, navigate to the downloaded PicoBoard Tester project, open it, and click the Green Flag icon to run it.

5. **Test the Slider:**
   - Move the slider back and forth on the PicoBoard and observe the graphical element on the Stage and the watcher readout value.

6. **Test the Microphone:**
   - Snap your fingers and observe the program’s graphical display and the value on the watcher. The PicoBoard microphone is quite sensitive.

7. **Test the Light Sensor:**
   - Hold the PicoBoard near a light source and then cover the light sensor with your hand. Observe the changes in the Scratch project.

8. **Test the Tactile Pushbutton:**
   - Click the tactile pushbutton on the PicoBoard and watch for changes in the Scratch app.

9. **Test the Alligator Clips:**
   - Plug in one of the alligator clip pairs and touch the metal ends together. Note the changes in the Scratch program indicating a zero-resistance circuit.

### Additional Tips

- **Build Custom Sprites:**
  - Create your own sprites that respond to PicoBoard-detected events.

- **Study Source Code:**
  - Examine the source code of any projects you download from the Scratch website to learn best practices and avoid common pitfalls.

### Chapter 9: Programming Raspberry Pi with Scratch—Next Steps

If you have practiced the Scratch programming skills from Chapter 8, you are ready to develop and share a full-fledged Scratch application. In this chapter, you will create a game called "Dodgeball Challenge."

#### Version Control Revisited

The Scratch Team at the MIT Media Lab has upgraded to Scratch 2.0. While it looks different from Scratch 1.4, the fundamental concepts remain the same. This book focuses on the Raspberry Pi, which includes Scratch 1.4.

#### Begin with the End in Mind

Before coding, consider the following:

- **Purpose:**
  - Build a game in Scratch that tests the player’s reflexes and provides a minute of heart-racing fun. The game, "Dodgeball Challenge," is designed to be a showcase for Scratch’s multimedia capabilities.

- **Audience:**
  - The intended audience includes readers and students learning to program in Scratch, as well as anyone who enjoys simple, addictive video games.

- **Game Overview:**
  - The goal is to survive for 60 seconds without the avatar (Scratch Cat) touching a ball or the edge of the playfield. Every 15 seconds, a new ball is added, increasing the difficulty.

### Let’s Build the Game!

1. **Set Up the Game Screens:**
   - Double-click the Stage to bring it into focus. Use the Paint button to create three additional backgrounds: SplashScreen, Playfield, GameOverBG, and GameWonBG.

2. **Code Blocks for the Game Stage:**
   - Add the code blocks shown in Figure 9.5. These blocks handle the initial splash screen and the start of the game.

3. **Set Up the ScratchCat Sprite:**
   - Rename the Cat sprite to ScratchCat, adjust its size, and set up the block stacks as shown in Figure 9.6. These blocks handle hiding and showing the sprite, mapping mouse movements, setting up the timer, and optional game-over conditions.

4. **Set Up the First Ball (Basketball):**
   - Add the code blocks for the Basketball sprite as shown in Figure 9.7. These blocks handle the initial setup, random movement, and game-ending conditions.

5. **Set Up the Second and Third Balls (Baseball and Beachball):**
   - Set up the Baseball and Beachball sprites similarly to the Basketball, as shown in Figure 9.8. These blocks handle hiding, showing, and game-ending conditions.

### Debugging and Troubleshooting

- **Iterative Development:**
  - Test your project frequently to catch and fix bugs early.

- **Single Stepping Mode:**
  - Enable Single Stepping mode to slow down the execution and better understand the flow of your code.

- **Block-Level Help:**
  - Right-click a block and select "Help" to see a detailed explanation and example usage.

- **Documentation:**
  - Add comments to your code to explain your rationale and make it easier to understand for others.

### Uploading Your Project

- **Share Your Work:**
  - Share your project with the Scratch community to get feedback and contribute to the open-source spirit.

- **Task: Share Your Scratch Project:**
  - Share your project to get it in front of as many eyes as possible, receive constructive criticism, and learn from others.

By following these steps, you will be well on your way to creating and sharing a successful Scratch project.