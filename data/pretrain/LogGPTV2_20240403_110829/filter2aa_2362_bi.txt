251
The most critical analysis point for firewall fuzzing is how much of the appli-
cation protocol the firewall actually implements. A firewall that functions only on
the IP and socket level will not require application-level fuzzers. Against such sim-
ple firewalls, using advanced application-layer fuzzers will often be a waste of time.
In this case, much more effective tests can be found when the firewall is tested with
low-level protocol suites. And due to the speed of the device, you can potentially use
a fuzzing suite with millions of random test cases and still quickly complete the test-
ing. A firewall can easily be tested at line speed, as the processing of the packets is
fast, and needs to be fast. Also, a firewall that implements or integrates with
content-filtering software such as anti-virus and anti-spam functionality should be
tested with file fuzzers over various transport protocols.
Firewalls may also treat most protocols as stateless, no matter how complex
the protocol is in real life.3 For example, a firewall that is proxying the FTP proto-
col may not care that the password is sent before the username, just that each sep-
arate packet conforms to the relevant RFC. Firewalls do not necessarily have to
understand the protocol as well as a true server or client, only well enough to proxy
requests back and forth.
Due to the closed architecture of most firewalls, the monitoring facilities in fire-
wall testing can be complex to set up. What makes this setup difficult, also, is that
for best results one should always use the real server software as the termination
point for the used inputs. However, many test systems will simulate the endpoint,
which makes testing easier, but may not reveal the true functionality of the device.
The best monitoring technique is through combining traditional test target monitor-
ing tools with sets of network analyzers4 at two or four points in the packet route,
one or two analyzers per each hop in the network (Figure 9.1). With this test setup,
you will be able to detect:
• Dropped packets;
• Packets passed unaltered;
• Packets passed altered with differences highlighted;
• Delay, jitter, and packet loss (SLA) statistics for performance and availability
evaluation.
In addition to the available black-box monitoring techniques, the actual device
can also be instrumented with process-monitoring tools. Unfortunately, very few
firewall vendors will provide the low-level access to the device that is needed for
proper monitoring during fuzz testing.
There are many names for this type of testing, most of which are also used to
describe other types of testing. Some call this pass-through testing, although to most
252
Fuzzing Case Studies
3A firewall often takes the simplest route around a problem. The most critical requirement for a
firewall is performance. Keeping state information about thousands of parallel sessions will be
close to impossible.
4Network “taps” are available, for example, from VSS Monitoring (www.vssmonitoring.com/)
and analysis tools for combining numerous message streams from for example Clarified Net-
works (www.clarifiednetworks.com/).
of us with a quality assurance background, that term means testing the pass-
through capability (performance) of a device. Others call this type of test setup
proxy-testing or end-to-end testing. When fuzzing is done both ways, it can also be
called cross-talk fuzzing. Also, for example, Ixia has a test methodology called “No
Drop Throughput Test,” which has similarities. Perhaps, the correct fuzzing vari-
ant of this would be “No Drop Fuzz Test.” This type of testing is sometimes also
called “impairment” testing. End-to-end fuzzing is most probably the most general-
purpose term for this type of test setup, as the SUT can consist of more than one
network component, and the tests often need to be analyzed against real end-points
and not just in simulated environments.
An example result of analyzing an end-to-end fuzzing shows that only a small
portion of fuzz tests either pass through the test network or are completely
blocked. Most tests result in various unbalanced results in a complex network
infrastructure involving perimeter defenses and other proxy components (Figure
9.2).5 When the fuzzed test cases involve a complex message flow, some part of the
test cases can be modified, non-fuzzed messages can be dropped, or responses can
be modified somewhere along the route. The result is very difficult to analyze with-
out very intelligent network analyzers. This modification of messages is often
intended behavior in, for example, a proxy implementing back-to-back user agent
(B2BUA) functionality.
9.1.2
VPN Fuzzing
As attractive as a VPN may be as an enterprise security solution, it can also be a big
security challenge. The protocols comprising typical VPN implementations are
many, and they are extremely complex, giving a lot of opportunities for implemen-
tation errors. Many of the tests are run with or inside encrypted messages and tun-
neled streams, making test analysis very challenging.
9.1
Enterprise Fuzzing
253
Figure 9.1
Proxy fuzzing testbed with monitoring requirements.
5Image from Clarified Networks. www.clarifiednetworks.com
Each VPN can typically be configured to support a wide range of different tun-
neling and encryption protocols, augmented with complex authentication proto-
cols and key exchange protocols.
• Tunneling:
• L2TP
• MPLS
• Encryption:
• IPSec
• TLS/SSL (includes key exchange)
• SSH1 and SSH2 (includes key exchange)
• Authentication:
• Radius
• Kerberos
• PPTP
• EAP
• CHAP and MS-CHAP
• Key exchange:
• ISAKMP/IKEv1
• IKEv2
So basically, a VPN is an Internet-facing device whose interior side resides
within an internal subnet of the enterprise. Furthermore, it processes numerous
254
Fuzzing Case Studies
Figure 9.2
Example analysis of end-to-end fuzzing using Clarified Networks analyzator and
Codenomicon fuzzer.
complex protocols. In other words, these devices are a security nightmare and need
to be tested for all protocols that they support. Security protocols used in VPNS
require sophistication from the fuzzer. For example, a SSL/TLS fuzzer needs to
implement full capability to all encryption algorithms used in various TLS servers
and clients. Codenomicon tools for SSL/TLS fuzzing are one example of a fuzzer
that implements the encryption protocol fully to be able to fuzz it (Figure 9.3).
As VPN client devices are often accessing the VPN server over the Internet, they
also need to be carefully tested for client-side vulnerabilities. VPN client fuzzers
combine similar challenges; namely, they need to implement the protocol at least at
some level, and also, similarly to browser fuzzing, they are slow to execute as they
test the client side.
9.2
Carrier and Service Provider Fuzzing
Carriers and service providers were simple entities in the past world of legacy
telecommunications, but more and more of these types of companies are today
involved in both carrying traffic and providing service to enterprises and con-
sumers. The carrier-type business is mostly about getting a specific stream to its
intended recipient, although today there are more and more content-aware offer-
ings. Protocols such as MPLS are used to label and prioritize various types of traf-
fic. The service-provider-type business is adding value through services such as
VoIP, e-mail, or web hosting, with or without providing the last mile connection to
the customer.
9.2
Carrier and Service Provider Fuzzing
255
Figure 9.3
The third-generation TLS fuzzer from Codenomicon.
A carrier or service provider is always handling untrusted data. In such environ-
ment, all users will also be untrusted. All customers will have access to business-
critical services, and this can enable customers to attack services. All customers can
also potentially attack services of others using the network and the identity provided
by the service provider. It should come as no surprise that the Internet service
provider segment is one of the biggest consumers of fuzzing tools. From this seg-
ment, we have chosen two case studies: Voice over IP (VoIP) and WiFi (also called
WLAN by some).
9.2.1
VoIP Fuzzing
Whereas enterprise VoIP is just another data service, in telecommunications it is a
critical service that is destined to replace all legacy telephony. However, building
VoIP is anything but simple.6 In VoIP, the device itself often maintains the identity
of the callee and caller, and theft of such a device or possession of the processing
capability of such a device will allow someone to impersonate people and conduct
fraud. An attack against VoIP clients is an even greater threat than disabling a cen-
tralized server, which is under the control of the provider and is thus easier to main-
tain and secure. All VoIP infrastructures are also always handling critical data
because almost no single call flow is securely encrypted from end-to-end, but often
use hop-to-hop encryption. Access to any intermediary machine will allow someone
to eavesdrop on all calls using that particular machine.
Protocols used in VoIP include those dedicated for signaling and others for the
actual media, such as voice. In addition to those, a wide range of other protocols are
used.
Signaling protocols include
• SIP and SDP;
• H.323;
• RTSP;
• Sigtran (SS7 over IP).
Media protocols include
• RTP (and encrypted variants);
• RTCP.
Other protocols used in VoIP also include
• IPv4 and IPv6 (both UDP and TCP);
• SCTP;
• TLS/SSL;
• Diameter and Radius;
256
Fuzzing Case Studies
6 For more information about VoIP Security, check out: Peter Thermos & Ari Takanen. (2007).
Securing VoIP Networks—Threats, Vulnerabilities, and Countermeasures. Boston: Addison-
Wesley.
• DHCP, DNS and ENUM extensions to those;
• SigComp;
• RSVP.
All VoIP implementations must have both client and server functionality, which
is required in order to both make calls and to receive them. In SIP, these compo-
nents are called SIP-UAC (User-Agent Client) and SIP-UAS (User-Agent Server).
Testing both requires two fuzzer configurations, or test tools. Additionally, signal-
ing protocols can be used on top of both TCP/IP and UDP.
In a typical configuration, many VoIP signaling protocols travel through dedi-
cated infrastructure, and authentication is performed against this same infrastruc-
ture. The media protocols such as RTP are often point-to-point, with messages
arriving from arbitrary clients on the Internet. This places special requirements for
fuzzing media protocols such as RTP and RTCP.
9.2.2
WiFi Fuzzing
Wireless fuzzing is a special field, with some special requirements for the equipment
being tested. Not all wireless devices advertise themselves, and therefore the tools
need to have advanced scanning techniques or need to be configured to detect the
device under test (DUT). Wireless networks are always open; there is no physical
wire or network device protecting a user from attackers. With adequate amplifiers,
the range of wireless networks can be surprisingly long. For example, short-range
wireless devices such as Bluetooth (about 10 meter range) have been attacked from
up to a kilometer away.
A WiFi fuzzer will break the wireless 802.11 frames at any layer below IP trans-
port (Figure 9.4). As the frames are broadcast over the wireless network, any device
9.2
Carrier and Service Provider Fuzzing
257
Figure 9.4
802.11 frame fuzzed with Codenomicon fuzzer.
Table 9.1
Results of Fuzzing Wireless Devices
AP1
AP2
AP3
AP4
AP5
AP6
AP7
WLAN
INC
FAIL
INC
FAIL
N/A
INC
INC
33%
IPv4
FAIL
PASS
FAIL
PASS
N/A
FAIL
INC
50%
ARP
PASS
PASS
PASS
N/A
FAIL
PASS
PASS
16%
TCP
N/A
N/A
FAIL
N/A
FAIL
PASS
N/A
66%
HTTP
N/A
PASS
FAIL
PASS
INC
FAIL
FAIL
50%
DHCP
FAIL
FAIL
INC
N/A
FAIL
FAIL
N/A
80%
50%
40%
50%
33%
75%
50%
25%
on the same channel can detect fuzzed wireless frames and crash. Therefore, tests
should always be performed in a physically protected area, such as in a Faraday
cage. This can require additional planning for the test setup. As wireless fuzzers
require tailored hardware for access to low-level wireless frames, they always need
to be certified for use in different markets. Without such certification, testers can-
not use the tools outside protected test environments.
Note that many tool vendors advertise wireless fuzzing, but what they really
mean is that they can inject IP frames over a wireless network. They do not neces-
sarily break the wireless packets themselves, but rather focus on traditional appli-
cation fuzzing.
The WiFi specifications that a fuzzing tool should test include
• Management frames;
• Open authentication;
• QoS parameters;
• WEP;
• WPA1;
• WPA2;
• IEEE 802.1X / EAPOL.
When you are testing access points and not the client implementations, you will
most probably also want to test the following interfaces:
• IPv4, at least ARP, UDP and TCP;
• HTTP;
• DHCP.
In a fuzzing study against seven different WiFi access points, we noted that all
access points could be crashed with at least some type of fuzzing.7 In Table 9.1, we
can see that 33% of the devices crashed with fuzzing. The remaining devices did
not actually pass the tests, but the test resulted in some other instabilities. These
failures were not analyzed any further. These poor testing results with WiFi fuzzing
258
Fuzzing Case Studies
7Ari Takanen and Sami Petäjäsoja. “Assuring the Robustness and Security of New Wireless Tech-
nologies.” Presentation and paper at ISSE/SECURE 2007 conference, Warsaw, Poland. October
3, 2007.
were to be expected as none of these devices had probably been fuzzed before. But,
a more serious result was that even simple DHCP fuzzing was able to crash four out
of the five devices. N/A in the table means those tests were not executed due to time
limitations.
9.3
Application Developer Fuzzing
Perhaps the most common area of fuzzing is in application fuzzing. For most indi-
viduals, the most interesting target of tests is some self-developed web application
or a piece of software running on a standard operating system such as Linux or
Windows. This is also an area where most open-source fuzzers operate.
9.3.1
Command-Line Application Fuzzing
The first publicly known fuzzer,8 The Fuzz, by Prof. Barton Miller and his team, tar-
geted command line utilities in Unix-style operating systems. Later, those tests were
also extended to cover various Microsoft and Apple operating system versions.
Simply, a command-line application fuzzer will execute commands (or scripts)
that take their parameters over the command line. Originally, this was an issue with
“Set User ID” or SUID9 commands in Unix, but later, these fuzzed inputs were
noted to cause security issues with any commands that can be launched over remote
triggers, such as media received over the Internet, or launched by server-side scripts.
9.3.2
File Fuzzing
File fuzzing is the simplest form of fuzzing. In file fuzzing, you either take a file and
mutate it (mutation-based fuzzing), or you teach your fuzzer the specification of the
file type and generate the fuzzed files (generational-based fuzzing). File fuzzing is
simpler than simple stateless request-response protocols because there usually is no
state information involved. The tests are static. Once generated, you can reuse them