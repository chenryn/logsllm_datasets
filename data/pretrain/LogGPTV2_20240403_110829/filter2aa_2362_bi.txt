### Firewall Fuzzing Analysis

The most critical aspect of firewall fuzzing is determining the extent to which the firewall implements the application protocol. A firewall that operates solely at the IP and socket level does not require application-level fuzzers. For such basic firewalls, using advanced application-layer fuzzers is often inefficient. Instead, more effective tests can be conducted using low-level protocol suites. Given the speed of these devices, you can potentially run millions of random test cases and still complete testing quickly. Firewalls are designed to process packets rapidly, making it feasible to test them at line speed.

Firewalls that integrate with content-filtering software, such as anti-virus and anti-spam functionalities, should be tested with file fuzzers over various transport protocols. Additionally, firewalls may treat most protocols as stateless, regardless of their actual complexity. For instance, a firewall proxying FTP might not care about the order of the username and password, as long as each packet conforms to the relevant RFC. Firewalls do not need to understand the protocol as deeply as a true server or client; they only need to proxy requests effectively.

### Monitoring in Firewall Testing

Setting up monitoring for firewall testing can be challenging due to the closed architecture of most firewalls. For optimal results, it is best to use real server software as the endpoint for inputs. However, many test systems simulate the endpoint, which simplifies testing but may not reveal the true functionality of the device. The best monitoring technique involves combining traditional test target monitoring tools with network analyzers at two or four points in the packet route, one or two analyzers per hop (Figure 9.1). This setup allows for the detection of:

- Dropped packets
- Unaltered packets
- Altered packets with highlighted differences
- Delay, jitter, and packet loss (SLA) statistics for performance and availability evaluation

While black-box monitoring techniques are available, the device itself can also be instrumented with process-monitoring tools. Unfortunately, few firewall vendors provide the necessary low-level access for proper monitoring during fuzz testing.

### Types of Firewall Fuzzing

This type of testing has several names, including pass-through testing, proxy-testing, end-to-end testing, and cross-talk fuzzing. Some methodologies, like Ixia's "No Drop Throughput Test," share similarities. End-to-end fuzzing is the most general term, as it can involve multiple network components and requires analysis against real endpoints rather than simulated environments.

An example result of end-to-end fuzzing shows that only a small portion of fuzz tests either pass through the test network or are completely blocked. Most tests result in unbalanced outcomes in complex network infrastructures involving perimeter defenses and other proxy components (Figure 9.2). Analyzing these results requires sophisticated network analyzers, especially when dealing with complex message flows where parts of the test cases can be modified, non-fuzzed messages dropped, or responses altered.

### VPN Fuzzing

VPNs, while attractive as enterprise security solutions, present significant security challenges. They support a wide range of tunneling and encryption protocols, making them complex and prone to implementation errors. Many tests involve encrypted messages and tunneled streams, complicating test analysis.

Common protocols in VPNs include:

- **Tunneling:**
  - L2TP
  - MPLS
- **Encryption:**
  - IPSec
  - TLS/SSL (includes key exchange)
  - SSH1 and SSH2 (includes key exchange)
- **Authentication:**
  - Radius
  - Kerberos
  - PPTP
  - EAP
  - CHAP and MS-CHAP
- **Key Exchange:**
  - ISAKMP/IKEv1
  - IKEv2

VPNs are Internet-facing devices with an internal side within the enterprise. They process numerous complex protocols, making them a security challenge. Security protocols in VPNs require sophisticated fuzzers. For example, an SSL/TLS fuzzer must implement full capability for all encryption algorithms used in various TLS servers and clients. Codenomicon tools are an example of a fuzzer that fully implements the encryption protocol (Figure 9.3).

VPN client devices, which often access the VPN server over the Internet, need to be tested for client-side vulnerabilities. These fuzzers must implement the protocol at some level and, like browser fuzzers, are slow to execute.

### Carrier and Service Provider Fuzzing

Carriers and service providers, once simple entities in legacy telecommunications, now offer both traffic carriage and services to enterprises and consumers. Carriers focus on delivering specific streams, while service providers add value through services like VoIP, e-mail, and web hosting.

In such environments, all users are untrusted, and all customers have access to business-critical services, enabling potential attacks. The ISP segment is a major consumer of fuzzing tools. Two case studies in this area are VoIP and WiFi.

#### VoIP Fuzzing

VoIP is a critical service in telecommunications, destined to replace legacy telephony. Building VoIP is complex, as the device maintains the identity of the caller and callee. Theft or control of such a device can lead to impersonation and fraud. VoIP clients are particularly vulnerable, and almost no call flow is securely encrypted end-to-end. Access to intermediary machines can allow eavesdropping.

Protocols in VoIP include:

- **Signaling:**
  - SIP and SDP
  - H.323
  - RTSP
  - Sigtran (SS7 over IP)
- **Media:**
  - RTP (and encrypted variants)
  - RTCP
- **Other:**
  - IPv4 and IPv6 (both UDP and TCP)
  - SCTP
  - TLS/SSL
  - Diameter and Radius
  - DHCP, DNS, and ENUM extensions
  - SigComp
  - RSVP

VoIP implementations require both client and server functionality. Testing both requires two fuzzer configurations. Signaling protocols can run on top of both TCP/IP and UDP. Media protocols like RTP often travel point-to-point, requiring special fuzzing considerations.

#### WiFi Fuzzing

WiFi fuzzing is a specialized field with unique requirements. Not all wireless devices advertise themselves, so advanced scanning techniques or configuration to detect the device under test (DUT) are needed. Wireless networks are inherently open, and their range can be extended with amplifiers.

A WiFi fuzzer breaks 802.11 frames at any layer below IP transport (Figure 9.4). As frames are broadcast, any device on the same channel can detect and crash. Tests should be performed in a physically protected area, such as a Faraday cage. WiFi fuzzers require tailored hardware and certification for different markets.

WiFi specifications to test include:

- Management frames
- Open authentication
- QoS parameters
- WEP
- WPA1
- WPA2
- IEEE 802.1X / EAPOL

When testing access points, additional interfaces to test include IPv4, ARP, UDP, TCP, HTTP, and DHCP. In a study of seven WiFi access points, all could be crashed with some type of fuzzing (Table 9.1). Even simple DHCP fuzzing crashed four out of five devices.

### Application Developer Fuzzing

Application fuzzing is perhaps the most common area, targeting self-developed web applications or software running on standard operating systems like Linux or Windows. This is also where many open-source fuzzers operate.

#### Command-Line Application Fuzzing

The first publicly known fuzzer, "The Fuzz" by Prof. Barton Miller, targeted command-line utilities in Unix-style operating systems. These tests were later extended to cover Microsoft and Apple operating systems. Command-line application fuzzers execute commands or scripts with parameters provided over the command line. Originally, this was an issue with SUID commands, but it was later found to cause security issues with any remotely triggered commands.

#### File Fuzzing

File fuzzing is the simplest form of fuzzing. It involves either mutating a file (mutation-based fuzzing) or generating fuzzed files based on the file type specification (generational-based fuzzing). File fuzzing is simpler than stateless request-response protocols because there is usually no state information involved. Once generated, the tests can be reused.