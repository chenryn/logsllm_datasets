title:ÆGIS: Shielding Vulnerable Smart Contracts Against Attacks
author:Christof Ferreira Torres and
Mathis Baden and
Robert Norvill and
Beltran Borja Fiz Pontiveros and
Hugo Jonker and
Sjouke Mauw
0
2
0
2
r
a
M
2
1
]
R
C
.
s
c
[
1
v
7
8
9
5
0
.
3
0
0
2
:
v
i
X
r
a
ÆGIS: Shielding Vulnerable Smart Contracts Against A(cid:130)acks
Christof Ferreira Torres
SnT, University of Luxembourg
Luxembourg, Luxembourg
PI:EMAIL
Beltran Borja Fiz Pontiveros
SnT, University of Luxembourg
Luxembourg, Luxembourg
beltran.(cid:128)PI:EMAIL
Mathis Baden
SnT, University of Luxembourg
Luxembourg, Luxembourg
PI:EMAIL
Robert Norvill
SnT, University of Luxembourg
Luxembourg, Luxembourg
PI:EMAIL
Hugo Jonker
1Open University of the Netherlands
Heerlen, Netherlands
2Radboud University
Nijmegen, Netherlands
PI:EMAIL
Sjouke Mauw
SnT, University of Luxembourg
Luxembourg, Luxembourg
PI:EMAIL
ABSTRACT
In recent years, smart contracts have su(cid:130)ered major exploits, cost-
ing millions of dollars. Unlike traditional programs, smart contracts
are deployed on a blockchain. As such, they cannot be modi(cid:128)ed
once deployed. (cid:140)ough various tools have been proposed to detect
vulnerable smart contracts, the majority fails to protect vulnera-
ble contracts that have already been deployed on the blockchain.
Only very few solutions have been proposed so far to tackle the
issue of post-deployment. However, these solutions su(cid:130)er from low
precision and are not generic enough to prevent any type of a(cid:138)ack.
In this work, we introduce ÆGIS, a dynamic analysis tool that
protects smart contracts from being exploited during runtime. Its
capability of detecting new vulnerabilities can easily be extended
through so-called a(cid:138)ack pa(cid:138)erns. (cid:140)ese pa(cid:138)erns are wri(cid:138)en in a
domain-speci(cid:128)c language that is tailored to the execution model of
Ethereum smart contracts. (cid:140)e language enables the description of
malicious control and data (cid:131)ows. In addition, we propose a novel
mechanism to streamline and speed up the process of managing
a(cid:138)ack pa(cid:138)erns. Pa(cid:138)erns are voted upon and stored via a smart
contract, thus leveraging the bene(cid:128)ts of tamper-resistance and
transparency provided by the blockchain. We compare ÆGIS to
current state-of-the-art tools and demonstrate that our solution
achieves higher precision in detecting a(cid:138)acks. Finally, we perform
a large-scale analysis on the (cid:128)rst 4.5 million blocks of the Ethereum
blockchain, thereby con(cid:128)rming the occurrences of well reported
and yet unreported a(cid:138)acks in the wild.
KEYWORDS
Ethereum; Smart contracts; Exploit prevention; Security updates
1 INTRODUCTION
Blockchain has evolved greatly since its (cid:128)rst introduction in 2009 [25].
A blockchain is essentially a veri(cid:128)able, append-only list of records
in which all transactions are recorded in batches of so-called blocks.
Each block is linked to a previous block via a cryptographic hash.
(cid:140)is linked list of blocks is maintained by a decentralised peer-
to-peer network. (cid:140)e peers in this network follow a consensus
protocol that dictates which peer is allowed to append the next
block. By introducing the concept of smart contracts, Ethereum [41]
revolutionized the way digital assets are traded. As smart contracts
govern more and more valuable assets, the contracts themselves
have come under a(cid:138)ack from hackers.
Smart contracts are programs that are stored and executed across
blockchain peers. (cid:140)ey are deployed and invoked via transactions.
Deployed smart contracts are immutable, thus any bugs present
during deployment [2], or as a result of changes to the blockchain
protocol [7], can make a smart contract vulnerable. Moreover, since
contract owners are anonymous, responsible disclosure is usually
infeasible or very hard in practice. (cid:140)ough smart contracts can
be implemented with upgradeability and destroyability in mind,
this is not compulsory. As a ma(cid:138)er of fact, Ethereum already faced
several devastating a(cid:138)acks on vulnerable smart contracts.
In 2016, an a(cid:138)acker exploited a reentrancy bug in a crowdfund-
ing smart contract known as the DAO. (cid:140)e a(cid:138)acker exploited the
capability of recursively calling a payout function contained in the
contract. (cid:140)e a(cid:138)acker managed to drain over $150 million [32]
worth of cryptocurrency from the smart contract. (cid:140)e DAO hack
was a poignant demonstration of the impact that insecure smart
contracts can have. (cid:140)e Ethereum market cap value dropped from
over $1.6 billion before the a(cid:138)ack, to values below $1 billion a(cid:137)er
the a(cid:138)ack, in less than a day. Another example happened with the
planned Constantinople hard fork in January 2019. Ethereum was
scheduled to receive an update intended to introduce a cheaper
gas cost for certain smart contract operations. On the eve of the
hard fork, a new reentrancy issue caused by this update was de-
tected. It turned out that the reduction of gas costs also enabled
reentrancy a(cid:138)acks on smart contracts that were previously secure.
(cid:140)is resulted in the update being delayed [7]. A third example is
the Parity wallet hack. In 2017, the Parity wallet smart contract
was a(cid:138)acked twice due to a bug in the access control logic. (cid:140)e
bug allowed anyone to claim ownership of the smart contract and
to take control of all the funds. (cid:140)e (cid:128)rst a(cid:138)ack resulted in over
$30 million being stolen [44], whereas the second a(cid:138)ack resulted
in roughly $155 million being locked forever [29].
(cid:140)e manner in which these issues are currently handled is not
ideal. At the moment, whenever a major vulnerability is detected by
the Ethereum community, it can take several days or weeks for the
community to issue a critical update and even longer for all nodes to
adopt this update. Such a delay extends the window for exploitation
and can have dire e(cid:130)ects on the trading value of the underlying
cryptocurrency. Moreover, the lack of a standardised procedure to
deal with vulnerable smart contracts, has led to a “Wild West”-like
situation where several self-appointed white hats started a(cid:138)acking
smart contracts in order to protect the funds that are at risk from
other malicious a(cid:138)ackers [4]. However, in some cases the e(cid:130)ects of
a(cid:138)acks can cause a split in the community so contentious that it
leads to a hard fork, such as in the case of the DAO hack which led
to the birth of the Ethereum classic blockchain [32].
Academia has proposed a plethora of di(cid:130)erent tools that al-
low users to scan smart contracts for vulnerabilities prior to de-
ploying them on the blockchain or interacting with them (see
e.g. [21, 23, 36, 38]). However, by design these tools cannot protect
vulnerable contracts that have already been deployed. Grossman et
al. [12] are the (cid:128)rst to present ECFChecker, a tool that allows to
dynamically check executed transactions for reentrancy. However,
ECFChecker does not prevent reentrancy a(cid:138)acks. In order to pro-
tect already deployed contracts, Rodler et al. [31] propose Sereum,
a modi(cid:128)ed Ethereum client that detects and reverts1 transactions
that trigger reentrancy a(cid:138)acks. Sereum leverages the principle
that every exploit is performed via a transaction. Unfortunately,
Sereum has three major drawbacks. First, it requires the client to
be modi(cid:128)ed whenever a new type of vulnerability is found. Second,
not only the tool itself, but also any updates to it must be manu-
ally adopted by the majority of nodes for its security provisions
to become e(cid:130)ective. (cid:140)ird, their detection technique can only de-
tect reentrancy a(cid:138)acks, despite there being many other types of
a(cid:138)acks [2].
In summary, we make the following contributions:
• We introduce a novel domain-speci(cid:128)c language, which
enables the description of so-called a(cid:136)ack pa(cid:136)erns. (cid:140)ese
pa(cid:138)erns re(cid:131)ect malicious control and data (cid:131)ows that occur
during execution of malicious transactions.
• We present ÆGIS, a tool that reverts malicious transac-
tions in real-time using a(cid:138)ack pa(cid:138)erns, thereby preventing
a(cid:138)acks on deployed smart contracts.
• We propose a novel way to quickly propagate security up-
dates without relying on client-side update mechanisms, by
making use of a smart contract to store and vote upon new
a(cid:138)ack pa(cid:138)erns. Storing pa(cid:138)erns in a smart contract en-
sures integrity, decentralizes security updates and provides
full transparency on the proposed pa(cid:138)erns.
• We illustrate the e(cid:130)ectiveness by providing pa(cid:138)erns to
prevent the two most prominent hacks in Ethereum, the
DAO and Parity wallet hacks.
• Finally, we provide a detailed comparison to current state-
of-the-art runtime detection tools and perform a large-scale
analysis on 4.5 million blocks. (cid:140)e results demonstrate that
ÆGIS achieves be(cid:138)er precision than current state-of-the-
art tools.
2 BACKGROUND
In this section, we provide the necessary background for under-
standing the se(cid:138)ing of our work. We describe the Ethereum block-
chain and its capability of executing smart contracts. We focus on
1Consuming gas, without le(cid:138)ing the transaction a(cid:130)ect the state of the blockchain.
2
Ethereum since it is currently the most prominent blockchain plat-
form when it comes to smart contract deployment. Finally, we also
provide background information on the two most prominent smart
contract vulnerabilities, namely, reentrancy and access control.
2.1 Ethereum and Smart Contracts
Ethereum. (cid:140)e Ethereum blockchain is a decentralized public
ledger that is maintained by a network of nodes that distrust one
another. Every node runs one of several existing Ethereum clients.
(cid:140)e clients can operate with di(cid:130)erent con(cid:128)gurations. For instance,
nodes who are con(cid:128)gured to mine blocks are called miners. Miners
execute transactions, include them in blocks and append them
to the blockchain. (cid:140)ey compete to create a block by solving a
cryptographic puzzle. Once they succeed, the block is proposed to
the network. Other miners verify the new block and either accept
or reject it. A miner whose block is included in the blockchain
is rewarded with a block reward and the execution fees from the
included transactions.
Transactions. Transactions are used to modify state in Ethereum.
As such, they allow users to transfer ether (Ethereum’s cryptocur-
rency), and to create smart contracts or trigger their execution.
Transactions are created using an account. (cid:140)ere are two types of
accounts in Ethereum, user accounts and contract accounts. Trans-
actions are given a certain amount of gas to execute, called the gas
limit. Gas is a unit which is used to measure the use of computing
resources. Gas can be converted to ether through the so-called gas
price of a transaction. Gas limit and gas price can be chosen by the
creator of the transaction. Together they determine the fee that
the user is willing to pay for the inclusion of their transaction into
the blockchain. Moreover, transactions also contain a destination
address. It identi(cid:128)es the recipient of the transaction, and it can
be either a user account or a smart contract. Transactions can
also carry value that is transferred to the recipient. Once created,
transactions are broadcast to the network. Miners then execute
the transactions and include them into blocks. Smart contracts (i.e.
contract accounts) are created by leaving the destination address
of a transaction empty. (cid:140)e bytecode that is provided within the
transaction is then copied into the blockchain and it is given a
unique address that identi(cid:128)es the smart contract.
Smart Contracts. Smart contracts are fully-(cid:131)edged programs that
are stored and executed across the blockchain. (cid:140)ey are developed
using a dedicated high-level programming language that compiles
into low-level bytecode. (cid:140)is bytecode gets interpreted by the
Ethereum Virtual Machine. Smart contracts contain functions that
can be triggered via transactions. (cid:140)e name of the function as
well as the data to be executed is included in the data (cid:128)eld of the
transaction. A default function or so-called fallback function is
executed whenever the provided function name is not recognized
by the smart contract. Moreover, smart contracts can initiate calls
to other smart contracts. (cid:140)us, a single transaction may interact
with several smart contracts that call one another. By default smart
contracts cannot be destroyed or updated. It is the task of the
developer to implement these capabilities before deploying the
smart contract. Unfortunately, many smart contracts are released
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
contract A { // Victim contract
...
function withdraw () public {
if ( credit [ msg . sender ]) {
msg . sender . call . value ( credit [ msg . sender ]) () ;
credit [ msg . sender ] = 0;
}
}
contract B { // Exploiting contract
...
function () public payable {
A. withdraw () ;
}
}
Figure 1: Example of a reentrancy vulnerability.
without destroyability or upgradeability in mind. As a result, many