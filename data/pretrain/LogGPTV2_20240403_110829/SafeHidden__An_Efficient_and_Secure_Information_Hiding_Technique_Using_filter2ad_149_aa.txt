# SafeHidden: An Efficient and Secure Information Hiding Technique Using Re-randomization

**Authors:**
- Zhe Wang
- Chenggang Wu
- Yinqian Zhang
- Bowen Tang
- Pen-Chung Yew
- Mengyao Xie
- Yuanming Lai
- Yan Kang
- Yueqiang Cheng
- Zhiping Shi

**Affiliations:**
- Zhe Wang, Chenggang Wu, Bowen Tang, Mengyao Xie, Yuanming Lai, and Yan Kang: State Key Laboratory of Computer Architecture, Institute of Computing Technology, Chinese Academy of Sciences, University of Chinese Academy of Sciences
- Yinqian Zhang: The Ohio State University
- Pen-Chung Yew: University of Minnesota at Twin-Cities
- Yueqiang Cheng: Baidu USA
- Zhiping Shi: The Capital Normal University

**Conference:**
- 28th USENIX Security Symposium
- August 14â€“16, 2019, Santa Clara, CA, USA
- Proceedings ISBN: 978-1-939133-06-9
- Open access sponsored by USENIX

## Abstract

Information hiding (IH) is a critical component in many defenses against code reuse attacks, such as code-pointer integrity (CPI), control-flow integrity (CFI), and fine-grained code (re-)randomization. IH employs randomization to probabilistically "hide" sensitive memory areas, called safe areas, from attackers, ensuring their addresses are not directly leaked through pointers. These defenses use safe areas to protect critical data like jump targets and randomization secrets. However, recent studies have shown that IH is vulnerable to various attacks.

In this paper, we introduce SafeHidden, a new IH technique that continuously re-randomizes the locations of safe areas, preventing attackers from probing and inferring the memory layout. We propose a thread-private memory mechanism to isolate thread-local safe areas and prevent adversaries from reducing the randomization entropy. Additionally, SafeHidden randomizes safe areas after Translation Lookaside Buffer (TLB) misses to thwart cache side-channel attacks. Existing IH-based defenses can integrate SafeHidden without any modifications. Our experiments demonstrate that SafeHidden effectively mitigates existing attacks while incurring minimal performance overhead.

## 1. Introduction

Information hiding (IH) is a software-based security technique that conceals a memory block, known as a "safe area," by randomly placing it within a large virtual address space. This makes it difficult for attackers to perform memory hijacking attacks that rely on data within the safe area. Since all pointers to the safe area are concealed, attackers cannot reuse existing pointers to access it. The vast virtual address space, mostly inaccessible to attackers, ensures high randomization entropy, making brute-force probing attacks extremely challenging. Due to its effectiveness and efficiency, IH has become a fundamental building block for many defenses against code reuse attacks, including CPI, CFI, and fine-grained code (re-)randomization.

However, recent advances in software attacks have exposed vulnerabilities in IH. Some attacks exploit system features to avoid crashes during memory scanning, while others use new techniques to infer the location of safe areas. For instance, some attacks gauge unmapped regions, duplicate safe areas using thread spraying, or leverage cache-based side-channel attacks. These developments have significantly undermined the security promises of IH and threatened the defenses that depend on it.

To counter these threats, we propose SafeHidden, a novel IH technique. Our key insight is that the security of IH relies on high entropy in the location of safe areas and the assumption that no attacks can reduce this entropy undetected. Prior IH techniques failed because they relied solely on program crashes to detect attacks, but recent attacks have devised methods to reduce entropy without crashing the program.

SafeHidden addresses these issues by continuously re-randomizing safe areas, mediating probes that may leak their locations, and isolating thread-local safe areas. It triggers re-randomization upon detecting legal but suspicious probes and raises security alarms for illegal probes. To differentiate between accidental accesses to unmapped memory and illegal probing, SafeHidden converts safe areas into trap areas after each re-randomization, flagging any access to these trap areas. This ensures that any attempt to reduce the entropy either leads to re-randomization or a security alarm.

## 2. Background and Motivation

### 2.1 Information Hiding

Information hiding (IH) is a simple and efficient isolation defense that protects data stored in a safe area by placing it at a random location in a large virtual address space. No pointers to the safe area exist in regular memory, making it difficult for attackers to find its location. Accesses to the safe area are typically done through an offset from a dedicated register. Table 1 lists several defenses that use IH, detailing whether the safe area is thread-local, the frequency of access, the content protected, and the designated register used.

| Defense | TL | AF | Content in Protected Objects | Reg |
|---------|----|----|-------------------------------|-----|
| O-CFI [40] | No | High | Address boundaries of basic blocks | %gs |
| RERANZ [57] | Yes | High | Real return address table | %gs |
| Isomeron [15] | No | High | Execution diversifier data | %rsp |
| ASLR-Guard [36] | Yes | High | ELF section remapping information | %fs |
| AG-Stack | Yes | High | Sensitive pointers and bounds | %gs |
| Safe-stack | No | High | Return address, spilled registers | %rsp |
| Randomization-agnostic translation table | No | High | Translation table with assigned indexes | %gs |
| Oxymoron [4] | No | Low | Code pointer table | %gs |
| Shuffler [59] | No | High | File name and descriptors | %gs |
| CFCI [61] | No | High | Code pointer table | %gs |

A safe area is usually small, often limited to 8 MB, providing high randomization entropy (2^24). This makes brute-force probing attacks impractical, as a failed guess results in a crash and detection.

### 2.2 Attacks against Information Hiding

Recent research has shown that IH is vulnerable to various attacks. Attackers may improve memory scanning techniques to avoid crashes or trigger legal access to the safe area and infer its virtual address using side-channels. For example, one attack uses a binary search method to find the exact size of a safe area by repeatedly allocating and freeing memory. After determining the size, it allocates memory in the area and uses the same method to identify the second largest unmapped area. Since safe areas are often placed in unmapped areas, attackers can probe surrounding areas without causing exceptions or crashes.

All probing attacks need to use covert techniques to probe memory multiple times without causing crashes due to the large user memory space. In [20], it was found that many defenses use thread-local safe areas (see Table 1). Therefore, the attack proposes to use thread "spraying" to create multiple safe areas, increasing the probability of successful probes.

## 3. Threat Model

We assume a strong adversary with full control over the user-space and partial control over the kernel. The adversary aims to locate and access the safe areas to compromise the system. We consider both direct and indirect attacks, including memory scanning, side-channel attacks, and thread spraying.

## 4. Core Design of SafeHidden

### 4.1 Continuous Re-randomization

SafeHidden continuously re-randomizes the locations of safe areas to prevent attackers from inferring their positions. This process is triggered by detecting suspicious probes and other events that may indicate an attack.

### 4.2 Thread-Private Memory Mechanism

To maintain high randomization entropy, SafeHidden isolates thread-local safe areas using hardware-assisted extended page tables (EPT). Each thread is assigned an EPT, and physical pages in other threads' safe areas are configured as inaccessible in the current thread's EPT.

### 4.3 Detection of TLB Misses

SafeHidden detects TLB misses, which are key indicators of cache side-channel attacks. It sets reserved bits in the page table entries (PTEs) of safe areas to trap relevant TLB miss events into the page fault handler. After re-randomization, it uses Intel TSX to preload TLB entries to avoid future misses.

### 4.4 Integration with KPTI

To address the challenges posed by Kernel Page Table Isolation (KPTI), SafeHidden temporarily uses user-mode Process Context Identifiers (PCIDs) in the kernel mode. It also flushes all kernel mappings of newly introduced pages from TLBs to prevent Meltdown attacks.

## 5. Implementation of SafeHidden

SafeHidden is implemented as a loadable kernel module, designed to be self-contained and transparently integrated with existing software defense methods. The implementation involves intercepting system call interfaces, memory access instructions, and TLB miss events. It also leverages hardware transactional memory (Intel TSX) and EPT to achieve its goals.

## 6. Security and Performance Evaluation

Our experiments show that SafeHidden effectively prevents existing attacks and incurs low performance overhead. We evaluate the security of SafeHidden against various attack vectors and measure its impact on system performance. The results demonstrate that SafeHidden provides robust protection while maintaining high efficiency.

## 7. Discussion

SafeHidden introduces several novel techniques to enhance the security of information hiding. By continuously re-randomizing safe areas and isolating thread-local safe areas, it significantly reduces the risk of successful attacks. The use of hardware-assisted mechanisms, such as EPT and Intel TSX, further enhances its security and performance.

## 8. Related Work

We review related work on information hiding and recent attacks that have exposed its vulnerabilities. We compare SafeHidden with existing IH techniques and highlight its unique contributions.

## 9. Conclusion

In this paper, we presented SafeHidden, a new and effective information hiding technique that addresses the vulnerabilities of traditional IH. SafeHidden continuously re-randomizes safe areas, isolates thread-local safe areas, and detects TLB misses to prevent cache side-channel attacks. Our experiments demonstrate that SafeHidden is both secure and efficient, making it a valuable addition to the arsenal of software security defenses.

**References:**
- [1] Kernel Page Table Isolation (KPTI).
- [2] Intel Transactional Synchronization Extensions (TSX).
- [4] Oxymoron: A Fine-Grained Code Randomization Technique.
- [15] Isomeron: Fine-Grained Code Randomization for Control-Flow Integrity.
- [20] Thread Spraying: Exploiting Thread-Local Information Hiding.
- [30] Code-Pointer Integrity.
- [35] New Techniques for Probing Unmapped Memory Regions.
- [36] ASLR-Guard: Protecting Against ASLR Bypass.
- [40] O-CFI: Optimized Control-Flow Integrity.
- [43] Inferring the Location of Safe Areas.
- [45] Brute-Force Probing Attacks.
- [47] Memory Scanning Techniques.
- [57] RERANZ: Fine-Grained Code Randomization.
- [59] Shuffler: Fine-Grained Code Randomization.
- [61] CFCI: Control-Flow Confidentiality and Integrity.