0
0
0
0
0
0
0
0
0
0
0
481 KB
0
0
576 B
DangSan
# ptrs
40490m
2200k
7170m
7658m
2585m
2970k
607m
117m
836m
4679m
3829k
4
130
11m
6004
13099m
1235m
302m
2387m
TABLE II: Statistics for the SPEC CPU2006 benchmarks. # tot alloc. denotes the total number of object allocations. # ptr stores
by inst. denotes the number of tracked pointer stores by the store instructions, while # ptr stores by memcpy denotes the number
of pointer stores by memcpy. max mem. shows the maximum amount of memory occupied by the objects that are allocated but not freed.
max undeleted shows the maximum amount of memory occupied by the undeleted objects. max undel. / max mem. shows the ratio
between max mem and max undeleted. leaks shows the memory leak caused by an error in the pointer footprinting. The last column
shows the number of pointers tracked down by DangSan.
povray which have relatively a large number of pointer stores
(see Table II). For the case of DangSan, let us note that
DangSan does not track down any pointers copied through
memcpy. In contrast, CRCount does track down such pointers
for higher accuracy (thus also security), which explains the
larger performance overhead of CRCount. For dealII and
xalancbmk, we should consider the advantage that CRCount
might obtain by not instrumenting the template-based standard
library functions. However, considering the difference between
the number of tracked pointers described in Table II, we still
expect that the performance overhead of CRCount would be
lower than those of DangSan and Oscar. For BDW GC, we
could not run gcc benchmark. The geometric mean of the
performance overhead for the rest of the C benchmark is 0.7%
for BDW GC and 13.9% for CRCount, which shows that the
current highly optimized and multi-threaded BDW GC can
be very efﬁcient for single-threaded workloads compared to
CRCount which suffers from instrumentation overheads.
We also conducted a set of experiments with the PAR-
SEC [4] benchmarks to evaluate the scalability of CRCount
in multithreaded programs. Figure 5 shows the results in
comparison to the baseline and DangSan. The geometric mean
of the overheads (excluding freqmine) ranges from 6.1% to
22.4% in CRCount and from 6.3% to 17.0% in DangSan, as
more threads run concurrently. Overall, CRCount and Dan-
gSan show comparable performance overhead in most of the
benchmarks. Even though CRCount uses atomic operations
to maintain its data structures, it does not introduce critical
sections because only a single word needs to be updated at
a time. Also, simultaneous accesses to the same reference
counter or the same word in the pointer bitmap are rare. Thus,
Fig. 3: Performance overhead on SPEC CPU2006. We use the
reported numbers in the original papers for perlbench of DangSan,
which fails to run, and all the benchmarks of Oscar. For Boehm GC,
we were able to run only C benchmarks excluding gcc.
CRCount can be scaled to multiple threads in most cases.
barnes shows an interesting behavior as it is run with more
threads. In barnes, only a few large objects are allocated with
around 6 billion pointer stores. As the total number of objects
is so small, we expect that frequent lock contentions occur
when updating the reference counts, which explains such an
irregular result. For the subset of the benchmarks we could
test with BDW GC, the geometric mean of the overheads
10
6.5200.511.522.533.54400.perlbench*401.bzip2403.gcc429.mcf433.milc444.namd445.gobmk447.dealII450.soplex453.povray456.hmmer458.sjeng462.libquantum464.h264ref470.lbm471.omnetpp473.astar482.sphinx3483.xalancbmkCRCountDangSanOscarBoehmmean of the memory overhead for the benchmarks tested with
BDW GC ranges from 56.6% to 70.9% for BDW GC and 5.4%
to 6.0% for CRCount.
Finally, we measured the memory overhead for three web
server applications used in §VII-B. The maximum RSS of
Apache is 7.8MB in the baseline, 9.9MB in CRCount (26%
overhead), and 106.8MB in DangSan (1263% overhead). For
Nginx, the maximum RSS is 6.0MB in the baseline, 6.5MB in
CRCount (8.2% overhead) and 10.4MB in DangSan (73.3%
overhead). For Cherokee,
the recorded maximum RSS is
32.1MB, 41.2MB (28.5% overhead) and 62.9MB (95.9% over-
head), in the baseline, CRCount and DangSan, respectively.
All
those experimental results, we believe, consistently
testify the efﬁciency of CRCount in terms of memory usage.
Such memory efﬁciency of CRCount would be attributed to its
compact data structures, but more importantly, to the relatively
low memory usage by undeleted objects that remains persis-
tently small in practice. To investigate the relative overhead
of undeleted objects further, see Table II where the max
mem. and max undeleted columns respectively show the
maximum total memory for the heap-allocated objects and the
undeleted objects. In the max undel./max mem. column,
we compute the relative overhead of undeleted objects in
memory, which is clearly shown to be very small for most
benchmarks. On top of that, we have discovered that
the
majority of these undeleted objects tend to be eventually
deleted and handed over by CRCount to the allocator for
safe reuse during program execution. We credit such favorable
outcomes mainly to the capability of CRCount that is able
to correctly decrease the reference counts whenever generated
pointers are killed.
There are still the cases where CRCount fails to accurately
keep up the reference counts, thereby being unable to delete
undeleted objects even when no more pointers refer to them
(see §IX). The leaks column in Table II denotes the total
amount of memory occupied by such undeleted objects. To
calculate the numbers in the column, right after program
termination, we scanned the entire pointer bitmap to decrease
the reference counters corresponding to the pointers still re-
siding in the global variables or the heap objects for which
the free function has not been called during the execution.
The existence of the undeleted objects that still have a non-
zero reference count after this process signiﬁes that some
pointer kills were not tracked properly, failing to decrease
the reference count of these objects. Note that once CRCount
fails to track a pointer kill, it is no longer able to delete the
corresponding object as the reference count of the object will
never decrease to zero. Obviously, these objects are the source
of the memory leak induced by CRCount. Luckily, we can
see that the numbers on the leaks column are negligibly
small (or even zero) for almost all benchmarks, indicating that
CRCount in fact quite accurately perform reference counting
in legacy C/C++ code.
The numbers in Table II only inform us of the maximum
memory space that has once been occupied by heap and
undeleted objects during program execution, but it does not
give us any clue how much space has been dynamically
consumed by these objects at runtime. To obtain this, we
have regularly measured the changes in the amount of the
memory taken up by undeleted objects and memory leaks
Fig. 4: Memory overhead on SPEC CPU2006. Some numbers are
those that have been reported in the original paper as in Figure 3.
ranges from 5.3% to 28.9% in BDW GC and 4.9% to 28.6%
in CRCount. CRCount performs comparable to BDW GC for
multithreaded workloads.
We conducted additional experiments for evaluating the
performance of CRCount on web server applications,
in-
cluding Apache 2.4.33 (with worker MPM), Nginx 1.14.0,
and Cherokee. We tested each web server with the default
conﬁguration ﬁles through Apachebench (with 128 concur-
rent connections and 1,000,000 requests), and measured the
throughput in terms of requests per second (RPS). For Apache,
the throughput of the baseline is 24024 RPS, while it
is
decreased to 23051 RPS (slowdown of 4.1%) in CRCount and
22774 RPS (slowdown of 5.2%) in DangSan. The results for
other web servers are similar. For Nginx, the throughput of the
baseline was 29514 RPS, but it is 20553 RPS (slowdown of
30.4%) in CRCount and 20144 RPS (slowdown of 31.7%)
in DangSan. Lastly, for Cherokee, the baseline throughput
of 25993 RPS is decreased to 25615 RPS (slowdown of
1.5%) and 24756 RPS (slowdown of 4.8%) in CRCount and
DangSan, respectively.
C. Memory Overhead
In CRCount, let alone its data structures, undeleted objects
may be one major factor that potentially consumes substantial
memory. To evaluate the overall memory overhead of CR-
Count, we have recorded the maximum resident set size (RSS)
while running the same benchmarks as in §VII-B.
Figure 4 shows the memory overhead of our CRCount,
DangSan, Oscar, and BDW GC for SPEC CPU 2006 bench-
marks. Our geometric mean of all benchmarks is 18.0%, which
is signiﬁcantly lower than 126.4% of DangSan and 61.5% of
Oscar. BDW GC shows a memory overhead of 125.7% for the
tested benchmarks while that of CRCount is 9.7%. Figure 6
shows the maximum RSS values for PARSEC benchmarks for
baseline, CRCount, DangSan, and BDW GC. The geometric
mean (without freqmine) of the overhead is from 9.2% to
11.6% in CRCount and from 45.0% to 52.7% in DangSan as
the number of threads increases from 1 to 64. The geometric
11
00.511.522.533.544.55400.perlbench*401.bzip2403.gcc429.mcf433.milc444.namd445.gobmk447.dealII450.soplex453.povray456.hmmer458.sjeng462.libquantum464.h264ref470.lbm471.omnetpp473.astar482.sphinx3483.xalancbmkCRCountDangSanOscarBoehm5.53131.626.236.82Fig. 5: Comparison of the execution time on PARSEC. We could not get the correct result for freqmine for DangSan because we could not
enable OpenMP with DangSan, which is required to run freqmine in the multithreaded mode. The results for Boehm GC is only included
for the subset of the C benchmarks that we could run.
Fig. 6: Memory overhead on PARSEC.
Application
openlitespeed-1.3.7
wireshark-2.0.1
PHP-5.5.9
PHP-5.5.9
PHP-5.5.9
ed-1.14.1
CVE
Vulnerability
2015-3890
2016-4077
2016-3141
2016-6290
2016-5772
2017-5357
UAF
UAF
UAF
UAF
Double free
Invalid free
Original
No effect
No effect
CRCount
No effect
No effect
CRCount-det
Detected UAF
Detected UAF
Detected UAF
Detected UAF
Crash (double free) Detected double free
Detected double free
No effect
Crash (double free) Detected double free Detected double free
Crash (invalid free) Detected invalid free Detected invalid free
TABLE III: Real world vulnerabilities tested with CRCount. The Original column shows the behavior of the original program when run
with the exploit input. We disabled the Zend allocator in PHP to test the exploits.
12
02004006001248163264blacksholes01002003001248163264canneal01002003004001248163264ferret01002003004001248163264fluidanimate050010001248163264freqmine02004006001248163264streamcluster0501001248163264vips01002003001248163264x2640501001502001248163264barnes0501001501248163264fft0501001501248163264fmm0501001248163264ocean_cp0501001501248163264ocean_ncp01002003001248163264radiosity02040601248163264radix0501001501248163264raytrace01002003004001248163264water_nsquared01002003001248163264water_spatialDangSanCRCountBaselineBoehm0500100015001248163264x 10000barnes0204060801248163264x 10000blacksholes01002003004001248163264x 10000canneal02040601248163264x 10000ferret0500100015001248163264x 10000fft0501001501248163264x 10000fluidanimate02004006001248163264x 10000freqmine0510151248163264x 10000streamcluster0500100015001248163264x 10000fmm01002003004001248163264x 10000ocean_cp01000200030001248163264x 10000ocean_ncp02004006001248163264x 10000radiosity02004006001248163264x 10000radix024681248163264x 10000raytrace01020301248163264x 10000vips01002003001248163264x 10000water_nsquared0501001501248163264x 10000water_spatial0501001502001248163264x 10000x264DangSanCRCountBaselineBoehmand the registers, and follows the pointers recursively to scan
the pointers in the heap region. All the objects referred to
by the pointers are marked (using the reserved ﬁeld in the
per-object metadata) and all the memory leaks are released
at the end. We ran gcc with the garbage collector enabled
because it shows the largest amount of memory occupied by
the undeleted objects and thus is expected to give us the worst
case performance overhead among the benchmarks. We used
three different threshold values (64MB, 128MB, and 256MB)
and let the garbage collector run whenever the amount of
memory occupied by the undeleted objects exceeded these
values. Compared to the version without the garbage collector,
it showed an overhead of 2.3%, 1.1%, 0.4%, respectively. We
believe that this overhead is acceptable to be integrated into
CRCount.
VIII. SECURITY ANALYSIS
In this section, we perform the security evaluation by
running CRCount-enabled programs with real vulnerability
exploits. We also discuss some of the security considerations
for CRCount.
A. Attack Prevention
To evaluate the effectiveness of CRCount in mitigating
UAF errors, we ran several applications with publicly available
vulnerability exploits. Table III shows the list of vulnerabili-
ties tested with CRCount. CRCount successfully detected the
double free and invalid free vulnerabilities. We explain the test
results with the UAF exploits below.
All the UAF exploits we used accessed the freed region
only before it is reallocated. Thus, the UAF accesses in the
exploits did not affect the original build of the target program.
Note that CRCount is purposed to prevent the attackers from
reallocating an object in the memory region still pointed to
by the dangling pointers; thus, it did not affect the tested
exploits. However, in order for these exploits to eventually
be developed into serious attacks, the freed region should be
reallocated so that the UAF access can read from/write to the
allocated victim object. If CRCount correctly keeps track of
the reference counts in the tested programs, it will properly
mitigate these advanced exploits. We will show that it is indeed
the case in a moment.
For CVE 2016-6290, CRCount detected a double free
vulnerability while the original build of the program did not.
We found that the double free was triggered by a pointer
that still referred to a freed object. The original build of the
program did not detect it because another object was allocated
at the same address before the free function is called with
the dangling pointer. This shows that CRCount successfully
delayed the freeing of the object with pointers still referring
to it.
To verify that CRCount properly delays the reuse of
problematic memory region in the exploits, we have also
implemented an extended version of CRCount with a UAF de-
tection capability, called CRCount-det. CRCount-det performs
checks on every memory access to see if the accessed heap
object is marked as freeable. While extra checks on memory
accesses cause non-trivial performance overhead, we would
immediately know if a pointer is used to access an undeleted
Fig. 7: Changes in memory usage during the execution of gcc
with 200.i input ﬁle. all objects denotes the total amount
of memory allocated for heap-allocated objects and the undeleted
objects. undeleted objects and memory leaks indicate the
amount of the memory occupied by undeleted objects and memory
leaks, respectively.
over the entire period of each benchmark executions. As can
be expected from II, in most benchmarks, the total memory
overhead due to the undeleted objects steadily remains low
throughout the execution. However in some benchmarks like
gcc with 200.i input ﬁle (see Figure 7),
the overhead
can sometimes become noticeably high at some point during
program execution although it remains low for most of the
execution times. Figure 7 displays two peaks in the memory
consumption when a large amount of memory is consumed by
undeleted objects, but most of it is soon freed as the result
of program’s normal execution. Figure 7 also displays the
amount of leaked memory. Note that once a memory leak