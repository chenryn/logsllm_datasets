[注意：]{.yanse}上面的第四步、第五步、第六步没有顺序，只要在运行之前设置就可以了。
###### 第七步：运行程序 {.section-subtitle}
出现这个对话框不要在意，一路点击Cancel即可，如图24-14所示。
::: bodypic-c
![](OEBPS/Images/24a14-i.jpg){.calibre933}
:::
图24-14 提示对话框
jdb也attach上了调试程序：
::: bodypic-c
![](OEBPS/Images/384-i.jpg){.calibre934}
:::
一直点击运行按钮，直到运行到dvmDexFileOpenPartial处的断点，但是可惜的是，这里遇到了错误，如图24-15所示。
::: bodypic-c
![](OEBPS/Images/24a15-i.jpg){.calibre935}
:::
图24-15 运行报错
点击OK之后，出现了下面对话框，如图24-16所示。
::: bodypic-c
![](OEBPS/Images/24a16-i.jpg){.calibre936}
:::
图24-16 报错对话框
再次点击任何一个按钮，都会退出调试页面，如图24-17所示。
::: bodypic-c
![](OEBPS/Images/24a17-i.jpg){.calibre937}
:::
图24-17 退出调试页面
再重新尝试一次上面的流程，开始调试，但是错误是一样的，到这里就立马想到了，之前第8章说的IDA调试so遇到的那个问题：反调试检测。其实这是现在加固平台必要选择的一种方式，反调试原理很简单，就是在程序运行最早的时机，比如so加载的时候即JNI_OnLoad方法中，读取本进程的status文件，查看TracerPid字段是否为0，如果不为0，那么就表示自己的进程被别人跟踪了，也就是attach了，这时候立马退出程序，下面使用IDA在attach进程成功之后，查看本进程的status信息：
::: bodypic-c
![](OEBPS/Images/385-i.jpg){.calibre938}
:::
看到这里的TracerPid为24336，不为0，表示被24336进程attach了，那么可以查看一下这个进程是谁：
::: bodypic-c
![](OEBPS/Images/385-2-i.jpg){.calibre939}
:::
这个进程就是在设备中安插的android_server，它用于和IDA进行通信。
到这里，可以看到应用做了反调试检测，按照上一章的内容，可以给JNI_OnLoad函数下断点，然后找到检测代码，把对应的ARM指令改成空指令，检测失效了，但是这里两个so文件被处理了，IDA没法分析了，那么该怎么办呢？
如何应对反调试呢？可以借助IDA修改寄存器和内存数据的特性来做到。首先上面分析了反调试的原理，一般在native代码去做检测的话，都是用fopen系统函数打开status文件，然后用fgets函数读取一行的内容，一般操作文件都是用fopen函数。
那么思路就有了，既然反调试肯定用到了fopen和fgets这两个函数，那么直接像给dvmDexFileOpenPartial下断点的方式一样，给这两个函数下断点，然后运行到fgets断点处的时候，发现如果是读取TracerPid这行内容的时候，就开始修改内存内容，把TracerPid字段的值改成0，或者修改R0寄存器的内容，跳过反调试检测。
这两个函数是在libc.so文件中的，可以把设备的/system/lib/libc.so使用adb
pull到本地即可，然后用IDA得到相对地址，在调试页面得到基地址，然后相加得到绝对地址，跳转即可。但是这里不用这种复杂的方式，有两种方式可以进行跳转。
第一种方式：在Modules界面找到libc.so，然后再找到这两个函数，就可以得到它们的绝对地址了，如图24-18所示。
::: bodypic-c
![](OEBPS/Images/24a18-i.jpg){.calibre940}
:::
图24-18 查看fopen函数的绝对地址
然后使用G键，跳转下断点即可，如下所示：
::: bodypic-c
![](OEBPS/Images/386-i.jpg){.calibre941}
:::
第二种方式：也是最简单的方式，就是用G键，本身就有可以直接输入函数名进行跳转的功能，如图24-19所示。
::: bodypic-c
![](OEBPS/Images/24a19-i.jpg){.calibre821}
:::
图24-19 输入函数名跳转
下断点，如下所示：
::: bodypic-c
![](OEBPS/Images/386-2-i.jpg){.calibre942}
:::
到这里就给这两个函数下好了断点，当然这里还需要给dvmDexFileOpenPartial函数下断点，一切弄好了之后，这时候再次运行，如下所示：
::: bodypic-c
![](OEBPS/Images/386-3-i.jpg){.calibre943}
:::
停在了fopen断点处，使用F8键单步调试，看到R7寄存器中的内容是/proc/\...，直接点击R7查看全部内容，如下所示：
::: bodypic-c
![](OEBPS/Images/386-4-i.jpg){.calibre944}
:::
::: bodypic-c
![](OEBPS/Images/387-i.jpg){.calibre945}
:::
内容有点长，大致的内容是/proc/self/cmdline.debug.atrace.app_cmdlines，这个是干什么的？看看这个目录内容：
::: bodypic-c
![](OEBPS/Images/387-2-i.jpg){.calibre946}
:::
发现没有这个文件内容，只有cmdline文件，但是可以先不管它了，知道这个肯定不是读取status文件的，那直接略过这个断点，点击F9键运行到下一个断点，中间过程先忽略，一路用F9键，直到运行到了fopen这个断点，如下所示：
::: bodypic-c
![](OEBPS/Images/387-3-i.jpg){.calibre947}
:::
果然，这里使用了fopen来读取status文件了，点击R7寄存器查看全部内容，如下所示：
::: bodypic-c
![](OEBPS/Images/388-i.jpg){.calibre948}
:::
这个16396就是本进程的id：
::: bodypic-c
![](OEBPS/Images/388-2-i.jpg){.calibre949}
:::
到这里，下一个断点肯定是fgets，所以点击F9键进入到fgets断点处，如下所示：
::: bodypic-c
![](OEBPS/Images/388-3-i.jpg){.calibre950}
:::
这里还看不到什么信息，继续点击F8键单步调试，如下所示：
::: bodypic-c
![](OEBPS/Images/388-4-i.jpg){.calibre951}
:::
途中，会看到有memchr和memcpy这两个重要函数，这个也是操作字符串的核心点，继续往下走，如下所示：
::: bodypic-c
![](OEBPS/Images/389-i.jpg){.calibre952}
:::
到了fgets函数结束的地方，看到了R0寄存器的内容是Name，点击R0查看全部内容，如下所示：
::: bodypic-c
![](OEBPS/Images/389-2-i.jpg){.calibre953}
:::
全部内容是Name：der.crackme0201，这就是status文件的第一行内容：
::: bodypic-c
![](OEBPS/Images/389-3-i.jpg){.calibre954}
:::
开始读取status文件的每行内容了，但是到TracerPid那行还要继续执行5次fgets函数，所以还会进入5次断点。为了节省时间，这里点击5次F9键，直接运行到读取TracerPid那行的内容的fgets断点处，如下所示：
::: bodypic-c
![](OEBPS/Images/389-4-i.jpg){.calibre955}
:::
看到关键的内容TracerPid字段了，这时候打开Hex
View查看16进制的内存数据，如下所示：
::: bodypic-c
![](OEBPS/Images/390-i.jpg){.calibre956}
:::
但是看到，这并没有和调试页面View位置相对应，查看数据很费劲，所以可以这么操作，在寄存器窗口查看到R0寄存器的内容，如下所示：
::: bodypic-c
![](OEBPS/Images/390-2-i.jpg){.calibre957}
:::
这里就是TracerPid字段在内存的地址，记录一下，然后在Hex
View页面中使用G键，进行跳转，一定要注意是在HexView，而不是调试页面，调试页面使用G键跳转到的是指令地址了，如图24-20所示。
::: bodypic-c
![](OEBPS/Images/24a20-i.jpg){.calibre958}
:::
图24-20 Hex View页面
这里看到TracerPid的内存内容了，就开始修改吧，选择要修改的内容：是11340那里，如图24-21所示。
::: bodypic-c
![](OEBPS/Images/24a21-i.jpg){.calibre959}
:::
图24-21 修改寄存器值
选择内容开始处，右击，选择Edit，进入修改状态，如下所示：
::: bodypic-c
![](OEBPS/Images/390-3-i.jpg){.calibre960}
:::
改了之后的内容是橘黄色的，修改完成之后，再点击右键，选择Apply
changes，如图24-22所示。
完成修改，颜色变成灰土色了，如下所示：
::: bodypic-c
![](OEBPS/Images/391-i.jpg){.calibre961}
:::
注意：这里其实还可以直接修改寄存器R0的值，如图24-23所示。
::: bodypic-c
![](OEBPS/Images/24a22-i.jpg){.calibre962}
:::
图24-22 保存设置
::: bodypic-c
![](OEBPS/Images/24a23-i.jpg){.calibre963}
:::
图24-23 直接修改寄存器值
这时候就修改成功了，继续使用F8键单步调试下去，如下所示：
::: bodypic-c
![](OEBPS/Images/391-3-i.jpg){.calibre964}
:::
到这里就开始把TracerPid字段的值和0进行比较了，点击R0寄存器查看全部内容，如下所示：
::: bodypic-c
![](OEBPS/Images/391-4-i.jpg){.calibre965}
:::
这里的值已经被改成了0，所以就骗过去了。继续运行会发现，又进入了fopen函数的断点处，而且查看还是读取status文件。这个也不好奇，因为反调试检测肯定是一个轮询机制，所以肯定会反复地读取这个文件，fopen走多次也是正常的，但是这个反调试肯定是在子线程的，所以只要到了主线程中解密dex文件肯定到了dvmDexFileOpenPartial，这里会多次重复上面的操作，修改多次TracerPid的值。这里就不演示了。在操作的过程中修改了三次，当没有走fopen函数的时候，遇到了这个错误，这里不用关心，直接点击OK就可以了，如图24-24所示。
::: bodypic-c
![](OEBPS/Images/24a24-i.jpg){.calibre935}
:::
图24-24 警告对话框
再次点击运行，如下所示：
::: bodypic-c
![](OEBPS/Images/392-i.jpg){.calibre966}
:::
这里说明已经开始解密dex文件了，应该离成功不远了，继续运行，如下所示：
::: bodypic-c
![](OEBPS/Images/392-2-i.jpg){.calibre967}
:::
终于到了想要的地方了，到这里就好办了，直接点击Shirt+F2键，打开脚本运行窗口，运行下面脚本，如图24-25所示。
::: bodypic-c
![](OEBPS/Images/392-3-i.jpg){.calibre968}
:::
::: bodypic-c
![](OEBPS/Images/393-i.jpg){.calibre969}
:::
::: bodypic-c
![](OEBPS/Images/24a25-i.jpg){.calibre970}
:::
图24-25 运行脚本
把内存中的dex保存到F：\\dump.dex中。这里R0寄存器就是dex在内存中的起始地址，R1寄存器就是dex文件的大小，如图24-26所示。
::: bodypic-c
![](OEBPS/Images/24a26-i.jpg){.calibre971}
:::
图24-26 查看dex文件的起始地址和文件大小
使用G键，可以在HexView页面中查看R0寄存器中的地址内容，如下所示：
::: bodypic-c
![](OEBPS/Images/393-2-i.jpg){.calibre972}
:::
这里就是dex的头文件格式。
得到了内存中的dex数据之后，可以使用baksmali工具转化成smali源码，查看代码逻辑即可，这里不再演示了。最后还有一步：还原apk。下一节介绍。
[]{#148.xhtml}