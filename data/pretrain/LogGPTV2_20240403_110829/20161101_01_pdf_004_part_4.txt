 pg_catalog | hungarian | configuration for hungarian language
 pg_catalog | italian | configuration for italian language
 pg_catalog | norwegian | configuration for norwegian language
 pg_catalog | portuguese | configuration for portuguese language
 pg_catalog | romanian | configuration for romanian language
 pg_catalog | russian | configuration for russian language
 pg_catalog | simple | simple configuration
 pg_catalog | spanish | configuration for spanish language
 pg_catalog | swedish | configuration for swedish language
 pg_catalog | turkish | configuration for turkish language
 后面的例子中会有中文的安装
PostgreSQL 全文检索
 tsquery的例子  支持指定权重
 &, | , ! 组合, 分组使用括号  SELECT 'fat:ab & cat'::tsquery;
 SELECT 'fat & rat'::tsquery;  tsquery
 tsquery  ------------------
 ---------------  'fat':AB & 'cat‘
 'fat' & 'rat'
 支持前导匹配
 SELECT 'fat & (rat | cat)'::tsquery;  SELECT 'super:*'::tsquery;
 tsquery  tsquery
 ---------------------------  -----------
 'fat' & ( 'rat' | 'cat' )  'super':*
 SELECT 'fat & rat & ! cat'::tsquery;  使用to_tsquery转换时, 也可以带上语言配置
 tsquery  digoal=# SELECT to_tsquery('english', 'Fat:ab & Cats');
 ------------------------  to_tsquery
 'fat' & 'rat' & !'cat‘  ------------------
 'fat':AB & 'cat'
PostgreSQL 全文检索
 tsquery的例子, @@操作符的使用, 文本匹配.
 digoal=# select to_tsvector('spanish', $$Hello world, I'm digoal.$$);
 to_tsvector
 -------------------------------------------
 'digoal':5 'hell':1 'i':3 'm':4 'world':2
 (1 row)
 digoal=# select to_tsvector('spanish', $$Hello world, I'm digoal.$$) @@ 'i:b'::tsquery;
 ?column?
 ----------
 f
 (1 row)
 digoal=# select to_tsvector('spanish', $$Hello world, I'm digoal.$$) @@ 'i:d'::tsquery;
 ?column?
 ----------
 t
 (1 row)
PostgreSQL 全文检索
 tsquery的例子, @@操作符的使用, 文本匹配.
 digoal=# select to_tsvector('spanish', $$Hello world, I'm digoal.$$) @@ 'i:*'::tsquery;
 ?column?
 ----------
 t
 (1 row)
 digoal=# select to_tsvector('spanish', $$Hello world, I'm digoal.$$) @@ 'i:d*'::tsquery;
 ?column?
 ----------
 t
 (1 row)
 digoal=# select to_tsvector('spanish', $$Hello world, I'm digoal.$$) @@ 'i:a*'::tsquery;
 ?column?
 ----------
 f
 (1 row)
PostgreSQL 全文检索
 和全文检索相关的函数和操作符
 详细介绍
 http://www.postgresql.org/docs/9.3/static/functions-textsearch.html
PostgreSQL 全文检索
 全文检索的索引使用
 digoal=# create table ts(id int, info tsvector, crt_time timestamp);
 CREATE TABLE
 digoal=# insert into ts values (1, $$Hello world, i'm digoal.$$, now());
 INSERT 0 1
 digoal=# create index idx_ts_1 on ts using gin (info);
 CREATE INDEX
 digoal=# select * from ts where info @@ 'digoal.'::tsquery;
 id | info | crt_time
 ----+-----------------------------------+----------------------------
 1 | 'Hello' 'digoal.' 'i''m' 'world,' | 2013-12-09 16:35:55.635111
 (1 row)
PostgreSQL 全文检索
 全文检索的索引使用(tsvector支持的索引策略gin, gist, btree)
 GIN索引策略, 可用于tsvector包含tsquery的查询匹配
 digoal=# set enable_seqscan=off;
 SET
 digoal=# explain analyze select * from ts where info @@ 'digoal.'::tsquery;
 QUERY PLAN
 -----------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on ts (cost=2.00..3.01 rows=1 width=44) (actual time=0.021..0.021 rows=1 loops=1)
 Recheck Cond: (info @@ '''digoal.'''::tsquery)
 -> Bitmap Index Scan on idx_ts_1 (cost=0.00..2.00 rows=1 width=0) (actual time=0.016..0.016 rows=1 loops=1)
 Index Cond: (info @@ '''digoal.'''::tsquery)
 Total runtime: 0.061 ms
 (5 rows)
PostgreSQL 全文检索
 全文检索的索引使用
 GiST索引策略, 可用于包含匹配
 digoal=# drop index idx_ts_1;
 DROP INDEX
 digoal=# create index idx_ts_1 on ts using gist (info);
 CREATE INDEX
 digoal=# explain analyze select * from ts where info @@ 'digoal.'::tsquery;
 QUERY PLAN
 --------------------------------------------------------------------------------------------------------------
 Index Scan using idx_ts_1 on ts (cost=0.12..2.14 rows=1 width=44) (actual time=0.016..0.017 rows=1 loops=1)
 Index Cond: (info @@ '''digoal.'''::tsquery)
 Total runtime: 0.055 ms
 (3 rows)
PostgreSQL 全文检索
 中文全文检索举例
 http://blog.163.com/digoal@126/blog/static/163877040201252141010693/
 中文全文检索语言配置安装简介
 安装cmake
 tar -zxvf cmake-2.8.8.tar.gz
 cd cmake-2.8.8
 ./bootstrap --prefix=/opt/cmake2.8.8
 gmake
 gmake install
 vi ~/.bash_profile
 export PATH=/opt/cmake2.8.8/bin:$PATH
 . ~/.bash_profile
PostgreSQL 全文检索
 安装crf
 tar -zxvf CRF++-0.57.tar.gz
 cd CRF++-0.57
 ./configure
 gmake
 gmake install
PostgreSQL 全文检索
 安装nlpbamboo
 vi ~/.bash_profile
 export PGHOME=/opt/pgsql
 export PATH=$PGHOME/bin:/opt/bamboo/bin:/opt/cmake2.8.8/bin:$PATH:.
 export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:.
 . ~/.bash_profile
 tar -jxvf nlpbamboo-1.1.2.tar.bz2
 cd nlpbamboo-1.1.2
 mkdir build
 cd build
 cmake .. -DCMAKE_BUILD_TYPE=release
 gmake all
 gmake install
PostgreSQL 全文检索
 配置默认的lib库配置
 echo "/usr/lib" >>/etc/ld.so.conf (这个命令是bamboo对应的动态链接库)
 echo "/usr/local/lib" >>/etc/ld.so.conf (这个命令是CRF对应的动态链接库)
 ldconfig -f /etc/ld.so.conf
 测试是否加入正常
 ldconfig -p|grep bambo
 libbamboo.so.2 (libc6,x86-64) => /usr/lib/libbamboo.so.2
 libbamboo.so (libc6,x86-64) => /usr/lib/libbamboo.so
 ldconfig -p|grep crf
 libcrfpp.so.0 (libc6,x86-64) => /usr/local/lib/libcrfpp.so.0
 libcrfpp.so (libc6,x86-64) => /usr/local/lib/libcrfpp.so
 加入索引
 cd /opt/bamboo
 wget http://nlpbamboo.googlecode.com/files/index.tar.bz2
 tar -jxvf index.tar.bz2
PostgreSQL 全文检索
 编译PostgreSQL支持模块
 export PATH=/opt/pgsql/bin:$PATH
 cd /opt/bamboo/exts/postgres/chinese_parser
 make
 make install
 touch $PGHOME/share/tsearch_data/chinese_utf8.stop
 cd /opt/bamboo/exts/postgres/pg_tokenize
 make
 make install
 安装PostgreSQL支持模块
 su - postgres
 cd $PGHOME/share/contrib/
 psql -h 127.0.0.1 postgres postgres -f chinese_parser.sql
 psql -h 127.0.0.1 postgres postgres -f pg_tokenize.sql
PostgreSQL 全文检索
 查看全文检索配置中加入了chinesecfg的配置.
 postgres=# select * from pg_ts_config;
 cfgname | cfgnamespace | cfgowner | cfgparser
 ------------+--------------+----------+-----------
 simple | 11 | 10 | 3722
 danish | 11 | 10 | 3722
 …….
 russian | 11 | 10 | 3722
 spanish | 11 | 10 | 3722
 swedish | 11 | 10 | 3722
 turkish | 11 | 10 | 3722
 chinesecfg | 11 | 10 | 33463
 (17 rows)
PostgreSQL 全文检索
 测试tokenize分词函数
 postgres=# select * from tokenize('你好我是中国人');
 tokenize
 ---------------------
 你好 我 是 中国 人
 (1 row)
 postgres=# select * from tokenize('中华人民共和国');
 tokenize
 -----------------
 中华人民共和国
 (1 row)
 postgres=# select * from tokenize('百度');
 tokenize
 ----------
 百度
 (1 row)
PostgreSQL 全文检索
 postgres=# select * from tokenize('谷歌');
 tokenize
 ----------
 谷歌
 (1 row)
 postgres=# select * from tokenize('今年是龙年');
 tokenize
 ---------------
 今年 是 龙年
 (1 row)
PostgreSQL 全文检索
 测试全文检索类型转换函数
 postgres=# select * from to_tsvector('chinesecfg', '你好,我是中国人.目前在杭州斯凯做数据库相关的工作.');
 to_tsvector
 ------------------------------------------------------------------------------------------------------------------------------------
 ',':2 '.':7,17 '中国':5 '人':6 '你好':1 '做':12 '在':9 '工作':16 '我':3 '数据库':13 '斯凯':11 '是':4 '杭州':10 '的':15 '目前':8 '相关':14
 (1 row)
 索引的效果
 postgres=# create table blog (id serial primary key, user_id int8, title text, content text, ts_title tsvector, ts_content tsvector);
 NOTICE: CREATE TABLE will create implicit sequence "blog_id_seq" for serial column "blog.id"
 NOTICE: CREATE TABLE / PRIMARY KEY will create implicit index "blog_pkey" for table "blog"
 CREATE TABLE
 postgres=# create index idx_blog_ts1 on blog using gist(ts_title);
 CREATE INDEX
 postgres=# create index idx_blog_ts2 on blog using gist(ts_content);
 CREATE INDEX
PostgreSQL 全文检索
 postgres=# explain select user_id,title from blog where ts_content @@ to_tsquery('函数 & 中国');
 QUERY PLAN
 --------------------------------------------------------------------------
 Index Scan using idx_blog_ts2 on blog (cost=0.00..4.27 rows=1 width=40)
 Index Cond: (ts_content @@ to_tsquery('函数 & 中国'::text))
 (2 rows)
 postgres=# explain select user_id,title from blog where ts_content @@ to_tsquery('函数 & 表');
 QUERY PLAN
 --------------------------------------------------------------------------
 Index Scan using idx_blog_ts2 on blog (cost=0.00..4.27 rows=1 width=40)
 Index Cond: (ts_content @@ to_tsquery('函数 & 表'::text))