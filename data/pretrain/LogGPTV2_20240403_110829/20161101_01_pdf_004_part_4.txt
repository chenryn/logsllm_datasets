# PostgreSQL 全文检索配置与使用

## 语言配置
以下为不同语言的全文检索配置：
- `pg_catalog | hungarian`：匈牙利语配置
- `pg_catalog | italian`：意大利语配置
- `pg_catalog | norwegian`：挪威语配置
- `pg_catalog | portuguese`：葡萄牙语配置
- `pg_catalog | romanian`：罗马尼亚语配置
- `pg_catalog | russian`：俄语配置
- `pg_catalog | simple`：简单配置
- `pg_catalog | spanish`：西班牙语配置
- `pg_catalog | swedish`：瑞典语配置
- `pg_catalog | turkish`：土耳其语配置

## `tsquery`示例
`tsquery`支持指定权重、组合和前导匹配。例如：

```sql
-- 组合查询
SELECT 'fat:ab & cat'::tsquery;
-- 结果: 'fat':AB & 'cat'

SELECT 'fat & rat'::tsquery;
-- 结果: 'fat' & 'rat'

-- 前导匹配
SELECT 'fat & (rat | cat)'::tsquery;
-- 结果: 'fat' & ( 'rat' | 'cat' )

SELECT 'super:*'::tsquery;
-- 结果: 'super':*

-- 否定操作
SELECT 'fat & rat & ! cat'::tsquery;
-- 结果: 'fat' & 'rat' & !'cat'
```

使用 `to_tsquery` 转换时，可以带上语言配置：

```sql
SELECT to_tsquery('english', 'Fat:ab & Cats');
-- 结果: 'fat':AB & 'cat'
```

## `@@` 操作符示例
`@@` 操作符用于文本匹配：

```sql
-- 创建向量并进行匹配
digoal=# select to_tsvector('spanish', $$Hello world, I'm digoal.$$);
-- 结果: 'digoal':5 'hell':1 'i':3 'm':4 'world':2

digoal=# select to_tsvector('spanish', $$Hello world, I'm digoal.$$) @@ 'i:b'::tsquery;
-- 结果: f

digoal=# select to_tsvector('spanish', $$Hello world, I'm digoal.$$) @@ 'i:d'::tsquery;
-- 结果: t

digoal=# select to_tsvector('spanish', $$Hello world, I'm digoal.$$) @@ 'i:*'::tsquery;
-- 结果: t

digoal=# select to_tsvector('spanish', $$Hello world, I'm digoal.$$) @@ 'i:d*'::tsquery;
-- 结果: t

digoal=# select to_tsvector('spanish', $$Hello world, I'm digoal.$$) @@ 'i:a*'::tsquery;
-- 结果: f
```

## 相关函数和操作符
更多详细信息请参阅 [PostgreSQL 文档](http://www.postgresql.org/docs/9.3/static/functions-textsearch.html)。

## 索引使用
创建表并插入数据，然后创建 GIN 或 GiST 索引：

```sql
digoal=# create table ts(id int, info tsvector, crt_time timestamp);
-- 创建成功

digoal=# insert into ts values (1, $$Hello world, i'm digoal.$$, now());
-- 插入成功

digoal=# create index idx_ts_1 on ts using gin (info);
-- 创建成功

digoal=# select * from ts where info @@ 'digoal.'::tsquery;
-- 查询结果
id | info | crt_time
----+-----------------------------------+----------------------------
1 | 'Hello' 'digoal.' 'i''m' 'world,' | 2013-12-09 16:35:55.635111
(1 row)
```

### GIN 索引
GIN 索引适用于 `tsvector` 包含 `tsquery` 的查询匹配：

```sql
digoal=# set enable_seqscan=off;
-- 设置成功

digoal=# explain analyze select * from ts where info @@ 'digoal.'::tsquery;
-- 解释计划
Bitmap Heap Scan on ts (cost=2.00..3.01 rows=1 width=44) (actual time=0.021..0.021 rows=1 loops=1)
Recheck Cond: (info @@ '''digoal.'''::tsquery)
-> Bitmap Index Scan on idx_ts_1 (cost=0.00..2.00 rows=1 width=0) (actual time=0.016..0.016 rows=1 loops=1)
Index Cond: (info @@ '''digoal.'''::tsquery)
Total runtime: 0.061 ms
(5 rows)
```

### GiST 索引
GiST 索引适用于包含匹配：

```sql
digoal=# drop index idx_ts_1;
-- 删除成功

digoal=# create index idx_ts_1 on ts using gist (info);
-- 创建成功

digoal=# explain analyze select * from ts where info @@ 'digoal.'::tsquery;
-- 解释计划
Index Scan using idx_ts_1 on ts (cost=0.12..2.14 rows=1 width=44) (actual time=0.016..0.017 rows=1 loops=1)
Index Cond: (info @@ '''digoal.'''::tsquery)
Total runtime: 0.055 ms
(3 rows)
```

## 中文全文检索
安装相关工具和配置：

1. **安装 CMake**
    ```sh
    tar -zxvf cmake-2.8.8.tar.gz
    cd cmake-2.8.8
    ./bootstrap --prefix=/opt/cmake2.8.8
    gmake
    gmake install
    vi ~/.bash_profile
    export PATH=/opt/cmake2.8.8/bin:$PATH
    . ~/.bash_profile
    ```

2. **安装 CRF++**
    ```sh
    tar -zxvf CRF++-0.57.tar.gz
    cd CRF++-0.57
    ./configure
    gmake
    gmake install
    ```

3. **安装 NLPBamboo**
    ```sh
    vi ~/.bash_profile
    export PGHOME=/opt/pgsql
    export PATH=$PGHOME/bin:/opt/bamboo/bin:/opt/cmake2.8.8/bin:$PATH:.
    export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:.
    . ~/.bash_profile
    tar -jxvf nlpbamboo-1.1.2.tar.bz2
    cd nlpbamboo-1.1.2
    mkdir build
    cd build
    cmake .. -DCMAKE_BUILD_TYPE=release
    gmake all
    gmake install
    ```

4. **配置默认库**
    ```sh
    echo "/usr/lib" >> /etc/ld.so.conf
    echo "/usr/local/lib" >> /etc/ld.so.conf
    ldconfig -f /etc/ld.so.conf
    ```

5. **测试库配置**
    ```sh
    ldconfig -p | grep bamboo
    libbamboo.so.2 (libc6,x86-64) => /usr/lib/libbamboo.so.2
    libbamboo.so (libc6,x86-64) => /usr/lib/libbamboo.so

    ldconfig -p | grep crf
    libcrfpp.so.0 (libc6,x86-64) => /usr/local/lib/libcrfpp.so.0
    libcrfpp.so (libc6,x86-64) => /usr/local/lib/libcrfpp.so
    ```

6. **下载索引文件**
    ```sh
    cd /opt/bamboo
    wget http://nlpbamboo.googlecode.com/files/index.tar.bz2
    tar -jxvf index.tar.bz2
    ```

7. **编译 PostgreSQL 支持模块**
    ```sh
    export PATH=/opt/pgsql/bin:$PATH
    cd /opt/bamboo/exts/postgres/chinese_parser
    make
    make install
    touch $PGHOME/share/tsearch_data/chinese_utf8.stop
    cd /opt/bamboo/exts/postgres/pg_tokenize
    make
    make install
    ```

8. **安装 PostgreSQL 支持模块**
    ```sh
    su - postgres
    cd $PGHOME/share/contrib/
    psql -h 127.0.0.1 postgres postgres -f chinese_parser.sql
    psql -h 127.0.0.1 postgres postgres -f pg_tokenize.sql
    ```

9. **查看全文检索配置**
    ```sql
    postgres=# select * from pg_ts_config;
    cfgname | cfgnamespace | cfgowner | cfgparser
    ------------+--------------+----------+-----------
    simple | 11 | 10 | 3722
    danish | 11 | 10 | 3722
    ...
    russian | 11 | 10 | 3722
    spanish | 11 | 10 | 3722
    swedish | 11 | 10 | 3722
    turkish | 11 | 10 | 3722
    chinesecfg | 11 | 10 | 33463
    (17 rows)
    ```

10. **测试分词函数**
    ```sql
    postgres=# select * from tokenize('你好我是中国人');
    tokenize
    ---------------------
    你好 我 是 中国 人
    (1 row)

    postgres=# select * from tokenize('中华人民共和国');
    tokenize
    -----------------
    中华人民共和国
    (1 row)

    postgres=# select * from tokenize('百度');
    tokenize
    ----------
    百度
    (1 row)

    postgres=# select * from tokenize('谷歌');
    tokenize
    ----------
    谷歌
    (1 row)

    postgres=# select * from tokenize('今年是龙年');
    tokenize
    ---------------
    今年 是 龙年
    (1 row)
    ```

11. **测试全文检索类型转换函数**
    ```sql
    postgres=# select * from to_tsvector('chinesecfg', '你好,我是中国人.目前在杭州斯凯做数据库相关的工作.');
    to_tsvector
    ------------------------------------------------------------------------------------------------------------------------------------
    ',':2 '.':7,17 '中国':5 '人':6 '你好':1 '做':12 '在':9 '工作':16 '我':3 '数据库':13 '斯凯':11 '是':4 '杭州':10 '的':15 '目前':8 '相关':14
    (1 row)
    ```

12. **创建表并使用索引**
    ```sql
    postgres=# create table blog (id serial primary key, user_id int8, title text, content text, ts_title tsvector, ts_content tsvector);
    NOTICE: CREATE TABLE will create implicit sequence "blog_id_seq" for serial column "blog.id"
    NOTICE: CREATE TABLE / PRIMARY KEY will create implicit index "blog_pkey" for table "blog"
    CREATE TABLE

    postgres=# create index idx_blog_ts1 on blog using gist(ts_title);
    CREATE INDEX

    postgres=# create index idx_blog_ts2 on blog using gist(ts_content);
    CREATE INDEX
    ```

13. **查询示例**
    ```sql
    postgres=# explain select user_id,title from blog where ts_content @@ to_tsquery('函数 & 中国');
    QUERY PLAN
    --------------------------------------------------------------------------
    Index Scan using idx_blog_ts2 on blog (cost=0.00..4.27 rows=1 width=40)
    Index Cond: (ts_content @@ to_tsquery('函数 & 中国'::text))
    (2 rows)

    postgres=# explain select user_id,title from blog where ts_content @@ to_tsquery('函数 & 表');
    QUERY PLAN
    --------------------------------------------------------------------------
    Index Scan using idx_blog_ts2 on blog (cost=0.00..4.27 rows=1 width=40)
    Index Cond: (ts_content @@ to_tsquery('函数 & 表'::text))
    (2 rows)
    ```