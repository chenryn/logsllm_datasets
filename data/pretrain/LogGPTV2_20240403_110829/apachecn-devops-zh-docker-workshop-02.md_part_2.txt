    # This is my first Docker image
    FROM ubuntu 
    LABEL maintainer=PI:EMAIL 
    RUN apt-get update
    CMD ["The Docker Workshop"]
    ENTRYPOINT ["echo", "You are reading"]
    ```
    Docker 映像将基于 Ubuntu 父映像。然后使用`LABEL`指令提供`Dockerfile`作者的电子邮件地址。下一行执行`apt-get update`命令，将 Debian 的包列表更新到最新的可用版本。最后，您将使用`ENTRYPOINT`和`CMD`指令来定义容器的默认可执行文件和参数。
    我们提供了`echo`作为默认的可执行文件，`You are reading`作为不能被命令行参数覆盖的默认参数。此外，我们还提供了`The Docker Workshop`作为附加参数，可以用`docker container run`命令用命令行参数覆盖。
在本练习中，我们使用在前面章节中学习的通用指令创建了第一个`Dockerfile`。该过程的下一步是从`Dockerfile`构建 Docker 映像。您只能在从`Dockerfile`构建 Docker 映像后运行 Docker 容器。在下一节中，我们将了解如何从`Dockerfile`构建 Docker 映像。
# 构建 Docker 映像
在上一节中，我们学习了如何创建`Dockerfile`。该过程的下一步是使用`Dockerfile`构建**Docker 映像**。
一个 **Docker 映像**是用来构建 Docker 容器的模板。这类似于如何使用一个房屋平面图从同一个设计中创建多个房屋。如果你熟悉**面向对象编程**的概念，Docker 映像和 Docker 容器具有与**类**和**对象**相同的关系。面向对象编程中的一个类可以用来创建多个对象。
Docker 映像是基于`Dockerfile`中提供的指令由多层组成的二进制文件。这些层相互堆叠，每一层都依赖于前一层。每一层都是其下一层变化的结果。Docker 映像的所有层都是只读的。一旦我们从 Docker 映像创建了 Docker 容器，就会在其他只读层之上创建一个新的可写层，其中包含对容器文件系统所做的所有修改:
![Figure 2.2: Docker image layers  ](img/B15021_02_02.jpg)
图 2.2: Docker 映像层
如上图所示，docker 映像构建命令将从`Dockerfile`创建 Docker 映像。Docker 映像的图层将映射到`Dockerfile`中提供的指令。
该映像构建过程由 Docker CLI 启动，并由 Docker 守护程序执行。要生成 Docker 映像，Docker 守护程序需要访问`Dockerfile`、源代码(例如`index.html`)以及在`Dockerfile`中引用的其他文件(例如属性文件)。这些文件通常存储在一个名为构建上下文的目录中。该上下文将在执行 docker 映像构建命令时指定。在映像构建过程中，整个上下文将被发送给 Docker 守护程序。
`docker image build`命令采用以下格式:
```
$ docker image build 
```
我们可以从包含`Dockerfile`和其他文件的文件夹中执行 docker image build 命令，如下例所示。请注意，命令末尾的点(`.`)用于表示当前目录:
```
$ docker image build.
```
让我们看看以下示例`Dockerfile`的 Docker 映像构建过程:
```
FROM ubuntu:latest
LABEL maintainer=PI:EMAIL
CMD ["echo","Hello World"]
```
该`Dockerfile`使用最新的`ubuntu`映像作为父映像。然后，`LABEL`指令用来指定`PI:EMAIL`为维护者。最后，`CMD`指令用于呼应`"Hello World"`作为映像的输出。
一旦我们对前面的`Dockerfile`执行 docker 映像构建命令，在构建过程中，我们可以在控制台上看到类似如下的输出:
```
Sending build context to Docker daemon 2.048kB
Step 1/3 : FROM ubuntu:latest
latest: Pulling from library/ubuntu
2746a4a261c9: Pull complete 
4c1d20cdee96: Pull complete 
0d3160e1d0de: Pull complete 
c8e37668deea: Pull complete
Digest: sha256:250cc6f3f3ffc5cdaa9d8f4946ac79821aafb4d3afc93928
        f0de9336eba21aa4
Status: Downloaded newer image for ubuntu:latest
 ---> 549b9b86cb8d
Step 2/3 : LABEL maintainer=PI:EMAIL
 ---> Running in a4a11e5e7c27
Removing intermediate container a4a11e5e7c27
 ---> e3add5272e35
Step 3/3 : CMD ["echo","Hello World"]
 ---> Running in aad8a56fcdc5
Removing intermediate container aad8a56fcdc5
 ---> dc3d4fd77861
Successfully built dc3d4fd77861
```
输出的第一行是`Sending build context to Docker daemon`，表示构建开始于向 Docker 守护程序发送构建上下文。上下文中所有可用的文件都将递归发送给 Docker 守护程序(除非特别要求忽略某些文件)。
接下来提到的步骤为`Step 1/3`和`Step 2/3`，与`Dockerfile`中的说明相对应。作为第一步，Docker 守护程序将下载父映像。在前面显示的输出中，从库/ubuntu 拉取表明了这一点。对于`Dockerfile`的每一行，将创建一个新的中间容器来执行该指令，一旦该步骤完成，该中间容器将被移除。线`Running in a4a11e5e7c27`和`Removing intermediate container a4a11e5e7c27`用来表示这一点。最后，`Successfully built dc3d4fd77861`线在构建完成时打印出来，没有任何错误。这一行打印新构建的 Docker 映像的 ID。
现在，我们可以使用`docker image list`命令列出可用的 Docker 映像:
```
$ docker image list
```
此列表包含本地构建的 Docker 映像和从远程 Docker 存储库中提取的 Docker 映像:
```
REPOSITORY   TAG       IMAGE ID        CREATED          SIZE
           dc3d4fd77861    3 minutes ago    64.2MB
ubuntu       latest    549b9b86cb8d    5 days ago       64.2MB
```
如前面的输出所示，我们可以看到两个 Docker 映像。映像标识为`dc3d4fd77861`的第一个 Docker 映像是构建过程中本地构建的 Docker 映像。我们可以看到这个`IMAGE ID`和`docker image build`命令最后一行的 ID 是一样的。下一个映像是 ubuntu 映像，我们将其用作自定义映像的父映像。
现在，让我们再次使用`docker image build`命令构建 Docker 映像:
```
$ docker image build
Sending build context to Docker daemon  2.048kB
Step 1/3 : FROM ubuntu:latest
 ---> 549b9b86cb8d
Step 2/3 : LABEL maintainer=PI:EMAIL
 ---> Using cache
 ---> e3add5272e35
Step 3/3 : CMD ["echo","Hello World"]
 ---> Using cache
 ---> dc3d4fd77861
Successfully built dc3d4fd77861
```
这一次，映像构建过程是瞬间的。原因是缓存。由于我们没有更改`Dockerfile`的任何内容，Docker 守护程序利用了缓存，并重用了本地映像缓存中的现有图层来加速构建过程。我们可以看到，这次使用的缓存是前面输出中可用的`Using cache`行。
Docker 守护程序将在开始构建过程之前执行验证步骤，以确保所提供的`Dockerfile`在语法上是正确的。如果语法无效，构建过程将失败，Docker 守护程序会显示一条错误消息:
```
$ docker image build
Sending build context to Docker daemon  2.048kB
Error response from daemon: Dockerfile parse error line 5: 
unknown instruction: INVALID
```
现在，让我们使用`docker image list`命令重新访问本地可用的 Docker 映像:
```
$ docker image list
```
该命令应返回以下输出:
```
REPOSITORY    TAG       IMAGE ID         CREATED          SIZE
            dc3d4fd77861     3 minutes ago    64.2MB
ubuntu        latest    549b9b86cb8d     5 days ago       64.2MB
```
请注意，我们的自定义 Docker 映像没有名称。这是因为我们在构建过程中没有指定任何存储库或标签。我们可以使用 docker image tag 命令来标记现有映像。
让我们用`IMAGE ID dc3d4fd77861`标记我们的映像为`my-tagged-image:v1.0`:
```
$ docker image tag dc3d4fd77861 my-tagged-image:v1.0
```
现在，如果我们再次列出我们的映像，我们可以在`REPOSITORY`和`TAG`列下看到 Docker 映像名称和标签:
```
REPOSITORY        TAG       IMAGE ID        CREATED         SIZE
my-tagged-image   v1.0      dc3d4fd77861    20 minutes ago  64.2MB
ubuntu            latest    549b9b86cb8d    5 days ago      64.2MB
```
我们还可以在构建过程中通过指定`-t`标志来标记映像:
```
$ docker image build -t my-tagged-image:v2.0 .
```
前面的命令将打印以下输出:
```
Sending build context to Docker daemon  2.048kB
Step 1/3 : FROM ubuntu:latest
 ---> 549b9b86cb8d
Step 2/3 : LABEL maintainer=PI:EMAIL
 ---> Using cache
 ---> e3add5272e35
Step 3/3 : CMD ["echo","Hello World"]
 ---> Using cache
 ---> dc3d4fd77861
Successfully built dc3d4fd77861
Successfully tagged my-tagged-image:v2.0
```
这一次，除了`Successfully built dc3d4fd77861`线之外，我们还可以看到一条`Successfully tagged my-tagged-image:v2.0`线，表示我们 Docker 映像上的标记。
在本节中，我们学习了如何从`Dockerfile`构建 Docker 映像。我们讨论了`Dockerfile`和 Docker 映像之间的区别。然后，我们讨论了 Docker 映像是如何由多层组成的。我们还体验了缓存如何加速构建过程。最后，我们标记了 Docker 映像。
在下一个练习中，我们将根据在练习 2.01:创建我们的第一个 Dockerfile 中创建的`Dockerfile`来构建 Docker 映像。
## 练习 2.02:创建我们的第一个 Docker 形象
在本练习中，您将从在*练习 2.01:* *中创建的`Dockerfile`构建 Docker 映像，并从新构建的映像运行 Docker 容器。首先，您将在不传递任何参数的情况下运行 Docker 映像，期望您正在阅读 Docker Workshop 作为输出。接下来，您将运行以`Docker Beginner's Guide`为参数的 Docker 映像，并期望您正在阅读 Docker 初学者指南作为输出:*
1.  首先，确保您在*练习 2.01 中创建的`custom-docker-image`目录中:* *创建我们的第一个文件*。确认目录包含以下在*练习 2.01 中创建的`Dockerfile`:**创建我们的第一个文档文件* :
    ```
    # This is my first Docker image
    FROM ubuntu 
    LABEL maintainer=PI:EMAIL 
    RUN apt-get update
    CMD ["The Docker Workshop"]
    ENTRYPOINT ["echo", "You are reading"]
    ```
2.  Build the Docker image with the `docker image build` command. This command has the optional `-t` flag to specify the tag of the image. Tag your image as `welcome:1.0`:
    ```
    $ docker image build -t welcome:1.0 .
    ```
    注意
    不要忘记前面命令末尾的点(`.`)，它用于将当前目录表示为构建上下文。
    从下面的输出可以看出`Dockerfile`中提到的五个步骤都是在构建过程中执行的。输出的最后两行表明映像已成功构建并标记:
    ![Figure 2.3: Building the welcome:1.0 Docker image ](img/B15021_02_03.jpg)
    图 2.3:构建欢迎:1.0 Docker 映像
3.  Build this image again without changing the `Dockerfile` content:
    ```
    $ docker image build -t welcome:2.0 .
    ```
    请注意，由于使用了缓存，此构建过程比之前的过程完成得快得多:
    ![Figure 2.4: Building the welcome:1.0 Docker image using the cache ](img/B15021_02_04.jpg)
    图 2.4:使用缓存构建欢迎:1.0 Docker 映像
4.  Use the `docker image list` command to list all the Docker images available on your computer:
    ```
    $ docker image list
    ```
    这些映像在您的计算机上可用，无论是从 Docker 注册表中提取它们，还是在您的计算机上构建:
    ```
    REPOSITORY   TAG      IMAGE ID        CREATED          SIZE
    welcome      1.0      98f571a42e5c    23 minutes ago   91.9MB
    welcome      2.0      98f571a42e5c    23 minutes ago   91.9MB
    ubuntu       latest   549b9b86cb8d    2 weeks ago      64.2MB
    ```
    从前面的输出可以看出，有三个 Docker 映像可用。`ubuntu`映像从 Docker Hub 中提取，版本(`tag` ) `1.0`和`2.0``welcome`映像构建在您的计算机上。
5.  Execute the `docker container run` command to start a new container from the Docker image that you built in `step 1` (`welcome:1.0`):
    ```
    $ docker container run welcome:1.0
    ```
    输出应如下所示:
    ```
    You are reading The Docker Workshop
    ```
    您收到`You are reading The Docker Workshop`的预期输出。`You are reading`来自`ENTRYPOINT`指令提供的参数，`The Docker Workshop`来自`CMD`指令提供的参数。
6.  Finally, execute the `docker container run` command again, this time with command-line arguments:
    ```
    $ docker container run welcome:1.0 "Docker Beginner's Guide"
    ```
    由于命令行参数`Docker Beginner's Guide`和`ENTRYPOINT`指令中提供的`You are reading`参数，您将获得输出`You are reading Docker Beginner's Guide`:
    ```
    You are reading Docker Beginner's Guide
    ```