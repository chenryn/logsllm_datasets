four oracles Enc.init, Enc.next, Enc.last, and Dec.
In Enc.init(𝑖, 𝑁), the adversary indicates that it wants to encrypt a new segmented message for
user 𝑖 under nonce 𝑁, and receives an index 𝑗 of the segmented message. Again we require that the
adversary be nonce-respecting, meaning that each pair (𝑖, 𝑁) never repeats. Each user may encrypt
concurrently multiple segmented messages; when the adversary calls Enc.next or Enc.last, it has to
specify the indices of the user and segmented message that it wants to attack. Once the adversary
terminates the encryption of a segmented message via Enc.last, subsequent queries of Enc.next or
Enc.last on that particular index will be rejected.
To use the decryption oracle, the adversary needs to provide a (possibly partial) segmented AD 𝐴
and a segmented ciphertext 𝐶 of the same length, and a bit 𝑎 to indicate whether those are full. If
the challenge bit 𝑏 is 1 then the oracle indicates whether the entire (𝐴, 𝐶) is successfully decrypted
(but does not return the decrypted partial segmented message), otherwise it will always return
false. To prevent a trivial win, the adversary is prohibited from the following behaviors:
– Calling 𝑗 ← Enc.init(𝑖, 𝑁), and 𝐶𝑘 ← Enc.next(𝑖, 𝑗, 𝐴𝑘, 𝑀𝑘) for 𝑘 = 1, . . . , 𝑚, and then querying
– Calling 𝑗 ← Enc.init(𝑖, 𝑁), and 𝐶𝑘 ← Enc.next(𝑖, 𝑗, 𝐴𝑘, 𝑀𝑘) for 𝑘 = 1, . . . , 𝑚 − 1, and 𝐶𝑚 ←
Enc.last(𝑖, 𝑗, 𝐴𝑚, 𝑀𝑚), and then querying Dec(𝑖, 𝑁, 𝐴, 𝐶, 1), where 𝐴 = (𝐴1, . . . , 𝐴𝑚) and 𝐶 =
(𝐶1, . . . , 𝐶𝑚).
Dec(𝑖, 𝑁, 𝐴, 𝐶, 0), where 𝐴 = (𝐴1, . . . , 𝐴𝑚) and 𝐶 = (𝐶1, . . . , 𝐶𝑚).
Random-Access Decryption. The treatment above of online AE assumes that a receiver will
perform decryption in an in-order fashion. However, there are applications that demand random-
access decryption. For example, suppose that one encrypts a huge file, where each segment is a
few MB. Later, when one needs to read some portion of a file, it would be very time-consuming if
one has to decrypt from the beginning to the needed location. It is therefore desirable to decrypt
just the ciphertext segments containing the part of the file one wants to read.
Specifically, we say that an online AE scheme 𝛱 = (𝒦,ℰ,𝒟) is canonical
We now identify a class of online AE scheme that can be used for random-access decryption.
if (i) when we call
8
𝒟.init(𝐾, 𝑁), we get back a state of the form (1, 𝜎), and (ii) for each call 𝒟.next(𝑆, 𝐴, 𝐶) with
𝑆 = (𝑖, 𝜎), the updated state 𝑆* is (𝑖 + 1, 𝜎). Thus a receiver can first run 𝒟.init(𝐾, 𝑁) to store
the sub-state 𝜎. Subsequently, each time when she needs to decrypt the 𝑖-th ciphertext segment 𝐶
and its corresponding AD segment 𝐴, she will call 𝒟.next(𝑆, 𝐴, 𝐶), where 𝑆 ← (𝑖, 𝜎).
The nOAE2 notion. By adapting the nOAE notion, we can define an nOAE2 notion for canonical
online AE schemes such that decryption queries can have random access. In particular, let 𝛱 =
(𝒦,ℰ,𝒟) be a canonical online AE scheme. For an adversary 𝒜, define
Advnoae2
𝛱
(𝒜) = 2 Pr[Gnoae2
𝛱
(𝒜)] − 1 ,
𝛱
is defined in Fig. 5. This game is essentially the same as game Gnoae
𝛱 (𝒜), except
where game Gnoae2
that for each decryption query, the adversary has to provide a list ℐ of indices of the segments in 𝐶
and 𝐴, and the oracle only attempts to decrypt those segments. Again the adversary is required
to be nonce-respecting. To prevent a trivial win, the adversary is prohibited from the following
behaviors:
– Calling 𝑗 ← Enc.init(𝑖, 𝑁), and 𝐶𝑘 ← Enc.next(𝑖, 𝑗, 𝐴𝑘, 𝑀𝑘) for 𝑘 = 1, . . . , 𝑚, and then querying
Dec(𝑖, 𝑁, 𝐴, 𝐶,ℐ, 0) such that 𝐴[𝑗] = 𝐴𝑗 and 𝐶[𝑗] = 𝐶𝑗 for every 𝑗 ∈ ℐ.
– Calling 𝑗 ← Enc.init(𝑖, 𝑁), and 𝐶𝑘 ← Enc.next(𝑖, 𝑗, 𝐴𝑘, 𝑀𝑘) for 𝑘 = 1, . . . , 𝑚, and then querying
Dec(𝑖, 𝑁, 𝐴, 𝐶,ℐ, 1) such that |𝐶| ̸∈ ℐ and 𝐴[𝑗] = 𝐴𝑗 and 𝐶[𝑗] = 𝐶𝑗 for every 𝑗 ∈ ℐ.
– Calling 𝑗 ← Enc.init(𝑖, 𝑁), and 𝐶𝑘 ← Enc.next(𝑖, 𝑗, 𝐴𝑘, 𝑀𝑘) for 𝑘 = 1, . . . , 𝑚 − 1, and 𝐶𝑚 ←
Enc.last(𝑖, 𝑗, 𝐴𝑚, 𝑀𝑚), and then querying Dec(𝑖, 𝑁, 𝐴, 𝐶,ℐ, 1) such that 𝐴[𝑗] = 𝐴𝑗 and 𝐶[𝑗] =
𝐶𝑗 for every 𝑗 ∈ ℐ.
We can view nOAE2 as a way to generalize nOAE by using an adversarial list ℐ to allow random-
access decryption instead of fixing ℐ = (1, . . . ,|𝐶|) for sequential decryption. In Appendix A, we
show a contrived canonical online AE scheme that is nOAE-secure, but trivially broken under the
nOAE2 notion. Thus for canonical online AE schemes, nOAE2 is strictly stronger than nOAE.
Since all online AE schemes in this paper are canonical, we will focus on the nOAE2 notion.
4 Tink’s Streaming Encryption
In this section we describe the streaming encryption in Google’s Tink library, and analyze its
security. We begin by recalling the STREAM paradigm of Hoang et al. [15] that Tink’s streaming
encryption loosely follows.
4.1 The STREAM Construction
The scheme. Hoang et al. [15] give a construction STREAM that turns a conventional AE scheme
to an nOAE-secure canonical online AE one. In particular, let 𝛱 = (K, E, D) be a conventional
AE scheme. The construction STREAM[𝛱] = (𝒦,ℰ,𝒟) has the same key-generation algorithm
as 𝛱, meaning that 𝒦 = K. Its specification is given in Fig. 6.
Security of the STREAM construction. Hoang et al. [15] only provide a single-user analysis
of the nOAE security of STREAM. Below, we will give a multi-user nOAE2 bound.
9
procedure Initialize
𝐾1, 𝐾2,··· ←$ 𝒦; 𝐽1, 𝐽2,··· ← 0; 𝑏 ←$ {0, 1}
procedure Enc.init(𝑖, 𝑁)
𝐽𝑖 ← 𝐽𝑖 + 1; 𝑗 ← 𝐽𝑖; 𝑆𝑖,𝑗 ← ℰ.init(𝐾𝑖, 𝑁); return 𝐽𝑖
procedure Enc.next(𝑖, 𝑗, 𝐴, 𝑀)
if 𝑆𝑖,𝑗 = ⊥ then return ⊥
(𝐶1, 𝑆𝑖,𝑗) ← ℰ.next(𝑆𝑖,𝑗, 𝐴, 𝑀); 𝐶0 ←$ {0, 1}|𝐶1|
return 𝐶𝑏
procedure Enc.last(𝑖, 𝑗, 𝐴, 𝑀)
if 𝑆𝑖,𝑗 = ⊥ then return ⊥
𝐶1 ← ℰ.last(𝑆𝑖,𝑗, 𝐴, 𝑀); 𝐶0 ←$ {0, 1}|𝐶1|; 𝑆𝑖,𝑗 ← ⊥
return 𝐶𝑏
procedure Dec(𝑖, 𝑁, 𝐴, 𝐶,ℐ, 𝑎)
if 𝑏 = 0 or |𝐴| ̸= |𝐶| then return false
(1, 𝜎) ← 𝒟.init(𝐾𝑖, 𝑁); 𝑚 ← |𝒞|
for 𝑟 ← 1 to |ℐ| do
if ℐ[𝑟] > 𝑚 or ℐ[𝑟]  𝑚 or 𝑗 < 1 then return false
if (𝑎 = 0 or 𝑗 < 𝑚) then
procedure Enc.init(𝑖, 𝑁)
if 𝐽𝑖 = ⊥ then 𝐽𝑖 ← 0
𝐽𝑖 ← 𝐽𝑖 + 1; 𝑗 ← 𝐽𝑖; 𝑆𝑖,𝑗 ← (𝑁, 1); return 𝐽𝑖
procedure Enc.next(𝑖, 𝑗, 𝐴, 𝑀)
if 𝑆𝑖,𝑗 = ⊥ then return ⊥
(𝑁, ℓ) ← 𝑆𝑖,𝑗; 𝑆𝑖,𝑗 ← (𝑁, ℓ + 1); 𝑁* ← ⟨𝑁, ℓ, 0⟩
𝐶 ← Enc(𝑖, 𝑁*, 𝐴, 𝑀); Tab[𝑖, 𝑁*, 𝐴, 𝐶] ← true
return 𝐶
procedure Enc.last(𝑖, 𝑗, 𝐴, 𝑀)
if 𝑆𝑖,𝑗 = ⊥ then return ⊥
(𝑁, ℓ) ← 𝑆𝑖,𝑗; 𝑆𝑖,𝑗 ← ⊥; 𝑁* ← ⟨𝑁, ℓ, 1⟩
𝐶 ← Enc(𝑖, 𝑁*, 𝐴, 𝑀); Tab[𝑖, 𝑁*, 𝐴, 𝐶] ← true
return 𝐶
Fig. 7: Constructed adversary ℬ in the proof of Proposition 1. It is given two oracles Enc and Dec,
and maintains an internal procedure Look.
return true
private procedure Look(𝑖, 𝑁*, 𝐴, 𝐶)
if Tab[𝑖, 𝑁*, 𝐴, 𝐶] ̸= ⊥ then return true
return Dec(𝑖, 𝑁*, 𝐴, 𝐶)
elsif Look(𝑖,⟨𝑁, 𝑚, 1⟩, 𝐴[𝑚], 𝐶[𝑚]))︀ = false then
if Look(𝑖,⟨𝑁, 𝑗, 0⟩, 𝐴[𝑗], 𝐶[𝑗]) = false then return false
Adversary ℬ uses about the same running time and makes as many encryption queries as 𝒜. It
also makes at most as many decryption queries as the total number of ciphertext segments in 𝒜’s
decryption queries.
Proof. Given an adversary 𝒜 attacking STREAM[𝛱], we construct an adversary ℬ attacking 𝛱
as follows. Adversary ℬ runs 𝒜 and simulates game Advnoae2
STREAM[𝛱](𝒜) with challenge bit 𝑏 = 1,
but the oracles are implemented as shown in Fig. 7. Informally, for each call E𝐾(𝑖, 𝑁*, 𝐴, 𝑀),
adversary ℬ will make the corresponding query (𝑖, 𝑁*, 𝐴, 𝑀) to its oracle Enc to get the an-
swer 𝐶, and stores the tuple (𝑖, 𝑁*, 𝐴, 𝐶). For each call D𝐾(𝑖, 𝑁*, 𝐴, 𝐶), if there is no prior tuple
(𝑖, 𝑁*, 𝐴, 𝐶) then the adversary will query Dec(𝑖, 𝑁*, 𝐴, 𝐶). However, if there is already such a
tuple then querying Dec is prohibited; in that case the adversary returns true instead. Since 𝒜 is
nonce-respecting and since we include a counter in creating the nonces of STREAM, adversary ℬ
is also nonce-respecting. When 𝒜 finishes and outputs a bit 𝑏′, adversary ℬ outputs the same bit.
Due to the restriction on the behavior of 𝒜, any call to the Dec oracle of 𝒜 must eventually
end up with a call to the oracle Dec of ℬ instead of looking up prior tuples from the encryption