                OPEN_EXISTING,
                FILE_FLAG_SEQUENTIAL_SCAN,
                NULL
                )) == INVALID_HANDLE_VALUE)
            {
                // Error
                _tprintf(_T("CreateFile error 0x % x\n"), GetLastError());
                return 1;
            }
            // Get file size
            DWORD dwRsaContentSize = 0;
            if ((dwRsaContentSize = GetFileSize(hRsaFile, NULL)) == INVALID_FILE_SIZE)
            {
                // Error
                _tprintf(_T("GetFileSize error 0x % x\n"), GetLastError());
                return 1;
            }
            // Create a buffer for the private key
            BYTE* pbRsaContent = NULL;
            if (!(pbRsaContent = (BYTE *)malloc(dwRsaContentSize)))
            {
                // Error
                _tprintf(_T("malloc error 0x % x\n"), GetLastError());
                return 1;
            }
            // Read private key
            if (!ReadFile(hRsaFile, pbRsaContent, dwRsaContentSize, &dwRsaContentSize, NULL))
            {
                // Error
                _tprintf(_T("ReadFile error 0x % x\n"), GetLastError());
                return 1;
            }
            // Open encrypted file
            if ((hEncryptedFile = CreateFile(
                strEncryptedFile,
                GENERIC_READ,
                FILE_SHARE_READ,
                NULL,
                OPEN_EXISTING,
                FILE_FLAG_SEQUENTIAL_SCAN,
                NULL
                )) == INVALID_HANDLE_VALUE)
            {
                // Error
                _tprintf(_T("CreateFile error 0x % x\n"), GetLastError());
                return 1;
            }
            // Get file size
            if ((dwDataLen = GetFileSize(hEncryptedFile, NULL)) == INVALID_FILE_SIZE)
            {
                // Error
                _tprintf(_T("GetFileSize error 0x % x\n"), GetLastError());
                return 1;
            }
            // Create a buffer for the encrypted data
            if (!(pbData = (BYTE *)malloc(dwDataLen)))
            {
                // Error
                _tprintf(_T("malloc error 0x % x\n"), GetLastError());
                return 1;
            }
            // Read encrypted data
            if (!ReadFile(hEncryptedFile, pbData, dwDataLen, &dwDataLen, NULL))
            {
                // Error
                _tprintf(_T("ReadFile error 0x % x\n"), GetLastError());
                return 1;
            }
            if (CryptCreateHash(hCryptProv, CALG_SHA_256, 0, 0, &phHash))
            {
                if (CryptHashData(phHash, pbRsaContent, 0x114u, 0) && CryptDeriveKey(hCryptProv, 0x6610u, phHash, CRYPT_EXPORTABLE, &hKey))
                {
                    if (CryptDecrypt(hKey, 0, 1, 0, pbData, &dwDataLen))
                    {
                        // Create a file to save the plain text
                        if ((hPlainFile = CreateFile(
                            strPlainFile,
                            GENERIC_WRITE,
                            0,
                            NULL,
                            CREATE_ALWAYS,
                            FILE_ATTRIBUTE_NORMAL,
                            NULL
                            )) == INVALID_HANDLE_VALUE)
                        {
                            // Error
                            _tprintf(_T("CreateFile error 0x % x\n"), GetLastError());
                            return 1;
                        }
                        // Write the plain text the file
                        if (!WriteFile(
                            hPlainFile,
                            (LPCVOID)pbData,
                            dwDataLen,
                            &lpNumberOfBytesWritten,
                            NULL
                            ))
                        {
                            // Error
                            _tprintf(_T("WriteFile error 0x % x\n"), GetLastError());
                            return 1;
                        }
                    }
                    CryptDestroyKey(hKey);
                }
                CryptDestroyHash(phHash);
            }
            CryptReleaseContext(hCryptProv, 0);
            return 0;
        }
        __finally
        {
            // Clean up
            if (!pbPrivateKey) {
                free(pbPrivateKey);
            }
            if (!pbData) {
                free(pbData);
            }
            if (hPrivateKeyFile) {
                CloseHandle(hPrivateKeyFile);
            }
            if (hEncryptedFile) {
                CloseHandle(hEncryptedFile);
            }
            if (hPlainFile) {
                CloseHandle(hPlainFile);
            }
            if (hKey) {
                CryptDestroyKey(hKey);
            }
            if (hCryptProv) {
                CryptReleaseContext(hCryptProv, 0);
            }
        }
    }