client can try to avoid the failing tour guide by changing
nx and trying to have different tour. The client sends nx to
the server as part of the puzzle answer at the end, hence the
server does not have to remember it.
B. Puzzle Veriﬁcation at the Server
We can improve the efﬁciency of the puzzle answer
veriﬁcation at the server by letting the server to pre-compute
puzzle answers during idle CPU cycles, and store the answer
in a bloom ﬁlter [12] indexed by Ax. To avoid an attacker
launch memory exhaustion attack on the server, we can use
a ﬁxed-size bloom ﬁlter. Using a 0.1% false positive bloom
ﬁlter that uses 14.4 bits to store an element, we can store
more than 220×8
24 = 219 puzzle answers in a 1MB bloom
ﬁlter. Now the veriﬁcation of puzzle answer takes only a
single memory lookup.
V. ANALYSIS
In this section we use analytical reasoning and experiment
results to show how guided tour puzzle can meet our
proposed design goals.
A. General Puzzle Properties
For each property, we brieﬂy explain how that property
is achieved in guided tour puzzle.
Computation guarantee. Each client is required to com-
pute L modulo operation in order to ﬁnd out the next tour
guide in a tour. Since this operation is the easiest way to ﬁnd
the right tour guides, there is no other way that takes lesser
number of operations, achieving computation guarantee for
all clients.
Efﬁciency. In guided tour puzzle, construction of a puzzle
takes only a single hash operation to compute h0 at the
server, and veriﬁcation of a puzzle answer takes one memory
lookup in the improved scheme. Transferring of puzzle from
server to the client requires B/8 plus few extra bytes, where
B is usually 160 ∼ 256 bits.
Adjustability of difﬁculty. The difﬁculty of a tour puzzle
is adjusted by adjusting the tour length L, which can
be increased or decreased by one. Therefore, guided tour
puzzles provide linear adjustability of difﬁculty.
Correlation-free. Guided tour puzzles are correlation-
free, because knowing all previous puzzle answer does not
help solve the current puzzle in any way. This property is
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:07:31 UTC from IEEE Xplore.  Restrictions apply. 
Figure 2. The tour delays of clients. (a) Example of tour delay at a single point in time (20:11:26 on May 23, 2009), the number of tour guides N = 4.
(b) Average tour delay of all client nodes for two-week period when N = 4.
(a)
(b)
provided by the security of the one-way hash chain we used
in guided tour puzzle.
Stateless. Guided tour puzzle does not require the server
to store any client or puzzle related information, except
for the cryptographic keys that are used for the hash cal-
culation. Puzzle answer veriﬁcation using memory lookup
does require few megabytes of memory space in total, but it
is negligible considering the large memory size of modern
servers.
Tamper-resistance. The coarse timestamp used in the
computation of each hl guarantees a limited validity period
of a puzzle answer. Meanwhile, the puzzle answer computed
by one client cannot be used by any other client, since a
value unique to each client is included in the computation
of each hl.
Non-parallelizability. Guided tour puzzle cannot be com-
puted in parallel. An attacker with N malicious clients can
assign each client to contact one tour guide, and try to com-
pute the puzzle answer in parallel. But each malicious client
has to ﬁrst get a hl from the tour guide it is responsible for,
and sends it to the next malicious client that is responsible
for the next tour guide in the tour. Thus even with multiple
malicious clients, attacker still has to compute the puzzle
answer sequentially.
B. Achieving Puzzle Fairness
In guided tour puzzle, the time delay enforced on a client
mainly comes from the round trip to multiple tour guides.
The advantage of this is that nobody, not even a powerful
attacker, can control the round trip delay occurred in an
Internet-scale distributed system. Due to the variation in the
round trip delay across multiple clients, it is possible that
the sum of round trip delays, which we will refer to as
tour delay from now on, experienced by an attacker is much
284
smaller than by a legitimate client for a single tour. However,
it can also be the opposite. Meanwhile, the variation in
average tour delay across multiple clients is within a small
factor as shown next by the experiment results. Although
a small variation in the tour delay is inevitable, it cannot
be effectively manipulated by an attacker to achieve unfair
advantage over legitimate clients, regardless of attacker’s
CPU, memory, or bandwidth advantage. Therefore, guided
tour puzzle achieves a fairness that is far better than any
existing puzzle scheme can.
An attacker can try to minimize the puzzle solving time
by using multiple malicious clients, where each malicious
client is responsible for contacting the tour guide closest to
it. But this kind of attacker actually cannot gain signiﬁcant
advantage over a legitimate client, because each malicious
client has to wait one round-trip time to get the reply of the
tour guide it is closest to, and ﬁgure out the index of the
next tour guide, then spend another half a round trip delay
to send this information to the malicious client closest to
the next tour guide. Furthermore, the extra one-way delay
is likely to be large, because the next tour guide is more
likely to be far from the previous malicious client due to
the ‘greedy’ positioning of malicious clients.
Next, we use experiment results to show that the variation
in the tour delays across multiple clients is within a small
factor for a large-scale distributed system like Internet. This
variation should not be confused with the delay variation
across multiple round trips for a ﬁxed sender-receiver pair.
We used measurement data from PlanetLab Scalable
Sensing Service (S3) [13] that are collected over two-
week period. PlanetLab has a collection of over 1000 nodes
distributed across the globe, and provides a realistic network
testbed that experiences congestion, failures, and diverse link
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:07:31 UTC from IEEE Xplore.  Restrictions apply. 
 0 500 1000 1500 2000 2500 3000 3500 4000 0 50 100 150 200 250 300 350 400Accumulated round trip delay (ms)Client node indexL=4L=6L=8L=10L=12 0 2000 4000 6000 8000 10000 12000 14000 0 50 100 150 200 250 300 350 400Client node indexL=2L=6L=10L=14L=18(a)
(c)
(b)
(d)
Figure 3.
(unit: millisecond) when N = 4 and tour length L = 10. (d) Q-Q plot of tour delay against normal distribution when N = 4, L = 10.
(a), (b) Average tour delay of all clients when the number of tour guides N = 8 and N = 12 respectively. (c) Probability density of tour delay
behaviors [14]. S3 provides end-to-end latency data for all
pairs of nodes in PlanetLab. About half of all the PlanetLab
nodes have latency data available throughout the two weeks
we collected data, so our experiments use these nodes only.
We choose 20 PlanetLab nodes at maximum as tour
guides, based on the better connectivity of these nodes to
all other PlanetLab nodes, and do not try to optimally pick
them to achieve the least delay variation. The remaining
PlanetLab nodes are treated as client nodes. The number of
tour guides N is varied from 4 to 20, and the tour length L
is varied from 2 to 18. For each (N, L) pair, we compute
guided tours using formula (1) and (2) for all client nodes,
and compute a tour delay for each tour based on the collected
data. As an example of tour delay at a single point in time,
Figure 2a shows the tour delays of all client nodes for the
setting N = 4 and L = 4, 6, 8, 10, 12 on May 23, 2009.
For this particular data, the ratio of tour delays of the client
with the most delay and the client with the least delay is 13,
when the 4% clients nodes with exceptionally large delays
are excluded.
To give a better idea of how the tour delay vary across
clients on average, we averaged tour delays of all clients
over two-week period. To ﬁnd the average tour delay of a
client for a speciﬁc (N, L) setting, all tour delays of the
client for that (N, L) during the two-week period are taken
average. Then, the average tour delays are sorted from the
least to the most, in order to provide a better view of delay
variation across all clients. Figure 2b and Figure 3a and 3b
285
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:07:31 UTC from IEEE Xplore.  Restrictions apply. 
 0 2000 4000 6000 8000 10000 12000 14000 0 50 100 150 200 250 300 350 400Accumulated round trip delay (ms)L=2L=6L=10L=14L=18 0 2000 4000 6000 8000 10000 12000 14000 0 50 100 150 200 250 300 350 400L=2L=6L=10L=14L=18Histogram of xGuided tour delay (ms)Density020004000600080000e+002e!044e!046e!048e!041e!03!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!3!2!101230200040006000Normal Q!Q PlotTheoretical QuantilesSample Quantilesshows the average tour delays computed using this method
for all client nodes when N=4, 8, 12. Results for other
values of N are skipped due to space limitation, but they are
very similar to the results shown here. When excluding 5%
client nodes with exceptionally large delays, the ratio of tour
delays of the client with the most delay and the client with
the least delay is around 5. This disparity is several orders
of magnitude smaller when compared to the disparity in
available computational power (which can be in thousands).
Figure 3c and 3d shows that majority of tour delays are
clustered within a tight area of delay and the distribution of
tour delays closely simulates a normal distribution. Overall,
experiment results strongly supported our claim about the
fairness of guided tour puzzle.
C. Achieving Minimum Interference
In guided tour puzzle scheme, a client has to perform
two types of operations: modulo operations for computing
the index of the next tour guide, and sending packets to tour
guides. To complete a guided tour puzzle with length L, a
client only needs to perform L modulo operations plus send
and receive a total of 2× L packets with about 20∼32 bytes
of data payload, where L is usually a small number below
30. This creates negligible CPU and bandwidth overhead
even for small devices such as PDAs or cell phones.
D. Effectiveness Against DoS and DDoS
We now analyze the effectiveness of guided tour puzzle
against DoS and DDoS attacks. Since guided tour puzzle
can be used independently or in combination with other
mechanisms to prevent denial of service attacks at the var-
ious levels of the network, we do not discuss our scheme’s
denial of service capability in terms of a speciﬁc layer of the
network. One might argue that the bandwidth available to the
server can be ﬂooded, making the server unable to use the
protection provided by puzzles. We believe that deploying
capability-based denial of service prevention schemes [15]
[16] in conjunction with guided tour puzzle can prevent such
ﬂooding attacks.
1) DoS Attack: If an attacker with single malicious client
launches denial of service attack on the server, guided tour
puzzle can easily prevent the attack regardless of attacker
is spooﬁng a single or multiple addresses. As with other
cryptographic puzzle schemes, guided tour puzzle imposes
a commitment on a client before granting service, and
effectively controls the request arrival rate. In essence, the
commitment imposed on clients by all cryptographic puzzles
is time. All previous puzzle schemes try to achieve this time
commitment at the client by means of computations that
require signiﬁcant CPU and/or memory overhead, but they
unfairly give advantage to strong attackers and are obtrusive
to end users. Guided tour puzzle instead achieves this time
commitment in a guaranteed and unobtrusive manner, and
most of all, all clients have to commit same amount of time
to complete a tour puzzle regardless the amount of resources
available to them. Therefore, a single attacker essentially
reduced to a single legitimate client, and that only increases
the number of legitimate clients by one.
2) DDoS Attack: In a DDoS attack, an attacker perpetrate
attack on the victim using multiple malicious clients, thus
the power of the attacker is roughly multiplied by the
number of malicious clients she has. Previous cryptographic
puzzle defense mechanisms against DDoS suffer from the
resource disparity problem we discussed in Section I. Since
guided tour puzzle achieves puzzle fairness, the number of
malicious clients required to send requests at a rate that
reaches the server’s maximum capacity is orders of mag-
nitude larger than the number of malicious clients required
when previous puzzle schemes are used. The protection of
guided tour puzzle comes from the fact that it effectively
reduces a malicious client into a legitimate client. Of course,
attacker can still overwhelm the server when she has enough
malicious clients, but so does the same number of legitimate
clients.
Fortunately, a server with guided tour puzzle can still
prevent itself from crashing, despite the fact that there are too
many clients (whether they malicious or not), by increasing
the puzzle difﬁculty and imposing longer delays at
the
client. Meanwhile, guided tour puzzle achieves minimum
degradation in the service quality when compared with
previous puzzle schemes. The degradation of service by
such large amounts of malicious clients is extremely hard to
prevent without being able to differentiate malicious clients
from the legitimate ones.
VI. RELATED WORK
Currently there are many different
type of DoS and
DDoS defense mechanisms such as ﬁltering based [17][18],
traceback and pushback based [19][20][21], capability based
[16][15] and cryptographic puzzle based defense mecha-
nisms. Due to the enormity of various such proposals, this
related work survey only focuses on cryptographic puzzle
based mechanisms.
A. Client Puzzles
Dwork and Noar [1] were the ﬁrst to introduce the concept
of requiring a client to compute a moderately hard but not
intractable function, in order to gain access to a shared
resource. However this scheme is not suitable for defending