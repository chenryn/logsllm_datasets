们实际读它们时，我们就越是觉得它们独特、意想不到和新颖。
一部经典作品是一部早于其他经典作品的作品；但是那些先读过其
他经典作品的人，一下子就认出它在众多经典作品的系谱图中的位
置。
当然，书籍不是计算机语言，但这些定义可能仍适合于我们。
14.1所有东西都是对象
今天流行的面向对象计算机语言（C++、Java和C#）并不是纯面向
对象的。并非所有东西都是对象。某些类型是原生类型。因此，举
个例子说，我们不能为一个整数类型提供子类。运算以一般的方式
在纯数字上执行，而不是调用对象的方法。这带来了性能上的好
处，并且对于从过程式语言转向面向对象的人来说，这也比较容易
理解。
但是，如果我们决定将所有东西都作为一个对象，那么情况就大为
不同。在Smalltalk中，不超过31位长的整数是SmallInteger类的实例
（实际上，存在一个抽象的Integer类及其子类SmallInteger、
LargePositiveInteger和LargeNegativelnteger，系统会根据需要自动进
行转换）。我们可以对它们执行普通的运算操作。SmallInteger类提
供了至少670个方法（用Smalltalk的说法，是selector一选择器），
我们可以很容易地发现下面的代码片段：
1268
---
## Page 1270
SmallInteger allSelectors size
考察这段代码如何工作是很有意义的。allSelectors是一个类选择
器，它完成的功能正如其名。它返回一个类的所有选择器，放在一
个Set中（实际上是一个IdentitySet，但在这里对我们并不重要）。
这个Set本身又是一个一级对象，带有自己的选择器。其中的一个选
择器名为size，告诉我们它包含的元素的个数。
在Smalllnteger的选择器中，我们可以找到期望的运算操作。我们也
可以找到三角和对数函数、计算阶乘的函数、计算最大公约数的函
数和计算最小公倍数的函数。还有位操作的函数和许多其他函数。
我们在其他语言中遇到的整型原生类型在Smalltalk中实际上都是
SmallInteger实例。
这解释为什么带参数的选择器在每个参数前面有一个冒号（：）。
算术运算和逻辑运算的选择器，如上例中的+，是这条规则的例外
情况。Transcript是一个类，表示类似系统控制台这样的东西。cr代
表回车，分号（；）将信息连接在一起，所以cr也被发往
Transcript。我们可以在一个解释窗口（在Smalltalk中通常称为工作
空间，）中执行这段代码，直接看到结果。当然，并不是所有670
个SmallInteger的方法都定义在SmallInteger中。SmallInteger处于一个
继承层次结构中，如图14-1所示，其中我们也可以看到SmallInteger
的每个祖先的选择器数目。大多数选择器继承自Object，理解Object
提供了什么功能就可以解释Smalltalk架构的许多方面（在Squeak
中，继承层次结构真正的根是ProtoObject，但这只是一个不太重要
的细节）。
2raisedTo:5
能工作，更有趣的是，这也解释了为什么下面的代码也能工作：
(7+3) timesRepeat: [Transcript show: *Hello,World′: cr]
1269
---
## Page 1271
Obiect的实例都有自己可以自由处理的比较选择器（包括相等，用=
表示，也包括标识符相同，用==表示）：复制选择器（包括深复
制，即调用deepCopy，也包括浅复制，即调用shallowCopy）；在流
中打印的选择器、出错处理、调试、消息处理及其他选择器。这几
百个对象方法中，只有少数是日常编程会用到的。Smalltalk中的方
法被分成组，称为协议（protocol），查看协议描述让我们能够更容
易地找到方法。
在Smalltalk中，方法本身也是一级对象。为了弄清楚这一点对于整
体架构的意义，请看下面的代码：
aRectangle intersects: anotherRectangle
其中aRectangle和anotherRectangle都是Rectangle类的实例。当消息接
收者aRectangle（在Smalltalk中接收消息的对象）收到intersects：消
息时，Smalltalk解释器会做下面的事情（Conroy和Pelegri-Llopart
1983)：
ProloObject35
Object 469
Magnitude 47
Number 575
Integer662
Smallnteger670
1270
---
## Page 1272
图14-1：SmallInteger继承层次结构
1.确定消息接收者的类。
2.在该类及其祖先类中查找消息选择器。
3.取得与找到的类的消息选择器相关联的方法。
在Smalltalk中，不仅像数字这样的东西是对象，类也是对象。所
以，SmallInteger、Object、Rectangle等都是对象。当解释器在一个
类中查找消息选择器时（上面列表中的第2步），它会查找对应的
类对象的内容。更准确地说，会在它的方法字典中查找。Dictionary
类的实例将键和值关联在一起，方法字典将每个选择器与对应的
CompiledMethod实例关联在一起。
顺便说一下，intersects：在Smalltalk中可以优雅地实现为：
(origin max: aRectangle origin) =corner x ifTrue: [^false].
] 
^true
这种方法更快，但不那么漂亮。然而，这让我们有机会介绍一些
Smalltalk的语法。方法局部使用的变量声明在中。赋值操作符是：
=，^与C++和Java中的return等价，小数点（.）分隔语句。方括号
（□）之内的代码称为一个语句块，这是Smalltalk架构中的一个重
要概念。语句块是一个闭包，也就是一段代码，可以访问围绕它的
范围内定义的变量。Smalltalk中的语句块由BlockContext来表示。当
语句块对象接收到消息值时，语句块的内容就得到执行，在大多数
情况下（像这个例子中），消息是隐式发送的。Smalltalk中的注释
放在双引号内，单引号用于表示字符事。
BlockContext可以使用消息接收者、参数和临时变量，也可以使用创
建它的上下文中的消息发送者。有一个类似的类，名为
MethodContext，表示了与方法（正如我们前面看到的，它由
CompiledMethod表示，是一个字节码数组）执行相关的所有动态状
态。
在一种面向对象的语言中，我们会想到，BlockContext和
MethodContext都是ContextPart的子类。ContextPart在其超类
InstructionStream的基础上添加了执行语义。InstrucionStream类的实
例可以解释Smalltalk代码。InstructionStream的超类是Object，继承
关系到此为止。
除了value选择器之外，语句块还有fork选择器，它在语言中实现了
并发。因为Smalltalk中的所有东西都是对象，所以进程就是Process
类的实例。Delay类让我们可以将进程的执行挂起一段时间，当它收
到wait消息时，Delay对象会将当前执行的进程挂起。将这些结合起
来，我们可以利用下面的代码实现一个简单的时钟（Goldberg和
Robson,1989):
1272
---
## Page 1274
[[true] whileTrue:
[Time now printString displayAt: 100@100.
(Delay forSeconds: 1) wait]]fork
只要whileTrue：选择器的消息接收者语句块的值为true，它就会执
行它的语句块参数。@字符是Number类的一个选择器，它将构造
Point类的实例。
语句块也为我们提供了基本的错误处理功能，思路就是：当某些东
西出错时，我们指定执行某些语句块。例如，在Collection对象（一
个对象容器）中，remove：方法会从集合中删除指定的元素。方法
remove：ifAbsent：会尝试从集合中删除指定的元素，如果该元素不
存在，它就会执行作为ifAbsent：参数的语句块。在一个代码最少化
的漂亮例子里，第一个方法是基于第二个方法来实现的：
remove: oldobject
"Remove oldobject from the receiver's elements.Answer
oldobject
unless no element is equal to oldobject,in which
case, raise an error.
ArrayedCollections cannot respond to this message."
^self remove: oldobject ifAbsent: [self errorNotFound:
oldobject]
remove: oldobject ifAbsent: anExceptionBlock
"Remove oldobject from the receiver's elements.If several
of the
elements are equal to oldobject,only one is removed.If no
element is
equal to oldobject,answer the result of evaluating
anExceptionBlock .
1273
---
## Page 1275
Otherwise, answer the argument, oldobject.ArrayedCollections
cannot
respond to this message."
self subclassResponsibility
self是对当前对象的引用（与C++和Java中的this等价），它是一个
保留的名称，是具有固定语义的伪变量。还有其他一些伪变量：
super是对超类的引用（等价于Java中的super）；nil、true和false的
意思很明白：最后还有thisContext，我们可以在
subclassResponsibility方法中看到它。这个选择器定义在Object中，
只是说明子类必须覆写它。
subclassResponsibility
"This message sets up a framework for the behavior of the
Announce that the subclass should have implemented this
message. "
self error: 'My subclass should have overridden',
thisContext
sender selector printString
thisContext伪变量是对当前执行上下文的引用，即当前执行的方法