    Tab 以外的控制字符，字符长度为 1～400。
    ``` 代码无行号
    preg_match('/\A[\r\n\t[:^cntrl:]]{1,400}\z/u', $comment)
    ```
    > **专栏：请注意 mb_ereg 中的 \\d 与 \\w**
    >
    > 正则表达式内置了一些字符集合，如 `\d` 匹配数字，`\w`
    > 匹配英文字母、数字和下划线。但是，mb_ereg 中使用 `\d` 或 `\w`
    > 时也能匹配全角字符。比如 `\d` 就能够匹配全角数字（仅限 Unicode）。
    >
    > 虽然全角数字也是数字这一解释在个别情况下会有所帮助，但是，Web
    > 应用中常见的数值校验中是不允许对象为全角数字的。
    >
    > 像这样，使用内置的字符集合可能会匹配到预想以外的结果，因此，安全起见，建议使用
    > `[a-zA-Z0-9_]` 这类明确声明字符集合的方式。
[5]{.注释编号下} 详情可参考后续章节中对跨站脚本和 SQL 注入的讲解，以及第
6 章。
[6]{.注释编号下} 本书支持页面中的 /42/42-011.php。
[7]{.注释编号下} POSIX 是 IEEE 规定的基于 Unix
操作系统的共通规格，其中也包含了正则表达式的规格。POSIX 字符集合则是指
POSIX 正则表达式中定义的字符集合。
#### **范例**
作为以上内容的总结，接下来我们来看一个 PHP
脚本范例，该脚本的目的在于接收 URL 中的查询字符串 `name`
并将其显示在页面上。
> **代码清单 /42/42-020.php**
``` 代码无行号
姓名为 
```
`getParam`
函数中进行了读取字符串、校验字符编码、转换字符编码、输入校验等操作。定义此类能够复用的共通方法，能够使后续的开发过程轻松很多。
范例代码中也存在一些不足之处，比如错误消息过于简陋难以理解等。这里笔者希望将代码的改善工作作为习题留给读者。
> **专栏：输入校验与框架**
>
> 前面介绍了在应用程序中通过业务逻辑来进行输入校验的方法，而在使用 Web
> 应用开发框架的情况下，也能利用框架中提供的输入校验功能，从而简化开发流程。
>
> 以微软的 .NET Framework
> 为例，该框架提供了名为"校验控件"的可视化输入校验功能。图 4-9 展示了在
> Visual Web Developer 2010 中使用 RangeValidator
> 校验控件的情形。RangeValidator
> 能校验输入值的类型与长度范围，可以看出本例中的输入值为 Integer
> 型，长度范围为 1～100 字符。具体内容请查看图 4-9 中的 `Type`
> 、`MinimumValue` 、`MaximumValue` 、`ErrorMessage` 这些属性。
>
> ![{%}](Image00051.jpg)
>
> **图 4-9 校验控件中的属性设置**
>
> 图 4-10 为运行后的页面。
>
> ![{%}](Image00052.jpg)
>
> **图 4-10 RangeValidator 的运行示例**
>
> 截图是输入"101"后将输入焦点移动时的情形。通过 JavaScript
> 的检验在页面上显示了"请输入范围为 1～100 的整数"的消息。这是在
> RangeValidator 的 `ErrorMessage`
> 属性中设置的消息。同样的校验也会在服务器端执行。
>
> 除 .NET Framework
> 之外，很多其他的开发框架同样也提供了输入校验的功能，在实际进行开发工作时，可根据情况对其善加利用。
#### **总结**
在 Web
应用的入口处，程序会执行以下三类操作，即检验输入字符编码、转换字符编码、输入校验。虽然这些操作并非根本性的安全性策略，但也能够有助于对框架和应用中潜在的安全隐患进行防范。
-   输入校验的依据是应用的规格
-   检验字符编码
-   检验包含控制字符在内的字符种类
-   检验字符数
实施流程如下。
-   设计阶段将各个参数的字符种类以及最大字符数写入软件规格说明书。
-   设计阶段决定输入校验的实现方针。
-   开发阶段依照设计阶段的决定实现输入校验。
#### **参考：表示"非控制字符的字符"的正则表达式**
作为参考，此处介绍一下 PHP、Perl、Java、VB.NET
中表示"非控制字符的字符"的正则表达式。下面各例子的目的都是确认"输入值为
0～100 个字符且不包含控制字符"。
-   **PHP（preg_match）**
    以下为使用 POSIX 字符集合的例子。
    ``` 代码无行号
    if (preg_match('/\A[[:^cntrl:]]{0,100}\z/u', $s) == 1) {
      # 输入校验 OK
    ```
    PHP 的 `preg_match` 函数除了使用 POSIX 字符集合外，还能使用 Perl
    风格的 `\P{Cc}` 。这种写法也适用于 Perl、Java、.NET 等语言。
    ``` 代码无行号
    if (preg_match('/\A\P{Cc}{0,100}\z/u', $s) == 1) {
      # 输入校验 OK
    ```
-   **PHP（mb_ereg）**
    `mb_ereg` 只能使用 POSIX 字符集合。
    ``` 代码无行号
    if (mb_ereg('\A[[:^cntrl:]]{0,100}\z', $addr) !== false) {
      # 输入校验 OK
    ```
-   **Perl**
    Perl 能使用 `\P{Cc}` 来指定控制字符以外的字符。由于 Perl
    中能够使用正则表达式字面量，所以不必使用两个 `\` 来转义。
    ``` 代码无行号
    if ($s =~ /\A\P{Cc}{0,100}\z/) {
      # 输入校验 OK
    ```
-   **Java**
    Java 中可以使用 String 类的 `matches` 方法。`matches`
    方法匹配规则为全体一致，所以正则表达式中不必使用 `\A` 和 `\z` 。Java
    中正则表达式的形式为字符串，所以需要使用两个 `\` 来转义。
    ``` 代码无行号
    if (s.matches("\\P{Cc}{0,100}")) {
      // 输入校验 OK
    ```
-   **VB.NET**
    .NET Framework 中提供了使用 `Regex`
    类进行正则表达式查询的功能。VB.NET 的字符串字面量中不需要使用两个
    `\` 来转义。
    ``` 代码无行号
    if Regex.IsMatch(s, "\A\P{Cc}{0,100}\z") then
     ' 校验 OK
    ```
> **参考文献**
\[1\] 徳丸浩 （.2009 年 6 月 2 日）.
主要言语别：入力値検证の具体例～入力に関する対策（3）. 参考日期：2011 年
1 月 6 日，参考网址：ITpro:
## **4.3 页面显示的相关问题** {#text00000.html#nav_point_21}
页面显示处理中会产生的安全性问题有如下两项。
-   跨站脚本
-   错误消息导致的信息泄漏
这里，我们将跨站脚本分成 4.3.1（基础篇）和
4.3.2（进阶篇）两部分进行详细讲述。进阶篇将涉及应用程序动态生成的显示内容中包括
URL、JavaScript 和 CSS（Cascading Style
Sheets）等的情况。而不涉及动态生成的内容的情况下，则只需彻底掌握基础篇的知识即可。
错误消息导致的信息泄漏将在 4.3.3 节中介绍。
### **4.3.1 跨站脚本（基础篇）** {#text00000.html#nav_point_22}
#### **概要**
通常情况下，在 Web
应用的网页中，有些部分的显示内容会依据外界输入值而发生变化，而如果生成这些
HTML 的程序中存在问题，就会滋生名为跨站脚本（Cross-Site
Scripting）的安全隐患。跨站脚本的英语名称很长，所以经常缩写为
XSS[8]{.注释编号} 。本书也采用 XSS 这一缩写形式。
[8]{.注释编号下} 之所以不缩写为 CSS，是为了避免与 Cascading Style Sheets
的缩写混淆。
Web 应用若存在 XSS 漏洞，就会有下列风险。
-   用户的浏览器中运行攻击者的恶意脚本，从而导致 Cookie
    信息被窃取，用户身份被冒名顶替
-   攻击者能获得用户的权限来恶意使用 Web 应用的功能
-   向用户显示伪造的输入表单，通过钓鱼式攻击窃取用户的个人信息
Web 应用的网页上显示外界传入参数的场所不在少数，只要有一处存在 XSS
漏洞，网站的用户就会有被冒名顶替的风险。
Web 应用中需要防范 XSS
漏洞的地方很多，然而网站运营方却普遍对此疏忽大意，对实施防范措施不够重视。但是，现实中
XSS 攻击是确实存在的，而且 XSS 的受害者也与日俱增，因此，在 Web
应用中采取防范 XSS 漏洞的策略必不可少。
防范 XSS 的策略为，页面显示时将 HTML
中含有特殊意义的字符（元字符）转义（Escape）。具体内容之后会进行详述。
**XSS 漏洞总览**
![{%}](Image00053.jpg)
#### **攻击手段与影响**
为了更好地理解 XSS 的攻击方法与影响，首先让我们来看一下 XSS 被恶意使用的
3 种方式。
> -   窃取 Cookie 值
>
> -   通过 JavaScript 攻击
>
> -   篡改网页
-   **XSS 窃取 Cookie 值**
    假设以下 PHP
    脚本是搜索页面的一部分。该页面需要用户登录后才能使用，页面上显示的是搜索关键词。
    > **代码清单 /43/43-001.php**
    ``` 代码无行号
    <?php
      session_start();