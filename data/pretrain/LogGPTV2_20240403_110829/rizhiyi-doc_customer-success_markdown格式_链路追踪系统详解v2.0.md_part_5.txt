## 日志规范说明

日志规范主要针对研发工作，推动难度较大，需自上而下推行。日志改造通常有两种方式：
- **使用开源组件**：入门门槛低，但扩展性较差。
- **代码改造**：前期投入大，但后续可扩展性强且自主可控。

### 日志格式
全链路日志应采用JSON格式，建议最多包含两层结构：
1. **第一层（关键信息）**：链路信息、时间信息、粒度信息、业务状态信息。
2. **第二层（可扩展信息）**：业务关联信息、预留扩展字段。

#### 示例
```json
{
  "traceid": "XXX",
  "spanid": "YYY",
  "extend": {
    "seqNo": "ZZZ"
  }
}
```

### 日志要求
- 每个系统记录的日志应为每笔交易（请求与响应）生成一条或两条日志，推荐一条。
- 若为一条日志，必须包含 `starttime` 和 `endtime`。
- 若为两条日志，每条日志必须包含相同的 `traceid` 和 `spanid`，并按照上述字段顺序生成。

### 关键字段
链路日志应包括以下字段：
1. **traceid**（必填）
2. **spanid**（必填）
3. **parentspanid**（必填）
4. **starttime**（span开始时间，必填，精确到毫秒级, 格式: "yyyyMMddHHmmssSSS"）
5. **endtime**（span结束时间，必填，精确到毫秒级, 格式: "yyyyMMddHHmmssSSS"）
6. **errorcode**（错误码，必填）
7. **errormessage**（错误信息，必填，错误码对应的中文名称）
8. **errortype**（错误类型，必填，0：正常；1：自身；2：非自身；3：超时，可根据实际情况定义）
9. **service**（必填，用于判断同一个系统内部的不同服务，如果service为多个，则在新通讯规范6位系统标识后面增加自定义英文标识)
10. **servicename**（必填，service对应的中文名称）
11. **interface**（必填，用于判断同一系统同一服务下的不同接口/子服务，名称由各系统自定义，纯英文，确保服务内唯一性)
12. **interfacename**（必填，interface对应的中文名称）
13. **function**（选填，用于判断同一系统同一服务下的不同方法/程序等，名称由各系统自定义，纯英文，确保服务内唯一性）
14. **busitype**（业务标识，必填）
15. **productNoname**（产品码对应的中文名称，选填，发起端必填）
16. **eventNo**（事件码，选填，发起端必填）
17. **eventNoname**（事件码对应的中文名称，选填，发起端必填）
18. **attribute**（业务属性摘要，选填）
19. **extend**（自定义，选填，各系统也可自己定义为多个字段，该值目的为可与原有业务日志进行关联，如交易流水）

### 传递关系
#### Traceid
- 表示当前请求在请求链路中的位置，在首次请求时确认。
- 获取为空时：根据格式规范生成。
- 获取不为空时：日志打印和向下传递。

#### Spanid
- 全新生成：根据格式规范生成。
- 向下传递：会成为下游的 `parentspanid`。

#### Parentspanid
- 首次请求为空。
- 非首次请求：从上游传递的 `spanid` 中获取。
- 分析时需要甄别是否为空。

#### 节点间的生成及传递关系
- **最上游节点**：
  1. 生成 `Traceid`
  2. 生成 `Spanid`
  3. 传递 `Traceid` 和 `Spanid`

- **中间环节节点**：
  1. 获取 `Traceid` 和 `Spanid A`
  2. 把获取到的 `Spanid A` 赋值给 `Parentspanid`
  3. 生成 `Spanid B`
  4. 向下传递 `Traceid` 和 `Spanid B`

- **最后端节点**：
  1. 获取 `Traceid` 和 `Spanid A`
  2. 把获取到的 `Spanid A` 赋值给 `Parentspanid`
  3. 生成 `Spanid B`
  4. 无需向下传递 `Traceid` 和 `Spanid`

### 注意事项
- **调用链日志中的透传必要性**：
  - 接口间调用需要通过业务标识字段分组区分。
  - 基于接口统计业务字段，可以获知该接口服务范围，进而直接确定影响范围。

- **业务标识信息传递方式**：
  - 业务标识在最前端记录，并随透传信息进行下游传递。
  - 传递方式有两种：
    - 业务标识在 `traceid` 中占位，然后随 `traceid` 进行透传。
    - 业务标识单独作为一个字段（如 `busitype`），然后进行透传。

- **业务标识信息字段约束**：
  - 字段长度约定，务必保证可扩展性。
  - 字段名称统一（如 `busitype` 字段）。
  - 可参考样例：业务字段14位，前3位为 `subSystemId`，后11位用于记录业务标识。

除此之外，还应注意以下几点：
1. 链路日志与业务日志分开打印。
2. 日志异步写入，避免堵塞业务线程。
3. 控制日志输出性能（如缓存大小、控制每秒写日志条数、次数）。
4. 设置链路日志全局开关。
5. 稳定性测试，特别是使用开源组件的场景。避免稳定性、性能测试不充分导致大规模业务系统受影响（建议自行改造日志：自有代码可控、影响范围小）。
6. 扩展性：约定字段传递方式及获取方式，支持扩展字段。随着业务需求变化，只需修订服务发起端即可，变化字段信息全局传递，避免后续业务系统全部需要再次改造。
7. 研发改造：优选2-3条业务链路进行改造，小步迭代，优化中前进、成果推动。

### 日志样例
#### 样例1
```json
{
  "traceid": "MBL0010050568D7164C10FDD0D2017587AAF2F",
  "spanid": "MBL0010050568D7164C10FDD0D2017587AAF2F",
  "parentspanid": "",
  "service": "MBL001A",
  "servicename": "手机银行前端",
  "starttime": "20190927154324903",
  "endtime": "20190927154325927",
  "errorcode": "0000",
  "errormessage": "正常",
  "errortype": "0",
  "interface": "web_loan",
  "interfacename": "消费贷",
  "function": "",
  "productNo": "web_loan",
  "productNoname": "消费贷",
  "eventNo": "wl0006",
  "eventNoname": "线上消费贷额度申请",
  "attribute": "MB10867431",
  "extend": ""
}
```

#### 样例2
```json
{
  "traceid": "MBL0010050568D7164C10FDD0D2017587AAF2F",
  "spanid": "MBL0014db9ac6a4883307036c7b6d0b62c1db7",
  "parentspanid": "MBL0010050568D7164C10FDD0D2017587AAF2F",
  "starttime": "20190927101309665",
  "endtime": "20190927101313593",
  "errorcode": "0000",
  "errormessage": "手机银行正常返回",
  "errortype": "0",
  "service": "MBL001B",
  "servicename": "手机银行后台",
  "interface": "MB2319",
  "interfacename": "消费贷额度申请",
  "function": "",
  "productNo": "",
  "productNoname": "",
  "eventNo": "MB2319",
  "eventNoname": "消费贷额度申请",
  "attribute": "",
  "extend": ""
}
```

#### 样例3
```json
{
  "traceid": "MBL0010050568D7164C10FDD0D2017587AAF2F",
  "spanid": "MBL001254ef517932040ac9f4bbd8b472b9aa7",
  "parentspanid": "MBL0014db9ac6a4883307036c7b6d0b62c1db7",
  "starttime": "20190927154030030",
  "endtime": "20190927154030950",
  "errorcode": "0000",
  "errormessage": "XXXX",
  "errortype": ""
}
```