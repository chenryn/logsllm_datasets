title:HMAC is a randomness extractor and applications to TLS
author:Pierre-Alain Fouque and
David Pointcheval and
S&apos;ebastien Zimmer
HMAC is a Randomness Extractor and Applications to
TLS
Pierre-Alain Fouque, David Pointcheval, Sébastien Zimmer
To cite this version:
Pierre-Alain Fouque, David Pointcheval, Sébastien Zimmer. HMAC is a Randomness Extractor and
Applications to TLS. Proceedings of the 3rd ACM Symposium on InformAtion, Computer and Com-
munications Security (ASIACCS ’08), 2008, Tokyo, Japon, Japan. pp.21–32. inria-00419158
HAL Id: inria-00419158
https://hal.inria.fr/inria-00419158
Submitted on 22 Sep 2009
HAL is a multi-disciplinary open access
archive for the deposit and dissemination of sci-
entific research documents, whether they are pub-
lished or not. The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.
L’archive ouverte pluridisciplinaire HAL, est
destinée au dépôt et à la diffusion de documents
scientifiques de niveau recherche, publiés ou non,
émanant des établissements d’enseignement et de
recherche français ou étrangers, des laboratoires
publics ou privés.
This extended abstract appeared in
Proceedings of the 2008 ACM Symposium on Information, computer and communications security (AsiaCCS ’08)
(March 18–20, 2008, Tokyo, Japan), pages 21–32, ACM Press, New York, NY, USA.
HMAC is a Randomness Extractor
and Applications to TLS
Pierre-Alain Fouque1, David Pointcheval2, and S´ebastien Zimmer3
1 ENS – CNRS – INRIA, Paris, France – PI:EMAIL
2 CNRS – ENS – INRIA, Paris, France – PI:EMAIL
3 ENS – CNRS – INRIA, Paris, France – PI:EMAIL
Abstract. In this paper, we study the security of a practical randomness extractor
and its application in the tls standard. Randomness extraction is the ﬁrst stage of key
derivation functions since the secret shared between the entities does not always come
from a uniformly distributed source. More precisely, we wonder if the Hmac function,
used in many standards, can be considered as a randomness extractor? We show that
when the shared secret is put in the key space of the Hmac function, there are two cases
to consider depending on whether the key is larger than the block-length of the hash
function or not. In both cases, we provide a formal proof that the output is pseudo-
random, but under diﬀerent assumptions. Nevertheless, all the assumptions are related
to the fact that the compression function of the underlying hash function behaves
like a pseudo-random function. This analysis allows us to prove the tls randomness
extractor for Diﬃe-Hellman and RSA key exchange. Of independent interest, we study
a computational analog to the leftover hash lemma for computational almost universal
hash function families: any pseudo-random function family matches the latter deﬁnition.
1 Introduction
Randomness extraction is the ﬁrst stage of key derivation mechanisms. After the key
exchange protocol, entities share a secret element of a distribution, called source in
the sequel, but the entropy of this source is not maximal in general. This means that
it is not a uniformly distributed bit string. For example, the Decisional Diﬃe-Hellman
assumption guarantees that a Diﬃe-Hellman element is a uniformly distributed el-
ement in the group but its binary representation is not a uniformly distributed bit
string in {0, 1}n (where n is the bit-size of the element). Consequently, the secret
element cannot be just plugged as a secret key in a symmetric scheme. To transform
this high entropy source into a bit string with maximal entropy, or at least indis-
tinguishable from a maximal entropy bit string, randomness extractors come to play.
This transformation condenses the entropy source by generating a bit string smaller
than the input source. Even if they are not designed toward this security goal, many
standards use hash functions or MACs (see for example [9, 10, 18, 19]) also for this task
since they are already implemented in cryptographic products and so do not require
to implement other functions. The reason why they have been considered for this is
that MAC functions are usually thought as being good pseudo-random functions and
that they condense their input. Here, we study the Hmac function as a randomness
extractor. The main application we target is the proof of the randomness extractor of
the new draft-version of tls standard, namely tls v.1.2 [11]. In this standard, Hmac
is an intermediate function used in the randomness extraction function, and it is not
diﬃcult to see that the security of this function as a randomness extractor reduces to
the security of Hmac as a randomness extractor. The key generation in the new tls
version 1.2 is not very diﬀerent from the key generation in the previous tls version
1.1 however we focus here in the emerging version. There is a small diﬀerence in the
derivation function used, but the main diﬀerence relies on the speciﬁc hash functions
c(cid:13) ACM 2008. Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed for proﬁt or
commercial advantage and that copies bear this notice and the full citation on the ﬁrst page. To copy
otherwise, to republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee.
2
in used and some of our results could be adapted but one has to be careful on the
output size of the hash functions.
1.1 Related works
There is some well-known extractor, the Leftover Hash Lemma [15], which can be
applied on any source with high entropy. Such an extractor is particularly interesting
since it can be built under standard assumption. The use of this lemma on the Diﬃe-
Hellman source has been proposed by Gennaro et al. in [14]. But, for this particular
source, there also exists simple and eﬃcient extractor provided the group size is suﬃ-
ciently large. For instance, in [8], Chevassut et al. show that for safe prime numbers, a
simple extractor on the group of squares can be done whose output is perfect. Later,
Fouque et al. in [13], extended this result to large subgroups by simply taking the high
or low order bits of the group elements. This result is achieved using characters and
exponential sums as proposed by Canetti et al. in [6, 7]. Such constructions are very
simple but not so eﬃcient as the Leftover Hash Lemma since the subgroup is always
very large. Consequently, the key exchange is not very eﬃcient in practice.
In [12], Dodis et al. were the ﬁrst to consider randomness extraction as an im-
portant stage of key derivation mechanisms. They study how classical cryptographic
primitives, such as MACs or hash functions, behave as randomness extractors. More
precisely, they reduce the security of randomness extraction to the assumption that
the compression function behaves like a good randomness extractor, namely like an
almost universal hash function family.
One widely used MAC function is the Hmac function, hash-based Message Au-
thentication Code, proposed by Bellare, Canetti and Krawczyk in [3]. In [2] Bellare
shows that Hmac is a pseudo-random function under the whole assumption that the
compression function is a pseudo-random function.
Finally, the tls key exchange has been studied by Jonsson and Kaliski in [17],
for the security of RSA Encryption in the random oracle model. They prove that the
key exchange in tls is an IND-CCA2 tagged key encapsulation mechanism, with the
assistance of a “partial-RSA decision oracle”, under the assumptions that both the
key extraction and derivation functions are random functions and that RSA is hard to
invert. Here we focus on a security proof of the key extraction function in the standard
model.
1.2 Our Results
In this paper, we study the situation where the common secret is used as the secret
key of Hmac. We show that in this case, for any input of Hmac, the output is
indistinguishable from a random bit string, namely it is a pseudorandom string. This
construction is used in tls and therefore is of practical interest. More precisely, we
give theoretical security results on this construction for Hmac and then reformulate
these results for the particular case of tls. We focus on the practical security of the
tls extraction function when sha-384 is used and prove that in this case we can obtain
a 124-bit security with RSA and Diﬃe-Hellman key exchange.
The construction we study is diﬀerent from the one studied in [12]. In [12], there
is a proof for Hmac as a randomness extractor but when the source is injected in the
message space, with a random but known key. Whereas our construction is used in
the tls key extraction, the latter construction is used in the IPSec standard. In the
IPSec construction, the shared key length can be larger than the block length. For
3
example, in Hmac-sha-1 the block-size is 512 bits and a shared Diﬃe-Hellman element
is at least 1024-bit long, therefore it is splitted over at least two blocks. Consequently,
the hash function must be iterated and the results of [12] require high conditional
min-entropy of at least one block. That means that, in our example, the entropy of
the most signiﬁcant bits of the Diﬃe-Hellman element is high, even when the least
signiﬁcant bits are given. This result can be achieved following result of [13] but it
requires a large subgroup. With our technique, we avoid this drawback and, as in
the Leftover Hash Lemma, we require only that some entropy is present in the group
element. We are always able to extract the entropy diluted in the whole bit string.
Therefore, we can use groups with rather small prime order subgroups, which allows
much more eﬃcient key exchange protocols.
In this work, we use some computational assumptions, notably the classical as-
sumption in cryptography that the compression function is a pseudo-random function.
This assumption has also been done by Bellare et al. in [3, 2].
In [2], Bellare introduced the notion of computationally almost universal hash func-
tion. We extend this notion and prove a computational analog of the famous Leftover
Hash Lemma, which allows to extract entropy easily. Since any pseudo-random func-
tion (prf) is also computationally almost universal, therefore a strong key (i.e. compu-
tationally indistinguishable from a true random bit string) is derived from any good
entropy source using a good prf. The only restriction is on the size of the output on the
prf: the latter should be smaller than the prf key size, otherwise the advantage of the
prf is not small enough to be used with the Leftover Hash Lemma. This means that
this result has a practical impact for truncated iterated hash functions, as sha-384 or
Hmac-sha-384. This justiﬁes, with reasonable computational assumptions, the use of
these hash functions in practice to derive keys.
Finally, the Hmac standard imposes that if the key is larger than the block-length,
Hmac begins by hashing the secret to reduce it, and then the result is put as the key of
Hmac. Therefore, to be complete, there are actually two cases to consider depending
on whether the key is larger than the block-length of the hash function or not. If the
common secret is larger than the block-length, we show that hashing the secret key
allows us to extract entropy whose distribution is indistinguishable from a random
bit-string. Then, we use the recent results of Bellare [2] at Crypto 2006, to show that
the output of Hmac is pseudo-random. As far as we know, we are the ﬁrst to study
this particular case.
If the shared secret is smaller than the block size, two bit strings are generated and
then used to key an intermediate pseudorandom function Nmac. As pointed out by
Bellare [2], assuming that these keys are chosen independently is not true for Hmac
since they are derived from a single bit string. Instead, we show that these strings are
computationally indistinguishable from two random bit strings.
Note that the both cases may append in practice: the Diﬃe-Hellman key exchange
over Z⋆
p (with p a prime) generates a key of at least 1024 bits, which is greater than the
512-bit Hmac-sha-1 key size, whereas the elliptic curve Diﬃe-Hellman key exchange
generates a key of generally exactly 512 bits.
1.3 Organization of the Paper
In section 2, we give useful notations and security deﬁnitions. Then, we give the main
security results for Hmac, tearing apart the case when the key is smaller than the
block-length and the case when it is longer. Finally, we apply the method presented in
4
section 3 to give theoretical and practical security results for the tls key extraction
function.
2 Notations and Deﬁnitions
Notations. If X is a random variable taking values in X and drawn according to
D
← X denotes the choice of X in X according to D and
the distribution D then X
$
X
← X denotes the choice of X when X is uniformly distributed in X . The uniform
distribution on {0, 1}κ is denoted by Uκ.
When an adversary A can interact with an oracle O and at the end of the inter-
action outputs b, it is denoted by AO ⇒ b. If B and C are two events, the probability
that the event B occurs, knowing the event C is denoted by Pr[B : C]. When an adver-
sary is involved in an event, the probability is considered upon the adversary random
coins.
Min-Entropy, Universal Hash Family and Randomness Extractor.
Let X be a random variable with values in a set X . The guessing probability of
X, denoted by γ(X), is the probability maxx∈X (Pr[X = x]). The min entropy of X
denoted H∞(X) is equal to − log2(γ(X)).
Let D1 and D2 be two distributions on the same set X . The statistical distance
between D1 and D2 is:
1
2Xx∈X(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
.
[X = x](cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
SD(D1, D2) =
Pr
D1←X
[X = x] − Pr
D2←X
X
X
Let Ext be a function family from {0, 1}d × {0, 1}n into {0, 1}ℓ. Let i be a uniform
random variable in {0, 1}d and Uℓ denote a random variable uniformly distributed
in {0, 1}ℓ. The function family Ext is an (ε, m)-strong extractor if for all random
variables X over {0, 1}n of min entropy at least m, with Uℓ, i and X independent:
SD (hi, Exti(X)i, hi, Uℓi) < ε.
Presumably, the most famous way of extracting entropy is provided by the Leftover
Hash Lemma presented in [15, 16]. A variant of this lemma introduced by Dodis et
al. [12] is presented below.
Let H : {0, 1}d × {0, 1}n → {0, 1}ℓ be a family of eﬃciently computable hash
functions. The family H is called an ε-almost universal hash (ε-auh) function family
if for every x 6= y in {0, 1}n, Pri∈{0,1}d[Hi(x) = Hi(y)] ≤ 1/2ℓ + ε.
Theorem 1 (Leftover Hash Lemma). Let H be an ε-auh function family from
{0, 1}d × {0, 1}n to {0, 1}ℓ. Let i denote a random variable uniformly distributed in
{0, 1}d, Uℓ a random variable uniformly distributed in {0, 1}ℓ, and A a random variable
taking values in {0, 1}n, with i, A, Uℓ mutually independent. Then:
SD(hi, Hi(A)i, hi, Uℓi) ≤q2ℓ(2−H∞(A) + ε)/2.
Computational Randomness Extractor. A computational randomness extrac-
tor (cre) is an extension of randomness extractor where the output is computationally
indistinguishable from the uniform variable. This notion has also been implicitly used
in [15, 12]. It is a function family cExt from {0, 1}d × {0, 1}n × Dom to {0, 1}ℓ that