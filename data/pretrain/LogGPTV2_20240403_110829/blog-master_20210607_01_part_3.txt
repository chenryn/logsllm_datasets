   Recheck Cond: ((c2 ~~ '%西出函谷关%'::text) OR (c3 ~~ '%西出函谷关%'::text))  
   Heap Blocks: exact=18  
   ->  BitmapOr  (cost=51.60..51.60 rows=400 width=0) (actual time=0.892..0.892 rows=0 loops=1)  
         ->  Bitmap Index Scan on idx_tbl_1  (cost=0.00..25.70 rows=200 width=0) (actual time=0.382..0.382 rows=100 loops=1)  
               Index Cond: (c2 ~~ '%西出函谷关%'::text)  
         ->  Bitmap Index Scan on idx_tbl_1  (cost=0.00..25.70 rows=200 width=0) (actual time=0.509..0.509 rows=100 loops=1)  
               Index Cond: (c3 ~~ '%西出函谷关%'::text)  
 Planning Time: 0.184 ms  
 Execution Time: 1.173 ms  
(10 rows)  
postgres=> explain analyze select * from tbl where c2 like '%西出函谷关%' and c3 like '%西出函谷关%';  
                                                    QUERY PLAN                                                       
-------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on tbl  (cost=47.30..48.42 rows=1 width=554) (actual time=0.059..0.059 rows=0 loops=1)  
   Recheck Cond: ((c2 ~~ '%西出函谷关%'::text) AND (c3 ~~ '%西出函谷关%'::text))  
   ->  Bitmap Index Scan on idx_tbl_1  (cost=0.00..47.30 rows=1 width=0) (actual time=0.057..0.057 rows=0 loops=1)  
         Index Cond: ((c2 ~~ '%西出函谷关%'::text) AND (c3 ~~ '%西出函谷关%'::text))  
 Planning Time: 0.180 ms  
 Execution Time: 0.078 ms  
(6 rows)  
postgres=> explain analyze select * from tbl where c3 like '%西出函谷关%';  
                                                      QUERY PLAN                                                         
-----------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on tbl  (cost=25.75..247.53 rows=200 width=554) (actual time=0.046..0.169 rows=100 loops=1)  
   Recheck Cond: (c3 ~~ '%西出函谷关%'::text)  
   Heap Blocks: exact=10  
   ->  Bitmap Index Scan on idx_tbl_1  (cost=0.00..25.70 rows=200 width=0) (actual time=0.038..0.038 rows=100 loops=1)  
         Index Cond: (c3 ~~ '%西出函谷关%'::text)  
 Planning Time: 0.181 ms  
 Execution Time: 0.192 ms  
(7 rows)  
```  
7、普通字段+其他字段like  
```  
select * from tbl where gid=1 and c3 like '%西出函谷关%';  
```  
```  
postgres=> explain analyze select * from tbl where gid=32 and c1 like '%西出函谷关%';  
                                                    QUERY PLAN                                                       
-------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on tbl  (cost=31.90..33.02 rows=1 width=554) (actual time=0.032..0.033 rows=1 loops=1)  
   Recheck Cond: ((gid = 32) AND (c1 ~~ '%西出函谷关%'::text))  
   Heap Blocks: exact=1  
   ->  Bitmap Index Scan on idx_tbl_1  (cost=0.00..31.90 rows=1 width=0) (actual time=0.027..0.028 rows=1 loops=1)  
         Index Cond: ((gid = 32) AND (c1 ~~ '%西出函谷关%'::text))  
 Planning Time: 0.082 ms  
 Execution Time: 0.051 ms  
(7 rows)  
postgres=> explain analyze select * from tbl where gid=32 and c3 like '%西出函谷关%';  
                                                    QUERY PLAN                                                       
-------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on tbl  (cost=31.90..33.02 rows=1 width=554) (actual time=0.037..0.037 rows=0 loops=1)  
   Recheck Cond: ((gid = 32) AND (c3 ~~ '%西出函谷关%'::text))  
   ->  Bitmap Index Scan on idx_tbl_1  (cost=0.00..31.90 rows=1 width=0) (actual time=0.035..0.035 rows=0 loops=1)  
         Index Cond: ((gid = 32) AND (c3 ~~ '%西出函谷关%'::text))  
 Planning Time: 0.160 ms  
 Execution Time: 0.055 ms  
(6 rows)  
```  
相比全表扫描, 性能提升10000倍以上.    
## 原理  
1、token 倒排.  
2、双、单字like怎么搞？  
##### 202009/20200912_01.md   [《PostgreSQL 模糊查询、相似查询 (like '%xxx%') pg_bigm 比 pg_trgm 优势在哪?》](../202009/20200912_01.md)    
##### 202003/20200330_01.md   [《PostgreSQL 模糊查询增强插件pgroonga , pgbigm (含单字、双字、多字、多字节字符) - 支持JSON模糊查询等》](../202003/20200330_01.md)    
##### 201704/20170426_01.md   [《PostgreSQL 模糊查询最佳实践 - (含单字、双字、多字模糊查询方法)》](../201704/20170426_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")