几十年来，对攻击进行检测一直是信息安全的一部分。 第一个已知的入侵检测系统（IDS）的实现可以追溯到20世纪80年代初。
如今，攻击检测已经成为一种行业。`IDS、IPS、WAF和防火墙解决方案`等许多技术存在于网络，而其中大多数技术均提供基于规则的攻击检测。
使用某种统计异常来识别网络中的攻击似乎已经得到了印证。但这个假设是否合理？
### 检测Web应用程序中的异常
20世纪90年代初，市场上出现了第一批用于检测Web应用程序攻击的防火墙。从那时起，攻击技术和保护机制都发生了巨大变化，攻击者争先恐后地进行创新以便领先一步。
当前的Web应用程序防火墙（WAF）都使用类似的方式检测攻击，例如将基于规则的引擎嵌入某种类型的反向代理中。最突出的例子是`mod_security`，它是2002年创建的`Apache
Web`服务器的WAF模块。基于规则的检测有一些缺点：例如，它无法检测到新的漏洞攻击（0
day），即使这些攻击很容易被研究者检测到。这个事实并不令人惊讶，因为人类的大脑与一组正则表达式的工作方式完全不同。
从WAF的角度来看，攻击可以分为基于顺序的（时间序列）和由单个HTTP请求或响应组成的攻击。我们的研究重点是检测后一类攻击，包括：
  * SQL 注入
  * Cross-Site Scripting（跨站脚本）
  * XML External Entity Injection 
  * Path Traversal
  * OS Commanding （系统命令执行）
  * Object Injection 
但首先让我们问自己：我们将如何做到这一点？
### 在看到一个单一请求时，人类会做什么？
看一下对某个应用程序的常规HTTP请求：
如果用户必须检测发送到应用程序的请求，那么我们一定希望这个请求是正常的。在查看了许多应用程序执行端点的请求之后，用户将大致了解安全请求的结构及其包含的内容。
现在我们将看到以下请求：
我们马上就知道出了什么问题。，并且需要更多的时间来了解这个漏洞究竟是什么，一旦找到异常请求的确切部分，我们就可以开始考虑它是什么类型的攻击。
从本质上讲，我们的目标是让我们的攻击检测AI以类似于人类推理的方式解决问题。
使我们的任务变得复杂的是，即使某些流量看起来是恶意的，但对于某个特定网站来说可能实际上是正常的。
例如，让我们看看以下请求：
这是异常请求吗？ 实际上，这个请求是无害的：这是与`Jira bug`跟踪器上的bug发布相关的典型请求。
现在让我们来看看另一个例子：
起初，该请求看起来像是由`Joomla CMS`的用户注册。
但是，请求的操作是“`user.register`”而不是正常的“`registration.register`”。
前一个选项已弃用。所以其中包含一个漏洞，允许任何人以管理员身份注册。
此漏洞被称为“`Joomla 