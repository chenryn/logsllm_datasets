          2 | (215874,86)  |      16 | f     | f    | 02 00 00 00 00 00 00 00  
          3 | (26831,109)  |      16 | f     | f    | 03 00 00 00 00 00 00 00  
          4 | (74722,117)  |      16 | f     | f    | 04 00 00 00 00 00 00 00  
          5 | (186526,71)  |      16 | f     | f    | 08 00 00 00 00 00 00 00  
          6 | (105855,132) |      16 | f     | f    | 0e 00 00 00 00 00 00 00  
...  
        272 | (166516,27)  |      16 | f     | f    | b3 02 00 00 00 00 00 00  
(272 rows)  
```  
叶子节点 block 1的相邻节点是block 100620，显然是不相邻的。      
因此根据索引的范围查询，仅索引BLOCK的访问就是非常离散的，再加上HEAP PAGE的访问，都是非常离散的。 好在索引页每一页都能放几百条，所以几百条的查询，实际上被访问的INDEX PAGE并不会太多。      
![screenshot](20160717_01_pic_002.png)  
## 小结  
1\. 对于查询结果可以直接在索引输出的，带上OFFSET输出的话，可以用上 index only scan，但是从现在社区版本的情况来看，还有优化余地，至少能把需要访问的block下降。    
PostgreSQL的b-tree是类似"双向链表"的结构，内核层面根据index leaf page的btpo_next，实施index range scan，不需要额外的INDEX PAGE访问。       
2\. 索引的leaf page(s)，branch page(s)都是离散的，只是逻辑结构上是树状的，同级page之间是通过类似双向链表的形式组织的。    
因此index range scan时，index page扫描也是离散的。   比如做一个index only scan，offset一批数据或者直接scan一堆数据，都是离散的扫描。    
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select id from tbl offset 1000000 limit 10;  
                                                                     QUERY PLAN                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=25968.49..25968.75 rows=10 width=4) (actual time=528.914..528.921 rows=10 loops=1)  
   Output: id  
   Buffers: shared hit=750554  
   ->  Index Only Scan using tbl_pkey on public.tbl  (cost=0.56..1021687.32 rows=39344184 width=4) (actual time=0.030..347.409 rows=1000010 loops=1)  
         Output: id  
         Heap Fetches: 0  
         Buffers: shared hit=750554  -- offset与直接scan输出扫描的pages一致。    
 Planning time: 0.083 ms  
 Execution time: 528.948 ms  
(9 rows)  
postgres=# explain (analyze,verbose,timing,costs,buffers) select id from tbl limit 1000010;  
                                                                     QUERY PLAN                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=0.56..25968.75 rows=1000010 width=4) (actual time=0.032..736.929 rows=1000010 loops=1)  
   Output: id  
   Buffers: shared hit=750554  
   ->  Index Only Scan using tbl_pkey on public.tbl  (cost=0.56..1021687.32 rows=39344184 width=4) (actual time=0.031..362.791 rows=1000010 loops=1)  
         Output: id  
         Heap Fetches: 0  
         Buffers: shared hit=750554  -- offset与直接scan输出扫描的pages一致。    
 Planning time: 0.097 ms  
 Execution time: 916.256 ms  
(9 rows)  
```  
## 术语  
1\. tuple，row    
2\. ctid，行号（blocknum, 页内offset）    
祝大家玩得开心，欢迎随时来阿里云促膝长谈业务需求 ，恭候光临。    
阿里云的小伙伴们加油，努力做 最贴地气的云数据库 。      
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")