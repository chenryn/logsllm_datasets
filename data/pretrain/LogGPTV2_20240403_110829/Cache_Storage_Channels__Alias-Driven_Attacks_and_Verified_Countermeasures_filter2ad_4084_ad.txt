proof of the correctness of the approach is straight-forward.
Since the attacker cannot access the caches, they are effectively
invisible to him. The threat model can then be speciﬁed using
a coherent memory semantics that is a sound abstraction of a
system model where caches are only used by trusted code.
B. Enforcing Memory Coherency
Given the dramatic slowdown expected for a virtualization
platform, it seems out of the question to completely deny the
use of caches to untrusted guests. Nevertheless, the idea of
enforcing that guest processes cannot break memory coherency
through uncacheable aliases still seems appealing.
1) Always Cacheable Guest Memory
When making all guest memory uncacheable is prohibitively
expensive, an intuitive alternative could be to just make all
guest memory cacheable. Indeed, if guests are user processes
in an operating system this can be easily implemented by
adapting the page table setup for user processes accordingly,
i.e., enforcing cacheability for all user pages. Then user
processes cannot create uncacheable aliases to measure cache
contents and start cache-based time-of-check-to-time-of-use
attacks on their host operating system.
However, for hypervisors, where guests are whole operating
systems, the approach has several drawbacks. First of all,
operating systems are usually controlling memory mapped
I/O devices which should be operated through uncacheable
memory accesses. If a hypervisor would make all memory
accesses of a guest OS cacheable, the OS will not be able to
properly control I/O devices and probably not work correctly.
Thus, making all untrusted guest memory cacheable only
works for (rather useless) operating systems that do not control
I/O devices. Furthermore, there are cases when a guest can
optimise its performance by making seldomly used pages
uncacheable [39].
2) C ⊕ U Policy
Instead of making all guest pages cacheable, a hypervisor
could make sure that at all
times a given physical page
can either be accessed in cacheable or uncacheable mode
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:33 UTC from IEEE Xplore.  Restrictions apply. 
HYPERVISOR MICRO AND APPLICATION BENCHMARKS
TABLE I
LMbench micro benchmark
null syscall
read
write
stat
fstat
open/close
select(10)
sig handler install
sig handler overhead
protection fault
pipe
fork+exit
fork+execve
pagefaults
Application benchmark
tar (500K)
tar (1M)
tar (2M)
dd (10M)
dd (20M)
dd (40M)
jpg2gif(5KB)
jpg2gif(250KB)
jpg2gif(750KB)
jpg2bmp(5KB)
jpg2bmp(250KB)
jpg2bmp(750KB)
jpegtrans(270’, 5KB)
jpegtrans(270’, 250KB)
jpegtrans(270’, 750KB)
bmp2tiff(90 KB)
bmp2tiff(800 KB)
ppm2tiff(100 KB)
ppm2tiff(250 KB)
ppm2tiff(1.3 MB)
tif2rgb(200 KB)
tif2rgb(800 KB)
tif2rgb(1.200 MB)
sox(aif2wav 100KB)
sox(aif2wav 500KB)
sox(aif2wav 800KB)
Native
0.41
0.84
0.74
3.22
1.19
6.73
1.86
0.85
4.43
2.66
21.83
1978
2068
3.76
Native
70
120
230
90
190
330
60
920
930
40
1350
1440
10
220
380
10
20
10
10
20
10
40
130
20
40
60
Hyp
1.75
2.19
2.09
5.61
2.53
14.50
3.29
2.87
14.45
3.73
48.78
5106
5249
11.21
Hyp
70
120
210
140
260
500
60
810
870
40
1340
1420
10
240
400
10
20
10
10
30
20
40
160
20
60
100
ACPT
1.76
2.20
2.10
5.50
2.55
14.42
3.30
2.89
14.48
3.83
47.79
5126
5248
11.12
ACPT
70
120
200
140
260
450
60
820
870
40
1340
1420
10
240
400
10
20
10
10
30
20
40
160
20
60
100
SelFl
1.77
2.20
2.15
5.89
2.56
14.86
3.33
2.92
15.11
3.91
47.62
6148
6285
21.55
SelFl
70
120
210
160
570
600
60
830
880
40
1350
1430
10
250
420
10
20
10
20
30
20
50
180
30
60
110
Flush
1.76
2.38
2.22
5.92
2.65
14.71
3.42
2.95
14.91
3.70
692.91
38787
39029
332.82
Flush
190
250
370
990
1960
3830
130
1230
1270
110
1720
1790
80
880
1050
60
80
70
80
90
120
270
730
140
180
220
LMbench micro benchmarks [μs] and application benchmarks [ms] for the Linux
kernel v2.6.34 running natively on BeagleBone Black, paravirtualized on the hyper-
visor without protection against the integrity threat (Hyp), with always cacheable
page tables (ACPT), with selective ﬂushing (SelFl), and with full cache ﬂushes on
entry (Flush).
(C ⊕ U policy). To this end it would need to monitor the
page table setup of the guests and forbid them to deﬁne
both cacheable and uncacheable aliases of the same physical
address. Then guests may set up uncacheable virtual pages
only if no cacheable alias exists for the targeted physical page.
Moreover, the hypervisor has to ﬂush a cacheable page from
the caches when it becomes uncacheable, in order to remove
stale copies of the page that might be abused to set up an alias-
driven cache attack. In this way, the hypervisor would enforce
memory coherency for the guest memory by making sure that
no content from uncacheable guest pages is ever cached and
for cacheable pages cache entries may only differ from main
memory if they are dirty.
A Trust-zone cryptoservice that intends to prevent a mali-
cious OS to use memory incoherency to measure the Trust-
zone accesses to the cache can use TZ-RKP [5] and extend its
run-time checks to force the OS to respect the C ⊕ U policy.
4747
3) Second-Stage MMU
Still, for both the static and the dynamic case, the C ⊕ U
policy may be expensive to implement for fully virtualizing
hypervisors that rely on a second stage of address translation.
For example, the ARMv8 architecture provides a second stage
MMU that is controlled by the hypervisor, while the ﬁrst
stage MMU is controlled by the guests. Intermediate physical
addresses provided by the guests are then remapped through
the second stage to the actual physical address space. The
mechanism allows also to control the cacheability of the in-
termediate addresses, but it can only enforce non-cacheability.