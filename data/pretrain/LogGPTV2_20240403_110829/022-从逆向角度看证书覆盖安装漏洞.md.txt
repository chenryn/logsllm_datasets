2020/7/27 从逆向⾓度看证书覆盖安装漏洞
从逆向⻆度看证书覆盖安装漏洞
原创 队员编号001 酒仙桥六号部队 6⽉19⽇
这是 酒仙桥六号部队 的第 22 篇⽂章。
全⽂共计1646个字，预计阅读时⻓6分钟。
前前前前前前前前前前前前前前前⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔
⾸先我们来了解下证书覆盖安装漏洞，此漏洞是2020年Google官⽅公布的漏洞之⼀，
其编号为CVE-2020-0015，这个漏洞主要形成原因是由于本地安装证书被覆盖所造成
的特权提升漏洞，在⽂中我会从逆向的⻆度去分析证书的安装流程，分析漏洞存在的位
置以及形成的原因。在分析过程中会把代码进⾏截图，尽可能覆盖其中的所有关键代
码，避免本⽂阅读者在阅读过程中再去反编译查看代码。
漏漏漏漏漏漏漏漏漏漏漏漏漏漏漏洞洞洞洞洞洞洞洞洞洞洞洞洞洞洞介介介介介介介介介介介介介介介绍绍绍绍绍绍绍绍绍绍绍绍绍绍绍
证书覆盖安装漏洞主要体现在系统导⼊证书的时候，⽽导⼊证书这部分功能是由系统中
的CertInstaller.apk进⾏完成。⽽在⽤中并未做安全性校验，导致导⼊证书界⾯可以
被覆盖，由于证书安装是由系统应⽤完成的，所以当安装界⾯被覆盖后，就变向的达到
了特权提升的⽬的。根据官⽅说明该漏洞是存在全系统版本中的，⽽官⽅只修复了
Android-8.0、Android-8.1、Android-9、 Android-10系统版本，下⾯通过代码
分析此漏洞形成的原因。
分分分分分分分分分分分分分分分析析析析析析析析析析析析析析析流流流流流流流流流流流流流流流程程程程程程程程程程程程程程程
https://mp.weixin.qq.com/s/MdCMb2JSf3aAdzJ_ICQHVw 1/12
2020/7/27 从逆向⾓度看证书覆盖安装漏洞
⾸ 先 我 们 通 过 ADB 命 令 从 ⼿ 机 中 将 CertInstaller.apk ⽂ 件 提 取 到 本 地 ，
CertInstaller.apk在系统中的/system/app/CertInstaller/⽬录下。拿到APK⽂件
后 我 们 再 使 ⽤ jadx 、 jeb 等 ⼯ 具 反 编 译 APK ⽂ 件 。 那 么 我 们 就 通 过 ADB 命 令
将/system/app/CertInstaller/CertInstaller.apk拷⻉到本地，使⽤jadx、jeb等
反编译⼯具将apk反编译。
⾸先我们先看下反编译后的AndroidManifest.xml⽂件。
从AndroidManifest.xml⽂件可以看出来主要⼊⼝在CertInstallerMain中，因为是
activity，所以我们从onCreate函数开始分析：
代码位置：
com/android/certinstaller/CertInstallerMain.java
https://mp.weixin.qq.com/s/MdCMb2JSf3aAdzJ_ICQHVw 2/12
2020/7/27 从逆向⾓度看证书覆盖安装漏洞
从上⾯代码中可以看到，⾸先获取intent对象并对其中携带的数据进⾏判断，主要有三
种情况：
1. intent未携带任何数据，或者从sdcard上选择证书⽂件进⾏安装，也就是在系统设
置中选择从存储设备安装证书，如下图：
https://mp.weixin.qq.com/s/MdCMb2JSf3aAdzJ_ICQHVw 3/12
2020/7/27 从逆向⾓度看证书覆盖安装漏洞
https://mp.weixin.qq.com/s/MdCMb2JSf3aAdzJ_ICQHVw 4/12
2020/7/27 从逆向⾓度看证书覆盖安装漏洞
2. Intent携带了证书内容，就直接创建Intent 启动CertInstaller进⾏证书安装，例
如：
3. 通过action 列举出已安装的证书列表。
从上⾯三部分来看，⽆论分析第⼀种情况还是第⼆种，都可以到达证书安装的位置，那
我们主要分析的是第⼆种情况， 创建⼀个intent⽤于启动CertInstaller activity，并
将携带有证书内容的Intent以参数的形式传递过去。
下⾯继续看代码位置：
com/android/certinstaller/CertInstaller.java
https://mp.weixin.qq.com/s/MdCMb2JSf3aAdzJ_ICQHVw 5/12
2020/7/27 从逆向⾓度看证书覆盖安装漏洞
从代码可以看出来证书安装过程基本都是依赖于CredentialHelper 类完成的，⾸先掉
⽤createCredentialHelper函数创建了⼀个CredentialHelper 实例。
https://mp.weixin.qq.com/s/MdCMb2JSf3aAdzJ_ICQHVw 6/12
2020/7/27 从逆向⾓度看证书覆盖安装漏洞
从上⾯代码可以看出来，在创建CredentialHelper 实例的同时，还做了证书解析操
作，这⾥主要看parseCert(byte[] bytes)函数,其中根据证书的不同会将证书缓存到
mCaCerts或mUserCert列表中。然后继续分析CertInstaller的OnCreate函数，继
续 往 下 看 对 当 前 的 环 境 进 ⾏ 校 验 ， 其 中
keyguardManager.createConfirmDeviceCredentialIntent(null, null); 是检查
是否设置信任凭证。然后会调⽤到extractPkcs12OrInstall函数。
https://mp.weixin.qq.com/s/MdCMb2JSf3aAdzJ_ICQHVw 7/12
2020/7/27 从逆向⾓度看证书覆盖安装漏洞
PKCS12⽂件⼀般由密码保护，所以需要弹出⼀个密码输⼊框，⽤于输⼊密码。⽽正常
抓包设置代理证书或者安装CA证书的时候就会⾛到 else⾥⾯。继续分析代码。
在 这 ⾥ 可 以 看 到 InstallOthersAction 中 的 run ⽅ 法 实 际 就 是 调 ⽤ 的
CertInstaller.installOther函数；
这可以看到是安装证书之前先做了⼀个校验，检查是否有CA证书，或者私有与⽤户证
书，然后会调⽤nameCredential()函数，会调⽤showDialog()弹窗安装证书。这也
就是漏洞产⽣的位置。⽽漏洞形成的原因就是在弹窗的位置因为没有对系统的dialog弹
窗进⾏安全防护，导致dialog可以被劫持覆盖，这也是该漏洞的主要成因。
漏漏漏漏漏漏漏漏漏漏漏漏漏漏漏洞洞洞洞洞洞洞洞洞洞洞洞洞洞洞利利利利利利利利利利利利利利利⽤⽤⽤⽤⽤⽤⽤⽤⽤⽤⽤⽤⽤⽤⽤
https://mp.weixin.qq.com/s/MdCMb2JSf3aAdzJ_ICQHVw 8/12
2020/7/27 从逆向⾓度看证书覆盖安装漏洞
由于设备环境原因，只在低版本测试，未在修复后的⾼版本⼿机进⾏测试。
下⾯看下代码：
这⾥为了⽅便直接创建了⼀个线程进⾏监听，也可以在service中实现。
为 线 程 创 建 runnabl 任 务 ， 判 断 当 前 运 ⾏ 的 应 ⽤ 包 名 ， 如 果 为
com.android.certinstaller ， 则 启 动 ⼀ 个 伪 装 好 的 activity 界 ⾯ 进 ⾏ 覆 盖 ， 这 个
activity界⾯设置为dialog显示。
代码中getTopPackage()是检测当前运⾏的应⽤程序是哪⼀个，然后在线程中判断如
果是certInstaller应⽤的进程，就进⾏弹窗覆盖掉系统的dialog，伪造个假的证书安
装界⾯，导致本地特权提升。
https://mp.weixin.qq.com/s/MdCMb2JSf3aAdzJ_ICQHVw 9/12
2020/7/27 从逆向⾓度看证书覆盖安装漏洞
漏漏漏漏漏漏漏漏漏漏漏漏漏漏漏洞洞洞洞洞洞洞洞洞洞洞洞洞洞洞修修修修修修修修修修修修修修修复复复复复复复复复复复复复复复
https://mp.weixin.qq.com/s/MdCMb2JSf3aAdzJ_ICQHVw 10/12
2020/7/27 从逆向⾓度看证书覆盖安装漏洞
下⾯是Google官⽅的修复⽅式。
从上图可以看到在CertInstaller.java代码的onCreate⽅法中添加了⼀个系统属性”
SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS”，添加此属性的⽬
的就是屏蔽掉其他APP的悬浮窗，避免系统界⾯恶意程序进⾏覆盖，这样就修复了该漏
洞存在的⻛险，⽬前官⽅只在Android8-Android10系统修复了此漏洞。
总总总总总总总总总总总总总总总结结结结结结结结结结结结结结结
这个漏洞本质上就是劫持的漏洞，只是与常规的劫持有区别，常规的劫持是针对⾮系统
应⽤，⽽证书覆盖安装漏洞是针对系统应⽤的漏洞。在修复后的系统上，如果恶意程序
伪装成系统应⽤，依然可以对证书安装进⾏覆盖，漏洞仍然存在。
https://mp.weixin.qq.com/s/MdCMb2JSf3aAdzJ_ICQHVw 11/12
2020/7/27 从逆向⾓度看证书覆盖安装漏洞
https://mp.weixin.qq.com/s/MdCMb2JSf3aAdzJ_ICQHVw 12/12