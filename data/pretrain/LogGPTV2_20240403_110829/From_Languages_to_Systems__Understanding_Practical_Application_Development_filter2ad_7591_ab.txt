ate a principal illegally.
One solution would be to map operating system princi-
pals one-to-one onto Jif principals and leverage the existing
technologies of distributed systems.
It is desirable, how-
ever, that there be a one-to-many or many-to-one mapping
between our application’s principals and operating system
principals, in order that our application can be sufﬁciently
general. For example, in an MLS setting, it might be de-
sirable for many different users to be able to send “secret”
mail—this is a many-to-one mapping. Conversely, a single
user should be able to take on the role of “classiﬁed” and of
“top secret”–this is a one-to-many mapping. Furthermore,
deﬁning a distinct principal-space for a Jif application frees
the application from being tied to a particular operating sys-
tem instance. This brings us to the following technical chal-
lenge:
Problem 1
Jif principals must be developed which are
persistent across multiple executions of an application and
consistent across multiple applications and operating sys-
tems. Jif principals must also be unique so that they cannot
be impersonated.
Observation 1 A public-key infrastructure (PKI) pro-
vides this uniqueness, persistence and consistency.
Solution 1 By mapping Jif principals to public/private key
pairs and leveraging existing PKI technologies for creation
of certiﬁcate authority and public key certiﬁcates, we de-
scribe a principal-space with the desired properties. Fur-
thermore, we prevent illegal impersonation of a principal
by requiring that a user have access to the principal’s pri-
vate key before taking on that role. We describe this in more
detail in Section 5.1
3.2 A policy store
Returning to the above code, let us see how Jif prevents
illegal information leaks. Consider this code fragment in
which msgToBob is sent out on a Socket:
JifSocketFactory socketFactory =
new JifSocketFactory();
Socket[{}] outchannel =
socketFactory.createSocket(mailhost,mailport);
outchannel.write(msgToBob); // causes error
In general, a Socket could be trusted to keep a certain level
of data conﬁdential (using IPsec in a trusted operating sys-
tem, e.g.) and so the Socket class is parameterized by a
label (class parameterization is indicated with []’s).
In
this case, the label must be {}, because part of our secu-
rity policy (as stated in Section 2.1) is that we don’t trust
the internet to keep our data conﬁdential. We implement
this by requiring that our socketFactory only return pub-
lic sockets. Then Jif can catch security violations such as
the one above. A socket’s write method requires that input
parameters are no more secret than the label on the socket.
Thus, trying to send msgToBob, whose label {bob:} 6≤ {}2,
causes an error.
This brings us to the most serious, practical problem with
the code above: this email could never be sent to Bob! Be-
cause it is labeled as {bob:}, Jif prevents it from being
placed on a public channel and sent to the SMTP server.
The only way around this would be if there were a channel
directly to Bob that no one else could see, but this would
preclude using existing mail servers and existing networks.
Another obvious solution would be to use encryption. How-
ever, under the strict noninterference policy, even encryp-
tion would be disallowed, because putting a ciphertext on
a public channel is a possibilistic leak, releasing a small
amount of information about the plaintext.
We might decide that the information leaked through en-
cryption is an acceptable leak, however. Then a Jif solu-
tion is to relax the policy slightly through declassiﬁcation.
For this purpose, Jif provides a primitive, the declassify-
statement:
outchannel.write(
declassify(AES.encrypt(key,msgToBob), {}));
This introduces a new problem. Although we have success-
fully published the email, we have now lost the meaning of
the policy {bob:}. Allowing any relaxations of the policy
leaves the programmer wondering what the new policy ac-
tually is. The label {bob:} no longer means that only Bob
and Charlotte can read the data.
It now means that only
Bob and Charlotte can read the data, modulo some infor-
mation about the data that might be released by some de-
classiﬁcation statements somewhere in the program. This
is problematic, because the declassiﬁcation statements have
nothing to limit them and could actually release all the in-
formation to any security level, including public. At the
same time, it is not a total loss, because we know, at least,
that the information could only be leaked through declas-
siﬁcation statements. A security analysis of Jif only needs
to focus on the declassiﬁcation statements to gauge whether
the information leakage is dangerous or unacceptable. Such
an analysis was done in the jifpoker case study [1].
The security analysis would be easier and safer, however,
if it could be localized to a small, single policy ﬁle, separate
from the application itself. Rather than treating every de-
classiﬁcation as a potential wildcard, it is possible to place
some limits on the allowed kinds of declassiﬁcation for a
particular principal and specify these in a small policy ﬁle.
For example, the policy ﬁle might specify that Bob’s data
can only be declassiﬁed if it is also encrypted. This restores
2The 6≤ operator indicates that bob does not delegate to public.
4
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:33:30 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006local meaning to a label such as {bob:}. Consider an ex-
ample policy ﬁle, focusing only on Bob’s policy statements:
bob -> charlotte % Bob trusts his wife with all data
bob allows smtp.DeclassMsgBody(family)
bob allows crypto.AES(public)
bob allows crypto.MD5(public)
% Bob’s children
family -> john
family -> sarah
With this policy ﬁle, when the programmer sees that the
email is labeled {bob:}, she knows that this email is lim-
ited in the ways it can ﬂow: it can be sent on public chan-
nels, but only if it is encrypted or hashed ﬁrst. Bob can
send information via Email, but only to his family. This
eliminates the need to scour the code for all declassiﬁers
that could leak Bob’s data. The policy ﬁle states explicitly
which declassiﬁers are allowed.
Problem 2 Connecting with non-security-typed compo-
nents requires declassiﬁcation, but it introduces confusion
about the security policy of a program and potentially
broadens information leakage.
Observation 2 Based on this, we make the observation
that in order to understand the meaning of security-policy
labels in a security-typed program with declassiﬁcation, it is
necessary to know three things: 1) the principals used in the
program, 2) the delegations they make and 3) the declassi-
ﬁers they trust. With this information in hand, the meaning
of the policy {bob:} is restored. If we know, for example,
that Bob delegates to no one and trusts only AES encryp-
tion, then we know that the only information which will be
released about the body of this email will be the extremely
small amount of information released by AES encryption.
Solution 2 To address this challenge, we added a policy
infrastructure to Jif that allows the programmer to deﬁne,
up front, the principals, delegations and declassiﬁers which
may be used in a program. We describe this infrastructure
in Section 5.1; we give even more detail about this policy
infrastructure in a technical report [12], including a proof
of the security it maintains.
3.3 Certiﬁed user input
Consider again the code for an email data structure,
given above. If Alice wishes to send an email to Bob, she
must ﬁrst type in the email from her terminal. Thus, the
email text enters the JPmail client from an input stream,
stdin, labeled {alice:}. If she then wishes to send this
string to Bob, it must be relabeled to {bob:}. Let us also
introduce a new concept, a dynamic principal, which allows
the sending of an email to be parameterized based on two
dynamic values:
the user who is sending and the chosen
recipient.
Email{rcpt:} send(String{} to, String{} from,
Principal user, Principal rcpt) {
String{user:} body = stdin.readLine();
Email{rcpt:} msg =
new Email(to,from, declassify(body,{rcpt:});
return msg; }
Thus, if alice and bob are principals deﬁned elsewhere,
the email could be created and sent as follows:
Email{bob:} msgToBob = Email.send(
"PI:EMAIL","PI:EMAIL",alice,bob);
outchannel.write(
declassify(AES.encrypt(key,msgToBob), {}));
Here again, we need declassifying ﬁlters. In this case, we
need to leak more information than in the encryption de-
classiﬁer described above—we need to leak the body of the
text. Should such leakage be possible? This is a policy de-
cision that should not be buried in the code, but should
be declared at a high level.
The answer depends on the security model. In an MLS
setting, this should not be possible unless Alice and Bob
are both working at the appropriate relative security levels.
In other words, this declassiﬁcation should not be allowed
at all and the method Email.send(...) should return
null unless user delegates to rcpt, written rcpt acts-
for user in Jif (e.g.
in an MLS setting, user could be
secret and rcpt could be secret or top-secret). In a
corporate setting, it may be acceptable to declassify email
text so that anyone in the company can read it. If it is going
to an external principal, it may be necessary to perform an
audit or add a disclaimer. We accommodate such security
policies in the following way3:
Email{rcpt:} send(String{} to, String{} from,
Principal user, Principal rcpt) {
String{user:} bodyIn = stdin.readLine();
String{rcpt:} body = null;
if (rcpt actsfor user) body = bodyIn;
else if (authorize(user,rcpt,DeclassMsgBody))
body = DeclassMsgBody(user,rcpt,bodyIn);
else if (authorize(user,rcpt,DeclMsgBodyAudit))
body = DeclMsgBodyAudit(user,rcpt,bodyIn);
Email{rcpt:} msg = new Email(to,from,body);
return msg; }
The authorize method checks whether the principal in the
ﬁrst argument trusts the declassiﬁer (third argument) to de-
classify information to the principal in the second argument.
Thus, an MLS policy should not allow either declassiﬁer to
be used, while a company policy may allow DeclassMsg-
Body if both principals are in the company and DeclMsg-
BodyAudit if the ﬁrst principal is in the company, but the
recipient is external. These details are speciﬁed in a policy
ﬁle, which is compiled into Jif with our policy compiler and
3Note that this code does not correspond directly to the Jif implemen-
tation. We use Jif Closures for this which are such ﬂexible constructions
that they become syntactically cumbersome. We present a syntactically
simpliﬁed but semantically equivalent form here to aid the reader.
5
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:33:30 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006established at the start of a Jif application. By teasing out
the policy, we have made it possible to change the policy
model of an application merely by changing the high-level
policy ﬁle.
In the above code, we glossed over some details about
reading data from the standard input. Who decides how in-
put from the terminal should be labeled? Intuitively, all data
read from the terminal should be labeled with the principal
corresponding to the user who originally executed the appli-
cation. In other words, the data that the user enters should
be protected according to her security policy.
Jif implements this by ﬁrst adding a special native princi-
pal as an input parameter to main (the method called when
the application is executed). It then requires that standard
input be labeled at least as conﬁdential as this principal:
static void main(principal user, String[] args) {
jif.runtime.Runtime[user] runtime = null;
try {
runtime = jif.runtime.Runtime[user].getRuntime();
} catch (SecurityException e) {}
InputStreamReader[{user:}] inS = null;
try {
inS = new InputStreamReader[{user:}](
runtime.stdin(new label{user:}));
} catch (SecurityException ex) {
} catch (NullPointerException e) {}
...
}
Problem 3
Jif only provides a single native principal cor-
responding to the user executing the program. Furthermore,
access to operating system resources belonging to the user,
such as standard I/O and local ﬁles are provided, by Jif, but
must be labeled with this native principal. The JPMail pol-
icy uses an entirely distinct set of principals (e.g. Alice may
send email to someone who has no user account on her sys-
tem), but Jif does not allow for any way to equate native
principals to user-deﬁned principals.
Observation 3
In order to give the native, user principal
an identity in our email system, we need to identify it with
one of the principals in the principal store.
Solution 3 This required modiﬁcations to the Jif runtime
system to allow native principals to establish delegations.
At the same time, we had to add some form of authentica-
tion to ensure that a malicious principal could not simply
log in as bob and read Bob’s emails. Thus, we require the
user to provide, as authentication, Bob’s certiﬁed private
key (see Section 5.1). Note, that a more general form of
compliance between an entire operating system information
ﬂow policy and an application-level policy is an interesting
problem, left to future work [13].
4 JPmail architecture
We now give a description of the process of sending and
receiving an email in JPmail. In this description, we focus
on the information ﬂows that are necessary for sending an
email from one principal to another. In both the sending and
receiving processes, the data must pass through software ﬁl-
ters (points of processing that may audit or modify data) that
serve to relabel and/or modify it. In sending email, there
are two ﬁlters involved; in retrieving it, there is only one
(strictly speaking, this one may not be necessary because
the information is being upgraded). The only requirements
on these ﬁlters is that they are authorized by the owner of
the data and that they produce the properly labeled output.
The following example refers to the numbered Figure 2 in
which a principal Alice uses JPmail to securely send an
email to another principal Bob, who in turn reads that mail.
Sending email Alice initializes a MailSender with a pol-
icy and her principal name (alice in this case—the policy
and principals are explained in more detail in Section 5.1) as
well the necessary parameters for the outgoing mail server
(address, user name, etc.). 1) Then Alice enters an email, in-
cluding the header information and the text for the body of
the email. This email is labeled as alice since it came from
an input stream owned by Alice. 2) The email must then
undergo two transformations. First, in order to send out an
email, the headers must be readable by the mail server. This
requires that they be declassiﬁed to public. Secondly, the
body must be readable by the recipient, Bob, without being
readable by the public. These two steps are performed by a
reclassiﬁer, as shown. At this point, the email headers are
visible to the server while the body is visible only to the re-
cipient. 3) The next step is to make the entire email visible
to the server so that it can be sent out. At the same time, we
must not compromise the policy on the body, which requires
that it should only be visible to bob. To do this, we use a
random one-time symmetric key approach. The one-time
key (k) is generated, used to encrypt the email body (b),