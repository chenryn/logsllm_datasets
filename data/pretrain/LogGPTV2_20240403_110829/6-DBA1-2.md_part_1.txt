# NSD DBA1 DAY01
庞丽静 
第三阶段：数据库管理15天（三个5天），安全与监控6天（必备）。
1.  构建MySQL服务器
2.  数据库基本管理
3.  MySQL 数据类型
## 慨念：
### 1）什么是数据库：
DB，database:
数据库：依照某种数据模型进行组织并存放到存储器（硬盘）的数据集合
DBMS database management system：
数据库管理系统：用来操纵和管理数据库的大型服务软件
DBS，database system
数据库系统，DB+DBMS，指带有数据库并整合了数据管理软件的计算机系统
### 2）E-R数据模型
![LINUXNSD_V01DBA1DAY01_006](media/image1.png){width="5.760416666666667in"
height="3.45in"}
RDBMS：关系型数据库系统
### 3）常见数据库服务软件
![LINUXNSD_V01DBA1DAY01_007](media/image2.png){width="5.370833333333334in"
height="3.1368055555555556in"}
如何选择数据库软件：
是否开源：自由使用，二次开发，但是不等于免费
是否商业：微软的都是商业软件，需要收费（oracle sqlserver db2）
是否跨平台:unix linux windows 除了sqlserver，其余都是跨平台的
### 4）MySQL的特点及应用
![LINUXNSD_V01DBA1DAY01_010](media/image3.png){width="5.760416666666667in"
height="3.25in"}
API：访问程序接口
## 1 构建MySQL服务器
1.1 问题
本案例要求熟悉MySQL官方安装包的使用，快速构建一台数据库服务器：
-   安装MySQL-server、MySQl-client软件包
-   修改数据库用户root的密码
-   确认MySQL服务程序运行、root可控
1.2 方案
本课程将使用64位的RHEL 7操作系统，MySQL数据库的版本是5.7.17。
访问http://dev.mysql.com/downloads/mysql/，找到MySQL Community
Server下载页面，平台选择"Red Hat Enterprise Linux 7/ Oracle
Linux"，然后选择64位的bundle整合包下载，如图-1所示。
![image001](media/image4.png){width="5.986111111111111in"
height="3.5652777777777778in"}
图-1
注意：下载MySQL软件时需要以Oracle网站账户登录，如果没有请根据页面提示先注册一个（免费）
1.3 步骤
实现此案例需要按照如下步骤进行。
### 步骤一：准备工作
#### 1）停止mariadb服务
\[root@localhost \~\]# systemctl stop mariadb
#### 2）删除/etc/my.cnf配置文件
此配置文件由RHEL自带的mariadb-libs库提供：
\[root@localhost \~\]# rm -rf /etc/my.cnf
#### 3）删除数据
\[root@localhost \~\]# rm -rf /var/lib/mysql/\*
#### 4）卸载软件包（没有会显示未安装软件包）
\[root@localhost \~\]# rpm -e \--nodeps mariadb-server mariadb
警告：/var/log/mariadb/mariadb.log
已另存为/var/log/mariadb/mariadb.log.rpmsave
#因为mariadb redhat
自带的，mariadb与mysql都是提供mysql服务，所以要先卸载自带的mariadb，
### 步骤二：安装软件包
#### 1）安装mysql时可能会缺少某些依赖包，需提前单独安装
\[root@localhost \~\]# yum -y install perl-Data-Dumper perl-JSON
perl-Time-HiRes
#### 2）物理机传输解压包给虚拟机192.168.4.1
\[root@room9pc01 \~\]# cd 桌面
\[root@room9pc01 桌面\]# scp mysql-5.7.17.tar 192.168.4.1:/root/
//给虚拟机传包
root@192.168.4.1\'s password:
mysql-5.7.17.tar 100% 543MB 95.6MB/s 00:05
#### 虚拟机192.168.4.1解压mysql-5.7.17.tar 整合包
\[root@sql51 \~\]# du -sh mysql-5.7.17.tar #查看tar包的大小，确保完整
544M mysql-5.7.17.tar
\[root@localhost \~\]# tar -xvf mysql-5.7.17.tar //解压mysql整合包
./mysql-community-client-5.7.17-1.el7.x86_64.rpm
> #客户端应用程序，提供管理命令
./mysql-community-common-5.7.17-1.el7.x86_64.rpm #数据库和客户端共享文件
./mysql-community-devel-5.7.17-1.el7.x86_64.rpm
#客户端应用程序的库和头文件
./mysql-community-embedded-5.7.17-1.el7.x86_64.rpm #嵌入式函数库
./mysql-community-embedded-compat-5.7.17-1.el7.x86_64.rpm
> #嵌入式兼容函数库
./mysql-community-embedded-devel-5.7.17-1.el7.x86_64.rpm
> #头文件和库文件作为Mysql的嵌入式库文件
./mysql-community-libs-5.7.17-1.el7.x86_64.rpm
> #MySQL 数据库客户端应用程序的共享库
./mysql-community-libs-compat-5.7.17-1.el7.x86_64.rpm
> #客户端应用程序的共享兼容库
./mysql-community-minimal-debuginfo-5.7.17-1.el7.x86_64.rpm
./mysql-community-server-5.7.17-1.el7.x86_64.rpm #服务端
./mysql-community-test-5.7.17-1.el7.x86_64.rpm
#### 安装
\[root@localhost \~\]# yum -y install mysql-community-\*.rpm
#### 5）查看mysql包
\[root@localhost \~\]#rpm -qa \| grep -i mysql
### 步骤三：启动MySQL数据库服务并设置开机自启
\[root@localhost \~\]# systemctl start mysqld //启动mysql服务
\[root@localhost \~\]# systemctl enable mysqld //设置开机自启
\[root@localhost \~\]# systemctl status mysqld //查看mysql服务状态
● mysqld.service - MySQL Server
Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor
preset: disabled)
Active: active (running) since 二 2018-08-28 10:03:24 CST; 8min ago
Docs: man:mysqld(8)
http://dev.mysql.com/doc/refman/en/using-systemd.html
Main PID: 4284 (mysqld)
CGroup: /system.slice/mysqld.service
└─4284 /usr/sbin/mysqld \--daemonize \--pid-file=/var/r\...
8月 28 10:02:56 localhost.localdomain systemd\[1\]: Starting MySQ\...
8月 28 10:03:24 localhost.localdomain systemd\[1\]: Started MySQL\...
Hint: Some lines were ellipsized, use -l to show in full.
### \*配置相关参数：
主配置文件：/etc/my.cnf
数据库目录：/var/lib/mysql
进程名：mysql
传输协议：tcp
进程所有者：mysql
进程所属组：mysql
#### 查进程
\[root@sql51 \~\]# ps -C mysqld
PID TTY TIME CMD
2715 ? 00:00:00 mysqld
#### 查端口
\[root@sql51 \~\]# netstat -utnlp \|grep :3306
tcp6 0 0 :::3306 :::\* LISTEN 2715/mysqld
#### 首次启动初始化的文件
\[root@sql51 \~\]# ls /var/lib/mysql
auto.cnf ib_buffer_pool mysql public_key.pem
ca-key.pem ibdata1 mysql.sock server-cert.pem
ca.pem ib_logfile0 mysql.sock.lock server-key.pem
client-cert.pem ib_logfile1 performance_schema sys
client-key.pem ibtmp1 private_key.pem
#### 查用户查组
\[root@sql51 \~\]# grep mysql /etc/passwd
mysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/false
\[root@sql51 \~\]# grep mysql /etc/group
mysql:x:27:
#### 查进程所有者
\[root@sql51 \~\]# ps aux \|grep -i mysql
mysql 2715 0.0 17.1 1119216 173888 ? Sl 10:21 0:00 /usr/sbin/mysqld
\--daemonize \--pid-file=/var/run/mysqld/mysqld.pid
root 2888 0.0 0.0 112676 996 pts/0 S+ 10:32 0:00 grep \--color=auto -i
mysql
### 步骤四：连接MySQL服务器，修改密码
#### 查看随机生成的root管理密码
初始密码存放载日志文件中，可查看主配置文件知道日志文件
\[root@sql51 \~\]# vim /etc/my.cnf
log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid
\[root@localhost \~\]#grep \'temporary password\' /var/log/mysqld.log
2017-04-01T18:10:42.948679Z 1 \[Note\] A temporary password is generated
for root@localhost: mtoa\>Av\Av\ "环境：
\[root@localhost \~\]# mysql -u root -p\'mtoa\>Av\ //登录成功后，进入SQL操作环境
用该密码登录到服务端后，必须马上修改密码，不然会报如下错误：
mysql\> show databases;
ERROR 1820 (HY000): You must reset your password using ALTER USER
statement before executing this statement.
不修改密码要求参数，直接修改密码   ＃修改root在本机登录的密码
mysql\> alter user root@\"localhost\" identified by \"123qqq\...AAA\" ;
Query OK, 0 rows affected (0.00 sec)
\[root@sql51 \~\]# mysql -uroot
-p123qqq\...AAA #密码无特殊字符，不需要单引号
#### 3）查看密码策略
mysql\> show variables like \"%password%\" ;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\--+
\| default_password_lifetime  \| 0 \|
\| disconnect_on_expired_password \| ON \|
\| log_builtin_as_identified_by_password  \| OFF \|
\| mysql_native_password_proxy_users \| OFF \|
\| old_passwords   \| 0 \|
\| report_password   \| \|
\| sha256_password_proxy_users \| OFF \|
\| validate_password_check_user_name \| OFF \|
\| validate_password_dictionary_file    \| \|
\| validate_password_length   \| 8 \| #默认为８
\| validate_password_mixed_case_count \| 1 \|
\| validate_password_number_count \| 1 \|
\| validate_password_policy   \| MEDIUM \| #默认为１（MEDIUM）
\| validate_password_special_char_count \| 1 \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\--+
14 rows in set (0.01 sec)
#### 4) 临时修改密码策略,执行SET PASSWORD命令
这个其实与validate_password_policy的值有关，默认为1，所以刚开始设置的密码必须符合长度，且必须含有数字，小写或大写字母，特殊字符。如果我们不希望密码设置的那么复杂，需要修改两个全局参数：validate_password_policy与validate_password_length。validate_password_length默认值为8,最小值为4，如果你显性指定validate_password_length的值小于4，尽管不会报错，但validate_password_length的值将设为4。
可参考下列指令：
mysql\>set global validate_password_policy=0; //只验证长度,临时修改
Query OK, 0 rows affected (0.00 sec)
参数：0 or LOW：只检查密码长度  
 1 or MEDIUM：检测长度，数字，大小写和特殊字符（默认）
 2 or STRONG：检测长度，数字，大小写和特殊字符，字典文件
mysql\>set global
validate_password_length=6；//修改密码长度,默认值是8个字符
Query OK, 0 rows affected (0.00 sec)
mysql\> show variables like \"%password%\" ;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| default_password_lifetime  \| 0 \|
\| disconnect_on_expired_password \| ON \|
\| log_builtin_as_identified_by_password  \| OFF \|
\| mysql_native_password_proxy_users \| OFF \|
\| old_passwords   \| 0 \|
\| report_password   \| \|
\| sha256_password_proxy_users \| OFF \|
\| validate_password_check_user_name \| OFF \|
\| validate_password_dictionary_file    \| \|
\| validate_password_length   \| 6 \| #长度修改为６
\| validate_password_mixed_case_count \| 1 \|
\| validate_password_number_count \| 1 \|
\| validate_password_policy   \| LOW \| #修改为0(LOW)
\| validate_password_special_char_count   \| 1 \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
14 rows in set (0.00 sec)
#### 5）永久修改密码策略
\[root@sql51 \~\]# vim /etc/my.cnf
\[mysqld\]
validate_password_length=6
validate_password_policy=0
####  修改密码
**修改密码语句一:**
mysql\> alter user user() identified by \"123456\"; //修改登陆密码
Query OK, 0 rows affected (0.00 sec)
  上述操作的结果是------更改数据库用户root从本机访问时的密码，设为123456。
退出"mysql\> "环境，重新登录验证，必须采用新的密码才能登入：
mysql\> exit //退出 mysql\> 环境
Bye
\[root@localhost \~\]# mysql -u root -p //重新登录
Enter password: //输入新设置的密码
Welcome to the MySQL monitor. Commands end with ; or \\g.
Your MySQL connection id is 15
Server version: 5.7.17 MySQL Community Server (GPL)
Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights
reserved.
Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.
Type \'help;\' or \'\\h\' for help. Type \'\\c\' to clear the current
input statement.
**修改密码语句二:**
mysql\> alter user root@\"localhost\" identified by \"123qqq\...AAA\" ;
Query OK, 0 rows affected (0.00 sec)
\[root@sql51 \~\]# mysql -uroot