title:RandRunner: Distributed Randomness from Trapdoor VDFs with Strong
Uniqueness
author:Philipp Schindler and
Aljosha Judmayer and
Markus Hittmeir and
Nicholas Stifter and
Edgar R. Weippl
RandRunner: Distributed Randomness from
Trapdoor VDFs with Strong Uniqueness
Philipp Schindler∗, Aljosha Judmayer†∗, Markus Hittmeir∗, Nicholas Stifter∗‡, and Edgar Weippl†
∗SBA Research †Universit¨at Wien ‡TU Wien
Abstract—Generating randomness collectively has been a long
standing problem in distributed computing. It plays a critical
role not only in the design of state-of-the-art Byzantine fault-
tolerant (BFT) and blockchain protocols, but also for a range
of applications far beyond this ﬁeld. We present RandRunner,
a random beacon protocol with a unique set of guarantees that
targets a realistic system model. Our design avoids the necessity of
a (BFT) consensus protocol and its accompanying high complexity
and communication overhead. We achieve this by introducing a
novel extension to veriﬁable delay functions (VDFs) in the RSA
setting that does not require a trusted dealer or distributed key
generation (DKG) and only relies on well studied cryptographic
assumptions. This design allows RandRunner to tolerate adver-
sarial or failed leaders while guaranteeing safety and liveness of
the protocol despite possible periods of asynchrony.
I.
INTRODUCTION
Generating cryptographically secure randomness locally is
essential for secure communication. While being a challeng-
ing topic in itself, there exists a range of well established
approaches to solve this problem. These range from direct
support within modern operating systems, using a variety of
different entropy sources, to dedicated CPU instructions or
external hardware devices. However, as soon as randomness is
not required on an individual basis but rather used collectively,
local solutions fail to provide convincing evidence that some
claimed random value was indeed derived randomly. Still,
as outlined by the extensive body of prior works [42], [45],
[16], [10], a broad range of applications relies on collec-
tively used randomness. This includes the design of BFT
and blockchain protocols, cryptographic parameter generation,
e-voting, auditable selections, online gaming and gambling,
privacy enhancing technologies, as well as Smart Contracts
and other forms of multi-party computation. To address these
scenarios, randomness from trusted third parties, for example,
the NIST random beacon or random.org, may be used. How-
ever, the additional trust assumptions and reliance on a central
randomness provider, which may know the beacon values
well in advance before publishing, or could even manipulate
the produced values without being detected, is undesirable.
Fortunately, there exists a range of distributed protocols which
can be used instead to avoid trusting centralized services.
The techniques used by modern protocols for distributed
randomness generation have advanced signiﬁcantly since coin
Network and Distributed Systems Security (NDSS) Symposium 2021
21-25  February  2021, Virtual 
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.23116
www.ndss-symposium.org
tossing protocols and the notion of a random beacon, in-
troduced by Blum [5] and Rabin [40] in 1983. As recently
compared by Schindler et al. [42], modern techniques include
threshold cryptography, in particular publicly-veriﬁable secret
sharing (PVSS) [31], [16], [45], [42] and threshold signature
schemes [14], [29], as well as veriﬁable random functions
(VRFs) as seen in Algorand [17] and Ouroboros Praos [31].
Additionally, methods in which randomness is extracted from
existing data sources such as the Bitcoin blockchain [10], [4],
[38] or published ﬁnancial data [18] have been considered.
Methods based on delay functions (also known as slow-time
functions) have been described [33] and were later realized via
the Ethereum Smart Contract platform [12]. Recently, methods
based on delay functions have received increased interest with
the rise of veriﬁable delay functions (VDFs) [6], [7], [39], [46].
Although the characteristics of VDFs make them a promising
candidate for their use in random beacon protocols, the number
of protocols utilizing VDFs to construct random beacons is
rather limited. To the best of our knowledge, there exists only
RANDAO [13] which collects entropy from different parties
to be used as input for a VDF, as proposed by J. Drake and
discussed in the online ethresear.ch forum [22]. Apart from this
discussion, there has not been any formal security analysis of
the scheme.
In this paper, we demonstrate how VDFs, speciﬁcally
strongly unique trapdoor VDFs which we introduce in Sec-
tion II, can be leveraged to construct a new category of random
beacon protocols. We describe RandRunner, a random beacon
protocol with a unique set of security guarantees that also
offers excellent scalability, performance and responsiveness.
Our new protocol aims to fulﬁll all desirable properties pre-
viously considered for randomness beacons. These include
the key properties of unpredictability, bias-resistance, avail-
ability/liveness as well as public-veriﬁability. In other words,
an adversary must neither be able to predict future random
beacons before they become publicly available, nor bias the
distribution of the produced randomness, nor prevent
the
protocol from making progress. Furthermore, each produced
protocol output must be efﬁciently veriﬁable even by third
parties. As an extension to liveness and bias-resistance, we
also set out to achieve the property of guaranteed output
delivery [16], [42], ensuring that an adversary cannot even
prevent the protocol from producing an output in any protocol
round. In addition, RandRunner’s construction and protocol
description remains both simple to understand, as well as
efﬁcient (in terms of communication and veriﬁcation complex-
ity). To derive and prove the correctness of a fresh protocol
output, only a single message, around 10 KB in size1, has
1This is essentially the proof size of the used VDF [39].
to be disseminated throughout the network of nodes running
the protocol. The underlying message distribution mechanism
is decoupled from the core protocol, providing the ﬂexibility
to adapt to a particular deployment scenario. For example,
in large networks gossip protocols with communication com-
plexity of O(n log n) and higher latency may be used, while
reliable broadcast with lower latency and complexity O(n2)
may suit smaller networks. By construction, our protocol
ensures predetermined agreement on the sequence of random
numbers produced without the necessity of continuous Byzan-
tine agreement (BA). This also guarantees bias-resistance and
public-veriﬁability and even allows for progress/liveness under
periods of full asynchrony.
A. Contribution
Summarizing, the contributions of this paper are as follows:
• We extend the concept of trapdoor veriﬁable de-
lay functions
initially deﬁned by
Wesolowski [46], by formally deﬁning the strong
uniqueness property.
(T-VDFs), as
•
• We show how to instantiate T-VDFs that achieve this
property and prove the security of our construction.
Using a T-VDF with strong uniqueness as the main
building block, we specify a new randomness beacon
protocol called RandRunner and prove that it provides
the desired security properties.
• We simulate the execution of our newly proposed
protocol to demonstrate its practical feasibility under
various scenarios and protocol conﬁgurations.
• We discuss and compare our solution to other state-
of-the-art protocol designs.
B. Paper Structure
In Section II, we introduce the required background in-
formation on the topic of veriﬁable delay functions (VDFs),
deﬁne trapdoor VDFs with the property of strong uniqueness,
and show how to construct this type of VDF in practice. We
provide an example and a ﬁrst overview of the design of
our randomness beacon, using the constructed VDF as the
main cryptographic component, in Section III, describe our
system and threat model in Section IV, and give the details
of our construction in Section V. Section VI presents our
security proofs and simulation results for the protocol. Finally,
we compare our design with existing state-of-the-art protocols
in Section VII and conclude our paper in Section VIII. In
the appendix, we provide a notation reference as well as
additional evaluation results for a wide range of possible
protocol parameterizations and scenarios to further highlight
the feasibility of our approach in practice.
II. TRAPDOOR VDFS WITH STRONG UNIQUENESS
In this section, we summarize the original concept of veriﬁ-
able delay functions (VDFs) and deﬁne the exact requirements
for a VDF serving as the main cryptographic component in
our random beacon protocol: a trapdoor VDF with the strong
uniqueness property2. We ﬁnally show how such a VDF can
be constructed using standard cryptographic assumptions and
provide the corresponding security proofs.
A. Background
VDFs were ﬁrst introduced by Boneh et al. [6] in 2018, and
have since received increased attention from other researchers
(see, e.g., [6], [46], [39], [7], [20], [32], [44], [25], [24], [34]).
As introduced by Boneh et al. [6], [7], a VDF is a function
f : X → Y which maps every input x ∈ X to an unique
output y ∈ Y. Computing the VDF is sequential in the sense
that it takes a prescribed amount of time, whether or not it
is executed on multiple processors. Veriﬁcation, on the other
hand, should be as quick as possible. Closely following Boneh
et al.’s deﬁnition [6], a VDF is described via a set of three
algorithms:
Setup(λ) → pp
is a randomized algorithm that takes a
security parameter λ as input and outputs public parameters
pp sampled from some parameter space PP.
Eval (pp, x, T ) → (y, π) takes public parameters pp ∈ PP, an
input x ∈ X and a time parameter T ∈ N and outputs a y ∈ Y
together with a proof π.
Verify(pp, x, T, y, π) → {accept, reject} takes public para-
meters pp ∈ PP, an input x ∈ X , a time parameter T ∈ N,
the output y ∈ Y and the corresponding proof π and outputs
accept if y is the correct evaluation of the VDF on input
(pp, x, T ) and reject otherwise.
Setup may require secret randomness as input. This secret
input must not be recoverable by any party after Setup is
completed, as knowledge of the secret randomness (depending
on the construction) can be used to break the uniqueness and/or
sequentiality properties of the VDF. In practice, e.g., in an
RSA-based setting, this complicates the setup as the generation
of the parameters requires either the use of a trusted dealer
who has to delete the secret randomness after the process, or
a rather complex secure multi-party computation.3 As we will
show, the trapdoor VDFs we use in RandRunner’s protocol
design avoid these disadvantages.
VDFs as introduced above have to satisfy certain proper-
ties, namely:
1)
2)
3)
-evaluation time: a runtime constraint for Eval,
sequentiality: Eval must not be parallelizable, and
uniqueness: Verify must accept a single output per
input (except with negligible probability).
We give the deﬁnition of these properties for the speciﬁc kind
of VDF we require in the following and refer the reader to the
excellent works of Boneh et al. [6], [7] and Pietrzak [39] for
a formal deﬁnition of these properties in the general setting.
2An interesting observation, noted by one anonymous reviewer, is that
veriﬁable random functions (VRFs) [35] and these T-VDFs share the strong
uniqueness property. The main difference is that (T-)VDFs are (slowly)
publicly computable whereas VRFs are not.
3In a recent result, Frederiksen et al. [27] provide an implementation for
the malicious two-party setting. Using server grade hardware connected via
a 40.0 Gbps network link, they we able to achieve average runtimes of 35
seconds. However, we are not aware of any practical solutions for the malicious
multi-party setting which would be desirable for the setup of VDFs.
2
B. On Trapdoors and Strong Uniqueness
For our random beacon protocol, we require a special kind
of VDF, namely a trapdoor VDF which ensures strong unique-
ness. Regarding the corresponding deﬁnitions we give below,
we closely follow Boneh et al.’s work [7] for the traditional
setting. Whereas their work only considered public parameters
generated by Setup, our deﬁnition covers all parameters from
the parameter space PP. All valid parameters, in particular
all parameters generated by Setup, are part of PP. However,
PP is deﬁned in terms of the speciﬁc properties the parameters
have to fulﬁll instead of being implicitly deﬁned via Setup.
This also allows us to reason about VDFs for which the
parameters are generated by an adversary, and it is crucial
for the deﬁnition of -evaluation time and strong uniqueness.
Trapdoor VDFs, as initially described by Wesolowski [46],
are a modiﬁcation and extension to traditional VDFs such
that the Setup algorithm, in addition to the public parameters
pp, outputs a secret key or trapdoor sk to the party invok-
ing the setup algorithm. This parameter sk is kept secret
by the invoker, whereas pp is published. Furthermore, the
algorithm TrapdoorEval (pp, x, T, sk) → (y, π) provides an
alternative way to evaluate the VDF efﬁciently, i.e., within time
Ø(poly(λ)), for parties which know the trapdoor sk. Parties
without this knowledge, as in the traditional VDF case, can still
compute the output by executing Eval. However, they require
(1 + )T sequential computational steps to do so.
Deﬁnition 1. (-evaluation time) For all inputs x ∈ X and
all public parameters pp ∈ PP, the algorithm Eval (pp, x, T )
runs in time at most (1 + )T .
Due to the introduction of the trapdoor, and in contrast
to traditional VDFs, the sequentiality property only holds for
parties which do not know the trapdoor, a property we make
use of in the construction of our random beacon.
Deﬁnition 2. (Sequentiality without trapdoor) A parallel al-
gorithm A, using at most poly(λ) processors, that runs in time
less than T cannot compute the function without the knowledge
of a secret trapdoor sk. Speciﬁcally, for a random x ∈ X and
all public parameters pp output by Setup(λ), if (y, π) is the
output of Eval (pp, T, x), or TrapdoorEval (pp, x, T, sk), then
the probability that A can compute y in less than T steps is
negligible.
Strong uniqueness extends the requirement for uniqueness
to a setting in which the public parameters of the VDF may
be generated by an adversary. This setting was not considered
in Wesolowski’s paper [46], and unfortunately, Wesolowski’s
VDF also does not achieve this property. In their case, both
uniqueness and sequentiality can be broken by an adversary
knowing the trapdoor. We however envision a range of appli-
cations for trapdoor VDFs where this property is crucial. This
includes, e.g., scenarios in which parties set up their VDF
individually, as is the case with our randomness beacon.
Deﬁnition 3. (Strong Uniqueness) For each input x ∈ X , and
all public parameters pp ∈ PP, exactly one output y ∈ Y
is accepted by Verify, with negligible error probability (even
if the public parameters pp have been adversarially gener-
ated). Speciﬁcally, let A be an efﬁcient algorithm that outputs
(pp, x, T, y, π) such that Verify(pp, x, T, y, π) = accept. Then
P r[Eval (pp, x, T ) (cid:54)= y] is negligible.
Notice that we follow Boneh et al.’s most recent deﬁnition
of uniqueness [7], whereas uniqueness was previously implic-
itly deﬁned by the properties of correctness and soundness [6].
C. Design Rationale
Efﬁcient VDF designs,
for example the protocols by
Wesolowski [46] or Pietrzak [39], operate in groups of un-
known order, such as the well known RSA groups or class
groups of an imaginary quadratic ﬁeld [11]. While the security
of RSA groups has been studied for decades, the parameter
setup for the VDF (i.e., computing the modulus N as the
product of two safe primes) is considered difﬁcult without re-
quiring a trusted dealer. Class groups of an imaginary quadratic