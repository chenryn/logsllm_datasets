written to by the camera. Hence, malware cannot “feed” the image
to TA, and a well-formed response cannot be returned to Verifier.
Analog Attacks. An analog adversary enhances the plain cuckoo
attack by attacking the D2C channel. In essence, the adversary sets
up an “image relay” that acts as the man-in-the-middle between
Verifier and TA in M.
Ahead of time, the adversary sets up another computer (accom-
plice) with a display facing M’s camera. TA on M successfully runs
Protocol 1 and sends a request to Verifier via the network. When
Verifier displays a challenge image, Dev’s camera captures it, passes
it to malware which then forwards it (via the network) to the ac-
complice, to be displayed. Finally, TA in M captures the image and
computes channel latency.
Figure 6 illustrates minimum channel latency for this attack.
t1, t2, t3 are defined the same as in Figure 5. To give the adversary
maximal advantage, we assume that D2C intervals (as defined in
Section 3.1.1) are of negligible length, meaning that both t3 − t2 and
t7 − t6 are close to zero. The interval between t4 and t5 depends on
the adversary’s network channel between Dev and the accomplice.
We consider t5 − t4 to be negligible, assuming that the network
used by the adversary is invisible to Verifier. We also disregard (as
negligible) the CPU time taken by the adversary. Let ¯∆min denote
minimum channel latency under the analog cuckoo attack. Hence,
we have:
¯∆min = 2τdis + 2τcam and ¯∆min − ∆max = τdis
Thus, in the best case, the adversary still needs τdis longer time
than the longest delay incurred by uncorrupted Dev. Since τdis is
the inverse of the display refresh rate (e.g., 60Hz for many modern
displays), it is large enough to be detected by Verifier.
3.2 Extension: Iterative Checking
We extend the basic scheme to detect the presence of the analog
adversary, armed with a high-end display with τdis of only a few
milliseconds. The basic idea is to amplify a relatively short delay of
one-round analog transmission into a substantially higher latency.
Fig. 6: Example of ATL of D2C channel under analogy cuckoo at-
tack.
The extended protocol requires multiple consecutive rounds of D2C
channel transmission, which clearly incurs additional user burden.
For effective latency amplification, a new round of transmission
must begin after completion of the prior round, i.e., there should
be no pipelining. Therefore, the receiver has to securely notify the
sender about completion. We use the same D2C channel for the
returning notification, such that a man-in-the-middle attack would
incur higher delays. Hence, the extended scheme requires both Ver-
ifier and Dev to have their cameras facing the other’s display. The
resulting scheme is described in Protocol 3. The notification sent
from TA to Verifier in Step 5 is a visualized HMAC, that allows Veri-
fier to verify authenticity. Thus, the adversary cannot impersonate
TA by sending a fake notification, which would lead to pipelined
transmission and defeat the purpose of amplification.
Noise intervals on Dev and Verifier– of lengths δD and δV – refer
to the time from receipt of a valid image frame produced by the
camera, until the display starts rendering, on respective devices.
These intervals, as well as images of hi-s, are described in detail in
Section 5.
Maximum Latency under No Attack. At completion of Proto-
col 3, TA display-sends (h0,· · · , hn ) and Verifier display-sends
(P0,· · · , Pn−1). Note that starting time Ts is right after receiving
h0. Thus, only transmission times for (h1,· · · , hn ) are factored into
Te − Ts. In total, the protocol involves 2n D2C transmissions and
maximum latency of accumulated ATL is: ∆I
max = 2n(τdis +2τcam),
assuming identical hardware at both end-points.
Minimum Latency for Adversary. The adversary can use both
a display and a camera to relay images between Verifier and TA.
Minimum delay in relaying Pi, denoted as ¯∆v2d
min, is the same as in
the basic protocol. Thus, we have:
¯∆v2d
min = τdis + 2τcam + ¯τdis
where ¯τdis is the frame rate of the adversary’s special (i.e., faster
refresh rate) display. Minimum delay in relaying hi, denoted as
¯∆d2v
min, is computed as:
¯∆d2v
min = 2τdis + τcam + ¯τcam
timeimage	written	to	memoryτcamTst1t2Tepacket	sentDevτdisMimage	arrivalτdisimage	displayed	on	screenRemote	Displaycamera	starting	capturingt3t4t5t6image	written	to	memoryτcamt7AttackerATL	of	the	attacked	D2C	channelVerifier
and
max , n, P0, P1, · · · , Pn−1)
generates
TA computes
Iterative Residence Checking (∆it e
Before
random images
execution,
n
{h0, · · · , hn } where
{P0, P1, · · · , Pn−1},
hi = Hk (i, Verifier||TA) for i ∈ [0, n], and converts them into
n + 1 images. Both Verifier and TA are ready for camera-receive with
counter i = 0.
5. (Dev) TA in Dev display-sends the image for hi . Next, based on the
value of i:
• i  τcam. Note that neither τdis
nor τcam is chosen by the attacker. Moreover, it can be amplified
linearly with multiple iterations. In practice, a typical smartphone
display has a 60 Hz refresh rate, while a high-end camera can
reach a rate of about 120 frames per second. In such a setting,
τdis − τcam alone is about 8 msec. Hence, the iterative residence
checking scheme can detect an analog cuckoo attack.
4 SECURITY AND USABILITY
Residence checking protocols proposed in Section 3 require a line-
of-sight channel between Verifier and Dev. In the basic protocol,
Alice needs to position Dev to point at Verifier, while the extended
protocol requires both Verifier and Dev have to be properly po-
sitioned. Moreover, Alice has to inform Verifier about relevant
parameters, including τdis and τcam. This results in strong security,
which is, unfortunately, commensurate with relatively poor usabil-
ity. In this section, we consider software-only attacks and propose
two protocols with better usability, though weaker security.
4.1 Scene-Based Residence Checking
Scene-based attestation also assumes that Dev has a camera. The
scheme is essentially a challenge-response protocol between Alice
and TA. Alice picks a random physical object in its physical prox-
imity or environment and uses it as a challenge. TA is expected to
respond with the object’s image directly produced from its own
camera. Assuming integrity of the hardware, and that the analog
channel is not attacked by the software-only adversary, a correct
response implies that TA’s hosting device’s camera indeed “sees”
the challenge object. Therefore, the device in question must be Dev.
Scene-based Residence Checking Protocol.
5. After receiving b from Verifier, TA prepares for residence attestation
by clearing the camera’s DMA buffer and locking it.
6. After sending b, Verifier notifies Alice to prepare the challenge. Alice
randomly chooses a physical object in her current environment. For
example, she might use the whiteboard or a piece of paper to write
one or more random number(s) or draw arbitrary pictures, or simply
select a random scene in her immediate vicinity. Alice then points
Dev at the chosen object (from a close distance) and takes a photo
with Dev.
σ , I← Dev. TA obtains the image of the object by directly fetch-
ing raw bytes from the camera’s DMA buffer. Let I denote the image
data. TA computes σ = Hk (I ).
8. Verifier verifies validity of σ using k and I. If verified, it displays I
7. Verifier
on its screen; otherwise, Verifier displays an error message.
9. Alice manually checks whether I displayed by Verifier matches her
chosen object. If so, she concludes that the trust anchor is indeed on
Dev and protected by ROTD.
Protocol 4: (Cont. from Protocol 1) Scene-based Residence Check-
ing Protocol
Details are described in Protocol 4, which runs after Protocol 1.
Basically, TA clears the camera’s DMA buffer on its hosting platform,
and locks it (Step 5), such that only the camera can write into it. It
ensures that data later fetched from the buffer is indeed delivered
by the camera, and not by malware. Thus, TA’s response (in Step 7)
faithfully reflects the physical environment of the hosting device.
Discussion. Protocol 4 is secure against software-only cuckoo
attacks. Under such an attack, TA on M only takes input from
hardware, and a software-only adversary cannot feed TA any images
captured by Dev’s camera.
Theoretically, this protocol can be defeated by the analog ad-
versary using the scenario described in Section 3. Nonetheless, we
believe that, in practice, the protocol may withstand analog at-
tacks to some extent. There is notable difference in effort between
(adversarial) ability to photograph: (1) a physical object in Alice’s
and Dev’s private environment, and (2) an image displayed on the
screen in a separate (adversary-controlled) environment. This differ-
ence is based on several factors, such as: ambient lighting, distance
between the camera lens and the target, as well as reflections of
various nearby objects. The adversary that photographs displayed
images would quite likely sacrifice fidelity of the real object, or
include objects that are not in Dev’s environment.
Furthermore, the scene-based scheme can be extended to replace
a photo with a short video clip. The camera in Alice’s environment
would record a normal clip, while the clip produced in the adver-
sary’s environment would show the refreshing of the screen when
the camera’s frame rate is higher than that of the screen. Therefore,
Alice would be able to decide whether the result is indeed obtained
from her environment. Unfortunately, this would significantly com-
plicate the design of TA due to the video clip being generated from
raw data. We leave this issue for future work.
4.2 Location-Based Residence Checking
Location-based residence checking assumes that Alice is aware of
her present location and Dev has a GPS5. The basic idea is to use
Alice’s present location as an implicit challenge to TA which is
expected to report a matching location by securely obtaining its
hosting device’s GPS data. Since GPS signals can be spoofed by
the adversary with physical equipment, this scheme is secure just
against software-only attacks.
Similar to the scene-based attestation protocol, TA needs to clear
the GPS DMA buffer and lock it, such that any data in the buffer is
faithfully reported by GPS. The protocol is presented in Protocol 5.
Location-Based Residence Attestation.
5. After receiving b from Verifier, TA prepares for residence attestation
by locking the DMA buffer used by the device’s GPS.
6. Verifier
σ , L← Dev. TA obtains its present location coordinates by di-
rectly fetching raw bytes from the GPS DMA buffer. Let L denote the
location data. TA computes σ = Hk (L).
7. Verifier verifies validity of σ using k and L. If verified, it highlights L
on the displayed map; otherwise it displays an error message on the
screen.
8. Alice manually checks whether the highlighted location matches
her present environment. If positive, Alice concludes that the trust
anchor is indeed on Dev and protected by ROTD.
Protocol 5: (Cont. from Protocol 1) Location-based Residence
Checking Protocol
The main advantage of this scheme is its minimal human in-
volvement, since Alice does not need to move or reposition Dev.
The protocol can even be combined with the existence checking
protocol without time gaps in Protocol 2, 3 and 4.
Caveat. The present scheme is not secure against the adversary
positioned very near Alice, since, in that case, TA on the adversary’s
device reports the same location as Dev.
4.3 Other Analog Attacks
We now consider another potential attack setting for the analog
adversary. In it, the adversary takes advantage of at least one extra-
neous camera (denoted by CAM) in the immediate vicinity of Alice,
Dev and Verifier. The attack is more similar to shoulder-surfing,
than to a cuckoo attack. The main idea is that, if properly positioned,
CAM can take a reasonably accurate photo of the screen at about
the same time as Dev’s camera. Therefore, if CAM is wired to M
(or they are one and the same), the proposed sight-based schemes
can be defeated, since the adversary no longer needs any analog
relay. There are two flavors of this attack:
5Although it is possible to locate a device via Wi-Fi and cellular signals, the complex