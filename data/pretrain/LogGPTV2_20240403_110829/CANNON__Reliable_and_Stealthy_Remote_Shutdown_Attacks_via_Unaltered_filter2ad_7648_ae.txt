to achieve a victim shutdown without the detection method
alerting prior to the shutdown itself. Our experimental setup
involves three Arduino Due boards: (1) the victim ECU, (2) the
detection ECU, and (3) the compromised ECU. The detection
ECU also transmits its own messages to simulate other trafﬁc
on the bus. We perform each test 1,000 times, and we operate
all tests at 500Mbps, use a shared 12V supply to power the
boards, and observe the bus trafﬁc using a logic analyzer.
For all of the experiments below, we follow the conﬁgura-
tion of prior work [15]: the victim ECU transmits ID 0x11
every 10ms, the detection ECU transmits ID 0x7 and 0x9
every 10ms, and the compromised ECU monitors the bus and
attempts to attack. To simulate noise from a real vehicle, we
intentionally set the deviation of ID 0x11 to 0.15ms as the
best-case minimum deviation found by prior work [21]. For
all experiments with the overwrite attack, the compromised
6We do not demonstrate CANnon against complete implementations of
existing defenses, which monitor only entire CAN messages or frames, as
they are ineffective by construction as detailed in Sec. VII.
205
ECU injects ID 0x9 around the expected transmission time of
0x11 to set up their attack.
Versus timing-based IDS: We ﬁrst test the overwrite attack
and CANnon against a timing-based IDS that alerts if frames
transmit outside of their expected period. Timing-based IDSes
also include ML-based [43] and trafﬁc anomaly methods [44]
as they analyze timestamps to detect illegitimate transmissions.
We set the detection threshold for period deviation to be 10%
(e.g. 1ms for a 10ms period) following prior work [9]. We
program our detection ECU to measure the inter-arrival time
between frames for a given ID and alert if the measured
time exceeds 10% of the expected period. For CANnon, the
compromised ECU attacks using the data payload and employs
the dominant-hold technique from Sec. V to guarantee victim
transmission time. Out of 1,000 attempts, we ﬁnd that our
detection ECU alerts to every attempt by the overwrite attack
but does not alert to any of the CANnon attacks. CANnon only
needs to hold the dominant state for 0.15ms once to guarantee
the ﬁrst victim transmission and cause an error. The overwrite
attack injects new messages onto the network, exceeding the
expected deviation threshold. CANnon achieves a shutdown in
just 2ms before the next transmission should occur.7
Versus a “secure transceiver:” As secure transceivers are
not currently in production, we modify the detection ECU
to act as the secure transceiver. It will read each logical bit
transmitted and received by the compromised ECU by directly
connecting between the MCU’s CAN peripheral and the CAN
transceiver following prior work [21]. If an ECU sends an
illegitimate arbitration ID, it will produce an alert in real-time
immediately after the arbitration ﬁeld transmits. For CANnon,
the compromised ECU attacks via the SOF bit method as the
secure transceiver could detect the data payload attack.8 Out
of 1,000 attempts, we ﬁnd that our secure transceiver alerts
to every attempt by the overwrite attack but does not alert to
any of the CANnon attacks. CANnon only injects a SOF bit
as its attack and does not transmit any arbitration ID, while
the additional message transmissions in the overwrite attack
cause our secure transceiver to alert immediately.
Versus a frame-level voltage IDS: Following observations
from prior work [10], [11], [45], we modify the detection
ECU to directly measure the CAN bus voltages to detect an
attack. The CAN medium is a differential pair called CAN
low and CAN high that typically exhibit around 1.5 and 3.5
voltages for a dominant bit, respectively (recessive state causes
both to exhibit 2.5 volts). The key insight from prior work is
to measure the voltage of the dominant bits throughout an
entire frame. With the message overwrite attack [15], the start
of an overwritten frame has two transmitters and ends with
a single transmitter, i.e. the compromised ECU. Thus, the
attack exhibits a larger differential at the start and a smaller
differential at the end of an overwritten frame. We build a
7This fast ability to shutdown could act as a useful stepping-stone to future
work on masquerade attacks.
8CANnon could technically use any arbitration ID (even a legitimate ID),
but we assume that the adversary wants to use ID 0x0 to minimize wait for
bus idle.
voltage IDS that alerts if the dominant bits exhibit a sudden
drop in dominant differential voltage during a single frame.
Out of 1,000 attempts, we ﬁnd that our IDS alerts to every
attempt by the overwrite attack but does not alert to any of
the CANnon attacks. CANnon only injects a single error ﬂag
in the middle of a frame and, thus, this approach to voltage
IDS does not detect our attack.
VII. STEALTH AGAINST NETWORK DEFENSES
Next, we discuss why CANnon evades state-of-art defenses
and also how to tackle future CANnon-aware defenses.
A. Deceiving state-of-the-art defenses
Many approaches exist that can defend against shutdown
attacks. We group these defenses into three classes based on
the layer in the CAN communication stack they operate on.
Defenses at application layer: Many IDSes are software
applications, limited to reading messages passed up the com-
munication stack by CAN hardware. These run on any ECU
and do not require special hardware, making them an attractive
solution. For instance, they can use statistical techniques based
on message timings and content [9], [16], [17], [46]. A recent
U.S. agency report [12] discusses how companies working
closely with automakers have access to proprietary information
on the expected content of CAN messages, enhancing their
ability to create application-layer defenses. Another class of
IDS that makes use of this proprietary information are machine
learning [43] and trafﬁc anomaly IDSes [44], which analyze
message timing and payload to detect an attack.
Application-layer IDSes can detect both the diagnostic mes-
sage and message overwrite attacks in Table I as they require
transmitting additional CAN frames on the bus. As such, any
application-layer defenses that measure message timing or
content cannot detect our attack since we do not transmit entire
CAN frames or signiﬁcantly disrupt valid transmitted frames.
CANnon operates quickly and can shutdown ECUs in just a
couple milliseconds (well under the minimum period observed
by prior work [21]) as demonstrated in Sec. VI.
Defenses at data link layer: Recent industry solutions pro-
pose secure CAN transceivers [13] that operate at the data
link layer. These transceivers can prevent a compromised
ECU from attacking a CAN bus by either: (1) invalidating
frames with spoofed CAN IDs, (2) invalidating frames that
are overwritten by a compromised ECU, and (3) preventing
attacks that ﬂood the bus with frame transmissions. Attacks
that require physical access are outside their scope.
These transceivers are a promising approach to defending
against the diagnostic message and message overwrite attacks
in Table I as the transceivers would destroy any illegitimate
frames based on their IDs. As the loading phase in our
loading/ﬁring attack transmits a speciﬁc arbitration ID (0x0),
these transceivers would also detect an illegitimate ID from
the compromised ECU and raise an alarm. However, the two
attack alternatives (SOF and ACK attacks) do not produce an
arbitration ID and could not be detected by pure ID-based
ﬁltering concepts as demonstrated in Sec. VI.
206
Defenses at physical layer: Another approach for IDSes is to
directly access the physical layer, e.g. measuring bus voltages.
These defenses detect sudden changes over a series of CAN
frames (or even a single frame) by creating a proﬁle of the
expected voltages [10], [11], [45]. These works ﬁnd that each
ECU applies a unique voltage that is measurable across an
entire CAN frame. If an illegitimate transmitter attempts to
spoof a victim’s message, the voltage measured across the
frame could identify a potential attack.
This approach can detect
the message overwrite attack
because a single frame will start with two simultaneous trans-
mitters followed by only the overwriting compromised ECU; a
distinctive change in voltage for the rest of the frame indicates
an attack. However, in regard to physical-layer defenses that
measure voltage, CANnon does not require overwriting a frame
from the SOF onwards and, thus, prior work [45] would not
detect a sudden change in the voltage from the start of a single
data frame as demonstrated in Sec. VI.
B. Deceiving CANnon-aware defenses
We now discuss how CANnon could remain stealthy against
even future CANnon-aware defenses. We discuss defenses that
might seem appealing at a glance, but we will show that
this attack will likely require architectural countermeasures
discussed in Sec. VIII.
Tracking error interrupts at application layer: Up to now,
we have discussed how application-layer defenses that only
monitor messages do not detect CANnon. However, there is
another source of signals from the lower CAN stack layers:
error interrupts. We envision a CANnon-aware defense that
uses these interrupts to identify potentially malicious sources
of error. This defense tracks errors based on their frequency
and for which messages they occur during in an attempt to
ﬁnd a pattern representative of a shutdown attack. Existing
work [32] can detect when a shutdown occurs by tracking
error ﬂags, but it cannot determine if the errors were caused
maliciously or by legitimate bus faults. We now discuss a
couple modiﬁcations that similar work could implement to
detect a malicious attack. We also discuss how our adversary
can thwart those efforts by making it challenging for defenses
to detect CANnon while maintaining a low false positive rate:
1) Tracking number of errors per ID: One potential defense
is to track the number of errors that occur when a partic-
ular message ID is transmitted. However, our adversary
could use prior work [21] to identify all source IDs
from an ECU by simply monitoring the bus and tracking
message timestamps. Our adversary could then target all
IDs from a victim ECU, making an error seem consistent
across all transmissions and difﬁcult to differentiate from
a legitimate fault.
2) Checking for multiple errors in short
time: Another
defense is to check for multiple errors in a short amount
of time, which is an invariant of prior work [15]. While
the loading/ﬁring attack causes multiple errors in a
matter of milliseconds, an adversary can extend this
attack over a longer period of time. An active error
ﬂag will increment the victim error counter by eight;
to recover from an error, a successful transmission from
a victim will decrement the error counter by one. Our
adversary could launch an error ﬂag for one of every
seven successful transmissions from a victim, giving us
an effective increase of one for the transmit error count.
By repeating this attack 256 times, the adversary could
allow up to 1792 successful transmissions by a victim
and still succeed in a shutdown.
VIII. COUNTERMEASURES
As illustrated, CANnon-based attacks are stealthy against
existing security methods. Here, we describe some directions
for potential countermeasures. Since the attack relies on two
broad ideas, namely clock control and error exploitation, the
countermeasures described can be seen to prevent one of these
problems, i.e. prevent clock control or detect speciﬁc error
patterns or error transmitter patterns.
Detecting bit-wise voltage spikes: Overwriting a message
causes a sudden voltage change in the dominant bit. Thus,
one approach to detect such an attack is tracking per-bit
voltages at the physical layer. Changes in the middle of mes-
sage transmissions could indicate potential adversary activity.
However, since random faults or genuine errors ﬂags can cause
similar behaviour, such a method would require additional
identiﬁcation of patterns in the voltage changes, e.g. behaviour
periodicity. Some recent work that uses transition characteris-
tics for network ﬁngerprinting [33] could be modiﬁed in this
direction.
Forced clear of transmit buffers: As observed in Sec. III,
the ability to resume a message transmission is a key factor
for successfully exploiting the controller. Thus,
the attack
can simply be prevented by disabling such behavior,
i.e.
resetting/clearing all buffers upon clock gating. Such a coun-
termeasure allows the ﬂexibility of being deployed at either the
hardware or software level. If hardware changes are permitted,
this approach can be achieved by designing reset logic based
on the clock signal. In software, this approach can be achieved
by ﬂushing the peripheral transmit buffers upon clock stop.
A modiﬁcation of this idea for safety is present in SPC58,
whereby a clock stop request
is completed based on the
feedback from the CAN peripheral.
On-chip power analysis: The automotive industry takes
another approach to protecting their ECUs from remote ad-
versaries: host-based IDSes [12]. One host-based detection
method for CANnon could be a separate secure chip that
monitors the power usage of the MCU. Since disabling
the peripheral clock induces a drop in power, a host-based
IDS could detect potentially malicious actions. This approach
should operate outside of the MCU and could include logic
to identify when power drops are not expected, e.g. while in
motion, while vehicle not asleep, etc.
Removal of CAN peripheral clock gating: The main feature
that enables CANnon in modern MCUs is peripheral clock gat-
ing. Rather than offering a peripheral for CAN, modern MCUs
could simply utilize a separate always-on clock domain for the
207
CAN peripheral or require standalone CAN controllers, which
receive a clock signal from a separate oscillator. Assuming the
other peripherals do not share this vulnerability, they could
remain unchanged by removing clock gating for just CAN.
IX. OTHER RELATED WORK
Side-channel attacks and fault attacks: CANnon has some
similarity to fault attacks on cryptographic algorithm imple-
mentations available in secure processors, which can com-
pletely break the security of secure systems [47]–[49]. Fault
attacks [47], [48] are a subset of side-channel attacks, which
disrupt normal execution of a (software or hardware) process
to compromise a system. Fault attacks typically require phys-
ical access to the device under attack to successfully induce a
fault. To our knowledge, the RowHammer attack [50] is the
only other attack that is able to successfully produce a remote
fault. In contrast, CANnon remotely induces “faults” through
software-only access to the peripheral clock API of unaltered
automotive MCUs.
Security API attacks: Attacks on secure embedded pro-
cessor APIs were ﬁrst discovered in prior work [51] (see
other work [52] for an up-to-date survey). The idea behind
these attacks was “to present valid commands to the security
processor, but in an unexpected sequence” in such a way that
“it is possible to obtain results that break the security policy
envisioned by its designer” [51]. Although similar in aim, our
work is fundamentally different as CANnon takes advantage
of low-level clock-control APIs in current automotive MCUs
that are used to save energy and improve performance (not
input secure key material). CANnon does not target a secure
processor either, and it focuses in subverting an interface not
externally available to a human subject as in other work [51]
(i.e. in CANnon, an attacker must ﬁrst compromise the MCU
and gain control of its software).
X. DISCUSSION
In this work, we introduced CANnon, a novel attack method
to exploit the benign clock gating mechanism in automotive
MCUs for exerting arbitrary control over the CAN bus. We
illustrated several methods to achieve precise clock control and
use it to cause remote shutdown attacks. Despite focusing on a
single example class here, we envisage that such a methodol-
ogy can be used for other powerful attacks. With the increasing