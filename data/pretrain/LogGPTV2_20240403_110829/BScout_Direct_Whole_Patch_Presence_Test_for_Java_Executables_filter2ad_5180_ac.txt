Certainly! Here is a more polished and coherent version of the provided text:

---

Fortunately, in our evaluation, we did not encounter any Java patches that contained only out-of-method changes. Additionally, we excluded code comments from the patch scope. Generally, all changes in source code can be represented as additions and deletions. However, to fully capture patching behaviors, we introduce modifications as a new category of changes.

### Representation of Code Changes
All changes in the source code can be categorized into additions, deletions, and modifications. If a line has a higher match similarity in the post-patch source code map compared to the pre-patch source code map, we consider this modification to be applied in the target bytecode.

### Final Patch Presence Determination
The final result is determined based on the presence status of every patch-changed line. Since a patch may contain multiple changed lines, and it is not feasible to prioritize one line over another, we account for all of them (except those filtered by the Patch Analyzer) to make a decision. To reflect the significance of each patch-changed line, we use the number of features extracted from each line as its weight. The patch presence ratio is calculated from the sum of the weights for all matched patch-changed lines, and a threshold (TPatchPresenceRatio) is used to decide whether a patch is present or not.

### Algorithm 1: Patch Presence Test
**Input:**
- Ppre: Pre-patch source code
- Ppost: Post-patch source code
- Psmali: Smali code
- Patch: Patch-changed lines

**Output:**
- Patch presence result

1. **Line2lineMappre** ← Match(Ppre, Psmali)
2. **Line2lineMappost** ← Match(Ppost, Psmali)
3. **found** ← 0
4. **total** ← 0
5. **for each line ∈ Patch do**
   - **if isDeletion(line) then**
     - total ← total + FeaturesIn(line)
   - **else if isAddition(line) then**
     - if line is matched in Line2lineMappost then
       - found ← found + FeaturesIn(line)
   - **else if isModification(line) then**
     - simpost ← sim_lookup(Line2lineMappost, line)
     - simpre ← sim_lookup(Line2lineMappre, line)
     - if simpost > simpre then
       - found ← found + FeaturesIn(line)
   - **end if**
6. **end for**
7. **if found/total > TPatchPresenceRatio then**
   - return true
8. **else**
   - return false
9. **end if**

### Heuristic-Based Approach for Modification Recognition
To recognize modifications, we adopt a heuristic-based approach. We consider adjacent deletion and addition lines with similar features as a single modification line. Specifically, when the similarity between two adjacent deletion and addition lines exceeds a threshold (TLineSimilarity), we treat these lines as a single modification. This approach can be extended to several consecutive lines to identify blocks of continuous modifications.

### Patch Presence Checker
This module uses cross-layer line-level correlative analysis and patch analysis results to make a final judgment on patch presence. The key idea is inspired by source-code-level patch presence tests, which check how many patch-changed lines can be found in the source code. Similarly, we test the presence of patches in Java executables by checking how many patch-changed lines can be recognized in the target.

### Different Strategies for Different Types of Changes
- **Line Addition:** To test the presence of an addition line, we query the line-to-line map between the post-patch source code and the target bytecode. If the line is matched, it is considered present.
- **Line Deletion:** To test the presence of a deletion line, we query the line-to-line map between the pre-patch source code and the target bytecode. If the line is not matched, we assume the deletion has been applied.
- **Line Modification:** Testing the presence of a modification line is more complex. We need to query both the line-to-line maps between the pre-patch/post-patch source code and the target bytecode.

### Evaluation
We implemented a prototype of BSCOUT using 9,290 LOC of Java code. We used Spoon [39] to parse Java source code, dexlib [7] to parse smali code, and baksmali [15] to transform Java executables into smali format for further analysis. BSCOUT also supports traditional stack-based Java bytecode [9] by transforming it into DEX bytecode [6] with the help of dx [3].

### Results of BSCOUT
We evaluated BSCOUT with real-world programs and security patches. Although FIBER [46] is the most relevant work, it targets C/C++ binaries and does not support Java executables. Therefore, we could not use it as a baseline. BSCOUT is, to the best of our knowledge, the first tool for patch presence testing on Java executables.

### Experiments
We conducted experiments on two versions of BSCOUT:
- **BSCOUT:** Utilizes line number information (if present) in Java executables.
- **BSCOUT**: Does not consider line number information, even if it is present.

This setup helps us understand BSCOUT's effectiveness in the worst-case scenario where all line number information is stripped away. The evaluation was performed with two representative CVE datasets: Android framework vulnerabilities and Java library vulnerabilities.

#### 4.1.1 Android Framework Vulnerabilities
We selected 150 CVEs from the Android Security Bulletin, ranging from August 2015 to July 2019. The affected Android versions are listed in Appendix A.

**Parameter Setting:**
- **TLineSimilarity:** Set to 0.7
- **TPatchPresenceRatio:** Set to 0.6

**Ground Truth:**
- We downloaded 15 Android ROMs from 6 vendors (Dataset_ROM_GT) and manually validated the patch status for each CVE. The results were verified by two security experts.

**Results:**
- BSCOUT achieved 100% accuracy, demonstrating its effectiveness in recognizing fine-grained code changes at the test target.
- BSCOUT exhibited no false positives.
- BSCOUT reported 31 false-negative cases, which were due to incorrect mappings between Java source code lines and smali instructions. These mappings could be improved by incorporating control flow-level features in future work.

**Efficiency:**
- The average test time for each CVE was 0.18 seconds for BSCOUT and 13.9 seconds for BSCOUT.

#### 4.1.2 Java Library Vulnerabilities
Java libraries are widely used in various applications, making it crucial to check for known vulnerabilities. Thus, we also evaluated BSCOUT on Java library vulnerabilities.

---

I hope this version is clearer and more professional. Let me know if you need any further adjustments!