title:Merging Network Measurement with Data Transport
author:Pavlos Papageorgiou and
Michael Hicks
Merging Network Measurement with
Data Transport
Pavlos Papageorgiou and Michael Hicks
University of Maryland
PI:EMAIL
PI:EMAIL
Abstract. The tasks of measurement and data transport are often
treated independently, but we believe there are beneﬁts to bringing them
together. This paper proposes the simple idea of a transport agent to en-
capsulate useful data within probe packets in place of useless padding.
1
Introduction
Overlay networks have become a popular vehicle for introducing network ser-
vices. Oftentimes, to drive its services, an overlay network infers characteristics
of the network via application-layer probes. For example, nodes in RON [1],
Detour [2], and Pastry [3] regularly ping their neighbors to check availability
and/or measure latency. MediaNet [4] uses available bandwidth [5] estimations
to determine along which paths to forward media streams.
For the most part, the measurement and transport aspects of overlay networks
are treated independently. The measurement service is a black box used by the over-
lay to make decisions. But the fact that measurement traﬃc is in addition to trans-
port traﬃc imposes an extra burden on the network. While not a problem for a sin-
gle overlay under normal conditions, as congestion and/or the number of overlay
networks in use increases, measurement traﬃc begins to inﬂuence the total traﬃc.
To reduce the overhead of measurement traﬃc, we propose the following sim-
ple idea: merge the task of network measurement with the task of data transport.
In many cases, measurement traﬃc consists largely of null padding just meant to
consume bandwidth for timing purposes. This is the case when measuring avail-
able bandwidth, for example [5]. To avoid this wasted bandwidth, the transport
layer can replace null padding with user payloads available from other streams.
While others have proposed cooperative measurement services [6, 7, 8], or
observed that network characteristics can be inferred passively [9], no one has
proposed merging the tasks of measurement and transport. In this extended
abstract, we outline the design and preliminary implementation of a transport
agent that provides TCP and UDP-like transport along with an enhanced API
for sending measurement probes.
2 Probe-Aware Transport Agent
The two goals of our probe-aware transport agent are: (i) to minimize the band-
width that measurement tools consume and (ii) to allow probe traﬃc to be
C. Dovrolis (Ed.): PAM 2005, LNCS 3431, pp. 368–371, 2005.
c(cid:1) Springer-Verlag Berlin Heidelberg 2005
Merging Network Measurement with Data Transport
369
responsive to congestion conditions. It is desirable that the API and the end-to-
end semantics of user traﬃc (TCP and UDP) remain intact so that no changes
are required to existing applications. Only measurement tools should be required
to use the socket API extensions to set encapsulation and dispatch policy for
their probes.
The challenge is how to maintain the same measurement accuracy while de-
creasing the probe bandwidth. The critical observation is that the null padding,
which dominates probe packets, can be reused without sacriﬁcing the tool’s ac-
curacy. The actual pad bytes are irrelevant to the measurement algorithm which
means that probe packets can encapsulate user traﬃc if it is available. This ap-
proach satisﬁes the ﬁrst goal. To address the second goal, we observe that probing
schemes usually do not care about the absolute timing of probe packets but only
about the relative timing between packets. Therefore, it should be possible to
brieﬂy delay certain probe packets without degrading the tool’s accuracy. For
example, the transport agent can delay the ﬁrst packet of a packet train as long
as it preserves the inter-packet timing and records the actual departure times.
There is an important trade-oﬀ between bandwidth eﬃciency and the time-
liness of probe/user packet transmission. The bandwidth optimization achieved
depends directly on how often probes encapsulate user traﬃc. Congestion con-
ditions will increase this frequency, since it is more likely that user traﬃc will
be buﬀered and available when probe packets are sent. Thus, probes consume
less bandwidth as congestion increases. To improve the optimization under non-
congested conditions, we can brieﬂy delay certain probe packets, as directed by
the measurement tool, when no user data is available. Conversely, we can delay
a user packet when the application would allow it. For example, TCP already
delays data to send it in larger chunks.
Socket API Extensions: Our probe-aware transport API extends the BSD-style
socket API to deﬁne additional ﬂags that aﬀect the way packets are sent, either
per-packet or per-session; these ﬂags are presented in Table 1.
Probe packets are sent with the PAD PKT [x ] ﬂag enabled. This states that
the provided data should be sent with an additional x bytes of padding. Thus, if a
probe tool wants to send d bytes of data (i.e., the byte content it wants delivered
to the peer tool, such as control information) with x bytes of padding, it would
pass only the d bytes to send, along with the ﬂag PAD PKT [x ]. The transport
agent will transport a packet of size d + x bytes, and will attempt to use the
x bytes portion of the packet to encapsulate user traﬃc. When the packet is
actually sent, it is timestamped by the transport agent, and timestamped again
when it is received. A separate function is used by tools to acquire the times.
The DELAY [t ] ﬂag can be used to delay the packet up to t ms, to increase the
chances of encapsulating user data; otherwise the packet is queued for immediate
departure. Note that this ﬂag can be applied to either user or probe traﬃc. For
example, to send a probe that waits up to 100 ms would require ﬂags PAD PKT[x ]
| DELAY [100].
370
P. Papageorgiou and M. Hicks
Table 1. Probe-Aware Transport API ﬂags
send ﬂags
PAD PKT [s]
DELAY [t]
PKT FOLLOWS
Probe packet that requires s bytes padding.
Packet can be delayed up to t ms.
This packet is not the last packet of a train (others follow).
SINGLE PKT
WAIT CONGESTION Packets under congestion control.
Packets should not be encapsulated.
per-session ﬂags
Socket Interface
End-to-End Transport Session
Probes with 
user traffic
encapsulated
Probe with no 
user traffic
encapsulated
Scheduler/Multiplexer
timestamp
s
n
o
i
t
a
c
i
l
p
p
a
standard STREAM
standard STREAM
standard DGRAM
standard DGRAM
enhanced DGRAM* (pkt pair)
PP
P P
enhanced DGRAM*
P
P
s
e
b
o
r
p
Packets delivered to
applications as usual
B1
B2
D1
D2
P1
P2
P
P
P
P
To Peer
IP Endpoint
PP
PP
Congestion
Control
send
receive
Non-encapsulated
user traffic
P
P
P
From Peer
IP Endpoint
Encapsulation is
transparent to the
probe recipients
P
P
P
timestamp
Demultiplexer
Fig. 1. Overview of a probe-aware transport agent
Finally, the PKT FOLLOWS ﬂag is used to indicate that the packet is part of a
train, and should not be sent until all packets are available (i.e., a subsequent
packet is submitted without this ﬂag). Thus, the entire train may be delayed (by
the ﬁrst packet), but all packets in the train are sent back-to-back.
We also provide two session-level ﬂags. If for some reason encapsulation
should be avoided, users can establish sessions using the ﬂag SINGLE PACKET.
Probe packets sent in such a session will not encapsulate other packets, and user
packets will not be encapsulated by probes. Thus, our transport API semantics
reverts to the standard semantics when this ﬂag is set.
Additionally, we provide the ﬂag WAIT CONGESTION to subject sessions to con-
gestion control. By default, STREAM sessions have this ﬂag enabled (to conform
to TCP semantics), but DGRAM sessions can specify it as well. This allows probe
packets, which are often sent as datagrams, to be accounted for in the congestion
window. However, the implementation is non-standard in that we must consider
the DELAY and PKT FOLLOWS ﬂags when doing congestion accounting.
Figure 1 depicts our preliminary probe-aware transport agent which exchanges
traﬃc between two IP endpoints. The transport agent would sit normally on top
of IP; our current implementation tunnels over UDP. Internally, the transport
agent multiplexes user and probe streams into one packet stream with uniform
Merging Network Measurement with Data Transport
371
congestion control, as in the Congestion Manager [10], and encapsulates user
traﬃc in probe packets, unless explicitly disallowed by SINGLE PACKET ﬂags.
For example, consider a measurement tool (session P2 in Figure 1) that pe-
riodically sends a probe packet consisting of 10 bytes of control data and 990
bytes of padding. Before the transport agent sends the packet out, it attempts
to ﬁnd user data to ﬁll the 990 available bytes from candidate TCP sessions B1,
B2 and UDP packet streams D1, D2. If any of them have bytes waiting in their
buﬀers, then up to 990 bytes of user traﬃc will be encapsulated in the probe.
We have run preliminary experiments with real traﬃc on Emulab1 that
demonstrated bandwidth savings up to 95% during congestion conditions, i.e.,
most of the probe traﬃc piggy-backed on top of user traﬃc during that period.
We are in the process of completing a fully functional implementation and mod-
ifying a number of measurement tools to run on top of our transport agent. We
intend to run wide-area experiments with real traﬃc on PlanetLab2 and continue
our performance measurements in the controlled setting of Emulab.
References
1. Andersen, D.G., Balakrishnan, H., Kaashoek, K., Morris, R.: Resilient overlay
networks. In: SOSP. (2001)
2. Savage, S., Collins, A., Hoﬀman, E., Snell, J., Anderson, T.: The end-to-end eﬀects
of Internet path selection. In: SIGCOMM. (1999)
3. Rowstron, A., Druschel, P.: Pastry: Scalable, distributed object location and rout-
ing for large-scale peer-to-peer systems. In: IFIP/ACM International Conference
on Distributed Systems Platforms (Middleware). (2001) 329–350
4. Hicks, M., Nagarajan, A., van Renesse, R.: User-speciﬁed adaptive scheduling
in a streaming media network. In: IEEE Conference on Open Architectures and
Network Programming. (2003)
5. Prasad, R., Murray, M., Dovrolis, C., Claﬀy, K.: Bandwidth estimation: metrics,
measurement, techniques, and tools. IEEE Network 17 (2003)
6. Nakao, A., Peterson, L., Bavier, A.: A Routing Underlay for Overlay Networks.
In: SIGCOMM. (2003)
7. Srinivasan, S., Zegura, E.: Network Measurement as a Cooperative Enterprise. In:
International Workshop on Peer-to-Peer Systems. (2002)
8. Danalis, A., Dovrolis, C.: ANEMOS: An Automomous NEtwork MOnitoring Sys-
tem. In: Passive and Active Measurement Workshop. (2003)
9. Paxson, V.: Automated Packet Trace Analysis of TCP Implementations. In: ACM
SIGCOMM. (1997)
10. Balakrishnan, H., Rahul, H.S., Seshan, S.: An Integrated Congestion Management
Architecture for Internet Hosts. In: ACM SIGCOMM. (1999)
1
2
http://www.emulab.net
http://www.planet-lab.org