behavior per Facebook’s guidelines on using SSO with existing login
systems [11]. While the lack of account merging may appear as a
functionality issue, creating two separate accounts can also lead
to more serious security problems such as ransom-type account
hijacking [6] where attackers take control of victims’ data due to
misconfigurations in how the accounts are keyed internally by RPs.
Revocation is offered by IdPs and allows users to request the
revocation of the access tokens issued to an RP. While the RP will
not be able to use the revoked access tokens to communicate with
the IdP, the RP can still continue authenticating the user using the
cookies that were set during the SSO workflow (step 5 in Figure 1).
C. Account and Session Management
We consider several policies as part of our RP auditing process
for testing RPs’ compliance with account management and
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:04 UTC from IEEE Xplore.  Restrictions apply. 
1775
Identity ProviderRelying Partiesvisits RPuses tokens or RP cookiesredirects to IdPuses IdP cookies or passwordredirects to RP with tokenssets RP cookies153426authentication systems. The account management guidelines that we
incorporate in our assessments originate from IdPs (e.g., Facebook)
and outline best practices on how RPs should handle various
scenarios, e.g, for conflict-resolution when multiple authentication
pathways exist. We also select a set of authentication-related recom-
mendations from the security community (i.e., OWASP) regarding
session management in websites that support authentication. Here,
we provide an overview of these recommendations.
Offering multiple authentication pathways may cause conflicts
which can generally occur in two different ways: (1) a user first cre-
ates an account with an RP using a username and password and later
decides to login over SSO or link their IdP account to the RP account
to be able to perform IdP-related actions, and (2) a user first logs in
with an IdP and later decides to add a username and password to the
RP. In the first scenario, Facebook’s guidelines suggest merging the
account information based on the email address being the same, and
adding the IdP account information in a separate database table [11].
When the email addresses are different (e.g., the RP account was
created using PI:EMAIL and the IdP account with
PI:EMAIL), Facebook suggests offering the user an
explicit account merging option. In the second scenario, Facebook
suggests verifying the supplied email before requesting the user to set
a password. We note that both resolutions point to an explicit merg-
ing policy: assuming an account belongs to the same user, taking
different authentication paths should not result in separate accounts.
Among the several recommendations and mandates provided
by OWASP for securing session management [12], we focus on
session expiration as it is directly applicable to our study’s focus,
i.e, the additional complexities introduced by SSO support. OWASP
categorizes automatic session expiration into idle and absolute
timeouts. The idle timeout refers to the amount of time that a
session remains active for, when there is no activity. However, since
our threat model focuses on session hijacking, this does not limit
the attacker’s access to a user account as they can thwart such a
defense by keeping the session active. For the absolute timeout,
while OWASP does not specify an exact time range as it depends on
the web app’s functionality, they make it clear that the server side’s
expiration time must precede the client side’s (cookie) expiration. In
addition to the automatic session expiration, OWASP also advocates
for offering a manual session expiration option via the logout button.
While there is no specific time defined for cookie expiration, we
argue that the cookie expiration in RPs should at least resemble token
expiration in IdPs. Facebook’s short-lived tokens have a lifetime of
an hour and long-lived tokens of 60 days [10]. As such, we consider
three primary policies for evaluating session management:
1)
3)
2)
Cookies that allow access to RP accounts for more than
60 days after the initial login are non-compliant.
Session expiration must be done server-side. Assuming
that the server-side timer is in sync with the client-side’s
cookie expiration date, prolonging the client-side cookie
expiration should not affect the server-side timer.
If a logout button is offered, it must invalidate session
cookies and prevent access unless re-authentication occurs.
Threat Model. We focus on RPs that offer account registration
through SSO as well as via local credentials. Our main objective is to
design a tool that audits RPs regarding their adoption and correctness
of defensive account and session management mechanisms, as well
as policies for mitigating the impact and coverage of an IdP-account
compromise, such as offering short-term sessions, frequent access-
token validation, and re-authentication enforcement. For our analysis,
Fig. 2: Components of our SAAT framework.
our main assumption is that the attacker has compromised IdP
accounts at the session level and subsequently targets the users’ RP
accounts. This encompasses several attack vectors [13], [14], [12]
of varying complexity and scalability, all of which are captured
by our threat model because our attack is agnostic to the method
through which the IdP session was compromised. For instance, prior
academic work on cookie hijacking has demonstrated that incom-
plete cookie protections are common across popular websites [8],
[15], [16]. While various cookie-hijacking protections exist, such as
encrypting traffic and using Secure and httpOnly flags, a
recent large-scale study on almost 25K websites found that 50% do
not sufficiently protect authentication cookies [17]. Cookie hijacking
attacks that enable complete IdP account takeover may require
attackers to sniff the users’ mobile traffic [6] (which is inherently
less scalable), or can be the result of software bugs that allow large-
scale cookie harvesting (e.g., as was the case for the stolen Facebook
cookies of 50 million users [9]). More recently, Google has detected
a surge in malware-driven pass-the-cookie attacks, which enabled
the compromise of high-value YouTube accounts; in fact, Google’s
Threat Analysis Group [18] reported the “resurgence as a top
security risk” of these attacks, signifying the prevalence and threat of
cookie-stealing attacks. However, it is important to note that session-
hijacking attacks are typically more complex and smaller scale
compared to more widespread account compromising attacks (e.g.,
stealing credentials through phishing). Nonetheless, while we focus
on session-hijacking attacks, a subset of our experimental findings
(e.g., account merging errors, cookie expiration issues, access revoca-
tion and session invalidation flaws) also apply to phishing attackers.
III. SYSTEM OVERVIEW
Here we present an overview of our framework for auditing
RPs. Our framework consists of two main components; an account
creation engine and an auditing pipeline, as shown in Figure 2.
While our implementation focuses on Facebook as the IdP, we
manually verify our approach for Google and Apple in §IV-D.
A. Automated Account Registration
The automated account creation component of our framework is
built upon Puppeteer [19] for orchestrating our browser automation.
Registration pages. We combine two strategies for finding
login pages. First, we search for the RP’s registration page using
multiple search engines (startpage, bing, duckduckgo)
and select the top three results based on a majority vote. Second,
we test common paths (i.e., /register, /signup, /login,
/signin, /account) that were not in the search results. Finally,
we filter out unreachable pages (e.g., that return a 404 status).
Registration forms. Our crawler visits the registration pages
and locates the sign up section by identifying all  ele-
ments looking for sign up forms using keyword matching. If our
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:04 UTC from IEEE Xplore.  Restrictions apply. 
1776
AuditingPipelineLoginRevokeSSO DetectionIDPControllerApp CollectorNotificationCollectorApp RemoverRegistrationSolverReCAPTCHAHarvesterEmail/SMSverifierForm HandlerState DetectionRegistersystem finds a form element but fails to match any keywords, it
selects that form element if and only if that is the only form element
in the page and it does not have any search or login related keywords.
While this approach may not detect form-less sign up pages as
opposed to searching for all relevant inputs, we opt for this approach
as it minimizes false positives for pages where the login and sign up
sections are included on one page. If the crawler fails to detect forms,
it looks for potential links that point to an account creation page and
follows them. This is particularly useful in websites whose login and
registration URLs are indistinguishable, and single-page applications
where sign up forms appear upon interaction. After locating the
forms, we select all non-hidden  fields within the forms
and fill them out with random information and check all checkboxes.
This initial process allows us to detect dynamically created input ele-
ments that will only appear depending on whether other inputs have
been filled (e.g., a password confirmation field). We then record all
visible inputs, identify the type of personal information required and
add them in the corresponding input fields. While we apply a sim-
ilar method to  and 
fields, if we cannot identify the type of information needed we
select an option randomly. For each type of input, we have a set of
possible values in case some of them are not accepted by the website.
We also take the pattern attribute into account and select the
values that match the pattern. For instance, for password inputs, if our
password does not match the pattern, we generate a new one using
RandExp [20]. Finally, we check for potential invalid inputs by
searching for aria-invalid attributes, the :invalid CSS
pseudo-class, and “error” keywords in the input elements; we try
variations of the information until one is accepted. To avoid getting
stuck at this phase of our workflow, we need to set an appropriate
threshold for this process: we first check for the invalid inputs and
if none are found we try submitting the form; if it fails, we check
for invalid inputs again. This approach covers both cases of invalid
inputs that appear immediately after typing and ones that only get
flagged during the submission. We limit the number of trials and the
navigation to two and three attempts respectively. The navigation
threshold allows us to also handle multi page/step registration forms.
Email/SMS activation. Some websites require activation via
email or SMS after submitting the forms, to complete account
registration. We use Gmail’s API [21] for retrieving the latest emails
and filter them based on the website’s domain and the existence of
verification-related keywords. We also look for verification/activa-
tion keywords and numbers that can be used as activation codes. To
support SMS verification, we use Twilio’s [22] SMS API and follow
the same code extraction process for locating potential verification
codes in SMS texts. We listen for incoming emails and SMS
messages for 15 seconds after the form is submitted. Once we receive
a code, we submit it to complete the registration. If neither an email
or an SMS is received, we assume that the website does not require
additional verification and the account has been successfully created.
State changes and detection. Our account creation and
auditing flows primarily rely on correctly distinguishing between
an account’s logged in and logged out states. For our auditing
process, we consider an event as a state-changing transition if
sending two equal HTTP requests, where only one of them carries
authentication cookies, results in two different responses. Since web
pages can contain dynamic content (e.g., advertisements), we use
unique identifiers that belong to the user for detecting differences
in the responses. Additionally, while many web pages could be
used for detecting state, we have found that visiting the login page
is a reliable indicator for detecting states. Every time we need
to determine a page’s state, our system visits the login page in
a separate tab (all storage is shared between the two pages) and
checks whether the login page contains indicators such as a login
form or unique identifiable information that points to the user.
CAPTCHAs. Websites often rely on CAPTCHA challenges
as a means of preventing automated account creation [17]. We
draw inspiration from prior studies [23], [24] and use Wit.ai’s [25]
speech-to-text API to implement a solver for the audio challenges
presented by Google ReCAPTCHAs v2. Our solver resides on
a remote web server for bypassing rate limiting restrictions by
funnelling requests through multiple proxies and different user
agents. Before submitting filled-out registration forms, we look for
instances of ReCAPTCHA v2; if it exists we extract its site-key
and send it to our solver. The solver then completes an audio
challenge and sends the corresponding token back to the crawler.
The token is then submitted along with the registration form. In
our initial implementation, we adopted common anti-bot-detection
practices such as overwriting navigator.webdriver or
spoofing navigator.plugins [26]. However, due to the
cat-and-mouse nature of these evasion techniques, eventually
we resorted to using the third-party package puppeteer-
extra-plugin-stealth [27], which frequently gets updated
with the latest evasion techniques. While this could potentially
violate RPs’ terms of service, automation is a widely established
common practice in web security research, and incorporating
anti-bot-detection features is becoming increasingly necessary for
realistic experimentation [28]. During our experiments, we also
noticed that even then some websites were able to detect automation
and displayed blank pages. We traced the problem back to code
executed from doubleclick.com. As such, we included a rule
in our main crawler for blocking doubleclick.com requests.
B. Single Sign-On Workflow
Single Sign-On detection. We leverage the browser’s Web
Accessibility API for identifying SSO support. The main goal of
this API is to expose an interface that can be used for assistive
technologies, as it exposes a semantic version of the user interface
and facilitates conveying important information across different
platforms, particularly for users with impairments. It is also often
used in automated testing and for UI automation in applications like
password managers [29]. We provide a code sample of a page with
HTML tags and its corresponding accessibility tree in Listings 1, 2
(Appendix). We use Chromium’s Accessibility API, which returns
a web page’s representation as a tree of objects, and traverse
the accessibility tree to look for nodes that contain SSO-related
information. Since Puppeteer’s accessibility tree does not directly
expose DOM nodes, we modify the Accessibility class to expose
each node’s unique identifier (BackendNodeId), which we use
for resolving the node that contains SSO information.
After detecting SSO support, we inject the IdP cookies into the
page and proceed with initiating the login process for the RP. We
then collect the following information about the deployment of SSO.
First, we log if the IdP requires the user to enter their credentials
and re-authenticate despite the presence of the session cookies.
This only occurs if the relying party explicitly asks the IdP to
re-authenticate users; this can be done through an optional parameter
in the SSO workflow. Second, we log if the IdP asks the user for
their permission. For instance, Facebook displays a “Continue as”
button and upon clicking, the authentication process succeeds and
the browser gets redirected back to the RP website. In addition
1777
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:04 UTC from IEEE Xplore.  Restrictions apply. 
Reg(SSO,EQ)/OK
Reg(SSO)/OK
Reg(Email)/Err
start
S0
Not Registered
S1
Reg w/SSO
(Acurrent←SSO)
S2
Registration Failed
Reg(Email)/OK
Reg(SSO,EQ)/OK
Reg(Email)/Err
Reg(Email)/Err
S3
Reg w/Email
(Acurrent←email)
Reg(SSO,NEQ)/OK
S4
Reg w/SSO
(Acurrent←SSO(cid:48))
Reg(SSO,EQ)/OK
Fig. 3: State machine model of RP account registration.
to the authentication method, we also collect the relying party’s
cookies, and its unique app_id which is assigned by the IdP.
IDPController. A critical dimension of our auditing workflow
is interacting with the IdP and observing the impact of IdP actions on
the RPs. The controller requires programmatic ability to authenticate
with the IdP, access to a list of logged-in RPs, and revoke RP access.
These functionalities are ubiquitously supported by popular IdPs,
and are handled by our Login and IDPController modules. While we
focus on Facebook, these actions can be generalized to other IdPs by
modifying the aforementioned modules. Specifically, the loginIDP
function should be modified to support the new IdP’s authentication
flow and the functions in IDPController should be tailored to the
specifics of the new IdP for obtaining a list of RPs and removing
RPs from the IdP. For instance, Facebook does not currently expose
a public API for interacting with RP apps. Instead of interacting
with Facebook through an orchestrated browser, we have reverse
engineered the communication between client and server and
extracted the required data for successfully querying Facebook
servers via direct HTTP POST requests. This allows us to speed
up the auditing process and is less dependent on Facebook’s UI and
any changes that would require a modification of our automation
actions. If Facebook changes its behavior or a new IdP has a
different implementation, we can obtain the data via UI interaction.
Facebook assigns RPs to three categories: active, removed,
and inactive. Using our approach, we can collect the apps in
all categories and also remove them from the active tab. Among
the app-related information, we obtain the install_time,
inactivation_time, removed_time, app_user_id,
permissions, and deletion_url attributes.
C. Auditing Workflow
To enable our collection of auditing tasks and testing procedures,
we model our framework’s actions and the ensuing state changes
as finite-state machines, which allows us to identify non-compliance
and violations of security guidelines and best practices.
Authentication paths and account merging. Our testing flow
identifies the different registration paths supported by the RP and
explores whether taking each path ends in a similar state in the same
account. Specifically, our system assesses whether signing up with