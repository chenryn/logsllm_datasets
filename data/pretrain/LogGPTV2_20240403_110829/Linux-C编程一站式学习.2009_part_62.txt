struct node {
typedef struct node *link;
#define
#ifndef 
depth(root));
int main()
void print_item(link p)
#include 
#include 
/*
/* main.c */
 bst.h
 则该节点的数据成员大于左子树所有节点的数据成员，
 order(
，Binary Search Tree）具有这样的性质：对于二叉树中的任意节点，
unsigned
BSTH
 BST_H
return 0;
destroy(root);
in_order(root)
unsigned
printf("%d", p->item);
post_
2
*
:(
(link
"binarytree.h"
atchar(
_order(root, print_item);
 char item;
，想一想单链表的递归定义应该怎么表述？请仿照本节的例子用
void
In
char
 print_item);
山。
in 
jbes
'in_seq,
且小于右子树所有节点的
，如果它有
---
## Page 505
subtree */
t
subtree
link delete(link t, unsigned char key)
subtree
link insert(link t, unsigned char key)
static void free_node(link p)
static link make_node(unsigned char item)
link search(link t, unsigned char key)
#include
#include
#include
/* bst.c
#endif
link
link search(link t, 1
is leaf node
 delete(link
else {
link 1
return t;
if
if
free(p);
*/
return t;
*
d
*
（!t)
(t->item >
（!t）
(t->item r
 return
return
 return
>I
>1
 = insert(t->r,
 unsigned char key);
 unsigned char key)
key)
key)
 make_node(key):
key)
key)
NULL;
 search(t->l,
/* replace t with the rightmost
t
free_node(t);
= NULL;
(t->1)
/* delete from left subtree */
char
insert
）{ /* if t has left
>1
key)
key);
key
 key);
 key);
key);
to left subtree */
 from right
505
---
## Page 506
#define
key);
void
#include
#include
void print_tree(link 
int
node
node
main()
fine
 print_item(link 
in
in left
printe
printf("%d",
6.
int
right
ceturn
￥
(t)
 subtree
(root)
subtree
root
printf("(）");
printf("(");
dad
orint_tree(
0；
else
1
rand(）% RANGE;
p->item);
*/
insert(root,
7
print_
printf("
t
t
t
(r
->item
or
一*
->1
->item 
replace
i++）
t->item);
("\n\n'
tree(
: t->r;
 has
roo
七
rand(）  RANGE);
ot);
 subtree
key);
t->item);
 p->l);
---
## Page 507
程序的运行结果可以用Greg Lee编写的The Tree
delete 86 in tree
$ ./a.out |
$./a.out
delete‘
delete 
delete
delete 86 in tree_
77 in tree
\tree(83(77(15()())())())
93 in tree
H
((()()6)(()((()()se)()st)L)8)
\tree(83(77(15()(35()()))())(86()(93()())))
\tree()
15 
15
15
77
77
35
83
93
93
T
86
一
93
转换成树形:
507
---
## Page 508
1.链表
delete 77 in tree
delete 83 in tree
delete 15 
8
in
tree
全国嵌入式人才培训基地
起始页
3.哈希表
8
---
## Page 509
如果用我们学过的各种数据结构来表示n个数据的集合，下表是search、insert和delete操作在平
3.哈希表 请点评
请读者自己编写程序构造这样一个哈希表，并实现search、insert和delete操作。
个好的哈希函数可以把数据比较均匀地分布到各个槽中，尽量避免碰撞。如果能把n个数据比较均
个槽的操作就是链表的插入操作。
数h(x)=×% 11，这样任意数据x都可以映射成0~10之间的一个数，就是槽的编号，将数据放入某
（Slot）。哪个数据应该放入哪个槽中由哈希函数决定，
如上图所示,
下图示意了哈希表（Hash Table）这种数据结构。
造哈希表时分配的槽也应该越多，所以n和m成正比这个假设是成立的。
是O(n/m),
地分布到m个槽中，每个糟里约有n/m个数据，
是0(1)，
果每个槽里至多只有一个数据,
L二
概念模型
图26.12.哈希表
 但有时会有多个数据被哈希函数映射到同一个槽中，
，首先分配一个指针数组，
 如果n和m的比是常数,
1257
570
，可以想像这种情况下search-
第 26 章链表、
 则时间复杂度仍然是O(1)。
6
，数组的每个元素是一个链表的头指针，
全国嵌入式人才培训基地
3.哈希表
6
，则search、insert和delete和操作的时间复杂度
二叉树和哈希表
在这个例子中我们简单地选取哈希函 
这称为碰撞（Collision）
一般来说，
，要处理的数据越多,
，每个链表称为一个槽
设计-
 509
---
## Page 510
要设计尽可能快的算法。
数量超过了nmemc则返回nmemc个元素。数组a和数组b的元素数量可能会很大（比如上百万个），需
元素且各不相同，
int b[］,
文字母组成，
1、统计一个文本文件中每个单词的出现次数，然后按出现次数排序并打印输出。单词由连续的英
习题 请点评
均情况下的时间复杂度比较。
2
二叉树
页
哈希表（n与槽数m成正比）
排序二叉树
数组
较
双向链表
size_t nmemb， int c[］，
，不区分大小写。
数据结构
，返回值表示交集中实际有多少个元素，如果交集中实际的元素
[0(1)
O(lgn)
O(n)
O(n),
全国嵌入式人才培训基地
有序数组折半查找是O(lgn)O(n)
起始页
上一级
 search
0(1)
O(lgn)
0(1)
insert delete
[o(n)
第27章本阶段总结
[0(1)
[o(lgn)
[0(1)
下一页
---
## Page 511
-print-search-dirs
-o outfile
-M和-MM
-Dmacro[=defn]
1、gcc
重新总结一遍。然后我们总结一下各种开发调试工具的用法。
在这一阶段我们又学习了很多新的语法规则，
第 27 章 本阶段总结 请点评
-0?
Ldir
-Idir
6
口
-C
L二
打印库文件的默认搜索路径，
outfile输出文件的文件名，详见第2节“main函数和启动例程"
输出".o文件：.c文件.h文件"这种形式的Makefile规则，-MM的输出不包括系统头文件，
dir是库文件所在的目录，详见第3节“静态库"
dir是头文件所在的目录，详见第2.2节“头文件"
各种编译优化选项，详见第6 节“volatile限定符"
在gdb调试和objdump反汇编时要用到这些信息，
在生成的目标文件中添加调试信息，
只做预处理而不编译，cpp命令也可以达到同样的效果，
定义一个宏，
编译生成目标文件（Relocatable），详见第2节“main函数和启动例程"
见第4节“自动处理头文件的依赖关系”
，详见第3节“条件预处理指示"
，详见第3节“静态库"
全国嵌入式人才培训基地
部分Ⅱ. C语言本质
第27章本阶段总结
所谓调试信息就是源代码和指令之间的对应关系，
首先读者应该回到第 13章 本阶段总结把那些知识点
，详见第1节“单步执行和跟踪函数调用"
详见第2.1节“函数式宏定义"
详
下一页
---
## Page 512
3.哈希表
3、其它开发调试工具
2、gdb 
-Wl,options 
-Wall
-V
8． nm，查看符号表，用法详见第2节“main函数和启动例程"。
7．ranlib，给ar打包的静态库建索引，用法详见第3节“静态库"
6．ar，把目标文件打包成静态库，用法详见第3节“静态库”。
4.objdump,
3．readelf，读ELF文件信息，用法详见第5.1节“目标文件"
4.在第6 节“指向指针的指针与指针数组"提到了用gdb调试时如何给程序提供命令行参数。
3．如果一个程序由多个.c文件编译链接而成，
2．在第1节“函数调用"提到了 gdb的指令级调试和反汇编命令。
1．在第 10 章 gdb集中介绍了 gdb的基本命令和调试方法。
5.
2.
1.as，
hexdump，以十六进制或ASCIl码显示一个文件，用法详见第5.1节“目标文件”。
ld,
options是传递给链接器的选项，详见第4 节“共享库"
打印所有的警告信息，详见第4节“第一个程序”
本，
呢？在第1节“多目标文件的链接"有介绍。
打印详细的编译链接过程，详见第2节“main函数和启动例程"。
编译生成汇编代码，详见第2节“main函数和启动例程"
详见第1节“多目标文件的链接”。
链接器，
汇编器，
显示目标文件中的信息，本书主要用它做反汇编,
用法详见例18.1“最简单的汇编程序"
用法详见例18.1“最简单的汇编程序"
全国嵌入式人才培训基地
起始页
，用gdb调试时如何定位某个源文件中的某一行代码
用--verbose选项可以显示默认链接脚
用法详见第5.1节“目标文件"
部分IIl. Linux系统编程
下一页
---
## Page 513
30.进程
29.文件系统
28.文件与I/O
帐Ⅲ
部分IⅢl.Linux系统编程
上一页
3.进程控制
2.环境变量
1.引言
3. VFS
2. ext2文件系统
1. 引言
8. mmap
5. Iseek
2. C标准I/O库函数与Unbuffered I/O函数
+
1.汇编程序的Hello world
read/write