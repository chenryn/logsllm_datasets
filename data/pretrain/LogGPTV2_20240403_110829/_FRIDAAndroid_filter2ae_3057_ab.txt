        });
    });
再次关闭任何正在运行的UnCrackable2实例，并再次在frida的帮助下启动它。  
等到app启动，frida在控制台中显示Hooking calls…然后按OK。你应该得到这样的信息。  
该应用程序不再退出，我们可以输入一个字符串。
但是我们应该在这里输入什么呢？看看MainActivity。
    this.m = new CodeCheck();
    [...]
    //in method: public void verify
    if (this.m.a(string)) {
                Dialog.setTitle((CharSequence)"Success!");
                Dialog.setMessage((CharSequence)"This is the correct secret.");
    }
这是CodeCheck类。
    package sg.vantagepoint.uncrackable2;
    public class CodeCheck {
        private native boolean bar(byte[] var1);
        public boolean a(String string) {
            return this.bar(string.getBytes()); //Call to a native function
        }
    }
我们注意到输入的字符串被传递给了一个native方法bar。同样，我们在libfoo.so中找到了这个函数。使用radare2寻找这个函数的地址并反汇编它。
反汇编代码中有一些字符串比较操作，有一个有趣的明文字符串Thanks for all
t。输入这个字符串，但是它不起作用。看看地址0x000010d8处的反汇编代码。
这里有一个eax和0x17的比较，如果不相同的话strncmp函数不会被调用。我们同时注意到0x17是strncmp的一个参数。
464位的linux中函数的前6个参数通过寄存器传递，前3个寄存器分别是RDI、
RSI和RDX。所以strncmp函数将比较0x17=23个字符。可以推断，输入的字符串的长度应该是23。让我们尝试hook
strncmp，并打印出它的参数。如果你这样做，你会发现strncmp被调用了很多次，我们需要进一步限制输出。  
    var strncmp = undefined;
    imports = Module.enumerateImportsSync("libfoo.so");
    for(i = 0; i < imports.length; i++) {
    if(imports[i].name == "strncmp") {
            strncmp = imports[i].address;
            break;
        }
    }
    Interceptor.attach(strncmp, {
                onEnter: function (args) {
                   if(args[2].toInt32() == 23 && Memory.readUtf8String(args[0],23) == "01234567890123456789012") {
                        console.log("[*] Secret string at " + args[1] + ": " + Memory.readUtf8String(args[1],23));
                   }
                }
    });
1.该脚本调用Module.enumerateImportsSync以从libfoo.so中获取有关导入信息的对象数组。我们遍历这个数组，直到找到strncmp并检索其地址。然后我们将interceptor附加到它。  
2.Java中的字符串不会以null结束。当strncmp使用frida的Memory.readUtf8String方法访问字符串指针的内存位置并且不提供长度时，frida会期待一个结束符，或者输出一些垃圾内存。它不知道字符串在哪里结束。如果我们指定要读取的字符数量作为第二个参数就解决了这个问题。  
3.如果我们没有限制strncmp参数的条件将得到很多输出。限制条件为第三个参数size_t为23。  
我怎么如何知道args[0]是我们的输入，args[1]是我们寻找的字符串呢？我不知道，我只是测试，将大量的输出dump到屏幕以找到我的输入。如果你不想跳过这部分，可以删除上面脚本中的if语句，并使用frida的hexdump输出。
    buf = Memory.readByteArray(args[0],32);
    console.log(hexdump(buf, {
         offset: 0,
         length: 32,
         header: true,
         ansi: true
    }));
    buf = Memory.readByteArray(args[1],32);
    console.log(hexdump(buf, {
        offset: 0,
        length: 32,
        header: true,
       ansi: true
    }));
以下是完整版的脚本，可以更好地输出参数。
    setImmediate(function() {
        Java.perform(function() {
            console.log("[*] Hooking calls to System.exit");
            exitClass = Java.use("java.lang.System");
            exitClass.exit.implementation = function() {
                console.log("[*] System.exit called");
            }
            var strncmp = undefined;
            imports = Module.enumerateImportsSync("libfoo.so");
            for(i = 0; i < imports.length; i++) {
            if(imports[i].name == "strncmp") {
                    strncmp = imports[i].address;
                    break;
                }
            }
            Interceptor.attach(strncmp, {
                onEnter: function (args) {
                   if(args[2].toInt32() == 23 && Memory.readUtf8String(args[0],23) == "01234567890123456789012") {
                        console.log("[*] Secret string at " + args[1] + ": " + Memory.readUtf8String(args[1],23));
                    }
                 },
            });
            console.log("[*] Intercepting strncmp");
        });
    });
现在启动frida加载这个脚本。
输入字符串并且按下VERIFY。  
在控制台会看到下面的结果。
我们找到了正确的字符串Thanks for all the fish。  
**使用patch过的apk**
当我们使用patch过的apk时可能不会得到需要的字符串。libfoo库中的init函数包含一些初始化逻辑，阻止应用程序根据我们的输入检查或解码字符串。如果我们再看看init函数的反汇编代码会看到有趣的一行。
相同的变量会在libfoo库的bar函数中检查，如果没有设置，那么代码会跳过strncmp。
它可能是一个boolean类型的变量，当init函数运行时被设置。如果我们想要让patch过的apk调用strncmp函数就需要设置这个变量或者至少阻止它跳过
strncmp的调用。我们可以再patch一次，但是既然这是frida教程，我们可以使用它动态改变内存。下面是可供patch过的apk使用的完整的脚本。  
    setImmediate(function() {
        Java.perform(function() {
            console.log("[*] Hooking calls to System.exit");
            exitClass = Java.use("java.lang.System");
            exitClass.exit.implementation = function() {
                console.log("[*] System.exit called");
            }
            var strncmp = undefined;
            imports = Module.enumerateImportsSync("libfoo.so");
            for(i = 0; i < imports.length; i++) {
                if(imports[i].name == "strncmp") {
                    strncmp = imports[i].address;
                    break;
                }
            }
            //Get base address of library
            var libfoo = Module.findBaseAddress("libfoo.so");
            //Calculate address of variable
            var initialized = libfoo.add(ptr("0x400C"));
            //Write 1 to the variable
            Memory.writeInt(initialized,1);
            Interceptor.attach(strncmp, {
                onEnter: function (args) {
                   if(args[2].toInt32() == 23 && Memory.readUtf8String(args[0],23) == "01234567890123456789012") {
                        console.log("[*] Secret string at " + args[1] + ": " + Memory.readUtf8String(args[1],23));
                    }
                 },
            });
            console.log("[*] Intercepting strncmp");
        });
    });