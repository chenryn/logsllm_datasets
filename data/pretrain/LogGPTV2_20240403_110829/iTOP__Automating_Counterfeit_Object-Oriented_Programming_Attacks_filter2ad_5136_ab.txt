5 DESIGN AND IMPLEMENTATION
We designed and implemented our automated attack construction
approach inside the iTOP tool, which consists of 10 K Python LoC.
5.1 iTOP Front-ends
In this section, we present iTOP’s front-ends and introduce several
ESL based attack construction examples.
Binary Front-end. iTOP uses the ANGR [46] binary analysis frame-
work to lift the target binary into an intermediate representation,
in order to perform control flow analysis and symbolic execution.
To access the binary’s machine code, we use the Capstone [8] bi-
nary analysis framework. DWARF debug information, if present, is
extracted from the binary using pyelftools [1]. Further, the binary
front-end depicted in Figure 1 at step ❶ builds a set of candidate
gadgets, CG. Depending on the calltarget constraints, this set can
contain all functions, all virtual functions, or all functions reach-
able from any dispatcher gadget under the provided CFI policy. If
required, iTOP generates a mapping of files and line numbers to
addresses, a mapping of human readable names to addresses, and
an entry state of the target application.
ESL Front-end. The ESL front-end as depicted in Figure 1 at step ❷
creates an intermediate representation consisting of a tree of objects
for the payload using the ANTLR [3] parser generator. For each
statement, unique hash encoding preconditions, effects, and post-
conditions are calculated, enabling the search algorithm to later
recognize repeat gadgets as well as gadgets that were already dis-
covered in different chains. This information, IRpy, is then passed
to the candidate gadget classification module.
Payload Specification in ESL. To ease the process of payload
creation, we built ESL, as presented in Figure 1. ESL allows precise
definition of exploits in a powerful language with fours features: (1)
::= (( | ) ';')*
::= 'IMPORT'  '(' ? ')' 'RETURNS'
( | 'NONE') 'FROM' 
( | 'NONE') '{'  '}'
| ( ';')
| ( ';')
| ( ':') )*
::=  (',' )*
::=  '{'  '}'
1  ::=   ?
2 
3 
4
5  ::= 'IMPORT' 
6  ::= *
7  ::= 'DEF'  '('  ') RETURNS'
8
9 
10 
11  ::= (( ';') | ( ';')
12
13
14
15  ::=  | 
16  ::= (   '=' ( | ) )
17
18 
19  ::=  (',' )*
20 
21 
22 
23 
24 
25  ::=   ( | 
| 
26
| )
27
::= '' | '==' | '>=' | '
::=  (',' )*
29 
::= 'string' | 'int' | 'reg'
30 
31 
::= '_r' [0-7]
32  ::= [A-Z_0-9]+
33 
34 
35 
36 
::= '&'?  | 
::= 'ASSERT' 
::= 'GOTO' 
::= 'IF'  'GOTO' 
::=  ;
::= [a-z]+
::= '"' ~('\r' | '\n' | '"')* '"'
::= [0-9]+ | '0x'[0-9a-fA-F]+
::= '_'[a-z]+
::=  '(' ? ')'
| ('reg'  '=' )
Listing 1: Extended Backus-Naur form of ESL.
Turing-completeness (control flow via loops and branches); (2) inde-
pendence from target binary and architecture; (3) close mirroring of
actual attack techniques; (4) a set of powerful and extensible Python-
like API for attack construction using primitives and gadgets.
1 /*import a part of the API functionality*/
2 IMPORT MAINLOOP () RETURNS NONE FROM "mainloop.py";
3 IMPORT LINKEDLIST () RETURNS NONE FROM "linkedlist.py";
4 IMPORT RECURSION () RETURNS NONE FROM "loopless.py";
5 IMPORT READ () RETURNS int FROM "read.py";
6 IMPORT LOAD (int) RETURNS int FROM "load.py";
7 IMPORT WRITE (int, int) RETURNS NONE FROM "write.py" ;
8 IMPORT EXECUTE (int, int) RETURNS NONE FROM "execute.py";
9 IMPORT MANIPULATE (reg) RETURNS NONE FROM "manipulate.py";
10 IMPORT INC (reg) RETURNS NONE FROM "inc.py";
11 IMPORT IF_FN () RETURNS NONE FROM "if.py";
12 IMPORT STACKINC () RETURNS NONE FROM "stackinc.py";
13 IMPORT STACKDEC () RETURNS NONE FROM "stackdec.py";
14 /*import available dispatcher gadget types*/
15 IMPORT DISPATCHER () RETURNS NONE FROM "linkedlist.py";
16 IMPORT DISPATCHER () RETURNS NONE FROM "mainloop.py";
17 IMPORT DISPATCHER () RETURNS NONE FROM "loopless.py";
18 /*import read and execute functionality*/
19 IMPORT "esl_scripts/lib_read.esl";
20 IMPORT "esl_scripts/lib_execute.esl";
Listing 2: Extensible lib_coop.esl API.
To illustrate our extensible attack construction APIs4, we provide
an example as shown in Listing 2. Our ESL can be used to import
different high-level Python functions which represent the main API
capabilities. For example, in line 2 we import the MAINLOOP gadget
features. Further, our API is based on our own domain specific lan-
guage (DSL), dubbed ESL. It is easy to use as it is based on a simple
DSL, which does not impose a high burden on the analyst. It is also
flexible as the analyst can anytime go and define new functionality;
4ESL’s extensible API. The names of the imported Python script files indicate the
functionality of each of the imported API functions. https://tinyurl.com/ya9qzgmo
4
as, for example, in read.py depicted on line 5 in Listing 2. The
RETURN NONE FROM is equivalent to the return none statement in
Python. Note that this main API file will be imported by subsequent
ESL attack construction scripts.
In order to craft an attack, ESL closely resembles how the actual
attack might play out. A single statement corresponds to a sin-
gle gadget, and the statements are linked together by a dispatcher
gadget mechanism (e.g., COOP). This ensures that an analyst can
(1) precisely control the resulting payload’s layout, (2) easily and
intuitively craft new attacks, and (3) precisely evaluate how a coun-
termeasure interacts with a certain attack layout. As mentioned,
ESL offers a Python API containing functions and data structures
that can be used to extend the set of gadgets and attack types.
Within this work, we implemented 3 dispatch mechanisms and 9
gadget types, providing a rich toolbox that suffices to construct
complex and realistic attacks.
1 IMPORT "lib_coop.esl";
2
3 LINKED_LIST_DISPATCH{
4 _loop:
5
6
7 }
8
reg _r1 = READ();
GOTO _loop;
1 IMPORT "lib_coop.esl";
2
3 LINKED_LIST_DISPATCH{
4 int printf = 0x7ffff784e390;
5 str text = "Hello World!\n";
6 IF _r1 != 0x1234 GOTO _end;
7 EXECUTE(printf, &text);
8 _end:
9 }
Listing 3: Left: ESL infinite loop; Right: ESL cond. branch.
To illustrate how complex and realistic attacks can be constructed,
we introduce Listing 3 which shows how a loop and a conditional
control flow payload can be expressed in ESL. First, the payloads im-
port the gadget definitions for the COOP attack types (line 1, both
listings). Then, the dispatch mechanism to be used is defined (line 3,
both listings). The control flow is manipulated using jumps (line 6
left) and conditional statements (line 6, right side) to jump to labels
(line 4 left and 8 right). In line 7 right, a gadget is invoked, leading
to a call to printf with a pointer to the string Hello World! in
the first argument. Line 5 on the left side invokes a READ gadget,
reading a value into a register. This gadget is essentially a filler, as
no empty loops are allowed.
1 IMPORT "lib_coop.esl";
2 DEF SYSTEM(arg) RETURNS NONE {
3 reg _r1 = READ();
4 MANIPULATE(_r1);
5 ASSERT _r1 == 0x7ffff784e390;
6 EXECUTE(_r1, arg);
7 }
8 DEF SYSTEM(arg) RETURNS NONE {
9 int system = 0x7ffff784e390;
10 EXECUTE(system, arg);
11 }
12 MAINLOOP_DISPATCH {
13 string shell = "/bin/sh\x00";
14 SYSTEM(&shell);
15 }
Listing 4: Spawning a system shell in ESL.
To demonstrate how to spawn a system shell, we introduce List-
ing 4 which shows an ESL-based system shell attack specification.
Note that the address 0x7ffff784e390 of system() is a prerequi-
site and was found by the analyst with little manual effort. Note that
5
in this example, the COOP gadget set is used (see line 1). This pay-
load demonstrates another important feature, namely it defines mul-
tiple equivalent chains. The first chain (line 2 to 7) loads any value
into the second (registers start at zero) argument register (mapped
to a different register depending on target architecture), then manip-
ulates that value using arithmetic operations to match the address
of system. The ASSERT in line 5 adds a post-condition to the preced-
ing MANIPULATE gadget: _r1 has to be equal to 0x7ffff784e390
after MANIPULATE is executed for the manipulate to be considered
valid. Note that in case an ASSERT condition is not met then the
flow cannot continue. Also, note that _r1 can be any register. The
second chain (line 8 to 11), in turn, does not prepare any registers.
Further, when generating the payload, iTOP first attempts to gen-
erate a payload using the second shorter chain, and if unsuccessful
the first chain is used. Next, we describe iTOP’s ESL front-end to
understand how ESL specifications are used by iTOP.
Conditional Shell Spawning. For example, by using the condi-
tional write from Listing 3 (right side) to target the destination
address of the shell-spawning gadget from Listing 4, a payload to
conditionally open a shell can be created. This works if the condi-
tion is satisfied; otherwise it will crash, because the calltarget of the
EXECUTE gadget is overwritten with an invalid destination address
by the conditional gadget. Thus, in total, the resulting payload con-
tains 4 fake objects: (1) the dispatcher gadget, with an array that
points to pointers, (2) the register initialization, (3) the conditional
write, and (4) the call to the attacker-controlled target. Lastly, note
that iTOP needs, in total, 43 minutes to generate the payload for
this example.
5.2 Classifying Candidate Gadgets
In this section, we provide several examples on how to spawn
a shell, initialize an argument register, and perform conditional
memory write operations on real program binaries. Afterwards,
we illustrate how to classify dispatcher gadgets as depicted in Fig-
ure 1 at step ❸, which consists in first obtaining an overview of
the candidate calltarget gadgets as shown in Figure 1 at step ❹,
and CFI Policy Selection depicted at step ❺. Note that using the
fixed memory addresses as depicted in Listing 4 and Listing 5 is
consistent with our threat model assumptions as we assume that
ASLR was bypassed by using an available information leak. Similar
approaches have been followed by [17, 43] as well.
Spawning a Shell Example. To demonstrate how a system shell
is spawned at machine code level, we use Table 5 which shows a
gadget that spawns a system shell [2] by using the Libc system
library. This gadget is less complex than the dispatcher gadget. The
function system opens a shell and it passes to it a char pointer
in the first parameter. The register rdi starts off by pointing into
attacker-controlled memory; as such, the attacker can control both
the target address (line 6) and the value in the first argument reg-
ister (line 8) when the target is called (line 9). iTOP creates a fake
object containing the address of the function system in Libc at
offset 0x38, the address of the string /bin/sh/ at offset 0x40, and
the vptr into the virtual table of node::JSStream at offset 0x0. To
build the payload, this fake object is combined with the fake object
generated for the dispatcher.
1 ; rdi contains the this pointer
2 ; of the fake object
3 mov rbx, rdi
4 mov rax, qword ptr [rip+0x19fc9e0]
5 add rax, 0x10
6 mov qword ptr [rbx], rax
7 mov rax, qword ptr [rbx+0x38]
8 test rax, rax
9 je
10 mov rdi, qword ptr [rbx+0x40]
11 callrax
Listing
5: Gadget
node::
JSStream::∼JSStream(),
calls
arbitrary functions with an
arbitrary argument in rdi.
0x7ffff6dc8f46
1 ; rdi contains the this pointer
2 ; of the fake object
3 mov rcx, qword ptr [rdi + 0x10]
4 mov rax, qword ptr [rdi + 0x30]
5 sub rcx, qword ptr [rdi + 0x8]
6 sar rcx, 1
7 add rcx, qword ptr [rdi + 0x20]
8 mov rdx, rcx
9 sub rdx, rax
10 jb 0x7ffff69210e2
11 ...
12 mov qword ptr [rdi + 0x20], rcx
13 mov rax, qword ptr [rdi + 0x20]
14 mov qword ptr [rdi + 0x10], rax
15 mov qword ptr [rdi + 0x18], rax
16 xor eax, eax
17 retListing 6: Initializing register
rdx with an arbitrary value.
1 ; rdi contains the this pointer
2 ; of the fake object
3 mov rax, qword ptr [rdi + 0x10]
4 mov rcx, qword ptr [rdi + 0x18]
5 sub rcx, rax
6 cmp rcx, rsi
7 jae 0x7ffff6a949c3
8 xor eax, eax
9 ret
10 mov qword ptr [rdx], rax
11 add qword ptr [rdi + 0x10], rsi
12 mov al, 1
13 retListing 7: Gadget used to write
to an arbitrary memory ad-
dress if register rsi is below an
attacker-controlled value.
Initializing an Argument Register. In some cases, no gadget
controlling both target address and argument value is available.
Often, one of the two values has to be passed to the gadget via
an argument register. The Linux/x86-64 ABI convention uses the
registers rdi, rsi, rdx, rcx, R8 and R9 for this purpose. These are
used for integer and memory addresses while the XMM0-7 registers
are used for floating point arguments. Being able to initialize these
registers with arbitrary values makes more candidates usable for
LOADs, WRITEs, and EXECUTEs.
To illustrate how the rdx register can be initialized, we Listing 6
showing how the argument register rdx is initialized using the func-
tion v8::internal::ExternalTwoByteString Utf16Character
Stream::ReadBlock(). Highlighted in green: register changed
from unknown value to value under attacker control. Orange: regis-
ter under attacker control. Red: Attacker loses control over register.
The gadget depicted could be used to initialize rdx. iTOP generates
a fake object set up in a way that the jump instruction at line 10
is always taken. The register rdx is initialized with an attacker-
controlled value in line 7, and in line 8 an attacker-controlled value
is subtracted. Using symbolic execution and the Z3 solver, iTOP
finds appropriate values for the fake object at offsets 0x10, 0x30 and
0x8. Lastly, note that the gadget could also be used to initialize rcx.