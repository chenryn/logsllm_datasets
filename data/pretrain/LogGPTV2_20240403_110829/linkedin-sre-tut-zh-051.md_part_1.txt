# 可测量性
> 原文：
可伸缩性对一个系统/服务意味着什么？一个系统由服务/组件组成，每个服务/组件的可伸缩性需要单独处理，而系统的可伸缩性作为一个整体。
如果随着资源被添加到系统中，服务的性能以与添加的资源成比例的方式提高，则称该服务是可伸缩的
如果添加资源以促进冗余不会导致性能损失，则称永远在线服务是可伸缩的
## 参考
*   [https://www . all things distributed . com/2006/03/a _ word _ on _ scalability . html](https://www.allthingsdistributed.com/2006/03/a_word_on_scalability.html)
## 可扩展性- AKF 规模的立方体
[Scale Cube](https://akfpartners.com/growth-blog/scale-cube) 是一个用于细分服务、定义微服务和扩展产品的模型。它还为团队在设计解决方案时讨论与规模相关的选项创造了一种通用语言。下一节根据我们对 AKF 立方体的推断来讨论某些扩展模式
## 可扩展性-水平扩展
水平伸缩代表应用或服务的克隆，这样工作就可以毫无偏见地轻松分配到不同的实例中。
让我们看看我们的单片应用如何利用这一原则进行改进
![Horizontal Scaling](img/7a889526d0403c1e0799eecb7c91a1cc.png)
这里，DB 与应用分开缩放。这是为了让您知道每个组件的扩展能力可能是不同的。通常，web 应用可以通过添加资源来扩展，除非应用中存储了状态。但是，通过添加更多的跟随者，数据库只能针对读取进行扩展，但写入必须只针对一个领导者，以确保数据的一致性。有一些数据库支持多领导写，但我们在这一点上把它们排除在范围之外。
应用应该能够区分读取和写入，以选择合适的数据库服务器。负载平衡器可以透明地在相同的服务器之间分割流量。
**什么:**复制服务或数据库以分散事务负载。
**何时使用:**读写比率非常高的数据库(5:1 或更高—越高越好)。因为只能缩放数据库的读取副本，而不能缩放主数据库。
**使用方法:**简单地克隆服务，实现一个负载均衡器。对于数据库，确保访问代码理解读和写之间的区别。
**原因:**允许以复制数据和功能为代价快速扩展交易。
**关键要点:**这实现起来很快，从开发人员的角度来看成本很低，并且可以很好地扩展交易量。但是，从数据运营成本的角度来看，它们往往成本较高。这里的成本意味着，如果我们有 3 个追随者和 1 个领导者数据库，相同的数据库将作为 4 个副本存储在 4 个服务器。因此增加了存储成本
### 参考
*   [https://learning . oreilly . com/library/view/the-art-of/9780134031408/ch23 . html](https://learning.oreilly.com/library/view/the-art-of/9780134031408/ch23.html)
### 可伸缩性模式-负载平衡
改善多种计算资源(如计算机、计算机集群、网络链接、中央处理器或磁盘驱动器)之间的工作负载分配。一种常用的技术是在相同的服务器集群之间负载平衡流量。类似的原理被用于通过 [ECMP](https://en.wikipedia.org/wiki/Equal-cost_multi-path_routing) ，磁盘驱动器通过 [RAID](https://en.wikipedia.org/wiki/RAID) 等来平衡网络链路上的流量
旨在优化资源使用，最大化吞吐量，最小化响应时间，并避免任何单个资源过载。使用具有负载平衡的多个组件而不是单个组件可以通过冗余提高可靠性和可用性。在我们更新的架构图中，我们有 4 台服务器来处理应用流量，而不是一台服务器
执行负载平衡的设备或系统称为负载平衡器，缩写为 LB。
#### 参考
*   [https://en . Wikipedia . org/wiki/Load _ balancing _(计算)](https://en.wikipedia.org/wiki/Load_balancing_(computing))
*   [https://blog . envoy proxy . io/introduction-to-modern-network-load-balancing-and-proxy-a57f 6 ff 80236](https://blog.envoyproxy.io/introduction-to-modern-network-load-balancing-and-proxying-a57f6ff80236)
*   [https://learning . oreilly . com/library/view/load-balancing-in/9781492038009/](https://learning.oreilly.com/library/view/load-balancing-in/9781492038009/)
*   [https://learning . oreilly . com/library/view/practical-load-balancing/9781430236801/](https://learning.oreilly.com/library/view/practical-load-balancing/9781430236801/)
*   [http://shop.oreilly.com/product/9780596000509.do](http://shop.oreilly.com/product/9780596000509.do)
### 可伸缩性模式- LB 任务
LB 是做什么的？
#### 服务发现:
系统中有哪些后端可用？在我们的架构中，有 4 台服务器可用于服务应用流量。LB 充当单个端点，客户端可以透明地使用它来访问 4 个服务器中的一个。
#### 健康检查:
哪些后端目前是健康的，可以接受请求？如果 4 个应用服务器中有一个坏了，LB 会自动缩短路径，这样客户端就不会感觉到任何应用宕机
#### 负载平衡:
应该使用什么算法来平衡健康后端的各个请求？有许多算法可以在四台服务器之间分配流量。基于观察/经验，SRE 可以选择适合他们模式的算法
### 可伸缩性模式- LB 方法
常见的负载平衡方法
#### 最少联系方法
将流量定向到活动连接最少的服务器。当在服务器之间不均匀分布的流量中有大量持久连接时最有用。如果客户端保持长期连接，则有效
#### 最短响应时间法
将流量定向到具有最少活动连接和最低平均响应时间的服务器。这里，响应时间用于提供服务器健康状况的反馈
#### 循环法
通过将流量定向到第一个可用的服务器来轮换服务器，然后将该服务器移动到队列的底部。当服务器规格相同并且没有很多持久连接时最有用。