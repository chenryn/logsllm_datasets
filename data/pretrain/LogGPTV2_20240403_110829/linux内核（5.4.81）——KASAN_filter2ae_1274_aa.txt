# linux内核（5.4.81）——KASAN
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## KASAN 简述
  * KASAN是内核用于动态检测内存错误的工具, 简单来说, 数据区域可分为两种:可访问区域，不可访问区域(red_zone).KASAN存在影子内存(shadow memory), 他和正常内存的比例是1:8, 即1byte shadow memory可以代表8bytes 正常内存的可访问性.
  * 128TB(内核正常内存) : 16TB(影子内存) —- Documentation/x86/x86_64/mm.rst x86-64 内存布局显示如下:
     ffffec0000000000 |  -20    TB | fffffbffffffffff |   16 TB | KASAN shadow memory
  * 具体规则(+: byte可访问, -: byte不可访问) 
    * 如果1byte shadow memory对应的8bytes 内存都可访问, 则*(shadow memory) == 0 
                [0] -> [+, +, +, +, +, +, +, +]
    * 如果1byte shadow memory对应的8bytes 内存都不可访问, 则*(shadow memory)为负数 
                [-1] -> [-, -, -, -, -, -, -, -]
    * 如果1byte shadow memory对应的8bytes 内存中有N bytes可访问, 则*(shadow memory) == N 
                if N = 3
        [3] -> [+, +, +, -, -, -, -, -]
  * 实现原理 
    * 代码插桩: 利用编译器特性进行代码插桩, 当程序对内存进行读取或写入(load/store)时插入kasan检测代码
    * kasan检测代码: **asan_loadN(addr)/** asan_storeN(addr) (后面会对源码做详细分析), 主要功能是检测addr所在位置的N bytes内存是否可用.
## 源码分析
###  kasan检测入口
  * 使用宏定义实现 **asan_load/** asan_store, 关键函数为check_memory_region_inline
    #define DEFINE_ASAN_LOAD_STORE(size)                    \
        void __asan_load##size(unsigned long addr)            \
        {                                \
            check_memory_region_inline(addr, size, false, _RET_IP_);\
        }                                \
        EXPORT_SYMBOL(__asan_load##size);                \
        __alias(__asan_load##size)                    \
        void __asan_load##size##_noabort(unsigned long);        \
        EXPORT_SYMBOL(__asan_load##size##_noabort);            \
        void __asan_store##size(unsigned long addr)            \
        {                                \
            check_memory_region_inline(addr, size, true, _RET_IP_);    \
        }                                \
        EXPORT_SYMBOL(__asan_store##size);                \
        __alias(__asan_store##size)                    \
        void __asan_store##size##_noabort(unsigned long);        \
        EXPORT_SYMBOL(__asan_store##size##_noabort)
###  check_memory_region_inline
  * 当size==0时, 对内存不做读写操作, 正常返回
  * addr必须大于KASAN_SHADOW_START对应的正常地址, 即addr必须在shadow映射的界限内
  * memory_is_poisoned作为核心函数判断内存是否可用
    static __always_inline bool check_memory_region_inline(unsigned long addr,
                            size_t size, bool write,
                            unsigned long ret_ip)
    {
        if (unlikely(size == 0))
            return true;
        if (unlikely((void *)addr  8bytes对齐的addr+8 设为一个内存组, 对应1byte shadow, 此处addr&7获得addr在该组中的偏移量last_accessible_byte
  * 比较偏移量与shadow_value(该组内可访问内存的byte 数), 如果last_accessible_byte = shadow_value);
        }
        return false;
    }
####  memory_is_poisoned_2_4_8
  * 与memory_is_poisoned_1的区别在于此处多考虑了一种情况(待store/read内存跨越两个内存组)
  * 对于跨越内存组的情况, 需要满足第一个内存组8bytes皆可访问(0), 第二个内存组shadow_value >= 组内偏移
  * 如果不跨越内存, 只判断末尾地址是否可store/load 1byte 内存
    static __always_inline bool memory_is_poisoned_2_4_8(unsigned long addr,
                            unsigned long size)
    {
        u8 *shadow_addr = (u8 *)kasan_mem_to_shadow((void *)addr);
        /*
         * Access crosses 8(shadow size)-byte boundary. Such access maps
         * into 2 shadow bytes, so we need to check them both.
         */
        if (unlikely(((addr + size - 1) & KASAN_SHADOW_MASK) = 组内偏移
  * 如果只跨越两个内存组, 只需要16bit shadow_value == 0即可
    static __always_inline bool memory_is_poisoned_16(unsigned long addr)
    {
        u16 *shadow_addr = (u16 *)kasan_mem_to_shadow((void *)addr);
        /* Unaligned 16-bytes access maps into 3 shadow bytes. */
        if (unlikely(!IS_ALIGNED(addr, KASAN_SHADOW_SCALE_SIZE)))
            return *shadow_addr || memory_is_poisoned_1(addr + 15);
        return *shadow_addr;
    }
####  memory_is_poisoned_n
  * memory_is_nonzero: 
    * 首先定位与待访问内存块对应的shadow_mem_block, 检测shadow_mem_block中的shadow_value是否全为0, 如果全为0, 则内存块可访问, 从memory_is_poisoned_n返回
    * 如果shadow_value不全为0, 则找到第一个不为0的shadow_value对应的shadow_addr, return shadow_addr
  * 得到memory_is_nonzero中返回的shadow_addr, 如果shadow_addr == last_shadow(末尾地址对应的shadow_addr) 则内存块可访问, 从memory_is_poisoned_n返回
  * 否则判断末尾地址是否可store/load 1byte(比较末尾地址偏移与last_shadow的大小)
    static __always_inline bool memory_is_poisoned_n(unsigned long addr,
                            size_t size)
    {
        unsigned long ret;
        ret = memory_is_nonzero(kasan_mem_to_shadow((void *)addr),
                kasan_mem_to_shadow((void *)addr + size - 1) + 1);
        if (unlikely(ret)) {
            unsigned long last_byte = addr + size - 1;
            s8 *last_shadow = (s8 *)kasan_mem_to_shadow((void *)last_byte);
            if (unlikely(ret != (unsigned long)last_shadow ||
                ((long)(last_byte & KASAN_SHADOW_MASK) >= *last_shadow)))
                return true;
        }
        return false;
    }
## 实例分析
###  buddy_kasan
> kasan_alloc_pages: 标记shadow_mem为0, kasan_free_pages: 标记shadow_mem为不可访问
####  验证代码
  * 编写kasan驱动, 使用alloc_pages调用buddy分配内存, 查看分配后以及释放后的shadow_mem内存(local_addr[0] = ‘\x10’; 对buddy分配的内存块做store操作, 会触发__asan_store1代码插桩)
    long kasan_ioctl(struct file* filp, unsigned int cmd, unsigned long arg)
    {
        char *local_addr = NULL;
        struct page *local_pg = alloc_pages(GFP_KERNEL, 2);
        local_addr = page_address(local_pg);
        local_addr[0] = '\x10';
        __free_pages(local_pg, 2);
        printk(KERN_DEBUG "[+] modules kasan debug\n");
        return 0;
    }
  * ida反汇编代码(存在_asan_store1_noabort(v5), 猜测成立)
    __int64 __fastcall kasan_ioctl(file *filp, unsigned int cmd, unsigned __int64 arg)
    {
      __int64 v3; // r13
      __int64 v4; // r12
      _BYTE *v5; // r12
      _fentry__(filp, cmd, arg);
      v3 = alloc_pages_current(3264LL, 2LL);
      _asan_load8_noabort(&vmemmap_base);
      v4 = v3 - vmemmap_base;
      _asan_load8_noabort(&page_offset_base);
      v5 = (_BYTE *)(page_offset_base + (v4 >> 6 > 3 + 0xdffffc0000000000, 所以0xffff88805b034000对应的shadow_mem: 0xffffed100b606800 
          static inline void *kasan_mem_to_shadow(const void *addr)
      {
          return (void *)((unsigned long)addr >> KASAN_SHADOW_SCALE_SHIFT)
              + KASAN_SHADOW_OFFSET;
      }