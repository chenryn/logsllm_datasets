PhD thesis, 2017.
[25] Gerhard de Koning Gans, Jaap-Henk Hoepman, and
Flavio D Garcia. A practical attack on the mifare classic.
In International Conference on Smart Card Research
and Advanced Applications, pages 267–282. Springer,
2008.
[26] Benedikt Driessen, Ralf Hund, Carsten Willems,
Christof Paar, and Thorsten Holz. Don’t trust satel-
lite phones: A security analysis of two satphone stan-
dards. In 2012 IEEE Symposium on Security and Pri-
vacy, pages 128–142. IEEE, 2012.
[27] Benedikt Driessen, Ralf Hund, Carsten Willems,
Christof Paar, and Thorsten Holz. An experimental
security analysis of two satphone standards. ACM Trans-
actions on Information and System Security (TISSEC),
16(3):1–30, 2013.
[28] Orr Dunkelman, Nathan Keller, and Adi Shamir. A
practical-time related-key attack on the kasumi cryp-
In Annual
tosystem used in gsm and 3g telephony.
cryptology conference, pages 393–410. Springer, 2010.
[29] Thomas Eisenbarth, Timo Kasper, Amir Moradi,
Christof Paar, Mahmoud Salmasizadeh, and Mohammad
T Manzuri Shalmani. On the power of power analysis
in the real world: A complete break of the keeloq code
hopping scheme. In Annual International Cryptology
Conference, pages 203–220. Springer, 2008.
[30] ETSI. 300 392-7 v3. 3.1 (2012-07) european stan-
dard (telecommunication series) terrestrial trunked
radio (tetra); voice plus data (v+ d); part 7: Security.
European Telecommunications Standards Institute
(ETSI), 2012.
https://www.etsi.org/deliver/
etsi_en/300300_300399/30039207/03.03.01_60/
en_30039207v030301p.pdf.
[31] Peter Garba and Matteo Favaro. Saturn-software deob-
fuscation framework based on llvm. In Proceedings of
the 3rd ACM Workshop on Software Protection, pages
27–38, 2019.
[32] Flavio D Garcia, Gerhard de Koning Gans, Ruben Mui-
jrers, Peter Van Rossum, Roel Verdult, Ronny Wichers
Schreur, and Bart Jacobs. Dismantling mifare classic. In
European symposium on research in computer security,
pages 97–114. Springer, 2008.
[33] Flavio D Garcia, Peter Van Rossum, Roel Verdult, and
Ronny Wichers Schreur. Wirelessly pickpocketing a
mifare classic card. In 2009 30th IEEE Symposium on
Security and Privacy, pages 3–15. IEEE, 2009.
[34] Ian Goldberg, David Wagner, and Lucky Green. The
real-time cryptanalysis of a5/2. Rump session of Crypto,
99:16, 1999.
[35] Felix Gröbert, Carsten Willems, and Thorsten Holz. Au-
tomated identiﬁcation of cryptographic primitives in
binary programs. In Recent Advances in Intrusion De-
tection, pages 41–60, 2011.
[36] Ilfak Guilfanov. Findcrypt2, february 2006. http://
www.hexblog.com/?p=28.
[37] Peter Gutmann. Cryptographic security architecture:
design and veriﬁcation. Springer Science & Business
Media, 2003. pages 293.
[38] Gregory D Hill and Xavier JA Bellekens. Deep learn-
ing based cryptographic primitive classiﬁcation. arXiv
preprint arXiv:1709.08385, 2017.
[39] Liam Timothy Keliher.
Linear cryptanalysis of
substitution-permutation networks. Queen’s University,
2003.
[40] Auguste Kerckhoffs. La cryptographie militaire. Jour-
nal des Sciences Militaires, IX:5–83, 161–191, 1883.
[41] Jongsung Kim, Seokhie Hong, Bart Preneel, Eli Bi-
ham, Orr Dunkelman, and Nathan Keller. Related-key
IACR Cryptology
boomerang and rectangle attacks.
ePrint Archive, 2010:19, 2010.
[42] Philippe Lagadec. Balbuzard, 2014.
http://www.
decalage.info/en/python/balbuzard.
[43] Pierre Lestringant, Frédéric Guihéry, and Pierre-Alain
Fouque. Automated identiﬁcation of cryptographic
primitives in binary code with data ﬂow graph isomor-
phism. In Proceedings of the 10th ACM Symposium on
Information, Computer and Communications Security,
pages 203–214. ACM, 2015.
[44] Literatecode. Draft crypto analyzer (draca). http://
www.literatecode.com/draca, May 2013.
[45] Loki.
Snd crypto scanner (olly/immunity plu-
https://web.archive.org/web/
gin), 2008.
20080321134709/http://tuts4you.com/forum/
index.php?showtopic=15447.
USENIX Association
30th USENIX Security Symposium    569
[46] Charalampos Manifavas, George Hatzivasilis, Konstanti-
nos Fysarakis, and Yannis Papaefstathiou. A survey of
lightweight stream ciphers for embedded systems. Se-
curity and Communication Networks, 9(10):1226–1246,
2016.
[47] Felix Matenaar, Andre Wichmann, Felix Leder, and El-
mar Gerhards-Padilla. Cis: The crypto intelligence sys-
tem for automatic detection and localization of cryp-
tographic functions in current malware. In 2012 7th
International Conference on Malicious and Unwanted
Software, pages 46–53. IEEE, 2012.
[48] Alexander Maximov, Thomas Johansson, and Steve Bab-
bage. An improved correlation attack on a5/1. In Inter-
national Workshop on Selected Areas in Cryptography,
pages 1–18. Springer, 2004.
[49] Carlo Meijer and Roel Verdult. Ciphertext-only crypt-
analysis on hardened mifare classic cards. In Proceed-
ings of the 22nd ACM SIGSAC Conference on Computer
and Communications Security, pages 18–30, 2015.
[50] Alfred J Menezes, Jonathan Katz, Paul C Van Oorschot,
and Scott A Vanstone. Handbook of applied cryptogra-
phy. CRC press, 1996.
[51] Microchip.
Hopping
ing a PIC16C56, AN642.
//web.archive.org/web/20080916043223/http:
//www.keeloq.boom.ru/decryption.pdf.
decoder us-
https:
1998.
code
[52] Mr Paradox, AT4RE.
Hash & crypto detec-
https://web.archive.org/
(hcd), 2009.
tor
web/20091203010936/http://www.at4re.com/
download.php?view.8.
[53] James Newsome and Dawn Xiaodong Song. Dynamic
taint analysis for automatic detection, analysis, and sig-
naturegeneration of exploits on commodity software. In
NDSS, volume 5, pages 3–4. Citeseer, 2005.
[54] Karsten Nohl, David Evans, Starbug Starbug, and Hen-
ryk Plötz. Reverse-engineering a cryptographic rﬁd tag.
In USENIX security symposium, volume 28, 2008.
[55] Karsten Nohl, Erik Tews, and Ralf-Philipp Weinmann.
Cryptanalysis of the dect standard cipher. In Interna-
tional Workshop on Fast Software Encryption, pages
1–18. Springer, 2010.
[56] Daniel Plohmann and Alexander Hanel. simpliﬁre. idas-
cope, 2012.
[57] Jonathan Salwan, Sébastien Bardin, and Marie-Laure
Potet. Symbolic deobfuscation: From virtualized code
back to the original. In International Conference on
Detection of Intrusions and Malware, and Vulnerability
Assessment, pages 372–392. Springer, 2018.
[58] snaker, Maxx. Kanal - krypto analyzer for peid,
http://www.dcs.fmph.uniba.sk/zri/6.
2015.
prednaska/tools/PEiD/plugins/kanal.htm.
[59] Mate Soos. Enhanced gaussian elimination in dpll-based
sat solvers. In POS@ SAT, pages 2–14, 2010.
[60] Petr Štembera and Martin Novotny. Breaking hitag2
with reconﬁgurable hardware. In 2011 14th Euromicro
Conference on Digital System Design, pages 558–563.
IEEE, 2011.
[61] Daehyun Strobel, Benedikt Driessen, Timo Kasper, Gre-
gor Leander, David Oswald, Falk Schellenberg, and
Christof Paar. Fuming acid and cryptanalysis: Handy
tools for overcoming a digital locking and access con-
trol system. In Annual Cryptology Conference, pages
147–164. Springer, 2013.
[62] Siwei Sun, Lei Hu, Yonghong Xie, and Xiangyong Zeng.
Cube cryptanalysis of hitag2 stream cipher. In Interna-
tional Conference on Cryptology and Network Security,
pages 15–25. Springer, 2011.
[63] Jos Tamas.
Secrets of
the
sim.
2013.
http://www.hackingprojects.net/2013/04/
secrets-of-sim.html.
[64] Ramtine Toﬁghi-Shirazi, Irina-Mariuca Asavoae,
Philippe Elbaz-Vincent, and Thanh-Ha Le. Defeating
opaque predicates statically through machine learning
and binary analysis. In Proceedings of the 3rd ACM
Workshop on Software Protection, pages 3–14, 2019.
[65] Ramtine Toﬁghi-Shirazi, Maria Christoﬁ, Philippe
Elbaz-Vincent, and Thanh-Ha Le. Dose: Deobfusca-
In Proceedings
tion based on semantic equivalence.
of the 8th Software Security, Protection, and Reverse
Engineering Workshop, pages 1–12, 2018.
[66] Julian R Ullmann. An algorithm for subgraph isomor-
phism. Journal of the ACM (JACM), 23(1):31–42, 1976.
[67] Roel Verdult. The (in) security of proprietary cryptog-
raphy. PhD thesis, [Sl: sn], 2015.
[68] Roel Verdult, Flavio D Garcia, and Josep Balasch. Gone
in 360 seconds: Hijacking with hitag2. In Presented
as part of the 21st USENIX Security Symposium, pages
237–252, 2012.
[69] Roel Verdult, Flavio D Garcia, and Baris Ege. Disman-
tling megamos crypto: Wirelessly lockpicking a vehicle
immobilizer. In Supplement to the Proceedings of 22nd
USENIX Security Symposium, pages 703–718, 2015.
[70] Aram Verstegen, Peter Schwabe, Iskander Kuijer, and
Roel Verdult.
Press to unlock: Analysis, reverse-
engineering and implementation of hitag2-based remote
keyless entry systems. 2018.
570    30th USENIX Security Symposium
USENIX Association
[71] Michael Weiner, Maurice Massar, Erik Tews, Dennis
Giese, and Wolfgang Wieser. Security analysis of a
widely deployed locking system. In Proceedings of the
2013 ACM SIGSAC conference on Computer & commu-
nications security, pages 929–940, 2013.
[72] I.C. Wiener. Hitag2 speciﬁcation, reference implementa-
tion and test vectors, 2007. http://cryptolib.com/
ciphers/hitag2.
[73] Lennert Wouters, Eduard Marin, Tomer Ashur, Benedikt
Gierlichs, and Bart Preneel. Fast, furious and insecure:
Passive keyless entry and start systems in modern super-
cars. IACR Transactions on Cryptographic Hardware
and Embedded Systems, 2019(3):66–85, May 2019.
[74] x3chun.
Crypto searcher, 2004.
https:
//web.archive.org/web/20050211180634/http:
//x3chun.wo.to/.
[75] Dongpeng Xu, Jiang Ming, Yu Fu, and Dinghao Wu.
Vmhunt: A veriﬁable approach to partially-virtualized
binary code simpliﬁcation. In Proceedings of the 2018
ACM SIGSAC Conference on Computer and Communi-
cations Security, pages 442–458, 2018.
[76] Dongpeng Xu, Jiang Ming, and Dinghao Wu. Crypto-
graphic function detection in obfuscated binaries via
bit-precise symbolic loop mapping. In 2017 IEEE Sym-
posium on Security and Privacy (SP), pages 921–937.
IEEE, 2017.
[77] Babak Yadegari. Automatic deobfuscation and reverse
engineering of obfuscated code. 2016.
A Path Oracle Policy – an example
Figure 9: Example stream cipher ARM assembly snippet
Suppose the graph construction is run on the example ARM
assembly snippet given in Figure 9. We start with S =
(G,P,B), with P = true. Line 4 contains conditional instruc-
tion Branch Greater/Equal (BGE). During the ﬁrst visit of this
instruction, we have i = 0, P = true, and c = (R8 ≤ 0). Since
the value of R8 is unknown, c is underdetermined. The path or-
acle policy prescribes TAKE_BOTH. Thus, we get P = (R8 ≤ 0),
B4[0] = true, and S(cid:48) = (G(cid:48),P(cid:48),B(cid:48)), with P(cid:48) = (R8 > 0) and
B(cid:48)
4[0] = false. For state S, the instruction is evaluated, and
thus the construction continues on line 11, and hence termi-
nates. For S(cid:48), the instruction is skipped, thereby visiting the
body of the loop. Eventually, S(cid:48) revisits the instruction at line
4. This time we have c = (R8 ≤ 1), i = 1, P(cid:48) = (R8 > 0) and
4[0] = false. Since P(cid:48) ∧ c is underdetermined, we query the
B(cid:48)
path oracle, and obtain TAKE_FALSE, causing another visit
of the loop’s body. Finally, at i = n, we get c = R8 ≤ n and
P(cid:48) = (R8 > n−1). We obtain TAKE_TRUE from the path oracle.
Thus, the construction terminates. We obtain two graphs; one
corresponding to predicate R8 ≤ 0, and another corresponding
to R8 = n. The latter describes n iterations of the algorithm,
exactly conforming to our goal. The former describes zero
iterations, and thus, contains a negligible amount of nodes.
Therefore, we accept the small amount of overhead this graph
induces during later stages of the analysis.
B Miscellaneous rewrite rules
Besides the rewrite rules already described, we apply ad-
ditional miscellaneous rules. They were conceived through
continuous application of our framework to code fragments
from various sources, and subsequent stumbling upon varia-
tions between the processed result generated from supposedly
semantically equivalent code. We highlight these rules below.
Different compilers have different optimization strategies. As
such, some ﬁnetuning of these rules may be necessary when
analyzing code produced by a vastly different compiler than
those already accounted for.
There are various means of doubling the value of an arbi-
trary expression x. For example, MULT(x,2), but also ADD(x,x)
and x> c1,c2) and
AND(ROTATE(x,c1),c2), are equivalent if c2 > c1,c2).
R4
8
R4
8
ROT
0xff
AND
>>
0xff
AND
Lastly, we distribute multiplications over additions.
R3
4
R3
2
+
2
MULT
MULT
8
+
USENIX Association
30th USENIX Security Symposium    571
1MOVR4,#0;setR4to02_begin:3CMPR4,R8;compareR4toR84BGE_end;breakloopifR4>=R85LDRBR5,[R4,R7];loadR7[R4]intoR56BL;callgenerator7EORR5,R0,R5;XORoutputbytewithR58STRBR5,[R4,R6];storeresultatR6[R4]9ADDR4,R4,#1;incrementR410B_begin;continueatbeginning11_end:C Sample signature deﬁnition
Given below is a snippet taken from the (N)LFSR signature
bundled with our implementation of the framework.
IDENTIFIER (Non-)Linear feedback shift register
VARIANT A
...
VARIANT C
TRANSIENT layer0:OR(AND(1,OPAQUE),OPAQUE<<1);
TRANSIENT layer1:OR(AND(1,OPAQUE),layer0<<1);
TRANSIENT layer2:OR(AND(1,OPAQUE),layer1<<1);
layer3:OR(AND(1,OPAQUE),layer2<<1);
An (N)LFSR can be implemented in software by various
means. For e.g., rather than shifting to the left, the register
may shift to the right instead, placing the new bit generated by
the feedback function at the most signiﬁcant position. Further-
more, a left shift of one bit is equivalent to a multiplication
with 2, or an addition with itself. Also, the newly generated
bit is normally appended to the register through a bitwise
or. However, directly after a shift operation is performed, the
vacant bit is always 0. Hence, using an exclusive-or, or even
an addition instead is equivalent. Due to these naturally occur-
ring variations, several variants of the signature are deﬁned.
In this example, we take a closer look at variant C, which is
the most typical.
As discussed in Section 11, we take n = 4. Hence, the
signature should capture 4 iterations of an (N)LFSR. Each
iteration, the register shifts one position to the left, and a
new bit is generated by an unknown feedback function L and
placed at position 0 by means of a bitwise or. Each round
refers to the previous through its label, i.e. layer[0-3]. The
initial state is the result of an unknown initialization function,
hence represented by OPAQUE. L is also unknown, and thus
represented by OPAQUE. However, it is known to produce a
single output bit. Therefore, it can be assumed that the single
bit is obtained through a bitwise-and with 1, before being
inserted into the register by means of a bitwise or. Finally, all
iterations except the last form intermediate steps towards the
register’s ﬁnal value. By specifying the TRANSIENT keyword,
we allow the broker to translate the intermediate steps into a
more optimized DFG representation.
D Implementation
An implementation of the framework described in this paper is
available for download17. It comes in the form of a plug-in for
the popular IDA disassembler. At the time of writing, support
is implemented for 32 bit ARM binaries. The architecture
is modular, and expanding support to other architectures is
relatively straightforward. Figure 10 shows a sample analysis
report, and a DFG plot generated by our implementation.
17https://github.com/wheres-crypto/wheres-crypto
(a) Sample analysis report
(b) DFG plot generated from assembly, highlighting an LFSR
Figure 10: An impression of the implementation of our framework
572    30th USENIX Security Symposium
USENIX Association