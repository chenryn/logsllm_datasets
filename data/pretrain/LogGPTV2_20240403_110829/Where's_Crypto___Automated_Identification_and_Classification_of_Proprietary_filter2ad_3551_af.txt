### References

1. **PhD Thesis, 2017.**
   
2. **de Koning Gans, Gerhard, Jaap-Henk Hoepman, and Flavio D. Garcia.** "A Practical Attack on the Mifare Classic." In *International Conference on Smart Card Research and Advanced Applications*, pages 267–282. Springer, 2008.

3. **Driessen, Benedikt, Ralf Hund, Carsten Willems, Christof Paar, and Thorsten Holz.** "Don’t Trust Satellite Phones: A Security Analysis of Two Satphone Standards." In *2012 IEEE Symposium on Security and Privacy*, pages 128–142. IEEE, 2012.

4. **Driessen, Benedikt, Ralf Hund, Carsten Willems, Christof Paar, and Thorsten Holz.** "An Experimental Security Analysis of Two Satphone Standards." *ACM Transactions on Information and System Security (TISSEC)*, 16(3):1–30, 2013.

5. **Dunkelman, Orr, Nathan Keller, and Adi Shamir.** "A Practical-Time Related-Key Attack on the Kasumi Cryptosystem Used in GSM and 3G Telephony." In *Annual Cryptology Conference*, pages 393–410. Springer, 2010.

6. **Eisenbarth, Thomas, Timo Kasper, Amir Moradi, Christof Paar, Mahmoud Salmasizadeh, and Mohammad T. Manzuri Shalmani.** "On the Power of Power Analysis in the Real World: A Complete Break of the Keeloq Code Hopping Scheme." In *Annual International Cryptology Conference*, pages 203–220. Springer, 2008.

7. **ETSI.** "300 392-7 v3.3.1 (2012-07) European Standard (Telecommunication Series) Terrestrial Trunked Radio (TETRA); Voice Plus Data (V+D); Part 7: Security." *European Telecommunications Standards Institute (ETSI)*, 2012. [Online]. Available: https://www.etsi.org/deliver/etsi_en/300300_300399/30039207/03.03.01_60/en_30039207v030301p.pdf

8. **Garba, Peter, and Matteo Favaro.** "Saturn—Software Deobfuscation Framework Based on LLVM." In *Proceedings of the 3rd ACM Workshop on Software Protection*, pages 27–38, 2019.

9. **Garcia, Flavio D., Gerhard de Koning Gans, Ruben Muijrers, Peter Van Rossum, Roel Verdult, Ronny Wichers Schreur, and Bart Jacobs.** "Dismantling Mifare Classic." In *European Symposium on Research in Computer Security*, pages 97–114. Springer, 2008.

10. **Garcia, Flavio D., Peter Van Rossum, Roel Verdult, and Ronny Wichers Schreur.** "Wirelessly Pickpocketing a Mifare Classic Card." In *2009 30th IEEE Symposium on Security and Privacy*, pages 3–15. IEEE, 2009.

11. **Goldberg, Ian, David Wagner, and Lucky Green.** "The Real-Time Cryptanalysis of A5/2." *Rump Session of Crypto*, 1999, page 16.

12. **Gröbert, Felix, Carsten Willems, and Thorsten Holz.** "Automated Identification of Cryptographic Primitives in Binary Programs." In *Recent Advances in Intrusion Detection*, pages 41–60, 2011.

13. **Guilfanov, Ilfak.** "Findcrypt2." February 2006. [Online]. Available: http://www.hexblog.com/?p=28

14. **Gutmann, Peter.** *Cryptographic Security Architecture: Design and Verification*. Springer Science & Business Media, 2003. Pages 293.

15. **Hill, Gregory D., and Xavier J.A. Bellekens.** "Deep Learning Based Cryptographic Primitive Classification." *arXiv preprint arXiv:1709.08385*, 2017.

16. **Keliher, Liam Timothy.** "Linear Cryptanalysis of Substitution-Permutation Networks." Queen’s University, 2003.

17. **Kerckhoffs, Auguste.** "La cryptographie militaire." *Journal des Sciences Militaires*, IX:5–83, 161–191, 1883.

18. **Kim, Jongsung, Seokhie Hong, Bart Preneel, Eli Biham, Orr Dunkelman, and Nathan Keller.** "Related-Key Boomerang and Rectangle Attacks." *IACR Cryptology ePrint Archive*, 2010:19, 2010.

19. **Lagadec, Philippe.** "Balbuzard." 2014. [Online]. Available: http://www.decalage.info/en/python/balbuzard

20. **Lestringant, Pierre, Frédéric Guihéry, and Pierre-Alain Fouque.** "Automated Identification of Cryptographic Primitives in Binary Code with Data Flow Graph Isomorphism." In *Proceedings of the 10th ACM Symposium on Information, Computer and Communications Security*, pages 203–214. ACM, 2015.

21. **Literatecode.** "Draft Crypto Analyzer (Draca)." May 2013. [Online]. Available: http://www.literatecode.com/draca

22. **Loki.** "Snd Crypto Scanner (Olly/Immunity Plugin)." 2008. [Online]. Available: https://web.archive.org/web/20080321134709/http://tuts4you.com/forum/index.php?showtopic=15447

23. **Manifavas, Charalampos, George Hatzivasilis, Konstantinos Fysarakis, and Yannis Papaefstathiou.** "A Survey of Lightweight Stream Ciphers for Embedded Systems." *Security and Communication Networks*, 9(10):1226–1246, 2016.

24. **Matenaar, Felix, Andre Wichmann, Felix Leder, and Elmar Gerhards-Padilla.** "CIS: The Crypto Intelligence System for Automatic Detection and Localization of Cryptographic Functions in Current Malware." In *2012 7th International Conference on Malicious and Unwanted Software*, pages 46–53. IEEE, 2012.

25. **Maximov, Alexander, Thomas Johansson, and Steve Babbage.** "An Improved Correlation Attack on A5/1." In *International Workshop on Selected Areas in Cryptography*, pages 1–18. Springer, 2004.

26. **Meijer, Carlo, and Roel Verdult.** "Ciphertext-Only Cryptanalysis on Hardened Mifare Classic Cards." In *Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security*, pages 18–30, 2015.

27. **Menezes, Alfred J., Jonathan Katz, Paul C. van Oorschot, and Scott A. Vanstone.** *Handbook of Applied Cryptography*. CRC Press, 1996.

28. **Microchip.** "Hopping Decoder Using a PIC16C56, AN642." 1998. [Online]. Available: https://web.archive.org/web/20080916043223/http://www.keeloq.boom.ru/decryption.pdf

29. **Mr Paradox, AT4RE.** "Hash & Crypto Detector (HCD)." 2009. [Online]. Available: https://web.archive.org/web/20091203010936/http://www.at4re.com/download.php?view.8

30. **Newsome, James, and Dawn Xiaodong Song.** "Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software." In *NDSS*, volume 5, pages 3–4. Citeseer, 2005.

31. **Nohl, Karsten, David Evans, Starbug, and Henryk Plötz.** "Reverse-Engineering a Cryptographic RFID Tag." In *USENIX Security Symposium*, volume 28, 2008.

32. **Nohl, Karsten, Erik Tews, and Ralf-Philipp Weinmann.** "Cryptanalysis of the DECT Standard Cipher." In *International Workshop on Fast Software Encryption*, pages 1–18. Springer, 2010.

33. **Plohmann, Daniel, and Alexander Hanel.** "Simpliﬁre." *IDAScope*, 2012.

34. **Salwan, Jonathan, Sébastien Bardin, and Marie-Laure Potet.** "Symbolic Deobfuscation: From Virtualized Code Back to the Original." In *International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment*, pages 372–392. Springer, 2018.

35. **snaker, Maxx.** "Kanal - Krypto Analyzer for PEid." 2015. [Online]. Available: http://www.dcs.fmph.uniba.sk/zri/6.2/prednaska/tools/PEiD/plugins/kanal.htm

36. **Soos, Mate.** "Enhanced Gaussian Elimination in DPLL-Based SAT Solvers." In *POS@SAT*, pages 2–14, 2010.

37. **Štembera, Petr, and Martin Novotny.** "Breaking Hitag2 with Reconfigurable Hardware." In *2011 14th Euromicro Conference on Digital System Design*, pages 558–563. IEEE, 2011.

38. **Strobel, Daehyun, Benedikt Driessen, Timo Kasper, Gregor Leander, David Oswald, Falk Schellenberg, and Christof Paar.** "Fuming Acid and Cryptanalysis: Handy Tools for Overcoming a Digital Locking and Access Control System." In *Annual Cryptology Conference*, pages 147–164. Springer, 2013.

39. **Sun, Siwei, Lei Hu, Yonghong Xie, and Xiangyong Zeng.** "Cube Cryptanalysis of Hitag2 Stream Cipher." In *International Conference on Cryptology and Network Security*, pages 15–25. Springer, 2011.

40. **Tamas, Jos.** "Secrets of the SIM." 2013. [Online]. Available: http://www.hackingprojects.net/2013/04/secrets-of-sim.html

41. **Toﬁghi-Shirazi, Ramtine, Irina-Mariuca Asavoae, Philippe Elbaz-Vincent, and Thanh-Ha Le.** "Defeating Opaque Predicates Statically through Machine Learning and Binary Analysis." In *Proceedings of the 3rd ACM Workshop on Software Protection*, pages 3–14, 2019.

42. **Toﬁghi-Shirazi, Ramtine, Maria Christofi, Philippe Elbaz-Vincent, and Thanh-Ha Le.** "DOSE: Deobfuscation Based on Semantic Equivalence." In *Proceedings of the 8th Software Security, Protection, and Reverse Engineering Workshop*, pages 1–12, 2018.

43. **Ullmann, Julian R.** "An Algorithm for Subgraph Isomorphism." *Journal of the ACM (JACM)*, 23(1):31–42, 1976.

44. **Verdult, Roel.** "The (In)security of Proprietary Cryptography." PhD thesis, 2015.

45. **Verdult, Roel, Flavio D. Garcia, and Josep Balasch.** "Gone in 360 Seconds: Hijacking with Hitag2." In *Presented as part of the 21st USENIX Security Symposium*, pages 237–252, 2012.

46. **Verdult, Roel, Flavio D. Garcia, and Baris Ege.** "Dismantling Megamos Crypto: Wirelessly Lockpicking a Vehicle Immobilizer." In *Supplement to the Proceedings of 22nd USENIX Security Symposium*, pages 703–718, 2015.

47. **Verstegen, Aram, Peter Schwabe, Iskander Kuijer, and Roel Verdult.** "Press to Unlock: Analysis, Reverse-Engineering and Implementation of Hitag2-Based Remote Keyless Entry Systems." 2018.

48. **Weiner, Michael, Maurice Massar, Erik Tews, Dennis Giese, and Wolfgang Wieser.** "Security Analysis of a Widely Deployed Locking System." In *Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security*, pages 929–940, 2013.

49. **Wiener, I.C.** "Hitag2 Specification, Reference Implementation and Test Vectors." 2007. [Online]. Available: http://cryptolib.com/ciphers/hitag2

50. **Wouters, Lennert, Eduard Marin, Tomer Ashur, Benedikt Gierlichs, and Bart Preneel.** "Fast, Furious and Insecure: Passive Keyless Entry and Start Systems in Modern Supercars." *IACR Transactions on Cryptographic Hardware and Embedded Systems*, 2019(3):66–85, May 2019.

51. **x3chun.** "Crypto Searcher." 2004. [Online]. Available: https://web.archive.org/web/20050211180634/http://x3chun.wo.to/

52. **Xu, Dongpeng, Jiang Ming, Yu Fu, and Dinghao Wu.** "VMHunt: A Verifiable Approach to Partially-Virtualized Binary Code Simplification." In *Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security*, pages 442–458, 2018.

53. **Xu, Dongpeng, Jiang Ming, and Dinghao Wu.** "Cryptographic Function Detection in Obfuscated Binaries via Bit-Precise Symbolic Loop Mapping." In *2017 IEEE Symposium on Security and Privacy (SP)*, pages 921–937. IEEE, 2017.

54. **Yadegari, Babak.** "Automatic Deobfuscation and Reverse Engineering of Obfuscated Code." 2016.

### A Path Oracle Policy – An Example

Suppose the graph construction is run on the example ARM assembly snippet given in Figure 9. We start with \( S = (G, P, B) \), where \( P = \text{true} \). Line 4 contains the conditional instruction Branch Greater/Equal (BGE). During the first visit of this instruction, we have \( i = 0 \), \( P = \text{true} \), and \( c = (R8 \leq 0) \). Since the value of \( R8 \) is unknown, \( c \) is underdetermined. The path oracle policy prescribes `TAKE_BOTH`. Thus, we get \( P = (R8 \leq 0) \), \( B4[0] = \text{true} \), and \( S' = (G', P', B') \), with \( P' = (R8 > 0) \) and \( B'_4[0] = \text{false} \). For state \( S \), the instruction is evaluated, and thus the construction continues on line 11, and hence terminates. For \( S' \), the instruction is skipped, thereby visiting the body of the loop. Eventually, \( S' \) revisits the instruction at line 4. This time we have \( c = (R8 \leq 1) \), \( i = 1 \), \( P' = (R8 > 0) \), and \( B'_4[0] = \text{false} \). Since \( P' \wedge c \) is underdetermined, we query the path oracle, and obtain `TAKE_FALSE`, causing another visit of the loop’s body. Finally, at \( i = n \), we get \( c = R8 \leq n \) and \( P' = (R8 > n-1) \). We obtain `TAKE_TRUE` from the path oracle. Thus, the construction terminates. We obtain two graphs: one corresponding to the predicate \( R8 \leq 0 \), and another corresponding to \( R8 = n \). The latter describes \( n \) iterations of the algorithm, exactly conforming to our goal. The former describes zero iterations, and thus, contains a negligible amount of nodes. Therefore, we accept the small amount of overhead this graph induces during later stages of the analysis.

### B Miscellaneous Rewrite Rules

Besides the rewrite rules already described, we apply additional miscellaneous rules. These were conceived through continuous application of our framework to code fragments from various sources, and subsequent identification of variations between the processed results generated from supposedly semantically equivalent code. We highlight these rules below:

- **Different Compilers, Different Optimization Strategies:** Some fine-tuning of these rules may be necessary when analyzing code produced by a vastly different compiler than those already accounted for.
- **Doubling an Expression:** There are various means of doubling the value of an arbitrary expression \( x \). For example, `MULT(x, 2)`, but also `ADD(x, x)`.
- **Bitwise Operations:** `AND(ROTATE(x, c1), c2)` and `ROTATE(AND(x, c1), c2)` are equivalent if \( c2 > c1 \).
- **Distributing Multiplications over Additions:** `MULT(R3, 4)` can be rewritten as `ADD(MULT(R3, 2), MULT(R3, 2))`.

### C Sample Signature Definition

Given below is a snippet taken from the (N)LFSR signature bundled with our implementation of the framework.

#### IDENTIFIER
(Non-)Linear Feedback Shift Register (N)LFSR

#### VARIANT A
...

#### VARIANT C
```plaintext
TRANSIENT layer0: OR(AND(1, OPAQUE), OPAQUE << 1);
TRANSIENT layer1: OR(AND(1, OPAQUE), layer0 << 1);
TRANSIENT layer2: OR(AND(1, OPAQUE), layer1 << 1);
layer3: OR(AND(1, OPAQUE), layer2 << 1);
```

An (N)LFSR can be implemented in software by various means. For example, rather than shifting to the left, the register may shift to the right instead, placing the new bit generated by the feedback function at the most significant position. Furthermore, a left shift of one bit is equivalent to a multiplication with 2, or an addition with itself. Also, the newly generated bit is normally appended to the register through a bitwise OR. However, directly after a shift operation is performed, the vacant bit is always 0. Hence, using an exclusive-OR, or even an addition instead is equivalent. Due to these naturally occurring variations, several variants of the signature are defined. In this example, we take a closer look at variant C, which is the most typical.

As discussed in Section 11, we take \( n = 4 \). Hence, the signature should capture 4 iterations of an (N)LFSR. Each iteration, the register shifts one position to the left, and a new bit is generated by an unknown feedback function \( L \) and placed at position 0 by means of a bitwise OR. Each round refers to the previous through its label, i.e., `layer[0-3]`. The initial state is the result of an unknown initialization function, hence represented by `OPAQUE`. \( L \) is also unknown, and thus represented by `OPAQUE`. However, it is known to produce a single output bit. Therefore, it can be assumed that the single bit is obtained through a bitwise AND with 1, before being inserted into the register by means of a bitwise OR. Finally, all iterations except the last form intermediate steps towards the register’s final value. By specifying the `TRANSIENT` keyword, we allow the broker to translate the intermediate steps into a more optimized DFG representation.

### D Implementation

An implementation of the framework described in this paper is available for download. It comes in the form of a plug-in for the popular IDA disassembler. At the time of writing, support is implemented for 32-bit ARM binaries. The architecture is modular, and expanding support to other architectures is relatively straightforward. Figure 10 shows a sample analysis report and a DFG plot generated by our implementation.

1. **GitHub Repository:** https://github.com/wheres-crypto/wheres-crypto

#### (a) Sample Analysis Report
#### (b) DFG Plot Generated from Assembly, Highlighting an LFSR

**Figure 10:** An impression of the implementation of our framework.

---

This version of the text is more structured, clear, and professional, with consistent formatting and improved readability.