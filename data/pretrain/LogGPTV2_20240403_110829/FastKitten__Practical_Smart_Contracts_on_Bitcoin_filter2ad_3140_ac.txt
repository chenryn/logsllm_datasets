by the Crypto library. This transaction distributes the coins
according to the terminated contract. In case of a protocol
abort, the coins initially put by the users will be refunded to
all honest parties. If any party was caught cheating, this party
will not receive back its coins. This means the money will
stay in control of the enclave and will never be spent.
4 Adversary Model
The FASTKITTEN protocol is executed n parties P1, . . . ,Pn
and an operator Q (who owns the TEE) with the goal of exe-
cuting a smart contract C. FASTKITTEN’s design depends on
a TEE to ensure its conﬁdentiality and integrity. Our design
is TEE-agnostic, even if our implementation is based on Intel
SGX. Recent research showed that the security and privacy
guarantees of SGX can be affected by memory-corruption
vulnerabilities [11], architectural [13] and micro-architectural
side-channel attacks [60]. For the operator, we assume that Q
has full control over the machine and consequently can exe-
cute arbitrary code with supervisor privileges. While memory
corruption vulnerabilities can exist in the enclave code, a
malicious operator must exploit such vulnerabilities through
the standard interface between the host process and the en-
clave. For the enclave code, we assume a common code-
reuse defense such as control-ﬂow integrity (CFI) [3, 15],
or ﬁne-grained code randomization [23, 42] to be in place
and active. Architectural side-channel attacks, e.g., based on
caches, can expose access patterns [13] from SGX enclaves
(and therefore our FASTKITTEN prototype). However, this
prompted the community to develop a number of software
mitigations [12, 18, 27, 56, 57] and new hardware-based so-
lutions [22, 28, 52]. Microarchitectural side-channel attacks
like Foreshadow [60] can extract plaintext data and effec-
tively undermine the attestation process FASTKITTEN relies
on, leaking secrets and enabling the enclave to run a differ-
ent application than agreed on by the parties; however, the
vulnerability enabling Foreshadow was already patched by
Intel [32]. Since existing defenses already target SGX vul-
nerabilities and since FASTKITTEN’s design is TEE agnostic
(i.e., it can also be implemented using ARM TrustZone or
next-generation TEEs), we consider mitigating side-channel
leakage as an orthogonal problem and out of scope for this
paper.
For our protocol we consider a byzantine adversary [41],
which means that corrupted parties can behave arbitrarily.
In particular, this includes aborting the execution, dropping
messages, and changing their inputs and outputs even if it
means that they will lose money. FASTKITTEN is secure even
if n parties are corrupt (including the two cases where only
the operator is honest, and only one party is honest but the
operator is corrupt). We show that no honest party will lose
coins, a corrupt party will be penalized and that no adversary
can tamper with the result of the contract execution. While
we prove security in this very strong adversarial model, we
additionally observe that incentive-driven parties (i.e., parties
that aim at maximizing their ﬁnancial proﬁts) will behave
honestly, which signiﬁcantly boosts efﬁciency of our scheme.
We stress that security of FASTKITTEN relies on the security
of the underlying blockchain. We require that the underlying
blockchain systems satisﬁes three security properties: live-
ness, consistency and immutability [26]. Liveness means that
valid transactions are guaranteed to be included within the
next δ blocks. Consistency guarantees that eventually all users
have the same view on the current state of the blockchain
(i.e., the transactions processed and their order). In addition,
blockchains also are immutable, which means that once trans-
actions end up in the blockchain they cannot be reverted. Most
blockchain based cryptocurrencies guarantee consistency and
immutability only after some time has passed, where time
is measured by so-called conﬁrmations. A block bi is con-
ﬁrmed k-times if there exists a valid chain extending bi with
k further blocks. Once block bi has been sufﬁciently often
conﬁrmed, we can assume that the transactions in bi cannot
be reverted and all honest parties agree on an order of the
chain (b0,b1,b2, . . . ,bi). For most practical purposes k can be
a small constant, i.e., in Bitcoin it is generally believed that
for k = 6 a block can be assumed ﬁnal.4
5 The FASTKITTEN Protocol
In this section we give a more detailed description of our pro-
tocol, which includes the speciﬁcation of the protocol run by
Q and honest parties P1, . . . ,Pn, all transactions and a descrip-
tion of the enclave program FASTKITTEN. The interaction
between Q,Pi and the blockchain is depicted in Figure 2. We
ﬁrst describe the interactions with the blockchain and TEE.
5.1 Modeling the Blockchain
We will introduce some basic concepts of cryptocurrencies
that are relevant for our work before we describe our high-
level design. Cryptocurrencies are built using blockchains—a
distributed data structure that is maintained by special parties
called miners. The blockchain is comprised as a chain of
blocks (b0,b1,b2, . . .) that store the transactions of the system.
The miners create new blocks by verifying new transactions
and comprising them into new blocks that extend the tail of
the chain. New blocks are created within some period of time
t, where, for instance, in Bitcoin a new valid block is created
every 10 minutes on average.
In cryptocurrencies users are identiﬁed by addresses, where an
address is represented by a public key. To send coins from one
address to another, most cryptocurrencies rely on transactions.
If a user A with address pkA wants to send x coins to user B
with address pkB, she creates a transaction tx which states
that x coins from address pkA are transferred to pkB. Such a
4We notice that in blockchain-based cryptocurrencies there is no guaran-
teed ﬁnality, and even for very large values of k blocks can be reverted in
principle. We emphasize however that even for small values of k reverting
blocks becomes impossible in practice very quickly.
806    28th USENIX Security Symposium
USENIX Association
transaction tx is represented by the following tuple:
tx := (tx.Input, tx.Output, tx.Time, tx.Data),
where tx.Input refers to a previously unspent transaction,
tx.Output denotes the address to which tx.Value are going
to be transferred to. Note that a transaction tx is unspent if
it is not referred to by any other transaction in its Input ﬁeld.
Further, tx.Time ∈ N, which denotes the block counter after
which this transaction will be included by miners, i.e., tx can
be integrated into blocks bi,bi+1, ..., where i = tx.Time. Fi-
nally, tx.Data ∈ {0,1}∗ is a data ﬁeld that can store arbitrary
raw data. Similar to [5], we will often represent transactions
by tables as shown exemplary in the table below, where the
ﬁrst row of the table gives the name of the transaction.
Transaction tx
tx.Input: Coins from unspent input transaction
tx.Output: Coins to receiver address
Some timelock (optional)
Some data (optional)
tx.Time:
tx.Data:
Notice that a transaction tx only becomes valid if it is signed
with the corresponding secret key of the output address from
tx.Input. We emphasize that the properties described above
are very mild and are for instance achieved by the most promi-
nent cryptocurrency Bitcoin.
In order to model interaction with the cryptocurrency, we use
a simpliﬁed blockchain functionality BC, which maintains a
continuously growing chain of blocks. Internally it stores a
block counter c which starts initially with 0 and is increased on
average every t minutes. Every time the counter is increased,
a new block will be created and all parties are notiﬁed. To
address the uncertainty of the block creation duration we give
the adversary control over the exact time when the counter is
increased but it must not deviate more than ∆ ∈ [t−1] seconds
from t. Whenever any party publishes a valid transaction, it is
guaranteed to be included in any of the next δ blocks.
Parties can interact with the blockchain functionality BC us-
ing the following commands.
• BC.post(tx): If the transaction tx is valid (i.e., all inputs
refer to unspent transactions assigned to creator of tx
and the sum of all output coins is not larger than the sum
of all input coins) then tx is stored in any of the blocks
{bc+1, . . . ,bc+δ}.
• BC.getAll(i): If i < c, this function returns the latest
block count c − 1 and a list of blocks that extend bi:
b = (bi+1, . . . ,bc)
• BC.getLast(): The function getLast can be called by
any party of the protocol and returns the last (ﬁnished)
block and its counter: (c,bc).
therein, which we model using the function Extends. It takes
as input, a chain of blocks b and a checkpoint block bcp and
outputs 1 if b = (bcp+1, . . . ,bcp+i) is a valid chain of blocks
extending bcp and otherwise it outputs 0. In Section 6 we
give more details on the validation algorithm, and how this
function is implemented for the Bitcoin system. Recall, that
we assume an adversary which cannot compute a chain of
blocks of length k by itself (c.f. Section 4). This guarantees
that he cannot produce a false chain such that this function
outputs 1. To make the position of some transaction tx inside
a chain of blocks explicit, we write (cid:96) := Pos(b, tx) when the
transaction is part of the (cid:96)-th block of b. If the transaction is
in none of the blocks, the function returns ∞. For more details
on the transaction and block veriﬁcation we refer the reader
to [7, 26, 51].
5.2 Modeling the TEE
In order to model the functionality of a TEE, we follow the
work of Pass et. al. [54]. We explain here only brieﬂy the
simpliﬁed version of the TEE functionality whose formal
deﬁnition can be found in [54, Fig. 1]. On initialization, the
TEE generates a pair of signing keys (mpk,msk) which we
call master public key and master secret key of the TEE. The
TEE functionality has two enclave operations: install and
resume. The operation TEE.install takes as input a program
p which is then stored under an enclave identiﬁer eid. The
program stored inside an enclave can be executed via the
second enclave operation TEE.resume which takes as input
an enclave identiﬁer eid, a function f and the function input in.
The output of TEE.resume is the output out of the program
execution and a quote  over the tuple (eid,p,out). In the
protocol description we abstract from the details how the
users verify the quote that is generated through the enclave
attestation. Since we only consider one instance E of the
speciﬁc program p, we will simplify the resume command
[out, ] := TEE.resume(eid, f,in) and write5:
[out, ] := E.f(in)
For every attestable TEE there must exist a function
vrfyQuote(mpk,p,out, ) which on input of a correct quote 
outputs 1, if and only if out was outputted by an enclave with
master public key mpk and which indeed loaded p. Again,
we assume that the adversary cannot forge a quote such that
the function vrfyQuote() outputs 1. For more information on
how this veriﬁcation of the attestation is done in practice we
refer the reader to [54].
5.3 Detailed Protocol Description
As explained in Section 3, our protocol πFASTKITTEN proceeds
in three phases. During the setup phase the contract is in-
stalled in the enclave, attested, and all parties deposit their
For every cryptocurrency there must exist a validation algo-
rithm for validating consistency of the blocks and transactions
5Since we only need the quote of the ﬁrst activation of E, we will omit
this parameter from there on.
USENIX Association
28th USENIX Security Symposium    807
Figure 2: Protocol πFASTKITTEN. Direct black arrows indicate communication between the parties and Q, gray dashed arrows
indicate reading from the blockchain and gray double arrows posting on the blockchain.
808    28th USENIX Security Symposium
USENIX Association
PBCi(C,Si)Initialize(cp,bcp):=BC.getLast()(P,C,bcp)QVerfyEnclave(mpk,pkT, ,txp,%)vrfyQuote(mpk,p(C,P,,bcp),(pkT, ),%)6=1Vrfy(mpk;pkT, )6=1setupFailBC.post(txi)RoundInputjVrfy(pkT;(outC,j); )6=1(ini,j,Sign(ski;ini,j))QWhenChallenged(`,b`):=BC.getLast()txchal(i,j,outC, T)2b` :=Sign(ski;ini,j)BC.post(txresp(i,j,ini,j, )WhenFinal(`,b`):=BC.getLast()txout(J,d,outC)2b`outCWhenTimeout(`,b`):=BC.getLast()`=⌧ﬁnalBC.post(txp)(⌧ﬁnal,b):=BC.getAll(⌧1)9i2[n]txi/2bsetupFailabortQBC,TEE(1)InitEnclave(cp,bcp):=BC.getLast()mpkE:=TEE.install(p(C,P,,bcp))[(pkT, ),%]:=E.genKeys()BC.post(txQ)txQk(⌧1,b):=BC.getAll(cp)cp:=⌧1[(txp, ),·]:=E.Qdep(b)(mpk,pkT, ,txp,%)PiLoadDepositPLoadDepositP⌧2(⌧2,b):=BC.getAll(⌧1)[(outC, ),·]:=E.Pdep(b)outC=txoutFinalize(outC, )Pi(ExecuteTEE1)ExecuteTEEji2[n]Vrfy(pki;ini,si))=1(in(i,j),si))IBC.post(txchal(i,j,outC))|I|=ntxchal2k+ (⌧3,b):=BC.getAll(⌧2)txresp2bVrfy(pki;ini,si))=1(in(i,j),si))I|I|<n[txout,·]:=E.errorProof(b)Finalize()[(outC, ),·]:=E.round(j,I)outC=txoutFinalize()(outC, )Pi(ExecuteTEE)j+1FinalizeBC.post(txout)bcpP,C,bcpmpk,pkT,s,txp,%outC,sini,j,scp,bcpcp,bcpt1,bt2,b`,b`t3,b`,b``,b`tﬁnal,btxQtxitxchaltxresptxptxoutcoins. Then the round execution follows for all m rounds of
the interactive contract. When the contract execution aborts
or ﬁnishes, the protocol enters the ﬁnalize phase. We now ex-
plain all phases and the detailed protocol steps for all involved
parties and the operator Q in depth. The detailed interactions
as well as the subprocedure of the parties and the operator
are displayed in Figure 2, Figure 3 describes the FASTKIT-
TEN enclave program pFK. Overall the protocol requires six
different type of transactions.
Setup phase.
In the setup phase, each party Pi ﬁrst runs
Initialize to generate its key pairs and gets the latest block bcp
which serves as a genesis block or checkpoint of the protocol.
Then Pi sends the set of parties P, the bcp and the contract
C to the operator Q. Upon receiving the initial values from
all n parties, Q runs the subprocedure InitEnclave to initialize
the trusted execution of the enclave program pFK(P,C,κ,bcp)
where κ is the security parameter of the scheme. This security
parameter κ also determines the values for the timeout period
t and the conﬁrmation constant k. This ensures that all parties
and the TEE agree on these ﬁxed values. Once pFK is installed
in the enclave, it generates key pairs for the protocol execution
6. Now, Q can
and in particular the blockchain public key pkT
make its deposit transaction txQ which assigns q coins to the
enclave public key.
Q’s Deposit Transaction txQ
tx.Input:
Some unspent tx from Q
tx.Output: Assign q coins to pkT
Let block counter τ1 denote the time when this transaction
has been included and conﬁrmed in the blockchain. Q loads
all blocks from cp to τ1 as evidence to the enclave. If this evi-
dence is correct, the execution of pFK function Qdep outputs
a penalty transaction txp, stating that after timeout τﬁnal (after
which the protocol must be terminated) the q coins of Q’s
deposit transaction txQ are payed out to the parties P1, . . . ,Pn.
Penalty Transaction txp
tx.Input: Q’s Deposit Transaction txQ
For all i ∈ [n]:
tx.Outputi: Assign ci coins to Pi
Spendable after τﬁnal
tx.Time:
Q sends the penalty transaction to all parties P1, . . . ,Pn, who
run subprocedure VerfyEnclave. This transaction is used
whenever the protocol does not ﬁnish before the ﬁnal time-
out τﬁnal, which equals (3 + 2m)× (δ + k) blocks after the
protocol start (recall, that we use δ to bound the time until
some transaction is guaranteed to be included and it will be
6For simplicity we omit here, that the enclave might need multiple key
pairs for signing transactions and messages.
conﬁrmed after k blocks).7 Only if participant Pi received
this penalty transaction from Q during the setup and veriﬁed
that the program pFK(P,C,κ,b0) is installed in the enclave,
it creates and publishes its deposit transaction.
Pi’s Deposit Transaction txi
tx.Input:
Some unspent tx from Pi