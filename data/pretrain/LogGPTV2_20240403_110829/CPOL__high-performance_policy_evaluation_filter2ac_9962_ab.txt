potential  privacy 
implications  associated  with  distributing 
location data. CPOL provides a solution to this problem by being 
able to handle large number of privacy requests in real time. 
3.  DESIGN 
CPOL is designed with the following goals in mind: 
1.  It provides a high level of expressiveness. In particular, our 
goal was that its policies be comparable in expressiveness to 
KeyNote policies. 
2.  The policy engine can process a large volume of evaluation 
requests on a single machine.  
To provide a specific context for discussion, we will examine how 
CPOL  can be used to enforce privacy policies in the domain of 
location-aware services. In this scenario, each user has a location 
that  is  protected  by  access  rules,  and  can  query  other  users’ 
locations.  Users  may  also  join  roles  such  as  “Students”  or 
“Professors,” and can give access to an entire role using a single 
policy.  To  provide  easier  management,  people  also  have  the 
ability to delegate administrative rights to others. Along with the 
ability to delegate, people are also able to revoke rules created by 
a  particular  user.  This  can  be  useful  if  someone  who  has  been 
given  delegation  rights  is  later  found  to  be  malicious  or  has  a 
password compromised. 
The rest of the section presents the detailed design of CPOL. 
It is laid out as follows:  section 3.1 compares CPOL to KeyNote, 
section 3.2 presents CPOL’s top-level architecture and interfaces, 
section 3.3 discusses access tokens, section 3.4 talks about access 
conditions,  and  section  3.5  provides  an  in-depth  discussion  of 
caching in CPOL. 
3.1  Comparison with KeyNote 
This section highlights CPOL’s expressiveness, as well as its 
limitations,  by  comparing  it  to  KeyNote  [1],  another  policy 
enforcement  system  that  is  widely  used.  CPOL  can  express  a 
wider range of policies than KeyNote in some cases. KeyNote is 
able  to  have  recursively-nested  condition  clauses  and  complex 
licensee  fields,  but  it  lacks  control  over  delegation  privileges, 
roles,  and  multiple  access  levels.  Having  support  for  roles  and 
greater  control  over  delegation  makes  CPOL  much  better suited 
for location privacy enforcement. 
CPOL’s current prototype has a C++ interface for specifying 
policies, rather than a custom language. In general, the interface 
can  be  connected  to  a  policy  reader,  a  GUI  front-end, or a web 
server  for  policy  management.  In  this  section  we  will  show 
CPOL’s  rules  in  a  KeyNote-like  syntax  for  the  purpose  of 
comparison. 
The  Keynote  trust  management  system  is  structured  around 
chains  of  signed  assertions  that  authorize  principals  to  execute 
actions.  At  the  root  of  each  chain  is  a  policy  authorized  by  the 
system  that  gives  a  principal  control  over  a  certain  domain  of 
actions. For example, in the location privacy system, a delegation 
chain may consist of:  
1.  A policy authorized by the system giving complete control to 
an administrator 
2.  A policy authorized by an administrator giving a user Alice 
complete control over her location data. 
3.  A  policy  authorized  by  Alice  giving  Bob  access  to  her 
location 9 AM to 5 PM Monday – Friday.  
Both  CPOL  and  KeyNote  are  based  on  “closed-world” 
assumption  –  a  principal  does  not  have  a  right  unless  explicitly 
authorized by the system and there are no negative rights.  
In KeyNote, the result of evaluating a policy for a requested 
action  is  often  true  or  false;  but  in  general,  KeyNote  returns  a 
compliance  value  that  can  represent  a  variable  level  of  trust. 
CPOL  generalizes  that  notion  by  returning  an  access  token  (a 
multi-variable  object).  This  access  token  encapsulates  a  set  of 
allowed  rights,  instead  of  a  single  right.  Consider  a  situation 
where CPOL is used to determine a user’s access rights to a file in 
a  filesystem.  A  user  would  have to make three separate calls to 
KeyNote  to  determine  read,  write,  and  execute  status  (because 
each right may be delegated separately and rules would have to be 
evaluated for each right). CPOL returns an access token that lists 
all privileges in one request. Figure 1 shows the fields of a CPOL 
rule in a Keynote-style syntax. 
Owner: Alice 
Licensee: Bob 
AccessToken { 
} 
Condition  { 
} 
Figure 2. CPOL rule giving Bob access to Alice’s location 
with room-level precision (with no delegation privileges) 9 
AM – 5 PM when Alice is in the library or the CS building, 
AfterTime = 9 AM 
BeforeTime = 5 PM 
InBuilding = {Library, CS} 
NotInRoom = {ConferenceRoom 1010 CS} 
LocationResolution = RoomLevel 
IdentityResolution = Name 
DelegationPrivileges = None 
except in conference room 1010.
One  limitation  of  KeyNote  is  the  inability  to  control 
delegation. Once Alice has given Bob access to her location, Bob 
implicitly  has  the  ability  to  give  that  same  level  of  access  to 
anyone else. Alice may not want Bob to grant his rights to others. 
KeyNote has no obvious way of controlling this. Like KeyNote, 
CPOL  also  supports  delegation  of  rights.  In  CPOL,  however, 
delegation privileges can be explicitly separated from other access 
rights, giving authorizers more control over their information. An 
example  of  a  CPOL  policy  that  grants  Bob  access  to  Alice’s 
information, but does not allow Bob to delegate rights can be seen 
CreateEntity(String Description) 
RemoveEntity(EntityID Remove) 
Evaluation Interface 
  AccessToken GetAccess(IDList Requester, EntityID Owner, State Inputs) 
Management Interface 
  Entity Functions 
  EntityID 
  Boolean 
  Group Functions 
  GroupID  
  Boolean  
  Boolean 
  Boolean 
  Boolean 
  Rule Functions 
  RuleID  
  Boolean 
CreateGroup(EntityID Owner, String Description) 
RemoveGroup(EntityID Requester, GroupID Remove) 
AddMember(EntityID Requester, GroupID Group, EntityID Member) 
RemoveMember(EntityID Requester, GroupID Group, EntityID OldMember) 
SetGroupRights(EntityID Requester, GroupID Group, EntityID User, GroupToken Rights) 
AddRule(EntityID Requester, EntityID Owner, IDList Licensee, AccessToken A, 
        Condition C) 
RemoveRule(EntityID Requester, EntityID Owner, RuleID OldRule) 
Figure 3. CPOL’s external functions. CPOL also has functions to enumerate entities,  
groups, and rules that are omitted here for the sake of brevity. 
in Figure 2. Of course, Bob could leak or misuse Alice’s location 
data  contrary  to  Alice’s  wishes,  but  that  is  beyond  the  scope  of 
our threat model.  
CPOL, unlike KeyNote, supports roles to help simplify policy 
administration as well as to improve performance. In CPOL, roles 
can be created with a unique identifier and have members added 
to them. Then, a person can grant rights to all the members of a 
role by specifying that role’s identifier as the recipient of access 
rights.  This  functionality  is  very  useful  for  location  privacy 
management. A user may wish to make some location information 
available  to  a  large  group  of  people  such  as  “Students”  or 
“Faculty.”  Using  KeyNote,  there  is  no  easy  way  of  granting 
access to large groups of people. It could be done by individually 
assigning  rights  to  every  member  of  a  group,  or  by  assigning 
rights  to  a  group  key.  Some  groups  may  have  hundreds  or 
thousands  of  members  in  a  large  system,  making  both  of  these 
solutions  very  impractical.  The  first  method  would  require 
individual  users  to  maintain  hundreds  of  policies.  Using  group 
keys  creates  a  separate  key  management  problem,  and  also 
requires policies to be updated whenever the key changes due to a 
membership  update.  CPOL’s  solution  is  much  more  straight-
forward and does not add this additional overhead. 
KeyNote does provide several features that are not supported 
in CPOL. In the “Licensees:” field of a KeyNote policy, one can 
specify Boolean expressions instead of a single key. CPOL allows 
for  a  list  of  principals  that  must  all  be  present  for  the  access  to 
succeed,  but  does  not  directly  support  K-of  or  a  logical  OR  of 
licensees. However, much of the functionality of a logical OR can 
be  achieved  through  the  use  of  roles.  For  the  purposes  of 
enforcing  privacy,  we  found  it  useful  to  require  multiple 
requesters  under  some  circumstances,  such  as  allowing 
emergency personnel to access a users’ location data only when it 
is  also  requested  by  an  authorized  manager.  Being  unable  to 
support  more  complex  licensee  sets  was  not  a  significant 
limitation. 
In the “Condition:” field of a KeyNote policy, it is possible to 
nest  clauses  and  grant  different  levels  of  trust.  CPOL  does  not 
support  nested  conditions  or  multiple  access  levels  in  a  single 
policy.  Instead,  these  complex  conditions  must  be  reduced  into 
multiple  single-condition  policies.  An  example  of  a  nested 
KeyNote  condition  would  be  “A=True  ->  (B=True  ->  Allow, 
C=True  ->  Log)”,  which  is  the  same  as  two  policies  with 
conditions:  “A=True  &&  B=True  ->  Allow”  and  “A=True  && 
B=True  ->  Log”.  Requiring  users  to  split  up  policies  this  way 
again was not a significant limitation. 
KeyNote  also  allows  principals  to  digitally  sign  policies  so 
they  can  be  distributed  over  an  un-trusted  medium.  This  allows 
creation of policies in a decentralized fashion; if Alice wants to 
grant  a  right  to  Bob, she can simply sign a policy rule granting 
that right and send it to him. CPOL does not currently support this 
mechanism of policy distribution. In CPOL, Alice would have to 
authenticate  to a policy administration service that is authorized 
to update the global rule set in order to make changes. The policy 
service  is  then  responsible  for  tagging  rules  with  Alice  as  the 
author.  It  can  use  any  authentication  mechanism,  such  as 
Kerberos or public keys, independent of the CPOL system.  
Finally,  CPOL  provides  an  incremental  way  to  update  the 
global rule set. The rule can only be updated by adding or remove 
individual  rules.  CPOL  takes  advantage  of  this  when  managing 
cache  entries.  Instead  of  invalidating  the  whole  cache  when  a 
change  is  made  to  the  rule  set,  CPOL  only  has  to  invalidate  a 
small subset of the entries (those that with the same authorizer) to 
guarantee correct results. 
3.2  Top-Level Architecture and Interfaces 
The CPOL policy engine is designed to be deployed along with a 
data management system and a web or application server. It has 
two  top-level  interfaces,  one  for  communicating  with  each  of 
these two external processes. The functions associated with each 
interface  can  be  seen  in  Figure  3.  CPOL’s  evaluation  back-end 
has  only  one  function,  GetAccess,  which  determines  an  entity’s 
access rights given an owner and a set of inputs. The evaluation 
interface  is  designed  to  be  connected  to  a  data  management 
process  that  is  responsible  for  enforcing  access  policies.  In  the 
case  where  CPOL  is  used  to  manage  location  privacy,  the  data 
management  process  is  likely  to  be  a  publish/subscribe  type 
system [11] or a modified spatio-temporal database [9]. The data 
manager should be able to understand rights that are returned in 
the  access  token  by  GetAccess,  and  is  solely  responsible  for 
passing  correct  parameters  and  ensuring  that  access  levels  are 
enforced properly. 
CPOL’s management front-end contains functions to add and 
remove  entities,  roles,  and  access  rules  from  the  system.  The 
management interface can be connected to a web server that uses 
authentication  and  encryption,  giving  users  easy  and  secure 
access  to  their  privacy  policies.  The  management  interface’s 
functions are described here to give a better idea of how users can 
interact  with  CPOL.  The  first  two  functions  available  in  the 
management  interface,  AddEntity and RemoveEntity, are used to 
create and delete people and objects in CPOL. These functions do 
not check any credentials; they assume that the call is being made 
by an administrative user. It is the font-end’s job to authenticate 
administrators  and  not  allow  normal  users  to  make  calls  to 
AddEntity and RemoveEntity. 
The  next  set  of  management  functions  is  used  to  create  and 
modify  groups.  These  functions  do  take  the  identity  of  the 
requesting  entity  as  an  argument,  and  should  be  exposed  to  all 
users  so  that  they  can  create  and  modify  their  own  groups. 
Privileges  to  update  groups,  list  members,  and  use  groups  in 
access  rules  can  be  assigned  by  calling  SetGroupRights.  The 
group creator owns the group by default, and must explicitly grant 
permissions to other users for them to be able to access the group. 
Universal  groups  such  as  ‘Everyone’  and  ‘Students’  should  be 
maintained by a system administrator to ensure their integrity. 
two  management 
functions,  AddRule  and 
RemoveRule,  are  used  to  modify  access  policies.  Each  function 
takes the identity of the requester as an argument. If the requester 
and the owner are the same, then the function call is automatically 
allowed.  If  the  requester  is  not  the  owner,  then  the  function 
checks  to  see  if  the  owner  has  given  the  requester  privileges  to 
perform the operation. If this is the case, then the function call is 
allowed,  otherwise  it  will  return  with  permission  denied.  If  the 
AddRule function call is allowed, then a new access rule will be 
inserted into the owner’s policy list. The rule grants the licensee a 
given  level  of  access  A  when  condition  C  is  true.  The  rule 
licensee can be an entity ID, group ID, or list of IDs. If it is a list, 
then all entities in the list must collectively request access in order 
for  the  rule  to  apply.  This  mechanism  can  be  used  to  require 
multiple requesters for access to sensitive information. 
Formally, CPOL can be represented as a five-tuple {E, G, M, 
A, R} of entity IDs, group IDs, membership pairs, access tokens, 
and rules. These elements have the following properties: 
•  E – Entity IDs uniquely identify people and objects in the 
system. Each entity is able to request access to other entities’ 
resources and can have policies governing access to its own 
resources. 