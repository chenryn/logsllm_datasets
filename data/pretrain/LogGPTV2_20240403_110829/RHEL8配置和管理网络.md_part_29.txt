一些应用程序原生支持
MPTCP。大多数情况下，连接和流导向套接字请求到操作系统的
socket（）调用中的 TCP 协议。您可以在 RHEL 中为原生 MPTCP 支持使用
`sysctl`{.literal} 工具启用 MPTCP 支持。MPTCP 实现还允许为请求
`IPPROTO_TCP`{.literal} 调用内核的应用程序使用 MPTCP 协议。
此流程描述了如何启用 MPTCP 支持并准备 RHEL，以便使用 SystemTap 脚本启用
MPTCP 系统范围。
::: title
**先决条件**
:::
安装以下软件包：
::: itemizedlist
-   `kernel-debuginfo`{.literal}
-   `kernel-debuginfo-common`{.literal}
-   `systemtap`{.literal}
-   `systemtap-devel`{.literal}
-   `kernel-devel`{.literal}
-   `nmap-ncat`{.literal}
:::
::: orderedlist
**流程**
1.  在内核中启用 MPTCP 套接字：
    ``` literallayout
    # echo "net.mptcp.enabled=1" > /etc/sysctl.d/90-enable-MPTCP.conf
    # sysctl -p /etc/sysctl.d/90-enable-MPTCP.conf
    ```
2.  使用以下内容创建 `mptcp.stap`{.literal} 文件：
    ``` literallayout
    #!/usr/bin/env stap
    %{
    #include 
    #include 
    %}
    /* according to [1], RSI contains 'type' and RDX
     * contains 'protocol'.
     * [1] https://github.com/torvalds/linux/blob/master/arch/x86/entry/entry_64.S#L79
     */
    function mptcpify () %{
        if (CONTEXT->kregs->si == SOCK_STREAM &&
            (CONTEXT->kregs->dx == IPPROTO_TCP ||
             CONTEXT->kregs->dx == 0)) {
                    CONTEXT->kregs->dx = IPPROTO_MPTCP;
                    STAP_RETVALUE = 1;
        } else {
               STAP_RETVALUE = 0;
        }
    %}
    probe kernel.function("__sys_socket") {
            if (mptcpify() == 1) {
                    printf("command %16s mptcpified\n", execname());
            }
    }
    ```
3.  将 TCP 套接字替换为 MPTCP:
    \# `stap -vg mptcp.stap`{.literal}
    注： 使用 [**Ctrl**]{.keycap}+[**C**]{.keycap} 将连接从 MPTCP 转换回
    TCP。
4.  启动侦听 TCP 端口 4321 的服务器：
    \# `ncat -4 -l 4321`{.literal}
5.  连接到服务器并交换流量。例如，这里的客户端将 \"Hello world\"
    写入服务器 5 次，然后它终止连接。
    ``` literallayout
    # ncat -4 192.0.2.1 4321
    Hello world 1
    Hello world 2
    Hello world 3
    Hello world 4
    Hello world 5
    ```
    按 [**Ctrl**]{.keycap}+[**D**]{.keycap} 退出。
:::
::: orderedlist
**验证步骤**
1.  验证内核中是否启用了 MPTCP：
    ``` literallayout
    # sysctl -a | grep mptcp.enabled
    net.mptcp.enabled = 1
    ```
2.  在 `mptcp.stap`{.literal} 脚本安装内核探测后，会在内核
    `dmesg`{.literal} 输出中出现以下警告：
    ``` literallayout
    # dmesg
    ...
    [ 1752.694072] Kprobes globally unoptimized
    [ 1752.730147] stap_1ade3b3356f3e68765322e26dec00c3d_1476: module_layout: kernel tainted.
    [ 1752.732162] Disabling lock debugging due to kernel taint
    [ 1752.733468] stap_1ade3b3356f3e68765322e26dec00c3d_1476: loading out-of-tree module taints kernel.
    [ 1752.737219] stap_1ade3b3356f3e68765322e26dec00c3d_1476: module verification failed: signature and/or required key missing - tainting kernel
    ```
3.  建立连接后，验证 `ss`{.literal} 输出以查看特定于子流的状态：
    ``` literallayout
    # ss -nti '( dport :4321 )' dst 192.0.2.1
    State Recv-Q Send-Q Local Address:Port    Peer Address:Port Process
    ESTAB 0      0          192.0.2.2:60874      192.0.2.1:4321
    cubic wscale:7,7 rto:201 rtt:0.042/0.017 mss:1448 pmtu:1500 rcvmss:536 advmss:1448 cwnd:10 bytes_sent:64 bytes_$cked:65 segs_out:6 segs_in:5 data_segs_out:4 send 2758095238bps lastsnd:57 lastrcv:3054 lastack:57 pacing_rate 540361516$bps delivery_rate 413714280bps delivered:5 rcv_space:29200 rcv_ssthresh:29200 minrtt:0.009 tcp-ulp-mptcp flags:Mmec token:0000(id:0)/4bffe73d(id:0) seq:c11f40d6c5337463 sfseq:1 ssnoff:f7455705 maplen:0
    ```
4.  使用 `tcpdump`{.literal} 捕获流量并检查 MPTCP 子选项的使用：
    ``` literallayout
    # tcpdump -tnni interface tcp port 4321
    client Out IP 192.0.2.2.60802 > 192.0.2.1.4321: Flags [S], seq 3420255622, win 29200, options [mss 1460,sackOK,TS val 411 4539945 ecr 0,nop,wscale 7,mptcp capable v1], length 0
    client In  IP 192.0.2.1.4321 > 192.0.2.2.60802: Flags [S.], seq 2619315374, ack 3420255623, win 28960, options [mss 1460 sackOK,TS val 3241564233 ecr 4114539945,nop,wscale 7,mptcp capable v1 {0xb6f8dc721aee7f64}], length 0
    client Out IP 192.0.2.2.60802 > 192.0.2.1.4321: Flags [.], ack 1, win 229, options [nop,nop,TS val 4114539945 ecr 3241564 233,mptcp capable v1 {0xcc58d5d632a32d13,0xb6f8dc721aee7f64}], length 0
    client Out IP 192.0.2.2.60802 > 192.0.2.1.4321: Flags [P.], seq 1:17, ack 1, win 229, options [nop,nop,TS val 4114539945 ecr 3241564233,mptcp capable v1 {0xcc58d5d632a32d13,0xb6f8dc721aee7f64},nop,nop], length 16
    client In  IP 192.0.2.1.4321 > 192.0.2.2.60802: Flags [.], ack 17, win 227, options [nop,nop,TS val 3241564233 ecr 411459945,mptcp dss ack 1105509586894558345], length 0
    client Out IP 192.0.2.2.60802 > 192.0.2.1.4321: Flags [P.], seq 17:33, ack 1, win 229, options [nop,nop,TS val 4114540939 ecr 3241564233,mptcp dss ack 13265586846326199424 seq 105509586894558345 subseq 17 len 16,nop,nop], length 16
    ```
    运行这个命令时需要 `tcpdump`{.literal} 软件包。
:::
::: itemizedlist
**其它资源**
-   如需更多信息，请参阅[如何为 RHEL 系统下载或安装 debuginfo
    软件包？](https://access.redhat.com/solutions/9907){.link}
-   有关 `IPPROTO_TCP`{.literal} 的详情，请参考 `tcp(7)`{.literal} man
    page。
:::
:::
::: section
::: titlepage
# []{#getting-started-with-multipath-tcp_configuring-and-managing-networking.html#using-iproute2-to-notify-applications-about-multiple-available-paths_getting-started-with-multipath-tcp}使用 iproute2 通知应用程序有关多个可用路径 {.title}
:::
默认情况下，MPTCP
套接字以一个子流开始，但您可以在第一次创建它后向连接添加新的子流和 IP
地址。此流程描述了如何为子流和 IP 地址更新每个连接限制，并在 MPTCP
连接中添加新的 IP 地址（端点）。
请注意，MPTCP 尚不支持为同一套接字混合 IPv6 和 IPv4
端点。使用属于同一地址系列的端点。
::: orderedlist
**流程**
1.  将每个连接和 IP 地址限值设置为服务器上的 [*1*]{.emphasis}:
    \# `ip mptcp limits set subflow 1`{.literal}
2.  为客户端将每个连接和 IP 地址限值设置为 [*1*]{.emphasis}：
    \# `ip mptcp limits set subflow 1 add_addr_accepted 1`{.literal}
3.  在服务器中添加 IP 地址 [*198.51.100.1*]{.emphasis} 作为新的 MPTCP
    端点：
    \# `ip mptcp endpoint add 198.51.100.1 dev enp1s0 signal`{.literal}
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    您可以为 `subflow`{.literal}、`backup`{.literal}、`signal`{.literal}
    设置以下值。将标签设置为：
    ::: itemizedlist
    -   `signal`{.literal}，在三方握手完成后发送 `ADD_ADDR`{.literal}
        数据包
    -   `subflow`{.literal}，由客户端发送 `MP_JOIN SYN`{.literal}
    -   `backup`{.literal}，将端点设置为备份地址
    :::
    :::
4.  使用 `-k`{.literal} 参数启动服务器绑定 0.0.0.0，以防止
    `ncat`{.literal} 在接受第一个连接并拒绝服务器拒绝客户端执行的
    `MP_JOIN SYN`{.literal} 后关闭侦听套接字。
    \# `ncat -4 0.0.0.0 -k -l 4321`{.literal}
5.  启动客户端并连接到服务器以交换流量。例如，这里的客户端将 \"Hello
    world\" 写入服务器 5 次，然后它终止连接。
    ``` literallayout
    # ncat -4 192.0.2.1 4321
    Hello world 1
    Hello world 2
    Hello world 3
    Hello world 4
    Hello world 5
    ```
    按 [**Ctrl**]{.keycap}+[**D**]{.keycap} 退出。
:::
::: orderedlist
**验证步骤**
1.  验证连接和 IP 地址限制：
    \# `ip mptcp limit show`{.literal}
2.  验证新添加的端点：
    \# `ip mptcp endpoint show`{.literal}
3.  使用 `tcpdump`{.literal} 捕获流量并检查 MPTCP 子选项的使用：
    ``` literallayout
    # tcpdump -tnni interface tcp port 4321
    client Out IP 192.0.2.2.56868 > 192.0.2.1.4321: Flags [S], seq 3107783947, win 29200, options [mss 1460,sackOK,TS val 2568752336 ecr 0,nop,wscale 7,mptcp capable v1], length 0
    client In  IP 192.0.2.1.4321 > 192.0.2.2.56868: Flags [S.], seq 4222339923, ack 3107783948, win 28960, options [mss 1460,sackOK,TS val 1713130246 ecr 2568752336,nop,wscale 7,mptcp capable v1 {0xf51c07a47cc2ba75}], length 0
    client Out IP 192.0.2.2.56868 > 192.0.2.1.4321: Flags [.], ack 1, win 229, options [nop,nop,TS val 2568752336 ecr 1713130246,mptcp capable v1 {0xb243376cc5af60bd,0xf51c07a47cc2ba75}], length 0
    client Out IP 192.0.2.2.56868 > 192.0.2.1.4321: Flags [P.], seq 1:17, ack 1, win 229, options [nop,nop,TS val 2568752336 ecr 1713130246,mptcp capable v1 {0xb243376cc5af60bd,0xf51c07a47cc2ba75},nop,nop], length 16
    client In  IP 192.0.2.1.4321 > 192.0.2.2.56868: Flags [.], ack 17, win 227, options [nop,nop,TS val 1713130246 ecr 2568752336,mptcp add-addr id 1 198.51.100.1 hmac 0xe445335073818837,mptcp dss ack 5562689076006296132], length 0
    client Out IP 198.51.100.2.42403 > 198.51.100.1.4321: Flags [S], seq 3356992178, win 29200, options [mss 1460,sackOK,TS val 4038525523 ecr 0,nop,wscale 7,mptcp join backup id 0 token 0xad58df1 nonce 0x74a8137f], length 0
    client In  IP 198.51.100.1.4321 > 198.51.100.2.42403: Flags [S.], seq 1680863152, ack 3356992179, win 28960, options [mss 1460,sackOK,TS val 4213669942 ecr 4038525523,nop,wscale 7,mptcp join backup id 0 hmac 0x9eff7a1bf4e65937 nonce 0x77303fd8], length 0
    client Out IP 198.51.100.2.42403 > 198.51.100.1.4321: Flags [.], ack 1, win 229, options [nop,nop,TS val 4038525523 ecr 4213669942,mptcp join hmac 0xdfdc0129424f627ea774c094461328ce49d195bc], length 0
    client In  IP 198.51.100.1.4321 > 198.51.100.2.42403: Flags [.], ack 1, win 227, options [nop,nop,TS val 4213669942 ecr 4038525523,mptcp dss ack 5562689076006296132], length 0
    ```
    运行这个命令时需要 `tcpdump`{.literal} 软件包。
:::
::: itemizedlist
**其它资源**
-   有关可用端点标记的更多信息，请参阅 `ip-mptcp(8)`{.literal} man
    page。
:::
:::
::: section
::: titlepage
# []{#getting-started-with-multipath-tcp_configuring-and-managing-networking.html#disabling-multipath-tcp-in-the-kernel_getting-started-with-multipath-tcp}在内核中禁用多路径 TCP {.title}
:::
这个步骤描述了如何在内核中禁用 MPTCP 选项。
::: itemizedlist
**流程**
-   禁用 `mptcp.enabled`{.literal} 选项。
    ``` literallayout
    # echo "net.mptcp.enabled=0" > /etc/sysctl.d/90-enable-MPTCP.conf
    # sysctl -p /etc/sysctl.d/90-enable-MPTCP.conf
    ```
:::
::: itemizedlist
**验证步骤**
-   验证 `mptcp.enabled`{.literal} 是否在内核中被禁用。
    ``` literallayout
    # sysctl -a | grep mptcp.enabled
    net.mptcp.enabled = 0
    ```
:::
:::
:::
[]{#configuring-the-order-of-dns-servers_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#configuring-the-order-of-dns-servers_configuring-and-managing-networking.html#configuring-the-order-of-dns-servers_configuring-and-managing-networking}第 28 章 配置 DNS 服务器顺序 {.title}
:::
大多数应用程序使用 `getaddrinfo()`{.literal} 库的 `glibc`{.literal}
功能来解决 DNS 请求。默认情况下，`glibc`{.literal} 将所有 DNS 请求发送到
`/etc/resolv.conf`{.literal} 文件中指定的第一个 DNS
服务器。如果这个服务器没有回复，Red Hat Enterprise Linux
会使用这个文件中的下一个服务器。
这部分论述了如何自定义 DNS 服务器顺序。
::: section
::: titlepage
# []{#configuring-the-order-of-dns-servers_configuring-and-managing-networking.html#how-networkmanager-orders-dns-servers-in-etc-resolv-conf_configuring-the-order-of-dns-servers}NetworkManager 如何在 /etc/resolv.conf 中对 DNS 服务器进行排序 {.title}
:::
NetworkManager 根据以下规则对 `/etc/resolv.conf`{.literal} 文件中的 DNS
服务器排序：
::: itemizedlist
-   如果只有一个连接配置集，NetworkManager 将使用那个连接中指定的 IPv4
    和 IPv6 DNS 服务器顺序。
-   如果激活多个连接配置集，NetworkManager 会根据 DNS 优先级值对 DNS
    服务器进行排序。如果您设置 DNS 优先级，NetworkManager 的行为取决于
    `dns`{.literal} 参数中设置的值。您可以在文件
    `/etc/NetworkManager/NetworkManager.conf`{.literal} 中的
    `[main]`{.literal} 部分设置此参数：
    ::: itemizedlist
    -   `dns=default`{.literal}，或如果没有设置 `dns`{.literal} 参数：
        NetworkManager 根据每个连接中的 `ipv4.dns-priority`{.literal} 和
        `ipv6.dns-priority`{.literal} 参数将 DNS
        服务器从不同的连接中排序。
        如果未设置值，或者您将 `ipv4.dns-priority`{.literal} 和
        `ipv6.dns-priority`{.literal} 设置为
        `0`{.literal}，NetworkManager 将使用全局默认值。请参阅 [DNS
        优先级参数的默认值](#configuring-the-order-of-dns-servers_configuring-and-managing-networking.html#default-values-of-dns-priority-parameters_configuring-the-order-of-dns-servers "DNS 优先级参数的默认值"){.link}。
    -   `dns=dnsmasq`{.literal} 或 `dns=systemd-resolved`{.literal}:
        当您使用这些设置之一时，NetworkManager 在
        `/etc/resolv.conf`{.literal} 文件中将 `127.0.0.1`{.literal}
        设置为 `dnsmasq`{.literal} ,或将 `127.0.0.53`{.literal} 设置为
        `nameserver`{.literal} 条目。
        `dnsmasq`{.literal} 和 `systemd-resolved`{.literal}
        服务都转发网络管理器（NetworkManager）中与连接中指定的 DNS
        服务器连接中设置的搜索域的查询，并将查询转发到其他域与默认路由的连接。当多个连接有相同的搜索域集时，`dnsmasq`{.literal}
        和 `systemd-resolved`{.literal}
        会将对这个域的查询转发到具有最低优先级值的连接中的 DNS 服务器。
    :::
:::
### []{#configuring-the-order-of-dns-servers_configuring-and-managing-networking.html#default-values-of-dns-priority-parameters_configuring-the-order-of-dns-servers}DNS 优先级参数的默认值
NetworkManager 对连接使用以下默认值：
::: itemizedlist
-   `50`{.literal} 对于 VPN 连接
-   `100`{.literal} 对于其他连接
:::
### []{#configuring-the-order-of-dns-servers_configuring-and-managing-networking.html#valid-dns-priority-values_configuring-the-order-of-dns-servers}有效的 DNS 优先级值：
您可以将全局默认和具体连接 `ipv4.dns-priority`{.literal} 和
`ipv6.dns-priority`{.literal} 参数设置为 `-2147483647`{.literal} 和
`2147483647`{.literal} 之间的值。
::: itemizedlist
-   低的值具有更高的优先级。
-   负值具有一个特殊的效果，它会排除其他带有更大值的配置。例如，如果至少有一个连接具有负优先级值，NetworkManager
    只使用在连接配置集中指定的具有最低优先级的 DNS 服务器。
-   如果多个连接具有相同的 DNS 优先级，NetworkManager 会按照以下顺序排列
    DNS 的优先顺序：
    ::: orderedlist
    1.  VPN 连接
    2.  带有活跃的默认路由的连接。活跃的默认路由是具有最低指标的默认路由。