can result from processes such as ﬁle buﬀering due to the
eﬀects of a forensic tool writing a ﬁle.
3.2 Memory Remanence
Modern memory chips are composed of capacitors which
store binary values using charge states. Over time, these ca-
pacitors leak charge and must be refreshed periodically. To
save power, these chips are designed to retain their values
as long as possible, especially in mobile devices such as lap-
tops and cell phones. Contrary to common belief, the act of
rebooting or shutting down a computer often does not com-
pletely clear the contents of memory. Link and May [21]
were the ﬁrst to show that current memory technology ex-
hibited remanence properties back in 1979. More recently,
Gutmann [18] elaborated on the properties of DRAM mem-
ory remanence. Halderman et al. [19] recently showed that
these chips can retain their contents for tens of seconds at
room temperature and the contents can persist for several
minutes when the RAM chips are cooled to slow the natu-
ral rate of bit decay. Forenscope utilizes memory remanence
properties to preserve the full system state to allow recovery
to a point where introspection can be performed. We refer
the reader to [11,19] for a more detailed analysis of memory
remanence.
3.3 Activation
Forenscope currently supports two methods of activation.
The ﬁrst is based on a watchdog timer reset and the second is
through a forced reboot. For incident response, a watchdog
timer may be used to activate Forenscope periodically to au-
dit the machine’s state and check for the presence of stealth
malware. Watchdog timers are used in embedded systems to
detect erroneous conditions such as machine lockups. These
timers contain a count down clock which must be refreshed
periodically. If the system crashes, the watchdog software
will fail to refresh the clock. Once the clock counts down to
zero, the watchdog timer will issue a warm hardware reset
signal to the machine causing it to reboot in the hopes that
the operating system will recover from the erroneous condi-
tion upon a fresh start. On our test machine, the built-in
watchdog timer is programmable via a serial port interface
and the contents of DRAM memory are not cleared after a
reboot initiated by the watchdog timer reset signal.
On the other hand, a forensic investigator may encounter
a machine that is locked by a screensaver or login screen and
in this situation, Forenscope can be activated by forcing a
reboot. Some operating systems such as Linux and Win-
dows can be conﬁgured to reboot or produce a crash dump
by pressing a hotkey. These key sequences are often used for
Figure 1: Forenscope vs normal boot paths
309debugging and are enabled by default in many Linux distri-
butions. In Linux, the alt-sysrq-b hotkey sequence forces an
immediate reboot. If these debug keys are disabled, then a
reset may be forced by activating the hardware reset switch.
Forenscope supports multiple modes of operation for versa-
tility. After the machine has been rebooted forcefully, the
Forenscope kernel is selected from the boot loader menu in-
stead of the incumbent operating system.
3.4 Forenscope framework
Instead of booting afresh, Forenscope alters the boot con-
trol ﬂow to perform its analysis. Figure 1 illustrates this
process. After the machine restarts, it boots oﬀ a CD or
USB stick with the Forenscope media. The machine then
enters the golden state monitor mode which suspends execu-
tion and provides a clean external view of the machine state.
To explain how the monitor works, we ﬁrst describe the op-
erating states of the x86 architecture. When a traditional
PC boots, the processor starts in real mode and executes
the BIOS. The BIOS then loads the bootloader which in
turn loads the operating system. During the boot sequence,
the operating system ﬁrst enables protected mode to ac-
cess memory above the 1 MB mark and then sets up page
tables to enable virtual memory to bootstrap the OS. Foren-
scope interposes on this boot sequence and ﬁrst establishes
a bootstrap environment residing in the lower 640 KB rung
of legacy conventional memory and then it reconstructs the
state of the running machine. Forenscope has full control
of the machine and its view is untainted by any conﬁgura-
tion settings from the incumbent operating system because
it uses a trustworthy private set of page tables; thus rootkits
and malware which have infected the machine cannot inter-
fere with operations in this state. Next, Forenscope obtains
forensically-accurate memory dumps of the system and runs
various kinds of analyses. For integrity, Forenscope does not
rely on any services from the underlying operating system.
Instead, it makes direct calls to the system’s BIOS to read
and write to the disk. Therefore, Forenscope is resistant to
malware that impedes the correct operation of hardware de-
vices. The initial forensic analysis modules are executed in
this state and then Forenscope restores the operation of the
incumbent operating system.
3.5 Reviving the Operating system
To revive the incumbent operating system, Forenscope
needs to restore the hardware and software state of the sys-
tem to “undo” the eﬀects of the reboot. Hardware devices are
reset by the BIOS as part of the boot process. Some of these
devices must be reconﬁgured before the incumbent operat-
ing system is restored because they were used by Forenscope
or the BIOS during initialization. To do so, Forenscope ﬁrst
re-initializes core devices such as the hard drive and inter-
rupt controller and then assumes full control of these devices
for operation in its clean environment. Before resuming the
operating system, Forenscope scans the PCI bus and gathers
a list of hardware devices. Each hardware device is matched
against an internal database and if an entry is found, Foren-
scope calls its own reinitialization function for the particu-
lar hardware device. If no reinitialization function is found,
Forenscope looks up the device class and calls the operat-
ing system’s generic recovery function for that device class.
Many devices such as network cards and disk drives have fa-
cilities for handling errant conditions on buggy hardware.
These devices typically have a timeout recovery function
which can revive the hardware device in the event that it
stops responding. We have found that calling these recov-
ery functions is usually suﬃcient to recover most hardware
devices.
In Linux, 86 out of the 121 (71%) PCI network
drivers implement this interface and all IDE device drivers
support a complete device reset. For instance, the IBM uses
an Intel Pro/100 card and the SEL-1102 uses a built-in AMD
PCnet/32 chip. On both these machines Forenscope relies
on calling the tx_timeout function to revive the network.
We use a two-stage process to restore the operating sys-
tem environment. The ﬁrst stage reconstructs the processor
state where the values of registers are extracted and altered
to roll back the eﬀects of the restart and the second stage
runs forensic analysis modules. Our algorithm scans the ac-
tive kernel stack and symbol information from the kernel for
call chain information. Forenscope uses this information to
reconstruct the processor’s state. In the alt-sysrq-b case,
the interrupt handler calls the keyboard handler which in
turn invokes the emergency sysrq-handler. The processor’s
register state is saved on the stack and restored by using
state recovery algorithms from [11, 13]. If the alt-sysrq-b
hotkey is disabled, Forenscope supports an alternate method
of activation based on pressing a physical reset switch. In
this case, Forenscope assumes that the system is under light
load and that the processor spends most of its time in the
kernel’s idle loop. In this loop, most kernels repeatedly call
the x86 HLT instruction to put the processor to sleep. Since
the register values at this point are predictable, Forenscope
restores the instruction pointer, EIP, to point to the idle
loop itself and other registers accordingly. Once the state
has been reconstructed, Forenscope reloads the processor
with this information and enables virtual memory.
3.6 Modules
We have developed a number of modules to aid in forensic
analysis. These modules, shown in Figure 2, run in groups
where stage 1 modules run in the golden state to collect pris-
tine information while stage 2 modules rely on OS services
to provide a shell and block disk writes. Finally, stage 3
resumes the original operating environment.
Scribe: Scribe collects basic investigation information such
as the time, date, list of PCI devices, processor serial num-
ber and other hardware features. These details are stored
as evidence to identify the source of a snapshot.
Cloner: Cloner is a memory dump forensic tool that is able
to capture a high-ﬁdelity image of volatile memory contents
to an external capture device. Existing techniques for creat-
ing physical memory dumps are limited by their reliance on
system resources which are vulnerable to deception. Cloner
works around forensic blurriness issues and rootkit cloaking
by running in stage 1 before control is returned to the origi-
nal host OS. In the golden state, the system uses protected
mode to access memory directly through Forenscope’s safe
memory space. Using this technique, Cloner accesses mem-
ory directly without relying on services from the incumbent
operating system or its page tables. To dump the contents of
memory, Cloner writes to disk directly using BIOS services
instead of using an OS disk driver. This channel avoids a po-
tentially booby-trapped or corrupted operating system disk
driver and ensures that the written data has better forensic
integrity. Most BIOS ﬁrmware supports read/write access
310Figure 2: Forenscope modules
Figure 3: File system architecture
to USB ﬂash drives and hard disks. Another reason to use
the BIOS for dumping is that it minimizes the memory foot-
print of Forenscope and reduces dependencies on drivers for
various USB and SATA chipsets. Once cloner captures a
clean memory dump, the investigator can run other mod-
ules tools that may alter the contents of memory without
worry of tainting the evidence.
Informant: Informant checks for suspicious signs in the
system that may indicate tampering by identifying the pres-
ence of alterations caused by malware. In order to extract
clean copies of the program code and static structures such
as the system call table, Forenscope must have access to a
copy of the vmlinux kernel ﬁle which is scanned to locate
global kernel variables and the location of various functions.
Most Linux distributions provide this information. Read-
only program code and data structures are checked against
this information to ensure that they have not been altered or
misconﬁgured. Such alterations have the potential to hinder
the investigation process and Informant helps to assess the
integrity of a machine before further analysis is attempted.
After Informant veriﬁes the system, it also records other use-
ful information such as the contents of the kernel dmesg log,
running processes, open ﬁles and open network sockets. This
information can help expedite the investigation process.
Neutralizer: Neutralizer inoculates against anti-forensic
software by detecting and repairing alterations in binary
code and key system data structures such as the system
call table. These structures can be repaired by restoring
them with clean copies extracted from the original sources.
Since many rootkits rely on alteration techniques, Neutral-
izer can recover from the eﬀects of common forms of cor-
ruption. Presently, Neutralizer is unable to recover from
corruption or alteration of dynamic data structures. Neu-
tralizer also suppresses certain security services such as the
screensaver, keyboard lock and potential malware or anti-
forensic tools by terminating them. To terminate processes,
neutralizer sends a SIGKILL signal instead of a SIGTERM sig-
nal so that there is no opportunity to ignore the signal. Cus-
tomized signals can be sent to each target process. For some
system services that respawn, terminating them is ineﬀec-
tive, so forcefully changing the process state to zombie (Z)
or uninterruptible disk sleep (D) is desired instead of killing
the application directly. An alternative would be to send the
SIGSEGV signal to certain applications to mimic the eﬀects
Table 3: Correctness assessment
Application
Results
Idle system
SSH
PPTP VPN
AES pipe
Netcat
DM-crypt
System is correctly recovered over 100 times.
SSH recovers, protocol handles lost packets.
VPN recovers, queued messages are delivered.
File encryption continues.
File transfers correctly without checksum errors.
Mounted ﬁlesystem remains accessible.
of a crash. Neutralizer selects processes to kill based on the
analysis mode. For incident response on server machines, a
white list approach is used to terminate processes that do
not belong to the set of core services. This policy prevents
running unauthorized applications that may cause harm to
the system. For investigation, Neutralizer takes a black list
approach and kills oﬀ known malicious processes.
ForenShell: ForenShell is a special superuser bash shell
that allows interactive exploration of a system by using stan-
dard tools. When coupled with BitBlocker(below), Foren-
Shell provides a safe environment to perform customized live
analyses. In this mode, Forenshell becomes non-persistent
and it does not taint the contents of storage devices. Once
ForenShell is started, traditional tools such as Tripwire or
Encase may be run directly for further analysis. To provide
an audit log of the investigator’s activities, ForenShell pro-
vides a built-in keylogger that writes directly to the evidence
collection medium without tainting the disk. Forenscope
launches the superuser shell on a virtual console by directly
spawning it from a privileged kernel thread. ForenShell runs
as the last analysis module after Informant and Neutralizer
have been executed. At this point, the system has already
been scanned for malware and anti-forensic software. If Neu-
tralizer is unable to clean an infection, it displays a message
informing the investigator that the output of ForenShell may
be unreliable due to possible system corruption.
BitBlocker: BitBlocker is a conﬁgurable software-based
write blocker that inhibits writing to a given set of storage
devices to avoid tainting the contents of persistent media.
Since actions performed by ForenShell during exploration
can inadvertently leave undesired tracks, BitBlocker helps
to provide a safe non-persistent analysis environment that
emulates disk writes without physically altering the contents
of the media. Because BitBlocker modiﬁes the contents of
memory, it executes after Cloner has captured a clean copy
of memory.
Simply re-mounting a disk in read-only mode to prevent
writing may cause some applications to fail because they
may need to create temporary ﬁles and expect open ﬁles to
remain writable. Typically, when an application creates or
writes ﬁles, the changes are not immediately ﬂushed to disk
and they are held in the disk’s buﬀer cache until the system
can ﬂush the changes. The buﬀer cache manages interme-
diate disk operations and services subsequent read requests
with pending writes from the disk buﬀer when possible. Bit-
Blocker mimics the expected ﬁle semantics of the original
system by reconﬁguring the kernel’s disk buﬀer cache layer
to hold all writes instead of ﬂushing them to disk. This
approach works on any type of ﬁle system because it oper-
ates directly on the disk buﬀer which is one layer below the
ﬁle system. BitBlocker’s design is similar to that of some
Linux-based RAM disk systems [5] which cleverly use the
disk buﬀer as a storage system by conﬁguring the storage
device with a null backing store instead of using a physical
disk. Each time a disk write is issued, barring a sync opera-
311Curl-10-sec-control
Curl-5-sec-control
Curl-10-sec-Forenscope
Curl-5-sec-Forenscope
Cached-Normal
Dirty-Normal
Free-Normal
Cached-BitBlocker
Dirty-BitBlocker
Free-BitBlocker
160000
140000
120000
100000
c
e
s
/
s
e
t
y
B
80000
60000
40000
20000
s
e
t
y
B
 160000
 140000
 120000
 100000
 80000
 60000
 40000
 20000
 0
 0
 50
 100
 150
 200
 250