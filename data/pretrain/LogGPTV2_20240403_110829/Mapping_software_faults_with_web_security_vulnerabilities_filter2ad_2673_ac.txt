branch condition", which generated 16.10% of the total
number of faults injected. This important result means
that not all the possible fault
types that can generate
vulnerabilities are actually responsible for the security
problem of web applications found in the real world.
3.2 Detailed vulnerability analysis
During the classification of the web application
vulnerabilities we discovered some repeating patterns in
the code. The instructions that fixed the vulnerabilities
belong to a restricted subset of all
the possible code
structures of each fault type. To make use of this data and
accommodate the precise situations found we defined
sub-types for the four most common fault types (MFC
extended, WPFV, MIFS and WVAV), as described in
Table 5.
1-4244-2398-9/08/$20.00 ©2008 IEEE
263
DSN 2008: Fonseca &Vieira
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:06 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
The occurrence of the fault types and the sub-types
detected in the vulnerabilities analyzed is shown in Table
6. We can observe that
there are some sub-types
responsible for a large slice of the all the vulnerabilities.
The two types with higher values belong to the MFC (cid:173)
extended fault sub-types A and B and together they
account for 63.66% of all the vulnerabilities found. We
can also find important differences between the values of
the sub-types relating to XSS and SQL injection. For
example, MFC - extended A is much more important in
SQL injection, but MFC - extended Band C are the
opposite. Also WPFV A has a huge importance in SQL
injection and none was found in XSS.
In the following paragraphs we analyze in detail each
fault type discussing the conditions/locations where each
fault was observed in our field study. This discussion
provides useful insights to support the future definition of
realistic vulnerability fault models, which are essential to
allow the development of realistic attack injectors. Such
kind of tools (which currently do not exist yet) can
potentially be very useful to simulate attacks by injecting
realistic vulnerabilities and to help validating intrusion
detection systems and other security mechanisms. One
important common point to every vulnerability fault type
Table 5. fault t
MFC
extended
WPFV
MIFS
WVAV
T bl 6 0
a e
f f
ccurrence 0 au types an su -types
b t
It t
d
Fault types
& sub-types
SQL (0/0) XSS (0/0)
SQL+XSS (0/0)
MIFS
WPFV
A 64,25
4,15
MFC - extended B
4,15
C
A 16,06
B
1,04
0,00
C
D
0,00
A
5,18
B
1,04
A
0,00
B
0,00
0,00
C
D
1,04
0,00
E
F
0,00
0,52
0,52
0,52
1,04
0,52
0,00
0,00
0,00
EFC
WFCS
MVIV
MLAC
MFC
MIA
MLOC
ELOC
WVAV
37,45
24,24
15,58
0,00
1,08
1,08
0,65
4,55
0,65
3,03
0,87
0,87
0,00
0,65
0,22
1,08
3,68
1,73
1,52
0,65
0,43
0,22
0,22
45,34
18,32
12,21
4,73
1,07
0,76
0,46
4,73
0,76
2,14
0,61
0,61
0,31
0,46
0,15
0,92
2,75
1,37
1,37
0,61
0,31
0,15
0,15
described next is the fact that none of them cause any
compiling or executing errors (other than the security
issues) during operation.
Missing function call extended (MFC extended):
This fault
type is typically observed in situations
where the patch code consists of a missing function
returning a value that will be used in the code. The
missing function is always related to the filtering one of
the arguments. Whenever it has more than one argument
the other arguments are the configuration of the filtering.
Next are the constraints of the sub-types:
A. Missing casting to numeric of one variable using
the" (int)" type cast or using the "intval ( ) "
PHP function. The variable can be inside PHP
variable arrays like "$_GET [$var]". The function
can also act as an argument of other functions. This
situation was found when the patch added the entire
assignment line, for example:
"$var=(int)$_GET[$var];"
or when there was a replacement of one variable in a
string concatenation, for example:
Replace "..." , strl ' . $var. ' str2 ''';'' with
"..."'strl' .intval($var). 'str2''';''
or in the case of a function:
"$varl = func(intval
($varl) );"
B. Missing assignment of one variable to a custom
1-4244-2398-9/08/$20.00 ©2008 IEEE
264
DSN 2008: Fonseca &Vieira
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:06 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
made function. This sub-type is similar to the MFC(cid:173)
the filtering function is not a PHP
A, except
predefined function.
found in the same
situations of the MFC-A and MFC-C sub-types.
It was
C. Missing assignment of one variable to a' PHP
predefined function, except the " (in t ) " type cast
It was found in the same
or
situations of the MFC-A and MFC-B sub-types.
the "intval ()".
Wrong variable used in parameter of function
call (WPFV):
This is typically found when the following changes
occurred in the argument of a function:
A. Missing quotes
in variables
inside
argument of a SQL query. For example:
Replace "func ("SELECT...FROM...WHERE
id=$var")" with
"func ("SELECT...FROM...WHERE
id='$var''')''
a
string
B. Wrong regex string of a function argument. When
the patch code is a change in the regex string of a
function argument. This function can be a custom
made function that processes a regex string or one of
the
and
"preg_rna tch" or the MySQL function "regexp".
In the analyzed code the regex string was used to
check a variable closely related to an input value,
looking for known suspicious strings that can be part
of an attack.
"preg_replace"
functions
PHP
C. Wrong sub-string of a function argument. When
the argument of the function is the result of the
concatenation of several strings and variables and the
patch code removed or changed one of them.
D. Wrong PHP superglobal variable when it is an
argument of a function. When the argument of the
the PHP superglobal variable
function contains
"$ SERVER" and the server variable it has changed.
For example:
Replace "func ($ SERVER [varl] )" with
"func ($_SERVER [var2] ) "
Missing if construct plus statements (MIFS):
This fault type was found only when an IF condition
and just one or two surrounding statements were missing:
A. Missing traditional
then else" condition.
When it is a traditional "if then else" condition,
an "elsif" or an "else"
"if
B. Missing "if...then...else" condition in compact
type was also found when the
form. This fault
condition is in the compact form, for example:
"(($var != ") ?
'false')"
'true'
:
Wrong value assigned to variable (WVAV):
This is typically found when the following situations
changed the variable assignment:
A. Missing pattern in a regex string assigned to a
variable. In the analyzed code the regex string was
used to check a variable closely derived from an input
value, looking for known XSS attacks.
B. Wrong value in an array or a concatenation of a
new substring inside a string. The patch changed
one of the concatenation strings or removed one of the
items of the array.
C. Wrong PHP superglobal variable when assigned to
a variable. When the variable is assigned to a PHP
superglobal variable "$ SERVER" and it is changed.
For example:
Replace
"$varl=$_SERVER[$var3];"
"$varl=$ SERVER [$var2] ;" with
D. Missing quotes in variables inside a string in a
SQL query assignment. For example:
Replace:
"SELECT...FROM...WHERE
with: "SELECT...FROM...WHERE id=' $var'"
id=$var"
E. Missing destruction of the variable. For example:
"unset ($var);"
F. Extraneous concatenation operator "." in an
assignment. For example:
Replacing "$var
. = ..." with "$var =
Extraneous function call (EFC):
fault
type was
When this
found the extraneous
function returned the same data type of the argument.
This was found when the function was replaced with a
variable which has already been sanitized. Another
situation found was the removal of a function when there
is a function of a function.
Wrong function called with same parameters
(WFCS):
When this fault
type was found the function was
replaced by another function, while keeping the same
arguments, even when the function is the only statement
in the line. In all these situations the new function was a
custom made function that was already in the code or it
was implemented in the patch. The new function was
always related to filtering the argument.
Missing "AND EXPR" in expression used as
branch condition (MLAC):
When this fault type was found there was a missing
AND expression inside an IF condition.
Missing variable initialization using a value
(MVIV):
In PHP there is no need to declare a variable and the
variable stays uninitialized (with the default value) until
the first assignment. Variables have a default value of
their type (false, zero, empty string or an empty array).
This fault type was found when there was a missing first
assignment of a variable to an empty string, or an empty
array.
Missing function call (MFC):
This fault type was observed in the situations where
1-4244-2398-9/08/$20.00 ©2008 IEEE
265
DSN 2008: Fonseca &Vieira
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:06 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
for
for
the patch code consists of a missing function being the
only statement in its line of code. The function did not
return any value and, therefore it was not assigned to any
variable. The missing function was always custom made
and its implementation was most of the times created by
the patch.
Missing if construct around statements (MIA):
This fault type was found only when an IF condition
is
was missing, surrounding only one statement
already present in the code.
Missing "OR EXPR" in expression used as
branch condition (MLOC):
that
This fault type was found when there was a missing
OR expression inside an IF condition.
Extraneous "OR EXPR" in expression used as
branch condition (ELOC):
This fault type was considered when there was an
extraneous OR expression inside an IF condition.
4. Conclusion
This paper analyzes the vulnerabilities of six web
applications using their past 655 security fixes as the field
data. Results show that only a small subset of 12 generic
software faults is responsible for all the security problems
(XSS and SQL injection). We found considerable
differences by comparing the distribution of the fault
types of our results with studies of common software
faults. We also detected that one of the Missing Function
Call fault types (MFC extended) is responsible for 76%
of all the security problems analyzed. The fault types are
thoroughly detailed providing enough information for the
definition of vulnerability fault models that can be used
by researchers of realistic attack injectors.
For future work we intend to analyze the exploit code
used to attack web applications. With these results it will
be possible to build a realistic attack injector for web
applications. Other studies could be done, following the
at
same methodology
vulnerabilities
in
their
applications, searching for a common pattern.
presented here
operating
aimed
and
systems
but
References
[1] Valeur, F., Mutz, D., Vigna, G.: "A Learning-Based
Approach to the Detection ofSQL Attacks", DIMVA 2005
[2] Christey, S., "Unforgivable Vulnerabilities", Black Hat
Briefings 2007
[3] Zanero, S., Carettoni, L., Zanchetta, M., "Automatic
Detection of Web Application Security Flaws", Black Hat
Briefings 2005
[4] David, P., Stroud, R., "Conceptual Model and Architecture
of MAFTIA", LAAS-CNRS, 2003
[5] Jovanovic, N., Kruegel, C., Kirda, E., "Precise Alias
Vnunet,
August,
2007,
NTA,
May,
2007,
February
12,
2007,
Acunetix
Ltd,
http://www.nta-
Static Detection
Analysis
of Web Application
Vulnerabilities", IEEE Symposium on Security and Privacy,
2006
[6]
http://www.vnunet.comlvnunet/news/2197408/monster-kept(cid:173)
breach-secret-five
[7] The Privacy Rights Clearinghouse, December, 2007,
http://www.privacyrights.org/ar/ChronDataBreaches.htm
[8] Stock, A., Williams, 1., Wichers, D., "OWASP top 10",
OWASP Foundation, July, 2007
[9] Steve, C., Martin, R., "Vulnerability Type Distributions in
CVE", Mitre report, May, 2007
[10]
http://www.acunetix.comlnews/security-audit-results.htm
[11]
monitor.comlposts/2007/05/annualsecurityreport.html
[12] Christmansson, 1., Chillarege, R. "Generation of an Error
Set that Emulates Software Faults", Proc. of the 26th IEEE
Fault Tolerant Computing Symposium - FCTS-26, 1996.
[13] Chillarege, R., Bhandari, I. S., Chaar, 1. K., Halliday, M.
J., Moebus, D., Ray, B., Wong, M., "Orthogonal Defect
Classification - A Concept
In-Process Measurement",
IEEE Transactions on Software Engineering, vol. 18, no. 11,
pp. 943-956, November 1992.
[14] Dudies, 1., Madeira, H., "Emulation of Software Faults: a
Field Data Study and a Practical Approach", Transactions on
Software Engeneering TSE, 2006.
[15] Maxion, Roy A., Olszewski, Robert T. "Improving
Software Robustness with Dependability Cases.", International
Symposium on Fault-Tolerant Computing, 1998
[16] Maxion, Roy A., Olszewski, Robert T. "Eliminating
Exception Handling Errors with Dependability Cases: A
Comparative, Empirical Study.",
IEEE Transactions on
Software Engineering, 2000
[17] Fonseca, 1., Vieira, M., Madeira, H., "Testing and
comparing web vulnerability scanning tools for SQL injection
and XSS attacks", The 13th IEEE Pacific Rim International
Symposium on Dependable Computing, December 2007.
[18]
http://www.nexen.net/chiffres_cles/phpversion/18164(cid:173)
php_statistics_for_february_2008.php
[19] Mays, R., Jones, C., Holloway, G., Strudinsky, D.,
"Experiences with defect prevention", IBM syst. J., vol 29,
1990
[20] PHP-Nuke, December, 2007, http://phpnuke.org/
[21] Drupal, December, 2007, http://drupal.org/
[22] PHP-Fusion, December, 2007, http://PHP-Fusion.co.uk/
[23] Wordpress, December, 2007, http://wordpress.org/
[24]
http://www.phpmyadmin.net/
[25] phpBB, August, 2007, http://www.phpbb.coml
[26]
http://www.packtpub.com
[27]
2007,
sourceforge,
http://sourceforge.net/community/index.php/2007108/0l/comm
unity-choice-awards-winnersl
[28]
blogsecurity.net,
http://blogsecurity.net/wordpress/articles/article-230507/
[29]
http://pt.php.net/register~lobals
phpMyadmin,
December,
December,
Packt
Publishing
Ltd,
The
PHP
December,
Group,
December,
2007,
December,
Nexen.net,
February,
2008,
2007,
2007,
2007,
1-4244-2398-9/08/$20.00 ©2008 IEEE
266
DSN 2008: Fonseca & Vieira
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:06 UTC from IEEE Xplore.  Restrictions apply.