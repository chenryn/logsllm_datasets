4. NON-ADVERSARIAL SETTING
In this section, we evaluate the capabilities of JavaScript-
based cache probing in a non-adversarial context. By se-
lecting a group of cache sets and repeatedly measuring their
access latencies over time, the attacker is provided with a
very detailed picture of the real-time activity of the cache.
We call the visual representation of this image a memory-
gram, since it looks quite similar to an audio spectrogram.
A sample memorygram, collected over an idle period of
400ms, is presented in Figure 4. The X axis corresponds to
time, while the Y axis corresponds to diﬀerent cache sets.
The sample shown has a temporal resolution of 250µs and
monitors a total of 128 cache sets (note that the highest
temporal resolution we were able to achieve while monitoring
128 cache sets in parallel was ∼ 5µs). The intensity of each
pixel corresponds to the access latency of a particular cache
set at this particular time, with black representing a low
latency, suggesting no other process accessed this cache set
between the previous measurement and this one, and white
representing a higher latency, suggesting that the attacker’s
data was evicted from the cache between this measurement
and the previous one.
Observing this memorygram can provide several insights.
First, it is clear to see that despite the use of JavaScript
timers instead of machine language instructions, measure-
ment jitter is quite low and that active and inactive sets
are clearly diﬀerentiated.
It is also easy to notice several
vertical line segments in the memorygram, indicating multi-
ple adjacent cache sets that were all active during the same
time period. Since consecutive cache sets (within the same
page frame) correspond to consecutive addresses in physical
memory, we believe this signal indicates the execution of a
function call that spans more than 64 bytes of instructions.
Several smaller groups of cache sets are accessed together;
we theorise that such groups correspond to variable accesses.
1411Figure 4: Sample memorygram collected over an idle period of 400ms. The X axis corresponds to time, while
the Y axis corresponds to diﬀerent cache sets. The sample shown has a temporal resolution of 250µs and
monitors a total of 128 cache sets. The intensity of each pixel illustrates the access latency of the particular
cache set, with black representing low latency and white representing a higher latency.
Finally, the white horizontal line indicates a variable that
was constantly accessed during our measurements (e.g., a
variable that belongs to the measurement code or the Java-
Script runtime).
4.1 Covert Channel Bandwidth Estimation
Liu et al. [14] and Maurice et al. [17] demonstrated that
last-level cache access patterns can be used to construct a
high-bandwidth covert channel between virtual machines co-
resident on the same physical host, and exﬁltrate sensitive
information. We used such a construction to estimate the
measurement bandwidth of our attack. The design of our
covert channel system was inﬂuenced by two requirements.
First, we wanted the transmitter part to be as simple as
possible, and in particular we did not want it to carry out
the eviction set algorithm of Section 3.1. Second, since the
receiver’s eviction set is non-canonical, it should be as simple
as possible for the receiver to search for the sets onto which
the transmitter was modulating its signal.
To satisfy these requirements, our transmitter code simply
allocates a 4KB array in its own memory and continuously
modulates the collected data into the pattern of memory ac-
cesses to this array. There are 64 cache sets covered by this
array, allowing the transmission of 64 bits per time period.
To make sure the memory accesses are easily located by the
receiver, the same access pattern is repeated in several addi-
tional copies of the array. Thus, a considerable percentage
of the cache is actually exercised by the transmitter.
The receiver code proﬁles the system’s RAM, and then
searches for one of the page frames containing the data mod-
ulated by the transmitter. To evaluate the bandwidth of this
covert channel, we wrote a simple program that iterates over
memory in a predetermined pattern. Next, we search for
this memory access pattern using a JavaScript cache attack,
and measure the maximum sampling frequency at which the
JavaScript code could be run. We ﬁrst evaluated our code
when both the transmitter and receiver were running on
a normal host. Next, we repeated our measurements when
the receiver was running inside a virtual machine (Firefox 34
running on Ubuntu 14.01 inside VMware Fusion 7.1.0). The
nominal bandwidth of our covert channel was measured to
be 320kbps, a ﬁgure which compares well with the 1.2Mbps
achieved by the native code, cross-VM covert channel of
Liu et al. [14]. When the receiver code was not running
directly on the host, but rather on a virtual machine, the
peak bandwidth of our covert channel was ∼8kbps.
5. TRACKING USER BEHAVIOR
The majority of the related work in this ﬁeld assumes
that the attacker and the victim share a machine inside the
data center of a cloud-provider. Such a machine is not typi-
cally conﬁgured to accept interactive input, and hence, pre-
vious work focused on the recovery of cryptographic keys or
other secret state elements, such as random number genera-
tor states [30]. In this work, we chose to examine how cache
attacks can be used to track the interactive behaviour of the
user, a threat which is more relevant to the attack model we
consider. We note that Ristenpart et al. [24] have already
attempted to track keystroke timing events using coarse-
grained measurements of system load on the L1 cache.
5.1 Detecting Hardware Events
Our ﬁrst case study investigated whether our cache attack
can detect hardware events generated by the system. We
chose to focus on mouse and network activity because the
OS code that handles them is non-negligible. In addition,
they are also easily triggered by content running within the
restricted JavaScript sandbox, allowing our attack to have
a training phase.
Design. The structure of both attacks is similar. First,
the proﬁling phase is carried out, allowing the attacker to
probe individual cache sets using JavaScript. Next, during
a training phase, the activity to be detected (e.g., network
activity, mouse activity) is triggered, and the cache state is
sampled multiple times with a very high temporal resolution.
While the network activity was triggered directly by the
measurement script (by executing a network request), we
simply waved the mouse around over the webpage during
the training period4.
4In a full attack, the user can be enticed to move the mouse
by having her play a game or ﬁll out a form.
CacheSet(non-canonical)Time(ms)255075100125150175200225250275300325350375204060801001201412By comparing the cache state during the idle and active
periods of the training phase, the attacker learns which cache
sets are uniquely active during the relevant activity and
trains a classiﬁer on these cache sets. Finally, during the
classiﬁcation phase, the attacker monitors the interesting
cache sets over time to learn about user activity.
We used a basic unstructured training process, assuming
that the most intensive operation performed by the system
during the training phase would be the one being measured.
To take advantage of this property, we calculated the Ham-
ming weight of each measurement over time (equivalent to
the count of cache sets which are active during a certain time
period), then applied a k-means clustering of these Hamming
weights to divide the measurements into several clusters. Fi-
nally, we calculated the mean access latency of each cache
set in every cluster, creating a centroid for each cluster. To
classify an unknown measurement vector, we measured the
Euclidean distance between this vector and each of these
centroids, classifying it to the closest one.
Evaluation. We evaluated our hardware event detection
strategy on an Intel Core i7-4960HQ processor, belonging to
the Haswell family, running Safari 8.0.6 for Mac OS 10.10.3.
We generated network traﬃc using the command-line tool
wget and mouse activity by using the computer’s internal
trackpad to move the mouse cursor outside of the browser
window. To provide ground truth for the network activity
scenario, we concurrently measured the traﬃc on the system
using tcpdump, and then mapped the tcpdump timestamps
to the times detected by our classiﬁer. To provide ground
truth for the mouse activity scenario, we wrote a webpage
that timestamps and logs all mouse events, then opened this
webpage using a diﬀerent browser (Chrome 43) and moved
the mouse over this browser window. The memorygrams we
collected for both experiments spanned 512 diﬀerent cache
sets and had a sampling rate of 500 Hz.
Our results indicate that it is possible to reliably detect
mouse and network activity. The measurement rate of our
network classiﬁer did not allow us to count individual pack-
ets, but rather monitor periods of network (in)activity. Our
detector was able to correctly detect 58% of these active
periods, with a false positive rate of 2.86%. The mouse de-
tection code actually logged more events than the ground
truth collection code. We attribute this to the fact that
the Chrome browser (or the OS) throttles mouse events at
a rate of ∼60Hz. Yet, 85% of our mouse detection events
were followed by a ground truth event in less than 10ms. The
false positive rate was 3.86%, but most of the false positives
were immediately followed by a series of true positives. This
suggests that our classiﬁer was also ﬁring on other mouse-
related events, such as “mouse down” or simply touches on
the trackpad. Note that the mouse activity detector did not
detect network activity (or vice versa).
Interestingly, we discovered that our measurements were
aﬀected by the ambient light sensor of the victim machine.
Ambient light sensors are always-on sensors that are in-
stalled on high-end laptops, like MacBooks, Dell Latitude,
Sony Vaio, and HP EliteBooks. They are enabled by default,
and allow the OS to dynamically adjust the brightness of
the computer screen to accommodate diﬀerent lighting con-
ditions. During our experiments we discovered that waving
our hand in front of the laptop generated a noticeable burst
of hardware events. This could be either the result of hard-
Figure 5: End-to-end attack scenario.
ware interrupts generated by the ambient light sensor itself,
or hardware interrupts generated by the display panel, as it
automatically adjusts its brightness. This side-channel leak-
age means that cache-based attacks can detect the presence
of a user in front of the computer, an item of information
which is highly desirable to advertisers.
5.2 End-to-End Privacy Attacks
5.2.1 Motivation
Modern browsers implement a private or incognito mode,
which allows users to carry out sensitive online activities.
When private browsing mode is enabled, the web browser
does not disclose or collect any cookies, and disables web
cache entries or other forms of local data storage. One
browser executable that is considered extremely secure is the
Tor Browser: a specially-conﬁgured browser bundle, built
around the Firefox codebase, which is designed to block
most privacy-sensitive APIs and connect to the Internet only
through the Tor network. Since private browsing sessions
disable certain network functionality, and do not retain the
login credentials of the current user, they are cumbersome
for general-purpose use.
Instead, users typically run con-
currently standard browsing sessions and private browsing
sessions, side-by-side, on the same computer, either as two
open windows belonging to the same browser process, or as
two independent browser processes.
We assume that one of the websites opened during the
standard browsing session is capable of performing our Java-
Script cache attack (either by malicious design, or inciden-
tally via a malicious banner ad or other aﬃliate content
item). As Figure 5 illustrates, we show how an attacker
can detect which websites are being loaded in the victim’s
private browsing session, thus compromising her privacy.
5.2.2 Experimental Setup
Our measurements were carried out on an Intel Core i7-
2667M laptop, running Mac OS X 10.10.3. The attack code
was executed on a standard browsing session, running on the
latest version of Firefox (37.0.2), while the private browsing
session ran on both the latest version of Safari (8.0.6) and
the Tor Browser Bundle (4.5.1). The system was connected
to the WiFi network of Columbia University, and had all
non-essential background tasks stopped. To increase our
measurement bandwidth, we chose to ﬁlter all hardware-
related events. We began our attack with a simple training
phase, in which the attacker measured the cache sets that
were idle when the user was touching the trackpad, but not
moving his ﬁnger.
Shared CPUCode (JS)Cache AttackmodemodeNormal browsingPrivate browsingVictim BrowserSecure BrowserSensitive Site1413Figure 6: Memorygrams for three popular websites (Facebook, Google, Yahoo).
In each experiment, we opened the private-mode brows-
ing window, typed the URL of a website to the address bar,
and allowed the website to load completely. During this op-
eration, our attack code collected memorygrams that rep-
resent cache activity. The memorygrams had a temporal
resolution of 2ms, and a duration of 10 seconds for Safari
private browsing and 50 seconds for the higher-latency Tor
Browser. We collected a total of 90 memorygrams for 8 out
of the top 10 sites on the web (according to Alexa ranking;
May 2015). To further reduce our processing load, we only
saved the mean activity of the cache sets over time, result-
ing in a 5000-element vector for each Safari measurement
and a 25000-element vector for each Tor measurement. A
representative set of the Safari memorygrams is depicted in
Figure 6 (note that the memorygrams shown in the ﬁgure
were manually aligned for readability; our attack code does
not perform this alignment step).
Next follows the classiﬁcation step, which is extremely
simple. We calculated the mean absolute value of the Fourier
transforms for each website’s memorygrams (discarding the
DC component), computed the absolute value of the Fourier
transform for the current memorygram, and then output the
label of the closest website according to the (cid:96)2 distance.
We performed no other preprocessing, alignment, or mod-
iﬁcation to the data.
In each experiment, we trained the
classiﬁer on all traces but one, and recorded the label out-
put by the classiﬁer for the missing trace. We expected that
multiple memorygrams would be diﬃcult to align, both since
the attacker does not know the precise time when browsing
begins, and since network latencies are unknown and may
change between measurements.
We chose the Fourier transform method, as it is not af-
fected by time shifting and because of its resistance to back-
ground measurement noise—as we discuss in Section 6.3,
our primary sources of noise were timing jitter and spurious
cache activity due to competing processes. Both sources
manifested as high-frequency additive noise in our memory-
grams, while most of the page rendering activity was cen-
tered in the low frequency ranges. We thus limit our detector
to the low-pass components of the FFT output.
5.2.3 Results
Table 2 (Safari) and Table 3 (Tor Browser) show the con-
fusion matrices of our classiﬁers. The overall accuracy was
82.1% for Safari and 88.6% for Tor.
Classiﬁer
Output→,
Ground
Truth↓
Amazon (1)
Baidu (2)
Facebook (3)
Google (4)
Twitter (5)
Wikipedia (6)
Yahoo (7)
Youtube (8)
(1)
(2)
(3)
(4)
(5)
(6)
(7)
(8)
.8
.2
-
-
-
-
-
-
-
.8
-
-
-
-
-
-
-
-
.5
-
-