 **Describe the bug**
The recent transmission framebuffer is awesome ðŸŽ‰ but I ran into a couple
issues:
  * The aspect ratio of the transmission framebuffer is uncoupled from the current render target, creating x / y warping dependent on viewing dimensions
  * Nearest sampling is used for magnification which creates visual artefacts but there's no obvious motivation for Nearest over Linear here
Relevant part of three.js source
    _transmissionRenderTarget = new renderTargetType( 1024, 1024, {
    	generateMipmaps: true,
    	type: utils.convert( HalfFloatType ) !== null ? HalfFloatType : UnsignedByteType,
    	minFilter: LinearMipmapLinearFilter,
    	magFilter: NearestFilter,
    	wrapS: ClampToEdgeWrapping,
    	wrapT: ClampToEdgeWrapping
    } );
**Current three.js**  
Here we render scattered Points within a refractive sphere, notice the
asymmetrical refraction pattern in the lower image and hard pixel edges in
both  
![Screenshot 2021-10-25 at 19 00 13](https://user-
images.githubusercontent.com/3742992/138747728-e81cc880-2fae-40c7-9823-2ed2f7e7987a.jpg)  
![Screenshot 2021-10-25 at 19 00 20](https://user-
images.githubusercontent.com/3742992/138747735-529ed6ea-30ab-4e4a-a932-be391c1267fb.jpg)
**After correcting**  
Here we use Linear sample and couple the transmission framebuffer's resolution
to the viewing resolution. Refraction patterns are now symmetrical and the
hard pixel edges are resolved
![Screenshot 2021-10-25 at 19 01 45](https://user-
images.githubusercontent.com/3742992/138748059-d924b62b-c52c-493a-a780-3a2797ee6c64.jpg)  
![Screenshot 2021-10-25 at 19 02 18](https://user-
images.githubusercontent.com/3742992/138748069-3b863319-27f8-4bec-86c2-767a4c114eac.jpg)
**To Reproduce**
  * Use a refracting material with roughness set to 0 (or close 0) and IOR greater than 1
  * Notice the refraction effect has dimension dependence
  * Notice hard pixel edges where refraction scales up
_**Code**_  
Example material
    new MeshPhysicalMaterial({
    	roughness: 0.0,
    	color: 0xffffff,
    	transmission: 0.9,
    	attenuationTint: new Color(0x59ff),
    	attenuationDistance: 1.7,
    	clearcoat: 0.9
    })
_**Live example**_
Example above, click "Fix Transmission" to toggle my fix  
https://threejs-issue-22729.netlify.app
**Expected behavior**
Transmission should be independent of viewing dimensions and use Linear
filtering for magnification
**Suggested fix**
The dimension issue has 2 complexities
  * WebGL1 requires power-of-two dimensions for mipmapping
  * Different passes may require different transmission texture dimensions, requiring some level of texture management
Both these issues can be solved fully but introduce complexity to the three.js
codebase. Instead, if we expose creation of transmission textures to the user,
they can handle this to suit their needs
For example: https://github.com/haxiomic/three.js-
refraction/blob/f90ec8e27b61f0be4974c0da2f15f8789dc5336f/src/Main.hx#L60
**Platform:**
  * Device: All
  * OS: All
  * Browser: All
  * Three.js version: [dev, r133.1]