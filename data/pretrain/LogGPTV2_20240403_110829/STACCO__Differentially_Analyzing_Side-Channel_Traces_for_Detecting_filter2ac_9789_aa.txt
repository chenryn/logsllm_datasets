title:STACCO: Differentially Analyzing Side-Channel Traces for Detecting
SSL/TLS Vulnerabilities in Secure Enclaves
author:Yuan Xiao and
Mengyuan Li and
Sanchuan Chen and
Yinqian Zhang
7
1
0
2
p
e
S
6
2
]
R
C
.
s
c
[
2
v
3
7
4
3
0
.
7
0
7
1
:
v
i
X
r
a
Stacco: Differentially Analyzing Side-Channel Traces for
Detecting SSL/TLS Vulnerabilities in Secure Enclaves
Yuan Xiao
The Ohio State University
PI:EMAIL
Sanchuan Chen
The Ohio State University
PI:EMAIL
Mengyuan Li
The Ohio State University
PI:EMAIL
Yinqian Zhang
The Ohio State University
PI:EMAIL
ABSTRACT
Intel Software Guard Extension (SGX) offers software applications
a shielded execution environment, dubbed enclave, to protect their
confidentiality and integrity from malicious operating systems.
As processors with this extended feature become commercially
available, many new software applications are developed to enrich
to the SGX-enabled software ecosystem. One important primitive
for these applications is a secure communication channel between
the enclave and a remote trusted party. The SSL/TLS protocol, which
is the de facto standard for protecting transport-layer network
communications, has been broadly regarded a natural choice for
such purposes. However, in this paper, we show that the marriage
between SGX and SSL may not be a smooth sailing.
Particularly, we consider a category of side-channel attacks
against SSL/TLS implementations in secure enclaves, which we call
the control-flow inference attacks. In these attacks, the malicious
operating system kernel may perform a powerful man-in-the-kernel
attack to collect execution traces of the enclave programs at the
page level, the cacheline level, or the branch level, while position-
ing itself in the middle of the two communicating parties. At the
center of our work is a differential analysis framework, dubbed
Stacco, to dynamically analyze the SSL/TLS implementations and
detect vulnerabilities—discernible execution traces—that can be
exploited as decryption oracles. Surprisingly, in spite of the pre-
vailing constant-time programming paradigm adopted by many
cryptographic libraries, we found exploitable vulnerabilities in the
latest versions of all the SSL/TLS libraries we have examined.
To validate the detected vulnerabilities, we developed a man-in-
the-kernel adversary to demonstrate Bleichenbacher attacks against
the latest OpenSSL library running in the SGX enclave (with the
help of Graphene) and completely broke the PreMasterSecret
encrypted by a 4096-bit RSA public key with only 57,286 queries.
We also conducted CBC padding oracle attacks against the lat-
est GnuTLS running in Graphene-SGX and an open-source SGX-
implementation of mbedTLS (i.e., mbedTLS-SGX) that runs directly
inside the enclave, and showed that it only needs 48,388 and 25,717
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-4946-8/17/10.
https://doi.org/10.1145/3133956.3134016
queries, respectively, to break one block of AES ciphertext. Em-
pirical evaluation suggests these man-in-the-kernel attacks can be
completed within one or two hours.
1 INTRODUCTION
Software applications’ security heavily depends on the security of
the underlying system software. In traditional computing environ-
ments, if the operating system is compromised, the security of the
applications it supports is also compromised. Therefore, the trusted
computing base (TCB) of software applications include not only
the software itself but also the underlying system software and
hardware.
To reduce the TCB of some applications that contain sensitive
code and data, academic researchers have proposed many software
systems to support shielded execution—i.e., execution of a piece
of code whose confidentiality and integrity is protected from an
untrusted system software (e.g., [26, 28, 30, 33, 37, 44, 45, 49, 56,
68, 74, 77]). Most of these systems adopted a hypervisor-based ap-
proach to protecting the memory of victim applications against
attacks from malicious operating systems. Although promising,
these academic prototypes have yet to see the light of real-world
adoption. Not until the advent of Intel Software Guard eXtension
(SGX) [2], a hardware extension available in the most recent Intel
processors, did the concept of shielded execution become practi-
cal to real-world applications. SGX enforces both confidentiality
and integrity of userspace programs by isolating regions of their
memory space (i.e., enclaves) from other software components, in-
cluding the most privileged system software–no memory reads
or writes can be performed inside the enclaves by any external
software, regardless of its privilege level. As such, SGX greatly re-
duces the TCB of the shielded execution, enabling a wide range of
applications [20, 36, 54, 59, 65, 76].
In typical application scenarios [20, 36, 76], shielded execution
does not work completely alone; it communicates with remote
trusted parties using secure channels, e.g., SSL/TLS protocols. Se-
cure Sockets Layer (SSL) and its successor, Transport Layer Security
(TLS), are transport-layer security protocols that provide secure
communication channels using a set of cryptographic primitives.
SSL/TLS protocols are expected, as part of their design goals, to
prevent man-in-the-middle attackers who are capable of eaves-
dropping, intercepting, replaying, modifying and injecting network
packets between the two communicating parties. Therefore, appli-
cations of Intel SGX [20, 36, 76] typically regard SSL/TLS modules
inside SGX enclaves as basic security primitives to establish end-
to-end communication security.
Attacks against the SSL/TLS protocol have been reported over the
years, unfortunately. One important category of these attacks is or-
acle attacks [31]. In an oracle attack, the adversary interactively and
adaptively queries a vulnerable SSL/TLS implementation and uses
the response (or some side-channel information, e.g., the latency of
the response) as an oracle to break the encryption. Well-known ex-
amples of oracle attacks include the Lucky Thirteen Attack [12], the
Bleichenbacher attack [22], the DROWN attack [18], the POODLE
attack [52], etc. Prior demonstration of these attacks have shown
that they enable network attackers to decrypt arbitrary messages
of the SSL record protocol or decrypt the PreMasterSecret of the SSL
handshake protocol. We will detail these attacks in Section 2. Due
to the broad adoption of the SSL/TLS protocol (e.g., in HTTPS, se-
cure email exchanges), any of these attacks is devastating and easily
headlines of the security news (e.g., [41]). Accordingly, the SSL/TLS
protocol and its implementations have been frequently updated
after the publicity of these attacks. A commonly used solution is to
hide the oracles. For example, in cases where the oracle is the SSL
Alert message indicating padding errors, the error message can be
unified to conceal the real reason for the errors [35, 58] (so that the
adversary cannot differentiate padding errors and MAC errors, see
Section 2). As of today, almost all widely used SSL/TLS implemen-
tations are resilient to oracle attacks because the oracles have been
successfully hidden from the network attackers [4, 10, 35, 58].
However, adoption of SSL/TLS in SGX enclaves brings new se-
curity challenges. Although SGX offers confidentiality protection,
through memory isolation and encryption, to code and data inside
secure enclaves, it has been shown vulnerable to side-channel at-
tacks [43, 63, 73]. Side-channel attacks are a type of security attacks
against the confidentiality of a system or application by making
inferences from measurements of observable side-channel events.
These attacks have been studied in the past twenty years in multi-
ple contexts, most noticeably in desktop computers, cloud servers,
and mobile devices where CPU micro-architectures [78, 79], soft-
ware data structures [40, 57], or other system resources are shared
between mutually-distrusting software components. What makes
side-channel attacks on SGX different is that these attacks can be
performed by the privileged system software, which enables many
new attack vectors. For example, Xu et al. [73] demonstrated that
by manipulating page table entries of the memory pages of secure
enclaves, an adversary with system privilege could enforce page
faults during the execution of enclave programs, thus collecting
traces of memory accesses at the page-granularity. Recently, Lee
et al. [43] demonstrated that the control flow of enclave programs
can be precisely traced at every branch instruction by exploiting
the shared Branch Prediction Units (BPU).
The key insight of this paper is that while SSL/TLS is designed
to defend against man-in-the-middle attacks, its implementation in
SGX enclaves must tackle a stronger man-in-the-kernel adversary
who is capable of not only positioning himself in the middle of the
two communicating parties, but controlling the underlying oper-
ating system kernel and manipulating system resources to collect
execution traces of the enclave programs from various side chan-
nels. Particularly, we show that the powerful man-in-the-kernel
attackers can create new decryption oracles from the state-of-the-
art SSL/TLS implementations and resurrect the Bleichenbacher
attack and CBC padding oracle attacks against SGX enclaves.
Stacco. At the core of our work is the Side-channel Trace Analyzer
for finding Chosen-Ciphertext Oracles (Stacco), which is a software
framework for conducting differential analysis on the SSL/TLS
implementations to detect sensitive control-flow vulnerabilities that
can be exploited to create decryption oracles for CBC padding
oracle attacks and Bleichenbacher attacks. Particularly, to enable
automated large-scale analysis of various off-the-shelf SSL/TLS
libraries, we built Stacco on top of a dynamic instrumentation
engine (i.e., Pin [46]) and an open-source SSL/TLS packet generation
tool (i.e., TLS-Attacker [66]), so that we can perform standard tests
to multiple libraries in an automated manner. To understand the
exploitability of the vulnerabilities, we also modeled three types of
control-flow inference attacks, including page-level attacks [63, 73],
cacheline-level attacks [23, 60] and branch-level attacks [43], and
empowered Stacco to analyze vulnerabilities on each of these
levels. Our analysis results suggest all the popular open-source
SSL/TLS libraries we have examined are vulnerable to both types
of oracle attacks, raising the questions of secure development and
deployment of SSL/TLS protocols inside SGX enclaves.
To validate the vulnerabilities identified by Stacco, we demon-
strated several such man-in-the-kernel attacks against the latest
versions of popular cryptographic libraries: Particularly, we im-
plemented a Bleichenbarcher attack against the latest OpenSSL
library [9] running in the SGX enclaves (with the help of Graphene-
SGX [70], a library OS that supports unmodified applications to run
inside SGX enclaves) and completely broke the PreMasterSecret
encrypted by a 4096-bit RSA public key with only 57,286 queries.
We also conducted CBC padding oracle attacks against the lat-
est GnuTLS [3] running in Graphene-SGX and an open-source
SGX-implementation of mbedTLS [8] that runs directly inside the
enclave, and showed that it only needs 48,388 and 25,717 queries,
respectively, to break one block of AES ciphertext from TLS con-
nections using these libraries. Empirical evaluation suggests these
man-in-the-kernel attacks can be completed within one or two
hours. These demonstrated attacks not only provide evidence that
Stacco can effectively identify exploitable sensitive control-flow
vulnerabilities in SSL/TLS implementations, but also suggest these
oracle attacks conducted in a man-in-the-kernel manner are effi-
cient for practical security intrusion.
Responsible disclosure. We have reported the vulnerabilities and
demonstrated oracle attacks to Intel, OpenSSL, GnuTLS, mbedTLS.
Contributions of this work include:
• The first study of critical side-channel threats against SSL/TLS
implementations in SGX enclaves that lead to complete com-
promises of SSL/TLS-protected secure communications.
• The design and implementation of Stacco, a differential analy-
sis framework for detecting sensitive control-flow vulnerabili-
ties in SSL/TLS implementations, which also entails:
• A systematic characterization of control-flow inference attacks
against SGX enclaves (e.g., page-level attacks, the cacheline-
level attacks, and branch-level attacks), which empowers Stacco
to analyze the vulnerability with abstracted attacker models.
• A measurement study of the latest versions of popular SSL/TLS
libraries using Stacco that shows that all of them, including
OpenSSL, GnuTLS, mbedTLS, WolfSSL, and LibreSSL, are vul-
nerable to control-flow inference attacks and exploitable in
oracle attacks.
• An empirical man-in-the-kernel demonstration of oracle attacks
against the latest version of OpenSSL and GnuTLS running
inside Graphene-SGX and an open-source SGX-implementation
of mbedTLS, showing that such attacks are highly efficient on
real SGX hardware.
Roadmap. The rest of this paper is outlined as follows. Section 2
introduces related background concepts. Section 3 systematically
characterizes control-flow inference attacks. Section 4 describes a
differential analysis framework for detecting sensitive control-flow
vulnerabilities in SSL/TLS implementations. We demonstrate oracle
attacks against some of the vulnerable SSL/TLS implementations to
validate these detected vulnerabilities in Section 5, and then discuss
countermeasures in Section 6. In Section 7, we briefly summarize
related work in the field. Section 8 concludes our paper.
2 BACKGROUND
2.1 Intel Software Guard Extension
Intel SGX is a new processor architecture extension that is available
on the most recent Intel processors (e.g., Skylake and later processor
families). It aims to protect the confidentiality and integrity of
code and data of sensitive applications against malicious system
software [2]. The protection is achieved through a set of security
primitives, such as memory isolation and encryption, sealed storage,
remote attestation, etc. In this section, we briefly introduce some of
the key features of Intel SGX that is relevant to this paper.
Memory isolation and encryption. Intel SGX reserves a range
of continuous physical memory exclusively for enclaves. This mem-
ory range is called Enclave Page Cache (EPC), which is a subset of
Processor Reserved Memory (PRM). The EPC is managed in similar
ways to regular physical memory and is divided into 4KB pages.
Correspondingly, a range of virtual addresses, called Enclave Linear
Address Range (ELRANGE), is reserved in the virtual address space
of the applications. The page tables responsible for address trans-
lation are managed by the untrusted operating system. Therefore,
the mapping of each virtual memory page to the physical memory,
access permissions, cacheability, etc., can be controlled by the sys-
tem software that is potentially malicious. To maintain the integrity
of the page tables, the memory access permission dictated by the
developers are recorded, upon enclave initiation, in Enclave Page
Cache Map (EPCM), which is also part of PRM (thus protected from
the malicious system software). During the address translation,
EPCM is consulted to enforce access permission by bitwise-AND
the set of permissions in the EPCM entries and those in the page
table entries.
The memory management unit (MMU) enforces integrity and
confidentiality of EPC pages. Only code running in enclave mode
can access virtual memory pages in the ELRANGE that are mapped
to the EPC. Each EPC page has at most one owner at a time, and
the EPCM serves as a revert page table that records virtual address
space of each enclave that maps to the corresponding EPC page. An
EPC page can be evicted and stored in the regular physical memory
region. Evicted EPC pages are encrypted by Memory Encryption
Engine (MEE) to guarantee their confidentiality.
Figure 1: The SSL hand-
shake protocol.
2.2 SSL/TLS
Secure Sockets Layer (SSL)
is a general purpose secu-
rity protocol proposed by
Netscape Communications in
1994, which was designed to
transparently protect the con-
fidentiality and integrity of
the network communications
between applications running
on top of the TCP layer. Due
to security flaws, SSL v1.0
was never released to the pub-
lic. SSL v2.0 was released in
1995 and deprecated in 2011;
SSL v3.0 was released in 1996
and deprecated in 2015 (after
the publicity of POODLE at-
tacks [52]). Its successor proto-
cols, Transport Layer Security
(TLS) v1.0, v1.1, and v1.2, were released in 1999, 2006 and 2008,