utes we observed for any user during the time of data collec-
tion. Messaging or simple proﬁle requests do not consume a
lot of bandwidth and are hardly distinguishable from an idle
link. More intense activities like skipping through a photo
album does not consume a regular user’s bandwidth as well,
as she takes her time to view the pictures. Note that the
data traﬃc a user generates by consuming content is approx-
imately the same as in centralized OSNs, as the user needs
to download the data in those systems as well. Only when
2http://www.freepastry.org
3http://soup.informatik.uni-goettingen.de/
FacebookFacebook Broker ApplicationSOUP Demo Client(Android or Desktop)Interface ManagerApplication DataApplication ManagerMirror ManagerNetwork StackSOUP Object SOUPNODESecurity ManagerSocial ManagerSOUP ApplicationsSOUP Middleware(a) Control Overhead
(b) SOUP Traﬃc
(c) Variance in Mirror Set
Figure 14: SOUP introduces little control overhead (a), can manage the traﬃc (b) and the mirror sets are stable (c).
producing or mirroring content, SOUP generates additional
traﬃc. Produced data has to be distributed to the mirrors
as well and when acting as a mirror, the uplink of a user is
used. As a consequence, in Fig. 14b, the link is most utilized
is at the creation of a photo album. As in centralized OSNs,
mobile users on a data plan should delay such uploads until
they can access a WiFi link. Motivated by these measure-
ments our Android implementation disables mirroring on
the Android device, while not cancelling concurrent mirror-
ing on her stationary device(s). Users can however opt in to
contributing their Android device as a mirror (e.g., consider
a tablet that is connected to WiFi most of the time.)
The mirror sets in SOUP are stable. Overall, we
ﬁnd that the mirror sets remain stable and do not diﬀer
much between selection rounds as shown in Fig. 14c. Af-
ter the initial rounds, most mirror changes are additions of
a random node as described in Sec. 3. Each round, only
few nodes change additional mirrors. As a consequence, the
whole data of a user does not have to be transmitted often,
and the communication overhead remains modest.
The cryptographic overhead is low. We found that
the processing times for our ABE operations are ≈ 10%
faster than existing JAVA implementations. When encrypt-
ing a key with four attributes (the processing time grows lin-
early with the number of attributes, independent of the data
size [21,30]), the 90th percentile encryption time was 262ms,
whereas decryption was four times faster and took 61ms
per data item. As improved libraries for encryption (e.g.,
DOSN-speciﬁc approaches [30]) become available, SOUP can
implement these as a new version of the Security Manager.
SOUP can manage much more. We further tried to
push SOUP to its limits by using data from other real-world
OSNs. In our deployment, we obtained access to the Face-
book data of 20 users. Their proﬁles oﬀer details beyond a
crawler’s results, as those often do not include major parts
of a user’s data [8] (e.g., photos on Facebook are not pub-
licly available by default). The average proﬁle size was ≈10
MB, with the largest proﬁle containing hundreds of photos
in 27 photo albums and one video. This proﬁle consumed 60
MB of disk space in total. Overall, the data disclosed 2035
unique data items to us. More than 35% of all items are
less than 10 KB in size, and 93%—including most images—
are less than 100 KB in size, and large items rarely exist.
These ﬁndings largely coincide with those in [8]. The whole
data sums up to 206 MB. We selected one mirror as a host
for all data. Recall that storing these 20 proﬁles is three
times as much as 90% of SOUP nodes will have to store.
We then asked for text, photo and video data from the mir-
ror according to the request probabilities for each data type
as described in [23]. As shown in Fig. 15, the average con-
Figure 15: Bandwidth consumption at high request rates.
sumption is well below 600 KB/s, even if the mirror has
to handle 20 requests per second. With an increasing re-
quest frequency large items are hit more often, which causes
the spikes in our measurements. As a result, a request might
time out once a mirror becomes overloaded, which may hap-
pen especially to nodes mirroring popular data, or limits its
bandwidth. Note that unlike other approaches where users
are stuck with a static or heteronomous set of mirrors [9–13],
SOUP will adapt to this situation.
8. DISCUSSION AND FUTURE WORK
Use of social relations. In SOUP, social relations not
only provide incentives to store data, but also play a role
when selecting mirrors, deciding which data should be drop-
ped, or ﬁltering out malicious users and limiting their im-
pact. However, the trustworthiness of social relations within
an OSN is questionable. In particular, it remains unclear to
which extent the binary model of social relations reﬂects
the real world [31]. Recently, there have been approaches
to breaking this model and studying the eﬀect of more ex-
pressive social relations [32, 33]. In fact, friend relations in
OSNs are multi-faceted and the existence of the relation it-
self only contributes very little to its tie strength [33]. Even
though SOUP is performing well if a large fraction of the
social relations in the OSN is compromised, exploiting more
precise relation models may provide an opportunity to fur-
ther improve its performance, stability and resiliency. For
instance, during mirror selection, SOUP could prefer closely
related users represented by a strong tie. The selecting node
could value their experience sets more than those of mere ac-
quaintances, which could further reduce the impact of ma-
nipulated experience sets. Or, the value of the social ﬁlter β
could be adjusted to the strength of the relation with each
particular friend. Also, data of closer friends could be more
secured from being dropped.
Large proﬁles. Although the storage and communica-
tion overhead is currently unproblematic when deploying
SOUP to the real world, there might be diﬃculties if users
share much larger data items or generate extremely large
user proﬁles in the future. One option to overcome such
02004006008001000120014001600180001020304050Time (s)Bandwidth Used (KB/s)Node Joinor LeaveGateway Traffic (New Mobile Connected)0200400600800100012000100200300400500600700Time (s)Bandwidth Used (KB/s)DistributingProfile toMirrorsBrowsingPhotoAlbumProfileRequestBroadcastMessageto 8 friendsPhotoAlbumPublishing051015012345Selection RoundDifference to Previous RoundOne Random NodeAdded Each Round030609012015018021024027030002004006008001000Time (Seconds)Bandwidth Used (KB/s)1req/s10req/s20req/sdiﬃculties could be the use of network coding to distribute
a large proﬁle among mirror nodes. Network coding orig-
inally was proposed to improve the throughput utilization
of a given network topology [34], but can also be used in
the context of decentralized data storage [35]. Here, a ﬁle f
can be split into k equally sized (f /k) pieces, which are in
turn encoded into n fragments using an (n, k) maximum dis-
tance separable code. After distributing the fragments to n
nodes, it is possible to obtain the complete information from
k encoded fragments. Thus, instead of storing full replicas
among mirrors, SOUP could distribute encoded parts of the
proﬁle (pieces), and then allow for reconstruction from those
parts’ fragments. Doing so can (i) prevent one node from
being overloaded with a large proﬁle and (ii) increase the
data availability of SOUP as only k fragments need to be
available to reconstruct the data of interest.
Extended recommendations. The recommendations
in SOUP currently measure whether or not a user’s friends
were able to retrieve the user’s data from her mirrors (i.e.,
the availability of data). SOUP can be extended in a way
that a user’s friend also reports the bandwidth available at
the mirrors, which is then considered during mirror selec-
tion. Ultimately, this could lead to a better quality of service
for users requesting data from mirrors.
9. CONCLUSION
In this paper we presented SOUP, a decentralized online
social network (DOSN). SOUP addresses the severe privacy
concern from centralized OSNs by returning the control over
who can access which data to the users, and can securely en-
crypt user data according to a ﬁne-grained access policy. As
our key contribution, we advocate a new approach to storing
user data in a large-scale DOSN. It successfully obtains the
best mirror nodes for each user to achieve high data avail-
ability with little overhead, while keeping all selected mirrors
synchronized. It is robust in that data of all users are highly
available without node discrimination, and can converge to
a stable state quickly. It further copes with adverse situa-
tions eﬀectively, and can opportunistically leverage social
relations and altruistically provided resources. Enabling the
aforementioned features distinguishes SOUP as a unique,
full-ﬂedged DOSN from existing DOSNs and their deﬁcien-
cies. Finally, our comprehensive implementation and real-
world deployment of SOUP validate its practicability, in-
cluding its solid support toward mobile users.
Acknowledgements: We would like to thank the anony-
mous reviewers for their valuable feedback, as well as Joshua
Stein, Skyler Berg and Nicole Marsaglia for their proof-
reading eﬀorts. This work has been partially supported
by the EU FP7 CleanSky ITN (grant no.
607584), the
National Science Foundation (grant no. CNS-0644434 and
CNS-1118101), the Lindemann Foundation and the Simula-
tion Science Center, sponsored by the Volkswagen Founda-
tion and the State of Lower Saxony, Germany. Any opinions,
ﬁndings, and conclusions or recommendations expressed in
this material are those of the authors and do not necessarily
reﬂect the views of the supporters.
10. REFERENCES
[1] B. Debatin, J. P. Lovejoy et al., “Facebook and Online
Privacy: Attitudes, Behaviors, and Unintended Consequences,”
Journal of Computer-Mediated Communication, vol. 15, pp.
83–108, 2009.
[2] http://linkd.in/1jaSeJK (all URLs checked 31/08/2014).
[3] C. Dwyer, “Privacy in the Age of Google and Facebook,”
Technology and Society Magazine, IEEE, vol. 30, no. 3, pp.
58 –63, 2011.
[4] “The Diaspora Project,” https://joindiaspora.com/.
[5] A. Shakimov, H. Lim et al., “Vis-a-Vis: Privacy-preserving
online social networking via Virtual Individual Servers,” in
COMSNETS’11.
[6] D. Liu, A. Shakimov et al., “Conﬁdant: Protecting OSN Data
without Locking it Up,” in Middleware ’11.
[7] R. Sharma and A. Datta, “SuperNova: Super-peers based
Architecture for Decentralized Online Social Networks,” in
COMSNETS’12.
[8] R. Baden, A. Bender et al., “Persona: An Online Social
Network with User-deﬁned Privacy,” in SIGCOMM ’09.
[9] K. Rzadca, A. Datta et al., “Replica Placement in P2P
Storage: Complexity and Game Theoretic Analyses,” in
ICDCS ’10.
[10] S. Nilizadeh, S. Jahid et al., “Cachet: A Decentralized
Architecture for Privacy Preserving Social Networking with
Caching,” in CoNEXT’12.
[11] L. Cutillo, R. Molva et al., “Safebook: A Privacy-Preserving
Online Social Network Leveraging on Real-life Trust,” Com.
Mag., IEEE, vol. 47, no. 12, pp. 94–101, 2009.
[12] A. Mahdian, R. Han et al., “Results from a Practical
Deployment of the MyZone Decentralized P2P Social
Network,” CoRR, 2013.
[13] S. Biedermann, N. P. Karvelas et al., “ProofBook: An Online
Social Network Based on Proof-of-Work and
Friend-Propagation,” in SOFSEM’2014: Theory and Practice
of Computer Science. Springer, 2014, pp. 114–125.
[14] T. Isdal, M. Piatek et al., “Privacy-preserving P2P Data
Sharing with OneSwarm,” in SIGCOMM’10.
[15] S. Androutsellis-Theotokis and D. Spinellis, “A Survey of
Peer-to-Peer Content Distribution Technologies,” ACM
Comput. Surv., vol. 36, pp. 335–371, 2004.
[16] A. Pace, V. Quema et al., “Exploiting Node Connection
Regularity for DHT Replication,” in SRDS’11.
[17] S. L. Blond, F. L. Fessant et al., “Choosing Partners Based on
Availability in P2P Networks,” ACM TAAS, vol. 7, no. 2,
p. 25, 2012.
[18] L. Gyarmati and T. Trinh, “Measuring User Behavior in Online
Social Networks,” IEEE Network, vol. 24, no. 5, pp. 26 –31,
2010.
[19] F. Benevenuto, T. Rodrigues et al., “Characterizing User
Behavior in Online Social Networks,” in IMC ’09.
[20] A. Mislove, M. Marcon et al., “Measurement and Analysis of
Online Social Networks,” in IMC ’07.
[21] J. Bethencourt, A. Sahai et al., “Ciphertext-Policy
Attribute-Based Encryption,” in IEEE SP ’07.
[22] C. Wilson, B. Boe et al., “User Interactions in Social Networks
and their Implications,” in EuroSys’09.
[23] F. Schneider, A. Feldmann et al., “Understanding Online
Social Network Usage from a Network Perspective,” in IMC’09.
[24] B. Viswanath, A. Post et al., “An Analysis of Social
Network-based Sybil Defenses,” in SIGCOMM’10.
[25] B. Viswanath, A. Mislove et al., “On the Evolution of User
Interaction in Facebook,” in WOSN’09.
[26] “Stanford Large Network Dataset Collection,”
http://snap.stanford.edu/data/.
[27] J. Jiang, C. Wilson et al., “Understanding Latent Interactions
in Online Social Networks,” in IMC’10.
[28] A. Verde, “Facebook Demographics,”
http://www.slideshare.net/amover/facebook-demographics-
2011.
[29] A. I. T. Rowstron and P. Druschel, “Pastry: Scalable,
Decentralized Object Location, and Routing for Large-Scale
Peer-to-Peer Systems,” in Middleware ’01.
[30] O. Bodriagov and S. Buchegger, “Encryption for Peer-to-Peer
Social Networks,” in Security and Privacy in Social Networks.
Springer, 2013, pp. 47–65.
[31] D. Koll, J. Li et al., “On the State of OSN-based Sybil
Defenses,” in NETWORKING’14.
[32] S. Tang, J. Yuan et al., “Relationship Classiﬁcation in Large
Scale Online Social Networks and its Impact on Information
Propagation,” in INFOCOM’11.
[33] E. Gilbert and K. Karahalios, “Predicting Tie Strength with
Social Media,” in CHI’09.
[34] S.-Y. Li, R. Yeung et al., “Linear Network Coding,” Inform.
Theory, IEEE Trans. on, vol. 49, no. 2, pp. 371 –381, 2003.
[35] A. Dimakis, P. Godfrey et al., “Network Coding for
Distributed Storage Systems,” Information Theory, IEEE
Trans. on, vol. 56, no. 9, pp. 4539 –4551, 2010.