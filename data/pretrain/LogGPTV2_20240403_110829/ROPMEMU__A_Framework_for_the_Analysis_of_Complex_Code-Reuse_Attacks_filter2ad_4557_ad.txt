to evaluate ROPMEMU on the most complex ROP-based
payload publicly available. All the experiments have been
performed on an Ubuntu 14.04 x86-64 running Python
2.7 and Volatility 2.4. The virtual machine containing the
rootkit has been provided kindly by the authors of Chuck
and runs Ubuntu Server 13.04 64-bit with UEFI BIOS.
5.1 Chains Extraction
In the ﬁrst experiment we tested the ability of the mul-
tipath emulator of ropmemu to correctly extract the per-
sistent chain (the copy chain), and the two dynamically
generated chains (the dispatcher chain and the payload
chain). The last two are volatile and they are only created
in memory when the right conditions are triggered. The
results are summarized in Table 1.
ROPMEMU emulator was able to automatically retrieve
the entire code of the three chains. The copy chain is the
longest with 414,275 instructions, but it is composed of
only a single basic block. The lack of a control ﬂow logic
makes this chain similar to a classic ROP shellcode, with
the only diﬀerence of being composed of over 180K gad-
gets. This is a consequence of its main task: the creation
and the copy in memory of the ﬁrst dynamic component
(dispatcher chain).
On the contrary, the dispatcher chain and payload chain
have a lower number of gadgets but they have a more
complex control ﬂow graph. In particular, the dispatcher
chain contains three branches and seven blocks of code. To
recover the entire code, the emulator generated seven dis-
tinct JSON traces. The payload chain comprises instead 34
unique blocks and 26 branch points. This means the con-
trol ﬂow graph has a more complex logic. Moreover, this
chain invokes nine unique kernel functions (find_get_pid,
kstrtou16, kfree, __memcpy, printk, strncmp, strrchr,
sys_getdents, and sys_read – the last two hooked by the
rootkit) for a total of 17 function calls over the diﬀerent
execution paths.
This experiment proves that ropemu can explore and
dump complex ROP chains, which would be impossible to
analyze manually. We believe these chains show the limits
of the current malware analysis to cope with return ori-
ented programming payloads and the eﬀectiveness of the
proposed framework.
5.2 Transformations
In this experiment we show the eﬀect of the other phases
of our analysis on the extracted ROP chains. In particular,
since it is impossible to show the entire code, we present
the eﬀect of the transformations on the payload size. The
results are summarized on table 2. As shown in the third
column, the unchain pass reduces considerably the ROP
chain size (on average 39%). The CFG recovery pass ﬁlters
out the instructions implementing the conditional state-
ments, translates the chain from the stack pointer domain
to the instruction pointer one, and ﬁnally applies the loop
compression step. These transformations reduce the copy
chain to only 75 instructions (starting from over 414K).
The payload chain is less aﬀected by these transformations
because it contained ROP loops instead of unrolled loop.
5.3 CFG Recovery
In the ﬁnal experiment, we tested the ROPMEMU ca-
pability to retrieve and reﬁne the control ﬂow graph of
a ROP chain as explained in section 4. Figure 3 and 4
illustrate the ﬁrst phase on the dispatcher chain. In par-
ticular, Figure 3 represents the ﬁrst version of the CFG,
without any transformation. On Figure 4 we can observe
the eﬀects of the reﬁnement steps. In these two ﬁgures ev-
ery node represents a long stream of assembly instructions
while the edges show the branch conditions.
The second step works on the binaries blobs and gener-
ates an ELF ﬁle. This ELF ﬁle connects all the blocks by
leveraging the metadata information as explained in sec-
tion 4 and the result can be inspected by ordinary reverse
engineering tools. To test this functionality we opened the
resulting ﬁle with IDA Pro. In Figure 5 we can observe
the ELF representing the copy chain completely converted
into the classic “EIP-based” programming paradigm. The
graph is simple, there are no branches and the core func-
Chain
Copy
Dispatcher
Payload
Instructions Gadgets Blocks Branches Functions Calls
414,275
63,515
6320
184,126
28,874
2913
1
7
34
-
3
26
-
1
9
-
5
17
Table 1: Statistics on the emulated ROP chains in terms of number of instructions, gadgets, basic blocks,
branches, unique functions, and total number of invoked functions.
Chain
Copy
Dispatcher
Payload
Initial State Unchain Phase CFG Recovery Phase
414,275
63,515
6320
276,178
40,499
3331
75
16,332
2677
Table 2: Number of instructions in each chain after each analysis phase
Figure 3: Dispatcher
- Raw CFG
Figure 4: Dispatcher
- Final CFG
tionalities are represented by the main loop highlighted
in the picture. Figure 6 illustrates instead the dispatcher
chain view on IDA Pro (for the sake of clarity every node
is collapsed to generate a smaller picture). The graph is
similar to Figure 4, with just few additional nodes due to
how the basic blocks are connected together. As expected,
the shape of the graph is the same.
The control ﬂow graph of the payload chain (omitted due
to its large size) comprises 34 blocks organized in two main
branches: the sys_read block and sys_getdents one.
5.4 Results Assessment
An assessment system is fundamental to verify the re-
sults of the experiments. However, since it is not possible
to run the ﬁnal ELF to compare its behavior with the orig-
inal rootkit, we decided to develop a number of individual
veriﬁcation tools.
First of all, we attached a debugger to the KVM virtual
machine running the rootkit. For this task, we used GDB,
extended with a set of Python plugins to extract infor-
mation about the running rootkit and compare them with
the results of our framework. The assessment framework
is working on the live virtual machine while ROPMEMU is
working on a memory dump. The GDB plugins collect the
Figure 5: Copy
- IDA Pro
Figure 6: Dispatcher - IDA Pro
state of the guest VM (memory and CPU) and the trace of
all the executed instructions. These information are then
compared with the JSON traces generated by ROPMEMU
to verify their accuracy.
We relied on this testing setup during development (to
detect and patch bugs in our code) and at the end of the
experiments to verify that both the emulation of individ-
ual instructions and the entire lists of instructions in each
ROP chain was correctly reconstructed by ROPMEMU.
It is important to note that the assessment framework is
used only for debugging and cannot replace ROPMEMU
as an analysis system. In fact, in the general case, the an-
alyst does not have access to a virtual machine to emulate
the compromised system, but only to its physical memory
dump.
Using this setup we veriﬁed that all the results presented
in this paper match those found using the live GDB anal-
ysis. Finally, we manually veriﬁed the control ﬂow graph
of the extracted chains by inspecting the source code of
the ROP rootkit.
5.5 Performance
The performance of our system largely depends on the
emulation phase. The emulator is built on top of Volatility
and the time required to perform the multipath emulation
is linear in the number of instructions and the number of
paths to emulate. Our framework was able to emulate the
entire copy chain in 52 minutes, while the dispatcher chain
required 32 minutes to generate the three traces containing
all the possible paths.
The performance of the unchain component depends in-
stead on the size of the blocks to analyze. In our experi-
ments, it ranged from the worst case of 61 minutes for copy
chain (where everything is in a single huge basic block),
to 3 minutes per block for the dispatcher chain (that is
instead composed of smaller blocks). The payload chain
traces have been generated on average in eight minutes
while the unchain phase parsed each block in one minute.
Overall, the entire analysis of the rootkit from the em-
ulation to the ﬁnal ELF binary took four hours. All mea-
surements have been recorded on a 16-Core Intel E5-2630
(2.3GHz) with 24GB RAM.
6. LIMITATIONS
As any other binary analysis tool, ROPMEMU has a
number of intrinsic limitations. In particular, the proposed
solutions combine two techniques: memory forensics and
emulation. The ﬁrst requires a physical memory dump
acquired after the rootkit has been loaded in memory –
and it is therefore prone to anti-acquisition techniques.
The ROP analysis relies instead on the emulator im-
plementation. The main limitation of an emulation-based
solutions is the accuracy of the emulator itself. In particu-
lar, this approach is prone to anti-emulation techniques
speciﬁcally targeting instructions side eﬀects. As a re-
sult, the current ROPMEMU prototype can be evaded
by advanced ROP chains which implement ad-hoc anti-
emulation techniques. However, 1) these techniques have
never been observed so far in any ROP chain, and 2) sim-
ilar limitations aﬀect every existing binary analysis tool.
For instance, IDA Pro can be easily evaded by malware im-
plementing anti-disassembly tricks and malware sandboxes
can be evaded by anti-emulation code. A path explosion
problem is also common in approaches based on multi-path
exploration or symbolic execution. However, these limita-
tions do not make these tools useless – they just force the
analyst to be more careful and manually disable evasion
techniques before proceeding with the analysis. The same
considerations apply to ROPMEMU.
Because of the intrinsic limitations of using an emula-
tor on dynamically generated code, a perfect ROP reverse
engineering system cannot exist. However, the solution
presented in this paper is the ﬁrst solution to allow the
analysis of complex ROP code, and was designed and im-
plemented to cope with the most sophisticated examples
of this kind available today.
Finally, our current implementation is a research proto-
type and therefore lacks the robustness and completeness
required to operate on arbitrary inputs.
7. RELATED WORK
Return Oriented Programming has been extensively stud-
ied in the scientiﬁc literature from several perspectives.
However, very few works have presented novel techniques
dedicated to the analysis of ROP chains and, due to space
limitations, in this section we will focus only on this re-
search.
Return oriented programming has been formalized by
Shacham et al. [51], but the core ideas were already known
in the underground community for years [39, 50]. The mas-
sive ROP adoption observed over the years has its roots
in the protections introduced by the operating systems
(namely NX ). These protections signiﬁcantly hindered the
exploitation process and forced oﬀensive researchers to de-
vise code reuse attacks. ROP is without doubt the most
common instance of these attacks and is widely adopted in
modern exploits and, recently also in malware. The secu-
rity community proposed many techniques to detect, pre-
vent, or stop ROP, each with its own limitations and short-
comings. For example, threshold based defenses [45, 14]
have been bypassed by using unexpected long sequences
of gadgets [21]. Similarly, also control ﬂow integrity (CFI)
approaches have shown their limitations to combat ROP
as described by Davi et al. [18]. Along the same line, ROP
protections proposed by the industry – like the ones in
the Microsoft’s Enhanced Mitigation Experience Toolkit
(EMET) [37] – have been bypassed by motivated researchers [5,
25, 48]. The most robust defense mechanisms are proba-
bly the one that apply at compile-time (e.g.,
[43]), but
unfortunately it is hard to measure their eﬀectiveness be-
cause the tools proposed so far are not available and, to
the best of our knowledge, there are no public bypass for
these techniques.
Moreover, oﬀensive researchers have also proposed new
code reuse attacks. Speciﬁcally, they showed it is possi-
ble to have ROP chains without any return [13]. More-
over, they proved the feasibility of jump oriented pro-
gramming (JOP) [10] and sigreturn oriented programming
(SROP) [11]. Finally, JIT-ROP [52] showed that it is pos-
sible to craft a ROP payload when ﬁne-grained ASLR is in
place. Although there are so many variations of code reuse
attacks, ROP is still the most popular one. For this rea-
son, in this paper, we created a comprehensive framework
to cope with ROP chains.
In this direction, the ﬁrst study has been conducted
by Lu et al. [36]. The authors proposed DeRop, a tool
to convert ROP payloads into normal shellcodes, so that
their analysis can be performed by common malware anal-
ysis tools. However, the authors tested the eﬀectiveness of
their system only against standard exploits containing re-
ally simple ROP chains. In this paper, we adopt some of
the transformations proposed by DeRop – which we com-
plement by a number of novel techniques required to deal