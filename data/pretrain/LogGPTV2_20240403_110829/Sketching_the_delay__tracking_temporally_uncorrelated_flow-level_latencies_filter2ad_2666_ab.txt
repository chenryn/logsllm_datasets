we refer to as measurement intervals.
A canonical sketch data structure that we can exploit in
our setting is the multi-stage ﬁlter [13]. In this data struc-
ture, each stage has C associated counters, which are ini-
tialized to zero. Then, for each incoming packet, a hash of
its ﬂow identiﬁer is used to determine which counter will be
updated in the 1st stage. If, for example, one wishes to mea-
sure ﬂow sizes, then the packet size is added to that counter.
Since every ﬂow always hashes to a particular position, its
associated counter can be queried to obtain an upper bound
on its size (only an upper bound, since other ﬂows can hash
to the same position, i.e., can collide). Additional stages can
then be added that are independent replicas of this scheme,
thus randomizing collisions. Then, the estimated size of a
given ﬂow is the minimum of all of its associated counters
in each stage. The Count-Min Sketch [9] is also based on a
similar approach.
485+
+
++
5  5 
5  5 
5 
5 
4M
D
4M
D
2=?AJ
4M4
5  5 
5 
DH
,A=O
2J+KJAH
6EAIJ=F5K
Figure 1: Basic data structure. In each cell, s stores
the sum and n the number of packets that hash to
that cell.
for i=1, R do
1: procedure Update state(f low, τ )
2:
3:
4:
5:
6:
7: end procedure
j ← (hash(i, f low)%C)
SDS[i][j].S ← SDS[i][j].S + τ
SDS[i][j].N ← SDS[i][j].N + 1
end for
⊲ Compute ith hash
Figure 2: SDS – Per-packet operations
Our initial idea is to use this sketching technique for per-
ﬂow delay measurement. The data structure we propose
called Simple Delay Sketch (SDS) contains a series of cells
organized in a matrix of R rows and C columns. Each row
r has an associated pseudo-random hash function hr that
returns a value in the range [0, C − 1]. Each cell of the
matrix contains a tuple of values , with s storing the
sum and n the number of packets that hash to that cell. The
data structure is graphically depicted in Figure 1.
Update. When a packet that belongs to a ﬂow with iden-
tiﬁer f arrives, for each row r, a position in the matrix is
determined using its hash function hr, which yields position
(r, hr(f )). Then, the cells in these positions are updated
as follows. The s values of each cell are increased by the
delay of the packet (i.e., the current time at receiver minus
the timestamp embedded in the packet at sender ), while n
values are increased by one (i.e., maintains a count of the
packets that hashed to that cell). In other words, s values
contain the sum of all packet delays that hit that cell, while
n values represent packet counts. Note also that the per-
packet cost of this measurement scheme is, for each row, a
hashing operation and two counter updates. The full algo-
rithm is described in Figure 2.
Delay Estimation. If the data structure were single-row
and inﬁnitely large, and the hash functions were perfectly
random, each non-empty cell would measure the average
delay of the packets of a particular ﬂow. That is, the data
structure would be collision-free, since two ﬂows would not
hash to the same position. Therefore, to obtain the (exact)
average delay of ﬂow with identiﬁer f , one would simply
divide the s and n values of cell (0, h0(f )).
Nmin = ∞
for i=1, R do
end if
j ← hash(i, f low)
if SDS[i][j].N ,
which keep aggregate timestamps, packet counts, and packet
digests respectively. Both the sender and receiver maintain
separate LDS copies, that is transmitted by the sender at the
end of the measurement interval. Each row r has now two
associated pseudo-random hash functions hr and h′
r. While
hr returns a value in the range [0, C − 1], h′
r returns a value
in the range [0, k − 1], where k is a conﬁguration parameter
of our algorithm that, as we shall see, represents the length