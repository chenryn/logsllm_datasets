tumCrank()
dispense()
果>0.就进入NoQuarterState，否则进入
SoldOutState.
SoldOutState
insertQuarter()
告诉颐客.“糖果全部售完”
(ectQuarter0)
Crank)
WinnerState
sertQuarter[)
umCrank0
你可以继续把这张图读完，我们稍后也金继续实现这张图。
400
第10章
---
## Page 437
状态模式
实现我们的状态类
现在是实现一个状态的时候了：我们知道我们要的行为是什么，我们只需要把它变成代码。我们打算完全遵守
所写下的状态机代码，但是这一次是分散在不同的类中。
让我们从NoQuarterState开始：
首光我们需要实现State接口。
我们通过构造器得到糖果机
的引用，然后将它记录在实
例变量中。
public class NoQuarterState implements State {
GumballMachine gumballMachine;
如果有人投入了25分钱，
public NoQuarterState (GumballMachine gumballMachine)(
我们就打印出一条消息，
this. gumballMachine = gumbal1Machine;
说我们接受了25分钱，然
后改变机器的状态到
public void insertQuarter ()(
HasQuartetState,
System.out.println("You inserted a quarter");
gumballMachine.setState (gumballMachine.getHasQuarterState ()) ;
你易上就舍考到这是
如何工作的。
public void ejectQuarter(){
System.out.println("You haven't inserted a quarter");
如果没给钱，就不能要
求退钱。
public void turnCrank() {
System.out.println("You turned, but there's no quarter");
如果没给钱，就不能要求糖
public void dispense ()(
System.out.println ("You need to pay first")
集
如果没得到钱，我们就不能发
放糖果。
我们要做的事情，是实现适
合我们所在的达个状态的行
C
为。在某些情况下，这个行为会
让糖票机的状态改变。
你现在的位置
401
---
## Page 438
糖果机内的状态对象
重新改造糖果机
在完成这些状态类之前，我们要重新改造糖果机一一好让你了解这一切的原理。我们从状
态相关的实例变量开始动手，然后把原来使用整数代表的状态改为状态对象：
public class GumballMachine {
final static int SOLD_OUT =0;
final static int NO_QUARTER 
1
在这个糖果机中，我们更新代码以使用
finalstatic int HAS_QUARTER
2：
新的类，而不再使用静态整数。除了一
final static int SOLD =3;
个类持有整数，而另一个是对象…
int state = SOLD_OUT;
外，两老的代码其实很类似。
int count =0;
旧代码
public class GumballMachine {
State soldoutState;
State noQuarterState;
State hasQuarterState;
State soldState;
State state = soldOutState;
int count =0;
新代码
所有的状态对象都是在构造器中创
建并赋值的。
这个实例变量现在持有
一个状态对象，而不是
一个整数。
402
第10章
---
## Page 439
状态模式
完整的糖果机类···
public class GumballMachine {
所有的状态都在这里
State soldOutState;
..….以及实例变量state。
State noQuarterState;
State hasQuarterState;
这个coumt实例变量记录机器内装有多
State soldState;
少糖果一一开始机器是没有装糖果的。
State state = soldoutState;
int count = 0;
构造器取得糖果的初始数目并把它
public GumballMachine (int numberGumballs) (
存放在一个实例变量中。
soldOutState = new SoldOutState(this);
noQuarterState = new NoQuarterState(this);
每一种状态也都创建一个状态实例。
hasQuarterState = new HasQuarterState(this):
soldState = new SoldState(this);
this.count = numberGumballs;
如果超过0颗糖果
if (numberGumballs > 0) {
我们就把状态设为
state = noQuarterState;
NoQuarterState,
public void insertQuarter()
state.insertQuarter();
现在这些动作变得很客易实现了。我
们只是要托到当前状态。
public void ejectQuarter ()
1
state.ejectQuarter();
八
请注意，我们不需要在GambalIMachine中
准备一个dispense（）的动作方法，因为这只
是一个内部的动作：用户不可以直接要求
public void turnCrank()
机器发放糖果。但我们是在状态对象的
state.turnCrank();
tatnCrank(）方法中调用dispense(）方法的。
state.dispense();
void setState(State state)
这个方法元许其他的对象（像我们的
this.state = state;
状态对象）将机器的状态转换到不同
的状态。
void releaseBall(){
System.out.println("A gumball comes rolling out the slot...");
if (count 1=0）{
count =count-1;
这个机器提供了一个releaseBall（）的辅助方法来
释放出糖果，并将count实例变量的值减！。
//这里有更多的方法，其中包括每一个状态的getter"
这包括了像setNoQuarterState（）这样用来取得每个对象的状
态的方法：还包括可以取得糖果的数目的setCount）方法。
你现在的位置
403
---
## Page 440
糖果机的更多状态
实现更多的状态
现在你应该开始对糖果机和状态之间是如何配合的有点儿感觉了。让我们实现
HasQuarterState（有25分钱）和SoldState（售出糖果）类.…….
当状态被实例化的
时候，我们要传入
public class HasQuarterState implements State {
CumbalMachine的引用来
GumballMachine gumballMachine;
作为参数。
public HasQuarterState (GumbaliMachine gumballMachine) (
this.gumballMachine = gumballMachine;
这是一个对此状
态不愉当的动作。
public void insertQuarter()(
System.out.println("You can't insert another quarter");
退出顾客的25分
public void ejectQuarter()(
钱，并将状态转摘到
System.out.println("Quarter returned");
NoQuattetState状态。
gumballMachine.setState(gumballMachine.getNoQuarterState ());
当曲杨被转动时，我们
public void turnCrank(){
System.out.println("You turned...") ;
就调用它的setState（）方
gumballMachine setState (gumballMachine.getSoldState ());
法，并传入SolaState对
象作为参数，将机器的
public void dispense()(
System.out.println("No gumball dispensed");
状态转换到SotaState状
态。这个SoldState对象可
以逐过setSoldState(）方法
这是此状态的另一个
取得（每个状态都有一个
不恰当的动作。
setter方法）。
404
第10章
---
## Page 441
状态模式
现在，让我们来看看SoldState类....
对此状态来说，
这些都是不恰当
public class SoldState implements State {
的动作。
//构造器和实例变量在这里
public void insertQuarter(){
System.out.println("Please wait, we're already giving you a gumball");
public void ejectQuarter (){
System.out.println("Sorry, you already turned the crank");
public void turnCrank(){
System.out.println("Turning twice doesn't get you another gumball!");
public void dispense(){
gumballMachine.releaseBal1 () ;
if (gumballMachine.getCount()>0）(
gumballMachine.setState (gumballMachiye.getNoQuarterState ()) ;
else{
System.out.println("Oops, out of gumballs!") ;
gumballMachine.setState(gumbaljMachine.getSoldOutState());
我们问机器糖果的制余
真正的工作在这里。
我们现在是在SoldState状态.也
数目是多少，然后将状态
就是说顾客已经付钱了。所以我
转换到NoQuarterState或老
们首先需要机器发放糖策。
SoldOutStete.
BRAIN
POWER
让我们来回头看看糖果机的实现。如果曲柄被转动了，但是没有成功（比方说顾客没有
先投入25分钱的硬币）。在这种情况下，尽管没有必要，但我们还是会调用dispense(方
法。对于这个问题你要如何修改呢？
你现在的位置，
405
---
## Page 442
轮到你实现一个状态
yourpencil
我们还剩下一个没有实现的类：SoldOutState（糖果售馨状态）。你何不
来实现它呢？小心地弄清楚糖果机在每种情况下应该如何反应。在继续下
一页之前，请先检查一下你的答案
public class SoldOutState implements
f
Gumbal1Machine gumballMachine;
public SoldOutState (GumballMachine gumballMachine)(
public void insertQuarter()(
public void ejectQuarter()(
public void turnCrank()(
public void dispense ()(
406
第10章
---
## Page 443
状态模式
检查一下，到目前为止我们已经做了哪些事情·…·
你现在有了一个糖果机的实现，它在结构上和前一个版本差异颇大，但是功能上却是一样的。通
过从结构上改变实现，你已经做到了以下几点。
1
将每个状态的行为局部化到它自己的类中。
将容易产生问题的if语句删除，以方便日后的维护。
让每一个状态“对修改关闭”，让糖果机“对扩展开放”，因为可以加人新的状态类（我们
马上就这么做）。
口
创建一个新的代码基和类结构，这更能映射万能糖果公司的图，而且更容易阅读和理解。
现在，再多检查一些我们所做的功能面：
现在糖果机持有每个状态
糖果机状态
类的实例。
当前状态
糖果机
Sold
机器的当前状态总是这些
类实例心一。
PDO
nOPIOS
你现在的位置
407
---
## Page 444
状态转换
当动作被调用时，它就会被要托
糖果机状态
到当前的状态。
turnCrank()
turnCrank()
当前状态
糖果机
在这个例子中，当机器在
HasQuarter状态时.调用
tanCrank(）方法，机器会转捕
到Sold（售出糖果）状态。
转换到Sold状态
机器进入Sotd状态
发放一颗糖果.
糖果机状态
更多的糖果
()asuadsi
·…然后机器将
根据刺下的糖
当前状态
果数目，决定要
进入SoldOut还是
糖果机
NoQaarte状态。
408
第10章
---
## Page 445
状态模式
幕后花絮
Sharpenyourpencil
自我导蓝
从NoQuarter状态开始追踪糖果机的工作步骤。也请利用机器的动作和输出为图加上说明。在这个练习
中，你可以假设机器中有很多糖果。
1
糖果机状态
糖果机状态
糖果机
糖果机
3
果机状强
糖果机状态
糖果机
糖果机
你现在的位置
409
---
## Page 446
定义状态模式
定义状态模式
是的，这是真的，我们刚刚实现了状态模式！现在，让我们来看看它是怎么一回事：
状态模式允许对象在内部状态改变时改变它的行为，对
象看起来好像修改了它的类。
这个描述中的第一部分附有相当多的涵义，是吧？因为这个模式将状态封装成为独立的类，并将动作
委托到代表当前状态的对象，我们知道行为会随着内部状态而改变。糖果机提供了一个很好的例子：
当糖果机是在NoQuarterState或HasQuarterState两种不同的状态时，你投入25分钱，就会得到不同的行
为（机器接受25分钱和机器拒绝25分钱）。
看：如果说你使用的对象能够完全改变它的行为，那么你会觉得，这个对象实际上是从别的类实例化
而来的。然而，实际上，你知道我们是在使用组合通过简单引用不同的状态对象来造成类改变的假象。
好了，现在就让我们检查状态模式的类图：
State接口定义了一个所有具体状态的
共同接口：任何状态都实现这个相同的
Context（上下文）是一个类，它可以
接口，这样一来，状态之间可以互相替
拥有一些内部状态。在我们的例子中
换。
GumballMachine就是这个Context。
Context
State
(isenbel
handle()
state.handle()