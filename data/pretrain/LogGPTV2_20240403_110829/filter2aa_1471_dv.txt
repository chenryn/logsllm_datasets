File ID           : 0000000000000000000c000000617912
Parent file ID    : 00000000000000000018000000617ab6
Source info       : 0x00000000: *NONE*
Security ID       : 0
Major version     : 3
Minor version     : 0
Record length     : 96
Usn               : 2976
File name         : UsnNew.txt
File name length  : 20
Reason            : 0x00002000: Rename: new name
Time stamp        : 12/8/2018 15:22:15
File attributes   : 0x00000020: Archive
File ID           : 0000000000000000000c000000617912
Parent file ID    : 00000000000000000018000000617ab6
Source info       : 0x00000000: *NONE*
Security ID       : 0
Major version     : 3
Minor version     : 0
Record length     : 96
Usn               : 3056
File name         : UsnNew.txt
File name length  : 20
Reason            : 0x80002000: Rename: new name | Close
Time stamp        : 12/8/2018 15:22:15
File attributes   : 0x00000020: Archive
File ID           : 0000000000000000000c000000617912
Parent file ID    : 00000000000000000018000000617ab6
Source info       : 0x00000000: *NONE*
Security ID       : 0
Major version     : 3
Minor version     : 0
Record length     : 96
The entries reflect the individual modification operations
involved in the operations underlying the command-line
operations. If the change journal isn’t enabled on a volume (this
happens especially on non-system volumes where no applications
have requested file change notification or the USN Journal
creation), you can easily create it with the following command (in
the example a 10-MB journal has been requested):
Click here to view code image
d:\ >fsutil usn createJournal d: m=10485760 a=2097152
The journal is sparse so that it never overflows; when the journal’s on-disk
size exceeds the maximum defined for the file, NTFS simply begins zeroing
the file data that precedes the window of change information having a size
equal to the maximum journal size, as shown in Figure 11-49. To prevent
constant resizing when an application is continuously exceeding the journal’s
size, NTFS shrinks the journal only when its size is twice an application-
defined value over the maximum configured size.
Figure 11-49 Change journal ($UsnJrnl) space allocation.
Indexing
In NTFS, a file directory is simply an index of file names—that is, a
collection of file names (along with their file record numbers) organized as a
B-tree. To create a directory, NTFS indexes the file name attributes of the
files in the directory. The MFT record for the root directory of a volume is
shown in Figure 11-50.
Figure 11-50 File name index for a volume’s root directory.
Conceptually, an MFT entry for a directory contains in its index root
attribute a sorted list of the files in the directory. For large directories,
however, the file names are actually stored in 4 KB, fixed-size index buffers
(which are the nonresident values of the index allocation attribute) that
contain and organize the file names. Index buffers implement a B-tree data
structure, which minimizes the number of disk accesses needed to find a
particular file, especially for large directories. The index root attribute
contains the first level of the B-tree (root subdirectories) and points to index
buffers containing the next level (more subdirectories, perhaps, or files).
Figure 11-50 shows only file names in the index root attribute and the
index buffers (file6, for example), but each entry in an index also contains the
record number in the MFT where the file is described and time stamp and file
size information for the file. NTFS duplicates the time stamps and file size
information from the file’s MFT record. This technique, which is used by
FAT and NTFS, requires updated information to be written in two places.
Even so, it’s a significant speed optimization for directory browsing because
it enables the file system to display each file’s time stamps and size without
opening every file in the directory.
The index allocation attribute maps the VCNs of the index buffer runs to
the LCNs that indicate where the index buffers reside on the disk, and the
bitmap attribute keeps track of which VCNs in the index buffers are in use
and which are free. Figure 11-50 shows one file entry per VCN (that is, per
cluster), but file name entries are actually packed into each cluster. Each 4
KB index buffer will typically contain about 20 to 30 file name entries
(depending on the lengths of the file names within the directory).
The B-tree data structure is a type of balanced tree that is ideal for
organizing sorted data stored on a disk because it minimizes the number of
disk accesses needed to find an entry. In the MFT, a directory’s index root
attribute contains several file names that act as indexes into the second level
of the B-tree. Each file name in the index root attribute has an optional
pointer associated with it that points to an index buffer. The index buffer
points to containing file names with lexicographic values less than its own. In
Figure 11-50, for example, file4 is a first-level entry in the B-tree. It points to
an index buffer containing file names that are (lexicographically) less than
itself—the file names file0, file1, and file3. Note that the names file1, file3,
and so on that are used in this example are not literal file names but names
intended to show the relative placement of files that are lexicographically
ordered according to the displayed sequence.
Storing the file names in B-trees provides several benefits. Directory
lookups are fast because the file names are stored in a sorted order. And
when higher-level software enumerates the files in a directory, NTFS returns
already-sorted names. Finally, because B-trees tend to grow wide rather than
deep, NTFS’s fast lookup times don’t degrade as directories grow.
NTFS also provides general support for indexing data besides file names,
and several NTFS features—including object IDs, quota tracking, and
consolidated security—use indexing to manage internal data.
The B-tree indexes are a generic capability of NTFS and are used for
organizing security descriptors, security IDs, object IDs, disk quota records,
and reparse points. Directories are referred to as file name indexes, whereas
other types of indexes are known as view indexes.
Object IDs
In addition to storing the object ID assigned to a file or directory in the
$OBJECT_ID attribute of its MFT record, NTFS also keeps the
correspondence between object IDs and their file record numbers in the $O
index of the \$Extend\$ObjId metadata file. The index collates entries by
object ID (which is a GUID), making it easy for NTFS to quickly locate a file
based on its ID. This feature allows applications, using the NtCreateFile
native API with the FILE_OPEN_BY_FILE_ID flag, to open a file or
directory using its object ID. Figure 11-51 demonstrates the correspondence
of the $ObjId metadata file and $OBJECT_ID attributes in MFT records.
Figure 11-51 $ObjId and $OBJECT_ID relationships.
Quota tracking
NTFS stores quota information in the \$Extend\$Quota metadata file, which
consists of the named index root attributes $O and $Q. Figure 11-52 shows
the organization of these indexes. Just as NTFS assigns each security
descriptor a unique internal security ID, NTFS assigns each user a unique
user ID. When an administrator defines quota information for a user, NTFS
allocates a user ID that corresponds to the user’s SID. In the $O index, NTFS
creates an entry that maps an SID to a user ID and sorts the index by SID; in
the $Q index, NTFS creates a quota control entry. A quota control entry
contains the value of the user’s quota limits, as well as the amount of disk
space the user consumes on the volume.
Figure 11-52 $Quota indexing.
When an application creates a file or directory, NTFS obtains the
application user’s SID and looks up the associated user ID in the $O index.
NTFS records the user ID in the new file or directory’s
$STANDARD_INFORMATION attribute, which counts all disk space
allocated to the file or directory against that user’s quota. Then NTFS looks
up the quota entry in the $Q index and determines whether the new allocation
causes the user to exceed his or her warning or limit threshold. When a new
allocation causes the user to exceed a threshold, NTFS takes appropriate
steps, such as logging an event to the System event log or not letting the user
create the file or directory. As a file or directory changes size, NTFS updates
the quota control entry associated with the user ID stored in the
$STANDARD_INFORMATION attribute. NTFS uses the NTFS generic B-
tree indexing to efficiently correlate user IDs with account SIDs and, given a
user ID, to efficiently look up a user’s quota control information.
Consolidated security
NTFS has always supported security, which lets an administrator specify
which users can and can’t access individual files and directories. NTFS
optimizes disk utilization for security descriptors by using a central metadata
file named $Secure to store only one instance of each security descriptor on a
volume.
The $Secure file contains two index attributes—$SDH (Security
Descriptor Hash) and $SII (Security ID Index)—and a data-stream attribute
named $SDS (Security Descriptor Stream), as Figure 11-53 shows. NTFS
assigns every unique security descriptor on a volume an internal NTFS
security ID (not to be confused with a Windows SID, which uniquely
identifies computers and user accounts) and hashes the security descriptor
according to a simple hash algorithm. A hash is a potentially nonunique
shorthand representation of a descriptor. Entries in the $SDH index map the
security descriptor hashes to the security descriptor’s storage location within
the $SDS data attribute, and the $SII index entries map NTFS security IDs to
the security descriptor’s location in the $SDS data attribute.
Figure 11-53 $Secure indexing.
When you apply a security descriptor to a file or directory, NTFS obtains a
hash of the descriptor and looks through the $SDH index for a match. NTFS
sorts the $SDH index entries according to the hash of their corresponding
security descriptor and stores the entries in a B-tree. If NTFS finds a match
for the descriptor in the $SDH index, NTFS locates the offset of the entry’s
security descriptor from the entry’s offset value and reads the security
descriptor from the $SDS attribute. If the hashes match but the security
descriptors don’t, NTFS looks for another matching entry in the $SDH index.
When NTFS finds a precise match, the file or directory to which you’re
applying the security descriptor can reference the existing security descriptor
in the $SDS attribute. NTFS makes the reference by reading the NTFS
security identifier from the $SDH entry and storing it in the file or directory’s
$STANDARD_INFORMATION attribute. The NTFS
$STANDARD_INFORMATION attribute, which all files and directories
have, stores basic information about a file, including its attributes, time stamp
information, and security identifier.
If NTFS doesn’t find in the $SDH index an entry that has a security
descriptor that matches the descriptor you’re applying, the descriptor you’re
applying is unique to the volume, and NTFS assigns the descriptor a new
internal security ID. NTFS internal security IDs are 32-bit values, whereas
SIDs are typically several times larger, so representing SIDs with NTFS
security IDs saves space in the $STANDARD_INFORMATION attribute.
NTFS then adds the security descriptor to the end of the $SDS data attribute,
and it adds to the $SDH and $SII indexes entries that reference the
descriptor’s offset in the $SDS data.
When an application attempts to open a file or directory, NTFS uses the
$SII index to look up the file or directory’s security descriptor. NTFS reads
the file or directory’s internal security ID from the MFT entry’s
$STANDARD_INFORMATION attribute. It then uses the $Secure file’s
$SII index to locate the ID’s entry in the $SDS data attribute. The offset into
the $SDS attribute lets NTFS read the security descriptor and complete the
security check. NTFS stores the 32 most recently accessed security
descriptors with their $SII index entries in a cache so that it accesses the
$Secure file only when the $SII isn’t cached.
NTFS doesn’t delete entries in the $Secure file, even if no file or directory
on a volume references the entry. Not deleting these entries doesn’t
significantly decrease disk space because most volumes, even those used for
long periods, have relatively few unique security descriptors.
NTFS’s use of generic B-tree indexing lets files and directories that have
the same security settings efficiently share security descriptors. The $SII
index lets NTFS quickly look up a security descriptor in the $Secure file
while performing security checks, and the $SDH index lets NTFS quickly
determine whether a security descriptor being applied to a file or directory is
already stored in the $Secure file and can be shared.
Reparse points
As described earlier in the chapter, a reparse point is a block of up to 16 KB
of application-defined reparse data and a 32-bit reparse tag that are stored in
the $REPARSE_POINT attribute of a file or directory. Whenever an
application creates or deletes a reparse point, NTFS updates the
\$Extend\$Reparse metadata file, in which NTFS stores entries that identify
the file record numbers of files and directories that contain reparse points.
Storing the records in a central location enables NTFS to provide interfaces
for applications to enumerate all a volume’s reparse points or just specific
types of reparse points, such as mount points. The \$Extend\$Reparse file
uses the generic B-tree indexing facility of NTFS by collating the file’s
entries (in an index named $R) by reparse point tags and file record numbers.
EXPERIMENT: Looking at different reparse points
A file or directory reparse point can contain any kind of arbitrary
data. In this experiment, we use the built-in fsutil.exe tool to
analyze the reparse point content of a symbolic link and of a
Modern application’s AppExecutionAlias, similar to the
experiment in Chapter 8. First you need to create a symbolic link:
Click here to view code image
C:\>mklink test_link.txt d:\Test.txt
symbolic link created for test_link.txt > d:\Test.txt
Then you can use the fsutil reparsePoint query command to
examine the reparse point content:
Click here to view code image
C:\>fsutil reparsePoint query test_link.txt
Reparse Tag Value : 0xa000000c
Tag value: Microsoft
Tag value: Name Surrogate
Tag value: Symbolic Link
Reparse Data Length: 0x00000040
Reparse Data:
0000:  16 00 1e 00 00 00 16 00  00 00 00 00 64 00 3a 00  
............d.:.
0010:  5c 00 54 00 65 00 73 00  74 00 2e 00 74 00 78 00  
\.T.e.s.t...t.x.
0020:  74 00 5c 00 3f 00 3f 00  5c 00 64 00 3a 00 5c 00  
t.\.?.?.\.d.:.\.
0030:  54 00 65 00 73 00 74 00  2e 00 74 00 78 00 74 00  
T.e.s.t...t.x.t.
As expected, the content is a simple data structure
(REPARSE_DATA_BUFFER, documented in Microsoft Docs),
which contains the symbolic link target and the printed file name.
You can even delete the reparse point by using fsutil reparsePoint
delete command:
Click here to view code image
C:\>more test_link.txt
This is a test file!
C:\>fsutil reparsePoint delete test_link.txt
C:\>more test_link.txt
If you delete the reparse point, the file become a 0 bytes file.
This is by design because the unnamed data stream ($DATA) in
the link file is empty. You can repeat the experiment with an
AppExecutionAlias of an installed Modern application (in the
following example, Spotify was used):
Click here to view code image
C:\>cd C:\Users\Andrea\AppData\Local\Microsoft\WindowsApps
C:\Users\andrea\AppData\Local\Microsoft\WindowsApps>fsutil 
reparsePoint query Spotify.exe
Reparse Tag Value : 0x8000001b
Tag value: Microsoft
Reparse Data Length: 0x00000178
Reparse Data:
0000:  03 00 00 00 53 00 70 00  6f 00 74 00 69 00 66 00  
....S.p.o.t.i.f.
0010:  79 00 41 00 42 00 2e 00  53 00 70 00 6f 00 74 00  
y.A.B...S.p.o.t.
0020:  69 00 66 00 79 00 4d 00  75 00 73 00 69 00 63 00  
i.f.y.M.u.s.i.c.
0030:  5f 00 7a 00 70 00 64 00  6e 00 65 00 6b 00 64 00  
_.z.p.d.n.e.k.d.
0040:  72 00 7a 00 72 00 65 00  61 00 30 00 00 00 53 00  
r.z.r.e.a.0...S
0050:  70 00 6f 00 74 00 69 00  66 00 79 00 41 00 42 00  
p.o.t.i.f.y.A.B.
0060:  2e 00 53 00 70 00 6f 00  74 00 69 00 66 00 79 00  
..S.p.o.t.i.f.y.
0070:  4d 00 75 00 73 00 69 00  63 00 5f 00 7a 00 70 00  
M.u.s.i.c._.z.p.
0080:  64 00 6e 00 65 00 6b 00  64 00 72 00 7a 00 72 00  
d.n.e.k.d.r.z.r.
0090:  65 00 61 00 30 00 21 00  53 00 70 00 6f 00 74 00  
e.a.0.!.S.p.o.t.
00a0:  69 00 66 00 79 00 00 00  43 00 3a 00 5c 00 50 00  
i.f.y...C.:.\.P.
00b0:  72 00 6f 00 67 00 72 00  61 00 6d 00 20 00 46 00  
r.o.g.r.a.m. .F.
00c0:  69 00 6c 00 65 00 73 00  5c 00 57 00 69 00 6e 00  
i.l.e.s.\.W.i.n.
00d0:  64 00 6f 00 77 00 73 00  41 00 70 00 70 00 73 00  
d.o.w.s.A.p.p.s.
00e0:  5c 00 53 00 70 00 6f 00  74 00 69 00 66 00 79 00  
\.S.p.o.t.i.f.y.
00f0:  41 00 42 00 2e 00 53 00  70 00 6f 00 74 00 69 00  
A.B...S.p.o.t.i.
0100:  66 00 79 00 4d 00 75 00  73 00 69 00 63 00 5f 00  
f.y.M.u.s.i.c._.
0110:  31 00 2e 00 39 00 34 00  2e 00 32 00 36 00 32 00  
1...9.4...2.6.2.
0120:  2e 00 30 00 5f 00 78 00  38 00 36 00 5f 00 5f 00  
..0._.x.8.6._._.
0130:  7a 00 70 00 64 00 6e 00  65 00 6b 00 64 00 72 00  
z.p.d.n.e.k.d.r.
0140:  7a 00 72 00 65 00 61 00  30 00 5c 00 53 00 70 00  
z.r.e.a.0.\.S.p.
0150:  6f 00 74 00 69 00 66 00  79 00 4d 00 69 00 67 00  
o.t.i.f.y.M.i.g.
0160:  72 00 61 00 74 00 6f 00  72 00 2e 00 65 00 78 00  
r.a.t.o.r...e.x.
0170:  65 00 00 00 30 00 00 00                           
e...0...
From the preceding output, we can see another kind of reparse
point, the AppExecutionAlias, used by Modern applications. More
information is available in Chapter 8.
Storage reserves and NTFS reservations
Windows Update and the Windows Setup application must be able to
correctly apply important security updates, even when the system volume is
almost full (they need to ensure that there is enough disk space). Windows 10
introduced Storage Reserves as a way to achieve this goal. Before we
describe the Storage Reserves, it is necessary that you understand how NTFS
reservations work and why they’re needed.
When the NTFS file system mounts a volume, it calculates the volume’s
in-use and free space. No on-disk attributes exist for keeping track of these
two counters; NTFS maintains and stores the Volume bitmap on disk, which
represents the state of all the clusters in the volume. The NTFS mounting
code scans the bitmap and counts the number of used clusters, which have
their bit set to 1 in the bitmap, and, through a simple equation (total number
of clusters of the volume minus the number of used ones), calculates the
number of free clusters. The two calculated counters are stored in the volume
control block (VCB) data structure, which represents the mounted volume
and exists only in memory until the volume is dismounted.
During normal volume I/O activity, NTFS must maintain the total number
of reserved clusters. This counter needs to exist for the following reasons:
■    When writing to compressed and sparse files, the system must ensure
that the entire file is writable because an application that is operating
on this kind of file could potentially store valid uncompressed data on
the entire file.
■    The first time a writable image-backed section is created, the file
system must reserve available space for the entire section size, even if
no physical space is still allocated in the volume.
■    The USN Journal and TxF use the counter to ensure that there is space
available for the USN log and NTFS transactions.
NTFS maintains another counter during normal I/O activities, Total Free
Available Space, which is the final space that a user can see and use for
storing new files or data. These three concepts are parts of NTFS
Reservations. The important characteristic of NTFS Reservations is that the
counters are only in-memory volatile representations, which will be
destroyed at volume dismounting time.
Storage Reserve is a feature based on NTFS reservations, which allow files
to have an assigned Storage Reserve area. Storage Reserve defines 15
different reservation areas (2 of which are reserved by the OS), which are
defined and stored both in memory and in the NTFS on-disk data structures.
To use the new on-disk reservations, an application defines a volume’s
Storage Reserve area by using the FSCTL_QUERY_STORAGE_RESERVE
file system control code, which specifies, through a data structure, the total
amount of reserved space and an Area ID. This will update multiple counters
in the VCB (Storage Reserve areas are maintained in-memory) and insert