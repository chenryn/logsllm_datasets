### Figure 16: Performance Evaluation Chart

The performance of the AS key method is either on par with or even better than that of a regular SQL statement for both SELECT and UPDATE operations. This can be attributed to the fact that the AS key method utilizes a function stored in the database in a compiled form, which enhances its performance compared to a regular SQL statement. In contrast, the rolling key method exhibits slower performance than both the regular statement and the AS key method. The additional computation required by the rolling key method explains this performance difference. For SELECT statements, the AS key method is approximately twice as fast as the rolling key method, while for UPDATE statements, the performance difference is less pronounced but still significant.

### Additional Experiment: Stress Test for View-Based Web Site

To further evaluate the performance overhead of a view-based web site with multiple concurrent sessions, we conducted an experiment using the open-source Book-store application (source code available in [22]). The application was modified to use parameterized views instead of tables. For each table in the original application, a corresponding parameterized view was defined, and access to these views was granted to the application, while direct access to the underlying tables was revoked. The FROM clause in each SQL statement within the application was modified to include the AS key. No other changes were made to the application code or the database schema.

A stress test was performed on both the original table-based application and the modified view-based application. The results, shown in Table 4, compare the average page response time (in milliseconds) for 1, 10, and 100 concurrent users:

| Number of Concurrent Users | Original Table-Based App (ms) | Modified View-Based App (ms) |
|----------------------------|--------------------------------|--------------------------------|
| 1                          | 135.03                         | 10.06                          |
| 10                         | 136.99                         | 9.27                           |
| 100                        | 1708.26                        | 1598.20                        |

Table 4: Stress Test Evaluation

These results suggest that there is no significant performance degradation as the number of concurrent users increases. Additionally, the parameterized view-based web application does not require additional index definitions or query optimizations, unlike traditional table-based applications.

### Implementation of Parameterized Views

Although parameterized views are not yet part of the SQL standard at the time of writing, there is a strong demand for them. Many users and developers frequently inquire about the lack of support for parameterized views in database forums. Given the high demand, it is likely that database manufacturers will soon incorporate this feature. This article underscores the importance of parameterized views in the context of database protection and access control. As demonstrated, parameterized views can serve as a natural replacement for traditional views in the web era. We urge the developers of access control standards to recognize the significance of parameterized views in enhancing access control mechanisms.

Our method is flexible and can leverage any existing database entity that accepts parameters and returns data based on those parameters. For example, we can implement our method using stored functions in the database. These functions are supported in most databases and can be used in standard DML sentences. The returned value of such a function can be a table type. Consider the following example of a function that returns a student's grades:

```sql
CREATE FUNCTION Student_Marks_Func(pAS_key)
RETURNS Table
BEGIN
  RETURN 
    SELECT * 
    FROM Student_Marks_Table
    WHERE Student_No IN (
      SELECT Student_No 
      FROM Users_Table 
      WHERE AS_key = :pAS_key
    );
END;
```

Figure 17: Definition of a Table Function Similar to `Sudent_Marks_View` from Figure 8

This function can be queried in the same way as a parameterized view:

```sql
SELECT * FROM Student_Marks_Func(10101…);
```

Figure 18: Selecting from a Table Function

Baron and Chipman [1] demonstrate the use of these functions in SQL Server, highlighting their flexibility and ability to handle parameters. They also emphasize that these functions can be updatable, allowing for DML operations such as updates and deletions, which are limited by the transferred parameter. This capability overcomes one of the main disadvantages of regular views, which struggle with actions like addition, deletion, and updating. For example, the following update statement modifies the quantity of an order for a specific customer:

```sql
UPDATE Orders_Func(10101…)
SET Quantity = 2
WHERE Product_Id = 1;
```

Figure 19: Updating a Table Function

By updating the `Orders_Func` function instead of the `Orders_Table` directly, the function restricts access to only the current customer's data, thereby preventing unauthorized updates to other customers' data.

### Discussion and Future Work

One of the primary goals of organizations is to share data while enforcing security policies. Heterogeneous web systems have succeeded in sharing data with Internet consumers but have failed to prevent unauthorized access, particularly to one customer's data by another. The exponential growth in attacks on web databases indicates that existing access control mechanisms are inadequate for web applications.

The lack of fine-grained access control at the database level means that databases cannot explicitly authorize individual users, violating the principle of minimal privileges. Auditing and monitoring user transactions become impossible since the only user accessing the database is typically the super-user of the web application. Traditional views are no longer sufficient for access control, as they cannot distinguish between different users.

Our method addresses the lack of authentication and fine-grained authorization at the database layer of n-tier web applications. We propose using the built-in database access control mechanism, enhanced with parameterized views, to supervise access to the database. From an access control perspective, parameterized views are a natural substitute for traditional views in the web era. Their use significantly reduces the attack surface of web databases by leveraging native database access control mechanisms, rather than relying on external tools.

Each SQL statement arriving at the database from the application contains an indication of the user who executed it, enabling the database log to track user activities. This makes it easier to follow the transactions of the same user, distinguish between different user sessions, and detect intruders. Even if the application does not request the user's identifier, it is still possible to differentiate between sessions of different users. This solves the SQL session traceability problem in web applications.

Our method requires only the definition of a proper database schema and authorization, making it a cost-effective and efficient solution for web database access control. The problem of inadequate access control mechanisms in databases accessible from heterogeneous web applications is critical, as these databases often manage sensitive commercial and governmental information.

Future research will focus on:
- Extending the proposed mechanism to Role-Based Access Control (RBAC) systems.
- Using the above techniques as the basis for intrusion detection algorithms applied to web databases.

### References

[1] Andy Baron, Mary Chipman. Creating and Optimizing Views in SQL Server. Article from: http://www.informit.com/articles/printerfriendly.asp?p=130855&rl=1 (2000)

[2] Elisa Bertino, Pierangela Samarati, Sushil Jajodia. An Extended Authorization Model for Relational Databases, In Proceedings of IEEE Transactions on Knowledge and Data Engineering, Volume 9, Issue 1, Pages: 85-101 (1997)

[3] Stephen W. Boyd, Angelos D. Keromytis. SQLrand: Preventing SQL Injection Attacks, In Proceedings of the 2nd Applied Cryptography and Network Security Conf, Pages: 292--302 (2004)

[4] Johann Eder. View Definitions with Parameters. Published in: Advances in Databases and Information Systems (ADBIS’95), Pages: 170-184 (1995)

[5] Patricia P. Griffiths, Bradford W. Wade. An Authorization Mechanism for a Relational Database System. ACM, Transactions on Database Systems (1976)

[6] P. Gulutzan, T. Pelzer. SQL-99 Complete, Really An Example-Based Reference Manual of the New Standard. R&D Books Miller Freeman, Inc. (1999)

[7] Michael Howard, David LeBlanc. Writing Secure Code. Microsoft Press, ISBN 0-7356-1722-8 (2002)

[8] Yi Hu, Brajendra Panda. A Data Mining Approach for Database Intrusion Detection. In Proceedings of the ACM Symposium on Applied Computing, Nicosia, Cyprus. Pages: 711 – 716 (2004)

[9] Hasan M. Jamil. GQL: A Reasonable Complex SQL for Genomic Databases. In Proceedings of International Symposium on Bio-Informatics and Biomedical Engineering, IEEE, Pages: 50-59 (2000)

[10] Wai Lup Low, Joseph Lee, Peter Teoh. DIDAFIT: Detecting Intrusions in Databases Through Fingerprinting Transactions. In Proceedings of the 4th International Conference on Enterprise Information Systems, Ciudad Real, Spain, Pages: 121-128 (2002)

[11] Colin Angus Mackay. SQL Injection Attacks and Some Tips on How to Prevent Them. Article from: http://www.codeproject.com/cs/database/SqlInjectionAttacks.asp (2005)

[12] Ofer Maor, Amichai Shulman. SQL Injection Signatures Evasion. Article from: http://imperva.com/application_defense_center/white_papers/sql_injection_signatures_evasion.html (2004)

[13] K. K. Mookhey, Nilesh Burghate. Detection of SQL Injection and Cross-site Scripting Attacks, Article from: http://www.securityfocus.com/infocus/1768 (2004)

[14] Raghu Ramakrishnan, Johannes Gehrke. Database Management Systems, Chapter 17.1, Introduction to Database Security. Second Edition (2001)

[15] Abhinav Srivastava, Sai Rahul Reddy. Intertransaction Data Dependency for Intrusion Detection in Database Systems, Part of Information and System Security Course, School of Information Technology, IIT Kharagpur (2005)

[16] William Stallings. Cryptography and Network Security, Third Edition, Prentice Hall International (2003)

[17] Fredrik Valeur, Darren Mutz, Giovanni Vigna. A Learning-based Approach to the Detection of SQL Injection Attacks. DIMVA, Vienna, Austria, Pages: 123-140 (2005)

[18] SecuriTeam, SQL Injection Walkthrough, Article from: http://www.securiteam.com/securityreviews/5DP0N1P76E.html (2002)

[19] Advanced Topics on SQL Injection Protection, OWASP. Article from: http://www.owasp.org/images/7/7d/Advanced_Topics_on_SQL_Injection_Protection.ppt (2006)

[20] Information Security News: ISS hatches ‘virtual patching’ plan. Article from: http://seclists.org/isn/2003/May/0113.html (2003)

[21] Controlling Database Access, Oracle9i Database Concepts Release 2 (9.2). Article from: http://download-west.oracle.com/docs/cd/B10501_01/server.920/a96524/c23acces.htm

[22] Online Book-Store Application. The open source from the site: http://www.gotocode.com/apps.asp?app_id=3