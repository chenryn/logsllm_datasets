# Using Amnesia to Detect Credential Database Breaches

**Authors:**
- Ke Coby Wang, University of North Carolina at Chapel Hill
- Michael K. Reiter, Duke University

**Link:**
[Proceedings of the 30th USENIX Security Symposium](https://www.usenix.org/conference/usenixsecurity21/presentation/wang-ke-coby)

**Abstract:**
Existing methods for using decoy passwords (honeywords) to detect credential database breaches suffer from two main issues: the need for a trusted component to recognize decoys during login attempts and the attacker's ability to test stolen passwords at other sites to identify user-chosen passwords based on their reuse. Amnesia is a framework that addresses these challenges. It requires no secret state to detect the entry of honeywords and allows a site to monitor for the entry of its decoy passwords elsewhere. We quantify the benefits of Amnesia using probabilistic model checking and demonstrate its practicality through a working implementation.

## 1. Introduction

Credential database breaches have become a significant security problem. According to Verizon, there were 3,950 global database breaches between November 2018 and October 2019, with 60% of identified victims experiencing credential leaks [43]. These breaches are the primary source of compromised passwords used in credential stuffing campaigns, which lead to the majority of account takeovers [41, 42]. Unfortunately, there is often a considerable delay, ranging from 7 to 15 months, between the breach and its discovery [23, 41]. This window of vulnerability allows attackers to crack passwords offline, probe accounts, and either use or sell the credentials on illicit forums [41, 42].

Decoy passwords, or honeywords, have been proposed to interfere with the attacker's use of a stolen credential database. In these proposals, a site (the target) stores decoy passwords alongside real passwords in its database, making it difficult for an attacker to distinguish the correct password. However, honeywords have two key limitations:
1. They require a trusted component to detect the entry of a honeyword, which must retain secret state even after a breach.
2. Their effectiveness depends on the indistinguishability of the user-chosen password from the decoys, which can be compromised if users reuse passwords across multiple sites.

In this paper, we introduce Amnesia, a framework that resolves these issues. First, Amnesia enables the detection of a database breach without any persistent secret state at the target. Second, it allows the target to monitor for the entry of its decoy passwords at other sites, called monitors. Our results show that Amnesia significantly reduces the time an attacker can use breached credentials without alerting the target.

## 2. Related Work

Previous research on decoy passwords includes proposals by Juels and Rivest [25] and Almeshekah et al. [2], which require a trusted component to store and verify the user-chosen password. These approaches rely on the assumption that the trusted component remains secure even after a breach. Other works, such as Tripwire [13], use decoy accounts to detect breaches but place trust in the detecting party, which can be a barrier to adoption.

Amnesia differs from these approaches by eliminating the need for a trusted component and allowing the target to monitor for its honeywords at other sites. Additionally, our design ensures that even malicious monitors cannot falsely report a breach to an unbreached target.

## 3. Honeywords

We assume the existence of a randomized honeyword generator, `HoneyGen`, which, given an account identifier `a`, a user-chosen password `πa`, and an integer `k`, produces a set `Πa` containing `πa` and `k` other strings. The properties of `HoneyGen` are:

1. **Indistinguishability**: For any attacker algorithm `A` given `a` and `Πa`, the probability of correctly identifying `πa` should be approximately `1 / (k + 1)`.

   \[
   P(\pi = \pia \mid \Pi_a \leftarrow \text{HoneyGen}(a, \pia, k), \pi \leftarrow A(a, \Pi_a)) \approx \frac{1}{k + 1}
   \]

2. **Unforgeability**: An attacker who knows `a` and `πa` should not be able to generate a honeyword for the account without breaching the target. This property holds even if `πa` is known due to phishing or password reuse.

   \[
   P(\pi \in \Pi_a \setminus \{\pia\} \mid \Pi_a \leftarrow \text{HoneyGen}(a, \pia, k), \pi \leftarrow B(a, \pia)) \approx 0
   \]

These properties ensure that honeywords are both indistinguishable from the user-chosen password and unforgeable without a breach.

## 4. Detecting Honeyword Entry Locally

### 4.1 Threat Model

Our goal is to enable a site, called the target, to detect that its credential database has been stolen. We assume the target uses standard password-based authentication, protected by a cryptographic protocol like TLS. The attacker can passively breach the target, capturing all persistent storage associated with account logins, including salted hashes of passwords.

### 4.2 Detection Algorithm

The first contribution of this paper is demonstrating how the target site can detect its own breach without relying on any secret persistent state. We detail the threat model and provide the detection algorithm. Our results, quantified through probabilistic model checking, show that Amnesia substantially reduces the time an attacker can use breached credentials without alerting the target.

### 4.3 Efficacy Demonstration

We evaluate the efficacy of the detection algorithm using probabilistic model checking. Our results show that Amnesia provides significant security benefits, reducing the window of opportunity for attackers to exploit breached credentials.

## 5. Monitoring for Honeyword Entry Elsewhere

To address the issue of credential stuffing, Amnesia enables the target to monitor for the entry of its honeywords at other sites, called monitors. We introduce a cryptographic protocol, the Private Containment Retrieval (PCR) protocol, which allows a monitor to transfer an attempted password to the target only if it is one of the passwords (honey or user-chosen) for the same account. This ensures that even if a monitor is malicious, it cannot falsely report a breach to an unbreached target.

## 6. Performance Evaluation

We describe the performance of our Amnesia implementation. Our results indicate that the computation, communication, and storage costs of distributed monitoring are minimal. For example, generating a monitoring response takes constant time and produces a constant-size result, making it practical for deployment.

## 7. Conclusion

In summary, our contributions include:
- Developing the first algorithm leveraging honeywords to detect a database breach without relying on secret persistent state.
- Extending this algorithm with a PCR protocol to monitor accounts at other sites, ensuring no false detections despite malicious behavior.
- Introducing a new cryptographic protocol, the PCR protocol, and proving its correctness.
- Demonstrating the practicality of our algorithm through an implementation.

By addressing the limitations of existing honeyword approaches, Amnesia provides a robust and practical solution for detecting credential database breaches.