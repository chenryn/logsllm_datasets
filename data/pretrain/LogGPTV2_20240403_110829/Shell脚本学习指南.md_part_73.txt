S./configure && make && sake check
checking buL1d systen type... L686-pc-1inux-gnu
配置、建置、潮试
checking host system type... i686-pe-1inuxgmu
省略许多输出
如果所有的检测通过（也应该是如此），那就表示大功告成了！你可以使用make
install安装最新建置完成的bash可执行文件（可能得切换为root的身份才能做这
件事）。
14.4.2ksh93
ksh93的源代码可至AT&T Research网站下载，URL为hrp://www.research.alf.com/
sw/download，ksh93的建置是相当直觉的，但处理方式较bash多了许多手动操作的部
分。我们所呈现的是2004年2月建置ksh93p的参骤，其流程与现行版本相似。在此我
们选择仅建置KornShell，不过你应该比较希望下载与建置整个“ASTOpen”包，因
为它提供了很完整的工具组。
1.自网站下载包INIT.2004-02-29.tgz与ast-ksh.2004-02-29.tgz，将之置于
某个空目录下，以供将来建置软件所用。
2.建立lib/package/tgz目录，并将这两个文件移过去：
$ mv *,tgs 1ib/package/tgz
3.手动解开INIT包：
$ gzip -d < 11b/package/tgz/IxIr.2004-02-29.tgz 1 tar -xvf -
省路许多输出
4.借由读取哪个包可用，使用AT&T的工具开始建置流程：
package: update /home/tolstoy/kgh93/bin/execrate
$ bin/package read
省略许多输出
www.TopSage.com
---
## Page 427
Shell可移植性议题与扩展
5.
再使用AT&T工具，开始编译：
.com
$ bin/package make
package: Lnitia1ize the /home/tolstoy/ksh93/arch/1inux.i386 view
..省略许多输出...
此步骤会花费一些时间，视你系统与编译器的速度而定。
6.
新建置完成的ksh93二进制文件，位于arch/ARCH/bin/ksh下，其中，ARCH表
示的是你建置ksh93那台机器的架构。以x86GNU/Linux系统面言，即为
linux.i386。像这样：
Sarch/1inux.1386/bin/kah
执行新建置的ksh93
Version X 1993-12-28 p
S echo $(.sh.veralon)
显示版本
7.
或许你会想要将新建置完成的KornShell移至你路径内的目录里，例如这样的个
人bin目录：
$ cp arch/1inux.1386/bin/xsh $H0m/bin/ksh93
好了，可以开始使用了！
14.5其他扩展的Bourne式Shell
另外还有两个也是相当受欢迎的Shell：
Public Domain Korn Shell
许多开放源码的类UNIX系统，像是GNU/Linux，都随附PublicDomainKorn
Shell，pdksh，pdksh源代码可自hrp:/web.cs.mun.ca/~michael/pdksh/取得，其
附有命令供用户建置与安装在各种UNIX平台上。
pdksh原由EricGisin所编写，它将pdksh的基础建置在CharlesForsyth的Version
7BourneShell之公众领域版本上。有许多部分兼容于1988KornShell与POSIX，
另带有部分自有的扩展。
Z-Shell
zsh是一套强面有力的交互式Shell与脚本语言，能做到ksh、bash与tcsh所能
完成的很多任务，也有许多特有的功能。zsh拥有ksh88大部分的功能但ksh93
的倒是极少。它完全可以自由取得，并应被编译与执行于任何现代的UNIX版本上。
置于其他操作系统上也可行，其官方网站为http:/www.zsh.org/.
这些Shell在LearningrheKornShel（O'Reilly）里都有更详尽的叙述，书籍信息详见
参考书目。
www.TopSage.com
---
## Page 428
416
第14章
14.6Shell版本
这些对于扩展性Shell的探讨提醒我们，偶而查查各种不同Shell的版本信息会是很方便
的。查询方法如下：
i
S bash --version
bash
GNU bash; version 3.00.16(1) -release (1686-pc-1inux-gnu)
S kah --veralon
仅最近的 ksh93适用
version
8h (AT4T Labs Research) 1993-12-28 p
$ ksh
旧版的ksh
SV
Verslon 11/16/a8r
缓人V
11
kah显示其版本
$ ecbo'echo $KSH_vERS工ow'1 pdkab
pdksh
9[#)PD KSH v5 .2.14 99/07/13,2
S ecbo 'echo $zSH_VERsION' I sah
4.1.1
zsh
此处并未提供取得/bin/sh版本编号的方式，这没什么好惊讶的，大部分商用UNIX系
统上真正的Bourne Shell，都系出SystemVRclcase3（1987）或Rclease 4（1989）
BourneShell，之后改变很少，甚至可以说是没有任何变动。厂商希望采用某个Korn
Shell版本，以提供POSIX兼容的Shell。
14.7Shell初始化与终止
为支持用户客户化，Shell会在启动、终止时，读取某些特定文件。每个Shell都有不同
的惯例模式，所以我们以独立的小节分别讨论它们。
'1。
如果你编写的Shell脚本希望能被其他Shell使用，你就不应该依赖启动时的定制功能。
我们在本书所开发的所有Shell脚本都会设置它们自已的环境（例如SPATH的值），让
任何人都能执行它们。
Shell的行为模式端视它是否为登录Shell（loginShell）而定。当你坐在终端前，在计
算机的提示符号下输人你的username与密码时，便是正在取得登录Shell。相同地，当
你使用sshhostname时，也是取得一个登录Shell.然而，如果你指定名称执行Shell，
或直接在脚本首行#！下指定的命令解释器执行，或建立一个新的工作站终端窗口，或
在远端Shell中执行命令时，例如sshhostnamecommand，则该Shell都不是登录Shell。
否则就不是。你可以使用下列方式，得知你现在是否在登录Shell下：
www.TopSage.com
---
## Page 429
Shell可移植性议题与扩展
$ ecbo $0
ksh
显示：Shel1名称
是的。这是登录 She11
连字号并不是暗示有个文件名叫/bin/-ksh，它只是表示父进程设置第0个参数，当
它执行exec（）系统调用以启动Shell时使用。
如果你日常处理都只有一种Shell，那么后面几个小节所叙述的初始与终结文件对你来说
就不是问题：你只要设置好一次，定制为你要的模式，确认运作无误，就可以很久不去
动它。但如果你得处理数种Shell，可能就必须更审慎考虑你的定制方式，避免重复与维
护的头疼问题。，（点号）与test命令都是不可或缺的好工具，你可以将它们用在定制
的脚本里，读取可让Bourne家族Shell接受的一组小心写人之文件，也可以将它们用于
所有你必须访间的主机上。系统管理者也需要将全面系统地定制脚本置于/etc下，让
所有用户都可使用。
14.7.1BourneShell（sh）启动
当它为登录Shell时，Bourne Shell—sh相当于：
test -r /etc/protile && . /etc/proti1e
尝试读取/etc/profile
test -r SHOME/.profile s.$HOME/.profile 尝试读取 SHOME/-ptofile
即它会读取两个与当前Shell相关的启动文件，但不强求它们一定要有一个存在。需特
别留意的是，根目录文件为一个点号文件，而在/etc下系统面的则否。
系统Shell启动文件的建置，是由本地端管理，看起来像这样：
$cat/ete/profile
PATH=/usr/1ocal/bini$PATH
将usr/local/bin加人至系统路径起始处
显示系统Shel1启动文件
export PATH
新除群组与其他人的写入权限
导出让子进程知道
umask 022
$ cat $ncam/.protile
显示个人的Shel1启动文件
PATH=$PATH: $HOME/bin
将个人bin日录加人至系统路径的结尾处
export PATH
导出让子进程知道
alias rns'rn -i'
文件别除时要求确认
umask 077
到除群组与其他人的所有访问
子Shell接连建立后会继承父Shell的环境字符率，包括PATH。它也继承当前工作目录
与当前文件权限掩码，两者都记录于内核里进程专有的数据中。然而，它不会继承其他
的定制，像alias所设置的命令缩写用法或是未导出的变量：
当Shell不是一个登录Shell时，Bourme Sbell并未提供自动读取启动文件功能，所以别
名的使用会受限。由于远端命令执行也不会建立登录Shell，所以你也不能指望PATH会
www.TopSage.com
---
## Page 430
418
设置为你惯用的值：它可能就只是/bin：/usr/bin这么简单的设置。我们在8.2节里的m
build-al1脚本里已处理过这种状况。
在离开时，BourneShell不会读取标准的终结文件，但你可以设置一个捕捉，让它这么
做（我们在13.3.2已说明捕捉的细节了）.例如，如果你将这个语句放在SHOME/.profile
里：
trap'.SBOME/.logout'EXIT
然后sHONE/.1ogout脚本便能执行所有你要的清除操作，像是以c1ear命令清扫屏幕。
然而，因为只能为任何给定的一个信号指定一个描捉，所以如果是它在稍后的通信期里
被覆盖时，便会失去这里指定的捕捉：没有方法可保证终结的脚本一定会被执行。对于
非登录（nonlogin）Shell，每个需要离开处理的脚本或通信期，都必须明确地设置EXIT
捕捉，但一样不保证在离开时必定会生效。
这些限制、缺乏命令历史（history）的支持（注3），以及一些较旧的实例、工作控制，
都让BourneShell不为多数交互模式下的用户所青睐。在大部分商用UNIX系统上，倾
向于只让root或其他系统管理者身份的账号，在短暂的通信期下交互式地使用它，尽
管如此，BourneShell还是可移植性Shell脚本期待的选择。
14.7.2KornShell启动
当Korn Shell-ksh启动为登录Shell时，它会像Bourne Shell一样读取/etc/profile
与SHOME/.profile—如果这两个文件存在且可读取的话。
当ksh93启动为交互式Shell（登录或非登录），它会作这样的操作：
试者读取SENW
ksh88无条件处理$ENV，针对所有的Shell。
eva1命令在7.8节里已说明。现在，我们已经知道它先评估它的参数，所以任何在那里
的变量都会被展开，然后以命令的方式执行结果字符串。效果便是在当前Shell下，读
取井执行ENV里指名的文件。PATH目录并不会用来查找这里的文件，所以ENV应标明
一个绝对路径。
ENV的功能解决了BourneShell为子Shell通信期设置私有别名的问题。然而，它并没
解决非登录远端通信期的定制问题：它们的Shell永远不会读取任何的初始化文件。
注 3:
很多系统上的/bin/sh仅为bash的选换，在这种情况下，命令历史是可以使用的，不
过：原始的UnixBourneShell并不支持命令历史功能。
www.TopSage.com
---
## Page 431
Shell可移桂性议题与扩展
非交互式的ksh93就像BourneShell一样，不会读取任何的启动脚本，也不会在离开
之前读取任何的终结脚本，除非你自已下达trap命令（正如之前所言，一个非交互式
ksh88会在启动时读取及执行$ENV文件）。
14.7.3Bourne-AgainShell启动与终结
虽然GNUbash时常是以自已的方式披作为登录Shell，但当它以sh的名称引用时，也
可以模拟为BourneShell。而它接下来的启动行为就如14.7.1节重所插述一般，在此种
状况下本节大部分的内容都不能套用。在GNU/Linux系统下，/bin/sh必为/bin/
bash的符号性连接。
警告：bash的模拟Bourne Shell并不完美，因为当bash被引I用为sh时，会隐藏其诸多扩展功
能的一部分。我们偶然发现软件包里的Shell脚本是开发在由/bin/sh执行的GNU/Linux
环境下，但并未在真正的BourneShell环境下剩试，后者环境很可能因为用的是扩展性功
能而导致它们失败。
当bash为登录Shell时，启动时它的操作相当于：
if test -r'$acmE/.bash_profile J then
test -r /etc/profile && . /etc/profile
试着读取/etc/profile
尝试三种可能性
elif test -r $HoME/.besh_1ogin 1 then
.SH0ME/ .ba8h_prof11e
elif test -r $HOME/.profile : then
$HOME/ .bash_login
. $HOME/-profile
fL
系统面的文件则同于BourneSbell的，只不过在$HOME内的查找题序允许你将bash特
定的初始文件放进这两个文件其中之一，否则，bash会回去读取你个人的Bourne-Sheil
启动文件。
离开时，一个bash登录Shell会做：
te8t-r SHOME/.bash_1ogout 6&，$HoME/.bash_logout试看读取终结脚本
不同于Bourne Shell的是，bash在交互式非登录Shell下启动时会读取初始文件，步骤
相当于：
test -r SHOME/ .bashre && . SHOME/.bashrc
试者读取$HOME/.bashrc
此状况下，就不会读取登录Shell的启动文件。
www.TopSage.com
---
## Page 432
420
第14章
当bash使用在非交互模式时；不会读取，bashrc文件或登录Shell启动文件，它改为
读取定义于BASH_ENV变量中的文件，像这样：
试看读取$BASH_BNV
以ksh来说，PATH目录井不是用来查找这个文件的。
请留意它们的差异：KornShell的ENv变量仅用于非登录的交互式Shell，而bash的
BASH_ENV则仅用于非交互式Shell。
要理清启动文件处理的序，我们使用echo命令进行测试。登录通信期看起来就像这
样：
$ 1ogin
起始一个新的登录session
Passvord:
Login: bones
DEBUG: This is /etc/profile
抑制密码输出