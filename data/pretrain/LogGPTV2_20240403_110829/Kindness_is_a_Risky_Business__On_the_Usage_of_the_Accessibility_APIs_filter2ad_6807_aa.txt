title:Kindness is a Risky Business: On the Usage of the Accessibility APIs
in Android
author:Wenrui Diao and
Yue Zhang and
Li Zhang and
Zhou Li and
Fenghao Xu and
Xiaorui Pan and
Xiangyu Liu and
Jian Weng and
Kehuan Zhang and
XiaoFeng Wang
Kindness is a Risky Business: On the Usage of the Accessibility APIs in Android
Wenrui Diao∗†, Yue Zhang‡, Li Zhang‡, Zhou Li§, Fenghao Xu¶, Xiaorui Pan(cid:107), Xiangyu Liu(cid:92),
∗Key Laboratory of Cryptologic Technology and Information Security, Ministry of Education,
Jian Weng‡, Kehuan Zhang¶, and XiaoFeng Wang(cid:107)
Shandong University, PI:EMAIL
†School of Cyber Science and Technology, Shandong University
‡Jinan University, {zyueinfosec, zhanglikernel, cryptjweng}@gmail.com
§University of California, Irvine, PI:EMAIL
¶The Chinese University of Hong Kong, {xf016, khzhang}@ie.cuhk.edu.hk
(cid:107)Indiana University Bloomington, PI:EMAIL, PI:EMAIL
(cid:92)Alibaba Inc., PI:EMAIL
Abstract
The assistive technologies have been integrated into nearly
all mainstream operating systems, which assist users with
disabilities or difﬁculties in operating their devices. On
Android, Google provides app developers with the acces-
sibility APIs to make their apps accessible. Previous re-
search has demonstrated a variety of stealthy attacks could
be launched by exploiting accessibility capabilities (with
BIND_ACCESSIBILITY_SERVICE permission granted). How-
ever, none of them systematically studied the underlying de-
sign of the Android accessibility framework, making the secu-
rity implications of deploying accessibility features not fully
understood.
In this paper, we make the ﬁrst attempt to systemically
evaluate the usage of the accessibility APIs and the design
of their supporting architecture. Through code review and a
large-scale app scanning study, we ﬁnd the accessibility APIs
have been misused widely. Further, we identify a series of
fundamental design shortcomings of the Android accessibility
framework: (1) no restriction on the purposes of using the
accessibility APIs; (2) no strong guarantee to the integrity
of accessibility event processing; (3) no restriction on the
properties of custom accessibility events. Based on these ob-
servations, we demonstrate two practical attacks – installation
hijacking and notiﬁcation phishing – as showcases. As a re-
sult, tens of millions of users are under these threats. The ﬂaws
and attack cases described in this paper have been responsibly
reported to the Android security team and the corresponding
vendors. Besides, we propose some improvement recommen-
dations to mitigate those security threats.
1
Introduction
The assistive technologies have been integrated into nearly
all mainstream operating systems, which assist users with dis-
abilities in operating their devices. It is not only the kindness
of OS vendors but also the requirements of federal law [20].
On mobile platforms, tremendous efforts have been spared
into developing assistive technologies. For example, Android
provides TalkBack [7] for users who are blind and visually
impaired. They could perform input via gestures such as swip-
ing or dragging on the screen and listen to the feedback in
an artiﬁcial voice. Other supports include Switch Access (an
alternative to using the touchscreen), Voice Access (control
device with spoken commands), etc.
Besides the built-in accessibility features provided by An-
droid OS, to support the development of accessible apps,
Google also provides app developers with the accessibility
APIs to develop custom accessibility services. The mission of
these APIs is to provide user interface enhancements to assist
users with disabilities, or who may temporarily be unable to
fully interact with a device [11]. With the accessibility APIs,
an app could observe user actions, read window content, and
execute automatic GUI operations, which improves the inter-
actions between users and apps. Since these APIs are quite
powerful, as a restriction, the accessibility service must be
protected by the BIND_ACCESSIBILITY_SERVICE permission
to ensure that only the system can bind to it.
On the other hand, the powerful capabilities of the acces-
sibility APIs can be exploited for malign purposes. Previ-
ous research demonstrated a variety of stealthy attacks could
be launched with the accessibility capabilities [35, 37, 43]
and investigated the inadequate checks on accessibility I/O
paths [36]. However, previous works focused on exploring
what kinds of attacks could be achieved through a mali-
cious app with the BIND_ACCESSIBILITY_SERVICE permis-
sion, and none of them touched the design of the Android
accessibility framework.
Our Work. Motivated by the signiﬁcant security implications
of the accessibility service, in this work we perform the ﬁrst
comprehensive study to evaluate the usage of the accessibility
APIs and the design of their supporting architecture in An-
droid. In particular, we ﬁrst conducted a large-scale study on
91,605 Android apps crawled from Google Play to measure
the accessibility APIs usage in the wild. The result shows
the accessibility APIs have been misused widely. Most assis-
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 261tive apps utilize them to bypass the permission restrictions of
Android OS, which deviates from the original mission.
Then, we reviewed the Android accessibility framework
to investigate the fundamental reasons for misuse and the
potential security risks. Finally, we identify a series of funda-
mental design shortcomings that can lead to severe security
threats. (1) Speciﬁcally, we ﬁnd that there is no restriction
on the purposes of using the accessibility APIs. Any app can
invoke the accessibility APIs even when the purpose is not
for helping the disabled users. (2) Also, we notice that the
Android accessibility architecture is event-driven. Under such
design, the event receivers do not communicate with the event
senders directly. The execution logic of accessibility services
only could rely on the received accessibility events. However,
the information contained in the events does not provide a
strong guarantee to the integrity of event processing. (3) Even
worse, Android allows zero-permission apps to inject arbitrary
custom accessibility events into the system, which brings the
possibility of constructing fraudulent activities.
Exploiting these design shortcomings, we demonstrate two
real-world attacks as showcases. That is, a malicious app with-
out any sensitive permission can hijack the execution logic of
assistive apps installed on the same phone to install arbitrary
apps and send phishing notiﬁcations. Note that, different from
the previous works [35, 37, 43], in our attacks, we consider
a more general model and do not assume the malicious app
has been granted with the BIND_ACCESSIBILITY_SERVICE
permission.
Following the responsible disclosure policy, we reported
our ﬁndings to the Android security team and the correspond-
ing vendors. At present, Google has conﬁrmed our discovery
and rewarded us with $200 under the Android Security Re-
wards Program. The latest update could be tracked through
AndroidID-79268769 and CVE-2018-9376.
As mitigations, we also propose some improvement rec-
ommendations for each shortcoming. However, to thoroughly
address the current security threats, a new accessibility ar-
chitecture may be needed. How to trade off the security and
usability is still an open question.
Contributions. We summarize the contributions of this paper
as follows:
• Data-driven Analysis. We perform the ﬁrst large-scale
study to measure the usages of the accessibility APIs
in the wild (based on 91,605 app samples from Google
Play). Our study shows the accessibility APIs have been
misused widely.
• Discovery of New Design Flaws. After reviewing the de-
sign of the Android accessibility supporting architecture,
we identify a series of fundamental design shortcomings
which may bring serious security risks. We also propose
improvement recommendations.
• Demonstration of Proof-of-Concept Attacks. We demon-
strate two concrete attacks exploiting the design short-
comings of the accessibility framework as showcases:
installation hijacking and notiﬁcation phishing.
Roadmap. The rest of this paper is organized as follows.
Section §2 provides the background of the accessibility ser-
vice on Android. Section §3 introduces the threat model and
methodology of this paper. In Section §4, we measure the
usage status of the accessibility APIs on a large-scale app
dataset. Section §5 summarizes the discovered design short-
comings. Section §6 demonstrates two practical attacking
exploiting these shortcomings. Section §7 discusses some
attack conditions and limitations. Section §8 proposes some
improvement recommendations. Section §9 reviews related
works, and Section §10 concludes this paper.
2 Accessibility Service on Android
The accessibility service was introduced by Google starting
from Android 1.6 (API Level 4) and gained signiﬁcant im-
provement since Android 4.0 (API Level 14). It is designed to
implement assistive technology with two main functionalities:
(1) receiving input from alternative input devices (e.g., voice
into microphone) and transforming it to commands accepted
by OS or apps; (2) converting system output (e.g., text dis-
played on screen) into other forms which can be delivered by
alternative output devices (e.g., sound through a speaker).
Capabilities. To this end, Android provides a set of capabili-
ties for the accessibility APIs, and they can be grouped into
eight categories [5], as listed below:
• C0: Receive AccessibilityEvents. This is the default
capability ensuring the accessibility service can receive
notiﬁcations when the user is interacting with an app.
• C1: Control display magniﬁcation.
• C2: Perform gestures, including tap, swipe, pinch, etc.
• C3: Request enhanced web accessibility enhancements1.
Such extensions aim to provide improved accessibility
support for the content presented in a WebView.
• C4: Request to ﬁlter the key event stream, including both
hard and soft key presses.
• C5: Capture gestures from the ﬁngerprint sensor.
• C6: Request touch exploration mode. In this mode, a
single ﬁnger moving on the screen behaves like a mouse
pointer hovering over the user interface.
• C7: Retrieve interactive window content. An interactive
window is a window that has input focus.
1This capability was deprecated in Android 8.0 (API level 26).
262          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Association3. Receive & Handle Events: Through the callback func-
tion onAccessibilityEvent, assistive apps obtain the
dispatched events and further process them following
their own programmed logics. If the assistive app needs
to inject actions (e.g., clicking), it could reversely lookup
the view hierarchy from the source contained in an event,
locate a speciﬁc view node (e.g., a button), and then per-
form actions on the topmost app.
Accessibility Events2. As described above, the accessibil-
ity architecture is event-driven. The AccessibilityEvent is
generated by a view and describes the current state of the view.
The main properties of an AccessibilityEvent include [2]:
EventType, SourceNode, ClassName, and PackageName.
Note that, each event type has an associated set of different
or unique properties.
3 Threat Model and Methodology
According to whether the assistive apps are malicious, the
security threats related to the accessibility APIs could be
classiﬁed into two groups. In this paper, we focus on the
normal use cases of the accessibility APIs and, therefore,
consider the security threats assuming benign assistive apps.
It has been well-studied that malicious apps can exploit the
powerful capabilities of the BIND_ACCESSIBILITY_SERVICE
permission to launch attacks. Previous research [35,37,43] has
demonstrated a variety of stealthy attacks could be launched,
even complete control of the UI feedback loop (see Section §9
for more details). Such kind of attacks is built on the dominant
feature through the accessibility APIs which could achieve
the cross-app operations. As shown in Figure 1, the key point
of a successful attack is how to induce victim users to turn on
the accessibility service.
Threat Model. In our study, we consider a more general
model: the attacker only could control a malicious app in-
stalled on the victim’s phone without any sensitive permis-
sions. Also, there is a benign assistive app installed on the
same phone. We assume the malicious app attempts to hijack
the execution logic of the assistive app to perform malicious
activities. In this process, the assistive app becomes the con-
fused deputy, and its assistive capabilities are abused.
Methodology. In our study, we employed the following two-
step methodology:
• Measuring the usage of the accessibility APIs in the
wild. With the data collected by ourselves, we could
answer whether the accessibility APIs are used correctly
by developers as expected.
• Reviewing the design of Android accessibility supporting
architecture. If the answer of the ﬁrst step is “no”, we
2We use “AccessibilityEvent” and “accessibility event” interchange-
ably in this paper.
(a) Accessibility settings
(b) AVG Cleaner
(c) Security warning
Figure 1: Turn on accessibility service for AVG Cleaner.
Building An Assistive App. Android provides standard ac-
cessibility services (such as TalkBack), and developers can
create and distribute their own custom services. An app pro-
viding the accessibility service is called assistive app. To
build an assistive app, developers need to create a service
class that extends AccessibilityService.
Permission. For security reasons, the accessibility service
must be protected by the BIND_ACCESSIBILITY_SERVICE
permission (protection level: signature) to ensure that only
the system can bind to it. An extra requirement is that the user
must manually turn on the accessibility switch and conﬁrm
the security implications for every accessibility service (assis-
tive app), as demonstrated in Figure 1(c). The listed items in
this picture are the capabilities declared by this service.
Service Interaction. The internal mechanism of the acces-
sibility framework is quite complicated, and here we focus
on how accessibility events are processed. As illustrated in
Figure 2, three components are involved in the Android ac-
cessibility service framework: topmost app, system-level ser-
vice AccessibilityManagerService, and multiple assistive
apps with custom accessibility services. A typical and simpli-
ﬁed invocation process of accessibility service is illustrated
as below:
1. Generate & Send Events: An accessibility event [2] is
ﬁred by the topmost app which populates the event with