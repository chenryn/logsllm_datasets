# Title: Kindness is a Risky Business: On the Usage of the Accessibility APIs in Android

# Authors:
- Wenrui Diao
- Yue Zhang
- Li Zhang
- Zhou Li
- Fenghao Xu
- Xiaorui Pan
- Xiangyu Liu
- Jian Weng
- Kehuan Zhang
- XiaoFeng Wang

## Abstract
Assistive technologies are integrated into nearly all mainstream operating systems to assist users with disabilities or difficulties in operating their devices. On Android, Google provides app developers with the accessibility APIs to make their apps more accessible. Previous research has demonstrated that various stealthy attacks can be launched by exploiting these capabilities (with the BIND_ACCESSIBILITY_SERVICE permission granted). However, no systematic study has been conducted on the underlying design of the Android accessibility framework, leaving the security implications of deploying accessibility features not fully understood.

In this paper, we systematically evaluate the usage of the accessibility APIs and the design of their supporting architecture. Through code review and a large-scale app scanning study, we find that the accessibility APIs are widely misused. Furthermore, we identify several fundamental design shortcomings in the Android accessibility framework: (1) lack of restrictions on the purposes for using the accessibility APIs; (2) insufficient integrity guarantees for accessibility event processing; (3) no restrictions on the properties of custom accessibility events. Based on these observations, we demonstrate two practical attacks—installation hijacking and notification phishing—as case studies. These flaws and attack cases have been responsibly reported to the Android security team and the corresponding vendors, and we propose some improvement recommendations to mitigate these security threats.

## 1. Introduction
Assistive technologies are integrated into nearly all mainstream operating systems to assist users with disabilities in operating their devices. This is not only an act of kindness from OS vendors but also a requirement under federal law [20]. On mobile platforms, significant efforts have been made to develop assistive technologies. For example, Android provides TalkBack [7] for blind and visually impaired users, allowing them to perform input via gestures and receive feedback through an artificial voice. Other supports include Switch Access and Voice Access.

In addition to the built-in accessibility features provided by the Android OS, Google offers app developers the accessibility APIs to develop custom accessibility services. The mission of these APIs is to provide user interface enhancements to assist users with disabilities or those who may temporarily be unable to fully interact with a device [11]. With the accessibility APIs, an app can observe user actions, read window content, and execute automatic GUI operations, improving interactions between users and apps. Since these APIs are powerful, the accessibility service must be protected by the BIND_ACCESSIBILITY_SERVICE permission to ensure that only the system can bind to it.

However, the powerful capabilities of the accessibility APIs can be exploited for malicious purposes. Previous research has demonstrated various stealthy attacks that can be launched using these capabilities [35, 37, 43] and investigated inadequate checks on accessibility I/O paths [36]. However, previous works focused on exploring what kinds of attacks could be achieved through a malicious app with the BIND_ACCESSIBILITY_SERVICE permission, and none of them addressed the design of the Android accessibility framework.

### Our Work
Motivated by the significant security implications of the accessibility service, we conduct the first comprehensive study to evaluate the usage of the accessibility APIs and the design of their supporting architecture in Android. We first conducted a large-scale study on 91,605 Android apps from Google Play to measure the usage of the accessibility APIs in the wild. The results show that the accessibility APIs are widely misused, with most assistive apps using them to bypass permission restrictions, deviating from their original mission.

We then reviewed the Android accessibility framework to investigate the fundamental reasons for misuse and potential security risks. We identified several fundamental design shortcomings that can lead to severe security threats:
1. There is no restriction on the purposes for using the accessibility APIs. Any app can invoke them, even if the purpose is not to help disabled users.
2. The Android accessibility architecture is event-driven, and the event receivers do not communicate directly with the event senders. The execution logic of accessibility services relies solely on received accessibility events, which do not provide strong integrity guarantees.
3. Android allows zero-permission apps to inject arbitrary custom accessibility events into the system, enabling the construction of fraudulent activities.

Exploiting these design shortcomings, we demonstrate two real-world attacks: installation hijacking and notification phishing. In these attacks, a malicious app without any sensitive permissions can hijack the execution logic of assistive apps installed on the same phone to install arbitrary apps and send phishing notifications. Unlike previous works [35, 37, 43], our attacks do not assume the malicious app has the BIND_ACCESSIBILITY_SERVICE permission.

Following responsible disclosure, we reported our findings to the Android security team and the corresponding vendors. Google confirmed our discovery and rewarded us $200 under the Android Security Rewards Program. The latest update can be tracked through AndroidID-79268769 and CVE-2018-9376.

We also propose some improvement recommendations to mitigate these security threats. However, to thoroughly address the current security threats, a new accessibility architecture may be needed. Balancing security and usability remains an open question.

### Contributions
- **Data-driven Analysis:** We performed the first large-scale study to measure the usage of the accessibility APIs in the wild (based on 91,605 app samples from Google Play). Our study shows that the accessibility APIs are widely misused.
- **Discovery of New Design Flaws:** After reviewing the design of the Android accessibility supporting architecture, we identified several fundamental design shortcomings that can bring serious security risks. We also propose improvement recommendations.
- **Demonstration of Proof-of-Concept Attacks:** We demonstrate two concrete attacks exploiting the design shortcomings of the accessibility framework: installation hijacking and notification phishing.

### Roadmap
- **Section 2:** Provides the background of the accessibility service on Android.
- **Section 3:** Introduces the threat model and methodology of this paper.
- **Section 4:** Measures the usage status of the accessibility APIs on a large-scale app dataset.
- **Section 5:** Summarizes the discovered design shortcomings.
- **Section 6:** Demonstrates two practical attacks exploiting these shortcomings.
- **Section 7:** Discusses some attack conditions and limitations.
- **Section 8:** Proposes some improvement recommendations.
- **Section 9:** Reviews related works.
- **Section 10:** Concludes the paper.

## 2. Accessibility Service on Android
The accessibility service was introduced by Google starting from Android 1.6 (API Level 4) and gained significant improvements since Android 4.0 (API Level 14). It is designed to implement assistive technology with two main functionalities:
1. Receiving input from alternative input devices (e.g., voice into microphone) and transforming it into commands accepted by the OS or apps.
2. Converting system output (e.g., text displayed on screen) into other forms that can be delivered by alternative output devices (e.g., sound through a speaker).

### Capabilities
To achieve these functionalities, Android provides a set of capabilities for the accessibility APIs, grouped into eight categories [5]:
- **C0:** Receive AccessibilityEvents. This is the default capability ensuring the accessibility service can receive notifications when the user interacts with an app.
- **C1:** Control display magnification.
- **C2:** Perform gestures, including tap, swipe, pinch, etc.
- **C3:** Request enhanced web accessibility enhancements. Such extensions aim to provide improved accessibility support for content presented in a WebView.
- **C4:** Request to filter the key event stream, including both hard and soft key presses.
- **C5:** Capture gestures from the fingerprint sensor.
- **C6:** Request touch exploration mode. In this mode, a single finger moving on the screen behaves like a mouse pointer hovering over the user interface.
- **C7:** Retrieve interactive window content. An interactive window is a window that has input focus.

### Receive & Handle Events
Through the callback function `onAccessibilityEvent`, assistive apps obtain dispatched events and process them according to their programmed logic. If the assistive app needs to inject actions (e.g., clicking), it can reverse-lookup the view hierarchy from the source contained in an event, locate a specific view node (e.g., a button), and perform actions on the topmost app.

### Accessibility Events
The accessibility architecture is event-driven. The `AccessibilityEvent` is generated by a view and describes the current state of the view. The main properties of an `AccessibilityEvent` include [2]:
- **EventType**
- **SourceNode**
- **ClassName**
- **PackageName**

Note that each event type has an associated set of different or unique properties.

## 3. Threat Model and Methodology
Security threats related to the accessibility APIs can be classified into two groups based on whether the assistive apps are malicious. In this paper, we focus on the normal use cases of the accessibility APIs and consider security threats assuming benign assistive apps. Malicious apps can exploit the powerful capabilities of the BIND_ACCESSIBILITY_SERVICE permission to launch attacks, as demonstrated in previous research [35, 37, 43]. These attacks leverage the cross-app operations enabled by the accessibility APIs. A successful attack depends on inducing victim users to turn on the accessibility service, as shown in Figure 1.

### Threat Model
In our study, we consider a more general model: the attacker controls a malicious app installed on the victim’s phone without any sensitive permissions. There is also a benign assistive app installed on the same phone. We assume the malicious app attempts to hijack the execution logic of the assistive app to perform malicious activities. In this process, the assistive app becomes a confused deputy, and its assistive capabilities are abused.

### Methodology
Our study employed a two-step methodology:
1. **Measuring the usage of the accessibility APIs in the wild:** Using data collected by ourselves, we determined whether the accessibility APIs are used correctly by developers as expected.
2. **Reviewing the design of the Android accessibility supporting architecture:** If the first step revealed misuse, we reviewed the design to identify fundamental reasons and potential security risks.

### Building an Assistive App
Android provides standard accessibility services (such as TalkBack), and developers can create and distribute their own custom services. An app providing the accessibility service is called an assistive app. To build an assistive app, developers need to create a service class that extends `AccessibilityService`.

### Permission
For security reasons, the accessibility service must be protected by the BIND_ACCESSIBILITY_SERVICE permission (protection level: signature) to ensure that only the system can bind to it. Additionally, the user must manually turn on the accessibility switch and confirm the security implications for every accessibility service (assistive app), as shown in Figure 1(c). The listed items in this picture are the capabilities declared by the service.

### Service Interaction
The internal mechanism of the accessibility framework is complex, and we focus on how accessibility events are processed. As illustrated in Figure 2, three components are involved in the Android accessibility service framework: the topmost app, the system-level service `AccessibilityManagerService`, and multiple assistive apps with custom accessibility services. A typical and simplified invocation process of the accessibility service is as follows:

1. **Generate & Send Events:** An `AccessibilityEvent` is fired by the topmost app, which populates the event with relevant information.
2. **Receive & Handle Events:** Through the callback function `onAccessibilityEvent`, assistive apps obtain the dispatched events and process them according to their programmed logic.
3. **Inject Actions:** If the assistive app needs to inject actions (e.g., clicking), it can reverse-lookup the view hierarchy from the source contained in an event, locate a specific view node (e.g., a button), and perform actions on the topmost app.