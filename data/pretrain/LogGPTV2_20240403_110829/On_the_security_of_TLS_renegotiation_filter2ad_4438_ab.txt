generically prove that an ACCE-secure TLS ciphersuite is,
with SCSV/RIE, a weakly secure renegotiable ACCE, be-
cause the protocol itself is modiﬁed by including SCSV/RIE
and hence a black-box approach does not work. Instead, we
consider tagged TLS where an arbitrary tag can be provided
as an extension. Via a chain of results and models, we show
that if a tagged TLS ciphersuite is secure in an ACCE variant
where Finished messages are revealed, then that TLS cipher-
suite with SCSV/RIE is a weakly secure renegotiable ACCE
protocol. This provides a generic justiﬁcation for the security
of SCSV/RIE. Proving that TLS ciphersuite secure in this
tagged variant model seems to be almost no harder than a
proof that it is ACCE-secure; we only needed to change a few
lines from the ACCE security proof of TLS_DHE_DSS_ [16].
New countermeasure for TLS. TLS with SCSV/RIE can-
not meet our strongest notion of renegotiable security, only
the weaker notion described above. In the strong deﬁnition,
even if the adversary learns the session key of one phase,
parties who later renegotiate still should detect any earlier
1Note that TLS standards use diﬀerent words. We say a
single session can have multiple phases; the TLS standards
refer to a single connection having multiple sessions.
Secure
Weakly secure
Secure
multi-phase
renegotiable
renegotiable
ACCE
(Defn. 3)
×
—
—
ACCE
(Defn. 5)
(cid:88)
× (§3)
(cid:88) (Thm. 1)
ACCE
(Defn. 4)
(cid:88)1
× (§3)
× (§4.1)
(cid:88) (Thm. 4)
(cid:88) (Thm. 4)
(cid:88) (Thm. 4)
Secure against Ray–
Dispensa-type attacks
TLS w/o countermeasures
with SCSV/RIE
(if tagged-ACCE-ﬁn-secure)
with new countermeasure
(if tagged-ACCE-ﬁn-secure)
1 For secure renegotiable ACCE, security holds even if session
keys from one phase are revealed while that phase is active.
Table 1: Summary of security notions and results on
TLS
message injections by the adversary. Though the ability to
learn session keys of phases while the protocol is still running
makes the adversary quite powerful, this may be realistic
in scenarios with long-lived session keys, for example with
session resumption. We present in Section 5 a simple adjust-
ment to the renegotiation information extension—adding a
ﬁngerprint of the transcript of the previous phase’s record
layer—so TLS can achieve this stronger security notion. This
countermeasure can be seen as providing record layer recog-
nition, conﬁrming that both parties have the same view
of all communicated messages, rather than just handshake
recognition as in the SCSV/RIE countermeasure.
Table 1 summarizes our results on TLS and renegotiation
countermeasures. While our theorems are speciﬁc to TLS,
our deﬁnitional framework is suitable for any channel estab-
lishment protocol that involves renegotiation, and could for
example be used to check if renegotiation in the Secure Shell
(SSH) protocol really is secure [21].
On composability and the choice of ACCE. It would be
desirable to prove the security of the TLS renegotiation coun-
termeasures via some kind of composability framework, such
as universal composability or the game-based composability
framework of Brzuska et al. [5]. Unfortunately, this is not
possible with existing security deﬁnitions for TLS. The TLS
renegotiation countermeasures are not achieved by composing
in a black-box manner one protocol or primitive with another.
Instead, the SCSV/RIE countermeasure looks inside the pro-
tocol and changes it in a white-box way:
it modiﬁes the
messages sent by the protocol, and re-uses an internal value.
Thus we cannot make use of existing security results in a
black-box compositional way. Our approach is the “next best
thing”: we modify an existing security deﬁnition (ACCE) in
what seems to be a minimal way, adding just enough “hooks”
to get at the internal values needed to modify and re-use
the required values for the SCSV/RIE countermeasure. We
are then able to prove in a fully generic way that any TLS
protocol that satisﬁes this slightly modiﬁed ACCE notion
with hooks is, when using the SCSV/RIE countermeasure,
secure against renegotiation attacks. Since the hooks added
are quite small, it is not much work to change a proof that a
TLS ciphersuite is ACCE secure to show that it satisﬁes this
slightly modiﬁed ACCE notion as well.
Of the two existing deﬁnitional approaches for proving
the full security of the TLS protocol [16, 5], we chose the
ACCE approach over the game-based composability approach
389because renegotiation in TLS makes extensive use of the
interplay between the handshake and record layer.
Moreover, the modiﬁcations we make to the execution
environment to enable analysis of renegotiable ACCE proto-
cols can be adapted to capture renegotiation and rekeying in
other types of protocols such as authenticated key exchange.
2. SECURITY DEFINITIONS FOR MULTI-
PHASE AND RENEGOTIABLE ACCE
In this section we describe what a multi-phase authenti-
cated and conﬁdential channel establishment (ACCE) proto-
col is and our various renegotiation security notions. Essen-
tially, a multi-phase protocol can have many key exchanges—
each called a phase—linked to a single session. Our deﬁnition
builds on the ACCE deﬁnition of Jager et al. [16], which
combined the Bellare–Rogaway model for authenticated key
exchange [1] with a Jager et al.’s stateful variant of Pater-
son et al.’s length-hiding authenticated encryption [23].
Notation. If S is a set, x $← S denotes sampling a value x
uniformly at random from S. x $← A(y) denotes the output
x of the probabilistic algorithm A when run on input y and
randomly chosen coins. AO(·) means A is run with access to
oracle O(·). The notation [1, n] denotes the set {1, 2, . . . , n};
phases[(cid:96)] denotes the (cid:96)th entry in the 1-indexed array phases
and |phases| denotes the number of entries in the array. πs
A.x
denotes variable x stored in oracle instance πs
A.
2.1 Overview
The ﬁrst security notion, a secure multi-phase ACCE pro-
tocol, is a straightforward extension of the ACCE model to
allow multiple, independent phases per session; notably, we
require essentially no link between phases:
• An adversary breaks (multi-phase) authentication if a
party accepts in a phase with uncorrupted long-term
keys, but no matching phase exists at the peer.
• An adversary breaks conﬁdentiality/integrity if it can
guess the bit b involved in a conﬁdentiality/integrity ex-
periment similar to stateful length-hiding authenticated
encryption.
Our main security deﬁnition is a secure renegotiable ACCE
protocol, which strengthens the authentication notion: parties
should successfully renegotiate only when they have exact
same view of everything that happened before.
• An adversary breaks renegotiation authentication if a
party accepts in a phase where long-term keys have not
been corrupted, but either no matching phase exists at
the peer or some previous handshake or record layer
transcript does not match.
However, it is not possible to prove that TLS with the
SCSV/RIE countermeasures is a secure renegotiable ACCE
protocol: as we will see in Section 3, the strong deﬁnition
requires that the views of parties match when successfully
renegotiating, even when previous sessions’ long-term secret
keys or session keys were revealed. TLS’s SCSV/RIE coun-
termeasures do not fully protect against the case when these
secret values are revealed.
As a result, we introduce the weaker, though still quite rea-
sonable, notion of a weakly secure renegotiable ACCE protocol,
and prove in Section 3 that the SCSV/RIE countermeasure
for TLS generically provides it:
• An adversary breaks weak renegotiation authentication
if a party accepts in a phase with uncorrupted long-
term keys and session keys for each earlier phase were
not revealed while that phase was active, but either no
matching phase exists at the peer or some previous
handshake or record layer transcript does not match.
We proceed by describing the execution environment for
adversaries interacting with multi-phase ACCE protocols,
then deﬁne the various security notions described above.
2.2 Execution Environment
Parties. The environment consists of npa parties, {P1, . . . ,
Pnpa}. Each party PA is a potential protocol participant,
and has a list of nke long-term key pairs (pkA,1, skA,1), . . . ,
(pkA,nke , skA,nke ). We assume that each party PA is uniquely
identiﬁed by any one of its public keys pkA,∗. In practice,
there may be other identities that are bound to these public
keys, e.g. by using certiﬁcates, but this is out of scope of this
paper. It is common in AKE security models to assume ideal
distribution of long-term public keys for simplicity [1, 6, 16].
Sessions. Each party PA can participate in up to nse
sessions, which are independent executions of the protocol
and can be concurrent or subsequent; all of a party’s sessions
have access to the same list of its long-term key pairs, as well
as a trusted list of all parties’ public keys. Each session s ∈
[1, nse] is presented to the environment as an oracle πs
A. Each
oracle πs
A.d the oracle corresponding
to the intended communication partner, e.g.πs
B. As
well, the variable ρ ∈ {Client, Server} records the role of the
oracle. Parties can play the role of the client in some sessions
and of the server in other sessions, but their role is ﬁxed
across all phases within a session.
A records in a variable πs
A.d = πt
Phases. Each session can consist of up to nph phases. Each
phase consists of two stages: a pre-accept, or “handshake”,
stage, which is eﬀectively an AKE protocol that establishes
a session key and performs mutual or server-only authen-
tication; and a post-accept, or “record layer”, stage, which
provides a stateful communication channel with conﬁden-
tiality and integrity. A list πs
A.phases of diﬀerent phase
states is maintained; we sometimes use the notation πs,(cid:96)
A
for πs
A.phases[(cid:96)]. There can be at most nph phases per or-
acle. The last entry of πs
A.phases contains the state of the
current phase, which may still be in progress. Each entry
πs
A.phases[(cid:96)] in the log contains:
• pk, the public key used by πs
• pk(cid:48), the public key that πs
A observed as being used for
• ω ∈ {0, 1}, denoting the authentication mode used,
where 0 indicates that server-only authentication is used
in that phase and 1 indicates mutual authentication,
• ∆, a counter used to keep track of the current status
• α, either accept, reject, or ∅ (for in-progress),
• k, the encryption and/or MAC key(s) established by
• T , the transcript of all (plaintext) messages sent and
A during the pre-accept stage of that
its peer in that phase2,
of the protocol execution,
A in that phase,
πs
A in that phase,
received by πs
phase,
2One of the public keys may remain empty, if no client
authentication is requested.
390• RTs and RTr, the transcripts of all ciphertexts sent
and received (respectively) in the post-accept phase by
πs
A encrypted under the key established in that phase,
• b, a random bit sampled by the oracle at the beginning
• st, some additional temporary state (which may, for
instance, be used to store ephemeral Diﬃe–Hellman
exponents for the handshake, or state for the sLHAE
scheme for the record layer).
of the phase, and
Once a phase of a protocol accepts (that is, an encryption
key has been negotiated and authentication is believed to
hold), then α is set to accept. If the protocol rejects and the
oracle wishes to discontinue operation, the counter ∆ can be
set to the special symbol reject. Whenever a new handshake
initialization message is received, the oracle adds a new entry
to its phases list. The variable ω is set at some point during
(or before) the protocol execution, depending on the protocol
speciﬁcation (e.g.in case of TLS, the server can send the
message CertificateRequest to request client, i.e. mutual,
authentication, otherwise server-only authentication is used).
Application data messages sent and received encrypted under
a newly established encryption key (e.g. messages sent in
the TLS record layer) will be appended to variables RTs and
RTr in the latest entry of the log. If handshake messages
for the renegotiation of a new phase are encrypted under
the previous phase’s session key (as they are in TLS), the
plaintext messages are appended to variable T in the new
entry of the phase log, and ciphertexts are appended to RT
in the previous phase.
Remark 1. The introduction of multiple phases is the
main diﬀerence compared to previous AKE and ACCE mod-
els. We need to allow multiple authentications and key ex-
changes within one oracle to capture the functionality of
renegotiation. When limited to a single phase and when each
party has only one long-term key pair, our execution environ-
ment/security experiment is equivalent to the original ACCE
model of Jager et al. [16].
Adversarial interaction. The adversary interacts with or-
acles by issuing the following queries, which allow her to
control (forward/alter/create/drop) all communication on
the public channel (Send), learn parties’ long-term secret
keys (Corrupt), learn session keys (Reveal), and control send-
ing and receiving of arbitrary messages on the encrypted
record layer (Encrypt/Decrypt) using a stateful symmetric
encryption scheme StE [23].
• Send(πs
A, m): The adversary can use this query to send
any (plaintext) message m of its choosing to (the cur-
rent phase of) oracle πs
A. The oracle will respond