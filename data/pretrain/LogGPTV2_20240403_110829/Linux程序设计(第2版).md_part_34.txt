}
close_keyboard():
exit (0);
3）init_keyboard和close_keyboard分别在程序的首尾对终端进行配置。
void init_keyboard()
tcgetattr(0,6initial_settings):
new_settings = initial_settings:
new_settings.c_1flag &= ~ECHO;
new_settings.c_lflag &=~ISIG;
new_settings.c_cc(VMIN] =1:
new_settings.c_cc[VTIHE]=0;
tcsetattr(O,TCsANow, knew_settings);
void close_keyboard()
tcsetattr(0,TCsANow, &initial_settings);
1
4）检查有无击键动作的kbhit函数：
int kbhit()
加入jaVa编程群：524621833
---
## Page 175
第5章终
157
char ch;
int nread;
if(peek_character !=-1)
new_settings.c_cc[VMIN}=0;
return 1;
tcsetattr(0,TCsANow,&new_settings):
nreed = read(0,&ch,1):
new_settings.c_cc[VMIN]=1;
tcsetattr(O.TCSANow,new_settings):
if(nread == 1){
peek_character = ch;
return 1;
return 0:
1
5)按键代表的字符被下一个函数readch读取。它会把pcek_character重置为“-1”以进人下
一个循环。
int readch()
if(peek_character 1=-1)（
peek_character = -1;
return ch:
read(0,&ch,1):
return ch;
当我们运行这个程序的时候，我们将看到如下所示的输出情况：
looping
$ kbhit
looping
looping
you hit h
looping
looping
you hit d
looping
you hit q
looping
操作注释：
init_keyboard函数把终端配置成“等待读取一个字符才能返回”的工作模式（MIN=1，
TIME=0）。kbhit把这个行为改变为立刻检查输入并返回（MIN=0，TIME=0）。在程序退出之前
还要恢复终端最初的配置情况。
注意：如果有按键被按下，那么在kbhi函数里我们实际上已经把它所代表的字符读进来了.但
这个字符此时只能保存在一个本地变量里，只有在下一步由readch函数“读”字符的时候才返回它。
伪终端
许多UNIX系统，包括Linux，都有一个名为伪终端的功能。这些设备的行为与我们在这一
加入jaVa编程群：524621833
---
## Page 176
158Linux程序设计
章里使用的终端非常相似，惟·的区别就是伪终端没有实际对应的硬件。它们可以用来提供一
个以终端形式访问其他程序的操作接口。
比如说，我们可以通过伪终端让两个象棋程序杀在一起，面它们实际上是按与人类棋手
通过一个终端来过招的情况设计的。这需要有一个应用程序做为中转站，它把甲程序的棋子走
法传递给乙程序，再把乙程序的走法传递回甲程序。中转站程序利用伪终端功能迷感住那两个
象棋程序，让它们在没有硬件终端在场的情况下以正常方式运行。
伪终端在过去曾经是一个系统一个样，而有的系统甚至还没有这种功能。但它们现在已经
以“UNIX98Pseudo-Terminal”（UNIX伪终端，简称PTY）的身份被纳人“SingleUNIX
Specification”技术规范中。
5.6本章总结
在这一章里，我们学习了如何从三个方面对终端进行控制。本章第一部分包括对重定向的
检测以及如何在标准文件描述符已经被重定向的情况下直接与终端进行对话等方面的内容。
接下来我们学习了通用终端接口和termios结构，后者提供了对UNIX终端进行处理的细节控制。
最后，我们学习了terminfo数据库及其相关函数的使用方法。通过它们，我们就能以一种与
具体终端无关的形式对屏幕输出进行控制和管理。
加入iava编程群：524621833
---
## Page 177
第6章curses函数库
我们在上一章学习了如何加强对字符输入过程的精细控制以及如何以一种与具体终端无关
的形式提供字符输出等两部分内容。通用终端接口（GTI，即termios）的实际应用和tparm及其
相关函数对escape转义序列的操作处理有一个共同的问题，就是必须大量使用低级代码。可在程
序设计过程中最好再有一个高级的程序设计接口。如果能够简单地绘制屏幕并通过一系列函数
自动处理终端控制方面的问题，我们当然求之不得。
在这一章里，我们将对一个这样的函数库进行学习，它就是curses函数库。curses函数库是
一个重要的标准，它是简单的文本行程序和全图形化（一般也更难于编程）X窗口系统程序之间
的一个过渡桥梁。Linux提供有svgalib函数库，但这并不是一个标准的UNIX函数库。许多全屏
幕应用程序都使用了curses函数库。即使是编写基于字符的全屏幕程序，使用curses函数库的方
案也更简明，而程序本身也更独立于具体的终端。在编写这类程序时，使用curses函数库要比直
接使用escape转义序列容易得多。curses函数库还可以对键盘进行管理，提供一个简单易用的无
阻塞字符输人模式。入们熟悉的小文本编辑器vi就是使用这个函数库编写出来的。我们将对以下
几个方面进行讨论：
·curses函数库的使用方法。
·curses函数库涉及的概念。
·基本的输入输出控制。
·多窗口。
·键盘上的数字小键盘。
·彩色显示功能。
做为本章的学习成果，我们将用C语言重写CD唱盘管理软件，把我们在这几章里学到的知
识都用上。
6.1使用curses函数库进行编译
curses是一个函数库，我们必须从个适当的系统库文件里把有关的头文件、函数和宏定义
等添加到我们的程序里去，这样才能充分享受它给我们带来的便利。但在此之前，我们先来回
顾一下它的历史。curses函数库有好几种不同的实现版本。最早的版本出现在BSD版的UNIx操
作系统中，以后又出现在SystemV系列的UNIX操作系统里。在编写本章中的程序示例时，我们
使用的是ncurses函数库，这是一个为Linux开发的自由软件函数库，它以SystemVRelease4.0中
的curses函数库为基础。这个版本对其他种类的UNIX操作系统有很高的可移植性。甚至还有能
够用在MS-DOS和MS-Windows下的curses函数库。如果读者使用的UNIX操作系统自带的curses
函数库缺少对某些功能支持，我们建议你设法搞一份ncurscs函数库代替它。
加入jaVa编程群：524621833
---
## Page 178
160Linux程序设计
X/Open技术规范定义了两个级别的curses函数库：基本curses函数库和扩展curses函
数库。在我们写作本书的时候，最新版的ncurses函数库还不能支持所有的扩展功能，
这一章里有凡个curses程序需要用到尚未在ncurscs函数库里实现的扩展功能。
扩展curses函数率里有一些是各种附加功能的组合，其中包括一组用来处理多栏字
符的函数和一组对色彩进行高级处理的函数。
在对使用了curses函数库的程序进行编译时，我们必须在程序里包括上头文件curses.h，还
要在编译命令行上用“-lcurses”选项对curses函数库进行链接。根据读者系统的配置情况，它可
能已经是ncurses函数库了。读者可以自行检查自己的curses配置情况，“ls-1/usr/include
/*curses.h”命令用来查看头文件，“ls-/usr/lib/*curses*”命令用来查看库文件。如果读者系统
上的curses文件是对ncurses文件的链接，那么，在（用gcc命令）编译本章给出的程序文件时就
可以使用下面这样的命令：
如果读者的curses配置情况是不能自动使用ncurses函数库，就需要用下面这样的编译命令来
强制使用ncurses函数库：
S gcc -I/uar/include/ncursee progran.c -o program -lncurses
“-1”选项的作用是指定检索头文件时将要使用的子目录路径。可下载代码形式的制作文件
（makefile）会假设用户缺省使用的是ncurses函数库，所以读者必须对此做出修改：说不定在读
者系统上还不得不手工完成编译操作。
如果读者对自己系统上的curses函数库配置情况不了解，可以参考ncurses的使用手册。
6.2基本概念
curses例程工作在屏幕、窗口和子窗口上。“屏幕”就是我们正在写的设备（通常是一个终
窗口，那么所谓的“屏幕”就是该终端窗口内部一切可用的字符位置。无论何时，至少会有一
个curses窗口，我们称之为stdscr，它与物理屏幕的尺寸完全一样。我们可以额外创建一些尺寸
小于屏幕的窗口。窗口可以互相重叠，还可以有许多于窗口，但子窗口必须永远被包含在其父
窗口的内部
curscs函数库用两个数据结构来映射终端屏幕，它们是stdscr和curscT。
stdscr相对来说比较重要一些，这个结构会在curses函数产生输出时被刷新。stdscr数据结构
指的是“标准屏幕”。它的工作原理和stdio函数库中的标准输出stdout非常相似。在curses程序里，
它是缺省的输出窗口。在程序调用refresh之前，输出数据是不会出现在屏幕上的。在需要输出
时，curses函数库会把stdscr的内容（屏幕将会是什么样子）和第二个数据结构curscr（屏幕当前
的样子）进行比较，然后用这两个结构之间的差异刷新屏幕。
有的curses程序需要了解curses函数库里的stdscr结构，因为有的curses函数需要有一个它这
加入jaVa编程群：524621833
---
## Page 179
第6章curses函数库
161
样的参数。但实际上，stdscr结构与函数库的具体实现密切相关，决不允许直接存取。curses程
序不需要用到curscr。
综上所述，在一个curses程序里、输出一个字符的过程是：
·使用curses函数刷新一个逻辑屏幕。
·请求curses用refresh刷新物理屏幕。
这个两级跳的办法带来的好处是curses屏幕的刷新非常有效率。这样做对一个控制台屏幕来
说并没有多大的重要意义，但如果你是通过一个低速的串行口或调制解调器连接来运行你程序
的话，差距就很可观了。
一个curses程序会对逻辑屏幕的输出函数进行许多次调用，比如说在屏幕把光标移动到正确
的位置，再从那里开始输出字符或绘制线框。在某个阶段，用户会要求查看全部的输出。这种
情况一般出现在refresh被调用期间，此时，curses会计算出让物理屏幕对应上逻辑屏幕的最佳办
法。通过curses来刷新屏幕与立刻执行每一个屏幕写操作相比，因为前者使用了适当的终端性能
指标并优化了光标的移动动作，所以它输出的字符一般要比后者少很多。curses函数库的名字就
来源于它的光标移动优化功能。随着哑终端和低速调制解调器占主导地位的时代渐渐远去，字
符输出个数已经不那么重要了，但curses函数库在经历了岁月的洗礼之后依然还是程序员工具箱
里的好东西。
逻辑屏幕的布局是一个字符数组，数组下标由行号和列号组成。位置（0，0）是屏幕的左上角。
请看图6-1。
0,0
（行，列）
图6-1
curses函数使用的坐标是y值（行号）在前，x值（列号）在后。每个位置不仅容纳着该屏幕
地点处的字符，还保存着它的属性。属性能否被显示出来要看物理终端的性能指标，但一般至
少会有黑体和下划线两种属性。
加入jaVa编程群：524621833
---
## Page 180
162
Linux程序设计
curses函数库在使用中需要建立一些临时性的数据结构，操作中又会对它们造成破坏，所以
每个curses程序都必须在开始使用这个库之前对它进行初始化，在结束使用之后恢复curses的原
设置。这两项工作是由initscr和endwin函数调用分别完成的。
我们来编写一个非常简单的curses程序screenl.c，让大家看看这两个函数和其他基本函数的
使用情况。然后再介绍函数的定义。
动手试试：一个简单的curses程序
1)我们在程序里加上curses.h头文件，在main函数里加上对curses函数库的初始化函数和重
置函数进行调用。
#include 
include
#include 
int mint)(
initscr ():
exit(EXIT_SUCCESS):
endwin(1 ;
2）在初始化和重置操作之间，我们把光标移到逻辑屏幕上坐标为（5，15）的位置，输出
“HelloWorld"，然后刷新物理屏幕。最后，我们调用sleep(2）把程序挂起两秒钟，这样我们就能
确保在程序结束之前能够看到它的输出。
nove(5. 15):
printw(*&s',
*Hello Wor1d’);
sleep (21:
运行程序，我们将在屏幕的左上半部分看见“HelloWorld”字样，屏幕的其余部分是空白
的。如图6-2所示。
HelloHor1d
图6-2
加入jaVva编程群：524621833
---
## Page 181
第6章curses函数库
163
6.3操作的初始化和结束
正如我们已经看到的，一切curses程序必须以initscr开始，以endwin结束。下面是它们的头
文件定义：
#include 
WINDow *initscr(void):
int endwin(void1;
initscr函数在一个程序里只能被调用一次。如果成功，initscr函数会返回一个stdscr结构的指
针；如果失败，它就简单地输出一条诊断信息并使程序退出执行。
curses，然后通过clearok（stdscr.1）和refresh调用重返curscs操作。这等于让curses忘记物理屏幕的
显示情况，从而强制它执行一次完整的原文重现操作。
WINDOW结构简单说来就是curses用来保存预期屏幕显示内容的结构。这个结构是“不透
明的”，也就是说，curses的内部成员也不能直接访问它。
6.4向屏幕输出数据
下面是几个提供屏幕刷新功能的基本函数：
#include 
int. addch(const chtype char_to_add) :
int addchstr(chtype *const string_to_add):
int printw(char *format,...);
int refresh(void);
/
int box(wINDow *win_ptr, chtype vertical_char, chtype horizontal_char):
int insch(chtype char_to_insert);
int insertln(void);