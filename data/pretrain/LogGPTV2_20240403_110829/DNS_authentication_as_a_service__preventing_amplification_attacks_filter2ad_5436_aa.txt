title:DNS authentication as a service: preventing amplification attacks
author:Amir Herzberg and
Haya Shulman
Detecting DNS Amplification Attacks 
Georgios Kambourakis, Tassos Moschos, Dimitris Geneiatakis, Stefanos Gritzalis 
Laboratory of Information and Communication Systems Security 
Department of Information and Communication Systems Engineering 
University of the Aegean, Karlovassi, GR-83200 Samos, Greece 
{gkamb, tmos, dgen, sgritz}@aegean.gr 
Abstract.  DNS  amplification  attacks  massively  exploit  open  recursive  DNS 
servers  mainly  for  performing  bandwidth  consumption  DDoS  attacks.  The 
amplification  effect  lies  in  the  fact  that  DNS  response  messages  may  be 
substantially  larger  than  DNS  query  messages.  In  this  paper,  we  present  and 
evaluate  a  novel  and  practical  method  that  is  able  to  distinguish  between 
authentic and bogus DNS replies. The proposed scheme can effectively protect 
local DNS servers acting both proactively and reactively. Our analysis and the 
corresponding  real-usage  experimental  results  demonstrate  that  the  proposed 
scheme offers a flexible, robust and effective solution. 
Keywords:  DNS  Security;  Denial  of  Service;  DNS  Amplification  Attacks; 
Detection and repelling mechanisms. 
1   Introduction 
Beyond doubt, the Internet is the ultimate terrain for attackers who seek to exploit its 
infrastructure  components  in  order  to  achieve  an  unauthorised  access  or  to  cause  a 
Denial of Service (DoS). DoS attacks can be classified into two major categories. In 
the first one, the adversary featly crafts packets trying to exploit vulnerabilities in the 
implemented  software  (service  or  protocol)  at  the  target  side.  This  class  of  attacks 
includes  outbreaks  like  the  ping  of  death  [1].  In  the  second  one,  the  aggressor 
attempts  to  overwhelm  critical  system’s  resources,  i.e.  memory,  CPU,  network 
bandwidth  by  creating  numerous  of  well-formed  but  bogus  requests.  This  type  of 
attack  is  also  well  known  as  flooding.  Several  incidents  in  the  Internet  have  been 
already  reported  in  the  literature  [2]-[5]  as  flooding  attacks,  affecting  either  the 
provided  service  or  the  underlying  network  infrastructure.  The  most  severe  among 
them is presented in [2] and is known as Reflection Distributed DoS (RDDoS). Such 
attacks  can  cost  both  money  and  productivity  by  rapidly  paralyzing  services  in  the 
target network. 
Recent  attack  incidents  verify  the  catastrophic  outcomes  of  this  class  of  attacks 
when  triggered  against  key  Internet  components  like  Domain  Name  System  (DNS) 
servers. For example, as reported in [2], in October 2002 eight out of the thirteen root 
DNS  servers  were  suffered  a  massive  DoS  attack.  Many  other  similar  attacks  were 
triggered against DNS in 2003 and 2004 [13], [14]. In a recent study, the Distributed 
Denial of Service (DDoS) activity in the Internet was analyzed employing a method 
called  “backscatter”  [15].  The  results  of  this  study  showed  that  nearly  4,000  DDoS 
attacks  are  released  each  week.  In  February  2006,  name  servers  hosting  Top  Level 
Domain (TLD) zones were the frequent victims of enormous heavy traffic loads. 
Contrariwise to normal DDoS attacks, where an arsenal of bots mounts an assault 
on a single targeted server, the new attacks unfold by sending queries to DNS servers 
with the return address aiming at the victim. In all cases the primary victim may be 
the local DNS server(s) itself. Bandwidth exhaustion caused affects normal network 
operation  very  quickly  and  incapacitates  the  target  machine.  For  example,  very 
recently, in May, 2007, US-CERT has received a report that Estonia was experiencing 
a  national  DDoS  attack.  According  to  the  source,  the  attacks  consisted  of  DNS 
flooding  of  Estonia's  root  level  servers.  By  this  time  2,521  unique  IP's  have  been 
identified  as  part  of  the  attacking  botnets.  This  situation  is  far  more  difficult  to 
prevent because in this case the DNS server performs the direct attack. For instance, 
in  an  ordinary  DDoS  attack,  one  can  potentially  block  a  bot  instructed  to  launch  a 
DDoS  attack  by  blocking  the  bot’s  IP  address.  Contrariwise,  it  is  not  so  simple  to 
block  a  DNS  server  without  affecting  and  damaging  the  operation  of  a  corporate 
network. The amplification factor in such recursive DNS attacks stems from the fact 
that tiny DNS queries can generate much larger UDP responses. Thus, while a DNS 
query message is approximately 24 bytes (excluding UDP header) a response message 
could easily triple that size. Generally, this outbreak takes advantage the fact that the 
DNS is needed by any service (http, ftp etc) requires name resolution.  
In this paper we focus on DNS amplification attack suggesting a novel, practical 
and  effective  solution  to  mitigate  its  consequences.  Our  repelling  mechanism  can 
protect  local  DNS  servers  both  proactively  and  reactively.  Specifically,  it  can 
proactively  alert  administrators  before  the  attack  affects  DNS  server  operation,  and 
reactively  by  automatically  blocking  bots’  IP  addresses  at  the  firewall  or  the  edge 
router(s). This means that every local network host is well protected too, in case that it 
is the actual target of the attack taking place. Actually, some bogus DNS replies will 
reach  the  target  host  at  the  first  stages  of  the  attack,  but  as  soon  as  an  alert  is 
generated all subsequent falsified DNS replies will be dropped at the perimeter. We 
also  evaluate  our  mechanism  considering  real-usage  scenarios,  false  positives  and 
false negatives. The rest of the paper is organized as follows. Next section focuses on 
DNS DoS flooding attacks, while Section 3 presents the existing countermeasures and 
remedies  proposed  so  far.  Section  4  introduces  and  evaluates  the  proposed 
mechanism, in terms of response time, false negatives and false positives. Section 4 
draws a conclusion giving also some pointers for future work. 
2   Flooding Attacks and the Domain Name System 
2.1 General description and Problem statement 
The  main  goal  of  any  flooding  attack  is  the  expeditious  consumption  of  critical 
system  resources  in  order  to  paralyse  the  provided  services  and  make  them 
unavailable to its legitimate users. Assuming that such an attack takes place against or 
exploits  a  critical  component  like  the  DNS  it  is  very  likely  that  would  quickly 
incapacitate  the  overall  network’s  services  making  it  unavailable  to  any  legitimate 
user.  Several  researchers  have  pointed  out  the  threat  of  flooding  attacks  using 
recursive  DNS  name  servers  open  to  the  world.  For  instance,  according  to  a  recent 
study [17], which is based on case studies of several attacked ISPs reported to have on 
a volume of 2.8 Gbps, one event indicated attacks reaching as high as 10 Gbps and 
used as many as 140,000 exploited name servers. 
Flooding  attacks  against  DNS  are  similar  to  other  well  documented  Internet 
services flooding attacks and could be launched in two distinct ways. In the first case 
the  attacker  sends  a  large  number  of  bogus  DNS  requests  either  from  a  single  or 
multiple sources, depending on the flooding architecture utilized [4], [5]. An example 
of multiple sources flooding architecture attack against a DNS is depicted in Figure 1. 
According  to  this  scenario,  the  attacker  orchestrates  usually  innocent  hosts,  called 
bots, to simultaneously generate fake DNS requests aiming at disrupting the normal 
DNS operation by consuming its resources; mainly memory and CPU. 
c
o
m
m
a
n
d
D
N
S
R
e
q
DNS Req
D
N
S R
e
q
Fig. 1 Multiple sources flooding attack architecture 
On the other hand, the most sophisticated and “modern” attacks exploit the DNS 
components  themselves  in  an  attempt  to  magnify  flooding  attack  consequences. 
Putting it another way, in a DNS amplification attack scenario, the attacker exploits 
the fact that small size requests could generate larger responses. Especially, new RFC 
specifications supporting IPv6, DNS Secure, Naming Authority Pointer (NAPTR) and 
other  extensions  to  the  DNS  system,  require  name  servers  to  return  much  bigger 
responses to queries. The relation between a request and the corresponding response 
is known as the amplification factor and is computed using the following formula: 
Amplification Factor = size of (response) / size of (request) 
The  bigger  the  amplification  factor  is,  the  quicker  the  bandwidth  and  resource 
consumption at the victim is induced. Consequently, in the case of DNS amplification 
attack the aggressor is based on the fact that a single DNS request (small data length) 
could generate very larger responses (bigger data length). For example, in the initial 
DNS specification [8] the DNS response was restricted up to 512 bytes length, while 
in  [9]  even  bigger.  The  attack  unfolds  as  follows:  The  attacker  falsifies  the  source 
address field in the UDP datagram to be that of a host on the victims’ network. Using 
the spoofed address, a DNS query for a valid resource record is crafted and sent to an 
intermediate name server. The latter entity is usually an open recursive DNS server, 
which forwards the final response towards the target machine as illustrated in Figure 
2.  The  attacker  will  repeatedly  send  the  query  to  the  intermediate  name  server  but 
with  all  the  responses going to  the  victim  network.  Potentially,  the  adversary  could 
consume the entire bandwidth of a T1 line by generating a few thousand responses. 
Supposing  that  the  attacker  employs  a  distributed  architecture  similar  to  that 
presented in Figure 2, it is obvious that the bandwidth and resources consumption rate 
at the victim increase very rapidly. Furthermore, it should be noted that the attacker 
featly spoofs all query requests to include a specific type of DNS resource in order the 
authoritative  DNS  server  to  generate  large  responses.  This  task  could  be  managed 
either by discovering which DNS servers store RRs that when requested create large 
responses  or  by  compromising  a  DNS  server  and  deliberately  include  a  specific 
record – also known as the amplification record - that will create a large response. An 
example  of  this  technique,  exploiting  large  TXT  records  which  is  introduced  in 
Extended DNS (EDNS) [9]. As stated in [17] by combining different response types, 
the amplification effect can reach up to a factor higher than 60. After that, the attacker 
collects a list of open recursive name servers that will recursively query for, and then 
return the amplification record he/she created. Even a list of known name servers may 
be more than adequate. As stated in [17] there is a 75% chance that any known name 
server is an open resolver too, thus a copy of a TLD zone file may be sufficient. A 
detailed description of DNS amplification attacks is presented in [6]. 
Fig. 2 General Architecture of a DNS amplification attack 
2.2   Protection Mechanisms 
In  this  section  we  present  known  countermeasures  to  defend  against  amplification 
attacks. Generally, in order to shield against DNS DDoS attacks different protection 
layers must be deployed. Having these mechanisms acting simultaneously, it is very 
possible to build a more secure, redundant and robust DNS infrastructure and shield 
our network against this category of attacks. 
DNS employs UDP to transport requests and responses. As a result, the malicious 
user is able to fabricate the appropriate spoofed DNS requests very easily. Thus, as a 
first  level  of  protection  it  should  be  introduced  a  spoof  detection  /  prevention 
mechanism like the ones proposed in [10]-[13]. In some cases such mechanisms are 
implemented as part of a stateful firewall as well. Moreover, to mitigate DNS cache 
poisoning and Man-In-The-Middle (MITM) attacks, which usually are launched at the 
early stages of a DNS amplification attack, additional security mechanisms should be 
employed.  These  are  necessary  in  order  to  ensure  the  integrity  and  origin 
authentication  of  the  DNS  data  that  reside  either  in  RR  cache  or  in  the  zone  file 
[10],[14]. 
Apart from well accepted practices to securely configure DNS servers [19], another 
effective remediation, at least against outsiders, is to disable open recursion on name 
servers  from  external  sources  and  only  accepting  recursive  DNS  originating  from 
trusted  sources.  This  tactic  substantially  diminishes  the  amplification  vector  [18]. 
Available  data  until  now  reveal  that  the  majority  of  DNS  servers  operate  as  open 
recursive  servers.  The  Measurement  Factory  [17]  reports  that  more  than  75%  of 
domain  name  servers  of  approximately  1.3  million  sampled  permit  recursive  name 
service  to  arbitrary  querying  sources.  This  leaves  abandoned  name  servers  to  both 
cache poisoning and DoS attacks. 
 2.3   Limitations 
Although the generic countermeasures and remedies referred in previous subsection 
could decrease the chances of potential attackers to launch a flooding attack, are not 
able  to  provide  an  effective  solution  against  DNS  amplification  attacks.  More 
specifically, it is well known that these mechanisms are employed only by a limited 
number  of  DNS  servers.  As  a  result  many  DNS  servers  are  unprotected  or 
misconfigured,  which  in  turn  are  exploited  by  aggressors  in  order  to  amplify  the 
hazardous  effects  of  flooding  attacks  as  described  previously.  Moreover,  solutions 
like  DNS  Secure  [10]  do  not  offer  an  efficient  countermeasure  against  flooding 
attacks as already argued in [15]. In addition, these mechanisms do not provide any 
security  against  (malevolent)  insiders,  who  are  responsible  for  many  security 
incidents.  On  the  top  of  that,  the  traffic  generated  in  a  DNS  amplification  attack 
seems to be normal, so the prevention of such an attack could not be achieved only 
with  the  employment  of  the  security  mechanisms  presented  in  the  previous  section. 
Therefore,  the  introduction  of  a  specific  detection  /  prevention  mechanism  against 
DNS amplification attacks should be considered mandatory. 
To the best of our knowledge until now the only method that specifically addresses 
DNS  amplification  attacks  is  the  DNS-Guard  one  [20].  This  approach  involves 
several policies that generate some form of cookies for a DNS server to implement 
origin authentication; that is to verify whether each incoming request is indeed from 
where the request datagram says it is from. However, the main problem with DNS-
Guard is that it introduces large traffic and delay overhead and mandates wide scale 
deployment. 
3.   The proposed solution 
Hereunder  we  describe  and  evaluate  the  proposed  solution.  It  is  stressed  that  our 
mechanism  is  primarily  designed  to  effectively  protect  local  DNS  servers.  As 
mentioned  in  the  introduction  local  network  hosts  are  also  protected  but  indirectly. 
Actually, some bogus DNS replies will reach the host-victim at the first stages of the 
attack, but as soon as an alert is generated all subsequent falsified DNS replies will be 
dropped at the perimeter. In any case protecting local network hosts is rather a simple 
task  to  accomplish.  That  is,  having  the  firewall  to  only  accept  traffic  coming  from 
trusted DNS servers. However, this solution is not possible to implement in a DNS 
server;  blocking  the  53  port  would  have  undesired  implications  to  the  DNS  service 
itself.  
3.1   Description 
The proposed mechanism is based on the one-to-one strict mapping of DNS requests 
(queries)  and  responses.  Specifically,  under  DNS  normal  operation,  once  a  client 
requests  a  name  resolution  sends  a  request  towards  the  appropriate  DNS,  which  is 
responsible  to  create  the  corresponding  response.  Nevertheless,  when  a  DNS 
amplification  attack  is  taking  place,  the  targeted  DNS  server  receives  responses 
without having previously sent out the corresponding request. As a result, such data, 
characterised as orphan pairs, must be immediately classified as suspicious. 
Based  on  the  aforementioned  simple  but  fruitful  idea,  we  employ  a  monitor  to 
record both DNS requests and responses using the IPtraf tool [16]. At the same time, 
our  custom-made  Hypertext  Preprocessor  (PHP)  based 
tool,  namely  DNS 
Amplification  Attacks  Detector  (DAAD),  process  on-the-fly  the  captured  network 
data,  which  are  stored  in  the  appropriate  MySQL  database  (see  Table  1  &  2). 
Thereby, the incoming DNS traffic is classified as suspicious or not and generate the 
corresponding alert in the case of an undergoing attack. Note, for example, that the 
second line of Table 2 (response) matches with the first line of Table 1 (request). The 
architecture  employed  by  the  proposed  scheme  is  depicted  in  Figure  3,  while  the 
overall DAAD’s detection logic is presented in Figure 4. The interface of the DAAD 
tool is publicly accessible at: http://f6tmos.samos.aegean.gr/~tmos  (username: user & 
password:  kalimera!).  All  the  corresponding  source  code  is  also  available  by  the 
authors upon request. 
P