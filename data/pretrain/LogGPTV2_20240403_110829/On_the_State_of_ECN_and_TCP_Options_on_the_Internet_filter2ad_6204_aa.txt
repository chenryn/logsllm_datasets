title:On the State of ECN and TCP Options on the Internet
author:Mirja K&quot;uhlewind and
Sebastian Neuner and
Brian Trammell
On the State of ECN and TCP Options
on the Internet(cid:2)
Mirja K¨uhlewind1, Sebastian Neuner1, and Brian Trammell2
1 Institute of Communication Networks and Computer Engineering (IKR)
University of Stuttgart, Germany
2 Communication Systems Group, ETH Z¨urich, Switzerland
Abstract. Explicit Congestion Notiﬁcation (ECN) is a TCP/IP exten-
sion that can avoid packet loss and thus improve network performance.
Though standardized in 2001, it is barely used in today’s Internet. This
study, following on previous active measurement studies over the past
decade, shows marked and continued increase in the deployment of ECN-
capable servers, and usability of ECN on the majority of paths to such
servers. We additionally present new measurements of ECN on IPv6,
passive observation of actual ECN usage from ﬂow data, and observa-
tions on other congestion-relevant TCP options (SACK, Timestamps and
Window Scaling). We further present initial work on burst loss metrics
for loss-based congestion control following from our ﬁndings.
1
Introduction
Since the initial design of TCP, there have been a number of extensions de-
signed to improve its throughput and congestion control characteristics. Explicit
Congestion Notiﬁcation (ECN) is a TCP/IP extension that allows congestion
signaling without packet loss. Though it has been shown to have performance
beneﬁts [1] and has been a standard since 2001 [2,3], ECN deployment lags sig-
niﬁcantly. Initial deployment problems where middleboxes cleared the ECN IP
bits or even dropped packets indicating ECN-capability, as well as ﬁrewalls that
would reset ECN-capable connections [4], led to mistrust of ECN.
In this work, we examine how much this situation has improved, adding an-
other datapoint to a series of active measurements of ECN usage going back a
decade. We also measured the usage of three other congestion-control-relevant
TCP options: Selective Acknowledgment (SACK) [5], Timestamps (TS), and
Window Scale (WS) [6]. SACK allows more precise signaling of loss, TS im-
proves round-trip-time estimation, and WS allows a larger receiver windows.
Our measurement methodology consists of active probing of the ECN-readiness
of a large set of popular web-servers (section 3.1) as well as passive measure-
ment of ECN usage from ﬂow data collected on a national-scale research and
education network (section 3.2).
(cid:2) This work is partly funded by ETICS and mPlane, FP7 research projects supported
by the EU. Thanks to SWITCH for the ﬂow data used in this study.
M. Roughan and R. Chang (Eds.) PAM 2013, LNCS 7799, pp. 135–144, 2013.
c(cid:2) Springer-Verlag Berlin Heidelberg 2013
136
M. K¨uhlewind, S. Neuner, and B. Trammell
Table 1. ECN implementation status
Table 2. History of ECN and options
deployment
year
OS
version
2007
Microsoft
Windows
2007 Mac OS X
2006 Cisco IOS
2001
1999
Linux
Linux
Server 2008,
7, Vista
10.5
12.2(8)T
2.4 (full support)
2.3 (router support)
Reference
Date ECN SACK TSOPT
Medina ea. [7] 2000 1.1% 28%
Medina ea. [7] 2004 2.1% 68%
-
Langley ea. [8] 2008 1.06%
2011 17.2%
-
Bauer ea. [9]
-
30%
-
-
Deployment of ECN and related TCP options has been periodically stud-
ied in the literature over the past decade [7,8,9]; the most relevant results for
the present work are summarized in Table 2. Bauer et al [9] probed the same
set of servers as in the present work, so these results are directly comparable.
Also related are measurements on TCP extensibility, which focus on middlebox
treatment of packets with TCP options. Here ﬁndings vary between 0.17% [8]
and 70% [9] of hosts dropping packets with unknown options, and 4–14% of
middleboxes dropping such packets [10].
We ﬁnd a recent acceleration in deployment of ECN-capable servers (sec-
tion 4.1) and greater ECN support on IPv6-enabled servers (section 4.2). We
compare this to actual ECN usage, passively measured from ﬂow data captured
from the border of a national-scale network, and ﬁnd that while ECN is more
frequently deployed, it is still seldom used (section 4.3).
In section 5, we deﬁne a metric for burst loss taking into account the peridic
probing of congestion-control algorithms, and show that diﬀerent types of traﬃc
have diﬀerent burst loss characteristics. Given the continued lag of ECN usage,
we advance this initial work as a way to better understand loss dynamics and
its relation to application behavior. Section 6 presents our conclusions.
2 Explicit Congestion Notiﬁcation (ECN): A Review
ECN allows routers using active queue management (AQM) (e.g., Random Early
Detection (RED)) to mark packets in case of congestion instead of dropping
them. Two bits in the IP header provide four possible marks: No-ECN (00),
Congestion Experienced (CE, 11), and two codepoints for ECN-Capable Trans-
port (ECT(0), 01; and ECT(1), 10). An ECN-capable sender sets ECT(0) or
ECT(1), which can be changed to CE by a router to signal congestion.
ECN uses two additional ﬂags in the TCP header: ECN-Echo (ECE) is set
on all packets from the receiver back to the sender to signal the arrival of a
CE-marked packet until the sender sets Congestion Window Reduced (CWR)
to acknowledge the ECE. These ﬂags are also used to negotiate ECN usage:
a connection initiator requests ECN by setting ECE and CWR on the initial
SYN, and the responder acknowledges by setting ECE on the SYN/ACK. After
successfully completing the negotiation, the senders can set an ECT codepoint
on all subsequent packets over the connection.
On the State of ECN and TCP Options on the Internet
137
Today, ECN is implemented in most operating systems (see Table 1). However
even if enabled by default, it is often in “server mode” only: ECN will be ne-
gotiated if requested by a remote node initiating a connection, but connections
opened by the node will not attempt to negotiate ECN usage.
3 Measurement Methodology
3.1 Active Probing of Web Servers
We measure ECN-readiness and usage of options by sending a TCP SYN with
ECN negotiation and the SACK, TS, and WS options enabled to a target server,
immediately closing the connection by sending a FIN. The resulting SYN/ACK
responses are captured using tcpdump and evaluated oﬄine using scapy1, an
open source Python-based framework for manipulation and evaluation of TCP
packets. The target servers were selected from the Alexa Top 100,000 webservers
list, as resolved by the Google public DNS server. If more than one IP address
was resolved, we choose the ﬁrst under the assumption that all servers operated
by one provider have the same conﬁguration.
We implemented a tool, also based on scapy, to determine whether ECN is
usable on a path to a target. First, it generates a SYN with ECN negotiation. If
the target is ECN-capable, it then sends one data segment with the CE codepoint
set, and evaluates whether ECE was set on the corresponding ACK.
We evaluated the IP Time-to-Live (TTL) of the response as an estimate of
the operating system in use at the target. When the TTL is smaller than 64,
we assume Linux/BSD, 128 for Windows, and 255 for Solaris. Moreover, we
checked the number of hops to be smaller than 64 based on ICMP traceroute.
Anyway, this is not a reliable indication, as the initial TTL is conﬁgurable; one
conspicuous exception is Google, which generally uses Linux but a TTL of 255.
The measurements were performed on a Linux host located in the Univer-
sity of Stuttgart network, connected via the Baden-W¨urttemberg extended LAN
(BelW¨u) to the DE-CIX Internet exchange in Frankfurt. We also performed these
measurements over two German mobile network providers (O2 and Vodafone)
and got similar results for both.
3.2 Analysis of Aggregated Flow Data
Though active measurement shows increasing deployment of ECN-ready web
servers, this gives no information on the actual use of ECN in the network.
To measure this, we examine NetFlow version 9 ﬂow data collected from the
border of SWITCH2, the Swiss national research and education network. This
network originates about 2.4M IPv4 addresses (the rough equivalent of a /11),
with typical daily traﬃc volumes on the order of 100 TB, and contains both
client machines as well as servers for universities.
1
2
http://www.secdev.org/projects/scapy
http://www.switch.ch/
138
M. K¨uhlewind, S. Neuner, and B. Trammell
All
TTL  128
hosts 77969 (100.00 %) 57610 (73.89 %) 12794 (16.41 %) 7590
(9.73 %)
hosts 77969 (100.00 %) 57610 (100.00 %) 12794 (100.00 %) 7590 (100.00 %)
(1.88 %)
ECN 19616 (25.16 %) 18954 (32.90 %)
SACK 69037 (88.54 %) 52409 (90.97 %) 11506 (89.93 %) 5145 (67.79 %)
TSOPT 65307 (83.76 %) 49667 (86.21 %) 10729 (83.86 %) 4928 (64.93 %)
WSOPT 68419 (87.75 %) 53137 (92.24 %) 10047 (78.53 %) 5258 (69.28 %)
(4.07 %) 143
521
All
TTL  128
hosts 77854 (100.00 %) 57651 (74.05 %) 12471 (16.02 %) 7769
(9.98 %)
hosts 77854 (100.00 %) 57651 (100.00 %) 12471 (100.00 %) 7769 (100.00 %)
ECN 22948 (29.48 %) 22193 (38.50 %)
(1.87 %)
SACK 69334 (89.06 %) 52783 (91.56 %) 11226 (90.02 %) 5353 (68.90 %)
TSOPT 65220 (83.77 %) 49749 (86.29 %) 10379 (83.23 %) 5112 (65.80 %)
WSOPT 68684 (88.22 %) 53420 (92.66 %) 9846 (78.95 %) 5446 (70.10 %)
(4.94 %) 145
616
Our methodology focuses on counting distinct sources, to give us a number
comparable to that produced by active measurements. Our ﬂow data unfortu-
nately does not include the TCP ﬂags used for ECN negotiation3; however, it
does include the ECN Field in the IP header for the ﬁrst packet observed in
each ﬂow record. Since the ﬁrst packet in a ECN TCP ﬂow is not ECN-capable,
we observe continued ﬂows: records created after an existing record for a long-
lived ﬂow is exported on active timeout (in the measured data, 300s). These
capture the ECN ﬁeld from mid-ﬂow. So, in a given time interval, we count any
source address appearing in at least one continued TCP ﬂow record with either
the ECT(0) or ECT(1) codepoint set as an ECN-capable source. We note this
presents only a lower bound for ECN-capable sources, as it will not count any
source which never sends a ﬂow longer than the active timeout.
4 Results
4.1 ECN and TCP Option Deployment
We ﬁrst measured ECN and TCP option support in web servers in April 2012.
As shown in Table 3, 25.16 % of web servers negotiated ECN, a substantial
increase over that measured by Bauer [9] using a compatible methodology and
comparable set of hosts. We measured again in August 2012 (Table 4) and found
a further increase to 29.48 % using the current Alexa list, or 29.35 % using the
set of targets probed in April. We presume that operating system upgrades are
3 While the devices can be conﬁgured to export ECE and CWR, they are always
exported as zero, due to apparent implementation faults.
On the State of ECN and TCP Options on the Internet
139
the primary cause of increased ECN deployment, as ECN has been supported
by all major OSes only since 2007 (see Table 1).
We ﬁnd that ECN is still less supported than SACK, TS, and WS, though
these latter three show no discernible trend between April and August. We also
ﬁnd that ECN is far better supported on Linux hosts (TTLs less than 64) than
on Windows (TTL between 64 and 128) or Solaris (TTL greater than 128)4.
To validate the start TTL estimates, we checked the path length of the top
10,000 servers to ensure less than 64 hops. The minimum path length was 10
hops, as there are 9 hops within the BelW¨u network; the median was 17.47 hops,
the maximum 29, and the mode 13; further investigations are needed on this last
point to check for caching or CDNs in Frankfurt.
With respect to ECN usability on the path, we tested 22487 hosts in Au-
gust 2012 which had negotiated ECN. Of these, 20441 (90.9 %) sent an ECE in
response to an CE. 1846 (8.2 %) replied with an ACK without ECE, and 200
(0.9 %) sent no ACK at all. These 9 % of cases where ECN is not usable represent
middleboxes which clear CE, which drop packets with CE set, or implementa-
tion errors at the endpoints. Additionally, experiments on two UMTS network
showed 100 % ECN support but 0 % ECN feedback; we presume due to an ECN-
capable HTTP proxy setup and clearing of CE in the mobile network. In any
case, these observations show that middleboxes can still signiﬁcantly aﬀect the
end-to-end use of ECN in the network.
We observed one curiosity in our options measurements: with our latest mea-
surement run in September 2012 (31.2 % ECN-capable), we also probed all
servers without ECN or any options, to check general responsiveness. We found
429 more unique hosts responding to a SYN without any TCP extension. 828
out of 78204 unique hosts (1.06 %) attempted to use SACK in the SYN/ACK
even if not requested. 294 (0.38 %) similarly attempted to use WS, most of them
presumably Windows hosts. None responded with TS or ECT. Moreover, while
probing facebook.com we observed oscillation in RTT between about 100 ms
and 150 ms, with an irregular period on the order of hours. This is indicative of
load balancing between data centers on the (US) east and west coasts.
4.2 ECN Deployment on IPv6
We investigated the use of ECN over IPv6, in April and August as well as during
the World IPv6 Launch event on 6 June 2012; the results are shown in Table 5.
Here we ﬁnd more support for ECN (47.52 %) than over IPv4, as well as more
support for other TCP options, but without a comparable increase over time.
There was a signiﬁcant increase in the proportion of Alexa Top 100,000 web
servers supporting IPv6 after World IPv6 launch, though only 2.28% support
IPv6 as of August 2012. Most IPv6 servers have been installed within the last
two years, so we expect greater ECN support in IPv6: these systems should be
more up-to-date than average.
4 As noted above, Google uses an initial TTL of 255, but disables ECN.
140
M. K¨uhlewind, S. Neuner, and B. Trammell
Table 5. ECN and options deployment on IPv6
IPv4 Aug’12
IPv6 April’12
IPv6 June’12
IPv6 Aug’12
responding hosts 93573
980
1819
2132
unique hosts 77854 (100.00 %) 785 (100.00 %) 1075 (100.00 %) 1208 (100.00 %)
ECN 22948 (29.48 %) 370 (47.13 %) 522 (48.56 %) 574 (47.52 %)
SACK 69334 (89.06 %) 733 (93.38 %) 1006 (93.58 %) 1093 (90.48 %)
TSOPT 65220 (83.77 %) 713 (90.83 %) 986 (91.72 %) 1049 (86.84 %)
WSOPT 68684 (88.22 %) 734 (93.50 %) 1011 (94.05 %) 1136 (94.04 %)
4.3 Passive Measurement of ECN Adoption
Using the methodology in section 3.2 we examine data for the full day Wednes-
day, August 29, 2012, from midnight local time, from four of six border routers.
Our results are not particularly surprising: while hosts and devices supporting
ECN are seeing increased deployment, we conﬁrm that ECN is mostly not used.
We observed 11,039 total distinct ECN-capable IPv4 sources. This is 0.774%