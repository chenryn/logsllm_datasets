title:A Method for Verifying Privacy-Type Properties: The Unbounded Case
author:Lucca Hirschi and
David Baelde and
St&apos;ephanie Delaune
2016 IEEE Symposium on Security and Privacy
2016 IEEE Symposium on Security and Privacy
A Method for Verifying Privacy-Type Properties:
The Unbounded Case
Lucca Hirschi, David Baelde and St´ephanie Delaune
LSV, CNRS & ENS Cachan, Universit´e Paris-Saclay, France
Abstract—In this paper, we consider the problem of verifying
anonymity and unlinkability in the symbolic model, where
protocols are represented as processes in a variant of the applied
pi calculus notably used in the ProVerif tool. Existing tools and
techniques do not allow one to verify directly these properties,
expressed as behavioral equivalences. We propose a different
approach: we design two conditions on protocols which are
sufﬁcient to ensure anonymity and unlinkability, and which can
then be effectively checked automatically using ProVerif. Our
two conditions correspond to two broad classes of attacks on
unlinkability, corresponding to data and control-ﬂow leaks.
This theoretical result is general enough to apply to a wide class
of protocols. In particular, we apply our techniques to provide the
ﬁrst formal security proof of the BAC protocol (e-passport). Our
work has also lead to the discovery of new attacks, including one
on the LAK protocol (RFID authentication) which was previously
claimed to be unlinkable (in a weak sense) and one on the PACE
protocol (e-passport).
I. INTRODUCTION
Security protocols aim at securing communications over
various types of insecure networks (e.g. web, wireless devices)
where dishonest users may listen to communications and
interfere with them. A secure communication has a different
meaning depending on the underlying application. It ranges
from the conﬁdentiality of data (medical ﬁles, secret keys,
etc.) to, e.g. veriﬁability in electronic voting systems. Another
example of a security notion is privacy. In this paper, we focus
on two privacy-related properties, namely unlinkability (some-
times called untraceability), and anonymity. These two notions
are informally deﬁned in the ISO/IEC standard 15408 [1] as
follows:
● Unlinkability aims at ensuring that a user may make
multiple uses of a service or resource without others being
able to link these uses together.
● Anonymity aims at ensuring that a user may use a service
or resource without disclosing its identity.
Both are critical for instance for Radio-Frequency Identiﬁca-
tion Devices (RFID) and are thus extensively studied in that
context (see, e.g. [2] for a survey of attacks on this type of
protocols), but they are obviously not limited to it.
One extremely successful approach when designing and
analyzing security protocols is the use of formal veriﬁcation,
i.e. the development of rigorous frameworks and techniques
to analyze protocols. This approach has notably lead to the
discovery of a ﬂaw in the Single-Sign-On protocol used
This work has been partially supported by the project JCJC VIP ANR-11-
JS02-006 and the ANR project Sequoia ANR-14-CE28-0030-01.
e.g. by Google Apps. It has been shown that a malicious
application could very easily access to any other application
(e.g. Gmail or Google Calendar) of their users [3]. This ﬂaw
has been found when analyzing the protocol using formal
methods, abstracting messages by a term algebra and using the
Avantssar validation platform. Another example is a ﬂaw on
vote-privacy discovered during the formal and manual analysis
of an electronic voting protocol [4]. All these results have been
obtained using formal symbolic models, where most of the
cryptographic details are ignored using abstract structures. The
techniques used in symbolic models have become mature and
several tools for protocol veriﬁcation are nowadays available,
e.g. the Avantssar platform [5], the Tamarin prover [6], and
the ProVerif tool [7].
if, for any execution,
Unfortunately, most of these results and tools focus on
trace properties, that is, statements that something bad never
occurs on any execution trace of a protocol. Secrecy and
authentication are typical examples of trace properties: a data
remains conﬁdential
the attacker is
not able to produce the data. But privacy properties like
unlinkability and anonymity typically cannot be deﬁned as
trace properties. Instead, they are usually deﬁned as the fact
that an observer cannot distinguish between two situations,
which requires a notion of behavioral equivalence. Roughly,
two protocols are equivalent if an attacker cannot observe
any difference between them. Based on such a notion of
equivalence, several deﬁnitions of privacy-type properties have
been proposed (e.g. [8], [9] for unlinkability, and [10], [11] for
vote-privacy). In this paper, we consider the well-established
deﬁnitions of strong unlinkability and anonymity as deﬁned
in [8]. They have notably been used to establish privacy for
various protocols either by hand or using ad hoc encodings
(e.g. eHealth protocol [12], mobile telephony [13], [14]). We
provide a brief comparison with alternative deﬁnitions in
Section III-B.
Considering an unbounded number of sessions, the prob-
lem of deciding whether a protocol satisﬁes an equivalence
property is undecidable even for a very limited fragment of
protocols (see, e.g. [15]). Bounding the number of sessions
sufﬁces to retrieve decidability for standard primitives (see,
e.g. [16], [17]). However, analyzing a protocol for a ﬁxed
(often low) number of sessions does not allow to prove
security. Moreover,
in the case of equivalence properties,
existing tools scale badly and can only analyze protocols for
a very limited number of sessions, typically 2 or 3. Another
2375-1207/16 $31.00 © 2016 IEEE
© 2016, Lucca Hirschi. Under license to IEEE.
DOI 10.1109/SP.2016.40
DOI 10.1109/SP.2016.40
564
564
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:24 UTC from IEEE Xplore.  Restrictions apply. 
approach consists in implementing a procedure that is not
guaranteed to terminate. This is in particular the case of
ProVerif, a well-established tool for checking security of pro-
tocols. ProVerif is able to check a strong notion of equivalence
(called diff-equivalence) between processes that share the same
structure. Despite recent
improvements on diff-equivalence
checking [18] intended to prove unlinkability of the BAC
protocol (used in e-passport), ProVerif still cannot be used
off-the-shelf to establish unlinkability properties, and therefore
cannot conclude on the case studies presented in Section VII.
Recently, similar approaches have been implemented in two
other tools, namely Tamarin [19] and Maude−NPA [20]. They
are based on a notion of diff-equivalence, and therefore suffer
from the same drawbacks.
In this paper, we follow a different approach. We aim
at proposing sufﬁcient conditions that can be automatically
checked, and that imply unlinkability and anonymity of the
protocol under study. This approach is in the same spirit as
the one presented in [9]. However, [9] only considers a very
restricted class of protocols (single-step protocols that only
use hash functions), while we target more complex protocols.
The success of our solution will be measured by confronting
it to many case studies.
Our contribution: We identify a large class of 2-party
protocols (simple else branches, arbitrary cryptographic prim-
itives) and we devise two conditions that imply unlinkability
and anonymity for an unbounded number of sessions. We
show how these two conditions can be automatically checked
using the ProVerif
tool, and we provide tool support for
that. We have analyzed several protocols, among them the
Basic Access Control (BAC) protocol as well as the Password
Authenticated Connection Establishment (PACE) protocol that
are both used in e-passports. We notably establish the ﬁrst
proof of unlinkability for the BAC protocol followed by the
Passive Authentication (PA) and Active Authentication (AA)
protocols. We also report on an attack that we found on the
PACE protocol, and another one that we found on the LAK
protocol whereas it is claimed untraceable in [2]. It happens
that our conditions are rather tight: we provide an attack every
time one of them is not satisﬁed.
We now give an intuitive overview of these two conditions.
In order to do this, assume that we want to design a mutual
authentication protocol between a tag T and a reader R based
on symmetric encryption, and we want this protocol to be
unlinkable. We note {m}k the symmetric encryption of a
message m with a key k and we assume that k is a symmetric
key shared between T and R.
A ﬁrst attempt to design such a protocol is presented using
Alice & Bob notation as follows (nR is a fresh nonce):
1. R → T ∶ nR
2. T → R ∶ {nR}k
This ﬁrst attempt based on a challenge-response scheme is
actually linkable. Indeed, an active attacker who systematically
intercepts the nonce nR and replaces it by a constant will be
565565
able to infer whether the same tag has been used in different
sessions or not by comparing the answers he receives. Here,
the tag is linkable because, for a certain behavior (possibly
malicious) of the attacker, some relations between messages
leak information about the agents that are involved in the
execution. Our ﬁrst condition, namely frame opacity, actually
checks that all outputted messages have only trivial relations
that can therefore not be exploited by the attacker.
Our second attempt takes the previous attack into account
and randomizes the tag’s response and should achieve mutual
authentication by requiring that the reader must answer to the
challenge nT . This protocol can be as follows:
1. R → T ∶ nR
2. T → R ∶ {nR, nT}k
3. R → T ∶ {nT}k
Here, Alice & Bob notation shows its limit. It does not specify
how the reader and the tag are supposed to check that the
messages they received are of the expected form, and how they
should react when the messages are not well formed. This has
to be precisely deﬁned, since unlinkability depends on it. For
instance, assume the tag does not check that the message he
receives at step 3 contains nT , and aborts the session if the
received message in not encrypted with its own k. In such an
implementation, an active attacker can eavesdrop a message
{nT}k sent by R to a tag T , and try to inject this message at
the third step of another session played by T ′. The tag T ′ will
react by either aborting or by continuing the execution of this
protocol. Depending on the reaction of the tag, the attacker
will be able to infer if T and T ′ are the same tag or not.
In this example, the attacker adopts a malicious behavior
that is not detected immediately by the tag who keeps exe-
cuting the protocol. The fact that the tag passes successfully
a conditional reveals crucial information about the agents that
are involved in the execution. Our second condition, namely
well-authentication, basically requires that when an execution
deviates from the honest one, the agents that are involved
cannot successfully pass a conditional.
Our main theorem states that these two conditions, frame
opacity and well-authentication, are actually sufﬁcient to en-
sure both unlinkability and anonymity. This theorem is of
interest as our two conditions are fundamentally simpler than
the targeted properties: frame opacity can be expressed using
diff-equivalence and well-authentication is a trace property.
In fact,
they are both in the scope of existing automatic
veriﬁcation tools like ProVerif.
Outline: In Section II, we present our model inspired
from the applied pi calculus as well as the notion of trace
equivalence. We then deﬁne in Section III the class of proto-
cols and the formal deﬁnitions of unlinkability and anonymity
we study in this paper. Our two conditions (frame opacity
and well-authentication) and our main theorem are presented
in Section IV. Section V is dedicated to the proof of that
result. Finally, we discuss how to mechanize the veriﬁcation
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:24 UTC from IEEE Xplore.  Restrictions apply. 
of our conditions in Section VI and present our case studies
in Section VII, before concluding in Section VIII.
II. MODEL
We shall model security protocols using a process algebra
inspired from the applied pi calculus [21]. More speciﬁcally,
we consider the calculus of Blanchet et al. [22], which is used
in the ProVerif tool. Participants are modeled as processes, and
the communication between them is modeled by means of the
exchange of messages that are represented by a term algebra.
A. Term algebra
We now present term algebras, which will be used to model
messages built and manipulated using various cryptographic
primitives. We consider an inﬁnite set N of names which
and disjoint sets of variables, denoted X and W. Variables
in X will typically be used to refer to unknown parts of
messages expected by participants, while variables in W will
are used to represent keys, and nonces; and two inﬁnite
be used to store messages learned by the attacker. We assume
a signature Σ, i.e. a set of function symbols together with
their arity. The elements of Σ are split into constructor and
destructor symbols, i.e. Σ= Σc⊔ Σd.
Given a signatureF, and a set of initial data A, we denote by
T (F, A) the set of terms built from elements of A by applying
function symbols in F. Terms of T (Σc,N∪X) will be called
constructor terms. We denote vars(u) the set of variables that
is ground, i.e. such that vars(u) = ∅. We denote by x, n, u
written uσ, and we denote dom(σ) its domain. The positions
a (possibly empty) sequence of variables, names, and terms
respectively. The application of a substitution σ to a term u is
occur in a term u. A message is a constructor term u that
of a term are deﬁned as usual.
Example 1: Consider the signature
Σ={enc, dec, ⟨⟩, π1, π2, ⊕, 0, eq, ok}.
The symbols enc and dec of arity 2 represent symmetric
encryption and decryption. Pairing is modeled using ⟨ ⟩ of
both of arity 1. The function symbol ⊕ of arity 2 and the
arity 2, whereas projection functions are denoted π1 and π2,
constant 0 are used to model the exclusive or operator. Finally,
we consider the symbol eq of arity 2 to model equality test,
as well as the constant symbol ok. This signature is split into
two parts: Σc ={enc,⟨⟩,⊕, 0, ok}, and Σd ={dec, π1, π2, eq}.
As in the process calculus presented in [22], constructor
terms are subject to an equational theory; this has proved
very useful for modeling algebraic properties of cryptographic
primitives (see e.g. [23] for a survey). Formally, we consider
a congruence =E on T (Σc,N ∪ X), generated from a set
of equations E over T (Σc,X). Thus, =E is closed under
that there exist u, v such that u≠E v.
substitutions and under bijective renaming. We ﬁnally assume