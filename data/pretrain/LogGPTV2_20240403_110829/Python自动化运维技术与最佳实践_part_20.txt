中，最后在需要的地方include进来即可，示例如下：
[ tasks/foo.yml 】
 possibly saved as tasks/foo.yml
nane: placeholder foo
conmand: /bin/foo
nanei placeholder bar
conmand: /bin/bar
然后就可以在使用的 playbook中include进来，如：
tasks:
- Lnclude: tasks/foo.ym1
当然，也可以将变量传递到包含文件当中，这称为“参数包含”。
如在部署多个WordPress 的情况下，可以根据不同用户单独部署WordPress的任务，且
引用单个wordpress.yml文件，可以这样写：
ta8k8:
- inelude: wordpress.yml user=timmy
---
## Page 157
136第二部分高级
- inelude: vordpress.ym1 user=alice
- include1 wordpres8.yml user=bob
注意，1.4或更高版本可支持以Python的字典、列表的传递参数形式，如：
tasks1
-{inelude: wordpress.yml, user: tinny, ssh_keys: ['keys/one.txt', *keys/
(1,3x3*0
使用这两种方法都进行变量传递，然后在包含文件中通过使用（{user进行变量引用。
将处理程序（handlers）放到包含文件中是一个好的做法，比如重启Apache的任务，
如下：
[handlers/handlers.yml ]
 this might be Ln a file 1ike handlers/handlers.ym1
name: restart apache
service: name=apache state=restarted
需要时可以进行引用，像这样：
handlers:
- include: handlers/handlers ym1
9.7.2角色
现在我们已经了解了变量、任务、处理程序的定义，有什么方法更好地进行组织或抽
象，让其复用性更强、功能更具模块化？答案就是角色。角色是Ansible定制好的一种标准
规范，以不同级别目录层次及文件对角色、变量、任务、处理程序等进行拆分，为后续功能
扩展、可维护性打下基础。一个典型角色目录结构的示例如下：
site-yn1
webservers.ym1
fooservers.yn]
roles/
comnon/
files/
tenplates/
task8/
handlers/
vars/
neta/
files/
---
## Page 158
第9章集中化管理平台AnsIble详解137
tenplates/
tasks/
handlers/
vars/
meta/
在playbook是这样引用的：
[ site.yml ]
- hosts: vebservers
roles1
= common
角色定制以下规范，其中x为角色名。
口如roles/x/tasks/main.yml文件存在，其中列出的任务将被添加到执行队列；
口如roles/x/handlers/main.yml文件存在，其中所列的处理程序将被添加到执行队列；
口如roles/x/vars/main.yml文件存在，其中列出的变量将被添加到执行队列；
口如roles/x/meta/main.yml文件存在，所列任何作用的依赖关系将被添加到角色的列表
（1.3及更高版本）；
口任何副本任务可以引用roles/x/files/无需写路径，默认相对或绝对引用；
口任何脚本任务可以引用roles/x/files/无需写路径，默认相对或绝对引用：
口任何模板任务可以引用文件中的roles/x/templates/无需写路径，默认相对或绝对
引用。
为了便于大家更好地理解和使用角色（role），对9.6节中的nginx软件包管理的playbook
（独立文件）修改成角色的形式，同时添加了一个公共类角色common，从角色全局作用域中
抽取出公共的部分，一般为系统的基础服务，比如ntp、iptables、selinux、Sysctl等。本示例
是针对ntp服务的管理。
（1）playbook目录结构
playbook 目录包括变量定义目录 group_vars、主机组定义文件 hosts、全局配置文件 site.
yml、角色功能目录，playbook目录结构可参考图9-5。
[ /home/test/ansible/playbooks/nginx ]
（2）定义主机组
以下定义了一个业务组webservers，成员为两台主机。
[ nginx/hosts ]
---
## Page 159
138第二部分高级篇
[vebservers]
192.168.1.21
192.168.1.22
非必选配置，默认将引用/etc/ansible/hosts的参数，角色中自定义组与主机文件将通过
"-ifile”命令行参数调用，如 ansible-playbook-i hosts 来调用。
图9-5playbook 主目录结构
（3）定义主机或组变量
定义规则见9.3节所述，group_vars为定义组变量目录，目录当中的文件名要与组名保
持一致，组变量文件定义的变量作为域只受限于该组，all代表所有主机。
[ nginx/group_vars/all ]
# Variables listed here are applicable to all host groups
ntpserver: ntp.s)tu,edu.cn
[ nginx/group_vars/webservers 】
worker_processes: 4
max_open_rl1e: 65536
num_cpus: 4
root: /data
（4）全局配置文件site.yml
下面的全局配置文件引用了两个角色块，角色的应用范围及实现功能都不一样：
---
## Page 160
第9章集中化管理平台Ansible洋解139
[ nginx/site.yml ]
name: apply common configuration to al1 nodes
hosts: a11
roles1
- common
name: configure and deploy the webservers and application code
hosts: webservers
roles1
- web
全局配置文件site.yml引用了两个角色，一个为公共类的common，另一个为web类，
分别对应nginx/common、nginx/web目录。以此类推，可以引用更多的角色，如db、nosql、
hadoop等，前提是我们先要进行定义，通常情况下一个角色对应着一个特定功能服务。通过
hosts参数来绑定角色对应的主机或组。
（5）角色common的定义
角色common 定义了handlers、tasks、templates、vars 4个功能类，分别存放处理程序、
任务列表、模板、变量的配置文件main.yml，需要注意的是，vars/main.yml中定义的变量优
先级高于/nginx/group_vars/all，可以从ansible-playbook的执行结果中得到验证。各功能块
配置文件定义如下：
[ handlers/main.yml ]
- nane: restart ntp
service: name=ntpd state=restarted
[ tasks/main.yml ]
du tTessu taueu
yun: name=ntp state=present
nanes Configure ntp file
tenplate1 src=ntp.conf .j2 dest=/etc/ntp-conf
notify: restart ntp
nane: Start the ntp service
service: mame=ntpd state=started enabled=trve
nanei test to see if selinux is running
comnand: getenforce
register: sestatus
changed_when: false
---
## Page 161
140第二部分高级篇
其中template:src=ntp.confj2引用模板时无需写路径，默认在上级的templates目录中
查找。
[ templates/ntp.conf.j2 1
driftf1e /var/1ib/atp/drift
restrict 127.0.0.1
restrict -6 1:1
((20A1esdau 1) 1eA19s
Includefile /etc/ntp/crypto/pv
keys /etc/ntp/keys
此处（{ntpserver）}}将引|用 vars/main.yml定义的 ntpserver变量。
[ vars/main.yml ]
 Variables 1isted here are applicable to all host groups
==
ntpserver: 210.72.145.44
（6）角色web的定义
角色web定义了handlers、tasks、templates三个功能类，基本上是9.6节中的nginx管
理playbook对应定义功能段打散后的内容。具体功能块配置文件定义如下：
[ handlers/main.yml 
nane: restart nginx
service: name=nginx state=restarted
[ tasks/main.yml ]
- name: ensure nginx is at the latest version
yum: pkg=nginx state=latest
name: vrite the nginx config file
template: src=nginx2.conf dest=/etc/nginx/nginx,conf
notify:
nane: ensure nginx Is running
x15u 1ae1891 -
servlce1 nane=nginx state=started
[ templates/nginx2.conf 】
worker_processes(( worker_processes 1);
user
ng1nx}
{e2 == sndounu JT $}
---
## Page 162
第9章集中化管理平台Ansible详解141
morker_cpu_affinity 01 10;
(% elif nun_cpus == 4 )
worker_cpu_affinity 1000 0100 0010 0001;
($ elif nun_cpus >= 8 $)
orker_cpu_affinity c0000001 00000010 00000100 00001000 00010000 00100000
0100000010000000
(else )
orker_cpu_affinity 1000 0100 0010 0001;
vorker_rlimit_nofile (( max_open_file 1):
($Tpue s)
具体web角色定义细节将不展开描述，可参考9.6节及common角色的说明。
（7）运行角色
#ansible-playbook -1 hosts site-yml -f 10
#cd  /hcme/test/ans ible/playbooks/nginx
运行结果如图9-6与图9-7所示。
[1.1.22]
ntp fule]
图9-6ntp 部署片段
图9-7nginx 部署片段
9.8获取远程主机系统信息：Facts
Facts是一个非常有用的组件，类似于Saltstack的Grains功能，实现获取远程主机的
---
## Page 163
142第二部分高级
系统信息，包括主机名、IP地址、操作系统、分区信息、硬件信息等，可以配合playbook
实现更加个性化、灵活的功能需求，比如在httpd.conf模板中引用Facts的主机名信息作为
ServerName 参数的值。通过运行 ansible hostname -m setup 可获取Facts 信息，例如，获取
192.168.1.21 的 Facts 信息需运行：ansible 192.168.1.21 -m setup,结果如下 :
192.168.1.21 1 8ucce88 >> (
*ansible_all_ipv4_addresses*: [
*192.168.1.21*
J,
*ansible_all_ipv6_addresses*: [
*fe80: :250:56ff: fe28: 632d*
*ans1ble_b1os_date*: "07/02/2012*,
*ansible_architecture": "x86_64",
*ansible_bio8_version": *6.00*,
*ansible_cndline*: {
*KEYBOARDTYF&": *pc”,
*KEYTABLE*: "us",
"LANG":_"en_US.UTF-8",
*SYSFoNr*: "latarcyrheb-sunl6",
"quiet": true,
"rd_NO_DH": true,
"rd_NO_LV*:true,
"rd_No_MD*: true,
"zhgb*: true,
"root* : *00ID=b8d2932457b249498402-7fd9ad64ac5a*
"ro": true,
在模板文件中这样引用Facts信息：
[[ ansible_devices.sda.model })
{[ ansible_hostname 1}
9.9变量
在实际应用场景中，我们希望一些任务、配置根据设备性能的不同而产生差异，比如使
用本机CPU核数动态配置Nginx的worker_processcs参数，可能有一组主机的应用配置文件
几乎相同，但略有不同的配置项可以引用变量。在Ansible中使用变量的目的是方便处理系
统之间的差异。
变量名的命名规则由字母、数字和下划线组合面成，变量必须以字母开头，如”fo0
---
## Page 164
第9章集中化管理平台Ansible详解143
port”是一个合法的变量，“foo5”也是可以的，“foo-port”、“foo port”、“foo.port”和“12”
都是非法的变量命名。在Inventory中定义变量见9.3.2节和9.3.3节，在playbook定义变量
见9.6节，建议回顾一下，加深记忆。
9.9.1Jinja2过滤器
Jinja2是Python下一个广泛应用的模板引擎，它的设计思想类似于Django的模板引
擎，并扩展了其语法和一系列强大的功能，官网地址：http:/jinja.pocoo.org/。下面介绍一下
Ansible 使用Jinja2强大的过滤器（Filters）功能。
使用格式：{变量名过滤方法}}。
下面是实现获取一个文件路径变量过滤出文件名的一个示例：
[{ path I basename 1)
获取文件所处的目录名：
( path I dirnane 1)
下面为一个完整的示例，实现从“/etc/profile”中过滤出文件名“profile”，并输出重定
向到/tmp/testshell文件中。
- hosts: 192.168.1.21
vars1
filename: /etc/profile
tasks:
name: *she111*
she11: echo ({filenane 1basename 11 >>/tmp/testshe11
更多的过滤方法见 http:/jinja.pocoo.org/docs/templates/#builtin-filters:
9.9.2本地Facts
我们可以通过Facts来获取目标主机的系统信息，当这些信息还不能满足我们的功能需
求时，可以通过编写自定义的Facts模块来实现。当然，还有一个更简单的实现方法，就是
通过本地Facts来实现。只需在目标设备/etc/ansible/facts.d目录定义JSON、INI或可执行文
件的JSON输出，文件扩展名要求使用“.fact”，这些文件都可以作为Ansible的本地Facts，
例如，在目标设备192.168.1.21定义三个变量，供以后playbook进行引1用。
[ /etc/ansible/facts.d/preferences.fact ]
[genera1]
---
## Page 165
144第二部分高级篇
max_user_processes=3730
max_memory_size=32
S559=91uu9do
在主控端运行 ansible 192.168.1.21-m setup -a“filter=ansible_local”可看到定义的结果，
返回结果如下：
192.168.1.21 1 success >>_[
"ansible_facts*: {
)1_teoot 9tqtgue,
"preferences":{
"general*:{
"max_memory_size*: *32*,
"max_user_processes": *3730*,
SCSS9。:saTu"uodo