32位处理器电称为“1A-32”。
---
## Page 135
7.1运行环境=操作系统+硬件
Office 2007
（应用）
Office2007的
Office2007无法正常
运行环境
运行的环境
AT兼客机
AT兼容机
（硬件）
（硬件）
图7-1操作系统和硬件共同决定应用的运行环境
CPU只能解释其自身固有的机器语言。不同的CPU能解释的机器
语言的种类也是不同的。例如，CPU有x86、MIPS、SPARC、PowerPC
等几种类型，它们各自的机器语言是完全不同的。
机器语言的程序称为本地代码（nativecode）。程序员用C语言等
编写的程序，在编写阶段仅仅是文本文件。文本文件（排除文字编码的
问题）在任何环境下都能显示和编辑。我们称之为源代码。通过对源代
码进行编译，就可以得到本地代码。在市面上出售的用于Windows的应
用软件包CD-ROM中，收录的就不是源代码，而是本地代码（图7-2）。
①MIPS是美国MIPS科技公司开发的CPU。曾出现过面向MIPS工作站的
Windows，不过现在市面上已经不再出售了。SPARC是美国SUN系统开
发的CPU。很多工作站都采用了该CPU。PowerPC是美国革果、IBM、摩
托罗拉共同开发的CPU。革果的PowerMac及IBM的工作站都采用了该
CPU。不过现在的Mac采用的是Intel的x86系列CPU。
②Windows应用程序的本地代码，通常是EXE文件及DLL文件等形式。
更多资料请关注裁的新浪薄客http：//blog
---
## Page 136
第7章程序是在何种环境中运行的
C语言源代码
inelude 
编写程序
void main() {
printt（“你好：}
编译
程序员
x86用的本机代码
040845955500359239955
F3AB 68 1C20 4200 E82E 0000
CC
00# 85 35 45+0 800
BC E8 9E 00 00 00 8B 85 5D C3
CPU负责运行
图72CPU负责解析并运行从源代码编译而来的本地代码
7.2Windows克服了CPU以外的硬件差异
计算机的硬件并不仅仅是由CPU构成的，还包括用于存储程序指
令和数据的内存、以及通过VO连接的键盘、显示器、硬盘、打印机等
外围设备。面计算机是如何控制这些外围设备的呢？这和计算机的机
型有着很大的关系。
Windows操作系统对克服这些硬件构成的差异做出了很大贡献。
在介绍Windows之前，让我们先来回顾一下Windows的前身操作系统
MS-DOS广泛使用的时代。在20年前的MS-DOS时代，日本国内市
场上有NEC的PC-9801、富士通的FMR、东芝的Dynabook等各种机
型的计算机。Windows3.0及3.1问世前后，AT兼容机开始普及，并开
始同PC-9801争夺市场份额。
①MS-DOS（Microsoft Disk Operating System）是20 世纪 80年代普遍使用的
计算机操作系统。
22
---
## Page 137
7.2Windows克服了CPU以外的硬件差异
这些机型虽然都搭载了486及Pentiunm等x86系列的CPU，不过
内存和10地址的构成等都是不同的，因此每个机型都需要有专门的
MS-DOS应用。x86提供有专门用来同外围设备进行输入输出的I/O地
址空间（IO地址分配）。至于各外围设备会分配到什么样的地址，则
要由计算机的机型来定。
例如，如果想使用当时大热的文字处理软件一JustSystem的“
太部”的话，就必须要买各个机型专用的一太郎软件（图7-3（a））。这是
因为，应用软件的功能中，存在着直接操作计算机硬件的部分。而这
又是为什么呢？原因主要有两点，一是当时MS-DOS的功能尚不完善，
二是为了提高程序的运行速度。
不过，随着Windows的广泛使用，这样的局面也得到了大幅改善。
因为只要Windows能正常运行.同样的应用（本地代码）在任何机型
上都是可以运行的（图7-3（b））
应用
+
用于AT兼容机
用于PC-9801
用干AT兼容机
操作系统
WiWndows
用于PC-9801
的MS-DOS
的MS-DOS
硬件
AT兼容机
AT兼容机
PC-9B01
PC-980
(alMS-DOS时代的应用
(b) Windows时代的应用
图7-3MS-DOS中，不同机型的应用是不同的，而Windows则可以使用同一个应用
---
## Page 138
第7章程序是在何种环境中运行的
在Windows的应用软件中，键盘输人、显示器输出等并不是直接
向硬件发送指令，而是通过向Windows发送指令来间接实现的。因
此，程序员就不用注意内存和I/O地址的不同构成了。因为Windows
操作的是硬件面非应用软件，而且针对不同的机型，这些硬件的构成
也是有差异的（图7-4）不过，Windows本身则需要为不同的机型分
别提供专用的版本，比如用于AT兼容机的Windows、用于PC-9081的
Windows等
使用操作系统
的功能
使用操作系统
应用
的功能
MS-DOS
Windows
直接控制
硬件
硬件
图 7-4
MS-DOS应用大多都是不经过操作系统而直接控制硬件的，而Windows应
用则基本上都由Windows来完成对硬件的控制
而即便是Windows，也依然无法吸收CPU类型的差异。这是因
为，市面上销售的Windows应用软件，都是用特定的CPU的本地代码
来完成的。
7.3不同操作系统的API不同
接下来让我们看一下操作系统的种类。同样机型的计算机，可安
装的操作系统类型也会有多种选择。例如，AT兼容机的情况下，除
---
## Page 139
7.4FreeBSDPor帮你轻松使用源代码
Windows之外，还可以采用Unix系列的Limux及FreeBSD”等多个操作
系统。当然，应用软件则必须根据不同的操作系统类型来专门开发。
CPU的类型不同，所对应的机器语言也不同，同样的道理，操作系统
的类型不同，应用程序向操作系统传递指令的途径也是不同的。
应用程序向操作系统传递指令的途径称为API（Application
Programming Interface）。Windows及Unix系列操作系统的API.提供
了任何应用程序都可以利用的函数组合。因为不同操作系统的API是
有差异的，因此，将同样的应用程序移植到其他操作系统时，就必须
要重写应用中利用到API的部分。像健盘输人、鼠标输人、显示器输
出、文件输人输出等同外围设备进行输入输出操作的功能，都是通过
API提供的。
在同类型操作系统下，不管硬件如何，API基本上没有差别。因
而，针对某特定操作系统的API所编写的程序，在任何硬件上都可以
运行。当然，由于CPU种类不同，机器语言也不相同，因此本地代码
当然也是不同的。这种情况下，就需要利用能够生成各CPU专用的本
地代码的编译器，来对源代码进行重新编译了。
程序（本地代码）的运行环境是由操作系统和硬件来决定的，这一
点想必大家都清楚了吧。
7.4FreeBSDPort帮你轻松使用源代码
不知道各位读者会不会有这样的想法：“既然CPU类型不同会导致
①FreeBSD是1993年加州大学伯克利分校的Computer Systems Research
Group在4.4BSD-Lite的基础上开发的Unix 系列操作系统。
②API也称为“系统调用”，是应用调用操作系统功能的手段。美于系统调
用，我们会在第9章进行详细说明。
---
## Page 140
第7章程序是在何种环境中运行的
同样的本地代码无法重复利用，那么为何不直接把源代码分发给程序
呢？”的确，这也是一种方法。部分Unix系列操作系统就对此进行了灵
活应用。
Unix系列操作系统FreeBSD中，存在一种名为Ports的机制。该
机制能够结合当前运行的硬件环境来编译应用的源代码，进而得到可
以运行的本地代码系统。如果目标应用的源代码没有在硬件上的话，
Ports就会自动使用FTP连接到相关站点来下载代码（图7-5）。
FreeBSD运行的硬件环境
提供代码的站点
[1）请求源代码
[3）编译源代码
（2）传送源
（4}运行应用
代码
图7-5FreeBSD的Ports机制
全球很多站点都提供适用于FreeBSD的应用源代码。通过使用
Ports可以利用的程序源代码，大约有16000种。这些代码还被按照不
同的领域进行了分类整理，可以随时拿来使用。
FreeBSD上应用的源代码，大部分都是用C语言来记述的。
FreeBSD等Unix系列操作系统中，都带有标准的C编译器。C编译器
可以结合FreeBSD的运行环境生成合适的本地代码。因面，使用
FreeBSD的同时，肯定也会享受到Ports带来的益处。可以说Ports能
够克服包含CPU在内的所有硬件差异的系统。面且，Ports这个术语，
表示的是porting（移植）的意思。而根据不同的运行环境来重新调整程
①FTP（FileTransferProtocol）是连接到互联网上的计算机之间传送文件的协议。
---
## Page 141
7.5利用虚拟机获得其他作系统环境
序，一般也称为“移植”。
7.5利用虚拟机获得其他操作系统环境
即使不通过移植，也可以使用别的方法来运行其他操作系统的应
用。这里我们要介绍的方法就是利用虚拟机软件。笔者的计算机上就
安装了Macintosh的“Virtual PCforMac”。通过利用该虚拟机，我们就
可以在Macintosh的Mac操作系统上运行Windows应用了。
VirtualPCforMAC可以使Macintosh这一硬件变得同AT兼容机一
样，从而能在该硬件上安装Windows。这样一来，Windows下的所有
应用就都可以正常运行了。Windows应用利用的是Windows操作系统
的API。虽然表面上是Windows将硬件处理为了AT兼容机，但由于
VirtualPC forMAC的作用，实际上运行的是Macintosh这一硬件。
图7-6是在PowerBookG4这个机型（CPU不是x86面是PowerPC
G4）的 Macintosh上，通过使用 Virtual PC for MAC起动Windows XP
来运行Windows的音乐应用“BANDINABOX14”的情况。可以发
现，虽然运行速度有点慢，但确实能正常运行。
①Macintosh（统称为Mac）是美国革果公司生产的计算机。这些计算机用的
是名为Mac OS的操作系统。Virtual PC for Mac是美国微软的产品，需要
单独购买。2006年，美国微软终止了Virtual PCforMac的开发。这是因为
Mac采用了 Intel CPU的球故。这里介绍的Virtual PC for Mac是采用Power
PCCPU的Mac上使用的软件。
更多资料请关注裁的新浪薄客http：//blop
---
## Page 142
第7章程序是在何种环境中运行的
图7-6在Macintosh上运行Windows XP和 Windows的应用
7.6提供相同运行环境的Java虚拟机
除虚拟机的方法之外，还有一种方法能够提供不依赖于特定硬件
及操作系统的程序运行环境，那就是Java。
大家说的Java，有两个层面的意思。一个是作为编程语言的Java，
另一个是作为程序运行环境的Java。同其他编程语言相同，Java也是
将Java语法记述的源代码编译后运行。不过，编译后生成的并不是特
定CPU使用的本地代码，而是名为字节代码的程序。字节代码的运行
环境就称为Java 虚拟机（JavaVM，Java Virtual Machine）。Java虚拟
机是一边把Java字节代码逐一转换成本地代码一边运行的。
例如，在使用用于AT兼容机的Java编译器和Java虚拟机的情况
128
---
## Page 143
7.6提供相同通行环境的Java虚拟机
下，编译器会将程序员编写的源代码（samplejava）转换成字节代码
（sample.class）。面Java虚拟机（java.exe）则会把字节代码变换成x86
系列CPU适用的本地代码，然后由x86系列CPU负责实际的处理。
在程序运行时，将编译后的字节代码转换成本地代码，这样的操
作方法看上去有些迁回，但由此可以实现同样的字节代码在不同的环
境下运行。如果能够结合各种类型的操作系统和硬件作成Java虚拟机，
那么，同样字节代码的应用就可以在任何环境下运行了（图7-7）。
Java的编译器
用于Windows的
用于Macntosh的
用于PDA的
Java虚拟机
Java虚拟机
Java拟机
PDA使用的
操作系统
AT兼容机
PDA/
图7-7Java应用在Java虚拟机上运行
Windows 有Windows专用的Java虚拟机，Macintosh 也有Macintosh
专用的Java虚拟机。从操作系统方面来看，Java虚拟机是一个应用，
①PDA（Personal Digital Assistant）是指可以救入手提包中的小型手持计算