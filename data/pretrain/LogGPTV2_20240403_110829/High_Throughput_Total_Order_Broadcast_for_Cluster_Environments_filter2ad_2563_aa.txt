title:High Throughput Total Order Broadcast for Cluster Environments
author:Rachid Guerraoui and
Ron R. Levy and
Bastian Pochon and
Vivien Qu&apos;ema
High Throughput Total Order Broadcast for Cluster Environments
Rachid Guerraoui
IC EPFL, Switzerland
CSAIL MIT, USA
Ron R. Levy
IC EPFL,
Switzerland
Bastian Pochon
IC EPFL,
Switzerland
Vivien Qu·ema
INRIA, France
Univ. di Roma 1, Italy
Abstract
Total order broadcast is a fundamental communica-
tion primitive that plays a central role in bringing cheap
software-based high availability to a wide array of ser-
vices. This paper studies the practical performance of such
a primitive on a cluster of homogeneous machines.
We present FSR, a (uniform) total order broadcast pro-
tocol that provides high throughput, regardless of message
broadcast patterns. FSR is based on a ring topology, only
relies on point-to-point inter-process communication, and
has a linear latency with respect to the total number of pro-
cesses in the system. Moreover, it is fair in the sense that
each process has an equal opportunity of having its mes-
sages delivered by all processes.
On a cluster of Itanium based machines, FSR achieves a
throughput of 79 Mbit/s on a 100 Mbit/s switched Ethernet
network.
1 Introduction
Motivation. As an ever increasing number of critical
tasks are being delegated to computers, the unforeseen fail-
ure of a computer can have catastrophic consequences. Un-
fortunately, the observed increase of computing speed as
predicted by Moore’s law has not been coupled with a sim-
ilar increase in reliability. However, because of rapidly de-
creasing hardware costs, ensuring fault tolerance through
replication is gaining in popularity. The key to making
replication work is a well designed software layer that hides
all the dif(cid:2)culties behind replication from the application
developer and renders it transparent to the clients [24].
At (cid:2)rst glance, the idea is simple. Each process main-
tains a single copy of the object (representing a software ser-
vice) that is to be replicated. All invocations are broadcast
to all processes (i.e., replicas), which perform them on their
copies1. A key underlying ordering mechanism ensures that
all processes perform the same operations on their copies in
1In practice, invocations that do not change the state of the replicated
object do not need to be broadcast and can be performed in parallel.
the same order, even if they subsequently fail. This mecha-
nism is encapsulated by a communication abstraction called
total order broadcast (TO-broadcast) [25]. We consider the
uniform variant that guarantees consistency for processes
that subsequently fail. This abstraction ensures in particular
the following properties for all messages that are broadcast:
(1) Agreement: if a process TO-delivers a message m, then
all correct processes eventually TO-deliver m; (2) Total or-
der: if some process TO-delivers some message m before
message m0, then no process TO-delivers m0 before m.
Clearly, the throughput of a TO-broadcast protocol is
crucial to the throughput of the associated replication mech-
anism. It captures the number of requests that can be han-
dled by the replicas under high load.
The problem addressed in this paper is that of devising
a high-throughput TO-broadcast protocol for a cluster of
homogeneous machines interconnected by a fully switched
LAN. Even though it should also be ef(cid:2)cient in arbitrar-
ily large clusters, it has to be optimized for relatively small
clusters (less than 15 machines), because in practice it is not
very useful to replicate the same state on a lot of machines.
Similarly, performance should be measured for fairly static
environments with few failures where only few machines
leave or join the system. These kinds of environments are
common for e-commerce applications such as fault-tolerant
J2EE clusters [37].
Modeling. The (cid:2)rst step in reasoning about the through-
put of a communication abstraction is to determine a model
to precisely represent such throughput.
Various models have been proposed to reason about mes-
sage passing complexity. Nevertheless, none of them is ad-
equate for modeling clusters of homogeneous machines in-
terconnected by fully switched LANs. Either they assume
that processes can receive several messages at the same
time [30], or they do not assume the existence of a broadcast
primitive [15, 5].
In this paper, we propose to analyze protocols using a
slightly modi(cid:2)ed version of the popular round-based mes-
sage passing communication model [30]. The model we
propose assumes that processes can send a message to one
1
or more processes at the start of each round and can receive
a single message sent by other processes at the end of the
round.
We give a careful analysis of FSR fault-tolerance, scal-
ability and fairness, as well as describe the performance of
its implementation.
Throughput can thus be de(cid:2)ned as the average number
of completed TO-broadcasts per round. A complete TO-
broadcast of message m meaning that all processes TO-
delivered m. We consider that a TO-broadcast algorithm is
throughput ef(cid:2)cient if its throughput is higher than or equal
to 1. This means that on average all processes TO-deliver
one message per round.
Throughput. Numerous TO-Broadcast protocols have
been published [17]. Protocols relying on communication
history [35, 31, 19, 34, 32] and destination agreement [10,
7, 29, 21, 2] do not have good throughput as they rely on
a quadratic number of messages and an underlying consen-
sus sub-protocol. Protocols relying on a (cid:2)xed sequencer
also inherently have low throughput [26, 3, 9, 22, 8, 41].
While requiring fewer messages than the previously men-
tioned class of protocols, they still exhibit bad throughput
because the sequencer becomes a bottleneck. Protocols us-
ing moving sequencers [12, 40, 27, 14] have been proposed
to overcome the limitation of (cid:2)xed sequencer protocols.
While signi(cid:2)cantly improving the throughput, these pro-
tocols do nevertheless not achieve higher throughput than
1 due to the impossibility of piggy-backing acks in cer-
tain broadcast patterns (e.g. 1-to-n meaning that a single
process TO-broadcasts to all other processes). Finally, a
class of TO-broadcast protocols, called privilege-based pro-
tocols [20, 13, 18, 1, 23], uses a ring topology of processes
and a token passed among processes to grant the privilege of
broadcasting. These protocols provide high throughput in
the 1-to-n and n-to-n case (all processes TO-broadcasting
to all other processes), but not in the k-to-n case (k 6= 1; n).
For instance, when two processes simultaneously want to
broadcast messages, for fairness reasons, the token is con-
stantly passed from one sender to the other, which reduces
the throughput.
Contributions.
In this paper we present FSR, a uniform
total order broadcast protocol that relies on point-to-point
communication channels between processes. FSR is hybrid
and uses both a (cid:2)xed sequencer and a ring topology (hence
the name). Similarly to the train protocol [13], each process
only sends messages to the same single process. Unlike the
train protocol however, messages in FSR are sequenced by
a (cid:2)xed process in the ring. These two characteristics ensure
throughput ef(cid:2)ciency and fairness, regardless of the type of
traf(cid:2)c. In our context, fairness conveys the equal opportu-
nity of processes to have their TO-broadcast messages even-
tually TO-delivered. Moreover, FSR has linear latency with
respect to the number of processes.
Roadmap. Section 2 reviews existing TO-broadcast pro-
tocols and compares them to FSR. Section 3 describes the
system model. Section 4 describes FSR in detail. Section 5
provides performance results and analysis. Section 6 con-
cludes the paper.
2 Related Work
The (cid:2)ve following classes of TO-broadcast protocols
were identi(cid:2)ed in [17]: (cid:2)xed-sequencer, moving sequencer,
privilege, communication history and destination agree-
ment. In this section, we only survey time-free protocols,
for these are comparable to FSR as they do not assume syn-
chronized clocks.
2.1 Fixed Sequencer
m, seq(m)
ack
stable
p1
p2
p3
p4
m
Figure
1.
broadcast.
Fixed
sequencer-based
TO-
In a (cid:2)xed sequencer protocol [26, 3, 9, 22, 8, 41] (Fig-
ure 1), a single process is elected as the sequencer and is
responsible for the ordering of messages. The sequencer
is unique, and a new sequencer is elected only in the case
the previous sequencer fails. Three variants of the (cid:2)xed se-
quencer protocol exist [4], each using a different commu-
nication pattern. Fixed sequencer protocols exhibit linear
latency with respect to n [16], but poor throughput. The se-
quencer becomes a bottleneck because it must receive the
acknowledgments (acks) from all processes2 and also re-
ceive all messages to be broadcast. Note that this class of
protocols is popular for non-uniform total order broadcast
protocols since these do not require all processes to send
acks back to the sequencer, thus providing much better la-
tency and throughput.
seq(m)
m
p1
p2
p3
p4
seq(m)
token
p1
p2
p3
p4
m
token
Figure 2. Moving sequencer-based TO-
broadcast.
Figure 3. Privilege-based TO-broadcast.
2.2 Moving Sequencer
Moving sequencer protocols [12, 40, 27, 14] (Figure 2)
are based on the same principle as (cid:2)xed sequencer proto-
cols, but allow the role of the sequencer to be passed from
one process to another, even if no failures occur. This is
achieved through a token that carries a sequence number
and constantly circulates among the processes. The motiva-
tion is to distribute the load among sequencers, thus avoid-
ing the bottleneck caused by a single sequencer. When a
process p wants to broadcast a message m, p sends m to all
other processes. Upon receiving m, the processes store it
into a receive queue. When the current token holder q has
a message in its receive queue, q assigns a sequence num-
ber to the (cid:2)rst message in the queue and broadcasts that
message together with the token. For a message to be deliv-
ered, it has to be acknowledged by all processes. Acks are
gathered by the token. Moving sequencer protocols have
a latency that is worse than that of (cid:2)xed sequencer proto-
cols [17]. On the other hand, they achieve better through-
put, although not higher than 1. Figure 2 shows a 1-to-n
broadcast of one message. It is clear from the (cid:2)gure that
it is impossible for the moving sequencer protocol to de-
liver one message per round. The reason is that the token
must be received at the same time as the broadcast messages
and the protocol thus cannot achieve high throughput. Note
that (cid:2)xed sequencer protocols are often preferred to mov-
ing sequencer protocols because they are much simpler to
implement [17].
2.3 Privilege
Privilege-based protocols [20, 13, 18, 1, 23] (Figure 3)
rely on the idea that senders can broadcast messages only
when they are granted the privilege to do so. The privi-
lege to broadcast (and order) messages is granted to only
one process at a time, but this privilege circulates from pro-
cess to process in the form of a token. When a process
wants to broadcast a message, it must (cid:2)rst wait until it re-
ceives the token. As explained in [14], there is a trade
2Acknowledgments in the (cid:2)xed sequencer can only be piggy-backed
when all processes broadcast messages all the time [16].
off between privilege-based protocol performance and fair-
ness. To see why, consider the case where two processes
located at opposite sides of the ring simultaneously broad-
cast bursts of messages. Either one of the processes keeps
the token, which is unfair, or the token is constantly passed
from one sender to the other one, which drastically reduces
the throughput.
2.4 Communication History
As in privilege-based protocols, communication history-
based protocols [35, 31, 19, 34, 32] use sender-based or-
dering of messages. They differ however by the fact that
processes can send messages at any time. Messages carry
logical clocks that allow processes to observe the messages
received by the other processes in order to learn when TO-
delivering a message does not violate the total order. Com-
munication history-based protocols have poor throughput
because they rely on a quadratic number of messages ex-
changed for each message to be TO-broadcast.
2.5 Destination Agreement
In destination agreement-based protocols, the delivery
order results from an agreement between destination pro-
cesses. Many such protocols have been proposed [10, 7, 29,
21, 2]. They mainly differ by the subject of the agreement:
message sequence number, message set, or acceptance of
a proposed message order. These protocols have relatively
bad performance because of the high number of messages
that are generated for each broadcast. Indeed, they rely on
consensus that in a way is modular, but which is very ex-
pensive in terms of latency and message complexity.
Note that hybrid protocols, combining two different or-
dering mechanisms have also been proposed [19, 36, 39].
Most of these protocols are optimized for large scale net-
works, using multiple groups or optimistic strategies.
3 Model
We consider a system with n processes which have ac-
cess to a failure detection module, which implements a Per-
fect failure detector P [11]. Using P we implement a virtu-
ally synchronous communications (VSC) [6] layer which
ensures consistent message delivery while allowing pro-
cesses to join and leave during the execution of the protocol.
Processes communicate through point-to-point channels.
Moreover, we assume a fully connected network, where
each pair of processes is connected. The network is full-
duplex, by which we mean that each node can simultane-
ously send and receive messages. There are also separate
collision domains: process p1 can send messages to p2 with-
out interfering with process p3 sending messages to p4.
Evaluating the performance of a communication abstrac-
tion requires a performance model. Some models only ad-
dress point-to-point networks, where no native broadcast
primitive is available [15, 5]. A recent model [38] proposes
to evaluate total order broadcast protocols, assuming that a
process cannot simultaneously send and receive a message.
This does clearly not capture modern network cards, which
provide full duplex connectivity. Round-based models [30]
are in that sense more convenient as they assume that a pro-
cess can send a message to one or more processes at the
start of each round, and can receive the messages sent by
other processes at the end of the round. Whereas this model
is well-suited for proving lower bounds on the latency of
protocols, it is however not well suited for making realis-
tic predictions about the throughput. In particular, it is not
realistic to consider that several messages can be simultane-