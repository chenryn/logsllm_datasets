今天看到一篇文章: https://bitsadm.in/blog/windows-security-updates-for-hackers
讲述如何通过Windows的补丁号来评估系统面临的风险以及工具的相关实现，它通过爬取微软官方更新
中的KB号和系统已有的进行对比，和hacking8的提权辅助 https://i.hacking8.com/tiquan 有一点异曲
同工之妙。
它发布的工具是: https://github.com/bitsadmin/wesng 我摘出一些觉得有用的代码出来。
识别系统版本
通过systeminfo，得知我的系统版本是 19042
可得出我的系统版本是 20H2
Windows版本号过去发布的格式是YYMM，YY为年，MM为月，例如2020年4月发布的，即是
2004，系统内部代号即是19041
从2020年Windows10秋季发布开始，变成了YYH1/YYH2半年模式
识别系统版本号，在后面可以用来筛选安全更新，减少误报率。
根据systeminfo信息确认系统版本
主要就是通过正则，python代码如下
# 构建号和版本之间的映射表以正确识别
# systeminfo输出中指定的Windows 10/11/Server 2016/2019/2022版本
buildnumbers = OrderedDict([
    (10240, 1507),
    (10586, 1511),
    (14393, 1607),
    (15063, 1703),
    (16299, 1709),
    (17134, 1803),
    (17763, 1809),
    (18362, 1903),
    (18363, 1909),
    (19041, 2004),
    (19042, '20H2'),
    (19043, '21H1'),
    (22000, '21H2') # Windows 11
])
# Determine Windows version based on the systeminfo input file provided
def determine_product(systeminfo):
    systeminfo = charset_convert(systeminfo)
    # Fixup for 7_sp1_x64_enterprise_fr_systeminfo_powershell.txt
    systeminfo = systeminfo.replace('\xA0', '\x20')
    # OS Version
    regex_version = re.compile(r'.*?((\d+\.?){3}) ((Service Pack (\d)|N\/\w|.+) 
)?[ -\xa5]+ (\d+).*', re.MULTILINE | re.IGNORECASE)
    systeminfo_matches = regex_version.findall(systeminfo)
    if len(systeminfo_matches) == 0:
        raise WesException('Not able to detect OS version based on provided 
input file\n    In case you used the missingpatches script, use: wes.py -m 
missing.txt')
    systeminfo_matches = systeminfo_matches[0]
    mybuild = int(systeminfo_matches[5])
    servicepack = systeminfo_matches[4]
    # OS Name
    win_matches = re.findall('.*?Microsoft[\(R\)]{0,3} Windows[\(R\)?]{0,3} ?
(Serverr? )?(\d+\.?\d?( R2)?|XP|VistaT).*', systeminfo, re.MULTILINE | 
re.IGNORECASE)
    if len(win_matches) == 0:
        raise WesException('Not able to detect OS name based on provided input 
file')
    win = win_matches[0][1]
    # System Type
    archs = re.findall('.*?([\w\d]+?)-based PC.*', systeminfo, re.MULTILINE | 
re.IGNORECASE)
    if len(archs) > 0:
        arch = archs[0]
    else:
        logging.warning('Cannot determine system\'s architecture. Assuming x64')
        arch = 'x64'
    # Hotfix(s)
    hotfixes = get_hotfixes(systeminfo)
    # Determine Windows 10 version based on build
    version = None
    for build in buildnumbers:
        if mybuild == build:
            version = buildnumbers[build]
            break
        if mybuild > build:
            version = buildnumbers[build]
        else:
            break
    # Compile name for product filter
    # Architecture
    if win not in ['XP', 'VistaT', '2003', '2003 R2']:
        if arch == 'X86':
            arch = '32-bit'
        elif arch == 'x64':
            arch = 'x64-based'
    # Client OSs
    if win == 'XP':
        productfilter = 'Microsoft Windows XP'
        if arch != 'X86':
            productfilter += ' Professional %s Edition' % arch
        if servicepack:
            productfilter += ' Service Pack %s' % servicepack
    elif win == 'VistaT':
        productfilter = 'Windows Vista'
        if arch != 'x86':
            productfilter += ' %s Edition' % arch
        if servicepack:
            productfilter += ' Service Pack %s' % servicepack
    elif win == '7':
        productfilter = 'Windows %s for %s Systems' % (win, arch)
        if servicepack:
            productfilter += ' Service Pack %s' % servicepack
    elif win == '8':
        productfilter = 'Windows %s for %s Systems' % (win, arch)
    elif win == '8.1':
        productfilter = 'Windows %s for %s Systems' % (win, arch)
    elif win == '10':
        productfilter = 'Windows %s Version %s for %s Systems' % (win, version, 
arch)
    elif win == '11':
        productfilter = 'Windows %s for %s Systems' % (win, arch)
    # Server OSs
    elif win == '2003':
        if arch == 'X86':
            arch = ''
        elif arch == 'x64':
            arch = ' x64 Edition'
        pversion = '' if version is None else ' ' + version
        productfilter = 'Microsoft Windows Server %s%s%s' % (win, arch, 
pversion)
    # elif win == '2003 R2':
    # Not possible to distinguish between Windows Server 2003 and Windows Server 
2003 R2 based on the systeminfo output
    # See: https://serverfault.com/q/634149
    # Even though in the definitions there is a distinction though between 2003 
and 2003 R2, there are only around 50
    # KBs specificly for 2003 R2 (x86/x64) and almost 6000 KBs for 2003 
(x86/x64)
    elif win == '2008':
        pversion = '' if version is None else ' ' + version
        productfilter = 'Windows Server %s for %s Systems%s' % (win, arch, 
pversion)
    elif win == '2008 R2':
        pversion = '' if version is None else ' ' + version
        productfilter = 'Windows Server %s for %s Systems%s' % (win, arch, 
pversion)
    elif win == '2012':
        productfilter = 'Windows Server %s' % win
    elif win == '2012 R2':
        productfilter = 'Windows Server %s' % win
    elif win == '2016':
        productfilter = 'Windows Server %s' % win
    elif win == '2019':
        productfilter = 'Windows Server %s' % win
    elif win == '2022':
        productfilter = 'Windows Server %s' % win
    else:
KB数据库更新
wesng使用的数据是自己采集然后上传到github上的，可能更新不会那么及时。
数据地址是: https://github.com/bitsadmin/wesng/blob/master/definitions.zip
打开后如下格式
它也提供了一个脚本，用于从msrc自动获取更新 地址：https://github.com/bitsadmin/wesng/blob/m
aster/collector/collect_msrc.ps1
但是它需要一个api key
Hacking8的是直接爬msrc官网的更新，反而没那么多限制，后续会给出我的源码
筛选补丁流程
初筛
从systeminfo信息中获取product信息，然后根据product的版本号把补丁初筛一遍
        raise WesException('Failed assessing Windows version {}'.format(win))
    return productfilter, win, mybuild, version, arch, hotfixes
# Extract hotfixes from provided text file
def get_hotfixes(text):
    hotfix_matches = re.findall('.*KB\d+.*', text, re.MULTILINE | re.IGNORECASE)
    hotfixes = []
    for match in hotfix_matches:
        hotfixes.append(re.search('.*KB(\d+).*', match, re.MULTILINE | 
re.IGNORECASE).group(1))
    return hotfixes
筛选
初筛的结果和系统的补丁号进行一次集合求差，就能得到还没有打的补丁，根据这些补丁，构造exp，
就能攻击了。