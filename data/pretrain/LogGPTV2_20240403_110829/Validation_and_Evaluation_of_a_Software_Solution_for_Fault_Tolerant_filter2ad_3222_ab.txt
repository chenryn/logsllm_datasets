(a)
T,L
tk1
Mtk0
(b)
working
T,L
tk2
snd-ready
T,L
tk1|FAULT
T
tk6
tk2|RESTART
T,L
tk3|TK_DS_R
tk5
T,L
tk4|DS_TK_R
bk1
TI
bk1|FAULT
bk2
T
snd-tk-failed
bk3
T
T
bk3|BK_DS_F
rcv-global-synch
bk2|RESTART
Figure 3. SWN model of tasks (a) and back-
bone (b)
Figure 3(b) models a super simpliﬁed backbone, since
the only activities represented are the ones connected to the
failure and restart of a task. In case of failure, the backbone
sends to the DS mechanism a notiﬁcation message through
a mailbox (place labelled “BK DS F”). Please note the use
of the # before the name of the variables as a directive to
algebra that the variable should be uniﬁed upon composi-
tion. This model interacts with the user task model through
transition labels FAULT and RESTART, with the ds model
through place labels “BK DS F”. Since all tasks may fail,
the net is initialized with as many tokens in place bk1 as
there are tasks.
Figure 4 models the distributed synchronization mecha-
nism as speciﬁed by the automaton and by the sequence di-
agrams that, for brevity, we have not reported here. We con-
sider the case of a single instance of the distributed synchro-
nization task. It is easy to see that the structure of the SWN
is basically the same as the automaton of Figure 2. The up-
per part of the net (transition ds5) represents the sending of
an acknowledge message to all tasks that are waiting for it:
the structure is more complicated that it should due to the
fact that marking dependent arcs are not allowed in SWN.
The interface to the check synch model is the synchro-
nization transition label “check-synch” and the commu-
nicating place label “levels”. When the DS receives a
READY message for level l from an user task, it puts in
the communicating place the value l (through transition ds9
and function hli on the arc) and it activates the check-synch
model; when instead the check is caused by the failure of
a user task the DS model passes to check-synch the whole
set of levels (function hSi on the arc) since it is not able to
determine, a priori, on which level a synchronization will,
eventually, take place.
T,L
ds5|DS_TK_R
T,L
ds3|LR
ds5
  3π
ds7
  2π
wait-msg
ds1|BK_DS_F
T
failure
ds8|ready
L
ds5|synchro
  2π
sendingL
snd-global
L
reached-synch
ds1|not-reached
ds4|reached
ds6
ds9|check-synch
T,L
ds2|TK_DS_R
L
tocheck|levels
tk_discon
T
ds2|tkfailed
  2π
ds3|check-synch
check-tks
Figure 4. SWN model of the DS
Figure 5 represents the Check-Synch model that checks
whether the synchronization conditions are satisﬁed.
It
is called by the DS when a READY message from a
task is received or when a failed task is detected. Place
ck2jlevels contains input values passed to the method: for
each level contained in this place synchronization condi-
tions are checked until a level is found such that the condi-
tions are satisﬁed: in this case the level is passed as a return
value to the DS mechanism when the transition ck6jreached
is ﬁred (function h#li on the input arc to ck6). In case the
conditions are not satisﬁed for any level contained in place
ck2jlevels no value is passed to the DS mechanism and the
transition ck8jnot-reached is ﬁred.
Given a level l, the synchronization conditions are:
a for all tasks t  T : DStable[t][l]  fLR, NRg, and
b1 ( there 	 at least a task t  T : DStable[t][l] = R or
b2 there 	 at least a task t  T : DStable[t][l] = RS)
If these conditions are satisﬁed, either one of the two con-
ﬂicting transitions ck3 (representing condition a and b1) or
ck4 (representing condition a and b2) ﬁres; otherwise tran-
sition ck5 (with lower priority) ﬁres.
The model needs to check the state of the DS table and
indeed the four places of labels R, RS, LR, NR are going to
be superposed with the places of equal label in the model of
the DSTable of Figure 6.
The SWN model of Figure 6 is obtained from the au-
tomaton of Figure 1. The DSTable is modiﬁed every time
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:16:05 UTC from IEEE Xplore.  Restrictions apply. 
idle
ck1|check-synch
ck1
ck2
L
ck3
ck6|LR
T,L
ck4
  2π
T,L
ck7|NR
OK
L
ck5|RS
T,L
ck5
other
  2π
KO
L
ck2|levels
ck4|R
T,L
ck3
  2π
emptying
  3π
all_lev
all_lev
t1|tkfailed
  2π
NR|NR
Motab
T,L
[d(other) <> d(l)]
all_tks
all_tks
LR_to_NR|synchro
  3π
t2|tkfailed
  2π
all_lev
all_lev
clean
  2π
NA_to_NR|synchro
NA
T,L
  3π
[d(other) <> d(l)]
p
T
LR|LR
T,L
t6|ready
t7|ready
t3|tkfailed
  2π
all_lev
all_lev
R|R
T,L
R_to_LR|synchro
  2π
all_tks
all_tks
all_lev
all_lev
t5|ready
t4|tkfailed
  2π
RS|RS
T,L
RS_to_LR|synchro
  2π
ck6|reached
ck7
ck8
end1
  2π
ck9
ck8|not-reached
t1|tkfailed
t1|tkfailed
t2|tkfailed
t2|tkfailed
t3|tkfailed
t3|tkfailed
t4|tkfailed
t4|tkfailed
I
all_lev
L
R_to_LR|synchro
R_to_LR|synchro
I
all_tks
T
LR_to_NR|synchro
LR_to_NR|synchro
Figure 5. SWN model of the algorithm for
checking sychronization
Figure 6. SWN model of the DS table
an event on any task occurs, like when a message sent by a
task or by the backbone is received by the DS, and when a
synchronization takes place.
Places all lev and all tks, on the right portion of the net,
have been introduced since SWN do not allow marking de-
pendent arcs. All other places are colored with the pair
“T,L”, since there are as many entries in the table as the
cross product of tasks and levels. Initially all entries of the
table are set to the value “not reached”, and therefore the
only non empty place in the net is place NR.
The model is interfaced with the DS model through tran-
sition labels tkfailed, ready and synchro, and through place
label LR, and with the check synch model though place la-
bels R, RS, LR, and NR.
The program algebra has been used to produce the
complete model; the command:
algebra net1 net2 par1 net3
composes the SWN models of name net1 and net2 over
places or transitions, or both, depending on the value (p, t,
or b) of par1, and names the resulting net net3. The model
of the whole system has been produced using the following
script:
algebra tasks bk t tk-bk
algebra ds check-synch b ds-check
algebra tk-bk ds-check p tk-bk-ds2
algebra DStab tk-bk-ds2 b final
State space analysis The model has 31 tangible states and
731 vanishing for 2 tasks and 2 levels, and it can be very
quickly solved with the SWN solvers of GreatSPN. We have
also produced a version of the model in which tasks are not
restarted upon a failure, that is to say, when a task fails it
does not re-enter play. This was simply done by deleting
the transitions with label RESTART in the task model: we
call this modiﬁed model “open”. The run of GreatSPN now
reveals 15 tangible state, 385 vanishing and a single dead-