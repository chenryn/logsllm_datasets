作用主要是为底层操作系统提供一个高效的抽象层。DalvikVM是一种基于寄存器的虚拟机，能
够解释执行Dalvik可执行格式（DEX）的字节码：另一方面，DalvikVM依赖于一些由支持性原
生代码程序库所提供的功能。
Android系统中的用户空间原生代码组件包括系统服务（如vold和DBus）网络服务（如dhcpd
和 wpa_supplicant）和程序库（如bionic libc、WebKit 和OpenSSL）。其中一些服务和程序库会与
内核级的服务与驱动进行交互，而其他的则只是便利底层原生操作管理代码。
Android的底层基础是Linux内核，Android对内核源码树作了大量的增加与修改，其中有些
代码存在一些独特的安全后果。我们会在第3章、第10章和第12章中更加详细地讨论这些话题
内核级驱动也提供了额外的功能，比如访问照相机、Wi-Fi以及其他网络设备。需要特别注意
Binder驱动，它实现了进程间通信（IPC）机制。
2.3节将详细介绍每一层上的关键组件。
2.2理解安全边界和安全策路执行
安全边界，有时也会称为信任边界，是系统中分隔不同信任级别的特殊区域。一个最直接的
例子就是内核空间与用户空间之间的边界。内核空间中的代码可以对硬件执行一些底层操作并访
问所有的虚拟和物理内存，面用户空间中的代码则由于CPU的安全边界控制，无法访问所有内存。
Android操作系统应用了两套独立但又相互配合的权限模型。在底层，Linux内核使用用户和
用户组来实施权限控制，这套权限模型是从Linux继承过来的，用于对文件系统实体进行访问控
制，也可以对其他Android特定资源进行控制。这一模型通常被称为Android沙箱。以DalvikVM
和Android框架形式存在的Android运行时实施了第二套权限模型。这套模型在用户安装应用时
是向用户公开的，定义了应用拥有的权限，从而限制Android应用的能力。事实上，第二套权限
模型中的某些权限直接映射到底层操作系统上的特定用户、用户组和权能（Capability）。
2.2.1Android沙箱
Android从其根基Linux继承了已经深入人心的类Unix进程隔离机制与最小权限原则。具体
面言，进程以隔离的用户环境运行，不能相互干扰，比如发送信号或者访问其他进程的内存空间。
因此，Android沙箱的核心机制基于以下几个概念：标准的Linux进程隔离、大多数进程拥有唯
一的用户ID（UID），以及严格限制文件系统权限。
Android系统沿用了Linux的UID/GID（用户组ID）权限模型，但并没有使用传统的passwd
和group文件来存储用户与用户组的认证凭据，作为替代，Android定义了从名称到独特标识符
---
## Page 36
20第2章Android的安全设计与架构
AndroidID(AID）的映射表。初始的AID映射表包含了一些与特权用户及系统关键用户（如system
用户/用户组）对应的静态保留条目。Android还保留了一段AID范围，用于提供原生应用的UID。
Android4.1之后的版本为多用户资料档案和隔离进程用户增加了额外的AID范围段（如Chrome
沙箱）。你可以从AOSP树的 system/core/include/private/android_filesystem_config.h文件中找到
AID的定义。以下是一个简化过的示例。
define AID_ROOT
0/*传统的unix跟用户*/
#define AID_SYSTEK1000/*系统服务器*/
defineAID_RADIO1001/*通语磅能子系统，RIL*/
define AID_BLUETO0TH 1002/*重牙子系统*/
2000 /*adb she11 与 debug 8he11 用户 */
define AID_CACHE
2001/*存访问*/
define AID_DIAG
2002/*请问诊新资源*/
/*编号3000系月只用于辅助用户组们，表示出了内核府支持的Android权能*/
define AID_NEr_BT_ADMIN 3001 /*蓝牙：创建套接字* /
3002/*置牙：创建sco.rfcomm或12cap 套接字*/
#define AID_INET
3003/*能等创建AP_INET 和AF_INET6套接字*/
#define AID_NET_RAX
3004/*能梦创建原始的INET囊接字*/
+define AID_APP
10000/*第一个应用用户*/
#define AID_ISOLATED_END
define AID_ISOLATED_START99000/*完全局地沙稿进程中UID 的开始编号*/
99999/*完全隔绝的沙稿进程中UID的末尾编号*/
define AID_USER
1.00000/*毒一用户的UID编号花国编梦*/
除了AID，Android还使用了辅助用户组机制，以允许进程访问共享或受保护的资源。例如
sdcard_rw用户组中的成员允许进程读写/sdcard目录，因为它的加载项规定了哪些用户组可以
读写该目录。这与许多Limux发行版中对辅助用户组机制的使用是类似的。
注意尽管所有的AID条目都映射到一个UID和GID，但是UID在描述系统上的一个用户时并
不是必需的。例如，AIDD_SDCARD_RW映射到sdcard_rw，但是它仅仅用作一个辅助用
户组，而不是系统上的UID。
除了用来实施文件系统访问，辅助用户组还会被用于向进程授予额外的权限。例如，
AID_INET用户组允许用户打开AF_INET和AF_INET6套接字。在某些情况下，权限也可能以
Linux权能的形式出现，例如，AID_INET_ADMIN用户组中的成员授予CAP_NET_ADMIN权能，
允许用户配置网络接口和路由表。本节最后还会介绍与网络相关的其他相似用户组。
在4.3及之后的版本中，Android提升了对Linux权能的使用，比如Android4.3将二进制程
序/system/bin/run-as从原先设置成set-UIDroot权限，修改为使用Linux权能来访问特权资源。在
这里，这一权能方便了对packages.list文件的访问。
---
## Page 37
2.2理解安全边界和安全策略执行
21
注意对Linux权能的完整讨论已经超出了本章的范围。你可以分别从Limux内核的
Documentation/security/credentials.txt 文档和capabilities 的用户手册页面获得更多关于
Linux进程安全和Linux权能的信息。
在应用执行时，它们的UID、GID和辅助用户组都会被分配给新创建的进程。在一个独特
UID和GID环境下运行，使得操作系统可以在内核中实施底层的限制措施，也让运行环境能够
控制应用之间的交互。这就是Android沙箱的关键所在。
下面的代码给出了在一台HTCOneV手机上运行ps命令后的输出结果，注意，最左侧显示
的UID对于每个应用的进程都是独特的。
app_16
4089
1451 304080 31724 ..- S com.htc.bgp
Se"dde
4119
1451 309712 30164
...S com.google.android.calendar
app_1554145
1451 318276 39096
1451 307736 32920 ... S android.proce88.nedia
...S com.google.android.apps.plus
app_1514247
app_24
4159
1451 303696 28132
1451 303172 28032
... S com.hte.weather.bg
... S com.hte.lockscreen
apP_49
0929
apP_13
4277
1451 453248 68260 ... S com.android.browser
通过使用应用包中的一种特殊指令，应用也可以共享UID，这一点我们会在2.3.1节详细讨论。
实际上，进程显示的用户与用户组名称是由一种POSIX函数的Android专有实现所提供的，
这种函数通常就是用来设置和获取这些值的。例如，考虑在Bionic库的stubs.cpp文件中定义的
getpwuid 函数。
345 passwd* getpwuid(uid_t uid)(// NOLINr:实现不良孟数
346
stube_state_t* state = _stubs_state() ;
347
if (state = NULL) {
349
return SULL:
350
1
351
passwd* pv = android_id_to_passwd (state, uid) :
352
if (pw 1= NULL) (
354
return p;
SSE
return app_id_to_passwd (uid, state) :
f95E
与它的同胞函数一样，getpwuia函数会调用一些额外的Android专有函数，如
android_id_to_passwd(）和 app_id_to_passwd()函数。这些函数会把 Unix 的口令结构填
充上相应的 AID 映射信息表。android_id_to_passwd()函数会调用android_iinfo_to_
passwd（）函数来完成这一替换。
static passwd* android_iinfo_to_passvd (stubs_state_t* state,
const android_id_info* iinfo) (
snprintf(state->dir_buffer_, sizeof (state->dir_buffer_), */*) ;
snprintf(state->sh_buffer_, sizeof (state->sh_buffer_),
*/system/bin/sh*) /
---
## Page 38
第2章Android的安全设计与架构
passwd* pv = &state->passwd_1
pv>pv_uid = 1info>aid;
raweupv_gid = iinfo->aid;
px->pv_dir = state->dir_buffex_1
pv->pv_she11 = state->sh_buffer_;
return p;
2.2.2Android权限
Android的权限模型是多方面的，有API权限、文件系统权限和IPC权限。在很多情况下
这些权限都会交织在一起。正如前面提到的，一些高级权限会后退映射到低级别的操作系统权能，
这可能包括打开套接字、蓝牙设备和文件系统路径等。
要确定应用用户的权限和辅助用户组，Android系统会处理在应用包的AndroidManifesL.xml
文件中指定的高级权限（Manifest文件和权限会在2.3.1节详细描述）。应用的权限由
PackageManager 在安装时从应用的Manifest 文件中提取，并存储在/data/system/packages.xml 文件
中。这些条目然后会在应用进程的实例化阶段用于向进程授予适当的权限（比如设置辅助用户组
GID）。下面的代码片段显示了packages.xml文件中的Chrome浏览器条目，包括这个应用的唯一
UID以及它所申请的权限。
codePath=*/data/app/com.android,chrome-1 apk*
i.nsta11er=*com.android.vending*>
 1 
 + -
权限至用户组的映射表存储在/etc/pemissions/platform.xml文件中。它被用来确定应用设置
的辅助用户组GID。下面的代码片段显示了一些映射。
---
## Page 39
2.2理解安全边界和安全策略执行
23
2