title:User-Constraint and Self-Adaptive Fault Tolerance for Event Stream
Processing Systems
author:Andr&apos;e Martin and
Tiaraju Smaneoto and
Tobias Dietze and
Andrey Brito and
Christof Fetzer
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
User-Constraint and Self-Adaptive Fault Tolerance
for Event Stream Processing Systems
André Martin∗, Tiaraju Smaneoto†, Tobias Dietze∗, Andrey Brito†, Christof Fetzer∗
∗Technische Universität Dresden, Dresden, Germany
Email: PI:EMAIL / PI:EMAIL / PI:EMAIL
†Universidade Federal de Campina Grande, Campina Grande, Brazil - Email: PI:EMAIL / PI:EMAIL
Abstract—Event Stream Processing (ESP) Systems are cur-
rently enabling a renaissance in the data processing area as
they provide results at low latency compared to the traditional
MapReduce approach. Although the majority of ESP systems
offer some form of fault tolerance to their users, the provided
fault tolerance scheme is often not tailored to the application
at hand. For example, active replication is well suited for
critical applications where unresponsiveness due to a background
recovery process is not acceptable. However, for other classes of
applications without such tight constraints, the use of passive
replication, based on checkpoints and logging, is a better choice
as it can save a signiﬁcant amount of resources compared to
active replication.
In this paper, we present StreamMine3G, a fault tolerant and
elastic ESP system which employs several fault tolerance schemes,
such as passive and active replication as well as intermediate
alternatives such as active and passive standby. In order to
free the user from the burden of choosing the correct scheme
for the application at hand, StreamMine3G is equipped with a
fault-tolerance controller that transitions between the employed
schemes during runtime in response to the evolution of the given
workload and the user’s provided constraints (recovery time and
semantics, i.e., gap or precise). Our evaluation shows that the
overall resource footprint for fault tolerance can be considerably
reduced using our adaptive approach without consequences to
the recovery time.
Keywords—fault
tolerance, active replication, passive repli-
cation, active standby, passive standby, adaptation, deterministic
execution, precise recovery, gap recovery
I.
INTRODUCTION
With the advent of Google’s MapReduce [1] approach and
its open source implementation Hadoop [2], large scale data
processing has become increasingly popular. The simple and
intuitive programming interface, and the available open-source
tools enable practically anyone to perform data analysis in
large scale. Moreover, through its disk-based approach for
keeping intermediate results, fault tolerance in Hadoop comes
practically for free. However, such beneﬁts come with a high
price as such systems perform data processing in a batching
manner, delivering results only after job completion, which
can take several minutes to hours. In fact, many current
applications require results in second or even sub-second range
and make batch processing alternatives unsuitable.
Event Stream Processing (ESP) is a set of techniques
speciﬁcally crafted for low latency and continuous data pro-
cessing. Although ESP systems exist already for more than a
978-1-4799-8629-3/15 $31.00 © 2015 IEEE
978-1-4799-8629-3/15 $31.00 © 2015 IEEE
DOI 10.1109/DSN.2015.56
DOI 10.1109/DSN.2015.56
462
462
decade now, they are currently facing a true renaissance as
more and more companies need real-time analytics to stay
competitive. The usage of such systems enables companies
to quickly react on relevant situations and opens up entirely
new business opportunities. The examples where ESP systems
are currently used range from click stream analysis1, fraud
and intrusion detection, recommender systems, online log ﬁle
analysis, to high-frequency trading.
Inspired by the simplicity of MapReduce, a number of
new and open-source ESP systems have emerged and gained
traction over the past three years such as Apache Samza [4]
(LinkedIn), Storm [5] (Twitter) and S4 [6] (Yahoo!). Although
all of those systems have a simple MapReduce-like interface
in common, they have different guarantees when it comes to
fault tolerance. For example, Apache S4 can recover from
faults by restarting an operator on a new node and loading a
previous checkpoint of the operator’s state. However, in-ﬂight
events, which were not included in the checkpoint are simply
lost, hence, only gap recovery is provided. On the contrary,
Apache Storm guarantees no event loss through its transac-
tional topologies, however, lacks appropriate mechanisms for
state persistence.
Although the previously mentioned ESP systems offer fault
tolerance to their users per se, the provided schemes are often
only suitable for certain types of applications: While Apache
S4 is a good choice for applications with stateful operators,
where state cannot be recreated by simply reprocessing events,
applications sensitive to event loss require schemes such as
offered in Apache Storm.
Since the majority of ESP systems often employ only a
single fault tolerance scheme, users have to choose from a
pool of ESP systems rather than a pool of schemes that best
matches the requirements of the application at hand. In fact,
a wide variety of fault tolerance schemes for ESP systems
is known in literature ranging from active replication [7],
[8], active or passive standby [9], [10], to passive replication
where a combination of checkpoint and logging (i.e., upstream
backup [10]) is used.
Choosing the right fault tolerance scheme is often not
a trivial task as there is a trade-off between recovery time
and resource overhead imposed by each scheme. For exam-
ple, using active replication, an operator can recover almost
instantaneously, however, at the cost of consuming twice of
1For instance, simple online or mobile advertisement through the partici-
pation in services such as the Google’s AdWords [3] platform is a common
current usage of ESP tools.
the resources (CPU, memory and network). On the contrary,
passive replication consumes only little additional resources
for state persistence (disk) and the in-memory log upstream.
However, it comes with the price of a long recovery time
comprising the time it takes to load the most recent checkpoint
from disk and replaying events from the upstream node’s in-
memory log.
Fault tolerance schemes such as active or passive standby
can be considered as intermediate or hybrid alternatives as
they trade recovery time by resource consumption so that they
can recover faster than passive replication, however, at a much
lower resource usage cost compared to the use of full active
replication.
trading sector,
For applications that have very tight constraints such as
found in the ﬁnancial
the choice of using
active replication is clear as those applications do not tolerate
downtimes of even a few seconds. However, there exists a wide
variety of applications which are less critical and blocking
for a few seconds is acceptable. Consider for example a
recommendation system: During a recovery, an e-commerce
site may not be able to serve its visitors with dynamically-
updated recommendations while they are shopping. However,
this degraded service will not necessarily lead to high ﬁnancial
losses, as opposed to ﬁnancial
trading or fraud detection
applications. Hence, there is a huge potential for a variety of
applications to save resources while still tolerating faults.
On the other hand, from the development perspective,
application developers and data analysts often lack a compre-
hensive knowledge about fault tolerance concepts and their
implications with regards to recovery times and resource
footprint. However, even then, users have clear constraints such
as the (i) maximum amount of time an application may stay
unresponsive due to recovery and if (ii) events may be lost or
not.
Considering those constraints, choosing an appropriate
scheme seems to be straightforward. However, ESP systems
are highly dynamic systems where the natural ﬂuctuation in
throughput originating from online data sources can highly
inﬂuence the time an operator may need to recover. Consider
for example an application that processes tweets using a time-
based sliding window. In case the user opted for passive
replication, the application may recover quite quickly if the
throughput is low, as the state it keeps is relatively small.
Nevertheless, with increased throughput, more tuples are ac-
cumulated per window, increasing the size of the state, and,
consequently, checkpoint sizes and recovery times. If recovery
time is a priority,
the above example is a good use case
for adaptation: while in times of low system load passive
replication may be sufﬁcient to satisfy the user’s speciﬁed
recovery time threshold, schemes providing faster recovery
such as active standby must be used in times of high system
load.
In this paper, we present StreamMine3G, a fault-tolerant
and elastic ESP system that employs several fault tolerance
schemes such as passive and active replication as well as
intermediate alternatives such as active and passive standby.
In order to free the user from the burden of choosing the right
scheme for the application at hand, StreamMine3G is equipped
with a self-adaptive fault tolerance controller that transitions
between the employed schemes during runtime based on evolu-
tion of the given workload and the user’s provided constraints
(acceptable recovery time and recovery semantics, i.e., gap
or precise recovery). Our evaluation shows that the overall
resource footprint for fault tolerance can already be reduced
by 50% with a recovery time threshold of 3 seconds using
our adaptive scheme compared to a conservative use of active
replication.
The rest of the paper is organized as follows. In Section II,
we give some background information on ESP systems and
fault
tolerance schemes. Next, our system model for the
self-adaptive controller and its implementation are detailed in
Section III. In Section IV, we evaluate our approach and in
Section V, we discuss related work. Section VI summarizes
the contributions of the paper.
II. BACKGROUND
In the following section, we will ﬁrst provide a brief
overview about StreamMine3G, our elastic and fault-tolerant
ESP system. We also overview fault tolerance schemes com-
monly used in ESP systems.
A. StreamMine3G – System Overview
StreamMine3G is a highly scalable ESP system targeting
low latency data processing of streaming data. In order to
analyze data, users can either opt for writing their own custom
operators using the provided MapReduce-like interface and
implementing a user-deﬁned-function (UDF), or choose from
an existing set of standard Complex Event Processing (CEP)
operators such as ﬁlter, join, aggregation, and others.
In addition to the operators, users must specify the or-
der events are supposed to traverse the previously selected
operators using a topology. A topology in StreamMine3G
is represented by an acyclic directed graph (DAG) where
each vertex, i.e., an operator, can have multiple upstream and
multiple downstream operators.
In order to achieve scalability, operators in StreamMine3G
are partitioned. Each partition processes only a subset of events
from the incoming data stream. For data partitioning, users
can either implement
their own custom partitioner similar
to MapReduce, or use the provided hash-based or key-range
based partitioner.
A typical StreamMine3G cluster consists of several nodes
where each node runs a single StreamMine3G process host-
ing an arbitrary number of operator partitions, named slices.
One of such nodes takes up the role of a manager which
is responsible for placing operator partitions across the set
of available nodes as well as moving partitions (through a
migration mechanism) to other nodes for load balancing in
situations of overload or underutilization. An overload can
be detected by the manager node by analyzing the system
utilization of each node, which is periodically reported through
heartbeat messages exchanged between nodes.
In order to prevent the node hosting the manager com-
ponent being the single point of failure,
the state of the
component is stored in zookeeper upon each reconﬁguration
of the system. In the event of a crash of the node, another
node can transparently take over the role of the manager by
simply recovering with the previously persisted state.
Lastly, StreamMine3G supports the implementation of
stateless and stateful operators. However, contrary to other ESP
systems such as Apache S4 and Storm that have either no, or
only limited, state support StreamMine3G offers an explicit
463463
state management interface to its users. The interface frees the
users from the burden of having to implement their own lock-
ing mechanism to ensure consistent state modiﬁcations when
processing events concurrently (to exploit multiple cores), and
provides a full stack of mechanisms for state checkpoints,
recovery, and operator migration. Using these mechanisms
requires users only to implement appropriate methods for seri-
alization and de-serialization of the state, which can comprise
arbitrary data structures.
B. Fault Tolerance
With the steadily increasing amount of data originating
from various data sources such as web, mobile applications,
or even simple sensors (in the Internet of things context),
highly scalable and distributed data processing technologies
are needed where additional computational resources can be
easily added on the ﬂy. The majority of such systems are run-
ning in cloud environments, where additional computational
resources can be easily provided by simply spawning new
virtual machines. However, with each addition of a virtual or
physical node, the probability of a fault increases. In the worst
case, a single failure can make the whole application unusable
at once,
losses. As an example,
a critical application that performs fraud detection or some
ﬁnancial trading service need to be prepared to cope with all
typical faults that can occur in distributed systems and cloud
environments, such as simple node or processes crashes, and
network partitions.
leading to high ﬁnancial
Typically, ESP systems target low-latency data processing
that needs to be ensured transparently, even when failures
occur. Hence, several fault tolerance schemes for ESP systems
have been proposed in the literature, offering different trade-
offs regarding the recovery time and amount of resources
needed to provide such timeliness.
For example, active replication provides the quickest pos-
sible recovery, however, at the cost of consuming twice the re-
sources: two identical copies of the same operator are deployed
and run on two different nodes, hence, redundant processing
and communication is the key mechanism in order to mask
a fault. Not only this scheme requires twice the processing
nodes and the duplication of the events coming from upstream
operators, but also, in order to produce identical results, atomic
broadcast [11] and deterministic execution [12] is required
so duplicates can be reliably ﬁltered at downstream operators
imposing additional overhead onto the ESP system. In sum-
mary, active replication requires twice the CPU, network and
memory resources, however, provides a nearly instantaneous
recovery.
An approach that consumes the least resources, at the cost
of a long recovery time, is passive replication. In passive
replication, only a single instance of an operator runs on
the ESP system. Application robustness is provided through
periodic checkpoints to save the state of (stateful) operators
either to a local disk or a distributed, fault-tolerant ﬁle system.
Since ESP systems work on continuous streams of events, an
in-memory log at upstream operators is used to buffer events
which have been produced since the last taken checkpoint. The
events in the buffer can be replayed and hence reprocessed
in case a failure occurs, ensuring a gapless recovery. Al-
though the approach consumes only little additional resources
for providing fault tolerance, such as disk space for storing
checkpoints and memory for the buffered events, its recovery
time comprises of the loading of the most recent checkpoint,
de-serializing the stored state, and the reprocessing of the
events from the upstream in-memory log. Depending on the
size of the checkpoint interval, replaying events can take an
considerable amount of time. Also, if state is big (e.g., in
an application that holds an 24-hour data window), loading
and de-serializing the state will further delay the recovery. In
summary, passive replication can be considered as the opposite
of active replication as it consumes considerably less resources,
avoiding replicated communication and processing, at the cost
of recovery time.
Besides active and passive replication, there exist several
approaches which can be considered as a composition of active
and passive replication. For example, in passive standby, an
identical copy of the operator is deployed on the system,
however, it does not perform any event processing (i.e., resides
in standby mode). Instead, the replica in standby mode is used
to hold a copy of the state rather than having it stored on
a ﬁle system. For an overview of major approaches and their
properties we refer the reader to Section III, where we describe
how our system manages the available fault tolerance schemes.
tolerance schemes, different
recovery guarantees may apply. In ESP systems, one can
distinguish four different guarantees [10]:
some fault
Finally,
for
1)
2)
3)
4)
Precise recovery, the strongest guarantee, completely
masks failures. The state is fully recovered and nei-
ther events are lost nor duplicated. In order to pro-
vide such strong guarantee, deterministic execution is
required in order to guarantee replayability. Replaya-
bility prevents event loss and enables safely ignoring
duplicates at the following operator downstream.
Rollback recovery, slightly weaker, recovers the state
of the operator and reprocesses events from upstream
buffers, but due to non-determinism, duplications and
inconsistencies may occur.
Gap recovery simply recovers the state. Events from
upstream buffers are not reprocessed, causing the so-
called gap.
Amnesia considers the case where not even the state
is being recovered. The operator is restarted with a
fresh state.
Depending on the guarantees an application may require in
order to operate correctly, resource consumption and recovery
time can be reduced. For example,
in an application that
analyzes frames from a live video stream, gap recovery may
be sufﬁcient since the lost frames (events that occurred in
the past) may not be relevant for the current computation
anymore. Hence, buffering frames upstream as well as
replaying those frames can be omitted, saving a considerable
amount of resources, as well as time during recovery.
III. ADAPTIVE FAULT TOLERANCE
In the following section, we will describe our approach
on providing runtime adaptation for fault tolerance in ESP
systems. We will ﬁrst provide a detailed description about the
fault tolerance schemes employed in StreamMine3G including
its guarantees, resource consumption and impact on recovery
464464
A 
Node 
Operator 
Queue 
Queue 
B 
Node 
Operator 
Queue 
Queue 
1 
2 
File System 
state 
state 
4 
B’ 
Node 
3 
Node 
A’ 
Operator 
Queue 
Queue 
Operator 
Queue 
Queue 
Fig. 1: Operator components: 1(cid:2) Upstream/output queue for
replaying events in ﬂight (upstream backup), 2(cid:2) processing queue
for ordering events to detect duplicates, 3(cid:2) checkpoint to stable
storage (ﬁle system), 4(cid:2) state synchronization (i.e., checkpoint
to peer node).
time. We will then describe the model employed in our fault
tolerance controller that provides runtime adaption based on
the user provided constraints such as recovery time, recovery