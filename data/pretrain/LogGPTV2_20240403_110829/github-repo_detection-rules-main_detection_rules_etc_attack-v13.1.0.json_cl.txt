### Email Hiding Rules

Adversaries may exploit email rules to conceal incoming emails in a compromised user's mailbox. Many email clients allow users to create inbox rules for various functions, such as moving emails to other folders, marking them as read, or deleting them. These rules can be created or modified within the email client or through external features like the `New-InboxRule` or `Set-InboxRule` PowerShell cmdlets on Windows systems.

#### Description
Adversaries may use email rules to delete or move emails to less noticeable folders. This tactic can be employed to hide security alerts, command and control (C2) communications, or responses to internal spearphishing emails sent from the compromised account. Any user or administrator within the organization, or an adversary with valid credentials, can create these rules. These rules can be abused to delay or impair detection by hiding email content that would otherwise be immediately visible to a user or defender. Malicious rules often filter out emails based on keywords such as "malware," "suspicious," "phish," and "hack" found in message bodies and subject lines.

In some environments, administrators may enable email rules that operate across the entire organization rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail received by the organization against user-specified conditions and perform actions on emails that meet those conditions. Adversaries abusing such features can automatically modify or delete all emails related to specific topics, such as internal security incident notifications.

#### Detection
- **Monitor Email Clients and Applications:** Look for suspicious activity, such as missing messages or abnormal configuration and log entries.
- **Windows Systems:** Monitor for the creation of suspicious inbox rules using the `New-InboxRule` and `Set-InboxRule` PowerShell cmdlets.
- **macOS Systems:** Monitor for modifications to the `RulesActiveState.plist`, `SyncedRules.plist`, `UnsyncedRules.plist`, and `MessageRules.plist` files.

### External Defacement

Adversaries may deface systems external to an organization to deliver messaging, intimidate, or mislead the organization or its users. External defacement, often targeting externally-facing websites, is commonly used by adversary and hacktivist groups to push political messages or spread propaganda. This technique can cause users to distrust the system and question its integrity.

#### Description
External defacement may be used to trigger events, respond to actions taken by an organization or government, or as a precursor to future attacks, such as drive-by compromises. Website defacement can also be a setup for future attacks. Common targets include media and government websites.

#### Detection
- **Monitor Websites:** Watch for unplanned content changes.
- **Application Logs:** Monitor for abnormal behavior that may indicate attempted or successful exploitation.
- **Network Traffic:** Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection.
- **Web Application Firewalls:** These can detect improper inputs attempting exploitation.

### LLMNR/NBT-NS Poisoning and Relay

Adversaries may spoof authoritative sources for name resolution on a victim network by responding to LLMNR (UDP 5355) or NBT-NS (UDP 137) traffic, effectively poisoning the service so that victims communicate with the adversary-controlled system.

#### Description
If the requested host belongs to a resource that requires identification or authentication, the username and NTLMv2 hash will be sent to the adversary-controlled system. The adversary can then collect the hash information and crack the hashes offline to obtain plaintext passwords. In some cases, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. Tools such as NBNSpoof, Metasploit, and Responder can be used to poison name services within local networks.

#### Detection
- **Monitor Registry Keys:** Watch for changes to the `HKLM\Software\Policies\Microsoft\Windows NT\DNSClient` key.
- **Monitor Network Traffic:** Look for traffic on ports UDP 5355 and UDP 137 if LLMNR/NetBIOS is disabled by security policy.
- **Use Spoofing Detection Tools:** Deploy tools to detect LLMNR/NBT-NS spoofing.
- **Monitor Event Logs:** Look for event IDs 4697 and 7045, which may indicate successful relay techniques.

### IP Addresses

Adversaries may gather the victim's IP addresses for use during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses. Information about assigned IP addresses may include details such as which IP addresses are in use.

#### Description
Adversaries may gather this information through direct collection actions via active scanning or phishing for information. Information about assigned IP addresses may also be exposed through online or other accessible data sets. Gathering this information may reveal opportunities for other forms of reconnaissance, establishing operational resources, and initial access.

#### Detection
- **Monitor for Abnormal Activity:** Much of this activity may have a high occurrence and associated false positive rate, making detection difficult.
- **Focus on Related Stages:** Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.

### OS Exhaustion Flood

Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). The OS is responsible for managing finite resources and preventing the system from being overwhelmed by excessive demands on its capacity.

#### Description
Different ways to achieve this include TCP state-exhaustion attacks such as SYN floods and ACK floods. SYN floods send excessive amounts of SYN packets, exhausting the ability of the system to receive new requests for TCP connections. ACK floods leverage the stateful nature of the TCP protocol, forcing the OS to search its state table for a related TCP connection. This can cause the server to become sluggish or unresponsive, reducing the resources available for providing the targeted service.

#### Detection
- **Monitor Network Throughput:** Use tools like netflow, SNMP, and custom scripts to detect sudden increases in circuit utilization.
- **Real-time Monitoring:** Real-time, automated, and qualitative study of network traffic can identify a sudden surge in one type of protocol, indicating an attack as it starts.

### Rootkit

Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits intercept and modify operating system API calls that supply system information.

#### Description
Rootkits or rootkit-enabling functionality may reside at the user or kernel level in the operating system or lower, including a hypervisor, Master Boot Record, or System Firmware. Rootkits have been seen for Windows, Linux, and Mac OS X systems.

#### Detection
- **Rootkit Protections:** Some rootkit protections may be built into anti-virus or operating system software.
- **Dedicated Detection Tools:** Use dedicated rootkit detection tools that look for specific types of rootkit behavior.
- **Monitor for Unrecognized Components:** Watch for unrecognized DLLs, devices, services, and changes to the MBR.

### PowerShell Profile

Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile (profile.ps1) is a script that runs when PowerShell starts and can be used as a logon script to customize user environments.

#### Description
PowerShell supports several profiles depending on the user or host program. An administrator can configure a profile that applies to all users and host programs on the local computer. Adversaries may modify these profiles to include arbitrary commands, functions, modules, and PowerShell drives to gain persistence. Every time a user opens a PowerShell session, the modified script will be executed unless the `-NoProfile` flag is used when it is launched.

#### Detection
- **Monitor Profile Files:** Locations where `profile.ps1` can be stored should be monitored for new profiles or modifications.
- **Monitor Abnormal Commands:** Monitor for unusual loading of PowerShell drives or modules, and execution of unknown programs.

### JavaScript

Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.

#### Description
JScript is the Microsoft implementation of the same scripting standard, interpreted via the Windows Script engine. JavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple’s Open Scripting Architecture (OSA). Adversaries may abuse various implementations of JavaScript to execute various behaviors, such as hosting malicious scripts on websites as part of a drive-by compromise or downloading and executing these script files as secondary payloads.

#### Detection
- **Monitor Script Execution:** Monitor for events associated with scripting execution, such as process activity, usage of the Windows Script Host, file activity involving scripts, or loading of modules associated with scripting languages.
- **Monitor JXA Usage:** Monitor for execution of JXA through `osascript` and usage of the OSAKit API that may be related to other suspicious behavior.

### DNS

Adversaries may gather information about the victim's DNS that can be used during targeting. DNS information may include a variety of details, including registered name servers and records that outline addressing for a target’s subdomains, mail servers, and other hosts.

#### Description
DNS, MX, TXT, and SPF records may also reveal the use of third-party cloud and SaaS providers. Adversaries may gather this information in various ways, such as querying or collecting details via DNS/Passive DNS. DNS information may also be exposed to adversaries via online or other accessible data sets. Gathering this information may reveal opportunities for other forms of reconnaissance, establishing operational resources, and initial access.

#### Detection
- **Monitor for High Occurrence:** Much of this activity may have a very high occurrence and associated false positive rate, making detection difficult.
- **Focus on Related Stages:** Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.

### Systemd Service

Systemd services can be used to establish persistence on a Linux system. The systemd service manager is commonly used for managing background daemon processes and other system resources.

#### Description
Systemd utilizes configuration files known as service units to control how services boot and under what conditions. By default, these unit files are stored in the `/etc/systemd/system` and `/usr/lib/systemd/system` directories and have the `.service` file extension. Each service unit file may contain numerous directives that can execute system commands. Adversaries have used systemd functionality to establish persistent access to victim systems by creating and/or modifying service unit files that cause systemd to execute malicious commands at recurring intervals.

#### Detection
- **Audit File Creation and Modification:** Audit file creation and modification events within the `/etc/systemd/system`, `/usr/lib/systemd/system/`, and `~/.config/systemd/user/` directories.
- **Compare Against Baseline:** Suspicious systemd services can be identified by comparing results against a trusted system baseline.
- **Monitor Execution:** Analyze the contents of `.service` files present on the file system and ensure they refer to legitimate, expected executables.

### Elevated Execution with Prompt

Adversaries may leverage the `AuthorizationExecuteWithPrivileges` API to escalate privileges by prompting the user for credentials. The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating.

#### Description
Although this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials, but no checks on the origin or integrity of the program are made. The program calling the API may also load world-writable files, which can be modified to perform malicious behavior with elevated privileges.

#### Detection
- **Monitor Executions:** Consider monitoring for `/usr/libexec/security_authtrampoline` executions, which may indicate that `AuthorizationExecuteWithPrivileges` is being executed.
- **System Logs:** MacOS system logs may also indicate when `AuthorizationExecuteWithPrivileges` is being called.
- **API Callbacks:** Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.

### Audio Capture

An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.

#### Description
Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.

#### Detection
- **Telemetry Data:** Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system.
- **Behavior Indicators:** Behavior that could indicate technique use includes an unknown or unusual process accessing APIs associated with devices or software that interact with the microphone, recording devices, or recording software, and a process periodically writing files to disk that contain audio data.

### Create or Modify System Process

Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions.

#### Description
On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user-specific parameters. Adversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.

#### Detection
- **Monitor for Changes:** Monitor for changes to system processes that do not correlate with known software, patch cycles, etc., including by comparing results against a trusted system baseline.
- **Command-line Invocation:** Command-line invocation of tools capable of modifying services may be unusual, depending on how systems are typically used in a particular environment.
- **File Changes:** Monitor for changes to files associated with system-level processes.

### External Remote Services

Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations.

#### Description
Access to valid accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation. Access may also be gained through an exposed service that doesn’t require authentication.

#### Detection
- **Follow Best Practices:** Follow best practices for detecting adversary use of valid accounts for authenticating to remote services. Collect authentication logs and analyze for unusual access patterns, windows of activity, and access outside of normal business hours.
- **Monitor for Follow-on Activities:** When authentication is not required to access an exposed remote service, monitor for follow-on activities such as anomalous external use of the exposed API or application.

### Component Firmware

Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS.

#### Description
This technique may be similar to System Firmware but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.

#### Detection
- **Data and Telemetry:** Data and telemetry from use of device drivers (i.e., processes and API calls) and/or provided by SMART (Self-Monitoring, Analysis and Reporting Technology) disk monitoring may reveal malicious manipulations of components.
- **Disk Check and Forensic Utilities:** Disk check and forensic utilities may reveal indicators of malicious firmware such as strings, unexpected disk partition table entries, or blocks of otherwise unusual memory that warrant deeper investigation.

### LC_LOAD_DYLIB Addition

Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded.

#### Description
The `LC_LOAD_DYLIB` header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies. Adversaries may modify Mach-O binary headers to load and execute malicious dylibs every time the binary is executed.

#### Detection
- **Monitor Processes:** Monitor processes for those that may be used to modify binary headers.
- **Monitor File Systems:** Monitor file systems for changes to application binaries and invalid checksums/signatures. Changes to binaries that do not line up with application updates or patches are also extremely suspicious.

### Steal Web Session Cookie

An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials.

#### Description
Cookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the target machine might store sensitive authentication cookies in memory. Session cookies can be used to bypass some multi-factor authentication protocols.

#### Detection
- **Monitor for Access:** Monitor for attempts to access files and repositories on a local system that are used to store browser session cookies.
- **Process Memory:** Monitor for attempts by programs to inject into or dump browser process memory.

### Container Orchestration Job

Adversaries may abuse task scheduling functionality provided by container orchestration tools such as Kubernetes to schedule deployment of containers configured to execute malicious code.

#### Description
Container orchestration jobs run these automated tasks at a specific date and time, similar to cron jobs on a Linux system. Deployments of this type can also be configured to maintain a quantity of containers over time, automating the process of maintaining persistence within a cluster. In Kubernetes, a CronJob may be used to schedule a Job that runs one or more containers to perform specific tasks.

#### Detection
- **Monitor for Anomalous Jobs:** Monitor for the anomalous creation of scheduled jobs in container orchestration environments.
- **Logging Agents:** Use logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application and resource pods to monitor malicious container orchestration job deployments.

### Domain Generation Algorithms

Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains.

#### Description
DGAs can take the form of apparently random or “gibberish” strings when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters. Many DGAs are time-based, generating a different domain for each time period. Others incorporate a seed value to make predicting future domains more difficult for defenders.

#### Detection
- **Detect DGA Domains:** Detecting dynamically generated domains can be challenging due to the number of different DGA algorithms, constantly evolving malware families, and the increasing complexity of the algorithms.
- **Machine Learning Approaches:** Machine learning approaches to detecting DGA domains have been developed and have seen success in applications.

### Double File Extension

Adversaries may abuse a double extension in the filename as a means of masquerading the true file type. A file name may include a secondary file type extension that may cause only the first extension to be displayed.

#### Description
The second extension is the true file type that determines how the file is opened and executed. The real file extension may be hidden by the operating system in the file browser, as well as in any software configured using or similar to the system’s policies. Adversaries may abuse double extensions to attempt to conceal dangerous file types of payloads. A very common usage involves tricking a user into opening what they think is a benign file type but is actually executable code.

#### Detection
- **Monitor for Files:** Monitor for files written to disk that contain two file extensions, particularly when the second is an executable.