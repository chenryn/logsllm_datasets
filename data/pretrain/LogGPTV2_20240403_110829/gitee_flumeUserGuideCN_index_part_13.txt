配置范例：
``` properties
a1.channels = c1
a1.sinks = k1
a1.sinks.k1.type = irc
a1.sinks.k1.channel = c1
a1.sinks.k1.hostname = irc.yourdomain.com
a1.sinks.k1.nick = flume
a1.sinks.k1.chan = #flume
```
#### File Roll Sink
把 Event 存储到本地文件系统。 必需的参数已用 **粗体** 标明。
+----------------------------+---------+----------------------------+
| 属性                       | 默认值  | 解释                       |
+============================+=========+============================+
| **channel**                | \--     | 与 Sink 绑定的 channel     |
+----------------------------+---------+----------------------------+
| **type**                   | \--     | 组件类型，这个是：         |
|                            |         | `file_roll`.               |
+----------------------------+---------+----------------------------+
| **sink.directory**         | \--     | Event 将要保存的目录       |
+----------------------------+---------+----------------------------+
| sink.pathManager           | DEFAULT | 配置                       |
|                            |         | 使用哪个路径管理器，这个管 |
|                            |         | 理器的作用是按照规则生成新 |
|                            |         | 的存储文件名称，可选值有： |
|                            |         | `default` 、 `rolltime`。  |
|                            |         |                            |
|                            |         | default                    |
|                            |         | 规则：prefix+当前毫秒值+"- |
|                            |         | "+文件序号+"."+extension； |
|                            |         |                            |
|                            |         | rolltime规则               |
|                            |         | ：prefix+yyyyMMddHHmmss+"- |
|                            |         | "+文件序号+"."+extension； |
|                            |         |                            |
|                            |         | 注：prefix 和 extension    |
|                            |         | 如果没有配置则不会附带     |
+----------------------------+---------+----------------------------+
| sink.pathManager.extension | \--     | 如果上面的 *pathManager*   |
|                            |         | 使用默认的话，可以用这     |
|                            |         | 个属性配置存储文件的扩展名 |
+----------------------------+---------+----------------------------+
| sink.pathManager.prefix    | \--     | 如果上面的 *pathManager*   |
|                            |         | 使用默                     |
|                            |         | 认的话，可以用这个属性配置 |
|                            |         | 存储文件的文件名的固定前缀 |
+----------------------------+---------+----------------------------+
| sink.rollInterval          | 30      | 表示每                     |
|                            |         | 隔30秒创建一个新文件进行存 |
|                            |         | 储。如果设置为0，表示所有  |
|                            |         | Event 都会写到一个文件中。 |
+----------------------------+---------+----------------------------+
| sink.serializer            | TEXT    | 配置 Event                 |
|                            |         | 序列化器，可选值有：`text` |
|                            |         | 、 `header_and_text` 、    |
|                            |         | `avro_event`               |
|                            |         | 或者自定义实现了           |
|                            |         | `EventSerializer.Builder`  |
|                            |         | 接口                       |
|                            |         | 的序列化器的全限定类名.。  |
|                            |         | text 只会把 Event 的 body  |
|                            |         | 的文本内容序列化；         |
|                            |         | header_and_text 会把       |
|                            |         | header 和 body             |
|                            |         | 内容都序列化。             |
+----------------------------+---------+----------------------------+
| sink.batchSize             | 100     | 每次事务批处理的 Event 数  |
+----------------------------+---------+----------------------------+
配置范例：
``` properties
a1.channels = c1
a1.sinks = k1
a1.sinks.k1.type = file_roll
a1.sinks.k1.channel = c1
a1.sinks.k1.sink.directory = /var/log/flume
```
#### Null Sink
丢弃所有从 channel 读取到的 Event。 必需的参数已用 **粗体** 标明。
  属性          默认值   解释
  ------------- -------- ----------------------------
  **channel**   \--      与 Sink 绑定的 channel
  **type**      \--      组件类型，这个是： `null`.
  batchSize     100      每次批处理的 Event 数量
配置范例：
``` properties
a1.channels = c1
a1.sinks = k1
a1.sinks.k1.type = null
a1.sinks.k1.channel = c1
```
#### HBaseSinks
##### HBaseSink
此Sink将数据写入 HBase。 Hbase 配置是从classpath中遇到的第一个
hbase-site.xml 中获取的。 配置指定的 *HbaseEventSerializer*
接口的实现类用于将 Event 转换为 HBase put 或 increments。 然后将这些 put
和 increments 写入 HBase。 该Sink提供与 HBase 相同的一致性保证，HBase
是当前行的原子性。 如果 Hbase 无法写入某些
Event，则Sink将重试该事务中的所有 Event。
这个Sink支持以安全的方式把数据写入到 HBase。为了使用安全写入模式，运行
Flume 实例的用户必须有写入 HBase
目标表的写入权限。可以在配置中指定用于对 KDC
进行身份验证的主体和密钥表。 Flume 的 classpath 中的 hbase-site.xml
必须将身份验证设置为
kerberos（有关如何执行此操作的详细信息，请参阅HBase文档）。
Flume提供了两个序列化器。第一个序列化器是 SimpleHbaseEventSerializer (
*org.apache.flume.sink.hbase.SimpleHbaseEventSerializer* ) ，它把 Event
body 原样写入到HBase，并可选增加HBase列，这个实现主要就是提供个例子。
第二个序列化器是 RegexHbaseEventSerializer (
*org.apache.flume.sink.hbase.RegexHbaseEventSerializer* ) ，它把 Event
body 按照给定的正则进行分割然后写入到不同的列中。
必需的参数已用 **粗体** 标明。
  属性                 默认值                                                   解释
  -------------------- -------------------------------------------------------- -----------------------------------------------------------------------------------------------------------------------
  **channel**          \--                                                      与 Sink 绑定的 channel
  **type**             \--                                                      组件类型，这个是： `hbase`
  **table**            \--                                                      要写入的 Hbase 表名
  **columnFamily**     \--                                                      要写入的 Hbase 列族
  zookeeperQuorum      \--                                                      Zookeeper 节点（host:port格式，多个用逗号分隔），hbase-site.xml 中属性 *hbase.zookeeper.quorum* 的值
  znodeParent          /hbase                                                   ZooKeeper 中 HBase 的 Root ZNode 路径，hbase-site.xml中 zookeeper.znode.parent 的值。
  batchSize            100                                                      每个事务写入的 Event 数量
  coalesceIncrements   false                                                    每次提交时，Sink是否合并多个 increment 到一个 cell。如果有限数量的 cell 有多个 increment ，这样可能会提供更好的性能。
  serializer           org.apache.flume.sink.hbase.SimpleHbaseEventSerializer   指定序列化器。默认的increment column = "iCol"， payload column = "pCol"。
  serializer.\*        \--                                                      序列化器的属性
  kerberosPrincipal    \--                                                      以安全方式访问 HBase 的 Kerberos 用户主体
  kerberosKeytab       \--                                                      以安全方式访问 HBase 的 Kerberos keytab 文件目录
配置范例：
``` properties
a1.channels = c1
a1.sinks = k1
a1.sinks.k1.type = hbase
a1.sinks.k1.table = foo_table
a1.sinks.k1.columnFamily = bar_cf
a1.sinks.k1.serializer = org.apache.flume.sink.hbase.RegexHbaseEventSerializer
a1.sinks.k1.channel = c1
```
##### HBase2Sink
::: hint
::: title
Hint
:::
这是Flume 1.9新增的Sink。
:::
HBase2Sink 是HBaseSink的HBase 2版本。
所提供的功能和配置参数与HBaseSink相同
必需的参数已用 **粗体** 标明。
  属性                 默认值                                                     解释
  -------------------- ---------------------------------------------------------- --------------------------------------------------------------------------------------------------------------------
  **channel**          \--                                                        与 Sink 绑定的 channel
  **type**             \--                                                        组件类型，这个是： `hbase2`
  **table**            \--                                                        要写入的 Hbase 表名
  **columnFamily**     \--                                                        要写入的 Hbase 列族
  zookeeperQuorum      \--                                                        Zookeeper 节点（host:port格式，多个用逗号分隔），hbase-site.xml 中属性 *hbase.zookeeper.quorum* 的值
  znodeParent          /hbase                                                     ZooKeeper 中 HBase 的 Root ZNode 路径，hbase-site.xml 中 *zookeeper.znode.parent* 的值
  batchSize            100                                                        每个事务写入的Event数量
  coalesceIncrements   false                                                      每次提交时，Sink是否合并多个 increment 到一个cell。如果有限数量的 cell 有多个 increment ，这样可能会提供更好的性能
  serializer           org.apache.flume.sink.hbase2.SimpleHBase2EventSerializer   默认的列 increment column = \"iCol\", payload column = \"pCol\"
  serializer.\*        \--                                                        序列化器的一些属性
  kerberosPrincipal    \--                                                        以安全方式访问 HBase 的 Kerberos 用户主体
  kerberosKeytab       \--                                                        以安全方式访问 HBase 的 Kerberos keytab 文件目录
配置范例：
``` properties
a1.channels = c1
a1.sinks = k1
a1.sinks.k1.type = hbase2
a1.sinks.k1.table = foo_table
a1.sinks.k1.columnFamily = bar_cf
a1.sinks.k1.serializer = org.apache.flume.sink.hbase2.RegexHBase2EventSerializer
a1.sinks.k1.channel = c1
```
##### AsyncHBaseSink
这个Sink使用异步模型将数据写入HBase。这个Sink使用
*AsyncHbaseEventSerializer* 这个序列化器来转换 Event 为 HBase 的 put 和
increment，然后写入到 HBase。 此Sink使用 [Asynchbase
API](https://github.com/OpenTSDB/asynchbase) 来写入 HBase。该Sink提供与
HBase 相同的一致性保证，HBase 是当前行的原子性。 如果 Hbase 无法写入某些
Event，则Sink将重试该事务中的所有 Event。
AsyncHBaseSink只能在HBase 1.x版本上使用，因为AsyncHBaseSink使用的async
client不兼容HBase 2。
必需的参数已用 **粗体** 标明。
  属性                 默认值                                                        解释
  -------------------- ------------------------------------------------------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  **channel**          \--                                                           与 Sink 绑定的 channel
  **type**             \--                                                           组件类型，这个是： `asynchbase`
  **table**            \--                                                           要写入的 Hbase 表名
  zookeeperQuorum      \--                                                           Zookeeper 节点（host:port格式，多个用逗号分隔），hbase-site.xml 中属性 *hbase.zookeeper.quorum* 的值
  znodeParent          /hbase                                                        ZooKeeper 中 HBase 的 Root ZNode 路径，hbase-site.xml 中 *zookeeper.znode.parent* 的值
  **columnFamily**     \--                                                           要写入的 Hbase 列族
  batchSize            100                                                           每个事务写入的Event数量
  coalesceIncrements   false                                                         每次提交时，Sink是否合并多个 increment 到一个cell。如果有限数量的 cell 有多个 increment ，这样可能会提供更好的性能
  timeout              60000                                                         Sink为事务中所有 Event 等待来自 HBase 响应的超时时间（毫秒）
  serializer           org.apache.flume.sink.hbase.SimpleAsyncHbaseEventSerializer   序列化器
  serializer.\*        \--                                                           序列化器的一些属性
  async.\*             \--                                                           AsyncHBase库的一些参数配置，这里配置的参数优先于上面的原来的 `zookeeperQuorum` 和 `znodeParent` ，你可以在这里查看它支持的参数列表 [the documentation page of AsyncHBase](http://opentsdb.github.io/asynchbase/docs/build/html/configuration.html#properties)。
如果配置文件中没有提供这些参数配置，Sink就会从 classpath 中第一个
hbase-site.xml 中读取这些需要的配置信息。
配置范例：
``` properties
a1.channels = c1
a1.sinks = k1
a1.sinks.k1.type = asynchbase
a1.sinks.k1.table = foo_table
a1.sinks.k1.columnFamily = bar_cf
a1.sinks.k1.serializer = org.apache.flume.sink.hbase.SimpleAsyncHbaseEventSerializer
a1.sinks.k1.channel = c1
```
#### MorphlineSolrSink
此Sink从 Flume的 Event 中提取数据，对其进行转换，并将其近乎实时地加载到
Apache Solr 服务器中，后者又向最终用户或搜索应用程序提供查询服务。
此Sink非常适合将原始数据流式传输到 HDFS（通过HDFS
Sink）并同时提取、转换并将相同数据加载到
Solr（通过MorphlineSolrSink）的使用场景。特别是，此Sink可以处理来自不同数据源的任意异构原始数据，并将其转换为对搜索应用程序有用的数据模型。
ETL 功能可使用 morphline
的配置文件进行自定义，该文件定义了一系列转换命令，用于将 Event
从一个命令传递到另一个命令。