# 六、测试 Helm 图
测试是工程师在软件开发过程中必须执行的常见任务。执行测试是为了验证产品的功能，并防止产品随着时间的推移而退化。经过良好测试的软件随着时间的推移更容易维护，并允许开发人员更自信地向最终用户提供新版本。
应该对 Helm 图表进行适当的测试，以确保其交付的特性达到预期的质量水平。在本章中，我们将讨论实现健壮的 Helm 图表测试的方法，包括以下主题:
*   设置您的环境
*   验证 Helm 模板
*   在实时集群中进行测试
*   用图表测试项目改进图表测试
*   清理
# 技术要求
本章将使用以下技术:
*   `minikube`
*   `kubectl`
*   `helm`
*   `git`
*   `yamllint`
*   `yamale`
*   `chart-testing` ( `ct`)
除了这些工具，您还可以跟随位于[https://github.com/PacktPublishing/-Learn-Helm](https://github.com/PacktPublishing/-Learn-Helm)的 Packt GitHub 存储库中的示例，这将在本章中引用。在本章使用的许多示例命令中，我们将引用 Packt 存储库，因此您可能会发现通过运行`git clone`命令来克隆该存储库很有帮助:
```
$ git clone https://github.com/PacktPublishing/-Learn-Helm Learn-Helm
```
现在，让我们继续设置您的本地`minikube`环境。
# 设置您的环境
在本章中，我们将为上一章中创建的`Guestbook`图表创建并运行一系列测试。运行以下步骤来设置您的`minikube`环境，我们将在其中测试留言簿图表:
1.  运行`minikube start`命令启动`minikube`:
    ```
    minikube start
    ```
2.  然后，创建一个名为`chapter6` :
    ```
    kubectl create namespace chapter6
    ```
    的新命名空间
准备好`minikube`环境后，让我们开始讨论如何测试 Helm 图表。我们将从概述您可以用来验证 Helm 模板的方法开始讨论。
# 验证头盔模板
在前一章中，我们从头开始构建了一个 Helm 图。最终的产品相当复杂，包含参数化、条件模板化和生命周期挂钩。由于 Helm 的主要目的之一是创建 Kubernetes 资源，因此您应该确保在将资源模板应用到 Kubernetes 集群之前，正确生成资源模板。这可以通过多种方式实现，我们将在下一节中讨论。
## 使用掌舵模板在本地验证模板生成
验证图表模板的第一种方法是使用`helm template`命令，该命令可用于在本地渲染图表模板，并在标准输出中显示其完全渲染的内容。
`helm template`命令具有以下语法:
```
$ helm template [NAME] [CHART] [flags]
```
该命令在本地渲染一个模板，使用`NAME`参数来满足内置对象的`.Release`和包含 Kubernetes 模板的图表的`CHART`参数。Packt 存储库中的`helm-charts/charts/guestbook`文件夹可用于演示`helm template`命令的功能。此文件夹包含上一节中开发的图表以及本章稍后将使用的其他资源。
通过运行以下命令在本地渲染`guestbook`图表:
```
$ helm template my-guestbook Learn-Helm/helm-charts/charts/guestbook
```
该命令的结果将显示每个 Kubernetes 资源，如果将它们应用于集群，将会创建这些资源，如图所示:
![Figure 6.1 – The ConfigMap for the guestbook chart ](img/Figure_6.1.jpg)
图 6.1–“舵模板”输出
上一张截图显示了`helm template`命令输出的开始部分，该命令是针对上一章创建的留言簿图表执行的。正如你所看到的，一个完全渲染的`ConfigMap`与另一个随着版本创建的`ConfigMap`一起显示。在本地呈现这些资源可以让您了解如果版本是针对 Kubernetes 集群安装的话，将会创建的确切资源和规范。
在图表开发过程中，您可能希望定期使用`helm template`命令来验证您的 Kubernetes 资源是否生成正确。
您想要验证的图表开发的一些常见方面包括:
*   参数化字段被默认值或重写值成功替换
*   控制动作如`if`、`range`和`with`根据提供的值成功生成 YAML 文件
*   资源包含适当的间距和缩进
*   正确使用函数和管道来正确格式化和操作 YAML 文件
*   诸如`required`和`fail`之类的函数基于用户输入正确地验证值
了解了如何在本地呈现图表模板后，现在让我们深入了解一些具体方面，您可以通过利用`helm template`逗号 nd 来测试和验证这些方面。
### 测试模板参数化
检查模板参数是否成功填充了值非常重要。这很重要，因为你的图表将可能由多个不同的值组成。您可以通过确保每个值都有一个合理的默认值，或者如果没有提供值，则验证会导致图表呈现失败，从而确保图表被正确参数化。
设想以下部署:
```
apiVersion: apps/v1
kind: Deployment
  replicas: {{ .Values.replicas }}
          ports:
            - containerPort: {{ .Values.port }}
```
`replicas`和`port`值的合理默认值应在图表的`values.yaml`文件中定义，如下所示:
```
replicas: 1
port: 8080
```
对该模板资源运行`helm template`命令会呈现以下部署，用默认值替换`replicas`和`port`值:
```
apiVersion: apps/v1
kind: Deployment
  replicas: 1
          ports:
            - containerPort: 8080
```
`helm template`的输出允许您验证您的参数是否被其默认值正确替换。您也可以通过将`--values`或`--set`参数传递给`helm template`命令来验证所提供的值是否被成功覆盖:
```
$ helm template my-chart $CHART_DIRECTORY --set replicas=2
```
生成的模板反映了您提供的值:
```
apiVersion: apps/v1
kind: Deployment
  replicas: 2
          ports:
            - containerPort: 8080
```
虽然定义了默认设置的值通常很容易用`helm template`进行测试，但更重要的是测试需要验证的值，因为无效值会妨碍图表的正确安装。
您应该使用`helm template`来确保带有限制的值，例如那些只有允许特定输入的值，通过`required`和`fail`函数成功验证。
想象一下下面的部署模板:
```
apiVersion: apps/v1
kind: Deployment
  replicas: {{ .Values.replicas }}
      containers:
        - name: main
          image: {{ .Values.imageRegistry }}/{{ .Values.imageName }}
          ports:
            - containerPort: {{ .Values.port }}
```
如果此部署属于具有与前面代码块中定义的相同`values`文件的图表，并且您期望用户提供`imageRegistry`和`imageName`值来安装图表，那么如果您使用`helm template`命令而不提供这些值，那么结果就不尽如人意，如以下输出所示:
```
apiVersion: apps/v1
kind: Deployment
  replicas: 1
      containers:
        - name: main
          image: /
          ports:
            - containerPort: 8080
```
由于处没有门控，渲染结果是一个带有无效映像`/`的部署。因为我们用`helm template`测试了这个，我们知道我们需要处理这些值没有定义的情况。这可以通过使用`required`功能来验证这些值是否被指定来实现:
```
apiVersion: apps/v1
kind: Deployment
  replicas: {{ .Values.replicas }}
      containers:
        - name: main
          image: {{ required 'value 'imageRegistry' is required' .Values.imageRegistry }}/{{ required 'value 'imageName' is required' .Values.imageName }}
          ports:
            - containerPort: {{ .Values.port }}
```
当`helm template`命令应用于具有更新的部署模板的图表时，结果显示一条消息，指示用户提供模板引擎遇到的第一个缺失值:
```
$ helm template my-chart $CHART_DIRECTORY
Error: execution error at (test-chart/templates/deployment.yaml:17:20): value 'imageRegistry' is required
```
您可以通过在`helm template`命令旁边提供有效值文件来进一步测试该验证。对于本例，我们将假设用户管理的`values`文件中提供了以下值:
```
imageRegistry: my-registry.example.com
imageName: learnhelm/my-image
```
执行以下命令时可以提供该文件:
```
$ helm template my-chart $CHART_DIRECTORY --values my-values.yaml
---
# Source: test-chart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
  replicas: 1
      containers:
        - name: main
          image: my-registry.example.com/learnhelm/my-image
          ports:
            - containerPort: 8080
```
作为参数化的一般经验法则，请确保跟踪您的值，并确保每个值都在图表中使用。在`values.yaml`文件中设置合理的默认值，在无法设置默认值的情况下使用`required`功能。使用`helm template`功能，确保值被正确渲染并产生所需的 Kubernetes 资源配置。
另外，您可能还想考虑将所需的值作为空字段包含在您的`values.yaml`文件中，并注明它们是必需的。这允许用户查看您的`values.yaml`文件并查看您的图表支持的所有值，包括他们需要为自己提供的值。在添加了`imageRegistry`和`imageName`值后，考虑以下`values`文件:
```
replicas: 1
port: 8080
## REQUIRED
imageRegistry:
## REQUIRED
imageName:
```
虽然这些值被写入图表的`values.yaml`文件中，但是当`helm template`命令运行时，这些值的计算结果仍然为空，提供了与先前执行中未定义的值相同的行为。不同的是，您现在可以明确地看到这些值是必需的，所以当您第一次尝试安装图表时，您不会感到惊讶。
接下来，我们将讨论在本地生成图表模板如何帮助您测试图表的控制动作。
### 测试控制动作
除了基本的参数化，您还应该考虑使用`helm template`命令来验证控制动作(特别是`if`和`range`)是否被正确处理以产生期望的结果。
考虑以下部署模板:
```
apiVersion: apps/v1