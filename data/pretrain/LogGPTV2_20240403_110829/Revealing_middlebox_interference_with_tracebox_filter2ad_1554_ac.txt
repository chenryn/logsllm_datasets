We performed some tests with tracebox to verify whether
the recently proposed Multipath TCP [6] option could be
safely used over the Internet. This is similar to the un-
known option test performed by Honda et al. [4]. However,
on the contrary to Honda et al., tracebox allows one to
probe a large number of destinations. To our surprise, when
running the tests, tracebox identiﬁed about ten Multipath
TCP servers based on the TCP option they returned. One
of those server, www.baidu.com, belongs to the top 5 Alexa.
All these servers where located inside China. A closer look
at these options revealed that these servers (or their load
balancers) simply echo a received unknown TCP option in
the SYN+ACK. This is clearly an incorrect TCP implemen-
tation.
4.2 Proxy Detection
tracebox can also be used to detect TCP proxies. To be
able to detect a TCP proxy, tracebox must be able to send
TCP segments that are intercepted by the proxy and other
packets that are forwarded beyond it. HTTP proxies are fre-
quently used in cellular and enterprise networks [3]. Some
of them are conﬁgured to transparently proxy all TCP con-
nections on port 80. To test the ability of detecting proxies
with tracebox, we used a script that sends a SYN probe to
port 80 and, then, to port 21. If there is an HTTP proxy
on the path, it should intercept the SYN probe on port 80
while ignoring the SYN on port 21. We next analyze the
ICMP messages returned.
From our simple PlanetLab deployment, we identiﬁed two
oddities. First, we found an HTTP proxy or more probably
an IDS within a National Research Network (SUNET) as it
only operated for a few destinations and that the path for
port 80 was shorter than for port 21. Second, and more dis-
turbing, tracebox identiﬁed that several destinations where
behind a proxy whose conﬁguration, inferred from the re-
turned ICMP messages, resulted in a forwarding loop for
probes that are not HTTP. We observed that the SYN probe
on port 21, after reaching the supposed proxy, bounced from
one router to the other in a loop as tracebox received ICMP
replies from one router then another alternatively.
4.3 NAT Detection
NATs are probably the most widely deployed middleboxes.
Detecting them by using tracebox would likely be useful for
network operators. However, in addition to changing ad-
dresses and port numbers of the packets that they forward,
NATs often also change back the returned ICMP message
and the quoted packet. This implies that, when inspecting
the received ICMP message, tracebox would not be able to
detect the modiﬁcation.
This does not prevent tracebox from detecting many NATs.
Indeed, most NATs implement Application-level Gateways
(ALGs) [22] for protocols such as FTP. Such an ALG modi-
ﬁes the payload of forwarded packets that contain the PORT
command on the ftp-control connection. tracebox can
detect these ALGs by noting that they do not translate the
quoted packet in the returned ICMP messages. This de-
tection is written as a simple script (shown in Fig 6) that
interacts with tracebox. It builds and sends a SYN for the
FTP port number and, then, waits for the SYN+ACK. The
script makes sure that the SYN+ACK is not handled by
the TCP stack of the host by conﬁguring the local ﬁrewall
(using the ﬁlter functionality, shown at line 7, of tracebox
that conﬁgures iptables on Linux and ipfw on Mac OS
X). It then sends a valid segment with the PORT command
and the encoded IP address and port number as payload.
tracebox then compares the transmitted packet with the
quoted packet returned inside an ICMP message by an
RFC1812-compliant router and stores the modiﬁcation ap-
plied to the packet. If a change occurs and a callback func-
tion has been passed as argument, tracebox triggers the
callback function. In Fig 6, the callback cb checks whether
51
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
-- NAT FTP detection
-- To run with: tracebox -s  
-- Build the initial SYN (dest is passed to tracebox)
syn = IP / tcp{dst=21}
-- Avoid the host’s stack to reply with a reset
fp = filter(syn)
synack = tracebox(syn)
if not synack then
print("Server did not reply...")
fp:close()
return
end
-- Check if SYN+ACK flags are present
if synack:tcp():getflags() ~= 18 then
print("Server does not seems to be a FTP server")
fp:close()
return
end
-- Build the PORT probe
ip_port = syn:source():gsub("%.", ",")
data = IP / tcp{src=syn:tcp():getsource(), dst=21,
seq=syn:tcp():getseq()+1,
ack=synack:tcp():getseq()+1, flags=16} /
raw(’PORT ’.. ip_port .. ’,189,68\r\n’)
-- Send probe and allow cb to be called for each reply
function cb(ttl, rip, pkt, reply, mods)
if mods and mods:__tostring():find("Raw") then
print("There is a NAT before " .. rip)
return 1
end
end
tracebox(data, {callback = "cb"})
fp:close()
Figure 6: Sample script to detect a NAT FTP.
there has been a payload modiﬁcation.
If it is the case a
message showing the approximate position of the ALG on
the path is printed (see line 29).
5. RELATED WORK
Since the end of the nineties, the Internet topology dis-
covery has been extensively studied [23, 24].
In particu-
lar, traceroute [7] has been used for revealing IP interfaces
along the path between a source and a destination. Since
then, traceroute has been extended in order to mitigate
its intrinsic limitations. From simple extensions (i.e., the
types of probes sent [25, 26]) to much more developed mod-
iﬁcations. For instance, traceroute has been improved to
face load balancing [27] or the reverse path [28]. Its probing
speed and eﬃciency has also been investigated [29, 30, 31].
To the best of our knowledge, none of the available trace-
route extensions allows one to reveal middlebox interference
along real Internet paths as tracebox does.
Medina et al. [21] report one of the ﬁrst detailed analysis
of the interactions between transport protocols and middle-
boxes. They rely on active probing with tbit and contact
various web servers to detect whether Explicit Congestion
Notiﬁcation (ECN) [32], IP options, and TCP options can be
safely used. The TCPExposure software developed by Honda
et al. [4] is closest to tracebox. It also uses specially crafted
packets to test for middlebox interference.
Wang et al. [3] analyzed the impact of middleboxes in
hundreds of cellular networks. This study revealed various
types of packet modiﬁcations. These three tools provide
great results, but they are limited to speciﬁc paths as both
ends of the path must be under control. This is a limitation
since some middleboxes are conﬁgured to only process the
packets sent to speciﬁc destination or ports. On the con-
trary, tracebox does not require any cooperation with the
service. It allows one to detect middleboxes on any path,
i.e., between a source and any destination. Our measure-
ments reveal middleboxes that are close to the clients but
also close to the server.
Sherry et al. [1] have relied on network conﬁguration ﬁles
to show the widespread deployment of middleboxes. Still,
their study does not reveal the impact of these middleboxes
on actual packets.
6. CONCLUSION
Middleboxes are becoming more and more popular in var-
ious types of networks (enterprise, cellular network, etc.).
Those middleboxes are supposed to be transparent to users.
It has been shown that they frequently modify packets travers-
ing them, sometimes making protocols useless. Further, due
to the lack of eﬃcient and easy-to-use debugging tools, mid-
dleboxes are diﬃcult to manage.
This is exactly what we tackled in this paper by propos-
ing, discussing, and evaluating tracebox. tracebox is a new
extension to traceroute that allows one to reveal the pres-
ence of middleboxes along a path. It detects various types
of packet modiﬁcations and can be used to locate where
those modiﬁcations occur. We deployed it on the PlanetLab
testbed and demonstrated its capabilities by discussing sev-
eral use cases. tracebox is open-source and publicly avail-
able [12].
tracebox opens new directions to allow researchers to
better understand the deployment of middleboxes in the
global Internet. In the coming months, we plan to perform
large-scale measurement campaigns to analyze in more de-
tails middlebox interferences in IPv4 and IPv6 networks.
tracebox could also be extended to ﬁngerprint speciﬁc mid-
dleboxes.
Acknowledgments
We are grateful to the anonymous reviewers for their feed-
back. We would also like to thank Randy Bush, Matsuzaki
Yoshinobu, Marc Neuckens, Pierre Reinbold, Bruno Del-
court and Claire Delcourt for assistance in understanding
the middleboxes present in their networks.
This work is partially funded by the European Commis-
sion funded mPlane (ICT-318627) and CHANGE (INFSO-
ICT-257422) projects and the BESTCOM IAP.
7. REFERENCES
[1] J. Sherry, S. Hasan, C. Scott, A. Krishnamurthy,
S. Ratnasamy, and V. Sekar, “Making middleboxes
someone else’s problem: Network processing as a cloud
service,” in Proc. ACM SIGCOMM, August 2012.
[2] B. Carpenter and S. Brim, “Middleboxes: Taxonomy
and issues,” Internet Engineering Task Force, RFC
3234, February 2002.
[3] Z. Wang, Z. Qian, Q. Xu, Z. Mao, and M. Zhang, “An
untold story of middleboxes in cellular networks,” in
Proc. ACM SIGCOMM, August 2011.
[4] M. Honda, Y. Nishida, C. Raiciu, A. Greenhalgh,
M. Handley, and H. Tokuda, “Is it still possible to
extend TCP,” in Proc. ACM/USENIX Internet
Measurement Conference (IMC), November 2011.
[5] R. Stewart, Q. Xie, K. Morneault, C. Sharp,
H. Schwarzbauer, T. Taylor, I. Rytina, M. Kalla,
6L. Zhang, and V. Paxson, “Stream control
transmission protocol,” Internet Engineering Task
Force, RFC 2960, October 2000.
[6] A. Ford, C. Raiciu, M. Handley, and O. Bonaventure,
“TCP extensions for multipath operation with
multiple addresses,” Internet Engineering Task Force,
RFC 6824, January 2013.
[7] V. Jacobson et al., “traceroute,” UNIX, man page,
1989, see source code:
ftp://ftp.ee.lbl.gov/traceroute.tar.gz.
[8] J. Postel, “Internet control message protocol,” Internet
[21] A. Medina, M. Allman, and S. Floyd, “Measuring
interactions between transport protocols and
middleboxes,” in Proc. ACM SIGCOMM Internet
Measurement Conference (IMC), October 2004.
[22] P. Srisuresh and M. Holdrege, “IP network address
translator (NAT) terminology and considerations,”
Internet Engineering Task Force, RFC 2663, August
1999.
[23] B. Donnet and T. Friedman, “Internet topology
discovery: a survey,” IEEE Communications Surveys
and Tutorials, vol. 9, no. 4, December 2007.
Engineering Task Force, RFC 792, September 1981.
[24] H. Haddadi, G. Iannaccone, A. Moore, R. Mortier,
[9] F. Baker, “Requirements for IP version 4 routers,”
Internet Engineering Task Force, RFC 1812, June
1995.
and M. Rio, “Network topologies: Inference, modeling
and generation,” IEEE Communications Surveys and
Tutorials, vol. 10, no. 2, pp. 48–69, April 2008.
[10] R. Ierusalimschy, L. H. de Figueiredo, and W. Celes,
[25] M. Torren, “tcptraceroute - a traceroute
“LUA, an extensible extension language,” Software:
Pactice & Experience, vol. 26, no. 6, pp. 635–652,
June 1996.
[11] P. Biondi, “Scapy,” see
http://www.secdev.org/projects/scapy/.
[12] G. Detal, “tracebox,” July 2013, see
http://www.tracebox.org.
[13] E. Kohler, R. Morris, B. Chen, J. Jannotti, and
F. Kaashoek, “The click modular router,” ACM
Transactions on Computer Systems, vol. 18, no. 3, pp.
263–297, August 2000.
[14] B. Hesmans, “Mbclick,” July 2013, see
https://bitbucket.org/bhesmans/mbclick.
[15] A. Heﬀernan, “Protection of BGP sessions via the
TCP MD5 signature option,” Internet Engineering
Task Force, RFC 2385, August 1998.
[16] V. Jacobson, R. Braden, and D. Borman, “TCP
extensions for high performance,” Internet Engineering
Task Force, RFC 1323, May 1992.
[17] Microsoft, “Patch available to improve TCP initial
sequence number randomness,” Microsoft, Microsoft
Security Bulletin MS99-066, October 1999, see
http://technet.microsoft.com/en-us/security/bulletin/
ms99-046.
[18] M. Mathis, J. Mahdavi, S. Floyd, and A. Romanow,
“TCP selective acknowledgement options,” Internet
Engineering Task Force, RFC 2018, October 1996.
[19] C. Paasch, “Presentation ietf 87,” July 2013, see
http://tools.ietf.org/agenda/87/slides/
slides-87-tcpm-11.pdf.
[20] J. Mogul and S. Deering, “Path MTU discovery,”
Internet Engineering Task Force, RFC 1191,
November 1990.
implementation using TCP packets,” UNIX, man
page, 2001, see source code:
http://michael.toren.net/code/tcptraceroute/.
[26] M. Luckie, Y. Hyun, and B. Huﬀaker, “Traceroute
probe methode and forward IP path inference,” in
ACM SIGCOMM Internet Measurement Conference
(IMC), October 2008.
[27] B. Augustin, X. Cuvellier, B. Orgogozo, F. Viger,
T. Friedman, M. Latapy, C. Magnien, and R. Teixeira,
“Avoiding traceroute anomalies with Paris traceroute,”
in Proc. ACM/USENIX Internet Measurement
Conference (IMC), October 2006.
[28] E. Katz-Bassett, H. Madhyastha, V. Adhikari,
C. Scott, J. Sherry, P. van Wesep, A. Krishnamurthy,
and T. Anderson, “Reverse traceroute,” in Proc.
USENIX Symposium on Networked Systems Design
and Implementations (NSDI), June 2010.
[29] B. Donnet, P. Raoult, T. Friedman, and M. Crovella,
“Eﬃcient algorithms for large-scale topology
discovery,” in Proc. ACM SIGMETRICS, June 2005.
[30] R. Beverly, A. Berger, and G. Xie, “Primitives for
active Internet topology mapping: Toward
high-frequency characterization,” in Proc.
ACM/USENIX Internet Measurement Conference
(IMC), November 2010.
[31] T. Bourgeau and T. Friedman, “Eﬃcient IP-level
network topology capture,” in Proc. Passive and
Active Measurement Conference (PAM), March 2013.
[32] K. Ramakrishnan, S. Floyd, and D. Black, “The
addition of explicit congestion notiﬁcation (ECN) to
IP,” Internet Engineering Task Force, RFC 3168,
September 2001.
7