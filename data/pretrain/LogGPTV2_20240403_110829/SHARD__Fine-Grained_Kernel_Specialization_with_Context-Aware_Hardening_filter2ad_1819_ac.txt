vice provider’s machine. However, the service provider does
not trust their clients. There can be many reasons for clients
to attack the system, such as stealing information related to
other clients, taking control of the machine to corrupt the
service, compromising other services on the same machine,
or hiding evidence of attacks. We assume that controlling
the client-facing application process is not enough because
the application is sandboxed (e.g., Native Client [60], Linux
containers [45]), hence, the adversary needs to control the sys-
tem’s kernel to attack the provider. For presentation purposes,
we assume only one client-facing application but SHARD
works with groups of applications as well.
Trusted applications. The service provider may also need
to run trusted supporting services (e.g., back-end encryption
engine for a database) on the same machine that do not accept
input from the adversarial clients and are sandboxed from
direct attacks by the untrusted application.
Kernel. We assume the service provider has access to the
source code of the kernel; therefore, they can statically and
dynamically analyze the kernel and instrument it.
time, from client-facing applications.
The adversary is capable of launching control-ﬂow hijacks
against the system’s kernel. Such attacks redirect the pro-
gram’s control-ﬂow to an arbitrary location by reusing the
code in the memory (i.e., system kernel in our case). The
requirements [51] for such attacks are (a) the existence of
an out-of-bounds or dangling pointer vulnerability that can
overwrite a code pointer, such as a function pointer or return
address and (b) the ability to execute an exploit payload (e.g.,
through ROP [49] or JOP gadgets [23]).
Kernel Assumptions. The system kernel is benign (i.e., writ-
ten by honest developers) but may contain bugs (e.g., memory-
safety violations). We make the following standard CFI as-
sumptions [29] about the kernel:
• Kernel uses NX protection or similar [2] to prevent
writes to kernel executable memory, thus code-injection
attacks are not possible unless protections are disabled.
• The kernel boots in a trusted state, therefore, the ini-
tial kernel image is not corrupted and does not contain
malicious code.
Out-of-scope. We assume that the SHARD framework and
the hardware is trusted and beyond the control of the adver-
sary. Side-channel attacks (e.g., cache attacks) and micro-
architectural leaks, although important, are not speciﬁc to
the kernel. Furthermore, such channels could be disabled by
ﬁrmware patches [13] or software solutions [63]. Finally, the
adversary does not have physical access to the machine, there-
fore, hardware attacks are out-of-scope.
6 Threat Model
7 Design of SHARD
Attacker Capabilities. An adversary may control all client-
facing applications and the libraries used by these applications
to mount attacks against the kernel. In particular, the adversary
may invoke any system call, using any parameters and at any
This section provides a description of SHARD including a
design overview (§7.1) and a description of the ofﬂine analy-
sis (§7.2), kernel instrumentation (§7.3), and run-time kernel
specialization and hardening enforcement (Figure 7.4).
7.1 Overview
ened code pages with the previous specialized code pages.
Figure 3: Workﬂow of SHARD.
The SHARD framework consists of an ofﬂine analysis phase to
generate specialized conﬁgurations for each target application
and an online phase that enables, during run-time, kernel (de-
bloating) specialization and context-aware hardening based
on the generated conﬁgurations. Figure 3 demonstrates the
workﬂow of SHARD.
During the ofﬂine analysis ( 1 ∼ 2 ), SHARD ﬁrst creates
a static control-ﬂow graph of the kernel to identify the un-
reachable code for each system call ( 1 ). Then, SHARD dy-
namically proﬁles the target application to identify the ker-
nel code required and commonly used by the application,
i.e., reachable code ( 2 ). The remaining kernel code is la-
beled potentially reachable. Using the ofﬂine analysis infor-
mation, SHARD creates per-application conﬁgurations and
instruments the kernel code ( 3 ) for the online phase.
During the online phase ( 4 ∼ 6 ), SHARD installs a VMX
security monitor to enforce specialization policies. The
SHARD monitor performs three tasks: (a) track the context
switches involving the untrusted application and its system
call invocations, (b) specialize the kernel-view of the untrusted
application on each system call, and (c) implement kernel
context-aware hardening using control-ﬂow integrity [20] dur-
ing a system call if, and when, it executes potentially reach-
able code.
SHARD detects context switches to and from the target ap-
plication and system call invocation using lightweight kernel
instrumentation on context switch functions and system call
handlers ( 4 ). On each system call invoked by the untrusted
application, SHARD transparently replaces the kernel’s code
pages based on the application’s conﬁguration, as determined
by the ofﬂine analysis ( 5 ). This step debloats the kernel (i.e.,
disables the unreachable code) and allows SHARD to detect
kernel transitions to potentially reachable code. On detecting
a transition to potentially reachable code, SHARD similarly
replaces the kernel’s code pages with hardened versions ( 6 ).
Finally, when the kernel execution returns from potentially
reachable code to reachable code, SHARD replaces the hard-
7.2 Ofﬂine Analysis
This section describes how SHARD generates a target appli-
cation’s kernel conﬁguration, which outlines the kernel code
required by the application on a per-system call basis. To
strike a balance between efﬁciency and effectiveness, SHARD
generates conﬁgurations using function-level granularity, i.e.,
SHARD determines which kernel functions are executed for
a given system call. SHARD implements two main analysis
stages: (a) static control-ﬂow graph generation and (b) dy-
namic proﬁling using application workloads.
Static control-ﬂow graph generation. SHARD statically an-
alyzes the kernel to create a control-ﬂow graph (CFG) of the
kernel. In particular, the CFG differentiates the reachable
+ potentially reachable kernel code from the unreachable
kernel code for each system-call. Note that while the CFG
over-estimates the potentially reachable code (as mentioned
in §2.1), it is sound when it determines that code is unreach-
able. The CFG is generated once per-kernel version, regard-
less of the target application.
SHARD leverages a two-layered type analysis algo-
rithm [42] to generate the CFG. This two-layered analysis ex-
ploits the kernel’s extensive use of struct types for function
pointer storage, to signiﬁcantly increase precision over previ-
ous approaches [55]. It matches indirect call sites which load
function pointers from a ﬁeld within a struct, to functions
stored to that ﬁeld of that struct for precisely identifying
the number of potential targets for the call site. In addition,
SHARD also uses the generated control-ﬂow graph to enforce
control-ﬂow integrity in context-aware hardening (§7.4).
Dynamic proﬁling using application workloads. SHARD
executes the target applications using representative work-
loads (e.g., benchmarks or test suites) to identify the reachable
kernel code during each invoked system call.
The dynamic proﬁling takes place in a benign environ-
ment. SHARD uses lightweight compile-time instrumentation
2Dynamic	ProfilingSHARD		Profiler1CFG	GenerationApplicationConfig.Kernel	Source	CodeOffline	Analysis(§7.2)Run-time	Monitor(§7.4)SHARDAnalyzerSHARD	CompilerKernelSHARD	MonitorSHARD	Monitor3Kernel	Compilation5Run-time	Debloating6Selective	HardeningReachablePotentially	reachableUnreachableHardenedApplications/workloadsHardened	kernel	codeRestricted	kernel	codeUnrestricted	kernel	codeSHARD	Monitor4Application	TrackingInvocation	of	asystem	call	by	anuntrusted	applicationExecution	of	a	potentially	reachable	code	pathApplication	ofCFI	checksCode	class	and	protectionOffline	Kernel	Instrumentation(§7.3)Control	Flow	GraphSyS_sysinfo:
check_cfi:
; shadow stack prologue
SUB $8, %gs:0
MOV %gs:0, %rax
MOV (%rsp), %rcx
MOV %rcx, (%rax)
...
...
; shadow stack epilogue
MOV %gs:0, %rcx
CMP %rcx, (%rsp)
JNE abort
ADD $8, %rcx
MOV %rcx, %gs:0
; Increment shadow stack
; Copy return address
; into current shadow
; stack
; Compare current
; shadow stack against
; return address
; Decrement shadow stack
CMP %fs:0, %rcx
JNE ret
UD2
ret:
RET
abort:
UD2
; Check If we should
; disable CFI
; Exit to KVM
; Allow return
; Kill process
Figure 4: SHARD’s instrumentation for the shadow stack.
shadow_stack refers the %gs register which is randomized on each
hardening instance. The base of the shadow stack is stored in the
%fs register to check if the shadow stack is empty.
to generate a kernel version that supports ofﬂine dynamic
proﬁling. The instrumentation ensures that the kernel traps,
on each kernel function (not previously-logged for a certain
system call) when the untrusted application executes, into
SHARD’s proﬁler (using UD2 instructions) which executes in
VMX root mode. Hence, SHARD can record the (a) system
calls invoked by the application, and (b) kernel functions used
by the system calls.
SHARD labels exception and interrupt handlers as reach-
able code, for each system call, since they might execute
at any time. SHARD determines the exception and interrupt
handler coverage the same way it determines system call cov-
erage. Since SHARD relies on compile-time instrumentation,
our current implementation does not specialize kernel code
written in assembly and hence considers it reachable.
7.3 Ofﬂine Kernel Instrumentation
After analysis, SHARD compiles three versions of each ker-
nel code page, UNRESTRICTED, RESTRICTED, and HARD-
ENED, using the unmodiﬁed kernel’s source code. The UN-
RESTRICTED version (§7.3-(a)) enables all kernel functions
and is used only by trusted applications. The RESTRICTED
version (§7.3-(b)) enables only the reachable code relative
per-system call. The HARDENED version (§7.3-(c)) contains
both the reachable and potentially reachable code, and is
shown only to untrusted applications. Furthermore, SHARD
ensures that functions are address-aligned across the three
versions of code pages by padding them with NOP instruc-
tions. Therefore, different versions of the same code page are
interchangeable without impairing the kernel’s correctness.
UNRESTRICTED code pages. The system runs various ap-
plications that are trusted (refer to §5). Therefore, SHARD
compiles UNRESTRICTED code pages that do not restrict or
harden the kernel’s code to allow native execution of trusted
; Load pointer into RAX
; Move frame number into RCX
; Check if
; frame >= TOTAL_FRAMES
MOV 0x10(%rdi), %rax
MOV %rax, %rcx
SHR $0xc, %rcx
CMP $0x7ff,%rcx
JA abort
MOV $TAB(,%rcx, 8), %rcx ; Move table[frame] to RCX
TEST %rcx, %rcx
JE abort
MOV %rax, %rdx
AND $0XFFF, %edx
; Move offset into RDX
CMP 0x0, (%rcx, %rdx, 1) ; Check if table[frame]
JE abort
CALLQ *%rax
..
abort:
UD2
; Check if table[frame]
; is set
; [offset] is set
; Make indirect call
Figure 5: SHARD’s CFI instrumentation at indirect call sites.
applications.
However, UNRESTRICTED code pages are still minimally
instrumented to track context switches to untrusted applica-
tions as well as padded with NOP instructions to align code
with the RESTRICTED and HARDENED versions. In particular,
SHARD instruments the kernel’s (a) context switch function
(e.g., __switch_to in Linux) and (b) common system call
handler (e.g., do_syscall_64 in Linux), to notify its run-
time monitor when untrusted applications execute and invoke
a system call, respectively. The notiﬁcation of system calls is
enabled only during the execution of untrusted applications.
RESTRICTED code pages. Based on SHARD’s dynamic pro-
ﬁling (§7.2-(b)), SHARD compiles RESTRICTED frames for
each system call required by the untrusted application. Such
code pages contain only the reachable kernel functions re-
quired by a speciﬁc system call invoked by the application,
while the remaining code (i.e., potentially reachable and un-
reachable) is replaced with undeﬁned (UD2) instructions.
HARDENED code pages. SHARD compiles HARDENED
code pages with both potentially reachable and reachable
code enabled and hardened. These code pages are used when
SHARD detects during runtime the execution of potentially
reachable code. Since, such execution is possibly malicious,
SHARD ensures that all enabled kernel code, i.e., both reach-
able and potentially reachable, is hardened until the execution
returns from the potentially reachable code path. SHARD re-
quires a single HARDENED version of each kernel code page
(unlike RESTRICTED versions which are application and sys-
tem call-speciﬁc) since the hardening checks (explained be-
low) protect the execution within the kernel, irrespective of
the system call and application.
SHARD enforces control-ﬂow integrity (CFI) in HARD-
ENED code pages, ensuring all control ﬂow transfers adhere
to the control-ﬂow graph (CFG) generated in §7.2-(a). Impor-
tantly, unlike prior system [39], SHARD ensures ﬁne-grained
CFI by checking whether the destination of an indirect control-
ﬂow transfer is valid from that speciﬁc code location. In par-
ticular, SHARD enforces CFI on forward indirect control-ﬂow
transfers using a technique that is based on Restricted Pointer
Indexing (RPI) [29, 56], while protecting backwards return
transfers using the shadow stack.Hence, SHARD’s hardening
prevents both ROP and JOP attacks.
Note that SHARD’s contribution isn’t the hardening mech-
anisms or implementations, which are from existing work. In
particular, SHARD’s contribution lies in the efﬁcient, context-
aware application of hardening mechanisms. The following
paragraphs provide details about SHARD’s instrumentation
related to RPI and shadow stack.
Restricted Pointer Indexing (RPI). Traditional RPI uses
integer-based indexing into a call target table (refer to [29]
for details) for indirect control-ﬂow transfers. However, such
indexing would raise compatibility issues when passing func-
tion pointers from UNRESTRICTED and RESTRICTED to
HARDENED code pages, because the former use function
addresses (natively used by the compiler). A naive solu-
tion would be to modify RESTRICTED and UNRESTRICTED
pages to use integer-indexing as well. However, such ap-
proach would incur considerable overhead, up to 40% [29],
for code pages that otherwise would execute at near-native
speed. Therefore, SHARD uses a modiﬁed version of RPI
which uses function addresses to ensure that non-hardened
code versions are not impacted.
Figure 5 illustrates SHARD’s RPI instrumentation to en-
force control-ﬂow integrity at indirect call sites. In particular,
SHARD maintains two call target tables for reference. Each
valid target address from an indirect call site contains a corre-
sponding reference in a ﬁrst call table, which references an
entry in a second call table. The call target tables are popu-
lated with valid targets using the kernel’s control-ﬂow graph
(generated in §7.2-(a)) and then marked as read-only to avoid
tampering at run-time.
The ﬁrst target table contains an entry for each kernel code
frame (i.e., 2048 entries in Linux’s case), indicating if a branch
to the target kernel code frame is allowed or not, from the
indirect call site. The second table contains an entry for each
offset in a frame (i.e., a 4 KB frame has 4096 offsets), indi-
cating whether a branch to such an offset of the kernel frame
is allowed or not. On each indirect control transfer, the instru-
mentation asserts that the corresponding entries exist in both
tables, otherwise, the control-ﬂow does not follow CFI and
the program is terminated by SHARD.
Shadow stack. Shadow stack stores a backup copy of the
stack to prevent an adversary from returning to a different
address during execution. Each program thread is allocated
a separate shadow stack. SHARD uses randomization to hide
the shadow stacks and prevent malicious modiﬁcation. In
particular, SHARD uses the segment register (%gs) to random-
ize the shadow stack [25] on each context-aware hardening.
However, randomization-based shadow stack protection is
not fundamental to SHARD’s design; hence, other techniques
(e.g., memory protection [57]) can be adopted by SHARD.
Figure 4 shows SHARD’s instrumentation for the shadow
stack. At the start of each function, SHARD’s instrumenta-
tion stores the return address in the shadow stack. Then, on
the subsequent return, the instrumentation asserts whether
Figure 6: SHARD context-aware hardening cycle.
the return address stored in the native stack and the shadow
stack’s return address are consistent. Furthermore, SHARD’s
instrumentation tracks when the shadow stack is empty, i.e.,
the potentially reachable code path has completed execu-
tion. In particular, on each return, the instrumentation checks
whether the shadow stack pointer is pointing towards the
shadow stack’s base (stored in %fs segment register). If yes,
the instrumentation triggers a UD2 to inform SHARD.
Shadow stack implementation using segment registers can
potentially suffer from time-of-check-to-time-of-use (TOCT-
TOU) attacks [28], i.e., the return address is correct at the
time of validation but is modiﬁed before the return instruction.
However, an extensive study on shadow stacks [24] suggests
that exploiting this race is non-trivial since it requires highly
precise timing. Nevertheless, mitigations exist against this
problem [24], at slightly higher performance costs.
7.4 Run-time Monitor
During the online phase, the SHARD monitor executes in
VMX root mode to track the execution of untrusted applica-
tions, as well as enforce debloating and context-aware hard-
ening.
Workﬂow. SHARD monitor operates in four major stages.
1. Initial kernel-view. The SHARD monitor enables the
UNRESTRICTED version for all kernel code pages to allow
the unrestricted execution of trusted applications and detect
the execution of the untrusted application.