| 0x0040121c 4889c7 mov rdi, rax
| 0x0040121f e852fcffff call sub.read_e76
; ssize_t read(int fildes, void *buf, size_t nbyte)
| 0x00401224 488d85e0feff. lea rax, [local_120h]
| 0x0040122b ba03000000 mov edx, 3
| 0x00401230 be7e454000 mov esi, 0x40457e
; "yes"
| 0x00401235 4889c7 mov rdi, rax
| 0x00401238 e8c3f9ffff call sym.imp.strncmp
; int strncmp(const char *s1, const char *s2, size_t n)
| 0x0040123d 85c0 test eax, eax
| ,= 0x00401293 bff2454000 mov edi, str.charset:
; 0x4045f2 ; "charset:"
| | 0x00401298 e833f9ffff call sym.imp.puts
; int puts(const char *s)
| | 0x0040129d 8b056d4e2000 mov eax, dword [0x006
06110] ; [0x606110:4]=62 ; 取出数字
| | 0x004012a3 83c001 add eax, 1
; eax += 1
| | 0x004012a6 89c2 mov edx, eax
| | 0x004012a8 488d85e0feff. lea rax, [local_120h]
| | 0x004012af 89d6 mov esi, edx
| | 0x004012b1 4889c7 mov rdi, rax
| | 0x004012b4 e8bdfbffff call sub.read_e76
; ssize_t read(int fildes, void *buf, size_t nbyte) ; 该函
数内调用 read(0, [local_120h], esi) 读入我们的 payload_1，由于esi是一
个负数，而 0x00400ea8 jae 0x400ef3 处是与一个非负数比较，永远不会相等，
即可以读入以换行符结尾的任意数量字符
| | 0x004012b9 488d85e0feff. lea rax, [local_120h]
| | 0x004012c0 4889c7 mov rdi, rax
| | 0x004012c3 e8e8f9ffff call sym.imp.strdup
; char *strdup(const char *src) ; 在堆中复制一个字符串的副本
| | 0x004012c8 488905494e20. mov qword str.ABCDEFG
HIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789, rax ; [
0x606118:8]=0x404508 str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm
nopqrstuvwxyz0123456789
| | ; JMP XREF from 0x0040123f (sub.FlexMD5_bruteforc
e_tool_V0.1_148)
| `-> 0x004012cf bffb454000 mov edi, str.brutefor
ce_message_pattern: ; 0x4045fb ; "bruteforce message pattern:"
| 0x004012d4 e8f7f8ffff call sym.imp.puts
; int puts(const char *s)
1015
6.1.8 pwn DCTF2017 Flex
| 0x004012d9 be00040000 mov esi, 0x400
; 1024
| 0x004012de bfc0616000 mov edi, 0x6061c0
| 0x004012e3 e836fcffff call sub.read_f1e
; ssize_t read(int fildes, void *buf, size_t nbyte) ; 调用
read(0, 0x6061c0, 0x400) 读入 payload_2
| 0x004012e8 bfc0616000 mov edi, 0x6061c0
| 0x004012ed e85ef9ffff call sym.imp.strlen
; size_t strlen(const char *s)
| 0x004012f2 8905a84e2000 mov dword [0x006061a0
], eax ; [0x6061a0:4]=0
| 0x004012f8 c785dcfeffff. mov dword [local_124h
], 0
| ; JMP XREF from 0x00401334 (sub.FlexMD5_bruteforc
e_tool_V0.1_148)
| .-> 0x00401302 8b85dcfeffff mov eax, dword [local
_124h]
| : 0x00401308 4863d8 movsxd rbx, eax
; 将 rbx 初始化为 0
| : 0x0040130b bfc0616000 mov edi, 0x6061c0
; paylaod_2 的地址
| : 0x00401310 e83bf9ffff call sym.imp.strlen
; size_t strlen(const char *s)
| : 0x00401315 4839c3 cmp rbx, rax
; 比较 rbx 和 rax，rax 是字符串长度返回值
| ,== 0x00401336 90 nop
| | ; JMP XREF from 0x00401318 (sub.FlexMD5_bruteforc
e_tool_V0.1_148)
| `--> 0x00401337 8b85dcfeffff mov eax, dword [local
_124h]
| 0x0040133d 4863d8 movsxd rbx, eax
| 0x00401340 bfc0616000 mov edi, 0x6061c0
| 0x00401345 e806f9ffff call sym.imp.strlen
; size_t strlen(const char *s)
| 0x0040134a 4839c3 cmp rbx, rax
; 比较 rbx 和 rax
| ,= 0x00401371 bf17464000 mov edi, str.md5_patt
ern: ; 0x404617 ; "md5 pattern:"
| 0x00401376 e855f8ffff call sym.imp.puts
; int puts(const char *s)
| 0x0040137b be21000000 mov esi, 0x21
; '!' ; 33
| 0x00401380 bfc0656000 mov edi, 0x6065c0
| 0x00401385 e8ecfaffff call sub.read_e76
; ssize_t read(int fildes, void *buf, size_t nbyte)
| 0x0040138a b800000000 mov eax, 0
1017
6.1.8 pwn DCTF2017 Flex
| 0x0040138f 488b4de8 mov rcx, qword [local
_18h]
| 0x00401393 6448330c2528. xor rcx, qword fs:[0x
28]
| ,= 0x004013a3 4881c4280100. add rsp, 0x128
| 0x004013aa 5b pop rbx
| 0x004013ab 5d pop rbp
\ 0x004013ac c3 ret
函数 sub.atoi_f45 将字符串转换成长整型数：
1018
6.1.8 pwn DCTF2017 Flex
[0x00400d80]> pdf @ sub.atoi_f45
/ (fcn) sub.atoi_f45 74
| sub.atoi_f45 ();
| ; var int local_20h @ rbp-0x20
| ; var int local_8h @ rbp-0x8
| ; XREFS: CALL 0x004021f2 CALL 0x004011bc CALL 0
x004011d1 CALL 0x004011e6 CALL 0x004011fb CALL 0x00401259 CA
LL 0x004015d9 CALL 0x00402136
| 0x00400f45 55 push rbp
| 0x00400f46 4889e5 mov rbp, rsp
| 0x00400f49 4883ec20 sub rsp, 0x20
| 0x00400f4d 64488b042528. mov rax, qword fs:[0x
28] ; [0x28:8]=-1 ; '(' ; 40
| 0x00400f56 488945f8 mov qword [local_8h],
rax
| 0x00400f5a 31c0 xor eax, eax
| 0x00400f5c 488d45e0 lea rax, [local_20h]
| 0x00400f60 be0b000000 mov esi, 0xb
; 11
| 0x00400f65 4889c7 mov rdi, rax
| 0x00400f68 e809ffffff call sub.read_e76
; ssize_t read(int fildes, void *buf, size_t nbyte)
| 0x00400f6d 488d45e0 lea rax, [local_20h]
; local_20h 指向读入的字符串
| 0x00400f71 4889c7 mov rdi, rax
; rdi = rax
| 0x00400f74 e807fdffff call sym.imp.atoi
; int atoi(const char *str) ; 将字符串转换成长整型
| 0x00400f79 488b55f8 mov rdx, qword [local
_8h]
| 0x00400f7d 644833142528. xor rdx, qword fs:[0x
28]
| ,= 0x00400f8d c9 leave
\ 0x00400f8e c3 ret
1019
6.1.8 pwn DCTF2017 Flex
可以看到该函数并未对所输入的数字进行验证，所以我们可以输入负数，因为计算
机中数字是以补码的形式存在，例如 -2 = 0xfffffffffffffffe 。这个数字加
1 后，作为读入字符串个数的判定，因为个数不能为负，我们就可以开心地读入后
面的 payload 了。
这个程序中读入操作使用函数 sub.read_e76 ，该函数内部有一个循环，每次读
入一个字符，如果遇到换行符，则完成退出。
[0x00400d80]> pdf @ sub.read_e76
/ (fcn) sub.read_e76 168
| sub.read_e76 ();
| ; var int local_1ch @ rbp-0x1c
| ; var int local_18h @ rbp-0x18
| ; var int local_dh @ rbp-0xd
| ; var int local_ch @ rbp-0xc
| ; var int local_8h @ rbp-0x8
| ; XREFS: CALL 0x00400f68 CALL 0x00401186 CALL 0
x0040121f CALL 0x004012b4 CALL 0x00401385 CALL 0x0040159f CA
LL 0x00401634 CALL 0x00401663
| ; XREFS: CALL 0x00401705 CALL 0x00401d4f
| 0x00400e76 55 push rbp
| 0x00400e77 4889e5 mov rbp, rsp
| 0x00400e7a 4883ec20 sub rsp, 0x20
| 0x00400e7e 48897de8 mov qword [local_18h]
, rdi
| 0x00400e82 8975e4 mov dword [local_1ch]
, esi
| 0x00400e85 64488b042528. mov rax, qword fs:[0x
28] ; [0x28:8]=-1 ; '(' ; 40
| 0x00400e8e 488945f8 mov qword [local_8h],
rax
| 0x00400e92 31c0 xor eax, eax
| 0x00400e94 c745f4000000. mov dword [local_ch],
0
| 0x00400e9b c745f4000000. mov dword [local_ch],
0
| ; JMP XREF from 0x00400ef1 (sub.read_e76)
| .-> 0x00400ea2 8b45f4 mov eax, dword [local
_ch] ; 循环起点，local_ch 存放已输入字符数量
| : 0x00400ea5 3b45e4 cmp eax, dword [local
1020
6.1.8 pwn DCTF2017 Flex
_1ch] ; 允许读入的数量
| ,== 0x00400edd 8b55f4 mov edx, dword [local
_ch] ; 取出字符数量
| | |: 0x00400ee0 488b45e8 mov rax, qword [local
_18h] ; local_18h 为目标初始地址
| | |: 0x00400ee4 4801c2 add rdx, rax
; '#' ; rdx 指向目标地址
| | |: 0x00400ee7 0fb645f3 movzx eax, byte [loca