超过60秒。
一在当前最高负荷情况下运转时，系统可以持续1个小时保证95%的
网页在5秒或更短时间内加载完毕，9%的课程在60秒或更短的时间
内完全正确下载。
外部版本将附有性能测试报告，包括：
那些网页。
一在任意数量的用户条件下，有超过1%的情况加载时间超过8秒的
那些网页。
一超过2%的情况无法完全或正确下载的课程。
一在任意数量的用户条件下，有超过5%的情况下载所需时间超过60
秒的那些课程。
一在当前最高负荷情况下运转时，系统可以持续1个小时保证95%的
网页在5秒或更短时间内加载完毕，95%的课程在60秒或更短的时间
内完全止确下载。
请求或建议，酌情添加其他有益于项目的性能测试。
令我们懊恼的是，Sadra在把我们列出的条款逐字加到客户合同中去
时，指出Harold和我以后应该加强协作。
我完全承认，Harold和我协作将原来的系统性能要求转变成最终系
统性能测试要求的流程一点都不美丽，不过结果却是美丽的。老实
说，当我发现Harold是原来的要求文档的作者，而我“戏剧性"地宣布
其失败时，我完全认为自已会被调离这个项目。不过，无论Harold
是否尝试将我调离该项目，甚至他自已也承认，我们的成果中一些
美丽的部分是我们中的任何一人都无法自已想出来的。特别是：
从承诺达到一定水平的性能，转变为承诺报告在什么样的条件下性
能目标将无法实现。
1854
---
## Page 1856
明确指出在获取足够的资料前，无法完全确定具体性能测试的细
节。
打并性能测试的思路，以支持并发流程，但这些并不直接以性能目
标作为评估依据。
遗憾的是，这并非Harold和我之间最后一次不甚美丽的互动。
好吧，那么什么是性能测试用例
几个星期后，Harold打电话告诉我，他需要我在下个周末前将所有
的"性能测试用例"输入到eVersity测试管理系统中去。我说：“行，但
什么是性能测试呢？”你可以想象到，这并不是他期待的反应。随后
的交谈很短，却有些火药味，最终以我同意在周末前“尽我最大的努
力”，以便他有时间审查我的工作作为结束。
我挂了电话后马上打开了测试管理系统，看看是否存在任何称为非
功能需求（又名质量因素（qualityfactor）或辅助需求
（parafunctionalrequirement））的测试用例，如安全测试或可用性测
试。可借没有找到，于是我开始把目光转向功能测试用例以寻找灵
感。结果正如我所担心的那样：只有需求和测试用例之间一对一的
映射，且几乎所有的需求都写成“系统应该......"的形式，几乎所有
的测试用例都写成“验证系统[做了]..."的形式。
我看着屏幕足足有两次会话超时那么长的时间，试图决定是打电话
给Harold抗议还是尝试强行往这个荒谬的模型（时至今日我仍然认
为该模型每一处都很荒谬）里添加一些内容。最终，我决定还是照
做，原因很简单，我认为我不能赢得这场抗议。客户已被授权进入
该测试管理系统，支付了许多钱购买许可证，并已派遣人员参加该
系统的培训以便远程监督项目。我不认为我能得到批准在该系统之
外跟踪性能测试，所以我创建了一个新的“性能"需求类型，输入下
列子项：
在至少95%的情况下，所有网页都应在5秒或更短时间内加载完毕。
在至少98%的情况下，所有课程都应能在60秒或更短时间内正确、
完整地下载完毕。
系统应能支持1000个小时用户（使用模型待定），同时满足速度要
求。
1855
---
## Page 1857
然后，我为这些项目创建了三个对应的测试用例，并祈祷好运。
如果我说Harold在那个周末审查我的工作时的态度是不以为然，那
我就是过于轻描淡写了。他一定是在看到我进入楼下的性能和安全
测试实验室（我大多数时间都在这里），他也立刻下楼了。他一边
冲进门，一边质问：“我要怎样才能证明3个测试用例需要花费你4个
月的时间？”
虽然我一直期待他的抗议，但这却不是我所预期的抗议。我困惑地
看着他，回答说：“你不能。你从哪里得出我将只进行三项测试的结
试管理系统的不足，尤其是对性能测试的不足，并询问Harold他的
初衷是什么。他回答说，他想看到我将所有将要进行的测试都输入
该系统。
我大笑着打开了我之前的、规模小得多的项目的数据库，并邀请他
来帮我计算我到底进行了多少性能测试。结果这个数字是967或
4719，取决于是否将不同的用户数据算作不同的测试。考虑到五人
规模的功能测试团队为该项目创造了略少于600个测试用例，相对于
我引用的项目的大约150个测试用例，甚至Harold也承认，他的想法
有些问题。
我们面面相了很长时间，Harold才拨通了电话。
“Sadra，你现在有时间到实验室来跟我和Scott聊一聊么？谢谢。你
能否把客户合同和交付定义带上？好极了。也许再加上Leah？一会
儿见。”
在儿个小时内，经过了一系列争论，其间甚至有些粗口，并消火了
儿个比萨后，Harold、Sadra、Leah（她是我们主要的测试经理，在
这个项目中充当了测试技术领导的角色）、Chris（专司安全的并发
人员，他与我共享实验室，错误地在我们开会时晃进了实验室）和
我，对于手头的任务越来越感到沮丧。一开始，就连我都没有意识
到在我们的跟踪系统中找出如何定义性能测试，以及什么样的信息
需要被定义是那么具有挑战性。
我们很快就达成协议，应该将下列信息列入我们的跟踪系统：代表
有价值的检查点的性能测试、值得一提的性能成就或潜在的决策
点。这么决定后，我马上走到白板前，开始列举我们可以包括的测
试，以为我们可以通过调整这一列表完成任务。我大错特错了。
1856
---
## Page 1858
我甚至还没有完成我的列表，问题就出现了。事实证明，我所列出
的不符合合同的条款，或经过反复讨论和许多修改客户终于通过了
的交付项定义。我不记得所有细节，也无法找出这些文件，但我记
得最后我们如何在已经向客户作出的承诺、已授权的跟踪系统的功
能以及高价值的性能测试之间找到平衡点的。
我们从我的列表上的第一条开始。Sadra根据合同评估了该条目。
Harold根据交付项定义进行了评估。Leah评估了它在辅助决策质量相
关的决定时的有用性。Chris为开发团队评估了其信息价值。在列出
了从每个角度可接受的列表后，我们才开始烦恼如何将其恰当地录
入跟踪系统。
结果，系统中的性能需求保持不变。不过，我们将那些性能测试用
例更名为"性能测试检查点”，包括下列内容（这里有所简略）：
收集系统性能指标基准，并验证系统使用模型中包括的每个功能任
务，在1个用户的负荷下，在每一个包含该功能任务的性能测试构造
中，都达到性能需求。
一[功能任务列表，每行一个]
收集系统性能指标，并验证系统使用模型中包括的每个功能任务，
在10个用户的负荷下，在每一个包含该功能任务的性能测试构造
中，都达到性能需求。
一[功能任务列表，每行一个]
收集系统性能指标，并验证系统使用模型，在以下负荷程度的性能
要求下，在每一个实现了该使用模型的性能测试构造中，都达到性
能需求。
一[用户负荷从100个增加到3000个，每行一个]
收集系统性能指标，并验证系统使用模型，在开发组长、性能测试
人员以及项目经理认为恰当的构造上，通过为期9小时、负荷为1000
个用户的压力测试的性能要求。
这里美丽的地方是我们创建的是明确的、容易建立战略的、并且直
接映射到客户在最终报告中要求的信息上。一个额外的收获是，从
那一刻起在该项目中，每当有人质疑我们的性能测试方法时，总会
1857
---
## Page 1859
有一个或多个参与了检查点设置的人帮我辩解，甚至经常在我发现
这些挑战之前！
这个故事的一个有趣的后续是，那一周的晚些时候，一项新的公司
政策被通过了一—任何包含性能测试的合同或交付项定义送到客户
去批准前，必须咨询我。我也干分肯定，这是性能测试从功能测试
中分离出来成为一个独立的实践领域的催化剂，同时导致了在此后
的项目中性能测试组长直接向项目经理而不是测试经理报告。
你不能性能测试所有东西
作为一家同时有几个开发项目的公司的性能测试技术组长，其中一
项乐趣是我几乎总是同时参与超过一个项目。我强调这一点，是因
为下面的故事是来自一个不同的项目，但发生的时间顺序确实在上
一个故事和下一个故事之间。
这个项目是建立一个基于网络的财务规划应用程序。虽然在今天很
常见，不过在当时，这是极有创意的。该系统的性能测试优先度极
高有两个原因：
我们受雇于这个项目是由于客户因为已建好的系统的糟糕的性能而
解雇了之前的软件开发公司。
客户已经购买了超级杯的厂告时段，并开始拍摄宣传该应用程序的
商业厂告。
可以理解的是，我们的客户Ted指示我，他希望“所有可能的导航路
径和所有可能的输入数据组合"都被包括在我们的性能测试中。我尝
试了儿种方法来沟通，告诉他在今年的超级杯之前，这根本是一个
不可能实现的任务，但都不得要领。Ted越来越愤怒，因为他看到我
拒绝做他付钱让我做的事。经过6个星期尝试解决（或至少简化）一
个非常复杂的组合问题并将其写入文档，我越来越沮丧的是，我一
直不能帮助开发人员追踪到导致Ted聘请我们的性能问题。
一天下午，在Ted拒绝了另一个系统使用模型后，我叫他到性能测试
实验室来和我一起建立一个模型。我很惊讶，他说他马上就到。
我开始交谈，试图向Ted解释，未经许可在我们的性能测试中包括由
其他公司维护的网站链接，不仅没有多少价值，而且等同于向这些
网站发动拒绝服务（denial-of-service）攻击。Ted完全没有听进去。
1858
---
## Page 1860
在那一刻，我意识到我站在那里，我们正在朝对方叫，而我的拳
头正沮丧得紧握。
为了试图冷静下来，我走到白板前并开始画一种类似sideway流程
图，代表网站上的最可能的用户活动。令我惊讶的是，Ted也拿起一
支标记笔，开始加强那张图。不久，我们开始了一个平静而专业
的、关于用户第一次访问网站时最有可能做哪些事的讨论。在中间
的某个时候，Chris加入了谈话，并向我们解释许多我们建模的活动
是多余的，由于基于底层系统体系结构互换。
在不到一个小时的时间内，我们创建了一个系统使用模型，我们都
同意该模型可以代表在超级杯营销活动期间最可能流行的条目，以
及应用程序中并发人员已确定的性能不佳风险比较高的功能区域。
我们还达成了一个共识：在我们对系统的这些方面的性能充满信心
之前，测试和调试应用程序的其他部分并不能很好地利用我们的时
间。
这次会议后的一周内，我们已成功建模了一个早期版本的测试并开
始运行，开发团队和我都开始积极地寻找和改进系统中的性能问
题。
再一次，这个故事的开端一点也不美丽。这一回，美丽是在Ted和我
开始共同致力于在白板上建立模型，而不再是我将模型通过电子邮
件发给他批准的时候开始绽放的。而当Chris将开发人员的角度带人
交谈时，美丽盛开了。实时协作使我们不仅能更好地了解彼此的关
注点，还能讨论比较使用模型的各个方面的投资回报率（ROI），而
不是单独考虑某一方面，这正是我们几个星期来一直在犯的错误。
这个故事也有一个有趣的后续。碰巧的是，那一天Ted、Chris和我在