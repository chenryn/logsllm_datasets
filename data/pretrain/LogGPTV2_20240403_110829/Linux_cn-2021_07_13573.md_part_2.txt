                            'flagged': '[Gmail]/Starred',
                            'trash':   '[Gmail]/Trash',
                            'archive': '[Gmail]/All Mail',
                            }.get(folder, folder)
[Repository %your-gmail-username%-Remote]
maxconnections = 1
type = Gmail
remoteuser = %your-gmail-username%@gmail.com
remotepasseval = '%your-gmail-API-password%'
## remotepasseval = get_api_pass()
sslcacertfile = /etc/ssl/certs/ca-bundle.crt
realdelete = no
nametrans = lambda folder: {'[Gmail]/Drafts':    'drafts',
                            '[Gmail]/Sent Mail': 'sent',
                            '[Gmail]/Starred':   'flagged',
                            '[Gmail]/Trash':     'trash',
                            '[Gmail]/All Mail':  'archive',
                            }.get(folder, folder)
folderfilter = lambda folder: folder not in ['[Gmail]/Trash',
                                             '[Gmail]/Important',
                                             '[Gmail]/Spam',
                                             ]
```
配置文件里有两个可以替换的值，分别是 `%your-gmail-username%` 和 `%your-gmail-API-password%`。其中第一个值需要替换为 Gmail 用户名，也就是邮件地址中 `@gmail.com` 左边的部分。而第二个值则需要通过双因素身份验证（2FA）后从 Google 获取（即使你在查收邮件时不需要使用 2FA）。
### 为 Gmail 设置双因素身份验证（2FA）
Google 希望用户通过 Gmail 网站收发电子邮件，因此当你在 Gmail 网站以外操作电子邮件时，实际上是被 Google 作为“开发者”看待（尽管你没有进行任何开发工作）。也就是说，Google 会认为你正在创建一个应用程序。要获得开发者层面的应用程序密码，就必须设置双因素身份验证。完成了这个过程以后，就可以获得一个应用程序密码，Mutt 可以通过这个密码在浏览器以外的环境登录到你的电子邮箱中。
为了安全起见，你还可以在 Google 的 [账号安全](https://myaccount.google.com/security) 页面中添加一个用于找回的电子邮件地址。
在账号安全页面中，点击“ 两步验证   2-step Verification ”开始设置 2FA，设置过程中需要用到一部手机。
激活 2FA 之后，账号安全页面中会出现“ 应用程序密码   App Passwords ”选项，点击就可以为 Mutt 创建一个新的应用程序密码。在 Google 生成密码之后，将其替换 `.offlineimaprc` 配置文件中的 `%your-gmail-API-password%` 值。
直接将应用程序密码记录在 `.offlineimaprc` 文件中，这种以纯文本形式存储的做法有一定的风险。长期以来我都是这样做的，而且感觉良好，因为我的家目录是加密的。但出于安全考虑，我现在已经改为使用 GnuPG 加密应用程序密码，这部分内容不在本文的讨论范围，关于如何设置 GPG 密码集成，可以参考我的 [另一篇文章](https://opensource.com/article/21/6/enter-invisible-passwords-using-python-module)。
### 在 Gmail 启用 IMAP
在你永远告别 Gmail 网页界面之前，还有最后一件事：你必须启用 Gmail 账户的 IMAP 访问。
在 Gmail 网站页面中，点击右上角的“cog”图标，选择“ 查看所有设置   See all settings ”。在 Gmail 设置页面中，点击“POP/IMAP”标签页，并选中“ 启用 IMAP   enable IMAP ”，然后保存设置。
现在就可以在浏览器以外访问你的 Gmail 电子邮件了。
### 配置 Mutt
Mutt 的配置过程相对简单。和 [.bashrc](https://opensource.com/article/18/9/handy-bash-aliases)、[.zshrc](https://opensource.com/article/19/9/adding-plugins-zsh)、`.emacs` 这些配置文件一样，网络上有很多优秀的 .muttrc 配置文件可供参照。我自己的 `.muttrc` 配置文件则借鉴了 [Kyle Rankin](https://twitter.com/kylerankin)、[Paul Frields](https://twitter.com/stickster) 等人的配置项和想法。下面列出我的配置文件的一些要点：
```
set ssl_starttls=yes
set ssl_force_tls=yes
set from='PI:EMAIL'
set realname='Tux Example'
set folder = imaps://imap.gmail.com/
set spoolfile = imaps://imap.gmail.com/INBOX
set postponed="imaps://imap.gmail.com/[Gmail]/Drafts"
set smtp_url="smtp://smtp.gmail.com:25"
set move = no
set imap_keepalive = 900
set record="imaps://imap.gmail.com/[Gmail]/Sent Mail"
# Paths
set folder           = ~/.mail
set alias_file       = ~/.mutt/alias
set header_cache     = "~/.mutt/cache/headers"
set message_cachedir = "~/.mutt/cache/bodies"
set certificate_file = ~/.mutt/certificates
set mailcap_path     = ~/.mutt/mailcap
set tmpdir           = ~/.mutt/temp
set signature        = ~/.mutt/sig
set sig_on_top       = yes
# Basic Options
set wait_key = no
set mbox_type = Maildir
unset move               # gmail does that
# Sidebar Patch
set sidebar_visible = yes
set sidebar_width   = 16
color sidebar_new color221 color233
## Account Settings
# Default inbox
set spoolfile = "+example.com/INBOX"
# Mailboxes to show in the sidebar.
mailboxes +INBOX \
          +sent \
          +drafts
# Other special folder
set postponed = "+example.com/drafts"
# navigation
macro index gi "=example.com/INBOX" "Go to inbox"
macro index gt "=example.com/sent" "View sent"
```
整个配置文件基本是开箱即用的，只需要将其中的 `Tux Example`和 `example.com` 替换为你的实际值，并将其保存为 `~/.mutt/muttrc` 就可以使用了。
### 启动 Mutt
在启动 Mutt 之前，需要先启动 `offlineimap` 将远程邮件服务器上的邮件同步到本地。在首次启动的时候耗时可能会比较长，只需要让它整晚运行直到同步完成就可以了。
在同步完成后，启动 Mutt：
```
$ mutt
```
Mutt 会提示你打开用于管理电子邮件的目录权限，并展示收件箱的视图。
![Mutt email client](/data/attachment/album/202107/12/105003nysa3xy9wzl194n0.png "Mutt email client")
### 学习使用 Mutt
在学习使用 Mutt 的过程中，你可以找到最符合你使用习惯的 `.muttrc` 配置。例如我的 `.muttrc` 配置文件集成了使用 Emacs 编写邮件、使用 LDAP 搜索联系人、使用 GnuPG 对邮件进行加解密、链接获取、HTML 视图等等一系列功能。你可以让 Mutt 做到任何你想让它做到的事情，你越探索，就能发现越多。
---
via: 
作者：[Seth Kenlon](https://opensource.com/users/seth) 选题：[lujun9972](https://github.com/lujun9972) 译者：[HankChow](https://github.com/HankChow) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出