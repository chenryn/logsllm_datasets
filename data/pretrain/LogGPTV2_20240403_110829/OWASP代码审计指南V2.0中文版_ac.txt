维基等)。相关资料从零文档容差到接近美国国家航空航天局级别的文档，文档的大小远远
25 
超过代码模块的大小。 
在代码审计期间发生的许多讨论，如果被记录下来，将为模块维护者和新程序员提供有
价值的信息。从描述模块的作者以及他们的一些设计决策，到每个审计者的评论，陈述他们
为什么认为一个 SQL 查询应该被重新组织，或者一个算法应该被改变。有个开发故事展现
在审计者的眼前，可以被模块以后维护的程序员使用，尽管他们不参与审计会议。 
在审计工具中自动捕获这些审计讨论，并存储它们以供将来参考，将为开发组织提供模
块的变更历史，新的开发人员可以在以后查询这些历史。这些讨论还可以包含到任何架构/
功能/设计/测试规范、bug 或增强号的链接。 
验证变更已经过测试 
当开发人员准备将代码提交到存储库中时，公司如何知道他们已经对其进行了充分的测
试？添加对他们已经运行的测试的描述(手动的或自动的)可以给审计者(和管理人员)信心，
让他们相信变更会起作用并且不会被回滚。同样，通过声明变更已被测试过，作者允许审计
者审计测试并建议作者可能已经错过的进一步测试。 
在存在自动化单元或组件测试的开发场景中，编码准则可能要求开发人员在代码审计中
包含那些单元/组件测试。这再次允许该环境中的审计者确保正确的单元/组件测试将被包括
在该环境中，从而保持连续集成周期的质量。 
初级开发人员的编码教育 
除了结对编码(这种情况很少发生，也从来没有成本效益)和培训课程(关于编码的布朗包
课程、技术讲座等)外，在员工学习了一门语言的基础知识并阅读了一些最佳实践书籍后，
他们如何获得良好的在职技能来学习更多知识？对于初级开发人员来说，在代码审计期间讨
26 
论的设计和代码决策可能是一次学习经历。许多有经验的开发人员承认这是一条双行道，新
的开发人员可以提出新的想法或技巧，老的开发人员可以从中学习。总之，这种经验和想法
的交叉传播会对开发组织有益。 
熟悉代码库 
当一个新特性被开发出来时，它通常与主代码库集成在一起，在这里，代码审计可以成
为更广泛的团队了解新特性及其代码将如何影响产品的渠道。这有助于防止功能重复，即不
同的团队最终编码相同的一小部分功能。 
这也适用于团队分散的开发环境。在这里，代码审计作者可以联系其他团队来获得他们
的想法，并允许这些其他团队审计他们的模块，然后每个人都可以更多地了解公司的代码基
础。 
整合冲突的预警 
在一个繁忙的代码库中，会有多个开发人员编写或影响同一个模块的代码的时候(尤其
是在核心代码模块上)。许多人都有过剪切代码和运行测试的经历，但提交后却发现一些其
他的更改修改了功能，要求作者重新编码并重新测试他们的更改的某些方面。通过代码审计
传播新的变更的方式给了开发人员一个更大的机会，让他们知道一个变更将要影响他们的提
交和开发时间表等等。可以相应地更新。 
安全编码指南接触点 
许多开发环境都有新代码必须遵守的编码准则，编码指南可以采取多种形式。值得
指出的是，安全准则可能是一个特别相关的切入点。 
不幸的是，在代码审计中，安全编码问题只被开发团队的一部分人所理解。因此，
27 
将具有各种技术专长的团队纳入代码审计是有必要的。即，可以邀请安全团队的某个人(或
者角落里了解所有安全知识的人)作为技术主题专家来审计，从他们的特定角度审计代码。
这是 OWASP 十大准则可以执行的地方。 
2.1.9 代码安全审计技术方面 
代码安全审计与被审计的应用程序强相关。它们可能会突出一些新的或特定于应用程序
代码实现的缺陷，如执行流的不安全终止、同步错误等。这些缺陷只有当我们理解了应用程
序代码流及其逻辑后才能被发现。因此，代码安全审计不仅仅是扫描代码中的一组未知的不
安全代码模式，还包括理解应用程序的代码实现和列举它独有的缺陷。 
正在审计的应用程序可能已经设计了一些适当的安全控制，例如集中黑名单、输入验证
等。必须仔细研究这些安全控制措施，以确定它们是否可靠。根据控制的实施，必须分析攻
击的性质或任何可用于绕过它的特定攻击向量。列举现有安全控制中的弱点是代码安全审计
的另一个重要方面。 
应用程序中出现安全缺陷有多种原因，比如缺少输入验证或参数处理不当。在代码审计
的过程中，缺陷的根本原因需要被暴露出来，要跟踪完整的数据流。术语“源到接收器分析”
意味着确定应用程序(源)的所有可能的输入，以及它们是如何被应用程序(接收器)处理的。
接收器可能是一种不安全的代码模式，如动态 SQL 查询、日志编写器或对客户端设备的响
应。 
考虑一个源是用户输入的场景。它流经应用程序的不同类/组件，最后落入一个拼接的
SQL 查询(一个接收器)中，并且在路径中没有对它进行适当的验证。在这种情况下，应用程
序将容易受到 SQL 注入攻击，这是由源到宿分析确定的。这种分析有助于理解哪些易受攻
击的输入可能导致应用程序中的漏洞。 
28 
一旦发现缺陷，审计者必须列举应用程序中存在的所有可能的实例。这不是由代码变更
发起的代码审计，这是由管理部门基于发现的缺陷发起的代码扫描，并且投入资源来查找该
缺陷是否存在于产品的其他部分。例如，由于在不安全的显示方法中使用未经验证的输入，
如 scriptlets 的“response.write”方法等，应用程序很容易在这些地方受到 XSS 漏洞的攻
击。 
2.1.10 代码审计和合规 
许多要保护其软件和数据的完整性、机密性和可用性的组织需要满足合规的要求。这种
遵守通常是强制性的，而不是组织自愿采取的步骤。 
合规条例包括: 
⚫ 
支付卡行业标准 
⚫ 
中央银行规定 
⚫ 
审计目标 
⚫ 
HIPPA 
合规性是软件安全开发生命周期的一个组成部分，代码审计是合规性的一个重要方法。
许多规则坚持执行代码审计，以符合某些规定。 
要执行符合合规性规则的适当代码审计，必须使用经批准的方法。某些规定，如 PCI，
特别是要求 6:“开发和维护安全系统”，同时 PCI-DSS 3.0 自 2013 年 11 月以来一直可用。
它公开了一系列适用于软件开发和识别代码漏洞的要求。支付卡行业数据安全标准
(PCI-DSS)于 2005 年 6 月成为处理信用卡支付的公司的强制性合规步骤。从标准的第一个
版本开始，对定制代码进行代码审计就成为了一项要求。 
29 
PCI 标准包含与安全应用程序开发相关的几个要点，但是本指南将只关注这些要点，这
些要点要求进行代码审计。与代码审计相关的所有要点可以在需求 6“开发和维护安全的系
统和应用程序”中找到。 
2.1.11 与代码审计相关的 PCI-DSS 要求 
具体来说，需求 6.3.2 要求对定制代码进行代码审计。在重新提供给生产或客户之前，
审计定制代码，以识别任何潜在的编码漏洞(使用手动或自动流程)，至少包括以下内容: 
⚫ 
代码变更由除原始代码作者之外的个人审计，并且由熟悉代码审计技术和安全编码实践
的个人审计。 
⚫ 
代码审计确保代码是根据安全编码准则开发的 
⚫ 
发布前实施适当的纠正 
⚫ 
代码审计结果在发布前由管理层审计和批准 
需求 6.5 解决了软件开发过程中常见的编码漏洞，如下所示: 
⚫ 
对开发人员进行安全编码技术培训，包括如何避免常见的编码漏洞，以及了解敏感数据
如何在内存中处理 
⚫ 
基于安全编码准则开发应用程序 
PCI 委员会扩展了选项 1，以包括执行代码审计的内部资源。这增加了内部代码审计的
权重，并为确保该过程正确执行增加了新的保障。 
30 
支付应用数据安全标准(PA-DSS)是一套类似于 PCI-DSS 的规则和要求。但是，个人授
权系统特别适用于软件供应商和开发支付应用程序的其他人，这些支付应用程序作为授权或
结算的一部分存储、处理或传输持卡人数据，这些支付应用程序被出售、分发或许可给第三
方。 
与代码审计相关的项目审批系统要求 
与代码审计相关的要求也适用，因为这些要求来自于需求 5 (PCI，2010)中的 PA-DSS: 
5.2 根据安全编码指南开发所有支付应用程序(内部和外部，包括产品的网络管理访问)。 
5.1.4 在任何重大变更后向客户发布支付应用程序代码之前，对其进行审计，以识别任
何潜在的编码漏洞。 
注意:作为系统开发生命周期的一部分，代码审计的要求适用于所有支付应用程序组件
(内部和面向公众的网络应用程序)。代码审计可以由知识渊博的内部人员或第三方进行。 
2.2 方法 
代码审计是对计算机源代码的系统审计，审计以各种形式进行，可以在每个组织的不同
阶段完成。这本书并没有试图告诉每个组织如何在他们的组织中实现代码审计，但是这一部
分确实从非正式的演练、正式的审计或工具辅助的代码审计中，以通用的术语和方法进行了
讨论。 
2.2.1 开发代码审计流程时要考虑的因素 
当计划执行代码安全审计时，有多个因素需要考虑，因为每个代码审计对于其上下文都
31 
是唯一的。除了本节中讨论的元素之外，还必须考虑影响分析的任何技术或业务相关因素(业
务决策，如截止日期和资源)，因为这些因素最终可能决定代码审计的过程和最有效的执行
方式。 
风险 
不可能 100%地保证所有内容的安全，因此优先考虑哪些特性和组件必须用基于风险的
方法进行安全审计。虽然这个项目强调了设计安全的一些重要领域，但在提交给存储库的所
有代码中，并不是所有代码都将得到代码安全审计的关注和审计。 
目的和背景 
计算机程序有不同的目的，因此安全等级将根据实现的功能而变化。一个支付网络应用
程序将比一个推广网站有更高的安全标准。需要时刻提醒企业想要保护什么：在支付应用程
序的情况下，信用卡等数据将具有最高优先级，但是在促销网站的情况下，要保护的最重要
的是与网络服务器的连接凭据。这是将上下文在基于风险的方法中的另一种方式。进行安全
审计的人员应该知道这些优先级。 
代码行 
工作量的一个指标是必须审计的代码行数。IDEs(集成开发环境)，如 Visual Studio 或
Eclipse，包含允许计算代码行数的功能。或者在 Unix/Linux 中，有像“wc”这样的简单
工具可以计算代码行数。用面向对象语言编写的程序被分成类，每个类相当于一页代码。一
32 
般来说，行号有助于精确定位必须纠正的代码的确切位置，并且在审计开发人员所做的纠正
时非常有用(例如代码库中的历史)。程序包含的代码行越多，代码中出现错误的可能性就越
大。 
编程语言 
用类型化安全语言(如 C#或 Java)编写的程序比其他程序(如 C 和 C++)更不容易受到某
些安全漏洞(如缓冲区溢出)的攻击。当执行代码审计时，语言的种类将决定预期的错误类型。
通常，软件公司倾向于使用他们的程序员熟悉的几种语言。不过，当决定用开发人员不熟悉
的语言创建新代码时，管理层必须意识到，由于缺乏内部经验，安全地审计该代码的风险会
增加。在本指南中，各部分解释了围绕要审计的特定编程语言代码的最常见问题，并以此作
为参考来发现代码中的特定安全问题。 
资源、时间和期限 
毋庸置疑，这是一个根本因素。对于一个复杂的程序来说，一个合适的代码审计需要更
长的时间，并且比一个简单的程序需要更高的分析技巧。如果没有适当提供资源，所涉及的
风险会更高。确保在执行审计时对此进行了明确评估。 
2.2.2 在软件开发生命周期中整合代码审计 
代码审计存在于每一个正式的安全软件开发生命周期中，但是代码审计的正式程度也有
很大的不同。主要是因为代码审计的目的各不相同，比如安全性、遵从性、编程风格等等。
在整个软件开发生命周期(XP、Agile、RAD、BSIMM、CMMI、微软 ALM)中，都有应用
33 
安全应该参与的地方。将代码安全审计集成到 SLDC 系统中的想法听起来可能令人生畏，因
为对于一个已经超出预算和时间限制的项目来说，还有另一层复杂性或额外的成本和时间。
不过，它被证明具有成本效益，并提供了静态分析器无法提供的额外安全级别。 
在一些行业中，对公司的安全增强的驱动力可能不仅仅是由产生更好的代码的愿望驱动
的，这些行业具有在编写软件时需要适当小心的法规和法律(例如。政府和金融行业)，也有
可能没有试图保护其软件开发生命周期带来的罚款远远大于在开发生命周期中增加安全性
的成本。 
当将代码安全审计集成到软件开发生命周期中时，组织应该创建代码安全审计者应该遵
守的标准和策略。这将创建任务的正确的重要性，而不是仅仅被看作是一个只需要被审计的
项目任务。项目时间也需要分配给任务，以便有足够的时间来完成任务(以及代码安全审计
产生的任何补救任务)。标准还允许管理和安全专家(例如，安全架构师)指导员工遵守什么样
的安全编码，并允许员工在需要审计仲裁时参考(标准)。 
代码审计报告 
标准报告模板将提供足够的信息，使代码审计人员能够根据应用程序威胁模型对软
件漏洞进行分类和优先级排序。该报告不需要有多长，它可以是基于文档的，也可以并
入许多自动匹配的代码审计工具。报告应提供以下信息: 
•审计日期。 
•应用程序名称，审计的代码模块。 
•开发人员和代码审阅者的姓名。 
•任务或功能名称（TFS，GIT，Subversion，故障单等）。 
34 
•简短句子以对软件漏洞进行分类和优先级排序，以及需要完成或采取后续措施的补
救措施。 
•链接到与任务/功能相关的文档，包括需求，设计，测试和威胁建模文档。 
•代码审计清单（如果使用），或链接到组织的代码审计清单。（请参阅附录 A） 
•对开发人员的代码进行了测试。 特别是，单元或自动测试本身可以是评论提交的一
部分。 
•在审计代码之前是否使用了诸如 FxCop，BinScope Binary Analyzer 等之类的工
具。 
今天，大多数组织为了使用敏捷开发的方法，已经修改了他们的软件开发生命周期过程。
正因为如此，组织将需要查看他们自己的内部开发实践，来确定安全代码审计需要在哪里以
及多久进行一次。如果项目延迟并超出预算，那么这增加了软件修复导致安全漏洞的机会，
因为现在的重点是让项目更快地部署。如果采用对生产中的代码进行代码审计可能会发现软
件漏洞，但要知道，黑客们正在竞相寻找漏洞，在补救措施实施期间，易受攻击的软件将继
续提供生产（因此这样做风险比较高）。 
2.2.3 何时进行代码审计 
一旦一个组织决定将代码审计作为其内部代码过程的一部分。下一个要问的大问题是确
定代码将在 SDLC 的哪个阶段被审计。本节讨论了包含代码审计的三种可能方式。在软件开
发生命周期中，有三个阶段可以审计代码: 
35 