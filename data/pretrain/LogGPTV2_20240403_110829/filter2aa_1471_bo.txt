temporary state names—they are tied to the process that registered a given
instance of a state name, and all the data is stored in kernel pool only. These
types of names, for example, are used to implement the per-process wake
channels described earlier. Other uses include power manager notifications,
and direct service triggers used by the SCM.
WNF publishing and subscription model
When publishers leverage WNF, they do so by following a standard pattern
of registering the state name (in the case of non-well-known state names) and
publishing some data that they want to expose. They can also choose not to
publish any data but simply provide a 0-byte buffer, which serves as a way to
“light up” the state and signals the subscribers anyway, even though no data
was stored.
Consumers, on the other hand, use WNF’s registration capabilities to
associate a callback with a given WNF state name. Whenever a change is
published, this callback is activated, and, for kernel mode, the caller is
expected to call the appropriate WNF API to retrieve the data associated with
the state name. (The buffer size is provided, allowing the caller to allocate
some pool, if needed, or perhaps choose to use the stack.) For user mode, on
the other hand, the underlying WNF notification mechanism inside of
Ntdll.dll takes care of allocating a heap-backed buffer and providing a
pointer to this data directly to the callback registered by the subscriber.
In both cases, the callback also provides the change stamp, which acts as a
unique monotonic sequence number that can be used to detect missed
published data (if a subscriber was inactive, for some reason, and the
publisher continued to produce changes). Additionally, a custom context can
be associated with the callback, which is useful in C++ situations to tie the
static function pointer to its class.
 Note
WNF provides an API for querying whether a given WNF state name has
been registered yet (allowing a consumer to implement special logic if it
detects the producer must not yet be active), as well as an API for
querying whether there are any subscriptions currently active for a given
state name (allowing a publisher to implement special logic such as
perhaps delaying additional data publication, which would override the
previous state data).
WNF manages what might be thousands of subscriptions by associating a
data structure with each kernel and/or user-mode subscription and tying all
the subscriptions for a given WNF state name together. This way, when a
state name is published to, the list of subscriptions is parsed, and, for user
mode, a delivery payload is added to a linked list followed by the signaling
of a per-process notification event—this instructs the WNF delivery code in
Ntdll.dll to call the API to consume the payload (and any other additional
delivery payloads that were added to the list in the meantime). For kernel
mode, the mechanism is simpler—the callback is synchronously executed in
the context of the publisher.
Note that it’s also possible to subscribe to notifications in two modes:
data-notification mode, and meta-notification mode. The former does what
one might expect—executing the callback when new data has been
associated with a WNF state name. The latter is more interesting because it
sends notifications when a new consumer has become active or inactive, as
well as when a publisher has terminated (in the case of a volatile state name,
where such a concept exists).
Finally, it’s worth pointing out that user-mode subscriptions have an
additional wrinkle: Because Ntdll.dll manages the WNF notifications for the
entire process, it’s possible for multiple components (such as dynamic
libraries/DLLs) to have requested their own callback for the same WNF state
name (but for different reasons and with different contexts). In this situation,
the Ntdll.dll library needs to associate registration contexts with each
module, so that the per-process delivery payload can be translated into the
appropriate callback and only delivered if the requested delivery mode
matches the notification type of the subscriber.
Experiment: Using the WnfDump utility to dump
WNF state names
In this experiment, you use one of the book tools (WnfDump) to
register a WNF subscription to the
WNF_SHEL_DESKTOP_APPLICATION_STARTED state name
and the WNF_AUDC_RENDER state name.
Execute wnfdump on the command line with the following
flags:
Click here to view code image
        -i WNF_SHEL_DESKTOP_APPLICATION_STARTED -v
The tool displays information about the state name and reads its
data, such as shown in the following output:
Click here to view code image
C:\>wnfdump.exe -i WNF_SHEL_DESKTOP_APPLICATION_STARTED -v
WNF State Name                                    | S | L | 
P | AC | N | CurSize | MaxSize
------------------------------------------------------------
-------------------------------
WNF_SHEL_DESKTOP_APPLICATION_STARTED              | S | W | 
N | RW | I |      28 |     512
65 00 3A 00 6E 00 6F 00-74 00 65 00 70 00 61 00  
e.:.n.o.t.e.p.a.
64 00 2E 00 65 00 78 00-65 00 00 00              
d...e.x.e...
Because this event is associated with Explorer (the shell) starting
desktop applications, you will see one of the last applications you
double-clicked, used the Start menu or Run menu for, or, in
general, anything that the ShellExecute API was used on. The
change stamp is also shown, which will end up a counter of how
many desktop applications have been started this way since booting
this instance of Windows (as this is a persistent, but not permanent,
event).
Launch a new desktop application such as Paint by using the
Start menu and try the wnfdump command again. You should see
the change stamp incremented and new binary data shown.
WNF event aggregation
Although WNF on its own provides a powerful way for clients and services
to exchange state information and be notified of each other’s statuses, there
may be situations where a given client/subscriber is interested in more than a
single WNF state name.
For example, there may be a WNF state name that is published whenever
the screen backlight is off, another when the wireless card is powered off,
and yet another when the user is no longer physically present. A subscriber
may want to be notified when all of these WNF state names have been
published—yet another may require a notification when either the first two
or the latter has been published.
Unfortunately, the WNF system calls and infrastructure provided by
Ntdll.dll to user-mode clients (and equally, the API surface provided by the
kernel) only operate on single WNF state names. Therefore, the kinds of
examples given would require manual handling through a state machine that
each subscriber would need to implement.
To facilitate this common requirement, a component exists both in user
mode as well as in kernel mode that handles the complexity of such a state
machine and exposes a simple API: the Common Event Aggregator (CEA)
implemented in CEA.SYS for kernel-mode callers and EventAggregation.dll
for user-mode callers. These libraries export a set of APIs (such as
EaCreateAggregatedEvent and EaSignalAggregatedEvent), which allow an
interrupt-type behavior (a start callback while a WNF state is true, and a stop
callback once the WNF state if false) as well as the combination of
conditions with operators such as AND, OR, and NOT.
Users of CEA include the USB Stack as well as the Windows Driver
Foundation (WDF), which exposes a framework callback for WNF state
name changes. Further, the Power Delivery Coordinator (Pdc.sys) uses CEA
to build power state machines like the example at the beginning of this
subsection. The Unified Background Process Manager (UBPM) described in
Chapter 9 also relies on CEA to implement capabilities such as starting and
stopping services based on low power and/or idle conditions.
Finally, WNF is also integral to a service called the System Event Broker
(SEB), implemented in SystemEventsBroker.dll and whose client library
lives in SystemEventsBrokerClient.dll. The latter exports APIs such as
SebRegisterPrivateEvent, SebQueryEventData, and SebSignalEvent, which
are then passed through an RPC interface to the service. In user mode, SEB is
a cornerstone of the Universal Windows Platform (UWP) and the various
APIs that interrogate system state, and services that trigger themselves based
on certain state changes that WNF exposes. Especially on OneCore-derived
systems such as Windows Phone and XBOX (which, as was shown earlier,
make up more than a few hundred of the well-known WNF state names),
SEB is a central powerhouse of system notification capabilities, replacing the
legacy role that the Window Manager provided through messages such as
WM_DEVICEARRIVAL, WM_SESSIONENDCHANGE, WM_POWER, and
others.
SEB pipes into the Broker Infrastructure (BI) used by UWP applications
and allows applications, even when running under an AppContainer, to
access WNF events that map to systemwide state. In turn, for WinRT
applications, the Windows.ApplicationModel.Background namespace
exposes a SystemTrigger class, which implements IBackgroundTrigger, that
pipes into the SEB’s RPC services and C++ API, for certain well-known
system events, which ultimately transforms to WNF_SEB_XXX event state
names. It serves as a perfect example of how something highly
undocumented and internal, such as WNF, can ultimately be at the heart of a
high-level documented API for Modern UWP application development. SEB
is only one of the many brokers that UWP exposes, and at the end of the
chapter, we cover background tasks and the Broker Infrastructure in full
detail.
User-mode debugging
Support for user-mode debugging is split into three different modules. The
first one is located in the executive itself and has the prefix Dbgk, which
stands for Debugging Framework. It provides the necessary internal
functions for registering and listening for debug events, managing the debug
object, and packaging the information for consumption by its user-mode
counterpart. The user-mode component that talks directly to Dbgk is located
in the native system library, Ntdll.dll, under a set of APIs that begin with the
prefix DbgUi. These APIs are responsible for wrapping the underlying debug
object implementation (which is opaque), and they allow all subsystem
applications to use debugging by wrapping their own APIs around the DbgUi
implementation. Finally, the third component in user-mode debugging
belongs to the subsystem DLLs. It is the exposed, documented API (located
in KernelBase.dll for the Windows subsystem) that each subsystem supports
for performing debugging of other applications.
Kernel support
The kernel supports user-mode debugging through an object mentioned
earlier: the debug object. It provides a series of system calls, most of which
map directly to the Windows debugging API, typically accessed through the
DbgUi layer first. The debug object itself is a simple construct, composed of
a series of flags that determine state, an event to notify any waiters that
debugger events are present, a doubly linked list of debug events waiting to
be processed, and a fast mutex used for locking the object. This is all the
information that the kernel requires for successfully receiving and sending
debugger events, and each debugged process has a debug port member in its
executive process structure pointing to this debug object.
Once a process has an associated debug port, the events described in Table
8-32 can cause a debug event to be inserted into the list of events.
Table 8-32 Kernel-mode debugging events
Eve
nt 
Ide
ntifi
er
Meaning
Triggered By
Dbg
Km
Exc
epti
onA
pi
An 
exception 
has 
occurred.
KiDispatchException during an exception that 
occurred in user mode.
Dbg
Km
Cre
ateT
A new 
thread has 
been 
created.
Startup of a user-mode thread.
hrea
dAp
i
Dbg
Km
Cre
ateP
roce
ssA
pi
A new 
process 
has been 
created.
Startup of a user-mode thread that is the first 
thread in the process, if the CreateReported flag is 
not already set in EPROCESS.
Dbg
Km
Exit
Thr
ead
Api
A thread 
has exited.
Death of a user-mode thread, if the ThreadInserted 
flag is set in ETHREAD.
Dbg
Km
Exit
Pro
cess
Api
A process 
has exited.
Death of a user-mode thread that was the last 
thread in the process, if the ThreadInserted flag is 
set in ETHREAD.
Dbg
Km
Loa
dDll
Api
A DLL 
was 
loaded.
NtMapViewOfSection when the section is an image 
file (could be an EXE as well), if the 
SuppressDebugMsg flag is not set in the TEB.
Dbg
Km
Unl
oad
A DLL 
was 
unloaded.
NtUnmapViewOfSection when the section is an 
image file (could be an EXE as well), if the 
SuppressDebugMsg flag is not set in the TEB.
Dll
Api
Dbg
Km
Err
orR
epor
tApi
A user-
mode 
exception 
must be 
forwarded 
to WER.
This special case message is sent over ALPC, not 
the debug object, if the DbgKmExceptionApi 
message returned 
DBG_EXCEPTION_NOT_HANDLED, so that 
WER can now take over exception processing.
Apart from the causes mentioned in the table, there are a couple of special
triggering cases outside the regular scenarios that occur at the time a
debugger object first becomes associated with a process. The first create
process and create thread messages will be manually sent when the debugger
is attached, first for the process itself and its main thread and followed by
create thread messages for all the other threads in the process. Finally, load
dll events for the executable being debugged, starting with Ntdll.dll and then
all the current DLLs loaded in the debugged process will be sent. Similarly,
if a debugger is already attached, but a cloned process (fork) is created, the
same events will also be sent for the first thread in the clone (as instead of
just Ntdll.dll, all other DLLs are also present in the cloned address space).
There also exists a special flag that can be set on a thread, either during
creation or dynamically, called hide from debugger. When this flag is turned
on, which results in the HideFromDebugger flag in the TEB to be set, all
operations done by the current thread, even if the debug port has a debug
port, will not result in a debugger message.
Once a debugger object has been associated with a process, the process
enters the deep freeze state that is also used for UWP applications. As a
reminder, this suspends all threads and prevents any new remote thread
creation. At this point, it is the debugger’s responsibility to start requesting
that debug events be sent through. Debuggers usually request that debug
events be sent back to user mode by performing a wait on the debug object.
This call loops the list of debug events. As each request is removed from the
list, its contents are converted from the internal DBGK structure to the native
structure that the next layer up understands. As you’ll see, this structure is
different from the Win32 structure as well, and another layer of conversion
has to occur. Even after all pending debug messages have been processed by
the debugger, the kernel does not automatically resume the process. It is the
debugger’s responsibility to call the ContinueDebugEvent function to resume
execution.
Apart from some more complex handling of certain multithreading issues,
the basic model for the framework is a simple matter of producers—code in
the kernel that generates the debug events in the previous table—and
consumers—the debugger waiting on these events and acknowledging their
receipt.
Native support
Although the basic protocol for user-mode debugging is quite simple, it’s not
directly usable by Windows applications—instead, it’s wrapped by the
DbgUi functions in Ntdll.dll. This abstraction is required to allow native
applications, as well as different subsystems, to use these routines (because
code inside Ntdll.dll has no dependencies). The functions that this component
provides are mostly analogous to the Windows API functions and related
system calls. Internally, the code also provides the functionality required to
create a debug object associated with the thread. The handle to a debug object
that is created is never exposed. It is saved instead in the thread environment
block (TEB) of the debugger thread that performs the attachment. (For more
information on the TEB, see Chapter 4 of Part 1.) This value is saved in the
DbgSsReserved[1] field.
When a debugger attaches to a process, it expects the process to be broken
into—that is, an int 3 (breakpoint) operation should have happened,
generated by a thread injected into the process. If this didn’t happen, the
debugger would never actually be able to take control of the process and
would merely see debug events flying by. Ntdll.dll is responsible for creating
and injecting that thread into the target process. Note that this thread is
created with a special flag, which the kernel sets on the TEB, which results in
the SkipThreadAttach flag to be set, avoiding DLL_THREAD_ATTACH
notifications and TLS slot usage, which could cause unwanted side effects
each time a debugger would break into the process.
Finally, Ntdll.dll also provides APIs to convert the native structure for
debug events into the structure that the Windows API understands. This is
done by following the conversions in Table 8-33.
Table 8-33 Native to Win32 conversions
Native 
State 
Change
Win32 State 
Change
Details
DbgCreat
eThreadSt
ateChange
CREATE_THREAD