(in)equalities. But so far, we did not have problems with
completeness using our approach.
5. HIGH LEVEL LOGIC
In theory, the core rules presented so far are suﬃcient
to perform proofs that do not require hybrid arguments or
equivalence up to failure. In practice, the level of abstraction
is too low to perform non-trivial proofs.
In this section, we therefore derive high-level rules that
capture standard arguments in cryptographic proofs. The
high-level rules critically rely on algorithms that automati-
cally infer arguments required for the elaboration into core
rules. To perform fully automated proofs and to automati-
cally discharge individual proof obligations, we then present
a proof search procedure that ﬁnds derivations using our
high-level rules.
5.1 Derived rules
The Simp rule unfolds all let-bindings and rewrites all ex-
pressions to their normal form. Simp is elaborated to appli-
cations of Subst that replace expressions by their normal
form and applications of Trans and Add to remove (un-
used) let-bindings. The rule exploits that the normal form
replaces all occurences of let-deﬁned variables with their def-
initions. Optionally, the Simp rule can also use Swap to
reorder commands in a unique, dependency-preserving way,
remove exceptional values from samplings, and replace sam-
plings of group elements by samplings of exponents.
The high-level Rnd(cid:63) rule accepts a placeholder for one of
C or C(cid:48). For example, given C and in a context where Γ
holds, Rnd(cid:63) uses a specialized algorithm for deducibility to
ﬁnd C(cid:48) such that Γ |= C, (cid:126)x (cid:96)C(cid:48)
E 2 where (cid:126)x denotes all vari-
ables in G that are deﬁned before the considered random
sampling. Rnd(cid:63) then uses the Simp rule to unfold the in-
troduced let-binding. We will describe the algorithm for
conditional deducibility in Section 5.3.
The Indep rule can be used to bound the probability of
an event ev in G with 1/|t| if the event implies that G
“guesses” the value of an unused randomly sampled vari-
able. For all random variables r that are not used in the
game, Indep tries to ﬁnd an expression e not containing r
such that r = e is implied by ev. After adding such an
equality to the event, Except can be used to sample r
from t \ e. The event can then be simpliﬁed to false and
we can conclude by applying FalseEv. To ﬁnd such an e,
Indep ﬁrst combines all equalities in the event to obtain
an equality of the form (e1, . . . , ek) = (0, . . . , 0). Then,
it uses a specialized algorithm for deducibility to ﬁnd a
C such that Γ |= (e1, . . . , ek), (cid:126)x (cid:96)CE r where (cid:126)x contains
all variables that are deﬁned before r is sampled. Since
C{(e1, . . . , ek)} = C{(0, . . . , 0)} is implied by the event and
C{(0, . . . , 0)} does not contain r, it now suﬃces to exploit
Γ |= C{(e1, . . . , ek)} =E r to get the desired equality of the
form r = e.
The high-level rule IfEq replaces all occurences of b?r1 : r2
in a security experiment SE by r1 if r1 and r2 are randomly
sampled variables of type Fq that only occur in this context.
The IfEq rule ﬁrst applies Rnd(cid:63) to replace r2 by r1 + r2.
This yields r1 + (b?0 : r2) after simpliﬁcation. Then, Rnd(cid:63)
is applied to the sampling of r1 and replaces r1 + (b?0 : r2)
with r1. This often makes the adversary’s view independent
of b and enables applications of Indep.
11625.2 Automated application of assumptions
To apply a computational assumption such as [ G(cid:48) : ev(cid:48) ]succ
to a judgment [ G : ev ]succ, the Abstract rule must be used
followed by the Refl rule. To apply Abstract, the simu-
lator argument B has to be given explicitly and the instan-
tiation of B in G(cid:48) : ev(cid:48) with B has to be syntactically equal
to G : ev. To apply an assumption, it is therefore necessary
to perform the following steps:
1. Rewrite G and G(cid:48) into a normal form, e.g., instead of
sampling X ∈ Gi, sample x ∈ Fq and compute gx
i .
2. Swap and rename random samplings in G to match up
with G(cid:48). The remainder of G will correspond to the
simulator B.
3. Rewrite the part of G corresponding to B such that it
does not use log or the random variables sampled by
the challenger. To achieve this, the argument a used in
the call B(a) in G(cid:48) can be used instead. It might also
be required to replace samplings of group elements in
B by samplings of exponents.
We use the correct variant of Simp to perform the ﬁrst
step unfolding all let-bindings in both games.
If required
to match up the samplings in both games, we also remove
exceptions from samplings. Then, for all injections ρ from
samplings in G(cid:48) to samplings in G, we try the following.
We match up the samplings according to ρ and match up
adversary calls in G(cid:48) with commands in G. To ﬁnd the cor-
rect return value for the adversary call, we match up the
two events ev and ev(cid:48). We now know the commands B(cid:48)
and the return expression B(cid:48)
ret that make G(cid:48) equivalent to
G. We still must rewrite these to (Bcs, Bret) to satisfy the
restrictions described in the third step. To achieve this, we
use conditional deducibility and for each expression e in B(cid:48)
we try to ﬁnd a C such that Γ |= C{a, (cid:126)x} =E e where a
is the adversay input and (cid:126)x are the variables deﬁned in B(cid:48)
before e is used.
cs
The approach for applying a decisional assumption of the
form [ G0 : ev0 ][ G1 : ev1 ] is similar. Instead of discharging
a judgment [ SE ]t, it yields a new judgment [ SE(cid:48) ]t where
the diﬀerence between SE and SE(cid:48) reﬂects the diﬀerence
between [ G0 : ev0 ] and [ G1 : ev1 ]. The high-level rule for
decisional assumptions ﬁrst rewrites SE such that it can be
expressed as inst(G0, B, B) for some B. Then it computes
SE(cid:48) = inst(G1, B, B) and applies Trans(SE(cid:48)). The ﬁrst
premise of Trans is [ SE(cid:48) ]t. The second premise is dis-
charged by applying Abstract (with the same B and B)
to both [SE] and [SE(cid:48)] in the distinguishing probability fol-
lowed by Refl.
5.3 Algorithms for conditional deducibility
So far, we have encountered three diﬀerent high-level rules
that require an algorithm to solve conditional deducibility
problems. The Rnd(cid:63) rule must ﬁnd the inverse C(cid:48) of a given
context C. The Indep rule must ﬁnd a context C to extract
a random variable from an expression. The rules for the
automated application of assumptions must ﬁnd (log-free)
contexts C to deduce expressions e from known variables (cid:126)x
and the adversary input a.
We have developed an algorithm following the approach
described in [18] to deal with the combination of theories
and to deal with Xor as a monoidal theory by solving equa-
tions over the associated semiring. For deducibility in groups
and Fq, we extended their approach to deal with the condi-
tional axioms required to model inversion as a partial func-
tion. Our extension consists of two separate algorithms.
The ﬁrst algorithm is used for Rnd(cid:63) and Indep and uses
log to reduce deducibility in Gi to deducibility in Fq.
In
both use-cases, the subroutine used for deducibility in Fq
must solve problems of the form Γ |= e, (cid:126)x (cid:96)E y where (cid:126)x is a
vector of variables of type Fq, y is a variable of type Fq, and e
is a well-deﬁned ﬁeld-expression over the variables (cid:126)x and y.
We can therefore normalize e and obtain two polynomials f
and h such that e is equal to f∗h−1. If y occurs in both f and
h, we give up. Otherwise, let {f, h} = { ˆw, w} such that w
contains y and ˆw does not. We can then deduce ˆw and it
suﬃces to focus on deducing y from w. To achieve this, we
try to ﬁnd w1, w2 such that w is equal to w1 ∗ y + w2 and wi
does not contain y and is hence deducible. If the degree of y
in w is diﬀerent from 1, this will not be possible and we give
up. Otherwise, we can solve for y and since ˆw, w1, and w2
are deducible, we can deduce y from f ∗ h−1 which is either
equal to ˆw ∗ (w1 ∗ y + w2)−1 or to (w1 ∗ y + w2) ∗ ˆw−1.
The second algorithm is more complicated since the con-
text C cannot use log and we must distinguish between ex-
pressions in Fq that are known and expression that are only
known “in the exponent”. In the second case, we can only
perform a limited number of multiplications using pairings
and compute linear combinations using group multiplica-
tions. Our algorithm is tailored to problems of the form
Γ |= (cid:126)x, gf1
j where (cid:126)x is a vector of variables
of type Fq and the fi and h are polynomials. To solve such
problems, we perform the following two steps keeping track
of the context associated to each step.
, . . . , gfk
ik
(cid:96)E gh
i1
1. Compute all group elements in Gj that can be obtained
by applying pairings and isomorphisms to the given
group elements gfu
. This results in the new problem
iu
Γ |= (cid:126)x, gw1
, . . . , gwl
j
2. Search for polynomials ui over (cid:126)x such that
j (cid:96)E gh
j .
l(cid:88)
ui ∗ wi = h.
i=1
To ﬁnd such polynomials, we roughly proceed as fol-
lows. Perform a division with remainder of h by wi to
obtain ui and b such that h = ui ∗ wi + b. Check that
ui is a polynomial over (cid:126)x and continue with h := b.
Since the division step might succeed with some wj,
but we might get stuck later on since there is no so-
lution that uses wj, we perform backtracking on the
choice of divisors wj.
5.4 Proof search
i
Between each step, our proof search procedure applies the
simpliﬁcation rule Simp. This is critical since most steps are
information-theoretical and exploit that group elements are
always of the form gf /h
for polynomials f and h. Next, we
try to apply FalseEv, Indep, or a computational assump-
tion that we want to use in the proof. Then, we try to make
the view of an adversary Ai independent of random vari-
ables by applying Rnd(cid:63) to replace contexts C{r} occuring
in the game by r. If this succeeds, then the other random
variables occuring in C are not used in the given positions
anymore. This might enable new applications of Indep, e.g.,
if a variable r(cid:48) that previously occcured in C{r} in an adver-
sary argument only occurs in the event afterwards. Another
useful side-eﬀect is that Rnd might remove products of vari-
1163GBB,1 =
GBB,4 =
i∗ ← A1();
1 :
2 : c, d, h, e ←$ Fq; let P =(gc, gd, gh);
3 : b ←$ B; let C =(ge, g(d∗i∗+h)∗e );
let K0 = ˆe(g, g)c∗d∗e ; K1 ←$ Gt;
4 :
5 : b(cid:48) ← A2(P, C, (b?K0 : K1)) with
PrivKey(i) = {
guard(i (cid:54)= i∗);
r ←$ Fq;
return (g(c∗d+r∗(d∗i+h)), gr)
5.1 :
5.2 :
5.3 :
};
i∗ ← A1();
1 :
2 : c, d, h, e, t ←$ Fq; let P =(gc, gd, gh−d∗i∗
3 : b ←$ B; let C =(ge, gh∗e);
4 :
5 : b(cid:48) ← A2(P, C, (b?K0 : K1)) with
let K0 = ˆe(g, g)t ; K1 ←$ Gt;
PrivKey(i) = {
guard(i (cid:54)= i∗);
r ←$ Fq;
return (g(c∗d+r∗(d∗(i−i∗)+h)), gr)
5.1 :
5.2 :
5.3 :
};
GBB,2 =
);
GBB,5 =
i∗ ← A1();
1 :
2 : c, d, h, e ←$ Fq; let P =(gc, gd, gh−d∗i∗
3 : b ←$ B; let C =(ge, gh∗e );
let K0 = ˆe(g, g)c∗d∗e; K1 ←$ Gt;
4 :
5 : b(cid:48) ← A2(P, C, (b?K0 : K1)) with
);
PrivKey(i) = {
guard(i (cid:54)= i∗);
r ←$ Fq;
return ( g(c∗d+r∗(d∗(i−i∗)+h)) , gr)
5.1 :
5.2 :
5.3 :
};
i∗ ← A1();
1 :
2 : c, d, h, e, t ←$ Fq; let P =(gc, gd, gh−d∗i∗
3 : b ←$ B; let C =(ge, gh∗e);
5 : b(cid:48) ← A2(P, C, ˆe(g, g)t )) with
);
PrivKey(i) = {
guard(i (cid:54)= i∗);
r ←$ Fq;
return (g(c∗d+r∗(d∗(i−i∗)+h)), gr)
5.1 :
5.2 :
5.3 :
};
Figure 6: Proof of the Boneh-Boyen IBKEM using our high-level rules.
ables that are not deducible from the values provided by the
challenger for an assumption. Finally, we try to to apply one
of the decisional assumptions speciﬁed in the given context.
To exclude useless applications of decisional assumptions,
we check that the adversary arguments that diﬀer in G0 and
G1 are used. To prevent cycles, we also disallow applications
of assumptions that undo previous applications by applying
the assumption in the opposite direction. In general, non-