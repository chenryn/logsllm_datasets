iff Au satisfies the corresponding tree Ti . Otherwise, the Dec algorithm
outputs null.
2. Security Definition
Our scheme should be secure in the following security model.
Briefly, the adversary in the following game tries to distinguish an
arbitrary but equal-length {m, {τ}} pair, with arbitrary size of the set
{τ}. Using Π to denote our FAPC scheme, the security definition is
stated via the following experiment Exp
, which is a variation
of indistinguishability under chosen plaintext attack (CPA):
Setup. The challenger runs the Setup algorithm and gives the
public key pk to the adversary A.
Phase 1. The adversary A repeatedly makes attribute key queries
corresponding to attributes A1, A2, . . ., An1. The challenger re-
sponds by running the attribute key generation algorithm to gener-
(cid:41)
(cid:40)
ate the corresponding attribute key SKj, for each j ∈ [1, n1].
Challenge. The adversary A submits two sets of plaintexts
m0,N0 = {τ
, where all coun-
terparts are of equal length. In addition, the adversary A gives a
challenge set of access trees T ∗ = {Ti}i∈[1, N ] and T∗
∀ such that
none of Au from Phase 1 satisfies any tree. Here T∗
∀ is established
such that any authorized user’s attribute set could satisfy T∗
∀, if and
only if it satisfies any tree Ti, i ∈ [1, N ]. The challenger first flips a
random coin µ ∈ {0, 1}, and chooses a random session key k, then
and CT∗
computes the corresponding ciphertexts ET ∗
.
Nµ
The ciphertexts are given to the adversary A.
Phase 2. Phase 1 is repeated under the condition that none of the
sets of attributes An1+1, An1+2, . . ., An2 satisfies any access tree in
Challenge.
Guess. The adversary A outputs a guess µ′ of µ.
We define the advantage of the adversary A in this game as
m1,N1 = {τ
∀ (k ), CT∗
i }i∈[1, N ]
0
i }i∈[1, N ]
1
and
mµ
(cid:41)
(cid:40)
AdvA = Pr[µ′ = µ] − 1/2.
Definition 3.2 (Scheme Security). We say that our FAPC scheme
is secure if all probabilistic polynomial-time (PPT) A have at most a
negligible advantage AdvA in the above experiment.
3.2 FAPC Scheme Details
The details of each algorithm are as follows:
Setup. This algorithm calls the setup algorithm of CP-ABE
3.2.1
[1], to compute the master key mk and the public key pk as (mk, pk ) =
CP-ABE.Setup(1λ ).
3.2.2 Encrypt’. Given the public key pk, a plaintext m (the data
component), a session key k ∈ GT and a corresponding access tree
T∀, this encryption algorithm computes the shared component’s
ciphertext by encrypting data m as CT m under the session key k.
• The Shared Component (Data Component)
We choose two random numbers ˜s, ˆs ∈ Zq, and compute :
(1)
(2)
Where e (д, д)α is a part of the pk. The shared component is denoted
as:
Cm = m · e (д, д)α · ˜s ,
Pup = e (д, д)α ·ˆs .
CTm = {Cm, Ek (Pup )},
(3)
Session 2B: Advanced Encryption AlgorithmsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand162where Ek (·) is an efficient symmetric encryption algorithm using
the session key k. Pup is an auxiliary parameter for later data up-
date, which can be accessed by all the authorized users, but must
be protected against the cloud. A straight-forward approach for se-
curely sharing the Pup with authorized users is using the traditional
CP-ABE scheme to encrypt it under the tree T∀, which however,
introduces large overhead at the DO. To reduce the computation
overhead, we adopt the hybrid encryption scheme by encrypting
Pup with a symmetric-session key k. Then k is encrypted under
tree T∀ by CP-ABE (Equ. (4)) . Since the session key k could be
reused continuously for multi-round data updating, the computa-
tion overhead is remarkably reduced.
3.2.3 Encrypt”. Given the public key pk, a set of plaintexts N =
{τi}i∈[1, N ] (the identity-associated components), a set of access
trees T = {Ti}i∈[1, N ], this encryption algorithm computes the
ciphertexts by: 1) encrypting the session key k as ET∀ (k ) under the
corresponding access tree T∀, where T∀ is constructed in such a
way that any user, whose attribute set satisfies any tree Ti ∈ T ,
also satisfies T∀; 2) encrypting the identity-associated components
N = {τi}i∈[1, N ] as CT N under a set of access trees T = {Ti}i∈[1, N ],
where each access tree Ti denotes which identity could access the
i-th noisy version.
• Session Key Component
Encrypt the session key k as ciphertext ET∀ (k ) under the tree T∀
by the traditional CP-ABE scheme, as shown in Equ. (4). We direct
readers to the related work [1] for details.
ET∀ (k ) = CP-ABE.Encrypt (T∀, k, pk )
(4)
• The Identity-Associated Component (Noise Component)
First each τi ∈ N is randomized as Aτi
is
encrypted as ETi (Aτi ) under the corresponding access tree Ti by
the traditional CP-ABE scheme, as shown in Equ. (6).
by Equ. (5). Then Aτi
(5)
(6)
Aτi
= (τi )
ETi (Aτi ) = CP-ABE.Encrypt (Ti , Aτi , pk )
−α ·( ˜s−ˆs )
−1 · e (д, д)
(cid:40)
(cid:41)
(cid:40)
CTm, ETi (Aτi )
(cid:41)
The identity-associated component’s ciphertext is denoted as:
ETi (Aτi )
For expression simplicity, we use CT
CT N =
(7)
i∈[1, N ]
m to denote each pair of
τi
shared component and identity-associated component as:
.
CT
(cid:16)
τi
m =
(cid:17)(cid:41)
(8)
(cid:40)
3.2.4 U pdate. This algorithm is to replace the shared component
m with a newer version m′, by updating the ciphertext CT m =
Cm, Ek
Step 1. Update generation.
First, we choose a random number ∆s ∈ Zq, and compute
. It includes two steps:
Pup
∆Pup = e (д, д)α ·∆s , ∆Cm′ = m′
m
· e (д, д)α ·∆s .
(9)
Next, we compute P′
up as:
P
up = Pup · ∆Pup = e (д, д)α ·(ˆs +∆s ) .
′
Then we encrypt P′
up as Ek (P′
ciphertext is denoted as: CT m→m′ =
(10)
up ) with the session key k. The update
∆Cm′, Ek (P′
up )
(cid:41)
(cid:40)
.
Step 2. Update execution.
(cid:40)
Ek (Pup ) with new Ek (P′
Given CT m→m′ =
(cid:41)
∆Cm′, Ek (P′
up )
up ), and compute the new Cm′ as:
, we replace the original
(cid:40)
(cid:40)
(cid:17)(cid:41)
Cm′, Ek
CT m′ =
Cm′ = Cm · ∆Cm′ = m
′ · e (д, д)α ·( ˜s +∆s )
(11)
Finally, this update algorithm outputs the ciphertext CTm′ for the
(cid:16)
newer shared component’s plaintext m′ as:
′
up
(12)
Note that the update algorithm only modifies the shared com-
ponent without changing any identity-associated component or
session key component, yielding constant data-update complexity
regardless of the size of set N .
3.2.5 KeyGenerate. This step of attribute key generation is the
same as the key generation algorithm in CP-ABE [1]. In this algo-
rithm, we compute the secret attribute key SKu for the user with
attribute set Au, as:
P
.
(cid:41)
SKu = CP-ABE.KeyGenerate (pk, mk, Au )
(13)
ET∀ (k ) ,
3.2.6 Decrypt. Given the public key pk, the ciphertext
ETi (Aτi )
, a secret attribute key SKu associated with an attribute
set Au, this decrypt algorithm will output the composite f ′(m, τi )
if Au satisfies Ti. Otherwise it outputs null. This decrypt algorithm
includes three steps, where the first and second steps are offline,
and the third step is repeated with each update in running time:
Step 1. Decrypt the ciphertext ET∀ (k )
We call CP-ABE.Decrypt (pk, ET∀ (k ), SKu ) algorithm to decrypt
the session key k [1]. If the user’s attribute set Au doesn’t satisfy
the tree T∀, CP-ABE.Decrypt will return null. Otherwise, it returns
the session key k, as:
(cid:16)
pk, ET∀ (k ), SKu
Step 2. Decrypt the ciphertext ETi (Aτi )
In this step, we call CP-ABE.Decrypt (pk, ETi (Aτi ), SKu ) algo-
rithm. If the user’s attribute set Au doesn’t satisfy the tree Ti, the
CP-ABE.Decrypt algorithm outputs null; otherwise, we have:
CP-ABE.Decrypt
(14)
= k.
(cid:17)
CP-ABE.Decrypt
(15)
does not leak any information of the identity-
Note that the Aτi
Step 3. Compute f ′(m, τi )
First, we obtain Pup by decrypting Ek (Pup ) with the session key
associated component τi.
= Aτi .
(cid:16)
pk, ETi (Aτi ), SKu
(cid:17)
k obtained in Step 1, denoted as:
Then we obtain the composite by computing:
Dk (Ek (Pup )) = Pup .
(16)
Cm · Aτi
Pup
=
m · e (д, д)α · ˜s · (τi )−1 · e (д, д)−α ·( ˜s−ˆs )
e (д, д)α ·ˆs
(17)
′
= f
(m, τi ).
= m
τi
4 EVALUATION
The complexity and security analysis of our scheme are shown in
Appendix. We also implement a system on cloud and use a user-
cloud interactive scenario to experimentally evaluate our scheme.
Our system includes an Amazon EC2 t2.large machine with 8GB
of RAM, and multiple desktops with the Intel(R) CORE(TM) 2 Duo
Session 2B: Advanced Encryption AlgorithmsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand163CPU E8400 @ 3.00GHz and 8.00G RAM. We deploy Setup, Key Gen-
erate, Encrypt, Decrypt, and Update generation algorithms on the
desktops. The Update execution runs on the cloud. All algorithms
in our FAPC scheme are implemented using the Java Pairing-based
Cryptography (JPBC) library [8].
4.1 Performance Analysis
We use several experiments to test the three offline algorithms,
including Setup, KeyGenerate, Encrypt′′, and the online Encrypt′,
U pdate, Decrypt algorithms.
Setup. In this step, our scheme has constant time overhead of
computing the master key mk and the public key pk, which is the
same as the counterpart in the traditional CP-ABE scheme [1]. The
average running time of 1000 independent tests is 0.212s.
Key Generate. This step’s computational complexity is O (W ),
where W is the number of user’s attributes. To validate this, we
select different numbers of user attributes, ranging from 10 to 100.
According to our experiment results, the key generation time in-
creases linearly from 0.75s to 6.4s.
Encrypt. In the Encrypt′′ algorithm, for each piece of noise, the
DO needs to compute the ciphertext. Theoretically, the overall
computational complexity for encryption is O (N · X ), where N is
the number of noise and X is the average number of leaves in an
access tree. To validate it, we choose different number of noise,
ranging from 1 to 100, and test the encryption time under two
different access trees with different leaf number: 16-leaf and 64-
leaf. According to our result, the encryption time latency increases
linearly from 24s to 210s in the 16-leaf case, and increases linearly
from 90s to 840s in the 64-leaf case. As the comparison, the CP-ABE
scheme outperforms with only a negligible advantage. We should
note that most of the encryption overhead is one-time cost. Only
the encryption of the data component in Encrypt′ is online, which
is irrelevant to the number of leaf nodes as well as the number of
noises, and costs 0.04s.
Update. Theoretically, the computational complexity of update gen-
eration is constant and irrelevant to the number of noises, because