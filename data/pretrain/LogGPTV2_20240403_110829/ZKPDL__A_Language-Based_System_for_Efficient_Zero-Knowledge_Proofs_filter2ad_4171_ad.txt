the exponent cache required for complex protocols can
grow to hundreds of megabytes (using faster-performing
parameters), and so our library allows users to choose
whether to use caching, and if so how much of the cache
should be used by this optimization.
The time taken for the higher-level protocols provides
a clear view of the complexity of each protocol. For ex-
ample, the marked difference between the time required
to generate a CL issuer proof and a CL possession proof
can be attributed to the fact that a CL issuer proof re-
quires proving only one discrete log relation, while a CL
possession proof on three private values requires three
range proofs and ﬁve more discrete log relations.
Table 1 also shows that veriﬁable encryption is by
far the biggest bottleneck, requiring almost three times
as much time to compute as any other step. As seen
in the program in Section 5.2, there is one range proof
performed for each value contained in the veriﬁable es-
crow. In order to perform a range proof, the value con-
tained in the range must be decomposed as a sum of four
squares [66]. Because the values used in our veriﬁable
encryption program are much larger than the ones used
in CL signatures (about 1024 vs. 160 bits, to get 80-bit
security for both), this decomposition often takes con-
siderably more time for veriﬁable encryption than it does
for CL signatures. Furthermore, since the values being
veriﬁably encrypted are different each time, caching the
decomposition of the values wouldn’t be of any use.
A ﬁnal observation on computational performance is
that proving possession of a CL signature completely
dominates the time required to prove the validity of a
coin, since the timings for the two proofs are within mil-
liseconds. This suggests that the only way to signiﬁ-
cantly improve the performance of e-coins and veriﬁable
encryption would be to develop more efﬁcient techniques
for range proofs (which has in fact been the subject of
some recent cryptographic research [49, 19, 68]).
In terms of proof size, range proofs are much larger
than proofs for discrete logarithms or multiplication.
This is to be expected, as translating a range proof into
discrete logarithm form (as described in Section 4.2) re-
quires eleven equations, whereas a single DLR proof re-
quires only one, and a multiplication proof requires two.
6
Implementation of Cashlib
Using the primitives described in the previous section,
we wrote a cryptographic library designed for optimistic
fair exchange protocols. Fair exchange [32] involves a
situation in which a buyer wants to make sure that she
doesn’t pay a merchant unless she gets what she is buy-
ing, while the merchant doesn’t want to give away his
goods unless he is guaranteed to be paid.
It is known
that fair exchange cannot be done without a trusted third
party [63], but optimistic fair exchange [3, 4] describes
the cases in which the trusted third party has to get in-
volved only in the case of a dispute.
The library was written in C++ and consists of approx-
imately 11000 lines of code in addition to the interpreter.
A previous version of the library in which all the pro-
tocols and proofs were hand-coded (i.e., the interpreter
was not used) consisted of approximately 20000 lines
of code, meaning that the use of roughly 400 lines of
ZKPDL was able to replace 9000 lines of our original
C++ code (and, as we will see, make our operations more
efﬁcient as well).
6.1 Endorsed e-cash
A description of endorsed e-cash can be found in Sec-
tion 5.3; the version used in our library, however, con-
tains a number of optimizations. Just as with real cash,
we now allow for different coin denominations. Each
coin denomination corresponds to a different bank pub-
lic key, so once the user requests a certain denomination,
the wallet is then signed using the corresponding public
key. A coin generated from such a wallet will verify only
when the same public key of the bank is used, and thus
the merchant can check for himself the denomination of
Program type
DLR proof
Multiplication proof
Range proof
CL recipient proof
CL issuer proof
CL possession proof
Veriﬁable encryption
Coin
Prover (ms)
Veriﬁer (ms)
With cache Without With cache Without
1.25
2.32
31.54
112.13
1.73
117.67
162.77
121.83
3.07
2.03
36.36
119.92
7.29
125.89
416.09
134.37
3.08
4.07
74.52
248.31
7.38
253.17
617.61
271.34
1.26
1.66
21.63
70.76
1.73
78.19
121.87
83.01
Proof size
(bytes)
Cache size
(Mbytes)
511
848
5455
19189
1097
19979
24501
22526
0
33.5
33.5
134.2
0
134.2
190.2
223.7
Multi-exps
Prover
2
8
31
104
2
109
113
122
Veriﬁer
1
2
11
39
1
40
42
45
Table 1: Time (in milliseconds) and size (in bytes) required for each of our proofs, averaged over twenty runs. Timings are
considered from both the prover and veriﬁer sides, as are the number of multi-exponentiations, and are considered both with and
without caching for ﬁxed-based exponentiations; the size of the cache is also measured (in megabytes). As we can see, using
caching results on average in a 48% speed improvement for the prover, and a 31% improvement for the veriﬁer.
the coin.
The program in Section 5.3 also reﬂects our decision
to randomize the user’s spending order rather than hav-
ing them perform a range proof that the coin index was
contained within the proper range. As the random spend-
ing order does not reveal how many coins are left in the
wallet, the user’s privacy is still protected even though
the index is publicly available. Furthermore, because
range proofs are slow and require a fair amount of space
(see Table 1 for a reminder), this optimization resulted in
coins that were 20% smaller and 21% faster to generate
and verify.
Finally, endorsed e-cash requires a random value con-
tributed by both the merchant and the user. Since e-coin
transactions should be done over a secure channel, in
practice we expect that SSL connections will be used be-
tween the user and the merchant. One useful feature of
an SSL connection is that it already provides both parties
with shared randomness, and thus this randomness can
be used in our library to eliminate the need for a redun-
dant message.
6.2 Buying and Bartering
Our library implements two efﬁcient optimistic fair
exchange protocols for use with e-cash. Belenkiy et
al. [10] provide a buy protocol for exchanging a coin
with a ﬁle, while Küpçü and Lysyanksaya [52] provide
a barter protocol for exchanging two ﬁles or blocks. The
two protocols serve different purposes (buy vs. barter)
and so we have implemented both.
Two of the main usage scenarios of fair exchange pro-
tocols are e-commerce and peer-to-peer ﬁle sharing [10].
In e-commerce, one needs to employ a buy protocol to
ensure that both the user and the merchant are protected;
the user receives her item while the merchant receives
his payment. In a peer-to-peer ﬁle sharing scenario, peers
exchange ﬁles or blocks of ﬁles. In this setting, it is more
beneﬁcial to barter for the blocks than to buy them one at
a time; for an exchange of n blocks, buying all the blocks
requires O(n) veriﬁable escrow operations (which, as
discussed in Section 5.4, are quite costly), whereas bar-
tering for the blocks requires only one such operation,
regardless of the number of blocks exchanged.
Although the solution might seem to be to barter all
the time and never buy, Belenkiy et al. suggest that both
protocols are useful in a peer-to-peer ﬁle sharing sce-
nario. Peers who have nothing to offer but would still like
to download can offer to buy the ﬁles, while peers who
would like only to upload and have no interest in down-
loading can act as the merchant and earn e-cash. Due to
the resource considerations mentioned above, however,
bartering should always be used if possible.
Because peers do not always know beforehand if they
want to buy or barter for a ﬁle, we have modiﬁed the buy
protocol to match up with the barter protocol in the ﬁrst
two messages. This modiﬁcation, as well as outlines of
both the protocols, can be seen in Figure 3. We further
modiﬁed both protocols to let them exchange multiple
blocks at once, so that one block of the fair exchange
protocol might correspond to multiple blocks of the un-
derlying ﬁle.
We give an overview of each protocol below, with the
optimizations we have added. We have also implemented
the trusted third parties (the bank and the arbiter) neces-
sary for e-cash and fair exchange. Although we do not
describe in detail the resolution and bank interaction pro-
tocols, these can be found in the original papers [10, 52]
and we provide performance benchmarks for the bank in
Table 2.
6.2.1 Buying
The modiﬁed buy protocol is depicted on the left in
Figure 3, although we also allow for the users to partici-
pate in the original buy protocol (in which the messages
appear in a slightly different order). To initiate the mod-
iﬁed buy protocol, the buyer sends a “setup” message,
which consists of an unendorsed coin and a veriﬁable es-
crow on its corresponding endorsement. Upon receiving
but also contains hash information for her ﬁle. The re-
sponder will then check this contract as the seller did in
the buy protocol, and if satisﬁed with the agreement will
send back his decryption key. If the ciphertext decrypts
correctly (i.e., decrypts to the ﬁle described in the con-
tract) then the initiator can respond in turn with her own
decryption key. If this decryption key is also valid, both
parties have successfully obtained the desired ﬁles and
the barter protocol can be considered complete. If nei-
ther party had to contact the arbiter (for similar reasons
as in the buy protocol; i.e., a ﬁle did not decrypt cor-
rectly) then they are free to engage in future barter proto-
cols without the overhead of an additional setup message.
Otherwise, they need to resolve with the arbiter [52].
6.3 Library performance
In Table 2, we can see the computation time and size
complexity for the steps described above, as well as com-
putation and communication overhead for the withdraw
and deposit protocols involving the bank. The numbers
in the table were computed on the same computer as
those in Section 5.4.
The numbers in Table 2 clearly demonstrate our earlier
observation that bartering is considerably more efﬁcient
than buying, both in terms of computation and commu-
nication overhead. The setup message for both buying
and bartering takes about 600ms to generate and approx-
imately 46kB of space. In contrast, the rest of the barter
protocol takes very little time; on the order of millisec-
onds for both parties (and about 1.5kB of total overhead).
In addition, we consider the same protocols run us-
ing a previous “naïve” version of our library, which pro-
vided the same e-cash API and employed some multi-
exponentation optimizations, but did not use ZKPDL.
Using the optimizations available to the interpreter is
considerably faster over our previous approach, mean-
ing that our interpreter has not only made developing our
protocols more convenient, but has also helped to im-
prove efﬁciency.
7 Related work
Similar to our approach, FairPlayMP [14] (and its pre-
decessor, FairPlay [58]) provides a language-based sys-
tem for secure multi-party computation, allowing multi-
ple parties to jointly compute a function on private inputs
while revealing nothing but the resulting value. At the
heart of FairPlayMP is a programming language, SFDL
2.0 (short for Secure Function Deﬁnition Language), that
allows programmers to specify a multi-party computa-
tion. The authors provide a compiler that transforms
SFDL programs into boolean circuits, and an engine that
securely evaluates these circuits and distributes the re-
sulting values among the involved parties. Although this
Figure 3: This ﬁgure provides outlines of both our buy and
barter protocols [10, 52]. Until the decision to buy or barter,
the two protocols are identical; the main difference is that in
a buy protocol, the setup message must be sent for each ﬁle
exchange, which results in a linear efﬁciency loss as compared
to bartering.
this message, the seller will use the programs in Section 5
to check the validity of the coin and the escrow. If these
proofs verify, the seller will proceed by sending back an
encrypted version of his ﬁle (or ﬁle block). Upon receiv-
ing this ciphertext, the buyer will store it (and a Merkle
hash of it, for use with the arbiter in case the protocol
goes wrong later on) and send back a contract, which
consists of a hash of the seller’s ﬁle and some session
information. The seller will check this contract and, if
satisﬁed with the details of the agreement, send back its
decryption key. The buyer can then use this key to de-
crypt the ciphertext it received in the second message of
the protocol. If the decryption is successful, the buyer
will send back his endorsement on the coin. If in these
last steps either party is unsatisﬁed (for example, the ﬁle
does not decrypt or the endorsement isn’t valid for the
coin from the setup message), they can proceed to con-
tact the arbiter and run resolution protocols [10].
6.2.2 Bartering
This protocol is depicted on the right in Figure 3; be-
cause the ﬁrst two messages of the barter protocol (the
setup message and the encrypted data) are identical to
those in the buy protocol described in the previous sec-
tion, we do not describe them again here and instead
jump directly to the third message. Because bartering
involves an exchange of data, the initiator will respond
to the receipt of the ciphertext with a ciphertext of her
own, corresponding to an encryption of her ﬁle. She will
also send a contract, which is similar to the buy contract
Operation
Withdraw (user)
Withdraw (bank)
Deposit (bank)
Buying a block (buyer)
Buying a block (seller)
Barter setup message
Checking setup message
Barter after setup (initiator)
Barter after setup (responder)
Time (ms)
126.35
83.36
82.11
628.49
211.89
608.29
210.61
18.02
1.11
“Naïve” time (ms)
290.79
140.02
128.36
901.04
275.94