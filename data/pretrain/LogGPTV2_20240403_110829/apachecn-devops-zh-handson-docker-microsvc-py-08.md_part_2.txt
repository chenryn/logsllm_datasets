namespace/flux unchanged
```
使用以下代码，您可以检查一切是否按预期运行:
```
$ kubectl get pods -n flux
NAME                       READY STATUS  RESTARTS AGE
flux-75fff6bbf7-bfnq6      1/1   Running 0        34s
memcached-84f9f4d566-jv6gp 1/1   Running 0        34s
```
但是，为了能够从 Git 回购进行部署，我们需要对其进行配置。
# 配置 GitHub
虽然我们可以配置任何 Git 回购，但通常我们会使用 GitHub 来设置它。我们需要设置一个有效的密钥来访问 Git 回购。
最简单的方法是允许 Flux 生成自己的密钥，并将其添加到 GitHub repo 中。但是要做到这一点，我们需要创建自己的 GitHub repo。
# 分流 GitHub 回购
配置回购的第一步是将其分叉。让我们看看以下步骤，了解更多详细信息:
1.  转到 GitHub repo 的代码页面([https://GitHub . com/PacktPublishing/hand-On-Docker-for-micro service-with-Python/](https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/))并点击右上角的 in Fork 生成自己的副本。
2.  一旦您有了自己的副本，它将有一个类似以下的网址:
```
https://github.com//Hands-On-Docker-for-Microservices-with-Python/
```
3.  现在，您需要在`--git-url`参数的`Chapter08/flux/flux-deployment.yaml`文件中替换它。
4.  更改后，使用以下命令重新应用通量配置:
```
$ kubectl apply -f flux/flux-deployment.yaml
deployment.apps/flux changed
```
现在，Flux 正在您的完全控制下跟踪您自己的回购，您可以对其进行更改。首先，我们需要允许 Flux 访问 GitHub repo，这可以通过部署密钥来实现。
# 添加部署密钥
为了允许 Flux 访问 GitHub，我们需要添加它的密钥作为有效的部署密钥。使用`fluxctl`，很容易得到当前的`ssh`键；只需运行以下命令:
```
$ fluxctl identity --k8s-fwd-ns flux
ssh-rsa 
```
有了这些信息，转到分叉 GitHub 项目的设置|部署密钥部分。用描述性名称填充标题，用之前获得的密钥填充密钥部分，然后选择添加密钥:
![](img/a8ab5d41-bfa3-4964-83e9-88a473e2f7b5.png)
请确保选中“允许写访问”复选框。现在，Flux 将能够联系 GitHub。
下一步是同步 GitHub 和集群上的状态。
# 同步流量
我们可以与 Flux 同步，因此 GitHub 中的描述将应用于集群，使用以下命令:
```
$ fluxctl sync --k8s-fwd-ns flux
Synchronizing with PI:EMAIL:.git
Revision of master to apply is daf1b12
Waiting for daf1b12 to be applied ...
Done.
Macbook Pro:Chapter08 $ kubectl get pods -n example
NAME                   READY STATUS  RESTARTS AGE
frontend-8srpc         1/1   Running 0        24s
frontend-cfrvk         1/1   Running 0        24s
frontend-kk4hj         1/1   Running 0        24s
frontend-vq4vf         1/1   Running 0        24s
thoughts-backend-zz8jw 2/2   Running 0        24s
users-backend-jrvcr    2/2   Running 0        24s
```
同步需要一点时间，您可能会收到一条错误消息，指出它正在克隆 repo:
```
$ fluxctl sync --k8s-fwd-ns flux
Error: git repository PI:EMAIL:.git is not ready to sync (status: cloned)
Run 'fluxctl sync --help' for usage
```
请等待几分钟，然后重试:
```
$ fluxctl sync --k8s-fwd-ns flux
Synchronizing with PI:EMAIL:.git
Revision of master to apply is daf1b12
Waiting for daf1b12 to be applied ...
Done.
$
```
您的 Flux 部署以及本地 Kubernetes 集群现在与 Git 中的配置同步，并且会随着任何更改而更新。
# 通过 GitHub 改变 Kubernetes 集群
您的本地 Kubernetes 集群将通过 Flux 进行更新，以反映 Git 回购的变化。Git 中的任何更改将在几分钟后传播到集群。
让我们通过一个更新前端部署中吊舱数量的测试来看看这一点:
1.  在分叉报告中更改`Chapter08/example/frontend/deployment.yaml`文件，如下所述:
```
---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: frontend
    labels:
        app: frontend
    namespace: example
spec:
    replicas: 2
```
这将副本数量从`4`更改为`2`。
2.  将变更提交到`master`分支，并推入 GitHub 回购。
3.  使用以下命令监控集群:
```
$ kubectl get pods -n example -w
```
几分钟后，您将看到前端吊舱的数量将如何减少。您可以通过手动同步通量来加快速度。
4.  恢复更改，看看如何添加它们。
Flux won't delete elements to avoid problems. This means that removing a file of a deployment or service won't eliminate it from the repo. To do so, you need to remove it manually.
You can disable pods controlled by a deployment by setting the number of replicas to zero.
恭喜你！你现在有一个由 GitHub 回购控制的集群。
让我们看看如何在生产环境中有效使用这种方法的一些想法。
# 在生产中工作
GitOps 主要是针对生产环境的工作，它比我们在本章中使用的示例本地集群更大、更复杂。在本节中，我们将描述如何利用 Git 的优势来提高部署和更改方面的清晰度，以及如何确保我们在源代码控制下构建不同的文件以避免混淆。
# 创建结构
构建 YAML 文件对于大规模部署至关重要。从技术上来说，您可以将所有内容合并到一个文件中，但是当它增长时，这并不是处理它的最佳方式。Kubernetes 允许很大的灵活性，所以试着找到一个适合你的结构。
一个简单的方法是按名称空间创建子目录，然后按微服务创建子目录。这就是我们在这个例子中构建它的方式。这种结构将相关的元素保持在一起，并为任何接触微服务的人提供了一条清晰的路径。如果部署只影响一个微服务(正如我们在*并行部署和开发速度*一节的[第 1 章](01.html)、*移动-设计、计划和执行*中所讨论的那样)，这将使更改保持在同一个子目录中。
但不要觉得局限于这种结构。如果对你有意义，你可以尝试不同的东西；例如，按元素进行划分，即一个目录下的所有部署，另一个目录下的所有服务，等等。不要害怕尝试和移动元素，为你的项目寻找最好的结构。
所有这些文件都在 GitHub 中的源代码控制之下，这使得我们可以利用它们的特性为自己谋利。
# 使用 GitHub 功能
考虑到任何对主分支的合并都将触发集群中的变化，在投入使用之前应该对其进行审查。
您可以通过要求在合并之前需要批准的请求来实现。批准可以来自专门跟踪集群的运营团队，也可以来自微服务的所有者；例如，团队领导或经理。
You can enforce code owners natively in GitHub. This means that a change in a particular file or directory requires some user or team to approve it. Check the GitHub documentation for more info ([https://help.github.com/en/articles/about-code-owners](https://help.github.com/en/articles/about-code-owners)).
单个 GitHub repo 还可以跟踪多个环境，例如，运行测试的暂存环境和可供客户使用的生产环境。您可以通过分支或子目录来划分它们。
但是 GitHub 特性并不是唯一可用的，常规的 Git 标签非常通用，允许我们定义特定的容器来部署。
# 使用标签
在这个例子中，我们使用了映像的`latest`标签。这将使用最近构建的容器，每次构建映像时，该容器都会发生变化。对于生产，我们应该使用链接到不可变容器的特定标签，正如我们在[第 3 章](03.html)、*使用 Docker* 构建、运行和测试您的服务、在*使用远程注册表*部分、在[第 4 章](04.html)、*创建管道和工作流*中、在*从 Travis CI* 推送 Docker 映像部分所讨论的那样。
这意味着替换以下行:
```
spec:
  containers:
  - name: frontend-service
    image: thoughts_frontend:latest
```
我们用以下内容替换它们:
```
spec:
  containers:
  - name: frontend-service
    image: /thoughts_frontend:v1.5
```
这就是能够以可控方式更新映像的好处。您将使用管道(如[第 4 章](04.html)、*创建管道和工作流*中所述)来构建标记的映像并将其推送到远程注册表，然后您可以控制集群中部署哪个特定版本。
In some cases, it may be needed to stop the syncing. Flux works with the concept of workloads, which are updateable elements, in the same way as deployments.
You can stop the automatic updating of them or control how they are updated. Refer to the documentation for more information: [https://github.com/fluxcd/flux/blob/master/docs/using/fluxctl.md#workloads](https://github.com/fluxcd/flux/blob/master/docs/using/fluxctl.md#workloads).
让这个版本在 Git 的控制下，开发人员可以很容易地恢复到以前的版本。
To follow the continuous integration principles, try to make small changes and apply them quickly. Git will help you revert a bad change, but small incremental changes are easy to test and reduce the risk of breaking the system.
大多数操作都是简单的更改，要么更改要部署的映像版本，要么调整参数，如副本数量或环境变量。
# 摘要
本章首先回顾了最常见的不同类型的配置管理策略，以及它们在项目发展过程中的应用。我们讨论了 DevOps 方法如何让团队掌控他们的部署，并帮助填补开发和运营之间的传统空白。
我们看到了名为 GitOps 的最新方法如何在 Kubernetes 集群中很好地工作，因为配置被紧密地描述为一组文件。我们讨论了使用 Git 跟踪配置的优势。
我们引入了 Flux，这是一个部署在集群内部并从 Git repo 分支提取变更的工具。我们展示了一个示例配置，将其部署在我们本地的 Kubernetes 集群中，并配置 GitHub 以便能够使用它。这使得对 GitHub 中我们的 Git 分支的任何推送都能够反映在本地集群中。
我们用一些生产工作的策略结束了这一章。我们研究了如何利用 GitHub 特性来确保 Kubernetes YAML 文件的结构是正确的，我们还学习了如何发布和回滚标记的映像。
在下一章中，我们将描述集群整个开发周期的过程，从引入新特性到在生产环境中部署。我们将描述在实时系统中工作时的一些有用的策略，以便部署的代码能够顺利工作并具有高质量。
# 问题
1.  使用脚本将新代码推送到服务器和使用配置管理工具(如 Puppet)有什么区别？
2.  DevOps 背后的核心思想是什么？
3.  使用 GitOps 有什么好处？
4.  GitOps 只能在 Kubernetes 集群中使用吗？
5.  通量部署位于哪里？
6.  为了允许 Flux 访问它，您需要在 GitHub 中配置什么？
7.  对于在生产环境中工作，GitHub 提供了哪些功能来帮助确保对部署的控制？
# 进一步阅读
您可以在以下书籍中了解更多关于 DevOps 的实践和想法:*实用 devo PS–第二版*([https://www . packtpub . com/virtual-and-cloud/Practical-devo PS–第二版](https://www.packtpub.com/virtualization-and-cloud/practical-devops-second-edition))和*devo PS Paradox*([https://www.packtpub.com/web-development/devops-paradox](https://www.packtpub.com/web-development/devops-paradox))。