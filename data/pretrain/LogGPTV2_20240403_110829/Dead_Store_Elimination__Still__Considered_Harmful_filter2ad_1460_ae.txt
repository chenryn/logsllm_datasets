cluded in a C/C++ source ﬁle. The developer can spec-
ify an order of preference in which an implementa-
tion will be chosen by deﬁning macros before including
secure_memzero.h. If the developer does not express
a preference, we choose the ﬁrst available implementa-
tion in the order given above: platform-provided function
if available, then memory barrier on GCC and Clang,
then then volatile data pointer technique. Our defaults
reﬂect what we believe are the best memory scrubbing
approaches available today.
We have released our implementation into the pub-
lic domain, allowing developers to use our function re-
gardless of their own project license. We plan to keep
our implementation updated to ensure it remains ef-
fective as compilers evolve. The current version of
secure_memzero.h is available at
https://compsec.sysnet.ucsd.edu/secure_memzero.h.
7 Scrubbing-Safe DSE
While we have tested our secure_memzero function
with GCC, Clang, and Microsoft Visual C, by its very na-
ture it cannot guarantee that a standard-conforming com-
piler will not remove our scrubbing operation. To address
these cases, we implemented a scrubbing-safe dead store
elimination option in Clang 3.9.0.
7.1
Our implementation works by identifying all stores that
may be explicit scrubbing operations and preventing the
dead store elimination pass from eliminating them. We
consider a store, either a store IR instruction, or a call
to LLVM’s memset intrinsic, to be a potential scrubbing
operation if
Inhibiting Scrubbing DSE
O The stored value is a constant,
O The number of bytes stored is a constant, and
O The store is subject to elimination because the
variable is going be out of scope without being
read.
The ﬁrst two conditions are based on our observation
how scrubbing operations are performed in the real code.
The third allows a store that is overwritten by a later one
to the same location before being read to be eliminated,
which improves the performance. We note that our tech-
niques preserves all dead stores satisfying the conditions
above, regardless of whether the variables are considered
sensitive or not. This may introduce false positives, dead
USENIX Association
26th USENIX Security Symposium    1037
the 403.gcc benchmark, the difference was within 5%
of base.
8 Discussion
It is clear that, while the C standard tries to help by deﬁn-
ing memset_s, in practice the C standard does not help.
In particular, memset_s is deﬁned in the optional Annex
K, which is rarely implemented. Developers are then left
on their own to implement versions of secure memset,
and the most direct solution uses the volatile quantiﬁer.
But here again, the C standard does not help, because
the corner cases of the C standard actually give the im-
plementation a surprising amount of leeway in deﬁning
what constitutes a volatile access. As a result, any im-
plementation of a secure memset based on the volatile
qualiﬁer is not guaranteed to work with every standard-
compliant compiler.
Second, it’s very tricky in practice to make sure that
a secure scrubbing function works well. Because an in-
correct implementation does not break any functionality,
it cannot be caught by automatic regression tests. The
only reliable way to test whether an implentation is cor-
rect or not is to manually check the generated binary,
which can be time-consuming. What’s worse, a seem-
ingly working solution may turn out to be insecure under
a different combination of platform, compiler and opti-
mization level, which further increases the cost to test
an implementation. In fact, as we showed in Section 5.2,
developers did make mistakes in the implementing of se-
cure scrubbing functions. This is why we implemented
secure_memzero and tested it on Ubuntu, OpenBSD
and Windows with GCC and Clang. We released it into
the public domain so that developers can use it freely and
collaborate to adapt it to future changes to the C standard,
platforms or compilers.
Third, even if a well-implemented secure scrubbing
function is available, developers may forget to use it,
instead using the standard memset which is removed
by the compiler. For example, we found this hap-
pened in Crypto++ (Section 5.9). This observation makes
compiler-based solutions, for example the secure DSE,
more attractive because they do not depend on develop-
ers correctly calling the right scrubbing function.
stores to non-sensitive variables in memory that are pre-
served because they were considered potential scrubbing
operations by our current implementation. We discuss
the performance impact of our approach in Section 7.2.
It is worth considering an alternative approach to en-
suring that sensitive data is scrubbed: The developer
could explicitly annotate certain variables as secret, and
have the compiler ensure that these variables are zeroed
before going out of scope. This would automatically pro-
tect sensitive variables without requiring the developer
to zero them explicitly. It would also eliminate poten-
tial false positives introduced by our approach, because
only sensitive data would be scrubbed. Finally, it could
also ensure that spilled registers containing sensitive data
are zeroed, something our scrubbing-safe DSE approach
does not do (see Section 8 for a discussion of this issue).
We chose our approach because it does not require any
changes to the source code. Since developers are already
aware of the need to clear memory, we rely on scrubbing
operations already present in the code and simply ensure
that they are not removed during optimization. Thus, our
current approach is compatible with legacy code and can
protect even projects that do not use a secure scrubbing
function, provided the sensitive data is zeroed after use.
7.2 Performance
Dead store elimination is a compiler optimization in-
tended to reduce code size and improve performance. By
preserving certain dead stores, we are potentially pre-
venting a useful optimization from improving the qual-
ity emitted code and improving performance. To de-
termine whether or not this the case, we evaluated the
performance of our code using the SPEC 2006 bench-
mark. We compiled and ran the SPEC 2006 bench-
mark under four compiler conﬁgurations: -O2 only, -O2
and -fno-builtin-memset, -O2 with DSE disabled,
and -O2 with our scrubbing-safe DSE. In each case,
we used Clang 3.9.0, modiﬁed to allow us to disable
DSE completely or to selectively disable DSE as de-
scribed above. Note that -fno-builtin-memset is not
a reliable means of protecting scrubbing operations, as
discussed in Section 3.2. The benchmark was run on
a Ubuntu 16.04.1 server with an Intel Xeon Processor
X3210 and 4GB memory.
Our results indicate that
the performance of our
scrubbing-safe DSE option is within 1% of the base case
(-O2 only). This difference is well within the variation
of the benchmark; re-running the same tests yielded dif-
ferences of the same order. Disabling DSE completely
also did not affect performance by more than 1% over
base in all but one case (483.xalancbmk) where it was
within 2%. Finally, with the exception of the 403.gcc
benchmark, disabling built-in memset function also does
not have a signiﬁcant adverse effect on performance. For
Finally, it’s important to note that sensitive data may
still remain in on the stack even after its primary storage
location when it is passed as argument or spilled (in reg-
isters) onto the stack. Addressing this type of data leak
requires more extensive support from the compiler.
9 Conclusion
Developers have known that compiler optimizations may
remove scrubbing operations for some time. To combat
this problem, many implementations of secure memset
have been created. In this paper, we surveyed the ex-
1038    26th USENIX Security Symposium
USENIX Association
isting solutions, analyzing the assumptions, advantages
and disadvantages of them. Also, our case studies have
shown that real world programs still have unscrubbed
sensitive data, due to incorrect implementation of se-
cure scrubbing function as well as from developers sim-
ply forgetting to use the secure scrubbing function. To
solve the problem, we implemented the secure DSE, a
compiler-based solution that keeps scrubbing operations
while remove dead stores that have no security impli-
cations, and secure_memzero, a C implementation that
have been tested on various platforms and with different
compilers.
Acknowledgments
This work was funded in part by the National Sci-
ence Foundation through grants NSF-1646493, NSF-
1228967, and NSF-1237264.
References
[1] 6.45.2 Extended Asm - Assembler Instructions with
C Expression Operands. https://gcc.gnu.org/
onlinedocs/gcc/Extended-Asm.html.
faster memwipe
imple-
- Tor Bug Tracker & Wiki.
mentation)
https://trac.torproject.org/projects/
tor/ticket/7419.
[2] #7419
(Choose
a
[3] 8537 – Optimizer Removes Code Necessary for
https://gcc.gnu.org/bugzilla/
Security.
show_bug.cgi?id=8537.
[4] A glance at compiler internals: Keep my memset.
http://blog.quarkslab.com/a-glance-at-
compiler-internals-keep-my-memset.html.
https://
[5] Bitcoin: Open source P2P money.
bitcoin.org/.
[6] Bug 15495 - dead store pass ignores memory clob-
bering asm statement. https://bugs.llvm.org/
show_bug.cgi?id=15495.
[7] Changeset 009521a.
https://community.
openvpn.net/openvpn/changeset/
009521ac8ae613084b23b9e3e5dc4ebeccd4c6c8/.
[8] Crypto++ library.
https://www.cryptopp.
com/.
[9] Cryptographic coding standard - coding rules.
https://cryptocoding.net/index.php/
Coding_rules#Clean_memory_of_secret_
data.
[10] CVE-2016-0777.
https://cve.mitre.org/cgi-
bin/cvename.cgi?name=CVE-2016-0777.
[11] GCC Bugzilla - Bug 26587. https://gcc.gnu.
org/bugzilla/show_bug.cgi?id=26587.
[12] Kerberos - The Network Authentication Protocol.
https://web.mit.edu/kerberos/.
[13] Libgcrypt. https://www.gnu.org/software/
libgcrypt/.
library.
libsodium.
org/.
[14] Libressl. https://www.libressl.org/.
[15] libsodium - A modern and easy-to-use crypto
https://github.com/jedisct1/
[16] The linux kernel archives. https://www.kernel.
[17] musl libc. https://www.musl-libc.org/.
[18] Network
Services
Security
- Mozilla.
https://developer.mozilla.org/en-
US/docs/Mozilla/Projects/NSS.
[19] OpenSSH. http://www.openssh.com/.
[20] OpenSSL: Cryptography and SSL/TLS Toolkit.
https://www.openssl.org/.
[21] OpenVPN - Open Source VPN.
https://
openvpn.net/.
[22] Reimplement
non-asm OPENSSL_cleanse().
https://github.com/openssl/openssl/
pull/455.
[23] Sudo. https://www.sudo.ws/.
[24] Tarsnap - Online backups for the truly paranoid.
http://www.tarsnap.com/.
[25] Tor Project: Anonymity Online. https://www.
torproject.org.
[26] When erasing secrets, use a memset() that’s not op-
timized away. https://community.openvpn.
net/openvpn/ticket/751.
[27] WolfSSL - Embedded SSL Library for Applica-
tions, Devices, IoT, and the Cloud. https://www.
wolfssl.com.
[28] N. Benton. Simple relational correctness proofs
for static analyses and program transformations. In
ACM SIGPLAN Notices, volume 39, pages 14–25,
2004.
[29] C. Deng and K. S. Namjoshi. Securing a com-
In Proceedings of the 23rd
piler transformation.
Static Analysis Symposium, SAS ’16, pages 170–
188, 2016.
[30] V. D’Silva, M. Payer, and D. Song.
The
correctness-security gap in compiler optimization.
In Security and Privacy Workshops, SPW ’15,
pages 73–87, 2015.
[31] X. Leroy. Formal certiﬁcation of a compiler back-
end or: programming a compiler with a proof assis-
tant. In ACM SIGPLAN Notices, volume 41, pages
42–54, 2006.
[32] K. Lu, C. Song, T. Kim, and W. Lee. Unisan: Proac-
tive kernel memory initialization to eliminate data
leakages. In Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Se-
curity, CCS ’16, pages 920–932, New York, NY,
2016.
[33] C. O’Donell and M. Sebor. Updated Field Ex-
perience With Annex K — Bounds Checking
Interfaces. http://www.open-std.org/jtc1/
USENIX Association
26th USENIX Security Symposium    1039
sc22/wg14/www/docs/n1969.htm, Sept. 2015.
[34] G. Paoloni. How to benchmark code execution
times on intel ia-32 and ia-64 instruction set archi-
tectures. Intel Corporation, 2010.
[35] C. Percival.
Erratum.
http://www.
daemonology.net/blog/2014-09-05-
erratum.html.
[36] C. Percival.
How to
zero
a
buffer.
http://www.daemonology.net/blog/2014-
09-04-how-to-zero-a-buffer.html.
[37] R. Seacord. The CERT C Secure Coding Standard.
Addison Wesley, 2009.
[38] X. Wang, N. Zeldovich, M. F. Kaashoek, and
A. Solar-Lezama. Towards optimization-safe sys-
tems: Analyzing the impact of undeﬁned behavior.
In Proceedings of the Twenty-Fourth ACM Sympo-
sium on Operating Systems Principles, SOSP ’13,
pages 260–275, New York, NY, 2013.
[39] D. Wheeler. Specially protect secrets (passwords
https://www.
and keys)
dwheeler.com/secure-programs/Secure-
Programs-HOWTO/protect-secrets.html.
in user memory.
Instrumenting Clang to Report DSE
A Appendix
A.1
To investigate how common it is for scrubbing operations
to be removed by the compiler in open source projects,
we developed a tool called Scrubbing Finder. Our case
studies in Section 5 were performed with this tool.
Since scrubbing operations are removed in a com-
piler’s dead store elimination optimization pass, we in-
strumented the DSE pass in LLVM/Clang 3.9.0 to re-
port these instances. In order to differentiate removed
scrubs from other dead stores, it is necessary to differ-
entiate the different kinds of dead stores: (1) a store
that is overwritten by another store with no read in be-
tween; (2) a store to an object that is about to be out
of scope (a dead store to a stack object); (3) a store
to an object that is about to be freed (a dead store
to a heap object). There is no need to report the ﬁrst
case because even though the earlier store is indeed a
scrubbing operation, it is safe to remove it. In addi-
tion, we noticed that all but one secure scrubbing im-
plementation store a constant value to the buffer (typi-
cally zero). The only exception is the complicated com-
putation technique of OpenSSL’s OPENSSL_cleanse
(see Section 3.4.1), which stores non-constants values—
however, those stores are not dead stores. Thus the scrub-
bing ﬁnder only reports dead stores of (2) and (3) where
a constant is stored.
Thus, when dead store belonging to one of the two
categories described above is removed, Scrubbing Finder
reports: (1) the Location of the removed scrub, including
ﬁle and line number; (2) the Removed IR Instruction; and
(3) Additional Info describing any instances where the
removed scrub was inlined. Figure 9 is an example we
found in Kerberos, which has since been ﬁxed.
(i8* nonnull %call.i9.i, i8 0, i64 %conv.i8.i,
i32 1, i1 false)
1 Location: src/lib/gssapi/krb5/lucid_context.c:269:13
2 Removed IR Instruction: call void @llvm.memset.p0i8.i64
3
4
5 Additional Info:
6
7
8
9
src/lib/gssapi/krb5/lucid_context.c:269:13 inlined at
[src/lib/gssapi/krb5/lucid_context.c:285:13 inlined at
[src/lib/gssapi/krb5/lucid_context.c:233:9 inlined at
[src/lib/gssapi/krb5/lucid_context.c:94:16 ] ] ]
Figure 9: Example of a removed scrub in Kerberos re-
ported by Scrubbing Finder.
of
13
In this example, the removed scrub is on line 269,
column
krb5-1.14.4/src/lib/gssapi/
the enclos-
krb5/lucid_context.c. Furthermore,
the removed operation is inlined
ing function of
at
krb5-1.14.4/src/lib/gssapi/krb5/lucid_
context.c:285:13. The function containing line 285
of lucid_context.c is inlined at krb5-1.14.4/src/
lib/gssapi/krb5/lucid_context.c:233:9.
The
function containing line 233 of lucid_context.c is
inlined
krb5-1.14.4/src/lib/gssapi/krb5/
lucid_context.c:94:16.
at
1040    26th USENIX Security Symposium
USENIX Association