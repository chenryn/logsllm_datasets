# The Join Problem in Dynamic Network Algorithms

**Authors:**
- Kishori M. Konwar<sup>1</sup>
- Dariusz R. Kowalski<sup>2,3</sup>
- Alexander A. Shvartsman<sup>1,4</sup>

**Affiliations:**
1. Department of Computer Science and Engineering, University of Connecticut, Unit 2155, Storrs, CT 06269, USA
2. Max-Planck-Institut für Informatik, Stuhlsatzenhausweg 85, Saarbrücken, 66123, Germany
3. Instytut Informatyki, Uniwersytet Warszawski, Banacha 2, 02-097 Warszawa, Poland
4. MIT Computer Science and Artificial Intelligence Laboratory, The Stata Center, Cambridge, MA 02139, USA

**Abstract:**
Distributed algorithms in dynamic networks often rely on communication patterns to disseminate information among participants. Gossiping is a common form of such communication. In dynamic settings, the set of participants can change significantly as new participants join and others leave due to failures or voluntary departures. A key question in these settings is: how quickly can newly joined nodes discover each other through gossiping? This paper formalizes and investigates the Join Problem for dynamic systems that use all-to-all gossip. The problem is studied using join-connectivity graphs, where vertices represent participants and edges represent one participant's knowledge about another. Ideally, the graph has a diameter of one, meaning all participants know each other. The diameter can increase as new participants join and as failures remove edges from the graph. Gossip helps reduce the diameter by allowing participants to discover each other. The results provide lower and upper bounds on the number of communication rounds required for participants to discover each other under various assumptions about joining and failures.

**Introduction:**
Distributed algorithms in dynamic networks must include mechanisms for new participants to join the computation and discover each other. There are two primary challenges in this process: (a) discovering a system access point to join, and (b) integrating into the computation and acquiring information about it. This work focuses on the latter challenge, assuming the former is already addressed.

In realistic networked systems, the state of a distributed computation is inherently distributed. It may be impossible to have global and precise knowledge of all participants, especially if new participants can join at any time. Therefore, sophisticated distributed algorithms should not depend on global knowledge of participants. However, system performance can benefit from participants knowing about each other. This motivates our study of the Join Problem, which we define as follows:

**Join Problem:**
For any two participants that join a dynamic system, how long does it take for them to discover each other?

We study this problem for distributed systems that use periodic all-to-all gossip to disseminate information. While all-to-all gossip is not bandwidth-efficient, it is fault-tolerant and the fastest form of gossip when bandwidth is not a concern. Understanding the limitations of information propagation in all-to-all gossip also helps in understanding more restricted communication patterns. Our model is based on the join protocol of the reconfigurable atomic memory service for dynamic networks presented by Lynch and Shvartsman [11] and Gilbert et al. [4].

**Summary of Contributions:**
In this paper, we study the Join Problem using an abstract join algorithm called the Join-Protocol (Section 2). We analyze the upper and lower bounds of the Join Problem under various scenarios. Nodes asynchronously join and leave the system, and the knowledge of participants about each other is represented by a dynamically evolving join-connectivity graph. New nodes join by sending requests to existing nodes, and their knowledge is propagated through perpetual gossip with known nodes.

We formally specify the Join-Protocol using Input/Output Automata [12] notation. The protocol is designed for asynchronous environments with arbitrary message delays and node crashes that may cause network partitions. For analysis, we restrict asynchrony, resolve some non-determinism, and impose constraints to ensure the network remains connected.

We focus on timed executions of the protocol, where an initial period of instability is followed by a stable period. We introduce the concept of a timed communication round and define the join-delay as the maximum number of rounds required for any two nodes that have joined to learn about each other. We study the join-delay for cases with and without node failures, and for cases where new participants join at a single node or multiple nodes. Our results are as follows:

1. **Joining at a single node without failures:**
   - \( \text{jd}(s) = \Theta(\log(s.G.\text{diam})) \), where \( s.G.\text{diam} \) is the diameter of the join-connectivity graph.

2. **Joining at multiple nodes without failures:**
   - \( \text{jd}(s) = \Theta(\log(s.G.\text{diam})) \). The analysis is different from the single-node case.

3. **Joining at a single node with failures:**
   - Upper bound: \( \text{jd}(s) = O(\log(|s.J|)) \)
   - Lower bound: \( \text{jd}(s) = \Omega(\log(s.G.\text{diam})) \)

4. **Joining at multiple nodes with failures:**
   - An adversary can force the join-delay to be unbounded even in normal executions. By constraining the adversary, we show an upper bound of \( \text{jd}(s) = O(\log(s.G.\text{diam})) \).

**Relevant Landscape:**
Gossip and broadcast are fundamental communication problems. Broadcasting aims to spread a message from one node to all others, while gossiping involves all nodes exchanging their messages. Key metrics for comparing communication algorithms include time and message complexity. Perpetual gossiping, introduced by Liestman and Richards [9], continuously updates information. Related problems include maintaining consistency in replicated databases and peer-to-peer systems, where rapid membership changes create challenges in information dissemination.

**Document Structure:**
- Section 2: Definition of the join protocol and join-connectivity graphs.
- Section 3: Models and definitions used in the analysis.
- Section 4: Analysis of the protocol.
- Section 5: Summary of contributions.

**The Join Protocol:**
We abstract the join protocol from the reconfigurable atomic memory service of Lynch and Shvartsman [11]. This service, called RAMBO (Reconfigurable Atomic Memory for Basic Objects), implements atomic read/write memory. The objects are replicated at multiple nodes in an asynchronous dynamic network, where new nodes can join and previously joined nodes can leave or fail. The implementation uses Input/Output Automata [12] formalism to ensure correctness and efficiency. A new node joins by contacting any previously joined node, and the knowledge of joined nodes is propagated through all-to-all gossip.

**Description of the Join Protocol:**
Each node \( v \) participating in the join protocol is specified as an I/O automaton called Join-Protocol \( v \). The complete specification includes the signature, state variables, and transitions. Initially, a distinguished node \( c \) (the "creator") constitutes the entire system. When a node \( v \) receives a join request, it sends join requests to a set of processes \( H \) and waits for acknowledgments. The protocol ensures that the node status and hints are managed correctly, and the well-formedness condition is imposed on the environment.

**Data Types:**
- \( P \): Set of node identifiers
- \( c \in P \): Distinguished node (the "creator")

**Signature:**

[Further details and figures would follow here, but they are omitted for brevity.]

---

This optimized version of the text is more structured, clear, and professional, making it easier to understand and follow.