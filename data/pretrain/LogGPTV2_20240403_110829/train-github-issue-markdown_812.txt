So, I was reading the online documentation of MPL on colormaps, and noticed
that there is an error in it.  
In the section of "Creating listed colormaps", it mentions that the dynamic
range of a colormap can be reduced by using:
    viridisBig = cm.get_cmap('viridis', 512)
    newcmp = ListedColormap(viridisBig(np.linspace(0.25, 0.75, 256)))
    plot_examples([viridis, newcmp])
It also specifically mentions that this must be done in order to make sure
that the new colormap does not have repeated values.
However, as `viridis` is a `ListedColormap` and `ListedColormap` objects do
not allow for interpolation between values, both `viridisBig` and `newcmp`
will have repeated values, despite the documentation specifically mentioning
they do not.
This could be fixed by either changing the tutorial into:
    viridisRGB = viridis(np.linspace(0, 1, viridis.N))
    viridisBig = LinearSegmentedColormap.from_list('viridisBig', viridisRGB, 512)
    newcmp = ListedColormap(viridisBig(np.linspace(0.25, 0.75, 256)))
    plot_examples([viridis, newcmp])
as `LinearSegmentedColormap` objects do allow for interpolation when creating
them, or obviously by making `ListedColormap` objects be able to perform
interpolation.
I have however noticed that the interpolation messes up sometimes, especially
at the ends of the colormap.  
It might therefore be better to simply take the required part of the colormap
when reducing the dynamic range, with something like:
    newcmp = ListedColormap(viridis(np.linspace(0.25, 0.75, viridis.N*(0.75-0.25))))
    plot_examples([viridis, newcmp])
This obviously also reduces the resolution of the colormap, so it is not a
good solution, but works well enough on colormaps with 256 segments and a not
too big reduction in dynamic range.