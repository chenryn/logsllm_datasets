### 优化后的文本

#### 图12：网络足迹减少的累积分布函数 (CDF) 在Sprint拓扑上的不同入口处推断自真实流量。

IP地址被映射到ISP拓扑中的最近PoP。我们使用了两个流量跟踪数据：一个捕获了所有离开大学的流量（其中有15%的冗余，编码缓存时间为10秒），另一个捕获了离开/24前缀的流量（40%的冗余）。

首先讨论单入口情况。图12展示了在Sprint拓扑上使用全大学和/24前缀流量跟踪数据时，网络足迹减少的累积分布函数 (CDF)。SmartRE再次表现出比逐跳方法高出4-5倍的性能。在大学流量跟踪中，SmartRE几乎与理想情况无法区分；而在/24流量跟踪中，中位性能差异为0.04。

我们在不同的入口之间观察到了显著的性能差异（未显示）。进一步研究了拓扑中度数最高的四个入口PoP。对于其中两个PoP（西雅图和达拉斯），SmartRE的效果是朴素方法的7-8倍；对于剩下的两个（纽约和芝加哥），则是3-4倍。这里有两个因素：首先，大部分流量目的地是纽约和芝加哥，并且这些流量之间有相当大的重叠；其次，从其他两个PoP到纽约和芝加哥的路径共享了许多中间节点。因此，SmartRE能够更好地利用这种路径间的冗余性。

此外，我们还在4个ISP网络中进行了全网评估。SmartRE分别将/24和全大学流量跟踪数据的全网足迹减少了20%和13%。

### 7.4 陈旧冗余配置文件的影响

如§6所述，SmartRE使用当前周期内观察到的冗余配置文件来计算下一周期的缓存清单。我们评估了使用陈旧冗余配置文件（SmartRE-stale）与使用最新信息的SmartRE-ideal之间的性能差异。

我们研究了不同时间间隔下计算的冗余配置文件与实际使用时间之间的差异。使用§7.3中的实际数据包跟踪进行这项研究。我们评估了10、20、30和40分钟的时间滞后（未显示）。结果表明，SmartRE-stale的表现接近于SmartRE-ideal（因此也接近理想的RE），最差情况下足迹减少最多比SmartRE-ideal差0.05。我们发现，尽管冗余配置文件过时，SmartRE仍然表现良好，因为流向大城市的流量（芝加哥和纽约）占据了主要部分，而这些流量的冗余配置文件相对稳定。虽然这些结果是初步的，但它们是令人鼓舞的——主要的冗余来源似乎很稳定，即使使用陈旧的冗余配置文件，SmartRE也能提供显著的好处。

**突发流量场景**：接下来，我们研究了在更突然的突发流量场景下，陈旧性如何影响RE的性能。首先，我们将特定入口的总流量增加以饱和其上游带宽，同时保持每个入口的冗余率固定为50%。在这种设置下，足迹减少为0.26，使用最新的流量矩阵和冗余配置文件；使用较旧的输入时，减少量为0.23至0.25，具体取决于入口。其次，我们将特定入口的聚合冗余从25%增加到50%，同时保持其他入口的冗余率为25%。根据具有增加冗余的入口的不同，足迹减少为0.14至0.15（使用最新的配置文件）和0.10至0.11（使用旧配置文件）。这些实验进一步证实，虽然最新的配置文件可以带来更好的RE性能，但即使是陈旧的配置文件也能带来显著的好处。然而，对于剧烈变化的情况，应使用触发更新机制（如§6中所述）来更新配置文件。

### 7.5 部分部署的好处

由于编码器和解码器的中间盒式实现，SmartRE适合于增量和部分部署，可以在需要减少网络负载的位置安装编码器/解码器。

我们模拟了一个情景，即ISP希望通过在网络中战略性地部署RE中间盒来减轻某些高流量PoP（例如，按流量排名前五的PoP）产生的冗余流量的影响。（在每个PoP的入口接入链路上部署编码RE盒）。我们探讨了即使在有限规模下，SmartRE是否仍然有用。

我们考察了两种策略。在这两种情况下，我们的目标是在流量汇聚较多的地方部署RE盒。首先统计经过每个内部链路的最短路径数量。第一种策略是简单地在许多从这五个入口到其他出口的网络路径上部署解码器。第二种策略更为智能，它首先根据通过每个链路的路径所携带的流量量及其与相应入口的距离对路径进行加权，并根据通过它们的路径的总权重对链路进行排序。

图13显示，在这两种情况下，即使只在少数链路上部署RE中间盒（例如，少于65条链路中的10条），仍然能带来合理的全网利用率提升（大约10%，相比最佳可能的26%）。更智能的策略在50%-70%的部署范围内效果更好。图13表明，即使在部分部署的情况下，简单的策略也能很好地工作。通过基于历史观测对每条路径的预期冗余量进行加权，这一效果可以进一步增强。

### 7.6 评估总结
- SmartRE平均比朴素的逐跳方法有效4-5倍。
- 即使在严格的内存和内存访问吞吐量资源约束下，SmartRE仍能达到理想无约束RE解决方案的80-90%的性能。
- 上述结果在多个冗余场景中一致。
- SmartRE中的全局资源感知优化对于良好的RE性能是必要的；简单的启发式方法不足以减少网络足迹。
- 即使在部分部署或使用稍微过时的冗余配置文件的情况下，SmartRE也能提供接近理想情况的好处。

### 8. 讨论
**多跳无线网络**：我们认为SmartRE也可以用于增强其他环境中的缓存系统，例如多跳无线网络[16]。协调缓存可以通过以下两种方式帮助：(1) 通过将大传输切分成块并分配给特定节点来提高多跳节点的有效内存使用（这取代了在所有路径路由器上盲目缓存的方法）；(2) 防止多个节点从单一缓存中检索热门块——这可能会造成介质争用，并抵消缓存带来的好处。我们可以限制每个缓存的编码责任，从而在网络中均匀分布缓存/编码任务。

**允许SmartRE中的重叠范围**：在§7.2中看到，允许缓存重叠可能提高RE性能。然而，存在两个实际困难。首先，来自§4.2的公式变得更加复杂。特别是，我们不能再将方程2中的第二项和方程4中的节省项建模为线性表达式；实际上，甚至不清楚是否可以精确地建模这些项。因此，在这种设置下很难获得最优的缓存责任分配。其次，为了与每个解码器保持一致的视图，每个入口必须要么(a)保留属于重叠范围的数据包的副本，要么(b)使用额外的机制来跟踪数据包是否已被从内部节点中驱逐，并维护指纹到存储中数据包的适当映射。此外，入口需要明确决定哪个解码器负责重建在多个下游节点上缓存的匹配数据包的编码区域。由于非重叠范围的SmartRE性能已经非常接近理想情况，因此我们不考虑扩展以允许重叠缓存，因为边际改进不值得增加的实现复杂性。

### 9. 结论
随着互联网流量的增加和更多带宽密集型应用的出现，冗余消除（RE）已成为一种有前途的实际解决方案，以提高端到端应用程序的吞吐量。最近，人们开始关注将RE的应用范围扩展到全网场景，旨在将其作为ISP网络中的基础IP层服务提供。本文使这一愿景更接近现实。我们超越了朴素的逐链路视图，采用了一种全网协调的方法。我们设计并实现了一个名为SmartRE的框架，该框架基于这些高级设计原则。SmartRE自然适合处理异构资源约束和流量模式，并支持增量部署。我们在设计中解决了几个实际问题，以确保在网络动态变化的情况下正确运行。在广泛的评估场景中，SmartRE提供了比朴素解决方案高4-5倍的改进，并达到了理想无约束RE全网替代方案80-90%的性能。

一个自然的扩展是将SmartRE应用于数据中心和多跳无线网络。未来的工作还包括扩大RE的范围，允许多个编码器在同一路径上（而不是仅在入口处编码），并探索RE技术与网络编码之间的相互作用。

### 致谢
感谢Tom Anderson、Flavio Bonomi、Bruce Davie、K. K. Ramakrishnan、Srini Seshan、David Wetherall以及匿名审稿人提供的宝贵反馈，帮助我们改进了论文。本研究得到了NSF CAREER奖（CNS-0746531）和NSF NeTS FIND奖（CNS-0626889）的部分资助。

### 参考文献
[此处列出参考文献]

---

通过这种方式，文本更加清晰、连贯和专业。希望这对你有帮助！