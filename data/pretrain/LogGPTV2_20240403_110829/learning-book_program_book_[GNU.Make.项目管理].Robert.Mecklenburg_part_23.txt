/c/DocumentsandSettings/Owmer/StartMenu/Programs
S cygpath --sysdir
/c/WINDOWS/SYSTEM32
S cygpath --windir
/c/WINDOWS
如果你正在Windows/Unix混合的环境中使用cygpath，你将会在具可移植性的函数中
纳入这些调用：
---
## Page 156
146
第七章
ifdef COMSPEC
cygpath-mixed
（-dau）=
cygpath-unix
（.-yedos）=
drive-letter-to-slash =/S(subst :,,$1)
else
cygpath-mixed
=$1
cygpath-unix
=$1
drive-letter-to-slash = $1
endif
如果你只需要把c：这个磁盘驱动器盘符语法映射至POSIX的形式，drive-letter-to-
slash函数的速度将会比运行cygpath程序还快。
最后，Cygwin无法了解Windows中所有的“怪癖”。在Windows中无效的文件名，在
Cygwin中也属无效。因此，你无法在POSIX路径中使用aux.h、coml和prn之类的文
件名，即使有扩展名也不行。
程序名称相抵触时
有些Windows程序的名称跟Unix程序的一样。当然，此类Windows程序的命令行参数
和行为跟同名的Unix程序是不一样的。如果你意外调用了Windows版的程序，通常会
造成非常混乱的结果。最麻烦的似乎是find、sort、ftp和telnet等程序，当你在
Unix、Windows和Cygwin之间移植此类程序时，若想获得最大的兼容性，则应该对它
们使用完整的路径。
如果你对Cygwin有绝对的信心，而且不需要使用原生的Windows支持工具，那么在你
的PATH变量中，就应该把Cygwin的/bin目录放在Windows路径的前面。这样可确保
Cygwin工具会被优先采用。
如果你的makefile用到Java工具，别忘了Cygwin所提供的GNUjar程序无法处理标
准的Sunjar文件格式。因此，在你的PATH变量中，就应该把Javajdk的/bin目录放
在Cygwin的/bin目录的前面，以避免用到Cygwin的jar程序。
管理程序和文件
管理程序最常见的方式，就是对有可能发生变化的程序名称或路径使用变量。此类变量
可以定义在简单块中，正如我们之前看到的：
MV?=mV-f
-=
或是定义在条件块中：
---
## Page 157
具可移植性的makefile
147
ifdef COMSPEC
MV?=move
RM ？=del
else
MV？=mV-f
- = 
endif
当变量定义在简单块时，如果要变更它们的值，可以在命令行上重新设定它们、编辑
makefile或是设定环境变量（因为我们使用的是条件赋值运算符？=）。正如之前所提到
的，测试Windows平台的-一个方法，就是检查所有Windows操作系统都会使用的
COMSPEC变量。有些时候只有一个路径需要变更：
ifdef COMSPEC
OUTPUT_ROOT：=d:
GCC_HOME
:= c:/gnu/usr/bin
else
OUTPUT_ROOT:=$（HOME)
GCC_HOME
utq/xsn/=:
endif
OUTPUT_DIR:-$(OUTPUT_ROOT)/work/binaries
CC：=$（GCC_HOME)/gCC
这样你就可以在makefile中通过make变量调用大部分的程序。不过在你习惯之前，你
可能会觉得makefile有点难读。然而，不管怎样，在makefile中使用变量通常会比较方
便，因为相比较于逐字指定的程序名称，变量名称通常会短很多，特别是当你必须使用
完整路径的时候。
相同的技术可用来管理不同的命令选项。例如，内置的编译规则便包含了一个名为
TARGET_ARCH的变量，这个变量可用来指定平台专属的标记：
ddu-xdu(aNIHoW）b
TARGET_ARCH:=-mdisable-fpregs
Endif
当你要定义自己的程序变量的时候，可能需要用到类似的方法：
MV:= mV $(MV_FLAGS)
MV_FLAGS:=-f
Endif
如果要移植到许多平台上，这么做就会出现一连串的ifdef块，这会使得makefile变得
既难阅读又不好维护。这个时候，你可以把平台专属变量存放在它自己的文件中，并在
文件名中包含平台指示符。举例来说，如果你可以通过平台的uname参数来指定一个平
台，那么你就可以使用下面的方式选出适当的make引人文件：
---
## Page 158
148
第七章
inciude $(MACHINE)-defines.mk
文件名中若包含空格，将会对make造成问题。“解析进行期间以空格为分隔符”这个假
设对make而言十分重要。许多内置函数，比如word、filter、wildcard等，都会假
设它们的参数是以空格为分隔符。不过，有些诀窍或许可以在某些小地方协助你。第一
个诀窍（参考“支持多个二进制文件树”一节）就是使用subst来以另-个字符取代空
格：
space =S(empty)S（empty)
#$(call space-to-question,file-name)
space-to-question=$(subst S（space),?,$1)
space-to-question函数将会以文件名匹配通配符？来取代所有空格。现在，我们可
以实现能够处理空格的wildcard和file-exists函数：
$(call wildcard-spaces,file-name)
wildcard-spaces =S(wiidcard S(call space-to-question,S1))
#S(call file-exists
file-exists = S(strip
S（if S1,,$（warning $1 has no value))
1
$(call wildcard-spaces,$1))
我们可以使用space-to-question实现wildcard-spaces函数，让makefile能够在
包含空格的模式上进行通配符的处理。我们还可以使用wildcard-spaces实现file-
exists函数。当然，问号的使用可能会让wildcard-spaces返回不匹配的文件（例
space-to-question函数还可用来转换工作目标和必要条件中包含空格的文件名，因
为你可以在工作目标和必要条件中使用文件名匹配模式（globbingpattern）。
space := S(empty) $(empty)
$(call space-to-question,file-name)
space-to-question =$（subst S(space),?,s1)
# S（call question-to-space,file-name)
question-to-space=$（subst?,S（space),$1）
$(call space-to-question,foo bar):S(call space-to-question,bar baz)
假设文件“barbaz”存在，那么当这个makefile首次被运行的时候就会找到必要条件、
因为文件名匹配模式已经被求过值了。但是工作目标的文件名匹配模式会求值失败，因
为该工作目标尚不存在，所以s@的值将会是foo?bar。然后，命令脚本会使用question-
---
## Page 159
具可移植性的makefile
149
运行时会找到这个工作目标，因为文件名匹配模式会找到具有空格的工作自标。尽管有
点儿不容易看得懂，不过我发现这些诀窍在实际的makefile中很有用。
源文件树的布局
可移植性的另一个方面就是“允许开发人员在他们认为有需要的时候自由管理自己的开
发环境”的能力。如果编译系统要求开发人员必须把他们的源文件、二进制文件、程序
库以及支持工具存放在同一个目录下，或是存放在同一个Windows磁盘上，最后，在磁
盘空间快用光时，开发人员将会面临必须分开这些文件的状况。
此时，有意义的makefile实现方式，就是使用变量来引用这些被分开的文件以及设定合
理的默认值。此外，因为能够通过变量引用每个支持程序库和工具，所以开发人员可以
在发现有需要的时候，自定义文件的位置。你可以对最有可能需要自定义的变量使用条
件赋值运算符，让开发人员能够轻易地使用环境变量来改写makefile。
的能力。即使不必支持不同的平台或编译选项，开发人员通常也会发现自己还是会用到
源文件的多个副本，可能是基于调试的目的或是因为他们要同时开发多个项目。我们已
件树的根目录，或是使用makefile的目录以及一个固定的相对路径来找到二进制文件树。
这两种方法都可以让开发人员获得支持多个文件树的灵活性。
使用不具可移植性的工具
正如之前所提到的，“最小公分母”法的替代方案就是采用若干标准工具。当然，你必
须确定这些标准工具的可移植性至少跟你所要编译的应用程序一样。显然，来自GNU
项目的程序是具可移植性工具的最佳选择。不过具可移植性工具的来源很广泛，Perl和
Python是我马上可以想到的两个具可移植性的工具。
在你找不到具可移植性工具的时候，使用make函数来封装不具可移植性的工具，有时
会很有用。例如，支持EnterpriseJavaBeans的各式各样的编译器（每个编译器的调用
语法皆有细微的差异），此时我们可以编写一个基本的函数来编译一个EJBjar并将它参
数化以便插入不同的编译器。
EJB_TMP_JAR= $(TMPDIR)/temp.jar
#S(call compile-generic-bean,bean-type,jar-name,
bean-files-wi]dcard,manifest-name-opt)
---
## Page 160
150
第七章
define compile-generic-bean
$（RM）S(dir S(META_INF）)
S(MKDIR)S(META_INF)
$（if $（filter 8.xml.xmi.$3),
cp$（filter.xml$.xmi,S3）S（META_INF）)
$(ca1l compile-$1-bean-hook,$2)
Cd S（OUTPUT_DIR)&&
S(JAR)-CfO $（EJB_TMP_JAR)
$(call jar-file-arg.$(META_INF))
$(call bean-classes,$3)
$（cal1 $1-compile-command,$2)
$（cal1 create-manifest,$（if $4,$4,$2),,)
endef
这个通用的EJB编译函数的第一个参数用来指定我们所要使用的bean编译器类型，比如
Weblogic、Websphere等，其余的参数分别用来指定jar的名称、jar中所包含的文件（包
括配置文件）以及一个非必需的manifest文件。这个模板函数首先会以“删除任何旧的
临时目录并且予以重建”的方式来建立一个干净的暂存区。接着，此函数会将出现在必
要条件中的xm/或xmi文件复制到S（META_INF）目录下。这个时候，我们可能需要执行
自定义的操作（customoperation）以便清理META-INF中的文件或是准备.class文件。
为了支持这些操作，我们预备了一个挂钩函数compile-S1-bean-hook，用户可以在有
需要的时候自行定义。举例来说，如果Websphere编译器需要一个额外的控制文件，比
如xs/文件，我们就可以编写下面这个挂钩：
#S(call compile-websphere-bean-hook,file-list)
define compile-websphere-bean-hook
cp S（filter &.xsl,$1)S（META_INF)
endef
只要定义过这个函数，compile-generic-bean中的这个调用将会被扩展得恰如其分。
如果我们选择不编写这个挂钩函数，compile-generic-bean中的这个调用将会被扩展
成空无一物。
接着，我们的通用函数会创建jar。辅助函数jar-file-arg会把一个普通的文件路径分
解成一个-C选项与一个相对路径：
#$(call jar-file-arg,file-name)
define jar-file-arg
-C·s（patsubst 8/.,S（dir $1）)*S(notdir $1)
endef
辅助函数bean-classes可以从一个源文件列表中取出恰当的类文件（jar文件只需要
interface和home类）：
#S(call bean-classes,bean-files-list)
define bean-classes
---
## Page 161
其可移植性的makefile
151
S(subst $(SOURCE_DIR)/
S（filter &Interface.class $Home.class,\
$（subst .java,.class,$1)))
endef
然后，通用函数会以s（cal1$1-compile-command，$2）来调用我们所选择的编译器：
defineweblogic-compile-command
CdS（TMPDIR）&&\
$(JVM)weblogic.ejbc -compiler $(EJB_JAVAC) S(EJB_TMP_JAR） $1
endef
最后，我们的通用函数会加人manifest。
定义好compile-generic-bean之后，我们可以将它封装在想要支持的每个环境的
compiler-specific-bean函数里。
#$(call compile-weblogic-bean,jar-name,
bean-files-wildcard,manifest-name-opt)
define compile-weblogic-bean
$(cal1 compile-generic-bean,weblogic,$1,$2,S3)
endef
标准的shell
有一件事值得一提再提，一个令人厌烦的不兼容问题，那就是当你从一个系统移往另一
个系统时发现/bin/sh（make默认使用的shell）的能力有问题。如果你发现自己需要修
改makefile里的命令脚本，就应该考虑让你的shell标准化。当然，让makefile运行在不
受控制的环境里，这对典型的开放源码计划来说，并不恰当。然而，让makefile运行在
受控制的设定之中，以及固定使用一组经过特别设定的机器，那就相当恰当了。
此外，为了避免shell的不兼容，许多的shell都会提供“可以避免使用其他小型实用程
序”的功能。例如，bashshell所提供的经强化的shell变量展开功能，比如&&和##，
可以协助我们避免其他shell实用程序，比如sed和expr的使用。
automake
本章的重点放在如何有效地使用GNUmake与支持工具以便实现一个具可移植性的编
译系统上。即使这些都是适当的需求，然而有的时候还是会超出其能力范围。如果你无
法使用GNUmake所提供的经强化的功能，并被迫依赖一组具最小公分母性质的功能，
此时你应该考虑使用automake工具，参见hrtp://www.gnu.org/software/automake/
automake.html
---
## Page 162
152
第七章
automake工具的输入是一个经过格式化的makefile，其输出是一个具可移植性的旧式