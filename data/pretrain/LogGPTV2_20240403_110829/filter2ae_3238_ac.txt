图4-27 配置信息详细内容
##### 2）检测运行环境
为了逃避沙箱/安全人员的检测，木马程序使用了各种识别沙箱/虚拟机的技术，用于判断自身程序所在的运行环境，如果发现是在虚拟环境，或是被调试状态，程序则直接退出。从而达到隐藏自身，规避检测的目的。下面是该木马使用到的技术。
① VMWARE和VirtualBox虚拟机的检测。
图4-28 虚拟机的检测
② SandBox的检测。
图4-29 沙盒的检测
③ 判断程序自身是否被调试。
图4-30调试环境的检测
④ 通过判断获取的硬盘容量是否大于6100000000L（56.81G），来检测是否为真实机器或虚拟环境。
图4-31 判断硬盘容量
##### 3）安装机制
木马程序的安装机制包括进程唯一性判断、在宿主机的持久化设置和守护进程设置。该木马以解密配置信息中的MTX字串"AsyncMutex_s8H9OlmYu”为名来创建互斥体，以保证运行进程的唯一性。
图4-32 创建互斥体
其还会判断当前执行文件路径与安装目录是否一致，如果相同，则代表该模块已安装过，安装功能便不再执行。如不相同，该木马则会通过对比系统中运行的进程名来确保运行进程的唯一性。具体代码如图4-33所示。
图4-33 判断安装路径
之后，木马程序根据当前是否为管理员执行权限，来选择是通过安装计划任务还是写入开机自启动命令实现持久化。具体代码如图4-34所示。
图4-34 安装计划任务或添加自启动
在完成持久化操作后，木马程序将自身重新写入到安装目录下并命名为指定文件名（chromgoogle.exe）。然后再在临时目录下生成和执行.bat批处理脚本文件。该bat文件用于运行“chromgoogle.exe”可执行文件及自身删除。具体内容如图4-35所示。
图4-35 脚本文件内容
最后，木马程序通过提升当前进程权限及设置线程始终处于执行状态方式，来实现守护进程。
图4-36 进程守护实现代码
##### 4）上线机制
在安装机制设置完成后，木马程序则通过配置信息中的IP和端口与控制端服务器建立SSL协议连接。此时该木马会收集受感染主机的系统信息，并把这些信息压缩后作为上线包发送到C&C服务器。上线包的内容包含主机设备的用户名、系统版本号、管理员账号和木马程序当前执行路径、版本号、安装时间等相关信息。通过对木马程序的分析，我们发现上线包的长度是不固定的。启明星辰ADLab研究员在对上线包格式做解析、提取后，整理归纳出木马程序上线数据包格式和上线数据包内容格式。具体如图4-37和表4-1（其中“绿色横格”作为一组数据的分割线）所示。
**数据大小** | **数据说明** | **数据内容**  
---|---|---  
0x01 | 子包数量 （以组为单位） | 0x8D（HEX值固定）  
0x01 | 名称长度 | 0xA6（HEX值固定）  
0x06 | 名称 | “Packet”（字符串值固定）  
0x01 | 包名长度 | 0xAA（HEX值固定）  
0x0A | 上线包名 | “ClientInfo”（字符串值固定）  
|  |  
0x01 | 名称长度 | 0xA4（HEX值固定）  
0x04 | 名称 | “HWID”（字符串值固定）  
不固定 | 标识码长度 | 不固定（如0xB4）  
不固定 | 唯一机器标识码 | 不固定（如“F40DD340EC6FDDB01847140”）  
|  |  
0x01 | 名称长度 | 0xA4（HEX值固定）  
0x04 | 名称 | “User”（字符串值固定）  
不固定 | 用户名长度 | 不固定（如0xAA）  
不固定 | 用户名 | 不固定（如“xxx”）  
|  |  
0x01 | 名称长度 | 0xA4（HEX值固定）  
0x04 | 名称 | “Path”（字符串值固定）  
不固定 | 路径长度 | 不固定  
不固定 | 恶意代码当前执行路径 | 不固定  
|  |  
0x01 | 名称长度 | 0xA7（HEX值固定）  
0x07 | 名称 | “Version”（字符串值固定）  
不固定 | 版本号长度 | 不固定（如0xA7）  
不固定 | 恶意代码版本号 | 不固定  
|  |  
0x01 | 名称长度 | 0xA5（HEX值固定）  
0x05 | 名称 | “Admin”（字符串值固定）  
不固定 | 管理员账号名长度 | 不固定（如0xA5）  
不固定 | 管理员账号名 | 不固定（如“Admin”）  
|  |  
0x01 | 名称长度 | 0xAB（HEX值固定）  
0x0B | 名称 | “Performance”（字符串值固定）  
不固定 | 窗口信息长度 | 不固定  
不固定 | 用户前台窗口信息 | 不固定  
|  |  
0x01 | 名称长度 | 0xA8（HEX值固定）  
0x08 | 名称 | “Pastebin”（字符串值固定）  
不固定 | Pastebin值长度 | 不固定（0xA4）  
不固定 | 配置中Pastebin的值 | 不固定（如“null”）  
|  |  
0x01 | 名称长度 | 0xA9（HEX值固定）  
0x09 | 名称 | “Antivirus”（字符串值固定）  
不固定 | 信息长度 | 不固定  
不固定 | 杀毒软件信息 | 不固定（如“N/A”）  
|  |  
0x01 | 名称长度 | 0xA9（HEX值固定）  
0x09 | 名称 | “Install”（字符串值固定）  
不固定 | 信息长度 | 不固定（如0xB1）  
不固定 | 恶意代码安装时间信息 | 不固定  
|  |  
0x01 | 名称长度 | 0xA4（HEX值固定）  
0x04 | 名称 | “Pong”（字符串值固定）  
|  |  
0x01 | 名称长度 | 0xA5（HEX值固定）  
0x05 | 名称 | “Group”（字符串值固定）  
不固定 | Group值长度 | 不固定（如0xA7）  
不固定 | 配置中Group的值 | 不固定（如“Default”）  
表4-1 上线数据包格式
图4-37 上线数据包内容格式
**下面是木马程序发送上线请求的具体操作步骤：**
**步骤1**
其首先会对配置信息中“Pastebin”的值做判断，如果不为NULL，则使用webClient.DownloadString方法获取服务端的上线域名/IP和端口号（从“Pastebin”上提取）。部分代码如图4-38所示。
图4-38 从“Pastebin”上提取上线域名和端口号
如果为NULL，则直接从配置信息中提取出对应的上线域名/IP和端口号（以逗号作为分隔符），这表明该木马程序是具有配置多个C2的功能，攻击者能够灵活地添加多个备用C2，即使其中一部分被阻断，也能够重获控制权。具体代码如图4-39所示。
图4-39 从配置信息中提取上线域名和端口号
**步骤2：**
木马程序在与控制端连接成功后，便开始调用自定义类方法IdSender.SendInfo方法，收集受感染主机和木马自身版本等相关信息，这些信息会被逐个的储存在MsgPack类中。获取设备信息代码如图4-40所示。
图4-40 获取设备信息