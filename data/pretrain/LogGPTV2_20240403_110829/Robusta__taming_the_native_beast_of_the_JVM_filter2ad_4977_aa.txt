title:Robusta: taming the native beast of the JVM
author:Joseph Siefers and
Gang Tan and
Greg Morrisett
Robusta: Taming the Native Beast of the JVM
Joseph Siefers
Department of Computer
Science and Engineering
Lehigh University
PI:EMAIL
Gang Tan
Department of Computer
Science and Engineering
PI:EMAIL
Lehigh University
School of Engineering and
Greg Morrisett
Applied Sciences
Harvard University
PI:EMAIL
ABSTRACT
Java applications often need to incorporate native-code com-
ponents for eﬃciency and for reusing legacy code. However,
it is well known that the use of native code defeats Java’s
security model. We describe the design and implementa-
tion of Robusta, a complete framework that provides safety
and security to native code in Java applications. Starting
from software-based fault isolation (SFI), Robusta isolates
native code into a sandbox where dynamic linking/loading
of libraries is supported and unsafe system modiﬁcation and
conﬁdentiality violations are prevented. It also mediates na-
tive system calls according to a security policy by connecting
to Java’s security manager. Our prototype implementation
of Robusta is based on Native Client and OpenJDK. Exper-
iments in this prototype demonstrate Robusta is eﬀective
and eﬃcient, with modest runtime overhead on a set of JNI
benchmark programs. Robusta can be used to sandbox na-
tive libraries used in Java’s system classes to prevent attack-
ers from exploiting bugs in the libraries. It can also enable
trustworthy execution of mobile Java programs with native
libraries. The design of Robusta should also be applicable
when other type-safe languages (e.g., C#, Python) want to
ensure safe interoperation with native libraries.
Categories and Subject Descriptors
D.4.6 [Software]: Operating Systems—Security and Pro-
tection
General Terms
Security
Keywords
JVM, JNI, SFI, Sandboxing
1.
INTRODUCTION
It is rare that a large software system is written in one sin-
gle programming language. Java programmers often ﬁnd it
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
Copyright 2010 ACM 978-1-4503-0244-9/10/10 ...$10.00.
necessary to incorporate native-code components into their
applications. Frequently, they reuse a widely adopted soft-
ware library written in a diﬀerent programming language
for its maturity and for saving development time. Program-
mers may also implement performance-critical components
in low-level languages such as C or C++. For these reasons,
almost all Java applications include some native code. Even
Sun’s JDK 1.6 contains over 800,000 lines of C/C++ code
(compared to around two million lines of Java code).
On the other hand, the dangers posed by native code are
well understood. Most of the issues result from the fact that
native code is not subject to the control of the Java security
model. Any native code included in a Java application has
to be completely trusted. Granting the permission to allow
a Java program to load native code is equivalent to granting
all permissions to the program. As a result, Java program-
mers face the diﬃcult dilemma of deciding whether or not to
include native code; a decision between security and other
practical considerations (e.g., eﬃciency). Often, security is
simply put aside.
The thrust of this project is to design a framework that
allows JVM administrators to constrain native code with
diﬀerent trust levels, similar to how the security of Java code
is conﬁgured. We were greatly encouraged by the recent
successes of software-based fault isolation (SFI) on modern
CISC architectures [18] and in internet browsers [34]. SFI
provides a foundation for enforcing security on native code,
while sacriﬁcing only modest eﬃciency.
Starting from SFI, we built Robusta1, which is a security
layer incorporated into the JVM for regulating native code.
Fig. 1 presents a high-level diagram showing the relationship
between the JVM and Robusta. As shown in the diagram,
Robusta provides a sandbox for untrusted native code; all
interactions between the native code and the rest of the sys-
tem are mediated by Robusta. Only interactions that obey
a given policy will be allowed.
Fig. 1 also presents two scenarios showing how Robusta
can improve Java’s security. First, Robusta can be used to
sandbox native libraries used in Java’s system classes. We
mentioned that there is already a large amount of trusted na-
tive C/C++ code that comprises a signiﬁcant portion of the
Java Development Kit (JDK). Our previous study [31] found
126 software bugs in a subset of the total native code (38,000
lines), of which 59 were security critical. We believe most
of the native libraries used in the JDK can be managed by
Robusta, eliminating many undiscovered potential exploits.
1Coﬀee Robusta is a species of coﬀee.
gives it perceived “strength” and “ﬁnish”.
Its powerful ﬂavor
201isolating native code in the JVM and present our solutions
in Sec. 4. In Sec. 5, we describe how Robusta regulates na-
tive system calls. We discuss our prototype implementation
and evaluation results in Sec. 6, providing a guideline for
how to make the tradeoﬀ between eﬃciency and security in
Robusta. Finally, we discuss related work, future work and
conclude.
2. BACKGROUND: JAVA-NATIVE INTER-
OPERATION
The Java Native Interface (JNI) [17] is Java’s mechanism
for interfacing with native code. A native method is declared
in a Java class by adding the native modiﬁer. The following
code snippet of the Deflater class is extracted from Sun’s
JDK. It declares a native deflateBytes method. Once de-
clared, native methods are invoked in the same way as or-
dinary Java methods.
In the example, the deflate Java
method invokes deflateBytes.
public class Deflater {
...
public synchronized int deflate
(byte[] b, int off, int len)
{ ...; return deflateBytes(b, off, len);}
private native int deflateBytes
(byte[] b, int off, int len);
static {System.loadLibrary(‘‘zip’’); ...;}
}
A native method is implemented in a native language such
as C, C++, or assembly code. The JDK implementation of
deflateBytes above invokes the popular Zlib C library for
the deﬂation (compression) operation. There is also a small
amount of native glue code between Java and the Zlib C
library. The glue code uses JNI functions to interact with
Java directly. Through these JNI functions, native code can
inspect, modify, and create Java objects, invoke Java meth-
ods, catch and throw Java exceptions, and so on.
3. ROBUSTA OVERVIEW
In this section, we discuss Robusta’s threat model, its
defenses, and the security policies that it enforces. Ro-
busta can enforce polices despite the attacks described in
the threat model. Details of Robusta’s defense mechanisms
are left to Sec. 4 and 5.
3.1 Threat model
Native code resides in the same address space as Java
code but is not constrained by the Java security model. It
poses the same kinds of threats to a Java environment as
any untrusted code does. We focus on the most vicious
kinds of attacks: system modiﬁcation and privacy invasion.
Fig. 2 presents three ways in which these attacks can hap-
pen. Firstly, unconstrained native code can directly read-
/write any memory location in its address space, resulting
in possible destruction of the JVM state or leak of conﬁden-
tial information.
Secondly, abusive JNI calls can also cause integrity or
conﬁdentiality violations. The JNI interface itself does not
mandate any safety checks and native code could deliber-
ately or unintentionally misuse the JNI interface, resulting
Figure 1: JVM and Robusta.
For instance, the system classes under java.util.zip in-
voke the popular Zlib C library for performing compres-
sion/decompression. As we will show, the Zlib C library
can be sandboxed by Robusta, removing it from the TCB.
Robusta can also allow mobile Java programs (Java ap-
plets) to utilize native libraries. Such an advance allows the
distribution of Java and native code together, which we term
a napplet 2. In the vanilla JVM, the default policy for Java
applets is to disallow native code entirely, due to the inherent
security risks. Instead, Robusta allows Java administrators
to deﬁne a security policy for the native libraries within each
napplet. For example, suppose a napplet is downloaded from
a remote (untrusted) host and contains a fast mathematics
library as well as some Java code for the GUI. Robusta can
sandbox the napplet’s native code to prevent access to the
local ﬁle system or network.
The main contribution of this paper is the design and im-
plementation of Robusta, a framework that enables the iso-
lation and security conﬁguration of native code within the
JVM. We propose solutions for many technical challenges in
this context, including dynamic linking/loading, sandboxing
of JNI functions, and the accommodation of multithread-
ing. We also propose a novel architecture for the security
conﬁguration of native code, which reuses much of Java’s
security infrastructure. Our prototype implementation in
Sun’s OpenJDK demonstrates the approach is practical and
eﬃcient.
The rest of the paper is organized as follows. We start in
Sec. 2 with a brief introduction to the background of Java-
native interoperation. We then present a high-level overview
of Robusta in Sec. 3. We describe the technical challenges in
2napplet—a Native Applet
202Figure 2: Triple threats from native code.
in unsafe modiﬁcation of the JVM state or access to private
ﬁelds. For instance, native code can invoke setObjectField
to modify a ﬁeld of an object to a value whose type is incom-
patible with the ﬁeld’s declared type, resulting in so-called
type-confusion attacks [19]. As another example, through
getObjectField, native code can read any ﬁeld of an object
even if it is a private ﬁeld.
Finally, native code may issue OS system calls to cause
unsafe side eﬀects such as overwriting security-sensitive ﬁles
or sending network packets.
3.2 Defenses in Robusta
Fig. 3 depicts how Robusta defends against the triple
threats discussed in the previous section. As a ﬁrst step,
Robusta adopts SFI [33] to isolate untrusted native code
from the rest of the JVM. Native code is constrained within
a sandbox so that memory access and illegal control transfers
outside of the sandbox are disallowed. Robusta’s implemen-
tation builds upon Google’s Native Client (NaCl [34, 26]), a
state-of-the-art SFI tool. Robusta extends NaCl to support
secure dynamic linking/loading of native libraries, which is
necessary in the JVM context as Java classes are loaded dy-
namically. Robusta acts as an agent for the JVM to fulﬁll
tasks such as initialization of the sandbox, loading libraries,
and resolving symbols.
To prevent abusive JNI calls, Robusta sandboxes JNI calls
in the following way. First, all JNI calls are redirected to
JNI trampolines by a technique that provides “fake” interface
pointers to untrusted native code (details in Sec. 4). These
trampolines reside in an unmodiﬁable region at the begin-
ning of the sandbox. Trampolines are the only ways that
native code can escape the sandbox. The JNI trampolines
then invoke trusted JNI wrappers outside of the sandbox
to perform safety checks, preventing unsafe modiﬁcation or
privacy invasion. Robusta also addresses several other is-
sues in the JNI interface, including direct pointers to Java
primitive arrays and calling Java methods from native code.
Finally, Robusta connects to Java’s security manager to
mediate native system calls. A system call issued by native
code is redirected to its corresponding system-call trampo-
line, which in turn invokes a trusted system-call wrapper.
The wrapper invokes the checkPermission method of Java’s
security manager to decide on the system call’s safety based
Figure 3: Defending against the triple threats in
Robusta.
on a pre-deﬁned security policy. This design enables Ro-
busta to place native code under the same runtime security
restrictions as Java code and reuses much of Java’s policy-
driven security infrastructure.
3.3 Protection strength
The permission for loading native code implies AllPer-
mission in the original Java security model. By contrast,
Robusta gives JVM administrators the ability to conﬁgure
the security of native code. We next discuss what kinds of
security policies Robusta enforces despite attacks described
in the threat model.
Our discussion will be based on a lightweight formal no-
tation. We deﬁne a JVM state to be a pair, (s, h), where
s is a stack of method calls and h a heap. The heap is a
map from locations to Java objects. Native code has its
own world, including its heap, stack, I/O behavior, and so
on. Therefore, when considering both the JVM and native
code, a complete state is (s, h, w), where w is a native world.
JVM integrity. The integrity policy states that when na-
tive code makes a computation step from (s, h, w) to (s′, h′, w′),
the new Java state (s, h) should be consistent with the old
one (s′, h′). We deﬁne the consistency to be respect to Java’s
type system, with the help of the following two notions.
A well-typed Java heap is one where each heap object
is well typed according to its runtime type tag. A type-
preserving heap extension from h to h′, written as h ⊑ h′,
means that both h and h′ are well typed and objects in h
and h′ at the same location have the same type. Note that
h′ may have more objects than h and the deﬁnition does not
require the ﬁelds of objects at the same location to have the
same value. These two notions can be formalized precisely
based on a Java model [32].
Definition 1. Suppose one execution step in native code
brings a state (s, h, w) to (s′, h′, w′). Then the integrity of
the JVM is respected if s = s′ and h ⊑ h′.
That is, native code should not change the stack of the
JVM. Native code may perform type-preserving modiﬁca-
203tions to the Java heap (including type-preserving mutation
and allocation), and may make arbitrary changes to its own
world. Enforcing this integrity policy ensures that Java code
is type safe even after a native step, therefore preventing
type-confusion attacks.
JVM conﬁdentiality. During runtime, the JVM provides
native code with a set of object references. Conﬁdential-
ity is respected if native code accesses only objects reach-
able by those references and if the access-control modiﬁers
(e.g., private) of ﬁelds and methods are respected. This
is an intentional deﬁnition of conﬁdentiality. It could also
be formalized extensionally following a relational approach.
Roughly, in a extensional formalization, conﬁdentiality is
respected if native code behaves the same when given two
Java heaps whose public data are the same, but whose pri-
vate data may diﬀer. This is similar to how information-ﬂow
policies can be formalized in a relational setting. The for-
malization is beyond the scope of this paper.
Access control of system calls. Native code interacts
with the native system via system calls. A policy on system
calls deﬁnes which system calls native code is allowed to
access. For example, one policy can allow ﬁle accesses, but
deny network accesses. Given a policy P , when native code
makes a change to its own world from w to w′, that change
should respect P .
Robusta enforces JVM integrity and conﬁdentiality poli-
cies through SFI and by embedding safety checks into JNI-
call wrappers. Robusta controls access to system calls by
consulting Java’s security manager in system-call wrappers.
4.
ISOLATING NATIVE CODE
Robusta isolates native code into its own “address space”
so that it cannot damage the rest of the system. We discuss
how the isolation is achieved in four steps: (1) NaCl, the
basis of isolation; (2) secure dynamic linking/loading; (3)
various technical issues when incorporating NaCl into the
JVM context; and (4) how JNI calls are sandboxed.
4.1 The starting point: NaCl
SFI is the basis of Robusta and isolates untrusted native
code into a “user address space” within the JVM address
space. We will call the “user address space” the NaCl address
space. Without this low-level isolation, high-level security
policies cannot be meaningfully enforced on native code.
Robusta utilizes an industrial-strength SFI tool, Native
Client (NaCl [34, 26]). NaCl builds upon the ideas of pre-
vious SFI systems [33, 28, 4, 18, 5].