flat memory model.
Software-based solutions that utilize hypervisors as TCB
have been explored (e.g., Trustvisor [35], MiniBox [33],
NOVA [45], Overshadow [12], and seL4V [28]). The goal of
these projects is to provide a secure environment. In contrast,
OpenSGX does not provide any security guarantee due to its
emulation nature, but offers a rich platform that enables new
research.
Trusted I/O and remote attestation. Since Intel SGX does
not provide a secure way of communicating with users, an
SGX-compatible solution to establish a secure channel between
a user to the computer (e.g., secure I/O) is required. In this
regard, the integrity of the peripheral’s software is important;
VIPER [32] attempts to verify the integrity of device firmware;
NAVIS [16] enables a similar integrity check to network
adapters; IOCheck [54] provides a framework to enhance the
security of I/O devices; and Intel recently introduced Intel
IPT [10] to establish a secure display and audio channel. These
solutions can be made compatible to Intel SGX in general, and
by using our OpenSGX, one can also explore such an interface
for trusted I/O, similar to our preliminary proof-of-concept
example presented in §VI-B.
IX. DISCUSSION AND LIMITATIONS
In this section, we summarize the limitations of OpenSGX,
describe our concerns about Intel SGX and its approach in
general, and attempt to clarify prevalent misconceptions about
Intel SGX.
Limitations of OpenSGX. First and foremost, OpenSGX is
not secure for any security-related projects. However, OpenSGX
can be utilized or extended for easy development of Intel
SGX such as toolchains or a library, precise profiling of SGX
programs, and the exploration of potential research opportunities
beyond the software boundary (e.g., hardware semantics or
efficient memory encryption scheme) that the Intel SGX can
not flexibly enable.
Limitations of Intel SGX.
Intel SGX is an ideal model for
the cloud, as it has a very restricted set of the I/O channels
(usually just the network and local disk). To use Intel SGX in a
desktop-like, interactive environment, it is essential to establish
a secure channel between users and the enclave program. There
are already a few commodity hardware available on the market:
Intel Protected Audio and Video (Intel PAVP) [20] and Intel
Identity Protection Technology (Intel IPT) [10]. Although both
technologies can be used for creating an encrypted I/O path of
video and audio to an enclave program [19, 20], their usage
seems restricted to mobile devices that accept a user’s inputs
through a touch-screen interface. However, integration into
typical input devices such as a keyboard or mouse still needs
to be solved for wide adoption of Intel SGX.
Rutkowska [39] raises a similar concern that even if SGX
succeeds in preventing malware from stealing critical user data
directly from memory, the absence of a secure input and output
can allow malware to potentially command the enclave to leak
them.
Another misconception of Intel SGX is that its trust (i.e.,
remote attestation) can be constructed without any future
reliance on Intel once an SGX-enabled device is deployed.
However, to properly perform a remote attestation, the report
certified by the quoting enclave should be checked for an
EPID infrastructure provided by Intel (e.g., checking identity
or revocation) [9].
Malicious use of Intel SGX. As recently highlighted in detail
by a handful of researchers [13, 40], we have similar concerns
in terms of safe use of Intel SGX; for example, irreversible
malware might be possible by abusing the isolation property, so
unanalyzable, guaranteed by the hardware. Worse yet, end-users
or anti-virus software will not be able to distinguish from a
compromised instance of OpenSGX and its normal run.
More specifically, we describe a few concrete scenarios
showcasing how an enclave program can be abused once
compromised (or after a private key is leaked). First, a
botnet creator can establish a completely hidden or obfuscated
communication channel between its operator by busing the
remote attestation [13]; once malware runs inside the enclave,
the operation initiates actual commands.
Second,
the isolation will make traditional, popular
signature-based anti-virus programs futile; one potential direc-
tion is to estimate the correct or expected behavior of enclave
programs, but we believe these directions are ad-hoc, (i.e., not
sound) and results in huge false positives in practice.
Finally, another concern, similarly raised by Joanna
Rutkowska [39, 40], is that the use of SGX tends to make
end-users rely too strongly on Intel. Except for the fact that
Intel can launch an enclave without a platform-specific key, our
reliance on the SGX might result in a single point of security
failure; Intel can introduce a CPU backdoor by disclosing the
private key without any hardware tempering or incorporating
suspicious components.
X. CONCLUSION
Due to the wide adoption of the x86 architecture, its Soft-
ware Guard Extensions (SGX) for trusted execution potentially
has a tremendous impact on software security, enabling a wide
range of applications to enhance their security and privacy
properties. At the same time, the limitations of SGX need
to be closely evaluated due to the possibility of new forms
of attacks potentially surfacing. Unfortunately, the absence
of an open platform for research, such as SGX hardware or
an emulator, has been a significant barrier to exploring the
promises and potential issues of SGX. The remarkable interest
we have received from the security community during the early
phase of development reflects that there is a strong demand for
an open platform for SGX research.
To tackle the problem, we propose OpenSGX, a fully
functional open source emulator for Intel SGX. In the process,
we have developed a complete platform for SGX develop-
ment that includes emulated hardware and operating system
components, an enclave program loader, an OpenSGX user
library, and debugging and performance monitoring support.
Our evaluation of OpenSGX demonstrates that it can run non-
trivial applications, such as the Tor anonymity network, and new
ideas can be easily implemented and evaluated as a proof-of-
concept using our framework. Finally, we believe that significant
research opportunities exist in applying new ideas to each and
every component of OpenSGX. We plan to make OpenSGX
publicly available as open source and hope that OpenSGX
serves as a vehicle for implementing new ideas in trusted
execution environments.
XI. ACKNOWLEDGMENT
We thanks Patrick Bridges for implementing enclave library
and remote attestation supports, Ron Rivest for insightful
discussion, Jethro Beekman for checking hardware conformance
with OpenSGX, and the anonymous reviewers for their helpful
feedback. This research was supported in part by the NSF award
(DGE-1500084); by the ONR grant (N00014-15-1-2162); by
the DARPA Transparent Computing program under contract
No. DARPA-15-15-TC-FP-006; by the ICT R&D program,
MSIP/IITP [R-20150223-000167, R0190-15-2010, H7106-14-
1011, 14-911-05-001]; and by NRF-2013R1A1A1076024.
REFERENCES
[1] T. G. Abbott, K. J. Lai, M. R. Lieberman, and E. C. Price. Browser-based attacks
on tor. In Proceedings of the 7th International Conference on Privacy Enhancing
Technologies, 2007.
I. Anati, S. Gueron, S. P. Johnson, and V. R. Scarlata.
Innovative Technology
for CPU Based Attestation and Sealing. In Proceedings of the 2nd International
Workshop on Hardware and Architectural Support for Security and Privacy (HASP),
pages 1–8, Tel-Aviv, Israel, 2013.
[2]
[3] ARM. Building a secure system ising trustzone technology, Dec. 2008. PRD29-
GENC-009492C.
[4] A. M. Azab, P. Ning, and X. Zhang. SICE: A hardware-level strongly isolated
computing environment for x86 multi-core platforms. In Proceedings of the 18th
ACM Conference on Computer and Communications Security, pages 375–388,
Chicago, Illinois, Oct. 2011.
[5] A. Baumann, M. Peinado, and G. Hunt. Shielding applications from an untrusted
cloud with haven. In Proceedings of the 11th Symposium on Operating Systems
15
Design and Implementation (OSDI), pages 267–283, Broomfield, Colorado, Oct.
2014.
Two-Way Sandbox for x86 Native Code. In Proceedings of the 2014 ATC Annual
Technical Conference (ATC), pages 409–420, Philadelphia, PA, June 2014.
[34] J. M. McCune, B. J. Parno, A. Perrig, M. K. Reiter, and H. Isozaki. Flicker:
In Proceedings of the ACM
An Execution Infrastructure for TCB Minimization.
EuroSys Conference, pages 315–328, Glasgow, Scotland, Mar. 2008.
[35] J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor, and A. Perrig.
TrustVisor: Efficient TCB Reduction and Attestation. In Proceedings of the 31th
IEEE Symposium on Security and Privacy (Oakland), pages 143–158, Oakland, CA,
May 2010.
[36] F. McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas, H. Shafi, V. Shanbhogue,
Innovative instructions and software model for isolated
and U. R. Savagaonkar.
In Proceedings of the 2nd International Workshop on Hardware and
execution.
Architectural Support for Security and Privacy (HASP), pages 1–8, Tel-Aviv, Israel,
2013.
[37] S. J. Murdoch.
Introduction to trusted execution environments (tee), 2014. http:
//sec.cs.ucl.ac.uk/users/smurdoch/talks/rhul14tee.pdf.
[38] E. Owusu, J. Guajardo, J. McCune, J. Newsome, A. Perrig, and A. Vasudevan.
OASIS: On achieving a sanctuary for integrity and secrecy on untrusted platforms.
In Proceedings of the 20th ACM Conference on Computer and Communications
Security, pages 13–24, Berlin, Germany, Oct. 2013.
[39] J. Rutkowska. Thoughts on Intel’s upcoming Software Guard Extensions (Part
1), Aug. 2013. http://theinvisiblethings.blogspot.com/2013/08/thoughts-on-intels-
upcoming-software.html.
[40] J. Rutkowska. Thoughts on Intel’s upcoming Software Guard Extensions (Part
2), Sept. 2013. http://theinvisiblethings.blogspot.com/2013/09/thoughts-on-intels-
upcoming-software.html.
[41] Samsung. White Paper: An Overview of Samsung KNOX, 2013. Enterprise
Mobility Solutions.
[42] F. Schuster, M. Costa, C. Fournet, C. Gkantsidis, M. Peinado, G. Mainar-Ruiz, and
M. Russinovich. VC3: Trustworthy Data Analytics in the Cloud using SGX. In
Proceedings of the 36th IEEE Symposium on Security and Privacy (Oakland), San
Jose, CA, May 2015.
[43] R. Sinha, S. Rajamani, S. Seshia, and K. Vaswani. Moat: Verifying confidentiality
In Proceedings of the 22nd ACM SIGSAC Conference on
of enclave programs.
Computer and Communications Security, pages 1169–1184. ACM, 2015.
[44] L. Soares and M. Stumm. Flexsc: flexible system call scheduling with exception-
In Proceedings of the 9th USENIX conference on Operating
less system calls.
systems design and implementation, pages 1–8. USENIX Association, 2010.
[45] U. Steinberg and B. Kauer. NOVA: A microhypervisor-based secure virtualization
architecture. In Proceedings of the ACM EuroSys Conference, pages 209–222, Paris,
France, Apr. 2010.
[46] K. Sun, J. Wang, F. Zhang, and A. Stavrou. SecureSwitch: BIOS-assisted isolation
and switch between trusted and untrusted commodity oses. In Proceedings of the
19th Annual Network and Distributed System Security Symposium, San Diego, CA,
Feb. 2012.
[47] Y. Sun, A. Edmundson, L. Vanbever, O. Li, J. Rexford, M. Chiang, and P. Mittal.
Raptor: routing attacks on privacy in tor. In USENIX Security Symposium, 2015.
[48] Torproject. The chutney tool for testing and automating Tor network setup. https:
//gitweb.torproject.org/chutney.git/tree/README, 2015. Accessed: 05/15/2015.
[49] A. Vasudevan, E. Owusu, Z. Zhou, J. Newsome, and J. M. McCune. Trustworthy
execution on mobile devices: What security properties can my mobile platform give
me? In Proceedings of the 5th International Conference on Trust and Trustworthy
Computing (TRUST), pages 159–178, Vienna, Austria, 2012.
[50] Wikipedia. C dynamic memory allocation — wikipedia,
the free encyclope-
dia, 2015. URL http://en.wikipedia.org/w/index.php?title=C_dynamic_memory_
allocation&oldid=658580417. [Online; accessed 13-May-2015].
[51] P. Williams and R. Boivie. CPU support for Secure Executables. In Proceedings
of the 4th International Conference on Trust and Trustworthy Computing (TRUST),
pages 172–187, 2011.
[52] P. Winter, R. Köwer, M. Mulazzani, M. Huber, S. Schrittwieser, S. Lindskog, and
E. Weippl. Spoiled onions: Exposing malicious tor exit relays. In Privacy Enhancing
Technologies, pages 304–331. Springer, 2014.
[53] P. Winter, R. Köwer, M. Mulazzani, M. Huber, S. Schrittwieser, S. Lindskog, and
E. Weippl. Spoiled onions: Exposing malicious tor exit relays. In Privacy Enhancing
Technologies, pages 304–331. Springer, 2014.
[54] F. Zhang.
IOCheck: A framework to enhance the security of I/O devices at
In Dependable Systems and Networks Workshop (DSN-W), 2013 43rd
runtime.
Annual IEEE/IFIP Conference on, pages 1–4. IEEE, 2013.
[6] S. L. Blond, P. Manils, C. Abdelberi, M. A. D. Kaafar, C. Castelluccia, A. Legout,
and W. Dabbous. One bad apple spoils the bunch: exploiting p2p applications to
trace and profile tor users. arXiv preprint arXiv:1103.1518, 2011.
[7] R. Boivie and P. Williams. SecureBlue++: CPU support for Secure Executables,
2013. RC25369, IBM Research Report.
[8] F. Brasser, B. E. Mahjoub, A.-R. Sadeghi, C. Wachsmann, and P. Koeberl. TyTAN:
In Proceedings of the 52nd Annual Design
tiny trust anchor for tiny devices.
Automation Conference (DAC), 2015.
[9] E. Brickell and J. Li. Enhanced privacy ID: A direct anonymous attestation scheme
with enhanced revocation capabilities. In Proceedings of the 2007 ACM workshop
on Privacy in electronic society, pages 21–30, 2007.
[10] P. Carbin. Intel Identity Protection Technology with PKI (Intel IPT with PKI), May
2012. White Paper, Technology Overview.
[11] S. Checkoway and H. Shacham. Iago Attacks: Why the System Call API is a Bad
In Proceedings of the 18th International Conference
for Programming Languages and Operating Systems
Untrusted RPC Interface.
on Architectural Support
(ASPLOS), pages 253–264, Houston, TX, Mar. 2013.
[12] X. Chen, T. Garfinkel, E. C. Lewis, P. Subrahmanyam, C. A. Waldspurger, D. Boneh,
J. Dwoskin, and D. R. Ports. Overshadow: A virtualization-based approach to
retrofitting protection in commodity operating systems. In Proceedings of the 13th
International Conference on Architectural Support for Programming Languages and
Operating Systems, pages 2–13, Seattle, WA, Mar. 2008.
[13] S. Davenport and R. Ford. SGX: the good, the bad and the downright ugly, Jan.
2014. https://www.virusbtn.com/virusbulletin/archive/2014/01/vb201401-SGX.
[14] R. Dingledine. Tor Project infrastructure updates in response to security breach.
http://archives.seul.org/or/talk/Jan-2010/msg00161.html, January 2010.
[15] R. Dingledine, N. Mathewson, and P. Syverson. Tor: The second-generation onion
router. In USENIX Security Symposium, 2004.
[16] L. Duflot, Y.-A. Perez, and B. Morin. What if you canâ ˘A ´Zt trust your network
card? In Recent Advances in Intrusion Detection, pages 378–397. Springer, 2011.
[17] FortConsult. Practical Onion Hacking: Find the Real Address of Tor Clients. http:
//www.fortconsult.net/images/pdf/Practical_Onion_Hacking.pdf, 2006.
[20]
[18] J. Greene. Intel trusted execution technology. Intel Technology White Paper, 2012.
[19] M. Hoekstra, R. Lal, P. Pappachan, V. Phegade, and J. Del Cuvillo. Using innovative
In Proceedings of the 2nd
instructions to create trustworthy software solutions.
International Workshop on Hardware and Architectural Support for Security and
Privacy (HASP), pages 1–8, Tel-Aviv, Israel, 2013.
Intel. Graphics Drivers Blue-ray Disc* Playback On Intel Graphics FAQ. http:
//www.intel.com/support/graphics/sb/CS-029871.htm#bestexperience, 2008. Ac-
cessed: 05/04/2015.
Intel. Intel Software Guard Extensions Programming Reference (rev1), Sept. 2013.
329298-001US.
Intel. Intel Software Guard Extensions Programming Reference (rev2), Oct. 2014.
329298-002US.
Intel. Product change notification, Oct. 2015. PCN114074-00.
Intel. SGX Tutorial, ISCA 2015. http://sgxisca.weebly.com/, June 2015.
[23]
[24]
[25] A. Ionescu. Intel sgx enclave support in windows 10 fall update. Winsider Technical
[21]
[22]
White Paper, 2015.
[26] A. Johnson, C. Wacek, R. Jansen, M. Sherr, and P. Syverson. Users get routed:
In Proceedings of the 2013
Traffic correlation on tor by realistic adversaries.
ACM SIGSAC conference on Computer & communications security, pages 337–348.
ACM, 2013.
[27] S. Kim, Y. Shin, J. Ha, T. Kim, and D. Han. A First Step Towards Leveraging Com-
modity Trusted Execution Environments for Network Applications. In Proceedings
of the 14th ACM Workshop on Hot Topics in Networks (HotNets), Philadelphia, PA,
Nov. 2015.
[28] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin, D. Elkaduwe,
K. Engelhardt, R. Kolanski, M. Norrish, T. Sewell, H. Tuch, and S. Winwood. sel4:
In Proceedings of the ACM SIGOPS 22Nd
Formal verification of an os kernel.
Symposium on Operating Systems Principles, SOSP ’09, pages 207–220, 2009.
[29] P. Koeberl, S. Schulz, A.-R. Sadeghi, and V. Varadharajan. Trustlite: a security
In Proceedings of the Ninth European
architecture for tiny embedded devices.
Conference on Computer Systems (EuroSys), page 10. ACM, 2014.
[30] S. Le Blond, P. Manils, A. Chaabane, M. A. Kaafar, C. Castelluccia, A. Legout,
and W. Dabbous. One bad apple spoils the bunch: Exploiting p2p applications
to trace and profile tor users. In Proceedings of the 4th USENIX Conference on
Large-scale Exploits and Emergent Threats, pages 2–2, 2011.
[31] D. Levin, J. R. Douceur, J. R. Lorch, and T. Moscibroda. TrInc: Small trusted
hardware for large distributed systems. In Proceedings of the 6th Symposium on
Networked Systems Design and Implementation (NSDI), pages 1–14, Boston, MA,
Apr. 2009.
[32] Y. Li, J. M. McCune, and A. Perrig. VIPER: verifying the integrity of PERiph-
In Proceedings of the 18th ACM conference on Computer and
erals’ firmware.
communications security, pages 3–16. ACM, 2011.
[33] Y. Li, J. McCune, J. Newsome, A. Perrig, B. Baker, and W. Drewry. MiniBox: A
16