### Flat Memory Model

Software-based solutions that leverage hypervisors as the Trusted Computing Base (TCB) have been extensively explored. Examples include Trustvisor [35], MiniBox [33], NOVA [45], Overshadow [12], and seL4V [28]. These projects aim to provide a secure execution environment. In contrast, OpenSGX does not offer any security guarantees due to its emulation nature but provides a rich platform for new research.

### Trusted I/O and Remote Attestation

Intel SGX lacks a secure method for communicating with users, necessitating an SGX-compatible solution to establish a secure channel between the user and the computer, such as secure I/O. The integrity of peripheral software is crucial in this context. VIPER [32] verifies the integrity of device firmware; NAVIS [16] ensures similar integrity checks for network adapters; IOCheck [54] enhances the security of I/O devices; and Intel recently introduced Intel IPT [10] to create a secure display and audio channel. These solutions can generally be made compatible with Intel SGX, and OpenSGX can facilitate the exploration of such trusted I/O interfaces, as demonstrated in our preliminary proof-of-concept example in §VI-B.

### Discussion and Limitations

#### Limitations of OpenSGX
OpenSGX is not suitable for security-sensitive projects. However, it can be used or extended for developing Intel SGX toolchains or libraries, precise profiling of SGX programs, and exploring research opportunities beyond the software boundary, such as hardware semantics or efficient memory encryption schemes, which Intel SGX cannot flexibly support.

#### Limitations of Intel SGX
Intel SGX is well-suited for cloud environments, where I/O channels are typically limited to the network and local disk. For desktop-like, interactive environments, establishing a secure channel between users and enclave programs is essential. Commodity hardware like Intel Protected Audio and Video (Intel PAVP) [20] and Intel Identity Protection Technology (Intel IPT) [10] can create encrypted I/O paths for video and audio. However, these technologies are primarily designed for mobile devices with touch-screen interfaces, and integration with traditional input devices like keyboards and mice remains a challenge.

Joanna Rutkowska [39] highlights a similar concern: even if SGX prevents malware from directly stealing data from memory, the lack of secure input and output can allow malware to command the enclave to leak data.

Another misconception about Intel SGX is that remote attestation can be performed without relying on Intel's infrastructure. In reality, remote attestation requires verification through Intel’s Enhanced Privacy ID (EPID) infrastructure [9].

#### Malicious Use of Intel SGX
Researchers [13, 40] have raised concerns about the safe use of Intel SGX. For instance, irreversible malware could exploit the isolation properties, making it unanalyzable by end-users or anti-virus software. We describe several scenarios where an enclave program can be abused:

1. **Hidden Communication Channels**: A botnet creator can establish a hidden or obfuscated communication channel using remote attestation [13]. Once malware runs inside the enclave, it can initiate commands.
2. **Signature-Based Anti-Virus Futility**: The isolation provided by SGX renders traditional signature-based anti-virus programs ineffective. Estimating the correct behavior of enclave programs is challenging and often results in high false positives.
3. **Reliance on Intel**: Joanna Rutkowska [39, 40] argues that reliance on SGX makes end-users overly dependent on Intel. While Intel can launch enclaves without platform-specific keys, this reliance introduces a single point of failure. Intel could introduce backdoors by disclosing private keys or incorporating suspicious components.

### Conclusion
The widespread adoption of x86 architecture means that Intel SGX has the potential to significantly impact software security, enabling a wide range of applications to enhance their security and privacy. However, the limitations of SGX must be carefully evaluated due to the potential for new attack vectors. The absence of an open platform for SGX research has been a significant barrier. OpenSGX, a fully functional open-source emulator, addresses this issue by providing a complete platform for SGX development, including emulated hardware, operating system components, an enclave program loader, a user library, and debugging and performance monitoring support.

Our evaluation shows that OpenSGX can run non-trivial applications like the Tor anonymity network, and new ideas can be easily implemented and tested. We believe there are significant research opportunities in applying new ideas to each component of OpenSGX. We plan to make OpenSGX publicly available as open source, hoping it will serve as a vehicle for implementing new ideas in trusted execution environments.

### Acknowledgment
We thank Patrick Bridges for implementing the enclave library and remote attestation support, Ron Rivest for insightful discussions, Jethro Beekman for checking hardware conformance with OpenSGX, and the anonymous reviewers for their valuable feedback. This research was supported in part by the NSF award (DGE-1500084), ONR grant (N00014-15-1-2162), DARPA Transparent Computing program (contract No. DARPA-15-15-TC-FP-006), ICT R&D program (MSIP/IITP [R-20150223-000167, R0190-15-2010, H7106-14-1011, 14-911-05-001]), and NRF-2013R1A1A1076024.

### References
[References listed as provided in the original text]

This revised version aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.