12
_pos_control . set_max_speed_xy ( _wp_speed_cms );
// flag that wp leash must be recalculated
_flags . recalc_wp_leash = true ;
Listing 2: Control-semantic bug behind Case 5.
and hence are consistent. Based on Table 1, MAYDAY infers
that the CVDG-level corruption path is M ‚Üí Àôrx (Type IV).
Next, MAYDAY performs the program-level investigation.
Starting from the program execution log at Iteration 23629
and moving backward. Algorithm 2 Ô¨Ånds the data Ô¨Çow that
corresponds to the CVDG-level corruption path: It started
from the velocity-changing (from 2 m/s to 15 cm/s) command
at Iteration 17736, which led to the modiÔ¨Åcation of x-axis
velocity reference (Àôrx) at Iteration 17742. MAYDAY reports
12 basic blocks that may be involved in the data Ô¨Çow.
From the 12 basic blocks, we pinpoint the bug as shown in
Listing 2. The code intends to enforce a minimum mission
velocity (WPNAV_WP_SPEED_MIN, which is 20 cm/s in ArduPi-
lot) through a range check on the Ô¨Çight mission velocity input
(speed_cms) (Line 9, which is the patch). But the code, by
mistake, compares the minimum mission velocity with the
current velocity _pos_control.get_max_speed_xy(), not
with the set velocity speed_cms (Line 7)! This bug caused
the control program to accept the 15cm/s velocity, which is
lower than the minimum mission velocity. Even worse, after
this velocity change, the x-axis velocity controller will refuse
to accept any other velocity change, because the result of
the (buggy) comparison will always be FALSE. The 12 ba-
sic blocks identiÔ¨Åed by MAYDAY cover the buggy statement
with the wrong variable name, which RVFuzzer [51] cannot
report.
8.2 Scope Reduction for Bug Localization
As shown in Section 8.1, MAYDAY can signiÔ¨Åcantly narrow
down the scope of control program code for manual inspection
to pinpoint a bug, thanks to 1) control model (CVDG)-guided
corruption inference and 2) program execution logging. In
this section, we deÔ¨Åne and implement a baseline investigation
method without adopting these two ideas. We then compare
MAYDAY with the baseline, with respect to the number of
basic blocks they identify for bug localization.
The baseline model only analyzes the control program
source code and control-level log. To its favor, we assume
that the baseline method is able to identify at least one cor-
rupted control variable based on the control-level log. From
the corrupted variable, it performs static analysis (i.e., point-
to analysis and backward slicing) to identify the correspond-
ing basic blocks that implement the slice. Fig. 11 shows, in
log scale, the number of basic blocks reported by the base-
line method for each of the 10 cases in Section 8.1, compar-
ing with MAYDAY. For each case, the baseline method re-
ports thousands of basic blocks for bug localization; whereas
MAYDAY reports tens of them. This comparison highlights
the beneÔ¨Åt (and novelty) of MAYDAY‚Äôs control model guid-
ance and program-level logging, which mitigates the long-
existing problem of state explosion [53, 54] faced by generic
program attack provenance.
8.3 Runtime, Storage and Energy Overhead
By identifying the basic blocks that implement the data Ô¨Çows
in the CVDG (Section 5.3), we instrumented and logged
40.08% of the basic blocks in ArduPilot, introducing runtime,
storage, and energy overheads. We measure these overheads
using a real quadrotor RAV.
Runtime Overhead We measure the execution time of the
40 soft real-time tasks in ArduPilot during 30-minute Ô¨Çights
with twenty random and different Ô¨Çight operations, with and
without MAYDAY. The execution frequencies of the ArduPi-
lot tasks vary, from 0.1 Hz to 400 Hz. The results are shown
in Fig. 12, with each task‚Äôs average execution time and its soft
real-time deadline (deÔ¨Åned in ArduPilot) in log scale.
The results show that MAYDAY does increase the task exe-
cution time. Relative to the execution time without MAYDAY,
the increase ranges from 8% to 170% However, comparing
to the soft real-time deadline of each task, the increase (i.e.,
the increment/deadline ratio) is small, ranging from 0.02%
to 14.0% and averaging at 3.32%. As expected, our selec-
tive instrumentation method tends to impose higher overhead
on functions that frequently access control variables (e.g.,
update_GPS and run_nav_updates) and lower overhead on
functions that do not.
We further breakdown the logging overhead between log
generation (e.g., program path encoding) and I/O (writing to
USENIX Association
29th USENIX Security Symposium    925
-100010020030040006000120001800024000Velocity (cm/s)·à∂ùëüùë•(ùë°)·à∂ùë•ùë•(ùë°)Control Loop Iteration·à∂ùëöùë•(ùë°)Initial DigressionBugTrigger-500-300-10010030050006000120001800024000Control Loop Iteration·à∑ùëüùë•(ùë°)·à∑ùë•ùë•(ùë°)Acceleration (cm/s2)Investigated Cases3432505012484894174693448252795279435143084084408444515425110100100010000100000Case1Case2Case3Case4Case5Case6Case7Case8Case9Case10MAYDAYBaseline# of Basic Blocks(Log-scaled)0.72%0.71%0.95%0.28%1.11%1.18%0.95%0.22%0.92%0.13%Figure 12: Runtime overhead of MAYDAY: average execution time of soft real-time tasks with and without MAYDAY in log scale.
While MAYDAY introduces runtime overhead, it still meets the real-time requirement without missing deadlines.
SD card), as shown in Table 5. With a 400 Hz control loop
frequency, MAYDAY‚Äôs logging takes 7.6% of the time in one
iteration ‚Äì 190.72 ¬µs in total. We note that such runtime Ô¨Åne-
grain program tracing is feasible, thanks to the intrinsically
low control frequency of cyber-physical systems, relative to
that of their controller CPUs.
Table 5: Logging overhead breakdown.
Average Latency / Iteration (¬µs) Breakdown (%)
Log generation
Log I/O
Logging total
37.22
153.5
190.72
19.71
81.29
100
Storage Overhead We measure MAYDAY‚Äôs log data gen-
eration rate and volume during the 30-minute experiment.
The average log generation rate is 742.8 KB/s: 15.4 KB/s for
ArduPilot‚Äôs existing vehicle control log and 717.4 KB/s for
our program execution log. The total log volume is no more
than 1.3 GB in 30 minutes, which is the typical maximum
Ô¨Çight time for many commodity RAVs, such as Navio2, DJI
Phantom 4 and Parrot Bebop2. Such a volume can be easily
accommodated by lightweight commodity storage devices
(e.g., our 64 GB SD card).
Battery Consumption MAYDAY consumes fairly small
amount of battery power, compared with the RAV motors. Our
quadrotor is equipped with four motors whose total power
consumption is approximately 147.5-177.5 Watts [58] exclud-
ing the computing board‚Äôs power consumption (2.5 Watts).
According to speciÔ¨Åcations, our sensor board consumes no
more than 0.65 Watt [14], and its main processor board con-
sumes a maximum of 5.0 Watts (less than 3.69% of the overall
power consumption), with other attached devices (e.g., SD
card) powered via the main processor board [10]. MAYDAY‚Äôs
power consumption is covered by the main processor board
and therefore an even smaller fraction of the overall power
consumption.
9 Discussion
Code and Log Protection We assume code integrity af-
ter instrumentation, log integrity, and log recover-ability in
MAYDAY. To achieve code integrity, we can apply content-
based integrity checking [55, 61] via remote attestation [18,
35]. We can also apply disk content integrity techniques [59]
for log integrity. To recover from log corruption, special Ô¨Åle
system techniques (e.g., journaling Ô¨Åle systems [25]) may be
applied.
To protect kernel and Ô¨Çight data recording (FDR) modules
at runtime, we could apply kernel hardening (e.g., SecVi-
sor [69], NICKLE [68], and nested kernel [30]) and persistent
data protection (e.g., InkTag [43]) techniques. However, many
of those techniques are not suitable for resource-constrained
RAV micro-controller platforms. Fortunately, there exist
lightweight memory isolation techniques [39, 50, 52] that can
protect security-critical modules (e.g., kernel and FDR) with
low overhead. In particular, MINION [50] can be readily de-
ployed with ArduPilot for memory access protection, even on
low-end micro-controllers with only an MPU (memory pro-
tection unit). Additionally, we could consider Date Execution
Prevention (DEP) [1] for thwarting code injection.
Log Volume Reduction We assume that the subject RAV
has enough storage space to store logs in light-weight, low-
cost devices such as commodity SD cards. However, future
control programs may generate a larger volume of logs due
to the complexity of their control algorithms and the fact
that MAYDAY must record Ô¨Åne-grain, reproducible program
execution paths/traces. Existing techniques reduce log size
by (1) compressing the entire log [73] or (2) identifying and
removing redundant log entries [53, 60]. Similar to (2), we
plan to leverage control- and program-level dependencies to
further reduce the log volume.
Scope of Applicability We clarify that, rather than being
a generic bug-Ô¨Ånding tool, MAYDAY specializes in Ô¨Ånding
RAV control-semantics bugs, which involve incomplete or
incorrect implementation of the underlying control theoreti-
cal model. As acknowledged in Section 2, there exist other
types of vulnerabilities in RAV systems, such as traditional
program vulnerabilities and vulnerabilities in physical com-
ponents (e.g., sensors). For physical attacks (e.g., sensor and
GPS spooÔ¨Ång), MAYDAY is fundamentally not suitable, as the
root cause of those attacks lies in the physical component (e.g.,
vulnerable sensing mechanism of a gyroscope device [70]),
not in the control program. Hence MAYDAY‚Äôs program exe-
926    29th USENIX Security Symposium
USENIX Association
7.85.312.55.331.85.65.65.64.96.2516.25.74.97.8555.45.95.25.25.25.39.68.512.54.85.131.87.85.4125.75.35.35.26.18.95.25.310.39.930.6641.36.87.26.96.395.424.910.36.110.46.16.48.27.3107.47.87.919.919.833.85.75.936.29613.86.67.49.1711.522.96.46.21307520016012050505075100501001009075100905090757550180110550550757535011030075752001001001001001001001101001000w/o MAYDAYw/ MAYDAYSoft Real-time DeadlineLog-scaled Task Execution Time ( Œºsec)cution trace analysis would not be necessary for detecting or
investigating physical attacks.
Fortunately, defenses against physical attacks exist and can
be deployed alongside with MAYDAY. Many sensor attacks
can be detected by checking the RAV control log [19] for
anomaly and inconsistency among sensors [70]. Physical sen-
sor spooÔ¨Ång attacks can be detected by cross-checking the
observed and expected controller states [28,34]. GPS spooÔ¨Ång
attacks can be detected by commodity hardware (e.g., u-blox
M8) and advanced techniques [41, 46]. Jamming attacks can
be defended against via existing solutions [57, 66].
More Robust Control Models We acknowledge that more
robust control models are technically possible and can make
the RAV more tolerant of disturbances and changes. For exam-
ple, a ‚Äúself-examining‚Äù control algorithm can be designed to
dynamically compute and verify the system‚Äôs stability proper-
ties, in response to every GCS command. As another example,
the PID control algorithm can be replaced by more advanced
ones such as the Linear-quadratic regulator controllers [62]
to better mitigate disturbances. However, such advanced con-
trol models are not yet widely adopted in commodity control
programs (e.g., ArduPilot and PX4).
More importantly, the program-level implementation of
advanced control theoretical models may still be buggy, due
to programming errors (e.g., wrong variable names, missing
parameter range checks, etc.) that MAYDAY is tasked to Ô¨Ånd
out. In other words, despite increasing robustness of RAV
control models, MAYDAY will continue to help debug their
implementation at the program level to avoid misuses or ex-
ploits.
10 Related Work
Postmortem Robotic Vehicle Investigation MAYDAY was
inspired in part by the well-established aircraft accident in-
vestigation practices based on recorded Ô¨Çight data. We Ô¨Ånd it
meaningful to establish a parallel practice of recording RAV
Ô¨Çight data, in preparation for in-depth investigation of RAV
accidents. OfÔ¨Çine log analysis is an established method to
investigate RAV operation problems. Based on Ô¨Çight logs
recorded, existing analysis tools [19, 29, 45] can visualize
sensor inputs, motor outputs, high-level controller states, and
Ô¨Çight paths in the logs. The visualization helps investigators
Ô¨Ånd the vehicle‚Äôs physical and mechanical problems, such as
sensor and motor failures and power problems. Some of these
tools (e.g., LogAnalyzer [19]) also examine the correctness
of some of the high-level controller states based on simple
range checks (e.g., ‚Äúfrom -45 to 45 degrees‚Äù for roll angle con-
trol), which can identify obvious problems without in-depth
analysis. DROP [29] detects injected malicious commands
based on the well-established DJI RAV framework. However,
it focuses on Ô¨Ånding a malicious command that appears only
at the GCS or on-board the RAV, without performing cross-
layer (i.e., from control and program) analysis. In comparison,
MAYDAY performs cross-domain trace-back to RAV accident
root causes by revealing the causality between physical im-
pacts and control program bugs.
Program-Level Root Cause Analysis Many root cause
analysis techniques based on execution logs have been pro-
posed to investigate program failures [49, 64, 76, 77], security
incidents [47, 54, 60] and for debugging [27, 56, 63].
Several solutions leverage program instrumentation to gen-
erate execution logs [63, 77]. On the other hand, there is a
large number of works that record OS events during runtime
and perform ofÔ¨Çine analyses to backtrack the provenance of
Advanced Persistent Threat (APT) attacks [47, 54, 60]. These
works leverage program execution partitioning [54, 60] and
system event dependency models [47, 54, 60] to identify at-
tack paths accurately in a large amount of log data from
long-running systems. Another line of work records com-
plete or partial execution until a program crashes and ana-
lyzes the logs to diagnose the root causes or reproduce the
errors [64, 77]. Some of these works [49, 76] leverage hard-
ware assistance [2] to log Ô¨Åne-grain program execution with
high efÔ¨Åciency. Guided by RAV control model and control
‚Äúmodel-to-program‚Äù mapping, MAYDAY achieves higher ac-
curacy and efÔ¨Åciency for control program debugging.
Some debugging techniques such as statistical debugging
techniques [27, 56] work by comparing the statistical code
coverage patterns in ‚Äúpassing‚Äù and ‚Äúfailing‚Äù runs. However,
bugs in control systems do not always induce obvious code
coverage difference, due to the iterative control-loop execu-
tion model, in which the same set of components (e.g., sensor
reading sampling and control output generation) is periodi-
cally executed, with or without a controller digression. As
such, for our target systems, they may not be as effective as
for non-control programs.
Runtime Assurance and Testing for Robotic Vehicle
Safety There have been signiÔ¨Åcant advances in ensuring
robotic vehicle operation reliability and safety to monitor
controller state digression [28, 34], violation of safety con-
straints [75] and memory safety [50]. Meanwhile, there have
been many software testing efforts that aim at bug detec-
tion [23,40,51,65,74]. Several techniques are proposed to Ô¨Ånd
erroneous behaviors of deep neural networks [65] and viola-
tion of safety constraints [23] for autonomous cars. Timperley
et al. [74] and RVFuzzer [51] introduced new testing methods
to characterize existing bugs and Ô¨Ånd control-semantic vulner-
abilities in robotic vehicles, respectively. Compared to these
runtime defense and off-line testing techniques, MAYDAY fo-
cuses on post-accident trace-back of control-semantic bugs,
based on off-line source code instrumentation, runtime log-
ging, and post-accident log analysis. He et al. [40] proposed
a debugging system based on heuristics and an approximate
model generated by a system identiÔ¨Åcation technique. Un-
like MAYDAY, which is designed for post-accident investiga-
tion based on production runtime logs, the debugging system
USENIX Association
29th USENIX Security Symposium    927
in [40] is effective only in scenarios where one can interac-
tively monitor multiple program runs hence is more applicable
during program development.
11 Conclusion
It is challenging to investigate RAV accidents caused by
control-semantic bugs. We have presented MAYDAY, a
cross-domain RAV accident investigation tool that localizes
program-level root causes of accidents, based on RAV control
model and enhanced in-Ô¨Çight logs. Guided by a generic RAV
control model (CVDG), MAYDAY selectively instruments the
control program to record its execution aligned with exist-
ing control-level logs. Using the control- and program-level
logs, MAYDAY infers and maps the culprit control variable
corruption from control domain to program domain, and lo-
calizes the bug within a very small fragment of the control
program. Our investigation of 10 accident cases caused by
real control-semantic bugs demonstrates the effectiveness of
MAYDAY. Moreover, MAYDAY incurs low runtime and stor-
age overhead.
Acknowledgment
We thank our shepherd, Nathan Dautenhahn, and the anony-
mous reviewers for their valuable comments and sugges-
tions. This work was supported in part by ONR under Grants
N00014-17-1-2045 and N00014-20-1-2128. Any opinions,
Ô¨Åndings, and conclusions in this paper are those of the authors
and do not necessarily reÔ¨Çect the views of the ONR.
References
[1] Exec shield, 2005. https://static.redhat.com/legacy/f/pdf/
rhel/WHP0006US_Execshield.pdf.
[2] Processor tracing, 2013.
https://software.intel.com/en-us/
blogs/2013/09/18/processor-tracing.
[3] SITL Simulator (ArduPilot Developer Team), 2014.
http:
//ardupilot.org/dev/docs/sitl-simulator-software-in-
the-loop.html.
drones