你可以把这些宏调用到自己的函数里，并让它们处在停用状态，直到你需要进行调试。
要启用它们时，请将debug_trace设定成任何非空值：
$ make debug_trace=1
正如第四章所说，这些追踪宏本身存在一些问题，不过仍然可用来追踪缺陷。
最后要介绍的具保护功能的编码技术，就是通过make变量让@命令修饰符的禁用更容
易进行：
QUIET：=
target:
S(QUIET）some command
---
## Page 262
252
第十二章
使用此技术时，如果想着到安静模式命令的执行，你可以在命令行上以如下的方式重新
定义QUIET：
Smake QUIET
调试技术
这一节将会探讨一般的调试技术与相关主题。最后你会觉得，调试就好像是一个装了各
我也是靠着它们来进行调试的，或许它们也能协助你。
3.80版中一个非常恼人的缺陷是，当make汇报makefile中的问题时还会包含一个行号，
我发现那个行号通常是错的。我并未调查出是否此问题是由于引人文件、多行变量赋值
或用户自定义宏的关系，但是它的确是存在的。make所汇报的行号通常会比实际的行
号还大，在复杂的makefile中，我发现行号差了20行之多。
通常，查看make变量值的最简单方法，就是在工作目标的执行期间输出它。尽管使用
工作目标，但是必须多费一番工夫。下面是一个简单的debug工作目标：
debug:
$（forv,s（v)，\
$（warning $v=$（$v)))
要使用此功能，只需要在命令行上将一份需要输出的变量的列表赋值给变量V以及指定
debug工作目标：
$makeV=*USERNAME SHELL*debug
makefile:2:USERNAME=Owner
makefile:2:SHELL =/bin/sh.exe
make:debug is up to date.
如果你觉得这样很麻烦，只要使用MAKECMDGOALS就可以避免对变量V进行赋值的动作：
:bnqap
$（forv.$（V）$（MAKECMDGOALS），\
S（if $（filter debug,Sv).,S（warning Sv=S($v))))
现在，你只需要在命令行上直接指定需要输出的变量即可。但是我并不建议使用这个技
术，因为当make的警告信息指出它不知道如何更新变量时（因为它们是以工作目标的
形式出现在命令行上的），你可能会产生混淆：
$make debug PATH SHELL
makefi1e:2:USERNAME=Owmer
---
## Page 263
makefile的调试
253
makefile:2: SHELL =/bin/sh.exe
make:debug is up to date.
make:***No rule tomake target USERNAME.Stop.
我在第十章曾简单提到过，使用开启调试功能的shell可协助我们了解make在后台所进
行的活动。尽管make在执行命令之前会输出命令脚本中的命令，但是它并不会输出
she11函数中所执行的命令。通常这些命令是既微妙且复杂的，尤其是因为它们可能会
被立即执行或是延后执行（如果它们出现在递归变量中）。查看这些命令如何执行的一
个方法，就是要求subshell启用调试的功能：
DATE:=$（shel1 date +&F)
OUTPUT_DIR = Out-S(DATE)
$(OUTPUT_DIR))
all::
如果运行时指定了sh的调试选项，我们将会看到：
$make SHELL-"sh -x"
+date+F
.t-s0-ooz-no p-.].+
+mkdir-p out-2004-05-11
这么做，你不仅可以看到make的警告信息，也可以看到额外的调试信息，因为开启调
试功能的shell还会显示变量和表达式的值。
本书所举过的许多范例都用到了嵌套层极深的表达式，比如下面这个用来在Windows/
Cygwin系统上检查PATH变量的表达式：
s(if $(findstring /bin/,
$(firstword
$ (wildcard
$（addsuffix /sortS(if S(COMSPEC),.exe).
S（subSt：，，$（PATH））)))）.
$（error Your PATH is wrong,c:/usr/cygwin/bin should\
precedec:/WINDOWS/system32))
要对这些表达式进行调试并没有什么好办法。一个可行的办法就是将它们拆开，输出每
个子表达式（subexpression）：
$（warning $（subst:,,S（PATH））)
$（warning /sortS（if $（COMSPEC),.exe))
$（warning S（addsuffix/sort$（if $(cOMSPEC),.exe),
S（Subst ：,，S（PATH）））)
1
S(warning S(wildcard
S（addsuffix/sort$（if $(cOMSPEC),.exe),
$（Subst:，，$（PATH)))})
---
## Page 264
254
第十二章
尽管这有点烦人，但是在没有调试器可用的状况下，这或许是确定各个子表达式值的最
好办法（有时是唯一的办法）。
常见的错误信息
3.81版的GNUmake在线使用手册列有make的错误信息以及它们产生的原因。我们在
此只会介绍若干最常见的错误。此处所提到的问题中的部分并非完全是make的错误，
比如命令脚本中的语法错误，但是它们仍然是开发人员常会遇到的问题。至于完整的
make错误列表，请参考make在线使用手册。
make所输出的错误信息具有如下的标准格式：
makefile:n:***message.Stop.
或：
make:n:***message.Stop
makefile部分是发生错误的makefile或引l人文件的名称，下一个部分是发生错误的行
号，接着是三个星号，最后是错误信息。
请注意，make的工作就是运行其他的程序，如果发生错误，即使问题出在你的makefile
上，也非常可能会让人觉得错误是来自其他程序。例如，shell发生错误有可能是命令脚
本形式不正确的结果，编译器发生错误有可能是因为命令行参数不正确。找出错误信息
产生自哪个程序，是你解决此问题时所必须进行的第一项工作。幸好，make的错误信
息相当具有说明性。
语法错误
这些通常是打字上的错误：漏掉圆括号、以空格代替跳格等。
make的新用户最常会遇到的一个错误，就是漏掉变量名称的圆括号：
foo:
for fin $SOURCES:\
op
done
这可能会使得make把SS扩展成空无一物、而且shell只会以值为OURCES的f执行循
环一次。你可能会看到如下适当的shell错误信息：
OURCES:No such file or directory
---
## Page 265
makefile的调试
255
不过也可能看不到任何信息，这取决于你处理f的方式。所以，别忘了为你的make变
量加上圆括号。
missingseparator
如下的错误信息：
makefile:2:missing separator.Stop
或：
makefile:2:missing separator (did you mean TAB instead of 8 spaces?).Stop.
通常代表你的命令脚本以空格代替了跳格。
以文字来解释的话，就是make想要查找一个make分隔符，比如：、=或一个跳格符，
但是找不到。它所找到的是它不了解的东西。
commandscommencebeforefirsttarget
跳格符的问题又出现了！
此错误似乎通常会出现在makefile的中间。make将会尽可能消除此模糊不清的状态，但
如果该文本行无法被确定为变量赋值、条件表达式或多行宏定义，make就会认为这代
表命令放错地方了。
unterminatedvariablereference
这是一个简单但常见的错误，代表你没有为变量引用或函数调用加上适当数目的右圆括
号。当函数调用和变量引用嵌套很多层时，make文件看起来很像Lisp！使用能够检查
圆括号是否完整的编辑器，比如Emacs，是避免此类错误最可靠的方法。
命令脚本中的错误
脚本中有三种常见的错误：在多行命令中漏掉一个分号，一个不完整或不正确的路径变
量，或是一个“执行时会遇到问题的”命令。
的说明。
当shell无法找到foo命令时，将会显示如下的典型错误信息：
---
## Page 266
256
第十二章
bash:foo:command not found
这表示shell已经搜索过PATH变量中的每个变量，但是找不到相符的可执行文件。要修
正此错误，你必须更新你的PATH变量，它通常被放在你的.profile文件（Bourneshell）、
bashrc文件（bash）或.cshrc文件（Cshell）中。当然，它也有可能设定在makefile文
件中的PATH变量里，并且从make导出PATH变量。
最后，当shell命令执行失败的时候，它会以非零的结束状态终止执行。在此状况下，make
将会以如下的信息汇报此错误：
Smake
touch/foo/bar
touch:creating/foo/bar:No such file or directory
make:***[all] Error1
此处执行失败的命令是touch，它会输出自已的错误信息以说明此状态。下一行是make
的错误摘要。执行失败的makefile工作目标会被显示在中括号里，后面还会跟着运行失
败的程序的结束值。如果程序结束运行是因为信号的缘故，make将会输出比较详细的
信息，而不会只显示非零的结束状态。
并请注意，因为@修饰符而安静执行的命令也会执行失败。在此状况下，所显示的错误
信息好像到处都是。
不管是以上哪种状况，错误信息皆来自make所运行的程序，而不是make本身。
NoRuletoMakeTarget
此信息有两种形式：
make:***No rule to make target xxx.Stop.
以及：
make:***No rule to make target xx, needed by YYY. Stop.
这代表make判断文件XXx需要更新，但是make找不到执行此工作的任何规则。在放
弃和输出此信息之前，make将会在它的数据库中搜索所有的隐含和具体规则。
此项错误的理由可能有三个：
·你的makefile漏掉了更新此文件所需要的一个规则。在此状况下，你必须加人描述
如何建立此工作目标的规则。
·在makefile中打错了字。不是make找错了文件，就是更新此文件的规则指定了错
---
## Page 267
makefile的调试
257
误的文件。因为make变量的使用，你很难在makefile中发现打错字的问题。有时
候，要确定复杂文件名的值是否正确唯有将它输出：你可以直接输出变量，或是查
看make的内部数据库。
这个文件应该存在，但是make就是找不到它，可能是因为把它漏掉了，或是因为
make不知道要到哪里找它。当然，有时make是绝对正确的，文件缺失的原因或许
是你忘了将它从CVS调出。较常见的状况是，make找不到源文件只是因为文件放
错地方了。有时是因为源文件放在独立的源文件树中，或是文件产生自另一个程序
且所产生的文件放在二进制文件树中。
OverridingCommandsforTarget
make只允许一个工作目标拥有-个命令脚本（双冒号规则除外，但是很少使用）。如果
一个工作目标被指定了一个以上的命令脚本，make将会输出如下的警告信息：
makefile:5:warning:overriding commands for target foo
它也可能会显示如下的警告信息：
makefile:2:warning:ignoring old commands for target foo
第一个警告信息指出，make在第5行找到了第二个命令脚本；第二个警告信息指出，位
于第2行的最初命令脚本被覆盖掉了。
在复杂的makefile中，一个工作目标通常会被定义许多次，每一次都会加人它自已的必
要条件。这些工作目标中通常会有一个被指定命令脚本，但是在开发或调试期间，你很
容易会加入另一个命令脚本而忘记这么做会覆盖掉现有的命令脚本。
例如，我们可能会在一个引入文件中定义一个通用的工作目标：
建立一个jar文件。
S(jar_file):
这使得其他的makefile可以加人自已的必要条件。然后我们可能会在某个makefile文件
中这么做：
#为jar的建立设定工作目标并且加入必要条件
jar_file =parser.jar
S(jar_file):S(class_files)
如果我们不小心将一个命令脚本加入此makefile，make可能会产生overriding的警告信
息。
---
## Page 269
第三部分
附录
最后一个部分所包含的信息并非本书的重点所在，不过在某些特殊的状况下你会发现它
很有用。附录一列出了Gnumake的命令行选项。附录二把make作为一般用途的程序
语言来看，探讨数据结构与算术运算，你将会发现它很有趣而且可能很有用。
---
## Page 271
附录一
运行make
GNUmake拥有一组令人印象深刻的命令行选项。大部分的命令行选项都包含了短和长
两种形式。短式选项就是一个破折号后面跟着一个字母，而长式选项就是双破折号之后
跟着被破折号隔开的单词。它们的语法分别如下所示：
-oargument
--option-word=argument
是键人make--help。
--always-make
-B
假设每个工作目标皆尚未更新，都需要执行更新的动作。
--directory=directory
-Cdirectory
在搜索makefile或执行任何工作之前将当前目录变更为所指定的目录。这也会将
CURDIR变量设定为directory。
--environment-overrides
-e
当这个选项被使用时，环境变量的值将会覆盖makefile文件中同名变量的值。在