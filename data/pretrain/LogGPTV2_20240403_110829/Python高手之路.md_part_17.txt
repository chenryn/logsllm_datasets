## Page 128
熊猫爱中国www.xiongmaoi.com
反转的方式创建一个包装器函数：它修改收到的参数而不是修改函数的行为。
要返回繁复的模式，为每个需要的key 编写一个新的函数定义。我们真的需要这样做吗？
显的，如果需要超过一行代码则不能通过 lambda 传入 key 函数。在这种场景下，则又需
42的数，则需要定义一个合适的函数而不是以内联（in-line）的方式在first中调用。
每次想要检查不同的条件时将需要重写一个完整的新函数：
早在 Python中引入实际是为了给函数式编程函数提供便利，如 map（)和 filter（），否则
否满足条件。
示例8.3使用first
functools·partial是以更为灵活的方案替换lambda 的第一步。它允许通过一种
尽管lambda在帮助我们避免此类问题时是有用的，但它仍然是有问题的。首先也最明
你可能已经注意到，在本章相当一部分示例中我们使用了lambda 表达式。lambda 最
def greater_than(number,min=0):
from first import first
from functools import partial
这段代码和前面的例子功能相同，但更加难以处理：如果想要获得序列中第一个大于
first([-1,0,1, 2], key=greater_than_zero)
from first import first
import operator
参数 key 可以用来指定一个函数，接收每个元素作为参数并返回布尔值指示该元素是
>>> first([0, False, None, [],(), 42])
>>> from first import first
(>> first([-1, 0, 1, 2])
42
return number > min
returnnumber>0
本电子书仅限学习交流使用，请勿用于商业用途
8.3函数式，函数的，函数化
121
---
## Page 129
熊猫爱中国www.xiongmaoi.com
①曾经计划在Python3中移除，但是最终没有。
因为尽管 Python 本身提供了这些函数，但我还是看到很多程序员试图实现自己的版本。
递的参数会被赋值给b。所以它运行起来和最初的例子完全一样，不需要使用 lambda 或其
operator.le(a，b)接收两个数并返回第一个数是否小于等于第二个数。这里向
他额外的函数。
数，假如 Python 中有内置的这种比较函数呢？事实证明，operator 模块就是我们要找的。
个函数并利用 functools.partial 根据需要针对给定的某个场景进行自定义。
函数和期望的最小值min，就可以得到一个min 设定为42的新函数。换句话说，可以写一
似，但是可以指定要比较的值。在这个例子中，我们向 functools.partial传入我们的
 functools.partial 在替换 lambda 时是很有用的，而且通常被认为是更好的选择。
122
另一方面，functools.partial 可以围绕原函数进行很好的封装。
在 Python语言中 lambda 被看做是一种非常规方式,因为它将函数体限定为一行表达式?。
注意
在这个例子中，尽管需求严格限定但还是需要两行代码。例子中需要做的只是比较两个
first([-1, 0, 1, 2], key=partial(greater_than, min=42))
·chain（*iterables）依次迭代多个iterables但并不会构造包含所有元素的中
Python 标准库中的itertools 模块也提供了一组非常有用的函数，也很有必要记住。
这里我们看到，functools.partial也支持位置参数。在这个例子中，
默认情况下，新的 greater_than 函数功能和之前的 greater_than_zero 函数类
first([-1, 0, 1, 2], key=partial(operator.le, 0))
from first import first
from functools import partial
import operator
combinations（iterable，r)从给定的iterable 中生成所有长度为r 的组
间列表。
第8章函数式编程
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 130
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
免使用lambda。
示例8.4结合itertools.groupby 使用operator 模块
operator 能够覆盖通常程序员依赖lambda 表达式的大部分场景，如示例8.4所示。
在这个例子中，也可以写成lambda x：x['foo'］，但使用operator 可以完全避
[('bar',[]),('baz',['y':43,'foo′:'baz'}1)]
>>> import itertools
这些函数在和operator 模块组合在一起时特别有用。当一起使用时，itertools 和
[('bar', ),('baz',>>list(itertools.groupby(a,
>
>>
count（start，step）创建一个无限的值的序列，
itemgetter('foo')))]
中的元素。
product（*iterables）返回iterables 的笛卡儿积的可迭代对象，但不使用嵌
permutations(iterable[，r］)返回 iterable 中r个元素的所有组合。
groupby(iterable，keyfunc)根据keyfunc 函数返回的结果对元素进行分组
predicate 描述的那些元素。
dropwhile(predicate,
cycle(iterable)重复的遍历 iterable 中的值。
data 中返回 selectors 中对应为真的元素。
compress（data，selectors）对 data 应用来自 selectors 的布尔掩码并从
_grouperobject at 0xb00110>)l
套的for循环。
并返回一个迭代器。
importoperator
a=[H'foo′:'bar'),(’foo':'bar′,'x':42), ('foo′:'baz'，'y':43}]
本电子书仅限学习交流使用，请勿用于商业用途
iterable)过滤iterable 中的元素，丢弃符合
operator.itemgetter('foo')))
8.3函数式，函数的，函数化
从 start 开始，步长为 step。
123
---
## Page 131
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 132
熊猫爱中国www.xiongmaoi.com
象在其body 属性中包含一组待求值的语句或者表达式。它通常表示这个文件的内容。
ast.dump 模块整个转储，针对这个例子如图9-1所示。
抽象语法树。要做到这一点，Python 的 ast 模块就可以满足需要。
value=Num(n=42))])"
示例9.1将Python代码解析成抽象语法树
造仍然是很有意义的。
如此，Python 作为一门编程语言，要掌握它的用法，了解并理解Python 的一些深层次的构
建的。
包括 Python 语言。作为Python 自己的抽象语法树，它是基于对Python 源文件的解析而构
第9章→
关于 Python 的这个部分并没有太多的文档，而且刚开始看的时候并不容易理解。尽管
很容易猜到，ast.Assign 对象表示赋值，在Python 语法中它对应=。Assign 有一组目
抽象语法树的构建通常从根元素开始，根元素通常是一个 ast.Module 对象。这个对
ast.parse 函数会返回一个_ast.Module 对象，作为树的根。这个树可以通过
"Module (body=[Assign(targets=[Name(id='x', ctx=Store()) ],
>>> ast.parse
>>>importast
抽象语法树（Abstract Syntax Tree，AST）是任何语言源代码的抽象结构的树状表示，
>>> ast.dump(ast.parse("x = 42"))
>>> ast.parse("x =42")
抽象语法树
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 133
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
示例9.2使用Python抽象语法树的Helloworld
了，不推荐这种方法。但是用起来还是挺有意思的。
函数是支持抽象语法树的。
标，以及一个要赋的值。在这个例子中只有一个对象ast.Name，表示变量x。值是数值 42。
环境下设置它们其实没多大意义，因为这里并没有解析任何源代码，但用来回查生成抽象
 lineno 和 col_offset 表示用于生成抽象语法树的源代码的行号和列偏移量。在当前
nl=True)
126
注意
hello world
>>> code = compile(module, ', 'exec')
>>> module = ast.Module(body= [print_call])
>>> print_call = ast.Print(values=[hello_world], lineno=l, col_offset=l,
>>> hello_world = ast.Str(s='hello world!', lineno=1, col_offset=1)
让我们用Python的抽象语法树写一个经典的"Helloworld!"。
通过 ast 模块中提供的类可以手工构建抽象语法树。显然，这么写 Python 代码太麻烦
>>>eval(code)
42
>>>x
 at 0x111b3b0, file "", line 1>
>>> compile(ast.parse("x = 42"), '', 'exec')
抽象语法树能够被传入 Python 并编译和求值。作为 Python 内置函数提供的 compile
第9章抽象语法树
Module
body
本电子书仅限学习交流使用，请勿用于商业用途
targets
Assign
value
图9-1
idctx
Name
Num
n
Store
---
## Page 134
熊猫爱中国www.xiongmaoi.com
示例9.3为加法修改所有的二元运算
动态修改代码很容易。为加法修改所有的二元运算如示例9.3所示。
NodeTransformer,
树来解析字符串并生成代码。这正是9.1节中将要讨论的Hy项目。
右移（>>）等，ast.cmpop 用来定义比较运算符。
import 等。它们都继承自 ast.stmt。表达式涵盖的类型包括lambda、number、yield、
易获得。
解决这个问题。
Python 拒绝编译任何不提供此信息的抽象语法树对象，这也是我们在这里传入一个假的值
语法树的代码的位置时比较有用。例如，在 Python 生成栈回溯时就比较有用。不管怎样，
eval(compile(tree,l','exec'))
ast,fix_missing_locations(tree)
tree=ast.parse("x=1/3")
如果需要遍历树，可以用 ast.walk 函数来做这件事。但 ast模块还提供了
很容易联想到有可能利用抽象语法树构造一个编译器，通过构造一个 Python 抽象语法
还有其他一些分类，例如，ast.operator 用来定义标准的运算符，如加（+）、除（/)、
class Replacer
import ast
首先需要考虑的两个分类是语句和表达式。语句涵盖的类型包括 assert（断言）、赋
抽象语法树中可用的完整对象列表通过阅读_ast（注意下划线）模块的文档可以很容
def visit_BinOp(self, node):
return ast.BinOp(left=node.left,
一个可以创建其子类来遍历抽象语法树的某些节点的类。因此用它来
On(ast.NodeTransformer):
right=node.right)
op=ast.Add(),
本电子书仅限学习交流使用，请勿用于商业用途
第9章抽象语法树
127
---
## Page 135
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
①如果还没有，值得考虑一下。
将给出一个标准的 REPL（Read-Eval-Print Loop）提示符，从这里可以同解释器进行交互。
关系类比。Hy完全可以单独写本书来讲，所以本节只是稍作介绍。
树。因此它同 Python 生态系统完全兼容。可以将其与 Clojure（http://clojure.org/）同Java 的
这件事。它是Lisp 的一个变种，可以解析类Lisp 语言并将其转换为标准的 Python 抽象语法
9.1
eval。与 eval 不同,ast,literal_eval 不允许输入的字符串执行任何代码。比eval
更安全。
如果需要对 Python 的字符串进行求值并返回一个简单的数据类型,可以使用 ast,literal_
提示
128
.print(ast.dump(tree) )
#hy
如果你已经写过Lisp 代码?，Hy 语法和它看起来非常类似。安装之后，运行 hy解释器
hy 0.9.10
初步了解抽象语法树之后，可以畅想一下为 Python 创建一种新的语法，并将其解析并
Module(body=[Assign(targets=[Name(id='x', ctx=Store()) ],
0.33 33333333333333
Module(body=[Assign (targets=[Name(id='x, ctx=Store()) ],
执行结果如下：
print(x)
eval(compile(tree, '',
print(ast.dump(tree))
ast.fix missing_locations(tree)
tree = ReplaceBinOp().visit(tree)
print(x)
Hy
第9章抽象语法树
value=BinOp(left=Num(n=1), op=Add(), right=Num(n=3) ))])
value=BinOp(left=Num(n=1), op=Div(), right=Num(n=3)))1)
本电子书仅限学习交流使用，请勿用于商业用途
'exec'))
---
## Page 136
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
赏一下 cond是怎么做的。
以及用来返回传入参数和×的和的一个方法。
得的启发。
树转换为 Python 抽象语法树。
容易解析成树，因为每一对圆括号都可以表示成列表树的一个节点。需要做的仅仅是将Lisp
函数。
参数。因此，上面的代码相当于Python 中的1+1。
通过 defclass 结构可以支持类定义，这是从 CLOS（Common Lisp ObjectSystem）获
Hy 还包括更多高级结构和宏。如果想在 Python 中拥有 case 或 switch 语句，可以欣
'4efa60f2-23a4-4fc1-8134-00f5c271f809