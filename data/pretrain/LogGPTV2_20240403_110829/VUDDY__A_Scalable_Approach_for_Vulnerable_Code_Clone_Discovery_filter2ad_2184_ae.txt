7
1
2
sax->sax25_family = AF_NETROM;
skb_copy_from_linear_data_offset(skb, 7, sax->
sax25_call.ax25_call,
AX25_ADDR_LEN);
msg->msg_namelen = sizeof(*sax);
}
skb_free_datagram(sk, skb);
release_sock(sk);
Listing 5: Patch for CVE-2013-7266.
sax->sax25_family = AF_NETROM;
skb_copy_from_linear_data_offset(skb, 7, sax->
sax25_call.ax25_call,
AX25_ADDR_LEN);
3
4 + msg->msg_namelen = sizeof(*sax);
5
6 - msg->msg_namelen = sizeof(*sax);
7 -
8
skb_free_datagram(sk, skb);
release_sock(sk);
}
9
C. False negative
Table IV shows the number of unique ﬁndings of VUDDY
and ReDeBug, which represent the false negatives of each
605
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:17 UTC from IEEE Xplore.  Restrictions apply. 
other. In terms of false negatives, VUDDY and ReDeBug are
complementary. Owing to the abstraction, VUDDY was able to
ﬁnd 25 vulnerable code clones in which data types, parameters,
variable names, and function’s names were modiﬁed. However,
ReDeBug was not resilient to such changes. One of the cases
is the function in Listing 7, which should have been patched
by Listing 6 but not. While the security patch is not applied,
a const qualiﬁer is inserted in line 1 of Listing 7. ReDeBug
tries to detect the window consisting of lines 1 to 6, and
fails because of const. However, VUDDY is capable of
detecting such variant of vulnerable function because both
const wlc_ssid_ and wlc_ssid_t are replaced with
DTYPE after applying abstraction.
Listing 6: Patch for CVE-2016-2493.
1
2
ssid = (wlc_ssid_t *) data;
memset(profile->ssid.SSID, 0,
sizeof(profile->ssid.SSID));
3
4 + profile->ssid.SSID_len = MIN(ssid->SSID_len,
DOT11_MAX_SSID_LEN);
memcpy(profile->ssid.SSID, ssid->SSID, ssid->
SSID_len);
profile->ssid.SSID_len = ssid->SSID_len;
break;
5
6
7
Listing 7: Vulnerable function in kernel/drivers/net/wire-
less/bcmdhd4359/wl cfg80211.c
1 ssid = (const wlc_ssid_t *) data;
2 memset(profile->ssid.SSID, 0,
sizeof(profile->ssid.SSID));
3
4 memcpy(profile->ssid.SSID, ssid->SSID, ssid->
SSID_len);
5 profile->ssid.SSID_len = ssid->SSID_len;
6 break;
The 21 cases VUDDY missed but ReDeBug detected re-
sulted from precisely the same reason addressed in sub-
section VII-C. ReDeBug detected unpatched functions even
if lines other than security patch addresses were modiﬁed,
because it utilizes a line-level granularity. However, we empha-
size again that these cases can be detected by VUDDY if we
reinforce our vulnerability database by adding older snapshots
of vulnerable functions.
After examining the wide discrepancies in speed and ac-
curacy between VUDDY and ReDeBug, we concluded that
VUDDY delivers results that are much more precise and
accomplishes this with faster speed.
IX. CASE STUDY
Taking advantage of
the scalability and accuracy of
VUDDY, we could investigate a wide range of programs in a
relatively short period of time. In this section, we evaluate the
practical merits of VUDDY by demonstrating vulnerabilities
detected in real-world programs.
According to the scale and cause of clones, we classify
clone-induced vulnerabilities into the following three cate-
gories: Library reuse; Kernel reuse; and Intra-project code
reuse cases. The cases we introduce show that software is
often affected by old vulnerabilities blended into their system
by code cloning.
A. Library reuse cases
In practice, library reuse takes place very frequently, be-
cause any software, small or large, can use libraries without
much restriction. For example, in the latest release of VLC
media player, an open source media player, at least 91 third-
party libraries (including very popular ones such as FFmpeg,
FLAC, LAME, libmpeg2, and Qt5) are used. Consequently,
many projects are prone to a wide range of vulnerabilities
attributable to the outdated libraries they use.
1) LibPNG and a mobile browser: The smartphone we
addressed in subsection IX-B is shipped with a built-in
web browser application based on the use of an outdated
LibPNG library. The version of LibPNG in the web browser
is 1.2.45, which was released in July 2011. VUDDY de-
tected that the ﬁx for CVE-2011-3048 (Heap-based buffer
overﬂow in LibPNG) is not applied in that version, leaving
the browser vulnerable. In Listing 8, the vulnerable function
named png_set_text_2 in pngset.c is described.
Listing 8: Snippet of vulnerable function in pngset.c of
LibPNG 1.2.45.
1 if (info_ptr->text != NULL)
2 {
3 png_textp old_text;
4 int old_max;
5 old_max = info_ptr->max_text;
6 info_ptr->max_text = info_ptr->num_text + num_text +
8;
7 old_text = info_ptr->text;
8 info_ptr->text = (png_textp)png_malloc_warn(png_ptr,
(png_uint_32)(info_ptr->max_text * png_sizeof(
png_text)));
9 if (info_ptr->text == NULL)
10 {
11 png_free(png_ptr, old_text);
12 return(1);
13 }
14 png_memcpy(info_ptr->text, old_text, (png_size_t)(
old_max * png_sizeof(png_text)));
15 png_free(png_ptr, old_text);
16 }
When memory allocation in line 8 fails, png_free
function is called without
restoring the prior states of
info_ptr->max_text, and info_ptr->old_text.
As a result, dangling pointers are generated. We could exploit
this vulnerability to accomplish denial of service through a
crafted PNG ﬁle.
This case is very alarming because a vulnerability which had
already been patched ﬁve years ago is still being distributed
through widely-used smartphones. After we reported this bug
to the manufacturers, they afﬁrmed that they will conduct a
dependency check and library update for the next release.
2) Expat library and Apache HTTPD: In the Apache HTTP
server, we discovered a vulnerable code clone of CVE-2012-
0876, which eventually turned out to be a zero-day vulnerabil-
ity. The latest stable release (2.4.23), and a few recent releases
(2.4.18 and 2.4.20) are affected. Apache HTTP server relies
on the Expat library for parsing XML ﬁles. Unfortunately,
the library that is currently being used by Apache HTTP
server is an outdated version, which is vulnerable to CVE-
2012-0876, a so-called Hash DoS attack. VUDDY detected
606
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:17 UTC from IEEE Xplore.  Restrictions apply. 
that expat/lib/xmlparse.c contained a code clone of a
vulnerable function retrieved from Google Android repository,
which allows attackers to cause a DoS attack through a crafted
XML ﬁle. Listing 9 shows part of the patches for CVE-2012-
0876, and Listing 10 is an excerpt of the vulnerable function
in Apache HTTP server, which can be triggered with a crafted
packet to cause DoS.
We could use a specially crafted XML ﬁle to trigger the
vulnerability, and force the Apache HTTP server daemon
to consume 100 % of CPU resources. We reported this
zero-day vulnerability, which could critically affect numerous
web services that run Apache HTTP server, and the Apache
security team conﬁrmed this vulnerability.
Listing 9: Patch for CVE-2012-0876 retrieved from Google
Android repository.
1
for (i = 0; i size; i++)
if (table->v[i]) {
2
3 - unsigned long newHash = hash(table->v[i]->name);
4 + unsigned long newHash = hash(parser, table->v[i]->
name);
5
size_t j = newHash & newMask;
Listing 10: Vulnerable function in httpd-2.4.23/srclib/apr-
util/xml/expat/lib/xmlparse.c (lines from 5428 to 5434) of
Apache HTTP server 2.4.23 which is still unpatched even
though the security patch was released in 2012.
1 ...for (i = 0; i size; i++)
2 if (table->v[i]) {
3
unsigned long newHash = hash(table->v[i]->name);
4
5
size_t j = newHash & newMask;
step = 0;...
B. Kernel reuse cases
One important characteristic of cases in which the kernel
is reused, is that these kernels usually lag behind the latest
kernel. This is very prevalent in the ecology of IoT devices
including Android smartphones, Tizen appliances, and Linux-
oriented operating systems such as Ubuntu. It often takes at
least half a year to develop their own operating system on the
basis of a certain version of Linux kernel, which eventually
leaves them (i.e., the IoT devices, OS distributions, and smart
appliances running the Tizen OS) subject to the vulnerabilities
reported during the period of development. In other words,
although the Linux kernel is constantly patched and updated,
devices inevitably lag behind the patching efforts of Linux
kernel developers.
The dirty COW vulnerability (CVE-2016-5195) is an excel-
lent example of a situation in which VUDDY can be effective,
because a vulnerable Linux kernel was reused in a smartphone.
This vulnerability was once discovered and ﬁxed by a Linux
kernel developer in 2005, but its ﬁx was reverted, thereby
nullifying the initial ﬁx. VUDDY detected the vulnerable clone
(see Listing 11) in the ﬁrmware of an Android smartphone
released in March 2016, and we successfully exploited the
vulnerable clone to gain root privilege of the smartphone run-
ning the examined ﬁrmware. If VUDDY had been employed to
ﬁnd known old vulnerabilities before the affected kernels were
released, Linux could have prevented such brutal vulnerability
from being propagated through a number of OS distributions
including those in Android smartphones which hold more than
half of the market share.
Listing 11: Vulnerable clone affected by Dirty COW
vulnerability found in the Android ﬁrmware.
1 ...}
2
if ((flags & FOLL_NUMA) && pte_protnone(pte))
goto no_page;
if ((flags & FOLL_WRITE) && !pte_write(pte)) {
pte_unmap_unlock(ptep, ptl);
return NULL;
}...
* reCOWed by userspace write).
*/
if ((ret & VM_FAULT_WRITE) && !(vma->vm_flags &
VM_WRITE))
*flags &= ˜FOLL_WRITE;
return 0;
3
4
5
6
7
8
9
10
11
12
13 }
We contacted the smartphone manufacturer3 to inform them
they
about our ﬁndings of the vulnerability. As a result,
immediately initiated a process to address the vulnerability.
C. Intra-project code reuse cases
Owing to our abstraction strategy, we detected an 8-year-
old vulnerability (CVE-2008-3528) which possibly is a zero-
day vulnerability, in the latest stable trees including versions
4.8.6, 4.7.10, and the LTS versions of the Linux kernel. Very
interestingly, although the original vulnerability was found in
ext2, ext3, and ext4 ﬁle systems of the kernel 2.6.26.5, and
patched in 2008 (Listing 12), the nilfs2 ﬁle system of which
the implementation is very similar (but differs in relation to
some identiﬁers) to that of ext2 has remained unpatched to
date. The problematic function named *nilfs_dotdot is
in linux/fs/nilfs2/dir.c.
Listing 12: Original patch of CVE-2008-3528 targeting
ext2 ﬁle system of Linux.
1 struct ext2_dir_entry_2 * ext2_dotdot (struct inode
*dir, struct page **p)
2 {
3 - struct page *page = ext2_get_page(dir, 0);
4 + struct page *page = ext2_get_page(dir, 0, 0);
5
ext2_dirent *de = NULL;
6
7
if (!IS_ERR(page)) {
Listing 13: Buggy function in nilfs2 ﬁle system of Linux.
1 struct nilfs_dir_entry *nilfs_dotdot(struct inode *
dir, struct page **p)
2 {
3
4
5
6
struct page *page = nilfs_get_page(dir, 0);
struct nilfs_dir_entry *de = NULL;
if (!IS_ERR(page)) { de = nilfs_next_entry( ...
The function described in Listing 13 is suspected to be
cloned from the implementation of the ext2 ﬁle system,
because ﬁle systems share a considerable amount of similar
characteristics. Even though the name of the function called at
line 3 of Listing 13 is different from that of the original buggy
3Name of this company and vulnerable smartphones are deliberately
anonymized for legal reasons.
607
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:17 UTC from IEEE Xplore.  Restrictions apply. 
of
The
function (ext2_get_page), this is detected by VUDDY
because as described in subsection IV-A-S2, we abstract the
function calls by replacing the names of the called function
with FUNCCALL.
contents
function ext2_get_page and
their
nilfs_get_page are also identical except
names and a few identiﬁers, and thus we attempted to
trigger the vulnerability in Ubuntu 16.04 which is built upon
kernel version 4.4. Surprisingly, we could trigger the “printk
ﬂoods” vulnerability which in turn causes denial of service,
by mounting a corrupted image of the nilfs2 ﬁle system.
We contacted a security ofﬁcer of Redhat Linux, and he
conﬁrmed that this vulnerability should be patched. This case
shows that VUDDY is capable of detecting unknown variants
of known vulnerability.
for
X. DISCUSSION
A. The use of function-level granularity
In this section, we discuss the reasoning behind selecting
the function level as the basis for clone detection, through a
theoretical and empirical analysis of time complexity, storage
use, and accuracy of detection. As a way of answering the
research question of “Which granularity is best for scal-
able and accurate vulnerability detection?” we parameterize
the granularity level, and observe the performance curve of
VUDDY.
1) Time complexity: Given a function F consisting of l
LoC, c characters per line on average, assume that we use
g lines as a granularity unit. Then, each processing window
will consist of g blocks, and the number of windows in F
will be l − g + 1. We can compute the cost of preprocessing
a function as the multiplication of the number of windows
by the preprocessing time per window. When preprocessing
a retrieved function, VUDDY conducts abstraction, normal-
ization, and length computation, and then applies the MD5
hash algorithm. However, the ﬁrst three operations require a
trivial amount of time relative to the MD5 hash computation,
of which the complexity is denoted as ax + b where x is
the number of input characters4. Thus, the Cost function is
approximated as follows:
Cost(g) = (#windows) ∗ (HashT ime/window)
2 + (acl + ac − b)g + b(l + 1)
= (l − g + 1) ∗ (a(cg) + b)
= −acg
(7)
(8)
(9)
This formula is empirically validated by measuring the time
VUDDY requires to preprocess functions of various lines of
code. As illustrated in Fig. 8, the cost function is parabolic,
peaking at g = 2/l. The minimum value of each graph is
attained when g = l, which means the least time is required
for any function when we take advantage of the function-
level granularity. Note that these properties are observed for
all functions in our vulnerability database, with sizes ranging
from 51 to 2526, but in consideration of the readability of the
graphs, we only plotted six representative functions.
4To the best of our knowledge, the time complexity of MD5 implementation
in Python Hashlib is not known. Therefore, we empirically measured the time
complexity in subsection VI-B to ﬁnd that it is linear to the length of input
plaintext.
608
)
s
m
n
i
(
t
s
o