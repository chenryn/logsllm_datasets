`@UniqueEntity` doesn't properly handle composite keys when one of them is a
related entity. The database throws `Integrity constraint violation: 1062
Duplicate entry` when trying to persist an entity with the same company and
name as an already existing one. Expected behavior is that `@UniqueEntity`'s
validator blocks persisting the (duplicate) entity. Here's such an entity to
illustrate the issue:
    /**
     * @ORM\Entity
     * @ORM\Table(name="my_user",
     *  uniqueConstraints={@ORM\UniqueConstraint(columns={
     *      "company_id", "name"
     *  })}
     * )
     * @UniqueEntity(fields={"company", "name"})
     */
    class MyUser {
        /**
         * @ORM\Column(name="id", type="integer", nullable=false)
         * @ORM\Id
         * @ORM\GeneratedValue(strategy="AUTO")
         */
        protected $id;
        /**
         * @ORM\ManyToOne(targetEntity="Company", inversedBy="myUsers")
         * @ORM\JoinColumn(name="company_id", referencedColumnName="id", nullable=false)
         * @Assert\NotNull
         */
        protected $company;
        /**
         * @ORM\Column(name="name", type="string", nullable=false)
         * @Assert\NotBlank
         */
        protected $name;
        // setters and getters omitted
    }