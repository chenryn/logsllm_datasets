readability.
The typical structure of self-defense mechanisms assumes that
environment investigation and execution termination are connected
by a common ancestor. We found that 93% of the self-defense
mechanisms in our analysis follow this structure (see Section 4).
In the following, we describe the details of the environment inves-
tigation and execution termination. We then explain challenges to
identifying self-defense mechanisms.
2.1 Environment investigation
The role of environment investigation is to obtain information
about the execution environment (e.g., the existence of a speciﬁc
ﬁle, package information), and decide whether the environment is
unsafe. For example, an app checks for device rooting by scanning
for the existence of the su binary or permission management apps
such as SuperSu. To check app integrity, an app may check for the
path of the Android application package (APK) ﬁle and its signa-
ture. To get information about the execution environment, the en-
vironment investigation calls environment information provider(s).
Thus, we can use the environment information provider(s) to locate
the environment investigation.
The environment information providers can be categorized into
Figure 1: Control ﬂow of a self-defense mechanism.
two types: Android APIs and Linux system calls. An app may use
speciﬁc Android APIs and system calls (mostly through C wrapper
functions) to retrieve information required to investigate the envi-
ronment, such as ﬁle paths of binaries or app packages. Based on
the survey of known techniques [1, 35], we selected the Android
APIs and system calls shown in Tables 1 and 2 as environment
information providers. However, because these APIs and system
calls can be called from parts other than self-defense mechanisms,
we only consider them as environment information providers when
additional conditions are satisﬁed, described in the tables.
2.2 Execution termination
If an environment investigation part detects a tampered environ-
ment, the common ancestor executes an execution termination to
prevent the app from executing in the environment. A common
way to abort the execution is to show an alert dialog with a button
to terminate the app. The alert dialog typically contains a warning
message that describes the reason for the termination. The warning
message contains speciﬁc keywords such as “rooted” and “forged”.
To reduce false negatives, we consider various keywords in English
and Korean. We also cover app termination that does not display
an alert dialog. For example, some apps directly kill the running
processes of themselves using Android APIs or exit() system
call. Some other apps launch the application uninstaller to uninstall
themselves from the device. Table 3 shows all execution termina-
tors found after analyzing our target ﬁnancial apps’ behaviors. Sim-
ilar to environment information providers, we consider the APIs or
the system call as execution terminators only when they meet the
terminating condition.
2.3 Challenges to locating self-defense mech-
anisms
Although self-defense mechanisms mostly follow the main exe-
cution path as shown in Figure 1, many self-defense mechanisms
contain extra steps that complicate the analysis. Therefore, even
if the environment investigation and execution termination parts
have their own characteristics, ﬁnding just one of the parts is not
enough to locate a self-defense mechanism. For example, syntacti-
cally searching for environment investigation alone is insufﬁcient
because these can be called for several reasons other than self-
defense mechanisms, even if they meet the conditions described
in Tables 1 and 2. For example, an app reads its package ﬁle not
only to check its integrity, but also to get resources. We need to
know if the call of an environment information provider leads to
the call of an execution terminator.
Finding and modifying only the execution termination part is not
sufﬁcient to bypass the self-defense mechanism because the branch
point between the execution termination part and the normal ex-
ecution path is located outside of the execution termination part.
Common AncestorEnvironment InvestigationExecution TerminationEnvironment Information ProviderExecution Terminator(1)(2)Safe?NoNormalApp FunctionYes: Android API or Linux system call(3)181Type
Environment information providers
Runtime.exec()
Android API
PackageManager.getPackageInfo()
How to check the device rooting using the API [2]
Run the su command
Find whether a root-related app is installed
Investigating conditions
The command name is “su”
The package name is related to device
rooting (e.g., eu.chainﬁre.supersu)
File.exists()
stat()
access()
open()
System call
opendir(), readdir(), chdir()
Investigate the existence of su binary and app packages
related to device rooting
The ﬁle name is “su” or APK ﬁle related
to the device rooting
Check the adbd process’ user ID
Examine every ﬁle and directory
The ﬁle name is “/proc/[pid]/status”
-
Table 1: Environment information providers for device rooting checks.
Type
Environment information providers
PackageManager.getPackageInfo()
Context.getPackageCodePath()
How to check the app tampering using the API [2]
Get the signature of an app package
Get the path of the app’s package ﬁle
Investigating conditions
The ﬂags include GET_SIGNATURES
-
Android API
File.()
ZipFile.()
RamdomAccessFile.()
System call
open()
Handling the app’s package ﬁle
The handled ﬁle is the APK ﬁle of the app
Member variable
ApplicationInfo.sourceDir
ApplicationInfo.publicSourceDir
The path of the app’s package ﬁle
-
Table 2: Environment information providers for the app integrity checks.
Since the branch point lies in the common ancestor, just skipping
execution terminators does not make the app enter the normal con-
trol ﬂow (Figure 1(3)). Therefore, we should modify the branch
point or the checking part in order to bypass the self-defense mech-
anisms.
In addition to the above difﬁculties to locate a self-defense mech-
anism, apps often employ extra steps beyond a single environ-
ment investigation and a standard execution termination as de-
scribed below. First, a common ancestor may log the result re-
turned from the checking part by using Android Logcat or by send-
ing it to an external server, as shown in Line 5 in Listing 1 (Fig-
ure 2(i)). These steps add more method calls between environ-
ment investigation and execution termination, making it difﬁcult
to ﬁnd causality between them. Second, the checking part may
communicate with an external server for the integrity check (Fig-
ure 2(ii)). For example, one possible way to check the app bi-
nary integrity is to send a hash value of the app’s APK ﬁle and
ask the server to verify it. Third, a common ancestor sometimes
calls more than one environment investigation as shown in Fig-
ure 2(iii). The common ancestor then gathers results from the
environment investigations and makes a decision. For example,
Listing 1 shows that AppCActivity.onResume() calls two
environment investigations: Lib0.check() and SecureMan-
ager.checkRooting(). These extra tasks make the analy-
sis of a self-defense mechanism complicated. In the next section,
we describe how we overcome these difﬁculties by exploiting the
causality between the environment investigation and the execution
termination.
3. ANALYSIS METHODOLOGY
This section describes a tool that we developed to locate the code
relevant to self-defense mechanisms in Android apps. In particular,
we focus on how our tool traces various indirect method calls and
native calls at runtime.
Figure 2: Control ﬂow of a self-defense mechanism with optional,
additional tasks. The tasks are presented as gray boxes.
3.1 Key Insight
To narrow down the code path to investigate, we can start with
ﬁnding known environment information providers or execution ter-
minators. However, searching for them separately is not efﬁcient
and often generates false positives. For example, a ﬁnancial app
that we analyzed contained approximately 30,275 methods on av-
erage and, therefore, false positives would signiﬁcantly slow our
analysis as each case needs to be manually examined.
The key insight for improving the accuracy of locating self-
defense mechanisms is using the causality between the environ-
ment information providers and the execution terminator in the con-
trol ﬂow graph recorded at runtime. To construct a call graph, we
perform the following steps. First, we record all the invoked (Java
method and native function) calls and returns while a target app
executes. While tracing, we record additional information to con-
nect indirect relationships between threads and Android compo-
nents and to identify environment information providers. Second,
when an execution terminator is called, we ﬂush the recorded data
into a ﬁle. Finally, we parse the records and ﬁnd common ances-
tors between the identiﬁed environment information providers and
Environment InvestigationCommon Ancestor(ii) Send the data to the serverExecution Termination(i) Log the result(iii) Environment Investigation 2Safe?NoNormalApp FunctionYes182Type
Execution terminators
AlertDialog.setMessage()
Android API
TextView.setText()
Toast.makeText()
Intent.setAction()
How to use to terminate an app [2]
Set a warning message for an AlertDialog
Set a warning message for a custom alert dialog
Set a warning message for a Toast message
Launch the application uninstaller
Process.killProcess()
System.exit()
Kill the app’s process
System call
exit()
Kill the app’s process in a native function
Terminating conditions
The message contains speciﬁc keywords
(e.g., “rooting,” “tamper,” “integrity”)
The package name to uninstall is that of the app
itself.
Process ID to kill is that of the app itself
-
-
Table 3: Execution terminators for self-defense mechanisms. System.exit() and exit() do not have a terminating condition because
they are only used to kill an app itself.
Recording method calls per thread. Using a similar approach as
in Compac [50] and the Method Trace function in Android Moni-
tor [34], we modiﬁed the Dalvik VM to record the method calls in
each thread. We modiﬁed a portable C implementation of mterp,
the interpreter that interprets and executes Dalvik bytecode. In par-
ticular, we focused on invoke and return instructions, which are
related to method invocations and returns, respectively. To record
the instructions, we ﬁrst allocated additional space in each thread to
store invocation and return histories. We also modiﬁed the portable
C code related to the instructions to record the method invocations
and returns in the additional space as shown in Figure 3(a).
Flagging relevant environment information provider calls.
While recording method calls, MERCIDroid ﬂags the calls for the
environment information providers, as described in Tables 1 and
2. MERCIDroid uses runtime arguments to check the investigat-
ing conditions. If the condition holds, MERCIDroid adds an extra
record between the method invocation and the method return to ﬂag
the method call as shown in Figure 3(b). Also, to ﬂag environment
information providers whose type is a system call, MERCIDroid
executes strace and parses the result.
Finding indirect relationships of method calls. Tracing direct
caller-callee relationships only is insufﬁcient to generate a call
graph that contains a self-defense mechanism. For example, a
thread that manipulates the UI must send a Message to the UI thread
using Handler.sendMessage(Message msg) [2]. Then,
in the UI thread, Handler.dispatchMessage(Message
msg) calls another method to handle the message.
In this
case, sendMessage(Message msg) and dispatchMes-
sage(Message msg) are not in a direct caller–callee relation-
ship. Thus, to link these two method calls, we need more informa-
tion.
To connect the indirect caller-callee relationships, MERCIDroid
allocates a unique ID to a message object that both the caller and the
callee use. MERCIDroid adds a unique ID to a Message object
such that we can link the method calls with a Message object by
checking its ID. To track interactions between Android app com-
ponents (Activity, Service, and Broadcast Receiver), MERCIDroid
adds a unique ID in an Intent object [2]. Figure 3(c) illustrates how
this added ID can be used to link the indirect method calls. Ap-
pendix A describes the list of indirect relationships in more detail.
Storing method call records. When an app is stopped by an exe-
cution terminator shown in Table 3, the system stores all the records
collected thus far in all threads in a ﬁle. With the collected data, we
can backtrace the control ﬂow from an execution terminator.
3.2.2 Constructing a call graph
We implemented a call graph generator which parses the records,
constructs a call graph including the aforementioned indirect rela-
Figure 3: Recording of method invocations in each thread. Each
method call/return is stored from the bottom to top (a). An envi-
ronment information provider that meets the condition is ﬂagged
(b). The indirect caller and callee are connected through an inter-
action ID (c).
the execution terminator, and locate the common ancestor that is
closest to the execution terminator.
We next explain the design and implementation of the steps nec-
essary to construct a call graph.
3.2 Tool Design and Implementation
In order to locate common ancestors between environment in-
formation providers and execution terminators, we need to track
caller-callee relationships across threads, components, and process
boundaries. MERCIDroid has two parts: 1) collecting control ﬂow
information by tracing calls at runtime; and 2) extracting a call
graph containing the methods related to a self-defense mechanism.
In this paper, we focus on using MERCIDroid to analyze ﬁnan-
cial app’s self-defense mechanisms, but MERCIDroid can also be
used for other purposes that can beneﬁt from identifying causality
between the system APIs.
3.2.1 Recording method calls at runtime
To record method calls of an app at runtime, we modiﬁed An-
droid 4.4.4. We focused on Dalvik Virtual Machine (VM), An-
droid Runtime that Android 4.4.4 uses because Android 4.4.4 is
still the most widely used version [7]. Higher versions of Android
use Android Runtime (ART), replacing Dalvik VM. However, the
underlying runtime does not affect our analysis. Since ART is com-
patible with Dalvik [5], most Android apps work on both runtimes.
We had only one ﬁnancial app that requires version higher than 4.4.
The modiﬁed system records method calls and indirect relation-
ships between threads and components as described in Figure 3.
> Handler.handleMessage()Interaction 1 Callee> Handler.dispatchMessage() Handler.sendMessage() Activity.onCreate() Application.onCreate()> ZygoteInit$MethodAndArgsCaller.run() File.exists()> MyClass.checkRooting()> Thread.run()(a)(a)(c)Thread 1 mainThread 2183tionships. Once a call graph is constructed, the generator extracts a
self-defense mechanism graph (SDMGraph), which contains only
the methods relevant for identifying the self-defense mechanisms.
The root node of the SDMGraph is the common ancestor of the exe-
cution terminator and the environment information provider(s). By
narrowing the scope of the methods to those in the SDMGraph, we
can manually disassemble and analyze a small number of methods
to ﬁnd one that we can modify to bypass the self-defense mecha-
nisms. We describe the construction process of an SDMGraph in
more detail in Appendix B.
3.2.3 Handling inter-process communication
Android components can communicate across different pro-
cesses. For example, an app can execute its service in a separate
process using the android:process manifest attribute. An app can
also request the self-defense mechanisms of a separate security app.
Android processes use Intent to execute an Android component in
another app, and Parcel to send a data to another process. There-
fore, we instrumented Intent and Parcel to trace between two pro-
cesses.
To capture inter-process communications, we parse collected
method calls from all the processes related to self-defense mech-
anisms. Therefore, when an execution terminator is called in one
process, the other processes should be aware of this event and ﬂush
the recorded methods into a ﬁle. To support this scenario, we added
a new system service, MERCIService, and when a process begins
execution, it registers itself with it. If one of the registered pro-
cesses is terminated by an execution terminator, MERCIService
triggers each registered process to store the records in a ﬁle.
4. APP ANALYSIS & BYPASS ATTACKS
This section shows the results of our analyses of selected An-
droid apps using MERCIDroid. We ﬁrst describe how we chose
the apps to analyze. Based on the observed characteristics of self-
defense mechanisms, we next describe the traits of self-defense
mechanisms and show how we actually bypassed them. We then
describe the security libraries used in the studied apps and present
an in-depth analysis of the top ﬁve popular libraries, demonstrating
how effectively our bypass attacks defeat the seemingly compli-
cated self-defense mechanisms employed by those libraries.
4.1 App Selection
We started with the top 400 apps in the “Finance, Free” category
of Google Play in the Republic of Korea, as of January 2016. To
cover a diverse set of apps from popular to infrequently used apps,
we randomly selected 200 apps from the 400 apps instead of se-
lecting top 200 apps. Note that analyzing ﬁnancial apps requires
setting up credit or bank accounts, thus we had to limit the number
of apps we analyzed. To ﬁnd apps that contain self-defense mech-
anisms, we went through the following steps. First, to ﬁnd apps