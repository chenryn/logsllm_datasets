a full system reboot to unload.
Tricky Filesystem-Stack Attachment and Detachment
The mechanics of how the filesystem stack attaches and detaches 
devices are extremely complicated, and developers must have a 
Evading EDR (Early Access) © 2023 by Matt Hand
Filesystem Minifilter Drivers   105
substantial amount of arcane knowledge to ensure that their driver can 
appropriately handle odd edge cases.
Indiscriminate IRP Processing
Legacy filter drivers are responsible for processing all Interrupt Request 
Packets (IRPs) sent to the device stack, regardless of whether they are 
interested in the IRPs or not.
Challenges with Fast I/O Data Operations
Windows supports a mechanism for working with cached files, called 
Fast I/O, that provides an alternative to its standard packet-based I/O 
model. It relies on a dispatch table implemented in the legacy drivers. 
Each driver processes Fast I/O requests and passes them down the stack 
to the next driver. If a single driver in the stack lacks a dispatch table, it 
disables Fast I/O processing for the entire device stack.
An Inability to Monitor Non-data Fast I/O Operations
In Windows, filesystems are deeply integrated into other system compo-
nents, such as the memory manager. For instance, when a user requests 
that a file be mapped into memory, the memory manager calls the Fast 
I/O callback AcquireFileForNtCreateSection. These non-data requests 
always bypass the device stack, making it hard for a legacy filter driver 
to collect information about them. It wasn’t until Windows XP, which 
introduced nt!FsRtlRegisterFileSystemFilterCallbacks(), that developers 
could request this information.
Issues with Handling Recursion
Filesystems make heavy use of recursion, so filters in the filesystem 
stack must support it as well. However, due to the way that Windows 
manages I/O operations, this is easier said than done. Because  
each request passes through the entire device stack, a driver could 
easily deadlock or exhaust its resources if it handles recursion  
poorly.
To address some of these limitations, Microsoft introduced the filter 
manager model. The filter manager (fltmgr.sys) is a driver that ships with 
Windows and exposes functionality commonly used by filter drivers  
when intercepting filesystem operations. To leverage this functional-
ity, developers can write minifilters. The filter manager then intercepts 
requests destined for the filesystem and passes them to the minifilters 
loaded on the system, which exist in their own sorted stack, as shown in 
Figure 6-2.
Minifilters are substantially easier to develop than their legacy coun-
terparts, and EDRs can manage them more easily by dynamically loading 
and unloading them on a running system. The ability to access function-
ality exposed by the filter manager makes for less complex drivers, allow-
ing for easier maintenance. Microsoft has made tremendous efforts to 
Evading EDR (Early Access) © 2023 by Matt Hand
106   Chapter 6
move developers away from the legacy filter model and over to the mini-
filter model. It has even included an optional registry value that allows 
administrators to block legacy filter drivers from being loaded on the sys-
tem altogether.
Minifilter Architecture
Minifilters have a unique architecture in several respects. First is the role of 
the filter manager itself. In a legacy architecture, filesystem drivers would 
filter I/O requests directly, while in a minifilter architecture, the filter 
manager handles this task before passing information about the requests 
to the minifilters loaded on the system. This means that minifilters are only 
indirectly attached to the filesystem stack. Also, they register with the filter 
manager for the specific operations they’re interested in, removing the 
need for them to handle all I/O requests.
Next is how they interact with registered callback routines. As with the 
drivers discussed in the previous chapters, minifilters may register both pre- 
and post-operation callbacks. When a supported operation occurs, the filter 
manager first calls the correlated pre-operation callback function in each of 
the loaded minifilters. Once a minifilter completes its pre-operation routine, 
it passes control back to the filter manager, which calls the next callback 
function in the subsequent driver. When all drivers have completed their 
pre-operation callbacks, the request travels to the filesystem driver, which 
processes the operation. After receiving the I/O request for completion, the 
filter manager invokes the post-operation callback functions in the mini-
filters in reverse order. Once the post-operation callbacks complete, control 
is transferred back to the I/O manager, which eventually passes control back 
to the caller application.
Each minifilter has an altitude, which is a number that identifies its loca-
tion in the minifilter stack and determines when the system will load that 
minifilter. Altitudes address the issue of ordering that plagued legacy filter 
drivers. Ideally, Microsoft assigns altitudes to the minifilters of production 
applications, and these values are specified in the drivers’ registry keys, 
under Altitude. Microsoft sorts altitudes into load-order groups, which are 
shown in Table 6-1.
I/O manager
User request to interact
with a ﬁle
Filter manager
Filesystem driver
(for example, ntfs.sys)
User mode
Kernel mode
Miniﬁlter C
altitude: 145000
Miniﬁlter B
altitude: 268000
Miniﬁlter B
altitude: 309000
Figure 6-2: The filter manager and minifilter architecture
Evading EDR (Early Access) © 2023 by Matt Hand
Filesystem Minifilter Drivers   107
Table 6-1: Microsoft’s Minifilter Load-Order Groups
Altitude range
Load-order group name
Minifilter role
420000–429999
Filter
Legacy filter drivers
400000–409999
FSFilter Top
Filters that must attach above all others
360000–389999
FSFilter Activity Monitor
Drivers that observe and report on file I/O
340000–349999
FSFilter Undelete
Drivers that recover deleted files
320000–329998
FSFilter Anti-Virus
Antimalware drivers
300000–309998
FSFilter Replication
Drivers that copy data to a remote system
280000–289998
FSFilter Continuous 
Backup
Drivers that copy data to backup media
260000–269998
FSFilter Content 
Screener
Drivers that prevent the creation of  
specific files or content
240000–249999
FSFilter Quota 
Management
Drivers that provide enhanced filesystem 
quotas that limit the space allowed for a 
volume or folder
220000–229999
FSFilter System Recovery
Drivers that maintain operating system 
integrity
200000–209999
FSFilter Cluster File 
System
Drivers used by applications that 
provide file server metadata across a 
network
180000–189999
FSFilter HSM
Hierarchical storage management 
drivers
170000–174999
FSFilter Imaging
ZIP-like drivers that provide a virtual 
namespace
160000–169999
FSFilter Compression
File-data compression drivers
140000–149999
FSFilter Encryption
File-data encryption and decryption 
drivers
130000–139999
FSFilter Virtualization
Filepath virtualization drivers
120000–129999
FSFilter Physical Quota 
Management
Drivers that manage quotes by using 
physical block counts
100000–109999
FSFilter Open File
Drivers that provide snapshots of 
already-opened files
80000–89999
FSFilter Security 
Enhancer
Drivers that apply file-based lockdowns 
and enhanced access control
60000–69999
FSFilter Copy Protection
Drivers that check for out-of-band data 
on storage media
40000–49999
FSFilter Bottom
Filters that must attach below all others
20000–29999
FSFilter System
Reserved
<20000
FSFilter Infrastructure
Reserved for system use but attaches  
closest to the filesystem
Most EDR vendors register their minifilters in the FSFilter Anti-Virus 
or FSFilter Activity Monitor group. Microsoft publishes a list of registered 
altitudes, as well as their associated filenames and publishers. Table 6-2 
Evading EDR (Early Access) © 2023 by Matt Hand
108   Chapter 6
lists altitudes assigned to minifilters belonging to popular commercial EDR 
solutions.
Table 6-2: Altitudes of Popular EDRs
Altitude
Vendor
EDR
389220
Sophos
sophosed.sys
389040
SentinelOne
sentinelmonitor.sys
328010
Microsoft
wdfilter.sys
321410
CrowdStrike
csagent.sys
388360
FireEye/Trellix
fekern.sys
386720
Bit9/Carbon Black/VMWare
carbonblackk.sys
While an administrator can change a minifilter’s altitude, the system 
can load only one minifilter at a single altitude at one time.
Writing a Minifilter
Let’s walk through the process of writing a minifilter. Each minifilter 
begins with a DriverEntry() function, defined in the same way as other driv-
ers. This function performs any required global initializations and then 
registers the minifilter. Finally, it starts filtering I/O operations and 
returns an appropriate value.
Beginning the Registration
The first, and most important, of these actions is registration, which the 
DriverEntry() function performs by calling fltmgr!FltRegisterFilter(). This 
function adds the minifilter to the list of registered minifilter drivers on the 
host and provides the filter manager with information about the minifilter, 
including a list of callback routines. This function is defined in Listing 6-1.
NTSTATUS FLTAPI FltRegisterFilter(
 [in] PDRIVER_OBJECT  Driver,
 [in] const FLT_REGISTRATION *Registration,
 [out] PFLT_FILTER  *RetFilter
);
Listing 6-1: The fltmgr!FltRegisterFilter() function definition
Of the three parameters passed to it, the Registration parameter is 
the most interesting. This is a pointer to an FLT_REGISTRATION structure, 
defined in Listing 6-2, which houses all the relevant information about the 
minifilter.
typedef struct _FLT_REGISTRATION {
 USHORT  
Size;
 USHORT  
Version;
Evading EDR (Early Access) © 2023 by Matt Hand
Filesystem Minifilter Drivers   109
 FLT_REGISTRATION_FLAGS 
Flags;
 const FLT_CONTEXT_REGISTRATION  *ContextRegistration;
 const FLT_OPERATION_REGISTRATION  *OperationRegistration;
 PFLT_FILTER_UNLOAD_CALLBACK  FilterUnloadCallback;
 PFLT_INSTANCE_SETUP_CALLBACK  InstanceSetupCallback;
 PFLT_INSTANCE_QUERY_TEARDOWN_CALLBACK InstanceQueryTeardownCallback;
 PFLT_INSTANCE_TEARDOWN_CALLBACK  InstanceTeardownStartCallback;
 PFLT_INSTANCE_TEARDOWN_CALLBACK  InstanceTeardownCompleteCallback;
 PFLT_GENERATE_FILE_NAME   GenerateFileNameCallback;
 PFLT_NORMALIZE_NAME_COMPONENT  NormalizeNameComponentCallback;
 PFLT_NORMALIZE_CONTEXT_CLEANUP  NormalizeContextCleanupCallback;
 PFLT_TRANSACTION_NOTIFICATION_CALLBACK TransactionNotificationCallback;
 PFLT_NORMALIZE_NAME_COMPONENT_EX  NormalizeNameComponentExCallback;
 PFLT_SECTION_CONFLICT_NOTIFICATION_CALLBACK SectionNotificationCallback;
} FLT_REGISTRATION, *PFLT_REGISTRATION;
Listing 6-2: The FLT_REGISTRATION structure definition
The first two members of this structure set the structure size, which 
is always sizeof(FLT_REGISTRATION), and the structure revision level, which is 
always FLT_REGISTRATION_VERSION. The next member is flags, which is a bitmask 
that may be null or a combination of any of the following three values:
FLTFL_REGISTRATION_DO_NOT_SUPPORT_SERVICE_STOP (1)
The minifilter won’t be unloaded in the event of a service stop request.
FLTFL_REGISTRATION_SUPPORT_NPFS_MSFS (2)
The minifilter supports named pipe and mailslot requests.
FLTFL_REGISTRATION_SUPPORT_DAX_VOLUME (4)
The minifilter supports attaching to a Direct Access (DAX) volume.
Following this member is the context registration. This will be either 
an array of FLT_CONTEXT_REGISTRATION structures or null. These contexts 
allow a minifilter to associate related objects and preserve state across 
I/O operations. After this array of context comes the critically important 
operation registration array. This is a variable length array of FLT_OPERATION 
_REGISTRATION structures, which are defined in Listing 6-3. While this array 
can technically be null, it’s rare to see that configuration in an EDR sensor. 
The minifilter must provide a structure for each type of I/O for which it 
registers a pre-operation or post-operation callback routine.
typedef struct _FLT_OPERATION_REGISTRATION {
 UCHAR    MajorFunction;
 FLT_OPERATION_REGISTRATION_FLAGS Flags;
 PFLT_PRE_OPERATION_CALLBACK PreOperation;
 PFLT_POST_OPERATION_CALLBACK PostOperation;
 PVOID    Reserved1;
} FLT_OPERATION_REGISTRATION, *PFLT_OPERATION_REGISTRATION;
Listing 6-3: The FLT_OPERATION_REGISTRATION structure definition
Evading EDR (Early Access) © 2023 by Matt Hand
110   Chapter 6
The first parameter indicates which major function the minifilter 
is interested in processing. These are constants defined in wdm.h, and 
Table 6-3 lists some of those most relevant to security monitoring.
Table 6-3: Major Functions and Their Purposes
Major function
Purpose
IRP_MJ_CREATE (0x00)
A new file is being created or a handle to an  
existing one is being opened.
IRP_MJ_CREATE_NAMED_PIPE (0x01)
A named pipe is being created or opened.
IRP_MJ_CLOSE (0x02)
A handle to a file object is being closed.
IRP_MJ_READ (0x03)
Data is being read from a file.
IRP_MJ_WRITE (0x04)
Data is being written to a file.
IRP_MJ_QUERY_INFORMATION (0x05)
Information about a file, such as its creation time, 
has been requested.
IRP_MJ_SET_INFORMATION (0x06)
Information about a file, such as its name, is being 
set or updated.
IRP_MJ_QUERY_EA (0x07)
A file’s extended information has been requested.
IRP_MJ_SET_EA (0x08)
A file’s extended information is being set or updated.
IRP_MJ_LOCK_CONTROL (0x11)
A lock is being placed on a file, such as via a call 
to kernel32!LockFileEx().
IRP_MJ_CREATE_MAILSLOT (0x13)
A new mailslot is being created or opened.
IRP_MJ_QUERY_SECURITY (0x14)
Security information about a file is being requested.
IRP_MJ_SET_SECURITY (0x15)
Security information related to a file is being set or 
updated.
IRP_MJ_SYSTEM_CONTROL (0x17)
A new driver has been registered as a supplier of 
Windows Management Instrumentation.
The next member of the structure specifies the flags. This bitmask 
describes when the callback functions should be invoked for cached I/O or 
paging I/O operations. At the time of this writing, there are four supported 
flags, all of which are prefixed with FLTFL_OPERATION_REGISTRATION_. First, 
SKIP_PAGING_IO indicates whether a callback should be invoked for IRP-based 
read or write paging I/O operations. The SKIP_CACHED_IO flag is used to pre-
vent the invocation of callbacks on fast I/O-based read or write cached I/O 
operations. Next, SKIP_NON_DASD_IO is used for requests issued on a Direct 
Access Storage Device (DASD) volume handle. Finally, SKIP_NON_CACHED_NON 