攻击内⽹的另类⽅式——host碰撞实践指南
清⽔川崎@滴滴SSTG
0x00.前⾔
在当前的攻防实战当中，想要突破⽬标边界进入内⽹的⽅式无非有以下⼏种⽅式：
1.RCE/RCI(远程代码执⾏/远程命令注入)
2.VPN弱⼝令
3.SSRF漏洞
4.SQLI
5.⽂件上传
6.物理攻击/社⼯钓⻥
但是有⼀种依靠⻓期信息收集才能提升攻击成功率的⽅式往往被忽略，那就是host
碰撞。
0x01.本质
host碰撞这种攻击⽅式本质上是nginx配置不当容易产⽣的安全问题。 nginx⼀般⽤
于做外⽹代理，配置也比较⽅便，但是配置不当的时候会产⽣⼀些安全问题。其中
包括各个⼤⼚也都出现过(这⾥我就不点名是哪些互联⽹⼤⼚了)。 外⽹部署服务⼀
般正常的流程是下⾯这样⼦的:
intra server -> proxy -> nginx
内⽹的集群或机器不直接连接外部，nginx做个proxy代理透出传递互联⽹。如果
nginx配置不当，或者nignx default_server没有配置或者配置内⽹，那么⼩⼼内⽹
业务将被透传出去。
nginx 的default_server指令可以定义默认的 server 去处理⼀些没有匹配
到server_name的请求，如果没有显式定义，则会选取第⼀个定义的server作
为default_server 也就是说nginx如果没配置default_server,那么nginx会默认
找⼀个a-z的域名进⾏匹配的，这个是nginx的默认规则，如配
置default_server为内⽹的业务，那么nginx也会默认使⽤。 nginx批量载入配
置 conf 时会按 ascii 排序载入，这就会以 server_a.conf server_b.conf
server_c.conf 的顺序载入，如果没有声明default_server的话，那server_a会
作为默认的server去处理未绑定域名/ip 的请求.
0x02.现象
那么说清楚了本质原因，我们来看看host碰撞的现象级表象。 在攻防实战过程中，
很多时候我们在做信息搜集的时候，⼀般会遇到两种无法利⽤的情况：
1.扫描出来的很多根域名的⼦域名，其绑定解析的ip响应多为：Nginx 200、
Welcome to Centos、router 200、401、403、404、500、503
2.很多⼦域名解析到内⽹ip：17x.x.x.x、10.x.x.x
这⾥举⼀些例⼦ 先看看ip相关的案例
再来看看关于域名的案例
0x03.实践
现在来说⼀下怎么去实现host碰撞。
3.1. 前期准备
⾸先，我们得有庞⼤的外⽹ip池、内⽹host池。我们需要搭建⼀些简易的soar
去实现。这⾥我推荐使⽤灯塔ARL
灯塔ARL github项⽬地址:https://github.com/TophantTechnology/ARL
它⼤概⻓这样⼦
灯塔ARL可以⽅便的管理⽬标的资产信息，它会利⽤各种情报API充分收集⽬标的相
关信息。例如利⽤fofa、dnsmq、riskiq等api。我们按照要求搭建好以后，需要⽤到
其中的⼦域名监控、⼦域名管理的模块。 登录以后，新建⼀个资产组
然后启⽤⼦域名监控
差不多等待⼀周以上的时间，灯塔平台会⾃动收集并去重得到数量庞⼤的ip池、域
名池。
但是信息收集到这⾥还没有结束，我们还需要通过其他途径收集。
通过访问某些外⽹系统中的js、html源码中注释部分寻找内⽹域名
通过github寻找内⽹域名
很多员⼯喜欢把公司内⽹的⼀些域名丢到github、码云等代码托管平台，觉得内⽹
域名需要VPN或者公司WiFi才能访问，其实这是给外部攻击者提供了攻击条件。
把代码托管平台中的这些host信息收集起来与灯塔ARL中的内⽹域名组合以后并去
重，将得到⼀个数量较⼤的内⽹域名池。
抓包灯塔展示内⽹域名的请求api得到json数据
灯塔ARL json数据的去重，这⾥我提供⼀个⾃⽤的脚本
#!/usr/bin/python3
import json
data1 = 填⼊json数据
json_str = json.dumps(data1)
list1 = []
list2 = []
data2 = json.loads(json_str)
data2_len = len(data2['items'])
for x in range(0,data2_len):
data3 = data2['items'][x]['domain']
data3_len = len(data3)
if data3_len != 0:
for y in range(0,data3_len):
list1.append(data3[y])
# print(data3[y])
else:
list2.append(data3[0])
# print(data3[0])
list3 = list(set(list1 + list2))
list3_len = len(list3)
for i in range(0,list3_len):
print(list3[i])
下⾯是使⽤效果
再组合github等其他途径收集到的内⽹域名信息使⽤站⻓之家在线去重即可
站⻓之家在线去重：http://tool.chinaz.com/tools/textquchong
接下来，我们选取公⽹域名得到其公⽹ip数据
使⽤导出功能，导出ip与端⼝数据
但其实端⼝数据我们⽤不到
我们可以使⽤Excel的数据分列功能处理⼀下
这样我们就得到⼀个外⽹ip池，只需要再在线去重⼀下即可。
3.2. 开始碰撞
这⾥使⽤这样⼀个github项⽬
https://github.com/smxiazi/host_scan
我们新建⼀个ip.txt，填入我们的外⽹ip池，新建⼀个host.txt，填入我们的内⽹域名
池，最后执⾏ nohup python3 host_scan.py & 即可
脚本会⾃动帮我们尝试模拟绑定ip与host，并提取标题到⼀个⽇志⽂件ok.txt中。
3.3. 验证结果
我们⾃⼰打开本机的/etc/host绑定⼀下host与ip即可
比如绑定(为了避免法律纠纷，这⾥选择模糊处理⼀下)
211.*.*.* *.secrss.com
⻚⾯也可以正常打开了
要知道之前的解析是如下的情况
外部攻击者理论上不可能可以访问到该系统
0x04.思考
内⽹很多域名存在如下的⻛险点
弱⼝令、SQLI、RCE等CVE⾼危漏洞未推修
未接入SSO走域认证
接入了SSO域认证的⽅式也没有屏蔽原有的登录/注册接⼝(旧系统、外采系统较
多)
⼀些外采系统由于⼀些不可抗⼒的原因不能升级更新
内⽹⼀些系统不重视代码审计，使⽤⼀些存在漏洞的组件或者版本较老的组件
等等问题。。。。
⼀旦存在上述问题的系统，同时⼜存在host碰撞的问题，那么内⽹系统毫无安全性
可⾔。
0x05.引⽤
nginx 的 default_server 定义及匹配规
则:https://segmentfault.com/a/1190000015681272
隐藏资产探测-hosts碰撞 https://www.cnblogs.com/Rain99-
/p/13756032.html