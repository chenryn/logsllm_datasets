browser to the AS’s
authorize endpoint.
The AS then authenticates
the user (RO) and asks
for consent.
The client includes its
client ID and requested
scope in the request.
Browser
Authorization
server
Client
Resource owner
3. Redirects to client
with auth code
4. Auth code
5. Exchange code
for access token
The AS creates an authorization
code and redirects to the client.
The client then calls the AS
token endpoint to exchange
the authorization code for
an access token.
Resource server
(API)
The client can then use
the access token to
access the API.
Access token
Client
Figure 7.5
In the Authorization Code grant, the client first redirects the user’s web browser 
to the authorization endpoint for the AS. The AS then authenticates the user and asks for 
consent to grant access to the application. If approved, then the AS redirects the web browser 
to a URI controlled by the client, including an authorization code. The client can then call the 
AS token endpoint to exchange the authorization code for an access token to use to access 
the API on the user’s behalf.
232
CHAPTER 7
OAuth2 and OpenID Connect
as token are used for the implicit grant). Finally, the client should generate a unique
random state value for each request and store it locally (such as in a browser cookie).
When the AS redirects back to the client with the authorization code it will include
the same state parameter, and the client should check that it matches the original
one sent on the request. This ensures that the code received by the client is the one it
requested. Otherwise, an attacker may be able to craft a link that calls the client’s
redirect endpoint directly with an authorization code obtained by the attacker. This
attack is like the Login CSRF attacks discussed in chapter 4, and the state parameter
plays a similar role to an anti-CSRF token in that case. Finally, the client should
include the URI that it wants the AS to redirect to with the authorization code. Typ-
ically, the AS will require the client’s redirect URI to be pre-registered to prevent
open redirect attacks.
DEFINITION
An open redirect vulnerability is when a server can be tricked into
redirecting a web browser to a URI under the attacker’s control. This can be
used for phishing because it initially looks like the user is going to a trusted
site, only to be redirected to the attacker. You should require all redirect URIs
to be pre-registered by trusted clients rather than redirecting to any URI pro-
vided in a request.
For a web application, this is simply a case of returning an HTTP redirect status code
such as 303 See Other,6 with the URI for the authorization endpoint in the Location
header, as in the following example:
HTTP/1.1 303 See Other
Location: https://as.example.com/authorize?client_id=test    
➥ &scope=read_messages+post_message                     
➥ &state=t9kWoBWsYjbsNwY0ACJj0A                        
➥ &response_type=code    
➥ &redirect_uri=https://client.example.net/callback    
For mobile and desktop applications, the client should launch the system web browser
to carry out the authorization. The latest best practice advice for native applications
(https://tools.ietf.org/html/rfc8252) recommends that the system browser be used
for this, rather than embedding an HTML view within the application. This avoids
users having to type their credentials into a UI under the control of a third-party app
and allows users to reuse any cookies or other session tokens they may already have in
the system browser for the AS to avoid having to login again. Both Android and iOS
support using the system browser without leaving the current application, providing a
similar user experience to using an embedded web view.
6 The older 302 Found status code is also often used, and there is little difference between them.
The client_id parameter
indicates the client.
The scope 
parameter 
indicates the 
requested scope.
Include a random 
state parameter 
to prevent CSRF 
attacks.
Use the response_type parameter 
to obtain an authorization code.
The client’s redirection
endpoint
233
The Authorization Code grant
 Once the user has authenticated in their browser, the AS will typically display a
page telling the user which client is requesting access and the scope it requires, such
as that shown in figure 7.6. The user is then given an opportunity to accept or decline
the request, or possibly to adjust the scope of access that they are willing to grant. If
the user approves, then the AS will issue an HTTP redirect to a URI controlled by the
client application with the authorization code and the original state value as a query
parameter:
HTTP/1.1 303 See Other
Location: https://client.example.net/callback?   
➥ code=kdYfMS7H3sOO5y_sKhpdV6NFfik              
➥ &state=t9kWoBWsYjbsNwY0ACJj0A       
Because the authorization code is included in the query parameters of the redirect,
it’s vulnerable to being stolen by malicious scripts running in the browser or leaking
in server access logs, browser history, or through the HTTP Referer header. To pro-
tect against this, the authorization code is usually only valid for a short period of time
and the AS will enforce that it’s used only once. If an attacker tries to use a stolen code
after the legitimate client has used it, then the AS will reject the request and revoke
any access tokens already issued with that code.
 The client can then exchange the authorization code for an access token by calling
the token endpoint on the AS. It sends the authorization code in the body of a POST
request, using the application/x-www-form-urlencoded encoding used for HTML
forms, with the following parameters:
 Indicate the authorization code grant type is being used by including grant_
type=authorization_code.
The AS redirects to 
the client with the 
authorization code.
It includes the state parameter 
from the original request.
Figure 7.6
An example OAuth2 consent page indicating the name of the client requesting 
access and the scope it requires. The user can choose to allow or deny the request.
234
CHAPTER 7
OAuth2 and OpenID Connect
 Include the client ID in the client_id parameter or supply client credentials to
identify the client.
 Include the redirect URI that was used in the original request in the redirect
_uri parameter.
 Finally, include the authorization code as the value of the code parameter.
This is a direct HTTPS call from the client to the AS rather than a redirect in the web
browser, and so the access token returned to the client is protected against theft or
tampering. An example request to the token endpoint looks like the following:
POST /token HTTP/1.1
Host: as.example.com
Content-Type: application/x-www-form-urlencoded
Authorization: Basic dGVzdDpwYXNzd29yZA==     
grant_type=authorization_code&         
code=kdYfMS7H3sOO5y_sKhpdV6NFfik&      
redirect_uri=https://client.example.net/callback     
If the authorization code is valid and has not expired, then the AS will respond with
the access token in a JSON response, along with some (optional) details about the
scope and expiry time of the token:
HTTP/1.1 200 OK
Content-Type: application/json
{
  "access_token":"QdT8POxT2SReqKNtcRDicEgIgkk",   
  "scope":"post_message read_messages",       
  "token_type":"Bearer",
  "expires_in":3599}    
If the client is confidential, then it must authenticate to the token endpoint when it
exchanges the authorization code. In the most common case, this is done by includ-
ing the client ID and client secret as a username and password using HTTP Basic
authentication, but alternative authentication methods are allowed, such as using a
JWT or TLS client certificate. Authenticating to the token endpoint prevents a mali-
cious client from using a stolen authorization code to obtain an access token.
 Once the client has obtained an access token, it can use it to access the APIs on the
resource server by including it in an Authorization: Bearer header just as you’ve
done in previous chapters. You’ll see how to validate an access token in your API in
section 7.4.
Supply client credentials 
for a confidential client.
Include the grant type 
and authorization code.
Provide the redirect URI that
was used in the original request.
The access token
The scope of the access 
token, which may be 
different than requested
The number of seconds until 
the access token expires
235
The Authorization Code grant
7.3.1
Redirect URIs for different types of clients
The choice of redirect URI is an important security consideration for a client. For
public clients that don’t authenticate to the AS, the redirect URI is the only measure
by which the AS can be assured that the authorization code is sent to the right client.
If the redirect URI is vulnerable to interception, then an attacker may steal authoriza-
tion codes.
 For a traditional web application, it’s simple to create a dedicated endpoint to use
for the redirect URI to receive the authorization code. For a single-page app, the redi-
rect URI should be the URI of the app from which client-side JavaScript can then
extract the authorization code and make a CORS request to the token endpoint.
 For mobile applications, there are two primary options:
 The application can register a private-use URI scheme with the mobile operat-
ing system, such as myapp:/ /callback. When the AS redirects to myapp:/ /
callback?code=… in the system web browser, the operating system will launch
the native app and pass it the callback URI. The native application can then
extract the authorization code from this URI and call the token endpoint.
 An alternative is to register a portion of the path on the web domain of the app
producer. For example, your app could register with the operating system that
it will handle all requests to https:/ /example.com/app/callback. When the
AS redirects to this HTTPS endpoint, the mobile operating system will launch
the native app just as for a private-use URI scheme. Android calls this an App Link
(https://developer.android.com/training/app-links/), while on iOS they are
known as Universal Links (https://developer.apple.com/ios/universal-links/).
A drawback with private-use URI schemes is that any app can register to handle any
URI scheme, so a malicious application could register the same scheme as your legiti-
mate client. If a user has the malicious application installed, then the redirect from
the AS with an authorization code may cause the malicious application to be activated
rather than your legitimate application. Registered HTTPS redirect URIs on Android
(App Links) and iOS (Universal Links) avoid this problem because an app can only
claim part of the address space of a website if the website in question publishes a JSON
document explicitly granting permission to that app. For example, to allow your iOS
app to handle requests to https:/ /example.com/app/callback, you would publish the
following JSON file to https:/ /example.com/.well-known/apple-app-site-association:
{
  "applinks": {
"apps": [],
"details": [
  { "appID": "9JA89QQLNQ.com.example.myapp",   
    "paths": ["/app/callback"] }]  
  }
}
The ID of your app in 
the Apple App Store
The paths on the 
server that the app 
can intercept
236
CHAPTER 7
OAuth2 and OpenID Connect
The process is similar for Android apps. This prevents a malicious app from claiming
the same redirect URI, which is why HTTPS redirects are recommended by the
OAuth Native Application Best Common Practice document (https://tools.ietf.org/
html/rfc8252#section-7.2).
 For desktop and command-line applications, both Mac OS X and Windows sup-
port registering private-use URI schemes but not claimed HTTPS URIs at the time of
writing. For non-native apps and scripts that cannot register a private URI scheme, the
recommendation is that the application starts a temporary web server listening on the
local loopback device (that is, http:/ /127.0.0.1) on a random port, and uses that as its
redirect URI. Once the authorization code is received from the AS, the client can shut
down the temporary web server.
7.3.2
Hardening code exchange with PKCE
Before the invention of claimed HTTPS redirect URIs, mobile applications using
private-use URI schemes were vulnerable to code interception by a malicious app reg-
istering the same URI scheme, as described in the previous section. To protect against
this attack, the OAuth working group developed the PKCE standard (Proof Key for
Code Exchange; https://tools.ietf.org/html/rfc7636), pronounced “pixy.” Since then,
formal analysis of the OAuth protocol has identified a few theoretical attacks against
the authorization code flow. For example, an attacker may be able to obtain a genuine
authorization code by interacting with a legitimate client and then using an XSS
attack against a victim to replace their authorization code with the attacker’s. Such
an attack would be quite difficult to pull off but is theoretically possible. It’s there-
fore recommended that all types of clients use PKCE to strengthen the authoriza-
tion code flow.
 The way PKCE works for a client is quite simple. Before the client redirects the
user to the authorization endpoint, it generates another random value, known as the
PKCE code verifier. This value should be generated with high entropy, such as a 32-byte
value from a SecureRandom object in Java; the PKCE standard requires that the
encoded value is at least 43 characters long and a maximum of 128 characters from a
restricted set of characters. The client stores the code verifier locally, alongside the
state parameter. Rather than sending this value directly to the AS, the client first
hashes7 it using the SHA-256 cryptographic hash function to create a code challenge
(listing 7.4). The client then adds the code challenge as another query parameter
when redirecting to the authorization endpoint.
7 There is an alternative method in which the client sends the original verifier as the challenge, but this is less
secure.
237
The Authorization Code grant
String addPkceChallenge(spark.Request request,
        String authorizeRequest) throws Exception {
    var secureRandom = new java.security.SecureRandom();
    var encoder = java.util.Base64.getUrlEncoder().withoutPadding();
    var verifierBytes = new byte[32];                      
    secureRandom.nextBytes(verifierBytes);                 
    var verifier = encoder.encodeToString(verifierBytes);  
    request.session(true).attribute("verifier", verifier);     
    var sha256 = java.security.MessageDigest.getInstance("SHA-256");  
    var challenge = encoder.encodeToString(                           
            sha256.digest(verifier.getBytes("UTF-8")));               
    return authorizeRequest + 
        "&code_challenge=" + challenge +  
        "&code_challenge_method=S256";         
}
Later, when the client exchanges the authorization code at the token endpoint, it
sends the original (unhashed) code verifier in the request. The AS will check that the
SHA-256 hash of the code verifier matches the code challenge that it received in the
authorization request. If they differ, then it rejects the request. PKCE is very secure,
because even if an attacker intercepts both the redirect to the AS and the redirect
back with the authorization code, they are not able to use the code because they can-
not compute the correct code verifier. Many OAuth2 client libraries will automatically
compute PKCE code verifiers and challenges for you, and it significantly improves the
security of the authorization code grant so you should always use it when possible.
Authorization servers that don’t support PKCE should ignore the additional query
parameters, because this is required by the OAuth2 standard.
7.3.3
Refresh tokens
In addition to an access token, the AS may also issue the client with a refresh token at the
same time. The refresh token is returned as another field in the JSON response from
the token endpoint, as in the following example:
$ curl -d 'grant_type=password
➥ &scope=read_messages+post_message
➥ &username=demo&password=changeit' 
➥  -u test:password
➥ https://as.example.com:8443/oauth2/access_token
{
  "access_token":"B9KbdZYwajmgVxr65SzL-z2Dt-4",
  "refresh_token":"sBac5bgCLCjWmtjQ8Weji2mCrbI",   
  "scope":"post_message read_messages",
  "token_type":"Bearer","expires_in":3599}
Listing 7.4
Computing a PKCE code challenge
Create a 
random code 
verifier string.
Store the
verifier in a
session
cookie or
other local
storage.
Create a code
challenge as
the SHA-256
hash of the
code verifier
string.
Include the code challenge 
in the redirect to the AS 
authorization endpoint.
A refresh 
token
238
CHAPTER 7
OAuth2 and OpenID Connect
When the access token expires, the client can then use the refresh token to obtain a
fresh access token from the AS without the resource owner needing to approve the
request again. Because the refresh token is sent only over a secure channel between
the client and the AS, it’s considered more secure than an access token that might be
sent to many different APIs.
DEFINITION
A client can use a refresh token to obtain a fresh access token when
the original one expires. This allows an AS to issue short-lived access tokens
without clients having to ask the user for a new token every time it expires.
By issuing a refresh token, the AS can limit the lifetime of access tokens. This has a
minor security benefit because if an access token is stolen, then it can only be used for
a short period of time. But in practice, a lot of damage could be done even in a short
space of time by an automated attack, such as the Facebook attack discussed in chap-
ter 6 (https://newsroom.fb.com/news/2018/09/security-update/). The primary ben-
efit of refresh tokens is to allow the use of stateless access tokens such as JWTs. If the
access token is short-lived, then the client is forced to periodically refresh the token at
the AS, providing an opportunity for the token to be revoked without the AS main-
taining a large blocklist. The complexity of revocation is effectively pushed to the cli-
ent, which must now handle periodically refreshing its access tokens.
 To refresh an access token, the client calls the AS token endpoint passing in the
refresh token, using the refresh token grant, and sending the refresh token and any cli-
ent credentials, as in the following example:
$ curl -d 'grant_type=refresh_token              
➥ &refresh_token=sBac5bgCLCjWmtjQ8Weji2mCrbI'   
➥ -u test:password                                 
➥ https://as.example.com:8443/oauth2/access_token
{
  "access_token":"snGxj86QSYB7Zojt3G1b2aXN5UM",    
  "scope":"post_message read_messages",
  "token_type":"Bearer","expires_in":3599}
The AS can often be configured to issue a new refresh token at the same time (revok-
ing the old one), enforcing that each refresh token is used only once. This can be
used to detect refresh token theft: when the attacker uses the refresh token, it will stop
working for the legitimate client.
Pop quiz
4
Which type of URI should be preferred as the redirect URI for a mobile client?
a
A claimed HTTPS URI
b
A private-use URI scheme such as myapp:/ /cb
Use the refresh token 
grant and supply the 
refresh token.
Include client 
credentials if using a 
confidential client.
The AS returns a 
fresh access token.
239
Validating an access token
7.4
Validating an access token
Now that you’ve learned how to obtain an access token for a client, you need to
learn how to validate the token in your API. In previous chapters, it was simple to look