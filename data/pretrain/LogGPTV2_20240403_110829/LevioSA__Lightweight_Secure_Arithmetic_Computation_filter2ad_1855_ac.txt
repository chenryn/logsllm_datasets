assume functions to be represented by an arithmetic circuit C (with
addition and multiplication gates of fan-in 2), and denote the size
of C by |C|. By default we define the size of the circuit to include
the total number of gates including input gates.
2.1 Layered Arithmetic Circuits
An arithmetic circuit defined over a finite field F is a directed acyclic
graph, where nodes (or gates) are labelled either as input gates,
output gates or computation gates. Input gates have no incoming
edges (or wires), while output gates have a single incoming wire
and no outgoing wires. Computation gates are labelled with a field
operations (either addition or multiplication),3 and have exactly
two incoming wires, which we denote as the left and right wire. A
circuit with i input gates and o output gates over a field F represents
a function f : Fi → Fo whose value on input x = x1, . . . , xi can be
computed by assigning a value to each wire of the circuit.
In this work, we will exploit an additional structure of the circuit.
Specifically, the gates of an arithmetic circuit can be partitioned
into ordered layers l1, . . . , ld, such that i) a layer only consists of
gates of the same type (i.e., addition, multiplication, input or output
gates belonging to the same party), and ii) the incoming wires of
all gates of layer i originate from gates in layers 0 to i − 1.
2.2 Oblivious Transfer
1-out-of-2 oblivious transfer (OT) is a fundamental functionality
in secure computation that is engaged between a sender S and a
receiver R where a receiver learns only one of the sender’s inputs
whereas the sender does not learn anything about the receiver’s
input. In this paper we consider a generalized version of t-out-of-n
OT where the receiver learns t values and which will be useful
in establishing the watchlist channels; see Figure 1 for its formal
description.
2.3 Oblivious Linear Evaluation
An extension of the oblivious transfer functionality for larger fields
is the oblivious linear evaluation functionality (OLE). More con-
cretely, OLE over a field F takes a field element x ∈ F from the
receiver and a pair (a, b) ∈ F2 from the sender and delivers ax + b
3Subtraction gates can be handled analogously to addition gates, and we ignore them
here for simplicity.
Session 2C: Secure Computing ICCS ’19, November 11–15, 2019, London, United Kingdom331Functionality Ft:n
OT
Functionality Ft:n
adversary S.
OT communicates with sender S and receiver R, and
(1) Upon receiving input (sid , v1, . . . , vn) from S where vi ∈
{0, 1}κ for all i ∈ [n], record (sid , v1, . . . , vn).
(2) Upon receiving (sid , u1, . . . , ut) from R where ui ∈
{0, 1}log n for all i ∈ [t], send (vu1 , . . . vut ) to R. Oth-
erwise, abort.
Figure 1: The oblivious transfer functionality.
Functionality FOLE
Functionality FOLE communicates with sender S and receiver R, and
adversary S.
(1) Upon receiving the input (sid , (a, b)) from S where a, b ∈
(2) Upon receiving (sid , x) from R where x ∈ F, send a · x + b
F, record (sid , (a, b)).
to R. Otherwise, abort.
Figure 2: The oblivious linear evaluation functionality.
Functionality FCOM
Functionality FCOM communicates with with sender S and receiver
R, and adversary S.
(1) Upon receiving input (commit, sid , m) from S where
m ∈ {0, 1}t , internally record (sid , m) and send mes-
sage (sid , S , R) to the adversary. Upon receiving approve
from the adversary send sid , to R. Ignore subsequent
(commit, ., ., .) messages.
(2) Upon receiving (reveal, sid) from S, where a tuple (sid , m)
is recorded, send message m to adversary S and R. Other-
wise, ignore.
Figure 3: The string commitment functionality.
to the receiver. Note that in the case of binary fields, OLE can be re-
alized via a single call to standard (bit-) 1-out-of-2 OT functionality;
see Figure 2 for its formal description.
2.4 Commitment Schemes
Commitment schemes are used to enable a party, known as the
sender S, to commit itself to a value while keeping it secret from the
receiver R (this property is called hiding). Furthermore, in a later
stage when the commitment is opened, it is guaranteed that the
“opening” can yield only a single value determined in the commit-
ting phase (this property is called binding). The formal description
of functionality FCOM is depicted in Figure 3.
2.5 Secret-Sharing
A secret-sharing scheme allows distribution of a secret among a
group of n players, each of whom in a sharing phase receive a share
(or piece) of the secret. In its simplest form, the goal of secret-
sharing is to allow only subsets of players of size at least t + 1
to reconstruct the secret. More formally a t + 1-out-of-n secret
д(x) =
′
i
s

x − j
i − j
.
i∈S
j∈S/{i}
sharing scheme comes with a sharing algorithm that on input a
secret s outputs n shares s1, . . . , sn and a reconstruction algorithm
that takes as input ((si)i∈S , S) where |S| > t and outputs either a
secret s′ or ⊥. In this work, we will use the Shamir’s secret sharing
scheme [55] with secrets in F = GF(2κ). We present the sharing
and reconstruction algorithms below:
Sharing algorithm: For any input s ∈ F, pick a random polyno-
mial p(·) of degree t in the polynomial-field F[x] with the
condition that p(0) = s and output p(1), . . . , p(n).
i)i∈S where none of
the s′
are ⊥ and |S| > t, compute a polynomial д(x) such
that д(i) = s′
i
for every i ∈ S. This is possible using Lagrange
i
interpolation where д is given by
Reconstruction algorithm: For any input (s′
Finally the reconstruction algorithm outputs д(0).
Packed secret-sharing. The concept of packed secret-sharing was
introduced by Franking and Yung in [19] in order to reduce the
communication complexity of secure multi-party protocols, and is
an extension of standard secret-sharing. In particular, the authors
considered Shamir’s secret sharing with the difference that the
number of secrets s1, . . . , sℓ is now ℓ instead of a single secret, eval-
uated by a polynomial p(·) on ℓ distinct points. To ensure privacy
in case of t colluding corrupted parties, the random polynomial
must have a degree at least t + ℓ. Packed secret sharing inherits the
linearity property from Shamir’s secret sharing with the additional
benefit that it supports batch (block-wise) multiplications, which
is very useful to achieve secure computation with honest majority
and constant amortized overhead [12]. For this reason we use this
tool in our optimized honest majority MPC protocol Π from Section
4.1 and leverage its advantages in order to improve the overhead of
Π.
2.6 Secure Multiparty Computation (MPC)
Secure two-party computation. We use a standard stand-alone
definition of secure two-party computation protocols. Following
[27], we use two security parameters in our definition. We denote by
κ a computational security parameter and by s a statistical security
parameter that captures a statistical error of up to 2−s. We assume
s ≤ κ. We let F be a two-party functionality that maps a pair of
inputs of equal length to a pair of outputs over some field F.
Let Π = ⟨P0, P1⟩ denote a two-party protocol, where each party
is given an input (x for P0 and y for P1) and security parameters 1s
and 1κ. We allow honest parties to be PPT in the entire input length
(this is needed to ensure correctness when no party is corrupted)
but bound adversaries to time poly(κ) (this effectively means that
we only require security when the input length is bounded by
some polynomial in κ). We denote by REALΠ,A(z),Pi(x, y, κ, s) the
output of the honest party Pi and the adversary A controlling P1−i
in the real execution of Π, where z is the auxiliary input, x is P0’s
initial input, y is P1’s initial input, κ is the computational security
parameter and s is the statistical security parameter. We denote by
IDEALF,S(z),Pi(x, y, κ, s) the output of the honest party Pi and the
simulator S in the ideal model where F is computed by a trusted
Session 2C: Secure Computing ICCS ’19, November 11–15, 2019, London, United Kingdom332party. In some of our protocols the parties have access to ideal
model implementation of certain cryptographic primitives such as
ideal oblivious-transfer (FOT) and we will denote such an execution
by REALFOT
(x, y, κ, s).
Π,A(z),Pi
Definition 1. A protocol Π = ⟨P0, P1⟩ is said to securely com-
pute a functionality F in the presence of active adversaries if the
parties always have the correct output F(x, y) when neither party
is corrupted, and moreover the following security requirement holds.
For any probabilistic poly(κ)-time adversary A controlling Pi (for
i ∈ {0, 1}) in the real model, there exists a probabilistic poly(κ)-time
adversary (simulator) S controlling Pi in the ideal model, such that for
every non-uniform poly(κ)-time distinguisher D there exists a negli-
gible function ν(·) such that the following ensembles are distinguished
by D with at most ν(κ) + 2−s advantage:
• {REALΠ,A(z),Pi(x, y, κ, s)}κ∈N,s∈N,x ,y,z∈{0,1}∗
• {IDEALF,S(z),Pi(x, y, κ, s)}κ∈N,s∈N,x ,y,z∈{0,1}∗
Secure circuit evaluation. The above definition considers F to
be an infinite functionality, taking inputs of an arbitrary length.
However, our protocols (similarly to other protocols from the liter-
ature) are formulated for a finite functionality F : Fα1 × Fα2 → F
described by an arithmetic circuit C (where the computation is
performed over a finite field F). Such protocols are formally cap-
tured by a polynomial-time protocol compiler that, given security
parameters 1κ , 1s and a circuit C, outputs a pair of circuits (P0, P1)
that implement the next message function of the two parties in the
protocol (possibly using oracle calls to a cryptographic primitive or
an ideal functionality oracle). While the correctness requirement
(when no party is corrupted) holds for any choice of κ, s, C, the
security requirement only considers adversaries that run in time
poly(κ). That is, we require indistinguishability (in the sense of
Definition 1) between
• {REALΠ,A(z),Pi(C, x, y, κ, s)}κ∈N,s∈N,C∈C,x ,y,z∈{0,1}∗
• {IDEALF,S(z),Pi(C, x, y, κ, s)}κ∈N,s∈N,C∈C,x ,y,z∈{0,1}∗
where C is the class of arithmetic circuits that take two vectors
of field elements as inputs and output a field element, x, y are of
lengths corresponding to the inputs of C, F is the functionality
computed by C, and the next message functions of the parties
P0, P1 is as specified by the protocol compiler on inputs 1κ , 1s , C.
We assume that C is arranged in d layers where each layer either
contains multiplication or addition gates that are computed over
some field F. The size of the circuit C is written as |C|, and it is
defined to be the number of gates plus the number of wires. Its
multiplicative depth refers to the number of multiplicative layers.
Secure multi-party computation. We will further consider multi-
party protocols with honest majority. Our protocol in this setting
is presented in the client-server model, where 2 clients C0 and C1
distribute the computation amongst n untrusted servers s1, . . . , sn
such that only the clients have inputs and outputs. Our main theo-
rem is proven in the presence of an active adversary that statically
corrupts one of the parties P0 or P1. Nevertheless, our proof of
the honest majority outer protocol (from Section 4.1) utilizes an
adversary that may adaptively and actively corrupt a subset of at
most e servers, as well as statically and passively corrupt at most t
of the servers.
Functionality FTRIPLES
Initialize: On receiving (init) from parties P0 and P1, the function-
ality receives from the adversary S corrupting party Pi the value
∆i ∈ F, samples ∆1−i ← F and sends it to party Pi .
Prep: On receiving (Prep) from both parties, generate a multiplica-
tion triple as follows:
- Sample a, b ← F and compute c = a · b.
- For each x ∈ (a, b, c), authenticate x as follows:
(1) Receive corrupted party’s share xi ∈ F from S.
(2) Sample honest party’s share x1−i ← F subject to x0 +x1 = x.
(3) Run FAUTH(x0, x1), obtain ([x]0, [x]1) and forward to the
corresponding parties.
Figure 4: The authenticated triples functionality.
Functionality FAUTH
This subroutine of FTRIPLES uses the global MAC keys ∆0, ∆1 stored
by the functionality.
On input (x0, x1), authenticate the share xi ∈ F, for each i ∈ {0, 1},
as follows:
For a corrupt Pi : receive a MAC mi ∈ F and a key ki ∈ F from S
and compute the key k1−i = mi + xi · ∆1−i and the MAC m1−i =
ki + x1−i · ∆i .
Finally, output (xi , {ki , mi } to party Pi for each i ∈ {0, 1}.
Figure 5: The authenticated strings functionality.
Functionality FBOLE
Functionality FBOLE communicates with sender S and receiver R,
and adversary S, and is parameterized by an integer m.
(1) Upon receiving the input (sid , (a1, b1), . . . , (am , bm))
from S where ai , bi ∈ F for every i ∈ [m], record
(sid , (b1, b1), . . . , (am , bm)).
(2) Upon receiving (sid , x1, . . . , xm) from R where xi ∈ F for
every i ∈ [m], send ai x + bi to R for all i ∈ [m]. Otherwise,
abort.
Figure 6: The batch OLE functionality.
Definition 2 (Consistent views). We say that a pair of views
Vi , Vj are consistent (with respect to a protocol Π and some public
input x) if the outgoing messages implicit in Vi are identical to the
incoming messages reported in Vj and vice versa.
2.7 Omitted Functionalities
We specify the omitted functionalities for authenticated triples and
batch OLE in Figures 4 and 5, respectively.
3 AN OVERVIEW OF THE IPS COMPILER
The protocols presented in [30] were designed based on a novel
compiler that achieves malicious security using the “MPC-in-the-
head” paradigm. This powerful paradigm established (amongst
Session 2C: Secure Computing ICCS ’19, November 11–15, 2019, London, United Kingdom333other results) the first constant-rate two-party protocol in the OT-
hybrid model (which also generalizes to a constant number of
parties),4 as well as the first black-box constant round protocol
with no honest majority. These generic protocols securely realize
an arbitrary functionality F with active security, and while making
black-box use of the following two ingredients: (1) an active MPC
protocol which realizes F in the honest majority setting, and (2) a
passive MPC protocol in the dishonest majority setting that realizes
the next-message function ρ defined with respect to the players
that participate in (1).
We briefly recall the details of the IPS compiler in the two-party
case. We start with a multiparty protocol among 2 clients and
n additional servers (s1, . . . , sn) that is information-theoretically
secure when a majority of the servers are honest. This is referred to
as the outer protocol. This outer protocol is simulated by the actual