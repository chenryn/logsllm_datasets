以下是经过优化的文本，使其更加清晰、连贯和专业：

---

### SETNO - Set if Not Overflow (386+)
**用法:** `SETNO dest`  
**修改标志位:** 无  
**功能:** 如果溢出标志（Overflow Flag）清除，则将操作数设置为1；否则设置为0。  
| 操作数 | 808x | 286 | 386 | 486 | 字节数 |
|--------|------|-----|-----|-----|--------|
| reg8   | -    | -   | 4   | 3   | 3      |
| mem8   | -    | -   | 5   | 4   | 3      |

### SETP/SETPE - Set if Parity / Set if Parity Even (386+)
**用法:** `SETP dest` 或 `SETPE dest`  
**修改标志位:** 无  
**功能:** 如果奇偶校验标志（Parity Flag）设置，则将操作数设置为1；否则设置为0。  
| 操作数 | 808x | 286 | 386 | 486 | 字节数 |
|--------|------|-----|-----|-----|--------|
| reg8   | -    | -   | 4   | 3   | 3      |
| mem8   | -    | -   | 5   | 4   | 3      |

### SETNP/SETPO - Set if No Parity / Set if Parity Odd (386+)
**用法:** `SETNP dest` 或 `SETPO dest`  
**修改标志位:** 无  
**功能:** 如果奇偶校验标志清除，则将操作数设置为1；否则设置为0。  
| 操作数 | 808x | 286 | 386 | 486 | 字节数 |
|--------|------|-----|-----|-----|--------|
| reg8   | -    | -   | 4   | 3   | 3      |
| mem8   | -    | -   | 5   | 4   | 3      |

### SGDT - Store Global Descriptor Table (286+ 特权指令)
**用法:** `SGDT dest`  
**修改标志位:** 无  
**功能:** 将全局描述符表（GDT）寄存器存储到指定的操作数中。  
| 操作数 | 808x | 286 | 386 | 486 | 字节数 |
|--------|------|-----|-----|-----|--------|
| mem64  | -    | 11  | 9   | 10  | 5      |

### SIDT - Store Interrupt Descriptor Table (286+ 特权指令)
**用法:** `SIDT dest`  
**修改标志位:** 无  
**功能:** 将中断描述符表（IDT）寄存器存储到指定的操作数中。  
| 操作数 | 808x | 286 | 386 | 486 | 字节数 |
|--------|------|-----|-----|-----|--------|
| mem64  | -    | 12  | 9   | 10  | 5      |

### SHR - Shift Logical Right
**用法:** `SHR dest, count`  
**修改标志位:** CF, OF, PF, SF, ZF (AF 不确定)  
**功能:** 将目标右移 "count" 位，并在左侧填充零。进位标志包含最后一位移出的值。  
| 操作数         | 808x | 286 | 386 | 486 | 字节数 |
|----------------|------|-----|-----|-----|--------|
| reg, 1         | 2    | 2   | 3   |     | 2      |
| mem, 1         | 15+EA| 7   | 7   |     | 2-4    |
| reg, CL        | 8+4n | 5+n | 3   |     | 2      |
| mem, CL        | 20+EA+4n | 8+n | 7   |     | 2-4    |
| reg, immed8    | -    | 5+n | 3   |     | 3      |
| mem, immed8    | -    | 8+n | 7   |     | 3-5    |

### SHLD/SHRD - Double Precision Shift (386+)
**用法:** `SHLD dest, src, count` 或 `SHRD dest, src, count`  
**修改标志位:** CF, PF, SF, ZF (OF, AF 不确定)  
**功能:** `SHLD` 将 "dest" 左移 "count" 次，并用 "src" 的最高有效位填充空位。`SHRD` 将 "dest" 右移 "count" 次，并用第二个操作数的最低有效位填充空位。仅使用 "count" 的低5位。  
| 操作数           | 808x | 286 | 386 | 486 | 字节数 |
|------------------|------|-----|-----|-----|--------|
| reg16, reg16, immed8 | -    | -   | 3   | 2   | 4      |
| reg32, reg32, immed8 | -    | -   | 3   | 2   | 4      |
| mem16, reg16, immed8 | -    | -   | 7   | 3   | 6      |
| mem32, reg32, immed8 | -    | -   | 7   | 3   | 6      |
| reg16, reg16, CL     | -    | -   | 3   | 3   | 3      |
| reg32, reg32, CL     | -    | -   | 3   | 3   | 3      |
| mem16, reg16, CL     | -    | -   | 7   | 4   | 5      |
| mem32, reg32, CL     | -    | -   | 7   | 4   | 5      |

### SLDT - Store Local Descriptor Table (286+ 特权指令)
**用法:** `SLDT dest`  
**修改标志位:** 无  
**功能:** 将本地描述符表（LDT）寄存器存储到指定的操作数中。  
| 操作数 | 808x | 286 | 386 | 486 | 字节数 |
|--------|------|-----|-----|-----|--------|
| reg16  | -    | 2   | 2   | 2   | 3      |
| mem16  | -    | 2   | 2   | 3   | 5      |

### SMSW - Store Machine Status Word (286+ 特权指令)
**用法:** `SMSW dest`  
**修改标志位:** 无  
**功能:** 将机器状态字（MSW）存储到 "dest" 中。  
| 操作数 | 808x | 286 | 386 | 486 | 字节数 |
|--------|------|-----|-----|-----|--------|
| reg16  | -    | 2   | 10  | 2   | 3      |
| mem16  | -    | 3   | 3   | 3   | 5      |

### STC - Set Carry
**用法:** `STC`  
**修改标志位:** CF  
**功能:** 将进位标志设置为1。  
| 操作数 | 808x | 286 | 386 | 486 | 字节数 |
|--------|------|-----|-----|-----|--------|
| none   | 2    | 2   | 2   | 2   | 1      |

### STD - Set Direction Flag
**用法:** `STD`  
**修改标志位:** DF  
**功能:** 将方向标志设置为1，使字符串指令自动递减SI和DI而不是递增。  
| 操作数 | 808x | 286 | 386 | 486 | 字节数 |
|--------|------|-----|-----|-----|--------|
| none   | 2    | 2   | 2   | 2   | 1      |

### STI - Set Interrupt Flag (启用中断)
**用法:** `STI`  
**修改标志位:** IF  
**功能:** 将中断标志设置为1，以启用所有硬件中断的识别。如果硬件设备生成中断，必须发出中断结束（EOI）以启用相同或更低优先级的其他硬件中断。  
| 操作数 | 808x | 286 | 386 | 486 | 字节数 |
|--------|------|-----|-----|-----|--------|
| none   | 2    | 2   | 2   | 5   | 1      |

### STOS - Store String (字节、字或双字)
**用法:** `STOS dest` 或 `STOSB` 或 `STOSW` 或 `STOSD`  
**修改标志位:** 无  
**功能:** 将累加器中的值存储到 ES:(E)DI 处（即使给出了操作数）。(E)DI 根据操作数大小（或指令格式）和方向标志的状态进行递增或递减。与 REP 前缀一起使用。  
| 操作数 | 808x | 286 | 386 | 486 | 字节数 |
|--------|------|-----|-----|-----|--------|
| dest   | 11   | 3   | 4   | 5   | 1      |

### STR - Store Task Register (286+ 特权指令)
**用法:** `STR dest`  
**修改标志位:** 无  
**功能:** 将当前任务寄存器存储到指定的操作数中。  
| 操作数 | 808x | 286 | 386 | 486 | 字节数 |
|--------|------|-----|-----|-----|--------|
| reg16  | -    | 2   | 2   | 2   | 3      |
| mem16  | -    | 3   | 2   | 3   | 5      |

### SUB - Subtract
**用法:** `SUB dest, src`  
**修改标志位:** AF, CF, OF, PF, SF, ZF  
**功能:** 从目标中减去源，并将结果存储在目标中。  
| 操作数       | 808x | 286 | 386 | 486 | 字节数 |
|--------------|------|-----|-----|-----|--------|
| reg, reg     | 3    | 2   | 2   | 1   | 2      |
| mem, reg     | 16+EA| 7   | 6   | 3   | 2-4    |
| reg, mem     | 9+EA | 7   | 7   | 2   | 2-4    |
| reg, immed   | 4    | 3   | 2   | 1   | 3-4    |
| mem, immed   | 17+EA| 7   | 7   | 3   | 3-6    |
| accum, immed | 4    | 3   | 2   | 1   | 2-3    |

### TEST - Test For Bit Pattern
**用法:** `TEST dest, src`  
**修改标志位:** CF, OF, PF, SF, ZF (AF 不确定)  
**功能:** 对两个操作数执行逻辑与运算，并更新标志寄存器而不保存结果。  
| 操作数       | 808x | 286 | 386 | 486 | 字节数 |
|--------------|------|-----|-----|-----|--------|
| reg, reg     | 3    | 2   | 1   | 1   | 2      |
| reg, mem     | 9+EA | 6   | 5   | 1   | 2-4    |
| mem, reg     | 9+EA | 6   | 5   | 2   | 2-4    |
| reg, immed   | 5    | 3   | 2   | 1   | 3-4    |
| mem, immed   | 11+EA| 6   | 5   | 2   | 3-6    |
| accum, immed | 4    | 3   | 2   | 1   | 2-3    |

### VERR - Verify Read (286+ 保护模式)
**用法:** `VERR src`  
**修改标志位:** ZF  
**功能:** 验证指定段选择器在当前特权级别是否有效且可读。如果段可读，则设置零标志，否则清除零标志。  
| 操作数 | 808x | 286 | 386 | 486 | 字节数 |
|--------|------|-----|-----|-----|--------|
| reg16  | -    | 14  | 10  | 11  | 3      |
| mem16  | -    | 16  | 11  | 11  | 5      |

### VERW - Verify Write (286+ 保护模式)
**用法:** `VERW src`  
**修改标志位:** ZF  
**功能:** 验证指定段选择器在当前特权级别是否有效且可写。如果段可写，则设置零标志，否则清除零标志。  
| 操作数 | 808x | 286 | 386 | 486 | 字节数 |
|--------|------|-----|-----|-----|--------|
| reg16  | -    | 14  | 15  | 11  | 3      |
| mem16  | -    | 16  | 16  | 11  | 5      |

### WAIT/FWAIT - 事件等待
**用法:** `WAIT` 或 `FWAIT`  
**修改标志位:** 无  
**功能:** CPU 进入等待状态，直到协处理器信号表示其操作已完成。此指令用于防止CPU访问协处理器可能暂时使用的内存。WAIT 和 FWAIT 是相同的。  
| 操作数 | 808x | 286 | 386 | 486 | 字节数 |
|--------|------|-----|-----|-----|--------|
| none   | 4    | 3   | 6+  | 1-3 | 1      |

### WBINVD - Write-Back and Invalidate Cache (486+)
**用法:** `WBINVD`  
**修改标志位:** 无  
**功能:** 刷新内部缓存，然后向外部缓存发出信号，要求写回当前数据，随后发出信号刷新外部缓存。  
| 操作数 | 808x | 286 | 386 | 486 | 字节数 |
|--------|------|-----|-----|-----|--------|
| none   | -    | -   | -   | 5   | 2      |

### XCHG - Exchange
**用法:** `XCHG dest, src`  
**修改标志位:** 无  
**功能:** 交换源和目标的内容。  
| 操作数       | 808x | 286 | 386 | 486 | 字节数 |
|--------------|------|-----|-----|-----|--------|
| reg, reg     | 4    | 3   | 3   | 3   | 2      |
| mem, reg     | 17+EA| 5   | 5   | 5   | 2-4    |
| reg, mem     | 17+EA| 5   | 5   | 3   | 2-4    |
| accum, reg   | 3    | 3   | 3   | 3   | 1      |
| reg, accum   | 3    | 3   | 3   | 3   | 1      |

### XLAT/XLATB - Translate
**用法:** `XLAT translation-table` 或 `XLATB` (masm 5.x)  
**修改标志位:** 无  
**功能:** 用由 BX 寻址的用户表中的字节替换 AL 中的字节。AL 的原始值是翻译表的索引。等效于 `MOV AL, [BX + AL]`。  
| 操作数          | 808x | 286 | 386 | 486 | 字节数 |
|-----------------|------|-----|-----|-----|--------|
| table offset    | 11   | 5   | 5   | 4   | 1      |

### XOR - Exclusive OR
**用法:** `XOR dest, src`  
**修改标志位:** CF, OF, PF, SF, ZF (AF 不确定)  
**功能:** 对操作数执行按位异或运算，并将结果返回到目标中。  
| 操作数       | 808x | 286 | 386 | 486 | 字节数 |
|--------------|------|-----|-----|-----|--------|
| reg, reg     | 3    | 2   | 2   | 1   | 2      |
| mem, reg     | 16+EA| 7   | 6   | 3   | 2-4    |
| reg, mem     | 9+EA | 7   | 7   | 2   | 2-4    |
| reg, immed   | 4    | 3   | 2   | 1   | 3-4    |
| mem, immed   | 17+EA| 7   | 7   | 3   | 3-6    |
| accum, immed | 4    | 3   | 2   | 1   | 2-3    |

---