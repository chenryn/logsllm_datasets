title:QUIRE: Lightweight Provenance for Smart Phone Operating Systems
author:Michael Dietz and
Shashi Shekhar and
Yuliy Pisetsky and
Anhei Shu and
Dan S. Wallach
Quire: Lightweight Provenance for Smart Phone Operating Systems
Michael Dietz
PI:EMAIL
Shashi Shekhar
PI:EMAIL
Yuliy Pisetsky
PI:EMAIL
Anhei Shu
PI:EMAIL
Dan S. Wallach
PI:EMAIL
Abstract
Smartphone apps are often granted to privilege to run
with access to the network and sensitive local resources.
This makes it diﬃcult for remote endpoints to place any
trust in the provenance of network connections originat-
ing from a user’s device. Even on the phone, diﬀerent
apps with distinct privilege sets can communicate with
one another. This can allow one app to trick another
into improperly exercising its privileges (resulting in a
confused deputy attack). In Quire, we engineered two
new security mechanisms into Android to address these
issues. First, Quire tracks the call chain of on-device
IPCs, allowing an app the choice of operating with the
reduced privileges of its callers or exercising its full priv-
ilege set by acting explicitly on its own behalf. Second,
a lightweight signature scheme allows any app to create
a signed statement that can be veriﬁed by any app on
the same phone. Both of these mechanisms are reﬂected
in network RPCs. This allows remote systems visibility
into the state of the phone when the RPC was made. We
demonstrate the usefulness of Quire with two example
applications: an advertising service that runs advertise-
ments separately from their hosting applications, and a
remote payment system. We show that Quire’s perfor-
mance overhead is minimal.
1
Introduction
On a smartphone, applications are typically given broad
permissions to make network connections, access local
data repositories, and issue requests to other apps on the
device. For Apple’s iPhone, the only mechanism that
protects users from malicious apps is the vetting pro-
cess for an app to get into Apple’s app store.
(Apple
also has the ability to remotely delete apps, although it’s
something of an emergency-only system.) However, any
iPhone app might have its own security vulnerabilities,
perhaps through a buﬀer overﬂow attack, which can give
an attacker full access to the entire phone.
The Android platform, in contrast, has no signiﬁcant
vetting process before an app is posted to the Android
Market.
Instead, the Android OS insulates apps from
one another and the underlying Android runtime. Ap-
plications from diﬀerent authors run with diﬀerent Unix
user ids, containing the damage if an application is com-
promised. (In this aspect, Android follows a design sim-
ilar to SubOS [20].) However, this does nothing to de-
fend a trusted app from being manipulated by a mali-
cious app via IPC (i.e., a confused deputy attack [18],
intent stealing/spooﬁng [9], or other privilege escalation
attacks [11]). Likewise, there is no mechanism to prevent
an IPC callee from misrepresenting the intentions of its
caller to a third party.
This mutual distrust arises in many mobile applica-
tions. Consider the example of a mobile advertisement
system. An application hosting an ad would rather the ad
run in a distinct process, with its own user-id, so bugs in
the ad system do not impact the hosting app. Similarly,
the ad system might not trust its host to display the ad
correctly, and must be concerned with hosts that try to
generate fake clicks to inﬂate their ad revenue.
To address these concerns, we introduce Quire, a low-
overhead security mechanism that provides important
context in the form of provenance and OS managed data
security to local and remote apps communicating by IPC
and RPC respectively. Quire uses two techniques to pro-
vide security to communicating applications.
First, Quire transparently annotates IPCs occurring
within the phone such that the recipient of an IPC re-
quest can observe the full call chain associated with the
request. When an application wishes to make a network
RPC, it might well connect to a raw network socket, but
it would lack credentials that we can build into the OS,
which can speak to the state of an RPC in a way that
an app cannot forge. (This contextual information can
be thought of as a generalization of the information pro-
vided by the recent HTTP Origin header [2], used by web
servers to help defeat cross-site request forgery (CSRF)
attacks.)
Second, Quire uses simple cryptographic mechanisms
to protect data moving over IPC and RPC channels.
Quire provides a mechanism for an app to tag an object
with cheap message authentication codes, using keys that
are shared with a trusted OS service. When data anno-
tated in this manner moves oﬀ the device, the OS can
verify the signature and speak to the integrity of the mes-
sage in the RPC.
Applications. Quire enables a variety of useful appli-
cations. Consider the case of in-application advertising.
A large number of free applications include advertise-
ments from services like AdMob. AdMob is presently
implemented as a library that runs in the same process
as the application hosting the ad, creating trivial oppor-
tunities for the application to spoof information to the
server, such as claiming an ad is displayed when it isn’t,
or claiming an ad was clicked when it wasn’t. In Quire,
the advertisement service runs as a separate application
and interacts with the displaying app via IPC calls. The
remote application’s server can now reliably distinguish
RPC calls coming from its trusted agent, and can fur-
ther distinguish legitimate clicks from forgeries, because
every UI event is tagged with a Message Authentication
Code(MAC) [21], for which the OS will vouch.
Consider also the case of payment services. Many
smartphone apps would like a way to sell things, lever-
aging payment services from PayPal, Google Checkout,
and other such services. We would like to enable an ap-
plication to send a payment request to a local payment
agent, who can then pass the request on to its remote
server. The payment agent must be concerned with the
main app trying to issue fraudulent payment requests, so
it needs to validate requests with the user. Similarly, the
main app might be worried about the payment agent mis-
behaving, so it wants to create unforgeable “purchase or-
ders” which the payment app cannot corrupt. All of this
can be easily accomplished with our new mechanisms.
Challenges. For Quire to be successful, we must ac-
complish a number of goals. Our design must be suﬃ-
ciently general to capture a variety of use cases for aug-
mented internal and remote communication. Toward that
end, we build on many concepts from Taos [38], includ-
ing its compound principals and logic of authentication
(see Section 2). Our implementation must be fast. Ev-
ery IPC call in the system must be annotated and must be
subsequently veriﬁable without having a signiﬁcant im-
pact on throughput, latency, or battery life. (Section 3 de-
scribes Quire’s implementation, and Section 5 presents
our performance measurements.) Quire expands on re-
lated work from a variety of ﬁelds, including existing
Android research, web security, distributed authentica-
tion logics, and trusted platform measurements (see Sec-
tion 6). We expect Quire to serve as a platform for future
work in secure UI design, as a substrate for future re-
search in web browser engineering, and as starting point
for a variety of applications (see Section 7).
2 Design
Fundamentally, the design goal of Quire is to allow
apps to reason about the call-chain and data provenance
of requests, occurring on both a host platform via IPC
or on a remote server via RPC, before committing to
any security-relevant decisions. This design goal is
shared by a variety of other systems, ranging from Java’s
stack inspection [34, 35] to many newer systems that
rely on data tainting or information ﬂow control
(see,
e.g., [24, 25, 13]). In Quire, much like in stack inspec-
tion, we wish to support legacy code without much, if
any modiﬁcation. However, unlike stack inspection, we
don’t want to modify the underlying system to annotate
and track every method invocation, nor would we like to
suﬀer the runtime costs of dynamic data tainting as in
TaintDroid [13]. We also wish to operate correctly with
apps that have natively compiled code, not just Java code
(an issue with traditional stack inspection and with Taint-
Droid). We observe that in order to accomplish these
goals, we only need to track calls across IPC boundaries,
which happen far less frequently than method invoca-
tions, and which already must pay signiﬁcant overheads
for data marshaling, context switching, and copying.
Stack inspection has the property that the available
privileges at the end of a call chain represent the intersec-
tion of the privileges of every app along the chain (more
on this in Section 2.2), which is good for preventing con-
fused deputy attacks, but doesn’t solve a variety of other
problems, such as validating the integrity of individual
data items as they are passed from one app to another or
over the network. For that, we need semantics akin to
digital signatures, but we need to be much more eﬃcient
as attaching digital signatures to all IPC calls would be
too slow (more on this in Section 2.3).
Versus information ﬂow. A design that focuses on
IPC boundaries is necessarily less precise than dynamic
taint analysis, but
it’s also incredibly ﬂexible. We
can avoid the need to annotate code with static secu-
rity policies, as would be required in information ﬂow-
typed systems like Jif [26]. We similarly do not need
to poly-instantiate services to ensure that each instance
only handles a single security label as in systems like
DStar/HiStar [39] or IPC Inspection [15].
Instead, in
Quire, an application which handles requests from mul-
tiple callers will pass along an object annotated with the
originator’s context when it makes downstream requests
on behalf of the original caller.
Likewise, where a dynamic tainting system like Taint-
Droid [13] would generally allow a sensitive operation,
like learning the phone’s precise GPS location, to occur,
but would forbid it from ﬂowing to an unprivileged app;
Quire will carry the unprivileged context through to the
point where the dangerous operation is about to happen,
and will then forbid the operation. An information ﬂow
approach is thus more likely to catch corner cases (e.g.,
where an app caches location data, so no privileged call
is ever performed), but is also more likely to have false
positives (where it must conservatively err on the side of
ﬂagging a ﬂow that is actually just ﬁne). A programmer
in an information ﬂow system would need to tag these
false positive corner cases as acceptable, whereas a pro-
grammer using Quire would need to add additional se-
curity checks to corner cases that would otherwise be al-
lowed.
2.1 Authentication logic and cryptography
In order to reason about the semantics of Quire, we
need a formal model to express what the various oper-
ations in Quire will do. Toward that end, we use the
Abadi et al. [1] (hereafter “ABLP”) logic of authentica-
tion, as used in Taos [38]. In this logic, principals make
statements, which can include various forms of quotation
(“Alice says Bob says X”) and authorization (e.g., “Al-
ice says Bob speaks for Alice”). ABLP nicely models
the behavior of cryptographic operations, where crypto-
graphic key material speaks for other principals, and we
can use this model to reason about cross-process com-
munication on a device as well as over the network.
For the remainder of the current section, we will ﬂesh
out Quire’s IPC and RPC design in terms of ABLP and
the cryptographic mechanisms we have adopted.
2.2
IPC provenance
Android IPC background. The application separa-
tion that Android relies on to protect apps from one an-
other has an interesting side eﬀect; whenever two appli-
cations wish to communicate they must do so via An-
droid’s Binder IPC mechanism. All cross application
communication occurs over these Binder IPC channels,
from clicks delivered from the OS to an app to requests
for sensitive resources like a users list of contacts or GPS
location.
It is therefore critically important to protect
these inter-application communication channels against
attack.
Figure 1: Defeating confused deputy attacks.
Quire IPC design. The goal of Quire’s IPC prove-
nance system is to allow endpoints that protect sensitive
resources, like a user’s ﬁne grained GPS data or contact
information, to reason about the complete IPC call-chain
of a request for the resource before granting access to the
requesting app.
Quire realizes this goal by modifying the Android IPC
layer to automatically build calling context as an IPC
call-chain is formed. Consider a call-chain where three
principals A, B, and C, are communicating. If A calls B
who then calls C without keeping track of the call-stack,
C only knows that B initiated a request to it, not that
the call from A prompted B to make the call to C. This
loss of context can have signiﬁcant security implications
in a system like Android where permissions are directly
linked to the identity of the principal requesting access to
a sensitive resource.
To address this, Quire’s design is for any given callee
to retain its caller’s call-chain and pass this to every
downstream callee. The callee will automatically have
its caller’s principal prepended to the ABLP statement.
In our above scenario, C will receive a statement “B says
A says Ok”, where Ok is an abstract token representing
that the given resource is authorized to be used. It’s now
the burden of C (or Quire’s privilege manager, operat-
ing on C’s behalf) to prove Ok. As Wallach et al. [35]
demonstrated, this is equivalent to validating that each
principal in the calling chain is individually allowed to
perform the action in question.
Confused and intentional deputies. The current An-
droid permission system ties an apps permissions to the
unique user-id it is assigned at install time. The Android
system then resolves the user-id of an app requesting ac-
cess to a sensitive resource into a permission set that de-
termines if the app’s request for the resource will suc-
UserspaceUID: 1Call Chain: ()Call TM(...)EvilAppUID: 2Call Chain: (1)Call LP(...)TrustedMapperUID: 3Call Chain: (1,2)VerifyCallChain(...)LocationProviderOperating SystemCall chain: (1,2,3)1         no GPS2         GPS okay3         GPS okayPrivilegeManagerceed. This approach to permissions enables applications
that have permission to access a resource to act as both
intentional and confused deputies. The current Android
permission model assumes that all apps act as intentional