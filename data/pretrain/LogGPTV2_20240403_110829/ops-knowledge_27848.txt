User:  How to configure horizontal auto-scaling in Kubernetes cluster?
Assistant: Kubernetes provides horizontal autoscaling, which can automatically expand or shrink the number of application instances to meet load demand. The following are the steps to configure horizontal auto-scaling in a Kubernetes cluster: 1. Create a Deployment: Create a Deployment object. Deployment is responsible for managing the number of Pod replicas and updating policies. 2. Add Pod definition and resource constraints: In the Pod template of Deployment, define the application container to be deployed, resource requirements, and constraints. 3. Create a HorizontalPodAutoscaler: Create a HorizontalPodAutoscaler (HPA) object and specify parameters such as the Deployment to be automatically adjusted and the target CPU utilization. HPA will periodically monitor the CPU utilization of the Deployment and automatically adjust its replica count. 4. Perform automatic scaling test: Test through stress test or simulated load to observe whether HPA automatically adjusts the number of Pod replicas as expected. The following is an example to demonstrate how to configure horizontal auto-scaling in Kubernetes: 1. Create a Deployment object ``` apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deployment spec: replicas: 3 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:1.14.2 resources: limits: cpu: "1" ``` 2. Create HorizontalPodAutoscaler object``` apiVersion: autoscaling/v2beta2 kind : HorizontalPodAutoscaler metadata: name: nginx-hpa spec: scaleTargetRef: apiVersion: apps/v1 kind: Deployment name: nginx-deployment minReplicas: 2 maxReplicas: 5 metrics: - type: Resource resource: name: cpu targetAverageUtilization: 5 0 ``` in In this example, HPA will monitor the CPU utilization of the Deployment, and if it reaches 50%, it will automatically expand the number of copies of the Pod, up to 5. HPA will also ensure that at least 2 copies of the Pod are running. 3. Perform an automatic scaling test You can use a load testing tool (such as Apache JMeter) to simulate the load and observe whether HPA automatically adjusts the number of copies of the Pod as expected. You can also manually trigger the scaling operation, for example, manually adjust the number of copies of the Deployment through the kubectl command, and observe whether HPA automatically follows up when necessary.