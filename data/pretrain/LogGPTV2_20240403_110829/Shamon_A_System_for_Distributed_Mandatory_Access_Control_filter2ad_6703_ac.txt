### 严格模式下的监督域

这些监督域作为MAC虚拟机（VM），执行必要的策略转换，将IPsec隧道上的SELinux标签转换为本地sHype类型 [19, 20]。本授权使用仅限于清华大学，并于2021年3月25日12:30:16 UTC从IEEE Xplore下载。应用限制。

#### 用户VM原型 - Shamon
- **domU用户VM**
  - **BOINC客户端**：标准Linux系统
  - **dom0 MAC VM**：运行SELinux，负责策略转换
  - **SELinux标记的IPsec隧道**
  - **BOINC服务器**：Apache、MySQL、PHP，标准Linux系统
  - **Xen Hypervisor w/ sHype MAC**：在物理机器1和物理机器2上运行
  - **图4**：展示了分布式计算原型中共享参考监视器（Shamon）的架构。

### sHype强制访问控制（MAC）在Xen中的实现

我们的实现基于简单类型强制（STE）策略，其中Xen VM只有被分配了相同的STE类型时才能共享资源和数据。图4显示了我们原型的结构。

#### Shamon的基础 - sHype
- **sHype**：一个适用于不同虚拟机监控程序的hypervisor安全架构 [30]。
  - 提供简单、系统无关且强大的安全策略和执行保证。
  - 包含两个策略组件：
    - **Simple Type Enforcement (STE)**：控制不同VM之间的资源共享。
    - **Chinese Wall (CHWALL)**：控制哪些VM可以同时在同一系统上运行（在实验中未使用）。

### 设备驱动程序和MAC VM在Xen上的实现
- 我们在Xen 3.0的不稳定开发版本xen-unstable上构建并维护Shamon原型。
- dom0是特权VM，具有对系统所有设备的访问权限，在我们的原型中，只有一个设备驱动程序VM - dom0。
- 配置的xen-unstable启用了sHype，并强制执行Simple Type Enforcement (STE) 策略。
- dom0运行SELinux，作为MAC VM，负责将标记的IPsec隧道上的SELinux标签转换为本地sHype类型。

### 用户VM在Xen上的实现
- **shype2上的domU**：运行Fedora Core 4，安装了Apache、MySQL、PHP和BOINC服务器软件。
  - BOINC服务器向客户端分发计算任务，收集和汇总结果，并通过其托管的网站提供状态信息。
- **shype1上的domU**：运行Fedora Core 4和BOINC客户端软件。
  - BOINC客户端接受来自BOINC服务器的计算任务，运行任务并将结果返回给服务器。

### 标记的IPsec隧道
- 在分布式联盟中的机器之间提供经过身份验证和加密的通信，同时传递MAC类型信息。
- 使用标记的IPsec [17] 以隧道模式 [20] 作为dom0（MAC VM）之间的安全通信机制。
- 描述了从远程系统到达dom0并目的地为本地domU的数据包处理过程；反之亦然。

### 类型映射和执行
- IPsec隧道和MAC VM确保分布式联盟中的机器执行语义等效的sHype策略。
- 映射从sHype类型到SELinux主体类型的配置是静态的。
- SELinux主体类型的形式为`user:role:type`，而sHype类型可以是任意字符串。
- 例如，sHype类型`green_t`将映射到SELinux类型`domu_u:domu_r:green_t`。

### 完整性测量
- 通过确定每个系统是否运行形成可接受的参考监视器并强制执行所需安全属性的软件来建立信任。
- 使用基于可信平台模块（TPM）的远程证明。
- 使用完整性测量架构（IMA）[31] 来验证在Shamon之上运行的用户VM（即domUs）的完整性。
- 使用虚拟TPM（vTPM）设施[9] 报告加载到domUs中的软件的测量值。

### 实验
- 添加了两个数据结构（链表）到dom0内核中，以维护SELinux和sHype之间策略转换所需的附加信息。
- 进行了一系列实验以验证分布式MAC系统的负载隔离和软件完整性属性。
- 构建了适当的sHype、SELinux和IPSec策略，以验证隔离性和完整性。

### 隔离验证
- 构建了sHype、SELinux和IPSec策略，并添加了颜色命名的类型（如red_t、green_t、blue_t）。
- 只有当所有适当的策略都就位时，数据包才能在两个domU之间流动。
- BOINC服务器成功地向BOINC客户端发送计算任务，客户端运行任务并将结果返回给服务器。

### 完整性验证
- 构建了一个包含每个组件测量值（即哈希值）及其是否受信任的数据库。
- 测量了关键受信任组件（如Xen hypervisor的可加载镜像）的哈希值，并将其添加到数据库中。

以上内容是对原文的优化，使其更加清晰、连贯和专业。希望这对你有所帮助！