### Provisioning Profile Validation

The provisioning profile is validated by the `MISProvisioningProfileCheckValidity` function within the `libmis` dynamic library, which can be found in the `dyld_shared_cache`. This crucial library will be referenced again later. The validation process checks the following criteria before accepting the profile:

- The signing certificate must be issued by the Apple iPhone Certificate Authority.
- The signing certificate must be named "Apple iPhone OS Provisioning Profile Signing."
- The certificate signing chain must not exceed three links.
- The root certificate must have a specific SHA1 hash value.
- The version number of the profile must be 1.
- The UDID of the device must be present, or the profile must contain the `ProvisionsAllDevices` key.
- The profile must not be expired.

### Understanding Application Signing

Xcode can be used to sign applications intended for developer use. These applications will only run on devices with the associated provisioning profile. For example, using the `codesign` tool, you can inspect such an app:

```sh
$ codesign -dvvv test-dyld.app
Executable=/Users/cmiller/Library/Developer/Xcode/DerivedData/iphone-payload/Products/Debug-iphoneos/test-dyld.app/test-dyld
Identifier=Accuvant.test-dyld
Format=bundle with Mach-O thin (armv7)
CodeDirectory v=20100 size=287 flags=0x0(none) hashes=6+5 location=embedded
Hash type=sha1 size=20
CDHash=977d68fb31cfbb255da01b401455292a5f89843c
Signature size=4287
Authority=iPhone Developer: Charles Miller (7URR5G4CD1)
Authority=Apple Worldwide Developer Relations Certification Authority
Authority=Apple Root CA
Signed Time=Sep 9, 2011 3:30:50 PM
Info.plist entries=26
Sealed Resources rules=3 files=5
Internal requirements count=1 size=208
```

This output shows that the application is signed by an individual developer, in this case, Charles Miller. The app will be rejected on devices without the correct provisioning profile. If the app is submitted to the Apple App Store and approved, Apple will sign it, making it available for download and runnable on any device. For instance, the `AngryBirds` app:

```sh
$ codesign -dvvv AngryBirds.app
Executable=/Users/cmiller/book/iphone-book2/AngryBirds.app/AngryBirds
Identifier=com.clickgamer.AngryBirds
Format=bundle with Mach-O thin (armv6)
CodeDirectory v=20100 size=19454 flags=0x0(none) hashes=964+5 location=embedded
Hash type=sha1 size=20
CDHash=8d41c1d2f2f1edc5cd66b2ee8ba582f1d41163ac
Signature size=3582
Authority=Apple iPhone OS Application Signing
Authority=Apple iPhone Certification Authority
Authority=Apple Root CA
Signed Time=Jul 25, 2011 6:43:55 AM
Info.plist entries=29
Sealed Resources rules=5 files=694
Internal requirements count=2 size=320
```

Here, the app is signed by the "Apple iPhone OS Application Signing" authority, which is accepted by default on all devices.

### Executables on the iPhone

Executables on an iPhone may be signed like App Store apps, but they are often signed using an ad hoc method. For example, the `CommCenter` executable:

```sh
$ codesign -dvvv CommCenter
Executable=/Users/cmiller/book/iphone-book2/CommCenter
Identifier=com.apple.CommCenter
Format=Mach-O thin (armv7)
CodeDirectory v=20100 size=6429 flags=0x2(adhoc) hashes=313+5 location=embedded
Hash type=sha1 size=20
CDHash=5ce2b6ddef23ac9fcd0dc5b873c7d97dc31ca3ba
Signature=adhoc
Info.plist=not bound
Sealed Resources=none
Internal requirements count=1 size=332
```

Although this executable is not signed, it can still be trusted if its hash is included in the kernel's static trust cache. This allows the binary to execute as if it had a valid and accepted signature.

### Entitlements in Signed Applications

Signed applications can also include a plist file specifying a set of entitlements. Using the `ldid` tool, you can list the entitlements for an application. For example, the `AngryBirds` app:

```sh
# ldid -e AngryBirds
application-identifier: G8PVV3624J.com.clickgamer.AngryBirds
aps-environment: production
keychain-access-groups: G8PVV3624J.com.clickgamer.AngryBirds
```

The `application-identifier` provides a unique prefix for each application, and the `keychain-access-groups` allow apps to secure their data. Entitlements provide a mechanism for differentiating privileges between apps, even if they run as the same user and have the same sandbox rules. The entitlements are determined by the provisioning profile, allowing Apple to limit the functionality of certain apps or those written by a particular developer.

For another example, consider the `gdb` debugger, which can be obtained from the iOS SDK:

```sh
# ldid -e /usr/bin/gdb
com.apple.springboard.debugapplications
get-task-allow
task_for_pid-allow
```

`gdb` has additional entitlements necessary for debugging other applications.

### Code Signing Enforcement

Code signing enforcement occurs in the kernel's virtual memory system. The kernel examines individual memory pages and the entire process to ensure they originate from signed code.

#### Collecting and Verifying Signing Information

When executable code is loaded, the kernel checks for a code signature stored with the `LC_CODE_SIGNATURE` load command:

```sh
$ otool -l CommCenter | grep -A 5 SIGN
cmd LC_CODE_SIGNATURE
cmdsize 16
dataoff 1280832
datasize 7424
```

The kernel code that parses this information is found in `XNU’s bsd/kern/mach_loader.c` in the `parse_machfile` function:

```c
parse_machfile(
struct vnode *vp,
vm_map_t map,
thread_t thread,
struct mach_header *header,
off_t file_offset,
off_t macho_size,
int depth,
int64_t aslr_offset,
load_result_t *result
)
{
...
case LC_CODE_SIGNATURE:
/* CODE SIGNING */
...
ret = load_code_signature(
(struct linkedit_data_command *) lcp,
vp,
file_offset,
macho_size,
header->cputype,
(depth == 1) ? result : NULL);
...
}
```

The `load_code_signature` function performs the actual loading of the signature:

```c
static load_return_t
load_code_signature(
struct linkedit_data_command *lcp,
struct vnode *vp,
off_t macho_offset,
off_t macho_size,
cpu_type_t cputype,
load_result_t *result)
{
...
kr = ubc_cs_blob_allocate(&addr, &blob_size);
...
ubc_cs_blob_add(vp,
cputype,
macho_offset,
addr,
lcp->datasize))
...
}
```

The `ubc_cs_blob_add` function checks whether the signature is acceptable:

```c
int
ubc_cs_blob_add(
struct vnode *vp,
cpu_type_t cputype,
off_t base_offset,
vm_address_t addr,
vm_size_t size)
{
...
/*
* Let policy module check whether the blob’s signature
* is accepted.
*/
#if CONFIG_MACF
error = mac_vnode_check_signature(vp, blob->csb_sha1,
(void*)addr, size);
if (error)
goto out;
#endif
...
}
```

Finally, AMFI performs the actual code signing checks inside the `vnode_check_signature` hooking function. This function checks the trust caches and, if the binary is not trusted, calls a userspace daemon to determine if it is properly signed.

### Enforcing Signatures on Processes

The code signing validity of a process is tracked in the `csflags` member of the `proc` structure for each process. When a page fault occurs, the `vm_fault` function is called, which in turn calls functions responsible for checking the code signing of executable pages. A page fault is generated whenever a page is loaded into the virtual memory system, including during initial loading.

To see the code responsible for this, examine `vm_fault` in `./osfmk/vm/vm_fault.c`:

```c
kern_return_t
vm_fault(
vm_map_t map,
vm_map_offset_t vaddr,
vm_prot_t fault_type,
boolean_t change_wiring,
int interruptible,
pmap_t caller_pmap,
vm_map_offset_t caller_pmap_addr)
{
...
kr = vm_fault_enter(m,
pmap,
vaddr,
prot,
fault_type,
wired,
change_wiring,
fault_info.no_cache,
fault_info.cs_bypass,
&type_of_fault);
...
}

vm_fault_enter(vm_page_t m,
pmap_t pmap,
vm_map_offset_t vaddr,
vm_prot_t prot,
vm_prot_t fault_type,
boolean_t wired,
boolean_t change_wiring,
boolean_t no_cache,
boolean_t cs_bypass,
int *type_of_fault)
{
...
/* Validate code signature if necessary. */
if (VM_FAULT_NEED_CS_VALIDATION(pmap, m)) {
vm_object_lock_assert_exclusive(m->object);
if (m->cs_validated) {
vm_cs_revalidates++;
}
vm_page_validate_cs(m);
}
...
}
```

This ensures that the code signing of executable pages is continuously verified and enforced.