may instead be embedded in an Intel TSX window, yielding a
different root cause and capabilities.
To better characterize the capabilities of transient execution
exploits, we propose the orthogonal root-cause-based classiﬁ-
cation in Figure 10. We draw from the Intel terminology to
deﬁne the two main classes of root causes of Bad Specula-
tion (i.e., transient execution): Control-Flow Misprediction
(i.e., branch misprediction) and Data Misprediction (i.e., ma-
chine clear). Based on these two main classes, we observe
that all the known root causes of transient execution paths can
be classiﬁed into the following four subclasses: Predictors,
Exceptions, Likely invariants violations, and Interrupts.
Figure 10: A root cause-centric classiﬁcation of known tran-
sient execution paths (causes analyzed in the paper in bold).
Acronyms descriptions can be found in Appendix B
Predictors. This category includes the prediction-based
causes of bad speculation due to either control-ﬂow or data
mispredictions. Mistraining a predictor and forcing a mis-
prediction is sufﬁcient to create a transient execution path
accessing erroneous code or data. It’s worth noting that in
Figure 10 there are two separate "predictors" subclasses un-
der control-ﬂow and data mispredictions, as they are differ-
ent in nature. While control-ﬂow mispredictions are failed
attempts to guess the next instructions to execute, data mis-
predictions are failed attempts to operate on not-yet-validated
data. Misprediction is a common way to manage tran-
sient execution windows in attacks like Spectre and deriva-
tives [11, 20, 28, 40, 41, 43, 48, 55, 65, 82].
Exceptions. This class includes the causes of machine
clear due to exceptions, for instance, the different (sub)classes
of page faults. Forcing an exception is sufﬁcient to create a
transient execution path erroneously executing code follow-
ing the exception-inducing instruction. Exceptions are a less
common way to manage transient execution windows (as they
require dedicated handling), but have been extensively used
as triggers in Meltdown-like attacks [7,8,47,59,63,67,71,74–
76, 78].
Interrupts. This class includes the causes of machine clear
due to hardware (only) interrupts. Similar to exceptions, forc-
USENIX Association
30th USENIX Security Symposium    1463
619.lbm_s638.imagick_s644.nab_sSPEC17geomean433.milc444.namd447.dealII450.soplex453.povray470.lbm482.sphinx3SPEC06geomean0%100%200%300%400%500%600%700%800%OverheadSPEC FP 2017SPEC FP 2006LLVM MitigationLVIFPVI (MDS-vulnerable system)FPVI (MDS-resistant system)LVI+FPVI (MDS-vulnerable system)ing a HW interrupt is sufﬁcient to create a transient execution
path erroneously executing code following the interrupted
instruction. Hardware interrupt are asynchronous by nature
and thus difﬁcult to control, resulting in a less than ideal way
to manage transient execution windows. Nonetheless they
were abused by prior side-channel attacks [72].
Likely invariants violations. This class includes all the
remaining causes of machine clear, derived by likely invari-
ants [15] used by the CPU. Such invariants commonly hold,
but occasionally fail, allowing hardware to implement fast-
path optimizations. However, compared to exceptions and
interrupts, slow-path occurrences are typically more frequent,
requiring more efﬁcient handling in hardware or microcode.
We discussed examples of such invariants in the paper (e.g.,
store instructions are expected to never target cached instruc-
tions, ﬂoating-point operations are expected to never operate
on denormal numbers, etc.) and their lazy handling mecha-
nisms (i.e., L1d/L1i resynchronization, microcode-based de-
normal arithmetic). Forcing a likely invariant violation is suf-
ﬁcient to create a transient execution path accessing erroneous
code or data. In this paper, we have shown such violations
are not only a realistic way to manage transient execution
windows, but also provide new opportunities and primitives
for transient execution attacks.
all these efforts, we focus on machine clears to systematically
study all the root causes of transient execution, fully reverse
engineering their behavior, and uncovering their security im-
plications well beyond the state of the art.
15 Conclusions
We have shown that the root causes of transient execution can
be quite diverse and go well beyond simple branch mispredic-
tion or similar. To support this claim, we systematically ex-
plored and reverse engineered the previously unexplored class
of bad speculation known as machine clear. We discussed
several transient execution paths neglected in the literature,
examining their capabilities and new opportunities for attacks.
Furthermore, we presented two new machine clear-based tran-
sient execution attack primitives (Floating Point Value Injec-
tion and Speculative Code Store Bypass). We also presented
an end-to-end FPVI exploit disclosing arbitrary memory in
Firefox and analyzed the applicability of SCSB in real-world
applications such as JIT engines. Additionally, we proposed
mitigations and evaluated their performance overhead. Finally,
we presented a new root cause-based classiﬁcation for all the
known transient execution paths.
14 Related Work
Disclosure
Spectre [31,41] and Meltdown [47] ﬁrst examined the security
implications of transient execution, originating a large body
of research on transient execution attacks [6–11,28,40,43,48,
59, 63, 65, 67, 68, 71, 74–76, 78, 79, 82]. Rather than focusing
on attacks and their classiﬁcation [10, 75, 80], ours is the ﬁrst
effort to systematize the root causes of transient execution
and examine the many unexplored cases of machine clears.
We now brieﬂy survey prior security efforts concerned
with the major causes of machine clear discussed in this pa-
per. Self-modifying code is commonly used by malware as
an obfuscation technique [69] and has also been used to im-
prove side-channel attacks by means of performance degra-
dation [2]. Moreover, our SCSB primitive bears similarities
with prior transient execution primitives inducing specula-
tive control ﬂow hijacking, either through branch target in-
jection [41, 49] or architectural branch target corruption [28].
The performance variability of ﬂoating-point operations on
denormal numbers [17, 46] has been previously exploited in
traditional timing side-channel attacks [4]. Speculation intro-
duced by stricter memory models is a well-known concept in
the computer architecture literature [27, 30, 66]. While this is
non-trivial to exploit, prior work did demonstrate information
disclosure [57,79] by exploiting the snoop protocol discussed
in Section 7. The memory disambiguation predictor has been
previously abused to leak stale data in Spectre Speculative
Store Bypass exploits [55, 82]. Moreover, its behavior has
been partially reverse engineered before [18]. In contrast to
We disclosed Floating Point Value Injection and Speculative
Code Store Bypass to CPU, browser, OS, and hypervisor ven-
dors in February 2021. Following our reports, Intel conﬁrmed
the FPVI (CVE-2021-0086) and SCSB (CVE-2021-0089)
vulnerabilities, rewarded them with the Intel Bug Bounty pro-
gram, and released a security advisory with recommendations
in line with our proposed mitigations [34]. Mozilla conﬁrmed
the FPVI exploit (CVE-2021-29955 [21, 22]), rewarded it
with the Mozilla Security Bug Bounty program, and deployed
a mitigation based on conditionally masking malicious NaN-
boxed FP results in Firefox 87 [51].
Acknowledgments
We thank our shepherd Daniel Genkin and the anonymous
reviewers for their valuable comments. We also thank Erik
Bosman from VUSec and Andrew Cooper from Citrix for
their input, Intel and Mozilla engineers for the productive
mitigation discussions, Travis Downs for his MD reverse en-
gineering, and Evan Wallace for his Float Toy tool. This work
was supported by the European Union’s Horizon 2020 re-
search and innovation programme under grant agreements No.
786669 (ReAct) and 825377 (UNICORE), by Intel Corpora-
tion through the Side Channel Vulnerability ISRA, and by the
Dutch Research Council (NWO) through the INTERSECT
project.
1464    30th USENIX Security Symposium
USENIX Association
References
[1] IEEE Standard for Floating-Point Arithmetic. IEEE Std. 754-2019,
2019.
[2] Alejandro Cabrera Aldaya and Billy Bob Brumley.
Hyperde-
grade: From ghz to mhz effective cpu frequencies. arXiv preprint
arXiv:2101.01077.
[3] AMD. AMD64 Architecture Programmer’s Manual.
[4] Marc Andrysco, David Kohlbrenner, Keaton Mowery, Ranjit Jhala,
Sorin Lerner, and Hovav Shacham. On subnormal ﬂoating point and
abnormal timing. In 2015 IEEE S & P.
[5] ARM. Architecture Reference Manual for Armv8-A.
[6] Atri Bhattacharyya, Alexandra Sandulescu, Matthias Neugschwandtner,
Alessandro Sorniotti, Babak Falsaﬁ, Mathias Payer, and Anil Kurmus.
Smotherspectre: exploiting speculative execution through port con-
tention. In CCS’19.
[7] Jo Van Bulck, Marina Minkin, Oﬁr Weisse, Daniel Genkin, Baris
Kasikci, Frank Piessens, Mark Silberstein, Thomas F. Wenisch, Yu-
val Yarom, and Raoul Strackx. Foreshadow: Extracting the Keys to
the Intel SGX Kingdom with Transient Out-of-Order Execution. In
USENIX Security’18.
[8] Claudio Canella, Daniel Genkin, Lukas Giner, Daniel Gruss, Moritz
Lipp, Marina Minkin, Daniel Moghimi, Frank Piessens, Michael
Schwarz, Berk Sunar, Jo Van Bulck, and Yuval Yarom. Fallout: Leaking
Data on Meltdown-resistant CPUs. In CCS’19.
[9] Claudio Canella, Michael Schwarz, Martin Haubenwallner, Martin
Schwarzl, and Daniel Gruss. Kaslr: Break it, ﬁx it, repeat. In ACM
ASIA CCS 2020.
[10] Claudio Canella, Jo Van Bulck, Michael Schwarz, Moritz Lipp, Ben-
jamin Von Berg, Philipp Ortner, Frank Piessens, Dmitry Evtyushkin,
and Daniel Gruss. A systematic evaluation of transient execution at-
tacks and defenses. In USENIX Security 19.
[11] Guoxing Chen, Sanchuan Chen, Yuan Xiao, Yinqian Zhang, Zhiqiang
Lin, and Ten H Lai. Sgxpectre: Stealing intel secrets from sgx enclaves
via speculative execution. In 2019 IEEE EuroS&P.
[12] Chrome. V8 TurboFan documentation.
[13] Chromium. Site Isolation documentation.
[14] Victor Costan and Srinivas Devadas.
Cryptology ePrint Archive, 2016.
Intel SGX Explained.
IACR
[15] David Devecsery, Peter M Chen, Jason Flinn, and Satish Narayanasamy.
Optimistic hybrid analysis: Accelerating dynamic analysis through
predicated static analysis. In ASPLOS 2018.
[16] Christopher Domas. Breaking the x86 isa. Black Hat, USA, 2017.
[17] Isaac Dooley and Laxmikant Kale. Quantifying the interference caused
by subnormal ﬂoating-point values. In Proceedings of the Workshop
on OSIHPA, 2006.
[18] Travis Downs.
Memory Disambiguation
on
Skylake.
https://github.com/travisdowns/uarch-bench/wiki/
Memory-Disambiguation-on-Skylake, 2019.
[19] Thomas Dullien. Return after free discussion. https://twitter.
com/halvarflake/status/1273220345525415937.
[20] Dmitry Evtyushkin, Ryan Riley, Nael CSE Abu-Ghazaleh, ECE, and
Dmitry Ponomarev. Branchscope: A new side-channel attack on di-
rectional branch predictor. ACM SIGPLAN Notices, 53(2):693–707,
2018.
[21] Firefox. Firefox 87 Security Advisory. https://www.mozilla.org/
en-US/security/advisories/mfsa2021-10/#CVE-2021-29955.
[22] Firefox.
Firefox ESR 78.9 Security Advisory.
https://www.
mozilla.org/en-US/security/advisories/mfsa2021-11/
#CVE-2021-29955.
[23] Firefox. Project Fission documentation.
[24] Fortninet.
Use-After-Free Bug in Chakra (CVE-2018-0946).
https://www.fortinet.com/blog/threat-research/
an-analysis-of-the-use-after-free-bug%
-in-microsoft-edge-chakra-engine.
[25] Ivan Fratric. Return after free discussion. https://twitter.com/
ifsecure/status/1273230733516177408.
[26] Pietro Frigo, Cristiano Giuffrida, Herbert Bos, and Kaveh Razavi.
Grand Pwning Unit: Accelerating Microarchitectural Attacks with
the GPU. In S&P, May 2018.
[27] Kourosh Gharachorloo, Anoop Gupta, and John L Hennessy. Two
techniques to enhance the performance of memory consistency models.
1991.
[28] Enes Goktas, Kaveh Razavi, Georgios Portokalidis, Herbert Bos, and
Cristiano Giuffrida. Speculative Probing: Hacking Blind in the Spectre
Era. In CCS, 2020.
[29] Ben Gras, Kaveh Razavi, Erik Bosman, Herbert Bos, and Cristiano
Giuffrida. ASLR on the Line: Practical Cache Attacks on the MMU.
In NDSS, February 2017.
[30] John L Hennessy and David A Patterson. Computer architecture: a
quantitative approach. Elsevier, 2011.
[31] Jann Horn. Reading privileged memory with a side-channel. 2018.
[32] Xen Hypervisor.
block_speculation function call in invoke_stub.
[33] Xen Hypervisor.
https://xenbits.xen.org/gitweb/?p=xen.git;a=blob;f=
xen/arch/x86/x86_emulate/x86_emulate.c;hb=HEAD.
function
in
io_emul_stub_setup. https://xenbits.xen.org/gitweb/?p=xen.
git;a=blob;f=xen/arch/x86/pv/emul-priv-op.c;hb=HEAD.
block_speculation
call
[34] Intel.
FPVI & SCSB Intel Security Advisoray 00516.
https:
//www.intel.com/content/www/us/en/security-center/
advisory/intel-sa-00516.html.
[35] Intel. INTEL-SA-00088 - Bounds Check Bypass .
[36] Intel.
Intel® 64 and IA-32 Architectures Optimization Reference
Manual.
[37] Intel. Intel® 64 and IA-32 Architectures Software Developer’s Manual
combined volumes.
[38] Intel.
Intel® VTune™ Proﬁler User Guide
4K
https://software.intel.com/content/
-
Aliasing.
www/us/en/develop/documentation/vtune-help/
top/reference/cpu-metrics-reference/l1-bound/
aliasing-of-4k-address-offset.html.
[39] Intel.
deep
https://software.intel.com/security-software-guidance/deep-
dives/deep-dive-load-value-injection, 2020.
injection
value
Load
-
dive.
[40] Vladimir Kiriansky and Carl Waldspurger. Speculative buffer overﬂows:
Attacks and defenses. arXiv:1807.03757.
[41] Paul Kocher, Jann Horn, Anders Fogh, , Daniel Genkin, Daniel Gruss,
Werner Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas
Prescher, Michael Schwarz, and Yuval Yarom. Spectre Attacks: Ex-
ploiting Speculative Execution. In S&P’19.
[42] David Kohlbrenner and Hovav Shacham. On the effectiveness of
mitigations against ﬂoating-point timing channels. In USENIX Security
Symposium, 2017.
[43] Esmaeil Mohammadian Koruyeh, Khaled N Khasawneh, Chengyu
Song, and Nael Abu-Ghazaleh. Spectre Returns! Speculation Attacks
using the Return Stack Buffer. In USENIX WOOT’18.
[44] Evgeni Krimer, Guillermo Savransky, Idan Mondjak, and Jacob
Doweck. Counter-based memory disambiguation techniques for se-
lectively predicting load/store conﬂicts, October 1 2013. US Patent
8,549,263.
USENIX Association
30th USENIX Security Symposium    1465
[45] Chris Lattner and Vikram Adve. Llvm: A compilation framework for
lifelong program analysis & transformation. In CGO, 2004.
[66] Daniel J Sorin, Mark D Hill, and David A Wood. A primer on memory
consistency and cache coherence. 2011.
[46] Orion Lawlor, Hari Govind, Isaac Dooley, Michael Breitenfeld, and
Laxmikant Kale. Performance degradation in the presence of subnor-
mal ﬂoating-point values. In OSIHPA, 2005.
[67] Julian Stecklina and Thomas Prescher. Lazyfp: Leaking fpu reg-
arXiv preprint
ister state using microarchitectural side-channels.
arXiv:1806.07480, 2018.
[47] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner
Haas, Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel
Genkin, Yuval Yarom, and Mike Hamburg. Meltdown: Reading Kernel
Memory from User Space. In USENIX Security’18.
[48] Giorgi Maisuradze and Christian Rossow. ret2spec: Speculative ex-
ecution using return stack buffers. In Proceedings of the 2018 ACM
SIGSAC.
[49] Andrea Mambretti, Alexandra Sandulescu, Matthias Neugschwandtner,
Alessandro Sorniotti, and Anil Kurmus. Two methods for exploiting
speculative control ﬂow hijacks. In USENIX WOOT 19.
[50] Ahmad Moghimi, Jan Wichelmann, Thomas Eisenbarth, and Berk
Sunar. Memjam: A false dependency attack against constant-time
crypto implementations. International Journal of Parallel Program-
ming, 2019.
[51] Mozilla. Firefox Bug 1692972 mitigation. https://hg.mozilla.
org/releases/mozilla-beta/rev/b129bba64358.