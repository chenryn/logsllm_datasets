### Methodology for Identifying and Analyzing Intimate Partner Surveillance (IPS) Apps

#### Introduction
To emulate a hypothetical abuser seeking apps for intimate partner surveillance (IPS), we hypothesize that most abusers begin by performing searches such as “track my wife” or “read SMS from another phone” in search engines. Our methodology aims to uncover a representative sample of IPS tools, including both resources for abusers (e.g., how-to guides) and readily available apps. We focus on the Android ecosystem, using search interfaces provided by Google.com and Google Play. This approach can be extended to other ecosystems, such as Apple's, as detailed in Appendix B.

#### Search Methodology
To perform these searches, we need a comprehensive list of queries an abuser might use. We utilize query recommendation APIs provided by search engines, such as the query completion API (Google Play) and the related query API (Google). These APIs suggest search phrases based on prior user searches.

**Query Snowballing:**
We employ a query snowballing approach to expand our initial set of seed queries into a larger set of useful queries. The process involves:
1. Querying the recommendation APIs with the seed set.
2. Collecting the resulting recommendations.
3. Re-querying with the new recommendations.
4. Continuing until a predetermined number of queries (e.g., 10,000) is reached or no new recommendations are found.

More details on query snowballing are provided in Appendix A.

#### Searching for IPS on Google
We applied our query snowballing to the Google search engine using the Python Requests library to make queries and download results, and the Lxml library to parse the pages. To minimize the influence of historical searches, we used a Chrome browser on Linux and disallowed client-side cookies.

**Seed Queries:**
Our seed set includes longer, more complete queries such as “how to catch my cheating spouse” or “track my husband’s phone without them knowing.” The returned suggestions are filtered using regular expression blacklists to remove irrelevant results.

**Results:**
- After considering 10,000 query recommendations, we submitted each query to Google and recorded the top 10 results.
- This yielded 27,741 URLs across 7,167 unique domains.
- Manual analysis of 100 randomly sampled URLs categorized the websites into six major categories (Figure 2).

**Types of Websites Found:**
- **Blogs:** How-to blogs for IPS.
- **Videos:** How-to videos for IPS.
- **Forums:** Q&A forums for IPS.
- **News:** News about using spying software.
- **Downloads:** Pages hosting IPS apps.
- **App Sites:** Websites of apps.
- **App Store:** Links to apps in official app stores.
- **Other:** Irrelevant pages.

**IPS-Related URLs:**
- **Information about Conducting IPS:**
  - 65% of IPS-related URLs link to blogs, videos, or forums discussing how to engage in IPS.
  - Examples include blog posts on how to use spyware and news articles about incidents of spyware use.
  - Video tutorials explain how to set up and use spying apps.
  - Forums discuss various tools for spying on intimate partners.

- **IPS Apps:**
  - The remaining URLs linked to app homepages, Google Play application pages, or websites aggregating app downloads.
  - From the Google search results, we collected 2,249 unique URLs pointing to Google Play, with 1,629 active apps listed.
  - Manual analysis revealed 22 apps usable for IPS, all of which were also discovered in the Play store search.

**Off-Store Apps:**
- We examined references to off-store apps in the manually analyzed URLs and found 32 unique off-store spyware apps.
- Nine of these apps were discontinued, leaving 23 active off-store apps.

#### Searching for IPS-Relevant Apps in Google Play
Our results showed that Google Play apps appear in Google searches for IPS-related phrases. We investigated the Play Store directly to identify hosted IPS-related tools.

**Query Snowballing:**
- We used the query completion API provided by Google Play with smaller seed queries.
- The snowball querying converged rapidly to a final set of suggested phrases.

**Data Collection:**
- For each phrase, we searched Google Play and collected metadata for the first 50 apps returned, including app descriptions, supported Android versions, last update dates, download ranges, average user ratings, and unique identifiers.
- We also downloaded recent reviews and requested permissions from the app manifest files using a modified version of the google-play-scraper.

**Results:**
- Over one month, we saw an average of 530 queries per day with a standard deviation of 6.
- The total size of our query pool was 675 after one month.
- On average, we found 4,205 unique apps per day, with 288 new apps and a similar number of apps going missing each day.
- In total, we collected 9,224 apps.

**App Updates and Removals:**
- 32% of the apps were updated at least once, with 15% updated three times during the study.
- 208 (2%) of the observed apps were removed from the Google Play store during the study period.

**Inconsistencies:**
- Some apps were inconsistently classified, such as an IPS-relevant app titled "Friends & Family Tracker" listed as a casual gaming app.

#### Pruning False Positives
Many of the discovered apps were not relevant to IPS. We used supervised machine learning to filter out false positives.

**Machine Learning Model:**
- We hand-labeled 1,000 randomly sampled apps from the first day of crawling, marking 280 (28%) as IPS tools.
- We considered the app description, summary, genre, and required permissions.
- We used a bag-of-words model and selected the most discriminatory features based on the χ2-statistic.
- Different machine learning algorithms were compared using the area under the curve (AUC) metric.

This methodology provides a robust and scalable approach to identifying and analyzing IPS apps, ensuring a representative and comprehensive sample.