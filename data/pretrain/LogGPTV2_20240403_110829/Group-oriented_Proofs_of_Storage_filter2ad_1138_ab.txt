Table 1 summarizes the comparison among the above men-
tioned PoS-related schemes in multi-user setting. They are
compared in terms of comparable properties, that is, the
manner of generating secret keys for group members, whether
some secret parameters should be shared among group mem-
bers, whether the scheme is proposed in identity-based set-
ting, auditability of the outsourced ﬁles, and whether the
identity of ﬁle owner is privacy-preserving against the cloud
storage server. From the table, it can be seen that our
schemes are advantageous over related schemes in ownership
privacy, public audibility, freeness of sharing secret parame-
ters and/or freeness of certiﬁcates (due to our identity-based
design).
2. MODELLING GPOS
In this section, we deﬁne the architecture of GPoS schemes
and formalize the corresponding security model as well.
2.1 System Architecture
A GPoS system involves four types of entities (as illus-
trated in Figure 1). The cloud storage server which is a
semi-trusted party and maintained by some cloud storage
provider, oﬀers the remote storage services to cloud users,
for example, ﬁle owners. This server also has powerful com-
putation capability to respond the clients’ requests. The
group manager trusted by its members initiates the system
and issues the secret keys for all the members. A ﬁle owner,
that is, a group member, holds ﬁles and would like to out-
source them to the cloud storage server. The auditor is also
a cloud user, but may be not a group member. The group
public information as well as the ﬁle tags of the outsourced
ﬁles are accessible to the auditor.
In this way, the audi-
tor can audit the integrity of these ﬁles on behalf of group
manager and the ﬁle owners.
Figure 1: GPoS system model
2.2 Formal System Deﬁnition
A GPoS scheme with public auditability comprises six
polynomial-time computable algorithms, that is, Setup, KeyExt,
PrFile, Chall, PrfGen and Verify.
• (gpk, gsk) ← Setup(1λ): On input a security parame-
ter λ, the system setup algorithm, run by the group
manager, outputs a pair of group public key and group
secret key (gpk, gsk).
• sk(cid:96) ← KeyExt(gpk, gsk, id(cid:96)): On input a group public
key gpk, a group secret key gsk and a member identity
id(cid:96), the key extraction algorithm, run by the group
manager, outputs a secret key sk(cid:96). This secret key
is veriﬁable by its holder, that is, member id(cid:96), under
group public key gpk.
• (τ, F ∗) ← PrFile(gpk, sk(cid:96), F ): On input a group public
key gpk, a member’s secret key sk(cid:96) and a ﬁle F ∈
{0, 1}∗, the processing ﬁle algorithm, run by the ﬁle
Group managerMembersKeysFilesAuditorAuditingCloud storage server75owner id(cid:96) (a group member), outputs a ﬁle tag τ and
a processed ﬁle F ∗ that comprises of F and a number
of meta-data (cid:126)σ.
• C ← Chall(gpk, τ ): On input a group public key gpk
and a ﬁle tag τ , the challenge generation algorithm,
run by the auditor, outputs a challenge C.
• R ← PrfGen(gpk, F ∗, C): On input a group public key
gpk, a processed ﬁle F ∗ and a challenge C, the proof
generation algorithm, run by the cloud storage server,
outputs a proof R.
• 0/1 ← Verify(gpk, τ, C, R): On input a group public
key gpk, a ﬁle tag τ and a challenge/proof pair (C, R),
the veriﬁcation algorithm, run by the auditor, outputs
“1” if R is a valid proof for C, or “0” otherwise.
Informally, the correctness property of a GPoS scheme re-
quires that for any ﬁle that processed by any member in the
group, if the cloud storage server performs honestly, then the
proof R is valid for the challenge C in any round of integrity
auditing protocol, that is, Chall-PrfGen-Verify. Formally, we
have
Definition 1
(Correctness). A GPoS scheme (Setup,
KeyExt, PrFile, Chall, PrfGen, Verify) is correct if for any
group key pair (gpk, gsk) ← Setup(1λ), any member id(cid:96) with
secret key sk(cid:96) ← KeyExt(gpk, gsk, id(cid:96)), and any ﬁle F ∈
{0, 1}∗, let (τ, F ∗) ← PrFile(gpk, sk(cid:96), F ), the veriﬁcation e-
quation Verify(gpk, τ, C, PrfGen(gpk, F ∗, C)) = 1 holds for
any challenge C ← Chall(gpk, τ ).
2.3 Adversary Model and Security Deﬁnitions
Note that we do not need to specially consider outsider at-
tackers as they cannot be more powerful than insider attack-
ers, that is, the colluding members or the server. Intuitively,
a GPoS scheme may encounter the following conspiracy at-
tacks from the group members and the cloud storage server.
• Secret key forgery. Several group members may col-
lude to forge a secret key with respect to another group
member.
• Meta-data forgery. The group members or the cloud
storage server may forge meta-data for some ﬁle and
group member.
• Proof forgery. The cloud storage server and group
member may collude to forge a proof when auditing
the integrity of some outsourced ﬁle with respect to
some group member.
An insightful observation indicates the second type of at-
tacks about meta-data forgery can be captured by the third
case. Hence, in the following discussion, we only need to
consider the secret key forgery and proof forgery. To cap-
ture them, we deﬁne a formal security model with the fol-
lowing game where a probabilistic polynomial-time (PPT)
adversary A interacts with the challenger C.
Setup: Suppose that the adversary controls a set Sc of
corrupted members in the group and sends this set to C.
The challenger runs Setup(1λ) to generate a pair of group
public/secret keys (gpk, gsk) and gives gpk to A.
Queries: The adversary adaptively queries the challenger.
For each query, the challenger records the queried informa-
tion as well as response in lists that are initiated as empty.
• Key extraction: The adversary adaptively queries the
challenger to obtain the secret key of a member in the
corrupted set Sc. The challenger returns the result of
KeyExt for each queried member identity.
• Processing ﬁle: The adversary sends a ﬁle F and a
member identity id(cid:96) to the challenger. If the secret key
of member id(cid:96) has not been queried before, then the
challenger should ﬁrst run KeyExt(gpk, gsk, id(cid:96)). The
challenger computes (τ, F ∗) ← PrFile(gpk, sk(cid:96), F ) and
sends (τ, F ∗) to A. Note that for each ﬁle, there is a
unique ﬁle identifer in the ﬁle tag τ . For guaranteeing
its uniqueness, we let it be randomly chosen by the
challenger during the query.
• Integrity auditing: For any processed ﬁle in above pro-
cessing ﬁle queries, the challenger (acting as the au-
ditor) can audit its integrity by challenging the ad-
versary (acting as the prover). That is, they jointly
carry out the integrity auditing protocol. In detail, for
any ﬁle F in the query list, the challenger can chal-
lenge A with C ← Chall(gpk, τ ), and A responds with
a proof R. Then, the challenger veriﬁes R by invoking
Verify(gpk, τ, C, R) and gives the results to A.
End-Game: Finally, the adversary outputs a secret key
(cid:96) for some member id(cid:48)
(cid:96), or a pair of challenge/proof (C(cid:48), R(cid:48))
sk(cid:48)
with regard to some ﬁle F (cid:48) identiﬁed by ﬁle tag τ(cid:48).
Definition 2
(Soundness). A GPoS scheme is sound
if for any PPT adversary A playing the above mentioned
security game by interacting with the challenger, the outputs
are neither of the following cases:
• Case 1. The secret key sk(cid:48)
(cid:96) is valid under the group
public key gpk for a member id(cid:48)
(cid:96) but id(cid:48)
(cid:96) (cid:54)∈ Sc.
• Case 2. The pair of challenge/proof (C(cid:48), R(cid:48)) is valid
but R(cid:48) does not equal to that generated by the chal-
lenger from locally maintained information.
A secure GPoS scheme also requires that, in the entire
life span of an outsourced ﬁle, its owner identity should be
hidden from the cloud storage server. Essentially, this own-
ership privacy-preserving property requires the ﬁles should
be uploaded in the name of the group. As in the real ap-
plication scenario, the ﬁles are uploaded by the employee
under the company’s account. Also, in any round of in-
tegrity auditing protocol with regard to any outsourced ﬁle,
the cloud storage server should be able to respond with a
valid integrity proof R without using the ﬁle owner’s identi-
ty. More technically,
Definition 3
(Ownership privacy). A GPoS scheme
is ownership privacy-preserving against the cloud storage
server if for any ﬁle F ∈ {0, 1}∗ and any two distinct mem-
bers id(cid:96),1 and id(cid:96),2 in the same group, the following two dis-
tributions are identical from the view of the cloud storage
server: (cid:126)σ1 :
(cid:126)σ2 :
and
(gpk, gsk) ← Setup(1λ),
sk(cid:96),1 ← KeyExt(gpk, gsk, id(cid:96),1),
1 ) ← PrFile(gpk, sk(cid:96),1, F )
(τ1, F ∗
(gpk, gsk) ← Setup(1λ),
sk(cid:96),2 ← KeyExt(gpk, gsk, id(cid:96),2),
2 ) ← PrFile(gpk, sk(cid:96),2, F )
(τ2, F ∗
 ,
 .
763. GENERIC GPOS CONSTRUCTION
Suppose G1 = (cid:104)g1(cid:105) and G2 = (cid:104)g2(cid:105) be (multiplicative)
cyclic groups of prime order p with eﬃcient group actions.
The groups (G1, G2) are bilinear if there exists a (multi-
plicative) cyclic group GT of the same order and an eﬃcient
bilinear map ˆe : G1 × G2 → GT such that:
ˆe(h, )αβ;
(1) Bilinearity: ∀h ∈ G1,  ∈ G2, and ∀α, β ∈ Z∗
(2) Non-degeneracy: ˆe(g1, g2) (cid:54)= 1.
Our GPoS scheme and instantiations rely on the following
p, ˆe(hα, β) =
well-known computational assumptions.
(g, gα, gβ) for α, β ∈R Z∗
gible probability, that is,
Computational Diﬃe–Hellman Assumption: Given a triple
p, any PPT algorithm A has negli-
Pr[A(g, gα, gβ) = gαβ : α, β ∈R Z∗
p]
to compute gαβ.
s-Strong Diﬃe–Hellman (s-SDH) Assumption [4]: Given
a (s + 1)-tuple
(g, gα,··· , gαs
)
p, any PPT algorithm A has
for randomly chosen α ∈R Z∗
negligible probability
(cid:104)A(g, gα,··· , gαs
) = (z, g
Pr
1
α+z ) : α ∈R Z∗
p, z ∈ Z∗
p \{−α}(cid:105)
to compute a pair (z, g
3.1 Useful Properties in Signatures
α+z ).
1
To construct GPoS, we ﬁrst need a secure way to gen-
erate secret keys for the group members. It is well-known
that in group-oriented cryptographic primitives, the group
members should not be allowed to (freely) generate secret
keys by themselves. Instead, these keys are usually gener-
ated and distributed for all members by a (trusted) group
manager. The secret key of a group member should be asso-
ciated with his/her identity. To this end, the group manager
usually signs the identity of the member and outputs the sig-
nature as the secret key of the member. An advantage of
this approach is that it is naturally collusion-resistant in the
sense that even colluding users cannot forge a valid secret
key if the underlying signature is existentially unforgeable.
However, this approach also brings a challenge in construct-
ing group-oriented PoS schemes, not only because the ﬁles
are processed by group members with their secret keys and
each meta-data should incorporate at least a ﬁle identiﬁer
and a ﬁle block with many sectors, but also the produced
meta-data should be aggregatable and publicly auditable. In
fact, the situation will be even worse in constructing generic
GPoS schemes equipped with user privacy.
We observe that some signature schemes enjoy several in-
teresting properties useful to address the above challenge.
We refer to these properties as homomorphic composabil-
ity and homomorphic veriﬁability deﬁned as follows. Let
S = (KGen, Sign, Vrfy) be a signature scheme deﬁned over
some cyclic group G = (cid:104)g(cid:105), and M, K and Σ be the message
space, secret key space and signature space of S, respec-
tively, where the signature space is assumed to be a ﬁnite
multiplicative cyclic group.
Definition 4
nature scheme S is (ϕ, (cid:122))-homomorphic composable if
(Homomorphic Composability). A sig-
(1) there exist two eﬃciently computable functions such
as ϕ : K × M → R where R denotes some ring, and (cid:122) :
G × R → Σ; and
(2) for each message m ∈R M and every key pair (pk, sk) ←
S.KGen(1λ), the corresponding signature has the form σ =
(cid:122)(g, ϕ(sk, m)) ← S.Sign(sk, m). It holds that
(cid:122)(g, ϕ(sk, m))x = (cid:122)(gx, ϕ(sk, m))
for any value x ∈R R, where (cid:122)()x is the exponentiation
operation over Σ.
Definition 5
nature scheme S is (ϕ, (cid:122))-homomorphic veriﬁable if
(Homomorphic Verifiability). A sig-
(1) there is an eﬃcient test algorithm Ξ(pk; m, σ; ¨x, ¨y)
which takes a public key pk, a message/signature pair (m, σ),
and a pair of elements ¨x ∈ G and ¨y ∈ Σ; and
(2) the algorithm Ξ outputs “1” if the given pair of mes-
sage/signature is valid under pk, that is, S.Vrfy(pk, m, σ) =
1, and ϕ1 = ϕ2 in R, where ϕ1 = (cid:122)−1(g, σ) and ϕ2 =
(cid:122)−1(¨x, ¨y). Otherwise, outputs “0”.
We provide two exemplary signature schemes that satisfy
these properties.
Boneh–Boyen scheme [4]. Let ˆe : G1 × G2 → GT be an
asymmetric bilinear map, where G1 = (cid:104)g1(cid:105), G2 = (cid:104)g2(cid:105) and
GT are (multiplicative) cyclic groups of prime order p.
• KGen(1λ): Pick a random value γ ∈R Z∗
secret key sk, and compute  = gγ
p to be the
2 . The public key is
pk = (ˆe, G1, G2, GT , g1, g2, p, )
• Sign(pk, sk, m): For any given message m ∈R Zp, com-
pute the signature
1
γ+m
σ = g
1
If m + γ = 0, then set the signature as the identity
element in G1.
• Vrfy(pk, m, σ): If the equality
ˆe(σ,  · gm
2 ) ?= ˆe(g1, g2)
holds, then the signature σ is valid for m and thus
output “1”; otherwise, output “0”.
We deﬁne
and
ϕ(sk, m) =
1
γ + m
mod p
For any x ∈R Z∗
composability property, that is,
(cid:122)(g1, ϕ(sk, m)) = gϕ(sk,m)
p, the function (cid:122) satisﬁes homomorphic
1
(cid:122)(g1, ϕ(sk, m))x = g
x·
1
1
γ+m
= (cid:122)(gx
1 , ϕ(sk, m)).
Deﬁne the testing algorithm Ξ to output “1” if and only if
both
ˆe(σ,  · gm
2 ) = ˆe(g1, g2)
and
ˆe(¨y,  · gm
2 ) = ˆe(¨x, g2)
hold. Hence, it also satisﬁes homomorphic veriﬁability.
Gennaro–Halevi–Rabin scheme [10]. Let H : {0, 1}∗ →
{2n + 1 : n ∈ Z} be a collision-resistant hash function.
77• KGen(1λ): Pick two random primes p, q ∈R [2λ, 2λ+1]
such that both p−1
2 are also primes. Compute
N = pq. Let G be a subgroup of squares in Z∗
N . Pick a
random element g ∈R G. The secret key is sk = (p, q),
and the public key is pk = (N, g).
2 and q−1
• Sign(pk, sk, m): For any given message m ∈ {0, 1}∗,
compute the signature
σ = g
1
H(m)
• Vrfy(pk, m, σ): If the equality
σH(m) ?= g
holds, then the signature σ is valid for m and thus
output “1”; otherwise, output “0”.
For GHR signature scheme, we have