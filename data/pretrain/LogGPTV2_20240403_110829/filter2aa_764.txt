# Comprehensive Security Analysis of File Transfer Applications on Android Devices

## Authors
- **Zhang Xiangqian** (@h3rb0)
- **Liu Huiming** (@liuhm09)

## About Us
- **Tencent**: The largest social media and entertainment company in China.
- **Tencent Security Xuanwu Lab**: Focuses on applied and real-world security research.
- **Advanced Security Team Members**: Specializing in cutting-edge security solutions.

## Table of Contents
1. Introduction
2. Attack Surfaces and Previous Works
3. Vulnerabilities, Exploits, and Demos
4. Mitigation
5. Conclusion

## Introduction
### Nearby Transmission Technologies
- **Bluetooth, Android Beam, Wi-Fi Hotspot, Wi-Fi Direct**
- **Nearby Sharing on Android**: 
  - **Vendor Apps**: xxxx Share, xxxx Drop, etc.
  - **Third-Party Apps**: SHAREit, Xender, AirDroid, Send Anywhere, etc.

### Motivation
- **Nearby File Transfer**: 
  - **Bluetooth/NFC (Android Beam)**: Not user-friendly or fast enough.
  - **Wi-Fi Based Apps**: Nearly all top Android vendors have their own nearby file transfer apps.
  - **Market Size**: In 2018, nearly a billion Android devices were shipped (IDC).
  - **Third-Party Apps**: Top 10 apps have nearly a billion users.
  - **Security Concerns**: Are these apps secure?

## Android Sharing Apps
### Connection Process
1. **Discover**: BLE advertising (Name, ID, Device Type, etc.)
2. **Pair**: Automatic pairing and key exchange
3. **Connect**: Wi-Fi / Wi-Fi P2P
4. **Transfer**: Pictures, APKs, other files, etc.

## Attack Surface
### Adversary Capabilities
- **Sniffer and Sender**: Can intercept and send BT and Wi-Fi packets.
- **Damage**: Can obtain transferred files, perform traffic hijacking, info leaking, and RCE.

### Attack Vectors
- **Link Establishment**: Automatic connection without user permission, network key negotiation.
- **Secure Transmission**: Lack of encryption, unsafe key exchange.
- **Device/ID Spoofing**: Impersonating devices/users.
- **Man-in-the-Middle (MITM)**: Bluetooth/Wi-Fi MITM attacks.
- **Web Server**: Directory traversal, information disclosure, and Android component vulnerabilities.

## Previous Research
- **ZeroConf on OSX/iOS**: "Discovering and Exploiting Novel Security Vulnerabilities in Apple ZeroConf" by Xiaolong Bai & Luyi Xing (S&P 2016).
- **Google Nearby Connection API**: "Nearby Threats: Reversing, Analyzing, and Attacking Google’s ‘Nearby Connections’ on Android" by Antonioli, Daniele, et al. (NDSS ’19).

## Our Research
- **First Comprehensive Study**: Analyzed pre-installed and third-party Android sharing apps.
- **Vulnerability Discovery**: Identified multiple vulnerabilities across various apps.
- **Common Attack Methods**: Categorized vulnerabilities into sniffer, MITM, logic, and other categories.

### Sniffer Attack
- **BLE Sniffer**: Tools like Ubertooth, CC2540, nRF51.
- **Secret Data**: Decryption process using reverse engineering and older versions.
- **Demo 1**: Sniffing and decrypting secret data to join the P2P group and perform ARP spoofing.

### Device and ID Spoofing
- **Identity Verification**: Challenges in confirming device/user identity.
- **Demo 2**: Demonstrating how attackers can impersonate devices/users.

### Man-in-the-Middle
- **Real Receiver Identification**: Users may unknowingly connect to an attacker.
- **Demo 3**: Showing how attackers can block or receive messages without user awareness.

### Non-Confirm Connection
- **Insecure Connection Process**: Brings more attack surfaces.
- **Hijacking the Network**: Control over server, sender, and receiver roles.
- **Demo 4**: Automating Wi-Fi P2P connections and directory traversal.

### Other Vulnerabilities
- **Automatic Acceptance via Wi-Fi P2P**: Bypassing authentication.
- **Directory Traversal**: Sending files to arbitrary paths.
- **Remote File Management (RFM) Vulnerabilities**: Anonymous users with read/write permissions.
- **Demo 5**: Remote file management on computers.

## Summary
- **WiFi Connection**: No confirmation before establishment.
- **Access Control**: Poor protection for Wi-Fi/Wi-Fi P2P.
- **Transport Security**: Unencrypted data transmission.
- **Anti-Spoofing**: Lack of measures to prevent spoofing.

### Pre-Installed and Third-Party Apps
- **Pre-Installed Apps**: Varying levels of security measures.
- **Third-Party Apps**: Majority are vulnerable to sniffer and spoofing attacks.

## Mitigation
### Secure Key Exchange
- **Secure Channels**: Out-of-band (NFC), certificate-based mechanisms, PIN/PBC.
- **Internet Key Transfer**: Securely transferring keys over the internet.

### Secure Transport
- **Encryption**: Using TLS/HTTPS instead of TCP/HTTP.
- **Pre-Exchanged Keys**: Ensuring secure communication.

### Prevent Spoofing
- **Certificate-Based Authentication**: Unique IDs signed by a trusted anchor.
- **Device Distinguishability**: Ensuring devices can differentiate between real users and attackers.

### Additional Tips
- **Network Access Control**: Default off, idle-time auto-off.
- **Connection Confirmation**: Require user confirmation before establishing connections.
- **Unidentifiable Users**: Avoid automatic connections with unverified users.

## Recommended Design
- **Enhanced Security Measures**: Implementing robust key exchange, transport encryption, and anti-spoofing techniques.

## Conclusion
- **Attack Vectors**: Comprehensive analysis of nearby sharing apps.
- **Research Significance**: First comprehensive study identifying multiple vulnerabilities.
- **Mitigation Strategies**: Effective methods to enhance the security of file transfer applications.