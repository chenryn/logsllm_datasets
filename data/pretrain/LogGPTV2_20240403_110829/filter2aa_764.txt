Your secret files are mine: 
Bug finding and exploit techniques on file transfer app of all top 
Android vendors
Zhang Xiangqian
Liu Huiming
About us 
• Tencent
• Largest social media and entertainment company in China
• Tencent Security Xuanwu Lab
• Applied and real world security research
• Members of Advanced Security Team
• Zhang Xiangqian(@h3rb0)
• Huiming Liu (@liuhm09)
Contents
• Introduction
• Attack Surfaces and Previous Works
• Vulnerabilities & Exploit & Demo
• Mitigation
• Conclusion
Introduction
• Nearby Transmission Technologies
• Bluetooth, Android beam, WiFi hotpot, WiFi Direct 
• Nearby Sharing on Android 
• Vendor’s App
• xxxx Share, xxxx Drop …
• Third Party App
• SHAREit, Xender, AirDroid, Send Anywhere ……
Motivation
• Nearby file transfer
• Bluetooth/NFC(Android Beam) 
• Not user friendly enough
• Not fast enough
• APPs based on Wi-Fi related Technology
• Nearly all top Android Vendors have their Nearby file transfer APPs
• 2018 shipment: nearly a billion android devices (IDC)
• Third-party file transfer Apps
• Top 10 Apps: nearly a billion users
• But are those Apps safe?
Android Sharing Apps 
Android Sharing Apps 
Android Sharing Apps 
• Scan The QR code to connect
• Shake at the same time
• …
Android Sharing Apps 
Sharing Process
Discover • BLE advertising Name, ID, Device Type ...
Pair
• Automatic pairing and key exchange
Connect • WiFi / WiFi P2P
Transfer • Pictures, Apks, Other Files ……
Attack surface
• Adversary:
• Attackers can be sniffer and sender of  BT and Wi-Fi packets
• Damage:
• Attackers can get the transferred files
• Others: Traffic hijacking, Info leaking, RCE…
• Attack Surfaces:
• Link Establishing
• Secure Transmission
• Device / ID Spoofing
• MITM
• Others(Web Server)
Link Establishing
• Connect automatically
• Attackers may join into the network without users’ permission.
• Networks’ key negotiating
• Attackers may obtain the established networks’ passwords.
Secure transmission
• No Encryption
• Get the file directly
• Unsafe key exchange
• Recover the real file from the encrypted traffic
Device / ID Spoofing
• Authenticate the real devices / users
• Device/ID Spoofing
Alice
Bob
Attacker
I am bob
I am bob
Info Collect
Man-in-the-middle
• Bluetooth MITM attack
• WiFi/WiFi P2P MITM attack
• Two Level
• Users may feel something strange
• The users can’t feel anything (✔ ️)
Others
• Web Server
• Directory traversal
• Other information disclosure
• Android components related
Previous researches 
• ZeroConf on OSX / iOS
• Discovering and Exploiting Novel Security Vulnerabilities in Apple ZeroConf -- 
Xiaolong Bai & Luyi Xing (S&P 2016)
• Reverse Google Nearby Connection API
• Nearby Threats: Reversing, Analyzing, and Attacking Google’s ‘Nearby Connections’ 
on Android – Antonioli, Daniele, etc. (NDSS ’19)
Our Research
• First comprehensive research about Android Nearby Sharing Apps
• Analyzed many related Apps including Pre-installed / Third Party Apps
• Found a lot vulnerabilities in various Apps
• Arrange them in several common attack methods
Vulnerabilities’ categories
• Sniffer attack related vulnerabilities
• Man-in-the-middle attack related vulnerabilities
• Logic vulnerabilities
• Other vulnerabilities
Sniffer attack
BLE Sniffer
• Ubertooth 、CC2540、nRF51
BLE Advertising
Secret data
Secret data
• What does this secret data mean?
• 7fa1818a8188c9365614e6879cccd0e03576ee51c86995346eff9ceca242cce1
aa0ed28c590211a3af3d9e67d236f640bf12645daf17ef7699c0ecc416574510
2f13e42564ed91336ef1e10e15b87408d11081b0a961e1009da9da8db875c9
638000000094000000
Reverse
Older version
Older version
Decrypt
p2pCfgEx = Encrypt.decrypt(sourceStrArray[0], 
Encrypt.generateSecureKey(Encrypt.generateRootKey("XXXXXXXXXXXXXXX", " 
XXXXXXXXXXXXXXX", this.mSecureRandom), sourceStrArray[2]), sourceStrArray[1]);
this.mSecureRandom = 
service.getApplicationContext().getResources().getString(R.string.ble_xxxx_key);
/res/values/strings.xml:
XXXXXXXXXXXXXXX
Decrypt
• Get sourceStrArray from BLE pcaket
• sSrc = sourceStrArray[0]
• sIv = sourceStrArray[1]
• Rootkey = enerateRootKey(" XXXXXXXXXXXXXXX ",
" XXXXXXXXXXXXXXX ",mSecureRandom)
• sKey = generateSecureKey(rootkey,sourceStrArray[2])
• p2p_info = decrypt(sSrc,sKey,sIv)
Decrypt
Sniffer
• Sniffer BLE 
• Extract the secret data
• Decrypt the secret data
• Join the P2P Group
• ARP spoofing
• Got the secret files!
Demo 1
Demo 2
Device and ID spoofing
• Who is herbo zhang？
• How to confirm identity?          
• DEVICE？ ID？ ICON？
Device and ID spoofing
Device and spoofing
• Who is really AAAA？
Man-in-the-middle
Who is the real receiver?
A has 50% chance to choose attacker.
B
A
B’ A’
Attacker
Man-in-the-middle
• A can't find the attacker A’
• The attacker does not send a scan response to A
• B can’t find the attack B’
• B is not in discovery mode
• Attacker can distinguish between A and A', B and B’
• The attacker can choose to block or receive any message
• The users (A,B) can’t feel anything 
Demo 3
None-confirm connection
• Secure connection process
• Unsecure connection process
A request
B confirm
AB establish link
A send
B receive
A request
AB establish link
A send
B confirm
B receive
None-confirm connection
None-confirm connection
• Bring more attack surfaces
None-confirm connection
• Hijacking the network
Hijacking the network
• Who is server？ Sender？ Receiver？
• Can I choose to be a server?  
• Can I make the other user connect to my WiFi without interaction？
Yes!
Yes!
Demo 4
Other vulnerabilities
• Accept automatically via Wi-Fi P2P
• Directory traversal
• RFM Vulnerabilities
Wi-Fi/Wi-Fi P2P Access Control
• Need to input password
Accept automatically via Wi-Fi P2P
• However, when we use Wi-Fi P2P protocal to connect:
• All authentications are gone!
Directory traversal
• A: Can I send you a file?
• B: Yes
• B: Please send it. I’m ready.
• A: I want to send it to you: /PATH/AAAA.JPG
• B: Send GET request for /PATH/AAAA.JPG
• A: Send /PATH/AAAA.JPG
Demo 5
Remote file management on computer
RFM Vulnerabilities
• Anonymous users have READ and WRITE permissions
Summary
• None-confirm before WiFi  Connection Established
• Not well protected access to WiFi/WiFi P2P
• Unsecure Transport
• No anti-spoofing
Pre-installed Nearby Sharing Apps
App
Confirm before WiFi  
Connection Established
WiFi/WiFi P2P 
Authentication
Secure 
Transport
Prevent
Spoofing
A
B
C
D
  : No security measures      
 : Have security measures but can be bypassed  
 : Have security measures                                    
Top 10 Third Party Nearby Sharing Apps
10%
20%
70%
Sniffer Attack
 : Vulnerable      
 : Safe     
 : Partial Vulnerable
20%
10%
70%
Spoofing
Mitigation
• More secure Wi-Fi / Wi-Fi P2P Key Exchange
• Transport encryption
• Prevent spoofing
• Others tips
Secure WiFi/WiFi P2P Key Exchange
• Transfer the KEY over a secure channel
• Out of band: NFC
• Certificate based key-exchange mechanism
• Transferring keys over the Internet securely
• PIN / PBC
Secure Transport
• Using TLS/HTTPS instead of TCP/HTTP
• Transferring keys over the Internet securely
• Pre-exchanged keys
Prevent spoofing
• Certificate based authentication
• Unique ID
• Distributed by the server
• Signed with pre-defined trust anchor
• Attacker can’t sign the Unique ID correctly
• Make sure that the device can distinguish between real users and 
attackers
Others tips
• Prevent attackers from joining the network
• Turned off by default, turned off after a period of idle time
• Confirm before connection established
• Do not establish connection automatically with users who are 
unidentifiable
Recommended design
Conclusion
• Attack vectors of nearby sharing apps
• First comprehensive research about them
• Found Many vulnerabilities categorized in several common attack methods
• Present some effective mitigation methods