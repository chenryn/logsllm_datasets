try { 
interrupt();
shutdownRequested = true;
finally{
catch (Interruptedexceptior e)
doshutdown();
while (!shutdownRequested) (
GracefulThread 类(GracefulThread.java)
dowork();
Two-Phase Termination-
快把玩具收拾好，去睡觉吧
第10
---
## Page 280
[现在希望写-一支 GUI 程序，在单击[Execute]按钮后，会慢慢地显示出 50 个句
9
public class MyFrame extends JFrame implements ActionListener 
publie class Main {
import javax.swing.JButton;
import javax.swiny.JLabel;
import java.awl.event.ActionEvent;
import.
import java.lo.I0Exception;
提供终止服务的功能。
请改写List 10-8的 Service 类，并白行增加其他需要的类，使ICancel]按钮能够
本没有办法单击（图10-10）。
前（图10-9），按钮都-·直是按下的状态，所以，在done.前，[Cancel]按钮根
所示，在这里，我们单:i[Execute]按钮后，直到控制台（console）显示出 done.
import javax.swing.JFrane;
import
List 10.7
我们尝试在还没实现cancel方法的情况下执行了程序。启动后的面面如图10-8
但cancei 方法不知道该怎么写，
处理交给 Service类（List 10-8）进行。这里已经写好 Service 类的 service 方法，
在这里建立了Main类（List10-6）、MyFrame类（List 10-7），并想将实际的
点（.），而单击[Cance’按钮可以中途停止显示。
问题10-5（GUI上的应用）
List 10-6
public MyFrame () {
private final JButton executeButton = new JButton("execute");
 public static void main(string[] args) [
private final JButton cancelButton = new JButton("Cancel");
protected void doshutdown() ↑
java.awt.event.ActionListener;
java,awt.FlowLayout;
new MyFramel);
super("MyFrame");
MyFrame 类 (MyFrame.java)
Main 类(Mainjava)下去
---
## Page 281
public ciass Service ↑
List 10-8
public static void cancel()
！/终止服务
public static void servicei)
//开始执行服务
public void actionPerformed(ActionEvent e)
//尚未实现
 System.out.println("done.");
System.out.print("service");
if (e.getsource() == executeButton)
for (int i = 0; i  0){
try{ 
 return shutdownRequested:
interrupti);
shutdownReguested - true;
requestedTimeMillis = System.currentTimeMillis();
finally {
doworkllevel - l, posA, posc, posB);
dashuedewn (l;
for [int level = C; !shutdownRequested; level++)
HanoiThread 类 ( HanoiThread.java)
 System.out.println(""):
doworkilevei, 'A', 'B',
(u====  + [aAa + u TeAa ====) utsutid'no-maisAs
'c'!;
---
## Page 285
msec.");
A->C A->B C->B A->C B->A B->C A->C A->B C->B C->A B->A C->B
C->B C->A B->A C->B
B->A
B->A
A->C
C->A
--
==+- Level 5 ===
== Level 0 ====
main: BEGIN 
A->C
===
A->C
A->C
A->B
=n
A->C
ii=
A->B
===
private void doshutdown()
//终止处理
A->B C->B
A->BC->BA->CB->AB->CA->CA->BC->BC->AB->AC->B
Level 2 ===
 long time = System.currentTimeMillis() - requestedTimeMillis;
B->C A->C
A->BC->B A->CR->A B->C A->CA->B C->BC->A B->A C->B
Leve1 4 ==-= 
Level 3 ====
A->B C->B
evel l -==-
B->C
A->B
Level 6 =:
C->BA->B
dowork(level - l， posC， posB, pcsA);
A->C
C->B
Two-Phase Termination--
C->B A->C A->B C->BC->A B->A B->C A->CB->A
B->A
A->C
A->B
一快把玩具收拾好，去睡觉吧
10章
---
## Page 286
main: END
doShLtdown:Iat.ency=7681msec.一送出终止请求直到开始终止处理间隔的时间
A->B
A->BC->AB->C B->A C->AC->BA->BA->C B->C A->BC->AC->B
-<---
- - - - - - - - -  - -
{中略】
main: shutdowsRequest
（中略）
<-8<-O<-
图10-12执行范例
（续上图）
---
## Page 287
Storage-
线程的保管箱
Thread-Specific
第11章
一每个
---
## Page 288
好理解。也就是说，ThreadLocal的实例只有·个，管理多个对象。
java.lang.ThreadLocal 是保管箱间
间。
存储空间的Pattem。
空间”的意义。
都会从各自的保管箱中拿出白己的行李。
说。
己的钥匙进来了，虽然进到同一个保管箱间，但·定是打开白己保管箱。每个用户，
钥匙进来了保管箱间，当他退出的时候，手上拿着自己的行李。又有-个人拿着自
关于 java.lang.ThreadLocal 类
Thread-Specific Storage Pattern
Thread-Specific Storage Pattern 是只有一个入口，但内部会对每个线程提供特有
java.lang.ThreadLocal的实例可以想象成一种集合架构（collection）或许会比较
在正式进入这-·章之前，在此要简单地对 java.lang.ThreadLocal 类作简要的解
这里是保管箱间，在这里，有许多投币保管箱都排在一起。有个人拿着自己的
关键在丁不只有一个保管箱，而是一个集合有大量保管箱的房间。
使用Java标准链接库时，可以用java.lang.ThreadLocal类加以实现。
·Thread-Local Stroage（线程的区域内存空间）
·Thread-Specific Field（线程独有的字段）
●Thread-Specific Data（线程独有的数据
●Per-Thread Attribute（每个线程的内容）
Thread-Specific Storage 还有
这一章要学习的是 Thread-Specific Storage Patterm e
等各种称呼。
（参考附录E[POSA2]）
（参考附录E[Lea]）
（参考 java.lang.InheritableThreadLocal 的 API 引用文件）
（参考附录E[Lea][POSA2][Lweis00]）
---
## Page 289
录）数据。类说明如表11-1所示，
2，会有助于对 Pattern的理解。
Pattem 的范例程序。在脑海里有着范例程序1的印象后，再来读下-段的范例程序
检查现在的线程。也就是说白已本身就是键值。
就会返回null
线程对应的实例)。之前 set 的实例，就是现在 get 的返回值。如果从来没有 set 过，
 public O6ject get)
实例。
查当前线程（也就是Thread.currentThread()的值），自动以这个值作为键值存放
法取得。请注意 set 方法并没有用米传入表示线程的参数。在 set 方法里，会检
的线程（现在的线程）所对应的存储空间。这里所存放的实例，可以使用get 方
Main
Log
 public void set0
与“取得（get)”方法。依次说明如下：
没有使用Thread-SpecificStorage Pattern的范例
范例程序1:
范例程序！是单线程的程序，
要了解Thread-Specific Storage Pattern 前，在此我们先来看-个没有使用这个
与 set 方法一样，get 方法也没有表示线程的参数。因为程序会在 get 里自己去
ThreadLocal 类的 get 方法，可以取得调用 get 方法的线程所对应的实例（现在
调用 get时，就像是从自己的保管箱拿出行李一样。
调川 set 时，就像把自己的行李放进保管箱-样。
ThreadLocal 类的 set 方法，可以将参数所指定的实例，存放到调用 set 方法
类图如图11-1所示。
因为ThreadLocal 的实例管理了多个对象，所以 ThreadLocal 拥有“存放（set）"
名
称
表11-1
Thread-Specific Storage-
范例程序1的类一览表
，使川 Log类的类方法，在文件留下 log（操作记
操作测试用的类
产生 log用的类
说
每个线程的保管箱
第11草
---
## Page 290
Jhaxa多线程设计膜式
IOException 异常。
初始化Log 时执行一次，之所以不直接初始化 writer，是因为我们需要捕捉
{.}块用来对 writer字段初始化，建立出名为log.txt 的 log 文件。这个操作只会在
Log 类
println方法用来将传入的字符串存到文件里。
public class Log f
import java.io.Printwriter;
println 号close 都将实际的工作委托给writer字段。
close 方法用来关闭 log文件。
为了对文件写入，所以在 writer字段里存放有java.io.PrintWriter 的实例。static
Log类（List 11-1）用来将程序的 log 记录存放在 log.txt 里。
import
List 11-1
/1关闭1og
/初始化writer字段
 private static Printwriter writer = null;
public static void printlnistring s) f
//加入一条1og
static f
图11-1