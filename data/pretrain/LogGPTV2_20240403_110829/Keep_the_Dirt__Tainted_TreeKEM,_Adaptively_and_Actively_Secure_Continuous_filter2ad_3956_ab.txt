of its parent nodes. Instead, an edge u → v in the tree (recall
that edges are directed and pointing from the leaves to the root)
denotes that the secret key of v is encrypted under the public
key of u. This ciphertext can now be distributed to the subset
of the group who knows the secret key of u to convey the
secret key of v to them. We will refer to this as “encrypting v
to u”. Below we will outline a slightly simpliﬁed construction,
close to TreeKEMv7, which will later ease the understanding
of the protocol here proposed.
To initialise a group, the initiating party creates a tree by
assigning the leaves to the keys of the invited parties. She then
samples fresh secret/public-key pairs for the internal nodes of
the tree and computes the ciphertexts corresponding to all the
edges in the tree. (Note that leaves have no ingoing edges and
thus the group creator only needs to know their public keys.)
Finally she sends all ciphertexts to the delivery server. If a
party comes online, it receives the ciphertexts corresponding
to the path from its leaf to the root from the server, and can
then decrypt (as it has the secret key of the leaf) the nodes on
this path all the way up to the group key in the root.
As illustrated in Figure 1, this construction naturally allows
for adding and removing parties. If IDi wants to remove IDj,
she simply samples a completely fresh path from a (fresh) leaf
to a (fresh) root replacing the path from IDj’s leaf to the root.
She then computes and shares all the ciphertexts required for
the parties to switch to this new path except the ciphertext
that encrypts to IDj’s leaf. IDi can add IDj similarly, she just
samples a fresh path starting at a currently not occupied leaf,
using IDj’s key as the new leaf node, and communicates the
new keys to IDj. This process can be optimized if the keys
are derived hierarchically, from a hash chain of seeds, so that
a single seed needs to be encrypted to each party.
Unfortunately, adding and removing parties like this creates
a new problem. After IDi added or removed IDj, it knows all
the secret keys on the new path (except the leaf). To see why
this is a problem, assume IDi is corrupted while adding (or
removing) IDj (and no other corruptions ever take place), and
later – once the adversary loses access to IDi’s state – IDi
executes an Update. Assume we use a na¨ıve protocol where
this Update replaces all the keys on the path from IDi’s leaf
to the root (as in ART) but nothing else. As IDi’s corruption
also leaked keys not on this path, thus not replaced with the
Update, the adversary will potentially still be able to compute
the new group key, so the Update failed to achieve PCS.
To address this problem, TreeKEM introduced the concept
of blanking. In a nutshell, TreeKEM wants to maintain the
invariant that parties know only the secrets for nodes on the
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:47 UTC from IEEE Xplore.  Restrictions apply. 
269
path from their leaf to the root. However, if a party adds
(or removes) another party as outlined above, this invariant
no longer holds. To ﬁx this, TreeKEM declares any nodes
violating the invariant as not having any secret (nor public)
value assigned to them. Such nodes are said to be “blanked”,
and the protocol basically speciﬁes to act as if the child of a
blank node is connected directly to the blanked node’s parents.
In particular, when TreeKEM calls for encrypting something to
a blank node, users will instead encrypt to this node’s parents.
In case one or both parents are blanked, one recurses and
encrypts to their parents and so forth.
This saves the invariant, but hurts efﬁciency, as we now no
longer consider a binary tree and, depending on the sequence
of Adds and Removes, can end up with a “blanked” tree that
has effective indegree linear in the number of parties. The
reason one can still hope for TreeKEM’s efﬁciency to not
degrade too much and stay close to logarithmic in practice
comes from the fact that blanked nodes can heal: whenever
a party performs an Update operation, all the blank nodes on
the path from its leaf to the root become normal again.
The protocol studied in this paper builds closely on the one
just outlined. For completeness, we mention that the design of
TreeKEMv9 differs in essentially two aspects. First, operations
are not executed standalone, but bundled into groups: users can
at any point propose an operation, not having any impact on
the group state; then, a user IDj can collect those proposals
and execute them at once in a Commit, which includes an
update of IDj’s path, and moves the group forward into a new
epoch. This allows e.g. for IDi to propose an Update by just
sending their new leaf public key and waiting for someone else
to commit that proposal (which will in turn blank IDi’s path).
Second, Adds no longer involve blanking: a new user’s leaf
node will be directly connected to the root, and progressively
pushed down the tree as users within the appropriate subtree
commit. In particular, the initialization of the tree will now
consist of a Commit including Add proposals for each of
the group members. Since none of these aspects help in the
understanding of the proposed protocol, we omit the details
and refer the reader to the MLS draft [6].
B. Our Contribution
In this work we formalize an alternative CGKA design,
stemming from TreeKEM, ﬁrst proposed by Millican on the
MLS mailing list on February 20184, which we call Tainted
TreeKEM, or simply TTKEM. Further, we show it to be more
efﬁcient than TreeKEM on certain realistic scenarios and prove
it to satisfy a comprehensive security statement which captures
the intuition that an Update ﬁxes a compromised state. Our
proof can be easily adapted to TreeKEM, for which we can
get exactly the same security statement.
1) Tainted TreeKEM (TTKEM): As just outlined, the reason
TreeKEM can be inefﬁcient comes from the fact that once a
node is blanked, we cannot simply encrypt to it, but instead
must encrypt to both its parents, if those are blanked, to
their parents, and so forth. The rationale for blanking is to
4[MLS] Removing members from groups Jon Millican {PI:EMAIL}
https://mailarchive.ietf.org/arch/msg/mls/4-gvXpc-
February
12
LGbWoUS7DKGYG65lkxs
2018
Asynchronous Ratcheting Tree (ART)
gef
gef
gef(cid:48)
e = gab
f = gcd
e = gab
f = gcd
a
b
c
d
a
b
c
d
f(cid:48) = gcd(cid:48)
d(cid:48)
(a)
(b)
TreeKEM
A
A
(c)
(e)
H
A
A
H
(d)
H
A
H
(f)
Fig. 1: Top: Illustration of an Update in the ART protocol. The state of the
tree changes from (a) to (b) when Dave (node d) updates his internal state to
d(cid:48). Bottom: Update and Remove in TreeKEM and TreeKEM with blanking.
The state of a completely ﬁlled tree is shown in (c). The state changes from
(c) to (d) when Alice (node A) performs an Update operation. This changes to
(e) when Alice removes Harry (node H) in na¨ıve TreeKEM (with the nodes
that Alice should not know in red) or to (f) in the actual TreeKEM protocol
which uses blanking.
enforce an invariant which states that the secret key of any
(non-blanked) node is only known to parties whose leaves are
ancestors of this node. This seems overly paranoid, assume
Alice removed Henry as illustrated in Figure 1, then the red
nodes must be blanked as Alice knows their value, but it is
instructive to analyze when this knowledge becomes an issue
if no blanking takes place: If Alice is not corrupted when
sending the Remove operation to the delivery server there is
no issue as she will delete secret keys she should not know
right after sending the message. If Alice is corrupted then the
adversary learns those secret keys. But even though now the
invariant doesn’t hold, it is not a security issue as an adversary
who corrupted Alice will know the group key anyway. Only
once Alice updates (by replacing the values on the path from
her leaf to the root) there is a problem, as without blanking not
all secret keys known by the adversary are replaced, and thus
he will be able to decrypt the new group key; something an
Update should have prevented (more generally, we want the
group key to be safe once all the parties whose state leaked
have updated).
a) Keeping dirty nodes around, tainting versus blanking:
In TTKEM we use an alternative approach, where we do not
blank nodes, but instead keep track of which secret keys of
nodes have been created by parties who are not supposed to
know them. Speciﬁcally, we refer to nodes whose secret keys
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:47 UTC from IEEE Xplore.  Restrictions apply. 
270
were created by a party IDi which is not an ancestor of the
node as tainted (by IDi). The group keeps track of which nodes
are tainted and by whom. A node tainted by IDi will be treated
like a regular node, except for the cases where IDi performs
an Update or is removed, in which it must get updated.
Let us remark that
tainted nodes can heal similarly to
blanked nodes: once a party performs an Update, all nodes
on the path from its leaf to the root are no longer tainted.
b) Efﬁciency of TTKEM vs TreeKEM: Efﬁciency-wise
TreeKEM and TTKEM are incomparable. Depending on the
sequence of operations performed either TreeKEM or TTKEM
can be more efﬁcient (or they can be identical). Thus, which
one will be more efﬁcient in practice will depend on the
distribution of operation patterns we observe. In Section II-D
we show that for some natural cases TTKEM will signiﬁcantly
outperform TreeKEM. This improvement is most patent in the
case where a small subset of parties perform most of the Add
and Remove operations. In practice, this could correspond
to a setting where we have a small group of administrators
who are the only parties allowed to add/remove parties. The
efﬁciency gap grows further if the administrators have a lower
risk of compromise than other group members and thus can
be required to update less frequently. In this setting, TTKEM
approaches the efﬁciency of na¨ıve TreeKEM.
When we compare the efﬁciency of the CGKA protocols we
focus on the number of ciphertexts a party must exchange with
the delivery server for an (Update, Add or Remove) operation.
The reason for this is that the alternative metric of measuring
the number of ciphertexts a party needs to download to process
an operation is not as relevant, since, all protocols considered,
this number will be logarithmic in the worst case.5
2) Security of (Tainted) TreeKEM: A main contribution of
this work is a security proof for TTKEM for a comprehensible
security statement that intuitively captures how Updates ensure
FS and PCS, in a strong security model. In particular, this
constitutes the ﬁrst adaptive security proof for any TreeKEM-
related protocol. Moreover, both the security statement and the
proof can be easily adapted to TreeKEM. We elaborate in the
following section.
C. The Adversarial Model
We anticipate an adversary who works in rounds, in each
round it may adaptively choose an action, including start/stop
corrupting a party, instruct a party to initalize an operation
or relay a message. The adversary can choose to corrupt
any party, after which its state becomes fully visible to the
adversary. In particular, corrupting a party gives the adversary
access to the random coins used by said party when executing
any group operation, deeming the party’s actions deterministic
in the eyes of the adversary throughout the corruption. We
would like to stress that security in this strong model implies
security in weaker and potentially more realistic models, e.g.
consider the setting where malware in a device leaks some
of the randomness bits but cannot modify them. He can
also choose to stop the corruption of a currently corrupted
5There is, however, still room for improvement in the case where a group
member comes online and must process a large number of operations, as these
could potentially be somehow batched by the server.
party. The adversary can instruct a party to initalize an
Init/Update/Remove/Add operation. This party then immedi-
ately outputs the corresponding message to be sent to the
delivery server. The goal of the adversary is to break the
security of a group key (i.e., a secret key that is contained in
the root in the view of at least one party) that – given the
sequence of actions performed – it should not trivially know.
We now discuss different possible restrictions on the adver-
sary corresponding to qualitatively different levels of security.
a) Adaptiveness: The literature distinguishes between
selective and adaptive adversaries. In the selective case, an
adversary is required to make all or some of its choices
(here this means the sequence of operations and which key
it is going to break) at the beginning of the security ex-
periment, without seeing any public keys or the results of
previous actions. While it is often more convenient to prove
security in this setting, it is clearly unrealistic, since in the
real world adversaries may adjust their behaviour based on
what they observe during the attack. So obviously, security
against adaptive adversaries is desirable. There is a generic
reduction from selective to adaptive adversaries that simply
guesses what the adversary may choose (this is the approach
effectively taken in [7]). However, this involves a loss in the
advantage that is exponential (or even superexponential) in
the size of the group. This means that in order to provably
achieve meaningful security, one needs to set the underlying
security parameter linear in the group size, which results in
the Update messages having size linear in the group size
(since they usually consist of encryptions of secret keys). But
the trivial construction based on pairwise channels also has
message size that is linear in the number of group members,
so such a security proof defeats the whole purpose of the
protocol: having small Update messages! The adversaries we
consider are adaptive while the security loss we achieve is only
quasipolynomial (or even polynomial) in the standard model
(in the ROM, resp.; see details below).
b) Activeness: One can classify adversaries with respect
to their power to interact with the protocol during the attack.
For example,
the weakest form of adversary would be a
passive adversary, i.e. an eavesdropper that only observes the
communication but does not alter any messages. While the
strongest notion would be an active adversary who can behave
completely arbitrarily. In this work we consider “partially”
active adversaries who can arbitrarily schedule the messages
of the delivery server, and thus force different users into
inconsistent states. But we do not consider adversaries who
can arbitrarily deviate and for example use secret keys of
corrupted parties to create malformed messages. Restricting to
partially active adversaries is fairly common in this setting [2],
[8], [9] (also somewhat implied by the model of [10], where
communication must halt after an active attack). Achieving
or even deﬁning meaningful security against fully active
adversaries is the subject of ongoing research [11].
c) Forward Secrecy: FS (and PCS) are standard notions