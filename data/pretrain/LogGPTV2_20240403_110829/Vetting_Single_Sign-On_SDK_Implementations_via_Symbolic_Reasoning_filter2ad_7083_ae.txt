extensive efforts have been devoted to their security anal-
ysis. Firstly, the protocol speciﬁcation [23, 39] has been
veriﬁed by different formal methods including model
checking [5, 7, 15, 19, 20, 36], manual analyses [28, 32]
and cryptographic proof [11]. These formal methods
have uncovered different protocol design ﬂaws. How-
ever, these methods are mainly used to prove the cor-
rectness (or ﬁnd violations) of the speciﬁcation. As a
result, the discovered vulnerabilities may not be realistic
and can be unexploitable (unlike ours). For example, al-
USENIX Association
27th USENIX Security Symposium    1471
Victim RPAttacker    IdP1).Req0: authorization_url() 2). client_id +... + state3) User authentication and grant permission5). Req1:fake_code + state + victim’s access token at mRP +victim’s mac_key at mRP 4) code + state6). Token exchange request: fake_code + ...7). Invalid code8). User profile request: victim’s access token + victim’s MAC 9). Victim’s user datathough [19] discovers the so-called 307 Redirect attack
that allows an attacker to learn the victim’s password in
IdP, real-world SSO systems actually use 302 redirection
instead.
Despite these theoretical works, the practical imple-
mentations of the protocols were often found to be in-
correct due to the implicit assumptions enforced by the
IdP SDKs [46] or the incorrect interpretation of ambigu-
ous speciﬁcation [13]. Towards this end, researchers
start to analyze the security issues of real-world imple-
mentations. The most popular method relies on network
trafﬁc analysis [25, 30, 43–45, 48, 49], to infer a cor-
rect system model for guiding subsequent fuzzing. An-
other attempt was to analyze how the security issues of
the underlying platform can affect the SSO security, as
discussed in [13, 47]. Motivated by numerous types of
vulnerabilities discovered by these methods, researchers
have built different automatic tools [18, 33, 51] to per-
form large-scale testing of SSO implementations against
known classes of vulnerabilities. These studies do not
consider the security of SDK internals and thus are dif-
ferent from ours in nature.
The work most similar to ours should be [46] which
identiﬁes the implicit assumptions in order for an SSO
SDK to be used in a secure way. However, their work re-
quires labor-intensive code translation for each SDK. As
a result, the scheme is not scalable and the resultant se-
mantic model can be inaccurate. More importantly, they
focus on how a SDK can be insecurely used while we
concern the vulnerabilities of SDK internals, which can
be exploited even if the RP developers strictly follow the
Best Current Practices. can be insecure by itself.
SDK security analysis. Modern software is often de-
veloped on the top of SDKs. To detect the SDK us-
age errors, many different tools and methodologies have
been proposed. Most of these works focus on checking
whether the SDK follow a speciﬁcation, which can be
either manually speciﬁed (e.g., SSLint [24]), extracted
from code [5] or learned from other libraries [35, 50].
However, all of them emphasize on the API invocation
patterns. In contrast, relatively few efforts have been de-
voted to the security analysis on the SDK internals.
Asynchronous events studies. Previous research has
shown that asynchronous events can lead to serious prob-
lems. Petrov et al. [37] formulate a happens-before
relation to strictly specify the web event orders (e.g.,
script loading should happen before execution) for de-
tecting dangerous race-conditions in web applications.
Such a happens-before relation was developed based on
in-depth study of relevant speciﬁcations (e.g., those of
HTML and Javascript) and browser behavior. As such,
it is rather difﬁcult to generalize their ﬁndings to cover
other protocols. Furthermore, the happens-before rela-
tion cannot characterize the much more complicated se-
curity properties of multi-party SSO protocols. Another
related work is CHIRON [27], which can detect semantic
bugs of stateful protocol implementations by considering
different request orders. However, CHIRON mainly fo-
cuses on two-party systems and cannot maintain a con-
sistent system state for more general multiple party sys-
tems. As a result, the work cannot be readily applied to
the 3-party SSO system.
Symbolic execution. Using systematic path ex-
ploration techniques,
symbolic execution tools like
KLEE [9], S2E [14], UC-KLEE [38] are very effective
in non-distributed software bug detection, especially for
low-level memory corruption problems [41] (but not for
web apps). More recently, the symbolic execution ap-
proach [10, 31, 40] has been extended to handle asyn-
chronous apps (e.g., OpenFlow and sensor networks)
where events of interest can occur at any time. However,
previous extensions require expert-level domain knowl-
edge and cannot be applied for general asynchronous
apps. Researchers have also used symbolic execution
to verify web applications (e.g., [12, 42]), but they did
not consider challenges arise from multi-lock-step op-
erations or the multi-party coordination.
In contrast,
S3KVetter has developed new techniques to test the im-
plementations of multi-party protocols/ systems.
10 Conclusion
In this paper, we have presented S3KVetter, an auto-
mated testing tool which can discover logic bugs/ vul-
nerabilities buried deep in SSO SDKs by utilizing sym-
bolic reasoning techniques. To better explore a 3-party
SSO system, we developed new techniques for symbolic
execution and realized them in S3KVetter. We have eval-
uated S3KVetter on ten popular SSO SDKs/ libraries
which support different SSO protocols and modes of au-
thorization grant ﬂow.
In addition to existing vulnera-
bilities, S3KVetter successfully discovers 4 new types of
vulnerabilities, all of which can result in serious conse-
quences including application account hijacking or user
privacy leakage. Our ﬁndings demonstrate the efﬁcacy of
S3KVetter in performing systematic reasoning on SDKs
and provide a reality-check on the implementation qual-
ity of popular “industrial-strength” SSO SDKs.
Acknowledgements and Responsible Disclo-
sure
We thank our shepherd Prof. Cristina Nita-Rotaru
and the anonymous reviewers for their valuable com-
ments which help to improve the paper considerably.
This work is supported in part by the Innovation and
Technology Commission of Hong Kong (project no.
1472    27th USENIX Security Symposium
USENIX Association
ITS/216/15), National Natural Science Foundation of
China (NSFC) under Grant No. 61572415, the CUHK
Technology and Business Development Fund (project
no. TBF18ENG001), and Hong Kong S.A.R. Research
Grants Council (RGC) Early Career Scheme/General Re-
search Fund No. 24207815 and 14217816.
We have reported the newly discovered vulnerabilities
to all the affected vendors and have received various con-
ﬁrmations and acknowledgments.
[17] FERRERO, N.
OAuth2Lib.
NateFerrero/oauth2lib.
https://github.com/
[18] FERRY, E., O’RAW, J., AND CURRAN, K. Security evaluation of
the OAuth 2.0 framework. Inf. & Comput. Security 23, 1 (2015),
73–101.
[19] FETT, D., K ¨USTERS, R., AND SCHMITZ, G. A comprehensive
formal security analysis of OAuth 2.0. In CCS (2016).
[20] FETT, D., K ¨USTERS, R., AND SCHMITZ, G. The Web SSO
Standard OpenID Connect: In-Depth Formal Security Analysis
and Security Guidelines. In IEEE 30th Computer Security Foun-
dations Symposium (CSF) (2017).
References
[1] Code Coverage. https://coverage.readthedocs.io.
[2] PyPI
http://www.pypi-stats.com/
statistics.
package/.
[3] Requests-OAuthLib. https://github.com/requests/
requests-oauthlib.
[4] Satisﬁability modulo
theories
//smtcomp.sourceforge.net/2017/.
competition.
http:
[5] BAI, G., LEI, J., MENG, G., VENKATRAMAN, S. S., SAXENA,
P., SUN, J., LIU, Y., AND DONG, J. S. AUTHSCAN: automatic
extraction of web authentication protocols from implementations.
In NDSS (2013).
[6] BALL, T., AND DANIEL, J. Deconstructing dynamic symbolic
execution. Dependable Software Systems Engineering 40 (2015),
26.
[7] BANSAL, C., BHARGAVAN, K., AND MAFFEIS, S. Discovering
concrete attacks on website authorization by formal analysis. In
CSF (2012).
[8] BARTH, A., JACKSON, C., AND MITCHELL, J. C. Robust de-
fenses for cross-site request forgery. In CCS (2008), ACM.
[9] CADAR, C., DUNBAR, D., AND KLEE, D. Klee: Unassisted and
automatic generation of high-coverage tests for complex systems
programs. In Proc. Operating System Design and Implementation
(OSDI 08), pp. 209–224.
[10] CANINI, M., VENZANO, D., PERESINI, P., KOSTIC, D., AND
REXFORD, J. A nice way to test openﬂow applications. In Pro-
ceedings of the 9th USENIX Symposium on Networked Systems
Design and Implementation (NSDI) (2012), no. EPFL-CONF-
170618.
[11] CHARI, S., JUTLA, C. S., AND ROY, A. Universally compos-
able security analysis of OAuth v2.0. Cryptology ePrint Archive,
Report 2011/526, 2011.
[12] CHAUDHURI, A., AND FOSTER, J. S. Symbolic security analy-
sis of ruby-on-rails web applications. In CCS (2010), ACM.
[13] CHEN, E. Y., PEI, Y., CHEN, S., TIAN, Y., KOTCHER, R., AND
TAGUE, P. OAuth demystiﬁed for mobile application developers.
In CCS (2014), pp. 892–903.
[14] CHIPOUNOV, V., KUZNETSOV, V., AND CANDEA, G. S2E:
A platform for in-vivo multi-path analysis of software systems.
ACM SIGPLAN Notices (2011).
[15] D. FETT, R. K ¨USTERS, AND G. SCHMITZ. An expressive
model for the web infrastructure: Deﬁnition and application to
In IEEE Symp. on Security and
the Browser ID SSO system.
Privacy, S&P (2014).
[16] DITTMER, M. S., AND TRIPUNITARA, M. V. The unix process
In Pro-
identity crisis: A standards-driven approach to setuid.
ceedings of the 2014 ACM SIGSAC Conference on Computer and
Communications Security (2014), ACM, pp. 1391–1402.
[21] GAZIT,
I.
oauthlib.
OAuthLib.
https://github.com/idan/
[22] GODEFROID, P., KLARLUND, N., AND SEN, K. Dart: directed
In ACM Sigplan Notices (2005),
automated random testing.
ACM.
[23] HARDT, D. The OAuth 2.0 authorization framework, 2012. RFC
6749.
[24] HE, B., RASTOGI, V., CAO, Y., CHEN, Y., VENKATAKRISH-
NAN, V., YANG, R., AND ZHANG, Z. Vetting SSL usage in
applications with SSLint. In Security and Privacy (S&P), 2015
IEEE Symposium on (2015), IEEE, pp. 519–534.
[25] HOMAKOV, E. The Achilles Heel of OAuth or Why Facebook
Adds Special Fragment.
[26] HOMAKOV, E. The Most Common OAuth2 Vulnerability.
[27] HOQUE, E., CHOWDHURY, O., CHAU, S. Y., NITAROTARU, C.,
AND LI, N. Analyzing operational behavior of stateful protocol
implementations for detecting semantic bugs. In DSN (2017).
[28] HU, P., YANG, R., LI, Y., AND LAU, W. C. Application im-
personation: problems of OAuth and API design in online social
networks. In Proceedings of the second ACM conference on On-
line social networks (2014), ACM.
[29] JANRAIN. Social login continues strong adoption.
[30] JING, W. Covert Redirect Vulnerability.
[31] KOTHARI, N., MILLSTEIN, T., AND GOVINDAN, R. Deriving
state machines from tinyos programs using symbolic execution.
In Proceedings of the 7th international conference on Information
processing in sensor networks (2008), IEEE Computer Society,
pp. 271–282.
[32] MAINKA, C., MLADENOV, V., AND SCHWENK, J. Do not trust
me: Using malicious IdPs for analyzing and attacking Single
In Security and Privacy (EuroS&P), 2016 IEEE Eu-
Sign-On.
ropean Symposium on (2016), IEEE, pp. 321–336.
[33] MAINKA, C., MLADENOV, V., SCHWENK, J., AND WICH, T.
Sok: Single sign-on security–an evaluation of openid connect. In
EuroS&P (2017).
[34] MLADENOV, V., MAINKA, C., KRAUTWALD, J., FELDMANN,
F., AND SCHWENK, J. On the security of modern Single Sign-On
protocols: OpenID Connect 1.0. CoRR (2015).
[35] NGUYEN, H. A., DYER, R., NGUYEN, T. N., AND RAJAN, H.
Mining preconditions of APIs in large-scale code corpus. In Pro-
ceedings of the 22nd ACM SIGSOFT International Symposium
on Foundations of Software Engineering (2014), ACM, pp. 166–
177.
[36] PAI, S., SHARMA, Y., KUMAR, S., PAI, R. M., AND SINGH,
S. Formal veriﬁcation of OAuth 2.0 using Alloy framework.
In Communication Systems and Network Technologies (CSNT)
(2011), IEEE.
[37] PETROV, B., VECHEV, M., SRIDHARAN, M., AND DOLBY, J.
Race detection for web applications. In ACM Sigplan Conference
on Programming Language Design and Implementation (2012),
pp. 251–262.
USENIX Association
27th USENIX Security Symposium    1473
[38] RAMOS, D. A., AND ENGLER, D. R. Under-constrained sym-
bolic execution: Correctness checking for real code. In USENIX
Security (2015), pp. 49–64.
[39] SAKIMURA, N., BRADLEY, J., JONES, M., DE MEDEIROS, B.,
AND MORTIMORE, C. OpenID Connect core 1.0.
[40] SASNAUSKAS, R., LANDSIEDEL, O., ALIZAI, M. H., WEISE,
C., KOWALEWSKI, S., AND WEHRLE, K. Kleenet: discover-
ing insidious interaction bugs in wireless sensor networks be-
fore deployment. In Proceedings of the 9th ACM/IEEE Interna-
tional Conference on Information Processing in Sensor Networks
(2010), ACM, pp. 186–196.
[41] STEPHENS, N., GROSEN, J., SALLS, C., DUTCHER, A.,
WANG, R., CORBETTA, J., SHOSHITAISHVILI, Y., KRUEGEL,
C., AND VIGNA, G. Driller: Augmenting fuzzing through se-
lective symbolic execution. In Proceedings of the Network and
Distributed System Security Symposium (2016).
[42] SUN, F., XU, L., AND SU, Z. Detecting logic vulnerabilities in
e-commerce applications. In NDSS (2014).
[43] SUN, S., AND BEZNOSOV, K. The devil is in the (implemen-
tation) details: an empirical analysis of OAuth SSO systems. In
CCS (2012).
[44] WANG, H., ZHANG, Y., LI, J., LIU, H., YANG, W., LI, B.,
AND GU, D. Vulnerability assessment of OAuth implementations
in Android applications. In ACSAC (2015).
[45] WANG, R., CHEN, S., AND WANG, X. Signing me onto your
accounts through Facebook and Google: A trafﬁc-guided security
study of commercially deployed Single-Sign-On web services. In
S&P (2012).
[46] WANG, R., ZHOU, Y., CHEN, S., QADEER, S., EVANS, D.,
AND GUREVICH, Y. Explicating SDKs: Uncovering assump-
tions underlying secure authentication and authorization.
In
USENIX Security (2013).
[47] YANG, R., AND LAU, W. C. Breaking and ﬁxing mobile app
authentication with OAuth2.0-based protocols. In ACNS (2017).
[48] YANG, R., LAU, W. C., AND LIU, T. Signing into one billion
mobile app accounts effortlessly with OAuth 2.0. In Black Hat,
Europe (2016).
[49] YANG, R., LI, G., LAU, W. C., ZHANG, K., AND HU, P.
Model-based security testing: An empirical study on OAuth 2.0
implementations. In AsiaCCS (2016).
[50] YUN, I., MIN, C., SI, X., JANG, Y., KIM, T., AND NAIK, M.
APISan: Sanitizing API usages through semantic cross-checking.
In 25th USENIX Security Symposium (USENIX Security 16).
[51] ZHOU, Y., AND EVANS, D. SSOScan: Automated testing of
web applications for Single Sign-On vulnerabilities. In USENIX
Security (2014).
A Detailed Description of the Authoriza-
tion Code Flow of OAuth2.0
The individual steps of authorization code ﬂow, as shown
in Fig. 1, are detailed below:
1. The user initiates the SSO process with the RP by
specifying his intended IdP;
2. The RP redirects the user to the IdP for authentica-
tion. The RP may include the optional state pa-
rameter which is used for binding the request (in
Step 2) to the subsequent response in Step 5;
3. The user operates the client device (e.g., the browser
or the mobile app) to authenticate himself to the IdP.
He also conﬁrms with the IdP to grant the permis-
sions requested by the RP.
4. The IdP returns to the user an authorization code
with the optional state parameter (typically its
value is the hash of cookies and a nonce).
5. The user is redirected to the RP. The RP would
reject the request if the received state parameter
does not match the one, if speciﬁed, in Step 2.
6. The RP then requests the access token directly from
the IdP (without going through the user/ client de-
vice) by sending the code parameter and its client
secret.
7. The IdP responds with an access token upon valida-
tion of the identity of the RP and the code parame-
ter submitted by the RP.
8. Using this access token, the RP can request data of
the user from the IdP server.
9. The IdP responds to the RP with the user data (e.g.,
proﬁle) so that the RP can conﬁrm the user’s iden-
tity and allow the user to login to the RP.
10. The user can subsequently request to access his in-
formation/ resource, e.g. the user proﬁle, hosted by
the RP server.
11. The RP server responds to the user with the re-
quested information accordingly.
B Marking Symbolic Variables
Given the marked sample app, S3KVetter must identify
which (ranges of) symbolic input ﬁelds (e.g., the entire
request.url or just the code in Listing 6) determine a
path and then extracts all the path constraints related to
these ﬁelds. To reduce the overhead for the constraint
solver11, we maintain each input ﬁeld as an individual
symbolic variable (e.g., code, state) once these ﬁelds
are split or decoded. Yet, we still allow byte-level access
to the entire symbolic input (e.g., request.url) in case
we cannot identify input ﬁelds correctly.
Listing 6: Example for marking symbolic variables
1 @symbolic(request.url=’http://RP.com/
callback?code=code&state=1234’})
2 def callback():
3
token = oauth.fetch_token(token_url,
secret, auth_response=request.url)
4
...
11Otherwise, the constraint solver needs to remember all the opera-
tions on the entire symbolic input.
1474    27th USENIX Security Symposium
USENIX Association