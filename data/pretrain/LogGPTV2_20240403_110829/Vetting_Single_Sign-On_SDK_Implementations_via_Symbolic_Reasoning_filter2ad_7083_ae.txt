### Extensive Security Analysis of Single Sign-On (SSO) Protocols

Significant efforts have been dedicated to the security analysis of SSO protocols. Initially, the protocol specifications [23, 39] were verified using various formal methods, including model checking [5, 7, 15, 19, 20, 36], manual analyses [28, 32], and cryptographic proofs [11]. These methods have identified several design flaws in the protocols. However, these approaches primarily aim to prove the correctness or detect violations in the specification, which may not always reflect real-world vulnerabilities that can be exploited.

For instance, although [19] discovered the 307 Redirect attack, which allows an attacker to learn the victim's password from the Identity Provider (IdP), real-world SSO systems typically use 302 redirection instead, rendering the theoretical vulnerability unexploitable.

Despite these theoretical analyses, practical implementations often contain errors due to implicit assumptions enforced by IdP SDKs [46] or incorrect interpretations of ambiguous specifications [13]. To address this, researchers have shifted their focus to analyzing real-world implementations. One popular method involves network traffic analysis [25, 30, 43–45, 48, 49] to infer a correct system model for subsequent fuzzing. Another approach examines how underlying platform security issues can affect SSO security, as discussed in [13, 47].

Motivated by the discovery of numerous vulnerabilities, researchers have developed automated tools [18, 33, 51] to perform large-scale testing of SSO implementations against known classes of vulnerabilities. These studies, however, do not consider the security of SDK internals, making them different from our work.

The most similar work to ours is [46], which identifies implicit assumptions necessary for secure SSO SDK usage. However, their approach requires labor-intensive code translation for each SDK, limiting its scalability and accuracy. Moreover, they focus on how SDKs can be used insecurely, whereas we concentrate on vulnerabilities within the SDK internals, which can be exploited even if developers follow best practices.

### SDK Security Analysis

Modern software development often relies on Software Development Kits (SDKs). Various tools and methodologies have been proposed to detect SDK usage errors. Most of these focus on verifying whether the SDK adheres to a specification, which can be manually specified (e.g., SSLint [24]), extracted from code [5], or learned from other libraries [35, 50]. However, these methods primarily emphasize API invocation patterns, with relatively few efforts devoted to the security analysis of SDK internals.

### Asynchronous Events Studies

Previous research has shown that asynchronous events can lead to serious security issues. Petrov et al. [37] formulated a "happens-before" relation to specify web event orders (e.g., script loading before execution) to detect dangerous race conditions in web applications. This relation was based on in-depth studies of relevant specifications (e.g., HTML and JavaScript) and browser behavior, making it difficult to generalize to other protocols. Additionally, the "happens-before" relation cannot capture the complex security properties of multi-party SSO protocols. Another related work, CHIRON [27], detects semantic bugs in stateful protocol implementations by considering different request orders but focuses mainly on two-party systems and cannot maintain a consistent state for more general multi-party systems.

### Symbolic Execution

Symbolic execution tools like KLEE [9], S2E [14], and UC-KLEE [38] are effective in detecting non-distributed software bugs, especially low-level memory corruption problems [41]. Recently, symbolic execution has been extended to handle asynchronous applications (e.g., OpenFlow and sensor networks) [10, 31, 40]. However, these extensions require expert-level domain knowledge and are not applicable to general asynchronous apps. Researchers have also used symbolic execution to verify web applications [12, 42], but they did not address challenges arising from multi-lock-step operations or multi-party coordination.

In contrast, S3KVetter has developed new techniques to test the implementations of multi-party protocols and systems.

### Conclusion

In this paper, we present S3KVetter, an automated testing tool that discovers logic bugs and vulnerabilities in SSO SDKs using symbolic reasoning techniques. To better explore a three-party SSO system, we developed new techniques for symbolic execution and implemented them in S3KVetter. We evaluated S3KVetter on ten popular SSO SDKs/libraries supporting different SSO protocols and authorization grant flows. In addition to existing vulnerabilities, S3KVetter successfully discovered four new types of vulnerabilities, all of which can result in serious consequences, such as application account hijacking or user privacy leakage. Our findings demonstrate the efficacy of S3KVetter in performing systematic reasoning on SDKs and provide a reality check on the implementation quality of popular "industrial-strength" SSO SDKs.

### Acknowledgements and Responsible Disclosure

We thank Prof. Cristina Nita-Rotaru and the anonymous reviewers for their valuable comments, which significantly improved the paper. This work is supported in part by the Innovation and Technology Commission of Hong Kong (project no. ITS/216/15), the National Natural Science Foundation of China (NSFC) under Grant No. 61572415, the CUHK Technology and Business Development Fund (project no. TBF18ENG001), and the Hong Kong S.A.R. Research Grants Council (RGC) Early Career Scheme/General Research Fund No. 24207815 and 14217816.

We have reported the newly discovered vulnerabilities to all affected vendors and have received various confirmations and acknowledgments.

### References

[1] Code Coverage. https://coverage.readthedocs.io.
[2] PyPI Statistics. http://www.pypi-stats.com/statistics/package/.
[3] Requests-OAuthLib. https://github.com/requests/requests-oauthlib.
[4] Satisfiability Modulo Theories Competition. http://smtcomp.sourceforge.net/2017/.
[5] BAI, G., LEI, J., MENG, G., VENKATRAMAN, S. S., SAXENA, P., SUN, J., LIU, Y., AND DONG, J. S. AUTHSCAN: automatic extraction of web authentication protocols from implementations. In NDSS (2013).
[6] BALL, T., AND DANIEL, J. Deconstructing dynamic symbolic execution. Dependable Software Systems Engineering 40 (2015), 26.
[7] BANSAL, C., BHARGAVAN, K., AND MAFFEIS, S. Discovering concrete attacks on website authorization by formal analysis. In CSF (2012).
[8] BARTH, A., JACKSON, C., AND MITCHELL, J. C. Robust defenses for cross-site request forgery. In CCS (2008), ACM.
[9] CADAR, C., DUNBAR, D., AND KLEE, D. Klee: Unassisted and automatic generation of high-coverage tests for complex systems programs. In Proc. Operating System Design and Implementation (OSDI 08), pp. 209–224.
[10] CANINI, M., VENZANO, D., PERESINI, P., KOSTIC, D., AND REXFORD, J. A nice way to test openflow applications. In Proceedings of the 9th USENIX Symposium on Networked Systems Design and Implementation (NSDI) (2012), no. EPFL-CONF-170618.
[11] CHARI, S., JUTLA, C. S., AND ROY, A. Universally composable security analysis of OAuth v2.0. Cryptology ePrint Archive, Report 2011/526, 2011.
[12] CHAUDHURI, A., AND FOSTER, J. S. Symbolic security analysis of ruby-on-rails web applications. In CCS (2010), ACM.
[13] CHEN, E. Y., PEI, Y., CHEN, S., TIAN, Y., KOTCHER, R., AND TAGUE, P. OAuth demystified for mobile application developers. In CCS (2014), pp. 892–903.
[14] CHIPOUNOV, V., KUZNETSOV, V., AND CANDEA, G. S2E: A platform for in-vivo multi-path analysis of software systems. ACM SIGPLAN Notices (2011).
[15] D. FETT, R. KÜSTERS, AND G. SCHMITZ. An expressive model for the web infrastructure: Definition and application to the Browser ID SSO system. In IEEE Symp. on Security and Privacy, S&P (2014).
[16] DITTMER, M. S., AND TRIPUNITARA, M. V. The unix process identity crisis: A standards-driven approach to setuid. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security (2014), ACM, pp. 1391–1402.
[21] GAZIT, I. oauthlib. OAuthLib. https://github.com/idan/oauthlib.
[22] GODEFROID, P., KLARLUND, N., AND SEN, K. Dart: directed automated random testing. In ACM Sigplan Notices (2005), ACM.
[23] HARDT, D. The OAuth 2.0 authorization framework, 2012. RFC 6749.
[24] HE, B., RASTOGI, V., CAO, Y., CHEN, Y., VENKATAKRISHNAN, V., YANG, R., AND ZHANG, Z. Vetting SSL usage in applications with SSLint. In Security and Privacy (S&P), 2015 IEEE Symposium on (2015), IEEE, pp. 519–534.
[25] HOMAKOV, E. The Achilles Heel of OAuth or Why Facebook Adds Special Fragment.
[26] HOMAKOV, E. The Most Common OAuth2 Vulnerability.
[27] HOQUE, E., CHOWDHURY, O., CHAU, S. Y., NITAROTARU, C., AND LI, N. Analyzing operational behavior of stateful protocol implementations for detecting semantic bugs. In DSN (2017).
[28] HU, P., YANG, R., LI, Y., AND LAU, W. C. Application impersonation: Problems of OAuth and API design in online social networks. In Proceedings of the second ACM conference on Online social networks (2014), ACM.
[29] JANRAIN. Social login continues strong adoption.
[30] JING, W. Covert Redirect Vulnerability.
[31] KOTHARI, N., MILLSTEIN, T., AND GOVINDAN, R. Deriving state machines from tinyos programs using symbolic execution. In Proceedings of the 7th international conference on Information processing in sensor networks (2008), IEEE Computer Society, pp. 271–282.
[32] MAINKA, C., MLADENOV, V., AND SCHWENK, J. Do not trust me: Using malicious IdPs for analyzing and attacking Single Sign-On. In Security and Privacy (EuroS&P), 2016 IEEE European Symposium on (2016), IEEE, pp. 321–336.
[33] MAINKA, C., MLADENOV, V., SCHWENK, J., AND WICH, T. Sok: Single sign-on security–an evaluation of openid connect. In EuroS&P (2017).
[34] MLADENOV, V., MAINKA, C., KRAUTWALD, J., FELDMANN, F., AND SCHWENK, J. On the security of modern Single Sign-On protocols: OpenID Connect 1.0. CoRR (2015).
[35] NGUYEN, H. A., DYER, R., NGUYEN, T. N., AND RAJAN, H. Mining preconditions of APIs in large-scale code corpus. In Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering (2014), ACM, pp. 166–177.
[36] PAI, S., SHARMA, Y., KUMAR, S., PAI, R. M., AND SINGH, S. Formal verification of OAuth 2.0 using Alloy framework. In Communication Systems and Network Technologies (CSNT) (2011), IEEE.
[37] PETROV, B., VECHEV, M., SRIDHARAN, M., AND DOLBY, J. Race detection for web applications. In ACM Sigplan Conference on Programming Language Design and Implementation (2012), pp. 251–262.
[38] RAMOS, D. A., AND ENGLER, D. R. Under-constrained symbolic execution: Correctness checking for real code. In USENIX Security (2015), pp. 49–64.
[39] SAKIMURA, N., BRADLEY, J., JONES, M., DE MEDEIROS, B., AND MORTIMORE, C. OpenID Connect core 1.0.
[40] SASNAUSKAS, R., LANDSIEDEL, O., ALIZAI, M. H., WEISE, C., KOWALEWSKI, S., AND WEHRLE, K. Kleenet: discovering insidious interaction bugs in wireless sensor networks before deployment. In Proceedings of the 9th ACM/IEEE International Conference on Information Processing in Sensor Networks (2010), ACM, pp. 186–196.
[41] STEPHENS, N., GROSEN, J., SALLS, C., DUTCHER, A., WANG, R., CORBETTA, J., SHOSHITAISHVILI, Y., KRUEGEL, C., AND VIGNA, G. Driller: Augmenting fuzzing through selective symbolic execution. In Proceedings of the Network and Distributed System Security Symposium (2016).
[42] SUN, F., XU, L., AND SU, Z. Detecting logic vulnerabilities in e-commerce applications. In NDSS (2014).
[43] SUN, S., AND BEZNOSOV, K. The devil is in the (implementation) details: An empirical analysis of OAuth SSO systems. In CCS (2012).
[44] WANG, H., ZHANG, Y., LI, J., LIU, H., YANG, W., LI, B., AND GU, D. Vulnerability assessment of OAuth implementations in Android applications. In ACSAC (2015).
[45] WANG, R., CHEN, S., AND WANG, X. Signing me onto your accounts through Facebook and Google: A traffic-guided security study of commercially deployed Single-Sign-On web services. In S&P (2012).
[46] WANG, R., ZHOU, Y., CHEN, S., QADEER, S., EVANS, D., AND GUREVICH, Y. Explicating SDKs: Uncovering assumptions underlying secure authentication and authorization. In USENIX Security (2013).
[47] YANG, R., AND LAU, W. C. Breaking and fixing mobile app authentication with OAuth2.0-based protocols. In ACNS (2017).
[48] YANG, R., LAU, W. C., AND LIU, T. Signing into one billion mobile app accounts effortlessly with OAuth 2.0. In Black Hat, Europe (2016).
[49] YANG, R., LI, G., LAU, W. C., ZHANG, K., AND HU, P. Model-based security testing: An empirical study on OAuth 2.0 implementations. In AsiaCCS (2016).
[50] YUN, I., MIN, C., SI, X., JANG, Y., KIM, T., AND NAIK, M. APISan: Sanitizing API usages through semantic cross-checking. In 25th USENIX Security Symposium (USENIX Security 16).
[51] ZHOU, Y., AND EVANS, D. SSOScan: Automated testing of web applications for Single Sign-On vulnerabilities. In USENIX Security (2014).

### Detailed Description of the Authorization Code Flow of OAuth2.0

The individual steps of the authorization code flow, as shown in Fig. 1, are detailed below:

1. **User Initiation**: The user initiates the SSO process with the Relying Party (RP) by specifying the intended Identity Provider (IdP).
2. **Redirection to IdP**: The RP redirects the user to the IdP for authentication. The RP may include an optional `state` parameter to bind the request to the subsequent response.
3. **User Authentication**: The user authenticates themselves to the IdP and confirms the permissions requested by the RP.
4. **Authorization Code Issuance**: The IdP returns an authorization code to the user, along with the optional `state` parameter.
5. **Redirection to RP**: The user is redirected back to the RP. The RP rejects the request if the `state` parameter does not match the one sent in Step 2.
6. **Access Token Request**: The RP requests an access token directly from the IdP by sending the authorization code and its client secret.
7. **Access Token Response**: The IdP responds with an access token after validating the RP's identity and the authorization code.
8. **Data Request**: The RP uses the access token to request user data from the IdP server.
9. **User Data Response**: The IdP responds with the user's data (e.g., profile) to the RP, allowing the RP to confirm the user's identity and log them in.
10. **Resource Access**: The user can then request access to their information or resources hosted by the RP server.
11. **Information Response**: The RP server responds to the user with the requested information.

### Marking Symbolic Variables

Given a marked sample application, S3KVetter must identify which (ranges of) symbolic input fields (e.g., the entire `request.url` or just the `code` in Listing 6) determine a path and then extract all the path constraints related to these fields. To reduce the overhead for the constraint solver, we maintain each input field as an individual symbolic variable (e.g., `code`, `state`) once these fields are split or decoded. However, we still allow byte-level access to the entire symbolic input (e.g., `request.url`) in case we cannot correctly identify the input fields.

**Listing 6: Example for marking symbolic variables**

```python
1 @symbolic(request.url='http://RP.com/callback?code=code&state=1234')
2 def callback():
3     token = oauth.fetch_token(token_url, secret, auth_response=request.url)
4     ...
```

**Note**: Otherwise, the constraint solver needs to remember all the operations on the entire symbolic input.