This is partly inspired by the discussions in #12292 and #12322.
The `@generated` macro makes it much easier to generate specialized functions.
Hence, I think it might be time for us to upgrade our functor system. So I
wrote a small program for concept proof:
    # functors specialized based on symbol
    immutable SFunc{N,Sym} <: Base.Func{N} end
    @generated function call{S}(f::SFunc{1,S}, x)
        :($(S)(x))
    end
    # a map function that takes advantage of specialized fun
    function mymap(f::Function, x)
        if isgeneric(f) && is(f.env.module, Base)
            map(SFunc{1,f.env.name}(), x)
        else
            map(f, x)
        end
    end
    # Benchmark
    function benchmark(X::Array, ntimes::Int)
        # warming
        map(abs2, X)
        mymap(abs2, X)
        abs2(X)
        # measuring
        gc()
        gc_enable(false)
        @time for i = 1:ntimes map(abs2, X) end
        @time for i = 1:ntimes mymap(abs2, X) end
        @time for i = 1:ntimes abs2(X) end
        gc_enable(true)
    end
    benchmark(randn(1_000_000), 10)
Result:
     444.635 milliseconds (20000 k allocations: 381 MB)
      46.907 milliseconds (20 allocations: 78126 KB)
      49.847 milliseconds (20 allocations: 78126 KB)
So, it looks like it can dramatically improve the performance of many higher-
level functions (e.g. `map`, `reduce`, `broadcast`, etc), making their
performance on par with manually specialized ones, without even changing the
external interface. Also, a big advantage of this as opposed to the current
system is that it allows arbitrary named function to be used (instead of just
a prescribed list of functions).
I am proposing:
  * Introduce the new functor system with a PR (I can do this).
  * Have the operation-dependent promotion (#12292) depend on the new functor.
I think the utility of this specialized functor system is far beyond better
type promotion.
By keeping `Func{N}` as an abstract type, and define a bunch of type alias
like below, most of the client codes that depend on old functors would still
be working as expected.
    typealias AddFun SFunc{2, :+}
    typealias AbsFun SFunc{1, :abs} 
    # ...
cc: @timholy