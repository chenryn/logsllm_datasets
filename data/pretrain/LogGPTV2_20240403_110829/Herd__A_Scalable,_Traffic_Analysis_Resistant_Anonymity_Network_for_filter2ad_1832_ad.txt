### An Attack Mitigation Strategy

By implementing a one-time sign-up fee, the system can significantly increase the cost of launching an attack, although it is impossible to completely eliminate such threats.

### 3.8 Herd Prototype

Our prototype implementation of Herd consists of two main components: a core Herd module written in ClojureScript (3,289 lines) and a network module written in C (3,159 lines). The core module runs on the Node.js JavaScript runtime. Additionally, the implementation leverages the OpenSSL and curve25519 libraries for TLS and cryptographic support.

We chose to write the core in a language compatible with JavaScript to facilitate future distribution of the Herd client via standard, encrypted web channels and execution within a browser. The network component ensures consistent packet transmission timing, even in the presence of garbage collection or other events in the managed JavaScript runtime. Currently, the mix, superpeer (SP), and client software run as standalone programs on Linux. Porting the software to macOS or Windows would involve preparing appropriate installers. Our Herd client also supports the Jitsi VoIP client [6] and can be adapted to support other SIP-compliant clients with minimal effort.

### 3.9 Summary of Contributions

The key contributions of Herd’s design are:

1. **Zone Anonymity**: Herd introduces zone anonymity, ensuring that a user's anonymity depends solely on their choice of a zone provider, independent of the choices made by their communication partners and other users.
2. **Hybrid Architecture**: Herd employs a novel hybrid architecture that shifts resource requirements from its trusted infrastructure to untrusted superpeers without compromising anonymity. This allows Herd to leverage resources from untrusted peers, either for free or in exchange for free calls, thereby increasing scalability and reducing operational costs.
3. **Efficient Resource Utilization**: Herd exploits the specific workload characteristics of VoIP traffic to provide traffic-analysis-resistant anonymity at a low bandwidth cost.

### 4. Evaluation of Herd

#### 4.1 Anonymity and Scalability

To evaluate Herd, we first demonstrate that, in the absence of a traffic-analysis-resistant anonymity network, a powerful adversary could trace 98.3% of voice calls among millions of users in our mobile phone call trace. We then conduct trace-driven simulations and experiments with our Herd implementation to compare its anonymity, scalability, and call quality against Drac.

**Key Findings:**
- In the median case, Herd supports anonymity sets comparable to Drac and offers similar call quality, but reduces client bandwidth by up to two orders of magnitude.
- Herd requires some dedicated infrastructure, but untrusted superpeers contributing resources for free or in exchange for free calls can reduce Herd’s operational costs from $10-100 to $0.1-1.14 per user and month.

#### 4.1.1 System Models

We use simulation models of Drac, Herd, and Tor, where the first two employ chaffing strategies, while Tor does not.

- **Drac**: Maintains one chaffing connection for each link within a social network, hiding call patterns. Bandwidth requirements are proportional to the degree of nodes in the social network.
- **Herd**: Relies on a small, constant number of connections at the clients (3 in our simulations) and uses SPs to orchestrate rate changes on the links among mixes, achieving zone anonymity with minimal bandwidth.
- **Tor**: Does not employ chaffing and thus offers no resistance to traffic analysis.

#### 4.1.2 Datasets and Methodology

- **Mobile Dataset**: A month of data from August 2010, comprising 370 million calls among 10.8 million users of a large cellular provider. The dataset includes call times, durations, and salted hashes of caller/callee telephone numbers.
- **Social Network Datasets**: Twitter and Facebook datasets with 54 million and 1,165 users, respectively, to explore Drac’s properties under various workloads.
- **Methodology**: Trace-based simulations using 1-second intervals for call start/end times for anonymity evaluation and one-minute bins for cost analysis.

#### 4.1.3 Goals

- **Anonymity**: Characterized by the size of the anonymity set, which is the number of clients who could be the corresponding party in a call.
- **Client Bandwidth Requirement**: Calculated as the number of chaffing connections multiplied by the rate of a VoIP call using the G.711 codec (8KB/s).
- **Operational Costs**: Evaluated in dollars per user/month using EC2 pricing.

#### 4.1.4 Results: Tor’s Anonymity

Without chaffing, a passive attacker can correlate call start and end times to identify communicating partners via an intersection attack. In our dataset, an intersection attack is highly successful, tracing 98.3% of all calls with 1-second granularity.

#### 4.1.5 Results: Anonymity/Scalability of Drac and Herd

- **Drac**: Anonymity set sizes correspond to the number of clients reachable within H hops in the social network. Median anonymity set sizes for the Mobile, Twitter, and Facebook datasets are 12, 8, and 343 for H = 1, and 1,728, 512, and 40 million for H = 3, respectively. Bandwidth requirements are 96KB/s, 64KB/s, and 2.6MB/s, respectively.
- **Herd**: Anonymity set sizes depend only on the number of clients in a zone, resulting in a set size of 10.8 million. Herd clients maintain three chaffing connections, requiring only 24KB/s of bandwidth.

#### 4.1.6 Results: Herd’s Operational Costs

We evaluated the traffic volume on Herd mixes with and without SPs, with interzone traffic ranging from 10-100%, and the resulting monetary cost per user. Simulations showed that using SPs significantly reduces CPU utilization and blocking rates, with blocking rates varying between 5% and 0.1% depending on the number of clients per channel.

In summary, Herd provides significant improvements in bandwidth efficiency and operational costs compared to Drac, while maintaining strong anonymity and call quality.