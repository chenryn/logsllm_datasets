### Abstract
This document discusses the enhancement of the Proxmark3 firmware to support ISO-compliant modulations, enabling the ARM to work with various tag types. As a C developer aiming to improve the Proxmark3, the primary directories of interest are `armsrc`, `client`, and `common`. These directories contain code for the ARM, the Proxmark client, and shared functionality, respectively.

### How to Train Your RFID Hacking Tools

To illustrate the process of enhancing the Proxmark3 firmware, this paper delves into the steps required to introduce client-driven support for a previously unsupported tag format and standalone support for ISO14443a (NFC) tags. Although the Proxmark3 supports an extensive list of tag formats, it lacked support for AWID tags at the start of this research. With access to both a card and a reader, adding support for AWID tags was a natural choice for contributing back to the community.

#### Adding Real-Time Demodulation for AWID26

While demodulation of an AWID FSK waveform from data samples was added in January 2015 (commit 1e090a61a149a58a57e9d9acbf5e5532387867a4), there was no corresponding functionality to make the pm3 an AWID reader, similar to the `lf hid fskdemod` command. Having an AWID26 reader is useful for practical attacks where a penetration tester aims to skim badge numbers. The tester can leave real-time demodulation running and logging while attempting to get close to individuals with legitimate access to the facility under test.

#### Identifying Modulation Schemes

The first step in supporting a new tag format is to identify the modulation scheme and parameters in use. For an unknown tag, the starting point is to energize the card and collect samples for plotting. Familiarity with typical modulation schemes often allows for visual recognition of the modulation. Some characteristics, such as the data rate, can be calculated from the waveform, while others may require more guesswork or trial and error. Fortunately, AWID cards are clearly marked, and the necessary information can be found on proxmark.org, specifically in the thread on t55x7 card programming. Decoding the block 0 value 0x00107060 reveals that AWID uses FSK2a with RF/50 data rate, and the attached PDF illustrates the high and low logic sequences. This is the same FSK modulation used in the popular HID tag format, but AWID tags have a different preamble pattern and encoding technique.

#### Moving AWID Demodulation to the ARM

Moving the AWID demodulation from a client-side operation to the ARM is a straightforward process once the logistics are understood. First, I defined a new command opcode, `CMD_AWID_DEMOD_FSK`, by adding it to the appropriate header files referenced in the Proxmark3 ARM section. Logic to handle this command was added to the USB packet handling routine in `armsrc/appmain.c`, following the pattern used for the `lf hid fskdemod` command. A new function, `CmdAWIDdemodFSK()`, was added to `armsrc/lfops.c`, including the logic from `data fskawiddemod`. Migrating the logic from the client to the device side requires changing `PrintAndLog()` calls to the appropriate device-side logging function (`Dbprintf/DbpString`), adding code to abort the function loop in response to a button press, and ensuring that the demodulation is fed by live data acquisition rather than the graph buffer. On the device side, we obtain a pointer to `BigBuf` with `BigBuf_get_addr()` and use `DoAcquisition_default()` instead of `getFromGraphBuf()`.

#### Updating the Client

With the device-side functionality in place, the next step is to update the client to include the new context and function. For maintainability, it is best to keep tag-specific functionality in separate files. Therefore, `client/cmdlfawid.c` was created, similar to `client/cmdlfhid.c`, along with their associated header files. Within this file, the `CommandTable[]` data structure exposes available commands within a context. `CommandTable` is a `command_s` struct containing a command name, function pointer, offline flag, and description. Since the AWID functionality falls under the LF context, the AWID commands must be referenced from `cmdlf.c` with a pointer to a helper function to print command usage for the AWID context.

#### Example Usage and Output

Example usage and output from `lf awid fskdemod` are shown in Figure 24 below:

**Figure 24: Sample Output from 'lf awid fskdemod'**

#### Simulation of AWID26 Tags

As described earlier, it is possible to simulate most low-frequency tags using built-in generic functions, allowing the user to specify a modulated bit stream or reproduce an acquired waveform. For example, the tag scanned in Figure 24 could be automatically simulated using LF functions `search` and `simfsk`. If the tag is supported, `lf search` will populate the modulation options and specify the demodulated buffer. It is also possible to use `lf simfsk` manually by specifying clock speed, high and low logic sequences, and tag data. Without the tag present to scan, however, it becomes a challenge to manually configure these parameters accurately.