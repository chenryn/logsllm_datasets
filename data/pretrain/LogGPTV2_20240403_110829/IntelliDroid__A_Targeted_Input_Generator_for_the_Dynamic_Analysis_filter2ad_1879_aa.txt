title:IntelliDroid: A Targeted Input Generator for the Dynamic Analysis
of Android Malware
author:Michelle Y. Wong and
David Lie
IntelliDroid: A Targeted Input Generator for the
Dynamic Analysis of Android Malware
Michelle Y. Wong and David Lie
Department of Electrical and Computer Engineering
University of Toronto
Abstract—While dynamic malware analysis methods generally
provide better precision than purely static methods, they have the
key drawback that they can only detect malicious behavior if it
is executed during analysis. This requires inputs that trigger the
malicious behavior to be applied during execution. All current
methods, such as hard-coded tests, random fuzzing and concolic
testing, can provide good coverage but are inefﬁcient because
they are unaware of the speciﬁc capabilities of the dynamic
analysis tool. In this work, we introduce IntelliDroid, a generic
Android input generator that can be conﬁgured to produce
inputs speciﬁc to a dynamic analysis tool, for the analysis of
any Android application. Furthermore, IntelliDroid is capable of
determining the precise order that the inputs must be injected,
and injects them at what we call the device-framework interface
such that system ﬁdelity is preserved. This enables it to be paired
with full-system dynamic analysis tools such as TaintDroid. Our
experiments demonstrate that IntelliDroid requires an average
of 72 inputs and only needs to execute an average of 5% of the
application to detect malicious behavior. When evaluated on 75
instances of malicious behavior, IntelliDroid successfully identiﬁes
the behavior, extracts path constraints, and executes the malicious
code in all but 5 cases. On average, IntelliDroid performs these
tasks in 138.4 seconds per application.
I.
INTRODUCTION
Smartphone malware is and will continue to be a ma-
jor security threat. One of the most attractive features of a
smartphone is the ability to extend its functionality with third-
party applications. Unfortunately, such a feature inevitably
brings with it the threat of malicious smartphone applications,
otherwise known as smartphone malware. With a reported 1.3
billion smartphones sold in 2014 [20], this large population
of potential victims gives malware writers ample motivation
to target smartphone devices, as indicated by a recent report
by Sophos, which states that the number of new smartphone
malware samples detected has doubled from 1000 per day in
2013 to 2000 per day in 2014 [38].
To combat the spread of malware, many application mar-
kets, such as Google Play and the Apple App Store, spend
considerable resources trying to detect and remove malware.
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23118
In addition to manual analysis by humans,
these markets
also employ automated techniques, such as static analysis, to
identify applications that are likely to be malicious. However,
static analysis techniques are inherently imprecise as they can
only operate on an abstraction of the program [21]. As a result,
such markets also employ dynamic analysis, which gathers
information by executing the application. Unfortunately, while
dynamic analysis is precise,
it can only detect malicious
behavior if the code that implements that behavior is executed
during the analysis.
There are several common strategies that can be employed
to trigger the malicious behavior that the dynamic analysis is
trying to detect. The simplest, but least effective, is to have a
predeﬁned script of common inputs that will be executed on
the application under analysis. This not only has a very low
chance of triggering the malicious behavior, but can be easily
evaded by a knowledgeable adversary. A more sophisticated
approach is random fuzzing [31], [46], which applies randomly
generated inputs on the application in an effort to trigger
as many behaviors as possible. However, random fuzzing is
inefﬁcient, as it may generate many inputs that trigger the same
code and behavior in the application. To address this, a recent
and more effective technique is concolic testing [26], [2],
which uses symbolically derived path constraints to exercise
different paths in the application for each generated input.
However, none of these methods are ideal for triggering
malicious behavior in applications because they are blind to
distinguishing between code that performs the behavior that the
dynamic analysis is trying to detect and code that does not.
Thus, while concolic testing can efﬁciently achieve high code
coverage, it will still waste many compute cycles by having
the dynamic analysis analyze irrelevant parts of the application.
Instead, we propose targeted analysis, which uses information
about the dynamic tool in combination with static analysis of
the application to generate a reasonably small set of inputs
that will trigger the malicious behavior to be detected by the
dynamic analysis. We implement and evaluate the concept of
targeted analysis for detecting Android malware in a prototype
we call IntelliDroid.
Naturally, it would be very difﬁcult for a static analysis tool
to generate only the exact inputs that are needed to trigger ma-
licious activity in an application, as this would imply that the
static analysis tool is as precise as the dynamic tool at detecting
malicious behavior. Instead, we need a reasonably accurate
over-approximation of the behaviors that will be analyzed by
the dynamic tool. IntelliDroid can then generate a small set
of inputs that will trigger all of the code matching the over-
approximation and allow the dynamic analysis to decide if it is
actually malicious or not. For this approximation, IntelliDroid
uses a list of “targeted” Android APIs that is speciﬁc to the
dynamic analysis tool. This design decision is motivated by
the observation that most malicious behaviors, such as sending
and intercepting SMS messages, leaking private information
or making malicious network requests, require the use of
APIs [49]1. In addition, malware may obfuscate malicious
activity using reﬂection or dynamic class loading. IntelliDroid
can trigger the reﬂection and class loading APIs so that the
dynamic tool can observe the resolution of the reﬂected calls
or the behavior of the dynamically loaded classes.
It is crucial that IntelliDroid can generate inputs that trigger
all targeted APIs. Most tools that combine static and dynamic
techniques use the dynamic analysis to prune false positives
generated by the static analysis [28], [24]; thus, if the dynamic
phase is unable to execute a particular path, it only increases
the number of false positives. However, if IntelliDroid fails to
trigger a malicious behavior, this will result a false negative,
with more serious security consequences.
IntelliDroid introduces two new input generation and in-
jection techniques that enable it
to trigger code paths on
which previous Android input generation techniques would
fail [28], [24], [45], [48], [37], [9]. First, Android applications
do not have a single entry-point, but are instead composed of
a collection of event handlers. It can be insufﬁcient to call just
the event handler that contains a particular API invocation.
Instead, the event handlers need to be triggered in a particular
order, and in some cases a “chain” of several handlers needs
to be triggered with speciﬁc inputs. IntelliDroid iteratively
detects such event-chains and computes the appropriate inputs
to inject, as well as the order in which to inject them.
Second, while previous work injects inputs at
the ap-
plication boundary [28], [40], [45], [35],
this low-ﬁdelity
injection can lead to false application behavior because the
application state is inconsistent with the Android system state.
For example, to hide the presence of SMS messages from
the user, an Android malware program could register an event
handler for an incoming SMS, and then access and search the
SMS content provider to delete the received message. Simply
injecting the SMS notiﬁcation at the application boundary
will result in inconsistent behavior because the application
expects the message to be in the SMS content provider
database, but the Android framework itself has received no
such message. IntelliDroid maintains environment consistency
after input
the lower-level
device-framework interface, allowing all state in the Android
framework to be automatically changed consistently. This
high-ﬁdelity input injection means that IntelliDroid can be
integrated with essentially any dynamic analysis tool, including
full system analysis tools such as TaintDroid [19].
injection by injecting inputs at
In summary, we make three main contributions in this paper:
1) We present the design and implementation of IntelliDroid,
an input generator that takes into account the malicious
behavior a dynamic analysis tool
is trying to detect.
IntelliDroid uses targeted APIs as an over-approximation
for these malicious behaviors and generates inputs that
trigger all instances of those APIs in an application. We
describe two novel techniques that enable IntelliDroid to
trigger targeted APIs with injected inputs: detecting event-
chains and device-framework interface input injection.
2) We show that the targeted API abstraction makes Intelli-
Droid easy to use with a dynamic analysis tool by
integrating it with the TaintDroid dynamic analysis tool.
When run on a corpus of malware, we show that Intelli-
Droid using TaintDroid can trigger and detect all privacy
leaks. We also show that IntelliDroid’s event-chain detec-
tion and device-framework interface input injection enable
it to effectively generate inputs that trigger 70/75 targeted
APIs in a corpus of malware.
3) We show that IntelliDroid is cheap and fast, requiring only
138.4 seconds of analysis time on average to successfully
generate inputs to trigger targeted APIs on a corpus of
malicious and benign applications. We also show that
IntelliDroid is able to avoid running approximately 95%
of an application during dynamic analysis while still
detecting all malicious behaviors.
We begin by giving relevant background on Android and
static analysis in Section II. We then describe the design of
IntelliDroid in Section III. Details about the implementation
are in Section IV. Evaluation showing the effectiveness and
performance of IntelliDroid are presented in Section V. Sec-
tion VI goes over the limitations, while related works are
discussed in Section VII. Finally, we conclude in Section VIII.
II. BACKGROUND
Though documentation about the Android programming
environment and system are widely available2, a perhaps less
well-documented aspect of Android is the implementation
of the Android framework, which forms the middle layer
between third-party applications and Android’s custom Linux
kernel. The Android framework consists of system services
that communicate with the device’s hardware components,
as well as classes that implement application programming
interface (API) methods that third-party applications invoke.
When an application is launched, execution begins in the
Android framework, which loads the application components
and manages their lifecycles. Applications on the Android
platform are event-driven and implement speciﬁc methods,
which we call entry-points, that are invoked by the framework
when events, such as location events from the GPS sensor
or SMS events from the cellular chip, occur. Some application
entry-points must be registered with the framework, which will
then invoke them when the associated external event occurs.
Together with the APIs that applications can invoke, these
entry-point methods form the framework-application interface
that divides the Android framework from code that originates
from third-party applications. At the other end is the interface
between the framework and the underlying devices from which
the device-
external events are generated, which we call
framework interface. When a device sensor receives new data,
it notiﬁes the framework so that the event data can be processed
1Our own analysis shows this is true of more recent malware as well as the
older malware in the cited study.
2Please see http://developer.android.com/index.html
2
Fig. 1.
IntelliDroid System Diagram
and disseminated to applications by calling the corresponding
entry-points in the framework-application interface.
In addition to invoking application event handlers, system
services within the framework also store information about
the event as it is processed. This allows applications to refer
to the event and obtain extra information at a later time. Some
services, such as SMS, store all past event information in a
content provider to be queried and modiﬁed by applications
with sufﬁcient permissions. Other services, such as location,
store only the last event received. In both cases, the handler
invocation in the application and the event information stored
in the framework must be kept consistent for correct execution.
III. DESIGN
IntelliDroid generates inputs for a dynamic analysis tool
that monitors the execution of an Android application. Given
a set of targeted APIs that represent the analysis performed
by the dynamic tool, IntelliDroid will ﬁnd instances of these
targeted APIs in the application and generate inputs to trigger
them. These inputs can be injected into an actual Android
system, allowing IntelliDroid to be integrated with any dy-
namic analysis tool, including those that monitor application
execution from an instrumented OS [19], or from a virtual
machine emulator [39]. To accomplish this task, IntelliDroid
takes the following steps:
1) Identify invocations of targeted APIs. For each invocation,
identify the event handlers where execution begins in
the application code and ﬁnd target call paths from the
handlers that lead to the targeted API.
2) For each call path, extract path constraints that control
whether the targeted API is invoked or not.
3) In cases where the constraints depend on execution paths
in other event handlers, extract the necessary constraints
and the order of the event-chain that is required to invoke
the targeted API.
4) Using an off-the-shelf constraint solver, solve the path
constraints to determine the necessary input values that
will lead to invocation of the targeted API. Some inputs
may depend on external values, such as responses to
network requests, so IntelliDroid dynamically extracts the
concrete values for these external dependencies during
execution.
5) Apply the computed input values in the appropriate order
to the device-framework interface. This will consistently
execute the appropriate paths required for the targeted API
to execute. IntelliDroid contains a modiﬁed Android OS
that can inject inputs at the device-framework boundary.
The ﬂow between these tasks in the IntelliDroid system
is shown in Figure 1, which also differentiates between the
static and dynamic components. Our current prototype uses
the WALA [41] framework for static analysis and Z3 [17] as
the constraint solver.
In addition to the above, IntelliDroid has the capability
to both monitor and control interaction between the applica-
tion and external components. For example, some malware
instances will contact an external server to get a list of SMS
numbers to intercept or send messages to. In these cases,
it might be appropriate to monitor these interactions so that
IntelliDroid can generate inputs matching these requirements.
In other instances, we may need to simulate a message from a
remote server to trigger a targeted API, in which case it might
be appropriate to control that interaction.
A. Specifying Targeted APIs
Because we want IntelliDroid to be applicable to as wide a
range of dynamic analysis tools as possible, we need to select
a suitable abstraction that over-approximates the types of be-
havior that various dynamic analysis tools are trying to detect.
As stated previously, an initial justiﬁcation of our choice to
use Android APIs for this abstraction is that most malicious
behaviors require an application to invoke an Android API. As
further justiﬁcation, we perform a survey of recent Android
malware dynamic analysis techniques that have been proposed
in the literature. From our results in Table I, we show that
dynamic analysis tools that detect Android malware can be
separated into three categories depending on their operation:
(1) by analyzing invocations to certain API methods; (2) by
analyzing invocations to system calls; and (3) by analyzing
low-level side effects of the application, such as CPU load
or battery usage. We ﬁnd that specifying behaviors as API
methods allows IntelliDroid to cover most of the current
dynamic tools. We elaborate on our reasoning below.
1) Analyzing API Methods: The vast majority of dynamic
analysis tools analyze API method invocations and the target
methods for IntelliDroid can be determined by analyzing the
speciﬁc API methods used to conﬁgure the tool. For instance,
TaintDroid [19] performs taint tracking by adding taint tags in
locations where sensitive information is obtained by the appli-
cation (i.e., sources) and reading taint tags in locations where
3
StaticDynamic App bytecodeApp manifestExtract event handlersFind call pathsList of targeted behaviorsExtract path constraintsIf dependency on another event handler, add to event-chainFind call path to dependent code in supporting handlerOutput targeted call paths and constraintsObtain run-time values for constraintsApp APKSolve constraints to generate input valuesAssemble input objects and inject eventTABLE I.
EXISTING ANDROID DYNAMIC ANALYSIS TOOLS
Dynamic Tool
Goal
Features for Analysis
AASandbox [10] Monitor behavior via track-
ing of system calls
Andromaly [36] Malware detection via sys-
tem resource usage
CopperDroid [39] Monitor behavior via sys-
DroidRanger [50] Detect malware using pre-
foot-
Crowdroid [12]
DroidBox [18]
DroidScope [39]
RiskRanker [39]
TaintDroid [19]
VetDroid [47]
tem call tracking
Monitor behavior via track-
ing of system calls
Sandbox to monitor exter-
nal accesses
speciﬁed behavioral