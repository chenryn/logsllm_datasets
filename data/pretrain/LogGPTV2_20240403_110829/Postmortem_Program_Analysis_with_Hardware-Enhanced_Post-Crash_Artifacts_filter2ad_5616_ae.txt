### 4. Differentiating from aireplay-ng

Unlike aireplay-ng, the failure in 0verkill is due to an insufficient PT (Processor Trace) log. As specified in Table 2, the vulnerability in this case is an integer overflow. To trigger this security loophole, the Proof of Concept (PoC) used in our experiment aggressively accumulates an integer variable, resulting in a PT log that is filled with arithmetic computation instructions but lacks the instruction corresponding to the root cause. Consequently, POMP can only taint one instruction related to the crash. We believe this issue can be resolved if a software developer or security analyst increases the capacity of the PT buffer.

### 7. Related Work

This research primarily focuses on locating software vulnerabilities from their crash dumps. The techniques we employed and the problems we addressed are closely related to reverse execution and postmortem program analysis. In this section, we summarize previous studies and discuss their limitations.

#### 7.1 Reverse Execution

Reverse execution is a conventional debugging technique that allows developers to restore the execution state of a program to a previous point. Pioneering research [7–9, 13] in this area relies on restoring a previous program state from a record, aiming to minimize the amount of records needed to return a program to a previous state in its execution history. For example, the work described in [7–9] is mainly based on regenerating a previous program state. When state regeneration is not possible, it recovers the program state by saving states.

In addition to state saving, program instrumentation is widely used to facilitate reverse execution. For instance, Hou et al. designed the Backstroke compiler framework [21] to instrument C++ programs, enabling them to store program states for reverse execution. Similarly, Sauciuc and Necula [30] proposed using an SMT solver to navigate an execution trace and restore data values. The technique automatically determines where to instrument the code to save intermediate values and facilitate reverse execution, depending on how the solver performs on constraint sets corresponding to multiple test runs.

Given that state saving requires extra memory space and program instrumentation slows down forward execution, recent research proposes using core dumps to facilitate reverse execution. In [16] and [37], new reverse execution mechanisms are designed to analyze code reversely and use information in a core dump to reconstruct the states of a program prior to its crash. However, these techniques may fail to perform reverse execution correctly when memory corruption occurs, as their effectiveness depends on the integrity of the core dump.

Our reverse execution technique introduced in this paper follows a different design principle, offering several advantages. First, it can reinstate a previous program state without restoring it from a record. Second, it does not require any program instrumentation, making it more generally applicable. Third, it remains effective even when the crashing memory snapshot contains corrupted data.

#### 7.2 Postmortem Program Analysis

Over the past decades, there has been extensive literature on using program analysis techniques along with crash reports to identify faults in software (e.g., [15, 20, 24, 25, 28, 29, 32, 38]). These techniques are designed to identify specific software defects. In adversarial settings, attackers exploit various software defects, making these techniques less effective for analyzing crashes caused by security defects like buffer overflows or unsafe dangling pointers.

For example, Manevich et al. [24] proposed using static backward analysis to reconstruct execution traces from a crash point and spot software defects, particularly typestate errors [33]. Similarly, Strom and Yellin [32] defined a partially path-sensitive backward dataflow analysis for checking typestate properties, specifically uninitialized variables. While effective, these studies focus only on specific typestate problems.

Liblit et al. [23] proposed a backward analysis technique for crash analysis, introducing an efficient algorithm that takes a crash point and a static control flow graph as input and computes all possible execution paths leading to the crash point. They also discussed narrowing down the set of possible execution paths using various post-crash artifacts, such as stack traces. However, this technique relies heavily on the integrity of the information in memory, making it ineffective for analyzing crashes resulting from malicious memory corruption. In contrast, our approach identifies the root cause of software failures by reverse execution and reconstructing memory footprints prior to the crash.

Considering the low cost of capturing core dumps, prior studies have proposed using core dumps to analyze the root cause of software failures. Notable works include CrashLocator [35], !analyze [18], and RETracer [16], which locate software defects by analyzing memory information in a core dump. These techniques are not suitable for analyzing crashes resulting from malicious memory corruption. Kasikci et al. introduced Gist [22], an automated debugging technique that enhances core dumps using off-the-shelf hardware and employs a cooperative debugging technique for root cause diagnosis. While Gist is effective, it requires collecting crashes from multiple parties running the same software and suffering the same bugs, limiting its adoption. Our work introduces a different technical approach that can perform analysis at the binary level without the participation of other parties.

Recently, Xu et al. [36] introduced CREDAL, an automatic tool that uses the source code of a crashing program to enhance core dump analysis and turns a core dump into an informative aid for tracking memory corruption vulnerabilities. While CREDAL and POMP share the goal of pinpointing code statements where a software defect is likely to reside, CREDAL follows a different technical approach. CREDAL discovers mismatches in variable values and deems the corresponding code fragments as potential vulnerabilities. Although CREDAL assists in tracking down memory corruption vulnerabilities, it often requires significant manual effort because mismatches in variable values may be overwritten or the corresponding code fragments may not include the root cause. POMP, on the other hand, precisely pinpoints the vulnerability by utilizing memory footprints recovered from reverse execution.

### 8. Discussion

In this section, we discuss the limitations of our current design, insights learned, and possible future directions.

#### 8.1 Multiple Threads

POMP focuses on analyzing post-crash artifacts produced by a single crashing thread. Therefore, we assume the root cause of the crash is within the instructions executed by that thread and that other threads do not intervene in its execution prior to the crash. In practice, this assumption may not hold, and the information in a post-crash artifact may be insufficient or misleading for root cause diagnosis.

While this multi-thread issue limits the capability of a security analyst using POMP to pinpoint the root cause of a program crash, it does not significantly downgrade the utility of POMP. A prior study [31] indicated that a large fraction of software crashes involves only the crashing thread, suggesting that POMP is still beneficial for software failure diagnosis. By augmenting our process tracing with the capability to record the timing of execution, POMP can synthesize a complete execution trace, improving its effectiveness. This extension will be integrated into the next version of POMP.

#### 8.2 Just-in-Time Native Code

Intel PT records the addresses of branching instructions executed. Using these addresses as an index, POMP retrieves instructions from executable and library files. However, programs may use Just-in-Time (JIT) compilation, generating binary code on the fly. For programs with JIT functionality (e.g., JavaScript engines), POMP is less effective, especially when a post-crash artifact fails to capture the JIT native code mapped into memory.

To handle such programs, we plan to augment POMP with the capability to trace and log native code generated at runtime. For example, we may monitor the executable memory and dump JIT native code accordingly. This extension does not require re-engineering of reverse execution and backward taint analysis, as the limitation to JIT native code also results from incomplete execution tracing.

### 9. Conclusion

In this paper, we developed POMP on a Linux system to analyze post-crash artifacts. We demonstrated that POMP can significantly reduce the manual efforts required for diagnosing program failures, making software debugging more informative and efficient. Since POMP's design is based on the information in a post-crash artifact, it can be generally applied to diagnose crashes in programs written in various programming languages and caused by various software defects.

We demonstrated the effectiveness of POMP using real-world program crashes related to 31 software vulnerabilities. POMP can reverse-reconstruct the memory footprints of a crashing program and accurately identify the program statements (i.e., instructions) that contribute to the crash. Based on these findings, we conclude that POMP can significantly reduce the number of program statements that a software developer or security analyst needs to manually examine.

### 10. Acknowledgments

We thank the anonymous reviewers for their helpful feedback and our shepherd, Andrea Lanzi, for his valuable comments on the revision of this paper. This work was supported by ARO W911NF-13-1-0421 (MURI), NSF CNS-1422594, NSF CNS-1505664, ONR N00014-16-1-2265, ARO W911NF-15-1-0576, and Chinese National Natural Science Foundation 61272078.

### References

[1] libdisasm: x86 disassembler library. http://bastard.sourceforge.net/libdisasm.html.
[2] Libelf - free software directory. https://directory.fsf.org/wiki/Libelf.
[3] Linux programmer’s manual. http://man7.org/linux/man-pages/man7/signal.7.html.
[4] Offensive security exploit database archive. https://www.exploit-db.com/.
[5] The z3 theorem prover. https://github.com/Z3Prover/z3.
[6] Processor tracing. https://software.intel.com/en-us/blogs/2013/09/18/processor-tracing, 2013.
[7] T. Akgul and V. J. Mooney, III. Instruction-level reverse execution for debugging. In Proceedings of the 2002 ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering, 2002.
[8] T. Akgul and V. J. Mooney III. Assembly instruction level reverse execution for debugging. ACM Trans. Softw. Eng. Methodol., 2004.
[9] T. Akgul, V. J. Mooney III, and S. Pande. A fast assembly level reverse execution method via dynamic slicing. In Proceedings of the 26th International Conference on Software Engineering, 2004.
[10] S. Artzi, S. Kim, and M. D. Ernst. Recrash: Making software failures reproducible by preserving object states. In Proceedings of the 22Nd European Conference on Object-Oriented Programming, 2008.
[11] G. Balakrishnan and T. Reps. Analyzing memory accesses in x86 executables. In cc, pages 5–23, 2004.
[17] L. De Moura and N. Bjørner. Z3: An efficient smt solver. In International conference on Tools and Algorithms for the Construction and Analysis of Systems, pages 337–340. Springer, 2008.
[18] K. Glerum, K. Kinshumann, S. Greenberg, G. Aul, V. Orgovan, G. Nichols, D. Grant, G. Loihle, and G. Hunt. Debugging in the (very) large: Ten years of implementation and experience. In Proceedings of the ACM SIGOPS 22Nd Symposium on Operating Systems Principles, 2009.
[19] W. Gu, Z. Kalbarczyk, R. K. Iyer, Z.-Y. Yang, et al. Characterization of linux kernel behavior under errors. In DSN, volume 3, pages 22–25, 2003.
[20] S. Hangal and M. S. Lam. Tracking down software bugs using automatic anomaly detection. In Proceedings of the 24th International Conference on Software Engineering, 2002.
[21] C. Hou, G. Vulov, D. Quinlan, D. Jefferson, R. Fujimoto, and R. Vuduc. A new method for program inversion. In Proceedings of the 21st International Conference on Compiler Construction, 2012.
[22] B. Kasikci, B. Schubert, C. Pereira, G. Pokam, and G. Candea. Failure sketching: A technique for automated root cause diagnosis of in-production failures. In Proceedings of the 25th Symposium on Operating Systems Principles, 2015.
[23] B. Liblit and A. Aiken. Building a better backtrace: Techniques for postmortem program analysis. Technical report, 2002.
[24] R. Manevich, M. Sridharan, S. Adams, M. Das, and Z. Yang. PSE: Explaining program failures via postmortem static analysis. In Proceedings of the 12th ACM SIGSOFT Twelfth International Symposium on Foundations of Software Engineering, 2004.
[12] J. Bell, N. Sarda, and G. Kaiser. Chronicler: Lightweight recording to reproduce field failures. In Proceedings of the 2013 International Conference on Software Engineering, 2013.
[25] D. Molnar, X. C. Li, and D. A. Wagner. Dynamic test generation to find integer bugs in x86 binary linux programs. In Proceedings of the 18th Conference on USENIX Security Symposium, 2009.
[13] B. Biswas and R. Mall. Reverse execution of programs. SIGPLAN Not., 1999.
[14] Y. Cao, H. Zhang, and S. Ding. Symcrash: Selective recording for reproducing crashes. In Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering, 2014.
[15] H. Cleve and A. Zeller. Locating causes of program failures. In Proceedings of the 27th International Conference on Software Engineering, 2005.
[16] W. Cui, M. Peinado, S. K. Cha, Y. Fratantonio, and V. P. Kemerlis. Retracer: Triaging crashes by reverse execution from partial memory dumps. In Proceedings of the 38th International Conference on Software Engineering, 2016.
[26] P. Ohmann. Making your crashes work for you (doctoral symposium). In Proceedings of the 2015 International Symposium on Software Testing and Analysis, 2015.
[27] F. Qin, J. Tucek, J. Sundaresan, and Y. Zhou. RX: Treating bugs as allergies—a safe method to survive software failures. In ACM SIGOPS Operating Systems Review, volume 39, pages 235–248. ACM, 2005.
[28] M. Renieris and S. P. Reiss. Fault localization with nearest neighbor queries. In Proceedings of IEEE/ACM International Conference on Automated Software Engineering, 2003.
[29] S. K. Sahoo, J. Criswell, C. Geigle, and V. Adve. Using likely invariants for automated software fault localization. In Proceedings of the Eighteenth International Conference on Architectural Support for Programming Languages and Operating Systems, 2013.
[30] R. Sauciuc and G. Necula. Reverse execution with constraint solving. Technical report, EECS Department, University of California, Berkeley, 2011.
[31] A. Schröter, N. Bettenburg, and R. Premraj. Do stack traces help developers fix bugs? In Proceedings of the 7th IEEE Working Conference on Mining Software Repositories, 2010.
[32] R. E. Strom and D. M. Yellin. Extending typestate checking using conditional liveness analysis. IEEE Transaction Software Engineering, 1993.
[33] R. E. Strom and S. Yemini. Typestate: A programming language concept for enhancing software reliability. IEEE Transaction Software Engineering, 1986.
[34] M. Weiser. Program slicing. In Proceedings of the 5th international conference on Software engineering, pages 439–449. IEEE Press, 1981.
[35] R. Wu, H. Zhang, S.-C. Cheung, and S. Kim. Crashlocator: Locating crashing faults based on crash stacks. In Proceedings of the 2014 International Symposium on Software Testing and Analysis, 2014.
[36] J. Xu, D. Mu, P. Chen, X. Xing, P. Wang, and P. Liu. CREDAL: Towards locating a memory corruption vulnerability with your core dump. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, 2016.
[37] C. Zamfir, B. Kasikci, J. Kinder, E. Bugnion, and G. Candea. Automated debugging for arbitrarily long executions. In Proceedings of the 14th USENIX Conference on Hot Topics in Operating Systems, 2013.
[38] A. Zeller. Isolating cause-effect chains from computer programs. In Proceedings of the 10th ACM SIGSOFT Symposium on Foundations of Software Engineering, 2002.
[39] W. Zhang, J. Lim, R. Olichandran, J. Scherpelz, G. Jin, S. Lu, and T. Reps. Conseq: Detecting concurrency bugs through sequential errors. In ACM SIGPLAN Notices, volume 46, pages 251–264. ACM, 2011.