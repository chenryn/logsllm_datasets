            if (normalized.endsWith("/.") || normalized.endsWith("/..")) { 
                normalized = normalized + "/"; 
                addedTrailingSlash = true; 
            } 
            while(true) { 
                int index = normalized.indexOf("//"); 
                if (index  1 && addedTrailingS
                                        normalized = normalized.substring(0, norm
                                    } 
                                    return normalized; 
                                } 
                                if (index == 0) { 
                                    return null;
                                } 
                                int index2 = normalized.lastIndexOf(47, index - 1
                                normalized = normalized.substring(0, index2) + no
                            } 
                        } 
                        normalized = normalized.substring(0, index) + normalized.
                    } 
                } 
                normalized = normalized.substring(0, index) + normalized.substrin
            } 
        } 
    } 
}
2022/2/22 17:19
1.md
ﬁle:///Users/s3gundo/Documents/markdown/vulns/java/jira/1.md
9/18
最后经过 normlize 的返回是 /WEB-INF/web.xml
3、 UrlRewriteFilter
这块主要分为两⼤部分，⼀是 org.tuckey.web.filters.urlrewrite.RuleChain#process ，⼆
是 org.tuckey.web.filters.urlrewrite.RuleChain#handleRewrite 。逐个攻破
先是 process ⽅法：
关键在 org.tuckey.web.filters.urlrewrite.ClassRule#matches(java.lang.String,
javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) ⽅法
中箭头所指向的反射⽅法，matchstr默认为matches，然后得到matchesMethod的⽅法为
public org.tuckey.web.filters.urlrewrite.extend.RewriteMatch
com.atlassian.jira.plugin.webresource.CachingResourceDownloadRewriteRule.matches(ja
vax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) ，再将
所需的参数传⼊。
2022/2/22 17:19
1.md
ﬁle:///Users/s3gundo/Documents/markdown/vulns/java/jira/1.md
10/18
先来来看看匹配的模式
^/s/(.*)/_/((?i)(?!WEB-INF)(?!META-INF).*)
前⾯的 (?i) 表示是⼀种模式修饰符，i即匹配时不区分⼤⼩写。以前只⻅过放在最后⾯的。
后⾯的 (?!) 表示在那串字符串后⾯的不能是以 web-inf 和 meta-inf 结尾的。
2022/2/22 17:19
1.md
ﬁle:///Users/s3gundo/Documents/markdown/vulns/java/jira/1.md
11/18
⾄此，调⽤的堆栈是：
matches:53, CachingResourceDownloadRewriteRule (com.atlassian.jira.plugin.webreso
invoke:-1, GeneratedMethodAccessor308 (sun.reflect) 
invoke:43, DelegatingMethodAccessorImpl (sun.reflect) 
invoke:498, Method (java.lang.reflect) 
matches:119, ClassRule (org.tuckey.web.filters.urlrewrite) 
matches:101, ClassRule (org.tuckey.web.filters.urlrewrite) 
doRuleProcessing:83, RuleChain (org.tuckey.web.filters.urlrewrite) 
process:137, RuleChain (org.tuckey.web.filters.urlrewrite) //上班部分process的 
doRules:144, RuleChain (org.tuckey.web.filters.urlrewrite) 
processRequest:92, UrlRewriter (org.tuckey.web.filters.urlrewrite) 
doFilter:394, UrlRewriteFilter (org.tuckey.web.filters.urlrewrite) 
internalDoFilter:193, ApplicationFilterChain (org.apache.catalina.core) 
doFilter:166, ApplicationFilterChain (org.apache.catalina.core) [10] 
doFilter:30, CorrelationIdPopulatorFilter (com.atlassian.jira.servermetrics) 
doFilter:32, AbstractHttpFilter (com.atlassian.core.filters) 
internalDoFilter:193, ApplicationFilterChain (org.apache.catalina.core) 
...(省略) 
doFilterInternal:115, GzipFilter (com.atlassian.gzipfilter) 
doFilter:92, GzipFilter (com.atlassian.gzipfilter) 
internalDoFilter:193, ApplicationFilterChain (org.apache.catalina.core) 
doFilter:166, ApplicationFilterChain (org.apache.catalina.core) [1] 
invoke:199, StandardWrapperValve (org.apache.catalina.core) 
invoke:96, StandardContextValve (org.apache.catalina.core) 
invoke:493, AuthenticatorBase (org.apache.catalina.authenticator) 
invoke:206, StuckThreadDetectionValve (org.apache.catalina.valves) 
invoke:137, StandardHostValve (org.apache.catalina.core) 
invoke:81, ErrorReportValve (org.apache.catalina.valves) 
invoke:87, StandardEngineValve (org.apache.catalina.core) 
2022/2/22 17:19
1.md
ﬁle:///Users/s3gundo/Documents/markdown/vulns/java/jira/1.md
12/18
后⾯有的dontProcessAnyMoreRules把ruleIdxToRun赋值为rule.size()，才后⾯就会跳出判断，
不再进⾏匹配。
⾄此， process ⽅法结束，接下来是 handleRewrite ，这部分主要是请求转发
简单了解⼀下请求转发的作⽤域：
访问受保护⽬录下的资源 
requestDispatcher:是服务器的资源封装器，可以封装服务器内部所有资源。 
（包括WEB-INF下资源） 
WEB-INF是受保护⽬录，不能够通过浏览器直接访问 
可以通过请求转发去访问    
可以看到10-11之间的调⽤堆栈，这⾥具体是对请求进⾏了⼀次转发。
invoke:660, AbstractAccessLogValve (org.apache.catalina.valves) 
service:343, CoyoteAdapter (org.apache.catalina.connector) 
service:798, Http11Processor (org.apache.coyote.http11) 
process:66, AbstractProcessorLight (org.apache.coyote) 
process:808, AbstractProtocol$ConnectionHandler (org.apache.coyote) 
doRun:1498, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net) 
run:49, SocketProcessorBase (org.apache.tomcat.util.net) 
runWorker:1149, ThreadPoolExecutor (java.util.concurrent) 
run:624, ThreadPoolExecutor$Worker (java.util.concurrent) 
run:61, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads) 
run:748, Thread (java.lang)
2022/2/22 17:19
1.md
ﬁle:///Users/s3gundo/Documents/markdown/vulns/java/jira/1.md
13/18
于是接下来对请求直接进⾏了dofilter的操作，从⽽没有经过
org.apache.catalina.core.StandardContextValve#invoke ，个⼈认为请求转发作⽤域延伸到
受保护⽬录下的资源也是因为如此。
2022/2/22 17:19
1.md
ﬁle:///Users/s3gundo/Documents/markdown/vulns/java/jira/1.md
14/18
这也导致了第⼆次访问是由defaultServlet对资源进⾏的请求，也可以看到这⾥⾯filterconfig⾥⾯
仍然是存在JiraLoginFilter的，因为在web.xml中就已经配置全路径了
4、 JiraLoginFilter放⾏
看dofilter⽅法中第⼀⾏，这⾥是函数式接⼝，能够获取到SessionInvalidator并且存在的话，将这
个值符给jiraUserSessionInvalidator这个参数，并执⾏handleSessionInvalidation⽅法。这⾥获取
到存在的变量是 jiraUserSessionTracker ，所以后⾯执⾏的⽅法是
2022/2/22 17:19
1.md
ﬁle:///Users/s3gundo/Documents/markdown/vulns/java/jira/1.md
15/18
com.atlassian.jira.web.session.currentusers.JiraUserSessionInvalidator#handleSessi
onInvalidation
此处session是为空的，因为我们还没有登录，执⾏到finally块，判断完其实这⾥什么都没做。
接下来⾛到选择filter过滤器再进⾏doFilter的⽅法，因为这俩参数都没传，所以会传
seraphHttpAuthFilter参数回去，执⾏他的dofilter⽅法。
2022/2/22 17:19
1.md
ﬁle:///Users/s3gundo/Documents/markdown/vulns/java/jira/1.md
16/18
⾛到HttpAuthFilter⽗类的⽅法
看到status为空，所以两个return的块我们也进不去，所以⾛到最后⼀⾏代码继续放⾏。不做未
认证的跳转也返回值，所以最终会交到DefaultServlet的⼿上。
局限
传⼊的解析完之后的参数是/WEB-INF/web.xml，局限也就是在于下⾯部分，会再次去资源进⾏⼀
个normalize的处理，导致不能跨越web路径进⾏⼀个资源的读取，只能在web的路径之下。
2022/2/22 17:19
1.md
ﬁle:///Users/s3gundo/Documents/markdown/vulns/java/jira/1.md
17/18
file会将web⽬录的路径和我们请求的绝对路径进⾏拼接
之后再进⾏⼀次normlize的⽅法，在后⾯的getResource⽅法中和web路径进⾏拼接的时候，也就
达不到跨越web路径的⽬的。
2022/2/22 17:19
1.md
ﬁle:///Users/s3gundo/Documents/markdown/vulns/java/jira/1.md
18/18
修复
对正则进⾏了删改
也就是 WEB-INF  或者 META-INF  的前后有特殊字符，则返回 null;
三、总结
综上，在渗透测试的过程中，有些waf会拦截 ;/ ，在中间填充字符串可绕过某些特征。
⽂笔很烂，如有错误，请多多指教。
Pattern PATHS_DENIED = Pattern.compile("[^a-zA-Z0-9]((?i)(WEB-INF)|(META-INF))[^a-