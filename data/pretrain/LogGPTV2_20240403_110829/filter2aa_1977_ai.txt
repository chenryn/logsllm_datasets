https://foo.com/account/recover?email=PI:EMAIL
通⽤用编码实践
跨站请求伪造
攻击场景
bloodzer0&Lingfighting
3.受害者的帐户恢复email地址被更更改为 PI:EMAIL ，攻击者完全控制它
将HTTP⽅方法从 GET 更更改为 POST (或任何其他)都不不能解决这个问题，URL重写或HTTPS也不不能解决这个问题。
这个攻击的原因是因为服务器器不不能区分合法⽤用户在会话期间发出的请求和"恶意"的请求。
理理论上
如前所述，CSRF针对的是状态更更改请求，对于Web应⽤用程序，⼤大多数情况下都是提交表单发出的 POST 请求。
在此场景中，当⾸首次请求呈现表单的⻚页⾯面时，服务器器计算⼀一个随机数(打算使⽤用⼀一次的任意数字)。然后，这个token作为字段包含在表单中(⼤大多数时
候这个字段是隐藏的，但不不是强制性的)。
然后，当提交表单时，隐藏字段与其他⽤用户输⼊入⼀一起发送。 服务器器验证，令牌是否是请求数据的⼀一部分，是否有效。
该随机数/token应符合以下要求：
每个⽤用户会话唯⼀一
⼤大的随机值
由加密安全随机数⽣生成器器⽣生成
注意： 虽然 HTTP GET 请求不不会改变状态(称为幂等)，但是由于糟糕的编程实践，它们实际上可以修改资源，因此也应该成为CSRF攻击的⽬目标。
在处理理API时， PUT 和 DELETE 是CSRF攻击的另外两个常⻅见⽬目标。
练习
⼿手⼯工完成这⼀一切不不是⼀一个好主意，因为它很容易易出错。
⼤大多数Web应⽤用程序框架已经提供了了开箱即⽤用的功能，建议您启⽤用它，或者，不不使⽤用框架，单独使⽤用它。
以下示例例是⽤用于go编程语⾔言的 Gorilla web⼯工具包 的⼀一部分。你可以在GitHub上找到 gorilla/csrf。
问题
解决⽅方案
bloodzer0&Lingfighting
package main
import (
    "net/http"
    "github.com/gorilla/csrf"
    "github.com/gorilla/mux"
)
func main() {
    r := mux.NewRouter()
    r.HandleFunc("/signup", ShowSignupForm)
    // All POST requests without a valid token will return HTTP 403 Forbidden.
    r.HandleFunc("/signup/post", SubmitSignupForm)
    // Add the middleware to your router by wrapping it.
    http.ListenAndServe(":8000",
        csrf.Protect([]byte("32-byte-long-auth-key"))(r))
    // PS: Don't forget to pass csrf.Secure(false) if you're developing locally
    // over plain HTTP (just don't leave it on in production).
}
func ShowSignupForm(w http.ResponseWriter, r *http.Request) {
    // signup_form.tmpl just needs a {{ .csrfField }} template tag for
    // csrf.TemplateField to inject the CSRF token into. Easy!
    t.ExecuteTemplate(w, "signup_form.tmpl", map[string]interface{}{
        csrf.TemplateTag: csrf.TemplateField(r),
    })
    // We could also retrieve the token directly from csrf.Token(r) and
    // set it in the request header - w.Header.Set("X-CSRF-Token", token)
    // This is useful if you're sending JSON to clients or a front-end JavaScript
    // framework.
}
func SubmitSignupForm(w http.ResponseWriter, r *http.Request) {
    // We can trust that requests making it this far have satisfied
    // our CSRF protection requirements.
}
OWASP有⼀一个详细的跨站点请求伪造(CSRF)预防备忘单，建议你阅读。
正则表达式是⼀一种⼴广泛⽤用于搜索和验证的强⼤大⼯工具。在web应⽤用程序上下⽂文中，它们通常⽤用于输⼊入验证（例例如电⼦子邮件地址）。
正则表达式是⼀一种⽤用于描述字符串串集的表示法。当特定字符串串在正则表达式描述的集合中时，我们经常说正则表达式与字符串串匹配。(来源)
所周知，正则表达式很难掌握。有时，看似简单的验证，可能会导致拒绝服务。
与其他编程语⾔言不不同，Go的作者对此⾮非常重视，他选择⽤用RE2来实现regex标准包。
RE2的设计和实现具有⼀一个明确的⽬目标，即能够在没有⻛风险的情况下，处理理来⾃自不不受信任⽤用户的正则表达式。(来源)
考虑到安全性，RE2还保证了了线性时间性能和优雅的失败：解析器器、编译器器和执⾏行行引擎可⽤用的内存是有限的。
正则表达式拒绝服务(ReDoS)是⼀一种引发拒绝服务(DoS)的算法复杂度攻击。ReDos攻击是由正则表达式引起的，该表达式需要很⻓长时间来进⾏行行
计算，其计算时间与输⼊入⼤大⼩小呈指数级相关。在计算过程中，这⼀一异常⻓长的时间是，由于使⽤用的正则表达式的实现算法，例例如递归回溯表达
式。(来源)
正则表达式
为什什么是RE2
正则表达式拒绝服务攻击
bloodzer0&Lingfighting
你最好阅读完整的⽂文章“深⼊入研究Go中的正则表达式拒绝服务(ReDoS))”，因为它深⼊入研究了了这个问题，并包含了了⼤大多数流⾏行行的编程语⾔言之间的⽐比
较。在本节中，我们将关注⼀一个真实世界的⽤用例例。
由于某些原因，你正在寻找⼀一个正则表达式来验证注册表单上提供的电⼦子邮件地址。在快速搜索之后，你在RegExLib.com上找到了了这个⽤用于电⼦子邮
件验证的正则表达式：
^([a-zA-Z0-9])(([\-.]|[_]+)?([a-zA-Z0-9]+))*(@){1}[a-z0-9]+[.]{1}(([a-z]{2,3})|([a-z]{2,3}[.]{1}[a-z]{2,3}))$
如果你尝试将PI:EMAIL与此正则表达式匹配，您可能会确信它能够满⾜足你的需求。 如果你正在使⽤用Go开发，你会想出类似的东⻄西：
package main
import (
    "fmt"
    "regexp"
)
func main() {
    testString1 := "PI:EMAIL"
    testString2 := "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!"
    regex := regexp.MustCompile("^([a-zA-Z0-9])(([\\-.]|[_]+)?([a-zA-Z0-9]+))*(@){1}[a-z0-9]+[.]{1}(([a-z]{2,3})|(
[a-z]{2,3}[.]{1}[a-z]{2,3}))$")
    fmt.Println(regex.MatchString(testString1))
    // expected output: true
    fmt.Println(regex.MatchString(testString2))
    // expected output: false
}
运⾏行行结果：
$ go run src/redos.go
true
false
如果你正在使⽤用JavaScript开发呢?
const testString1 = 'PI:EMAIL';
const testString2 = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!';
const regex = /^([a-zA-Z0-9])(([\-.]|[_]+)?([a-zA-Z0-9]+))*(@){1}[a-z0-9]+[.]{1}(([a-z]{2,3})|([a-z]{2,3}[.]{1}[a-
z]{2,3}))$/;
console.log(regex.test(testString1));
// expected output: true
console.log(regex.test(testString2));
// expected output: hang/FATAL EXCEPTION
如果您具有其他编程语⾔言(如Perl、Python、PHP或JavaScript)的背景，则应该了了解正则表达式⽀支持的特性之间的差异。
RE2不不⽀支持只有回溯解决⽅方案存在的构造，例例如回溯引⽤用和查找。
考虑以下问题：验证任意字符串串是否是格式正确的HTML标记：a)开始和结束标记名称匹配，b)开始和结束标记之间可以有⼀一些⽂文本。
满⾜足要求b)很简单 .*? ，但是a)具有挑战性，因为结束标记匹配取决于匹配的开头标记。 这正是Backreferences允许我们做的事情。 检查下⾯面的
JavaScript实现：
少了了什什么
bloodzer0&Lingfighting
const testString1 = 'Go Secure Coding Practices Guide';
const testString2 = 'Go Secure Coding Practices Guide';
const testString3 = 'Go Secure Coding Practices Guid';
const regex = /]*>.*?/;
console.log(regex.test(testString1));
// expected output: true
console.log(regex.test(testString2));
// expected output: true
console.log(regex.test(testString3));
// expected output: false
\1 将保存 ([A-Z][A-Z0-9]*) 先前捕获的值。
这是你不不应该期望在Go中做的事情：
package main
import (
    "fmt"
    "regexp"
)
func main() {
    testString1 := "Go Secure Coding Practices Guide"
    testString2 := "Go Secure Coding Practices Guide"
    testString3 := "Go Secure Coding Practices Guid"
    regex := regexp.MustCompile("]*>.*?")
    fmt.Println(regex.MatchString(testString1))
    fmt.Println(regex.MatchString(testString2))
    fmt.Println(regex.MatchString(testString3))
}
运⾏行行上⾯面的Go源代码示例例应该会导致以下错误：
$ go run src/backreference.go
# command-line-arguments
src/backreference.go:12:64: unknown escape sequence
src/backreference.go:12:67: non-octal character in escape sequence: >
你可能会想要修复这些错误，并提出以下正则表达式：
]*>.*?
然后，你将得到：
go run src/backreference.go
panic: regexp: Compile("]*>.*?"): error parsing regexp: invalid escape sequence: `\1
`
goroutine 1 [running]:
regexp.MustCompile(0x4de780, 0x21, 0xc00000e1f0)
        /usr/local/go/src/regexp/regexp.go:245 +0x171
main.main()
        /go/src/backreference.go:12 +0x3a
exit status 2
在从头开始开发⼀一些东⻄西时，你可能会在缺少⼀一些特性时，发现很好的解决⽅方案。另⼀一⽅方⾯面，移植现有软件，你可能会寻找标准正则表达式包的完整
功能替代⽅方案，可能会找到(例例如： dlclark / regexp2 )。请记住，你可能会失去RE2的“安全特性”，⽐比如线性时间性能。
bloodzer0&Lingfighting