title:Fast Detection of Scanning Worm Infections
author:Stuart E. Schechter and
Jaeyeon Jung and
Arthur W. Berger
Fast Detection of Scanning Worm Infections
Stuart E. Schechter1, Jaeyeon Jung2, and Arthur W. Berger2
1 Harvard DEAS,
33 Oxford Street, Cambridge MA 02138, USA
PI:EMAIL
2 MIT CSAIL,
32 Vassar Street, Cambridge MA 02139, USA
{jyjung,awberger}@csail.mit.edu
Abstract. Worm detection and response systems must act quickly to
identify and quarantine scanning worms, as when left unchecked such
worms have been able to infect the majority of vulnerable hosts on the
Internet in a matter of minutes [9]. We present a hybrid approach to de-
tecting scanning worms that integrates signiﬁcant improvements we have
made to two existing techniques: sequential hypothesis testing and con-
nection rate limiting. Our results show that this two-pronged approach
successfully restricts the number of scans that a worm can complete, is
highly eﬀective, and has a low false alarm rate.
1 Introduction
Human reaction times are inadequate for detecting and responding to fast scan-
ning worms, such as Slammer, which can infect the majority of vulnerable sys-
tems in a matter of minutes [18, 9]. Thus, today’s worm response proposals focus
on automated responses to worms, such as quarantining infected machines [10],
automatic generation and installation of patches [14, 15], and reducing the rate at
which worms can issue connection requests so that a more carefully constructed
response can be crafted [22, 27].
Even an automated response will be of little use if it fails to be triggered
quickly after a host is infected. Infected hosts with high-bandwidth network con-
nections can initiate thousands of connection requests per second, each of which
has the potential to spread the infection. On the other hand, an automated
response that triggers too easily will erroneously identify hosts as infected, in-
terfering with these hosts’ reliable performance and causing signiﬁcant damage.
Many scan detection mechanisms rely upon the observation that only a small
fraction of addresses are likely to respond to a connection request at any given
port. Many IPv4 addresses are dead ends as they are not assigned to active hosts.
Others are assigned to hosts behind ﬁrewalls that block the port addressed by the
scanner. When connection requests do reach active hosts, many will be rejected
as not all hosts will be running the targeted service. Thus, scanners are likely to
have a low rate of successful connections, whereas benign hosts, which only issue
connection requests when there is reason to believe that addressees will respond,
will have a much greater rate of success.
E. Jonsson et al. (Eds.): RAID 2004, LNCS 3224, pp. 59–81, 2004.
c(cid:1) Springer-Verlag Berlin Heidelberg 2004
60
Stuart E. Schechter, Jaeyeon Jung, and Arthur W. Berger
Existing methods for detecting scanning worms within a local network use
ﬁxed thresholds for the number of allowable failed connections over a time pe-
riod [16] or limit the rate at which a host can initiate contact with additional
hosts [27]. However, these threshold based approaches may fail to detect low-rate
scanning. They may also require an excessive number of connection observations
to detect an infection or lead to an unnecessary number of false alarms.
To detect inbound scans initiated by hosts outside the local network, pre-
vious work on which we collaborated [7] used an approach based on sequential
hypothesis testing. This approach automatically adjusts the number of observa-
tions required to detect a scan with the strength of the evidence supporting the
hypothesis that the observed host is, in fact, scanning. The advantage of this
approach is that it can reduce the number of connection requests that must be
observed to detect that a remote host is scanning while maintaining an accept-
able false alarm rate.
While this approach shows promise for quickly detecting scanning by hosts
inside a local network soon after they have been infected by a worm, there
are signiﬁcant hurdles to overcome. For one, to determine whether a request to
connect to a remote host will fail, one must often wait to see whether a successful
connection response will be returned. Until enough connection requests can be
established to be failures, a sequential hypothesis test will lack the observations
required to conclude that the system is infected. By the time the decision to
quarantine the host is made, a worm with a high scan rate may have already
targeted thousands of other hosts.
This earlier work used a single sequential hypothesis test per host and did
not re-evaluate benign hosts over time. Unlike an intrusion detection system ob-
serving remote hosts, a worm detection system is likely to observe benign traﬃc
originating from an infected host before it is infected. It is therefore necessary
to adapt this method to continuously monitor hosts for indications of scanning.
We introduce an innovative approach that enables a Worm Detection System
(WDS) to continuously monitor a set of local hosts for infection, requiring a small
number of observations to be collected after an infection to detect that the host
is scanning (Figure 1).
To detect infected hosts, the WDS need only process a small fraction of
network events; a subset of connection request observations that we call ﬁrst-
WDS
Fig. 1. A Worm Detection System (WDS) is located to monitor a local network
Fast Detection of Scanning Worm Infections
61
contact connection requests and the responses to these requests that complete
the connections. A ﬁrst-contact connection request is a packet (TCP or UDP)
addressed to a host with which the sender has not previously communicated.
These events are monitored because scans are mostly composed of ﬁrst-contact
connection requests.
←−−
In Section 2, we introduce a scan detection algorithm that we call a reverse
sequential hypothesis test (
HT ), and show how it can reduce the number of ﬁrst-
←−−
contact connections that must be observed to detect scanning1. Unlike previous
methods, the number of observations
HT requires to detect hosts’ scanning
behavior is not aﬀected by the presence of benign network activity that may be
observed before scanning begins.
In Section 3, we introduce a new credit-based algorithm for limiting the
rate at which a host may issue the ﬁrst-contact connections that are indica-
tive of scanning activity. This credit-based connection rate limiting (CBCRL)
algorithm results in signiﬁcantly fewer false positives (unnecessary rate limiting)
than existing approaches.
When combined, this two-pronged approach is eﬀective because these two
algorithms are complementary. Without credit-based connection rate limiting, a
worm could rapidly issue thousands of connection requests before enough con-
nection failures have been observed by Reverse Sequential Hypothesis Testing so
that it can report the worm’s presence. Because Reverse Sequential Hypothesis
Testing processes connection success and failure events in the order that con-
nection requests are issued, false alarms are less likely to occur than if we used
an approach purely based on credit-based connection rate limiting, for which
ﬁrst-contact connections attempts are assumed to fail until the evidence proves
otherwise.
We demonstrate the utility of these combined algorithms with trace-driven
simulations, described in Section 4, with results presented in Section 5. The
limitations of our approach, including strategies that worms could attempt to
avoid detection, are presented in Section 6. We discuss related work, including
previous approaches to the scanning worm detection problem, in Section 7. Our
plans for future work are presented in Section 8, and we conclude in Section 9.
2 Detecting Scanning Worms
by Using Reverse Sequential Hypothesis Testing
A worm is a form of malware that spreads from host to host without human
intervention. A scanning worm locates vulnerable hosts by generating a list of
addresses to probe and then contacting them. This address list may be gener-
ated sequentially or pseudo-randomly. Local addresses are often preferentially
selected [25] as communication between neighboring hosts will likely encounter
fewer defenses. Scans may take the form of TCP connection requests (SYN pack-
ets) or UDP packets. In the case of the connectionless UDP protocol, it is possible
1 The letters in this abbreviation,
←−−
HT , stand for Hypothesis Testing and the arrow
indicates the reverse sequential order in which observations are processed.
62
Stuart E. Schechter, Jaeyeon Jung, and Arthur W. Berger
for the scanning packet to also contain the body of the worm as was the case
with the Slammer worm [9].
In this section, we present an on-line algorithm for detecting the presence of
scanners within a local network by observing network traﬃc. We use a sequential
hypothesis test for its ability to adjust the number of observations required to
make a decision to match the strength of the evidence it is presented with.
2.1 Sequential Hypothesis Testing
As with existing approaches to scan detection [7, 17, 22, 27], we rely upon the
observation that only a small fraction of addresses are likely to respond to a
connection request at any given port. Benign hosts, which only contact systems
when they have reason to believe that this connection request will be accepted,
are more likely to receive a response to a connection request.
Recall that a ﬁrst-contact connection request is a packet (TCP or UDP)
addressed to a host with which the sender has not previously communicated.
When a local host l initiates a ﬁrst-contact connection request to a destination
address, d, we classify the outcome as either a “success” or a “failure”. If the
request was a TCP SYN packet, the connection is said to succeed if a SYN-ACK
is received from d before a timeout expires. If the request is a UDP packet,
any UDP packet from d received before the timeout will do. We let Yi be a
random (indicator) variable that represents the outcome of the ith ﬁrst-contact
(cid:1)
connection request by l, where
Yi =
0 if the connection succeeds
1 if the connection fails
Detecting scanning by local hosts is a problem that is well suited for the
method of sequential hypothesis testing ﬁrst developed by Wald [24], and used
in our earlier work to detect remote scanners [7].
We call H1 the hypothesis that host l is engaged in scanning (indicating
infection by a worm) and H0 the null hypothesis that the host is not scanning. We
assume that, conditional on the hypothesis Hj, the random variables Yi|Hj i =
1, 2, . . . are independent and identically distributed (i.i.d.). That is, conditional
on the hypothesis, any two connection attempts will have the same likelihood
of succeeding, and their chances of success are unrelated to each other. We can
express the distribution of the Bernoulli random variable Yi as:
Pr[Yi = 1|H0] = 1 − θ0
Pr[Yi = 1|H1] = 1 − θ1
Pr[Yi = 0|H0] = θ0,
Pr[Yi = 0|H1] = θ1,
Given that connections originating at benign hosts are more likely to succeed
than those initiated by a scanner, θ0 > θ1.
Sequential hypothesis testing chooses between two hypotheses by comparing
the likelihoods that the model would generate the observed sequence of events,
Yn ≡ (Y1, . . . , Yn), under each hypothesis. It does this by maintaining the ratio
Fast Detection of Scanning Worm Infections
63
Λ(Yn), the numerator of which is the likelihood that the model would generate
the sequence of events Yn under hypothesis H1, and the denominator under
hypothesis H0.
Λ(Yn) ≡ Pr[Yn|H1]
Pr[Yn|H0]
(1)
The i.i.d. assumption in the model enables us to state this ratio in terms of
the likelihoods of the individual events.
Pr[Yi|H1]
Pr[Yi|H0]
(2)
i=1
Λ(Yn) ≡ n(cid:2)
=
n(cid:2)
We can write the change to Λ(Yn) as a result of the ithobservation as φ(Yi):
φ(Yi) ≡ Pr[Yi|H1]
Pr[Yi|H0]
if Yi = 0 (success)
θ1
θ0
1−θ1
1−θ0 if Yi = 1 (failure)
This enables us to rewrite Λ(Yn) inductively, such that Λ(Y0) = 1, and
Λ(Yn) may be calculated iteratively as each observation arrives.
Λ(Yn) =
φ(Yi) = Λ(Yn−1)φ(Yn)
i=1
One compares the likelihood ratio Λ(Yn) to an upper threshold, η1, above
which we accept hypothesis H1, and a lower threshold, η0, below which we accept
hypothesis H0. If η0 < Λ(Yn) < η1 then the result will remain inconclusive until
more events in the sequence can be evaluated. This is illustrated in Figure 2.
η
1
1
η
0
0
0
1
0
1
Y1
Y2
Y3
Y4
Y5
Fig. 2. A log scale graph of Λ(Y) as each observation, Yi, is added to the sequence.
Each success (0) observation decreases Λ(Y), moving it closer to the benign conclusion
threshold η0, whereas each failure (1) observation increases Λ(Y), moving it closer to
the infection conclusion threshold η1
Writing the probability of correctly reporting detection (declaring host is
infected when indeed it is) as PD and the probability of a false positive (declaring
host is infected when in fact it is not) as PF , we can deﬁne our performance
requirements as bounds α and β on these probabilities.
α ≥ PF and β ≤ PD
64
Stuart E. Schechter, Jaeyeon Jung, and Arthur W. Berger
Because every false positive can decrease productivity of both the users of a host
and the security staﬀ who need to inspect it, one would expect to use α values
that are small fractions of a percentage point. Since scanners generate enough
traﬃc to clearly diﬀerentiate their behavior from that of benign systems, a β of
greater than 0.99 should be an achievable requirement.
Wald [24] showed that η1 and η0 can be bounded in terms of PD and PF .
η1 ≤ PD
PF
≤ η0
1 − PD
1 − PF
(3)
(4)
Given our requirement parameters α and β, we assign the following values
to our thresholds, η0 and η1:
η1 ← β
α
η0 ← 1 − β
1 − α
(5)
(6)
From Equations (3) and (5), we can bound PF in terms of α and β. Since
0 < PD < 1, we can replace PD with 1 in Equation (3) to yield:
η1 ≤ PD
PF
< 1
PF
(7)
It follows that:
can bound 1 − PD:
(8)
Likewise, using Equation (4) and given that 1− PD < (1− PD)/(1− PF ), we
=
PF < 1
η1
α
β
1 − PD < η0 =
1 − β
1 − α
(9)
While η1 may result in a false positive rate above our desired bound by a
β , this diﬀerence is negligible given our use of β values in the range of
factor of 1
0.99 and above. Similarly, while our miss rate, 1 − PD may be oﬀ by as much
as a factor of
1−α, this too will have negligible eﬀect given our requirements for
very small values of α.
1
2.2 Detecting Infection Events
In our earlier work, it was assumed that each remote host was either a scanner or
benign for the duration of the observed period. When a host was determined to be
benign it would no longer be observed. In contrast, in this paper we are concerned
with detecting infection events, in which a local host transitions from a benign
state to an infected state. Should a host become infected while a hypothesis test
is already running, the set of outcomes observed by the sequential hypothesis
Fast Detection of Scanning Worm Infections
65
test may include those from both the benign and infected states, as shown in
Figure 3. Even if we continue to observe the host and start a new hypothesis
test each time a benign conclusion is reached, the test may take longer than
necessary to conclude that an infection has occurred.
infection
0
0
1
1
1