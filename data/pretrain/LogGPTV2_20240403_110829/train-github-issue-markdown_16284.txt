  * What version of Go are you using (`go version`)?
    >go version
    go version go1.6 windows/amd64
  * What operating system and processor architecture are you using (`go env`)?
    >go env
    set GOARCH=amd64
    set GOBIN=C:\Users\\Development\GoSource\bin
    set GOEXE=.exe
    set GOHOSTARCH=amd64
    set GOHOSTOS=windows
    set GOOS=windows
    set GOPATH=C:\Users\\Development\GoSource
    set GORACE=
    set GOROOT=C:\Go
    set GOTOOLDIR=C:\Go\pkg\tool\windows_amd64
    set GO15VENDOREXPERIMENT=1
    set CC=gcc
    set GOGCCFLAGS=-m64 -mthreads -fmessage-length=0
    set CXX=g++
    set CGO_ENABLED=1
  * What did you do?
The documentation gives an example on the expected behaviour of `path.Base()`,
however, it does not actually split the trailing path element. Also,
`path.Base()` duplicates the `\` in the path.
    package main
    import (
        "fmt"
        "path"
        "strings"
    )
    func main() {
        base := `c:\users\username`
        fmt.Println(path.Base(base))
        fmt.Println(fmt.Sprintf("%q\n", strings.SplitAfter(base, `\`)))
        lines := strings.SplitAfter(base, `\`)
        fmt.Println(lines[len(lines)-1])
    }
  * What did you expect to see?
The expected behaviour should be consistent with the documentation examples;
`path.Base()` should return the trailing path element.
  * What did you see instead?
`path.Base()` returns the full path instead of the final path element.