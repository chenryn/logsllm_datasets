1
THE ADVENTURES OF AV 
AND THE LEAKY SANDBOX
A SafeBreach Labs research paper by
Amit Klein, VP Security Research, SafeBreach and
Itzik Kotler, co-founder and CTO, SafeBreach
July 2017
2
ABSTRACT
We describe and demonstrate a novel technique for exfiltrating data from highly secure enterprises which employ strict 
egress filtering - that is, endpoints have no direct Internet connection, or the endpoints’ connection to the Internet is 
restricted to hosts required by their legitimately installed software. Assuming the endpoint has a cloud-enhanced anti-virus 
product installed, we show that if the anti-virus (AV) product employs an Internet-connected sandbox as part of its cloud 
service, it actually facilitates such exfiltration. We release the tool we developed to implement the exfiltration technique, 
and we provide real-world results from several prominent AV products (by Avira, ESET, Kaspersky and Comodo). 
Our technique revolves around exfiltrating the data inside an executable file which is created on the endpoint (by the main 
malware process), detected by the AV agent, uploaded to the cloud for further inspection, and executed in an Internet connected 
sandbox. We also provide data and insights on those AV in-the-cloud sandboxes. We generalize our findings to cover on-premise 
sandboxes, use of cloud-based/online scanning and malware categorization services, and sample sharing at large. Lastly, we 
address the issues of how to further enhance the attack, and how cloud-based AV vendors can mitigate it.
INTRODUCTION
Exfiltration of sensitive data from a well-protected enterprise is a major goal for cyber attackers. Network-wise, our 
reference scenario is an enterprise whose endpoints are not allowed direct communication with the Internet, or an 
enterprise whose endpoints are only allowed Internet connections to a closed set of external hosts (such as Microsoft 
update servers, AV update servers, etc.). And since the organization is “well protected”, it’s quite likely to have mandatory 
anti-virus (AV) security software installed on every endpoint. Interestingly, many AV vendors advertise “cloud AV” offerings, 
in which the endpoint AV software consults a cloud service about its local findings. Note that when employing a “cloud 
AV”, even for endpoints that are completely restricted from accessing the Internet, the endpoints are still connected to an 
internal network, and are allowed to send data over the internal network to an AV management server in the organization 
(which is allowed to connect to the AV cloud). This architecture, therefore, is not truly air-gapped. 
There are various exfiltration techniques already disclosed, and in fact, our 2016 paper “In Plain Sight: The Perfect 
Exfiltration” provides both references to comprehensive lists of such techniques, and a new set of such techniques. 
However, all those techniques assume the endpoint can connect to arbitrary Internet hosts, or assume lax security at the 
enterprise, or some requirements on the hosts that are used for exfiltration. In the current paper, we look at a case wherein 
these assumptions do not hold, and particularly wherein the direct Internet connection, if allowed at all, is limited to a small 
set of hosts (those that are required for proper functioning of legitimately installed software on the endpoint). We show 
that even under these restrictions, it is still possible under some likely conditions, to exfiltrate data to the outside world.
Our contribution:
1. We describe an innovative technique to exfiltrate data using cloud-based AV sandboxing, that can work even if the endpoint 
is prevented from directly connecting to the Internet, or when it can only connect to the hosts necessary for the functioning 
of the legitimately installed software on the endpoint.
2. We provide a free, open source tool which implements our technique.
3. We provide real world results of testing the technique against leading AV products.
4. We provide some insights regarding the nature of cloud-based AV sandboxes from leading AV vendors.
5. We describe extensions to our original technique (not yet implemented) that can improve the success rate of the technique.
3
RELATED WORK
Exfiltration in general
As mentioned above, there is quite a large corpus of research around exfiltration techniques in general, such as:
• 
“Covert Channels in TCP/IP Protocol Stack” by Aleksandra Mileva and Boris Panajotov
• 
"A survey of covert channels and countermeasures in computer network protocols" by Sebastian Zander, Grenville
Armitage and Philip Branch
• 
"Covert timing channels using HTTP cache headers" by Denis Kolegov, Oleg Broslavsky and Nikita Oleksov
Our research differs from the methods described by these papers by addressing the challenge of exfiltrating from endpoints 
which are not directly connected to the Internet, or have very limited connection to the Internet.
Exfiltration from disconnected endpoints
There is a lot of research published recently about exfiltrating data from endpoints over non-network media, e.g.:
• 
”LED-it-GO Leaking (a lot of) Data from Air-Gapped Computers via the (small) Hard Drive LED” by Mordechai Guri,
Boris Zadov, Eran Atias and Yuval Elovici, 
• 
"DiskFiltration: Data Exfiltration from Speakerless Air-Gapped Computers via Covert Hard Drive Noise” by
Mordechai Guri, Yosef Solewicz, Andrey Daidakulov and Yuval Elovici
• 
 ”BitWhisper: Covert Signaling Channel between Air-Gapped Computers using Thermal Manipulations”  by Mordechai
Guri, Matan Monitz, Yisroel Mirski and Yuval Elovici, etc. 
These methods tackle the challenge of a truly isolated machine (“air gapped”) on one hand, but typically require an attacker 
presence physically near the endpoint on the other hand. Our research addresses a slightly different question – the 
endpoint may be indirectly connected to the Internet (through other machines which are allowed to access the Internet), 
or may be allowed to connect to a closed set of hosts, but on the other hand, we are not restricted to physical proximity, 
and can carry out exfiltration to practically any other Internet-connected host.
Exfiltration via 3rd party sites
An IPID-based exfiltration method such as “Covert Communications Despite Traffic Data Retention” by George Danezis 
can use one of the allowed Internet hosts (e.g. Microsoft’s update server) to exfiltrate data. However, this method is 
nowadays practically outdated since modern operating systems do not implement a globally incrementing IPID generator. 
Moreover, the whitelisted sites are likely to be very busy, therefore the IPID-leaking method will encounter a lot of noise 
and will likely be impractical.
4
Another exfiltration using a 3rd party site would be to send a TCP SYN packet to an open port at the 3rd party site, with a 
source IP pointing at an attacker host (source IP spoofing). The 3rd party site will respond in a TCP SYN+ACK packet sent 
“back” to the source IP – i.e. to the attacker host. The payload can be embedded in the TCP ISN (initial sequence number) 
and/or the TCP source port, both of which are returned in the SYN+ACK packet. 
A similar approach can be to send a UDP packet (request) to an open UDP port at the 3rd party site, again with a source IP 
pointing at an attacker host (source IP spoofing). The 3rd party site will respond with a UDP response packet sent “back” to 
the source IP. The payload can be embedded in the source port, or as part of the query data, if that can be deduced from 
the response data (for example, a DNS response contains the DNS query). However, high security enterprises may employ 
IP egress filtering, and thus drop the outbound endpoint packets whose IP addresses do not belong to the enterprise. In 
addition, NAT/PAT devices may alter the source port and source IP address and thus eliminates this channel. Moreover, 
TCP/UDP-aware gateways/firewalls may terminate a TCP connection and establish their own, thus again eliminating this 
channel.
Another approach is demonstrated in “In Plain Sight: The Perfect Exfiltration” by Amit Klein and Itzik Kotler. There, the 
authors describe exfiltration based on subtle manipulations of the application state in a 3rd party site. This approach does 
not work well with the hosts to which an endpoint is allowed to connect (e.g. software update hosts), since these hosts 
don’t need a caching layer in front of them, and their application is not rich in states that can be easily manipulated.
Triggering av products
In “Art of Anti Detection 1 – Introduction to AV & Detection Techniques” , Ege Balci provides an extensive list of triggering 
behaviors for av products. Our technique uses such triggers (we experimented with 2 triggers but the technique can make 
use practically of each and every trigger listed) – our innovation is not in coming up with ways to trigger AV products, but 
rather abuses the actions some AV products take once the trigger is fired
Research on sandboxes
In “AVLeak: Fingerprinting Antivirus Emulators Through Black-Box Testing”, Jeremy Blackthorne, Alexei Bulazel, Andrew 
Fasano, Patrick Biernat and Bülent Yener describe a way to fingerprint an AV emulation sandbox as a black-box. They do 
not describe a way to exfiltrate data from an endpoint machine. 
In Google’s Project Zero entry “Comodo: Comodo Antivirus Forwards Emulated API calls to the Real API during scans” , Tavis 
Ormandy describes bugs in Comodo Antivirus which allow an attacker to run code in elevated privileges, and to exfiltrate data 
out of the endpoint. However, the underlying assumption there is that the endpoint is allowed to connect to arbitrary Internet 
hosts. Our concern is with scenarios where such connections are not allowed, usually via an organization firewall (i.e. a gateway 
separate from the endpoints).
5
In “Your sandbox is blinded: Impact of decoy injection to public malware analysis systems” , Katsunari Yoshioka, Yoshihiko 
Hosobuchi, Tatsunori Orii and Tsutomu Matsumoto describe a technique to fingerprint a public-facing sandbox. Like 
AVLeak, they do not concern themselves with exfiltrating data from a regular (endpoint) machine.
In “Enter Sandbox – part 8: All those… host names… will be lost, in time, like tears… in… rain” Hexacorn Ltd. provides a 
list of 800+ computer names allegedly used in sandboxes, thus creating a de-facto fingerprinting database for sandboxes.
In “Sandbox detection: leak, abuse, test”, Zoltan Balazs describes how to extract sandbox fingerprints (e.g. screen 
resolution, computer name, software installed, CPU type and count, memory size, mouse movements, etc.)
In “Art of Anti Detection 1 – Introduction to AV & Detection Techniques”, Ege Balci provides heuristics for sandbox 
detection.
Our research studies exfiltration through AV sandboxes of data obtained from an endpoint. Fingerprinting the sandboxes 
themselves wasn’t our main object, though we did observe several properties of AV sandboxes, and we share these in the 
paper. 
6
BACKGROUND
We are interested in two network architectures that can be found in highly secure organizations:
Indirect Internet Access
The corporate has cloud-based AV agents deployed on all endpoints. The corporate has a central AV management server 
(distributing updates and collecting samples and events) which is allowed to connect to the AV’s cloud service. All other 
machines (endpoints) are prohibited from accessing the Internet. The access control can be enforced by a firewall/gateway 
between the corporate’s LAN and the Internet. This firewall/gateway has a rule that prevents all machines except the AV 
management server from accessing the Internet. It is assumed that spoofing TCP (or IP) traffic is impossible – e.g. the AV 
management server is located in a different segment and the firewall/gateway employs strict ingress filtering.
In this architecture, the endpoints do not have any direct Internet access. Therefore, regular network-based exfiltration 
methods are ineffective here. However, software on the endpoint can influence the AV management server (for example, 
through the agent) and cause it to communicate with the AV cloud hosts. We will use this observation to construct an 
exfiltration technique.
Limited Direct Internet Access
The corporate has cloud-based AV agents deployed on all endpoints. All endpoints are prohibited from accessing the 
Internet, except for a closed set of hosts necessary for the functioning of the legitimately installed software on the 
endpoints (e.g. the AV cloud hosts, Microsoft’s update servers, etc.). The access control can be enforced by a firewall/
gateway between the corporate’s LAN and the Internet. This firewall/gateway has a rule that prevents all machines from 
accessing the Internet, except to a closed set of hosts. 
In this architecture, the endpoints have very limited access to the Internet. Theoretically, one can exfiltrate data by sending 
packets to one of the allowed Internet hosts (e.g. to a Microsoft update server), but this requires the attacker to also be 
able to eavesdrop on the communication between the organization and the (Microsoft update) server. This is not feasible 
for a non-state sponsored attacker, and thus it is out of scope of this paper. Alternatively, an endpoint can send IP packets 
to one of the whitelisted hosts, thereby theoretically enabling the various "exfiltration via 3rd party sites" techniques 
discussed above, but as we wrote there, none of these methods is effective nowadays for highly secure enterprises (with 
egress filtering) and with the whitelisted Internet hosts.
Triggering an AV agent
AV products typically employ numerous behavioral rules that attempt to detect suspicious/malicious processes. Examples 
for behavioral rules are:
• 
Writing to disk an image (file) which is known to be malicious (known malware/virus)
• 
Setting an auto-start entry (persistence)
• 
Injecting code into other processes
7
•    Unpacking code in memory
•    Connecting to known malicious hosts (known C&C)
•    Making system level modifications (e.g. replacing system files/libraries, adding/changing entries in the hosts file,  
       modifying the DNS settings)
•    Making changes to the browsers, e.g. installing plugins, modifying the proxy settings, etc.
This is, of course, just a small subset of all possible triggers.
Once a process activity triggers the AV product, the image file of the process is marked as suspicious/malicious (and, 
depending on the AV product, may be sent to the cloud for further inspection.)
Cloud AV sandboxing
We are going to abuse the cloud AV sandboxing feature that many AV vendors use. The rationale for this feature is that 
it enables the AV vendor to offer lightweight agent software, and carry out the heavy-lifting security analysis work in 
the cloud. Specifically, in such an architecture, the AV agent needs to conduct only basic security checks against other 
processes and files, allowing for a grey area where a binary “malicious/non-malicious” decision cannot be determined 
locally. A process/file falling into this grey area is sent to the cloud for further analysis, and a security decision is 
obtained from the cloud (sometimes in near real time). 
A sample that arrives at an AV cloud sandbox is typically executed there and its behavior is observed. The sandbox is 
not a sensitive environment, therefore a malicious executable can be run there with no harm to real users or resources. 
Based on the observed behavior, the AV vendor can arrive at a more educated decision about the nature of the sample 
(i.e. whether it is malicious or not). 
An AV cloud sandbox may be isolated from the Internet, or connected to it. There’s a good argument in favor of a 
connected sandbox, as it allows the sample to run in a more “natural” environment. For example, an unknown file (which 
is in fact a new malware dropper) can connect to its C&C server, download a secondary malware (such as the well-
known Zeus malware) and run it. The AV logic can then inspect the Zeus file and classify it is a known malware file, and 
thus determine that the original sample is actually a malware dropper, hence it is malicious in itself. All this is impossible 
when the AV cloud sandbox is isolated from the Internet.
Exfiltration methods from an Internet-connected machine
There are numerous ways to exfiltrate data from an Internet-connected machine, as mentioned in the “related work” 
section. If stealth requirements are alleviated (e.g. when a one-time attempt is made), then exfiltration can be as simple 
as connecting to an Internet host (owned/accessible by the attacker), e.g.:
• 
Sending HTTP/HTTPS request to the attacker’s host
• 
Forcing DNS resolution (for hostnames in a domain owned by the attacker, and where the attacker also controls the 
authoritative name server for the domain)
• 
Sending email to an attacker mailbox (SMTP)
• 
Sending an IRC message
• 
Pinging (ICMP Echo) an attacker host
• 
Submitting (via HTTP/HTTPS) a comment in a popular web forum
8
This is, of course, merely a very small subset of all the possible ways to transmit data out of the machine. 
EXFILTRATION THROUGH AV CLOUD SANDBOXES
We present a novel method of exfiltrating data from endpoints which are not directly connected to the Internet, or 
whose connection to the Internet is limited to only those hosts needed for the functionality of its legitimately installed 
software. Our technique requires the following:
• 
An AV product (agent) installed on endpoints, which submits to the AV cloud unknown/suspicious executable files:
- Directly, via an Internet connection from the endpoint to the AV cloud; or
- Indirectly, by sending the sample to an enterprise AV management server and having the latter submit the  
sample via a direct Internet connection to the AV cloud (in real time or in offline/batch mode), or manually via  
copying files (though a physical medium e.g. a USB stick) from the enterprise AV management server to an  
Internet-facing machine and submitting the files from there. 
• 
The AV cloud service employs a sandbox which can directly connect to the Internet.
• 
The attacker’s process (malware) is running on the endpoint.
Our technique can exfiltrate data in this scenario even when the endpoint has a very limited Internet connection (e.g. 
one which is not used by the user – such as limiting the connection to software update servers), and even when no 
direct connection is allowed at all.
Details of the technique
The attacker process (called “Rocket”) contains a secondary executable (called “Satellite”) as part of its data. The Satellite 
can be encrypted/compressed to hide the fact that it is another executable, thus the Satellite can be no more than a piece 
of data in the Rocket memory space (and file) that does not jeopardize the Rocket.
The Satellite contains a placeholder for arbitrary data (“payload”) to be exfiltrated. The location of the placeholder should 
be known to the Rocket, e.g. as an offset+length, or as magic-start/end markers, within the data of the embedded Satellite. 
The attack proceeds as follows:
1. The Rocket collects the data (payload) it needs to exfiltrate. 
2. The Rocket decrypts/decompresses the Satellite into its useful image in memory, and embeds the payload in a 
designated area in the Satellite image. The payload can be compressed/encrypted to further ensure that it is not 
suspicious by itself. The Rocket then writes the Satellite image to disk, as a file (henceforth, the "Satellite file").
3. The Rocket spawns the Satellite (from its file) as a child process.
4. The Satellite performs an intentionally suspicious action, such as persisting itself, or writing a known malware file to disk.
5. The endpoint AV product detects the suspicious action of the Satellite, possibly quarantines it, and sends its image 
file to the AV cloud. Note that the Satellite file contains the payload. 
6. The cloud AV executes the Satellite file in an Internet-connected sandbox.
7. The Satellite process can now try any of the Internet-based exfiltration methods to exfiltrate the (encrypted/
compressed) payload to the attacker, e.g. by sending it in an HTTP/HTTPS POST request to an attacker host, or by 
breaking it into small pieces, hex-encoding it and using it as a DNS subdomain for DNS resolution requests whose 
domain is owned by the attacker.
9
Note that this attack is “noisy” in the sense that the AV product will flag the Satellite file as suspicious and as such this
may have visible impact on the user (see Figures 1-2 below), as well as visibility in logs and records. However, for a one
time exfiltration attack this will already be too late, as the payload will already be traveling to the cloud by the time this
incident is investigated by flesh-and-blood analysts. 
RESULTS WITH LEADING AV PRODUCTS
In February-March 2017, we ran tests against multiple AV products. We provide details of the tests and results in this
section.
Test setup
We built Rocket-Satellite combinations as explained above. The code was written in C/C++ and compiled in Microsoft VC
2015 – Rocket was compiled for an x86 target, and Satellite – mostly for an x64 target, but sometimes for an x86 target
(this was a random choice, we don’t place too much weight on the target architecture). For simplicity, the Satellite and the
payload were not encrypted or compressed. The payload area was marked with “magic-start” and “magic-end” markers. 
For best results, The Rocket executable file should be placed in in one of the regular folders, such as the “Desktop” folder
(but not in the “Downloads” folder which is probably subject to different AV policies).
Rocket collects data from the machine (in out proof of concept – the machine name, and additionally some hard-wired
short string that we used to identify the exact test we ran), prepares the Satellite per above, writes the Satellite to the
current working directory and runs it. It should be noted that the due to the way they are created (with experiment-specific
strings), each Satellite file was unique, i.e. had a unique MD5/SHA1/SHA2 hash signature.
For triggers (Satellite actions), we chose two very simple triggers (each was tested on its own):
1. Writing the EICAR file to disk. The EICAR file is a de-facto standard file that deliberately triggers AV products .
This is done by opening a file named “daemon.com” in the current working directory, and writing the 68 bytes of the 
EICAR data to this file using the C runtime library function fwrite().
2. Moving the Satellite image file to the user’s startup folder (%USERPROFILE%\AppData\Roaming\Microsoft\
Windows\Start Menu\Programs\Startup) as “foo.exe”, overriding any existing “foo.exe” file. This is done using the 
DeleteFile() and MoveFile() WinAPI calls. 
For exfiltration, we chose two methods, both are attempted in the same Satellite run:
1. DNS-based exfiltration. The Satellite encodes the payload (using hex-encoding), then breaks it into chunks that fit
into DNS labels, and exfiltrates each chunk as a subdomain in a host-resolution query for a domain owned by the
attacker (so eventually the query arrives at the authoritative DNS server run by the attacker). The resolution request is 
carried out via invoking the Windows Socket library function getaddrinfo() or gethostbyname().
2. HTTP-based exfiltration. The Satellite sends the payload as-is to the attacker's Internet host in an HTTP POST
request body. This is done using WinINet’s HttpOpenRequest() and HttpSendRequest().
Free open source code for the above implementation is available in the GitHub repository at https://github.com
/safebreach-labs/spacebin
10
Test results
We checked 10 products out of the top 11 anti-virus products from the vendor list in OPSWAT’s “Antivirus and
Compromised Device Report: January 2015”. This is their last report on pure Anti-Virus vendors. We could not test
SpyBot due to research time constraints.
The following table summarizes our results. Note that for products that are marked “-“, it only means that we could
not exfiltrate the payload via the combination of the two simple triggers we used, and the two naïve exfiltration
techniques we implemented. It does not mean that other combinations cannot potentially succeed for these products. 
Product
Version
Trigger
Exfiltration Method
Success
Avast Free 
Antivirus
 12.3.2280
-
Microsoft 
Windows 
Defender
 Client v. 4.10.14393.0
Engine v. 1.1.13407.0
-
AVG
Build 1.151.2.59606
Framework v. 
1.162.2.59876
-
Avira Antivirus 
Pro
 15.0.25.172
Persistence
DNS, HTTP
Yes
Symantec 
Norton Security
22.8.1.14
-
McAfee Cloud 
AV
 0.5.235.1
-
ESET NOD32 
Antivirus
 10.0.390.0
EICAR
DNS
Yes
Kaspesrky Total 
Security 2017
 17.0.0.611(c)
Persistence
DNS, HTTP