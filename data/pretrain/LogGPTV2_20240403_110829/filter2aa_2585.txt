这周末抽空写了写，之前知识星球宣传⾥⾯说要分享这个经验，很多⼈也是看了这个才加的，所以趁现在还记得就
先写出来。
时间在2020年，当时xray的反射型xss扫描很好⽤，于是想知道原理，好奇探索了下⼤概的xss扫描规则，在xss扫
描器成⻓记.md有讲述，xray会先发送⼀个随机字符串，根据在html/js中反射的位置构造⼀个⽆害的payload，判
断标签是否闭合就能判断出是否存在反射xss，后⾯验证的payload⾃⾏去构造就好了。
xray没开源，我就⾃⼰写⼀个了，然后加了⼀个爬⾍，⾃⼰爬⾃⼰扫，通过爬⾍的数据，发现很多地⽅还有可以优
化的地⽅，⼜看了⼀些公开的xss的报告，把很多奇葩条件下的xss扫描都加了进去。当时⾃⼰的机器都是2H1G的
⼩机器，想提⾼效率，⽤了分布式，但是⼜由此带来了很多第三⽅的数据库，队列什么的，更加压迫了我机器的性
能..做了这么多，成果也很喜⼈，各⼤src，微软都有，运⽓好也获得了微软1000多⼑的赏⾦。
这篇⽂章主要分三部分
xss扫描器经历
⼯程化经历
微软赏⾦经历
xss扫描器经历
检测流程：
1. 将参数变为随机数，探测随机数是否回显
2. 判断可否xss，content-type是否是html
3. 再次根据GET，POST，COOKIE进⾏请求，确定参数的回显位置
4. 如果语义分析不到回显的位置，可以直接构造⼀个xss，看是否存在即可
5. 语义分析得到位置，根据不同位置⽣成不同的payload，并进⾏⼆次探测最终确认xss是否存在
这部分代码其实早已在w13scan上公开了：https://github.com/w-digital-scanner/w13scan/blob/master/W13S
CAN/scanners/PerFile/xss.py
不过公开的是第⼀版的代码，后⾯我⼜对代码进⾏过多次整改，适配了很多种情况。
js⽂本内容转义
回显内容在注释⾥,可使⽤换⾏进⾏bypass
多个反射点特殊构造bypass
https://brutelogic.com.br/blog/multi-reflection-xss/
等等..
⼯程化经历
xss扫描器完毕后，加上爬⾍，⼀个 简单的流程图如下
整个项⽬整理后⽤到的技术有下⾯⼏个，流程很简单，麻烦的是容器化和⾃动发布，不过这些弄好之后⼀键部署⽅
便很多。
后端⼀开始⽤的是 leancloud 服务，直接把扫到的数据存⾥⾯
var s1="1\"
后⾯觉得成果不错，就开始⾃⼰写数据库之类的了。
构成
现在总结起来的构成有以下，使⽤到的技术：
域名收集
https://github.com/projectdiscovery/subfinder
域名爆破+验证
https://github.com/boy-hack/ksubdomain
爬⾍
https://github.com/0Kee-Team/crawlergo
后端：
django+mongodb
分布式:
celery
celery状态监控：flower
消息队列：rabbit MQ
容器化
docker
⾃动发布
fabric
进程监控
supervisor
界⾯和成果
当时做了简单的界⾯，填写src的地址等等就可以⾃动监控，⾃动爬⾍，⾃动扫xss了，成果也很喜⼈，基本上很多
src的都检测到了。
⼦域名搜索
漏洞⻚⾯
会把xss的类型和测试payload展示，⽅便知道是哪些⽅法找到xss的
漏洞详情
把请求包详情展示，包括发送包，因为有时候复现不出来，⼤概率是和请求头某些参数有关系。
⼀些成果
微软赏⾦经历
当时分布式都是⽤的国内机器，扫国外的很多都超时，所以就选了微软⼀家，国内访问速度还可以。当时没想很
多，就把微软⼏个官⽅域名加了进去，让它⾃⼰去爆破⾃⼰去扫，还是有不少的，重点是⼀个⽉全部⼤更新⼀次再
去扫，都有不⼀样的东⻄。
提交漏洞的记录：
找到微软的⽹站漏洞，提交后它会在每⽉在线服务致谢中展示（xss也算噢）
它也定义了有赏⾦的⽹站,⽹站在这⾥会得到赏⾦。（我发现了好⼏个微软主战的xss，但都没赏⾦..）
后⾯按部就班的提交给微软咯的，有⼀个域名我当时还不知道有赏⾦，就当普通的提交了，后⾯微软给我发来了赏
⾦计划通知。⼀个xss奖励了1200美⼑。
- www.office.com
- protection.office.com
- onedrive.live.com
- onedrive.com
- portal.azure.com
- manage.windowsazure.com
- azure.microsoft.com/en-us/blog
- portal.office.com
- outlook.office365.com
- outlook.office.com
- outlook.live.com
- outlook.com
- sharepoint.com
- lync.com
- officeapps.live.com
- www.yammer.com
- sway.com
- sway.office.com
- tasks.office.com
- teams.microsoft.com
- asm.skype.com
- msg.skype.com
- skyapi.live.net
- skype.com
- storage.live.com
- apis.live.net
- settings.live.net
- policies.live.net
- join.microsoft.com
Ps :后⾯我还想凭着xss冲⼀冲微软最有价值的研究者，因为平均提交三个漏洞就能进⼊了，我提交了6个，但是后
⾯发现它的机制是平均报告的volume或分数要超过同⽐的50%，xss分数少，可能就没过吧。。
为啥不做了
国内当时刷了⼀圈xss，但赏⾦都特别⼩，想刷国外，但就得把系统在国外vps部署⼀套，分布式的队列也得放到国
外，它连国内的队列基本都超时，也觉得xss漏洞还是挺⼩，还是 反射xss，没有rce来的有成就感。后⾯做别的事
情就忘了继续这个项⽬了。
现在还想做
还没有⽤这个技术刷国外的src是个遗憾，现在我也在构思⾃⼰的src平台，想把这个重新拾起，并且现在
crawlergo也开源了，我可以做更多事情，⽐如直接在浏览器层⾯注⼊js来检测dom-xss等等，把爬⾍的数据存下
来，可以像google语法那样搜⾃⼰想要的东⻄。现在也可以买⼀些性能好的服务器，不⽤像以前2H1G拼命优化算
法压榨⾃⼰的主机，连起个redis都要纠结好⼀会 - =