title:A Framework for Software Diversification with ISA Heterogeneity
author:Xiaoguang Wang and
SengMing Yeoh and
Robert Lyerly and
Pierre Olivier and
Sang-Hoon Kim and
Binoy Ravindran
A Framework for Software Diversiﬁcation with ISA Heterogeneity
Xiaoguang Wang
Virginia Tech
SengMing Yeoh
Virginia Tech
Sang-Hoon Kim
Ajou University
Robert Lyerly
Virginia Tech
Pierre Olivier
The University of Manchester
Binoy Ravindran
Virginia Tech
Abstract
Software diversiﬁcation is one of the most effective ways
to defeat memory corruption based attacks. Traditional soft-
ware diversiﬁcation such as code randomization techniques
diversiﬁes program memory layout and makes it difﬁcult for
attackers to pinpoint the precise location of a target vulnera-
bility. Some recent work in the architecture community use
diverse ISA conﬁgurations to defeat code injection or code
reuse attacks, showing that dynamically switching the ISA on
which a program executes is a promising direction for future
security systems. However, most of these work either remain
in a simulation stage or require extra efforts to write program.
In this paper, we propose HeterSec, a framework to secure
applications utilizing a heterogeneous ISA setup composed
of real world machines. HeterSec runs on top of commodity
x86_64 and ARM64 machines and gives the process the illu-
sion that it runs on a multi-ISA chip multiprocessor (CMP)
machine. With HeterSec, a process can dynamically select its
underlying ISA environment. Therefore, a protected process
would be capable of hiding the instruction set on which it exe-
cuted or detecting abnormal program behavior by comparing
execution results step-by-step from multiple ISA-diversiﬁed
instances. To demonstrate the effectiveness of such a soft-
ware framework, we implemented HeterSec on Linux and
showcased its deployability by running it on a pair of x86_64
and ARM64 servers, connected over InﬁniBand. We then
conducted two case studies with HeterSec. In the ﬁrst case,
we implemented a multi-ISA moving target defense (MTD)
system, which introduces uncertainty at the instruction set
level. In the second case, we implemented a multi-ISA-based
multi-version execution (MVX) system. The evaluation re-
sults show that HeterSec brings security beneﬁts through ISA
diversiﬁcation with a reasonable performance overhead.
1 Introduction
Software diversiﬁcation has proven to be a very effective
way to defeat software memory corruption attacks [42]. By
diversifying the target application memory layout, these diver-
siﬁcation techniques are capable of randomizing vulnerable
code locations [3, 8, 35, 36, 40, 63, 78, 81], detecting abnormal
program behaviors (i.e. attacks) [15, 38, 51, 57, 58, 72, 73, 83],
or hiding the secret data [39, 41]. The uncertainty brought
about by a diversiﬁed program effectively raises the bar for
launching a successful attack.
The “end of Moore’s Law” [21, 25] has forced chip ven-
dors to advance performance and energy efﬁciency bound-
aries elsewhere, in particular by designing radically different
hardware: multicore and manycore chips [11, 56, 61]; CPUs
with heterogeneous micro-architectural properties [34, 53],
partially overlapping ISAs [32], and various forms of accel-
erators and programmable hardware [22] that exploit hetero-
geneity. CPUs with heterogeneous-ISA cores – studied by the
academic research community [4, 44, 52, 69, 71] – are another
point in the architectural design space that are now available
as commodity hardware – e.g., Intel Skylake processor with in-
package FPGA [28,29] enables synthesizing RISC-V and x86
soft cores; AMD’s new generation x86 processor integrates
ARM cores; commodity smart NICs integrate ARM [24, 49],
MIPS64 [64], or Tile cores [48].
Recently, some research efforts explored using multiple,
heterogeneous-ISA CPUs to secure the application execu-
tion. For example, architecture researchers have proposed
systems that implement heterogeneous ISAs over one sin-
gle chip to achieve inter-ISA program state randomization
with higher entropy [70, 71, 76]. Another recent work lever-
ages the distributed, heterogeneous-ISA machines to detect
program vulnerability exploits [73]. Speciﬁcally, it simulta-
neously runs multiple instances of the same application on
heterogeneous-ISA machines to detect execution divergence
caused by eventual security attacks (a.k.a., multi-variant ex-
ecution [15]). However, programming on such a distributed,
multi-ISA environment is not easy, as it requires tremendous
efforts to synchronize program states over differential OS
kernels and instruction sets.
In this paper, we make the ﬁrst step towards applying
software-based diversiﬁcation concepts to a real multi-ISA en-
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    427
vironment, aiming to secure software execution with ISA het-
erogeneity. An ISA-diversiﬁed program can have additional
randomness in its code and data memory layout, register us-
age, instruction orders, and micro-architecture behaviors. Fur-
thermore, the diversiﬁed program variants could potentially
leverage some architecture-dependent security extensions,
making it even harder for attackers to bypass a single layer
of protection. To achieve this goal, we propose HeterSec, a
software framework that facilitates securing applications with
multiple ISAs. Unlike existing simulation-based approaches,
HeterSec bridges real heterogeneous-ISA machines. Heter-
Sec works at the operating system and process runtime level,
giving processes an illusion of running on a CMP machine
while possessing the ability to dynamically select the underly-
ing instruction set or cross check program state between two
ISA-diversiﬁed program instances.
To demonstrate its effectiveness, we have built two security
applications on top of HeterSec. The ﬁrst security applica-
tion enables the target program to randomly execute between
machines with different ISAs, implementing a moving target
defense (MTD) system [31]. The second security application
implements a multi-variant execution (MVX) system [15, 38].
A traditional MVX system runs multiple variants of an ap-
plication with non-overlapping address space [15, 83]. On
detecting abnormal runtime behaviors from the variants (e.g.,
unmatched system call return values, segfault), a MVX moni-
tor could deduce there is likely an ongoing exploit. Variants
generated from the ISA heterogeneity can automatically ob-
tain an additional level of diversity, making attackers even
harder to successfully launch an attack. Overall, we explored
the research space in securing software execution with diver-
siﬁed instruction sets. To that aim, we made the following
contributions:
• We built a software framework that can manage the pro-
cess execution over coupled multi-ISA machine nodes
for security purposes.
• We implemented two security applications on top of
such a framework, namely multi-ISA based MTD and
multi-ISA based MVX. The multi-ISA MTD randomly
changes the execution ISA, hiding the precise target hard-
ware features from attackers. The multi-ISA MVX uses
ISA diversity as an additional dimension to differentiate
program instances so that it is even harder for attackers
to bypass the violation check.
• We demonstrated the potential of such multi-ISA based
security systems with real-world evaluation; the results
show that the additional layer of ISA diversity increases
the cost for attackers, adding about 15% overhead for
Nginx and Redis server applications in real-world sce-
narios.
The rest of this paper is organized as follows: Section 2
provides some background information of multi-ISA systems.
We then describe the design, implementation and case stud-
ies of HeterSec in Section 3. The evaluation is presented in
Section 4. Afterwards, we summarize the related works in
Section 5 and conclude the paper in Section 6.
2 Background and Threat Model
In this section, we brieﬂy introduce the background on mov-
ing target defense and multi-variant execution; next we de-
scribe our motivation by summarizing recent multi-ISA sys-
tems and the security implications; we then proceed to deﬁne
the threat model at the end of this section.
2.1 MTD and MVX
Moving Target Defense (MTD) Most information systems
are built on relatively static platforms. Many defense tech-
niques also involve static integrity checks and introspection.
The static nature of such defense mechanisms gives attackers
the time to thoroughly study the target system and launch
the exploit [31]. The goal of MTD is to break the static na-
ture of the target systems, with deviation of existing defense
mechanisms and adaptations over time. MTD is an abstract
concept, leaving options open with regards to how it is im-
plemented. Thus realization of its design philosophy can be
demonstrated in many ways. For example, dynamic systems
or network conﬁguration [30, 31], dynamic application code
and data [13, 81], etc. In this paper, we demonstrate the secu-
rity beneﬁt and performance cost of running processes with
dynamic execution on multiple ISAs using HeterSec.
Multi-Variant eXecution (MVX) Another interesting way
to secure applications with multiple ISAs is through multi-
variant execution systems [15]. MVX is a software secu-
rity technique that runs multiple functionally equivalent pro-
grams (variants) with differing memory layouts. Some exam-
ples of such memory layout differences and deltas include
non-overlapping memory maps [38, 57, 83], reverse stack
growth [58], etc. By executing the diversiﬁed variants with
the same inputs, the MVX engine is capable of detecting
when an attack happens if one of the variants fails. That be-
ing said, existing MVX techniques might not be met with
as much success when attempting to detect attacks based on
relative addresses [23, 27, 73] or architecture level vulnerabil-
ities [37, 46, 82]. With HeterSec, we built a prototype to use
multiple ISAs as the source of variation between variants and
prove a multi-ISA MVX system is still capable of obtaining
reasonable performance despite the overheads involved.
2.2 Multi-ISA Systems and Security
Heterogeneous CPUs have been widely adopted in both
data centers and end devices. On mobile platforms, ARM
big.LITTLE technology uses two types of processor to
428    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
generally sufﬁcient abstraction to secure applications with
multi-ISA machines. Therefore, it may provide less extensi-
bility for developing multi-ISA based security applications
which require timely execution of ISA switches. HeterSec
instead focuses on building a generic framework to secure
applications with the multi-ISA architecture. To this end, Het-
erSec adopts a hybrid approach – it runs on top of the real
ISA-heterogeneous hardware; but the protected process has a
uniﬁed view of system resources as if it runs on a multi-ISA
CMP platform (Figure 1 (b)).
3 Design and Implementation
3.1 System overview
HeterSec aims to secure process execution by utilizing ISA
heterogeneity to, for example, randomize the process execu-
tion environment over heterogeneous machines. To achieve
this, HeterSec provides a per-process HeterSec execution en-
vironment. Speciﬁcally, it allows the protected process to be
executed on machines running with different ISAs as if it
were running on a single machine.
Figure 2 shows an overview of HeterSec with its new com-
ponents added to an existing computer system stack. The
components introduced by HeterSec include both the kernel
and the user-space runtime as shown in blue. Figure 2 also il-
lustrates two security application scenarios on top of HeterSec.
In the ﬁrst scenario, HeterSec switches the underlying ISA out
from under the protected application, increasing the entropy
of possible program states by masking the ISA switch and pre-
venting attackers from divining underlying hardware details.
In the second scenario, HeterSec launches multiple variants
of the program, monitors the variants’ execution states (e.g.,
return values of system calls, or segfault), and raises an alert
on any execution divergence caused by a potential attack. The
HeterSec kernel provides additional functionality to control
the target process at runtime, such as the process interception,
per process shared memory and fast inter-kernel messaging.
For example, the HeterSec distributed operating system ker-
nel maintains a synchronized page table for each protected
process. The page tables are synchronized during each ISA
switch, giving the HeterSec process a unique view of the
memory. Secure application scenarios can be implemented
as loadable kernel modules that interact with the target pro-
cess execution. Since HeterSec only intercepts and interacts
with the target process, it introduces nearly zero performance
overhead to other processes running on HeterSec 1.
HeterSec has a concept of master OS. The master OS is the
OS where the HeterSec process is initialized and launched.
Correspondingly, the OS that works as the counterpart to the
master OS is called the follower OS. The master HeterSec OS
exports the view of system resources to the HeterSec process
1Except for a few in-kernel checks to verify the process status, HeterSec
kernel does not bring extra code paths for non-HeterSec processes.
Figure 1: Comparison of multi-ISA security systems: (a) HIP-
StR with simulated multi-ISA chip [70, 71]; (b) HeterSec; (c)
DMON on completely decoupled machines [73].
achieve a dynamic balance between maximum power efﬁ-
ciency and maximum compute performance [1]. On data
center servers, heterogeneous ISA processors are being used
in different scenarios. For example, GPUs and TPUs are of-
ten equipped to accelerate machine learning workloads [33].
ARM based PCIe-pluggable SmartNIC cards are used to of-
ﬂoad network applications for improved throughput and secu-
rity [67, 68]. In academia, there have been several works ex-
ploring the beneﬁt and cost of building single-chip multi-ISA
systems [20,70,71]. DeVuyst et al. [20] ﬁrst demonstrated the
possibility of building a multi-ISA chip on a simulator, show-
ing the ability to migrate processes between different ISAs.
Venkat et al. [71] further expanded on the idea by proposing
that applications running on multiple ISA could have beneﬁts
in reducing power consumption and accelerating computation
speed, which they called ISA afﬁnity. Their ﬁndings proved
that an application can have lower power consumption (or
better performance) by being split into code phases. Based
on the ISA afﬁnity of each code phase, the application code
can be selectively executed across a heterogeneous ISA chip.
In terms of security, HIPStR explores using multiple ISAs to
increase code entropy, which makes return oriented program-
ming (ROP) attacks difﬁcult to launch [70]. The difference
between these works and our system is that they are all built
on top of CPU simulators (gem5 [9] and QEMU [55] as shown
in Figure 1 (a)). The simulation-based approach makes it hard
for security researchers to investigate the security beneﬁts of
using a multi-ISA architecture.
A recent concurrent work, DMON [73], uses distributed
heterogeneous-ISA machines to generate and host program
variants (a distributed version of N-Variant Execution [15]).
The variants run on completely separate machine nodes
and each variant communicates with the counterpart variant
through a lightweight UDP-based network protocol (Figure
1 (c)). Although lightweight network protocols can provide
low latency communication cost to exchange data between
distributed nodes, the use of ptrace interface to intercept
system calls brings extra context switches. For example, run-
ning Lighttpd web server on DMON will have 5.43x perfor-
mance overhead [73]. Furthermore, DMON does not provide
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    429
x86ARMSoftware distributed shared memoryLinux(x86)Linux(arm)x86ARMLinux(x86)Linux(arm)User spacecommunicationx86ARMHost OS(x86)QEMU(arm)simulator(a)(b)(c)gem5mand. To be compatible with existing software stacks, the
HeterSec distributed operating system is designed as sev-
eral kernel extensions and is built based on the Linux kernel.
There are three major components that facilitate HeterSec
processes running on heterogeneous ISA machines: the per-
process page table synchronization, secure applications, and