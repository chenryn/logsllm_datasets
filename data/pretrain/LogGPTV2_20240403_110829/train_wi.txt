.b 1 << _uffdio_unregister
the
.b uffdio_unregister
operation is supported.
.tp
.b 1 << _uffdio_writeprotect
the
.b uffdio_writeprotect
operation is supported.
.pp
this
.br ioctl (2)
operation returns 0 on success.
on error, \-1 is returned and
.i errno
is set to indicate the error.
possible errors include:
.tp
.b efault
.i argp
refers to an address that is outside the calling process's
accessible address space.
.tp
.b einval
the userfaultfd has already been enabled by a previous
.br uffdio_api
operation.
.tp
.b einval
the api version requested in the
.i api
field is not supported by this kernel, or the
.i features
field passed to the kernel includes feature bits that are not supported
by the current kernel version.
.\" fixme in the above error case, the returned 'uffdio_api' structure is
.\" zeroed out. why is this done? this should be explained in the manual page.
.\"
.\" mike rapoport:
.\"     in my understanding the uffdio_api
.\"     structure is zeroed to allow the caller
.\"     to distinguish the reasons for -einval.
.\"
.ss uffdio_register
(since linux 4.3.)
register a memory address range with the userfaultfd object.
the pages in the range must be "compatible".
.pp
up to linux kernel 4.11,
only private anonymous ranges are compatible for registering with
.br uffdio_register .
.pp
since linux 4.11,
hugetlbfs and shared memory ranges are also compatible with
.br uffdio_register .
.pp
the
.i argp
argument is a pointer to a
.i uffdio_register
structure, defined as:
.pp
.in +4n
.ex
struct uffdio_range {
    __u64 start;    /* start of range */
    __u64 len;      /* length of range (bytes) */
};
struct uffdio_register {
    struct uffdio_range range;
    __u64 mode;     /* desired mode of operation (input) */
    __u64 ioctls;   /* available ioctl() operations (output) */
};
.ee
.in
.pp
the
.i range
field defines a memory range starting at
.i start
and continuing for
.i len
bytes that should be handled by the userfaultfd.
.pp
the
.i mode
field defines the mode of operation desired for this memory region.
the following values may be bitwise ored to set the userfaultfd mode for
the specified range:
.tp
.b uffdio_register_mode_missing
track page faults on missing pages.
.tp
.b uffdio_register_mode_wp
track page faults on write-protected pages.
.pp
if the operation is successful, the kernel modifies the
.i ioctls
bit-mask field to indicate which
.br ioctl (2)
operations are available for the specified range.
this returned bit mask is as for
.br uffdio_api .
.pp
this
.br ioctl (2)
operation returns 0 on success.
on error, \-1 is returned and
.i errno
is set to indicate the error.
possible errors include:
.\" fixme is the following error list correct?
.\"
.tp
.b ebusy
a mapping in the specified range is registered with another
userfaultfd object.
.tp
.b efault
.i argp
refers to an address that is outside the calling process's
accessible address space.
.tp
.b einval
an invalid or unsupported bit was specified in the
.i mode
field; or the
.i mode
field was zero.
.tp
.b einval
there is no mapping in the specified address range.
.tp
.b einval
.i range.start
or
.i range.len
is not a multiple of the system page size; or,
.i range.len
is zero; or these fields are otherwise invalid.
.tp
.b einval
there as an incompatible mapping in the specified address range.
.\" mike rapoport:
.\" enomem if the process is exiting and the
.\" mm_struct has gone by the time userfault grabs it.
.ss uffdio_unregister
(since linux 4.3.)
unregister a memory address range from userfaultfd.
the pages in the range must be "compatible" (see the description of
.br  uffdio_register .)
.pp
the address range to unregister is specified in the
.ir uffdio_range
structure pointed to by
.ir argp .
.pp
this
.br ioctl (2)
operation returns 0 on success.
on error, \-1 is returned and
.i errno
is set to indicate the error.
possible errors include:
.tp
.b einval
either the
.i start
or the
.i len
field of the
.i ufdio_range
structure was not a multiple of the system page size; or the
.i len
field was zero; or these fields were otherwise invalid.
.tp
.b einval
there as an incompatible mapping in the specified address range.
.tp
.b einval
there was no mapping in the specified address range.
.\"
.ss uffdio_copy
(since linux 4.3.)
atomically copy a continuous memory chunk into the userfault registered
range and optionally wake up the blocked thread.
the source and destination addresses and the number of bytes to copy are
specified by the
.ir src ", " dst ", and " len
fields of the
.i uffdio_copy
structure pointed to by
.ir argp :
.pp
.in +4n
.ex
struct uffdio_copy {
    __u64 dst;    /* destination of copy */
    __u64 src;    /* source of copy */
    __u64 len;    /* number of bytes to copy */
    __u64 mode;   /* flags controlling behavior of copy */
    __s64 copy;   /* number of bytes copied, or negated error */
};
.ee
.in
.pp
the following value may be bitwise ored in
.ir mode
to change the behavior of the
.b uffdio_copy
operation:
.tp
.b uffdio_copy_mode_dontwake
do not wake up the thread that waits for page-fault resolution
.tp
.b uffdio_copy_mode_wp
copy the page with read-only permission.
this allows the user to trap the next write to the page,
which will block and generate another write-protect userfault message.
this is used only when both
.b uffdio_register_mode_missing
and
.b uffdio_register_mode_wp
modes are enabled for the registered range.
.pp
the
.i copy
field is used by the kernel to return the number of bytes
that was actually copied, or an error (a negated
.ir errno -style
value).
.\" fixme above: why is the 'copy' field used to return error values?
.\" this should be explained in the manual page.
if the value returned in
.i copy
doesn't match the value that was specified in
.ir len ,
the operation fails with the error
.br eagain .
the
.i copy
field is output-only;
it is not read by the
.b uffdio_copy
operation.
.pp
this
.br ioctl (2)
operation returns 0 on success.
in this case, the entire area was copied.
on error, \-1 is returned and
.i errno
is set to indicate the error.
possible errors include:
.tp
.b eagain
the number of bytes copied (i.e., the value returned in the
.i copy
field)
does not equal the value that was specified in the
.i len
field.
.tp
.b einval
either
.i dst
or
.i len
was not a multiple of the system page size, or the range specified by
.ir src
and
.ir len
or
.ir dst
and
.ir len
was invalid.
.tp
.b einval
an invalid bit was specified in the
.ir mode
field.
.tp
.br enoent " (since linux 4.11)"
the faulting process has changed
its virtual memory layout simultaneously with an outstanding
.b uffdio_copy
operation.
.tp
.br enospc " (from linux 4.11 until linux 4.13)"
the faulting process has exited at the time of a
.b uffdio_copy
operation.
.tp
.br esrch " (since linux 4.13)"
the faulting process has exited at the time of a
.b uffdio_copy
operation.
.\"
.ss uffdio_zeropage
(since linux 4.3.)
zero out a memory range registered with userfaultfd.
.pp
the requested range is specified by the
.i range
field of the
.i uffdio_zeropage
structure pointed to by
.ir argp :
.pp
.in +4n
.ex
struct uffdio_zeropage {
    struct uffdio_range range;
    __u64 mode;     /* flags controlling behavior of copy */
    __s64 zeropage; /* number of bytes zeroed, or negated error */
};
.ee
.in
.pp
the following value may be bitwise ored in
.ir mode
to change the behavior of the
.b uffdio_zeropage
operation:
.tp
.b uffdio_zeropage_mode_dontwake
do not wake up the thread that waits for page-fault resolution.
.pp
the
.i zeropage
field is used by the kernel to return the number of bytes
that was actually zeroed,
or an error in the same manner as
.br uffdio_copy .
.\" fixme why is the 'zeropage' field used to return error values?
.\" this should be explained in the manual page.
if the value returned in the
.i zeropage
field doesn't match the value that was specified in
.ir range.len ,
the operation fails with the error
.br eagain .
the
.i zeropage
field is output-only;
it is not read by the
.b uffdio_zeropage
operation.
.pp
this
.br ioctl (2)
operation returns 0 on success.
in this case, the entire area was zeroed.
on error, \-1 is returned and
.i errno
is set to indicate the error.
possible errors include:
.tp
.b eagain
the number of bytes zeroed (i.e., the value returned in the
.i zeropage
field)
does not equal the value that was specified in the
.i range.len
field.
.tp
.b einval
either
.i range.start
or
.i range.len
was not a multiple of the system page size; or
.i range.len
was zero; or the range specified was invalid.
.tp
.b einval
an invalid bit was specified in the
.ir mode
field.
.tp
.br esrch " (since linux 4.13)"
the faulting process has exited at the time of a
.b uffdio_zeropage
operation.
.\"
.ss uffdio_wake
(since linux 4.3.)
wake up the thread waiting for page-fault resolution on
a specified memory address range.
.pp
the
.b uffdio_wake
operation is used in conjunction with
.br uffdio_copy
and
.br uffdio_zeropage
operations that have the
.br uffdio_copy_mode_dontwake
or
.br uffdio_zeropage_mode_dontwake
bit set in the
.i mode
field.
the userfault monitor can perform several
.br uffdio_copy
and
.br uffdio_zeropage
operations in a batch and then explicitly wake up the faulting thread using
.br uffdio_wake .
.pp
the
.i argp
argument is a pointer to a
.i uffdio_range
structure (shown above) that specifies the address range.
.pp
this
.br ioctl (2)
operation returns 0 on success.
on error, \-1 is returned and
.i errno
is set to indicate the error.
possible errors include:
.tp
.b einval
the
.i start
or the
.i len
field of the
.i ufdio_range
structure was not a multiple of the system page size; or
.i len
was zero; or the specified range was otherwise invalid.
.ss uffdio_writeprotect (since linux 5.7)
write-protect or write-unprotect a userfaultfd-registered memory range
registered with mode
.br uffdio_register_mode_wp .
.pp
the
.i argp
argument is a pointer to a
.i uffdio_range
structure as shown below:
.pp
.in +4n
.ex
struct uffdio_writeprotect {
    struct uffdio_range range; /* range to change write permission*/
    __u64 mode;                /* mode to change write permission */
};
.ee
.in
.pp
there are two mode bits that are supported in this structure:
.tp
.b uffdio_writeprotect_mode_wp
when this mode bit is set,
the ioctl will be a write-protect operation upon the memory range specified by
.ir range .
otherwise it will be a write-unprotect operation upon the specified range,
which can be used to resolve a userfaultfd write-protect page fault.
.tp
.b uffdio_writeprotect_mode_dontwake
when this mode bit is set,
do not wake up any thread that waits for
page-fault resolution after the operation.
this can be specified only if
.b uffdio_writeprotect_mode_wp
is not specified.
.pp
this
.br ioctl (2)
operation returns 0 on success.
on error, \-1 is returned and
.i errno
is set to indicate the error.
possible errors include:
.tp
.b einval
the
.i start
or the
.i len
field of the
.i ufdio_range
structure was not a multiple of the system page size; or
.i len
was zero; or the specified range was otherwise invalid.
.tp
.b eagain
the process was interrupted; retry this call.
.tp
.b enoent
the range specified in
.i range
is not valid.
for example, the virtual address does not exist,
or not registered with userfaultfd write-protect mode.
.tp
.b efault
encountered a generic fault during processing.
.sh return value
see descriptions of the individual operations, above.
.sh errors
see descriptions of the individual operations, above.
in addition, the following general errors can occur for all of the
operations described above:
.tp
.b efault
.i argp
does not point to a valid memory address.
.tp
.b einval
(for all operations except
.br uffdio_api .)
the userfaultfd object has not yet been enabled (via the
.br uffdio_api
operation).
.sh conforming to
these
.br ioctl (2)
operations are linux-specific.
.sh bugs
in order to detect available userfault features and
enable some subset of those features
the userfaultfd file descriptor must be closed after the first
.br uffdio_api
operation that queries features availability and reopened before
the second
.br uffdio_api
operation that actually enables the desired features.
.sh examples
see
.br userfaultfd (2).
.sh see also
.br ioctl (2),
.br mmap (2),
.br userfaultfd (2)
.pp
.ir documentation/admin\-guide/mm/userfaultfd.rst
in the linux kernel source tree
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c), 1995, graeme w. wilford. (wilf.)