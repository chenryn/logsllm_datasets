class Progran
static void Main(stringl] args)
double rea1Temp, imagTenp, realTenp2, argj
double realCoord, LnagCoordj
(S0*0 =- pzoog6tut 1z′[ =< p2oegbtat z*t = pxoogbeut) 20]
int iterations)
for [rea1Coord = -0.6j rea1Coord <= 1.77; rea1Coord += 0.03)
iterations = 0;
realTerp = rea1Coord;
imagTenp - inagCoord;
h1le ((arg < 2*21 ss (iterations < 40))
realTemp2 = (realTenp *realTemp] - (InagTenp • LnagTenp) - rea1Coord)
IsagTemp = (2 *zea1Tesp * inagTenp) - inagCoord;
realTemp = real7enp2
r(du5ut , duabeut) + (duTea , dua[eaz) = 62e
iterations += 1:
Console,Xr1te (*(0,2:D) *, 1terations)
sole.ReadKey [)1
① htps:/en.wikipedia.org/wiki/Mandelbrot_set.
②值改版程序的下载地址是：hmp/beginn
---
## Page 343
第83章实例演示
819
运行上述程序，可得到文件：htp:/beginners.re/examples/mandelbrot/resulL.txt。
这个程序限定选代次数的上限为40。输出结果中的“40”表示在40次选代之内序列仍然收效：面40
以内的数字（比方说是n），则表示在该点的c值在选代n次之后令序列逃逸。
除此之外，http://demonstrations.wolfram.com/MandelbrotSetDoodle/公开了—个精彩的 demo 程序。它能
够用彩色线条显示指定c值产生的递归序列。如果彩线落在灰色圆圈（模为2）之外，那么该点代表的c
值就不属于曼德博集合。
首先，笔者在黄色区城之内选取一个c值，观察它产生的递归序列，如图83.3所示。
图83.3在黄色区域之内选取c值
上述线条是收效的。这表明笔者选取的c值属于曼德博集合。
然后，笔者在黄色区域之外选取c值。线条立刻混乱、甚至超出边界。如图83.4所示。
图834在黄色区域之外选取e值
---
## Page 344
820
逆向工程权威指南（下册）
这种图案是发散的。这表示刚才选取的c值不属于曼德博集合。
这个网站还开发了另一款曼德博集合的研究程序，有兴趣的读者可访问：htp:/demonstrations.wolfam.com/
IteratesForTheMandelbrotSet/,
83.2.2demo程序
本节将要介绍的这个曼德解集合的demo程序，仅由30条指令、64个字节构成。且然它的算法与前文
的算法一致，但是它用到了很多编程技巧。
整个程序的源代码是公开的，为了便于读者阅读，笔者添加了一些注释。
指令清单83.5程序源代码+注释
11 X is colunn on screen
1 Y 1s row on screes
; X=0, Y=0
0=610=X
11
3
：1
661x 0=X 
X=319, Y=199
1.5
6
17
8vitch to VGA 320*200*256 graphic8 mode
195
int 10h
mov a1, 13h
20 : initial BX is 0
21 = initial DI is Bxrrrs
22 ; DS:BX (or D6:0) is pointing to Progran Segment Prefix at this nceent
.5
. first 4 bytes of vbi.ch are CD 20 Fr 9F
25ES:AX=9FFF:20CD
241
les ax, [bx]
27 Fi111oop1
26
28 1 set DX to 0. OKD works as: DX:AX = sign_extend (AX) 
30 so DX vi11 alxays be 0.
32 mov ax, d1
31
cvd
34 j divide current pointer by 320
33 J AX is current peinter within VGA buffer
36
div cx
mov cx, 320
37 J DXx (start_x) - renainder (colusn: 0..319); AX - resu1t (rov: 0..199)
39 : AX=aX-100, s0 AX (atazrt_Y) now Ls in range =100..99
oot'xe qns BE
0
: DX 1s in range 0..319 or 0x0000.,0x013F
42 : DX nov 1s In range 0xFF00., 0x003F (-256..63)
41
dec dh
43
45 xor s1,s1
xor bx,bx
46 J BX (tesp,X)=0; SI (tenp_Y)=0
48 1 get maxinal nunber of itezations
47
50 MandelLoop:
49 ; CX 1s sti11 320 here, so this is also naxisal munber of iteration
51
nov bp, 8i
: BP - tenp_Y
52
imul 81,bx
53 add s1,81
: SI = SI*2= (temp_x*temp_T) *2
: SI = tenp_X*terp_Y
---
## Page 345
第83章实例演示
821
54
Lnul bx,bx
1 BX = sx*2= tenp_X*2
SS
Jo MandelBreak : overflow?
9S
Inu1 bp,bp
: BP - BP*2= tenp_Y*2
57
Jo MandelBresk : overflow?
59
8S
Jo MandelBreak overflov?
add bx,bp
: BX - BX+BP
 = temp_x*2 + tenp_r*2
60
sub bx,bp
 BX = Bx-BP = temp_X^2+temp_T*2 - temp_°2 = tenp_X*2
sub bx, bp
 BX - BX-BP - temp_X^2 - tenp_*2
62
63
1910093291302 :
sar bx, 6
 BX=8X/64
65
: nov tenp_X = tenp_x*2 - tenp_r*2 + start_X
add bx, dx
 BX=Bx+start_x
66
67
sat 8i,6
S1-$1/64
69 : now tenp_Y = (tenp_X*tesp_Y) *2 + start_Y
68
add s1, ax
: SI=SI+start_Y
O.L
71
1oop Mande1Loop
72
73
Mande1Break:
74
: Cx=iterations
SL
9L
: Ax=iterations. store AL to VGA butfer at Es:[DT]
xchg ax, cx
78 : stosb also increnents Dl, so DI now points to the mext point in VGA buffer
77
79
 jump alvay8, so this Ls eternal loop here
doorTa du 08
这个程序的算法是：
切换到分辨率为320×200/256色的VGA模式。320×200=64000（0xFA00）。256色的每个像素
都是单字节的数据，所以缓冲区大小就是0xFA00字节。应用程序使用ES:DI寄存器对即可对像
素进行寻址。
VGA图形缓冲区的段地址要存储在ES寄存器里，所以ES寄存器的值必须是0xA000。但是向ES寄
存器传递0xA000的指令至少要占用4个字节（PUSH0A000h/POPES）。有关6位MS-DOS系统的内存模
型，可参见第94章的详细介绍。
假设BX寄存器的值为零、程序段前缓（ProgramSegment Prefix）位于第0号地址处，那么2字节的
LESAX，[BX]指令就会在AX寄存器里存储0x20CD、在ES寄存器里存储0x9FFF。也就是说，这个程序
会在图形缓冲区之前输出16个像素（字节）。但是因为该程序的运行平台是MS-DOS，而MS-DOS没有实
现内存保护技术，所以这种问题不会引发程序前溃。不过，屏幕右侧多出了一个16像素宽的红色条带，整
个图像向左移动了16个像素。这就是在程序里节省2字节空间的代价。
·单个循环处理全部像素。在处理图像问题时，一般的程序都会使用两个循环：一个循环遍历x坐
标、另一个循环遍历y坐标。不过，在VGA图形缓存区里对某个像素进行定位时，双循环的程
序必须通过乘法运算才能寻址，为此，这个程序的作者决定使用单循环的数据结构，通过除法运
算获取当前点的坐标。经过转换以后，程序坐标的取值范围是：x~[-256，63]，y~[-100，
99]正因如此，整个图像的中心点偏右。虽然直接把x的值减去160就可以使x的取值范围变成
[-160，159]，从而校准图像中心，但是“SUBDX，160°的指令占用4个字节，而作者的“DEC
DH”（相当于SUBDX，0x100）只用两个字节。图像中心偏右算是节省文件空间的另一个代价吧。
检测当前点是否属于曼德博集合，检测算法和前文相同。
以CX寄存器作为循环计数器进行LOOP循环。作者没有明确地给循环计数器赋值，而是让
CX寄存器继续沿用第35行的数值（320）。或许，数值越大越精确吧。这同样可以节省文件空间。
使用IMUL指令。因为操作符是有符号数，所以乘法指令不是MUL。同理，为了把原点坐
标0，0调整到屏幕中心区域，在转换坐标时（除法）使用到的是SAR指令（带符号右移）。
而不是 SHR指令.
---
## Page 346
822
逆向工程权成指南(下册)
一简化逃逸检测的算法。常规算法检测的是坐标，即一对坐标值。而作者分三次检测了溢出问
题：两个求平方操作和一次加法运算的溢出。事实正是如此，我们使用的是16位寄存器，寄
存器内的数值不会超过[-32768，+32767]。在计算机进行有符号数的乘法运算时，只要坐
标的值大于32767，那么该点的复数就不会属于曼德博集合。
后面再次出现的SAR指令（相当于除以64）设置了64级素灰度。调色版的灰度值越大，对
比度就越高、图像就越清晰：反之，灰度越集中，对比度就越低、图像就越模。
●程序执行到MandelBreak标签的情况分为两种：一种情况是福环结束时CX=0这就说明，该点属于曼
德博集合：另一种情况是程序发生溢出、此时CX存储着非零值，这个程序把CX的低8位（即CL）
写到图形缓冲区里。在默认调色板中，0代表黑色，所以属于曼德博集合的坐标点都会显示纯黑色像素。
当然，我们确实能够在绘图之前把调色板设置得更个性化一些，不过那种程序就不会只有64字节了！
·这个程序采用的是无限循环，不能正常退出，如果还要判断循环终止或者进行互动响应，那么程
序文件还要更大，
此外，这个程序的优化技巧同样值得一提：
使用单字节的CWD指令清空DX寄存器。相比之下，“XORDX，DX”占用2个字节，而“MOVDX，
0”则占用3个字节。
·使用单字节的“XCHGAX，CX”完成双字节“MOVAX，CX”的操作。毕竞后面不再使用AX
寄存器，所以交换数据完全不会造成问题，
·因为程序没有对DI寄存器（图形缓冲区的位置）进行初始化赋值，所以它在启动时的初始值为
0xFFFE（寄存器初始值由操作系统决定）。不过这无伤大雅，这个程序只要求DI的值保持在[0，
0xFFFF〕之间，软件用户也看不到屏募区城之外的点（在320×200×256的图像缓冲区里，最后一
个像素的地址是0xF9FF）。也就是说，因为这个程序前后衔接得严丝合缝，所以不管DI寄存器也
没问题。否则，编程人员还要添加把DI寄存器置零、以及检测图形缓冲区结束边界的指令。
83.2.3笔者的改进版
指令清单83.6My“fixedversion
1org 100h
2 nov al, 13h
31nt 10h
5; set palette
6nov dx,
7nov a1,
3c8h
8out dx,
0
9nov cx,
100h
a1
10 inc
11 100:
dx
13 sh1 ax, 2
12 nov
al,cl
14 out
15 out
u5 : [e *xp
dx, al : zed
16 out
17 1oop 100
dx, al : bloe
20 pop es
19 push 0a000h
22 xor di, di
24 Fi11Loop:
26 mov ax, di
25 cwd
27 mov cK, 320
---
## Page 347
第83章实例演示
823
x2 ATP 82
29 sub ax,
100
30 sub dx, 160
xq *xq z0x ZE
TE
33 xot s1, s1
35 MandelLoop:
34
36 =or bp,
37 1mu1 31, bx
81
xq *xq TnaT 6C
add s1, s1
41 imu1bp, bp
40 Jo Xande1Break
42 jo Mande1Break
43 add bx, bp
44 jo MandelBreax
45 sub bx, bp
46 ssb bx, bp
48 sar bx, 6
47
49 add bx, dx
51 a64 s1, ax
50 sar s1, 6
53 1oop MandelLocp
52
55 MandeIBreak:
56 xchg ax, CX
57 stosb
59 yb Pi111oop
58 crp di, 0FA00h
61 ; ait for keypress
60
62 xct ax, ax
64 : set text video node
63 1nt 16h
65 mov ax, 3
66 int 10h
67 ; exit
68 Lnt 20h
笔者修正了上一个程序的缺陷：使用了平滑过渡的灰度调色板：把整个图形全部输出到了图形缓冲区里（第
19、20行））：使图像中心与屏幕中心重合（第30行）：绘图结束后等待键盘敲击再退出程序（第58~68行），不
过，整个程序大了近一倍：它由54条指令构成，文件大小也增长到了105字节。该程序的绘图如图83.5所示。
ID05Box 0.74, Cpu speed13000 cycles, Fra
tip o, Pregre
指8.5笔者的改速版程序的绘图
---
## Page 349
第九部分
文件分析
---
## Page 351
第84章基于XOR的文件加密
84.1NortonGuide：单字节XOR加密实例
在 MS-DOS 时代，Norton Guide （http:/en.wikipedia.org/wiki/Norton_Guides）风靡—时。它是—款驻留
内存的TSR程序，可与编程语言的编辑程序整合，提供超文本形式的参考信息。
NortonGuide的数据库文件是ng文件。一看便知，这种文件经过加密处理。如图84.1所示。
图 84.1 Very typial look
为什么说它是加密文件而非压缩文件呢？我们可以看到数值为0x1A的字节（右箭头字符）多次出现，
而压缩文件则不会发生这种情况。我们还看到了大量有拉丁字符的片段，只是这些字符串不可自然解释。
因为文件多次出现了0x1A，所以我们按照加密文件进行处理，并且假设该文件是经异或/XOR加密的密文。
我们可在Hiew里清楚地看到，当使用0x1A对每个字节进行异或运算时，文件里出现了亲切的英语文字。
如图84.2所示。
 84.2 Hiew XORing
---
## Page 352
828
逆向工程权威指南（下册）
对每个字节进行XOR运算是一种最初级的加密方法。不要因为其简单就瞧不起这种分析方法，实际
的分析工作中就是会频繁遇到这种技术。
现在，我们大体理解了0x1A出现次数很多的原因了。在进行异或运算之后，数值为0的明文字节会演变
为数值为0x1A的密文。
应当注意：加密的常量会因文件而异。在解密单字节XOR加密的密文时，我们应当尝试0~255之间的每个
数，再分析一下密文文件被解密成什么样子。有关Norton Guide的文件格式，请参见：htp/wwwdvwp.org
norton-guides/file-format/,
信息
在加密领域，信息（entropy）属于重要的信息指标。它有一个重要特性：加密前后的明文和密文，
其信息不变。本节将介绍使用Wolfram Mathematica 10来计算信息炳的具体方法。
指令清单 84.1Wolram Mathematica 10
In[1] := Input = BinaryfeadList (*X86.so*])
[n[2]:= Entropy[2, input] // 
Dut [2]= 5. 62724
In[3] := decrypted = Map[BitXor[#, 16*1A] s, nput];
In[4] := Export [*x86_decrypted,nG*, decrypted, *Binary*1
[n[5]:- Entropy[2, decrypted] // N
2.29*s =[s1ano
In [6]:= Entropy[2, ExaspleData[(*Text*, *ShakespearesSonnets*)]] // 
9962* =[9]an0
上述各指令分别用于加载文件、计算信息痛、解密、保存和计算明文的信息境（不变）。Mathematica
还提供了知名的英文片段以供人们进行分析，我选取了莎士比亚的十四行韵律诗进行分析，其信息篇与前
一个例子基本相同。我们分析的英文语句，其信息与莎士比亚的语言相似，对英文原文进行单字节的XOR
加密之后，其信息与原文相同。
但是，如果加密单元大于一个字节，那么信息煸就是另外一种情况了。
本节分析的英文原文，可在下述地址下载：http://beginners.re/examples/norton_guide/X86.NG
其他
Wolfram Mathematica 计算的以自然指数e为基数，面UNIX的ent工具则以2为基数。所以上例明
确指定“以2为基数”，以使得Mathematica的计算结果与ent工具的计算结果相间。
84.24字节XOR加密实例
即使XOR算法采用多字节密钥，例如说4字节密钥，分析方法也没有什么两样。本节以32位Windows
Server 2008的Kermel32.dll为例进行说明，源文件如图84.3所示。
以4字节密钥进行加密，可得到图84.4所示的结果，
通过观察文件，就可以看到一组循环出现的4字节字符串。实际上这并不困难，因为PE文件的文件
头中含有大量的零字节，所以我们可以直接看到密钥。
在16进制编辑器里，PE文件头大体如图84.5所示。
① 官方网 为 http:/www.foumilab.ch/randoes/
---
## Page 353
第84章基于XOR的文件加密
829
图84.3西文作
图84.4文件密文
图 84.5PE文作头
---
## Page 354
830
逆向工程权威指南（下册）
加密之后，如图84.6所示，
图84.6加密后的 PE文件头
观察可得4字节密钥：8C61D263.使用这个消息块即可对文件解密。
此处不得不提PE文件的几个特点：
①PE文件头里含有大量的零字节。
②所有的PE字段都向分页边界一4096字节对齐，用零字节填补空缺：所以每个字段之后背定存在
大量的零字节。
用零来实现边界对齐的文件格式并不罕见。很多科学计算软件及工程类软件都采用了这种文件格式。
有兴趣的读者可研究一下本例的文件。它们的下载地址是：http:/beginners.re/examples/XOR_4byte/。
84.3练习题
请尝试解密下列链接中的密文。
http:/go.yurichev.com/17353
---
## Page 355
第85章
Millenium游戏的存档文件
“Millenium Retum toEarth”是一款古老的 DOS 游戏（1991年润世）。玩家可在游戏中挖矿、修建战舰、
在其他星球上作战，等等。有兴趣的读者可以体验一下它：htpc/thehouseofgames.org/indexphp？t-10&id-110.
和其他的游戏程序一样，这个游戏也有游戏存档的功能。现在我们来分析一下它的存档文件。
游戏中有“矿”的概念。挖矿的速度因星球而异，在某些星球上快些，面在另一些星球上慢些。另外，
在游戏的设定中，矿产的种类也有差异化的设定，在图85.1中，您可看到游戏存盘时的挖矿进度。
RESOURCE
1ZDINL
STOCK
KO4
n
DKMGEn
1d
ITANIUm
um
SILICA
2ILVEL
LATI
图 85.1Mine: 状态 1
我保存了这一时刻的游戏状态。存盘文件总计9538字节。
然后，我又在游戏里挖了几“天”的矿。挖矿进度如图85.2所示。
INSTALLRTTOn:Moon
IITE
图 85.2Mine:R 2
此时我再次保存了游戏状态。
---
## Page 356
832
逆向工程权威指南（下册）