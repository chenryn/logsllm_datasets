if test -f /sf/app/apache_portal/bin/envvars; then
  . /sf/app/apache_portal/bin/envvars
fi
#
# a command that outputs a formatted text version of the HTML at the
# url given on the command line.  Designed for lynx, however other
# programs may work.
LYNX="lynx -dump"
#
# the URL to your server's mod_status status page.  If you do not
# have one, then status and fullstatus will not work.
STATUSURL="http://localhost:80/server-status"
#
# Set this variable to a command that increases the maximum
# number of file descriptors allowed per child process. This is
# critical for configurations that use many file descriptors,
# such as mass vhosting, or a multithreaded server.
ULIMIT_MAX_FILES="ulimit -S -n `ulimit -H -n`"
# --------------------                              --------------------
# ||||||||||||||||||||   END CONFIGURATION SECTION  ||||||||||||||||||||
# Set the maximum number of file descriptors allowed per child process.
if [ "x$ULIMIT_MAX_FILES" != "x" ] ; then
    $ULIMIT_MAX_FILES
fi
ERROR=0
if [ "x$ARGV" = "x" ] ; then
    ARGV="-h"
fi
case $ACMD in
start|stop|restart|graceful|graceful-stop)
    # add for sp module, same as sp package
    /sf/app/apache_portal/conf/modify_httpdconf.sh; DSTRS=`/sf/app/apache_portal/conf/get_sp_module_macro.sh 2>/dev/null`; if [ $? -ne 0 ]; then exit 1; fi
    $HTTPD -k $ARGV $DSTRS
    ERROR=$?
    ;;
startssl|sslstart|start-SSL)
    echo The startssl option is no longer supported.
    echo Please edit httpd.conf to include the SSL configuration settings
    echo and then use "apachectl start".
    ERROR=2
    ;;
configtest)
    $HTTPD -t
    ERROR=$?
    ;;
status)
    $LYNX $STATUSURL | awk ' /process$/ { print; exit } { print } '
    ;;
fullstatus)
    $LYNX $STATUSURL
    ;;
*)
    $HTTPD "$@"
    ERROR=$?
esac
exit $ERROR
 HTTPD='/sf/app/apache_portal/bin/httpd'
start|stop|restart|graceful|graceful-stop)
    # add for sp module, same as sp package
    /sf/app/apache_portal/conf/modify_httpdconf.sh; DSTRS=`/sf/app/apache_portal/conf/get_sp_module_macro.sh 2>/dev/null`; if [ $? -ne 0 ]; then exit 1; fi
    $HTTPD -k $ARGV $DSTRS
    ERROR=$?
    ;;
 modify_httpdconf.sh 
*)
    $HTTPD "$@"
    ERROR=$?
 /sf/app/apache_portal/bin/apachectl start  modify_httpdconf.sh
 apachectl -h 
​
 -V 
​
 -D SERVER_CONFIG_FILE="/config/etc/sinfor/ssl/httpd.conf"
 modify_httpdconf.sh 
[root@sslvpn bin]# cat ../conf/modify_httpdconf.sh
#!/bin/bash
#
# auth: yj
#
ppid=$$
ppid_str=`cat /proc/${ppid}/cmdline`
logfile="/hislog/error_log"
mylog()
{
    echo "`date` [modifyhttpd-$ppid] $@" >> "${logfile}"
}
function loglimit()
{
    MAXKSIZE=1024
    let MINKSIZE=${MAXKSIZE}/2
    if [ ${#} -ne 1 ]; then
        return 2;
    fi
    if ! test -e ${1} ; then
        return 1;
    fi
    CURKSIZE=`ls -l ${1} | awk '{print $5}'`
    let CURKSIZE/=1024
    if [ ${CURKSIZE} -gt ${MAXKSIZE} ]; then
        let SKIPKSIZE=${CURKSIZE}-${MINKSIZE}
        dd if=${1} of=/tmp/loglimit_errlog bs=1024 count=8192 skip=${SKIPKSIZE}
        echo ">>>>trunc${1}
        cat /tmp/loglimit_errlog >>${1}
        rm -f /tmp/loglimit_errlog
    fi
}
is_dev_beyond_m75()
{
    if [ -f /usr/lib/systemd/system/sangfor-svpn.service ];
    then
        return 0
    else
        return 1
    fi
}
is_cloud()
{
    cat /app/appversion | grep -q "Cloud1.0\|Cloud1.0R1\|Cloud1.1\|Cloud1.2"
    if [ $? -eq 0 ]; then
        return 0
    else
        return 1
    fi
}
# 
initenv()
{
    PRE_STR="D_"
    if is_dev_beyond_m75; then
        HTTPD_CONF_TEMP="/config/default_cfg/httpd.conf.temp"
        APACHE_INSTALL_DIR="/sf/app/apache_portal"
        APACHECTL_FILE="/sf/app/apache_portal/bin/apachectl"
        BUILD_CONF_FILE="/sf/sbin/buildconf"
    elif is_cloud; then
        HTTPD_CONF_TEMP="/app/usr/local/apache2/conf/httpd.conf.temp"
        APACHE_INSTALL_DIR="/app/usr/local/apache2"
        APACHECTL_FILE="/app/usr/local/apache2/bin/apachectl"
        BUILD_CONF_FILE="/app/usr/local/apache2/conf/buildconf"
    else
        HTTPD_CONF_TEMP="/app/usr/local/apache2/conf/httpd.conf.temp"
        APACHE_INSTALL_DIR="/app/usr/local/apache2"
        APACHECTL_FILE="/app/usr/local/apache2/bin/apachectl"
        BUILD_CONF_FILE="/app/usr/local/apache2/conf/buildconf"
    fi
    BCK_APACHECTL_FILE="${APACHECTL_FILE}_tomod"
    APACHE_CONF_DIR="${APACHE_INSTALL_DIR}/conf"
    SP_MODULE_DIRNAME="sp_modules"
    SP_MODULE_FILE="${APACHE_CONF_DIR}/sp_modules.conf"
    SP_MODULE_DIR="${APACHE_INSTALL_DIR}/${SP_MODULE_DIRNAME}"
    SP_MODULE_CONF_DIR="${APACHE_INSTALL_DIR}/sp_conf"
    GET_SP_MODULE_MACRO="${APACHE_CONF_DIR}/get_sp_module_macro.sh"
    BCK_HTTPD_CONF_TEMP="${SP_MODULE_CONF_DIR}/httpd.conf.temp_tomod"
    mkdir -p "$SP_MODULE_DIR"
    mkdir -p "$SP_MODULE_CONF_DIR"
    mylog "HTTPD_CONF_TEMP: ${HTTPD_CONF_TEMP}, SP_MODULE_FILE: ${SP_MODULE_FILE}, APACHECTL_FILE: ${APACHECTL_FILE}"
}
clear_and_exit()
{
    ret=1
    if [ "x$1" != "x" ]; then
        ret="$1"
    fi
    #rm -f "${BCK_HTTPD_CONF_TEMP}"
    loglimit "${logfile}"
    exit ${ret}
}
check_md5()
{
    local amd5=`md5sum "$1" 2>/dev/null | awk '{print $1}'`
    local bmd5=`md5sum "$2" 2>/dev/null | awk '{print $1}'`
    if [ "x${amd5}" != "x" ] && [ "x${amd5}" == "x${bmd5}" ]; then
        return 0
    fi
    return 1
}
# HTTPD_CONF_TEMP; 
upgrade_conf()
{
    # spso
    #
    # LoadModule por_inject_module modules/mod_por_inject.so
    # LoadModule res_hash_module modules/mod_res_hash.so
    # LoadModule common_res_module modules/mod_common_res.so
    # LoadModule por_check_module modules/mod_por_check.so
    #
    local histoy_sp_solist="mod_por_inject.so mod_res_hash.so mod_common_res.so mod_por_check.so"
    # 
    cp "${HTTPD_CONF_TEMP}" "${BCK_HTTPD_CONF_TEMP}"
    if [ $? -ne 0 ]; then
        mylog "copy to ${BCK_HTTPD_CONF_TEMP} failed"
        clear_and_exit
    fi
    if [ ! -f "${BCK_HTTPD_CONF_TEMP}" ]; then
        mylog "not exist ${BCK_HTTPD_CONF_TEMP}, failed!"
        clear_and_exit
    fi
    for one in ${histoy_sp_solist}; do
        # httpd.conf.tempso
        grep -q "^[[:space:]]*LoadModule[[:space:]]*.*${one}" "${BCK_HTTPD_CONF_TEMP}"
        if [ $? -ne 0 ]; then
            grep -q "^##PI_DEL##[[:space:]]*LoadModule[[:space:]]*.*${one}" "${BCK_HTTPD_CONF_TEMP}"
            if [ $? -ne 0 ]; then
                mylog "not exist ${one} in httpd.conf.temp"
            fi
        else
            # httpd.conf.tempso
            srcstr=`grep "^[[:space:]]*LoadModule[[:space:]]*.*${one}" "${BCK_HTTPD_CONF_TEMP}"`
            sed -i -e 's%^[[:space:]]*LoadModule[[:space:]]*.*'"${one}"'%##PI_DEL##'"${srcstr}"'%g' "${BCK_HTTPD_CONF_TEMP}"
            if [ $? -ne 0 ]; then
                mylog "del ${one} record ${BCK_HTTPD_CONF_TEMP} failed"
                clear_and_exit
            fi
        fi
        # sp_modules
        if [ ! -f "${SP_MODULE_DIR}/${one}" ] && [ -f "${APACHE_INSTALL_DIR}/modules/${one}" ]; then
            ln -s "../modules/${one}" "${SP_MODULE_DIR}/${one}"
        fi
    done
    # httpd.conf.temp Include sp_modules.conf
    grep -q "^[[:space:]]*Include[[:space:]]*${SP_MODULE_FILE}" "${BCK_HTTPD_CONF_TEMP}"
    if [ $? -ne 0 ]; then
        echo "" >> "${BCK_HTTPD_CONF_TEMP}"
        echo -e "\nInclude ${SP_MODULE_FILE}\n" >> "${BCK_HTTPD_CONF_TEMP}"
        if [ $? -ne 0 ]; then
            mylog "record Include ${SP_MODULE_FILE} to ${BCK_HTTPD_CONF_TEMP} failed"
            clear_and_exit
        fi
    fi
    # : 100
    cnt=`cat "${BCK_HTTPD_CONF_TEMP}" 2>/dev/null | wc -l | awk '{print $1}'`
    if [ "x$cnt" != "x" ] && [ $cnt -lt 100 ]; then
        mylog "${BCK_HTTPD_CONF_TEMP} line $cnt low 100, failed!"
        clear_and_exit
    fi
    # md5, 
    check_md5 "${BCK_HTTPD_CONF_TEMP}" "${HTTPD_CONF_TEMP}"
    if [ $? -eq 0 ]; then
        mylog "${BCK_HTTPD_CONF_TEMP} == ${HTTPD_CONF_TEMP}, success!"
        clear_and_exit 0
    fi
    # 
    cp "${BCK_HTTPD_CONF_TEMP}" "${HTTPD_CONF_TEMP}"
    if [ $? -ne 0 ]; then
        mylog "copy ${BCK_HTTPD_CONF_TEMP} to ${HTTPD_CONF_TEMP} failed"
        clear_and_exit
    fi
    #rm -f "${BCK_HTTPD_CONF_TEMP}"
    mylog "upgrade success!!!"
    return 0
}
after_upgrade()
{
    if is_dev_beyond_m75;
    then
        /sf/sbin/buildconf
    else
        /app/usr/local/apache2/conf/buildconf
    fi
}
main()
{
    initenv
    upgrade_conf
    after_upgrade
    loglimit "${logfile}"
    exit 0
}
only_run()
{
    local tmpfile="/tmp/ps_out_$$"
    ps aux | grep "modify_httpdconf.sh" > "${tmpfile}_ret"
    cat "${tmpfile}_ret" | grep -v $$ | grep -v grep | grep -v 'sh -c' | awk '{print $2}' > "$tmpfile"
    local mypids=`cat $tmpfile`
    if [ -n "$mypids" ]; then
        rm -rf "$tmpfile" "${tmpfile}_ret"
        mylog "`date` another modify_httpdconf(${mypids}) is running!"
        clear_and_exit
    fi
    rm -rf "$tmpfile" "${tmpfile}_ret"
}
# , . , 
only_run
main
main()
{
    initenv   //
    upgrade_conf  //
    after_upgrade ///sf/sbin/buildconf
    loglimit "${logfile}"
    exit 0
}
 /sf/sbin/buildconf 
​
​
 /config/etc/sangfor/ssl/*.conf  /config/etc/sangfor/ssl/httpd.conf  -V 
  /config/etc/sangfor/ssl/httpd.conf 
0x04