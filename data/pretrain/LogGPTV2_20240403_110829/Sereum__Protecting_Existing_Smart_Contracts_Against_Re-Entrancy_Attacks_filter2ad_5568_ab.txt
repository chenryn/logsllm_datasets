sample Solidity code, whereas the lower part shows the call chain. In this
example contract A withdraws 100 wei from contract B.
EVM level. However, if the recipient account is another con-
tract, send only invokes the fallback function of the recipient
contract, while call allows the caller to specify any function
signature of the recipient contract. Further, send only supplies
a limited amount of gas. The limited amount of gas, which is
provided by send, prevents the called contract from performing
other gas-expensive instructions, such as performing further
calls. While re-entrancy is necessary for the withdrawal pattern
and several other programming patterns [6], it can be exploited
if not carefully implemented, e.g.,
loss of 50 million US
Dollars in the case of DAO [23], [35].
A malicious re-entrancy occurs when a contract
is re-
entered unexpectedly and the contract operates on inconsistent
internal state. More speciﬁcally, if a re-entrance call involves
a control-ﬂow decision that is based on some internal state of
the victim contract, and the state is updated after the external
call returns, then it implies that the re-entered victim contract
operated based on an inconsistent state value, and thus the
re-entrancy was not expected by the contract developer. For
example, Figure 2 shows a simpliﬁed version of a contract
(inspired by [10]), called Victim, which suffers from a re-
entrancy vulnerability. Victim keeps track of an amount (a)
and features the withdraw function allowing other contracts
to withdraw Ether (c). The withdraw function must perform
three steps:  check whether the calling contract is allowed
to withdraw the requested amount of Ether, e.g., checking
whether a ≤ c,  send the amount of Ether to the calling
contract and  update the internal state to reﬂect the new
amount, e.g., c − a. Note that step  is performed before the
state is updated in . Hence, a malicious contract, can re-enter
the contract and call withdraw based on the same conditions
and amounts as for the ﬁrst invocation. As such, an attacker
can repeatedly re-enter into Victim to transfer large amounts of
Ether until the Victim is drained of Ether. A secure version of
our simple example requires swapping lines 3 and 4 to ensure
that the second invocation of Victim operates on consistent
state with updated amounts. In Section III, we elaborate on the
A.f()B.withdraw()A.()CALLCALLtransfersamountEtherfromBtoA1
2
3
4
5
6
function withdraw(uint amount) public {
1 if (credit[msg.sender] >= amount) {
2
msg.sender.call.value(amount)();
credit[msg.sender] -= amount;
3
}
}
Figure 2. Sample contract vulnerable to re-entrancy attacks [10]: the upper
parts shows the Solidity code, whereas the lower part shows the call sequence
between the vulnerable contract Victim and the attacker contract, and the
state of the variable a (amount) and c (credit[msg.sender]). The amount a has
not been updated for the second invocation of Victim thereby allowing a
malicious re-entrancy.
challenges of ﬁxing vulnerable contracts and the prevalence of
re-entrancy vulnerabilities in existing contracts.
C. Common Defenses and Analysis Tools
While this paper puts its focus on re-entrancy vulnerabil-
ities, other types of vulnerabilities have also been discovered
(e.g., integer overﬂow, type confusion) that have been compre-
hensively surveyed in [10]. To combat smart contract vulnera-
bilities, the literature features a number of proposals and tools
for identifying vulnerabilities in smart contracts. For instance,
Oyente [29], Mythril [31] and Manticore [30] leverage sym-
bolic execution [26] to detect various types of bugs (including
re-entrancy) in Ethereum smart contracts. teEther [27] is a
tool that automatically generates exploits for smart contracts.
It deﬁnes the notion of vulnerable state, in which Ether can
be transferred to an attacker-controlled address. By means of
symbolic execution, a transaction sequence can be inferred to
reach the vulnerable state. This transaction sequence is used
to automatically generate the exploit. Similarly, Maian [32]
relies on symbolic analysis, but aims at ﬁnding a sequence
of invocations that construct traces that lead to vulnerabilities.
However, symbolic execution techniques suffer from the well-
known path explosion problem for larger programs which is
still an ongoing research topic [11], [28], [37], [41].
Zeus [25] introduces a policy language to assert the cor-
rectness as well as the security requirements of a contract. For
this, it requires contract source code and user-deﬁned policies.
It applies static analysis based on symbolic veriﬁcation to
ﬁnd assertion violations. SmartCheck [40] ﬁrst converts the
solidity contract source code to a XML-based parse-tree and
then searches for vulnerable patterns through XPath queries.
Securify [42] uses static analysis to infer semantic facts about
smart contracts. These semantic facts are passed to a Datalog
solver [24], which can prove whether a deﬁned compliance
pattern or violation pattern is satisﬁed thereby proving the
absence or presence of certain vulnerabilities. Other works
leverage translation to F* to prove safety and security prop-
erties of smart contracts and to improve on existing static
analysis tools [12], [20]. KEVM [22] deﬁnes executable formal
semantics for EVM bytecode in the K-framework and presents
an accompanying formal veriﬁcation tool.
ECFChecker [21] is an analysis tool
that detects re-
entrancy vulnerabilities by deﬁning a new attribute, Effectively
Callback Free (ECF). An execution is ECF when there exists
an equivalent execution without callbacks that can achieve the
same state transition. If all possible executions of a contract
satisfy ECF, the whole contract is considered as featuring
ECF. Non-ECF contracts are thus considered as vulnerable to
re-entrancy, as callbacks can affect the state transition upon
contract execution. Proving the ECF property statically was
shown to be undecidable in general. However, Grossman et
al. also developed a dynamic checker that can show whether
a transaction violates the ECF property of a contract [21].
ECFChecker has been developed concurrently to Sereum and
is,
the only other runtime
monitoring tool. However, as we argue in Section III, this
approach does not cover the full space of re-entrancy attacks.
to the best of our knowledge,
III. PROBLEM STATEMENT AND NEW ATTACKS
In this paper, we set out to propose a defense (cf. Sec-
tion IV) which protects existing, deployed smart contracts
against re-entrancy attacks in a backwards-compatible way
without requiring source code or any modiﬁcation of the
contract code. As mentioned earlier, re-entrancy patterns are
prevalent in smart contracts and require developers to carefully
follow the implementation guidelines [6].
As the attack against “TheDAO” demonstrated, contracts
that are vulnerable re-entrancy attacks can be drained of all
Ether. Until now, the only publicly documented re-entrancy
attack, was against the “TheDAO” contract [35]. Our evalu-
ation also shows that re-entrancy attacks have not yet been
launched against other contracts (except some new minor
incidents we will describe in Section VI). However, recent
studies demonstrate that many already deployed contracts are
vulnerable, e.g., Oyente ﬂags 185 contracts as potentially vul-
nerable. These ﬁndings demonstrate that a systematic defense
against re-entrancy attacks is urgently required to protect these
contracts from being exploited.
As discussed in Section II-C, the majority of defenses
deploy static analysis and symbolic execution techniques to
identify re-entrancy vulnerabilities. While these tools surely
help in avoiding re-entrancy for new contracts, it remains open
how to protect existing contracts. That is, ﬁxing smart contract
vulnerabilities based on these tools is highly challenging owing
to the immutability of smart contract code and anonymity of
smart contract owners (cf. Section I).
Apart from these fundamental limitations, we also observe
that existing approaches fail to effectively detect all re-entrancy
4
VictimAttackerVictimAttackerState1c=N,a=N2a≤c(cid:88)A1a≤c(cid:88)2A3c0=c−a=0A3c00=c0−a=−N×re-entertransferΞtransferΞstateupdatestateupdatevulnerabilities or suffer from a high number of false positives.
More speciﬁcally, we note that existing approaches can be
undermined by advanced re-entrancy attacks. To this end,
we identify three re-entrancy patterns, which existing tools
do not ﬂag as re-entrancy vulnerabilities but are neverthe-
less exploitable. We call these patterns (1) cross-function re-
entrancy, (2) delegated re-entrancy and (3) create-based re-
entrancy. While cross-function re-entrancy vulnerabilities have
been partially discussed in the Ethereum community (e.g., [15],
[16]), we believe that this is ﬁrst presentation of delegated and
create-based re-entrancy attacks. All of these attacks are either
missed or imprecisely detected by the state-of-the-art detection
tools such as Oyente [29], Securify [42], and ZEUS [25].
In what follows, we present three attacks that exploit these
re-entrancy patterns and discuss why existing tools cannot
accurately mark the contract code as vulnerable. As we show,
these attacks map to standard programming patterns and are
highly likely to be included in existing contracts. For the
purpose of re-producing our attacks and testing them against
the public detection tools, the source codes of the vulnerable
contracts and the corresponding attacks is available at [4].
A. Cross-Function Re-Entrancy
The ﬁrst attack that we developed exploits the fact that
a re-entrancy attack spans over multiple functions of the
victim contract. We show that such cross-function re-entrancy
attacks are equally dangerous as traditional same-function re-
entrancy. In classical re-entrancy attacks the same function of
the contract is re-entered again. In cross-function re-entrancy
the same contract is re-entered in a different function. This
attack exploits the fact that smart contracts often offer multiple
interfaces, that read or write the same internal state variables.
For the sake of an example, consider the snippet from an
ERC20 Token like contract depicted in Figure 3. The function
withdrawAll performs a state update (the update of tokenBal-
ance) after an external call. However, an attacker cannot simply
re-enter the withdrawAll function since the etherAmount is set
to zero before the external call. Thus, the condition check in
line 7 cannot evaluate to true anymore thereby preventing re-
entrancy. However, the attacker can still trigger re-entrancy
on other functions. For instance, the attacker can re-enter the
transfer function, which uses the inconsistent tokenBalance
variable. This allows the attacker to transfer tokens to another
address, although the attacker should not have any token
available anymore.
Unfortunately, existing academic static analysis tools do
not accurately address cross-function re-entrancy. Namely,
Oyente does not ﬂag the code depicted in Figure 3 as
vulnerable to re-entrancy. Securify and Mythril apply a too
conservative policy with regards to re-entrancy in general:
both ﬂag any state update occurring after an external call
as a bug not considering whether the state update actually
causes inconsistent state. Hence, it suffers from signiﬁcant
false positive issues that we will discuss in more detail in
Section VI.
In general, detecting cross-function re-entrancy is chal-
lenging for any static analysis tool due to the potential state
explosion in case every external call is checked to be safe for
every function of the contract. For exactly this reason, ZEUS
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
mapping (address => uint) tokenBalance;
mapping (address => uint) etherBalance;
function withdrawAll() public {
uint etherAmount = etherBalance[msg.sender];
uint tokenAmount = tokenBalance[msg.sender];
if (etherAmount > 0 && tokenAmount > 0) {
uint e = etherAmount + (tokenAmount * currentRate);
etherBalance[msg.sender] = 0;
// cannot re-enter withdrawAll()
// However, can re-enter transfer()
msg.sender.call.value(e)();
// state update causing inconsistent state
tokenBalance[msg.sender] = 0;
}
}
function transfer(address to, uint amount) public {
// uses inconsistent tokenBalance (>0) when re-entered
if (tokenBalance[msg.sender] >= amount) {
tokenBalance[to] += amount;
tokenBalance[msg.sender] -= amount;
}
}
Figure 3. The upper part shows the relevant code for a customized ERC20
Token with a cross-function re-entrancy bug. The lower part shows the call
chain during the attack. The attacker cannot re-enter withdrawAll. However,
the transferToken can still be re-entered and abused to transfer tokens to
another attacker-controlled address. We assume the attacker is then able to
exchange the tokens for Ether.
omitted to perform any cross-function analysis [25]. However,
recent work in symbolic execution tools allows detection of
cross-function re-entrancy vulnerabilities. For example, Man-
ticore [30] is able to detect cross-function re-entrancy attacks.
In general, ECFChecker is able to detect cross-function
re-entrancy attacks. However, during our evaluation, we were
able to construct a contract
that can be exploited with a
cross-function re-entrancy attack without being detected by
ECFChecker. We include this speciﬁc contract as part of our
set of vulnerable contracts [4].
B. Delegated Re-Entrancy
Our second attack performs a new form of re-entrancy
that hides the vulnerability within a DELETEGATECALL or
CALLCODE instruction. These EVM instructions allow a con-
tract to invoke code of another contract in the context of
the calling contract. These instructions are mostly used to
implement dynamic library contracts. In Ethereum libraries
are simply other contracts deployed on the blockchain. When
a contract invokes a library, they share the same execution
context. A library has full control over the calling contracts
funds and internal state, i.e., the storage memory region. Using
libraries has the advantage that many contracts can re-use the
same code, which is deployed only once on the blockchain.
5
VictimwithdrawAll()AttackerVictimtransfer(address,uint)CALLCALLre-enterdifferentfunction1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
library Lib {
// Library contract