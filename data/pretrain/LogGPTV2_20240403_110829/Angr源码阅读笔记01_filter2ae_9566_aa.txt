# Angr源码阅读笔记01
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 零、前言
​ 很早之前写了一个系列的文章叫《Angr-CTF从入门到精通》获得了不错的反响，随着大三上课程的结束，本人又投入了科研项目工作中，重新开始了对自动化二进制漏洞检测与利用的工程中，想着针对最新的Angr版本大致简单介绍一下Angr的源码，其中参考了一些前辈的工作，但我主要是想从另外一个角度进行条理化的解析，这个系列大致也可以叫《Angr源码阅读从入门到精通》，目前最后的想法是开发一个将符号执行与模糊测试相结合的框架，有点类似Driller软件
​
Angr框架的分析对象是二进制程序，不依赖程序源码，支持x86/64、ARM/AArch64，MIPS等多个架构，之前的版本更新还引入了Java的支持。Angr除了实现符号执行分析之外，还实现了控制流分析、数据依赖分析、后向切片、库函数识别等其他静态分析技术
​ Angr框架的总体架构包含如下几个部分：
  * 加载器—CLE：用于解析加载二进制文件，识别文件格式，从ELF/PE头中提取架构、代码段和数据段等程序信息
  * 架构数据库—Archinfo：根据程序架构信息，加载对应的CPU架构模型，包括寄存器、位宽、大小端等数据
  * 翻译器—PyVEX：将程序机器码翻译成中间语言VEX，VEX是开源二进制插桩工具Valgrind所使用的中间语言，angr需要处理不同的架构，所以它选择一种中间语言来进行它的分析
  * 模拟执行引擎—SimEngine：对VEX指令进行解释执行，支持具体值执行和符号值执行，执行时支持自定义函数Hook和断点，支持自定义路径探索策略
  * 约束求解器—Claripy：将符号执行中生成的路径约束转化成SMT公式，使用Z3进行求解
  * OS模拟器—SimOS：用于模拟程序与系统环境交互，提供了许多模拟的libc函数和系统调用，用户也可以自行编写Hook函数进行模拟
​
虽然Angr即支持具体执行也支持符号执行，但实际上Angr默认只支持静态符号执行，不支持动态符号执行。Angr的路径探索策略默认使用广度优先策略，通过用户设置的目的地址（find）和避免到达的地址（avoid）来减少待探索的路径，此外Angr也支持深度优先策略和其他的策略。不过由于Angr的可拓展性很强，因此可以自定义探索路径的具体规则，实现一种近似于动态符号执行的路径探索策略
​
在实际中，Fuzz测试缺少纵深，对于大规模深度高的复杂工程应用根本没有办法展开相关测试工作，如果要对大规模的应用工程中重复打桩，又降低了Fuzz的测试效率，倘若将大程序分拆未各个模块，模块又拆分，这样的话对于跨组件跨模块的复杂问题又无法发现。且Fuzz只能挖掘的漏洞大部分是运行时显示异常的漏洞，而现实中真正存在威胁的漏洞都是非显式的异常，且源代码分析检测工具已经将很多问题解决，Fuzz发挥的实际效果其实比较有限。总的来说Fuzz对于复杂应用也存在自动化程度低，复杂逻辑与复杂场景的漏洞无法检测，不能针对特定路径的特定漏洞做针对性的检测等问题
​
在目前的我所接触过的在实际中的应用环境下，符号执行一般是与模糊测试和污点分析等共同协作，符号执行负责对测试数据进行分析与优化，生成新的测试数据，使得模糊测试fuzz引擎能突破程序的浅层，不断探索未覆盖的路径分支
​
Fuzz依赖类似于KLEE或者Angr之类的符号执行技术提供覆盖率更好的路径和约束，来提供路径的覆盖率和精准定位路径的能力，这个的确是Fuzz技术发展和改进的方向。但正如我之前看同事的文章所言，目前采用的二进制分析方式做符号执行，在此基础上做路径分析，这样的情况适合于源代码不能提供的场景，也许更适合于病毒分析等恶意程序分析，但是在正常公司开发过程中没有源代码的情况还是比较少见的。且二进制代码没有源代码的高级语言结构化特征和类型特征，对于高级分析还是比较困难的
​
在现在的国际大环境中，各种情况都有可能发生，网络安全就是国家安全，而网络安全十分依赖于对漏洞情况的掌握，而我国目前还没有一款真正属于自己的自动化漏洞挖掘工具。且超越国家而言，对于目前的技术发展情况而言，自动化漏洞挖掘，或者说漏洞挖掘工具还有很长的一条路要走，希望各位读者中阅读了本人的拙劣的文章能有所获得，推动我们整个技术向前发展
​ 阅读Angr源码不只是学习Angr这一种框架，更多是理解符号执行的整个周期流程的设计思维，可以举一反三，设计出更好的框架
​ 本人的测试系统环境如下，学习符号执行建议使用大内存机器：
  * CPU：AMD Ryzen 3700U
  * RAM：32GB
  * OS：Ubuntu 20.04 LTS
  * Angr Version：v9.0.5610
​ 我自己也曾在基于华为云的鲲鹏AMR服务器上建构了相关的Docker镜像环境，可以直接使用：
    $ docker pull zeroaone2099/angr-aarch64:v1.0
​ Git仓库地址：
  * [Angr-CTF从入门到精通](https://github.com/ZERO-A-ONE/AngrCTF_FITM)
  * [Angr源码解析](https://gitee.com/zeroaone/comments-on-angr-source-code.git)
## 一、启航
​ 本文章主要面向已经有过Angr使用的读者，如果有读者想知道Angr的基础用法可以移步至我之前写过的《Angr-CTF从入门到精通》，我们从一个最简单的Angr的例子开始我们的Angr源码阅读之路：
    import angr
    import sys
    def Go():
        path_to_binary = "./00_angr_find"
        project = angr.Project(path_to_binary, auto_load_libs=False)
        initial_state = project.factory.entry_state()
        simulation = project.factory.simgr(initial_state)
        print_good_address = 0x8048678  
        simulation.explore(find=print_good_address)
        if simulation.found:
            solution_state = simulation.found[0]
            solution = solution_state.posix.dumps(sys.stdin.fileno())
            print("[+] Success! Solution is: {}".format(solution.decode("utf-8")))
        else:
            raise Exception('Could not find the solution')
    if __name__ == "__main__":
        Go()
我们不难发现每个Angr项目都是从类似这一行代码开始的
    project = angr.Project(path_to_binary, auto_load_libs=False)
​ 使用
angr的首要步骤就是创建Project加载二进制文件。angr的二进制装载组件是CLE，它负责装载二进制对象（以及它依赖的任何库）和把这个对象以易于操作的方式交给angr的其他组件。angr将这些包含在Project类中。一个Project类是代表了你的二进制文件的实体。你与angr的大部分操作都会经过它
​ 我们就将从启动开始的Project类开始我们的Angr源码探索之旅
## 二、一切的开始-Project类
​ 我们首先从源码文档的`_init_.py`开始看：
    from .project import *
​ 我们可以发现Project类是从源码文档的`project`文件里导入进来的，现在我们去`project`文件里查看一下
    class Project:
    def __init__(self, thing,
                     default_analysis_mode=None,
                     ignore_functions=None,
                     use_sim_procedures=True,
                     exclude_sim_procedures_func=None,
                     exclude_sim_procedures_list=(),
                     arch=None, simos=None,
                     engine=None,
                     load_options: Dict[str, Any]=None,
                     translation_cache=True,
                     support_selfmodifying_code=False,
                     store_function=None,
                     load_function=None,
                     analyses_preset=None,
                     concrete_target=None,
                     **kwargs):
    ...
​ 在源文件的第49行我们就发现了关于Project类的定义，这里引用一下源码的说明：
        """
        This is the main class of the angr module. It is meant to contain a set of binaries and the relationships between
        them, and perform analyses on them.
        :param thing:                       The path to the main executable object to analyze, or a CLE Loader object.
        The following parameters are optional.
        :param default_analysis_mode:       The mode of analysis to use by default. Defaults to 'symbolic'.
        :param ignore_functions:            A list of function names that, when imported from shared libraries, should never be stepped into in analysis (calls will return an unconstrained value).
        :param use_sim_procedures:          Whether to replace resolved dependencies for which simprocedures are available with said simprocedures.
        :param exclude_sim_procedures_func: A function that, when passed a function name, returns whether or not to wrap
                                            it with a simprocedure.
        :param exclude_sim_procedures_list: A list of functions to *not* wrap with simprocedures.
        :param arch:                        The target architecture (auto-detected otherwise).
        :param simos:                       a SimOS class to use for this project.
        :param engine:                      The SimEngine class to use for this project.
        :param bool translation_cache:      If True, cache translated basic blocks rather than re-translating them.
        :param support_selfmodifying_code:  Whether we aggressively support self-modifying code. When enabled, emulation will try to read code from the current state instead of the original memory, regardless of the current memory protections.
        :type support_selfmodifying_code:   bool
        :param store_function:              A function that defines how the Project should be stored. Default to pickling.
        :param load_function:               A function that defines how the Project should be loaded. Default to unpickling.
        :param analyses_preset:             The plugin preset for the analyses provider (i.e. Analyses instance).
        :type analyses_preset:              angr.misc.PluginPreset
        Any additional keyword arguments passed will be passed onto ``cle.Loader``.
        :ivar analyses:     The available analyses.
        :type analyses:     angr.analysis.Analyses
        :ivar entry:        The program entrypoint.
        :ivar factory:      Provides access to important analysis elements such as path groups and symbolic execution results.
        :type factory:      AngrObjectFactory
        :ivar filename:     The filename of the executable.
        :ivar loader:       The program loader.
        :type loader:       cle.Loader
        :ivar storage:      Dictionary of things that should be loaded/stored with the Project.
        :type storage:      defaultdict(list)
        """
###  2.1 参数分析
​ 我们优先关注一下Project类的构造函数的参数：
  * thing： 要分析的主要可执行对象的路径，或CLE Loader对象，这个是必须指定的参数
​ 以下是可选的参数列表：
  * default_analysis_mode：默认使用的分析模式， 默认为 ‘symbolic’
  * ignore_functions：是一个函数名称列表，当从共享库导入后，列表里的这些函数不会被进入分析（调用将返回一个非约束值），简单来说就是传入一个要忽略的函数列表
> 默认情况下，angr 会使用 `SimProcedures` 中的符号摘要替换库函数，即设置 Hooking，这些 python
> 函数摘要高效地模拟库函数对状态的影响，以下简称sim，可以设置参数 `exclude_sim_procedures_list` 和
> `exclude_sim_procedures_func` 指定不想被 `SimProcedure` 替代的符号
  * use_sim_procedures：是否使用符号摘要替换库函数，默认是开启的，但是因为sim是模拟库函数可能存在精确度和准确性问题
  * exclude_sim_procedures_func：不需要被替换的库函数
  * exclude_sim_procedures_list：不用sim替换的函数列表
  * arch：目标架
  * simos：确定 guest OS。创建了一个 `angr.SimOS` 或者其子类实例有以下定义： 
    * SimLinux
    * SimWindows
    * SimCGC
    * SimJavaVM
    * SimUserland
> angr使用一系列引擎（SimEngine的子类）来模拟被执行代码对输入状态产生的影响。源码位于 angr/engines 目录下
  * engine：指定要使用的SimEngine引擎类型： 
    * | 名称 | 描述 |  
| ———————— | —————————————————————————————— |  
| `failure engine` | kicks in when the previous step took us to some
uncontinuable state |  
| `syscall engine` | kicks in when the previous step ended in a syscall |  
| `hook engine` | kicks in when the current address is hooked |  
| `unicorn engine` | kicks in when the `UNICORN` state option is enabled and
there is no symbolic data in the state |  
| `VEX engine` | kicks in as the final fallback. |
  * translation_cache：布尔变量，如果为True，则缓存已转化的基本块，而不是重新转化它们，简单来说就 **是否开启对于基本块的缓存**
  * support_selfmodifying_code：布尔变量。设定是否支持自修改代码。启用后，无论当前的内存保护如何，仿真都会尝试从当前状态而不是原始内存中读取代码
  * store_function：一个函数，定义如何存储Project，默认为pickling方式（Python中的pickle，序列化对象并保存到磁盘中）
  * load_function： 一个函数，定义如何加载Project，默认是unpicklink方式（也就是反序列化）
  * analyses_preset：设置project的插件，定义在angr.misc.PluginPreset
​ 在之后所有的参数将传递给加载器CLE类的Loader方法，angr 中的 CLE 模块用于将二进制文件载入虚拟地址空间，而CLE 最主要的接口就是
loader 类，在我们讲到CLE模块的时候，我们会深入解析它
​ 通过 loader, 我们可以获得二进制文件的共享库、地址空间等信息，类似这样
    >>> proj.loader
    >>> proj.loader.shared_objects
    OrderedDict([('true', ), ('libc.so.6', ), ('ld-linux-x86-64.so.2', )])
    >>> proj.loader.min_addr
    >>> proj.loader.max_addr
​ 下面我们使用一个简单的例子来一起学习angr的构造过程：
​ 测试源码：
    #include
    int main(){
        printf("Hi!Angr!\n");
        return 0;
    }
​ 编译指令：
    $ gcc 01.c -no-pie -g -o tes
​ 一个Project有一些基础属性：它的CPU架构、文件名、入口地址
    >>> proj.arch
    >>> proj.entry
    4198480
    >>> proj.filename
    './test'
​ 接下来我们解析Project构造函数的执行流程
###  2.2 构造函数
####  2.2.1 第一步
     # Step 1: Load the binary
            if load_options is None: load_options = {}
            load_options.update(kwargs)
            if arch is not None:
                load_options.update({'arch': arch})
            if isinstance(thing, cle.Loader):
                if load_options:
                    l.warning("You provided CLE options to angr but you also provided a completed cle.Loader object!")
                self.loader = thing
                self.filename = self.loader.main_object.binary
            elif hasattr(thing, 'read') and hasattr(thing, 'seek'):
                l.info("Loading binary from stream")
                self.filename = None
                self.loader = cle.Loader(thing, **load_options)
            elif not isinstance(thing, str) or not os.path.exists(thing) or not os.path.isfile(thing):
                raise Exception("Not a valid binary file: %s" % repr(thing))
            else:
                # use angr's loader, provided by cle
                l.info("Loading binary %s", thing)
                self.filename = thing
                self.loader = cle.Loader(self.filename, concrete_target=concrete_target, **load_options)
​ 我们可以发现首先是在加载二进制文件，也就是对我们输入的二进制文件就行初始化处理，最终目的式获得一个 `cle.Loader` 实例
​ isinstance() 函数来判断一个对象是否是一个已知的类型，类似 type()
> isinstance() 与 type() 区别：
>
>   * type() 不会认为子类是一种父类类型，不考虑继承关系
>   * isinstance() 会认为子类是一种父类类型，考虑继承关系
>
>
> 如果要判断两个类型是否相同推荐使用 isinstance()
​ 首先对加载的 `thing` 做判断，如果是一个 `cle.loader` 类实例，则将其设置为 `self.loader`
成员变量；否则如果是一个流，或者是一个二进制文件，则创建一个新的 `cle.Loader`。然后该 project 被放入字典
`projects`（从流加载的除外）
​ 二进制的装载组建是CLE（CLE Load
Everything)，它负责装载二进制对象以及它所依赖的库，将自身无法执行的操作转移给angr的其它组件，最后生成地址空间，表示该程序已加载并可以准备运行
​
`cle.loader`代表着将整个程序映射到某个地址空间，而地址空间的每个对象都可以由一个加载器后端加载，例如`cle.elf`用于加载linux的32位程序
​ 总而言之通过loader来查看二进制文件加载的共享库，以及执行对加载地址空间相关的基本查询
    >>> proj.loader
    >>> proj.loader.shared_objects
    OrderedDict(
    [('test', ),
    ('libc.so.6', ),
    ('ld-linux-x86-64.so.2', ), ('extern-address space', ), 
    ('cle##tls', )])
    >>> proj.loader.all_objects