**作者: dawu@知道创宇404实验室**  
**日期：2018/08/16**  
**英文版本：**
### 0x00 前言
在调试 `Drupal` 远程命令执行漏洞（CVE-2018-7600 && CVE-2018-7602）时，存在一个超大的数组 `$form`
。在该数组中寻找到注入的变量，可以帮助调试人员确认攻击是否成功。
但是作为一个安全研究人员，在调试时也保持着一颗发现漏洞的心，所以知道 `$form` 中的每一个元素的内容就十分重要了。然而 `PhpStorm`
这款调试工具需要不断的点击才能看到数组中各元素的值，这显然非常低效。
笔者在官方手册中发现了一种解决方案：
但是 `Evaluate in Console` 看上去就具有一定的危险性，所以笔者深入研究了该功能的实现过程并成功通过 `PhpStorm` 在
`Xdebug` 服务器上执行了命令。
### 0x01 准备工作
#### 1.1 Xdebug的工作原理和潜在的攻击面
`Xdebug` 工作原理和潜在的攻击面前人已有部分文章总结：
  * [Xdebug: A Tiny Attack Surface](https://paper.seebug.org/397/)
  * [利用恶意页面攻击本地Xdebug](https://paper.seebug.org/558/)
综合上述参考链接，已知的攻击面有：
  1. `eval` 命令： 可以执行代码。
  2. `property_set && property_get` 命令: 可以执行代码
  3. `source` 命令: 可以阅读源码。
  4. 利用 `DNS` 重绑技术可能可以导致本地 `Xdebug` 服务器被攻击。
就本文而言 `PhpStorm` 和 `Xdebug` 进行调试的工作流程如下：
  1. `PhpStorm` 开启调试监听，默认绑定 `9000`、`10137`、`20080` 端口等待连接。
  2. 开发者使用 `XDEBUG_SESSION=PHPSTORM` （XDEBUG_SESSION的内容可以配置，笔者设置的是PHPSTORM） 访问 `php` 页面。
  3. `Xdebug` 服务器反连至 `PhpStorm` 监听的 `9000` 端口。
  4. 通过步骤3建立的连接，开发者可以进行阅读源码、设置断点、执行代码等操作。
如果我们可以控制 `PhpStorm` 在调试时使用的命令，那么在步骤4中攻击面 `1`、`2`、`3` 将会直接威胁到 `Xdebug` 服务器的安全。
#### 1.2 实时嗅探脚本开发
`工欲善其事，必先利其器`。笔者开发了一个脚本用于实时显示 `PhpStorm` 和 `Xdebug` 交互的流量（该脚本在下文截图中会多次出现）：
    from scapy.all import *
    import base64
    Terminal_color = {
        "DEFAULT": "\033[0m",
        "RED": "\033[1;31;40m"
    }
    def pack_callback(packet):
        try:
            if packet[TCP].payload.raw_packet_cache != None:
                print("*"* 200)
                print("%s:%s --> %s:%s " %(packet['IP'].src,packet.sport,packet['IP'].dst,packet.dport))
                print(packet[TCP].payload.raw_packet_cache.decode('utf-8'))
                if packet[TCP].payload.raw_packet_cache.startswith(b"eval"):
                    print("%s[EVAL] %s %s"%(Terminal_color['RED'],base64.b64decode(packet[TCP].payload.raw_packet_cache.decode('utf-8').split("--")[1].strip()).decode('utf-8'),Terminal_color['DEFAULT']))
                if packet[TCP].payload.raw_packet_cache.startswith(b"property_set"):
                    variable = ""
                    for i in packet[TCP].payload.raw_packet_cache.decode('utf-8').split(" "):
                        if "$" in i:
                            variable = i
                    print("%s[PROPERTY_SET] %s=%s %s"%(Terminal_color['RED'],variable,base64.b64decode(packet[TCP].payload.raw_packet_cache.decode('utf-8').split("--")[1].strip()).decode('utf-8'),Terminal_color['DEFAULT']))
                if b"command=\"eval\"" in packet[TCP].payload.raw_packet_cache:
                    raw_data = packet[TCP].payload.raw_packet_cache.decode('utf-8')
                    CDATA_postion = raw_data.find("CDATA")
                    try:
                        eval_result = base64.b64decode(raw_data[CDATA_postion+6:CDATA_postion+raw_data[CDATA_postion:].find("]")])
                        print("%s[CDATA] %s %s"%(Terminal_color['RED'],eval_result,Terminal_color['DEFAULT']))
                    except:
                        pass
        except Exception as e:
            print(e)
            print(packet[TCP].payload)
    dpkt  = sniff(iface="vmnet5",filter="tcp", prn=pack_callback)
    # 这里设置的监听网卡是 vmnet5，使用时可以根据实际的网卡进行修改
### 0x02 通过 `PhpStorm` 在 `Xdebug` 服务器上执行命令
#### 2.1 通过 `Evaluate in Console` 执行命令
通过上文的脚本，可以很清晰的看到我们在执行 `Evaluate in Console` 命令时发生了什么（红色部分是 `base64` 解码后的结果）：
如果我们可以控制 `$q`，那我们就可以控制 `eval` 的内容。但是在 `PHP`
[官方手册](http://php.net/manual/en/language.variables.basics.php)中，明确规定了变量名称应该由
`a-zA-Z_\x7f-\xff` 组成：
> Variable names follow the same rules as other labels in PHP. A valid
> variable name starts with a letter or underscore, followed by any number of
> letters, numbers, or underscores. As a regular expression, it would be
> expressed thus: '[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*'
所以通过控制 `$q` 来控制 `eval` 的内容并不现实。但是在 `PhpStorm` 获取数组中某个元素时，会将该元素的名称带入 `eval`
的语句中。
如图所示，定义数组如下： `$a = ( "aaa'bbb"=>"ccc")`，并在 `PhpStorm` 中使用 `Evaluate in