of the ACM, vol. 59, no. 6, pp. 62–69, 2016.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:34 UTC from IEEE Xplore.  Restrictions apply. 
[23] J. Nielsen, Usability engineering. Morgan Kaufmann, 1993.
[24] S. Clarke, “Using the cognitive dimensions
framework to de-
sign usable APIs,” https://blogs.msdn.microsoft.com/stevencl/2003/11/
14/using-the-cognitive-dimensions-framework-to-design-usable-apis/.
[25] J. Bloch, “How to design a good API and why it matters,” in Companion
to the 21st ACM SIGPLAN Conference. ACM, 2006.
[26] M. Henning, “API design matters,” Queue, vol. 5, no. 4, pp. 24–36,
2007.
[27] M. Green and M. Smith, “Developers are Not the Enemy!: The Need
for Usable Security APIs,” IEEE Security & Privacy, vol. 14, no. 5, pp.
40–46, 2016.
[28] P. Gorski and L. L. Iacono, “Towards the usability evaluation of security
apis,” in Proceedings of the Tenth International Symposium on Human
Aspects of Information Security & Assurance (HAISA 2016), 2016.
[29] C. Wijayarathna, N. A. G. Arachchilage, and J. Slay, “Generic cognitive
dimensions questionnaire to evaluate the usability of security apis,” in
Proceedings of the 19th International Conference on Human-Computer
Interaction (to appear), 2017.
[30] D. Oliveira, M. Rosenthal, N. Morin, K.-C. Yeh, J. Cappos, and
Y. Zhuang, “It’s the psychology stupid: How heuristics explain software
vulnerabilities and how priming can illuminate developer’s blind spots,”
in Proceedings of
the 30th Annual Computer Security Applications
Conference (ACSAC 2014). ACM, 2014.
[31] G. Wurster and P. C. van Oorschot, “The developer is the enemy,” in
Proceedings of the 2008 New Security Paradigms Workshop (NSPW
2008). ACM, 2008.
[32] M. Finifter and D. Wagner, “Exploring the relationship between web
application development tools and security,” in Proceedings of the 2nd
USENIX conference on Web application development (WebApps 2011),
2011.
[33] L. Prechelt, “Plat forms: A web development platform comparison by
an exploratory experiment searching for emergent platform properties,”
IEEE Transactions on Software Engineering, vol. 37, no. 1, pp. 95–108,
2011.
[34] T. Scheller and E. K¨uhn, “Usability Evaluation of Conﬁguration-Based
API Design Concepts,” in Human Factors in Computing and Informatics.
Springer Berlin Heidelberg, 2013, pp. 54–73.
[35] J. Stylos and B. A. Myers, “The implications of method placement on
API learnability,” in Proceedings of the 16th ACM SIGSOFT Interna-
tional Symposium. ACM, 2008.
[36] B. Ellis, J. Stylos, and B. Myers, “The Factory Pattern in API Design:
the 29th International
A Usability Evaluation,” in Proceedings of
Conference on Software Engineering (ICSE 2007).
IEEE, 2007.
[37] M. Piccioni, C. A. Furia, and B. Meyer, “An empirical study of api us-
ability,” in Proceedings of the 2013 ACM/IEEE International Symposium
on Empirical Software Engineering and Measurement.
IEEE, 2013.
[38] C. Burns, J. Ferreira, T. D. Hellmann, and F. Maurer, “Usable results
from the ﬁeld of API usability: A systematic mapping and further
analysis,” in Proceedings of
the 2012 IEEE Symposium on Visual
Languages and Human-Centric Computing , 2012.
[39] “GitHut: A Small Place to discover languages in GitHub,” 2016.
[Online]. Available: http://githut.info
[40] S. Willden, “Keyczar Design Philosophy,” 2015. [Online]. Available:
https://github.com/google/keyczar/wiki/KeyczarPhilosophy
[41] “OpenSSL.” [Online]. Available: https://www.openssl.org/
[42] “PyCrypto.”
[Online]. Available:
https://www.dlitz.net/software/
pycrypto
M2Crypto
[43] “M2Crypto.”
[Online].
Available:
https://pypi.python.org/pypi/
[44] “Keyczar.” [Online]. Available: https://github.com/google/keyczar
[45] “PyNaCl.” [Online]. Available: https://pynacl.readthedocs.io/en/latest
[46] “pyOpenSSL.” [Online]. Available: http://www.pyopenssl.org/en/stable
[47] “tlslite.” [Online]. Available: http://trevp.net/tlslite/
[48] “bcrypt.” [Online]. Available: https://github.com/pyca/bcrypt
[49] “gnupg.”
https://github.com/isislovecruft/
Available:
[Online].
python-gnupg
simple-crypt
[50] “pycryptopp.” [Online]. Available: https://tahoe-lafs.org/trac/pycryptopp
[51] “scrypt.” [Online]. Available: http://bitbucket.org/mhallin/py-scrypt
[52] “simple-crypt.” [Online]. Available: https://github.com/andrewcooke/
[53] “pysodium.” [Online]. Available: https://github.com/stef/pysodium
[54] “ed25519.” [Online]. Available: https://pypi.python.org/pypi/ed25519
[55] “pyaes.” [Online]. Available: https://github.com/ricmoo/pyaes
io
[56] “PyCryptodome.” [Online]. Available: http://pycryptodome.readthedocs.
[57] “PyMe.” [Online]. Available: http://pyme.sourceforge.net
[58] “pyDes.” [Online]. Available: https://github.com/toddw-as/pyDes
[59] “tls.” [Online]. Available: https://github.com/pyca/tls
[60] “GitHub Archive.” [Online]. Available: https://www.githubarchive.org
[61] “Jupyter notebook.” [Online]. Available: http://jupyter.org/
[62] “The Sodium crypto library (libsodium).” [Online]. Available: https:
//libsodium.org
[63] P. W. Jordan, B. Thomas, B. A. Weerdmeester, and A. L. McClelland,
“SUS: A “quick and dirty” usability scale,” in Usability Evaluation in
Industry. Taylor and Francis, 1996, pp. 189–194.
[64] National
Institute of Standards and Technology (NIST), “NIST
Special Publication 800-57 Part 1 Revision 4: Recommendation for
Key Management,” 2016. [Online]. Available: http://nvlpubs.nist.gov/
nistpubs/SpecialPublications/NIST.SP.800-57pt1r4.pdf
[65] S. Josefsson, “PKCS #5: Password-Based Key Derivation Function 2
(PBKDF2) Test Vectors,” RFC 6070, 2011.
[66] National Institute of Standards and Technology (NIST), “NIST Special
Publication 800-63B Digital Authentication Guideline,” 2016. [Online].
Available: https://pages.nist.gov/800-63-3/sp800-63b.html
[67] K. P. Burnham, “Multimodel Inference: Understanding AIC and BIC in
Model Selection,” Sociological Methods & Research, vol. 33, no. 2, pp.
261–304, 2004.
APPENDIX
A. Exit survey questions
Task-speciﬁc questions: Asked about each task
to the following statements:
Please rate your agreement
(Strongly agree; agree; neutral; disagree; strongly disagree; I
don’t know.)
• I think I solved this task correctly.
• I think I solved this task securely.
• The documentation was helpful in solving this task.
General questions
• Are you aware of a speciﬁc library or other resource you
would have preferred to solve the tasks? Which? (Yes
with free response; no; I don’t know.)
• Have you used or seen the assigned library before? For
example, maybe you worked on a project that used the
assigned library, but someone else wrote that portion of
the code. (I have used the assigned library before; I have
seen the assigned library used but have not used it myself;
No, neither; I dont know.)
• Have you written or seen code for tasks similar to this
one before? For example, maybe you worked on a project
that included a similar task, but someone else wrote that
portion of the code. (I have written similar code; I have
seen similar code but have not written it myself; No,
neither; I dont know.)
System Usability Scale (SUS)
We asked you to use the assigned library and the following
questions refer to the assigned library and its documentation.
Please rate your agreement or disagreement with the following
statements: (Strongly agree; agree; neutral; disagree; strongly
disagree)
• I think that I would like to use this library frequently.
• I found the library unnecessarily complex.
• I thought the library was easy to use.
169
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:34 UTC from IEEE Xplore.  Restrictions apply. 
• I think that I would need the support of a technical person
to be able to use this library.
• I found the various functions in this library were well
integrated.
• I thought there was too much inconsistency in this library.
• I would imagine that most people would learn to use this
library very quickly.
• I found the library very cumbersome to use.
• I felt very conﬁdent using the library.
• I needed to learn a lot of things before I could get going
with this library.
Our usability scale
Please rate your agreement to the following questions on a
scale from ‘strongly agree’ to ‘strongly disagree.’ (Strongly
agree; agree; neutral; disagree; strongly disagree) Calculate
i=2..10(Qi − 1));
the 0-100 score as follows: 2.5 * (5-Q1 +
for the score, Q11 is omitted.
(cid:2)
• I had to understand how most of the assigned library
works in order to complete the tasks.
• It would be easy and require only small changes to change
parameters or conﬁguration later without breaking my
code.
• After doing these tasks, I think I have a good understand-
ing of the assigned library overall.
• I only had to read a little of the documentation for the
assigned library to understand the concepts that I needed
for these tasks.
• The names of classes and methods in the assigned library
corresponded well to the functions they provided.
• It was straightforward and easy to implement the given
tasks using the assigned library.
• When I accessed the assigned library documentation, it
was easy to ﬁnd useful help.
• In the documentation, I found helpful explanations.
• In the documentation, I found helpful code examples.
Please rate your agreement to the following questions on a
scale from ‘strongly agree’ to ‘strongly disagree.’ (Strongly
agree; agree; neutral; disagree; strongly disagree; does not
apply)
• When I made a mistake, I got a meaningful error mes-
sage/exception.
• Using the information from the error message/exception,
it was easy to ﬁx my mistake.
Demographics
• How long have you been programming in Python? (Less
than 1 year; 1-2 years; 2-5 years; more than ﬁve years)
• How long have you been coding in general? (Less than
1 year; 1-2 years; 2-5 years; more than ﬁve years)
• How did you learn to code? [all that apply] (self-taught,
online class, college, on-the-job training, coding camp)
• Is programming your primary job? If yes: Is writing
Python code (part of) your primary job?
• Do you have an IT-security background? If yes, please
• Please tell us your highest degree of education. (drop-
specify.
down)
number)
• Please tell us your gender. (female, male, other (please
specify), decline to say)
• How old are you? (free text, check that the answer is a
• What country/countries do you live in / which country/-
countries are you a citizen of? (dropdown)
• What is your occupation? (free text)
B. Security Errors
Table XIV details the different types of security errors made
by our participants, across the libraries we tested and the
tasks we assigned. Our deﬁnitions of security are discussed
in Section III-H.
170
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:34 UTC from IEEE Xplore.  Restrictions apply. 
Symmetric Keygen
Key Size
Key in Plain Weak Cipher Weak Mode
Static IV
No KDF
Custom KDF
KDF Salt
KDF Algo.
KDF Iter.
PyCrypto
M2Crypto
cryptography.io
Keyczar
PyNaCl
6
2
1
0
0
4
2
7
3
2
11
0
0
0
0
14
0
0
0
0
3
7
0
0
0
15
4
1
1
1
11
2
3
0
17
1
2
10
0
1
1
1
0
0
1
2
1
0
0
0
Symmetric Encryption
No Enc. Weak Algo. Weak Mode
Static IV
PyCrypto
M2Crypto
cryptography.io
Keyczar
PyNaCl
0
0
0
0
0
17
0
0
0
0
23
1
0
0
0
29
9
0
0
0
Asymmetric Keygen
Key Size
Key in Plain Weak Cipher Weak Mode
Static IV
No KDF
Custom KDF
KDF Salt
KDF Algo.
KDF Iter.
PyCrypto
M2Crypto
cryptography.io
Keyczar
PyNaCl
6
6
0
0
0
0
0
0
1
3
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
7
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
Asymmetric Encryption
Key Size
Padding
Certiﬁcate Validation
Sig. Check
CA Flag Check
Hostname Check
Date Check
PyCrypto
M2Crypto
cryptography.io
Keyczar
PyNaCl
9
6
0
0
0
0
1
0
0
0
PyCrypto
M2Crypto
cryptography.io
Keyczar
PyNaCl
1
2
4
0
1
1
13
7
0
1
1
11
7
0
1
1
14
7
0
1
Security errors made by our participants, as categorized by our codebook.
TABLE XIV
171
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:34 UTC from IEEE Xplore.  Restrictions apply.