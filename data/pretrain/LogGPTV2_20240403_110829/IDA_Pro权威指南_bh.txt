 ，将十进制值val
 转换成对应的整数值。
long xtol(string val)
 ，将十六进制值 val
 （可选择以0x
 开头）转换成对应的整数值
string ltoa(long val, long radix)
 ，以指定的radix
 （2 、8 、10或16）返回val
 的字符串值。
long ord(string ch)
 ，返回单字符字符串 ch
 的ASCII 值。
long strlen(string str)
 ，返回所提供字符串的长度。
long strstr(string str, string substr)
 ，返回str
 中substr
 的索引。如果没有发现子字符串，则返回-1。
string substr(string str, long start, long end)
 ，返回包含 str
 中由start
 到end-1
 位置的字符的子字符串。如果使用分片（IDA5.6 及更高版本），此函数等同于str[start:end]
 。
如前所述，IDC 中没有任何字符数据类型，它也不支持任何数组语法。如果你想要遍历字符串的每个字符，必须把字符串中的每个字符当成连续的单字符子字符串处理。
15.4.4 文件输入/ 输出函数
输出窗口并不总是显示脚本输出的理想位置。对于生成大量文本或二进制数据的脚本，你可能希望将其结果输出到磁盘文件上。我们已经讨论了如何使用AskFile
 函数要求用户输入文件名。但是，AskFile
 仅返回一个包含文件名的字符串值。IDC 的文件处理函数如下所示。
long fopen(string filename, string mode)
 ，返回一个整数文件句柄（如果发生错误，则返回0），供所有 IDC 文件输入/输出函数使用。mode
 参数与C 语言的fopen
 函数使用的模式（r
 表示读取，w
 表示写入，等等）类似。
void fclose(long handle)
 ，关闭fopen
 中文件句柄指定的文件。
long filelength(long handle)
 ，返回指定文件的长度，如果发生错误，则返回-1。
long fgetc(long handle)
 ，从给定文件中读取一个字节。如果发生错误，则返回-1。
long fputc(long val, long handle)
 ，写入一个字节到给定文件中。如果操作成功，则返回0；如果发生错误，则返回-1。
long fprintf(long handle, string format, ...)
 ，将一个格式化字符串写入到给定文件中。
long writestr(long handle, string str)
 ，将指定的字符串写入到给定文件中。
string/long readstr(long handle)
 ，从给定文件中读取一个字符串。这个函数读取到下一个换行符为止的所有字符（包括非 ASCII 字符），包括换行符本身（ASCII 0xA）。如果操作成功，则返回字符串；如果读取到文件结尾，则返回-1。
long writelong(long handle, long val, long bigendian)
 ，使用大端（bigendian=1
 ）或小端（bigendian=0
 ）字节顺序将一个 4 字节整数写入到给定文件。
long readlong(long handle, long bigendian)
 ，使用大端（bigendian=1
 ）或小端（bigendian=0
 ）字节顺序从给定的文件中读取一个 4 字节整数。
long writeshort(long handle, long val, long bigendian)
 ，使用大端（bigendian=1
 ）或小端（bigendian=0
 ）字节顺序将一个 2 字节整数写入到给定的文件。
long readshort(long handle, long bigendian)
 ，使用大端（bigendian=1
 ）或小端（bigendian=0
 ）字节顺序从给定的文件中读取一个 2 字节整数。
bool loadfile(long handle, long pos, long addr, long length)
 ，从给定文件的 pos
 位置读取length
 数量的字节，并将这些字节写入到以 addr
 地址开头的数据库中。
bool savefile(long handle, long pos, long addr, long length)
 ，将以addr
 数据库地址开头的length
 数量的字节写入给定文件的 pos
 位置。
15.4.5 操纵数据库名称
在脚本中，你经常需要操纵已命名的位置。下面的 IDC 函数用于处理 IDA 数据库中已命名的位置。
string Name(long addr)
 ，返回与给定地址有关的名称，如果该位置没有名称，则返回空字符串。如果名称被标记为局部名称，这个函数并不返回用户定义的名称。
string NameEx(long from, long addr)
 ，返回与addr
 有关的名称。如果该位置没有名称，则返回空字符串。如果 from
 是一个同样包含 addr
 的函数中的地址，则这个函数返回用户定义的局部名称。
bool MakeNameEx(long addr, string name, long flags)
 ，将给定的名称分配给给定的地址。该名称使用 flags
 位掩码中指定的属性创建而成。这些标志在帮助系统中的MakeNameEx
 文档中有记载描述，可用于指定各种属性，如名称是局部名称还是公共名称、名称是否应在名称窗口中列出。
long LocByName(string name)
 ，返回一个位置（名称已给定）的地址。如果数据库中没有这个名称，则返回 BADADDR (-1）。
long LocByNameEx(long funcaddr, string localname)
 ，在包含funcaddr
 的函数中搜索给定的局部名称。如果给定的函数中没有这个名称，则返回 BADADDR (-1）。
15.4.6 处理函数的函数
许多脚本专用于分析数据库中的函数。IDA 为经过反汇编的函数分配大量属性，如函数局部变量区域的大小、函数的参数在运行时栈上的大小。下面的 IDC 函数可用于访问与数据库中的函数有关的信息。
long GetFunctionAttr(long addr, long attrib)
 ，返回包含给定地址的函数的被请求的属性。请参考 IDC 帮助文档了解属性常量。例如，要查找一个函数的结束地址，可以使用GetFunctionAttr(addr, FUNCATTR_END)
 ;。
string GetFunctionName(long addr)
 ，返回包含给定地址的函数的名称。如果给定的地址并不属于一个函数，则返回一个空字符串。
long NextFunction(long addr)
 ，返回给定地址后的下一个函数的起始地址。如果数据库中给定地址后没有其他函数，则返回-1。
long PrevFunction(long addr)
 ，返回给定地址之前距离最近的函数的起始地址。如果在给定地址之前没有函数，则返回-1。
根据函数的名称，使用 LocBy Name
 函数查找该函数的起始地址。
15.4.7 代码交叉引用函数
交叉引用已在第9 章讨论过 。IDC 提供各种函数来访问与指令有关的交叉引用信息。要确定哪些函数能够满足你的脚本的要求，可能有些令人困惑。它要求你确定：你是否有兴趣跟从离开给定地址的流，是否有兴趣迭代引用给定地址的所有位置。下面我们将介绍执行上述两种操作的函数。其中几个函数用于支持对一组交叉引用进行迭代。这些函数支持交叉引用序列的概念，并需要一个current
 交叉引用，以返回一个next
 交叉引用。使用交叉引用迭代器的示例请参见15.5.3 节。
long Rfirst(long from)
 ，返回给定地址向其转交控制权的第一个位置。如果给定的地址没有引用其他地址，则返回 BADADDR （-1）。
long Rnext(long from, long current)
 ，如果current
 已经在前一次调用 Rfirst
 或Rnext
 时返回，则返回给定地址（from
 ）转交控制权的下一个位置。如果没有其他交叉引用存在，则返回BADADDR 。
long XrefType()
 ，返回一个常量，说明某个交叉引用查询函数（如 Rfirst
 ）返回的最后一个交叉引用的类型。对于代码交叉引用，这些常量包括 fl_CN
 （近调用）、fl_CF
 （远调用）、fl_JN
 （近跳转）、fl_JF
 （远跳转）和 fl_F
 （普通顺序流）。
long RfirstB(long to)
 ，返回转交控制权到给定地址的第一个位置。如果不存在对给定地址的交叉引用，则返回 BADADDR (-1）。
long RnextB(long to, long current)
 ，如果current
 已经在前一次调用 RfirstB
 或RnextB
 时返回，则返回下一个转交控制权到给定地址（to
 ）的位置。如果不存在其他对给定位置的交叉引用，则返回 BADADDR (-1）。
每次调用一个交叉引用函数，IDA 都会设置一个内部 IDC 状态变量，指出返回的最后一个交叉引用的类型。如果需要知道你收到的交叉引用的类型，那么在调用其他交叉引用查询函数之前，必须调用 XrefType
 函数。
15.4.8 数据交叉引用函数