# 简介
CVE-2020-1957，Spring Boot中使用Apache Shiro进行身份验证、权限控制时，可以精心构造恶意的URL，利用Apache
Shiro和Spring Boot对URL的处理的差异化，可以绕过Apache Shiro对Spring
Boot中的Servlet的权限控制，越权并实现未授权访问。
# 环境
  * Java(TM) SE Runtime Environment (build 1.8.0_112-b16)
  * Apache Shiro 1.5.1
  * Spring Boot 1.5.22.RELEASE
项目代码可以通过threedr3am师傅项目进行魔改，加深理解
    https://github.com/threedr3am/learnjavabug
pom.xml
        org.springframework.boot
        spring-boot-starter-parent
        1.5.22.RELEASE
      4.0.0
      cve-2020-1957
            org.apache.maven.plugins
            maven-compiler-plugin
              7
              7
          org.springframework.boot
          spring-boot-starter-web
          org.apache.shiro
          shiro-web
          1.5.1
          org.apache.shiro
          shiro-spring
          1.5.1
在概念层，`Shiro`架构包含三个主要的理念：`Subject`、`SecurityManager`、`Realm`。
`Spring Boot`整合`Shiro`的核心逻辑和代码
Realm.java
    public class Realm extends AuthorizingRealm {
        @Override
        protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
            return null;
        }
        @Override
        protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {
            String username = (String) token.getPrincipal();
            if (!"rai4over".equals(username)) {
                throw new UnknownAccountException("账户不存在!");
            }
            return new SimpleAuthenticationInfo(username, "123456", getName());
        }
    }
`Shiro`中的`Realm`提供待验证数据的验证方式。
`SecurityManager`要验证用户身份，那么它需要从`Realm`获取相应的用户进行比较以确定用户身份是否合法；也需要从`Realm`得到用户相应的角色/权限进行验证用户是否能进行操作。
比如此处代码就通过重写`doGetAuthorizationInfo`方法，并以账户名`rai4over`和密码`123456`为标准对登录进行了身份认证。
ShiroConfig.java
    @Configuration
    public class ShiroConfig {
        @Bean
        MyRealm myRealm() {
            return new MyRealm();
        }
        @Bean
        SecurityManager securityManager() {
            DefaultWebSecurityManager manager = new DefaultWebSecurityManager();
            manager.setRealm(myRealm());
            return manager;
        }
        @Bean
        ShiroFilterFactoryBean shiroFilterFactoryBean() {
            ShiroFilterFactoryBean bean = new ShiroFilterFactoryBean();
            bean.setSecurityManager(securityManager());
            bean.setLoginUrl("/login");
            bean.setSuccessUrl("/index");
            bean.setUnauthorizedUrl("/unauthorizedurl");
            Map map = new LinkedHashMap();
            map.put("/login", "anon");
            map.put("/xxxxx/**", "anon");
            map.put("/aaaaa/**", "anon");
            map.put("/admin", "authc");
            map.put("/admin.*", "authc");
            map.put("/admin/**", "authc");
            map.put("/**", "authc");
            bean.setFilterChainDefinitionMap(map);
            return bean;
        }
    }
`Shiro`配置类，创建`SecurityManager`，并为`SecurityManager`提供并设置`Realm`。在`shiroFilterFactoryBean`中设置具体的拦截器规则，admin及其路径下的url设置权限为`authc`，需要经过登录认证后才能访问；其他的`login`、`xxxxx`等URL则设置权限为`anon`，可以无需权限认证进行匿名访问。
TestController.java
    @RestController
    public class TestController {
        @RequestMapping(value = "/login")
        public String login(String username, String password) {
            Subject subject = SecurityUtils.getSubject();
            try {
                subject.login(new UsernamePasswordToken(username, password));
                return "登录成功!";
            } catch (AuthenticationException e) {
                e.printStackTrace();
                return "登录失败!";
            }
        }
        @RequestMapping(value = "/admin", method = RequestMethod.GET)
        public String admin() {
            return "admin secret bypass and unauthorized access";
        }
        @RequestMapping(value = "/xxxxx", method = RequestMethod.GET)
        public String xxxxx() {
            return "xxxxx";
        }
    }
`Spring Boot`的`Controller`，包含和配置类对应的路由`admin`、`xxxxx`等的响应方式。
# 复现
`xxxxx`无需认证访问内容
`admin`访问就跳转到`login`登录
`/xxxxx/..;/admin`越权访问`admin`内容成功
# 分析
## Shiro 处理
我们发送的恶意`/xxxxx/..;/admin`请求首先经过`Shiro`进行处理
org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver#getChain
`shiro`中的`PathMatchingFilterChainResolver`类对传入的`URL`进行解析，并和已经配置的过滤器规则进行匹配进行判断。
org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver#getPathWithinApplication
实现自定义请求到应用程序路径的解析行为，参数为`ServletRequest`对象，包含请求的上下文信息：
org.apache.shiro.web.util.WebUtils#getPathWithinApplication
`getPathWithinApplication`检测并返回路径。
org.apache.shiro.web.util.WebUtils#getRequestUri
从请求上下文对象中获取具体的`URI`，也就是`/xxxxx/..;/admin`，然后传入`decodeAndCleanUriString`。
org.apache.shiro.web.util.WebUtils#decodeAndCleanUriString
将`;`后面进行截断，此时的uri为`/xxxxx/..`，返回并作为参数传入`normalize`。
org.apache.shiro.web.util.WebUtils#normalize(java.lang.String)
继续跟进
org.apache.shiro.web.util.WebUtils#normalize(java.lang.String, boolean)
    private static String normalize(String path, boolean replaceBackSlash) {
        if (path == null)
            return null;
        // Create a place for the normalized path
        String normalized = path;
        if (replaceBackSlash && normalized.indexOf('\\') >= 0)
            normalized = normalized.replace('\\', '/');
        if (normalized.equals("/."))
            return "/";
        // Add a leading "/" if necessary
        if (!normalized.startsWith("/"))
            normalized = "/" + normalized;
        // Resolve occurrences of "//" in the normalized path
        while (true) {
            int index = normalized.indexOf("//");
            if (index 
修改了`requestURI`的获取方式，经过更准确的解析获取。
# 参考