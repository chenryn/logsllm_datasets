our fuzzing strategies and vulnerability detection, and then
we describe both fuzzing stages.
6.1 Fuzzing Strategies
We employed several fuzzing strategies from the mutators
used in Peach Fuzzer5 and American Fuzzy Lop,6 which are
relevant for TLS fuzzing. We implemented these strategies
using our modiﬁable variables.
5http://community.peachfuzzer.com/v3/Mutators.html
6http://lcamtuf.coredump.cx/aﬂ/technical details.txt
 ClientHelloHandler prepareMessage() parseMessage() ClientHelloMessage cipherSuites: ModifiableByteArray cipherSuiteLength: ModifiableInteger  ... getCipherSuites() setCipherSuites() ...TLS AttackerTLS AttackerModifiableVariableAttacksTLSTransportFuzzerModulesPackagesconfigconstantscryptoprotocolrecordworkflowalertapplicationheartbeathandshakeTestSuite HandshakeMessage type: ModifiableByte  ... getType() ... HandshakeMessageHandler prepareMessage() parseMessage() ClientHelloMessage cipherSuites: ModifiableByteArray cipherSuiteLength: ModifiableInteger  ... getCipherSuites() setCipherSuites() ... ClientHelloMessage cipherSuites: ModifiableByteArray cipherSuiteLength: ModifiableInteger  ... getCipherSuites() setCipherSuites() ... ClientHelloHandler prepareMessage() parseMessage() ClientHelloHandler prepareMessage() parseMessage()1498above cases is detected, TLS-Attacker stores the protocol
ﬂow in an XML ﬁle. This ﬁle can later be used for further
analysis.
6.3 Two-Stage Fuzzing
Cryptographic Attacks.
In the ﬁrst stage, we investigate the cryptographic be-
havior of the analyzed TLS server. We attempt to trigger
diﬀerent error messages by sending invalid padding bytes or
forcing the server to accept invalid elliptic curve points [21,
37]. TLS-Attacker can dynamically collect the server re-
sponses and store them for further analysis.
Currently, TLS-Attacker implements checks for Bleichen-
bacher’s attack [23], padding oracle attacks [55], invalid curve
attacks [37], and POODLE [45].
Fuzzing for Buffer Boundary Violations.
TLS-Attacker allows one to execute random variable mod-
iﬁcations or to construct invalid messages. We use these
features in the second stage where we attempt to trigger an
invalid server behavior and ﬁnd buﬀer boundary violations.
This stage is divided into three phases.
The starting point for each phase is a set of known TLS
protocol ﬂows. This includes correct TLS protocol ﬂows as
depicted in Figure 1, as well as several invalid TLS protocol
ﬂows identiﬁed in the previous years [39, 17, 25]. At the
beginning of the fuzzing process, TLS-Attacker attempts to
execute these protocol ﬂows and stores correctly executed,
complete protocol ﬂows for further executions in the next
phases. These are described below.
Phase 1: Searching for “inﬂuencing variables”. A
TLS protocol ﬂow and its messages contain a huge amount
of variables: message length values, derived keys, or cer-
tiﬁcates. Not all of these variables are suitable for fuzzing.
For example, it is not necessary to fuzz random values (e.g.,
client random) or variables which are not validated. There-
fore, our framework allows one to use an explicit blacklist
of variables that should be omitted during the fuzzing pro-
cess. In addition, in the ﬁrst phase, TLS-Attacker iteratively
changes all variables from the TLS protocol ﬂow and ana-
lyzes whether those variables inﬂuence the correct protocol
ﬂow.
For example, we found that some TLS libraries do not
validate speciﬁc length variables at all. See the following
section.
Phase 2: Fuzzing with variable modiﬁcations. In the
second phase, we continue only with the variables from the
ﬁrst phase that were identiﬁed as inﬂuencing the TLS proto-
col ﬂow. We execute correct protocol ﬂows with randomly
modiﬁed variables.
In this phase, more variables can be
modiﬁed at once or the modiﬁcations can be chained.
As discussed in Section 2.2, a TLS record can contain one
protocol message, several protocol messages (this is the de-
fault behavior of TLS-Attacker), or even one protocol mes-
sage can be sent in several records. The distribution of pro-
tocol messages in a diﬀerent number of records could po-
tentially trigger an invalid server behavior. Therefore, in
addition to the variable modiﬁcations, in this phase we at-
tempt to split protocol messages into diﬀerent numbers of
TLS records with randomly chosen record lengths.
Figure 4: Fuzzing with TLS-Attacker is divided
into two stages; ﬁrst various cryptographic attacks
are executed, then a systematic protocol fuzzing is
started.
For example, TLS-Attacker generates the following mod-
iﬁcations during fuzzing with integers. The original integer
value can be XORed with random bits, shifted left or right,
and increased or decreased by a random value. In addition,
speciﬁc values can be returned based on a dictionary consist-
ing of a zero value and values causing overﬂows in speciﬁc
number representations. Similar strategies are employed by
modiﬁcation of further numeric data types.
Byte arrays are modiﬁed by applying additional strategies.
TLS-Attacker automatically generates modiﬁcations which
duplicate arrays, remove or insert speciﬁc bytes, or shuﬄe
the given byte array. The dictionary with explicit values
contains an empty array or arrays consisting of 0x00 and
0xFF values.
Note that the design of modiﬁable variables allows TLS-
Attacker to chain generated modiﬁcations as well.
6.2 Vulnerability Detection
In order to detect buﬀer boundary violations, integer over-
ﬂows, or other memory corruptions [34, 33], the runtime
behavior of the TLS library has to be observed. For this
purpose, we use AddressSanitizer (ASan).7 ASan is a mem-
ory error detector which can be enabled at compile time in
recent versions of LLVM or GCC compilers. It is typically
used while fuzzing C and C++ applications. If a fuzzer ﬁnds
a memory error in an application compiled with ASan, the
application crashes, prints an error message, and exits with
a non-zero code.
We use Asan to compile C and C++ TLS libraries before
we start TLS-Attacker fuzzing. If a memory error or a dif-
ferent bug in a TLS server compiled with ASan is triggered,
the server crashes and outputs an error message describing
the cause of the detected boundary violation.
ASan is of course not suitable for TLS applications devel-
oped in diﬀerent languages, like Java. For anomaly detection
in Java servers and other servers which cannot be compiled
with ASan, we analyze the protocol ﬂows with a TLS context
analyzer. The TLS context analyzer investigates whether a
TLS protocol ﬂow has been executed correctly, contains an
invalid protocol ﬂow with an additional protocol message,
or whether a message in a valid protocol ﬂow is modiﬁed by
a speciﬁc modiﬁcation.
In case a runtime error or an invalid protocol ﬂow in the
7http://clang.llvm.org/docs/AddressSanitizer.html
Stage 2: FuzzingStage 2: FuzzingStage 1: Crypto- Bleichenbacher Attack- Padding Oracle Attack- POODLE- Invalid Curve Attack- ...Stage 1: Crypto- Bleichenbacher Attack- Padding Oracle Attack- POODLE- Invalid Curve Attack- ... Phase 1:  Variable Detection Phase 2:  Random Variable Fuzzing  Record modification Phase 3:  Random Protocol Flow  Random Variable Fuzzing  Record modification1499Phase 3: Fuzzing with random protocol ﬂows.
In
the last phase, we continue the fuzzing process with addi-
tional randomized protocol ﬂows. For this purpose, we add
or remove random protocol messages from the conﬁgured
protocol sequences.
7. TLS FUZZING EVALUATION
The number of fuzzing attempts in Stage 2 can be con-
ﬁgured by the developer. Depending on the performance of
the tested library, the number of TLS protocol ﬂows and the
resulting duration varies. For example, for OpenSSL-1.1.0-
pre3, we were able to execute 166,000 ﬂows in one hour,
resulting in about 46 protocol ﬂows per second. The tests
were executed on a laptop with an Intel Core i7 5600U CPU.
Note that it is not our intention to fully analyze the im-
pact of the detected vulnerabilities or describe complete at-
tacks. Our contribution is to prove the practicability of our
fuzzing approach by ﬁnding novel vulnerabilities and their
sources. The presented vulnerabilities have been reported
and patched by the library developers, proving their rele-
vance.
7.1 Padding Oracle Attacks
In recent years we observed several scientiﬁc results prov-
ing the padding oracle exploitation possibilities in widely
used TLS libraries. Irazouqui et al. showed how to exploit
cache access times in co-located virtual machines in cloud en-
vironments to gain suﬃcient timing diﬀerences for executing
the Lucky 13 attack [35]. Almeida et al. and Albrecht and
Paterson showed that an extended version of the Lucky 13
timing attack is still applicable to the s2n library provided
by Amazon [14, 11].
Surprisingly, it is not always necessary to execute complex
timing attacks. As we show in the following section promi-
nent TLS libraries are vulnerable to direct padding oracle
attacks, where servers respond with diﬀerent alert messages.
The vulnerabilities result from incorrect sanity checks of the
decrypted CBC ciphertexts [13].
Unusual padding oracle in Botan.
By evaluating Botan 1.11.21, we observed diﬀerent re-
sponse messages sent by the analyzed TLS server. Further
analysis revealed that directly after the record data is de-
crypted, the implementation evaluates the length of the un-
padded data record_len and whether this data has enough
length
using
TLS_RSA_WITH_AES_128_CBC_SHA, the HMAC is 20-byte long):
i f ( r e c o r d l e n 
lm, there are not enough plaintext bytes to validate both
HMAC and padding. Therefore, the padding validation
should run over 256 dummy padding bytes and the HMAC
should be validated over the record header and the ﬁrst
lm − lhmac bytes of m [13].
Because the OpenSSL code does not validate the decrypted
message length, it is possible to completely skip the HMAC
validation. Consider a vulnerable server using HMAC-SHA
that processes a CBC ciphertext. The CBC ciphertext de-
crypts to 32 valid padding bytes 0x1F. After the message is
decrypted in the second step, the server computes maxpad =
lm − lhmac = 12.
In the third step, it computes hmac(cid:48)
over the TLS record header and an empty message. It con-