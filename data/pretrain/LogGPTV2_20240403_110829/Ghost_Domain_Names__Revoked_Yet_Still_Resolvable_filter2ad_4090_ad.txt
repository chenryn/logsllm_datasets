Another issue is about authoritative server migration. Al-
lowing cached NS records to be overwritten can speed up le-
gitimate migration of an authoritative server. However, with
the strict bailiwick rule and current DNS protocol, resolvers
will not be aware of the migration until cached delegation
data expires. What’s even worse, DNS administrators tend
to give large TTL values to delegation data. We measured
the TTL values of the delegation data of the top one mil-
lion Internet domains (ranked by alexa.com), and we
found that the TTL values of most popular domains are one
(12.04%) or two days (78.41%). This study indicates that
with the strict bailiwick rule, legitimate authority changes
would take days to complete.
The second approach can thwart the ghost domain prob-
lem since all self-issued delegation data has the same trust
level [13]. Also, this approach remains resilient to the au-
thority mismatch problem, as the self-issued delegation data
from the child zone has higher trust levels than those from
the parent. This approach has the additional beneﬁt of elim-
inating some of the attack vectors that could be exploited
by cache poisoning attacks [31]. But it still suffers from the
authority migration problem.
The third approach (limiting TTL updates) does not have
penalties for the legitimate changes of authoritative servers.
This approach also remains resilient to authority mismatch,
and it is the simplest one in terms of implementation. How-
ever, we only consider this approach as a temporary solu-
tion — it does not actively address the issue of the loosely
deﬁned update policy.
Although the second approach has more advantages in
practice, we prefer the ﬁrst one as the recommended so-
lution. A strict bailiwick rule that rejects self-issued dele-
gation data is semantically correct. More importantly, the
DNS standard must clarify and formally deﬁne the cache
update policy. We hope our work will promote such efforts
in the DNS standards community.
5.2. Current Defense Implementations
As we have shown in the section 3, although the very
popular DNS implementation (BIND) and most of the pub-
lic DNS servers we tested are vulnerable, three implemen-
tations: MaraDNS (version Deadwood-3.0.03), Microsoft
DNS (version Windows Sever 2008 R2) and Unbound (ver-
sion 1.4.11), are immune to the ghost domain attack. The
immunity of the latest version of Microsoft DNS derives
from a new feature called DNS cache locking [12], but we
cannot know the details of this feature because of its pro-
prietary implementation. We reviewed the other two imple-
mentations and it turns out that each of them implemented
one of the above proposed solutions. Since there is no prior
public disclosure of the ghost domain behavior, we do not
know whether these two versions of DNS implementation
intentionally address the ghost domain name problems or
not. Nevertheless, we summarize our ﬁndings on these im-
plementations as follows: MaraDNS, has already applied
the ﬁrst solution listed in the above section. It only accepts
a zone’s delegation data from its parent zone. The Unbound
DNS server adopts the 3rd solution that allows overwriting
of delegated data but keeps its old TTL value in the cache.
5.3. Delegation Semantics in DNSSEC
We also consider the implication of the ghost domain at-
tack on the DNSSEC system, and we believe a fully de-
ployed DNSSEC is immune to the ghost domain problem.
The immunity does not come from the initial intention of
DNSSEC using cryptographic signatures to protect the in-
tegrity of DNS data. Instead, the immunity is an outcome
of a strictly deﬁned delegation behavior. In short, DNSSEC
deﬁnes a new RR type, DS (Delegation Signer), to form
a chain of trust between parent and child zone.
In the
DNSSEC standard, the speciﬁcation [3] explicitly states
that DS record can only be obtained from the parent zone.
Therefore a ghost domain attacker cannot renew DS record
of the ghost domain by himself. Without a valid DS record,
the trust chain will be broken, so haunted security-aware re-
solvers will only resolve the ghost domain as non-authentic
data.
However, in an environment of partial DNSSEC deploy-
ment, a security-aware resolver could still be haunted to
resolve a ghost domain as authentic results. The reason
is that partial deployment DNSSEC raises a trust anchor
management issue called “isolated DNSSEC islands” [26].
Without fully DNSSEC deployment, A security-aware re-
solver cannot validate DNS data from isolated DNSSEC-
enabled zones with one single trust anchor from the root. In-
stead, it needs to be conﬁgured with third-party trust anchor
providers, such as DNSSEC Look-aside Validation (DLV)
providers [33] [34] or public trust anchor lists [24], in or-
der to obtain DNSKEY records of isolated DNSSEC-enabled
zones to be able to authenticate their DNS data. The at-
tacker can register DNSKEY records of the ghost domain to
DLV providers and public trust anchor lists, so that DNS
data of the ghost domain could still be validated by those
trust anchors, even though the DS record is deleted from the
parent zone. To prevent this, DLV providers and public trust
anchor lists need to sync their database with DNS registries
in a timely manner.
In other words, a malicious domain
not only needs to be revoked from the DNS registry, it also
should be revoked simultaneously from third-party trust an-
chor providers. We are currently investigating revocation
behaviors of several third-party trust anchor providers.
6. Related Work
carefully evaluated.
Study of Malicious Domain Names. Our work is led by
an initial motivation of understanding the lifetime of mali-
cious domains and the effects of domain takedown. In pre-
vious studies [22] [23], Moore et. al. showed that most of
phishing domains stay alive for several tens of hours before
being taken down. The ghost domain problem could make
the effect of takedown unpredictable.
Malicious domains must be identiﬁed ﬁrst before be-
ing taken down. Recent research has proposed many ap-
proaches to distinguish malicious domain names from be-
nign DNS usage. These approaches include extracting var-
ious features of malicious domain names from the usage of
RR records [15], leveraging registration information [14],
passive access logging [29] [1] [6] and lexical construction
[19] [35]. From an intrusion detection perspective, the ghost
domain exploitation is detectable as it has unusual usage of
DNS records.
Cache Poisoning Attacks and Countermeasures. The
ghost domain vulnerability comes from the loosely deﬁned
sanity check of DNS cache. This weakness is also being
exploited by DNS cache poisoning attacks. As early as
1990, Steve Bellovin had indicated that a malicious DNS
server can pollute cache resolvers by piggybacking arbitrary
records in referral sections [5]. In response, the credibility
rule and the bailiwick rule were proposed [32], and then
adopted by most of DNS implementations. However, these
rules are still insecure and recently have been exploited
by the Kaminsky-class cache poisoning attack[18]. After
disclosure of the Kaminsky-class attack, a number of ap-
proaches were proposed to increase DNS forgery resistance
[10] [9] [16] [28], but only a few studies were concerned
about the weakness of the DNS cache update policy. Son
et. al. [31] gave a formal study of the bailiwick rule and the
credibility rule; this work helped us to clarify some details
of these rules.
DNS Cache Inconsistency. To some extent, the ghost
domain problem is a form of DNS cache inconsistency.
As DNS only supports a weak cache consistency by us-
ing TTL to limit the lifetime of cached copies, authorita-
tive servers cannot propagate data changes to resolvers in
a timely way, failing completely in the ghost domain case.
Previous DNS studies have proposed a few approaches to
address this problem. DNScup [8] proactively pushes data
changes from authoritative server to cache resolvers. Os-
terwail et. al. proposed Zone State Revocation [25], which
embedded DNSKEY revocation in DNS response to notify
resolvers. Such cache consistency mechanisms could po-
tentially avoid the ghost domain problem. However, con-
sidering the critical role of DNS, such a change needs to be
DNS Misconﬁguration.
In [17], Kalafut et. al. presented
an interesting phenomenon named orphan DNS server. An
orphan DNS server is a DNS server which has an address
record in the DNS, even though its parent domain does not
exist. Orphan DNS servers and ghost domains are super-
ﬁcially similar as both of them resolve domain names that
should not exist. But they are substantially different. While
orphan DNS servers come from typographical errors and
misconﬁguration in top level domain zone ﬁles, ghost do-
mains are more fundamentally derived from the ambigu-
ously deﬁned DNS cache update policy.
7. Conclusion
In this paper, we present a vulnerability in DNS cache
update policy, which prevents effective domain name revo-
cation. Attackers could cause a malicious domain name to
be continuously resolvable even after the delegated data has
been deleted from the domain registry and after the TTL
associated with entry supposed expires. These deleted but
resolvable domains are called ghost domain names.
Although we have not found evidence that the vulnera-
bility has been used by previous malicious attacks or bot-
nets, our test results show that the majority of public DNS
servers and implementations are vulnerable. Our experi-
ments have also demonstrated that a large scale exploitation
of this vulnerability is practical. This vulnerability can po-
tentially allow a botnet to continuously use malicious do-
mains which have been identiﬁed and removed from the
domain registry. The same vulnerability also potentially al-
lows attackers to make a malicious domain appeared to be
deleted at most of the DNS servers but still resolvable at
speciﬁcally targeted DNS resolvers. This makes the detec-
tion of ghost domains even more difﬁcult.
We recommend that the DNS community apply a strict
bailiwick rule to ﬁx this vulnerability. Several DNS imple-
mentations have adopted various defense mechanisms, but
many popular implementations are still vulnerable. Our on-
going work includes implementing patches for open source
DNS implementations and addressing possible performance
and management issues related to the implementation of a
strict DNS cache update policy.
Acknowledgments
We would like to especially thank Jason Gustafson for
valuable discussions and thoughtfully proofreading this ma-
terial, as well as Roberto Perdisci and Zhankao Wen for
assistance with experimental resource. We also grate-
fully thank the anonymous reviewers for their valuable
comments, and Jianwei Zhuge, Meng Hu, Zongxu Zhao,
Pengfei Xu, Xun Lu and Kevin Warrick for their sugges-
tions and feedback. This work was supported in part by the
National Basic Research Program of China (973 Project)
grant 2009CB320505. Kang Li’s research on this work was
partially supported by the USA National Science Founda-
tion (NSF) CISE grant 1127195 and a gift from Cisco sys-
tems. Jun Li was partially supported by the 2010 Chair of
Excellence award from the University Carlos III of Madrid
(UC3M), Spain, and the NSF CAREER award under award
no. CNS-0644434. Any opinions, ﬁndings, and conclusions
or recommendations expressed in this material are those of
the authors and do not necessarily reﬂect the views of the
funding agencies.
References
[1] M. Antonakakis, R. Perdisci, D. Dagon, W. Lee, and
N. Feamster. Building a Dynamic Reputation System for
DNS. In 19th Usenix Security Symposium, 2010.
[2] R. Arends, R. Austein, M. Larson, D. Massey, and S. Rose.
DNS Security Introduction and Requirement. RFC4033,
2005.
[3] R. Arends, R. Austein, M. Larson, D. Massey, and
S. Rose. Resource Records for the DNS Security Exten-
sions. RFC4034, 2005.
[4] D. Atkins and R. Austein. Threat Analysis of the Domain
Name System (DNS). RFC3833, 2004.
[5] S. M. Bellovin. Using the Domain Name System for System
Break-ins. In Proceedings of the 5th conference on USENIX
UNIX Security Symposium - Volume 5, pages 18–18, Berke-
ley, CA, USA, 1995. USENIX Association.
[6] L. Bilge, E. Kirda, C. Kruegel, and M. Balduzzi. EX-
POSURE: Finding Malicious Domains Using Passive DNS
Analysis. Proceedings of Network and Distributed Security
Symposium (NDSS’11), 2008.
[7] R. Boscovich. Taking Down Botnets: Microsoft and the
Rustock Botnet. http://blogs.technet.com/b/
microsoft_on_the_issues/archive/2011/
03/18/taking-down-botnets-microsoft-
and-the-rustock-botnet.aspx, 2011.
[8] X. Chen, H. Wang, S. Ren, and X. Zhang. Maintaining
Strong Cache Consistency for the Domain Name System.
IEEE Transactions on Knowledge and Data Engineering,
19:1057–1071, 2007.
[9] D. Dagon, M. Antonakakis, K. Day, X. Luo, C. Lee, and
W. Lee. Recursive DNS Architectures and Vulnerability Im-
plications. In Proceedings of Network and Distributed Sys-
tem Security Symposium (NDSS’09), 2009.
[10] D. Dagon, M. Antonakakis, P. Vixie, T. Jinmei, and W. Lee.
Increased DNS Forgery Resistance Through 0x20-bit En-
coding: security via leet queries. In Proceedings of the 15th
ACM conference on Computer and communications secu-
rity, pages 211–222. ACM, 2008.
[11] D. Dagon, N. Provos, C. Lee, and W. Lee. Corrupted DNS
Resolution Paths: The Rise of a Malicious Resolution Au-
thority. In Proceedings of Network and Distributed Security
Symposium (NDSS’08), 2008.
[12] M. DNS.
DNS Cache Locking.
http:
//technet.microsoft.com/en-us/library/
ee683892(WS.10).aspx.
[13] R. Elz and R. Bush. Clariﬁcations to the DNS speciﬁcation.
RFC2181, 1997.
[14] M. Felegyhazi, C. Kreibich, and V. Paxson. On the Poten-
tial of Proactive Domain Blacklisting. In Proceedings of the
3rd USENIX conference on Large-scale exploits and emer-
gent threats: botnets, spyware, worms, and more, LEET’10,
pages 6–6, Berkeley, CA, USA, 2010. USENIX Association.
[15] T. Holz, C. Gorecki, K. Rieck, and F. Freiling. Measuring
and Detecting Fast-Flux Service Networks. In Proceedings
of Network and Distributed Security Symposium (NDSS’08),
2008.
[16] J. G. Hy. Anti DNS Spooﬁng-Extended Query ID (XQID).
http://www.jhsoft.com/dns-xqid.htm, 2008.
[17] A. J. Kalafut, M. Gupta, C. A. Cole, L. Chen, and N. E.
Myers. An Empirical Study of Orphan DNS Servers in the
Internet. In Proceedings of the 10th annual conference on
Internet measurement, IMC ’10, pages 308–314, New York,
NY, USA, 2010. ACM.
[18] D. Kaminsky. Its the end of the cache as we know it. Black-
Hat USA, 2008.
[19] J. Ma, L. Saul, S. Savage, and G. Voelker. Beyond Black-
lists: Learning to Detect Malicious Web Sites from Sus-
picious URLs.
In Proceedings of the 15th ACM SIGKDD
international conference on Knowledge discovery and data
mining, pages 1245–1254. ACM, 2009.
[20] P. Mockapetris. Domain Names - Concepts and Facilities.
RFC1034, 1987.
[21] P. Mockapetris. Domain Names - Implementation and Spec-
iﬁcation. RFC1035, 1987.
[22] T. Moore and R. Clayton. Examining the Impact of Web-
site Take-Down on Phishing.
In Proceedings of the anti-
phishing working groups 2nd annual eCrime researchers
summit, eCrime ’07, pages 1–13, New York, NY, USA,
2007. ACM.
[23] T. Moore and R. Clayton.
Cooperation in the Fight against Phishing.
searchers Summit, 2008, pages 1–14. IEEE, 2008.
The Consequence of Non-
In eCrime Re-
[24] E. Osterweil, D. Massey, and L. Zhang. Deploying and mon-
itoring dns security (dnssec). Computer Security Applica-
tions Conference, Annual, 0:429–438, 2009.
[25] E. Osterweil, V. Pappas, D. Massey, and L. Zhang. Zone
State Revocation for DNSSEC. In Proceedings of the 2007
workshop on Large scale attack defense, LSAD ’07, pages
153–160, New York, NY, USA, 2007. ACM.
[26] E. Osterweil, M. Ryan, D. Massey, and L. Zhang. Quanti-
fying the Operational Status of the DNSSEC Deployment.
In Proceedings of the 8th ACM SIGCOMM conference on
Internet measurement, IMC ’08, pages 231–242, New York,
NY, USA, 2008. ACM.
[27] V. Pappas, Z. Xu, S. Lu, D. Massey, A. Terzis, and L. Zhang.
Impact of Conﬁguration Errors on DNS Robustness. In ACM
SIGCOMM Computer Communication Review, volume 34,
pages 319–330. ACM, 2004.
[28] R. Perdisci, M. Antonakakis, X. Luo, and W. Lee. WSEC
DNS: Protecting Recursive DNS Resolvers from Poisoning
In IEEE/IFIP International Conference on De-
Attacks.
pendable Systems & Networks, DSN’09., pages 3–12. IEEE,
2009.
[29] R. Perdisci, I. Corona, D. Dagon, and W. Lee. Detecting Ma-
licious Flux Service Networks through Passive Analysis of
Recursive DNS Traces. In Annual Computer Security Appli-
cations Conference, volume 0, pages 311–320, Los Alami-
tos, CA, USA, 2009. IEEE Computer Society.
[30] G. Sisson.
http://dns.
measurement-factory.com/surveys/201010/,
2010.
DNS SURVEY.
[31] S. Son and V. Shmatikov. The Hitchhikers Guide to DNS
Cache Poisoning. In Security and Privacy in Communica-
tion Networks, volume 50 of Lecture Notes of the Institute
for Computer Sciences, Social Informatics and Telecommu-
nications Engineering, pages 466–483. Springer Berlin Hei-
delberg, 2010.
[32] P. Vixie. DNS and BIND Security Issues. In Proceedings of
the 5th conference on USENIX UNIX Security Symposium -
Volume 5, pages 19–19, Berkeley, CA, USA, 1995. USENIX
Association.
[33] P. Vixie. Preventing Child Neglect in DNSSECbis Using
Lookaside Validation(DLV). IEICE Transactions on Com-
munications, pages 1326–1330, 2005.
[34] S. Weiler.
DNSSEC Lookaside Validation (DLV).
RFC5074, 2007.
[35] S. Yadav, A. Reddy, A. Reddy, and S. Ranjan. Detecting
Algorithmically Generated Malicious Domain Names.
In
Proceedings of the 10th annual conference on Internet mea-
surement, pages 48–61. ACM, 2010.