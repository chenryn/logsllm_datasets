### 6.4 Experimental Results

The execution time of task \(\tau_{L,1}\) is adjusted to maintain its nominal response time while accounting for the preemptions by \(\Pi_H\). We ran each configuration for 300 seconds, both with and without Blinder. As shown in Table 2, the response time of \(\tau_{L,1}\) naturally increases with the number of \(\Pi_H\) preemptions (denoted as #HP) in both cases. However, the difference between P-RES-NI and P-RES remains almost constant. Increasing the number of \(\Pi_L\) tasks (denoted as #LA) that arrive at time 44, thus increasing the size of the arrival queue, does not change this trend. These results indicate that the overhead due to Blinder's lag-based task release is statistically insignificant and that it is scalable.

### 7. Related Work

Timing channels pose a significant threat to information security [15, 18]. Microarchitectural timing channels often involve shared hardware resources such as caches [34], branch predictors [24], memory banks, TLBs, and interconnects [30]. Attackers typically exploit the trace left by other users or overwhelm the bandwidth. Fuzzy-time [19, 42] introduces noise to system clocks to prevent adversaries from obtaining precise physical time. Virtual time approaches [25, 45] enforce execution determinism by providing artificial time to processes. Although these techniques can mitigate timing channels formed from observing physical time progress, they cannot prevent the scenarios presented in this paper because the tasks do not require any time information to perceive changes in another partition's temporal behavior.

Studies have shown that real-time scheduling can leak information, whether intended or not. Son et al. [38] provide a mathematical framework for analyzing the existence and deducibility of covert channels under Rate Monotonic scheduling. Similarly, Völp et al. [44] address the problem of information flows that can be established by altering task execution behavior. They proposed modifications to the fixed-priority scheduler to close timing channels while achieving real-time guarantees. In [43], Völp et al. also tackle the issues of information leakage through real-time locking protocols and propose transformations to prevent unintended information leakage. All these works address task-level information leakage, whereas our work concerns information flow among time-partitions through varying partition-level behavior.

Formal verification can be used to prove the absence of covert timing channels. Murray et al. [31] show the non-interference of Sel4’s time-partitions isolated by a static round-robin schedule. Liu et al. [29] prove that partitions can be dynamically scheduled while preserving non-interference if task arrivals are always aligned with partition activation. Vassena et al. [41] present a language-level information-flow control system to eliminate covert timing channels by fixing the exact allocation of global-time for each parent-children thread group (analogous to the partition-task relationship), allowing user threads to access the global clock.

### 8. Conclusion

Blinder makes partition-local schedules deterministic by controlling the timing of task release, thereby preventing local tasks from perceiving other partitions' varying behavior. We demonstrated that with Blinder, adversaries cannot form an algorithmic covert timing channel through hierarchical scheduling, even if the system is configured in the most favorable way for them. Blinder enables applications to enjoy the flexibility of dynamic partitioning schemes while guaranteeing the partition obliviousness provided by static approaches. It is backward-compatible and minimally intrusive, requiring no modification to the underlying (both global and local) scheduling mechanisms while incurring statistically insignificant overheads on the scheduler. Therefore, existing systems can benefit from the improved security and resource efficiency that Blinder provides without a complete re-engineering, which is advantageous, especially for safety-critical systems that require high re-certification costs.

### Acknowledgments

The authors would like to thank the anonymous reviewers for their valuable comments and suggestions. This work is supported in part by NSF grants 1945541, 1763399, 1715154, and 1521523. Any opinions, findings, and conclusions or recommendations expressed here are those of the authors and do not necessarily reflect the views of the sponsors.

### References

[1] LynxSecure. lynxsecure-separation-kernel-hypervisor. https://www.lynx.com/products/

[2] QNX Adaptive Partitioning Thread Scheduler. https://www.qnx.com/developers/docs/7.0.0/index.html#com.qnx.doc.neutrino.sys_arch/topic/adaptive.html

[3] QNX Hypervisor. https://blackberry.qnx.com/en/software-solutions/embedded-software/industrial/qnx-hypervisor

[4] QNX Platform for Digital Cockpits. https://blackberry.qnx.com/content/dam/qnx/products/bts-digital-cockpits-product-brief.pdf

[5] Wind River Helix Virtualization Platform. https://www.windriver.com/products/helix-platform/

[6] Wind River VxWorks 653 Platform. https://www.windriver.com/products/vxworks/certification-profiles/#vxworks_653

[7] Luca Abeni and Giorgio Buttazzo. Integrating multimedia applications in hard real-time systems. In Proc. of the 19th IEEE Real-Time Systems Symposium, 1998.

[8] Aeronautical Radio, Inc. Avionics Application Software Standard Interface: ARINC Specification 653P1-3, 2010.

[9] Jim Alves-Foss, Paul W Oman, Carol Taylor, and Scott Harrison. The MILS architecture for high-assurance embedded systems. International Journal of Embedded Systems, 2(3/4):239–247, 2006.

[10] D. Bernstein. Containers and cloud: From LXC to Docker to Kubernetes. IEEE Cloud Computing, 1(3):81–84, 2014.

[11] Ma Bo, Mu Dejun, Fan Wei, and Hu Wei. Improvements to the Seccomp Sandbox Based on PBE Theory. In Proc. of the 27th Conference on Advanced Information Networking and Applications Workshops, 2013.

[12] John M. Calandrino, Hennadiy Leontyev, Aaron Block, UmaMaheswari C. Devi, and James H. Anderson. LITMUSRT: A testbed for empirically comparing real-time multiprocessor schedulers. In Proc. of the 27th IEEE Real-Time Systems Symposium, 2006.

[13] Matt Davis. Creating a vDSO: The Colonel’s Other Chicken. Linux J., 2011(211), 2011.

[14] R. I. Davis and A. Burns. Hierarchical fixed priority preemptive scheduling. In Proc. of the 24th IEEE Real-Time Systems Symposium, 2005.

[15] Qian Ge, Yuval Yarom, Tom Chothia, and Gernot Heiser. Time Protection: The Missing OS Abstraction. In Proc. of the 14th EuroSys Conference, 2019.

[16] Thomas Gleixner and Douglas Niehaus. Hrtimers and beyond: Transforming the Linux time subsystems. In Proc. of the Linux symposium, volume 1, 2006.

[17] Gernot Heiser. The seL4 microkernel – an introduction (white paper). Revision 1.2. June 2020.

[18] Gernot Heiser, Gerwin Klein, and Toby Murray. Can we prove time protection? In Proc. of the Workshop on Hot Topics in Operating Systems, 2019.

[19] Wei-Ming Hu. Reducing timing channels with fuzzy time. Journal of Computer Security, 1(3-4):233–254, 1992.

[20] Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar. S$A: A shared cache attack that works across cores and defies VM sandboxing—and its application to AES. In Proc. of the 36th IEEE Symposium on Security and Privacy, 2015.

[21] Mathai Joseph and Paritosh K. Pandya. Finding response times in a real-time system. The Computer Journal, 29(5):390–395, 1986.

[22] Jung-Eun Kim, Tarek Abdelzaher, and Lui Sha. Budgeted generalized rate monotonic analysis for the partitioned, yet globally scheduled uniprocessor model. In Proc. of the 21st IEEE Real-Time and Embedded Technology and Applications Symposium, 2015.

[23] Vladimir Kiriansky, Ilia Lebedev, Saman Amarasinghe, Srinivas Devadas, and Joel Emer. DAWG: A Defense Against Cache Timing Attacks in Speculative Execution Processors. In Proc. of the 51st IEEE/ACM International Symposium on Microarchitecture, 2018.

[24] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss, Werner Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, Michael Schwarz, and Yuval Yarom. Spectre attacks: Exploiting speculative execution. In Proc. of the 40th IEEE Symposium on Security and Privacy, 2019.

[25] Peng Li, Debin Gao, and Michael K Reiter. Stopwatch: A cloud architecture for timing channel mitigation. ACM Transactions on Information and System Security (TISSEC), 17(2):1–28, 2014.

[26] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas, Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom, and Mike Hamburg. Meltdown: Reading kernel memory from user space. In Proc. of the 27th USENIX Security Symposium, 2018.

[27] C. L. Liu and J. W. Layland. Scheduling algorithms for multiprogramming in a hard real-time environment. Journal of the ACM, 20(1):46–61, January 1973.

[28] Jane W. S. W. Liu. Real-Time Systems. Prentice Hall PTR, Upper Saddle River, NJ, USA, 1st edition, 2000.

[29] Mengqi Liu, Lionel Rieg, Zhong Shao, Ronghui Gu, David Costanzo, Jung-Eun Kim, and Man-Ki Yoon. Virtual timeline: A formal abstraction for verifying preemptive schedulers with temporal isolation. Proc. ACM Program. Lang., 4, December 2019.

[30] Yangdi Lyu and Prabhat Mishra. A Survey of Side-Channel Attacks on Caches and Countermeasures. Journal of Hardware and Systems Security, 2(1):33–50, 2018.

[31] Toby C. Murray, Daniel Matichuk, Matthew Brassil, Peter Gammie, Timothy Bourke, Sean Seefried, Corey Lewis, Xin Gao, and Gerwin Klein. seL4: From general purpose to a proof of information flow enforcement. In Proc. of the 34th IEEE Symposium on Security and Privacy, 2013.

[32] John Rushby. Noninterference, transitivity, and channel-control security policies. SRI International, Computer Science Laboratory, 1992.

[33] John Rushby. Partitioning in avionics architectures: Requirements, mechanisms, and assurance. NASA Langley Technical Report, Mar. 1999.

[34] S. Saxena, G. Sanyal, and Manu. Cache based side channel attack: A survey. In Proc. of the International Conference on Advances in Computing, Communication Control and Networking, 2018.

[35] Lui Sha, Tarek Abdelzaher, Karl-Erik Årzén, Anton Cervin, Theodore Baker, Alan Burns, Giorgio Buttazzo, Marco Caccamo, John Lehoczky, and Aloysius K Mok. Real-time scheduling theory: A historical perspective. Real-Time Systems, 28(2-3):101–155, 2004.

[36] Lui Sha, Marco Caccamo, Renato Mancuso, Jung-Eun Kim, Man-Ki Yoon, Rodolfo Pellizzoni, Heechul Yun, Russell B Kegley, Dennis R Perlman, Greg Arundale, et al. Real-time computing on multicore processors. Computer, 49(9):69–77, 2016.

[37] Insik Shin and Insup Lee. Periodic resource model for compositional real-time guarantees. In Proc. of the 24th IEEE Real-Time Systems Symposium, 2003.

[38] Joon Son and J. Alves-Foss. Covert timing channel analysis of rate monotonic real-time scheduling algorithm in MLS systems. In Proc. of the IEEE Information Assurance Workshop, 2006.

[39] Brinkley Sprunt, Lui Sha, and John Lehoczky. Aperiodic task scheduling for hard-real-time systems. Journal of Real-Time Systems, 1:27–60, 1989.

[40] Jay K. Strosnider, John P. Lehoczky, and Lui Sha. The deferrable server algorithm for enhanced aperiodic responsiveness in hard real-time environments. IEEE Trans. Comput., 44(1):73–91, January 1995.

[41] Marco Vassena, Gary Soeller, Peter Amidon, Matthew Chan, John Renner, and Deian Stefan. Foundations for parallel information flow control runtime systems. In Proc. of Principles of Security and Trust, 2019.

[42] Bhanu C Vattikonda, Sambit Das, and Hovav Shacham. Eliminating fine-grained timers in Xen. In Proc. of the 3rd ACM Workshop on Cloud Computing Security, 2011.

[43] Marcus Völp, Benjamin Engel, Claude-Joachim Hamann, and Hermann Härtig. On confidentiality-preserving real-time locking protocols. In Proc. of the 19th IEEE Real-Time Embedded Technology and Applications Symposium, 2013.

[44] Marcus Völp, Claude-Joachim Hamann, and Hermann Härtig. Avoiding timing channels in fixed-priority schedulers. In Proc. of the ACM Symposium on Information, Computer and Communications Security, 2008.

[45] Weiyi Wu, Ennan Zhai, David Isaac Wolinsky, Bryan Ford, Liang Gu, and Daniel Jackowitz. Warding off timing attacks in Deterland. In Proc. of the Conference on Timely Results in Operating Systems, 2015.

### Appendix A: Computation of \( B_i(t_a(\tau_{i,x})) \) in ShiftRelease

Suppose ShiftRelease occurs at time \( t \), and let \(\tau_{i,x}\) be the earliest-arrival task in the arrival queue. As shown in Algorithm 7, its arrival time, \( t_a(\tau_{i,x}) \), becomes the beginning of a new deferred release mode. Here, we compute a new value for \( B_{def} \) based on \( l_{i,x} \), which is the remaining lag of \(\tau_{i,x}\) when the ShiftRelease is happening. ShiftRelease occurs because \( l_{i,x} \) is non-zero, indicating that the executions released before \(\tau_{i,x}\)'s arrival (at time \( t_a(\tau_{i,x}) \)) were shorter than what was assumed when calculating the initial lag of \(\tau_{i,x}\). Hence, from \( l_{i,x} \), we can determine how much budget of \(\Pi_i\) would have been left for \(\tau_{i,x}\) at its arrival.

We consider two cases: there had been at least one budget replenishment before \( t_a(\tau_{i,x}) \) or not since entering the current deferred release mode (i.e., \( t_{def} \)). Figure 27 shows the former case. In this case, \( t_{lastrep} \) is the time instant at which the last budget replenishment happens before \( t_a(\tau_{i,x}) \). At this moment, the budget is fully replenished to \( B_i \). Now, \( B_i(t_a(\tau_{i,x})) \) depends on how much of the budget is consumed by tasks of \(\Pi_i\) until \( t_a(\tau_{i,x}) \). If no tasks execute since \( t_{lastrep} \), the full budget \( B_i \) would have been available at \( t_a(\tau_{i,x}) \). In this case, \( l_{i,x} \) is longer than \( \min(t_a(\tau_{i,x}) - t_{lastrep}, B_i) \), the maximum available time during the interval \([t_{lastrep}, t_a(\tau_{i,x}))\). As \( l_{i,x} \) decreases, less budget becomes available. Therefore,

\[
B_i(t_a(\tau_{i,x})) = B_i - \left[ \min(t_a(\tau_{i,x}) - t_{lastrep}, B_i) - l_{i,x} \right]_0
\]

where \([x]_0 = \max(x, 0)\). If there had been no budget replenishment since \( t_{def} \), \( B_i \) and \( t_{lastrep} \) are replaced by \( B_{def} \) and \( t_{def} \), respectively.

### Appendix B: Complete Measurement Data of Response Time

Figure 26 shows the empirical probability distributions of task response times when the system shown in Table 1 (with \(\alpha = \beta = 1\)) in Section 6.2 is scheduled by TDMA, P-RES, and P-RES-NI. Tables 3, 4, and 5 show (i) the analytic worst-case response times (calculated using the analysis in [14]) and (ii) experimental worst- and average-case response times.

#### Table 3: Experimental Worst- and Average-Case Response Times (in ms) When \(\alpha = \beta = 1\)

| Task | Analytic WCRT | P-RES | TDMA | P-RES-NI |
|------|---------------|-------|------|----------|
| \(\tau_{1,1}\) | 18.00 | 31.00 | 42.00 | 32.00 |
| \(\tau_{1,2}\) | 42.00 | 43.00 | 48.00 | 44.00 |
| \(\tau_{1,3}\) | 48.00 | 64.00 | 38.00 | 65.00 |
| \(\tau_{1,4}\) | 38.00 | 49.00 | 80.00 | 50.00 |
| \(\tau_{2,1}\) | 80.00 | 184.00 | 144.00 | 185.00 |
| \(\tau_{2,2}\) | 144.00 | 196.00 | 320.00 | 197.00 |
| \(\tau_{2,3}\) | 320.00 | 600.00 | 400.00 | 601.00 |
| \(\tau_{2,4}\) | 400.00 | 664.00 | 400.00 | 665.00 |

**Note:** WCRT stands for Worst-Case Response Time.