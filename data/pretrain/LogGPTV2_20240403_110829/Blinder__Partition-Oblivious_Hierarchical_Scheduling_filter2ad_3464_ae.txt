Œ†H‚Äôs preemptions, and accordingly the execution time of œÑL,1
is adjusted to keep its nominal response time same. We ran
each conÔ¨Åguration for 300 seconds with and without Blinder.
As Table 2 shows, œÑL,1‚Äôs response time naturally increases
with the number of Œ†H‚Äôs preemptions (denoted by #HP) in
both cases. However, the difference of P-RES-NI from P-RES
remains almost constant. Increasing the number of Œ†L‚Äôs tasks
(denoted by #LA) that arrive at time 44, thus increasing the
size of the arrival queue, does not change the trend. These
results indicate that the overhead due to Blinder‚Äôs lag-based
task release is statistically insigniÔ¨Åcant and that it is scalable.
7 Related Work
Timing-channels are a major threat to information security
[15, 18]. Microarchitectural timing-channels often involve
shared hardware resources: cache [34], branch predictors [24],
memory banks, TLBs, and interconnects [30]. An attacker usu-
ally either exploits the trace left by other users or overwhelms
the bandwidth. Fuzzy-time [19, 42] introduces noise to sys-
tem clocks so that adversaries cannot obtain precise physical
time. Virtual time approaches [25, 45] enforce execution de-
terminism by providing artiÔ¨Åcial time to processes. Although
these techniques can mitigate timing-channels formed from
observing physical time progress, they cannot prevent the sce-
narios presented in this paper because the tasks do not require
any time information to perceive a change in other partition‚Äôs
temporal behavior.
Studies have shown that real-time scheduling can leak
information, whether intended or not. Son et al. [38] pro-
vide a mathematical framework for analyzing the existence
and deducibility of covert channels under Rate Monotonic
scheduling. Similarly, V√∂lp et al. [44] address the problem
of information-Ô¨Çows that can be established by altering task
execution behavior. The authors proposed modiÔ¨Åcations to
the Ô¨Åxed-priority scheduler to close timing-channels while
achieving real-time guarantees. In [43], V√∂lp et al. also tackle
the issues of information leakage through real-time locking
protocols and proposed transformation for them to prevent un-
intended information leakage. All of these works address the
problem of task-level information leakage, whereas our work
concerns information-Ô¨Çow among time-partitions through
varying partition-level behavior.
Formal veriÔ¨Åcation can be used to prove absence of covert
timing-channels. Murray et al. [31] show the non-interference
of Sel4‚Äôs time-partitions isolated by a static round-robin sched-
ule. Liu et al. [29] prove that partitions can be dynamically
scheduled, while preserving non-interference, if task arrivals
are always aligned with partition‚Äôs activation. Vassena et
al. [41] present a language-level information-Ô¨Çow control
2430    30th USENIX Security Symposium
USENIX Association
ùúè!,#Time10Œ†"Œ†#14ùúè!,#ùúè$,#444514...14611...1114850104...Preemptions of 1 msevery 2 ms1    2, 3, ‚Ä¶     16ùúè!,%‚ãØ	ùúè!,#&1064547ùúè!,#finishes(#HP)(#LA)system to eliminate covert timing-channels by Ô¨Åxing the ex-
act allocation of global-time for each parent-children thread
group (analogous to the partition-task relationship), allowing
user threads to access the global clock.
8 Conclusion
Blinder makes partition-local schedules deterministic by
controlling the timing of task release and thus prevents lo-
cal tasks from perceiving other partitions‚Äô varying behav-
ior. We demonstrated that with Blinder, adversaries cannot
form an algorithmic covert timing-channel through a hierar-
chical scheduling even if the system is conÔ¨Ågured in the most
favorable way to them. Blinder enables applications to en-
joy the level of Ô¨Çexibility that dynamic partitioning schemes
would achieve while guaranteeing the partition obliviousness
that static approaches would provide. Also, it is backward-
compatible and minimally-intrusive in that no modiÔ¨Åcation is
required to the underlying (both global and local) scheduling
mechanisms while incurring statistically insigniÔ¨Åcant over-
heads on the scheduler. Therefore, existing systems can bene-
Ô¨Åt from the improved security and resource efÔ¨Åciency that it
provides without a complete re-engineering, which is advan-
tageous especially to safety-critical systems that require high
re-certiÔ¨Åcation costs.
Acknowledgments
The authors would like to thank the anonymous reviewers
for their valuable comments and suggestions. This work is
supported in part by NSF grants 1945541, 1763399, 1715154,
and 1521523. Any opinions, Ô¨Åndings, and conclusions or rec-
ommendations expressed here are those of the authors and do
not necessarily reÔ¨Çect the views of sponsors.
References
[1] LynxSecure.
lynxsecure-separation-kernel-hypervisor.
https://www.lynx.com/products/
[2] QNX Adaptive Partitioning Thread Scheduler.
https://www.qnx.com/developers/docs/7.0.0/
index.html#com.qnx.doc.neutrino.sys_arch/
topic/adaptive.html.
[3] QNX Hypervisor.
https://blackberry.qnx.com/
en/software-solutions/embedded-software/
industrial/qnx-hypervisor.
[4] QNX Platform for Digital Cockpits.
https://
blackberry.qnx.com/content/dam/qnx/products/
bts-digital-cockpits-product-brief.pdf.
[5] Wind River Helix Virtualization Platform. https://
www.windriver.com/products/helix-platform/.
[6] Wind River VxWorks 653 Platform.
https:
//www.windriver.com/products/vxworks/
certification-profiles/#vxworks_653.
[7] Luca Abeni and Giorgio Buttazzo. Integrating multime-
dia applications in hard real-time systems. In Proc. of
the 19th IEEE Real-Time Systems Symposium, 1998.
[8] Aeronautical Radio, Inc. Avionics Application Soft-
ware Standard Interface: ARINC SpeciÔ¨Åcation 653P1-3,
2010.
[9] Jim Alves-Foss, Paul W Oman, Carol Taylor, and Scott
Harrison. The mils architecture for high-assurance em-
bedded systems. International Journal of Embedded
Systems, 2(3/4):239‚Äì247, 2006.
[10] D. Bernstein. Containers and cloud: From LXC to
docker to kubernetes. IEEE Cloud Computing, 1(3):81‚Äì
84, 2014.
[11] Ma Bo, Mu Dejun, Fan Wei, and Hu Wei.
Improve-
ments the Seccomp Sandbox Based on PBE Theory. In
Proc. of the 27th Conference on Advanced Information
Networking and Applications Workshops, 2013.
[12] John M. Calandrino, Hennadiy Leontyev, Aaron Block,
UmaMaheswari C. Devi, and James H. Anderson.
LITMUSRT: A testbed for empirically comparing real-
time multiprocessor schedulers. In Proc. of the 27th
IEEE Real-Time Systems Symposium, 2006.
[13] Matt Davis. Creating a vDSO: The Colonel‚Äôs Other
Chicken. Linux J., 2011(211), 2011.
[14] R. I. Davis and A. Burns. Hierarchical Ô¨Åxed priority
pre-emptive scheduling. In Proc. of the 24th IEEE Real-
Time Systems Symposium, 2005.
[15] Qian Ge, Yuval Yarom, Tom Chothia, and Gernot Heiser.
Time Protection: The Missing OS Abstraction. In Proc.
of the 14th EuroSys Conference, 2019.
[16] Thomas Gleixner and Douglas Niehaus. Hrtimers and
beyond: Transforming the linux time subsystems. In
Proc. of the Linux symposium, volume 1, 2006.
[17] Gernot Heiser. The seL4 microkernel ‚Äì an introduction
(white paper). Revision 1.2. June 2020.
[18] Gernot Heiser, Gerwin Klein, and Toby Murray. Can
we prove time protection? In Proc. of the Workshop on
Hot Topics in Operating Systems, 2019.
[19] Wei-Ming Hu. Reducing timing channels with fuzzy
time. Journal of computer security, 1(3-4):233‚Äì254,
1992.
[20] Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar.
S$A: A shared cache attack that works across cores and
deÔ¨Åes vm sandboxing‚Äìand its application to aes.
In
Proc. of 36th IEEE Symposium on Security and Privacy,
2015.
[21] Mathai Joseph and Paritosh K. Pandya. Finding re-
sponse times in a real-time system. The Computer Jour-
nal, 29(5):390‚Äì395, 1986.
[22] Jung-Eun Kim, Tarek Abdelzaher, and Lui Sha. Bud-
geted generalized rate monotonic analysis for the parti-
tioned, yet globally scheduled uniprocessor model. In
USENIX Association
30th USENIX Security Symposium    2431
Proc. of the 21st IEEE Real-Time and Embedded Tech-
nology and Applications Symposium, 2015.
[23] Vladimir Kiriansky, Ilia Lebedev, Saman Amarasinghe,
Srinivas Devadas, and Joel Emer. DAWG: A Defense
Against Cache Timing Attacks in Speculative Execution
In Proc. of the 51st IEEE/ACM Interna-
Processors.
tional Symposium on Microarchitecture, 2018.
[24] Paul Kocher, Jann Horn, Anders Fogh, , Daniel Genkin,
Daniel Gruss, Werner Haas, Mike Hamburg, Moritz
Lipp, Stefan Mangard, Thomas Prescher, Michael
Schwarz, and Yuval Yarom. Spectre attacks: Exploiting
speculative execution. In Proc. of 40th IEEE Symposium
on Security and Privacy, 2019.
[25] Peng Li, Debin Gao, and Michael K Reiter. Stopwatch:
a cloud architecture for timing channel mitigation. ACM
Transactions on Information and System Security (TIS-
SEC), 17(2):1‚Äì28, 2014.
[26] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas
Prescher, Werner Haas, Anders Fogh, Jann Horn, Stefan
Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom,
and Mike Hamburg. Meltdown: Reading kernel memory
In Proc. of 27th USENIX Security
from user space.
Symposium, 2018.
[27] C. L. Liu and J. W. Layland. Scheduling algorithms
for multiprogramming in a hard real-time environment.
Journal of the ACM, 20(1):46‚Äì61, January 1973.
[28] Jane W. S. W. Liu. Real-Time Systems. Prentice Hall
PTR, Upper Saddle River, NJ, USA, 1st edition, 2000.
[29] Mengqi Liu, Lionel Rieg, Zhong Shao, Ronghui Gu,
David Costanzo, Jung-Eun Kim, and Man-Ki Yoon. Vir-
tual timeline: A formal abstraction for verifying pre-
emptive schedulers with temporal isolation. Proc. ACM
Program. Lang., 4, December 2019.
[30] Yangdi Lyu and Prabhat Mishra. A Survey of Side-
Channel Attacks on Caches and Countermeasures. Jour-
nal of Hardware and Systems Security, 2(1):33‚Äì50,
2018.
[31] Toby C. Murray, Daniel Matichuk, Matthew Brassil,
Peter Gammie, Timothy Bourke, Sean Seefried, Corey
Lewis, Xin Gao, and Gerwin Klein. sel4: From general
purpose to a proof of information Ô¨Çow enforcement.
In Proc. of the 34th IEEE Symposium on Security and
Privacy, 2013.
[32] John Rushby. Noninterference, transitivity, and channel-
control security policies. SRI International, Computer
Science Laboratory, 1992.
[33] John Rushby. Partitioning in avionics architectures: Re-
quirements, mechanisms, and assurance. NASA Langley
Technical Report, Mar. 1999.
[34] S. Saxena, G. Sanyal, and Manu. Cache based side
channel attack: A survey. In Proc. of the International
Conference on Advances in Computing, Communication
Control and Networking, 2018.
[35] Lui Sha, Tarek Abdelzaher, Karl-Erik √Örz√©n, Anton
Cervin, Theodore Baker, Alan Burns, Giorgio Buttazzo,
Marco Caccamo, John Lehoczky, and Aloysius K Mok.
Real time scheduling theory: A historical perspective.
Real-time systems, 28(2-3):101‚Äì155, 2004.
[36] Lui Sha, Marco Caccamo, Renato Mancuso, Jung-Eun
Kim, Man-Ki Yoon, Rodolfo Pellizzoni, Heechul Yun,
Russell B Kegley, Dennis R Perlman, Greg Arundale,
et al. Real-time computing on multicore processors.
Computer, 49(9):69‚Äì77, 2016.
[37] Insik Shin and Insup Lee. Periodic resource model for
compositional real-time guarantees. In Proc. of the 24th
IEEE Real-Time Systems Symposium, 2003.
[38] Joon Son and J. Alves-Foss. Covert timing channel
analysis of rate monotonic real-time scheduling algo-
rithm in mls systems. In Proc. of the IEEE Information
Assurance Workshop, 2006.
[39] Brinkley Sprunt, Lui Sha, and John Lehoczky. Aperiodic
task scheduling for hard-real-time systems. Journal of
Real-Time Systems, 1:27‚Äì60, 1989.
[40] Jay K. Strosnider, John P. Lehoczky, and Lui Sha. The
deferrable server algorithm for enhanced aperiodic re-
IEEE
sponsiveness in hard real-time environments.
Trans. Comput., 44(1):73‚Äì91, January 1995.
[41] Marco Vassena, Gary Soeller, Peter Amidon, Matthew
Chan, John Renner, and Deian Stefan. Foundations for
parallel information Ô¨Çow control runtime systems. In
Proc. of Principles of Security and Trust, 2019.
[42] Bhanu C Vattikonda, Sambit Das, and Hovav Shacham.
Eliminating Ô¨Åne grained timers in xen. In Proc. of the
3rd ACM Workshop on Cloud Computing Security, 2011.
[43] Marcus V√∂lp, Benjamin Engel, Claude-Joachim
Hamann, and Hermann H√§rtig. On conÔ¨Ådentiality
In Proc. of
preserving real-time locking protocols.
the 19th IEEE Real-Time Embedded Technology and
Applications Symposium, 2013.
[44] Marcus V√∂lp, Claude-Joachim Hamann, and Hermann
H√§rtig. Avoiding Timing Channels in Fixed-priority
Schedulers. In Proc. of the ACM Symposium on Infor-
mation, Computer and Communications Security, 2008.
[45] Weiyi Wu, Ennan Zhai, David Isaac Wolinsky, Bryan
Ford, Liang Gu, and Daniel Jackowitz. Warding off
timing attacks in deterland. In Proc. of the Conference
on Timely Results in Operating Systems, 2015.
Appendix A Computation of Bi(ta(œÑi,x)) in
ShiftRelease
Suppose ShiftRelease occurs at time t, and let œÑi,x be the
earliest-arrival task in the arrival queue. As shown in Algo-
rithm 7, its arrival time, i.e., ta(œÑi,x), becomes the beginning of
a new deferred release mode. Here, we compute a new value
2432    30th USENIX Security Symposium
USENIX Association
Figure 26: Empirical probability distributions of task response times under TDMA, P-RES, and P-RES-NI when Œ± = Œ≤ = 1.
Figure 27: ta(œÑi,x) becomes the beginning of a new deferred
release mode, and Bi(ta(œÑi,x)) is recomputed using lagi,x.
for Bdef based on lagi,x that is the remaining lag of œÑi,x when
the ShiftRelease is happening. ShiftRelease occurs be-
cause lagi,x is a non-zero. That is, the executions released
before œÑi,x‚Äôs arrival (at time ta(œÑi,x)) is shorter than what is
assumed when calculating the initial lag of œÑi,x. Hence, from
lagi,x we can Ô¨Ånd how much budget of Œ†i would have left
for œÑi,x at its arrival.
We can consider two cases: there had been at least one
budget replenishment before ta(œÑi,x) or not since entering the
current deferred release mode (i.e., tdef). Figure 27 shows
the former case. In this case, tlastrep is the time instant at
which the last budget replenishment happens before ta(œÑi,x).
At this moment, the budget is fully replenished to Bi. Now,
Bi(ta(œÑi,x)) depends on how much of the budget is consumed
by tasks of Œ†i until ta(œÑi,x). If no tasks execute since tlastrep,
the full budget Bi would have been available at ta(œÑi,x). In
this case, lagi,x is longer than min(ta(œÑi,x) ‚àí tlastrep,Bi),
that is, the maximum available time during the interval of
[tlastrep, ta(œÑi,x)). As lagi,x decreases, less budget becomes
(cid:105)
available. Therefore,
Bi(ta(œÑi,x)) = Bi ‚àí(cid:104)
(cid:17)‚àí lagi,x
0
where [x]0 = max(x,0). If there had been no budget replen-
ishment since tdef, Bi and tlastrep are replaced by Bdef and
tdef, respectively.
Appendix B Complete Measurement Data of
Response Time
(cid:16)
min
ta(œÑi,x)‚àí tlastrep,Bi
,
Figure 26 shows the empirical probability distributions of
task response times when the system shown in Table 1 (with
Œ± = Œ≤ = 1) in Section 6.2 is scheduled by TDMA, P-RES, and
P-RES-NI. Tables 3, 4, and 5 show (i) the analytic worst-case
response times (calculated by using the analysis in [14]) and
(ii) experimental worst- and average-case response times.
USENIX Association
30th USENIX Security Symposium    2433
ùùâùíä,ùüèùùâùíä,ùüêùùâùíä,ùüëùùâùíä,ùüíùö∑ùüèùö∑ùüêùö∑ùüëùö∑ùüít!"#t$(ùúè%,‚Äô)t($)*+",Assumed‚Ä¶‚Ä¶‚Ä¶ùëôùëéùëî!,#B$%&min	(Œît,ùêµ!)ActualŒît‚Ä¶‚Ä¶‚Ä¶‚àÜ Average
(T-P)/P
P-RES-NI (N)
Table 3: Experimental worst- and average-case response times (in ms) when Œ± = Œ≤ = 1.
Analytic WCRT
P-RES
TDMA
18.00
42.00
48.00
38.00
80.00
144.00
320.00
400.00
31.00
43.00
64.00
49.00
184.00
196.00
600.00
664.00