site server redirects may even require selecting a different
renderer process before the switch occurs.
Session history is particularly challenging. Each stop in
the back/forward history can contain information about mul-
tiple cross-site documents in various frames in the page, and
it can include sensitive data for each document, such as the
contents of partially-ﬁlled forms. To meet the security goals
of Site Isolation, this site-speciﬁc session history state can
only be sent to renderer processes locked to the correspond-
ing site. Thus, the browser process must coordinate session
history loads at a frame granularity, tracking which data to
send to each process as cross-site frames are encountered in
the page being loaded.
3.4 Out-of-process iframes
The largest and most disruptive change for Site Isolation is
the requirement to load cross-site iframes in a different ren-
derer process than their embedding page. Most widely-used
browser rendering engines were designed and built before
browsers became multi-process. The shift to multi-process
browsers typically required some changes to these existing
engines in order to support multiple instances of them. How-
ever, many core assumptions remained intact, such as the
ability to traverse all frames in a page for tasks like paint-
ing, messaging, and various browser features (e.g., ﬁnd-in-
page). Supporting out-of-process iframes is a far more intru-
sive change that requires revisiting such assumptions across
the entire browser. Meanwhile, prior research prototypes
that proposed this separation [23, 63, 68] did not address
many of the challenges in practice, such as how to ensure the
iframe’s document knows its position in the frame tree. This
section describes the challenges we overcame to make out-
of-process iframes functional and compatible with the web
platform.
Frame Tree. To support out-of-process iframes, multi-
process browser architectures must change their general ab-
straction level from page (containing a tree of frames) to doc-
ument (in a single frame). The browser process must track
which document, and thus principal, is present in each frame
of a page, so that it can create an appropriate renderer process
and restrict its access accordingly. The cross-process naviga-
tions described in Section 3.3 must be supported at each level
of the frame tree to allow iframes to navigate between sites.
Each process must also keep a local representation of doc-
uments that are currently rendered in a different process,
Figure 1: An example of out-of-process iframes. To render the
web page shown in (a), the browser process (b) coordinates two
renderer processes, shown in (c) and (d).
which we call proxies. Proxies offer cross-process support
for the small set of cross-origin APIs that are permitted by
the web platform, as described in [52]. These APIs may
be accessed on a frame’s window object and are used for
traversing the frame hierarchy, messaging, focusing or nav-
igating other frames, and closing previously opened win-
dows. Traversing the frame hierarchy must be done syn-
chronously within the process using proxies, but interactions
between documents can be handled asynchronously by rout-
ing messages. Note that all same-site frames within a frame
tree (or other reachable pages) must share a process, allow-
ing them to synchronously script each other.
An example of a page including out-of-process iframes
is shown in Figure 1 (a), containing three documents from
a.com and one from b.com, and thus requiring two separate
renderer processes. Figure 1 (b) shows the browser process’s
frame tree, with representations of each document annotated
by which site’s process they belong to, along with a set of
proxy objects for each frame (one for each process which
might reference the frame). Figure 1 (c-d) shows the corre-
sponding frame trees within the two renderer processes, with
proxy objects for any documents rendered in a different pro-
cess. Note that the actual document and proxy objects live in
renderer processes; the corresponding browser-side objects
are stubs that track state and route IPC messages between
the browser and renderer processes.
For example, suppose the document
in a.com/2 in-
vokes
window.parent.frames["b"].postMessage("msg",
"b.com"). Renderer Process A can traverse its local frame
tree to ﬁnd the parent frame and then its child frame named
“b”, which is a proxy. The renderer process will send the
message to the corresponding ProxyA object for b.com/3 in
1664    28th USENIX Security Symposium
USENIX Association
a.com/1a.com/2b.com/3a.com/4a.com/1DocumentA(b) Browser ProcessProxyBa.com/2b.com/3DocumentBProxyAa.com/4WidgetAWidgetBDocumentDocumentProxyDocumentwidgetwidget(c) Renderer Process ADocumentwidget(d) Renderer Process BProxyProxyProxy(a) Web PageDocumentAProxyBDocumentAProxyBWidgetAthe browser process. The browser process passes it to the
current DocumentB object in this frame, which sends the
message to the corresponding Document object in Renderer
Process B. Similar message routing can support other
cross-origin APIs, such as focus, navigation, or closing
windows.
State Replication. The renderer process may need syn-
chronous access to some types of state about a frame in an-
other process, such as the frame’s current name (to ﬁnd a
frame by name, as in the example above) or iframe sandbox
ﬂags. As this state changes, the browser process broadcasts
it to all proxies for a frame across affected processes. Note
that this state should never include sensitive site-speciﬁc data
(e.g., full URLs, which may have sensitive URL parameters),
only what is necessary for the web platform implementation.
Painting and Input. To preserve the Site Isolation security
model, the rendered appearance of each document cannot
leak to other cross-site renderer processes. Otherwise, an
attacker may be able to scrape sensitive information from
the visible appearance of frames in other processes. Instead,
each renderer process is responsible for the layout and paint
operations within each of its frames. These must be sent to
a separate process for compositing at the granularity of sur-
faces, to form the combined appearance of the page. The
compositing process must support many types of transforms
that are possible via CSS, without leaking surface data to a
cross-site renderer process.
Often, many frames on a page come from the same site,
and separate surfaces for each frame may be unnecessary.
To reduce compositing overhead, we use a widget abstrac-
tion to combine contiguous same-site frames into the same
surface. Figure 1 shows how a.com/1 and a.com/2 can be
rendered in the same widget and surface without requiring
compositing. b.com/3 requires its own widget in Renderer
Process B. Since a.com/4 is not contiguous with the other
two a.com frames and its layout may depend on properties
assigned to it by b.com/3 (e.g., CSS ﬁlters), it has a separate
widget within Renderer Process A, and its surface must be
composited within b.com/3’s surface.
Widgets are also used for input event routing, such as
mouse clicks and touch interactions.
In most cases, the
compositing metadata makes it possible for the browser pro-
cess to perform sufﬁcient hit testing to route input events
to the correct renderer process.
In some cases, though,
web platform features such as CSS transforms or CSS
pointer-events and opacity properties may make this
difﬁcult. Currently, the browser process uses slow path
hit testing over out-of-process iframes, i.e., asking a parent
frame’s process to hit-test a speciﬁc point to determine which
frame should receive the event, without revealing any further
details about the event itself. This is only used for mouse
and touch events; keyboard events are reliably delivered to
the renderer process that currently has focus.
Note that images and media from other sites can be in-
cluded in a document. The Site Isolation architecture does
not try to exclude these from the renderer process, for mul-
tiple reasons. First, moving cross-origin image handling out
of the renderer process and preventing renderers from read-
ing these surfaces would require a great deal of complex-
ity in practice. Second, this would substantially increase the
number of surfaces needed for compositing. This decision is
consistent with other research browsers [23, 62, 63], includ-
ing Gazelle’s implementation [68]. Thus, we leave cross-site
images and media in the renderer process and rely on servers
to prevent unwanted inclusion, as discussed in Section 6.1.
Affected Features. In a broad sense, almost all browser fea-
tures that interact with the frame tree must be updated to
support out-of-process iframes. These features could tradi-
tionally assume that all frames of a page were in one process,
so a feature like ﬁnd-in-page could traverse each frame in the
tree in the renderer process, looking for a string match. With
out-of-process iframes, the browser process must coordinate
the ﬁnd-in-page feature, collecting partial results from each
frame across multiple renderer processes. Additionally, the
feature must be careful to avoid leaking information to ren-
derer processes (e.g., whether there was a match in a cross-
site sibling frame), and it must be robust to renderer pro-
cesses that crash or become unresponsive.
These updates are required for many features that com-
bine data across frames or that perform tasks that span multi-
ple frames: supporting screen readers for accessibility, com-
positing PDFs for printing, traversing elements across frame
boundaries for focus tracking, representations of the full
page in developer tools, and many others.2
3.5 Cross-Origin Read Blocking
Loading each site’s documents in dedicated renderer pro-
cesses is not sufﬁcient to protect site data: there are many le-
gitimate ways for web documents to request cross-site URLs
within their own execution context, such as JavaScript li-
braries, CSS ﬁles, images, and media. However, it is im-
portant not to give a renderer process access to cross-site
URLs containing sensitive data, such as HTML documents
or JSON ﬁles. Otherwise, a document could access cross-
site data by requesting such a URL from a ,
, or  tag. The response may nominally fail
within the requested context (e.g., an HTML ﬁle would pro-
duce syntax errors in a  tag), but the data would
be present in the renderer process, where a compromised ren-
derer or a transient execution attack could leak it.
Unfortunately,
it is non-trivial to perfectly distinguish
which cross-site URLs must be allowed into a renderer pro-
cess and which must be blocked. It is possible to categorize
content types into those needed for subresources and those
that are not (as in Gazelle [68]), but content types of re-
2A list of these features is included in Appendix B.
USENIX Association
28th USENIX Security Symposium    1665
sponses are often inaccurate in practice. For example, many
actual JavaScript libraries have content types of text/html
rather than application/javascript in practice. Chang-
ing the browser to block these libraries from cross-site doc-
uments would break compatibility with many existing sites.
It may be desirable to require sites to correct their content
types or proactively label any resources that need protec-
tion (e.g., with a new Cross-Origin-Resource-Policy
header [21]), but such approaches would leave many exist-
ing resources unprotected until developers update their sites.
Until such shifts in web site behavior occur, browsers with
Site Isolation can use a best effort approach to protect as
many sensitive resources as possible, while preserving com-
patibility with existing cross-site subresources. We intro-
duce and standardize an approach called Cross-Origin Read
Blocking (CORB) [17, 20], which prevents a renderer process
from receiving a cross-site response when it has a conﬁrmed
content type likely to contain sensitive information. CORB
focuses on content types that, when used properly, cannot
be used in a subresource context. Subresource contexts in-
clude scripts, CSS, media, fetches, and other ways to include
or retrieve data within a document, but exclude iframes and
plugins (which can be loaded in separate processes). CORB
ﬁlters the following content types:
• HTML, which is used for creating new documents with
data that should be inaccessible to other sites.
• JSON, which is used for conveying data to a document.
• XML, which is also often used for conveying data to a
document. An exception is made for SVG, which is an
XML data type permitted within  tags.
Since many responses have incorrect content types, CORB
requires additional conﬁrmation before blocking the re-
sponse from the renderer process.
In other contexts, web
browsers perform MIME-type snifﬁng when a content type
is missing, looking at a preﬁx of the response to guess its
type [4]. OP2 and IBOS use such snifﬁng to conﬁrm a re-
sponse is HTML [23, 63], but this will block many legiti-
mate JavaScript ﬁles, such as those that begin with HTML
comments (i.e., “
CORB skips conﬁrmation snifﬁng in the presence of
the existing X-Content-Type-Options: nosniff response
header, which disables the browser’s existing MIME sniff-
ing logic. When this header is present, responses with incor-
rect content types are already not allowed within subresource
contexts, making it safe for CORB to block them. Thus, we
recommend that web developers use this header for CORB-
eligible URLs that contain sensitive data, to ensure protec-
tion without relying on conﬁrmation snifﬁng.
If a cross-site response with one of the above conﬁrmed
content types arrives, and if it is not allowed via CORS head-
ers [18], then CORB’s logic in the network component pre-
vents the response data from reaching the renderer process.
3.6 Enforcements
The above architecture changes are sufﬁcient to mitigate
memory disclosure attackers as described in Section 2. For
example, transient execution attacks might leak data from
any cross-site documents present in the same process, but
such attacks cannot send forged messages to the browser pro-
cess to gain access to additional data. However, a renderer
exploit attacker that compromises the renderer process or
otherwise exploits a logic bug may indeed lie to the browser
process, claiming to be a different site to access its data.
The browser process must be robust to such attacks by
tracking which renderer processes are locked to which sites,
and thus restricting which data the process may access. Re-
quests for site data, actions that require permissions, access
to saved passwords, and attempts to fetch data can all be re-
stricted based on the site lock of the renderer process. In nor-
mal execution, a renderer process has its own checks to avoid
making requests for such data, so illegal requests can be in-
terpreted by the browser process as a sign that the renderer
process is compromised or malfunctioning and can thus be
terminated before additional harm is caused. The browser
process can record such events in the system log, to facilitate
audits and forensics within enterprises.
These enforcements may take various forms. If the ren-
derer process sends a message labeled with an origin, the
browser process must enforce that the origin is part of the
process’s site. Alternatively, communication channels can be
scoped to a site, such that a renderer process has no means to
express a request for data from another site.
The CORB ﬁltering policy in Section 3.5 also requires en-
forcements against compromised renderers, so that a ren-
derer exploit attacker cannot forge a request’s initiator to
bypass CORB. One challenge is that extensions had been
allowed to request data from extension-speciﬁed sites us-
ing scripts injected into web documents. Because these re-
quests come from a potentially compromised renderer pro-
cess, CORB cannot distinguish them from an attacker’s re-
quests. This weakens CORB by allowing responses from any
site that an active extension can access, which in many cases
is all sites. To avoid having extensions weaken the security
1666    28th USENIX Security Symposium
USENIX Association
of Site Isolation, we are changing the extension system to
require these requests to be issued by an extension process
instead of by extension scripts in a web renderer process,
and we are helping extension developers migrate to the new
approach [9].
4 Implementation
With the Chrome team, we implemented the Site Isolation
architecture in Chrome’s C++ codebase. This was a signiﬁ-
cant 5-year effort that spanned approximately 4,000 commits
from around 350 contributors (with the top 20 contributors
responsible for 72% of the commits), changing or adding ap-
proximately 450,000 lines of code in 9,000 ﬁles.
We needed to re-architect a widely deployed browser
without adversely affecting users, both during development
and when deploying the new architecture. This section de-
scribes the steps we took to minimize the impact on perfor-
mance and functionality, while Section 5 evaluates that im-
pact in practice.
4.1 Optimizations
Fundamentally, Site Isolation requires the browser to use a
larger number of OS processes. For example, a web page
with four cross-site iframes, all on different sites, will re-
quire ﬁve renderer processes versus one in the old architec-
ture. The overhead of additional processes presents a fea-
sibility risk, due to extra memory cost and process creation
latency during navigation. To address these challenges, we
have implemented several optimizations that help make Site
Isolation practical.
4.1.1 Process Consolidation