一般版本：
find / -user $user -print 1 xargs chowm Snewuid
·如果你有GNU工具集：
ps-sbex1ouad-ssa-/ pu
这样做执行一样彻底的文件查找，这次会打印系统里每个属于suser的文件与目录的名
称。该列表之后会以管道传递给xargs，它会尽可能地在所有文件上执行chown，：将
所有权改为$newuid里的UID。
现在，考虑old-new-list文件里出现这样数据的情况：
juser
nrvizard
1.0
30
这里有顺序的问题。如果我们在变更mrwizard文件的所有权之前，先改变所有juser
的文件为UID10.则所有5user的文件最后将会变成mrwizara所拥有！
这部分可使用UNIX的tsort程序解决，该程序为拓扑排序（Topologicalsorting针对
部分已排序的数据，强化完整排序功能）。以我们的目标来看，必须以新UID、旧UID
的顺序，将数据传给tsort：
$ teort  30 10
 >10 25
>_ EOF
30
25
输出结果告诉我们：必须在25改变为10之前，将10改为30。你应该可以想象，必须
非常小心写脚本。不过，我们可以微一些巧妙的处理，完全避开这个间题！记得不同名
称下拥有重复的UID编号的情况吗？
S cat dupids
abe;x;105:10:Honest Abe Lincoln:/home/abe:(bin/ba8h
tj:x:105:10:Thoras Jefferson:/home/tj:/bin/bash
www.TopSage.com
---
## Page 345
扩展实例：合并用户数据库
333
dorothy:x:110:10:Dozothy Gale:/home/dorothy:/bin/bash
toto1x1110:10:Tot6 Gale:/home/toto:/bin/bash
我们给所有这些用户一个全新的UID：
S.cat final.pssowd
, 
abe:x14:10 :Honest Abe. L{nco1n:/home/abe:/bin/bish
t:x:5:10:Thomas Jefferson/home/t):/bin/bash
dorothy:x:6:10:Dorothy Gale:/home/dorothy:/bin/bash
toto1x17:10:Toto Gale1/home/toto:/bin/besh
提供它们在任何地方都没使用的UID编号，就无须担心find命令的题序了：
主程序的最后部分是产生find与xargs命令的列表，我们选择将该命令列表写到文件
chown-files中，这么一来便能分别在后台中执行，这是由于程序执行极可能耗费许多
时间，而我们的系统管理员，在花了这么多时间开发与测试这个脚本后，开始执行它之
后应该想要好好回家睡个大觉了！脚本的最后结果如下：
while read user old new
do
echo *find / -user Suser -print I xargs choum $new
done  chown-files
chmod +x chowm-Ei1es
rm mergel unique[123] dupusers dupids unique-ids old-new-list
这里，chown-files文件看起来如下所示：
S cat chown-files
find / -user ben -print 1 xargs chom 301
find / -user abe -print I xargs chomm 4
o uoo s5zex 1 aurad-xooouu xes-/ p
sunoo e5zex 1auad-oen-/ pu
find / -user toto -print I xargs chomm 7
find / -user dorothy -print 1 xargs chown 6
还记得old-new-list文件吗？
S cat old-new-llst
ben
201
jhancock
200
105
300
tj
abe
105
4
5
dorothy 110
110
6
0201
你可能已经注意到abe与tj两者一开始拥有相同UID，类似情况也出现在dorothy与
toto上。执行chowm-files时发生什么事了？不是所有tj的文件最后都属于新的UID
www.TopSage.com
---
## Page 346
334
第到章
施了吗？
O
答案是：在放置新的/etc/passwd文件到每个系统上之前，只要我们分别在每个系统上
执行这些命令，就会是很安全的，记得一开始，abe与dorothy只存在于ul里，而
tj与toto也只在u2里，因此，当chown-files搭配原来的/etc/passwd在u1里
执行时，find都不会寻找tj或toto的文件，因为这些用户不存在：
sfind/-user toto -print
find: invalid argument ‘toto* to -user
类似失败的情况也会出现在u2的对照组里。完整的merge-systems.sh脚本如例11-5
所示，
例11-5：merge-systems.sh程序
1/bin/sh
sort u1.passwd u2.passwd > mergel
awk -f splitout.awk merge1
awk -F: *( print $3 )′ mergel 1 sort -n -u > unique-ids
rm -f old-new-1ist
old_ifs=$IrS
vhile read user passwd uid gid fullname honedir She11
IPS=1
do
if read user2 passwd2 uid2 gid2 fullnane2 homedir2 She112
then
if [$user = Suser2 ]
then
printf *s\tks\tls\n* Suser Suid Suid2 >> old-new-list
echo *Suser:Spassud:Suid2:Sgid:$fu11nane:$homedir:SShe11*
else
echo $0: out of aync: Suser and Suser2 >62
fi
exit 1
else
echo $0: no duplicate for Suser >k2
exit 1
done  unique2
fi
IFS=So1d_ifs
(eprdnp > t- on)s=unoo
计算重复的id数目
如果POSIXh有数组，请这么用：
set -- S（newuids.sh,-c Scount
unique-ids)
www.TopSage.com
---
## Page 347
扩展实例：合并用户数据库
335
while read user passwd uid gid fullnane homedir She11
:=S4T
do
newuid=$1
shift
：
echo *$user::$passwd:$newuid:$gid:$fu11nane:$homedir: $She11*
printf "ts\tts\tts\n* Suser $uid $newuid >> old-new-list
done  unique3
IFS=$old_ifs
sort -k 3 -t : =n unique[123] > final.passvord
while read user old new
op
done  chowm-files
chmod +x chown-fi1es
rm mergel unique[123]  dupusers dupids unique-ids old-nev-1ist
11.5其他真实世界的议题
还有其他真实世界里可能面临的议题。在这里我们不写程序代码，仅作简短的讨论。
首先最明显的是/etc/group文件也可能得合井。针对此文件来说，必须做的有：
确认合并后的/etc/group已包含所有来自个别系统里的所有组，且具有相同的
唯一GID。这几乎完全与我们解答过的username/UID议题相似，只是文件格式有
所不同。
在不同系统上的相同组中，进行用户的逻辑性合并。例如：
f1oppy1x:5:to1stoy, camus
在u2/ete/group中
在u1/etc/group 申
f1oppy :x:5 :george,bet.sy
当文件被合并时，组floppy的项目必须是：
loppy:x:5 =to1stoy , camus, george,bet.sy
用户的顺序不重要
所有文件的GID必须与合并后的新/etc/group同步，就像UID的处理一样如果
你够聪明，应该知道要产生一个包含UID与GID的find…|xargschowm
命令，让它们只要被执行一次就好。可节省机器处理时间，但要花费额外写程序的
时间。
再者，任何一个大型的系统，都可能会出现文件拥有已不存在于/etc/passwd与/etc/
group里的UID或GID值。要寻找这类的文件，可以这么微：
www.TopSage.com
---
## Page 348
336
第11章
[- .(. dnozfou- o- zasnou- 1. / pup
这样微将产生类似1s-dils输出格式的文件列表。这类列表可能应该要做人工检查，
来决定哪些用户与/或组应重新指定，或者需建立哪些新的用户（与/或组）。
以前者来说，可将文件再进一步处理：产生find..，1xargschowm...这样的命令
完成任务。
后者只是简单地将对应的UID与GID名称，加人到/etc/passwd与/etc/group文件
中，不过你应特别留意这些未使用的UID与GID编号，是否未与合井所产生的UID与
GID冲突。如果你在合井之前建立这些新用户与组名称，就不会遇到冲突问题，
第三，在改变文件的用户与组处理期间，文件系统绝对得静止。即，处理时不应有任何
其他活动发生，最好是让系统执行在单用户模式（single-usermode）下，只有超级用
户root可以登录，且只能在系统的物理console设备上完成此任务。
最后可能就是效率议题了。来看看之前呈现的一连串命令：
tot houosbxex 1sugxd-uoqxasn-/pu
find / -user jhancock -print 1 xargs cbom 300 
11
这些管道的每一个，都会将计算机里的所有文件找过一遍，处理每个必须变更UID或
GID的操作。在用户很少或系统文件不多的情况下（像是只有一个硬盘的系统），这还
可以忍受。但如果有几百或几千个用户的文件必须更改，或是系统拥有许多个非常大的
磁盘，我们就得使用另一个解决方案。使用像这样的管道：
find / -1s 1 awk -f make-command8,avk o1d-to-new,txt - > /tnp/commands.sh
.在执行它之前先检查/tmp/commands.sh...
sh /tmp/commands . sh
这里的make-commands，awk命令为awk程序，先读取来自old-to-new.txt的旧换新
UID变更（此文件可通过修改本章先前提过的脚本产生）。然后，make-commands.awk
会针对每一个输出的文件寻找是否有必需被变更的用户。如果是如此，则显示chown命
令列，一旦所有的命令都被存储，便能在执行它们之前先看过（这部分我们一样还是留
给读者作为目我练习）：
11.6小结
本章已经重新建立井解决真实世界会遇到的问题：将两个分开的计算机系统里的密码文
件合并，以便通过NFS共享它们的文件。
www.TopSage.com
---
## Page 349
扩展实例：合并用户数据库
337
经过对密码文件的细心研究，我们可以将用户归类为两种：只在第一个系统里或只在第
.com
二个系统里，以及两个系统里都有的用户，问题在于我们必须确保每个用户，在两个系
统里拥有一致且具有独一无二的UID编号，而每个用户的文件也都只属于他们自已。
解决此间题需要寻找新的未使用UID编号，以便出现UID冲突时可取用之，面且还必须
留意改变文件所有权的命令顺序。这两个系统必须彻底查找，确定每一个文件的拥有者
都已正确更薪。
其他需要解决的议题，在形式上其实差不多：最显著的应该是合并组文件，以及将所有
无人认领的文件指定拥有者。为安全起见，当这些运行在进行中时，系统应该是静止无
任何活动的状态，我们也大致说明了在效率前提下的另一个解决方案。
解决方案包含了针对原始密码文件进行谨慎的过滤，使用了awk、sort、uniq，以及大
量使用whileread..，循环处理数据、准备改变用户文件所有权的命令。以find、
xargs，以及chown（当然）完成此任务。
整个解决方案的程序代码不到170行，这数字还包含了注释！以C程序解决相同问题可
能不只是产生更庞大的程序代码，可能编写、测试与除虫会耗掉更多的时间。而我们的
解决方案，通过个别执行的命令提供更安全的做法，因为提供进行人为检查的机会，在
变更文件所有权之前先作确认。我们认为这是一个相当详尽的示范，让读者们了解
UNIX工具集的强大功能，并了解如何通过软件工具（SoftwareTool）解决手边的问题。
www.TopSage.com
---
## Page 350
第.12章
拼写检查
本章利用拼写检查，呈现各种Shell脚本的不同方面，介绍完spel1程序后，我们会告
诉你如何构建一个简单又好用的拼写检查程序。紧接着再介绍如何利用这个简单的Shell
脚本，修改手边两个可自由使用的拼写程序的输出，让它看起来就像传统UNIX的spel1
程序那样。最后，呈现awk写成的拼写检查程序，让读者完整了解这个语言的简单利落。
12.1Spell程序
spel1程序微的事就是你想的：检查文件里是否有拼写错误。这个程序会读取命令行上
指定的所有文件，在标准输出上产生排序后的单词列表，这个列表上的单词不是在它的
字典里找不到，就是无法从标准的英文文法应用里派生出来（例如“words”派生自
“word"）。有趣的是：POSIX并未对spel1进行标准化，在它的文件里是这么说的：
该工具程序对Shell脚本或传统应用程序并无用处。SDel1是深思熟处后的设计，
但它却忽略了：用户指定的输入如果未伴随完整的字典，则没有技术可识别用户福
定的输入文件。
我们不同意上述的第一部分。试想脚本的自动调试与问题报告，有人可能会想要显示类
似的这些行：
1 /bin/sh -
probraport---简单的问题报告程序
file=/tmp/report.$$
echo *Type in the problem, finish with Contro1-D.
vhile true