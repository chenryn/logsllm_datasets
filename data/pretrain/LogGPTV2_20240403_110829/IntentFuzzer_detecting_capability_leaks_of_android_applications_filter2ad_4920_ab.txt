5. EVALUATION
5.1 Experiment Design
To evaluate IntentFuzzer, we use it to detect capability
leaks of applications in both Google Play and closed source
ROMs. We downloaded 2183 free applications from Google
Play, all of which are among top 200 most popular apps
in each category in www.appbrain.com. We install them
and do fuzzing one by one in our modi(cid:12)ed Android 4.2.2
Samsung Galaxy Nexus phone. Galaxy Nexus phone is a
device supported by Android Open Source Project, which
we can build ROM from source and directly (cid:13)ash the device.
In terms of closed source ROMs, it’s not easy to migrate all
in-rom applications to other environment due to dependency
problems. So we choose to directly modify closed source
ROMs by rewriting framework bytecode and do fuzzing in-
side themselves. We selected Xiaomi Hongmi phone and
Lenovo K860i phone for our evaluation. Xiaomi Hongmi
phone runs Android 4.2.2, and Lenovo K860i runs Android
4.2.1. Both phones use updated system version from their
vendors.
After analyzing an application package, a report will be
produced recording leaked permissions and Intent attributes
that trigger the corresponding permission leak.
5.2 Results
It took 2240 minutes to fuzz all 2183 apps from Google
Play, 90 minutes for 104 packages in Xiaomi Hongmi phone,
and 95 minutes for 105 packages in Lenovo K860i phone.
From analysis reports, we detected 161 application pack-
ages that have at least one permission leak, and found 26
534Table 1: Leaked Permissions in Google Play Appli-
cations
Table 2: Leaked Permissions in Xiaomi Hongmi
Phone
Packages
Components
Packages
Components
Permissions
ACCESS NETWORK STATE
READ PHONE STATE
WAKE LOCK
INTERNET
ACCESS FINE LOCATION
ACCESS WIFI STATE
GET ACCOUNTS
VIBRATE
SYSTEM ALERT WINDOW
CHANGE WIFI STATE
ACCESS COARSE LOCATION
GET PACKAGE SIZE
READ CONTACTS
READ SMS
READ EXTERNAL STORAGE
WRITE SMS
WRITE CALL LOG
GET TASKS
RESTART PACKAGES
CLEAR APP CACHE
BLUETOOTH ADMIN
91
42
22
11
9
8
6
4
3
3
2
2
2
2
1
1
1
1
1
1
1
86
39
30
14
8
8
9
4
5
3
2
2
2
2
1
1
1
4
1
1
1
permissions in Xiaomi Hongmi phone and 19 permissions in
Lenovo K860i phone are leaked. We organized reports into
three tables.
In each table, leaked permissions are listed.
For each permission, we counted the total numbers of pack-
ages and components that have the corresponding permis-
sion leakage. We can see results of 2183 Google Play appli-
cations in Table 1, results of Xiaomi Hongmi phone in Table
2, and results of Lenovo K860i in Table 3. Permissions’
standard package pre(cid:12)x is omitted in the tables.
Except for capability leaks, we also detect the runtime
exceptions occurred during fuzzing via default logcat infor-
mation. There are 11 components from 9 packages in Xiaomi
Hongmi phone, 13 components from 12 packages in Lenovo
K860i, and 141 components from 123 apps in Google Play
crashed during fuzzing. This information may also help de-
velopers to diagnose the robustness of their apps.
5.3 Exploitation Analysis and Case Study
Capability leaks don’t mean that attackers can do every
action authorized by the leaked permission. Exploitation de-
pends on how vulnerable components deal with the Intents.
Both ICC of Broadcast Receivers and Started Services do
not return results. So the leaks of permissions that are re-
lated to accessing some data are not easy to exploit. Attack-
ers cannot (cid:12)nd a channel to receive sensitive data protected
by the leaked permission. Maybe attacks should combine
other permission leaks, or other vulnerabilities.
For the leaks of permissions that are related to chang-
ing some status, they are easy to exploit and often result
in great harm, e.g. sending messages, changing system set-
tings. Some detailed exploitation cases are given below.
Clean Master is an app that pre-installed in the Xiaomi
Hongmi phone. It can help user to kill all background pro-
cesses and get memory freed. However, the permission an-
droid.permission.RESTART PACKAGES is leaked and all
other apps could invoke the exposed component to kill back-
ground processes. The vulnerable component is com.clea-
nmaster.appwidget.WidgetService. Exploiting method is just
starting the service using an Intent with Action com.cleanm-
aster.appwidget.ACTION FASTCLEAN. This case is simi-
lar to another app called Smart RAM Booster. Sending
Permissions
CHANGE COMPONENT ENAB-
LED STATE
ACCESS NETWORK STATE
READ PHONE STATE
WAKE LOCK
INTERNET
GET ACCOUNTS
DEVICE POWER
STATUS BAR
ACCESS ALL DOWNLOADS
READ CONTACTS
READ DREAM STATE
READ CALENDAR
UPDATE DEVICE STATS
WRITE CALENDAR
RESTART PACKAGES
DELETE PACKAGES
READ CALL LOG
READ SMS
GET PACKAGE SIZE
MODIFY PHONE STATE
INSTALL PACKAGES
com.android.email.permission.A-
CCESS PROVIDER
WRITE SECURE SETTINGS
VIBRATE
ACCESS WIFI STATE
DELETE CACHE FILES
9
8
8
6
5
4
3
3
2
2
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
11
9
9
7
7
5
4
4
4
2
1
3
1
1
1
1
1
1
1
1
2
1
1
1
2
1
an intent with Action com.anttek.rambooster.action.BOO-
ST to the Service com.anttek.rambooster.service.BoostSer-
vice will also get background processes killed.
Package com.popularapp.fakecall is an application called
Fake Call & SMS, which can help user to fake coming calls
and messages. WRITE SMS and WRITE CALL LOG per-
missions are leaked in receivers com.popularapp.fakecall.in-
call.MessageAlarm and com.popularapp.fakecall.incall.Cal-
lAlarm respectively. Attacker with no permission can repro-
duce any messages and calls which is preset in this applica-
tion at any time, by sending Intents with an \id" Extra.
We detected 4 apps that leak android.permission.VIBRA-
TE Permission. Package cn.etouch.ecalendar2 is a calendar
application. Sending an Intent with Action ACTION SUI-
SENT ECALENDAR ShowNotice to the receiver cn.etouc-
h.ecalendar.service.NoticesReceiver will vibrate the phone.
Package com.azumio.android.sleeptime is an alarm app. If
one of its component com.azumio.android.sleeptime.alarm-
.AlarmReceiver receives an Intent with Action value of co-
m.azumio.android.sleeptime.WAKEUP will make the phone
vibrate and beep. Package br.com.gerenciador(cid:12)nanceiro.c-
ontroller is a personal (cid:12)nance manager app. Any empty
Intent sending to the component br.com.third.utils.Gerar-
Noti(cid:12)cacao will also make the phone vibrate. The last one
is the app in Xiaomi Hongmi phone that is similar with
Apple Siri, which targets at assisting users via voice recog-
nition. The exposed component is com.miui.voiceassist.Sir-
iReceiver. Broadcasting an Intent to with Action com.mi-
ui.voiceassist.alarm and an string Extra, will read out the
string and vibrate the phone.
Stk(Sim Toolkit Application) app in both Xiaomi and
Lenovo phone leaks MODIFY PHONE STATE permission.
Attackers without this permission can send an Intent with
Action android.intent.action.stk.command to the com.andr-
oid.stk.StkCmdReceiver component in the package com.andro-
535Table 3: Leaked Permissions in Lenovo K860i Phone
Packages
Components
Permissions
ACCESS NETWORK STATE
CHANGE COMPON-
ENT ENABLED STATE
WAKE LOCK
READ PHONE STATE
GET ACCOUNTS
READ EXTERNAL STORAGE
INTERNET
READ CALL LOG
READ DREAM STATE
READ CALENDAR
DEVICE POWER
ACCESS WIFI STATE
ACCESS ALL DOWNLOADS
STATUS BAR
BLUETOOTH
DELETE PACKAGES
MODIFY PHONE STATE
BLUETOOTH ADMIN
READ CONTACTS
11
8
6
5
3
2
2
2
1
1
1
1
1
1
1
1
1
1
1
11
11
7
5
4
2
2
2
2
3
1
1
1
1
1
1
1
6
1
id.stk. This intent will kill the current application running
on the phone interface. An exploitation case is that attack-
ers can hang up the phone when any call is coming.
6. DISCUSSION
There are some limitations in our work. IntentFuzzer can-
not search for capability leaks in Bound Services.
Intent-
Fuzzer also cannot handle Broadcast Receivers which are
registered at runtime. IntentFuzzer only detects permission
leaks when a component performs a privileged operation im-
mediately after receiving a Intent. If a component that re-
ceives an Intent internally changes the state of the target
app and lead to a capability leak in the future, IntentFuzzer
will produce false negative.
We used a heuristic method to construct Intents. To
achieve smarter fuzzing and higher path coverage, symbolic
execution techniques should be applied to generate correct
Intents for each execution path in the future.
7. RELATED WORK
In recent years, much work has been devoted to detect-
ing capability leaks. ComDroid [6] is a tool for developers
to analyze their own applications before release. Warnings
of security risks in inter-application communication will be
raised. Felt et al.
[7] created a static path-(cid:12)nding tool
to (cid:12)nd potential attack path in application components.
Woodpecker [10] can detect capability leaks in stock An-
droid smartphones. With consideration of object inheritance
and callbacks, Woodpecker has a better accuracy. Droid-
Checker[5] applies inter-procedural control (cid:13)ow graph anal-
ysis and static taint checking to search for capability leaks.
All tools above use static method and may contain false pos-
itives, and their detection results must be veri(cid:12)ed manually.
To the best of our knowledge, we are the (cid:12)rst to apply dy-
namic fuzzing technique in detecting capability leaks. All
the leaks we detected are all real occurrences of permission
leaks, without false positives.
8. CONCLUSIONS
We propose a novel fuzzing approach to detect capabil-
ity leak vulnerabilities of Android applications. We invent a
Intent construction strategy to achieve higher execution cov-
erage. With our prototype IntentFuzzer, we analyze more
than 2,000 applications in Google Play and (cid:12)nd 161 appli-
cations with at least one permission leak. We also tested
IntentFuzzer in Xiaomi Hongmi phone and Lenovo K860i
phone, and (cid:12)nd 26 and 19 permission leaks respectively.
Acknowledgements
This work is partially supported by China Core Electronic
Devices, High-end Generic Chips and Basic Software Award
2012ZX01039-004, NSFC No.61161140454, The National Key
Technology R&D Program under Grant No.2012BAH38B03,
and China InformationTechnology Security Evaluation Cen-
ter under Grant No.CSTC2011AC2143.
9. REFERENCES
[1] Dalvik Executable Format. http://source.android.
com/devices/tech/dalvik/dex-format.html.
[2] drozer.
https://labs.mwrinfosecurity.com/tools/drozer/.
[3] Intents and Intent Filters.
http://developer.android.com/guide/components/
intents-filters.html.
[4] Services. http://developer.android.com/guide/
components/services.html.
[5] P. P. Chan, L. C. Hui, and S. Yiu. Droidchecker:
analyzing android applications for capability leak. In
Proceedings of the (cid:12)fth ACM conference on Security
and Privacy in Wireless and Mobile Networks, pages
125{136. ACM, 2012.
[6] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner.
Analyzing inter-application communication in android.
In Proceedings of the 9th international conference on
Mobile systems, applications, and services, pages
239{252. ACM, 2011.
[7] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and
E. Chin. Permission re-delegation: Attacks and
defenses. In Proceedings of the 20th USENIX Security
Symposium, volume 18, pages 19{31, 2011.
[8] C. Gibler, J. Crussell, J. Erickson, and H. Chen.
Androidleaks: Automatically detecting potential
privacy leaks in android applications on a large scale.
In Trust and Trustworthy Computing, pages 291{307.
Springer, 2012.
[9] P. Gilbert, B.-G. Chun, L. P. Cox, and J. Jung.
Vision: automated security validation of mobile apps
at app markets. In Proceedings of the second
international workshop on Mobile cloud computing and
services, pages 21{26. ACM, 2011.
[10] M. Grace, Y. Zhou, Z. Wang, and X. Jiang.
Systematic detection of capability leaks in stock
android smartphones. In Proceedings of the 19th
Annual Symposium on Network and Distributed
System Security, 2012.
[11] Y. Zhang, M. Yang, B. Xu, Z. Yang, G. Gu, P. Ning,
X. S. Wang, and B. Zang. Vetting undesirable
behaviors in android apps with permission use
analysis. In Proceedings of the 2013 ACM SIGSAC
conference on Computer & communications security,
pages 611{622. ACM, 2013.
536