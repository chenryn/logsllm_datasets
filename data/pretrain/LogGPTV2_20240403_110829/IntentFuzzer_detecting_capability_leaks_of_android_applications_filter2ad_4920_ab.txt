### 5. Evaluation

#### 5.1 Experiment Design
To evaluate IntentFuzzer, we conducted experiments to detect capability leaks in applications from both Google Play and closed-source ROMs. We downloaded 2,183 free applications from Google Play, all of which are among the top 200 most popular apps in each category as listed on www.appbrain.com. These applications were installed and fuzzed one by one on a modified Android 4.2.2 Samsung Galaxy Nexus phone. The Galaxy Nexus is a device supported by the Android Open Source Project (AOSP), allowing us to build a custom ROM and flash it directly onto the device.

For closed-source ROMs, migrating in-rom applications to another environment is challenging due to dependency issues. Therefore, we chose to directly modify the closed-source ROMs by rewriting the framework bytecode and performing fuzzing within the ROMs themselves. For this evaluation, we selected the Xiaomi Hongmi phone (running Android 4.2.2) and the Lenovo K860i phone (running Android 4.2.1). Both devices used updated system versions provided by their respective vendors.

After analyzing each application package, a report was generated, recording any leaked permissions and the Intent attributes that triggered the corresponding permission leak.

#### 5.2 Results
The fuzzing process took 2,240 minutes for all 2,183 apps from Google Play, 90 minutes for 104 packages on the Xiaomi Hongmi phone, and 95 minutes for 105 packages on the Lenovo K860i phone. From the analysis reports, we detected 161 application packages with at least one permission leak. Specifically, 26 permissions were found to be leaked in the Xiaomi Hongmi phone, and 19 permissions were leaked in the Lenovo K860i phone. The results are summarized in the following tables:

**Table 1: Leaked Permissions in Google Play Applications**

| Permission                     | Packages | Components |
|--------------------------------|----------|------------|
| ACCESS NETWORK STATE           | 91       | 86         |
| READ PHONE STATE               | 42       | 39         |
| WAKE LOCK                      | 22       | 30         |
| INTERNET                       | 11       | 14         |
| ACCESS FINE LOCATION           | 9        | 8          |
| ACCESS WIFI STATE              | 8        | 8          |
| GET ACCOUNTS                   | 6        | 9          |
| VIBRATE                        | 4        | 4          |
| SYSTEM ALERT WINDOW            | 3        | 5          |
| CHANGE WIFI STATE              | 3        | 3          |
| ACCESS COARSE LOCATION         | 2        | 2          |
| GET PACKAGE SIZE               | 2        | 2          |
| READ CONTACTS                  | 2        | 2          |
| READ SMS                       | 2        | 2          |
| READ EXTERNAL STORAGE          | 1        | 1          |
| WRITE SMS                      | 1        | 1          |
| WRITE CALL LOG                 | 1        | 1          |
| GET TASKS                      | 1        | 1          |
| RESTART PACKAGES               | 1        | 1          |
| CLEAR APP CACHE                | 1        | 1          |
| BLUETOOTH ADMIN                | 1        | 1          |

**Table 2: Leaked Permissions in Xiaomi Hongmi Phone**

| Permission                     | Packages | Components |
|--------------------------------|----------|------------|
| ACCESS NETWORK STATE           | 91       | 86         |
| READ PHONE STATE               | 42       | 39         |
| WAKE LOCK                      | 22       | 30         |
| INTERNET                       | 11       | 14         |
| ACCESS FINE LOCATION           | 9        | 8          |
| ACCESS WIFI STATE              | 8        | 8          |
| GET ACCOUNTS                   | 6        | 9          |
| VIBRATE                        | 4        | 4          |
| SYSTEM ALERT WINDOW            | 3        | 5          |
| CHANGE WIFI STATE              | 3        | 3          |
| ACCESS COARSE LOCATION         | 2        | 2          |
| GET PACKAGE SIZE               | 2        | 2          |
| READ CONTACTS                  | 2        | 2          |
| READ SMS                       | 2        | 2          |
| READ EXTERNAL STORAGE          | 1        | 1          |
| WRITE SMS                      | 1        | 1          |
| WRITE CALL LOG                 | 1        | 1          |
| GET TASKS                      | 1        | 1          |
| RESTART PACKAGES               | 1        | 1          |
| CLEAR APP CACHE                | 1        | 1          |
| BLUETOOTH ADMIN                | 1        | 1          |

**Table 3: Leaked Permissions in Lenovo K860i Phone**

| Permission                     | Packages | Components |
|--------------------------------|----------|------------|
| ACCESS NETWORK STATE           | 11       | 11         |
| CHANGE COMPONENT ENABLED STATE | 8        | 11         |
| WAKE LOCK                      | 6        | 7          |
| READ PHONE STATE               | 5        | 5          |
| GET ACCOUNTS                   | 3        | 4          |
| READ EXTERNAL STORAGE          | 2        | 2          |
| INTERNET                       | 2        | 2          |
| READ CALL LOG                  | 2        | 2          |
| READ DREAM STATE               | 1        | 1          |
| READ CALENDAR                  | 1        | 1          |
| DEVICE POWER                   | 1        | 1          |
| ACCESS WIFI STATE              | 1        | 1          |
| ACCESS ALL DOWNLOADS           | 1        | 1          |
| STATUS BAR                     | 1        | 1          |
| BLUETOOTH                      | 1        | 1          |
| DELETE PACKAGES                | 1        | 1          |
| MODIFY PHONE STATE             | 1        | 1          |
| BLUETOOTH ADMIN                | 1        | 1          |
| READ CONTACTS                  | 1        | 1          |

In addition to detecting capability leaks, we also monitored runtime exceptions that occurred during fuzzing via the default logcat information. There were 11 components from 9 packages in the Xiaomi Hongmi phone, 13 components from 12 packages in the Lenovo K860i phone, and 141 components from 123 apps in Google Play that crashed during fuzzing. This information can help developers diagnose the robustness of their applications.

#### 5.3 Exploitation Analysis and Case Study
Capability leaks do not necessarily mean that attackers can perform every action authorized by the leaked permission. Exploitation depends on how vulnerable components handle the Intents. For example, Broadcast Receivers and Started Services do not return results, making it difficult to exploit permissions related to accessing data. Attackers cannot find a channel to receive sensitive data protected by the leaked permission. However, combining other permission leaks or vulnerabilities might enable such attacks.

Permissions related to changing system status are easier to exploit and can cause significant harm, such as sending messages or altering system settings. Here are some detailed exploitation cases:

- **Clean Master**: Pre-installed on the Xiaomi Hongmi phone, Clean Master helps users kill background processes and free up memory. However, the `android.permission.RESTART_PACKAGES` permission is leaked, allowing other apps to invoke the exposed component `com.cleanmaster.appwidget.WidgetService` to kill background processes. Exploitation involves starting the service using an Intent with the action `com.cleanmaster.appwidget.ACTION_FASTCLEAN`.

- **Smart RAM Booster**: Similar to Clean Master, Smart RAM Booster has a leaked permission. Sending an Intent with the action `com.anttek.rambooster.action.BOOST` to the service `com.anttek.rambooster.service.BoostService` will also kill background processes.

- **Fake Call & SMS**: The app `com.popularapp.fakecall` allows users to fake incoming calls and messages. The `WRITE_SMS` and `WRITE_CALL_LOG` permissions are leaked in the receivers `com.popularapp.fakecall.incall.MessageAlarm` and `com.popularapp.fakecall.incall.CallAlarm`, respectively. An attacker can reproduce any preset messages and calls by sending Intents with an "id" extra.

- **Vibration Leaks**: We detected four apps that leak the `android.permission.VIBRATE` permission:
  - **cn.etouch.ecalendar2**: A calendar app. Sending an Intent with the action `ACTION_SUICALENDAR_ShowNotice` to the receiver `cn.etouch.ecalendar.service.NoticesReceiver` will vibrate the phone.
  - **com.azumio.android.sleeptime**: An alarm app. If the component `com.azumio.android.sleeptime.alarm.AlarmReceiver` receives an Intent with the action `com.azumio.android.sleeptime.WAKEUP`, the phone will vibrate and beep.
  - **br.com.gerenciadorfinanceiro.controller**: A personal finance manager app. Any empty Intent sent to the component `br.com.third.utils.GerarNotificacao` will vibrate the phone.
  - **Xiaomi Siri-like App**: The exposed component `com.miui.voiceassist.SiriReceiver` in the Xiaomi Hongmi phone. Broadcasting an Intent with the action `com.miui.voiceassist.alarm` and a string extra will read out the string and vibrate the phone.

- **STK (Sim Toolkit Application)**: In both the Xiaomi and Lenovo phones, the STK app leaks the `MODIFY_PHONE_STATE` permission. Attackers can send an Intent with the action `android.intent.action.stk.command` to the component `com.android.stk.StkCmdReceiver`. This Intent can kill the current application running on the phone interface, and in one case, it can hang up the phone when a call is incoming.

### 6. Discussion
Our work has some limitations. IntentFuzzer cannot search for capability leaks in Bound Services or Broadcast Receivers registered at runtime. It only detects permission leaks when a component performs a privileged operation immediately after receiving an Intent. If a component internally changes the state of the target app and leads to a capability leak in the future, IntentFuzzer may produce false negatives.

We used a heuristic method to construct Intents. To achieve smarter fuzzing and higher path coverage, symbolic execution techniques should be applied to generate correct Intents for each execution path in the future.

### 7. Related Work
In recent years, several tools have been developed to detect capability leaks. ComDroid [6] helps developers analyze their applications before release, raising warnings about security risks in inter-application communication. Felt et al. [7] created a static path-finding tool to identify potential attack paths in application components. Woodpecker [10] detects capability leaks in stock Android smartphones, considering object inheritance and callbacks for better accuracy. DroidChecker [5] uses inter-procedural control flow graph analysis and static taint checking to search for capability leaks. All these tools use static methods and may contain false positives, requiring manual verification of detection results.

To the best of our knowledge, we are the first to apply dynamic fuzzing techniques to detect capability leaks. The leaks we detected are real occurrences without false positives.

### 8. Conclusions
We propose a novel fuzzing approach to detect capability leak vulnerabilities in Android applications. Our Intent construction strategy achieves higher execution coverage. Using our prototype IntentFuzzer, we analyzed over 2,000 applications in Google Play and found 161 applications with at least one permission leak. We also tested IntentFuzzer on the Xiaomi Hongmi and Lenovo K860i phones, detecting 26 and 19 permission leaks, respectively.

### Acknowledgements
This work is partially supported by the China Core Electronic Devices, High-end Generic Chips, and Basic Software Award 2012ZX01039-004, NSFC No.61161140454, The National Key Technology R&D Program under Grant No.2012BAH38B03, and the China Information Technology Security Evaluation Center under Grant No.CSTC2011AC2143.

### 9. References
[1] Dalvik Executable Format. http://source.android.com/devices/tech/dalvik/dex-format.html.

[2] drozer. https://labs.mwrinfosecurity.com/tools/drozer/.

[3] Intents and Intent Filters. http://developer.android.com/guide/components/intents-filters.html.

[4] Services. http://developer.android.com/guide/components/services.html.

[5] P. P. Chan, L. C. Hui, and S. Yiu. Droidchecker: Analyzing Android Applications for Capability Leak. In Proceedings of the Fifth ACM Conference on Security and Privacy in Wireless and Mobile Networks, pages 125-136. ACM, 2012.

[6] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing Inter-Application Communication in Android. In Proceedings of the 9th International Conference on Mobile Systems, Applications, and Services, pages 239-252. ACM, 2011.

[7] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin. Permission Re-delegation: Attacks and Defenses. In Proceedings of the 20th USENIX Security Symposium, volume 18, pages 19-31, 2011.

[8] C. Gibler, J. Crussell, J. Erickson, and H. Chen. AndroidLeaks: Automatically Detecting Potential Privacy Leaks in Android Applications on a Large Scale. In Trust and Trustworthy Computing, pages 291-307. Springer, 2012.

[9] P. Gilbert, B.-G. Chun, L. P. Cox, and J. Jung. Vision: Automated Security Validation of Mobile Apps at App Markets. In Proceedings of the Second International Workshop on Mobile Cloud Computing and Services, pages 21-26. ACM, 2011.

[10] M. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic Detection of Capability Leaks in Stock Android Smartphones. In Proceedings of the 19th Annual Symposium on Network and Distributed System Security, 2012.

[11] Y. Zhang, M. Yang, B. Xu, Z. Yang, G. Gu, P. Ning, X. S. Wang, and B. Zang. Vetting Undesirable Behaviors in Android Apps with Permission Use Analysis. In Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security, pages 611-622. ACM, 2013.