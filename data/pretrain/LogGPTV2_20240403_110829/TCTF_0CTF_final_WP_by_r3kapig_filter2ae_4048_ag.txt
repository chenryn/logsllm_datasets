    [4,70,21,36,53,26,59,51,3,44,28],
    [41,23,39,37,1,28,63,64,37,35,51],
    [43,31,16,36,45,5,35,52,7,45,41],
    [26,3,54,58,50,37,27,49,3,46,11],
    [14,48,18,46,59,64,62,31,42,41,65],
    [17,50,68,10,24,40,58,46,48,14,58],
    [46,24,48,32,16,1,27,18,27,17,20],
    ]
    A = [
    [0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,12,0,0],
    [0,0,55,0,0,0,0,3,0,0,0],
    [0,14,0,0,0,0,37,0,0,0,0],
    [16,0,0,0,0,4,0,0,0,0,12],
    [0,0,0,0,25,0,0,0,0,18,0],
    [0,0,0,48,0,0,0,0,17,0,0],
    [0,0,61,0,0,0,0,25,0,0,0],
    [0,64,0,0,0,0,38,0,0,0,0],
    [13,0,0,0,0,50,0,0,0,0,0],
    ]
    U = zero_matrix(GF(p), 11, 11)
    A = Matrix(GF(p), A)
    E = Matrix(GF(p), E)
    R = Matrix(GF(p), R)
    aa = [
    [-1,0,0,0,0,-1,0,0,0,0,-1],
    [0,0,0,0,-1,0,0,0,0,-1,0],
    [0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0],
    ]
    # aa不是-1，说明该位置的值已经求出来了
    aa = Matrix(aa)
    row = 1 
    cnt = 0
    X = Matrix(Zmod(p), 11-row, 11-row)
    Y = Matrix(Zmod(p), 11-row, 1)
    for col in range(11):
        if -1 not in aa.column(col)[row:]: #选择已经求出A的列
            print(col)  #每一行赋值，用来构成解方程的矩阵
            X[cnt] = (A+R).column(col)[row:]
            Y[cnt] = E[row][col]
            cnt += 1
            if cnt==11-row:
                #print(X)
                #print(Y)
                r = X.solve_right(Y) # 求出U对应位置的值
                print(r)
                # 将结果写入到U中
                for tmp_idx in range(cnt):
                    U[row, row+tmp_idx] = r[tmp_idx, 0]
                print(U)
                break
最后能恢复成这个程度，最上面两行无法恢复存在多解
可以根据多解缩小范围，但是懒得优化了直接爆破hash：
    from hashlib import sha256
    alphabet = '=0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$!?_{}<>'
    for i1 in alphabet:
        for i2 in alphabet:
            for i3 in alphabet:
                for i4 in alphabet:
                    for i5 in alphabet:
                        flag = i1+i2+i3+i4+i5+"=bS2dAf3bohLgYo!BcN"
                        #print(len(flag))
                        if sha256(flag.encode()).hexdigest() == "95cb911a467482cc0f879861532e9ec7680b0846b48a9de25fb13b01c583d9f8":
                            print(i1+i2+i3+i4+i5)
                            exit(0)
最后得到：
    flag{6yY4L=bS2dAf3bohLgYo!BcN}
###  ezRSA
主要是通过magic来解出k和l，主要思路通过开方来得到一个大致的值，这个值就在正确值的附近，然后再遍历一下得到正确的值。  
其次，不难发现e的值生成得很特殊，我们通过模k或者l，就能拿到inverse(d_p, k)，inverse(d_q,
l)这两个值，再通过求逆得到d_p’，d_q’。  
再通过d_p’，d_q’生成p，q。通过d_p & mask, d_q & mask来检查哪一个正确，再通过正确值得到真正的p，q
    magic = 154118536863381755324327990994045278493514334577571515646858907141541837890
    def check(k, l, magic):
        res = 1337 * k ** 4 + 7331 * l ** 3 + 73331 * k ** 2 + 13337 * l ** 2 + 7 * k * l + 2 * k + l
        if res == magic:
            return True
    k1 = iroot(magic // 1337, 4)[0]
    for i in range(50):
        t = 1337 * (k1 - i) ** 4
        l1 = iroot((magic - t) // 7331, 3)[0]
        for j in range(20):
            if check(k1 - i, l1 - j, magic):
                if GCD(k1 - i, l1 - j) == 1:
                    k = k1 - i
                    l = l1 - j
                    break
    print(k, l)
    pk = (13144833961692953638155744717380612667335058302310815242506755676885208234342620331186804951145894484501542968789132832800279633590988848298405521677820600481054741175400784558190943019903268095468121342412114428860754522164657102624139527993254089574309927288457799155130004731846999722554981630609692264462023821778810225493633789543259034893395115658330417361250466876018981150507377427664192443342394808337473089411393262018525828475108149889915075872592673448211565529063972264324533136645650169687118301014325354524932405270872098633633071371124551496573869700120350489760340226474892703585296623, 4976865541630914024304930292600669330017247151290783019063407119314069119952298933566289617702551408322779629557316539138884407655160925920670189379289389411163083468782698396121446186733546486790309424372952321446384824084362527492399667929050403530173432700957192011119967010196844119305465574740437)
    e = pk[1]
    d_q = inverse((e % l), l)
    q = (e * d_q - 1) // l + 1
    n = pk[0]
    p = n // q
    enc = 12075538182684677737023332074837542797880423774993595442794806087281173669267997104408555839686283996516133283992342507757326913240132429242004071236464149863112788729225204797295863969020348408992315952963166814392745345811848977394200562308125908479180595553832800151118160338048296786712765863667672764499042391263351628529676289293121487926074423104988380291130127694041802572569416584214743544288441507782008422389394379332477148914009173609753877263990429988651290402630935296993764147874437465394433756515223371180032964253037946818633821940103044535390973722964105390263537722948112571112911062
    d = inverse(e, (p - 1) * (q - 1))
    print(long_to_bytes(pow(enc, d, pk[0])))
## Misc
###  eeenginx
首先使用路径/proc/self/exe得到当前nginx的二进制可执行文件，导入IDA发现exec_shell函数，里面存在执行/readflag的代码
交叉引用查找到ngx_http_eenginx_filter函数，得到执行条件
将cookies的session字段设置为图中即可
###  boynextdoor
AI人脸识别，构造对抗样本。  
构造一个图片让 embedding 尽量接近题目给的数值。
程序用的现成的库 [face_recognition](https://github.com/ageitgey/face_recognition),
[dlib](http://dlib.net/python/index.html)  
模型是 dlib_face_recognition_resnet_model_v1.dat  
这个工具可以把模型转成tensorflow接受的格式 
攻击方法就是每次对图像求梯度，用梯度下降来逼近给定的embedding。  
这题比较tricky的地方是，在传给神经网络前，dlib会先对图像做裁剪、放缩、随机抖动。  
这些变换可以用 Expectation over Transformation (EOT)
方法绕过，就是我们每步算梯度时，随机多次采样取平均梯度，这些变换的效果就会被中和掉。
    import dlib
    import face_recognition
    from PIL import Image
    import random
    import numpy as np
    from numpy.linalg import norm
    import tensorflow as tf
    from converter.model import ScaleLayer, ReshapeLayer
    keyface_encoding = [
        -8.69139656e-02,  8.30148682e-02, 1.45035293e-02, -1.27609253e-01,
        -1.42700657e-01, -1.58593412e-02, -9.87722948e-02, -1.23219922e-01,
        1.22708268e-01, -1.35270610e-01, 2.30035380e-01, -1.23880222e-01,
        -1.93354771e-01, -8.94580930e-02, -7.93846995e-02,  2.35654935e-01,
        -1.81906566e-01, -1.34962142e-01, -1.31788421e-02, -1.04968855e-02,
        4.10739481e-02,  2.44885264e-03, 8.52121785e-03,  5.79290688e-02,
        -1.15343466e-01, -3.23355764e-01, -8.69766697e-02, -2.12586801e-02,
        -9.11531225e-02, -3.72300223e-02, -2.80866250e-02,  1.02462806e-01,
        -1.71462923e-01, -2.73887850e-02, 4.65847105e-02,  6.94189966e-02,
        2.20984984e-02, -8.01130161e-02, 1.72256276e-01,  1.52742490e-04,
        -2.54432797e-01,  5.17657027e-02, 1.13474540e-01,  2.19928578e-01,
        1.68304369e-01,  1.28403883e-02, -1.04458071e-02, -1.59635231e-01,
        1.74563184e-01, -1.74656272e-01, 1.19449571e-04,  1.32924736e-01,
        4.52756137e-02, -5.11706285e-02, 1.84679162e-02, -7.74622187e-02,
        2.99685597e-02,  1.66548729e-01, -1.57246217e-01, -3.03353313e-02,
        9.47528481e-02, -6.63631782e-02, -3.17470208e-02, -1.85560584e-01,
        2.26004064e-01,  1.28806546e-01, -1.15559876e-01, -2.06283614e-01,
        1.40707687e-01, -1.00104943e-01, -8.33150819e-02,  8.25207531e-02,
        -1.33005619e-01, -1.90996230e-01, -2.95138747e-01, -2.70678457e-02,
        3.30062211e-01,  1.28746748e-01, -1.88333243e-01,  5.84503338e-02,
        -8.36766977e-03, -7.47905578e-03, 1.23152651e-01,  1.65390745e-01,
        5.01543283e-03,  1.08317155e-02, -8.22547823e-02, -4.03350629e-02,
        2.58023173e-01, -4.20480780e-02, -2.24346798e-02,  2.48134851e-01,
        -5.13138250e-04,  6.34072348e-02, 6.94152107e-03, -9.12788417e-03,
        -1.11195974e-01,  3.06070670e-02, -1.62505597e-01, -1.20745702e-02,
        -1.50425863e-02, -1.41657144e-02, -1.81038231e-02,  1.26067802e-01,
        -1.41881093e-01,  1.04972236e-01, -5.23118973e-02,  3.43461856e-02,
        -2.61395201e-02, -2.75162887e-02, -2.53709070e-02, -3.63143757e-02,
        1.08865552e-01, -2.02156767e-01, 1.07431002e-01,  8.50366130e-02,
        7.95102417e-02,  1.08320944e-01, 1.53148308e-01,  8.43793526e-02,
        -2.67507583e-02, -3.10356300e-02, -2.16474622e-01, -2.27650702e-02,
        1.20539531e-01, -9.48047191e-02, 1.40443712e-01,  5.64389490e-03,
    ]
    keyface_encoding = np.array(keyface_encoding)
    def check(im):
        encoding = face_recognition.face_encodings(im)[0]
        #print("emb", encoding)
        dis = face_recognition.face_distance([keyface_encoding], encoding)
        return dis[0]
    def normalize_image(image):    
        [R,G,B] = np.dsplit(image,image.shape[-1])
        Rx = (R - 122.782) / 256.
        Gx = (G - 117.001) / 256.
        Bx = (B - 104.298) / 256.
        new_image = np.dstack((Rx,Gx,Bx))
        return new_image
    def revert_image(image):    
        [R,G,B] = np.dsplit(image,image.shape[-1])
        Rx = R * 256 + 122.782
        Gx = G * 256 + 117.001
        Bx = B * 256 + 104.298
        new_image = np.dstack((Rx,Gx,Bx))
        new_image = np.clip(new_image, 0, 255)
        new_image = np.array(new_image, dtype=np.uint8)
        return new_image
    def model_predict(im_faces):
        global model
        im_faces = tf.cast(im_faces, tf.float32)
        with tf.GradientTape() as tape:
            tape.watch(im_faces)
            pred = model(im_faces)
            #print("tensorflow", pred)
            loss = tf.norm(pred - keyface_encoding, axis=1, ord=2)
        grad = tape.gradient(loss, im_faces)
        return loss, grad
    def edit_image(im, face):
        global model
        top, right, bottom, left = face
        jitter_num = 1000
        imgs = dlib.jitter_image(im, jitter_num)
        imgs = np.array([normalize_image(img) for img in imgs])
        loss, grad = model_predict(imgs)
        print(tf.reduce_mean(loss))
        grad = tf.reduce_mean(grad, axis=0)
        im = normalize_image(im)
        im[top:bottom,left:right]-= 1e-3 * grad[top:bottom,left:right]
        im = revert_image(im)
        return im
    im = face_recognition.load_image_file("save2.png")
    print(check(im))
    model_path = "dlib_face_recognition_resnet_model_v1.h5"
    model = tf.keras.models.load_model(model_path, custom_objects={'ScaleLayer': ScaleLayer, 'ReshapeLayer': ReshapeLayer})
    #model.summary()
    cnt = 0
    while True:
        cnt += 1
        loss2 = check(im)
        print(loss2)
        if loss2 " "cov_" NUMBER
    part: s_letter
        | s_word
        | s_number
        | s_digit
        | s_expr