on its own is easy to achieve, yet the combination, espe-
cially that of collusion resistance and unlinkability, makes
the construction challenging.
Attribute privacy. This property requires that the public
key pkχ hides attribute vector χ. That is, publishing pkχ
does not reveal which attributes the client holds. The fol-
lowing trivial solution achieves attribute privacy: generate
a set of 2m public keys and deﬁne the secret key to consist
of only one of the secret keys in each pair.
Collusion resistance. A set P of clients with attribute
vectors X = {χi}Pi∈P and corresponding keypairs must not
be able to construct a keypair representing χ /∈ X (or χ
representing a subset of attributes not implied by X — cf.
projectability below). Collusion resistance can be achieved
by combining the trivial solution from above with a secure
signature scheme; i.e., by providing a signature on the set of
the client’s public keys. This prevents clients from mixing
and matching the individual keys in their public keys, giving
collusion resistance.
Unlinkability. Unlinkability is the inability to link between
diﬀerent uses of the same public key. Speciﬁcally, we require
that it be possible to randomize a public key using some
algorithm Unlink so that the pair (pkχ, Unlink(pkχ)) looks
like two independent public keys. Without the requirement
of collusion resistance, unlinkability is easy to achieve (e.g.,
by using ElGamal keys). However, as we are interested in
collusion resistance we thus need to enable the creation of
a signature on the randomized key. For this we need to
use homomorphic signatures. However, existing signature
schemes do not provide the capabilities that are needed for
our schemes. Thus, combining signatures with unlinkability
is not straightforward.
Projectability. We require that given a keypair associated
with a vector χ, one can generate a keypair that is associ-
ated with any orthogonal projection of χ onto some subset
S ⊆ [m]. We stress that the subset S is explicit in the pro-
jection (otherwise, the encrypting party cannot know what
the projection is, and this could be used to obtain unautho-
rized decryptions). As each public key needs to be certiﬁed,
this implies that the certiﬁcate for the new key also needs
to be derived from the certiﬁcate of pkχ.
Committing encryption. We require that ASE encryp-
tion is committing.
5.1 Formal Deﬁnition
Let n denote the security parameter and let m be the
length of the attribute vector. We assume for simplicity
that the client receives a public key on the entire attribute
vector.
Definition 5.1. An attribute selective encryption (ASE)
scheme with attribute privacy, collusion resistance, and un-
linkability is a tuple of probabilistic-polynomial time algo-
rithms (Setup, GenCert, Vrfy, Enc, Dec, Unlink, Project) as fol-
lows:
• Setup(1n, m) takes as input an attribute set size m,
and outputs a master veriﬁcation key and a master
secret key (mVK, mSK) along with public parameters
PP. All the following algorithms implicitly take PP as
input.
1455Upon initialization with length parameter m, Fsetup runs (PP, mVK, mSK) ← Setup(1n, m) and stores (mVK, mSK).
1. Upon receiving (generate, sid, χi) from player Pi, Fsetup checks if there exists a record (i, ·, ·, ·).
sends (result, sid, ⊥) to Pi. Otherwise, Fsetup runs (pk, sk) ← GenCert(mSK, χi),
(result, sid, mVK, pk, sk) to Pi.
If so, Fsetup
records (i, χi) and sends
The public header of each message is: (generate, sid) and (result, sid); all other content is private.
Figure 4.2: Setup functionality Fsetup.
• GenCert(mSK, χ) takes as input the master secret key
and attribute vector χ ∈ {0, 1}m, and outputs a certi-
ﬁed keypair (pkχ, skχ) associated with χ.
• Vrfy(mVK, pkχ) takes as input the master veriﬁcation
key and a public key pkχ, and outputs 1 if and only
if pkχ is a valid public key.
• Enc(pkχ, (cid:126)x) takes as input a public key pkχ, and a vec-
is a series of
(cid:18) x1,0
tor (cid:126)x, where (cid:126)x =
(cid:19)
··· xm,0
··· xm,1
x1,1
2m messages. The function outputs an encryption c.
For simplicity, we assume that each xi,b is of length n
(this suﬃces for our use).
• Dec(skχ, c) takes as input a secret key skχ and a ci-
phertext c, and outputs a set of m plaintexts based
on χ.
• Unlink(pkχ, skχ) takes as input a public key pkχ and its
associated private key skχ, and outputs a new keypair
(pk(cid:48)
• Project(pkχ, skχ, S) takes as input a public key pkχ, its
associated secret key skχ, and a set S ⊆ {0, 1}m which
deﬁnes χ(cid:48)
by specifying which attributes of χ are to be
preserved. Project outputs a keypair (pk(cid:48)
χ(cid:48) ) on
the projected attribute vector χ(cid:48)
χ) for the same χ.
χ(cid:48) , sk(cid:48)
χ, sk(cid:48)
.
We require the following properties on the algorithms:
• (Correctness) For every (PP, mVK, mSK) ← Setup(1n, m),
χ ∈ {0, 1}m, (pkχ, skχ) ← GenCert(mSK, χ), and (cid:126)x, it
holds that Dec (skχ, Enc(pkχ, (cid:126)x)) = (x1,χ1 , . . . , xm,χm ).
• For every (pkχ, skχ), the output of Unlink(pkχ, skχ) is
• For every (PP, mVK, mSK) ← Setup(1n, m), χ ∈ {0, 1}m,
distributed identically to the output of GenCert.
and (pkχ, skχ) ← GenCert(mSK, χ), it holds that Vrfy(mVK,
pkχ) = 1.
• The algorithm Enc is a committing encryption scheme.
Finally, we require the existence of the following two algo-
rithms, which are used in our security deﬁnitions:
• GenCert∗
(mSK) takes as input the master secret key
and outputs a certiﬁed keypair (pk, sk) associated with
both the 0 and 1 value of each attribute.
GenCert∗
of 2m plaintexts.
(sk, c) takes as input a secret key sk generated by
and a ciphertext c, and outputs the full set
• Dec∗
We call an ASE scheme projectable if:
• For every (PP, mVK, mSK) ← Setup(1n, m), χ ∈ {0, 1}m,
(pkχ, skχ) ← GenCert(mSK, χ), S ⊆ {0, 1}m, the out-
put of Project(pkχ, skχ, S) is distributed according to
GenCert(mSK, χ(cid:48)
• Correctness holds for every projected attribute vector.
derived according to S.
) for χ(cid:48)
Having deﬁned the syntax, we now deﬁne security. We
deﬁne this via experiments between a challenger C and an
adversary Adv for an ASE scheme π.
Collusion resistance. Our collusion resistance experiment
guarantees that players can only obtain decryptions autho-
rized by their attribute vectors. The adversary Adv is given
oracle access to GenCert in order to model Adv corrupting
multiple parties and learning their attribute vectors. Even-
tually, Adv sends a public key to C, who responds with a
random plaintext (cid:126)x encrypted under this public key. The
adversary Adv responds with a set of potential plaintext mes-
sages. If some subset of this set corresponds to an attribute
vector (or any of its projections) that were not queried by
Adv to GenCert, then Adv wins.
The reason we need to deﬁne collusion resistance in this
way is that when proving security of our ABKE scheme,
we extract the plaintext through the adversary’s calls to
the random oracle. Namely, the plaintext messages xi,b are
input into the random oracle by the adversary. However,
the adversary is not limited to just inputting the proper
messages to the random oracle, and thus we need to consider
the set of all queries to the random oracle, a subset of these
which may contain the extracted plaintext.
Note that it is easy for the challenger to check whether
such a subset exists as follows. It checks whether each mes-
sage in M is a valid plaintext message xi,b. Given this set of
valid plaintext messages, the challenger can extract an at-
tribute vector (based on the (i, b) values) and check whether
such an attribute vector is unauthorized as per the deﬁni-
tion.
Experiment Exptcollude
π,Adv (1n, m):
1. C computes (PP, mVK, mSK) ← Setup(1n, m) and sends
PP and mVK to Adv.
2. Adv, with oracle access to GenCert(mSK,·), outputs a
public key pk. Let X be the set of attribute vectors
Adv used as input to its oracle.
3. C chooses a random plaintext (cid:126)x, as speciﬁed by the
4. Adv outputs a set M of potential plaintext messages.
5. The output of the experiment is 1 (and Adv wins) if
ASE syntax, and sends Enc(pk, (cid:126)x) to Adv.
and only if the following conditions all hold:
(a) Vrfy(mVK, pk) = 1;
(b) There exists some subset M(cid:48) ⊆ M such that ei-
ther (1) the strings in M(cid:48)
for some attribute vector χ, or (2) there exist two
strings s, s(cid:48) ∈ M(cid:48)
= xi,1
for some i ∈ [m].
(c) χ /∈ X , and χ is not a projection of any vector
from X .
such that s = xi,0 and s(cid:48)
correspond to {xi,χ[i]}i∈[m]
Note that Adv does not have oracle access to GenCert after
Step 3. This models the fact that Fabke assumes a static
setup after which the clients and their attributes are ﬁxed.
Attribute privacy. We now consider an adversary who
aims to infer χ from pkχ. This follows a standard indistin-
1456guishability-based formulation. At a high level, the adver-
sary is trying to distinguish a public key generated for some
attribute vector χ with an “all-powerful” public key gener-
ated by GenCert∗
. Note that the inability to distinguish
these two settings implies the inability to distinguish be-
tween any two attribute vectors by a simple hybrid argu-
ment.
Experiment Exptatt-priv
(1n, m):
π,Adv
1. C computes (PP, mVK, mSK) ← Setup(1n, m) and sends
2. Adv, with oracle access to GenCert(mSK,·), sends at-
3. C chooses b ∈R {0, 1}, and proceeds as follows:
PP and mVK to Adv.
tribute vector χ ∈ {0, 1}m to C.
• If b = 0, compute (pk, sk) ← GenCert(mSK, χ)
• If b = 1, compute (pk, sk) ← GenCert∗
and send pk to Adv.
(mSK) and
send pk to Adv.
4. Adv outputs a bit b(cid:48)
5. The output of the experiment is 1 (and Adv wins) if
.
and only if b(cid:48)
= b.
Unlinkability. Finally, we deﬁne an experiment to formal-
ize the property of unlinkability. The deﬁnition is relatively
weak in that we only need to prevent an adversary from de-
termining whether a keypair has been run through Unlink
or not. However, this is suﬃcient for our purposes. In par-
ticular, unlinkability of keys used in our ABKE protocols
will hold due to the conjunction of the guarantees of both
attribute privacy and unlinkability.
Experiment Exptlink
π,Adv(1n, m):
1. C computes (PP, mVK, mSK) ← Setup(1n, m) and sends
2. Adv with oracle access to GenCert(mSK,·) eventually
3. C computes (pk0, sk0) ← GenCert(mSK, χ) and (pk1, sk1) ←
PP and mVK to Adv.
sends χ to C.
Unlink(pk0, sk0). C chooses b ∈R {0, 1} and sends
(pkb, skb) to Adv.
4. Adv outputs b(cid:48)
5. The output of the experiment is 1 (and Adv wins) if
and only if b(cid:48)
= b.
.
Note that we cannot simply set Unlink to the identity func-
tion as we need the output distribution of Unlink to be the
same as that of GenCert, as required in Deﬁnition 5.1.
Security deﬁnition. We are now ready to deﬁne security.
Definition 5.2. A (projectable) attribute selective en-
cryption scheme π with attribute privacy, collusion resis-
tance, and unlinkability is secure if for every probabilistic-
polynomial time adversary Adv there exists a negligible func-
tion µ such that for every n and every Y ∈ {att-priv, link}
it holds that
(cid:104)
(cid:104)
Pr
ExptY
π,Adv(1n, m) = 1
and
Pr
Exptcollude
π,Adv (1n, m) = 1
(cid:105) ≤ 1
(cid:105) ≤ µ(n).
2
+ µ(n)
ASE Instantiations. We present two schemes realizing
Deﬁnition 5.2 in §8 and §9.
6. ABKE FROM ASE
We now construct ABKE for public policies by integrating
ASE with garbled circuit-based zero-knowledge proofs [34]
and key agreement. Jawurek et al. [34] observed that for
zero-knowledge proofs, the veriﬁer-constructed circuit may
be opened to the prover post-evaluation since it has no pri-
vate data. Carefully arranging the prover’s and veriﬁer’s
commitments and openings, they ensure that neither can
cheat, and only a single garbled circuit needs to be garbled,
sent, and evaluated. Speciﬁcally, their protocol proceeds
by the server using a sender-committing oblivious transfer