      }
      return ret;
    }
    static void my_free_hook(void *ptr, const void *caller) {
      afl_free(ptr);
      if (config::log_malloc) {
        DestroyMallocHooks();
        fprintf(stderr, "free(0x%.10zx)                                 ",
                (size_t)ptr);
        PrintMallocBacktrace(caller);
        InitMallocHooks();
      }
    }
来看 SetSignalHandler(GeneralSignalHandler)，可以看到出SetSignalHandler主要是让捕获
SIGABRT（异常中止)，SIGFPE(算术异常)，SIGSEGV(段越界），SIGILL（非法指令），SIGBUS（非法地址）这五个信号，信号处理交给GeneralSignalHandler
    void SetSignalHandler(void (*handler)(int, siginfo_t *, void *)) {
      struct sigaction action;
      memset(&action, 0, sizeof(action));
      action.sa_flags = SA_SIGINFO | SA_NODEFER;
      action.sa_sigaction = handler;
      if (sigaction(SIGABRT, &action, NULL) == -1) {
        perror("sigabrt: sigaction");
        _exit(1);
      }
      if (sigaction(SIGFPE, &action, NULL) == -1) {
        perror("sigfpe: sigaction");
        _exit(1);
      }
      if (sigaction(SIGSEGV, &action, NULL) == -1) {
        perror("sigsegv: sigaction");
        _exit(1);
      }
      if (sigaction(SIGILL, &action, NULL) == -1) {
        perror("sigill: sigaction");
        _exit(1);
      }
      if (sigaction(SIGBUS, &action, NULL) == -1) {
        perror("sigbus: sigaction");
        _exit(1);
      }
    }
GeneralSignalHandler，起因是因为qemu自身的crash处理机制只会显示出qemu的内部指令而不会有栈帧信息，这里的设计有一些小细节，比如double
fault handler可以防止处理函数自身的崩溃，用各个traceid，更丰富完善的栈展开，log和地址记录
    static void GeneralSignalHandler(int signo, siginfo_t *info, void *extra) {
      // Restore original allocator.
      DestroyMallocHooks();
      // Set a double fault handler in case we crash in this function (e.g. during
      // stack unwinding).
      SetSignalHandler(DoubleFaultHandler);
      // For an unknown reason, the Android abort() libc function blocks all signals
      // other than SIGABRT from being handled, which may prevent us from catching
      // a nested exception e.g. while unwinding the backtrace. In order to prevent
      // this, we unblock all signals here.
      sigset_t sigset;
      sigemptyset(&sigset);
      sigprocmask(SIG_SETMASK, &sigset, NULL);
      // Whether the signal is supported determines if we are pretending to print
      // out an ASAN-like report (to be treated like an ASAN crash), or if we just
      // print an arbitrary report and continue with the exception to be caught by
      // the fuzzer as-is.
      const char *signal_string = SignalString(signo);
      const bool asan_crash = (signal_string != NULL);
      const ucontext_t *context = (const ucontext_t *)extra;
      const void *orig_pc = (const void *)context->uc_mcontext.pc;
      // If requested by the user, open the output log file.
      int output_log_fd = -1;
      if (!config::log_path.empty() && asan_crash) {
        output_log_fd = open(config::log_path.c_str(), O_CREAT | O_WRONLY, 0755);
      }
      const bool valid_pc = IsCodeAddressValid(orig_pc);
      if (asan_crash) {
        Log(output_log_fd,
            "ASAN:SIG%s\n"
            "=================================================================\n"
            "==%d==ERROR: AddressSanitizer: %s on unknown address 0x%zx "
            "(pc 0x%zx sp 0x%zx bp 0x%zx T0)\n",
            signal_string, getpid(), signal_string, (size_t)info->si_addr,
            orig_pc, context->uc_mcontext.sp, context->uc_mcontext.sp);
      } else {
        Log(output_log_fd, "======================================== %s\n",
            strsignal(signo));
      }
      if (valid_pc) {
        globals::in_stack_unwinding = true;
        if (setjmp(globals::jbuf) == 0) {
          StackUnwindContext unwind_context;
          unwind_context.debug_malloc_unwind = false;
          unwind_context.current_trace_id = 0;
          unwind_context.first_trace_id = 3;
          unwind_context.output_log_fd = output_log_fd;
          unwind_context.backtrace_map = BacktraceMap::Create(getpid());
          if (!unwind_context.backtrace_map->Build()) {
            delete unwind_context.backtrace_map;
            unwind_context.backtrace_map = NULL;
          }
          UnwindBacktrace(&unwind_context);
        } else {
          Log(output_log_fd,
              "    !! "
              "\n");
        }
        globals::in_stack_unwinding = false;
      } else {
        SymbolizeAndLogAddress(output_log_fd, /*backtrace_map=*/NULL, /*index=*/0,
                               orig_pc);
      }
      if (valid_pc) {
        // In case we are executing on a system with XOM (Execute Only Memory),
        // the code sections might not be readable for the disassembler. Let's make
        // sure the opcodes are indeed readable before proceeding.
        const size_t disasm_len = 10 * 4;
        const size_t uint_pc = (size_t)orig_pc;
        const size_t pc_page_aligned = uint_pc & (~0xfffLL);
        const size_t mprotect_length = (uint_pc + disasm_len) - pc_page_aligned;
        mprotect((void *)pc_page_aligned, mprotect_length, PROT_READ | PROT_EXEC);
        csh handle;
        cs_insn *insn;
        if (cs_open(CS_ARCH_ARM64, CS_MODE_ARM, &handle) == CS_ERR_OK) {
          size_t count = cs_disasm(handle, (const uint8_t *)orig_pc, disasm_len,
                                   (uint64_t)orig_pc, /*count=*/0, &insn);
          if (count > 0) {
            Log(output_log_fd, "\n==%d==DISASSEMBLY\n", getpid());
            for (size_t j = 0; j uc_mcontext.regs[0], context->uc_mcontext.regs[1],
              context->uc_mcontext.regs[2], context->uc_mcontext.regs[3],
              context->uc_mcontext.regs[4], context->uc_mcontext.regs[5],
              context->uc_mcontext.regs[6], context->uc_mcontext.regs[7],
              context->uc_mcontext.regs[8], context->uc_mcontext.regs[9],
              context->uc_mcontext.regs[10], context->uc_mcontext.regs[11],
              context->uc_mcontext.regs[12], context->uc_mcontext.regs[13],
              context->uc_mcontext.regs[14], context->uc_mcontext.regs[15],
              context->uc_mcontext.regs[16], context->uc_mcontext.regs[17],
              context->uc_mcontext.regs[18], context->uc_mcontext.regs[19],
              context->uc_mcontext.regs[20], context->uc_mcontext.regs[21],
              context->uc_mcontext.regs[22], context->uc_mcontext.regs[23],
              context->uc_mcontext.regs[24], context->uc_mcontext.regs[25],
              context->uc_mcontext.regs[26], context->uc_mcontext.regs[27],
              context->uc_mcontext.regs[28], context->uc_mcontext.regs[29],
              context->uc_mcontext.regs[30], context->uc_mcontext.sp);
      Log(output_log_fd, "\n==%d==ABORTING\n", getpid());
      if (output_log_fd != -1) {
        close(output_log_fd);
      }
      // Exit with the special exitcode to inform the fuzzer that a crash has
      // occurred.
      if (asan_crash) {
        _exit(config::exitcode);
      }
      signal(signo, NULL);