	out = server_encrypt(from_nibbles(password), 1)
	out = [ord(x) for x in out]
	return out
def server_encrypt_for_nibbles_(arg,nibbles1,nibbles2,nibbles3,nibbles4):
	password = [0 for x in range(16)]
	password[nibbles1[0]]=arg[0]
	password[nibbles1[1]]=arg[1]
	password[nibbles1[2]]=arg[2]
	password[nibbles1[3]]=arg[3]
	password[nibbles2[0]]=arg[0]
	password[nibbles2[1]]=arg[1]
	password[nibbles2[2]]=arg[2]
	password[nibbles2[3]]=arg[3]
	password[nibbles3[0]]=arg[0]
	password[nibbles3[1]]=arg[1]
	password[nibbles3[2]]=arg[2]
	password[nibbles3[3]]=arg[3]
	password[nibbles4[0]]=arg[0]
	password[nibbles4[1]]=arg[1]
	password[nibbles4[2]]=arg[2]
	password[nibbles4[3]]=arg[3]
	out = server_encrypt(from_nibbles(password), 1)
	out = [ord(x) for x in out]
	return out
def get_changing_bytes(tests,nibbles):
	chbytes = set()
	prev = server_encrypt_for_nibbles(tests[0],nibbles)
	for test in tests[1:]:
		now = server_encrypt_for_nibbles(test,nibbles)
		print "****"
		print now
		print prev
		for i in range(16):
			if prev[i]!=now[i]:
				chbytes.add(i) 
		if len(chbytes) == 4:
			break
	assert( len(chbytes) == 4 )			
	return list(chbytes)
def compute_key_out(out_nibbles, in_nibbles):
	#brute one column - nibbles in -> nibbles out
	key_out = {}
	for n1 in range(16):
		for n2 in range(16):
			for n3 in range(16):
				for n4 in range(16):
					nibbles = [0 for x in range(16)]
					nibbles[in_nibbles[0]]=n1
					nibbles[in_nibbles[1]]=n2
					nibbles[in_nibbles[2]]=n3
					nibbles[in_nibbles[3]]=n4
					key = from_nibbles(nibbles)
					out = Lazy_LED_enc_no_lazy_sbox([0 for x in range(8)], key + [0 for x in range(8)], 16*8, 1)
					out = [ord(x) for x in out]
					out = [out[out_nibbles[0]],out[out_nibbles[1]],out[out_nibbles[2]],out[out_nibbles[3]]]
					key_out[(n1,n2,n3,n4)]=tuple(sorted(out)) # posortowane
	print "map key_out created!"
	return key_out
def solve_for_nibbles(key_out, out_nibbles, in_nibbles, nibbles_list):
	nibbles1 = nibbles_list[0]
	nibbles2 = nibbles_list[1]
	nibbles3 = nibbles_list[2]
	nibbles4 = nibbles_list[3]
	password_tests = [tuple([y for x in range(4)]) for y in range(16)]
	changing_bytes = get_changing_bytes(password_tests,in_nibbles)
	print "changing bytes = "+str(changing_bytes)
	for n1 in range(16):
		for n2 in range(16):
			for n3 in range(16):
				for n4 in range(16):			
					key_correct = True
					for password in password_tests:
						out = server_encrypt_for_nibbles_(password,nibbles1,nibbles2,nibbles3,nibbles4) #co ta funkcjarobi
						out = tuple(sorted([out[changing_bytes[0]],out[changing_bytes[1]],out[changing_bytes[2]],out[changing_bytes[3]]]))
						real_out = key_out[(n1^password[0],n2^password[1],n3^password[2],n4^password[3])]
						if out!=real_out:
							key_correct=False
							break
					if key_correct:
						print "found 2B of key!!!"
						print (n1,n2,n3,n4)
						return (n1,n2,n3,n4)
def update_key_nibbles(key_nibbles, nibbles, key_part):
	for i in range(4):
		key_nibbles[nibbles[i]]=key_part[i]
def recover_lazy_sbox(key_nibbles):
	"""
	key_nibbles - list
	"""
	password_tests = [[0x41]*8,[0x61]*8,[0x63]*8,[0x7a]*8,[0x00]*8,[0x20]*8,[0xf0]*8,[0xaa]*8,[0xc8]*8]
	lazy_sbox = [None]*16
	b = False
	for test in password_tests:
		if b:
			break
		real_out = server_encrypt(test, 1)
		real_out = [ord(x) for x in real_out]
		my_out = Lazy_LED_enc_no_lazy_sbox(test, from_nibbles(key_nibbles+ [0 for x in range(16)]), 16*8, 1)
		my_out = [ord(x) for x in my_out]
		"""
		print "!!!!"
		print sbox_lazy
		print my_out
		print real_out
		"""
		for i in range(16):
			if my_out.count(i) == 1:
				idx1 = my_out.index(i)
				idx2 = real_out.index(i)
				lazy_sbox[idx2] = idx1
				if not None in lazy_sbox:
					b = True
					break
		#print lazy_sbox
	print "lazy sbox = "+str(lazy_sbox)
	return lazy_sbox
def reverse_permutation(l):
	r = [None for x in l]
	for i in range(len(l)):
		r[l[i]] = i
	return r
def worker( arguments ):
	half_key_nibbles = arguments[0]
	lazy_sbox = arguments[1]
	server_out = arguments[2]
	nibbles1 = arguments[3]
	nibbles2 = arguments[4]
	return solve2_for_nibbles(half_key_nibbles, lazy_sbox, server_out, nibbles1,nibbles2)
def solve_second_part(half_key_nibbles, lazy_sbox):
	test_password = [0x61]*8 
	server_out = server_encrypt(test_password, 5)
	server_out = map(ord, server_out)
	#let's multithread this
	"""
	fifth_2B = solve2_for_nibbles(half_key_nibbles, lazy_sbox, server_out, (0,4,8,12),(0,5,10,15))
	sixth_2B = solve2_for_nibbles(half_key_nibbles, lazy_sbox, server_out, (1,5,9,13),(1,6,11,12))
	seventh_2B = solve2_for_nibbles(half_key_nibbles, lazy_sbox, server_out, (2,6,10,14),(2,7,8,13))
	eighth_2B = solve2_for_nibbles(half_key_nibbles, lazy_sbox, server_out, (3,7,11,15),(3,4,9,14))
	"""
	print "starting multiprocessing"
	print "time = "+str(int(time.time()-remote_start_time))
	pool = multiprocessing.Pool(processes=4)
	result = pool.map(worker, [(half_key_nibbles, lazy_sbox, server_out,(0,4,8,12),(0,5,10,15)) , (half_key_nibbles, lazy_sbox, server_out,(1,5,9,13),(1,6,11,12)) ,  (half_key_nibbles, lazy_sbox, server_out,(2,6,10,14),(2,7,8,13)) ,  (half_key_nibbles, lazy_sbox, server_out,(3,7,11,15),(3,4,9,14))  ])
	pool.close()
	print result
	(fifth_2B, sixth_2B, seventh_2B, eighth_2B) = result
	#join them in key
	key_nibbles = [0]*16
	update_key_nibbles(key_nibbles, (0,5,10,15), fifth_2B)
	update_key_nibbles(key_nibbles, (1,6,11,12), sixth_2B)
	update_key_nibbles(key_nibbles, (2,7,8,13), seventh_2B)
	update_key_nibbles(key_nibbles, (3,4,9,14), eighth_2B)
	key = from_nibbles(key_nibbles)
	print "second part of key = "+str(key)
	return key
def solve2_for_nibbles(half_key_nibbles, lazy_sbox, server_out, out_nibbles, in_nibbles):	
	test_password = [0x61]*8
	lazy_sbox_reverse = reverse_permutation(lazy_sbox)
	changing_bytes = [lazy_sbox_reverse[out_nibbles[x]] for x in range(4) ]
	print "changing bytes = "+str(changing_bytes)
	for n1 in range(16):
		for n2 in range(16):
			for n3 in range(16):
				for n4 in range(16):
					nibbles = [0 for x in range(16)]
					nibbles[in_nibbles[0]]=n1
					nibbles[in_nibbles[1]]=n2
					nibbles[in_nibbles[2]]=n3
					nibbles[in_nibbles[3]]=n4
					out = host_encrypt_for_key(test_password,from_nibbles(half_key_nibbles + nibbles), lazy_sbox, 5)
					out = map(ord, out)
					if out[changing_bytes[0]] == server_out[changing_bytes[0]] and out[changing_bytes[1]] == server_out[changing_bytes[1]] and out[changing_bytes[2]] == server_out[changing_bytes[2]] and out[changing_bytes[3]] == server_out[changing_bytes[3]]:
						new_part = (n1,n2,n3,n4)
						print "found next 2B part!! "+str(new_part)
						print "time = "+str(int(time.time()-remote_start_time))
						return new_part
def solve():
	#get 4 2-Bytes parts of key
	key_out1 = compute_key_out((0,4,8,12),(0,5,10,15))
	key_out2 = compute_key_out((1,5,9,13),(1,6,11,12))
	key_out3 = compute_key_out((2,6,10,14),(2,7,8,13))
	key_out4 = compute_key_out((3,7,11,15),(3,4,9,14))
	nibbles_list = [(0,5,10,15), (1,6,11,12), (2,7,8,13), (3,4,9,14)]
	first_2B = solve_for_nibbles(key_out1,(0,4,8,12),(0,5,10,15), nibbles_list)
	second_2B = solve_for_nibbles(key_out2,(1,5,9,13),(1,6,11,12), nibbles_list)
	third_2B = solve_for_nibbles(key_out3,(2,6,10,14),(2,7,8,13), nibbles_list)
	fourth_2B = solve_for_nibbles(key_out4,(3,7,11,15),(3,4,9,14), nibbles_list)
	#join them in key
	key_nibbles = [0]*16
	update_key_nibbles(key_nibbles, (0,5,10,15), first_2B)
	update_key_nibbles(key_nibbles, (1,6,11,12), second_2B)
	update_key_nibbles(key_nibbles, (2,7,8,13), third_2B)
	update_key_nibbles(key_nibbles, (3,4,9,14), fourth_2B)
	key = from_nibbles(key_nibbles)
	print "key = "+str(key)
	lazy_sbox = recover_lazy_sbox(key_nibbles)
	second_half_of_key = solve_second_part(key_nibbles, lazy_sbox)
	key = key + second_half_of_key
	r.sendline("exit")
	r.recvuntil("key?")
	r.sendline("".join(map(to_hex,key)))
	print r.recv()
	print r.recv()
	print "key = "+str(key)
	print "time = "+str(int(time.time()-remote_start_time))
if __name__ == '__main__':
    solve()