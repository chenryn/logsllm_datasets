(k) = Advdem−ind−otcca
DEM,B
(k)
(4)
PROOF SKETCHES OF THEOREMS A.1 AND A.2. Since policy and key
in the SPKEM scheme of Section 5.2 are encapsulated using a DEM, i.e.,
policy concatenated with a random key constitute the message for DEM, it
is straight forward to show that attacks on key or policy indistinguishabi-
lity of SPKEM reduce to attacks on indistinguishability of the underlying
DEM.
The PKEM scheme of Section 5.2 is secure against adaptive chosen ci-
phertext attacks on both key and policy indistinguishability. In particular,
the following theorems hold.
Theorem A.3.
If KEM and SPKEM schemes are secure against adaptive
chosen ciphertext attack and one-time adaptive chosen ciphertext attack on
key indistinguishability respectively then PKEM is secure against adaptive
chosen ciphertext attacks on key indistinguishability.
In particular, for every PPT adversary A, there exist PPT adversaries B1
and B2, whose running times are essentially the same as that of A, such
that for all k ∈ N, we have,
Advpkem−key−ind−cca2
PKEM, A
2· Advkem−ind−cca2
(k) ≤
(k) + AdvSPKEM−key−ind−otcca
SPKEM,B2
KEM,B1
(5)
(k)
PROOF SKETCH OF THEOREM A.3. Let G0 be the original attack game
2) denote the tar-
deﬁned by Deﬁnition A.1. Fix A and k and let C∗ = (C∗
get ciphertext. Let E0 denote the event that b0 = b in G0 so that
1 ,C∗
Advpkem−key−ind−cca2
(k) = |Pr[E0]− 1/2|
PK EM ,A
(6)
We shall deﬁne two modiﬁed attack games G1 and G2. Each of the
games G0,G1,G2 operates on the same underlying probability space. That
is, the cryptographic keys, coin tosses of A and hidden bit b take identical
values across all games. However, the games differ in how the environment
responds to oracle queries. Let Ei be the event that b0 = b in game Gi for
1 ≤ i ≤ 2.
Game G1 In this game whenever a ciphertext (C1,C2) is submitted to the
decryption oracle after the invocation of the encryption oracle, if C1 = C∗
1
but C2 6= C∗
2, then the decryption oracle does not apply KEM.Decrypt to
obtain the symmetric key but uses K∗
1 produced by the encryption oracle
instead. This is just a conceptual change and
Pr[E0] = Pr[E1]
(7)
Game G2 This game is similar to the game G1 except that a completely
random key, K†
1 in both encryption and decryption
oracles. Any difference in the success probability of A against games G1
and G2 can be leveraged to construct an adversary algorithm that can break
CCA security of KEM. More precisely, one can show the following:
Lemma A.3. There exists a probabilistic algorithm B1 whose running time
is essentially the same as that of A, such that
1 , is used in place of K∗
|Pr[E1]− Pr[E2]| = 2· Advkem−ind−cca2
Furthermore, in game G2, since a random key, K†
1 , independent of the
one encapsulated by C∗
2 and
by the decryption oracle, A is essentially carrying out a one-time adaptive
chosen ciphertext attack against the SPKEM scheme described above. Thus
we have
1, is used to produce the target ciphertext C∗
(k)
(8)
KEM,B1
|Pr[E2]− 1/2| = Advspkem−key−ind−cca2
(k)
The theorem now follows from equations 6, 7, 8 and 9.
SPKEM, B2
(9)
Theorem A.4.
If the underlying KEM and SPKEM schemes are secure
against adaptive chosen ciphertext attack and one-time adaptive chosen
ciphertext attack on key and policy indistinguishability respectively, then
PKEM is secure against adaptive chosen ciphertext attacks on policy in-
distinguishability.
In particular, for every PPT adversary A, there exists a PPT adversary B1
and B2, whose running time is essentially the same as that of A, such that
for all k ∈ N, we have,
Advpkem−pol−ind−cca2
PKEM, A
Advkem−ind−cca2
KEM,B
(k) =
(k) + Advspkem−pol−ind−otcca
SPKEM,B
(10)
(k)
PROOF SKETCH OF THEOREM A.4. This proof is very similar to that
of Theorem A.3 above except that in Game G2 the adversary is launching
an OTCCA attack against policy indistinguishability of SPKEM instead of
key indistingusiahbility.
δ0 = 1 else it outputs δ0 = 0. Note that when δ = 1 A is in game G1 and
when δ = 0 A is in game G2. Therefore Pr[b0 = b|δ = 1] = Pr[E1] and
Pr[b0 = b|δ = 0] = Pr[E2]. Then Advpkem−key−ind−cca2
(k) is,
Pr[δ0 = δ]− 1/2 =1/2·(cid:12)(cid:12)Pr[δ0 = 1|δ = 1]− Pr[δ0 = 1|δ = 0](cid:12)(cid:12)
=1/2·(cid:12)(cid:12)Pr[b0 = b|δ = 1]− Pr[b0 = b|δ = 0](cid:12)(cid:12)
PKEM,B1
=
1/2·|Pr[E1]− Pr[E2]|
PROOF OF LEMMA B.2. Let probability of success of A = (A1,A2) in
game G2 be 1/2 + ε. Then, |Pr[E2]− 1/2| = ε. Furthermore, let 1/2 + α
be the probability that A outputs 1 when the challenge ciphertext it is given
encrypts m0 and pol1 and 1/2 + β be the probability that A outputs 1 when
the challenge ciphertext it is given encrypts m1 and pol0.
Part 1. B2 is OTCCA adversary against (message) indistinguish-
ability of DEM that runs A.
In particular, B2 generates a KEM key
pair, (sk, pk), and runs one instance of A1 giving it pk and two in-
stances of A2 (i.e., A2,0 and A2,1 ) with different challenge ciphertexts
as follows. Phase 1 queries of A1 are answered similar to the way de-
scribed in proof of Lemma B.1 above except that B2 has access to sk.
When A1 outputs a message pair (m0,m1) and policy pair (pol0, pol1)
and state information St, B2 does the following: 1) veriﬁes that none
of the of the corrupted users ui satisﬁes either pol0 or pol1, 2) gives
the pair (m0,m1) to the DEM game environment and obtains the chal-
lenge ciphertext C∗
2 = DEM.Encrypt(mδ,Kdem), 2) computes the following
C∗
1,0 = PKEM.Encrypt(pol0, pk), C∗
1,1 = PKEM.Encrypt(pol1, pk) and 3)
runs A2,0 with (C∗
1,0,C∗
2) as the challenge cipher-
texts. Phase 2 queries of A2 are answered just like phase 1 except, 1)
when A2 adds/corrupts a user ui, B2 veriﬁes that ui does not satisfy ei-
ther pol0 or pol1 and 2) when decryption query of A2,ψ has C1 = C∗
1,ψ in
which case B2 returns ⊥ as the adversary does not satisfy either of the
policies. Let A2,0’s output be b0 and A2,1’s output be b1. B2 outputs
δ0 = b0 if b0 = b1 and outputs δ0 = bθ otherwise, where θ $←− {0,1}. Thus,
Advdem−ind−cca2
(k) = |Pr[δ0 = δ]− 1/2| is
2) and A2,1 with (C∗
1,1,C∗
=
=
1
2
1
2
DEM,B2
·(cid:0)Pr[δ0 = 0|δ = 0] + Pr[δ0 = 1|δ = 1](cid:1)− 1
·(cid:16)(cid:0)Pr[b0 = 0∧ b1 = 0|δ = 0] + Pr[θ = 0∧ b0 = 0∧ b1 = 1|δ = 0]
+Pr[θ = 1∧ b0 = 1∧ b1 = 0|δ = 0](cid:1) +(cid:0)Pr[b0 = 1∧ b1 = 1|δ = 1]
+Pr[θ = 0∧ b0 = 1∧ b1 = 0|δ = 1] + Pr[θ = ∧b0 = 0∧ b1 = 1|δ = 1](cid:1)(cid:17)− 1
2
=
ε
2
+
(β− α)
4
2
(15)
Part 2. B3 is CCA adversary against policy indistinguishability of PKEM
that runs A. B3 is constructed similarly to B2 with obvious modiﬁcations.
We then have
Advpkem−pol−ind−cca2
PKEM,B3
(k) =
− (β− α)
4
ε
2
(16)
The lemma follows from equations 15 and 16.
PROOF SKETCH OF THEOREM 5.2. Intuitively, since the message en-
crypted under the both the policies is the same any advantage an adver-
sary has in distinguishing between the two policies encapsulated by the
PKEM-DEM scheme must be due to an advantage the adversary has in
distinguishing between two policies encapsulated by the PKEM scheme.
In other words, any advantage an adversary has in breaking policy indist-
inguishability of PKEM-DEM can be translated into advantage in breaking
policy indistinguishability of PKEM.
B. PKEM-DEM SECURITY
In the proofs for the following Theorems, decryption oracle for PKEM-
DEM executes PKEM-DEM.Decrypt-I and PKEM-DEM.Decrypt-II on the
decryption query and returns the output of both the algorithms to the adver-
sary.
PROOF OF THEOREM 5.1. Let G0 be the original attack game, i.e.,
Gpkem−dem−ind−cca2
(k), described in Deﬁnition 5.3. Fix A and k and let
PKEM-DEM,A
C∗ = (C∗
1 ,C∗
2) denote the target ciphertext. Let E0 denote the event that
b0 = b in G0 so that
Advpkem−dem−ind−cca2−cu
(k) = |Pr[E0]− 1/2|
PKEM-DEM,A
(11)
We shall deﬁne two modiﬁed attack games G1 and G2. Each of the
games G0,G1,G2 operates on the same underlying probability space. That
is, the cryptographic keys, coin tosses of A and hidden bit b take identical
values across all games. However, the games differ in how the environment
responds to oracle queries. Let Ei be the event that b0 = b in game Gi for
1 ≤ i ≤ 2.
Game G1 In this game whenever a ciphertext (C1,C2) is submitted to the
decryption oracle after the invocation of the encryption oracle, if C1 = C∗
1
but C2 6= C∗
2, then the decryption oracle does not apply PKEM.Decrypt to
obtain the symmetric key but uses K∗
2 produced by the encryption oracle
instead. This is just a conceptual change and
Pr[E0] = Pr[E1]
(12)
2 , is used in place of K∗
Game G2 This game is similar to the game G1 except that a completely
random key, K†
2 in both encryption and decryption
oracles. Any difference in the success probability of A against games G1
and G2 can be leveraged to construct an adversary algorithm that can break
key indistinguishability of PKEM. More precisely we have:
Lemma B.1. There exists a probabilistic algorithm B1 whose running time
is essentially the same as that of A, such that
|Pr[E1]− Pr[E2]| = 2· Advpkem−key−ind−cca2
PKEM,B1
(k)
(13)
We observe that in game G2, message mb is encapsulated with a DEM
using a key, K†
2 , that is independent of the one encapsulated by PKEM.
Thus, in game G2, adversary A is essentially carrying out one-time adaptive
chosen ciphertext attack against an instance of DEM or an adaptive chosen
ciphertext attack on the policy indistinguishability against an instance of
PKEM. Speciﬁcally, we have:
Lemma B.2. There exists probabilistic algorithms B2 and B3 whose run-
ning times (and number of decryption queries) are at most twice that of A,
such that
|Pr[E2]− 1/2| ≤
Advdem−ind−cca2
DEM,B2
(k) + Advpkem−pol−ind−cca2
PKEM,B3
(k)
(14)
The theorem now follows from equations 3, 4, 5, 10, 11, 12, 13 and
14.
PROOF OF LEMMA B.1. B1 is an adversary against key indistinguish-
ability of PKEM and is given public-key, pk, and access to a decryption
oracle for PKEM. B1 runs A with the public-key pk. When adversary A
adds/corrupts a user, ui, B1 stores the user ui and associated attributes in a
list. Decryption queries, C = (C1,C2), with privileges of user ui from A are
answered by B1 as follows: 1) B1 submits C1 to its PKEM oracle and gets
either a ⊥ or (pol,K2), 2) if ⊥, it returns ⊥ to A, 3) else, if f (ui, pol) = 1
returns K2 and DEM.Decrypt(K2,C2) otherwise it returns ⊥. When A out-
puts a message and policy pairs (m0,m1) and (pol1, pol2) and asks for the
challenge ciphertext, B1 does the following: 1) veriﬁes that none of the of
the corrupted users ui satisﬁes either pol0 or pol1, 2) picks a bit b $←− {0,1},
3) gives polb to the PKEM game environment and gets a challenge key and
ciphertext pair, (K∗,C∗
2 = DEM.Encrypt(mb,K∗) and
gives the challenge pair (C∗
2) to A. Here K∗ is the key encapsulated by
1 if δ = 1 or a random key if δ = 0 where δ $←− {0,1} is chosen by PKEM
C∗
game environment. In the second phase, when A adds/corrupts a user ui,
B1 veriﬁes that ui does not satisfy either pol0 or pol1. To answer decryption
queries, C = (C1,C2) from A in the second phase, B1 uses the decryption
oracle for PKEM as described above. Note that if A asks queries where
1 then B1 returns ⊥ since none of the users compromised by A sat-
C1 = C∗
isfy either pol1 or pol2. If A outputs a guess bit b0 = b then B1 outputs
1), and 4) computes C∗
1 ,C∗