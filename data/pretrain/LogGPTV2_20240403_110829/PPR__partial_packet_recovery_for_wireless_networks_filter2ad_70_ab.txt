2Measured in units of codeword-time, 16 µs in our radios.
S Symbols ↔ S/B codewordsB/k symbolsCodeword ↔ b bitslendstsrclendstsrcHeaderTrailerTraining SequenceSFDPreambleTraining SequenceEFDPostamblecksumFigure 4: Partial packet reception at two different codeword synchronization offsets during a loss in codeword/symbol synchroniza-
tion: codeword correctness (triangle indicators) and each codeword’s associated Hamming distance (curves). Despite uncertainty in
PHY codeword timing recovery, Hamming distance indicates the correct parts of the packet to higher layers.
chronizes on the packet, symbol timing recovery succeeds and the
receiver decodes approximately 40 codewords correctly (including
the preamble) before losing symbol or codeword synchronization.
We see that Hamming distance remains at 0 for the duration of the
correct codeword decisions, and rises at time 47 when the burst of
errors occurs. The PHY passes these Hamming distance hints up to
the ARQ layer along with all the codewords in the packet.
Later, at time 90 at the other synchronization offset (upper plot),
the receiver successfully synchronizes on and decodes a run of
codewords extending to the end of the ﬁrst packet. Since this packet
data is at a different synchronization offset to the preamble, it re-
lies on its postamble in order to frame-synchronize and pass up the
partial packet reception and associated SoftPHY hints.
We perform the next experiment in a 31-node Zigbee/software
radio testbed described below in Section 7. All but four of the
nodes send packets containing a known test pattern, at a constant
rate. There are four receivers, each able to hear and decode some
subset of the senders. Figure 5 shows the distribution of Hamming
distance across each received codeword, separated by whether the
codeword was correctly or incorrectly received (we know this from
the test pattern). Conditioned on a correct decoding, only about one
in 100 codewords have a Hamming distance of two or more. Con-
versely, fewer than one in 10 incorrect codewords have a distance
of two or less.
This result shows that the higher layer can interpret this SoftPHY
hint with a threshold rule. We denote the threshold by η, so that the
higher layer labels groups of bits with d ≤ η “good” and groups
of bits with d > η “bad.” Under the threshold rule then, the two
curves in Figure 5 also show the probability of misclassiﬁcation
for correct and incorrect symbols, respectively. We analyze these
results further in Section 7.2.
3. POSTAMBLE PACKET DECODING
When many errors occur in the preamble due to collisions or
noise, current radio receivers will not be able to synchronize with
the incoming transmission and decode any bits. In that case, the
Figure 5: Distributions of Hamming distances for every code-
word in every received packet, separated by whether the re-
ceived codeword was correctly or incorrectly decoded. Under
the threshold rule, these CDFs can be reinterpreted as curves
plotting probability of misclassiﬁcation.
potential beneﬁts of SoftPHY will go largely unrealized. We need
a way to mitigate the effects of preamble loss, for example, in the
multi-packet collision shown in Figure 6. In this example, a re-
ceiver would not be able to decode any part of packet P4, since its
preamble was corrupted, while packet P3 would be received and
discarded due to a bad checksum. SoftPHY may help with P3, but
we are interested in P4 as well.
Our approach to synchronizing on packets without an intelligible
preamble is to add a postamble to the end of each packet on which
a receiver can also synchronize. The postamble has a well-known
sequence attached to it that uniquely identiﬁes it as the postam-
ble, and differentiates it from a preamble (“EFD” in Figure 3). In
 0 10 0 90Hamming distanceTime (codeword number)Hamming distancePacket correct codewords 0 10 0 10 47Hamming distanceTime (codeword number)Hamming distancePacket correct codewords10-310-210-11 0 2 4 6 8 10 12 14Cumulative distribution or P(error)Codeword Hamming distance or ηCorrect codewords: 1 – CDFIncorrect codewords: CDFFigure 6: A four-packet collision. We use P4’s postamble to par-
tially decode that packet, and the techniques described in Sec-
tions 2 and 4 to detect the incorrect parts of both P3 and P4 and
request retransmission of just those parts.
addition, we add a trailer just before the postamble at the end of
the packet, also shown in Figure 3. The trailer contains the packet
length, source, and destination addresses. Just as with header data,
the receiver uses the SoftPHY interface to check the correctness of
the trailer.
To recover the payload after hearing just a postamble, the re-
ceiver maintains a circular buffer of samples of previously-received
symbols even when it has not heard a preamble. In our imple-
mentation, we keep as many sampled symbols as there are in one
maximally-sized packet. When the receiver detects a preamble, the
behavior is the same as in the status quo. If not, then if the receiver
detects a postamble, it takes the following steps:
1. “Roll back” as many symbols as are in the packet trailer.
2. Decode and parse the trailer to ﬁnd the start of the entire
packet, and the sender and receiver identities.
3. “Roll back” in time as many symbols as are in the entire
packet, to decode as much of the packet as possible.
The main challenge of postamble decoding is addressing how
a receiver can keep a modest number of samples of the incoming
packet in a circular buffer while still allowing the various receiver
subsystems to perform their intended functions. These functions
include carrier recovery, symbol timing recovery, and equalization.
We meet each of these challenges in our implementation, as brieﬂy
outlined below.
Most receivers need to perform symbol timing recovery [7, Chp.
16] to determine when (i.e., with which frequency and phase) to
sample the incoming signal such that the probability of detection
is maximized. In our system, we use the popular decision-directed
timing recovery algorithm [24]. Next, the demodulator may3 need
to perform carrier recovery [7, Chp.15] to estimate the incoming
carrier’s time-varying frequency and phase. A number of tech-
niques for countering inter-symbol interference rely on estimating
the channel impulse response (equalization) [7, Chp. 8]. Typically
the preamble includes a known training sequence to enable the
equalizer to quickly estimate the channel’s response during syn-
chronization. We can therefore include the same training sequence
in the postamble (see Figure 3) and post-process the samples of the
signal in the body of the packet afterwards, using standard signal
processing techniques [17].
4. PP-ARQ: PPR + RETRANSMISSIONS
SoftPHY and postamble detection together allow higher lay-
ers to discover which received codewords are likely to be correct
and which are not. We now examine the problem of how the re-
ceiver can most efﬁciently communicate this information back to
the sender, to improve the performance of link-level retransmis-
sions.
3Some modulation techniques permit the use of non-coherent de-
tection where carrier recovery is not necessary.
Figure 7: After computation of run-length representation of a
received packet, the ﬁrst step in PP-ARQ at the receiver. Run
lengths λb,g
i are as deﬁned in expression 2. Chunk c1,2 is deﬁned
in expression 3.
The naïve way to provide feedback is for each receiver to send
back the bit ranges of each part of the packet believed to be incor-
rect. Unfortunately, doing that may consume a large number of bits,
because encoding the start of a range and its length can take up to
on the order of log S bits for a packet of size S . Hence, we need to
develop a more efﬁcient feedback scheme.
After the receiver has decoded a packet, it has a list of received
symbols S i, 1 ≤ i ≤ N, and a list of associated PHY layer hints ϕi
where ϕi is the conﬁdence the PHY has in symbol S i. Then it uses
the threshold test on each conﬁdence ϕi, and labels each symbol
“good” or “bad.”4 Next, it computes alternating run lengths λg
j, λb
j,
1 ≤ j ≤ L of good and bad symbols, respectively, to form the
run-length representation of the packet as shown in Figure 7. This
representation has the form:
2 ··· λb
Lλg
2λg
L
1λg
λb
1λb
Here, λg
(2)
j is the count of symbols in the jth run of symbols all
rated “good” by SoftPHY, shown with light shading in the ﬁgure.
Similarly, λb
k is the size of the kth run of symbols rated “bad” by
SoftPHY, shown with dark shading in the ﬁgure.
The receiver forms a list of chunks ci, j: groups of runs that it will
ask the sender to retransmit. Chunk ci, j contains all the bad and
good runs in between and including bad run i and bad run j, so
each chunk starts and ends with bad runs. For example, chunks c1,2
and c3,3 appear in Figure 7. Note that chunk ci, j does not include λg
j,
the last run of good symbols in the chunk:
i+1 ··· λb
j
i λg
i+1λg
i λb
ci, j = λb
(3)
Once the receiver has made the choice of which chunks to re-
quest from the sender, it sends a feedback packet communicating
this information. We next show that each chunk can be assigned a
cost function, and that the problem of which chunks to request ex-
hibits the “optimal substructure” property in that the cost for an
entire chunk is easily derived from the cost of two suitably di-
vided portions. When the sender responds to the receiver’s feed-
back packet, it also sends the checksums of the good chunks so that
the receiver can verify that they are correct.
4.1 Dynamic programming to ﬁnd the best
feedback strategy
k, i ≤ k ≤ j are all small and j − i is large, we would favor
requesting that the entire chunk ci, j be retransmitted, because the
4We note that this “slicing step” is analogous to hard-decision de-
coding, and leave as future work improvements to PP-ARQ that
take into account the values of the SoftPHY hints themselves, al-
though we perform an analysis of how often SoftPHY hints are
wrong in Section 7.2.
If λg
b1λg1λb2λg2λb3λg3λb4λg4λ2,1cc3,3additional bits it would take for the receiver to describe each of the
j − i individual chunks would far exceed that needed to retransmit
the good symbols associated with chunk ci, j. If, on the other hand,
k, i ≤ k ≤ j are large, and/or j − i is small, we would
some of the λg
favor asking for the individual chunks ck,k for each k ∈ [i, j] for the
converse reason.
We deﬁne the cost of a chunk as follows (i , j):
(cid:1) = log S + log λb
C(cid:0)ci,i
2 log S +
j−1X
l=i
λg
l , min
i≤k≤ j−1
i + min
λg
i , λC
(cid:16)
nC(cid:0)ci,k
(cid:17)
(cid:1) + C(cid:16)
(cid:17)
C(cid:16)
ci, j
= min
(4)
(cid:17)o (5)
ck+1, j
For the receiver to describe the length and offset of the ith bad
run to the sender, it takes approximately log S + log λb
i bits, where
S is the packet length. The receiver also sends the ith good run or
a checksum of it to the sender, so that the sender can verify that it
received the good run correctly. This takes min
bits, where
λC is the length of the checksum. These two terms form the base
case cost of a chunk in Equation 4.
λg
i , λC
(cid:16)
(cid:17)
The receiver then runs the recursive steps of the DP algorithm on
the run-length representation of the packet. Equation 5 describes
this computation. The outer min chooses between leaving chunk ci, j
intact (thus resending all good runs within the chunk), or splitting
the chunk into two smaller chunks and thus diving deeper into the
recursive computation. The innermost min operator chooses how to
make the split, if one is needed.
We compute the optimal chunking bottom-up using a table to
memoize the costs of each possible chunking. Note that because
the chunking algorithm operates on chunks, the table has as many
entries as there are chunks in the packet, L. To analyze the compu-
tational complexity of this algorithm, we note that it can be imple-
mented in a bottom-up fashion using a table to memoize the costs of
each possible chunking. This results in an O(L3) implementation.
4.2 The streaming ACK PP-ARQ protocol
The receiver-side dynamic programming algorithm described
above chooses chunks such that each chunk “covers” all the bad
runs in the packet, and may cover some good runs, if they are short
enough. We now describe the complete PP-ARQ protocol between
sender and receiver.
1. The sender transmits the full packet with checksum.
2. The receiver decodes the packet (possibly partially), and
computes the best feedback as described in Section 4.1.
3. The receiver encodes the feedback set in its reverse-link ac-
knowledgement packet (which may be empty, if the receiver
can verify the forward link packet’s checksum).
4. The sender retransmits only (a) the contents of the runs the
receiver requests, and (b) checksums of the remaining runs.
This process continues, with multiple forward-link data packets
and reverse-link feedback packets being concatenated together in
each transmission, to save per-packet overhead.
operate in the “background” recovering erroneous data, while the
routing protocol sends the correct bits forward.
PPR also has the potential to improve the performance of multi-
radio diversity (MRD) schemes [23] in which multiple access
points listen to a transmission and combine the data to recover er-
rors before forwarding the result, saving on retransmissions. Avu-
dainayagan [5, 35] et al.develop a scheme in which multiple nodes
(e.g., access points) exchange soft decision estimates of each data
symbol and collaboratively use that information to improve decod-
ing performance. For this application, PPR’s SoftPHY hints would
provide a way to design a protocol that does not rely on the speciﬁcs
of the PHY, unlike this previous work. Thus, with PPR, we may
be able to obtain the simpler design and PHY-independence of the
block-based combining of [23], while also achieving the perfor-
mance gains of using PHY information.
6.
IMPLEMENTATION
Zigbee sender. Each Zigbee sender node is a telos mote with a
Chipcon CC2420 radio [33]. Senders run TinyOS5 on the telos’s
TI MSP430 microprocessor. The CC2420 radio is a 2.4 GHz RF
transceiver that uses direct-sequence spread spectrum (DSSS) at a
rate of 2 Msymbols/s with B = 32 symbol codewords.6 Each of the
16 codewords encodes b = 4 bits, implying a peak link data rate
of 250 Kbits/s when there are no other transmissions in progress.
The radio’s underlying modulation is O-QPSK with half sine pulse
shaping, also known as min-shift keying (MSK) [25].