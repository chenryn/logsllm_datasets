server misbehavior.
Security analysis. Although the proposed hourglass func-
tion is simple, its security analysis is delicate. It relies on
a timing model for rotational drives. Rotational drives are
designed for optimal access speed over sequential physical
locations on a platter. Accesses to blocks at distant location
induce a seek, a time-consuming physical repositioning of
the magnetic head of the drive. In particular, we make the
following concrete considerations.
• Drive model: For simplicity we assume that a rota-
tional drive has a constant seek time τs, i.e., it takes
τs time to reposition the head. We also assume a con-
stant sequential block-read rate of τr. Thus, a sequen-
tial read of e blocks is assumed to cost τs + (e − 1)τr
time.5
• Time bound: As before, we also consider a particular
timing bound T on the response given by an adversar-
ial server A to a challenge provided by the client.
• Parallelism: Of course, a server will in practice stripe
ﬁles across multiple drives or storage subsystems: In-
deed, d-way parallelism enables it to retrieve symbols
d times more quickly. This does not, however, actually
reduce the extra storage overhead s(cid:48) that is incurred
to the adversary A by a factor of d. An honest server
can seek one block of H faster than a cheating server
can gather m symbols across d drives, for d  0, i.e., A runs in poly-
nomial time in the security parameter deﬁned as the length l
of the blocks Gi and Hi (for this construction |L| = |D| = l).
Thus, based on the cryptographic assumption that inverting
the RSA function f is infeasible, translating Gi (or Fi) to
Hi without knowledge of the trapdoor is also infeasible for
any such A.
Hourglass protocol. If f : {0, 1}l → {0, 1}l is a one way
trapdoor permutation with trapdoor κ (that is, f−1(·) is
hard but f−1(κ,·) is easy to compute), then an f -inversion
hourglass protocol is as follows:
1. The client generates f and κ, and then applies function
hourglass(f, κ, G) by individually inverting blocks Gi
to Hi = f−1(Gi). The client discards the key sk and
sends blocks Hi to the server.
2. On challenge a random index i ∈ {1, . . . n}, the server
returns the corresponding inverse image Hi.
3. The client then checks the correctness of the returned
answer ˆHi (which might diﬀer from Hi) by running
verify(H, i, ˆHi), and accepts if and only if Hi = ˆHi.
(Recall that, in practice and as we discussed in Sec-
tion 3, the authentic format H is available to the client
implicitly, through the use of appropriate integrity checks
for inverted blocks Hi.)
Note that in the above protocol f , i.e., the RSA signature
veriﬁcation, is used only to recover blocks Gi from Hi, in
particular, the veriﬁcation of the challenge blocks ˆHi is done
independently, without using f .
We instantiate the above protocol using the RSA func-
tion f (x) = xd mod N , its inverse f−1(y) = ye mod N
and κ = (d, φ(N )), where e > |N|. Here, l is equal to the
modulus size |N|. Also, the underlying security parameter (cid:96),
determined by the best known algorithm for inverting RSA
without knowing κ, is polynomially related to l.
Security analysis. To get an intuition of why the above
scheme is secure, we note that a computationally bounded
A can’t itself feasibly invert blocks under f : To reply to chal-
lenge i, it must actually store the original inverted block Hi.
Thus, under our partitioning assumption (see Appendix B
for more details), to respond correctly to challenges with
probability α, A must store ≈ αn blocks in H(cid:48)
G, i.e., s(cid:48) ≈
αnl, yielding an extra storage overhead of factor ≈ α. Note
that as we assume blocks in G are random, A can’t save
space by using the same Hi for duplicate blocks of G. (In-
deed, when G is uniformly distributed, blocks Hi are sta-
tistically independent of each other, and therefore H(cid:48)
G can
be optimally partitioned into ≈ αn parts, each containing
information about a unique challenge Hi.)
That said, A can “compress” a stored block Hi = f−1(Gi)
slightly by throwing away a small number—O(log l)—of bits.
By verifying conjectured Hi values against f , it can recom-
pute discarded bits by brute force (with work O(l)) when
challenged to produce Hi. We refer to as near-incompressible
any f−1 that doesn’t admit feasible “compression” of more
than the O(log l) bits of this trivial approach. It is com-
monly conjectured that RSA signatures with e > |N| are
near-incompressible.
We can eliminate this e > |N| conjecture and still get
near-incompressible RSA-based signatures by chaining ap-
plications of f−1. In particular, let
t = (Π ◦ f
−1
g
−1)t ∈ {0, 1}l → {0, 1}l
be a composite inversion function that alternates applica-
tions of f−1 with applications of a pseudorandom permuta-
tion (PRP) Π in a chain of length t, and let us assume that
Π is an ideal cipher. If f is a trapdoor permutation that can-
not be inverted by a probabilistic algorithm with l2W work
with success probability at least , then for
t ≥ (cid:100)(l − W log l)/(W log l − log )(cid:101)
the length-t chained inversion function g
be near-incompressible.
−1
t
can be shown to
To get an intuition of why this is true, ﬁrst note that
because f is hard to invert there is a lower bound on the
amount by which Hi = f−1(Gi) can be compressed. Also,
based on our assumption that Π is an ideal cipher, each of
the t blocks that are inverted in the chain is an independent
random block, therefore the storage dedicated for challenge
block Hi must be further partitioned by the adversary into
at least t parts, each storing (a possibly compressed) inde-
pendent inverted block in the chain. But when the length t
of the chain is suﬃciently long, the adversary must utilize a
relatively large amount of storage for exclusively responding
to a challenge Hi, thus making Hi near-incompressible.
Assumptions. Overall, we employ the following assump-
tions in analyzing the security of the above two schemes,
namely the unchained f -inversion protocol and the chained
gt-inversion protocol: (1) The partition assumption (of Ap-
pendix B) holds for the adversary A, i.e., its used storage
H(cid:48) can be split into H(cid:48)
G (to an-
swer to challenges); (2) The encoded blocks Gi are random,
F (to leak raw data) and H(cid:48)
274or equivalently encoding G is uniformly distributed; and (3)
either RSA signatures are near-incompressible when e > |N|
for an unchained inversion, or the used PRP Π serves as an
ideal cipher and suﬃciently long chains (as speciﬁed above)
are used for chained inversions.
Then, for the resulting chained g = gt, with t lower-
bounded as above, or the unchained g = f , under the e >
|N| conjecture, we can prove the following result.
Theorem 3. Let f be a trapdoor permutation that can-
not be inverted by any algorithm with l2W work with success
probability at least , let ξ = 2−(l−W log l), and let g be as
above. Suppose that A can successfully respond to challenges
in a g-inversion hourglass protocol with probability α, using
extra storage of size s(cid:48) and running in time lW . Then the
following bound holds:
(cid:48) ≥ α − ξ
1 − ξ
s
· n · (l − W log l) .
In other words, under the RSA near-incompressibility as-
sumption or for suﬃciently long inversion chains, the (trap-
door permutation) inversion-based hourglass protocol incurs
an extra storage overhead to the adversary that is close to
the optimal αnl minus the logarithmic-factor savings that
the adversary is able to achieve through the trivial compres-
sion (via brute force guessing of logarithmic many missing
bits) of inverted blocks. In the theorem, the intuition be-
hind ξ is that it is related to6 the probability that an ad-
versary A running in time lW is able to successfully recon-
struct/decompress a block of H from a compressed/truncated
version of the block of size less than l − W log l bits. This
means that in the best case, the adversary needs at least
(l− W log l) bits of storage for u(cid:48) = [(α− ξ)/(1− ξ)]n blocks
of H such that a total of u(cid:48) · 1 + (n − u(cid:48)) · ξ = αn blocks of
H can be reconstructed. This gives the lower bound on the
extra storage s(cid:48).
As an example application, consider an RSA key length
of l = 1024 = 210 and security of (cid:96) = 80 bits (as deter-
mined, e.g., by NIST, Pub. 800-57), work of l2W = 260 op-
erations (i.e., W = 3), implies a maximum success proba-
bility of  = 2−20, and Theorem 3 suggests use of t = (cid:100)(l −
W log l)/(W log l−log )(cid:101) = (cid:100)(1024−3·10)/(3·10+20)(cid:101) = 20
iterations. For l = 2048 bits with corresponding security of
112 bits, we similarly get t = 25 rounds for the same amount
of work (W = 1.5,  = 2−52) or t = 28 rounds for work of
280 (W = 2,  = 2−32). In all cases, the bound on s(cid:48) is very
close to the optimal nl for α close to 1.
5. EXPERIMENTS
We have performed an experimental evaluation in Ama-
zon EC2 of our butterﬂy construction and one of our permu-
tation constructions. We did not experiment with the RSA
construction because the performance of RSA signing opera-
tions is well known, thus an evaluation wouldn’t provide ad-
ditional insights. We also acknowledge that the RSA-based
construction is less eﬃcient than our other two schemes (in
6But it is not exactly equal to: In our proof we show that
for an adversary running in time lW the probability that
a block from H can be reconstructed from a compressed
version of c bits is at most 2−(l−c−W log l). We show that the
best strategy for the adversary is to use a compression of
l − W log l bits or of 0 bits for each block.
Table 1: Performance (in seconds) and cost (in cents) of
transformation from F to H for ﬁle encryption.
File size
1 GB
2 GB
4 GB
8 GB
Permutation
Time Cost Time Cost
0.03
50.91
0.06
103.96
213.07
0.12
0.24
432.91
1.64
3.24
6.45