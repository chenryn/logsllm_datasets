# 代码审计
## 概念
什么是代码审计？  
代码审计是在一个编程中对源代码旨在发现错误、安全漏洞或违反编程约定的项目。  
说人话就是找它这些代码中可能存在问题的地方，然后看它是否真的存在漏洞。(博主小白，可能存在问题，请见谅)
## 分类
代码审计的话大致分为三种，白盒、黑盒和灰盒
### 白盒测试
较为官方的定义
    已知产品的内部工作过程，可以进行测试证明每种内部操作是否符合设计规格要求，所有内部成分是否经过检查。
其实这种测试的话就是你可以看到源代码，直接从代码中来看哪里可能出现问题，然后进行检测，此时你是知道内部结构的，测试相对黑盒测试会比较容易一点  
### 黑盒测试
较为官方的定义
    已知产品的功能设计规格，可以进行测试证明每个实现了的功能是否符合要求。
其实黑盒测试的话就是你只知道网页的大致结构，然后对各个功能开始检测，按自己的思路进行测试，比如看到留言界面，测试XSS，看到登录界面，测试SQL注入这种
### 灰盒测试
灰盒测试是介于白盒测试与黑盒测试之间，自己测试的同时结合代码来看。  
一般代码审计的话都是类似于这种灰盒测试的。
# 如何代码审计
## 了解CMS结构
每个CMS都拥有数以百计的文件，这个时候我们该如何审，从哪里审呢，这个时候就要关注重要点，以这里的bluecms为例  
这里有多个文件及文件夹，该从何入手呢，首先就从文件夹的名字入手，因为程序员在开发时一般不会随意起名，对应的文件夹名一般都是有作用的，例如这里的`install`就是安装目录，具体分类大致如下
> ├── admin 后台管理目录  
>  ├── install 网站的安装目录  
>  ├── api 接口文件目录  
>  ├── data 系统处理数据相关目录  
>  ├── include 用来包含的全局文件  
>  └── template 模板
同时它还有  
(1)函数集文件，它的定义如下
这类文件通常命名中包含functions或者common等关键字，这些文件里面是一些公共的函数，提供给其他文件统一调用，所以大多数文件都会在文件头部包含到它们，寻找这些文件一个非常好用的技巧就是去打开index.php或者一些功能性文件，在头部一般都能找到。
(2)配置文件，它的定义如下
这类文件通常命名里面包括config这个关键字，配置文件包括Web程序运行必须的功能性配置选项以及数据库等配置信息，从这个文件里面可以了解程序的小部分功能，另外看这个文件的时候注意观察配置文件中参数值是用单引号还是用的双引号包起来，如果是双引号，则很大可能会存在代码执行漏洞。
## 寻找关键词
大致的分类的话就如下所示
    命令执行    system、shell_exec、passthru、popen、proc_open
    文件包含    require、include、require_once、include_once
    变量覆盖    parse_str 、mb_parse_str
    代码执行    eval、assert、preg_replace
    文件操作    file_get_contents 、file_put_contents 、move_uploaded_file 、unlink & delete
这些是大致的关注点，但是如果自己去找的话一般这么多的文件，一个个ctrl+f寻找关键词也是比较慢的，因此一般的话是借用工具的，但工具不是百分百灵验的，我们需要结合自己的判断来看它是否真的存在漏洞，一会介绍一下工具，现在先具体的介绍一下这些关注点
### SQL注入关键词
SQL注入，关注点就是`SELECT xxx From xxx WHERE xxx`以及`UPDATE xxx SET xxx WHERE
xxx`这些字词，当出现这些的时候，才有可能出现SQL注入。  
同时还要关注`character_set_connect='gbk'`这种语句，出现它时可能会出现宽字节注入。
例如
    $ad = $db->getone("SELECT * FROM ".table('ad')." WHERE ad_id =".$ad_id);
    $db->query("UPDATE ".table('article')." SET comment = comment+1 WHERE id = ".$id);
### XSS关键词
XSS常见地是留言板，新闻编辑处这些可以写入内容的地方，同时我们可以结合之前存在的漏洞进行尝试XSS。
### 任意文件删除关键词
这类在修改头像、修改内容时可能比较常见，然后一般我们就可以去这类文件下看它是否有`unlink`函数，如果有的话就可能存在任意文件删除漏洞
## 工具
我们一般自己去找的话有点慢，效率不高，但代码审计有应用可以帮助我们进行代码审计，常见的是Seay源代码审计系统，seay工具链接如下  
我们关注的SQL注入，我们就可以去搜索SELECT  
以及`UPDATE`  
对应的任意文件删除漏洞，我们就去搜索`unlink`函数  
这个时候就可以直接定位到利用函数的语句中，相比自己找要快捷很多，同时Seay代码审计具有自动代码审计的功能，用它也是蛮方便的。  
下面开始审计
# bluecms
## 环境配置
这个CMS是比较简单的一个，源码链接如下  
我的环境配置是`phpstudy 2018
5.5.38+mysql5.5.53`，不要用7+这种高版本的php，因为这个cms是比较老的，它的部分函数与新版本php两者是不相匹配的，然后搭建好后访问`bluecms-master/install/`，这个时候可能界面是空白，我们需要开启一下`允许目录列表`  
然后去删除`bluecms-master\install\compile`下的php文件  
此时再去重新访问`install`  
按照步骤配置即可，但是到`step=5`时又变成空白了，不过这个时候已经搭建好了，访问`bluecms-master/index.php`就可以发现已经配置成功  
## 工具扫描
使用seay工具进行扫描  
扫描这个cms后得到很多数据  
开始挨个进行分析
## SQL注入
### ad_js.php
跟进第一条  
包含了`common.inc.php`文件，跟进查看这个文件  
if语句中有一个`get_magic_quotes_gpc`函数，查看这个`get_magic_quotes_gpc`函数  
这么看的话其实就是相当于if语句中始终为1，那也就是说它对`GET POST COOKIES
REQUEST`这些请求的参数加上了`deep_addslashes`函数，此时跟进这个函数进行查看  
可以发现这里其实就是加上了`addslashes`函数，而这个函数呢是对`单引号、双引号、反斜线`加上`\`进行转义的，因此这里其实就是限制了`单引号、双引号、反斜线`的使用，防止SQL注入
再回到最开始，发现注入参数是`ad_id`，观察代码可以看出它对`ad_id`参数先进行了`trim()`过滤，也就是过滤了参数中的空白字符，例如`空格
\t \r
\n`这些，之后呢进行了SQL注入查询语句，参数两边是没有加单引号的，看起来是可以进行SQL注入的，此时发现`getone`函数，我们跟进这个函数进行查看  
从这里看出它这个函数是将结果取出的，因此这里的话我们总结一下，它就是一个SQL查询语句，我们可以控制where
ad_id=`xxx`这一部分，同时它有这个`单引号`过滤函数，但是这里变量是没有被单引号包裹的，所以这里这个函数其实是无效的，而且这个结果有回显，会返回结果，我们此时就可以尝试在此界面进行SQL注入  
访问`bluecms-master/ad_js.php`,先看一下字段数
    ad_id=-1 order by 7
    ad_id=-1 order by 8
当是7的时候无回显，为8的时候报错，说明字段数为7，接下来尝试联合查询
    -1 union select 1,2,3,4,5,6,7
看起来是无回显的，但当我们去查看源代码时就会发现是有回显的，不过加了注释  
因此这里的这个7就是回显位，接下来开始注入即可
    //查库
    -1 union select 1,2,3,4,5,6,database()
    //查表
    -1 union select 1,2,3,4,5,6,(select group_concat(table_name)  from infromation_schema.tables where table_schema=database()
当然这里这个查表也可以用十六进制来进行绕过  
我这里的数据库名是`root`，对其进行十六进制加密后为`726f6f74`，加上`0x`使得能够被识别为十六进制数，构造payload如下
    //查表
    ad_id=-1 union select 1,2,3,4,5,6,(select group_concat(table_name)  from information_schema.tables where table_schema=0x726f6f74)
    //查列(以blue_user为例)
    ad_id=-1 union select 1,2,3,4,5,6,(select group_concat(column_name)  from information_schema.columns where table_name=0x626c75655f75736572)
    //查字段
    ad_id=-1 union select 1,2,3,4,5,6,(select group_concat(user_id,0x7e,user_name,0x7e,pwd)  from blue_user)
### ann.php（失败）
只看这个`SELECT`语句的话，确实是没有什么过滤的，看起来可以进行SQL注入  
但是看最上面的传值处就会发现  
这两个在有值时，结果是`intval`函数包含后的，我们测试一下这个函数
可以发现字母都被pass了，因此这里的话，就没办法进行SQL注入了  
G，下一个。
### comment.php（失败）
打开发现这个`SELECT`语句中`id`变量是无单引号包裹的  
id如果没有被过滤的话，就存在可注入点，看id传值处  
id添加了`intval`函数，因此这个参数是无法进行注入了，此时这个type也同理，限制了值只能是`0或1`，这个`act`的话  
限制了只能为`list`或者`send`，而且它不在查询语句这种里面，在这个文件里没有用到，因此也是可以判定为没戏的，所以这个文件也G
### user.php(失败)
按照seay审计系统的来，发现这个有select语句，但是它的变量都是有单引号包裹的  
在最上方看看包含的文件  
发现包含有这个`common.inc.php`文件，而这个文件中有过滤单引号的函数，因此这里不存在SQL注入。
下一处  
这里的id变量未被单引号包裹，但它在传值时添加了`intval`函数，这意味着字符串无法上传，因此这个也是无法成功注入的。PASS
## XSS
### ad_js.php
这个`ad_id`变量可控，而且它没有单引号包裹，那不就意味着我们可以随意构造后面的语句，不仅仅是SQL注入，XSS应该也是可以的，我们构造payload如下
    1 
### user.php
    elseif ($act == 'do_add_news') {
        include_once 'include/upload.class.php';
        $image = new upload();
        $title = !empty($_POST['title']) ? htmlspecialchars(trim($_POST['title'])) : '';
        $color = !empty($_POST['color']) ? htmlspecialchars(trim($_POST['color'])) : '';
        $cid = !empty($_POST['cid']) ? intval($_POST['cid']) : '';
        if(empty($cid)){
            showmsg('ŷ಻Ϊ');
        }
        $author = !empty($_POST['author']) ? htmlspecialchars(trim($_POST['author'])) : $_SESSION['admin_name'];
        $source = !empty($_POST['source']) ? htmlspecialchars(trim($_POST['source'])) : '';
        $content = !empty($_POST['content']) ? filter_data($_POST['content']) : '';
        $descript = !empty($_POST['descript']) ? mb_substr($_POST['descript'], 0, 90) : mb_substr(html2text($_POST['content']),0, 90);
        if(isset($_FILES['lit_pic']['error']) && $_FILES['lit_pic']['error'] == 0){
            $lit_pic = $image->img_upload($_FILES['lit_pic'],'lit_pic');
这里发现title和color添加了转换HTML实体函数，因此是可以确定是不存在XSS的，下面亦是如此，但我们发现包含content的函数是不同的，它是`filter_data`函数包裹的，跟进这个函数看看  
函数如下
    function filter_data($str)
    {
        $str = preg_replace("//", "", $str);
        return $str;
    }
发现过滤了常用的xss标签，但仍存在其他的xss标签，如
此时这个应该是有可能的，我们看后面他还有没有过滤  
可以发现这个SQL语句直接将这个content给写进去了，那这里就应该是存在XSS的，我们尝试构造一下  
这里加*的应该是必选项，那我们就只写这几个即可，构造payload如下  
点击编辑  
成功触发XSS