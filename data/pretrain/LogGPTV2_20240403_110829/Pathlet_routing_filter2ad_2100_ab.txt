Our implementation uses the following variable-length FID
encoding scheme. The ﬁrst bits of the FID indicate its
length: FIDs that begin with 0, 10, 110, 1110, and 1111
have total lengths of 4, 8, 16, 24, and 32 bits, respectively.
The remaining bits contain the unique identiﬁer. In our LT
policies, most vnodes originate ≤ 8 pathlets, so these use
the short 4-bit FIDs. Other encoding schemes are possible,
and an AS can unilaterally pick its own scheme, since other
routers simply view the FID as an opaque string of bits.
2.3 Pathlet construction
In the “base case” of pathlet construction, a pathlet con-
nects two vnodes, v1 → v2.
In the general case, after X
has learned or constructed some pathlets, it can concate-
nate these to build longer pathlets which take the form
v1 → P1 → ··· → Pk, where each Pi is an existing pathlet.
The router gives the pathlet a FID f , and in the forwarding
table for v1, it associates f with:
• a next hop rule to reach v2: instructions for forward-
ing packets to the next vnode in the pathlet’s path.
Examples include transferring the packet to another
vnode at the same router; sending it on a certain out-
going interface; or tunneling it across an intradomain
routing protocol like OSPF to an egress point.
• the remaining FIDs: the list of FIDs necessary to
route the packet from the second vnode to the ﬁnal
vnode in the pathlet. If the pathlet has just one hop,
this list is empty. Otherwise it is a list r1, . . . , rk, where
each ri is the FID for pathlet Pi.
Readers nostalgic for LISP might think of these two ﬁelds
as the CAR and CDR of the pathlet’s forwarding information.
For example, in Fig. 1, most of the pathlets are the “base
case” one-hop pathlet, which can be constructed immedi-
ately after each router X opens the control plane connec-
tions to its neighbors and learns their ingress vnodes for
X. After the one-hop pathlets are disseminated through the
network (according to the protocol of Sec. 3), router B can
create the “general case” pathlet b → c → d → e by concate-
nating the two pathlets c → d and d → e. In the forwarding
table for vnode b, it maps the FID 2 to the remaining FIDs
(“push (7, 1) onto the front of the route”) and the next hop
rule (“send the packet to router C”).
2.4 Packet forwarding
Each router has multiple forwarding tables: one for each
of its vnodes. The table for each vnode v is an exact-match
lookup table with one entry for each pathlet beginning at v.
The entry maps the pathlet’s FID to the next hop rule and
the remaining FIDs, as described above.
When a packet is sent from router Y to X, it is interpreted
as arriving at the speciﬁc vnode v which is X’s ingress vnode
for Y . It is safe to assume that the previous hop cannot be
spoofed: X knows on which of its interfaces it received the
packet, and the interface would be associated with a speciﬁc
neighboring AS.
The router X then inspects the route in the packet header.
If it is empty, the packet is delivered locally. Otherwise the
route is a sequence of FIDs (f1, f2, . . . , fn) of the pathlets
forming the route to its destination. Initially, this is set by
the sender to be the selected route. The router checks for f1
in the forwarding table for the ingress vnode v. If no entry is
found, the packet is malformed and is dropped. Otherwise,
the table maps f1 to a next hop rule and the remaining FIDs
r1, . . . , rk for this pathlet. It pops oﬀ the packet’s ﬁrst FID
f1 and pushes the remaining FIDs, resulting in a route of
r1, . . . , rk, f2, . . . , fn. Finally, it forwards the packet to the
next vnode, according to the next hop rule.
Fig. 1 gives a packet forwarding example. At a, the ﬁrst
FID (3) is popped oﬀ and used to look up the next-hop
rule and remaining FIDs. There are no remaining FIDs be-
cause it is a one-hop pathlet, so the packet is forwarded to
b according to the next-hop rule. At b, the next FID (2)
is popped. Here the remaining FIDs (7, 1) are pushed onto
the route since this is a multihop pathlet, and then it is
forwarded to c according to the next-hop rule. At c and d
FIDs are popped oﬀ the route, none are pushed on, and the
packet is forwarded. Finally the packet arrives at e with the
empty route, where it is delivered.
Note that it is impossible for a sender to “cheat” and use
a source route that violates the routers’ policies, even if it
somehow gains knowledge of every pathlet. This is simply
because there are no forwarding entries for invalid routes.
1132.5 Route selection
Each router learns a set of pathlets, via control plane
mechanisms to be discussed later. It can select from among
these a route for each packet that it sends. A simple way to
do this is to build a graph in which each vnode is a node,
and each pathlet v1 → . . . → vn is a single edge v1 → vn
(perhaps given a cost equal to the number of ASes through
which the pathlet travels). Then, similar to link state rout-
ing, run a shortest path algorithm on this graph to produce
a sequence of edges (i.e., pathlets) to each destination. After
the router has made its path selection, it places the sequence
of FIDs associated with the chosen pathlets into the packet
header, and sends it.
Note that this algorithm requires a map of the entire In-
ternet, as learned by the control plane. However, as we
will see (§6), it is not dramatically more state than BGP
disseminates. And memory use in this algorithm is not as
critical as in the FIB, for several reasons. First, it is per-
formed by edge routers which do not need as high packet
processing speeds as core routers, so the map can be stored
in slower (larger, cheaper) memory. Second, an edge router
can cache routes for the (presumably small) set of destina-
tions to which it is sending at any one point in time, so that
the route computation is needed only for the ﬁrst packet in
each connection, or the caching could be oﬄoaded to the
senders.
In fact, it would be feasible for many end-hosts
(rather that edge routers) to choose routes themselves, but
the protocol between end-hosts and their gateway routers is
beyond the scope of this work.1
Routers have the freedom to make more intelligent choices
than the simple shortest path algorithm presented above,
through information learned outside of the pathlet routing
protocol. Options include learning path properties based
on observations of performance or availability [32, 4]; com-
mercial route selection products [3]; each network operat-
ing a route monitoring service for its users [30]; third-party
route selection services [20], or even a global “Internet weath-
ermap” service that would assist end-hosts in their route
selection.
3. PATHLET DISSEMINATION
We motivate our dissemination algorithm with two straw
man proposals (§3.1). We then describe our chosen dissemi-
nation algorithm (§3.2), the choice of which pathlets to dis-
seminate (§3.3), and an extension where nonadjacent routers
exchange pathlets (§3.4).
Note that the algorithm we present here and evaluate in
Sec. 6 should be seen only as one feasible design. The choice
of dissemination algorithm largely does not aﬀect the rest
of our design, and could easily be replaced with another
approach.
3.1 Design rationale
Straw man #1. Suppose we simply broadcast all pathlets
to the entire network using a link state algorithm. This is
in fact not a policy concern:
if pathlet routing is used as
1For many end-hosts, it would be feasible to learn pathlets
from the gateway router and run the same algorithm pre-
sented here. Alternately, the gateway router could give the
end-host several choices without detailing what those routes
are, as in [31, 23]; or path selection could be performed en-
tirely by routers.
intended, then policy is enforced in the data plane, rather
than through obscurity in the control plane.
If a certain
route is not allowed, then the appropriate forwarding table
entries do not exist, so no sequence of bits placed in the
packet header can cause a packet to traverse the route.
Instead, the problem with this approach is simply that
there may be too many pathlets. Certain cases would be
manageable, such as if all ASes use the Local Transit policies
that we propose; but there is no fundamental constraint on
how many pathlets an AS constructs.
Straw man #2. Suppose now that we use a standard
broadcasting algorithm, except any router may decide to
propagate only a subset of its known pathlets. This solves
the scalability problem. However, it leads to a subtle issue
when there are multiple simultaneous failures: it is possible
for a router to learn of a pathlet which later fails, but not
be notiﬁed of the failure because the channel over which it
would have learned about the pathlet’s state has also failed.
We omit an example due to space constraints. The key point
is that it would be possible for a router to continue to use a
pathlet for an arbitrarily long time after it has failed.
3.2 Pathlet dissemination algorithm
We choose a path vector algorithm to disseminate path-
lets, much as BGP notiﬁes the Internet of the existence of
IP preﬁxes. We use a standard, bare-bones path vector pro-
tocol, with a pathlet announcement containing the pathlet’s
FID and its sequence of vnode identiﬁers.
Path vector has two important properties. First, it solves
the scalability problem from the ﬁrst straw man, by allow-
ing routers to propagate an arbitrary subset of their known
pathlets (much as BGP allows routers to choose which routes
to export). Second, it guarantees that if a pathlet fails, it
will eventually be withdrawn from all routers that learned
of it (intuitively because path vector remembers the dissem-
ination channel).
This choice of path vector might seem ironic, given that
our goal is to improve on BGP’s path vector routing; but
we use path vector only to make pathlets known, not to
pick packets’ routes. In particular, the dissemination path
attribute (corresponding to BGP’s ASPATH) is used only
for detection of loops in the dissemination channel, not as a
path along which to route data packets.
The main disadvantage of path vector is that a router
must remember up to O(δ(cid:96)) state for each pathlet rather
than O(1) state as in a broadcasting algorithm, where δ is
the number of neighbors and (cid:96) is the average path length.
However, we have a great deal of ﬂexibility to optimize the
overhead of the algorithm, compared with BGP’s use of path
vector. The simplest optimization is that we never need
to switch to a “more preferred” dissemination path, since
they are all equally acceptable; see our experimental results
concerning message rates in Sec. 6.3. Other optimizations
to reduce both messaging and memory overhead would be
feasible, as we discuss in Sec. 8.
3.3 Which pathlets are disseminated?
Since we use a path vector dissemination protocol, each
router can choose exactly which subset of its known pathlets
to announce to its neighbors, just as in BGP’s export ﬁlter.
The rule we choose is as follows.
Suppose v is router X’s ingress vnode for neighbor Y .
From among all the pathlets that X knows (both those
114it constructed and those it learned from neighbors), it an-
nounces a subset to Y , as follows:
1. Announce pathlets which form a shortest path tree
from v to all destination vnodes reachable from v.
2. Announce any additional pathlets that are reachable
from v, up to limit(δ) pathlets originating at each AS
with δ AS-level neighbors.
Step 1 ensures that suﬃcient pathlets are supplied in order
that Y can reach every destination reachable from v. Step 2
adds desirable redundancy. In our implementation, we use
limit(δ) = 10 + δ, so that higher-degree ASes can announce
more pathlets. But this particular choice is not critical since
Step 1 handles reachability.
3.4 Extensions
Information dissemination in distributed systems can gen-
erally be described as either “push” or “pull”. The above dis-
semination algorithm, like BGP, pulls routing state. But an
easy extension of our protocol allows any router to initiate
a control plane connection with any other (perhaps non-
adjacent) router, and pull certain pathlets, such as those
relevant to a speciﬁed destination. This extension can be
used to emulate control-plane features of three recent mul-
tipath routing proposals: MIRO, NIRA, and LISP (§5). It
is also similar to BGP’s multihop option, where an eBGP
session connects to non-adjacent routers.
4. NEW USES OF PATHLET ROUTING
In this section, we discuss three practical examples of what
one can do conveniently with pathlet routing, but not with
BGP or most other protocols: Local Transit policies (Sec-
tion 4.1) allow networks to control one of the most impor-
tant aspects of routing policy—the portions of routes which
transit across their own networks—while permitting very
small forwarding tables and a large degree of route choice
for senders. Pathlet routing cleanly supports mixed poli-
cies (Section 4.2), for example with some ASes using BGP-
style policies and some using LT policies. The LT adopters
still have small forwarding tables, and some of the beneﬁt
of additional route choice. Finally, pathlet routing may be
a more ﬂexible way of oﬀering multiple types of service
along the same physical path (Section 4.3).
4.1 Local Transit Policies
Deﬁnition. A network X has a local transit (LT) pol-
icy when X’s willingness to carry traﬃc along some route
depends only on the portion of the route that crosses X’s
network. In other words, under an LT policy the permissi-
bility and cost of some path, according to X, is a function
only of the ingress and egress points of the path in X. An
alternate deﬁnition is that the policy can be constructed