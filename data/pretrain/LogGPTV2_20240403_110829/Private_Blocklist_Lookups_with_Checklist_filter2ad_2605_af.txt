### Checklist with Offline-Online PIR (§4) and DPF PIR [15]

#### Performance Metrics
- **Initial Time (ms):** 3.1, 90, 2.6, 91
- **Running Time (sec):** 143, 1348, 9047
- **Initial Memory (MB):** 5.0, 10.3, 3.0, 9.8, 0.5, 0.8, 0.2, 1.6, 0.2
- **Monthly Memory (MB/month):** 91.8, 5.0, 13.2, 3.6, 4.3, 91.8, 24.5, 4.3, 4.5

#### Server and Client CPU Time
- **Server CPU Time (sec, cumulative):** 
  - Time (days): 0, 30, 60, 90, 120, 150, 180
  - CPU Time: 0, 50, 100, 150, 200
- **Client CPU Time (sec, cumulative):** 
  - Time (days): 0, 30, 60, 90, 120, 150, 180
  - CPU Time: 0, 20, 40, 60
- **Communication (MB):** 
  - Time (days): 0, 30, 60, 90, 120, 150, 180
  - Communication: 0, 20, 40, 60

### Discussion

#### 8.1 Deployment Considerations
When is Checklist cost-effective for Safe Browsing? Table 7 shows three different ways to achieve full privacy for Safe Browsing queries:
1. **Full List:** The client maintains a full client-side blocklist.
2. **DPF PIR:** Checklist with a standard PIR scheme.
3. **Offline-Online PIR:** Checklist with our new offline/online PIR scheme.

The optimal scheme depends on the relative costs of server-side computation, client-side computation, communication, and client storage.

- **Download Full List:**
  - When communication and client storage are relatively inexpensive, as on a powerful workstation with a hard-wired network connection, downloading the full list may be the best solution.
  - This requires roughly 9× more initial communication and 3.7× more storage than Checklist with offline-online PIR, but significantly reduces server-side computational cost.

- **Checklist with Offline-Online PIR:**
  - When trying to minimize both communication and server-side computation, Checklist with our new offline-online PIR scheme is the most appealing.
  - This approach is useful for general devices (laptops, etc.) where it is reasonable to shift some work to the client to reduce server costs.
  - Total communication is lower than downloading the full blocklist, and server-side computation is roughly 7× less than using standard PIR.

- **Checklist with DPF PIR:**
  - When trying to minimize client computation and storage, Checklist with DPF-based PIR may be the best option.
  - This configuration is useful on mobile devices where client resources are scarce.
  - It requires the least storage (22× less than storing the full blocklist and 5.7× less than Checklist with offline-online PIR), at the cost of increased server-side computation.

As Table 7 shows, there is no single private-blocklisting scheme that dominates in all dimensions. Identifying the optimal point in this trade-off space requires measuring the relative costs of various computational resources.

#### Denial-of-Service Attacks
The initial hint-generation phase of our scheme is relatively expensive, requiring 7.3 seconds of server-side computation per client. If a single client could frequently request the Safe Browsing servers to rerun the offline hint-generation phase, it could exhaust server resources, denying service to honest clients. We propose two approaches to prevent this:
1. **Client Identity:** In settings where clients have long-term identities (e.g., Google Chrome users logged into their accounts), the Safe Browsing server can limit the number of offline requests each client makes.
2. **Proof-of-Work Puzzle:** Alternatively, the servers could use a proof-of-work puzzle to force the clients to do at least as much work as the servers. This approach is wasteful in terms of energy and doubles the total time of the offline phase. However, since an honest client only requests a new full hint infrequently (e.g., when installing the browser for the first time), requiring several seconds of client CPU time for initial hint generation seems feasible.

#### Synchronizing State
A Checklist deployment requires two non-colluding entities to run the two Checklist servers. For an Internet-scale deployment, each logical Checklist server would be implemented on hundreds or thousands of physical replica servers distributed globally. As the blocklist database changes, the replicas need to download updates from the main server.

- **Timestamping:** When the Checklist client fetches its hint in the offline phase, the server includes a timestamp \(\tau\) indicating the database version. During online queries, the client sends this timestamp \(\tau\). If the server’s database is newer, the client and server run the update process. If the server’s database is older, the client retries the query at another replica.
- **Update Frequency:** Clients update their Safe Browsing data a few times an hour, so the main server needs to push updates to the replicas only a few times per hour. Each update involves exchanging a few megabytes of data, making it relatively easy to keep the replicas up to date.

### 8.2 Extensions

#### Privacy for the Server
We focus on protecting the privacy of the client’s blocklist query but do not hide the full blocklist from the client. In applications like password-breach notification services, hiding the blocklist from the client is important. Freedman et al. [36] show that it is possible to lift a PIR scheme with client-only privacy into a PIR scheme with privacy for both the client and servers using oblivious pseudorandom functions. While we have not yet implemented this extension, it is expected to be a simple and useful addition for other applications of Checklist.

#### Batching
In some applications, a client may want to query the blocklist on many strings at once. Batch PIR schemes can improve performance by reducing the problem of making \(t \gg 1\) PIR queries to a database of size \(n\) to the problem of making roughly \(t\) queries to a database of size \(n/t\). This reduces the online time from \(\sqrt{n}\) to \(\sqrt{n/t}\). Since the Safe Browsing client rarely makes multiple PIR queries at once, we have not implemented this extension.

### 8.3 Future Work

#### Single-Server Setting
Checklist requires two servers to maintain replicas of the blocklist, and client privacy holds against adversaries controlling at most one server. Deploying multi-party protocols at scale can be challenging. An important direction for future work is to extend our offline/online PIR scheme to work in the single-server setting, leveraging recent advances in lattice-based PIR schemes.

- **Prior Work:** Prior work [27] shows that it is theoretically possible to construct single-server offline/online PIR schemes with sublinear online server time. However, these schemes are impractical due to extensive use of expensive homomorphic encryption and lack of hint reuse.
- **Future Task:** Design single-server offline/online PIR schemes with modest concrete costs that allow a client to reuse a single hint for multiple online queries.

#### Weakening Trust Requirements
We present a two-server offline/online PIR scheme that protects client privacy against a single malicious server. It would be better to construct a \(k\)-server offline/online PIR scheme with sublinear online time that protects client privacy against a coalition of \(k-1\) malicious servers. While no such PIR scheme exists, one possible approach is to replace additively homomorphic encryption with a \(k\)-out-of-\(k\) linear secret-sharing scheme. This gives a \(k\)-server protocol with offline communication of \(n^{2/3}\) bits per server and online time of \(n^{2/3}\), with security against adversarial coalitions of up to \(k-1\) servers. An open question is whether more efficient offline/online PIR schemes can be constructed in the \(k\)-server model, allowing the client to reuse its hint over multiple queries.

### 9 Related Work

Checklist follows recent work on improving the efficiency and privacy of blocklisting systems. CRLite [61], used in the Firefox browser, compresses a certificate-revocation blocklist using a hierarchy of Bloom filters. A browser can download and store this compressed blocklist, making fast and private local blocklist queries. CRLite relies on the ability to enumerate valid certificates from Certificate Transparency logs, which does not apply to our setting. CRLite requires total communication linear in the blocklist size, whereas Checklist can have sublinear communication.

Other work proposes ambitious approaches to certificate revocation, such as broadcasting revocation information over FM radio (Revcast [75]) and modifying the public-key infrastructure (Let's Revoke [79]). Solis and Tsudik [80] identify privacy issues with OCSP certificate revocation checks and propose heuristic protections.

Tech companies maintain blocklists of passwords from data breaches. Recent work [51,62,63,82,84] develops protocols for users to check their passwords while hiding them from the server and without revealing the entire blocklist. Some breach-notification services leak partial hashes of user passwords, while private-set-intersection protocols avoid this leakage but require linear online work. Using Checklist would eliminate hashed password leakage and reduce server-side computational cost.

Our focus application of Checklist is the Safe Browsing API. Prior work has demonstrated privacy weaknesses in the Safe Browsing API, arising from the client leaking 32-bit hashes of visited URLs to the server. Apple proxies Safe Browsing requests via Apple servers to hide IP addresses from service providers. The private Safe Browsing system of Cui et al. [28] provides privacy to both the client and server by having the client store a local encrypted copy of the blocklist, decrypting entries using an oblivious-pseudorandom-function evaluation protocol with the server. Our approach avoids the cost of storing the full blocklist.

Piotrowska et al. describe a private notification service called AnNotify [72], which tolerates some query leakage and runs on top of an anonymity network like Tor. The core of Checklist is a new two-server offline/online PIR scheme with sublinear online time, reducing the online time by a factor of \(\lambda \approx 128\) and providing the first implementation of such a scheme.

Our PIR scheme builds on a body of work on privacy-protecting database lookups. Chor et al. [24,25] initiated the study of PIR with multiple non-colluding servers. Gasarch [37] provides a survey of multi-server PIR as of 2004. Recent work improves the communication cost of two-server PIR using sophisticated coding ideas [32,35,85]. Under mild assumptions, there exist two-server PIR schemes with almost optimal communication cost [14,15,39,47]. An orthogonal goal is to protect against PIR server misbehavior [29,40].

Given that modern multi-server PIR schemes have low communication costs, the remaining task is to reduce the server-side computational cost. On a database of \(n\) rows, the above PIR schemes have server-side cost \(\Omega(n)\). Beimel et al. [8] show that if the servers preprocess the database, they can respond to client queries in \(o(n)\) time, though their schemes are expensive in terms of communication and require large amounts of server storage. "Batch PIR" [48,53] allows the client to fetch many records at roughly the server-side cost of fetching a single record. Lueks and Goldberg extend this to allow servers to answer queries from many mutually distrusting clients at less than the cost of answering each client’s request independently [64]. Other work relaxes the privacy guarantees of PIR.