服务器的例子，其中：
已下线的主服务器继续处理命令请求。
为新的主服务器，然后由新的主服务器代替
动将下线主服务器属下的某个从服务器升级
并在被监视的主服务器进人下线状态时，自
以及这些主服务器属下的所有从服务器
统（systerm）可以监视任意多个主服务器
Sentinel实例（instance）组成的 Sentinel系
 图16-1 展示了一个 Sentinel 系统监视
假设这时，主服务器 server1进
 server2、 server3、 server4
口用单环图案表示的是主服务
口用双环图案表示的是当前的主服
Sentinel（哨岗、哨兵）是Redis 的高可用性（high availability）解决方案：由一个或多个
务器 serverl。
在监视所有四个服务器。
serverl，而 Sentinel 系统则
三个从服务器正在复制主服务器
server3 以及 server4。
器的三个从服务器server2、
Sever2
server2
复制中止复制中止
复制
serverl
 Severl
图16-1服务器与 Sentinel 系统
图16-2主服务器下线
察觉主服务器已下线
[server3
Sever3
监视
Sentinel系统
Sentinel
、复制中止
Sentinel系统
监视监视
第16章
server
Sever4
监视
监视
监视
监视
---
## Page 224
220·第三部分多机数据库的实现
16.1
判断一个服务器是否在线的。
区别。
强
server3和 server4 成为 server2 的从服务器的过程。
server1 执行故障转移操作：
在此之后，本章将对 Sentinel 监视服务器的方法和原理进行介绍，说明 Sentinel是如何
最后，本章将介绍 Sentinel系统对主服务器执行故障转移的整个过程。
Sever1
，如图 16-4 所示。
之后，如果 server1 重新上线的话，它将被 Sentinel系统降级为 server2 的从服务
$ redis-sentinel /path/to/your/sentinel.conf
启动一个Sentinel可以使用命令：
本章首先会对 Sentinel的初始化过程进行介绍，并说明 Sentinel和一般Redis 服务器的
Sever3
举个例子，图16-3展示了Sentinel系统将server2升级为新的主服务器，并让服务器
另外，Sentinel还会继续监视已下线的 server1，并在它重新上线时，将它设置为
口 之后，Sentinel系统会向 server1属下的所有从服务器发送新的复制指令，让它们
口首先，Sentinel 系统会挑选 server1属下的其中一个从服务器，并将这个被选中的
当 server1的下线时长超过用户设定的下线时长上限时，Sentinel系统就会对
等待再次上线
新的主服务器的从服务器。
从服务器升级为新的主服务器。
启动并初始化 Sentinel
转移操作执行完毕。
成为新的主服务器的从服务器，当所有从服务器都开始复制新的主服务器时，故障
图16-3故障转移
复制复制
Sever2
Sentinel系统
Sever4
新的
升级为
服务器
的从服务器的从服务器
server2
设置为
server2
设置为
图16-4
Severl
复制 
原来的主服务器被降级为从服务器
Sever2
复制复制
Sever3
Sentinel系统
server2
降级为
 Sever4
---
## Page 225
是因为 Sentinel并不使用数据库，所以初始化 Sentinel 时就不会载人 RDB文件或者AOF 文件。
初始化过程和普通 Redis 服务器的初始化过程并不完全相同。
Sentinel的第一步，就是初始化一个普通的Redis 服务器，具体的步骤和第14章介绍的类似。
函数）
命令回复）
SUBSCRIBE
DEL、FLUSHDB
16.1.1
时间事件处理器（负责执行 serverCron
文件事件处理器（负责发送命令请求、处理
发布与订阅命令，比如 PUBLISH和
复制命令，比如 SLAVEOF
AOF持久化命令，比如 BGREWRITEAOF
RDB 持久化命令，比如 SAVE 和 BGSAVE
脚本命令，比如EVAL
事务命令，比如MULTI和WATCH
数据库和键值对方面的命令，比如 SET、
例如，普通服务器在初始化时会通过载人 RDB文件或者AOF文件来还原数据库状态，但
不过，因为 Sentinel 执行的工作和普通 Redis 服务器执行的工作不同，所以 Sentinel的
首先，因为 Sentinel本质上只是一个运行在特殊模式下的 Redis 服务器，所以启动
本节接下来的内容将分别对这些步骤进行介绍。
5）创建连向主服务器的网络连接。
4）根据给定的配置文件，初始化Sentinel的监视主服务器列表。
3）初始化 Sentinel状态。
2）将普通Redis服务器使用的代码替换成Sentinel专用代码。
1）初始化服务器。
当一个 Sentinel启动时，它需要执行以下步骤：
这两个命令的效果完全相同。
$ redis-server
或者命令：
初始化服务器
/path/to/your/sentinel.conf --sentinel
表 16-1 
Sentinel 模式下 Redis 服务器主要功能的使用情况 
函数，后者包含了 Sentinel 要执行的所有操作
数，serverCron 函数会调用 sentinel.c/sentinelTimer
器不同
能在 Sentinel内部使用
四个命令在 Sentinel 内部和客户端都可以使用，但 PUBLISH命令只
Sentinel 内部使用，时间事件的处理器仍然是 serverCron函
Sentinel 内部使用，但关联的文件事件处理器和普通 Redis 服务
SUBSCRIBE、PSUBSCRIBE、UNSUBSCRIBE、PUNSUBSCRIBE
Sentinel 内部可以使用，但客户端不可以使用
不使用
不使用
不使用
不使用
不使用
使用情况
第16章Sentinel+221
---
## Page 226
222◆第三部分多机数据库的实现
Sentinel功能有关的状态（服务器的一般状态仍然由redis.h/redisServer结构保存）：
sentinelState结构（后面简称“Sentinel状态”），这个结构保存了服务器中所有和
16.1.3
命令就是客户端可以对 Sentinel 执行的全部命令了。
SENTINEL、INFO、SUBSCRIBE、UNSUBSCRIBE、PSUBSCRIBE 和 PUNSUBSCRIBE 这 七个
SET、DBSIZE、EVAL等等这些命令，因为服务器根本没有在命令表中载人这些命令。PING、
数，而不是普通 Redis 服务器使用的实现redis.c/infoCommand 函数：
INFO命令会使用 Sentinel模式下的专用实现sentinel.c/sentinelInfoCommand函
服务器端口：
专用代码。比如说，普通 Redis 服务器使用redis.h/REDIS_SERVERPORT 常量的值作为
16.1.2使用Sentinel 专用代码
启动 Sentinel的第二个步骤就是将一部分普通 Redis 服务器使用的代码替换成 Sentinel
 struct sentinelstate {
在应用了Sentinel的专用代码之后，接下来，服务器会初始化一个 sentinel.c/
sentinelcmds 命令表也解释了为什么在 Sentinel 模式下，Redis 服务器不能执行诸如
struct redisCommand sentinelcmds[] = {
而 Sentinel则使用 sentinel.c/sentinelcmds 作为服务器的命令表，并且其中的
struct redisCommand redisCommandTable[] = {
除此之外，普通 Redis服务器使用redis.c/redi sCommandTable作为服务器的命令表：
#define REDIS_SENTINEL_PORT 26379
而 Sentinel则使用 sentinel.c/REDIS_SENTINEL_PORT 常量的值作为服务器端口：
#define REDIS_SERVERPORT 6379
//当前纪元，用于实现故障转移
初始化 Sentinel 状态
("info",sentinelInfoCommand,-1,"",0,NULL,0,0,0,0,0)
I"ping",pingCommand, 1, "", 0,NULL, 0,0, 0,0, 0},
["sentinel", sentinelCommand, -2,"",0, NULL,0,0,0, 0, 0),
{"bitcount",bitcountCommand, -2,"r",0,NULL,1,1,1,0,0}
"psubscribe"
I"script", scriptCommand, -2,"ras",0,NULL,0,0,0,0,0},
("setnx", setnxCommand, 3,"wm", 0,noPreloadGetKeys, 1,1,1,0,0}.
{"get",getCommand,2, "r",0,NULL,1,1,1,0,0},
setCommand,
pue
and.-1
",O,NuLL,0,0,0,0,0),
2
---
## Page 227
部分属性，本章接下来将逐步对实例结构中的各个属性进行介绍：
的Redis 服务器实例（instance），这个实例可以是主服务器、从服务器，或者另外一个 Sentinel。
16.1.4
实例结构包含的属性非常多，以下代码展示了实例结构在表示主服务器时使用的其中一
typedef struct sentinelRedisInstance {
每个 sentinelRedisInstance 结构（后面简称“实例结构”）代表一个被 Sentinel监视
口字典的键是被监视主服务器的名字。
Sentinel 状态中的 masters字典记录了所有被Sentinel监视的主服务器的相关信息，其中：
) sentinel;
// SENTINEL down-after-milliseconds 选项设定的值
sentinelAddr *addr;
//实例的地址
uint64_t config_epoch;
//配置纪元，用于实现故障转移
char *runid;
/1实例的运行 ID
//实例的名字
！！标识值，记录了实例的类型，以及该实例的当前状态
初始化 Sentinel 状态的 masters 属性
char *name;
二
int flags;
list *scripts_queue;
//一个FIFO 队列，包含了所有需要执行的用户脚本
mstime_t previous_time;
//最后一次执行时间处理器的时间
mstime_t tilt_start_time;
//进入TILT模式的时间
int running_scripts;
//目前正在执行的脚本的数量
int tilt;
/！是否进入了TILT模式？
dict *masters;
uint64_t current_epoch;
保存了所有被这个sentinel监视的主服务器
一个指向 sentinelRedisInstance 结构的指针
的名字由 Sentinel自动设置
第 16章Sentinel
·223
---
## Page 228
224◆第三部分多机数据库的实现
master2 创建如图16-6所示的实例结构，而这两个实例结构又会被保存到 Sentinel 状态的
化是根据被载人的 Sentinel配置文件来进行的。
结构的指针，这个结构保存着实例的IP 地址和端口号：
那么 Sentinel 将为主服务器 masterl 创建如图 16-5 所示的实例结构，并为主服务器
举个例子，如果用户在启动 Sentinel时，指定了包含以下内容的配置文件:
对 Sentinel 状态的初始化将引发对 masters 字典的初始化，而 masters 字典的初始
sentinel failover-timeout master2 450000
sentinel parallel-syncs master2 5
sentinel down-after-mi1liseconds master2 50000
sentinel monitor master2 127.0.0.1 12345 5
sentinel failover-timeout masterl 900000
sentinel parallel-syncs masterl 1
sentinel down-after-milliseconds masterl 30000
sentinel monitor master1 127.0.0.1 6379 2
 typedef struct sentinelAddr {
master2 configure
) sentinelAddr;
 sentinelRedisInstance;
int port;
char *ip;
mstime_t failover_timeout;
/刷新故障迁移状态的最大时限
int parallel_syncs;
int
// SENTINEL monitor   
mstime_t down_after_period;
//实例无响应多少毫秒之后才会被判断为主观下线（subjectivelydown）
:umaonb
选项中的 quorum 参数
---
## Page 229
masters
字典中，如图16-7所示。
"a68408b775438a5dee54a638b3a6f3461920158a"
"ee07959afc9d061233191c0f5bfe29580dfad0f4"
sentinelRedisInstance
sentinelRedisInstance
failover_timeout
down_after_period
down_after_period
parallel_syncs
failover_timeout
parallel_syncs
config_epoch
图16-6 
SRI_MASTER
图16-5 
SRI_MASTER
450000
"master2"
"masterl"
quorum
50000
runid
flags
000006
quorum
name
0000
runid
name
flags
addr
addr
5
。
2
6master2 的实例结构
1
D
master1 的实例结构
"127.0.0.1"
sentinelAddr
"127.0.0.1"
sentinelAddr
16