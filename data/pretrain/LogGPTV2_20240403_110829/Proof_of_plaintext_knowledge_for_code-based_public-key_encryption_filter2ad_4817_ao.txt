3.3 Security proof of PKE
G3.i, G3.i.1, G3.i.2 , G3.i.3 :
CEnc := ∅; b ←R {0, 1}
G := (G, p, P ) ←R GGen(1λ); H ←R H(1λ);
M ←R U3k,k(p)
M⊥ ←R U3k,2k s.t. M⊤M⊥ = 0
M0, M1 ←R U2k,k
1 ←R U3k,k s.t.
M∗
Span(M⊥) = Span(M∗
M1(cid:1)⊤
0 =(cid:0) 0
0 = 0
M⊤M∗
M0(cid:1)⊤
1 =(cid:0) 0
1 = 0
M⊤M∗
Pick random RFi : {0, 1}i → Z2k
q .
M∗
M∗
1)
0, M∗
0, M∗
i+1 : {0, 1}i+1 → Zk
q
i+1 : {0, 1}i+1 → Zk
q .
j=1 kj,τj
Pick random RF(0)
and RF(1)
i
: {0, 1}i → Zk
i+1, RF(1)
q
Pick random RF(0)
k1,0, . . . , kλ,1 ←R Z3k
For all τ ∈ {0, 1}λ, kτ :=Pλ
τ := kτ + M⊥RFi(τ|i)
k′
τ := kτ + M∗
k′
q
0RF(0)
0RF(0)
i+1(τ|i+1) + M∗
(τ|i)
i
1RF(1)
1RF(1)
τ := kτ + M∗
k′
i+1(τ|i+1) + M∗
i+1(τ|i+1)
Return pk :=(cid:16)G, [M], H,(cid:0)[M⊤kj,β](cid:1)1≤j≤λ,0≤β≤1(cid:17)
Figure 3.8: Games G3.i (for 0 ≤ i ≤ λ),G3.i.1, G3.i.2 and G3.i.3 (for 0 ≤ i ≤ λ − 1) for the proof of
Lemma 21. For all τ ∈ {0, 1}λ, we denote by τ|i the i-bit preﬁx of τ. In each procedure, the components
inside a solid (dotted, gray) frame are only present in the games marked by a solid (dotted, gray) frame.
of all the ciphertexts with a tag τ such that τi+1 = 0, and then, the distribution of
those with a tag τ such that τi+1 = 1, using the MDDH assumption with respect to an
independent matrix for each step. In Lemma 24, we build an adversary B3.i.3 such that:
|AdvG3.i.2(A) − Adv3.i.3| ≤≤ 2 · AdvUk(p)-mddh
G,B3.i.3
(λ) +
Putting everything together, we obtain the lemma.
Lemma 22: From game G3.i to game G3.i.1
2
p − 1
.
For all 0 ≤ i ≤ λ−1, there exists an adversary B3.i.0 such that T(B3.i.0) ≈ T(A)+(QEnc +
QDec) · poly(λ) and
|AdvG3.i(A) − AdvG3.i.1(A)| ≤ 2 · AdvUk(p)-mddh
G,B3.i.0
(λ) +
2
p − 1
,
where poly(λ) is independent of T(A).
Proof of Lemma 22. The proof of this lemma is essentially as the proof of Lemma 15, in
Section 3.1. The diﬀerence is that now, only the lower part of the vectors [y] sampled by EncO
68
Chapter 3. Tightly CCA-Secure Encryption without Pairings
is randomized using the QEnc-fold U2k,k-MDDH Assumption. The upper part of [y] is used to
compute the tag τ. We call y and y the upper and lower part of y, respectively.
We introduce an intermediate game G3.i.0 where EncO ﬁrst picks r ←R Zk
p, computes
[y] := [Mr], τ := H([y]), and computes the rest of its output as in G3.i.1 if τi+1 = 0, and as in
G3.i if τi+1 = 1; the public key pk and DecO are as in G3.i.1. We build adversaries B′
3.i.0 and
B′′
3.i.0 such that T(B′
3.i.0) ≈ T(A)+(QEnc +QDec)· poly(λ) with poly(λ) independent
of T(A), and
Claim 1: |AdvG3.i(A) − AdvG3.i.0(A)| ≤ Adv
QEnc-U2k,k-mddh
G,B′
3.i.0) ≈ T(B′′
(λ).
3.i.0
Claim 2: |AdvG3.i.0(A) − AdvG3.i.1(A)| ≤ Adv
QEnc-U2k,k-mddh
G,B′′
3.i.0
(λ).
This implies the lemma by Corollary 1 (Uk(p)-MDDH ⇒ QEnc-fold U2k,k(p)-MDDH).
Let us prove Claim 1. Upon receiving a challenge (G, [M0] ∈ G2k×k, [H] := [h1| . . .|hQEnc] ∈
3.i.0 does
G2k×QEnc) for the QEnc-fold U2k,k-MDDH Assumption with respect to M0 ←R U2k,k, B′
as follows:
pk: B′
3.i.0 picks M ←R U3k,k, k1,0, . . . , kλ,1 ←R Z3k
in Figure 3.8. For each τ computed while simulating EncO or DecO, B′
the ﬂy RFi(τ|i), k′
kτ := Pλ
τ := kτ + M⊥RFi(τ|i), where RFi : {0, 1}i → Z2k
p , H ←R H(1λ), and computes pk as described
3.i.0 computes on
is a random function,
j=1 kj,τj , and τ|i denotes the i-bit preﬁx of τ (see Figure 3.8). Note that B′
can compute eﬃciently M⊥ from M.
3.i.0
p
EncO(m0, m1): on the j’th query, for j = 1, . . . , QEnc, B′
[Mr], τ := H([y]), and computes [y] as follows:
3.i.0 samples r ← Zk
p, computes [y] :=
if τi+1 = 0 :
if τi+1 = 1 :
[y] := [Mr + hj]
[y] ←R G2k
This way, B′
in G3.i when [hj] ←R G2k.
3.i.0 simulates EncO as in G3.i.0 when [hj] := [M0r0] with r0 ←R Zk
p, and as
DecO(C, φ): Finally, B′
3.i.0 simulates DecO as described in Figure 3.8.
Therefore, |AdvG3.i(A) − AdvG3.i.0(A)| ≤ Adv
To prove Claim 2, we build an adversary B′′
3.i.0 against the QEnc-fold U2k,k(p)-MDDH
assumption with respect to a matrix M1 ←R U2k,k, independent from M0, similarly than
B′
3.i.0.
(λ).
3.i.0
QEnc-U2k,k(p)-mddh
G,B′
Lemma 23: From game G3.i.1 to game G3.i.2
For all 0 ≤ i ≤ λ−1, there exists an adversary B3.i.1 such that T(B3.i.1) ≈ T(A)+(QEnc +
QDec) · poly(λ), and
|AdvG3.i.1(A) − AdvG3.i.2(A)| ≤ 2QDec · Advae-ot
AE,B3.i.1(λ) +
2k
p
where QEnc, QDec are the number of queries to EncO and DecO, respectively, and poly(λ)
is independent of T(A).
3.3 Security proof of PKE
69
τ that lie in Span(M∗
0) and Span(M∗
Proof of Lemma 23. In G3.i.2, we decompose Span(M⊥) into two spaces Span(M∗
and we increase the entropy of the vector k′
τ computed by EncO and DecO. More precisely, the
entropy of the components of k′
0) increases from G3.i.1 to G3.i.2. To argue
that these two games are computationally indistinguishable, we use a Cramer-Shoup argument
[CS03], together with the one-time authenticity of AE.
0 and M∗
1 are sampled. Note that with probability
p , (Mk(cid:0) 0
1 − 2k
p . Therefore, we have Span(M⊥) = Ker(M⊤) =
Ker(cid:0)(Mk(cid:0) 0
respectively. This way, for all τ ∈ {0, 1}λ, we can write
M0(cid:1)k(cid:0) 0
M1(cid:1))⊤(cid:1) ⊕ Ker(cid:0)(Mk(cid:0) 0
that generates Ker(cid:0)(Mk(cid:0) 0
M1(cid:1)) forms a basis of Z3k
M1(cid:1))⊤(cid:1) and Ker(cid:0)(Mk(cid:0) 0
Let us ﬁrst explain how the matrices M∗
We pick uniformly M∗
M0(cid:1))⊤(cid:1).
1 in Z3k×k
0 and M∗
M0(cid:1))⊤(cid:1),
1),
p
M⊥RFi(τ|i) := M∗
0RF(0)
i (τ|i) + M∗
1RF(1)
i (τ|i),
where RF(0)
, RF(1)
We deﬁne RF(0)
i
i
: {0, 1}i → Zk
i+1 : {0, 1}i+1 → Zk
p as follows:
p are independent random functions.
RF(0)
i+1(τ|i+1) :=
RF(0)
RF(0)
i (τ|i)
i (τ|i) + RF′(0)
i (τ|i)
if τi+1 = 0
if τi+1 = 1
where RF′(0)
a random function.
: {0, 1}i → Zk
i
p is a random function independent from RF(0)
i
. This way, RF(0)
i+1 is
We show that the outputs of EncO and DecO are computationally indistinguishable in G3.i.1
and G3.i.2. We decompose the proof in two cases (delimited with (cid:4)): the queries corresponding
to a tag τ ∈ {0, 1}λ such that τi+1 = 0, and the queries corresponding to a tag τ such that
τi+1 = 1.
Queries with τi+1 = 0:
i
in G3.i.1, whereas it uses the random function RF(0)
The only diﬀerence between G3.i.1 and G3.i.2 is that k′
RF(0)
by deﬁnition of RF(0)
and the outputs of EncO and DecO are identically distributed. (cid:4)
i+1, for all τ ∈ {0, 1}λ such that τi+1 = 0, k′
τ is computed using the random function
i+1 in G3.i.2 (see Figure 3.8). Therefore,
τ is the same in G3.i.1 and G3.i.2,
Queries with τi+1 = 1:
Observe that for all y ∈ Span(M,(cid:0) 0
M1(cid:1)) and all τ ∈ {0, 1}λ such that τi+1 = 1,
G3.i.2
}|
z
y⊤(cid:16)kτ + M∗
= y⊤(cid:16)kτ + M∗
z
y⊤ ·(cid:16)kτ + M∗
=
0RF(0)
i (τ|i) + M∗
1RF(1)
i (τ|i) + M∗
0RF′(0)
0RF(0)
i (τ|i) + M∗
0RF(0)
i (τ|i) + M∗
G3.i.1
}|
|
1RF(1)
i (τ|i)(cid:17) + y⊤M∗
{
i (τ|i)(cid:17)
0 =(cid:0) 0
M1(cid:1)⊤
1RF(1)
M∗
{
i (τ|i)(cid:17)
{z
0RF′(0)
=0
i (τ|i)
}
where the second equality uses the fact M⊤M∗
0 = 0 and thus y⊤M∗
0 = 0.
This means that:
• the outputs of EncO that contains [y] whose tag τ = H([y]) is such that τi+1 = 1 are
identically distributed in G3.i.1 and G3.i.2;
70
Chapter 3. Tightly CCA-Secure Encryption without Pairings
is the same in G3.i.1 and G3.i.2.
• the output of DecO on any input ([y], φ) where τ = H([y]), τi+1 = 1, and y ∈ Span(M,(cid:0) 0
M1(cid:1))
1, and y /∈ Span(M,(cid:0) 0
• G3.i.1.j: DecO is as in G3.i.1 except that for the ﬁrst j times it is queried, it outputs ⊥ to
Henceforth, we focus on the ill-formed queries to DecO, namely those corresponding to τi+1 =
3.i.1.j for j =
M1(cid:1)). We introduce intermediate games G3.i.1.j, and G′
0, . . . , QDec, deﬁned as follows: