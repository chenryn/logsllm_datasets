---
author: Quentin Monnet
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 51711
date: '2018-04-03 12:25:00'
editorchoice: false
excerpt: 我收集了非常多的关于 BPF 的阅读材料：介绍、文档，也有教程或者示例。这里有很多的材料可以去阅读
fromurl: https://qmonnet.github.io/whirl-offload/2016/09/01/dive-into-bpf/
id: 9507
islctt: true
largepic: /data/attachment/album/201804/03/122506xddn6s8b8z1m42mm.jpg
permalink: /article-9507-1.html
pic: /data/attachment/album/201804/03/122506xddn6s8b8z1m42mm.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 9273
- displayorder: 1
  raid: 9424
reviewer: ''
selector: ''
summary: 我收集了非常多的关于 BPF 的阅读材料：介绍、文档，也有教程或者示例。这里有很多的材料可以去阅读
tags:
- 跟踪器
- BPF
- eBPF
- 过滤器
thumb: false
title: 深入理解 BPF：一个阅读清单
titlepic: true
translator: qhwdw
updated: '2018-04-03 12:25:00'
---
![](/data/attachment/album/201804/03/122506xddn6s8b8z1m42mm.jpg)
*~ [更新于](https://github.com/qmonnet/whirl-offload/commits/gh-pages/_posts/2016-09-01-dive-into-bpf.md) 2017-11-02 ~*
什么是 BPF?
--------
BPF，及 伯克利包过滤器      B    erkeley     P    acket     F    ilter ，最初构想提出于 1992 年，其目的是为了提供一种过滤包的方法，并且要避免从内核空间到用户空间的无用的数据包复制行为。它最初是由从用户空间注入到内核的一个简单的字节码构成，它在那个位置利用一个校验器进行检查 —— 以避免内核崩溃或者安全问题 —— 并附着到一个套接字上，接着在每个接收到的包上运行。几年后它被移植到 Linux 上，并且应用于一小部分应用程序上（例如，`tcpdump`）。其简化的语言以及存在于内核中的即时编译器（JIT），使 BPF 成为一个性能卓越的工具。
然后，在 2013 年，Alexei Starovoitov 对 BPF 进行彻底地改造，并增加了新的功能，改善了它的性能。这个新版本被命名为 eBPF （意思是 “extended BPF”），与此同时，将以前的 BPF 变成 cBPF（意思是 “classic” BPF）。新版本出现了如映射和 尾调用   tail call 这样的新特性，并且 JIT 编译器也被重写了。新的语言比 cBPF 更接近于原生机器语言。并且，在内核中创建了新的附着点。
感谢那些新的钩子，eBPF 程序才可以被设计用于各种各样的情形下，其分为两个应用领域。其中一个应用领域是内核跟踪和事件监控。BPF 程序可以被附着到探针（kprobe），而且它与其它跟踪模式相比，有很多的优点（有时也有一些缺点）。
另外一个应用领域是网络编程。除了套接字过滤器外，eBPF 程序还可以附加到 tc（Linux 流量控制工具）的入站或者出站接口上，以一种很高效的方式去执行各种包处理任务。这种使用方式在这个领域开创了一个新的天地。
并且 eBPF 通过使用为 IO Visor 项目开发的技术，使它的性能进一步得到提升：也为 XDP（“eXpress Data Path”）添加了新的钩子，XDP 是不久前添加到内核中的一种新式快速路径。XDP 与 Linux 栈组合，然后使用 BPF ，使包处理的速度更快。
甚至一些项目，如 P4、Open vSwitch，[考虑](http://openvswitch.org/pipermail/dev/2014-October/047421.html) 或者开始去接洽使用 BPF。其它的一些，如 CETH、Cilium，则是完全基于它的。BPF 是如此流行，因此，我们可以预计，不久之后，将围绕它有更多工具和项目出现 …
深入理解字节码
-------
就像我一样：我的一些工作（包括 [BEBA](https://qmonnet.github.io/whirl-offload/2016/07/15/beba-research-project/)）是非常依赖 eBPF 的，并且在这个网站上以后的几篇文章将关注于这个主题。按理说，在深入到细节之前，我应该以某种方式去介绍 BPF —— 我的意思是，真正的介绍，在第一节所提供的简要介绍上更多地介绍在 BPF 上开发的新功能：什么是 BPF 映射？尾调用？内部结构是什么样子？等等。但是，在这个网站上已经有很多这个主题的介绍了，而且，我也不希望去写另一篇 “BPF 介绍” 的重复文章。
毕竟，我花费了很多的时间去阅读和学习关于 BPF 的知识，因此，在这里我们将要做什么呢，我收集了非常多的关于 BPF 的阅读材料：介绍、文档，也有教程或者示例。这里有很多的材料可以去阅读，但是，为了去阅读它，首先要去 *找到* 它。因此，为了能够帮助更多想去学习和使用 BPF 的人，现在的这篇文章给出了一个资源清单。这里有各种阅读材料，它可以帮你深入理解内核字节码的机制。
资源
--
### 简介
这篇文章中下面的链接提供了 BPF 的基本概述，或者，一些与它密切相关的一些主题。如果你对 BPF 非常陌生，你可以在这些介绍文章中挑选出一篇你喜欢的文章去阅读。如果你已经理解了 BPF，你可以针对特定的主题去阅读，下面是阅读清单。
#### 关于 BPF
**关于 eBPF 的常规介绍**：
* [全面介绍 eBPF](https://lwn.net/Articles/740157/)（Matt Flemming，on LWN.net，December 2017）：
一篇写的很好的，并且易于理解的，介绍 eBPF 子系统组件的概述文章。
* [利用 BPF 和 XDP 实现可编程的内核网络数据路径](http://schd.ws/hosted_files/ossna2017/da/BPFandXDP.pdf) (Daniel Borkmann, OSSNA17, Los Angeles, September 2017)：
快速理解所有的关于 eBPF 和 XDP 的基础概念的最好讲稿中的一篇（主要是关于网络处理的）
* [BSD 包过滤器](https://speakerdeck.com/tuxology/the-bsd-packet-filter) （Suchakra Sharma, June 2017）： 
一篇非常好的介绍文章，主要是关于跟踪方面的。
* [BPF：跟踪及更多](http://www.slideshare.net/brendangregg/bpf-tracing-and-more)（Brendan Gregg, January 2017）：
主要内容是跟踪使用案例相关的。
* [Linux BPF 的超强功能](http://fr.slideshare.net/brendangregg/linux-bpf-superpowers) （Brendan Gregg, March 2016）：