unsafe to access since the object might have been reclaimed.
But reading a pointer published in a newer era (i.e., by
a newer transaction) also breaks the isolation property of
the transaction. Thus, the load-interposition algorithm used
by OneFile is also sufﬁcient to ensure that no reclaimed
memory is accessed.
The HE scheme guarantees wait-freedom for the reclama-
tion procedure, but only lock-freedom for reading a pointer
from the heap. After a new pointer is read, the HE scheme
checks if the era was changed and, if so, re-reads the pointer.
Thus, a thread may starve reading a pointer while other
threads progress to new eras. Still, the helping mechanism
we designed for OneFile guarantees wait-freedom also for
the HE scheme. A thread is unable to progress only if a
new era was announced. However, after two attempts, other
threads must have executed the current operation on behalf
of the current thread, thus ensuring progress for any thread
in the system. To our knowledge, this is the ﬁrst wait-free
algorithm supporting full memory reclamation.
V. EVALUATION
We now present a detailed evaluation of OneFile, di-
vided in two subsections, volatile (transient) and non-volatile
memory. Except for the latency plots in Fig. 7, all other
microbenchmarks were executed on an AWS c5.9xlarge
instance with 36 virtual cores, running Ubuntu LTS and
using gcc 7.3 with the -O3 optimization ﬂag. This instance
is hosted on a 3 GHz Intel Xeon (Skylake-SP) Platinum
8124M and it supports the new CLWB instruction as pwb.
A. Evaluation of Volatile Memory techniques
The only other known lock-free STM with dynamic trans-
actions has been implemented in the JVM [17], for which
there is no DCAS operation, making unfeasible a direct
comparison with OneFile. Moreover, memory reclamation
on the JVM is not lock-free. As such, we compare our
STM implementations with lock-based (blocking) STMs,
choosing two well known, fast, and easy to use STM
implementations: ESTM [20] and TinySTM [14], [15].
To act as a baseline, we also evaluate lock-free data struc-
tures where appropriate. For the linked list based queues, we
compare with Michael and Scott’s lock-free queue [50], with
two wait-free queues SimQueue [33] and Turn Queue [51].
For the array based queues, we compare with Morrison and
Afek’s lock-free queue [52] based on DCAS named LCRQ,
and with the FAA lock-free queue based on single-word
CAS by Correia and Ramalhete [53]. For the linked list set,
we compare with Michael’s lock-free linked list set [54]
based on Harris [55]. For trees, we compare with the lock-
free tree by Natarajan and Mittal [56] shown as NataHE,
a relaxed tree. We chose this relaxed (non-balanced) tree
because despite the existence of balanced lock-free trees in
the literature [57], no implementation with hazard pointers
or other lock-free memory reclamation schemes has ever
been shown. For fair comparison with the STMs, all these
hand-made data structures have integrated lock-free memory
reclamation, with SimQueue and Turn queue having wait-
free memory reclamation. We chose the fastest memory
reclamation for each data structure, using Hazard Point-
ers [36] for the queues, and Hazard Eras [41] for all other
data structures.
We start our evaluation with the SPS benchmark [11],
[58]–[60] which consists of an array of 64bit integers with
1,000 entries, where random swaps of integer values are
157
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:13:27 UTC from IEEE Xplore.  Restrictions apply. 
Legend for volatile memory (all graphs of §V.A)
Tiny
OF-WF
OF-LF
ESTM
SPS integer swap
1 thread
2 threads
4 threads
)
s
/
6
0
1
×
(
s
p
a
w
S
 30
 25
 20
 15
 10
 5
 0
 1  2  4  8  32  128
 1  2  4  8  32  128
 1  2  4  8  32  128
16 threads
32 threads
64 threads
)
s
/
6
0
1
×
(
s
p
a
w
S
12
10
8
6
4
2
0
 1  2  4  8  32  128
 1  2  4  8  32  128
 1  2  4  8  32  128
Number of swaps per transaction
Figure 2: SPS integer microbenchmark for multiple STMs.
SPS object swap
2 threads
4 threads
Number of swaps per transaction
Figure 3: SPS object microbenchmark for multiple STMs.
Array-based queue
Linked list-based queue
MS
SimQ
TurnQ
 12
 8
 4
 40
 30
 20
 10
)
s
/
6
0
1
×
(
s
n
o
i
t
a
r
e
p
O
 0
 1
 2
 4
 8  16 32 
 64
 2
Number of threads
 0
 1
FAA
LCRQ
 4
 8  16 32 
 64
Figure 4: Linked list- and array-based queues.
executed. On Fig. 2 we plot the number of swaps per second
as a function of how many swaps are done per transaction.
As the number of threads and the transaction size increases,
there will be more conﬂicts between transactions. This
benchmark simulates a workload with no memory allocation
being done during its execution. When the transaction size is
small, the workload is mostly disjoint although as the trans-
)
s
/
6
0
1
×
(
s
p
a
w
S
)
s
/
6
0
1
×
(
s
p
a
w
S
1 thread
 12
 10
 8
 6
 4
 2
 0
 1  2  4  8  32  128
8 threads
12
10
8
6
4
2
0
 1  2  4  8  32  128
 1  2  4  8  32  128
 1  2  4  8  32  128
16 threads
32 threads
)
s
/
6
0
1
×
(
s
n
o
i
t
a
r
e
p
O
 1  2  4  8  32  128
 1  2  4  8  32  128
 3
)
s
/
6
0
1
×
(
s
n
o
i
t
a
r
e
p
O
 2
 1
 0
)
s
/
6
0
1
×
(
s
n
o
i
t
a
r
e
p
O
6
4
2
0
 0.4
)
s
/
6
0
1
×
(
s
n
o
 0.3
 0.2
 0.1
i
t
a
r
e
p
O
 0
15
10
5
0
)
s
μ
(
n
o
i
t
a
r
u
d
e
m
i
t
x
T
)
s
μ
(
n
o
i
t
a
r
u
d
e
m
i
t
x
T
108
106
104
102
100
108
106
104
102
100
Linked list sets with 103 keys
100%
HarrisHP
44
50%
HarrisHE
10%
55
 4  16  32  48  64
 4  16  32  48  64
 4  16  32  48  64
1%
0.1%
99
1717
0%
 4  16  32  48  64
 4  16  32  48  64
Number of threads
 4  16  32  48  64
Figure 5: Linked list-based sets with 103 keys.
Red-black tree sets with 104 keys
100%
NataHE
50%
1.01.0
10%
2.02.0
 4  16  32  48  64
 4  16  32  48  64
 4  16  32  48  64
1%
0.1%
8080
140140
0%
 4  16  32  48  64
 4  16  32  48  64
Number of threads
 4  16  32  48  64
Figure 6: Red-black tree sets with 104 keys.
Latency when incrementing an array of 64 counters
50% (median)
90%
99%
 2  4  8  16 32 64
 2  4  8  16 32 64