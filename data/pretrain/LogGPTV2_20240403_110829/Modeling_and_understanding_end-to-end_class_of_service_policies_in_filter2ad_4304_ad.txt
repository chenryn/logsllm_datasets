query tool that can trace the end-to-end CoS treatments of (cid:3)owsets.
In building the tool, our primary focus was on ef(cid:2)cient and practical
composition of rulesets in a real-time fashion. As a secondary goal,
we were interested in augmenting the tool with auxiliary informa-
tion such as router forwarding tables. In the rest of this section, we
discuss our approach to achieve these goals.
4.1 Ef(cid:2)ciently operating on rulesets
Fig. 9 shows a conceptual overview of the query tool. The tool
consists of two phases. In the preprocessing phase, based on the
con(cid:2)guration (cid:2)le of each router in the network, the appropriate
rulesets for each CoS policy block are created. Next, the (cid:3)at ruleset
representation for each CoS policy is derived. The query process-
ing phase takes two inputs: (i) a set of (cid:3)ows described by an ACL,
whose CoS treatment needs to be determined; and (ii) a sequence
of routers that may be traversed by the (cid:3)owset, over which the anal-
ysis must be conducted. Based on the sequence of routers speci(cid:2)ed
in the input, the preprocessed rulesets for the relevant CoS policies
on the path are loaded, and these rulesets are composed with the
input (cid:3)owset to generate all possible end-to-end treatments that the
set of (cid:3)ows may receive when they traverse the path.
Flattening and composing rulesets (Equations (1) and (2)) re-
quire performing set operations such as union, intersection and
comparison. In general, performing such operations on large multi-
224Direction of traffic flow
flowset (ACL)
deny 192.168.1.1/32 …
permit 192.168.1.0/24 …
…
marking
finvSM1
fin
T
finvSM3 =Ø
SM1
SM3
finvSM1
(         ,M1) 
CER1
End-to-end 
router path
policing
SP1
SP3
SP4
…
PER1…
End-to-end 
treatment of 
input flows
Figure 10: Composing a (cid:3)owset with rulesets on an end-to-end path.
Ruleset Composer
dimensional rulesets is computationally expensive. In fact, in our
datasets, we found that intuitive approaches to combining rulesets
using simple cross-products of ACLs in the recursive representa-
tions of the rulesets could result in computation times of several
days even for a single enterprise VPN.
To effectively describe a set of (cid:3)ows and perform various opera-
tions on (cid:3)owsets, we use binary decision diagrams (BDD) [14] as
the underlying data structure. A BDD is an ef(cid:2)cient data structure
that can compactly and canonically represents a boolean function
as a directed acyclic graph, BDDs have been widely used in formal
veri(cid:2)cation of digital circuits, and we have been inspired by their
use to encode (cid:2)rewall rules in recent studies [19, 20, 12, 13].
In our context, a single (cid:3)ow is captured by a 6-tuple including
source and destination IP addresses and ports, protocol, and ToS
byte. Every bit in each of these (cid:2)elds corresponds to a BDD vari-
able (cid:150) for instance an IP address is modeled with 32 BDD variables.
Performing standard set operations such as intersection, union, and
complement using BDDs is straightforward. It is also easy to deter-
mine membership, i.e., whether a particular (cid:3)ow belongs to a given
(cid:3)owset. We refer readers to [14, 20] for more detailed information
about BDDs.
While standard set operators for manipulating BDDs are easily
implementable, one atypical operation we need in our context is the
func operator which may require the transformation of a subset of
nodes in a BDD in order to support marking actions during rule-
set composition. The steps that we employed to transform a BDD
involve (cid:2)rst removing all BDD nodes corresponding to bits in the
ToS byte using a technique called existential quanti(cid:2)cation [15],
constructing a separate BDD using the new ToS value alone, and
merging the two BDDs together using set-union to create the trans-
formed BDD. While in our context, transformations primarily in-
volve a modi(cid:2)cation of the ToS byte, we defer an investigation on
whether more general transformation functions can be ef(cid:2)ciently
supported by BDDs to future work.
Fig. 10 illustrates how we leverage BDDs to compose rulesets.
First, the (cid:3)at representation of each root ruleset is precomputed
using BDDs by performing the set operations speci(cid:2)ed in Equa-
tion (1). For instance, in Fig. 10, the ruleset corresponding to
the marking policy block might be represented by multiple BDDs
(SM 1 and SM 3), each corresponding to a set of (cid:3)ows that are asso-
ciated with marking actions M 1 and M 3, respectively. This com-
putation itself leverages standard BDD operations. The network
operator enters an ACL which is converted to a (cid:3)owset described
by a BDD (fin). The intersections of fin with SM 1 and SM 3 in-
dicates the subset of input (cid:3)ows that are marked M 1 and M 3. In
this example, the intersection of fin and SM 3 is a null set, indicat-
ing all (cid:3)ows are marked as M 1. Since the marking policy changes
the ToS byte, an explicit transformation (T ) of the output BDD is
required before the next stage is entered. A similar process is now
followed for the policing policy, and the remaining stages.
Usage
Flowset
troubleshooting a (cid:3)owset operator speci(cid:2)ed
auditing a CER
universal
ACL representation
operator speci(cid:2)ed
permit any any
auditing a path
between CERs
address space
universal
permit AS(CER) any
permit any any
address space
permit AS(CER1) AS(CER2)
Table 1: Potential usage of the query tool. AS(CER) denotes the ad-
dress space of CER.
4.2 Considering forwarding information
In the basic version of our tool, the operator speci(cid:2)es a (cid:3)owset
whose treatment needs to be determined, and the list of routers in
the path of interest. While this is already useful, the value of the
tool would be greatly augmented if it could automatically identify
the routers involved.
Our tool takes a (cid:2)rst but limited step towards this goal by identi-
fying the source and destination CERs and PERs. To achieve this,
the tool makes use of the PER forwarding tables for each CER
interface. Speci(cid:2)cally, each PER has a separate forwarding table
known as a VRF (Virtual Routing and Forwarding), one per CER-
facing interface. This table is looked up by the PER to forward
traf(cid:2)c arriving from the CER. Using this information, we determine
the address space of each CER interface by (cid:2)nding all addresses in
the VRF for which the CER interface is used as the next hop. When
an operator wishes to determine the (cid:3)ow treatment between two 2
IP addresses, the CER interfaces to which they belong is (cid:2)rst iden-
ti(cid:2)ed based on the extracted address space information. Once the
CERs are determined, it is easy to determine the PERs to which
they are attached by correlating interfaces whose IP addresses fall
into the same subnet from the router con(cid:2)gurations. It is possible
that for redundancy/load-sharing reasons, a CER may be attached
to multiple PERs, or may have multiple links to a PER. In such sce-
narios, we determine all possible paths between the pair of CERs,
and trace the CoS treatment along each path.
In some VPNs, traf(cid:2)c between two CERs may be relayed through
other intermediate CERs. Our tool may be extended to provide in-
formation about the CoS treatment at each intermediate CER, if in
addition to forwarding tables, routing table data is also utilized so
intermediate CERs can be determined. We note that our analysis in
§6 focuses on VPNs where all sites can directly communicate with
each other, and this issue does not arise.
Our tool currently does not consider the P routers in the MPLS
backbone, as we did not have access to con(cid:2)guration and forward-
ing table information of P routers. While our techniques can be
extended to P routers if this information is made available, the de-
signer indicated that CoS policies in the P routers are typically ho-
mogeneous queueing policies that are rarely activated due to band-
width overprovisioning in the backbone, and do not involve (cid:3)ow
transformations.
5. APPLYING THE TOOL
The tool enables an operator to input a (cid:3)owset using an ACL.
This (cid:3)exibility enables us to apply it to various scenarios (sum-
marized in Table 1). We describe some of the scenarios we have
explored below:
(cid:15) Troubleshooting and what-if analysis: In its basic usage, the
tool could take an operator-speci(cid:2)ed ACL as input, to study the
CoS treatment of any (cid:3)ow(s) of interest, locate the root cause of a
potential problem, or conduct a what-if analysis. For a single (cid:3)ow
and path, we see a single possible end-to-end treatment. However,
if a (cid:3)owset is provided, or if there are multiple paths that may be
taken for redundancy reasons, then the output may include multiple
possible (cid:3)ow-treatments.
(cid:15) Auditing individual routers: The tool can be used by an op-
225erator to trace all possible (cid:3)ow treatments within a router. This
may be useful to determine potential miscon(cid:2)gurations such as
the presence of policies in the router that are never triggered and
non-standard (cid:3)ow treatments. A (cid:2)rst interesting mode involves us-
ing the universal (cid:3)owset (the set of all possible (cid:3)ows). A second
mode, particularly to our enterprise VPN scenario, involves using
a (cid:3)owset which corresponds to all traf(cid:2)c sourced from addresses in
the address space of a CER, determined using forwarding informa-
tion as described in §4.2. While using address space information
helps detect anomalous (cid:3)ow treatments that are potentially present
in the network today, using the universal (cid:3)owset helps detect latent
errors that may not exist today, but could arise if the address space
of the CER changes.
(cid:15) Auditing policies across a pair of routers: Similar to the above,
the tool could be used to understand all possible CoS patterns be-
tween a pair of routers either by using (i) the universal (cid:3)owset; or
(ii) the (cid:3)owset corresponding to all traf(cid:2)c with source and destina-
tion addresses corresponding to the address space of the two CERs.
6. EVALUATION AND RESULTS
We have applied our tool to study the CoS designs of several op-
erational enterprise VPNs. In this section, we describe our datasets
and present results from our analysis.
6.1 Data Sets
We collected router con(cid:2)guration (cid:2)les from 150 enterprise VPNs
(ENT1(cid:24)ENT150). 40% of the enterprises have more than 10 CERs
while 5% have more than 100 CERs. Note that these numbers only
re(cid:3)ect the number of CERs, and the size of each enterprise site be-
hind a CER can be much larger. These enterprises employ VPNs
with any-to-any connectivity (i.e., any site can directly communi-
cate with any other site). The dataset contains CER con(cid:2)guration
(cid:2)les from these enterprises, and the relevant PER con(cid:2)guration (cid:2)les
from the MPLS backbone. All the routers in our dataset are Cisco
routers managed by a tier-1 ISP. In addition, we have information
regarding the VRF forwarding tables of every PER on each CER-
PER interface, as described in §4.2.
Running Time: To get a sense of the running time of our tool, we
ran the tool with a query involving the universal (cid:3)owset (the most
computationally expensive query) on all CER con(cid:2)gurations across
all enterprises. On a dual-core Intel Itanium 2 1.6GHz system with
32GB of RAM, the median time across all CER con(cid:2)gurations was
1.56 seconds, with values ranging between 0.27 and 6.55 seconds.
The larger computation times were in general associated with CERs
with larger ACLs. These numbers are very encouraging, and indi-
cate the potential for operators to use the tool for tracing (cid:3)owsets
in an interactive fashion.
6.2 Usage of CoS in practice
In this section, we present a high-level analysis of our datasets to
better understand the prevalence and usage of CoS policies in oper-
ational networks. CoS con(cid:2)guration is the largest single functional
piece in CER con(cid:2)gurations in our datasets, with 20%(cid:0)60% of the
con(cid:2)guration lines of all CERs associated with CoS alone. Further,
we have observed that CoS-related changes are among the most
frequent in the VPNs we studied, with each CoS-related change
involving modi(cid:2)cations to several con(cid:2)guration blocks.
Each CER in these VPNs is con(cid:2)gured to support up to four dif-
ferent data classes (cid:150) C1, C2, C3, and C4 (in order of decreasing
priority). C1 is the real-time class, designed for jitter and latency
sensitive applications like voice and video. C2 is the premium
class, designed for critical business applications such as database
transactions. C3 is the bulk data class, designed for medium pri-
)
s
e
s
i
r
p
r
e
t
n
e
(
F
D
C
 100
 80
 60
 40
 20
 0
 0
 1
 2
 3
 4
 5
 6
 7
 8
Number of Distinct Data Class Combinations
Figure 11: CDF of the number of con(cid:2)gured class combinations for
CERs in each enterprise.
s
e
s
i
r
p
r
e
t
n
E
f
o
r
e
b
m
u
N
 90
 80
 70
 60
 50
 40
 30
 20
 10
 0
 1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16
Data Class Combination ID
Figure 12: Number of enterprises with some CER belonging to a par-
ticular combination.
ority business applications such as email and (cid:2)le transfers. C4 is
the best-effort class, designed for the remaining background traf-
(cid:2)c. In addition, other classes may exist to handle network manage-
ment traf(cid:2)c, such as SNMP query traf(cid:2)c, and traf(cid:2)c correspond-
ing to routing updates. Considering the data classes alone, each