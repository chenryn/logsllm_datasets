where the path predicate restricts the symbolic memory
index i within a range such that 7  16), over-
head increases slightly. Two factors prevent TaintPipe
from achieving more speedup. First, taint analysis en-
gine slows down when processing large code segment.
Second, more worker threads introduce larger communi-
cation latency when resolving symbolic taint states. Ac-
cording to the results, we set the two factors as their op-
timal values (32MB buffer size and 16 worker threads),
which will be used in the following experiments.
5.2 Performance
To evaluate the performance gains achieved by pipelin-
ing taint logic, we compared TaintPipe with a state-of-
the-art tool, libdft [20], which performs inlined dynamic
taint analysis based on Pin (“libdft” bar). In addition, we
developed a simple tool to measure the slowdown im-
74  24th USENIX Security Symposium 
USENIX Association
 nullpin
 libdft
 TaintPipe - application 
 TaintPipe - overall
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
)
e
m
i
t
n
u
r
d
e
z
i
l
a
m
r
o
n
(
n
w
o
d
w
o
S
l
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
)
e
m
i
t
n
u
r
d
e
z
i
l
a
m
r
o
n
(
n
w
o
d
w
o
S
l
 nullpin
 libdft
 TaintPipe - application
 TaintPipe - overall
 bzip2
compress
  gzip
compress
  tar
archive
  bzip2
decompress
  gzip
decompress
 tar
untar
 scp
1Gbps
 average
p
erlb
b
zip
2
g
c
c
m
cf
e
n
c
h