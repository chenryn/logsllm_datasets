and 703/16;
the National Science Foundation under grant
CNS-1954712; Len Blavatnik and the Blavatnik Family foun-
dation and Blavatnik ICRC at Tel-Aviv University; Robert
Bosch Foundation; and gifts from Intel and AMD.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:13 UTC from IEEE Xplore.  Restrictions apply. 
14712
REFERENCES
[1] Webkit2. https://trac.webkit.org/wiki/WebKit2, 2011.
[2] Onur Acıic¸mez. Yet another microarchitectural attack: Exploiting I-
cache. In CSAW, pages 11–18, 2007.
[3] Marc Andrysco, David Kohlbrenner, Keaton Mowery, Ranjit Jhala, Sorin
Lerner, and Hovav Shacham. On subnormal ﬂoating point and abnormal
timing. In IEEE SP, pages 623–639, 2015.
[4] Jake Archibald. Sharedarraybuffer updates in android chrome 88 and
desktop chrome 91. https://developer.chrome.com/blog/enabling-shared-
array-buffer/, 2021.
[5] Andrew Bortz, Adam Barth, and Alexei Czeskis. Origin cookies: Session
integrity for web applications. Web 2.0 Security and Privacy (W2SP),
2011.
[6] Ferdinand Brasser, Urs M¨uller, Alexandra Dmitrienko, Kari Kostiainen,
Srdjan Capkun, and Ahmad-Reza Sadeghi. Software grand exposure:
SGX cache attacks are practical. In WOOT, 2017.
[7] Brave. Browse 3x faster than Chrome. https://brave.com/, 2021.
[8] Claudio Canella, Jo Van Bulck, Michael Schwarz, Moritz Lipp, Ben-
jamin von Berg, Philipp Ortner, Frank Piessens, Dmitry Evtyushkin, and
Daniel Gruss. A systematic evaluation of transient execution attacks and
defenses. In USENIX Security, pages 249–266, 2019.
[9] Claudio Canella, Daniel Genkin, Lukas Giner, Daniel Gruss, Moritz
Lipp, Marina Minkin, Daniel Moghimi, Frank Piessens, Michael
Schwarz, Berk Sunar, Jo Van Bulck, and Yuval Yarom. Fallout: Leaking
data on Meltdown-resistant CPUs. In CCS, pages 769–784, 2019.
[10] Shaanan Cohney, Andrew Kwong, Shahar Paz, Daniel Genkin, Nadia
Heninger, Eyal Ronen, and Yuval Yarom. Pseudorandom black swans:
Cache attacks on CTR DRBG. In IEEE SP, pages 1241–1258, 2020.
[11] Finn de Ridder, Pietro Frigo, Emanuele Vannacci, Herbert Bos, Cristiano
SMASH: Synchronized many-sided
Giuffrida, and Kaveh Razavi.
Rowhammer attacks from JavaScript. In USENIX Security, 2021.
[12] Dmitry Evtyushkin and Dmitry Ponomarev. Covert channels through
random number generator: Mechanisms, capacity estimation and miti-
gations. In CCS, 2016.
[13] Mozilla Foundation. Public sufﬁx list. https://publicsufﬁx.org/, 2020.
[14] Dinsan Francis. Strict extension isolation coming to google chrome.
https://www.chromestory.com/2021/05/strict-extension-isolation/, 2021.
[15] Pietro Frigo, Cristiano Giuffrida, Herbert Bos, and Kaveh Razavi. Grand
pwning unit: Accelerating microarchitectural attacks with the GPU. In
IEEE SP, pages 195–210, 2018.
[16] Daniel Genkin, Lev Pachmanov, Eran Tromer, and Yuval Yarom. Drive-
In ACNS, pages
by key-extraction cache attacks from portable code.
83–102, 2018.
[17] Daniel Genkin, Romain Poussier, Rui Qi Sim, Yuval Yarom, and
Yuanjing Zhao. Cache vs. key-dependency: Side channeling an im-
plementation of Pilsung. IACR Trans. Cryptogr. Hardw. Embed. Syst.,
2020(1):231–255, 2020.
[18] Enes G¨oktas, Kaveh Razavi, Georgios Portokalidis, Herbert Bos, and
Cristiano Giuffrida. Speculative probing: Hacking blind in the Spectre
era. In CCS, pages 1871–1885, 2020.
[25] Noam Hadad and Jonathan Afek.
Overcoming (some) Spec-
tre browser mitigations. https://alephsecurity.com/2018/06/26/spectre-
browser-query-cache/, 2018.
[26] Jann Horn. Speculative execution, variant 4: speculative store bypass.
https://bugs.chromium.org/p/project-zero/issues/detail?id=1528, 2018.
[27] Ralf Hund, Carsten Willems, and Thorsten Holz. Practical timing side
channel attacks against kernel space ASLR. In IEEE SP, pages 191–205,
2013.
[28] Kinsta. Global desktop browser market share for 2021. https://kinsta.
com/browser-market-share/, 2021.
[29] Vladimir Kiriansky and Carl A. Waldspurger. Speculative buffer over-
ﬂows: Attacks and defenses. CoRR, abs/1807.03757, 2018.
[30] Ofek Kirzner and Adam Morrison. An analysis of speculative type
In USENIX Security, Au-
confusion vulnerabilities in the wild.
gust 2021. URL https://www.usenix.org/conference/usenixsecurity21/
presentation/kirzner.
[31] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss,
Werner Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas
Prescher, Michael Schwarz, and Yuval Yarom. Spectre attacks: Exploit-
ing speculative execution. In IEEE SP, pages 1–19, 2019.
[32] David Kohlbrenner and Hovav Shacham. Trusted browsers for uncertain
times. In USENIX Security, pages 463–480, 2016.
[33] David Kohlbrenner and Hovav Shacham. On the effectiveness of
mitigations against ﬂoating-point timing channels. In USENIX Security,
pages 69–81, 2017.
[34] Esmaeil Mohammadian Koruyeh, Khaled N. Khasawneh, Chengyu
Song, and Nael B. Abu-Ghazaleh. Spectre returns! speculation attacks
using the return stack buffer. In WOOT, 2018.
[35] LastPass. How it works. https://www.lastpass.com/how-lastpass-works,
2021.
[36] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner
Haas, Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel
Genkin, Yuval Yarom, and Mike Hamburg. Meltdown: Reading kernel
memory from user space. In USENIX Security, pages 973–990, 2018.
[37] Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and Ruby B. Lee.
Last-level cache side-channel attacks are practical. In IEEE SP, pages
605–622, 2015.
[38] Andrei Lut,as, and Dan Lut,as,. Bypassing KPTI using the speculative
In BlackHat Europe, 2019.
behavior of the SWAPGS instruction.
URL
https://i.blackhat.com/eu-19/Thursday/eu-19-Lutas-Bypassing-
KPTI-Using-The-Speculative-Behavior-Of-The-SWAPGS-Instruction-
wp.pdf.
[39] Giorgi Maisuradze and Christian Rossow. ret2spec: Speculative execu-
tion using return stack buffers. In CCS, pages 2109–2122, 2018.
[40] Andrea Mambretti, Alexandra Sandulescu, Alessandro Sorniotti,
William Robertson, Engin Kirda, and Anil Kurmus. Bypassing memory
arXiv
safety mechanisms through speculative control ﬂow hijacks.
preprint arXiv:2003.05503, 2020.
[41] Ross McIlroy, Jaroslav Sevc´ık, Tobias Tebbi, Ben L. Titzer, and Toon
Verwaest. Spectre is here to stay: An analysis of side-channels and
speculative execution. CoRR, abs/1902.05178, 2019.
[19] Google. Partition allocator.
https://github.com/chromium/chromium/
blob/master/base/allocator/partition allocator/PartitionAlloc.md, 2021.
[20] Google. Spectre. https://leaky.page, 2021.
[21] Ben Gras, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. Trans-
lation leak-aside buffer: Defeating cache side-channel protections with
TLB attacks. In USENIX Security, pages 955–972, 2018.
[22] Daniel Gruss, Raphael Spreitzer, and Stefan Mangard. Cache template
attacks: Automating attacks on inclusive last-level caches. In USENIX
Security, pages 897–912, 2015.
[23] Daniel Gruss, Cl´ementine Maurice, and Stefan Mangard. Rowham-
mer.js: A remote software-induced fault attack in JavaScript. In DIMVA,
pages 300–321, 2016.
[24] Berk G¨ulmezoglu, Andreas Zankl, M. Caner Tol, Saad Islam, Thomas
Eisenbarth, and Berk Sunar. Undermining user privacy on mobile
devices using AI. In AsiaCCS, pages 214–227, 2019.
[42] Benedikt Meurer.
An introduction to speculative optimization
https://ponyfoo.com/articles/an-introduction-to-speculative-
in v8.
optimization-in-v8, 2017.
[43] Ahmad Moghimi, Gorka Irazoqui, and Thomas Eisenbarth. CacheZoom:
How SGX ampliﬁes the power of cache attacks. In CHES, pages 69–90,
2017.
[44] Mozilla. Project Fission. https://wiki.mozilla.org/Project Fission, 2021.
[45] Mozilla. Firefox browser nightly. https://wiki.mozilla.org/Nightly, 2021.
[46] Nick Nguyen. The best Firefox ever. https://blog.mozilla.org/blog/2017/
06/13/faster-better-ﬁrefox/, 2017.
[47] Yossef Oren, Vasileios P. Kemerlis, Simha Sethumadhavan, and Ange-
los D. Keromytis. The spy in the sandbox: Practical cache attacks in
JavaScript and their implications. In CCS, pages 1406–1418, 2015.
[48] Dag Arne Osvik, Adi Shamir, and Eran Tromer. Cache attacks and
countermeasures: The case of AES. In CT-RSA, pages 1–20, 2006.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:13 UTC from IEEE Xplore.  Restrictions apply. 
15713
[49] Colin Percival. Cache missing for fun and proﬁt.
In Proceedings of
BSDCan, 2005. URL https://www.daemonology.net/papers/htt.pdf.
[50] Peter Pessl, Daniel Gruss, Cl´ementine Maurice, Michael Schwarz, and
Stefan Mangard. DRAMA: Exploiting DRAM addressing for cross-CPU
attacks. In USENIX Security, pages 565–581, 2016.
[51] Filip Pizlo.
and Meltdown mean for We-
https://webkit.org/blog/8048/what-spectreand-meltdown-mean-
What Spectre
bKit.
for-webkit/, 2018.
Frank Piessens. LVI: hijacking transient execution through microarchi-
tectural load value injection. In IEEE SP, pages 54–72, 2020.
[71] Stephan van Schaik, Alyssa Milburn, Sebastian ¨Osterlund, Pietro Frigo,
Giorgi Maisuradze, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida.
RIDL: rogue in-ﬂight data load. In IEEE SP, pages 88–105, 2019.
[72] Stephan van Schaik, Marina Minkin, Andrew Kwong, Daniel Genkin,
and Yuval Yarom. CacheOut: Leaking data on Intel CPUs via cache
evictions. In USENIX Security, 2021.
[52] Chromium Project. window.performance.now does not support sub-
https://bugs.chromium.org/p/
millisecond precision on Windows.
chromium/issues/detail?id=158234#c110, 2016.
[73] Pepe Vila, Pierre Ganty, Marco Guarnieri, and Boris K¨opf. CacheQuery:
Learning replacement policies from hardware caches. In PLDI, pages
519–532, 2020.
[53] Hany Ragab, Enrico Barberis, Herbert Bos, and Cristiano Giuffrida.
Rage against
the machine clear: A systematic analysis of machine
clears and their implications for transient execution attacks. In USENIX
Security, 2021.
[54] Hany Ragab, Alyssa Milburn, Kaveh Razavi, Herbert Bos, and Cristiano
Giuffrida. CrossTalk: Speculative data leaks across cores are real. In
IEEE SP, 2021.
[55] Charles Reis, Adam Barth, and Carlos Pizano. Browser security: Lessons
from google chrome: Google chrome developers focused on three key
problems to shield the browser from attacks. Queue, 7(5):3–8, 2009.
[56] Charles Reis, Alexander Moshchuk, and Nasko Oskov. Site isolation:
process separation for web sites within the browser. In USENIX Security,
pages 1661–1678, 2019.
[57] Charlie Reis. Issue 1209417: Add feature for all extensions to require
locked processes. https://bugs.chromium.org/p/chromium/issues/detail?
id=1209417, 2021.
[58] Thomas Ristenpart, Eran Tromer, Hovav Shacham, and Stefan Savage.
Hey, you, get off of my cloud: exploring information leakage in third-
party compute clouds. In CCS, pages 199–212, 2009.
[59] Eyal Ronen, Robert Gillham, Daniel Genkin, Adi Shamir, David Wong,
and Yuval Yarom. The 9 lives of Bleichenbacher’s CAT: new cache
attacks on TLS implementations. In IEEE SP, pages 435–452, 2019.
[60] Michael Schwarz, Cl´ementine Maurice, Daniel Gruss, and Stefan Man-
gard. Fantastic timers and where to ﬁnd them: High-resolution microar-
chitectural attacks in JavaScript. In Financial Cryptography and Data
Security, pages 247–267, 2017.
[61] Michael Schwarz, Moritz Lipp, Daniel Moghimi, Jo Van Bulck, Julian
Stecklina, Thomas Prescher, and Daniel Gruss. ZombieLoad: Cross-
privilege-boundary data sampling. In CCS, pages 753–768, 2019.
[62] Aria Shahverdi, Mahammad Shirinov, and Dana Dachman-Soled.
Database reconstruction from noisy volumes: A cache side-channel
attack on SQLite. In USENIX Security, 2021.
[63] Igor Sheludko and Santiago Aboy Solanes. Pointer compression in V8.
https://v8.dev/blog/pointer-compression, 2020.
[64] Anatoly Shusterman, Lachlan Kang, Yarden Haskal, Yosef Meltser, Pra-
teek Mittal, Yossi Oren, and Yuval Yarom. Robust website ﬁngerprinting
through the cache occupancy channel. In USENIX Security, pages 639–
656, 2019.
[65] Anatoly Shusterman, Ayush Agarwal, Sioli O’Connell, Daniel Genkin,
Yossi Oren, and Yuval Yarom. Prime+Probe 1, JavaScript 0: Overcoming
browser-based side-channel defenses. In USENIX Security, 2021.
[66] Marco Squarcina, Mauro Tempesta, Lorenzo Veronese, Stefano
Calzavara, and Matteo Maffei. Can i take your subdomain? exploring
same-site attacks in the modern web. In USENIX Security, 2021.
[67] H. Tankovska. Combined desktop and mobile visits to Tumblr.com from
May 2019 to January 2021. https://www.statista.com/statistics/261925/
unique-visitors-to-tumblrcom/, 2021.
[68] V8 team.
Launching ignition and turbofan.
launching-ignition-and-turbofan, 2017.
https://v8.dev/blog/
[69] Jo Van Bulck, Marina Minkin, Oﬁr Weisse, Daniel Genkin, Baris
Kasikci, Frank Piessens, Mark Silberstein, Thomas F. Wenisch, Yuval
Yarom, and Raoul Strackx. Foreshadow: Extracting the keys to the
intel SGX kingdom with transient out-of-order execution. In USENIX
Security, pages 991–1008, 2018.
[70] Jo Van Bulck, Daniel Moghimi, Michael Schwarz, Moritz Lipp, Marina
Minkin, Daniel Genkin, Yuval Yarom, Berk Sunar, Daniel Gruss, and
[74] Wenhao Wang, Guoxing Chen, Xiaorui Pan, Yinqian Zhang, XiaoFeng
Wang, Vincent Bindschaedler, Haixu Tang, and Carl A. Gunter. Leaky
cauldron on the dark land: Understanding memory side-channel hazards
in SGX. In CCS, 2017.
[75] Yuanzhong Xu, Weidong Cui, and Marcus Peinado. Controlled-channel
attacks: Deterministic side channels for untrusted operating systems. In
IEEE SP, 2016.
[76] Mengjia Yan, Christopher W. Fletcher, and Josep Torrellas. Cache
telepathy: Leveraging shared resource attacks to learn DNN architec-
tures. In USENIX Security, pages 2003–2020, 2020.
[77] Yuval Yarom and Katrina Falkner. FLUSH+RELOAD: A high resolution,
In USENIX Security, pages
low noise, L3 cache side-channel attack.
719–732, 2014.
[78] Andy Zeigler. SharedArrayBuffer updates in Android Chrome 88 and
desktop Chrome 91. https://docs.microsoft.com/en-us/archive/blogs/ie/
ie8-and-loosely-coupled-ie-lcie, 2008.
A. Reading Login Information
APPENDIX
Going beyond information present on the document’s DOM,
we repeated our attack on our university’s website, but this
time targeting session cookies.
Attack Setup. We replicated the previous scenario’s two-tab
setup, where the Spook.js page (https://web.dpt.example.edu/
∼user/), and internal portal page (https://portal.example.edu/,
after logging in) were rendered using two different tabs but
shared the same Chrome rendering process.
Experimental Results.
Our initial approach was to use
Chrome’s debugging tools in order to locate the metadata
of the document.cookie object and dump the memory
pointed to by its back-pointer, as shown in Figure 1.
While we were able to read cookies associated with the portal
page, the session cookie containing login information was
marked as HttpOnly, and thus normally inaccessible from
JavaScript. However, we discovered a different region in the
address space of Chrome’s rendering process that contains the
session cookie, and successfully dumped it with Spook.js. See
Figure 16.
Leakage Root Cause. We note that our observations regard-
ing HttpOnly cookies seem to contradict an explicit security
goal of Chrome’s strict site isolation, as Google’s strict site
isolation paper explicitly states that HttpOnly cookies are
not delivered to renderer processes [56, Section 5.1]. Reporting
our ﬁndings to Google, this was discovered to be a bug in
Chrome, where the debugging tools accidentally copy the
cookie’s contents into the address space of the rendering
process. While this does make our cookie extraction attack
weaker, we note that this attack is still dangerous, as the user
can be enticed to manually open Chrome’s developer tools.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:13 UTC from IEEE Xplore.  Restrictions apply. 
16714
Figure 16: (top) Session cookie for the university’s portal page
displayed using Chrome’s developer tools. (bottom) Leakage
of the session cookie.
B. Value Tagging
Along with Pointer Compression, the V8 JavaScript engine
uses a technique called Value Tagging [63] that allows code
to operate on integers without requiring any indirection. It
achieves this by squeezing integers into the same 32-bit space
occupied by pointers to objects. The least signiﬁcant bit is used
to distinguish whether the 32-bit space encodes an integer or a
pointer to an object. For integers, the least signiﬁcant bit is set
to zero and the remaining 31 bits encode a 31-bits integer. For
pointers to objects, the JavaScript engine ensures that objects
are always aligned to a multiple of two bytes (i.e. the least
signiﬁcant bit of an object pointer is always zero). To encode
a pointer the least signiﬁcant bit is set to one, and the offset for
any access involving the pointer is decremented by one. This
encoding allows code that performs operations on integers to
avoid indirection and does not require an additional ﬁeld to
identify the type of the value.
We abuse Value Tagging to directly set the memory of
an object by storing 31-bit integers in speciﬁc properties of
the object. However, Value Tagging represents two practical
challenges for our attack. The ﬁrst is that we must undo any
encoding applied to values, this can be done by shifting any
desired value to the right by one bit. The second is that we
cannot set the least signiﬁcant bit of any property. However,
because we use two properties to represent a 64-bit address
there are two bits of the address bit 1 and bit 33 that we cannot
set, these correspond to the least signiﬁcant bit of each prop-
erty. We overcome this challenge with ext_pointer and
index. We access addresses that have bit 1 set by using an
index when performing an array access on our type-confused
object. To accesses addresses that have bit 33 set, we abuse
the addition of ext_pointer with base_pointer and
index when performing an array access to cause an overﬂow
that sets bit 33. We set ext_pointer to 0X7FFFFFFF,
after encoding it will have the value 0XFFFFFFFE, and we set
index to 2. When these values are added together it causes an
overﬂow and sets bit 33 of the address during the array access.
These ideas can be combined to access addresses where bit 33
and bit 1 are set, we follow the same procedure to set bit 33
but set index to 3.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:13 UTC from IEEE Xplore.  Restrictions apply. 
17715