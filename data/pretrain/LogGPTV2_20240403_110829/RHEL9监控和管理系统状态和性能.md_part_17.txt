::: orderedlist
**步骤**
1.  登录到 Grafana Web UI。
2.  在 Grafana [**Home**]{.strong} 页面中，点 [**Add your first data
    source**]{.strong}。
3.  在 [**Add data source**]{.strong} 窗格中，在 [**Filter by name or
    type**]{.strong} 文本框中键入 vector，然后单击 [**PCP
    向量**]{.strong}。
4.  在 [**Data Sources / PCP Vector**]{.strong} 窗格中，执行以下操作：
    ::: orderedlist
    1.  在 [**URL**]{.strong} 字段中添加
        `http://localhost:44322`{.literal}，然后点 [Save &
        Test]{.guibutton}。
    2.  点 [Dashboards 标签页]{.guimenu} → [Import]{.guisubmenu} → [PCP
        向量：主机
        Overview]{.guimenuitem}，以查看包含任何有用指标的概览的仪表板。
        ::: figure
        []{#setting-up-graphical-representation-of-pcp-metrics_monitoring-and-managing-system-status-and-performance.html#idm140048843460400}
        **图 8.7. PCP 向量：主机概述**
        ::: figure-contents
        ::: mediaobject
        ![PCP 向量主机概述](images/pcp-vector-host-overview.png)
        :::
        :::
        :::
    :::
5.  在菜单中，将鼠标悬停在 [![pcp plugin in
    grafana](images/pcp-plugin-in-grafana.png)]{.inlinemediaobject}
    [**Performance Co-Pilot**]{.strong} 插件上，然后单击 [**PCP Vector
    Checklist**]{.strong}。
    在 PCP 检查列表中，点 [![pcp vector checklist troubleshooting
    doc](images/pcp-vector-checklist-troubleshooting-doc.png)]{.inlinemediaobject}
    帮助或 [![pcp vector checklist
    warning](images/pcp-vector-checklist-warning.png)]{.inlinemediaobject}
    警告图标查看相关的故障排除或参考链接。
    ::: figure
    []{#setting-up-graphical-representation-of-pcp-metrics_monitoring-and-managing-system-status-and-performance.html#idm140048830781696}
    **图 8.8. Performance Co-Pilot / PCP 向量清单**
    ::: figure-contents
    ::: mediaobject
    ![PCP 向量清单](images/pcp-vector-checklist.png)
    :::
    :::
    :::
:::
:::
::: section
::: titlepage
# []{#setting-up-graphical-representation-of-pcp-metrics_monitoring-and-managing-system-status-and-performance.html#troubleshooting-grafana-issues_setting-up-graphical-representation-of-pcp-metrics}Grafana 问题故障排除 {.title}
:::
本节论述了如何对 Grafana 问题进行故障排除，如 Grafana
不会显示任何数据，仪表板是黑色或类似的问题。
::: itemizedlist
**步骤**
-   通过执行以下命令，验证 `pmlogger`{.literal}
    服务是否已启动并正在运行：
    ``` screen
    $ systemctl status pmlogger
    ```
-   运行以下命令，验证是否在磁盘中创建或修改了文件：
    ``` literallayout
    $ ls /var/log/pcp/pmlogger/$(hostname)/ -rlt
    total 4024
    -rw-r--r--. 1 pcp pcp   45996 Oct 13  2019 20191013.20.07.meta.xz
    -rw-r--r--. 1 pcp pcp     412 Oct 13  2019 20191013.20.07.index
    -rw-r--r--. 1 pcp pcp   32188 Oct 13  2019 20191013.20.07.0.xz
    -rw-r--r--. 1 pcp pcp   44756 Oct 13  2019 20191013.20.30-00.meta.xz
    [..]
    ```
-   运行以下命令验证 `pmproxy`{.literal} 服务是否正在运行：
    ``` screen
    $ systemctl status pmproxy
    ```
-   通过查看 `/var/log/pcp/pmproxy/pmproxy.log`{.literal}
    文件确定其包括一些内容来验证 `pmproxy`{.literal}
    是否正在运行、时间序列支持是否被启用以及到 Redis 的连接：
    ``` screen
    pmproxy(1716) Info: Redis slots, command keys, schema version setup
    ```
    在这里，[**1716**]{.strong} 是 pmproxy 的 PID，对于每次调用
    `pmproxy`{.literal} 时，将有所不同。
-   运行以下命令，验证 Redis 数据库是否包含任何密钥：
    ``` screen
    $ redis-cli dbsize
    (integer) 34837
    ```
-   通过执行以下命令，验证 Redis 数据库和 `pmproxy`{.literal} 中的任何
    PCP 指标是否能够访问它们：
    ``` literallayout
    $ pmseries disk.dev.read
    2eb3e58d8f1e231361fb15cf1aa26fe534b4d9df
    $ pmseries "disk.dev.read[count:10]"
    2eb3e58d8f1e231361fb15cf1aa26fe534b4d9df
        [Mon Jul 26 12:21:10.085468000 2021] 117971 70e83e88d4e1857a3a31605c6d1333755f2dd17c
        [Mon Jul 26 12:21:00.087401000 2021] 117758 70e83e88d4e1857a3a31605c6d1333755f2dd17c
        [Mon Jul 26 12:20:50.085738000 2021] 116688 70e83e88d4e1857a3a31605c6d1333755f2dd17c
    [...]
    ```
    ``` literallayout
    $ redis-cli --scan --pattern "*$(pmseries 'disk.dev.read')"
    pcp:metric.name:series:2eb3e58d8f1e231361fb15cf1aa26fe534b4d9df
    pcp:values:series:2eb3e58d8f1e231361fb15cf1aa26fe534b4d9df
    pcp:desc:series:2eb3e58d8f1e231361fb15cf1aa26fe534b4d9df
    pcp:labelvalue:series:2eb3e58d8f1e231361fb15cf1aa26fe534b4d9df
    pcp:instances:series:2eb3e58d8f1e231361fb15cf1aa26fe534b4d9df
    pcp:labelflags:series:2eb3e58d8f1e231361fb15cf1aa26fe534b4d9df
    ```
-   运行以下命令，验证 Grafana 日志中是否有错误：
    ``` literallayout
    $ journalctl -e -u grafana-server
    -- Logs begin at Mon 2021-07-26 11:55:10 IST, end at Mon 2021-07-26 12:30:15 IST. --
    Jul 26 11:55:17 localhost.localdomain systemd[1]: Starting Grafana instance...
    Jul 26 11:55:17 localhost.localdomain grafana-server[1171]: t=2021-07-26T11:55:17+0530 lvl=info msg="Starting Grafana" logger=server version=7.3.6 c>
    Jul 26 11:55:17 localhost.localdomain grafana-server[1171]: t=2021-07-26T11:55:17+0530 lvl=info msg="Config loaded from" logger=settings file=/usr/s>
    Jul 26 11:55:17 localhost.localdomain grafana-server[1171]: t=2021-07-26T11:55:17+0530 lvl=info msg="Config loaded from" logger=settings file=/etc/g>
    [...]
    ```
:::
:::
:::
[]{#setting-the-disk-scheduler_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#setting-the-disk-scheduler_monitoring-and-managing-system-status-and-performance.html#setting-the-disk-scheduler_monitoring-and-managing-system-status-and-performance}第 9 章 设置磁盘调度程序 {.title}
:::
磁盘调度程序负责对提交至存储设备的 I/O 请求进行排序。
您可以通过几种不同方式配置调度程序：
::: itemizedlist
-   使用 [**TuneD**]{.strong} 设置调度程序，如[使用 TuneD
    设置磁盘调度程序](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9-beta/html/monitoring_and_managing_system_status_and_performance/setting-the-disk-scheduler_monitoring-and-managing-system-status-and-performance#setting-the-disk-scheduler-using-tuned_setting-the-disk-scheduler){.link}中所述
-   使用 `udev`{.literal} 规则设置调度程序，如[使用 udev
    规则设置磁盘调度程序](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9-beta/html/monitoring_and_managing_system_status_and_performance/setting-the-disk-scheduler_monitoring-and-managing-system-status-and-performance#setting-the-disk-scheduler-using-udev-rules_setting-the-disk-scheduler){.link}中所述
-   在运行中的系统上临时更改调度程序，如临时
    [为特定磁盘设置调度程序](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9-beta/html/monitoring_and_managing_system_status_and_performance/setting-the-disk-scheduler_monitoring-and-managing-system-status-and-performance#temporarily-setting-a-scheduler-for-a-specific-disk_setting-the-disk-scheduler){.link}
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在 Red Hat Enterprise Linux 9
中，块设备只支持多队列调度。这可让块层性能针对使用快速固态驱动器（SSD）和多核系统进行正常扩展。
Red Hat Enterprise Linux 7
和更早的版本中的传统、单一队列调度程序已被删除。
:::
::: section
::: titlepage
# []{#setting-the-disk-scheduler_monitoring-and-managing-system-status-and-performance.html#available-disk-schedulers_setting-the-disk-scheduler}可用磁盘调度程序 {.title}
:::
Red Hat Enterprise Linux 9 中支持以下多队列磁盘调度程序：
::: variablelist
[`none`{.literal}]{.term}
:   实施第一出(FIFO)调度算法。它将请求合并到通用块层，并通过一个简单的最近缓存来合并。
[`mq-deadline`{.literal}]{.term}
:   尝试为请求到达调度程序的时间点提供有保证的延迟。
    `mq-deadline`{.literal} 调度程序将排队的 I/O
    请求分为读取或写入批处理，然后调度它们以增加逻辑块寻址(LBA)顺序执行。默认情况下，读取批处理的优先级高于写入批处理，因为应用程序更有可能阻止读
    I/O 操作。在 `mq-deadline`{.literal}
    批处理后，它会检查写操作在处理器时间耗尽的时间，并根据情况调度下一个读取或写入批处理。
    这个调度程序适用于大多数用例，特别是那些写入操作是异步的。
[`bfq`{.literal}]{.term}
:   以桌面系统和互动任务为目标。
    `bfq`{.literal}
    调度程序可确保任何单个应用程序都不会使用所有带宽。实际上，存储设备总是像它们处于闲置时一样进行响应。在其默认配置中，`bfq`{.literal}
    注重提供最低延迟，而不是达到最大吞吐量。
    `BFQ`{.literal} 基于 `cfq`{.literal}
    代码。它不会为每个进程授予固定时间片段，但会为进程分配一个扇区数衡量的
    [*budget（预算）*]{.emphasis}。
    在复制大型文件时，这个调度程序不适用。
[`kyber`{.literal}]{.term}
:   调度程序调整自身，以通过计算提交到块 I/O 层的每个 I/O
    请求的延迟来实现延迟目标。您可以为读取配置目标延迟，如 cache-misses
    和同步写入请求。
    此调度程序适用于快速设备，如 NVMe、SSD 或其他低延迟设备。
:::
:::
::: section
::: titlepage
# []{#setting-the-disk-scheduler_monitoring-and-managing-system-status-and-performance.html#different-disk-schedulers-for-different-use-cases_setting-the-disk-scheduler}不同用例的磁盘调度程序 {.title}
:::
根据系统执行的任务，建议在进行任何分析和调优任务前，将以下磁盘调度程序作为基准：
::: table
[]{#setting-the-disk-scheduler_monitoring-and-managing-system-status-and-performance.html#idm140048831155728}
**表 9.1. 适用于不同用例的磁盘调度程序**
::: table-contents
  使用案例                                   磁盘调度程序
  ------------------------------------------ ----------------------------------------------------------------------------------------------------
  传统的使用 SCSI 接口的 HDD                 使用 `mq-deadline`{.literal} 或 `bfq`{.literal}。
  高性能 SSD 或具有快速存储的 CPU 绑定系统   使用 `none`{.literal}，特别是在运行企业级应用程序时。或者，使用 `kyber`{.literal}。
  桌面或互动任务                             使用 `bfq`{.literal}。
  虚拟客户端                                 使用 `mq-deadline`{.literal}。使用可以多队列的主机总线适配器(HBA)驱动程序，使用 `none`{.literal}。
:::
:::
:::
::: section
::: titlepage
# []{#setting-the-disk-scheduler_monitoring-and-managing-system-status-and-performance.html#the-default-disk-scheduler_setting-the-disk-scheduler}默认磁盘调度程序 {.title}
:::
块设备使用默认的磁盘调度程序，除非您指定了另一个调度程序。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
具体来说，对于 `非易失性内存 Express(NVMe)`{.literal}
块设备，默认调度程序为 `none`{.literal}，红帽建议不更改此设备。
:::
内核会根据设备类型选择默认磁盘调度程序。自动选择调度程序通常是最佳设置。如果您需要不同的调度程序，红帽建议使用
`udev`{.literal} 规则或 [**TuneD**]{.strong}
应用程序来配置它。匹配所选设备并只为那些设备切换调度程序。
:::
::: section
::: titlepage
# []{#setting-the-disk-scheduler_monitoring-and-managing-system-status-and-performance.html#determining-the-active-disk-scheduler_setting-the-disk-scheduler}确定活跃磁盘调度程序 {.title}
:::
此流程决定了哪个磁盘调度程序目前在给定块设备中活跃。
::: itemizedlist
**步骤**
-   读取 `/sys/block/设备/queue/scheduler`{.literal} 文件的内容：
    ``` screen
    # cat /sys/block/device/queue/scheduler
    [mq-deadline] kyber bfq none
    ```
    在文件名中，将 [*device*]{.emphasis} 替换为块设备名称，如
    `sdc`{.literal}。
    活跃的调度程序列在方括号中(`[ ]`{.literal})。
:::
:::
::: section
::: titlepage
# []{#setting-the-disk-scheduler_monitoring-and-managing-system-status-and-performance.html#setting-the-disk-scheduler-using-tuned_setting-the-disk-scheduler}使用 TuneD 设置磁盘调度程序 {.title}
:::
此流程创建并启用 [**TuneD**]{.strong}
配置集，该配置集为所选块设备设置给定磁盘调度程序。这个设置会在系统重启后保留。
在以下命令和配置中替换：
::: itemizedlist
-   带有块设备名称的 [*device*]{.emphasis}，如 `sdf`{.literal}
-   带有您要为该设备设置的磁盘调度程序的
    [*selected-scheduler*]{.emphasis}，例如 `bfq`{.literal}
:::
::: itemizedlist
**先决条件**
-   `tuned`{.literal} 服务已安装并启用。详情请参阅[安装和启用
    TuneD](#getting-started-with-tuned_monitoring-and-managing-system-status-and-performance.html#installing-and-enabling-tuned_getting-started-with-tuned "安装并启用 TuneD"){.link}。
:::
::: orderedlist
**步骤**
1.  可选：选择您的配置集将基于的一个现有 [**TuneD**]{.strong}
    配置集。有关可用配置集列表，请参阅 [RHEL 提供的 TuneD
    配置集](#getting-started-with-tuned_monitoring-and-managing-system-status-and-performance.html#tuned-profiles-distributed-with-rhel_getting-started-with-tuned "RHEL 提供的调优配置集"){.link}。
    要查看哪个配置集当前处于活跃状态，请使用：
    ``` screen
    $ tuned-adm active
    ```