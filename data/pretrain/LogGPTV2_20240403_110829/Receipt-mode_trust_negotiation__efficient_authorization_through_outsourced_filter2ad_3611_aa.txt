title:Receipt-mode trust negotiation: efficient authorization through outsourced
interactions
author:Andrew K. Adams and
Adam J. Lee and
Daniel Moss&apos;e
Receipt-Mode Trust Negotiation: Efﬁcient Authorization
Through Outsourced Interactions
Andrew K. Adams†‡, Adam J. Lee‡, Daniel Mossé‡
† Pittsburgh Supercomputing Center
‡ Department of Computer Science, University of Pittsburgh
PI:EMAIL, {adamlee, mosse}@cs.pitt.edu
ABSTRACT
In trust negotiation approaches to authorization, previously unac-
quainted entities establish trust in one another gradually via the bi-
lateral and iterative exchange of policies and digital credentials. Al-
though this affords resource providers with an expressive means of
access control for open systems, the trust negotiation process incurs
non-trivial computational and communications costs. In this paper,
we propose Receipt-Mode Trust Negotiation (RMTN) as a means
of mitigating the performance penalties on servers that use trust
negotiation. RMTN provides a means of off-loading the major-
ity of the trust negotiation process to delegated receipt-generating
helper servers. RMTN ensures that helpers produce correct trust
negotiation protocol receipts, and that the helpers are incapable of
impersonating the resource server outside of the RMTN protocol.
We describe an initial implementation of our RMTN protocol on
a Linux testbed, discuss the security of this protocol, and present
experimental results indicating that the receipt-mode protocol does
indeed enhance the performance of resource servers that rely on
trust negotiation approaches to authorization.
Keywords
Security, optimization, load balancing, trust negotiation
1.
INTRODUCTION
In open computing systems where resources are shared across
organizational boundaries, users and resource providers may not
always have trust relationships that are established a priori. As
such, traditional identity-based authorization mechanisms are un-
desirable. In trust negotiation approaches to authorization (e.g., [7,
15, 17, 20]), access control policies are expressed as declarative
speciﬁcations of the attributes that must be possessed by a principal
in order to be granted access to a particular resource. Attributes are
encoded in unforgeable and veriﬁable digital credentials issued by
third party certiﬁers like businesses, professional organizations, or
governmental bodies. Since sensitive credentials may themselves
be protected by access control policies of their own, a trust nego-
tiation session is a bilateral and iterative exchange of policies and
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
Copyright 20XX ACM X-XXXXX-XX-X/XX/XX ...$10.00.
credentials with the end goal of establishing trust between previ-
ously unacquainted principals.
Although trust negotiation offers an attractive and expressive means
of access control for open system environments, its utility comes
at the cost of non-trivial computational and communication over-
heads. In particular, servers that rely on trust negotiation approaches
to access control must not only serve the content that they pro-
vide, but also manage the state for all ongoing negotiation sessions.
Processing many concurrent trust negotiation sessions can quickly
overload such a server and can prevent it from carrying out its pri-
mary task, namely serving content to authorized users. The stan-
dard solution to this type of problem is load-balancing: replicat-
ing a service over additional similar hardware and distributing the
workload across these additional servers. Unfortunately, naively
replicating security systems gives rise to a variety of complica-
tions. For instance, are access control policies duplicated across
all servers? If so, how are they kept consistent over time? Is the
server’s credential replicated? If so, how can identity uniqueness
still be maintained? When a principal is authorized by one server,
is her proof of authorization transferable to all servers? If so, how
is this authorization synchronized?
A very constrained version of load-balancing can be employed
in which a principal is locked to the same server for authorization
and resource access for every request (i.e., load-balancing keyed on
principal id and resource). However, this defeats the inherent qual-
ities of pooled server resources: redundancy and optimal workload
distribution. Furthermore, it makes little sense to replicate the core
functionality of a resource server to compensate for overheads in-
duced solely by its authorization subsystem. Ideally, it would be
desirable to replicate only the security functionality that is actually
creating the performance bottleneck, and to do so in a fashion that
mitigates potential avenues of attack enabled by the replication of
security infrastructure.
Receipt-mode Trust Negotiation (RMTN) pursues exactly this
strategy for enhancing the performance of the access-control sys-
tem. The objective of RMTN is to reduce the server’s access control
overheads by off-loading the expensive portions of the trust negoti-
ation process to remote helper servers (also called helper nodes or
simply helpers), while providing high assurance that the remotely
negotiated trust was performed correctly. That is, RMTN allows
the server to focus on serving content and simply verify that the
trust negotiation process was carried out correctly and securely.
Additionally, RMTN allows the off-loaded trust negotiation pro-
cesses to be load-balanced (in any manner) to further improve the
performance of the access-control system. Finally, RMTN lever-
ages economics in load-balancing, as the hardware to process trust
negotiation does not necessarily have to be comparable to the hard-
ware required to serve resource requests. In exploring the RMTN
process, we make the following contributions:
• We present a RMTN mechanism that reduces the server-side
overheads of the trust negotiation process, thereby allowing
servers to focus solely on serving resource requests.
• We show that our protocol is secure. This entails showing
that two properties are respected: the server can verify that
the trust negotiation process carried out by a delegated helper
node was in fact executed correctly, and that helper nodes
cannot impersonate the resource server in any context other
than executing the RMTN protocol, including being hosted
in a hostile environment.
• We demonstrate that our Linux-based prototype RMTN sys-
tem does, in fact, allow servers to safely and securely serve
content in a scalable manner while leveraging trust negotia-
tion to authorize client resource requests.
The rest of this paper is organized as follows. In Section 2, we
brieﬂy explain the problems associated with naive implementations
of trust negotiation, and present a set of desirable qualities for sys-
tems designed to load-balance trust negotiation sessions. Section
3 discusses the principals within the system, and 4 presents the
Receipt-Mode Trust Negotiation protocol and its high-level prop-
erties. In Section 5, we describe the performance of an implemen-
tation of RMTN for the World Wide Web. We then discuss related
work in Section 6 and present our conclusions and directions for
future work in Section 7.
2. SYSTEM REQUIREMENTS
Trust negotiation is expensive: state must be kept between all
participating principals, the process is sequential, and trust negoti-
ation requires extensive asymmetric cryptographic operations (e.g.,
digital signatures and signature veriﬁcations). Not surprisingly, off-
loading trust negotiation can spare a resource server from having to
expend cycles during trust negotiation. However, distributing the
security components of a system presents new challenges. For in-
stance, how do we ensure that the off-loaded trust negotiation was
performed correctly? Likewise, how do we ensure that delegated
components cannot maliciously masquerade as the server? Can
the system scale in a manner consistent with typical load-balancing
schemes? Is it too burdensome to implement? At a minimum, our
new system must exhibit the following properties:
• Correctness. An off-loaded security system must be able
to produce the same access control decisions that the non-
enhanced system produces when using the same policy. That
is, for all principals, the access control decision generated
must be consistent regardless of whether an access control is
made locally or off-loaded to another component. If such a
system is unable to produce correct results, resources could
be compromised.
• Security. An off-loaded security system should be no less
secure than the original system. Current trust negotiation
mechanisms provide non-repudiation and prevent against cer-
tiﬁcate misuse (both fraud and privacy). Failing to provide
these same security guarantees is unacceptable.
• Efﬁciency. An off-loaded security system should be man-
ageable, but more speciﬁcally, such a system needs to be
more efﬁcient (economically and with resources) than naive
load-balancing/replication and easy to integrate with existing
services. Failing to provide an efﬁcient system will result in
non-deployment.
• Scalability. An off-loaded security system should exhibit
performance characteristics that scale at least as well as canon-
ical load-balancing mechanisms (i.e., full replication).
If
such a system fails to be scalable, resources will be wasted.
This is the minimum set of desired properties for off-loaded se-
curity systems, as the particular application domain can always add
further specialized requirements.
3. SYSTEM ARCHITECTURE
In this section, we ﬁrst describe the players in our proposed pro-
tocol and then discuss the nuance associated with delegating the
control of trust negotiation sessions to one or more helper servers.
3.1 Principals and Assumptions
In an open system, several principals can interact in an effort
to consume resources that are protected by authorization policies
governing their access. The following describes the participants in
our proposed RMTN protocols, including their job functions and
any assumptions regarding their trust.
Client A client seeks access to a policy-protected resource through
the use of applications under its control. The client is capa-
ble of entering into a trust negotiation session in an attempt
to satisfy the access control policies protecting the resource.
The client’s trust negotiation agent (a process executing at
the trust negotiation) has access to the client’s attribute cer-
tiﬁcates and private keys.
Server A server is responsible for serving content or resources that
may be protected by access control policies. The server’s
trust negotiation agent has access to the policies protecting
its resources, as well as the certiﬁcates and private keys de-
scribing the attributes of the server. The server does not in-
herently trust clients, and will grant client access to a par-
ticular resource if and only if the client can present a set of
credentials that satisfy the policy protecting the requested re-
source (via trust negotiation).
Helper Server A helper server is installed by a server admin that
wishes to off-load its trust negotiation process. In particular,
the helper remotely replaces the software trust negotiation
agent that would otherwise run on the server. The helper
has access to a copy of the policies that the server uses to
protect its resources, and the helper operates using restricted
versions of the server’s credentials (see Section 3.2).
3.2 Provisioning Helpers
The notion of using a helper server to facilitate trust negotiation
session may, at ﬁrst blush, appear to violate basic security princi-
ples. In particular, helper servers require access to every credential
used by the server, yet conventional wisdom says that replicating
secrets leads to a higher likelihood that these secrets will be com-
promised. And indeed, if the server’s policies and credentials are
simply replicated, this would be the case: any compromised or ma-
licious helper could impersonate the server. This is clearly prob-
lematic. To address this issue, we borrow the concept of proxy
certiﬁcates [18] from the grid computing literature.
Proxy certiﬁcates were originally developed to allow a user’s cer-
tiﬁcates and keys to be managed by third parties during the exe-
cution of long-running processes. Rather than requiring a user to
surrender control of her long-term identity certiﬁcate, she can in-
stead create a temporary (proxy certiﬁcate, private key) pair. The
limited-lifetime proxy certiﬁcate is bound to the long term certiﬁ-
cate, and indicates that the owner of the proxy certiﬁcate has the
ability to act on behalf of the owner of the long-term certiﬁcate. An
optional policy ﬁeld can be used to indicate any restrictions on ex-
actly how the owner of the proxy certiﬁcate “speaks for” the owner
of the long-term certiﬁcate.
In our approach, we assume that helper servers are provisioned
with proxy credentials bound to the server’s long-term attribute
credentials, rather than the server’s sensitive attribute credentials
themselves. Further, a critical X.509 extension can be used to indi-
cate that these proxy certiﬁcates are to be used by RMTN servers
only. Since this extension is critical, nodes that do not understand
how to interpret the extension should reject the credential outright,
as deﬁned in the X.509 speciﬁcation [1]. Nodes that do understand
this extension will only allow the proxy certiﬁcate to be used in re-
sponse to a RMTN request. This use of proxy certiﬁcates is critical
to our ability to safely provision helper nodes without introduc-
ing security vulnerabilities into the system (e.g., malicious helpers
compromising the long-term credentials of the server).
4. PROTOCOL OVERVIEW
In this section, we provide an overview of our proposed RMTN
protocol. We begin with a discussion of each RMTN message type,
describe the basic protocol, and then present a performance analy-
sis of the client and server effort.
4.1 Protocol Philosophy and Basic Messages
Several system implementations for providing TN services ex-
ist today (e.g., TrustBuilder2 [13], Trust-X [7], PP-Trust-X [17],
and PeerTrust [15]). It is desirable for the RMTN protocol to lever-
age existing TN applications and, therefore, conscious decision was
made to ensure that the RMTN protocol is as agnostic as possible
to the TN messages generated by the application libraries. To this
end, our RMTN protocols are designed to facilitate and orchestrate
control transfers between the application-level protocols running
on some server to one or more distributed trust negotiation agents.
As such, the actual trust negotiation protocol implemented by the
agents can be left entirely unmodiﬁed, and the RMTN protocol re-
quires that only two new message types be speciﬁed:
RMTN Redirect (RMTN-RDR) This message allows an application-
level protocol running on some server to inform a remote
client that a transfer of control to some remote trust negotia-
tion helper is necessary.
RMTN Receipt (RMTN-RCP) This message allows the RMTN