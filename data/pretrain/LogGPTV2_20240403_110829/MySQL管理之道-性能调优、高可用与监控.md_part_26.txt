时间成本和风险上的代价都很低；
SQL优化案例分析
---
## Page 193
翻到该页查看。
能够取得select的artist_id列，不必读取数据行（只要你的SELECT字段正好就是索引，那
子（如图5-57所示）：
是：我要在书里查找一个内容，由于目录写得很详细，我在目录中就获取到了，不需要再
么就用到了覆盖索引)，通过覆盖索引，可以减少I/O，提高性能。简单地说，覆盖索引就
一章也有介绍，这里不再多说。
这里artist_id是主键（聚集索引），叶子节点上保存了数据（InnoDB引擎），从索引中就
那么这种情况下要如何处理呢，可通过覆盖索引来进一步优化，如图5-58所示。
在MySQL里，like'xxx%'可以用到索引，但 like"%xxx%'却不行。比如，下面这个例
mysql>deletetfromtjoin(selectid fromt where iddeletefromt whereid in(select*from(selectid fromtwhereiddeletefromtwhereidin(selectidfromtwhereid
11SIMPLE
11SIHPLE
|artist|index|NULL
|artist|ALL
INULL
图5-58覆盖索引
图5-57全表扫描
name|257
1NULLINULL
|NULL|589410|Using where
|Extra
|rows
第5章性能调优·179
|Extra
---
## Page 194
180
然后再扫描出后10行，相当于进行一个全表扫描，显然效率不高。我们来看看优化方法，
●第二部分故障诊断与性能优化篇
行时间。
在上面的 SQL语句中，虽然用上了id索引，但要从第一行开始起定位至99 999行，
优化完成之后，我们对SQL的执行时间进行一下对比，图5-59是优化之前的SQL执
10rows in set (0.07sec)
mysql> selectSQL_NO_CACHE*from test1orderbyid limit 99999,10;
看下面的limit查询：
案例一
在limit分页优化方面，下面会用两个案例来进行说明。
3.limit分页优化
图5-60是优化后的SQL执行时间。
qe丨10000丨T0000
oqe丨00000丨0000
id|tid|name|
100009|100009|abc
100002|100002|abc
-----------+-----------+------+
100006|100006|
100005|100005|
100004|100004|
100003|100003|a
mysql>select count（*) from artist where name like'%Queen%
row in set (17.12 sec)
count(*)
row in set(8.31 sec)
280
280
图5-60
图5-59
artista
优化前耗时
优化后耗时
rt1
where name like'%Queen%'）
join
---
## Page 195
（从334570行数据开始读取后面的10条记录）。
行，
如下：
下面是某房地产网站的开发人员写的一条SQL，据了解是为了读取最老的新闻标题
先来看一下这个SQL的执行情况，如图5-63所示。
优化器explain的执行计划情况如图5-62所示。
图5-61是索引情况。
相当于一个range 范围扫描。
第二种写法比第一种快了7倍，利用id索引直接定位100000行，然后再扫描出后10
mysql>select SQL_NO_CACHE*from test1 where id>=100000 orderby id limit 10;
selectid,title,createdatefrom表名orderbycreatedateasclimit334570,10;
案例二：给某房地产网优化
10 rows in set (0.00 sec)
qe|00000|00000
|id|tid|name|
100009|100009|abc
|800000800000
100007|100007|abc
100006|100006
100005|100005
100004|100004
100003|100003
100002|100002
IMPLE
|abc
abc
一
图5-62全表扫描
NULL
图5-61索引
createdate (createdate)
index
(ehild_id)
NLL
order by ereatedate asc limit
key_len
NELL
NULL
355069
rows
第5章性能调优·181
334570.
---
## Page 196
182·第二部分故障诊断与性能优化篇
59秒。
句的变通，可以达到一定程度速度的提升，例如，
是优化后的情况。
条记录id，然后采用表内连接的方法，取出后10条，在通过这种方式进行优化后，图5-64
在下面的SQL语句中，第一种写法耗时了6分40秒，改为辅助索引后耗时为2分
1 row in set (6 min 40.36 sec)
mysql>select count(*)from UP_User;
案例一：count（辅助索引）快于count(*）
Count(*)在 innodb 里一般都是比较慢的，
可以看到，这条SQL的执行速度是比较慢的，优化思路是先取出334570行后面的1
4
77515560
count(*)
count(*）统计数据如何加快速度
title
title
米
市森
林】
e,
图5-64优化后查询结果耗时时间
图5-63优化前查询结果耗时时间
fros
平米商铺10日火爆
fron
order by ereatedate asc limit 334570, 1 b
爆认
尤其是数据量很大的情况，所以通过SQL语
4
下面这个例子。
ler
bv
ase linit 334570,1
createdate
8
C012-06-
8
crestedate
29
品
0
司
0
10
00
18
5
36
二
---
## Page 197
方能得到总的数量，且会锁表（表级锁，不是行锁)，当数据达到千万级别时，速度会很慢，
selectcount(*）from table的时候，直接从计数器中取出数据。InnoDB必须要全表扫描一次
count统计，这样效果更高，下面请看两个例子，如图5-65和图5-66所示。
务处理），它不像MyISAM引擎（OLAP联机分析处理）那样内置了一个计数器，可在使用
sum（）求和）千万不要在主库上执行。因为生产环境数据库是InnoDB引擎（OLTP联机事
注意
候消耗的资源也更少，速度也就更快。
存在一起，辅助索引不存放数据，而是有一个指针指向对应的数据块。因此，在统计的时
虽然上述方法加快了速度，但类似统计的SQL语句（如 select count(*）总数、select
优化distinct最有效的方法是利用索引来做排重操作，先把排重的记录查找出来再通过
案例二：count(distinct)优化
通过上面的测试，得出的结论是count（辅助索引）较快，聚集索引是把主键和数据保
2 1 EMNOEY
row in set（0.81 sec)
1 row in set (2 min 59.14 sec)
mysql>select count(*)fromUP_User whereSid>=0;
rows
77515560
count(*)
in
table
mysql> select count(distinct k) from sbtest;
1row in set(0.00sec)
mysql> select count(*)from （select distinct k from sbtest)tmp;
row in set(0.50sec)
count(distinct k)
count（*)
type |possible_keys|key|key_len|ref
Itype
1nde
1NULL
possible_keys
图5-65explain执行计划情况
图5-66
查询耗时时间对比
key
|key_len |ref
NULL
1rows
|Extra
第5章性能调优·183
---
## Page 198
184·第二部分故障诊断与性能优化篇
insert逻辑的语句：ON DUPLICATEKEYUPDATE，比如，下面这个例子：
一个SQL就让数据库挂掉。
MySQL中有一种非常高效的主键冲突处理判断，冲突则执行update，
6.使用ONDUPLICATEKEYUPDATE子句
可以看到已经用到了索引，扫描1行出结果，观察rows那列。
3rows in set (0.00 sec)
2 rows in set (0.00 sec)
上面的查询结果是全表扫描。改为union all 结果集合并，如下所示：
上面这条语句会用到索引吗？答案是：不会。通过查询分析器来看一下：
2rows in set(0.00 sec)
下面的 SQL语句中，user和age字段都建立索引。
在SQL语句里有or条件，
5.or条件如何优化
id|name|age|
1row in set(0.00 sec)
id|select_type|table|type|possible_keys|key|key_len|ref|rows|Extra
NULL|UNION RESULT||ALL |NULL
1
id|select_type
----+----.-.-+-.----+
61f
4|d
1|SIMPLE
4|d
id|name|age
+-
|UNION
PRIMARY
23
|23
|41
|USER|ALL |name,age
table
|USER
|USER
，则会用不到索引，下面看这个例子：
|type|possible_keys|key|key_len|ref|rows|Extra
|ref|name
|NULL|NULL|NULL|9
INULL|NULL
|name|18
age
12
|NULL|NULL
|const|1
|Using where
|Usingwhere
|Usingwhere
不冲突则执行
---
## Page 199
耗性能。
主键或唯一索引的操作，否则无法使用。
种写法，而且把它作为开发规范要求。另外需要注意的是，使用这种方式的表必须是基于
SELECTcount(1)ASrs_countFROM
下面这条SQL用于统计子表的记录的条数，那么排序操作在这里是多此一举了，且消
7.不必要的排序
mysql>insert into gg values(3,'d") ON DUPLICATE KEYUPDATE id=id+1;
mysql>select*from gg;
例子：当插人id值为3发生主键冲突时，把id+1：
3rows in set(0.00 sec)
mysql>select*from gg;
3rows in set (0.00 sec)
前一种写法明显简洁高效，所以在MySQL开发当中，如果有类似逻辑，尽量使用第一
|id|name
ENDIF;
IF EXISTS(select*from UP_RelationwhereOwnerld=v_Userld and Contactld=v_Contactld)THEN
[id|name|
QueryOK,2rows affected(0.00sec)
|1|a
ELSE
相当于：
ONDUPLICATEKEYUPDATEIsBuddy=1,IsChatFriend=0;
INSERTTO_Rlationwerld,Contactld,sBuddyChatFriend,slackList)ALUES（_Useld，_ontactd,)
-.--+--.
4|c
21b
1la
.--+-.....--+
.......
3|c
21b
----+--
VALUES(v_Userld,v_Contactld,1,0,0);
INSERT_ationerldontactld,suddyhatFriendlackist)
UPDATEUP_Relation
WHEREOwnerld=v_UserldANDContactld=v_Contactld;
SETIsBuddy=1,IsChatFriend=0
第5章性能调优·185
---
## Page 200
186·第二部分故障诊断与性能优化篇
的开销。例如，下面这个SQL语句，如图5-69所示。
处理需要排序、总计等操作。如果能通过where子句限制记录的数目，那就能减少这方面
图5-67所示。
避免使用having子句，having只会在检索出所有记录之后才对结果集进行过滤。这个
从图5-67可以看到，查出来的数据有重复记录，修改为图5-68所示的这条SQL。
10．用where子句替换having子句
这样修改后就可以查询到正确的结果了。
下面的例子中使用了不必要的join表连接，结果数据有重复，不是想要的结果，如
9.不必要的表自身连接
这样用一条Select就满足了查询条件，避免了外层的嵌套select查询，性能提升。
ORDERBYa.titleDESCLIMITO,30;
ON a.id = b.id AND a.content LIKE'rc_%
SELECTaidatitle,.ontent,bg_ime,b.ame
修改为：
)ASrs_tableLIMIT0,30;
下面这条SQL在子表的查询结果里会再过滤出前30条记录，这样对性能是有所消耗的。
8.不必要的嵌套select查询
去掉ORDERBYa.titleDESC 排序后，性能提升。
FROMaJOINb
SELECT*FROM
ASrs_table;
SELECTcount(1)ASrs_countFROM
修改为：
ASrs_table;
ORDERBYa.titleDESC
WHERE a.content LIKE'rc_%'AND a.id = b.id
SELECTaid,atite,ntent,b.g_tmeb.m
ONa.id=b.idANDa.contentLIKE'rc_%
SELECTa.idFROMaJOINb