### Android Permissions and Dynamic Constraints

#### Introduction to Permissions
A component in Android can specify required permissions using the `android:permission` attribute within the `<activity>`, `<service>`, `<receiver>`, or `<provider>` tags [6]. These permissions are required by the target component, not those granted to the calling component.

**Definition 4 (Permissions):** A permission declares the requirements posed by a component for accessing it. A permission association function \( A_p : C \rightarrow P \) associates each component with a single permission, where \( P \) is the set of permissions. If a component \( c \in C \) requires that a calling component have a permission \( p \in P \), then we write \( p = A_p(c) \).

Applications are granted specific permissions by the Android framework at install-time. The manifest file includes one or more `<uses-permission>` tags that specify the permissions required by the application to function properly. During installation, the user is presented with an interface listing the requested permissions. If the user grants these permissions, the application is installed and thus granted the requested permissions. Formally:

- "A feature can be protected by at most one permission" [5].

Since our formalization is based on the concept of components, we define a second permission function \( \rho \) that defines the permission of one component to call another with a specific intent.

**Definition 6 (Permission Function):** The permission function \( \rho \) defines the complete set of conditions under which a component \( c_1 \) is allowed to call another component \( c_2 \). \( c_1 \) can communicate with \( c_2 \) if and only if either:
1. There is no permission associated with the second component, or
2. The application to which \( c_1 \) belongs has been granted the permission required by \( c_2 \). Formally:
\[ \rho(c_1, c_2, i) \Leftrightarrow A_p(c_2) = \text{null} \vee \exists p \in P, a \in A \cdot a = \varsigma(c_1) \wedge p = A_p(c_2) \wedge p \in \mu(a) \wedge i \in A_f(c_2) \]

**Example 2:** The Facebook service component declares the permission `edu.apex.android.permission.fbs_start` in its `android:permission` attribute. To start the Facebook service, the Ringlet activity needs this permission granted to it.

This example concludes our formalization of the existing security mechanism provided by Android. It is evident that in this mechanism, there is no way of specifying complex or fine-grained runtime constraints for permissions. Below, we describe how we have enhanced this mechanism to include dynamic constraints on permissions.

#### Dynamic Constraints

For associating dynamic constraints with permissions, we introduce the concept of application attributes. Each application in Android is associated with a finite set of attributes. The application state is a function that maps the attributes of an application to their values. The application state is a persistent structure that maintains its values between different system sessions.

**Definition 7 (Application State):** An application state is a function \( \tau : \eta(A) \rightarrow \text{dom}(\eta(A)) \), where \( A \) is the set of applications, \( \eta \) is the function that maps an application to a set of attribute names, and \(\text{dom}(x)\) is the value domain of attribute set \( x \) of an application \( a \in A \).

**Example 3:** The Ringlet application has several attributes associated with it, such as `sentMms`, which captures the number of MMS messages sent by the application. Each application can have a different set of attributes. Existing Android applications for which no attributes are defined can be considered as having an empty set of attribute names associated with them.

Constraints for permissions are defined in terms of predicates—functions that map the set of application attributes, system attributes, and constants to boolean values. A predicate returns true if and only if the attribute values in the current application state satisfy the conditions of the predicates. We denote the set of predicates as \( Q \).

An application transitions from one state to another as a result of a change in the value of the application’s attributes. This change is captured by an attribute update action.

**Definition 8 (Attribute Update Action):** An attribute update action \( u(a.x, v') : \tau \rightarrow \tau' \) is a function that maps the value of an attribute \( x \in \eta(a) \) of an application \( a \in A \) to a new value \( v' \in \text{dom}(\eta(a)) \).

Attribute updates play a key role in our policy framework. Predicates based on these attributes are used for two purposes:
1. They specify the conditions under which a permission may be granted.
2. They can cause an update action to be triggered, which may modify the values of attributes. Conditions and updates are both specified in a policy.

**Definition 9 (Policy):** A policy defines the conditions under which an application is granted a permission. It consists of two input parameters—an application and a permission—on which it is applicable, an authorization rule composed of predicates that specify the conditions under which the permission is granted/denied, and a set of attribute update actions, which are to be performed if the conditions in the authorization rule are satisfied. Specifically:
\[ l(a, p) : q_1 \wedge q_2 \wedge q_3 \wedge \ldots \wedge q_n \rightarrow \{ \text{permit, deny} \} \]
\[ u_1; u_2; u_3; \ldots ; u_n \]
where \( a \in A \), \( p \in P \), \( q_i \in Q \), \( u_i \) are attribute update actions, \( l \in \Lambda \), and \( \Lambda \) is the set of policies in the system. The right-hand side of the authorization rule defines the value returned by the policy.

Note that if the predicates in an authorization rule are satisfied, updates specified in the policy are performed regardless of the return value of the authorization rule.

A policy is applied to a specific application state. Attribute values in the particular state determine the truth value of the predicates. If the predicates are satisfied, the permission is either granted or denied (depending on the return value of the authorization rule), and the updates specified in the policy are executed, resulting in a new state. This may render predicates in other policies true, thus allowing for the dynamic nature of the policy-based constraints on permissions.

We incorporate these policies in the existing security model of Android by redefining the permission function \( \rho \).

**Definition 10 (Dynamic Permission Function):** The dynamic permission function specifies the conditions under which a component \( c_1 \) is granted permission to call another component \( c_2 \) using intent \( i \). It incorporates the static checks as well as the dynamic runtime constraints in its evaluation. For a permission to be granted, Android’s permission checks must grant the permission and there must not be a policy that denies the permission. Formally:
\[ \rho(c_1, c_2, i) \Leftrightarrow A_p(c_2) = \text{null} \vee \exists p \in P, a \in A \cdot a = \varsigma(c_1) \wedge p = A_p(c_2) \wedge p \in \mu(a) \wedge i \in A_f(c_2) \wedge \neg \exists l \in \Lambda \cdot l(a, p) = \text{deny} \]

**Example 4:** The Ringlet activity can include the location of the user in the messages posted. Similar to the weather update example given in Section 1, the user may wish to restrict access to GPS for protecting her privacy. Using dynamic constraints, she may define a policy that denies access to GPS at all times. The constraint in the policy is set to true, and the authorization rule to deny with no updates. Using this policy, she may install Ringlet and use it for all other functionality while still protecting the privacy of her location. Similarly, she may define a policy that imposes a limit on Ringlet’s ability to send updates through MMS messages, say 5 each day, thereby controlling the carrier costs at a fine-grained level.

For the implementation of Apex, we have defined a policy language that allows the user to define her policies, including dynamic constraints. Figure 1 shows how both of the above example policies can be depicted in our language. We have incorporated the policy model in the existing Android security mechanism and inter-component communication mechanism. This includes changes to the activity manager, the package manager, and the permission checking mechanisms associated with these components. However, we are unable to include the details of this implementation here due to space limitations.

### Poly Android Installer

Writing usage policies is a complex procedure, even for system administrators. Android is targeted at the consumer market, and the end users are, in general, unable to write complex usage policies. One of the most important aspects of our new policy enforcement framework is the usability of the architecture. To this end, we have created Poly—an advanced Android application installer. Poly augments the existing package installer by allowing users to specify their constraints for each permission at install time using a simple and usable interface.

In the existing Android framework, the user is presented with an interface that lists the permissions required by an application. We have extended the installer to allow the user to click on individual permissions and specify their constraints. When a user clicks on a permission, she is presented with an interface that allows her to pick one of a few options.

1. **For the novice user, the default setting is to allow.** The default behavior of the Android installer is also to allow all permissions if the user agrees to install an application. This is a major usability feature that makes the behavior of the existing Android installer a subset of Poly and will hopefully allow for easier adoption of our constrained policy enforcement framework.
2. **The deny option allows a user to selectively deny a permission.** This is in contrast to the all-or-nothing approach of the existing security mechanism. For example, Alice downloads an application that asks for several permissions, including the one associated with sending SMS. Alice may wish to stop the application from sending SMS while still being able to install the application and use all other features. In Poly, Alice can simply tap on the 'send SMS' permission and set it to 'deny'.
3. **The third option is the constrained permission.** This is the main concern of this contribution and has been discussed at length in the previous sections. An important point to note here is that currently, we have incorporated only simple constraints such as restricting the number of times used and the time of the day in which to grant a permission. This simplification is for the sake of usability. We aim to develop a fully functional desktop application that will allow expert users to write very fine-grained policies.

For the implementation of Poly, we have extended the `PackageInstallerActivity`. Figure 2 shows the screens as presented to the user during installation. Moreover, we also allow users to modify their constraints even after install-time. For this purpose, we have provided the same interface in the settings application of Android (com.android.settings.ManageApplications class) so that the constraints may be modified as the user’s trust in an application increases or decreases over time.

We believe that our comprehensive constrained policy mechanism, coupled with the usable and flexible user interface of Poly, provides a secure yet user-friendly security mechanism for the Android platform.

### Conclusion and Future Work

In this paper, we have described Apex—an extension to the Android permission framework. Apex allows users to specify detailed runtime constraints to restrict the use of sensitive resources by applications. The framework achieves this with a minimal trade-off between security and performance. The user can specify her constraints through a simple interface of the extended Android installer called Poly. The extensions are incorporated in the Android framework with a minimal change in the codebase and the user interface of the existing security architecture.

Our model is significantly different from related efforts [7, 1, 2] in that not only does it define an easy-to-use policy language, but it is also user-centric. It allows users to make decisions about permissions on their device rather than automating the decisions based on the policies of remote owners. Secondly, it allows finer-granular control over usage through constructs such as attribute updates.

### References

[1] William Enck, Machigar Ongtang, and Patrick McDaniel. On lightweight mobile phone application certification. In CCS ’09: Proceedings of the 16th ACM conference on Computer and communications security, pages 235–245, New York, NY, USA, 2009. ACM.

[2] Adam P. Fuchs, Avik Chaudhuri, and Jeffrey S. Foster. SCanDroid: Automated Security Certification of Android Applications. In Submitted to IEEE S&P’10: Proceedings of the 31st IEEE Symposium on Security and Privacy, 2010.

[3] Google. Android Home Page, 2009. Available at: http://www.android.com.

[4] Google. Android Reference: Intent, 2009. Available at: http://developer.android.com/reference/android/content/Intent.html.

[5] Google. Android Reference: Manifest File - Permissions, 2009. Available at: http://developer.android.com/guide/topics/manifest/manifest-intro.html#perms.

[6] Google. Android Reference: Security and Permissions, 2009. Available at: http://developer.android.com/guide/topics/security/security.html.

[7] M. Ongtang, S. McLaughlin, W. Enck, and P. McDaniel. Semantically Rich Application-Centric Security in Android. In Proceedings of the Annual Computer Security Applications Conference, 2009.