# HTTP 请求走私：协议层攻击的深入探讨

在最近的研究过程中，恰好看到 **mengchen@知道创宇404实验室** 发表了题为《协议层的攻击——HTTP请求走私》的文章（[链接](https://paper.seebug.org/1048/)），该文章给我带来了许多新的启示。在此基础上，结合自身的一些理解和认识，我将对相关内容进行整理和补充。本文也可以视为上述文章的一个扩展版本，提供了更加详细的描述。

由于时间上的限制，本文从构思到完成历经约两个月的时间。在这段时间里，尽管我尽力保证内容的准确性和完整性，但难免存在疏漏之处。如果读者发现任何错误或不足，请直接指出并斧正。写作不易，还望各位同行多多包涵。同时，我也一直关注着与此相关的安全问题，欢迎大家一起交流学习。联系方式：emVkZHl1Lmx1QGdtYWlsLmNvbQ==。如果有新的总结与发现，我会发布在我的[博客](https://blog.zeddyu.info)上或通过其他平台分享。

## 概要
![](此处插入图片链接)

## 时间线
- 2004年，@Amit Klein 提出了 [HTTP Response Splitting](https://dl.packetstormsecurity.net/papers/general/whitepaper_httpresponse.pdf)，这是 HTTP Smuggling 攻击概念的雏形。
- 2005年，@Watchfire 首次定义了 [HTTP Request Smuggling](https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf)。
- 2009年，在OWASP波兰会议上，@Stefano di Paola 和 @Luca Carettoni 引入了 [HTTP Parameter Pollution (HPP)](https://owasp.org/www-chapter-poland/assets/OWASP_Poland_Conference_2009_HPP.pdf)，这是一种特殊的HTTP Smuggling形式，常用于绕过WAF防护。
- 2016年的Defcon 24大会上，@regilero 展示了[Hiding Wookiees In Http](https://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEF%20CON%2024%20-%20Regilero-Hiding-Wookiees-In-Http.pdf)，进一步探讨了HTTP Smuggling的应用场景。
- 2019年Defcon 27期间，@James Kettle 在其演讲[HTTP Desync Attacks: Smashing into the Cell Next Door](https://media.defcon.org/DEF%20CON%2027/DEF%20CON%2027%20presentations/DEFCON-27-albinowax-HTTP-Desync-Attacks.pdf)中介绍了如何利用HTTP Smuggling技术发现PayPal的安全漏洞。

## 成因分析
虽然@James Kettle在其演讲PPT中没有非常详细地解释HTTP Smuggling的具体机制及其形成原因，但通过学习@regilero关于[HTTP Smuggling](https://regilero.github.io/tag/Smuggling/)的相关文章后，我对这种攻击方式有了更清晰的理解。

### HTTP连接模式
#### Keep-Alive
根据[RFC 7230](https://tools.ietf.org/html/rfc7230#section-6)的规定，HTTP/1.1默认使用持久连接（Persistent Connections），允许在一个TCP连接上发送多个请求和响应。“Close”选项用来指示当前请求/响应完成后断开连接。通过设置`Connection: Keep-Alive`头字段，客户端可以告诉服务器保持TCP连接打开状态，以便后续请求能够复用此连接，从而减少握手过程、节省资源并提高访问速度。当然，若请求包含`Connection: close`，则会在通信结束后关闭TCP连接。

#### 管道化
管道化（Pipelining）允许客户端无需等待前一个请求的响应即可连续发送多个请求。服务器接收到这些请求后会按照先进先出原则处理，并依次返回结果。目前大多数浏览器默认不启用管道化功能，但多数服务器已支持这一特性。下图展示了启用与未启用管道化时的数据传输对比：
![Pipeline Comparison](此处插入比较图链接)

### 消息体
#### Transfer-Encoding
Transfer-Encoding主要用于指定payload body的编码格式以确保其在网络上传输的安全性。其中最值得关注的是“chunked”编码方式，它被广泛应用于各种网络攻击中，例如绕过WAF策略等。关于分块传输编码的具体规范可参考[RFC 7230](https://tools.ietf.org/html/rfc7230#section-4.1)。

### 背景信息
为了提升用户体验并减轻服务器负担，许多网站采用了CDN加速服务。在这种架构下，反向代理服务器通常不会采用pipeline或Keep-Alive技术，而是选择重用TCP连接。当用户向代理服务器发送模糊不清的HTTP请求时，由于两台服务器之间对于请求解析方式的不同，可能会导致部分请求被视为非法或被误解为另一个独立的请求，从而引发HTTP Smuggling攻击。

## 攻击方法
基于上述背景，攻击者可以通过构造特定格式的HTTP请求来利用解析差异实施攻击。例如，以下代码演示了一种可能的攻击手段：
```bash
printf 'GET / HTTP/1.1\r\n'\
'Host:localhost\r\n'\
'Content-length:56\r\n'\
'Transfer-Encoding: chunked\r\n'\
'Dummy:Header\r\n\r\n'\
'0\r\n'\
'\r\n'\
'GET /tmp HTTP/1.1\r\n'\
'Host:localhost\r\n'\
'Dummy:Header\r\n'\
'\r\n'
```

这段脚本尝试在同一请求中嵌入两个不同的GET命令，其中一个可能被前端代理忽略而直接传递给后端服务器执行，进而实现非法操作。