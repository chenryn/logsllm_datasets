### 优化后的文本

#### 定义与引理

**定义7.** 我们写 \( E, H \models \Gamma \) 当且仅当：
\[ \forall x. VT ype(E(x), H) = \tau \land \tau \subseteq \Gamma(x) \]

**引理1.** 对于每个表达式 \( e \) 和语句 \( s \)，以及所有 \( E, H, \Gamma \) 满足 \( E, H \models \Gamma \)，以下条件成立：
\[ \Delta; \Gamma \vdash e : \tau \land (E, H, e) \rightarrow (E', H', v) \implies E', H' \models \Gamma \]
\[ \Delta; \Gamma \vdash s : \tau \land (E, H, s) \rightarrow (E', H', v) \implies E', H' \models \Gamma \]

**证明.** 表达式的性质显然成立。事实上，表达式对 \( E \) 没有影响（即 \( E' = E \)），并且 \( H \) 中的类型是不可变的。对于语句，我们通过归纳法来证明：

- **Case skip;**: 显然 \( E' = E \) 和 \( H' = H \)。
- **Case return e;**: 直接由表达式的性质得出。
- **Case x = e;**: 由于性质对 \( e \) 成立，我们知道 \( E, H' \models \Gamma \)。因此只需证明 \( [x \mapsto v] \circ E, H' \models \Gamma \)，这是 \( VT ype(v) \subseteq DT ype(x) \) 的结果。
- **Case if (e1 == e2) { s1 } else { s2 }**: 递归应用归纳假设到 \( e1, e2 \) 和 \( s1 \) 或 \( s2 \)（根据操作语义规则）。
- **Case e.f = e';**: 应用归纳假设到 \( e \) 和 \( e' \)，并注意到该操作不改变 \( H \) 中记录的类型。
- **Case C x in {s}**: 直接由归纳假设应用于 \( s \) 和 \( [x \mapsto null] \circ E \) 得出。
- **Case s1 s2**: 依次应用归纳假设到 \( s1 \) 和 \( s2 \)。

**引理2.** 对于每个表达式 \( e \) 和语句 \( s \)，以及所有 \( E, H, \Gamma \) 满足 \( E, H \models \Gamma \)，以下性质成立：
\[ \Delta; \Gamma \vdash e : \tau \implies \exists v, E', H'. (E, H, e) \rightarrow (E', H', v) \land VT ype(v, H') \subseteq \tau \]
\[ \Delta; \Gamma \vdash s : \sigma \implies \exists v, E', H'. (E, H, s) \rightarrow (E', H', v) \land VT ype(v, H') \subseteq \sigma \]

- **Case e.f**: 应用规则 (TE-Fld) 并应用归纳假设到 \( e \)。因此，我们有 \( \Delta; \Gamma \vdash e : C \)（其中 \( \Delta(C)(f) = \tau \)）和 \( (E, H, e) \rightarrow (E, H', o) \) 且 \( H(o) = C' \preceq C \)。我们可以得出结论，因为 \( C' \preceq C \) 意味着 \( \Delta(C')(f) = \tau \)（字段不能被重新定义）。
- **Case e.m(¯e)**: 类似上述推理，但应用规则 (TE-Mth)。因此我们得到 \( \Delta; \Gamma \vdash e : C \)（其中 \( \Delta(C)(m) = \bar{\tau''} \to \tau \)）和 \( (E, H, e) \rightarrow (E, H', o) \) 且 \( H(o) = C' \preceq C \)。递归应用归纳假设到 \( \bar{e} \) 的所有元素，从配置 \( (E, H_0, e_1) \) 开始（其中 \( H_0 = H' \)）。我们得到 \( \bar{e} \) 被类型化为 \( \bar{\tau^*} \) 并生成 \( n \) 个值 \( \bar{v} \) 使得 \( \forall i. VT ype(v_i, H_i) \subseteq \tau_i^* \)。由于 \( \bar{\tau^*} \subseteq \bar{\tau''} \)，我们可以应用规则 (EE-Mth) 并假设方法体正确地类型化了 \( \Delta \)。
- **Case new C(¯e)**: 证明类似上一个案例。
- **Case (C)e**: 由归纳假设，我们有 \( \Delta; \Gamma \vdash e : \tau \)，由规则 (TE-Cst) 知道 \( \tau = C' \) 且 \( C' \preceq C \)。性质成立，因为 \( VT ype(o, H') \subseteq C' \preceq C \)。
- **Case /*@ ER @*/e**: 由归纳假设直接得出。
- **Case skip;**: 由 (TS-Skip) 得 \( \Delta; \Gamma \vdash skip; : void \)，由 (SE-Skip) 得 \( (E, H, skip;) \rightarrow (E, H, \bullet) \)。定义 \( VT ype(\bullet, H') = void \)，足以得出结论。
- **Case return e;**: 由归纳假设得出。
- **Case x = e;**: 首先应用归纳假设到 \( e \)。然后应用类型规则 (TS-Asgn) 和操作语义规则 (SE-Asgn)，并如前一情况得出结论。
- **Case if (e1 == e2) { s1 } else { s2 }**: 依次应用归纳假设到 \( e1 \) 和 \( e2 \)。然后，有两个对称的情况，取决于守卫是否评估为 true 或 false。在这两种情况下，我们分别应用归纳假设到 \( s1 \) 和 \( s2 \) 来得出结论。
- **Case e.f = e';**: 类似变量赋值的推理。唯一的不同是这里同时应用归纳假设到 \( e \) 和 \( e' \)。
- **Case C x in {s}**: 应用并假设规则 (TS-Blk) 的前提得到 \( \Delta; \Gamma, x : C \vdash s : \sigma \)。为了应用归纳假设并得出结论，我们需要证明 \( [x \mapsto null] \circ E, H \models \Gamma, x : C \)。然而，这显然由 \( E, H \models \Gamma \) 和 \( \top \subseteq C \) 得出。
- **Case s1 s2**: 这里有两个子情况（取决于应用哪种类型规则）。
  - **(TS-Seq1)**: 再次有两个分支，一个是规则 (SE-Seqr)，另一个是 (SE-Seqc)。第一个分支只需要应用归纳假设到 \( s1 \)。而应用 (SE-Seqc) 时，我们得到 \( (E, H, s1) \rightarrow (E', H', \bullet) \)。由引理 1 知道 \( E', H' \models \Gamma \)，足以应用归纳假设到 \( s2 \) 并得出结论。
  - **(TS-Seq2)**: 在这种情况下，规则 (SE-Seqr) 不适用（因为 \( v \neq \bullet \) 意味着 \( VT ype(v) \neq void \)）。考虑规则 (SE-Seqc)，我们有 \( (E, H, s1) \rightarrow (E', H', \bullet) \)。再次应用引理 1 和归纳假设得出结论。
- **Case /*@ SR @*/s**: 由归纳假设直接得出。

**定理1.** 对于所有封闭表达式 \( e \) 和语句 \( s \)，以下性质成立：
\[ \emptyset, \Delta \vdash e : \tau \implies \exists v, E, H. (\emptyset, \emptyset, e) \rightarrow (E, H, v) \land VT ype(v, H) \subseteq \tau \]
\[ \emptyset, \Delta \vdash s : \sigma \implies \exists v, E, H. (\emptyset, \emptyset, s) \rightarrow (E, H, v) \land VT ype(v, H) \subseteq \sigma \]

**证明.** 引理 2 的推论。

### 操作语义规则

**名称**
- **(EE-Null)**
- **(EE-Var)**
- **(EE-Fld)**
- **(EE-Mth)**
- **(EE-New)**
- **(EE-Cst)**
- **(SE-Skip)**
- **(SE-Ret)**
- **(SE-Iftt)**
- **(SE-Ifﬀ)**
- **(SE-Asgn)**
- **(SE-Fld)**
- **(SE-Blk)**
- **(SE-Seqc)**
- **(SE-Seqr)**

**规则**
- **(EE-Null)**: \( (E, H, null) \rightarrow (E, H, null) \)
- **(EE-Var)**: \( (E, H, x) \rightarrow (E, H, v) \)
- **(EE-Fld)**: \( (E, H, e) \rightarrow (E, H', o) \)
- **(EE-Mth)**: \( (E, H, e.m(\bar{e})) \rightarrow (E, H', v) \)
- **(EE-New)**: \( (E, H, new C(\bar{e})) \rightarrow (E, H'', o) \)
- **(EE-Cst)**: \( (E, H, e) \rightarrow (E, H', o) \)
- **(SE-Skip)**: \( (E, H, skip;) \rightarrow (E, H, \bullet) \)
- **(SE-Ret)**: \( (E, H, e) \rightarrow (E, H', v) \)
- **(SE-Iftt)**: \( (E, H, if (e1 == e2) s1 else s2) \rightarrow (E1, H1, v1) \)
- **(SE-Ifﬀ)**: \( (E, H, if (e1 == e2) s1 else s2) \rightarrow (E2, H2, v2) \)
- **(SE-Asgn)**: \( (E, H, e) \rightarrow (E, H', v) \)
- **(SE-Fld)**: \( (E, H, e) \rightarrow (E, H', o) \)
- **(SE-Blk)**: \( ([x \mapsto null] \circ E, H, s) \rightarrow (E', H', v) \)
- **(SE-Seqc)**: \( (E, H, s1) \rightarrow (E', H', \bullet) \)
- **(SE-Seqr)**: \( (E, H, s1) \rightarrow (E', H', v) \)

**附加条件**
- **(EE-Var)**: \( E(x) = v \)
- **(EE-Fld)**: \( H(o) = (C, Eo) \) 且 \( f \in Fields(C) \) 且 \( Eo(f) = v \)
- **(EE-Mth)**: \( H(o) = (C, Eo) \) 且 \( (m, \bar{x}, s) \in Methods(C) \)
- **(EE-New)**: \( (x, s) \in Constructor(C) \) 且 \( o \) 在 \( Hn \) 中是新的
- **(EE-Cst)**: \( H(o) = (D, E) \) 且 \( D \preceq C \)
- **(SE-Asgn)**: \( x \in Dom(E) \) 且 \( VT ype(v) \subseteq DT ype(x) \)
- **(SE-Fld)**: \( H''(o) = (C, Eo) \) 且 \( f \in Fields(C) \) 且 \( E' = [f \mapsto v] \circ Eo \)