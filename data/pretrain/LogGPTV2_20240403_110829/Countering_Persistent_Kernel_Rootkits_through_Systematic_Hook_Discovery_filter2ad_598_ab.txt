r
i
v
A
Kernel hook identifier
Guest OS
Log
Context−aware execution monitor
Virtual machine monitor (VMM)
Kernel hooks
Fig. 2. A systematic approach to discovering kernel hooks
then accurately instrument and record all executed kernel instructions that are relevant
to the chosen security software.
However, a challenging part is that modern OS kernels greatly complicate the capture
and interpretation of execution contexts with the introduction of “out of order” execu-
tion (mainly for improving system concurrency and performance reasons). The “out
of order” execution means that the kernel-side execution of any process can be asyn-
chronously interrupted to handle an incoming interrupt request or temporarily context-
switched out for the execution of another unrelated process. Notice that the “out of
order” execution is considered essential in modern OSes for the support of multi-tasking
and asynchronous interrupt handling.
Fortunately, running a commodity OS as a guest VM provides a convenient way to
capture those external events 3 that trigger the “out of order” executions in a guest ker-
nel. For example, if an incoming network packet leads to the generation of an interrupt,
the interrupt event needs to be emulated by the underlying virtual machine monitor and
thus can be intercepted and recorded by our system. The tricky part is to determine when
the corresponding interrupt handler ends. For that purpose, we instrument the execution
of iret instruction to trace when the interrupt handler returns. However, additional com-
plexities are introduced for the built-in support of nested interrupts in the modern OS
design where an interrupt request (IRQ) of a higher priority is allowed to preempt IRQs
of a lower priority. For that, we need to maintain a shadow interrupt stack to track the
nested level of an interrupt.
In addition to those external events, the “out of order” execution can also be intro-
duced by some internal events. For example, a running process may voluntarily yield
the CPU execution to another process. For that, instead of locating and intercepting all
these internal events, we need to take another approach by directly intercepting context
switch events occurred inside the monitored VM. The interception of context switch
events requires some knowledge of the OS internals. We will describe it in more details
in Section 4.
With the above capabilities, we can choose and run a particular security program (or
any rootkit-detection tool) inside the monitor. The monitor will record into a local trace
3 Note that the external events here may also include potential debug exceptions caused from
hardware-based debugger registers. However, in this work, we do not count those related hooks
within the debug interrupt handler.
Countering Persistent Kernel Rootkits through Systematic Hook Discovery
27
ﬁle a stream of system calls made by the chosen program and for each system call, a
sequence of kernel instructions executed within the system call execution path.
3.2 Kernel Hook Identiﬁer
The context-aware execution monitor will collect a list of kernel instructions that are
sequentially executed when handling a system call request from a chosen security
program. Given the collected instructions, the kernel hook identiﬁer component is de-
veloped to identify those HAPs where kernel hooks are involved. The identiﬁcation of
potential HAPs is relatively straightforward because they are the control-ﬂow transfer
instructions, namely those call or jmp instructions.
Some astute readers may wonder “wouldn’t static analysis work for the very same
need?” By statically analyzing kernel code, it is indeed capable of identifying those
HAPs. Unfortunately, it cannot lead to the identiﬁcation of the corresponding kernel
hooks. There are two main reasons: (1) A HAP may use registers or memory loca-
tions to resolve the run-time locations of the related kernel hooks. In other words, the
corresponding kernel hook location cannot be determined through static analysis. (An
example is already shown in Figure 1(a).) (2) Moreover, there exists another complexity
that is introduced by the loadable kernel module (LKM) support in commodity OS
kernels. In particular, when a LKM is loaded into the kernel, not only its loading
location may be different from previous runs, but also the module text content will be
updated accordingly during the time when the module is being loaded. This is mainly
due to the existence of certain dependencies of the new loaded module on other loaded
modules or the main static kernel text. And we cannot resolve these dependencies until
at run-time.
Our analysis shows that for some discovered HAPs, their run-time execution trace
can readily reveal the locations of associated kernel hooks. As an example, in the system
call dispatcher shown in Figure 1(a), the HAP instruction – call *0xc030f960(,%eax,4),
after the execution, will jump to a function which is pointed to from the memory
location: 0xc030f960 + %eax × 4, where the value of %eax register can be known
at run-time. In other words, the result of the calculation at run-time will be counted as
a kernel hook in the related execution path. In addition, there also exist other HAPs
(e.g., call *%edx) that may directly call registers and reveal nothing about kernel hooks
but the destination addresses the execution will transfer to. For that, we need to start
from the identiﬁed HAP and examine in a backwards manner those related instructions
to identify the source, which eventually affects the calculated destination value and
will then be considered a kernel hook. (The detailed discussion will be presented in
Section 4.2.) In our analysis, we also encounter some control-ﬂow transfer instruc-
tions whose destination addresses are hardcoded or statically linked inside machine
code. In this case, both static analysis and dynamic analysis can be used to iden-
tify the corresponding hooks. Note that according to the nature of this type of hooks
(Section 2), we consider them as code hooks in this paper.
Finally, after identifying those kernel hooks, we also aim to resolve the memory
addresses to the corresponding semantic deﬁnitions. For that, we leverage the symbol
information available in the raw kernel text ﬁle as well as loaded LKMs. More speciﬁ-
cally, for main kernel text, we obtain the corresponding symbol information (e.g., object
28
Z. Wang et al
names and related memory locations) from the related System.map ﬁle. For kernel
modules, we derive the corresponding symbol information from the object ﬁles (e.g., by
running the nm command)4. If we use Figure 1(a) as an example, in an execution path
related to the sys open routine, the hook’s memory address is calculated as 0xc030f974.
From the symbol information associated with the main kernel text, that memory ad-
dress is occupied by the system call table (with the symbol name sys call table) whose
base address is 0xc030f960. As a result, the corresponding kernel hook is resolved as
sys call table[5]5 where 5 is actually the system call number for the sys open routine.
4 Implementation
We have built a prototype system called HookMap based on an open-source QEMU
0.9.0 [6] virtual machine monitor (VMM) implementation. As mentioned earlier, we
choose it due to the following considerations: (1) First, since we are dealing with normal
OS kernels, the VM environment will not affect the results in the identiﬁed kernel
hooks; (2) Second, it contains the implementation of a key virtualization technique
called dynamic binary translation [6,4], which can be leveraged and extended to select,
record, and disassemble kernel instruction sequences of interest; (3) Third, upon the
observation of VM-internal process events, we need to embed our own interpretation
logic to extract related execution context information. The open-source nature of the
VM implementation provides great convenience and ﬂexibility in making our imple-
mentation possible. Also, due to the need of obtaining run-time symbols for semantic
resolution, our current system only supports Linux. Nevertheless, we point out that
the principle described here should also be applicable for other software-based VM
implementations (e.g., VMware Workstation [4]) and other commodity OSes (e.g.,
Windows).
4.1 Context-Aware Execution Logging
One main task in our implementation is that, given an executing kernel instruction, we
need to accurately understand the current execution context so that we can determine
whether the instruction should be monitored and recorded. Note that the execution
context here is deﬁned as the system call context the current (kernel) instruction belongs
to. To achieve that, we have the need of keeping track of the lifetime of a system call
event. Fortunately, the lifetime of a system call event is well deﬁned as the kernel
accepts only two standard methods in requesting for a system call service: int $0x80
and sysenter. Since we are running the whole system on top of a binary-translation-
capable VMM, we can conveniently intercept these two instructions and then interpret
the associated system call arguments accordingly. For this speciﬁc task, we leverage an
“out-of-the-box” VM monitoring framework called VMscope [11] as it already allows
4 We point out that the nm command output will be further updated with the run-time loading
address of the corresponding module. For that, we will instrument the module-loading
instructions in the kernel to determine the address at run-time.
5 The calculation is based on the following: (0xc030f 974 − 0xc030f 960)/4 = 5, where 4
represents the number of bytes occupied by a function pointer.
Countering Persistent Kernel Rootkits through Systematic Hook Discovery
29
to real-time capture system calls completely outside the VM. What remains to do is to
correlate a system call event and the related system call return event to form its lifetime.
Interested readers are referred to [11] for more details.
Meanwhile, we also face another challenge caused by the “out-of-order” execution
(Section 3). To address that, we monitor relevant external events (e.g., interrupts) as well
as internal events (e.g., context switches) to detect run-time changes of the execution
context. The main goal here is to avoid the introduction of “noises” – unnecessary kernel
executions – into the execution path for monitoring and analysis. Fortunately, with a
software-based VM implementation, we are able to intercept all these external events
as they need to be eventually emulated by the underlying VMM. However, an interesting
part is to handle the nested interrupts scenario where a shadow interrupt stack should be
maintained at the VMM layer to keep track of the nested level of the ongoing interrupt.
For the internal events, our prototype sets a breakpoint on a kernel function that actually
performs context-switching. On Linux, the related function is called switch to and its
location is exported by kernel and can be found in the System.map ﬁle6.
With the above capabilities, our system essentially organizes the kernel instruction
execution into a stream of system calls and each system call contains a sequence of
kernel instructions executed within this speciﬁc context. Furthermore, to facilitate later
identiﬁcation and analysis of kernel hooks, for each kernel instruction in one particular
context, we further dump the memory locations as well as registers, if any, involved in
this instruction. The additional information is needed for later kernel hook identiﬁca-
tion, which we describe next.
4.2 Kernel Hook Identiﬁcation
Based on the collected sequence of kernel instructions, the kernel hook identiﬁer locates
and analyzes those control-ﬂow transfer call or jmp instructions (as HAP instructions)
to uncover relevant kernel hooks. As a concrete example, we show in Table 1 a list of
identiﬁed HAPs, associated system call contexts, as well as those kernel hooks that are
obtained by monitoring kernel-side execution of the ls command. Note that a (small)
subset of those identiﬁed kernel hooks have already been used by rootkits for ﬁle-hiding
purposes (more in Section 5).
As mentioned earlier, for an HAP instruction that will read a memory location and
jump to the function pointed by a memory location, we can simply record the memory
location as a kernel hook. However, if an HAP instruction directly calls a register (e.g.,
call *%edx), we need to develop an effective scheme to trace back to the source – a
kernel hook that determines the value of the register.
We point out that this particular problem is similar to the classic problem addressed
by dynamic program slicing [5,24]: Given an execution history and a variable as the
input, the goal of dynamic program slicing is to extract a slice that contains all the
instructions in the execution history that affected the value of that variable. As such,
for the register involved in an identiﬁed HAP instruction, we apply the classic dynamic
6 A different version of ls can result in the execution of sys getdents64 instead of sys getdents,
which leads to one variation in the identiﬁed kernel hooks – sys call table[220] instead of
sys call table[141]. A similar scenario also happens when identifying another set of kernel
hooks by monitoring the ps command (to be shown in Table 2).
30
Z. Wang et al
Table 1. File-hiding kernel hooks obtained by monitoring the ls -alR / command in RedHat
Fedora Core 5
execution path
#
Hook Attach Points (HAPs)
address
instruction
call *0xec(%ecx)
call *%edi
call *0xf0(%edx)
call *%esi
0xc014f190
0xc014f19a
call *%ecx
call *0xf4(%edx)
call *%edx
call *0xc4(%ebx)
call *0x1c(%ecx)
call *0xbc(%ebx)
call *0xbc(%ebx)
call *0xc(%esp)
call *0xc8(%ecx)
call *0xd0(%edx)
1 0xc0102b38 call *0xc030f960(,%eax,4)
0xc014e5a3
2
0xc014e5c9
3
0xc01c63c6 jmp *0xc02bfb40(,%eax,4)
4
0xc01fa9d2
5
0xc01fd4f5
6
0xc01fd51e
7
0xc01fd5fa
8
0xc01fd605
9
10 0xc0204caa
1 0xc0102b38 call *0xc030f960(,%eax,4)
2
0xc014f024
3 0xc0159677
4 0xc015969d
5
0xc019ea96
1 0xc0102b38 call *0xc030f960(,%eax,4)
2
3
1 0xc0102b38 call *0xc030f960(,%eax,4)
2
0xc015dbcf
3 0xc015de16
0xc01fc5a1
4
5
0xc01fc5c9
1 0xc0102b38 call *0xc030f960(,%eax,4)
0xc0143e0e
2
3
0xc0143ebc
4 0xc0144460
5 0xc019dc50
6
0xc019f5d5
1 0xc0102b38 call *0xc030f960(,%eax,4)
2
1 0xc0102b38 call *0xc030f960(,%eax,4)
2 0xc015de80
3
0xc015decc
4 0xc016b711
1 0xc0102b38 call *0xc030f960(,%eax,4)
2 0xc015de80
3
0xc015decc
4 0xc016b711
1 0xc0102b38 call *0xc030f960(,%eax,4)
2 0xc015d7a7
call *0xec(%ecx)