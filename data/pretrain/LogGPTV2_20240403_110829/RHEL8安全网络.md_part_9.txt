上一命令输出中的任何非零值都表示有问题。如果您遇到这个问题，请开一个新的
[支持问题单](https://access.redhat.com/support){.link}，并附上上一命令的输出与对应的
IKE 日志。
::: title
**libreswan 日志**
:::
默认情况下，`Libreswan`{.literal} 日志使用 `syslog`{.literal}
协议。您可以使用 `journalctl`{.literal} 命令来查找与 IPsec
有关的日志条目。因为日志中相应的条目是由 `pluto`{.literal} IKE
守护进程发送的，因此请搜索 \"pluto\" 关键字，例如：
``` screen
$ journalctl -b | grep pluto
```
显示 `ipsec`{.literal} 服务的实时日志：
``` screen
$ journalctl -f -u ipsec
```
如果默认日志记录级别没有显示您的配置问题，请将
`plutodebug=all`{.literal} 选项添加到 `/etc/ipsec.conf`{.literal} 文件的
`config setup`{.literal} 部分来启用调试日志。
请注意，调试日志记录会生成大量的条目，`journald`{.literal} 或
`syslogd`{.literal} 服务的速率可能会抑制 `syslog`{.literal}
消息。要确保您有完整的日志，请将日志记录重定向到文件中。编辑
`/etc/ipsec.conf`{.literal}，并在 `config setup`{.literal} 部分中添加
`logfile=/var/log/pluto.log`{.literal}。
::: itemizedlist
**其它资源**
-   [使用日志文件进行故障排除](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#services-handling-syslog-messages_troubleshooting-problems-using-log-files){.link}。
-   [使用和配置
    firewalld](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/securing_networks/using-and-configuring-firewalld_securing-networks){.link}。
-   `tcpdump(8)`{.literal} 和 `ipsec.conf(5)`{.literal} 手册页。
:::
:::
::: section
::: titlepage
# []{#configuring-a-vpn-with-ipsec_securing-networks.html#related-information-configuring-a-vpn-with-ipsec}相关信息 {.title}
:::
::: itemizedlist
-   `ipsec(8)`{.literal}、`ipsec.conf(5)`{.literal}、`ipsec.secrets(5)`{.literal}、`ipsec_auto(8)`{.literal}
    和 `ipsec_rsasigkey(8)`{.literal} 手册页。
-   `/usr/share/doc/libreswan-版本/`{.literal} 目录。
-   [上游项目的网站](https://libreswan.org){.link} 。
-   [Libreswan 项目 Wiki](https://libreswan.org/wiki){.link} 。
-   [所有 Libreswan 手册页](https://libreswan.org/man/){.link} 。
-   [NIST 特殊发布 800-77：IPsec VPN
    指南](https://doi.org/10.6028/NIST.SP.800-77r1){.link} 。
:::
:::
:::
[]{#assembly_using-macsec-to-encrypt-layer-2-traffic-in-the-same-physical-network_securing-networks.html}
::: chapter
::: titlepage
# []{#assembly_using-macsec-to-encrypt-layer-2-traffic-in-the-same-physical-network_securing-networks.html#assembly_using-macsec-to-encrypt-layer-2-traffic-in-the-same-physical-network_securing-networks}第 5 章 使用 MACsec 加密同一物理网络中的第 2 层流量 {.title}
:::
这部分论述了如何为以太网链路中的所有流量配置 MACsec 以安全通信。
介质访问控制安全(MACsec)是一种第 2
层的协议，用于保护以太网链路上的不同的流量类型，包括：
::: itemizedlist
-   动态主机配置协议(DHCP)
-   地址解析协议(ARP)
-   互联网协议版本 4 / 6(`IPv4`{.literal} / `IPv6`{.literal})以及
-   任何使用 IP的流量（如 TCP 或 UDP）
:::
MACsec 默认使用 GCM-AES-128 算法加密并验证 LAN
中的所有流量，并使用预共享密钥在参与的主机之间建立连接。如果要更改预共享密钥，您需要更新网络中使用
MACsec 的所有主机上的 NM 配置。
MACsec 连接将以太网设备（如以太网网卡、VLAN
或隧道设备）用作父设备。您可以只在 MACsec 设备上设置 IP
配置，以便只使用加密连接与其他主机进行通信，也可以在父设备上设置 IP
配置。在后者的情况下，您可以使用父设备使用未加密连接和 MACsec
设备加密连接与其他主机通信。
macsec
不需要任何特殊硬件。例如，您可以使用任何交换机，除非您只想在主机和交换机之间加密流量。在这种情况下，交换机还必须支持
MACsec。
换句话说，有两种常用的方法来配置 MACsec：
::: itemizedlist
-   主机到主机，和
-   主机到交换机，然后交换机到其他主机
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
您只能在相同（物理或虚拟）LAN 的主机间使用 MACsec。
:::
下例演示了如何使用预共享密钥在 2 个主机之间配置 MACsec。
::: section
::: titlepage
# []{#assembly_using-macsec-to-encrypt-layer-2-traffic-in-the-same-physical-network_securing-networks.html#proc_configuring-a-macsec-connection-using-nmcli_assembly_using-macsec-to-encrypt-layer-2-traffic-in-the-same-physical-network}使用 nmcli 配置 MACsec 连接 {.title}
:::
您可以使用 nmcli 工具将以太网接口配置为使用
MACsec。这个步骤描述了如何创建使用以太网接口加密网络流量的 MACsec 连接。
在应该可以在此 MACsec 保护的网络中进行通信的所有主机上运行此流程。
::: title
**流程**
:::
在主机 A 中：
::: itemizedlist
-   在您配置 MACsec
    的第一个主机上，为预共享密钥创建连接关联密钥(CAK)和连接关联密钥名称(CKN)：
    ::: orderedlist
    1.  创建 16 字节十六进制 CAK：
        ``` literallayout
        dd if=/dev/urandom count=16 bs=1 2> /dev/null | hexdump -e '1/2 "%04x"'
        50b71a8ef0bd5751ea76de6d6c98c03a
        ```
    2.  创建 32 字节十六进制 CKN：
        ``` literallayout
        dd if=/dev/urandom count=32 bs=1 2> /dev/null | hexdump -e '1/2 "%04x"'
        f2b4297d39da7330910a74abc0449feb45b5c0b9fc23df1430e1898fcf1c4550
        ```
    :::
:::
在主机 A 和 B 中：
::: orderedlist
1.  创建 MACsec 连接：
    ``` literallayout
    # nmcli connection add type macsec con-name macsec0 ifname macsec0 connection.autoconnect yes macsec.parent enp1s0 macsec.mode psk macsec.mka-cak 50b71a8ef0bd5751ea76de6d6c98c03a  macsec.mka-ckn f2b4297d39da7330910a7abc0449feb45b5c0b9fc23df1430e1898fcf1c4550
    ```
    在`macsec.mka-cak`{.literal} 和 `macsec.mka-ckn`{.literal}
    参数中使用上一步生成的 CAK 和 CKN。在 MACsec-protected
    网络的每个主机上，这些值必须相同。
2.  配置 MACsec 连接中的 IP 设置。
    ::: orderedlist
    1.  配置 `IPv4`{.literal} 设置。例如，要为 `macsec0`{.literal}
        连接设置静态 `IPv4`{.literal} 地址、网络掩码、默认网关和 DNS
        服务器，请输入：
        ``` literallayout
        # nmcli connection modify macsec0 ipv4.method manual ipv4.addresses '192.0.2.1/24' ipv4.gateway '192.0.2.254' ipv4.dns '192.0.2.253'
        ```
    2.  配置 `IPv6`{.literal} 设置。例如，要为 `macsec0`{.literal}
        连接设置静态 `IPv6`{.literal} 地址、网络掩码、默认网关和 DNS
        服务器，请输入：
        ``` literallayout
        # nmcli connection modify macsec0 ipv6.method manual ipv6.addresses '2001:db8:1::1/32' ipv6.gateway '2001:db8:1::fffe' ipv6.dns '2001:db8:1::fffd'
        ```
    :::
3.  激活连接：
    ``` literallayout
    # nmcli connection up macsec0
    ```
:::
::: orderedlist
**验证步骤**
1.  要验证流量是否已加密，请输入：
    ``` literallayout
    tcpdump -nn -i enp1s0
    ```
2.  要查看未加密的流量，请输入：
    ``` literallayout
    tcpdump -nn -i macsec0
    ```
3.  显示 MACsec 统计数据：
    ``` literallayout
    # ip macsec show
    ```
4.  显示每种保护类型的单独计数器：仅完整性（加密关闭）和加密（加密打开）
    ``` literallayout
    # ip -s macsec show
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_using-macsec-to-encrypt-layer-2-traffic-in-the-same-physical-network_securing-networks.html#_additional_resources_2}其它资源 {.title}
:::
::: itemizedlist
-   [MACsec：加密网络流量的另一种解决方案](https://developers.redhat.com/blog/2016/10/14/macsec-a-different-solution-to-encrypt-network-traffic/){.link}
    博客。
:::
:::
:::
[]{#using-and-configuring-firewalld_securing-networks.html}
::: chapter
::: titlepage
# []{#using-and-configuring-firewalld_securing-networks.html#using-and-configuring-firewalld_securing-networks}第 6 章 使用和配置 firewalld {.title}
:::
[*防火墙*]{.emphasis}是保护机器不受来自外部的、不需要的网络数据的一种方式。它允许用户通过定义一组[*防火墙规则*]{.emphasis}
来控制主机上的入站网络流量。这些规则用于对进入的流量进行排序，并可以阻断或允许流量。
`firewalld`{.literal} 是一个防火墙服务守护进程，其提供一个带有 D-Bus
接口的、动态可定制的、基于主机的防火墙。如果是动态的，它可在每次修改规则时启用、修改和删除规则，而不需要在每次修改规则时重启防火墙守护进程。
`firewalld`{.literal} 使用区和服务的概念来简化流量管理。zones
是预定义的规则集。网络接口和源可以分配给区。允许的流量取决于您计算机连接到的网络，并分配了这个网络的安全级别。防火墙服务是预定义的规则，覆盖了允许特定服务进入流量的所有必要设置，并在区中应用。
服务使用一个或多个端口或地址进行网络通信。防火墙会根据端口过滤通讯。要允许服务的网络流量，必须打开其端口。`firewalld`{.literal}
会阻止未明确设置为开放的端口上的所有流量。一些区（如可信区）默认允许所有流量。
请注意，带有 `nftables`{.literal} 后端的 `firewalld`{.literal}
不支持使用 `--direct`{.literal} 选项将自定义的 `nftables`{.literal}
规则传递到 `firewalld`{.literal}。
::: section
::: titlepage
# []{#using-and-configuring-firewalld_securing-networks.html#getting-started-with-firewalld_using-and-configuring-firewalld}`firewalld`{.literal}入门 {.title}
:::
本节提供有关 `firewalld`{.literal} 的信息。
::: section
::: titlepage
## []{#using-and-configuring-firewalld_securing-networks.html#when-to-use-firewalld-nftables-or-iptables_getting-started-with-firewalld}使用 firewalld、nftables 或者 iptables 时 {.title}
:::
以下是您应该使用以下工具之一的概述：
::: itemizedlist
-   `firewalld`{.literal} ：将 `firewalld`{.literal}
    工具用于简单的防火墙用例。此工具易于使用，并涵盖了这些场景的典型用例。
-   `nftables`{.literal} ：使用 `nftables`{.literal}
    工具来设置复杂和性能关键的防火墙，如整个网络。
-   `iptables`{.literal} ：Red Hat Enterprise Linux 上的
    `iptables`{.literal} 工具使用 `nf_tables`{.literal} 内核 API 而不是
    `传统的`{.literal} 后端。The `nf_tables`{.literal} API
    提供向后兼容性，因此使用 `iptables`{.literal} 命令的脚本仍可在 Red
    Hat Enterprise Linux 上工作。对于新的防火墙脚本，红帽建议使用
    `nftables`{.literal}。
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
要避免不同的防火墙服务相互影响，在 RHEL
主机中只有一个服务，并禁用其他服务。
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_securing-networks.html#firewalld-zones_getting-started-with-firewalld}Zones {.title}
:::
`firewalld`{.literal}
可以用来根据用户决定放置在该网络中的接口和流量级别的信任级别将网络划分为不同的区域。一个连接只能是一个区的一部分，但一个区可以被用来进行很多网络连接。
`NetworkManager`{.literal} 通知接口区域的
`firewalld`{.literal}。您可以为接口分配区：
::: itemizedlist
-   `NetworkManager`{.literal}
-   `firewall-config`{.literal} 工具
-   `firewall-cmd`{.literal} 命令行工具
-   RHEL web 控制台
:::
后三个只能编辑适当的 `NetworkManager`{.literal} 配置文件。如果您使用 web
控制台 `firewall-cmd 或 firewall-`{.literal} config``{=html}
更改界面区域，则请求将转发到 `NetworkManager`{.literal}，且不会由
⁠`firewalld 处理`{.literal}。
预定义区域存储在 `/usr/lib/firewalld/zones/`{.literal}
目录中，并可立即应用于任何可用的网络接口。只有在修改后，这些文件才会复制到
`/etc/firewalld/zones/`{.literal} 目录中。预定义区的默认设置如下：
::: variablelist
[`block`{.literal}]{.term}
:   任何传入的网络连接都将通过适用于 `IPv4`{.literal} 的
    icmp-host-prohibited 消息和 icmp6-adm-prohibited（适用于
    `IPv6`{.literal} ）来拒绝。只有从系统启动的网络连接才能进行。
[`dmz`{.literal}]{.term}
:   对于您的非企业化区里的计算机来说，这些计算机可以被公开访问，且有限访问您的内部网络。只接受所选的入站连接。
[`drop`{.literal}]{.term}
:   所有传入的网络数据包都会丢失，没有任何通知。只有外发网络连接也是可行的。
[`external`{.literal}]{.term}
:   适用于启用了伪装的外部网络，特别是路由器。您不信任网络中的其他计算机不会损害您的计算机。只接受所选的入站连接。
[`home`{.literal}]{.term}
:   用于家用，因为您可以信任其他计算机。只接受所选的入站连接。
[`internal`{.literal}]{.term}
:   当您主要信任网络中的其他计算机时，供内部网络使用。只接受所选的入站连接。
[`public`{.literal}]{.term}
:   可用于您不信任网络中其他计算机的公共区域。只接受所选的入站连接。
[`trusted`{.literal}]{.term}
:   所有网络连接都被接受。
[`work`{.literal}]{.term}
:   可用于您主要信任网络中其他计算机的工作。只接受所选的入站连接。
:::