in order to determine which FSS conﬁgurations may be of par-
ticular interest to examine, as well as to introduce our metrics in
a simpliﬁed environment. As mentioned, the OpenSSL crypto-
graphic library used by libfss provides the three currently FIPS-
approved signature schemes as potential bases: RSA, DSA, and
ECDSA. Earlier forward-secure signature papers have mentioned
several other signature algorithms of potential use for constructing
forward-secure keys, including Guilleau-Quesquiter [18] and Fiat-
Shamir [17]. We do not include these schemes in our comparison
due to their limited use in existing real-world cryptosystems and
lack of acceptance by standards organizations at the present time
when compared to RSA, DSA, and ECDSA.
4Certain desired features of OpenSSL such as AES and full Elliptic
Curve Cryptography support were not available in released versions
of OpenSSL at the time of these experiments.
Table 1 summarizes the key generation, signing and veriﬁcation
times for the three base algorithms in ‘short-term’ and ‘long-term’
security strengths, as measured by fssbench. The fastest re-
sult for each operation is in bold. Short-term security represents a
keysize believed to be safe against brute-force attacks today, while
long-term security represents a keysize believed to be safe for the
next several decades [31]. There is no direct mapping between
ECDSA group size and RSA or DSA key size, but a group of ap-
proximately the same strength as DSA or RSA given the current
best known attacks on each scheme was chosen based on the rec-
ommendations in [10]; Koblitz curves were used due to better per-
formance compared to other elliptic curves.
Using the costs in Table 1, we are able to plot the curves for M1
and M2 for each of the signature schemes. Fig. 1 shows M1 and
M2 for the long-term keys. Both graphs have a logarithmic x-axis,
and M2 has a logarithmic y-axis as well. The plots start with a 1
to 1 ratio on the x-axis at the origin. The results for short-term keys
are very similar, and are omitted for brevity.
Combining these two metrics as described above, we get Fig. 2(a)
showing the three-dimensional surfaces deﬁned by M3. Since we
are concerned with the lowest of these surfaces, which is often ob-
scured by the less efﬁcient schemes, we also show the “view from
below” in Fig. 2(b). This second graph must be interpreted with
care, as it does not depict how much more efﬁcient the lowest
scheme may be compared to other schemes. In some cases, two
schemes will be nearly tangent to one another when they intersect,
in which case there is little difference in picking one scheme or the
other until one moves a signiﬁcant distance from the intersection.
 0 5 10 15 20 25 30 1 10 100 1000 10000Cost (ms)Verifications per SignatureRSA-1536DSA-1536ECDSA-t233k1 1 10 100 1000 10000 100000 1 10 100 1000 10000Cost (ms)Signatures per Key GenerationRSA-1536DSA-1536ECDSA-t233k1RSA-1536DSA-1536ECDSA-t233k1 1 10 100 1000 10000Signatures per Key Generation 1 10 100 1000 10000Verifications per Signature 1 10 100 1000 10000 100000Cost (ms)RSA-1536DSA-1536ECDSA-t233k1 1 10 100 1000 10000Signatures per Key Generation 1 10 100 1000 10000Verifications per Signaturekeygen
sign (Cs)
verify (Cv)
update
gen+up (Cu)
BMTree 256
RSA
5,630
10.5
4.47
635
654
ISum 256
RSA
83,300
10.4
0.576
1,280
1,610
RSA
10,500
10.5
1.08
959
997
2,980
10.5
1.08
1,310
1,320
Short-Term Security
Prod 16*16 MMM 255 BMTree 256
RSA
ECDSA
ISum 256
ECDSA
949
3.74
7.45
14.8
18.5
123
3.75
66.7
14.4
14.9
Prod 16*16 MMM 255
ECDSA
124
3.73
14.9
11.5
12.0
ECDSA
40.8
3.79
14.9
15.1
15.2
Table 2: Forward-secure signature scheme performance (ﬁrst 255 periods), in milliseconds.
Other times, as is the case in Fig. 2(b), the two surfaces intersect at
a steeper angle, causing larger differences between schemes when
moving away from the intersection.
From Fig. 2, we can clearly see the areas where particular schemes
are most efﬁcient. When both R1 and R2 are low, ECDSA per-
forms the best due to signiﬁcantly cheaper key generation. As R1
and R2 increase, the amortized costs of key generation and signing
approach zero, and the performance of each scheme converges to
the cost of veriﬁcation alone.
Looking at the relationship to our illustrative examples from Sec-
tion 3.1, we see that the CA would fall solidly in the left portion
of Fig. 2(b), where RSA is the dominant algorithm. For the SSL
server, ECDSA’s lower signing cost compared to RSA makes it a
better choice. The case of digitally signing documents lies toward
in the border region between RSA and ECDSA, with the popular-
ity of the signer (i.e. how many signatures they produce over their
key’s lifetime) being the determinant for which scheme to chose.
As more signatures are generated, RSA becomes the preferable al-
gorithm.
3.3.2 Forward-Secure Signature Performance
2
Continuing our analysis, we examine forward-secure signature
schemes in a similar manner. We assume for now that the maxi-
mum number of periods required from a key is a constant, deter-
mined by the usage much like the required key strength. Later in
this section we will explore the impact of relaxing this assumption.
Table 2 shows the results for one of these combinations, 255 and
256 period FSS keys using short-term security base scheme keys in
their construction. Each key is used for its ﬁrst 255 periods. Other
cases with different base key strengths and maximum periods have
similar results, but are omitted due for brevity.
M1 and M∗
We ﬁrst graph M1 and M∗
2 with the FSS scheme used being the
only variable, ﬁxing the base scheme to be either RSA (Fig. 3) or
ECDSA (Fig. 4); as we saw in the previous subsection, DSA is
always at least an order of magnitude slower than the most efﬁcient
scheme, and therefore we do not consider DSA in the remainder
of our study. This separation by base scheme allows the impact
on performance due to choice of FSS scheme to be isolated. Also
included in the graphs for reference when determining the overhead
of FSS is the non-forward-secure base scheme used.
In Fig. 1, we saw that for M1, RSA was the most efﬁcient signa-
ture scheme and for M2, ECDSA was the most efﬁcient. We there-
fore begin our analysis of the forward-secure schemes by looking at
M1 for RSA based schemes and M∗
2 for ECDSA based schemes.
As expected, in Fig. 3(a) the schemes separate into three clus-
ters, where within each cluster there is essentially no difference in
performance among schemes for M1. These clusters correspond
directly to the number of base signature veriﬁcations required by
each FSS scheme as described in Section 2. The signing costs for
all four FSS schemes are nearly identical to that of the base scheme,
and have no impact in differentiating schemes. The rate at which
(a) M1.
(b) M∗
2.
Figure 3: Performance of short-term forward-secure schemes
using RSA, with a maximum update period of 255.
Turning to M∗
the three groups stabilize to a nearly constant cost closely resem-
bles that of RSA, indicating that the FSS scheme itself has little
impact on this behavior.
2 for ECDSA-based schemes in Fig. 4(b), we see
that initially all four FSS schemes perform measurably worse than
ECDSA, ranging from twice as expensive for Product to three times
as expensive for Iterated Sum. Product, with the fastest update and
signing costs when using ECDSA, is the least expensive forward-
secure scheme for all values of R∗
2; meanwhile, Iterated Sum, whose
weakness is very expensive key generation and updating, is the
slowest. Unlike the results for M1, no clustering of schemes oc-
curs for the second metric. Instead, all four FSS schemes converge
to the cost of non-forward-secure ECDSA by 100 signatures per
update, after which point they are nearly indistinguishable. This
behavior can be attributed to the cost of signing being identical for
all four FSS schemes as well as the base scheme, and the update
cost being sufﬁciently amortized.
Because it is impossible to pick one base scheme to use when
generating and updating a FSS key and another for veriﬁcation, it is
 0 2 4 6 8 10 12 14 16 1 10 100 1000 10000Cost (ms)Verifications per SignatureRSA-1024BMTree 256 RSAISum 256 RSAProd 256(16*16) RSAMMM 255 RSA 1 10 100 1000 10000 1 10 100 1000 10000Cost (ms)Signatures per UpdateRSA-1024BMTree 256 RSAISum 256 RSAProd 256(16*16) RSAMMM 255 RSA(a) M1.
(b) M∗
2.
Figure 4: Performance of short-term forward-secure schemes
using ECDSA, with a maximum update period of 255.
useful to look at the other half of the picture for each base scheme.
In Fig. 4(a), the same clustering seen in Fig. 3(a) is present, and
again the asymptotic behavior as the number of veriﬁcations in-
creases resembles that of ECDSA. As with M1, some of the dif-
ferences in Fig. 3(b) for M∗
2 also directly reﬂect those seen in
Fig. 1(b) between RSA and ECDSA. Unlike M1, however, the or-
dering of FSS schemes changes between Figs. 4(b) and 3(b), with
only Iterated Sum as the slowest remaining the same. The reason
for this is that while ECDSA has almost the same cost for key gen-
eration and signing, for RSA the ﬁrst of these operations is much
more expensive. This switches the advantage from Product, which
has a number of key generations but only one signature, to Bellare-
Miner Tree, which has more signatures but fewer key generations
than any of the other schemes.
M∗
We now arrive at the heart of our analysis. Combining the results
for M1 and M∗
3 for the forward-secure schemes plot-
ted in Figs. 5, 6, and 7. We begin by continuing to examine the
results with the FSS scheme used being the only variable, and later,
we look at all eight conﬁgurations together in Fig. 7.
2, we see M∗
3
In Fig. 5, we see that at different times, Bellare-Miner Tree, It-
erated Sum, and Product each are the most efﬁcient when using
RSA as the base scheme. Bellare-Miner Tree starts out as the most
efﬁcient for low veriﬁcation and signature frequencies due to the in-
creased impact Cu has on overall performance in these situations.
As either R1 or R∗
2 grows, Bellare-Miner Tree’s performance stays
nearly constant while the remaining algorithms quickly improve.
(a) M∗
3.
(b) Lowest-cost FSS scheme for M∗
3.
Figure 5: Performance of short-term FSS schemes with 255 pe-
riods using RSA.
Product, which had good performance for both M1 and M∗
2, brieﬂy
takes over as the lowest cost, with MMM and Iterated Sum approx-
imately one and a half times more expensive at the point where
Product and Bellare-Miner Tree are equal. Finally, as was the case
with traditional schemes, as the parameters grow larger, the results
of M1 dominate. Iterated Sum, with its optimal Cv, becomes the
scheme to use. At the crossover point, MMM, Iterated Sum, and
Product are all nearly identical in cost but Bellare-Miner Tree is
already an order of magnitude slower. At the transition between
Bellare-Miner Tree and Product, the difference between FSS and
RSA is the greatest. The maximum occurs at one veriﬁcation per
signature and 100 signatures per update, where FSS is four times as
expensive as RSA. As the parameters continue to increase, the costs
decrease and stabilize with Iterated Sum and RSA having nearly
identical performance, MMM and Product half as fast, and Bellare-
Miner Tree signiﬁcantly slower.
For Elliptic Curve DSA, the results are less interesting. Unlike
RSA, where Cu is signiﬁcantly greater than Cs or Cv, all three
costs are much closer to one another for ECDSA based conﬁgura-
tions. Therefore, even when R1 and R∗
2 are small, the share of up-
date and signing for each veriﬁcation never grows large enough to
outweigh the savings in Iterated Sum from having to perform fewer
base veriﬁcations. In Fig. 6, Iterated Sum is always the least expen-
sive scheme, and quickly converges to the same cost as ECDSA.
MMM and Product are almost indistinguishable from one another,
and both converge to twice the cost of Iterated Sum or ECDSA.
 0 10 20 30 40 50 60 70 80 1 10 100 1000 10000Cost (ms)Verifications per SignatureECDSA-t163k1BMTree 256 ECDSAISum 256 ECDSAProd 256(16*16) ECDSAMMM 255 ECDSA 1 10 100 1 10 100 1000 10000Cost (ms)Signatures per UpdateECDSA-t163k1BMTree 256 ECDSAISum 256 ECDSAProd 256(16*16) ECDSAMMM 255 ECDSARSA-1024BMTree 256 RSAISum 256 RSAProd 256(16*16) RSAMMM 255 RSA 1 10 100 1000 10000Signatures per Update 1 10 100 1000 10000Verifications per Signature 0.1 1 10 100 1000 10000Cost (ms)BMTree 256 RSAISum 256 RSAProd 256(16*16) RSAMMM 255 RSA 1 10 100 1000 10000Signatures per Update 1 10 100 1000 10000Verifications per Signature(a) M∗
3.
(a) M∗
3.
Figure 6: Performance of short-term FSS schemes with 255 pe-
riods using ECDSA.
Bellare-Miner Tree is nearly constant in its cost for all values of
R1 and R∗
2, but that constant is orders of magnitude higher than
the cost of the rest of the schemes. The worst performance rela-
tive to ECDSA occurs initially, where the expensive key generation
leads to Iterated Sum costing twice as much as ECDSA.
Finally, we look at the complete picture with both ECDSA and