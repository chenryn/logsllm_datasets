**Issue Type:**
- [ ] Bug Report
- [x] Feature Request
- [ ] Support Request

**Current Behavior:**
When attempting to query `ngContent` using a superclass, the operation fails.

**Expected Behavior:**
The ability to successfully query `ngContent` using a superclass should be supported.

**Minimal Reproduction with Instructions:**
Currently, if a component includes `ng-content` within its template, it can render any passed content (e.g., other components or HTML). However, referencing this content is only possible if the exact type of the component is known. For example:
```typescript
@ContentChildren(Component1) myComponent;
```
In cases where the specific component type is unknown, selection becomes unfeasible. The proposed feature would allow for selecting components based on a shared superclass. If `Component1` and `Component2` both extend `MySuperClass`, they could be selected as follows:
```typescript
@ContentChildren(MySuperClass) myComponents;
```

**Motivation / Use Case:**
The primary motivation for this change is to facilitate the injection of dynamic components while enabling their instances to be referenced by the parent component. In my use case, I am developing a wizard that allows developers to create pages with any necessary components. I assume these components share a common class or interface, which would enable me to invoke methods such as `validate` to progress through the wizard.

**Environment:**
- Operating System: Windows 10
- Angular Version: 2.0.1
- IDE: WebStorm
- Build Tools: Webpack, Gulp

**Additional Notes:**
A current workaround involves passing the components as part of a configuration (e.g., an array of components) and referencing them in that manner. However, it would be more convenient and elegant to reference the instances of dynamically injected components via `ng-content`.

This request may also relate to issue #8580, as I would expect the behavior to be consistent in both scenarios. The linked issue suggests that superclass selectors should work, at least when the components are not dynamically defined.