that the machine M3 does not belong to the PSS. So, the
Privilege-Level attribute can be propagated vertically within
M3, but not horizontally. That is, when a Locally-Rootable
process on M3 logs into other machines it cannot pass on
its Privilege-Level attribute as Rootable. This test shows
the selective propagation of the Privilege-Level attribute for
Locally-Rootable processes.
3.3. Performance Overhead
NPTrace introduces additional overhead during the
setup of a remote login session. We performed a micro-
benchmark to measure this overhead. We calculated the ex-
tra time required due to the NPTrace prototype to setup a re-
mote login session using ssh. We repeated this test 10 times
to obtain statistically reproducible results. This over-
head has to be paid at the start of a remote login session for
both Rootable and Non-Rootable processes. If a user phys-
ically logs into host C, and later attempts to log into host B
from Host A, then the additional overhead that NPTrace in-
troduces includes are:
1. Overhead due to communication between the
user daemons on end hosts A and B: Two mes-
sages are exchanged where host B requests for the
Privilege-Level attribute and the process-origin infor-
mation from host A.
2. Time spent in the interaction between user daemon
and kernel on both hosts A and B: To ﬁnd out the re-
mote parent of the process, the user daemon on host
B asks the kernel for the remote port number, and the
user daemon on host A retrieves the Privilege-Level at-
tribute and process-origin information from the kernel
based on the port number.
3. Overhead associated with the key validation pro-
cess: Host B communicates with the key generation
machine, host C, to validate the authenticity of the re-
ply from host A.
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:38:22 UTC from IEEE Xplore.  Restrictions apply. 
7
A remote login session using ssh takes an additional 12.5
msec when using NPTrace. This additional time includes
overheads for all the above mentioned checks. The total
number of additional messages exchanged per session over
the network is 4, which is quite modest. Compared with the
network bandwidth spent after a successful login, this over-
head is quite small and should not pose any burden on a
modern LAN.
We believe that for other remote login services (e.g. tel-
net) the overhead would be similar, as the same mecha-
nism is followed to retrieve and verify the Privilege-Level
attribute in both cases. Both of them share similar mecha-
nism to set up a session, and thus should involve the same
number of message passing among NPTrace entities.
The overhead of 12.5 msec is the only overhead that
NPTrace introduces, and impacts only the session startup
time. Hence, only those processes that try to establish a con-
nection to remote hosts are affected. All the other processes
are unaffected. During vertical propagation of the Privilege-
Level attribute, the ﬁelds in the task structure of the parent
are also copied in the task structure of the child. This re-
quires some CPU time. But this overhead is equivalent to 12
bytes of memory to memory copy, and is thus very small.
3.4. Attack Analysis
In this subsection, we discuss the behavior of NPTrace
under various attack scenarios.
Eavesdropping An adversary could try to ﬁgure out the
NPTrace user-level daemon communication protocol be-
tween two hosts by snooping the channel. He could imper-
sonate a host responding with a valid Rootable token to gain
Rootable privilege on a host in PSS. To prevent such at-
tacks, the NPTrace daemons communicate through a secure
OpenSSL channel in the current implementation. There is
one extra check from the requesting host to the originating
host to conﬁrm that no malicious user is faking the commu-
nication.
Daemon Tampering Attack An attacker could reverse-
engineer the binary image of the NPTrace daemon and mod-
ify it into a Trojan binary that could impersonate a legiti-
mate NPTrace to give out faked Rootable tokens. In the ex-
treme case, if the attacker manages to replace the user dae-
mon in such a way that, it does not break the authentication
but still manages to ”lie” to the requesting hosts, NPtrace
will still be able to detect such “lies” when the requesting
daemon communicates to the originating host to conﬁrm the
reply, as explained in section 2.6.
Kernel Tampering Attack We will ﬁrst explain the ker-
nel tampering attack. Suppose the attacker has root access
to a machine M1 which is outside PSS and he is trying
to gain root access on a host machine M2 that belongs to
PSS. Since attacker has root privilege on host M1, she can
modify the kernel any way he wants. In this case, the at-
tacker could modify the kernel so that all the processes are
Rootable. As a result, when she remotely logs into host M2,
the process that results from the login will also become
Rootable. NPTrace solves this problem using scheme ex-
plained in section 2.6. NPtrace generates a key for each lo-
gin process from a console on a PSS machine, and propa-
gates this key together with the horizontal and vertical prop-
agation of the Privilege-Level attribute. Each key includes
the IP address of the host on which it originated. When a
Privilege-Level attribute is passed horizontally, the receiver
machine checks the validity of the Privilege-Level attribute
by consulting with the originating host of the associated
propagated key directly. Because a key generating host is
guaranteed to be in PSS, it is protected by physical secu-
rity and thus is least likely to be compromised by a remote
attacker.
Buffer Overﬂow Consider a scenario where a Rootable
process is vulnerable to buffer overflow attack. After
an attacker successfully compromises this process through a
buffer overﬂow security hole, she effectively has control of
a Rootable process, even though she is from a machine out-
side the PSS. The reason NPTrace cannot help in this case
is because the attacker does not log into the victim machine
through telnet or SSH.
Backdoors After a successful buffer overﬂow attack the
attacker generally tries to create a backdoor for herself.
This backdoor is typically a program that listens on a port
for commands from remote attacker. After the successful
launching of a backdoor program, the attacker can execute
arbitrary commands through the backdoor. NPTrace does
not solve this problem, because once a process becomes
Rootable, its Privilege-Level attribute is blindly copied to
the children without any further checks.
4. Related Work
The related work section is divided into three sections.
In the ﬁrst section, we distinguish our work from the ap-
proaches of network traceback. In the second section, we
compare our approach to the approaches that use security
extensions to the operating system. The third section ex-
plains secure authentication systems.
4.1. Network Traceback
The goal of network traceback research is to allow de-
termination of the source of attack trafﬁc, so that a particu-
lar host used by a human to initiate an attack can be identi-
ﬁed. One of the techniques [2, 13] which is being widely ex-
plored is to collect the traceback information at the routers
to allow traceback of DoS trafﬁc. Other methods [3, 6] add
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:38:22 UTC from IEEE Xplore.  Restrictions apply. 
8
marking to the packets to probabilistically determine the
source, given a sufﬁcient packets. We have borrowed the
concept of traceback to identify the host on which the pro-
cess originated.
Intruders generally log into the target machine through
a chain of multiple computer systems to hide their trace.
A paper [10] discusses one approach to locate the origin
by tracing through the chain. By comparing the packet logs
of the intruder on one machine with all the other recorded
logs, they found out the deviation. If the deviation is small
then the two hosts belong to the same chain. This method
is not efﬁcient when the data is encrypted. A similar ap-
proach [14] makes use of timing of packets to ﬁnd the chain.
Hence, it could be used in case of encrypted data. Another
method [7] compares the rate of sequence number increase
in TCP streams as a matching mechanism, which works as
long as the data is not compressed at different hops and
does not see excessive network delay. These methods rely
on the network information which could be tricked using
the well known methods to defeat network intrusion detec-
tion systems. The problem with these approaches is that,
they rely on techniques which cannot uniquely identify the
originating host and most of these techniques are ofﬂine.
NPTrace requires accurate and instantaneous identiﬁcation
of the originating host and hence the above methods are not
useful in our approach.
One of the recent attempts [4] tries to solve the prob-
lem of network traceback by ﬁnding the process origin. Ev-
ery process is associated with the information about its ori-
gin and thus the audit information is enhanced by logging
the origin and destination of network sockets. This is the
only approach that tries to solve the problem of network
traceback by monitoring each process. We are using sim-
ilar concept of ﬁnding the origin of a process but the in-
tentions differ. We are trying to solve the security problems
like password attacks and privilege escalation. They are us-
ing the log information to solve problem of network trace-
back to ﬁnd a system causing DoS attack.
4.2. Fine-Grained Access Control
There has been some work [1, 5] that attempts to use ex-
isting system information to match active incoming and out-
going streams. But this work has been shown to be imprac-
tical to securely implement.
Extensions[11][8] to Unix Security Model exist to pro-
vide ﬁne-grained access to privileged commands. Capa-
bility Bounding Set[11] is a kernel based access control
scheme on Linux, which deﬁnes a set of rules that are as-
signed to processes, users, ﬁles that even a root user must
follow. Once a capability is removed from the bounding
set, it may not be used by any process on the system, not
even a process owned by root. A user-level program can use
this feature to restrict itself to only those privileges it really
needs, and dropping all other capabilities. Once dropped,
neither the user-level program nor binary it spawns will
be allowed to perform privileged operations, regardless of
whether the program is running as root or not. The draw-
back of this technique is that they allow only one of the two
options to exist at a time, a capability could be either com-
pletely removed or completely retained. If a particular priv-
ilege is dropped, even a valid root process is restricted from
using that privilege. These extensions restrict privileges of
a root user. So, even a malicious root user can only access
system resources exposed to him, and rest of the system is
protected. These techniques curtail the damage but cannot
eliminate it completely. In our approach, instead of restrict-
ing the privileges of a root user, we ensure that user is gen-
uine and allow full access.
4.3. Secure Authentication Systems
In some secure environments RSA/DSA authentication
protocol [9] of OpenSSH is used as an alternative to pass-
word based login schemes. This protocol makes use of a pri-
vate and a public key pair to establish a secure connection
to remote systems without the need to supply a password.
When a host tries to log into a remote host, the remote host
uses the public key to challenge the requesting host. Re-
questing host uses its private key to decrypt the challenge
and replays the deciphered challenge. Thus the remote host
is assured of the requesting host’s authenticity. The private
key is extremely crucial for this scheme to work and has
to be safeguarded from theft, as it could lead to unautho-
rized entry into the system. The private key is stored in en-
crypted format in the home directory or is stored ofﬂine
on some device such as ﬂoppy disk. This scheme makes it
harder for the attacker to log into the system since, he has to
know the unique private key for the user account he is trying
to hack into. Security provided by smart cards also falls in
this category. These security mechanisms try to make the lo-
gin process extremely secure so that nobody can ever break
this protocol. This is a very strong assumption and NPTrace
does not rely only on the security of passwords, private keys
or the two fold security provided by such mechanisms. Pass-
words could be stolen through automated cracking or social
engineering. Secret Keys stored in home of the user could
be accessed maliciously. Our approach is applicable even
when attacker already knows a way to login to such a se-
cure system, where the above strong security mechanisms
are of no use.
5. Conclusion
In this paper, we present the design, implementation, and
evaluation of a secure login mechanism that leverages phys-
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:38:22 UTC from IEEE Xplore.  Restrictions apply. 
9
[7] K.Yoda and H. Etoh. Finding a connection chain for tracing
intruders. In Proceedings of the 6th European Symposium on
Research in Computer Security, October 2000.
[8] F. Project. jail : Imprison process and its decendents. http:
//www.freebsd.org/doc/en_US.ISO8859-1/
books/developers-handbook/ja%il.html.
[9] D. Robbins.
Openssh key management: Understand-
http://www-106.ibm.
ing rsa/dsa authentication.
com/developerworks/library/l-keyc?t=gr,
p=RSA-DSA.
[10] S. Staniform-Chen and L.T. Heberlein. Holding intruders ac-
countable on the internet. In Proceedings of the 1995 IEEE
symposium on Security and Privacy, 1995.
[11] Spoon. Lcap : Linux kernel capability bounding set. http:
//pw1.netcom.com/˜spoon/lcap/.
[12] W. R. Stevens. UNIX Network Programming, Second Edi-
tion: Networking APIs: Sockets and XTI,. Prentice Hall,
1998.
[13] T.W. Doeppner, P. N. Klein and A. Koyfman. Using router
stampping to identify the source of ip packets. In Proceed-
ings of the 7th ACM Conference on Computer and communi-
cation Security, November 2000.
[14] Y.Zhang and V. Paxson. Detecting stepping stones. In Pro-
ceedings of the 9th USENIX Security Symposium, August
2000.
ical security to effectively stop remote attackers from gain-
ing root privilege even when they know root password. The
proposed secure login prototype, called NPTrace, requires
a minimal amount of modiﬁcation to the kernel, which in-
cludes addition of an Privilege-Level attribute to the pro-
cess structure and a module to perform system call mon-
itoring. The prototype implementation is integrated seam-
lessly into the existing system and is completely transparent
to the users. The NPTrace architecture enforces an invariant
that every Rootable process can be traced back to a process
that is either a local daemon process or a remote process
that has its origin in a host that belongs to a physically se-
cured host set called PSS. A fully operational NPTrace pro-
totype shows that the proposed architecture can indeed pre-
vent all remote logins with stolen root password from hav-
ing root privilege, with a negligible performance overhead.
In addition to tightening up security, the Privilege-Level at-
tribute of a process can also be used in many other applica-
tions such as network traceback and better system manage-
ment and administration.
The current NPTrace prototype heavily relies on correct
identiﬁcation of remote login service processes like sshd
and telnetd, which is currently based on process ID. Our
present focus is on developing a robust mechanism for de-
tection of such processes. A more general approach has to
be developed to establish remote parent-child relationship,
not just for telnet, SSH or similar services. We need to de-
velop a mechanism that could identify that a process is per-
forming some operations based on what it receives over a
socket connection from another remote process. If this as-
sociation can be reliably established, one could then link
the privilege of a local process with that of the remote pro-
cess.
References
[1] B. Carrier and C. Shields. A recursive session token proto-
col for use in computer forensics and tcp traceback. In Pro-
ceedings of the IEEE INFOCOM 2002, 2002.
[2] D.Dean, M. Franklin and A. Stubbleﬁ eld. An algebric ap-
proach to ip traceback. In Proceedings of the 2001 Network
and Distributed System Security Symposium, February 2001.
[3] D.X. Song and A. Perrig. Advanced and authenticated mark-
ing schemes for ip traceback. In Proceedings of the IEEE IN-
FOCOM 2001, April 2001.
[4] Florian Buchholz and Clay Shields. Providing process origin
information to aid in network traceback. In Proceedings of
the 2002 USENIX conference, June 2002.
[5] H.Y Jung, H.L.Kim, Y.M.Seo, G.Choe, S.L.Min, C.S.Kim
and K.Koh. Caller identiﬁ cation system in the internet en-
vironment.
In UNIX Security Symposium IV Proceedings.,
1993.
[6] K. Park and H. Lee. Effectiveness of probabilistic packet
marking for ip traceback under denial of service attack. In
Proceedings of the IEEE INFOCOM 2001, April 2001.
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
10
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:38:22 UTC from IEEE Xplore.  Restrictions apply.