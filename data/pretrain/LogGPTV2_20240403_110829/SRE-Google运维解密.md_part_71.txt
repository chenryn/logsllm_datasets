---
## Page 385
阅读上述图表的一些建议：
图28-1:培养SRE加入on-call的计划图
·正式参加on-call是SRE新员工的一个重要里程碑，在这之后，学习过程将基本
老员工也参与的。在SRE正式参加on-call之前，应该处于持续不断的学习过程中。
在SRE正式参见on-call之前开始，而其他的则应该是持续性的，同时要求SRE
为了使培训效果最优，培训课程应该节奏合理：有些可以立即开始，有些则应该
学习方式的人，让他们都能找到适合自己的活动。
体和非常具有主动性的。还有一些活动是混合型的。这样的安排是为了满足不同
这里的某些活动是抽象性的，还有些是被动性的。其他的一些活动，则是非常具
渐增大，所需投入也在增加，很有可能在参与on-call之后还会继续。
三角形的“项目工作”
标注的。
靠自己主导，是未定义的一
持续性的
时间
思考（抽象）
集中地学习
持续学习
意味着新项目刚开始都很小，随着时间推移，
阅读事后总结
修改文档
一所以SRE参与on-call之后的培训计划都是用虚线
灾难演习角色扮演
新的SRE已经招聘到了，接下来怎么办
见习on-call
随机应变
反向工程/
持续学习
破坏并修复
实践（实际）
真的东西
工责
项
与感
目
复杂程度逐
343
394
---
## Page 386
395
都可以靠“动手实践”来获得，而不是靠逻辑推理得出。如果这个职位只需要处理工单
多比较内省型性格的成员来说（尤其是面临上面的间题2和3时），培训过程中的混乱
SRE学员肯定会存在以下问题：
就够了，那么这个职位其实并不是一个SRE职位。
运维工程师，但实际效果肯定也不会太好。这种培训方式同时假设该团队的大部分知识
能力的工程师都没法在这种环境中成长。虽然这种培训最终可能能够培养出一些不错的
习惯在未知中探索的工程师最后能够从这种大坑里爬出来。但是更常见的是，很多很有
SRE团队一般采用这种被动式的教育方式来“培训”新员工。如果幸运的话，新招来的、
这种“浴火重生”式的学习方式一般都反映了团队的目前状况；关注于运维，被动性的
但是比较差的培训经历：
动性工作的产生，在培训的过程中也应该体现出这一点。下面提到的是一个非常常见，
兼有。每个SRE团队都应该具有的一个重要目标是利用积极主动的办法去减少和限制被
正如本书其他部分所描述的那样，在SRE团队的职责中，主动性任务准2和被动性任务注3
培训初期：重体系，
344
也更加适合培训。
节所描述的方法。这些建议与处理工单和报警有同样的效果，但是更加系统化、阶段化，
或者不确定性会导致他们学习速度变慢，甚至无法适应。所以，我们应该考虑使用下一
或系统管理员职位转换成没那么清晰的SRE职位，这已经足够打击他们的自信了。对很
新的SRE成员通常刚从另外一个公司跳槽，或者是刚毕业，或者刚从传统的软件工程师
摸着石头过河的。”
部的流程，以及全部的系统知识。”这时候一个老成员补充了一句，“我们这里都是
处理这些工单的。某一天你就会突然开窍，发现你已经掌握了我们全部的工具，全
会有很多东西要学习，这个只能靠你自己了”，
个有经验的SRE成员的帮助来了解每个工单的背景知识，以便处理。“当然了，你
第一天，所有新的工单就全部指派给了他。同时，主管告诉John可以寻求任何一
例如回复工单、处理报警，以及进行琐碎的二进制文件发布等工作。John入职的
John刚刚加入了FooServer SRE团队。这个团队的老手们每人都负担了很多琐事
被动性SRE的工作包括：在线调试，故障排除，处理on-call情况等。
）什么时候我能积累到足够的经验参加on-call？
我现在的进度如何？
我现在正在做的是什么工作？
第28章
迅速培养SRE加入on-call
而非混乱
架构设计咨询，发布流程协调等。
，主管说道，“最后你一定会学会快速
---
## Page 387
SRE专家：Sally W、Dave K、Jen P
搜素结果混合服务器（Mixer）
可能如下所示。
SRE 团队利用一个“on-call学习检查列表”来组织自己的培训资源。简化版的检查列表
际操作练习等）是需要团队主管以及负责设计和进行培训的SRE讨论的。Google搜索
究竟如何实际教授这些课程（可以是非正式的白板讨论，也可以是正式的培训，以及实
5）整体
4）基础设施
3）
2）前端服务
1）请求是如何进入系统中的
直接面向用户的服务系统，可以按以下课程顺序进行培训。
照类似作用分组，还是按照常用的执行顺序分组。例如，如果团队负责的是一个实时、
了解任何一个技术栈，或者任何一个子系统都需要一个起始点。我们应该考虑将培训按
而学员也应该尽早进行真实的实践操作。
性和实践性的学习组合到一起：一些新成员经常会用到的、系统的抽象概念应该优先，
件列表）
性培训都要比直接处理随机出现的工单和琐事要好，但是我们应该有选择地将一些理论
在系统中加入某种顺序性，以便新的SRE成员可以建立某种学习路径。任何类型的系统
开发团队联系人：JimT、results-team@（邮
需要调用的后端：ResultRetrievalServer、
前端：frontend server
系统性、
GeolocationServer、PersonalizationDatabase
调试的一些技巧，问题升级的流程，
后端，基础设施，计算资源管理等。
缓存，后端负载均衡系统。
中层服务
应用程序前端，日志记录，用户体验SLO等。
网络和数据中心的一些基本概念，
累积型的学习方式
，前端的负载均衡系统，代理等。
，紧急情况的演练。
培训初期：重体系，而非混乱
·哪些后端是Mixer的“关键路径”，以及
·如何回滚Mixer更新
·Mixer部署在哪些集群里
必备知识
原因
345
<396
---
## Page 388
397
346
注4正如游戏里那样！
时间同时分配在学习和项目工作中可以给他们一种参与感和效率感，这比让他们专攻两
础设施知识，同时让他们可以为服务做一点小的但是有意义的贡献。让新的SRE成员将
Google内的标准做法是：所有的工程师都会被分配一个初始项目，给他们提供足够的基
信任的好方法，因为老员工需要和新员工进行交流，了解新的组件或者新的流程。在
许新成员向整个服务中加入一点点新东西是很有激励性的。这也是鼓励团队之间构建
SRE是天生的问题解决者，所以我们应该给予他们一个难题去解决！在学习过程中，允
目标性强的项目工作，而非琐事
会被赋予系统最高权限。
员将会逐步拥有系统的更高权限。搜索SRE团队将这称为“升级”，准4所有的学员最后都
访问组件的内部信息。接下来则允许修改生产环境状态。随着检查列表项目的完成，学
可以考虑在服务访问权限控制配置中实现一种分层模式。第一层访问权限允许学员只读
关于服务内部工作原理的问题和下面列出的比较类似：
讲师通过检查学员的答案可以了解他们目前的学习进度，以及是否应该进入下一阶段
建立虽然不一定用正式的考试来进行，但是最好能包括一些问答形式的家庭作业。培训
最好能够让所有参与的人都能大概了解某个学员究竟记住了多少知识。这种反馈机制的
完成这个检查列表可以学到哪些知识和技能。
单的问题以便自检。该文档同时提供了一些实际的操作性环节，这样学员可以知道他们
式罗列出来，指出最有用的文档资源，以及一些服务的基本知识，最后还提供了一些简
注意，上述章节并没有直接将流程、调试步骤以及手册嵌入其中；而是将专家的联系方
·生产手册：如何发布Mixer新版本
·结果混合服务总览：“生产环境”章节
·结果混合服务总览：“请求执行”章节
阅读并理解以下文档：
搜素结果混合服务器（Mixer）
·Mixer性能分析
●哪些后端服务器是“关键路径”中涉及的，以及为什么？
解问题？
你认为该架构的第一个瓶颈在哪里？如果该瓶颈确实出现问题，哪些步骤可以缓
该服务的哪些方面可以简化，或者自动化？
第28章迅速培养SRE加入on-call
·如果新推送的GeolocationDatabase数据
·如果某个常规发布目正好是公司假期，发
回答以下综合性问题：
有误，如何修复
布时间如何变动
续表
---
## Page 389
执择的过程。在紧急情况处理的有限时间中，SRE只能在几百个可能的选择中选择几个
我们可以将SRE处理大规模系统紧急情况的方式理解为他们在实时展开的决策树中不断
统计学和比较性思维：在压力下坚持科学方法论
数据流动，SRE就能够在陌生环境中更高效地处理始料未及的额外难题。教授SRE成员
接下来我们会详细讨论这些特点，这样我们才能知道如何培训SRE来获取这些知识和
运维、传统的系统管理员模式是不够的。不光要有大规模海量工程化思维，SRE同时也
我们究竟需要培养什么样的工程师？在SRE这种复杂度和规模下，工程师仅仅做到关注
体的培训材料当然要取决于工作中需要用到的技术，但是这里关注的更重要的问题是：
我们可以提出一系列“如何”培训SRE的意见，但是究竟应该培训SRE“什么”呢？具
培养反向工程能力和随机应变能力
者中的任意一个要好。常见的新手项目类似于：
日后的工作中更习惯使用这种方式工作。
如何调试和诊断应用程序，同时让他们练习利用这些调试信息进行推断，可以使他们在
本理解，同时愿意深入研究调试工具、RPC框架，以及系统的二进制文件来理解其中的
工程师对他们从未见过的系统都很好奇一工作原理是什么。通过对系统工作原理的基
反向工程：弄明白系统如何工作
技能。