### Ensuring the Safety and Liveness of LOGda

The ledger LOGda is guaranteed to be both safe and live at all times, provided that fewer than 66% of validators are adversarial, fewer than 50% of the awake hash rate is adversarial, and the awake hash rate is bounded away from zero. The security of this system is proven analogously to Section III-C.

#### Security Proofs and Requirements

- **Adversarial Validators**: The 33% bound on adversarial validators under P1 and the 50% bound on adversarial hash rate under P2 are similar to the permissioned case analyzed in this paper.
- **Snap-and-Chat Construction**: For permissioned finality on top of a permissionless Proof-of-Work (PoW) Nakamoto consensus, additional requirements apply:
  - Under P1, fewer than 50% of the awake hash rate must be adversarial, and the awake hash rate must be bounded away from zero. If these conditions are not met, Πlc might not be live, and there would be no input for Πbft to finalize, rendering LOGfin non-live.
  - Under P2, fewer than 66% of validators must be adversarial. Otherwise, adversarial validators could finalize Πlc blocks that are not on the longest chain, which would later enter the prefix of LOGda, compromising its safety.

It remains an open question whether these additional requirements are fundamental or a limitation of the snap-and-chat construction.

### Snap-and-Chat Protocols for Ethereum 2.0

Our construction provides provably secure ebb-and-flow protocols using off-the-shelf sub-protocols, offering a flexible resolution to the availability-finality dilemma. This composition allows us to benefit from advances in sub-protocol design and pass along additional features of the constituent protocols, which are desirable for a decentralized, Internet-scale, open-participation consensus infrastructure like Ethereum.

#### Key Features

1. **Scalability to Many Nodes**:
   - The partially synchronous Byzantine Fault Tolerance (BFT) sub-protocol Πbft used in the snap-and-chat construction presents the main scalability bottleneck.
   - HotStuff, with the lowest known message complexity O(n), can be used alongside a longest-chain-based protocol, which scales well to many participants, promising good overall scalability.

2. **Accountability**:
   - Gasper [21] ensures accountability by attaching a price tag to safety violations, leading to economic security. A safety violation implies that at least a third of nodes have violated the protocol, and their stake is slashed.
   - Snap-and-chat protocols inherit accountability properties from the BFT sub-protocol Πbft for the finalized ledger LOGfin. For instance, in protocols like HotStuff, PBFT, or Streamlet, a safety violation requires more than a third of nodes to equivocate. Due to digital signatures, equivocating votes can be irrefutably attributed to nodes, and they can be held accountable, e.g., by slashing their stake.
   - Providing accountability for the available ledger LOGda is less clear due to the limited study of accountability in dynamically available protocols and the non-trivial ledger extraction process.

3. **High Throughput**:
   - High transaction throughput can be achieved by choosing a high-throughput Πlc, such as a longest chain protocol with separate transaction and backbone blocks (e.g., Prism [40], OHIE [41], or ledger combiners [42]).

4. **Fast Confirmation Latency**:
   - Using ledger combiners [42] or Prism [40] for Πlc, fast confirmation latency can be achieved, independent of the confirmation error probability.
   - Responsive BFT protocols can finalize snapshots with a latency close to the actual network delay, ensuring that Πbft does not become a bottleneck. This allows the finalized ledger LOGfin to catch up with the available ledger LOGda quickly when network conditions permit.

### Acknowledgment

We thank Yan X. Zhang, Danny Ryan, and Vitalik Buterin for their valuable discussions. JN is supported by the Reed-Hodgson Stanford Graduate Fellowship, and ENT is supported by the Stanford Center for Blockchain Research.

### References

[1] J. Neu, E. N. Tas, and D. Tse, “Ebb-and-Flow Protocols: A Resolution of the Availability-Finality Dilemma,” Preprint, arXiv:2009.04987, 2020.
[2] S. Nakamoto, “Bitcoin: A Peer-to-Peer Electronic Cash System,” https://bitcoin.org/bitcoin.pdf, 2008.
[3] R. Pass and E. Shi, “The Sleepy Model of Consensus,” in ASIACRYPT (2), ser. LNCS. Springer, 2017, pp. 380–409.
[4] P. Daian, R. Pass, and E. Shi, “Snow White: Robustly Reconfigurable Consensus and Applications to Provably Secure Proof of Stake,” in Financial Cryptography, ser. LNCS. Springer, 2019, pp. 23–41.
[5] B. David, P. Gazi, A. Kiayias, and A. Russell, “Ouroboros Praos: An Adaptively-Secure, Semi-Synchronous Proof-of-Stake Blockchain,” in EUROCRYPT (2), ser. LNCS. Springer, 2018, pp. 66–98.
[6] C. Badertscher, P. Gazi, A. Kiayias, A. Russell, and V. Zikas, “Ouroboros Genesis: Composable Proof-of-Stake Blockchains with Dynamic Availability,” in CCS. ACM, 2018, pp. 913–930.
[7] S. Deb, S. Kannan, and D. Tse, “PoSAT: Proof-of-Work Availability and Unpredictability, Without the Work,” in To Appear in Financial Cryptography, arXiv:2010.08154, 2021.
[8] M. Castro and B. Liskov, “Practical Byzantine Fault Tolerance,” in OSDI. USENIX Association, 1999, pp. 173–186.
[9] E. Buchman, “Tendermint: Byzantine Fault Tolerance in the Age of Blockchains,” Master’s thesis, University of Guelph, 2016.
[10] E. Buchman, J. Kwon, and Z. Milosevic, “The Latest Gossip on BFT Consensus,” Preprint, arXiv:1807.04938, 2018.
[11] M. Yin, D. Malkhi, M. K. Reiter, G. Golan-Gueta, and I. Abraham, “HotStuff: BFT Consensus with Linearity and Responsiveness,” in PODC. ACM, 2019, pp. 347–356.
[12] B. Y. Chan and E. Shi, “Streamlet: Textbook Streamlined Blockchains,” in AFT. ACM, 2020, pp. 1–11.
[13] Libra Association, “White Paper,” https://libra.org/en-US/white-paper/, 2020.
[14] M. Baudet, A. Ching, A. Chursin, G. Danezis, F. Garillot, Z. Li, D. Malkhi, O. Naor, D. Perelman, and A. Sonnino, “State Machine Replication in the Libra Blockchain,” Report, Libra Association, 2018.
[15] J. Chen and S. Micali, “Algorand,” Preprint, arXiv:1607.01341, 2016.
[16] Y. Gilad, R. Hemo, S. Micali, G. Vlachos, and N. Zeldovich, “Algorand: Scaling Byzantine Agreements for Cryptocurrencies,” in SOSP. ACM, 2017, pp. 51–68.
[17] S. Gilbert and N. A. Lynch, “Brewer’s Conjecture and the Feasibility of Consistent, Available, Partition-Tolerant Web Services,” SIGACT News, vol. 33, no. 2, pp. 51–59, 2002.
[18] A. Lewis-Pye and T. Roughgarden, “Resource Pools and the CAP Theorem,” Preprint, arXiv:2006.10698, 2020.
[19] Y. Guo, R. Pass, and E. Shi, “Synchronous, with a Chance of Partition Tolerance,” in CRYPTO (1), ser. LNCS. Springer, 2019, pp. 499–529.
[20] D. Malkhi, K. Nayak, and L. Ren, “Flexible Byzantine Fault Tolerance,” in CCS. ACM, 2019, pp. 1041–1053.
[21] V. Buterin, D. Hernandez, T. Kamphefner, K. Pham, Z. Qiao, D. Ryan, J. Sin, Y. Wang, and Y. X. Zhang, “Combining GHOST and Casper,” Preprint, arXiv:2003.03052, 2020.
[22] V. Buterin and V. Griffith, “Casper the Friendly Finality Gadget,” Preprint, arXiv:1710.09437, 2017.
[23] V. Buterin. (2020) Explaining the Liveness Guarantee (Comment 8). [Online]. Available: https://ethresear.ch/t/4228/8
[24] D. Ryan, Ethereum Foundation, Personal communication, June 2020.
[25] C. Cachin and M. Vukolic, “Blockchain Consensus Protocols in the Wild,” Preprint, arXiv:1707.01873, 2017.
[26] A. Stewart and E. Kokoris-Kogia, “GRANDPA: A Byzantine Finality Gadget,” Preprint, arXiv:2007.01560, 2020.
[27] E. Blum, J. Katz, and J. Loss, “Synchronous Consensus with Optimal Asynchronous Fallback Guarantees,” in TCC (1), ser. LNCS. Springer, 2019, pp. 131–150.
[28] V. Buterin and A. Stewart. (2018) Beacon Chain Casper Mini-Spec (Comments 17 and 19). [Online]. Available: https://ethresear.ch/t/2760/17
[29] R. Nakamura. (2019) Analysis of Bouncing Attack on FFG. [Online].
[30] ——. (2019) Prevention of Bouncing Attack on FFG. [Online]. Available: https://ethresear.ch/t/6113
Available: https://ethresear.ch/t/6114
[31] J. Neu, E. N. Tas, and D. Tse. (2020) A Balancing Attack on Gasper, the Current Candidate for Eth2’s Beacon Chain. [Online]. Available: https://ethresear.ch/t/8079
[32] A. Kiayias, A. Russell, B. David, and R. Oliynykov, “Ouroboros: A Provably Secure Proof-of-Stake Blockchain Protocol,” in CRYPTO (1), ser. LNCS. Springer, 2017, pp. 357–388.
[33] C. Dwork, N. A. Lynch, and L. J. Stockmeyer, “Consensus in the Presence of Partial Synchrony,” J. ACM, vol. 35, no. 2, pp. 288–323, 1988.
[34] G. Golan-Gueta, I. Abraham, S. Grossman, D. Malkhi, B. Pinkas, M. K. Reiter, D. Seredinschi, O. Tamir, and A. Tomescu, “SBFT: A Scalable and Decentralized Trust Infrastructure,” in DSN. IEEE, 2019, pp. 568–580.
[35] A. Skidanov, “Fast Finality and Resilience to Long Range Attacks with Proof of Space-Time and Casper-Like Finality Gadget,” http://near.ai/post, 2019.
[36] T. Dinsdale-Young, B. Magri, C. Matt, J. B. Nielsen, and D. Tschudi, “Afgjort: A Partially Synchronous Finality Layer for Blockchains,” in SCN, ser. LNCS. Springer, 2020, pp. 24–44.
[37] R. Nakamura. (2020) Hierarchical Finality Gadget. [Online]. Available: https://ethresear.ch/t/6829
[38] J. Neu, E. N. Tas, and D. Tse, “Snap-and-Chat Protocols: System Aspects,” Preprint, arXiv:2010.10447, 2020.
[39] P. Sheng, G. Wang, K. Nayak, S. Kannan, and P. Viswanath, “BFT Protocol Forensics,” Preprint, arXiv:2010.06785, 2020.
[40] V. K. Bagaria, S. Kannan, D. Tse, G. C. Fanti, and P. Viswanath, “Prism: Deconstructing the Blockchain to Approach Physical Limits,” in CCS. ACM, 2019, pp. 585–602.
[41] H. Yu, I. Nikolic, R. Hou, and P. Saxena, “OHIE: Blockchain Scaling Made Simple,” in IEEE Symp. Secur. Privacy, 2020, pp. 90–105.
[42] M. Fitzi, P. Gazi, A. Kiayias, and A. Russell, “Ledger Combiners for Fast Settlement,” Cryptology ePrint Archive, Report 2020/675, 2020.
[43] N. A. Lynch, Distributed Algorithms. San Francisco, CA, USA: Morgan Kaufmann Publishers Inc., 1996.
[44] A. Dembo, S. Kannan, E. N. Tas, D. Tse, P. Viswanath, X. Wang, and O. Zeitouni, “Everything is a Race and Nakamoto Always Wins,” in CCS. ACM, 2020, pp. 859–878.

### Details of the Liveness Attack on Gasper

#### A. Setting of the Attack

This appendix describes an attack on the liveness of the Gasper protocol [21]. We first state the assumptions about the adversary's capabilities and control over the network that suffice for the adversary to launch our attack. Subsequently, we describe the attack in detail.

1. **Goal**:
   - We describe an attack on the liveness of the Gasper protocol [21]. The goal is to prevent any Casper finalizations indefinitely. Our exposition assumes familiarity with Gasper [21], Casper [22], and the synchronous network model [43].

2. **Assumptions**:
   - The adversary knows when honest validators execute the Gasper fork choice rule HLMD(G) [21, Algorithm 4.2].
   - The adversary can target a message (such as a block or a vote) for delivery to an honest validator just before a certain point in time.
   - Honest validators cannot update each other arbitrarily quickly about messages they have just received.

3. **Terminology**:
   - Gasper proceeds in epochs, subdivided into slots. Assume Gasper is run with C slots per epoch, n validators in total, of which f are adversarial. Let β = f / n. Assume C divides n such that every slot has a committee of integer size n/C. For each epoch, a random permutation of all n validators fixes the assignment of validators to committees. The first validator in every committee is the designated proposer for the respective slot and gets to propose a new block at a location in the block tree determined by HLMD(G). Each validator in the slot's committee executes HLMD(G) in its own view G to determine what block to vote for.
   - A vote consists of a GHOST vote and a Casper (FFG) vote. The Casper vote’s source and target blocks are deterministic functions of the block the GHOST vote is cast for (see [21, Definition 4.7]). A block can only become finalized if a supermajority of ≥ 2n/3 validators vote for it. The goal of the attack is to keep honest validators split between two options (a ‘left’ and a ‘right’ chain, see Figure 4, p. 5) indefinitely, such that no supermajority of ≥ 2n/3 validators ever votes for one of the two options and thus no block ever gets finalized.

#### B. Attack

In this section, we describe our attack in detail, cf. [31]. For an illustration of the attack, see Figure 4 (p. 5).

1. **Recap: Proposing and Voting in Gasper**:
   - To understand how the adversary can keep the honest nodes split indefinitely between two chains, it is necessary to revisit the proposing and voting algorithms of Gasper. For each role, proposing and voting, honest validators use the fork chain rule HLMD(G) (see [21, Algorithm 4.2]) in their local view G to determine (a) when proposing, what block to extend, and (b) when voting, what block to endorse with a vote.
   - HLMD(G) finds the justified pair with the highest attestation epoch among all possible chains, but only considers votes that have already been referenced on said chain. It then filters for only those chains that contain the highest justified pair and picks the 'heaviest' chain (GHOST paradigm).
   - To vote, the source and target of the Casper vote are determined as follows (see [21, Definition 4.7]). The Casper vote’s source LJ is the last justified pair, considering only votes that have been included in blocks on the chain determined by HLMD(G). The Casper vote’s target LE is the last epoch boundary pair on the chain determined by HLMD(G).

2. **How to Sway Honest Validators**:
   - Suppose there are two competing chains as depicted in Figure 4. The only time a non-trivial fork choice occurs in HLMD(G) is when a validator chooses whether to go down the ‘left’ or the ‘right’ chain. This decision is based on where the majority of the most recent votes (one per validator) fall, in the instant when HLMD(G) is executed.
   - If half of the most recent votes are ‘left’ and the other half is ‘right’, the adversary can release a single withheld vote to an honest validator who is just about to execute HLMD(G) and thereby ‘tip the balance’ and sway that honest validator to vote on a chain of the adversary’s choosing. The adversary can release that same withheld vote to multiple honest validators, all of which will then vote for the chain of the adversary’s choice.
   - The adversary can release two different withheld votes to different sets of honest validators and thus steer one group towards ‘left’ and the other group towards ‘right’. Ultimately, the withheld votes will become known to all honest validators, but the adversary can prevent this synchronization until after the honest validators have cast their votes by releasing the withheld votes just before the honest validators execute HLMD(G).
   - After two withheld votes, one for ‘left’ and one for ‘right’, are released, and if the honest validators either vote ‘left’ and ‘right’ in equal number (during epoch 0) or simply re-affirm their prior votes (during epoch 1 and beyond), then after sharing all votes with all honest validators, there is still an equal number of votes for ‘left’ and ‘right’. Thus, in the next slot, the adversary can release another two withheld votes to continue keeping up the equal split of honest validators.

3. **Epoch 0: Kick-Starting the Attack**:
   - The adversary waits for an opportune epoch to kick-start the attack. For ease of exposition, we assume that epoch 0 is opportune. An epoch is opportune if there are enough adversarial validators in every slot of the epoch to fill the following roles:
     - The proposer of slot 0 needs to be adversarial. The adversarial proposer equivocates and produces two conflicting blocks (‘left’ and ‘right’, dashed blocks 0 and 0' in Figure 4) which it reveals to two suitably chosen subsets of the validators in slot 0. Thus, the honest validators’ votes are split equally between the two chains.
     - Equivocating on block production is a slashable offense, and the stake corresponding to the adversarial block producer will be slashed. Besides this equivocation, none of the adversarial actions are slashable. There are variants of our attack that do not require any slashable adversarial actions.