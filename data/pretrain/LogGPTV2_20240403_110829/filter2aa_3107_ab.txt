Text[10] = 4; 
Text[11] = 45; 
Text[12] = 42; 
Text[13] = 101; 
Text[14] = 0; 
int v1 = 0; 
do 
{ 
target[v1] ^= 0x31u; 
++v1; 
} while (v1  '9' || ori_chr  'z' || ori_chr = 'A') 
ori_chr -= 'A';                     // 大写转字母表中顺序 
} 
else 
{ 
ori_chr -= 'a';                       // 小写转字母表中顺序 
target = 1; 
} 
int v9 = (28 + 5 * ori_chr) % 26 + ((28 + 5 * ori_chr) % 26 = '0' && target[i] = 'a' && target[i] = 'A' && target[i] <= 'Z'){ 
for (int j = 0; j < strlen(tihuan_cap); j++){ 
if (tihuan_cap[j] == target[i]){ 
out[i] = 'A' + j; 
} 
} 
} 
} 
/*HCRYPTHASH phHash; 
HCRYPTPROV phProv; 
DWORD pdwDataLen; 
CString tempstr; 
UINT64 true_answ = 0; 
char 
target[] 
= 
{ 0x48,0x50,0xB7,0x44,0x6B,0xBB,0x20,0xAA,0xD1,0x40,0xE7,0xB0,0xA9,0x64,0xA5,0x7D }; 
for (UINT64 seed = 2453148193;; seed += 4294967296){ 
BOOL bRight = TRUE; 
tempstr.Format("%I64d", seed); 
printf("%s\n", tempstr.GetBuffer()); 
if (CryptAcquireContextA(&phProv, 0, 0, 1u, CRYPT_VERIFYCONTEXT)) 
{ 
if (CryptCreateHash(phProv, CALG_MD5, 0, 0, &phHash)) 
{ 
if (CryptHashData(phHash, (BYTE *)tempstr.GetBuffer(), tempstr.GetLength(), 
0)) 
{ 
char pbData[64]; 
memset(pbData, 0, 64); 
pdwDataLen = 64; 
CryptGetHashParam(phHash, 
HP_HASHVAL, 
(BYTE 
*)pbData, 
&pdwDataLen, 0); 
for (int i = 0; i < 16; i++){ 
if (pbData[i] != target[i]){ 
bRight = FALSE; 
break; 
} 
//bRight = TRUE; 
} 
if (bRight){ 
true_answ = seed; 
break; 
} 
} 
} 
} 
}*/ 
system("pause"); 
return 0; 
} 
Re400 
脱壳，去花后开始分析 
第一层在 00401d25()函数里，如下图 
图中 byte_41279c 是输入的字符串，然后经过 change_xor()函数变换后与固定一
组字符比较，即 V11，V11 两次异或 3 相当于没变。 
第一步密码：[Xi`An4YeCaoAnQuanGongSi][HP] 
V11:  
a3=[0x7C,0xCD,0x01,0x97,0x06,0x6F,0x2C,0x29,0xFC,0x31,0x09,0xDC,0x1D,0xF5,0x8
F,0x7D,0xDE,0x30,0xB6,0x49,0xFD,0x0A,0xD9,0x89,0xFD,0x9F,0x4D,0x7D,0xA2] 
由 V11 可知，密码长度为 29，于是随便输入 29 位数后，修改内存为 0x00，此时
a3 的值就位异或对象 a2 的值，如下图 
整理出来 
b2=[0x27,0x95,0x68,0xF7,0x47,0x01,0x18,0x70,0x99,0x72,0x68,0xB3,0x5C,0x9B,0xD
E,0x08,0xBF,0x5E,0xF1,0x26,0x93,0x6D,0x8A,0xE0,0xA0,0xC4,0x05,0x2D,0xFF] 
与 V11 对应位异或，写脚本得到最后的结果为： 
[Xi`An4YeCaoAnQuanGongSi][HP] 
第二步： 
从 sub_401473()里读入第二步密码，然后调用 sub_401119()来验证。 
验证部分如下图，if 条件固定了密码的前两位”[/”和最后两位/]””。 Sub_401c7d
是对索引做浮点数运算，最后求和得到 V7,判断 57.1<v7<57.2 时走向正确流程，
由此可推出密码 2 的长度为 20。 
然后将 V46 与密码长度异或后得到的值与 V8 比较。则通过 V8 与密码长度异或
就可以求出 V46 即第二步密码。 
V8： 
a4=[0x3B,0x4C,0x7D,0x7A,0x5A,0x7D,0x75,0x7A,0x5F,0x61,0x75,0x7D,0x58,0x71,0x6
A,0x3B] 
与 0x14 异或后得到/XinNianKuaiLe~/。 
最后拼接前两位于后两位 
[//XinNianKuaiLe~//] 
执行完 sub_401473 程序走到 sub_401066 弹出一段图片和音乐，一个白板转啊
转。然后看 DisplayFunc 的函数 sub_402921()，修改参数 1.0 为 0 ，就可以得到
FLAG 了，glRotatef(angle, 0.0, 0.0, 1.0)。 
最后 FLAG 图片如下： 
然后就队友们各种猜，最后得到 FLAG 为 
FLAG{ETIJVA3E96GXZ+HP+E380} 
Re500-----比赛时未作出来，赛后做 
做了 Re400 的旋转以为脑洞很大了，谁知道这题的脑洞真的。。。 
这题用了 debug blocker 反调试技术，子进程会开启一个服务器，父进程会读取[SsCTF]Re.txt
的内容向子进程发送，子进程会处理收到的数据并把结果发送给父进程，之后会读取 Port.txt
的内容作为端口，向自身发送 UDP 请求，其中的一些细节后面会说到。 
题目一共有三层，第一层的关键是解密 sub_401945 函数，队友写程序将所有的密钥情形都
输出，发现 0xE9 时解得有意义代码，解密完后的函数是 
其中 sub_40153B 是对接收的数据做 base64 编码，然后与 VURQ 比较，由此得出第一层的密
码为 UDP，而这个字符串的 ASCII 码相加也正好等于 0xE9，这一层 Port.txt 的内容为 2016，
记录两个地方的值，后面会用到 
第一个地方 
第二个地方 
这一层的 EncryptKey 为 0xE9，v16 为 2016，因此第一个地方异或后得到 
pr0oihsn1eMgylf@J88JJJ88J8J8J8JJJ8888JJJJJJJ8J8J8JJ88J8888J8JJJ888JJJJ8J8888888J 
buf 为 05162b4d677092b4，这一层会输出 It is UDP!。 
第二层，分析服务器处理接收数据的函数得到 
由此这一层要让 ret 返回 1，能返回 1 的只能是 sub_4019B5 函数 
其 中 的 sub_40170B 是 TEA 加密 算法， key 为[0x44434241, 0x48474645, 0x4C4B4A49, 
0x504F4E4D]，密文为 38 95 3C F0 4E 5A 57 89 6F 84 3E 01 BC 50 C8 5C 6A 7C 59 67 EC BA 77 FD 
73 2E，而 TEA 加密是 8 个字节一组，生成的密文长度是 8 的倍数，但这组的密文长度是 26，
最后两个字符不做处理，对前 24 个字节进行解密再加上最后两个字符得到第二层的密码为 
WoyaoDuanKouHaoHeFlag,Pls. ，端口号为 2447，这一层的 EncryptKey 为 2446，之前上面那
两处地方的第一处地方的数据为 
第二处的 buf 为 0d1e23456f789abc，这一层输出 Port:2447。 
最后要让 ret 返回 2，而这个需要调用 sub_4017CF 函数 
这 个 函 数 中 是 对 接 收 到 的 数 据 进 行 哈 夫 曼 编 码 ， 最 后 与
0000110100011110001000110100010111101101011011110111100011111001101010111100
对比，那对应关系在哪呢，开始脑洞 
前面得到了 
pr0oihsn1eMgylf@J88JJJ88J8J8J8JJJ8888JJJJJJJ8J8J8JJ88J8888J8JJJ888JJJJ8J8888888J 
05162b4d677092b4 没用 
0d1e23456f789abc 
上面图片中的后面部分看成高低电平，高电平代表 1，低电平代表 0，按照 pr0oihsn1eMgylf@
这个顺序得到对应的编码 
按照这个对应关系解码最后对比的哈夫曼编码可以得到 flag 为 fl@gMyengl1shisp0or，最后
输出 0K!You Got 1t!。 
还有上面的 0d1e23456f789abc 转换成二进制表示为 
按照这个解码得到 fl@gMyen1ship0or，但是这个比正确的 flag 少了 3 个字符。 
杂项部分（Misc） 
Misc10(Welcome) 
签到题目，啥也不说了直接上图，手机截图，请见谅。。。 
Misc100(Speed Data) 
开始想多了，想到什么 CVE 什么 Word 漏洞上去了，后来想到才 100 分，想到可能是
pdf 隐写，所以在 google 上搜索 pdf stego ，找了几个工具，其中一个工具叫 Wbstego，直
接解密了即可： 
Misc200(Puzzle) 
图片中的二维码得到 
# flag = f[root] 
# f[x] = d[x] xor max(f[lson(x)], f[rson(x)])                  : x isn't leaf 
# f[x] = d[x]   
   : x is leaf 
在 wav 最后 1s 明显有杂音，发现藏了数据 
去掉一半的 00，得到一个 7z，剩下就是找口令了 
尝试了各种 wav 和 jpg 隐写，最后机智的队友居然在 1 份 54 秒左右听到杂音 
在网上找了个大小为 38.5m 的渡口，进行波形比较，发现在 sample501800 靠后
点有巨大的差异。 
把那段数据截取出来，strings 看下，有这样一个字符串{1L0vey0u*.*me} 
利用这个口令解开了 7z 
解开之后是 0 和 1 文件夹(分别代表左右儿子），以及每个文件夹下有个 d（这是
每个节点的数据） 
先生成个目录，按照二叉树顺序存储结构的方式读取所有数据，脚本： 
mululist=[] 
def readmulu(): 
    fm=open('mulu.txt','rb') 
    while True: 
        line=fm.readline().strip('\x0d\x0a') 
        if line: 
            mululist.append(line+'d') 
        else: 
            break 
readmulu() 
node=[] 
ct=0 
for ml in mululist: 
    ct+=1 
    #print ml 
    f=open(ml,'rb') 
    t=int(f.read()[2:],2) 
    #print t 
    node.append(t) 
print ct 