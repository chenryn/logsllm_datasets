title:YODA: Enabling computationally intensive contracts on blockchains
with Byzantine and Selfish nodes
author:Sourav Das and
Vinay Joseph Ribeiro and
Abhijeet Anand
YODA: Enabling computationally intensive contracts
on blockchains with Byzantine and Selﬁsh nodes
Sourav Das∗, Vinay Joseph Ribeiro† and Abhijeet Anand‡
Department of Computer Science and Engineering, Indian Institute of Technology Delhi, India
{∗souravdas1547, ‡abhijeetanand98765}@gmail.com, †PI:EMAIL
Abstract—One major shortcoming of permissionless blockchains
such as Bitcoin and Ethereum is that
they are unsuitable
for running Computationally Intensive smart Contracts (CICs).
This prevents such blockchains from running Machine Learning
algorithms, Zero-Knowledge proofs, etc. which may need non-
trivial computation.
In this paper, we present YODA, which is to the best of
our knowledge the ﬁrst solution for efﬁcient computation of
CICs in permissionless blockchains with guarantees for a threat
model with both Byzantine and selﬁsh nodes. YODA selects
one or more execution sets (ES) via Sortition to execute a
particular CIC off-chain. One key innovation is the MultI-Round
Adaptive Consensus using Likelihood Estimation (MIRACLE)
algorithm based on sequential hypothesis testing. MIRACLE
allows the execution sets to be small thus making YODA efﬁcient
while ensuring correct CIC execution with high probability. It
adapts the number of ES sets automatically depending on the
concentration of Byzantine nodes in the system and is optimal
in terms of the expected number of ES sets used in certain
scenarios. Through a suite of economic incentives and technical
mechanisms such as the novel Randomness Inserted Contract
Execution (RICE) algorithm, we force selﬁsh nodes to behave
honestly. We also prove that the honest behavior of selﬁsh nodes
is an approximate Nash Equilibrium. We present the system
design and details of YODA and prove the security properties
of MIRACLE and RICE. Our prototype implementation built on
top of Ethereum demonstrates the ability of YODA to run CICs
with orders of magnitude higher gas per unit time as well as
total gas requirements than Ethereum currently supports. It also
demonstrates the low overheads of RICE.
I.
INTRODUCTION
Permissionless blockchain protocols, which originated with
Bitcoin [18], allow an arbitrarily large network of miners
connected via a peer-to-peer overlay network to agree on the
state of a shared ledger. More recent blockchains extend the
shared ledger concept to allow programs called smart contracts
to run on them [6], [25]. Smart contracts maintain state that can
be modiﬁed by transactions. One of the major shortcomings of
these blockchains is that they are unsuitable for smart contracts
which require non-trivial computation for execution [7]. We
call such smart contracts Computationally Intensive Contracts
(CIC). CICs can potentially run intensive machine learning
algorithms [29], zero-knowledge proofs [4], [9] etc.
One reason for this shortcoming is that every transaction is
Network and Distributed Systems Security (NDSS) Symposium 2019
24-27 February 2019, San Diego, CA, USA
ISBN 1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23142
www.ndss-symposium.org
executed on-chain, that is by all miners, and this computation
must be paid using the transaction fee. Hence CIC transactions
require very high transaction fees.1 A second reason is the
Veriﬁer’s Dilemma [16]. A miner must normally start mining
a new block on an existing block only after verifying all its
transactions. If the time taken to verify these transactions is
non-trivial, it delays the start of the mining process thereby
reducing the chances of the miner creating the next block.
Skipping the veriﬁcation step will save time but at the risk of
mining on an invalid block, thereby leaving a rational miner
in a dilemma of whether to verify transactions or not.
One mechanism to side-step the Veriﬁer’s Dilemma is
to break a computationally-heavy transaction into multiple
light-weight transactions and spread these out over multiple
blocks [16]. This mechanism has several shortcomings. First,
the total fees of these transactions may be prohibitively high.
Second, how to split a single general purpose transaction into
many while ensuring the same resulting ledger state is not
obvious. Third, the number of blocks over which the light-
weight transactions are spread out grows linearly with the size
of the total computation.
Another approach is to execute smart contracts off-chain,
i.e. by only a subset of nodes2 to cut down transaction fees
and avoid the Veriﬁers Dilemma [12], [26]. The off-chain
methods proposed so far, however, work under the limited
threat model of nodes being rational and honest but not
Byzantine. Moreover, they require on-chain computation of
a part of a CIC to determine its correct solution in some
cases. Note that off-chain CIC computation is not the same
as achieving consensus about blocks using shards [2], [10],
[14], [15], [31]. Blocks can in general take many valid values
and are computationally easy to verify unlike CIC solutions
which have only one correct value and are expensive to verify.
Our Goal. Our goal is to design a mechanism for off-chain
CIC execution with the following properties.
1) BAR Threat model. It should work under a Byzantine,
Altruistic, Rational (BAR) model which considers both
Byzantine and Rational entities. BAR models are more
realistic and challenging to analyze than threat models
which consider only one of Byzantine or rational enti-
ties [1].
2) Adaptive to Byzantine fraction. It should make fewer
nodes perform off-chain computation if the fraction of
Byzantine nodes is smaller.
3) Scalability: CICs are never executed or veriﬁed on-chain
1Transaction veriﬁcation is to some extent subsidized by mining fees.
2For clarity, we use the term node for an entity performing off-chain com-
putation and the term miner for an entity performing all on-chain computation.
either fully or partially. Further, the number of CICs that
can be executed in parallel must scale with increasing
number of nodes in the system.
4) Fair and timely reward. As CIC execution is expensive, all
nodes performing off-chain computation correctly must be
compensated fairly and in a timely manner.
Our Approach. In this paper we present YODA, which is
to the best of our knowledge the ﬁrst solution for efﬁcient
computation of CICs in permissionless blockchains which
gives security guarantees in a BAR threat model. The threat
model allows at most a fraction fmax < 0.5 of Byzantine
nodes in the overall system and the remaining can be quasi-
honest. Note that the actual fraction f of Byzantine nodes is
unknown a priori and can be anywhere between 0 and fmax.
Although YODA is designed for the worst case (f = fmax),
it adapts to smaller values of f, by evaluating CICs more
efﬁciently.
Quasi-honest nodes are selﬁsh nodes which seek to maximize
their utility by skipping CIC computation using information
about its solutions which may already be published on the
blockchain by other nodes. We call this a free-loading attack.
They may also try to collude with each other to reduce their
computation. More details about quasi-honest nodes are given
in §II-A. YODA is robust to DoS attacks, Sybil attacks, and
ensures timely payouts to all who execute a CIC.
YODA’s modus operandi
is to make only small sets of
randomly selected nodes called Execution Sets (ES) compute
the CICs. ES nodes submit their solutions, or just a small digest
of them, on the blockchain as transactions. YODA then study
the counts of various solutions submitted in order to identify
the correct solution from among them. While a small ES
improves system efﬁciency, it can occasionally be dominated
by Byzantine nodes which may form a majority and submit
incorrect solutions. Hence, a simple majority decision does not
work even in a setting with only honest and Byzantine nodes.
To determine the correct CIC solution, YODA uses a novel
MultI-Round Adaptive Consensus using Likelihood Estimation
(MIRACLE) algorithm. In MIRACLE, miners compute the
likelihood of each received digest which primarily depends on
the counts of different digests and the fraction f of Byzantine
nodes. If the likelihood of any digest crosses a particular
threshold, MIRACLE declares its corresponding solution as
the correct one. Otherwise, it iteratively selects additional ES
sets until the likelihood of a digest crosses required threshold.
We call the selection of each such ES a round.3 MIRACLE
is adaptive, that is the expected number of rounds it takes to
terminate is smaller the smaller f is. MIRACLE guarantees
selection of the correct digest with probability at least 1 − β
for a design parameter β. Moreover, for the special case of
f = fmax, if all Byzantine node submit the same incorrect di-
gest, MIRACLE optimally minimizes the expected number of
rounds. Interestingly, the strategy for Byzantine nodes to make
MIRACLE accept an incorrect solution with highest probabil-
ity is to submit the same incorrect solution (refer VII-A).
This analysis for MIRACLE, however, assumes that all
quasi-honest nodes submit correct solution. Since MIRACLE
itself does not enforce honest behaviour, other mechanisms are
necessary to make quasi-honest nodes submit correct solutions.
Without additional mechanisms, a quasi-honest node may be
tempted to free-load on solutions already submitted in earlier
rounds, thus saving on computational power. In case quasi-
honest nodes free-load on incorrect solutions, MIRACLE has
a higher probability of terminating with an incorrect solution.
To mitigate the free-loading attack of quasi-Honest nodes, we
design the Randomness Inserted Contract Execution (RICE),
an efﬁcient procedure to change the digest from one round to
the next. We achieve this by making the digest dependent on
a set of pseudo-randomly chosen intermediate states of a CIC
execution. This ensures, that despite digests changing from one
round to the next, the miners running MIRACLE are able
to map digests from different rounds to the same CIC state
they represent. We prove that RICE adds little computational
overhead to CIC execution. To be precise, if T denotes the
total computation for a transaction execution without RICE,
then RICE adds computation overhead of O((log2T )2). In the
presence of free-loading attacks, we show via a game theoretic
analysis that honest behavior from all quasi-honest nodes is an
−Nash equilibrium with  ≥ 0.
We have implemented YODA with MIRACLE and RICE,
in Ethereum as a proof-of-concept and provide many experi-
mental results supporting our theoretical claims.
II. THEAT MODEL, ASSUMPTIONS AND CHALLENGES
In YODA, a blockchain is an append-only distributed ledger
consisting of data elements called blocks. A blockchain starts
with a pre-deﬁned genesis block. Every subsequent block
contains a hash pointer to the previous block resulting in a
structure resembling a chain. The blockchain contains accounts
with balances, smart contracts, and transactions. A transaction
is a signed message broadcast by a account owner which can be
included in a block provided it satisﬁes certain validity rules.
For example, transactions modifying an account balance must
be signed by the corresponding private key to be valid. YODA
assumes that the underlying blockchain provides guarantees
about its Safety and Availability. Safety means that all smart
contract codes are executed correctly on-chain, and availability
means that all transactions sent to the blockchain get included
in it within bounded delay and cannot be removed thereafter.
We refer to any entity performing off-chain CIC execution
in YODA as a node. We call the set consisting of all nodes
the Stake Pool (SP).4 Without loss of generality each node
in SP controls an account in the ledger with its private key.
The account itself is identiﬁed by the public key. We assume
that the network is synchronous, i.e., transactions broadcast by
nodes get delivered within a known bounded delay. However,
unlike [15] we do not assume the existence of an overlay
network among nodes. Also, we do not assume the presence
of a secure broadcast channel or a PKI system. We abstract
the source of randomness required for RICE to a function
RandomGen() (given in §VI) which can be accessed by all
nodes in YODA. This can be built as a part of YODA or as
an external source using techniques from [10], [15], [24].
For the rest of the paper, unless otherwise stated, if some
event has negligible probability, it means it happens with prob-
ability at most O(1/2λ) for some security parameter λ. Any
event whose complement occurs with negligible probability is
3Rounds are different from block-generation epochs and are speciﬁc to
CICs. A round may span multiple blocks.
4The choice of the name will be discussed when we discuss blockchain
speciﬁcs.
2
said to occur with high probability or w.h.p.
A. Threat Model and Assumptions.
Systems like permissionless blockchains cannot be assumed
to have all honest nodes. They rely heavily on incentives and
the rationality of nodes in order to work correctly. Rational
nodes are those which seek to maximize their utility. However,
assuming that all nodes are rational is not practical either. Real
systems may contain Byzantine nodes, that is those which do
not care about their returns.
We consider two kinds of nodes: Byzantine and quasi-
Honest. Byzantine nodes are controlled by an adversary and
these nodes can deviate arbitrarily from the YODA protocol.
The adversary can make all Byzantine nodes collude with
perfect clock synchrony. They can add or drop messages
arbitrarily and not execute CICs correctly. We assume that
at most fmax < 1
2 fraction of nodes in SP are Byzantine.
Additionally the adversary has state information of the CIC
from all previous rounds and can successfully communicate
this (potentially false) state information about previous rounds
to any node in SP. However, we assume cryptographic primi-
tives are computationally secure.
Modeling rational nodes in these systems, taking into account
all possible means of proﬁts, costs, and attacks is non-trivial
and is beyond the scope of the paper. However to bring our
model close to reality we work with quasi-honest nodes which
deviate from the protocol in the following manner.
Quasi-Honest. Quasi-honest nodes will skip execution of a
CIC either completely or partially, for example by not execut-
ing some of its instructions, if and only if the expected reward
in doing so is more than that for executing the transaction
faithfully. They do not share information with any other node
if that
information can lead to reduction of their reward.
They are conservative when estimating the potential impact
of Byzantine adversaries in the system, i.e. a quasi-honest
node while computing its utility assumes that the Byzantine
adversary acts towards minimizing its (quasi-honest node’s)
rewards [1].
Quasi-honest nodes may skip computation using one of two
methods. The ﬁrst is “free-loading” where they attempt to
guess the correct state of a CIC after execution of a transaction
from the information of the corresponding transaction already
published on the blockchain. Free-loading also includes the
case where a quasi-honest node tries to guess the state when
an adversary presents the pre-image of hashes among this
information already published on the blockchain.
The second is by colluding with other ES nodes of the
same round to submit an identical CIC solution without
evaluating it. A quasi-honest node only colludes with nodes
whose membership in the ES it can verify. YODA has checks
(refer § VI ) which prevent nodes from directly proving their
ES membership. Hence nodes must use Zero-Knowledge-Proof
techniques like zk-SNARK [4] to establish their membership
in ES. YODA allows use of smart-contracts as shown in [11] to
establish rules of collusion. However we assume that a quasi-
Honest node does not know for sure if the node it is colluding
with is quasi-honest or Byzantine. Additionally, both free-
loading and collusion have costs associated with them. These
cost are due to processing of information available on the
blockchain or received from peers, producing and verifying zk-
Proofs, bandwidth and computation costs etc. In case neither
free-loading nor collusion gives a better expected reward than
executing CICs correctly, a quasi-honest node will execute the
CIC correctly.
B. Challenges
Enabling off-chain execution of CICs in the presence of a
Byzantine adversary is fraught with many challenges. Allowing
non-Byzantine nodes to deviate from the protocol makes the
problem more interesting and even more challenging. Apart
from recently studied challenges like preventing Sybils [18],
[31] and generating an unbiased source of randomness in the
distributed setting [10], [15], [24], our system must tackle the
following challenges:
collusion.
• to prevent quasi-honest nodes from Free-loading and
• since the size of any ES is small, an ES becomes
vulnerable to Lower cost DoS Attacks than a DoS attack
on the set of all nodes taken together.
• to provide guarantees of correctness without requiring re-
execution of any part of the CIC on-chain.
III. MIRACLE: MULTI-ROUND ADAPTIVE CONSENSUS
USING LIKELIHOOD ESTIMATION
In this section we describe MIRACLE as an abstract con-
sensus protocol and later get into its blockchain speciﬁcs.
Problem Deﬁnitions. Let Ψ be a deterministic function that
when given arbitrary input x produces output y. We denote
this as y ← Ψ(x).5 Let SP contain at most fmax fraction of
Byzantine nodes. All other nodes are honest, i.e. they strictly
adhere to the protocol. Let ni be a node in SP where i =
1, 2, . . . ,|SP|. Let Ψi be the function ni executes when asked
to execute Ψ and let yi ← Ψi(x) be the corresponding result.
For all honest nodes, clearly Ψi = Ψ.
Our goal
is to achieve consensus on the true value of
Ψ(x) by making only one or more small randomly chosen
subsets called Execution Sets (ES) of nodes evaluate Ψ(x).
Further, nodes ni ∀i after executing Ψi(x) broadcast a digest
of yi, say hash(yi) to all other nodes. MIRACLE proceeds
in rounds where in each round a new ES is selected. We
require MIRACLE to correctly reach consensus on Ψ(x) with
probability greater than 1 − β for any given user-speciﬁed
parameter β, given fmax and E[|ES|], while minimizing the
expected number of rounds to terminate. Formally, MIRACLE
must guarantee the following properties.
terminate within a ﬁnite number of rounds.
• (Termination) For any fmax < 1/2, MIRACLE must
• (Agreement) All honest nodes in SP, agree on the result
that MIRACLE returns on terminating.
• (Validity) MIRACLE must achieve consensus on the true
value of Ψ(x) with probability 1 − β.
• (Efﬁciency) When the fraction of Byzantine nodes is
fmax and given a particular E[|ES|], MIRACLE must
terminate in the optimal number of rounds. Further,
for any given f ≤ fmax, if Nf denotes the expected
number of nodes performing off-chain execution then
Nf ≤ Nfmax
5We use ← for function executions, with the function and its inputs on its
right and the returned value on its left.
3
A. Overview and Simplistic algorithms
We motivate MIRACLE by describing two simplistic al-
gorithms for achieving consensus regarding Ψ(x). In these
two algorithms each node in SP belongs to a particular ES
with probability q independent of other nodes, thus E[|ES|] =
q|SP|. Note that MIRACLE in general need not have the same
E[|ES|] in every round, although in this paper we present