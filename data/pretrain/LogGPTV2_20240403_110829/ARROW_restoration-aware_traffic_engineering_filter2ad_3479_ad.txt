𝑎𝑓 ,𝑡 ≥ 𝑏 𝑓
𝑡∈𝑌∗,𝑞
∀𝑓 :
𝑒
𝑓
𝑓
. For the slack variable Δ𝑧,𝑞
𝑒
than 𝑓 ’s allocated bandwidth 𝑏 𝑓 with Constraint (1); the sum of the
bandwidth of all tunnels on a given IP link 𝑒 should be no larger
than the link capacity 𝑐𝑒 with Constraint (2); and the allocated
bandwidth of flow 𝑓 should be less than the demand of 𝑓 with Con-
straint (3). Constraint (4) considers Arrow’s restorable tunnels by
ensuring the sum of the bandwidth of both residual and restorable
tunnels for flow 𝑓 under failure scenario 𝑞 is larger than 𝑓 ’s allo-
cated bandwidth 𝑏 𝑓 . Constraint (5) considers Arrow’s restorable
links and ensures the sum of the bandwidth of all restorable tunnels
routed on link 𝑒 does not exceed 𝑒’s bandwidth capacity with a
slack variables Δ𝑧,𝑞
for link 𝑒 under
𝑒
scenario 𝑞 and LotteryTicket 𝑧, we also set a bound 𝑀𝑧,𝑞 for the
sum of Δ𝑧,𝑞
to ensure the total slack is within a reasonable region
𝑒
in Constraint (6).
Phase I output. To select the winning LotteryTicket without
solving an ILP, Phase I outputs a floating-point slack variable Δ𝑧,𝑞
𝑒
that allows the bandwidth allocation of restorable tunnels on IP
link 𝑒 to go beyond the link’s restorable capacity 𝑟𝑧,𝑞
. After solving
𝑒
Arrow’s Phase I formulation, we run a post-processing step to find
𝑒 + Δ𝑧,𝑞
the winning LotteryTickets. This is done by comparing 𝑟𝑧,𝑞
with all LotteryTickets. Then, for each failure scenario 𝑞, we select
).5 𝑍∗ is
a set of size |𝑄| that contains the winning LotteryTickets for each
failure scenario 𝑞 ∈ 𝑄. Arrow maps the restoration plan 𝑍∗ into
wavelengths’ reconfiguration rules and installs them on ROADM
config files.
Phase II input parameters. As shown in Table 3, Phase II’s input
parameters include the winning LotteryTicket’s restorable band-
width capacity (denoted by 𝑟∗,𝑞
) and restorable tunnels (denoted
by 𝑌∗,𝑞
). These parameters are calculated from Arrow’s Phase I
post-processing step.
Phase II optimization goal and constraints. Phase II uses the
same optimization goal (maximizing total network throughput) as
Phase I. Moreover, the Constraints (7-9) of Phase II are the same
as Constraints (1-3) in Phase I. However, Constraints (10-11) use
the LotteryTicket 𝑧 with the minimum𝑒∈𝐸 𝑚𝑎𝑥(0, Δ𝑧,𝑞
𝑒
𝑒
𝑒
𝑓
4In our evaluations, we experiment with 𝛼= 0.2, 0.1, and 0.05.
5This technique is similar to the ReLU function commonly used in machine learning.
𝑓
𝑒
and 𝑌∗,𝑞
of the winning LotteryTickets (selected by Phase
the 𝑟∗,𝑞
I) for each failure scenario 𝑞.
Phase II output. The output of the Phase II consists of two parts:
(1) the total bandwidth 𝑏 𝑓 that flow 𝑓 is permitted to utilize (across
all of its tunnels in 𝑇𝑓 ); and (2) the allocation of 𝑏 𝑓 over flow 𝑓 ’s
tunnels 𝑇𝑓 , denoted by 𝑎𝑓 ,𝑡. Arrow periodically computes the opti-
mal values of bandwidth allocations, based on the current demand
matrix. Similar to prior TE schemes, after each TE run, Arrow finds
the traffic splitting ratio for flow 𝑓 among its tunnels, calculated
𝑎𝑓 ,𝑡. These traffic splitting ratios are then
as 𝜔 𝑓 ,𝑡 = 𝑎𝑓 ,𝑡/𝑡 ∈𝑇𝑓
installed on routers [53].6
Probabilistic optimality guarantee. Our goal is to find the opti-
mal restoration plan 𝑧𝑜𝑝𝑡 while maximizing throughput. However,
as discussed in §3.1, simply formulating a joint IP/optical formula-
tion is not scalable. As a result, Arrow relies on the LotteryTickets
abstraction. However, given that the input LotteryTicket set 𝑍 is
generated by randomized rounding, Arrow’s optimality depends
on whether the optimal restoration plan appears in LotteryTickets
set 𝑍. Consequently, Arrow has a probabilistic optimality guar-
antee that depends on the probability of selecting 𝑧𝑜𝑝𝑡 during its
randomized rounding process. Note that we do not provide a de-
terministic optimality guarantee, hence, Arrow’s solution can be
sub-optimal. We leave finding a restoration-aware TE formulation,
with a practical runtime and a deterministic optimality guarantee,
to future work.
Theorem 3.1 (Arrow Probabilistic Optimality). An Arrow
TE with |𝑍𝑞| LotteryTickets finds the optimal allocation under failure
scenario 𝑞 with probability
𝜌𝑞 = 1 − (1 − 𝜅)|𝑍 𝑞|

(12)
where 𝜅 is the probability of finding the optimal LotteryTicket 𝑧𝑜𝑝𝑡
for scenario 𝑞. This probability can be calculated as
× Pr{𝑟𝑜𝑢𝑛𝑑 𝑢𝑝/𝑑𝑜𝑤𝑛}
(13)
where 1 ≤ 𝑒 ≤ 𝑛 is the index of the failed IP link under scenario 𝑞
(as defined in line 4 of Algorithm 1), and Pr{round up/down} is the
probability of rounding up or down to determine each failed IP link’s
restoration option (as defined in lines 6–11 of Algorithm 1).
1≤𝑒≤𝑛
𝜅 =
1
𝛿
Please see Appendix A.3 for proof.
4 NOISE LOADING IN ARROW
For decades, wavelength reconfiguration in large-scale WANs has
been deemed slow and complicated, even with ROADMs being
already deployed. This is because newly reconfigured wavelengths
change the power distribution over the fiber spectrum. Hence, the
cascaded optical amplifiers along the fiber path need to adjust ac-
cordingly. This process introduces a non-trivial challenge to adjust
amplifier gain configurations to equalize wavelength power/Signal-
to-Noise Ratio (SNR) with repetitive observe-analyze-act loops
which take a few minutes per amplifier to converge (Appendix A.7).
This problem is commonly referred to as wavelength channel equal-
ization and has been studied extensively in the optics commu-
nity [7, 8, 16, 51, 55, 62, 67, 92]. Recent work used machine learning
6To avoid division by zero when the denominator is zero, in our code, we change the
tunnels with 𝑎𝑓 ,𝑡 = 0 to 𝑎𝑓 ,𝑡 = 𝜖, where 𝜖 is a small number (i.e., 10−4).
Figure 9: Arrow’s noise loading in action.
to shorten this amplifier reconfiguration delay [90], but it requires
a simulation-based firewall to ensure the parameters are safe to
deploy on live production networks.
Noise loading enables agile wavelength reconfigurations. Ar-
row bypasses the amplifier reconfiguration latency by leverag-
ing a technology called “noise loading” in modern optical back-
bones [33, 35, 83]. A programmable optical noise generation device,
called the Amplified Spontaneous Emission (ASE) device [83], gen-
erates an optical noise signal for all unused wavelengths on all fibers.
As a result, from the amplifier’s perspective, all wavelengths are
present at all times. Although all wavelength channels are turned
up in all fibers, some wavelengths carry noise generated by the
ASE device, and some carry IP layer data generated by routers.
Noise loading example. Consider the WAN depicted in Fig. 9.
Assume all fibers can carry eight wavelengths in total.7 In healthy
state, two of Fiber1’s available frequencies, 𝜆1 and 𝜆2, are connected
to router ports and carry data while the other six frequencies, 𝜆3
to 𝜆8, are loaded with noise (Fig. 9(a)). Fiber2 has four wavelengths
carrying data (𝜆3, 𝜆4, 𝜆5, and 𝜆6), while the other frequencies (𝜆1,
𝜆2, 𝜆7, and 𝜆8) are carrying noise (Fig. 9(b)). Now, assume Fiber1
is cut, causing wavelengths 𝜆1 and 𝜆2 to fail. Arrow reconfigures
these two wavelengths onto Fiber2’s 𝜆1 and 𝜆2 slots, which are
initially loaded with noise, by configuring ROADM A and B, as
well as their noise sources (Fig. 9(d)).8 All of this is hidden from the
amplifiers on both fibers because replacing noise with data is per-
formed locally on the ROADMs (Appendix A.6). As a result, Arrow
circumvents amplifier reconfiguration latency because amplifiers
will no longer experience power changes as the total number of
powered up spectrum frequencies (i.e., eight frequencies) is the
same the entire time.
5 PRODUCTION-LEVEL TESTBED
Setup. To faithfully evaluate Arrow in a real-world setting, we
select a subset of Facebook’s global WAN and separate it from pro-
duction for experimental purposes. Fig. 10 shows our testbed setup
with four ROADMs, 34 amplifiers, and over 2,160 km unidirectional
fiber. In our testbed, all hardware devices and software (control,
monitoring, failure detection and management, etc.) are identical
7In practice, today’s fibers can carry 48-96 wavelengths in the C-band range depending
on channel frequency spacing [28, 38].
8Here, reconfiguring to 𝜆1 and 𝜆2 does not need frequency tuning. If 𝜆1 and 𝜆2 on
fiber 2 are already carrying data, Arrow tunes the frequency of 𝜆1 and 𝜆2 to 𝜆7 and
𝜆8 to avoid colliding with wavelengths carrying data.
BfailureFiber2Fiber1APower(b) Fiber2in healthy state𝜆1 𝜆2𝜆3 𝜆4 𝜆5 𝜆6𝜆7𝜆8noisePower(a) Fiber1in healthy state𝜆1 𝜆2𝜆3 𝜆4 𝜆5 𝜆6 𝜆7𝜆8Power(d) Fiber2after reconfiguration 𝜆1 𝜆2 𝜆3 𝜆4 𝜆5 𝜆6𝜆7𝜆8noisePower(c) Fiber1 is cut𝜆1 𝜆2 𝜆3 𝜆4 𝜆5 𝜆6 𝜆7𝜆8noisenoisenoiseROADMROADMAmplifierdatadatadataNoise sourceNoise sourceFigure 10: Arrow’s production-level testbed. (a) Testbed topology emulating an optical backbone connecting 4 cites in North
America. (b) Physical topology of the testbed. (c) Photo of the testbed.
Figure 11: Restoring 2.8 Tbps of lost IP capacity with Arrow.
Figure 12: Arrow’s restoration latency.
to Facebook’s global WAN. This testbed demonstrates that Arrow
can be readily deployed.
A fiber cut restoration trial. Fig. 11 shows an end-to-end exper-
iment for a fiber cut restoration trial. Fig. 11(a) shows the network
in healthy state. The top topology represents the IP-layer, and the
bottom one represents optical fibers and devices (same layout as
Fig. 10(b)). The color of each IP link matches its underlying fiber
path. There are 16 wavelengths (each wavelength occupies 75 GHz
spectrum frequency width modulated at 200 Gbps bandwidth ca-
pacity) grouped into 4 port-channels to support 4 IP links: A↔B
(0.4 Tbps), A↔C (1.2 Tbps), B↔D (1.2 Tbps), and C↔D (0.4 Tbps).
Fig. 11(b) shows the state of the network after fiber CD is cut. This
fiber was carrying 14 wavelengths (𝜆3-𝜆16) and its cut caused 3 IP
links, A↔C, B↔D, C↔D, to fail. To restore the IP-layer capacity,
Arrow reconfigures the wavelengths as shown in Fig. 11(c).
Quantifying the restoration latency. Fig. 12 compares the restora-
tion latency of Arrow with the state-of-the-art method [73]. We
first use the current amplifier reconfiguration approach in Face-
book to reconfigure the wavelengths (the same failure scenario as
in Fig. 11). Figs. 12(a) and (b) show the normalized IP layer capacity
and optical power measured on fiber AB; as the figure shows, it
requires 1,021 seconds (≈17 mins) to restore 2.8 Tbps. We then use
Arrow’s noise loading device to bypass the amplifier reconfigura-
tion latency. Figs. 12(c) and (d) show the entire restoration latency
is eight seconds; i.e., 127× faster than the state-of-the-art method.
We believe this latency can be further reduced to milliseconds with
more advanced hardware, as shown in prior work [22]. Moreover,
Arrow’s reconfiguration does not affect existing wavelengths (𝜆1
and 𝜆2) running on the fiber AB, as shown in Fig. 12(d).
Other factors affecting the latency. Two other factors affect
Arrow’s restoration latency in practice: 1) wavelength tuning (if
there is a frequency collision on the surrogate fiber path); 2) modu-
lation change (if the length of the surrogate fiber path increases).
Note that these two steps are optional, as appropriate, and can be
adjusted in parallel with ROADM reconfiguration because they af-
fect the transponders only. Prior work has demonstrated frequency
tuning [10, 29] and modulation change [76, 77] in milliseconds.
6 LARGE-SCALE SIMULATIONS
We use simulations to quantify the performance gains of Arrow.
Our simulation framework is implemented with the Julia program-
ming language [15] and the Gurobi solver [66]. Our code is available
online.9 We compare Arrow to the following schemes:
• FFC [63]. FFC is a failure-aware TE formulation that guarantees
zero loss for up to 𝑘 IP-link failure scenarios. We extend FFC to
the optical layer by considering scenarios with 𝑘 fiber cuts, and
evaluate both 𝑘 = 1 and 𝑘 = 2 cases and refer to them as FFC-1 and
FFC-2, respectively.
• TeaVaR [17]. TeaVaR is also a failure-aware TE formulation but
instead of absolute guarantees, it provides a probabilistic guarantee
depending on the failure probability of fibers. In our simulations,
we set TeaVaR’s availability target (𝛽) at 99.9%.
• ECMP [21]. ECMP is not a failure-aware TE and serves as a
baseline in our evaluations. It does not consider failure scenarios,
hence it does not provide any guarantees with respect to failures;
it simply assigns equal amount of traffic to all tunnels of each flow.
9http://arrow.csail.mit.edu
(b)360 km140 km200 km200 km180 kmAmplifier site (EDFA)TransponderROADM siteOptical Transponders2160 km long-haul single-mode fibers(c)Site D ROADM(a)Site DSite BSite A Site CSite C ROADMSite B ROADMSite A ROADMAmplifierDBA CAmplifier(a) Healthy networkOptical layer viewIP layer  viewRouter BRouter ARouter DRouter Cλ1 –λ2λ3–λ8λ9 –λ14λ15–λ16BADC(b) Network under fiber cut Optical layer viewIP layer  viewBADC(c) Restored networkADCBOptical layer viewIP layer  viewλ1 –λ2λ1 –λ2λ3–λ8λ9 –λ14λ15–λ16Router BRouter ARouter DRouter CRouter BRouter ARouter DRouter C00.250.50.751Wavelength power (dBm)-20-100101021 secondsTime (seconds)(b) State-of-the-art: Optical PowerTime (seconds)Normalized IP capacity(a) State-of-the-art: IP Link Capacity0                   360                720              10800            360           720         10800                 20                 40                60Wavelength  power (dBm)Time (seconds)00.250.50.7518 secondsNormalized IP capacityTime (seconds)(d) ARROW: Optical Power(c) ARROW: IP Link Capacity-20-10010𝜆1-𝜆2𝜆3-𝜆8𝜆9-𝜆14𝜆15-𝜆16A-B linkA-C linkB-D linkC-D link0                 20                 40                 60Figure 13: Availability vs. demand scales for Arrow and state-of-the-art failure-aware TE schemes.
# Fibers
# IP links
# Traffic matrices
Availability Arrow-Naive
99.999%
99.99%
99.9%
99%
Arrow’s gain in terms of satisfied demand
TeaVaR
2.3×
1.6×
2.4×
2.0×
2.0×
2.3×
1.8×
1.9×
FFC-1
2.2×
2.2×
2.0×
1.5×