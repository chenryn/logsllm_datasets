IAM authentication
IAM authorization
AWS credentials
IAM limitations
IAM best practices
This chapter will help us understand user authentication and access control in detail.
Essentially, IAM is our first step towards securing our AWS resources. All of us who have
used a laptop or a mobile phone understand that access control plays a vital part in securing
our resources. So, if a person gets hold of your credentials, it will be disastrous from the
point of view of data security. Ensuring your credentials are secure, having trusted entities
interacting with your AWS resources, and having stringent controls as well as greater
flexibility allows you to support multiple use cases with a wide variety of AWS resources.
Along with learning about all available IAM features, we will also learn how to create,
monitor, and manage various identities, their credentials, and policies. Additionally, we'll
look at Multi-Factor Authentication (MFA), Secure Token Service (STS), and tools such as
IAM policy simulator.
Following on, we'll deep dive into identities and policies. We'll learn what tools and
features are available in AWS IAM to support a myriad of use cases for allowing access and
performing actions on AWS resources. We will go through the various credentials that AWS
provides and how to manage them.
AWS Identity and Access Management
[ 39 ]
We'll go through IAM limitations for various entities and objects. Lastly, we'll take a look at
IAM best practices that are recommended to ensure that all your resources can be accessed
in a secure manner.
IAM features and tools
IAM is free of cost. It is Payment Card Industry Data Security Standard (PCI-
DSS) compliant, so you can run your credit card application and store credit card
information using IAM. It is also eventually consistent, meaning any change you make in
IAM would be propagated across multiple AWS data centers: this propagation could take a
few milliseconds. So design your application and architecture keeping this feature in mind.
IAM integrates with various AWS services so you can define fine grain access control for
these services.
Let us look at other features of IAM that make it such a widely used, powerful, and
versatile AWS service. As a matter of fact, if you have an AWS account and you want to use
resources in your AWS account, you have to pass through IAM in one way or other, there's
no two ways about it!
Security
IAM is secure by default. When you create a new user in IAM, by default this user has no
permission assigned for any AWS resource. You have to explicitly grant permissions to
users for AWS resources and assign them unique credentials. You don't have a need for
sharing credentials as you can create separate identities (user accounts) and multiple types
of credentials for all use cases.
AWS account shared access
If you are an organization or an enterprise, you would have one or more AWS accounts,
and you will have a requirement to allow other people access your AWS account(s). IAM
allows you to do that with the help of user accounts without you sharing your credentials
with other people. If you are an individual and you want other people to access your AWS
account, you can do that as well by creating separate user accounts for them in your AWS
account.
AWS Identity and Access Management
[ 40 ]
Granular permissions
Let's take a common scenario: you want to allow developers in your organization to have
complete access to the Elastic Compute Cloud (EC2) service and the finance or accounting
team should have access to billing information and people in the human resources
department should have access to a few S3 buckets. You can configure these permissions in
IAM, however, let's say you want to have your developers access the EC2 service only from
Monday to Friday and between office hours (let's say 8 a.m. to 6 p.m.), you can very well
configure that as well.
IAM allows you to have really fine grain permissions for your users and for your resources.
You could even allow users to access certain rows and columns in your DynamoDB table!
Identity Federation
At times, you'll have a requirement to allow access to users or resources, such as
applications outside of your organization, to interact with your AWS services. To facilitate
such requirements, IAM provides a feature called Identity Federation. It allows you to
provide temporary access to those having their credentials stored outside of your AWS
account such as Microsoft Active Directory, Google, and so on. We'll have a detailed look at
identity federation later in this chapter.
Temporary credentials
There are scenarios where you would want an entity to access resources in your AWS
account temporarily and you do not want to create and manage credentials for them. For
such scenarios, IAM offers the roles feature. Roles could be assumed by identities. IAM
manages credentials for roles and rotates these credentials several times in a day. We will
look at roles in detail in our IAM authentication section in this chapter.
You could access IAM in the following four ways:
AWS Management Console
AWS command line tools
AWS software development kits
IAM HTTPS API
Let us look at these options in detail:
AWS Identity and Access Management
[ 41 ]
AWS Management Console
The AWS Management Console is a web based interface for accessing and managing AWS
resources and services including IAM. Users are required to sign in using the sign-in link
for AWS account along with their username and password. When you create a user, you
choose if they can access AWS resources using either the AWS console or by using the AWS
command line interface, that is, programmatically or by both methods.
AWS Management Console is available on various devices such as tables and mobile
phones. You can also download a mobile app for AWS console from Amazon Apps, iTunes,
or Google Play.
As an AWS account owner, you get the URL for the sign-in when you log in to your AWS
account. This URL is unique for each account and is used only for web based sign-in. You
can customize this URL as well through your AWS account to make it more user friendly.
You can also use your root account credentials for signing-in through the web based
interface. Simply navigate to the account sign-in page and click on the Sign-in using root
credentials link as shown in the following figure. However, as discussed in Chapter 1,
Overview of Security in AWS, AWS does not recommend using your root account for
carrying out day to day tasks, instead AWS recommends creating separate user accounts
with the required privileges:
Figure 1 - AWS console login
AWS Identity and Access Management
[ 42 ]
AWS command line tools
AWS command line interface (CLI) and AWS tools for Windows PowerShell are two tools
provided by AWS to access AWS services. These tools are specifically useful for automating
your tasks through scripts on your system's command line and are often considered more
convenient and faster than using AWS Management Console. AWS CLI is available for
Windows, Mac, and Linux. You can find more information about AWS CLI including the
downloadable version at https:/​/​aws.​amazon.​com/​cli.
AWS SDKs
AWS Software Development Kits (SDKs) are available for popular programming
languages such as .NET, JAVA, and so on. AWS SDKs are also available for platforms such
as iOS and Android for developing web and mobile applications. These SDKs enables
application developers to create applications that can interact with various AWS services by
providing libraries, sample code etc. For more information about these SDKs, please visit
https:/​/​aws.​amazon.​com/​tools.
IAM HTTPS API
Another way to programmatically access AWS Services including IAM is to use IAM
HTTPS (secure HTTP) Application Programming Interface (API). All the API requests
originating from AWS developer tools such as AWS CLI and AWS SDKs are digitally
signed by AWS, providing additional layer of security for data in transit.
IAM Authentication
IAM authentication in AWS includes the following identities:
Users
Groups
Roles
Temporary security credentials
Account root user
AWS Identity and Access Management
[ 43 ]
Identities are used to provide authentication for people, applications, resources, services,
and processes in your AWS account. Identities represent the user that interacts with the
AWS resources based on authentication and authorization to perform various actions and
tasks. We will look at each one of the identities in detail.
IAM user
You create an IAM user in AWS as an entity to allow people to sign into the AWS
Management Console or to make requests to AWS services from your programs using CLI
or API. An IAM user can be a person, an application, or an AWS service that interacts with
other AWS services in one way or another. When you create a user in IAM, you provide it
with a name and a password that is required to sign into the AWS Management Console.
Additionally, you can also provision up to two access keys for an IAM user consisting of the
access key ID and a secret access key, that are needed to make requests to AWS from CLI or
API.
As we know, by default IAM users have no permissions, so you need to give this brand new
user permissions either by assigning them directly or by adding them to a group that has all
the necessary permissions, the latter being recommended by AWS and a much preferred
way to manage your users and their permissions. Alternatively, you can also clone
permissions of an existing IAM user to copy policies and add users to the same groups as
the existing IAM users. With every IAM user, there are the following three types of
identification options available:
Every IAM user has a friendly name such as Albert or Jack that's helpful in
identifying or associating with people for whom we have created this user
account. This name is given when you create an IAM user and it is visible in the
AWS Management Console.
Every IAM user has an Amazon Resource Name (ARN) as well; this name is
unique for every resource across AWS. An ARN for an IAM user in my AWS
account looks like arn:aws:iam::902891488394:user/Albert.
Every IAM user has a unique identifier for the user that's not visible in the AWS
Management Console. You can get this ID only when you create a user in the
IAM programmatically through API or AWS command line tools such as AWS
CLI.
AWS Identity and Access Management
[ 44 ]
Whenever we create a new IAM user, either through AWS console or programmatically,
there aren't any credentials assigned to this user. You have to create credentials for this user
based on access requirements. As we have seen earlier, a brand new IAM user does not
have any permission to perform any actions in AWS account for any AWS resources.
Whenever you create an IAM user, you can assign permissions directly to each individual
users. AWS recommends that you follow the least privilege principles while assigning
permissions, so if a user named Jack needs to access S3 buckets, that's the only permission
that should be assigned to this user.
The following figure shows IAM users for my AWS account:
Figure 2 - AWS IAM users
Let us look at the steps to create a new IAM user by using the AWS console. You can also
create an IAM user through AWS CLI, IAM HTTP API, or tools for Windows PowerShell:
Navigate to the IAM dashboard.
1.
Click on the Users link. It will show you the existing users (if any) for your AWS
2.
account as shown in the preceding figure – AWS IAM users.
IAM is a global service so you will see all users in your AWS account.
3.
Click on the Add user button.
4.
5. Add a friendly name for the user in the username textbox.
AWS Identity and Access Management
[ 45 ]
If this user is going to access AWS through the console then give this user the
6.
AWS Management Console Access, if the user will access AWS resources only
programmatically then give only programmatic access by selecting the
appropriate checkbox. You can select both options as well for a user.
Click on the Permissions button to navigate to the next page.
7.
On the Permissions page, you have three options for assigning permissions to
8.
this user. You can assign permissions at this stage or you can assign them after
you have created this user:
You can add this user to a group so the user gets all the permissions
attached to a group.
You can copy permissions from an existing user so this new user will
have the same permissions as an existing use
You can attach permissions directly to this user
Click on the Next: Review button.
9.
On this page, review all information for this user that you have entered so far and
10.
if all looks good, click on the Create User button to create a new IAM user. If you
want to edit any information, click on the Previous button to go back and edit it.
On the next page, you are presented with the success message along with
11.
credentials for this user. AWS also provides you with a .csv file that contains all
credentials for this user. These credentials are available for download only once.
If these credentials are lost, they cannot be recovered, however, new credentials
can be created anytime.
When you navigate to the Users page through the IAM dashboard, on the top right-hand
corner, you see global written inside a green rectangle. This indicates that users are global
entities, that is when you create a user you do not have to specify a region. AWS services in
all regions are accessible to an IAM user. Moreover, each IAM user is attached to one AWS
account only, it cannot be associated with more than one AWS account. Another thing to
note is that you do not need to have separate payment information for your users stored in
AWS, all the charges incurred by activities of users in your AWS account is billed to your
account.
AWS Identity and Access Management
[ 46 ]
As noted earlier, an IAM user can be a person, an AWS service, or an application. It is an
identity that has permissions to do what it needs to do and credentials to access AWS
services as required. You can also create an IAM user to represent an application that needs
credentials in order to make requests to AWS. This type of user account is known as a
service account. You could have applications with their own service accounts in your AWS
account with their own permissions.
IAM groups
A collection of IAM users is known as an IAM group. Groups allow you to manage
permissions for more than one users by placing them according to their job functions,
departments, or by their access requirements. So, in a typical IT organization, you'll have 
groups for developers, administrators, and project managers. You will add all users
belonging to their job functions in groups and assign permissions directly to the group; all
users belonging to that group will get that permission automatically. If a developer moves
to another job function within an organization, you'll simply change his/her group to get
new permissions and revoke the old ones. Thus making it easier to manage permissions for
multiple users in your organization.
Let us look at features of IAM groups:
A group can have multiple users and a user can be member of more than one
group.
Nesting of group is not allowed, you can't have a group within a group.
A group can contain many users, and a user can belong to multiple groups.
Groups can't be nested; they can contain only users, not other groups.
Groups are not allowed to have security credentials and they can't access AWS
services. They simply provide a way to manage IAM users and permissions
required for IAM users.
Groups can be renamed, edited, created, and deleted from AWS console as well
as from CLI.
Let us look at the following diagram as an example for IAM groups, there are three groups
Admins, Developers, and Test. The Admins group contains two people, Bob and Susan,
whereas Developers group contains application such as DevApp1 along with people. Each
of these users in these groups have their own security credentials:
AWS Identity and Access Management
[ 47 ]
Figure 3 - AWS IAM groups
Normally, the following would be the sequence of events for creating these groups and
users:
AWS account will be created by the organization.
1.
Root user will login and create the Admins group and two users Bob and Susan.
2.
Root user will assign administrator permission to Admins group and add Bob
3.
and Susan to the Admins group.
Users in the Admins group will follow the same process for creating other
4.
groups, users, assigning permissions to groups, and adding users to groups.
Note that the root user is used only for creating the admins users and
groups. Alternatively, root user can simply create an IAM user Susan with
administrator permission and all of the work after that can be done by
user Susan. After that, all other groups and users are created by using
users who have administrator permissions.
Let us look at the following steps to create groups using AWS console. You can create
groups from AWS CLI, AWS API, and tools for Windows PowerShell as well:
Navigate to IAM by using the AWS console.
1.
Click on Groups in the navigation pane.
2.
Click on the Create New Group button. On this page, you can see all groups
3.
present in your AWS account.
AWS Identity and Access Management
[ 48 ]
Give the name for your group and click on the Next Step button.
4.
On the next page, you can attach a policy to your group or you could do it after
5.
you have created a group.
Review all the information for this group and click on the Create Group button.
6.
Once your group is created, you can add/remove users from this group. You can
7.
also edit or delete the group from the console.
IAM roles
An IAM role is an AWS identity, recommended by AWS over the IAM user for the many
benefits it provides when compared to an IAM user. A role is not necessarily associated
with one person, application, or a service, instead, it is assumable by any resource that
needs it. Moreover, credentials for roles are managed by AWS; these credentials are created
dynamically and rotated multiple times in a day. Roles are a very versatile feature of IAM,
it can be used for a variety of use cases such as delegating access to services, applications or
users that might not need access to your AWS resources regularly or they are outside of
your organization and need to access your AWS resources. You can also provide access to
resources whose credentials are stored outside of your AWS account such as your corporate
directory. You can have the following scenarios making use of roles:
An IAM user having different AWS account as the role.
An IAM user having similar AWS account as IAM role.
AWS web service provided by AWS such as S3.
Any user outside of your organization that is authenticated by any external
identity provider service compatible with Security Assertion Markup Language
(SAML) 2.0 or OpenID Connect or Compatible with any custom built identity
broker.
Let us look at the steps to create a role using the AWS console. You can create roles by using
the AWS CLI, AWS API, or tools for Windows PowerShell:
Navigate to the IAM dashboard from the AWS console.
1.
Click on Roles in the navigation pane.
2.
Click on the Create New Role button. On this screen, you can view, edit, and
3.
delete all roles available in your AWS account.
Select one of the 4 types of IAM roles available as mentioned in the next section.
4.
5. Attach policies to this role and click on the Next Step button.
AWS Identity and Access Management
[ 49 ]
On the next screen, give a user friendly name to this role and optionally add a
6.
description.
You can also change policies on this screen.
7.