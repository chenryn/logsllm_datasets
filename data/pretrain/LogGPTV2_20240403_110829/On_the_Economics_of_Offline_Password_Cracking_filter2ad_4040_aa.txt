title:On the Economics of Offline Password Cracking
author:Jeremiah Blocki and
Benjamin Harsha and
Samson Zhou
2018 IEEE Symposium on Security and Privacy
On the Economics of Ofﬂine Password Cracking
Jeremiah Blocki
Purdue University
Ben Harsha
Purdue University
Samson Zhou
Purdue University
Abstract—We develop an economic model of an ofﬂine pass-
word cracker which allows us to make quantitative predictions
about the fraction of accounts that a rational password attacker
would crack in the event of an authentication server breach. We
apply our economic model to analyze recent massive password
breaches at Yahoo!, Dropbox, LastPass and AshleyMadison.
All four organizations were using key-stretching to protect user
5
passwords. In fact, LastPass’ use of PBKDF2-SHA256 with 10
hash iterations exceeds 2017 NIST minimum recommendation
by an order of magnitude. Nevertheless, our analysis paints
a bleak picture: the adopted key-stretching levels provide
insufﬁcient protection for user passwords. In particular, we
present strong evidence that most user passwords follow a
Zipf’s law distribution, and characterize the behavior of a
rational attacker when user passwords are selected from a
Zipf’s law distribution. We show that there is a ﬁnite threshold
which depends on the Zipf’s law parameters that character-
izes the behavior of a rational attacker — if the value of
a cracked password (normalized by the cost of computing
the password hash function) exceeds this threshold then the
adversary’s optimal strategy is always to continue attacking
until each user password has been cracked. In all cases (Yahoo!,
Dropbox, LastPass and AshleyMadison) we ﬁnd that the value
of a cracked password almost certainly exceeds this threshold
meaning that a rational attacker would crack all passwords
that are selected from the Zipf’s law distribution (i.e., most user
passwords). This prediction holds even if we incorporate an
aggressive model of diminishing returns for the attacker (e.g.,
the total value of 500 million cracked passwords is less than 100
times the total value of 5 million passwords). On a positive note
our analysis demonstrates that memory hard functions (MHFs)
such as SCRYPT or Argon2i can signiﬁcantly reduce the
damage of an ofﬂine attack. In particular, we ﬁnd that because
MHFs substantially increase guessing costs a rational attacker
will give up well before he cracks most user passwords and
this prediction holds even if the attacker does not encounter
diminishing returns for additional cracked passwords. Based
on our analysis we advocate that password hashing standards
should be updated to require the use of memory hard functions
for password hashing and disallow the use of non-memory hard
functions such as BCRYPT or PBKDF2.
1. Introduction
In the last few years breaches at organizations like Ya-
hoo!, Dropbox, Lastpass, AshleyMadison, LinkedIn, eBay
and Adult FriendFinder have exposed over a billion user
passwords to ofﬂine attacks. Password hashing algorithms
are a critical last line of defense against an ofﬂine attacker
who has stolen password hash values from an authentication
server. An attacker who has stolen a user’s password hash
value can attempt to crack each user’s password ofﬂine by
comparing the hashes of likely password guesses with the
stolen hash value. Because the attacker can check each guess
ofﬂine it is no longer possible to lockout the adversary after
several incorrect guesses.
An ofﬂine attacker is limited only by the cost of com-
puting the hash function. Ideally, the password hashing al-
gorithm should be moderately expensive to compute so that
it is prohibitively expensive for an ofﬂine attacker to crack
most user passwords e.g., by checking millions, billions or
even trillions of password guesses for each user. It is perhaps
encouraging that AshleyMadison, Dropbox, LastPass and
Yahoo! had adopted slow password hashing algorithms like
BCRYPT and PBKDF2-SHA256 to discourage an ofﬂine
attacker from cracking passwords. In the aftermath of these
breaches, the claim that slow password hashing algorithms
like BCRYPT [1] or PBKDF2 [2] are sufﬁcient to protect
most user passwords from ofﬂine attackers has been re-
peated frequently. For example, LastPass [3] claimed that
“Cracking our algorithms [PBKDF2-SHA256] is extremely
difﬁcult, even for the strongest of computers.” Security ex-
perts have made similar claims about BCRYPT e.g., after the
Dropbox breach [4] a prominent security expert conﬁdently
stated that “all but the worst possible password choices are
going to remain secure” because Dropbox had used the
BCRYPT hashing algorithm.
Are these strong claims about the security of BCRYPT
and PBKDF2 true? Despite all of their problems passwords
remain prevalent and are likely to remain entrenched as the
dominant form of authentication on the internet for years to
come because they are easy to use and deploy, and users
are already familiar with them [5], [6], [7]. It is therefore
imperative to develop tools to quantify the damages of
password breaches, and provide guidance to organizations
on how to store passwords. In this work we seek to address
the following question:
Can we quantitatively predict how many user pass-
words a rational attacker will crack after a breach?
We introduce a game-theoretic model to answer this
question and analyze recent data-breaches. Our analysis
strongly challenges the claim that BCRYPT and PBKDF2-
SHA256 provide adequate protection for user passwords. On
the positive side our analysis indicates that more modern
© 2018, Jeremiah Blocki. Under license to IEEE.
DOI 10.1109/SP.2018.00009
853
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:33:59 UTC from IEEE Xplore.  Restrictions apply. 
password hashing algorithms [8] (e.g., memory hard func-
tions [9]) can provide meaningful protection against ofﬂine
attackers.
1.1. Contributions
We ﬁrst develop a new decision-theoretic framework
to quantify the damage of an ofﬂine attack. Our model
generalizes the stackelberg game-theoretic model of Blocki
and Datta [10]. A rational password attacker is economi-
cally motivated and will quit guessing once his marginal
guessing costs exceed his marginal reward. The attacker’s
marginal reward is given by the probability pi that the
next (ith) password guess is correct times the value of
an additional cracked password to the adversary e.g., the
additional revenue of selling that password on the black
market or the expected amount of additional money that
could be extorted from this user. Given the average value v
of each cracked password for the adversary1, the cost k of
computing the password hash function and the probability
distribution p1 > p2 > . . . over user selected passwords,
our model allows us to predict exactly how many passwords
a rational adversary will crack. Unlike the model of Blocki
and Datta [10] we can use our framework to model a setting
in which the attacker encounters diminishing returns as we
would expect in most (black)markets i.e., the total value
of 500 million cracked passwords may be signiﬁcantly less
than 100 times the total value of 5 million passwords.
Second, we present the strongest evidence to date that
Zipf’s law models the distribution of user selected passwords
(with the possible exception of the tail of the distribution).
These ﬁndings strongly support previous conclusions of
Wang and Wang [11]. In particular, we show that Zipf’s
law closely ﬁts the Yahoo! password frequency corpus. This
dataset was collected by Bonneau [12] and later published
by Blocki et al. [13]. In contrast to datasets from password
breaches the Yahoo! dataset was collected by trusted parties,
and is representative of active Yahoo! users (researchers
have observed that hacked datasets contain many passwords
that appear to be fake [14]). Our sample size, 70 million
users, is also more than twice as large as the datasets Wang
and Wang[11] used to support their argument that Zipf’s
law closely models password datasets.
Third, we show that there is a ﬁnite threshold T (.) which
characterizes the behavior of a rational value v-adversary
whenever the distribution over passwords follows Zipf’s
law. In particular, if the ﬁrst cracked password has value
v ≥ T (.)× k then the adversary’s optimal strategy is always
to continue guessing until he cracks the user’s password. The
threshold T (y, r, a) is parameterized Zipf’s law parameters
y and r and a parameter a representing the rate of password
value decay. We remark that, even if Zipf’s law fails to
model the tail of the password distribution, the threshold
T (y, r, a) still provides a useful characterization of the
1. More precisely, if there are N users in the dataset and the total
value of all N cracked passwords is V then v = V/N. When there are
diminishing returns for additional cracked passwords the parameter v may
be signiﬁcantly lower than the value of the ﬁrst cracked password.
854
attacker’s behavior. In particular, if (1 − x)% of passwords
in a distribution follow Zip’s law and the other x% follow
some unknown (possibly uncrackable) distribution then our
bounds imply that an attacker will compromise at least
(1 − x)% of user passwords whenever v ≥ T (y, r, a) × k.
Fourth, we also derive model independent upper and
lower bounds on the fraction of passwords that a rational
adversary would crack. While these bounds are slightly
weaker than the bounds we can derive using Zipf’s law these
bounds do not require any modeling assumptions e.g., it is
impossible to determine for sure whether or not Zipf’s law
ﬁts the tail of the password distribution. Interestingly, the
lower bounds we derive suggest that state of the art password
crackers [15] could still be improved substantially.
Fifth, we apply our framework to analyze recent large
scale password breaches including LastPass, AshleyMadi-
son, Dropbox and Yahoo! Our analysis strongly challenges
the claim that BCRYPT and PBKDF2-SHA256 provide
adequate protection for user passwords. In fact,
if the
password distribution follows Zipf’s law then our analy-
sis indicates that a rational attacker will almost certainly
crack 100% of user passwords e.g., unless the value of
Dropbox/LastPass/AshleyMadison/Yahoo! passwords is sig-
niﬁcantly less valuable than black market projections [16].
Finally, we derive model independent upper and lower
bounds on the % of passwords cracked by a rational ad-
versary. These bounds do not rely on the assumption that
Zipf’s law models the tail of the password distribution2.
Nevertheless, our predictions are still quite dire e.g., a
rational adversary will crack 51% of Yahoo! passwords at
minimum. Our analysis indicates that, to achieve sufﬁcient
levels of protection with BCRYPT or PBKDF2, it would be
necessary to run these algorithms for well over a second
on modern CPU which would constitute an unacceptable
authentication delay in many contexts [17]. On a more
positive note our analysis suggests that the use of more
modern password hashing techniques like memory hard
functions can provide strong protection against a rational
password attacker without introducing inordinate delays for
users during authentication. In particular, our analysis sug-
gests that it could be possible to reduce the % of cracked
passwords below 22.2% without increasing authentication
delays to a full second.
1.2. Discussion
In light of our analysis we contend that that there is
a clear need to update standards for password storage to
provide developers with clear guidance about the importance
of using memory hard functions such as SCRYPT [9] or
Argon2id [18]. In a recent recent user study Naiakshina
et al. [19] asked developers to select a password hash
function for a new social networking platform. None of the
2. Wang and Wang [11] observed that the tails of empirical password
datasets are not inconsistent with a Zipf’s law distribution. However, we
cannot be entirely conﬁdent that Zipf’s law models the tail of the distribu-
tion since, by deﬁnition, we do not have many samples for passwords in
the tail of the distribution.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:33:59 UTC from IEEE Xplore.  Restrictions apply. 
developers in this study selected a memory hard function3
and the strongest password hashing algorithms selected were
PBKDF2 with 20,000 hash iterations and BCRYPT with
1,024 iterations. The selection of PBKDF2 with 20,000 hash
iterations would be deemed acceptable under 2017 NIST
standards [20] — PBKDF2 with at least 10, 000 iterations is
presented an acceptable selection for password hashing4. In
this sense, LastPass’ use of PBKDF2-SHA256 with 100, 000
iterations greatly exceeds current NIST standards. Neverthe-
less, our analysis suggests that even PBKDF2-SHA256 with
100, 000 hash iterations is insufﬁcient to protect a majority
a user passwords while memory hard functions such as
SCRYPT [9] or Argon2id [18] would provide meaningful
protection. In addition to memory hard functions we also
advocate for the use of secure distributed password hashing
protocols [22], [23], [24] whenever feasible so that an
attacker cannot mount an ofﬂine attack without breaching
multiple authentication servers.
2. Economic Model
2.1. Preliminaries
Given a dataset D of N user passwords we use fi to de-
note the frequency of the i’th most common password in the
dataset and we use pwdi to denote the i’th most common
password in the dataset. We use p1, p2, . . . to denote the
actual distribution over passwords pwd1, pwd2, . . .. That
is pi is the probability that a random user selects password
pwdi. We use ^pi = fi/N to denote an empirical estimate
(cid:2)i
of pi given a dataset D which was sampled from the real
password distribution. We also use λi =
j=1 pj to denote
the cumulative probability of the i most likely passwords.
Equivalently, λi denotes the probability that an adversary
cracks the user’s password within the ﬁrst i guesses.
We say that the probability distribution p1 ≥ p2 . . .
follows Zipf’s law if pi = z
is for some constants s and z.
We say that a probability distribution follows a CDF-Zipf
distribution if λi = yi
r for some constants r and y.
In more detail
traditionally store
Ofﬂine Attack. To authenticate users password
salted pass-
authentication servers
word hashes.
to authenticate user u
the authentication stores a record like the following:
(u, su, H (pwdu|su)). Here, u is the the username and
pwdu is the user’s password, su is a random string called
the salt value used to protect against rainbow table attacks
and H is a cryptographic hash function. An adversary who
breaches the authentication server will be able to obtain
the hash value along with the secret salt value. This ad-
versary can now attempt as many guesses as he desires
ofﬂine by computing the hashes of likely passwords guesses
H(g1, su), H(g2, su), . . . and comparing these values with
3. On a positive note the authors did ﬁnd that priming developers about
the importance password security resulted in the selection of stronger
password hashing algorithms.
4. An upgrade from 1, 000 iterations as the minimal acceptable number
of hash iterations for PBKDF2 in an older 2010 NIST standard [21].
855
the stolen password hash. The attacker is only limited by
the resources that he is willing to invest trying to crack the
user’s password.
Key Questions and Parameters. We aim to address
the following questions: How many guesses will our rational
adversary attempt? What fraction of the user passwords
will an adversary manage to break? The answer to these
questions will depend on several factors. How valuable is a
cracked password to the adversary? How much does it cost
to compute H each time we validate a new password guess?
What does the distribution over user passwords look like?
We use v to denote the value of a cracked password
to the adversary measured in units of CH, where H is an
underlyng cryptographic hash function like SHA256. We
can estimate v$ by looking at black market prices for cracked
passwords. For example, Fossi et al. [16] found that the
market price for hacked passwords tends to lie in the range
[$4, $30]. A more recent analysis of Yahoo! passwords found
that they sell for between $0.7 and $1.2 [25] — the drop
in price may be due to an increased supply of Yahoo! pass-
words. Herley and Florencio found that dishonest behavior
can signiﬁcantly inhibit trade on black markets [26]. Thus,
these prices may underestimate the true value of a cracked
password.
Password hash functions are often constructed from an
underlying cryptographic hash function H. For example,
PBKDF2-SHA256 simply iterates the SHA256 hash func-
tion multiple times. We use k to denote the cost of a
computing the ﬁnal password hash function — once again
measured in units of CH. We use v$ = v × CH (resp.
k$ = k× CH) to denote the value (resp. cost) in USD given
an estimate of CH.
2.2. Rational Adversary
We model a rational adversary who has obtained the
salted password hash of a user’s password. Our model gen-
eralizes the stackelberg game-theoretic framework of Blocki
and Datta [10] by introducing a parameter 0 ≤ a ≤ 1
which models diminishing returns. We assume that adver-
sary knows the password distribution p1, p2, . . . as well as
the corresponding passwords pwd1, pwd2, . . .. However,
the adversary does not know which password the user
selected.
Attacker Game. We model password cracking using
a single-shot game. In the game we sample a random pass-
word pwd from the password distribution Pr[pwdi] = pi.
The adversary picks a threshold t ≥ 0. The threshold t
speciﬁes an ordered list L(t) = pwd1, . . . , pwdt of the t
most likely passwords. If the real password is contained
in the list of adversary guesses, pwd ∈ L(t), then the
adversary receives a payment of v and we charge the ad-
versary j · k, where j is the index of the correct password
guess pwd = pwdj. If the real password is not contained
in the list pwd1, . . . , pwdt of adversary guesses then the
adversary receives no payment (v = 0) and the adversary is
charged t·k. Notice that t = 0 corresponds to the strategy in
which the adversary gives up without guessing, and t = ∞
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:33:59 UTC from IEEE Xplore.  Restrictions apply. 
(cid:2)t
corresponds to the strategy in which the adversary never
quits. Observe that λt =
j=1 pj denotes the fraction of
user passwords that are cracked by a threshold t adversary.
About the Attacker. In our analysis we consider an
attacker that is
(1) Informed: The attacker knows the password dis-
tribution p1, p2 . . . and the associated passwords
pwd1, pwd2 . . .. However, the attacker does not know
which password a particular user u selected.
(2) Untargeted: The attacker does not have personal
the user that can be exploited to
knowledge about
improve the guessing attack.
(3) Rational: The attacker is economically motivated, and
will stop attacking the user once marginal guessing
costs exceed the marginal guessing rewards.
Discussion. Our attacker model captures the most
common types of password attacks. It is generally reason-
able to assume that the attacker knows the password distri-
bution — possibly excluding of the tail of the distribution.
In particular, previous password breaches provide plenty of
training data for the attacker and it is reasonable to assume
that password cracking models will continue to improve as
attackers obtain more and more training data from future
password breaches. We focus on an untargeted attacker in
our analysis. However, we stress that our model may also be
useful when considering a targeted attacker with background
knowledge of the user (e.g., name, birthdate, hobbies etc...).
In particular, let pi denote the probability that a targeted