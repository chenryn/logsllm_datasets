implementation disclosures.
3
Following traditional CFI, an O-CFI policy assigns to each
indirect branch site a destination set that captures its set of
permissible destination addresses. Such a graph can be derived
from the program’s source code or (with lesser precision) a
conservative disassembly of its object code. We next reformulate
this policy as a bounds-checking problem by reducing each
destination set to only its minimal and maximal members.
This policy approximation can be efﬁciently enforced by
conﬁning each branch to the memory-aligned addresses within
its destination set range. All intended destination addresses are
aligned within these bounds, so the enforcement conservatively
preserves intended control-ﬂows. Code layout is optimized
to tighten the bounds, so that the set of unintended, aligned
destinations within the bounds remains minimal. These few
remaining unintended but reachable destinations are protected
by the artiﬁcial diversity half of our approach.
Since the security of coarse-grained CFI depends in part
on the precision of its policy approximation, it is worthwhile
to improve the precision by tightening the bounds imposed
upon each branch. This effectively reduces the space of attacker
guesses that might succeed in hijacking any given branch. To
reduce this space as much as possible, we introduce a novel
binary code optimization, called portals, that minimizes the
distance covered by the lowest and greatest element of each
indirect branch’s destination set.
Our ﬁne-grained artiﬁcial diversity implementation is an
adaptation and extension of binary stirring [45]. Binary stirring
randomizes the ordering of basic blocks within code sections
each time a program binary is loaded into memory. The
stirring has the effect of randomizing bounds to defeat attackers
Our artiﬁcial diversity approach probabilistically protects
the aligned, in-bounds, but policy-violating control-ﬂows by
applying ﬁne-grained randomization to the binary code at
load-time. While the overall strategy for implementing this
randomization step is based on prior works [45], its purpose
in O-CFI is fundamentally different. Randomizing the code
layout does not conceal the new layout from attackers, since
our threat model assumes attackers can read all the randomized
code. Rather, its purpose is to randomize the bounds to which
each branch is constrained. The bounds imposed upon each
branch are not disclosed by the binary code since bounds values
are stored in protected memory, not expressed as immediate
instruction arguments. Thus, attackers who can read the binary
code must nevertheless guess which control-ﬂow hijacks trigger
an out-of-bounds branch violation and which do not.
Reformulating CFI in this way forces attackers to change
their plan of attack. The recent attacks against coarse-grained
CFI succeed by ﬁnding exploitable code that is reachable due
to policy-relaxations needed for acceptable performance. These
relaxations admit an alarming array of false-positives: instead
of identifying the actual caller, all call-preceded instructions
are incorrectly identiﬁed as permitted branch destinations. Such
instructions saturate a typical address space, giving attackers
too much wiggle room to build attacks. O-CFI counters this by
changing the approximation approach: each branch destination
is restricted to a relatively short span of aligned addresses,
with all the bounds chosen pseudo-randomly at load-time. This
greatly narrows the ﬁeld of possible hijacks, and it removes the
opportunity for attackers to analyze programs ahead of time for
viable ROP gadget chains. In O-CFI, no two program instances
admit the same set of ROP payloads, since the bounds are all
randomized every time the program is loaded.
TABLE II.
PSEUDO-CODE TO CONSTRAIN BRANCH BOUNDS.
Description
Indirect
branches
Original code
call/jmp (cid:104)dest(cid:105)
Returns
ret (cid:104)n(cid:105)
Rewritten code
t := (cid:104)dest(cid:105)
t := t & align_mask
(bmin ,bmax ) := blt[branch_id]
if not bmin ≤ t ≤ bmax :
abort(#BR);
call/jmp t
[esp] := [esp] & align_mask
(bmin ,bmax ) := blt[branch_id]
if not bmin ≤ [esp] ≤ bmax :
ret (cid:104)n(cid:105)
abort(#BR);
armed with implementation knowledge, and affords even
higher probabilistic protections against attackers who lack such
knowledge. Thus, O-CFI offers security that strictly subsumes
and exceeds traditional ﬁne-grained code randomization.
To protect against information leaks that might disclose
bounds information, our implementation is carefully designed
to keep all bounds opaque to external threats. They are randomly
chosen at load-time (as a side-effect of binary stirring) and
stored in a bounds lookup table (BLT) located at a randomly
chosen base address. The table size is very small relative to the
virtual address space, and attackers cannot safely perform brute-
force scans of the full address space (see §II-B), so guessing
the BLT’s location is probabilistically infeasible for attackers.
No code or data sections contain any pointer references to BLT
addresses; all references are computed dynamically at load-time
and stored henceforth exclusively in protected registers.
A. Bounding the Control Flow
For each indirect branch site with (non-empty) destination
set D, O-CFI guards the branch instruction with a bounds-check
that continues execution only if the impending target t satisﬁes
t ∈ [min D, max D]. Indirect branch instructions include
all control-ﬂow transfer instructions that
target computed
destinations, including return instructions. Failure of the bounds-
check solicits immediate process termination with an error code
(for easier debugging). Termination could be replaced with a
different intervention if desired, such as an automated attack
analysis or alarm, followed by restart and re-randomization.
The bounds-check implementation ﬁrst
loads the pair
(min D, max D) from the BLT into registers via an indirect,
indexed memory reference. The load instruction’s arguments
and syntax are independent of the BLT’s location, concealing
its address from attackers who can read the checking code.
The impending branch target t is then checked against the
loaded bounds. If the check succeeds, execution continues;
otherwise the process immediately terminates with a bounds
range (#BR) exception. The #BR exception helps distinguish
between crashes and guessing attacks. To resist guessing attacks
(e.g., BROP), web servers and other services should use this
exception to trigger re-randomization as they restart.
Table II contains pseudocode for the guards. The BLT
securely stores (min D, max D) pairs for all branches, and
is indexed using unique branch IDs (branch id in Table II).
Following the approaches of PittSFIeld [29], NaCl [48],
and Reins [46], O-CFI also aligns all policy-permitted indirect
branch destinations to power-of-two addresses, and masks
the low-order bits of all indirect branch arguments to force
their targets to aligned addresses. This prevents attackers from
diverting control to misaligned instructions that are not intended
to be reachable by any legitimate ﬂow of the original program.
This is important since any gadgets formed from misaligned
instructions do not receive bounds checks.
To bypass these checks, an attacker must craft a payload
whose every gadget is properly aligned and falls within the
bounds of the preceding gadget’s conclusory indirect branch.
The odds of guessing a reachable series of such gadgets decrease
exponentially with the number of gadgets in the desired payload.
B. Opacifying Control-ﬂow Bounds
Diversifying bounds. The bounds introduced by O-CFI
constitute a coarse-grained CFI policy. Section II warns that
such coarse granularity can lead to vulnerabilities. However,
to exploit such vulnerabilities, attackers must discover which
control-ﬂows adhere to the CFI policy and which do not.
To make the impermissible ﬂows opaque to attackers, we
use diversity. Our prototype uses a modiﬁed version of the
technique outlined by Wartell et al. [45], which shufﬂes the
basic block order at program load-time. The general approach
could alternatively be implemented as a compiler-based defense
for software whose source codes are available.
Performing ﬁne-grained code randomization at load-time
indirectly randomizes the ranges used to bound the control-ﬂow.
In contrast to other CFI techniques, attackers therefore do not
have a priori knowledge of the control-ﬂow bounds.
Preventing Information Leaks. Attackers bypass ﬁne-grained
diversity using information leaks, such as those described in
§II-A. Were O-CFI’s control-ﬂow bounds expressed as constants
in the instruction stream, attackers could bypass O-CFI via such
leaks. To avoid this, we instead conﬁne bounds information to
an isolated data page, the BLT. The BLT is initialized at a ran-
dom virtual address at load-time, and there are no pointer refer-
ences (obfuscated or otherwise) to any BLT address in any code
or data page in the process. This keeps it hidden from attackers.
We also take several additional steps to prevent accidental
BLT disclosure via pointer leaks. Our prototype stores BLT
base addresses in segment selectors—a legacy feature of all
x86/x64 processors. Each load from the BLT indexes the gs
selector to read the bounds. We only use gs in bounds checking
instructions, so there are no other instructions that adversaries
can reuse to learn its value. Attackers are also prevented from
executing instructions that reveal segment register values, since
such instructions are privileged.
To succeed, attackers must
therefore (i) guess branch
ranges, or (ii) guess the base address of the BLT. The odds of
correctly guessing the location of the BLT are low enough to
provide probabilistic protection. On 32-bit Windows systems,
for instance, the chances of guessing the base address are
1
231/212 =
1
524,288
and on 64-bit Windows, the chances are
1
243/212 =
1
2,147,483,648
or less than one in two billion. Incorrect guesses alert defenders
and trigger re-randomization with high probability (by accessing
an unallocated memory page).
The likelihood of successfully guessing a reachable gadget
chain is a function of the length of the chain and the span of
the bounds. The next section therefore focuses on reducing the
average bounds span.
4
TABLE III.
MPX INSTRUCTIONS USED IN O-CFI
Syntax
Description
bndmov bnd, m64
bndcl bnd, r/m32
bndcu bnd, r/m32
Move upper and lower bound from
m64 to bound register bnd.
Generate a #BR if r/m32 is less
than the lower bound in bnd.
Generate a #BR is r/m32 is higher
than the upper bound in bnd.
2) SFI and Randomization Framework: To prevent attacks
from jumping over the guards that constrain branch ranges,
the new code segment is split into power-of-two sized basic-
blocks called chunks [29]. Guard instructions and the branches
they guard are always co-located within a common chunk, and
branch targets are conﬁned to chunk boundaries, with padding
inserted where necessary to preserve this property. Conﬁning
branches to chunk boundaries is efﬁciently realized as a single
and instruction per branch, which clears the lower i bits of
the target address (where the size of a chunk is 2i+1 bytes).
Thus, control-ﬂow within a chunk is linear, passing over
every instruction from start to end. This chunking and masking
regimen ensures that control-ﬂow guards execute before every
indirect branch. Additionally, it prevents jumps to misaligned
(and hence unguarded) instruction sequences, reducing the
attack surface to the set of statically disassembled (and hence
protected) gadgets.
Direct branches are statically rewritten to reference their
new target addresses. Indirect branches require extra effort,
since their exact targets are only known at runtime. At runtime,
there are two common cases: (a) the impending target is already
within the .tnew section (e.g., it was pushed by a call), or
(b) the impending target is a stale pointer that points into the
.told section (e.g., it was loaded from a method dispatch
table in the heap, which the static rewriter does not modify).
The ﬁrst case requires no special treatment; the second solicits
an efﬁcient dynamic lookup and redirection of the stale pointer
to its new location [45]. Speciﬁcally, we check for the tag byte
at the target address, and if present, substitute the current target
with the address stored after the tag, which points to the block’s
new location in the .tnew section. The tag byte is chosen to
be an illegal instruction encoding, so that no non-stale code
pointer ever points to such a byte.
The stale pointer redirection mechanism is not relied upon
for security. Like all indirect branch targets, redirected pointers
undergo a mask and bounds-check before becoming control-
ﬂow destinations. Thus, corrupting or defeating the redirection
mechanism does not circumvent the security policy.
The ability to redirect code pointers lays the foundation for
load-time randomization. Once the new randomized locations
for basic blocks have been ﬁnalized, updating the values in the
.told section allows our redirection mechanism to correctly
redirect all indirect branches to the new, randomized block
locations. Direct branches are simply modiﬁed in-place.
3) Branch Instrumentation: The above techniques enforce
SFI and ﬁne-grained randomization. This protects against
traditional ROP attacks, but not against implementation-aware
attacks, which require the additional hardening implemented
by O-CFI’s bounds-checking. Bounds-checking is applied after
stale pointer redirection alongside masking, to further limit
the set of accessible gadgets. SFI enforcement prevents attack
payloads from circumventing these bounds checks.
Algorithm 1 CreateClusters(S): Cluster basic blocks to place
the targets of indirect branches as close together as possible.
Input: S {the set of the basic blocks in the code segment}
Output: C {a set of clusters, one per indirect branch. Each
c ∈ C is a block set containing all targets of a speciﬁc
branch, plus an empty nexus for later portal insertion.}
C ← ∅
for all b ∈ Branches(S) do
c ← ∅
for all t ∈ Targets(b) do
b(cid:48) ← GetBasicBlock (t)
if b(cid:48) /∈(cid:83) C then c ← c ∪ {b(cid:48)}
end for
{The nexus is an empty basic block to hold portals.}
C ← C ∪ {(c ∪ CreateNexus())}
end for
{Add unclaimed basic-blocks into a single ﬁnal cluster.}
C ← C ∪ {(S −(cid:83) C)}
Furthermore, due to randomization, the bounds remain
unknown to implementation-aware attackers, and vary from
program instance to program instance. Attacks cannot statically
pre-compute bounds ranges because the runtime randomization
phase changes bounds values on each execution. They also
cannot dynamically leak the bounds, all of which are stored
securely in the BLT and never leaked to the stack or heap.
Attackers must therefore hazard guesses as to which gadget
chains are safely accessible for any given program instance.
Our bounds-checking logic is detailed in Table II. The
MPX implementation of this logic is assisted by the fast MPX
instructions [24] summarized in Table III. On 32-bit systems,
each BLT entry consists of two 32-bit pointers.
4) Accurate Target Identiﬁcation: To ensure that we identify
all intended targets of indirect branches, we employ disassembly
heuristics that identify a superset of potential targets. As an
example, we follow the following sequence of steps to identify
the set of potential targets for a return instruction:
1)
2)
3)
4)
Identify all code references to the function that
contains the return. This includes direct and indirect
branches to the function entry point, as well as to any
basic block within the function.
For each identiﬁed branch that is not a call, ﬁnd all
code references that ﬂow into it.