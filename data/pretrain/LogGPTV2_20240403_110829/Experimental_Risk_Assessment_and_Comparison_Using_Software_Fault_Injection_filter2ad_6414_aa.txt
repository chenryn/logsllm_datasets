title:Experimental Risk Assessment and Comparison Using Software Fault Injection
author:Regina L&apos;ucia de Oliveira Moraes and
João Durães and
Ricardo Barbosa and
Eliane Martins and
Henrique Madeira
Experimental Risk Assessment and Comparison Using Software Fault 
Injection 
R. Moraes1, J. Durães2, R. Barbosa3, E. Martins1, H. Madeira2 
1State University of Campinas, UNICAMP, São Paulo, Brazil 
2CISUC, University of Coimbra, Portugal 
3Critical Software SA, Coimbra, Portugal 
PI:EMAIL, PI:EMAIL, PI:EMAIL, 
PI:EMAIL, PI:EMAIL 
One 
Abstract 
of 
alternative 
components 
important  question 
in  component-based 
software  development  is  how  to  estimate  the  risk  of 
using COTS components, as the components may have 
hidden  faults  and  no  source  code  available.  This 
question is particularly relevant in scenarios where it 
is  necessary  to  choose  the  most  reliable  COTS  when 
several 
equivalent 
functionality  are  available.  This  paper  proposes  a 
practical approach to assess the risk of using a given 
software  component  (COTS  or  non-COTS).  Although 
we focus on comparing components, the methodology 
can be useful to assess the risk in individual modules. 
The proposed approach uses the injection of realistic 
software  faults  to  assess  the  impact  of  possible 
component  failures  and  uses  software  complexity 
metrics to estimate the probability of residual defects 
in  software  components.  The  proposed  approach  is 
demonstrated and evaluated in a comparison scenario 
using  two  real  off-the-shelf  components  (the  RTEMS 
and  the  RTLinux  real-time  operating  system)  in  a 
realistic  application  of  a  satellite  data  handling 
application used by the European Space Agency. 
1. Introduction 
A  common  practice  for 
large  scale  software 
is 
to  use  available  general-purpose 
development 
(normally  COTS  components)  and 
components 
develop  from  scratch  only 
the  domain  specific 
components and “glue” code. Given the high costs of 
designing  and  implementing  software  components, 
engineers see the reuse of general-purpose components 
as a way to reduce development effort and to achieve 
short time-to-market.  
reuse  of  components), 
However, in spite of the advantages of COTS (and 
general 
their  utilization 
introduces  an  unknown  risk  of  failure,  as  the  new 
operational  conditions  may  differ  substantially  from 
those the components were initially designed for, and 
the  new  operational  conditions  may  cause 
the 
activation  of  unknown  residual  faults.  The  fact  that 
reused components have already been tested introduces 
a false sense of safety that may discourage additional 
testing. The reality has shown that new utilizations of 
heavily used components have exposed software faults 
that had not been discovered before [44]. In practice, it 
is  necessary  to  test  the  component  in  the  new 
environment  to  ensure  high  quality  and  reliability  of 
the overall system.  
In  spite  of  these  difficulties,  component-based 
software  development  with  intensive  reuse  of  COTS 
components is a solid trend in the industry and it is not 
likely to diminish, as the alternative would be the much 
more  expensive  write-from-scratch  approach.  The 
(re)use  of  COTS  in  particular  requires  great  care,  as 
many  COTS 
(e.g.,  operating  systems,  database 
management  systems,  etc)  have  a  strong  interaction 
with  other  components  of  the  system,  meaning  that 
residual  software  faults  in  COTS  components  are 
particularly  dangerous  and  may  pose  serious  risk  of 
system outage. Therefore, the software industry needs 
practical  and  effective  methods  to  help  estimate  (and 
reduce) the risk of reusing components.  
Software  fault  injection  (i.e.,  injection  of  software 
faults  in  a  given  software  component  to  emulate  the 
activation  of  residual  bugs  that  may  exist  in  that 
component) can help in the experimental estimation of 
the  risk  of  reusing  components,  although  it  cannot 
solve  the  problem  entirely.  To  illustrate  this  point, 
suppose that component C is used in system S. If we 
perform a software fault injection campaign targeting 
component C we can measure the impact of failures in 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:32:36 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007component  C  in  the  rest  of  the  system  S.  If,  for 
example, a large percentage of the injected faults cause 
S to crash or to behave in an unacceptable manner, we 
can  conclude  that  failures  in  C  are  particularly 
dangerous to S. On the contrary, if most of the faults 
injected in C are tolerated by S, then we  can assume 
that S is robust to faults in C.  
One  important  issue  when  using  software  fault 
injection to measure the impact of  failures in a given 
software component is that it may produce unrealistic 
results  if  the  faults  injected  are  not  realistic.  To 
illustrate  this,  assume  that  after  injecting  software 
faults  in  component  C  we  observe  that  most  of  the 
faults  injected  caused  catastrophic  failures  in  the 
system S. However, if the component C is small, with 
just a few lines of code, it is not likely to have residual 
bugs. Thus, the results of the fault injection campaign 
in C are meaningless, as they suggest that component 
C is potentially dangerous (because its failures have a 
strong impact in the system) but having a failures in C 
(in real use) is rather unrealistic, as C is not likely to 
have residual bugs. 
Software fault injection can only measure impact of 
faults. In order to have a meaningful measure of risk 
we also need an estimation of the probability of fault in 
the target component, which can be obtained by the use 
of well established software complexity metrics.  
the  proposed 
to  measure 
experimentally  the  risk  of  using  (or  reusing)  a  given 
component  C  in  a  system  S  is  represented  by  the 
following equation: 
approach 
Thus, 
RiskC = prob(fC) * cost(fC) 
(1) 
The  term  prob(fC)  represents  the  likelihood  of  the 
existence of residual software faults in component C, 
estimated 
software 
complexity  metrics  [25,  40],  and  the  term  cost(fC) 
represents  the  impact  of  the  activation  of  faults  in 
component  C  measured  by  software  fault  injection 
[11]. 
well-established 
through 
Our goal is to provide a quantitative measure of the 
risk  of  system  S  having  a  failure  (e.g.,  to  produce 
erroneous results, or to experience a safety failure, or a 
timing  failure,  or  a  security  failure,  or  become 
unavailable,  etc.)  due 
in 
component  C  caused  by  the  activation  of  a  residual 
software fault in that component.  
to  a  faulty  behavior 
The  risk  estimation  based  on  an  experimental 
approach, as proposed in this paper, is particularly very 
useful for the following scenarios: 
• Identify software components that represent higher 
effort  or 
require  more 
testing 
and 
risk 
improvements. 
• Help  software  designers  and  engineers  to  choose 
from  alternative  off-the-shelf  components  to  be 
used in the system under development (i.e., choose 
the one that represents the lowest risk). 
the 
and 
risk 
increase 
introduced 
the  system 
thorough  evaluation  of 
improvements 
in 
• Provide  a  quantitative  evaluation  of 
the  risk 
in 
reduction  due 
to 
components  used 
(COTS  or 
non-COTS),  such  as  wrapping  the  component  to 
overcome  robustness  weakness  [2].  It  is  worth 
noting that wrapping could also introduce new bugs 
and may change component behavior, which means 
that  a 
the  changed 
component is necessary (and it is not a trivial task). 
• Help  in  tuning  complex  COTS  components  to 
minimize 
system 
dependability (e.g., a database management system 
is  difficult  to  tune,  especially  in  what  concerns 
recovery features that have huge impact on whole 
system dependability [42]). 
The  use  of  fault  injection  to  predict  worst  case 
scenarios and help identify weaknesses in software that 
could  cause  catastrophic  disasters  was  proposed  in 
[43]. However, to the best of our knowledge, this is the 
first  time  the  injection  of  realistic  software  faults 
(based on a field study on the most common types of 
faults [11]) is used to experimentally estimate software 
risk. It is worth noting that the fault injection technique 
used in our method does not require the source code of 
the target components, which means that it can be used 
even  in  COTS  for  which  the  source  code  is  not 
available.  Our  methodology  uses  software  metrics, 
which  implies  either  the  existence  of  tools  able  to 
extract software metrics from executable code,  or the 
availability of the source code itself. In the experiments 
presented in this paper we actually have access to the 
source  code  of  all  the  components  and  we  used  that 
fact  to  simplify  experiments,  especially  in  what 
concerns the use of software complexity metrics tools, 
as we extract metrics based on source-code. However, 
for  application  scenarios  where  source-code  is  not 
available,  all  that  is  required  is  the  use  of  metric 
assessment tools that do not require source code. 
The remainder of this paper is organized as follows: 
the next section shows how to evaluate the risk using 
the  proposed  methodology.  A  case  study  to  illustrate 
the  actual  use  of 
is 
presented in Section 3. Section 4 presents the related 
work. Section 5 concludes the paper. 
the  proposed  methodology 
2.  Experimental  Approach  for  Software 
Component Risk Assessment 
Our  main  goal  is  to  evaluate  the  potential  risk  of 
using a given software component in a larger system. 
This component is typically a COTS but the proposed 
technique can actually be applied to any component of 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:32:36 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007the  system  under  analysis.  The  risk  of  using  a  given 
component in a system is calculated as in equation (1). 
The first term, prob(f), represents the likelihood of 
residual  faults  existing 
i.e., 
corresponds  to  the  component  fault-proneness.  The 
term cost(f) represents the consequence (i.e., impact in 
the  system)  of  the  activation  of  a  fault  f  in  the 
component.  
the  component, 
in 
Our proposal is based on three key elements: 
•  The  estimation  of  prob(f)  by  using  complexity 
metrics of the target component. 
•  The  evaluation  of  cost(f)  experimentally  through 
the  injection  of  software  faults  in  the  target 
component and measuring its impact in the system 
under analysis. 
•  The use of a real workload and operational profile 
during the fault injection experiments. 
A  very  important  aspect  in  risk  assessment  is  the 
probability of the activation of the residual faults. This 
probability is strongly dependent on the workload, the 
operational  profile,  and 
the 
component  and  cannot  be  easily  modeled  by  static 
analysis  alone 
the  component 
architecture may not be available). 
the  architecture  of 
(and  details  of 
the  fault 
In our methodology the fault activation probability 
is  actually  evaluated  during 
injection 
experiments. This is, in fact, an intrinsic aspect of the 
fault injection experiments: the fault is injected and its 
activation/non-activation  is  a  consequence  of  the 
workload  and  execution  profile  and  the  internal 
component  architecture.  The  use  of  a  real  workload 
should  not  be  viewed  as  a  restriction 
the 
methodology, as the main intended use is on fact the 
comparison of components for integration in a system 
for a well-known application scenario. 
If  the  injection  of  faults  in  a  given  component 
shows that a large percentage of faults cause a strong 
impact in the system (high cost(f)) and the likelihood 
of faults in that component is high (high prob(f)), then 
that means the component represents a high risk. Note 
that  this  value  resulting  from  the  application  of  the 
methodology should not be interpreted as an absolute 
estimation  of  the  probability  of  failure.  Instead  it 
should  be  understood  as  a  metric  on  risk  mainly 
intended for comparison. 
to 
2.1. Residual Fault Likelihood Estimation 
The  prediction  of  residual  faults  can  be  based  on 
various  methods.  Some  works  use  parametric  models 
based  on  defect  history  [40,  12]  and  others  use 
heuristics  by  comparing  complexity  metrics  with  a 
threshold  [34].  Our  work  elaborates  from  previous 
proposals [5, 40, 31] to estimate prob(f) and follows a 
model based on logistic regression. Logistic regression 
[16]  was  the  used  statistical  analysis  to  address  the 
relationship between metrics and the fault-proneness of 
modules (in this work module and component is used 
as having the same meaning). Logistic regression is a 
classification  technique  widely  used  in  experimental 
sciences  based  on  maximum  likelihood  estimation  of 
dependent  variables  (e.g.  the  failure  likelihood)  in 
terms  of 
independent  variables  (e.g.  complexity 
metrics). Logistic regression gives to each independent 
variable,  also  called  “regressor”,  an  estimated 
regression coefficient βi, which measures the regressor 
contribution  to  variations  in  the  dependent  variable.  
The  larger  the  coefficient  in  absolute  value  the  more 
important the impact of the variable on the probability 
of a fault to be detected in a component is. In our case, 
this  probability  prob  represents  the  probability  that 
such  component  has  a  residual  fault.  To  be  able  to 
establish  a  linear  relationship  we  need  a  logistic 
transformation  and  a  logit  of  prob  is  taken.  The 
logit(prob)  is  defined  as  ln  (prob  /  (1  -  prob)).  The 
value of prob is given by equation (2) where α and β 
are  the  estimated  logistic  regression  coefficients  and 
exp is the inverse function of ln.  
prob = 
exp(
+
exp(
βα
+
x
)
βα
+
x
)
1
= 
e
+
(
e
1
βα
x
+