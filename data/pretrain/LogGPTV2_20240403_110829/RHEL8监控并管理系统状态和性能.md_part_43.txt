上使用的块，即磁盘容量。降级程度因供应商而异，但所有设备在这种情况下都会出现降级情况。启用丢弃行为有助于缓解这种降级。如需更多信息，[请参阅丢弃未使用的块的类型](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/setting-up-graphical-representation-of-pcp-metrics_monitoring-and-managing-system-status-and-performance#types-of-discarding-unused-blocks_factors-affecting-i-o-and-file-system-performance){.link}。
默认 I/O 调度程序和虚拟内存选项适合用于 SSD。在配置可影响 SSD
性能的设置时，请考虑以下因素：
::: variablelist
[`I/O 调度程序`{.literal}]{.term}
:   大多数 SSD 预期任何 I/O
    调度程序都能正常工作。但是，与任何其他存储类型一样，红帽建议采用基准测试来确定给定工作负载的最佳配置。在使用
    SSD 时，红帽建议仅更改 I/O 调度程序以测试特定工作负载。有关如何在
    I/O 调度程序间切换的说明，请参阅
    `/usr/share/doc/kernel-version/Documentation/block/switching-sched.txt`{.literal}
    文件。
    对于单队列 HBA，默认的 I/O 调度程序是
    `截止时间`{.literal}。对于多个队列 HBA，默认的 I/O 调度程序是
    `none`{.literal}。有关如何设置 I/O 调度程序的详情，请参考
    [设置磁盘调度程序](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/monitoring_and_managing_system_status_and_performance/setting-the-disk-scheduler_monitoring-and-managing-system-status-and-performance){.link}。
[`虚拟内存`{.literal}]{.term}
:   与 I/O 调度程序一样，虚拟内存(VM)子系统不需要特殊调优。鉴于 SSD 上的
    I/O 的快速性质，请尝试关闭 `vm_dirty_background _ratio`{.literal} 和
    vm_dirty_ratio``{=html}
    设置，因为增加的写操作不会对磁盘上的其他操作延迟造成负面影响。不过，这种调优可能会产生更多整体
    I/O，因此在未进行特定于工作负载的测试的情况下，通常不建议这样做。
[`swap`{.literal}]{.term}
:   SSD 也可以用作交换设备，并且可能会生成良好的 page-out 和 page-in
    性能。
:::
:::
::: section
::: titlepage
# []{#factors-affecting-i-o-and-file-system-performance_monitoring-and-managing-system-status-and-performance.html#generic-block-device-tuning-parameters_factors-affecting-i-o-and-file-system-performance}通用块设备调优参数 {.title}
:::
本节中列出的通用调优参数位于 `/sys/block/sdX/queue/`{.literal} 目录中。
以下列出的调优参数与 I/O 调度程序调整分开，并适用于所有 I/O 调度程序：
::: variablelist
[`add_random`{.literal}]{.term}
:   某些 I/O 事件对 `/dev/random`{.literal}
    的熵池贡献力量。如果这些贡献的开销可以相当长，则可以将此参数设置为
    `0`{.literal}。
[`iostats`{.literal}]{.term}
:   默认情况下，`iostats`{.literal} 被启用，默认值为 `1`{.literal}。将
    `值设`{.literal} 为 `0`{.literal} 可禁用设备的 I/O
    统计数据收集，这通过 I/O 路径消除少量开销。`设置为`{.literal}
    `0`{.literal} 时，非常高性能设备（如某些 NVMe
    固态存储设备）的性能可能会稍有提高。建议启用 left
    `iostats`{.literal}，除非供应商为给定存储模型另有指定。
    如果您禁用 `iostats`{.literal}，/
    `proc/diskstats 文件中将不再显示设备的 I/`{.literal} O
    统计信息。`/sys/diskstats 文件的内容是用于`{.literal} 监控 I/O
    工具（如 `sar`{.literal} 或 `iostats`{.literal} ）的 I/O
    信息的来源。因此，如果您为设备禁用了 `iostats`{.literal} 参数，则
    I/O 监控工具输出中不再存在该设备。
[`max_sectors_kb`{.literal}]{.term}
:   以 KB 为单位指定 I/O 请求的最大大小。默认值为 `512`{.literal}
    KB。此参数的最小值由存储设备的逻辑块大小决定。此参数的最大值由
    `max_hw_sectors_kb`{.literal} 的值决定。
    红帽建议 `max_sectors_kb`{.literal} 始终是最佳 I/O
    大小的倍数，以及内部纠删块大小。如果值为零或未由存储设备指定，请将
    `logical_block_size`{.literal} 值用于任一参数。
[`Nomerges`{.literal}]{.term}
:   大多数工作负载均可从请求合并中受益。但是，禁用合并对于调试很有用。默认情况下，n
    `omerges`{.literal} 参数设置为
    `0`{.literal}，这将启用合并。要禁用简单的一次性合并，请将
    `nomerges`{.literal} 设置为
    `1`{.literal}。要禁用所有类型的合并，请将 `nomerges`{.literal}
    设置为 `2`{.literal}。
[`nr_requests`{.literal}]{.term}
:   它是已排队 I/O 的最大允许数。如果当前的 I/O 调度程序
    `没有`{.literal}，则这个数字只能减少；否则，这个数量可以增加或减少。
[`optimal_io_size`{.literal}]{.term}
:   有些存储设备通过此参数报告最佳 I/O
    大小。如果报告这个值，红帽建议应用程序尽可能在最佳 I/O
    大小的倍数中与 I/O 一致。
[`read_ahead_kb`{.literal}]{.term}
:   定义操作系统可在后续读取操作期间提前读取的最大 KB
    数。因此，下一个顺序读取的内核页面缓存中已存在必要的信息，这提高了读取
    I/O 性能。
    设备映射器通常受益于较高的 `read_ahead_kb`{.literal}
    值。对于要映射的每个设备，`128`{.literal} KB 是不错的起点，但将
    `read_ahead_kb`{.literal} 值增加到请求队列的
    `max_sectors_kb`{.literal}
    的值可能改进在进行连续读取大型文件的应用程序环境中的性能。
[`rotational`{.literal}]{.term}
:   有些固态磁盘无法正确公布其固态状态，而是作为传统旋转磁盘挂载。手动将
    `轮转值设置为`{.literal}
    `0`{.literal}，在调度程序中禁用不必要的搜索尝试逻辑。
[`rq_affinity`{.literal}]{.term}
:   `rq_affinity`{.literal} 的默认值为 `1`{.literal}。它在一个 cpu
    核心上完成 I/O 操作，它位于发布的 cpu 核心的同一个 cpu
    组中。若要仅在发出 I/O 请求的处理器上执行完成，可将
    `rq_affinity`{.literal} 设置为
    `2`{.literal}。要禁用上述两个能力，请将它设置为 `0`{.literal}。
[`scheduler`{.literal}]{.term}
:   要为特定存储设备设置调度程序或调度程序首选顺序，请编辑
    `/sys/block/devname/queue/scheduler`{.literal} 文件，其中
    [*devname*]{.emphasis} 是您要配置的设备的名称。
:::
:::
:::
[]{#configuring-an-operating-system-to-optimize-access-to-network-resources_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#configuring-an-operating-system-to-optimize-access-to-network-resources_monitoring-and-managing-system-status-and-performance.html#configuring-an-operating-system-to-optimize-access-to-network-resources_monitoring-and-managing-system-status-and-performance}第 34 章 配置操作系统以优化对网络资源的访问 {.title}
:::
本节论述了如何配置操作系统以显示对工作负载中网络资源的优化访问。网络性能问题有时是硬件故障或基础架构故障造成的。解决这些问题超出了本文档的范围。
`TuneD`{.literal} 服务提供了多个不同的配置集来在多个特定用例中提高性能：
::: itemizedlist
-   `latency-performance`{.literal}
-   `network-latency`{.literal}
-   `network-throughput`{.literal}
:::
::: section
::: titlepage
# []{#configuring-an-operating-system-to-optimize-access-to-network-resources_monitoring-and-managing-system-status-and-performance.html#tools-for-monitoring-and-diagnosing-performance-issues_configuring-an-operating-system-to-optimize-access-to-network-resources}监控和诊断性能问题的工具 {.title}
:::
以下是 Red Hat Enterprise Linux 8
中可用的工具，用于监控系统性能并诊断与网络子系统相关的性能问题：
::: itemizedlist
-   `SS 实用程序`{.literal}
    打印有关套接字的统计信息，使管理员能够随着时间的推移评估设备性能。默认情况下，`ss`{.literal}
    显示已建立连接的未列出 TCP
    套接字。利用命令行选项，管理员可以过滤掉有关特定套接字的统计信息。红帽建议使用
    `Red Hat Enterprise Linux 中已弃用`{.literal} `的 net`{.literal}
    stats
-   `IP`{.literal}
    实用程序允许管理员管理和监控路由、设备、路由策略和隧道。`ip`{.literal}
    monitor 命令可以持续监控设备、地址和路由的状态。使用 `-j`{.literal}
    选项以 JSON
    格式显示输出，该格式可以进一步提供给其他实用程序，以自动处理信息。
-   `dropwatch`{.literal} 是一个交互式工具，由 `dropwatch`{.literal}
    软件包提供。它监控并记录内核丢弃的数据包。
-   `ethtool`{.literal}
    实用程序使管理员能够查看和编辑网络接口卡设置。使用此工具观察某些设备的统计信息，如该设备丢弃的数据包数量。使用
    `ethtool -S 设备名称`{.literal}
    命令，查看要监控的指定设备计数器的状态。
-   `/proc/net/snmp`{.literal} 文件显示 `snmp`{.literal} 代理用于
    IP、ICMP、TCP 和 UDP
    监控和管理的数据。定期检查此文件可帮助管理员识别异常值，从而识别潜在的性能问题。例如，`/proc/net/s`{.literal}nmp``{=html}
    文件中的 UDP 输入错误（错误）增加可能表示套接字接收队列中存在瓶颈。
-   `nstat`{.literal} 工具监控内核 SNMP 和网络接口统计信息。此工具从
    `/proc/net/snmp`{.literal}
    文件中读取数据，并以人类可读格式打印信息。
-   默认情况下，Systemtap-client 软件包提供的 `SystemTap`{.literal}
    脚本安装在 `/usr/share/systemtap/examples/network`{.literal}
    目录中：
    ::: itemizedlist
    -   `nettop.stp`{.literal} ：每 5
        秒，脚本会显示一个进程列表（进程标识符和命令），其中包含发送和接收的数据包数，以及进程在该时间段内发送和接收的数据量。
    -   `socket-trace.stp`{.literal} ：删除 Linux 内核
        `net/socket.c`{.literal} 文件中的每个功能，并显示跟踪数据。
    -   `dropwatch.stp`{.literal} ：每 5
        秒，脚本都显示在内核中的位置释放的套接字缓冲区数量。使用
        `--all-modules`{.literal} 选项查看符号名称。
    -   `latencytap.stp`{.literal}
        ：此脚本记录了不同类型的延迟对一个或多个进程的影响。它每 30
        秒打印延迟类型列表，按进程或进程等待的总时间降序排列。这可用于识别存储和网络延迟的原因。
    :::
    红帽建议将 `--all-modules`{.literal}
    选项与该脚本一起使用来更好地映射延迟事件。默认情况下，此脚本安装在
    `/usr/share/systemtap/examples/profiling`{.literal} 目录中。
-   BPF Compiler Collection(BCC)是一个库，可帮助创建扩展的 Berkeley
    Packet Filter(eBPF`)`{.literal}程序。`eBPF`{.literal}
    程序的主要工具是分析操作系统性能和网络性能，而不会出现开销或安全问题。
:::
::: itemizedlist
**其它资源**
-   `SS(8)`{.literal}、`ethtool(8)`{.literal}、`nettop(1)、`{.literal}
    ip `(8)`{.literal}、`dropwatch(1)和`{.literal}
    `systemtap(8)man`{.literal} page
-   `/usr/share/systemtap/examples/network`{.literal} directory
-   `/usr/share/doc/bcc/README.md`{.literal} file
-   [如何编写 NetworkManager 分配程序脚本以应用 ethtool 命令？Red Hat
    Knowlegebase
    解决方案](https://access.redhat.com/solutions/2841131){.link}
-   [配置 ethtool offload
    功能](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_and_managing_networking/index#configuring-ethtool-offload-features_configuring-and-managing-networking){.link}
:::
:::
::: section
::: titlepage
# []{#configuring-an-operating-system-to-optimize-access-to-network-resources_monitoring-and-managing-system-status-and-performance.html#bottlenecks-in-a-packet-reception_configuring-an-operating-system-to-optimize-access-to-network-resources}数据包接收中的瓶颈 {.title}
:::
虽然网络堆栈在很大程度上是自我优化的，但网络数据包处理期间存在多个点，它们可能会成为瓶颈并降低性能。
以下是可能导致瓶颈的问题：
::: variablelist
[`网卡的缓冲或环缓冲`{.literal}]{.term}
:   如果内核丢弃大量数据包，硬件缓冲区可能会成为瓶颈。使用
    `ethtool`{.literal} 监控已丢弃数据包的系统。
[`硬件或软件中断队列`{.literal}]{.term}
:   中断可能会增加延迟和处理器争用。有关处理器如何处理中断的详情，请参阅中断
    [请求概述](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/configuring-an-operating-system-to-optimize-cpu-utilization_monitoring-and-managing-system-status-and-performance#overview-of-an-interrupt-request_configuring-an-operating-system-to-optimize-cpu-utilization){.link}、[手动
    Balancing
    中断](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/configuring-an-operating-system-to-optimize-cpu-utilization_monitoring-and-managing-system-status-and-performance#balancing-interrupts-manually_configuring-an-operating-system-to-optimize-cpu-utilization){.link}
    和 [设置 smp_affinity
    掩码](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/configuring-an-operating-system-to-optimize-cpu-utilization_monitoring-and-managing-system-status-and-performance#setting-the-smp_affinity-mask_configuring-an-operating-system-to-optimize-cpu-utilization){.link}。
[`应用程序的套接字接收队列`{.literal}]{.term}
:   大量未复制的数据包或者由于
    `/proc/net/s`{.literal}nmp``{=html} 文件中的 UDP
    输入错误（错误）增加，表示应用的接收队列存在瓶颈。
:::
如果硬件缓冲丢弃了大量数据包，则以下是一些可能的解决方案：
::: variablelist
[`减慢输入流量`{.literal}]{.term}
:   过滤传入流量，减少加入的多播组数量，或者减少广播流量以降低队列填充的速度。
[`调整硬件缓冲区队列的大小`{.literal}]{.term}
:   调整硬件缓冲区队列的大小：通过增大队列的大小来减少丢弃的数据包数量，使其不会像容易那样轻松地溢出。您可以使用
    `ethtool`{.literal} 命令修改网络设备的 `rx/tx`{.literal} 参数：
    `ethtool --set-ring device-name 值`{.literal}
[`更改队列的排空率`{.literal}]{.term}
:   ::: itemizedlist
    -   通过在到达队列前过滤或丢弃数据包，或通过降低设备的权重来降低队列填充的速度。过滤传入流量或降低网络接口卡的设备权重，以减慢传入的流量速度。
        设备权重指的是设备在单个调度处理器访问中一次可接收的数据包数量。您可以通过增加由
        `dev_weight`{.literal}
        内核设置控制的设备权重来提高队列排空的速率。要临时更改此参数，请更改
        `/proc/sys/net/core/dev_weight`{.literal}
        文件的内容，或者永久更改，请使用 `sysctl`{.literal}
        命令，该命令由 `procps-ng`{.literal} 软件包提供。
    -   增加应用的套接字队列的长度：这通常是提高套接字队列排空率的最简单方法，但不太可能是长期解决方案。如果套接字队列接收的突发流量有限，增加套接字队列的深度以匹配突发流量的大小可能会阻止数据包被丢弃。要增大队列的深度，请通过以下更改之一增加套接字接收缓冲的大小：
        ::: itemizedlist
        -   增加 `/proc/sys/net/core/rmem_default`{.literal}
            参数的值：此参数控制套接字使用的接收缓冲区的默认大小。这个值必须小于或等于
            `proc/sys/net/core/rmem_max`{.literal} 参数的值。
        -   使用 `setsockopt`{.literal} 配置更大的 `SO_RCVBUF`{.literal}
            值：此参数控制套接字接收缓冲区的最大字节大小。使用
            `getsockopt`{.literal} 系统调用来确定缓冲区的当前值。
        :::
    :::
    更改队列的排空率通常是降低网络性能的最简单方法。但是，增加设备一次接收的数据包数量会使用额外的处理器时间，在此期间无法调度其他进程，因此可能会导致其他性能问题。
:::
::: itemizedlist
**其它资源**
-   `SS(8)`{.literal}、`socket(7)`{.literal} 和
    `ethtool(8)man`{.literal} page
-   `/proc/net/snmp`{.literal} 文件
:::
:::
::: section
::: titlepage
# []{#configuring-an-operating-system-to-optimize-access-to-network-resources_monitoring-and-managing-system-status-and-performance.html#busy-polling_configuring-an-operating-system-to-optimize-access-to-network-resources}忙碌轮询 {.title}
:::
如果分析揭示了高延迟，则您的系统可能会从基于轮询的数据包接收中受益，而非基于中断的数据包接收。
繁忙的轮询有助于减少网络接收路径的延迟，允许套接字层代码轮询网络设备的接收队列，并禁用网络中断。这删除了中断和结果上下文切换造成的延迟。不过，它也会增加
CPU 利用率。忙碌轮询也会阻止 CPU
休眠，这可能会产生额外的功耗。所有设备驱动程序都支持忙碌轮询行为。
::: itemizedlist
**其它资源**
-   [启用忙碌轮询](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/configuring-an-operating-system-to-optimize-access-to-network-resources_monitoring-and-managing-system-status-and-performance#enabling-busy-polling_configuring-an-operating-system-to-optimize-access-to-network-resources){.link}
:::
::: section
::: titlepage
## []{#configuring-an-operating-system-to-optimize-access-to-network-resources_monitoring-and-managing-system-status-and-performance.html#enabling-busy-polling_configuring-an-operating-system-to-optimize-access-to-network-resources}启用忙碌轮询 {.title}