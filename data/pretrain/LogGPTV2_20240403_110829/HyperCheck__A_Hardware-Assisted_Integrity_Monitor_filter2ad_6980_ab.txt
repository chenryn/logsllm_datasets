operating system and tries to be efﬁcient with the
amount of memory that it saves. By default, it will
only save the pages for kernel memory, but the
dumpadm tool can be used to conﬁgure the system
to save all memory.
Many Unix systems have a process pseudo-ﬁle sys-
tem that is mounted at /proc/ which contains in-
formation about the kernel and running processes.
Each operating system has a different implementa-
tion and different directory structure, but many
of them have the same basic features. There is
typically a ﬁle that corresponds to all of physical
memory (similar to /dev/mem) and a ﬁle that cor-
responds to each of the processes’ memory.
We have already discussed the advantages and
disadvantages of obtaining the physical memory
image with /dev/mem, so we will focus on obtain-
ing the memory of a single process. An advantage
of this approach is that you will not need to piece
the pages of physical memory and swap space to-
gether during analysis using the page table. A dis-
advantage of this approach is that you will need to
ﬁrst identify the suspect processes before this can
be used. Another disadvantage of this approach is
that it will force non-resident pages of memory
to be read from swap and written to physical mem-
ory. This may cause resident memory pages to be
54
B.D. Carrier, J. Grand
written to the swap space, which will overwrite
unallocated data.
This technique collects only the allocated mem-
ory, which is analogous to analyzing a ﬁle backup
of a compromised server’s hard disk as opposed
to a full image of it. Passwords and other data from
previously run processes may exist in unallocated
memory. By running a command to copy the mem-
ory, you will overwrite unallocated data in memory
because the process will need memory to operate,
which violates our second requirement.
The pcat tool in The Coroner’s Toolkit (TCT)
(Farmer and Venema, The Coroner’s Toolkit) uses
the ptrace() system call or the /proc/ ﬁle sys-
tem, if it exists, to save process memory. This
pcat tool can either save all of the memory as
a sparse ﬁle or it can save only the non-zero mem-
ory contents.
Virtual machines
A virtual machine, such as VMWare (VMWare GSX
server) is an application that emulates a computer
environment so that an operating system and other
applications can execute inside of it. The operat-
ing system and applications do not always know
that they are inside an emulated environment
and will execute as normal. The virtual machine
can be suspended and saved at any time.
If a system running in a virtual machine is com-
promised, the memory and disk contents can be
saved by suspending the virtual machine and mak-
ing copies of the ﬁles that correspond to the mem-
ory and disk areas of the virtual system. Some
existing virtual machines save the disk and memory
contents in a raw ﬁle and others save them in a
proprietary format.
The major disadvantage of this approach is the
impact on system performance. Critical servers
running inside of an emulated environment will in-
crease the load on the hardware. The advantage is
that no special processes are run and that trusted
software (the virtual machine) is used to save the
system state.
Hibernation
Most portable, and some non-portable, systems
have power management features that save the
state of the computer while the processor and de-
vices (hard drive, monitor, etc.) are disabled to
conserve power. Some implementations provide
a small amount of power to the volatile memory
in order to retain its contents, while others save
the necessary contents of memory to disk and
restore the memory when the system is needed
again.
Many of the current power management systems
use a combination of hardware and software to sup-
port the different sleep modes (Hewlett-Packard
et al., Advanced conﬁguration and power interface
speciﬁcation). The operating system can communi-
cate with the BIOS to place the system in a sleep
mode or the BIOS can initiate a sleep mode on its
own. Unfortunately, many servers are designed
to never turn off and therefore may not have
a power management option.
If the system state and memory are copied to
disk using the power management features of the
computer, then this method may be more reliable
than the software solutions that we previously dis-
cussed. This is similar to the OpenBoot procedure,
except that the data are written to a dedicated
partition and therefore will not overwrite swap
space. However, it is not clear if the exact con-
tents of memory are saved during hibernation
and it is unlikely that the entire physical memory
is preserved.
Limitations of software procedures
The volatile memory acquisition procedures that
are readily available are software-based and rely
on untrusted resources, namely the operating sys-
tem kernel. The user space applications that are
used in the acquisition can be run from a trusted
device (such as a CD-ROM), but the kernel is always
needed to extract the data from memory. There is
no way to avoid using the kernel with a software
solution because it controls the scheduling of ac-
cess to the processor and controls all data ﬂow
to the storage locations.
A possible solution to the threat of a malicious
kernel is to ‘‘patch’’ the needed areas of the ker-
nel memory with trusted code. Kernel patching
is a common method used by attackers to install
malicious code into kernels. The problem with
this solution is that a compromised kernel may
intentionally prevent itself from being updated,
and the responder will not be able to determine
if the kernel is in a state that can be trusted. Sim-
ply stated, using an untrusted kernel with software
acquisition tools decreases the reliability of the
evidence.
A second problem with using a software solution
is that it will always require process and kernel
memory in order to execute and will therefore
overwrite possible evidence. This is analogous to
installing disk imaging software directly onto a sus-
pect hard disk before it is acquired.
A hardware-based memory acquisition procedure
55
Secure
EEPROM
Real Time
Clock
External
Switch
LED
External Storage
Interface
Microprocessor
ROM
SDRAM
PCI Bus
Figure 2 Block diagram of the acquisition card hardware components.
A hardware-based imaging procedure
Overview
The goal of our work has been to design and im-
plement a procedure that can make an accurate
copy of volatile data and that minimizes the
amount of volatile and non-volatile data which is
modiﬁed on the target system in the process. As
discussed in the previous section, we cannot rely
on the operating system and software applications
to provide reliable data. Therefore, we chose to
use a hardware-based solution because it is difﬁ-
cult for the attacker to tamper with, it can access
memory without relying on the operating system,
and it will not need to use system memory while
it is running.
Our procedure uses a PCI expansion card that
can be installed into a computer before an inci-
dent occurs. When the machine powers up, the ac-
quisition card conﬁgures and tests itself, then
disables its PCI controller so that it does not re-
spond to bus queries from the host system. Only
when the device is actually enabled will it become
a visible connection to the PCI bus. Due to the
design of PCI, which is software- and operating
system-independent, the attacker may see the
device but may not be able to tamper with its
actions.
The back of the PCI card has a physical switch
and an interface to an external storage medium.
When the switch is enabled, the PCI controller on
the card is activated and takes control of the PCI
bus. The card ﬁrst suspends the CPU (a recommen-
dation which will prevent an attacker or legiti-
mately executing application from modifying
memory contents while the acquisition is in pro-
cess) and then uses Direct Memory Access (DMA)
to copy the contents of physical memory to an ex-
ternal non-volatile storage device, such as an
IEEE1394 (Firewire) hard disk, Hitachi Microdrive
(overview page), or memory card. Once the physi-
cal memory has been successfully copied to the
non-volatile storage device, the CPU is resumed
and the operating system continues to execute.
System-level design
This section provides a system-level description of
the hardware components required for our device.
The primary components of the acquisition card
are a microprocessor and a PCI controller with bus
master capability and support for DMA. The micro-
processor is connected to ROM, SDRAM, an external
momentary switch, an LED, and an external storage
interface. The basic diagram is shown in Fig. 2.
The on-board ROM contains the ﬁrmware oper-
ating code for the acquisition card. ROM is used
56
because it is neither writeable nor ﬁeld upgrade-
able. This prevents an unauthorized user from
changing program code or operation or otherwise
tampering with the card via the PCI bus. SDRAM is
used to store variables, program stack, and other
operating data. It is also used for the buffering and
temporary storage of the volatile memory retrieved
from the target PC. The LED provides device oper-
ation and status information to the user. For exam-
ple, it could be used to identify the following
states: Power-On Self Test, Idle/Ready-to-Image,
Imaging in Process, Error (of various types), Pro-
cess Successful. The external switch is used to be-
gin the imaging process and must be physically
activated by a human. Although this original design
assumes the server is in a physically secure opera-
tions center, future designs may assume a less se-
cure environment. The external switch could be
replaced by a secure user authentication device,
such as a cryptographic smartcard, USB token, or
one-time-password technology. Optional compo-
nents include a real-time clock, used for accurate
time-stamping to correlate actual time with host-
assumed time, and secure Serial EEPROM memory,
used to store user-conﬁgurable options (if applica-
ble) and audit trail information.
In today’s typical computer system, the Periph-
eral Component Interconnect (PCI) serves as a pri-
mary interface between the external adapter
cards and internal system resources (Shanley and
Anderson, 2000). The North Bridge connects the
host processor bus (to which the CPU and physical
memory are attached) to the PCI bus. The North
Bridge also allows devices on the PCI bus to access
system memory at speeds approaching the target
processor’s full native bus speed. Fig. 3 shows a
basic layout of the PCI bus.
DMA is used to provide block transfers of data
between the PCI bus and the target’s local proces-
sor memory without requiring resources from the
target processor itself. Using DMA allows a periph-
eral device, such as our acquisition card, to trans-
fer data directly from memory without it being
handled by the processor. During the acquisition
process, our card will take control of the PCI bus
and request a DMA transfer of system memory by
specifying the desired base address and size of
the block. The combination of PCI bus capabilities
and DMA transfers is crucial to the effectiveness
and reliability of our proposed acquisition card.
Imaging procedure
We now provide a more formal description of our
acquisition procedure. This includes the error han-
B.D. Carrier, J. Grand
Host CPU
Main
Memory
Acquisition
Card
North
Bridge
PCI Bus
Figure 3 Layout of the target PCI bus showing card and
memory connections.
dling procedures, but does not include implemen-
tation details, such as the hardware-speciﬁc steps.
1. The acquisition card is powered on and
completes its hardware initialization routines.
(a) The acquisition card conducts a Power-On
Self Test (POST) and halts if a failure
occurs.
(b) The acquisition card does not enable its PCI
controller.
(c) The acquisition card remains idle until the
external switch is activated.
2. When the external switch is activated, the
acquisition process begins.
(a) The acquisition card activates the external
storage device and initializes it to store the
upcoming memory image.
(b) The acquisition card enables its PCI con-
troller.
(c) If possible, the acquisition card halts the
target processor.
(d) A log entry is created on the external
storage device which states that an acqui-
sition has started and includes the date and
time, if available.
(e) The acquisition card saves volatile system
memory to the external non-volatile stor-
age device by looping on the following
steps, starting at physical memory address
0, until all memory has been read:
(i) If memory in the next X bytes of
memory are known to be protected
and not accessible, then read the
unprotected areas using the following
steps, write ‘00’h to the memory
image corresponding to the protected
areas, and create a log entry on the
A hardware-based memory acquisition procedure
57
external storage device with the pro-
tected memory locations.
(ii) Perform a DMA Memory Read request
for the next X bytes of memory to be
written to a buffer in the acquisition
card’s SDRAM.
(iii) If an I/O error occurs, then a log entry
is created on the external storage
device and X bytes of ‘00’h are
written to the memory image on the
external storage device.
(iv) If no I/O error occurs,
then the
acquisition card writes the buffer in
SDRAM to the memory image on the
external storage device.
(v) If a hash value of the data is being
calculated, then the X bytes of data
are added to the hash calculation.
(f) If a hash value of the data is being
calculated, then the ﬁnal hash value is
added to the log or a separate ﬁle.
(g) A log entry is created on the external
storage device which states
the
acquisition has ended and includes the
date and time, if available.
that
(h) The acquisition card disables
the PCI
controller and deactivates the external
storage device to end the acquisition
process.
3. The acquisition card returns to an idle state.
The X bytes of memory that are read in the
above loop will be dependent on the amount of
memory on the acquisition card. We will need to
conduct performance tests to identify a reasonable
value for this. The external storage device should
have a ﬁle system on it, such as FAT, so that
multiple images may exist on the same storage de-
vice. Note that FAT32 ﬁle systems have a 2 GB ﬁle
size limit and may not be able to save the entire