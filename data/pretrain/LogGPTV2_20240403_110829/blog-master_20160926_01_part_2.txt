【推荐】为了全球化的需求，所有的字符存储与表示，均以UTF-8编码，那么字符计数方法注意：    
例如  
计算字符长度  
```
postgres=# select length('阿里巴巴');  
 length   
--------  
      4  
(1 row)  
```
计算字节数  
```
postgres=# select octet_length('阿里巴巴');  
 octet_length   
--------------  
           12  
(1 row)  
```
其他长度相关接口  
```
   Schema   |          Name          | Result data type | Argument data types |  Type    
------------+------------------------+------------------+---------------------+--------  
 pg_catalog | array_length           | integer          | anyarray, integer   | normal  
 pg_catalog | bit_length             | integer          | bit                 | normal  
 pg_catalog | bit_length             | integer          | bytea               | normal  
 pg_catalog | bit_length             | integer          | text                | normal  
 pg_catalog | char_length            | integer          | character           | normal  
 pg_catalog | char_length            | integer          | text                | normal  
 pg_catalog | character_length       | integer          | character           | normal  
 pg_catalog | character_length       | integer          | text                | normal  
 pg_catalog | json_array_length      | integer          | json                | normal  
 pg_catalog | jsonb_array_length     | integer          | jsonb               | normal  
 pg_catalog | length                 | integer          | bit                 | normal  
 pg_catalog | length                 | integer          | bytea               | normal  
 pg_catalog | length                 | integer          | bytea, name         | normal  
 pg_catalog | length                 | integer          | character           | normal  
 pg_catalog | length                 | double precision | lseg                | normal  
 pg_catalog | length                 | double precision | path                | normal  
 pg_catalog | length                 | integer          | text                | normal  
 pg_catalog | length                 | integer          | tsvector            | normal  
 pg_catalog | lseg_length            | double precision | lseg                | normal  
 pg_catalog | octet_length           | integer          | bit                 | normal  
 pg_catalog | octet_length           | integer          | bytea               | normal  
 pg_catalog | octet_length           | integer          | character           | normal  
 pg_catalog | octet_length           | integer          | text                | normal  
```
【推荐】对于值与堆表的存储顺序线性相关的数据，如果通常的查询为范围查询，建议使用BRIN索引。    
例如流式数据，时间字段或自增字段，可以使用BRIN索引，减少索引的大小，加快数据插入速度。    
例如  
```
create index idx on tbl using brin(id);  
```
【推荐】设计时应尽可能选择合适的数据类型，能用数字的坚决不用字符串，能用树类型的，坚决不用字符串。 使用好的数据类型，可以使用数据库的索引，操作符，函数，提高数据的查询效率。     
PostgreSQL支持的数据类型如下  
精确的数字类型  
浮点  
货币  
字符串  
字符  
字节流  
日期  
时间  
布尔  
枚举  
几何  
网络地址  
比特流  
文本  
UUID  
XML  
JSON  
数组  
复合类型  
范围类型  
对象  
行号  
大对象  
ltree 树结构类型  
cube 多维类型   
earth 地球类型  
hstore KV类型   
pg_trgm  相似类型  
PostGIS（点、线段、面、路径、经纬度、raster、拓扑、。。。。。。）    
【推荐】应该尽量避免全表扫描(除了大数据量扫描的数据分析)，PostgreSQL支持几乎所有数据类型的索引。    
索引接口包括  
btree  
hash  
gin  
gist  
sp-gist  
brin  
rum (扩展接口)  
bloom (扩展接口)  
【推荐】对于网络复杂并且RT要求很高的场景，如果业务逻辑冗长，应该尽量减少数据库和程序之间的交互次数，尽量使用数据库存储过程(如plpgsql)，或内置的函数。  
PostgreSQL内置的plpgsql函数语言功能非常强大，可以处理复杂的业务逻辑。  
PostgreSQL内置了非常多的函数，包括分析函数，聚合函数，窗口函数，普通类型函数，复杂类型函数，数学函数，几何函数，。。。等。  
【推荐】应用应该尽量避免使用数据库触发器，这会使得数据处理逻辑复杂，不便于调试。    
【推荐】如果应用经常要访问较大结果集的数据（例如100条），可能造成大量的离散扫描。    
建议想办法将数据聚合成1条，例如经常要按ID访问这个ID的数据，建议可以定期按ID聚合这些数据，查询时返回的记录数越少越快。    
如果无法聚合，建议使用IO较好的磁盘。    
【推荐】流式的实时统计，为了防止并行事务导致的统计空洞，建议业务层按分表并行插入，单一分表串行插入。    
例如  
table1, table2, ...table100;  
每个线程负责一张表的插入，统计时可以按时间或者表的自增ID进行统计。    
```
select xxx from table1 where id>=上一次统计的截至ID group by yyy;  
```
【推荐】范围查询，应该尽量使用范围类型，以及GIST索引，提高范围检索的查询性能。    
例如  
使用范围类型存储IP地址段，使用包含的GIST索引检索，性能比两个字段的between and提升20多倍。    
```
CREATE TABLE ip_address_pool_3 (  
  id serial8 primary key ,  
  start_ip inet NOT NULL ,  
  end_ip inet NOT NULL ,  
  province varchar(128) NOT NULL ,  
  city varchar(128) NOT NULL ,  
  region_name varchar(128) NOT NULL ,  
  company_name varchar(128) NOT NULL ,  
  ip_decimal_segment int8range  
) ;  
CREATE INDEX ip_address_pool_3_range ON ip_address_pool_3 USING gist (ip_decimal_segment);  
select province,ip_decimal_segment  from ip_address_pool_3 where ip_decimal_segment @> :ip::int8;  
```
【推荐】未使用的大对象，一定要同时删除数据部分，否则大对象数据会一直存在数据库中，与内存泄露类似。    
vacuumlo可以用来清理未被引用的大对象数据。  
【推荐】对于固定条件的查询，可以使用部分索引，减少索引的大小，同时提升查询效率。    
例如  
```
select * from tbl where id=1 and col=?; -- 其中id=1为固定的条件  
create index idx on tbl (col) where id=1;  
```
【推荐】对于经常使用表达式作为查询条件的语句，可以使用表达式或函数索引加速查询。    
例如  
```
select * from tbl where exp(xxx);  
create index idx on tbl ( exp );  
```
【推荐】如果需要调试较为复杂的逻辑时，不建议写成函数进行调试，可以使用plpgsql的online code.  
例如  
```
do language plpgsql  
$$  
declare  
begin  
  -- logical code  
end;  
$$;  
```
【推荐】当业务有中文分词的查询需求时，建议使用PostgreSQL的分词插件zhparser或jieba，用户还可以通过接口自定义词组。    
建议在分词字段使用gin索引，提升分词匹配的性能。    
【推荐】当用户有规则表达式查询，或者文本近似度查询的需求时，建议对字段使用trgm的gin索引，提升近似度匹配或规则表达式匹配的查询效率，同时覆盖了前后模糊的查询需求。如果没有创建trgm gin索引，则不推荐使用前后模糊查询例如like %xxxx%。    
【推荐】gin索引可以支持多值类型、数组、全文检索等的倒排高效查询。但是对于PostgreSQL 9.4以及以下版本，建议设置表的fillfactor=70，可以解决高并发写入时的锁问题。   
[《PostgreSQL 10 GIN索引 锁优化》](../201707/20170704_01.md)   
[《PostgreSQL 9种索引的原理和应用场景》](../201706/20170627_01.md)  
【推荐】当用户有prefix或者 suffix的模糊查询需求时，可以使用索引，或反转索引达到提速的需求。    
如  
```
select * from tbl where col ~ '^abc';  -- 前缀查询
select * from tbl where reverse(col) ~ '^def';  -- 后缀查询使用反转函数索引
```
【推荐】用户应该对频繁访问的大表（通常指超过8GB的表，或者超过1000万记录的表）进行分区，从而提升查询的效率、更新的效率、备份与恢复的效率、建索引的效率等等，（PostgreSQL支持多核创建索引后，可以适当将这个限制放大）。     
单表过大，还需要考虑freeze等问题。   
[《HTAP数据库 PostgreSQL 场景与性能测试之 45 - (OLTP) 数据量与性能的线性关系(10亿+无衰减), 暨单表多大需要分区》](../201711/20171107_46.md)  
【推荐】对于频繁访问的分区表，建议分区数目不要太多（至少在PostgreSQL 10前，还有此问题），分区数目过多，可能导致优化器的开销巨大，影响普通SQL，prepared statement 的BIND过程等。    
[《PostgreSQL 查询涉及分区表过多导致的性能问题 - 性能诊断与优化(大量BIND, spin lock, SLEEP进程)》](../201801/20180124_01.md)  
【推荐】用户在设计表结构时，建议规划好，避免经常需要添加字段，或者修改字段类型或长度。 某些操作可能触发表的重写，例如加字段并设置默认值，修改字段的类型。   
如果用户确实不好规划结构，建议使用jsonb数据类型存储用户数据。    
### QUERY 规范
【强制】不要使用count(列名)或count(常量)来替代count(```*```)，count(```*```)就是SQL92定义的标准统计行数的语法，跟数据库无关，跟NULL和非NULL无关。  
说明：count(```*```)会统计NULL值（真实行数），而count(列名)不会统计。  
【强制】count(多列列名)时，多列列名必须使用括号，例如count( (col1,col2,col3) )。注意多列的count，即使所有列都为NULL，该行也被计数，所以效果与count(```*```)一致。  
例如  
```
postgres=# create table t123(c1 int,c2 int,c3 int);  
CREATE TABLE  
postgres=# insert into t123 values (null,null,null),(null,null,null),(1,null,null),(2,null,null),(null,1,null),(null,2,null);  
INSERT 0 6  
postgres=# select count((c1,c2)) from t123;  
 count   
-------  
     6  
(1 row)  
postgres=# select count((c1)) from t123;  
 count   
-------  
     2  
(1 row)  
```
【强制】count(distinct col) 计算该列的非NULL不重复数量，NULL不被计数。  
例如    
```
postgres=# select count(distinct (c1)) from t123;  
 count   
-------  
     2  
(1 row)  
```
【强制】count(distinct (col1,col2,...) ) 计算多列的唯一值时，NULL会被计数，同时NULL与NULL会被认为是想同的。  
例如  
```
postgres=# select count(distinct (c1,c2)) from t123;  
 count   
-------  
     5  
(1 row)  
postgres=# select count(distinct (c1,c2,c3)) from t123;  
 count   
-------  
     5  
(1 row)  
```
【强制】count(col)对 "是NULL的col列" 返回为0，而sum(col)则为NULL。    
例如  
```
postgres=# select count(c1),sum(c1) from t123 where c1 is null;  
 count | sum   
-------+-----  
     0 |      
(1 row)  
```
因此注意sum(col)的NPE问题，如果你的期望是当SUM返回NULL时要得到0，可以这样实现    
```
SELECT coalesce( SUM(g)), 0, SUM(g) ) FROM table;  
```
【强制】NULL是UNKNOWN的意思，也就是不知道是什么。  因此NULL与任意值的逻辑判断都返回NULL。  
例如  