### Page 295
## 文件处理

与 `echo` 命令不同，`ls` 命令要求其文件参数必须存在。如果文件不存在，`ls` 会报错。例如：

```bash
$ ls this-file-does-not-exist
ls: cannot access 'this-file-does-not-exist': No such file or directory
$ echo $?
1
```

没有参数时，`echo` 只会显示一个空行，而 `ls` 会列出当前目录的内容。我们先创建一个包含三个文件的目录来说明它们的行为模式：

```bash
$ mkdir sample
$ cd sample
$ touch one two three
```

然后应用 `echo` 和 `ls` 到它的内容：

```bash
$ echo *
one three two
$ ls
one three two
$ echo
# 不带参数的 echo 输出一个空行
$
$ ls
one three two
```

以点号开头的文件名在常规 Shell 模式匹配中会被隐藏。我们来看看在一个包含三个隐藏文件的子目录中，这类文件是如何被处理的：

```bash
$ mkdir hidden
$ cd hidden
$ touch .uno .dos .tres
```

接下来尝试显示它的内容：

```bash
$ echo *
# 没有匹配者
$ ls
# 这个输出行是空的
$ ls *
ls: cannot access '*': No such file or directory
```

当没有匹配模式的文件时，Shell 会将模式视为参数：在这里 `echo` 看到星号并打印它，而 `ls` 则试图寻找名为 `*` 的文件，然后报告失败。

### Page 296
## 第10章 文件处理

现在，如果我们提供匹配前置点号的模式，可以进一步了解它们的差异：

```bash
$ echo .*
. .. .dos .tres .uno
$ ls .*
.dos .tres .uno
```

UNIX 目录总是包含特殊条目 `.`（当前目录）和 `..`（父目录），且 Shell 会传递所有匹配给这两个程序。`echo` 只报告它们，但 `ls` 会做更多的事：当命令行参数为目录时，它会列出该目录的内容。在我们的例子中，这个列表会包含父目录的内容。

你可以使用 `-d` 选项来显示目录本身的相关信息，而非其内容：

```bash
$ ls -d .*
./hidden ../one ../three ../two
$ ls -d ../*
../hidden/ ../one ../three ../two
```

由于你通常不希望显示父目录，因此 `ls` 还提供了 `-a` 选项，用于打印当前目录里的所有文件，包括隐藏文件：

```bash
$ ls -a
. .. .dos .tres .uno
```

在此不会列出父目录的内容，因为没有参数指定它。

#### 10.1.1 长格式文件列表

`ls` 可以进一步报告相关细节，尤其是文件系统的一些元数据。这个功能通常通过 `-l` 选项完成：

```bash
$ ls -l /bin/*sh
-rwxr-xr-x 1 root root 463680 Jun 28 2002 /bin/ksh
lrwxrwxrwx 1 root root   4 May 11 2003 /bin/csh -> tcsh
lrwxrwxrwx 1 root root   4 Aug  1 2003 /bin/sh -> bash
-rwxr-xr-x 1 root root 365432 Jun 28 2002 /bin/tcsh
```

虽然这种输出形式是常见的，但额外的命令行选项可以对它的输出稍作修改。

### Page 297
## 文件处理

每行上的首字符描述文件类型：`-` 为普通文件、`d` 为目录、`l` 为符号链接。接下来的9个字符报告文件权限：针对每个用户、组以及其他人。`r` 表示读取、`w` 表示写入、`x` 表示执行，如果没有提供权限则是 `-`。

第二栏包含链接计数：在这里，只有 `/bin/zsh` 拥有直接链接到另一个文件，但还有其他文件未显示，因为它们的名称与参数模式不匹配。

第三栏和第四栏报告文件所有者与所属组，第五栏则是以字节为单位的文件大小。接下来的三栏是最后修改的时间戳，这里显示的是月、日、年。表示六个月前的文件，其他的文件则是年的部分会被替换为时间（指六个月内的文件）：

```bash
$ ls -l /usr/local/bin/ksh
-rwxrwxr-x 1 jones devel 879740 Feb 23 07:33 /usr/local/bin/ksh
```

不过，在现代的 `ls` 实例上，时间戳与 locale 相关，且使用较少的栏。这里是在 GNU/Linux 上测试的两种 `ls` 版本：

```bash
$ LC_TIME=de_CH /usr/local/bin/ls -l /bin/tcsh
-rwxr-xr-x 1 root root 365432 2002-08-08 02:34 /bin/tcsh
$ LC_TIME=fr_BE /bin/ls -l /bin/tcsh
-rwxr-xr-x 1 root root 365432 août 2002 /bin/tcsh
```

尽管时间应该已经国际化，但这个系统在 English 原型下，报告错误的 French 时间 `août 2002`。

GNU 版本允许显示完整的时间精度，下面的例子是来自 SGI IRIX 系统，显示一百万分之一秒的精度：

```bash
$ /usr/local/bin/ls -l --full-time /bin/tcsh
-rwxr-xr-x 1 root sys 425756 1999-11-04 13:08:46.282188000 -0700 /bin/tcsh
```

前面的 `ls` 命令说明栏里，呈现了一些通用选项，但其实还有更多：GNU 的版本就有将近40种选项！你将会经常用到 `ls`，所以偶尔重新详读它的手册页，更新你的记忆，绝对很有帮助。如果你要做的是可移植性的 Shell 脚本，请限制自己使用较通用的选项，并设置环境变量 `LC_TIME`，以减少因 locale 产生的变异。

#### 10.1.2 列出文件的元数据

当计算机以精简的二进制形式存储数据时，能够以更详细的形式提供数据内容，方便人们或简单的计算机程序阅读，这是非常有用的。我们在本书中已多次使用八进制输出工具 `od`，它可以将无法打印的数据流字节转换为文字。我们还将在第13.7节探讨特殊文件系统 `/proc`，它可以让内部核心程序里的数据更易于访问。

奇怪的是，文件系统的元数据，通过 POSIX 标准下的 `fstat()`、`lstat()` 和 `stat()` 函数库调用，已被 C 程序员长期使用，但在 Shell 及脚本语言里，除了 `ls` 命令提供的有限形式外，很难被程序员访问。

20世纪90年代末期，SGI IRIX 提出了 `stat` 命令。在2001年左右，为 BSD 系统及 GNU coreutils 包编写的独立 `stat` 实例也出现了。不幸的是，这三个程序的输出格式完全不同，见附录B的说明。它们各自拥有众多的命令行选项，提供更多对输出何种数据以及使用何种格式的控制。GNU 版本是唯一构建在各种 UNIX 版本之上的，所以如果你在它之上进行标准化，便能在本地 Shell 脚本内好好利用它的功能。

### Page 298
## 使用 `touch` 更新修改时间

我们已经介绍过使用 `touch` 命令创建空文件。对于之前不存在的文件，下面几种方式都可以完成相同目的：

```bash
cat /dev/null > some-file
printf "" > some-file
cat /dev/null >> some-file
printf "" >> some-file
touch some-file
```

不过，如果是文件已存在，前两个操作会将文件大小删减到0，后面的三种实际上什么也不做，只更新最后修改时间。说得更清楚些：比较安全的做法是使用 `touch`，因为如果你的意思是 `>>` 却不小心输成 `>`，就会毁了文件内容。

有时在 Shell 脚本里也会应用 `touch` 创建空文件：它们的存在与时间戳是有意义的，但它们的内容则否。最常见的例子是用于锁定文件，以指出程序已在执行中，不应启动第二个实例。另一种用途则为记录文件的时间戳，供日后与其他文件对照用。

`touch` 默认（或使用 `-m` 选项）操作会改变文件的最后修改时间，不过你也可以使用 `-a` 选项改变文件的最后访问时间。时间部分，默认为使用当前时间，但你也可以搭配 `-t` 选项覆盖之，方式是加上 `[CC]YYMMDDhhmm[.SS]` 形式的参数，世纪、公元年和秒数是可选用的，月份范围为01到12、日期范围为01到31，时区为当地时区。例如：

```bash
$ touch -t 197607040000.00 Us-bicentennial
$ ls -l Us-bicentennial
-rw-rw-r-- 1 Jones devel 0 Jul  4 1976 Us-bicentennial
```

`touch` 还提供 `-r` 选项，复制参照文件的时间戳：

```bash
$ touch -r Us-bicentennial birthday
$ ls -l birthday
-rw-rw-r-- 1 jones devel 0 Jul  4 1976 birthday
```

旧系统上的 `touch` 命令并没有 `-r` 选项，不过所有现行版本都支持此功能，且 POSIX 也要求具有它。

以日期来看，UNIX 时间戳（epoch）是从零开始，由 1970/1/1 00:00:00 UTC 算起。大部分现行系统都有一个带正负号32位的时间计数器，每一秒加1，且允许日期的表示往前推到1901年晚期，往后则到2038年：当计时器在2038年溢出时，它就会回到1901。幸好，一些近期的系统已经切换到64位计数器：即使以一百万分之一秒计算，它还是能扩展到五十万年以上。32位与64位计时器的时钟比较如下：

```bash
$ touch -t 178907140000.00 first-Bastille-day
touch: invalid date format ‘178907140000.00’
$ touch -t 178907140000.00 first-Bastille-day
-rw-rw-r-- 1 jones devel 0 1789-07-14 00:00 first-Bastille-day
$ ls -l first-Bastille-day
-rw-rw-r-- 1 jones devel 0 1789-07-14 00:00 first-Bastille-day
```

要在64位计时器时钟的系统上，以 `touch` 使用未来时间，仍是无法完成的，这是人为加的软件限制，因为人们错误地认为 POSIX 规定的世纪只需要两位数：

```bash
$ touch -t 999912312359.59 end-of-9999
$ ls -l end-of-9999
-rw-rw-r-- 1 jones devel 0 9999-12-31 23:59 end-of-9999
$ touch -t 1000001010000.00 start-of-10000
touch: invalid date format ‘1000001010000.00’
```

幸好，GNU 的 `touch` 提供另一种选项可用以规避 POSIX 的限制：

```bash
$ touch -d '10000000-01-01 00:00:00' start-of-10000000
$ ls -l start-of-10000000
-rw-rw-r-- 1 jones devel 0 10000000-01-01 00:00 start-of-10000000
```

### Page 299
## 临时性文件的建立与使用

虽然使用管道可以省去建立临时性文件的需求，但有时临时性文件还是派得上用场。UNIX 不同于其他操作系统的地方在于：它没有那种将不再需要的文件神奇地删除的想法。反倒是提供了两个特殊目录：`/tmp` 与 `/var/tmp`（旧系统为 `/usr/tmp`），这些文件可如常被存储，当它们未被清理干净时也不会弄乱一般的目录。大部分系统上的 `/tmp` 都会在系统开机时清空，但 `/var/tmp` 下的文件在重新开机时仍需存在，因为有些文本编辑程序会将它们的备份文件存放在这里，从而在系统损坏后可以用来恢复数据。

因为 `/tmp` 使用频繁，有些系统会将它放在常驻内存型（memory-resident）的文件系统里，以便快速访问，如下面这个 Sun Solaris 系统里的例子：

```bash
$ df /tmp
Filesystem           kbytes    used   available capacity  Mounted on
/dev/md/dsk/d0       10240     1234      9006     12%    /tmp
```