www.TopSage.com
---
## Page 295
文件处理
不同于echo的是：1s要求它的文件参数要存在，而且如果它们不存在的话，则会出现（OIm
抱怨：
S 1s this-file-does-not-exist
试图列出一个不存在的文件
ls: this-file-does-not-exist: No such file or directory
$ echo $?
显示1s的离开码
1
没有参数时，echo只会显示一个空行，但1s会列出当前目录的内容。我们先产生一个
含有三个文件的目录，以便讲解其行为模式：
$ nkdix sample
建立新目录
$ cd sanple
切换到此新目录
$ touch one tvo three
建立空自文件
然后应用echo与ls到它的内容：
$ echo *
网应匹配的文件
one three two
$1a·
列出匹配的文件
one three tvo
$echo
不带参数的echo
这个输出行是空的
$18
列出当前的目录
onethree two
以一个点号为开头的文件名，在正规Shell模式匹配中会被隐藏。我们来看看在一个含
有三个隐藏文件的子目录中，这类文件是如何被处理的，有何不同：
Smkdir hidden
Scd hidden
建立新日录
$ touch.uno.doe.tres
建立三个隐藏的空文件
切换到该目录
接下来尝试显示它的内容：
$ ecbo *
同应匹配的文件
未有匹配者
$18
列出非隐藏文件
这个输出行是空的
$ 1e *
1s: *: No such file or directory
列出匹配的文件
当没有匹配模式的文件时，Shell会将模式视为参数：在这里echo看到星号井打印它，
而1s则试图寻找名为*的文件，然后报告寻找失败。
www.TopSage.com
---
## Page 296
284
第10章
现在，如果我们提供匹配前置点号的模式，可再进一步了解它们的差异：
S echo .*
回应急藏文件
. .. -dos .tres .uno
$ 1s .*
.dos.tres.uno
列出隐藏文件
-1
hidden one three to
* - 1
UNIX目录总是包含特殊实例..（父目录）以及。（当前目录），且Shell会传递所有的
匹配给这两个程序。echo只报告它们，但1s会做更多的事：当命令行参数为目录时，
它会列出该目录的内容。在我们的例子里，这个列表会包含父目录的内容，
你可以显示目录本身的相关信息，而非其内容，只要使用-d选项即可：
$ 18 -d ,*
oun*seaz1sop...
列出隐藏文件，但没有目录内容
-./hidden../one../three../two
$ 18 -d ../*
列出父文件，但没有目录内容
由于你通常要的不是显示父目录，因此，1s还提供了-a选项，提供打印当前目录里的
所有文件，包含隐藏文件在内：
$ 18 -a
....dos.tres.uno
列出所有文件，包括隐减文件
在此不会列出父目录的内容，因为没有参数指定它。
10.1.1长的文件列出
由于1s知道它的参数是文件，所以可以进一步地报告相关细节，尤其是文件系统的一
些metadata，这个功能通常是以-1（小写L）选项完成：
$ 1e -1 /bin/*eh
列出在/bin 下的 Shel1
LrwXrxrWX
1rwxrwxrKx
1root root
-rwXr-xr-x 1 root. root 206642 Jun 28 2002 /bin/ksh
1root root
4 May 11
2003 /bin/csh -> tcsh
1rwxrwxrwx1root root
4 Aug  1
2003 /bin/sh => bash
-rwxr-xr-x2 root root 463680 Jun 282002/bin/zsh
TWXr-XI-x
1 rootroot 365432 Aug8
2002 /bin/tcsh
虽然这种输出形式是常见的，但是额外的命令行选项，可对它的输出稍作修改。
www.TopSage.com
---
## Page 297
文件处理
285
每行上的首字符描述文件类型：-为一般文件、d为目录、1为符号连接，
接下来的9个字符，则报告文件权限：针对每个用户、组以及除此外的其他人。r表示
读取、w表示写人、x表示执行，如果未提供权限则是-。
第二栏包含连接计数：在这里，只有/bin/zsh拥有直接链接到另一个文件，但是还有
其他的文件未显示于这里的输出，因为它们的名称与参数模式不匹配。
第三栏、第四栏报告文件所有者与所属组，第五栏则是以字节为单位的文件大小。
接下来的三栏是最后修改的时间戳，这里显示的是一直沿用下来的形式：月、日、年，
表示六个月前的文件，其他的文件则是年的部分会被替换为时间（指六个月内的文件）：
$ 18 -1 /u8r/loca1/bin/ksb
-rwxrwxr-x 1 jones devel 879740 Feb 23 07:33 /usr/1oca1/bin/ksh
列出最近的文件
不过，在现代的1s实例上，时间裁与locale相关，且使用较少的栏。这里是在GNU/
Linux上润试的两种1s版本：
$ LC_rIMB=de_C8 /usr/local/bin/18 -1 /btn/tcsh 列出 1ocale 为 Swiss-Gersan
的时间额
rwxr-xr-x 1 r0ot r0ot 365432 2002-08-08 02:34 /bin/tcab
S LC_7IMB=fr_B8 /bin/18 -1 /bin/tcsh
列出 1ocale 为 Belgian-French
的时间都
rvxr-xr-x1 rootroot365432 ao0B2002/bin/tcsh
尽管时间应该已经国际化，但这个系统在English原型下，报告错误的French时间le
8 ao6t 2002,
GNU版本允许显示完整的时间精准度，下面的例子是来自SGIIRIX系统，显示一百万
分之一秒精准度：
S/usr/1ocal/bin/1s-1--fu11-time/bin/tcsh高精准度的时间数
-r-xr-Xr-x 1 root sys 425756 1999-11-04 13:08:46.282188000 -0700 /bin/tcsh
前面的1s命令说明栏里，呈现1s实例的一些通用选项，但其实还有更多：GNU的版
本就有将近40种选项！你将会时常用到1s，所以偶尔重新详读它的手册页，更新你的
记忆，绝对很有帮助。如果你要做的是具可移植性的Shell脚本，请限制自已使用较通
用的选项，并设置环境变量LC_TIME，可减少因locale所产生的变异。
10.1.2列出文件的meta数据
当计算机以精简的二进制形式存储数据时，针对相同的数据，能够以更详尽的形式提供
其数据内容，可方便人们或简单的计算机程序阅读，这是非常有用的。我们在本书中已
www.TopSage.com
---
## Page 298
286
第10款
使用八进制输出工具od多次，它可以将无法打印的数据流字节转换为文字，而我们也
将于13.7节探讨特殊文件系统/proc，它可以让内部核心程序里的数据更易于访问。
奇怪的是，文件系统里的meta数据，通过POSIX标准下的fstat（）、lstat（）与stat（）
函数库调用，已长期被C程序设计员使用，但在Shel1及脚本语言里，除了1s命令所提
供的有限形式以外，很难被程序设计员访问。
20世纪90年代末期，SGIIRIX提出stat命令。在2001年左右，为BSD系统及GNU
coreutils包所写的stat独立实例也出现了。不幸的是，这三个程序的输出格式完全不
同，见附录B的说明。它们各自拥有为数众多的命令行选项，提供更多对输出何种数据
以及使用何种格式的控制。GNU版本是唯一构建在各种UNIX版本之上的，所以如果你
在它之上进行标准化，便能在你的本地Shell脚本内好好利用它的功能。
10.2使用touch更新修改时间
我们已介绍过使用touch命令建立空文件。对于之前不存在的文件，下面提供的几种方
式，都为完成相同目的：
cat /dev/mu11  > some-f11e
复制空文件到some-file
printf ""
>some-file
打印空字符申到sgme-file
cat /dev/mu11 >> some-fi1e
附加空文件到some-file
printf **
>> some-file
附加空字符申到some-file
touch
some-file
更新some-file的时间数
不过，如果是文件已存在，前两个操作就会将文件大小删减到0，后面的三种事实上什
么事也不做，只更新最后修改时间。说得更清楚些：比较安全的做法是使用touch，因
为如果你的意思是>>却不小心输人为>时，就会毁了文件内容。
有时在Shell脚本里也会应用touch建立空文件：它们的存在与时间戳是有意义的，但
它们的内容则否。最常见的例子是用于锁定文件，以指出程序已在执行中，不应启动第
二个实例（instance）。另一种用途则为记录文件的时间裁，供日后与其他文件对照用。
touch默认（或使用-m选项）操作会改变文件的最后修改时间，不过你也可以使用-a
选项改变文件的最后访问时间。时间部分，默认为使用当前时间，但你也可以搭配-t选
项覆盖之，方式是加上（[CC]YY]MMDDhhmm[.SS】形式的参数，世纪、公元年和秒数是
可选用的，月份则为01到12、日期范围为01到31，时区为当地时区。例如：
S touch -t197607040000.00 Us-blcentennia1建立生日文件
$ 1e -1 Us-bicentennia1
-rw-rw-r--.1 Jones deve1 0 Ju141976 0s-bicentennia1
列出文件
www.TopSage.com
---
## Page 299
文件处理
287
touch还提供-r选项，复制参照文件的时间数：
S touch -r us-bicentennial birthdsy
把时间最复制到新的birthday文件
$ 1s -1 birthday
列出新文件
-rw-rw-r-- 1 jones deve1 0 Ju1 41976 birthday
旧系统上的touch命令井没有-r选项，不过所有现行版本都支持此功能，且POSIX也
要求具有它，
以日期来看，UNIX时间戳（epoch）是从零开始，由1970/1/100:00:00UTC（注1）算
起。大部分现行系统都有一个带正负号32位的时间计数器，每一秒加1，且允许日期的
表示往前推到1901年晚期，往后则到2038年：当计时器在2038年溢出时，它就会回到
1901。幸好，一些近期的系统已经切换到64位计数器：即使以一百万分之一秒计算，它
还是能扩展到五十万年以上132位与64位计时器的时钟比较如下：
S touch -t 178907140000.00 first-Basti1le-day
为法国建国日建立一个文件
touch: Inval1d date format *178907140000.00*
32位计时器显然是不是的
S touch -t 178907140000.00 firat-Baati1le-day
再试试64位计时器
-rv-rw-r-- 1 jones deve1 0 1789-07-14 00:00 Eirst-Bast1le-day
S ls -l first-Bastille-day
顺利运行，列出文件
要在64位计时器时钟的系统上，以touch使用未来时间，仍是无法完成的，这是人为
加的软件限制，因为人们错误地认为POSIX要录的世纪只需要两位数：
S touch -t 999912312359.59 esd-of-9999
可运行
S 1s -1 end-of-9999
列出文件
-rv-rw-r-- 1 jones devel 0 9999-1231 23:59 end-of9999
S touch -t 1000001010000.00 atart-of-10000
touch: invalid date format *1000001010000.00*
失败
幸好，GNU的touch提供另一种选项可用以规避POSIX的限制：
S touch-d‘10000000-01-0100:00:00°start-of-10000000进人下一个百万世纪！
$ 1s -1 start-of-10000000
列出文件
-rw-rw-r-- 1 jones devel 0 10000000-01-01 00:00 start-of-10000000
10.3临时性文件的建立与使用
虽然使用管道可以省去建立临时性文件的需求，不过有时临时性文件还是派得上用场的。
UNIX不同于其他操作系统的地方就是：它没有那种将不再需要的文件设法神奇地删除
涵1：
UTC习增称为GMT：请参考术语表申的 Coordinared Universal Time,
www.TopSage.com
---
## Page 300
288
第10章
的想法。反倒是提供了两个特殊目录：/tmp与/var/tmp（旧系统为/usr/tmp），这
些文件可如常被存储，当它们未被清理干净时也不会弄乱一般的目录。大部分系统上
的/tmp都会在系统开机时清空，不过/var/tmp下的在重新开机时仍需存在，因为有
些文字编辑程序，会将它们的备份文件存放在这里，从而系统毁损后可以用来恢复数据。
因为/tmp使用频繁，有些系统就会将它放在常驻内存型（memory-resident）的文件系
统里，以便快速访间，如下面这个Sun Solaris系统里的例子：
s df/tm
Filesysten
Ik-blocks
星示/tmp下的磁盘剩余空间
Used Available Uset Mounted on