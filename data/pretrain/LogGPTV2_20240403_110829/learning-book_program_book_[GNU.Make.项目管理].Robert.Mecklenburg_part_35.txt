对Andy的响应：e）重复的m4宏
#
validation_checks:=$(OUTPUT_DiR)/chk_macros_tabs
$（OUTPUT_DIR）/chk_fixme
$(OUTPUT_DIR)/chk_duplicate_macros
$(OUTPUT_DIR)/chk_orphaned_examples
.PHONY:validate-only
validate-only:$(OUTPUT_DIR)/validate
$(OUTPUT_DIR)/validate:$(validation_checks)
（HNOL）S
$（OUTPUT_DIR)/chk_macrOs_tabs:S（ALL_XML_OUT)
查找宏和跳格符
S(QUIET):$(EGREP)
--ignore-case
--1ine-number
（d|u）q\.=xaa--
--regexp='\011*
$~
eS （HO)
S(OUTPUT_DIR)/chk_fixme:S（ALL_XML_OUT)
查找RM：和FIXME..
S(QUIET）$(AWK)
/FIXME/ {printf *$s:&s:s\n,FILENAME,NR，SSO)
/*RM:/
if（$SO !~/RM:Done/）
printf *s:$s:&s\n,FILENAME,NR,$S0
)·$(subst S(OUTPUT_DIR)/,S(SOURCE_DIR)/,S~)
$（TOUCH)$@
$(OUTPUT_DIR)/chk_duplicate_macros:S(SOURCE_DIR)/macros.m4
查找重复的宏
$（QUIET)!$（EGREP）--only-matching
\[]+·，·$1（printf"$$@
清理
clean:
$(kill-acroread)
S（RM)-rS(OUTPUT_DIR)
S（RM)$(SOURCE_DIR)/*-S（SOURCE_DIR)/*.1og Semantic.Cache
S（RM)book.pdf
依存关系的管理
#
如果我们正在进行清理的工作，则不会读取或重建引入文件
ifneq*S(MAKECMDGOALS)"*clean
-include S(DEPENDENCY_FILES)
endif
vpath $.xml $（SOURCE_DIR)
vpath .tif $（SOURCE_DIR)
vpath.eps $(SOURCE_DIR)
$(OUTPUT_DIR)/&.xml:8.xml$（proceSS-pgm）S（m4-macros)
$（call process-includes,$S@
创建输出目录
#
#在有需要的时候创建输出目录。
DOCBOOK_IMACES :-S(OUTPUT_DIR)/releaSe/images
DRAFT_PNG
:=/usr/share/docbook-xsl/images/draft.png
---
## Page 227
makefile实例
217
ifneq"S(MAKECMDGOALS)*"clean"
_CREATE_OUTPUT_DIR:=
$（shell
$（MKDIR）S（DOCBOOK_IMAGES）&
$（CP)S（DRAFT_PNG)S（DOCBOOK_IMAGES）;
if！[[ s（foreach d,
S(notdir
$（wi1dcard $（EXAMPLES_DIR)/ch*)),
-e$(OUTPUT_DIR)/$d &）-e.J];
then
echo Linking examples...>/dev/stderr;
$(LNDIR）S(BOOK_DIR)/S（EXAMPLES_DIR）S(BOOK_DIR)/$(OUTPUT_DIR);\
fi)
endif
这个makefile是在Cygwin下编写而成的，而且不打算移植到Unix上。不过，我相信它
与Unix之间有少数不兼容的地方是无法通过重新定义变量或加人额外变量来解决的。
全局变量区段首先会定义根目录的位置，以及正文、范例、输出目录的相对位置。
makefile所使用的每个程序都会被定义成-一个变量。
管理范例
第一项工作就是管理范例，这是其中最复杂的工作。每个范例都存放在它自己位于book/
examples/ch·的目录中，都包含了一个makefile以及所有的支持文件与子目
录。为了处理范例，我们首先会创建一个目录符号链接，让它指向输出文件树并且在该
处工作，这样运行makefile所产生的结果就不会留在源文件树中了。此外，大部分的范
例都需要把当前工作目录设成makefile所在的目录，以便产生预期的输出。为源文件创
建符号链接之后，我们会运行一个shell脚本run-make，以适当的参数来调用makefile。
如果源文件树中没有shell脚本，我们可以产生默认的版本。run-make脚本的输出会被
存入make.out。有些例子会产生一个可执行文件，而且它还必须被运行。要达到此目的，
你可以运行run-run脚本并将它的输出存入run.out文件。
文件树的符号链接的创建动作是由如下的代码（位于makefile尾端）进行的：
ifneq "$（MAKECMDGOALS）·"clean”
_CREATE_OUTPUT_DIR:=
$(shell
if！[I s（foreach d，
$(notdir
S（wildcard $（EXAMPLES_DIR)/ch*)）,
-e$（OUTPUT_DIR）/$d &&）-C.1];
、
then
echoLinking examples...>/dev/stderr;
S（LNDIR)S（BOOK_DIR)/$(EXAMPLES_DIR)$(BOOK_DIR)/$(OUTPUT_DIR):\
---
## Page 228
218
第十一章
fi)
endif
这个条件语句用来避免make在makeclean运行期间建立输出目录结构。_CREATE_
OUTPUT_DIR是一个实际存在的变量，但它却是一个虚拟变量，因为它的值永远不会被
用到。然而，位于赋值运算符右边部分的shel1函数会在make读进makefile时立即被
执行。she11函数会检查输出树中是否存在每个范例目录。如果有任何缺失的状况，就
会调用lndir命令来更新文件树的符号链接。
if语句所进行的测试值得我们做更深入的探讨。这个测试是由对每个范例目录所进行
的-e测试所组成的（即这个文件存在吗？），实际的代码有点像是这样：使用wildcard
来确定所有的范例目录，并且用notdir删除路径中目录的部分，然后为每个范例目录
产生-e$（OUTPUT_DIR）/dir&&这样的文字。现在，将以上所有片段衔接在一起，嵌
人bash的[[...]]测试中。最后，将结果取反。"一个额外的测试-e·会被纳人，好
让foreach循环能够轻易为每个子句加上&&。
这足以确保当新的目录被发现时，总是会被加人编译系统。
下一个步骤就是建立用来更新make.out和run.out这两个输出文件的规则，方法就是建
立一个用户自定义函数来为每个范例的.our文件进行此事：
#$（call generic-program-example,example-directory)
#建立规则以便编译一个通用范例
define generic-program-example
s（eval $1_dir:=S(OUTPUT_DIR)/$1)
S（eval $1_make_out := $（$1_dir)/make.out)
$（eval $1_run_out:= $（$1_dir)/run.out)
$（eval $1_clean:= $（$1_dir)/clean）
$（eval $1_run_make :=S（$1_dir)/run-make)
$（eval$1_run_run:=$(S1_dir)/run-run)
S（eval $1_sources:=$（filter-out $/CVS,$（wildcard $(EXAMPLES_DIR)/$1/*)))
$（S1_run_out）:$（$1_make_out）$（$1_run_run)
s$(call run-script-example,$($1_run_run),s$@)
$（$1_make_out):S（$1_clean)S（S1_run_make)
$S(call run-script-example,$($1_run_make),$$@)
$（$1_clean):$($1_sources）Makefile
S（RM)-r S（S1_dir)
$(MKDIR)S(S1_dir)
$(LNDIR)-silent../../S（EXAMPLES_DIR)/$1 S（S1_dir)
S(TOUCH) S$@
$($l_run_make):
&11
if $（EGREP）--silent'\SS\(MAKE\)'[mM]akefile;
then
1
./$s/++√/s.a-（aas）s
else
/$s/++/s.-（as）s
-e'/ing directory/d
/
-e's/\[[0-9]\]//;
fi）
SO/(）S<
S(MV)$（TMP)/out.SSSS $2
endef
此函数需要两个参数：脚本的路径以及输出文件的名称。它会切换到脚本所在的目录并
且运行脚本，通过一个过滤器将标准输出和错误输出使用管道转至清理它们的地方
（注1）。
注1：清理的过程比较复杂。run-run和run-make脚本通常会使用bash-x，好让实际的make
命令行被输出。在输出中，-X选项会把++放每个命令之前，将清理脚本转换成一个简
单的S以代表shell提示符。然而，命令并非输出中所出现的唯一信息。因为make正在
运行范例，而且最后会启动另一个make，所以简单的makefile可能会包含额外的、不需
要的输出，比如Enteringdirectory...和Leavingdirectory...等信息，以及
在信息中显示make的层次编号。对于一个不会递归调用make的简单makefile、我们会
去除make的输出中不恰当的信息，就好像它是从最顶层的shell来运行。
---
## Page 230
220
第十一章
make.out工作目标也一样，不过会执行额外的编译动作。如果新的文件被加入一个范例
中，我们会想要检测此状态并且重编译范例。_CREATE_OUTPUT_DIR的代码只会在一个
新的目录中被发现时重建符号链接，而不是在新的文件被加人的时候。为了检测此状态，
我们会在每个范例目录中放人一个时间戳文件，用来指示1ndir上一次是何时被执行
的。S（S1_clean）工作目标将会更新此时间戳文件，而且依存于范例目录中的实际源文
件（并非输出目录中的符号链接）。如果make的依存分析发现范例目录中有一个文件比
clean时间戳文件还新，命令脚本将会删除符号链接版的输出目录，然后重建它并放入一
个新的clean时间文件。当makefile本身被修改时也会执行此项动作。
最后，run-make这个shell脚本会被调用来运行makefile，这是一个典型的两行脚本。
#！/bin/bash -x
make
加入到s（S1_make_out）的必要条件列表中以便创建它。如果没有这个必要条件，
makefile会在输出文件树中产生它。
有规则，并为XML文件里的内容准备输出。这些规则会被makefile中所包含的依存关
系的求值动作所触发。例如，下面是Chapter1的依存文件：
out/ch01.xml:$(EXAMPLES_DIR)/ch01-he11o/Makefile
out/ch01.xml:$(OUTPUT_DIR)/ch01-he11o/make.out
out/ch01.xml:$(EXAMPLES_DIR)/ch01-cw1/count_words.c
out/ch01.xml:S(EXAMPLES_DIR)/ch01-cw1/1exer.1
out/ch01.xml:$(EXAMPLES_DIR)/ch01-cw1/Makefile
out/ch01.xml:$(OUTPUT_DIR)/ch01-cw1/make.out
out/ch01.xml:$(EXAMPLES_DIR)/ch01-cw2/1exer.1
out/ch01.xml:$(OUTPUT_DIR)/ch01-cw2/make.out
out/ch01.xml:$(OUTPUT_DIR)/ch01~cw2/run.out
out/ch01.xml:$(OUTPUT_DIR)/ch01-bogus-tab/make.out
这些依存关系产生自一个简单的awk脚本，姑且称它为make-depend：
#!/bin/awk-f
function generate_dependency(prereq)