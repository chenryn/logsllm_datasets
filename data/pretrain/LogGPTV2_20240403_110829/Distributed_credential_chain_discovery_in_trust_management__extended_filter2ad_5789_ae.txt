the following
1. Both A.r and e are well typed.
2. If A.r is issuer-traces-all, e must be issuer-traces-all.
3. If A.r is subject-traces-all, e must be subject-traces-all.
4. If A.r is issuer-traces-def or issuer-traces-all, A stores
this credential.
5. If A.r is subject-traces-all, every subject of this creden-
tial stores this credential.
Consider credentials in example 3. One possible typing
that makes all credentials well-typed is as follows: preferred,
spdiscount, student, and university are issuer-traces-def,
while accredited, stuID, and member are subject-traces-all.
4.3 Traversability with Well-typed Credentials
In this section we show that well-typed credentials whose
storage is distributed can be located as needed to perform
chain discovery.
163Lemma 6. Assume C is a set of well-typed credentials and
GC = (cid:19)NC, EC(cid:20) is the credential graph for C. Let e be any
∗→ e
role expression and D any entity. If there is a path D
in GC, then we have the following:
1. D
∗→ e is conﬂuent.
2. If e is issuer-traces-all, D
3. If e is subject-traces-all, D
∗→ e is backward traversable.
∗→ e is forward traversable.
From Lemma 6 and Theorems 1 and 2, we have the follow-
ing theorem, which says that if credentials are well typed,
then role membership queries can be solved eﬃciently, even
when credential storage is distributed. This is because con-
ﬂuent paths support eﬃcient chain discovery, as discussed
above in section 4.1. Furthermore, for roles of type issuer-
traces-all, all members can be found eﬃciently. Finally, from
any entity, it is possibly to ﬁnd eﬃciently all subject-traces-
all roles to which the entity belongs.
Theorem 7. Assume that C is a set of well-typed creden-
tials and that GC = (cid:19)NC, EC(cid:20) is the credential graph for C.
Let A.r be any role and B any entity. Then we have the
following:
1. B ∈ SC(A.r) if and only if there exists a conﬂuent path
∗→ A.r in GC.
B
if there exists a backward traversable path B
GC.
2. If A.r is issuer-traces-all, then B ∈ SC(A.r) if and only
∗→ A.r in
3. If A.r is subject-traces-all, then B ∈ SC(A.r) if and
∗→ A.r
only if there exists a forward traversable path B
in GC.
Using a typing scheme such as the one presented here can
also help improve the eﬃciency of centralized search, where
type information can help choose nodes to be explored next.
4.4 Agreeing on Types and Role Meanings
Our type system begs the following question: How can
entities agree on the type of a role name? This is the prob-
lem of establishing a common ontology (vocabulary), and it
arises for RT0 whether or not typing is introduced. Consider
again the credentials in example 3. Given StateU.stuID←−
Alice, how does EPub know what StateU means by stuID?
Is it issued to students registered in any class, or only to
students enrolled in a degree program. This issue arises
in all trust-management systems. Diﬀerent entities need a
common ontology before they can use each others’ creden-
tials. However, name agreement is particularly critical in
systems, like RT0, that support linked roles. For instance,
the expression EOrg.university.stuID only makes sense when
univeristies use stuID for the same purpose.
We achieve name agreement through a scheme inspired by
XML namespaces [7]. One creates what we call application
domain speciﬁcation documents (ADSD), deﬁning a suite of
related role names. An ADSD gives the types of the role
names it deﬁnes, as well as natural-language explanations
of these role names, including the conditions under which
credentials deﬁning these role names should be issued. Cre-
dentials contain a preamble in which namespace identiﬁers
are deﬁned to refer to a particular ADSD, e.g., by giving
its URI. Each use of a role name inside the credential then
incorporates such a namespace identiﬁer as a preﬁx. Thus,
a relatively short role name speciﬁes a globally unique role
name. Each ADSD deﬁnes a namespace. Note that this is a
diﬀerent level of namespaces from the notion of namespaces
in SDSI. The latter concerns itself with who has the au-
thority to deﬁne the members of a role; the former is about
establishing common understandings of role names.
5. FUTURE AND RELATED WORK
In this section, we illustrate brieﬂy the next step in our
role-based trust-management language work. We then dis-
cuss other future directions and related work.
As mentioned in section 2, RT0 is the ﬁrst step in a series
of role-based trust-management languages. We are extend-
ing the algorithms presented here to RT1, where role names
are terms with internal structure, including logical variables
(whose notation starts with “?”, as in ?ﬁle). For example,
the credential OS.ﬁleop(delete, ?ﬁle) ←− OS.owner(?ﬁle) can
be used to express the policy that the operating system will
let a ﬁle’s owner delete the ﬁle. We are also working on
deﬁning an XML representation for RT1 credentials and ap-
plication domain speciﬁcation documents, as we discussed
in section 4.4. RT1 will be reported in a forthcoming paper.
5.1 Typing and Complete Information
Inferencing based on distributed credentials is often lim-
ited by not knowing whether all relevant credentials are
present. The standard solution to this problem is to limit the
system to monotonic inference rules. This approach ensures
that, even without access to all credentials, if the credentials
that are present indicate D is a member of A.r, it is certainly
true. Missing credentials could make you unable to prove D
is a member of A.r, but cannot lead you to conclude D is a
member of A.r erroneously.
When credentials are well-typed, as deﬁned here, this re-
striction to monotonic inference rules could be relaxed. The
type system ensures we know who to contact to request the
relevant credentials. So assuming they respond and we trust
that they give us the credentials we ask for, we can assume
that we obtain all the credentials that are relevant. In this
context, it may be safe to use non-monotonic inference rules.
This would allow, for instance, granting role membership
contingent on not already being a member of another role.
This could form a basis for supporting RBAC-style sepa-
ration of duties, as well as negation as failure.
It will be
necessary to manage the trust issue. For instance, we may
trust that some issuers will give us all relevant credentials,
while not trusting some subjects to do the same.
5.2 Credential Sensitivity
Like most prior trust-management work, we assume here
that credentials are freely available to the agent responsi-
ble for making access control decisions. In general, creden-
tials may themselves be sensitive resources. Techniques have
been introduced [18] that support credential exchange in a
context where trust management is applied to credentials,
as well as to more typical resources. (See [19] for additional
references.) That work assumes that credential storage is
centralized in two locations: with the resource requester and
with the access mediator. It remains open to manage dis-
closure of sensitive credentials whose storage is distributed
among the credential issuers and subjects.
1645.3 Other Related Work
In section 2.1, we compared RT0 credentials with name
deﬁnition certiﬁcates in SDSI 2.0. In section 3.1 we reviewed
existing work to chain discovery in SDSI. Now, we discuss
some other related work.
QCM (Query Certiﬁcate Managers) [12] and QCM’s vari-
ation SD3 [13] also address distributed credential discovery.
The approach in QCM and SD3 assumes that issuer stores
all credentials and every query is answered by doing back-
ward searching. As we discussed in the introduction, this is
impractical for many applications, including the one illus-
trated in example 3. Using backward search to determine
whether Alice should get the discount requires one to begin
by ﬁnding all ACM members and all university students.
Graph-based approaches to chain discovery have been used
before, e.g., by Aura [1] for SPKI delegation certiﬁcates and
by Clarke et al. [8] for SDSI name certiﬁcates without linked
names. Neither of them deals with linked names.
6. CONCLUSIONS
We have introduced a role-based trust-management lan-
guage RT0 and a set-theoretic semantics for it. We have also
introduced credential graphs as a searchable representation
of credentials in RT0 and have proven that reachability in
credential graphs is sound and complete with respect to the
semantics of RT0. Based on credential graphs, we have given
goal-oriented algorithms to do credential chain discovery in
RT0. Because RT0 is more expressive than SDSI, our algo-
rithms can be used for chain discovery in SDSI, where exist-
ing algorithms in the literature either are not goal-oriented
or require using specialized logic programming inferencing
engines. Because our algorithms are goal-oriented, they can
be used whether or not credentials are stored centrally. We
have also introduced a type system for credential storage
that guarantees distributed, well-typed credential chains can
be discovered. This typing approach can be used for other
trust-management systems as well.
7. ACKNOWLEDGEMENT
This work is supported by DARPA through AFRL/IF
contract F30602-97-C-0336 and SPAWAR contracts N66001-
00-C-8015 and N66001-01-C-8005. Sameer Ajmani made
some helpful comments on an earlier version of this paper.
We also thank anonymous reviewers for their helpful reports.
8. REFERENCES
[1] Tuomas Aura. Fast Access Control Decisions from
Delegation Certiﬁcate Databases. In Proceedings of 3rd
Australasian Conference on Information Security and
Privacy (ACISP ’98), volume 1438 of Lecture Note in
Computer Science, pages 284–295. Springer, 1998.
International Conference on Financial Cryptography
(FC’98), volume 1465 of Lecture Note in Computer
Science, pages 254–274. Springer, 1998.
[5] Sharon Boeyen, Tim Howes, and Patrick Richard.
Internet X.509 Public Key Infrastructure LDAPc2
Schema. IETF RFC 2587, June 1999.
[6] Piero Bonatti and Pierangela Samarati. Regulating
service access and information release on the web. In
Proceedings of the 7th ACM Computer and
Communication Security, pages 134–143, 2000.
[7] Tim Bray, Dave Hollander, and Andrew Layman.
Namespaces in XML. W3C Recommendation, January
1999. http://www.w3.org/TR/REC-xml-names/.
[8] Dwaine Clarke, Jean-Emile Elien, Carl Ellison, Matt
Fredette, Alexander Morcos, and Ronald L. Rivest.
Certiﬁcate Chain Discovery in SPKI/SDSI.
Manuscript submitted to Journal of Computer
Security, December 2000. Available from
http://theory.lcs.mit.edu/˜rivest/publications.html.
[9] Yassir Elley, Anne Anderson, Steve Hanna, Sean
Mullan, Radia Perlman, and Seth Proctor. Building
Certiﬁcate Paths: Forward vs. Reverse. In Proceedings
of the 2001 Network and Distributed System Security
Symposium (NDSS’01), pages 153–160. Internet
Society, 2001.
[10] Carl Ellison, Bill Frantz, Butler Lampson, Ron Rivest,
Brian Thomas, and Tatu Ylonen. SPKI Certiﬁcate
Theory. IETF RFC 2693, September 1999.
[11] Carl Ellison, Bill Frantz, Butler Lampson, Ron Rivest,
Brian Thomas, and Tatu Ylonen. Simple Public Key
Certiﬁcates. Internet Draft (Work in Progress), July
1999. http://world.std.com/˜cme/spki.txt.
[12] Carl A. Gunter and Trevor Jim. Policy-directed
certiﬁcate retrieval. Software: Practice & Experience,
30(15):1609–1640, September 2000.
[13] Trevor Jim. SD3: a trust management system with
certiﬁcate evaluation. In Proceedings of the 2001 IEEE
Symposium on Security and Privacy, pages 106–115.
IEEE Computer Society Press, 2001.
[14] Ninghui Li. Local Names in SPKI/SDSI. In
Proceedings of the 13th IEEE Computer Security
Foundations Workshop (CSFW-13), pages 2–15. IEEE
Computer Society Press, 2000.
[15] Ninghui Li, Benjamin N. Grosof, and Joan
Feigenbaum. A Practically Implementable and
Tractable Delegation Logic. In Proceedings of the 2000
IEEE Symposium on Security and Privacy, pages
27–42. IEEE Computer Society Press, 2000.
[16] Ravi S. Sandhu, Edward J. Coyne, Hal L. Feinstein,
and Charles E. Youman. Role-Based Access Control
Models. IEEE Computer, 29(2):38–47, February 1996.
[2] Matt Blaze, Joan Feigenbaum, John Ioannidis, and
[17] David S. Warren and et al. The XSB Programming
Angelos D. Keromytis. The KeyNote
Trust-Management System, Version 2. IETF RFC
2704, September 1999.
[3] Matt Blaze, Joan Feigenbaum, and Jack Lacy.
Decentralized Trust Management. In Proceedings of
the 1996 IEEE Symposium on Security and Privacy,
pages 164–173. IEEE Computer Society Press, 1996.
[4] Matt Blaze, Joan Feigenbaum, and Martin Strauss.
Compliance-Checking in the PolicyMaker Trust
Management System. In Proceedings of Second
System (Version 2.2), April 2000.
http://www.cs.sunysb.edu/˜sbprolog/xsb-page.html.
[18] William H. Winsborough, Kent E. Seamons, and
Vicki E. Jones. Automated Trust Negotiation. In
DARPA Information Survivability Conference and
Exposition. IEEE Press, January 2000.
[19] T. Yu, M. Winslett, and K. E. Seamons. Interoperable
strategies in automated trust negotiation. In ACM
Conference on Computer and Communications
Security, 2001.
165