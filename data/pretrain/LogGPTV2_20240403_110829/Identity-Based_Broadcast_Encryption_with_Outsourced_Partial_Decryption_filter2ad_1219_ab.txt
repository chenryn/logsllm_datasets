list RL as well as a time period t, is executed as follows. It ﬁrst sets X := Y := ∅.
For each (ηi, ti) ∈ RL, if ti (cid:54) t then it adds Path(ηi) to X as: X := X∪Path(ηi).
Then, for each x ∈ X, it will add xL to Y for the case xL /∈ X, and it will add
xR to Y for the case xR /∈ X. Finally, it will output Y if Y (cid:54)= ∅. Otherwise, for
the case Y = ∅, it will output Y = {root}.
7
Note that the output of KUNode algorithm Y is a minimal set of nodes in BT
such that for any leaf node η listed in RL, it must hold that Path(η) ∩ Y = ∅.
But for the non-revoked leaf node η(cid:48), there is exactly one node θ ∈ Y such that
θ is an ancestor of η(cid:48). Two instances of the KUNode algorithm for the graphical
description are illustrated below in Figure 1.
Fig. 1. Two instances of the KUNode algorithm
2.3 Syntax of Revocable IBBE Scheme
A revocable IBBE scheme RIBBE is described as follows: For simplicity, we
omit the description of the security parameter λ and the public parameter P P
in the input of all algorithms except for the Setup algorithm.
– Setup(λ, m, N ): The setup algorithm takes as input the security parameter
λ, the maximum size m of the set of privileged identities for one encryption
together with the number of users N , and it returns the public parameters
P P , the master secret key M SK, the initial revocation list RL = ∅ and a
state ST . The algorithm also deﬁnes the identity space ID, the time space
T and the key space K for the DEM.
– SKGen(M SK, ID, ST ): The secret key generation algorithm takes as input
the master secret key M SK, an identity ID ∈ ID, and the state information
ST . It outputs a private key SKID associated with ID and updated ST .
– KeyUp(M SK, T, RL, ST ): The key update generation algorithm takes as
input the master secret key M SK, a key update time T ∈ T , the revocation
list RL and the state ST , and then outputs the update key KUT .
– DKGen(SKID, KUT ): The decryption key generation algorithm takes a
secret key SKID and key update KUT as input, and outputs a decryption
key DKID,T or a symbol ⊥ indicating that ID has been revoked by time T .
– Encap(T, S): The encapsulation algorithm takes as input the current time
T ∈ T and a set of identities S = {ID1, ..., IDn} with n ≤ m, and it returns
8
a pair (Hdr, K), where Hdr is called the header and K ∈ K is the session
key for the symmetric encryption scheme.
When a message M ∈ {0, 1}∗ is broadcasted to receivers in S, the sender
can compute the encryption CM of M under the symmetric key K ∈ K of
DEM and broadcasts (T, S, Hdr, CM ). We will refer to (T, S, Hdr) as the
full header and CM as the broadcast body.
– Decap(T, S, Hdr, DKID,T ): This algorithm takes as input the full header
(T, S, Hdr) with a set of identities S = {ID1, ..., IDn} (satisfying that n ≤
m), a decryption key DKID,T (cid:54)= ⊥ corresponding an identity ID and time
T . If ID ∈ S the algorithm outputs the session key K which is then used to
decrypt the broadcast body CM to obtain the original message M .
– Revoke(ID, T, RL, ST ): The stateful revocation algorithm takes an identity
to be revoked ID∈ID, a revocation time T ∈T , the current revocation list
RL and the state ST as input, and outputs an updated revocation list RL.
Correctness. The correctness property requires that for all security parameter
λ ∈ N, all (P P, M SK) ← Setup(λ, m, N ), all possible state ST , a revocation
list RL and for all sets S ⊆ ID with |S| ≤ m, if ID ∈ S is not revoked on
the time T ∈T , then for (SKID, ST )← SKGen(M SK, ID, ST ), (KUT , ST )←
KeyU p(M SK,T,RL,ST), DKID,T←DKGen(SKID,KUT), (Hdr, K)←Encap(T,S),
it should be satisﬁed that: Decap(T, S, Hdr, DKID,T ) = K.
REMARK. Note that for m = 1, the above deﬁnition of revocable IBBE
scheme is equal to a revocable IBE system, as is used in [33,38].
2.4 Security Models
The security model of RIBE was ﬁrst introduced by Boldyreva et al. [6] and
it was reﬁned by Seo and Emura [33] by considering the realistic threat of de-
cryption key exposure. We deﬁne IND-CPA security of a revocable IBBE system
with decryption key exposure resistant, which is indistinguishable against cho-
sen plaintext attacks for adaptive adversary. We basically reﬁne the deﬁnition
of [33], by adding extra restrictions for the scenario of broadcast encryption.
We describe the security model using the following IND-CPA game between a
PPT adversary A and a challenger C.
Setup: The challenger C runs Setup(λ, m, N ) algorithm of the revocable
IBBE scheme RIBBE to get the public parameters P P , the master secret key
M SK, a revocation list RL and a state ST . C keeps M SK, RL, ST to itself and
gives P P to the adversary A.
Key Extraction Phase 1: The adversary A can make a polynomial number
of key extraction queries adaptively, which are processed as follows:
– If this is a private key query for an identity ID, then it gives the correspond-
ing private key SKID to A by running SKGen(M SK, ID, ST ) algorithm;
– If this is an update key query for the time T , then it gives the corresponding
update key KUT to A by running KeyUp(M SK, T, RL, ST ) algorithm;
– If this is a decryption key query for ID and T , then it gives the corresponding
decryption key DKID,T to A by running DKGen(SKID, KUT ) algorithm;
9
– If this is a revocation key query for an identity to be revoked ID and
a revocation time T , then it updates the revocation list RL by running
Revoke(ID, T, RL, ST ) algorithm with the following restriction: The revo-
cation query cannot be queried at a time period T if the update key query
for T was issued.
identity ID must be revoked at some time T ≤ T ∗;
We note that the update key query and the revocation query can be queried at
a time period which is later or equal to that of all previous queries, which means
they are requested in non-decreasing order of time. In addition, the decryption
key query cannot be queried at T before issuing T to the update key query.
Challenge: When A decides that phase 1 is over, a challenge time T ∗ and a
challenge privileged set S∗ = {ID1, ID2, ..., IDn} with n ≤ m are provided with
the following constraints:
– If a private key query for an identity ID ∈ S∗ has been requested, then this
– There is no decryption key query for any ID in S∗ and T ∗ has been requested.
C runs Encap algorithm to obtain (Hdr, K0) = Encap(S∗, T ∗) and choose a
random K1 from the key space K. C then picks a random coin β ∈ {0, 1} and
returns (Hdr, Kβ) to A.
Key Extraction Phase 2: The adversary A can continue to issue a poly-
nomial number of additional key extraction queries as phase 1 with the same
constraints, C will respond as before.
Guess: Eventually, the adversary A outputs a guess β(cid:48) ∈ {0, 1}, and wins
the game if β(cid:48) = β.
A,RIBBE =|Pr(β(cid:48) = β) − 1/2| be the
Deﬁnition 3. (Adaptive Security) Let AdvIND-CPA
advantage for A in winning the IND-CPA game deﬁned above. We say that a
revocable IBBE scheme is adaptively secure under chosen plaintext attacks if for
all polynomial-time adversary A, the advantage in winning the above experiment
AdvIND-CPA
A,RIBBE is negligible with respect to the security parameter λ.
This security model above can capture realistic threat of decryption key
exposure, as the adversary can make decryption key queries. This model reﬂects
the scenario where all users get together and collude as in ordinary IBBE, since
the adversary can get any user’s private key except for S∗. Furthermore, even
users in S∗ can be corrupted, as long as they are revoked before the challenge
time T ∗. This is called adaptive security as the privileged set S∗ is not chosen
at the beginning. We can also deﬁne the selective security that is weaker than
adaptive security similarly, except that the challenge S∗ and T ∗ must be declared
by the adversary before it sees the public parameters. In addition, we can deﬁne
the semi-adaptive security that lies between selective and adaptive security.
Deﬁnition 4. (Selective Security) The selective security of revocable IBBE un-
der chosen plaintext attacks is similar to the adaptive security except that the
adversary A should submit a challenge set S∗ and challenge time T ∗ before
it receives the public parameters. The advantage is deﬁned as AdvsIND-CPA
A,RIBBE =
10
|Pr(β(cid:48) = β) − 1/2|. We say that a revocable IBBE scheme is secure under cho-
sen plaintext attacks in the selective model if for all polynomial-time adversary
A, the advantage in winning the above experiment AdvsIND-CPA
A,RIBBE is negligible with
respect to the security parameter λ.
Deﬁnition 5. (Semi-adaptive Security) The semi-adaptive security of revocable
IBBE under chosen plaintext attacks is similar to the adaptive security except
that the adversary A should submit a challenge set S∗ after it receives the public
parameters but before it makes any key extracton query. The advantage is deﬁned
A,RIBBE =|Pr(β(cid:48) = β) − 1/2|. We say that a revocable IBBE scheme is
as AdvsaIND-CPA
semi-adaptively secure under chosen plaintext attacks if for all polynomial-time
adversary A, the advantage in winning the above experiment AdvsaIND-CPA
is
A,RIBBE
negligible with respect to the security parameter λ.
3 The Basic IBBE Scheme
We now present our construction of identity-based broadcast encryption scheme
with short ciphertexts. The core of our construction relies on realizing the in-
clusion relationship between one identity and a subset of identities from inner
product. Note that the technique of deriving an IBBE scheme from the inner pro-
duction encryption can be traced to the work of Katz et al. [18]. For each identity
ID ∈ Zp, we can express it by setting a vector x = (x0, x1,··· , xm), where xi =
we can deﬁne a vector y = (y0, y1,··· , ym), where PS[Z] =(cid:81)
IDi mod p for i = 0, 1, ..., m. For a subset S = {ID1, ID2, ..., IDn} with n (cid:54) m,
(cid:80)n
IDj∈S (Z − IDj) =
verify that PS[ID] =(cid:80)m
i=0 yiZ i. If n  2λ with two random generators g1 ∈ G1 and g2 ∈ G2. Le m be the
maximum size of the legitimate set for one encryption, two random (m + 1)-
dimensional vectors are chosen from Zp with u1 = (u1,0, u1,1,··· , u1,m),
u2 = (u2,0, u2,1,··· , u2,m). Choose α1, α2, w1, w2
p, set
R←− Zp, b, β R←− Z∗
11
2
).
2
2
2
2
2
)(ID)i
, gβα2
2
, g1/β
2
/(gu2,0
2 )r, K3 = gr
· (gw2
)(ID)i
)r, K5,i = ((gw2
2. For i = 1, 2, ..., m:
u = u1 + bu2 = (u0, u1,··· , um), w = w1 + bw2, α = α1 + bα2, and compute
2 , gα2
U 1 = gu
2 ),
and the public parameter P P is deﬁned to be:
2 , gw2
P P = (g1, gb
1 , gT = e(g1, g2)α. The master key is M SK = (gα1
1, U 1, W1, gT , g2, gu1
1 , W1 = gw
1 , gβα1
2 , gβα
2 , gw1
2 , gu2
2 )ktagi·gu2,i
i=1} is deﬁned to be:
· (gw1
2 )ktagi·gu1,i
2 )r, K2 = gα2
/(gu1,0
IDj∈S (Z − IDj) =(cid:80)n
– KeyGen(P P, M SK, ID): For a user with an identity ID ∈ Zp, this al-
R←− Zp. The
(y0, y1,··· , ym) as the coeﬃcient from PS[Z] =(cid:81)
gorithm chooses r R←− Zp and random tags ktag1,··· , ktagm
private key SKID = {K1, K2, K3, (K4,i, K5,i, ktagi)m
K1 = gα1
2
K4,i = ((gw1
)r.
– Encap(P P, S): Assuming that the privileged set is S = {ID1, ID2, ..., IDn}
with n (cid:54) m for notational simplicity. The algorithm deﬁnes a vector y =
i=0 yiZ i.
It then picks randomly s, ctag ∈ Zp, and computes the session key K = gT
s
which is used to encrypt the message, together with the header Hdr =
1 )yi )s.
(C1, C2, C3, ctag), where C1 = gs
– Decap(P P,S,Hdr,SKID): The algorithm deﬁnes the vector y = (y0,y1,···,ym)
according to the set S from the polynomial PS[Z] as above. It then computes
i=1 yi·ktagi. If ktag = ctag, the output is ⊥. Otherwise it computes:
ktag−ctag , and returns
ktag =(cid:80)m
A = (e(C1,(cid:81)m
CORRECTNESS . We observe that if ID∈ S, we have (cid:104)x, y(cid:105) =(cid:80)m
and y0 = −(cid:80)m
i=0 yi(ID)i = 0,
(cid:89)m
i=1 yiktagi ·(cid:89)m
(cid:80)m
(cid:80)m
(cid:80)m
(cid:80)m
4,i = ((gw1
2 )
(cid:89)m
· g
(cid:80)m
i=0 yiu1,i
i=1 yiktagi
(cid:89)m
(cid:89)m
5,i = (gw2·ktag
· g
K yi
(cid:89)m
(cid:89)m
4,i)e(C2,
(cid:89)m
(cid:80)m
yi/
(gu1,i
)
)r = (gw1·ktag
· g
the session key: K = e(C1, K1) · e(C2, K2) · A−1.
1, gr(w·ktag+(cid:80)m
5,i) · e(C3, K3)−1)
K yi
4,i) · e(C2,(cid:81)m
i=1 yi(ID)i. Then we have:
1)s, C3 = (W ctag
·(cid:81)n
5,i)/e(C3, K3))
i=1
= (gw1
2
K yi
5,i) = e(gs
1, C2 = (gb
i=1 K yi
i=1 K yi
i=0 (gui
1, grw
2 );
i=1 yi(ID)i
(gu1,0
2
i=0 yiu2,i
i=0 yiu1,i
i=0 yiui)
);
i=1
2
e(C1,
2
)r;
2
2
K yi
i=1
)
)r;
i=1
2
1
1
i=1
2
)r
K yi
i=1
2
K yi
i=1
4,i)e(C2,
A = (e(C1,
K = e(C1, K1)e(C2, K2)A−1 = e(gs
= e(gs
2 ) = e(gs
2 )e((gb
1)s, gα2
1, gα1
i=1
2
1, gα1+rw1