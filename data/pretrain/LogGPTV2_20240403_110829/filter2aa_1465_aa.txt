Go With the Flow: Enforcing Program Behavior
Through Syscall Sequences and Origins
Claudio Canella
PI:EMAIL
Abstract
As the number of vulnerabilities continues to increase every year, we require
more and more methods of constraining the applications that run on our sys-
tems. Control-Flow Integrity [1] (CFI) is a concept that constrains an applica-
tion by limiting the possible control-ﬂow transfers it can perform, i.e., control
ﬂow can only be re-directed to a set of previously determined locations within
the application. However, CFI only applies within the same security domain,
i.e., only within kernel or userspace. Linux seccomp [4], on the other hand,
restricts an application’s access to the syscall interface exposed by the operat-
ing system. However, seccomp can only restrict access based on the requested
syscall, but not whether it is allowed in the context of the previous one.
This talk presents our concept of syscall-ﬂow-integrity protection (SFIP),
which addresses these shortcomings. SFIP is built upon three pillars: a state
machine representing valid transitions between syscalls, a syscall-origin map
that identiﬁes locations from where each syscall can originate, and the sub-
sequent enforcement by the kernel.
We discuss these three pillars and how
our automated toolchain extracts the necessary information. Finally, we evalu-
ate the performance and security of SFIP. For the performance evaluation, we
demonstrate that SFIP only has a marginal runtime overhead of less than 2 %
in long-running applications like nginx or memcached. In the security evalu-
ation, we ﬁrst discuss the provided security of the ﬁrst pillar, i.e., the syscall
state machine. We show that SFIP reduces the number of possible syscall tran-
sitions signiﬁcantly compared to Linux seccomp.. In nginx, each syscall can,
on average, reach 39 % fewer syscalls than with seccomp-based protection. We
also evaluate the provided security of the second pillar, i.e., the syscall-origin
map. By enforcing the syscall origin, we eliminate shellcode entirely while con-
straining syscalls executed during a Return-Oriented Programming attack to
legitimate locations.
1
Overview
This whitepaper covers our talk’s topics and provides technical background.
The whitepaper is a pre-print of our paper “SFIP: Coarse-Grained Syscall-Flow-
Integrity Protection in Modern Systems” [2]. It presents our talk’s content in
more detail, such as the three pillars of SFIP and the challenges in automatically
extracting the required information. It also provides detailed information on
how our implementation solves these challenges in our public proof-of-concept [3]
as well as a more detailed evaluation. We also discuss how such systems can be
further improved by extracting thread- or signal-speciﬁc syscall transitions and
outlines the idea for a more ﬁne-grained construction of the syscall transitions.
The main takeaways of both the talk and the whitepaper are as follows.
1. Protecting the syscall interface is important for security and requires more
sophisticated approaches than currently available.
2. Automatically extracting the necessary information is challenging but fea-
sible.
3. Enforcing the extracted information can be done with a minimal runtime
overhead while signiﬁcantly reducing the number of syscall transitions and
origins.
References
[1] Abadi, M., Budiu, M., Erlingsson, U., and Ligatti, J. Control-Flow
Integrity. In CCS (2005).
[2] Canella, C., Dorn, S., Gruss, D., and Schwarz, M.
SFIP:
Coarse-Grained Syscall-Flow-Integrity Protection in Modern Systems.
arXiv:2202.13716 (2022).
[3] Canella, C., Dorn, S., and Schwarz, M.
SFIP/SFIP, https://
github.com/SFIP/SFIP 2022.
[4] Edge, J. A seccomp overview, https://lwn.net/Articles/656307/ 2015.
SFIP: Coarse-Grained Syscall-Flow-Integrity Protection in Modern
Systems
Abstract
Control-Flow Integrity (CFI) is one promising mitiga-
tion that is more and more widely deployed and prevents
numerous exploits. However, CFI focuses purely on one
security domain, and transitions between user space and
kernel space are not protected. Furthermore, if user-
space CFI is bypassed, the system and kernel interfaces
remain unprotected, and an attacker can run arbitrary
transitions.
In this paper, we introduce the concept of syscall-ﬂow-
integrity protection (SFIP) that complements the concept
of CFI with integrity for user-kernel transitions. Our
proof-of-concept implementation relies on static analy-
sis during compilation to automatically extract possible
syscall transitions. An application can opt-in to SFIP
by providing the extracted information to the kernel for
runtime enforcement. The concept is built on three fully-
automated pillars: First, a syscall state machine, repre-
senting possible transitions according to a syscall digraph
model. Second, a syscall-origin mapping, which maps
syscalls to the locations at which they can occur. Third,
an efﬁcient enforcement of syscall-ﬂow integrity in a mod-
iﬁed Linux kernel. In our evaluation, we show that SFIP
can be applied to large scale applications with minimal
slowdowns. In a micro- and a macrobenchmark, it only
introduces an overhead of 13.1 % and 7.4 %, respectively.
In terms of security, we discuss and demonstrate its ef-
fectiveness in preventing control-ﬂow-hijacking attacks
in real-world applications. Finally, to highlight the re-
duction in attack surface, we perform an analysis of the
state machines and syscall-origin mappings of several
real-world applications. On average, SFIP decreases the
number of possible transitions by 41.5 % compared to
seccomp and 91.3 % when no protection is applied.
1. Introduction
Vulnerablities in applications can be exploited by an at-
tacker to gain arbitrary code execution within the applica-
tion [62]. Subsequently, the attacker can exploit further
vulnerabilities in the underlying system to elevate priv-
ileges [37]. Such attacks can be mitigated in either of
these two stages: the stage where the attacker takes over
control of a victim application [62, 13], or the stage where
the attacker exploits a bug in the system to elevate privi-
leges [36, 38]. Researchers and industry have focused on
eliminating the ﬁrst stage, where an attacker takes over
control of a victim application, by reducing the density
of vulnerabilities in software, e.g., by enforcing memory
safety [62, 13]. The second line of defense, protecting the
system, has also been studied extensively [36, 38, 22, 61].
For instance, sandboxing is a technique that tries to limit
the available resources of an application, reducing the
remaining attack surface. Ideally, an application only has
the bare minimum of resources, e.g., syscalls, that are
required to work correctly.
Control-ﬂow integrity [1] (CFI) is a mitigation that
limits control-ﬂow transfers within an application to a set
of pre-determined locations. While CFI has demonstrated
that it can prevent attacks, it is not infallible [29]. Once
it has been circumvented, the underlying system and its
interfaces are once again exposed to an attacker as CFI
does not apply protection across security domains.
In the early 2000s, Wagner and Dean [65] proposed an
automatic, static analysis approach that generates syscall
digraphs, i.e., a k-sequence [19] of consecutive syscalls of
length 2. A runtime monitor validates whether a transition
is possible from the previous syscall to the current one
and raises an alarm if it is not. The Secure Computing
interface of Linux [18], seccomp, simpliﬁes the concept
by only validating whether a syscall is allowed, but not
whether it is allowed in the context of the previous one.
Recent work has explored hardware support for Linux
seccomp to improve its performance [60]. In contrast
to the work by Wagner and Dean [65] and other intru-
sion detection systems [21, 25, 32, 34, 44, 68, 47, 63, 69],
seccomp acts as an enforcement tool instead of a simple
monitoring system. Hence, false positives are not accept-
able as they would terminate a benign application. Thus,
we ask the following questions in this paper:
Can the concept of CFI be applied to the user-kernel
boundary? Can prior syscall-transition-based intrusion
detection models, e.g., digraph models [65], be trans-
formed into an enforcement mechanism without breaking
modern applications?
In this paper, we answer both questions in the afﬁrma-
tive. We introduce the concept of syscall-ﬂow-integrity
protection (SFIP), complementing the concept of CFI
with integrity for user-kernel transitions. Our proof-of-
concept implementation relies on static analysis during
compilation to automatically extract possible syscall tran-
sitions. An application can opt-in to SFIP by providing
the extracted information to the kernel for runtime en-
forcement. SFIP builds on three fully-automated pillars,
a syscall state machine, a syscall-origin mapping, and an
efﬁcient SFIP enforcement in the kernel.
The syscall state machine represents possible transi-
tions according to a syscall digraph model. In contrast to
Wagner and Dean’s [65] runtime monitor, we rely on an
efﬁcient state machine expressed as an N ×N matrix (N
is the number of provided syscalls), that scales even to
large and complex applications. We provide a compiler-
based proof-of-concept implementation, called SysFlow1,
that generates such a state machine instead of individ-
ual sets of k-sequences. For every available syscall, the
state machine indicates to which other syscalls a tran-
sition is possible. Our syscall state machine (i.e., the
modiﬁed digraph) has several advantages including faster
lookups (O(1) instead of O(M) with M being the number
of possible k-sequences), easier construction, and less and
constant memory overhead.
The syscall-origin mapping maps syscalls to the lo-
cations at which they can occur. Syscall instructions in a
program may be used to perform different syscalls, i.e.,
a bijective mapping between code location and syscall
number is not guaranteed. We resolve the challenge of
these non-bijective mappings with a mechanism propagat-
ing syscall information from the compiler frontend and
backend to the linker, enabling the precise enforcement
of syscalls and their origin. During the state transition
check, we additionally check whether the current syscall
originates from a location at which it is allowed to occur.
For this purpose, we extend our syscall state machine
with a syscall-origin mapping that can be bijective or
non-bijective, which we extract from the program. Conse-
quently, our approach eliminates syscall-based shellcode
attacks and imposes additional constraints on the con-
struction of ROP chains.
The efﬁcient enforcement of syscall-ﬂow integrity is
implemented in the Linux kernel. Instead of detection,
i.e., logging the intrusion and notifying a user as is the
common task for intrusion detection systems [39], we
focus on enforcement. Our proof-of-concept implemen-
tation places the syscall state machine and non-bijective
syscall-origin mapping inside the Linux kernel. This puts
our enforcement on the same level as seccomp, which
is also used to enforce the correct behavior of an appli-
cation. However, detecting the set of allowed syscalls
for seccomp is easier. As such, our enforcement is an
additional technique to sandbox an application, automati-
1https://github.com/SFIP/SFIP
cally limiting the post-exploitation impact of attacks. We
refer to our enforcement as coarse-grained syscall-ﬂow-
integrity protection, effectively emulating the concept of
control-ﬂow integrity on the syscall level.
We evaluate the performance of SFIP based on our ref-
erence implementation. In a microbenchmark, we only
observe an overhead on the syscall execution of up to
13.1 %, outperforming seccomp-based protections. In
real-world applications, we observe an average overhead
of 7.4 %. In long-running applications, such as ffmpeg,
nginx, and memcached, this overhead is even more neg-
ligible, with less than 1.8 % compared to an unprotected
version. We evaluate the one-time overhead of extracting
the information from a set of real-world applications. In
the worst case, we observe an increase in compilation
time by factor 28.
We evaluate the security of the concept of syscall-ﬂow-
integrity protection in a security analysis with special
focus on control-ﬂow hijacking attacks. We evaluate our
approach on real-world applications in terms of number of
states (i.e., syscalls with at least one outgoing transition),
number of average transitions per state, and other security-
relevant metrics. Based on this analysis, SFIP, on average,
decreases the number of possible transitions by 41.5 %
compared to seccomp and 91.3 % when no protection is
applied. Against control-ﬂow hijacking attacks, we ﬁnd
that in nginx, a speciﬁc syscall can, on average, only be
performed at the location of 3 syscall instructions instead
of in 318 locations. We conclude that syscall-ﬂow in-
tegrity increases system security substantially while only
introducing acceptable overheads.
To summarize, we make the following contributions:
1. We introduce the concept of (coarse-grained) syscall-
ﬂow-integrity protection (SFIP) to enforce legitimate
user-to-kernel transitions based on static analysis of
applications.
2. Our proof-of-concept SFIP implementation is based
on a syscall state machine and a mechanism to validate
a syscall’s origin.
3. We evaluate the security of SFIP quantitatively, show-
ing that the number of possible syscall transitions is
reduced by 91.3 % on average in a set of 8 real-world
applications, and qualitatively by analyzing the impli-
cations of SFIP on a real-world exploit.
4. We evaluate the performance of our SFIP proof-of-
concept implementation, showing an overhead of
13.1 % in a microbenchmark and 7.4 % in a mac-
robenchmark.
2. Background
2.1. Sandboxing
Sandboxing is a technique to constrain the resources of
an application to the absolute minimum necessary for an
application to still work correctly. For instance, a sandbox
might limit an application’s access to ﬁles, network, or
syscalls it can perform. A sandbox is often a last line
of defense in an already exploited application, trying to
limit the post-exploitation impact. Sandboxes are widely
deployed in various applications, including in mobile op-
erating systems [30, 3] and browsers [71, 54, 70]. Linux
also provides various methods for sandboxing, including
SELinux [72], AppArmor [4], or seccomp [18].
2.2. Digraph Model
The behavior of an application can be modeled by the
sequence of syscalls it performs. In intrusion detection
systems, windows of consecutive syscalls, so-called k-
sequences, have been used [19]. k-sequences of length
k = 2 are commonly referred to as digraphs [65]. A model
built upon these digraphs allows easier construction and
more efﬁcient checking while reducing the accuracy in
the detection [65] as only previous and current syscall are
considered.
2.3. Linux Seccomp
The syscall interface is a security-critical interface that the
Linux kernel exposes to userspace applications. Applica-
tions rely on syscalls to request the execution of privileged
tasks from the kernel. Hence, securing this interface is
crucial to improving the system’s overall security.
To better secure this interface, the kernel provides
Linux Secure Computing (seccomp). A benign appli-
cation ﬁrst creates a ﬁlter that contains all the syscalls it
intends to perform over its lifetime and then passes this
ﬁlter to the kernel. Upon a syscall, the kernel checks
whether the executed syscall is part of the set of syscalls
deﬁned in the ﬁlter and either allows or denies it. As such,
seccomp can be seen as a k-sequence of length 1. In addi-
tion to the syscall itself, seccomp can ﬁlter static syscall
arguments. Hence, seccomp is an essential technique to
limit the post-exploitation impact of an exploit, as unre-
stricted access to the syscall interface allows an attacker
to arbitrarily read, write, and execute ﬁles. An even worse
case is when the syscall interface itself is exploitable, as
this can lead to privilege escalation [37, 36, 38].
2.4. Runtime Attacks
One of the root causes for successful exploits are memory
safety violations. One typical variant of such a violation
are buffer overﬂows, enabling an attacker to modify the
application in a malicious way [62]. An attacker tries to
use such a buffer overﬂow to overwrite a code pointer,
such that the control ﬂow can be diverted to an attacker-
chosen location, e.g., to previously injected shellcode.
Attacks relying on shellcode have become harder to exe-
cute on modern systems due to data normally not being
executable [62, 49]. Therefore, attacks have to rely on
already present, executable code parts, so-called gadgets.
These gadgets are chained together to perform an arbi-
trary attacker-chosen task [51]. Shacham further general-
ized this attack technique as return-oriented programming
(ROP) [59]. Similar to control-ﬂow-hijacking attacks that
overwrite pointers [59, 11, 43, 29, 56], memory safety vi-
olations can also be abused in data-only attacks [55, 35].
2.5. Control-Flow Integrity
Control-ﬂow integrity [1] (CFI) is a concept that restricts
an application’s control ﬂow to valid execution traces, i.e.,
it restricts the targets of control-ﬂow transfer instructions.
This is enforced at runtime by comparing the current
state of the application to a set of pre-computed states.
Control-ﬂow transfers can be divided into forward-edge
and backward-edge transfers [7]. Forward-edge transfers
transfer control ﬂow to a new destination, such as the
target of an (indirect) jump or call. Backward-edge trans-
fers transfer the control ﬂow back to a location that was
previously used in a forward edge, e.g., a return from a
call. Furthermore, CFI can be subdivided into coarse-
grained and ﬁne-grained CFI. In contrast to ﬁne-grained
CFI, coarse-grained CFI allows for a more relaxed control-
ﬂow graph, allowing more targets than necessary [14].
3. Design of Syscall-Flow-Integrity Protec-
tion
3.1. Threat Model
SFIP is applied to a benign userspace application that
potentially contains a vulnerability allowing an attacker
to execute arbitrary code within the application. The
post-exploitation targets the operating system through the
syscall interface to gain kernel privileges. With SFIP, a
syscall is only allowed if the state machine contains a
valid transition from the previous syscall to the current
one and if it originates from a pre-determined location.
If either one is violated, the application is terminated by
the kernel. Similar to prior work [10, 24, 16, 23], our pro-
tection is orthogonal but fully compatible with defenses
such as CFI, ASLR, NX, or canary-based protections.
Therefore, the security it provides to the system remains
even if these other protections have been circumvented.
Side-channel and fault attacks [40, 73, 41, 46, 64, 57] on
the state machine or syscall-origin mapping are out of
scope.
3.2. High-Level Design
In this section, we discuss the high-level design be-
hind SFIP. Our approach is based on three pillars: a di-
graph model for syscall sequences, a per-syscall model of
syscall origin, and the strict enforcement of these models
(cf. Figure 1).
Source Code
L01 :
void foo ( int
bit ) {
L02 :