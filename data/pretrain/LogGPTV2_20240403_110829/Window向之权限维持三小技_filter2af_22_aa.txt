### Window向之权限维持三小技
## 0x0 前言
本文主要以简单、直接的代码方式向读者呈现了一些权限维持的功能代码方面的小技巧。这些小技巧也许很多人(Ex:myself)不知道，但又有可能对此实现有所需要。为了解决这个问题，笔者通过浏览一些资料结合自己的实践，初步整理出这三个功能小技巧，后续可用于穿插于Window权限维持的具体实现程序。
## 0x1 文件自删除
自删除有两个境界:
1.运行完删除自身文件。  
2.运行时删除自身文件(*),继续运行。
### 0x1.1 运行end
原理:
> 可执行文件进程新开一个cmd 进程执行del
> 删除可执行文件自身路径，这个执行成功的前提是，当执行command删除命令时，可执行文件进程要先结束，一般来说，可以通过挂起该cmd进程子线程，然后在可执行文件技术部分的最后加入唤醒操作，然后可执行文件进程迅速结束，因为唤醒+执行是慢于进程结束的时间的，一般都可以成功。
缺点:
> 1.编写复杂，行为可疑
>
> 2.通用性差，也不稳定
>
> 3.对红队来说，没啥意义，beacon本身就是loop状态的。
代码实现:
    #include 
    #include 
    int main()
    {
        // 1.Get current path
        wchar_t exePath[MAX_PATH] = { 0 };
        GetModuleFileName(NULL, exePath, MAX_PATH);
        // 2.Craft command
        wchar_t command[128] = { 0 };
        wsprintf(command, L"cmd /k del %s", exePath);
        printf("\nExecute Command:%ls\n", command);
        // 3.Suspend main thread of cmd process
        STARTUPINFO si = { sizeof(si) };
        PROCESS_INFORMATION pi;
        BOOL flag = CreateProcess(
            NULL,
            command,
            NULL,
            NULL,
            FALSE,
            CREATE_NO_WINDOW | CREATE_SUSPENDED,// key paramter
            NULL,
            NULL,
            &si,
            &pi);
        if (!flag) {
            printf("CreateProcess Error:%d\n", GetLastError());
            exit(0);
        }
        // 4.Optimize the execute moment
        SetPriorityClass(pi.hProcess, IDLE_PRIORITY_CLASS);        
        SetPriorityClass(GetCurrentProcess(), REALTIME_PRIORITY_CLASS);
        SetPriorityClass(GetCurrentThread(), THREAD_PRIORITY_TIME_CRITICAL);
        // 5.Wake up  thread
        if (!ResumeThread(pi.hThread))                               
        {
            printf("ResumeThread %d\n", GetLastError());
        }
        printf("%s\d", "Running Done! check condition by yourself!");
        //getchar();
    }
效果:
执行完毕，程序自动删除。
### 0x1.2 运行ing
下载文件测试工具filetest
[FileTest application](http://www.zezula.net/download/filetest.zip)
根据[@jonasLyk](https://twitter.com/jonasLyk) 的思路
1.With
delete权限打开运行中的文件，然后修改`FileRenameInformation`的重命名属性值为ADS流名称，这个方式能重命名执行中的文件。
2.重新打开文件，设置`FileDispositionInfo`文件属性`delete`为`true`,这样关闭文件句柄的时候就会自动删除该文件。
3.因为文件名称被修改，所以第二步能绕过锁定成功执行删除掉宿主文件，ADS流文件也会随之消失。
具体过程如图:[https://pbs.twimg.com/media/Er2W8NFXIAAWZ5a?format=png&name=4096x4096](https://pbs.twimg.com/media/Er2W8NFXIAAWZ5a?format=png&name=4096x4096)
* * *
代码参考:
简化了一些细节，封装为一个函数便以移植，代码实现:
    #pragma comment(lib, "Shlwapi.lib")
    #include 
    #include 
    #include 
    void autoDelete() {
        WCHAR wcPath[MAX_PATH];
        RtlSecureZeroMemory(wcPath, sizeof(wcPath));
        if (GetModuleFileNameW(NULL, wcPath, MAX_PATH) == 0) {
            return;
        };
        HANDLE hCurrent = CreateFileW(wcPath, DELETE, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
        if (hCurrent == INVALID_HANDLE_VALUE) {
            return;
        }
        // rename handle
        FILE_RENAME_INFO fRename;
        RtlSecureZeroMemory(&fRename, sizeof(fRename));
        LPWSTR lpwStream = (wchar_t*)L":wtforz";
        fRename.FileNameLength = sizeof(lpwStream);
        RtlCopyMemory(fRename.FileName, lpwStream, sizeof(lpwStream));
        BOOL  flag = SetFileInformationByHandle(hCurrent, FileRenameInfo, &fRename, sizeof(fRename) + sizeof(lpwStream));
        if (!flag) {
            return;
        }
        CloseHandle(hCurrent);
        hCurrent = CreateFileW(wcPath, DELETE, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
        if (hCurrent == INVALID_HANDLE_VALUE) {
            return;
        }
        // set FileDispositionInfo.delete attribute True
        FILE_DISPOSITION_INFO fDelete;
        RtlSecureZeroMemory(&fDelete, sizeof(fDelete));
        fDelete.DeleteFile = TRUE;
        BOOL _flag = SetFileInformationByHandle(hCurrent, FileDispositionInfo, &fDelete, sizeof(fDelete));
        if (!_flag) {
            return;
        }
        // delete file
        CloseHandle(hCurrent);
        if (!PathFileExists(wcPath)) {
    #ifdef _DEBUG
            printf("[LOG] - %ls\n", L"Success, Done!");
    #endif // DEBUG
            return;
        }
    }
    int wmain(int argc, wchar_t * argv)
    {
        autoDelete();
        getchar();
    }
编译的时候选择Debug模式，效果如下:
后面的`getchar()`一样会继续执行。
这种思路可以说很新颖，而且很有用，但是具体的原理，笔者也还尚未清楚，只是说这样测试能够达到预期效果，作为一个Script
Kid已经满足了。师傅们可以去尝试分析下window的锁定机制，然后找找其他方式来达到这种效果，或者分析下这种方式的缺点。
* * *
补充下这一点相关思路:
> C#版本的实现:
>
> GO的话建议封装成一个库，直接调用，ex: `winexe.delete()`
>
> 如果这个点有其他的实现方法，欢迎师傅们找我一起交流(学爆)。
## 0x2 互斥体
### 0x2.1 作用
创建互斥体的常见作用就是用于防止程序多开，很多程序都会有这个特点。
回到我们权限维持上面，加载器如果没做互斥体的话，那么单一进程可能会被循环启动，导致上线很多重复的Beacon，比如计划任务执行间隔短、用户多次点击,都会导致出现多个Beacon进程，这样会增加加载器的暴露概率。
### 0x2.2 API函数
使用互斥体，Window提供了两个API函数：
[CreateMutexA](https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-createmutexa)
> Creates or opens a named or unnamed mutex object.
>
> To specify an access mask for the object, use the
> [CreateMutexEx](https://docs.microsoft.com/en-> us/windows/desktop/api/synchapi/nf-synchapi-createmutexexa) function.
    HANDLE CreateMutexA(
      [in, optional] LPSECURITY_ATTRIBUTES lpMutexAttributes,
      [in]           BOOL                  bInitialOwner,
      [in, optional] LPCSTR                lpName
    );
用于创建或者打开一个命名/未命名的mutex对象，一般用法
    CreateMutex(NULL, False, "互斥体名称")
第一个参数`lpMutexAttributes` 为 NULL，则互斥对象将获得一个默认的安全描述符。互斥对象的默认安全描述符中的 acl
来自创建者的主令牌或模拟令牌。
第二个参数`bInitialOwner` 如果此值为
TRUE，且调用方创建了互斥对象，则调用线程获得互斥对象的初始所有权。否则，调用线程不会获得互斥对象的所有权。若要确定调用方是否创建了互斥对象，请参见
Return Values 部分。
第三个参数`lpName`，互斥对象的名称，名称比较区分大小写，名称可以有“ Global”或“
Local”前缀，以在全局或会话命名空间中显式创建对象。名称的其余部分可以包含除反斜杠字符()以外的任何字符。如果 lpName
匹配现有事件、信号量、可移植计时器、作业或文件映射对象的名称，则函数失败，GetLastError 函数返回 ERROR _invalid_
handle。这是因为这些对象共享相同的命名空间。
**Return Value**
如果函数成功，返回值是新创建的互斥对象的句柄。
如果函数失败，返回值为 NULL。要获得扩展的错误信息，调用 GetLastError。
[OpenMutexW](https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-openmutexw)
> Opens an existing named mutex object.
    HANDLE OpenMutexW(
      [in] DWORD   dwDesiredAccess,
      [in] BOOL    bInheritHandle,
      [in] LPCWSTR lpName
    );
用于打开一个已经存在已命名的互斥体对象，一般用法:
    HANDLE hMutex = OpenMutex(MUTEX_ALL_ACCESS, FALSE, "互斥体名称");
第一个参数`dwDesiredAccess` 进程访问权限
第二个参数`bInheritHandle` 如果此值为 TRUE，则此进程创建的进程将继承此句柄。否则，进程不会继承此句柄。
第三个参数`lpName`互斥对象的名称。名称比较区分大小写
**Return Value**
如果函数成功，返回值是互斥对象的句柄。
如果函数失败，返回值为 NULL。要获得扩展的错误信息，调用 GetLastError。
如果命名的互斥体不存在，则函数失败，GetLastError 返回 ERROR _file_ not _ found。
### 0x2.3 代码实现
封装为一个`checkMutex`的函数，当然这里互斥体的名称可以考虑作为参数来传递，名称可以考虑复杂和长点。
    #include 
    #include 
    // check mutex object status
    bool checkMutex() {
        HANDLE hMutex = OpenMutex(MUTEX_ALL_ACCESS, FALSE, "MyTestMutex");
        if (hMutex == NULL) {
            CreateMutex(NULL, FALSE, "MyTestMutex");
        }
        else {
    #ifdef _DEBUG
            MessageBox(NULL, "Program is already running", 0, 0);
    #endif // DEBUG
            exit(0);
        }
        return TRUE;
    }
    int wmain(int argc, wchar_t* argv) {
        checkMutex();
        printf("Program is running ......\n");