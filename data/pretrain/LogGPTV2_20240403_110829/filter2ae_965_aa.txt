### 优化后的文本

#### 引言
在最近对一个Web应用程序的测试过程中，我决定对内容管理系统（CMS）URI中的某些路径进行模糊测试（fuzzing）。在此过程中，我在CMS的一个插件中发现了潜在的服务器端模板注入（SSTI）漏洞，并成功利用它获取了非公开信息。本文旨在分享我是如何逐步分析并最终发现该漏洞的过程。

#### 介绍
这次SSTI是在最初的模糊测试中偶然发现的。通过触发特定的数学逻辑，我注意到输入被模板引擎处理后反映在响应头中的`canonicalURL`字段里。

**首先，什么是SSTI？**
服务端模板注入（Server-Side Template Injection, SSTI）是指用户输入的数据未经适当验证即被嵌入到服务器端模板中，导致这些数据被当作代码执行。当用户的自定义输入直接连接到模板中，并且此输入包含了可执行的模板表达式时，就可能引发此类问题。

对于不熟悉SSTI的人来说，强烈建议阅读James Kettle在Portswigger博客上发表的文章《Server Side Template Injection》以及他在BlackHat 2015上的演讲材料。这些资源不仅提供了对该漏洞类型的深入理解，还附带了适合打印的PDF版本和视频资料。

虽然我对SSTI的基本概念有所了解，但这是第一次在实际研究中遇到它。因此，我决定重新学习相关知识，并参考James的研究论文来加深理解。

#### 初步尝试
带着更新的知识库，我急于找到合适的攻击方法。最初，我试图使用名为TPLMAP的自动化工具一次性完成整个过程。然而，自动化的解决方案并未奏效，这促使我更深入地探究这个问题。

#### 从零开始
回到起点，我们已知可以向模板引擎注入任意内容，并观察其处理结果。根据响应头部的信息，可以确定目标网站运行于Craft CMS之上，尽管具体的版本号未泄露，但对于初学者来说，我们可以假设它是最新版，并基于此文档进行探索。Craft CMS使用Twig作为其PHP模板引擎之一，这也是James在其研究中所涵盖的内容之一。

全面了解文档将有助于我们更好地掌握CMS与模板引擎之间的交互方式及其架构特点。此外，检查目标系统是否存在旧版本或已知漏洞也十分重要。例如：

- [Craft CMS受服务器端模板注入影响](https://www.securify.nl/advisory/SFY20160608/craft-cms-affected-by-server-side-template-injection.html)
- [Craftcms Craft Cms：安全漏洞列表 - CVE详情](https://www.cvedetails.com/vulnerability-list/vendor_id-16372/product_id-37245/Craftcms-Craft-Cms.html)

根据现有信息，我发现了一个关键线索——依据James的研究成果，Twig的`_self.env`对象及其属性是实现远程代码执行（RCE）的关键所在。但在我的测试中却发现`_self`实际上是一个字符串而非预期的对象。进一步调查表明，这是因为Twig从v1升级到了v2，在新版本中取消了对`_self`的支持。这意味着我们需要寻找其他途径来利用这个注入点。

#### 发散思维，峰回路转
尽管目前没有针对Twig v2的具体漏洞利用技术可供参考，但我们仍然能够通过已发现的注入点与CMS组件互动。查阅Craft CMS官方文档后，我发现有许多有趣的功能、过滤器及方法可以从模板调用。特别是`craft.config.get()`方法引起了我的注意，因为它允许从配置文件中读取信息，而这正是之前一些Craft CMS漏洞案例中所使用的手段。

经过一番尝试，我成功地从数据库配置文件`db.php`中提取出了部分敏感数据。不过，由于框架内置的安全机制会将特殊字符转换为HTML实体编码形式，直接输出变得困难重重。面对这种情况，通常需要采用绕过过滤的方法。然而，在本例中，经过仔细分析后我认为改变策略更为明智。于是，我又回到了Craft文档中继续寻找灵感。

最终，在浏览`craft.request`相关功能时，我发现了一个非常有用的特性——获取客户端User-Agent字符串。这一发现为后续操作打开了新的大门。