本文翻译自：
在最近的Web应用程序测试期间，我决定对CMS的URI中的某些路径进行一些模糊测试(fuzzing)，并且碰巧在CMS的一个插件中找到了潜在的服务器端模板注入（SSTI）漏洞，然后我就能够成功利用它来获得非公开的信息。在这篇文章中，我想分享一下我如何通过分析思考一步步找到漏洞的。
## 介绍
这是我在最初的Fuzzing中偶然发现的SSTI。你可以看到我能够触发某种数学逻辑，它由服务器上的模板引擎处理，然后反映在canonicalURL中，它是响应中Link头的一部分：
**首先** ：什么是SSTI？服务端模板注入，Server Side Template
Injection简称SSTI。SSTI指的是用户输入的不安全内容嵌入到了模板中。大多数情况下，造成问题的原因时用户的自定义输入直接连接到模板中，并且此输入（本应是数据）包含了模板表达式，进而被服务器执行。
如果你不熟悉此类漏洞，请务必访问Portswigger博客并阅读James
Kettle撰写的[这篇文章](https://portswigger.net/blog/server-side-template-injection)（@albinowax）。你不会后悔，它是web应用安全话题的超级补充。他也提供了[适合打印的pdf版本](https://portswigger.net/kb/papers/serversidetemplateinjection.pdf)，并在BlackHat
2015（[PDF](https://www.blackhat.com/docs/us-15/materials/us-15-Kettle-Server-Side-Template-Injection-RCE-For-The-Modern-Web-App-wp.pdf)/[视频](https://youtu.be/3cT0uE7Y87s)）上发表。我已经了解了这个漏洞背后的基本概念，但对我而言，这是我第一次真正在实际研究中遇到它，所以我决定更新我的知识储备并阅读詹姆斯关于这个主题的论文。
在加深了对这种漏洞的理解之后，我急于找到正确的攻击方法，我的第一种方法是通过利用[名为TPLMAP的自动化exp工具](https://github.com/epinna/tplmap)试图一步到位。
（不）幸运的是，无脑的自动化武器并不成功，我被迫彻底地研究这个让我后来真正学到一些新东西的题目：
> TPLMAP不顶事
## 从零开始
好吧，脚本小子一头撞上了南墙。让我带你开始探索问题的旅程。首先：我们退回原点，通过尽可能地拆解已知的事实信息来评估情况。
我们确信我们可以注入任意内容并交由模板引擎处理。并根据header中给出的响应，我们可以推出该网站在Craft
CMS上运行（
> Header Responses
不幸的是它没有泄漏确切的版本号，但对于初学者我们可以简单地尝试利用最新的文档，并根据此文档Craft使用的是Twig（这是James研究中涵盖的PHP模板引擎之一）。
那么让我们全面了解一下文档。这实际上将帮助我们实现我们的野心，并加深我们对CMS和模板引擎如何相互作用的理解。此外，它对于理解两个组件的体系结构和实际对象，方法和语法非常有用：
此外，始终建议检查目标的旧/已知/现有漏洞。如果有，请审查代码以了解在连续发布的版本中是如何更改和修复这些漏洞的。上面的任何一点都可能引发一些想法。就我而言，我审查了一些已知问题。例如：
[Craft CMS受服务器端模板注入的影响](https://www.securify.nl/advisory/SFY20160608/craft-cms-affected-by-server-side-template-injection.html)  
[Craftcms Craft Cms：安全漏洞列表 -CVE详细信息](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=2ahUKEwiBncjps7jcAhVII1AKHRLzBRIQFjAAegQIABAB&url=https://www.cvedetails.com/vulnerability-list/vendor_id-16372/product_id-37245/Craftcms-Craft-Cms.html&usg=AOvVaw0XetfgPk557bLY1o7TKuDp)  
[Twig  TPLMAP支持情况一览表
根据我们的信息汇总，可以发现下面的重要线索，根据James的研究，Twig的_self对象及其env属性是突破口，能搞出来远程执行代码（RCE）：
    {{_self.env.registerUndefinedFilterCallback("exec")}}
    {{_self.env.getFilter("id")}}
    uid=1000(k)gid=1000(k)groups=1000(k),10(wheel)
我们尝试通过注入点调用它。但是，在我的测试中, 我发现 _self 不是一个对象, 而是一个返回模板名称的字符串:
> _self 为字符串, 而不是引用对象
查阅了文档和其他声明, 结果是他们从Twig v1 更新到Twig v2 的时候把这里给改了。也就是说, 我们正在对付一个你没有见过的船新版本的Twig,
不容易在它上面利用詹姆斯挖出来的那个漏洞。目前似乎也没有已公开的漏洞exp可以对付Twig v2 (也解释了为什么
TPLMAP不支持Twig的Exp)。好吧, 我们到了山前才发现没路了。
但还是有希望的。
## 发散思维，峰回路转
尽管目前还没人发表关于Twig v2 模板引擎的exp, 但我们仍然可以通过发现的注入点与 CMS 的组件进行交互。根据Craft CMS 文档,
有很多有趣的对象, 过滤器和方法可以从模板调用。而且似乎我们可以从Craft CMS 本身调用对象和方法。根据文档, 我们应该能够找到可编辑的部分:
> 文档中的示例方法
所以, 让我们尝试一下..。
> 读取可编辑的片段
哎！我们搞到了一个数组返回值, 就是说我们注入的玩意儿起效了。继续，我们要找到更多的宝贝。仔细阅读文档后会挖掘出一种, 看起来能出货的特定的方法,
因为它允许我们从配置文件中读取信息 (以前的Craft CMS漏洞利用那些人也是用的这个):
    {{craft.config.get('someConfigSetting','someConfigFile')}}
让我们来看看配置文件, 并挑选出一些好东西:
> 来自 db. php 的内容
好多好多我们可以尝试去访问的宝~贝~, 但这次我们需要传递一些参数给 craft.config.get () 方法。让我们尝试在 db. php
文件中传入password:
> 编码后的控制字符
不幸的是, 框架附带了一些保护功能,通过将控制字符替换为相应的 HTML编码来进行防御。当陷入这样的问题时, 通常选择绕过过滤是一种很好的方式。例如,
有时你通过编辑外来字符转义序列或使用奇异编码方案可能就幸运地绕过了过滤器。我花了一些时间分析过滤器的行为, 得出的结论是, 它有相当强的鲁棒性,
所以需要改变战略。当我掉头回去阅读Craft文档时, 我开始去调戏所有可用的功能。craft.request看起来很有趣, 在我阅读它所支持的方法时,
我终于偶然发现了这个珍贵的宝石:
> 获取UserAgent