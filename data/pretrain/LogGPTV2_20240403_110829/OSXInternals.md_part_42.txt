Figure 420. The EFI architecture
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 78 of 86
4.16.3.2. EFI Drivers
EFI drivers can be built into the EFI implementation. Alternatively, they can come from the option ROM
of a card or from a device supported natively by EFI. Most EFI drivers would conform to the EFI Driver
Model. Such drivers are written in C and operate in a flat memory model. Driver images, which may be
converted to EFI Byte Code (EBC), are typically compressed using Deflatea combination of LZ77[30]
compression and Huffman coding. Examples of EFI driver types include the following:
[30] LZ77 is a lossless data compression algorithm that was originally published by A.
Lempel and J. Ziv in 1977.
Bus drivers, which manage and enumerate bus controllers (such as a PCI network interface
controller) installed onto the bus's controller handle
Hybrid drivers, which manage and enumerate bus controllers (such as a SCSI host controller)
installed onto the bus's controller handle and the bus's child handles
Device drivers, which manage controllers or peripheral devices such as a PS/2 or USB keyboard
EFI also supports drivers that may not conform to the EFI Driver Model. Examples of such drivers
include the following:
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 79 of 86
Initializing drivers that perform one-time initialization functions
Root bridge drivers that manage part of the core chipset
Service drivers that provide services such as the decompression protocol and the EBC Virtual
Machine to other EFI drivers
Older EFI drivers
An EFI protocol is a set of related interfaces. EFI drivers consume various protocols such as PCI I/O,
Device Path, USB I/O, and USB Path. They also produce several protocols such as Simple Input, Simple
Pointer, Block I/O, UGA Draw, UGA I/O, Simple Text Output, SCSI Block I/O, SCSI Pass-through,
Network Interface Identification, Serial I/O, Debug Port, and Load File.
EFI drivers are typically needed only for devices that must be used before the operating system starts
running. The primary example is that of a storage device on which the operating system resides. The EFI
driver for a storage device allows EFI to export block I/O services, which the bootloader uses to load the
operating system kernel.
4.16.4. A Sampling of EFI
Let us now look at a few specific aspects of EFI, including examples of interacting with the EFI
environment.
4.16.4.1. EFI NVRAM
EFI defines an area of nonvolatile memory, or NVRAM, which is used to store both global and
application-specific data in the form of variables. The NVRAM store can be programmatically
accessedfor retrieval or storageusing the EFI API. Variables are stored using a two-level namespace: a
globally unique ID (GUID) as the first level and variable names as the second level. Thus, it is possible
for two variables with the same name to exist in two GUIDs without namespace collision. All
architecturally defined global variables use a reserved GUID such as the following:
#define EFI_GLOBAL_VARIABLE \
{8BE4DF61-93CA-11d2-AA0D-00E098032B8C}
Examples of global variables include the currently configured language code (Lang), the ordered boot-
option load list (BootOrder), the ordered driver-load option list (DriverOrder), and the device paths of
the default input and output consoles (ConIn and ConOut, respectively).
Application-specific variables, which are passed directly to EFI applications, are also stored in the
NVRAM. Moreover, the NVRAM may be used for storing diagnostic data or other information that may
be useful in failover and recovery scenarios, as long as the NVRAM has enough space to hold such
information.
4.16.4.2. The Boot Manager
The EFI firmware includes an application called the boot manager, which can load EFI bootloaders, EFI
drivers, and other EFI applications. The boot manager consults global NVRAM variables to determine
what to boot. It accesses bootable files from an EFI-defined file system or via an EFI-defined image-
loading service.
Figure 421 depicts a representative sequence of actions that occur after an EFI-based system is powered
on. The core EFI firmware passes control to the boot manager, which uses the NVRAM facility to display
a menu of installed bootable applications. In Figure 421, the user has selected an operating system
bootloader for Mac OS X as the application to boot, which is launched by the boot manager. While
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 80 of 86
executing in the EFI environment, the bootloader loads the kernel, collects any parameters that may exist
in the NVRAM, and eventually hands off control to the kernel. If a boot application exits, control returns
to the boot manager.
Figure 421. Booting an operating system through EFI
4.16.4.3. The EFI Shell
The EFI environment optionally includes an interactive shell that allows a user to perform tasks such as
the following:
Launch other EFI programs
Load, test, and debug drivers manually
Load ROM images
View or manipulate memory and hardware state
Manage system variables
Manage files
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 81 of 86
Edit text
Run shell scripts
Access the networkfor example, via an Ethernet or a dial-up connection
The EFI specification does not cover a shell interface, but a representative EFI shell is a rudimentary
command-line interpreteran EFI application implemented in C. Figure 422 shows examples of using an
EFI shell (note that specifying the -b option to most commands causes the displayed output to break after
one screen).
Figure 422. Using the EFI shell
fs0:\> ver
EFI Specification Revision :
1.10
EFI Vendor : Apple
EFI Revision : 8192.1
fs0:\> ls
Directory of: fs0:\
...
02/28/06 02:15p 172,032 tcpipv4.efi
02/28/06 02:15p 14,336 rtunload.efi
02/28/06 02:15p 15,360 rtdriver.efi
02/28/06 02:15p 126,976 route.efi
02/28/06 02:15p 16,384 ramdisk.efi
02/28/06 02:15p 339,968 python.efi
02/28/06 02:15p 172,032 pppd.efi
02/28/06 02:15p 16,896 pktxmit.efi
02/28/06 02:15p 19,968 pktsnoop.efi
02/28/06 02:15p 126,976 ping.efi
...
40 File(s) 2,960,866 bytes
2 Dir(s)
fs0:\> drivers -b
T D
D Y C I
R P F A
V VERSION E G G #D #C DRIVER NAME IMAGE NAME
== ======== = = = == == =================================== ===================
4E 00000010 D - - 4 - Usb Uhci Driver Uhci
...
54 00000010 D - - 2 - Usb Keyboard Driver UsbKb
55 00000010 D - - 2 - Usb Mouse Driver UsbMouse
71 00000010 D - - 1 -  AppleBootBeep
74 00000001 D - - 1 - ICH7M IDE Controller Init Driver IdeController
75 00000001 D - - 1 - ICH7M Serial ATA Controller InitialSataController
...
AE 0010003F D - - 1 - ATI Radeon UGA Driver 01.00.063 Radeon350
AF 00000010 D - - 1 - Apple Airport Driver AppleAirport
...
fs0:\> dh -b
Handle Dump
1: Image(DxeMain)
...
80: Image(AppleHidInterface) DriverBinding ComponentName
81: Image(AppleRemote) DriverBinding ComponentName
82: Image(FireWireOhci) DriverBinding ComponentName
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 82 of 86
83: Image(FireWireDevice) DriverBinding ComponentName
84: Image(HfsPlus) DriverBinding ComponentName
85: Image(AppleSmc)
...
fs0:\> load tcpipv4.efi
Interface attached to lo0
Interface attached to sni0
Interface attached to ppp0
Timecounter "TcpIpv4"
frequency 4027 Hz
Network protocol loaded and initialized
load: Image fs0:\tcpipv4.efi
loaded at 1FCF4000 - Success
fs0:\> ifconfig sni0 inet 10.0.0.2 netmask 255.255.255.0 up
fs0:\> ifconfig -a
lo0: flags=8008 mtu 16384
sni0: flags=8802 mtu 1500
inet 10.0.0.2 netmask 0xffffff00 broadcast 10.0.0.255
ether 00:16:cb:xx:xx:xx
ppp0: flags=8010 mtu 1500
fs0:\> ping 10.0.0.1
PING 10.0.0.1 (10.0.0.1): 56 data bytes
64 bytes from 10.0.0.1: icmp_seq=0 ttl=255 time ftp 10.0.0.1
Connected to 10.0.0.1.
220 g5x8.local FTP server (tnftpd 20040810) ready.
Name (10.0.1.1):
...
fs0:\> help
...
Use 'help -b' to display commands one screen at a time.
Apple did not include an EFI shell with the first x86-based Macintosh models. However, an EFI shell
implementation that runs on these computers can be downloaded from Intel's web site.
Note in Figure 422 that it is possible to have network connectivity within EFI's user-visible environment.
4.16.4.4. The GUID-Based Partitioning Scheme
EFI defines a new partitioning scheme called the GUID Partition Table (GPT), which must be supported
by an EFI firmware implementation. GPT uses GUIDs to tag partitions. Each disk is also identified by a
GUID. This scheme includes several features that make it far superior to the legacy MBR-based
partitioning scheme. Examples of such features include the following:
64-bit logical block access (LBA), and consequently, 64-bit disk offsets
An arbitrary number of partitions without resorting to nesting schemes like extended partitioning
Version number and size fields for future expansion
CRC32 checksum fields for higher data integrity
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 83 of 86
A 36-character, human-readable, Unicode name per partition
Partition content type defined using a GUID and other attributes
Primary and backup partition tables for redundancy
Figure 423 shows a GPT-partitioned disk. A dummy MBR is stored at logical block 0 for legacy
compatibility. The primary header structure of a GPT is stored at logical block 1, whereas a backup is
stored at the last logical block. A GPT header may never span more than one block on the device.
Moreover, although GPT does not support nesting of partitions, it is legal to have a legacy MBR nested
inside a GPT partition. However, EFI firmware does not execute the boot code on a legacy MBR.
Figure 423. A GPT-partitioned disk
[View full size image]
GUIDs
A GUID (also called UUID, for universally unique identifier) is specified to be 128 bits long
in Intel's Wired for Management (WfM) specification. It is unique across time (e.g., until
3400 A.D. per a specific GUID-generation algorithm) and space (relative to other GUIDs). A
key to generating a GUID without requiring a centralized authority is the use of a globally
unique valuea node identifierthat is available to each GUID generator. For networked
systems, the node identifier is a 48-bit IEEE 802 address, which is usually a host address, or
the host address if there is only one network interface. For a host without an IEEE 802
address, this value is chosen in a probabilistically unique fashion. However, this alone is not
sufficient for uniqueness. Other values involved in GUID generation include a timestamp, a
clock sequence, and a version number.
EFI supports a dedicated on-disk system partition called the EFI System Partition (ESP). The ESP uses
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 84 of 86
the FAT-32 file system with support for long filenames. EFI drivers,[31] bootloaders, and other EFI
applications can be stored on the ESP. The boot manager can run boot applications from this partition.
Figure 424 shows the use of a GPT disk utility (diskpart.efi) to list the partitions on a disk. The Mac
OS X gpt command can also be used for this purposewe will see an example of its use in Chapter 11.
[31] In general, drivers that are not required to access the ESP are good candidates for residing
on the ESP.
Figure 424. Listing the partitions on a GPT-partitioned disk
fs0:\> diskpart
...
DiskPart> select 0
Selected Disk = 0
DiskPart> inspect
Selected Disk = 0
### BlkSize BlkCount
--- ------- ----------------
* 0 200 12A19EB0
0: EFI system partition
C12A7328-F81F-11D2 = EFISYS
34D22C00-1DD2-1000 @ 0
28 - 64027
1: Customer
48465300-0000-11AA
00004904-06B7-0000 @ 0
64028 - 129D9E87
4.16.4.5. Universal Graphics Adapter
Given the needs of modern preboot applications, VGA-based graphics support in a legacy BIOS
environment is both very limited and hard to program with for several reasonsfor example, a maximum
resolution of 640x480, a small framebuffer, and the use of palette modes. EFI defines the Universal
Graphics Adapter (UGA) specification as a replacement for VGA and VESA. Any graphics device with
UGA firmware can be considered a UGA device. It may also contain VGA firmware for compatibility.
The EFI execution environment interprets UGA firmware, which is implemented in a high-level language.
In particular, programming a UGA device does not require the programmer to deal with low-level details
such as hardware registers.
In the UGA model, the UGA firmware does not necessarily have to reside on a graphics deviceit may be
part of the system firmware if the graphics device is onboard, or it may even reside on a regular storage
device.
UGA provides a draw protocol[32] for drawing on a video screen and an I/O protocol for creating a
device-independent, operating systemspecific driver, which is simply a "lowest common denominator"
driver in that it is not meant to replace a high-performance device-specific driver that would normally be
part of an operating system. Nevertheless, a generic UGA driver may be used in the post-boot
environment in scenarios such as the following:
[32] The basic graphics operation in the draw protocol is the block transfer (BLT) operation.
As a fallback driver when the regular driver is corrupt or missing from the operating system
As the primary driver in machinessuch as serverswhere graphics performance is irrelevant
In special operating system modes such as during "safe" booting or when the kernel has panicked
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 85 of 86
For displaying graphical elements when the primary driver may not be available temporarilyfor
example, during operating system installation, early startup, and hibernation
Unlike VGA, the UGA firmware does not access the graphics hardware directly. It operates within a
virtual machine. A vendor may provide a library that implements a thin logical layer above EFI,
encapsulating a specific UGA firmware implementation.
4.16.4.6. EFI Byte Code
Option ROMs require different executable images for different processors and platforms. EFI defines an
EFI Byte Code (EBC) Virtual Machine to abstract such differences. The firmware includes an EBC
interpreter so that EFI images compiled to EBC are guaranteed to function on all EFI-compliant systems.
C language source can be compiled into EBC and linked to yield drivers that run under the interpreter.
The EBC Virtual Machine uses two sets of 64-bit registers: eight general-purpose registers and two
dedicated registers. For data offsets, it uses natural indexing relative to a base addressinstead of a fixed
number of bytes as an offset unit, it uses a natural unit defined as the operation sizeof(void *), rather
than being a constant. This allows EBC to execute seamlessly on 64-bit and 32-bit systems.
Programs targeted for EBC must follow several restrictions. For example, they must not use floating-
point, inline assembly, or C++.
4.16.4.7. Binary Format
EFI uses the PE32 binary format. The executable and object file formats under Microsoft Windows are
called Portable Executable (PE) and Common Object File Format (COFF), respectively. A PE file is
essentially a COFF file with a header that's compatible with MS-DOS 2.0. An optional header contains a
magic number that further designates a PE file as PE32 or PE32+. The header also specifies the entry
point for image execution.[33]