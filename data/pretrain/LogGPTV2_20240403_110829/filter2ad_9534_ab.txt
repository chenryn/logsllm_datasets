                        if (reader != null) {
                            try {
                                reader.close();
                            } catch (IOException e){
                                e.printStackTrace();
                            }
                        }
                        if (connection != null){
                            connection.disconnect();
                        }
                    }
                }
            }).start();
        }
针对 **Proxy.NO_PROXY** ，先测试一下，系统代理是否真的不能抓包。
如下图先设置系统代理，burp监听8888，此时打开APP，点击发送请求无任何反应，burp中也抓不到包，说明系统代理被禁了。
### 4.2、使用Postern代理
用过这款软件的都知道，当开启代理服务后状态栏会有个`钥匙`的标志，这可能也是基于VPN模式工作的特征
同样的APP，点击请求，此时成功绕过了Proxy.NO_PROXY检测！也说明了VPN协议在HTTP协议的下层。
## 5.安卓VPN检测
VPN也是代理的一种，但是由于通讯协议的差异，所以检测代码也不一样。
当客户端运行`VPN虚拟隧道协议`时，会在当前节点`创建`基于eth之上的`tun0`接口或`ppp0`接口，所以一旦出现带有明显特征的网络接口名称，就可以认定是使用了VPN协议进行通信。
下面这段代码的检测方式：出现特征 **tun0** 或者 **ppp0** 则退出应用，也就是我们看到的闪退效果。
    private void isDeviceInVPN() {
            try {
                Enumeration networkInterfaces = NetworkInterface.getNetworkInterfaces();
                while (networkInterfaces.hasMoreElements()) {
                    String name = networkInterfaces.nextElement().getName();
                    if (name.equals("tun0") || name.equals("ppp0")) {
                        stop();
                    }
                }
            } catch (SocketException e) {
                e.printStackTrace();
            }
        }
在点击监听中放置isDeviceInVPN()功能，点击即触发，如果检测到了使用了VPN则直接退出。
    @Override
        public void onClick(View view){
            if (view.getId() == R.id.send_request){
                isDeviceInVPN();
                sendRequestWithHttpURLConnection();
            }
        }
### 5.1、使用ProxyDroid代理
当前场景：APP同时开启了代理检测以及VPN检测
这时使用 **iptables** 进行数据转发的软件 **ProxyDroid** 进行测试，配置如下图所示：
开启之后，系统状态栏不会出现钥匙的形状，这时再次进行抓包测试。
burp成功获取到了请求，至此代理与VPN的应对方法均已实现。所以， **iptables** 竟然能从OSI的 2、3层下面走吗，下面我们继续分析。
## 6.iptables原理
我们都知道安卓使用的是linux内核，而linux内核提供的防火墙工具是 **Netfilter/Iptables** 。
**Netfilter** 是由linux内核集成的IP数据包过滤系统，其工作在内核内部，而 **Iptables** 则是让用户定义规则集的表结构。
也就是， **iptables** 是一个命令行工具，位于用户空间，它真正操作的框架实现在 **内核** 当中。
> Netfilter是一个数据包处理模块，它具有`网络地址转换`、`数据包内容修改`、`数据包过滤`等功能。
> 要使netfilter能够工作，就需要将所有的规则读入内存中。netfilter自己维护一个内存块，在此内存块中有4个表：filter表、NAT表、mangle表和raw表。在每个表中有相应的链，链中存放的是一条条的规则，规则就是过滤防火的语句或者其他功能的语句。也就是说表是链的容器，链是规则的容器。实际上，每个链都只是一个hook函数（钩子函数）而已。
**Iptables**
主要工作在OSI七层的2.3.4层，好像也没比VPN的工作协议低，反而还有高的，但是测试结果证明，是我想错了，iptables不是由于协议低，而是没有出现
**tun0** 或者 **ppp0** 这两个关键的网卡特征，所以成功绕过了VPN的检测。
基于iptables这个流量转发，我还发现了一个新的名词，叫做“`透明代理`”，iptables的转发模式就是这种。
由此，延伸了一个新的代理模式，通过burp进行“透明代理”，网上的教程错综复杂，亲测使用过程如下。
## 7.透明代理
  * 原理：透明代理技术可以让客户端`感觉不到代理的存在`，用户不需要在浏览器中设置任何代理，只需设置缺省网关即可。在访问外部网络时，客户端的数据包被发送到缺省网关，通过缺省网关的路由，最终到达代理服务器，最后代理服务器运行代理进程，数据实际被重定向到代理服务器的代理端口，即由本地代理服务器向外请求所需数据然后拷贝给客户端。
接下来我将尝试：结合安卓端的透明代理技术与burp存在的invisible模式
### 7.1、使用Burp透明代理
#### （1）安卓端设置
首先在设备上手动进行设置：将所以请求80、443端口的tcp流量进行nat转发到192.168.50.177（burp的监听地址）的对应端口上
    adb shell
    su
    iptables -t nat -A OUTPUT -p tcp --dport 80 -j DNAT --to  192.168.50.177:80
    iptables -t nat -A OUTPUT -p tcp --dport 443 -j DNAT --to  192.168.50.177:443
查看当前规则是否成功添加
    iptables -t nat -L
#### （2）代理服务器端设置
添加80和443的端口监听
在【Binding】中设置端口，选中 【All interfaces】
并对【Request handing】做出如下设置
> **Redirect to port** \- 如果配置了这个选项，Burp会在每次请求转发到指定的端口，而不必受限于浏览器所请求的目标。
>
> **Force use of SSL** \-> 如果配置了这个选项，Burp会使用HTTPS在所有向外的连接，即使传入的请求中使用普通的HTTP。您可以使用此选项，在与SSL相关的响应修改选项结合，开展sslstrip般的攻击使用Burp，其中，强制执行HTTPS的应用程序可以降级为普通的HTTP的受害用户的流量在不知不觉中通过BurpProxy代理。
设置之后，Proxy状态如下
此时burp就可对转发到这里的80和443端口的流量进行 **透明代理**
> 注意：如果出现443端口被占用，查找进程kill掉即可。
>
>
> 
>
>
> 
>
> 以管理员身份运行 cmd 执行如下代码
>
>
> 
经过测试，burp成功抓取到了请求包。
**这里不禁思考，如果是基于iptables进行的数据转发，那么刚才的ProxyDroid是否也内置了一些路由规则呢？**
查看一下开启ProxyDroid时iptables当下的规则
从图中可以看到共有六条策略，其中最后两条就是我们刚才手动添加的，但并没有看到burp监听的8888端口，8123、8124一定是软件内置的代理转发端口，想要知道具体原理还需要详细分析ProxyDroid的源码。
**血泪避坑**
：网上出现了很多教程，最关键的iptables规则写法不一，导致多次测试结果并不成功，如果将安卓终端的80和443端口同时转发到burp上监听的唯一一个端口则会出现连接错误。根据burp官方文档说明为每个端口号设置监听器会更加稳定，也就是要设置两个代理监听。
## 8.总结
根据不同的代码检测，也会有不同的应对方法，所以，遇到APP出现抓包闪退等问题，先逆向，查看源码，在通信处仔细进行分析，再针对检测代码进行绕过，才是正解。本文提到的并不是固定的处理方法，如果文章有叙述不当，尽请矫正。
## 9.参考链接
[burp
invisible官方文档](https://portswigger.net/burp/documentation/desktop/tools/proxy/options/invisible)
[代理与VPN](https://mp.weixin.qq.com/s/u4WwEGFADvRIYFudrMDsRQ)
[iptables的内核原理](https://cloud.tencent.com/developer/article/1619659)