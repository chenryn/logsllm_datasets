of the computing tasks being conducted in the VMs. To increase
the visibility to VMs, virtual machine introspection (VMI) [31] is
proposed. Since VMI is conducted independently of the VM, it is
ideal for security purposes, such as software patching without inter-
rupting the execution of guest OS [9, 15], intrusion detection [31],
forensics [29]. VMI takes advantage of the OS-specific knowledge
to effectively inspect the internal states of each VM. In other words,
it assumes certain internal data structures used by guest OS [31].
Unfortunately, this assumption of VMI could be exploited by mali-
cious VMs [7]. For example, as demonstrated in DKSM [7], attackers
could easily manipulate kernel data structures to mislead a VMI
tool.
2.2 Intel Hardware-assisted Virtualization
Before hardware-assisted virtualization, virtualization has to be
implemented by fully emulating an entire computer, leading to
significant performance overheads. Modern processors integrate
hardware support for accelerated virtualization (e.g., Intel VT-x). VT-
x capability is identified by a vmx CPU flag, which stands for Virtual
Machine Extensions. It adds new instructions and architectural
support for a virtual execution mode where the guest OS perceives
itself as running with full privileges and runs native instructions
directly on the host without emulation.
The most important data structure in hardware virtualization is
virtual machine control structure (VMCS), which is maintained by
hardware. It stores critical system events of interest for the guest
OS. Whenever such an event happens, the VM is suspended and
the execution returns to VMM. Providing such an interface that
intercepts them gives VMM an opportunity to scrutinize the VM
validity. Note that the corresponding fields in VMCS, e.g., Monitor
trap flag (MTF) and CR3-load exiting flag, cannot be modified di-
rectly with load/store instructions. Instead, dedicated virtualization
instructions have been incorporated that affect VMCS indirectly.
For example, MTF [42] is a debugging feature. When set, the guest
will trigger a VM exit after executing each instruction. As indicted
by the name, when the CR3-load exiting flag is set, any operation
causing an update to CR3 register causes a VM exit.
Without hardware virtualization, VMM needs to maintain a
shadow page table that maps the guest virtual addresses (GVA) to
host physical addresses (HPA). Whenever the guest OS updates its
page table, VMM needs to synchronize it to the shadow page table.
With Intel hardware virtualization, extended page table (EPT) acts
as a second layer of address translation. EPT translates GPA into
HPA in hardware directly without the intervention of VMM. This
not only simplifies the VMM design, but also improves performance.
Like the traditional page table, the EPT paging-structure entries
contain the privilege flags (i.e., read, write and execute) for the corre-
sponding GPA. If a memory access violates the specified privileges,
the VM exits with the reason code “EPT violation”. To further in-
crease performance, the VMX extension supports virtual-processor
identifier (VPID). With VPID, the logical processor includes a tag
in the translation lookaside buffer (TLB) that identifies the corre-
sponding process. As a result, the hypervisor does not need to flush
TLBs during context switches.
3 THREAT MODEL
Assumptions. In TF-BIV, as with many software-based protection
mechanisms, we assume that all the hardware and firmware under-
neath the guest VM are trustworthy. More specifically, the physical
processor provides basic hardware-based controls (e.g., memory
management unit, task switching, privilege transition, etc.). Since
we rely on hardware virtualization, the VMX extension is also as-
sumed to work as expected. For instance, VM entry and VM exit
do not leak any sensitive information to less privileged software
stacks. VMCS can never be accessed by software, including VMM.
MTF and EPT work as documented in the Intel manuals [42].
We assume that supervisor, together with VMX-enable proces-
sor, correctly provides an isolated environment for each VM. VMM
manages system resources and mediates access to these resources
as programmed. The protection of VMM is out of the scope in
this work. However, various solutions (e.g., HyperSafe [82], Hyper-
Check [81] and XMHF [78]) are ready to be deployed.
TF-BIV focuses on the integrity protection of static code seg-
ments. Verification of dynamically generated code, such as that
generated with Just In Time (JIT) engines and Dynamic Binary
Translation (DBT), is out of the scope of this paper. Moreover, the
bugs in the protected programs themselves (e.g., logic errors, mem-
ory disclosures) are not considered, since they do not modify the
executable codes. These bugs can lead to both control-oriented (e.g.,
control flow hijacking) and data-oriented attacks [17, 37, 39, 44].
In both cases, the behavior of the program is changed. To defeat
against such software bugs, there are many orthogonal mechanisms
including control flow integrity [49, 74], data flow integrity [12, 72],
and whole memory safety [27, 57].
TF-BIV relies on the cryptographic hash to verify the integrity
of binaries. We assume that the adopted hash functions are secure
and immune to the collision attacks. Moreover, we assume that
the reference hash values of the binaries are calculated in a secure
environment and imported to the CSP securely with out-of-band
channels.
Threat Model. The attacker’s ultimate goal is to execute a mali-
cious copy of the sensitive process (called S-process in this paper).
He could target any process in the distribution, deployment and exe-
cution of the program. For example, he could intercept the network
and modify the binary of the program during software download-
ing. After the software has been deployed, he could also inject code
into the address space of the S-process at run-time. Even in the
correctly bloated Linux kernel, there are multiple approaches to
achieve this. For instance, he could exploit vulnerabilities in the OS
kernel to control the kernel [83]. Then he could inject new code or
manipulate existing code of the S-process during execution.
As mentioned above, we have integrated TF-BIV into a cloud-
based cryptographic service. In this scenario, the attacker’s goal is
to obtain access to cloud-based cryptographic service even he is not
authorized. He may obtain the identity and credential information
to access cryptographic computations using social engineering. He
also has the capability to bypass the existing access control of the
cryptographic service and invoke requests to cryptographic service
within the VM. This capability is consistent with the aforemen-
tioned assumption that the attacker can take over of the entire
guest OS.
4 TF-BIV DESIGN
In this section, we depict the design of TF-BIV.
4.1 Design Goals
We design TF-BIV with four goals in mind, corresponding to the four
desired properties of a integrity verification scheme mentioned in
Section 1. Specifically, TF-BIV protects sensitive processes in a sepa-
rated execution domain (Goal 1: Isolation) and does not need any
modification to the guest VM (Goal 2: Transparency). Moreover,
the integrity of a sensitive process is guaranteed throughout the
entire lifetime of an S-process (Goal 3: TOCTTOU consistency).
Finally, a tenant has the flexibility to protect only a particular set
of programs (Goal 4: Fine-grained verification).
4.2 Overview
TF-BIV relies on pre-computed hash values for target binaries as
a reference for integrity checking. Therefore, these hash values
are securely computed in a separated machine and transmitted
to the VMM via out-of-band channels. To calculate the reference
hash values, TF-BIV needs to analyze the target binary and obtain
all the dependant shared libraries, because all of them contain
executable code in the address space of the target program. When
the binary needs to be updated, the corresponding reference hash
values should also be re-calculated and updated.
At run-time, TF-BIV, running inside the VMM, verifies the in-
tegrity of the specified process (S-process) according to the refer-
ence hash values. To achieve the design goals mentioned in Sec-
tion 4.1, TF-BIV transparently detects four types of critical system
events occurred in the guest VM, as shown in Figure 1. ❶ TF-BIV
monitors the creation of a process by capturing changes in the CR3
Figure 1: TF-BIV architecture.
register. This can be used to identify an S-process creation when
it is activated for the first time. ❷ TF-BIV monitors all updates to
the page table of an S-process. In this way, we track the code pages
(including S-process and the dependant libraries) mapped into the
virtual address space of an S-process. ❸ TF-BIV captures any ex-
ecution attempts of S-processes. Before the code can be executed,
TF-BIV must verify its integrity. ❹ TF-BIV captures any modifica-
tion to the verified code pages. In this way, we ensure TOCTTOU
consistency.
All of these four events will be detected transparently in VMM.
This is achieved by configuring the corresponding flags in VMCS
and EPT, which trigger a VM exit whenever one of the correspond-
ing system events happens. In particular, TF-BIV registers the fol-
lowing four events. a) CR3-load exiting: TF-BIV tracks the S-
process creation by monitoring any update to the CR3 register [40].
b) MTF VM exiting: TF-BIV monitors any update to the page table
of S-processes. To achieve this, TF-BIV sets the first-level page table
as non-writable. Any update to it triggers a VM exit. To be able
to continuously track the whole page table data structure, TF-BIV
leverages MTF to execute the relevant guest instructions in single-
step mode. After the operation is finished, the whole page tables
(including the initial first-level page table and upper level page ta-
bles discovered later) are set as non-writable again so as to monitor
any further modifications. c) EPT non-executable (NX) exiting:
TF-BIV employs this event to trigger the actual code integrity ver-
ification. In details, TF-BIV keeps track of all the unverified code
pages of S-processes and sets the non-executable bit (NX-bit) of the
corresponding EPT entries, making the execution of any unverified
code trigger a VM exit. In VMM, TF-BIV verifies the corresponding
code pages before execution. d) EPT non-writable (NW) VM ex-
iting: For the verified code pages, TF-BIV sets the non-writable bit
(NW-bit) of the corresponding EPT entry to ensure the TOCTTOU
consistency. Any modification to a verified page triggers a VM exit.
If this happens, TF-BIV marks this page as unverified so that later
execution attempts would trigger another verification.
TF-BIV verifies the integrity of all the codes related with the
S-processes, including the kernel, loadable kernel modules (LKM)
and the shared libraries. For kernel integrity, TF-BIV follows the
same approach as Patagonix [54]. It verifies kernel integrity before
execution by comparing the hash values of kernel code with the
reference hash values. Please see Patagonix [54] for more details
about this static image. In the next, we detail how TF-BIV captures
S-processNormalprocess VMM-TF-BIVGPAHPAPage tableProcess ListvCPUMove to CR3CPUFetch instructionCR3Write to page tableS-process codeShared library codeVerifiedUnverifiedWrite to verified code page1324S-process. . .Guest physical page of page tablethe aforementioned critical system events and transparently veri-
fies the integrity of S-processes. We also discuss how to perform
integrity verification for LKMs.
4.3 S-processes Identification
In the Linux OS, to execute a process, the kernel needs to set the
CR3 register to point to the physical address of the page table of the
target process. Therefore, monitoring updates to CR3 allows TF-BIV
to capture the schedule of an S-process. TF-BIV will be transparently
notified of a CR3 update, thanks to hardware virtualization support,
in particular, the CR3-load exiting bit in VMCS.
TF-BIV needs to further identify if a newly scheduled process
is an S-process or not. For each scheduled (activated) process, TF-
BIV firstly checks whether the process is a newly created one by
comparing the new CR3 value with the list of all the previously
recorded CR3 values. If a new process is identified, we could simply
obtain the name of the process by examining the comm data struc-
ture. However, as kernel data structures might be manipulated, we
directly use code hash values to match an S-process. Specifically,
TF-BIV obtains the physical address of the code pages by traversing
the page table, and compares the hash values of the code pages
with the reference hash values to find the matching binary. TF-BIV
keeps a record of all the S-processes into S-process list by their CR3
values.
4.4 Memory Layout Monitoring
To verify the integrity of the S-process thoroughly, TF-BIV needs
to identify all the code pages mapped into the S-process’s virtual
address space. In details, TF-BIV firstly observes the newly mapped
code pages by monitoring any modification of the S-process’s page
table, and then finds which binary the code page belongs to, and
finally checks its integrity based on the corresponding reference
hash values.
Monitoring page table updates. TF-BIV leverages the MTF exit-
ing and EPT non-writable (NW) exiting to achieve non-bypassable
monitoring of the update to an S-process’s page table. Firstly, TF-
BIV finds the memory pages for the S-process based on the CR3
value and sets S-process’s page table as non-writable in EPT. As a
result, when the guest OS attempts to update an S-process’s page
table, a VM exit occurs. In VMM, TF-BIV modifies the correspond-
ing EPT entries for that update to allow temporary modification
to the page table. It also sets the MTF flag in the VMCS structure
to continuously monitor the following updates to the page table.
After all the updates complete, TF-BIV clears the MTF flag and sets
the page table as non-writable to monitor further modifications.
Identifying newly mapped memory areas. If a new code page
is observed to be mapped in the address space, we have to find out
which binary contains this code page to obtain the reference hash
values for comparison. As the Address Space Layout Randomization
(ASLR) has been widely adopted in modern OSes, we cannot use
virtual address to locate a code section within the binary image
of a protected program. A straightforward solution is to compare
the hash values of these code pages with the reference hash values
of all the code pages for each binary related with the S-process
to identify the mapping between memory areas (i.e., the start and