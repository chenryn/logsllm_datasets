      # 匹配 http 响应状态码
      - type: status
        status:
          - 200
上面我们介绍了各个部分的含义。总体来看，引擎大致运行流程如下：
1、迭代所有的 payloads 组合；  
2、针对每个 payloads 组合，顺序依次发送定义的请求并获取响应结果（需要替换请求中的动态值）；  
3、遍历所有的解压规则，从响应提取信息，合并到局部变量命名空间，或者用于结果返回（由 internal 变量控制）；  
4、如果 `req-conditio` 的值为 true，则跳转到 2
继续发送下一个请求；并提取响应结果各个部分，保存到局部变量命名空间，形如：`status_code_1`、`body_2`。  
5、遍历匹配规则，获取匹配结果，如果匹配则返回，否则继续；
## Pocsuite3 兼容 nuclei 的部分实现细节
### YAML 格式 PoC 如何和原框架兼容
我们不想改动 Pocsuite3 注册 PoC 到框架的方式，因此将 Nuclei 实现成了一个相对独立的模块，并额外提供了一个方法。当框架加载 PoC
时发现是 YAML 格式，会自动转换成 Pocsuite3 的 PoC 格式。因此 YAML 格式的 PoC 和 Python PoC
脚本在使用上没有任何区别。
    class nuclei:
    ...
       def __str__(self):
            """
            Convert nuclei template to Pocsuite3
            """
            info = []
            key_convert = {
                'description': 'desc',
                'reference': 'references'
            }
            for k, v in self.json_template['info'].items():
                if k in key_convert:
                    k = key_convert.get(k)
                if type(v) in [str]:
                    v = json.dumps(v.strip())
                info.append(f'    {k} = {v}')
            poc_code = [
                'from pocsuite3.api import POCBase, Nuclei, register_poc\n',
                '\n',
                '\n',
                'class TestPOC(POCBase):\n',
                '\n'.join(info),
                '\n',
                '    def _verify(self):\n',
                '        result = {}\n',
                '        if not self._check(is_http=%s):\n' % (len(self.template.requests) > 0),
                '            return self.parse_output(result)\n',
                "        template = '%s'\n" % binascii.hexlify(self.yaml_template.encode()).decode(),
                '        res = Nuclei(template, self.url).run()\n',
                '        if res:\n',
                '            result["VerifyInfo"] = {}\n',
                '            result["VerifyInfo"]["URL"] = self.url\n',
                '            result["VerifyInfo"]["Info"] = {}\n',
                '            result["VerifyInfo"]["Info"]["Severity"] = "%s"\n' % self.template.info.severity.value,
                '            if not isinstance(res, bool):\n'
                '               result["VerifyInfo"]["Info"]["Result"] = res\n',
                '        return self.parse_output(result)\n',
                '\n',
                '\n',
                'register_poc(TestPOC)\n'
            ]
            return ''.join(poc_code)
### 如何加载 YAML 模版
Golang 可以直接反序列化 JSON 数据为结构体看着非常优雅，在 Python3 中使用 dataclass 和 daciate
库也可以做到这一点，还能顺便做类型检查。另外，Python 中变量不能包含中横线，需要对数据做一些预处理。
    @dataclass
    class Template:
        """Template is a YAML input file which defines all the requests and other metadata for a template.
        """
        id: str = ''
        info: Info = field(default_factory=Info)
        requests: List[HttpRequest] = field(default_factory=list)
        network: List[NetworkRequest] = field(default_factory=list)
        stop_at_first_match: bool = True
        variables: dict = field(default_factory=dict)
    class Nuclei:
        def __init__(self, template, target=''):
            self.yaml_template = template
            try:
                self.yaml_template = binascii.unhexlify(self.yaml_template).decode()
            except ValueError:
                pass
            self.json_template = yaml.safe_load(expand_preprocessors(self.yaml_template))
            self.template = dacite.from_dict(
                Template, hyphen_to_underscore(self.json_template),
                config=dacite.Config(cast=[Severify, ExtractorType, MatcherType, HTTPMethod, AttackType, NetworkInputType]))
### DSL 表达式执行
使用 Python 实现了 DSL 的大部分函数，限制了表达式所能访问的函数和属性，最后通过 eval 执行。
    def safe_eval(expression, variables):
        if not _check_expression(expression, allowed_variables=list(variables.keys())):
            expression = expression.replace(' && ', ' and ').replace(' || ', ' or ')
            if not _check_expression(expression, allowed_variables=list(variables.keys())):
                raise Exception(f"Invalid expression [{expression}], only a very simple subset of Python is allowed.")
        return eval(expression, globals(), variables)
### 使用效果
使用 `-r` 直接加载 YAML 模版即可，通过 `-v` 设置日志级别，可以输出模版运行细节，包括请求和响应、表达式执行、解压规则和匹配规则的运行结果。
    ?  ~ pocsuite -r ~/nuclei-templates/cves/2020/CVE-2020-14883.yaml -u  http://172.29.157.74:7001  -v 2                                   
    ,------.                        ,--. ,--.       ,----.   {2.0.1-cb758d9}
    |  .--. ',---. ,---.,---.,--.,--`--,-'  '-.,---.'.-.  |
    |  '--' | .-. | .--(  .-'|  ||  ,--'-.  .-| .-. : .'  HTTP/1.1 200 OK
    > Date: Wed, 09 Nov 2022 02:34:52 GMT
    > Transfer-Encoding: chunked
    > Content-Type: text/html; charset=UTF-8
    > Set-Cookie: ADMINCONSOLESESSION=hpNaPYWzVQlWjXS0qq3B6CBq43oDb1kLXFpPZS6iOBlsVxfbRC-2!-1601473325; path=/console/; HttpOnly
    > 
    uid=1000(oracle) gid=1000(oracle) groups=1000(oracle)
    [18:34:52] [DEBUG] [+] Extractor(name='', type=, regex=['(u|g)id=.*'], group=0, kval=[], json=[], xpath=[], attribute='', dsl=[], part='', internal=False, case_insensitive=False) -> {'internal': {}, 'external': {}, 'extra_info': ['uid=1000(oracle) gid=1000(oracle) groups=1000(oracle)']}
    [18:34:52] [DEBUG] [+] Matcher(type=, condition='or', part='header', negative=False, name='', status=[], size=[], words=['ADMINCONSOLESESSION'], regex=[], binary=[], dsl=[], encoding='', case_insensitive=False, match_all=False) -> True
    [18:34:52] [DEBUG] [+] Matcher(type=, condition='and', part='body', negative=False, name='', status=[], size=[], words=['uid=', 'gid=', 'groups='], regex=[], binary=[], dsl=[], encoding='', case_insensitive=False, match_all=False) -> True
    [18:34:52] [DEBUG] [+] Matcher(type=, condition='or', part='body', negative=False, name='', status=[200], size=[], words=[], regex=[], binary=[], dsl=[], encoding='', case_insensitive=False, match_all=False) -> True
    [18:34:52] [+] URL : http://172.29.157.74:7001
    [18:34:52] [+] Info : {'Severity': 'high', 'Result': [{'cmd': 'id', 'extra_info': ['uid=1000(oracle) gid=1000(oracle) groups=1000(oracle)']}]}
    [18:34:52] [INFO] Scan completed,ready to print
    +---------------------------+-----------------------------------------------------------------------------------------+--------+-----------+---------+---------+
    | target-url                |                                         poc-name                                        | poc-id | component | version |  status |
    +---------------------------+-----------------------------------------------------------------------------------------+--------+-----------+---------+---------+
    | http://172.29.157.74:7001 | Oracle Fusion Middleware WebLogic Server Administration Console - Remote Code Execution |   0    |           |         | success |
    +---------------------------+-----------------------------------------------------------------------------------------+--------+-----------+---------+---------+
    success : 1 / 1
    [*] shutting down at 18:34:52
附：演示视频。
## 最后
目前的实现能覆盖大部分 HTTP 和 Network 模版，Nuclei
的一些特殊功能如：Workflows、条件竞争请求、请求注释等暂不支持。最新版本已经推送到 PyPI、Homebrew
仓库、Dockerhub、Archlinux 等，等这个大版本稳定后会继续推送 Debian、Kali、Ubuntu。如果大家在使用中发现任何问题，欢迎提交
Issue 或贡献代码。
## 参考链接
【1】: Pocsuite3 框架
【2】: Nuclei 框架
【3】: nuclei-templates 项目
【4】: YAML 语言教程
* * *