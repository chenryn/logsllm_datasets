further testing. Some other browsers display one or more initial
0%25%50%75%100%050100150Number of APKsFraction of browser familiesTable 5: Details of the version-span of APKs for the top six mobile browsers
Rank
1
2
2
2
3
3
Package Name
com.android.chrome
org.mozilla.firefox
com.UCMobile.intl
com.opera.browser
mobi.mgeek.TunnyBrowser
com.opera.mini.native
Oldest Version
29.0.1547.72 (2013)
9.0 (2011)
8.5.1 (2012)
14.0.1074.57453 (2013)
8.5.1 (2012)
8.0.1739.87973 (2015)
Latest Version
51.0.2704.81 (2016)
47.0 (2016)
10.10.8.820 (2016)
37.0.2192.105088 (2016)
11.5.8 (2016)
18.0.2254.106200 (2016)
# of versions Avg. per year
41
68
44
34
64
26
10.25
11.33
8.8
8.5
12.8
13
The following sections provides more information about the chal-
lenges of building such an automated framework, and techniques
used in Hindsight to overcome them.
4.2 Building a Browser-Agnostic Framework
The biggest challenge in building Hindsight is to make it browser-
agnostic. On the one hand, this is a must-have feature for Hindsight
because it has to support a wide variety of different browser families.
On the other hand, it is a non-trivial challenge as browsers do not
follow standardized application layouts and render webpages in
different ways using different engines.
Even as simple a problem as identifying the address bar—that is
required by several of our ABBs—becomes a challenge as Hindsight
cannot a priori know which rendered UI element is the address bar,
if any, and where it is located. Such decisions are made by browser
developers and are not known to the testing framework. The frame-
work can only observe the rendered UI and has to extract all the
needed information by analyzing that UI in a browser-agnostic
manner. Such analysis is not only needed at the end of a test run to
determine vulnerability, but also often required during a test run to
identify UI elements to interact with—for example, to know where
to tap in a loaded webpage in order to type in a text box.
The need to be browser-agnostic poses multiple design and im-
plementation challenges in each of the four processing steps men-
tioned above. Below, we will discuss some of these challenges and
how Hindsight copes with them.
4.2.1 Browser-Agnostic UI Analysis. A major challenge faced
by steps (2)–(4) of the framework, is to analyze the application UI
to determine the presence and location of certain elements on the
screen. The rendered UI usually consists of two distinct parts. The
first part includes the application-level UI elements, such as the
address bar, padlock, favicon and tab headers. The second part is
the webpage content.
Most Android applications, browsers included, use standard
Android UI libraries for application-level elements. This allows
Hindsight to use a standard Android toolset, called UI Automa-
tor, to capture an XML dump of the application UI’s Document
Object Model (DOM) tree which provides different attributes for
each application-level UI element, including its text or image as
well as screen coordinates. This greatly simplifies UI analysis for
application-level elements.
For the webpage elements, however, we cannot rely on such
textual dumps. This is because the vast majority of browsers do not
expose the rendered webpage elements as part of the application-
level DOM tree. Therefore, if one needs to, e.g., locate a certain
HTML button on the screen, it cannot rely on the XML dump
Figure 3: Architecture of the Hindsight framework
screens—which we call splash screens—that need to be bypassed
before the browser is ready for testing. Section 4.2.3 explains how
this is done automatically. If splash bypass fails, the APK is excluded
from further testing. Table 3 shows the number of APKs excluded
due to installation failure, crashing or splash-bypass failure.
In steps (3) and (4), each APK is exposed to each of the ABBs and
the results are checked for vulnerability. In Hindsight, each ABB
consists of three different pieces: i) the ABB HTML file which is
a carefully designed webpage containing the necessary elements
to test for the vulnerability, ii) the ABB test logic which contains
the necessary logic to interact with and provide UI inputs to the
Android device during the test, and iii) the ABB evaluation logic
that analyzes all the information collected during the test run to
determine the vulnerability of the tested APK to that ABB. This
pluggable design makes it fairly straightforward to add new ABBs to
the framework, as Hindsight does not make any a priori assumptions
about these ABB parts.
Architecturally, the Hindsight framework consists of three main
components. Multiple Android devices (currently 4) are used to run
tests in parallel. Each device runs a different version of the Android
OS to allow catering to different API levels needed by our APKs. A
controlling computer runs all the installation, splash-bypass, ABB
testing, and ABB evaluation logic. This computer is connected to
the Android devices through USB ports and uses the Android Debug
Bridge (ADB) to communicate with them. All browser installations
and UI interactions needed for the splash-bypassing and testing
logic use ADB commands. Finally, a web server is used to serve
the ABB HTML pages to the Android devices during the tests. This
web server also collects some crucial logs that are used by the ABB
evaluation logic to determine vulnerabilities (Section 4.2.4).
ABB1.html. . .ABB2.htmlABBn.htmlWeb ServerControl ComputerAndroid Debug Bridge (ADB). . .SDK Assignment1Install& Splash Bypass2ABB1...ABBnTesting Logic3ABB1...ABBnEvaluationLogic4ABB3.htmlUI XML &screenshotsServer logs &AJAX dataprovided by UI Automator. There might be ad hoc APIs and drivers
to obtain this information for some browsers, but our framework
requires a method that works seamlessly for all browsers.
Therefore, Hindsight uses Optical Character Recognition (OCR)
to analyze page content: it captures the current screenshot (using
ADB’s screencap command), and then uses OCR to search for
textual clues that are carefully built into the tested webpage to locate
the elements (buttons, images, text boxes, etc.) to interact with. The
specific text to search for is ABB-specific and is determined by
the ABB testing and evaluation logic mentioned earlier. Currently,
Hindsight uses a combination of the Tesseract OCR Engine [13] and
Google’s Vision API [31] for this functionality.
Although simple in theory, the OCR method is fraught with non-
trivial problems. Firstly, browsers use different rendering engines
that render the same HTML page in vastly different ways. For
one thing, there is no browser-agnostic mapping between the on-
screen coordinates of rendered elements and their HTML-specified
location, even if the HTML file specifies absolute locations for the
elements. As another example, different browsers may use different
font sizes to render the same text in a page. To cope with this
problem—after observing how a large number of browsers render
webpages—we concluded that critical text elements in ABB HTML
pages have to be repeated multiple times with different font sizes
and families to increase their chances of being picked up by OCR.
The second problem with OCR is that the rendered webpage
is not always the only content shown in a browser window. Of-
ten, browsers may include messages (such as usage tips, update
reminders, etc.) that are not part of our HTML, and may even cover
some of the content that is critical to the OCR analysis. We deal
with this problem in two ways. First, as often these message boxes
are part of the application-level DOM, we use a technique similar to
what is described in Section 4.2.3 to automatically click through and
dismiss them, before the OCR analysis begins. Second, we design
the ABB HTML pages such that the critical elements are located
close to the center of the screen—to the extent that this is possible
in a browser-agnostic fashion—to reduce their chances of being
covered by such messages.
It is worth mentioning that, in addition to webpage content, OCR
is also used as a secondary method for locating application-level UI
elements. This is because some browsers do not always render the
application-level elements using standard Android libraries, and
for some other browsers, the dumped XML data is not consistent
with the visible UI of the application. In these cases, OCR is used
as a backup method to locate the application-level elements.
This hybrid of XML dumps and OCR has resulted in a robust
browser-agnostic analysis infrastructure that works well in practice,
as indicated by our manual verification results (Section 4.3).
4.2.2
SDK Assignment. Each APK requires certain Android APIs
to function properly. In Android, the API level is denoted by the
so-called Software Development Kit (SDK) version number: a mono-
tonically increasing number with 24 being the highest at the time of
this writing. APKs contain a manifest file which includes the mini-
mum (skdVersion) and target (targetSdkVersion) SDKs the application
supports. Ideally, one should test each APK on all SDK versions in
this range as it is conceivable that browsers could behave differently
given different SDK features (e.g., the browser could use different
API calls given different SDK versions). However, given the limited
number of physical Android devices in the current framework, and
that each device can have only one Android version installed at a
time, this would increase the testing time significantly.
To keep the problem manageable, a compromise was made. We
first analyzed all the APKs and collected their SDK requirements.
For each APK, we considered SDK versions in the range [minimum,
target]. Then, we chose four different SDK versions that would
allow us to cover all the tested APKs, and installed each of them
on a different Android device. For the current dataset, these are
SDKs 16, 18, 21 and 23, corresponding to Android versions 4.1.2,
4.3, 5.0 and 6.0, respectively. Hindsight uses this knowledge of the
installed SDK versions to approximate an even distribution of APKs
to devices to maximize the testing speed, while ensuring that each
APK still gets to run on a supported SDK version. All of this is done
in a browser-agnostic fashion, just by extracting the metadata that
is available in each APK.
4.2.3 APK Installation and Splash-Screen Bypassing. In the next
step, Hindsight uses ADB to install each APK on its assigned device.
To check the installation success, it launches the browser and directs
it to a specific webpage, and checks for its successful loading. As
Table 3 shows, there are 211 APKs that fail in this step because of
either an installation failure or crash upon launch. Currently, we are
excluding these APKs from further testing; in the future, Hindsight
will try to install and run them on other Android versions.
A more serious challenge is to bypass the splash screens. Ide-
ally, a browser should just display the requested webpage when
launched. However, a large fraction of browsers (1,600+ APKs in
the current dataset), instead show other initial screens that have to
be bypassed before the webpage is displayed. These screens include
a variety of content from permission requests, to advertisements, to
introduction to the application itself—and often, multiple of these.
Hindsight cannot test the browser without bypassing these screens.
To deal with advertisements embedded by browsers, we tried a
variety of methods and the most successful solution was to use a
third-party AD blocking application called AdGuard [1] that works
by monitoring and filtering the network traffic into and out of
the device. This gives us a browser-agnostic method of filtering
advertisements that works quite well in practice.
For other splash bypass problems, our approach is to automati-
cally mimic a user’s interaction with the application. Informed by
our analysis of a large number of splash screens of tested browsers,
Hindsight uses a generic, browser-agnostic method of delivering
guided tapping and swiping inputs (using ADB) to the device. In
each step, the UI is analyzed to find text that often indicates tap-
pable buttons such as “Next”, “Continue”, “Okay”, etc. If such text
is found, a tap event is delivered to that location on the screen. If
not, Hindsight tries swiping the screen to move to the next screen.
Then, the UI is analyzed again to determine if we are at expected
webpage or there are more splash screens. This process is repeated
up to a configurable maximum number of times.
This method works well in practice for most browsers. In the
current dataset, 1,606 APKs show splash screens of which Hindsight
can bypass 1,108. Of the remaining ones, there are some whose
splash screens are hard to analyze to find tappable items, and some
that require more complex interactions (such as signing up for an
account or entering one’s email address) that cannot be bypassed
using this method. We exclude such APKs from further testing.
4.2.4 ABB Design, Testing, and Evaluation. The main challenges
of these steps have to do with UI analysis, as explained in Sec-
tion 4.2.1. Here we discuss two other problems that required cre-
ative solutions in Hindsight. We should emphasize that this is just
a sampler of the common challenges we faced; there were multiple
other ABB design challenges and tricks that we had to omit due to
space limitations.
To begin, we should note that some testing data cannot be easily
extracted through UI analysis. For example, in ABBs #1–6, we need
to determine if an input event was routed to an invisible iframe, or
in ABB #24, we need to know an iframe’s dimension to detect bal-
looning. OCR-based UI analysis is not a reliable method to collect
such information. Instead, we can easily collect such information
using JavaScript in an ABB’s HTML file. However, there is no direct
communication channel to convey that information to the evalua-
tion logic that is running on the control computer (which talks to
the Android device using ADB). To solve this problem, Hindsight
creates such a communication channel by sending this information
as AJAX (Asynchronous JavaScript and XML) messages from the
ABB HTML page to the webserver where they are saved. During
ABB evaluation, this data is fetched by the evaluation logic and
used for vulnerability analysis. Moreover, for mixed-content-related
ABBs, we also fetch the HTTP server logs to determine whether a
particular resource was requested by the browser. Figure 3 shows
this side communication channel used by the evaluation logic.
Another major challenge was caused by browsers’ support for
multiple tabs. Most modern browsers can simultaneously have mul-
tiple open tabs and show the number of tabs, and sometimes the
page titles, in the application screen. This seemingly “benign” fea-
ture caused major trouble for some of our ABBs. For example, in
ABBs #21-22, we do a pixel-wise comparison between the screen-
shot of a pure-HTTPS page and a mixed-content page with the
same design. The goal is to identify the existence of mixed-content-
related icons or warnings, with the assumption that the only dif-
ference between the two versions would be the presence of the
mentioned warning signs. However, the tab headers and tab count
that many browsers show would also be different after opening the
second page, and this would result in erroneously concluding that
there is a difference between the two pages, even if there are no
such warning signs.
Unfortunately, there is no browser-agnostic way to close tabs,
and simply closing and re-launching the browser application in
between webpages will not help either because browsers often re-
open all previously open tabs upon re-launch. Hindsight solves this
problem as follows. Right after the browser is installed and any
potential splash screens are bypassed, Hindsight saves a copy of the
browser’s Android folder where the application saves its internal
settings and history. There is one such folder per application in
Android and its path is determined by the package name of the
APK, and is thus easy to find. This gives a pristine copy of the
application’s state where there are no open tabs. Before launching
the browser to load a new page, Hindsight copies this state back
to make sure there are no traces of previously open tabs in the
browser history. This will ensure that our screenshots are free
Figure 4: ECDF of vulnerability vs. fraction of browser APKs
from the tab-related side effects that would otherwise cause testing
failures.