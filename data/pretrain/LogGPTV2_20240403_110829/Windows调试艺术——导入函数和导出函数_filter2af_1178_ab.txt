    timestamp : 0000 0000
    forward : 0000 0000
    name : 1d2c
    iat : 1abc
可以看到iat和int的值都是613c，继续按照换算公式得出文件地址为1b3c
我们就找到可之前所说的hint name结构了，同样在1d2c处我们可以看见dll的名字
说到这里基础的导入知识就结束了，但我们又会发现这样的导入机制还是存在问题的，可以想象下，如果我们的程序导入了多个dll，且每个dll都用了大量函数，那岂不是加载程序时要等待很长时间在修改IAT上吗？为了解决这个问题，微软给了两条路，一个是绑定导入表（bound
import table），一个是延迟导入表（delay import table）。
导入绑定表很简单，就是直接维护一张表，里面存放的函数地址直接就是va，它的原理其实很简单，因为dll加载的时候都会有个推荐的imageBase，如果按照这个基址加载了的话其实每个函数的虚拟地址也就是一定的了。
但是这个方法也有很大的问题，一旦发生dll没有按照推荐的imageBase加载的情况，那这张表里的地址就全部废了，还是得重新进行上面的操作，而这种情况又很常见，所以现在默认编译的程序都没有了这张表，可以在Data
Directory的第12项找到它的信息，可以看到在我们的程序中，它的va是0，也就是没有了。
另一条路叫做延迟导入表，这个方法可就科学多了，它的原理是指定一些dll不在程序开始时加载，只有当调用相应的函数时，才将该dll载入，这样就分散了导入的时间，极大提高了速度。同样，也可以在Data
Directory里找到该项，根据上面的换算大家可以自己找一下相应的数据，这里不在赘述
###  导出函数的数据结构和机制
还是先从整体看一下导出函数的数据结构，这里我只列举了经常要用到的结构，详细的结构体在下边会提到。
有了前面的讲解，这个结构就相当简单了。这次我们反过来从大到小，首先看最左边，是个类似import
Descriptor的东西，但是由于导出是相对于整个程序来说的，所以export的descriptor只有一个，它的name指向了程序的名字，base是个基址，我们的addressOfNameOrdinals指向的hint实际上的号码是hint
1减去base的值（号码也就是其他程序import时需要的号码），addressOfFunc指向了函数的地址，和AddressOfName一一对应。
可以看到export比起import更为简单，这里就不再演示在文件中的寻找了，可以参考上面的import自行操作。
另外大家可以尝试一个很有意思的操作：name和func地址是一一对应的，如果我们更换func地址中的两个值会发生什么呢？
## 病毒的导入机制
由于导入表、导入名表的存在，一旦病毒调用了被认为是“危险”的函数，那杀毒软件通过检测文件在病毒运行前就很轻易的可以逮住它。病毒作者自然不会坐以待毙，现在的病毒往往会自己实现导入机制来达到免杀的目的，我们下边就用一种最简单的方式实现我们自己导入函数来作为练习。
首先我们要明确思路：
###  利用windbg寻找dll的导出函数
在动手开始写代码之前，我们首先用windbg来调试一下明确一下思路
我们选择kernel32作为要测试的dll，lmvm命令来查看kernel32的详细信息，这里主要需要的是start的va，也可以记录一下时间戳来验证后面我们找到的结构是否正确。
dt用来以相应的结构体解析当前的地址，我们拿到dos头信息后，利用dos头中的e_lfanew来找到nt头的位置，即0x75250000+0n248，0x752500f8
接着计算op头的位置，即0x752500f8+0x18，0x75250110
DataDirectory我们上面说过，就是存储各种表的结构，我们找到它的位置，即0x75250110+0x60，75250170，同时到这里我们就失去了结构体的信息（因为接下来用到的结构体信息在ole32中，但是考虑到很多程序并不会加载这个dll，所以我们下边不用这些结构体信息了），export我们之前找过了，是第一个表，相当于偏移为0，我们直接打印这个地址的内容
按照上面的知识，第一个是export表的rva，第二个是size，我们根据rva算一下具体的地址，也就是972c0+75250000，即752e72c0
export descriptor的详细结构如下
     +0x000 Characteristics  
       +0x004 TimeDateStamp  
       +0x008 MajorVersion 
       +0x00a MinorVersion
       +0x00c Name      // 模块的真实名称
       +0x010 Base      // 基数，加上序数就是函数地址数组的索引
       +0x014 NumberOfFunctions     // 指向的数组元素个数
       +0x018 NumberOfNames         // 指向的数组元素个数
       +0x01c AddressOfFunctions    // 指向函数地址
       +0x020 AddressOfNames        // 指向函数名字
       +0x024 AddressOfNameOrdinals // 指向输出序号
我们打印一下相关信息
可以看到第二个字段时间戳和我们开始记录的一样，说明我们找对了，接着循环打印一下导出函数的名字
这条命令和c语言的for循环意思相同，循环的是（）里的dd打印出来的内容，循环做的操作就是{}的内容，$t0是windbg供我们自己使用的寄存器，相当于变量。
到这里我们就成功了，读者可以自己仿照上面的命令打印函数地址从而得到一一对应关系。
###  代码实现
病毒要实现自己的导入机制，那必须要能够将dll加载到内存中，这就需要LoadLibrary这个函数，这个函数在Kernel32.dll中，这个dll无论是哪个程序都会加载的，我们现在的首要任务就是要找到这个dll的导出表。
        __asm{
              mov eax, fs:[0x30]
                mov eax, [eax + 0xc]
                mov esi, [eax + 0x1c]
                lods dword ptr ds : [esi]
                mov eax, [eax + 0x8]
                mov kernel_base, eax
                ret
        }
上面的代码如果看不懂的话，可以参考之前一篇《Windows调试艺术——利用LDR寻找dll基址》，里面详细说明了如何去寻找dll基址
我们定义自己的LoadLibrary，保证参数和原有的相同
    TCHAR szLoadLibrary[] = "LoadLibraryA"
    typedef HMODULE (WINAPI* _LoadLibrary)(
        LPCTSTR lpFileName 
        );
    _LoadLibrary MyLoadLibrary = (_LoadLibrary)0xFFFFFFFF;
我们按照上面windbg调试的过程来找到Image_export_directory
    pe = *((DWORD*)(kernel_base + 0x3c));
    pImage_export_directory = (PIMAGE_EXPORT_DIRECTORY)((*((DWORD*)(kernel_base + pe + 0x78))) + kernel_base);
接着直接拿到export的函数名地址和函数的个数
    NumberOfFunc = pImage_export_directory->NumberOfFunctions;
    AddressOfNames = pImage_export_directory->AddressOfNames + kernel_base;
接着循环遍历，因为名字和函数的地址是一一对应的，所以我们只需要找到和LoadLibrary名字相同offset，然后加上AddressOfFunctions的地址就可以了。
    for (int i = 0; iAddressOfFunctions + kernel_base)) + i) + kernel_base);
            }
以同样的方法我们还可以拿到GetProcAddres函数，改函数能够指定dll名和func的名字拿到相应的函数，这样我们就可以随意拿到任何我们想要的函数，这里就不再赘述了。
当然这个机制还是有很大的缺陷，比如导入函数时结构太明显，很容易被逆向者识破；导入函数时需要函数名，还是会暴露敏感信息等等。随着今后的学习，我们还会一点点完善这个程序。