### 5.4 LastPass

LastPass has been installed by over one million users and supports a11y, Autofill Framework, and OpenYOLO. With a11y, LastPass uses a permanent notification to alert the user if the currently active app has a form to fill. The user must tap the notification to show a popup window with their credentials. With the Autofill Framework, the user does not need to tap the notification; the popup window appears directly, similar to Dashlane. This highlights that the support for OpenYOLO is still immature. However, the current implementation allows the user to select credentials and send them to any requesting app, even if it is unidentified.

#### Mapping Implementation
LastPass relies on two types of mappings. The first is heuristic-based and works as follows: given a package name (e.g., `aaa.bbb.ccc`), LastPass splits it into components separated by dots (e.g., `aaa`, `bbb`, and `ccc`) and builds a domain name pattern using the first two components in reverse order (e.g., `bbb.aaa`). LastPass then suggests all credentials associated with domain names that match this pattern.

If no entry exists, LastPass allows the user to search among their locally stored credentials and select one, thereby defining a new entry for the mapping. These entries can be shared with the community, forming the second type of mapping: a crowdsourced mapping. LastPass downloads this global database during the first installation. As of now, there are 19,273 crowdsourced mapping entries, many of which have repeated package names and domains, mostly in a many-to-one relationship. For example, the package names `com.tinder` and `com.tinderautoliker2` are both associated with the web domain `facebook.com`. Tinder is a dating app that requires Facebook credentials for authentication, while TinderAutoLiker is an app available on alternative markets that automates actions on Tinder services. It is worth noting that the crowdsourced mapping contains errors, such as invalid domains, domains with typos, and IP addresses belonging to local networks.

#### Exploitation
To exploit the first mapping strategy, an attacker can create an app with a package name that begins with the reverse of the target domain name. For example, an app with the package name `com.facebook.evil` can be uploaded to the Play Store without issues. When the user opens this app, LastPass automatically suggests credentials related to `facebook.com`.

Conceptually, an attacker could also exploit the second mapping. If the attacker can inject an arbitrary association, they can indicate to LastPass that their package name should be associated with a specific domain, such as `facebook.com`. We tried sharing an association from one of our package names to one of our test websites, but it did not become public. We assume that LastPass makes these new associations available to all users only when a threshold number of suggestions is reached. An attacker could try to create a high number of fake accounts and share these fake associations, but we opted not to do this for ethical reasons. Additionally, an attacker can already manipulate LastPass's suggestion mechanism by exploiting the first mapping.

### 5.5 1Password

1Password has been installed by over one million users and supports a11y, Autofill Framework, and OpenYOLO. Unlike other password managers, 1Password organizes its entries into categories (e.g., credit card, database, driver license, login, wireless router, etc.). We focused on the login category. When the user selects a form, 1Password behaves differently based on the supporting methodology: with Autofill Framework, it shows a small window labeled "Autofill with 1Password." Clicking on it prompts the user to enter the 1Password master password and search through saved credentials. With a11y, it directly loads a window for searching among credentials. Although 1Password adopts the OpenYOLO library, the implementation contains just a stub that always returns empty credentials.

#### Mapping
1Password does not provide any mapping but suggests each stored credential through a searchable list, leaving the choice to the user. In other words, it is possible to autofill any requesting app with any stored credential.

#### Exploitation
Exploiting 1Password was straightforward and did not require further customization of the app. However, this attack is less practical than others because the attacker does not have fine-grained control over the list of auto-suggested credentials.

### 5.6 Google Smart Lock

Google Smart Lock (GSL) is part of Google Play Services for Android. It was created to automatically lock the device when the user is not around and unlock it when specific user-defined constraints are met, such as the presence of specific wireless connections, trusted locations, or when it recognizes the user’s face or voice. GSL includes the password manager originally integrated into the Chrome browser, offering a password-saving feature and synchronization with the Chrome desktop browser.

#### Mapping
We believe that GSL's mapping is securely implemented, but the burden of creating the mapping is delegated to the developer, who must provide all necessary information to Google. The official documentation describes a multi-step process based on Digital Asset Links, which verifiably links an app to a website. However, this process is not fully automated and requires developers to manually fill out a Google Form and provide a set of information. This centralized and manual process is difficult to scale. To improve this, Google should promote the adoption of Digital Asset Links and verify their correct implementation. Making the current mapping database publicly available would also benefit the community.

### 6 Instant Apps for Full UI Control

The attacks described so far require a malicious app to be installed on the victim’s device. This section discusses how this prerequisite can be bypassed by abusing Instant Apps, a technology introduced by Google that allows users to "try" Android apps at the touch of a button without full installation.

#### Mechanism
The developer builds an Instant App, a small but functional version of the app, and uploads it to the Play Store. They associate a URL pattern with it, pointing to a domain name they control. When the user browses to a URL matching this pattern, the Android framework starts downloading and running the Instant App. The developer must prove to Google that they control the target domain name through a multi-step procedure called App Link Verification, which relies on the Digital Asset Links protocol.

From a usability perspective, Instant Apps are a great feature, reducing friction for users to test and possibly install an app. However, from a security standpoint, Instant Apps provide a venue for attackers to facilitate phishing attacks. The key observation is that Instant Apps allow an attacker to move from web phishing to mobile phishing. On the web, users can check the domain name, HTTPS connection, and SSL certificate. In the mobile world, there are no such indicators, making it easier for a malicious app to spoof the UI of legitimate apps, even for security-savvy users.

#### Attack Scenarios
Once the attacker gains full UI control, they can create an Instant App that resembles the real Facebook app or the browser itself, showing a spoofed `facebook.com` domain name and a green lock. This attack can be made indistinguishable from a legitimate scenario.

### 7 Practical Phishing Attacks

The flaws in password managers and the features of Instant Apps are independent, but they complement each other in phishing attacks. Password managers can be tricked into revealing users' credentials, but these attacks require a malicious app with an attacker-chosen package name to be installed on the victim’s phone. Instant Apps can be used to achieve this.

#### Key Insight
Instant Apps, although not fully installed, appear as if they were to the Android framework and its components. The package name, application name, and icon are controlled by the attacker. Password managers do not distinguish between full and Instant Apps, allowing credentials to be leaked to them.

#### Hidden Password Fields
We conducted experiments to assess whether mobile password managers are vulnerable to automatically filling hidden fields. A hidden field is one that is not visible to the user. An attacker could create a form with a username field and a hidden password field, causing the password to be silently leaked. We tested four techniques to make a password-related `EditText` invisible: transparency, small size, same-color background and foreground, and the invisible flag.

- **Transparency**: Setting the alpha value to 0.01 keeps the field invisible and allows the autofill mechanisms to work.
- **Small Size**: Password managers autofill fields even if their size is 1dp × 1dp.
- **Same-Color Background and Foreground**: This technique works with a11y but not with the Autofill Service, which overlays the autofilled fields with a yellow overlay.
- **Invisible Flag**: a11y-based password managers do not autofill these fields, but those using the Autofill Service do.

#### Discussion
These techniques make end-to-end phishing attacks more practical and problematic. While the unsuspecting user uses password managers and Instant Apps to quickly provide their email address or username, their credentials could be silently leaked with just a few clicks. The attacks are possible due to the vulnerable mapping algorithms in current password managers.

### 8 A Secure-by-Design API

The attacks presented in this paper are due to design problems in the current mechanisms supporting autofill, from a11y to the more recent Autofill Framework and OpenYOLO. The key issue is that these mechanisms use package names as the main abstraction, leaving password manager developers with the task of mapping apps to their associated domain names. Given the identified security issues and misplaced trust assumptions, third-party developers should not be responsible for this critical step.

#### getVerifiedDomainNames() API
We propose a new API, `getVerifiedDomainNames()`, that implements a secure-by-design mechanism using domain names as the only abstraction. Since credentials are created for websites, this is a better abstraction level. The API would directly provide password managers with a list of domain names that a given app is legitimately associated with, performing all necessary security checks internally. This API would follow the paradigm of OpenYOLO, with the main difference being that password managers would query for domain names, not package names.

#### Integration and Implementation
The request for auto-filling a form follows several steps. First, the client sends an Intent to the password manager, which queries the `getVerifiedDomainNames()` API. The API returns the verified domain names, and the password manager can then safely suggest the appropriate credentials.