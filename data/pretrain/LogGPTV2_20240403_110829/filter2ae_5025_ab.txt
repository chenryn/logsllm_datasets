**操作资源数据**  
如果运行环境的检测全部通过，该 PE Loader 则加载名为 “FYBLV”
的资源数据，并从资源中取出后续要拷贝自身的文件夹名称和文件名的字串。然后以参数3作为分隔符，依次取出其它的数据并保存在自定义的结构体中。资源中提取出的结构数据内容如下图：（图中标红的数值为保存在结构体中的8个成员数据）：
经过分析，结构体中每个成员的具体功能可参考下图：
**释放与驻留**  
如果 bIsCpySelf 值为 TRUE ，那么该 PE Loader 会将自己复制到
`C:\Users\SuperVirus\AppData\Roaming\ptdkuybasm\"`目录下并把新文件命名为 szPathName
里保存的内容。接着在 Windows 的启动文件夹里创建一个.url的网页文件快捷方式，我们查看该 PE Loader
创建的快捷键属性，发现此快捷键的访问协议格式为file:///
，即指向的资源是本地计算机上的文件，而后面紧跟的路径便是复制过去新文件的全路径。通过此方法则可实现开机自启动以达到长期控制主机的目的。
创建的快捷键属性
最后，该 PE Loader 根据结构体中的 dwFlag 值来选择后续的 RAT 载体，所对应的 RAT 载体详见下表：
而在本样本中，此成员的值所对应的载体为当前运行的自身进程。
**获取RAT并执行**  
在准备好 RAT 的傀儡进程后，该 PE Loader 将结构体中的 szKey 值作为 key，和名为“BJU”的资源传入解密函数。解密的算法仅为 XOR
运算，具体算法代码如下图：
接着，该 PE Loader 重新创建新进程并将其设置为挂起状态。然后卸载此进程映像，并把在内存中解密出的新的 PE
头部，以及节数据依次写入到挂起的进程中，最后修改 OEP 并启动运行。
#### 4.1.4 WARZONE RAT模块
我们将此 PE 文件从内存中 dump 出来，通过分析和溯源后发现，该 PE 与国外某黑客论坛中售卖的 WARZONE RAT
同出一辙。由此我们推测，此处使用的 RAT 模块可能为WAREZONE RAT1.6 版本，此版本为 C++
语言编写，主要功能包括远程桌面控制、键盘记录、特权升级（UAC绕过）、远程WebCam、窃取凭证信息、Remote Shell、Offine
Keylogger 等等。下面我们会对RAT中的核心部分做简要介绍。
远控程序Warzone后台界面
##### 4.1.4.1 获取C&C地址
为了防止 C&C 被轻易发现或者批量提取，该木马将其加密后存放在“.bss”的资源节数据中。通过对解密函数的分析我们发现，这里采用了 CR4 算法。CR4
生成一种称为密钥流的伪随机流，它是同明文通过异或操作相混合来达到加密的目的。解密时则使用密钥调度算法(KSA)来完成对大小为256个字节数组 sbox
的初始化及替换。具体流程如下：
1） 用数值0~255来初始化数组sbox。
2） 当开始替换的时候，获取硬编码在资源里的密钥，长度为0x32个字节。 (在资源数据中前0x32个字节是密钥，其余0x68个字节则是待解密的数据)
密钥和待解密数据
3） 密钥流的生成是从 sbox[0] 到 sbox[255]，对每个 sbox[i]，根据当前 sbox值，将 sbox[i] 与 sbox
中的另一个字节置换，然后使用密钥进行替换。当数组 sbox完成初始化之后，输入密码便不再被使用。
4） 替换后的 sbox 数组中的数值如下图：
5）通过替换后的sbox和待解密的数据进行 XOR 运算后，最终得到服务器的 host 地址`asdfwrkhl.warzonedns[.]com`。
##### 4.1.4.2 执行注入功能
当成功解密出 C&C 地址后，该木马则开始将一段 Shellcode
代码注入到傀儡进程中。在注入功能开启时，木马程序首先会根据操作系统架构(64/32)来选择注入到 cmd.exe 或 explorer.exe
中。相关代码如下图所示：
接着，该木马使用远程线程的方式来注入核心功能 Shellcode 代码，并在启动远线程执行时，修改写入目标进程内存偏移的 0x10E 处为开始执行代码。
通过分析我们发现，这段注入代码的主要功能是利用傀儡进程来保护Dropper(hqpi64.exe)。其会定时检查 Dropper
是否处于运行状态，如被关闭，则重新启动。 以此达到进程守护的目的。
进程守护功能
##### 4.1.4.3 通信协议解析
1） 连接服务器  
当成功注入到目标进程后，该木马则开始尝试与前文解密出的 C2 服务器进行连接，并会根据服务器返回的内容执行指定操作。
接收数据包的结构大致如下：
2） 解密控制包  
该木马首先将接收到的前 0x0C
个字节作为头部数据调用自定义`fn_Decrypt_CR4`函数进行解密（密钥以明文方式硬编码在代码中）。成功解密后，取出偏移 0x04 处的 DWORD
数值作为是否继续执行以下流程的判断条件（此 DWORD 数值里保存着除去 0x0C 后，剩余的数据长度）。
若条件符合，则该木马会再次调用`fn_Decrypt_CR4`函数对整个数据（头部数据+跟随数据）重新进行一次解密。接着调用自定义`fn_Distribute`函数，并取出数据中的
OpCode 来执行 switch 中不同的操作。相关代码如下图所示：
3） 执行控制指令  
通过我们前面的分析可以看到，该木马控制指令中包含了大量用户隐私信息的窃取功能。最终受害者的敏感数据信息，都会根据远程服务器的指令回传给远程服务器。
##### 4.1.4.4 控制指令功能
当远程服务器成功响应数据后，该木马就会根据服务器返回的内容执行指定操作。部分控制指令功能如下表所示：
**窃取凭证信息**
窃取的信息包括 Google Chrome、 Mozilla Firefox 等浏览器和 Outlook、Thunderbird、Foxmail
邮箱客户端保存的凭证信息等。 该木马获取相关凭证信息以及实现方法如下表所示：
a） 提取 Chrome 凭证
Chrome 浏览器保存用户登录信息的数据库文件为`%AppData%\Local\Google\Chrome\UserData\Default\
Login Data`，该数据库是 sqlite3 的数据库，数据库中用于存储用户名密码的表为 logins 。logins 表结构定义如下：
从该表中读取的内容是加密的，通过`CryptUnProtectData`函数对其进行解密便可以获取到明文数据。最后该木马将解密后的数据保存在名为“xxx.tmp”（“xxx”为
Base64 解码出的字串）的临时文件中。
b） 提取Mozilla凭证信息
该木马首先检索和读取profile.ini配置文件，并提取关联的文件夹路径。接着利用nss3.dll来解密数据库signons.sqlite中被加密的内容，并通过SQL语句获取到主机名、被加密的用户名及密码，然后调用nss3.dll中的导出函数对sqlite查询出的用户名和密码进行解密。最后同样的，将解密后的内容保存在名为”xxx.tmp”的临时文件中。
用户名和密码
c）OutLook 凭证获取
电子邮箱 OutLook 的用户登录凭证一般会保存在注册表中， 该木马通过枚举注册表·Software\Microsoft\Windows
NT\CurrentVersion\Windows Messaging Subsystem\Profiles·下的所有子健，读取键名为下表中的数据比如
password 进行解密还原出明文的密码。最后将获取到的用户的 Outlook 登录凭证写入名为“xxx.tmp”的临时文件中。
获取Outlook邮箱的用户信息
d） Thunderbird 凭证获取
同样，Thunderbird 邮箱的凭证数据也是存储在数据库文件`%AppData%\\Thunderbird\\Profiles`中，该木马通过
nss3.dll 的导出函数对储存文件的密码进行解密。最后将解密后的数据保存在名为“xxx.tmp”的临时文件中。
e） FoxMail 凭证获取
该木马在 FoxMail 的安装目录下查找 Storage
文件夹，接着遍历所有当前邮箱账户目录下的`\Account\Account.rec0`文件。此文件实际上就是用来存放账户相关信息的，加密后的密码就默认保存在这里。木马获取并解密此文件后便可窃取到`Foxmail`的凭证信息。
f） 上传获取到的凭证信息
窃取完所有信息后，该木马则使用`fn_Decrypt_CR4`加密函数将文件内容做加密处理并将它们发送给远程服务器。
**键盘记录**
a） 离线键盘记录（常驻）
当接受到的控制命令为为启用脱机键盘记录时，此木马则使用钩子来实现键盘记录功能。该钩子将捕获按键和窗口名信息保存在`C:\user\sss\AppData\Local\Microsoft
Vision\`目录下，文件则以当前日期和时间来命名。相关代码的实现如下图：
b） 临时键盘记录
当远程控制指令为开启键盘记录时，该木马则通过 Raw Input
方法来实时监控当前键盘的使用情况。接着将捕获到的键值进行判断并转化为字符值。同样的，这些字符值和窗口名信息保存在`C:\user\sss\AppData\Local\Microsoft
Vision\`目录下，文件则以当前日期和时间来命名。
按键和窗口名信息的获取
**Remote VNC安装**