### 关于Tomcat中三个Context的理解

在Tomcat中，`StandardContext`、`ApplicationContext` 和 `ServletContext` 是与上下文（Context）相关的几个重要概念。本文将详细解释这些概念及其关系。

#### 什么是Context？

在Java开发中，“上下文”（Context）是一个常见术语，它表示某个事件或操作发生的背景信息。例如，在一个请求处理过程中，上下文会记录当前Web容器中的过滤器（Filter）、Servlet、监听器（Listener）、请求参数、请求路径以及全局参数等信息。通过这种方式，我们可以更好地理解和处理请求。

#### ServletContext

`ServletContext` 是Servlet规范中定义的一个接口，它提供了一组方法来获取和设置与Web应用程序相关的各种信息。主要功能包括：

- 获取和设置初始化参数
- 访问资源文件
- 记录日志
- 管理Servlet和过滤器的注册
- 管理会话配置

以下是 `ServletContext` 接口的部分代码示例：
```java
package javax.servlet;

public interface ServletContext {
    String getContextPath();
    ServletContext getContext(String uripath);
    Servlet getServlet(String name) throws ServletException;
    Enumeration<Servlet> getServlets();
    Enumeration<String> getServletNames();
    void log(String msg);
    void log(Exception exception, String msg);
    void log(String message, Throwable throwable);
    String getRealPath(String path);
    String getServerInfo();
    String getInitParameter(String name);
    Enumeration<String> getInitParameterNames();
    boolean setInitParameter(String name, String value);
    Object getAttribute(String name);
    Enumeration<String> getAttributeNames();
    void setAttribute(String name, Object object);
    void removeAttribute(String name);
    String getServletContextName();
    // 其他方法...
}
```

#### ApplicationContext

在Tomcat中，`ApplicationContext` 是 `ServletContext` 接口的一个实现。为了遵循门面模式（Facade Pattern），Tomcat 实际上使用了 `ApplicationContextFacade` 来封装 `ApplicationContext`。门面模式的主要目的是为复杂的子系统提供一个简化的接口，从而降低系统的复杂性。

`ApplicationContext` 实现了 `ServletContext` 规范中定义的一些方法，如 `addServlet` 和 `addFilter`。然而，研究其源码可以发现，`ApplicationContext` 的许多方法实际上都是调用 `this.context` 中的方法，而 `this.context` 是一个实例化的 `StandardContext` 对象。

#### StandardContext

`StandardContext` 是 Tomcat 中真正起作用的 Context 实现类，存在于 `org.apache.catalina.core.StandardContext` 包中。它负责与Tomcat的底层进行交互，并提供了大量的功能来管理 Web 应用程序的生命周期和配置。

#### 关系图

以下是一张展示 `ServletContext`、`ApplicationContext` 和 `StandardContext` 之间关系的图：
```
+-------------------+       +---------------------+       +----------------------+
| ServletContext    |  <--- | ApplicationContext  |  <--- | ApplicationContextFacade |
+-------------------+       +---------------------+       +----------------------+
                          ^                             ^
                          |                             |
                          |                             |
                          |                             |
                      +-----------+               +-------------+
                      |           |               |             |
                      |  this.context  (StandardContext)   |
                      |           |               |             |
                      +-----------+               +-------------+
```

#### 内存马的应用

以添加过滤器为例，从上面的分析可知，`ApplicationContext` 和 `StandardContext` 都有 `addFilter` 方法。实际应用中，可以选择任意一种方式。例如，三梦师傅在其文章《基于Tomcat的内存Webshell无文件攻击技术》中利用反射修改了Tomcat的LifecycleState，绕过限制条件调用了 `ApplicationContext` 中的 `addFilter` 方法。

然而，由于最终调用的还是 `StandardContext` 的 `addFilter` 方法，因此可以直接调用 `StandardContext` 的 `addFilter` 方法，从而省去绕过一系列判断的过程。具体的实现细节可以参考相关公众号文章。

希望本文能够帮助你更好地理解Tomcat中的这三个Context的概念及其关系。