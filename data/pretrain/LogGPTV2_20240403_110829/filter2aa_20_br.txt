修改邮箱地址后的邮件通知，需要给修改前后的两个地址都发送邮件。给旧地址发送邮件的目的是为了在邮箱地址被其他人恶意修改后能够及时通知到真正用户。
修改邮箱地址时需要的对策总结
功能方面的对策
邮箱地址确认
再认证
邮件通知（修改前后的两个邮箱地址）
针对容易发生的漏洞的对策
SQL 注入漏洞的对策
CSRF 漏洞的对策（再认证的话可以解决此问题）
5.2.4 密码找回
在用户忘记密码时，我们要通过某些手段告知用户密码或者让用户设置新密码，这个功能称为密码找回或者密码重置。
不管采用什么方法，都需要在确认用户的合法性之后，将密码告知用户或者引导用户设置新密码。把现在的密码告知用户，称为（狭义的）密码找回功能，告诉用户修改后的密码，或者引导用户设置新密码，称为密码重置。在这一节里，我们把这两种方式统称为“密码找回”。
密码找回分为面向管理员（不是供管理员找回自己的密码，而是管理员操作找回普通用户的密码）和面向最终用户两种。每个应用程序都应该提供面向管理员的密码找回功能，而面向最终用户的密码找回功能则会降低系统的安全系数，所以需要根据自己网站的特点来决定是否需要提供这个功能。
面向管理员的密码找回功能
有时候用户可能会忘记自己的密码，这时候他们就会向网站管理员求助。所以网站需要提供供管理员使用的找回密码功能。但是如果在管理员使用的密码找回功能里明文显示密码的话，就有可能存在密码被窃取等安全事故，所以一般都采用密码重置的方式实现。
管理员根据用户请求找回密码按照下面的流程进行处理。
1. 收到用户找回密码请求，对请求者进行身份验证
2. 管理员重置密码，将临时密码告诉用户
3. 用户使用临时密码登录后，立即修改密码
在第一步用户本人操作确认中，最常用的方法是通过电话确认用户注册时填写的个人资料等信息。但是这样很容易产生假冒他人的问题，所以需要根据自己网站的实际情况，选择最合适的确认用户合法性的方法。比如网银一般都会要求用户提供申请书并且加盖注册时使用的印章，然后将重置的密码通过信件邮寄给用户 20
 。
20
 根据银行不同，也有提供通过电话或者网站重置密码的。
在对用户进行身份合法性进行验证之后，需要将重置后的密码告诉用户，一般来说最好不直接通过电话，而是使用管理程序通过电子邮件通知用户。其原因有以下几条。
管理员或者用户都不会看到密码，不会造成密码泄露
如果有人冒名打来电话，能减少密码泄漏的风险
不管哪种情况，用户在收到重置的密码后应该立即修改密码。为了实现这个目的，可以使用“临时密码”，临时密码是只能用来修改自己密码的密码。用户只有在修改密码后，才能继续使用全部功能。
这里我们总结一下，供管理员使用的密码重置功能的需求有以下几点。
验证用户合法性时显示个人信息（通过电话或者书面确认）
生成临时密码并告知用户。临时密码不直接在屏幕上显示而是通过邮件发送
临时密码只能在登录后用来修改密码
面向用户的密码找回功能
忘记自己密码的用户可以通过面向用户的密码找回功能 21
 找回自己的密码或者重置密码。面向用户的密码找回功能也沿用在确认操作者的合法身份后再向用户发送密码通知的流程。下面我们对此进行详细说明。
21
 单说“密码找回”一般多指面向个人用户的“密码找回”功能。
对用户进行身份确认
面向个人用户的密码找回功能通常使用下面方法来确认操作者的合法性
让用户在注册时设置安全问题和答案，在用户找回密码时进行确认
通过向注册的邮箱地址发送邮件确认用户的合法性
但是上面的这两种方法都存在用户被冒充的可能性，第一种方法里如果安全问题是类似“你母亲的姓”之类的话，答案很容易被第三者知道。如果采用第二种方法的话，如果邮件是不加密发送的话，也存在着被监听的风险。
所以要认识到，在实现供用户找回密码功能的时候，存在用户被冒充的风险，只有在能接受这个风险的基础上再去实现这个功能。
如何发送密码通知
在确认了用户的合法性身份之后就要通知用户密码信息了，如何实现通知，有下面 4 种方法可以选择。
（A）通过邮件发送现在的密码
（B）发送供用户修改密码的 URL
（C）通过邮件发送临时密码
（D）直接转向修改密码页面
在本书里我们推荐使用（C）或者（D）方法。
方法（A）首先给人一种密码没有被加密的不安全感，其次，现在密码不是临时密码，万一被监听并盗取的话，在用户不知情的情况下可能会被持续盗用。所以不建议使用方法（A）。
（B）的话有一种强迫让用户养成查看邮件里附带的 URL 习惯的感觉，笔者觉得不是很好。
（C）虽然也存在被监听的风险，但是即使临时密码被攻击者得到并修改密码，用户会立刻收到修改密码的邮件通知，因为此时用户本人肯定还没有修改密码，所以立即可以知道之前的临时密码一定是被别人恶意盗用了。使用方法（C）的大致流程如图 5-21 所示。
图 5-21 方法（C）操作流程示例
在这种方法里需要注意的是，在用户输入系统不存在的邮箱地址时，也要显示保密问题确认页面。如果不这么做的话，攻击者一下子就能知道所使用的邮箱地址是否已经注册过了。所以需要在系统里保存一些预置的保密问题，当用户输入的邮箱地址不存在时，选择一个保密问题显示。当然，这时候用户无论怎么回答结果应该都是错误的。另外，对于同一个邮箱地址，每次显示的预置保密问题也应该是同一个。
在上面的操作过程中，确认保密问题是不可省略的一步。如果省略了，则随便谁都可以简单的把其他人的密码置为无效了。即使不能置为无效，也会发送重置密码邮件，给真正的用户带来困扰。
发送给用户的临时密码只能用于修改密码。此外用户在修改密码时，要通过邮件通知用户（请参考 5.2.2 节）。
下面图 5-22 是方法（D）的操作流程示意图。
图 5-22 方法（D）操作流程示例
（D）方法不会向用户发送临时密码，为了确认邮箱使用了令牌机制。另外，由于已经验证过了令牌，所以后面的“保密问题”步骤可以省略。
在用这种方式去实现密码找回通知的时候，需要注意下面几点。
首先，即使用户输入的邮箱地址不存在，也不显示错误信息，而仍然显示令牌确认页面。这么做是为了防止有人能通过观察输入不存在邮箱地址后的页面来判断出该邮件是否已经注册了。
其次，为了防止针对验证码（令牌）的暴力破解，可以考虑在验证码验证错误次数或者密码重置次数超过一定值之后，将账户冻结。但是，用户被冻结这件事在页面上不做任何提示，而是给真正的用户发送邮件，指引其向客服寻求帮助。
5.2.5 账号冻结
针对特定的账号，如果在安全性上出现什么问题的话，有时候我们可能会暂时冻结该账号。具体可能导致账号被冻结的可能原因有如下几点。
用户本人要求冻结（比如 PC 被偷了、手机丢了，或者收到了密码被修改的邮件等）
账号被非法使用的时候
除了上述行为之外，在用户违反了网站的使用规范等其他情况下也可能导致账号被冻结。
应该给管理员提供账号冻结及解锁的功能，并且像 5.2.4 节所提到那样，如果是用户自己要求冻结账号或者解锁的话，需要先进行用户的身份确认，然后再进行相应的操作。
5.2.6 账号删除
账号删除通常来说是不可恢复的操作，为了确认用户是否真的想删除账号，且为了预防 CSRF 漏洞，最好在操作时进行密码确认（再认证）。
除此之外容易在账号删除功能里出现的漏洞是 SQL 注入漏洞。
5.2.7 账号管理总结
这一节里我们对账户管理方面安全性上的注意事项做出了说明。下面我们总结了在各个功能里都需要注意的事项。
用户输入的电子邮箱地址一定要确认收信
进行重要操作的时候进行再认证
执行重要的处理后发邮件通知
另外，在账号管理里比较容易发生的安全漏洞也有下面几个。
SQL 注入漏洞
CSRF 漏洞
邮件头注入漏洞（邮箱地址注册、修改时）
5.3 授权
在本节中我们将介绍授权（Authorization）控制（访问控制）。
5.3.1 什么是授权
授权指的是给认证为合法的用户分配相应的权限，下面是一些权限的例子。
只有认证用户才能使用的功能
销户处理、转账、创建新用户（以管理员身份）等
只有认证用户才能查看的信息
非公开的用户私人信息、非公开的他人的个人信息（以管理员身份）、非公开的论坛内容、WebMail 等
只有认证用户才能执行的修改操作
用户本人的信息修改（密码、个人简介、页面设置等）、修改他人的个人信息（以管理员身份）、从 WebMail 发送邮件等
授权系统存在漏洞的话，会导致个人信息泄漏、权限被恶意使用等众多安全上的问题。
5.3.2 典型的授权漏洞
在这一节我们介绍比较有代表性的不合理的授权实现案例。
更改资源 ID 后可以查看没有权限查看的信息
很多 URL 里面都包含表示特定资源的 ID（这里我们叫作资源 ID），如果权限管理做的不够充分的话，那么有可能只通过修改 URL 里的这个 ID 就能查看本来没有权限查看或者修改的数据。
我们下面以图 5-23 的例子进行说明。图 5-23 显示的是登录 ID 为 yamada 的用户在登录网站后，查看自己个人信息的页面流程。个人资料表示页面（图右侧）的 URL 里面包括了要查看的资源 ID“id=yamada”这一查询字符串。
图 5-23 用户确认个人资料的页面流程
如果权限控制实现存在漏洞的话，我们可能只需要把这个 URL 里的 id=yamada 换成别人的用户 ID，那么就有可能查看本来无权查看的其他人的个人信息了。比如把 id 换为 id=sato 的话，就能查看 sato 的个人资料了。如图 5-24 所示。
图 5-24 通过修改资源 ID 查看别人的个人信息
这个例子里资源 ID 是放到 URL 里的，所以出现漏洞很容易理解。即使将资源 ID 通过 hidden 参数放到 POST 里，或者放到 Cookie 里，还是不能避免同样问题的。如果开发人员大意地认为 hidden 或者 Cookie 里的值不会被人修改的话，就可能因疏忽而导致发生类似的安全漏洞。
在这个例子里资源 ID 是用户 ID，在其他系统里它可能会是交易 ID、文档 ID、邮件消息 ID 等。不管哪种系统，都可能存在风险，只通过修改资源 ID 就能查看、修改甚至删除等。
只控制菜单的显示或不显示
第二个权限管理的失败例子是只做菜单显示和不显示上的控制。图 5-25 是这样的一个例子。图里显示的是一个作为管理员登录的页面跳转关系。
在这个例子里，如图 5-25 所示，在顶级菜单有指向管理员和普通用户的链接。
图 5-25 管理员登录时的页面流程
下面再来看看面向普通用户的登录流程，如图 5-26 所示。普通用户的顶级页面里只显示了一个指向普通用户功能的链接，但是如果从普通用户页面的 URL 里的 a001.php 推测管理员的网址，并在浏览器里尝试访问 b001.php 的话，就会看到管理员的功能了，也许还能够使用里面的功能。
图 5-26 普通用户通过修改 URL 访问管理员功能
在这个例子中，如果用户想越过自己的权限使用其他功能的话，需要知道其 URL。得到 URL 的具体方法有以下几种。
根据规则按顺序尝试 URL 中的字母或者数字（如图 5-26 所示）
尝试 admin 或者 root、manage 等管理员功能菜单里频繁使用的词汇
在曾经拥有权限的时候记住 URL 地址，在失去权限后利用记住的 URL 访问管理员功能
拿最后的例子来说，即使把管理菜单的 URL 做得很难被推测，也还是存在被恶意使用的可能性的。
使用 hidden 参数或者 Cookie 保存权限信息
授权漏洞的第三种类型就是使用 hidden 参数或者 Cookie 来保存权限信息的情况。比如通过设置一个 userkind=admin 的 Cookie 就能使用户能够使用管理员功能这样的网站。
在这种情况下，该 Cookie 很容易让人推测出管理员的 Cookie 值，即使使用数字作为用户类型，也同样存在被恶意使用的可能性。
授权漏洞总结
在本小节我们对授权中存在的 3 种类型的漏洞进行了说明。这些漏洞的共同问题在于如果对 URL、hidden 参数、Cookie 进行篡改的话，就可以非法使用网站的正常功能了。
要想正确实现授权功能，需要将权限信息保存到会话变量中去，这样攻击者就不能篡改权限信息了。并且在进行页面显示或者处理之前，还需要对用户权限进行检查。
专栏：将私密信息嵌入 URL 进行授权处理
也有不通过认证或会话管理技术来实现授权的方法，那就是在 URL 中嵌入一些私密信息，使只有知道这个 URL 的人才能访问。
将私密信息嵌入到 URL 中，有下面 3 种方法。
将 URL 中的文件名设为非常长的难以推测的随机字符串
在 URL 中嵌入一个令牌
在 URL 中嵌入访问票（Access Ticket）
但不管是哪种实现方式，在 URL 中嵌入私密信息的做法我们都是不推荐的。因为这违反了采用 POST 方法发送私密信息的原则（请参考 3.1 节），而且还存在下面列出的一些非常现实的风险。此外，它还会导致个人信息泄露。
通过 Referer 泄露 URL
用户自己将 URL 发布到论坛等地方将 URL 公开
搜索引擎可能会收录含有私密信息的 URL
因此原则上应该禁止采用在 URL 中嵌入私密信息的方式来进行授权，如果迫不得已不得不使用该方式的话，那么应该将 URL 的可访问时限限制在最短范围内，并且向用户强调公开此 URL 的危险性。
5.3.3 授权管理的需求设计
要想正确实现授权功能，必须先要在需求层次上进行必要的设计。笔者在检查漏洞工作中参加过很多次关于授权的审查，但是还从来没有看到过有谁能拿出书面的授权设计文档，来说明他们认为的“授权应该是怎样的”。更多情况下他们是潜意识里认为授权管理就是应该那么去做的。
在做权限管理的设计时，可以先创建一个权限矩阵表。下面以一个权限管理比较复杂的应用场景 ASP（Application Service Provider）为例，来看一下如何创建权限矩阵表，如图 5-27 所示。例子中的应用以 ASP 的形式，被公司 A、公司 B、公司 C 所使用。用户中除了整个系统的管理员以外，各个公司还有自己内部的企业管理者用来管理自己公司的员工等。
图 5-27 ASP 服务的例子
表 5-5 权限矩阵的例子
系统管理员
企业管理者
普通用户
添加公司
○
×
×
添加、删除企业管理者
○
×
×
添加、删除公司员工用户
○
○
×