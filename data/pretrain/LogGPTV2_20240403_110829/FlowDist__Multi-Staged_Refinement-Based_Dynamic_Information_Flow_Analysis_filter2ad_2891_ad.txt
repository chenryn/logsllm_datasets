### 6.3 Results and Analysis

In this section, we present the results for each research question (RQ), focusing on key findings, implications, and insights.

#### 6.3.1 RQ1: Effectiveness (Precision/Recall)

Table 2 summarizes the number of source-sink pairs and information flow paths identified by FLOWDIST, distinguishing between intraprocess and interprocess paths. For each source or sink in the configuration \( C \), FLOWDIST treated each exercised callsite as a separate source or sink. The last column shows the percentage of interprocess paths relative to all information flow paths per execution. Rows with no information flow paths found are highlighted in grey.

The number of exercised source-sink pairs and information flow paths varied widely and was generally independent of the subject size and input type. In 5 out of 18 cases, FLOWDIST did not identify any sensitive flows (e.g., for Voldemort-Load). In the remaining 13 cases, all identified paths were true positives. For Thrift, Voldemort-Load, and Netty, which had the smallest total numbers of pairs, no additional paths were found beyond those identified by FLOWDIST. This indicates that both precision and recall were 100% for the manually validated samples.

On average, 74% of the reported paths were interprocess. In 7 cases, the percentage of interprocess paths was above 50%, and in 3 cases, it was 100%. This suggests that conventional dynamic information flow analysis (DIFA) or dynamic taint analysis (DTA) would miss most sensitive flows in distributed program executions if they only analyzed flows within individual processes. This result also provides an alternative measure of recall for FLOWDIST compared to single-process DIFA/DTA, indicating the higher recall of our approach.

While our evaluation of recall was limited due to the lack of ground truth and the impracticality of manual curation for all queries, especially for large systems with complex executions, high recall (and thus a low false negative rate) is crucial, particularly for identifying security vulnerabilities. Compared to static approaches, the generally lower recall of dynamic techniques like ours is mainly due to the limited coverage of run-time inputs. However, a dynamic analysis naturally focuses on specific user-provided inputs and their corresponding executions. Therefore, the input coverage problem is considered orthogonal to the design of a dynamic analysis [78]. Manual validation and evaluations against real vulnerability cases confirmed that FLOWDIST found all information flow paths and related vulnerabilities, suggesting no false negatives for the given executions.

In addition, the precision and recall of a hybrid analysis (as in Step 2.3 of FLOWDIST) often compete with each other [84]. However, our approach aims to improve precision over a purely dynamic dependence analysis based on method-level control flows by conservatively pruning static dependencies with exercised control flows. This conservative nature allows FLOWDIST to maintain high recall while improving precision.

Interprocess flow analysis is essential for DIFA/DTA of common distributed systems. Manual validation suggested that FLOWDIST has very high precision and promising recall.

#### 6.3.2 RQ2: Efficiency (Time/Storage Costs)

Table 3 breaks down the time and storage costs of FLOWDIST across its two phases and the steps within each phase. The time costs include static analysis (St.), profiling (Run), and computing (method- or statement-level) paths between each source-sink pair (Query). The second column lists the original run time (Norm Run) of each execution, from which profiling overheads were computed as runtime slowdown ratios (Slowdown). The eighth column shows the time for coverage analysis (Co.). The last column is the total storage cost (Storage) for all phases per execution, including storing traces of method and branch events in Phase 1, statement coverage and partial static dependence graph in Phase 2, and the instrumented program. The overall averages across all executions are provided in the bottom row.

On average, FLOWDIST took 19 minutes for all one-off analyses, including static analysis, instrumentation, and coverage analysis. These one-off analyses are shared by all queries for a given subject execution and source/sink configuration. The partial dependence analysis (guided by method-level paths from Phase 1) was significantly more efficient than a whole-system analysis. For example, a whole-system analysis did not complete within 12 hours for Voldemort under the same setup.

For profiling, FLOWDIST caused an average of 68% slowdown, calculated as \((T_i - T_o) / T_o\), where \( T_i \) and \( T_o \) are the run times of the instrumented and original programs, respectively. The average time cost for querying each source-sink pair was 13 seconds, with a maximum of 50 seconds for HSQLDB-System due to its static dependence complexity. This cost was dominated by building the dynamic dependence graph from the static counterpart and an instance-level method execution event sequence (Algorithm 2).

The storage costs of FLOWDIST were negligible. Overall, FLOWDIST is promisingly efficient and scalable to large systems, taking an average of 19 minutes for one-off analyses and 13 seconds to query a source-sink pair, with less than 1x slowdown and minimal storage cost.

#### 6.3.3 RQ3: Scalability

We first examine how FLOWDIST scales with increasing subject sizes in terms of total time cost (one-off analysis time, profiling costs, and time for querying all possible source-sink pairs) using integration tests. Figure 6 shows the fitting curve and the determination coefficient \( R^2 \in [0, 1] \), which indicates how well the data fit the curve. A value of \( R^2 \) closer to 1 indicates a better fit. As shown, FLOWDIST's time cost grew linearly.

Next, we evaluate the scalability of FLOWDIST in terms of runtime slowdown for all 18 executions, characterized by the length of the instance-level method execution event sequence. Figure 7 illustrates this relationship.

### Table 3: Time (in seconds) and Storage (in MB) Costs of FLOWDIST

| Executions            | NioEcho | MultiChat | ADEN | Raining Sockets | OpenChord | Thrift | xSocket | Zookeeper Integration | Zookeeper Load | Zookeeper System | RocketMQ Integration | RocketMQ System | Voldemort Integration | Voldemort Load | Voldemort System | Netty | HSQLDB Integration | HSQLDB System | Overall Average |
|-----------------------|---------|-----------|------|-----------------|-----------|--------|---------|-----------------------|----------------|------------------|---------------------|-----------------|----------------------|----------------|------------------|-------|--------------------|---------------|------------------|
| Norm Run              | 39      | 26        | 21   | 6               | 54        | 8      | 11      | 71                    | 99             | 98               | 105                 | 339             | 28                   | 11             | 31               | 12    | 9                  | 15             | 55               |
| St.                   | 53      | 55        | 117  | 40              | 177       | 146    | 101     | 292                   | 292            | 292              | 56                  | 156             | 1206                 | 1206           | 1206             | 1132  | 659                | 684            | 437              |
| Phase 1 Time          | 0.2     | 0.2       | 0.3  | 0.3             | 0.3       | 0.5    | 0.5     | 0.5                   | 0.6            | 0.5              | 0.6                 | 0.6             | 0.6                  | 0.6            | 0.6              | 0.6   | 0.7                | 0.7            | 0.5              |
| Run Slowdown          | 5.16%   | 6.12%     | 10.23% | 7.67%          | 8.54%     | 24.83% | 63.99%  | 70.16%                | 78.83%         | 81.87%           | 87.05%              | 122.09%         | 106.06%              | 113.37%        | 109.81%          | 81.65% | 107.46%            | 142.71%        | 68.20%           |
| Query                 | 41      | 28        | 23   | 6               | 59        | 10     | 19      | 121                   | 177            | 178              | 196                 | 753             | 58                   | 23             | 65                | 22    | 19                 | 36             | 102              |
| Phase 2 Time          | 50      | 50        | 59   | 122             | 740       | 79     | 70      | 193                   |                |                  |                     |                 |                      |                |                  |       |                    |               |                  |

This table provides a detailed breakdown of the time and storage costs for each execution, highlighting the efficiency and scalability of FLOWDIST.