Property 3 Strategy-proofness
Balance offers strategy-proofness for type Tr .
5.5 Transparency
Balance seeks to be transparent to receiving agents B. B does not
have to choose between performing agents A based on their layer
assignment, but selects A as without Balance.
Theorem 4. Given an initial deposit D1 for a performing agent A
of type Tr and Balance with ω layers, A cannot decrease its utility
for performing a desired action and does not have a higher utility
for an undesired action assuming fω > f ¯ω.
Proof. If A → Lm at a point t = 0, we consider two cases: First,
A can consider an infinite horizon. By Theorem 3, we know that
if fω > f ¯ω, the utility for performing a desired action is greater
than the undesired action for A starting at L1. By the infinite time
horizon the starting layer Lm becomes irrelevant. Hence, A has the
same utility for performing a desired action at layer Lm as at L1.
Second, by Theorem 1, if agent A performs a desired action at
the highest layer, A also performs desired action at previous layers.
Further, the utility at the lowest layer L1 is smaller than the utility
at the subsequent layers. If A only considers a single time step, and
A has performed a desired action at layer L1, A can only increase
its utility by performing a desired action in the next layer.
□
Property 4 Transparency
Balance is transparent to a receiving agent B.
5.6 Comparison and social welfare
Next, we show that adding Balance increases social welfare for
agents who perform desired actions.
Theorem 5. For a distribution of agent types p(x), where x ∈
{Td , Tu , Tr }, adding Balance increases social welfare.
the utility is equal to(cid:80)X
Proof. As in (4), if performing agents perform desired actions,
x=1(vx,B − cx,B − cx,A − E[rDx,A]), where
x is a pair of agents in the set of pairs X. without Balance, each
pair is required to have deposit D1 each period. Over a cycle length
t = ω, the total utility for all pairs of agents over the cycle is given
by
(δ /(1 + r))t ((vx,B − cx,B − cx,A − E[rDx,1]))
(21)
In contrast, with Balance, total welfare is given by
(δ /(1 + r))t ((vx,B − cx,B − cx,A − E[rDx,t+1]))
(22)
X(cid:88)
ω−1(cid:88)
X(cid:88)
ω−1(cid:88)
t =0
x =1
t =0
x =1
For agents performing desired actions, Balance improves welfare
when (22) is greater than (21). Yet, since in all but t = 0, the op-
portunity cost term ([rDx,t+1]) is smaller in the latter equation,
with Balance permitting agents to post smaller deposits at higher
layers, (22) must be the larger. Therefore, Balance improves social
welfare for agents performing desired actions. For agents who al-
ways perform undesired actions, social welfare is the same with
Balance as without it.
□
Property 5 Social welfare increasing
Balance is social welfare increasing.
5.7 Parameter behaviour
Balance has four main parameters that influences the boundary
f ¯ω over which fω must be set to ensure that agents of type Tr
perform desired actions. Figure 4 demonstrates how fω, the fac-
tor corresponding to the highest layer boundary, changes as the
parameters f1, r, δ and ω vary. The purpose of this section is to
provide guidance on the behaviour of for a given implementation
when the parameter values are varied. The values of f1 and ω can
be configured by the designer of the protocol π, whereas δ and r
are external factors that require careful consideration.
• Figure 4 (a) shows that, all else equal, ∀t, opting for a higher
value of f1 results in a relatively higher value of fω than
lower values of f1. Starting with a higher layer factor f1
permits a greater reduction in fω over time relative to the
starting value of fω at t = 0, but results in a higher absolute
value of fω relative to lower values of f1.
• Figure 4 (b) shows that, all else equal, ∀t, an increase in r
results in a lower value of fω. To offset a higher interest
rate, fω has to fall more quickly since a higher interest rate
results in higher opportunity costs of deposits.
• Figure 4 (c) shows that, all else equal, ∀t, an increase in the
discount factor δ allows fω to be relatively lower. As the
discount factor increases, such that future utility is more
valuable today, the factor fω corresponding to the highest
layer can be reduced.
• Figure 4 (d) shows that, all else equal, ∀t, using more layers
ω permits a greater reduction in fw through time. However,
this increase is not linear. Using Eq. 20, we can show that if
ω → ∞, the reduction of deposit has a lower bound.
We note an interesting property for protocol designers when
choosing parameters for Balance. If the required deposit factor at
each layer are set to the boundary f ¯ω, πBalance enjoys the same
(a) Boundary of fω for five different initial factors of f1.
(b) Boundary of fω for five different return rates r .
(c) Boundary of fω for five different discount factors δ .
(d) Boundary of fω for six different numbers of layers ω.
Figure 4: The boundary f ¯ω depending on the parameters of f1, ω, r, and δ. If fω is chosen above f ¯ω, an economically rational
agent has a higher utility to choose a desired action. Below f ¯ω, the agent chooses an undesired action.
level of security. However, if a designer sets the deposit factors for
layers m such that f1 > fm > f ¯ω, πBalance has a relatively higher
level of security with respect to economically rational agents and
increases social welfare.
6 SECURITY ARGUMENTS
We discuss a range of attack strategies against Balance and how
to mitigate them.
6.1 Single-shot attack
In single-shot attack strategy, Ssingle−shot, the only objective of
agent A is to attack B through committing an undesired action. A
would then consider how to execute such an attack with least cost.
In particular, A may be able to reduce the cost of attack by playing a
modification of Slayer−cycling where A progresses through the layers
and performs the undesired action at the highest layer. We show
that if fω is set above a bound f ¯ω, A would not gain additional
utility by waiting until it is in the highest layer before performing
the attack.
Lemma 1. If A plays Ssingle−shot it cannot gain additional utility
given that the fω is set above f ¯ω.
Proof. This strategy has two implications. First, A performs
ω − 1 desired actions that contribute to the social welfare of the
protocol. Second, A increases its utility at t = ω for the undesired
action with being punished with the smaller Dω instead of D1.
However, for each ω − 1 round, A has incurred an opportunity
cost. As shown in Lemma 2 in Appendix B.1, Ssingle−shot results in
the same utility expression and boundary for fω as Slayer−cycling.
Hence, if fω is set to be greater than f ¯ω, A does not gain additional
utility from playing Ssingle−shot. A should commit the undesired
action at D1 if A intends to perform a undesired action. Otherwise,
A should perform the desired action.
□
Balance provides in the single-shot attack the same security as
protocols without Balance, however, offers desired agent types to
reduce their deposit over time.
6.2 Reputation boosting
An agent A could create Sybil identities to request performance of
actions and fulfil them itself. This results in improving the agent’s
score and reducing its deposit. We denote this Sboosting, a common
attack vector in reputation like systems [23, 25].
Theorem 6. Reputation boosting Sboosting is not rational in Bal-
ance if the cost of this strategy, c(Sboosting), is higher than the
expected saving from the reduction of deposit.
Proof. We consider a scenario where A can take the role of a
receiving agent B. Further, we assume that the cost for requesting
a service within an agreement A by c(Sboosting) = cB. Without
loss of generality, we assume that an instance of Balance includes
two layers, L1 and L2. A performs a desired action by fulfilling its
own request (per role B). In the next step, A can either execute a
desired or an undesired action. In either case, the increase of utility
is determined by the reduction in opportunity cost at each layer,
1+r )E[rD2] − E[rD1]. A sufficient condition for Sboosting to not
i.e. ( δ
be a rational strategy is:
051015202530t1.01.21.41.61.82.0fωω=30,r=0.05,δ=0.90f1=1.00f1=1.25f1=1.50f1=1.75f1=2.00051015202530t1.41.61.82.0fωf1=2.00,ω=30,δ=0.90r=0.000r=0.025r=0.050r=0.075r=0.100051015202530t1.51.61.71.81.92.02.1fωf1=2.00,ω=30,r=0.05δ=0.75δ=0.80δ=0.85δ=0.90δ=0.95051015202530t1.71.81.92.02.1fωf1=2.00,ω=30,r=0.05ω=5ω=10ω=15ω=20ω=25ω=30(cid:18) δ
(cid:19)
cB > E[rD1] −
E[rD2]
(23)
Therefore, we prevent Sboosting by limiting the maximum deposit
that can be provided by a single identity of A to Dmax. If A wants to
exceed Dmax, it needs to commit to an agreement with an additional
identity A′.
□
1 + r
The commit stage of cryptoeconomic protocols typically requires
an on-chain transaction which incurs a cost, e.g. [27, 44]. If request-
ing is free in a protocol, boosting would be rational. Thus, to prevent
griefing by B, cryptoeconomic protocols typically require a small
amount of deposit [12] as friction. Since B also has an expected loss
of interest on this deposit, this incurs a cost expressed by E[rDB].
Property 6 Sybil resistance
Balance is resistant to the creation of Sybil identities.
6.3 Action delay
In strategy Sdelay, A, who has already performed sufficient desired
actions to move up a layer, delays a desired action from t until
t + 1. In the new round, with a reset score, the delayed action would
count towards the new score. If there are significantly more re-
questing agents B than performing agents A, a backlog of requests
would occur. We propose two remedies. First, A could be required
to perform the actions within a time-limit enforced by the cryptoe-
conomic protocol (e.g. HTLCs). Second, Balance could be modified
to use dynamic time rounds. Dynamic time could be based on the
number of active performing agents A and the number of requests
by receiving agents B. For instance, the next round could be started
after a certain fraction (or all) of the performing agents A could
have at least fulfilled one request by B.
6.4 Competition and cooperation
Performing agents compete to fulfil agreements, to receive pay-
ments and reduce their deposit requirements. However, it is pos-
sible that the number of requests is insufficient for A to maintain
its assignment to the high layers of Balance. In such cases, two
strategies for A are as follows.
First, A can be non-cooperative and play a strategy Scompete in
which A (i) tries to fulfil requests as fast as possible by e.g. detecting
request transaction early through memory pool sniffing and (ii)
actively prevent other performing agents from fulfilling requests
by e.g. executing eclipse attacks [19, 21].
Second, A can be cooperative, executing a strategy Scooperate to
collaborate with other agents. A could form groups with shared
interests through e.g. multi-signature wallets with other agents. A
set of agents can act as a single entity to reduce their pooled deposit
and fulfil agreements as a whole. This concept is similarly applied
to layer-one protocols as so called mining pools. Lewenberg et al.
formulate an analysis for cooperative games in the Bitcoin mining
network [31]. A cooperative game for cryptoeconomic protocols
would consider the number of performing agents A, their overall
deposit D, and a likelihood of having open requests by B.
In both cases, Balance does not change the possible strategies
in the cryptoeconomic protocol. Agents can play either strategies
with and without Balance being present.
7 APPLICATION
The objective of Balance is to reduce deposits up to the boundary
f ¯ω. Integrating Balance is therefore an exercise in determining
external factors and choosing the parameters such that f ¯ω can be
optimised. This process includes the following steps:
(1) Determining the return rate r includes finding an approxi-
mate value what agents could earn by participating in other
protocols than π.
discount agents apply to future returns.
(2) Determining the discount factor δ comprises of finding the
(3) Choosing the scores s in A needs careful consideration of the
agreement. Reducing deposits introduces a positive incentive
for agents. Therefore, only agreements that already have a
positive incentive, e.g. payments, should be associated with
a positive score.
(4) Choosing a period length t depends on how often a proto-
col designer expects agents to interact with the protocol.
Since agents need to continuously perform desired actions,
agents should have the chance to do so by giving them a
long enough time period.
(5) Choosing the number of layers ω determines (i) the overall
reduction of deposit possible and (ii) how many time periods
it takes to reach the lowest deposit.
(6) Choosing the initial factor f1 is a trade-off between the
“buffer” of over-collateralization and the amount of deposit
reduction. The higher f1, the higher the reduction possible.
However, also the higher the absolute deposit.
We provide more detail on determining external factors r and δ in
Appendix C.2. However, a thorough study of parameters specifically
for decentralised ledgers is left as future work.
In the following we describe in detail the application of Balance
to the XCLAIM protocol. XCLAIM is a generalised protocol that
allows exchange of cryptocurrencies across different blockchains
without a trusted intermediary [53]. The protocol employs third par-
ties that provide a deposit to be eligible to participate in the protocol.
Further, XCLAIM reduces the cost of atomic cross-currency swaps
in comparison to atomic-swaps realised with hashed time-lock con-
tracts (HTLC). We choose XCLAIM as an example of how to apply
Balance as it is subject to exchange rate risk (event-dependency)
and heterogeneous valuations of individual cryptocurrencies (pri-
vate information).
7.1 XCLAIM protocol
XCLAIM is divided into three sub-protocols. First, the issue protocol
enables creation of cryptocurrency-based assets (CbAs) from a
backing chain onto an issuing chain. Second, in the swap protocol,
senders and receivers on the issuing chain can exchange the issued
CbAs. Finally, in the redeem protocol, a redeemer exchanges his
CbA for the original coin on the backing chain. For example, Alice
could issue Bitcoin-backed tokens on the Ethereum chain. Alice
could then send her Bitcoin-backed tokens to Bob on Ethereum
in exchange for Ether. Bob can take his Bitcoin-backed tokens to
receive the equivalent amount of Bitcoins on Bitcoin. XCLAIM
includes six roles.
(1) CbA Requester: creates a backed token i(b) on an issuing
chain from locking a coin b on the backing chain.
(2) CbA Sender: sends a backed token i(b) on the issuing chain.
(3) CbA Receiver: receives a backed token i(b) on the issuing
(4) CbA Redeemer: destroys the backed token i(b) on the issuing
chain to redeem the coin b on the backing chain.
chain.
(5) CbA Backing Vault (vault): a non-trusted third party enabling
the issue protocol and executing the redeem protocol. The
CbA Requester locks her coins b with the vault while the
CbA Redeemer upon destruction of i(b) redeems b from the
vault.
(6) Issuing Smart Contract (iSC): implements the sub-protocols
on the issuing chain.
The vault only becomes active during the redeem sub-protocol
as any actions in the issuing sub-protocol are executed by the CbA
Requester and the iSC. To ensure correct behaviour, the vault has to
provide a deposit on the issuing chain which allows the issuing and
redeeming of CbAs. The iSC serves as an escrow for the deposit of
the vault. The deposit is a promise by the vault to release the backing
tokens b when a valid redeem request is made by destroying i(b).
Under the assumption of an economically rational vault, the vault
releases b as otherwise its deposit is refunded to the CbA Redeemer.
Further, the iSC verifies correct execution of the issue and redeem
process by verifying transactions occurring in the backing chain