# 浅谈eval和assert
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
eval和assert的特性经常把我搞懵，所以在这里记录一下。
###  eval 函数
php官方手册：
(PHP 4, PHP 5, PHP 7)
eval — 把字符串作为PHP代码执行
该函数只有一个参数，即需要被执行的字符串代码。
  * 代码不能包含打开/关闭PHP标签，但可以用合适的 PHP tag 来离开、重新进入 PHP 模式。
    ');
    eval('echo "In PHP mode!"; ?>In HTML mode!35){
        die("Long.");
        }
        if(preg_match("/[A-Za-z0-9_$]+/",$code))
        {
            die("NO.");
        }
        @eval($code);
    }
    else
    {
        highlight_file(__FILE__);
    }
    //$hint="php function getFlag() to get flag";
    ?>
payload：
    code=?>
`?>`闭合php文件开头的``是短标签，``是长标签。在php的配置文件php.ini中有一个`short_open_tag`的值，开启以后可以使用PHP的短标签：``同时，只有开启这个才可以使用 `
(PHP 4, PHP 5, PHP 7)
assert — 检查一个断言是否为 FALSE
  * 如果 assertion 是字符串，它将会被 assert() 当做 PHP 代码来执行。
**assert()** 的行为可以通过
[assert_options()](http://php.net/manual/zh/function.assert-options.php) 来配置。
**assert_options**
(PHP 4, PHP 5, PHP 7)
assert_options — 设置/获取断言的各种标志
  * 在调用你定义的 [assert_options()](http://php.net/manual/zh/function.assert-options.php) 处理函数时，条件会转换为字符串，而布尔值 **`FALSE`** 会被转换成空字符串。
  * [assert_options()](http://php.net/manual/zh/function.assert-options.php) **`ASSERT_CALLBACK`** 配置指令允许设置回调函数来处理失败的断言。
  * 回调函数应该接受三个参数。 第一个参数包括了断言失败所在的文件。 第二个参数包含了断言失败所在的行号，第三个参数包含了失败的表达式
## assert(PHP7)
在PHP7中assert变成了一种语言结构而不是一个函数。
也就是说像eval一样不支持可变函数。
同样的
    <?php
    $_POST['1']($_POST['2']);
在php7中无法传入`1=assert&2=system('ls')`来执行命令
菜刀在实现文件管理器的时候用的恰好也是`assert`函数，这导致菜刀没办法在PHP7上正常运行。
另外php7中增加了断言的`Expectations`，`Expectations`增强了之前的`assert`方法，我们可以在开发或者生产环境中使用断言，其提供了可配置选项，我们可以针对不同的环境来使用不同的策略。
我们可以通过在php.ini中设置`zend.assertions = -1`来关闭代码执行。
不过默认是打开的也就是`zend.assertions = 1`。
具体底层分析可以参考柠檬师傅的文章：[从底层分析eval和assert的区别](https://www.cnblogs.com/iamstudy/articles/analysis_eval_and_assert.html)
## Referer
[从底层分析eval和assert的区别](https://www.cnblogs.com/iamstudy/articles/analysis_eval_and_assert.html)
[PHP7新特性一览](http://oopsguy.com/2016/10/22/php7-new-features/)