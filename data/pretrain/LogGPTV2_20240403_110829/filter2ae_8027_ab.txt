**2.公共dll**  
当然我们还可以对公共 dll 进行劫持(比如系统 dll `user32.dll`)，但是公共 dll
一般都会提前被其他进程加载，当新的应用程序需要加载时，将直接从内存进行加载和调用，如果我们使用恶意 dll 替换了公共 dll，需要通过重启才能生效。
比如下面是我们使用恶意 dll 替换 `msvcrt.dll`，恶意 dll 在加载时输出应用程序路径，重启后可以看到：
[7.劫持系统dll示例]
由于是公共 dll，那么所有的程序都会加载恶意 dll，这种方法可以用于监控、蜜罐等场景。
> 1.替换系统dll，可以用普通用户修改文件为拥有者，然后再设置读写权限，就可以修改和替换文件了  
>  2.不能劫持 `ntdll.dll / kernel32.dll` 等非常底层的 dll，因为这些 dll 实现了程序装载、函数转发等功能
## 0x05 dll重定向劫持
在我们的学习过程中发现，有些应用程序只依赖了系统 dll，并且这些 dll 已经被其他程序加载了，比如 MinGW(gcc) 只依赖了
`kernel32.dll` 和 `msvcrt.dll`，除了上文公共 dll 劫持，还有其他更好的办法吗？
在“0x02 dll劫持概要”中我们还提到一种特例：dll 重定向()，当模块名称相同的 dll
已经被其他应用程序加载到内存中时，可以使用该方法强制加载指定的 dll 文件。通过这种方式，也可以实现 dll 劫持。
dll重定向默认为关闭状态，我们在注册表中 `HKLM\Software\Microsoft\Windows NT\CurrentVersion\Image
File Execution Options` 添加 `DevOverrideEnable (DWORD)` 字段并设置为 1，来开启该功能，重启后生效。
[8.注册表开启dll重定向]
我们有两种方式来使用 dll 重定向：
**1\. .local**  
在应用程序同目录下，创建 `AppName.exe.local` 的目录，应用程序启动时将优先从该目录下加载 dll 文件。
我们编写了个 `HelloWorld` 的 C 程序，生成恶意的 `msvcrt.dll` 进行演示，目录结构为：
    .
    ├── test.exe.local
    │   ├── msvcrt.dll
    │   └── msvcrt_origin.dll
    ├── helloworld.c
    └── test.exe
运行演示如下：
[9.local重定向示例]
**2.manifest**  
还可以使用 manifest 配置文件(xml文件)，优先级高于 `.local`，详细可以参考
，构建目录结构如下：
    .
    ├── helloworld.c
    ├── msvcrt_origin.dll
    ├── msvcrt.dll
    ├── msvcrt.dll.manifest
    ├── test.exe
    └── test.exe.manifest
其中 manifest 文件内容为：
[10.manifest内容示例]
同样可以加载恶意 dll 文件。
## 0x06 Tcc劫持实现
Tcc(Tiny C Compiler) 是一个相当小的 C 编译器，我们从简单的开始对 C 编译器进行"供应链攻击"。
我这里使用了 `Tcc 0.9.27` 版本，结合逆向分析可以确定 `tcc.exe` 依赖了同目录下的 `libtcc.dll` 文件，直接替换该 dll
文件即可。
我们模仿 SUNBURST 后门植入的方法，编写恶意代码 demo
如下([libtcc.c](https://images.seebug.org/archive/libtcc.c) \+
[libtcc.def](https://images.seebug.org/archive/libtcc.def))：
[11.Tcc劫持代码demo]
编译后使用恶意 dll 替换 `libtcc.dll`，并将原始文件重命名为 `libtcc_origin.dll`，运行演示如下：
[12.Tcc劫持演示]
可以看到通过 Tcc 编译的程序，执行时触发了恶意代码 `backdoor`。
## 0x07 Gcc劫持实现
我们再来尝试下 Gcc(MinGW)，通过分析发现他只依赖了 `kernel32.dll` 和 `msvcrt.dll`，那么这里我们劫持
`msvcrt.dll` 文件，使用 dll 重定向的方法让 Gcc 加载恶意 dll 文件。
使用 Tcc 中的测试代码进行编译，然后在 Gcc 目录下添加 `gcc.exe.local` 文件夹，并将 `msvcrt.dll /
msvcrt_origin.dll` 放在文件夹下，如下：
[13.Gcc目录下dll重定向文件夹]
运行演示如下：
[14.Gcc劫持演示]
## 0x08 总结
在这里感谢 DAWU@知道创宇404实验室 小伙伴在我学习研究过程中提供的帮助。本文从 dll 劫持的基础出发，逐步讲解和演示 dll 劫持，对 dll
劫持的部分场景和利用进行说明，最后模仿了 SUNBURST 后门植入的方法实现了对 C 编译器的"供应链攻击"。
实际上文中提到的对编译器进行"供应链攻击"的方法还可以进一步优化，因为我们的方法会重新写入文件，从而会修改文件的写入时间，可能会暴露攻击行为；我们还可以通过逆向分析编译器的执行流程，更加精确的劫持读文件的函数，在内存中植入恶意代码，读者可以自行尝试下。
不过 dll
劫持的攻防对抗已经发展很长时间了，微软在保证功能的前提下，已经提供了较为完善的防御措施；对于上文介绍的劫持方法和场景，防御时可以按照文中的技术细节如：路径、注册表、文件进行排查。
## References:
* * *