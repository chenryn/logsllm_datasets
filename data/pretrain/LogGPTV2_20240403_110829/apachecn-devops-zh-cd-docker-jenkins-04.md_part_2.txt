In order to run the `git` command, you need to have the Git toolkit installed (it can be downloaded from [https://git-scm.com/downloads](https://git-scm.com/downloads)).
让我们首先将存储库克隆到文件系统:
```
$ git clone https://github.com/leszko/calculator.git
```
将从[http://start.spring.io/](http://start.spring.io/)下载的项目解压到 Git 创建的目录中。
If you prefer, you can import the project into IntelliJ, Eclipse, or your favorite IDE tool.
因此，`calculator`目录应该有以下文件:
```
$ ls -a
. .. build.gradle .git .gitignore gradle gradlew gradlew.bat README.md src
```
In order to perform the Gradle operations locally, you need to have Java JDK installed (in Ubuntu, you can do it by executing `sudo apt-get install -y default-jdk`).
我们可以使用以下代码在本地编译项目:
```
$ ./gradlew compileJava
```
在 Maven 的情况下，可以运行`./mvnw compile`。Gradle 和 Maven 都编译位于`src`目录中的 Java 类。
You can find all possible Gradle instructions (for the Java project) at [https://docs.gradle.org/current/userguide/java_plugin.html](https://docs.gradle.org/current/userguide/java_plugin.html).
现在，我们可以将`commit`和`push`添加到 GitHub 存储库中:
```
$ git add .
$ git commit -m "Add Spring Boot skeleton"
$ git push -u origin master
```
After running the `git push` command, you will be prompted to enter the GitHub credentials (username and password).
代码已经在 GitHub 存储库中。如果你想查看，可以去 GitHub 页面查看文件。
# 创建编译阶段
我们可以使用以下代码向管道添加一个`Compile`阶段:
```
stage("Compile") {
     steps {
          sh "./gradlew compileJava"
     }
}
```
请注意，我们在本地和 Jenkins 管道中使用了完全相同的命令，这是一个非常好的迹象，因为本地开发过程与 Continuous Integration 环境一致。运行构建后，您应该会看到两个绿色的框。您还可以在控制台日志中检查项目是否被正确编译。
# 单元测试
现在是时候添加最后一个阶段，即单元测试，它检查我们的代码是否完成了我们期望它做的事情。我们必须:
*   添加计算器逻辑的源代码
*   为代码编写单元测试
*   添加一个阶段来执行单元测试
# 创建业务逻辑
第一个版本的计算器将能够添加两个数字。让我们将业务逻辑作为类添加到`src/main/java/com/leszko/calculator/Calculator.java`文件中:
```
package com.leszko.calculator;
import org.springframework.stereotype.Service;
@Service
public class Calculator {
     int sum(int a, int b) {
          return a + b;
     }
}
```
为了执行业务逻辑，我们还需要在单独的文件`src/main/java/com/leszko/calculator/CalculatorController.java`中添加 web 服务控制器:
```
package com.leszko.calculator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
@RestController
class CalculatorController {
     @Autowired
     private Calculator calculator;
     @RequestMapping("/sum")
     String sum(@RequestParam("a") Integer a, 
                @RequestParam("b") Integer b) {
          return String.valueOf(calculator.sum(a, b));
     }
}
```
这个类将业务逻辑公开为 web 服务。我们可以运行应用，看看它是如何工作的:
```
$ ./gradlew bootRun
```
它应该启动我们的网络服务，我们可以通过导航到浏览器并打开页面`http://localhost:8080/sum?a=1&b=2`来检查它是否工作。这应该将两个数字(`1`和`2`)相加，并在浏览器中显示`3`。
# 编写单元测试
我们已经有了工作申请。我们如何确保逻辑按预期工作？我们尝试过一次，但是为了不断了解，我们需要一个单元测试。在我们的情况下，这将是微不足道的，甚至可能是不必要的；然而，在实际项目中，单元测试可以避免错误和系统故障。
让我们在文件`src/test/java/com/leszko/calculator/CalculatorTest.java`中创建一个单元测试:
```
package com.leszko.calculator;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
public class CalculatorTest {
     private Calculator calculator = new Calculator();
     @Test
     public void testSum() {
          assertEquals(5, calculator.sum(2, 3));
     }
}
```
我们可以使用`./gradlew test`命令在本地运行测试。然后，让我们将代码`commit`和`push`放到存储库中:
```
$ git add .
$ git commit -m "Add sum logic, controller and unit test"
$ git push
```
# 创建单元测试阶段
现在，我们可以在管道中添加一个`Unit test`阶段:
```
stage("Unit test") {
     steps {
          sh "./gradlew test"
     }
}
```
在 Maven 的情况下，我们将不得不使用`./mvnw test`。
当我们再次构建管道时，我们应该会看到三个框，这意味着我们已经完成了连续集成管道:
![](img/ee925c80-529f-4732-8a8e-57c41190cf79.png)
# Jenkins 文件
一直以来，到目前为止，我们都是直接在 Jenkins 中创建管道代码。然而，这不是唯一的选择。我们还可以将管道定义放在一个名为`Jenkinsfile`和`commit`的文件中，并将其与源代码一起放入存储库。这种方法更加一致，因为管道的外观与项目本身密切相关。
例如，如果您不需要代码编译，因为您的编程语言是解释的(而不是编译的)，那么您就不会有`Compile`阶段。您使用的工具也因环境而异。我们使用了 Gradle/Maven，因为我们已经构建了 Java 项目；但是，对于用 Python 编写的项目，可以使用 PyBuilder。这导致了这样一种想法，即管道应该由编写代码的同一个人——开发人员——来创建。此外，管道定义应该与代码一起放在存储库中。
这种方法带来了以下直接好处:
*   在 Jenkins 失败的情况下，管道定义不会丢失(因为它存储在代码库中，而不是 Jenkins 中)
*   存储管道变化的历史
*   管道变更要经过标准的代码开发过程(例如，它们要接受代码审查)
*   对管道更改的访问与对源代码的访问受到完全相同的限制
# 创建 Jenkins 文件
我们可以创建`Jenkinsfile`并将其推送到我们的 GitHub 存储库中。它的内容几乎与我们编写的提交管道相同。唯一不同的是，签出阶段变得多余，因为 Jenkins 必须先签出代码(与`Jenkinsfile`一起)，然后读取管道结构(来自`Jenkinsfile`)。这就是为什么 Jenkins 需要在读取`Jenkinsfile`之前知道存储库地址。
让我们在项目的根目录下创建一个名为`Jenkinsfile`的文件:
```
pipeline {
     agent any
     stages {
          stage("Compile") {
               steps {
                    sh "./gradlew compileJava"
               }
          }
          stage("Unit test") {
               steps {
                    sh "./gradlew test"
               }
          }
     }
}
```
我们现在可以将添加的文件和 T1 添加到 GitHub 存储库中:
```
$ git add .
$ git commit -m "Add sum Jenkinsfile"
$ git push
```
# 从 Jenkins 文件运行管道
当`Jenkinsfile`在存储库中时，我们所要做的就是打开管道配置并在`Pipeline`部分:
*   将定义从`Pipeline script`更改为`Pipeline script from SCM`
*   在配置管理中选择 Git
*   将`https://github.com/leszko/calculator.git`放入存储库网址
![](img/2abce73b-7789-4457-9252-7eff8f912dbf.png)
保存后，构建将始终从 Jenkinsfile 的当前版本运行到存储库中。
我们已经成功创建了第一个完整的提交管道。它可以被视为最小可行产品，实际上，在许多情况下，作为持续集成过程，它就足够了。在接下来的部分中，我们将看到可以做哪些改进来使提交管道变得更好。
# 代码质量阶段
我们可以用额外的步骤扩展连续集成的三个经典步骤。最广泛使用的是代码覆盖和静态分析。让我们看看他们每个人。
# 代码覆盖率
考虑以下场景:您有一个配置良好的持续集成流程；但是，项目中没有人编写单元测试。它通过了所有的构建，但这并不意味着代码工作正常。那怎么办？如何确保代码经过测试？
解决方案是添加代码覆盖工具，该工具运行所有测试并验证代码的哪些部分已经被执行。然后，它创建一个显示未测试部分的报告。此外，当有太多未经测试的代码时，我们会使构建失败。
有很多工具可以用来执行测试覆盖率分析；对于 Java 来说，最受欢迎的是 JaCoCo、Clover 和 Cobertura。
让我们使用 JaCoCo 并展示覆盖率检查在实践中是如何工作的。为此，我们需要执行以下步骤:
1.  将 JaCoCo 添加到 Gradle 配置中。
2.  将代码覆盖阶段添加到管道中。
3.  或者，在 Jenkins 发布 JaCoCo 报告。
# 将 JaCoCo 添加到 Gradle