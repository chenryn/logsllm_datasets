title:Deploying and Monitoring DNS Security (DNSSEC)
author:Eric Osterweil and
Daniel Massey and
Lixia Zhang
2009 Annual Computer Security Applications Conference
Deploying and Monitoring DNS Security (DNSSEC)
Eric Osterweil
UCLA
PI:EMAIL
Dan Massey
Colorado State University
PI:EMAIL
Lixia Zhang
UCLA
PI:EMAIL
Abstract—SecSpider is a DNSSEC monitoring system that
helps identify operational errors in the DNSSEC deployment
and discover unforeseen obstacles. It collects, veriﬁes, and
publishes the DNSSEC keys for DNSSEC-enabled zones, which
enables operators of both authoritative zones and recursive
resolvers to deploy DNSSEC immediately, and beneﬁt from its
cryptographic protections. In this paper we present the design
and implementation of SecSpider as well as several general
lessons that stem from its design and implementation.
I. INTRODUCTION
The DNS Security Extensions (DNSSEC) [7], [9], [8]
add much needed security to the critical DNS [17] system,
and deployment efforts started a few years ago. Although
the total number of secure zones is still quite small, it has
been growing steadily. Perhaps more importantly, there has
been considerable activity at critical top level DNS zones.
A number of country code top level domains (ccTLDs)
have been signed (in fact some have been signed for a few
years) and the number keeps growing. The U.S. Government
has deployed DNSSEC in the “.gov” zone and all federal
agencies are required to sign their “agency.gov” zones
by the end of 2009. Furthermore, the “.org” zone has also
deployed DNSSEC recently. Other top level domains and the
root zone itself have announced plans to deploy DNSSEC.
At the same time, the increasing awareness of DNS vulnera-
bilities has also further motivated sites to consider DNSSEC
deployment. We believe that the DNSSEC deployment has
reached the tipping point and all organizations should at least
be aware of DNSSEC’s impact on their sites, and ideally
should start considering how to integrate DNSSEC into their
operations.
DNSSEC is the ﬁrst fully distributed cryptographic system
to be rolled out in the Internet to support one of its core
systems (the DNS). Due to its cryptographic underpinnings,
the DNSSEC deployment faces not only those challenges
that all conventional distributed-systems share, but also
many new types as well. In anticipation of unforeseen
deployment obstacles, we developed the SecSpider DNSSEC
Monitoring System ( http://secspider.cs.ucla.edu ) in 2005
and have been operating this system since then. SecSpider is
a scalable system whose distributed polling design and large-
scale DNSSEC survey corpus allows it to provide operators
with key operational data and global views of both their own
sites and sites that their users may access frequently. This
allows sites to learn from the current deployment, assess
their own needs, and assess the success (or challenges)
in any experimental deployment. Some of SecSpider’s key
discoveries are presented in Section V. These discoveries
help underscore the critical need for distributed monitoring
in order to discover and diagnose both known and unknown
problems.
As of this writing, SecSpider has been an operational tool
for the DNSSEC community for over 3 years. Our website
has already become a useful part of many operators’ prac-
tices as evidenced by the fact that it served over 2.3 million
page views in 2008 alone. To help the current and future
users of SecSpider get acquainted with the system, this
paper describes its design and implementation, exposes some
insights learned through the system’s design and rollout, and
illustrates some of the system’s key results. Our objective is
to explain how SecSpider operates for sites already using it
for essential monitoring, and for sites that are considering
using it in near future. Section II provides some background
on DNSSEC. Section III describes the SecSpider design and
Section IV presents the underlying implementation details.
Finally, results obtained using SecSpider and information for
potential DNSSEC operators are summarized in Section V.
II. DNS AND DNSSEC BACKGROUND
The Domain Name System (DNS) maps hostnames such
as www.ucla.edu to IP addresses, as well as provides a
wide range of other mapping services ranging from email to
geographic location. In this section we introduce a basic
set of DNS terminology which is used throughout
the
text, including resource records (RRs), resource record sets
(RRsets), and zones, followed by an overview of the DNS
Security Extensions.
Security was not a primary objective when the DNS
was designed in mid 80’s and a number of well known
vulnerabilities have been identiﬁed [11], [10]. DNSSEC
provides a cryptographic solution to the problem, which
seems pretty simple and intuitive. To prove that data in a
DNS reply is authentic, each zone creates public/private key
pairs and then uses the private portions to sign data. Its
public keys are stored in a new type of RR called DNSKEY,
and all the signatures are stored in another new type of
RR called RRSIG. In response to a query, an authoritative
server returns both the requested data and its associated
1063-9527/09 $26.00 © 2009 IEEE
DOI 10.1109/ACSAC.2009.47
429
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:11:53 UTC from IEEE Xplore.  Restrictions apply. 
DNSSEC design envisioned that its deployment would be
rolled out in a top-down manner. Thus only the root zone’s
K would need to be conﬁgured in all resolvers’ T a sets
and all secure delegations would follow the existing DNS
hierarchy. However as of this writing, neither the root zone
nor most of the Top Level Domains (TLDs) are signed,
and it is unclear when a meaningful portion of the DNS
TLDs will be. Without
the root and top level domains
deploying DNSSEC (as is the case today) there could be
potentially millions of isolated trust anchors. In fact various
approaches have been proposed for securely obtaining these
trust anchors and are summarized in other work [22].
In addition to origin authenticity and key learning,
DNSSEC also speciﬁes a way to cryptographically deny the
existence of records. This authenticated denial of existence
is done when the zone is being signed. Each domain name
has an NSEC record associated with it. This NSEC record
speciﬁes what the next domain name is after the current one,
and what type of RRs exist for it. This allows a resolver to
see that the name of the NSEC comes (canonically) before
the query name, but it points to a name that comes after the
query name. Thus, NSEC records allow resolvers to use the
attached RRSIG records as proof that they’re query does
not exist. However, one side effect of this mechanism is
that starting with the zone’s name (the apex), a resolver
can recursively ask for the next name in the zone until it
sees the ﬁnal NSEC record loop back to the apex. This is
called NSEC walking and makes an entire zone’s contents
visible. A new solution called NSEC3 has been developed
recently that avoids zone enumerations while still providing
authenticated denial of existence [16].
III. THE SECSPIDER DNSSEC MONITORING SYSTEM
SecSpider aims to discover and address challenges faced
by both the operators of secure DNS zones and the opera-
tors of secure resolvers. In order for SecSpider to provide
meaningful monitoring results, we must ﬁrst deﬁne what it
means to be a DNSSEC-enabled zone; next, we must ﬁnd
DNSSEC-enabled zones to examine; and ﬁnally, we must
be able to provide constructive feedback to operators so that
problems can be addressed and ﬁxed.
A. Deﬁning DNSSEC-Enabled
The latest round of DNSSEC speciﬁcations [7], [9], [8]
outline many behaviors that DNSSEC-enabled zones must
adhere to. Though they start with serving keys and signa-
tures, they go a fair distance further. SecSpider checks to
see if zones serve their public keys in the DNS resource
records called DNSKEYs. Then, each RRset that is returned
to resolvers must be accompanied by one or more RRSIG
records and those records must be veriﬁable by at least one
of the DNSKEYs being served. Next, in order to provide
secure denial of existence, DNSSEC-enabled zones must
serve either valid NSEC [9] or NSEC3 [16] records whenever
Figure 1. Resolvers preconﬁgure the root zone’s public key as a trust anchor (T a)
and can then trace a “chain of trust” from that key down the DNSSEC hierarchy to
any zone’s key that they have encountered.
RRSIG RRset. A resolver that has learned the DNSKEY of
the requested zone can verify the origin authenticity and
integrity of the reply data. To resist replay attacks, each
signature carries a deﬁnitive expiration time.
In order to authenticate the DNSKEY for a given zone, say
www.ucla.edu, the resolver needs to construct a chain of
trust that follows the DNS hierarchy from a trusted root zone
key down to the key of the zone in question (this is shown in
Figure 1). In the ideal case, the public key of the DNS root
zone would be obtained ofﬂine in a secure way and stored
at the resolver, so that the resolver can use it to authenticate
the public key of edu; the public key of edu would then
be used to authenticate the public key of ucla.edu.
There are two challenges in building and maintaining
the chain of trust. First, a parent zone must encode the
authentication of each of its child zone’s public keys in the
DNS. To accomplish this, the parent zone creates and signs
a Delegation Signer (DS) RR that corresponds to a DNSKEY
RR at the child zone, and creates an authentication link
from the parent to child. It is the child zone’s responsibility
to request an update to the DS RR every time the child’s
DNSKEY changes. Although all the above procedures seem
simple and straightforward, one must keep in mind that they
are performed manually, and people inevitably make errors,
especially when handling large zones that have hundreds
or thousands of children zones. Moreover, such manual
coordination is done across different administrative domains,
making it more error prone.
In addition, the parent and child zones belong to different
administrative authorities, each may decide independently if
and when they turn on DNSSEC. This leads to the second
and more problematic challenge. If the parent zone is not
signed, there is no chain of trust leading to the child zone’s
DNSKEY. This orphaned key effectively becomes an isolated
trust anchor for its subtree in the DNS hierarchy. To verify
the data in these isolated DNSSEC zones, one has to obtain
the keys for such isolated trust anchors ofﬂine in a secure
manner. DNSSEC resolvers maintain a set of well-known
“trust-anchor” keys (T a) so that a chain of key sets +
signatures (secure delegation chain) can be traced from some
T a to a DNSSEC key K lower in the tree. The original
430
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:11:53 UTC from IEEE Xplore.  Restrictions apply. 
com         foo.comrooteduucla.edu   .TaTaa resolver queries for a name that does not exist. This allows
resolvers to use DNSKEYs to cryptographically prove that a
zone does not have the speciﬁc record(s) requests.
Finally, each zone is served by a set of name servers. In
order for a zone to be considered DNSSEC-enabled, all of
its name servers must pass these tests. The rationale behind
this is that if only one name server fails to properly serve
DNSSEC and a resolver happens to issue its queries to
that name server, the resolver will likely not know to try
DNSSEC queries to others in the set and just be unable to
use DNSSEC. Given a zone name, these characteristics are
relatively easy to verify using a sequence of DNS queries.
However ﬁnding all the DNSSEC-enabled zones is an non-
trivial task, as we explain next.
B. Finding DNSSEC Zones
There are numerous ways to go about building a corpus
of DNSSEC zones to monitor. Our primary way to discover
DNSSEC-enabled zones is letting users submit their zones
directly to the SecSpider website. In addition, search engines
have made a science out of crawling over the World Wide
Web and learning of new web sites. As an obvious side
effect, they learn of DNS zones. Thus, we routinely crawl
a set of DNS zones discovered by a commercial search
engine [18] to discover if any zones have recently enabled
DNSSEC. Furthermore, from our corpus of DNSSEC zones,
we are able to perform NSEC walking to determine if any
of them have DNSSEC-enabled children. Our last process
of ﬁnding DNSSEC-enabled zones comes from several DNS
monitors that exist in various locations hosted by our afﬁl-
iates. These monitors continuously crawl DNS name space
search for zones that serve DNSKEYs (just the ﬁrst of our
requirements above). When these monitors ﬁnd such a zone,
they begin monitoring that zone. Section V shows the current
number of DNS zones monitored by SecSpider and how they
were obtained.
C. Looking For Trouble
Administering a DNSSEC zone requires some additional
operational tasks beyond those needed to administer plain
old DNS zones. For example, it is important for a zone’s
administrator to know she i) is maintaining a proper secure
delegation from her zone’s parent, ii) has a DNSKEY set that
is “reasonable” in size, iii) is properly executing DNSKEYs
rollovers, and iv) is not unnecessarily introducing replay
vulnerabilities. By contrast, from the perspective of DNS re-
solver operators (who might also operate authoritative zones
of their own), it is important to be able to use DNSSEC by
learning veriﬁed DNSKEYs for zones. SecSpider is designed
to meet the needs of both types of operators.
Operators can navigate from SecSpider’s homepage to
their own zone’s drill-down page and use the drill-down page
to see the status of their secure delegations (DS record) from
their parent. This is designed to help detect whether a stale
secure delegation exists (for example if the cryptographic
data at the parent zone does not match the public key at the
child zone). A number of operators have reported that this
SecSpider feature has helped them correct problems ranging
from errors in secondary servers not providing valid data
to issues where servers provided data but resolvers could
not retrieve the data due to issues with large key set sizes.
When the size of the DNSSEC key set is larger than the Path
Maximum Transmission Unit (PMTU) value, it leads to the
DNS responses being lost. SecSpider was the ﬁrst to discover
and report the PMTU problems related to DNSSEC [21],
[4], [6], and this discovery has subsequently pervaded the
DNSSEC community [23], [5]. One example of action that
has resulted from this is that organizations like the National
Institute for Standards and Technology (NIST) have adjusted
their recommendations from larger keys whose lifetimes are
longer (less frequent rollovers) to smaller keys that are rolled
over more frequently.
In general, identifying when there is an availability prob-
lem with a zone’s DNSKEY set size is more challenging
than simply determining when the zone itself is meeting the
DNSSEC requirements. Different data delivery paths will
allow different maximum size messages. What makes the
size of a key set problematic is a combination of the path
that DNS data may take through the Internet and the various
“middle boxes” (NATs, proxies, VPNs, etc.) encountered
along that path. Thus, the distributed nature of the problem
suggests that a distributed monitoring system is needed to
detect potential failures. Accordingly, SecSpider is not a
single site, but rather it gathers data from a widely dis-
tributed set of pollers (which issue DNS queries) in different
continents and different networks. Distributed monitoring is
critical, because by issuing queries from multiple vantage
points, SecSpider increases the chance that it will see any
latent PMTU problems. Operators can then keep track of
their zones’ statuses on SecSpider’s website to see if they
need to take any action.
SecSpider tracks all of its known DNSSEC zones for
consistency over time and across its multiple polling lo-
cations to detect vulnerabilities in DNSSEC deployment
such as key rollover errors and records that are vulnerable
to replay attacks. While capturing all of the RRsets for
a zone would allow an exact account of its vulnerability,
simply tracking its signing practices and some of its crucial
infrastructure records (i.e. NS and glue records) is sufﬁcient
to indicate when a zone is experiencing commonly seen
cryptographic operational problems. For example, tracking
the proper execution of DNSKEY rollovers is done as a
subset of SecSpider’s vulnerability monitoring. DNSKEYs
are among the types of records being tracked by SecSpider.
By observing and storing past record sets and signatures,
SecSpider also automatically tracks potential replay vulnera-
bilities for a zone’s infrastructure records such as NS records,