7.3.1 半编译型语言
Java也是一种电脑编程语言，拥有跨平台、面向对象、泛型编程等特性。它最初被命名为Oak（橡树），当时的目标是用于电视机、电话、闹钟、烤面包机等家用电器的控制和通信。可是由于这些智能化家电的市场需求没有预期的高，于是Oak被改造为应用在互联网上的编程语言。1995年5月，它被正式命名为Java，并伴随着互联网的迅猛发展而发展，逐渐成为重要的网络编程语言。它的Logo大概您不会陌生，就是图7.21所示的这杯咖啡。
![alt](images/00395.jpeg){.calibre3}
图7.21 Java的Logo
前面说了，这个编程语言有编译型的，有解释型的。那好，提问：Java是哪种类型的语言呢？
![alt](images/00002.jpeg){.tpzz} A．编译型
![alt](images/00002.jpeg){.tpzz} B．解释型
![alt](images/00002.jpeg){.tpzz} C．以上皆错
![alt](images/00002.jpeg){.tpzz} D．人妖型
正确答案：C、D（我说是单选了吗？）。
其实，Java既不是编译型，也不是解释型。它有它的中性美，是多少有点半男不女、半上不下、半人半妖的这么一种人妖型语言。好吧，我承认这个名字不那么好听，那么我们就管它叫做半编译型语言吧。为什么这么叫呢？
【既需要编译器，又需要解释器】
首先，跟编译型语言一样，要想运行Java的源程序，必须要经过编译的步骤。但是Java程序编译出来之后并不能像C/C++语言一样直接在机器上运行。也就是说，Java编译器编译出来的并不是一个符合当前系统的二进制格式的程序，而是一种特殊结构的二进制程序。
那么这种特殊的程序怎么运行呢？要想运行这个程序，就和解释型语言一样，需要一个解释器。Java的解释器就是Java虚拟机。一般如果要运行一个Java写的软件，就必须装一个叫做JRE的东西。他负责给Java程序创造出一个可以自由运行的空间，在那里面，这个编译好的Java程序才能运行。
就好像，我们宽敞的内存是一片大草原，GCC编译出来的程序就是各种哺乳动物，什么牛、羊、猎狗之类的。而Java编译出来的程序就是一堆鲤鱼、黄鳝、泥鳅之类的东西。那么JRE的工作，就是挖一个水塘，或者做一个鱼缸。
【Java的特点】
那为什么Java要整得这么繁琐呢？又需要编译器，又需要解释器，有什么好处？好处很大，最大的好处就是跨平台。
作为编译型语言，编译出来的程序跟目标平台是紧密相关的。平台包括硬件和操作系统。也就是说，同样一套程序的源代码，如果要在不同的操作系统或者不同的硬件平台上运行，那么就需要用不同的编译器，针对每一种系统和硬件分别进行编译，才能够运行。
而Java就可以解决这种困境。它可以只编译一次，就能把编译出的二进制程序放到不同的平台上运行。当然，前提是那些平台上都安装了Java的解释器。各个平台的差异性由Java的解释器统一处理掉了，编写Java程序的人不需要考虑程序是运行在哪个系统，哪种CPU中，只要程序写出来，编译完了，就可以放到任何地方运行。Java的理想就是：Write
once，run anywhere。
![alt](images/00011.jpeg){.tpzz}**提示：**[实质上，由于各个系统的差异性，Java编译出的程序还是需要针对特定平台进行一定的调试和修改。所以有的程序员戏称Java是"Write
once,debug anywhere"。]{.kai1}
当然，解释型语言照样可以实现跨平台，只要不同的平台上都有相应的解释器就可以。比如bash其实就可以算是一种解释型语言，同样一个脚本，不管你是在Linux还是BSD系统，或者Windows的cygwin模拟环境下，都可以实现相同的功能。但是与之相比，由于经过了编译，Java的二进制程序更接近汇编指令，因此翻译起来效率比纯解释型语言高很多。
7.3.2 JDK和JRE
作为一种编译型语言，要编译程序，就需要编译器。
作为一种解释型语言，要运行程序，就需要解释器。
而作为一种人妖型语言的Java，既需要编译器，又需要解释器。所以，我们就来说说怎么装这俩东西。
【安装开源的JDK和JRE】
如果你想要运行一个Java的程序，比如咱们之前介绍过的BT下载软件毒蛙，那么你的系统里面就必须有解释器------JRE。JRE就是Java
Run
Time的缩写，只要你想运行Java程序，无论在哪个系统上，都得安装它。而如果你想开发Java程序，那就不止需要JRE了，还需要JDK，也就是Java
Development Kit，Java开发工具。
这两种东西在我们的软件源里有不止一种。您可以在新立得里面搜索一下JRE，会有不少结果。其中有一个openjdk系列的软件包，包括了编译器JDK和解释器JRE。看名字就能明白，这是一套Java的开源实现，如果您只是想运行些简单的Java程序，基本上装这个包也就可以了。不过既然懒蜗牛同学是想做Java的开发，那还是用更权威的比较好，那就是sun-java6。
【安装权威的JDK和JRE】
sun-java6这一套开发套件默认并不在源中，需要稍微操作一下。别急，一点儿也不难。
（1）首先用任何顺手的编辑器打开/etc/apt/sources.list文件，例如用gedit，就这样：
![alt](images/00396.jpeg){.calibre3}
（2）打开sources.list文件之后，在文件的最后加上这样一行：
![alt](images/00397.jpeg){.calibre3}
（3）记得我们说过，更改sources.list文件之后一定要更新，所以：
![alt](images/00398.jpeg){.calibre3}
好了，这样就可以直接用超级牛力来安装Java相关的东西了。比如安装JRE只要运行：
![alt](images/00399.jpeg){.calibre3}
就安装好了。或者用新立得安装sun-java6-jre这个软件包，也一样。如果需要做Java开发，就安装JDK。
![alt](images/00400.jpeg){.calibre3}
7.3.3 再说Eclipse
理论上有了JDK之后，就可以用任何一个文本编辑器来编写Java程序了，就像之前我们的懒蜗牛同学编写C程序那样。不过多数人不会这么开发Java，因为实在是有点困难。多数人还是会选择用Java的集成开发环境，Eclipse就是个不错的选择。上次我们介绍Eclipse用来作为C/C++的开发环境那只是个客串，这回开发Java，就是Eclipse的主场了。好，下面详细介绍一下。
Eclipse这家伙长得有些晦气，别人看了他总有种世界末日的感觉（日食嘛）。他本身就是一个Java程序，最初是由IBM公司开发的。而他的功能呢，是作为一套集成开发环境，来开发Java程序，于是总给人一点"煮豆燃豆萁"的感觉。行了，废话不多说了，软件源里就有Eclipse，可以直接叫超级牛力来装：
![alt](images/00401.jpeg){.calibre3}
不过源里的Eclipse版本一般比较旧，如果想用最新的版本，还是到官方下载比较好：
![alt](images/00402.jpeg){.calibre3}
下载那个"Eclipse IDE for Java
Developers"。下载下来应该是一个TAR包，直接解开就可以了，不用安装，绿色无污染，没有三氯氰胺，没有苏丹红，没有地沟油，懒蜗牛同学就在用它。
7.3.4 还是HelloWorld
安装好了JDK，准备好了Eclipse，懒蜗牛同学又要写HelloWorld了。
【首次启动Eclipse】
首先，懒蜗牛运行了刚刚下载来的Eclipse。Eclipse不紧不慢地显示出了如图7.22所示这么个窗口问懒蜗牛：你的工作目录设在哪里呢？
![alt](images/00403.jpeg){.calibre3}
图7.22 Eclipse询问Workspace路径
这个工作目录（Workspace）就是说，以后用Eclipse创建的各种项目、源文件什么的就都会存到这个目录中（当然，Eclipse不会乱存，会在里面分门别类建好目录的）。一般放在用户的家目录下就可以了，懒蜗牛就没有改动，使用了默认的路径，并且还勾选了下边那个"Use
this as the default and do not ask
again"复选框。这个复选框的意思就是："以后都这么办，别再问了。"勾选了之后，懒蜗牛单击了OK按钮。
之后，由于是第一次启动，Eclipse象征性地表示了一下欢迎，显示出了欢迎界面，如图7.23所示。
![alt](images/00404.jpeg){.calibre3}
图7.23 Eclipse欢迎页面
不过懒蜗牛同学并没有跟他客套，直接单击了右边的"Workbench"按钮，于是Eclipse就进入了工作状态，如图7.24所示。
![alt](images/00405.jpeg){.calibre3}
图7.24 Eclipse Workbench
【创建Java项目】
现在界面上自然什么都没有。于是懒蜗牛同学选择了File\|New\|Java
Project级联菜单，这就是要创建一个新的Java项目了。于是，Eclipse弹出了创建项目的对话框，如图7.25所示。
![alt](images/00406.jpeg){.calibre3}
图7.25 创建项目页面1