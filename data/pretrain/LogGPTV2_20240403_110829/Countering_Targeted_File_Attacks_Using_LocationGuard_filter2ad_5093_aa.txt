title:Countering Targeted File Attacks Using LocationGuard
author:Mudhakar Srivatsa and
Ling Liu
Countering Targeted File Attacks using LocationGuard
Mudhakar Srivatsa and Ling Liu
College of Computing, Georgia Institute of Technology
{mudhakar, lingliu}@cc.gatech.edu
Abstract
Serverless ﬁle systems, exempliﬁed by CFS, Farsite
and OceanStore, have received signiﬁcant attention from
both the industry and the research community. These
ﬁle systems store ﬁles on a large collection of untrusted
nodes that form an overlay network. They use crypto-
graphic techniques to maintain ﬁle conﬁdentiality and
integrity from malicious nodes. Unfortunately, crypto-
graphic techniques cannot protect a ﬁle holder from a
Denial-of-Service (DoS) or a host compromise attack.
Hence, most of these distributed ﬁle systems are vulner-
able to targeted ﬁle attacks, wherein an adversary at-
tempts to attack a small (chosen) set of ﬁles by attack-
ing the nodes that host them. This paper presents Lo-
cationGuard − a location hiding technique for securing
overlay ﬁle storage systems from targeted ﬁle attacks.
LocationGuard has three essential components: (i) lo-
cation key, consisting of a random bit string (e.g., 128
bits) that serves as the key to the location of a ﬁle, (ii)
routing guard, a secure algorithm that protects accesses
to a ﬁle in the overlay network given its location key
such that neither its key nor its location is revealed to
an adversary, and (iii) a set of four location inference
guards. Our experimental results quantify the overhead
of employing LocationGuard and demonstrate its effec-
tiveness against DoS attacks, host compromise attacks
and various location inference attacks.
1 Introduction
A new breed of serverless ﬁle storage services, like CFS
[7], Farsite [1], OceanStore [15] and SiRiUS [10], have
recently emerged. In contrast to traditional ﬁle systems,
they harness the resources available at desktop worksta-
tions that are distributed over a wide-area network. The
collective resources available at these desktop worksta-
tions amount to several peta-ﬂops of computing power
and several hundred peta-bytes of storage space [1].
These emerging trends have motivated serverless ﬁle
storage as one of the most popular application over de-
centralized overlay networks. An overlay network is a
virtual network formed by nodes (desktop workstations)
on top of an existing TCP/IP-network. Overlay networks
typically support a lookup protocol. A lookup operation
identiﬁes the location of a ﬁle given its ﬁlename. Lo-
cation of a ﬁle denotes the IP-address of the node that
currently hosts the ﬁle.
There are four important issues that need to be ad-
dressed to enable wide deployment of serverless ﬁle sys-
tems for mission critical applications.
Efﬁciency of the lookup protocol. There are two kinds
of lookup protocol that have been commonly deployed:
the Gnutella-like broadcast based lookup protocols [9]
and the distributed hash table (DHT) based lookup pro-
tocols [25] [19] [20]. File systems like CFS, Farsite and
OceanStore use DHT-based lookup protocols because of
their ability to locate any ﬁle in a small and bounded
number of hops.
Malicious and unreliable nodes. Serverless ﬁle stor-
age services are faced with the challenge of having to
harness the collective resources of loosely coupled, in-
secure, and unreliable machines to provide a secure, and
reliable ﬁle-storage service. To complicate matters fur-
ther, some of the nodes in the overlay network could
be malicious. CFS employs cryptographic techniques
to maintain ﬁle data conﬁdentiality and integrity. Far-
site permits ﬁle write and update operations by using a
Byzantine fault-tolerant group of meta-data servers (di-
rectory service). Both CFS and Farsite use replication as
a technique to provide higher fault-tolerance and avail-
ability.
Targeted File Attacks. A major drawback with server-
less ﬁle systems like CFS, Farsite and Ocean-Store is
that they are vulnerable to targeted attacks on ﬁles. In
USENIX Association
14th USENIX Security Symposium
81
a targeted attack, an adversary is interested in compro-
mising a small set of target ﬁles through a DoS attack
or a host compromise attack. A denial-of-service attack
would render the target ﬁle unavailable; a host compro-
mise attack could corrupt all the replicas of a ﬁle thereby
effectively wiping out the target ﬁle from the ﬁle sys-
tem. The fundamental problem with these systems is
that: (i) the number of replicas (R) maintained by the
system is usually much smaller than the number of ma-
licious nodes (B), and (ii) the replicas of a ﬁle are stored
at publicly known locations. Hence, malicious nodes can
easily launch DoS or host compromise attacks on the set
of R replica holders of a target ﬁle (R (cid:28) B).
Efﬁcient Access Control. A read-only ﬁle system like
CFS can exercise access control by simply encrypting
the contents of each ﬁle, and distributing the keys only to
the legal users of that ﬁle. Farsite, a read-write ﬁle sys-
tem, exercises access control using access control lists
(ACL) that are maintained using a Byzantine-fault-tolerant
protocol. However, access control is not truly distributed
in Farsite because all users are authenticated by a small
collection of directory-group servers. Further, PKI (public-
key Infrastructure) based authentication and Byzantine
fault tolerance based authorization are known to be more
expensive than a simple and fast capability-based access
control mechanism [6].
In this paper we present LocationGuard as an effec-
tive technique for countering targeted ﬁle attacks. The
fundamental idea behind LocationGuard is to hide the
very location of a ﬁle and its replicas such that, a legal
user who possesses a ﬁle’s location key can easily and
securely locate the ﬁle on the overlay network; but with-
out knowing the ﬁle’s location key, an adversary would
not be able to even locate the ﬁle, let alone access it or
attempt to attack it. Further, an adversary would not be
even able to learn if a particular ﬁle exists in the ﬁle sys-
tem or not. LocationGuard comprises of three essential
components. The ﬁrst component of LocationGuard is a
location key, which is a 128-bit string used as a key to
the location of a ﬁle in the overlay network. A ﬁle’s lo-
cation key is used to generate legal capabilities (tokens)
that can be used to access its replicas. The second com-
ponent is the routing guard, a secure algorithm to locate
a ﬁle in the overlay network given its location key such
that neither the key nor the location is revealed to an
adversary. The third component is an extensible collec-
tion of location inference guards, which protect the sys-
tem from trafﬁc analysis based inference attacks, such as
lookup frequency inference attacks, end-user IP-address
inference attacks, ﬁle replica inference attacks, and ﬁle
size inference attacks. LocationGuard presents a careful
combination of location key, routing guard, and location
inference guards, aiming at making it very hard for an
adversary to infer the location of a target ﬁle by either
actively or passively observing the overlay network.
In addition traditional cryptographic guarantees like
ﬁle conﬁdentiality and integrity, LocationGuard mitigates
denial-of-service (DoS) and host compromise attacks,
while adding very little performance overhead and very
minimal storage overhead to the ﬁle system. Our initial
experiments quantify the overhead of employing Loca-
tionGuard and demonstrate its effectiveness against DoS
attacks, host compromise attacks and various location
inference attacks.
The rest of the paper is organized as follows. Sec-
tion 2 provides terminology and background on over-
lay network and serverless ﬁle systems like CFS and
Farsite. Section 3 describes our threat model in detail.
We present an abstract functional description of Loca-
tionGuard in Section 4. Section 4, 5 describes the de-
sign of our location keys and Section 6 presents a de-
tailed description of the routing guard. We outline a brief
discussion on overall system management in Section 8
and present a thorough experimental evaluation of Loca-
tionGuard in Section 9. Finally, we present some related
work in Section 10, and conclude the paper in Section
11.
2 Background and Terminology
In this section, we give a brief overview on the vital
properties of DHT-based overlay networks and their lookup
protocols (e.g., Chord [25], CAN [19], Pastry [20], Tapestry
[3]). All these lookup protocols are fundamentally based
on distributed hash tables, but differ in algorithmic and
implementation details. All of them store the mapping
between a particular search key and its associated data
(ﬁle) in a distributed manner across the network, rather
than storing them at a single location like a conventional
hash table. Given a search key, these techniques locate
its associated data (ﬁle) in a small and bounded num-
ber of hops within the overlay network. This is realized
using three main steps. First, nodes and search keys are
hashed to a common identiﬁer space such that each node
is given a unique identiﬁer and is made responsible for
a certain set of search keys. Second, the mapping of
82
14th USENIX Security Symposium
USENIX Association
search keys to nodes uses policies like numerical close-
ness or contiguous regions between two node identiﬁers
to determine the (non-overlapping) region (segment) that
each node will be responsible for. Third, a small and
bounded lookup cost is guaranteed by maintaining a tiny
routing table and a neighbor list at each node.
In the context of a ﬁle system, the search key can
be a ﬁlename and the identiﬁer can be the IP address
of a node. All the available node’s IP addresses are
hashed using a hash function and each of them store a
small routing table (for example, Chord’s routing table
has only m entries for an m-bit hash function and typi-
cally m = 128) to locate other nodes. Now, to locate a
particular ﬁle, its ﬁlename is hashed using the same hash
function and the node responsible for that ﬁle is obtained
using the concrete mapping policy. This operation of lo-
cating the appropriate node is called a lookup.
Serverless ﬁle system like CFS, Farsite and Ocean-
Store are layered on top of DHT-based protocols. These
ﬁle systems typically provide the following properties:
(1) A ﬁle lookup is guaranteed to succeed if and only if
the ﬁle is present in the system, (2) File lookup termi-
nates in a small and bounded number of hops, (3) The
ﬁles are uniformly distributed among all active nodes,
and (4) The system handles dynamic node joins and leaves.
In the rest of this paper, we assume that Chord [25] is
used as the overlay network’s lookup protocol. However,
the results presented in this paper are applicable for most
DHT-based lookup protocols.
3 Threat Model
Adversary refers to a logical entity that controls and co-
ordinates all actions by malicious nodes in the system.
A node is said to be malicious if the node either inten-
tionally or unintentionally fails to follow the system’s
protocols correctly. For example, a malicious node may
corrupt the ﬁles assigned to them and incorrectly (mali-
ciously) implement ﬁle read/write operations. This deﬁ-
nition of adversary permits collusions among malicious
nodes.
We assume that the underlying IP-network layer may
be insecure. However, we assume that the underlying
IP-network infrastructure such as domain name service
(DNS), and the network routers cannot be subverted by
the adversary.
An adversary is capable of performing two types of
attacks on the ﬁle system, namely, the denial-of-service
attack, and the host compromise attack. When a node
is under denial-of-service attack, the ﬁles stored at that
node are unavailable. When a node is compromised, the
ﬁles stored at that node could be either unavailable or
corrupted. We model the malicious nodes as having a
large but bounded amount of physical resources at their
disposal. More speciﬁcally, we assume that a malicious
node may be able to perform a denial-of-service attack
only on a ﬁnite and bounded number of good nodes, de-
noted by α. We limit the rate at which malicious nodes
may compromise good nodes and use λ to denote the
mean rate per malicious node at which a good node can
be compromised. For instance, when there are B ma-
licious nodes in the system, the net rate at which good
nodes are compromised is λ ∗ B (node compromises per
unit time). Note that it does not really help for one ad-
versary to pose as multiple nodes (say using a virtual-
ization technology) since the effective compromise rate
depends only on the aggregate strength of the adversary.
Every compromised node behaves maliciously. For in-
stance, a compromised node may attempt to compromise
other good nodes. Every good node that is compromised
would independently recover at rate µ. Note that the
recovery of a compromised node is analogous to clean-
ing up a virus or a worm from an infected node. When
the recovery process ends, the node stops behaving ma-
liciously. Unless and otherwise speciﬁed we assume that
the rates λ and µ follow an exponential distribution.
3.1 Targeted File Attacks
Targeted ﬁle attack refers to an attack wherein an adver-
sary attempts to attack a small (chosen) set of ﬁles in
the system. An attack on a ﬁle is successful if the tar-
get ﬁle is either rendered unavailable or corrupted. Let
fn denote the name of a ﬁle f and fd denote the data
in ﬁle f. Given R replicas of a ﬁle f, ﬁle f is unavail-
able (or corrupted) if at least a threshold cr number of
its replicas are unavailable (or corrupted). For example,
for read/write ﬁles maintained by a Byzantine quorum
[1], cr = dR/3e. For encrypted and authenticated ﬁles,
cr = R, since the ﬁle can be successfully recovered as
long as at least one of its replicas is available (and un-
corrupt) [7]. Most P2P trust management systems such
as [27] uses a simple majority vote on the replicas to
compute the actual trust values of peers, thus we have
cr = dR/2e.
USENIX Association
14th USENIX Security Symposium
83
Distributed ﬁle systems like CFS and Farsite are highly
vulnerable to target ﬁle attacks since the target ﬁle can be
rendered unavailable (or corrupted) by attacking a very
small set of nodes in the system. The key problem arises
from the fact that these systems store the replicas of a
ﬁle f at publicly known locations [13] for easy lookup.
For instance, CFS stores a ﬁle f at locations derivable
from the public-key of its owner. An adversary can at-
tack any set of cr replica holders of ﬁle f, to render
ﬁle f unavailable (or corrupted). Farsite utilizes a small
collection of publicly known nodes for implementing a
Byzantine fault-tolerant directory service. On compro-
mising the directory service, an adversary could obtain
the locations of all the replicas of a target ﬁle.
Files on an overlay network have two primary at-
tributes: (i) content and (ii) location. File content could
be protected from an adversary using cryptographic tech-
niques. However, if the location of a ﬁle on the over-
lay network is publicly known, then the ﬁle holder is
susceptible to DoS and host compromise attacks. Loca-
tionGuard provides mechanisms to hide ﬁles in an over-
lay network such that only a legal user who possesses a
ﬁle’s location key can easily locate it. Further, an adver-
sary would not even be able to learn whether a particu-
lar ﬁle exists in the ﬁle system or not. Thus, any previ-
ously known attacks on ﬁle contents would not be appli-
cable unless the adversary succeeds in locating the ﬁle.
It is important to note that LocationGuard is oblivious to
whether or not ﬁle contents are encrypted. Hence, Lo-
cationGuard can be used to protect ﬁles whose contents
cannot be encrypted, say, to permit regular expression
based keyword search on ﬁle contents.
4 LocationGuard
4.1 Overview
We ﬁrst present a high level overview of LocationGuard.
Figure 1 shows an architectural overview of a ﬁle system
powered by LocationGuard. LocationGuard operates on
top of an overlay network of N nodes. Figure 2 provides
a sketch of the conceptual design of LocationGuard. Lo-
cationGuard scheme guards the location of each ﬁle and
its access with two objectives: (1) to hide the actual lo-
cation of a ﬁle and its replicas such that only legal users
who hold the ﬁle’s location key can easily locate the
ﬁle on the overlay network, and (2) to guard lookups
on the overlay network from being eavesdropped by an
adversary. LocationGuard consists of three core compo-
nents. The ﬁrst component is location key, which con-
trols the transformation of a ﬁlename into its location on
the overlay network, analogous to a traditional crypto-
graphic key that controls the transformation of plaintext
into ciphertext. The second component is the routing
guard, which makes the location of a ﬁle unintelligible.
The routing guard is, to some extent, analogous to a tra-
ditional cryptographic algorithm which makes a ﬁle’s
contents unintelligible. The third component of Loca-
tionGuard includes an extensible package of location in-
ference guards that protect the ﬁle system from indirect
attacks. Indirect attacks are those attacks that exploit a
ﬁle’s metadata information such as ﬁle access frequency,
end-user IP-address, equivalence of ﬁle replica contents
and ﬁle size to infer the location of a target ﬁle on the
overlay network. In this paper we focus only on the ﬁrst
two components, namely, the location key and the rout-
ing guard. For a detailed discussion on location infer-
ence guards refer to our tech-report [23].
In the following subsections, we ﬁrst present the main
concepts behind location keys and location hiding (Sec-
tion 4.2) and describe a reference model for serverless
ﬁle systems that operate on LocationGuard (Section 4.3).
Then we present the concrete design of LocationGuard’s
core components: the location key (Section 5), and the
routing guard (Section 6).