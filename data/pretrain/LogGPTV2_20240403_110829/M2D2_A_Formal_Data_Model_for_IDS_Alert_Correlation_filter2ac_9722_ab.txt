Unix (http://www.netsaint.org), System Management Server
(http://www.microsoft.com/smserver/)
tool
for
for Windows
M2D2: A Formal Data Model for IDS Alert Correlation
121
Deﬁnitions
P is the set of products,
V N is the set of product vendor names,
P N is the set of product names,
P V = Np is the set of product version (N is the set of integers),
P T = {OperatingSystem, LocalApp, httpServ, ftpServ, . . . , other}
is the set of product types.
Functions & Relations
vendor ∈ P (cid:9)→ V N
prodname ∈ P → P N
version ∈ P → P V
prodtype ∈ P (cid:9)→ P T
conﬁguration ∈ H → P(P)
<∈ P V ↔ P V
Properties
∀v1, v2 ∈ Np, v1 < v2 ⇐⇒ ∃j|∀i, 1 ≤ i ≤ j, v1[i] = v2[i] ∧ v1[j] < v2[j]
Comments
Not all products have a vendor attribute, thus vendor is a partial function.
Two distinct versions of the same product are modelized by two Pelements, i.e
versionis not a relation.
Fig. 5. M2D2 product model
Services, operating systems, local applications are products which run on
hosts. The set of products running on a host is called a conﬁguration. Formally
speaking, a host conﬁguration is a subset of products.
2.3 Vulnerabilities
Vulnerabilities are deﬁned in ﬁgure 6. Most of current attacks consist in exploit-
ing vulnerabilities that exist in entities of an IS. Shirey deﬁnes a vulnerability
as a ﬂaw or weakness in a system design, implementation, or management that
could be exploited to violate the system security policy [9]. Shirey’s vulnerable
system corresponds to an M2D2 product. However, vulnerabilities sometimes do
not refer to a single product: a host actual vulnerability may depend on the
combined presence of several products (a web server on a given operating sys-
tem for instance); a protocol design error may involve vulnerabilities in several
implementations of the protocol (see SNMP’s vulnerabilities CAN-2002-0012 for
instance (a.k.a BugTraq id 4088)). Arlat et al. deﬁne a vulnerability as a latent
error present on a target [10], a target corresponding to a M2D2 host. However,
it is not practical to model a vulnerable entity that way because each vulnerabil-
ity would require a dedicated relation or function between the host set and the
vulnerabilities set. In M2D2 a vulnerability aﬀects a conﬁguration (aﬀects). In
that way, a host is vulnerable if its conﬁguration is a superset of one vulnerable
conﬁguration.
122
B. Morin et al.
Deﬁnitions
V is the set of CVE and CAN vulnerabilities
VN is the set of vulnerability names
Functions & Relations
↔ P(P)
aﬀects ∈
→ {Remote, RemoteUser, Local}
req ∈
con ∈
→ {CodeExec, DoS, Info}
(cid:1) VN
vulname ∈
equiv ∈ vulname[V] ↔ VN
V
V
V
V
Properties
vulname[V] is the set of CVE and CAN vulnerability names.
Comments
aﬀects is a relation because a vulnerability may aﬀect several conﬁgurations and a
conﬁguration may be aﬀected by many vulnerabilities.
Fig. 6. M2D2 vulnerability model
The vulnerability set is built from the ICAT vulnerability database. More-
over, ICAT uses the CVE/CAN3 naming convention proposed by Mann [11] to
uniquely identify the vulnerabilities. The Mitre proposes a list of name equiva-
lences between CVE and other vulnerability names. This list is used inside M2D2
to cluster vulnerability names which refer to the same vulnerability (equiv). Ide-
ally, equiv should be an equivalence relation, but it is not in reality. As Mann
notices, the mapping between vulnerability names and CVE names is seldom one-
to-one, so a non-CVE name may be equivalent to more than one CVE names.
As a result, from one non-CVE vulnerability name, it is possible to get many
CVE vulnerabilities.
Modeling vulnerabilities actually requires that a classiﬁcation is established.
As a matter of fact, no dictionary of terms for describing alerts exists [6], but
alerts often refer to a known vulnerability. As a result, the information found
in vulnerability databases remains the only source of information for describing
alerts. One of the ICAT database strengths is that many attributes are used
to classify vulnerabilities. For alert correlation purpose, we have chosen the two
criteria which are described thereafter. Criteria can easily be extracted from
the ICAT database, they are common to all classiﬁcations and are relevant for
alert correlation, while remaining simple. For example, correlation may require
to detect if a privilege elevation occurred, or if several kinds attacks have been
attempted.
– Access requirements (req) for the vulnerability to be exploited
(cid:3) Local: the attacker needs a physical local access to the target,
(cid:3) RemoteUser: the attacker needs a remote access to the target with user-
level privileges,
(cid:3) Remote: the attacker only needs a remote access to the target.
3
http://cve.mitre.org/
M2D2: A Formal Data Model for IDS Alert Correlation
123
is the set of vulnerability scanners,
Deﬁnitions
D is the set of IDS,
S
R is the set of tool-speciﬁc report names (alert or scan),
DN is the set of NIDS
DH is the set of HIDS
Functions & Relations
meth ∈ D → {Misuse, Anomaly}
data ∈ D → {HostBased, NetworkBased}
monitored interface ∈ DN → I
monitored host ∈ DH → H
scans ∈ S ↔ H
canraise ∈ D ∪ S ↔ R
refersto ∈ R ↔ VN
Properties
DN = data
DH = data
−1[{NetworkBased}]
−1[{HostBased}]
Fig. 7. M2D2 security tools model
– Consequence (con) of a successful exploit of the vulnerability:
(cid:3) DoS: the exploit results in a denial of service.
(cid:3) InformationGathering: the exploit results in information disclosure.
For example, directory traversals and ﬁle reading fall under this category.
(cid:3) CodeExecution: the exploit results in the execution of arbitrary code.
For example, buﬀer overﬂows and race conditions fall under this category.
2.4 Security Tools
Security tools model is formalized in ﬁgure 7. Vulnerabilities can be detected
either when they are exploited by an attacker or simply when they are latent. IDS
detect the former, vulnerability scanners detect the latter. IDS and vulnerability
scanners are security tools.
Although they are part of the topology, security tools need to be explicitly
described in a security model like M2D2. Security tools are event producers
(see 2.5). Any security tool type should be integrated into M2D2. In the cur-
rent model, IDS are qualiﬁed by their analysis method (meth), either misuse-
detection or anomaly detection. Other security tools, like ﬁrewalls, will be in-
cluded in future versions of M2D2.
IDS detect, identify and generate alerts about active attacks in real time.
We distinguish two kinds of IDS according to their data source: HIDS (Host-
based IDS) and NIDS (Network-based IDS) (data). This dichotomy is based on
the topological visibility of an IDS: the topological visibility of an IDS refers to
the set of network components an IDS can monitor. NIDS (Network-based IDS)
read streams of events on a network interface (monitored interface), thus they
124
B. Morin et al.
can monitor many hosts depending on their location in the network. Whereas
a HIDS (should it be system-based or application based) monitor a single host
(monitored host), vulnerability scanners do vulnerability assessments on several
hosts, thus their topological visibility is modeled with the relation between a
scanner and a host (scans).
We also introduce the operational visibility of an IDS which refers to the
ability of an IDS to detect vulnerability exploits according to its conﬁguration4.
This is modeled by a relation (canraise) between an IDS or a scanner and a
report name. A report name is tool-speciﬁc, i.e the names of the reports are the
ones that are used by the tool that generates the alerts. Report names are linked
to one or more vulnerability identiﬁers (refersto). It is therefore transitively
possible to know which vulnerability exploits can be detected by an IDS.
The correspondence between report names and vulnerabilities are found, for
instance, in IDS signature ﬁles for misuse IDS.
It has to be noted that all report names do not refer to a vulnerability. As
a matter of fact, all attacks are not vulnerability exploits (port scanning is such
example). Some IDS can detect an attack but not recognize it as the exploit of
a given vulnerability, either because the attack is not referenced yet or because
the IDS cannot do so (case of the anomaly IDS).
2.5 Events, Alerts, and Scans
The event formal model is described in ﬁgure 8.
Both vulnerability scanners and IDS generate messages about the existence
or about an ongoing exploit of a vulnerability. The former is called a scan, and
the latter an alert. In the case of alerts, security tools should also generate the
events which led them to generate alerts.
Arlat et al. deﬁne an event as the instantaneous image of a system [10]. In
other words, an event is the manifestation of some activity the format of which
is discussed in this section. In the intrusion detection ﬁeld, event and alert are
generally two distinct concepts [12]. An event is a low level entity (TCP packet,
system call, syslog entry, for example) from which an analysis is performed by a
security tool. An alert is a message from an analyzer signaling that one or more
events of interest have been detected. We say that an alert is a kind of event,
since it reﬂects the state of an IDS. Such a deﬁnition is compliant with the
previous deﬁnitions and enables to elegantly model the fact that alerts produced
by an IDS may be the events from other tools’ point of view. In other words,
current IDS are low level event consumers and alert producers but future IDS
may be alert consumers and high level alerts producers.
M2D2 models alerts, scans, and the following event types: IP events, TCP
events, UDP events, HTTP events and HTTP log events. We restricted the event
types to the set of event types understood by most current IDS. However, M2D2
has to be extended with other event types such as operating system level events
and other network application protocol events, with their respective attributes.
4 e.g the set of activated signatures for a misuse IDS
M2D2: A Formal Data Model for IDS Alert Correlation
125
Deﬁnitions
E
is the set of event instances,
EA
is the set of alerts,
ES
is the set of scans,
EIP
is the set of IPv4 events,
ETCP is the set of TCP events,
EUDP is the set of UDP events,
EHTTP is the set of HTTP events,
ELOG is the set of web servers log events.
Properties
EA,EIP,ETCP,EUDP,EHTTP,ELOG partition E
Functions & Relations
tstamp ∈
partof ∈
alert generator ∈
scan generator ∈
scan host target ∈
scan port target ∈
causes ∈
E → N
E ↔ E
EA → D
reportname ∈ EA ∪ ES → R
ES → S
ES → H
ES → N
E ↔ EA
Comments
Alerts can cause other alerts, therefore dom(causes) ⊂ E, not E − EA
ran(causes) (cid:1) EA because alerts may have no cause.
Fig. 8. M2D2 model of events
The common attribute of all events is the timestamp (tstamp). The ID-
MEF [12] uses three distinct timestamps: detecttime (attack occurrence date),
createtime (attack detection date), analysertime (alert generation date).
Those three distinct timestamps depend on the nature of the M2D2 events:
a M2D2 IPEvent (cf p. 126) timestamp is a detecttime. An alert (cf p. 125)
timestamp is a createtime or a analysertime.
To model the aggregative nature of events, we introduce the partof relation.
This kind of relation models the fact that an alert can aggregate (encapsulate)
several other alerts or that an HTTP request is part of an HTTP log entry. This
relation may be reﬁned in the future if necessary.
In the remainder of this section, we give some details on some of the event
types (alerts, scans, and HTTP log events). Others are self-explanatory (the
reader may refer to the relevant RFCs).
Alerts. Alerts are formalized in ﬁgure 8.
Each alert has a single report name (reportname). Alerts are generated by
IDS (alert generator).
126
B. Morin et al.
As with IDMEF deﬁnition, alerts are caused by the occurrence of events
which are the manifestation of an attack (causes). Note that alerts may not be
linked to a causal event. This does not mean that an alert has no cause, but that
the causal information is not available (the IDS generating the alert does not
give this information, for instance). Alerts may also have more than one causes.
Finally, an event can be the cause of several alerts because:
– it can be shared by several alerts generated by distinct IDS, or
– IDS may generate several alerts for one single event. For example, the HTTP
request