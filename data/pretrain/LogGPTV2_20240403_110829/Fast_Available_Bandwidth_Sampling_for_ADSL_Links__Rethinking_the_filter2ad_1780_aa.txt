title:Fast Available Bandwidth Sampling for ADSL Links: Rethinking the
Estimation for Larger-Scale Measurements
author:Daniele Croce and
Taoufik En-Najjary and
Guillaume Urvoy-Keller and
Ernst W. Biersack
Fast Available Bandwidth Sampling for ADSL Links:
Rethinking the Estimation for Larger-Scale
Measurements(cid:2)
Daniele Croce, Taouﬁk En-Najjary, Guillaume Urvoy-Keller, and Ernst W. Biersack
EURECOM, Sophia Antipolis, France
{croce,ennajjar,urvoy,erbi}@eurecom.fr
Abstract. Most existing tools for measuring the end-to-end available bandwidth
require access to both end-hosts of the measured path, which severely restricts
their usability. Few tools have been developed to overcome this limitation, but
all of them focus on achieving high precision and are not suitable for large cam-
paigns. In this paper we develop FAB-Probe, a tool aimed at characterizing the
available bandwidth of a large number of paths, adapting it particularly for ADSL
settings. FAB-Probe is an evolution of ABwProbe, a tool that estimates the avail-
able bandwidth in non-cooperative ADSL environments. Analyzing carefully the
needs of such a characterization tool, we optimize and rethink ABwProbe for
larger-scale measurements. The validation of FAB-Probe is obtained both “in-
lab”, with ADSL hosts under our control, as well as under real trafﬁc conditions,
with the help of an ISP. Finally, as a proof of concept, we analyze the available
bandwidth of over 1300 hosts participating to the KAD DHT used by eMule,
periodically monitoring some static peers for over ten days.
1 Introduction and Motivation
Nowadays, over 221 million users access the Internet through broadband links and in
many developed countries broadband technologies have reached more than half of the
households, with peaks of over 90% penetration [10]. Moreover, subscribers are ex-
pected to double in the next four years, conﬁrming the exponential increase observed
until now [13]. Over 137 millions broadband users (62% of all subscribers) access the
Internet through an ADSL link. Broadband technologies have allowed the development
and the success of new bandwidth intensive applications (peer-to-peer applications for
example). This have pushed the consumption of bandwidth and, therefore, the devel-
opment of new, high capacity technologies. Despite these improvements, broadband
technology is still the fundamental bottleneck for achieving higher performances [3].
Researchers had, up to now, limited access to information related to the character-
istics of residential broadband networks. This was mainly caused by the difﬁculties in
measuring these networks without explicit cooperation of the end hosts or the ISPs.
Indeed, only few existing tools have been designed to work in non-cooperative1 en-
vironments and all focus on achieving high precision while are not suitable for large
(cid:2) This work is supported in part by the NANODATA-CENTERS program (FP7-ICT-223850) of
the EU.
1 Following the terminology used in [2, 11], with “non-cooperative” we mean that access to the
remote host is not available.
S.B. Moon et al. (Eds.): PAM 2009, LNCS 5448, pp. 67–76, 2009.
© Springer-Verlag Berlin Heidelberg 2009
68
D. Croce et al.
measurement campaigns. Moreover, to the best of our knowledge, only ABwProbe [2]
is tuned precisely for the available bandwidth (avail-bw) estimation of ADSL links.
In this paper, we propose FAB-Probe which is the natural evolution of ABwProbe.
We rethink and optimize the tool for larger-scale measurements, giving particular at-
tention to the time needed for obtaining a good estimate. Observing common trafﬁc
patterns, we elaborate a new strategy for sampling the avail-bw efﬁciently, adapting it
to the absolute capacity of the ADSL. We reduce at minimum the number of probes
and we reﬁne existing cross-trafﬁc ﬁltering techniques. We also develop a method for
detecting uplink congestion, which can alter the measurements. After validating FAB-
Probe “in-lab” against ADSL hosts under our control, we test it in real trafﬁc conditions
with the collaboration of an ISP, obtaining very good results. Finally, as a proof of con-
cept, we use FAB-Probe for measuring over 1300 peers participating in KAD, the DHT
used by eMule: we measure the hosts closely in time so to obtain a snapshot of the avail-
bw distribution, and we select 82 with static addresses that we measure periodically for
over 10 days. We also provide FAB-Probe for public evaluation, available at [5].
2 Background and Related Work
2.1 Active Measurements in Non-cooperative Environments
In a cooperative environment, active measurements are usually done in the following
way: a speciﬁc number of probing packets with appropriate characteristics (size, rate,
etc.) are transmitted through the network, link or device, that has to be measured, to-
wards a receiver. On the receiver side, the probes are captured and some metrics (la-
tency, rate, inter-packet gap, etc.) are computed. By analyzing and comparing these
metrics at the receiver, it is possible to infer some characteristics of the network tra-
versed and to estimate the desired quantity.
In a non-cooperative environment, instead, there is no control on the receiving host
and, thus, there is no way to analyze the probes received at the destination. Therefore,
all statistical information on the probes must be obtained in a different and indirect
manner. An idea that has been adopted in various tools [1, 2, 3, 6, 7, 11], is to send
particular types of probes which should induce the receiving host to reply with some
other packets, “echoing” the received probes. Examples of probes that have this quality
are: ICMP Echo and Timestamp requests, most TCP packets (ACKs, SYNs, FINs, etc.
but not RSTs), UDP packets sent to closed ports.
When undertaking measurements in this non-cooperative way, it becomes challeng-
ing to distinguish between the characteristics of the forward and of the reverse path:
when measuring the forward path, we must verify that the observed metrics capture
the characteristics of the forward path and not the characteristics of the reverse path
(and viceversa). An important feature that makes TCP-based probes attractive, is that
the packet sent back in reply by the non-cooperative host is a 40 byte packet (in most
cases a RST) regardless of the size of the probe that has generated it. This property
is fundamental for measuring the avail-bw: since packets traverse the network in both
directions, the size of the probes must be adjusted to differentiate between forward and
reverse path and interpret the results correctly. In this work we focus on the estimation
of the downlink avail-bw, as the uplink estimation is conceptually similar.
Fast Available Bandwidth Sampling
69
2.2 Tools for Non-cooperative Available Bandwidth Estimation
While a multitude of utilities exist for cooperative environments, very few are designed
to measure the avail-bw in settings where cooperation is not granted. Two tools, path-
neck [7] and Sprobe [11], do not require access to the receiving host, however, the ﬁrst
one measures the Average Dispersion Rate (ADR, an upper bound of the avail-bw) and,
since it is based on ICMP probes, can suffer from ICMP rate limiting; the second one is
based on the Probe Gap Model which has been criticized and proven inaccurate in [8].
Some techniques dedicated to broadband networks (ADSL and Cable) are described in
[3] for the estimation of capacity, buffer depth, queue management and others. How-
ever, the avail-bw is not taken into account.
To the best of our knowledge, the only tool designed especially to measure the avail-
bw in non-cooperative environments is ABwProbe, which is particularly tuned to mea-
sure non-cooperative ADSL hosts. FAB-Probe is thus a natural evolution of ABwProbe
which in turn is inspired by Pathload [4]. Both ABwProbe and FAB-Probe use the RTT
in place of the One-Way Delay (OWD) of Pathload: if no cross-trafﬁc disturbs the RSTs
on the reverse path, indeed, an increasing trend in the OWDs will be preserved and will
appear in the RTT samples as well. ACK probes are sent at rate R to the non-cooperative
host which replies with ﬁxed-size RSTs. The probes are only echoed by the receiver and
at the sender the RTT is computed. This way, the RTT measured is used in place of the
OWD (which is impossible to measure) for detecting if R > A or not, A being the
avail-bw of the path. However, since packets traverse the network a second time, the
received RSTs will carry both information of the probes from the forward path, but will
also be inﬂuenced by the characteristics of the reverse path. This becomes an important
problem in asymmetric environments such ADSL because RSTs have to traverse the
uplink of the ADSL which has much lower capacity (and usually lower avail-bw) than
the downlink.
To overcome this asymmetry, in ABwProbe (and in FAB-Probe as well) we exploit
the fact that TCP RSTs are always 40 bytes long regardless of the size of the ACKs: if
the probes are very large, say 1500 bytes, then the rate generated on the downlink will be
1500/40 = 37.5 times higher than the load on the uplink (Layer-2 overheads excluded,
see [2]). Now, most ADSLs have uplink capacities that are less than 8 times lower
than the downlink [3] so this measure should be sufﬁcient to overcome the capacity
asymmetry. In FAB-Probe an additional test is implemented to detect when the uplink
avail-bw is insufﬁcient for the RSTs to be transmitted on the uplink.
Finally, even when the avail-bw on the uplink is sufﬁcient, it has been shown in [2]
that large cross-trafﬁc packets interfering on the uplink can signiﬁcantly affect the mea-
surement because of the compression of the RSTs queued behind. Since an MTU packet
can take several tens of milliseconds to be transmitted, this effect is not negligible. In
ABwProbe some techniques were proposed to detect and ﬁlter RTT samples affected
by RST compression. As we will explain later, in FAB-Probe we improve the ﬁltering
by combining the proposed methods to better exploit their strengths.
Like other tools, ABwProbe too is aimed at providing very high precision in esti-
mating the avail-bw. In FAB-Probe we intentionally renounce to some measurement
resolution, in favor of the measurement latency which is remarkably reduced.
70
D. Croce et al.
3 FAB-Probe: Fast Available Bandwidth Sampling for ADSL
Links
3.1 What Should We Measure Exactly?
Most tools measuring the avail-bw aim at providing an absolute estimation regardless
of the capacity of the link. This makes sense for applications (such as video stream-
ing) that require a certain amount of bandwidth to work properly. In general, however,
to characterize a network and the load generated by the users, it is more interesting
to know the avail-bw relative to the absolute capacity. For example, it is often more
useful to know that the bottleneck link has 30% left of its spare capacity rather than
knowing there are 200 kbps available, as the ﬁrst metric intrinsically provides an idea
of link quality while the latter does not. Additionally, for most large-scale characteriza-
tion purposes, it is critical to have a fast estimation process while it is less important to
have extremely high precision. For example, knowing that the avail-bw is in between
90% and 100% of the total capacity is usually enough for classifying the link as inac-
tive. This aspect is very important because most estimation tools (including ABwProbe)
reiterate the probing phase until the desired precision is obtained, i.e. higher precision
translates in longer running time. The intuition behind FAB-Probe is thus to analyze
the avail-bw relative to the capacity, probing the avail-bw at few key values (only 5 by
default) and providing a quick, but still accurate, estimate of the avail-bw of the link. In
this paper the focus is on the avail-bw estimation and discussions on how to estimate
the capacity are out of its scope. For a description of the capacity estimation technique
used in FAB-Probe the interested reader can refer to [1].
Focusing on larger-scale measurements, it is important to note that the large major-
ity of users are either inactive, i.e. not using their bandwidth, or active, meaning they
are actively using their connection. This active-inactive behavior has already been ob-
served in [14] and is conﬁrmed by our experimental results. Recalling that the network
bottleneck has been shown to be at the edge of the network [3], there are high chances
that active periods tend to bring the ADSL close to congestion. We can thus design the
avail-bw estimation algorithm exploiting this a priori information. In particular, with
an active-inactive pattern, the measurements should be more ﬁne-grained on extreme
avail-bw values (closer to 0 and 100%) while can be less precise on “middle” values.
In FAB-Probe we thus limit the exploration of the avail-bw range by testing only few
key values, distributed in the following way: 10%, 25%, 50%, 75% and 90% and the
avail-bw will be captured in between two of these values (and 0 and 100% but these
values are obviously not probed). This guarantees that the number of probing itera-
tions is always less than 5 (see details below), achieving a considerable speedup of the
measurement process while limiting the probing to signiﬁcant values of the avail-bw
range. Clearly, the precision can be increased (or reduced) by changing the number of
predeﬁned values and also the distribution of the values itself can be changed to better
ﬁt the avail-bw distribution – if this is available. Finally, note that the absolute avail-
bw can still be obtained from the relative values of FAB-Probe because the capacity is
known.
Fast Available Bandwidth Sampling
71
3.2 Measurement Algorithm and Speedup
In FAB-Probe we ﬁrst measure the downlink capacity C with the techniques in [1].
Then, we explore the avail-bw range with a binary search-like algorithm, modifying
the one in ABwProbe: the path is probed with a ﬂeet of packets at an initial rate R =
75%× C and the RTT of the packets is analyzed to detect if there is an increasing trend.
An increasing trend would indicate self-induced congestion on the path, thus meaning
that R > A. The rate is then reduced (increased) if an increasing trend (no trend) in the
RTTs is detected. Consequently, R is updated to a lower (higher) value, i.e. 50 or 90%,
and another ﬂeet is sent. The process is iterated until the avail-bw is captured between
two probed values, where one has shown an increasing trend, the other one no trend.
For example, if A = 60% × C, the ﬁrst ﬂeet at 75% would have an increasing trend,
while the second ﬂeet at 50% would show no trend. Since there are no other measuring
values in between 50 and 75%, the algorithm stops and FAB-Probe would output an
avail-bw range of 50-75%. The main difference with previous algorithms here, is that
instead of changing R in a pure binary search fashion, in FAB-Probe the probing rate
R assumes few deterministic values, signiﬁcantly reducing the running time.
To further speedup the measurement time, we have worked also on the number of
ﬂeets to send. In Pathload, to detect if there is an increasing trend or not, 12 independent
ﬂeets are sent at the same rate R. Then, the trend is computed on all these ﬂeets and
the decision if R > A or not is taken based on the fraction of ﬂeets agreeing. This
process is repeated for all probing rates regardless of the trend intensity. In [2] we
already proposed a strategy to accelerate the decision process, reducing on-the-ﬂy the
number of ﬂeets when the trends are particularly pronounced, thus adapting the number
of ﬂeets to the difference between R and A. In FAB-Probe we push the idea to the limit
as we simply do not investigate bandwidth rates that are too close to the avail-bw. The
decision is taken based on the result of one ﬂeet only: if the trend is clearly noticeable,
the measurement is valid and the rate R is reduced (increased) right away. Otherwise,
if the trend is not pronounced, this means that the avail-bw is close to the rate R, the
ﬂeet is marked as “grey”, and two other ﬂeets are sent at higher and lower rate just as a
counter check. The rationale behind this is the following: suppose the avail-bw is close
to 70% of the capacity. If the probing rate R is at 75% of the capacity, there will be
a very weak increasing trend in the RTT samples. In a situation like this, ABwProbe
would send more and more ﬂeets (up to 12) to have good conﬁdence before declaring
that R > A, getting “stuck” on this rate value. In FAB-Probe instead, we immediately
probe the link at 50% and 90% (the values just above and below 75%) and, if the avail-
bw is conﬁrmed to be in between, the range given in output would be 50-90% – instead
of 50-75%. This way we obtain an acceptable result with very few ﬂeets (only 3 in the
example), trading off precision for running time, and obtaining a great speedup.
3.3 Uplink Congestion and Cross-Trafﬁc
Suppose an increasing trend in the RTTs is detected while measuring the downlink
avail-bw. Since the estimation is done in a non-cooperative environment, we must verify
that the observed increase in RTT is due to the self-induced congestion on the downlink
and not to compression of the RSTs on the reverse path. The uplink of the ADSL, in
particular, is critical because of the very low bandwidth that can be easily saturated.
72
D. Croce et al.
For this reason, after the ﬁrst increasing ﬂeet is detected, we make this simple test to
check the conditions of the uplink: we send a second ﬂeet in which the probes have
the same spacing between each other but the size is at minimum (40 Bytes). This ﬂeet
reproduces on the reverse path a sequence of RSTs with the same rate of the ﬂeet
before (same size, same gap), however, on the downlink the rate is at least 16 times
lower (more if ATM is not adopted, see [2]). Now, if this ﬂeet still shows an increasing
trend either (i) the downlink is completely congested, or (ii) the uplink is loaded and
the RSTs on the reverse path are compressed. In both cases, however, estimating the
avail-bw precisely in these critical conditions becomes problematic (also in terms of
measuring time because the rates are extremely low) therefore we classify the ADSL as
“congested” without investigating further.
In FAB-Probe we also reﬁne the ﬁltering methods presented in [2]. Indeed, uplink