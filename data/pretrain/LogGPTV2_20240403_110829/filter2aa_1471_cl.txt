R
I
T
Y
A bin is the size of the new cell rounded up to the next block or page
boundary, whichever is higher. The system considers any space between the
end of the cell and the end of the bin to be free space that it can allocate to
other cells. Bins also have headers that contain a signature, hbin, and a field
that records the offset into the hive file of the bin and the bin’s size.
By using bins instead of cells, to track active parts of the registry,
Windows minimizes some management chores. For example, the system
usually allocates and deallocates bins less frequently than it does cells, which
lets the configuration manager manage memory more efficiently. When the
configuration manager reads a registry hive into memory, it reads the whole
hive, including empty bins, but it can choose to discard them later. When the
system adds and deletes cells in a hive, the hive can contain empty bins
interspersed with active bins. This situation is similar to disk fragmentation,
which occurs when the system creates and deletes files on the disk. When a
bin becomes empty, the configuration manager joins to the empty bin any
adjacent empty bins to form as large a contiguous empty bin as possible. The
configuration manager also joins adjacent deleted cells to form larger free
cells. (The configuration manager shrinks a hive only when bins at the end of
the hive become free. You can compact the registry by backing it up and
restoring it using the Windows RegSaveKey and RegReplaceKey functions,
which are used by the Windows Backup utility. Furthermore, the system
compacts the bins at hive initialization time using the Reorganization
algorithm, as described later.)
The links that create the structure of a hive are called cell indexes. A cell
index is the offset of a cell into the hive file minus the size of the base block.
Thus, a cell index is like a pointer from one cell to another cell that the
configuration manager interprets relative to the start of a hive. For example,
as you saw in Table 10-6, a cell that describes a key contains a field
specifying the cell index of its parent key; a cell index for a subkey specifies
the cell that describes the subkeys that are subordinate to the specified
subkey. A subkey-list cell contains a list of cell indexes that refer to the
subkey’s key cells. Therefore, if you want to locate, for example, the key cell
of subkey A whose parent is key B, you must first locate the cell containing
key B’s subkey list using the subkey-list cell index in key B’s cell. Then you
locate each of key B’s subkey cells by using the list of cell indexes in the
subkey-list cell. For each subkey cell, you check to see whether the subkey’s
name, which a key cell stores, matches the one you want to locate—in this
case, subkey A.
The distinction between cells, bins, and blocks can be confusing, so let’s
look at an example of a simple registry hive layout to help clarify the
differences. The sample registry hive file in Figure 10-3 contains a base
block and two bins. The first bin is empty, and the second bin contains
several cells. Logically, the hive has only two keys: the root key Root and a
subkey of Root, Sub Key. Root has two values, Val 1 and Val 2. A subkey-
list cell locates the root key’s subkey, and a value-list cell locates the root
key’s values. The free spaces in the second bin are empty cells. Figure 10-3
doesn’t show the security cells for the two keys, which would be present in a
hive.
Figure 10-3 Internal structure of a registry hive.
To optimize searches for both values and subkeys, the configuration
manager sorts subkey-list cells alphabetically. The configuration manager
can then perform a binary search when it looks for a subkey within a list of
subkeys. The configuration manager examines the subkey in the middle of
the list, and if the name of the subkey the configuration manager is looking
for alphabetically precedes the name of the middle subkey, the configuration
manager knows that the subkey is in the first half of the subkey list;
otherwise, the subkey is in the second half of the subkey list. This splitting
process continues until the configuration manager locates the subkey or finds
no match. Value-list cells aren’t sorted, however, so new values are always
added to the end of the list.
Cell maps
If hives never grew, the configuration manager could perform all its registry
management on the in-memory version of a hive as if the hive were a file.
Given a cell index, the configuration manager could calculate the location in
memory of a cell simply by adding the cell index, which is a hive file offset,
to the base of the in-memory hive image. Early in the system boot, this
process is exactly what Winload does with the SYSTEM hive: Winload reads
the entire SYSTEM hive into memory as a read-only hive and adds the cell
indexes to the base of the in-memory hive image to locate cells.
Unfortunately, hives grow as they take on new keys and values, which means
the system must allocate new reserved views and extend the hive file to store
the new bins that contain added keys and values. The reserved views that
keep the registry data in memory aren’t necessarily contiguous.
To deal with noncontiguous memory addresses referencing hive data in
memory, the configuration manager adopts a strategy similar to what the
Windows memory manager uses to map virtual memory addresses to
physical memory addresses. While a cell index is only an offset in the hive
file, the configuration manager employs a two-level scheme, which Figure
10-4 illustrates, when it represents the hive using the mapped views in the
registry process. The scheme takes as input a cell index (that is, a hive file
offset) and returns as output both the address in memory of the block the cell
index resides in and the address in memory of the block the cell resides in.
Remember that a bin can contain one or more blocks and that hives grow in
bins, so Windows always represents a bin with a contiguous region of
memory. Therefore, all blocks within a bin occur within the same 2-MB
hive’s mapped view.
Figure 10-4 Structure of a cell index.
To implement the mapping, the configuration manager divides a cell index
logically into fields, in the same way that the memory manager divides a
virtual address into fields. Windows interprets a cell index’s first field as an
index into a hive’s cell map directory. The cell map directory contains 1024
entries, each of which refers to a cell map table that contains 512 map entries.
An entry in this cell map table is specified by the second field in the cell
index. That entry locates the bin and block memory addresses of the cell.
In the final step of the translation process, the configuration manager
interprets the last field of the cell index as an offset into the identified block
to precisely locate a cell in memory. When a hive initializes, the
configuration manager dynamically creates the mapping tables, designating a
map entry for each block in the hive, and it adds and deletes tables from the
cell directory as the changing size of the hive requires.
Hive reorganization
As for real file systems, registry hives suffer fragmentation problems: when
cells in the bin are freed and it is not possible to coalescence them in a
contiguous manner, fragmented little chunks of free space are created into
various bins. If there is not enough available contiguous space for new cells,
new bins are appended at the end of the hive file, while the fragmented ones
will be rarely repurposed. To overcome this problem, starting from Windows
8.1, every time the configuration manager mounts a hive file, it checks
whether a hive’s reorganization needs to be performed. The configuration
manager records the time of the last reorganization in the hive’s basic block.
If the hive has valid log files, is not volatile, and if the time passed after the
previous reorganization is greater than seven days, the reorganization
operation is started. The reorganization is an operation that has two main
goals: shrink the hive file and optimize it. It starts by creating a new empty
hive that is identical to the original one but does not contains any cells in it.
The created clone is used to copy the root key of the original hive, with all its
values (but no subkeys). A complex algorithm analyzes all the child keys:
indeed, during its normal activity, the configuration manager records whether
a particular key is accessed, and, if so, stores an index representing the
current runtime phase of the operating system (Boot or normal) in its key
cell.
The reorganization algorithm first copies the keys accessed during the
normal execution of the OS, then the ones accessed during the boot phase,
and finally the keys that have not been accessed at all (since the last
reorganization). This operation groups all the different keys in contiguous
bins of the hive file. The copy operation, by definition, produces a
nonfragmented hive file (each cell is stored sequentially in the bin, and new
bin are always appended at the end of the file). Furthermore, the new hive
has the characteristic to contain hot and cold classes of keys stored in big
contiguous chunks. This result renders the boot and runtime phase of the
operating system much quicker when reading data from the registry.
The reorganization algorithm resets the access state of all the new copied
cells. In this way, the system can track the hive’s keys usage by restarting
from a neutral state. The new usage statistics will be consumed by the next
reorganization, which will start after seven days. The configuration manager
stores the results of a reorganization cycle in the
HKLM\SYSTEM\CurrentControlSet\Control\Session
Manager\Configuration Manager\Defrag registry key, as shown in Figure 10-
5. In the sample screenshot, the last reorganization was run on April 10, 2019
and saved 10 MB of fragmented hive space.
Figure 10-5 Registry reorganization data.
The registry namespace and operation
The configuration manager defines a key object type to integrate the
registry’s namespace with the kernel’s general namespace. The configuration
manager inserts a key object named Registry into the root of the Windows
namespace, which serves as the entry point to the registry. Regedit shows key
names in the form
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet, but the Windows
subsystem translates such names into their object namespace form (for
example, \Registry\Machine\System\CurrentControlSet). When the Windows
object manager parses this name, it encounters the key object by the name of
Registry first and hands the rest of the name to the configuration manager.
The configuration manager takes over the name parsing, looking through its
internal hive tree to find the desired key or value. Before we describe the
flow of control for a typical registry operation, we need to discuss key objects
and key control blocks. Whenever an application opens or creates a registry
key, the object manager gives a handle with which to reference the key to the
application. The handle corresponds to a key object that the configuration
manager allocates with the help of the object manager. By using the object
manager’s object support, the configuration manager takes advantage of the
security and reference-counting functionality that the object manager
provides.
For each open registry key, the configuration manager also allocates a key
control block. A key control block stores the name of the key, includes the
cell index of the key node that the control block refers to, and contains a flag
that notes whether the configuration manager needs to delete the key cell that
the key control block refers to when the last handle for the key closes.
Windows places all key control blocks into a hash table to enable quick
searches for existing key control blocks by name. A key object points to its
corresponding key control block, so if two applications open the same
registry key, each receives a key object, and both key objects point to a
common key control block.
When an application opens an existing registry key, the flow of control
starts with the application specifying the name of the key in a registry API
that invokes the object manager’s name-parsing routine. The object manager,
upon encountering the configuration manager’s registry key object in the
namespace, hands the path name to the configuration manager. The
configuration manager performs a lookup on the key control block hash
table. If the related key control block is found there, there’s no need for any
further work (no registry process attach is needed); otherwise, the lookup
provides the configuration manager with the closest key control block to the
searched key, and the lookup continues by attaching to the registry process
and using the in-memory hive data structures to search through keys and
subkeys to find the specified key. If the configuration manager finds the key
cell, the configuration manager searches the key control block tree to
determine whether the key is open (by the same application or another one).
The search routine is optimized to always start from the closest ancestor with
a key control block already opened. For example, if an application opens
\Registry\Machine\Key1\Subkey2, and \Registry\Machine is already open,
the parse routine uses the key control block of \Registry\Machine as a
starting point. If the key is open, the configuration manager increments the
existing key control block’s reference count. If the key isn’t open, the
configuration manager allocates a new key control block and inserts it into
the tree. Then the configuration manager allocates a key object, points the
key object at the key control block, detaches from the Registry process, and
returns control to the object manager, which returns a handle to the
application.
When an application creates a new registry key, the configuration manager
first finds the key cell for the new key’s parent. The configuration manager
then searches the list of free cells for the hive in which the new key will
reside to determine whether cells exist that are large enough to hold the new
key cell. If there aren’t any free cells large enough, the configuration
manager allocates a new bin and uses it for the cell, placing any space at the
end of the bin on the free cell list. The new key cell fills with pertinent
information—including the key’s name—and the configuration manager
adds the key cell to the subkey list of the parent key’s subkey-list cell.
Finally, the system stores the cell index of the parent cell in the new subkey’s
key cell.
The configuration manager uses a key control block’s reference count to
determine when to delete the key control block. When all the handles that
refer to a key in a key control block close, the reference count becomes 0,
which denotes that the key control block is no longer necessary. If an
application that calls an API to delete the key sets the delete flag, the
configuration manager can delete the associated key from the key’s hive
because it knows that no application is keeping the key open.
EXPERIMENT: Viewing key control blocks
You can use the kernel debugger to list all the key control blocks
allocated on a system with the !reg openkeys command.
Alternatively, if you want to view the key control block for a
particular open key, use !reg querykey:
Click here to view code image
0: kd> !reg querykey \Registry\machine\software\microsoft
Found KCB = ffffae08c156ae60 :: 
\REGISTRY\MACHINE\SOFTWARE\MICROSOFT
Hive         ffffae08c03b0000
KeyNode      00000225e8c3475c
[SubKeyAddr]         [SubKeyName]
225e8d23e64          .NETFramework
225e8d24074          AccountsControl
225e8d240d4          Active Setup
225ec530f54          ActiveSync
225e8d241d4          Ads
225e8d2422c          Advanced INF Setup
225e8d24294          ALG
225e8d242ec          AllUserInstallAgent
225e8d24354          AMSI
225e8d243f4          Analog
225e8d2448c          AppServiceProtocols
225ec661f4c          AppV
225e8d2451c          Assistance
225e8d2458c          AuthHost
...
You can then examine a reported key control block with the !reg
kcb command:
Click here to view code image
kd> !reg kcb ffffae08c156ae60
Key              : \REGISTRY\MACHINE\SOFTWARE\MICROSOFT
RefCount         : 1f
Flags            : CompressedName, Stable
ExtFlags         :
Parent           : 0xe1997368
KeyHive          : 0xe1c8a768
KeyCell          : 0x64e598 [cell index]
TotalLevels      : 4
DelayedCloseIndex: 2048
MaxNameLen       : 0x3c
MaxValueNameLen  : 0x0
MaxValueDataLen  : 0x0
LastWriteTime    : 0x1c42501:0x7eb6d470
KeyBodyListHead  : 0xe1034d70 0xe1034d70
SubKeyCount      : 137
ValueCache.Count : 0
KCBLock          : 0xe1034d40
KeyLock          : 0xe1034d40
The Flags field indicates that the name is stored in compressed
form, and the SubKeyCount field shows that the key has 137
subkeys.
Stable storage
To make sure that a nonvolatile registry hive (one with an on-disk file) is
always in a recoverable state, the configuration manager uses log hives. Each
nonvolatile hive has an associated log hive, which is a hidden file with the
same base name as the hive and a logN extension. To ensure forward
progress, the configuration manager uses a dual-logging scheme. There are
potentially two log files: .log1 and .log2. If, for any reason, .log1 was written
but a failure occurred while writing dirty data to the primary log file, the next
time a flush happens, a switch to .log2 occurs with the cumulative dirty data.
If that fails as well, the cumulative dirty data (the data in .log1 and the data
that was dirtied in between) is saved in .log2. As a consequence, .log1 will be
used again next time around, until a successful write operation is done to the
primary log file. If no failure occurs, only .log1 is used.
For example, if you look in your %SystemRoot%\System32\Config
directory (and you have the Show Hidden Files And Folders folder option
selected and Hide Protected Operating System Files unselected; otherwise,
you won’t see any file), you’ll see System.log1, Sam.log1, and other .log1
and .log2 files. When a hive initializes, the configuration manager allocates a
bit array in which each bit represents a 512-byte portion, or sector, of the
hive. This array is called the dirty sector array because a bit set in the array
means that the system has modified the corresponding sector in the hive in
memory and must write the sector back to the hive file. (A bit not set means
that the corresponding sector is up to date with the in-memory hive’s
contents.)
When the creation of a new key or value or the modification of an existing
key or value takes place, the configuration manager notes the sectors of the
primary hive that change and writes them in the hive’s dirty sectors array in
memory. Then the configuration manager schedules a lazy flush operation, or
a log sync. The hive lazy writer system thread wakes up one minute after the
request to synchronize the hive’s log. It generates new log entries from the
in-memory hive sectors referenced by valid bits of the dirty sectors array and
writes them to the hive log files on disk. At the same time, the system flushes
all the registry modifications that take place between the time a hive sync is
requested and the time the hive sync occurs. The lazy writer uses low priority
I/Os and writes dirty sectors to the log file on disk (and not to the primary
hive). When a hive sync takes place, the next hive sync occurs no sooner than
one minute later.
If the lazy writer simply wrote all a hive’s dirty sectors to the hive file and
the system crashed in mid-operation, the hive file would be in an inconsistent
(corrupted) and unrecoverable state. To prevent such an occurrence, the lazy
writer first dumps the hive’s dirty sector array and all the dirty sectors to the
hive’s log file, increasing the log file’s size if necessary. A hive’s basic block
contains two sequence numbers. After the first flush operation (and not in the
subsequent flushes), the configuration manager updates one of the sequence
number, which become bigger than the second one. Thus, if the system
crashes during the write operations to the hive, at the next reboot the
configuration manager notices that the two sequence numbers in the hive’s
base block don’t match. The configuration manager can update the hive with
the dirty sectors in the hive’s log file to roll the hive forward. The hive is
then up to date and consistent.
After writing log entries in the hive’s log, the lazy flusher clears the
corresponding valid bits in the dirty sector array but inserts those bits in
another important vector: the unreconciled array. The latter is used by the
configuration manager to understand which log entries to write in the
primary hive. Thanks to the new incremental logging support (discussed
later), the primary hive file is rarely written during the runtime execution of
the operating system. The hive’s sync protocol (not to be confused by the log
sync) is the algorithm used to write all the in-memory and in-log registry’s
modifications to the primary hive file and to set the two sequence numbers in
the hive. It is indeed an expensive multistage operation that is described later.
The Reconciler, which is another type of lazy writer system thread, wakes
up once every hour, freezes up the log, and writes all the dirty log entries in
the primary hive file. The reconciliation algorithm knows which parts of the
in-memory hive to write to the primary file thanks to both the dirty sectors
and unreconciled array. Reconciliation happens rarely, though. If a system
crashes, the configuration manager has all the information needed to
reconstruct a hive, thanks to the log entries that have been already written in
the log files. Performing registry reconciliation only once per hour (or when
the size of the log is behind a threshold, which depends on the size of the
volume in which the hive reside) is a big performance improvement. The
only possible time window in which some data loss could happen in the hive
is between log flushes.
Note that the Reconciliation still does not update the second sequence
number in the main hive file. The two sequence numbers will be updated
with an equal value only in the “validation” phase (another form of hive
flushing), which happens only at the hive’s unload time (when an application
calls the RegUnloadKey API), when the system shuts down, or when the hive
is first loaded. This means that in most of the lifetime of the operating
system, the main registry hive is in a dirty state and needs its log file to be
correctly read.
The Windows Boot Loader also contains some code related to registry
reliability. For example, it can parse the System.log file before the kernel is
loaded and do repairs to fix consistency. Additionally, in certain cases of hive
corruption (such as if a base block, bin, or cell contains data that fails
consistency checks), the configuration manager can reinitialize corrupted
data structures, possibly deleting subkeys in the process, and continue normal
operation. If it must resort to a self-healing operation, it pops up a system
error dialog box notifying the user.
Incremental logging
As mentioned in the previous section, Windows 8.1 introduced a big
improvement on the performance of the hive sync algorithm thanks to