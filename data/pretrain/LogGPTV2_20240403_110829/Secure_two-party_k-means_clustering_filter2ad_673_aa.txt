title:Secure two-party k-means clustering
author:Paul Bunn and
Rafail Ostrovsky
Secure Two-Party k-Means Clustering
Paul Bunn∗
Department of Mathematics
University of California
Los Angeles, CA
PI:EMAIL
Rafail Ostrovsky†
Computer Science Department and
Department of Mathematics
University of California
PI:EMAIL
Los Angeles, CA
ABSTRACT
The k-Means Clustering problem is one of the most-explored
problems in data mining to date. With the advent of proto-
cols that have proven to be successful in performing single
database clustering, the focus has shifted in recent years to
the question of how to extend the single database protocols
to a multiple database setting. To date there have been nu-
merous attempts to create speciﬁc multiparty k-means clus-
tering protocols that protect the privacy of each database,
but according to the standard cryptographic deﬁnitions of
“privacy-protection,” so far all such attempts have fallen
short of providing adequate privacy.
In this paper we describe a Two-Party k-Means Clustering
Protocol that guarantees privacy, and is more eﬃcient than
utilizing a general multiparty “compiler” to achieve the same
task. In particular, a main contribution of our result is a way
to compute eﬃciently multiple iterations of k-means cluster-
ing without revealing the intermediate values. To achieve
this, we show two techniques: to perform two-party division
and to sample uniformly at random from an unknown do-
main size; the resulting Division Protocol and Random Value
Protocol are of use to any protocol that requires the secure
computation of a quotient or random sampling.
Our techniques can be realized based on the existence of
any semantically secure homomorphic encryption scheme.
For concreteness, we describe our protocol based on Paillier
Homomorphic Encryption scheme (see [21]). We will also
demonstrate that our protocol is eﬃcient in terms of com-
munication, remaining competitive with existing protocols
(such as [13]) that fail to protect privacy.
∗Research partially done while visiting IPAM, and sup-
ported in part by NSF VIGRE grant DMS-0502315 and NSF
Cybertrust grant no. 0430254.
†Research partially done while visiting IPAM, and sup-
ported in part by IBM Faculty Award, Xerox Innovation
Group Award, NSF Cybertrust grant no. 0430254, and U.C.
MICRO grant.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’07, October 29–November 2, 2007, Alexandria, Virginia, USA.
Copyright 2007 ACM 978-1-59593-703-2/07/0010 ...$5.00.
Categories and Subject Descriptors: E.3:Data Encryp-
tion, F.2:Analysis of Algorithms and Problem Complexity.
General Terms: Security, Theory, Algorithms.
Keywords: Secure Multiparty Computation, k-Means Clus-
tering.
INTRODUCTION
1.
1.1 Background on k-Means Clustering
The k-means clustering problem can be described as fol-
lows: A database D holds information about n diﬀerent
objects, each object having d attributes. The information
regarding each object is viewed as a coordinate in Rd, and
hence the objects are interpreted as data points living in d-
dimensional Euclidean space. Informally, k-means clustering
algorithms are comprised of two steps. First, k initial cen-
ters are chosen in some manner, either at random or using
some other “seeding” procedure. The second step is iterative
(known as the “Lloyd Step”), and is described according to
the following algorithm: Partition the n data points into k
clusters based on which current cluster center they are clos-
est to. Then reset the new cluster centers to be the center
of mass (in Euclidean space) of each cluster. This process is
either iterated a ﬁxed number of times or until the new clus-
ter centers are suﬃciently close to the previous ones (based
on a pre-determined measure of “suﬃciently close”). The k-
means clustering method is enormously popular among prac-
titioners as an eﬀective way to ﬁnd a geometric partitioning
of data points into k clusters, from which general trends or
tendencies can be observed. In particular, k-means cluster-
ing is widely used in information retrieval, machine learning,
and data mining research (see e.g. [19] for further discussion
about the enormous popularity of k-means clustering).
The question of ﬁnding eﬃcient algorithms for solving the
k-means clustering problem has been greatly explored and
is not investigated in this paper. Rather, we wish to extend
an existing algorithm (which solves the k-means problem
for a single database without any concern for privacy) to
an algorithm that works in the two-database setting (in ac-
cordance with multiparty computation literature, we refer
to the databases as “parties”). In particular, if two parties
each hold partial data describing the d attributes of n ob-
jects, then we would like to apply this k-means algorithm
to the aggregate data (which lives in some virtual database)
in a way that protects the privacy of each party member’s
data. In this paper, we will work in the most general setting,
where we assume the data is arbitrarily partitioned between
486the two databases. This means that there is no assumption
on how the attributes of the data are distributed among the
parties (and in particular, this subsumes the cases of verti-
cally and horizontally partitioned data).
1.2 Previous Work
The k-means clustering problem is one of the functions
most studied in the more general class of data-mining prob-
lems. Data-mining problems have received much attention
in recent years. Due to the sheer volume of inputs that are
often involved in data-mining problems, generic multiparty
computation (MPC) protocols become infeasible in terms
of communication cost. This has led to constructions of
function-speciﬁc multiparty protocols that attempt to han-
dle a speciﬁc functionality in an eﬃcient manner, while still
providing privacy to the parties (see e.g. [16], [1], [2]).
The problem of extending single database k-means clus-
tering protocols to the multiparty setting has been explored
by numerous authors, whose approaches have varied widely.
The main challenge in designing such a protocol is to pre-
vent intermediate values from being leaked during the Lloyd
Step.
In particular, each iteration of the Lloyd Step re-
quires k new cluster centers to be found, a process that
requires division (the new cluster centers are calculated us-
ing a weighted average, which in turn requires dividing by
the number of data points in a given cluster). However, the
divisors should remain unknown to the parties, as leaking
intermediate cluster sizes may reveal excessive information.
Additionally, many current protocols for solving the single
database k-means clustering problem improve eﬃciency by
choosing data points according to a weighted distribution,
which will then serve as preliminary “guesses” to the cluster
center (e.g. [19], [4]). Choosing data points in this manner
will also likely involve division.
A subtle issue that may not be obvious at ﬁrst glance is
how to perform these divisions in light of current crypto-
graphic tools.
In particular, most encryption schemes de-
scribe a message space that is a ﬁnite group (or ﬁeld or
ring). This means that an algorithm that attempts to solve
the multiparty k-means problem in the cryptographic set-
ting (as opposed to the information-theoretic setting) will
view the data points not as elements of Euclidean Space Rd,
but rather as elements in Gd (for some ring G) in order to
share encryptions of these data points with the other party
members. But this then complicates the notion of “division,”
which we wish to mean “division in R” as opposed to “mul-
tiplication by the inverse.” (The latter interpretation not
only fails to perform the desired task of ﬁnding an average,
but additionally may not even exist if not all elements in the
ring G have a multiplicative inverse).
Previous authors attempting to solve the multiparty k-
means problem have incorporated various ideas to combat
this obstacle. The “data perturbation” technique (e.g.
[1],
[2], [17]) avoids the issue altogether by addressing the multi-
party k-means problem from an information-theoretic stand-
point. These algorithms attempt to protect party members’
privacy by having each member ﬁrst “perturb” their data
(in some regulated manner), and then the perturbed data
is made public to all members. Thus, the division (and all
other computations) can be performed locally by each party
member (on the perturbed data), and the division problem
is completely avoided. Unfortunately, all current algorithms
utilizing this method do not protect the privacy of the party
members in the cryptographic deﬁnition of privacy protec-
tion. Indeed, these protocols provide some privacy guaran-
tee in terms of hiding the exact values of the database en-
tries, but do not make the more general guarantee that (with
overwhelming probability) no information can be obtained
about any party’s inputs (other than what follows from the
output of the function, i.e. the ﬁnal cluster centers).
Another solution to the division problem (see e.g.
[24])
is to have each party member perform the division locally
on their own data. The problem with this method is that
it requires each party to know all intermediate cluster as-
signments (in order to know what they should divide by).
The same problem is encountered in [23], which also requires
each party to know intermediate cluster assignments. The
extra information obtained by the parties in these two pa-
pers would not be available to the parties in the ideal model,
and thus these solutions fail to provide complete privacy
protection (see Section 2.3 for a formal deﬁnition of privacy
protection). A similar problem is encountered in [14], where
they describe a way to privately perform division, but their
protocol relies on the fact that both parties will learn the
output value of the division (which is again more informa-
tion than is revealed in the ideal model). Another approach,
suggested by Jagannathan and Wright [13] is to interpret di-
vision as multiplication by the inverse. However, a simple
example shows that this method does not satisfy correct-
ness, i.e. does not correctly implement a k-means algorithm.
(Consider e.g. dividing 11 by 5 in Z21. One would expect
to round this to 2, but 11*5−1 = 11*17 = 19).
One ﬁnal approach encountered in the literature (see e.g.
[3], [6], [7], [8]) protects against leaking information about
speciﬁc data in a diﬀerent context. In this setting, the data
is not distributed among many parties, but rather exists in a
single database that is maintained by a trusted third party.
The goal now is to have clients send requests to this third
party for k-means clustering information on the data, and to
ensure that the response from the server does not reveal too
much information about the data. In the model we consider
in this paper, these techniques cannot be applied since there
is no central database or trusted third party.
To summarize, none of the existing “privacy-preserving”
k-means clustering protocols provide cryptographically- ac-
ceptable security against an “honest-but-curious” adversary.
We will present a formal notion of security in Section 2.3 (see
e.g. [10]). Informally, the security of a multiparty protocol
is deﬁned by comparing the real-life interaction between the
parties to an “ideal” scenario where a trusted third party ex-
ists. In this ideal setting, the trusted third party receives the
private inputs from each of the parties, runs a k-means clus-
tering algorithm on the aggregate data, and returns as out-
put the ﬁnal cluster centers to each party. (Note: depending
on a pre-determined arrangement between the parties, the
third party may also give each party the additional informa-
tion of which cluster each data point belongs to.) The goal
of multiparty computation is to achieve in the “real” world
(where no trusted third party is assumed to exist) the same
level of data privacy protection that can be obtained in the
“ideal” model.
One ﬁnal obstacle in designing a perfectly secure k-means
clustering protocol comes from the iterative nature of the
Lloyd Step.
In the ideal model, the individual parties do
not learn any information regarding the number of itera-
tions that were necessary to reach the stopping condition.
In the body of this paper, our main protocol will reveal this
information to the parties (it is our belief that in practice,
this privacy breach is unlikely to reveal meaningful informa-
tion about the other party’s database). However, we discuss
more fully in Appendix A alternative methods of controlling
the number of iterations without revealing this extra infor-
mation.
1.3 Our Results
We describe in Section 4 of this paper the ﬁrst protocol
for two-party k-means clustering that is secure against an
honest-but-curious adversary (as mentioned above, general
MPC protocols could in theory be applied to k-means, but
any such protocol is unfeasible to use in practice; see Sec-
tion 4.4 for a comparison). Moreover, we demonstrate that
our protocol is competitive (in terms of communication and
computation costs) with other current protocols (which fail
to protect privacy against an honest-but-curious adversary).
Let k denote the number of clusters, K is the security pa-
rameter, n is the number of data points, d is the number of
attributes of each data point, and O(ξs) is the communica-
tion cost of (securely) ﬁnding the minimum of two numbers.
The exact eﬃciency bounds that we achieve are as follows:
Communication Complexity Result. Our two-party se-
cure k-means clustering protocol has a one-time communi-
cation cost of O(ndK), followed by O(nkξs) ≤ O(nkK 2) for
each iteration of the Lloyd Step.
A complete discussion on the bounds achieved above can
be found in Section 4.4. We remark that our honest-but-
curious solution can be augmented using standard machin-
ery (e.g., see [10, 12] and references therein) to the malicious
adversary model.
Our protocol takes as a template the single-database pro-
tocol of Ostrovsky et al. [19], and extends it to the two-party
setting. We chose the particular protocol of [19] because it
has two advantages over conventional single-database pro-
tocols: First, it provides a provable guarantee as to the cor-
rectness of its output (assuming moderate conditions on the
data); and second, because their protocol reduces the num-
ber of iterations necessary in the Lloyd Step. However, the
techniques we use to extend the single-database protocol of
[19] can be readily applied to any single-database protocol.
Furthermore, although our results focus on the two-party
case, the techniques we use can be easily extended to the
multi-party case.
In order to extend the single database protocol of [19] to
a two-party protocol, we follow the setup and some of the
ideas discussed by Jagannathan and Wright in [13]. In that
paper, the authors attempt to perform secure two-party k-
means clustering, but (as they remark) fall short of perfect
privacy due to leakage of information (including the number
of data points in each cluster) that arises from an insecure
division algorithm.
To solve the multiparty division problem, we deﬁne divi-
sion in the ring ZN in a natural way, namely as the quotient
Q from the Division Algorithm in the integers: P = QD+R.
From this deﬁnition, we demonstrate how two parties can
perform multiparty division in a secure manner. Addition-
ally, we describe how two parties can select initial data
points according to a weighted distribution. To accomplish
this, we introduce a new protocol, the Random Value Pro-
tocol, which is described in Section 3.3. We note that the
Random Value Protocol may be of independent interest as a
subprotocol for other protocols that require random, oblivi-
ous sampling.
Our results utilize many existing tools and subprotocols
developed in the multiparty computation literature. As such,
the security guarantee of our result relies on cryptographic
assumptions concerning the diﬃculty of inverting certain
functions.
In particular, we will assume the existence of
a semantically secure homomorphic encryption scheme, and
for ease of discussion, we use the homomorphic encryption
scheme of Paillier [21].
1.4 Overview
In the next section, we brieﬂy introduce the cryptographic
tools and methods of proving privacy that we will need to
guarantee security in the malicious adversary model. We
also include in Section 2.2 a complete list of the subprotocols
that will be used in this paper. Because most of the subpro-
tocols that we use are general and have been described in
previous MPC papers, we provide in Section 2.2 only a list
of these protocols (possible implementations are included in
Appendix B for completeness). An exception to this is our
new Random Value Protocol, for which we provide full de-
tails and proof of security in Section 3.3, and a description of
a two-party Division Protocol in Section 3.1. Finally, in Sec-
tion 4, we introduce the single database k-means clustering
protocol of [19] which we then extend to a secure two-party
protocol in Section 4.3.
2. ACHIEVING PRIVACY
In multiparty computation (MPC) literature, devious be-
havior is modeled by the existence of an adversary who can
corrupt one or more of the parties. In this paper, we will as-
sume that the adversary is honest-but-curious, which means
the adversary only learns the inputs/outputs of all of the cor-
rupted parties, but the corrupted parties must engage in the
protocol appropriately. We include in section 2.3 a formal