# 2020 N1CTF escape
作为一位菜鸟，发文章希望大佬们批评指正
## 0 环境搭建
    git reset --hard 07b0b1dcde4a99294b8028d83f4ea244885cc091
    git apply ../patch/patch.diff
    gclient sync
    ninja -C out.gn/x64.release d8
    8:43
同时在ubuntu18上安装对应的chrome
题目之后放在github上
## 1 背景知识
##### 一些补充
当我们想直接输出一个type信息时，会被逗号取代（除非有洞导致.....）
##### 关于fixed_array与fixed_double_array的不同
两者都是element部分
###### 对于fixed_array，其中每一个都会向obj一样解析
哪怕像这样插入一个浮点数
    spary[spary_size-1] = 1.1;
也会作为heapNumber对象，这样的话直接读取spary[idx]返回的是
    ,,,
因为这些idx位置都是 obj指针，如果返回就相当于泄露map值了
###### 对于fixed_double_array
其中的浮点数都是直接存储的
可以直接通过idx访问
所以得出结论，这两个东西的互相转化可以用于伪造addrof与fakeof原语
## 2 漏洞分析
###### patch 文件
    diff --git a/src/compiler/escape-analysis.cc b/src/compiler/escape-analysis.cc
    index 2a096b6933..3046d7b04e 100644
    --- a/src/compiler/escape-analysis.cc
    +++ b/src/compiler/escape-analysis.cc
    @@ -178,7 +178,7 @@ class EscapeAnalysisTracker : public ZoneObject {
             : VariableTracker::Scope(&tracker->variable_states_, node, reduction),
               tracker_(tracker),
               reducer_(reducer) {}
    -    const VirtualObject* GetVirtualObject(Node* node) {
    +    VirtualObject* GetVirtualObject(Node* node) {
           VirtualObject* vobject = tracker_->virtual_objects_.Get(node);
           if (vobject) vobject->AddDependency(current_node());
           return vobject;
    @@ -576,10 +576,14 @@ void ReduceNode(const Operator* op, EscapeAnalysisTracker::Scope* current,
         case IrOpcode::kStoreField: {
           Node* object = current->ValueInput(0);
           Node* value = current->ValueInput(1);
    -      const VirtualObject* vobject = current->GetVirtualObject(object);
    +      VirtualObject* vobject = current->GetVirtualObject(object);
           Variable var;
           if (vobject && !vobject->HasEscaped() &&
               vobject->FieldAt(OffsetOfFieldAccess(op)).To(&var)) {
    +        // Attach cached map info to the virtual object.
    +        if (OffsetOfFieldAccess(op) == HeapObject::kMapOffset) {
    +          vobject->SetMap(value);
    +        }
             current->Set(var, value);
             current->MarkForDeletion();
           } else {
    @@ -747,6 +751,17 @@ void ReduceNode(const Operator* op, EscapeAnalysisTracker::Scope* current,
               // yet.
               break;
             }
    +      } else if (vobject) {
    +        Node* cache_map = vobject->Map();
    +        if (cache_map) {
    +          Type const map_type = NodeProperties::GetType(cache_map);
    +          if (map_type.IsHeapConstant() &&
    +              params.maps().contains(
    +                  map_type.AsHeapConstant()->Ref().AsMap().object())) {
    +            current->MarkForDeletion();
    +            break;
    +          }
    +        }
           }
           current->SetEscaped(checked);
           break;
    @@ -804,6 +819,12 @@ void ReduceNode(const Operator* op, EscapeAnalysisTracker::Scope* current,
           for (int i = 0; i ValueInput(i);
             current->SetEscaped(input);
    +
    +        // Invalidate associated map cache for all value input nodes.
    +        VirtualObject* vobject = current->GetVirtualObject(input);
    +        if (vobject) {
    +          vobject->SetMap(nullptr);
    +        }
           }
           if (OperatorProperties::HasContextInput(op)) {
             current->SetEscaped(current->ContextInput());
    diff --git a/src/compiler/escape-analysis.h b/src/compiler/escape-analysis.h
    index 0fbc7d0bdd..ec56488388 100644
    --- a/src/compiler/escape-analysis.h
    +++ b/src/compiler/escape-analysis.h
    @@ -147,11 +147,14 @@ class VirtualObject : public Dependable {
       bool HasEscaped() const { return escaped_; }
       const_iterator begin() const { return fields_.begin(); }
       const_iterator end() const { return fields_.end(); }
    +  Node* Map() const { return map_; }
    +  void SetMap(Node* map) { map_ = map; }
      private:
       bool escaped_ = false;
       Id id_;
       ZoneVector fields_;
    +  Node* map_;
     };
     class EscapeAnalysisResult {
整体的patch有两方面组成，一个是.h文件，一个是.cc文件的一个函数
针对.h文件
    --- a/src/compiler/escape-analysis.h
    +++ b/src/compiler/escape-analysis.h
    @@ -147,11 +147,14 @@ class VirtualObject : public Dependable {
       bool HasEscaped() const { return escaped_; }
       const_iterator begin() const { return fields_.begin(); }
       const_iterator end() const { return fields_.end(); }
    +  Node* Map() const { return map_; }
    +  void SetMap(Node* map) { map_ = map; }
      private:
       bool escaped_ = false;
       Id id_;
       ZoneVector fields_;
    +  Node* map_;
     };
可以看到是VirtualObject加了一个map_对象 ， 同时增加了两个函数，这里我们就需要知道这个VirtualObject是什么
针对.cc文件
    diff --git a/src/compiler/escape-analysis.cc b/src/compiler/escape-analysis.cc
    index 2a096b6933..3046d7b04e 100644
    --- a/src/compiler/escape-analysis.cc
    +++ b/src/compiler/escape-analysis.cc
    @@ -178,7 +178,7 @@ class EscapeAnalysisTracker : public ZoneObject {
             : VariableTracker::Scope(&tracker->variable_states_, node, reduction),
               tracker_(tracker),
               reducer_(reducer) {}
    -    const VirtualObject* GetVirtualObject(Node* node) {
    +    VirtualObject* GetVirtualObject(Node* node) {
           VirtualObject* vobject = tracker_->virtual_objects_.Get(node);
           if (vobject) vobject->AddDependency(current_node());
           return vobject;
    @@ -576,10 +576,14 @@ void ReduceNode(const Operator* op, EscapeAnalysisTracker::Scope* current,
         case IrOpcode::kStoreField: {
           Node* object = current->ValueInput(0);
           Node* value = current->ValueInput(1);
    -      const VirtualObject* vobject = current->GetVirtualObject(object);
    +      VirtualObject* vobject = current->GetVirtualObject(object);
           Variable var;
           if (vobject && !vobject->HasEscaped() &&
               vobject->FieldAt(OffsetOfFieldAccess(op)).To(&var)) {
    +        // Attach cached map info to the virtual object.
    +        if (OffsetOfFieldAccess(op) == HeapObject::kMapOffset) {
    +          vobject->SetMap(value);
    +        }
             current->Set(var, value);
             current->MarkForDeletion();
           } else {
    @@ -747,6 +751,17 @@ void ReduceNode(const Operator* op, EscapeAnalysisTracker::Scope* current,
               // yet.
               break;
             }
    +      } else if (vobject) {
    +        Node* cache_map = vobject->Map();
    +        if (cache_map) {
    +          Type const map_type = NodeProperties::GetType(cache_map);
    +          if (map_type.IsHeapConstant() &&
    +              params.maps().contains(
    +                  map_type.AsHeapConstant()->Ref().AsMap().object())) {
    +            current->MarkForDeletion();
    +            break;
    +          }
    +        }
           }
           current->SetEscaped(checked);
           break;
    @@ -804,6 +819,12 @@ void ReduceNode(const Operator* op, EscapeAnalysisTracker::Scope* current,
           for (int i = 0; i ValueInput(i);
             current->SetEscaped(input);
    +
    +        // Invalidate associated map cache for all value input nodes.
    +        VirtualObject* vobject = current->GetVirtualObject(input);
    +        if (vobject) {
    +          vobject->SetMap(nullptr);
    +        }
           }
           if (OperatorProperties::HasContextInput(op)) {
             current->SetEscaped(current->ContextInput());
主要是针对刚才的map的一些操作，这里我们就需要看原函数是什么作用，如何触发这个位置等等
修改的具体函数如下（虽然有点长，但是还是贴了一下）
    void ReduceNode(const Operator* op, EscapeAnalysisTracker::Scope* current,
                    JSGraph* jsgraph) {
      switch (op->opcode()) {
        case IrOpcode::kAllocate: {
          NumberMatcher size(current->ValueInput(0));
          if (!size.HasValue()) break;
          int size_int = static_cast(size.Value());
          if (size_int != size.Value()) break;
          if (const VirtualObject* vobject = current->InitVirtualObject(size_int)) {
            // Initialize with dead nodes as a sentinel for uninitialized memory.
            for (Variable field : *vobject) {
              current->Set(field, jsgraph->Dead());
            }
          }
          break;
        }
        case IrOpcode::kFinishRegion:
          current->SetVirtualObject(current->ValueInput(0));
          break;
        case IrOpcode::kStoreField: {
          Node* object = current->ValueInput(0);
          Node* value = current->ValueInput(1);
          VirtualObject* vobject = current->GetVirtualObject(object);
          Variable var;
          if (vobject && !vobject->HasEscaped() &&
              vobject->FieldAt(OffsetOfFieldAccess(op)).To(&var)) {
            // Attach cached map info to the virtual object.
            if (OffsetOfFieldAccess(op) == HeapObject::kMapOffset) {
              vobject->SetMap(value);
            }
            current->Set(var, value);
            current->MarkForDeletion();
          } else {
            current->SetEscaped(object);
            current->SetEscaped(value);
          }
          break;
        }
        case IrOpcode::kStoreElement: {
          Node* object = current->ValueInput(0);
          Node* index = current->ValueInput(1);
          Node* value = current->ValueInput(2);
          const VirtualObject* vobject = current->GetVirtualObject(object);
          int offset;
          Variable var;
          if (vobject && !vobject->HasEscaped() &&
              OffsetOfElementsAccess(op, index).To(&offset) &&
              vobject->FieldAt(offset).To(&var)) {
            current->Set(var, value);
            current->MarkForDeletion();
          } else {
            current->SetEscaped(value);
            current->SetEscaped(object);
          }
          break;
        }
        case IrOpcode::kLoadField: {
          Node* object = current->ValueInput(0);
          const VirtualObject* vobject = current->GetVirtualObject(object);
          Variable var;
          Node* value;
          if (vobject && !vobject->HasEscaped() &&
              vobject->FieldAt(OffsetOfFieldAccess(op)).To(&var) &&
              current->Get(var).To(&value)) {
            current->SetReplacement(value);
          } else {
            current->SetEscaped(object);
          }
          break;
        }
        case IrOpcode::kLoadElement: {
          Node* object = current->ValueInput(0);
          Node* index = current->ValueInput(1);
          const VirtualObject* vobject = current->GetVirtualObject(object);
          int offset;
          Variable var;
          Node* value;
          if (vobject && !vobject->HasEscaped() &&
              OffsetOfElementsAccess(op, index).To(&offset) &&
              vobject->FieldAt(offset).To(&var) && current->Get(var).To(&value)) {
            current->SetReplacement(value);
            break;
          } else if (vobject && !vobject->HasEscaped()) {
            // Compute the known length (aka the number of elements) of {object}
            // based on the virtual object information.
            ElementAccess const& access = ElementAccessOf(op);
            int const length =
                (vobject->size() - access.header_size) >>
                ElementSizeLog2Of(access.machine_type.representation());
            Variable var0, var1;
            Node* value0;
            Node* value1;
            if (length == 1 &&
                vobject->FieldAt(OffsetOfElementAt(access, 0)).To(&var) &&
                current->Get(var).To(&value) &&
                (value == nullptr ||
                 NodeProperties::GetType(value).Is(access.type))) {
              // The {object} has no elements, and we know that the LoadElement
              // {index} must be within bounds, thus it must always yield this
              // one element of {object}.
              current->SetReplacement(value);
              break;
            } else if (length == 2 &&
                       vobject->FieldAt(OffsetOfElementAt(access, 0)).To(&var0) &&
                       current->Get(var0).To(&value0) &&