N ← N ∪ {CN}
Ret C
(Π,θ),Fab(F, A)
Experiment ExpKR
F ←$ F; i ← 0
(KO, CL) ←$ Hide(CF , θ)
K ←$ AFAB,RESTORE,RUN(CL, θ)
CG ← Restore(K, θ, Fab(CL, θ))
Ret [G ≡ F ]
oracle RESTORE(C ˆL):
if C ˆL /∈ H ∪ N then Ret ⊥
CP ← Restore(KO, θ, C ˆL)
if CP (cid:54)= ⊥ then
i ← i + 1; U[i] ← CP
Return i
oracle RUN(j, X):
CP ← U [j]
Ret P (X)
Fig. 2: Experiments for function-recovery (FR) and key-recovery (KR) notions for DH scheme Π = (Hide, Restore), given
F ⊆ Func(n, m) and design parameters θ, when chips are fabricated according to Fab.
Experiment (cid:103)FR(Π,θ)(F, B)
F ←$ F
(KO, CL) ←$ Hide(CF , θ)
CG ←$ BTRUE(CL, θ)
Ret [G ≡ F ]
oracle TRUE(X):
Ret F (X)
Fig. 3: FR-game in the honest-but-curious setting. All three
oracles in the original FR-security experiment are replaced
with TRUE.
Theorem 1.
Theorem 1. Fix integers n, m > 0, F ⊆ Func(n, m), and
design parameters θ for a DH scheme Π = (Hide, Restore).
Let Fab be honest. For any KR-adversary A, there is an FR-
adversary B such that
AdvKR
(Π,θ),Fab(F, A) ≤ AdvFR
(Π,θ),Fab(F, B).
Here, A is (t, qf , qs, qr)-resource where t = O(qf + qs + qr),
(cid:7)
and B is (O(t), O(qf ), O(qs), O(qr)) resource.
The proof of this theorem is straightforward. Given the KR-
adversary A guesses K, the FR adversary B can generate CG
by ﬁxing the ko(θ) input bits in the opaque circuit CL with
K (using the deterministic algorithm Restore), and then using
Fab to fabricate the restored circuit. With CG, B wins the FR
experiment with probability no less than the probability with
which A wins the KR experiment.
The converse, i.e., KR security implies FR security, is not
true. Consider that the opaque circuit that the hiding algorithm
outputs is an encoding of the original circuit, and the secret
key is sampled uniformly at random from {0, 1}128. While
admittedly pathological, this example sufﬁces to make the
point.
Simpliﬁed FR-notion in the honest-but-curious setting. Re-
call that in the security experiments, the goal of the adversary
is to recover the full-functionality of F . In the honest-but-
curious setting, the foundry effectively will have oracle access
to F and unrestricted access to L. (We discuss the fully-
malicious setting in Section C.) Let’s see this in the context
of the FR-security deﬁnition.
Let CL be the opaque circuit that the IP author generates
using Hide. In the honest-but-curious setting,
the foundry
uses Fab honestly. By deﬁnition of honest Fab, any opaque
chip that Fab produces will implement L. Thus, running (the
deterministic) Restore algorithm on the honestly-fabricated
opaque chips with KO will result
in chips with identical
functionalities. Since the adversary gains no additional in-
formation about F from multiple queries to the oracles FAB
and RESTORE, we can ﬁx qf = 1 and qs = 1, where the
only (useful) query that A makes to FAB is ˆZ = (cid:104)CL, θ(cid:105),
and the only (useful) query that A makes to RESTORE is
(cid:99)CL = Fab( ˆZ). Notice that this results in U to store a single
restored chip CF = Restore(KO, θ,(cid:99)CL) at index one. Using
its qr queries (1, Xi) to RUN oracle, the adversary will learn
qr pairs (Xi, F (Xi)). Thus, in the honest-but-curious setting,
we can replace all the oracles with a single TRUE oracle, that
takes Xi as input and returns F (Xi). We show these changes
in the security experiment (cid:103)FR(Π,θ)(F, B); See Fig. 3.
Notice that the changes are all either syntactic (i.e., no
change to the advantage) or conservative (i.e., cannot decrease
advantage) with respect to the original FR experiment. This
observation gives rise to the following simple, but useful
lemma.
Lemma 1. Fix DH scheme Π and parameters θ. For ev-
ery honest-but-curious FR-adversary A that is (t, qf , qs, q)-
resource, there exists a closely related adversary B such that
(cid:105) ≤ Pr
(cid:104)(cid:103)FRΠ,θ(F, B) = 1
(cid:105)
(cid:104)
Pr
ExpFR
(Π,θ),Fab(F, A) = 1
where B makes at most q queries to TRUE (see Fig. 3), and
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:33:25 UTC from IEEE Xplore.  Restrictions apply. 
1679
runs in time O(t).
(cid:7)
As discussed in Section B, almost all existing DH schemes
[6], [15], [27]–[30], [44]–[46], [49] have been shown to be
KR-insecure, i.e., these schemes have large (close to one) KR
advantage due to various key-recovery attacks [16]–[26]. Per
our Theorem 1, if a DH scheme is KR-insecure, then it is
also FR-insecure, i.e., large FR advantage. The few (recent)
schemes [31], [32] that have not been shown to be broken
were designed speciﬁcally to thwart SAT attack. In order to
prove FR-security, we need to show that a DH scheme thwarts
all FR-attacks — not speciﬁc KR-attacks. In the next section,
we will construct an FR-secure DH scheme.
VI. A FRAMEWORK FOR DESIGNING FR-SECURE
In the FR-security experiment as well as in (cid:103)FR,
DESIGN-HIDING SCHEMES
wins(cid:103)FR will be upperbounded by 2−H∞(D1), where H∞(D1)
the
adversary’s guess space is the set F ⊆ Func(n, m) before
it gets full access to the opaque circuit. As the adversary
learns new information via its unrestricted access to the opaque
circuit CL and oracle access to F , it can prune its guess
space to a smaller set M1 ⊆ F of functions. Let D1 be the
probability distribution of M1. Then, the probability that B
is the min-entropy of D1. In this section, we will describe a
framework that an IP author can use to build a DH scheme
(with formal descriptions of Hide and Restore) such that it
can concretely deﬁne the distribution D1, and ﬁnd concrete
FR-security guarantees of its construction.
Abstractly, the opaque chip CL can be viewed as a cir-
cuit that encodes a set RL ⊆ Func(n, m) of n-bit to m-
bit functions (not necessarily distinct) that are selected by
Hide (either implicitly or explicitly), and each key K in set
K = {0, 1}ko(θ) is associated with some function in RL.
Minimally, correctness will require that the hiding key KO is
associated with the true function F . We deﬁne a chaff function
H ∈ Func(n, m) as one that is not functionally equivalent to
F ; we refer to the inputs on which H differs (in output) from
F as “distinguishing” inputs.
In our framework, we insist that the set RL be “extractable”
from the opaque circuit, i.e., given CL and the description
of Hide, the IP author knows the full-functionality of each
function in RL. This is a reasonable assumption as during the
design of circuit, the functionality of a circuit is ﬁxed ﬁrst
as part of the system speciﬁcation and architectural design,
and then the topology of the circuit
is decided. In RLL
[6] and its variants [31], [32], [44]–[46], the functionality
of the chaff functions is not decided during the design of
Hide. Rather, the chaff functions are an artifact of random
structural modiﬁcations — the positions of key gates in the
original circuit. So, for a non-pathological circuit, i.e., circuits
with sufﬁciently complex functionality and reasonably large
domain, it is almost impossible to extract the functionality of
the chaff functions. Consequently, it is difﬁcult to evaluate the
FR security of such schemes in our framework. As mentioned
earlier, RLL and its variants (designed before SAT attack) as
Fig. 4: a) An opaque circuit generated by any OneChaff
scheme. b) An honestly-fabricated-and-restored chip. Adver-
sary gets unrestricted access to (a) and oracle access to (b).
well as SAT-attack-resistant schemes [15], [27]–[30] (designed
post SAT attack) are FR-insecure due to various key-recovery
attacks [16]–[26].
A. OneChaff: a family of DH schemes
We present a family of DH schemes called OneChaff with
the following common features:
• the design-hiding algorithm returns an opaque circuit that
contains the circuit of a single chaff H with ∆ ∈ N
distinguishing inputs and an uninitialized lookup table (see
Fig. 4(a)) that is used for restoring the functionality of the
hidden function;
• the hiding key encodes the set of distinguishing inputs and
the correct value of the hidden function on the distinguishing
inputs;
• the design-restoring algorithm, in an honest run, initializes
the lookup table with the hiding key (see Fig. 4(b)).
Notice that the description of OneChaff leaves H unspeciﬁed;
speciﬁc OneChaff schemes will deﬁne H explicitly.
The opaque circuit that OneChaff generates consists of:
the circuit of a single Boolean function, and a lookup table
that is effectively a restore unit. Structurally, this is similar
to the opaque circuits that SAT-attack-resistant DH schemes
[15], [27]–[29] generate. However, the functionalities of the
Boolean function and the restore unit are different across
schemes. In SFLL-HD [15] and TTLock [29], the encoded
Boolean function H is such that its functionality differs from
F only on non-key inputs Xi that are at a hamming-distance
of h (in SFLL-HD, 0 ≤ h ≤ 2n; in TTLock, h = 0) from
the correct key KO; on the remaining inputs, H and F have
identical functionalities. In AntiSAT [27] and SARLock [28],
the original function F is encoded in the opaque circuit with
the assumption that the circuit-synthesis tools will “meld” the
functionalities of F and the restore unit –a comparator that
checks whether the key-input to the opaque circuit is identical
to the hard-coded correct key (KO)– in such a way that the
adversary will not be able to locate F .
Several key-recovery attacks [16], [21], [26], [50] have
exploited structural as well as functional weaknesses in the
opaque circuits that the SAT-attack-resistant DH schemes [15],
[27]–[29] generate to recover the correct key (and hence the
entire functionality of the original circuit). In our construction
OneChaffhd, which we describe next, we chose the functional-
ity of the Boolean function and the restore unit in such a way
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:33:25 UTC from IEEE Xplore.  Restrictions apply. 
1680
that we can prove its security for a wide class of functions
against all attacks admissible in the standard threat model of
logic-locking.
Let θ = (n, m, ∆), where n, m > 0, and ∆ ∈ [2n − 1].
Description of Hide. Given F ,
the Hide algorithm in
OneChaffhd selects F as the anchor
function and sam-
ples a single chaff uniformly from its ∆-neighborhood, i.e.,
H ←$ N∆(F ). Equivalently, the chaff H is initialized to F
and then, on a random subset I(cid:54)=(F, H) = {X1, X2, . . . , X∆}
the value of H(Xi) ←$ {0, 1}m \
of the domain of F ,
{F (Xi)}; when m = 1, H(Xi) ← ¬F (Xi).
Formally, the opaque circuit CL returned by Hide computes
the function L : ({0, 1}n ∪ {(cid:32)})∆ × ({0, 1}m ∪ {(cid:32)})∆ ×
{0, 1}n → {0, 1}m deﬁned by
L (((U1, V1), (U2, V2), . . . , (U∆, V∆)) , X)
(cid:26) Vi
=
if ∃Ui = X
H(X) otherwise
In practice, we envision CL to be a circuit that encodes H
to mean “uninitialized”. We implicitly assume that all string-
valued Ui are distinct so that L is well deﬁned, and that if any
of functions RL = N∆(H), one of which is F .
where the distinguished (non-string) symbol (cid:32) is understood
Ui =(cid:32), then all Ui =(cid:32). Thus, L computes H and a family
and an uninitialized table (cid:103)Tab, whose gate-and-wire represen-
write CL = (cid:104)H,(cid:103)Tab(cid:105) to reﬂect
evaluate CH given CL and, by loading (cid:103)Tab in CL with a
tation allows for a sub-circuit CH (computing H) to be easily
parsed out; overloading the (cid:104)·(cid:105) notation, we will sometimes
this. This way, one can
list of ∆ pairs in {0, 1}n × {0, 1}m, any of the functions in
N∆(H).
Description of Restore. The Restore algorithm parses the
input (design) parameters θ to determine n, m, ∆. It then
expects a key K = (cid:104)(U1, V1), . . . , (U∆, V∆)(cid:105) where each
(Ui, Vi) ∈ {0, 1}n×{0, 1}m, and a chip CL that was fabricated
from a circuit CL = (cid:104)H,(cid:103)Tab(cid:105). When these expectations are
met, Restore loads the pairs (Ui, Vi) into the uninitialized
lookup table. (When not, it returns ⊥.) We write CL ↑ K for
this, the notation suggesting that K is “uploaded” into CL.
Thus, when provided with an honestly fabricated chip from
the opaque circuit CL returned by Hide(F, θ), and the cor-
responding key KO, the restored chip CL ↑ KO properly
computes the hidden function F . Note that, we abstract away
the physical mechanism by which uploading the (Ui, Vi) is
implemented, and assume that if this mechanism is able to
detect upload failure, Restore returns ⊥.
B. OneChaffhd is efﬁcient
Hide is efﬁcient. Note that Hide in OneChaffhd is abstracting
the process by which an IP author goes from the “idea”
(i.e., informal speciﬁcation) of a functionality F to an opaque
circuit described in some format that is suitable for fabrication
(e.g., a GDSII ﬁle). This process typically involves writing
a program for the desired functionality in some high-level
language like Verilog, and then converting the program to a
circuit description by an EDA tool. In OneChaffhd, this process
can be augmented to sample ∆ random domain points, and
incorporate these to yield a program (hence a circuit) for the
chaff function H. More speciﬁcally, the IP author can follow
a two-step approach in order to create H from F . Let m = 1.
In the ﬁrst step, it creates a set of ∆ random n-bit inputs and
ﬁnds the value of F on those inputs. Next, it sets the value of
H on the ∆ inputs Xi to ¬F (Xi); on the remaining inputs H
and F have identical values. Hence, runtime of Hide to create
H will be O(n∆)+T (H) , where T (H) is the time needed to
create the circuit for H. Note that the IP author would have
anyways spent T (F ) time to build the circuit for F in the
honest setting. So, effectively, the additional runtime of Hide
in OneChaffhd is O(n∆)+T (H)−T (F ). (Time to create KO
will also be O(n∆) as |KO| = n∆.) When ∆ (cid:28) 2n , T (H)
will be roughly same as T (F ). Thus, the efﬁciency of Hide
should be roughly same as that of the original process, at least
when ∆ (cid:28) 2n.
Also, note that such an implementation does not
Restore is efﬁcient. Since Restore involves uploading the
leak
any additional information about F apart from H when the
adversary gets full view of the opaque circuit (cid:104)H,(cid:103)Tab(cid:105).
n∆-bits hiding key KO to (cid:103)Tab, it’s runtime will be O(n∆).
In (cid:103)FR, given unrestricted access to CL = (cid:104)H,(cid:103)Tab(cid:105), the
C. FR security of OneChaffhd
IP author knows that the foundry can (at best) extract the set
RL = N∆(H) and compute M0 = F ∩ N∆(H) to reduce
the size of its original guess space F. Using queries to TRUE,
the foundry can further reduce the guess space to M1 ⊆ M0
by removing functions in M0 whose distinguishing-input sets
contain query inputs.
In practice, the IP author will not know the set F because
that captures the foundry’s initial guess at the set of possible
functions F that may be what the IP author intends to hide.
(Recall that the FR-notion samples F ←$ F, suggesting that
the foundry’s initial set is the correct set.) More plausibly,
the author may assume that the foundry’s initial guess is
based upon knowledge of likely “properties” of F . These
properties may be gleaned from discussions with the IP au-
thor, statements in fabrication contracts, historical and market
information, etc. The IP author may use these assumed-
known properties in its description of Hide, Restore, or into
the parameters θ. In particular, it can use these assume-known