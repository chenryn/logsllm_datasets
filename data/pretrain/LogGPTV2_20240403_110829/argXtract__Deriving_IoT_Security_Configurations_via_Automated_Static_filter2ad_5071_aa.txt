# Title: argXtract: Deriving IoT Security Configurations via Automated Static Analysis of Stripped ARM Cortex-M Binaries

# Authors: Pallavi Sivakumaran and Jorge Blasco

## Abstract
Recent high-profile attacks on the Internet of Things (IoT) have highlighted vulnerabilities in "smart" devices, often stemming from poor device configuration. This has led to increased scrutiny of IoT technologies and devices through security analyses. However, most automated analyses have focused on IoT hub or gateway devices, which typically run traditional operating systems like Linux or VxWorks. In contrast, IoT peripherals, which are resource-constrained, lack traditional operating systems, and increasingly feature the ARM Cortex-M architecture, have received less attention. We address this gap with argXtract, a framework for performing automated static analysis of stripped ARM Cortex-M binaries to extract security-relevant configuration data. Through case studies involving over 200 Bluetooth Low Energy (BLE) binaries targeting Nordic Semiconductor chipsets, as well as smaller studies on STMicroelectronics BlueNRG and Nordic ANT binaries, argXtract has uncovered widespread security and privacy issues, including minimal or no data protection, weakened pairing mechanisms, and potential for device and user tracking.

## CCS Concepts
- **Security and Privacy** → Distributed Systems Security

## Keywords
- IoT, Firmware Analysis, Stripped Binaries, ARM, Cortex-M, Bluetooth Low Energy, ANT, Nordic, STMicroelectronics

## ACM Reference Format
Pallavi Sivakumaran and Jorge Blasco. 2021. argXtract: Deriving IoT Security Configurations via Automated Static Analysis of Stripped ARM Cortex-M Binaries. In Annual Computer Security Applications Conference (ACSAC '21), December 6–10, 2021, Virtual Event, USA. ACM, New York, NY, USA, 16 pages. https://doi.org/10.1145/3485832.3488007

## Introduction
The Internet of Things (IoT) is rapidly expanding, with an estimated 22 billion connected IoT devices in use by the end of 2018, projected to grow to 50 billion by 2030 [75]. These devices handle sensitive personal and health information, making it crucial to understand their security and privacy implications. Recent years have seen numerous flaws in IoT devices, some exploited at large scale, such as the Mirai [22] and Brickerbot [64] attacks. Severe vulnerabilities have also been found in medical devices [45, 80] and webcams [74], often due to poor configuration, such as default passwords [5, 51] or inadequate data protection [53, 91].

Analyzing IoT firmware is challenging, especially for peripheral devices, which often come as stripped binaries without headers, section information, or debugging symbols. Additionally, many IoT peripherals use ARM Cortex-M processors, which feature inline data and instruction sets not fully supported by current disassemblers [41].

In this work, we present argXtract, a framework for extracting security-relevant configuration information from stripped ARM Cortex-M binaries. We evaluate argXtract through three case studies: (i) BLE binaries for Nordic Semiconductor chipsets, (ii) BLE binaries for STMicroelectronics BlueNRG chipsets, and (iii) ANT binaries for Nordic chipsets. The results reveal widespread security issues, including minimal data protection, inconsistent permissions, weakened pairing mechanisms, and potential for device and user tracking.

## Motivation
Configuration issues are a common root cause for IoT attacks. For example, Mirai exploited default credentials [5], while other devices lacked basic data protection [52, 53, 91]. Firmware is a rich source of configuration information, but analyzing it, especially for resource-constrained peripherals, is complex. Many IoT peripherals use custom or no operating systems, leading to fewer analyses. We bridge this gap by focusing on peripheral firmware analysis.

IoT peripherals often implement communication technologies like BLE, Zigbee, ANT, or Thread. Chipset vendors provide APIs for developers to configure these technologies within applications [57, 78, 79]. Figure 1 illustrates a configuration function where a fixed passkey is set for BLE pairing using the `sd_ble_opt_set` API call. To identify such configurations, we need to locate the function call and analyze its arguments. Disassembly of unstripped and stripped binaries shows the challenges, such as missing function names and incorrect data interpretation.

## ArgXtract
ArgXtract is designed to take the disassembly of a Cortex-M binary, perform several processing stages, and extract arguments to security-relevant Calls Of Interest (COIs). The processing stages include:
1. **Application Code Base Identification**: Correct absolute addressing.
2. **Data Identification**: Preventing data misinterpretation as code.
3. **Function Block Identification**: Enabling call execution path generation and function pattern matching.
4. **COI Identification**: Determining trace termination points.
5. **Tracing and Argument Processing**: Extracting and processing COI arguments.

### Application Code Base Identification
Incorrect address offsets can lead to failed absolute addressing. ArgXtract combines known and obtained addresses to compute the application code base. Core interrupt handlers' addresses are known and located at specific offsets within the Vector Table (VT).

## Conclusion
We summarize our main contributions:
- **Development of argXtract**: A framework for automated static analysis of stripped ARM Cortex-M binaries to extract security-related configuration information.
- **Case Studies**: Analysis of Nordic BLE, STMicroelectronics BlueNRG, and Nordic ANT binaries, revealing widespread security and privacy issues.
- **Open Source Availability**: ArgXtract is available as open-source code at https://github.com/projectbtle/argXtract, including configuration files for the presented case studies.

This work aims to improve the security and privacy of IoT devices by providing a robust tool for analyzing stripped binaries and identifying potential vulnerabilities.