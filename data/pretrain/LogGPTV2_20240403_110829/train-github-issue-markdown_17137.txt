I have a specific use case where I animate an `ImageView` it does a flip
animation and I see the next image. The issue is that while the next image is
loading there is a bunch of white space.
I tried this implementation here:
    Glide
    .with(context)
    .load(imageUrl)
    .thumbnail(Glide // this thumbnail request has to have the same RESULT cache key
            .with(context) // as the outer request, which usually simply means
            .load(oldImage) // same size/transformation(e.g. centerCrop)/format(e.g. asBitmap)
            .fitCenter() // have to be explicit here to match outer load exactly
    )
    .listener(new RequestListener() {
        @Override public boolean onResourceReady(GlideDrawable resource, String model, Target target, boolean isFromMemoryCache, boolean isFirstResource) {
            if (isFirstResource) {
                return false; // thumbnail was not shown, do as usual
            }
            return new DrawableCrossFadeFactory(/* customize animation here */)
                    .build(false, false) // force crossFade() even if coming from memory cache
                    .animate(resource, (ViewAdapter)target);
        }
    })
    //.fitCenter() // this is implicitly added when .into() is called if there's no scaleType in xml or the value is fitCenter there
    .into(imageView);
    oldImage = imageUrl;
But while this makes the previous image stick around and not disappear when
the animation occurs and the next image loads, the previous image sticks
around and the user is kind of stuck waiting looking at the previous image
AFTER the animation is complete which is somewhat awkward.
I was wondering if there is a way to `preload` the next image and save it in
memory and upon animation start just set the next image in
`Glide.with(...).load(mNextImageRequest)....`
Is this possible?