### 3.3.2 MSSQL服务器扫描
扫描器不仅定位了MSSQL服务器的地址，还确定了MSSQL实例名、服务器版本号以及监听的TCP端口。例如：
- 实例名: `=SQLEXPRESS`
- 是否集群: `No`
- 版本: `10.0.1600.22`
- TCP端口: `1433`

在大规模子网中查找MSSQL监听端口时，这种方法比使用nmap对所有主机的所有端口进行扫描要快得多。

### 3.3.3 SSH服务器扫描
如果在扫描过程中发现某些主机运行着SSH（安全Shell），则应对SSH的版本进行识别。尽管SSH协议本身是安全的，但不同实现版本可能存在漏洞。可以使用Metasploit框架中的`ssh_version`模块来识别目标服务器上运行的SSH版本。

示例命令如下：
```bash
msf> use scanner/ssh/ssh_version
msf auxiliary(ssh_version)> set THREADS 50
msf auxiliary(ssh_version)> run
```

输出结果可能如下：
```
[*] 192.168.1.1:22, SSH server version: SSH-2.0-dropbear_0.52
[*] Scanned 044 of 256 hosts (017% complete)
[*] 192.168.1.101:22, SSH server version: SSH-2.0-OpenSSH_5.1p1 Debian-3ubuntu1
[*] Scanned 100 of 256 hosts (039% complete)
[*] 192.168.1.153:22, SSH server version: SSH-2.0-OpenSSH_4.3p2 Debian-8ubuntu1
[*] 192.168.1.185:22, SSH server version: SSH-2.0-OpenSSH_4.3
```

这些信息可以帮助你识别不同补丁级别的SSH版本，从而选择合适的攻击方法。

### 3.3.4 FTP扫描
FTP是一种复杂且缺乏安全性的应用层协议。在渗透测试中，应始终对目标系统上的FTP服务器进行扫描和识别。可以使用Metasploit框架中的`ftp_version`模块来扫描FTP服务。

示例命令如下：
```bash
msf> use scanner/ftp/ftp_version
msf auxiliary(ftp_version)> show options
msf auxiliary(ftp_version)> set RHOSTS 192.168.1.0/24
msf auxiliary(ftp_version)> set THREADS 255
msf auxiliary(ftp_version)> run
```

输出结果可能如下：
```
[*] 192.168.1.155:21 FTP Banner: Minftpd ready
```

接下来，可以使用`scanner/ftp/anonymous`模块检查FTP服务器是否允许匿名登录：
```bash
msf> use auxiliary/scanner/ftp/anonymous
msf auxiliary(anonymous)> set RHOSTS 192.168.1.0/24
msf auxiliary(anonymous)> set THREADS 50
msf auxiliary(anonymous)> run
```

输出结果可能如下：
```
[*] 192.168.1.155:21 Anonymous READ/WRITE (220 Minftpd ready)
```

这意味着我们对远程FTP系统具有完全的访问权限，可以上传或下载文件。

### 3.3.5 简单网管协议扫描
简单网管协议（SNMP）通常用于网络设备中，报告带宽利用率等信息。一些操作系统也包含SNMP服务器软件，提供系统状态信息。可访问的SNMP服务器可能泄漏大量信息，甚至导致设备被远程攻陷。

使用Metasploit框架中的`snmp_login`模块可以尝试猜解SNMP团体字符串：
```bash
msf> use scanner/snmp/snmp_login
msf auxiliary(snmp_login)> set RHOSTS 192.168.1.0/24
msf auxiliary(snmp_login)> set THREADS 50
msf auxiliary(snmp_login)> run
```

输出结果可能如下：
```
[*] 192.168.1.2 'private' 'GSM7224 L2 Managed Gigabit Switch'
```

通过Google搜索“GSM7224”，可以发现这是一台Netgear交换机，并且使用了默认的SNMP团体字符串。

### 3.4 编写自己的扫描器
Metasploit框架提供了许多实用功能，可以用来编写自定义扫描器。以下是一个简单的TCP扫描器的Ruby脚本示例：

```ruby
require 'msf/core'

class Metasploit3 < Msf::Auxiliary
  include Msf::Exploit::Remote::Tcp
  include Msf::Auxiliary::Scanner

  def initialize(info = {})
    super(update_info(info,
      'Name'        => 'My Custom TCP Scanner',
      'Description' => 'A simple TCP scanner',
      'Author'      => 'Your Name',
      'License'     => MSF_LICENSE
    ))
    register_options(
      [
        Opt::RPORT(12345)
      ], self.class)
  end

  def run_host(ip)
    connect()
    sock.puts('HELLO SERVER')
    data = sock.recv(1024)
    print_status("Received: #{data} from #{ip}")
    disconnect()
  end
end
```

将该脚本保存为`simple_tcp.rb`并放在`modules/auxiliary/scanner/`目录下。可以通过以下命令进行测试：

```bash
root@bt:/# echo "Hello Metasploit" > banner.txt
root@bt:/# nc -lvp 12345
msf> use auxiliary/scanner/simple_tcp
msf auxiliary(simple_tcp)> set RHOSTS 192.168.1.101
msf auxiliary(simple_tcp)> run
```

输出结果可能如下：
```
[*] Received: Hello Metasploit from 192.168.1.101
[*] Scanned 1 of 1 hosts (100% complete)
```

### 3.5 小结
本章介绍了如何利用Metasploit框架进行情报搜集。情报搜集需要深入了解目标组织的运作模式，并确定最佳攻击目标。下一章将讨论漏洞分析阶段中的自动化漏洞扫描。

### 第4章 漏洞扫描
漏洞扫描器是一种自动寻找和发现系统安全弱点的程序。它通过发送探测数据并与自带的漏洞特征库匹配，列举出目标系统上的安全漏洞。漏洞扫描器还可以确定操作系统版本和补丁安装等级，生成详细的漏洞报告，帮助网络管理员和渗透测试者进行安全评估。