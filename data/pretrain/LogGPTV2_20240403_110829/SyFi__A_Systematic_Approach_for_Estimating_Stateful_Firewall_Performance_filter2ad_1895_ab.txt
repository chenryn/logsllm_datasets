P
D
U
64Byte
256Byte
512Byte
1024Byte
1518Byte
 700000
 600000
 500000
 400000
 300000
 200000
 100000
 0
SW-E5500
Fortigate-ONE
Firewall
(a) TCP Packet Rate
(b) UDP Packet Rate
Fig. 3. Maximum packet rate with diﬀerent packet sizes
perform on these rules (e.g., reordering of rules) to lower the number of ACL
hits, we isolate the performance of the ﬁrewall from the ACL as a ﬁrst order of
approximation. We do a separate series of experiments in Section 4 to identify
the eﬀect that the ﬁrewall’s ruleset has on its performance.
Impact of concurrent sessions. First, we investigate whether the number
of concurrently active ﬁrewall sessions aﬀects a ﬁrewall’s performance. To study
this, we introduce a set of background sessions; these are ﬂows on which we do not
send any packets once they are setup. These ﬂows occupy space in the ﬁrewall’s
session table without adding traﬃc ﬂowing through the ﬁrewall. We ensure that
the session timeout on the ﬁrewall is long enough that these background sessions
do not expire early. In addition, we have regular sessions on which we do send
packets after they are created.
In each test, we start with one ﬂow that sends 10,000 packets/second, and
every 60 seconds we add a new ﬂow that sends 10,000 packets/sec. Note that
every ﬂow stays active until the experiment stops, so the number of packets
increases every 60 seconds. We need to add new ﬂows to increase packet rate
because our traﬃc generating tool can at most generate 10,000 packets/sec per
ﬂow. We stop creating more ﬂows when the device can handle no more load,
i.e., when we see an onset of persistence packet drops, and record the maximum
packet rate that the ﬁrewall can handle. We found that the speciﬁc numbers used
here (1 ﬂow every 60 seconds, 10k packets/sec/ﬂow) provide enough granularity
and time for the system to stabilize and allows us to detect the point of load
saturation with reasonable accuracy.
We measured the maximum packet rate as above with the creation of the
background sessions and the regular sessions interspersed, with the background
sessions created ﬁrst, and with the background sessions created last to capture
the performance impact of the order in which sessions are created. In each case,
we experimented with varying number of background sessions ranging from 0 to
500K in increments of 100K. In all cases, as shown in Figure 2, we found that
the number of active sessions in the ﬁrewall table had minimal impact on the
maximum packet rate on either device.
Impact of packet size on packet rate. Next, we measure the impact of
packet size on ﬁrewall performance. We vary the packet size across 64, 256, 512,
78
Y. Beyene, M. Faloutsos, and H.V. Madhyastha
t
e
a
R
t
i
/
e
k
c
a
P
n
o
s
s
e
S
P
D
U
 700000
 600000
 500000
 400000
 300000
 200000
 100000
 0
Session-Rate
Packet-Rate
Session-Rate
Packet-Rate
 700000
 600000
e
t
a
R
 500000
t
i
/
e
k
c
a
P
n
o
s
s
e
S
P
C
T
 400000
 300000
 200000
 100000
 0
SW-E5500
Fortigate-ONE
Firewall
(b) TCP
SW-E5500
Fortigate-ONE
Firewall
(a) UDP
Fig. 4. Session rate versus packet rate
1024 and 1518 bytes, and in each case, measure the maximum packet rate as
above. Figures 3a and 3b illustrate the maximum packet rates for TCP and UDP
packets. Both ﬁgures show that packet size has negligible impact; the maximum
packet rate declines by less than 3% for TCP and by less than 5% for UDP
when packet size increases from 64 bytes to 1518 bytes. Thus, packet size has
minimal impact on packet rate; a ﬁrewall vendor can inﬂate the throughput in
bytes/second by using the maximum packet size possible.
We also note that though our approach is agnostic to the speciﬁc bottleneck
resource as it treats the ﬁrewall as a black box, we observed the CPU to be the
bottleneck in all cases and packet loss occurred when CPU utilization reached
nearly 100%. We observed an isolated incident with Fortigate-ONE where max-
imum packet rate with UDP drops by nearly 20% when the packet size is 1518
bytes. This could be due to an implementation ineﬃciency in the tested ﬁrmware
version.
Cost of creating a session. We next compare the overhead of processing
packets that create sessions on the ﬁrewall with that of processing subsequent
packets that belong to an active session. We do this by computing the maximum
session rate as described next and comparing it with the previously measured
maximum packet rates. We begin by creating 5K new ﬂows every second and
increase the rate by 1K ﬂows every 60 seconds until the ﬁrewall resources are
exhausted and we start observing persistent packet drops. Thus, the ﬁrewall
establishes 5K new sessions every second in the ﬁrst cycle, 6K new sessions
every second in the second cycle, and so on. For every ﬂow, we stop sending
packets after it is created. We also lowered the session timeout on the ﬁrewall to
force it to ﬂush sessions regularly; packet loss is thus caused due to the ﬁrewall’s
resource limitation, and not because the session table is full. We record the
maximum session rate as the maximum rate of session creation reached before
we start observing packet drops.
Figures 4a and 4b compare the maximum session rates and packet rates for
UDP and TCP. The large diﬀerence between the session and packet rates is in-
dicative of the much higher cost of establishing a session compared to processing
subsequent packets. Though the extent of variation between creating sessions
and processing subsequent packets varies across the two ﬁrewalls, this is to be
expected since each ﬁrewall runs its own proprietary software.
SyFi: A Systematic Approach for Estimating Stateful Firewall Performance
79
Impact of transport protocol. We make two other observations from our
measurements of maximum packet and session rates. First, we see that estab-
lishing a TCP session is more expensive than a UDP session. Second, we ﬁnd
that processing a TCP data packet is more expensive than a subsequent UDP
packet. These ﬁndings show that packet processing costs depend on the transport
protocol of packets.
Finally, we varied application level properties, such as the generating ap-
plication or sender and receiver port numbers, but we observed no signiﬁcant
performance impact. Note that the application type may have signiﬁcant impact
for security devices that inspect payload which is beyond the scope of this paper.
3 SyFi: Model for Firewall Performance
Based on the insights from our measurements, we develop a systematic approach
for estimating the performance of any stateful ﬁrewall. As summarized in Fig-
ure 5, given a ﬁrewall and a traﬃc proﬁle as input, our model outputs the
maximum throughput that the ﬁrewall can sustain.
Traﬃc proﬁle. First, our model represents any input traﬃc proﬁle as the mix of
four packet types, which we denote with Tt, t = 1, 2, 3, 4. These four packet types
are: a) packets associated with establishing TCP sessions (TCP SYN packets),
(b) TCP data packets, (b) the ﬁrst packets of a UDP ﬂow, and (d) the sub-
sequent packets of a UDP ﬂow 1. Thus, we represent a traﬃc proﬁle with the
probability Pt that a packet of type Tt is seen. These probabilities can be di-
rectly computed from a traﬃc trace gathered at the target network. There may
be some challenges in isolating UDP packets that create sessions from those that
belong to an existing session as ﬁrewalls clear sessions that have been inactive
for longer than the ﬁrewall time-out. The subtle but reasonable assumption that
can be made is to consider ﬂow with inter-packet intervals longer than ﬁrewall
time-outas the beginning of a new ﬂow. On the other hand, if the traﬃc de-
scription is in terms of the application layer (e.g., 80% HTTP and 20% FTP),
it is straightforward to calculate the probabilities if (a) the fraction of ﬂows per
application, and (b) the average number of packets per ﬂow is known.
Firewall proﬁle. Second, based on the measurements we described in Section 2,
we measure the overhead or cost of each packet type Tt, denoted as Ct. In our
case, we use the CPU utilization associated with processing each packet type as
the cost, but more generally, this is the utilization of the ﬁrewall bottleneck. We
compute the cost Ct for each of the four packet types Tt as
Maxt , where M axt is
the maximum rate measured using the steps described in Section 2. Though this
step of characterizing costs is resource intensive, it needs to be performed only
once for each ﬁrewall device and the measurements can be reused across all traﬃc
scenarios. Recall that packet sizes, ﬁrewall session table size, and application level
protocol type were seen to have minimal eﬀect on performance.
1
1 We focus on UDP and TCP packets as they account for over 95% of Internet traf-
ﬁc [25], but the model can be extended to include packets such as ICMP.
80
Y. Beyene, M. Faloutsos, and H.V. Madhyastha
Fig. 5. Systematic Firewall Throughput Approach
3.1 Analytical Model
Finally, we calculate the expected throughput of the ﬁrewall on the input traﬃc
proﬁle in terms of packets per second, which we denote by N . Given the proba-
bility Pt and the cost Ct for each of the four packet types, we compute the cost
(CPU utilization) for N packets per second as follows.
CP U = N × 4(cid:2)
(Ct × Pt)
t=1
(1)
The maximum number of packets occurs when the CPU is fully utilized, i.e.,
when CPU utilization is 1 (= 100%). Thus, we compute the maximum number
of packets per second as follows.
N =
1(cid:3)
t=1(Ct × Pt)
4
(2)
Though the ﬁnal equation that lies at the heart of our model may appear
simple, note that the simplicity of the model stems from our experimental ob-
servations, before which how to estimate a ﬁrewall’s performance was unclear.
For example, the facts that packet size and number of concurrent sessions have