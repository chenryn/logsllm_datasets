title:The Peril of Fragmentation: Security Hazards in Android Device Driver
Customizations
author:Xiao-yong Zhou and
Yeonjoon Lee and
Nan Zhang and
Muhammad Naveed and
XiaoFeng Wang
2014 IEEE Symposium on Security and Privacy
The Peril of Fragmentation: Security Hazards in
Android Device Driver Customizations
Xiaoyong Zhou∗, Yeonjoon Lee∗, Nan Zhang∗, Muhammad Naveed† and XiaoFeng Wang∗
∗School of Informatics and Computing
Email: {zhou, yl52, nz3, xw7}@indiana.edu
Indiana University, Bloomington
†Department of Computer Science
University of Illinois at Urbana-Champaign
Email: PI:EMAIL
Abstract—Android phone manufacturers are under the per-
petual pressure to move quickly on their new models, continu-
ously customizing Android to ﬁt their hardware. However, the
security implications of this practice are less known, particularly
when it comes to the changes made to Android’s Linux device
drivers, e.g., those for camera, GPS, NFC etc. In this paper, we
report the ﬁrst study aimed at a better understanding of the
security risks in this customization process. Our study is based
on ADDICTED, a new tool we built for automatically detecting
some types of ﬂaws in customized driver protection. Speciﬁcally,
on a customized phone, ADDICTED performs dynamic analysis
to correlate the operations on a security-sensitive device to its
related Linux ﬁles, and then determines whether those ﬁles are
under-protected on the Linux layer by comparing them with
their counterparts on an ofﬁcial Android OS. In this way, we
can detect a set of likely security ﬂaws on the phone. Using the
tool, we analyzed three popular phones from Samsung, identiﬁed
their likely ﬂaws and built end-to-end attacks that allow an
unprivileged app to take pictures and screenshots, and even log
the keys the user enters through touchscreen. Some of those
ﬂaws are found to exist on over a hundred phone models and
affect millions of users. We reported the ﬂaws and helped the
manufacturers ﬁx those problems. We further studied the security
settings of device ﬁles on 2423 factory images from major phone
manufacturers, discovered over 1,000 vulnerable images and also
gained insights about how they are distributed across different
Android versions, carriers and countries.
I.
INTRODUCTION
The Linux-based open source Android platform has grown
into the mainstay of mobile computing, attracting most phone
manufacturers, carriers as well as millions of developers to
build their services and applications (app for short) upon it.
Up to August 2013, Android has dominated global smartphone
shipments with nearly 80% market share [8]. Such success,
however, does not come without any cost. The openness of the
system allows the manufacturers and carriers to alter it at will,
making arbitrary customizations to ﬁt the OS to their hardware
and distinguish their services from what their competitors offer.
Further complicating this situation is the fast pace with which
the Android Open Source Project (AOSP) upgrades its OS
versions. Since 2009, 19 ofﬁcial Android versions have been
released. Most of them have been heavily customized, which
results in tens of thousands of customized Android branches
coexisting on billions of mobile phones around the world. This
fragmented ecosystem not only makes development and testing
of new apps across different phones a challenge, but it also
brings in a plethora of security risks when vendors and carriers
enrich the system’s functionalities without fully understanding
the security implications of the changes they make.
Security risks in customizations. For each new Android ver-
sion, Google ﬁrst releases it to mobile phone vendors, allowing
them to add their apps, device drivers and other new features
to their corresponding Android branches. Such customizations,
if not carefully done, could bring in implementation errors,
including those with serious security consequences. Indeed,
recent studies show that many pre-loaded apps on those images
are vulnerable, leaking system capabilities or sensitive user
information to unauthorized parties [43]. The security risks
here, however, go much deeper than those on the app layer,
as what have been customized by vendors are way beyond
apps. Particularly, they almost always need to modify a few
device drivers (e.g., for camera, audio, etc.) and related system
settings to support their hardware. In our research, we found
that most customizations on the Android kernel
layer are
actually related to those devices (Section II-B), and they
are extremely error-prone, due to the complexity of Android
architecture and the security mechanism built upon it.
Android is a layered system, with its app layer and
framework layer built with Java sitting on top of a set of C
libraries and the Linux kernel. Device drivers work on the
Linux layer and communicate with Android users through
framework services such as Location Service and Media Ser-
vice. Therefore, any customization on an Android device needs
to make sure that it remains well protected at both the Linux
and framework layers, a task that can be hard to accomplish
within the small time window the vendors have to develop their
own OS version. Any lapses in safeguarding these devices can
have devastating consequences, giving a malicious app access
to sensitive user information (e.g., photos, audio, location,
etc.) and critical services they provide (e.g., GPS navigation).
However, with the complexity of Android’s layered system
architecture and limited device-related documentations avail-
able in the wild, so far, little has been done to understand the
security risks in such device customizations, not to mention
any effort that helps detect the threats they may pose.
Flaw detection. In this paper, we report the ﬁrst systematic
study on the security hazards in Android device customiza-
tions. Before we go to the details of this research, a few
terms used throughout the paper are explained in Table I. Our
© 2014, Xiaoyong Zhou. Under license to IEEE.
DOI 10.1109/SP.2014.33
409
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:07 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I.
TERMINOLOGIES IN THIS PAPER
Term
Phone
Device
Device node or device ﬁle
Device-related ﬁle
Semantic
Mobile phone, e.g., Nexus 4, Samsung Galaxy SII.
Here we avoid using “device” to refer to phone.
Hardware on the phone, e.g., camera, GPS.
An
interface
driver,
/dev/null.
Files related to device operations, including device
nodes and other ﬁles such as logs.
device
e.g.,
for
a
study is based upon an automatic tool, ADDICTED, which
we designed to detect such customization hazards. The high-
level idea is to automatically identify the Linux ﬁles related to
the operations on the devices (e.g., phone’s camera) Android
intends to protect, and compare the levels of protection (in
terms of Linux ﬁle permissions) for the individual ﬁles on
a vendor’s version with those on the corresponding AOSP
version (called a reference in our research1). The rationale here
is that a Linux ﬁle related to a security-critical device operation
on the customized Android should not be less protected than
its counterpart on the reference. Otherwise, it can lead to a
security hazard. For example, we do not expect that the device
node (see Table I) for camera on the Samsung Galaxy SII is set
publicly readable and writable (a Linux permission of 666),
while its counterpart on Android 4.0.4 is accessible only by
system:camera user group (660). Actually, even if we do
not know the semantic of the ﬁle (i.e., the camera node), the
presence of the discrepancy in its Linux permission settings
across the two OSes, together with its relation with a dangerous
Android permission on devices (camera access), is sufﬁciently
alarming to justify a close attention.
To implement
this idea, we built
into ADDICTED a
component called Device Miner
that dynamically maps
permission-protected device operations (through APIs such
as Camera.startPreview()) on the Android framework
layer to their related ﬁles on the Linux layer. This requires
monitoring the way Android processes device-related service
requests across multiple layers (framework, libraries, Linux
and even hardware) over different phones, in the presence of
complicated event and call-back mechanisms, which cannot be
handled by existing techniques [26, 44]. Our design addresses
these technical challenges with a simple differential analysis
over the system call traces (recorded by strace [16]) with
and without a speciﬁc device-related operation. Device Miner
can further ﬁngerprint a device node with a set of system
calls involving the ﬁle and their parameters. The ﬁngerprint
serves to correlate device-related ﬁles on a customized phone
to those on its reference (the Nexus reference), even when they
have different names and are under different Linux groups.
Over such correlation information identiﬁed by Device Miner,
another component, Risk Identiﬁer, detects likely customization
ﬂaws (LCFs, i.e., a downgrade of the Linux protection level of
a customized device-related ﬁle) through the aforementioned
comparison (between the customized phone and its Nexus
reference).
We evaluated ADDICTED on a Google Nexus 4 with 4.2
and 4.3 and Samsung customized Android on Galaxy SII,
ACE 3 and GRAND. Our analysis discovered 4 LCFs across
those phones: oftentimes, device nodes that are supposed to
1In our research, we actually used Google’s customization of AOSP (for
Nexus phones) as the reference, as Google’s version closely follows the
original AOSP OS with minimum changes being made.
410
be protected to the system level have been exposed to the
public on the Linux layer; examples include input, camera
and frame buffer. We further conducted a case study
on three discovered LCFs and constructed end-to-end attacks
in which we take pictures and screenshots, and read touch-
screen coordinates on the phones without requesting relevant
Android permissions. As a prominent example, our analysis
found that on Samsung Galaxy SII, camera device node has
been made publicly accessible. To demonstrate the devastating
consequences once this vulnerability is exploited, we built a
carefully drafted attack app that directly commands the camera
driver to take pictures without being noticed by the phone
user, even when it does not have the permission to do so. This
problem affects over 40 million Galaxy SII users alone [12].
We reported our ﬁndings to Samsung, who acknowledged the
importance of this research and our ﬁndings. We are now
working with them to ﬁx those problems. Video demos of our
attacks can be found online [1].
Large-scale measurement. To understand the scope and mag-
nitude of such security hazards in device customizations, we
further scanned over 2423 factory images from Samsung, LG
and HTC for LCFs, through searching for the device-related
ﬁles on those images using the ﬁle names from AOSP images,
and inspecting the levels of their Linux-layer permission
protection. This large-scale measurement study led to the
discovery of 1290 problematic images and hundreds of under-
protected devices. It also yields several new interesting ﬁndings
not known before. For example, we found that most device-
related LCFs on Samsung Galaxy SII have never been ﬁxed,
even though its operating system was upgraded from 4.0, to
4.1 and later to 4.2. As another example, our research shows
that the customizations to the smartphones distributed in China
and Brazil have more potential security ﬂaws than those sold
in North America. We also measured the LCFs discovered on
different carriers’ customized phones and identiﬁed the most
vulnerable ones.
Contributions. We summarize the contributions of the paper
as follows:
•
•
New techniques. We developed a new technique that
made the ﬁrst step towards automated discovery of
security-critical vulnerabilities introduced during An-
droid device customization. The technique leverages
system-call level information to link the device opera-
tions protected by Android permissions to their related
Linux ﬁles, and a simple differential analysis to detect
the potential customization ﬂaws in those ﬁles’ pro-
tection. Our approach helps discovery of previously-
unknown critical security ﬂaws in real-world mobile
systems, which affect millions of smartphone users.
New ﬁndings. We performed the ﬁrst large-scale mea-
surement study on the security implications of An-
droid device customizations. Our research reveals a
large number of potential security ﬂaws within hun-
dreds of customized images, and sheds light on a
few important issues such as how such security risks
are distributed across different countries, carriers and
Android versions.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:07 UTC from IEEE Xplore.  Restrictions apply. 
Roadmap. The rest of the paper is organized as follows:
Section II introduces the background of Android vendor cus-
tomization and a study we performed to understand the layers
of Android most heavily customized; Section III presents the
design and implementation of ADDICTED; Section IV de-
scribes a case study in which we analyzed customized devices
using ADDICTED and discovered high-impact security ﬂaws;
Section V reports our large-scale measurement study on the
security ﬂaws in device customizations; Section VI discusses
the limitation of the work and potential future research;
Section VII reviews the related research and Section VIII
concludes the paper.
II. VENDOR CUSTOMIZATIONS ON ANDROID
In this section, we provide some backgrounds for our
research and elaborate a study that helps to understand the
way Android is customized by different vendors.
A. Background
Android architecture and security model. As discussed
before, Android has a hierarchical architecture. On top of
the stack are various Android apps, including those from the
system (e.g., contacts, phone, browser, etc.) and those provided
by third parties. Supporting these apps are the services running
on the framework layer, such as Activity Manager, Content
Providers, Package Manager, Telephone Manager and others.
Those services mediate individual apps’ interactions with the
system and enforce security policies when necessary. The nuts
and bolts for them come from Android C libraries, e.g., SSL,
Bionic, Webkit, etc. Underneath this layer is the Linux kernel,
which is ultimately responsible for security protection.
The Android security model is built upon Linux user and
process protection. Each app is given a unique user ID (UID)
and by default, only allowed to touch the resources within its
own sandbox. Access to system resources requires permissions,
which an app can ask for at the time of installation. Decisions
on granting those permissions are made either by the system
through checking the app’s signatures or by the user. When
some permissions are given to an app, it is assigned to a
Linux group corresponding to the permission such as gps.
Resources on Android typically need to be protected on both
the framework layer and the Linux layer: the former checks
an app’s permissions and the latter is expected to enforce
security policies consistent with those on the framework layer
to mediate the access to the resources.
Vendor customization. Android is an open system. Google
releases the AOSP versions as baselines and different manu-
facturers (e.g, Samsung, HTC etc.) and carriers (e.g., AT&T,
Verizon etc.) are free to tailor it to their hardware and add new
apps and functionalities. Most of these Android versions from
the vendors have been heavily customized. For example, prior
research [43] shows that among all the apps pre-installed by
the major smartphone vendors (Samsung, HTC, LG, Sony)
on their phones, only about 18% come from AOSP, and
the rest are either provided by the vendors (about 65%) or
grabbed from third parties (17%). Under the current business
model, those vendors have a small time-window of about 6
months to customize the ofﬁcial version. This brings in a
lot of security issues: it has been reported that over 60% of
the app vulnerabilities found in a study come from vendor
customizations [43].
The primary reason for vendors to customize Android
is to make it work on their hardware. Therefore, the most
heavy-lifting part of their customization venture is always
ﬁtting new device drivers to the AOSP baseline. This is a
delicate operation from the security viewpoint: not only should
those new drivers be well connected to their corresponding
framework layer services, so that they can serve apps and
are still protected by permissions, but they also need to be
properly guarded on the Linux layer. Further complicating the
situation is the observation that a new device may require its
driver to talk to other existing drivers. The problem here is
that the latter’s permission settings on AOSP could block such
communication. When this happens, the vendor has to change
the driver’s security settings on Linux to accommodate the
new driver. An example is the camera device on Galaxy SII
that needs to use the UMP driver to allocate memory; for this
purpose, Samsung made UMP publicly accessible. So far, the
security implications of this customization are unclear.
Android Linux devices. Android inherits the way Linux man-
ages its device drivers and related ﬁles, in which both block
devices (e.g., ﬂash drives) and stream devices (e.g., virtual
terminals) are placed under /dev. Other devices like network
devices are placed under other directories (e.g., /sys). In
addition to those standard devices, Android further introduces
a plethora of new devices, such as camera, accelerometer,
GPS, etc., whose proper levels of security protection on
the Linux layer have never been made public. These new
devices have been heavily customized by vendors, who also
bring in an array of perplexing device-related ﬁles for their
new hardware pieces like CPU, graphic device, etc. Some of
such devices are security-critical, which are protected under
Android permissions or not even made available to apps such
as /dev/graphic/fb0.
Those devices,
if inadequately protected, can allow an
unauthorized app to get access to sensitive user data (e.g.,
locations, conversations, etc.) or critical system capabilities
(e.g., taking pictures). However, it is challenging to ﬁnd out
whether they are guarded to the level expected, as simply
correlating devices to their device nodes under /dev (or
/sys) can be hard. Except a few standard Linux devices,
Android never provides any documentation to explain the
device-related ﬁles under those directories. Different vendors
further add their customized device nodes, arbitrarily change