title:Automated Synthesis of Run-time Monitors to Enforce Authorization
Policies in Business Processes
author:Clara Bertolissi and
Daniel Ricardo dos Santos and
Silvio Ranise
Automated Synthesis of Run-time Monitors to Enforce
Authorization Policies in Business Processes∗
Clara Bertolissi
Fondazione Bruno Kessler
University of Marseille
clara.bertolissi@lif.univ-
mrs.fr
Daniel Ricardo dos
Santos
Fondazione Bruno Kessler
SAP Labs France
University of Trento
PI:EMAIL
Fondazione Bruno Kessler
Silvio Ranise
PI:EMAIL
ABSTRACT
Run-time monitors are crucial to the development of
security-aware workﬂow management systems, which need
to mediate access to their resources by enforcing authoriza-
tion policies and constraints, such as Separation of Duty.
In this paper, we introduce a precise technique to synthe-
size run-time monitors capable of ensuring the successful
termination of workﬂows while enforcing authorization poli-
cies and constraints. An extensive experimental evaluation
shows the scalability of our technique on the important class
of hierarchically speciﬁed security-sensitive workﬂows with
several hundreds of tasks.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection;
K.6.5 [Management of Computing and Information
Systems]: Security and Protection
Keywords
Run-time Enforcement, Workﬂow Satisﬁability
1.
INTRODUCTION
It is common that workﬂow management systems support
the execution of business processes. A workﬂow speciﬁes
a collection of tasks and the causal relationships between
them. The execution of tasks is initiated by humans or soft-
ware agents executing on their behalf. Security-related de-
pendencies are speciﬁed as additional constraints on the ex-
ecution of the various tasks. In an organization, a workﬂow
task is executed by a user who should be entitled to do so;
e.g., the teller of a bank may create a loan request whereas
∗This work was partly supported by the EU under grant
FP7-PEOPLE-SECENTIS and the RESTATE Programme,
co-funded by the European Union under the FP7 COFUND
Marie Curie Action—Grant agreement no. 267224.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS’15, April 14–17, 2015, Singapore.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3245-3/15/04 $15.00.
http://dx.doi.org/10.1145/2714576.2714633.
only a manager may accept it. Additional authorization con-
straints are usually imposed on task execution, such as Sep-
aration of Duty (SoD) or Bound of Duty (BoD) whereby two
distinct users or the same user, respectively, must execute
two tasks. Below, following [2], we call “security-sensitive”
this kind of workﬂows.
The Workﬂow Satisﬁability Problem (WSP) consists of
checking if there exists an assignment of users to tasks
such that a security-sensitive workﬂow successfully termi-
nates while satisfying all authorization constraints. Such a
problem has been studied in several papers; see, e.g., [27,
20]. The run-time version of the WSP consists of answer-
ing sequences of user requests at execution time and ensur-
ing successful termination together with the satisfaction of
authorization constraints. This problem has received less
attention and only an approximate solution is available [3,
4].
The main contribution of this paper is an automated
technique to synthesize run-time monitors capable of ensur-
ing the successful termination of workﬂows while enforcing
authorization policies and SoD/BoD constraints, thus solv-
ing the run-time version of the WSP. Changes in the autho-
rization policies can be accommodated without re-running
from scratch the approach. Section 2 illustrates the main
steps underlying the technique on a simple example. Sec-
tion 3 gives full details and states several theorems guaran-
teeing the correctness of the approach. Another contri-
bution of the paper is an extensive experimental evalua-
tion of the proposed technique on hierarchically structured
workﬂows, i.e. complex workﬂows that can be decomposed
in subﬂows. Section 4 describes a prototype implementation
of the technique and how the structure of hierarchic speciﬁ-
cations can be exploited to make our approach scale to large
workﬂow systems containing hundreds of tasks. Section 4.1
discusses the performances of our technique on two work-
ﬂow systems inspired by realistic use-cases while Section 4.2
studies its scalability on synthetic benchmarks inspired by
those in [12] containing up to 500 tasks. Our ﬁndings clearly
show the scalability of the proposed technique on hierarchic
workﬂows. Section 5 discusses related work and Section 6
concludes the paper by giving hints to future work.
2. A TRIP REQUEST EXAMPLE
We describe our approach to synthesize run-time moni-
tors for security-sensitive workﬂows on a trip request pro-
cess. The workﬂow is composed of ﬁve tasks—each one in-
dicated by a box labeled by Trip request (t1), Car rental
Figure 1: Workﬂow in extended BPM notation
(t2), Hotel booking (t3), Flight reservation (t4), and Trip
validation (t5)—whose execution is constrained as follows
(cf. solid arrows and diamonds labeled with +): t1 must be
executed ﬁrst, then t2, t3 and t4 can be executed in any or-
der, and when all have been performed, t5 can be executed,
thereby terminating the workﬂow. Additionally, each task
is executed under the responsibility of a user (indicated by
the small icon inside the boxes corresponding to the vari-
ous tasks) who has the right to execute it according to some
access control policy—not shown in Figure 1—and the ﬁve
authorization constraints depicted as dashed lines labeled by
the symbol (cid:54)= for Separation of Duty (SoD). So, for exam-
ple, the authorization constraint connecting the boxes of t1
and t2 requires the user executing t2 to be distinct from the
one that has executed t1, i.e. the user who requests the trip
cannot also rent a car.
Our goal is to synthesize a run-time monitor, capable of
ensuring that all execution and authorization constraints are
satisﬁed. Our approach is organized in two phases: oﬀ-line
and on-line.
Oﬀ-line. We ﬁrst construct a symbolic transition sys-
tem S whose executions correspond to those of the security-
sensitive workﬂow. Then, we use a symbolic model checker
to explore all possible terminating executions of the work-
ﬂow which satisfy both the causality and the authorization
constraints. We assume the model checker to be able to
return a symbolic representation R of the set of all states,
called reachable, encountered during the exploration of the
terminating executions of S. We use particular classes of for-
mulae in ﬁrst-order logic to be the symbolic representations
of S and R.
On-line. We derive a Datalog program M from the for-
mulae R, representing the set of states reachable in the ter-
minating executions of S and the policy P specifying which
user can perform which task. The Datalog program M de-
rived in this way is the monitor capable of guaranteeing that
any request of a user to execute a task is permitted by P ,
satisﬁes the authorization constraints (such as SoD), and the
workﬂow can terminate its execution.
We illustrate the two phases on the security-sensitive
workﬂow in Figure 1.
2.1 Off-line phase
First of all, we build the symbolic transition system S
in two steps:
(i) we adopt the standard approach (see,
e.g., [24]) of using (extensions of) Petri nets [19] to formalize
the semantics of workﬂows and (ii) we adapt the well-known
translation of Petri nets to symbolic transition systems (see,
e.g., [21]) to the class of extended Petri nets used in this
paper.
Figure 2: Workﬂow as an extended Petri net
Figure 2 shows the extended Petri net that can be auto-
matically derived from the BPM notation of Figure 1. Tasks
are modeled as transitions or events (the boxes in the ﬁg-
ure) whereas places (the circles in the ﬁgure) encode their
enabling conditions. At the beginning, there will be just one
token in place p0 which enables the execution of transition
t1. This corresponds to the execution constraint that task
t1 must be performed before all the others. The execution of
t1 removes the token in p0 and puts a token in p1, another
in p2, and yet another in p3; this enables the execution of
t2, t3, and t4. Indeed, this corresponds to the causality con-
straint that t2, t3, and t4 can be executed in any order after
t1 and before t5. In fact, the executions of t2, t3, and t4 re-
move the tokens in p1, p2, p3 and put a token in p4, p5, and
p6 which, in turn, enables the execution of t5. This removes
the token in p4, p5, p6 and put a token in p7 which enables
no more transitions. This corresponds to the fact that t5 is
the last task to be executed. The fact that there is at most
one token per place is an invariant of the Petri net. This
allows us to symbolically represent the net as follows: we
introduce a Boolean variable per place (named as the places
in Figure 2) together with a Boolean variable representing
the fact that a task has already been executed (denoted
by dt and if assigned to true implies that task t has been
executed). So, for instance, the enabling condition for the
execution constraint on task t1 can be expressed as p0∧¬dt1
meaning that the token is in place p0 and transition t1 has
not yet been executed. The eﬀect of executing transition t1
is to assign F (alse) to p0 and T (rue) to p1, p2, p3, and dt1;
in symbols, we write p0, p1, p2, p3, dt1 := F, T, T, T, T . The
other transitions are modeled similarly.
Besides the constraints on the execution of tasks, Figure 2
shows also the same authorization constraints of Figure 1.
These are obtained by taking into consideration both the
access control policy P granting or denying users the right
Table 1: Workﬂow as symbolic transition system
event
enabled
action
CF
t1(u) p0∧¬dt1
t2(u) p1∧¬dt2
t3(u) p2∧¬dt3
t4(u) p3∧¬dt4
t5(u) p4∧ p5∧
p6∧¬dt5
Auth
CF
at1(u)
at2(u) ∧ ¬ ht3(u)
∧ ¬ ht1(u)
at3(u) ∧ ¬ht2(u)
at4(u) ∧ ¬ht1(u)
at5(u) ∧ ¬ ht3(u)
∧ ¬ ht2(u)
p0, p1, p2, p3, dt1
:= F, T, T, T, T
p1, p4, dt2
:= F, T, T
p2, p5, dt3
:= F, T, T
p3, p6, dt4
:= F, T, T
p4, p5, p6, p7, dt5
:= F, F, F, T, T
Auth
ht1(u)
:= T
ht2(u)
:= T
ht3(u)
:= T
ht4(u)
:= T
ht5(u)
:= T
to execute tasks and the SoD constraints between pairs of
tasks. To formalize these, we introduce two functions at and
ht from users to Boolean, for each task t, which are such that
at(u) is true iﬀ u has the right to execute t according to the
policy P and ht(u) is true iﬀ u has executed task t. Notice
that at is a function that behaves as an abstract interface to
the policy P whereas ht is a function that evolves over time
and keeps track of which users have executed which tasks.
For instance, the enabling condition for the authorization
constraint on task t1 is simply at1(u), i.e. it is required that
the user u has the right to execute t1, and the eﬀect of its
execution is to record that u has executed t1, i.e. ht1(u) :=
T (notice that this assignment leaves unchanged the value
returned by ht1 for any user u(cid:48) distinct from u). Notice
that it is useless to take into account the SoD constraints