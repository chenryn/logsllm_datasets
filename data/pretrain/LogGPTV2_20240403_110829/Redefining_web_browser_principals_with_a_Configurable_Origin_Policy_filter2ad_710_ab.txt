same SOP origin a.com, which is posted by the attacker. The
browser only checks the SOP origin ()
of G2 that is the same as G1 and thus the attack succeeds.
Secondly, there is a mismatch between a merged principal
and its origin. For example, when Principal A from malicious.
com is merged with another Principal B from connect.com
by Object Views [12] or a similar approach built on top of
postMessage to achieve full transparent object access, the
merged principal AB actually represents both malicious.com
and connect.com. However, AB does not have a new origin
to represent its new property, which leads to origin spooﬁng
attacks and privilege escalation.
A concrete example of origin spooﬁng attacks is shown
in Figure 1. In a merged principal of A (connect.com) and
B (malicious.com), A can ask B to send a cross-origin re-
quest with the origin connect.com to a third party server,
say benign.com. Benign.com cannot recognize the request
is actually from a merged principal AB consisted of both
malicious.com and connect.com, since servers only check ori-
gin header or referer header for a cross-origin AJAX request.
In addition, other than origin spooﬁng attacks, the mis-
match between a merged principal and its origin also leads
to privilege escalation. Suppose frame A from facebook.com
is merged with frame B from yelp.com. Then, B can access
localStorage of the entire facebook.com domain, although B
just wants to have full access to the speciﬁc frame, A.
2) Heavyweight-ness: In order to have the same ﬂexibility
as COP, all the additions have to be deployed upon current
browser. The overhead is accumulated together. In particu-
lar, when two principals completely trust each other, e.g.,
ads.cnn.com and www.cnn.com, merging such two principals
by a JavaScript library built upon postMessage channel [12]
is heavyweight. We illustrate the performance degradation
from two aspects, namely, in object access, and in merging
more than two principals.
First, object accesses in two principals merged by tech-
niques like Object Views are two times slower than native
DOM accesses even with native JSON support [12]. That
is due to that objects are serialized into JSON representa-
tion, transmitted through postMessage channel, and ﬁnally
de-serialized back to objects.
Secondly, the performance decreases when the number of
merged principals increases. For example, a principal from
Twitter needs to join another principal merged from Yelp and
Facebook. The Twitter principal needs to check and merge
with both original principals separately with two postMessage
channels. This becomes a serious scalability problem as the
number of sites that want to communicate grows.
3) Insecurity: The usage of document.domain disobeys
the least-privilege principle and can be insecure, as shown
by Singh et al. [1]. Instead of document.domain, as shown in
Object View [12] and Gazelle [21], web sites can use libraries
over postMessage to facilitate communication. However, the
authentication process through postMessage is often not used
correctly even on popular web sites from reputable vendors,
including Facebook Connect [23] and Google Friend Connect
[24], as shown by Hanna et al [25].
C. Non-SOP Origin
As discussed in Section II-B1, additions to SOP are fun-
damentally inconsistent with SOP. In this section, we intro-
duce previous attempts of deﬁning non-SOP origins.
1) Finer-grained Label - (SOP + Something): A simple
way of deﬁning a non-SOP origin is to use SOP plus some-
thing. Current HTML5 speciﬁcation [18] deﬁnes an origin as
. In history, there
are several ways to deﬁne optional extra data, such as path
[26]–[28], public key infrastructure [29, 30], ring [31], and
capability [32].
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:53:23 UTC from IEEE Xplore.  Restrictions apply. 
a.com
a.com
Partition 
a Small 
Portion 
inside
Assign the value 
of originID
URL request 
with empty 
originID
Server
Client
Principal with 
empty originID
originID
(OID1)
&path
originID
(OID1)
(a) Creation of Principal 
from Scratch
Fig. 3. Creation of Principal.
Principal with 
Principal 
Principal 
with originID
with originID
Two Principals 
with different 
and PSL
and PSL
originID and the 
(b) Creation of Principal 
from Another Principal
same PSL
Limitations of Finer-grained Label. Labeling principals by
ﬁner-grained labels (  ) has the following inﬂexibility.
• Lack of Support for Merged Origins.  cannot represent merged origins. For
example, a ﬁner-grained origin cannot represent a principal
merged by frame A from a.com and frame B from b.com
through postMessage channel.
• Lack of Client-side Creation. Host and port in SOP triple
are deﬁned by web servers. When client browsers need
to create a new origin for an iframe, they have to send
a request to the server and wait for the round-trip delay.
Furthermore, in ofﬂine mode that is often supported by
many modern web applications, servers are not reachable
to assign new origins.
2) Veriﬁable Origin Policy - Not a New Label: MashupOS
[2] proposes a new origin policy called the veriﬁable origin
policy (VOP). “A site may request information from any other
site, and the responder can check the origin of the request to
decide how to respond.” This is a great proposal that is also
adopted in COP.
However, regardless of name similarity, VOP is orthog-
onal to either SOP or COP. In both SOP and COP, a web
site needs to check the origin (SOP origin or COP origin) of
the request from the client browser. VOP does not deﬁne a
new label (origin) but instead stress the fact that origin needs
to be checked at server side. In particular, MashupOS cannot
merge two principals at client side, like in Facebook Connect
[23] case and sub-domain communication.
III. DESIGN
A. Concepts in COP
Conﬁgurable Origin Policy (COP) abandons SOP, disal-
lows document.domain, and adopts a new origin policy. COP
requires small modiﬁcations on both the client browsers and
the server, as shown in Sections IV and VI-A. Yet, COP is
compatible with both legacy browsers and legacy web servers
as demonstrated in Section IV-E. In this section, we proceed
to introduce several concepts fundamental to COP.
Resources. Resources represent contents inside client side
browsers and web servers. Examples of resources from the
server are HTML ﬁles, images, script ﬁles, etc. Examples of
resources from the client are display, geolocation, and so on.
Resources may be processed to generate further resources.
For example, DOM is produced by rendering HTML ﬁles
and modiﬁed by JavaScript code.
Principals. The concept of a principal, as borrowed from
operating systems, in the context of web browsers is well
discussed in previous work [2, 21]. It is an isolated security
container of resources inside the client browser. Resources
inside one principal are trusted by the principal itself. Re-
sources outside principal X are not trusted by principal X
but are trusted by the principal that the resources belong to.
A principal is the atomic trustable unit in the browser.
We extend this concept in COP, where a principal is an
abstract container that includes certain resources from both
clients and servers with certain properties. A COP principal
contains two parts, one on the server and the other on the
client. The server-side’s part of the COP principal is a worker,
a thread or a process or a part of it, which serves the client.
The client-side’s part of the COP principal is what comprises
a typical deﬁnition of a principal in a browser, an isolated
container that is used to deal with contents from the server.
For the rest of the paper, “principal” will refer to the COP
principal in general.
Origins. An origin is deﬁned as a label of a principal. Two
principals that share the same origin will share everything
between each other, which means they are essentially one
principal. Two principals with different origins are isolated
from each other. They can only communicate with each other
through a well-protected channel.
OriginID. An originID is a private randomly-generated
identiﬁer used to annotate the origin of a principal. The
originID is only known by the principal who owns it. Other
principals cannot acquire the originID of principal X unless
being told by principal X itself. In this sense, an originID is a
capability to manipulate the principal it represents. OriginIDs
are made arbitrarily hard to guess.
There are three reserved values of originIDs: empty, de-
fault, and secret. (i) The empty as a value of originID, spec-
iﬁed by the client browser only, denotes a principal not asso-
ciated with any content (hence the adjective empty). And the
server will assign a value for the originID of such a principal.
(ii) The default as a value of originID, denotes it is the same
as the originID in current principal (both clients and server
side included). (iii) The secret as a value of originID, denotes
that the value of current principal’s originID is not revealed
by the owner.
Each resource in a principal will be labeled by an orig-
inID. With the originID, the client-side browser will decide
in which principal to render the resource.
PublicID. A publicID provides a public identiﬁer for a princi-
pal using which other principals can address this principal. It
does not act as a capability like the originID to manipulate the
principal it identiﬁes. The publicID is designed to be publicly
known. The browser maintains a table of correspondence of
originIDs and publicIDs.
Principal’s Server List (PSL). For each principal, the prin-
cipal’s server list (PSL), visible1 to the users, is a list main-
tained by the browser to record all the servers or part of them
1One can adopt similar approaches in making the status of HTTPs
certiﬁcate more noticeable by users for PSL.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:53:23 UTC from IEEE Xplore.  Restrictions apply. 
a.com
b.com
Server
c.com
a.com
b.com
c.com
d.com
originID=1
originID=1
originID=2
originID=3
originID=4
Principal 
Principal 
Principal 
Client
A
B
SOP 
C
Principal A
Principal B
Principal C
Principal D
COP
Fig. 2. Content-to-Principal Mapping in SOP vs. in COP (COP’s core idea, and originID is simpliﬁed for easy understanding).
Content with the same originID 
PSL: http://a.com/;
and path (/ by default)
http://b.com/
Content with 
default originID
PSL: http://a.com/
Case 1
Case 2
a.com
originID 
and PSL
b.com
Server
Client
Reject
Case 3
external 
content
PSL: http://a.com/
Principal 2
Step One
Step Two
Step Three
(a) Request Another Web Site for Joining its Principal
a.com
secret
originID 
b.com
Case 1
Server
Client
Content with 
default originID
PSL: http://a.com/
external 
content
Step One
Case 2 Reject
Step Two
Step Three
(b) Request Another Web Site for Joining without Revealing originID
PSL: http://a.com/; http://b.com/
a.com
b.com
Can I join?
Case 1
Server
Client
Yes, 
send originID
PSL: 
http://a.com/ PSL: http://b.com/
msg through
postMessage
channel
Step One
Case 2
No.
(c) Join Another Web Site’s Principal
Step Two
Step Three
Fig. 4.
of other principals through clients not directly from other servers).
Joining another Principal (notice that one server acquires originIDs
that are involved in current principal by operations described
later in Section III-C. Each server in the list is represented
in the format of . For example,
http : //www.a.com/part1 denotes that all the resources
and sub-directories under part1 of http : //www.a.com are
participating in current principal. By default, in order to align
with SOP, if not speciﬁed by the server, the default path will
be /, denoting that the PSL includes the whole SOP origin.
Note that PSL, which varies according to participated
servers or part of them, is a list showing a principal’s property,
but not an access control list.
B. Conﬁgurable Origin Policy (COP)
With all these deﬁnitions, we can deﬁne our new origin