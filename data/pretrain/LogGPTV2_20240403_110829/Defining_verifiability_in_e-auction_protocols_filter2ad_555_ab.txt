– he actually submitted the winning bid,
– the ﬁnal price is correctly computed,
– all other bids originated from bidders, and
– no bid was modiﬁed.
Together, these veriﬁcation checks ensure that the win-
ning bidder is indeed the correct winner, for the cor-
rect price. Moreover, the last two checks ensure that
the auction process was only inﬂuenced by legitimate
bidders – neither seller nor auctioneer inﬂuenced the
process.
• The seller wants to verify that:
– the announced winner is correct, and
– the winning price is correct,
in particular if the outcome of the auction was not
determined publicly (e.g. privately by the auctioneer,
or using distributed computations among the bidders).
To execute these veriﬁcations, we introduce the notion of
Veriﬁcation Tests.
We deﬁne a Veriﬁcation Test as an eﬃcient terminating
algorithm that takes as input the data visible to a partici-
pant of an auction protocol and returns a Boolean value.
We deliberately do not specify more details at this point
as they will depend on the underlying protocol model. Such
a test could be a logical formula (whose size is polynomial in
the input) in a symbolic model or a polynomial-time Turing-
machine in a computational model. Obviously there can
be diﬀerent tests for diﬀerent participants (e.g. for bidders
and the seller), since they may have diﬀerent views of the
protocol execution.
We deﬁne veriﬁability as follows.
Definition 2
(Verifiability - 1st-Price Auctions).
An auction protocol (B, S, L, getPrice, isReg, win, winBid )
ensures Veriﬁability if we have Veriﬁcation Tests rv s, rv w,
ovl, ovw, ovs respecting the following soundness conditions:
1. Registration and Integrity Veriﬁability (RV):
• Anyone can verify that all bids on the list were
submitted by registered bidders:
rv s = true =⇒ ∀b ∈ L : isReg(b) = true
• Anyone can verify that the winning bid is one of
the submitted bids:
rv w = true =⇒ winBid ∈ Indices(L)
2. Outcome Veriﬁability (OV):
• A losing bidder can verify that his bid was not the
winning bid:
ovl = true =⇒ myBid (cid:54)= win(getPrice(L))
• A winning bidder can verify that his bid was the
winning bid:
ovw = true =⇒ myBid = win(getPrice(L))
• The seller can verify that the winning bid is actu-
ally the highest submitted bid:
ovs = true =⇒ winBid = win(getPrice(L))
as well as the following completeness condition:
• If all participants follow the protocol correctly, the above
tests succeed (i.e., the implications hold in the opposite
direction, ⇐=, as well).
where – with abuse of notation – we write getPrice(L) for
getPrice(L[1]), . . ., getPrice(L[n]).
Consider the perspective of a losing bidder: He can verify
that his bid was not the winning bid (ovl), and that the
winning bid was among the ones submitted by registered
bidders, which were also not modiﬁed (rv s and rv w). Sim-
ilarly a winning bidder can check that his bid was actually
the winning bid (ovw), and that the other bids were sub-
mitted by other bidders and not modiﬁed (rv s). Lastly, the
seller can also check that the bids using for computing the
winner were submitted only by registered bidders (rv s and
rv w), and that the outcome was correct (ovs). Hence these
tests cover all the veriﬁcations discussed above.
In the case of soundness, we require the conditions to hold
even in the presence of malicious participants (since the tests
should check if they did their work correctly), whereas in the
case of completeness we only consider honest participants.
This is necessary as otherwise e.g. a dishonest auctioneer
could announce the correct result, but publish incorrect evi-
dence. Hence the veriﬁcation tests fail although the outcome
is correct, but this acceptable since the auctioneer did not
“work correctly” in the sense that he deviated from the pro-
tocol speciﬁcation.
Deﬁnition 2 can be applied to sealed-bid auctions, where
all bids are submitted in a private way, as well as English
auctions, where the price increases with each publicly an-
nounced bid. These latter are veriﬁed by applying the veri-
ﬁcation tests after each price increase.
Example.
Consider a simple auction system where all bidders pub-
lish their (not encrypted and not signed) bids on a bulletin
board, and at the end of the bidding phase the auctioneer
announces the winner.
In this case there is a simple test
for rv w: anyone can simply test if the winning bid is one of
published ones. However there is no test for rv s since bids
are not authenticated.
If we require bidders to sign their
bids before publishing them, we also have a simple test for
rv s: verifying the signatures.
It is clear that we have simple tests for ovl, ovw and ovs
since everybody can compute the winner on the public list
of unencrypted bids. This however means that the protocol
ensures no privacy, and no fairness since a bidder can chose
his price depending on the previously submitted bids. If we
add encryption for the bids to address this shortcoming, the
situation becomes more complex and the auctioneer has to
prove that he actually computed the winner correctly, for
example using zero-knowledge proofs.
3.2 Other Types of Auctions
Our deﬁnition can be extended to other auctions, includ-
ing second-price auctions, more general (M + 1)st-price auc-
tions, and even bulk-good auctions that have multiple win-
ners at diﬀerent prices. The price in these types of auctions
may also depend on the other submitted bids – not only on
the winning bid. To deal with this, we enrich our model of
an auction protocol with a type Price. The function win
now returns lists of winners and prices win : List(Bid ) (cid:55)→
List(Index ) × List(Price). We also assume that there are
two variables winPrice and myPrice instantiated as the an-
nounced list of winning prices and the price announced to
a winning bidder respectively. Similarly winBid is now in-
stantiated as a list of indices of bids.
For such auctions, registration veriﬁability does not change,
but winner(s) and seller also want to verify the price they
pay to prevent a malicious party from increasing price(s).
Definition 3
(Generalized Verifiability). An auc-
tion protocol (B, S, L, getPrice, isReg, win, winBid , winPrice)
ensures Veriﬁability if we have Veriﬁcation Tests rv s, rv w,
ovl, ovw, ovs respecting the following conditions:
1. Soundness:
(a) Registration and Integrity Veriﬁability (RV):
• Anyone can verify that all bids on the list
were submitted by registered bidders:
rv s = true =⇒ ∀b ∈ L : isReg(b) = true
• Anyone can verify that the winning bids are
among the submitted bids:
rv w = true =⇒
∀b ∈ winBid : b ∈ Indices(L)
(b) Outcome Veriﬁability (OV):
Let (indexes, prices) = win(getPrice(L)).
• A losing bidder can verify that his bid was not
the winning bids:
ovl = true =⇒ myBid /∈ indexes
• A winning bidder can verify that his bid was
among the winning bids, and that his price is
correct:
ovw = true =⇒ ∃i : (myBid = indexes[i]
∧ myPrice = prices[i])
• The seller can verify that the list of winners
and the winning prices are correctly deter-
mined:
ovs = true =⇒
(winBid = indexes ∧ winPrice = prices)
2. Completeness: If all participants follow the protocol
correctly, the above tests succeed (i.e., the implications
hold in the opposite direction, ⇐=, as well).
where – with abuse of notation – we write getPrice(L) for
getPrice(L[1]), . . ., getPrice(L[n]). Diﬀerences to Def. 2 are
marked in bold.
Note that e.g.
in the case of a second-price auction ver-
ifying the price, for example in test ovw, may implicitly
include some more registration veriﬁcation, namely check-
ing that the second-highest bid was actually submitted by
a bidder. Otherwise a malicious seller could add a higher
second-highest bid or manipulate the existing one to achieve
a higher selling price. This is however included in our model
as the function win only works on the list L, hence adding
another bid later on to manipulate the bidding price violates
the test, and adding or manipulating a bid in L violates rv s.
4. CASE STUDIES
In this section, we discuss two case studies: The protocols
by Curtis et al. [6] and Brandt [3].
4.1 Protocol by Curtis et al. [6]
The protocol by Curtis et al. [6] was designed to support
any type of sealed-bid auction while guaranteeing fairness,
privacy, veriﬁability and non-repudiation.
Informal Description
4.1.1
The main idea of the protocol is the following: using a
public-key infrastructure (PKI), the bidders register with a
trusted Registration Authority (RA), who issues pseudonyms
that will then be used for submitting bids to the Seller (S).
The seller eventually receives all bids in clear and can hence
apply any possible win function. However, he can only link
bids to pseudonyms, not to bidders. The protocol is split
into three phases: Registration, Bidding, and Winner deter-
mination.
• Registration: Each bidder sends his identity, a hash of
his bidding price bi and a signature of h(bi) to the RA.
The RA checks the identity and the signature using the
PKI, and replies with an encrypted and signed message
containing a newly generated pseudonym p and the
hashed bid h(bi).
• Bidding: The RA generates a new symmetric key k.
Each bidder will send c = EncpkS (bi), his bid bi en-
crypted with the seller’s public key, and a signature of
c, together with his pseudonym to the RA. The RA
will reply with a signature on c, and encrypts the bid-
ders message, together with the hashed bid h(bi) from
phase one, using the symmetric key k. This encrypted
message is then send to the seller.
• Winner determination: After all bids have been sub-
mitted, the RA will reveal the symmetric key k to the
seller. The seller can then decrypt the bids, verify the
correctness of the hash and determine the winner. To
identify the winner using the pseudonym he can ask
the RA to reveal the true identity.
4.1.2 Formal Model
We have the set of bidders B and a seller S. We do not
need to specify the type of bids Bid since the protocol sup-
ports any type of bids. The bids are published when the
auctioneer reveals the symmetric key, i.e. L contains bids of
the following type: (P seudo × P Enc(Bid ) × Hash), where
P seudo is the type of pseudonyms, P Enc is a public-key en-
cryption and Hash are hash values. The function getPrice
will simply decrypt the encrypted bid (the second entry of
the tuple). The function isReg will return true if and only
if the hash value is correct, the pseudonym was actually at-
tributed by the RA and the bid was submitted correctly
signed by the bidder with this pseudonym. The protocol is
independent of the used auction mechanism and hence does
not deﬁne win. The seller will simply decrypt all bids and
can then apply any function win. He will publish the win-
ning price and the winning bidders pseudonym, and winBid
will denote the index of the bid containing this pseudonym.
4.1.3 Analysis
Since the seller does the winner determination on his own,
there is a simple test for ovs: He can check his own compu-
tations. As the computation of the winner is not speciﬁed
in order to support any type of auction, we cannot give tests
for ovl and ovw – they would have to be designed as a func-
tion of the used auction algorithm. Yet there is also a test
for rv w: Checking if the pseudonym appears in the list of
bids.
However, the messages from the RA to the seller are not
authenticated, hence there can be no suitable tests for rv s
once the (encrypted) bids are revealed. Even if they were