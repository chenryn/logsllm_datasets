### Security and Code Quality Analysis of the Diebold AccuVote-TS Voting System

#### A. Code Documentation
The codebase for the Diebold AccuVote-TS voting system is poorly documented, which hinders both internal developers and external security evaluators in understanding and assessing the system's functionality and security. While most files include a brief description of their overall purpose, individual functions, their arguments, and the algorithms within them are often undocumented.

For example, the `CBallotRelSet::Open` function in `TSElection/TSElectionSet.cpp` (Figure 2) is a complex and completely undocumented function. It contains two nested loops, four complex conditionals, and five debugging assertions, but no comments explaining its purpose. Understanding even a small part of this code, such as the meaning of `vgroup->KeyId() == -1`, is a significant challenge. Does this indicate that the ID is undefined, or should the group be ignored? Such poor documentation makes it difficult to determine if the code is functioning correctly and whether it might introduce security vulnerabilities.

```cpp
void CBallotRelSet::Open(const CDistrict* district, const CBaseunit* baseunit,
                         const CVGroup* vgroup1, const CVGroup* vgroup2)
{
    ASSERT(m_pDB != NULL);
    ASSERT(m_pDB->IsOpen());
    ASSERT(GetSize() == 0);
    ASSERT(district != NULL);
    ASSERT(baseunit != NULL);

    if (district->KeyId() == -1) {
        Open(baseunit, vgroup1);
    } else {
        const CDistrictItem* pDistrictItem = m_pDB->Find(*district);
        if (pDistrictItem != NULL) {
            const CBaseunitKeyTable& baseunitTable = pDistrictItem->m_BaseunitKeyTable;
            int count = baseunitTable.GetSize();
            for (int i = 0; i < count; ++i) {
                const CBaseunitKey& curBaseunit = baseunitTable[i];
                if (curBaseunit.KeyId() == -1 || *baseunit == curBaseunit) {
                    const CBallotRelationshipItem* pBalRelItem = NULL;
                    while ((pBalRelItem = m_pDB->FindNextBalRel(curBaseunit, pBalRelItem))) {
                        if (!vgroup1 || vgroup1->KeyId() == -1 ||
                            (*vgroup1 == pBalRelItem->m_VGroup1 && !vgroup2) ||
                            (vgroup2 && *vgroup2 == pBalRelItem->m_VGroup2 &&
                             *vgroup1 == pBalRelItem->m_VGroup1)) {
                            Add(pBalRelItem);
                        }
                    }
                }
            }
        }
    }

    m_CurIndex = 0;
    m_Open = TRUE;
}
```

**Figure 2.** The `CBallotRelSet::Open` function from `TSElection/TSElectionSet.cpp`. This complex function is completely undocumented.

#### B. Coding Process
The coding process for the Diebold AccuVote-TS system lacks formal change control and review mechanisms. CVS logs show that recent code updates are primarily in response to specific bugs, but there are no references to tracking numbers from a bug database or any indication that these fixes have been vetted through a change-control process. Each programmer appears to have autonomous authority to commit changes to any module in the project. The only evidence of code review comes from a single log comment: “Modify code to avoid multiple exit points to meet Wyle requirements.” This refers to Wyle Labs, one of the independent testing authorities responsible for certifying that voting machines meet FEC guidelines.

#### C. Design Documents
Serious software engineering projects typically have extensive design documents that detail the system's functionality, from user interfaces to low-level algorithms and architecture. However, no such documents were found in the CVS archive, nor were there any references to such documents in the source code. This lack of documentation further complicates the assessment of the system's security and functionality.

#### D. Third-Party Components
The system uses third-party components, such as the Windows CE operating system and the fmod audio library. A flaw in either of these could expose the system to attacks, as they can access the memory of the voting program. Both must be considered part of the trusted computing base (TCB). The source code for fmod is available with commercial licenses, but without a full audit, it could contain backdoors or exploitable buffer overflows.

#### E. Code Completeness and Correctness
The codebase includes numerous comments indicating areas that need reorganization, cleanup, and bug fixing. For instance:
- **Reorganization Notes:** 
  ```cpp
  /* Okay, I don’t like this one bit. Its really tough to tell where m_AudioPlayer should live. [...] A reorganization might be in order here. */
  ```
- **Cleanup Notes:**
  ```cpp
  /* This is a bit of a hack for now. [...]
  Calling from the timer message appears to work. Solution is to always do a 1ms wait between audio clips. */
  ```
- **Bug Fixing Notes:**
  ```cpp
  /* need to work on exception *caused by audio*. I think they will currently result in double-fault. */
  ```

These comments suggest that the code is not yet complete and that many issues remain unresolved. There are no comments indicating that a radical redesign from a security perspective is planned.

#### F. Conclusions
Our analysis of the April 2002 snapshot of Diebold’s AccuVote-TS 4.3.1 electronic voting system revealed significant security flaws. These include the ability for voters to cast multiple ballots, administrative functions being accessible to regular voters, and the potential for insider threats. The lack of proper documentation, formal change control, and design documents indicates a lack of programming discipline and quality control.

Voting equipment vendors often claim that closed-source systems are more secure. However, our analysis shows that the development process for these systems is similar to other commercial endeavors. An open-source approach, combined with voter-verifiable audit trails, could lead to more robust and secure voting systems. Such an approach has proven successful in various projects, from specifying the Advanced Encryption Standard (AES) to maintaining the Linux operating system.

We recommend a shift towards more transparent and collaborative development processes to ensure the integrity and security of electronic voting systems. This would help build confidence in the election results and preserve the bedrock of our democracy.

#### Acknowledgments
We thank Cindy Cohn, David Dill, Badri Natarajan, Jason Schultz, Tracy Volz, David Wagner, and Richard Wiebe for their suggestions and advice. We also thank the state of Maryland for hiring SAIC and RABA and the state of Ohio for hiring Compuware to independently validate our findings. Most of this work was performed while T. Kohno was visiting the Johns Hopkins University Information Security Institute. T. Kohno is supported by a National Defense Science and Engineering Graduate Fellowship.

#### References
[1] M. Bellare, R. Canetti, and H. Krawczyk. Keying hash functions for message authentication. In N. Koblitz, editor, Advances in Cryptology – CRYPTO ’96, volume 1109 of Lecture Notes in Computer Science, pages 1–15. Springer-Verlag, Berlin Germany, Aug. 1996.
[2] M. Bellare, A. Desai, E. Jokipii, and P. Rogaway. A concrete security treatment of symmetric encryption. In Proceedings of the 38th Annual Symposium on Foundations of Computer Science, pages 394–403. IEEE Computer Society Press, 1997.
[3] M. Bellare and C. Namprempre. Authenticated encryption: Relations among notions and analysis of the generic composition paradigm. In T. Okamoto, editor, Advances in Cryptology – ASIACRYPT 2000, volume 1976 of Lecture Notes in Computer Science, pages 531–545. Springer-Verlag, Berlin Germany, Dec. 2000.
[4] California Internet Voting Task Force. A Report on the Feasibility of Internet Voting, Jan. 2000. http://www.ss.ca.gov/executive/ivote/.
[5] Voting: What Is; What Could Be, July 2001. http://www.vote.caltech.edu/Reports/.
[6] D. Chaum. Secret-ballot receipts: True voter-verifiable elections. IEEE Security and Privacy, 2(1):38–47, 2004.
[7] Compuware Corporation. Direct Recording Electronic (DRE) Technical Security Assessment Report, Nov. 2003. http://www.sos.state.oh.us/sos/hava/files/compuware.pdf.
[8] J. Daemen and V. Rijmen. The Design of Rijndael: AES–The Advanced Encryption Standard. Springer-Verlag, Berlin Germany, 2002.
[9] Diebold Election Systems. AVTSCE source tree, 2003. http://users.actrix.co.nz/dolly/Vol2/cvs.tar.
[10] D. L. Dill, R. Mercuri, P. G. Neumann, and D. S. Wallach. Frequently Asked Questions about DRE Voting Systems, Feb. 2003. http://www.verifiedvoting.org/drefaq.asp.
[11] Federal Election Commission. Voting System Standards, 2001. http://fecweb1.fec.gov/pages/vss/vss.html.
[12] J. Gilmore, editor. Cracking DES: Secrets of Encryption Research, Wiretap Politics & Chip Design. O’Reilly, July 1998.
[13] D. Gritzalis, editor. Secure Electronic Voting. Springer-Verlag, Berlin Germany, 2003.
[14] B. Harris. Black Box Voting: Vote Tampering in the 21st Century. Elon House/Plan Nine, July 2003.
[15] T. Jim, G. Morrisett, D. Grossman, M. Hicks, J. Cheney, and Y. Wang. Cyclone: A safe dialect of C. In USENIX Annual Technical Conference, June 2002.
[16] D. W. Jones. Problems with Voting Systems and the Applicable Standards, May 2001. Testimony before the U.S. House of Representatives’ Committee on Science, http://www.cs.uiowa.edu/~jones/voting/congress.html.
[17] D. W. Jones. The Case of the Diebold FTP Site, July 2003. http://www.cs.uiowa.edu/~jones/voting/dieboldftp.html.
[18] A. Kerckhoffs. La Cryptographie Militaire. Libraire Militaire de L. Baudoin & Cie, Paris, 1883.
[19] H. Krawczyk. The order of encryption and authentication for protecting communications (or: How secure is SSL?). In J. Kilian, editor, Advances in Cryptology – CRYPTO 2001, volume 2139 of Lecture Notes in Computer Science, pages 310–331. Springer-Verlag, Berlin Germany, 2001.
[20] R. Mercuri. Electronic Vote Tabulation Checks and Balances. PhD thesis, University of Pennsylvania, Philadelphia, PA, Oct. 2000.
[21] National Science Foundation. Report on the National Workshop on Internet Voting: Issues and Research Agenda, Mar. 2001. http://news.findlaw.com/cnn/docs/voting/nsfe-voterprt.pdf.
[22] NBS. Data encryption standard, January 1977. Federal Information Processing Standards Publication 46.
[23] J. Nechvatal, E. Barker, L. Bassham, W. Burr, M. Dworkin, J. Foti, and E. Roback. Report on the Development of the Advanced Encryption Standard (AES), Oct. 2000.
[24] RABA Innovative Solution Cell. Trusted Agent Report: Diebold AccuVote-TS Voting System, Jan. 2004. http://www.raba.com/press/TA_Report_AccuVote.pdf.
[25] A. D. Rubin. Security considerations for remote electronic voting. Communications of the ACM, 45(12):39–44, Dec. 2002. http://avirubin.com/e-voting.security.html.
[26] B. Schneier. Applied Cryptography: Protocols, Algorithms, and Source Code in C. John Wiley & Sons, New York, second edition, 1996.
[27] Science Applications International Corporation. Risk Assessment Report: Diebold AccuVote-TS Voting System and Processes, Sept. 2003. http://www.dbm.maryland.gov/SBE.