### 注
西蒙·詹森、斯登冲锋枪·斯潘斯和迈克·爱德华兹创作了这部《星球大战》的《T2》。吃饱了，按住*Ctrl*+*】*。系统会提示您输入`close`退出。
## 入口点指令
`ENTRYPOINT`指令允许您将 Docker 映像转换为可执行文件。换句话说，当您在`ENTRYPOINT`中指定一个可执行文件时，容器将会像该可执行文件一样运行。
`ENTRYPOINT`指令有两种形式:
1.  `ENTRYPOINT ["executable", "arg1", "arg2"...]`形态。
2.  `ENTRYPOINT command arg1 arg2 …`形态。
该指令添加了一个入口命令，当参数被传递给`docker run`命令时，该命令不会被覆盖，这与`CMD`指令的行为不同。这允许将参数传递给`ENTRYPOINT`指令。`docker run  -arg`命令将把`-arg`参数传递给`ENTRYPOINT`指令中指定的命令。
参数，如果在`ENTRYPOINT`指令中指定，将不会被`docker run`参数覆盖，但是通过`CMD`指令指定的参数将被覆盖。
举个例子，让我们写一个以`cowsay`为`ENTRYPOINT`指令的 Dockerfile:
### 注
`cowsay`是一个生成带有信息的牛的 ASCII 图片的程序。它还可以使用其他动物的预制映像来生成图片，比如 Linux 吉祥物企鹅图克斯。
```
FROM ubuntu:14.04
RUN apt-get -y install cowsay
ENTRYPOINT ["/usr/games/cowsay"]
CMD ["Docker is so awesomoooooooo!"]
```
将这个名为`Dockerfile`的文件保存在名为`cowsay`的文件夹中。然后通过终端，转到该目录，并运行以下命令:
```
$ docker build -t cowsay .
```
构建映像后，运行以下命令:
```
$ docker run cowsay
```
下面的屏幕截图显示了前面命令的输出:
![The ENTRYPOINT instruction](img/4787OS_02_08.jpg)
如果你仔细看截图，第一次运行没有参数，它使用了我们在 Dockerfile 中配置的参数。然而，当我们在第二次运行中给出自己的参数时，它覆盖了默认值，并将所有参数(T0 标志和句子)传递给了`cowsay`文件夹。
### 注
如果你是那种喜欢操纵别人的人，这里有一个提示:应用在[http://superuser.com/a/175802](http://superuser.com/a/175802)给出的指令来建立一个 pre-exec 脚本(一个每当执行一个命令就调用的函数)，它将每个命令传递给这个 Docker 容器，并把它放在。`bashrc`文件。现在，cowsay 将在一个文本气球中打印它执行的每个命令，由一个 ASCII 奶牛说！
## 工作目录指令
`WORKDIR`指令为跟随其后的`RUN`、`CMD`和`ENTRYPOINT` Dockerfile 命令设置工作目录:
```
WORKDIR /path/to/working/directory
```
该指令可以在同一个 Dockerfile 中多次使用。如果提供了相对路径，`WORKDIR`指令将相对于前一条`WORKDIR`指令的路径。
## 暴露指令
`EXPOSE`指令通知 Docker，当容器启动时，将暴露某个港口:
```
EXPOSE port1 port2 …
```
即使在公开端口之后，在启动一个容器时，您仍然需要使用`-p`标志向`Docker run`提供端口映射。该说明在连接容器时很有用，我们将在[第 3 章](3.html "Chapter 3. Configuring Docker Containers")、*连接容器*中看到。
## 环境指令
ENV 命令用于设置环境变量:
```
ENV  
```
这会将``环境变量设置为``。该值将传递给所有未来的`RUN`指令。这相当于在命令前面加上`=`。
使用`ENV`命令设置的环境变量将保持不变。这意味着当从结果映像运行容器时，环境变量也将可用于运行过程。`docker inspect`命令显示在创建映像期间分配的值。但是，这些可以使用`$ docker run –env =`命令来覆盖。
## 用户指令
用户指令设置运行映像时要使用的用户名或 UID，以及以下任何`RUN`指令:
```
USER xyz
```
## 音量指令
`VOLUME`指令将用给定的名称创建一个装载点，并将其标记为保存来自主机或其他容器的外部装载卷:
```
VOLUME [path]
```
这里有一个`VOLUME`指令的例子:
```
VOLUME ["/data"]
```
下面是该指令的另一个示例:
```
VOLUME /var/log
```
两种格式都可以接受。
## 添加指令
`ADD`指令用于将文件复制到映像中:
```
ADD  
```
`ADD`指令将文件从``复制到``的路径中。
``路径必须是相对于正在构建的源目录的文件或目录的路径(也称为构建的上下文)或远程文件的网址。
``路径是源将在目标容器内复制到的绝对路径。
### 注
如果通过将 Dockerfile 传递到`stdin`文件(`docker build - `路径必须在构建的上下文中。您不能使用`ADD ../file as ..`语法，因为它超出了上下文。
*   如果``是一个 URL 并且``路径没有以结尾斜杠结束(它是一个文件)，那么该 URL 处的文件被复制到``路径。
*   如果``是一个网址，``路径以一个尾随斜杠结束(它是一个目录)，那么该网址的内容将被提取，并且从该网址推断出一个文件名并保存到`/filename`路径中。所以，在这种情况下，网址不能有`example.com`这样的简单路径。
*   如果`` 是一个目录，则复制整个目录以及文件系统元数据。
*   如果`` 是本地焦油档案，则提取到``路径。``的结果是:
    *   无论路径上存在什么。
    *   提取的 tar 归档文件的内容，在逐个文件的基础上与路径``冲突。
*   如果``路径不存在，它将与其路径上所有缺失的目录一起创建。
## 复制指令
复制指令将文件复制到映像中:
```
COPY  
```
`Copy`指令类似于`ADD`指令。区别在于`COPY`指令不允许任何文件脱离上下文。因此，如果您通过`stdin`文件或网址(不指向源代码库)传输 Dockerfile，则不能使用`COPY`指令。
## ONBUILD 指令
`ONBUILD`指令向映像添加一个触发器，当映像用作另一个构建的基础映像时，将执行该触发器:
```
ONBUILD [INSTRUCTION]
```
当源应用涉及需要编译才能使用的生成器时，这很有用。除了`FROM`、`MAINTAINER`和`ONBUILD`指令之外的任何构建指令都可以注册。
以下是该说明的工作原理:
1.  在构建过程中，如果遇到`ONBUILD`指令，它会注册一个触发器并将其添加到映像的元数据中。当前版本不会受到任何影响。
2.  在构建结束时，所有这些触发器的列表作为名为`OnBuild`的键被添加到映像清单中(可以通过`Docker inspect`命令看到)。
3.  当该映像后来被用作新构建的基础映像时，作为处理`FROM`指令的一部分，`OnBuild key` 触发器按照它们被注册的顺序被读取和执行。如果其中任何一个失败，则`FROM` 指令中止，导致构建失败。否则，`FROM` 指令完成，构建照常继续。
4.  触发器在执行后会从最终映像中清除。换句话说，它们不会被*子代*继承。
让我们把`cowsay`带回来！这里有一个带有`ONBUILD`指令的文件:
```
FROM ubuntu:14.04
RUN apt-get -y install cowsay
RUN apt-get -y install fortune
ENTRYPOINT ["/usr/games/cowsay"]
CMD ["Docker is so awesomoooooooo!"]
ONBUILD RUN /usr/games/fortune | /usr/games/cowsay
```
现在将该文件保存在名为`OnBuild`的文件夹中，在该文件夹中打开一个终端，并运行以下命令:
```
$ Docker build -t shrikrishna/onbuild .
```
我们需要编写另一个基于这个映像的 Dockerfile。让我们写一个:
```
FROM shrikrishna/onbuild
RUN  apt-get moo
CMD ['/usr/bin/apt-get', 'moo']
```
### 注
`apt-get moo`命令是复活节彩蛋的一个例子，通常可以在许多开源工具中找到，只是为了好玩才添加的！
构建该映像将现在执行我们之前给出的`ONBUILD`指令:
```
$ docker build -t shrikrishna/apt-moo apt-moo/
Sending build context to Docker daemon  2.56 kB
Sending build context to Docker daemon
Step 0 : FROM shrikrishna/onbuild
# Executing 1 build triggers
Step onbuild-0 : RUN /usr/games/fortune | /usr/games/cowsay
 ---> Running in 887592730f3d
 ________________________________
/ It was all so different before \
\ everything changed.            /
 --------------------------------
 \   ^__^
 \  (oo)\_______
 (__)\       )\/\
 ||----w |
 ||     ||
 ---> df01e4ca1dc7
 ---> df01e4ca1dc7
Removing intermediate container 887592730f3d
Step 1 : RUN  apt-get moo
 ---> Running in fc596cb91c2a
 (__)
 (oo)
 /------\/
 / |    ||
 *  /\---/\
 ~~   ~~
..."Have you mooed today?"...
 ---> 623cd16a51a7
Removing intermediate container fc596cb91c2a
Step 2 : CMD ['/usr/bin/apt-get', 'moo']
 ---> Running in 22aa0b415af4
 ---> 7e03264fbb76
Removing intermediate container 22aa0b415af4
Successfully built 7e03264fbb76
```
现在让我们使用我们新获得的知识为我们之前通过手动满足容器中的依赖关系并提交而构建的应用编写一个 Dockerfile。Dockerfile 看起来像这样:
```
# Version 1.0
FROM dockerfile/nodejs
MAINTAINER Shrikrishna Holla 
WORKDIR /home
RUN     git clone \ https://github.com/shrikrishnaholla/code.it.git
WORKDIR code.it
RUN     git submodule update --init --recursive
RUN     npm install
EXPOSE  8000
WORKDIR /home
CMD     ["/usr/bin/node", "/home/code.it/app.js"]
```
创建一个名为`code.it`的文件夹，并将此内容保存为名为`Dockerfile`的文件。
### 注
很好的做法是为每个 Dockerfile 创建一个单独的文件夹，即使不需要上下文。这允许您在不同的项目之间分离关注点。你可能会注意到许多 Dockerfile 作者俱乐部`RUN`的说明(例如，查看 [dockerfile.github.io](http://dockerfile.github.io) 中的 dockerfile)。原因是 AUFS 将可能的层数限制在 42 层。欲了解更多信息，请点击[https://github.com/docker/docker/issues/1171](https://github.com/docker/docker/issues/1171)查看本期内容。
你可以回到 *Docker build* 部分，看看如何用这个 Dockerfile 构建一个映像。
# Docker 工作流-拉-用-修改-提交-推
现在，当我们接近本章末尾时，我们可以猜测典型的 Docker 工作流是什么样的:
1.  准备一个运行应用的需求列表。
2.  确定哪个公共映像(或您自己的映像)可以满足这些需求中的大部分，同时还能得到良好的维护(这一点很重要，因为您需要随时用更新的版本来更新映像)。
3.  接下来，通过运行一个容器并执行满足需求的命令(可以是安装依赖项、绑定挂载卷或获取源代码)，或者通过编写一个 Dockerfile(这是更可取的，因为您将能够使构建可重复)来满足剩余的需求。
4.  将新映像推送到公共 Docker 注册中心，这样社区也可以使用它(如果需要，也可以推送到私有注册中心或存储库)。
# 自动化构建
自动化构建直接在 Docker Hub 上自动构建和更新来自 GitHub 或 BitBucket 的映像。它们通过向您选择的 GitHub 或 BitBucket 存储库添加一个`commit`钩子来工作，当您推送一个提交时，触发一个构建和一个更新。因此，您不必在每次更新时都手动构建一个映像并将其推送到 Docker Hub。以下步骤将向您展示如何做到这一点:
1.  To set up an Automated Build, log in to your Docker Hub account.
    ![Automated Builds](img/4787OS_02_03.jpg)
2.  通过**链接** **账户**菜单链接你的 GitHub 或 BitBucket 账户。
3.  Select **Automated** **Build** in the **Add** **Repository** menu.
    ![Automated Builds](img/4787OS_02_04.jpg)
4.  选择包含要构建的 Dockerfile 的 GitHub 或 BitBucket 项目。(您需要授权 Docker Hub 访问您的存储库。)
5.  选择包含源代码和 Dockerfile 的分支(默认为主分支)。
6.  为自动化构建命名。这也将是存储库的名称。
7.  为构建分配可选的 Docker 标记。默认为`lastest`标记。
8.  Specify where the Dockerfile is located. The default is `/`.
    ![Automated Builds](img/4787OS_02_05.jpg)
配置完成后，自动构建将触发一个构建，几分钟后您将能够在 Docker Hub 注册表中看到它。它将与您的 GitHub 和 BitBucket 存储库保持同步，直到您自己停用自动构建。
构建状态和历史可以在 Docker Hub 中您的配置文件的自动构建页面中看到。
![Automated Builds](img/4787OS_02_06.jpg)
创建自动生成后，您可以停用或删除它。
### 注
但是，您不能使用 Docker `push`命令推进自动构建。您只能通过将代码提交到您的 GitHub 或 BitBucket 存储库中来管理它。
您可以为每个存储库创建多个自动构建，并将其配置为指向特定的 Dockerfile 或 Git 分支。
## 构建触发器
自动化构建也可以通过 Docker Hub 上的网址触发。这允许您按需重建自动构建映像。
## web 手册
网络钩子是在成功的构建事件中调用的触发器。通过一个网络钩子，你可以指定一个目标网址(比如一个通知你的服务)和一个当映像被推送时将被传递的 JSON 有效载荷。如果您有一个持续集成的工作流，那么 Webhooks 非常有用。
要将网络挂钩添加到您的 Github 存储库中，请执行以下步骤:
1.  Go to **Settings** in your repository.
    ![Webhooks](img/4787OS_02_09.jpg)
2.  From the menu bar on the left, go to **Webhooks** **and** **Services**.
    ![Webhooks](img/4787OS_02_10.jpg)
3.  Click on **Add** **Service**.
    ![Webhooks](img/4787OS_02_11.jpg)
4.  In the text box that opens, enter **Docker** and select the service.
    ![Webhooks](img/4787OS_02_12.jpg)
5.  你们都准备好了！现在，每当您提交到存储库时，都会在 Docker Hub 中触发一个构建。
# 总结
在本章中，我们查看了 **Docker** 命令行工具，并尝试了可用的命令。然后我们找到了如何使用 Dockerfile 使构建可重复。此外，我们使用 Docker Hub 的自动构建服务来自动化这个构建过程。
在下一章中，我们将通过查看帮助我们配置容器的各种命令来尝试获得对容器如何运行的更多控制。我们将研究限制容器消耗的资源量(中央处理器、内存和存储)。