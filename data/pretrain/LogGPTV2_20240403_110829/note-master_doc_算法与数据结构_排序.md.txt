# 排序
**为什么要学习O(N^2)的排序算法**
- 是其他算法的基础
- 编码简单
- 作为子过程，用于改进复杂的排序算法
**排序算法的稳定性**
对于相等的元素，在排序后，相对位置没有发生改变
排序算法   | 平均时间复杂度  | 最坏时间复杂度  | 最好时间复杂度  | 空间复杂度    | 稳定性
------ | -------- | -------- | -------- | -------- | ---
冒泡排序   | O(n²)    | O(n²)    | O(n)     | O(1)     | 稳定
直接选择排序 | O(n²)    | O(n²)    | O(n)     | O(1)     | 不稳定
直接插入排序 | O(n²)    | O(n²)    | O(n)     | O(1)     | 稳定
快速排序   | O(nlogn) | O(n²)    | O(nlogn) | O(nlogn) | 不稳定
堆排序    | O(nlogn) | O(nlogn) | O(nlogn) | O(1)     | 不稳定
希尔排序   | O(nlogn) | O(ns)    | O(n)     | O(1)     | 不稳定
归并排序   | O(nlogn) | O(nlogn) | O(nlogn) | O(n)     | 稳定
计数排序   | O(n+k)   | O(n+k)   | O(n+k)   | O(n+k)   | 稳定
基数排序   | `O(N*M)` | O`(N*M)` | O(N*M)   | O(M)     | 稳定
## 选择排序
![202002070942](/assets/202002070942.gif)
每一轮循环找到数组中最小的元素，第一次找到的最小元素将它与第一个元素交换位置，第二次找到的最小元素交换将它与第二个位置交换，以此类推
```java
for (int i = 0; i  0; j--) {
        if (less(a[j], a[j - 1])) {
            swap(a, j, j - 1);
        }else {
            break;
        }
    }
}
// 改进后的插入排序
for (int i = 1; i  0 && greater(a[j - 1], e); j--) {
        // 将
        a[j]=a[j-1];
    }
    a[j]=e;
}
```
## 冒泡排序
![202002081000](/assets/202002081000.gif)
第一次扫描下标为0的元素到最后一个元素
第二次扫描下标为0的元素到倒数第二个元素
每次扫描如果发现右边比左边小 则两个交换位置
以此类推
```java
for (int i = 1; i =1){
    for (int i = h; i  h && less(a[j - h], e); j-=h) {
            a[j]=a[j-h];
        }
        a[j]=e;
    }
    h/=3;
}
```
## 归并排序
![202002081126](/assets/202002081126.gif)
- 把长度为n的输入序列分成两个长度为n/2的子序列；
- 对这两个子序列分别采用归并排序；
- 将两个排序好的子序列合并成一个最终的排序序列
对两个有序子序列进行合并，得到一个更大的有序子序列，以此类推，直到只剩下一个序列
- 但是一个缺点是需要额外的O(N)空间
```java
private void mergeSort(Comparable[] a, int l, int r) {
    if (l >= r) {
        return;
    }
    int mid = (l + r) / 2;
    mergeSort(a, l, mid); // 对左边排序
    mergeSort(a, mid + 1, r); // 对右边排序
    merge(a, l, mid, r); // 对两个数组进行归并
}
private void merge(Comparable[] a, int l, int mid, int r) {
    // 开辟一块新空间给l-r之间的元素
    Comparable[] aux = new Comparable[r - l + 1];
    for (int i = l; i  mid) { // 如果左指针已经跑过了mid，那此时让右指针去跑
            a[k] = aux[j - l];
            j++;
        } else if (j > r) { // 如果右指针已经跑完了，则此时让左指针去跑
            a[k] = aux[i - l];
            i++;
        } else if (less(aux[i - l], aux[j - l])) { // 否则就比较左右两指针谁的值比较小，谁小就把谁的值复制到结果里，然后该指针往后移动
            a[k] = aux[i - l];
            i++;
        } else {
            a[k] = aux[j - l];
            j++;
        }
    }
}
```
### 优化
当mid+1位置的元素大于mid位置的元素时，就没有必要进行归并了
```java
if (greater(a[mid],a[mid+1])){
    merge(a, l, mid, r);
}
```
也可以当被归并排序的数组数量小于某一数量级时，使用其他排序算法，来提高性能
### 自底向上的归并排序
```java
// 每次归并的数组大小依次为1 2 4 ...
for (int sz = 1; sz [] a, int l, int r) {
    if (l >= r) {
        return;
    }
    int p = partition(a, l, r);
    quickSort(a, l, p - 1);
    quickSort(a, p + 1, r);
}
/**
 * 返回一个p，使得a[l...p-1]  a[p]
 */
private int partition(Comparable[] a, int l, int r) {
    var v = a[l];
    int j = l;
    // 从左到右扫描（一）
    for (int i = l + 1; i [] a, int l, int r) {
    var v = a[l];
    // i:a[l+1...i] =v
    int i = l + 1, j = r;
    while (true) {
        while (i = l + 1 && greater(a[j], v)) j--;
        if (i > j) {
            break;
        } else {
            swap(a, i, j);
            i++;j--;
        }
    }
    swap(a,l,j);
    return j;
}
```
- 三路快速排序
```java
private void quickSort(Comparable[] a, int l, int r) {
    if (l >= r) {
        return;
    }
    // partition
    var v = a[l];
    int lt = l; // a[l+1...lt]  v
    int i = l + 1; // a[lt+1...i) == v
    while (i  0) {
            swap(a, i, gt - 1);
            gt--;
        }else {
            i++;
        }
    }
    swap(a,i,lt);
    quickSort(a, l, lt - 1);
    quickSort(a, gt, r);
}
```
## 归并排序与快速排序的背后
- 两个算法都使用了分治算法
## 洗牌算法
### Fisher-Yates Shuffle
每次选择的时候从剩余可选的元素中随机选择一个
```cpp
void Fisher_Yates_Shuffle(vector& arr,vector& res) {
     int k;
     int n = arr.size();
     for (int i=0;i& arr) {
    for (int i = 0; i < n; i++) {
        int tmp;
        int target = i + rand() % (n - i);
        tmp = arr[i];
        arr[i] = arr[target];
        arr[target] = tmp;
    }
}
```