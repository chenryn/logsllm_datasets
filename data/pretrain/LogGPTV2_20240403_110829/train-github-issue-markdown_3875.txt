The documentation for the `metric` parameter in `silhouette_score()` states:
> If `metric` is a string, it must be one of the options allowed by `metrics.pairwise.pairwise_distances`. If `X` is a precomputed distance array, use `metric="precomputed"`.

However, when using `metric='l1'` or `metric='cosine'`, an error occurs:
```python
File "search_cluster_02.py", line 148, in  
  % metrics.silhouette_score(X, labels, sample_size=1000, metric="l1"))  
File "C:\Anaconda\lib\site-packages\sklearn\metrics\cluster\unsupervised.py", line 84, in silhouette_score  
  return np.mean(silhouette_samples(X, labels, metric=metric, **kwds))  
File "C:\Anaconda\lib\site-packages\sklearn\metrics\cluster\unsupervised.py", line 143, in silhouette_samples  
  distances = pairwise_distances(X, metric=metric, **kwds)  
File "C:\Anaconda\lib\site-packages\sklearn\metrics\pairwise.py", line 657, in pairwise_distances  
  return func(X, Y, **kwds)  
File "C:\Anaconda\lib\site-packages\sklearn\metrics\pairwise.py", line 244, in manhattan_distances  
  raise ValueError("manhattan_distance does not support sparse matrices")
```

The documentation for `metrics.pairwise.pairwise_distances` indicates that sparse matrices are supported for certain metrics:
> Please note that support for sparse matrices is currently limited to the metrics listed in `pairwise.PAIRWISE_DISTANCE_FUNCTIONS`.

The `PAIRWISE_DISTANCE_FUNCTIONS` dictionary, as seen on GitHub, includes:
```python
PAIRWISE_DISTANCE_FUNCTIONS = {
    'cityblock': manhattan_distances,
    'cosine': cosine_distances,
    'euclidean': euclidean_distances,
    'l2': euclidean_distances,
    'l1': manhattan_distances,
    'manhattan': manhattan_distances,
}
```

It is unclear whether this issue is due to a documentation problem or a code problem. To reproduce this, you can run the example script from the following page and add the `metric='l1'` parameter to the call to `silhouette_score` at the end of the script:
- [Document Clustering Example](http://scikit-learn.org/stable/auto_examples/document_clustering.html)

This discrepancy suggests that there may be a limitation or bug in the implementation of `silhouette_score` when using certain metrics with sparse matrices.