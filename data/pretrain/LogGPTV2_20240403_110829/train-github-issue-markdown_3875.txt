The documentation for the `metric` parameter for `silhouette_score()` reads:
> If metric is a string, it must be one of the options allowed by
> metrics.pairwise.pairwise_distances. If X is the distance array itself, use
> metric="precomputed".
However, entering `metric='l1'` or `metric='cosine'` both lead to an error:
> File "search_cluster_02.py", line 148, in  
>  % metrics.silhouette_score(X, labels, sample_size=1000,metric="l1"))  
>  File "C:\Anaconda\lib\site-
> packages\sklearn\metrics\cluster\unsupervised.py", line 84, in
> silhouette_score  
>  return np.mean(silhouette_samples(X, labels, metric=metric, *_kwds))  
>  File "C:\Anaconda\lib\site-
> packages\sklearn\metrics\cluster\unsupervised.py", line 143, in
> silhouette_samples  
>  distances = pairwise_distances(X, metric=metric, *_kwds)  
>  File "C:\Anaconda\lib\site-packages\sklearn\metrics\pairwise.py", line 657,
> in pairwise_distances  
>  return func(X, Y, **kwds)  
>  File "C:\Anaconda\lib\site-packages\sklearn\metrics\pairwise.py", line 244,
> in manhattan_distances  
>  raise ValueError("manhattan_distance does not support sparse"
However, the documentation for `metrics.pairwise.pairwise_distances` indicates
that sparse matrices are allowed:
> Please note that support for sparse matrices is currently limited to those
> metrics listed in pairwise.PAIRWISE_DISTANCE_FUNCTIONS.
Looking there, on Github, we have:
    PAIRWISE_DISTANCE_FUNCTIONS = {
        # If updating this dictionary, update the doc in both distance_metrics()
        # and also in pairwise_distances()!
        'cityblock': manhattan_distances,
        'cosine': cosine_distances,
        'euclidean': euclidean_distances,
        'l2': euclidean_distances,
        'l1': manhattan_distances,
        'manhattan': manhattan_distances, }
Honestly, I can't tell if this is a documentation problem (or clarity issue)
or a code problem.
To reproduce this, just run the example script from this page:  
http://scikit-learn.org/stable/auto_examples/document_clustering.html
and at the very bottom of the script, add the `metric='l1'` parameter to the
call to `silhouette_score`.