4.8.7
文件类型绕过攻击
在客户端上传文件时，通过BurpSuite抓取数据包，当上传一个php格式的文件时，
可以看到数据包中Content-Type的值是application/octet-stream，而上传jpg格式的文件
时，数据包中Content-Type的值是image/jpeg，如图4-109和图4-110所示。
*....-41184676334
Content-Disposition: form-data; name=*file"; filename="1.php*
Content-Type: app1ication/octet-stream
41184676334
Content-Disposition: form-data; name=*subnit*
submit
41184676334-
图4-109上传php文件
*--24464570528145
Content-Disposition: form-data; name=*file°; filename="1.jpg"
Content-Type: image/jpeg
--24464570528145
Content-Disposition: form-data; name=*submit*
submit
24464570528145
图4-110上传jpg文件
如果服务端代码是通过Content-Type的值来判断文件的类型，那么就存在被绕过
---
## Page 183
164Web安全攻防：渗造测试实战指南
的可能，因为Content-Type的值是通过客户端传递的，是可以任意修改的。所以当上
传一个php文件时，在Burp Suite中将Content-Type修改为image/jpeg，就可以绕过服务
端的检测，如图4-111所示。
Host: 127.0.0.1
POST /upload4.php HTTP/1.1
User-Agnt Mella/5.0 (Nindows NT 10.0; WOW64; rv51.0) Gecko/20100101 Firefox/S1.0
Accept-Languagr: h-CN,zhoq=0.8,en-US(g=0.5,μng=0.3
Accept: tsxt/htmi,application/xhtml +xmi,application/xmtq= 0.9,*/*:q=0.8
Acet-Encoding gip, deflate
Referer:htp:/127.0.0.1/upload2.html
Upgrade-lnsecure-Requests: 1
Connection: keep-alive 
Content-Length: 878014
Content-Type: multipar/form-data; boundary=-
--19990253701301
-19990253701301
Lontent-fype: image/jpeg
dud 1, =iweueg :,a(s, =irururpip-uoj uog(sodsj-suequo
Content-Disposifion: form-data; name=*submit*
--19990253701301
submit
*19990253701301
图4-111修改Content-Type为图片格式
4.8.8文件类型绕过代码分析
服务端处理上传文件的代码如下所示，服务端代码判断S_FILES["file"][type"]
是不是图片的格式（image/gif，imagejpeg，image/pipeg），如果不是，则不允许上传
该文件，而S_FILES[file"lT"type"]是客户端请求数据包中的Content-Type，所以可以
通过修改Content-Type的值绕过该代码限制。
;
{
else
{
-1[_ad.1+-]s31Is) 99 (8/a8eut, *1 [,ad_][a]s3Is)) 
“image/Jpeg")
&& ($_FILES[αf1le“]["type"] 1=“Image/pJpeg")){
---
## Page 184
第4章Web安全原理剖析165
([,,1,1+15311s)xa
exit（“不允许的格式"）;
_。 * [_aweu_][atT+]s37Iss * _ :peordn. ouoa
。 [,a]]s3s *a. ou
_qx .*(1 / [z5s,]]31ss) *。:z1s. o
echo *Temp file: " , $_FILES[*file"]["tmp_name"] . “";
if (file_exists(*upload/* . $_FILES[f11e*][“name*]))
else
move_uploaded_f1le($_FILES["f11le*]["tmp_name°],
([_aueu_][_at+.]sanIs *_/peodn,
[aueu]a]s3ns */peotdn, *,iu paos. oga
}
";
}
else
exit（"不允许的文件"）;
}
 * [_aweu_][at]s3nI"s · _ peotdn, oupa
 [a]]s3s *:a. o
echo “Size: * . ($_FILES[“file*][*size"] / 1e24) . “ Kb°;
echo “Temp file: " , $_FILES[“file*]["tmp_name°] . *";
f (file_exists(*upload/* . $_FILES[°f1le*][“name"]))
---
## Page 185
166Web安全攻防：渗透测试实战指南
else
move_uploaded_file($_FILES["file"][“tmp_name°],
"upload/" . $_FILES[*file"][“name"]);
[,aueu,][_ats]s3ms“s * _/peordn_ * :ut pauoas_ ouoa
?>
但是，我们可以将一个图片和一个WebShell合并为一个文件，例如使用以下命令。
cat image.png webshe11.php > image.php
此时，使用getimagesizeO就可以获取图片信息，且WebShell的后缀是php，也能
被Apache解析为脚本文件，通过这种方式就可以绕过getimagesizeO的限制。
4.8.9文件截断绕过攻击
截断类型：PHP%00截断。
截断原理：由于00代表结束符，所以会把00后面的所有字符删除。
截断条件：PHP版本小于5.3.4，PHP的magic_quotes_gpc为OFF状态。
如图4-112所示，在上传文件时，服务端将GET参数jieduan的内容作为上传后文
件名的第一部分，然后将按时间生成的图片文件名作为上传后文件名的第二部分。
127.0.0.1/.phptjeduan=111×+
←→
①127.0.0.1/1.php7jeduan-]
路径：upload/11b220180308032507jpg
上传成功
图4-112上传图片
时间生成的图片文件名全部截断，那么文件名就剩下1.php，因此成功上传了WebShell
脚本，如图4-113所示。
---
## Page 186
第4章Web安全原理制析
167
RE
图4-113利用截断上传WebShell
4.8.10文件截断绕过代码分析
服务端处理上传文件的代码如下所示，程序使用substr获取文件的后级，然后判
断后缀是否是flv、swf、mp3、mp4、3gp、zip、rar、gif、jpg、png、bmp中的一种，
如果不是，则不允许上传该文件。但是在保存的路径中有S_REQUEST[jieduan]，那
么此处可以利用00截断尝试绕过服务端限制。
’；
echo‘路径：‘.StargetPath;
else
---
## Page 187
168Web安全政防：渗造测试实战指南
echo（"上传失败");
}
else
echo（*不允许的后缓）；
?>
在多数情况下，截断绕过都是用在文件名后面加上HEX形式的%00来测试，例如
filename=1.php%00.jpg’，但是由于在php中，S_FILES[file][name]在得到文件名
时，%00之后的内容已经被截断了，所以S_FILES[file][name]得到的后缓是php，而
不是php%00.jpg，因而此时不能通过if(in_array(Sfile_ext,Sext_arr)的检查，如图4-114
和图4-115所示。
ROST
NT10R;WO3i4SDGa
1 Fivl/5#0
图4-114修改文件名
Hex
2742号
2
7.0.12
4643
ngh
96
X24
[
图4-115HEX形式的%00
---
## Page 188
第4章Web安全原理剖析169
4.8.11竞争条件攻击
一些网站上传文件的逻辑是先允许上传任意文件，然后检查上传的文件是否包
含WebShell脚本，如果包含则删除该文件。这里存在的问题是文件上传成功后和删除
文件之间存在一个短的时间差（因为要执行检查文件和删除文件的操作），攻击者就
可以利用这个时间差完成竞争条件的上传漏洞攻击。
攻击者先上传一个WebShell脚本10.pbp，10.pbp的内容是生成一个新的WebShell
脚本shellphp，10.php的代码如下所示。
′);
当10.php上传成功后，客户端立即访问10.php，则会在服务端当前目录下自动生
成shell.php，这时攻击者就利用时间差完成了WebShell的上传，如图4-116所示。
m= 1911 =21154 0tt
dtapetotesr fes-sctc seer eaest*
图4-116利用竞争条件上传WebShell
4.8.12竞争条件代码分析
程序获取文件S_FILES["file"][name]的代码如下所示，先判断upload目录下是否
存在相同的文件，如果不存在，则直接上传文件，在判断文件是否为WebShell时，还
有删除WebShell时，都是需要时间来执行的，如果我们能在删除文件前就访问该
WebShell，那么会创建一个新的WebShell，从而绕过该代码限制。
(?php
if ($_FILES[“file"][“error"] > e)
---
## Page 189
170Web安全攻防：渗造测试实战指南
echo “Return Code: ". $_FILES["file"]["error"] . *°;
else
, [,aueu,]ot]s3mss *:peodn, oua
·[as_]a]s31s *ad。o
x ,*(/[_zs,3s) ._:z,o
[ad].]s3  duo
1f (f1le_exists(*upload/* . $_FILES[*file"][“name"]))
1, 'sstxa Apeate , *[aueu,].att,]s3iiss oya
else
“[aweudus_][_a]s31Is)atpapeotdnaAou
“upload/* . $_FILES[“f1le*][“name"]);
//为了说明，这里利用sleep（）函数让程序体眠1es
sleep("10");
//检查上传的文件是否是webShel1，如果是，则删除
unlink("upload/". $_FILES["file*][“name"]);
？>
4.8.13文件上传修复建议
针对文件上传的修复，笔者给出以下这两点建议。
通过白名单的方式判断文件后缓是否合法。
对上传后的文件进行重命名，例如rand(10,99）.date("YmdHis"）.”jpg”
4.9暴力破解
4.9.1介绍暴力破解漏洞
暴力破解的产生是由于服务器端没有做限制，导致攻击者可以通过暴力的手段
---
## Page 190
第4章Web安全原理剖析171
破解所需信息，如用户名、密码、验证码等。暴力破解需要一个庞大的字典，如4位
数字的验证码，那么暴力破解的范围就是0000~9999，暴力破解的关键在于字典的大小。
4.9.2暴力破解漏洞攻击
暴力破解攻击的测试地址为htp:/127.0.0.1/bp.html。
一般情况下，系统中都存在管理账号：admin，下面我们就尝试破解admin的密
码，首先用户名处输入账号admin，接着随便输入一个密码，使用BuwpSuite抓包，
在Infrader中选中密码处爆破，导入密码字典并开始爆破，如图4-117所示。可以看到，
有一个数据包的Length值跟其他的都不一样，这个数据包中的Payload就是爆破成功
的密码，如图4-118所示。
-0s,
seoter 1
图4-117 Burp的Intruder模块
1214
dragon
图4-118暴力破解的结果
---
## Page 191
172Web安全攻防：渗造测试实战指南
4.9.3暴力破解漏洞代码分析
服务端处理用户登录的代码如下所示，程序获取POST参数usermame和参数
password，然后在数据库中查询输入的用户名和密码是否存在，如果存在，则登录成
功。但是这里没有对登录的次数做限制，所以只要用户一直尝试登录，就可以进行
暴力破解。
4.9.4暴力破解漏洞修复建议
针对暴力破解漏润的修复，笔者给出以下两点建议。
·如果用户登录次数超过设置的阅值，则锁定账号。
·如果某个IP登录次数超过设置的闽值，则锁定IP。
锁定IP存在的一个问题是：如果多个用户使用的是同一个IP，则会造成其他用户
也不能登录。
---
## Page 192
第4章Web安全原理剖析173
4.10命令执行
4.10.1介绍命令执行漏洞
应用程序有时需要调用一些执行系统命令的函数，如在PHP中，使用system、exec、
shell_exec、passthru、popen、proc_popen等函数可以执行系统命令。当黑客能控制这
些函数中的参数时，就可以将恶意的系统命令拼接到正常命令中，从而造成命令执
行攻击，这就是命令执行漏洞。
4.10.2命令执行漏洞攻击
命令执行攻击的测试地址：http:/127.0.0.1/1.php?ip=127.0.0.1。
页面1.php提供了ping的功能，当给参数IP输入127.0.0.1时，程序会执行ping
127.0.0.1，然后将ping的结果返回到页面上，如图4-119所示。
 NT 10B:
CuaetUenet.3et
正R.127
图4-119执行ping 127.0.0.1
而如果将参数IP设置为127.0.0.1|dir，然后再次访间，从返回结果可以看到，程
序直接将目录结构返回到页面上了，这里就利用了管道符“”让系统执行了命令dir，
如图4-120所示。
---
## Page 193