title:SysPal: System-Guided Pattern Locks for Android
author:Geumhwan Cho and
Jun Ho Huh and
Junsung Cho and
Seongyeol Oh and
Youngbae Song and
Hyoungshick Kim
2017 IEEE Symposium on Security and Privacy
SysPal: System-guided Pattern Locks for Android
Geumhwan Cho1, Jun Ho Huh2, Junsung Cho1, Seongyeol Oh1, Youngbae Song1, Hyoungshick Kim1
1Department of Computer Science and Engineering, Sungkyunkwan University, South Korea
2Software R&D Center, Samsung Electronics, South Korea
Email: {geumhwan, js.cho, seongyeol, youngbae, hyoung}@skku.edu
PI:EMAIL
Abstract—To improve the security of user-chosen Android
screen lock patterns, we propose a novel system-guided pattern
lock scheme called “SysPal” that mandates the use of a small
number of randomly selected points while selecting a pattern.
Users are given the freedom to use those mandated points at any
position.
We conducted a large-scale online study with 1,717 partic-
ipants to evaluate the security and usability of three SysPal
policies, varying the number of mandatory points that must be
used (upon selecting a pattern) from one to three. Our results
suggest that the two SysPal policies that mandate the use of one
and two points can help users select signiﬁcantly more secure
patterns compared to the current Android policy: 22.58% and
23.19% fewer patterns were cracked. Those two SysPal policies,
however, did not show any statistically signiﬁcant inferiority in
pattern recall success rate (the percentage of participants who
correctly recalled their pattern after 24 hours). In our lab study,
we asked participants to install our screen unlock application
on their own Android device, and observed their real-life phone
unlock behaviors for a day. Again, our lab study did not show
any statistically signiﬁcant difference in memorability for those
two SysPal policies compared to the current Android policy.
I. INTRODUCTION
To help Android users select memorable and secure au-
thentication secrets, Google introduced a graphical password
scheme in 2008 based on “Pass-Go” [23]. Android users are
asked to select and remember a graphical pattern on a 3 × 3
grid – this scheme is interchangeably referred to as “Android
pattern lock,” “Android pattern unlock,” or “Android screen
lock pattern.” The Android pattern lock scheme, with its strong
usability [27], has quickly emerged as the most popular screen
locking method for Android devices [25]. Graphical patterns
are also used to protect mobile payment applications. For
example, PayNow (http://www.paynow.co.kr) is a popularly
used mobile payment application (with more than one million
users) that requires users to prove their identity using a pattern
before processing a payment.
However, as with any user-chosen password scheme, people
still choose easy-to-remember patterns that are also easy
to guess. Previous studies [22, 24] showed that the actual
password space of user-chosen patterns is much smaller than
the theoretical space of 389,112 possible patterns. Even though
the real-world pattern space is probably larger than the real-
world 4-digit PIN space [22], user-chosen patterns are still
weak against guessing attacks [4].
To mitigate guessing attacks, Android enforces a policy
that only allows up to 20 consecutive fail unlock attempts.
However, even with the fail-attempt
limit policy used on
Android (allowing maximum 20 guesses), attackers could still
successfully guess a signiﬁcant portion of user-chosen patterns
(about 16.7% [4]). Pattern strength meters [22] and the use of
a bigger grid (e.g., 4×4) layout [4] have been suggested as a
way to help users select stronger patterns. The impact of such
solutions are limited though: about 20% of user patterns were
still cracked when a 4×4 grid was used [4], and even with the
pattern strength meter in place, user behavior in choosing the
starting (ﬁrst position) point was still strongly biased [22].
To overcome the security limitations of user-chosen pat-
terns, we propose a novel, system-guided pattern selection
scheme called “SysPal” (System-guided Pattern locks). Our
goal was to improve the security of existing Android screen
lock patterns against guessing attacks while following four
design principles: (i) minimize additional memorability burden
on users, (ii) keep the authentication or unlock time similar,
(iii) make them easy to learn and use, and (iv) avoid signiﬁcant
software or hardware changes. SysPal mandates users to use
a few randomly chosen points (at any position) upon selecting
a pattern, guiding users to deviate from their normal, biased
pattern selection behaviors. Various user persuasion tech-
niques [10, 12, 15, 21] for improving password security have
been proposed before. Such persuasion techniques and SysPal
share a common goal of helping users move away from their
biased password selection behaviors (that are easy to guess).
Nevertheless, SysPal differentiates itself from other techniques
by mandating the use of random points but also giving users
the freedom to use those points at any position upon selecting a
pattern (i.e., not necessarily as a starting point). SysPal aims to
improve the security of an existing graphical password scheme
that is popularly used with minimal compromise in usability.
To evaluate the security and usability of SysPal patterns,
we conducted a large-scale online user study, recruiting a
total of 1,717 participants through Amazon Mechanical Turk.
We tested our approach by varying the “number of mandated
points” that must be used upon selecting a pattern from one
to three. We compared the security and recall success rate
(percentage of users who successfully recalled their pattern
after approximately 2 minutes, 15 minutes, and 24 hours)
of those SysPal patterns against both the randomly-generated
patterns and original Android patterns.
Our evaluation results suggest
that SysPal signiﬁcantly
improves the security of patterns compared with the original
Android patterns while producing similar recall success rates.
Our lab study, conducted on 46 participants, conﬁrmed this
observation, showing that the memorability of SysPal patterns
© 2017, Geumhwan Cho. Under license to IEEE.
DOI 10.1109/SP.2017.61
338
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:42 UTC from IEEE Xplore.  Restrictions apply. 
are not statistically inferior compared to original patterns. To
achieve strong ecological validity, we implemented an Android
screen lock application that uses the SysPal policies, and
asked the participants to use it on their own phone for a
day. Whenever the participants tried to unlock their phone,
the application asked them to enter a pattern created under
the SysPal policies, and recorded success and fail attempts.
Meanwhile, the performance of our Markov model-based
guessing attack signiﬁcantly decreased, cracking 32.55% of
original patterns compared to cracking just 9.36% of SysPal
patterns when two random points were mandated. Interest-
ingly,
increasing the number of mandated points did not
improve the security against guessing attacks. This implies
that the number of mandated points needs to be decided with
caution.
We summarize the key contributions of this paper as fol-
lows:
1) We proposed SysPal, a novel system-guided pattern
selection scheme for improving the security of Android
patterns.
2) We performed a large-scale empirical evaluation of
three SysPal policies, which suggests that SysPal can
signiﬁcantly improve pattern security with just small
compromise in recall success rates.
3) We also performed a lab study to test SysPal under real-
life unlock scenarios, which suggests that the difference
in memorability between SysPal patterns and original
Android patterns is not statistically signiﬁcant.
4) We performed a large-scale empirical comparison of
randomly-generated patterns with the original Android
patterns. Our results showed that the recall success rate
of randomly-generated patterns is about 21.80% lower.
The rest of paper is organized as follows. Section II de-
scribes an attack scenario. Section III describes how the user
study was designed. Sections IV and V present the key usabil-
ity and security results, respectively. Section VI presents the
results of a separate lab study. Section VII discusses how the
results match up to our hypotheses. Related work is covered
in Section VIII, and our conclusions are in Section IX.
II. BACKGROUND
A. Android screen lock patterns
Android screen lock pattern is one of the most widely
adopted graphical password schemes [2]. Users have to re-
member a pattern consisting of consecutive segments (lines
connecting two points) on a 3 × 3 grid. During registration,
users are asked to select a secret pattern. Then users are asked
to recall their secret pattern upon authentication, and draw it
on the grid to unlock their Android device (see Figure 1(a)).
For notational convenience, the following conventions are
adopted throughout the paper: the 9 points on the grid are
numbered (indexed) from 1, starting with the point located
at the top left corner, to 9, which is the point located at the
bottom right corner of the grid (see Figure 1(b)). A segment
in a pattern is deﬁned as “a line that connects two points”
339
(a) Android pattern
(b) Numbers on 3 × 3 grid
Fig. 1: Android screen lock pattern example, and the indexing
numbers assigned to each of the 9 points on the 3 × 3 grid.
together. The original Android pattern policy requires a pattern
to consist of at least four points, and prevents a point from
being used more than once in a given pattern.
B. Threat model for Android patterns
There are many known attacks against Android patterns,
including smudge attacks [2, 5, 9], sensor-based side channel
attacks [6], shoulder surﬁng attacks [26, 29], and guessing
attacks [4, 22, 24]. This paper only focuses on evaluating
the robustness of SysPal patterns against a pattern dictionary-
based guessing attack that involves an attacker getting access
to an Android device, and trying out most likely patterns ﬁrst
to unlock it.
the total number of all possible patterns is
In theory,
389,112 (≈ 218), which is much larger than the password
space of 10,000 4-digits PINs. Despite this relatively larger
password space, users still choose weak patterns that are easily
guessable [22, 24]. To mitigate guessing attacks performed on
such weak patterns, Android only allows up to 20 consecutive
fail unlock attempts. If a user fails to draw the correct unlock
pattern within 5 attempts, the device is temporally locked
for 30 seconds; after 20 consecutive fail attempts, Android
displays the “Too many pattern attempts” error message, and
asks the user to log in with a Google account to unlock
the device. That is, the attacker cannot try more than 20
attempts. Thus, we assume that the attacker’s goal is to unlock
a target device within 20 trials. Intuitively, if the attacker
has no information about the pattern being used, the best
attack strategy would be to try the top 20 most commonly
used patterns ﬁrst. The attacker could use a probabilistic
password model [19] such as the n-gram Markov model (this
is explained further in Section V), training a Markov model
using a real-world set of Android patterns to ﬁnd the top 20
patterns.
III. METHODOLOGY
This section lists our research questions and hypotheses, and
explains the user study design. Our work was motivated by the
following research question: “Can we design security policies
for Android screen lock patterns to improve their security
without signiﬁcantly compromising their usability?”
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:42 UTC from IEEE Xplore.  Restrictions apply. 
(a) Original
(b) 1-Point
(d) 3-Point
Fig. 2: Initial setup screen examples for the ﬁve policies tested.
(c) 2-Point
(e) Random
Based on the research question, we deﬁned the follow-
ing three hypotheses: (H1) The security of SysPal patterns
strengthens with the increase in the number of mandated
points; (H2) The memorability of SysPal patterns decreases
with the increase in the number of mandated points; (H3) A
SysPal policy that shows no statistically signiﬁcant difference
in memorability against
the original Android patterns has
better security than those original patterns. The user study and
experiments were designed to validate the above hypotheses.
In Section VII, we discuss how the study results match up to
those hypotheses.
A. SysPal policies
Each SysPal policy deﬁnes the number of randomly-selected
mandated point(s) that must be used once upon selecting a
pattern (see Table I). To test Hypotheses 1 and 2, we created
SysPal policies from 1-Point to 3-Point, increasing the
number of mandated points. We only focused on those three
SysPal policies because mandating too many points could
potentially reduce the overall password space. We evaluated
the performance of those SysPal policies compared against
the original Android policy: policy Original was created
to replicate the real-world Android pattern policy that requires
a pattern to consist of at least four points, and a point to be
used only once. It was used to test hypothesis 3. Finally, we
considered randomly generated patterns named Random as the
most ideal pattern policy for security. We were also interested
in comparing the security of SysPal patterns against system-
generated, random patterns. Figure 2 shows initial setup screen
examples for the ﬁve policies we experimented with. For
Random patterns (see Figure 2-(e)), starting points and ending
points are obvious as users are presented with animations
showing how patterns start and end. In our experiments, each
policy was used as a separate experimental condition.
B. User study design
We evaluated the effectiveness of the ﬁve policies (see
Table I) through quantitative experiments conducted using
Amazon Mechanical Turk. Before starting the study, partic-
ipants were asked to acknowledge a consent form, which
explained the study purposes and instructions, and informed
TABLE I: Description of the ﬁve policies we experimented
with.
Policy
Original
1-Point
2-Point
3-Point
Random
Description
Users should choose a pattern based on the
following rules: (1) at least four points need
to be used, (2) a point can only be used
once, and (3) an unused point can not be
jumped over.
Users should choose a pattern that uses one
randomly assigned point.
Users should choose a pattern that uses two
randomly assigned points.
Users should choose a pattern that uses
three randomly assigned points.
Given a system-generated random pattern,
users should remember that pattern.
that participations are voluntary and conﬁdential, and they
have the right to terminate the study any time without penalty.
Data were collected conﬁdentially only for the purposes of
conducting statistical analyses. Ethical perspective of our
research was validated through an institutional review board
(IRB) at a university.
to install
To evaluate the SysPal policies in a realistic setting, we
developed an Android application that simulates the real-world
Android pattern setup and unlock tasks. Using that application,
we collected the participants’ behavioral data to examine how
they choose a pattern and use it to unlock their device. We
only recruited individuals who own an Android device. Only
when a participant agreed with our consent form, we asked
the participant
the application on their Android
device. After starting the application, the participant was asked
to select a pattern under one of the ﬁve policies (randomly
assigned). We used between-subject comparisons of the ﬁve
policies to avoid order effects. While selecting a pattern, the
participants were given an option to “initialize” (reset) the grid
unlimited number of times to start from the beginning if they
wanted to. For the SysPal policies, the mandated points were
ﬁxed though, and did not change upon initialization. For those
assigned to the Random policy, initialization allowed them to
completely reset a given random pattern if they wanted to use
a different one.
340
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:42 UTC from IEEE Xplore.  Restrictions apply. 
Our user study was designed following the Atkinson-
Shiffrin dual memory model [3]. This model postulates that
human memories initially reside in a “short-term” memory
for a limited time (20 to 30 seconds). Short-term memory has
limited capacity and older items are wiped as new items enter.
Further, rehearsing or recalling items while they are in the
short-term memory causes the items to stay longer in the short-
term memory. Based on Atkinson-Shiffrin memory model,
each participant was ﬁrst asked to complete two training tasks
(for rehearsing) to help the participant remember the selected
pattern (for associating long-term memory with that pattern).
Next, the participant was asked to complete a graphical puzzle,
which was intended to wipe out the participant’s short-term
memory of the selected pattern information (with new items)
during the process. After solving the puzzle, the participant
was asked to complete three pattern recall tests (at different
time intervals) to check whether the participant can remember
the selected pattern over time.
The following paragraphs present details of the data col-
lection procedures in the order participants were asked to
complete them.
1. Pattern setup: Each participant was randomly assigned
to one of the ﬁve policies in Table I. For all SysPal policies,
randomly selected points were highlighted with yellow circles
(see Figure 2). Participants assigned to the SysPal policies
were asked to generate a pattern that must use all of those
highlighted points. Those assigned to the Original policy
were asked to generate a pattern based on the original Android
pattern setup rules (see Table I). Those assigned to the
Random policy were asked to remember the given randomly
generated pattern as is.
2. Pattern memorization: Each participant was asked to
draw the correct pattern two times to help with memorization.
If incorrect patterns were entered ﬁve times consecutively, the
correct pattern was revealed again so that the participant would
have another chance to memorize it.
3. Puzzle: Each participant was asked to complete a mod-
erately challenging lexical and graphical puzzle, which takes
about 2 minutes to complete.
4. Demographics questions: Each participant was asked
demographic questions such as ethnicity, age, gender and level
of education.
5. Draw pattern: Each participant was asked to draw his
or her chosen pattern within ﬁve attempts (In Android, if a
user fails to draw the correct pattern within ﬁve attempts, his
or her device is temporally locked for 30 seconds).
6. Survey questions: After completing the pattern recall
test (at step 5), participants were asked to answer the survey
questions listed in Table II. Only those who correctly recalled