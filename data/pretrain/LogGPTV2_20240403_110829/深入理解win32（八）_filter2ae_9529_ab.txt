完整代码如下
    void PrintResourceTable()
    {
        //定义windows自带的资源
        static char* szResName[0x11] = 
        { 0, "鼠标指针", "位图", "图标", "菜单", "对话框", "字符串列表",
        "字体目录", "字体", "快捷键", "非格式化资源", "消息列表",
        "鼠标指针组", "zz", "图标组", "xx", "版本信息"
        };
        LPVOID FileBuffer = NULL;
        PIMAGE_DOS_HEADER pDosHeader = NULL;
        PIMAGE_NT_HEADERS pNTHeader = NULL;
        PIMAGE_FILE_HEADER pPEHeader = NULL;
        PIMAGE_OPTIONAL_HEADER32 pOptionHeader = NULL;
        PIMAGE_SECTION_HEADER pSectionHeader = NULL;
        PIMAGE_IMPORT_DESCRIPTOR pImport = NULL;
        PIMAGE_BOUND_IMPORT_DESCRIPTOR pBoundImport = NULL;
        PIMAGE_RESOURCE_DIRECTORY pResource = NULL;
        PIMAGE_RESOURCE_DIRECTORY  pResourceDirectory = NULL;
        DWORD NumEntry = NULL;
        DWORD NumEntry2 = NULL;
        DWORD dwResourceData = NULL;
        DWORD FileAddress = NULL;
        PDWORD pSectionAddress = NULL;
        FileToFileBuffer((char*)IN_path, &FileBuffer);
        if (!FileBuffer)
        {
            printf("File->FileBuffer失败");
            return;
        }
        pDosHeader = (PIMAGE_DOS_HEADER)FileBuffer;
        pNTHeader = (PIMAGE_NT_HEADERS)((DWORD)pDosHeader + pDosHeader->e_lfanew);
        pPEHeader = (PIMAGE_FILE_HEADER)((DWORD)pNTHeader + 4); 
        pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((DWORD)pPEHeader + IMAGE_SIZEOF_FILE_HEADER);
        pSectionHeader = (PIMAGE_SECTION_HEADER)((DWORD)pOptionHeader + pPEHeader->SizeOfOptionalHeader);
        //定位资源目录
        FileAddress = RvaToFoa((char*)IN_path, pOptionHeader->DataDirectory[2].VirtualAddress) + (DWORD)FileBuffer;
        pResource = (PIMAGE_RESOURCE_DIRECTORY)FileAddress;
        //printf("NumberOfNamedEntries:%d,NumberOfIdEntries:%d\n", pResource->NumberOfNamedEntries, pResource->NumberOfIdEntries);
        //获取Resourceentry个数
        NumEntry = pResource->NumberOfNamedEntries + pResource->NumberOfIdEntries;
        //资源目录表的宽度
        dwResourceData = sizeof(PIMAGE_RESOURCE_DIRECTORY);
        //定位资源目录节点
        PIMAGE_RESOURCE_DIRECTORY_ENTRY pResEntry = (PIMAGE_RESOURCE_DIRECTORY_ENTRY)((DWORD)pResource + 16);
        //第一层
        for( int i = 0; i  0x11则为自己写的资源
                {
                    printf("First floor->资源ID:%p,资源名称:%s\n", pResEntry[i].Id, szResName[pResEntry[i].Id]);
                }
                else    
                {
                    char type[20];
                    sprintf(type, "%d", pResEntry[i].Id);
                    printf("First floor->资源ID:%p,资源名称:%s\n", pResEntry[i].Id, type);
                }
            }
            else    //最高位为1,指向结构体
            {
                //获取偏移
                PIMAGE_RESOURCE_DIR_STRING_U pStringRes = (PIMAGE_RESOURCE_DIR_STRING_U)((DWORD)pResource + pResEntry[i].NameOffset);
                //定义一个用来接收自定义字符串的宽数组然后直接复制
                WCHAR szStr[MAX_PATH] = { 0 };
                memcpy(szStr, pStringRes->NameString, pStringRes->Length*sizeof(WCHAR));
                printf("First floor->资源名称:%ls \n", szStr);
            }
            //第二层
            if (pResEntry[i].DataIsDirectory)    //目录项指针为1
            {
                printf("Second floor->目录偏移:%p\n", pResEntry[i].OffsetToDirectory);
                //定义指向第二层目录的指针
                PIMAGE_RESOURCE_DIRECTORY pResource2 = (PIMAGE_RESOURCE_DIRECTORY)((DWORD)pResource + pResEntry[i].OffsetToDirectory);
                PIMAGE_RESOURCE_DIRECTORY_ENTRY pResEntry2 = (PIMAGE_RESOURCE_DIRECTORY_ENTRY)((DWORD)pResource2 + 16);
                //获取Resourceentry个数
                NumEntry2 = pResource2->NumberOfIdEntries + pResource2->NumberOfNamedEntries;
                for (int i = 0 ; i 资源表示ID:%d\n", pResEntry2[i].Id);
                    }
                    else
                    {
                        //获取偏移
                        PIMAGE_RESOURCE_DIR_STRING_U pStringRes2 = (PIMAGE_RESOURCE_DIR_STRING_U)((DWORD)pResource + pResEntry2[i].NameOffset);
                        //定义一个用来接收自定义字符串的宽数组然后直接复制
                        WCHAR szStr2[MAX_PATH] = { 0 };
                        memcpy(szStr2, pStringRes2->NameString, pStringRes2->Length*sizeof(WCHAR));
                        printf("Second floor->资源字符串:%ls \n", szStr2);
                    }
                }
                //第三层
                //定义指向第三层目录的指针
                PIMAGE_RESOURCE_DIRECTORY pResource3 = (PIMAGE_RESOURCE_DIRECTORY)((DWORD)pResource + pResEntry2[i].OffsetToDirectory);
                PIMAGE_RESOURCE_DIRECTORY_ENTRY pResEntry3 = (PIMAGE_RESOURCE_DIRECTORY_ENTRY)((DWORD)pResource3 + 16);
                printf("Third floor->资源:%d\n", pResource3[i].Characteristics);
                if(!pResEntry3[i].DataIsDirectory)
                {
                    //取数据偏移
                    PIMAGE_RESOURCE_DATA_ENTRY pResData = (PIMAGE_RESOURCE_DATA_ENTRY)((DWORD)pResource + pResEntry3->OffsetToData);
                    printf("Third floor->数据RVA:%x,数据大小:%x\n", pResData->OffsetToData, pResData->Size);
                }
            }
            printf("\n\n");
        }
    }
这里通过我们的代码解析跟程序解析进行对比相同，证明解析成功