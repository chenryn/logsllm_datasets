**例 2.9. 使用变量和内置功能隔离 CPU 内核**
::: example-contents
在以下示例中, `${non_isolated_cores}`{.literal} 变量扩展至
`0,3-5`{.literal}，且 `cpulist_invert`{.literal} 内置函数使用
`0,3-5`{.literal} 参数调用：
``` screen
[variables]
non_isolated_cores=0,3-5
[bootloader]
cmdline=isolcpus=${f:cpulist_invert:${non_isolated_cores}}
```
`cpulist_invert`{.literal} 功能反转 CPU 列表。对于 6-CPU 机器，inversion
为 `1,2`{.literal}，内核通过 `isolcpus=1,2`{.literal} 命令行选项引导。
:::
:::
::: itemizedlist
**其他资源**
-   `tuned.conf(5)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#customizing-tuned-profiles_monitoring-and-managing-system-status-and-performance.html#built-in-functions-available-in-tuned-profiles_customizing-tuned-profiles}TuneD 配置集中的内置功能 {.title}
:::
所有 [**TuneD**]{.strong} 配置集中都有以下内置功能：
::: variablelist
[`PROFILE_DIR`{.literal}]{.term}
:   返回配置文件和 `tuned.conf`{.literal} 文件所在的目录路径。
[`exec`{.literal}]{.term}
:   执行进程并返回其输出。
[`assertion`{.literal}]{.term}
:   比较两个参数。如果[*不匹配*]{.emphasis}，会在日志中记录来自第一个参数的信息，并中止配置集加载。
[`assertion_non_equal`{.literal}]{.term}
:   比较两个参数。如果[*不匹配*]{.emphasis}，会在日志中记录来自第一个参数的信息，并中止配置集加载。
[`kb2s`{.literal}]{.term}
:   将 KB 转换为磁盘扇区.
[`s2kb`{.literal}]{.term}
:   将磁盘扇区转换为 KB。
[`strip`{.literal}]{.term}
:   从所有传递的参数创建字符串，并删除前导和尾随空格。
[`virt_check`{.literal}]{.term}
:   检查 [**TuneD**]{.strong} 是否在虚拟机(VM)或裸机中运行：
    ::: itemizedlist
    -   在虚拟机内部，函数返回第一个参数。
    -   在裸机上，函数返回第二个参数，即使出现错误。
    :::
[`cpulist_invert`{.literal}]{.term}
:   颠倒 CPU 列表，使其补充。例如，在一个有 4 个 CPU 的系统上，从 0 到
    3，列表 `0,2,3`{.literal} 的反转是 `1`{.literal}。
[`cpulist2hex`{.literal}]{.term}
:   将 CPU 列表转换为十六进制 CPU 掩码。
[`cpulist2hex_invert`{.literal}]{.term}
:   将 CPU 列表转换为十六进制 CPU 掩码并进行反转。
[`hex2cpulist`{.literal}]{.term}
:   将十六进制 CPU 掩码转换为 CPU 列表。
[`cpulist_online`{.literal}]{.term}
:   检查列表中的 CPU 是否在线。返回仅包含在线 CPU 的列表。
[`cpulist_present`{.literal}]{.term}
:   检查列表中是否存在 CPU。返回只包含当前 CPU 的列表。
[`cpulist_unpack`{.literal}]{.term}
:   解包 CPU 列表，格式为 `1-3,4`{.literal} 到 `1,2,3,4`{.literal}。
[`cpulist_pack`{.literal}]{.term}
:   把包 CPU 列表，格式为 `1,2,3,5`{.literal} 到 `1-3,5`{.literal}
:::
:::
::: section
::: titlepage
# []{#customizing-tuned-profiles_monitoring-and-managing-system-status-and-performance.html#creating-new-tuned-profiles_customizing-tuned-profiles}创建新的 TuneD 配置集 {.title}
:::
此流程使用自定义性能配置集创建一个新的 [**TuneD**]{.strong} 配置集。
::: itemizedlist
**先决条件**
-   `tuned`{.literal} 服务正在运行。详情请参阅[安装和启用
    TuneD](#getting-started-with-tuned_monitoring-and-managing-system-status-and-performance.html#installing-and-enabling-tuned_getting-started-with-tuned "安装并启用 TuneD"){.link}。
:::
::: orderedlist
**步骤**
1.  在 `/etc/tuned/`{.literal}
    目录中，创建一个名为您要创建的配置集的新目录：
    ``` screen
    # mkdir /etc/tuned/my-profile
    ```
2.  在新目录中，创建名为 `tuned.conf`{.literal}
    的文件。根据您的要求，添加一个 `[main]`{.literal} 部分和插件定义。
    例如，查看 `balanced`{.literal} 配置集的配置：
    ``` screen
    [main]
    summary=General non-specialized tuned profile
    [cpu]
    governor=conservative
    energy_perf_bias=normal
    [audio]
    timeout=10
    [video]
    radeon_powersave=dpm-balanced, auto
    [scsi_host]
    alpm=medium_power
    ```
3.  要激活配置集，请使用：
    ``` screen
    # tuned-adm profile my-profile
    ```
4.  验证 [**TuneD**]{.strong} 配置集是否活跃，并应用了系统设置：
    ``` screen
    $ tuned-adm active
    Current active profile: my-profile
    ```
    ``` screen
    $ tuned-adm verify
    Verfication succeeded, current system settings match the preset profile.
    See tuned log file ('/var/log/tuned/tuned.log') for details.
    ```
:::
::: itemizedlist
**其他资源**
-   `tuned.conf(5)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#customizing-tuned-profiles_monitoring-and-managing-system-status-and-performance.html#modifying-existing-tuned-profiles_customizing-tuned-profiles}修改现有 TuneD 配置集 {.title}
:::
此流程根据现有的 [**TuneD**]{.strong} 配置集创建修改后的子配置集。
::: itemizedlist
**先决条件**
-   `tuned`{.literal} 服务正在运行。详情请参阅[安装和启用
    TuneD](#getting-started-with-tuned_monitoring-and-managing-system-status-and-performance.html#installing-and-enabling-tuned_getting-started-with-tuned "安装并启用 TuneD"){.link}。
:::
::: orderedlist
**步骤**
1.  在 `/etc/tuned/`{.literal}
    目录中，创建一个名为您要创建的配置集的新目录：
    ``` screen
    # mkdir /etc/tuned/modified-profile
    ```
2.  在新目录中，创建一个名为 `tuned.conf`{.literal}
    的文件，并按如下所示设置 `[main]`{.literal} 部分：
    ``` screen
    [main]
    include=parent-profile
    ```
    使用您要修改的配置集的名称替换
    [*[parent-profile]{.replaceable}*]{.emphasis}。
3.  包括您的配置集修改。
    ::: example
    []{#customizing-tuned-profiles_monitoring-and-managing-system-status-and-performance.html#idm140048849385616}
    **例 2.10. 在 throughput-performance 配置集中降低 swappiness**
    ::: example-contents
    要使用 `throughput-performance`{.literal} 配置集的设置，并将
    `vm.swappiness`{.literal} 的值改为 5，而不是默认的 10，请使用：
    ``` screen
    [main]
    include=throughput-performance
    [sysctl]
    vm.swappiness=5
    ```
    :::
    :::
4.  要激活配置集，请使用：
    ``` screen
    # tuned-adm profile modified-profile
    ```
5.  验证 [**TuneD**]{.strong} 配置集是否活跃，并应用了系统设置：
    ``` screen
    $ tuned-adm active
    Current active profile: my-profile
    ```
    ``` screen
    $ tuned-adm verify
    Verfication succeeded, current system settings match the preset profile.
    See tuned log file ('/var/log/tuned/tuned.log') for details.
    ```
:::
::: itemizedlist
**其他资源**
-   `tuned.conf(5)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#customizing-tuned-profiles_monitoring-and-managing-system-status-and-performance.html#setting-the-disk-scheduler-using-tuned_customizing-tuned-profiles}使用 TuneD 设置磁盘调度程序 {.title}
:::
此流程创建并启用 [**TuneD**]{.strong}
配置集，该配置集为所选块设备设置给定磁盘调度程序。这个设置会在系统重启后保留。
在以下命令和配置中替换：
::: itemizedlist
-   带有块设备名称的 [*device*]{.emphasis}，如 `sdf`{.literal}
-   带有您要为该设备设置的磁盘调度程序的
    [*selected-scheduler*]{.emphasis}，例如 `bfq`{.literal}
:::
::: itemizedlist
**先决条件**
-   `tuned`{.literal} 服务已安装并启用。详情请参阅[安装和启用
    TuneD](#getting-started-with-tuned_monitoring-and-managing-system-status-and-performance.html#installing-and-enabling-tuned_getting-started-with-tuned "安装并启用 TuneD"){.link}。
:::
::: orderedlist
**步骤**
1.  可选：选择您的配置集将基于的一个现有 [**TuneD**]{.strong}
    配置集。有关可用配置集列表，请参阅 [RHEL 提供的 TuneD
    配置集](#getting-started-with-tuned_monitoring-and-managing-system-status-and-performance.html#tuned-profiles-distributed-with-rhel_getting-started-with-tuned "RHEL 提供的调优配置集"){.link}。
    要查看哪个配置集当前处于活跃状态，请使用：
    ``` screen
    $ tuned-adm active
    ```
2.  创建一个新目录来保存 [**TuneD**]{.strong} 配置集：
    ``` screen
    # mkdir /etc/tuned/my-profile
    ```
3.  查找所选块设备系统唯一标识符：
    ``` screen
    $ udevadm info --query=property --name=/dev/device | grep -E '(WWN|SERIAL)'
    ID_WWN=0x5002538d00000000_
    ID_SERIAL=Generic-_SD_MMC_20120501030900000-0:0
    ID_SERIAL_SHORT=20120501030900000
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    本例中的命令将返回以 World Wide
    Name(WWN)或与指定块设备关联的序列号的所有值。虽然最好使用
    WWN，但给定设备始终不能使用 WWN，但 example
    命令返回的任何值都可以接受用作 [*device system unique
    ID*]{.emphasis}。
    :::
4.  创建 `/etc/tuned/my-profile/tuned.conf`{.literal}
    配置文件。在该文件中设置以下选项：
    ::: orderedlist
    1.  可选：包括一个现有的配置集：
        ``` screen
        [main]
        include=existing-profile
        ```
    2.  为与 WWN 标识符匹配的设备设置所选磁盘调度程序：
        ``` screen
        [disk]
        devices_udev_regex=IDNAME=device system unique id
        elevator=selected-scheduler
        ```
        在这里：
        ::: itemizedlist
        -   使用要使用的标识符的名称替换 [*IDNAME*]{.emphasis} （如
            `ID_WWN`{.literal}）。
        -   将 [*device system unique id*]{.emphasis}
            替换为所选标识符的值（如 `0x5002538d00000000`{.literal}）。
            要匹配 `devices_udev_regex`{.literal}
            选项中的多个设备，将标识符放在括号中，并使用垂直栏来分离它们：
            ``` screen
            devices_udev_regex=(ID_WWN=0x5002538d00000000)|(ID_WWN=0x1234567800000000)
            ```
        :::
    :::
5.  启用您的配置集：
    ``` screen
    # tuned-adm profile my-profile
    ```