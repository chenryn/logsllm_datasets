postgres=# create trigger tg3 after insert on v_digoal for each statement execute procedure debug();  
CREATE TRIGGER  
postgres=# create trigger tg01 before insert on v_digoal for each statement execute procedure debug();  
CREATE TRIGGER  
postgres=# create trigger tg02 instead of insert on v_digoal for each row execute procedure debug();  
CREATE TRIGGER  
postgres=# create trigger tg03 after insert on v_digoal for each statement execute procedure debug();  
CREATE TRIGGER  
```  
-- 测试  
```  
postgres=# insert into v_digoal values (2);  
NOTICE:  00000: tg01  -- 第1被触发的是tg01, before for each statement, 同类触发器tg01按字母顺序排在tg1的前面.  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg1  -- 第2被触发的是tg1, before for each statement  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg02  -- 第3被触发的是tg02, instead of for each row, 同类触发器tg02按字母顺序排在tg2的前面.  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg2  -- 第4被触发的是tg2, instead of for each row  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg03  -- 第5被触发的是tg03, after for each statement, 同类触发器tg03按字母顺序排在tg3的前面.  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg3  -- 第6被触发的是tg3, after for each statement  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
INSERT 0 1  
```  
补充:   
如果在一个表上有多个触发器, 他们是什么顺序被触发?    
- 与“表级、行级、before、after、instead of、触发器的返回值、触发器的名字”都有关系.     
如果一个表在同一个级别、同样的before或者after或者instead of下有多个触发器, 那么按什么顺序触发?    
If more than one trigger is defined for the same event on the same relation, the triggers will be fired in alphabetical order by trigger name. In the case of BEFORE and INSTEAD OF triggers, the possibly-modified row returned by each trigger becomes the input to the next trigger. If any BEFORE or INSTEAD OF trigger returns NULL, the operation is abandoned for that row and subsequent triggers are not fired (for that row).  
https://www.postgresql.org/docs/devel/trigger-definition.html   
## 5. 同一个触发器函数可以被多个触发器调用吗?   
触发器函数的返回类型是什么?   
触发器函数的返回值是否会影响下一个触发器函数或者被操作的行的数据?   
NEW 或者OLD record修改后会带来什么影响? 哪些触发器函数的返回值没有意义?  
回答  
-- 同一个触发器函数可以多次被触发器调用, 上面的例子中表和视图的14个触发器中都是调用的debug()触发器函数.  
-- 触发器函数的返回值为空 或者是 表或视图对应的record类型.  
5\.1 返回值举例 :   
5\.1\.1 表触发器返回空测试  
-- 创建测试表  
```  
postgres=# create table t_ret (id int, info text, crt_time timestamp);  
CREATE TABLE  
```  
-- 创建触发器函数, 返回空.  
```  
postgres=# create or replace function tg_t_ret() returns trigger as $$                                 
declare  
begin  
  raise notice '%', TG_NAME;   
  return null;  
end;  
$$ language plpgsql;  
CREATE FUNCTION  
```  
-- 创建触发器  
```  
postgres=# create trigger tg1 before insert on t_ret for each statement execute procedure tg_t_ret();  
CREATE TRIGGER  
postgres=# create trigger tg2 before insert on t_ret for each row execute procedure tg_t_ret();  
CREATE TRIGGER  
postgres=# create trigger tg3 after insert on t_ret for each row execute procedure tg_t_ret();  
CREATE TRIGGER  
postgres=# create trigger tg4 after insert on t_ret for each statement execute procedure tg_t_ret();  
CREATE TRIGGER  
postgres=# create trigger tg01 before insert on t_ret for each statement execute procedure tg_t_ret();  
CREATE TRIGGER  
postgres=# create trigger tg02 before insert on t_ret for each row execute procedure tg_t_ret();  
CREATE TRIGGER  
postgres=# create trigger tg03 after insert on t_ret for each row execute procedure tg_t_ret();  
CREATE TRIGGER  
postgres=# create trigger tg04 after insert on t_ret for each statement execute procedure tg_t_ret();  
CREATE TRIGGER  
```  
-- 插入测试  
```  
postgres=# insert into t_ret values(1,'digoal',now());  
NOTICE:  00000: tg01, before for each statement的触发器函数返回空, 不影响后续的触发器是否被调用.  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg1  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg02, 注意在第一个before for each row触发器调用的触发器函数返回空后, 后续的for each row触发器将不被调用. 说明这个返回值传递给了下一个for each row触发器. 并且对后续的for each row触发器造成了影响.  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
-- 对表的操作发生在在最后一个before for each row触发器 和 第一个after for each row触发器之间.  
-- 因为前面的for each row触发器返回了空, 所以没有真正操作的行, 因此不会有记录被插入到表里面.  
-- 也就是没有发生表记录的操作.  
NOTICE:  00000: tg04, after for each statement的触发器函数返回空, 不影响后续的触发器是否被调用.  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg4  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
INSERT 0 0  
```  
-- 因为before for each row返回空, 所以无值插入  
```  
postgres=# select * from t_ret ;  
 id | info | crt_time   
----+------+----------  
(0 rows)  
```  
-- 这个将影响plpgsql函数中FOUND和ROW_COUNT变量的值.  
-- 把before for each row的触发器删掉, 再测试插入 :   
```  
postgres=# drop trigger tg02 on t_ret;  
DROP TRIGGER  
postgres=# drop trigger tg2 on t_ret;  
DROP TRIGGER  
postgres=# insert into t_ret values(1,'digoal',now());  
NOTICE:  00000: tg01  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg1  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg03, after for each row 的触发器函数返回空, 不影响后续的触发器是否被调用.  
因为只要表上面发生了真正的行操作, after for each row就会被触发, 除非when条件不满足. (这个后面会讲到)  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg3  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg04  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg4  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
INSERT 0 1  
```  
-- 有数据插入. 这也说明了before for each statement的返回值为空并不会影响数据库对行的操作. 只有before for each row的返回值会影响数据库对行的操作.  
```  
postgres=# select * from t_ret ;  
 id |  info  |          crt_time            
----+--------+----------------------------  
  1 | digoal | 2013-03-10 16:50:39.551481  
(1 row)  
```  
-- 针对上例, 对tg03触发器的触发加一个when条件.  
```  
postgres=# drop trigger tg03 on t_ret;  
DROP TRIGGER  
```  
-- 只有当表的行数据真正受到影响时, after for each row 触发器才会被触发, 加了when条件后, 则还需要判断这个条件.  
```  
postgres=# create trigger tg03 after insert on t_ret for each row when (new.info is not null) execute procedure tg_t_ret();  
CREATE TRIGGER  
```  
-- 因为new.info 为空, 不满足WHEN条件, 所以tg03没有被触发.  
```  
postgres=# insert into t_ret values(1,null,now());  
NOTICE:  00000: tg01  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg1  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg3  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg04  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg4  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
INSERT 0 1  
```  
5\.1\.2 表触发器返回record测试, NEW 或者OLD record修改后会带来什么影响?  
-- 前面的例子已经知道, for each statement的返回值对行的值以及for each row的触发器没有影响. 所以下面的例子都是针对for each row的.  
```  
INSERT before for each row 触发器函数 接收 NEW, 修改这个record对结果的影响是什么?  
```  
-- 创建测试表  
```  
postgres=# drop table t_ret ;  
DROP TABLE  
postgres=# create table t_ret(id int, info text, crt_time timestamp);  
CREATE TABLE  
```  
-- 创建触发器函数, 修改NEW并返回.  
```  
postgres=# create or replace function tg_t_ret() returns trigger as $$                               
declare  
begin  
  NEW.id := NEW.id+1;   
  raise notice '%, id:%', TG_NAME, NEW.id;   
  -- 修改NEW.id , 并返回修改后的NEW. 影响插入数据的并不是NEW变量本身,  而是return的值, 这个在后面将会有例子举证.  
  return NEW;  
end;  
$$ language plpgsql;  
CREATE FUNCTION  
```  
-- 创建触发器  
```  
postgres=# create trigger tg1 before insert ON t_ret for each row execute procedure tg_t_ret();  
CREATE TRIGGER  
```  
-- 注意INSERT语句中values提供的id=1, 但是注意插入到表里的ID是2. 因此before for each row的返回值对插入行这个动作造成了影响.  
```  
postgres=# insert into t_ret values (1,'digoal',now());  
NOTICE:  00000: tg1, id:2  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
INSERT 0 1  
```  
-- 插入的值被最后一个before for each row触发器函数的返回值取代, 篡改为2了:  
```  
postgres=# select * from t_ret;  
 id |  info  |          crt_time            
----+--------+----------------------------  
  2 | digoal | 2013-03-10 17:32:50.648323  
(1 row)  
```  
-- 用这个触发器函数, 更能看出多个触发器函数以及对行数据操作时使用的是触发器函数的返回值, 而不是NEW变量本身.  
```  
postgres=# \d t_ret  
                Table "public.t_ret"  
  Column  |            Type             | Modifiers   
----------+-----------------------------+-----------  
 id       | integer                     |   
 info     | text                        |   
 crt_time | timestamp without time zone |   
Triggers:  
    tg01 BEFORE INSERT ON t_ret FOR EACH ROW EXECUTE PROCEDURE tg_t_ret()  
    tg02 AFTER INSERT ON t_ret FOR EACH ROW EXECUTE PROCEDURE tg_t_ret()  
    tg1 BEFORE INSERT ON t_ret FOR EACH ROW EXECUTE PROCEDURE tg_t_ret()  
    tg2 AFTER INSERT ON t_ret FOR EACH ROW EXECUTE PROCEDURE tg_t_ret()  
```  
-- 触发器函数如下 :   
```  
postgres=# create or replace function tg_t_ret() returns trigger as $$                               
declare   
  -- r用来记录原始的NEW值, 并返回原始的NEW值.  
  r record;  
begin  
  -- 将NEW赋予给r.  
  r := NEW;   
  NEW.id := NEW.id+1;   
  raise notice '%, id:%', TG_NAME, NEW.id;   
  -- 修改NEW.id , 并返回修改前的NEW .   
  return r;  
end;  
$$ language plpgsql;  
CREATE FUNCTION  
```  
-- 插入测试数据  
```  
postgres=# insert into t_ret values (100,'digoal',now());  
NOTICE:  00000: tg01, id:101  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
-- 第1个before for each row 的触发器函数中原始NEW.id=100(来自SQL语句的输入), 返回值r.id=100. 但是NEW.id=101.  
NOTICE:  00000: tg1, id:101  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
-- 第2个before for each row 的触发器函数中原始NEW.id=100(来自上一个for each row函数的返回值), 返回值r.id=100. 但是NEW.id=101.  
-- 原始的NEW值没有因为第一个触发器函数的修改而改变, 这个触发器函数中的NEW继承了上一个before for each row触发器函数的返回值.  
-- 真正写入行的数据, 则是最后一个before for each row的返回值. 注意不是NEW变量的值. 而是最终的返回值.  
NOTICE:  00000: tg02, id:101  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg2, id:101  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
-- after for each row 的触发器函数中NEW值(统一来自真正被影响的行数据), 与前一个after for each row触发器的返回值无关. (下例举证)  
-- 当然这个NEW值也可以理解为(最后一个before for each row的返回值).  
INSERT 0 1  