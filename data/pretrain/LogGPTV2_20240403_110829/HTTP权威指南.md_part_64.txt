### 16.5.4 URI中的字符转义

在传输过程中，URI中的某些字符需要进行转义处理，而在内部处理时则需反转义。HTTP应用程序应当确保在传输和转发URI时保持其转义状态不变。仅在必要时才对URI进行转义，并且要保证任何URI不会被重复反转义两次。因为如果在第一次转义中百分号被编码进去，再经过一次转义可能会导致数据丢失。

#### 转义国际化字符
需要注意的是，只有US-ASCII范围内的值（0～127）需要转义。一些应用尝试使用转义值来表示ISO-8859-1扩展字符集中的字符（代码范围为128～255），这是不正确的做法，可能导致其他应用出现问题。例如，文件名 `Sven Ölssen.html`（包含一个元音变音符）可能被错误地编码为 `Sven%20%D6lssen.html`。虽然将空格编码为 `%20` 是正确的，但将 `Ö` 编码为 `%D6` 是非法的，因为该代码 D6（十进制值 214）超出了 ASCII 码范围。ASCII 仅定义了最大值为 0x7F（十进制值 127）的代码。

### 16.5.5 URI中的模态切换

某些URI使用ASCII字符序列来表示其他字符集中的字符。例如，可以使用 ISO-2022-JP 编码插入“ESC ( J”以切换到JIS-Roman字符集，用“ESC ( B”切换回ASCII字符集。尽管这种方法在某些本地化环境中有效，但没有标准化方案来识别URL所使用的特定编码。RFC 2396 的作者指出，对于含有非ASCII字符的原始字符序列来说，情况更加复杂。若涉及多个字符集，互联网协议期望有一种方法来识别所使用的字符集 [RFC 2277]。然而，通用URI语法中并未提供这种识别手段。个别URI方案可以请求单一字符集、定义默认字符集或提供指示所用字符集的方法。期待未来规范修改能为URI中的字符编码提供系统化的处理方案。

目前，URI对国际化应用的支持还不够友好。为了可移植性，通常建议HTTP应用程序继续使用ASCII字符集，它自1968年起便已存在，因此使用它不会造成太大问题。

### 16.6 其他需要考虑的地方

本节讨论编写国际化HTTP应用程序时必须注意的一些事项。

#### 16.6.1 首部与不合规范的数据

HTTP首部必须由US-ASCII字符集中的字符组成。然而，并非所有客户端和服务器都正确实现了这一点，你可能会偶尔收到代码值大于127的非法字符。许多HTTP应用程序依赖操作系统和库例程（如Unix中的ctype库）来处理字符，但这些库并不总是支持ASCII范围之外的字符代码。在较旧的实现中，输入非ASCII字符时，这些库可能会返回错误结果或导致应用程序崩溃。因此，在使用这些库处理HTTP报文前，务必仔细查阅其文档。

#### 16.6.2 日期

HTTP规范明确规定了合法的GMT日期格式，但并非所有Web服务器和客户端都严格遵守。例如，有时会看到Web服务器发送的无效HTTP Date首部，其中月份使用本地语言表示。HTTP应用程序应尽量容忍这些不合规矩的日期，避免接收时崩溃。不过，并非所有发送的日期都能被正确解析，若无法解析，服务器应谨慎处理。

#### 16.6.3 域名

DNS目前还不支持域名中的国际化字符。虽然多语言域名的相关标准化工作正在进行，但尚未广泛部署。

### 16.7 更多信息

万维网的成功意味着HTTP应用程序需要在不同语言和字符集之间交换更多内容。有关多语言多媒体这一重要而复杂话题的更多信息，请参考以下资料：

#### 16.7.1 附录
- 表H-1：IANA注册的字符集标记
- 表G-1：IANA注册的语言标记
- 表G-2：ISO 639中的语言代码
- 表G-3：ISO 3166中的国家代码

#### 16.7.2 互联网的国际化
- **W3C国际化和本地化网站**：http://www.w3.org/International/
- **RFC 2396**：统一资源标识符（URI）的一般语法
- **CJKV Information Processing**：Ken Lunde著，O'Reilly & Associates出版
- **RFC 2277**：IETF关于字符集和语言的策略

#### 16.7.3 国际标准
- **IANA**：已注册的各种名字和数字编号的库
- **RFC 3066**：标识语言的标记
- **ISO 639:1988**：表示语言名称的代码
- **ISO 639-2:1998**：表示语言名称的代码，第2部分：Alpha-3代码
- **ISO 3166:1988**：表示国家名称的代码

### 第17章 内容协商与转码

#### 17.1 内容协商技术

共有三种方法可以决定服务器上哪个页面最适合客户端：客户端选择、服务器自动判定或中间代理选择。这三种技术分别为客户端驱动的协商、服务器驱动的协商和透明协商（见表17-1）。我们将研究每种技术的机制及其优缺点。

#### 17.2 客户端驱动的协商

服务器可以通过发送响应列出可用页面，让客户端决定看哪个版本。这是最容易实现的方式，但每个页面都需要两次请求，增加了延迟并使用户感到厌烦。服务器有两种方法提供选项：发送HTML文档包含链接或使用HTTP/1.1的300 Multiple Choices响应代码。这种方式需要多个URL，不利于书签管理和推荐。

#### 17.3 服务器驱动的协商

服务器可以根据客户端请求的首部集来决定发送哪个页面。有以下两种机制：
- **检查内容协商首部集**：服务器查看客户端发送的Accept首部集，设法匹配相应的响应首部。
- **根据其他首部进行变通**：例如，服务器可以根据User-Agent首部发送响应。

#### 17.3.1 内容协商首部集

客户端可以使用以下HTTP首部发送用户的偏好信息：
- **Accept**：告知服务器发送何种媒体类型
- **Accept-Language**：告知服务器发送何种语言
- **Accept-Charset**：告知服务器发送何种字符集
- **Accept-Encoding**：告知服务器采用何种编码

#### 17.3.2 内容协商首部中的质量值

HTTP提供了质量值（q值），允许客户端为每种偏好类别列出多种选项，并关联优先次序。例如，客户端可以发送如下形式的Accept-Language首部：
```http
Accept-Language: es, en;q=0.8
```
这表示客户端首选西班牙语，如果没有西班牙语版本，则接受英语版本，但优先级较低。