title:HyperCheck: A Hardware-Assisted Integrity Monitor
author:Jiang Wang and
Angelos Stavrou and
Anup K. Ghosh
Digital Investigation (2004) 1, 50e60
www.elsevier.com/locate/diin
A hardware-based memory acquisition
procedure for digital investigations
Brian D. Carriera,),1, Joe Grandb
aDepartment of Computer Sciences, CERIAS, Purdue University, Recitation Building 656 Oval Drive,
West Lafayette, IN 47907-2086, USA
bGrand Idea Studio, Inc., 2907 Shelter Island Drive, Suite 105-169, San Diego, CA 92106, USA
Received 15 December 2003, revised and accepted 22 December 2003
KEYWORDS
Computer forensics;
Digital evidence;
Digital investigations;
Incident response;
Volatile data
acquisition
–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
The acquisition of volatile memory from a compromised computer is
Abstract
difﬁcult to perform reliably because the acquisition procedure should not rely on
untrusted code, such as the operating system or applications executing on top of
it. In this paper, we present a procedure for acquiring volatile memory using a hard-
ware expansion card that can copy memory to an external storage device. The card
is installed into a PCI bus slot before an incident occurs and is disabled until a phys-
ical switch on the back of the system is pressed. The card cannot easily be detected
by an attacker and the acquisition procedure does not rely on untrusted resources.
We present general requirements for memory acquisition tools, our acquisition pro-
cedure, and the initial results of our hardware implementation of the procedure.
ª 2004 Elsevier Ltd. All rights reserved.
–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
Introduction
Before digital data can be considered evidence of
an incident, it must ﬁrst be collected. After all,
if the investigator does not have a copy of the
data, then he cannot extract information from it
to draw conclusions. Historically, digital investiga-
tions have relied on evidence found on the hard
disk, because most of the investigations have
)
Corresponding author.
E-mail addresses: PI:EMAIL (B.D. Carrier),
PI:EMAIL (J. Grand).
1 This work was performed prior to joining CERIAS and
Purdue University.
involved the storage of contraband data. When
investigating computer intrusions, additional data
sources are needed and evidence is collected from
network trafﬁc and volatile memory.
This paper describes a hardware-based proce-
dure for making an accurate and reliable copy of
volatile memory contents so that the data can be
examined to ﬁnd evidence. Two of the more fa-
mous examples where the memory contents are
useful in an investigation are with the Code Red
(CAIDA, 2001) and SQL Slammer (ISS X-Force,
2003) worms. Both of these worms resided only
in memory and never wrote anything to disk, so
disk analysis may not ﬁnd any evidence. Other
types of investigations could ﬁnd the memory
contents of a suspicious PC interesting because it
1742-2876/$ - see front matter ª 2004 Elsevier Ltd. All rights reserved.
doi:10.1016/j.diin.2003.12.001
A hardware-based memory acquisition procedure
51
Notification
Preservation
Survey
Search
Reconstruction
Presentation
Figure 1 Phases of a digital investigation.
contains data from running processes, such as pass-
words, unencrypted data, and the state of user ac-
tivity (Casey, 2002; Venema, Forensic discovery).
The data stored in volatile memory are lost
when power is removed, so it is difﬁcult for an in-
vestigator to acquire that data because he typi-
cally wants to acquire the same in a trusted
environment where there is no threat of malicious
programs. Rootkits and Trojan horse attacks
against applications and operating system kernels
(Lawless, Linux kernel-level Trojan) can cause
the system to produce unreliable data, so it is de-
sirable not to rely on the resources that the at-
tacker could have modiﬁed. Existing methods for
acquiring volatile memory involve untrusted soft-
ware and are invasive because they typically write
back to memory and may also write to the system’s
hard disk. Many incident responders will run tools
such as ps and netstat to collect only obvious
data,
the system’s memory
unanalyzed.
leaving most of
Our solution is a PCI expansion card that is in-
stalled into a computer before an intrusion occurs
and will dump the exact contents of volatile phys-
ical memory to an external, non-volatile storage
medium. The PCI controller on the card is disabled
until the card is activated by the incident response
team and therefore the card will not respond to
bus queries from the host system. Only when the
device is actually enabled will it become a visible
connection to the PCI bus. Due to the design of
PCI, which is software- and operating system-inde-
pendent, the attacker may see the device but may
not be able to tamper with its actions.
This paper ﬁrst provides background material on
the investigation model that we are assuming and
we propose general requirements for memory ac-
quisition. Then the existing methods for acquiring
the volatile memory contents of a system are
given, which is followed by our process for acquir-
ing memory. Further the technical details of our
implementation and the limitations of this process
are presented. Finally, we present our conclusions
in the last section.
Background
Investigation phases
There are several models of a digital investigation,
so we will ﬁrst deﬁne the one that we are using
(Carrier and Spafford, 2003) and where our pro-
posed procedure ﬁts into it. Fig. 1 shows each
step of the digital investigation process.
The ﬁrst step of any investigation associated
with a computer intrusion is the Notiﬁcation Phase,
where an incident is detected and the response
and investigation process commences by deploying
an incident response team. After the incident has
been veriﬁed by the incident response team, the
investigation moves to a Preservation Phase. The
goal of the Preservation Phase is to ensure that
the contents of the digital crime scene are modi-
ﬁed as little as possible so that the investigator
can collect accurate evidence. An investigator or
ﬁrst responder will typically make an exact copy
of the digital crime scene so that it can be safely
analyzed in a laboratory environment.
After the crime scene has been preserved, the
Survey Phase begins and the crime scene is exam-
ined for obvious pieces of digital evidence. This
phase uses the existing knowledge of the incident
and the experience and training of the investigator
to ﬁnd obvious evidence. After the Survey Phase,
the investigator will have one or more hypotheses
about the incident and the Search Phase will begin
with a more thorough search of the system to ﬁnd
additional evidence that may support or refute his
hypotheses. After the digital evidence has been
collected during the Survey and Search Phases,
the Reconstruction Phase begins, in which the
existing evidence and hypotheses are tested to
52
B.D. Carrier, J. Grand
form a ﬁnal theory. In some cases, additional evi-
dence is searched for after the Reconstruction
Phase begins. The last phase of the investigation
is the Presentation Phase where the ﬁnal theory
is presented to the parties who requested the
investigation.
Our work focuses on the Preservation Phase, be-
cause current techniques do not allow the investi-
gator
to preserve the data of all computer
components in a reliable way. The investigator
can easily make a reliable copy of a hard disk using
commonplace tools, but he cannot make a reliable
copy of volatile memory. Another goal of our work
is to create a mechanism that enables a person
with minimal training to preserve a digital crime
scene upon detection of an incident until more
skilled responders arrive.
Memory imaging requirements
One of the factors that is used when determining
the reliability of digital evidence is the acquisi-
tion procedure. We have created a set of volatile
memory acquisition requirements that can be
used when developing a new procedure, when
comparing existing procedures, and when develop-
ing test cases for implementations of procedures.
The Computer Forensic Tool Testing (CFTT)
(NIST, CFTT) group at the National Institute of
Standards and Technology (NIST) developed a spec-
iﬁcation for disk imaging tools (NIST, 2001). The
speciﬁcation lists the requirements that NIST
used to test existing disk imaging tools. We modi-
ﬁed the disk imaging requirements so that they
could be applied to memory imaging. This new
set of requirements was used when we designed
our hardware-based acquisition solution.
The term ‘‘bit-stream duplicate’’ was removed
from the requirements because the term assumes
that the source and target data are written in a bi-
nary format. While the majority of modern digital
systems use a binary storage format, the require-
ments for acquiring data should apply to any
format, although each format may require a dif-
ferent procedure.
1. The acquisition tool shall read all digital data
from a source and write them to a non-volatile
destination location. The destination, called
an image, shall be in an accessible format.
2. The tool shall not cause data to be written to
the source.
3. The tool shall follow a documented procedure
which includes the steps that it performs and
the hardware and software resources that it
uses to read the source data.
4. If there are I/O errors while reading the source
data, the tool shall write a speciﬁed value to
the corresponding locations in the image. The
tool shall log the type and location of the error
in an accessible format.
5. If the destination of the data is larger than the
source, the tool shall identify the start and end
locations of
the source data within the
destination.
6. If the destination of the data is smaller than
the source, the tool shall notify the user and
either abort or copy as much data as possible
into the destination.
7. The tool shall provide documentation that is
correct.
Software-based solutions for memory imaging
typically violate the second requirement because
they are loaded into the target system’s memory
when they execute. The third requirement was
added to satisfy a Daubert Hearing (Smith and
Bace, 2003) and to show what untrusted resources,
if any, are used in the process. If the kernel is used
to read the memory contents, then the kernel
should be investigated thoroughly to identify if
it has been modiﬁed in any way to return false
values.
The
recommendations
following
are
also
deﬁned:
1. The tool should halt the target system during
the acquisition process so that memory will not
change and the page table will remain consis-
tent.
2. The tool should calculate one or more hash
values of the data that are read from the
source.
Previous work
Physical memory devices
Operating Systems typically provide access to
physical memory; for example Unix ﬂavors have
the /dev/mem device, which corresponds to the
physical memory, and the /dev/kmem device,
which corresponds to the virtual memory of the
kernel. Microsoft Windows 2000 and XP have the
\\.\PhysicalMemory object device that pro-
vides access to the physical memory. The dd
tool, which comes with most Unix ﬂavors and has
been ported for Windows systems (Garner, Foren-
sic acquisition utilities), can read these memory
devices and write the data to a ﬁle or to a server
on the network.
A hardware-based memory acquisition procedure
53
This acquisition procedure is relatively easy to
perform, but has some shortcomings with respect
to reliability and usefulness. The procedure relies
on the local operating system to supply the mem-
ory contents and an advanced attacker could mod-
ify the operating system to send false data. The
procedure also requires the responder to run at
least one process. More processes will need to be
run if you start a new shell or require network
transport. Running a process on the target system
violates our second requirement because it will
overwrite unallocated data in memory, or allo-
cated data in memory may need to be written to
the swap space or page ﬁle and thus overwrite un-
allocated data.
The /dev/mem device has been abused by
attackers in the past and is restricted in some sys-
tems. In fact, some systems do not implement the
device at all. Therefore, this technique is not al-
ways easily available.
A ﬁnal shortcoming with this approach, and the
one that we face with our own procedure, is that
the ﬁnal result is an image of physical memory. Phys-
ical memory contains pages of virtual memory that
are written in an unorganized order, and the operat-
ing system uses a page table to correlate the physi-
cal memory and swap space with kernel and process
virtual memory locations. Analysis of the page table
is required to properly piece together the ordering
of contents within physical memory.
The advantage of this design is that it is hard-
ware-based, due to the fact that the OpenBoot
ﬁrmware is executing from ROM, and cannot be
modiﬁed by the attacker (unless the ﬁrmware is
stored on intentionally rewriteable Flash memory
as is common in UltraSparc machines). It also pro-
vides a mechanism to suspend a system so that no
further activity can occur while a response team
travels to a data center. Additional data and sym-
bols from the kernel are also saved with the sync
command and kernel debugging programs exist to
analyze the data.
A disadvantage of this technique is that, by de-
fault, it overwrites data in swap space and it re-
quires
the system to be rebooted so that
savecore can copy the memory contents from
swap. Another disadvantage of this procedure is
that it is available only on Sparc systems. Similar
features may exist on other platforms that have
ﬁrmware-based debugging functionality which
can be accessed while the system is running.
Note that other Unix systems also have the
savecore command, but it can only be run after
the kernel panics. In general, there is no graceful
way to force a suspect system to panic, so this is
not a good procedure to acquire reliable data.
Solaris also offers the ‘-L’ ﬂag with savecore,
which will save the memory of the live system,
but this is not much different than using the
/dev/mem device.
Sparc OpenBoot
Process pseudo-ﬁle system
The OpenBoot ﬁrmware in a Sun system that uses
a Sparc architecture can dump the contents of
physical memory to a storage device (Drake and
Brown, 1995). The ﬁrmware can be accessed by us-
ing the L1-A (or STOP-A) keys and the system is
suspended and placed into the OpenBoot prompt.
Therefore, if an attacker was running any mali-
cious process, the ﬁrst responder could suspend
the system by enabling the OpenBoot ﬁrmware.
If the sync command is typed at the OpenBoot
prompt, the memory and register contents are
dumped to a pre-conﬁgured device, typically the
swap space on a hard drive. After the memory is
written, the system reboots and the savecore
command can be executed to copy the memory
from the dump device to the ﬁle system.
The sync command was designed to debug the