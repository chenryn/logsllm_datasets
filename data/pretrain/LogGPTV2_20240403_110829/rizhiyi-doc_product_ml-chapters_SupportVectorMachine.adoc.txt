==== Support Vector Machine
关于支持向量机的wiki：
SVM最基本的应用是分类。 求解最优的分类面，然后用于分类。最优分类面的定义：对于SVM，存在一个分类面，两个点集到此平面的最小距离最大，两个点集中的边缘点到此平面的距离最大。
image::images/ml-svm-model.png[]
如上图，左图中的分类面肯定不是最优的，因为还存在右图中的分类面，使得两侧的点到分类面的距离更大。
优点：
* 对于高维度样本的处理很高效
* 对于样本维度大于样本个数的情况处理很高效
* 使用样本数据的子集进行训练，节省内存空间
* 可配置的kernel function，比较灵活
缺点：
* 在feature数远远大于样本数的情况下，性能可能会很糟糕
* 它本身不会输出预测的概率，而要通过额外的较为耗费资源的cross-validation计算来得出
Syntax：
    fit SVM [algo_params]  from  [into model_name]
Parameters:
* ：使用本模型对目标字段进行训练，必选
*  ：使用这些特征字段对目标字段进行分类和预测的训练，字段个数须>=1
* [into model_name]：保存下来的模型名称，可选，若不填将不做保存
* [algo_params]：针对SVM模型的参数设置，可选，不填时用默认参数设置
** C : float, optional (default=1.0)
+
Penalty parameter C of the error term.
** kernel : string, optional (default=’rbf’)
+
Specifies the kernel type to be used in the algorithm. It must be one of ‘linear’, ‘poly’, ‘rbf’, ‘sigmoid’, ‘precomputed’ or a callable. If none is given, ‘rbf’ will be used. If a callable is given it is used to pre-compute the kernel matrix from data matrices; that matrix should be an array of shape (n_samples, n_samples).
** degree : int, optional (default=3)
+
Degree of the polynomial kernel function (‘poly’). Ignored by all other kernels.
** gamma : float, optional (default=’auto’)
+
Kernel coefficient for ‘rbf’, ‘poly’ and ‘sigmoid’. If gamma is ‘auto’ then 1/n_features will be used instead.
** coef0 : float, optional (default=0.0)
+
Independent term in kernel function. It is only significant in ‘poly’ and ‘sigmoid’.
** probability : boolean, optional (default=False)
+
Whether to enable probability estimates. This must be enabled prior to calling fit, and will slow down that method.
** shrinking : boolean, optional (default=True)
+
Whether to use the shrinking heuristic.
** tol : float, optional (default=1e-3)
+
Tolerance for stopping criterion.
** cache_size : float, optional
+
Specify the size of the kernel cache (in MB).
** verbose : bool, default: False
+
Enable verbose output. Note that this setting takes advantage of a per-process runtime setting in libsvm that, if enabled, may not work properly in a multithreaded context.
** max_iter : int, optional (default=-1)
+
Hard limit on iterations within solver, or -1 for no limit.
** decision_function_shape : ‘ovo’, ‘ovr’ or None, default=None
+
Whether to return a one-vs-rest (‘ovr’) decision function of shape (n_samples, n_classes) as all other classifiers, or the original one-vs-one (‘ovo’) decision function of libsvm which has shape (n_samples, n_classes * (n_classes - 1) / 2). The default of None will currently behave as ‘ovo’
** random_state : int seed, RandomState instance, or None (default)
+
The seed of the pseudo random number generator to use when shuffling the data for probability estimation.
样本数据分析：样本中是2016年8月13日Dota2游戏全球各个服务器中2小时以内所有游戏比赛的结果数据。Dota2是一款10人同时在线并且5vs5的多人即时对战的网络游戏，每次的获胜方为首先摧毁对方基地建筑的那一方（天辉or夜魇），数据中用1或-1来表示。样本数据字段信息如下:
1. Team won the game (1 or -1)
2. Cluster ID (related to location)
3. Game mode (eg All Pick)
4. Game type (eg. Ranked)
对属性分析可以看出我们应该用feature2、3、4来训练并预测第一个属性也就是比赛结果，即获胜方是那一边
训练集样本量一共65500条，首先使用训练集的前10000条的数据进行fit
  appname:ml_spl AND tag:binary_classification_ly_train | where !empty(json.TeamWon) | limit 10000 | fit SVM json.TeamWon from json.GameType, json.GameMode, json.ClusterID into svm_train | table json.TeamWon, predicted_json.TeamWon
image::images/ml-svm-fit-example.png[]
测试集样本量一共10294条，使用测试集进行apply
  appname:ml_spl AND tag:binary_classification_ly_test | where !empty(json.TeamWon) | apply svm_train | table json.TeamWon, predicted_json.TeamWon
image::images/ml-svm-apply-example.png[]