370 
DSN 2010: Hendricks 
et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:03:40 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
<U 
C/) 
-.. 
Zzyzx+f+1 
Zz z 
--U15O 
100t! 
"""' C/) 
'til 0.8 
E '---' 
:::l [0.6 
<U 
 0.4 
Zzyzx-NPQ 
E 50  B=10 
0-GO.2 
B=1 
00 40 80 120 
c 
 c<:S .....l 
of) 
:::l 
E-< 
 120 
"""' 
C/) -.. C/) 
0-0 80 
C 
'5 0- 40 
..s::  0 
:::l 0 ..... 
E-<  100 10' 102 103 
..s:: 
Of) 
40 80 120 
Number of clients 
Throughput 
(kOps/sec) 
Operations 
between contention 
Figure 6: Throughput vs. clients 
Figure 7: Latency vs. throughput 
Figure 8: Throughput vs. contention 
1 = 1 and all servers 
are responsive. 
The dashed lines in Figure 8 show throughput 
with no contention. 
and each transaction 
consists 
to the workload 
found in a mail 
of one or more Zzyzx 
plus some processing 
time. Be­
is single-threaded, 
its performance 
time and does not benefit from 
depends 
were extracted 
Over 14 million 
from NFS traces of 
metadata 
op­
from the Harvard 
EECS workload 
21 of February 2003 [11]. A 
on Zzyzx and 
operation 
Zzyzx was able to use the log interface 
for 82% 
mix was then executed 
response 
many small files, similar 
server, 
or Zyzzyva operations 
cause Postmark 
mainly on request 
batching. 
Metadata 
with an average 
server. 
were considered 
operations 
a large departmental 
erations 
between Monday 17-Friday 
matching 
Zyzzyva. 
of operations, 
4926 operations. 
ecuted through 
read-only 
tion. When all operations 
the read optimization 
Zzyzx completed 
Zyzzyva completed 
Thus, Zzyzx provides 
for this trace-based 
metadata 
and used Zyzzyva's 
7. Additional related work 
contention-free 
run length of 
Of the remaining 
the Zyzzyva substrate 
18% of operations 
ex­
interface, 
56% were 
one round-trip 
through 
read optimiza­
Zyzzyva, 
were executed 
was used for 55% of operations. 
operations 
at a rate of 104.7 kOps/sec, 
and 
operations 
at a rate of 64.8 kOps/sec. 
a factor of 1.6x higher throughput 
workload. 
Recent Byzantine 
fault-tolerant 
replicated 
state machine 
years of prior research. 
failure 
to provide 
detector 
Se­
an 
fault-tolerant 
group communica­
Byzantine 
build upon several 
uses an unreliable 
protocols 
cureRing 
asynchronous 
tion abstraction 
cated state machine. 
asynchronous 
chine [24]. The technical 
sion [15, Section 
Byzantine 
5.1.3]. 
[19], which can be used to build a repli­
The Rampart toolkit 
fault-tolerant 
implements 
an 
replicated 
state ma­
report provides 
further 
discus­
of 31 + 1 total. 
by increasing 
the number of message delays per re­
latency 
to PBFT and HQ than Quo­
quest. Zzyzx is more similar 
rum or Chain. Zzyzx, PBFT, and HQ each require 
21 + 1 
servers 
responsive 
that determines 
a set of objects 
prepare 
multiple 
phase. Put another 
gle client. 
Farsite 
which client 
on 
(lock for Zzyzx, write-I for HQ, and pre­
for PBFT). The difference 
operations 
on a set of objects 
way, Zzyzx batches 
is that Zzyzx allows 
after a single setup 
operations 
for a sin­
Each have a setup phase 
will issue the next request 
[2, 4, 9] uses a Byzantine fault-tolerant 
replicated 
the strong consistency 
guarantees 
file sys­
for metadata 
in a distributed 
such that 
which can increase 
scal­
leases are recalled, 
but 
is unreachable. 
Leasing 
can update metadata 
Upon conflict 
may be lost if the client 
issues leases to clients 
locally, 
or timeout, 
state machine to manage metadata 
tem. Farsite 
clients 
ability. 
updates 
schemes do not provide 
expected 
so leasing 
choosing lease 
short timeout 
a lease recall 
clients 
Farsite 
after a few hours [9], which is acceptable 
site is not designed 
timeouts 
increases 
or renewal, 
the probability 
but a long timeout 
is not acceptable 
in case of failure. 
for large-scale 
of replicated 
state machines 
needlessly 
presents 
(linearizability 
[17]), 
for some applications. 
Also, 
challenge: 
a 
an additional 
that a client 
will miss 
may stall other 
expires 
only because 
Far­
leases 
write sharing 
[4]. 
hosts metadata 
on mul­
Farsite 
state machines 
called directory 
consistency, 
Farsite 
uses a 
re­
to support 
Windows-style 
further, 
To scale metadata 
tiple independent 
replicated 
groups. To ensure namespace 
special-purpose 
subprotocol 
names across directory 
Farsite 
other operations. 
dle POSIX-style 
allow Farsite 
without 
and similar 
resorting 
to scale, 
groups [9]. This subprotocol 
allows 
but it is inflexible 
and does not generalize 
For example, 
renames [9]. Byzantine 
the subprotocol 
Locking would 
to 
cannot han­
protocols 
to maintain 
scalability 
Yin et al. [30] describe 
to a special-purpose 
protocol. 
an architecture 
order is separated 
in which agree­
from operation 
exe­
state machine protocols 
a modular framework 
for 
Guerraoui 
et al. introduce 
fault-tolerant 
replicated 
Byzantine 
and the Quorum and Chain subprotocols 
Zyzzyva, 
cas are responsive. 
without 
of Quorum, which increases 
that all 31 +  I repli­
Quorum [14] looks like Zyzzyva [20] 
[27]. Chain is a pipelined 
Quorum and Chain require 
a pre-serializer 
throughput 
[14]. As in 
version 
ment on operation 
cution, 
allowing 
the replicated 
task of ordering 
but also increases 
operations, 
and as such, remains 
a bottle-
execution 
to occur on distinct servers.  But, 
state machine protocol 
is never relieved 
of the 
978-1-4244-7501-8/101$26.00 
©2010 IEEE 
371 
DSN 2010: Hendricks 
et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:03:40 UTC from IEEE Xplore.  Restrictions apply. 
20lO IEEEIIFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
the state machine into objects,  as 
in Zzyzx, 
[9]  J.  R. 
Douceur and J. Howell. Dis
tributed 
systems. 
For example, 
the Farsite  file 
system.  In 
Proc. OSD12006, 
directory 
service 
pages 3 2 1 -334. 
in 
neck. Dividing 
has been used in many previous 
Kotla et al. [21] describe 
machine into objects 
erations 
rently. 
known to involve 
CBASE, which partitions 
a state 
and allows each replica 
only independent 
to execute 
state concur­
op­
8. Conclusion 
Byzantine 
[ 1 0] C. Dwork, N. Lynch, and L. Stockmeyer. 
of partial 
synchrony. 
in 
J. ACM, 35(2):288-323, 
Consensus 
the presence 
1 988. 
[ 11 ]  D. Ellard and M. Seltzer. 
New NFS tracing 
tools and tech­
niques for system analysis. In Proc. LISA 2003, pages 73-
86. 
[ 1 2] M. J. Fischer, 
N. A. Lynch, and M. S. Paterson. 
Impossibility 
of distributed  consensus 
32(2):374-382, 1 985. 
with one faulty process. J. ACM, 
[ 1 3] G. R. Goodson, 
J. J. 
Wylie, G. R. Ganger, 
Efficient Byzantine-tolerant 
DSN 2004, pages 1 35-1 44. 
erasure-coded 
and M. K. Reiter. 
storage. In Proc. 
of efficient 
Locking allows creation 
fault-tolerant 
(Zyzzyva), 
services. 
Zzyzx delivers 
and scal­
Compared to the 
a factor 
of 2.2 x -
during concurrency-free 
and fault­
given the minimum number of servers 
able Byzantine 
state-of-the-art 
2.9x higher throughput 
free operation, 
(31+ 1). Moreover, 
replicated 
scaling 
of throughput 
unlike previous 
state machine protocols, 
as additional 
fault-tolerant 
Byzantine 
Zzyzx offers near-linear 
servers 
are added. 
next 700 BFT protocol
s. Technical 
[ 1 5]  J. Hendricks. Efficient Byzantine 
[ 1 4] R. Guerraoui, 
N. Knezevic, 
V. Quema, and M. Vukolic. 
The 
Report 2008-008, 
EPFL. 
Fault Tolerance for Scal­
PhD thesis, July 2009. CMU­
able Storage and Services. 
CS-09-1 46. 
9. Acknowledgments 
We thank the members and companies 
of the CyLab Cor­
NEC Laboratories, 
condition 
492,1 990. 
VMware, and Yahoo! 
We 
and support. 
feedback, 
and the PDL Consortium 
(including 
APC, 
Google, Hewlett-Packard 
Labs, Hitachi, 
Research, 
Symantec, 
insights, 
LSI, Microsoft 
porate Partners 
EMC, Facebook, 
IBM, Intel, 
NetApp, Oracle, 
Seagate, 
Labs) for their interest, 
thank Ramakrishna 
sharing 
based on research 
Foundation, 
the Army Research 
02-1-0389, 
under grant number F49620-0l-1-0433. 
via grants CCR-0326453 
Kotla et al. and Miguel Castro et al. for 
is 
source code for Zyzzyva and PBFT. This material 
Science 
in part by the National 
sponsored 
Office, under grant number DAAD 19-
and the Air Force Office of Scientific 
Research, 
and CNS-0910483, 
References 
[ 1 ]  M. Abd-El-Malek, G. R.  Ganger,  G.  R. 
Goodson, 
M. K. Re­
iter, and J.  J.  Wylie. 
services. In Proc. SOSP 2005, pages 59-74. 
Fault-scalable 
Byzantine 
fault-tolerant 
[2] A. Adya, W. J. Bolosky, M. Castro, 
G. Cermak, R. Chaiken, 
J. R. Douceur, 
Wattenhofer. 
storage 
OSDI 2002, pages 1-14. 
J. Howell, 
FARSITE: Federated, 
J. R. Lorch, M. Theimer, 
available, 
environment. 
for an incompletely 
trusted 
and R. P. 
In Proc. 
and reliable 
[3]  M. 
G. Baker, J. H. Hartman, 
M. D. Kupfer, 
Measurements 
of a distributed 
file 
K. W. Shirriff, 
and J. K. Ousterhout. 
system.  In 
Proc. SOSP 1991, pages 1 98-2 1 2. 
[4] W. J. Bolosky, J.  R. Douceur, 
and J. Howell. The Farsite 
project: 
A retrospective. 
SlGOPS OSR, 4 1(2): 1 7-26,2007. 
[5]  M. 
Burrows. The Chubby lock service 
for loosely-
coupled 
distributed 
systems. In Proc. OSD12006, pages 335-350. 
Practical 
Fault Tolerance. PhD thesis, 
Byzantine 
[6] M. Castro. 
January 
200 1 .  MIT-LCS-TR-81 7. 
[7] M. Castro and B. Liskov. 
Practical 
Byzantine 
fault tolerance. 
In Proc. OSD11999, pages 1 73-186. 
[8] J. Cowling, 
D. Myers, B. Liskov, R. Rodrigues, and 
L. Shrira. HQ replication: 
Byzantine fault tolerance. 
1 90. 
In Proc. OSDI2006, pages 1 77-
A hybrid quorum protocol  for 
[ 1 6] J. Hendricks, G. R. Ganger, and 
M. K. Reiter. 
Low-overhead 
Byzantine 
73-86. 
fault-tolerant 
storage.  In 
Proc. SOSP 2007, pages 
[ 1 7] M. P. Herlihy 
and J. M. Wing. Linearizability: 
A correctness 
for concurrent objects. ACM TOPLAS, 1 2(3):463-
[ 1 8] J. Katcher. 
Postmark: 
A new file system benchmark. 
Tech­
nical  Report 
TR3022, Network Appliance, 
October 1 997. 
[ 1 9] K. P. Kihlstrom, 
protocols 
SecureRing 
Proc. HlCSS 1998, pages 
3 1 7-326. 
[20] R. Kotla, L. Alvisi, M. Dahlin, 
L. E. Moser, and P. M. Melliar-
Smith. The 
group communicati
on. In 
for securing 
A. Clement, 
Byzantine  fault 
and E. Wong. 
In Proc. 
tolerance. 
Zyzzyva: 
SOSP 2007, pages 45-5 8 .  
Speculative 
[21 ]  R. Kotla and M. Dahlin. High throughput 
Byzantine fault 
tolerance. 
[22] A. W. Leung, S. Pasupatby, 
In Proc. DSN 2004, pages 575-584. 
G. Goodson, 
and E. L. Miller. 
Measurement 
workloads. 
and analysis oflarge-scale network 
file system 
In Proc. USENIX 2008 ATC, pages 2 13-226. 
[23] D. Malkhi, M. K. Reiter, 
and A. Wool. The load and 
of Byzantine quorum systems. SIAM J. Comp., 
availability 
29(6): 
1 8 89-1 906, 2000. 
[24] M. K. Reiter. 
The Rampart 
toolkit for 
building 
high-int
egrity 
services. In Selected 
and Practice in Dist. Systems, 
pages 99- 110, 1 995. 
Papers from Int. Workshop on Theory 
[25] F. Schmuck and R. Haskin. 
GPFS: A shared-disk 
file system 
for large computing 
231 -244. 
clusters. In Proc. FAS T  2002, pages 
[26] A. Singh, P. Maniatis, P.  Druschel, 
and T. Roscoe. BFT 
[27] A. Singh, 
P. Maniati
protocols under fire. In Proc. NSDI2008, pages 1 89-204. 
Conflict­
Report TR-
free quorum based BFT protocols. Technical 
2007-2, Max Planck Institute 
s, P. Druschel, 
for Software Systems. 
and T. Roscoe. 
[28] S. Toueg. Randomized 
Byzantine agreements. 
In Proc. 
PODC 1984, pages 1 63-178. 
[29] X. Wang and H. Yu. How to break MD5 and other hash 
functions. In EUROCRYP T  '05, pages 1 9-35 .  
[30] J. Yin, J.-P. Martin, A. Venkataramani, 
L. Alvisi, and 
M. Dahlin. Separating 
tine fault tolerant 
267. 
agreement 
from execution 
for Byzan­
services. In Proc. SOSP 2003, pages 253-
978-1-4244-7501-811 0/$26. 00 ©20 lO IEEE 
372 
DSN 2010: Hendricks 
et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:03:40 UTC from IEEE Xplore.  Restrictions apply.