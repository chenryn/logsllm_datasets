Transferred from http://code.opencv.org/issues/4497
    || Brian Kamery on 2015-07-22 14:14
    || Priority: Normal
    || Affected: branch 'master' (3.0-dev)
    || Category: java bindings
    || Tracker: Bug
    || Difficulty: 
    || PR: 
    || Platform: x64 / Windows
## Path format error failing on resource load.
    Hi, I hope this is not a duplicate - I tried to find a report of this, but there are many potential key words to search for.
    When following several of the v3.0 java samples on windows (e.g. http://docs.opencv.org/3.0-beta/doc/tutorials/introduction/desktop_java/java_dev_intro.html), one gets errors such as:
    OpenCV Error: Assertion failed (!empty()) in cv::CascadeClassifier::detectMultiScale, file C:\builds\master_PackSlaveAddon-win64-vc12-static\opencv\modules\objdetect\src\cascadedetect.cpp, line 1634
    Exception in thread "main" CvException [org.opencv.core.CvException: cv::Exception: C:\builds\master_PackSlaveAddon-win64-vc12-static\opencv\modules\objdetect\src\cascadedetect.cpp:1634: error: (-215) !empty() in function cv::CascadeClassifier::detectMultiScale
    ]
        at org.opencv.objdetect.CascadeClassifier.detectMultiScale_1(Native Method)
        at org.opencv.objdetect.CascadeClassifier.detectMultiScale(CascadeClassifier.java:103)
        at opencv.DetectFaceDemo.run(Hello.java:41)
    The sample runs on linux without problem.
    There are several "answers" on various boards that say to hardcode the absolute path ... this is obviously less than optimal, but did lead me to the "right" answer. I was able to debug this down to the format of the URL.getPath() response that are used for both the CascadeFilter and the Imgcodecs.imread() calls.
    The URL.getPath() (and the URL.getFile()) calls both return an absolute path that starts with a '/' (e.g. "/c:/opencv/..."), but the imread() and the CascadeClassifier constructor are unableto handle this format on a windows file system. The in-code solution is url.getPath().substring(1), and the opencv utilities work great - but this too is less than optimal.
    The ideal solution would be for opencv to handle the path starting with a '/' on windows as well. Even better, when the path that is passe din is unable to be handled opencv should fail in some way that is indicative of the real problem (e.g. the CascadeClassifier contructor and/or the imread() function throws a RuntimeException.)
    I assume that the same issue would be true on the x86 windows platform as well as the x64.
## History