title:Running Language Interpreters Inside SGX: A Lightweight, Legacy-Compatible
Script Code Hardening Approach
author:Huibo Wang and
Erick Bauman and
Vishal Karande and
Zhiqiang Lin and
Yueqiang Cheng and
Yinqian Zhang
Running Language Interpreters Inside SGX: A Lightweight,
Legacy-Compatible Script Code Hardening Approach
Huibo Wang1, Erick Bauman1, Vishal Karande1, Zhiqiang Lin2, Yueqiang Cheng3, Yinqian Zhang2
1The University of Texas at Dallas, 2The Ohio State University, and 3Baidu USA
the execution of the application cannot be trusted. Therefore,
Intel introduced its software guard extensions (SGX) [16], a new
hardware feature that provides secure enclaves in which user level
applications do not have to trust any software outside the enclave,
thereby significantly reducing the attack surface.
From a software development perspective, SGX is merely a set of
new instructions. To really use SGX, it is suggested that application
developers create new applications by using abstractions (e.g.,
APIs) provided by the SGX SDK, partitioning applications into
trusted and untrusted components, and building bridge functions
between enclave and non-enclave code. However, this is tedious,
time consuming, and error prone. By forcing developers to manually
port software to SGX or create new applications from scratch, tons
of legacy software cannot enjoy the benefit provided by SGX.
ABSTRACT
Recent advances in trusted execution environments, specifically
with Intel’s introduction of SGX on consumer processors, have
provided unprecedented opportunities to create secure applications
with a small TCB. While a large number of SGX solutions have
been proposed, nearly all of them focus on protecting native
code applications, leaving scripting languages unprotected. To fill
this gap, this paper presents ScriptShield, a framework capable
of running legacy script code while simultaneously providing
confidentiality and integrity for scripting code and data. In contrast
to the existing schemes that either require tedious and time-
consuming re-development or result in a large TCB by importing an
entire library OS or container, ScriptShield keeps the TCB small
and provides backwards compatibility (i.e., no changes needed to
the scripting code itself). The core idea is to customize the script
interpreter to run inside an SGX enclave and pass scripts to it. We
have implemented ScriptShield and tested with three popular
scripting languages: Lua, JavaScript, and Squirrel. Our experimental
results show that ScriptShield does not cause noticeable overhead.
The source code of ScriptShield has been made publicly available
as an open source project.
CCS CONCEPTS
• Security and privacy → Software security engineering;
KEYWORDS
SGX, Scripting Language, Confidentiality, Integrity
ACM Reference Format:
Huibo Wang1, Erick Bauman1, Vishal Karande1, Zhiqiang Lin2, Yueqiang
Cheng3, Yinqian Zhang2. 2019. Running Language Interpreters Inside SGX:
A Lightweight, Legacy-Compatible Script Code Hardening Approach. In
ACM Asia Conference on Computer and Communications Security (Asi-
aCCS’19), July 9–12, 2019, Auckland, New Zealand. ACM, New York, NY,
USA, 8 pages. https://doi.org/10.1145/3321705.3329848
1 INTRODUCTION
Computer programs can often be attacked due to their reliance on
a large trusted computing base (TCB). Typically, an application has
to rely on support from linked libraries, the operating system, and
sometimes a hypervisor. If any system software is compromised,
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
AsiaCCS’19, July 9–12, 2019, Auckland, New Zealand
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6752-3/19/07...$15.00
https://doi.org/10.1145/3321705.3329848
Today, software is typically developed and executed in two ways:
(1) compiling high level languages into native code to execute
directly; or (2) interpreting source code (or byte code) without
compilation, as is typically done in scripting languages. Many exist-
ing SGX-based applications are in the first category. They are either
built upon a library OS (as in Haven [4] and Graphene [21]) or lever-
age a container (as in SCONE [2]). As a result, they execute the en-
tire application in SGX without any partitioning into trusted and un-
trusted components. However, they will inevitably have a large TCB.
Also, there are no solutions to protect scripting code from malicious
system software while also maintaining backwards compatibility.
Note that while TrustJS [8] explored the direction of using SGX to
protect JavaScript, it does not provide backwards compatibility.
To fill this gap, we present ScriptShield, a framework capable of
running legacy scripting code while simultaneously providing con-
fidentiality and integrity of scripting code and data. ScriptShield
achieves backwards-compatibility for scripts by treating them as
data streams, and ensures the confidentiality and integrity of scripts
by only executing the script and its interpreter in an enclave. To
deploy ScriptShield, an end user just needs to recompile and
statically link the interpreter for the language they want to use with
our framework (there is no need to modify the source code of the
interpreter); the resulting interpreter will be then executed inside
an enclave, thereby achieving software backwards compatibility.
We have implemented ScriptShield and tested with three
popular scripting languages: Lua, JavaScript, and Squirrel, and
demonstrated the practicality of our framework (e.g., having
low runtime overhead, small TCB, and ease of use). Running an
interpreter inside SGX provides many salient benefits: (1) signing it
once, and executing everything; (2) confidentiality and integrity for
all the content of any unmodified script; and (3) a much smaller TCB.
In short, we make the following contributions:
• We present ScriptShield, a lightweight legacy code compatible
framework that provides complete confidentiality and integrity
for scripting language protection.
Session 2A: SGX-based SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand114• We design an application protocol for securely sending scripts
to an enclave, in which scripts are never leaked outside of the
enclave.
• We have implemented a prototype and tested with three popular
scripting languages—Lua, JavaScript, and Squirrel—and demon-
strated the practicality of our framework.
2 BACKGROUND
2.1 Intel SGX
Intel SGX. Intel introduced SGX to provide applications with
the capability to execute code and protect secrets in a secure
enclave [1, 16]. More specifically, SGX provides software developers
direct control over their application’s security without relying on
any underlying system software such as the OS or hypervisor.
This significantly reduces the trusted computing base (TCB) to
the smallest possible footprint (only the code executed inside the
enclave), and prevents various software attacks even when the OS,
BIOS, or hypervisor are compromised. By running trusted code in a
secure enclave, secrets remain protected even when an attacker has
full control of the entire software stack. Also, the SGX hardware
prevents bus snooping, memory tampering, and even cold boot
attacks [10] against memory images in RAM since the enclave
contents are encrypted by a memory encryption engine (MEE). To
prevent any tampering before enclave code is loaded, SGX also
provides hardware based attestation capabilities to measure and
verify valid code and data signatures.
Scripting Languages. Scripting languages are very high level in-
terpreted languages that are often used to connect or extend compo-
nents written in lower level languages [17]. There are multiple types
of scripting languages, from domain specific languages such as OS
shells (e.g., bash), to general purpose languages (e.g., Lua, JavaScript,
Python, or R). While native languages are compiled ahead of time,
scripts are usually compiled at run time, so there is no need to
recompile if the script changes. For example, recompiling a full
game can take minutes to hours, which implies a big productivity
hit. Game logic and configuration are typically contained in script
files. Game designers can easily tweak gameplay by updating these
scripts, but they do not want players to be able to do the same and
change game logic and configuration to their advantage.
Many popular games today have their game logic written in
scripting languages such as Lua. Attacks on these games mainly
have two key steps: first obtaining the Lua script, and then
modifying or replacing the script. There are some ways to retrieve
the original scripts. One is using unluac, which is a tool for reverse
engineering Lua scripts. Another one is to dump the contents
of a script from a few points (e.g., function lua_read, function
luaL_loadbuffer). Therefore, our objective with ScriptShield is
to protect scripts like these with integrity and confidentiality, so
that attackers cannot reverse engineer or modify them.
3 OVERVIEW
Objectives. We focused on the following objectives while design-
ing ScriptShield:
• Language-Level Transparency (Backwards Compatibility).
Given the prevalence of scripting languages, we would like our
framework to be transparent to the languages themselves. That
is, when using ScriptShield, there should be no modification
at the scripting language level, allowing all legacy scripts to still
be executed inside ScriptShield.
• Easier Confidentiality and Integrity Attestation. Our pri-
mary goal is to enable hiding secrets in scripts to defeat reverse
engineering attempts and ensure integrity against tampering.
We would like to minimize the signing and attestation process
and achieve a “sign once, execute many” work flow for developers,
allowing a single signed enclave to execute any arbitrary script.
• High Efficiency. While we could use a library OS or containers
to design ScriptShield, such approaches would be inefficient
as they need to package a lot of de-privileged kernel code in the
enclave and fill more of the enclave page cache (EPC) with code
and data. Since the EPC is small (only 128MB in SGX v1 [12]),
larger enclaves will suffer performance penalties from paging
EPC pages to and from main memory.
• Small TCB. Since we aim to protect the confidentiality and
integrity of scripting languages, we would like to minimize the
attack surface with as small a TCB as possible.
Threat Model and Scope. We focus on the threat model where the
owner of a script does not trust the remote platform it runs on (and
therefore needs to perform attestation), while the platform owner
always trusts the script it is running. Such a model works perfectly
in common daily computing contexts such as cloud computing and
online computer gaming. In fact, we believe ScriptShield offers an
alternative model for how to develop and deploy legacy compatible,
secret-preserving programs in these environments.
While several studies have suggested SGX applications are
vulnerable to a variety of side-channel attacks [6, 18, 22], fighting
side channels is not the focus of this work. However, ScriptShield
uses up-to-date cryptographic implementations to avoid, to the
best we can, side-channel leakage during secure communication
and script decryption. Moreover, as most demonstrated attacks
exploit memory access patterns of native code execution, scripts are
intuitively less vulnerable to side channels as they are processed as
data by the interpreter within the enclave. Thus, we leave enhancing
ScriptShield to defeat side-channel threats as future work.
Challenges and Insights. To achieve our stated objectives with
SGX, we need to split scripting language execution into two compo-
nents: a trusted component executed inside the enclave, and an un-
trusted component outside. Partitioning an application into trusted
and untrusted components can be very time-consuming and tedious.
While prior research from Haven [4] and SCONE [2] has shown that
it is possible to run an entire application inside an enclave without
partitioning, such an approach inevitably leads to a large TCB.
In contrast, most scripting languages are embedded into certain
applications (e.g., Javascript is often executed within a web browser,
and Lua is often embedded in a game program). Therefore, library
OS or container approaches are not suitable for cases in which only a
portion of application code needs to be protected (e.g., game scripts).
A scripting language usually has a self-contained interpreter
that interprets the script. If we are able to execute the entire
Session 2A: SGX-based SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand115party who wants the code protection as the client, and refer to the
party that executes the client’s code as the remote platform.
The client first launches the Initialization component, which
performs remote attestation to make sure the remote platform is
running the intended interpreter. It then generates shared secrets
to establish a secure channel, which will be used to transfer the
encrypted script to the remote party.
On the remote platform side, the Untrusted Module first creates
the secure enclave to execute the interpreter and provides wrappers
for all enclave ecalls and ocalls. After that, the interpreter
executes as a daemon process and waits for client requests. Upon
receiving the initialization request from the client, the remote
platform creates an attestation report for the secure enclave,
forwards the report to be signed by the Quoting Enclave, and
returns the signed attestation report back to the client. If attestation
succeeds, then the client can establish a secure channel with the
secure enclave. A common approach to do so is to use the Diffie-
Hellman key exchange protocol, where the public key of the secure
enclave (generated from random sources after it is launched) is
cryptographically bound to the attested data of the attestation
report, and the public key of the client is hard-coded inside of the
enclave to authenticate the client.
Next, the script is passed via the secure channel to the Script
Decryption component of the remote platform, and is decrypted
inside the enclave. Since no system calls can be executed inside the
enclave, during the execution of the script, ScriptShield has to
execute system calls outside the enclave. The control flow passes
through our System Call Shim layer inside the enclave to the outside
ocalls. ScriptShield also checks system call return values in order
to protect against Iago attacks.
4 DESIGN
4.1 Client Side Initialization
Remote Attestation. ScriptShield requires remote attestation,
which is the mechanism by which a third party can verify that
the desired software is indeed running inside an enclave on
an Intel SGX enabled platform. During remote attestation, the
untrusted component that hosts the enclave asks the enclave to
produce a report called a quote to identify the platform. A quote
containing information about the measurement of code and data,
the product ID, security version number and other attributes is
securely presented to the client for verification. In particular, the
remote attestation in ScriptShield takes the following four steps:
• Step-I: Before the client can safely send a script to the remote
server, the client first needs to issue a challenge to the remote
party to ensure that it is indeed running the necessary compo-
nents inside one or more enclaves.
• Step-II: The interpreter’s enclave generates a report in response
to the challenge. The report includes the security version number,
enclave attributes, enclave measurement, software version,
software vendor security version number, and additional user-
provided data. The quoting enclave verifies and signs the report,
and the signed report, called a quote, is sent to the client.
• Step-III: The client sends the signed report (quote) to the Intel
Attestation Service (IAS), and the IAS will verify the quote.
Figure 1: An overview of ScriptShield. Note that ➀ - ➇
denotes the ith step while executing ScriptShield.
interpreter inside the enclave, then we do not have to solve the
tedious partitioning problem. However, not all interpreter code
(e.g., system calls) can be executed inside an enclave. Fortunately,
system calls are typically only invoked by libraries, so we can
focus on just modifying the libraries dynamically linked by the
interpreter by statically linking customized, enclave-aware versions
of these libraries into the enclave shared object alongside the
interpreter. Therefore, inspired by SCONE’s design, we can just
add a software shim layer atop the standard libraries. This shim
layer will intercept the execution of the system calls inside the
enclave and transparently redirect their execution to the outside
world through bridge functions supported by SGX SDK.
In our threat model, the client (script provider, such as a game
publisher) does not trust the remote platform (script executor, such
as game players). However, the client still needs to verify that the re-
mote platform is indeed running a secure enclave. Fortunately, Intel
provides remote attestation for enclaves, in which Intel’s attestation
servers can verify that a remote enclave is secure. For the reverse
case, in contrast, the remote platform in our threat model does trust
the client to send non-malicious scripts. We have chosen this model
because in the case of computer games, the scripts are being sent
from the game servers to the player’s machine. The game creator
has created the software running on both platforms, but the game
servers remain in the control of the developers, and the developers
are trusted in our model. However, blindly trusting the client is not
possible, as the remote platform must first verify that it is talking
to a legitimate client. Therefore, the remote platform must have
prior knowledge of the identity of the client. We solve this problem
by hard-coding the public key of the client into the secure enclave.
ScriptShield Overview. An overview of ScriptShield is pre-
sented in Figure 1. There are two parties involved in executing a
script: a client who would like to send a script to be executed, and
a remote party out of the client’s control that securely executes
the script. The client could be a cloud user, a game publisher, or a
web service provider. The remote party could be a cloud provider,
a game player, or a web browser. From now on, we will refer to the
 Client Remote PlatformScript DecryptionLanguage InterpreterTrusted Module                           Host OS KernelInitialization(Remote Attestation, Secure Channel)Untrusted ModuleUser Script(Encryption)SGX Runtime LibraryOcall/Ecall WrapperSystem Call Shim38564721Session 2A: SGX-based SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand116• Step-IV: IAS replies with an atttestation verification report
which confirms or denies the authenticity of the quote and the
enclave it originates from.
Cryptographic Protection. Since the interpreter needs to retrieve
scripts from outside the enclave, to protect the script’s integrity and
confidentiality, ScriptShield needs to establish a secure channel
between the client and the remote enclave. More specifically, the
secure channel needs to satisfy the following requirements: (1) the
client needs to verify the code running inside the enclave (i.e., the
identity of the enclave) is exactly the same as expected, (2) the
enclave must authenticate the client, and (3) the script is encrypted
before it is sent to the enclave. As a result, the client only sends
scripts to a trusted enclave, the enclave only accepts scripts from
authenticated clients, and the remote platform never learns the
content of the encrypted scripts.
Intel’s SGX SDK provides a trusted cryptography library (called
sgx-tcrypto) that includes the cryptography functions used by
trusted libraries included in the SDK, such as the sgx-tservice
library. The Diffie-Hellman key exchange method is a widely used
approach to securely exchanging cryptographic keys over a public
channel, allowing two parties with no prior knowledge of each
other to jointly establish a shared secret key over an insecure
channel. However, it is well-known that the Diffie-Hellman protocol
is vulnerable to man-in-the-middle attacks, especially when the OS
in the remote platform is not trusted. To defend against this attack,
a Diffie-Hellman key exchange can be done along with remote
attestation. Because a 64-byte attested data can be associated with
the attestation report, the hash value of the enclave’s public key
can be embedded into the attested data, so that the public key is
cryptographically bound to the enclave’s identity. Moreover, we
hard code the public key of the client in the enclave for the enclave
to authenticate the client in order to prevent an attacker from
impersonating the client. After the client and the enclave have
established a secure communication channel, the client then can
encrypt the script and securely pass it to the enclave.
4.2 Remote Platform Execution
At the remote party (i.e., the SGX machine), we need to execute
scripts sent by the client. As shown in Figure 1, a typical SGX
process involves an Untrusted Module and a Trusted Module.
Untrusted Module. Launching an enclave requires an untrusted
component to set up the necessary environment, provide necessary
libraries (e.g., the SGX runtime library) and bridge functions for
the enclave, and then pass control to the enclave.
In addition to establishing the communication channel for
remote attestation with the client, our Untrusted Module contains
the SGX Runtime Library provided by the SGX SDK and provides
ocalls that can be called by the enclave. The enclave exposes an
ecall interface that can be called from untrusted code. Once remote
attestation succeeds, the client’s script is passed to the enclave and
the untrusted module hands off control flow to the enclave via an
ecall, which will start the execution of the interpreter.
Trusted Module. The interpreter of the corresponding scripting
language is executed inside the SGX enclave. With this, script code
and data are automatically protected. However, the challenge lies