# DASP智能合约Top 10漏洞

## 译文声明
本文为翻译文章，原文来源：[https://www.dasp.co/](https://www.dasp.co/)。具体内容和含义请以原文为准。
> 该项目由NCC集团发起，是一个开放的合作项目，旨在发现智能合约中的安全漏洞。
>
> GitHub地址：[链接]

在深入探讨智能合约Top 10漏洞之前，我们先简要了解一下OWASP Top 10。

### OWASP简介
OWASP（Open Web Application Security Project）是一个致力于提高软件安全性的国际组织。OWASP Top 10列出了最常见的Web应用程序安全风险。

### 智能合约Top 10漏洞
类似地，DASP项目列出了智能合约中最常见的十大安全漏洞。

### 以下是国外原创内容的翻译，如有不准确之处，请理解。

## 1. 重入漏洞
重入漏洞也被称为递归调用漏洞或空竞争漏洞。

**描述**
- 这种漏洞经常被忽视：审查者通常一次审查一个函数，并假设保护子例程的调用是安全且按预期运行的。——菲尔·戴安
- 重入攻击可能是最著名的以太坊漏洞之一。
- 首次发现时，引起了广泛关注。
- 它导致了数百万美元的盗窃案，并引发了以太坊的分叉。
- 当外部合约调用允许在初始执行完成之前对调用合约进行新的调用时，就会发生重入。

**损失**
- 估计损失为350万ETH（当时约为5000万美元）

**时间线**
- 2016/6/5：Christian Reitwiessner发现了一个坚定的反模式。
- 2016/6/9：更多以太坊攻击：Race-To-Empty是真实的交易（vessenes.com）。
- 2016/6/12：在以太坊智能合约中发现“递归调用”错误（blog.slock.it），但DAO资金未受影响。
- 2016/6/17：我认为TheDAO现在正在流失（reddit.com）。
- 2016/8/24：DAO的历史和经验教训（blog.sock.it）。

**真实世界影响**
- DAO：[链接]
- 示例：
  - 一个智能合约跟踪一些外部地址的余额，并允许用户通过withdraw()功能提取资金。
  - 一个恶意智能合约使用withdraw()函数提取其全部余额。
  - 在更新恶意合约的余额之前，受害者合约执行call.value(amount)()低级别函数将以太币发送给恶意合约。
  - 恶意合约有一个fallback()函数接受资金，然后回调到受害者合约的withdraw()函数。
  - 第二次执行会触发资金转移：由于恶意合约的余额尚未从首次提款中更新，因此恶意合约第二次成功提取了全部余额。

**代码示例**
```solidity
function withdraw(uint _amount) {
    require(balances[msg.sender] >= _amount);
    msg.sender.call.value(_amount)();
    balances[msg.sender] -= _amount;
}
```

**其他资源**
- [DAO智能合约](链接)
- [分析DAO的利用](链接)
- [简单的DAO代码示例](链接)
- [重入代码示例](链接)
- [有人试图利用我们的智能合约中的一个缺陷，盗取它的一切](链接)

## 2. 访问控制漏洞

**描述**
- 通过调用initWallet函数，可以将Parity Wallet库合约变为常规多签名钱包并成为其所有者。
- 访问控制问题在所有程序中都很常见，而不仅仅是智能合约。
- 事实上，这是OWASP排名前10位的第5位。人们通常通过公共或外部函数访问合约的功能。
- 尽管不安全的可见性设置会给攻击者直接访问合约的私有价值或逻辑的方式，但访问控制旁路有时更加微妙。
- 这些漏洞可能发生在合约使用已弃用的tx.origin验证调用者、长时间处理大型授权逻辑require以及在代理库或代理合约中鲁莽使用delegatecall时。

**损失**
- 估计损失为150,000 ETH（当时约3000万美元）

**真实世界影响**
- 奇偶校验错误1：[链接]
- 奇偶校验错误2：[链接]
- Rubixi：[链接]

**示例**
- 一个智能合约指定它初始化为合约的地址。这是授予特殊特权的常见模式，例如提取合约能力。
- 不幸的是，初始化函数可以被任何人调用，即使它已经被调用。允许任何人成为合约的所有者并获得资金。

**代码示例**
```solidity
function initContract() public {
    owner = msg.sender;
}
```
- 在Parity multi-sig钱包中，这个初始化函数与钱包本身分离并在“库”合约中。用户需要通过调用库的函数来初始化自己的钱包delegateCall。不幸的是，在我们的例子中，函数没有检查钱包是否已经被初始化。更糟糕的是，由于图书馆是一个智能合约，任何人都可以自行初始化图书馆并要求销毁。

**其他资源**
- [修复Parity多信号钱包bug 1](链接)
- [奇偶校验安全警报2](链接)
- [在奇偶钱包multi-sig hack上](链接)
- [不受保护的功能](链接)
- [Rubixi的智能合约](链接)

## 3. 算术问题
这个问题我们在之前的文章中提到过，也就是经典的溢出问题。也称为整数溢出和整数下溢。

**描述**
- 溢出情况会导致不正确的结果，特别是如果可能性未被预期，可能会影响程序的可靠性和安全性。——Jules Dourlens
- 整数溢出和下溢不是一类新的漏洞，但在智能合约中尤其危险。
- 无符号整数很普遍，大多数开发人员习惯于简单int类型（通常是有符号整数）。
- 如果发生溢出，许多良性代码路径可能成为盗窃或拒绝服务的载体。

**真实世界影响**
- DAO：[链接]
- BatchOverflow（多个令牌）：[链接]
- ProxyOverflow（多个令牌）：[链接]

**示例**
- 示例将在后续部分详细说明。

以上是对DASP智能合约Top 10漏洞的部分介绍，更多细节和示例请参考原文。