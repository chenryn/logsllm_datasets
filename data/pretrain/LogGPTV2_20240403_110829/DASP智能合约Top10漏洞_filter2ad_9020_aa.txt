# DASP智能合约Top10漏洞
##### 译文声明
本文是翻译文章，文章来源：https://www.dasp.co/
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
> 该项目是NCC集团的一项举措。这是一个开放的合作项目，致力于发现安全社区内的智能合约漏洞。
>
> GitHub地址 
* * *
在了解智能合约Top10之前，我们简单说一下，OWASP Top10。  
OWASP: Open Web Application Security Project
* * *
这个项目会公开十大web应用程序安全风险  
2017年版下载地址
类似的，我们有了智能合约Top10漏洞。
### 以下是国外原创，翻译过来的，翻译可能不准确，还请理解。
* * *
##
## 1.重入
也被称为或与空竞争，递归调用漏洞，未知调用等。
> 这种漏洞在很多时候被很多不同的人忽略：审阅者倾向于一次一个地审查函数，并且假定保护子例程的调用将安全并按预期运行。————菲尔戴安
###
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#**%E9%87%8D%E5%85%A5%E6%94%BB%E5%87%BB%E4%BB%8B%E7%BB%8D**)重入攻击介绍
  * 重入攻击，可能是最着名的以太坊漏洞，
  * 第一次被发现时，每个人都感到惊讶。
  * 它在数百万美元的抢劫案中首次亮相，导致了以太坊的分叉。
  * 当初始执行完成之前，外部合同调用被允许对调用合同进行新的调用时，就会发生重新进入。
  * 对于函数来说，这意味着合同状态可能会在执行过程中因为调用不可信合同或使用具有外部地址的低级函数而发生变化。
* * *
> 损失：估计为350万ETH（当时约为5000万美元）
###
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#**%E6%94%BB%E5%87%BB%E5%8F%91%E7%8E%B0%E6%97%B6%E9%97%B4%E8%A1%A8**)攻击发现时间表
> 2016/6/5——Christian Reitwiessner发现了一个坚定的反模式  
> 
* * *
> 2016/6/9——更多以太坊攻击：Race-To-Empty是真正的交易（vessenes.com）  
> 
* * *
> 2016/6/12——在以太坊智能合约’递归调用’错误发现（blog.slock.it）之后，没有DAO资金面临风险。  
>  contract-recursive-call-bug-discovery-29f482d348b>
* * *
> 2016/6/17——我认为TheDAO现在正在流失（reddit.com）  
>
> 
* * *
> 2016/8/24——DAO的历史和经验教训（blog.sock.it）  
>  learned-d06740f8cfa5>
###
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#**%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E5%BD%B1%E5%93%8D**)真实世界影响
> DAO  
> )
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E7%A4%BA%E4%BE%8B)示例
  * 一个聪明的合约跟踪一些外部地址的平衡，并允许用户通过其公共资金检索withdraw()功能。
  * 一个恶意的智能合约使用withdraw()函数检索其全部余额。
  * 在更新恶意合约的余额之前，受害者合约执行call.value(amount)() 低级别函数将以太网发送给恶意合约。
  * 该恶意合约有一个支付fallback()接受资金的功能，然后回调到受害者合约的withdraw()功能。
  * 第二次执行会触发资金转移：请记住，恶意合约的余额尚未从首次提款中更新。结果， 恶意合约第二次成功退出了全部余额。
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B)代码示例
以下函数包含易受重入攻击影响的函数。当低级别call()函数向msg.sender地址发送ether时，它变得易受攻击;
如果地址是智能合约，则付款将触发其备用功能以及剩余的交易gas：
    function withdraw(uint _amount) {
        require(balances[msg.sender] >= _amount);
        msg.sender.call.value(_amount)();
        balances[msg.sender] -= _amount;
    }
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E5%85%B6%E4%BB%96%E8%B5%84%E6%BA%90)其他资源
> DAO智能合约  
>
> 
>
> 分析DAO的利用  
> 
>
> 简单的DAO代码示例  
> 
>
> 重入代码示例  
>  contracts/tree/master/reentrancy>
>
> 有人试图利用我们的智能合约中的一个缺陷，盗取它的一切  
>  smart-contract-and-steal-all-of-its-ether/>
* * *
##
## 2.访问控制
> 通过调用initWallet函数，可以将Parity Wallet库合约变为常规多sig钱包并成为它的所有者。
* * *
  * 访问控制问题在所有程序中都很常见，而不仅仅是智能合约。
  * 事实上，这是OWASP排名前10位的第5位。人们通常通过其公共或外部功能访问合约的功能。
  * 尽管不安全的可视性设置会给攻击者直接访问合约的私有价值或逻辑的方式，但访问控制旁路有时更加微妙。
  * 这些漏洞可能发生在合约使用已弃用tx.origin的验证调用者时，长时间处理大型授权逻辑require并delegatecall在代理库或代理合约中鲁莽使用。
> 损失：估计为150,000 ETH（当时约3000万美元）
###
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#**%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E5%BD%B1%E5%93%8D**)真实世界影响
> 奇偶校验错误1  
> 
>
> 奇偶校验错误2  
>  destruct/>
>
> Rubixi  
> 
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E7%A4%BA%E4%BE%8B)示例
一个聪明的合约指定它初始化它作为合约的地址。这是授予特殊特权的常见模式，例如提取合约能力。  
不幸的是，初始化函数可以被任何人调用，即使它已经被调用。允许任何人成为合约者并获得资金。
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B)代码示例
在下面的例子中，契约的初始化函数将函数的调用者设置为它的所有者。然而，逻辑与合约的构造函数分离，并且不记录它已经被调用的事实。
    function initContract() public {
        owner = msg.sender;
    }
在Parity multi-sig钱包中，这个初始化函数与钱包本身分离并在“库”合约。用户需要通过调用库的函数来初始化自己的钱包delegateCall。不幸的是，在我们的例子中，函数没有检查钱包是否已经被初始化。更糟糕的是，由于图书馆是一个聪明的合约，任何人都可以自行初始化图书馆并要求销毁。
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E5%85%B6%E4%BB%96%E8%B5%84%E6%BA%90)其他资源
> 修复Parity多信号钱包bug 1  
> 
>
> 奇偶校验安全警报2  
> 
>
> 在奇偶钱包multi-sig hack上  
>  hack-405a8c12e8f7>
>
> 不受保护的功能  
>  contracts/tree/master/unprotected_function>
>
> Rubixi的智能合约  
>
> 
* * *
##
## 3.算数问题
这个问题，我们之前的文章有提到，也就是比较经典的溢出。
也被称为整数溢出和整数下溢。
> 溢出情况会导致不正确的结果，特别是如果可能性未被预期，可能会影响程序的可靠性和安全性。———Jules Dourlens
溢出简介
  * 整数溢出和下溢不是一类新的漏洞，但它们在智能合约中尤其危险
  * 其中无符号整数很普遍，大多数开发人员习惯于简单int类型（通常是有符号整数）
  * 如果发生溢出，许多良性代码路径成为盗窃或拒绝服务的载体。
###
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E5%BD%B1%E5%93%8D)真实世界影响
> DAO  
> 
>
> BatchOverflow（多个令牌）  
> 
>
> ProxyOverflow（多个令牌）  
> 
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E7%A4%BA%E4%BE%8B)示例