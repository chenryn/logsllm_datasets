但是字符串中不能出现单引号。如果引号没有配对就输入回车，Shell会给出续行提示符，要求用户
而不是字符的界定符。单引号用于保持引号内所有字符的字面值，即使引号内的\和回车也不例外，
和C语言不一样,
·除以上情况之外，在其它字符前面的\无特殊含义，只表示字面值
·表示\的字面值
·"表示"的字面值
·“表示'的字面值
·\$表示$的字面值
·反引号仍表示命令替换
·$加变量名可以取变量的值
一页
$ echo "\\"
品
ABC\
SSHELL
echo
echo
DE'
echo
(再按一次回车结束命令)
echo
(再按一次回车结束命令)
"$SHELL"
ABC\（回车)
'$SHELL'
：Shel脚本中的单引号和双引号一样都是字符串的界定符（双引号下一节介绍）
"GO
（回车）
全国嵌入式人才培训基地
起始页
上一级
，但以下情况除外:
4.bash启动脚本
下一页
---
## Page 598
这几行的意思是如果-/.bashrc文件存在则source它。多数Linux发行版在创建帐户时会自动创
为了使登录Shell也能自动执行-/.bashrc，通常在-/.bash_profile中调用-/.bashrc：
登录的Shell，这种Shell在启动时自动执行-/.bashrc脚本。
4.2.以交互非登录Shell启动请点评
4.1.作为交互登录Shell启动，或者使用--login参数启动请点评
4.bash启动脚本 请点评
比如在图形界面下开一个终端窗口，
这样启动bash会自动执行以下脚本:
端窗口得到的Shell也不是登录Shell。
口管理器登录之后会显示桌面而不会产生登录Shell（也不会执行启动脚本）
密码登录后得到的Shell,
启动bash的方法不同，执行启动脚本的步骤也不相同，具体可分为以下几种情况。
以fork子Shel方式执行的还是以source方式执行的？
启动脚本中，这样每次启动Shell时这些设置都自动生效。思考一下，bash在执行启动脚本时是
启动脚本是bash启动时自动执行的脚本。
3．顺便一提，在退出登录时会执行-/.bash_logout脚本（如果它存在的话）。
1．首先执行/etc/profile,
上一页
到第一个存在并且可读的文件来执行，
个设置对所有用户都生效，可以写在这个脚本里
个脚本中可以修改，
脚本里，
fi
~/.bashrc
~/.bashrc ]; then
也就是说,
 系统中每个用户登录时都要执行这个脚本，如果系统管理员希望某
，或者在登录Shel提示符下再输入bash命令，就得到一个交互非
当前用户的设置可以覆盖（Override）系统中全局的设
全国嵌入式人才培训基地
第31章Shell脚本
4.bash启动脚本
如果希望某个设置只对当前用户生效,
，在图形界面下打开终
可以写在这个
598
下一页
找
---
## Page 599
如果作为非交互Shell启动，则不执行任何启动脚本。通常我们写的Shell脚本都以#！/bin/sh开
如果作为交互Shell启动，相当于自动执行以下命令:
如果作为交互登录Shell启动，或者使用--login参数启动，则依次执行以下脚本：
4.4.以sh命令启动 请点评
如果环境变量BASH_ENv的值不是空字符串，则把它的值当作启动脚本的文件名，source这个脚本。
义，相当于自动执行以下命令：
为执行脚本而fork出来的子Shell是非交互Shell，启动时执行的脚本文件由环境变量BASH_ENv定
4.3.非交互启动 请点评
于从图形界面的窗口管理器登录并不会产生登录Shell，所以环境变量也应该在-/.bashrc 里设置。
就需要有非登录Shell的启动脚本，所以一般来说在-/.bash_profile里设置环境变量，
所以环境变量在登录She的启动脚本里设置一次就可以自动带到其它非登录Shell里，
端或者远程登录，那么登录Shell是该用户的所有其它进程的父进程，也是其它子Shell的父进程，
为什么登录Shell和非登录Shell的启动脚本要区分开呢？最初的设计是这样考虑的，
就可以了，而不必
直接输程序名运行而不必输入路径了，例如：
然后关掉终端窗口重新打开,
下面做一个实验，在-/.bashrc文件末尾添加一行（如果这个文件不存在就创建它）：
在~/.bashrc中设置。
动脚本中做某些设置，
2. ~/.profile
1./etc/profile
~$ ./a.out
 export PATH=$PATH: /home/akaedu 
if
~$ a.out
-n
..........
.........-
"$BASH_ENV"
......
，使它在图形终端窗口和字符终端的Shell中都起作用，最好就是
，或者从字符终端logout之后重新登录，现在主目录下的程序应该可以
 J; then .
"$ENV"; fi
~/.bash_profile中通常都有上面这几行。所以，
"$BASH_ENV"; fi
，以-/.bash_开头的那些启动脚本就不认了。所以,
，如果从字符终
而Shell的本
，如果要在启
599
由
---
## Page 600
3. Shell的基本语法
头，都属于这种方式。
全国嵌入式人才培训基地
起始页
上一级
5. Shell脚本语法
8
---
## Page 601
和C语言类似，测试条件之间还可以做与、或、非逻辑运算：
虽然看起来很奇怪，但左方括号“确实是一个命令的名字，传给命令的各参数之间应该用空格隔
试结果为假，
命令test或r可以测试一个条件是否成立,
5.1.条件测试：test【请点评
5. Shell脚本语法 请点评
形式是相同的，只不过test命令不需要1参数。以r命令为例，常见的测试命令如下表所示：
开
小关系：
上一页
STRING ］
表31.2.测试命令
SSRNG2
STRING2
-d DIR 1如果DIR存在并且是一个目录则为真
S
S
S
S
S
-Z
-f FILE 
echo $?
echo $?
test SVAR -gt 3
echo $?
test SVAR -gt 1
[ $VAR -gt 3 ]
VAR=2
 则命令的Exit Status为1（注意与C语言的逻辑表示正好相反）。例如测试两个数的大
2如果字符串不相同则为真
如果FILE存在且是一个普通文件则为真
于）之中的一
如果两个字符串相同则为真
如果STRING的长度非零则为真
如果STRING的长度为零则为真
全国嵌入式人才培训基地
第31章 Shell脚本
，如果测试结果为真，
5.Shell脚本语法
它们之间必须用空格隔开。命令test或[的参数
，则该命令的Exit Status为O，如果测
下二
贝
---
## Page 602
行elif、élse或者fi后面的子命令。if后面的子命令通常是测试命令，但也可以是其它命
换行，
果两条命令写在同一行则需要用;号隔开,
句本质上也是由若干条Shell命令组成的，例如先前讲过的
和C语言类似，
5.2. if/then/elif/else/fi 请点评
在双引号之中（展开为［-d Desktop-a""=‘abc’1）：
的Exit Status为O（表示真）
注意，
例如：
一样，
 要注意命令和各参数之间必须用空格隔开。if命令的参数组成一条子命令，
但这条命令没写完，
如果上例中的sVAR变量事先没有定义，
表31.3.带与、或、非的测试命令
then
if [ -f /bin/bash ]
#! /bin/sh 
fi
if ［ -f
S
S
bash:
S
！ EXPR
echo $?
EXPR1 -O EXPR2
unset VAR
EXPRl -a EXPR2
.se
VAR=abc
[ ,oqe, = dvAs e- doxsaa p- 
 echo
...........
_d
在Shell中用if、then、elif、else、fi这几条命令实现分支控制。这种流程控制语
~/.bashrc
~/.bashrc ]; then
/bin/bash
，Shell会自动续行，
-a
EXPR1和EXPR2可以是上表中的任意一种测试条件，-o表示逻辑
EXPR1和ExPR2可以是上表中的任意一种测试条件，-a表示逻辑
EXPR可以是上表中的任意一种测试条件，！表示逻辑反
与
 则执行then后面的子命令，
一行只写-
作为一种好的Shell编程习惯,
，则被Shell展开为空字符串，
，把下一行接在then后面当作一条命令处理。和[命令
then
一条命令就不需要写;号了，
如果Exit Status非O（表示假）
·～/.bashrc是第二条，fi是第三条。如
会造成测试条件的语法错
 应该总是把变量取值放
另外，
如果该子命令
，then后面有
则执
今
---
## Page 603
条命令，
型或字符型常量表达式，
case命令可类比C语言的switch/case语句，esac表示case语句块的结束。C语言的case只能匹配整
5.3.case/esac 请点评
和以下写法是等价的
用于在测试表达式中连接两个测试条件，要注意它们的区别，例如，
&&相当于"if..then.."，而l相当于“if no...then..”。&和ll用于连接两个命令，
这
此外，
上例中的read命令的作用是等待用户输入一行字符串，将该字符串存到一个Shel变量中。
行/bin/true或/bin/false得到真或假的Exit Status。再看一个例子：
:是一个特殊的命令，称为空命令，
样：
，Shel还提供了&&和语法，和C语言类似，具有Short-circuit特性，很多Shell脚本喜欢写成
#! /bin/sh
test "$vAR"
test 
#! /bin/sh
T ‘.anz sKemte. ouoa uau !: Jt
*）
read
 末尾必须以;结束，执行时找到第一个匹配的分支并执行相应的命令，然后直接跳 
test
............................
account;
exit 0
else
elif
if 
exit 1;;
echo "Sorry, $YES_OR_NO not recognized. Enter yes or no.'
echo "Good Afternoon!";;
echo
echo
echo`
"$(whoami)"
" $VAR"
"Good afternoon!"
"Good Morning!";;
"$YES
 exit 
OR
OR
OR_NO" in
NO
-gt 1 && test 
-gt 1 -a "$VAR" -lt 3
NO
OR
1)
 != 'root' && (echo you are using a non-privileged
一样用break跳出。
"no" ]; then
，该命令不做任何事，但Exit Status总是真。此外，也可以执
"$VAR "
..........
-lt 3
，每个匹配分支可以有若干
 而上面讲的-a和-o仅
---
## Page 604
也可以这样写:
FRUIT是一个循环变量,
Shel脚本的for循环结构和C语言很不一样，
5.4.for/do/done 请点评
执行停止服务、重新加载配置文件或重新启动服务的相关命令。
入start)分支执行相关的命令。
$1是一个特殊变量，
启动apache2服务的命令是
这种形式（以/etc/apache2为例）：
使用case语句的例子可以在系统服务的脚本目录/ete/init.a中找到。这个目录下的脚本大多具有
（按惯例，末尾有～字符的文件名表示临时文件），这个命令可以这样写：
$ for FILENAME in ^ls chap?^; do mv $FILENAME $FILENAME~; done
S
done
#! /bin/sh 
....
S
esac
htcacheclean}
case $1 
 for FILENAME in chap?; do mv $FILENAME $FILENAME-; done
echo 
 sudo /etc/init.d/apache2 start 
0
"I like′$FRUIT"
:
restart)
start)
2:
in
.................
在执行脚本时自动取值为第一个命令行参数，也就是start，月
exit 1 
force-reload)
。同理，
它类似于某些编程语言的foreach循环。例如：
do
第二次取值是banana，第三次取值
---.--.-..----.--
所以进
---
## Page 605
位置参数可以用shift命令左移。比如shift 3表示原来的s4现在变成s1，原来的s5现在变成s2等
5.6.位置参数和特殊变量请点评
1、把上面验证密码的程序修改一下，如果用户输错五次密码就报错退出。
Shell还有until循环，类似C语言的do...while循环。本章从略。
while的用法和C语言类似。比如一个验证密码的脚本:
5.5. while/do/done 请点评
有很多特殊变量是被Shell自动赋值的，我们已经遇到了s?和s1，现在总结一下:
习题请点评
下面的例子通过算术运算控制循环的次数：
$
$1、 $2...
表31.4.常用的位置参数和特殊变量
#! /bin/sh
苏
done
COUNTER=1
#! /bin/sh
done
echo "Enter password:"
#! /bin/sh
 read TRY
echo“
相当于C语言main函数的argc
"Here
当前Shell的进程号
表示参数列表"$1""$2"
这些称为位置参数（PositionalParameter）
相当于C语言main函数的argv[0]
"$COUNTER" -1t 10 l; do
一条命令的Exit Status
，例如可以用在for循环中的in后面。
1，
注意这里的#后面不表示注释
相当于C语言main函数
605
---
## Page 606
变量，改变这些变量并不会影响函数外面的so、$1、$2等变量。函数中可以用return命令返回，
Shell函数没有参数列表并不表示不能传参数，
注意函数体的左花括号{和后面的命令之间必须有空格或换行，如果将最后一条命令和右花括号}写
和C语言类似，Shel中也有函数的概念，但是函数定义中没有返回值也没有参数列表。例如；
5.7.函数请点评
在，
下面这个脚本可以一次创建多个目录,
意个参数，在函数内同样是用s0、$1、$2等变量来提取参数，
的最后（类似C语言中的main函数，这才是整个脚本实际开始执行命令的地方）。
中的函数必须先定义后调用，
在
定义foo()函数时并不执行函数体中的命令，
同一行，命令末尾必须有;号。
，如果目录不存在，首先打印信息然后试着创建该目录。
is_directory()
foo
#！
echo
#! /bin/sh
echo
echo
echo
echo
echo
echo
echo 
if is_directory 
else
 DIR_NAME=$1
fi
 return 0
,return 1
/bin/sh
P
if 
mkdir 
exit 1
"The parameter list is $@"