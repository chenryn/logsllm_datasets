OFB 在知道明文+密文的情况下直接伪造明文. 这里通过广播攻击 + Coppersmith 得到明文.
    import remoteCLI
    from binascii import unhexlify, hexlify
    from Crypto.Util.strxor import strxor
    cli = remoteCLI.CLI()
    cli.connect('47.240.41.112', 54321)
    e, n = cli.recvUntilFind(r'pubkey:{e, n}={(.*), (.*)}')
    n = int(n[:-1], 16)
    cli.sendLine(str(n * 10))
    cli.sendLine(str(1))
    n1, = cli.recvUntilFind(r'Alpha:my pub-key is: e=3,n=(.*)')
    n2, = cli.recvUntilFind(r'Bravo:my pub-key is: e=3,n=(.*)')
    n3, = cli.recvUntilFind(r'Charlie:my pub-key is: e=3,n=(.*)')
    mess1, a1, b1 = cli.recvUntilFind(r'admin:Alpha, your ciphertext is: c=(.*)\nwith some parameters:a=(.*), b=(.*)')
    mess2, a2, b2 = cli.recvUntilFind(r'admin:Bravo, your ciphertext is: c=(.*)\nwith some parameters:a=(.*), b=(.*)')
    mess3, a3, b3 = cli.recvUntilFind(r'admin:Charlie, your ciphertext is: c=(.*)\nwith some parameters:a=(.*), b=(.*)')
    cipher, = cli.recvUntilFind(r'Alpha:David, make sure you\'ve read this:(.*)')
    var = 'n1 n2 n3 mess1 mess2 mess3 a1 a2 a3 b1 b2 b3'
    for i in var.split():
        globals()[i] = int(globals()[i][:-1], 16)
    data = {
        'n': [n1, n2, n3],
        'c': [mess1, mess2, mess3],
        'a': [a1, a2, a3],
        'b': [b1, b2, b3]
    }
    import json
    import subprocess
    data = json.dumps(data)
    output = subprocess.check_output(['sage', 'crypto2-broadcast.sage', data]).decode()[:-1]
    plaintext = int(output)  # I will send you the ticket tomorrow afternoon\x03\x03\x03
    plaintext = b'I will send you the ticket tomorrow afternoon\x03\x03\x03'
    forge_mess = b'I will send you the ticket tomorrow morning\x05\x05\x05\x05\x05'
    cipher = unhexlify(cipher)
    keystream = strxor(plaintext, cipher)
    forge_cipher = strxor(keystream, forge_mess)
    cli.sendLine('2')
    cli.sendLine(hexlify(forge_cipher))
    cli.console()
crypto2-broadcast.sage
    def hastads(cArray,nArray,e=3):
        """
        Performs Hastads attack on raw RSA with no padding.
        cArray = Ciphertext Array
        nArray = Modulus Array
        e = public exponent
        """
        if(len(cArray)==len(nArray)==e):
            for i in range(e):
                cArray[i] = Integer(cArray[i])
                nArray[i] = Integer(nArray[i])
            M = crt(cArray,nArray)
            return(Integer(M).nth_root(e,truncate_mode=1))
        else:
            print("CiphertextArray, ModulusArray, need to be of the same length, and the same size as the public exponent")
    def linearPaddingHastads(cArray,nArray,aArray,bArray,e=3,eps=1/8):
        """
        Performs Hastads attack on raw RSA with no padding.
        This is for RSA encryptions of the form: cArray[i] = pow(aArray[i]*msg + bArray[i],e,nArray[i])
        Where they are all encryptions of the same message.
        cArray = Ciphertext Array
        nArray = Modulus Array
        aArray = Array of 'slopes' for the linear padding
        bArray = Array of 'y-intercepts' for the linear padding
        e = public exponent
        """
        if(len(cArray) == len(nArray) == len(aArray) == len(bArray) == e):
            for i in range(e):
                cArray[i] = Integer(cArray[i])
                nArray[i] = Integer(nArray[i])
                aArray[i] = Integer(aArray[i])
                bArray[i] = Integer(bArray[i])
            TArray = [-1]*e
            for i in range(e):
                arrayToCRT = [0]*e
                arrayToCRT[i] = 1
                TArray[i] = crt(arrayToCRT,nArray)
            P. = PolynomialRing(Zmod(prod(nArray)))
            gArray = [-1]*e
            for i in range(e):
                gArray[i] = TArray[i]*(pow(aArray[i]*x + bArray[i],e) - cArray[i])
            g = sum(gArray)
            g = g.monic()
            # Use Sage's inbuilt coppersmith method
            roots = g.small_roots(epsilon=eps)
            if(len(roots)== 0):
                print("No Solutions found")
                return -1
            return roots[0]
        else:
            print("CiphertextArray, ModulusArray, and the linear padding arrays need to be of the same length," +
             "and the same size as the public exponent")
    import json
    import sys
    data = json.loads(sys.argv[1])
    print(linearPaddingHastads(data['c'], data['n'], data['a'], data['b']))
## Misc
### 签到题
关注微信公众号，cat /flag
### 头号玩家
一直向上走就会有Flag  
（一直向下会有假Flag
### 打开电动车
读数据发现有1个停止位，24个数据位，应该是PT2262，查了资料发现是16位地址8位数据，然而不对  
然后发现可能是20位地址，这个对了
### Maaaaaze
[脚本地址](https://gist.githubusercontent.com/ZeddYu/358060f02d6f0aed0ec27fed80db85b8/raw/6a358dbcf76c78eaf25de35452bbaa6dbcb62681/SCTF%2520maze)
## Rev
### CreakMe
一个正常的Binary，程序是一个裸的标准AES加密，密钥和向量分别是sycloversyclover和sctfsctfsctfsctf，密文是Base64过的，用于比对的密文在程序的构造函数里面被变过，调试器挂一下就拿到了
    >>> iv = 'sctf' * 4
    >>> key = 'syclover' * 2
    >>> aes = AES.new(key, AES.MODE_CBC, iv)
    >>> cipher = 'nKnbHsgqD3aNEB91jB3gEzAr+IklQwT1bSs3+bXpeuo='
    >>> aes.decrypt(cipher.decode('base64'))
    'sctf{Ae3_C8c_I28_pKcs79ad4}\x05\x05\x05\x05\x05'
### who is he
是一个Unity3D，逆Assembly-CSharp.dll，算法很简单，写个程序解一下
    using System;
    using System.IO;
    using System.Runtime.InteropServices;
    using System.Security.Cryptography;
    using System.Text;
    namespace HelloWorldApplication
    {
       class HelloWorld
       {
          static void Main(string[] args)
          {
                   String str = "1Tsy0ZGotyMinSpxqYzVBWnfMdUcqCMLu0MA+22Jnp+MNwLHvYuFToxRQr0c+ONZc6Q7L0EAmzbycqobZHh4H23U4WDTNmmXwusW4E+SZjygsntGkO2sGA==";
            byte[] bytes = Encoding.Unicode.GetBytes("1234");
            byte[] array = Convert.FromBase64String(str);
            DESCryptoServiceProvider dESCryptoServiceProvider = new DESCryptoServiceProvider();
            MemoryStream memoryStream = new MemoryStream();
            CryptoStream cryptoStream = new CryptoStream(memoryStream, dESCryptoServiceProvider.CreateDecryptor(bytes, bytes), CryptoStreamMode.Write);
            cryptoStream.Write(array, 0, array.Length);
            cryptoStream.FlushFinalBlock();
            byte[] bytes2 = memoryStream.ToArray();
            cryptoStream.Close();
            memoryStream.Close();
            String result = Encoding.Unicode.GetString(bytes2);
             Console.WriteLine(result);
          }
       }
    }
然后发现不对，开调试器挂程序，发现程序里面还有两个Assembly-CSharp.dll，而且之前那个根本就没载进去。。。  
算法一样的，密文密钥分别是
    q+w89Y22rObfzxgsquc5Qxbbh9ZIAHET/NncmiqEo67RrDvz34cdAk0BalKWhJGl2CBYMlr8pPA=
    1234
    xZWDZaKEhWNMCbiGYPBIlY3+arozO9zonwrYLiVL4njSez2RYM2WwsGnsnjCDnHs7N43aFvNE54noSadP9F8eEpvTs5QPG+KL0TDE/40nbU=
    test
发现第二组是对的  
（你打CTF像CXK.jpg
### Strange apk
安卓逆向,打开后dex2jar转一下dex文件,在恢复出来的代码中可以找到一段对一个文件解密的过程.  
文件可以看到是一个非常大的文件,打开后里面有好多syclover这些东西  
可以看到里面的东西是通过key[i%len]这样循环解密一个文件,根据同样的逻辑尝试恢复文件,后来发现开头是PK,里面还有安卓包内的一些东西,即解密除了第二个apk  
继续解密逆dex,可以看到前面12个是base64,后12个是割一位填充一个字符8,拿出来即可
### babyre
elf文件,一共有三层  
第一层是5 _5_ 5的一个立体的密室,根据waasdxy走到目标位置即可  
第二层则是base64dec,要求解密后的字符为sctf_9102  
第三层是一个自写的算法,输入的16位在前面排好,在buf里成为4个int,然后通过i=0,j=4依次递增,执行如下运算  
`buf[j] = buf[i] ^ func(buf[i + 1] ^ buf[i + 2] ^ buf[i +
3])`,直到最后运算结束,填充buf到30,最后check后四位在内存的值  
可以看出来我们只知道`buf[26],buf[27],buf[28],buf[29]`,由于`buf[29] = buf[25] ^
func(buf[26],buf[27],buf[28])`,由xor运算的性质,我们就可算出buf25,递归到0即可求出初始字符串
    #include 
    #include "defs.h"
    #include 
    #include 
    int dword_7F4BEE488940[288] =
    {....
    ....//此处自行dump
    };
    unsigned int calcc(unsigned int a1)
    {
      int v1; // ST18_4
      int table[290]; // [rsp+20h] [rbp-490h]
      unsigned __int64 v4; // [rsp+4A8h] [rbp-8h]
      qmemcpy(table, dword_7F4BEE488940, 0x480uLL);
      v1 = (table[BYTE2(a1)] > 24] = 4;j--,i--) {
            buf[i] = calc(buf[j],buf[j-3],buf[j-2],buf[j-1]);
            printf("buf[%d] = %d ^ calcc(%d,%d,%d)\n",i,j,j-3,j-2,j-1);
        }
        printf("%s\n",(char *)buf);
        // printf("%d\n",strlen((char *)buf));
    }
### music
又是个安卓,打开后会强制你听一首《早春的树》,然后到了输入flag的界面,输入错误会从头听歌,然后输入  
逆dex,可以看到比较清楚的逻辑,在几个class中,看到几个运算,分别是tohexstr,getdb,还有一个魔改了一下的rc4,db文件拿到字符串md5当作key,找到hex后的字符串,写解密脚本
    public class Notepad 
    {
        public static void main(String[] args) 
        {
            byte[] enctob = new byte[]{-62, -117, -61, -99, -61, -90, -62, -125, -62, -77, -61, -99, -62, -109, -62, -119, -62, -72, -61, -70, -62, -98, -61, -96, -61, -89, -62, -102, 22, 84, -61, -81, 40, -61, -95, -62, -79, 33, 91, 83};       
            String bs = new String(enctob);
            char[] flagenc = bs.toCharArray();
            char[] out = new char[bs.length()];
            int[] S = new int[256];
            byte[] wtf = new byte[256];
            int i,j,k;
            String key = "E7E64BF658BAB14A25C9D67A054CEBE5";
            for (i = 0; i < 256; i++ ) 
            {
                S[i] = i;
                wtf[i] = (byte)(key.charAt(i % 32));
            }
            i = 0;
            j = 0;
            for(i = 0,j = 0;i < 256; i++ ) 
            {
                j = (S[i] + j + wtf[i]) % 256;
                k = S[i];
                S[i] = S[j];
                S[j] = k;
            }
            for (i = 0,j = 0,k = 0; i < bs.length(); i++ ) 
            {
                k = (k + 1) % 256;
                j = (S[k] + j) % 256;
                int temp = S[k];
                S[k] = S[j];
                S[j] = temp;
                out[i] = (char)((flagenc[i] ^ S[(S[k] + S[k] % 256) % 256]) + k);
                System.out.println(out);
            }
        }
    }
稍微打一波小广告，SU战队长期招人，无论您是小白，大佬，只要乐于分享，愿意交流，我们永远欢迎您的加入。我们可以一起打比赛，一起交流技术，一起为冲击全国甚至国际重要赛事前列而努力。我们的战队成员主要来自五湖四海，还有非常厉害的
**郁离歌** ， **郁离歌** ， **郁离歌**
，（这里的话竟然自己会动！）划重点！！（问：跟郁离歌打比赛是一种什么体验？答：只要花心思想自己怎么躺最舒服就行了！）我们乐于交流，乐于分享，乐于为自己的战队做努力，有着一致的目标。所以，如果有师傅想来一起交流，一起学习进步，一起打比赛的话，加入我们没有
**地区年级** 等任何限制，我们非常欢迎师傅或者团体的加入！欢迎联系：suers_xctf#126.com