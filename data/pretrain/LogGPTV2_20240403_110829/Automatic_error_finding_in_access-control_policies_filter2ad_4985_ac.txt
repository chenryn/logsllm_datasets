duced in the example by changing the can assign rule will
enable users who are in both Acct and Audit roles to be
assigned to Finance. Figure 3 contains the erroneous policy
in Mohawk’s input language.
Table 1 contains the abstraction-reﬁnement steps for the
example policy in Figure 3. Figure 4 contains the tree for
the roles Related-by-Assignment with respect to the Budget-
Committee, which is the query role. In the priority queue,
BudgetCommittee has priority 0, Finance has priority 1, and
ﬁnally Acct and Audit have priority 2 (lower numbers indi-
cate better priorities).
In the abstraction step, Mohawk adds the users Alice and
Bob, and roles BudgetCommittee and Admin. Bob is the
user in the query, and Alice is the admin user. BudgetCom-
mittee is the role from the queue with priority 0 and Admin
is the admin role. The UA membership, (Alice, Admin), is
added to the abstract policy. No can assign or can revoke
rules are added because all of them require roles not added
to the abstract policy. NuSMV does not identify a counter
example for the abstract policy. Therefore, Mohawk reﬁnes
the policy.
In the ﬁrst reﬁnement step, Mohawk adds Finance from
the queue with priority 1. There are no changes to the users,
UA, and can revoke. The can assign rule (cid:104)Admin, Finance,
BudgetCommittee(cid:105) is added to the abstract policy. NuSMV
still does not identify a counterexample. Therefore, Mo-
hawk further reﬁnes the abstract policy.
In the second reﬁnement step, Mohawk adds roles Audit
and Acct, 2 UA memberships for Bob, 3 can assign rules,
and 2 can revoke rules. Bob’s membership to roles Acct and
Audit are added to the abstract policy. The three additional
can assign rules added are (cid:104)Admin, Acct∧Audit, Finance(cid:105),
(cid:104)Admin, TRUE, Audit(cid:105), and (cid:104)Admin, TRUE, Acct(cid:105). The
additional can revoke rules added are (cid:104)Admin, Acct (cid:105) and
(cid:104)Admin, Audit(cid:105). NuSMV identiﬁes a counter example that
has the following sequence of administrative actions:
1. Alice assigns Bob to Finance. This action is allowed
because of the can assign rule (cid:104)Admin, Acct∧Audit,
Finance(cid:105).
2. Alice assigns Bob to BudgetCommittee. This action
is allowed because of the can assign rule (cid:104)Admin, Fi-
nance, BudgetCommittee(cid:105).
As a result of seeing this counter example, the administrator
can ﬁx the erroneous can assign rule to enforce the correct
policy.
168As we have illustrated in the example, the abstract pol-
icy veriﬁed in each step is more constrained compared to
the original policy. For example, the initial abstract pol-
icy does not allow any assignment and revocation actions.
The subsequent two reﬁnement steps add additional roles,
can assign, and can revoke rules from the original policy. In
eﬀect, the abstraction step aggressively constrains the policy
and the subsequent reﬁnement steps relax the constraints to
make the policy more precise compared to the earlier step,
illustrating our under-approximation strategy.
3.8 Implementation
We implemented Mohawk using Java.
In addition to
the abstraction-reﬁnement approach, we implemented sev-
eral supporting tools for Mohawk. We have a tool for au-
tomatically converting a policy in the Mohawk language
to NuSMV speciﬁcation. Also, we implemented a tool for
creating complex ARBAC policies.
We also implemented two well-known static slicing tech-
niques for ARBAC policies [21, 46]. The basic idea be-
hind static slicing is to remove users, roles, can assign, and
can revoke rules from the policies that are irrelevant to the
safety question. There are two types of static slicing tech-
niques, namely forward pruning [21] and backward prun-
ing [21,46]. We implemented these techniques and analyzed
the eﬀect of static slicing on the ARBAC policies used in
our experiments. We found that these techniques are not
eﬀective for realistic policies (Section 5.1).
4. SOURCES OF COMPLEXITY FOR
ERROR FINDING
In this section, we describe the aspects that make error
ﬁnding in the context of access control systems a diﬃcult
problem. We call these “sources of complexity.” For each
source of complexity, we give some intuition as to why it
is a source of complexity. Previous work [21, 39, 46] on the
veriﬁcation problem alludes to some of these sources of com-
plexity. Finally, we explain how Mohawk’s abstraction re-
ﬁnement strategy deals with these sources of complexity.
4.1 The Sources
Three aspects of access-control systems can bring com-
plexity to the veriﬁcation: (1) the syntax for the state, (2)
the state-change rules, and, (3) the veriﬁcation question of
interest.
In the context of (1), the size of the state is a
source of complexity. In our case, this size is quantiﬁed by
the number of roles in the RBAC component of the AR-
BAC policy. The rationale is that as the number of roles in
the RBAC component increases, a veriﬁer has to maintain
a larger vector of user-role assignments, and also deal with
more possible combinations of such assignments in consid-
ering state-changes.
The potential source (3) is not a source of complexity in
our context. We study the basic question of safety. Given a
state, checking whether the question is true or false is equiv-
alent to an access-check. It has been observed in previous
work [21] that more complex questions can be reduced to
this rather basic notion of safety. Consequently, it appears
that even more complex questions will not make the veriﬁ-
cation problem any more diﬃcult.
The other sources of complexity are in the state-change
rules. The component within the state-change rules that is
relevant is the precondition. The speciﬁc aspects of precon-
ditions that are complexity sources are (1) disjunctions —
these are introduced by multiple can assign rules with the
same target role, (2) irrevocable roles — these are roles for
which there is no can revoke rule with any such role as the
target, (3) mixed roles — these are roles that appear with
and without negation in can assign rules, and, (4) positive
precondition roles — these are roles that appear without
negation in can assign rules.
Disjunctions. Given a safety instance, (cid:104)γ, ψ, u, r(cid:105) (see Sec-
tion 2.2), we observe that determining whether the answer
is true or not can be equivalent to determining the satisﬁa-
bility of a boolean expression in Conjunctive Normal Form
(CNF). This problem is known to be NP-complete.
Consider the following example. We have as target roles
in can assign, r1, . . . , rn. The rule that corresponds to ri in
can assign is (cid:104)ra, ci ∧ ri−1, ri(cid:105) where ci is a disjunction of
roles or their negations1, and contains no roles from among
r1, . . . , rn. The only can assign rule with r as the target role
is (cid:104)ra, rn, r(cid:105), and u is assigned to r0 in the start state.
In our example, the veriﬁcation instance (cid:104)γ, ψ, u, r(cid:105) is true
if and only if the boolean expression c1∧. . .∧cn is satisﬁable
via the ﬁring of can assign and can revoke rules.
Indeed,
this construction that we use as an example is similar to an
NP-hardness reduction in previous work [21].
Irrevocable roles. A role(cid:98)r is irrevocable if it is not a mem-
ber of can revoke. Once u is assigned to(cid:98)r, u’s membership
in(cid:98)r cannot be revoked. Consider the case that an irrevoca-
ble role(cid:98)r appears as a negated role in some can assign rules.
u should be assigned to(cid:98)r.
to (cid:98)r quite close to the start state, then it is possible that
The challenge for a “forward-search” algorithm that decides
the veriﬁcation question (cid:104)u, r(cid:105) is that it is not obvious when
In a path in the state-transition graph, if u is assigned
that action causes u to never be authorized to r on that
path. Given a set of roles I, all of which appear negated in
preconditions of can assign rules and are irrevocable, such
an algorithm must consider paths that correspond to every
subset of I.
Stoller et al. [46] capture this requirement in what they
call Stage 2 (“forward analysis”) of their backward-search al-
gorithm. The algorithm maintains a subset of I as an anno-
tation in the state-reachability graph (or “plan,” as they call
it). They observe that their algorithm is doubly-exponential
in the size of I.
Mixed roles. A mixed role is one that appears with nega-
tion and without in preconditions of can assign rules2.
Stoller et al. [46] show that the veriﬁcation problem is ﬁxed
1As we discuss in Section 2.1, disjunctions are disallowed in
an individual can assign rule. However, multiple rules with
the same target role results in a disjunction of the precondi-
tions of those rules. In our example, if ci = ri,1 ∨ . . . ∨ ri,m,
then we assume that we have the following can assign
rules with ri as the target role:
. . .,
(cid:104)ra, ri,m ∧ ri−1, ri(cid:105).
2We point out that a role does not appear with and without
negation in the same can assign rule. This is because con-
junction and negation are the only operators in a rule (see
Section 2.1), and therefore such a precondition is always
false.
(cid:104)ra, ri,1 ∧ ri−1, ri(cid:105),
169parameter tractable in the number of mixed roles. To see
why the number of mixed roles is a source of complexity,
consider the case that no role is mixed.
An algorithm can simply adopt the greedy approach of
maximally assigning u to every role rp that appears without
negation, and revoking u from every role rn that appears
negated. Such an approach will not work for a mixed role.
Given a mixed role rm, it is possible that we may need to
repeatedly assign u to it, and revoke u from it on a path to
a state in which u is assigned to r.
A search algorithm must decide whether to revoke u from
rm in every state in which he is assigned to rm, and whether
to assign u to rm in every state in which he is not assigned
to rm. In the worst case, every such combination must be
tried for every mixed role.
Positive precondition roles. A positive precondition role
is a role that appears without negation in a precondition.
The number of positive precondition roles is a source of com-
plexity. Sasturkar et al. [39] and Stoller et al. [46] observe
that if we restrict each can assign rule to only one posi-
tive precondition role, then the veriﬁcation problem becomes
ﬁxed parameter tractable in the number of irrevocable roles.
An intuition behind this is that if there is at most one posi-
tive precondition role in every precondition of the can assign
rules, then the resultant CNF expression for which the model
checker checks satisﬁability comprises only of Horn clauses.
We know that Horn Satisﬁability is in P.
If this restric-
tion is lifted, then the corresponding satisﬁability problem
is NP-complete, as we discuss above under “Disjunctions.”
We point out, however, that these are not unique to AR-
BAC. The access matrix scheme due to Harrison et al. [17],
for example, has preconditions in its state-change rules as
well. Similarly, in the context of RBAC, the work of Cramp-
ton and Loizou [9] on the scoped administration of RBAC,
has what they call conditions on state-changes that are very
similar to the preconditions of ARBAC.
4.2 Abstraction Reﬁnement and the Sources
of Complexity
An aspect from our approach that assuages the complex-
ity is that we are goal-oriented in our abstraction-reﬁnement
algorithm (see Section 3). Recall that we create a priority
queue of roles that are Related-by-Assignment to the query
role, which is the role in the safety instance. This stratiﬁca-
tion of roles helps us eliminate roles that cannot aﬀect the
membership to the query role. A consequence of this is that
a number paths from the start-state that do not lead to the
error-state are removed.
Another aspect is that we optimistically look for short
paths that lead from the start state to the error state, while
not burdening the model checker with a lot of extraneous
input. We ﬁrst check whether we can reach the error state
in zero transitions. In doing so, we ensure that the model
checker is provided no state-change rules. We then check
whether we can reach it in only a few transitions. In do-
ing so, we provide the model checker with only those state-
change rules that may be used for those few transitions. And
so on.
Every source of complexity is associated with an in-
tractable problem. For example, disjunctions are associ-
ated with satisﬁability of boolean expressions in Conjunctive
Normal Form (CNF). For a model-checker to check whether
there is an error requires it to check whether a boolean ex-
pression in CNF that is embedded in the broader problem
instance is satisﬁable. The two aspects we discuss above re-
sult in fewer clauses in the corresponding boolean expression
in the abstract policy and its reﬁnements.
The numbers of irrevocable, mixed and positive precondi-
tion roles are fewer in the abstract policy and its reﬁnements
as well. Also, they pertain to fewer target roles. Conse-
quently, the corresponding instances of intractable problems
are smaller, and there are fewer possible paths for the model
checker to explore than if such roles are strewn across rules
for several target roles. Our empirical assessment that we
discuss in the following section bears out these discussions.
5. RESULTS
Our experimental evaluation compares Mohawk to cur-
rent state-of-the-art veriﬁcation tools for ARBAC policies,
namely symbolic model checking, bounded model checking,
and RBAC-PAT [46]. Note that although all the compet-
ing techniques were developed in the context of veriﬁcation,
they can also be used for the purposes of error ﬁnding. We
chose NuSMV [33] as the reference implementation for both
symbolic and bounded model checking.
In the following,
we use the terms MC and BMC to refer to NuSMV’s sym-
bolic model checker and bounded model checker respectively.
Our evaluation focused on ascertaining the eﬃciency and the
scalability of the tools in ﬁnding errors.
We measure the eﬃciency based on the absolute time
taken to ﬁnd an error. We measure the scalability with
respect to the complexity sources (Section 4), namely num-
ber of roles, and four aspects of preconditions (number of
disjunctions, number of irrevocable roles, number of mixed
roles, and number of positive preconditions) in the input
policies. Our case study (see Section 5.1) establishes that
such features are required for creating realistic ARBAC poli-
cies. Our results can be summarized as follows:
Where Mohawk performs better: The mindset behind
Mohawk is that policies are likely to contain errors, and
most of these errors can be found in only a few reﬁne-
ments. In other words, we are optimistic about ﬁnding er-
rors. Consequently, we undergo the additional overhead of
abstraction-reﬁnement. For complex policies in which it is
likely that there are several errors at various levels of re-
ﬁnement, it is likely that Mohawk will outperform conven-
tional approaches. Mohawk is also likely to perform better
on policies that contain several sources of complexity (see
Section 4).
Where other tools may perform better: Other tools
may perform better than Mohawk in two particular cases
that abstraction-reﬁnement is unnecessary overhead. One is
for the subcases for which the problem is in P. In this case,
conventional model checking is likely to perform better than
Mohawk. Another is the case that there are only a few
errors, and these errors require several reﬁnement steps. It is
not necessarily true that Mohawk will perform worse in this
case, as the fact that we use bounded model checking may in
itself mitigate the eﬀects of the overhead from abstraction-
reﬁnement. However, we acknowledge that it is possible that
in such a case, abstraction-reﬁnement adds overhead which
may cause it to perform worse than other approaches.
In the following sections, we describe our case study,
170Num. of Roles, Rules MC
BMC
RBAC-PAT
Mohawk
Case Study
Test suite 1
Poly-time veriﬁable
Test suite 2
NP-Complete
Test suite 3
PSPACE-Complete
Simple Policies
612, 6142
3, 15
5, 25
20, 100
40, 200
200, 1000
500, 2500
4000, 20000
20000, 80000
30000, 120000
40000, 200000
3, 15
5, 25
20, 100
40, 200
200, 1000
500, 2500
4000, 20000
20000, 80000
30000, 130000
40000, 200000
3, 15
5, 25
20, 100
40, 200
200, 1000
500, 2500
4000, 20000