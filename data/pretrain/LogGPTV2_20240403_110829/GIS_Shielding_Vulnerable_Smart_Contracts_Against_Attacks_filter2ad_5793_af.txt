were carried out using the HPC facilities of the University of Lux-
embourg [39] – see h(cid:138)ps://hpc.uni.lu. (cid:140)is work is partly supported
by the Luxembourg National Research Fund (FNR) under grant
13192291.
REFERENCES
[1] Sidney Amani, Myriam B´egel, Maksym Bortin, and Mark Staples. 2018. Towards
verifying ethereum smart contract bytecode in Isabelle/HOL. In Proc. 7th ACM
SIGPLAN International Conference on Certi(cid:128)ed Programs and Proofs (CPP’18).
ACM, 66–77. h(cid:138)ps://doi.org/10.1145/3167084
[2] Nicola Atzei, Massimo Bartole(cid:138)i, and Tiziana Cimoli. 2017. A Survey of A(cid:138)acks
on Ethereum Smart Contracts (SoK). In Proc. 6th International Conference on
Principles of Security and Trust - Volume 10204. Lecture Notes in Computer Science,
Vol. 10204. Springer-Verlag, 164–186.
[3] Ahmed Ben Ayed. 2017. A conceptual secure blockchain-based electronic voting
system. International Journal of Network Security & Its Applications 9, 3 (2017),
01–09.
Jordi Baylina. 2019. Veri(cid:128)cation of the balances rescued from the multisig
compromise. h(cid:138)ps://github.com/Giveth/WHGBalanceVeri(cid:128)cation.
[4]
[5] Karthikeyan Bhargavan, Antoine Delignat-Lavaud, C´edric Fournet, Anitha Gol-
lamudi, Georges Gonthier, Nadim Kobeissi, Natalia Kulatova, Aseem Rastogi,
(cid:140)omas Sibut-Pinote, Nikhil Swamy, and Santiago Zanella-B´eguelin. 2016. For-
mal Veri(cid:128)cation of Smart Contracts: Short Paper. In Proceedings of the 2016 ACM
Workshop on Programming Languages and Analysis for Security (PLAS ’16). ACM,
91–96. h(cid:138)ps://doi.org/10.1145/2993600.2993611
[6] Lorenz Breidenbach, Phil Daian, Florian Tram`er, and Ari Juels. 2018. Enter
the Hydra: Towards Principled Bug Bounties and Exploit-Resistant Smart Con-
tracts. In Proc. 27th USENIX Security Symposium (USENIX Security’18). USENIX
Association, 1335–1352. h(cid:138)ps://www.usenix.org/conference/usenixsecurity18/
presentation/breindenbach
[7] ChainSecurity. 2019.
Constantinople enables new Reentrancy A(cid:138)ack.
h(cid:138)ps://medium.com/chainsecurity/constantinople-enables-new-reentrancy-
a(cid:138)ack-ace4088297d9.
#6995.
anyone
contract
[8] Ashu Daniel Lv. 2016. CarbonVote. h(cid:138)ps://h(cid:138)p://carbonvote.com/.
[9] devops199.
your
h(cid:138)ps://github.com/paritytech/parity-ethereum/issues/6995.
Josselin Feist, Gustavo Grieco, and Alex Groce. 2019. Slither: a static analysis
framework for smart contracts. In 2019 IEEE/ACM 2nd International Workshop on
Emerging Trends in So(cid:135)ware Engineering for Blockchain (WETSEB). IEEE, 8–15.
Ilya Grishchenko, Ma(cid:138)eo Ma(cid:130)ei, and Clara Schneidewind. 2018. A Semantic
Framework for the Security Analysis of Ethereum Smart Contracts. In Proc.
7th International Conference on Principles of Security and Trust (POST’18) (Lec-
ture Notes in Computer Science), Lujo Bauer and Ralf K¨usters (Eds.), Vol. 10804.
Springer, 243–269. h(cid:138)ps://doi.org/10.1007/978-3-319-89722-6 10
[12] Shelly Grossman, I(cid:138)ai Abraham, Guy Golan-Gueta, Yan Michalevsky, Noam
Rinetzky, Mooly Sagiv, and Yoni Zohar. 2017. Online detection of e(cid:130)ectively
callback free objects with applications to smart contracts. Proceedings of the
ACM on Programming Languages 2, POPL (2017), 48.
[13] NCC Group. 2018. Decentralized Application Security Project (DASP) Top 10.
h(cid:138)ps://dasp.co/index.html.
[14] Feng Hao, Peter YA Ryan, and Piotr Zieli´nski. 2010. Anonymous voting by
can
kill
[10]
[11]
2017.
two-round public discussion. IET Information Security 4, 2 (2010), 62–67.
Jingxuan He, Mislav Balunovic, Nodar Ambroladze, Petar Tsankov, and Martin T.
Vechev. 2019. Learning to Fuzz from Symbolic Execution with Application to
Smart Contracts. In Proc. 26th ACM SIGSAC Conference on Computer and Com-
munications Security (CCS’19), Lorenzo Cavallaro, Johannes Kinder, XiaoFeng
[15]
12
Wang, and Jonathan Katz (Eds.). ACM, 531–548. h(cid:138)ps://doi.org/10.1145/3319535.
3363230
[16] Evere(cid:138) Hildenbrandt, Manasvi Saxena, Nishant Rodrigues, Xiaoran Zhu, Philip
Daian, Dwight Guth, Brandon Moore, Daejun Park, Yi Zhang, Andrei Stefanescu,
et al. 2018. Kevm: A complete formal semantics of the ethereum virtual machine.
In 2018 IEEE 31st Computer Security Foundations Symposium (CSF). IEEE, 204–217.
[17] Friðrik Hj´almarsson, Gunnlaugur K Hreioarsson, Mohammad Hamdaqa, and
G´ısli Hj´almt`ysson. 2018. Blockchain-based e-voting system. In 2018 IEEE 11th
International Conference on Cloud Computing (CLOUD). IEEE, 983–986.
[18] Bo Jiang, Ye Liu, and WK Chan. 2018. Contractfuzzer: Fuzzing smart contracts
for vulnerability detection. In Proceedings of the 33rd ACM/IEEE International
Conference on Automated So(cid:135)ware Engineering. ACM, 259–269.
[19] Sukrit Kalra, Seep Goel, Mohan Dhawan, and Subodh Sharma. 2018. ZEUS:
Analyzing Safety of Smart Contracts.. In Proc. 25th Network and Distributed
System Security Symposium (NDSS’18). (cid:140)e Internet Society, 1–12.
[20] Aashish Kolluri, Ivica Nikolic, Ilya Sergey, Aquinas Hobor, and Prateek Saxena.
2019. Exploiting the laws of order in smart contracts. In Proceedings of the 28th
ACM SIGSOFT International Symposium on So(cid:135)ware Testing and Analysis. ACM,
363–373.
Johannes Krupp and Christian Rossow. 2018. teEther: Gnawing at Ethereum
to Automatically Exploit Smart Contracts. In 27th USENIX Security Symposium
(USENIX Security’18), William Enck and Adrienne Porter Felt (Eds.). USENIX
Association, 1317–1333. h(cid:138)ps://www.usenix.org/conference/usenixsecurity18/
presentation/krupp
[22] Kibin Lee, Joshua I James, Tekachew G Ejeta, and Hyoung J Kim. 2016. Electronic
voting service using block-chain. Journal of Digital Forensics, Security and Law
11, 2 (2016), 8.
[23] Loi Luu, Duc-Hiep Chu, Hrishi Olickel, Prateek Saxena, and Aquinas Hobor.
2016. Making Smart Contracts Smarter. In Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security (CCS ’16). ACM, New York,
NY, USA, 254–269. h(cid:138)ps://doi.org/10.1145/2976749.2978309
[24] Patrick McCorry, Siamak F. Shahandashti, and Feng Hao. 2017. A Smart Contract
for Boardroom Voting with Maximum Voter Privacy. In Proc. 21st International
Conference on Financial Cryptography and Data Security (FC’17) (Lecture Notes in
Computer Science), Aggelos Kiayias (Ed.), Vol. 10322. Springer, 357–375. h(cid:138)ps:
//doi.org/10.1007/978-3-319-70972-7 20
[25] Satoshi Nakamoto. 2009. Bitcoin: A Peer-to-Peer Electronic Cash System. Cryp-
tography Mailing list at h(cid:136)ps://metzdowd.com (03 2009).
Ivica Nikoli´c, Aashish Kolluri, Ilya Sergey, Prateek Saxena, and Aquinas Hobor.
[26]
2018. Finding the greedy, prodigal, and suicidal contracts at scale. In Proc. 34th
Annual Computer Security Applications Conference (ACSAC’18). ACM, 653–663.
[27] Ryan Osgood. 2016. (cid:140)e future of democracy: Blockchain voting. COMP116:
Information Security (2016), 1–21.
[28] Anton Permenev, Dimitar Dimitrov, Petar Tsankov, Dana Drachsler-Cohen, and
Martin Vechev. 2020. Verx: Safety veri(cid:128)cation of smart contracts. In Proc. 41st
IEEE Symposium on Security and Privacy (IEEE SP’20). IEEE, 18–20.
Another Parity Wallet hack explained.
h(cid:138)ps://medium.com/@Pr0Ger/another-parity-wallet-hack-explained-
847ca46a2e1c.
[29] Sergey Petrov.
[30] Michael Rodler, Wenting Li, Ghassan O. Karame, and Lucas Davi. 2019. Re-
Entrancy A(cid:138)ack Pa(cid:138)erns. h(cid:138)ps://github.com/uni-due-syssec/eth-reentrancy-
a(cid:138)ack-pa(cid:138)erns.
[31] Michael Rodler, Wenting Li, Ghassan O. Karame, and Lucas Davi. 2019. Sereum:
Protecting Existing Smart Contracts Against Re-Entrancy A(cid:138)acks. In Proc. 26th
Network and Distributed System Security Symposium (NDSS’19). (cid:140)e Internet
Society.
A(cid:138)ack.
[32] David
Understanding (cid:140)e
2017.
Siegel.
2016.
[21]
DAO
h(cid:138)ps://www.coindesk.com/understanding-dao-hack-journalists/.
[33] Xin Sun, (cid:139)anlong Wang, Piotr Kulicki, and Mirek Sopek. 2019. A simple voting
protocol on quantum blockchain. International Journal of (cid:138)eoretical Physics 58,
1 (2019), 275–281.
[34] A Tann, Xing Jie Han, Sourav Sen Gupta, and Yew-Soon Ong. 2018. Towards
safer smart contracts: A sequence learning approach to detecting vulnerabilities.
arXiv preprint arXiv:1811.06632 (2018).
[35] Sergei Tikhomirov, Ekaterina Voskresenskaya, Ivan Ivanitskiy, Ramil Takhaviev,
Evgeny Marchenko, and Yaroslav Alexandrov. 2018. SmartCheck: Static Analysis
of Ethereum Smart Contracts. In Proc. 1st IEEE/ACM International Workshop
on Emerging Trends in So(cid:135)ware Engineering for Blockchain (WETSEB@ICSE’18).
ACM, 9–16. h(cid:138)p://ieeexplore.ieee.org/document/8445052
[36] Christof Ferreira Torres, Julian Sch¨u(cid:138)e, and Radu State. 2018. Osiris: Hunting
for Integer Bugs in Ethereum Smart Contracts. In Proceedings of the 34th Annual
Computer Security Applications Conference (ACSAC ’18). ACM, New York, NY,
USA, 664–676. h(cid:138)ps://doi.org/10.1145/3274694.3274737
[37] Christof Ferreira Torres, Mathis Steichen, and Radu State. 2019. (cid:140)e Art of (cid:140)e
Scam: Demystifying Honeypots in Ethereum Smart Contracts. In 28th USENIX
Security Symposium (USENIX Security 19). USENIX Association, Santa Clara, CA,
1591–1607.
[38] Petar Tsankov, Andrei Dan, Dana Drachsler-Cohen, Arthur Gervais, Florian
Buenzli, and Martin Vechev. 2018. Securify: Practical security analysis of smart
contracts. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and
Communications Security. ACM, 67–82.
[39] S. Varre(cid:138)e, P. Bouvry, H. Cartiaux, and F. Georgatos. 2014. Management of an
Academic HPC Cluster: (cid:140)e UL Experience. In Proc. of the 2014 Intl. Conf. on
High Performance Computing & Simulation (HPCS 2014). IEEE, Bologna, Italy,
959–967.
[40] Haijun Wang, Yi Li, Shang-Wei Lin, Lei Ma, and Yang Liu. 2019. Vultron: catching
vulnerable smart contracts once and for all. In Proc. 41st International Conference
on So(cid:135)ware Engineering: New Ideas and Emerging Results (ICSE NIER’19), Anita
Sarma and Leonardo Murta (Eds.). IEEE / ACM, 1–4. h(cid:138)ps://doi.org/10.1109/
ICSE-NIER.2019.00009
[41] Gavin Wood. 2014. Ethereum: A secure decentralised generalised transaction
[42] Valentin W¨ustholz and Maria Christakis. 2019. Harvey: A greybox fuzzer for
ledger. Ethereum Project Yellow Paper 151 (2014), 1–32.
smart contracts. arXiv preprint arXiv:1905.06944 (2019).
[43] Pengcheng Zhang, Feng Xiao, and Xiapu Luo. 2019. SolidityCheck: (cid:139)ickly
Detecting Smart Contract Problems (cid:140)rough Regular Expressions. arXiv preprint
arXiv:1911.09425 (2019).
[44] Wol(cid:128)e Zhao. 2017. $30 Million: Ether Reported Stolen Due to Parity Wallet
Breach. h(cid:138)ps://www.coindesk.com/30-million-ether-reported-stolen-parity-
wallet-breach.
[45] Zhichao Zhao and T.-H. Hubert Chan. 2015. How to Vote Privately Using Bitcoin.
In Proc. 17th International Conference on Information and Communications Security
(ICICS’15) (Lecture Notes in Computer Science), Sihan Qing, Eiji Okamoto, Kwangjo
Kim, and Dongmei Liu (Eds.), Vol. 9543. Springer, 82–96. h(cid:138)ps://doi.org/10.1007/
978-3-319-29814-6 8
[46] Yi Zhou, Deepak Kumar, Surya Bakshi, Joshua Mason, Andrew Miller, and
Michael Bailey. 2018. Erays: reverse engineering ethereum’s opaque smart con-
tracts. In 27th {USENIX} Security Symposium ({USENIX} Security 18). USENIX
Association, 1371–1385.
A COMPLETE LIST OF ÆGIS’S ATTACK
PATTERNS
Table 5 provides a complete list of vulnerabilities as well as their
respective a(cid:138)ack pa(cid:138)erns that ÆGIS is currently capable to detect.
B UNCONDITIONAL REENTRANCY
EXAMPLE
Figure 9 shows an example of a smart contract with an uncondi-
tional reentrancy. In this example an a(cid:138)acker (cid:128)rst deposits a small
amount of ether and then uses a reentrancy a(cid:138)ack in order to drain
all the ether that every single user has deposited.
1
2
3
4
5
6
7
8
9
10
11
12
13
contract VulnBank {
mapping ( address => uint ) public userBalances ;
function deposit () public payable {
userBalances [ msg . sender ] += msg . value ;
}
function withdrawAll () public {
uint amountToWithdraw = userBalances [ msg . sender ];
msg . sender . call . value ( amountToWithdraw )("");
userBalances [ msg . sender ] = 0;
}
}
Figure 9: Example of a contract that is vulnerable to uncon-
ditional reentrancy [30].
13
Vulnerability
Same-Function
Reentrancy
Cross-Function
Reentrancy
Delegated
Reentrancy
Create-Based
Reentrancy
Parity Wallet
Hack 1
Parity Wallet
Hack 2
Integer Over(cid:131)ow
(Addition)
Integer Over(cid:131)ow
(Multiplication)
( opcode = CALL ) ⇒ ( opcode = CALL ) where ( src . stack (1) = dst . stack (1) ) ∧
( opcode = SSTORE ) → ( opcode = SSTORE ) where ( src . stack (0) = dst . stack (0) ) ∧
( src . address = dst . address ) ∧ ( src . pc = dst . pc ) →
( src . address = dst . address ) ∧ ( src . depth > dst . depth )
A(cid:138)ack Pa(cid:138)ern
( opcode = CALL ) ⇒ ( opcode = CALL ) where
( src . stack (1) = dst . stack (1) ) ∧ ( src . address = dst . address ) ∧
( src . memory ( src . stack (3) , src . stack (4) ) (cid:44) dst . memory ( dst . stack (3) , dst . stack (4) )) →
( src . address = dst . address ) ∧ ( src . depth > dst . depth )
( opcode = SSTORE ) → ( opcode = SSTORE ) where ( src . stack (0) = dst . stack (0) ) ∧
( opcode = DELEGATECALL ) ⇒ ( opcode = DELEGATECALL ) where ( src . stack (1) = dst . stack (1) ) ∧
( opcode = SSTORE ) → ( opcode = SSTORE ) where ( src . stack (0) = dst . stack (0) ) ∧
( src . address = dst . address ) ∧ ( src . pc = dst . pc ) →
( src . address = dst . address ) ∧ ( src . depth > dst . depth )
( opcode = CALLCODE ) ⇒ ( opcode = CALLCODE ) where ( src . stack (1) = dst . stack (1) ) ∧
( opcode = SSTORE ) → ( opcode = SSTORE ) where ( src . stack (0) = dst . stack (0) ) ∧
( src . address = dst . address ) ∧ ( src . pc = dst . pc ) →
( src . address = dst . address ) ∧ ( src . depth > dst . depth )
( opcode = CREATE ) ⇒ ( opcode = CREATE ) where ( src . stack (1) = dst . stack (1) ) ∧
( opcode = SSTORE ) → ( opcode = SSTORE ) where ( src . stack (0) = dst . stack (0) ) ∧
( src . address = dst . address ) ∧ ( src . pc = dst . pc ) →
( src . address = dst . address ) ∧ ( src . depth > dst . depth )
( opcode = DELEGATECALL ) ⇒ ( opcode = CALLDATACOPY ) (cid:123) ( opcode = SSTORE ) (cid:123) ( opcode = JUMPI ) where
( src . transaction . hash (cid:44) dst . transaction . hash ) →
(( opcode = CALLDATALOAD ) (cid:123) ( opcode = CALL )) where
( dst . stack (2) > 0)
( opcode = CALLDATACOPY ) (cid:123) ( opcode = SSTORE ) (cid:123) ( opcode = JUMPI ) where
( src . transaction . hash (cid:44) dst . transaction . hash ) →
(( opcode = CALLDATALOAD ) (cid:123) ( opcode = SELFDESTRUCT ))
( opcode = CALLDATALOAD ) (cid:123) ( opcode = ADD ) where
(( dst . stack (0) + dst . stack (1) ) (cid:44) dst . stack . result ) (cid:123) ( opcode = CALL )
( opcode = CALLDATALOAD ) (cid:123) ( opcode = MUL ) where
(( dst . stack (0) * dst . stack (1) ) (cid:44) dst . stack . result ) (cid:123) ( opcode = CALL )
Integer Under(cid:131)ow ( opcode = CALLDATALOAD ) (cid:123) ( opcode = SUB ) where
(( dst . stack (0) - dst . stack (1) ) (cid:44) dst . stack . result ) (cid:123) ( opcode = CALL )
Timestamp
Dependence
Transaction
Order Dependency
( opcode = TIMESTAMP ) (cid:123) ( opcode = JUMPI ) → ( opcode = CALL ) where ( dst . stack (2) > 0)
( opcode = SSTORE ) (cid:123) ( opcode = SLOAD ) where
( src . block . number = dst . block . number ) ∧ ( src . transaction . from (cid:44) dst . transaction . from )
Table 5: List of vulnerabilities and their respective attack patterns.
14