In 25th Annual Network and
Distributed System Security Symposium (2018).
[70] LUNDEN, I.
Relx acquires ThreatMetrix for 817M to ramp up
https://techcrunch.com/2018/01/29/relx-
in risk-based authentication.
threatmetrix-risk-authentication-lexisnexis/, 2018.
[71] MAYER, J. R. “any person... a pamphleteer”: Internet anonymity in the
age of web 2.0.
[72] MOWERY, K., AND SHACHAM, H. Pixel perfect: Fingerprinting canvas
in html5. Proceedings of W2SP (2012).
[73] NETIQ.
Device Fingerprinting for Low Friction Authentication.
https://www.microfocus.com/media/white-paper/device ﬁngerprinting
for low friction authentication wp.pdf.
[74] NIKIFORAKIS, N., INVERNIZZI, L., KAPRAVELOS, A., ACKER, S. V.,
JOOSEN, W., KRUEGEL, C., PIESSENS, F., AND VIGNA, G. You
Are What You Include: Large-scale Evaluation of Remote JavaScript
Inclusions.
In ACM Conference on Computer and Communications
Security (CCS) (2012).
[75] NIKIFORAKIS, N., KAPRAVELOS, A., JOOSEN, W., KRUEGEL, C.,
PIESSENS, F., AND VIGNA, G. Cookieless monster: Exploring the
ecosystem of web-based device ﬁngerprinting. In Security and Privacy
(S&P) (2013), IEEE.
[76] NOTTINGHAM, M. Unsanctioned Web Tracking. https://www.w3.org/
2001/tag/doc/unsanctioned-tracking/, 2015.
[77] OLEJNIK, L., ACAR, G., CASTELLUCCIA, C., AND DIAZ, C. The
leaking battery: A privacy analysis of the HTML5 Battery Status API.
In Cryptology ePrint Archive: Report 2015/616 (2015).
[78] OLEJNIK, L., ENGLEHARDT, S., AND NARAYANAN, A. Battery Status
In International
Not Included:Assessing Privacy in Web Standards.
Workshop on Privacy Engineering (2017).
[79] PAPADOPOULOS, P., KOURTELLIS, N., AND MARKATOS, E. P. Cookie
Synchronization: Everything You Always Wanted to Know But Were
Afraid to Ask. In The Web Conference (2019).
[80] PAPADOPOULOS, P., SNYDER, P., ATHANASAKIS, D., AND LIVSHITS,
B. Keeping out the Masses: Understanding the Popularity and Implica-
tions of Internet Paywalls. In The Web Conference (2020).
[81] QUINLAN, R.
C4.5: Programs for Machine Learning. Morgan
Kaufmann Publishers, San Mateo, CA, 1993.
[82] SANCHEZ-ROLA, I., SANTOS, I., AND BALZAROTTI, D. Clock Around
the Clock: Time-Based Device Fingerprinting. In ACM Conference on
Computer and Communications Security (CCS) (2018).
[83] SCHUH, J. Building a more private web. https://www.blog.google/
products/chrome/building-a-more-private-web, 2019.
[84] SCHWARZ, M., LACKNER, F., AND GRUSS, D.
JavaScript Template
Attacks: Automatically Inferring Host Information for Targeted Exploits.
In NDSS (2019).
[85] SCULLY, R. Identity Resolution vs Device Graphs: Clarifying the Differ-
ences. https://amperity.com/blog/identity-resolution-vs-device-graphs-
clarifying-differences/.
[86] SIVAKORN, S., POLAKIS, J., AND KEROMYTIS, A. D. I’m not a human:
Breaking the Google reCAPTCHA. In Black Hat Asia (2016).
[87] SKOLKA, P., STAICU, C.-A., AND PRADEL, M. Anything to Hide?
In World Wide
Studying Miniﬁed and Obfuscated Code in the Web.
Web (WWW) Conference (2019).
[88] SNYDER, P., ANSARI, L., TAYLOR, C., AND KANICH, C. Browser
feature usage on the modern web. In Proceedings of the 2016 Internet
Measurement Conference (2016), ACM, pp. 97–110.
[89] SNYDER, P., TAYLOR, C., AND KANICH, C. Most websites don’t need
to vibrate: A cost-beneﬁt approach to improving browser security.
In
Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security (2017), ACM, pp. 179–194.
[90] STAROV, O., AND NIKIFORAKIS, N. Xhound: Quantifying the ﬁnger-
printability of browser extensions. In 2017 IEEE Symposium on Security
and Privacy (SP) (2017), IEEE, pp. 941–956.
[91] VALENTINO RIZZO. Machine Learning Approaches for Automatic
Detection of Web Fingerprinting. Master’s thesis, Politecnico di Torino,
Corso di laurea magistrale in Ingegneria Informatica (Computer Engi-
neering), 2018.
[92] VASTEL, A., LAPERDRIX, P., RUDAMETKIN, W., AND ROUVOY, R.
Fp-Scanner: The Privacy Implications of Browser Fingerprint Inconsis-
tencies. In USENIX Security (2018).
[93] VASTEL, A., LAPERDRIX, P., RUDAMETKIN, W., AND ROUVOY, R.
Fp-stalker: Tracking browser ﬁngerprint evolutions.
In 2018 IEEE
Symposium on Security and Privacy (SP) (2018), IEEE, pp. 728–741.
[94] WILANDER, J. Intelligent Tracking Prevention 2.3. https://webkit.org/
blog/9521/intelligent-tracking-prevention-2-3/, 2019.
[95] WOOD, M. Today’s Firefox Blocks Third-Party Tracking Cookies and
https://blog.mozilla.org/blog/2019/09/03/
Cryptomining by Default.
todays-ﬁrefox-blocks-third-party-tracking-cookies-and-cryptomining-
by-default/, 2019.
[96] WU, Q., LIU, Q., ZHANG, Y., LIU, P., AND WEN, G. A Machine
Learning Approach for Detecting Third-Party Trackers on the Web. In
ESORICS (2016).
IX. APPENDIX
A. Extensions to OpenWPM JavaScript instrumentation
(WebGL)
the Web Graphics Library
OpenWPM’s instrumentation does not cover a number of
libraries—
APIs used for ﬁngerprinting by prominent
including
and
performance.now. These APIs have been discovered
to be ﬁngerprintable [64]. The standard use case of
WebGL is to render 2D and 3D graphics in HTML canvas
element, however, it has potential to be abused for browser
ﬁngerprinting. The WebGL renderer and vendor varies by
the OS and it creates near distinct WebGL images with same
conﬁgurations on different machines. The WebgGL properties
and the rendered image are used by current state-of-the-art
browser ﬁngerprinting [16], [25] scripts. Since WebGL is
used by popular ﬁngerprinting scripts, we instrument WebGL
JavaScript API. performance.now is another JavaScript
API method whose standard use case is to return time in
ﬂoating point milliseconds since the start of a page load but
it also have ﬁngerprinting potential. Speciﬁcally, the timing
information extracted from performance.now can be used
for timing speciﬁc ﬁngerprint attacks such as typing cadence
[18], [31]. We extend OpenWPM to also capture execution
of performance.now.
For completeness, we instrument additional un-instrumented
methods of already instrumented JavaScript APIs in Open-
WPM. Speciﬁcally, we enhance our execution trace by instru-
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:55 UTC from IEEE Xplore.  Restrictions apply. 
1158
menting methods such as drawImage and sendBeacon for
canvas and navigation JavaScript APIs, respectively.
Since most ﬁngerprinting scripts use JavaScript APIs that
are also used by gaming and interactive websites (e.g.
canvas), we instrument additional JavaScript APIs to cap-
ture script’s interaction with DOM. Speciﬁcally, to capture
DOM interaction speciﬁc JavaScript APIs, we instrument
document, node, and animation APIs. JavaScript
is
an event driven language and it has capability to execute
code when events trigger. To extend our execution trace,
we instrument JavaScript events such as onmousemove and
touchstart to capture user speciﬁc interactions.
In addition, we notice that some scripts make multiple calls
to JavaScript API methods such as createElement and
setAttribute during their execution. We limit our record-
ing to only ﬁrst 50 calls of each method per script, except
for CanvasRenderingContext2D.measureText and
CanvasRenderingContext2D.font, which are called
multiple times for canvas font ﬁngerprinting. Furthermore,
the event driven nature of JavaScript makes it challenging to
capture the complete execution trace of scripts. To this end, to
get a comprehensive execution of a script, we synthetically
simulate user activity on a webpage. First, we scroll
the
wbepage from top to bottom and do random mouse movements
to trigger events. Second, we record all of the events (e.g.
onscroll) as they are registered on different elements on
a webpage and execute them after 10 seconds of a page
load. Doing so, we synthetically simulate events and capture
JavaScript API methods that were waiting for those events to
trigger.
B. Sample Features Extracted From ASTs & Execution Traces
Table VII shows a sample of the features extracted from
the AST in Figure 2b and Table VIII shows a sample of the
dynamic features extracted from execution trace of Script 3a.
Static Features
ArrayExpression:monospace
MemberExpression:font
ForStatement:var
MemberExpression:measureText
MemberExpression:width
MemberExpression:length
MemberExpression:getContext
CallExpression:canvas
TABLE VII: A sample of features extracted from AST in Figure 2b.
C. Fingerprinting Heuristics
Below we list down the slightly modiﬁed versions of
heuristics proposed by Englehardt and Narayanan [54] to
detect ﬁngerprinting scripts. Since non-ﬁngerprinting adoption
of ﬁngerprinting APIs have increased since the study, we make
modiﬁcations to the heuristics to reduce the false positives.
These heuristics are used to build our initial ground truth of
ﬁngerprinting and non-ﬁngerprinting scripts.
Feature Name
Document.createElement
HTMLCanvasElement.width
HTMLCanvasElement.height
HTMLCanvasElement.getContext
CanvasRenderingContext2D.measureText
Element Tag Name
HTMLCanvasElement.width
HTMLCanvasElement.height
CanvasRenderingContext2D.measureText
CanvasRenderingContext2D.measureText
Feature Value
True
True
True
True
True
Canvas
100
100
7 (no. of chars.)
N (no. of calls)
TABLE VIII: A sample of the dynamic features extracted from the
execution trace of Script 3a.
Canvas Fingerprinting. A script is identiﬁed as canvas ﬁn-
gerprinting script according to the following rules:
1) The canvas element text is written with fillText or
strokeText and style is applied with fillStyle or
strokeStyle methods of the rendering context.
2) The script calls toDataURL method to extract
the
canvas image.
3) The script does not calls save, restore, and
addEventListener methods on the canvas element.
WebRTC Fingerprinting. A script is identiﬁed as WebRTC
ﬁngerprinting script according to the following rules:
1) The
script
calls
createDataChannel
or
createOffer methods of the WebRTC peer connection.
2) The
script
calls onicecandidate or local
Description methods of the WebRTC peer connection.
Canvas Font Fingerprinting. A script is identiﬁed as canvas
font ﬁngerprinting script according to the following rules:
1) The script sets the font property on a canvas element
to more than 20 different fonts.
2) The script calls the measureText method of the ren-
dering context more than 20 times.
AudioContext Fingerprinting. A script is identiﬁed as Audio-
Context ﬁngerprinting script according to the following rules:
the createOscillator,
createDynamicsCompressor, destination, start
Rendering, and oncomplete method of the audio context.
1) The script calls any of
D. Examples of Dormant and Deviating Scripts
Script 3 shows an example dormant script and Script 4
shows an example deviating script.
E. Why Machine Learning?
To conduct ﬁngerprinting, websites often embed off-the-
shelf third-party ﬁngerprinting libraries. Thus, one possible ap-
proach to detect ﬁngerprinting scripts is to simply compute the
textual similarity between the known ﬁngerprinting libraries
and the scripts embedded on a website. Scripts that have
higher similarity with known ﬁngerprinting libraries are more
likely to be ﬁngerprinting scripts. To test this hypothesis, we
compare the similarity of ﬁngerprinting and non-ﬁngerprinting
scripts detected by FP-INSPECTOR against ﬁngerprintjs2, a
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:55 UTC from IEEE Xplore.  Restrictions apply. 
1159
(function(g) {
......
n.prototype = {
getCanvasPrint: function() {
var b = document.createElement("canvas"),d;
try {
d = b.getContext("2d")
} catch (e) {
return ""
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
}
d.textBaseline = "top";
d.font = "14px 'Arial'";
...
d.fillText("http://valve.github.io", 4, 17);
return b.toDataURL()
}
};
"object" === typeof module &&
"undefined" !== typeof exports && (
module.exports = n);
g.ClientJS = n
})(window);
20
21
Script 3: A truncated example of a dormant script from sdk1.resu.io/
scripts/resclient.min.js in which function prototypes are assigned to
the window object and can be called at a later point in time.
...
canvas: function(t) {
var e = document.createElement("canvas");
if ("undefined" == typeof e.getContext)
t.push("UNSUPPORTED_CANVAS");
else {
e.width = 780, e.height = 150;
var n = "UNICODE STRING",
i = e.getContext("2d");
i.save(), i.rect(0,0,10,10), i.rect(2,2,6,6),
t.push(!1 === i.isPointInPath(5, 5, "evenodd")
? "yes" : "no"), i.restore(), i.save();
var r = i.createLinearGradient(0, 0, 200, 0);
.....
i.shadowColor="rgb(85,85,85)",i.shadowBlur=3,
i.arc(500,15,10,0,2*Math.PI,!0),i.stroke(),
i.closePath(),i.restore(),t.push(e.toDataURL())
}
return t
}
...
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
Script
deviating
script from webresource.c-ctrip.com/code/ubt/ bfa.min.js?v=20195
22.js. The heuristic is designed to ignore scripts that call save or
restore on CanvasRenderingContext2D as a way to reduce
false positives.
popular open-source ﬁngerprinting library. Speciﬁcally, we
tokenize scripts into keywords by ﬁrst beautifying them and
then splitting them on white spaces. We then compute a tok-
enized script’s Jaccard similarity, pairwise, with all versions of
ﬁngerprintjs2. The highest similarity score among all versions
is attributed to a script.
truncated
example
of
a
4:
A
Our test set consists of the ﬁngerprinting scripts detected
by FP-INSPECTOR and an equal number of randomly sampled