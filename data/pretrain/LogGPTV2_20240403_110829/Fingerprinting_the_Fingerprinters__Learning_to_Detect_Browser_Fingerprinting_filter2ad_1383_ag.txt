### References

1. **In 25th Annual Network and Distributed System Security Symposium (2018).**
2. **LUNDEN, I.** Relx acquires ThreatMetrix for $817M to ramp up risk-based authentication. *TechCrunch* (2018). Retrieved from: https://techcrunch.com/2018/01/29/relx-threatmetrix-risk-authentication-lexisnexis/
3. **MAYER, J. R.** "Any Person... a Pamphleteer": Internet Anonymity in the Age of Web 2.0.
4. **MOWERY, K., & SHACHAM, H.** Pixel Perfect: Fingerprinting Canvas in HTML5. Proceedings of W2SP (2012).
5. **NETIQ.** Device Fingerprinting for Low Friction Authentication. White Paper. Retrieved from: https://www.microfocus.com/media/white-paper/device-fingerprinting-for-low-friction-authentication-wp.pdf
6. **NIKIFORAKIS, N., INVERNIZZI, L., KAPRAVELOS, A., ACKER, S. V., JOOSEN, W., KRUEGEL, C., PIESSENS, F., & VIGNA, G.** You Are What You Include: Large-scale Evaluation of Remote JavaScript Inclusions. In ACM Conference on Computer and Communications Security (CCS) (2012).
7. **NIKIFORAKIS, N., KAPRAVELOS, A., JOOSEN, W., KRUEGEL, C., PIESSENS, F., & VIGNA, G.** Cookieless Monster: Exploring the Ecosystem of Web-Based Device Fingerprinting. In Security and Privacy (S&P) (2013), IEEE.
8. **NOTTINGHAM, M.** Unsanctioned Web Tracking. W3C TAG Document (2015). Retrieved from: https://www.w3.org/2001/tag/doc/unsanctioned-tracking/
9. **OLEJNIK, L., ACAR, G., CASTELLUCCIA, C., & DIAZ, C.** The Leaking Battery: A Privacy Analysis of the HTML5 Battery Status API. Cryptology ePrint Archive: Report 2015/616 (2015).
10. **OLEJNIK, L., ENGLEHARDT, S., & NARAYANAN, A.** Battery Status Not Included: Assessing Privacy in Web Standards. International Workshop on Privacy Engineering (2017).
11. **PAPADOPOULOS, P., KOURTELLIS, N., & MARKATOS, E. P.** Cookie Synchronization: Everything You Always Wanted to Know But Were Afraid to Ask. In The Web Conference (2019).
12. **PAPADOPOULOS, P., SNYDER, P., ATHANASAKIS, D., & LIVSHITS, B.** Keeping Out the Masses: Understanding the Popularity and Implications of Internet Paywalls. In The Web Conference (2020).
13. **QUINLAN, R.** C4.5: Programs for Machine Learning. Morgan Kaufmann Publishers, San Mateo, CA, 1993.
14. **SANCHEZ-ROLA, I., SANTOS, I., & BALZAROTTI, D.** Clock Around the Clock: Time-Based Device Fingerprinting. In ACM Conference on Computer and Communications Security (CCS) (2018).
15. **SCHUH, J.** Building a More Private Web. Google Blog (2019). Retrieved from: https://www.blog.google/products/chrome/building-a-more-private-web
16. **SCHWARZ, M., LACKNER, F., & GRUSS, D.** JavaScript Template Attacks: Automatically Inferring Host Information for Targeted Exploits. In NDSS (2019).
17. **SCULLY, R.** Identity Resolution vs. Device Graphs: Clarifying the Differences. Amperity Blog. Retrieved from: https://amperity.com/blog/identity-resolution-vs-device-graphs-clarifying-differences/
18. **SIVAKORN, S., POLAKIS, J., & KEROMYTIS, A. D.** I'm Not a Human: Breaking the Google reCAPTCHA. In Black Hat Asia (2016).
19. **SKOLKA, P., STAICU, C.-A., & PRADEL, M.** Anything to Hide? Studying Minified and Obfuscated Code in the Web. World Wide Web (WWW) Conference (2019).
20. **SNYDER, P., ANSARI, L., TAYLOR, C., & KANICH, C.** Browser Feature Usage on the Modern Web. In Proceedings of the 2016 Internet Measurement Conference (2016), ACM, pp. 97–110.
21. **SNYDER, P., TAYLOR, C., & KANICH, C.** Most Websites Don’t Need to Vibrate: A Cost-Benefit Approach to Improving Browser Security. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security (2017), ACM, pp. 179–194.
22. **STAROV, O., & NIKIFORAKIS, N.** Xhound: Quantifying the Fingerprintability of Browser Extensions. In 2017 IEEE Symposium on Security and Privacy (SP) (2017), IEEE, pp. 941–956.
23. **VALENTINO RIZZO.** Machine Learning Approaches for Automatic Detection of Web Fingerprinting. Master’s thesis, Politecnico di Torino, Corso di laurea magistrale in Ingegneria Informatica (Computer Engineering), 2018.
24. **VASTEL, A., LAPERDRIX, P., RUDAMETKIN, W., & ROUVOY, R.** FP-Scanner: The Privacy Implications of Browser Fingerprint Inconsistencies. In USENIX Security (2018).
25. **VASTEL, A., LAPERDRIX, P., RUDAMETKIN, W., & ROUVOY, R.** FP-Stalker: Tracking Browser Fingerprint Evolutions. In 2018 IEEE Symposium on Security and Privacy (SP) (2018), IEEE, pp. 728–741.
26. **WILANDER, J.** Intelligent Tracking Prevention 2.3. WebKit Blog (2019). Retrieved from: https://webkit.org/blog/9521/intelligent-tracking-prevention-2-3/
27. **WOOD, M.** Today’s Firefox Blocks Third-Party Tracking Cookies and Cryptomining by Default. Mozilla Blog (2019). Retrieved from: https://blog.mozilla.org/blog/2019/09/03/todays-firefox-blocks-third-party-tracking-cookies-and-cryptomining-by-default/
28. **WU, Q., LIU, Q., ZHANG, Y., LIU, P., & WEN, G.** A Machine Learning Approach for Detecting Third-Party Trackers on the Web. In ESORICS (2016).

### Appendix

#### A. Extensions to OpenWPM JavaScript Instrumentation (WebGL)

OpenWPM's instrumentation does not cover several libraries and APIs used for fingerprinting, including WebGL and `performance.now`. These APIs have been found to be fingerprintable [64]. 

- **WebGL**: The standard use case of WebGL is to render 2D and 3D graphics in an HTML canvas element. However, it can be abused for browser fingerprinting. The WebGL renderer and vendor vary by the operating system, creating nearly distinct WebGL images with the same configurations on different machines. Current state-of-the-art browser fingerprinting scripts [16], [25] use WebGL properties and rendered images. We instrument the WebGL JavaScript API to capture this.
- **performance.now**: This JavaScript API method returns the time in floating-point milliseconds since the start of a page load. It has fingerprinting potential, particularly for timing-specific attacks such as typing cadence [18], [31]. We extend OpenWPM to capture the execution of `performance.now`.

To ensure completeness, we also instrument additional un-instrumented methods of already instrumented JavaScript APIs in OpenWPM. Specifically, we enhance our execution trace by instrumenting methods such as `drawImage` and `sendBeacon` for the canvas and navigation JavaScript APIs, respectively.

Since most fingerprinting scripts use JavaScript APIs that are also used by gaming and interactive websites (e.g., canvas), we instrument additional JavaScript APIs to capture script interactions with the DOM. Specifically, to capture DOM interaction-specific JavaScript APIs, we instrument `document`, `node`, and `animation` APIs. JavaScript is an event-driven language, and it has the capability to execute code when events trigger. To extend our execution trace, we instrument JavaScript events such as `onmousemove` and `touchstart` to capture user-specific interactions.

We notice that some scripts make multiple calls to JavaScript API methods such as `createElement` and `setAttribute` during their execution. We limit our recording to only the first 50 calls of each method per script, except for `CanvasRenderingContext2D.measureText` and `CanvasRenderingContext2D.font`, which are called multiple times for canvas font fingerprinting. The event-driven nature of JavaScript makes it challenging to capture the complete execution trace of scripts. To address this, we synthetically simulate user activity on a webpage. First, we scroll the webpage from top to bottom and perform random mouse movements to trigger events. Second, we record all events (e.g., `onscroll`) as they are registered on different elements on a webpage and execute them after 10 seconds of a page load. This synthetic simulation helps us capture JavaScript API methods that were waiting for those events to trigger.

#### B. Sample Features Extracted From ASTs & Execution Traces

Table VII shows a sample of the features extracted from the AST in Figure 2b, and Table VIII shows a sample of the dynamic features extracted from the execution trace of Script 3a.

| Static Features | Dynamic Features |
|-----------------|------------------|
| ArrayExpression: monospace | Document.createElement: True |
| MemberExpression: font | HTMLCanvasElement.width: True |
| ForStatement: var | HTMLCanvasElement.height: True |
| MemberExpression: measureText | HTMLCanvasElement.getContext: True |
| MemberExpression: width | CanvasRenderingContext2D.measureText: True |
| MemberExpression: length | Element Tag Name: Canvas |
| MemberExpression: getContext | HTMLCanvasElement.width: 100 |
| CallExpression: canvas | HTMLCanvasElement.height: 100 |
| | CanvasRenderingContext2D.measureText: 7 (no. of chars.) |
| | N (no. of calls) |

#### C. Fingerprinting Heuristics

Below are the slightly modified versions of heuristics proposed by Englehardt and Narayanan [54] to detect fingerprinting scripts. Since non-fingerprinting adoption of fingerprinting APIs has increased, we modify the heuristics to reduce false positives. These heuristics are used to build our initial ground truth of fingerprinting and non-fingerprinting scripts.

- **Canvas Fingerprinting**:
  1. The canvas element text is written with `fillText` or `strokeText`, and style is applied with `fillStyle` or `strokeStyle` methods of the rendering context.
  2. The script calls the `toDataURL` method to extract the canvas image.
  3. The script does not call `save`, `restore`, or `addEventListener` methods on the canvas element.

- **WebRTC Fingerprinting**:
  1. The script calls `createDataChannel` or `createOffer` methods of the WebRTC peer connection.
  2. The script calls `onicecandidate` or `localDescription` methods of the WebRTC peer connection.

- **Canvas Font Fingerprinting**:
  1. The script sets the `font` property on a canvas element to more than 20 different fonts.
  2. The script calls the `measureText` method of the rendering context more than 20 times.

- **AudioContext Fingerprinting**:
  1. The script calls any of the `createOscillator`, `createDynamicsCompressor`, `destination`, `startRendering`, or `oncomplete` methods of the audio context.

#### D. Examples of Dormant and Deviating Scripts

- **Script 3** (Dormant Script):
  ```javascript
  (function(g) {
      n.prototype = {
          getCanvasPrint: function() {
              var b = document.createElement("canvas"), d;
              try {
                  d = b.getContext("2d");
              } catch (e) {
                  return "";
              }
              d.textBaseline = "top";
              d.font = "14px 'Arial'";
              ...
              d.fillText("http://valve.github.io", 4, 17);
              return b.toDataURL();
          }
      };
      if ("object" === typeof module && "undefined" !== typeof exports) {
          module.exports = n;
      }
      g.ClientJS = n;
  })(window);
  ```

- **Script 4** (Deviating Script):
  ```javascript
  canvas: function(t) {
      var e = document.createElement("canvas");
      if ("undefined" == typeof e.getContext) {
          t.push("UNSUPPORTED_CANVAS");
      } else {
          e.width = 780, e.height = 150;
          var n = "UNICODE STRING",
              i = e.getContext("2d");
          i.save(), i.rect(0, 0, 10, 10), i.rect(2, 2, 6, 6),
          t.push(!1 === i.isPointInPath(5, 5, "evenodd") ? "yes" : "no"), i.restore(), i.save();
          var r = i.createLinearGradient(0, 0, 200, 0);
          ...
          i.shadowColor = "rgb(85, 85, 85)", i.shadowBlur = 3,
          i.arc(500, 15, 10, 0, 2 * Math.PI, !0), i.stroke(),
          i.closePath(), i.restore(), t.push(e.toDataURL());
      }
      return t;
  }
  ```

#### E. Why Machine Learning?

To conduct fingerprinting, websites often embed off-the-shelf third-party fingerprinting libraries. One possible approach to detect fingerprinting scripts is to compute the textual similarity between known fingerprinting libraries and the scripts embedded on a website. Scripts with higher similarity to known fingerprinting libraries are more likely to be fingerprinting scripts. To test this hypothesis, we compare the similarity of fingerprinting and non-fingerprinting scripts detected by FP-INSPECTOR against `fingerprintjs2`, a popular open-source fingerprinting library. Specifically, we tokenize scripts into keywords by first beautifying them and then splitting them on white spaces. We then compute the Jaccard similarity, pairwise, with all versions of `fingerprintjs2`. The highest similarity score among all versions is attributed to a script.

Our test set consists of the fingerprinting scripts detected by FP-INSPECTOR and an equal number of randomly sampled non-fingerprinting scripts.