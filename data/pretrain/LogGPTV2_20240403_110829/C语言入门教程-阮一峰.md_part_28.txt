erf()：计算⼀个值的误差函数。
erfc()：计算⼀个值的互补误差函数。
tgamma()：计算 Gamma 函数。
lgamma()：计算 Gamma 函数绝对值的⾃然对数。
下⾯是⼀些例⼦。
pow(3, 4)
sqrt(3.0)
cbrt(1729.03)
fabs(-3490.0)
hypot(3, 4)
fmax(3.0, 10.0)
fmin(10.0, 3.0)
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
语⾔教程 ⽹道
signal.h - C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
简介 #
提供了信号（即异常情况）的处理⼯具。所谓 “信号”（signal），可以理解成系统与程序之间的
signal.h
短消息，主要⽤来表示运⾏时错误，或者发⽣了异常事件。
头⽂件 定义了⼀系列宏，表示不同的信号。
signal.h
SIGABRT：异常中⽌（可能由于调⽤了 abort() ⽅法）。
SIGFPE：算术运算发⽣了错误（可能是除以 0 或者溢出）。
SIGILL：⽆效指令。
SIGINT：中断。
SIGSEGV：⽆效内存访问。
SIGTERM：终⽌请求。
上⾯每个宏的值都是⼀个正整数常量。
signal() #
头⽂件 还定义了⼀个 函数，⽤来指定某种信号的处理函数。
signal.h signal()
signal(SIGINT, handler);
接受两个参数，第⼀个参数是某种信号的宏，第⼆个参数是处理这个信号的函数指针 。
signal() handler
信号处理函数 接受⼀个 int 类型的参数，表示信号类型。它的原型如下。
handler
void (*func)(int);
函数体内部可以根据这个整数，判断到底接受到了哪种信号，因为多个信号可以共⽤同⼀个处理
handler
函数。⼀旦处理函数执⾏完成，程序会从信号发⽣点恢复执⾏。但是，如果遇到 SIGABRT 信号，处理函数
执⾏完成，系统会让程序中⽌。
当系统向程序发送信号时，程序可以忽略信号，即不指定处理函数。
的返回值是前⼀个处理函数的指针，常常把它保存在变量之中，当新的处理函数执⾏完，再恢复
signal()
以前的处理函数。
void (*orig_handler)(int);
orig_handler = signal(SIGINT, handler);
signal(SIGINT, orig_handler);
上⾯示例中， 为信号 指定了新的处理函数 ，把原来的处理函数保存在变量
signal() SIGINT handler
⾥⾯。等到 这个函数⽤过之后，再恢复原来的处理函数。
orig_handler handler
信号相关的宏 #
还提供了信号相关的宏。
signal.h
（1）SIG_DFL
SIG_DFL 表示默认的处理函数。
signal(SIGINT, SIG_IGN);
上⾯示例中，SIGINT 的处理函数是默认处理函数，由当前实现决定。
（2）SIG_IGN
SIG_IGN 表示忽略该信号。
signal(SIGINT, SIG_IGN);
上⾯示例表示不对 SIGINT 信号进⾏处理。由于程序运⾏时按下 Ctrl + c 是发出 SIGINT 信号，所以使⽤该
语句后，程序⽆法⽤ Ctrl + c 终⽌。
（3）SIG_ERR
SIG_ERR 是信号处理函数发⽣错误时， 的返回值。
signal()
if (signal(SIGINT, handler) == SIG_ERR) {
perror("signal(SIGINT, handler) failed");
}
上⾯示例可以判断 处理 SIGINT 时，是否发⽣错误。
handler
raise() #
函数⽤来在程序中发出信号。
raise()
int raise(int sig);
它接受⼀个信号值作为参数，表示发出该信号。它的返回值是⼀个整数，可以⽤来判断信号发出是否成
功，0 表示成功，⾮ 0 表示失败。
void handler(int sig) {
printf("Handler called for signal %d\n", sig);
}
signal(SIGINT, handler);
raise(SIGINT);
上⾯示例中， 触发 SIGINT 信号，导致 handler 函数执⾏。
raise()
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
语⾔教程 ⽹道
stdint.h - C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
固定宽度的整数类型 #
stdint.h 定义了⼀些固定宽度的整数类型别名，主要有下⾯三类。
宽度完全确定的整数 ，⽐如 。
intN_t int32_t
宽度不⼩少于某个⼤⼩的整数 ，⽐如 。
int_leastN_t int_least8_t
宽度不⼩于某个⼤⼩、并且处理速度尽可能快的整数 ，⽐如 。
int_fastN_t int_fast64_t
上⾯所有类型都是有符号的，类型名前⾯可以加⼀个前缀 ，表示⽆符号类型，⽐如 。
u uint16_t
C 语⾔标准要求⾄少定义以下类型。
int8_t uint8_t
int16_t uint16_t
int32_t uint32_t
int64_t uint64_t
int_least8_t uint_least8_t
int_least16_t uint_least16_t
int_least32_t uint_least32_t
int_least64_t uint_least64_t
int_fast8_t uint_fast8_t
int_fast16_t uint_fast16_t
int_fast32_t uint_fast32_t
int_fast64_t uint_fast64_t
最⼤宽度的整数类型 #
以下两个类型表示当前系统可⽤的最⼤宽度整数。
intmax_t
uintmax_t
如果想要尽可能⼤的整数时，可以使⽤上⾯类型。
固定宽度的整数常量 #
以下⼀些带参数的宏，可以⽣成固定宽度的整数常量。
INT8_C(x) UINT8_C(x)
INT16_C(x) UINT16_C(x)
INT32_C(x) UINT32_C(x)
INT64_C(x) UINT64_C(x)
INTMAX_C(x) UINTMAX_C(x)
下⾯是⽤法示例。
uint16_t x = UINT16_C(12);
intmax_t y = INTMAX_C(3490);
固定宽度的整数极限值 #
下⾯⼀些宏代表了固定宽度的整数最⼤值和最⼩值。
INT8_MAX INT8_MIN UINT8_MAX
INT16_MAX INT16_MIN UINT16_MAX
INT32_MAX INT32_MIN UINT32_MAX
INT64_MAX INT64_MIN UINT64_MAX
INT_LEAST8_MAX INT_LEAST8_MIN UINT_LEAST8_MAX
INT_LEAST16_MAX INT_LEAST16_MIN UINT_LEAST16_MAX
INT_LEAST32_MAX INT_LEAST32_MIN UINT_LEAST32_MAX
INT_LEAST64_MAX INT_LEAST64_MIN UINT_LEAST64_MAX
INT_FAST8_MAX INT_FAST8_MIN UINT_FAST8_MAX
INT_FAST16_MAX INT_FAST16_MIN UINT_FAST16_MAX
INT_FAST32_MAX INT_FAST32_MIN UINT_FAST32_MAX
INT_FAST64_MAX INT_FAST64_MIN UINT_FAST64_MAX
INTMAX_MAX INTMAX_MIN UINTMAX_MAX
注意，所有⽆符号整数类型的最⼩值都为 0，所以没有对应的宏。
占位符 #
C 语⾔还在头⽂件 inttypes.h ⾥⾯，为上⾯类型定义了 和 的占位符，参⻅
printf() scanf()
《inttypes.h》⼀章。
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
语⾔教程 ⽹道
stdlib.h - C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
类型别名和宏 #
stdlib.h 定义了下⾯的类型别名。
size_t：sizeof 的返回类型。
wchar_t：宽字符类型。
stdlib.h 定义了下⾯的宏。
NULL：空指针。
EXIT_SUCCESS：函数运⾏成功时的退出状态。
EXIT_FAILURE：函数运⾏错误时的退出状态。
RAND_MAX：rand() 函数可以返回的最⼤值。
MB_CUR_MAX：当前语⾔环境中，多字节字符占⽤的最⼤字节数。
abs()，labs()，llabs() #
这三个函数⽤于计算整数的绝对值。 ⽤于 int 类型， ⽤于 long int 类型， ⽤于
abs() labs() llabs()
long long int 类型。
int abs(int j);
long int labs(long int j);
long long int llabs(long long int j);
下⾯是⽤法示例。
printf("|-2| = %d\n", abs(-2));
printf("|4| = %d\n", abs(4));
div()，ldiv()，lldiv() #
这三个函数⽤来计算两个参数的商和余数。 ⽤于 int 类型的相除， ⽤于 long int 类型的相
div() ldiv()
除， ⽤于 long long int 类型的相除。
lldiv()
div_t div(int numer, int denom);
ldiv_t ldiv(long int numer, long int denom);
lldiv_t lldiv(long long int numer, long long int denom);
这些函数把第 2 个参数（分⺟）除以第 1 个参数（分⼦），产⽣商和余数。这两个值通过⼀个数据结构返
回， 返回 div_t 结构， 返回 ldiv_t 结构， 返回 lldiv_t 结构。
div() ldiv() lldiv()
这些结构都包含下⾯两个字段，
int quot;
int rem;
它们完整的定义如下。
typedef struct {
int quot, rem;
} div_t;
typedef struct {
long int quot, rem;
} ldiv_t;
typedef struct {
long long int quot, rem;
} lldiv_t;
下⾯是⼀个例⼦。
div_t d = div(64, -7);
printf("64 / -7 = %d\n", d.quot);
printf("64 %% -7 = %d\n", d.rem);
字符串转成数值 #
a 系列函数 #
定义了⼀系列函数，可以将字符串转为数组。
stdlib.h
atoi()：字符串转成 int 类型。
atof()：字符串转成 double 类型。
atol()：字符串转成 long int 类型。
atoll()：字符串转成 long long int 类型。
它们的原型如下。
int atoi(const char* nptr);
double atof(const char* nptr);
long int atol(const char* nptr);
long long int atoll(const char* nptr);
上⾯函数的参数都是⼀个字符串指针，字符串开头的空格会被忽略，转换到第⼀个⽆效字符处停⽌。函数
名称⾥⾯的 代表 ASCII，所以 的意思是 “ASCII to int”。
a atoi()
它们返回转换后的数值，如果字符串⽆法转换，则返回 。
0
下⾯是⽤法示例。
atoi("3490")
atof("3.141593")
如果参数是数字开头的字符串， 会只转换数字部分，⽐如 会返回整数 。如
atoi() atoi("42regular") 42
果⾸字符不是数字，⽐如 “hello world”，则会返回 。
0
str 系列函数（浮点数转换） #
还定义了⼀些更强功能的浮点数转换函数。
stdlib.h
strtof()：字符串转成 float 类型。
strtod()：字符串转成 double 类型。
strtold()：字符串转成 long double 类型。
它们的原型如下。
float strtof(
const char* restrict nptr,
char** restrict endptr
);
double strtod(
const char* restrict nptr,
char** restrict endptr
);
long double strtold(
const char* restrict nptr,
char** restrict endptr
);