图16. APK报告摘抄
快速检查后，我们发现`nini.dll`其实是经过加密处理的一个文件，这引起了我们的好奇心，决定开始分析apk文件。
首先我们分析了`AndroidManifest.xml`文件，其中包含应用的大部分信息，比如权限信息、Activity和服务信息等。我们首先注意到应用会请求大量可疑权限：
图17. APK过滤器
图18. APK权限
然而还有另一处重要细节，`classes.dex`文件中并不包含`AndroidManifest`中的类和函数。应用使用的所有Activity以及服务都需要提前在`Manifest`中提前声明，声明不存在的类并没有意义。这里可以推测出来，应用在执行期间会动态加载其他一些代码。
应用在执行时会启动一个`webview`，显示攻击者正在伪造的快递服务主页。应用会请求注册为处理SMS的默认应用并在后台运行，无视电池优化策略。与此同时，应用图标会从界面中消失，并在后台保持运行。
由于应用与用户的交互较少，因此我们来看一下应用代码。
应用的执行流程非常简单：应用首先加载`libxxn.so`，然后执行`run()`函数（位于`Java_taii_YANGG_run`共享对象中）。该函数会解密`nini.dll`文件，加载解密后的文件（在我的测试设备上该文件位于`/data/user/0/fang.tang.sha/app_cache`目录中）。应用会动态加载该文件，我们可以在`adb
logcat`命令的输出中验证这一点：
图19. adb logcat输出
该文件在加载后就会被立即删除，加大取证难度。幸运的是，我们可以使用FRIDA（非常方便灵活的一个开源套件）来停止执行流程，在文件被删除前保存该文件。
[FRIDA](https://www.frida.re/)是逆向Android应用的一款工具（并且功能不局限于此），也能适用于多个架构，可以在root和非root设备上使用（非root设备上需要进一步配置）。大家可以访问[Github页面](https://github.com/ddurando/frida-scripts)下载我所使用的脚本。
###  攻击载荷
释放出来的`mycode.jar`文件中包含一个`classes.dex`文件，恶意软件使用`libxxn.so`库中的`DexClassLoader`函数来加载该文件。
载荷看起来像是FakeSpy（2018年6月份发现的一款恶意软件）的变种，包含前一代版本所具备的大部分功能，但同样包含一些新功能。
###  功能分析
图20. SMS信息收集
恶意软件会请求成为默认的SMS应用，因此该应用具备拦截SMS消息的能力并不奇怪。当设备接收到消息时，应用会记录消息中的所有信息，并将其发送给C2服务器。
图21. C2通信数据中包含目标号码
此外，这款恶意软件还可以创建SMS并发送至其他设备。实际上这也是恶意软件的传播方式。移动设备一旦被感染，就会开始与C2服务器通信，在SMS中嵌入指向攻击者控制域名的链接，尝试通过SMS感染其他手机号对应的设备。
在图22中，我们使用FRIDA控制`SMSmanager`这个Android类，然后修改其中的`sendTextMessage()`函数，只记录下恶意消息内容，并没有实际发送恶意消息。
图22. 发送给目标的SMS
恶意软件还可以获取当前设备上已安装的所有应用列表以及其他信息（如IMEI以及手机号），将这些信息以JSON文件形式发送给C2服务器。利用这种方法，攻击者可以获取该设备的所有状态信息。
图23. 发送至C2服务器的应用信息
最后，恶意软件还可以向服务器发送完整的崩溃报告。
###  异常特征
该样本中包含一些奇怪的特征，因此我们认为恶意软件仍处于开发状态。
C2服务器地址以`URL`名称保存在`sharedPreferences`中，这个值最开始设置为`125.227.0.22`，但可以在应用执行过程中通过`ChangeIP()`函数动态修改，该函数会检查执行时间是否已超过1分钟，如果满足该条件，则从加密的字符串中解出新的C2服务器IP地址。该字符串指向一个推特账户，其用户名包含新的IP地址，可以使用简单的字符串操作进行解码。
图24. 用于获取新C2地址的推特账户
然而，即便dex文件中存在解密代码，根据我们的分析，恶意软件似乎从来不会使用这段代码。相反，应用会在活动期间始终与第一个C2地址通信。我们尝试将HTTP流量重定向修改后的C2地址，但并没有收到任何响应。
恶意软件同样包含指向`/sdcard/new.apk`文件的多处引用，可以利用给定的URL下载文件，然后检查设备是否包含名为`ni.vb.bi`的一个应用，如果包含该应用，则不会安装下载的文件。然而，在执行期间恶意软件永远不会调用下载文件的函数。
图25. 安装`new.apk`的函数
恶意软件的一个类中包含`main()`和`System.out.println()`函数，Android
APK中并不需要这些函数，但在Java文件中很常见，这表明开发者可能想测试某些功能，或者只是从其他源中复制粘贴代码。
图26. 测试main()函数
恶意软件还会请求Device
Admin权限，并且包含一个`DeviceAdminReceiver`类，但从来没有请求权限来使用这个类，因此这个类永远无法发挥作用。
图27. Device Admin函数
在分析过程中，我们发现恶意样本几乎每天都会更新证书，表明另一端至少有某些人在维护整个基础设施。
## 四、总结
总而言之，参与此次攻击活动的幕后黑手拥有大量域名，这些域名伪造的是日本快递服务商的真实域名，这意味着他们正在为攻击活动投入大量时间及域名，但可能仍在考虑从这些资源中获取丰厚利润的方法。利用攻击者邮箱注册的域名大多数处于非活跃状态，但这并不意味着这些域名永远不会被使用。网站上存在的脚本、注释以及无用的代码行可能表明攻击者仍在改进攻击方式，尝试使用不同的方法来实现他们的既定目标。
不幸的是，我们无法确定攻击者为什么要收集手机号，但可以猜测攻击者会利用这些信息来发起其他恶意攻击，或者将这些信息售卖给其他攻击者。
这款恶意软件以及此次攻击活动似乎仍处于早期研发阶段。恶意软件基于已有代码库开发而来，但攻击者尝试改进代码，添加其他功能，有些功能目前仍没有发挥作用，但可能在将来会有所变化。
## 五、解决方案
Fortinet产品可以防御此类攻击，已将释放器标识为`Android/Agent.CIJ!tr`，将攻击载荷标识为`Android/Fakespy.Z!tr`。
## 六、IOC
释放器哈希值：
    24072be590bec0e1002aa8d6ef7270a3114e8fe89996837a8bc8f6a185d9690e 92cd2e43bf85703f92a493668be3d777c3d3cfab3f674b62bd334ddc082ac50d 01caceb86d3e2a383eeab4af98c55a2ec7b82ae0972594866b13fc0c62c93d74
攻击载荷哈希值：
    b7f4850b243649cdba97fd3bb309aa76fe170af80fa9c6ee5edd623dac2ce4e2 00ce9ffe9cca59df86125747c3a2e548245bf1b0607bc8f080fd3c501d9fc3f0
C2服务器地址：
    sagawa-ba[.]com
    sagawa-wow[.]com
    sagawa-iso[.]com
我们的Web Filter服务同样会过滤出其他344个域名。