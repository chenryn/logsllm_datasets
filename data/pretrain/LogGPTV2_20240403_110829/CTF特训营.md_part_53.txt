2
7
H
23
X
39
n
55
3
8
I
24
Y
40
0
56
4
9
J
25
Z
41
P
57
5
10
K
26
a
42
b
58
6
11
L
27
b
43
59
7
12
M
28
c
44
S
60
8
13
N
29
d
45
t
I9
9
14
0
30
e
46
u
62
+
15
P
31
f
47
V
63
/
图19-4比
base64原始表
通过查表，可以将4个数字转为成4个字母，base64至此转换完
毕。
在很多CTF题目中，出题人会让选手分析一段算法，如果C代码
---
## Page 647
CTF特训营：技术详解、解题方法与
19.6base家族
647/1144
或者Python代码实现了上述过程，那么是base64无疑。通常，题目
不会简单地使用原始的base64，在最后一步查表的过程中，很可能
改变那个表中字符的顺序，也就是私有表，此时我们称这个base64
为私有base64。其解码方法也是将表替换为私有表，然后decode即
可，也可以直接正常解码（base64）后当作替代密码解密。
---
## Page 648
CTF特训营：技术详解、解题方法与
第20章古典密码
648/1144
第20章古典密码
古典密码作为最简单的密码加密类别，也是CTF竞赛中的常客，
其对于数论的要求不是很高，很容易入门。古典密码如今已不再单独
作为加密算法使用，但是它们是许多现代密码算法的基石。
古典密码在形式上可分成移位密码和替代密码两类，其中替代密
码又可分为单表替代和多表替代。
---
## Page 649
CTF特训营：技术详解、解题方法与
20.1.1简单移位密码
649/1144
20.1移位密码
20.1.1简单移位密码
密码和编码最大的区别就是密码多了一个很关键的信息：密钥
k。在讲解密码学的过程中，我们一般使用m代表明文，c代表密文。
移位密码在所有密码学中是最基础、最简单的一种密码形式。可
以简单地将这种密码理解为明文根据密钥进行了位置的变换而得到的
密文。
举个例子，样例数据如下：
m="flag(easy_easy_crypto)"
k="3124"
当明文为m，密钥为k时，移位密码首先以k的长度（也就是
len（k）=4）切分m，具体如下：
flag
{eas
y_ea
sy_c
rypt
{o
可以看到，总共分成了6部分，然后按照密钥3124的顺序对每一
---
## Page 650
CTF特训营：技术详解、解题方法与
20.1.1简单移位密码
650/1144
部分都进行密钥变化，变化规则如表20-1所示。
表20-1
密钥变化规则表
明文字符位置
1
2
3
4
密文字符位置
3
1
2
4
上述6部分经过变化后变为如下形式：
flag
{eas
y_ea
sy_c
rypt
{o
lafg
eafs
_eya
y_sc
yprt
所以密文为：
lafgea{s_eyay_scyprt}o
移位密码加密完毕，可以使用Python完成此过程：
def shift _encrypt(m,k):
|=len(k)
C=
for i in range(0,len(m),1):
=odu
ifi+l>len(m):
[:u=udu
else:
[+]=u²dun
for kindex in range(len(tmp_m):
---
## Page 651
CTF特训营：技术详解、解题方法与
20.1.1简单移位密码
651/1144
tmp_c[int（k[kindex])-1]=tmp_m[kindex]
c+=""join（tmp_c)
returnc
m="flag{easy_easy_crypto)"
k="3124"
print shift_encrypt(m,k)
针对移位密码的解密也非常简单，分组之后按照密钥恢复每组的
明文顺序即可，代码如下：
def shift_decrypt(c,k):
|=len(k)
m=*
for i in range(O,len(c),l):
=du
if i+>=len(c):
tmp_c=c[i:]
use=
for kindex in range(len(tmp_c)):
use.append(int(k[kindex])-1)
use.sort()
for kindex in range(len(tmp_c)):
tmp_m[kindex]= tmp_c[use.index(int(k[kindex])-1)]
else:
tmp_c=c[i:i+l]
for kindex in range(len（tmp_c)):
tmp_m[kindex] = tmp_c[int（k[kindex])-1]
（du)o+
returnm
c="lafgea(s_eyay_scyprt)o"
k="3124"
print shift_decrypt（c,k)
上面仅仅只是正常加解密，下面来介绍一下移位密码的攻击策
略。所谓攻击，即在不知道密钥的情况下，由密文恢复出明文。移位
---
## Page 652
CTF特训营：技术详解、解题方法与
20.1.1简单移位密码
652/1144
密码的密钥仅仅是字符变换的顺序，所以常用的攻击方式有两种：爆
破和语义分析。
如果使用爆破方式，则首先爆破字段长度，然后爆破顺序。其实
根本不用那么麻烦，比如下面这段密文：
lafgeafs_eyay_scyprtlo
在做题的时候，我们很清楚flag的格式是flag{xxxx}，观察上面这
个密文，前4个字符flag都有，而且位置对应关系就是3124，可以直
接用肉眼观测出密钥。
---
## Page 653
CTF特训营：技术详解、解题方法与
20.1.2曲路密码
653/1144
20.1.2
曲路密码
将明文填入一个表中，并按照一定的曲路遍历，是移位密码的一
种。例如，明文为abcdefghijklmnopqrstuvwxy，曲路如图20-1所示。
a
C
e
→
9
h
k
m
n
O
P
b
S
u
V
X
图20-1曲路密码示意图
那么密文就是ejotyxcnidchmrwwqlgbafkpu。解密过程反过来遍历
曲路即可。
---
## Page 654
CTF特训营：技术详解、解题方法与
20.1.3云影密码
654/1144
20.1.3云影密码
云影密码仅包含01248五个数字，其中0用于分割，其余数字用
于做加和操作之后转换为明文，因此解码方式如下：
defc01248_decode(c):
I=c.split("0°)
origin="abcdefghijklmnopqrstuvwxyz
for i in l:
tmp=0
for num in i:
(wnu)jul=+dun
r+=origin[tmp-1]
returnr
print c01248_decode(8842101220480224404014224202480122")
输出结果如下：
welldone
---
## Page 655
CTF特训营：技术详解、解题方法与
20.1.4棚栏密码
655/1144
20.1.4栅栏密码
栅栏密码是一种规则比较特殊的移位密码，其密钥只有一个数字
k，表示栅栏的长度。所谓栅栏密码，就是将要加密的明文分成k个一
组，然后取每组的第一个字符依次连接，拼接而成的字符串就是密文
样例数据如下：
m="flag{zhalan_mima_hahaha}
k=4
如上，
在这种情况下，首先将明文m按照长度每4个分为一组：
flag
{zha
lan_
mima
_hah
aha}
总共分成了6组，然后依次取出每组的第1个字符，如下：
flm_a
依次取出第2个、第3个、第4个，放置在后面，如下：
f(lm_alzaihhahnmaaga_ah)
---
## Page 656
CTF特训营：技术详解、解题方法与
20.1.4棚栏密码
656/1144
这就是栅栏密码的加密方法，Python实现代码如下：
def zhalan_encrypt(m,k):
chip=
fori in range(0,len(m),k):
if i+k>=len(m):
[]u=u dun
else:
[+ud
chip.append(tmp_m)
C=
for i in range(k):
for tmp_m in chip:
ifi=len(c):
[=odu
else:
tmp_c=c[i:i+partnum]
forj in range(len（tmp_c)):
m[ji*k+i/partnum]=tmp_c[i]
return ".join(m)
c="f{Im_alzaihhahnmaaga_ah)"
k=4
---
## Page 657
CTF特训营：技术详解、解题方法与
20.1.4棚栏密码
657/1144
print zhalan_decrypt(c,k)
---
## Page 658
CTF特训营：技术详解、解题方法与
20.2营代密码
658/1144
20.2替代密码
替代密码如名学所示，首先建立一个替换表，加密时将需要加密
的明文依次通过查表替换为相应的字符，明文字符被逐个替换后，会
生成无任何意义的字符串，即密文，替代密码的密钥就是其替换表。
如果替换表只有一个，则称之为单表替代密码。如果替换表有多
个，依次使用，则称之为多表替代密码。
针对替代密码最有效的攻击方式是词频分析。
---
## Page 659
CTF特训营：技术详解、解题方法与
20.2.1单表蓄代密码
659/1144