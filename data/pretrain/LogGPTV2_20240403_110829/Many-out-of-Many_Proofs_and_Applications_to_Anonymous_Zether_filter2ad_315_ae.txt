### Anonymous Zether: Overview and Security

#### 2) Anonymous Zether
In Anonymous Zether [6, §D], a sender can hide herself and the recipient within a larger ring \((y_i)_{i=0}^{N-1}\). To an observer, it should be impossible to determine which members of the ring sent or received funds. Specifically, the sender should select a list \((y_i)_{i=0}^{N-1}\), along with indices \(l_0\) and \(l_1\) corresponding to the sender and recipient, respectively. The sender then publishes this list and a list of ciphertexts \((C_i, D)_{i=0}^{N-1}\), where \((C_{l_0}, D)\) encrypts \(g^{-b^*}\) under \(y_{l_1}\) and \((C_{l_1}, D)\) encrypts \(g^{b^*}\) under \(y_{l_0}\). For each \(i \notin \{l_0, l_1\}\), \((C_i, D)\) encrypts \(g^0\) under \(y_i\).

To execute the transfer, the contract should homomorphically add \((C_i, D)\) to \(y_i\)'s balance for each \(i\). We denote the list of new balances by \((CL_{n,i}, CR_{n,i})_{i=0}^{N-1}\).

Finally, the prover must demonstrate knowledge of:
- \(l_0, l_1 \in \{0, \ldots, N-1\}\) (the secret indices of the sender and recipient),
- \(sk\) such that \(g^{sk} = y_{l_0}\) (knowledge of the secret key),
- \(r\) such that:
  - \(g^r = D\) (knowledge of randomness),
  - \((y_{l_0} \cdot y_{l_1})^r = C_{l_0} \cdot C_{l_1}\) (sender's and receiver's ciphertexts),
  - for each \(i \notin \{l_0, l_1\}\), \(y_i^r = C_i\) (all other ciphertexts encrypt 0),
- \(b^*\) and \(b'\) in \(\{0, \ldots, MAX\}\) such that \(C_{l_0} = g^{-b^*} \cdot D\) and \(CL_{n,l_0} = g^{b'} \cdot CR_{n,l_0}\) (overflow and overdraft protection).

These conditions are grouped into a relation, adapting [6, (8)].

Formally:
\[
\begin{aligned}
&g^{sk} = y_{l_0} \land C_{l_0} = g^{-b^*} \cdot D \land D = g^r \land (y_{l_0} \cdot y_{l_1})^r = C_{l_0} \cdot C_{l_1} \\
&\land \bigwedge_{i \notin \{l_0, l_1\}} y_i^r = C_i \land g^{sk} = D^{sk} \land CL_{n,l_0} = g^{b'} \cdot CR_{n,l_0} \\
&\land g^{epoch} = u \land b^* \in \{0, \ldots, MAX\} \land b' \in \{0, \ldots, MAX\} \\
&\land N \equiv 0 \mod 2 \land l_0 \not\equiv l_1 \mod 2
\end{aligned}
\]

For technical reasons (discussed in Subsection V-C below), we use a variant of [6, (8)], where \(N\) is even and \(l_0\) and \(l_1\) have opposite parities.

#### B. Insider and "Rogue-Key" Attacks
We now address anonymous payment, starting with a comment on the Anonymous Zether statement, which applies equally to this work and [6, §D].

An important aspect of the statement (1) is the use of the same randomness \(D\) in each El Gamal ciphertext \((C_i, D)\). However, the appeal to Kurosawa [20] in [6] appears to misunderstand the latter work. As Bellare, Boldyreva, and Staddon [21, §1.2] observe, Kurosawa's security definitions are weak and assume adversaries are "outsiders."

In contrast, we outline a plausible insider attack on privacy, analogous to that in [21, §4], on any protocol following [6, §D]. The attacker, targeting an honest user \(y\), generates a rogue public key \(y^* := y^{sk^*}\) (for some secret \(sk^*\)). The attacker then induces an honest user (possibly, but not necessarily, \(y\)) to include both the attacker and \(y\) in the anonymity set. The attacker finally determines the change in \(y\)'s balance \(b\) using the following procedure. If \(y\) and \(y^*\) are at indices \(l\) and \(l^*\) in the anonymity set, the attacker determines \(b\) using \(g^b = C_l \cdot (C_{l^*})^{-sk^*}\).

The attacker's actions are undetectable to \(y\), and \(y\) is at risk even during transactions she does not initiate. We adopt the remedy suggested by [21, §1.2], requiring each participant to prove knowledge of their public key before participating in the contract. We implement a "registration" procedure, where each public key must sign a specified, fixed message before participating. This requirement is minimally cumbersome, especially given the superfluity of multiple-account use in Anonymous Zether.

This issue affects basic Zether, but vacuously so, as the transaction's insiders (sender and recipient) already know each other's roles and the amount of funds sent.

#### C. Cryptographic Approach to Anonymity
We summarize our proof protocol for Anonymous Zether, which uses many-out-of-many proofs. The main challenge in the Anonymous Zether relation (1) is that all \(N\) ciphertexts \((C_i, D)_{i=0}^{N-1}\) appear, requiring \((y_{l_0} \cdot y_{l_1})^r = C_{l_0} \cdot C_{l_1}\) and \(y_i^r = C_i\) for \(i \notin \{l_0, l_1\}\).

Informally, using standard one-out-of-many proofs, the prover conveys to the verifier two vectors of field elements \((p_{0,i})_{i=0}^{N-1}\) and \((p_{1,i})_{i=0}^{N-1}\), each consisting of evaluations of polynomials, exactly one of which is degree-m and monic. Using these vectors, the verifier obtains re-encryptions of the sender's and receiver's ciphertexts without learning their original indices. The prover and verifier then run a variant of basic Zether on these re-encrypted ciphertexts to certify spend authority, overdraft protection, and conservation of value.

To ensure the remaining ciphertexts are encryptions of 0, the verifier iteratively rotates the vectors \((p_{0,i})_{i=0}^{N-1}\) and \((p_{1,i})_{i=0}^{N-1}\) and conducts simple "proof-of-0" Σ-protocols on each further ciphertext. The secret indices represented by these rotations relate predictably to the original indices. The verifiers use two-step rotations and ensure the original secret indices feature opposite parities.

Put differently, the prover implicitly sends two rows of a matrix, each containing exactly one 1. By performing two-step rotations, the verifier constructs the \(N-2\) remaining rows, forming a permutation matrix if the top two rows have 1s at indices of opposite parity.

The parities of \(l_0\) and \(l_1\) can be checked using ideas from [9] and [10]. We express this procedure as a direct application of many-out-of-many proofs, using the free permutation \(\kappa = (0, 2, \ldots, N-2)(1, 3, \ldots, N-1)\). The verifier iterates over the ordered orbits of \(l_0\) and \(l_1\) under \(\kappa\). If \(l_0\) and \(l_1\) have opposite parities, these orbits are disjoint and exhaust \(\{0, \ldots, N-1\}\). The verifier interleaves the respective rows yielded by these executions and sets \(\Xi\) as the \((N-1) \times N\) matrix:

\[
\Xi = \begin{pmatrix}
1 & 0 & 0 & \cdots & 0 \\
0 & 1 & 0 & \cdots & 0 \\
0 & 0 & 1 & \cdots & 0 \\
\vdots & \vdots & \vdots & \ddots & \vdots \\
0 & 0 & 0 & \cdots & 1 \\
\end{pmatrix}
\]

This matrix controls the messages of the permuted ciphertexts \((C_{K(0)}, D), (C_{K(1)}, D), \ldots, (C_{K(N-1)}, D)\), where \(K(i) = (l_0 + 2 \cdot k) \mod N\) if \(i = 2 \cdot k\) and \(K(i) = (l_1 + 2 \cdot k) \mod N\) if \(i = 2 \cdot k + 1\). It encodes that the sum \((C_{l_0}, D) \cdot (C_{l_1}, D)\) is an encryption of 0, while the ciphertexts \((C_i, D)\) for \(i \notin \{l_0, l_1\}\) individually encrypt 0.

A variant supporting transaction fees adds an affine part to \(\Xi\). For a fixed transaction fee \(f\), set:

\[
\Xi : (m_0, m_1, \ldots, m_{N-1}) \mapsto (m_0 + m_1 + f, m_2, \ldots, m_{N-1})
\]

and deliver a fee of \(f\) into a designated account upon each transaction. This transformation encodes that \((C_{l_0}, D)\) and \((C_{l_1}, D)\) encrypt messages \(m_0\) and \(m_1\) such that \(-m_0 = m_1 + f\), while all other ciphertexts encrypt 0.

#### D. Reducing Prover Runtime to \(O(N \log N)\)
We reduce the prover's runtime complexity from \(O(N \log^2 N)\) to \(O(N \log N)\) using a trick. We exploit the special structure of the Anonymous Zether ciphertexts \((C_i, D)_{i=0}^{N-1}\), where only \(O(1)\) (i.e., 2) of the messages are nonzero. A direct application of Section III would prescribe the prover to construct—and the verifier to eliminate—the entire \(k\)-th order part of the uncorrected many-out-of-many proofs.