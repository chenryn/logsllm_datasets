### `pktmon filter add`

**Applies to:** Windows Server 2022, Windows Server 2019, Windows 10, Azure Stack HCI, Azure Stack Hub, Azure

The `pktmon filter add` command allows you to add a filter to control which network packets are reported. For a packet to be included in the report, it must match all conditions specified in at least one filter. Up to 32 filters can be active simultaneously.

#### Syntax
```shell
pktmon filter add [filter_name] [-m mac1 [mac2]] [-v vlan_id] [-d {IPv4 | IPv6 | number}] 
                      [-t {TCP [flags...] | UDP | ICMP | ICMPv6 | number}] 
                      [-i ip1 [ip2]] [-p port1 [port2]] [-b] [-e [encap_port]]
```
- **filter_name**: (Optional) A name or description for the filter.

#### Notes
- When two MAC addresses (`-m`), IP addresses (`-i`), or ports (`-p`) are specified, the filter matches packets that contain both. It does not distinguish between source and destination for this purpose.

#### Parameters
- **-m, --mac-address**: Match the source or destination MAC address.
- **-v, --vlan**: Match by VLAN ID (VID) in the 802.1Q header.
- **-d, --data-link-protocol, --ethertype**: Match by data link (layer 2) protocol. Valid options include IPv4, IPv6, ARP, or a protocol number.
- **-t, --transport-protocol, --ip-protocol**: Match by transport (layer 4) protocol. Valid options include TCP, UDP, ICMP, ICMPv6, or a protocol number. For TCP, an optional list of TCP flags (FIN, SYN, RST, PSH, ACK, URG, ECE, CWR) can be provided.
- **-i, --ip-address**: Match the source or destination IP address. Use CIDR notation with the prefix length to match by subnet.
- **-p, --port**: Match the source or destination port number.
- **-b, --heartbeat**: Match RCP heartbeat messages over UDP port 3343.
- **-e, --encap**: Apply the above filtering parameters to both inner and outer encapsulation headers. Supported encapsulation methods are VXLAN, GRE, NVGRE, and IP-in-IP. Custom VXLAN port is optional and defaults to 4789.

#### Examples
1. **Capture any ICMP traffic from or to the IP address 10.0.0.10 along with any traffic on port 53:**
   ```shell
   C:\Test> pktmon filter add -i 10.0.0.10 -t icmp
   C:\Test> pktmon filter add -p 53
   ```

2. **Capture all SYN packets sent or received by the IP address 10.0.0.10:**
   ```shell
   C:\Test> pktmon filter add -i 10.0.0.10 -t tcp syn
   ```

3. **Create a filter called "MyPing" to capture pings to 10.10.10.10 using the ICMP protocol:**
   ```shell
   C:\Test> pktmon filter add MyPing -i 10.10.10.10 -t ICMP
   ```

4. **Create a filter called "MySmbSyn" to capture synchronized SMB traffic on port 445:**
   ```shell
   C:\Test> pktmon filter add MySmbSyn -i 10.10.10.10 -t TCP SYN -p 445
   ```

5. **Create a filter called "MySubnet" to capture traffic on the subnet mask 255.255.255.0 (or /24 in CIDR notation):**
   ```shell
   C:\Test> pktmon filter add MySubnet -i 10.10.10.0/24
   ```

#### Additional References
For more information, refer to the official documentation and additional resources.