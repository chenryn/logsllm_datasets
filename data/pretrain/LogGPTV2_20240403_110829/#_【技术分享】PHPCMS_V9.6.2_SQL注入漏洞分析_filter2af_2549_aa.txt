# 【技术分享】PHPCMS V9.6.2 SQL注入漏洞分析
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
作者：[ **0r3ak@0kee
Team**](http://bobao.360.cn/member/contribute?uid=2515404114)
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**传送门**
[**【漏洞分析】PHPCMS V9.6.1
任意文件读取漏洞分析（含PoC，已有补丁）**](http://bobao.360.cn/learning/detail/3805.html)
**  
**
**前言**
通过这篇文章的分析： ，详细讲述了PHPCMS
V9.6.1文件读取漏洞的触发成因，当发现网站是phpcms并且成功利用任意文件读取漏洞读取时系统文件时是否可以进行下一步的利用，在phpcms的核心文件/caches/configs/system.php中存储了phpcms全站的加密密钥与全局的配置参数：
    'cookie_pre' => 'qErKa_', //Cookie 前缀，同一域名下安装多套系统时，请修改Cookie前缀
    'auth_key' => 'U6KnzDrhf6ZQ5Yt7izr0', //密钥
利用这个密钥可以对 phpcms传输的数据加解密，使用SkyWolf在PHPcms
9.6.2中挖掘到了一枚配合密钥利用的SQL注入漏洞，以下是详细过程与分析。
**Skywolf**
**SykWolf介绍**
什么是SkyWolf？SkyWolf是一款自动化灰盒审计系统，所谓灰盒审计，在日常对cms的代码审计中可以理解为白盒结合黑盒的安全测试，以PHP扩展形式加载，通过污染传递的方法污染程序整个执行流程，并对程序处理流程进行安全性分析。
Skywolf控制台地址：
通过访问网站接口skywolf会主动的分析中间调用逻辑，来罗列出可疑的漏洞
告警处理：展示Skywolf发现业务已经触发的漏洞告警信息，点进去看到详细的漏洞信息：
可疑点：服务端数据库执行的可疑语句
调用栈：程序在执行这一次请求当中所调用的函数与代码文件物理路径、在文件中的行数。
**SQL注入漏洞分析**
当访问到phpcms的member接口：
    phpcmsv961_1/index.php?m=member
skywolf发出了相关告警：
详细分析如下：
在会员前台管理中心接口的继承父类foreground：
/phpcms/modules/member/index.php LINE 11
    class index extends foreground {
        private $times_db;
        function __construct() {
            parent::__construct();
            $this->http_user_agent = $_SERVER['HTTP_USER_AGENT'];
        }
这里继承了foreground，跟进去：
/phpcms/modules/member/classes/foreground.class.php line 19-38：
        /**
         * 判断用户是否已经登陆
         */
        final public function check_member() {
            $phpcms_auth = param::get_cookie('auth');
            if(ROUTE_M =='member' && ROUTE_C =='index' && in_array(ROUTE_A, array('login', 'register', 'mini','send_newmail'))) {
                if ($phpcms_auth && ROUTE_A != 'mini') {
                    showmessage(L('login_success', '', 'member'), 'index.php?m=member&c=index');
                } else {
                    return true;
                }
            } else {
                //判断是否存在auth cookie
                if ($phpcms_auth) {
                    $auth_key = $auth_key = get_auth_key('login');
                    list($userid, $password) = explode("t", sys_auth($phpcms_auth, 'DECODE', $auth_key));
                    //验证用户，获取用户信息
                    $this->memberinfo = $this->db->get_one(array('userid'=>$userid)); //注入点在这
                    if($this->memberinfo['islock']) exit('Bad Request!');
                    //获取用户模型信息
                    $this->db->set_model($this->memberinfo['modelid']);
首先看到这里是验证前台会员用户是否登录，验证方法是解析客户端的cookie_pre_auth参数：
    $phpcms_auth = param::get_cookie('auth’);
跟到get_cookie函数：
/phpcms/libs/classes/param.class.php LINE 107-116
        /**
         * 获取通过 set_cookie 设置的 cookie 变量 
         * @param string $var 变量名
         * @param string $default 默认值 
         * @return mixed 成功则返回cookie 值，否则返回 false
         */
        public static function get_cookie($var, $default = '') {
            $var = pc_base::load_config('system','cookie_pre').$var;
            $value = isset($_COOKIE[$var]) ? sys_auth($_COOKIE[$var], 'DECODE') : $default;
            if(in_array($var,array('_userid','userid','siteid','_groupid','_roleid'))) {
                $value = intval($value);
            } elseif(in_array($var,array('_username','username','_nickname','admin_username','sys_lang'))) { //  site_model auth
                $value = safe_replace($value);
            }
            return $value;
        }
首先读取system.php（网站全局配置./caches/configs/system.php）中的配置参数cookie_pre，也就是网站默认随机分配的cookie前缀，然后再读取到客户端cookie中的cookie_pre_auth值放入sys_auth中解密，那么客户端的cookie_pre_auth应该是经过加密处理后的，有了这些信息后get_cookie先放到这里往下走到get_auth_key：
    $auth_key = $auth_key = get_auth_key('login');
                    list($userid, $password) = explode("t", sys_auth($phpcms_auth, 'DECODE', $auth_key));
                    //验证用户，获取用户信息
                    $this->memberinfo = $this->db->get_one(array('userid'=>$userid));
这里咱们看到DECODE用到的key是$auth_key，而$auth_key又是通过get_auth_key('login’)获得的，再跟进get_auth_key：
./phpcms/libs/functions/global.func.php LINE 1601-1611:
    /**
    * 生成验证key
    * @param $prefix   参数
    * @param $suffix   参数
    */
    function get_auth_key($prefix,$suffix="") {
        if($prefix=='login'){
            $pc_auth_key = md5(pc_base::load_config('system','auth_key').ip());
        }else if($prefix=='email'){
            $pc_auth_key = md5(pc_base::load_config('system','auth_key'));
        }else{
            $pc_auth_key = md5(pc_base::load_config('system','auth_key').$suffix);
        }
        $authkey = md5($prefix.$pc_auth_key);
        return $authkey;
    }
可以看到这个$prefix即是外部传入的login，满足$prefix==‘login’后开始拼接客户端ip地址再对值进行md5加密，发现ip()是可以伪造的：
    function ip() {
        if(getenv('HTTP_CLIENT_IP') && strcasecmp(getenv('HTTP_CLIENT_IP'), 'unknown')) {
            $ip = getenv('HTTP_CLIENT_IP');
        } elseif(getenv('HTTP_X_FORWARDED_FOR') && strcasecmp(getenv('HTTP_X_FORWARDED_FOR'), 'unknown')) {
            $ip = getenv('HTTP_X_FORWARDED_FOR');
        } elseif(getenv('REMOTE_ADDR') && strcasecmp(getenv('REMOTE_ADDR'), 'unknown')) {
            $ip = getenv('REMOTE_ADDR');
        } elseif(isset($_SERVER['REMOTE_ADDR']) && $_SERVER['REMOTE_ADDR'] && strcasecmp($_SERVER['REMOTE_ADDR'], 'unknown')) {
            $ip = $_SERVER['REMOTE_ADDR'];
        }
        return preg_match ( '/[d.]{7,15}/', $ip, $matches ) ? $matches [0] : '';
    }
最后得到的md5值就是sys_auth($phpcms_auth, 'DECODE',
$auth_key)的解密key了，这样来分析的话payload就是经过了两次加密，完全无视任何第三方防御。
加密流程：
**漏洞利用**
利用方式就简单了：
通过任意文件读取获取到全局配置文件的auth_key值：
首先执行get_auth_key加密，在代码中输出$authkey = md5($prefix.$pc_auth_key)的值：
    function get_auth_key($prefix,$suffix="") {
        if($prefix=='login'){
            $pc_auth_key = md5(pc_base::load_config('system','auth_key').ip());
        }else if($prefix=='email'){
            $pc_auth_key = md5(pc_base::load_config('system','auth_key'));
        }else{
            $pc_auth_key = md5(pc_base::load_config('system','auth_key').$suffix);
        }