        string name = reader.GetString(1);
        DateTime from = reader.GetDateTime(4);
        DateTime? to =
          reader.IsDBNull(5) ? (DateTime?)null: reader.GetDateTime(5);
        decimal standardPrice = reader.GetDecimal(6);
        WriteLine($"{id} {name} from: {from:d} to: {to:d}; " +
          $"price: {standardPrice}");
        }
      }
    }
运行应用程序，把产品ID 717传递给ExecuteReader方法，输出如下：
    717 HL Road Frame-Red, 62 from: 5/31/2011 to: 5/29/2012; price: 747.9682
    717 HL Road Frame-Red, 62 from: 5/30/2012 to: 5/29/2013; price: 722.2568
    717 HL Road Frame-Red, 62 from: 5/30/2013 to:; price: 868.6342
对于产品ID的可能值，检查数据库的内容。
对于SqlDataReader，不是使用类型化的GetXXX方法，而可以使用无类型的索引器返
回一个对象。为此，需要转换为相应的类型：
    int id = (int)reader[0];
    string name = (string)reader[1];
    DateTime from = (DateTime)reader[2];
    DateTime? to = (DateTime?)reader[3];
SqlDataReader的索引器还允许使用string而不是int传递列名。在这些不同的选项中，
这是最慢的方法，但它可以满足需求。与发出服务调用所需的时间相比，访问索引器所需
的额外时间可以忽略不计：
    int id = (int)reader["ProductID"];
    string name = (string)reader["Name"];
    DateTime from = (DateTime)reader["StartDate"];
    DateTime? to = (DateTime?)reader["EndDate"];
37.3.4 调用存储过程
用命令对象调用存储过程，就是定义存储过程的名称，给过程的每个参数添加参数定
义，然后用上一节中给出的其中一种方法执行命令。
下面的示例调用存储过程uspGetEmployeeManagers，得到一位员工的所有上司。这个
存储过程接收一个参数，使用递归查询返回所有经理的记录：
    CREATE PROCEDURE [dbo].[uspGetEmployeeManagers]
        @BusinessEntityID [int]
    AS
    -...
为了查看存储过程的实现代码，请检查AdventureWorks2014数据库。
为了调用存储过程，SqlCommand对象的CommandText设置为存储过程的名称，
CommandType设置为CommandType.StoredProcedure。除此之外，该命令的调用类似于以
前的方式。参数使用SqlCommand对象的CreateParameter方法创建，也可以使用其他方法
来创建之前使用的参数。对于参数，填充SqlDbType、ParameterName和Value属性。因为
存储过程返回记录，所以它通过调用方法ExecuteReader来调用（代码文件
CommandSamples / Program.cs）：
        private static void StoredProcedure(int entityId)
        {
          using (var connection = new SqlConnection(GetConnectionString()))
          {
            SqlCommand command = connection.CreateCommand();
            command.CommandText = "[dbo].[uspGetEmployeeManagers]";
            command.CommandType = CommandType.StoredProcedure;
            SqlParameter p1 = command.CreateParameter();
            p1.SqlDbType = SqlDbType.Int;
            p1.ParameterName = "@BusinessEntityID";
            p1.Value = entityId;
            command.Parameters.Add(p1);
            connection.Open();
            using (SqlDataReader reader = command.ExecuteReader())
            {
            while (reader.Read())
            {
              int recursionLevel = (int)reader["RecursionLevel"];
              int businessEntityId = (int)reader["BusinessEntityID"];
              string firstName = (string)reader["FirstName"];
              string lastName = (string)reader["LastName"];
              WriteLine($"{recursionLevel} {businessEntityId} " +
                $"{firstName} {lastName}");
            }
            }
          }
        }
运行应用程序，传递实体ID 251，得到这个雇员的上司，如下所示：
    0 251 Mikael Sandberg
    1 250 Sheela Word
    2 249 Wendy Kahn
根据存储过程返回的内容，需要用ExecuteReader、ExecuteScalar或ExecuteNonQuery
调用存储过程。
对于包含Output参数的存储过程，需要指定SqlParameter的Direction属性。默认情况
下，Direction是ParameterDirection. Input：
    var pOut = new SqlParameter();
    pOut.Direction = ParameterDirection.Output;
37.4 异步数据访问
访问数据库可能要花一些时间。这里不应该阻塞用户界面。ADO.NET类通过异步方
法和同步方法，提供了基于任务的异步编程。下面的代码片段类似于上一个使用
SqlDataReader的代码，但它使用了异步的方法调用。连接用SqlConnection. OpenAsync打
开，读取器从SqlCommand.Execute-ReaderAsync方法中返回，记录使用
SqlDataReader.ReadAsync检索。在所有这些方法中，调用线程没有阻塞，但是可以在得到
结果前，执行其他的工作（代码文件AsyncSamples / Program.cs）：
    public static void Main()
    {
      ReadAsync(714).Wait();
    }
    public static async Task ReadAsync(int productId)
    {
      var connection = new SqlConnection(GetConnectionString());
      string sql =
        "SELECT Prod.ProductID, Prod.Name, Prod.StandardCost, Prod.ListPrice, " +
        "CostHistory.StartDate, CostHistory.EndDate, CostHistory.StandardCost " +
        "FROM Production.ProductCostHistory AS CostHistory  " +
        "INNER JOIN Production.Product AS Prod ON " +
        "CostHistory.ProductId = Prod.ProductId " +
        "WHERE Prod.ProductId = @ProductId";
      var command = new SqlCommand(sql, connection);
      var productIdParameter = new SqlParameter("ProductId", SqlDbType.Int);
      productIdParameter.Value = productId;
      command.Parameters.Add(productIdParameter);
      await connection.OpenAsync();
      using (SqlDataReader reader = await command.ExecuteReaderAsync
(
        CommandBehavior.CloseConnection))
      {
        while (await reader.ReadAsync()
)
        {
        int id = reader.GetInt32(0);
        string name = reader.GetString(1);
        DateTime from = reader.GetDateTime(4);
        DateTime? to = reader.IsDBNull(5) ? (DateTime?)null:
          reader.GetDateTime(5);
        decimal standardPrice = reader.GetDecimal(6);
        WriteLine($"{id} {name} from: {from:d} to: {to:d}; " +
          $"price: {standardPrice}");
        }
      }
    }
使用异步方法调用，不仅有利于Windows应用程序，也有利于在服务器端同时进行多
个调用。ADO.NET API的异步方法有重载版本来支持CancellationToken，让长时间运行的
方法早些停止。
  注意： 异步方法调用和CancellationToken详见第15章。
37.5 事务
默认情况下，一个命令运行在一个事务中。如果需要执行多个命令，所有这些命令都
执行完毕，或都没有执行，就可以显式地启动和提交事务。
事务的特征可以用术语ACID来定义，ACID是Atomicity、Consistency、Isolation和
Durability的首字母缩写。
● Atomicity（原子性）：表示一个工作单元。在事务中，要么整个工作单元都成功完
成，要么都不完成。
● Consistency（一致性）：事务开始前的状态和事务完成后的状态必须有效。在执行
事务的过程中，状态可以有临时值。
● Isolation（隔离性）：表示并发进行的事务独立于状态，而状态在事务处理过程中
可能发生变化。在事务未完成时，事务A看不到事务B中的临时状态。
● Durability（持久性）：在事务完成后，它必须以可持久的方式存储起来。如果关闭
电源或服务器崩溃，该状态在重新启动时必须恢复。
  注意： 事务和有效状态很容易用婚礼来解释。新婚夫妇站在事务协调员面
前，事务协调员询问一位新人：“你愿意与你身边的男人结婚吗？”如果第一位新人同
意，就询问第二位新人：“你愿意与这个女人结婚吗？”如果第二位新人反对，第一位新
人就接收到回滚消息。这个事务的有效状态是，要么两个人都结婚，要么两个人都不
结婚。如果两个人都同意结婚，事务就会提交，这两个人就都处于已结婚的状态。如
果其中一个人反对，事务就会终止，两个人都处于未结婚的状态。无效的状态是：一
个人已结婚，而另一个没有结婚。事务确保结果永远不处于无效状态。
在ADO.NET中，通过调用SqlConnection的BeginTransaction方法就可以开始事务。事
务总是与一个连接关联起来；不能在多个连接上创建事务。BeginTransaction方法返回一
个SqlTransaction, 
SqlTransaction需要使用运行在相同事务下的命令（代码文件
TransactionSamples / Program.cs）：
    public static void TransactionSample()
    {
      using (var connection = new SqlConnection(GetConnectionString()))
      {
        await connection.OpenAsync();
        SqlTransaction tx = connection.BeginTransaction();
        // etc.
      }
    }
  注意： 实际上，可以创建跨多个连接的事务。因此，在Windows操作系统上
可以使用分布式事务协调器。可以使用TransactionScope类创建分布式事务。然而，这
个类只是完整.NET Framework的一部分，没有进入.NET Core；因此本书不介绍它。
代码示例在Sales.CreditCard表中创建一个记录。使用SQL子句INSERT 
INTO添加记
录。CreditCard表定义了一个自动递增的标识符，它使用返回创建的标识符的第二个SQL
语句SELECT 
SCOPE_IDENTITY（）返回。在实例化SqlCommand对象后，通过设置
Connection属性来分配连接，设置Transaction属性来指定事务。在ADO.NET事务中，不能
把事务分配给使用不同连接的命令。不过，可以用相同的连接创建与事务不相关的命令：
    public static void TransactionSample()
    {
      // etc.
        try
        {
        string sql = "INSERT INTO Sales.CreditCard " +
            "(CardType, CardNumber, ExpMonth, ExpYear)" +
            "VALUES (@CardType, @CardNumber, @ExpMonth, @ExpYear); " +
          "SELECT SCOPE_IDENTITY()";
        var command = new SqlCommand();
        command.CommandText = sql;
        command.Connection = connection;
        command.Transaction = tx;
      // etc.
    }
在定义参数，填充值后，通过调用方法ExecuteScalarAsync来执行命令。这次，
ExecuteScalarAsync方法和INSERT INTO子句一起使用，因为完整的SQL语句通过返回一
个结果来结束：从SELECT SCOPE_IDENTITY（）返回创建的标识符。如果在WriteLine
方法后设置一个断点，检查数据库中的结果，在数据库中就不会看到新记录，虽然已经返
回了创建的标识符。原因是事务没有提交：
    public static void TransactionSample()
    {
      // etc.
        var p1 = new SqlParameter("CardType", SqlDbType.NVarChar, 50);
        var p2 = new SqlParameter("CardNumber", SqlDbType.NVarChar, 25);
        var p3 = new SqlParameter("ExpMonth", SqlDbType.TinyInt);
        var p4 = new SqlParameter("ExpYear", SqlDbType.SmallInt);
        command.Parameters.AddRange(new SqlParameter[] { p1, p2, p3, p4 });
        command.Parameters["CardType"].Value = "MegaWoosh";
        command.Parameters["CardNumber"].Value = "08154711123";
        command.Parameters["ExpMonth"].Value = 4;
        command.Parameters["ExpYear"].Value = 2019;
        object id = await command.ExecuteScalarAsync();
        WriteLine($"record added with id: {id}");
        // etc.
    }
现在可以在同一事务中创建另一个记录。在示例代码中，使用同样的命令，连接和事
务仍然相关，只是在再次调用ExecuteScalarAsync前改变了值。也可以创建一个新的
SqlCommand对象，访问同一个数据库中的另一个表。调用SqlTransaction对象的Commit方
法，提交事务。之后，就可以在数据库中看到新记录：
        public static void TransactionSample()
        {
            // etc.
            command.Parameters["CardType"].Value = "NeverLimits";
            command.Parameters["CardNumber"].Value = "987654321011";
            command.Parameters["ExpMonth"].Value = 12;
            command.Parameters["ExpYear"].Value = 2025;
            id = await command.ExecuteScalarAsync();
            WriteLine($"record added with id: {id}");
            // throw new Exception("abort the transaction");
            tx.Commit();
        }
        // etc.
        }
如果出错，Rollback方法就撤销相同事务中的所有SQL命令。状态重置为事务开始之
前的值。通过取消注释提交之前的异常，很容易模拟回滚：
    public static void TransactionSample()
    {
        // etc.
        catch (Exception ex)
        {
        WriteLine($"error {ex.Message}, rolling back");
        tx.Rollback();
        }
      }
    }
如果在调试模式下运行程序，断点激活的时间太长，事务就会中断，因为事务超时
了。事务处于活跃状态时，并不意味着有用户输入。为用户输入增加事务的超时时间也不
是很有用，因为事务处于活跃状态，会导致在数据库中有一个锁定。根据读写的记录，可
能出现行锁、页锁或表锁。为创建事务设置隔离级别，可以影响锁定，因此影响数据库的
性能。然而，这也影响事务的ACID属性，例如，并不是所有数据都是隔离的。
应用于事务的默认隔离级别是ReadCommitted。表37-1显示了可以设置的不同选项。
表37-1
隔离级别
说明
ReadUncommitted
使用ReadUncommitted，事务不会相互隔离。使用这个级
别，不等待其他事务释放锁定的记录。这样，就可以从其他
事务中读取未提交的数据——脏读。这个级别通常仅用于读
取不管是否读取临时修改都无关紧要的记录，如报表
ReadCommitted
ReadCommitted等待其他事务释放对记录的写入锁定。这
样，就不会出现脏读操作。这个级别为读取当前的记录设置
读取锁定，为要写入的记录设置写入锁定，直到事务完成为
止。对于要读取的一系列记录，在移动到下一个记录上时，
前一个记录都是未锁定的，所以可能出现不可重复的读操作
RepeatableRead
RepeatableRead为读取的记录设置锁定，直到事务完成为
止。这样，就避免了不可重复读的问题。但幻读仍可能发生
Serializable
Serializable设置范围锁定。在运行事务时，不可能添加与所
读取的数据位于同一个范围的新记录
Snapshot
Snapshot用于对实际的数据建立快照。在复制修改的记录
时，这个级别会减少锁定。这样，其他事务仍可以读取旧数
据，而无须等待解锁
Unspecified
Unspecified表示，提供程序使用另一个隔离级别值，该值不
同于IsolationLevel枚举定义的值
Chaos
Chaos类似于ReadUncommitted，但除了执行
ReadUncommitted值的操作之外，它不能锁定更新的记录
表37-2总结了设置最常用的事务隔离级别可能导致的问题。
表37-2
隔离级别
脏读
不可重复读
幻读
ReadUncommitted
Y
Y
Y
ReadCommitted
N