        msg:"http-beacon-checksum8-path-parse"; \
        classtype: http-beacon; \
        flow: established, to_server; \
        urilen:4<>6; \
        luajit:checksum8_check.lua; \
    )
    # checksum8_check.lua
    function init (args)
        local needs = {}
        needs["http.uri"] = tostring(true)
        return needs
    end
    function match(args)
        local uri_raw = tostring(args["http.uri"])
        local uri = string.sub(uri_raw, 2, -1) -- 去除uri中的"/"
        local sum = 0
        for i=1,#uri do
            local x = string.sub(uri,i,i)
            sum = sum + string.byte(x)
        end
        if (sum % 256) == 92 then
            return 1 -- 符合checksum8规则，匹配成功
        else 
            return 0 -- 不符合checksum8规则，匹配失败
        end
    end
#### 4.2 ja3/ja3s检查
满足其中之一则命中规则触发告警：
  1. 采用黑名单机制，正则匹配由beacon端发起请求的ja3指纹；
  2. 采用黑名单机制，正则匹配由c2端返回的ja3s指纹。
![
](https://images.seebug.org/content/images/2022/06/17/1655455729000-26.png-w331s)
完整规则：
    # https-beacon-ja3指纹，client-hello
    alert tls any any -> any any (gid:6666; sid:30005; rev:1; \
        msg:"https-beacon-ja3-hash"; \
        classtype: https-beacon; \
        ja3.hash; pcre:"/652358a663590cfc624787f06b82d9ae|4d93395b1c1b9ad28122fb4d09f28c5e|72a589da586844d7f0818ce684948eea|a0e9f5d64349fb13191bc781f81f42e1/"; \
    )
    # https-beacon-ja3s指纹，server-hello
    alert tls any any -> any any (gid:6666; sid:30006; rev:1; \
        msg:"https-beacon-ja3s-hash"; \
        classtype: https-beacon; \
        ja3s.hash; pcre:"/fd4bc6cea4877646ccd62f0792ec0b62|15af977ce25de452b96affa2addb1036|b742b407517bac9536a77a7b0fee28e9/"; \
    )
#### 4.3 异常dns检查
##### 01 A记录异常返回
同时命中以下两条规则则触发告警：
  1. dns流量内容包含二进制数`00 01 00 01 00 00 00`：`content:"|00 01 00 01 00 00 00|";`
  2. dns返回包以`0.0.0.241`结尾：`content:"|00 00 00 f1|"; nocase; endswith;`
![
](https://images.seebug.org/content/images/2022/06/17/1655455729000-27.png-w331s)
完整规则：
    # dns-beacon，匹配dns-beacon发起上线/心跳请求后，c2服务器的返回包，选择后续使用A记录
    # Type: A, Class: IN, 0.0.0.241
    alert dns any any -> any any (gid:9999; sid:30011; rev:1; \
        msg:"dns-beacon-live-response"; \
        classtype: dns-beacon; \
        content:"|00 01 00 01 00 00 00|"; \
        content:"|00 00 00 f1|"; nocase; endswith; \
    )
##### 02 txt记录异常返回
同时命中以下四条规则则触发告警：
  1. 由c2端发起请求：`flow:to_client;`
  2. dns流量内容包含`api`字符：`pcre:"/api/";`
  3. dns流量内容包含二进制数`00 01 00 01 00 00 00`：`content:"|00 01 00 01 00 00 00|";`
  4. dns返回包以`0.0.0.50`结尾：`content:"|00 00 00 50|"; endswith;`
![
](https://images.seebug.org/content/images/2022/06/17/1655455730000-28.png-w331s)
完整规则：
    # dns-beacon，匹配dns-beacon使用TXT方式向c2服务器发起payload下载请求后，c2服务器的返回包
    # api ==> TXT 
    # Type: A, Class: IN, 0.0.0.80
    alert udp any any -> any any (gid:9999; sid:30015; rev:1; \
        msg:"dns-beacon-getpayload-response"; \
        classtype: dns-beacon; \
        flow:to_client; \
        pcre:"/api/"; \
        content:"|00 01 00 01 00 00 00|"; \
        content:"|00 00 00 50|"; endswith; \
    )
#### 4.4 测试
##### 01 白流量
hexdump抓取访问baidu站点流量，测试结果没有产生误报。
![
](https://images.seebug.org/content/images/2022/06/17/1655455730000-29.png-w331s)
##### 02 http-beacon
识别出stage下载、心跳请求、执行结果回传三种流量。
![
](https://images.seebug.org/content/images/2022/06/17/1655455730000-30.png-w331s)
##### 03 https-beacon
识别出ja3、ja3s、cert三种cs流量。
![
](https://images.seebug.org/content/images/2022/06/17/1655455731000-31.png-w331s)
##### 04 dns-beacon
识别出心跳请求、结果回传、元数据提交、payload下载四种cs流量。
![
](https://images.seebug.org/content/images/2022/06/17/1655455731000-32.png-w331s)
### 五、总结
cobaltstrike默认配置文件具有较为明显的流量特征，容易被监管设备查杀，使用malleable-c2、证书等手法能够在一定程度上混淆流量，但在整个tcp/ip模型中依然存在蛛丝马迹，无法脱离cobaltstrike框架。对攻击方来说想要究极隐藏，笔者认为还得要从源头入手，在魔改cs或自研网络通信模型上想想办法，同时这对防守方来说提出了更高的要求，能否应对来自高级攻击者发起的挑战。
### 六、参考
  * 
  * 
  * 
  * 
* * *