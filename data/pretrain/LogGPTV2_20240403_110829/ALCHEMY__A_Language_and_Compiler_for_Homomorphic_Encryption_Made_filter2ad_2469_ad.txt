example, we use these to modularly add logging of ciphertext error
rates during homomorphic computation (see Appendix C).
3 ALCHEMY DOMAIN-SPECIFIC LANGUAGES
In this section we describe Alchemy’s specialized DSL language
components for expressing computations on FHE plaintexts and
ciphertexts. Recall that in tagless-final style, language components
can be combined arbitrarily. Loosely speaking, “plaintext DSL” (re-
spectively, “ciphertext DSL”) refers to the union of the generic lan-
guage components supporting arithmetic, basic data structures, etc.,
and the language components for specialized plaintext operations
described in Section 3.1 (respectively, homomorphic operations on
ciphertexts described in Section 3.2). Naturally, not every program
written in these DSLs will use every component.
3.1 Plaintext DSL
BGV-style FHE systems [12, 22] natively support homomorphic
evaluation of several operations. We define language components
that model the induced functions on the plaintexts, and instantiate
them for the appropriate Alchemy interpreters; in most cases this
is completely straightforward. More interestingly, the plaintext-
to-ciphertext compiler instantiates plaintext-DSL components by
translating their operations to the ciphertext DSL (see Section 4).
Arithmetic with public values. In FHE one can homomorphically
add or multiply a public value from the plaintext ring with an en-
crypted plaintext, yielding an encrypted result. We model this by
treating the public value as residing in the host language, while
the encrypted plaintext resides in the object language. When trans-
forming from the plaintext DSL to the ciphertext DSL, the public
(host-language) value remains “in the clear,” whereas the object-
language plaintext type is transformed to a ciphertext type.
class AddLit_ expr a where
addLit_ :: a -> expr e (a -> a)
class MulLit_ expr a where
mulLit_ :: a -> expr e (a -> a)
Division by two. When the plaintext modulus p is even and the
plaintext itself is known to also be even, it is possible to homomor-
phically divide both the modulus and plaintext by two. This is a
useful operation in the context of bootstrapping and the homomor-
phic evaluation of PRFs (see Section 5).
The following Div2_ language component introduces an object-
language function that models the divide-by-two operation on
plaintexts. Like the Mul_ class, Div2_ has an associated type family
PreDiv2_ that allows the interpreter to define the input plaintext
type as a function of the output type.
class Div2_ expr a where
type PreDiv2_ expr a
div2_ :: expr e (PreDiv2_ expr a -> a)
Linear functions. In BGV-style FHE over cyclotomic rings, one
can homomorphically apply (to an encrypted plaintext) any func-
tion from the rth cyclotomic to the sth cyclotomic that is lin-
ear over a common subring. The following (somewhat simplified)
LinearCyc_ language component introduces the linearCyc_ func-
tion, which models this operation. Notice that linearCyc_ takes a
host-language value representing the desired linear function (via the
Λ◦λ data type Linear), and produces an object-language function on
plaintexts. Analogously to addLit_ and mulLit_, this reflects the
fact that the choice of linear function always remains “in the clear,”
whereas the object-language plaintext type can be transformed, e.g.,
to a ciphertext type. Notice also that, like PreMul_ and PreDiv2_,
the PreLinearCyc_ type family gives the interpreter some control
over the type of the input as a function of the output type. The
plaintext-to-ciphertext compiler uses this to statically track error
rates; see Section 4.2.2.
class LinearCyc_ expr cyc where
type PreLinearCyc expr cyc
linearCyc_ :: ... => Linear cyc e r s zp ->
expr env ((PreLinearCyc expr cyc) r zp -> cyc s zp)
Higher-level operations. There are a variety of other useful higher-
level operations on plaintexts that, while not natively supported
by BGV-style FHE, have reasonably efficient “arithmetizations” in
terms of native operations. Alchemy includes a few such operations,
which are implemented entirely using standard combinators on
plaintext-DSL terms, and can be used just as easily as the native
operations.
One important example is the mod-p rounding function ⌊·⌉2 : Zp →
Z2, which is defined as ⌊x⌉2 = ⌊ 2
2⌋. This function
plays an important role in bootstrapping for FHE [3, 31], as well
as in the Learning With Rounding problem [6]. While rounding
is trivial to implement in the clear, it is not natively supported by
BGV-stlye FHE. However, when p = 2k is a power of two, there are
known arithmetizations as low-depth circuits with native FHE op-
erations as the gates. One was given in [31], and was subsequently
improved in [3]; in the full version of this work we provide one
that is even more efficient for p ≤ 32.
simplified for readability) is given by:
The Alchemy implementation of the rounding tree (slightly
p · x⌉ = ⌊ 2
p · x + 1
rescaleTree_ :: (Lambda_ expr, Div2_ expr r2, ...) =>
expr e (PreRescaleTree_ expr k r2 -> r2)
rescaleTree_ = ...
type family PreRescaleTree_ expr k r2 where ...
The type k is a positive natural number representing the power of
two associated with the input modulus p = 2k. The term rescaleTree_
represents a function from (PreRescaleTree expr k r2) to r2,
which should represent a ring modulo p = 2k and two, respectively.7
Observe that the PreRescaleTree_ type family is recursively de-
fined in terms of PreMul_ and PreDiv2_.
The following small example shows the type and printed rep-
resentation in terms of native operations, for p = 4. Note that the
entire type of round4 is inferred by the Haskell compiler.
-- choose k = 2 for p = 22 = 4
round4 = rescaleTree_ @2
-- (Lambda_ expr, AddLit_ expr (PreMul_ expr (PreDiv2_ expr r2)),
--
Mul_ expr (PreDiv2_ expr r2), Div2_ expr r2, ...)
-- => expr e (PreMul_ expr (PreDiv2_ expr r2) -> r2)
print round4
-- "(\v0 -> (div2 ((mul v0) (addLit (Scalar ZqB 1) v0))))"
7Note that in our application in Section 5, the ring is not just the integers Z, but an
appropriate cyclotomic ring that has many mod-2 “slots.” The very same rescaleTree_
function operates in parallel over the slots, without modification.
3.2 Ciphertext DSL
For the ciphertext DSL, we define language components that model
the operations that can be performed on BGV-style FHE cipher-
texts. These include arithmetic operations from the generic Add_
and Mul_ classes, and ciphertext “maintenance” operations like key-
switching and linearization. The latter are defined in a language
component called SHE_ (for “somewhat homomorphic encryption,”
another name for encryption that supports a bounded amount of ho-
momorphic computation). Because Alchemy currently targets the
FHE implementation from Λ◦λ [22], the ciphertext DSL operations
use its types.
FHE types in Λ◦λ. A plaintext is an element of the mth cyclotomic
ring modulo an integer p, denoted Rp = Zp[X]/(Φm (X )), where
Φm (X ) is the mth cyclotomic polynomial. In Λ◦λ, this ring is repre-
sented with the data type Cyc m zp, where m is a type representing
the cyclotomic index m, and zp is a type representing Zp, the ring
of integers modulo p.
q, the m′th
cyclotomic ring modulo some q ≫ p, where the index m′ must be
divisible by the plaintext index m. Ciphertexts are represented by
the type CT m zp (Cyc m' zq). A secret key for a ciphertext of
this type has type SK (Cyc m' z), where z represents the ring of
integers Z (not modulo anything).
A ciphertext is a (usually linear) polynomial over R′
Arithmetic operations. The ciphertext data type CT (with appro-
priate arguments) is an instance of Haskell’s Additive and Ring
classes, so we can use the + and * operators on ciphertexts to
perform homomorphic addition and multiplication, respectively.
Therefore, the Add_ and Mul_ instances for, say, the evaluator E
and printer P described in Section 2 already handle object-language
addition +: and multiplication *: of ciphertexts, with no additional
code.
Other homomorphic operations. The remainder of the ciphertext
DSL is (almost) entirely represented by the SHE_ language compo-
nent, which closely corresponds to the public interface of Λ◦λ’s
implementation. Due to space restrictions, we defer its formal defi-
nition and a description of its methods to the full version.
Measuring ciphertext error. Ciphertexts have an implicit error
term that grows as homomorphic operations are performed. If this
error becomes too large relative to the ciphertext modulus, the
ciphertext does not decrypt correctly to the intended plaintext.
Therefore, it is important to control the error growth during homo-
morphic computation. For diagnostic purposes, it can be helpful to
just decrypt the ciphertext and observe the empirical error. This
operation is captured by the following language component:
class ErrorRate_ expr where
errorRate_ :: (...)
=> SK (Cyc m' z)
-> expr e (CT m zp (Cyc m' zq) -> Double)
Because extracting the error term requires the decrypting the ci-
phertext, errorRate_ requires the secret key for the ciphertext. But
observe that the secret key properly resides in the host language
because it is generated prior to the evaluation of the homomorphic
computation.
4 PLAINTEXT-TO-CIPHERTEXT COMPILER
In this section we describe the design and implementation of Alchemy’s
“plaintext-to-ciphertext” compiler PT2CT, which, given an “in-the-
clear” program in the plaintext DSL, interprets it as a corresponding
homomorphic computation in the ciphertext DSL. In keeping with
Alchemy’s modular design, the resulting program can in turn be
handled by any ciphertext-DSL interpreter, such as the evaluator,
the printer, or another transformation like an optimizer or the
error-rate logger described in Appendix C.
The PT2CT compiler automatically performs a number of tasks
to reduce the burden on the programmer and the complexity of
application code: it generates and manages all necessary keys, key-
switching and tunneling hints, and input ciphertexts to the homo-
morphic computation. And it statically (i.e., at compile time) infers
quite sharp upper bounds on the error rates of every ciphertext in
the homomorphic computation, using these to choose appropriate
ciphertext moduli based on their “error capacity.” If the programmer
has not supplied type-level moduli with enough error capacity for
the desired homomorphic computation, PT2CT emits an informative
compile-time type error.
4.1 Interface and Design
We now provide more detail on PT2CT’s public interface and the
key considerations affecting its design. Using PT2CT is as simple as
calling pt2ct, with certain types specifying additional FHE param-
eters, on a plaintext-DSL expression that uses the cyclotomic type
PNoiseCyc to allow static tracking of ciphertext error rates:
-- define a plaintext computation
ex1
-- specialize ex1's output type for error tracking
ex1' = ex1 :: _ => expr e (_ -> _ -> PNoiseCyc 0 F8 _)
= lam2 $ \x y -> (var x +: var y) *: var y
do -- compile to homomorphic computation
-- encrypt plaintext inputs
exct1  mon (ctex (Cyc2CT m'map zqs e) (Cyc2CT m'map zqs a))
pt2ct (PC ex) = ex
type family Cyc2CT m'map zqs a = ct where ...
encrypt :: ... => Cyc m zp -> mon (CT m zp (Cyc m' zq))
decrypt :: ... => CT m zp (Cyc m' zq) -> mon (Maybe (Cyc m zp))
Figure 1: Definition and public interface of the plaintext-to-
ciphertext compiler PT2CT.
PT2CT requires the types in the plaintext-DSL program to be aug-
mented by what are essentially (mild upper bounds on) the error
rates of the corresponding ciphertexts. Given a desired error rate
for the ultimate output, the Haskell compiler “backtracks” through
the computation to compute error-rate bounds for all the preceding
ciphertexts. This is done via PT2CT’s instances of the type families
PreMul_, PreLinearCyc_, etc., which, to recall, are associated with
the various plaintext-DSL components. For example, these type
families may determine that for mul_ to produce an output with
error rate at most 2−50, the inputs should have error rates at most
2−68. (See Section 4.2.2 for details.)
Third, we want PT2CT to generate and have access to the random
keys and hints that are used in the homomorphic computation,
and for encrypting inputs and decrypting outputs. These values
properly reside in the host language because they are used only
to construct the ciphertext-DSL program and its encrypted inputs.
Therefore, all this is best modeled by embedding the ciphertext-DSL
program in a host-language “accumulator” monad that provides
append-only generation and reading of keys and hints.
Figure 1 shows the definition and public interface of PT2CT,
which is parameterized by several types, whose meanings are given
in the comments. Based on these parameters, PT2CT represents
a plaintext-DSL program as a ciphertext-DSL program of type
Cyc2CT m'map zqs a, interpreted by ctex, and embedded in the
host-language monad mon. The function pt2ct just returns this
representation.
Cyc2CT is a type family—i.e., a function from types to types—that
converts an “in-the-clear” type to a corresponding “homomorphic”
type. In particular, it converts the error-rate–augmented cyclotomic
ring type PNoiseCyc p m zp to the ciphertext type over the cyclo-
tomic ring of index m' = Lookup m m'map, with a large enough
ciphertext modulus as determined by the error rate corresponding
to p (see Section 4.2.2 for details). Similarly, it converts the function
type a -> b by recursing on both arguments a, b, so that functions
on plaintexts (even higher-order functions) map to functions on
ciphertexts of corresponding types.
4.2 Implementation
Instantiations of Language Components. We now show how
4.2.1
PT2CT interprets some instructive plaintext-DSL components. Some
plaintext operations, like addition, translate directly to ciphertext-