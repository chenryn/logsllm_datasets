title:Enhancing Bitcoin Security and Performance with Strong Consistency
via Collective Signing
author:Eleftherios Kokoris-Kogias and
Philipp Jovanovic and
Nicolas Gailly and
Ismail Khoffi and
Linus Gasser and
Bryan Ford
Enhancing Bitcoin Security and Performance  
with Strong Consistency via Collective Signing
Eleftherios Kokoris Kogias, Philipp Jovanovic, Nicolas Gailly, Ismail Khoffi,  
Linus Gasser, and Bryan Ford, École Polytechnique Fédérale de Lausanne (EPFL)
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/kogias
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX Enhancing Bitcoin Security and Performance with
Strong Consistency via Collective Signing
Eleftherios Kokoris-Kogias, Philipp Jovanovic, Nicolas Gailly,
Ismail Khofﬁ, Linus Gasser, and Bryan Ford
EPFL
Abstract
While showing great promise, Bitcoin requires users to
wait tens of minutes for transactions to commit, and
even then, offering only probabilistic guarantees. This
paper introduces ByzCoin, a novel Byzantine consen-
sus protocol that leverages scalable collective signing to
commit Bitcoin transactions irreversibly within seconds.
ByzCoin achieves Byzantine consensus while preserv-
ing Bitcoin’s open membership by dynamically form-
ing hash power-proportionate consensus groups that rep-
resent recently-successful block miners. ByzCoin em-
ploys communication trees to optimize transaction com-
mitment and veriﬁcation under normal operation while
guaranteeing safety and liveness under Byzantine faults,
up to a near-optimal tolerance of f faulty group members
among 3 f + 2 total. ByzCoin mitigates double spend-
ing and selﬁsh mining attacks by producing collectively
signed transaction blocks within one minute of trans-
action submission. Tree-structured communication fur-
ther reduces this latency to less than 30 seconds. Due
to these optimizations, ByzCoin achieves a throughput
higher than Paypal currently handles, with a conﬁrma-
tion latency of 15-20 seconds.
1 Introduction
Bitcoin [47] is a decentralized cryptocurrency providing
an open, self-regulating alternative to classic currencies
managed by central authorities such as banks. Bitcoin
builds on a peer-to-peer network where users can sub-
mit transactions without intermediaries. Special nodes,
called miners, collect transactions, solve computational
puzzles (proof-of-work) to reach consensus, and add the
transactions in form of blocks to a distributed public
ledger known as the blockchain.
The original Bitcoin paper argues that transaction pro-
cessing is secure and irreversible, as long as the largest
colluding group of miners represents less than 50% of
total computing capacity and at least about one hour has
elapsed. This high transaction-conﬁrmation latency lim-
its Bitcoin’s suitability for real-time transactions. Later
work revealed additional vulnerabilities to transaction
reversibility, double-spending, and strategic mining at-
tacks [25, 31, 34, 35, 48, 3].
The key problem is that Bitcoin’s consensus algo-
rithm provides only probabilistic consistency guarantees.
Strong consistency could offer cryptocurrencies three
important beneﬁts. First, all miners instantly agree on
the validity of blocks, without wasting computational
power resolving inconsistencies (forks). Second, clients
need not wait for extended periods to be certain that a
submitted transaction is committed; as soon as it ap-
pears in the blockchain, the transaction can be consid-
ered conﬁrmed. Third, strong consistency provides for-
ward security: as soon as a block has been appended
to the blockchain, it stays there forever. Although in-
creasing the consistency of cryptocurrencies has been
suggested before [17, 19, 43, 52, 56], existing propos-
als give up Bitcoin’s decentralization, and/or introduce
new and non-intuitive security assumptions, and/or lack
experimental evidence of performance and scalability.
This work introduces ByzCoin, a Bitcoin-like cryp-
tocurrency enhanced with strong consistency, based on
the principles of the well-studied Practical Byzantine
Fault Tolerance (PBFT) [14] algorithm. ByzCoin ad-
dresses four key challenges in bringing PBFT’s strong
consistency to cryptocurrencies: (1) open membership,
(2) scalability to hundreds of replicas, (3) proof-of-work
block conﬂicts, and (4) transaction commitment rate.
PBFT was not designed for scalability to large consen-
sus groups: deployments and experiments often employ
the minimum of four replicas [38], and generally have
not explored scalability levels beyond 7 [14] or 16 repli-
cas [16, 32, 1]. ByzCoin builds PBFT atop CoSi [54],
a collective signing protocol that efﬁciently aggregates
hundreds or thousands of signatures. Collective sign-
ing reduces both the costs of PBFT rounds and the costs
USENIX Association  
25th USENIX Security Symposium  279
1
for “light” clients to verify transaction commitment. Al-
though CoSi is not a consensus protocol, ByzCoin imple-
ments Byzantine consensus using CoSi signing rounds to
make PBFT’s prepare and commit phases scalable.
PBFT normally assumes a well-deﬁned, closed group
of replicas, conﬂicting with Bitcoin’s open membership
and use of proof-of-work to resist Sybil attacks [23].
ByzCoin addresses this conﬂict by forming consensus
groups dynamically from windows of recently mined
blocks, giving recent miners shares or voting power
proportional to their recent commitment of hash power.
Lastly, to reduce transaction processing latency we adopt
the idea from Bitcoin-NG [24] to decouple transaction
veriﬁcation from block mining.
Experiments with a prototype implementation of Byz-
Coin show that a consensus group formed from approxi-
mately the past 24 hours of successful miners (144 min-
ers) can reach consensus in less than 20 seconds, on
blocks of Bitcoin’s current maximum size (1MB). A
larger consensus group formed from one week of suc-
cessful miners (1008) reached consensus on an 8MB
block in 90 seconds, showing that the systems scales
both with the number of participants and with the block
size. For the 144-participant consensus group, with a
block size of 32MB, the system handles 974 transac-
tions per second (TPS) with a 68-second conﬁrmation la-
tency. These experiments suggest that ByzCoin can han-
dle loads higher than PayPal and comparable with Visa.
ByzCoin is still a proof-of-concept with several lim-
itations. First, ByzCoin does not improve on Bitcoin’s
proof-of-work mechanism; ﬁnding a suitable replace-
ment [4, 28, 37, 58] is an important but orthogonal area
for future work. Like many BFT protocols in prac-
tice [15, 32], ByzCoin is vulnerable to slowdown or tem-
porary DoS attacks that Byzantine nodes can trigger. Al-
though a malicious leader cannot violate or permanently
block consensus, he might temporarily exclude minority
sets (< 1
3) of victims from the consensus process, depriv-
ing them of rewards, and/or attempt to censor transac-
tions. ByzCoin guarantees security only against attack-
ers who consistently control less than a third (not 50%)
of consensus group shares – though Bitcoin has analo-
gous weaknesses accounting for selﬁsh mining [25].
In this paper we make the following key contributions:
• We use collective signing [54] to scale BFT protocols
to large consensus groups and enable clients to verify
operation commitments efﬁciently.
• We demonstrate experimentally (§4) that a strongly-
consistent cryptocurrency can increase Bitcoin’s
throughput by two orders of magnitude, with a trans-
(§3)
• We present
the ﬁrst demonstrably practical
Byzantine consensus protocol supporting not only
static consensus groups but also dynamic membership
proportional to proof-of-work as in Bitcoin.
action conﬁrmation latency under one minute.
• We ﬁnd through security analysis (§5) that ByzCoin
can mitigate several known attacks on Bitcoin pro-
vided no attacker controls more than 1
4 of hash power.
2 Background and Motivation
This section ﬁrst outlines the three most relevant areas
of prior work that ByzCoin builds on: cryptocurrencies
such as Bitcoin and Bitcoin-NG, Byzantine fault toler-
ance (BFT) principles, and collective signing techniques.
2.1 Bitcoin and Variations
Bitcoin. At the core of Bitcoin [47] rests the so-called
blockchain, a public, append-only database maintained
by miners and serving as a global ledger of all transac-
tions ever issued. Transactions are bundled into blocks
and validated by a proof-of-work. A block is valid if its
cryptographic hash has d leading zero bits, where the dif-
ﬁculty parameter d is adjusted periodically such that new
blocks are mined about every ten minutes on average.
Each block includes a Merkle tree [44] of new transac-
tions to be committed, and a cryptographic hash chaining
to the last valid block, thereby forming the blockchain.
Upon successfully forming a new block with a valid
proof-of-work, a miner broadcasts the new block to the
rest of the miners, who (when behaving properly) accept
the new block, if it extends a valid chain strictly longer
than any they have already seen.
Bitcoin’s decentralized consensus and security derive
from an assumption that a majority of the miners, mea-
sured in terms of hash power or ability to solve hash-
based proof-of-work puzzles, follows these rules and al-
ways attempts to extend the longest existing chain. As
soon as a quorum of miners with the majority of the
network’s hash power approves a given block by min-
ing on top of it, the block remains embedded in any fu-
ture chain [29]. Bitcoin’s security is guaranteed by the
fact that this majority will be extending the legitimate
chain faster than any corrupt minority that might try to
rewrite history or double-spend currency. However, Bit-
coin’s consistency guarantee is only probabilistic, which
leads to two fundamental problems.
First, multiple miners might ﬁnd distinct blocks with
the same parent before the network has reached consen-
sus. Such a conﬂict is called a fork, an inconsistency that
is temporarily allowed until one of the chains is extended
yet again. Subsequently, all well-behaved miners on the
shorter chain(s) switch to the new longest one. All trans-
actions appearing only in the rejected block(s) are invalid
and must be resubmitted for inclusion into the winning
blockchain. This means that Bitcoin clients who want
high certainty that a transaction is complete (e.g., that
280  25th USENIX Security Symposium 
USENIX Association
2
they have irrevocably received a payment) must wait not
only for the next block but for several blocks thereafter,
thus increasing the time interval until a transaction can
be considered complete. As a rule of thumb [47], a block
is considered as permanently added to the blockchain af-
ter about 6 new blocks have been mined on top of it, for
a conﬁrmation latency of 60 minutes on average.
Second, the Bitcoin block size is currently limited to
1 MB. This limitation in turn results in an upper bound
on the number of transactions per second (TPS) the Bit-
coin network can handle, estimated to be an average
of 7 TPS. For comparison, Paypal handles 500 TPS and
VISA even 4000 TPS. An obvious solution to enlarge
Bitcoin’s throughput is to increase the size of its blocks.
Unfortunately, this solution also increases the probability
of forks due to higher propagation delays and the risk of
double-spending attacks [53, 30, 36]. Bitcoin’s liveness
and security properties depend on forks being relatively
rare. Otherwise, the miners would spend much of their
effort trying to resolve multiple forks [31, 17], or in the
extreme case, completely centralize Bitcoin [24]
Bitcoin-NG. Bitcoin-NG [24] makes the important ob-
servation that Bitcoin blocks serve two different pur-
poses: (1) election of a leader who decides how to re-
solve potential inconsistencies, and (2) veriﬁcation of
transactions. Due to this observation, Bitcoin-NG pro-
poses two different block types: Keyblocks are generated
through mining with proof-of-work and are used to se-
curely elect leaders, at a moderate frequency, such as ev-
ery 10 minutes as in Bitcoin. Microblocks contain trans-
actions, require no proof-of-work, and are generated and
signed by the elected leader. This separation enables
Bitcoin-NG to process many microblocks between the
mining of two keyblocks, enabling transaction through-
put to increase.
Bitcoin-NG, however, retains many drawbacks of Bit-
coin’s consistency model. Temporary forks due to near-
simultaneous keyblock mining, or deliberately intro-
duced by selﬁsh or malicious miners, can still throw the
system into an inconsistent state for 10 minutes or more.
Further, within any 10-minute window the current leader
could still intentionally fork or rewrite history and inval-
idate transactions. If a client does not wait several tens
of minutes (as in Bitcoin) for transaction conﬁrmation,
he is vulnerable to double-spend attacks by the current
leader or by another miner who forks the blockchain.
Although Bitcoin-NG includes disincentives for such be-
havior, these disincentives amount at most to the “mining
value” of the keyblock (coinbase rewards and transaction
fees): Thus, leaders are both able and have incentives to
double-spend on higher-value transactions.
Consequently, although Bitcoin-NG permits higher
transaction throughput, it does not solve Bitcoin’s con-
sistency weaknesses. Nevertheless, Bitcoin-NG’s decou-
pling of keyblocks from microblocks is an important
idea that we build on in Section 3.6 to support high-
throughput and low-latency transactions in ByzCoin.
2.2 Byzantine Fault Tolerance
The Byzantine Generals’ Problem [39, 49] refers to the
situation where the malfunctioning of one or several
components of a distributed system prevents the latter
from reaching an agreement. Pease et al. [49] show that
3 f + 1 participants are necessary to be able to tolerate f
faults and still reach consensus. The Practical Byzantine
Fault Tolerance (PBFT) algorithm [14] was the ﬁrst ef-
ﬁcient solution to the Byzantine Generals’ Problem that
works in weakly synchronous environments such as the
Internet. PBFT offers both safety and liveness provided
that the above bound applies, i.e., that at most f faults
among 3 f +1 participants occur. PBFT triggered a surge
of research on Byzantine replication algorithms with var-
ious optimizations and trade-offs [1, 16, 38, 32].
Every round of PBFT has three distinct phases.
In
the ﬁrst, pre-prepare phase, the current primary node or
leader announces the next record that the system should
agree upon. On receiving this pre-prepare, every node
validates the correctness of the proposal and multicasts
a prepare message to the group. The nodes wait until
they collect a quorum of (2 f + 1) prepare messages and
publish this observation with a commit message. Finally,
they wait for a quorum of (2 f + 1) commit messages to
make sure that enough nodes have recorded the decision.
leader to begin each
round and proceeds if a two-thirds quorum exists; con-
sequently, the leader is an attack target. For this reason
PBFT has a view-change protocol that ensures liveness
in the face of a faulty leader. All nodes monitor the
leader’s actions and if they detect either malicious be-
havior or a lack of progress, initiate a view-change. Each
node independently announces its desire to change lead-
ers and stops validating the leader’s actions. If a quorum