malicious ﬁles. The sample collection was done from 2016 to
2017.
We veriﬁed the hash value of the collected ﬁles so that there
were no duplicates, and we also excluded the ﬁles which did
not have VBA macros. In the next step, we double-checked the
detection results of the VirusTotal [32] and the VBA macros
of ﬁles to determine the benign and malicious dataset, so
that the only samples using VBA macros as an attack vector
were included in the malicious dataset. As a result of the data
collection, we obtained 2,537 ﬁles in which 773 are benign,
and 1,764 are malicious. Table II displays the summary of our
dataset with the average ﬁle size of each sample set. According
to our observation, malicious ﬁles tend to be much smaller
in terms of ﬁle size, which means that most of the attacks
using VBA macros work to download malware from a remote
address and execute it, and do not actually include malware
in the ﬁle itself [15].
Although VirusTotal includes the results of about 60 differ-
ent AV vendors who take advantage of individual detection
mechanism, it is not 100% accurate. Because there is no
conclusive criterion to determine a sample’s maliciousness, we
set a threshold to divide samples into malicious/benign training
dataset. We set this threshold loosely to prevent the training
samples from being mislabeled. In detail, we labeled a sample
as malicious if more than 25 vendors detected it as malicious,
and labeled it as benign if less than or equal to 2 vendors
marked it as malicious. Every sample in between was manually
inspected by three security researchers who specialize in VBA
macros.
105
104
103
h
t
g
n
e
l
e
d
o
C
0
200
400
# samples
600
800
(a) Code length distribution of total 877 non-obfuscated VBA
macros which are randomly selected from collected samples.
The code length of non-obfuscated VBA macros is uniformly
distributed that has no tendency between the samples.
105
104
103
h
t
g
n
e
l
e
d
o
C
0
200
400
# samples
600
800
(b) Code length distribution of total 877 obfuscated VBA macros.
We can see the tendency that a group of VBA macros form a
horizontal line which have similar code length of 1500, 3000, and
15000.
Fig. 5: Code length distribution of (a) non-obfuscated, and (b)
obfuscated VBA macro samples. The x-axis indicates arbitrary
sample in each dataset.
B. Preprocessing
The next step for detecting obfuscation is preprocessing. By
preprocessing we mean to extract VBA macros from the col-
lected MS Ofﬁce document ﬁles, remove small (insigniﬁcant)
and duplicated macros, and label training samples.
To obtain the VBA macros from Microsoft Ofﬁce document
ﬁle, we need to open the document ﬁle directly or parse the
structure of OpenXML (OLE in the previous version of MS
Ofﬁce 2003). Given that malicious VBA macros are often
executed when documents are opened, we use oletools in the
extraction of VBA macro codes [33]. Oletools is an open
source Python package to analyze Microsoft Ofﬁce document
ﬁles. It allows us to easily extract the VBA macros without
opening the ﬁle.
Although we split our dataset into benign and malicious
the relationship between
to provide the information about
maliciousness and obfuscation, the goal of this paper is to
detect obfuscation in VBA macros. VBA macros in benign
495
TABLE II: Summary of collected MS Ofﬁce document ﬁles.
TABLE IV: Summary of 15 static features used in our pro-
posed method.
Avg. size
Collected from
Features
Description
Group
Benign dataset
(773 in total)
Malicious dataset
(1,764 in total)
# by type
Word
Excel
75
1,410
698
354
Total
1,485
1,052
1.1MB
Google
0.06MB
[30]–[32]
TABLE III: Summary of VBA macros extracted from MS
Ofﬁce ﬁles.
Group
# ﬁles
# macros
# obfuscated macros
Benign dataset
Malicious dataset
Total
773
1,764
2,537
3,380
832
4,212
58 (1.7%)
819 (98.4%)
877
datasets could be obfuscated, and vice versa. Therefore, we
manually inspected and marked the macros with obfuscating
features (described in Section III) as “obfuscated”.
In this manual labeling process, we observed that the macros
of less than 150 bytes are not meaningful, either malicious
or benign, because they are only made up of comments
or practice code that had no particular purpose. Therefore,
insigniﬁcant macros with too short of a length were excluded
from our dataset.
Table III shows that the majority of malicious VBA macros
are obfuscated. Only 1.7% of the benign macros are obfus-
cated, whereas 98.4% of the malicious macros are obfuscated.
With a huge gap of obfuscation rates in each of the dataset
group, we veriﬁed the obfuscation tendency in benign and
malicious macros: malicious macros are more likely to be
obfuscated.
Also, there is a large gap in the number of extracted VBA
macros. As explained in the data collection step, we already
eliminated the duplicates ones, after collecting the Microsoft
Ofﬁce document ﬁles. But there is still a possibility that the
ﬁles have macro duplicates. We found that there were about
5k macros for the overall dataset in this process of duplicates
elimination. Finally, the number of macros was narrowed down
to 3,380 and 832 respectively, in the benign and malicious
dataset.
In the case of the benign dataset, the number of macros
increases to more than 4 times as many as the number of
ﬁles, because one ﬁle could have several macros. However, in
the case of a malicious dataset, even though we only collected
ﬁles that contain more than one macro in the data collection
step, the number of macros is halved compared to the number
of ﬁles. This means that most of the malicious documents
which contains VBA macros are using the same macros.
In addition to this, we also examined the code length of
the macros belonging to the non-obfuscated and obfuscated
V1
V2
V3
V4
V5
V6
V7
V8
V9
V10
V11
V12
V13
V14
V15
# of chars in code except comments
# of chars in comments
avg. length of words
var. length of words
appearance frequency of string operators
% of chars belonging to string
avg. length of strings in code
% of text functions called
% of arithmetic functions called
% of type conversion functions called
% of ﬁnancial functions called
% of functions with rich functionality called
Shannon entropy of the ﬁle
avg. length of identiﬁers
var. length of identiﬁers
Used In:
[24], [26]
[26]
[26]
[26]
[24], [26]
[26], [34]
group. The results are shown in Figure 5 (a) and (b). Each
ﬁgure displays the code length distribution in normal and
obfuscated VBA macros, respectively. Figure 5 (a) is uni-
formly distributed throughout, this could also be evidence that
our dataset is well-collected, including the informative benign
macros. Alternatively, in Figure 5 (b), it can be seen that the
macros are somewhat grouped to form several horizontal lines.
Generally, we can expect that obfuscated code is reproduced
with a custom obfuscater with different options. Especially
in the malicious case, malware writers are expected to make
variations to avoid the signature-based detection of AVs. We
can interpret the results shown in Figure 5 (b), as the result
of this expectation. This means that there are a large number
of macros which have a similar code length even after the
duplicate elimination.
C. Feature selection
We summarized the types of obfuscation techniques in Sec-
tion III. After observing the results of applying the obfuscation
techniques, we built a set of features based on each of the
obfuscation techniques. The proposed features are depicted in
Table IV. Each of the features targets obfuscation, and some
of them are from related studies. Given that four types of
techniques have distinct characteristics, different combinations
of features are required for an effective detection.
1) Detection of O1 (Random obfuscation): The O1 obfus-
cation technique randomizes the identiﬁer in the macro code.
The identiﬁer refers to both the function names and variable
names, and O1 can be applied to both of them. As a result of
O1 obfuscation, the randomness of the macro code increases.
To measure the randomness of macros, we use the Shannon
entropy of the ﬁle as the feature V13 [35]. The computation
of the entropy is performed on the basis of each character
of the macro code. If pi is considered to be the rate at which
496
character i appears in the entire macro code, entropy H follows
Shannon’s Entropy formula.
H(X) = − (cid:2)
pi log2 pi
i
We use 2 additional features, V14 and V15 to capture
the characteristics of O1. Because the identiﬁers with O1
techniques have various lengths, we calculate the length of
the identiﬁer. V14 is the average length of identiﬁers used in
macro codes, V15 is the variance of each identiﬁer length.
2) Detection of O2 (Split obfuscation): In the VBA macros
with O2, more strings and string operators are observed than
normal macros for the purpose of avoiding the detection of
AVs. It also contains many unused dummy strings. For this
type of obfuscation, we use V5-V7. V5 contains the number
of occurrences of string operators such as ‘+’, ‘=’ or ‘&’,
which are used for string concatenation. Feature V6 is % of
characters belonging to strings, and V7 calculates the average
length of strings. These three features can indicate the unusual
appearance of strings in obfuscated macros.
3) Detection of O3 (Encoding obfuscation): Encoding ob-
fuscation is related to the use of various function calls. It is
often used with O2, hiding keywords that can be detected
by AVs, e.g., URL or .exe. It also uses infrequent ﬁnancial
functions which are only used for accounting and ﬁnancial
calculations to create more varied variants. To capture the
characteristics of O3, we use V8-V11, while attempting to
cover as many types as possible. The examples of the functions
included for each feature are listed as follows. The rest of
functions can be found by referring to the VBA language
speciﬁcation [27].
• V8 (text functions): Asc(), Chr(), Mid(), Join(), InStr(),
Replace(), Right(), StrConv(), etc.
• V9 (arithmetic functions): Abs(), Atn(), Cos(), Exp(),
Log(), Randomize(), Round(), Tan(), Sqr(), etc.
• V10 (type conversion functions): CBool(), CByte(),
CChar(), CStr(), CDec(), CUInt(), CShort(), etc.
• V11 (ﬁnancial functions): DDB(), FV(), IPmt(), PV(),
Pmt(), Rate(), SLN(), SYD(), etc.
4) Detection of O4 (Logic obfuscation): O4 changes the
entire shape of the targeted code by inserting dummy codes
and reordering the code. As we mentioned in Section III, code
reordering does not affect our proposed method as we use
static features. We use V1-V4 to capture the dummy code
insertion, which leads to an increase in code size. Before
describing each feature, we use “words” to represent the units
delimited by whitespace and VBA programming language
symbols. “words” is used as a part of the features to detect
maliciousness in [24]; it is also included in our features as
V3 and V4 because it is a discriminant feature for dividing