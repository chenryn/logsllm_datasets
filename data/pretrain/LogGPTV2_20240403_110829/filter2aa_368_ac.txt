### 特权与内核攻击演示

#### 1. 内核攻击演示
我们将通过编写一个Linux内核模块的形式来展示从内核空间发起的攻击。尽管如此，仍然有可能使用lrmi库并允许中断将BIOS数据区复制到内存中的其他位置。或者，可以通过修改寄存器中的部分内存来获取内容，因为通过精心构造的数据结构输入参数来操纵物理内存是被允许的。

#### 2. 通用用户空间针对*nix系统预启动认证密码的攻击
Solaris、*BSD和GNU/Linux提供了一个特殊的设备，可以直接访问物理内存，至少在读模式下：
- 字符设备 `/dev/mem`：这是一个对系统物理RAM的映射。我们只需要以读模式打开 `/dev/mem`，将其第一页进行mmap，并从地址0x041e开始检索BIOS键盘缓冲区的内容。
- 类似地，我们可以使用字符设备 `/dev/kmem` 从用户空间直接检索内核内存中的BIOS键盘缓冲区。
- 最后，如果 `/proc/kcore` 可用，我们也可以从伪文件系统 `/proc` 中检索相同的信息。这个文件包含与 `/dev/kmem` 相同的信息（即内核内存），但具有核心文件的结构。

通过这些方法，我们成功地从Unix系统的用户空间提取了BIOS键盘缓冲区的内容。我们基于这些实验编写了一个工具（参见附录D: generic.unix.sploit.c）。

#### 3. 从内核空间提取明文密码
本节将重点讨论从内核空间提取明文密码的方法，仅限于GNU/Linux系统。
- 首先，我们验证BIOS键盘缓冲区在内存中的位置0xC000041E处存在。
- 我们编写了一个Linux内核模块形式的漏洞利用程序（参见附录E: ksploit.c），它会在 `/proc` 伪文件系统中添加一个新的条目，显示BIOS键盘缓冲区中的任何密码。

#### 4. 重启受预启动认证保护的计算机
在没有控制台访问权限的情况下重启受预启动认证保护的计算机，对于攻击者来说可能非常有用。例如，可以用来引导同一计算机上的另一个可能更弱的操作系统，或传递特殊的内核参数等。

##### 4.1 无需磁盘加密时远程重启受预启动认证保护的机器
- 如果启动时要求的密码不用于解密硬盘的任何部分，则绕过引导加载程序保护相对容易。具有root权限的攻击者可以简单地替换当前的引导加载程序，重新配置相同的引导加载程序而不设置密码，或者直接修补引导加载程序中的密码检查例程。
- 例如，修补lilo使其安装一个新的引导加载程序，而无需修改其配置文件，从而立即启动第一个可用的有效内核，且不提示密码。

##### 4.2 完全加密系统分区时远程重启受预启动认证保护的机器
- 在这种情况下，我们需要模拟键盘输入来绕过预启动认证。具体方法包括使用键盘仿真技术来自动输入密码，从而实现重启。

### 结论
通过上述方法，我们展示了如何从用户空间和内核空间提取明文密码，并如何利用这些信息绕过预启动认证。这对于理解和防范此类攻击具有重要意义。