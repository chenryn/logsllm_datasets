privileges,
and
secondly
demonstrate
an
attac
k
from
Kernel
Land
in
the
form
of
a
Lin
ux
Kernel
Mo
dule.
9
It
ma
y
nonetheless
b
e
p
ossible
to
use
the
lrmi
library
and
allo
w
ed
in
terruptions
to
cop
y
the
BIOS
Data
Area
to
an
other
place
in
memory
.
Or
retriev
e
parts
of
memory
in
mo
died
registers,
since
manipulating
ph
ysical
memory
via
the
input
parameters
crafted
in
to
this
datastructure
is
allo
w
ed...
3.1
Generic
userland
exploits
against
pre-b
o
ot
authen
tication
passw
ords
under
*nix
Solaris,
*BSD
and
GNU/Lin
ux
pro
vide
a
sp
ecial
device
to
access
ph
ys-
ical
memory
directly
,
at
least
in
read
mo
de
10
:
the
c
haracter
device
/dev/mem.
Since
it
is
really
a
mapping
of
the
ph
ysical
RAM
of
the
system,
all
w
e
need
to
do
is
to
op
en
/dev/mem
in
read
mo
de,
mmap()
its
rst
page
and
retriev
e
the
con
ten
t
of
the
BIOS
k
eyb
oard
buer
start-
ing
from
address
0x041e
:
cf
:
gur
e
9.
Fig.
9.
Plain
text
passw
ord
leak
age
via
/dev/mem
under
*nix.
In
a
similar
w
a
y
,
w
e
could
retriev
e
the
BIOS
k
eyb
oard
buer
from
the
k
er-
nel
memory
itself,
from
userland,
using
the
c
haracter
device
/dev/kmem
11
:
cf
:
gur
e
10.
Fig.
10.
Plain
text
passw
ord
leak
age
via
/dev/kmem
under
GNU/Lin
ux.
Finally
,
w
e
could
retriev
e
the
same
information
from
the
pseudo
lesys-
tem
/pro
c
if
/pro
c/k
core
is
a
v
ailable
12
.
This
le
presen
ts
the
same
in-
formation
as
/dev/kmem,
the
k
ernel
memory
(whic
h
w
e
kno
w
con
tains
a
cop
y
of
the
BIOS
Data
Area
from
paragraph
1),
but
has
the
structure
of
a
core
le.
It
is
really
just
a
matter
of
nding
the
righ
t
oset
in
the
core
le
(0x141e)
:
cf
:
gur
e
11.
Ev
en
tually
,
w
e
managed
to
extract
the
con
ten
t
of
the
BIOS
k
eyb
oard
buer
from
userland
under
Unix
in
a
generic
w
a
y
.
W
e
co
ded
a
to
ol
based
10
Under
Op
enBSD,
this
device
is
in
read
only
mo
de
ev
en
for
ro
ot,
if
securelev
el
is
set
to
secure
mo
de
2[6℄[7℄.
11
This
exp
erimen
t
is
run
under
a
Lin
ux
k
ernel
v
ersion
2.6.22
with
the
standard
3GB/1GB
userland/k
erneland
split,
addresses
will
dier
amongst
*nix
a
v
ours
b
e-
cause
the
k
ernel
is
not
mmapp
ed
at
the
same
address.
12
It
is
enabled
b
y
default
on
most
GNU/Lin
ux
distributions.
Fig.
11.
Plain
text
passw
ord
leak
age
via
/pro
c/k
core
under
*nix.
on
those
exp
erimen
ts
(cf:
A
nnexe
D
:
generic.unix.sploit.c
)
:
cf
:
gur
e
12.
Fig.
12.
Our
generic
userland
exploit
running
under
*nix.
This
exploit
is
really
generic
:
it
w
orks
not
only
against
m
ultiple
pre-
b
o
ot
authen
tication
soft
w
are
13
,
but
also
amongst
virtually
an
y
Unix
14
running
under
x86
(there
is
no
BIOS
otherwise)
and
pro
viding
one
or
the
other
of
the
ab
o
v
e
men
tioned
device
driv
ers
or
the
/pro
c
pseudo
lesys-
tem
15
.
Once
co
v
ered
user
land
exploitation,
w
e
will
attempt
to
retriev
e
plain
text
passw
ords
from
the
k
ernel.
3.2
Doing
it
the
hard
w
a
y
:
retrieving
passw
ords
from
k
ernel
land
In
this
section,
w
e
will
fo
cus
on
GNU/Lin
ux
exploitation
only
,
from
a
k
ernel
land
scop
e.
13
cf:
A
nnexe
A.
14
T
ested
under
F
reeBSD
6.3,
Op
enBSD
4.0,
Op
enSolaris
5.11
and
sev
eral
GNU/Lin
ux
distributions
including
Gen
to
o
2006
and
Ubun
tu
Gutsy
.
15
Ev
en
secure
k
ernels
hardened
b
y
the
securit
y
patc
h
from
grsecurit
y[28℄
up
to
and
including
v
ersion
2.1.10
(curren
t)
are
vulnerable
to
these
attac
ks.
Let's
rst
of
all
v
erify
that
the
BIOS
Keyb
oard
buer
is
presen
t
in
mem-
ory
at
lo
cation
0xC000041E
16
:
cf
:
gur
e
13.
Fig.
13.
GNU/Lin
ux
k
ernel
debugging
rev
eals
plain
text
passw
ords.
W
e
ha
v
e
co
ded
an
exploit
in
the
form
of
a
Lin
ux
Kernel
Mo
dule
(cf:
A
nnexe
E
:
ksploit.c
)
whic
h
will
add
a
new
en
try
to
the
/pro
c
pseudo
lesystem
and
displa
y
an
y
passw
ord
presen
t
in
the
BIOS
k
eyb
oard
buer
:
cf
:
gur
e
14.
Fig.
14.
Our
Lin
ux
Kernel
Mo
dule
exploit
adding
a
le
con
taining
plain
text
passw
ords
under
/pro
c.
No
w
that
w
e
kno
w
ho
w
to
retriev
e
plain
text
passw
ords
from
pre-b
o
ot
authen
tication
soft
w
are
under
b
oth
Windo
ws
and
*nix
op
erating
sys-
tems,
w
e
will
presen
t
ho
w
to
use
that
information
leak
age
to
reb
o
ot
the
computer,
to
ac
hiev
e
a
full
securit
y
b
ypass
of
the
pre-b
o
ot
authen
tication
defense.
16
Here,
w
e
are
remotely
debugging
a
2.6.19
Lin
ux
k
ernel
running
under
Gen
to
o
2006
inside
V
m
w
are
W
orkstation
6.0
using
gdb
under
Ubun
tu[29℄.
This
k
ernel
is
congured
to
use
the
standard
3GB/1GB
userland/k
erneland
split.
4
Reb
o
oting
a
computer
protected
with
a
pre-b
o
ot
authen
tication
passw
ord,
without
console
access
Reb
o
oting
a
computer
can
b
e
helpful
to
an
attac
k
er
in
a
large
range
of
scenarios,
b
eing
it
to
b
o
ot
an
other
-p
ossibly
w
eak
er-
OS
hosted
on
the
same
computer
via
a
m
ulti-b
o
ot
b
o
otloader
lik
e
GNU
Grub
or
Lilo
in
order
to
extend
his
con
trol
o
v
er
the
mac
hine
,
to
pass
sp
ecial
k
ernel
parameters
to
the
OS
at
b
o
ot
time
17
,
to
load
a
mo
died
k
ernel
image,
or
an
y
other
attac
k
scenario[30℄[31℄...
Ev
en
if
an
attac
k
er
is
able
to
retriev
e
the
passw
ord
to
a
pre-b
o
ot
au-
then
tication
pro
cess,
will
he
b
e
able
to
reb
o
ot
the
computer
?
Will
he
b
e
able
to
do
it
without
ph
ysical
access
to
the
console
?
Can
he
ev
en
b
e
able
to
reb
o
ot
it
without
kno
wing
the
passw
ord
in
some
cases
?
Those
are
the
questions
w
e
will
try
to
answ
er
in
this
section.
In
this
section,
w
e
fo
cus
exclusiv
ely
on
attac
ks
against
b
o
otloaders.
The
general
metho
dologies
describ
ed
can
b
e
adapted
to
BIOS
passw
ords
lik
e-
wise,
but
they
require
some
fair
amoun
t
-
read
non
trivial
fair
amoun
t-
of
rev
erse
engineering[32℄
and
patc
hing[31℄
on
the
BIOS
ash
R
OM
and
are
therefore
to
o
v
endor
sp
ecic
to
b
e
ab
orded
in
this
article.
F
rom
no
w
on,
w
e
also
assume
the
attac
k
er
is
gran
ted
enough
privileges
to
mo
dify
the
b
o
otloader.
4.1
Remotely
reb
o
oting
a
pre-b
o
ot
authen
tication
protected
mac
hine
without
disk
encryption
via
simple
patc
hing
of
the
b
o
otloader
If
the
passw
ord
ask
ed
at
b
o
ot
time
is
not
used
to
decrypt
an
y
p
ortion
of
the
hard
disk
18
,
then
b
ypassing
the
b
o
otloader
protection
is
relativ
ely
easy
:
an
attac
k
er
with
ro
ot
privileges
can
simply
replace
the
curren
t
b
o
otloader
with
a
new
one,
recongure
the
v
ery
same
b
o
otloader
with-
out
a
passw
ord,
or
if
no
conguration
le
is
presen
t
on
the
lesystem
and
the
b
o
otloader
is
really
custom,
patc
h
the
passw
ord
c
hec
king
routine
in
the
b
o
otloader
itself...
It
is
for
instance
quite
easy
to
patc
h
lilo
so
that
it
b
o
ots
without
tim-
out,
without
v
erifying
the
c
hec
ksums
of
its
conguration
les,
or
without
prompting
a
passw
ord.
In
gur
e
15,
w
e
ha
v
e
patc
hed
lilo
so
that
it
in-
stalls
a
new
b
o
otloader,
without
mo
difying
its
conguration
les
19
,
to
b
o
ot
the
rst
v
alid
k
ernel
a
v
ailable
immediatly
,
without
asking
for
a
passw
ord.
F
or
more
details
on
patc
hing
b
o
otloaders,
the
article
Hacking
17
lik
e
reb
o
oting
GNU/Lin
ux
in
single
mo
de
b
y
app
ending
'init=/bin/sh'
or
suc
h
to
the
grub
command
line.
18
...
lik
e
in
b
o
otloaders
a
la
Grub
or
Lilo.
19
in
particular
the
/b
o
ot/.map
le,
con
taining
the
meat
of
the
conguration
at
b
o
ot
time.
Grub
for
fun
and
pr
ot
[30℄
b
y
Co
olQ
in
issue
63
of
Phrac
k
magazine
is
a
go
o
d
starting
p
oin
t.
Fig.
15.
P
atc
hed
lilo
reb
o
oting
without
prompting
for
a
passw
ord.
In
this
simple
case,
kno
wledge
of
the
pre-b
o
ot
authen
tication
passw
ord
is
not
required,
since
the
whole
pre-b
o
ot
authen
tication
sc
hema
is
b
ypassed
thanks
to
the
patc
h.
Let
us
therefore
no
w
fo
cus
on
the
less
trivial
case
of
encrypted
partitions...
4.2
Remotely
reb
o
oting
a
pre-b
o
ot
authen
tication
protected
mac
hine
with
fully
encrypted
system
partition
via
k
eyb
oard
em
ulation
:
b
o
otloader