### 漏洞挖掘过程概述

很久之前，在一次黑盒测试中发现了一个有趣的漏洞。以下是详细的过程记录。

#### 前置知识
- 相关文章链接：
  - [文章1](https://xz.aliyun.com/t/9168)
  - [文章2](https://xz.aliyun.com/t/9591)
  - [文章3](https://xz.aliyun.com/t/9593)
  - [文章4](https://xz.aliyun.com/t/9592)
  - [文章5](https://xz.aliyun.com/t/9594)
  - [文章6](https://xz.aliyun.com/t/9595)
  - [文章7](https://xz.aliyun.com/t/9597)
  - [文章8](https://xz.aliyun.com/t/9598)
  - [文章9](https://xz.aliyun.com/t/9599)
  - [文章10](https://xz.aliyun.com/t/9600)
  - [文章11](https://xz.aliyun.com/t/9601)
  - [文章12](https://xz.aliyun.com/t/9602)
  - [文章13](https://xz.aliyun.com/t/9603)
  - [文章14](https://xz.aliyun.com/t/9604)
  - [文章15](https://xz.aliyun.com/t/9605)

- Y4er的文章主页：[Y4er的主页](https://xz.aliyun.com/u/12258)

建议仔细阅读上述文章，尤其是Y4er的文章，以全面理解相关背景和技术细节。

### 0x01 起始阶段

在获取到一个压缩包后，其中包含一个客户端程序。由于担心潜在的安全风险（如反向攻击或钓鱼），并未直接运行该程序，而是查看了其配置文件和日志。在配置文件中找到了一组加密的账号密码，初步判断如果正确输入这些信息，应能成功登录。

环境限制使得无法在物理机上安装虚拟机来安全地运行该程序。因此，首先使用`PEID`工具检查程序类型。意外的是，在拖拽过程中不小心启动了程序。尽管验证了账号密码的存在，但这种非预期的操作引发了恐慌。随后使用360杀毒软件扫描，发现两个DLL文件被标记为恶意。经过进一步调查，确认这两个DLL是多年前就被标记的老病毒，并未针对当前场景设计。最终决定正常运行程序，确认账号可以登录并拥有某部门管理员权限。

### 0x02 分析阶段

登录后发现流量经过加密，直接爆破不可行。通过代码分析定位到登录按钮的点击事件处理逻辑。具体流程如下：

1. `btnLogin_Click` -> `OnLoginEvent` -> `SendLoginMsg`
2. `UserInfo`对象封装用户数据，传递给`MsgSysInfo`对象。
3. 使用`zip`对象调用`GetBuffer`方法处理数据，最终由`Login`方法发送。

`YYSharpZip`类中的`GetBuffer`方法涉及以下步骤：
- 序列化操作 (`BinaryFormatter.Serialize`)
- 数据压缩 (`CompressToByte`)
- 数据加密 (`EncryptData`)

服务端接收数据后的处理流程推测为：
- 接收消息 -> 解密 -> 反序列化 -> 获取登录信息

基于此，猜测存在反序列化漏洞。利用`Ysoserial.NET`生成payload，本地测试成功弹出计算器。

### 0x03 攻击阶段

将生成的payload发送至目标服务器，虽然最初未能成功执行，但在尝试了几种不同的payload后，终于实现了命令执行。然而，写文件和回显功能未能正常工作。幸运的是，发现服务器上的其他端口运行着IIS，通过默认路径上传ASPX文件，最终获得了web shell。

### 0x04 总结

该程序广泛应用于多个系统，通过自带的加密机制保护payload，使得整个攻击过程未被检测到。有趣的是，内网扫描被发现后，防御人员采取的措施仅仅是删除某个特征文件，而没有更深入的排查。

希望这份优化后的文档能够帮助您更好地理解和复现这一漏洞挖掘过程。