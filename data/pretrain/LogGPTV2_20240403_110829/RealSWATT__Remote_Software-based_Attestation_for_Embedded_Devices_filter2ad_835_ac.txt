able to speed up the execution of the attestation function, the at-
tacker can circumvent the timing checks that are based on hardware
limitations and potentially evade the remote attestation.
Therefore, the attestation scheme must be designed such that
an attacker cannot benefit from multiple cores. Further, attesta-
tion relies on a hashing function. The hashing method must be
designed such that it cannot be accelerated by parallelization, i.e.,
using multiple processor cores. We tackle this challenge by using a
Merkle–Damgård construction [36] as this popular hashing method
CPU0CPU1SOCAttestationRealtime processesBlock 1Block 2...Block nIVfffffinalizationSession 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2894fulfills this requirement. The functionality is shown in Figure 3: The
process starts with an initialization vector. The hash is calculated
by adding block by block, where in each step the next block is
added. In order to add the next block, the previous result is taken
as input. This is a strictly sequential process. Hence, the process
cannot benefit from parallelization or multiple processor cores [3].
Popular hashing methods using the Merkle–Damgård construction
are, for instance SHA-1 and SHA-2 [37].
Optimality of Hash Function Implementation. As security of
software-based attestation relies on the computational capability
and timing threshold, i.e., the execution speed of the attestation
function, it must be ensured that the implementation of the attes-
tation function is optimal and cannot be significantly accelerated.
Otherwise, if the attacker is able to generate a valid hash, the saved
time can be exploited for malicious activity. RealSWATT addresses
this challenge by leveraging built-in hardware modules if available
(as is the case for our target architectures) or well-studied hash al-
gorithms. RealSWATT is not limited to a certain hash function: any
secure hashing method that fulfills the Merkle-Damgård scheme
is suitable for our attestation approach. For example, the popular
SHA-2 hash function fulfills this requirement, which we also use
in our implementation in Section 6 and case study in Section 7.
For platforms without hardware support, we study their security
regarding attacks against the hash function in detail in Section 8.3.
Empty memory. As memory that is not covered by the attesta-
tion process could be used by an attacker, all executable memory
has to be covered by the attestation process. Furthermore, an at-
tacker could compress the data stored on the device in order to
free up memory which then can be used to store malicious code.
RealSWATT prevents this as its continuous attestation constantly
monitors all executable memory. As shown in Section 7, continuous
attestation induces strict timing requirements. Deviations, e.g., due
to the need for decompression, make the attestation fail.
Offloading. An attacker could also offload attestation work to
another device. In our attacker model in Section 4, we describe a
remote attacker and excluded the scenario in which a local attacker
is able to introduce more computing power into the attested de-
vice. However, the attacker could offload the attestation task to
another powerful device thereby breaking the attestation scheme.
Due to the longer and varying transmission time this would not be
detected by the verifier. To tackle this issue, we introduce an IoT
gateway that monitors all traffic from and to the network with the
attested devices. Such security gateways are a common measure
in commercial and industrial networks. But such filters can also
be added to routers for small business and home networks. We
elaborate on this network architecture in Section 5.3.
In the following, we will explain the attestation scheme and the
network architecture in detail.
5.2 Attestation Scheme
As mentioned in Section 5.1, we needed to consider and evaluate
several aspects in our design to create a practical software-based
attestation approach for realtime embedded devices. Common and
more advanced attestation methods like control-flow attestation [2]
are not applicable as they either interfere with the runtime (instru-
mentation), which conflicts with realtime constraints, or require
Figure 4: Protocol of the attestation process.
additional hardware like TrustZone. Thus, with RealSWATT, we
attest code and data regions of those legacy devices. A device can
have multiple partitions containing the executable code and data,
including device configuration. We hash those dedicated memory
areas based on the protocol shown in Figure 4: The verifier sends
a nonce to prevent replay-attacks to the prover. The prover uses
this nonce as an initialization vector for the hashing algorithm.
Hence, the attacker cannot start the attestation before the nonce is
known. Next, the prover calculates the hash of the memory region
that has to be attested, e.g., code or data sections. This concept is a
common and reliable method for remote attestation [10, 20, 40, 46].
We read all data from the attested partitions and feed it either to
the available hardware hashing module or into to the optimized
hashing algorithm. Usually all code and data sections are combined
and hashed, thus one single hash value represents the code and
data integrity of the device. It is also possible to limit the hashing
only to certain memory sections. This option, however, should be
used with care as it limits the appropriate state representation of
the embedded device.
The hash is then repeatedly computed and returned to the ver-
ifier. The hash calculation is chained and previous hash results
are feed into the next repetition. The verifier measures the time
tm between sending the nonce and receiving the response. If the
measured time is below the expected threshold time ts, i.e, tm < ts,
the device is assumed genuine, otherwise it has potentially been
compromised. This process is continuously repeated to ensure that
any compromise or malicious modification of the device is being
detected. Therefore, it is important that the hashing function has a
predictable runtime. If the runtime varies, this allows the attacker
to shift tasks to get computation time. This remains undetected, as
the verifier has to assume the worst-case runtime. The determina-
tion of an appropriate threshold is a key feature for software-based
attestation. In Section 7, we measure the execution time for the
attestation of a real-world device and describe how the threshold
time ts can be determined.
In a simple attestation protocol there exists a gap between send-
ing the resulting hash and receiving of the next nonce, which con-
sists of the network transmission time and the time of the verifier
to send the next nonce after verification. In order to close this time
gap between two successive attestation requests, in our solution
the verifier sends a second nonce while the prover is processing the
ProverVerifierNonce #1Response #1Nonce #2Response #2Nonce #3Verification...Repeated Hashingtm2=0, tm1<ts?Repeated HashingRepeated HashingNew IVNew IVNew IVVerificationtm1=0tm3=0, tm2<ts?Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2895previous attestation request (i.e., computing the hash). The second
nonce is received and temporarily stored in a queue. This allows the
prover to continuously process attestation requests and removes
the impact of network delays.
To do so, the verifier has to send the nonces such, that even under
worst-case network latency, the next attestation request arrives
before the previous attestation run is finished. Sending two nonces
without delay allows an adversary to simultaneously compute the
hash on other cores. Therefore, it is important to the send the
hash just-in-time. Given a time tatt to complete the attestation
and a network latency tr tt , the verifier has to send the next nonce
tatt −max(tr tt) to ensure that the next nonce arrives on time. Note,
that it is required tatt ≫ tr tt to guarantee correct attestation.
The nonce sent by the verifier serves both as a new initialization
vector and as a synchronization point. In a scenario with a long-
running attestation task with an one-time initialization only, side
effects like clock skews between devices would come into play.
By continuously sending nonces as new initialization vectors we
reliably synchronize verifier and prover.
The verifier checks the interval in which the results are returned
from the prover. If results are delayed or missing, a compromise can
be assumed and the verifier can react accordingly, e.g., by raising
an alarm or rebooting the prover to return to a trustworthy state.
This process, where the prover saves the next nonce in advance,
makes our attestation scheme independent from the transmission
time between prover and verifier. Even variances in the transmis-
sion time do not pose any problems, as long as the transmission
time is significantly shorter than the time required for the attes-
tation tatt ≫ tr tt . It is possible to configure the runtime of the
attestation by repeatedly executing the hashing function: the result
of the hashing is used as the initialization for the next hashing.
So, a long non-parallelizable row of executions is generated. This
makes it possible to adapt the duration of the attestation to the
actual requirements in transmission time and consider the process-
ing speed of the device. Because a potential attacker cannot offload
the computation to an external device and we carefully choose the
time intervals for attestation requests (sending the nonces) inter-
cepting the next nonce does not provide any benefit to an attacker.
In Section 7, we elaborate on how the attestation time can be con-
figured using a real-world example. If the worst-case transmission
time is significantly shorter than the execution time of the attes-
tation, the next nonce can safely arrive at the prover before the
previous attestation process finishes. Thus, there are no time gaps
between successive attestation requests. We call this approach con-
tinuous attestation, which is also a key aspect in enabling practical
software-based attestation.
Furthermore, our attestation method has several benefits with
regard to existing legacy embedded devices. Our attestation proto-
col is lightweight with a nonce of 4 B and an attestation report of
32 B. Thus, it causes only a slightly increased network load and is
suitable for low-speed IoT networks as discussed in Section 7.3.
Another aspect of RealSWATT is its realtime capability and ease
of integration, which we evaluated on real-world devices in Sec-
tion 7.5. As already shown in Figure 2 we exploit the availability of
a second core to handle the attestation process in parallel to real-
time operation. While the use of a second core allows to maintain
realtime capability it comes with its own set of challenges such as
the parallelization of the hash computation by two cores, which we
discussed to in Section 5.1 and in Section 8.
5.3 IoT Network Architecture
The usage of a dedicated network architecture allows reliable and
secure software-based attestation with varying transmission time
as described in Section 4. It consists of several parts: the attested
IoT devices, the central configuration and attestation server, and
the IoT gateway. This common network architecture allows to pre-
vent offloading attacks, i.e., moving the attestation task to external
devices.
Like many IoT devices nowadays, the attested devices communi-
cate over wireless communication (Wi-Fi, IEEE 802.15.4/ZigBee2,
Z-Wave3) with the configuration and device management server.
There are no strict requirements towards the connection speed,
transmission times, or jitter. In the RealSWATT attestation scheme,
the verifier is implemented in a central device and configuration
management server. This configuration and device management
server keeps the current configuration of the IoT devices and per-
forms the verification of the IoT devices. Hence, it is possible to
include each device configuration into the attestation and also de-
tect modifications in these configurations, even though the program
memory itself is not affected. The IoT gateway monitors external
communications and prevents a corrupted device to communicate
with external entities to offload the attestation routine and hence
break the attestation. Both the central device and configuration
management as well as IoT gateways are commonly deployed in
real-world networks as previously discussed in Section 4.1.
6 IMPLEMENTATION OF REALSWATT
We implemented RealSWATT on commercial off-the-shelf hardware
to show its general applicability. The prover was integrated into
FreeRTOS, which is a popular realtime operating system [30]. The
verifier was implemented on a Raspberry PI running Linux. The
verifier can also be implemented on other devices such as X86, the
only requirement is a connection to the IoT network and enough
computing resources to handle and measure the attestation requests.
We are using raw UDP packets for communication in order to reduce
side effects of the network and minimize communication overhead.
We implemented different use-cases for the prover (IoT device)
to show its broad applicability: a syringe pump, smart plug, a smoke
detector, and a smart light bulb. For the plug, smoke detector and
light bulb we have used a framework called ESPeasy4, which allows
to generate alternative firmware images for off-the-shelf IoT de-
vices powered by the ESP32 and includes code for peripherals such
as the smoke sensor. Event without this framework, integration
into existing off-the-shelf devices is generic and straightforward as
described in Section 6.3.
To evaluate the functionality, we integrated all components into
a real-world testbed consisting of the typical components of an
IoT network. We tested the RealSWATT attestation using a full
end-to-end example, consisting of a device being monitored by the
2https://zigbeealliance.org/
3https://z-wavealliance.org/
4https://espeasy.readthedocs.io/en/latest/
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2896verifier. The attested device is then being compromised, which the
verifier instantaneously detects.
In the following, we describe the main components of the imple-
mentation: (1) Prover and Verifier, (2) Testbed, and (3) Real-world
Implementations. Please note that this section only gives a general
overview. Implementation details like timing thresholds need to be
fine-tuned for typical embedded devices and their networks. We
evaluate and provide this details for our testbed in Section 7.
6.1 Prover and Verifier
We use the Espressif ESP32 system-on-chip (SoC) which is a popular
component of typical IoT devices, e.g., smart light bulbs and power
plugs [24] as it also integrates Bluetooth and Wi-Fi modules.
We have implemented the RealSWATT remote attestation method
using the popular FreeRTOS realtime operating system. FreeRTOS
can manage multiple processor cores and allows to attach processes
to a dedicated core. The scheduler then does not move the attached
processes across cores. We dedicate one core to the attestation
process. We have implemented the RealSWATT remote attestation
method using the popular FreeRTOS realtime operating system on
the ESP32. The ESP32 has two Tensilica Xtensa processor cores [25].
Since the attestation is scheduled on a dedicated core, the attestation
does not interfere with the realtime operation. Realtime operation
as well as attestation are handled by different cores and in parallel.
RealSWATT performs static attestation covering code and data
memory of the prover. This is achieved by including the program
and configuration data partition into the attestation requests. The
hashing is performed using the mbedtls5 library, which also sup-
ports hardware-supported hashing on the ESP32. In order to prevent
replay attacks or the usage of pre-computed results, each attestation
run is initialized using the nonce provided by the verifier. Continu-
ous attestation is realized using a queue. When the prover receives
a UDP packet containing a nonce from the verifier, the nonce is
written to a queue of limited size until it is handled by the prover.
This way, attestation runs are executed seamlessly after each other.
The result of the attestation is returned as a UDP-Packet to the
verifier.
The verifier implements the RealSWATT attestation protocol as
described in Section 5.2, sending nonces to the prover and handling
incoming attestation reports. We provide further implementation
details on the prover and verifier in Appendix A.1.
6.2 Testbed
To evaluate RealSWATT, we built a testbed of an IoT network as
sketched in Figure 1 consisting of IoT devices, a Wi-Fi access point
and a verifier. The IoT devices were implemented on NodeMCU