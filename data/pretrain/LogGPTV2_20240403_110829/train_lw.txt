in the current implementation, the value returned by
.br la_objclose ()
is ignored.
.ss la_preinit()
\&
.nf
.bi "void la_preinit(uintptr_t *" cookie );
.fi
.pp
the dynamic linker invokes this function after all shared objects
have been loaded, before control is passed to the application
(i.e., before calling
.ir main ()).
note that
.ir main ()
may still later dynamically load objects using
.br dlopen (3).
.ss la_symbind*()
\&
.nf
.bi "uintptr_t la_symbind32(elf32_sym *" sym ", unsigned int " ndx ,
.bi "                       uintptr_t *" refcook ", uintptr_t *" defcook ,
.bi "                       unsigned int *" flags ", const char *" symname );
.bi "uintptr_t la_symbind64(elf64_sym *" sym ", unsigned int " ndx ,
.bi "                       uintptr_t *" refcook ", uintptr_t *" defcook ,
.bi "                       unsigned int *" flags ", const char *" symname );
.fi
.pp
the dynamic linker invokes one of these functions
when a symbol binding occurs between two shared objects
that have been marked for auditing notification by
.br la_objopen ().
the
.br la_symbind32 ()
function is employed on 32-bit platforms;
the
.br la_symbind64 ()
function is employed on 64-bit platforms.
.pp
the
.i sym
argument is a pointer to a structure
that provides information about the symbol being bound.
the structure definition is shown in
.ir  .
among the fields of this structure,
.i st_value
indicates the address to which the symbol is bound.
.pp
the
.i ndx
argument gives the index of the symbol in the symbol table
of the bound shared object.
.pp
the
.i refcook
argument identifies the shared object that is making the symbol reference;
this is the same identifier that is provided to the
.br la_objopen ()
function that returned
.br la_flg_bindfrom .
the
.i defcook
argument identifies the shared object that defines the referenced symbol;
this is the same identifier that is provided to the
.br la_objopen ()
function that returned
.br la_flg_bindto .
.pp
the
.i symname
argument points a string containing the name of the symbol.
.pp
the
.i flags
argument is a bit mask that both provides information about the symbol
and can be used to modify further auditing of this
plt (procedure linkage table) entry.
the dynamic linker may supply the following bit values in this argument:
.\" la_symb_structcall appears to be unused
.tp 22
.b la_symb_dlsym
the binding resulted from a call to
.br dlsym (3).
.tp
.b la_symb_altvalue
a previous
.br la_symbind* ()
call returned an alternate value for this symbol.
.pp
by default, if the auditing library implements
.br la_pltenter ()
and
.br la_pltexit ()
functions (see below), then these functions are invoked, after
.br la_symbind (),
for plt entries, each time the symbol is referenced.
.\" pltenter/pltexit are called for non-dynamically loaded libraries,
.\" but don't seem to be called for dynamically loaded libs?
.\" is this the same on solaris?
the following flags can be ored into
.ir *flags
to change this default behavior:
.tp 22
.b la_symb_nopltenter
don't call
.br la_pltenter ()
for this symbol.
.tp 22
.b la_symb_nopltexit
don't call
.br la_pltexit ()
for this symbol.
.pp
the return value of
.br la_symbind32 ()
and
.br la_symbind64 ()
is the address to which control should be passed after the function returns.
if the auditing library is simply monitoring symbol bindings,
then it should return
.ir sym\->st_value .
a different value may be returned if the library wishes to direct control
to an alternate location.
.ss la_pltenter()
the precise name and argument types for this function
depend on the hardware platform.
(the appropriate definition is supplied by
.ir  .)
here is the definition for x86-32:
.pp
.nf
.bi "elf32_addr la_i86_gnu_pltenter(elf32_sym *" sym ", unsigned int " ndx ,
.bi "                 uintptr_t *" refcook ", uintptr_t *" defcook ,
.bi "                 la_i86_regs *" regs ", unsigned int *" flags ,
.bi "                 const char *" symname ", long *" framesizep );
.fi
.pp
this function is invoked just before a plt entry is called,
between two shared objects that have been marked for binding notification.
.pp
the
.ir sym ,
.ir ndx ,
.ir refcook ,
.ir defcook ,
and
.ir symname
are as for
.br la_symbind* ().
.pp
the
.i regs
argument points to a structure (defined in
.ir  )
containing the values of registers to be used for
the call to this plt entry.
.pp
the
.i flags
argument points to a bit mask that conveys information about,
and can be used to modify subsequent auditing of, this plt entry, as for
.br la_symbind* ().
.pp
.\" fixme . is the following correct?
the
.ir framesizep
argument points to a
.ir "long\ int"
buffer that can be used to explicitly set the frame size
used for the call to this plt entry.
if different
.br la_pltenter ()
invocations for this symbol return different values,
then the maximum returned value is used.
the
.br la_pltexit ()
function is called only if this buffer is
explicitly set to a suitable value.
.pp
the return value of
.br la_pltenter ()
is as for
.br la_symbind* ().
.ss la_pltexit()
the precise name and argument types for this function
depend on the hardware platform.
(the appropriate definition is supplied by
.ir  .)
here is the definition for x86-32:
.pp
.nf
.bi "unsigned int la_i86_gnu_pltexit(elf32_sym *" sym ", unsigned int " ndx ,
.bi "                 uintptr_t *" refcook ", uintptr_t *" defcook ,
.bi "                 const la_i86_regs *" inregs ", la_i86_retval *" outregs ,
.bi "                 const char *" symname );
.fi
.pp
this function is called when a plt entry,
made between two shared objects that have been marked
for binding notification, returns.
the function is called just before control returns to the caller
of the plt entry.
.pp
the
.ir sym ,
.ir ndx ,
.ir refcook ,
.ir defcook ,
and
.ir symname
are as for
.br la_symbind* ().
.pp
the
.i inregs
argument points to a structure (defined in
.ir  )
containing the values of registers used for the call to this plt entry.
the
.i outregs
argument points to a structure (defined in
.ir  )
containing return values for the call to this plt entry.
these values can be modified by the caller,
and the changes will be visible to the caller of the plt entry.
.pp
in the current gnu implementation, the return value of
.br la_pltexit ()
is ignored.
.\" this differs from solaris, where an audit library that monitors
.\" symbol binding should return the value of the 'retval' argument
.\" (not provided by gnu, but equivalent to returning outregs->lrv_eax
.\" on (say) x86-32).
.sh conforming to
this api is nonstandard, but very similar to the solaris api,
described in the solaris
.ir "linker and libraries guide" ,
in the chapter
.ir "runtime linker auditing interface" .
.sh notes
note the following differences from the solaris dynamic linker
auditing api:
.ip * 3
the solaris
.br la_objfilter ()
interface is not supported by the gnu implementation.
.ip *
the solaris
.br la_symbind32 ()
and
.br la_pltexit ()
functions do not provide a
.i symname
argument.
.ip *
the solaris
.br la_pltexit ()
function does not provide
.i inregs
and
.i outregs
arguments (but does provide a
.ir retval
argument with the function return value).
.sh bugs
in glibc versions up to and include 2.9,
specifying more than one audit library in
.b ld_audit
results in a run-time crash.
this is reportedly fixed in glibc 2.10.
.\" fixme . specifying multiple audit libraries doesn't work on gnu.
.\" my simple tests on solaris work okay, but not on linux -- mtk, jan 2009
.\" glibc bug filed: http://sourceware.org/bugzilla/show_bug.cgi?id=9733
.\" reportedly, this is fixed on 16 mar 2009 (i.e., for glibc 2.10)
.sh examples
.ex
#include 
#include 
unsigned int
la_version(unsigned int version)
{
    printf("la_version(): version = %u; lav_current = %u\en",
            version, lav_current);
    return lav_current;
}
char *
la_objsearch(const char *name, uintptr_t *cookie, unsigned int flag)
{
    printf("la_objsearch(): name = %s; cookie = %p", name, cookie);
    printf("; flag = %s\en",
            (flag == la_ser_orig) ?    "la_ser_orig" :
            (flag == la_ser_libpath) ? "la_ser_libpath" :
            (flag == la_ser_runpath) ? "la_ser_runpath" :
            (flag == la_ser_default) ? "la_ser_default" :
            (flag == la_ser_config) ?  "la_ser_config" :
            (flag == la_ser_secure) ?  "la_ser_secure" :
            "???");
    return name;
}
void
la_activity (uintptr_t *cookie, unsigned int flag)
{
    printf("la_activity(): cookie = %p; flag = %s\en", cookie,
            (flag == la_act_consistent) ? "la_act_consistent" :
            (flag == la_act_add) ?        "la_act_add" :
            (flag == la_act_delete) ?     "la_act_delete" :
            "???");
}
unsigned int
la_objopen(struct link_map *map, lmid_t lmid, uintptr_t *cookie)
{
    printf("la_objopen(): loading \e"%s\e"; lmid = %s; cookie=%p\en",
            map\->l_name,
            (lmid == lm_id_base) ?  "lm_id_base" :
            (lmid == lm_id_newlm) ? "lm_id_newlm" :
            "???",
            cookie);
    return la_flg_bindto | la_flg_bindfrom;
}
unsigned int
la_objclose (uintptr_t *cookie)
{
    printf("la_objclose(): %p\en", cookie);
    return 0;
}
void
la_preinit(uintptr_t *cookie)
{
    printf("la_preinit(): %p\en", cookie);
}
uintptr_t
la_symbind32(elf32_sym *sym, unsigned int ndx, uintptr_t *refcook,
        uintptr_t *defcook, unsigned int *flags, const char *symname)
{
    printf("la_symbind32(): symname = %s; sym\->st_value = %p\en",
            symname, sym\->st_value);
    printf("        ndx = %u; flags = %#x", ndx, *flags);
    printf("; refcook = %p; defcook = %p\en", refcook, defcook);
    return sym\->st_value;
}
uintptr_t
la_symbind64(elf64_sym *sym, unsigned int ndx, uintptr_t *refcook,
        uintptr_t *defcook, unsigned int *flags, const char *symname)
{
    printf("la_symbind64(): symname = %s; sym\->st_value = %p\en",
            symname, sym\->st_value);
    printf("        ndx = %u; flags = %#x", ndx, *flags);
    printf("; refcook = %p; defcook = %p\en", refcook, defcook);
    return sym\->st_value;
}
elf32_addr
la_i86_gnu_pltenter(elf32_sym *sym, unsigned int ndx,
        uintptr_t *refcook, uintptr_t *defcook, la_i86_regs *regs,
        unsigned int *flags, const char *symname, long *framesizep)
{
    printf("la_i86_gnu_pltenter(): %s (%p)\en", symname, sym\->st_value);
    return sym\->st_value;
}
.ee
.sh see also
.br ldd (1),
.br dlopen (3),
.br ld.so (8),
.br ldconfig (8)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 1995 peter tobias 
.\"
.\" %%%license_start(gpl_noversion_oneline)
.\" this file may be distributed under the gnu general public license.
.\" %%%license_end
.th hosts.equiv 5 2020-06-09 "linux" "linux programmer's manual"
.sh name
hosts.equiv \- list of hosts and users that are granted "trusted"
.b r
command access to your system
.sh description
the file
.i /etc/hosts.equiv
allows or denies hosts and users to use
the \fbr\fp-commands (e.g.,
.br rlogin ,
.br rsh ,
or
.br rcp )
without
supplying a password.
.pp
the file uses the following format:
.tp
\fi+|[\-]hostname|+@netgroup|\-@netgroup\fp \fi[+|[\-]username|+@netgroup|\-@netgroup]\fp
.pp
the
.i hostname
is the name of a host which is logically equivalent
to the local host.
users logged into that host are allowed to access
like-named user accounts on the local host without supplying a password.
the
.i hostname
may be (optionally) preceded by a plus (+) sign.
if the plus sign is used alone, it allows any host to access your system.
you can explicitly deny access to a host by preceding the
.i hostname
by a minus (\-) sign.
users from that host must always supply additional credentials,
including possibly a password.
for security reasons you should always
use the fqdn of the hostname and not the short hostname.
.pp
the
.i username
entry grants a specific user access to all user
accounts (except root) without supplying a password.
that means the
user is not restricted to like-named accounts.
the
.i username
may
be (optionally) preceded by a plus (+) sign.
you can also explicitly
deny access to a specific user by preceding the
.i username
with
a minus (\-) sign.
this says that the user is not trusted no matter
what other entries for that host exist.
.pp
netgroups can be specified by preceding the netgroup by an @ sign.
.pp
be extremely careful when using the plus (+) sign.
a simple typographical
error could result in a standalone plus sign.
a standalone plus sign is
a wildcard character that means "any host"!
.sh files
.i /etc/hosts.equiv
.sh notes
some systems will honor the contents of this file only when it has owner
root and no write permission for anybody else.
some exceptionally
paranoid systems even require that there be no other hard links to the file.
.pp
modern systems use the pluggable authentication modules library (pam).
with pam a standalone plus sign is considered a wildcard
character which means "any host" only when the word
.i promiscuous
is added to the auth component line in your pam file for
the particular service
.rb "(e.g., " rlogin ).
.sh examples
below are some example
.i /etc/host.equiv
or
.i \(ti/.rhosts
files.
.pp
allow any user to log in from any host:
.pp
    +
.pp
allow any user from
.i host
with a matching local account to log in:
.pp
    host
.pp
note: the use of
.i +host
is never a valid syntax,
including attempting to specify that any user from the host is allowed.
.pp
allow any user from
.i host
to log in:
.pp
    host +
.pp
note: this is distinct from the previous example
since it does not require a matching local account.
.pp
allow
.i user
from
.i host
to log in as any non-root user:
.pp
    host user
.pp
allow all users with matching local accounts from
.i host
to log in except for
.ir baduser :
.pp
    host \-baduser
    host
.pp
deny all users from
.ir host :
.pp
    \-host
.pp
note: the use of
.i "\-host\ \-user"
is never a valid syntax,
including attempting to specify that a particular user from the host
is not trusted.
.pp
allow all users with matching local accounts on all hosts in a
.ir netgroup :
.pp
    +@netgroup
.pp
disallow all users on all hosts in a
.ir netgroup :
.pp
    \-@netgroup
.pp
allow all users in a
.i netgroup
to log in from
.i host
as any non-root user:
.pp
    host +@netgroup
.pp
allow all users with matching local accounts on all hosts in a
.i netgroup
except
.ir baduser :