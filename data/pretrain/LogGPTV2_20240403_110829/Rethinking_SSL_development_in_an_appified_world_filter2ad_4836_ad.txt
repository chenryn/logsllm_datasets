### Code Analysis and Interviews

We restrict the option to disable SSL certificate validation to devices with developer settings enabled. This approach provides app developers with a straightforward method for working with self-signed certificates during development, while preventing non-technical users from inadvertently disabling SSL certificate validation for their apps. However, when this option is toggled, we display a strongly worded warning message to discourage misuse (see Figure 2(b)).

While it is possible that some users, annoyed by warning messages, might find online instructions to activate developer options and disable certificate validation, we believe this risk is relatively low compared to the significant benefits this feature offers. Additionally, we recommend limiting this option to devices registered with Google developer accounts to further prevent normal users from accessing it.

**Figure 2:**
(a) Developer settings to disable certificate validation for an app. This option is not displayed for regular users.
(b) A warning message is shown when disabling validation, alerting users to potential security threats.

### 5.2.3 SSL Pinning

SSL public key pinning can be configured by app developers to limit the number of certificates an app trusts. It allows developers to specify either which CA certificates are trusted to sign SSL certificates for the app or which individual SSL certificates should be used. The standard Android approach requires developers to implement pinning in their source code, resulting in very few apps actually implementing it. The typical method for limiting trusted issuers is using a custom keystore, which is also complex and requires additional code to load the keystore.

Using our extension, developers can configure SSL certificate pinning directly in an Android app’s `Manifest.xml` file. This simplifies the process, allowing developers who know their app's endpoints to easily and securely add SSL pinning without writing any code. Figure 3 illustrates the `Manifest.xml` configuration for an Android app with SSL pinning.

Pinning individual leaf certificates also enables developers to use self-signed certificates in a production environment securely, a requirement expressed by several app developers. If developers prefer to restrict the number of trusted issuers rather than pinning individual leaf certificates, they can add pins for certificate issuers to the `Manifest.xml` file in the same manner. The app will then only accept certificates issued by the pinned issuers.

To simplify the process of creating and adding certificate pins to the `Manifest.xml` file, we extended Eclipse’s Android Development Tools. This allows pins for given certificates to be generated and added to the `Manifest.xml` file automatically.

Since SSL public key pinning can be problematic in rare cases, such as when a company mandates the use of an SSL proxy, we allow SSL pinning to be globally disabled using the (enterprise) Device Administration API policies. While careless users cannot unintentionally turn off SSL pinning, enterprises can configure devices to respect company policies.

**Figure 3:**
The new SSL configuration options in an Android app’s `Manifest.xml` file allow developers to easily configure different SSL handling options. Developers can pin either leaf or issuer certificates, determine if their app should log SSL-relevant information, and observe how their apps react to failed SSL certificate validations. By default, no pin is set, logging is turned off, and apps refuse to connect to hosts with failed certificate validation.

### 5.2.4 User Protection

Currently, it is up to developers to implement the user interface (UI) for interacting with users when SSL issues arise. This has led to many apps silently accepting invalid certificates, crashing, or displaying confusing warning messages, such as "Reset your local time to the current time" for certificate validation errors. The lack of a ready-to-use warning message was also a concern raised by developers in our study. It should be impossible for app developers to accept untrusted certificates invisibly without user consent.

We offer a system-triggered, standardized warning that alerts app users to potential security threats from insecure SSL connections, preventing developers from silently accepting invalid certificates. This is particularly important for apps that connect to endpoints outside the developer's control, such as mobile browsers, news readers, and blog aggregators. In these cases, users are given the option to decide whether to proceed after seeing a warning message.

Designing effective SSL warning messages is challenging, as shown by usability studies on browser warnings [16]. While designing such a system is beyond the scope of this paper, we currently use Android’s stock browser warning message. We believe having a standardized warning message that developers can use to let users decide what to do with untrusted certificates is a good starting point for future work. Issues like habituation need to be considered, but showing any warning message is better than allowing apps to silently accept all invalid certificates due to developer negligence.

### 5.2.5 Alternate SSL Validation Strategies

Our system offers the potential to plug in new validation strategies, protecting both new and existing apps without requiring extensive code updates from developers. This could significantly speed up the adoption of alternatives to the current weakest-link CA-based system. We have created a plugin infrastructure for this purpose and are evaluating Certificate Transparency (CT) [11] and AKI [10] as new approaches to validate certificates. This feature is still experimental and is currently configured in an app’s manifest. Future work will focus on researching how and by whom this feature should be configured and creating plugins to improve certificate validation.

### 6. Evaluation

As Section 4 showed, all broken SSL implementations on Android and iOS were due to developers customizing SSL usage without ensuring security. Our new approach to SSL development in apps addresses these security holes, but its success depends on meeting developers' needs and making them comfortable with configuration instead of coding. To evaluate our approach, we conducted two evaluation studies: interviews with 14 developers and a code analysis of 13,500 Android apps.

#### 6.1 Developer Evaluation

We conducted a pre-test study with novice developers, who found our framework made adding SSL, pinning, and self-signed certificates trivial. We then focused on whether the proposed paradigm shift would be well-received and make developers comfortable with configuring SSL. We presented our approach to the 14 developers from Section 4.2 and asked if these features met their requirements and removed the need for custom SSL implementation. All use-cases were met, and the developers' reaction was very positive. They confirmed that SSL development is too complex and appreciated the ease of use provided by our solution, especially for self-signed certificates during development and easy pinning for production apps.

#### 6.2 Compatibility Evaluation

To ensure our solution covers all relevant use-cases, we performed a static code analysis on 13,500 Android apps, extracting and analyzing customized TrustManager implementations. We categorized these based on their handling of SSL validation compared to the default procedure (Table 2).

| Customized Implementations | Count |
|----------------------------|-------|
| Accept All Certificates     | 3,098 |
| Expiry-Only Check           | 263   |
| Leaf-Cert Pinning           | 47    |
| Add Logging to Default      | 32    |
| Add Hostname Pinning        | 16    |
| Limit Trusted Issuers       | 8     |

In 97.02% of cases where TrustManagers accept all certificates or only check expiration dates, our approach enforces secure certificate validation, fixing vulnerable apps without additional development effort. In the remaining 2.9% of cases, where endpoints do not have valid certificates, our system would prevent the connection unless the developer installs a valid certificate, updates the application to pin the current certificate, or sets the `handle-validation-fails` option in the manifest to show warning messages. These modifications are easy in our framework, providing a good trade-off for broken apps.

A small number of developers created beneficial customizations, such as adding logging (0.9%) and hostname verification (0.5%). We added configuration options to support these features. For the 1.6% of cases where TrustManagers improved SSL validation through pinning, our solution covers these use-cases with less effort. Field trials confirmed this analysis.

#### 6.3 Deployability

All our modifications are implemented as part of Android’s Java Framework. A system update would be the most convenient way to make the new features available to developers and users. Apps built after the update would use the new features by default, enhancing security and reducing the need for custom SSL code.