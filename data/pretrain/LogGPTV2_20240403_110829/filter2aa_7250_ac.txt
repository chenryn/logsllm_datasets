\&    }
.Ve
.PP
注意我们必须使用 \f(CW$class\fR (几乎肯定是\f(CW"Mouse"\fR) 作为 \f(CW\*(C`Animal::speak\*(C'\fR 的第一个参数, 因为我们没有用箭头符号. 那为什么不用呢? 嗯, 如果我们在那儿调用 \f(CW\*(C`Animal\->speak\*(C'\fR, 则第一个参数是 \f(CW"Animal"\fR 而不是 \f(CW"Mouse"\fR , 这样当调用 \f(CW\*(C`sound\*(C'\fR 时, 就找不到正确的函数了.
.PP
虽然如此,直接调用 \f(CW\*(C`Animal::speak\*(C'\fR 确实不怎么好. 万一 \f(CW\*(C`Animal::speak\*(C'\fR 不存在, 而是继承自 \f(CW@Animal::ISA\fR 中的某个类呢? 因为没有使用箭头符号, 我们只有一次机会去调用正确的函数.
.PP
还要注意到,现在类名 \f(CW\*(C`Animal\*(C'\fR 直接在子程序中使用. 如果维护代码的人没有注意到这一点, 改变了  的 \f(CW@ISA\fR，没有注意到 \f(CW\*(C`speak\*(C'\fR 用到了 \f(CW\*(C`Animal\*(C'\fR 那就会出问题. 因此, 这可能不是一个好方法.
.Sh "Starting the search from a different place 从其它地方开始寻找"
.IX Subsection "Starting the search from a different place"
较好的解决办法是让Perl从继承链的上一级开始寻找:
.PP
.Vb 9
\&    # same Animal as before
\&    { package Mouse;
\&      # same @ISA, &sound as before
\&      sub speak {
\&        my $class = shift;
\&        $class->Animal::speak;
\&        print "[but you can barely hear it!]\en";
\&      }
\&    }
.Ve
.PP
这就对了. 使用这一语法, 我们从 \f(CW\*(C`Animal\*(C'\fR 寻找 \f(CW\*(C`speak\*(C'\fR, 在找不到时寻找 \f(CW\*(C`Animal\*(C'\fR 的继承链.且第一个参数是 \f(CW$class\fR, 所以 \f(CW\*(C`speak\*(C'\fR 和\f(CW\*(C`Mouse::sound\*(C'\fR 都会被正确地调用.
.PP
但这还不是最好的方法.我们还必须调整 \f(CW@ISA\fR 的元素顺序. 更糟糕的是, 如果 \f(CW\*(C`Mouse\*(C'\fR 有多个父类在 \f(CW@ISA\fR, 我们还要知道哪个类定义了 \f(CW\*(C`speak\*(C'\fR. 那么,有没有更好的办法呢?
.Sh "The \s-1SUPER\s0 way of doing things 使用SUPER方法"
.IX Subsection "The SUPER way of doing things"
通过把 \f(CW\*(C`Animal\*(C'\fR 改成 \f(CW\*(C`SUPER\*(C'\fR 类, 程序可以自动在所有父类中(\f(CW@ISA\fR):
.PP
.Vb 9
\&    # same Animal as before
\&    { package Mouse;
\&      # same @ISA, &sound as before
\&      sub speak {
\&        my $class = shift;
\&        $class->SUPER::speak;
\&        print "[but you can barely hear it!]\en";
\&      }
\&    }
.Ve
.PP
\f(CW\*(C`SUPER::speak\*(C'\fR 意味着在当前包的 \f(CW@ISA\fR 中寻找 \f(CW\*(C`speak\*(C'\fR, 调用第一个找到的函数。注意它不会查找 \f(CW$class\fR 的 \f(CW@ISA\fR
.Sh "Where we're at so far...到现在为止我们学了些什么"
.IX Subsection "Where we're at so far..."
我们已经看到了箭头符号语法:
.PP
.Vb 1
\&  Class->method(@args);
.Ve
.PP
和它的等价形式:
.PP
.Vb 2
\&  $a = "Class";
\&  $a->method(@args);
.Ve
.PP
它们构造这样一个参数列表:
.PP
.Vb 1
\&  ("Class", @args)
.Ve
.PP
并调用
.PP
.Vb 1
\&  Class::method("Class", @Args);
.Ve
.PP
但是，如果找不到 \f(CW\*(C`Class::method\*(C'\fR, 程序会查看 \f(CW@Class::ISA\fR (递归的) 找到一个包含 \f(CW\*(C`method\*(C'\fR 的包,然后执行它.
.PP
使用这种简单的语法, 我们可以有类方法,(多)继承,重载,以及其它扩展. 使用我们已经学到的东西, 我们可以析出公共的代码,以各种不同的形式重用同一工具. 这是对象能够提供的核心内容, 但是对象还能够提供实例数据, 这一点我们还没有涉及.
.Sh "A horse is a horse, of course of course \*(-- or is it? 马就是马——真的是这样吗?"
.IX Subsection "A horse is a horse, of course of course  or is it?"
我们从 \f(CW\*(C`Animal\*(C'\fR 和 \f(CW\*(C`Horse\*(C'\fR 类的代码开始:
.PP
.Vb 10
\&  { package Animal;
\&    sub speak {
\&      my $class = shift;
\&      print "a $class goes ", $class->sound, "!\en"
\&    }
\&  }
\&  { package Horse;
\&    @ISA = qw(Animal);
\&    sub sound { "neigh" }
\&  }
.Ve
.PP
这样使得我们调用 \f(CW\*(C`Horse\->speak\*(C'\fR，从而向上调用 \f(CW\*(C`Animal::speak\*(C'\fR，然后调用 \f(CW\*(C`Horse::sound\*(C'\fR 来获得指定的声音，输出为:
.PP
.Vb 1
\&  a Horse goes neigh!
.Ve
.PP
但是我们所有的马都是相同的. 如果我增加一个子程序, 所有的马都会共享它. 这在创建相同的马时确实不错, 但是我们如何能够区分不同的马呢? 比如, 假设我想给我的第一匹马起个名字. 应该有办法使得它的名字和别的马的名字不同.
.PP
这可以通过创建一个 \*(L"实例,instance\*(R" 来实现. 实例是由类创建的. 在Perl中, 任何引用都可以是实例, 就让我们从最简单的引用开始吧,一个标量引用:
.PP
.Vb 2
\&  my $name = "Mr. Ed";
\&  my $talking = \e$name;
.Ve
.PP
现在 \f(CW$talking\fR 是指向实例特有数据( \f(CW$name\fR )的引用。把这个引用变成真正的实例的是一个特殊的操作符,叫做 \f(CW\*(C`bless\*(C'\fR:
.PP
.Vb 1
\&  bless $talking, Horse;
.Ve
.PP
这个操作符把包名 \f(CW\*(C`Horse\*(C'\fR 中的所有信息存放到引用所指向的东西中. 这时,我们说 \f(CW$talking\fR 是 \f(CW\*(C`Horse\*(C'\fR 的一个实例 . 也就是说, 它是一匹独特的马. 引用并没有改变, 还可以用于间接引用操作符.
.Sh "Invoking an instance method 调用实例方法"
.IX Subsection "Invoking an instance method"
箭头符号可以用于实例. 那么, 听听 \f(CW$talking\fR 的声音吧:
.PP
.Vb 1
\&  my $noise = $talking->sound;
.Ve
.PP
要调用 \f(CW\*(C`sound\*(C'\fR, Perl 首先注意到 \f(CW$talking\fR 是一个 blessed 引用 (因此是一个实例). 它会构造一个参数列表, 现在只有 \f(CW$talking\fR. (在后面我们会看到参数们在实例变量之后, 与使用类时相似.)
.PP
然后,是真正有意思的部分: Perl 查找实例所属的类, 这里是 \f(CW\*(C`Horse\*(C'\fR, 在其中寻找对应的方法. 这里, \f(CW\*(C`Horse::sound\*(C'\fR 直接可以找到(不用使用继承), 最后这样调用:
.PP
.Vb 1
\&  Horse::sound($talking)
.Ve
.PP
注意这里的第一个参数还是实例本身, 而不像前面我们学到的是类名. 最后返回值是 \f(CW\*(C`neigh\*(C'\fR, 它被赋值给 \f(CW$noise\fR 变量.
.PP
如果找不到 Horse::sound, 会在 \f(CW@Horse::ISA\fR 列表中查找. 类方法与实例方法的唯一区别是调用时的第一个参数是实例(一个blessed引用)还是一个类名(一个字符串).
.Sh "Accessing the instance data 访问实例数据"
.IX Subsection "Accessing the instance data"
因为我们得到的第一个参数是实例,我们可以访问实例特有的数据. 我们可以取得马的名字:
.PP
.Vb 8
\&  { package Horse;
\&    @ISA = qw(Animal);
\&    sub sound { "neigh" }
\&    sub name {
\&      my $self = shift;
\&      $$self;
\&    }
\&  }
.Ve
.PP
现在,我们调用名字:
.PP
.Vb 1
\&  print $talking->name, " says ", $talking->sound, "\en";
.Ve
.PP
在 \f(CW\*(C`Horse::name\*(C'\fR 中, \f(CW@_\fR 数组仅含有 \f(CW$talking\fR, shift 将 \f(CW$talking\fR 赋给了 \f(CW$self\fR. (传统上我们在处理实例方法时总是把第一个元素赋给 \f(CW$self\fR, 所以你也应该这么做, 除非你有不这样做的充分理由.) 然后, \f(CW$self\fR 被标量化,成为 \f(CW\*(C`Mr. Ed\*(C'\fR, 这就行了. 输出是:
.PP
.Vb 1
\&  Mr. Ed says neigh.
.Ve
.Sh "How to build a horse 如何创建一匹马"
.IX Subsection "How to build a horse"
当然啦,如果我们手工创建所有的马, 我们会出很多错误. 不仅如此,我们还亵渎了面向对象编程的特性,因为在那种情况下马的"内脏"也可见了. 如果你是兽医的话,这倒正好, 可是如果你仅仅是个爱马者呢? 所以,我们让 Horse 类来创建一匹新马:
.PP
.Vb 13
\&  { package Horse;
\&    @ISA = qw(Animal);
\&    sub sound { "neigh" }
\&    sub name {
\&      my $self = shift;
\&      $$self;
\&    }
\&    sub named {
\&      my $class = shift;
\&      my $name = shift;
\&      bless \e$name, $class;
\&    }
\&  }
.Ve
.PP
现在,我们可以用 \f(CW\*(C`named\*(C'\fR 方法创建一匹马:
.PP
.Vb 1
\&  my $talking = Horse->named("Mr. Ed");
.Ve
.PP
注意到我们有回到了类方法, 所以传递给 \f(CW\*(C`Horse::named\*(C'\fR 的两个参数是 \f(CW\*(C`Horse\*(C'\fR 和 \f(CW\*(C`Mr. Ed\*(C'\fR. \*(C`bless\*(C'\fR 操作符不仅将 \f(CW$name\fR 实例化, 且将指向 \f(CW$name\fR 的引用作为返回值返回. 这样, 我们就创建了一匹马.
.PP
这里,我们调用了构造器 \f(CW\*(C`named\*(C'\fR, 它的参数就是特定的 \f(CW\*(C`Horse\*(C'\fR 的名字. 你可以使用不同的构造器用不同的名字建立不同的对象(比如记录它的谱系或生日). 但是, 你会发现多数使用Perl的人更喜欢把构造器命名为 \f(CW\*(C`new\*(C'\fR, 并使用不同的方法解释 \f(CW\*(C`new\*(C'\fR 的参数. 两种都挺好,只要你能创建对象就行. (你会自己创建一个,对吗?)
.Sh "Inheriting the constructor 继承构造器"
.IX Subsection "Inheriting the constructor"
但是那个方法中有没有什么对于 \f(CW\*(C`Horse\*(C'\fR 来说比较特殊的东西呢? 没有. 因此, 从 \f(CW\*(C`Animal\*(C'\fR 创建其它任何东西也可以使用相同的方法,我们来试试::
.PP
.Vb 19
\&  { package Animal;
\&    sub speak {
\&      my $class = shift;
\&      print "a $class goes ", $class->sound, "!\en"
\&    }
\&    sub name {
\&      my $self = shift;
\&      $$self;
\&    }
\&    sub named {
\&      my $class = shift;
\&      my $name = shift;
\&      bless \e$name, $class;
\&    }
\&  }
\&  { package Horse;
\&    @ISA = qw(Animal);
\&    sub sound { "neigh" }
\&  }
.Ve
.PP