edu/~jones/voting/cacm2004.shtml.
[15] D. W. Jones. Minimizing the Trusted Base, Dec. 2004.
Presentation for the CSTB Framework for Understanding
Electronic Voting, http://www.cs.uiowa.edu/~jones/
voting/nas-cstb2004a.shtml.
[16] P. McDaniel, M. Blaze, G. Vigna, and et al. EVEREST:
Evaluation and Validation of Election-Related Equipment,
Standards and Testing, Dec 2007.
http://www.sos.state.oh.us/SOS/upload/everest/
14-AcademicFinalEVERESTReport.pdf.
[17] K. McMillan. Cadence SMV, 1998.
http://www.kenmcmil.com/.
[18] R. Mercuri. Electronic Vote Tabulation Checks & Balances.
PhD thesis, School of Engineering and Applied Science of
the University of Pennsylvania, 2000.
[19] R. Mercuri. A better ballot box? IEEE Spectrum,
39(10):46–50, Oct 2002.
[20] C. A. Neff. A veriﬁable secret shufﬂe and its application to
e-voting. In 8th ACM Conference on Computer and
Communications Security (CCS 2001).
[21] L. Norden, A. Burstein, J. L. Hall, and M. Chen.
Post-Election Audits: Restoring Trust in Elections, Aug.
2007. http://www.brennancenter.org/page/-/d/
download_file_50227.pdf.
[22] E. Öksüzo˘glu and D. S. Wallach. VoteBox Nano: A Smaller,
Stronger FPGA-based Voting Machine. In EVT/WOTE ’09:
Proceedings of the 2009 USENIX/Accurate Electronic Voting
Technology Workshop / Workshop on Trustworthy Elections.
[23] A. Pnueli. The Temporal Logic of Programs. In FOCS, IEEE
Press, pp. 46–57, 1977.
[24] P. Y. A. Ryan and S. Schneider. Prêt à voter with
re-encryption mixes. In ESORICS. Springer-Verlag, 2006.
474[25] D. Sandler, K. Derr, and D. S. Wallach. VoteBox: a
7. On reset, the current contest number and cast are reset and
tamper-evident, veriﬁable electronic voting system. In
USENIX Security Symposium. USENIX Association, 2008.
[26] N. Sastry, T. Kohno, and D. Wagner. Designing voting
machines for veriﬁcation. In USENIX Security Symposium,
2006.
[27] T. Terauchi and A. Aiken. Secure information ﬂow as a
safety problem. Technical Report UCB/CSD-05-1396, EECS
Department, University of California, Berkeley, Jun 2005.
[28] K.-P. Yee. Extending prerendered-interface voting software
to support accessibility and other ballot features. In EVT’07:
Proceedings of the 2007 USENIX/Accurate Electronic Voting
Technology Workshop.
[29] K.-P. Yee. Building Reliable Voting Machine Software. PhD
thesis, UC Berkeley, 2007.
[30] K.-P. Yee, D. Wagner, M. Hearst, and S. M. Bellovin.
Prerendered user interfaces for higher-assurance electronic
voting. In EVT’06: Proceedings of the 2006
USENIX/Accurate Electronic Voting Technology Workshop.
[31] Yices SMT solver. http://yices.csl.sri.com/.
[32] L. Zhang and S. Malik. The quest for efﬁcient boolean
satisﬁability solvers. In CADE-18: Proceedings of the 18th
International Conference on Automated Deduction, London,
UK, 2002. Springer-Verlag.
APPENDIX
A. BEHAVIORAL PROPERTIES
We formalize the behavioral properties from Section 3.3 in LTL.
1. At any given time, no more than one contest can be active.
G(ss_selector[0] + · · · + ss_selector[contest number −
1] ≤ 1)
2. A contest i is active if and only if the current contest number
is i.
G((contest_num = i ∧ ss_enable) ⇐⇒ ss_selector[i])
3. The total number of candidates selected for any contest is not
more than the maximum allowed as given by the election def-
inition ﬁle.
G(reset → XG(total_selections ≤ max_selections))
where total_selections = selection_state[0] + · · · +
selection_state[number of candidates − 1].
4. The selection state of a contest can not change if ss_selector
in the case where
and reset are not set.
selection_state[i] starts low, it sufﬁces to check that it re-
mains low if ss_selector is not set regardless of the value of
reset.
Note that
→ X(selection_state[i]))
∀i G((¬resetV ¬ss_selectorV selection_state[i])
∀i G((¬ss_selectorV ¬selection_state[i])
→ X(¬selection_state[i]))
5. The selection state of a contest can not change if the pressed
button is not within the set of valid selection buttons. Thus,
the next, prev, and cast buttons cannot affect the selection
state of any contest.
→ X(selection_state[i]))
∀i G(¬resetV button_num 6∈ BselV selection_state[i]
∀i G((button_num 6∈ BselV ¬selection_state[i])
→ X(¬selection_state[i]))
6. Setting reset clears the selection state for all contests.
selection mode is disabled.
G((reset → X(¬castV ¬ss_enableV ¬contest_num))
8. Once the voting machine enters cast mode, cast is not
cleared until the next cycle of the voting machine beginning
with reset.
G(reset → (XG(cast → cast U reset)))
9. Once the voting machine enters cast mode, the selection
states of all the contests become frozen and do not change
until the next cycle beginning with reset.
G(reset → (XG(cast → ¬ss_enable U reset)))
10. Selection of a candidate and casting of votes can not take
place at the same time.
reset → XG(¬(castV ss_enable))
B. THE TRANSITION RELATION
In Table 1, we show how each of the component of the transition
relation can be expressed as a set of guarded update rules. Further,
these components are disjoint in their guards. If none of the guards
are true, there is no change in the state of the voting machine. Also,
in one voting cycle between resets, any state variable is updated
only by one component of the transition relation.
C. PROOF OF THEOREM 1
We prove Theorem 1 (from Section 7.3) using induction on the
length of the input sequence.
Our proof makes use of the following lemma.
LEMMA 1. Suppose that a test suite satisfying coverage crite-
rion C2 passes. If there exists a trace of A s.t. its state at an arbi-
trary step j has contest number i and selection state si in contest
i, and the output screen of A at step j is z, then IO(z) = (i, si).
PROOF. Denote the output function of A by ρA. From Property
P0, we know that ρA is a function only of i and si. Thus, z =
ρA(i, si).
By Coverage Criterion C2, there exists some test T in which the
last screen in contest i is z and then some time later the vote is
cast. By Property P2 and P3, si should appear on the cast vote
record as the selection state of the ith contest. If A is correct on
test T , it implies that the selection state of P in contest i at step j is
also si, matching the cast vote record. Moreover, since T passed,
it must also hold that IO(z) matches P’s output at step j. Thus,
IO(z) = (i, si).
Since we have proved the above lemma for arbitrary i, si, and z,
the following corollary is also obtained:
COROLLARY 1. If a test suite satisfying coverage criterion C2
passes, then IO is the inverse of ρA.
We now return to the proof of the main theorem.
PROOF. (Theorem 1)
Consider an input sequence A = (a1, a2, . . . , aℓ) to A of ﬁnite but
arbitrary length. Each aj is an (x, y)-location on the touch screen.
Let τA = (z0, a1, z1, a2, z2, . . . , zℓ) be the trace of A on this input
sequence. By determinism of A (Property P1), we know that τA is
unique. Also, we have
I(τA) = (IO(z0), II(z0, a1), IO(z1), II(z1, a2), . . . , IO(zℓ)).
The sequence of button presses corresponding to A is
∀i G(reset → X(¬selection_state[i]))
(II(z0, a1), II(z1, a2), . . . , II(zℓ−1, aℓ)).
475type of
transition (x)
navigation
cast
contest i
reset
guard (gx)
update rule
(¬reset ∧ touch ∧ ¬cast
(¬reset ∧ touch ∧ cast_button)
(¬reset ∧ touch ∧ ¬cast
reset
contest_num := f1(contest_num, navigation_buttons)
cast := f2(cast_button)
selection_state[i] := f4(selection_state[i], selection_buttons, max_selections)
clear contest_num, cast, selection_state, and f inal_memory
f inal_memory[i] := f3(selection_state[i]) for all i
Table 1: Structural decomposition of the prototype voting machine’s transition function (see Section 6.3)
i).
m = (i, s′
i, . . . , sN ). Then, z′
transition can only modify the selection states sm and sm ′ in
their ith components.
Suppose that P transitions on bm from (i, s) to some state
(i, s′), as per its deﬁnition in Section 2.2.
Let s′ =
(s1, s2, . . . , s′
By coverage criterion C1(a), there exists some passing test ˆT
that covers the transition of P on bm from some state (i, ˆs)
where the ith component of ˆs is si. Note that P’s selection state
in the ith contest would also change to s′
Consider any input a′
m to A corresponding to bm. Consider
the transition on a′
m in A from a state corresponding to contest
number i and selection state ˆs. Since ˆT passed, we know that
the ith entry in the selection state component of IO(zm) is s′
i,
matching the corresponding entry for P. Since the value of s′
i
does not depend on the state of any contest other than i, this
implies that the A’s selection state at step m in τA, sm, is s′.
Thus, sm = sm ′ = s′.
By Lemma 1, since A’s selection state is s′ and contest number
is i, IO(zm) = (i, s′
• Case 3: bm = cast.
i on this transition.
i) = z′
m.
Consider the ﬁnal cast input. From the formal veriﬁcation of
the properties in Sections 3.2 and 3.3, and Assumption A0 (that
the tester presses a button that A interprets as cast), we know
that the contest number i and selection state s of A remain un-
changed on cast. Similarly, from Section 2.2, we also know
that (i, s) remains unchanged on cast by P. Moreover, we
know that the ﬁnal output of P is s, while by design of A and
Property P5, the cast vote record of A generates an accurate
copy of s. Thus, IO(zm) = z′
m = s.
In all cases, we have shown that IO(zm) = z′
(sm)′. Thus, by induction we have shown that IO(zi) = z′
i s.t. 0 ≤ i ≤ ℓ. In other words, τP = I(τA).
m and that sm =
i for all
, s2 ′
, s1 ′
0, b1, z′
, . . . , sℓ ′
1, b2, . . . , z′
i for all i s.t. 0 ≤ i ≤ ℓ.
Let bi = II(zi−1, ai). Suppose that τP is the trace of P on
T = (b1, b2, . . . , bℓ). Let τP = (z′
ℓ). By de-
terminism of P (Property P1), we know that τP is unique.
We wish to prove that τP = I(τA). In other words, we want to
prove that IO(zi) = z′
In fact, we will prove that, in addition to the above equality, the
sequences of selection states of A and P corresponding to the
above input sequence are the same.
(We know that these se-
quences are unique due to determinism of A and P.) Speciﬁcally,
if (s0, s1, s2, . . . , sℓ) is the sequence of selection states for A and
) is the sequence for P, then sj = sj ′ for all
(s0 ′
j. This result will be used as an “auxiliary invariant” in proving the
statement of the theorem.
Base case:
Consider the empty input sequence A = (). Thus, τA = (z0).
From coverage criterion C0, we know that the test T = (cast)
passed. The traces τA, τP are a preﬁx of that passing test, so it
follows that IO(z0) = z′
0. Also, since T passed, we know that
after T , the selection state of A was (∅, ∅, . . . , ∅). Since cast does
not change any selection state, this was also the initial selection
state. Therefore, s0 = (∅, . . . , ∅) = s0 ′.
Inductive step:
Suppose that IO(zj) = z′
IO(zm) = z′
at the m − 1th step, sm−1, simply as s.
Let z′
m−1 = (i, si) where i is the contest number and si is the
state of the ith contest. The full selection state is s = (s1, . . . , sN )
where the ith entry is si. From the induction hypothesis we know
that, at the m − 1th step, i is the contest number and s is the selec-
tion state of both P and A.
Recall that bm is the button pressed on the mth step. We will case-
split on the form of bm.
• Case 1: bm ∈ IN \ {cast}.
j for all j s.t. 0 ≤ j < m. We show that
m. For convenience, we abbreviate the selection state
Since bm ∈ {next, prev}, by Property P3 and Assumption
A0, we know that the selection state s remains unchanged on
this transition in T for both A and P. Thus, sm = sm ′ = s.
Suppose that P transitions on bm from (i, s) to some state
(i′, s), as per its deﬁnition in Section 2.2. Thus, z′
m = (i′, si′ ).
By coverage criterion C1(b), there exists some passing test ˆT
that covers the transition of P on bm from some state (i, ˆs)
where the ith component of ˆs is si. Note that P’s contest num-
ber would also change to i′ on this transition.
Consider any input a′
m to A corresponding to bm. Consider
the transition on a′
m in A from a state corresponding to contest
number i and selection state ˆs. Since ˆT passed, we know that
the contest number component of IO(zm) is i′, matching the
contest number of P.
Thus, by Lemma 1, and since A’s selection state for contest i′
is si′ , IO(zm) = (i′, si′ ) = z′
m.
• Case 2: bm ∈ IS.
Since bm ∈ IS, by Property P4 and Assumption A0, we know
that this transition in T leaves the contest number unchanged at
i for both A and P. Also, by Property P2, we know that this
476