1:traces(S1)|L(cid:215)
2:traces(S2)|L(cid:215)
$ t1:Blow(t 1,S1)(cid:215) t1|H1=<> (cid:217)
*,t 2)(cid:215)
t2:interleave(HI2
$ s2:Blow(t 2,S2)(cid:215) t2=s2|L2¨ HI2
traces(S) : interleave(traces(S1),traces(S2))
*,t 2)(cid:215)
|E1,S1)(cid:215) t1|H1=<> (cid:217)
$ s2:Blow(t 2,S2)(cid:215) t2=s2|L2¨ HI2
|E1,S1)(cid:215) t1|H1=<> (cid:217)
 "
 t2=s2|L2¨ HI2
t2:interleave((HI2\C)*,t 2)(cid:215)
Cascade Composition
$ s2:Blow(t 2,S2)(cid:215)
Semicommutative Laws
t2:interleave((HI2\C)*,t 2)(cid:215)  $ t1:Blow(t
|E1,S1)(cid:215)  $ s2:Blow(t 2,S2)(cid:215)
 t2=s2|L2¨ HI2 (cid:217)
 t1|H1=<> 
t2:interleave((HI2\C)*,t 2)(cid:215)  $ t:Blow(t ,S)(cid:215)  t2=s2|L2¨ HI2 (cid:217)
Lemma 5.1
 t|HI1=<>
:traces(S)|L(cid:215)
$ t1:Blow(t
t2:interleave(HI2
$ t1:Blow(t
:traces(S)|L(cid:215)
s2|H˙ C=t1|H˙ C (cid:217)
:traces(S)|L(cid:215)
s2|H˙ C=t1|H˙ C (cid:217)
:traces(S)|L(cid:215)
= "
= "
:traces(S)|L(cid:215)
$ t:Blow(t ,S)(cid:215)  t|HI=<>
Specialization with t2|HI2\C = <>
Therefore,  the  composition  of  the  two  components  satisfies  the  Generalized
Noninference Property.
We  will  now  do  the  analysis  by  comparing  communication  events  and  applying
Conjecture 5.1.
1.   For  Noninference  the  high  level  communication  events  output  from  S1  are
guaranteed to be <>.
- 52 -
"
t
"
t
"
(cid:222)
"
t
"
t
(cid:222)
"
t
"
t
"
(cid:222)
"
t
2.   For Generalized Noninterference the high level communication events input to
S2 can be anything.
Clearly  compatible  communication  events  can  be  found.    By  Conjecture  5.1  the
system  satisfies  a  property  P  such 
Noninterference  (cid:222)
Noninference.  This is the same conclusion demonstrated above.
that  Noninference 
  P.    From  Figure  4.1  (page  39)  we  see  that  P  can  be  Generalized
  P  and  Generalized
Notice that in this example the resulting system satisfies a different property than
either of its components.  We will discuss this further in section 5.4.
G
Consider a property, P, that is known to be composable.  What can be said about a
property P1 such that P1(cid:222) P?  The cascade composition of two components that satisfy P1
will satisfy P.  This follows because both components satisfy P, which is composable.  But
does the resulting system satisfy P1?  We believe that it does.
Conjecture 5.2: Given  a  composable  property  P  and  properties  P1  and  P2  such  that
P1(cid:222) P and P2(cid:222) P then the cascade composition of components S1 and
S2 that satisfy P1 and P2 respectively will satisfy a property Q such that
P1(cid:222) Q, P2(cid:222) Q and Q(cid:222) P.
This  conjecture  follows  from  Conjecture  5.1  because  the  compatibility  of  the
communication events is guaranteed by the composable property.
Product  composition  is  a  special  case  of  cascade  composition.    Product
composition is cascade composition without communication events (see Figure 5.3).  All
of  the  above  results  can  be  applied  to  product  composition.    For  product  composition
Conjecture 5.1 reduces to:
Conjecture 5.3: Given components S1 and S2 that satisfy P1 and P2 respectively then the
product  composition  of  S1  and  S2  will  satisfy  a  property  P  such  that
P1(cid:222) P and P2(cid:222) P.
- 53 -
(cid:222)
S1
S2
Figure 5.3: Product Composition
Product Composition is cascade composition but without internal events.
5.3.2. Consequences of Input Totality
One of the assumptions in the section Components and Systems (section 3, page
14) was that all of the components must be input total.  That is, they must always accept
an  input.    This  differs  from  most  other  models  of  event  systems.    Input  totality  sounds
more restrictive than it is.  All that is required is that the input is recorded in the trace.  It
does not necessarily have any effect on the state of the system; it might be ignored.
Input totality makes the presentation of the cascade results easier.  If input totality
were  not  required  then  it  would  be  possible  to  find  two  components  such  that  their
cascade composition would not be allowed.  Consider the communication events between
S1 and S2 in Figure 5.1.  If the outputs of S1 were unacceptable as inputs at S2 or an input
event  that  must  occur  at  S2  cannot  be  generated  by  S1  then  the  composition  would  not
succeed.  The composition would cause deadlock.  Input totality removes this problem.
McLean  does  not  require  input  totality  in  his  theory  of  Selective  Interleaving
Functions  [McLean94].    Instead,  he  has  an  interface  requirement  that  ensures  the
composition will succeed.  The input totality requirement can be replaced with an interface
requirement.    This  would  not  change  any  of  our  results  but  would  complicate  their
presentation.
5.4.  Emergent Properties
In the previous section we investigated how to determine the effects of composing
two  components  with  known  security  properties  in  cascade.    In  this  section  we  will
examine emergent properties.  As mentioned in section 5.2 an emergent property  is  one
- 54 -
that is not satisfied by every constituent component but is satisfied by the overall system.
One  fundamental  question  that  has  not  been  answered  is  whether  emergent  security
properties exist?  As we shall show the answer is yes.
Example  5.4  demonstrated  that  the  composition  of  a  Noninference  secure
component and a Generalized Noninterference secure component results in a system that
satisfied  Generalized  Noninference.    We  do  not  believe  that  this  example  proves  the
existence of emergent properties.  In this case the properties of the components both imply
Generalized  Noninference. 
  In  Example  5.2  we  demonstrated 
that  Generalized
Noninference was not a composable property because it did not guarantee the existence of
compatible  communication  events. 
  However, 
the  existence  of 
the  compatible
communication  events  is  guaranteed  by  Generalized  Noninterference.    Therefore  we  do
not consider this an example of emergence since both components also satisfy Generalized
Noninference.
We  also  want  to  eliminate  from  consideration  the  case  where  the  components
satisfy more than one property.  For example Generalized Noninterference does not imply
nor  is  implied  by  Noninference. 
  But  a  component  can  be  both  Generalized
Noninterference  secure  and  Noninference  secure.    In  composing  two  Generalized
Noninterference components it might be that the resulting system satisfies Noninference.
If both components satisfied Noninference then this would not be a surprise.  If one (or
both) of the components didn’t satisfy Noninference then this would be an example of an
emergent property.  We will demonstrate that if a composed system satisfies Noninference
then each component must also satisfy Noninference.
We  will  demonstrate  that  there  exists  a  security  property  such  that  two
components that both do not satisfy the property when composed result in a system that
does satisfy the property.  We will not attempt to justify the usefulness  of  the  property.
We only want to demonstrate that such properties exist.
Example 5.5: Consider the property EMERGENT:
:traces(S)|L(cid:215)
EMERGENT( B ) ”
t|HO=<>
(cid:215)  EMERGENT(Blow(t, S))
 $ s:B(cid:215) s|HI=<>(cid:217)
EMERGENT  is  Generalized  Noninference  with  the  added  stipulation  that  the
output  sequence  cannot  be  empty.    Consider  the  composition  of  two  components  such
- 55 -
"
t
(cid:216)
that  S1  satisfies  Noninference  and  does  not  satisfy  EMERGENT  and  S2  satisfies
EMERGENT.  Notice that Noninference is neither implied by nor implies EMERGENT.
This  follows  because  EMERGENT  ensures  that  the  high  level  output  sequence  is  not
empty but Noninference requires it to be empty.
1:traces(S1)|L(cid:215)
$ t1:Blow(t 1,S1)(cid:215) t1|H1=<> (cid:217)
2:traces(S2)|L(cid:215)
$ t2:Blow(t 2,S2)(cid:215) t2|HI2=<>(cid:217)
t2|HO=<>
:traces(S)|L(cid:215)
$ t1:Blow(t
|E1,S1)(cid:215) t1|H1=<> (cid:217)
traces(S) : interleave(traces(S1),traces(S2))
 $ t2:Blow(t
|E2,S2)(cid:215) t2|HI2=<>(cid:217)
t2|HO=<>
= "
= "
= "
:traces(S)|L(cid:215)
t2|HI2=<>(cid:217)
:traces(S)|L(cid:215)
:traces(S)|L(cid:215)
|E1,S1)(cid:215)
$ t1:Blow(t
t2|HO=<>
$ t:Blow(t ,S)(cid:215) t1|H1=<> (cid:217)
$ t:Blow(t ,S)(cid:215) t|HI=<> (cid:217)
$ t2:Blow(t
|E2,S2)(cid:215) t1|H˙ C=t2| H˙ C (cid:217)
Distributive Law
 t1|H1=<> (cid:217)
Lemma 5.1
t2|HO=<> Cascade Composition
 t2|HI2=<>(cid:217)
t|HO=<>
The resulting system satisfies EMERGENT but both components did not satisfy it.
Therefore, there exist emergent properties.  This example does not violate Conjecture 5.1
because there does not exist a composable property,  P, such that Noninference implies P
and EMERGENT implies P9.
G
Now  that  we  have  demonstrated  the  existence  of  emergent  properties  we  will
provide  a  criterion  that  allows  the  system  designer  to  determine  if  a  property  might
emerge under composition.  Before we present the criterion some definitions are required.
Definition 5.2: Event Removing Operator.
Given an event system S= the operation S\a
following system S’=:
, a
E yields the
E’ = E\a
I’ =  I\a
O’ =  O\a
and T’ = { t | t|E’˛
 }
9 
If such a P existed then EMERGENT would be a composable property.  But, EMERGENT is not
composable for the same reasons Generalised Noninference is not composable.
- 56 -
"
t
"
t
(cid:216)
(cid:222)
"
t
(cid:216)
t
(cid:216)
t
(cid:216)
t
(cid:216)
˝
T
The  above  operator  removes  all  occurrences  of  an  event  from  the  event  system.
The following definition will use the above operator to give a condition on properties.  We
will then show that this condition has an impact on the existence of emergent properties.
Definition 5.3: Stable Property.
A  property  P  will  be  called  stable  if  and  only  if  for  all  systems  S,
:power_set(E)(cid:215) P(S)(cid:222) P(S\a ).
A system that satisfies the stability property is such that removing any number of
the  events  will  result  in  a  system  that  still  satisfies  the  property.    How restrictive  is  the
stability  requirement?    All  security  properties  presented  in  the  literature  satisfy  this
requirement (see Appendix A). The security property EMERGENT of Example 5.5, that
was used to demonstrate the existence of emergent properties, does not satisfy the stability
requirement.    We  do  not  believe  that  the  stability  requirement  imposes  an  unduly  harsh
restriction on security properties.  Furthermore, we are not forcing all security properties
to satisfy this property.  If a desirable property does not satisfy the stability requirement
then  the  previous  results  can  be  used  to  determine  composability.    Unfortunately,  no
general comment can be made about how a non stable property might emerge.
Consider  the  cascade  composition  of  two  components  S1  and  S2  such  that  their
composition results in a system S that satisfies a property P.  If the property P satisfies the
stability  requirement  then  we  can  conclude  P(S\E2)  and  P(S\E1).    This  follows  from  the
stability  condition  that  any  subset  of  the  events  can  be  removed  and  the  property  still
holds.    This  result  has  obvious  implications  for  the  ability  of  the  property  P  to  emerge
under composition.
If a property, P, satisfies the stability requirement  then  a  necessary  condition  for
the  composition  of  two  components  S1=  and  S2=  to  yield  a
*>  and
system  that  satisfies  P  is  if  P(S1
*)  where  S1
*)  and  P(S2
*= equal:
*,T2
* = E1
E1
* = I1
I1
* = O1\I2
O1
* = T1
T1
E2
I2
O2
T2