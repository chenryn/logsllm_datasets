### 4.4.3 Node Processing State Initialization
When a new node is added to a Trust Target Graph (TTG), its processing state should be initialized as follows:
- A trivial target is considered fully processed.
- For an attribute target, denoted as \( T = \{K_V : K.r \rightarrow K_S\} \):
  - If \( K.r \) is a dummy attribute, the target is marked as "opponent-processed," meaning the opponent cannot process it.
  - Otherwise, it is marked as "verifier-processed."
- An intersection target is initially marked as "opponent-processed."

### 4.4.4 Verifier-Side Processing
We now define the candidate update operations that a negotiator \( K_V \) using configuration \( G \) can perform on nodes for which \( K_V \) is the verifier. These rules apply to nodes that are not yet marked as "verifier-processed."

1. **Processing \( T = \{K_V : K.r \rightarrow K_S\} \)**
   - (a) For each locally available policy statement \( K.r \leftarrow K_1.r_1 \) where \( K.r \) is a dummy attribute (controlled by the negotiator), \( K_V \) can add an implication edge \( T \rightarrow \{K_V : K_1.r_1 \rightarrow K_S\} \).
   - (b) \( K_V \) can mark \( T \) as "verifier-processed" only after all possible edges have been added according to (a).

2. **Processing \( T = \{K_V : K_1.r_1 \cap \ldots \cap K_n.r_n\} \)**
   - (a) \( K_V \) can add \( n \) intersection edges, \( T \rightarrow \{K_V : K_j.r_j \rightarrow K_S\} \) for \( 1 \leq j \leq n \).
   - (b) \( K_V \) can mark \( T \) as "verifier-processed" only after all edges have been added.

### 4.4.5 Opponent-Side Processing
We now define the candidate update operations that a negotiator \( K_S \) using configuration \( G \) can perform on nodes for which \( K_S \) is the subject. These rules apply to nodes that are not yet marked as "opponent-processed."

1. **Processing \( T = \{K_V : K.r \rightarrow K_S\} \) when \( Ack_G(K.r) \) is trivially satisfied (i.e., \( K.r \) is not sensitive and does not reach any sensitive attribute in the delegation credential graph)**
   - (a) If \( K.r \leftarrow K_S \in E_G \), \( K_S \) can add an implication edge \( T \rightarrow \{K_V : K_S \rightarrow K_S\} \).
   - (b) If \( K.r \leftarrow K_1.r_1 \in L_G \), \( K_S \) can add an implication edge \( T \rightarrow \{K_V : K_1.r_1 \rightarrow K_S\} \).
   - (c) \( K_S \) can mark \( T \) as "opponent-processed" if \( T \) is satisfied or if (a) and (b) are done.

2. **Processing \( T = \{K_V : K.r \rightarrow K_S\} \) when \( Ack_G(K.r) \) is not trivially satisfied**
   - (a) \( K_S \) can add a control edge \( T \rightarrow \{K_S : eAck \rightarrow K_V\} \), where \( eAck = Ack_G[K.r] \).
   - (b) After (a) is done and \( \{K_S : eAck \rightarrow K_V\} \) is satisfied, if \( K_S \) has the credential \( K.r \leftarrow K_S \in E_G \), \( K_S \) can add the implication edge \( T \rightarrow \{K_V : K_S \rightarrow K_S\} \).
   - (c) If \( K_S \) has the credential \( K.r \leftarrow K_1.r_1 \in L_G \), \( K_S \) can add the implication edge \( T \rightarrow \{K_V : K_1.r_1 \rightarrow K_S\} \).
   - (d) \( K_S \) can mark \( T \) as "opponent-processed" if \( T \) is satisfied or all of the above steps are done.

The above processing rules defend against backward positive- and negative-inference attacks discussed in Section 2. For example, if \( K_S \) should have \( K.r \leftarrow K_1.r_1 \), and \( K_V \) should establish the target \( \{K_V : K.r \rightarrow K_S\} \), \( K_S \) does not mark this target processed until it has added the implication child \( \{K_V : K_1.r_1 \rightarrow K_S\} \). \( K_S \) will then add a control child to the latter target using \( K_S \)'s ack policy for \( K_1.r_1 \). Consequently, the satisfaction state of \( \{K_V : K.r \rightarrow K_S\} \) will not become either satisfied or failed until the ack policy for \( K_1.r_1 \) has been satisfied.

### 4.5 Safety of TTG Strategies
**Theorem 4.2.** For each choice operation meeting the requirements discussed in Section 4.4, the induced TTG strategy \( TTG_{strat} \) is credential-combination hiding.
- The proof is found in Appendix D.

### 5. SAFETY OF ACCESS-CONTROL POLICY ENFORCEMENT
In this paper, we use acknowledgment (ack) policies, but not Access Control (AC) policies, for protecting credentials and their attribute information content. The primary distinction between AC policies and ack policies is that AC policies are defined only for resources the negotiator actually has, while ack policies can be defined for an attribute whether the negotiator has the attribute or not. This means that when a credential's AC policy is used during negotiation, the fact that the negotiator has the credential may be disclosed. By contrast, ack policies can be used without this information leakage.

We emphasize that AC policies cannot be used to safely protect the attribute information contained in credentials according to any notion of safety along the lines discussed in Section 3. However, the use of AC policies for protecting credentials has a longer history [Winsborough et al. 2000] than the use of ack policies [Winsborough and Li 2002b], and may serve a complementary purpose in a system, for instance, if the signed credential is considered more sensitive than its unsigned content.

It is straightforward to add AC policies to our formal model of ATN for additional protection of credentials. We now discuss the deficiencies in prior work of the traditional definition of safety for AC policies and present a definition following the spirit of providing meaningful notions of safety.

The existing safety definition of AC policies is inadequate even when not considering the leaking of attribute information. The requirement that "credentials should not be disclosed until AC policies for them are satisfied" is acceptable only for ATN systems of certain kinds, i.e., those that use credentials only by directly transmitting them. It is inadequate for ATN systems that take advantage of the fact that credentials are structured objects, e.g., by using the signatures to compute messages in a protocol without transmitting the signatures themselves [Li et al. 2003; Holt et al. 2003].

There are two parts of the requirement that are imprecise:
1. **Credential Disclosure:** The term "credential is disclosed" is undefined. What does it mean? Clearly, sending the exact bit-string of a credential should be viewed as the credential flowing. What if one does not send the exact bit-string, but sends something (presumably derived from the bit-string) that enables everyone to verify that the credential exists? For example, if \( \sigma \) is the signature, then one could send the content (but not the signature) of the credential and \( \theta = 2\sigma \); the receiver can recover the signature easily. One may argue that, in this case, the receiver recovers the complete credential, and thus the credential is disclosed. Now consider the case that some value derived from the signature is sent to the opponent, enabling the opponent to verify that the signature exists but not to recover the signature. (Such a value is easily constructed for RSA signatures [Rivest et al. 1978].) Whether this constitutes a disclosure of a credential is not so clear. This becomes even less clear in the case that one uses a zero-knowledge protocol to convince the opponent that one holds the credential, but the opponent cannot use the communication transcript to convince any other party of this. We believe that a suitable notion of AC-policy enforcement should not permit any of these forms of credential disclosure to unauthorized recipients. To capture all such forms of credential disclosure, the precise definition of "a credential is not disclosed" should be "the same communication transcripts can be generated efficiently without having access to the credential." Note that we do not require such transcripts be generated by negotiators during trust negotiation; we only require that there exists an algorithm that can generate such transcripts efficiently. Since the transcripts can be generated without access to the credential, clearly the credential is not disclosed. This is similar to the notion of simulations and zero-knowledge proofs used in the cryptography literature.

2. **AC Policy Satisfaction:** The second part of the requirement that is imprecise is "until AC policies are satisfied." This is related to the discussion above; how are AC policies satisfied? Does one have to see credential bit-strings, or is it sufficient to be convinced that the credential exists? We argue that a straightforward definition is that "credentials are not disclosed to parties who do not satisfy the corresponding AC policies." The disclosure of a credential does not violate security so long as the opponent holds the necessary credentials to satisfy the credential's AC policy.

To summarize, the AC safety requirement should be as follows:

**Definition 5.1 (Safety of Access-Control Policies).** A negotiation strategy is AC safe if for every configuration \( G \), for every adversary \( M \), and for every feasible attack sequence \( seq \), the response sequence induced from \( G \) by \( seq \) can be efficiently computed without credentials whose AC policies are not satisfied by \( M \).

The notion of credentials not being disclosed is formalized here by saying that it is not necessary to have access to the credentials to efficiently play the negotiator's part in the negotiation. Also note that, instead of making requirements on the order of events, we simply require that to receive credentials governed by an AC policy, an opponent must possess credentials satisfying that AC policy.

### 6. RELATED WORK
Automated trust negotiation was introduced by Winsborough et al. [2000], who presented two negotiation strategies: an eager strategy in which negotiators disclose each credential as soon as its access-control policy is satisfied, and a "parsimonious" strategy in which negotiators disclose credentials only after exchanging sufficient policy content to ensure a successful outcome. The former strategy has the problem that many irrelevant credentials may be disclosed; the latter, that negotiators reveal implicitly, and in an uncontrolled way, which credentials they hold, by transmitting access-control policy content for them. The length of negotiations in both strategies is, at most, linear in the number of credentials the two parties hold. Yu et al. [2000] introduced the quadratic "prunes" strategy, which requires negotiators to explicitly reveal arbitrary attributes with no protection.

Yu et al. [2003] developed families of strategies called disclosure tree protocols that can interoperate in the sense that negotiators can use different strategies within the same family. Seamons et al. [2001] and Yu and Winslett [2003b] studied the problem of protecting contents of policies as well as credentials. These previous works did not address the leaking of sensitive attribute information.

On the aspect of system architecture for trust negotiation, Hess et al. [2002] proposed the Trust Negotiation in TLS (TNT) protocol, which is an extension to the SSL/TLS handshake protocol by adding trust negotiation features. Winslett et al. [2002] introduced the TrustBuilder architecture for trust negotiation systems.

The problem of leaking attribute information was recognized by Seamons et al. [2002] and Winsborough and Li [2002b]. Winsborough and Li [2002a, 2002b] introduced the notion of ack policies to protect this information and studied various inferencing attacks that can be carried out. However, a precise notion of safety was not provided in this work.

Yu and Winslett [2003a] introduced a technique called policy migration that seeks to make it more difficult for the adversary to infer information about a negotiator's attributes based on AC policies. In the versions of credential AC policies disclosed during ATN, the technique moves requirements from policies governing credentials defining sensitive attributes to those of other credentials that are also required by the ATN. This approach obscures the information carried in the ATN about the negotiator's sensitive attributes, but it does not hide it entirely. For instance, by observing multiple negotiations, an adversary can observe that the AC policies presented for a given credential are not always the same and then infer that the negotiator has another credential that the adversary has requested. Moreover, the technique can sometimes cause negotiation to fail when success is possible. For these reasons, it seems clear that policy migration is not an adequate solution to the problem.

The notion of credential-combination hiding is similar to the notion of non-interference [Goguen and Meseguer 1982], which considers a system that has inputs and outputs of different sensitivity levels. A system can be defined as noninterference secure if low-level outputs do not depend upon high-level inputs. The definition for credential-combination-hiding safety says that the behavior the adversary can observe (i.e., low-level outputs) does not depend on credentials proving unacknowledgeable attributes (i.e., high-level inputs). The notion of attribute-combination hiding is similar to the notion of nondeducibility [Sutherland 1986], which requires that low-level outputs be compatible with arbitrary high-level inputs. Our definitions deal with a system that involves communication between the two parties and we want to ensure that one party cannot tell the state of another party. Our notions of indistinguishable configurations are also reminiscent of security definitions for cryptographic protocols.

Inference control has received a lot of attention, particularly in the context of multilevel databases [Staddon 2003], statistical databases [Domingo-Ferrer 2002; Wang et al. 2003], and, to a lesser extent, in deductive databases [Bonatti et al. 1995]. Most of this work focuses on limiting the information that can be deduced from answers to multiple queries. Such schemes require that history information be maintained, allowing multiple interactions with the same party to be correlated, which is a very strong assumption in our context of open systems, an assumption that we do not make. As a result, our approach is quite different.

### 7. CONCLUSION
Although many ATN schemes have previously been proposed, precise security definitions and formal models have been lacking. This paper provides a formal framework for analyzing the safety of ATN strategies, focusing on the prevention of sensitive attribute information leakage. We introduce and formalize the notion of credential-combination hiding and provide a detailed analysis of the safety of different negotiation strategies. Future work will involve extending these concepts to more complex scenarios and integrating them into practical ATN systems.