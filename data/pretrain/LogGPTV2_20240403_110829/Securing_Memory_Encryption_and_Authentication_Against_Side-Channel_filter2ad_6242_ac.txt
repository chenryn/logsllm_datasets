2l−j − 1
0 ≤ i ≤ m
0 ≤ j ≤ l − 2
While all ciphertexts and tags are stored in public, un-
trusted memory, the root key kek0,0 is stored on the leaking
chip.
5.1.1 Read Operation
When reading data (ci, ti) from memory, all the keys on
the path from the root key kek0,0 down to the respective
data encryption key deki are decrypted one after another.
The data encryption key deki is then used to decrypt and
authenticate the respective memory block (ci, ti).
For example in Figure 2, to obtain the plaintext block
p2 stored in (c2, t2), the root key kek0,0 is used to decrypt
kek1,0. Then, kek1,0 is used to decrypt kek2,1, which per-
mits to decrypt dek2. Finally, dek2 is used with (c2, t2) to
authenticate and decrypt the respective plaintext p2.
Note that the decryption of the encapsulated keys can only
be performed sequentially. However, this is not considered
a problem since computation is typically much faster than
storage (e.g., RAM or HDD). On the other hand, caching of
the intermediate nodes (key encryption keys) is supported
by Meas in order to achieve good performance, e.g., small
average access latency.
5.1.2 Write Operation
Writing data to the memory is where the actual re-keying
is performed. Namely, the process of updating pi with p(cid:48)
i
involves the replacement of all keys along the path from the
root key kek0,0 down to the respective data encryption key
deki with randomly generated ones. On the other hand, the
keys for the adjacent subtrees are only reencrypted under
the new node keys. This re-keying can be performed in a
single pass from the root to the leaf node of the tree.
For example in Figure 2, when block p5, which is stored
in (c5, t5), gets replaced, also the keys kek0,0, kek1,1, kek2,2
and dek5 have to be changed. Therefore, the node c0,0 is
5, t(cid:48)
1,1 with the new key encryption key kek(cid:48)
decrypted to extract kek1,0 and kek1,1. The new node c(cid:48)
0,0
can then be determined by encrypting kek1,0 and a new
kek(cid:48)
0,0. The nodes
c1,1 and c2,2 are updated in the same way. The new data
block (c(cid:48)
5) is then the result of authenticated encryption
of p(cid:48)
5 under the new data encryption key dek(cid:48)
5.
Note that it is not necessary to check authenticity when
a full block is written to the memory. Only read-modify-
write operations on a data block require an authenticity
check. This authenticity check is automatically performed
when the data is read prior to modiﬁcation and thus does not
inhere any additional costs. Also note that read-modify-write
operations require only one single tree traversal, because
the data encryption key required for the read operation
automatically becomes available in the last steps of the write
(and re-keying) procedure.
5.2 Authenticity
The design of Meas protects data authenticity with re-
spect to spooﬁng, splicing, and replay attacks using both
the authentic root key and the AE scheme. In particular,
spooﬁng and splicing attacks on the leaf nodes are directly
detected by the AE scheme since diﬀerent keys are used for
each block. Moreover, the AE scheme indirectly also protects
the inner tree nodes for properly chosen schemes AE and
EN C. In such case, any tampering with the ciphertext of an
intermediate node will lead to a random but wrong key to
be decrypted. This tampering will thus propagate down to
the leaf node to give an erroneous, random data encryption
key and ﬁnally an authentication error.
Replay protection for all nodes is the result of the authentic
root key, which gets updated on every write to any leaf node,
i.e., choosing a new, random root key on every write access
ensures that the secure root reﬂects the current state of
the tree in public memory. Vice versa, the authenticitiy
tags in the leaf nodes output by the AE scheme reﬂect the
authenticity of the path from the root to the respective data
block. Therefore, if the authenticity check of a leaf node
fails, any node on the path from the root to the leaf may be
corrupted.
5.2.1 Handling corruption
As soon as a corrupted leaf node has been detected, it
is required that the authenticity of the tree is restored be-
fore any further actions are taken. Otherwise, an adversary
may be able to perform DPA attacks on encryption keys by
introducing authenticity failures on purpose.
Restoring authenticity of the tree is simple and requires
no additional support. It is suﬃcient to replace all corrupted
data (leaf) nodes with random values since regular writes
restore authenticity from the root to the respective leaf node.
Restoring authenticity in this manner also causes re-keying
on all nodes on the path from the root to the leaf to take
place. This re-keying procedure eﬀectively thwarts any DPA
that otherwise could be performed by malicious modiﬁcation
of stored ciphertexts.
For example in Figure 2, if the authenticity check of the
node (c4, t4) fails, any of the nodes c0,0, c1,1, c2,2 and (c4, t4)
can be erroneous. Therefore, the plaintext p4 is replaced with
a random plaintext p(cid:48)
4 in order to restore the authenticity.
0,0, kek(cid:48)
Hereby, new keys kek(cid:48)
4 are chosen
0,0, c(cid:48)
and the stored values c(cid:48)
4) are updated
accordingly. This procedure restores the authenticity of the
1,1, kek(cid:48)
1,1, c(cid:48)
2,2 and dek(cid:48)
2,2 and (c(cid:48)
4, t(cid:48)
695Figure 2: Meas’s tree construction for m = 8 data blocks and with an arity of a = 2.
path from kek0,0 to dek4, but leaves any adjacent subtree in-
tact. Moreover, the choice of fresh keys kek(cid:48)
and dek(cid:48)
peatedly modifying c(cid:48)
2,2
4 prevents ﬁrst-order DPA through adversaries re-
2,2 or (c(cid:48)
0,0, kek(cid:48)
1,1, kek(cid:48)
0,0, c(cid:48)
1,1, c(cid:48)
4, t(cid:48)
4).
5.2.2 Recovering from corruption
Depending on the actual application, there are diﬀerent
approaches to deal with the corruption. A straightforward
approach, which is suitable for RAM encryption, is to simply
reset the tree and start from scratch. The memory encryption
engine of SGX [17], for example, follows this approach and
requires a system restart to recover. However, applying this
idea to block-level disk encryption is impractical since a reset
of the tree is equivalent to destroying the data of the whole
block device.
Another, more graceful approach is to recover from the
corruption when possible. In the case of RAM encryption,
it is, for example, possible that the operating system kills
(and restarts) only those processes which actually accessed a
corrupt data block. In the setting of disk encryption, it can
be enough to report which ﬁles or directories were destroyed
to enable appropriate error handling.
Given a single authentication failure, it is not possible to
determine which node is corrupt. However, since corruptions
in higher tree nodes lead to authenticity failures in more
data blocks, it is possible to identify the subtree which is
aﬀected by the data corruption using multiple adjacent reads.
This can even be done quite eﬃciently in a binary search like
approach (i.e., O(log m) reads), assuming that only a single
node has been corrupted.
For example in Figure 2, when the authenticity check of
data block 2, i.e., (c2, t2), fails, then data block 3 is checked
next. If block 3 is authentic, then only block 2 (child of dek2)
is corrupt. Otherwise, either block 0 or block 1 is checked
next. If this next block is authentic, then only blocks 2 and 3
(children of kek2,1) have been corrupted. In case of another
error, a ﬁnal check in the right subtree (children of kek1,1)
is needed to determine if only the left subtree (children of
kek1,0) or the whole tree is corrupt. Note however that
locating the corruption requires each authenticity failure to
be followed by a re-keying step as described in Section 5.2.1
in order to resist DPA. For example, if data block 2 is read
and detected to be corrupt, the path from the root key to
data block 2 must be re-keyed. If during the location phase
data block 3 is detected to be unauthentic as well, also the
path from the root key to data block 3 must be re-keyed. The
same procedure applies to all other checks in the location
phase.
5.3 Side-Channel Discussion
We discuss the side-channel security using three types of
attackers with increasing capabilities. The ﬁrst type solely
uses passive attacks and tries to exploit the side-channel
leakage during operation. The second type additionally in-
duces authenticity errors by tampering with the memory and
strives for exploiting error handling behavior. The third type
further tries to gain an advantage by restarting, i.e., power
cycling, the whole system at arbitrary points in time.
Passive Attacks.
The protection of Meas against DPA lies within the re-
keying approach. Therefore, every randomly generated key
is used for the encryption and decryption of exactly one tree
node with one speciﬁc plaintext. As soon as the plaintext of
a node changes in any way, also a new key for the encryption
of the respective node is generated.
For a certain key, a physical attacker who only passively
observes Meas can thus at most acquire side-channel traces
of one encryption and arbitrarily many decryptions of one
single plaintext. Even though the trace number is possibly
high, the best an attacker can do is to combine all the traces
to a single rather noise free trace of this one key-plaintext
pair. To perform a DPA, on the other hand, traces for
multiple diﬀerent plaintexts are required. In the presence of
a passive physical attacker, Meas is therefore secure against
ﬁrst-order DPA attacks given that both EN C and AE are
SPA secure.
Passive Attacks and Memory Tampering.
An active physical attacker who tampers with the memory
content can gain additional information by corrupting the
ciphertext of certain nodes. Namely, such tampering gives
side-channel information from the decryption of diﬀerent data
for one single key. However, even with such tampering it is
only possible to acquire one additional side-channel trace for
a speciﬁc key. This is due to the fact that every tampering is
detected as soon as the leaf node is authenticated. Handling
the authentication error involves restoring authenticity and
thus re-keying which makes the gathering of further traces
impossible. As a result, the number of acquirable traces (i.e.,
under the same key, but with diﬀerent ciphertexts) is clearly
bounded by two. Given the assumptions in related work on
leakage-resilient cryptography [36,41,44], bounding the input
data complexity per key by two makes Meas secure against
ﬁrst-order DPA for malicious memory corruption.
c1t1dek0dek1kek2,0kek2,1kek0,0c0t0c3t3dek2dek3c2t2c5t5dek4dek5c4t4c7t7dek6dek7c6t6kek2,2kek2,3kek1,0kek1,1c2,0c2,1c2,2c2,3c1,0c1,1c0,0696Passive Attacks, Memory Tampering and Restarts.
The side-channel security of Meas relies on the assumption
that tree operations are performed atomically. This means
that, e.g., once a read operation is started, all steps involved
in Meas, i.a., the MAC veriﬁcation and the re-keying on
authenticity failure, must be performed and completed. This
assumption holds true for a running device since physical
fault attacks on the leaking chip are outside the threat model.
However, restarting the device during operation can break
this assumption. In this case, attackers can use a combination
of power cycling and memory tampering to collect arbitrarily
many side-channel traces and perform a ﬁrst-order DPA
against a non-volatile key. However, this attack is easily
prevented when the concrete use case is known.
For the encryption and authentication of RAM, there is
simply no reason to maintain persistent keys between system
restarts. Similar to SGX, the device generates a new random
key on startup which eﬀectively thwarts the attack. For NVM,
however, a persistent root key is unavoidable. Yet, there
are easy and secure solutions for NVM too. For example,
one could store one additional bit on the leaking chip to
record whether a presumably atomic operation is currently
active. This allows to detect aborted operations in Meas on
startup and thus to take further actions, e.g., counting and
storing the number of aborted operations on the leaking chip
and appropriate error handling when a certain threshold is
reached. Such countermeasures can also be integrated with
the transaction/journaling functionality of a ﬁle system.
Summarizing, Meas itself does not contain any mechanism
to deal with malicious power cycling. However, for both RAM
and NVM simple and cheap solutions are available.
6. HIGHER-ORDER DPA SECURITY
The tree construction presented in the previous section pro-
vides memory conﬁdentiality and authenticity in the presence
of a ﬁrst-order side-channel adversary. However, proﬁled,
second-order attacks as outlined in Section 4 still reveal the
content of the tree nodes protected by the means of re-keying.
Since the loss of conﬁdentiality of a node close to the root
would also reveal large chunks of the protected memory,
i.e., all child nodes, protection against higher-order DPA is
desireable.
In this section, we propose masking of the plaintext values
to extend the protection of Meas to higher-order DPA. The
extension works with cryptographic primitives implemented
without DPA countermeasures and allows to dynamically
adjust the protection order depending on the actual threat.
6.1 Concept
The basic idea to provide higher order DPA security is to
add a masking scheme (cf. Section 3.4.1) to Meas. However,
unlike the masking of speciﬁc cryptographic implementations,
the proposed data masking scheme operates with unprotected
primitives. Therefore, the plaintext data in each tree node of
Meas is ﬁrst masked, and then the masked plaintext and the
masks are encrypted separately and both stored in memory.
On decryption, both the masked plaintexts and the masks
are decrypted and the masks applied to obtain the original
plaintext value.
The masking scheme requires new masks to be chosen
whenever the key of a tree node is changed. This is the case
on every write access to a speciﬁc node. As a result, the data
being encrypted is randomized. This prevents that constant
data is encrypted under diﬀerent keys. Moreover, it requires
adversaries trying to learn a constant plaintext using proﬁled
attacks such as described in Section 4 to additionally ex-
tract information on every single mask from the side-channel.
Therefore, the order of the attack increases accordingly.
6.2 Masking Details
The following masking approach can be applied accordingly
to both the intermediate nodes, which use an encryption
scheme EN C, and the leaf nodes, which use an authenticated
encryption scheme AE. However, for simplicity we only
consider the encryption of an arbitrary tree node using an
encryption scheme EN C.
When encrypting a tree node in Meas, the node’s plaintext
p is split into b + 1 blocks p0, ..., pb according to the size of the
underlying encryption primitive, i.e., 128 bits in case of AES.
In order to protect this node against d-th order DPA, d − 1
random and secret masks m0, ..., md−2 have to be generated.
These masks are then applied to each plaintext block pi to
give random values ri:
ri = pi ⊕ m0 ⊕ ... ⊕ md−2
0 ≤ i ≤ b.
In the actual encryption, both the masks m0, ..., md−2 and
the random values r0, ..., rb are processed and the respective
ciphertext c is stored in memory:
c = EN C(dek; m0||...||md−2||r0||...||rb).
Whenever the node has to be read, the ciphertext is de-
crypted to give m0||...||md−2||r0||...||rb. To obtain the plain-
text blocks pi, the masking is reverted by again xor-ing all
masks m0, ..., md−2 to each block ri.