译文声明  
本文是翻译文章，文章原作者Youstin，文章来源：[https://youst.in/](https://youst.in/posts/cache-poisoning-at-scale/)  
原文地址：[Cache Poisoning at Scale (youst.in)](https://youst.in/posts/cache-poisoning-at-scale/)
译文仅供参考，具体内容表达以及含义原文为准
发现并利用70多种缓存投毒漏洞
尽管Web缓存投毒已活跃多年，而趋于复杂的技术栈会不断引入难以预料的行为，这些行为可能会被滥用以完成新的缓存投毒攻击。在本文我会用来向各种Bug
Bounty程序报告70多个缓存中毒漏洞的技术。如果你对Web缓存投毒的基础内容不熟悉，我高度建议你阅读albinowax写的真实Web缓存投毒这篇文章。
## 背景故事
在2020年12月19日，我发布了一篇关于一种特定案例下影响Varnish配置的短文，其中写到当发送一个大写形式的主机头时可以实现缓存投毒。不幸的是，由于其需要特定的自定义Varnish配置，因此扫描它并没有给我带来其他结果。令我惊讶的是，在发布文章后不久，我意识到Cloudflare也容易受到相同的大写主机头攻击，但这一次，它不需要自定义配置。这意味着
cloudflare 在将主机标头引入缓存密钥之前将其小写，但始终按照客户端发送的方式进行转发。如果 Cloudflare
后面的任何后端在发送大写主机标头时会以不同的响应进行响应，则缓存会受到毒害。您可以在我[之前的文章中](https://youst.in/posts/cache-key-normalization-denial-of-service/)阅读有关此特定技术的更多信息，但是Fastly和Cloudflare现在都已修复了该行为。由于这种微妙的不一致影响了一个很好的错误赏金目标子集，我决定看看我可以大规模识别和利用哪些其他常见模式。
## Apache Traffic Server 中 URL
片段的错误处置（[CVE-2021-27577](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-27577)）
Apache Traffic Server（ATS）是雅虎和苹果广泛使用的缓存HTTP代理。当发送到 ATS 的请求包含 url 片段时，ATS
会转发该片段，而不会剥离该片段。根据[RFC7230，ATS](https://datatracker.ietf.org/doc/html/rfc7230)转发的请求是无效的，因为源表单应该只由绝对路径和查询组成。
此外，ATS 通过提取主机、路径和查询来生成缓存密钥，而忽略 url 片段。因此，这意味着下面的两个请求将共享相同的缓存密钥：
ATS 在生成缓存密钥时忽略 url 片段，但仍然转发它，这为缓存中毒攻击创造了巨大的机会。当 ATS 背后的代理配置为 编码为
时，攻击者可以在任何缓存键下缓存完全不同的路径。我能够使用这种技术来毒害静态文件，如下所示：`#``%23`
如果后端也进行完标准化处理 ，它将允许攻击者将用户重定向到任何路径，从而容易导致XSS攻击和Open重定向的激增。`/../`
## GitHub CP-DoS
由于缓存中毒漏洞的很大一部分是由未加密的报头引起的，因此我编写了一个工具，可以暴力破解未加密的报头并检测缓存投毒漏洞。这使我能够快速大规模扫描漏洞赏金目标。
由于许多漏洞赏金项目在其范围列表中包含Github存储库，因此一些存储库URL进入了我的目标列表。在浏览扫描结果时，我注意到当报头包含无效值时，所有github存储库都被标记为容易受到缓存投毒攻击的影响。`content-type`
即使扫描将Github Repos标记为易受攻击并且攻击在Burpsuite中起作用，我也无法在浏览器中复制。很明显，Github 正在将身份验证
Cookie
包含在缓存密钥中。虽然不可能为经过身份验证的用户中毒存储库，但可以删除访问它们的所有未经身份验证的用户的存储库，因为它们都共享相同的缓存密钥。这获得了7500美元的奖金，使其成为我收入最高的缓存中毒报告。
## GitLab CP-DoS
GitLab 使用 Google Cloud Platform 和 Fastly 在 上托管静态文件。默认情况下，Google Cloud Buckets
支持使用报头，这允许覆盖 HTTP 方法。追加标头 将返回一个 405 状态代码，默认情况下 Fastly
不会缓存该代码。但是，可以发送报头并将缓存中毒以返回空响应正文。
    https://assets.gitlab-static.net/*``x-http-method-override``x-http-method-override: POST``x-http-method-override: HEAD
此外，还启用了该方法，大大降低了攻击的复杂性。这获得了4，850美元的顶级赏金。除了GitLab之外，我还能够在许多其他赏金目标上使用相同的技术。`PURGE`
## X-Forwarded-Scheme - Rack 中间件
Ruby on Rails 应用程序通常与 Rack 中间件一起部署。下面的 Rack 代码采用该值的值，并将其用作请求的方案。x-forwarded-scheme
发送标头将导致 301 重定向到同一位置。如果响应由 CDN
缓存，则会导致重定向循环，从而固定地拒绝对文件的访问。这在大量赏金目标上被利用，例如：`x-forwarded-scheme: http`
### Hackerone.com 静态文件中的 CP-DoS
由于Hackerone的缓存配置设置为仅缓存静态文件，因此缓存中毒攻击仅限于静态文件。
尽管在报告DoS漏洞时超出了范围，但这仍然获得了2500美元的赏金。
### www.shopify.com的单一请求 DoS
同样的技术也影响了，但是Shopify的缓存配置增加了攻击的影响。由于服务器未配置为缓存 HTML 页面，但默认情况下缓存了 301
个请求，因此只需一个非定时请求即可触发缓存中毒 DoS。`www.shopify.com`
这最初被授予1300美元，但经过进一步调查后，发现这也会影响其他本地化的子域和主机，例如.由于该漏洞影响了许多 Shopify
主机，并且只需要一个请求即可使缓存中毒，因此赏金金额增加到 6300 美元。`apps.shopify.com`
### 21个子域下的存储型XSS
在测试私人程序时，我注意到Hackerone上发现的相同漏洞影响了他们所有的子域。然而，这一次，服务器也信任301重定向的标头，允许攻击者将JS文件重定向到攻击者控制的Javascript。`X-forwarded-host`
由于这可能导致在目标的主网站和超过21个其他子域上存储XSS，因此将其分类为严重，并奖励最高3000美元的赏金。
## Cloudflare 和 Storage Buckets
由于Cloudflare是使用最广泛的内容交付网络，因此S3等Storage