***可观测性应用智能分析平台***
**技术报告**
*\[申报单位\]*
*2022年5月*
**目 录**
[1 系统概述 [3](#系统概述)](\l)
[2 技术方案 [3](#技术方案)](\l)
[2.1 系统应用架构 [3](#系统应用架构)](\l)
[2.2 系统技术架构 [3](#系统技术架构)](\l)
[2.3 系统数据架构 [4](#系统数据架构)](\l)
[*2.4 系统安全架构 [4](#_Toc4712)*](\l)
[*2.5 系统业务架构 [4](#系统业务架构)*](\l)
[3 系统关键技术特点 [4](#系统关键技术特点)](\l)
[4 功能目标 [5](#功能目标)](\l)
[5 非功能目标 [6](#非功能目标)](\l)
[6 系统性能 [7](#系统性能)](\l)
[6.1 技术性能分析 [7](#_Toc13703)](\l)
[6.2 业务量统计 [8](#_Toc27640)](\l)
[7 系统效能 [8](#系统效能)](\l)
### 系统概述 {#系统概述 .样式-标题-3Heading-3-Char1Heading-3-Char-Char-Char-Char-Charh3-C...11}
*贵阳银行启动建设的可观测性应用智能分析平台是我行科技规划的一个重要内容。为了满足日志管理需求，统一规范运维监控业务流程，降低操作风险，提高贵阳银行内部控制和内部管理水平，贵阳银行根据自身的整体战略目标和信息技术发展规划，在广泛汲取国内外同业成功经验的同时，结合贵阳银行的资源现况，启动和实施了可观测性应用智能分析平台项目。可观测性应用智能分析平台为运维人员提供业务-服务-设备-指标等多种维度分析，以便了解应用系统运行状态，了解系统正在发生什么，加强了日志、链路、指标的关联，进而展现出全面正确的可观察性内容，以便缩短发现问题、解决问题的时间。*
### 技术方案 {#技术方案 .样式-标题-3Heading-3-Char1Heading-3-Char-Char-Char-Char-Charh3-C...11}
## 系统应用架构 {#系统应用架构 .样式2}
*可观测性应用智能分析平台从业务-服务-接口-设备四层维度对应用系统进行分析，对应架构图如下。*
![技术架构](media/image2.png){width="6.539583333333334in"
height="4.072916666666667in"}
*图 1. 可观测性应用智能分析平台应用架构*
## 系统技术架构 {#系统技术架构 .样式2}
> *对应技术架构图如下*
>
> ![](media/image3.jpeg){width="6.177083333333333in"
> height="3.1930555555555555in"}
*图 2. 可观测性应用智能分析平台技术架构*
## 系统数据架构 {#系统数据架构 .样式2}
> 可观测性应用智能分析平台支持接入全类型日志以便定位故障原因，但是对于接入的链路追踪日志、性能指标需要满足内置数据模型。只有满足数据模型的数据接入，才可以直接使用分析页面，对应数据架构图如下：
>
> ![](media/image4.png){width="5.760416666666667in"
> height="4.665972222222222in"}
*图 3. 可观测性应用智能分析平台数据架构*
## 系统业务架构 {#系统业务架构 .样式2}
## 可观测性应用智能分析平台提供业务-服务-设备-指标等多种维度分析，对应业务架构图如下： {#可观测性应用智能分析平台提供业务-服务-设备-指标等多种维度分析对应业务架构图如下 .list-paragraph .样式2}
## ![](media/image5.jpeg){width="6.470138888888889in" height="2.685416666666667in"} {#section .list-paragraph .样式2}
-   业务：从业务维度梳理系统当前状态，展示业务概况、业务详情，用户可以通过观察到的异常趋势深入探究业务详情，并通过业务拓扑图发现调用服务之间的关系与具体状态。业务拓扑同时支持历史回溯、服务详情、接口详情、查看具体异常请求等功能，帮助用户快速完成溯源分析。
-   服务：从服务维度梳理系统当前状态，从指标趋势和接口分析展示服务概况、服务详情，同时支持下钻到关联设备及调用链信息。
-   设备：蜂窝状视图让设备关键信息一目了然，点击详情进一步了解设备的相关信息、性能指标和相关服务。
-   全链路：提供链路追踪查询功能，用户可以使用业务，服务，接口，Local
    IP，Remote
    IP，traceID，耗时，请求结果等多种字段对调用链进行过滤。调用链详情展示每个请求的耗时，并能快速跳转至具体日志。
-   指标探索：用户无需使用SPL编程语言，利用分析区即可完成对指标时序数据的分析与可视化，支持聚合、时移及拆分，获得更深入的分析图表。
##  {#section-1 .list-paragraph .样式2}
### 系统关键技术特点 {#系统关键技术特点 .样式-标题-3Heading-3-Char1Heading-3-Char-Char-Char-Char-Charh3-C...11}
# **3.1**集中采集数据，实现数据融合 {#集中采集数据实现数据融合 .样式-标题-3Heading-3-Char1Heading-3-Char-Char-Char-Char-Charh3-C...}
可观测性数据融合支持对所有网络设备、安全设备、操作系统、数据库、中间件、业务应用、性能数据、第三方监控系统、告警系统的日志信息采集，支持不同日志格式自动识别解析，形成有意义的字段，同时建立数据模型，实现对链路数据的分析与追踪。
**3.2 告警归并技术**
告警归并技术可以把若干描述同一故障的报警智能归并，让值班工程师可以快速捕捉到故障本质，追寻故障根因。
![cruxee overview map](media/image6.jpeg){width="5.831944444444445in"
height="2.263888888888889in"}
#  {#section-2 .样式-标题-3Heading-3-Char1Heading-3-Char-Char-Char-Char-Charh3-C...}
# 告警归并工作示意图 {#告警归并工作示意图 .样式-标题-3Heading-3-Char1Heading-3-Char-Char-Char-Char-Charh3-C...}
# 项目对来自不同平台的告警智能归并，进行进一步的分析和使用，例如，三个源监控系统分别为rizhiyi，nagios和zabbix，可以同时将告警数据结构化到AlertCEF表中。 {#项目对来自不同平台的告警智能归并进行进一步的分析和使用例如三个源监控系统分别为rizhiyinagios和zabbix可以同时将告警数据结构化到alertcef表中 .样式-标题-3Heading-3-Char1Heading-3-Char-Char-Char-Char-Charh3-C...}
# 实时事件流工作模式，实时提取事件的本质信息，解决告警冗余并不是简单删除重复的告警，而是保留告警信息，并进行合理的合并。 {#实时事件流工作模式实时提取事件的本质信息解决告警冗余并不是简单删除重复的告警而是保留告警信息并进行合理的合并 .样式-标题-3Heading-3-Char1Heading-3-Char-Char-Char-Char-Charh3-C...}
# 提供默认归并策略，同时支持用户自定义归并策略。 {#提供默认归并策略同时支持用户自定义归并策略 .样式-标题-3Heading-3-Char1Heading-3-Char-Char-Char-Char-Charh3-C...}
# 解决告警冗余导致的告警风暴问题。告警的周期时间短，告警A和告警B有关联等应用情景都会产生告警冗余的问题，实际上运维人员并不需要处理那么多的告警，只需要处理归并后的事件。 {#解决告警冗余导致的告警风暴问题告警的周期时间短告警a和告警b有关联等应用情景都会产生告警冗余的问题实际上运维人员并不需要处理那么多的告警只需要处理归并后的事件 .样式-标题-3Heading-3-Char1Heading-3-Char-Char-Char-Char-Charh3-C...}
**3.3 日志分析技术**
采用业界最先进的流式大数据处理架构，构建的高性能、分布式日志处理架构可以每秒钟分析10万条日志，每天可以处理TB级的日志量，而且处理延时非常短，可以让用户搜索、分析几秒钟之前产生的日志。
流式计算集群具有如下特性：
● 轻量级快速处理
着眼大数据处理，速度往往被置于第一位。Spark允许Hadoop集群中的应用程序在内存中以100倍的速度运行，即使在磁盘上运行也能快10倍。Spark通过减少磁盘IO来达到性能提升，它们将中间处理数据全部放到了内存中。
● 无数据丢失
系统需要保证无数据丢失，这也是系统高可用性的保证。系统为了无数据丢失，需要在数据处理失败的时候选择另外的执行路径进行replay（系统不是简单的重新提交运算，而是重新执行调度，否则按照来源的call
stack有可能使得系统永远都在相同的地方出同样的错误）。
● 容错透明
用户不会也不需要关心容错。系统会自动处理容错，调度并且管理资源，而这些行为对于运行于其上的应用来说都是透明的。
**3.4** 基于自然语言处理技术的日志聚类和日志异常定位
从三个方面对数据中心设备或应用日志异常检测问题展开设计：日志解析，单条异常日志检测，异常日志序列检测。
首先，从历史日志消息中构建频繁项前缀树以学习消息模板，从而构建模板库。基于模板库，可以将历史日志消息映射到对应的模板上。然后，基于模板库将实时日志消息映射到对应的模板上。如果发现实时日志消息无法映射到任一模板上，则自动地、增量式地从该日志消息中学习模板，并扩充到模板库中。
本系统借鉴频繁模式树（frequent pattern tree,
FP-tree)）的思想，构建一种可动态添加分枝的频繁项前缀树结构来表示设备或应用日志消息模板。提取消息模板等价于从日志消息中识别出频繁出现单词的最长组合。本平台为每一个消息类型的日志消息构建一棵基于日志消息中单词频率的前缀树，从而实现自动地获取消息模板。该前缀树的根节点为日志消息的消息类型。通过剪枝的方式，消息模板中需要被遮挡的部分被删除掉，而日志消息子类型被保留了下来，该技术使得到消息模板的过程是完全自动的，而不需要依赖于专家知识。
-   离线学习部分，首先使用日志解析方法，对历史日志进行解析，过滤掉日志消息中的参数。然后，基于单词的频率和位置对日志消息中的单词进行加权，并使用词袋模型构造特征向量。最后，训练一个基于PU