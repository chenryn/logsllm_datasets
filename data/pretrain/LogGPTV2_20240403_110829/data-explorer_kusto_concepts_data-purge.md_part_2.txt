**Syntax**
```kusto
 // Cancel of a single purge operation
 .cancel purge 
  // Cancel of all pending purge requests in a database
 .cancel all purges in database 
 // Cancel of all pending purge requests, for all databases
 .cancel all purges
```
#### Example: Cancel a single purge operation
```kusto
 .cancel purge aa894210-1c60-4657-9d21-adb2887993e1
```
**Output**
The output of this command is the same as the 'show purges *OperationId*' command output, showing the updated status of the purge operation being canceled.
If the attempt is successful, the operation state is updated to `Canceled`. Otherwise, the operation state isn't changed.
|`OperationId` |`DatabaseName` |`TableName` |`ScheduledTime` |`Duration` |`LastUpdatedOn` |`EngineOperationId` |`State` |`StateDetails` |`EngineStartTime` |`EngineDuration` |`Retries` |`ClientRequestId` |`Principal`
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|
|c9651d74-3b80-4183-90bb-bbe9e42eadc4 |MyDatabase |MyTable |2019-01-20 11:41:05.4391686 |00:00:00.1406211 |2019-01-20 11:41:05.4391686 | |Canceled | | | |0 |KE.RunCommand;1d0ad28b-f791-4f5a-a60f-0e32318367b7 |AAD app id=...
#### Example: Cancel all pending purge operations in a database
```kusto
 .cancel all purges in database MyDatabase
```
**Output**
The output of this command is the same as the [show purges](#show-purges-command) command output, showing all operations in the database with their updated status.
Operations that were canceled successfully will have their status updated to `Canceled`. Otherwise, the operation state isn't changed.
|`OperationId` |`DatabaseName` |`TableName` |`ScheduledTime` |`Duration` |`LastUpdatedOn` |`EngineOperationId` |`State` |`StateDetails` |`EngineStartTime` |`EngineDuration` |`Retries` |`ClientRequestId` |`Principal`
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|
|5a34169e-8730-49f5-9694-7fde3a7a0139 |MyDatabase |MyTable |2021-03-03 05:07:29.7050198 |00:00:00.2971331 |2021-03-03 05:07:30.0021529 | |Canceled | | | |0 |KE.RunCommand;1d0ad28b-f791-4f5a-a60f-0e32318367b7 |AAD app id=...
|2fa7c04c-6364-4ce1-a5e5-1ab921f518f5 |MyDatabase |MyTable |2021-03-03 05:05:03.5035478 |00:00:00.1406211 |2021-03-03 05:05:03.6441689 | |InProgress | | | |0 |KE.RunCommand;1d0ad28b-f791-4f5a-a60f-0e32318367b7 |AAD app id=...
## Track purge operation status
> [!NOTE]
> Purge operations can be tracked with the [show purges](#show-purges-command) command, executed against the Data Management endpoint https://ingest-[YourClusterName].[region].kusto.windows.net.
Status = 'Completed' indicates successful completion of the first phase of the purge operation, that is records are soft-deleted and are no longer available for querying. Customers aren't expected to track and verify the second phase (hard-delete) completion. This phase is monitored internally by Azure Data Explorer.
### Show purges command
`Show purges` command shows purge operation status by specifying the operation ID within the requested time period.
```kusto
.show purges 
.show purges [in database ]
.show purges from '' [in database ]
.show purges from '' to '' [in database ]
```
| Properties  |Description  |Mandatory/Optional|
|---------|------------|-------|
|`OperationId `   |      The Data Management operation ID outputted after executing single phase or second phase.   |Mandatory
|`StartDate`    |   Lower time limit for filtering operations. If omitted, defaults to 24 hours before current time.      |Optional
|`EndDate`    |  Upper time limit for filtering operations. If omitted, defaults to current time.       |Optional
|`DatabaseName`    |     Database name to filter results.    |Optional
> [!NOTE]
> Status will be provided only on databases for which the client has [Database Admin](../management/access-control/role-based-access-control.md) permissions.
**Examples**
```kusto
.show purges
.show purges c9651d74-3b80-4183-90bb-bbe9e42eadc4
.show purges from '2018-01-30 12:00'
.show purges from '2018-01-30 12:00' to '2018-02-25 12:00'
.show purges from '2018-01-30 12:00' to '2018-02-25 12:00' in database MyDatabase
```
**Output**
|`OperationId` |`DatabaseName` |`TableName` |`ScheduledTime` |`Duration` |`LastUpdatedOn` |`EngineOperationId` |`State` |`StateDetails` |`EngineStartTime` |`EngineDuration` |`Retries` |`ClientRequestId` |`Principal`
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|
|c9651d74-3b80-4183-90bb-bbe9e42eadc4 |MyDatabase |MyTable |2019-01-20 11:41:05.4391686 |00:00:33.6782130 |2019-01-20 11:42:34.6169153 |a0825d4d-6b0f-47f3-a499-54ac5681ab78 |Completed |Purge completed successfully (storage artifacts pending deletion) |2019-01-20 11:41:34.6486506 |00:00:04.4687310 |0 |KE.RunCommand;1d0ad28b-f791-4f5a-a60f-0e32318367b7 |AAD app id=...
* `OperationId` - the DM operation ID returned when executing purge.
* `DatabaseName`** - database name (case sensitive).
* `TableName` - table name (case sensitive).
* `ScheduledTime` - time of executing purge command to the DM service.
* `Duration` - total duration of the purge operation, including the execution DM queue wait time.
* `EngineOperationId` - the operation ID of the actual purge executing in the engine.
* `State` - purge state, can be one of the following values:
  * `Scheduled` - purge operation is scheduled for execution. If job remains Scheduled, there's probably a backlog of purge operations. See [purge performance](#purge-performance) to clear this backlog. If a purge operation fails on a transient error, it will be retried by the DM and set to Scheduled again (so you may see an operation transition from Scheduled to InProgress and back to Scheduled).
  * `InProgress` - the purge operation is in-progress in the engine.
  * `Completed` - purge completed successfully.
  * `BadInput` - purge failed on bad input and won't be retried. This failure may be due to various issues such as a syntax error in the predicate, an illegal predicate for purge commands, a query that exceeds limits (for example, over 1M entities in an `externaldata` operator or over 64 MB of total expanded query size), and 404 or 403 errors for `externaldata` blobs.
  * `Failed` - purge failed and won't be retried. This failure may happen if the operation was waiting in the queue for too long (over 14 days), due to a backlog of other purge operations or a number of failures that exceed the retry limit. The latter will raise an internal monitoring alert and will be investigated by the Azure Data Explorer team.
* `StateDetails` - a description of the State.
* `EngineStartTime` - the time the command was issued to the engine. If there's a large difference between this time and ScheduledTime, there's usually a significant backlog of purge operations and the cluster isn't keeping up with the pace.
* `EngineDuration` - time of actual purge execution in the engine. If purge was retried several times, it's the sum of all the execution durations.
* `Retries` - number of times the operation was retried by the DM service due to a transient error.
* `ClientRequestId` - client activity ID of the DM purge request.
* `Principal` - identity of the purge command issuer.
## Purging an entire table
Purging a table includes dropping the table, and marking it as purged so that the hard delete process described in [Purge process](#purge-process) runs on it.
Dropping a table without purging it doesn't delete all its storage artifacts. These artifacts are deleted according to the hard retention policy initially set on the table.
The `purge table allrecords` command is quick and efficient and is preferable to the purge records process, if applicable for your scenario.
> [!NOTE]
> The command is invoked by running the [purge table *TableName* allrecords](#purge-table-tablename-allrecords-command) command on the Data Management endpoint https://ingest-[YourClusterName].[region].kusto.windows.net.
### Purge table *TableName* allrecords command
Similar to '[.purge table records ](#purge-table-tablename-records-command)' command, this command can be invoked in a programmatic (single-step) or in a manual (two-step) mode.
1. Programmatic invocation (single-step):
     **Syntax**
     ```kusto
     // Connect to the Data Management service
     #connect "https://ingest-[YourClusterName].[Region].kusto.windows.net"
     .purge table [TableName] in database [DatabaseName] allrecords with (noregrets='true')
     ```
1. Human invocation (two-steps):
     **Syntax**
     ```kusto
     // Connect to the Data Management service
     #connect "https://ingest-[YourClusterName].[Region].kusto.windows.net"
     // Step #1 - retrieve a verification token (the table will not be purged until step #2 is executed)
     .purge table [TableName] in database [DatabaseName] allrecords
     // Step #2 - input the verification token to execute purge
     .purge table [TableName] in database [DatabaseName] allrecords with (verificationtoken=h'')
     ```
    | Parameters  |Description  |
    |---------|---------|
    | `DatabaseName`   |   Name of the database.      |
    | `TableName`    |     Name of the table.    |
    | `noregrets`    |     If set, triggers a single-step activation.    |
    | `verificationtoken`     |  In two-step activation scenario (`noregrets` isn't set), this token can be used to execute the second step and commit the action. If `verificationtoken` isn't specified, it will trigger the command's first step. In this step, a token is returned to pass back to the command and do step #2.|
#### Example: Two-step purge
1. To start purge in a two-step activation scenario, run step #1 of the command:
    ```kusto
    // Connect to the Data Management service
     #connect "https://ingest-[YourClusterName].[Region].kusto.windows.net"
    .purge table MyTable in database MyDatabase allrecords
    ```
    **Output**
    | `VerificationToken`|
    |---|
    | e43c7184ed22f4f23c7a9d7b124d196be2e570096987e5baadf65057fa65736b|
1. To complete a purge in a two-step activation scenario, use the verification token returned from step #1 to run step #2:
    ```kusto
    .purge table MyTable in database MyDatabase allrecords
    with (verificationtoken=h'eyJT.....')
    ```
    The output is the same as the '.show tables' command output (returned without the purged table).
    **Output**
    |  TableName|DatabaseName|Folder|DocString
    |---|---|---|---
    |  OtherTable|MyDatabase|---|---
#### Example: Single-step purge
To trigger a purge in a single-step activation scenario, run the following command:
```kusto
// Connect to the Data Management service
#connect "https://ingest-[YourClusterName].[Region].kusto.windows.net"
.purge table MyTable in database MyDatabase allrecords with (noregrets='true')
```
The output is the same as the '.show tables' command output (returned without the purged table).
**Output**
|TableName|DatabaseName|Folder|DocString
|---|---|---|---
|OtherTable|MyDatabase|---|---
## Related content
* [Enable data purge on your Azure Data Explorer cluster](../../data-purge-portal.md)