        NTSTATUS status;
        PACCESS_TOKEN tokenobj = PsReferencePrimaryToken();
        ObOpenObjectByPointer(tokenobj, ..., &hToken);
        status = CdpCreateProcess(&hProcess, &hToken, pp);
        if (status >= STATUS_SUCCESS) {
            HANDLE hConsoleFile;
            status = ObOpenObjectByPointer(ConsoleFile, 
                    0, 0, GENERIC_ALL, IoFileObjectType,
                    UserMode, &hConsoleFile);   
            if (status >= STATUS_SUCCESS) {
                // Modify process command line...
                ZwResumeProcess(hProcess);
            }
        }
        if (status < STATUS_SUCCESS) {
            ZwTerminateProcess(hProcess, status);
        }
        return status;
    }
这个代码做的是创建进程，然后它创建一个新的句柄到当前控制台设备对象，所以它可以将它在命令行上传递到conhost进程。观察执行流程可以发现，进程被杀死（使用ZwTerminateProcess）的唯一方式是，如果ObOpenObjectByPointer在尝试创建新的句柄时返回STATUS_ACCESS_DENIED。但是这怎么可能发生？我们最初就是这么打开设备文件的，不应该也能够用相同的访问权限再次打开？事实却不是这样的，因为FILE_OBJECT有一个相关的安全描述符，DACL没有给我们受限令牌的GENERIC_ALL访问权限。正如我们在下面的截图中可以看到的，我们缺少一个渲染器的令牌限制SID（S-1-0-0）的条目，它允许限制令牌成功检查。
不要被RESTRICTED组条目欺骗。RESTRICTED组只是在使用受限令牌时的约定，除非令牌是作为受限制的SID创建的，否则它不会起任何作用。那么这意味着我们永远都不能在Chrome中利用这个bug？当然不是，我们只需要了解FILE_OBJECT的DACL是如何设置的。
与通常从父容器继承其DACL的文件和注册表键不同，内核对象从当前访问令牌中的特殊字段获取其默认的DACL。我们可以通过使用TokenDefaultDacl作为信息类来传递适当的结构到SetTokenInformation来修改当前令牌的默认DACL。我们可以做到这一点，而不需要任何特殊权限。但是要把DACL设置为什么呢？如果我们查看访问令牌的已启用组，会发现我们只有当前用户SID和登录SID。然而，由于令牌也是受限令牌，我们需要授予对受限SID（S-1-0-0，NULL
SID）的访问权限，否则访问检查仍会失败。因此，让我们更改默认DACL以指定对登录SID和NULL SID的完全访问权限。
    void SetCurrentDacl()
    {
        HANDLE hToken;
        if (OpenProcessToken(GetCurrentProcess(), TOKEN_ALL_ACCESS, &hToken))
        {       
            WCHAR sddl[256];
            PSECURITY_DESCRIPTOR psd = nullptr;
            StringCchPrintf(sddl, _countof(sddl), 
                        L"D:(A;;GA;;;%ls)(A;;GA;;;S-1-0-0)", GetLogonSid());
            if (ConvertStringSecurityDescriptorToSecurityDescriptor(sddl, 
                        SDDL_REVISION_1, &psd, nullptr))
            {
                BOOL present;
                BOOL defaulted;
                PACL dacl;
                GetSecurityDescriptorDacl(psd, &present, &dacl, &defaulted);
                TOKEN_DEFAULT_DACL default_dacl;
                default_dacl.DefaultDacl = dacl;
                SetTokenInformation(hToken, TokenDefaultDacl, 
                        &default_dacl, sizeof(default_dacl));               
                LocalFree(psd);
            }       
        }
    }
现在在设置当前DACL后，我们可以再试一次，但AllocConsole仍然失败。然而，看看错误代码，我们至少已经解决了最初的问题。进程监视器显示进程的退出代码为STATUS_DLL_NOT_FOUND，它告诉我们发生了什么。
当进程的第一个线程运行时，它实际上并不直接在进程入口点开始。相反，它在NTDLL中运行一段特殊的代码（LdrInitializeThunk）来初始化当前进程。正如Ldr前缀表明的（它是Loader的简称），该函数负责扫描进程的导入DLL，将它们加载到内存并调用它们的初始化函数。在这种情况下，进程令牌是受限制的，我们甚至打不开典型的DLL文件。幸运的是，在创建的进程和用ZwResumeProcess恢复初始线程之间有一个时间窗口。如果我们可以在这个窗口中捕获进程，我们就可以把进程初始化为一个空的shell。但我们怎么做呢？
**捕获新进程**
一个显而易见的利用方法是在时间窗口期间打开新进程，然后使用这个句柄调用NtSuspendProcess。这可以实现，因为挂起/恢复操作引用引用计数。该进程以暂停计数——1开始，因为内核驱动程序使用CREATE_SUSPENDED标志创建了初始线程，因此，如果我们快速调用NtSuspendProcess，我们可以将其增加到2。然后，驱动程序通过调用ZwResumeProcess减少计数，但这只会将计数降低到1，内核将挂起线程。然后，我们可以操作新进程以删除初始化代码并在作业对象外部运行。
但这个计划有一个比较大的问题。通常，当创建一个新进程时，将返回该进程的句柄，但这里不是这样的情况，因为内核驱动程序在返回到调用者之前会关闭内核模式句柄。因此，我们需要通过其PID打开进程，但估计这可能会是很难办的。因为现代的Windows系统并不是简单的依次递增PID值，而是会在一段时间后回收重新使用旧的PID值。我们可以通过猜测，但每一次错误的猜测都是在浪费时间。你会发现，暴力的方法是几乎不可能奏效的。
所以我们被卡在这里了吗？当然不是，我们只需要使用进一步的未文档化的功能。内核暴露了一个系统调用，NtGetNextProcess，顾名思义，它用来获得下一个进程。但下一个是什么呢？如果你已经对Windows内部原理有所了解，你会知道进程对象在内核中的一个链表被链接到一起。这个系统调用将句柄放入一个进程对象中，并找到链表中可由当前用户打开的下一个进程。
在默认情况下，是没有其他进程可以被当前进程在列表中打开的，甚至它本身，这是由于那个讨厌的默认DACL。这意味着正常的NtGetNextProcess调用总会失败。当新的conhost进程创建时，它继承了我们可以访问的新的修改了的默认DACL，这意味着我们可以使用一个非常小的循环调用NtGetNextProcess直到成功。返回的句柄几乎肯定是conhost，所以我们可以快速暂停进程，现在可以争取尽可能多的时间，这是我们喜欢的。
我们需要在一个线程中这样做，因为AllocConsole将阻塞，但这不是一个问题。 例如：
    HANDLE GetConhostProcess()
    {       
        HANDLE hCurr = nullptr;
        while (!hCurr)
        {
            hCurr = nullptr;
            if (NtGetNextProcess(hCurr, MAXIMUM_ALLOWED,
                                 0, 0, &hCurr) == 0)
            {
                NtSuspendProcess(hCurr);
                return hCurr;
            }
        }
        return 0;
    }
因此，通过处理conhost进程，我们可以修改LdrInitializeThunk方法来防止它失败并注入一些shellcode。你只有NTDLL服务，因为没有其他DLL会被映射。我们仍然达成了目标，你现在可以对一个受限的Job对象进行逃逸了，即使是在这样一个锁定的进程中。你现在要用这种力量去做什么完全取决于你自己。
**结论**
那么这有什么用呢？好吧，我是开玩笑的，至少从沙箱里面直接逃逸是不行的。它只是削弱了一些防御，并且扩展了攻击面，以便利用其他问题。我可以理解为什么微软不想修复它，因为它的行为以这种方式实现向后兼容性，所以改变它将是很困难的。这说明我相信它可以在当前进程调用API的安全上下文中工作，因为很少有应用程序使用这种限制性令牌作为应用程序沙箱。
此外，Chrome还在努力进一步减少安全方面的问题。例如，当作业中断删除强制的作业UI限制时，Chrome现在在所有受影响的平台上使用win32k锁定，据我所知，即使在子进程中也不能进行禁用。安全缓解措施在继续发展，利用了平台的各种新特性，然而安全问题的回归是不可避免的。开发良好的沙箱不应依赖于任何一个平台功能的安全性，因为该功能可能随时中断掉。