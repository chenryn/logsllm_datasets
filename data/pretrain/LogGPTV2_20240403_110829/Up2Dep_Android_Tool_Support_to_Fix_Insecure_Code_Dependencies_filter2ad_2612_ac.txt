not using this library.
Use of insecure cryptographic APIs: Similar to known security
vulnerabilities, if any used library method happens to insecurely use
a cryptographic API, Dependency Resolver warns developers in form
of errors against using this API (see Figure 9 in Appendix). In this
case, Up2Dep suggests to developers to update to the latest version
if the used APIs in the latest version do not contain cryptographic
API misuse. If the latest version still has that problem, developers
can use the Show dependencies option to examine the location and
necessity of the used library method and decide whether or not
they can remove the used method call, or switch to another library.
4 EVALUATION METHODOLOGY
Our goal is to find out if it is technically feasible for Up2Dep to sup-
port developers in keeping their project dependencies up-to-date
and in avoiding library versions with security problems, e.g., how
many outdated (including insecure) libraries Up2Dep has helped
developers migrate to the latest versions and which security vulner-
abilities it has fixed for developers. We further examine developers’
Up2Dep experience in an online survey. Different aspects of Up2Dep
in interacting with developers — studying developers behavior upon
learning about the security of an included library, how security
warning messages can be customized, how can we keep the balance
between developers being annoyed and being informed, how devel-
oper’s mental model evolves — are not in the scope of this paper,
and left for future work. In the following, we first describe how we
enable developers to evaluate Up2Dep in-the-wild. We then report
how we advertised Up2Dep and delivered it to Android developers
for evaluation.
Figure 3: In context feedback dialog.
To enable developers to evaluate Up2Dep, we leveraged the re-
mote study platform of FixDroid [39] to setup and conduct our
evaluation. We included telemetric features that record whether
a suggested quick-fix was applied. We provided developers the
Feedback in context (see Figure 3) option3 where they could send
us feedback on whether the suggested fix worked as expected, if
they needed more information on any warning, or on other issues
they encountered. In our instruction, we strongly encouraged de-
velopers to provide us feedback so that we could make Up2Dep
better, this was where they can help us to help them, i.e., making
a free-to-use tool better for them. Developers were also provided
the option to opt-out of our telemetric data collection in Up2Dep’s
settings. Before developers downloaded Up2Dep we clearly inform
developers on which information we gathered about their usage
(on our project’s website and in Android Studio plugin repository
description). Our goal in this step was to make sure they are well
informed before they decide to install our plugin.
3This feature is adopted from Lint tool.
268Up2Dep: Android Tool Support to Fix Insecure Code Dependencies
ACSAC 2020, December 7–11, 2020, Austin, USA
4.1 Recruitment
After we advertised Up2Dep’s prototype at an Android developer
conference, we used Twitter and email as communication channels
to keep in contact with developers and to recruit further developers.
After we released Up2Dep with complete features, we advertised
our tool on different Android developer forums, Android developers
groups on Facebook, and in a related lecture at our institution to
invite experienced students, who are working on real (non-study-
related) Android projects4, into using Up2Dep. Finally, we sent an
invitation email to an Android development team, with which we
already had contact before, to ask the team to try out Up2Dep.
We abstained from sending emails to the contact information
harvested from Google Play apps, as done in prior studies [9, 19,
26, 39], since those studies had an extremely low response rate
and such mass emails may be considered as harmful/spamming
behavior that would create a negative view from developers toward
studies conducted by researchers.
4.2 Ethical Concerns
This study has been approved by our institution’s ethics review
board. All telemetric information is gathered anonymously—we do
not know who the developer is—and we do not collect the devel-
oper’s code. Furthermore, we clearly explain on our website which
information we gather and provide developers the option to opt-out
of our telemetry data collection at any time. Finally, all data is sent
to our server over a secured connection.
5 RESULTS
In this section, we present our evaluation results, which provide
the answers to our research questions (RQ) stated in Section 1. This
covers both telemetric data of developers who filled out our exit
survey as well as of developers who are using Up2Dep but did not
answer our survey. Our evaluation has lasted for 81 days, the results
we report in the following are from within this duration. All data
related to Up2Dep tutorial was excluded from our results5. Finally,
we briefly compare Up2Dep with LibScout and Cognicrypt.
5.1 RQ1: Would it be technically feasible to
support developers in keeping their
project’s dependencies up-to-date?
From the telemetric data and answers to our online survey, we can
see that developers have made use of Up2Dep to keep their project
dependencies up-to-date. In particular, Up2Dep helped developers
upgrade their project’s dependencies (N=116) to the latest version
in 34 real projects. We describe the data as well as the feedback
developers have provided in details in the following.
5.1.1 Telemetric Results. As we included telemetric features in
Up2Dep, we are also able to gather telemetric data from developers
who did not participate in our survey. Of 56 developers who are
using Up2Dep, 30 (53.57%) have applied quickfixes (N=116) provided
by Up2Dep to update their project’s dependencies—i.e., updated an
4Projects that are not related to their university studies/courses
5When Up2Dep recorded telemetry data, it computed a hash value of the project’s
name. If developers used Up2Dep in a project that has the same hash value with one
of our exemplary projects, such data was excluded from our results.
Figure 4: Number of applied quickfixes per type.
outdated third party library to the latest/newer compatible version
or examined a library’s API dependencies (34 projects).
Figure 4 shows the number of applied quickfixes per type. We
can see that the majority of applied quickfixes are Update to the
latest version. Besides, 27.59% of quick-fixes belong to Show depen-
dencies meaning that developers have checked the API usages of
the corresponding dependency. However, since we do not collect
developer’s code, we do not know whether manual code change
were performed to update the corresponding dependency.
Figure 5: Feedback given by developers in context. Develop-
ers can give feedback to multiple quickfixes.
Among all 30 developers who have applied suggested quick-fixes
in their projects, 22 of them (73.33%) have provided us feedback
through the feedback dialog (Figure 3). On average developers have
spent 19 minutes working with Up2Dep before giving us the first
feedback. The results from the 60 in-situ feedbacks we received
from 22 developers confirm that 80.0% of the proposed fixes worked,
and developers found the warning/quickfix useful while only 4 pro-
posed fixes did not work as expected. Figure 5 lists all feedback
provided by developers. We also observe that 5.0% of the feed-
back indicates that the developer did not understand the warning
message (I don’t get it). We manually examined the correspond-
ing third-party libraries and found that their warnings were about
cryptographic API misuse. This suggests that we need to make the
warning message more developer-friendly, e.g., make it easier to
understand (similar to other domains such as browser security warn-
ings [10, 23]). As each feedback came together with the dependency
for which developers had given feedback, we manually investigated
the feedback that belongs to False positive and Other. We noticed
that transitive dependencies might be the reason for such feedback.
When a third-party library A depends itself on library B in version
v1 and developers use library B version v2 in their app code, this
means this project has now two versions (v1 (cid:44) v2) of the library
020406080100Number of applied quickfixesLatest versionShow dependenciesCompatible version68.97%27.59%3.45%01020304050Number of feedback provided by developersUseful - this check is correct,  and you find it usefulOtherFalse positive  - this check is incorrectI don't get it - the message  does not convey enough info80.00%8.33%6.67%5.00%269ACSAC 2020, December 7–11, 2020, Austin, USA
Duc Cuong Nguyen, Erik Derr, Michael Backes, and Sven Bugiel
updating their project’s dependencies due to (fear of) incompatible
updates.
5.2 RQ2: Could such a tool support have a
tangible impact on the security and privacy
of Android apps?
Fixed Security Problems. We observe that there are 4 in-
5.2.1
stances of the okhttp3 v3.0.0 library in developers’ projects, which
contains a known security vulnerability. okhttp v3.0.0 allows man-
in-the-middle attackers to bypass certificate pinning by sending a
certificate chain with a certificate from a non-pinned trusted CA
and the pinned certificate. Zhang et al. showed that nearly 10%
of the most popular apps on Google Play store still used such an
insecure version for more than 1 year after the fixed version had
been released [47]. In our study, those library versions were up-
dated by developers with the support of Up2Dep to the latest, fixed
version. Furthermore, there are 3 instances of an outdated version
of the Glide library where developers used hash API without calling
the complete sequence of function (see Section 3.1.2). Finally, one
instance of okhttp3 v3.11.0 that misused a cryptographic API, and
the developer in our study happened to re-use the correspond API
of the library. This issue has been fixed in their latest, misuse-free
version of the library. All in all, 6.89% of the outdated dependencies
that Up2Dep has helped developers to migrate to their latest ver-
sions (8 out of 116) had security problems. Since we do not collect
information of the developers’ projects (i.e., this may make develop-
ers skeptical to try Up2Dep), we therefore do not have information
on the projects patched by Up2Dep. However, regardless of the
project details, we consider this number non-negligible given the
easy means that developers can employ to fix them. Therefore, by
fixing projects containing these insecure library versions, Up2Dep
directly benefits the security and privacy of Android apps.
Security Problems of Transitive Dependencies. From the feed-
5.2.2
back related to the False positive category, we learned that for a
small number (2) of cases, the problem of transitive dependency
would prevent developers from keeping their project’s dependen-
cies up-to-date because of incompatibility. However, the current
dependency management system of Gradle makes it hard for devel-
opers to be informed about what are the transitive dependencies of
the manually declared dependencies as it automatically downloads
sub-dependencies of a given dependency without developers eas-
ily noticing it. Developers can check the log console to see what
sub-dependencies are downloaded together with the current depen-
dency, yet this is only available in the log console with hundreds
of log events. The problem becomes more serious if a transitive
dependency has (well known) security problems. Those are totally
hidden from developers because they are usually automatically
downloaded following the main dependency unless developers
specifically exclude them [27]. Thus, even if developers would vet
a dependency manually, insecure sub-dependencies that are auto-
matically, non-obviously pulled in when installing the dependency
can undermine the app’s security again. This highlights the need
for tooling support, as such Up2Dep.
Transitive dependency analysis: Given the crucial informa-
tion regarding security problems of transitive dependencies, we
Figure 6: Features of Up2Dep that developers find useful. De-
velopers can choose multiple features.
B. This might break the app due to unresolved dependencies. We
found transitive dependencies’ problems in: org.jsoup:jsoup:0.22 and
com.jakewharton:butterknife:7.0.1 (found in the False positive feed-
backs). Both of these dependencies have transitive dependencies
that app code itself makes use of. Up2Dep suggests developers to
update them to the latest versions. Although the latest versions pro-
vide all APIs that the apps are currently using, but they no longer
contain the exact transitive dependencies (version) that the apps
are using, this in the end breaks the functionality of apps. Since we
do not collect developer’s code, we cannot evaluate which API of a
library developers are using in their project. We decided to further
study this problem on open source Android projects. We collected
libraries (org.jsoup:jsoup:0.22 and com.jakewharton:butterknife:7.0.1)
that are found in the False positive feedbacks, and found projects
on F-Droid repository that have such dependencies. We further
investigate the problems of transitive dependencies and report our
finding in Section 5.2.2.
5.1.2 Online Survey Results.
Demographic data: Of 56 developers, 23 have shared their Up2Dep
experience with us in our online survey. Developers have spent on
average 48 minutes working with Up2Dep before joining our survey
(see Table 1 in Appendix for details). Around half of the developers
have less than one year of Android programming experience, while
the other half has at least two years of experience. In particular,
11 developers developed more than 2 Android apps, while only 3
participants have not yet published any apps. About two-thirds of
the developers have a security background, most of them are male,
and their age ranges from 18 to 30 years. Among 23 developers,
9 of them are students (2 with at least 2 years of programming
experience, 7 with less than 1 year of programming experience)
who got to know Up2Dep after we advertised it in a related lecture
at our institution6.
Usability score: To assess the usability of Up2Dep in our survey,
we used the SUS (System Usability Scale) [17]. A system with a
SUS score of above 68 would be rated as above average. Up2Dep
achieves a SUS score of 76.20, which is considered good in terms of
usability [15] (see Figure ?? in Appendix).
Useful features: Of Up2Dep’s features, the Compatible version
check was named most often (see Figure 6). This supports the results
of a previous study [19] that showed that developers abstain from
6We did not distinguish academic training from programming experience.
048121620Number of developersCompatible version checkInsecure version checkCrypto Misuse API checkShow dependency90.91%72.73%72.73%72.73%270Up2Dep: Android Tool Support to Fix Insecure Code Dependencies
ACSAC 2020, December 7–11, 2020, Austin, USA
developed an additional feature that thoroughly checks all tran-
sitive dependencies of all declared dependencies to: (1) analyze
compatibility when suggesting developers to update the declared
dependencies, and more importantly, (2) to check and notify de-
velopers if any transitive dependencies contain security problems.
When Up2Dep detects a declared dependency in a build.gradle file
of a project, it checks all transitive dependencies (all sub levels)
of the current dependency and queries security related informa-
tion of these transitive dependencies. If any transitive dependency
contains security problems, developers are notified similar to how
security problems of the main dependency are communicated (see
Section 3.4).
Analysis Results: Our results reveal that there are 1,209 library
versions (belonging to 112 unique dependencies) that have security
problems. These dependencies are currently (transitively) used by
9,787 library versions (233 unique libraries) in our data-set. Espe-
cially, among 1,209 transitive dependency versions with security
problems, 16 contain a publicly disclosed vulnerability. This means
even if developers are aware of such libraries with security prob-
lems they have no way to find out if their projects are including
such insecure dependencies as they are not visible to developers.
The latest version of Up2Dep now informs developers about such
security problems of both the main dependency and transitive de-
pendencies so that developers can also avoid insecure transitively
included library (versions).
5.3 Comparison with Existing Work
In our work, we significantly increased the database of LibScout
by a factor of 7.5x. Furthermore, our database covers the top 100
most popular libraries on Maven repository [4] which was not
considered by LibScout. Most importantly, we provided an effortless
synchronization (end-to-end) process that automatically scans for
new libraries (versions), analyzes for cryptographic API misuse,
then the information on security and updatability of new libraries
(versions) are delivered to developers right in their development
environment without them having to use extra tools.
Besides, as we extended the rule set of Cognicrypt to include the
check for use of http protocol, we have found 20 libraries (8.4% of
all identified insecure libraries), spanning across 93 versions using
such insecure protocol. With the original rule-set of Cognicrypt
we would have missed the insecure network connection in these
libraries.
6 DISCUSSION
6.1 Threats to Validity and Future Work
Our work leverages LibScoutand Cognicryptand inherits their lim-
itations. For LibScoutthe ability to provide suggestions for API
changes relies solely on API heuristics, such as name, parameter
types, or return types, which do not necessarily guarantee that the
suggested API will work as expected. If the semantics or side-effects
of a library method change between versions, this could break the
functionality of the developer’s app although the app code was