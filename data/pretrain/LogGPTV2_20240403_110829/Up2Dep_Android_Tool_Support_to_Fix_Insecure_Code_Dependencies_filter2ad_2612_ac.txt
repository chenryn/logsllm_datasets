### Avoiding Insecure Cryptographic APIs

If a library method is found to be using a cryptographic API insecurely, the Dependency Resolver will alert developers with an error message (refer to Figure 9 in the Appendix). In such cases, Up2Dep recommends that developers update to the latest version of the library, provided that the latest version does not contain the same cryptographic API misuse. If the latest version still has the issue, developers can use the "Show Dependencies" option to examine the location and necessity of the used library method. They can then decide whether to remove the method call or switch to a different library.

### Evaluation Methodology

Our goal is to determine if it is technically feasible for Up2Dep to assist developers in keeping their project dependencies up-to-date and avoiding library versions with security vulnerabilities. Specifically, we aim to find out how many outdated (including insecure) libraries Up2Dep has helped developers migrate to the latest versions and which security vulnerabilities it has fixed. We also conducted an online survey to gather feedback on developers' experiences with Up2Dep. Aspects such as developer behavior upon learning about the security of an included library, customization of security warning messages, and the balance between informing and annoying developers are not within the scope of this paper and are left for future work.

### Enabling Developer Evaluation

To enable developers to evaluate Up2Dep, we utilized the remote study platform of FixDroid [39] to set up and conduct our evaluation. We included telemetric features to record whether suggested quick-fixes were applied. Developers could provide feedback through the "Feedback in Context" option (see Figure 3), where they could report if the suggested fix worked as expected, if they needed more information on any warnings, or if they encountered other issues. We strongly encouraged developers to provide feedback to help us improve Up2Dep. Developers had the option to opt-out of telemetric data collection in Up2Dep’s settings. Before downloading Up2Dep, we clearly informed developers about the information we would gather about their usage, both on our project’s website and in the Android Studio plugin repository description.

### Recruitment

After advertising Up2Dep’s prototype at an Android developer conference, we used Twitter and email to keep in contact with developers and recruit additional participants. Once Up2Dep was released with complete features, we advertised it on various Android developer forums, Facebook groups, and in a related lecture at our institution. We invited experienced students working on real (non-study-related) Android projects to use Up2Dep. Additionally, we sent an invitation email to an Android development team with whom we had prior contact. We refrained from sending mass emails to Google Play app contacts, as previous studies have shown low response rates and potential negative perceptions.

### Ethical Concerns

This study was approved by our institution’s ethics review board. All telemetric information is collected anonymously, and we do not collect developers’ code. We clearly explain on our website which information we gather and provide developers the option to opt-out of telemetry data collection at any time. All data is transmitted to our server over a secured connection.

### Results

#### RQ1: Technical Feasibility of Supporting Dependency Updates

From the telemetric data and online survey responses, we found that developers have used Up2Dep to keep their project dependencies up-to-date. Up2Dep helped 56 developers apply 116 quick-fixes in 34 real projects, updating outdated third-party libraries to the latest or newer compatible versions. The majority of applied quick-fixes were "Update to the latest version," while 27.59% involved "Show Dependencies" to check API usages. Of the 30 developers who applied quick-fixes, 22 provided feedback, confirming that 80.0% of the proposed fixes worked and were useful. Some feedback indicated that the warning messages about cryptographic API misuse were not always clear, suggesting a need for more user-friendly warnings.

#### RQ2: Impact on Security and Privacy

Up2Dep helped fix several security problems, including instances of the okhttp3 v3.0.0 library, which contains a known vulnerability. Developers updated these to the latest, fixed versions. Additionally, 6.89% of the outdated dependencies (8 out of 116) had security issues, which Up2Dep helped resolve. This directly benefits the security and privacy of Android apps. However, transitive dependencies can pose challenges, as they may introduce incompatibilities and hidden security problems. Up2Dep now includes a feature to thoroughly check all transitive dependencies for security issues and notify developers accordingly.

### Comparison with Existing Work

Compared to LibScout and Cognicrypt, Up2Dep significantly expanded the database by 7.5x and covers the top 100 most popular libraries on Maven. It provides an end-to-end process for scanning, analyzing, and delivering security and updatability information directly in the development environment. Additionally, we extended Cognicrypt's rule set to include checks for HTTP protocol use, identifying 20 insecure libraries across 93 versions.

### Discussion

#### Threats to Validity and Future Work

Our work leverages LibScout and Cognicrypt, inheriting their limitations. For instance, LibScout’s API change suggestions rely on heuristics, which may not always guarantee the expected functionality. Future work will focus on addressing these limitations and further improving the usability and effectiveness of Up2Dep.