Cortier et al [23], [24] and Bernhard et al. [15] have shown
the need for weeding in the context of ballot privacy. For
example, if an adversary may copy the ballot of an honest
voter (typically available on the bulletin board) and re-cast
it on his own behalf, he obtains some information on the
vote once the result is published, hence breaking privacy. In
particular, the ballot privacy of Labelled-MiniVoting is based
on a strong weeding policy, preventing pairs of ciphertexts
and labels being replayed even with different voter identiﬁers,
being enforced by the Valid algorithm.
We show that it is possible to weaken the weeding policy by
weeding only exact ballot duplicates. More precisely, we show
that instead of rejecting a ballot (id, (cid:3), c) as soon as (id(cid:3), (cid:3), c)
occurs in BB for some id(cid:3), we only reject it if exactly (id, (cid:3), c)
occurs in BB. This may speed up the weeding algorithm
since this latter check remains local to a particular voter’s
ballots, perhaps avoiding an expensive scan over the entire
bulletin board. Formally, we consider a variant ValidLight
of the Valid algorithm, displayed in Figure 9. If Flabel is
injective, then ValidLight is functionally equivalent to Valid.
This includes some interesting choices for Flabel, such as
the identity function (or the function x (cid:12)→ (x, f (x)) for any
function f), or a PRP whose key is discarded immediately
after setup.
Theorem 5. Let φ be the predicate deﬁned by
φ(m) = uL is injective
∧ ∀ i ∈ dom(BB).
∃ idi, ci. BB[i] = (idi, uL[idi], ci),
where uL, BB are the values of these variables in memory m.
The following holds:
Valid (cid:9)φ ValidLight.
Theorem 5 is proved in EasyCrypt and relies on the fact
that each voter is assigned a unique label, and that all ballots
from the ballot box have a matching label for a voter w.r.t
to some pre-existing map that contains all voters and their
assigned label.
Deﬁnition 13. Given a homomorphic encryption scheme E(cid:3),
two proof systems Σ(cid:3)
R(cid:2), ΣR, and abstract algorithms ValidInd,
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:18 UTC from IEEE Xplore.  Restrictions apply. 
SOME PRACTICAL VARIANTS THAT CAN BE OBTAINED FROM THE Labelled-MiniVoting SCHEME.
TABLE I
Helios-v3-hom
Helios-v3-mix
Helios-v4
Helios-light-weeding
Basic Scheme
Voting Base
Helios-hom
Helios-mix
Helios-hom
Helios-hom-IDweed
Labelled-MiniVoting
ValidInd
verify ballot proof
verify ballot proof
verify ballot proof
verify ballot proof
return true
Publish
last view
last view
last view
last view
empty
Flabel
empty
empty
constant
identity
empty
ρ
addition ◦ last vote
multiset ◦ last vote
addition ◦ last vote
addition ◦ last vote
addition ◦ no-revote
R
corr-dec
corr-dec
corr-dec
corr-dec
return true
Valid(BB, uL, b, pk)
1 :
2 :
3 :
4 :
5 :
(id, (cid:3), c) ← b
e1 ← ∀id(cid:3). (id(cid:3), (cid:3), c) /∈ BB
e2 ← (cid:2)
e3 ← ValidInd(b, pk)
return (e1 ∧ e2 ∧ e3)
(cid:3) = uL[id]
(cid:3)
(cid:3)
ValidLight(BB, uL, b, pk)
1 :
2 :
3 :
4 :
5 :
(id, (cid:3), c) ← b
e1 ← (cid:2)
b /∈ BB
e2 ← (cid:2)
(cid:3) = uL[id]
e3 ← ValidInd(b, pk)
return (e1 ∧ e2 ∧ e3)
(cid:3)
Fig. 9. Valid algorithm of Labelled-MiniVoting (left) and ValidLight, variant
with light weeding (right).
Publish, Flabel and Policy as speciﬁed, we deﬁne the Helios-
hom-IDweed scheme constructed from these primitives as the
scheme
HW (E(cid:3), Σ(cid:3)
HH (E(cid:3), Σ(cid:3)
R(cid:2) , ΣR, ValidInd, Publish, Flabel, Policy) =
R(cid:2) , ΣR, ValidInd, Publish, Flabel, Policy)
[ValidLight].
The following result follows from Theorem 5 and Corol-
lary 3. The proof, veriﬁed in EasyCrypt, involves carefully
checking that φ holds at all points where the validation
algorithm is (or may be) called.
Corollary 4. Let E(cid:3) be an encryption scheme and ΣR,
R(cid:2) be two proof systems, let Γ = LPKE(E(cid:3), Σ(cid:3)
Σ(cid:3)
R(cid:2) ), and
ValidInd, Publish, Flabel, and Policy be abstract algorithms
as specifed. The Helios-hom-IDweed scheme constructed from
these is ballot private, strongly consistent, and strongly correct
i. R is voting friendly;
whenever all of the following hold:
ii. Γ is IND-1-CCA; iii. ΣR is zero-knowledge; iv. E(cid:3)
is
homomorphic; v. ValidInd that returns true for valid cipher-
; vii. Policy is such that
texts; vi. Policy commutes with Dec
b ∈ Policy(BB) =⇒ b ∈ BB; and viii. Flabel is injective.
HELIOS WITH LIGHT WEEDING. We deﬁne Helios with light
weeding as
∗
Helios-light-weed = HW (E(cid:3), Σ(cid:3)
ValidIndV
R(cid:2) , Σcorr-dec,
(cid:2) , Publishlast view, Flabelidentity, Policylast vote
) .
Helios-light-weed is a variant for Helios v3 that uses labels
that uniquely identify voters and performs lighter weeding
checks. Following Theorem 5, this is done without loss of
privacy. Additionally, this method for weeding yields another
defense mechanism against ballot privacy attacks [23] that has
not yet been implemented in Helios. We give an overview of
1005
the practical variants of Helios our EasyCrypt proofs cover
in Table I.
V. FORMALIZATION
We now discuss the formalization, and highlight some of
the key points it unveiled.
A. EasyCrypt
EasyCrypt [8], [9] is an interactive proof assistant for
reasoning about concrete security of cryptographic construc-
tions; to date, EasyCrypt has been used primarily for proving
security of cryptographic primitives rather than more complex
systems, with the notable exceptions of [4], [7].
EasyCrypt features a module system which combines
facilities from module systems in programming languages,
with a capability mechanism for restricting adversarial access
to oracles or memories. The module system allows proving
general principles once and for all, and later instantiating
these principles in a particular setting. In addition, EasyCrypt
features a theory mechanism that supports instantiation of
types and operators used in a formalization. Our formalization
heavily relies on these mechanisms to achieve modularity and
make veriﬁcation of several hundreds of variants tractable.
The EasyCrypt formalization of ballot privacy closely
follows the development outlined in the previous section, but
with two important differences. First, security statements in
EasyCrypt are concrete, i.e. the advantage of a (constructed)
adversary is given as an arithemetic expression of its capac-
ities and of the advantage of sub-adversaries—whereas for
readability, our presentation in the previous sections follows
the usual style of asymptotic security. More importantly,
EasyCrypt uses a relational program logic to formalize code-
based game-based reductionist arguments. The latter uses a
series of probabilistic programs with adversarial code, called
games, and of probabilistic claims relating the probability of
one or more events in one or more games, to establish its
main claim. In EasyCrypt, probabilistic claims are derived
using probabilistic Relational Hoare Logic (PRHL), which
generalizes Relational Hoare Logic [11] to a probabilistic
setting. PRHL is a program logic whose judgments are of
the form {Φ} c1 ∼ c2 {Ψ}, where c1 and c2 are games, and
Φ and Ψ are relations on program states. The rules of PRHL
allow the user to derive valid judgments. When Ψ is of an
appropriate form (concretely, E1(cid:16)1(cid:17) ⇒ E2(cid:16)2(cid:17), where (cid:16)i(cid:17) is
used to denote the memory in which the event is interpreted),
validity of the above judgment implies the probabilistic claim:
Pr[c1, m1 : E1] ≤ Pr[c2, m2 : E2]
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:18 UTC from IEEE Xplore.  Restrictions apply. 
stating that the probability of event E1 after executing c1 in
initial memory m1 is upper-bounded by the probability of
event E2 after executing c2 in m2.
Interestingly, our formalization highlighted one limitation of
EasyCrypt. In order to achieve maximal generality, our proof
of ballot privacy is modular and assumes IND-1-CCA security
of the underlying encryption scheme. An important goal for
future work is to prove in EasyCrypt that encryption schemes
commonly used in Helios, including El Gamal with zero-
knowledge proofs, achieve IND-1-CCA security. This com-
ponent does not require changes for the Labelled-MiniVoting
scheme, and can be viewed as a stand-alone component.
However, it involves extending EasyCrypt to reason about
rewinding arguments since existing IND-1-CCA proofs use
Bellare and Neven’s General Forking Lemma [10].
B. Issues with Pen-and-Paper Proofs
The formalization effort presented here highlighted two
shortcomings in existing pen-and-paper proofs for Labelled-
MiniVoting and its applications.
SIMULATION PROOFS WITH RANDOM ORACLES. Starting
from existing pen-and-paper proofs of BPRIV for Labelled-
MiniVoting, and attempting to formalize them led us to deeper
considerations on the interactions of simulation-based security
notions and proofs with random (or stateful) oracles, in a way
similar to Fiore and Nitulescu [28]. Indeed, in the proof of
Labelled-MiniVoting, it is highly important to split random
oracles between those that are taken over by the simulator and
those that need to remain independent (in particular, so they
can be taken over in lower-level simulations for the primitives).
Formally, this highlighted the need to strike a careful balance
between abstraction–which supports proof reuse and enforces
that the realization of a component be irrelevant to the current
security proof, and the need to have a full speciﬁcation of
the system on which the proof operates. In particular, the
need for formality in the treatment of random oracles caused
some false starts in the development, as core deﬁnitions and
theorem statements had to be adapted, ﬁrst to make room
for random oracles, then to clearly distinguish those random
oracles that are protocol-relevant (those used in the proof of
correct decryption) and need to be simulated from those that
are only relevant to lower-level primitives and can thus be
kept abstract (those used in the labelled public-key encryption
scheme), and ﬁnally to support zero-knowledge relations with
access to the abstract random oracles.9 However, we note
that this formal issue does not imply the existence of attacks
if the same hash function is used for computing the proof
of decryption and for other purposes. Still, in the spirit of
recent standardisation efforts, we do recommend that domain
separation be used in this case.
A MISSING ASSUMPTION. Existing proofs of ballot privacy
for abstract systems similar to Labelled-MiniVoting [14] do
not make use of the strong correctness, whereas it is in fact a
9A theorem that does not consider the latter two issues, although much
easier to state and prove, would not be instantiatable as broadly as ours.
necessary assumption. In practice, the game transition where
strong correctness is used implies an additional term (corre-
sponding exactly to the upper-bound on the strong correctness
advantage) in the ﬁnal security bound for ballot-privacy, which
does not appear in asymptotic security treatments, but may
be critical when evaluating security margins to determine
concrete security parameters.
C. Discussion
The ﬁnal qed took about one person-year to complete.
The statement and proof of Theorem 2 took about 75% of
the effort, while the specialization component made up the
rest (including some changes to the statement of Theorem 2
and related deﬁnitions to support zero-knowledge relations
with random oracles). Table II shows the development size
and veriﬁcation times;
the ﬁgures were obtained running
EasyCrypt on an HP ZBook with i7-4800MQ CPU and 32GB
RAM, running Ubuntu 14.01.
EXTENSIONS, REFINEMENTS AND GENERALISATIONS. It is
clear that much of the effort could have been spared if we had
chosen to forgo generality and consider a speciﬁc instance
of Helios. However, the beneﬁts of a general proof is that
it should now be easy to adapt our framework (and the
corresponding proofs) to: formalizing privacy of other voting
systems, formalizing other security properties, and carrying
our formal guarantees down to implementations, also consid-
ering security under weaker trust assumptions. For example,
a reﬁnement of our framework would explicitly distinguish
between the public and the secret part of a user’s credential.
Schemes where such distinction is crucial e.g. Belenios [21] or
Civitas [31], could then be instantiated in the resulting frame-
work. Of course, any extensions would require re-working the
formal results to deal with the changes. However in this case
the new proofs would mirror closely the development that we
present in this paper and may need to only locally account
for the changes. Other security properties of interest include
in particular veriﬁability [22], accountability [34], receipt-
freeness, and coercion-resistance [31]. Extending our work to
these properties would ﬁrst require to fully formalize them but
then we believe we could again rely on the genericity of our
approach to consider classes of protocols.
TOWARDS VERIFIED IMPLEMENTATIONS. We conclude this
discussion section by observing that the family of machine-
checked speciﬁcations we produce gets us one step closer