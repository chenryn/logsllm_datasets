chapter.
When you call Replace() with a MatchEvaluator as the replacement, your function will
be called for each regular expression match that needs to be replaced. Your function
needs to returm the replacement text. You can use any of the properties of the
Match object to build your replacement text. The example shown earlier uses
matchResult Value to retrieve the string with the whole regex match. Ofen, you'll use
matchResult,Groups[] to build up your replacement text from the capruring groups in
your regular expression.
If you do not want to replace certain regex matches, your function should return
paoedan st woieu xatan an fus Aidua ue ao nu tumau nos fI anten*rnsaguoeu
with nothing (i.e., deleted)
VB.NET
(asedaaxaa au teo ueo nos qoa u siea snoa a sassnosp tte adioo
ada e s  usn uxa uedauase us  ussed poau
ment text is the third parameter, after the subject and the regular expression. If you
used the Din keyword to create a variable with your regular expression, you can call
Replace() on that object with the replacement as the second parameter.
Instead of passing a string as the second or third parameter, you can pass a
MatchEvaluator object. This object holds a reference to a function that you add to the
class where you're doing the search-and-replace. Use the Dim keyword to create a new
variable of type MatchEvaluator. Pass one parameter with the Addressof keyword fol-
lowed by the name of your member function. The Adressof operator returns a refer-
ence to your function, without actually calling the function at that point.
The function you want to use for MatchEvaluator should return a string and should take
one parameter of class Systen,Text,RegularExpressions.Match. This is the same
Match class rerurned by the Regex, Match() member used in nearly all the previous recipes
in this chapter. The parameter will be passed by value, so you have to declare it with
ByVal.
When you call Replace() with a MatchEvaluator as the replacement, your function will
be called for each regular expression match that needs to be replaced. Your function
needs to retum the replacement text. You can use any of the properties of the Match
sussadnaymqueadep1 0o
---
## Page 217
object to build your replacement text. The example uses MatchResult.Value to retrieve
the string with the whole regex match. Often, you'll use MatchResult. Groups () to build
uoissaudxa eqn8au 1no. u sdnou8 Suunadeo 3q uonj 1xa1 uauaoeda ano. dn
If you do not want to replace certain regex matches, your function should return
MatchResult Value. If you return Nothing or an empty string, the regex match is replaced
with nothing (i.e., deleted).
Java
The Java solution is very straightforward. We iterate over all the regex matches as
explained in Recipe 3.11. Inside the loop, we call appendReplacement() on our
Matcher object. When find() fails to find any further matches, we call appendTai1()-
The two methods appendReplacement () and appendTai1() make it very easy to use a
different replacement text for each regex match.
appendReplacenent() takes rwo parameters. The first is the StringBuffer where you’re
(temporarily) storing the result of the search-and-replace in progress. The second is the
replacement text to be used for the last match found by find(). This replacement text
can include references to capturing groups, such as *$1. If there is a syntax error in
your replacement text, an I1legalArgunentException is thrown. If the replacement text
references a capturing group that does not exist, an IndexOutofBoundsException is
thrown instead. If you call appendReplacement() without a prior successful call to
find(), it throws an I1legalStateException.
If you call appendReplacenent() correctly, it does two things. First, it copies the text
located between the previous and current regex match to the string buffer, without
making any modifications to the text. If the current match is the first one, it copies all
the text before that match. After that, it appends your replacement text, substituting
any backreferences in it with the text matched by the referenced capruring groups.
If you want to delete a particular match, simply replace it with an empty string. If you
want to leave a match in the string unchanged, you can omit the call to appendReplace
ment() for that match. By *previous regex match,” We mean the previous match for
which you called appendReplacement(). If you don’t call appendReplacement( ) for certain
matches, those become part of the text between the matches that you do replace, which
is copied unchanged into the target string buffer.
When you're done replacing matches, call appendTail(). That copies the text at the end
of the sring after the last regex match for which you called appendReplacement ().
JavaScript
In JavaScript, a function is really just another object that can be assigned to a
variable. Instead of passing a literal string or a variable that holds a string to the
string-replace() function, we can pass a function that retums a string. This function
is then called each time a replacement needs to be made.
3.16 Replace Matches with Replacements Generated in Code | 201
---
## Page 218
You can make your replacement function accept one or more parameters. If you do,
the first parameter will be set to the text matched by the regular expression. If your
regular expression has capruring groups, the second parameter will hold the text
au jo ixa aq nos saat8 1anaueued puq aq *dnou Suumdeo isay au dq paqoie
second capturing group, and so on. You can set these parameters to use bits of the
regular expression match to compose the replacement.
The replacement function in the JavaScript solution for this recipe simply takes the text
matched by the regular expression, and returns it multiplied by rwo. JavaScript handles
fpdu suoisiaauo guns-on-iaqunu pue aqunu-oi-Suus au1
PHP
The preg_replace_callback() function works just like the preg_replace() function de-
do Bus oafqns uedaa uossudx enlau e saxe  I' adia u paqus
tional replacement limit, and optional replacement count. The regular expression and
subject string can be single strings or arrays.
The difference is that preg_replace_callback() expects the second parameter to be a
function rather than the actual replacement text. If you declare the function in your
code, then the name of the function must be passed as a string. Altermatively, you can
replacement function should take one parameter and retum a string (or something that
pass the result of create_function() to create an anonymous function. Either way, your
can be coerced into a string).
Each time preg_relace_callback() finds a regexmatch, it willcallyour callback fuc
tion. The parameter will be filled with an array of strings. Element zero holds the overall
regex match, and elements one and beyond hold the text matched by capturing groups
one and beyond. You can use this array to build up your replacement text using the
text matched by the regular expression or one or more capturing groups.
Perl
The s/// operator supports one extra modifier that is ignored by the m// operator: /e.
The/erexecute,modifertellsthesubstiutionoperatortoxecutethereplacement
part as Perl code, instead of interpreting it as the contents of a double-quoted string.
Using this modifier, we can easily retrieve the matched text with the $8 variable, and
then multiply it by rwo. The result of the code is used as the replacement string.
Python
Python’s sub() function allows you to pass the name of a function instead of a string
as the replacement text. This function is then called foreach regex match to be replaced.
You need to declare this function before you can reference it. It should take one pa-
202 | Chapter 3: Programming with RegularExpressions
---
## Page 219
search() function. You can use it to retrieve (part of) the regex match to build your
replacement. See Recipe 3.7 and Recipe 3.9 for details.
Your function should returm a string with the replacement text.
Ruby
The previous two recipes called the gsub() method of the String class with rwo pa-
rameters: the regex and the replacement text. This method also exists in block form.
iterator variable with a string that holds the text matched by the regular expression. If
In block form, gsub() takes your regular expression as its only parameter. It fills one
you supply additional iterator variables, they are set to nil, even if your regular ex
pression has capturing groups.
Inside the block, place an expression that evaluates to the string that you want to use
as the replacement text. You can use the special regex match variables, such as $~, $8,
and $1, inside the block. Their values change each time the block is evaluated to make
another replacement. See Recipes 3.7, 3.8, and 3.9 for details.
You cannot use replacement text tokens such as α^1, Those remain as literal text.
See Also
Recipe 3.9 shows code to get the text matched by a particular part (capruring group)
of a regex.
Recipe 3.15 shows code to make a search-and-replace reinsert parts of the text matched
by the regular expression.
3.17ReplaceAll MatchesWithintheMatchesof
AnotherRegex
Problem
You want to replace all the matches of a particular regular expression, but only within
certain sections of the subject string. Another regular expression matches each of the
sections in the string.
s8e  qas poq se paxueu aue sBessed snouea qpqa u 3 I.LH ue aseq no kes
Between each pair of bold tags, you want to replace all matches of the regular expression
before> with the replacement text first before before before before, you want to end up with:
before first after before after after
3.17 Replace All Matches Within the Matches of AnotherRegex | 203
---
## Page 220
Solution
C#
Regex outerRegex = new Regex(*,*?, RegexOptions Singleline);
Regex inerRegex = new Regex(“before");
string resultString = outerRegex.Replace(subjectString,
new MatchEvaluator(ComputeReplacenent));
public String ConputeReplacenent(Match matchResult) {
// Run the inner search-and-replace on each match of the outer regex
VB.NET
Dim OuterRegex As Nen Regex(* ,*?, Regex0ptions. Singleline)
Dim InnerRegex As New Regex(*before*)
Dim MyMatchEvaluator As New MatchEvaluator(AddressOf ConputeReplacenent)
Dim ResultString = OuterRegex,Replace(SubjectString, MyMatchEvaluator)
Public Function ConputeReplacenent(ByVal MatchResult As Match) As String
‘Run the inner search-and-replace on each match of the outer regex
End Function
Java
StringBuffer resultString = ne StringBuffer();
Pattern outerRegex = Pattern.compile(*,*?");
Pattern innerRegex = Pattern,compile(*before");
Matcher outerMatcher = outerRegex,matcher(subjectString);
while (outexMatcher,find())(
outerMatcher appendReplacement(resultString,
((x,)vaedax(()noxxauexano)xaeu*xaayxau
outerMatcher. appendTail(resultString);
JavaScript
var result = subject,replace(/,*?/g, function(natch) {
return match.replace(/before/g, "after*);
);
PHP
$result = preg_replace_callback(*%,*?%',
replace_within_tag, $subject);
204 | Chapter 3: Programming with RegularExpressions
---
## Page 221
function replace_within_tag($groups){
return preg_replace(/before/',*after’, Sgroups[0]);
Perl
$subject =~ s%,*?%($match = $&) =α s/before/aftex/g; $match;%eg;
Python
def replacewithin(matchobj):
innerre = re.compile(*before*)
return innerre,sub(aafter*, matchobj -group())
result = re.sub(*,*?*, replacenithin, subject)
Ruby
innerre = /before/
result = subject -gsub(/,*?/) (|match|
match.gsub(innerre, ‘after′)
Discussion
This solution is again the combination of rwo previous solutions, using two regular
expressions. The *outer* regular expression, (,*?, matches the HTML bold
tags and the text berween them. The “inner” regular expression matches the “before,”
which we'′ll replace with *after."
Recipe 3.16 explains how you can run a search-and-replace and build the replacement
text for each regex match in your own code. Here, we do this with the outer regular
expression. Each time it finds a pair of opening and closing  tags, we run a
search-and-replace using the inner regex, just as we do in Recipe 3.14. The subject
string for the search-and-replace with the inner regex is the text matched by the outer
regex.
SeeAlso
This recipe uses techniques introduced by three earlier recipes. Recipe 3.11 shows code
to iterate over all the matches a regex can find in a string. Recipe 3.15 shows code to
find regex matches within the matches of another regex. Recipe 3.16 shows code to
search and replace with replacements generated in code for each regex match instead
of using a fixed replacement text for all matches.
3.17 Replace All Matches Within the Matches of Another Regex | 205
---
## Page 222
3.18ReplaceAll MatchesBetweentheMatchesofAnother
Regex
Problem
You want to replace all the matches of a particular regular expression, but only within
certain sections of the subject string. Another regular expression matches the text be-
rween the sections. In other words, you want to search and replace through all parts of
the subject string not matched by the other regular expression.
Say you have an HTML file in which you want to replace straight double quotes with
smart (curly) double quotes, but you only want to replace the quotes outside of HTML
tags. Quotes within HTML tags must remain plain ASCII straight quotes, or your
web browser won’t be able to parse the HTML anymore. For example, you
x,o xx,“text" “text”
Solution
C#
string resultString = null;
(]>)xa8ay mau = xa8ayxano xa8ag
Regex innerRegex = new Regex("\"([^\"]*)\"*);
// Find the first section
int lastIndex = 0;
Match outerMatch = outerRegex.Match(subjectString);
while (outerMatch.Success){
// Search and replace through the text between this match,
// and the previous one
string textBetween =
subjectString Substring(lastIndex, outerMatch.Index - lastIndex);
lastIndex = outerMatch. Index + outerMatch.Length;
// Copy the text in the section unchanged
resultString += outerMatch.Value;
// Find the next section
outerMatch = outexRatch.NextMatch();
// Search and replace through the remainder after the last regex match
subjectString.Length - lastIndex);
resultString += innerRegex,Replace(textAfter, "\u201C$1\u201D");
206 | Chapter 3: Programming with RegularExpressions
---
## Page 223
VB.NET
Dim ResultString As String = Nothing
Dim OuterRegex As Nen Regex(°]*>)
Dim InnerRegex As New Regex(***([^*)**")
‘Find the first section
Dim LastIndex = 0
Dim OuterMatch = OuterRegex.Match(SubjectString)
While OuterMatch Success
Search and replace through the text between this match,
'and the previous one 
Din TextBetween = SubjectString-Substring(LastIndex,
OuterMatch.Index - LastIndex);
ResultString += InnerRegex-Replace(TextBetween,
ChrW(&H201C) + *$1” + ChrW(&H201D))
LastIndex = OuterMatch. Index + OuterMatch.Length
'Copy the text in the section unchanged
ResultString += OuterMatch.Value
‘Find the next section
OuterMatch = OuterMatch.NextMatch
End Wh1le
‘Search and replace through the remainder after the last regex match
Dim TextAfter = SubjectString.Substring(LastIndex,
SubjectString.Length - LastIndex);
ResultString += InnerRegex.Replace(TextAfter,
ChrW(8H201C) + "$1” + ChrW(8H201D))
Java
StringBuffer resultString = ne StringBuffer();
(]>)atrduuxaed = xaagxano uxae
((]))atduouxaed = xaagauug uxaed
int lastIndex = 0;
while (outexMatcher.find())(
// Search and replace through the text between this match,
// and the previous one
String textBetween = subjectString-substring(lastIndex,
outerMatcher.start());
lastIndex = outerMatcher ,end();
// Append the regex match itself unchanged
resultString-append(outerMatcher -group());
// Search and replace through the renainder after the last regex match
String textAfter = subjectString-substring(lastIndex);
Matcher innerMatcher = 1nnerRegex,matcher(textAfter);
resultString-append(innerMatcher ,replaceA11(“\u201C$1\u201D*));
3.18 Replace Al Matches Between the Matches of Another Regex | 207
---
## Page 224
JavaScript
var result = *";
8/]>/ = xa8ag.xano xeA
3/(*[~])_/ = xa8ag.auu] xeA
var outerMatch = null;
var lastIndex = 0;
while (outerMatch = outerRegex-exec(subject)) {