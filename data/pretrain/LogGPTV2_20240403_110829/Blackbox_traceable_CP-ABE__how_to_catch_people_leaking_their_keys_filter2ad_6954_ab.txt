dard model. Combining it with the result in Sec. 3.2, we
obtain an eﬃcient, fully secure and highly expressive BT-
CP-ABE scheme.
In Sec. 5, we consider the blackbox traceability for another
type of decryption blackboxes, which we refer to as policy-
speciﬁc decryption blackbox . A policy-speciﬁc decryption
blackbox is a decryption blackbox that is able to decrypt ci-
phertexts with some speciﬁc access policy, say AD. In other
words, unlike a key-like decryption blackbox which has an
attribute set, for example, SD attached as the alleged de-
cryption capability as the blackbox advertised by the seller,
a policy-speciﬁc decryption blackbox is only known to be
able to decrypt ciphertexts with some speciﬁc policy AD.
The policy-speciﬁc decryption blackbox reﬂects a diﬀerent
(and possibly more sophisticated) attacking scenario which
we call it “found-in-the-wild.” In this scenario, a decryption
blackbox is found, for example, from a black market, and
reported to an authority which could be a law enforcement
agency. The decryption blackbox’s associated attribute set
SD is missing as it is “found-in-the-wild” while after some
testing, it is found that the blackbox can decrypt ciphertexts
with certain access policy, say AD. Interestingly, we show
that our BT-CP-ABE scheme is also traceable (where the
traceability deﬁnition needs to be modiﬁed accordingly, the
modiﬁcation is minor) against this policy-speciﬁc decryp-
tion blackbox, although the traceability can only be proven
against selective adversaries.
2. DEFINITIONS
We ﬁrst review the deﬁnition of CP-ABE which is based
on the work of [15, 16] with the exception that in our ‘func-
tional’ deﬁnition, we explicitly assign and identify users us-
ing unique indices, and let K be the number of users in a
CP-ABE system. Then we introduce the traceability deﬁni-
tion against key-like decryption blackbox. Predeﬁning the
number of users is indeed a weakness as well as a neces-
sary cost for achieving blackbox traceability, but we stress
that in practice, this should not incur much concern, and
all the existing blackbox traceable systems (e.g.
[14, 5, 6,
9]) have the same setting. Also being consistent with the
conventional deﬁnition of CP-ABE [15, 16], the user indices
are not used in normal encryption (i.e. the encryptors do
not need to know the indices of any users in order to en-
crypt) and diﬀerent users (with diﬀerent indices) may have
the same attribute set.
2.1 CP-ABE and Security Models
A Ciphertext-Policy Attribute-Based Encryption (CP-ABE)
system consists of four algorithms:
Setup(λ,U, K) → (PP, MSK). The algorithm takes as in-
put a security parameter λ, the attribute universe U,
and the number of users K in the system, then runs in
polynomial time in λ, and outputs the public parame-
ter PP and a master secret key MSK.
KeyGen(PP, MSK, S) → SKk,S. The algorithm takes as in-
put the public parameter PP, the master secret key
MSK, and an attribute set S, and outputs a private
decryption key SKk,S, which is assigned and identiﬁed
by a unique index k ∈ {1, . . . ,K}.
Encrypt(PP, M, A) → CT . The algorithm takes as input
the public parameter PP, a message M , and an access
policy A over U, and outputs a ciphertext CT such
that only users whose attributes satisfy A can recover
M . A is implicitly included in CT .
Decrypt(PP, CT, SKk,S) → M or ⊥. The algorithm takes
as input the public parameter PP, a ciphertext CT ,
and a private key SKk,S.
If S satisﬁes CT ’s access
policy, the algorithm outputs a message M , otherwise
it outputs ⊥ indicating the failure of decryption.
Now we deﬁne the security of a CP-ABE system using
a message-hiding game, which is a typical semantic security
game and is based on that for conventional CP-ABE [15,
16] security against adaptive adversaries, except that each
key is identiﬁed by a unique index. Although the index of
each user is assigned by the KeyGen algorithm, to capture
the security that an attacker can adaptively choose keys to
corrupt, we allow the adversary to specify the index when
he makes a key query, i.e., to query a private decryption
key for an attribute set S, the adversary submits (k, S) to
the challenger, where k is the index to be assigned to the
corresponding decryption key.
It is worth noticing that: (1) for clarity, for i = 1 to q, the
adversary submits (index, attribute set) pair (ki, Ski ) to query a
477private key for attribute set Ski , where q ≤ K, ki ∈ {1, . . . ,K},
and ki 6= kj ∀1 ≤ i 6= j ≤ q (this is to guarantee that each
user/key can be uniquely identiﬁed by an index); and (2) for
ki 6= kj we do not require Ski 6= Skj , i.e., diﬀerent users/keys
may have the same attribute set. We remark that these two
points apply to the rest of the paper.
public parameter PP to A.
and the challenger responds with SKki,Ski
GameMH. The Message-hiding game is deﬁned between a
challenger and an adversary A as follows:
Setup. The challenger runs Setup(λ,U, K) and gives the
Phase 1. For i = 1 to q1, A adaptively submits (ki, Ski ),
Challenge. A submits two equal-length messages M0, M1
and an access policy A∗. The challenger ﬂips a random
coin b ∈ {0, 1}, and gives A an encryption of Mb under
A∗.
Phase 2. For i = q1+1 to q, A adaptively submits (ki, Ski ),
Guess. A outputs a guess b′ ∈ {0, 1} for b.
A wins the game if b′ = b under the restriction that
A∗ cannot be satisﬁed by any of the queried attribute sets
Sk1 , . . . , Skq . The advantage of A is deﬁned as MHAdvA =
| Pr[b′ = b] − 1
2|.
and the challenger responds with SKki,Ski
.
.
Definition 1. A K-user CP-ABE system is secure if for
all polynomial-time adversaries A the advantage MHAdvA
is negligible in λ.
It is clear that a secure CP-ABE system deﬁned as above
has all the appealing properties that a conventional CP-ABE
system [15, 16] has, that is, fully collusion-resistant security,
ﬁne-grained access control on encrypted data, and eﬃcient
one-to-many encryption.
2.2 BT-CP-ABE: Traceability
Now we deﬁne the traceability against key-like decryption
blackbox, and call the new system a Blackbox Traceable CP-
ABE (or BT-CP-ABE for short). Our deﬁnition is loosely
related to the traitor tracing feature in broadcast encryp-
tion [6, 9]. A key-like decryption blackbox D in our setting
is viewed as a probabilistic circuit that takes as input a ci-
phertext CT and outputs a message M or ⊥, and such a
decryption blackbox does not need to be perfect, namely,
we only require it to be able to decrypt with non-negligible
success probability. In particular, the adversary (i.e. seller)
describes a key-like decryption blackbox D with a non-empty
attribute set SD and a non-negligible probability value ǫ (i.e.
0 < ǫ ≤ 1 is polynomially related to λ), and advertises that
for any access policy A, if it can be satisﬁed by SD, this
blackbox D can decrypt the corresponding ciphertext associ-
ated with A with probability at least ǫ. Note that ǫ is the
lower-bound of D’s decryption ability, e.g., suppose A1 is a
ciphertext’s access policy satisﬁed by SD and D can decrypt
the ciphertext with probability 0.1, even if D can decrypt
ciphertexts under other valid access policies (satisﬁed by D)
with probability 1, the seller can only declare an ǫ ≤ 0.1.
Obviously for some attribute set SD, ǫ is closer to 1, which
implies that the decryption ability of D is closer to that of
a private key with attribute set SD, and hence D is more
attractive to potential buyers who are interested in decrypt-
ing ciphertexts with access policies which can be satisﬁed by
SD. We now deﬁne a tracing algorithm as follows.
TraceD(PP, SD, ǫ) → KT ⊆ {1, . . . ,K}. This is an oracle al-
gorithm that interacts with a key-like decryption blackbox D.
By given the public parameter PP, a non-empty attribute set
SD, and a probability value (lower-bound) ǫ, the algorithm
runs in time polynomial in λ and 1/ǫ, and outputs an index
set KT ⊆ {1, . . . ,K} which identiﬁes the set of malicious
users. Note that ǫ has to be polynomially related to λ.
The following Tracing Game captures the notion of fully
collusion-resistant traceability. In the game, the adver-
sary targets to build a decryption blackbox D that functions
as a private decryption key with attribute set SD (as the
name of key-like decryption blackbox implies). The tracing
algorithm, on the other side, is designed to extract the index
of at least one of the malicious users whose decryption keys
have been used for constructing D.
GameTR. The Tracing Game is deﬁned between a challenger
and an adversary A as follows:
Setup. The challenger runs Setup(λ,U,K) and gives the
Key Query. For i = 1 to q, A adaptively submits (ki, Ski ),
public parameter PP to A.
and the challenger responds with SKki,Ski
.
(Key-like) Decryption Blackbox Generation. A out-
puts a decryption blackbox D associated with a non-
empty attribute set SD ⊆ U and a non-negligible prob-
ability (lower-bound) value ǫ.
Tracing. The challenger runs TraceD(PP, SD, ǫ) to obtain
an index set KT ⊆ {1, . . . ,K}.
Let KD = {ki|1 ≤ i ≤ q} be the index set of keys cor-
rupted by the adversary. We say that the adversary A wins
the game if the following conditions hold:
1. For any access policy A that is satisﬁed by SD, we have
Pr[D(Encrypt(PP, M, A)) = M ] ≥ ǫ,
where the probability is taken over the random choices
of message M and the random coins of D. A decryp-
tion blackbox satisfying this condition is said to be a
useful key-like decryption blackbox.
2. KT = ∅, or KT 6⊆ KD, or (SD 6⊆ Skt ∀kt ∈ KT ).
We denote by TRAdvA the probability that adversary A
wins this game.
Definition 2. A K-user Blackbox Traceable CP-ABE sys-
tem is traceable if for all polynomial-time adversaries A the
advantage TRAdvA is negligible in λ.
Remark: For a useful key-like decryption blackbox D, the
traced KT must satisfy (KT 6= ∅) ∧ (KT ⊆ KD) ∧ (∃kt ∈
KT s.t. Skt ⊇ SD) for traceabililty. (1) (KT 6= ∅) ∧ (KT ⊆
KD) captures the preliminary traceability that the tracing
algorithm can extract at least one malicious user and the
coalition of malicious users cannot frame any innocent user.
Note that such a preliminary traceability is a weak trace-
ability that may not be useful enough in practice. Speciﬁ-
cally, consider a key-like decryption blackbox D built from
the private decryption keys of users k1 and k2 who were
authorized high-value attribute set Sk1 and low-value at-
tribute set Sk2 , respectively, and assume that Sk2 6⊇ Sk1
and the decryption ability of D is described by SD = Sk1 ,
478e.g., SD = Sk1 = {Senior Manager}, and Sk2 = {Intern}.
A scheme is considered to be weak traceable if its Trace
algorithm only extracts k2 from D as the malicious user.
This may not be satisfactory in practice as D having the
decryption ability of attribute set {Senior Manager} implies
that there must be some user having attribute “Senior Man-
ager” participated in building D yet the algorithm was only
able to trace D to an “Intern”, who has less to lose.
(2)
(∃kt ∈ KT s.t. Skt ⊇ SD) captures strong traceability that
the Trace algorithm can extract at least one malicious user
whose private key enables D to have the decryption ability
corresponding to SD, i.e., whose attribute set is a super-
set of SD. As a related work, comparable weak and strong
traceability notions in the setting of predicate encryption
were considered in [14]. In this paper we focus on the strong
traceability of CP-ABE, and unless stated otherwise, by the
traceability we mean the strong traceability.
Note that the tracing game above does not limit the num-
ber of colluded users. Also note that, as of [5, 6, 9, 14], we
are modeling a stateless (resettable) decryption blackbox –
the decryption blackbox is just an oracle and maintains no
state between activations.
3. AUGMENTED CP-ABE
Following the routes of [5, 6, 9], instead of constructing
a BT-CP-ABE directly, we deﬁne a simpler primitive called
Augmented CP-ABE (or AugCP-ABE for short) and its se-
curity notions ﬁrst, then we show that a secure AugCP-ABE
can be transformed to a secure and traceable BT-CP-ABE
scheme.
In Sec. 4, we propose a concrete construction of
AugCP-ABE.
3.1 Def nitions
An AugCP-ABE system consists of the following four al-
gorithms, in particular, diﬀerent from a conventional CP-
ABE, the encryption algorithm takes one more parameter
¯k ∈ {1, . . . ,K + 1}.
SetupA(λ,U,K) → (PP, MSK). The algorithm takes as in-
put a security parameter λ, the attribute universe U,
and the number of users K in the system, then runs in
polynomial time in λ, and outputs the public parame-
ter PP and a master secret key MSK.
KeyGenA(PP, MSK, S) → SKk,S. The algorithm takes as in-
put PP, the master secret key MSK, and an attribute
set S, and outputs a private key SKk,S, which is as-
signed and identiﬁed by a unique index k ∈ {1, . . . ,K}.
EncryptA(PP, M, A, ¯k) → CT . The algorithm takes as input
PP, a message M , an access policy A over U, and an
index ¯k ∈ {1, . . . ,K+1}, and outputs a ciphertext CT .
A is included in CT , but the value of ¯k is not.
DecryptA(PP, CT, SKk,S) → M or ⊥. The algorithm takes
as input PP, a ciphertext CT , and a private key SKk,S.
If S satisﬁes CT ’s access policy, the algorithm outputs
a message M , otherwise it outputs ⊥ indicating the
failure of decryption.
Correctness. For any attribute set S ⊆ U, k ∈ {1, . . . ,K},
access policy A over U, ¯k ∈ {1, . . . ,K + 1}, and message M ,
suppose (PP, MSK) ← SetupA(λ,U,K), SKk,S ← KeyGenA(
PP, MSK, S), CT ← EncryptA(PP, M, A, ¯k). If (S satisﬁes A)
∧(k ≥ ¯k) then DecryptA(PP, CT, SKk,S) = M .
It is worth noticing that during decryption if the attribute
set S of a private decryption key satisﬁes the access policy A
of a ciphertext, the decryption works, regardless of the value
of key index k or encryption index ¯k, but whether the output
message is equal to the encrypted message is determined by
the values of k and ¯k.
i.e., if and only if (S satisﬁes A) ∧
(k ≥ ¯k), can SKk,S correctly decrypt a ciphertext encrypted
using (A, ¯k). Note that if we always set ¯k = 1, then the
functions of AugCP-ABE are identical to that of BT-CP-
ABE. Actually, the idea behind converting an AugCP-ABE
scheme to a BT-CP-ABE scheme is to construct an AugCP-
ABE scheme with (encryption) index-hiding property, and
then always set ¯k = 1 in normal encryption, while use ¯k ∈
{1, . . . , K + 1} in generating ciphertexts for tracing.
Security. We deﬁne the security of AugCP-ABE in the fol-
lowing three games, where the ﬁrst two are for message-
hiding, and the third one is for the index-hiding property.
In the ﬁrst two message-hiding games between a chal-
lenger and an adversary A, ¯k = 1 (the ﬁrst game, GameA
MH1 )
and ¯k = K + 1 (the second game, GameA
Setup. The challenger runs SetupA(λ,U, K) and gives the
Phase 1. For i = 1 to q1, A adaptively submits (ki, Ski ),
Challenge. A submits two equal-length messages M0, M1
and an access policy A∗. The challenger ﬂips a random
coin b ∈ {0, 1}, and sends CT ← EncryptA(PP, Mb, A∗, ¯k)
to A.
Phase 2. For i = q1 + 1 to q, A adaptively submits
.