>
> ![](media/image382.jpeg)
>
> In this example, we have access to a host, as shown in the following
> screenshot:
>
> ![](media/image383.jpeg)
We can now access the Meterpreter shell by right-clicking on the host
via Meterpreter \| Interact \| Meterpreter Shell, as shown in the
following screenshot:
> ![](media/image384.jpeg)
>
> In our example, we have a system with IP 192.168.0.5 running on port
> 443, which we want to access from outside:
>
> ![](media/image385.jpeg)
>
> We run the port forward by using the following command:
>
> **portfwd add -l \ -p \ -r \ host\>**
>
> ![](media/image386.jpeg)
>
> Now, we can visit port 888 on our localhost, where we will be able to
> see the application, as shown in the following screenshot. In our
> case, an NAS storage was running on the internal server on port 443,
> so we could see its login port, like so:
>
> ![](media/image387.jpeg)
>
> For more information on this, visit the following link:
> [https://www.offensive-securit
> y.com/metasploit-unleashed/portfwd/.](https://www.offensive-security.com/metasploit-unleashed/portfwd/)
# Pivoting via Armitage
> So far, we have seen methods for pivoting in scenarios in which the
> machines are in the same subnet and are reachable. However, during a
> RedTeam activity, we may come across a network which has different
> subnets that we know exist but are not reachable by the system we have
> a Meterpreter shell on. In this section, we will look at an example of
> how to pivot to those networks.
>
> The Windows system has a command-line tool that makes it possible to
> view the routing table. This tool is called **route**. The routing
> table consists of destinations, routes, and next hops. These entries
> define a route to a destination network.
To view a routing table of the system, we have to do the following:
1.  Right-click on the host and go to Meterpreter \| Interact \| Command
    > Shell, as shown in the following screenshot:
> ![](media/image388.jpeg)
>
> This will open a CMD of our host. We will then run the route print
>
> command, which will show something like the following screenshot:
>
> ![](media/image389.jpeg)
>
> The preceding screenshot shows the active routes. Now we know that
> there is a subnet called 172.19.4.0/24 that exists, and we want to
> reach that.
>
> To see a list of the current hosts that are reachable in the network,
> we can do an ARP scan after setting up the pivot.
2.  To set up the pivot, we can right-click on the host and go to
    > Meterpreter \| Pivoting \| Setup, as shown in the following
    > screenshot:
> ![](media/image390.jpeg)
>
> A new window will then open. From here, we can choose the subnet:
>
> ![](media/image391.jpeg)
3.  Once the pivot is set up, we can now proceed to discover the hosts
    > that are live on this network by right-clicking on the host.
4.  Choose the Meterpreter session we have, and then select ARP Scan:
> ![](media/image392.jpeg)
>
> ![](media/image393.jpeg)A new window will open which shows us the
> subnets that are currently accessible. Here, we can see the subnets
> that we also saw in the routing table in the preceding screenshot:
5.  Now we will click on ARP Scan, which actually runs a post
    > exploitation module (windows/gather/arp_scanner). From here, we
    > can see that new hosts have been found, as well as added to the
    > target window of our Armitage instance:
> ![](media/image394.jpeg)
However, we still can\'t see any of the machines from our target subnet
172.19.4.0/24. This is because there was no route defined in the routing
table of
> our current machine that we have a Meterpreter shell on. Now let\'s
> learn how to manually add a route.
We can interact with the command shell as follows:
> ![](media/image395.jpeg)
Once the command shell is open, we can use the following command to
manually add a route into the system:
> ![](media/image396.jpeg)**route add \ MASK
> \ \**
>
> ![](media/image397.jpeg)The route has now been added. We will now set
> up the pivot in our Armitage instance by right-clicking on the host
> and going to Meterpreter \| Pivoting \| Setup, as shown in the
> following screenshot:
>
> In the new window which opens, we will see that a new subnet is in the
> table.
>
> We choose our desired subnet and click Add Pivot, as follows:
>
> ![](media/image398.jpeg)
>
> ![](media/image399.jpeg)Once the pivot has been added, we can now
> perform the ARP scan using the steps we mentioned previously. We will
> now see that we are able to reach the hosts inside that subnet:
# Multi-level pivoting
> In a RedTeam activity, we may often find more networks which are
> further accessible from one of the internal systems. In our case, this
> was the 172.19.4.0/24 network. Multi-level pivoting occurs when we
> achieve further access into a different subnet. Let\'s look at an
> example of this:
>
> ![](media/image400.jpeg)
>
> In the preceding diagram, the attacker exploits the network and sets
> up a pivot on 192.168.0.10 to gain further visibility into the
> internal network. Upon doing more recon, the attacker comes across a
> system that has two NICs:
>
> ![](media/image401.jpeg)
>
> Once the attacker gains access to 192.168.0.11, they can then add a
> pivot again which will allow them access to 172.4.19.0 subnet. This is
> known as multi-level pivoting. The following diagram explains this:
>
> ![](media/image402.jpeg)
>
> ![](media/image403.jpeg)As explained previously, we found a system in
> the 172.4.19.0 system which has another IP assigned to it. We
> exploited that system and added a pivot, as shown in the following
> screenshot:
>
> Following the same steps as we did for the Meterpreter shell, on this
> system, we add our pivot:
>
> ![](media/image404.jpeg)
>
> When performing the ARP Scan, we can see that we were able to reach
> the systems in this network too:
>
> ![](media/image405.jpeg)
# Summary
> At the beginning of this chapter, we learned about port forwarding and
> its uses. We also learned about pivoting and its uses, followed by
> methods of port forwarding via SSH. Then we learned about Meterpreter
> pivoting via Armitage, as well as the concept of multi-level pivoting.
>
> There are multiple ways to pivot. In further chapters, we will discuss
> pivoting via both Empire and Cobalt Strike. If you do not recognize
> these terms right now, there\'s no need to worry. We will cover
> everything in detail soon.
# Further reading
> For more information on the topics discussed in this chapter, please
> visit the following links:
>
> 
> 
# Age of Empire - The Beginning
> In this chapter, we will cover Empire, which is an extremely powerful
> post exploitation framework. The chapter will begin with a basic
> introduction to Empire, including installation and configuration. From
> there we will move on with using Empire for post exploitation
> effectively.
In this chapter, we will cover the following topics:
> Introduction to Empire Empire setup and installation Empire
> fundamentals
>
> Empire post exploitation for Windows/Linux/OSX Popping up a
> Meterpreter session using Empire Slack notification for Empire agents
# Technical requirements
> The technical requirements are as follows:
>
> Empire Slack
>
> Empire is a great tool to use in Red Team operations. Many Red Teamers
> opt for this tool due to its flexible architecture and its power over
> PowerShell. Empire can be very confusing for many pen testers, but
> once mastered, it can be a great asset when performing red team
> engagement.
# Introduction to Empire
> According to the PowerShell Empire website
> (): \"Empire is a pure PowerShell
> post-exploitation agent built on cryptologically- secure
> communications and a flexible architecture. Empire implements the
> ability to run PowerShell agents without needing powershell.exe,
> rapidly deployable post-exploitation modules ranging from key loggers
> to Mimikatz, and adaptable communications to evade network detection,
> all wrapped up in a usability-focused framework.\"
It premiered at BSidesLV in 2015.
# Empire setup and installation
> The Empire tool is open source and has a Git repository. We can clone
> the Git repository from GitHub by executing the following command:
> **git clone https://github.com/EmpireProject/Empire**
>
> ![](media/image406.jpeg)
The following files reside in the Empire directory:
> ![](media/image407.jpeg)
The Empire Framework is written in Python, so we first need to install
the Python dependencies. Empire already has an installation script,
which can be viewed in the setup directory (\~/Empire/setup/). The
installation file is a simple Bash script which we can execute by using
the following command: **./install.sh**
> ![](media/image408.jpeg)
>
> This script will check and install all the packages and dependencies
> required by the Empire framework. Once the installation is complete,
> you\'ll see a Setup complete! message as shown in the following
> screenshot:
>
> ![](media/image409.jpeg)
We need root privileges to run Empire so that it can start the listeners
on system ports as well. Execute the following command to run Empire
with root privilege: **sudo ./empire**
> The Empire framework will now load:
>
> ![](media/image410.jpeg)
>
> To get into using Empire, let\'s first understand the fundamentals of
> this.
# Empire fundamentals
> ![](media/image411.jpeg)Empire is a Python-based framework which is
> known for its post exploitation module and flexible architecture. The
> whole process of using the Empire Framework can be defined in **five
> phases**, which are demonstrated as follows:
The five phases are explained as follows:
> Phase 1: **Listener Initiation** Phase 2: **Stager Creation** Phase 3:
> **Stager Execution** Phase 4: **Acquiring Agent**
>
> Phase 5: **Post Module Operations**
To start with Empire, try executing the help command or inputting ? for
further options:
> ![](media/image412.jpeg)
# Phase 1 -- Listener Initiation
> The first phase of Empire post exploitation is Listener Initiation.
> When using Empire, it is required to first configure a *listener*
> which would listen for incoming connections. A listener in Empire is
> just like a *handler* in Metasploit. To view a list of all active
> listeners, execute the following command: **listeners**
The output of running the preceding command is as follows:
> ![](media/image413.jpeg)
>
> If there\'s no listener running in Empire, you\'ll get a No listeners
> currently active message. We can execute the help command or the ? for
> options allowed in the listeners module:
>
> ![](media/image414.jpeg)
![](media/image415.jpeg)We don\'t have an active listener for now, but
we can create one. To do this, we can use the uselistener command and
give the type of listener as the argument:
> For now, let\'s choose HTTP listener. We need to execute the following
> commands to configure the HTTP listener:
>
> **uselistener http info**
>
> ![](media/image416.jpeg)
>
> As you may have noticed, the prompt changed from **Purple** to
> **Red**, which means we can now configure the listener. By default,
> the HTTP listener will set
>
> ![](media/image417.jpeg)the HOST and PORT automatically, but we can
> change it using the set command. To see all the available options,
> execute the help command or the ?:
>
> Now that everything is in place, let\'s use the execute command to
> start the HTTP listener:
>
> ![](media/image418.jpeg)
>
> ![](media/image419.jpeg)We\'re still using the HTTP listener menu
> (Empire: listeners/http) so we need to get back to just the listener
> menu (Empire: listeners), which can be done using the back command. To
> list the active listeners, we can also use the list command in the
> Listeners menu:
>
> Our HTTP listener has started now, so we can just open the URL given
> in the preceding screenshot for verification:
>
> ![](media/image420.jpeg)
>
> ![](media/image421.jpeg)If anyone tries to open the Empire listener
> URL, they\'ll be shown the default IIS page. At the same time, we will
> get a notification in Empire about the web request with the client IP.
> In this case, 192.168.2.6 tried to access the Empire listener:
>
> We can now move on to the next phase.
# Phase 2 -- Stager Creation
> Once the listener is ready, we can now create a one-liner stager that
> will connect back to the listener when executed. This phase will focus
> on the stagers that can be used depending upon the situation. Please
> refer to the table at the end of this chapter to choose the stager
> that works best for you.You can execute the usestager command to
> create a stager. The argument passed to the command is the type of
> stager that you want to create:
>
> ![](media/image422.jpeg)
We can start with the default PowerShell launcher for now. The
multi/launcher module in Empire can be used to generate stagers for
which are supported in multiple OS. By default, the launcher generates
PowerShell stager but we can change the stager to use Python instead of
PowerShell. This can be done by setting the Language option in
multi/launcher module. For now let\'s execute the following command to
select the PowerShell launcher:
> ![](media/image423.jpeg)**usestager multi/launcher**
We can see the options required for the stager creation using the info
command:
> ![](media/image424.jpeg)
There are a few required options here, and they are all marked as True.
Let\'s set the Listener option so that once this stager is executed, it
will connect back on to the HTTP listener that we created in the
previous phase. Execute the following command to set the listener:
> **set Listener http**
>
> ![](media/image425.jpeg)
>
> Now that the listener is embedded in the stager code, let\'s create
> the stager using the execute command. This will give us a one-liner
> command:
>
> ![](media/image426.jpeg)
The stager is ready for execution on the target server now. Let\'s look
at the next phase.
# Phase 3 -- Stager Execution
> In this phase, the one-liner command will start the **staging
> process** for Empire. The following is the staging process in Empire,
> which takes place when the stager is executed on the target server:
1.  When creating a one-liner launcher (stager), Empire embeds the
    > staging key into the launcher itself:
> ![](media/image427.jpeg)
2.  A stager executed on the target server requests Stage 0; that is, a
    > patched
> stager.ps1, which can be found in Empire\'s data/agent/ directory.
3.  Before sending Stage 0 to the target server, Empire encrypts it.
    > (Stage 0 will be case-randomized and then XOR encrypted with the
    > AES staging key.)
4.  Launcher does the following things now:
    1.  Receives Stage 0 and decrypts it
    2.  Generates a RSA public/private key pair in-memory
    3.  Encrypts the RSA public key with the AES staging key