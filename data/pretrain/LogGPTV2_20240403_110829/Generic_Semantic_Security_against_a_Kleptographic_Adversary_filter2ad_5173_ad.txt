antee the entropy of a sample conditioned on previous samples. A straightforward analysis shows that
if there is a particular k
for which the resulting distribution has non-negligible collision probability
(cid:48) ‚àí 1 invocations), the watchdog can
(with non-negligible probability in the state produced by the Ô¨Årst k
detect this (with non-negligible probability). This was also observed in [RTYZ15]. Note that the actual
procedure carried out by the watchdog is still universal, but the running time (and number of samples)
may be adapted to the adversary. Note also that no strictly universal watchdog (whose running time is
independent of the adversary) can possibly detect an algorithm that suddenly becomes deterministic after
some (polynomial) number of steps determined by the adversary.
(cid:48)
(cid:48)
We further remark that the above can be easily generalized to stateful algorithm having public input
distributions.
3.3 Stego-free speciÔ¨Åcations for randomized algorithms; a general transformation
Now we are ready to establish the general result which yields a stego-free speciÔ¨Åcation for any
randomized algorithm in the trusted amalgamation model (see DeÔ¨Ånition A.2 in Sec. A.2 in the
appendix). We use a randomized algorithm with a public input distribution as a running example;
this can be generalized directly to the setting with an extra small input domain. As discussed
in Section 2, this already covers many of the interesting cases such as key generation and bit
encryption.
The transformation. Consider a randomized algorithm G which uses Œª = Œª(n) random bits for
inputs of length n. Let (dG,RG) denote the natural speciÔ¨Åcation of G that isolates randomness
generation, so that RG(1Œª) produces Œª uniformly random bits and dG(r, x) is a deterministic
algorithm so that for every x, G(x) is equal to dG(RG(1Œª(n), x) for n = |x|. (‚ÄúEqual‚Äù here simply
means these have identical output distributions.) As described above, we consider the transformed
speciÔ¨Åcation for G of the form (RG1,RG2, Œ¶,dG) where dG is as above, both RG1(1Œª) and RG2(1Œª)
16
produce Œª uniformly random bits, and Œ¶ is a hash function that carries strings of length 2k to
strings of length k. (See Fig. 5 below, which shows the transformation applied to an algorithm
with a public input distribution generated by IG.) We will prove that when Œ¶ is given by a random
oracle, this is a stego-free speciÔ¨Åcation of G.
RG0
spec
RG1
spec
r0
r1
Œ¶spec
RGspec
IG
r
x
dGspec
y
Figure 5: A stego-free speciÔ¨Åcation for randomized algorithm G, where x is obtained from IG.
Security analysis. The intuition is as follows: We know that a subverted implementation dGimpl of a
deterministic algorithm will be consistent with its speciÔ¨Åcation with an overwhelming probability
when the inputs are sampled from a public distribution (Lemma 2.3). In this case, it is generated
by IG√ó RGimpl. Thus dGimpl can be considered as good as dGspec when restricted to this public input
distribution. Furthermore, RGspec is stego-free, as discussed above. Thus all implementations can
be replaced with their speciÔ¨Åcations, and the security follows easily. We record this in the theorem
below, and we defer the detailed proof to Appendix C.
Theorem 3.3. For any randomized algorithm G, consider the speciÔ¨Åcation Gspec := (RGspec,dGspec),
where RGspec generates Œª = Œª(n) bits of uniform randomness and dGspec is deterministic. Let (RG0
spec,RG1
be the double-split speciÔ¨Åcation of RGspec as above. If (1) RG0
spec(1Œª) output Œª uniform
bits; (2) Œ¶spec takes r0 ‚ó¶ r1 as input, and outputs r (so it maps strings of length 2k to strings of length k)
(see Fig. 5), then Gspec is stego-free with a trusted amalgamation (according to Def. A.2 in appendix. A.2).
Here Œ¶spec is modeled as a random oracle, and Œ¶0impl, Œ¶1impl are executed independently.
spec(1Œª) and RG1
spec, Œ¶spec)
It is straightforward to generalize the result above to support algorithms with an extra small size
(polynomially large q) input as they essentially expand the input distribution to be q distributions,
which can all be checked by the watchdog.
Corollary 3.4. For any randomized algorithm G, consider a speciÔ¨Åcation Gspec := (RGspec,dGspec), where
RGspec is deÔ¨Åned as (RG0
spec, Œ¶spec) (as in Fig. 4): If dGspec takes r, x and m as input, where x is
generated by a sampler IG, and m is taken from a polynomial size public domain D. Then the speciÔ¨Åcation
Gspec is stego-free with a trusted amalgamation (according to Def. A.2 in appendix Sec. A.2) if Œ¶spec is
modeled as a random oracle.
spec,RG1
4 Subversion-Resistant Encryption
Encryption is a fundamental cryptographic tool, and is well-understood in conventional settings.
Unfortunately, encryption in the kleptographic setting has been a particular challenge; existing
17
solutions do not oÔ¨Äer satisfactory CPA security or protection from subversion of key generation.
The main motivation for this paper is to develop subversion resistant encryption schemes (both
symmetric and asymmetric) that meet these elementary criteria.
To brieÔ¨Çy survey the state-of-the-art: Previous results [BPR14, DFP15, BH15], in order to
protect against subliminal channel attacks, adopt a special kind of deterministic encryption scheme.
Note, however, that IND-CPA security is impossible for deterministic public-key encryption (or
deterministic, stateless symmetric-key encryption). (An important exception is [DMSD15], which
assumes that a trusted, subversion-free, party re-randomizes all communication.) These results
permit only the encryption algorithm to be subverted: key generation and decryption are assumed
to be honest. A further ‚Äúdecryptability‚Äù assumption was adopted in [BPR14, BH15] to ensure
security; it assumes that every ciphertext generated by the subverted implementation can be
correctly decrypted using the speciÔ¨Åcation. While this helps to achieve security, it seems diÔ¨Écult
to justify; see the criticism in [DFP15]. In general, then, correctness is not placed on the same
footing as security (which is established via the speciÔ¨Åcation in tandem with watchdog testing),
but is rather provided by Ô¨Åat.
In this section, we will address all these concerns.
4.1 Subversion-resistant symmetric encryption
We Ô¨Årst construct subversion-resistant symmetric-key encryption in the case when all algorithms
are subject to subversion. We then discuss correctness and how to remove the ‚Äúdecryptability‚Äù
assumption.
DeÔ¨Åning subversion resistance and correctness. We follow the deÔ¨Ånitional framework of [RTYZ15]
to deÔ¨Åne a subversion-resistant symmetric-key encryption scheme. The deÔ¨Ånition formalizes the
intuition that an encryption scheme is secure under subversion if IND-CPA security can be pre-
served in the ‚Äúsubverted security game‚Äù conditioned on the implementation evading detection.
Recall that in the ‚Äúsubverted security game‚Äù the challenger uses the subverted implementations of
all the algorithms. Initially, we focus on stateless encryption algorithms, and discuss how to relax
this assumption when we discuss large message spaces.
DeÔ¨Ånition 4.1. A (stateless) symmetric-key (bit) encryption scheme with speciÔ¨Åcation Espec := (KGspec,Encspec,
Decspec) is subversion-resistant in the oÔ¨Ñine watchdog model if there exists a ppt watchdog W so that,
for any ppt adversary A playing the game described in Figure 6, either
where AdvA(1Œª) = |Pr[bC = 1]‚àí 1/2|, and, DetW,A(1Œª) =
AdvA is negligible,
or DetW,A is non-negligible.
(cid:12)(cid:12)(cid:12)Pr[W Eimpl(1Œª) = 1]‚àí Pr[Pr[W Espec(1Œª) = 1]
(cid:12)(cid:12)(cid:12).
Correctness under subversion is an overlooked, but fundamental property. For example, one
can imagine that the adversary ‚Äúhates‚Äù a certain message m that is unknown to the watchdog (e.g.,
‚Äúyour cryptosystem is subverted‚Äù). The subverted implementation can then check whether the
plaintext matches m and, if so, Decimpl outputs an arbitrary value other than m. This can be used
by the adversary to eÔ¨Äectively implement censorship. We say a symmetric-key encryption scheme
is correct under subversion if the following holds:
(cid:34) Decimpl(C) (cid:44) M :
‚àÄM,Pr
C ‚Üê Encimpl(K, M), K ‚Üê KGimpl(1Œª)
(cid:35)
‚â§ negl(Œª),
18
test phase
 Eimpl
execute phase
A(1Œª)
A(1Œª)
W(1Œª)
bW ‚Üê W Eimpl(1Œª)
C(1Œª)
K ‚Üê KGimpl(1Œª)
for i = 1 to q

1q
{ci,0, ci,1}i‚àà[q] -
c
-
}i‚àà[q
(cid:48)] -
{c
(cid:48)
i,1
(cid:48)
(cid:48)
i,0, c
b

ci,0 = Encimpl(K,0)
ci,1 = Encimpl(K,1)
b ‚Üê {0,1}
c = Encimpl(K, b)
for i = 1 to q
(cid:48)
i,0 = Encimpl(K,0)
(cid:48)
i,1 = Encimpl(K,1)
c
c
(cid:48)
(cid:48)
bC := 1 if b = b
bC := 0 otherwise
Figure 6: Subversion-resistant symmetric-key bit encryption. (The stateless case.)
where the probability is over the choice of K and the coins used in Encimpl.
Constructing subversion resistant symmetric-key bit encryption. We proceed to design a speci-
Ô¨Åcation for any secure symmetric-key encryption scheme so that the subliminal channels in all
of the algorithms can be destroyed. With the general tool we developed in Section 3.2, we will
‚Äúimmunize‚Äù the algorithms one by one.
First, the (symmetric-key) key generation algorithm simply takes the security parameter as input
and produces a random element in the key space. Following Thm. 3.1 directly, the speciÔ¨Åcation
KGspec := (KG0
spec both output random
elements in the key space K, and Œ¶KG
spec : K√óK ‚Üí K, is modeled as a random oracle. As discussed
above, the random oracle assumption can be removed if we allow randomness generation to be
further subdivided; see appendix. D.
spec) (see Fig. 7) is stego-free; here KG0
spec, Œ¶KG
spec,KG1
spec,KG1
KG0
spec
KG1
spec
K0
K1
Œ¶KG
spec
K
Figure 7: Stego-free speciÔ¨Åcation for key generation algorithm in a symmetric-key bit encryption
scheme.
Next, consider the encryption algorithm; we focus only on bit encryption. In this case, the
19
encryption algorithm takes three inputs: a security parameter, a small domain input (a bit),
and a pair given by the random coin and the key, which come from a public input distribution
RGimpl √ó KGimpl. From Corollary 3.4, the speciÔ¨Åcation Encspec := (RGspec,dEncspec) (as described in
Fig. 8), where RGspec := (RG0
spec) deÔ¨Åned as in Fig. 4, is stego-free if Œ¶spec is assumed to
be a random oracle.
spec, Œ¶RG
spec,RG1
RG0
spec
RG1
spec
r0
r1
Œ¶RG
spec
RGspec
r
m ‚àà {0,1}
KGimpl
K
dEncspec
C
Figure 8: Stego-free speciÔ¨Åcation for encryption algorithm in a symmetric-key bit encryption
scheme.
Finally, consider the decryption algorithm. This algorithm does not inÔ¨Çuence CPA security,
but directly inÔ¨Çuences correctness. Observe that the decryption algorithm is deterministic and
can be analyzed with a public input distribution as we focus on bit encryption. To see this, the
decryption algorithm will input a key K (generated by KGimpl) and a ciphertext C (generated by
encrypting 0 or 1 using K). The watchdog can sample from the input distribution of Decimpl to
check the correctness, i.e., the consistency with Decspec.
With all of the algorithms handled individually as above, we present the Ô¨Årst general immuniz-
ing result for randomized encryption algorithms.
Theorem 4.2. Given any stateless IND-CPA secure symmetric bit encryption scheme, the speciÔ¨Åcation
described above is subversion resistant and correct according to Def. 4.1.
(sketch). The speciÔ¨Åcation is described above (with the randomized algorithm split into randomness
generation and a deterministic part, and the randomness generation split into two components
together with an immunizing function as in Figure 4.).
Security. The watchdog is the combination of those described above: it guarantees that RGspec is
stego-free (making samples to observe collisions as in the proof of Theorem 3.1) and guarantees
that dEncimpl is consistent with the speciÔ¨Åcation on inputs sampled from KGimpl √ó RGimpl (with 0
and 1); cf. Lemma 2.3. Here we only sketch the game changes and explain the negligible diÔ¨Äerences
arising during the game transitions conditioned the watchdog‚Äôs result.
Game-0 is the original game as described in Figure 6 with a trusted amalgamation; Game-1 is
the same as Game-0 except KGimpl is replaced with KGspec; Game-2 is the same as Game-1 except
Encimpl is replaced with Encspec.
The adversary‚Äôs advantage in Game-0 and Game-1 are negligibly close because of the stego-
freeness of KGspec. To see this, a simulator can simulate the rest of the games in Game-0 (or Game-1)
after receiving K sent by the challenger in the game deÔ¨Åning stego-freeness for KGspec. If one
can distinguish Game-0 from Game-1, then the simulator can easily tell apart KGimpl from KGspec
20
(even if the challenger does the amalgamation). Similarly, we can argue Game-1 and Game-2 are