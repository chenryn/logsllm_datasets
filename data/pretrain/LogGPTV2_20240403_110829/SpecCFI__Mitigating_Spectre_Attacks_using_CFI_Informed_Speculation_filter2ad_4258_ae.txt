### Attack under Coarse-Grained and Fine-Grained CFI

Table VI presents the number of available SMoTher Gadgets in several standard libraries under both coarse-grained and fine-grained Control Flow Integrity (CFI) implementations. The constraints for identifying SMother Gadgets, as defined by Bhattacharyya et al. [13], were used to scan for valid gadgets within the first 70 instructions following label instructions (endbr64 and cfi_lbl). For SPECCFI, a function signature-based approach was employed to generate labels [53], [54].

**Table VI: Available SMother Gadgets in Standard Libraries**

| **CFI Implementation** | **Coarse-grained** | **Fine-grained** |
|------------------------|--------------------|------------------|
| **Standard Libraries**  |                    |                  |
| glibc-2.29             | 314                | 1                |
| libssl-1.1             | 21                 | 1                |
| libcrypto-1.1          | 98                 | 4                |
| ld-2.29                | 64                 | 0                |
| libstdc++              | 47                 | 0                |

As shown, while fine-grained CFI still allows some gadgets, the number is significantly smaller compared to coarse-grained CFI.

It is important to note that we used SMoTher gadget constraints as an example of practical gadgets. There are no clear systematic approaches to locate generic Spectre gadgets that are exploitable in practice, and further analysis is required to identify more specific constraints. We plan to explore this question in our future work.

### Related Work

Since the initial announcement of Spectre and Meltdown in January 2018, several Spectre variants have emerged [27], [30], [42], [43], [45], [47]. Spectre attacks manipulate prediction mechanisms to trigger speculation to an attacker-chosen gadget. They exploit different components to trigger speculation, such as the branch direction predictor (variant 1, variant 1.1) [27], [42], [43], the branch target predictor (or branch target buffer) for variant 2 [43], the return stack buffer for Spectre-RSB (also called variant 5) [45], [47], or the load-store aliasing predictor for variant 4 [30]. Various software and hardware defenses have been proposed to mitigate these attacks, ranging from programming guidelines for cryptographic software developers [18] to architectural changes [40], [77].

In this section, we will categorize these defenses based on the Spectre attack variants they defend against. Table VII summarizes the Spectre attack defenses and the attacks they mitigate, while Table VIII outlines the overheads of these defenses in terms of hardware complexity, software modifications, and performance. SPECCFI is the only defense that provides complete protection against all Spectre attacks with minimal impact on performance and implementation overhead. Note that we do not consider Meltdown-style attacks [46], [50], [61], [62], [70], [73] because they rely on speculation within a single instruction and do not involve manipulating branch prediction structures.

#### A. Spectre-PHT Defenses

Spectre-PHT exploits the directional predictor (Pattern History Table or PHT) to perform the attack. Intel, AMD, and ARM proposed using instructions that serialize execution (e.g., lfence) to stop speculation around conditional branches [6], [9], [34]. Although aggressive serialization can mitigate Spectre-PHT, it significantly degrades performance [34]. Multiple proposals have attempted to reduce the number of serialization points using static analysis to identify and serialize only exploitable gadgets [33], [34], [49], [74]. However, these approaches may miss some exploitable gadgets and do not prevent speculative code fetches and other micro-architectural behaviors before execution, which can also leak data [64].

Speculative Load Hardening (SLH) [19] and You Shall Not Bypass (YSNB) [55] aim to reduce the high overhead by injecting artificial dependencies between branches and identified gadgets. While this results in performance advantages over liberal fencing, they still have a 36%-60% performance overhead [67]. Context-Sensitive Fencing (CSF) [67] is a micro-code mitigation technique that adds serialization instructions dynamically based on run-time conditions. CSF primarily focuses on Spectre-PHT but proposes to defend against Spectre-BTB and Spectre-RSB using a special fence that flushes the BTB/RSB when transferring control to higher domains. However, flushing the BTB/RSB hurts performance due to mis-predictions and is insufficient in SMT processors where structures can be polluted by other threads.

#### B. Spectre-BTB and Spectre-RSB Defenses

Spectre-BTB exploits the Branch Target Buffer (BTB), and Spectre-RSB exploits the Return Stack Buffer (RSB). Google proposed Return Trampoline (retpoline) [69] as a software mitigation technique that defends against Spectre-BTB by replacing indirect branches with push+return instruction sequences. However, retpoline has high performance overhead and can be bypassed using ret instructions, which cause mis-speculation through the BTB in some processors (e.g., Intel's core i7 processors starting from Skylake). RSB stuffing [35] was proposed to fill the RSB with benign delay gadget addresses to avoid mis-speculation on context switches. This technique partially mitigates Spectre-BTB and can defend against Spectre-RSB cross-domain attacks but incurs performance loss due to losing speculation information on context switches. In contrast, SPECCFI saves committed RSB entries per process during context switches and restores them, improving the prediction performance of ret instructions.

Intel and AMD added new instructions to their Instruction Set Architecture (ISA) to control indirect branches and defend against Spectre-BTB [6], [36]. These include Indirect Branch Restricted Speculation (IBRS), Single Thread Indirect Branch Prediction (STIBP), and the Indirect Branch Predictor Barrier (IBPB). These ISA instructions only defend against Spectre-BTB and have a high performance overhead, up to 24% on Skylake and up to 53% on Haswell [23].

#### C. Spectre All Variants Defenses

Several mitigations have been proposed to defend against all Spectre variants. Dynamically Allocated Way Guard (DAWG) [25], [41] partitions the cache at the cache way granularity to provide isolation between protection domains. While DAWG prevents data leakage through a cache side-channel, it requires domain enforcement management in software, defends only against cache-based leakage, and cannot protect against attacks within the same address space or isolation domain.

SafeSpec [40] and InvisiSpec [77] are hardware mitigation techniques that add shadow micro-architectural structures for caches and Translation Lookaside Buffers (TLBs) to store transient effects of speculative instructions. These effects are committed to caches and TLBs only if speculation is correct; otherwise, they are flushed. Although these solutions outperform software solutions, they require significant changes to the processor/memory architecture and consistency models.

ConTExT [63] introduces a new memory mapping (non-transient mapping) to track data that must not be accessed by speculative instructions. This solution requires architectural and operating system changes, developer involvement to annotate secret data, and incurs high performance overhead for security-critical applications.

### Concluding Remarks

In this paper, we presented a new defense, SPECCFI, that protects speculative processors against misspeculation targeting the Branch Target Buffer (BTB) and the Return Stack Buffer (RSB).