– Otherwise, C checks whether (m, β, s) ∈ H List
1. If no such tuple exists,
C outputs ⊥. Otherwise, C checks whether (S, (M(cid:48), ρ(cid:48)), δ, β(cid:48), ⊥, ⊥, 1, ⊥) ∈ RKList, where
S |= (M∗, ρ∗). If no, C chooses β(cid:48), δ ∈R {0, 1}k, generates rk4 = C(M(cid:48),ρ(cid:48)) (to hide δ and
β(cid:48)) as in the real scheme, and constructs A4 = (e(ga, gaq ) · e(g, gα(cid:48)
))s·ξ2, where ξ2 = H5(δ).
Finally, C returns CR
(M(cid:48),ρ(cid:48)) = (S, (M, ρ), A1, A3, (B1, C1), ..., (Bl, Cl), D, A4, rk4) to A,
and adds (S, (M(cid:48), ρ(cid:48)), δ, β(cid:48), ⊥, ⊥, 1, ⊥), (S, (M(cid:48), ρ(cid:48)), CR
(M(cid:48),ρ(cid:48)), 0, 0, 1) to RKList, REList,
respectively.
(d) Original ciphertext decryption oracle Od2(S, C(M,ρ)): C veriﬁes whether Eq. (1) holds. If not
(i.e. indicating either the ciphertext is invalid or S (cid:50) (M, ρ)), C outputs ⊥. Otherwise, C
proceeds.
– If (S, skS) ∈ SKList (for any S |= (M, ρ)), C recovers m as in the real scheme using skS.
– Otherwise, C checks whether (m, β, s) ∈ H List
such that A3 = gs
1,
A1 = (m||β) ⊕ δ1 and R = e(g, g)α·s. C outputs ⊥ if no such tuples exist, and outputs m
otherwise.
(M(cid:48),ρ(cid:48))): C ﬁrst checks whether there are
1. If not, C outputs
such that A(cid:48)
tuples (δ, β(cid:48), s(cid:48)) and (m, β, s) in H List
2 = gs(cid:48)
⊥. Otherwise, C veriﬁes whether Eq. (2) holds. If not (i.e. indicating either rk4 is invalid or
S(cid:48) (cid:50) (M(cid:48), ρ(cid:48))), C outputs ⊥. Otherwise, C proceeds.
– If (S, (M(cid:48), ρ(cid:48)), δ, β(cid:48), rkS→(M(cid:48),ρ(cid:48)), 1, 0, 1) ∈ RKList∨ (S, (M(cid:48), ρ(cid:48)), CR
(M(cid:48),ρ(cid:48)), 0, 1, 0) ∈ REList,
(e) Re-encrypted ciphertext decryption oracle Od1(S(cid:48), CR
and (R, δ1) ∈ H List
and A3 = gs
1
2
1
C checks
(e(C(cid:48)−1
i
, H3(ρ(cid:48)(i))w(cid:48)
i)),
(3)
2, ga) ·(cid:89)
i∈I(cid:48)
e(
i
(cid:48)w(cid:48)
B
i
, g) ?= e(A(cid:48)
(cid:89)
p}i∈I(cid:48) such that(cid:80)
i∈I(cid:48)
i · λ(cid:48)
i∈I(cid:48) w(cid:48)
i ∈ Z∗
where with knowledge of M(cid:48) and I(cid:48) (I(cid:48) ⊂ {1, ..., l(cid:48)} and I(cid:48) = {i : ρ(cid:48)(i) ∈ S(cid:48)}), C can ﬁnd a
vector w(cid:48) = {w(cid:48)
i = s(cid:48). If Eq. (3) does not hold, C outputs
⊥. Otherwise, C reconstructs A2 = gs with knowledge of s and then veriﬁes Eq. (1). If
the equation does not hold, C outputs ⊥. Otherwise, C recovers the random re-encryption
key rkS→(M(cid:48),ρ(cid:48)) = (S, rk1, rk2, rk3, rk4, Rx) from RKList, and checks the validity of A4 as
A4
i∈I (e(Bi,rk3)·e(Ci,Rρ(i)))wi ) , where I and wi are deﬁned in ReEnc on page 5. If the
above equation does not hold, C outputs ⊥. Otherwise, C checks whether (R, δ1) ∈ H List
such that A1 = (m||β) ⊕ δ1 and R = e(g, g)α·s. If no such tuple exists, C outputs ⊥.
Otherwise, C returns m to A. Note that C can tell the derivatives of the challenge ciphertext
via the above manner.
e(A2,rk1)/e(A3,rk2)
((cid:81)
?=
2
– Otherwise,
19
i. If (S(cid:48), skS(cid:48)) ∈ SKList, C recovers m as in the real scheme using skS(cid:48).
ii. Otherwise, C checks whether Eq. (2) and Eq. (3) hold. If not, C outputs ⊥. Otherwise,
C checks whether (R, δ1) ∈ H List
such that A1 = (m||β) ⊕ δ1, R = e(g, g)α·s, and
veriﬁes whether A4 = e(g, g)α·s·ξ2 and D = H4(A1, A3, (B1, C1), ..., (Bl, Cl), (M, ρ))s
hold, where ξ2 = H5(δ). If no such tuple exists and the equations do not hold, C outputs
⊥. Otherwise, C returns m to A.
2
4. Challenge. A outputs m0, m1 to C. C chooses b ∈R {0, 1} and responds as follows.
δ2,x∗). Like [26] (the challenger is able to choose the secret splitting), choose y(cid:48)
share the seccret using the vector v = (s, s · a + y(cid:48)
r(cid:48)
1, ..., r(cid:48)
Set
B∗
i = δ
(a) For each row i of M∗, set x∗ = ρ∗(i), and issue an H3 query on x∗ to obtain the tuple (x∗, zx∗,
n∗ and
p . Choose
p, for all i ∈ {1, ..., l∗}, denote Ri as the set of all i (cid:54)= k such that ρ∗(i) = ρ∗(k).
(cid:89)
2, s · a2 + y(cid:48)
(cid:89)
(cid:89)
3, ..., s · an−1 + y(cid:48)
j ) · gbi·s·(−zx∗ ) · (
(gaj·s·(bi/bk))M∗
n∗) ∈ Zn∗
l∗ ∈R Z∗
k,j )−1, C∗
2, ..., y(cid:48)
i = gr(cid:48)
i+s·bi.
ga·M∗
−r(cid:48)
2,x∗ · (
i,j·y(cid:48)
i
j=2,...,n∗
k∈Ri
j=1,...,n∗
1 ∈R {0, 1}2k, implicitly deﬁne H2(T · e(gs, gα(cid:48)
1, A∗
1, C∗
1, δ∗
(M∗,ρ∗) = ((M∗, ρ∗), A∗
1 ), ..., (B∗
3), and deﬁne D∗ = (gs)ξ∗
1 .
3, (B∗
2, A∗
l∗, C∗
1, A∗
)) = A∗
1, C∗
1 ), ..., (B∗
l∗), (M∗, ρ∗)) to obtain the tuple (A∗
1 ⊕ (mb||β∗), and
1, A∗
3,
l∗), D∗) to
i+s·bi,
l∗, C∗
(M∗,ρ∗) is a valid ciphertext. Implicitly letting H1(mb, β∗) = s and ri = r(cid:48)
2 = gs, A∗
1 ), ..., (B∗
set A∗
(B∗
1, C∗
A.
(b) Choose β∗ ∈R {0, 1}k, A∗
3 = (gs)γ.
(c) Issue an H4 query on (A∗
3, (B∗
l∗), (M∗, ρ∗), ξ∗
l∗, C∗
(d) Output the challenge ciphertext C∗
If T = e(g, g)aq+1·s, C∗
one can verify that
A∗
1 = A∗
(cid:89)
2 = gs, A∗
A∗
−r(cid:48)
B∗
(cid:89)
i = δ
2,x∗(
1 ⊕ (mb||β∗) ⊕ (mb||β∗) = H2(T · e(gs, gα(cid:48)
(cid:89)
(cid:89)
(cid:89)
(cid:89)
1, D∗ = (gs)ξ∗
(cid:89)
3 = (gs)γ = (gγ)s = gs
k∈Ri
gaj·s·M∗
j )(gbi·s)−zx∗ (
j=1,...,n∗
i,j )−1(gbi·s)−zx∗ (
1 = (gξ∗
gaj·s·M∗
(ga)M∗
(ga)M∗
(cid:89)
(cid:89)
−r(cid:48)
2,x∗(
j=1,...,n∗
j=2,...,n∗
j=2,...,n∗
i,j·y(cid:48)
i,j·y(cid:48)
−r(cid:48)
2,x∗gaλi(
i,j )(
= δ
= δ
j )(
i
i
i
j=1,...,n∗
(cid:89)
= gaλigzx∗·(−r(cid:48)
j=1,...,n∗
i)gbi·s·(−zx∗ )(
k∈Ri
i,2/bi+···+an∗·M∗
i,1/bi+a2·M∗
j=1,...,n∗
ga·M∗
(cid:89)
· (
(cid:89)
i∈X
(gaj·s·(bi/bk))M∗
k,j )−1
1, A∗
1 )s = H4(A∗
(gaj·s·(bi/bk))M∗
)) ⊕ (mb||β∗) = H2(e(g, g)α·s) ⊕ (mb||β∗),
l∗, C∗
1 ), ..., (B∗
(cid:89)
(cid:89)
3, (B∗
k,j )−1
1, C∗
i,j )−1(gbi·s)−zx∗ (
gaj·s·M∗
k∈Ri
j=1,...,n∗
(gaj·s·(bi/bk))M∗
k,j )−1
l∗), (M∗, ρ∗))s,
(gaj·s·(bi/bk))M∗
k,j )−1
i,n∗ /bi)−r(cid:48)
i(