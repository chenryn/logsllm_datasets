![](img/02_b.jpg)
从前面的列表中值得强调的一些亮点如下:
*   **可扩展性** : GKE 每个集群最多支持 5000 个节点，而 AKS 和 EKS 只支持几百个节点甚至更少。
*   **高级安全选项** : GKE 支持 Istio 服务网格、沙盒、二进制授权和入口管理**安全套接字层** ( **SSL** )，而 AKS 和 EKS 则不能。
如果计划在云提供商提供的 Kubernetes 集群中部署和管理微服务，则需要考虑云提供商提供的可扩展性能力和安全选项。如果使用由云提供商管理的集群，会有某些限制:
*   默认情况下，一些集群配置和加固由云提供商完成，可能不会更改。
*   您将失去管理 Kubernetes 集群的灵活性。例如，如果您想要启用 Kubernetes 的审核策略并将审核日志导出到`splunk`，您可能想要对`kube-apiserver`清单进行一些配置更改。
*   对运行`kube-apiserver`的主节点的访问是有限的。如果您专注于部署和管理微服务，这种限制完全有意义。在某些情况下，您需要启用一些准入控制器，然后您还必须对`kube-apiserver`清单进行更改。这些操作需要访问主节点。
如果您想要一个可以访问集群节点的 Kubernetes 集群，一个开源工具—`kops`—可以帮助您。
## 科普斯
**Kubernetes Operations**(**kops**)从命令行帮助创建、销毁、升级和维护生产级高可用性 Kubernetes 集群。官方支持 AWS，测试版支持 GCE 和 OpenStack。与在云 Kubernetes 服务上配置 Kubernetes 集群的主要区别在于，配置从虚拟机层开始。这意味着通过`kops`您可以控制您想要使用的操作系统映像，并设置您自己的管理 SSH 密钥来访问主节点和工作节点。在 AWS 中创建 Kubernetes 集群的示例如下:
```
  # Create a cluster in AWS that has HA masters. This cluster
  # will be setup with an internal networking in a private VPC.
  # A bastion instance will be setup to provide instance access.
  export NODE_SIZE=${NODE_SIZE:-m4.large}
  export MASTER_SIZE=${MASTER_SIZE:-m4.large}
  export ZONES=${ZONES:-'us-east-1d,us-east-1b,us-east-1c'}
  export KOPS_STATE_STORE='s3://my-state-store'
  kops create cluster k8s-clusters.example.com \
  --node-count 3 \
  --zones $ZONES \
  --node-size $NODE_SIZE \
  --master-size $MASTER_SIZE \
  --master-zones $ZONES \
  --networking weave \
  --topology private \
  --bastion='true' \
  --yes
```
在`kops`命令之前的中，创建了一个三个工作节点的 Kubernetes 集群。用户可以选择主节点和 CNI 插件的大小。
## 为什么要担心 Kubernetes 的安全？
Kubernetes 在 2018 年普遍可用，并且仍在快速发展。还有一些功能还在开发中，不在 GA 状态(不是 alpha 就是 beta)。这表明 Kubernetes 本身还远未成熟，至少从安全角度来看。但这不是我们需要关注 Kubernetes 安全性的主要原因。
Bruce Schneier 在 1999 年对这一点的总结是最好的，当时他在一篇名为《T2》的文章中说“*复杂性是安全的最大敌人*”，正确地预测了我们今天遇到的网络安全问题([https://www . Schneier . com/esses/archives/1999/11/A _ 辩白 _for_simplicit.html](https://www.schneier.com/essays/archives/1999/11/a_plea_for_simplicit.html) )。为了满足稳定性、可伸缩性、灵活性和安全性的所有主要编排需求，Kubernetes 以一种复杂但有凝聚力的方式进行了设计。这种复杂性无疑带来了一些安全问题。
可配置性是 Kubernetes 平台给开发人员带来的最大好处之一。开发人员和云提供商可以自由配置他们的集群以满足他们的需求。Kubernetes 的这一特性是企业日益关注安全性的主要原因之一。不断增长的 Kubernetes 代码和 Kubernetes 集群的组件使得 DevOps 理解正确的配置变得很有挑战性。默认配置通常不安全(开放性确实给 DevOps 带来了尝试新功能的优势)。
随着 Kubernetes 使用量的增加，各种安全漏洞和缺陷已经见诸报端:
*   帕洛阿尔托网络公司的研究人员发现了 4 万个暴露在互联网上的 Docker 和 Kubernetes 容器。这是错误配置部署的结果。
*   攻击者利用特斯拉不安全的管理控制台运行一个加密采矿设备。
*   在 Kubernetes 版本中发现了权限提升漏洞，该漏洞允许巧尽心思构建的请求通过 API 服务器建立到后端的连接并发送任意请求。
*   在生产环境中使用 Kubernetes 元数据测试版功能导致了对流行的电子商务平台 Shopify 的服务器端请求伪造攻击。该漏洞暴露了 Kubernetes 元数据，该元数据揭示了谷歌服务帐户令牌和`kube-env`细节，这使得攻击者能够危害集群。
新栈(https://nenewstack . io/top-challenges-kubernetes-user-face-deployment/)最近进行的一项调查显示，安全是运行 Kubernetes 的企业最关心的问题:
![Figure 1.3 – Top concerns for Kubernetes users ](img/B15566_01_03.jpg)
图 1.3–Kubernetes 用户最关心的问题
默认情况下，Kubernetes 不安全。我们将在后面的章节中对此进行更多解释。安全性成为用户最关心的问题之一完全有道理。这是一个需要正确解决的问题，就像其他基础设施或平台一样。
# 总结
微服务的趋势和 Docker 的崛起使 Kubernetes 成为 DevOps 部署、扩展和管理容器化应用的事实平台。Kubernetes 将存储和计算资源抽象为 Kubernetes 对象，由`kube-apiserver`、`kubelet`、`etcd`等组件管理。
Kubernetes 可以在私有数据中心创建，也可以在云或混合平台上创建。这使得 DevOps 可以与多个云提供商合作，而不会被其中任何一家所限制。虽然截至 2018 年，Kubernetes 还在 GA，但它仍然很年轻，发展非常快。随着 Kubernetes 受到越来越多的关注，针对 Kubernetes 的攻击也变得更加引人注目。
在下一章中，我们将介绍 Kubernetes 网络模型，并了解微服务如何在 Kubernete s 中相互通信。
# 问题
1.  单体建筑的主要问题是什么？
2.  Kubernetes 的主组件是什么？
3.  什么是部署？
4.  Kubernetes 有哪些变体？
5.  我们为什么关心 Kubernetes 的安全？
# 进一步阅读
以下链接包含关于 Kubernetes、`kops`和 OpenShift 平台的更多详细信息。开始构建 Kubernetes 集群时，您会发现它们非常有用:
*   [https://kubernetes.io/docs/concepts/](https://kubernetes.io/docs/concepts/)
*   [https://kubernetes.io/docs/tutorials/](https://kubernetes.io/docs/tutorials/)
*   [https://github . com/kubrines/kops](https://github.com/kubernetes/kops)
*   [https://docs.openshift.com/container-platform/4.2](https://docs.openshift.com/container-platform/4.2)
*   [https://cloud . Google . com/kubernetes-engine/docs/concepts/kubernetes-engine-概述](https://cloud.google.com/kubernetes-engine/docs/concepts/kubernetes-engine-overview)