分区字段换成ctime，命名为t_yyyymm。  
```  
digoal=> create table rmt.t_201504 (like rmt.tbl_logout_log including all) inherits(rmt.tbl_logout_log);  
```  
创建触发器, 注意触发器函数的2个参数的变化：  
```  
digoal=> create trigger tg_tbl_logout_log_insert before insert on rmt.tbl_logout_log for each row execute procedure general_trg_insert('t','ctime');  
```  
插入测试数据：  
```  
digoal=> insert into rmt.tbl_logout_log values (1,'zhou','digoal',30,'PI:EMAIL',now());  
INSERT 0 0  
Time: 3.919 ms  
```  
查看数据。  
```  
digoal=> select tableoid::regclass,* from rmt.tbl_logout_log ;  
   tableoid   | userid | firstname | lastname | age |     email      |           ctime              
--------------+--------+-----------+----------+-----+----------------+----------------------------  
 rmt.t_201504 |      1 | zhou      | digoal   |  30 | PI:EMAIL | 2015-04-19 18:36:58.234009  
(1 row)  
```  
## 其他  
1\. 下面两个触发器函数中的变量: ( 类似C里面 main(int argc, char *argv[]) )  
```  
TG_NARGS   
Data type integer; the number of arguments given to the trigger procedure in the CREATE TRIGGER statement.  
TG_ARGV[]  
Data type array of text; the arguments from the CREATE TRIGGER statement.   
The index counts from 0. Invalid indexes (less than 0 or greater than or equal to tg_nargs) result in a null value.  
```  
2\. NEW在触发器中是一个TG_TABLE_NAME类型的变量. 所以在动态SQL中可以把它转成TG_TABLE_NAME的类型.   
    这样才能方便的取出它存储的单项值. 为后面拼装INSERT的动态SQL提供可能.  
    如下 :   
```  
    execute 'select quote_nullable(($_$'||NEW||'$_$::'||TG_TABLE_NAME||').'||v_attname||')' into v_values_tmp;  
```  
3\. 其他你可能需要了解但是本文未详细描述的如, 游标, plpgsql函数语法, 字符串封装函数, 触发器变量等 请参考如下URL.  
http://www.postgresql.org/docs/9.2/static/plpgsql-cursors.html  
http://www.postgresql.org/docs/9.2/static/plpgsql-statements.html#PLPGSQL-QUOTE-LITERAL-EXAMPLE  
http://www.postgresql.org/docs/9.2/static/functions-string.html  
http://www.postgresql.org/docs/9.2/static/plpgsql-trigger.html  
http://www.postgresql.org/docs/9.2/static/sql-createtrigger.html  
4\. 字符串封装, 特别提一下 :   
![pic](20120907_01_pic_001.jpg)  
拼装时, 如果是表名, 列名. 使用quote_ident封装(双引号封装), 如果是值, 可以使用quote_literal或者quote_nullable.  
## 小结  
1\. 权衡维护量和性能, 通用的触发器要用到动态SQL(增加15%左右CPU开销).   
    IF ELSIF写的触发器虽然没有动态SQL, 但是当条件命中在末端时, 上千个判断带来的CPU开销比动态SQL性能更烂.  
    通用触发器的性能比非通用触发器要查25倍。 所以还有很大的优化空间。  
2\. IF ELSIF也可有优化手段, 参考《PostgreSQL partition table's arithmetic tuning example》  
3\. 通用触发器简化了触发器的编写和维护工作, 但是也带来了巨大的性能损失, 当然还有很大的优化空间.  
## 参考  
trigger 在分区表方面的应用案例:  
1\. PostgreSQL Partition Table Example  
http://blog.163.com/digoal@126/blog/static/1638770402012325111528424/  
2\. PostgreSQL partition table's arithmetic tuning example  
http://blog.163.com/digoal@126/blog/static/1638770402011210114036419/  
3\. execute plan difference between Oracle and PostgreSQL's partition table  
http://blog.163.com/digoal@126/blog/static/163877040201212432441676/  
4\. Compare Oracle's & PostgreSQL's Partition Table write performance  
http://blog.163.com/digoal@126/blog/static/163877040201123084853271/  
5\. Partition Table monitor on PostgreSQL  
http://blog.163.com/digoal@126/blog/static/163877040201082964624615/  
6\. how many performance decreased use dynamic SQL  
http://blog.163.com/digoal@126/blog/static/1638770402011109103953350/  
trigger 在其他方面的应用案例:  
1\. implement PostgreSQL table have one and only one row  
http://blog.163.com/digoal@126/blog/static/163877040201251931517556/  
2\. table level replication use trigger -- one(rw) to many(ro|rw)  
http://blog.163.com/digoal@126/blog/static/1638770402012731203716/  
3\. table level replication use trigger -- multi master replication & performance tuning  
http://blog.163.com/digoal@126/blog/static/1638770402012731944439/  
4\. USE hstore store table's trace record  
http://blog.163.com/digoal@126/blog/static/163877040201252575529358/  
5\. Use timetravel function trace tuple's DML.   
http://blog.163.com/digoal@126/blog/static/16387704020120133019990/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")