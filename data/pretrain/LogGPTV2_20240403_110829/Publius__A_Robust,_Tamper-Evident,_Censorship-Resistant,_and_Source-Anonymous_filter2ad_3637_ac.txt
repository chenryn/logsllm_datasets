share, in a ﬁle called password. The reason this value
is stored as opposed to just the PW or H(PW), is
that it prevents a malicious server from learning the
password and deleting the associated Publius content
from all other servers that are hosting it.
We implemented delete as a CGI script running on
each server. To delete Publius content, Alice sends
H(server domain name·P W ) to each hosting server,
along with the namei that corresponds to the that
server. The server compares the password received
to the one stored, and if they match, removes the
directory matching the namei, and all of the ﬁles in
it.
3.5 Update
Our system provides a mechanism for Alice to up-
date something that she previously published. We use
the same password mechanism that is used to delete
content. Thus, Alice can change any web page that
she published, but nobody else can. The idea is to
enable Alice to change content without changing the
URL, because others may have linked to the original
site. After the update, anyone retrieving the original
URL receives the new content.
In addition to ﬁle, share, and password, there is a
ﬁle called update on the servers in the namei direc-
tory. Initially, if Alice has not updated the content,
the ﬁle does not exist. When Bob retrieves the URL,
if the update ﬁle is missing, everything proceeds as
described in Section 3.3.
To update the content, Alice speciﬁes a ﬁle name
containing the new content, the original URL, the
original password P W and a new password. The up-
date program ﬁrst publishes the new content by sim-
ply calling publish with the ﬁle name and the new
password. Once the new content is published, the
original URL is used to ﬁnd the n servers that host
the Publius content. Each of these servers receives a
message from Alice (a call to a CGI script) contain-
ing the original password stored on that server (recall
that this is H(server · P W )), the old namei, and the
new URL. Each server then places the new URL in
the update ﬁle and deletes the contents in the old ﬁle.
When Bob retrieves Publius content, if the update
ﬁle exists, the servers return the update URL instead
of the contents. Bob receives the update URL from k
servers and compares them, if they are all equal, he
then retrieves the new URL instead. Of course, Bob
is not aware of what the retrieve program is doing
behind the scenes. From his point of view, he makes
Procedure Retrieve (PubliusURL U )
// k is the number of shares needed to reconstruct Key K
// n is the number of name[i] values stored in the PubliusURL U
// URL U = name[1] . . . name[n]
S={set of all unique k-subsets of the elements (1..n)}
for each element s in S:
R=randomValue(k) // choose a random integer in range 1..k
for i = 1 to k:
v = ith element of set s
location=(name[v] MOD serverListSize)+1
serverIP Address=serverList[location]
share[i]=retrieve ﬁle “share” from server at serverIP Address
tamperCheckV alue[i]=name[v]
if (i==R) then
encryptedDocument=retrieve {M }k from server at serverIP Address
endif
endfor
K=reconstructKeyFromShares(share[1]. . . share[k])
M =Decrypt encryptedDocument using key K
tamperCheckP assed=TRUE
for i = 1 to k:
V =MD5(M · share[i])
V =XOR(top 64 bits(V ),bottom 64 bits(V ))
if (V (cid:54)= tamperCheckV alue[i]) then
tamperCheckP assed=FALSE
break
endif
endfor
if (tamperCheckP assed) then
return M
endif
endfor
return “Document cannot be retrieved”
End Retrieve
Figure 3: Retrieve Algorithm
a request and receives the web page. If the k URLs
do not match, Bob (his proxy) then tries the other
n − k servers until he either gets k that are the same,
or gives up. In Section 5 we discuss other ways this
could be implemented and several tradeoﬀs that arise.
4
Implementation issues
In this section we describe the software components
of Publius and how these components implement Pub-
lius functions.
4.1 Publius URLs
Although the update mechanism is very convenient
it leaves Publius content vulnerable to a redirection
attack. In this attack several malicious server admin-
istrators collaborate to insert an update ﬁle in order
to redirect requests for the Publius content. A mecha-
nism exists within Publius to prevent such an attack.
During the publicaton process the publisher has the
option of declaring a Publius URL as nonupdateable.
When a Publius client attempts to retrieve Publius
content from a nonupdateable URL all update URLs
are ignored. See Section 4.1 for more information
about nonupdateable URLs.
Each successfully published document is assigned a
Publius URL. A Publius URL has the following form
http : //!anon!/options encode(name1) . . . encode(namen)
where namei
is deﬁned as in Section 3.2 and the
encode function is the Base64 encoding function
(verb+http://www.ietf.org/rfc/rfc1521.txt+). The
Base64 encoding function generates an ASCII repre-
sentation of the namei value.
The options section of the Publius URL is made
up of 2 characters that deﬁne how the Publius client
software interprets the URL. This 16 bit options sec-
tion encodes three ﬁelds – the version number, the
number of shares needed to form a key, and ﬁnally
the update ﬂag. The version number allows us to add
new features to future versions of Publius while at the
same time retaining backward compatibility. It also
allows Publius clients to warn a user if a particular
URL was meant to be interpreted by a diﬀerent ver-
sion of the client software. The next ﬁeld identiﬁes
the number of shares needed to form the key K. The
last ﬁeld is the update ﬂag that determines whether
or not the update operation can be performed on the
Publius content represented by the URL. If the update
ﬂag is a 1 then the retrieval of updated content will
be performed in the manner described in Section 3.5.
However if the update ﬂag is 0 then the client will ig-
nore update URLs sent by Publius servers in response
to share and encrypted ﬁle requests. The update ﬂag’s
role in preventing certain types of attacks is described
in Section 5.
Many older browsers enforce the rule that a URL
can contain a maximum of 256 characters. The initial
“http://!anon!/” string is 14 characters long, leaving
242 characters for the 20 namei values. Base64 pro-
cesses data in 24 bit blocks, producing 4 ASCII char-
acters per 24 bit block. This results in 12 ASCII char-
acters per namei value. Twenty hashes produce 240
ASCII characters. Thus, older browsers restrict us to
20 diﬀerent publishing servers in our scheme. We use
the two remaining characters for the options section
described above.
Here is an example of a Publius URL:
http://!anon!/AH2LyMOBWJrDw=
GTEaS2GlNNE=NIBsZlvUQP4=sVfdKF7o/kl=
EfUTWGQU7LX=OCk7tkhWTUe=GzWiJyio75b=
QUiNhQWyUW2=fZAX/MJnq67=y4enf3cLK/0=
4.2 Server software
To participate as a Publius server, one only needs
to install a CGI script that we provide. All client
software communicates with the server by executing
an HTTP POST operation on the server’s CGI URL.
The requested operation (retrieve, update, publish or
delete), the ﬁle name, the password and any other re-
quired information is passed to the server in the body
of the POST request. We recommend limiting the
amount of disk space that can be used each time the
CGI script executes. Our CGI script is freely available
(see Section 7).
4.3 Client software
The client software consists of an HTTP proxy and
a set of publishing tools. An individual wishing only
to retrieve Publius content just requires the proxy.
The proxy transparently sends non Publius URLs to
the appropriate servers and passes the returned con-
tent back to the browser. Upon receiving a request
for a Publius URL the proxy ﬁrst retrieves the en-
crypted document and shares as described in Section
3.3 and then takes one of three actions.
If the de-
crypted document successfully veriﬁes, it is sent back
to the browser. If the proxy is unable to ﬁnd a doc-
ument that successfully veriﬁes an HTML based er-
ror message is returned to the browser.
If the re-
quested document is found to have been updated then
an HTTP redirect request is sent to the browser along
with the update URL.
4.4 Publishing mutually hyperlinked doc-
uments
Suppose Alice wants
to anonymously publish
HTML ﬁles A and B. Assume that ﬁle A contains a
hyperlink to ﬁle B. Alice would like the anonymously
published ﬁle A to retain its hyperlink to the anony-
mously published ﬁle B. To accomplish this, Alice ﬁrst
publishes ﬁle B. This action generates a Publius URL
for ﬁle B, Burl. Alice records Burl in the appropriate
location in ﬁle A. Now Alice publishes ﬁle A. Her task
is complete.
Alice now wishes to anonymously publish HTML
ﬁles C and D. File C has a hyperlink to ﬁle D and
ﬁle D has a hyperlink to ﬁle C. Alice now faces the
dilemma of having to decide which ﬁle to publish ﬁrst.
If Alice publishes ﬁle C ﬁrst then she can change D’s
hyperlink to C but she cannot change C’s hyperlink
to D because C has already been published. A similar
problem occurs if Alice ﬁrst publishes ﬁle D.
The problem for Alice is that the content of a ﬁle
is cryptographically tied to its Publius URL – chang-
ing the ﬁle in any way changes its Publius URL. This
coupled with the fact that ﬁle C and ﬁle D contain hy-
perlinks to each other generates a circular dependency
– each ﬁle’s Publius URL depends on the other’s Pub-
lius URL. What is needed to overcome this problem
is a way to break the dependency of the Publius URL
on the ﬁle’s content. This can be accomplished using
the Publius Update mechanism described in Section
3.5.
Using the update mechanism Alice can easily solve
the problem of mutually hyperlinked ﬁles. First Alice
publishes ﬁles C and D in any order. This generates
Publius URL Curl for ﬁle C and Publius URL Durl
for ﬁle D. Alice now edits ﬁle C and changes the ad-
dress of the D hyperlink to Durl. She does the same
for ﬁle D – she changes the address of the C hyper-
link to Curl. Now she performs the Publius Update
operation on Curl and the newly modiﬁed ﬁle C. The
same is done for Durl and the newly updated ﬁle D.
This generates Publius URL Curl2 for for ﬁle C and
Publius URL Durl2 for ﬁle D. The problem is solved.
Suppose Bob attempts to retrieve ﬁle C with Curl.
Bob’s proxy notices the ﬁle has been updated and re-
trieves the ﬁle from Curl2. Some time later, Bob clicks
on the D hyperlink. Bob’s proxy requests the docu-
ment at Durl and is redirected to Durl2 . The update
mechanism ensures that Bob reads the latest version
of each document.
4.5 Publishing a directory
Publius contains a directory publishing tool that
automatically publishes all ﬁles in a directory. In ad-
dition, if some ﬁle, f, contains a hyperlink to another
ﬁle, g, in that same directory, then f’s hyperlink to
g is rewritten to reﬂect g’s Publius URL. Mutually
hyperlinked HTML documents are also dealt with, as
described in the previous section.
The ﬁrst step in publishing a directory, D, is to
publish all of D’s non-HTML ﬁles and record, for later
use, each ﬁle’s corresponding Publius URL. All HTML
ﬁles in D are then scanned for hyperlinks to other
ﬁles within D. If a hyperlink, h, to a previously pub-
lished non-HTML ﬁle, f, is found then hyperlink h is
changed to the Publius URL of f. Information con-
cerning hyperlinks between HTML ﬁles in directory
D is recorded in a data structure called a dependency
graph. Dependency graph, G, is a directed graph con-
taining one node for each HTML ﬁle in D. A directed
edge (x,y) is added to G if the HTML ﬁle x must be
published before ﬁle y. In other words, the edge (x,y)
is added if ﬁle y contains a hyperlink to ﬁle x. If, in
addition, ﬁle x contains a hyperlink to ﬁle y the edge
(y,x) would be added to the graph causing the cre-
ation of a cycle. Cycles in the graph indicate that
we need to utilize the Publius Update trick that Alice
uses when publishing her mutually hyperlinked ﬁles C
and D (Section 4.4).
Once all the HTML ﬁles have been scanned the de-
pendency graph G is checked for cycles. All HTML
ﬁles involved in a cycle are published and their Publius
URLs recorded for later use. Any hyperlink, h, refer-
ring to a ﬁle, f, involved in a cycle, is replaced with f’s
Publius URL. All nodes in the cycle are removed from
G leaving G cycle-free. A topological sort is then per-
formed on G yielding R, the publishing order of the
remaining HTML ﬁles. The result of a topological
sort of a directed acyclic graph (DAG) is a linear or-
dering of the nodes of the DAG such that if there is a
directed edge from vertex i to vertex j then i appears
before j in the linear ordering [1]. The HTML ﬁles
are published according to order R. After each ﬁle, f,
is published, all hyperlinks pointing to f are modiﬁed
to reﬂect f’s Publius URL. Finally a Publius Update
operation is performed on all ﬁles that were part of a
cycle in G.
4.6 Publius content type
The ﬁle name extension of a particular ﬁle usually
determines the way in which a Web browser inter-
prets the ﬁle’s content. For example, a ﬁle that has a
name ending with the extension “.htm” usually con-
tains HTML. Similarly a ﬁle that has a name ending
with the extension “.jpg” usually contains a JPEG
image. The Publius URL does not retain the ﬁle ex-
tension of the ﬁle it represents. Therefore the Publius
URL gives no hint to the browser, or anyone else for
that matter, as to the type of ﬁle it points to. Indeed,
this is the desired behavior as we do not wish to give
the hosting server the slightest hint as to the type
of content being hosted. However, in order for the
browser to correctly interpret the byte stream sent to
it by the proxy, the proxy must properly identify the
type of data it is sending. Therefore before publish-
ing a ﬁle we prepend the ﬁrst three letters of the ﬁle’s
name extension to the ﬁle. We prepend the three let-
ter ﬁle extension rather than the actual MIME type
because MIME types are of variable length (An alter-
native implementation could store the actual MIME
type prepended with two characters that represented
the length of the MIME type string). The ﬁle is then
published as described in Section 3.2. When the proxy
is ready to send the requested ﬁle back to the browser
the three letter extension is removed from the ﬁle.
This three letter extension is used by the proxy to
determine an appropriate MIME type for the docu-
ment. The MIME type is sent in an HTTP “Content-
type” header. If the three letter extension is not help-
ful in determining the MIME type a default type of
“text/plain” is sent for text ﬁles. The default MIME
type for binary ﬁles is “octet/stream”.
4.7 User interface
The client side software includes command line
tools to perform the publish, delete and update oper-
ations described in section 3. The retrieve operation
is performed via the Web browser in conjunction with
the proxy. In addition, a Web browser based interface
to the tools has been developed. This browser based
interface allows someone to select the Publius opera-
tion (retrieve, update, publish or delete) and enter the
operation’s required parameters such as the URL and
password. Each Publius operation is bound to a spe-
cial !anon! URL that is recognized by the proxy. For
example the publish URL is !anon!PUBLISH. The op-
eration’s parameters are sent in the body of the HTTP
POST request to the corresponding !anon! URL. The