about a system or network that you have no previous knowledge about. 
In my experience, most clients opt for either black- or grey-box tests. Even when they
choose white box, it’s best to perform your own discovery within their operating IP
address ranges, because clients often have computer systems on their network that
they don’t know about. Discovering them and then finding a critical attack vector on a
previously unknown host is an easy win and a real value add-on to the engagement. Of
course, for legal purposes, this should be spelled out explicitly in the statement of
work (SOW). Going forward, we’re going to assume that your client has provided you
with a grey-box scope of predetermined IP address ranges, and your job is to discover
all the live hosts within them. A live host is just a system that is turned on. 
2.1.2
Capsulecorp 
Imagine that your new client, Capsulecorp, has hired you to conduct an internal net-
work pentest of one of its satellite offices. The office is small, with fewer than a dozen
employees, so the IP address range is a small class C range. A class C IP address range
contains a maximum of 254 useable IP addresses.
 Your contact tells you the range: 10.0.10.0/24. This range can contain up to 254
live hosts. However, you are tasked with discovering all the live targets within this
23
Understanding your engagement scope
range and testing them for exploitable weaknesses that could be used by an attacker
to gain unauthorized entry into restricted areas of the corporate network. 
 Your objective is to sweep this range, determine the number of live hosts, and cre-
ate a targets.txt file containing each live IP address, one line after another. Create the
following folder structure in your pentest VM. Begin at the top level with the name of
your client, and then place three folders in that directory:
 One for discovery
 One for documentation
 One for focused penetration
In the discovery directory, create a subdirectory for hosts and a subdirectory for ser-
vices. The documentation folder also has two subdirectories: one for logs and one for
screenshots. That’s good for now; you’ll create additional directories later, depending
on what you see during the pentest. Remember that if you are using the Capsulecorp
Pentest environment, the pentest VM can be accessed by running the command
vagrant ssh pentest.
NOTE
The directory names aren’t set in stone. The part I want to highlight is
organizing your notes, files, scripts, and logs in a methodical manner that fol-
lows along with the methodology you’re using to conduct your pentest. 
Next, place a file called ranges.txt in the discovery folder, just like the example in fig-
ure 2.3. This file should contain all the IP address ranges in your engagement scope,
each on its own line. Nmap can read this file as a command-line argument, which
comes in handy for running different types of Nmap commands. For the Capsulecorp
engagement, I’m going to place 10.0.10.0/24 in the discovery/ranges.txt directory
because that is the only range I have in my scope. On a typical INPT, your ranges.txt
Figure 2.3
Directory structure you create for this example
24
CHAPTER 2
Discovering network hosts
file will likely contain several different ranges. If you’re following along with the Cap-
sulecorp Pentest environment from GitHub, then you’ll want to use the IP range
172.28.128.0/24. 
2.1.3
Setting up the Capsulecorp Pentest environment
I have created a preconfigured virtual enterprise network using Vagrant, VirtualBox,
and Ansible that you can download from GitHub and set up on your own computer.
This virtual network can be used to help you work through the chapters and exercises
in this book. There is plenty of documentation on the GitHub page, so I won’t duplicate
that information here. If you don’t already have a network to test against, take some
time now and set up your own instance of the Capsulecorp Pentest network following
the instructions on the GitHub page: https://github.com/r3dy/capsulecorp-pentest.
Once that’s complete, come back and finish this chapter. 
2.2
Internet Control Message Protocol 
The simplest and probably most efficient way to discover network hosts is to use
Nmap to run a pingsweep scan. Before getting to that, though, let’s first discuss ping.
Without a doubt, one of the most commonly used tools in computer networking is
the ping command. If you are working with a system administrator to try to trouble-
shoot an issue with a particular system on their network, you’ll likely hear them ask
first and foremost, “Can you ping the host?” What they are really asking is, “Does the
host reply to ICMP request messages?” Figure 2.4 models the network behavior that
occurs when one host pings another. Pretty simple, right? PC1 sends an ICMP request
packet to PC2. 
DEFINITION
A pingsweep means you send a ping to every possible IP address
within a given range to determine which ones send you a reply and are there-
fore considered up or live.
PC2 then replies with its own ICMP packet. This behavior is analogous to modern sub-
marines sending sonar beacons that “echo” off an object and, when returned to the
submarine, provide information about that object’s location, size, shape, and so on. 
Why use several small ranges instead of a single large one?
Network engineers working for large companies have to manage many thousands of
systems and therefore try their best to keep things organized. This is why they tend
to use lots of different ranges: one for the database servers, one for the web servers,
one for the workstations, and so on. A good pentester can correlate discovery infor-
mation such as hostnames, operating systems, and listening services with different
IP address ranges and start to develop a mental picture of what the network engi-
neers may have been thinking when they logically separated the network.
25
Internet Control Message Protocol
2.2.1
Using the ping command
Your pentest VM is already equipped with the ping command, which you can execute
from a bash prompt. If you want to test the ping command, you can run it against
yourself or, rather, against the local loopback IP address of your pentest system. Type
ping 127.0.0.1 -c 1 at the command prompt in the terminal. You can expect to see
the following output:
~$ ping 127.0.0.1 -c 1   
PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.024 ms
--- 127.0.0.1 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 0.024/0.024/0.024/0.000 ms
Notice the use of the -c 1 parameter, which tells the command to issue only a single
ICMP echo request. By default, if you omit this parameter, the ping command will
continuously send requests one after another until the end of time, as opposed to the
Microsoft Windows version, which defaults to sending four requests. This output tells
you that the target host you just pinged is live or “up.” This is to be expected because
you pinged a live system that you’re using. The following is what you would expect to
see if you sent a ping to an IP address that was not in use (that was “down”):
~$ ping 126.0.0.1 -c 1
PING 126.0.0.1 (126.0.0.1) 56(84) bytes of data.
--- 126.0.0.1 ping statistics ---
1 packets transmitted, 0 received, 100% packet loss, time 0ms 
ICMP request message
ICMP reply message (ECHO)
Can you hear me?
PC2
PC1
Yes I can!
An ICMP ping
Figure 2.4
Typical ICMP packet exchange
-c 1 tells the ping command 
to send a single ping.
0 received 
because the 
host is not up
26
CHAPTER 2
Discovering network hosts
You’ll notice that this second command takes a little while to complete. This is
because your ping command is waiting for an echo reply from the target host, which
isn’t up and therefore won’t echo an ICMP message. 
 To illustrate the concept of using ping as a means to discover live hosts within a given
range, you can test it against the local area network (LAN) IP address of your pentest
VM. You can identify this network range by using the ifconfig command that is
included in the net-tools package you installed when you set up your VM. If ifconfig
errors out with “command not found,” you can install it with the command sudo apt
install net-tools from the terminal. Then run the following command to identify
your LAN subnet.
 ~$ ifconfig
ens33: flags=4163 mtu 1500
    inet 10.0.10.160
    netmask 255.255.255.0    
    inet6 fe80::3031:8db3:ebcd:1ddf prefixlen 64 scopeid 0x20
    ether 00:11:22:33:44:55 txqueuelen 1000 (Ethernet)
    RX packets 674547 bytes 293283564 (293.2 MB)
    RX errors 0 dropped 0 overruns 0 frame 0
    TX packets 199995 bytes 18480743 (18.4 MB)
    TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0
lo: flags=73 mtu 65536
    inet 127.0.0.1 netmask 255.0.0.0
    inet6 ::1 prefixlen 128 scopeid 0x10
    loop txqueuelen 1000 (Local Loopback)
    RX packets 126790 bytes 39581924 (39.5 MB)
    RX errors 0 dropped 0 overruns 0 frame 0
    TX packets 126790 bytes 39581924 (39.5 MB)
    TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0
From the output on my system, you can see that my VM has an IP address of
10.0.10.160. Based on the size of the subnet mask 255.255.255.0, I know that this IP
address belongs to a class C network, also referred to by most pentesters as a /24 range
(we pronounce it phonetically, so we say “slash 24”). This means there are a possible
254 live hosts within this range: 10.0.10.1, 10.0.10.2, 10.0.10.3, and so on, all the way
up to 10.0.10.254. As you can imagine, if you wanted to ping each of these 254 possi-
ble hosts, it would take a long time, especially since you’d have to wait several seconds
for each non-live IP to reach the timeout.
2.2.2
Using bash to pingsweep a network range
Even if you use the ping flag -W 1 to force the timeout to be only one second on non-
live hosts, it would still take an unnecessarily long time to successfully sweep an entire
network range. This is where the power of scripting with bash comes in handy. The
Listing 2.1
Using ifconfig to determine your IP address and subnet mask
IP address on the LAN
Subnet mask 
determining the 
number of possible 
IP addresses within 
the range
27
Internet Control Message Protocol
following is a little trick you can try on your LAN to use one line of bash to send 254
pings in just a couple of seconds. First I’ll show you the command, and then I’ll break
down the different pieces:
~$ for octet in {1..254}; do ping -c 1 10.0.10.$octet -W 1 >> 
➥ pingsweep.txt & done
For this command to work on your network, you’ll have to replace 10.0.10 with the
first three octets of your LAN. The command creates a bash for loop that is executed
254 times. Each time it executes, the numeric value of the variable $octet is incre-
mented. First it will be 1, then 2, and then 3; you get the idea.
 The first iteration looks like this: ping -c 1 10.0.10.1 -W 1 >> pingsweep.txt &. The
& in this command tells bash to background the job, which means you don’t have to wait
for it to complete before issuing the next command. The >> tells bash to append the out-
put of each command to a file named pingsweep.txt. Once the loop is finished, you can
cat the file with cat pingsweep.txt to see the output of all 254 commands. Because
you’re only interested in identifying live hosts, you can use the grep command to display
the information you want. Use the command cat pingsweep.txt | grep "bytes from:"
to limit the results of your cat command to only show lines that contain the string
"bytes from". This essentially means the IP address sends a reply. The output in the
next listing shows a total of 22 live hosts returned from the ping sweep.
64 bytes from 10.0.10.1: icmp_seq=1 ttl=64 time=1.69 ms
64 bytes from 10.0.10.27: icmp_seq=1 ttl=64 time=7.67 ms
64 bytes from 10.0.10.95: icmp_seq=1 ttl=64 time=3.87 ms
64 bytes from 10.0.10.88: icmp_seq=1 ttl=64 time=4.36 ms
64 bytes from 10.0.10.90: icmp_seq=1 ttl=64 time=5.33 ms
64 bytes from 10.0.10.151: icmp_seq=1 ttl=64 time=0.112 ms
64 bytes from 10.0.10.125: icmp_seq=1 ttl=64 time=25.8 ms
64 bytes from 10.0.10.138: icmp_seq=1 ttl=64 time=19.3 ms
64 bytes from 10.0.10.160: icmp_seq=1 ttl=64 time=0.017 ms
64 bytes from 10.0.10.206: icmp_seq=1 ttl=128 time=6.69 ms
64 bytes from 10.0.10.207: icmp_seq=1 ttl=128 time=5.78 ms
64 bytes from 10.0.10.188: icmp_seq=1 ttl=64 time=5.67 ms
64 bytes from 10.0.10.205: icmp_seq=1 ttl=128 time=4.91 ms
64 bytes from 10.0.10.204: icmp_seq=1 ttl=64 time=6.41 ms
64 bytes from 10.0.10.200: icmp_seq=1 ttl=128 time=4.91 ms
64 bytes from 10.0.10.201: icmp_seq=1 ttl=128 time=6.68 ms
64 bytes from 10.0.10.220: icmp_seq=1 ttl=64 time=10.1 ms
64 bytes from 10.0.10.225: icmp_seq=1 ttl=64 time=8.21 ms
64 bytes from 10.0.10.226: icmp_seq=1 ttl=64 time=178 ms
64 bytes from 10.0.10.239: icmp_seq=1 ttl=255 time=202 ms
64 bytes from 10.0.10.203: icmp_seq=1 ttl=128 time=281 ms
64 bytes from 10.0.10.202: icmp_seq=1 ttl=128 time=278 ms
Listing 2.2
Using grep to sort ping output for live hosts
28
CHAPTER 2
Discovering network hosts
NOTE
A handy trick is to pipe the previous command into the wc -l com-
mand, which will display the line count. In this example, the line count is 22,
which tells us how many live targets there are.
As you can see, there are 22 live hosts on my network. Or, more accurately, 22 hosts
are configured to send ICMP echo replies. If you want to include all of these hosts
from your pentest scope, you can use cut to extract the IP addresses from this output
and place them in a new file:
~$ cat pingsweep.txt |grep "bytes from" |cut -d " " -f4 |cut -d ":" -f1 > 
➥ targets.txt
This creates a file that we can then use with Nmap, Metasploit, or any other pentest
tool that takes in a list of IP addresses as a command-line argument:
~$ cat targets.txt 
10.0.10.1
10.0.10.27
10.0.10.95
10.0.10.88
10.0.10.90
10.0.10.151
10.0.10.125
10.0.10.138
10.0.10.160
10.0.10.206
10.0.10.207
10.0.10.188
10.0.10.205
10.0.10.204
10.0.10.200
10.0.10.201
10.0.10.220
10.0.10.225
10.0.10.226
10.0.10.239
10.0.10.203
10.0.10.202
2.2.3
Limitations of using the ping command
Although the ping command works just fine in the example scenario, there are a few
limitations to using ping as a reliable method of host discovery on an enterprise net-
work pentest. First, it isn’t particularly useful if you have multiple IP address ranges or
several small /24 ranges split between different segments of a larger /16 or /8. For
example, using the previous bash command would be difficult if you needed to sweep
only 10.0.10, 10.0.13, and 10.0.36. Sure, you could run three separate commands, cre-
ate three separate text files, and join them together, but this method would not scale if
you needed to sweep lots of ranges.
 The next issue with using ping is that its output is pretty noisy and contains a lot of
unnecessary information. Yes, it’s possible to use grep as in the previous example to
29
Discovering hosts with Nmap
surgically pick out the data you need, but then why store all that unnecessary informa-
tion in a giant text file? At the end of the day, grep plus cut can get you out of many
situations, but structured XML output that can be parsed and sorted using a scripting
language such as Ruby would be preferable, especially if you will be testing a large net-
work with thousands or even tens of thousands of hosts. For this reason, you would be
much better off using Nmap to perform host discovery.
 You’ve seen a rudimentary method of host discovery that works fine in limited situ-
ations. Now I’d like to offer you a much better way to perform host discovery, using
the ever-powerful Nmap. 
2.3
Discovering hosts with Nmap
The ICMP echo discovery probe is the most widely adopted method of internal net-
work host discovery used by pentesters (and probably actual attackers) today. I’m
going to introduce four Nmap command-line arguments or flags and explain what
they do and why you should include them in your discovery command. To execute an
ICMP sweep targeting all ranges within the ranges.txt file, issue this command from
within the top-level folder, which in my case is the capsulecorp folder:
sudo nmap -sn -iL discovery/ranges.txt -oA discovery/hosts/pingsweep -PE 
The output for the command is shown in listing 2.3. You should feel free to run this
command against your own network, as it won’t cause any harm. If you run the com-
mand on your company network, you’re not going to break anything. Still, your activ-
ity may be detected by your internal security operations center (SOC), so you might
want to give them a heads-up first. 
Starting nmap 7.70SVN ( https://nmap.org ) at 2019-04-30 10:53 CDT
nmap scan report for amplifi.lan (10.0.10.1)
Host is up (0.0022s latency).
nmap scan report for MAREMD06FEC82.lan (10.0.10.27)
Host is up (0.36s latency).
nmap scan report for VMB4000.lan (10.0.10.88)
Host is up (0.0031s latency).
nmap scan report for 10.0.10.90
Host is up (0.24s latency).
nmap scan report for 10.0.10.95
Host is up (0.0054s latency).
nmap scan report for AFi-P-HD-ACC754.lan (10.0.10.125)
Host is up (0.010s latency).
nmap scan report for AFi-P-HD-ACC222.lan (10.0.10.138)
Host is up (0.0097s latency).
nmap scan report for rdc01.lan (10.0.10.151)
Host is up (0.00024s latency).
nmap scan report for android-d36432b99ab905d2.lan (10.0.10.181)
Host is up (0.18s latency).
nmap scan report for bookstack.lan (10.0.10.188)
Listing 2.3
Nmap host discovery utilizing ICMP
30
CHAPTER 2
Discovering network hosts
Host is up (0.0019s latency).
nmap scan report for 10.0.10.200
Host is up (0.0033s latency).
nmap scan report for 10.0.10.201
Host is up (0.0033s latency).
nmap scan report for 10.0.10.202
Host is up (0.0033s latency).
nmap scan report for 10.0.10.203
Host is up (0.0024s latency).