### 4.2 Transition to Proactive Security

#### 4.2.1 Test Efficiency, Time, and Costs

Ultimately, the equation for manufacturers comes down to test efficiency, time, and costs. While direct costs are a factor, test efficiency—both in terms of results and process—is often more critical. The value of fuzzing is an interesting topic, but there are limited public metrics available to quantify these costs. It would be valuable to see how these metrics apply to various completed fuzzing projects.

As an example, we provide a cost analysis for deploying fuzzers for both the IKE (Table 4.2) and FTP (Table 4.3) protocols. The FTP protocol is relatively simple and text-based, whereas the IKE protocol is complex, requiring significantly more time to develop a fuzzer. The metrics used in these calculations were explained earlier in this section.

The estimates for the number of defects are based on our experience with contract development and real results from comparing the freely available PROTOS ISAKMP/IKE fuzzer with tests conducted using the commercial Codenomicon ISAKMP/IKE robustness test suite against the same ISAKMP implementation.

**Costs for Developing Fuzzers:**

- **Internal Development:** Generally, developing fuzzers within your own organization is less expensive than acquiring a contracted fuzzer. This is because the time required for your own employees, especially for small fuzzing projects, can be shorter than contract time. However, all additional expenses, such as employee benefits, must be considered. The main challenge with internally built tools is finding and retaining top security researchers, which can result in a lower defect count compared to contracted work or commercial tools. For our estimate, we have used a labor cost of $2,000 per week, although security researchers can cost between $1,800 and $4,000 per week.
- **Contracted Work:** Contract employees often cost more but generally work faster, especially on larger projects. They have more experience and higher expectations. Contract work can range from $3,000 to $10,000 per week or more. For our estimate, we have included the contract hours in the cost of the tools.
- **Other Investments:** Additional investments include materials such as standard PCs and necessary software, like debuggers, for test analysis. Calculations should also include the necessary office space for the test facility. For free open-source tools, this might be the only investment.

**Table 4.2: Example Cost Calculation for IKE Fuzzers**

| Criteria (IKE Fuzzer) | Internally Built | Contractor Developed | Open Source | Commercial Product |
|-----------------------|------------------|-----------------------|-------------|--------------------|
| Individual Flaws Found (Number) | 1 | 5 | 4 | 8 |
| Cost of Tools | $0 | $40,000 | $0 | $10,000 |
| Resources to Implement (Weeks) | 20 | 8 | 1 | 1 |
| Time to Implement (Weeks) | 20 | 8 | 2 | 1 |
| Resources to Test (Weeks) | 1 | 1 | 1 | 1 |
| Time to Test (Weeks) | 1 | 1 | 1 | 1 |
| Other Costs in Test Environment | $10,000 | $10,000 | $10,000 | $10,000 |
| Maintenance/Year | $50,000 | $10,000 | $50,000 | $10,000 |
| Total Time (Weeks) | 21 | 9 | 3 | 2 |
| Total Resources (Weeks) | 21 | 9 | 2 | 2 |
| Cost per Work-Week | $2,000 | $2,000 | $2,000 | $2,000 |
| Total Cost | $102,000 | $78,000 | $64,000 | $34,000 |
| Cost per Defect | $102,000 | $15,600 | $16,000 | $4,250 |

**Table 4.3: Example Cost Calculation for FTP Fuzzers**

| Criteria (FTP Fuzzer) | Internally Built | Contractor Developed | Open Source | Commercial Product |
|-----------------------|------------------|-----------------------|-------------|--------------------|
| Individual Flaws Found (Number) | 10 | 14 | 12 | 16 |
| Cost of Tools | $0 | $15,000 | $0 | $10,000 |
| Resources to Implement (Weeks) | 9 | 3 | 1 | 1 |
| Time to Implement (Weeks) | 9 | 3 | 1 | 1 |
| Resources to Test (Weeks) | 1 | 1 | 1 | 1 |
| Time to Test (Weeks) | 1 | 1 | 1 | 1 |
| Other Costs in Test Environment | $5,000 | $5,000 | $5,000 | $5,000 |
| Maintenance/Year | $20,000 | $5,000 | $10,000 | $10,000 |
| Total Time (Weeks) | 10 | 4 | 2 | 2 |
| Total Resources (Weeks) | 10 | 4 | 2 | 2 |
| Cost per Work-Week | $2,000 | $2,000 | $2,000 | $2,000 |
| Total Cost | $45,000 | $33,000 | $19,000 | $29,000 |
| Cost per Defect | $4,500 | $2,357 | $1,583 | $1,812 |

**Pros and Cons:**

- **Commercial Tools:** The main benefit of commercial tools is maintenance. Vendors ensure future development and updates for a fixed fee, which is easier to forecast and generally lower than dedicated or contracted personnel. Commercial tools are typically built according to real test automation requirements set by customers, making them easy to integrate with existing test execution frameworks.
- **Contracted Fuzzers:** A contracted fuzzer can also come with a fixed maintenance fee. The main advantage of contracted developers is their speed and experience, especially for large projects.
- **In-House Development:** In-house development offers complete control over the project and the ability to customize the fuzzer for specific products. However, it can be challenging to find and retain top security researchers.

**Test Automation:**

- **Purpose:** The primary goals of test automation are to reduce the time from test to fix, make testing repeatable, and minimize human error.
- **Integration:** Commercial tools are designed to integrate easily with existing test execution frameworks and monitoring tools. However, integration can vary, especially for proprietary embedded devices.

**Conclusion:**

The best option depends on the complexity of the tested interfaces, the software that needs testing, and the availability of in-house expertise. For specialized or proprietary protocols, a custom fuzzer may be the best solution, even if it is not the most cost-effective. When making a final decision, consider the users of the fuzzers and the ease of use. Most commercial tools are ready to use out of the box, while custom tools may require constant customization.

### 4.2.2 Cost of Remediation

In addition to the cost of discovery, it is essential to understand the cost of fixing each bug. A flaw found during the design phase is less costly than one found after the product has been launched. Various studies, including those from NIST, indicate that the cost of fixing a defect increases significantly as the product moves through its development lifecycle.

**Metrics for Repair Process:**

- **Resources Needed to Fix Problems:** After analyzing the failures, developers start fixing the flaws. Although fuzzing rarely produces false positives, a common issue is that a large number of issues can be caused by a single flaw.
- **Time Required to Fix Issues:** Adding more developers to the repair process does not necessarily reduce the total calendar days spent on repairing the found issues.

### 4.2.3 Cost of Security Compromises

Security is crucial for ensuring service availability and software reliability. Reliability is measured by uptime and downtime, and studies the reasons for outages. Downtime can be planned (e.g., regular maintenance) or unplanned (e.g., security incidents, hardware failures, natural disasters). Traditional metrics for IT operations can be applied to security-related availability analysis.

**Useful Metrics:**

- **Measured Uptime of Software, Host, or Service (Percent, Hours):** Provides the availability metric, such as "five nines" (99.999% uptime).
- **Planned Downtime (Percent, Time):** The total amount of time resources were out of service due to regular maintenance.
- **Unplanned Downtime (Percent, Hours):** The total amount of time related to unexpected service outages, representing the change control process variance.
- **Unplanned Downtime Due to Security Incidents (Percent, Hours):** A subset of unplanned downtime, indicating the result of security shortcomings.
- **Mean/Median of Unplanned Outage (Time):** Characterizes the seriousness of a security incident.

Understanding these metrics is crucial for proactive security and ensuring the reliability and availability of software and services.