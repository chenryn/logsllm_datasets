The structure of MD collisions. We now proceed to a simple
lemma about the structure of collisions in the MD transform. This
will be used for our proof that the MD transform preserves collision
resistance when the splitting function is suffix-free. This lemma
argues the correctness of an algorithm Bcr to formalize the obser-
vation that if M1, M2 form a collision for the MD transform with a
suffix-free splitting function, then by examining the computation
of the hash function on these inputs we can easily find a collision
for the underlying compression function.
Lemma 5.2. Let h be a compression function, let Split be a split-
ting function with Split.Bl = h.Bl and let S ⊆ h.Out be a set of
possible starting points. Let H = MD[h, Split, S] be the hash function
associated to these components via the MD transform of Fig. 2. Let
k ∈ h.Keys, s ∈ S. Suppose M1, M2 ∈ Split.Inp are a pair of dis-
tinct messages satisfying (1) Split(M1) (cid:65) Split(M2) and Split(M2) (cid:65)
Split(M1) and (2) M1, M2 are a collision for H(k,s). Then, on inputs
(k, s), M1, M2, algorithm Bcr of Fig. 5 returns (x1, c1),(x2, c2) that
form a collision for hk.
Proof. (of Lemma 5.2) From algorithm Bcr, let m1 = Split(M1),
m2 = Split(M2), n1 = |m1|, and n2 = |m2|. First Bcr computes the
vectors of chaining variables, c1 and c2 as shown in the pseudocode.
Assume (without loss of generality) that n1 ≥ n2, i.e. that |m1| ≥
|m2|. Since M1, M2 are a collision for H(k,s), we have H(k,s)(M1) =
H(k,s)(M2). Because m1 ̸⊒ m2 and m2 ̸⊒ m1, there must exist i ∈
{0, . . . , n2−1} such that (m1[n1−i], c1[n1−i]) (cid:44) (m2[n2−i], c2[n2−
i]). Let j represent the minimal such value. Then it will hold that
c1[n1 − j + 1] = c2[n2 − j + 1]. Thus, the pair (m1[n1 − j], c1[n1 − j]),
(m2[n2−j], c2[n2−j]), return by Bcr will form a collision for hk. □
Suffix-freeness preserves CR. Finally, we show a reduction from
the collision resistance of the hash function H = MD[h, Split, S] to
the collision resistance of the compression function h when using
a suffix-free splitting function Split.
Theorem 5.3. Let h be a compression function, let Split be a suffix-
free splitting function with Split.Bl = h.Bl and let S ⊆ h.Out be a
set of possible starting points. Let H = MD[h, Split, S] be the hash
function associated to these components via the MD transform of
Fig. 2. Given an adversary AH, let Ah be the adversary of Fig. 5 using
Bcr.
Then
H(AH) ≤ Advcr
h (Ah).
Advcr
(1)
The time complexity of Ah is the sum of the time complexities of
AH and Bcr. The memory complexity of Ah is the maximum of the
memory complexity of AH and the memory complexity of Bcr.
In Section 9, we revisit this and other reductions to give alterna-
tive reductions that are more memory-efficient [4].
Proof. (of Theorem 5.3) It is clear that the time and memory
complexity of adversary Ah are as stated in the theorem.
Let k ∈ h.Keys, s ∈ S be the values sampled when Ah is executed
and M1, M2 ∈ Split.Inp be the values returned by AH. Suppose they
form a collision for H(k,s).
Then we have Split(M1) (cid:65) Split(M2) and Split(M2) (cid:65) Split(M1)
because Split is suffix-free, so they fulfill the conditions of Lemma 5.2
and is Bcr guaranteed to return a collision for hk. As an immediate
result Equation (1) holds, completing the proof.
□
Necessity. We can now complete the picture for splitting functions
when assuming the compression function is collision resistant by
showing that the suffix-free restriction is precisely the correct re-
striction on the splitting function. In particular, we will establish
Session D4:  Crypto PrimitivesCCS’17, October 30-November 3, 2017, Dallas, TX, USA895Adversary Ah(k, ε)
s ←$ S ; (M1, M2) ← AH((k, s), ε)
Return Bcr((k, s), M1, M2)
Algorithm Bcr((k, s), M1, M2)
m1 ← Split(M1) ; m2 ← Split(M2) ; n1 ← |m1| ; n2 ← |m2|
c1[1] ← s ; c2[1] ← s
For i = 1, . . . , n1 do c1[i + 1] ← hk((m1[i], c1[i]))
For i = 1, . . . , n2 do c2[i + 1] ← hk((m2[i], c2[i]))
n ← min(n1, n2)
For i = 0, . . . , n − 1 do
(x1, c1) ← (m1[n1 − i], c1[n1 − i])
(x2, c2) ← (m2[n2 − i], c2[n2 − i])
If (x1, c1) (cid:44) (x2, c2) then return ((x1, c1), (x2, c2))
Return ⊥
Figure 5: Adversary Ah for the proof of Theorem 5.3 and al-
gorithm Bcr for Lemma 5.2.
that Split being suffix-free is a necessary condition for proving that
MD[h, Split, S] is secure under the assumption that h is collision
resistant, in addition to a sufficient one.
Given an arbitrary splitting function Split and a pair of inputs
M1, M2 such that Split(M1) ⊒ Split(M2), we construct a compres-
sion function h which is collision resistant (from another function
which we assume to be collision resistant), but for which the pair
M1, M2 is a collision for MD[h, Split, S] (with high probability over
the choice of s ∈ S in the case that S = h.Out).
For simplicity, we will first consider the simpler case when S
consists of a single, fixed value s on which our choice of compression
function can depend. For this case, we can directly construct the
compression function so that when chained with the starting value
s on the blocks contained uniquely in Split(M1) but not those in
Split(M2), it "loops" back to s. We then extend this technique to
cover the case when S is some larger set from which s is sampled
randomly.
It will be convenient to describe our results in terms of the MD
transform applied to messages that have already been split into
blocks. For any set Bl we let I : Bl∗ → Bl∗ be the splitting function
which simply outputs its input unchanged. For some compression
function h and set S, let HI = MD[h, I, S]. We will informally say
that h loops on (s, u) if HI(k,s)(u) = s for all k ∈ h.Keys. The fol-
lowing lemma observes that if h loops on (s, u) and Split(M1) =
u∥Split(M2), then the pair M1, M2 is a collision for MD[h, Split, S].
Lemma 5.4. Let h : h.Keys × (h.Bl × h.Out) → h.Out be a com-
pression function, Split : Split.Inp → h.Bl∗ be a splitting function,
and S ⊆ h.Out be a set of starting points. Let H = MD[h, Split, S] be
the hash function associated to these components via the MD trans-
form of Fig. 2. Let I be the splitting function described above and
HI = MD[h, I, S] be the corresponding hash function obtained via
the MD transform. Suppose M1, M2 ∈ Split.Inp are a pair of distinct
messages satisfying Split(M1) ⊒ Split(M2). Let u be the vector for
which Split(M1) = u∥Split(M2). For any choice of (k, s) ∈ H.Keys, if
HI(k,s)(u) = s then M1, M2 is a collision for H(k,s).
Proof. (of Lemma 5.4) First note that for any vectors m, y ∈ Bl∗,
HI(k,s)(m∥y) = HI(k,s′)(y) where s′ = HI(k,s)(m). This is a simple
observation from the code of the MD transform shown in Fig. 2.
The chaining variable c[|m| + 1] obtained during the computation
of HI(k,s)(m∥y) would be the output of HI(k,s′)(m). The rest of the
computation then exactly mirrors HI applied to y with c[|m| + 1]
serving the role of the starting point.
Using this observation, the proof is straightforward. We can
rewrite H on input M1 as follows
H(k,s)(M1) = HI(k,s)(u∥Split(M2))
= HI(k,s′)(Split(M2))
= H(k,s′)(M2)
where s′ = HI(k,s)(u). From our assumption, this equals s. Thus
H(k,s)(M1) = H(k,s)(M2), as desired.
□
First we will handle the case when the s used for the MD trans-
form is an a priori fixed value.
Proposition 5.5. Let Split be a splitting function and M1, M2 ∈
Split.Inp satisfy Split(M1) ⊒ Split(M2). Let u be the vector for which
it holds that Split(M1) = u∥Split(M2). Let b ∈ N and a = b + |u|. Let
f be a family of functions with f.Inp = Split.Bl× Za and f.Out = Zb .
Then we can build a compression function gu (shown in Fig. 6,
with g.Inp = f.Inp and g.Out = Za) such that for all adversaries A,
gu(A) ≤ Advcr
f (A). Furthermore, letting G = MD[gu, Split, {0}],
Advcr
we can build an efficient adversary B (shown in Fig. 6) such that
Advcr
G(B) = 1.
The compression function gu above is specifically defined in a
contrived way so that it loops on (0, u) and thus M1, M2 is a collision
for the MD transform.
In the above we fixed the starting point s to 0 and the set of
chaining variables gu.Out to Za. This is without loss of generality
because the lemma can easily be extended to any reasonable choice
of gu.Out and fixed s ∈ gu.Out by choosing an efficiently com-
putable and invertible mapping e(·) : gu.Out → Z|gu .Out| which
satisfies e(s) = 0.
k
k
((m, c)) = gu
Let us first suppose that gu
k
Proof. (of Proposition 5.5) We will first show that any colli-
((m, c)) =
sion for gu is also a collision for f by proving that if gu
((m′, c′)) it either holds that (m, c) = (m′, c′) or that fk((m, c)) =
k
gu
fk((m′, c′)). As such, suppose gu
((m′, c′)).
k
Note that the first return statement of gu always outputs a value
less than |u| while the second always outputs a value greater than
|u|. We can consider these two cases separately.
((m, c)) < |u|. This then means that
c + 1 = c′ + 1 (mod |u|), so c and c′ must be the same (because the
condition of the if statement guarantees that both are less than |u|).
The if statement inside gu must evaluate to true for both pairs, so
we have m = u[c + 1] = u[c′ + 1] = m′ and so (m, c) = (m′, c′).
((m, c)) ≥ |u|. Then this
must mean that fk((m, c)) + |u| and fk((m′, c′)) + |u| are the same
and so fk((m, c)) = fk((m′, c′)).
Because any collision for gu is also a collision for f, for any
adversary Ait must hold that Advcr
Now consider the other case, that gu
k
gu(A) ≤ Advcr
f (A).
Session D4:  Crypto PrimitivesCCS’17, October 30-November 3, 2017, Dallas, TX, USA896((m, c))
gu
k
If (c < |u|) and (m = u[c + 1])
Return c + 1 mod |u|
Return fk((m, c)) + |u|
Adversary B(k, s)
Return (M1, M2)
hu
k
(bc, qc, rc) ← c
If (bc = 0) and (m = u[rc + 1])
(q, r) ← fk((m, c))
Return (1, q, r)
((m, c))
Return (0, qc, (rc + 1 mod |u|))
Figure 6: Compression functions and adversary used for
Proposition 5.5 and Theorem 5.6.
To prove that Bhas advantage 1, we will make use of Lemma 5.4
by showing that HI(k,0)(u) = 0 where HI is defined as in the lemma.
Let c be the vector of values that would be obtained in the compu-
tation of HI(k,0)(u); that is, let c[1] = 0 and c[i + 1] = gu
((u[i], c[i]))
for i = 1, . . . , |u|.
Following the code of gu we can then see that its if statement will
always evaluate to true in this computation and so c[i +1] = c[i] +1
(mod |u|) holds for all i. Consequently, c[i] = i for i = 1, . . . , |u|
and then c[|u| + 1] = 0. The latter is the value returned by HI so
HI(k,0)(u) = 0 and the pair M1, M2 is a collision for H. It follows
that the advantage of B is exactly 1.
□
k
The lemma above might seem somewhat contrived, because
we allowed our compression function g to depend on the starting
point used for the MD transform. This makes it, in some senses,
a weak result and one might naturally wonder this dependency
was necessary for the result. It is not. At the cost of some added
complexity and lost success probability for B we can extend this to
the case when s is randomly chosen from some set instead of fixed.
Theorem 5.6. Let a ∈ N. Let Split be a splitting function. Suppose
Split(M1) ⊒ Split(M2) and in particular Split(M1) = u∥Split(M1).
Let f be a family of functions with f.Inp = Split.Bl×(Z2 × Za × Z|u|)
and f.Out = Za × Z|u|.
Now let hu : Split.Bl × (Z2 × Za × Z|u|) → Z2 × Za × Z|u| be the
compressions function shown in Fig. 6. For all adversary A, it holds
f (A). Furthermore, letting S = hu.Out and
that Advcr
H = MD[hu, Split, S], we can build an efficient adversary B (shown
in Fig. 6) satisfying,
hu(A) ≤ Advcr
Advcr
H(B) ≥ 1/(2|u|).
The compression function hu above is specifically designed so
that it loops on s, u for any s of the form (0, q, 0), giving the desired
collision between M1 and M2 with the specified probability over
the random choice of s
Again, this theorem can be extended to cover any reasonable
choice of hu.Out. One can first map hu.Out to Z|hu .Out| as discussed
earlier. Then from c ∈ Z|hu .Out| one can obtain the tuple (bc , qc , rc)
via bc ← c mod 2, y ← ⌊c/2⌋, rc ← y mod |u|, and qc ← ⌊y/2⌋.
There are technical details to be considered regarding the fact that