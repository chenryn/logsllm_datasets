Since the malicious content is not necessarily in the HTML
ﬁles or JavaScript ﬁles, we believe our architecture could
detect more attack forms.
In [4], besides giving the formal deﬁnition of vulnerability-
based signature, Brumley et al. described an automated,
data ﬂow analysis based way for generating vulnerability
signatures. And in [6], Cui et al. proposed an automatic
way to generate vulnerability-based signatures for unknown
vulnerabilities. Therefore, though in our prototype system,
the signatures are manually generated, we can use these pro-
posed methods to generate vulnerability-based signatures in
automated manner, to increase the detection scope.
3. SYSTEM DESIGN
In this section we describe the design of our approach.
Firstly, we discuss the threat model and system boundaries
that guide our design. Then we give an overview of our
approach and describe the functionality of each component.
3.1 Threat model and system boundaries
We designed our system to handle drive-by download at-
tacks. We assume attackers could have the complete control
over the web server. Therefore, they can prepare any kind of
exploit that could be delivered through web browsing. We
also assume the exploits may arrive at the browser by any
means, in any format and may target at any part of the
browser, including its plug-ins.
We only consider attacks that originate from web and
target at web browsers and their plug-ins. We also limit
our system only to detect attacks that require invocation of
inter-module communication.
3.2 System Overview
Our system consists of two main components, a Monitor
which monitors the IMC and generates security events; and
a Detector that identiﬁes attacks targeting at known vulner-
abilities from the event trace..
Although IMC is also a kind of local function invocation,
in many browsers, it is diﬀerent from calling an applica-
tion program interface (API). An API is permanent, always
available to be called. But most component model (COM,
XPCOM) used in web browsers use objects that are created
at demand, and destroyed when no longer needed to pro-
vide functionalities. For example, when visiting Youtube, an
Adobe Flash Player object is created to play the video; and
as soon as you leave that page, this object is freed thus not
available for reuse. From this perspective, IMC is more sim-
ilar to network communication where communication can
have a session. Therefore, in our system, we deﬁne three
kinds of events to stand for the whole procedure of IMC:
Object creation. A creation of a component object indi-
cates the beginning of a new communication session.
Method invocation. Invocations of methods constitute
the main part of the communication.
Object free. The free of a component object indicates the
end of the session.
3.3 The Monitor
The IMC Monitor is in charge of generating the three
kinds of events. In our approach, it is an abstract component
that can be implemented in diﬀerent ways.
If integrated into current browsers (e.g. MSIE, Firefox),
where implicit IMC is used, the Monitor can be implemented
as a plug-in that will be loaded at the startup time. This
plug-in then intercepts the system calls for object creation to
generate corresponding events. However, after the compo-
nent objects are created, the IMC is made implicitly. There-
fore, method invocation events and object free events must
be generated diﬀerently. A general method is to hook ev-
ery method the created object oﬀers, including the object’s
destructor. After that, when a hooked function is called, a
method invocation event is generated. And whenever the
destructor is called, an object free event is generated.
In future browser architectures like the OP browser, IMC
must be invoked explicitly by calling the IMC API provided
by the browser kernel, and the kernel will monitor and au-
dit these invocations. Under this circumstance, the Monitor
can simply be registered as a handler for the three kinds of
events. Or it could be implemented as a parser that gener-
ates these events from the audit log.
The Monitor can also be built into a low-interaction client
honeypot. For example, by modifying the ActiveX emula-
tion component already exists in PHoneyC.
3.4 The Detector
The Detector is responsible for detecting known attacks
by matching the generated IMC events with signatures in its
vulnerability deﬁnitions. To improve the detection precision,
we use the vulnerability-based signature to detect attacks.
In [4], a vulnerability signature is formally deﬁned as a
matching function which, for an input x returns either EX-
PLOIT or BENIGN without running the original vulnerable
program P . The authors also introduced three main signa-
ture representation classes, the Turing machine signatures,
the symbolic constraint signatures and the regular expression
signatures. The Turing machine signatures are precise but
may take an unbounded time for matching. Matching regu-
lar expression signatures are eﬃcient but the language itself
has fundamental limitations that may tamper the precision.
Therefore, in our system, the Detector uses the symbolic
constraint signatures for detection.
One modiﬁcation here is the deﬁnition of input x. Some of
the vulnerabilities require several method invocations before
the components can be successfully compromised. For ex-
ample, exploiting MS08-041 requires ﬁrst setting the Snap-
shotPath, then setting the CompressedPath. Hereby, we
need to track the session state to indicate what input has
already been received by the vulnerable object. Because one
object may contain more than one vulnerability (e.g. CVE-
2007-4816), the session state must be tracked separately for
each signature.
In consideration of these facts, we formally deﬁne a sig-
nature used in our system as a deterministic ﬁnite state au-
tomaton (DFA)
S = (Q, Σ, δ, q0, F )
Each state q ∈ Q indicates the current state of the session,
and q0 is the initial state. When an object is created, the
instantiated signatures for this object are initialized with q0.
Σ represents the possible input symbol for the object and
Σ∗ is all the possible input x for that object. δ is a symbolic
constraint resolver that checks if the input x ∈ Σ∗ at state
qa satisﬁes the symbolic constraint on qa.
If it does, the
signature transits to the new state qb; otherwise it remains
in current state. There are two ﬁnal states f1, f2 ∈ F . f1
represents EXPLOIT and f2 represents BENIGN. As soon
as the state transits to f1, an attack is detected. And for
the reason that each component object may be exploited at
any time during its life time, f2 state can only be reached
when the object free event is received.
4. PROTOTYPE IMPLEMENTATION
In this section, we describe the implementation of our pro-
totype system in detail. In the ﬁrst part, we provide a short
overview of the Microsoft Internet Explorer browser and its
plug-in system ActiveX. Then we present the implementa-
tion of COMSniﬀer (the Monitor) and MwDetector (the De-
tector).
4.1 MSIE and ActiveX
MSIE is a series of graphic web browsers developed by
Microsoft, and included as part of the Microsoft Windows
since 1995. It has been the most widely used web browser
since 1999. Although the latest version IE8 has many se-
curity improvements to mitigate drive-by download, XSS
and phishing attacks, the most widely used version is still
IE6. MSIE uses a componentized architecture built with the
Component Object Model (COM) , which is also the basic
of its plug-in framework – ActiveX. For client-side scripting,
MSIE supports JavaScript and VBScript by default. It can
also support CLI-languages through Silverlight.
The COM technology is introduced by Microsoft in 1993
as an extension of its OLE model. The key idea is to imple-
ment a component developing model that is Object Oriented
(OO). Thereby, compare with dynamic link library (DLL),
COM components are more similar to classes in OO lan-
guages. The functionalities of a component are provided by
objects. Each object has its own private data, and oﬀers the
functionalities through diﬀerent methods of the interfaces it
implements. And Components also support reuse. The most
signiﬁcant diﬀerence is that COM objects’ interface is binary
compatible, thus can be implemented in any languages on
any platform. Another important feature of COM is process
transparency. That is, when using a COM component, the
user does not need to care whether the component is im-
plemented as a DLL inside its process or a separate process
on local system, or even a process on remote server. Each
COM component is identiﬁed by a global unique id called
classid (CLSID).
Interface is one of the core concepts in COM. One inter-
face represents a certain set of functionalities (e.g. IHTML-
Document) provided by an object. Object must implement
at least one interface, but it may implement several inter-
faces as well. Similar to COM components, every interface
has a global unique id called interface id (IID). The basic
and most important interface is IUnknown interface. Ev-
ery interface must ‘inherit’ this interface and implement the
three methods of this interface: AddRef, Release and Query-
Interface.
The basic steps to utilize a COM component are: (1) cre-
ate a component object; (2) use the object’s QueryInterface
method to query the interface that contains the demanded
method; and (3) call the method.
To manage large amount of COM components, Microsoft
also introduced the concept of COM library. COM library
provides interfaces to register, query, create and remove
COM components. It also provides utility functions to han-
dle common COM data structures and to manage memory
usage.
ActiveX framework is the plug-in system for MSIE in-
troduced in 1996 as a competitor to Java applet. A plug-
in implemented using ActiveX is usually called an ActiveX
control. Since ActiveX control is also a kind of COM com-
ponent, it can provide much richer abilities than applet. But
on the other hand, it also increases security risks. These se-
curity risks exacerbate after MSIE allows client-side scripts
to interact with ActiveX controls.
4.2 COMSniffer
In this section, we ﬁrst describe how COMSniﬀer gen-
erates the three kinds of IMC events. Then we discuss the
performance optimization and some implementation details.
4.2.1 Generating object creation events
An object creation event for COM object contains two
piece of information: the object’s CLSID and the object’s
address. The CLSID helps the Detector decide what signa-
tures should be used for this session. For the reason that a
COM object is used directly as an interface pointer, in our
prototype system, we use the object’s address as the ID of
an object. Since an object represents a session, this address
is also used as the ID of the session.
To generate the object creation events, we need to un-
derstand the procedure of creating a COM object. Most
Figure 1: Binary Format of COM Interface
COM objects used by MSIE are created in two ways. The
ﬁrst one is to call the CoCreateInstanceEx API 2 provided
by the COM library, with the required CLSID and IID. If
succeeds, this API directly returns the required object. Be-
cause CLSID and created object’s address is passed either as
an input parameter or as an output parameter, to monitor
objects created through this way, we intercept the CoCre-
ateInstanceEx API.
The second way is to call the CoGetClassObject API with
the required CLSID. Unlike CoCreateInstanceEx, this API
does not return a object of that CLSID, but a class factory
object (object that implements IClassFactory interface). To
create the ‘real’ object, the caller then calls the CreateIn-
stance method of the class factory with the demanded IID.
As a result, monitoring object created in this way is more
complicated. Not only because the CLSID information and
object’s address is involved in two function calls, but also
because the later function is not a system API. To solve
this problem, we ﬁrst intercept the CoGetClassObject API.
When a class factory object is created, we hook its Create-
Instance method and its CLSID is recorded. Then, when
the CreateInstance method is invoked, we could obtain the
object’s address. The next step is to correlate the CLSID
and the object’s address. In our system, this is done by map-
ping the CLSID to the class factory object’s virtual function
table. This is feasible because the binary structure of COM
object (Fig. 1) is similar to a C++ object. The ﬁrst ele-
ment of an object is a pointer that pointed to the interface’s
virtual function table (vtbl). And all objects from the same
component, with the same interface use the same vtbl. So,
when a class factory object is created, we save the CLSID
- IClassFactory vtbl pair. And when the hooked CreateIn-
stance method is called, we obtain the vtbl address through
This pointer 3, get the corresponding CLSID, and generate
a creation event.
4.2.2 Generating method invocation events
A method invocation event contains three pieces of infor-
mation: the object address, the method name and the pa-
rameters. The method name, together with the parameters,
forms the input to be checked.
The ordinary way to monitor function invocation is to in-
2The CoCreateInstance API is also implemented by this
function.
3Like C++ and other OO languages, the ﬁrst parameter of
any COM interface’s mehtod is a ‘this’ pointer.
vtblPer-object datavtblPer-object datavtblPer-object dataAddRefReleaseQueryInterfaceQueryInterface ImplementationAddRef ImplementationRelease Implementationtercept the very function, by adding a hook, setting a debug
break point or et al. However, since the number of COM
components and their interfaces is extremely large, writ-
ing callback functions for every method is too expensive.
Luckily, when creating the ActiveX framework, Microsoft
also deﬁned the standard interface through which client-side
scripts can interact with the ActiveX controls. This interface
is also the interface every ActiveX control must implement
and the only way to interact with scripts. Its name is IDis-
patch interface 4. The two key methods of this interface are
GetIDsOfNames and Invoke. When a script wants to use
an ActiveX control, after creating the object via 
tag or ActiveXObject function, it cannot directly call the
method. Rather, the scripting engine (e.g. JScript) will
query the IDispatch interface of that object, and calls the
GetIDsOfNames method to check if that component has this
method.
If it does, GetIDsOfNames will return the corre-
sponding dispatch ID (DISPID). The engine then calls the
Invoke method to ﬁnish the method invocation, using the
DISPID.
Therefore, to generate method invocation events, after a
successful creation of a COM object, we check if this com-
ponent supports IDispatch interface. If it does, we hook the
GetIDsOfNames and Invoke method of this object. When
the hooked GetIDsOfNames is called, we save the method
name - DISPID pair. And when the hooked Invoke method
is called, we obtain the corresponding method name of the
given DISPID, gather the parameters information and gen-
erate a method invocation event.
To prevent the exploit, we make COMSniﬀer work in in-
line mode. When in this mode, COMSniﬀer will wait until
the Detector returns the checking result.
If an attack is
detected, COMSniﬀer reports the attack and then prevents
the original method invocation by directly returning an error
code.
4.2.3 Generating object free event
Generating object free events is easier. COM standard
deﬁnes: when the calling of Release method returns 0, this
object is going to be released. Hence, we monitor the Re-
lease method by hooking this method of every COM object
on their creation. And when the original function returns 0,
an object free event is generated.
4.2.4 Performance Optimization
Since MSIE is built around COM and most of its com-
ponents support IDispatch, COMSniﬀer may generate too
much noise information. To reduce these noises, we only
monitor CLSIDs that exist in our vulnerability deﬁnitions.
This optimization will not aﬀect the detection because our
Detector only detects attacks targeting known vulnerabili-
ties.
4.2.5 Implementation
Although most security plug-ins for MSIE are implemented
as browser helper objects (BHO), COMSniﬀer is not. This
is because by the time BHOs are loaded, some of the core
components object of MSIE have already been created, thus
cannot be monitored by COMSniﬀer. So we implement it as
a DLL that will be loaded by MSIE immediately after the
4Microsoft later extended this interface with IDispatchEx
interface, but for our prototype, IDispatch is enough.
process is created. And once loaded, it will automatically
start monitoring.
4.3 MwDetector
In this section, we describe the implementation of MwDe-
tector, the Detector in our prototype system.
Signatures
4.3.1
In MwDetector, we store DFA deﬁnitions of signatures in
description ﬁles, one signature per ﬁle. The ﬁle content is