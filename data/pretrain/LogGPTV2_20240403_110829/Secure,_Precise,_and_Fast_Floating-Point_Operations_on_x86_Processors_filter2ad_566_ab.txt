thus making them prone to rounding errors. Rounding
errors in ﬂoating-point numbers are typically measured
in terms of the Unit of Least Precision (ULP) [25]. The
ULP distance between two ﬂoating-point numbers is the
number of distinct representable ﬂoating-point numbers
between them, which is simply the result of subtracting
their integer representations. If the result of the subtrac-
tion is zero, the ﬂoating-point numbers must be exactly
the same.
4 Our Solution: Escort
Escort offers secure counterparts of ordinary non-secure
ﬂoating-point operations, including both elementary op-
erations and higher-level math operations. The elemen-
tary operations include the six basic ﬂoating-point op-
erations that are natively supported by the ISA—type
conversion, addition, subtraction, multiplication, divi-
sion, and square root—and a conditional data copy op-
eration. The 112 higher-level math operations are those
that are implemented using a combination of native in-
structions. Examples of higher-level functions include
sine, cosine, tangent, power, logarithm, exponentiation,
absolute value, ﬂoor, and ceiling.
The next subsections describe Escort’s design in three
parts. First, we describe the design of Escort’s secure el-
ementary operations. These operations collectively form
the foundation of Escort’s security guarantees. Second,
we describe Escort’s compiler, which accepts non-secure
code for higher-level operations and converts it into se-
cure code. This compiler combines a code transforma-
tion technique with Escort’s secure elementary opera-
tions. Third, we present an example that shows the syn-
ergy among Escort’s components.
4.1 Elementary Operations
The key insight behind Escort’s secure elementary opera-
tions is that the latencies of SIMD instructions are deter-
mined by the slowest operation among the SIMD lanes
(see Figure 2), so the Escort compiler ensures that each
elementary instruction runs along side a dummy instruc-
tion whose operand will produce the longest possible la-
tency. Our analysis of 94 x86 SSE and SSE2 instruc-
tions (which includes single- and double-precision arith-
metic, comparison, logical, and conversion instructions)
reveals: (1) that only the multiplication, division, square
root, and single-precision to double-precision conver-
sion (upcast) instructions exhibit latencies that depend
on their operands and (2) that subnormal operands in-
duce the longest latency.
In particular, Escort’s ﬁxed-time ﬂoating-point opera-
tions utilize SIMD lanes in x86 SSE and SSE2 instruc-
tions. Our solution (1) loads genuine and dummy (sub-
normal) inputs in spare SIMD lanes of the same input
register, (2) invokes the desired SIMD instruction, and
(3) retains only the result of the operation on the genuine
inputs. Our tests conﬁrm that the resulting SIMD instruc-
tion exhibits the worst-case latency, with negligible vari-
ation in running time (standard deviation is at most 1.5%
of the mean). Figure 3 shows Escort’s implementation of
one such operation.
Escort includes Raccoon’s conditional data copy op-
eration (see Figure 4) which does not leak information
through digital side channels. This operation copies the
contents of one register to another register if the given
condition is true. However, regardless of the condition,
this operation consumes a ﬁxed amount of time, executes
the same set of instructions, and does not access applica-
tion memory.
4.2 Compiling Higher-Level Operations
Escort’s compiler converts existing non-secure code into
secure code that prevents information leakage through
digital side channels. First, our compiler replaces all ele-
mentary ﬂoating-point operations with their secure coun-
terparts. Next, our compiler produces straight-line code
that preserves control dependences among basic blocks
while preventing instruction side effects from leaking se-
crets. Our compiler then transforms array access state-
ments so that they do not leak information through mem-
ory address traces. Finally, our compiler transforms
74  25th USENIX Security Symposium 
USENIX Association
A * B
(intended 
operation)
[next instr.]
e
m
i
t
C * D
(intended 
operation)
[next instr.]
e
m
i
t
 (a) Original
(non-secure) code
After 
transformation
e
m
i
t
A * B
(intended 
operation)
P * Q
(dummy
operation)
e
m
i
t
C * D
(intended 
operation)
P * Q
(dummy
operation)
[next instr.]
[next instr.]
(b) Transformed 
(secure) code
Figure 2: The key idea behind Escort’s secure elementary operations. The operation is forced to exhibit a ﬁxed latency
by executing a ﬁxed-latency long-running operation in a spare SIMD lane.
double escort_mul_dp(double x, double y) {
const double k_normal_dp = 1.4;
const double k_subnormal_dp = 2.225e-322;
double result;
__asm__ volatile(
%1, %%xmm14;"
%2, %%xmm15;"
$8, %1;"
$8, %2;"
%3, %1;"
%4, %2;"
%2, %0;"
%1, %0;"
$8, %0;"
%%xmm14, %1;"
%%xmm15, %2;"
"movdqa
"movdqa
"pslldq
"pslldq
"por
"por
"movdqa
"mulpd
"psrldq
"movdqa
"movdqa
: "=x" (result), "+x" (x), "+x" (y)
: "x" (k_subnormal_dp), "x" (k_normal_dp)
: "xmm15", "xmm14");
return result;
}
01: copy(uint8_t pred, uint32_t t_val, uint32_t f_val) {
02:
03:
04:
05:
06:
07:
08:
09:
10:
11:
12:
13: }
%2, %0;"
"mov
%1, %1;"
"test
%3, %0;"
"cmovz
"test
%2, %2;"
: "=r" (result)
: "r" (pred), "r" (t_val), "r" (f_val)
: "cc"
uint32_t result;
__asm__ volatile (
);
return result;
Figure 4: Code for conditional data copy operation that
does not leak information over digital side channels. This
function returns t val if pred is true; otherwise it re-
turns f val. The assembly code uses AT&T syntax.
Figure 3: Escort’s implementation of double-precision
multiplication, using the AT&T syntax.
loops whose trip count reveals secrets over digital side
channels. We now describe each step in turn.
4.2.1 Step 1: Using Secure Elementary Operations
The Escort compiler replaces x86 ﬂoating-point type-
conversion, multiplication, division, and square root as-
sembly instructions with their Escort counterparts. How-
ever, Escort’s secure elementary operations can be up
to two orders of magnitude slower than their non-secure
counterparts. Hence, our compiler minimizes their usage
by using taint tracking and by employing the quantiﬁer-
free bit-vector logic in the Z3 SMT solver [7], which is
equipped with ﬂoating-point number theory. If the solver
can prove that the operands can never be subnormal val-
ues, then Escort refrains from replacing that instruction.
In effect, the Escort compiler constructs path-sensitive
in the
Z3 expressions for each arithmetic statement
LLVM IR. For every Φ-node that produces an operand
for an arithmetic expression, Escort creates one copy of
the expression for each input to the Φ-node. If the solver
reports that no operand can have a subnormal value, then
Escort skips instrumentation of that ﬂoating-point opera-
tion.
We set a timeout of 40 seconds for each invocation of
the SMT solver. If the solver can prove that the instruc-
tion never uses subnormal operands, then Escort skips
replacing that ﬂoating-point instruction with its secure
counterpart. Figure 5 shows the percentage of ﬂoating-
point instructions in commonly used math functions that
are left untransformed by Escort.
This optimization is conservative because it assumes
that all ﬂoating-point instructions in the program have
subnormal operands unless proven otherwise. The cor-
rectness of the optimization is independent of the code’s
use of pointers, library calls, system calls, or dynamic
values. The static analysis used in this optimization is
ﬂow-sensitive, path-sensitive, and intra-procedural.
USENIX Association  
25th USENIX Security Symposium  75
if entry block(bb) then
pred[bb] ← true
pred[bb] ← false
else
end if
br ← branch(bb)
if unconditional branch(br) then
1: for each basic block bb in function do
2:
3:
4:
5:
6:
7: end for
8:
9: for each basic block bb in function do
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29: end for
{s} ←successors(bb)
pred[s] ← pred[s]∨ pred[bb]
pred[s] ← simpli f y(pred[s])
{s1,s2} ←successors(bb)
if loop condition branch(br) then
end if
pred[s1] ← simpli f y(pred[s1])
pred[s2] ← simpli f y(pred[s2])
pred[s1] ← pred[s1]∨ pred[bb]
pred[s2] ← pred[s2]∨ pred[bb]
p ← condition(br)
pred[s1] ← pred[s1]∨ (pred[bb]∧ p)
pred[s2] ← pred[s2]∨ (pred[bb]∧¬p)
else
(cid:31) Conditional Branch.
(cid:31) Skip branches that represent loops.
else
end if
Figure 6: Algorithm for predicating basic blocks.
Memory Access Side Effects. To ensure proper mem-
ory access side effects, the Escort compiler replaces store
instructions with conditional data-copy operations that
are guarded by the basic block’s predicate, so memory
is only updated by instructions whose predicate is true.
Unfortunately, this na¨ıve approach can leak secret in-
formation when the program uses pointers. Figure 7
illustrates the problem: If store instructions are not al-
lowed to update a pointer variable when the basic block
predicate is false, then the address trace from subsequent
load instructions on the pointer variable will expose the
fact that the pointer variable was not updated.
The Escort compiler prevents such information leaks
by statically replacing pointer dereferences with loads or
stores to each element of the points-to set4. Thus Escort
replaces the statement in line 8 (Figure 7) with a store
operation on b. When the points-to set is larger than a
4Escort uses a ﬂow-sensitive, context-insensitive pointer analysis:
https://github.com/grievejia/tpa. Replacing a pointer derefer-
ence with a store operation on all elements of the points-to set is feasi-
ble for Escort because points-to set sizes in the Musl C library are very
small.
Figure 5: Percentage of instructions that are left uninstru-
mented (without sacriﬁcing security) after consulting the
SMT solver.
4.2.2 Step 2: Predicating Basic Blocks
Basic block predicates represent the conditions that dic-
tate whether an instruction should execute. These pred-
icates are derived by analyzing conditional branch in-
structions. For each conditional branch instruction that
evaluates a predicate p, the Escort compiler associates
the predicate p with all basic blocks that execute if the
predicate is true, and it associates the predicate ¬p with
all basic blocks that execute if the predicate is false. For
unconditional branches, the compiler copies the predi-
cate of the previous block into the next block. Finally,
if the Escort compiler comes across a block that already
has a predicate, then the compiler sets the block’s new
predicate to the logical OR of the input predicates. At
each step, the Escort compiler uses Z3 as a SAT solver to
simplify predicates by eliminating unnecessary variables
in predicate formulas. Figure 6 shows the algorithm for
basic block predication.
4.2.3 Step 3: Linearizing Basic Blocks
The Escort compiler converts the given code into
straight-line code so that every invocation of the code
executes the same instructions. To preserve control de-
pendences, the basic blocks are topologically sorted, and
then the code is assembled into a single basic block with
branch instructions removed.
4.2.4 Step 4: Controlling Side Effects
We now explain how Escort prevents side effects from