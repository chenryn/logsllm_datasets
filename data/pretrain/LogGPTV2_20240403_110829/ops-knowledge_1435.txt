User: 请解答这个和日志有关的问题Are there regulations that govern how social security numbers are stored and viewed? I'm working for a client that keeps records of social security numbers in their databases, numbers pulled from screenings and automatically captured from companies and other financial data. A few million SSNs attached to names, addresses, work history, pay history...etc

As I'm working through their codebase, I keep wondering if there are any regulations that they need to be compliant of. Right now SSNs are encrypted in the DB, but anyone can log into their public-facing web app as an admin with an insecure password (Something as simple as admin@company.com, pw: admin) and view them in plain text, and existing employees can search for SSNs and view information on the numbers holders.

Is there any sort of compliance (similar to PCI for payment info) that needs to be followed/adhered to for SSNs and personal information?

Assistant: This is one of those times that there may not be a clear and specific answer, but I assure you, there is an answer.
Part of that answer is found in one of the comments here made by Artog. There IS a NIST publication on the subject. The bigger concern is this...
In every Security class we discuss the prudent person rule. The question is “what would a prudent person do with this situation?”
If this company is using insecure methods to protect data that can potentially harm people (SSN, name, address, phone number, employer, etc) they CAN open themselves to huge liability. They could be responsible for any financial problems they cause.
There are several problems with what you have posted:

Is someone already exploiting their database?
It is likely the problem will only be discovered after damage is done.
Then, the question is, do they notify anyone in the database of the breach?

The reality is, that unless whatever this database is falls under some form of regulation/control, it is unlikely that a change will happen. Because change costs money, and the business is likely already making money off the database with the vulnerabilities you described in place.