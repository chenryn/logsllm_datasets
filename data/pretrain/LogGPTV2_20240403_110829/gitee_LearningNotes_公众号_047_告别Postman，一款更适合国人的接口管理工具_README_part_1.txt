![](images/0.jpg)
​                                                                                                                                                                           作者：陌溪
​                                                                                                                         陌溪的学习笔记：http://note.moguit.cn大家好，我是 **陌溪**。
我们都知道在一个团队中是由很多角色组成的，例如：业务、产品、设计、前端、后端、测试。每个角色各司其职，一起合作完成项目的交付。
而前端与后端的沟通则是需要通过一个统一的文件进行沟通交流，即通过接口文档事先约定好后端的接口返回内容，然后大家就按照这个文档约定完成前后端的开发。并且一般接口文档都是通过后端人员编写的，维护流程也比较繁琐。
最近被群里小伙伴安利了一款接口管理工具 **ApiPost**，陌溪在使用后觉的非常不错，在这里我也分享给大家。
ApiPost 包含了以下四种功能，同时具备接口调试，接口文档，以及 **Mock** 工具，以及接口流程测试。
> ApiPost = API接口调试工具 + 接口文档快速生成 + Mock工具 + 接口流程测试
- API接口调试工具：常见的有 Postman、Postwoman 等等
- 接口文档快速生成：常见的接口文档工具有 **Swagger** 和 **smart-doc**，但是对代码侵入性比较强。
- Mock工具：主要用于前端根据接口生成对应的数据，如 **RAP** 等工具。
- 接口测试：常见的接口测试工具有 **JMeter**
同时 **ApiPost** 也是国人开发的一款接口管理工具，致力于打造更好用的、中文的、接口调试与文档管理工具（简直是对于陌溪这种英语渣渣的福音~）
![ApiPost首页](images/image-20210923222729647.png)
## Api接口调试
### 代码格式化
接口调试是在开发阶段中使用最多的一个功能，利用ApiPost进行常规的接口调试功能
![image-20210923224232677](images/image-20210923224232677.png)
让我感觉最舒服的是，对于返回的参数是可以进行 Json 格式化的，下面是 **Postman** 自带的 **Pretty** 功能 。
![image-20210923225648233](images/image-20210923225648233.png)
下面是 **ApiPost** 的 **Json** 格式化功能，并且通过右侧的三角形，可以对数组元素进行展开或者合拢。在面对返回结果是一个数组，并且每个对象中字段很多的时候，这个功能就非常棒了。
![image-20210923230008166](images/image-20210923230008166.png)
没有对比就没有伤害，在看看 **Postman** 的输出，陌溪每次只能把结果复制出来，然后打开 **Json** 在线格式化，才能够看到返回的结果，简直增加了额外的负担。
> Json格式化：https://www.sojson.com/
![image-20210923230536725](images/image-20210923230536725.png)
### 全局参数
同时，还有一个让陌溪非常喜欢的点，就是 **全局参数**。
在上面的示例中，我们需要给接口填写对应的鉴权请求头，才能够请求后台获得数据。
![image-20210923231133132](images/image-20210923231133132.png)
但在实际项目中，对于一批接口需要测试的时候，往往每个接口都需要填写**相同的鉴权请求头**，这样过程会非常繁琐。如果使用 ApiPost的话，我们可以利用全局参数或者目录参数实现。
![image-20210923230956427](images/image-20210923230956427.png)
配置完成后，以后添加的接口，再次请求后台时，就会携带全局定义的请求头过去。同理，还支持全局的 **Query** 以及 **Body**，可以把一些不变的请求参数都配置好全局参数，这样会让我们编写接口请求时，省下很多时间~
### 目录参数
同时，我们还可以创建不同的目录，用来区分项目接口所处的不同模块。例如：以蘑菇博客为例，可以创建两个目录 **mogu-admin** 和 **mogu-web**，分别代表蘑菇博客的后端管理与门户项目。
因为，后台管理和门户是有两套鉴权逻辑的，即上面提到的全局配置token就不能针对两个场景生效了！
那如果我还想同时测试 门户类相关接口，或者是后台管理相关接口，那怎么办呢？
这个时候就需要用到目录参数了，它的作用和全局参数雷同，只是作用域不一样，**mogu-admin** 目录下的接口不会使用同级的 mogu-web 目录的目录参数作为发送参数。
![image-20210923231842188](images/image-20210923231842188.png)
通过对不同的目录，配置不同的全局参数，即可完美的解决刚刚的场景。
同时，当全局参数、目录参数、接口中都使用了同一个参数时，最终会按照以下优先级读取参数值：
> 单个接口 > 目录参数 > 全局参数
如上面的示例，如果全局参数、目录参数、接口中都定义了header参数token：
> 全局参数：token值为：698d51a19d8a121ce581499d7b701668 // 最低优先级
> 目录参数：token值为：b50e345cc9febd86dedecc551ebcc505 // 其次优先级
> 单接口参数：token值为：a1a9db893bb8a28ccb665d2af54d9417 // 最高优先级
那么最终发送的 **token** 值为：a1a9db893bb8a28ccb665d2af54d9417
## 接口文档快速生成
点击分享文档，即可获取对应的文档链接
![image-20210923233046932](images/image-20210923233046932.png)
复制并打开文档地址就可以看到了完整的接口文档。
![image-20210923233348305](images/image-20210923233348305.png)
细心的小伙伴可能会发现，这个请求参数上没有相关字段的介绍，我们回到刚刚的 **ApiPost** 页面，点击 **提取字段和描述**，然后填入对应的字段名称。![image-20210923233646768](images/image-20210923233646768.png)
然后重新发布，即可看到每个字段的含义了
![image-20210923233916318](images/image-20210923233916318.png)