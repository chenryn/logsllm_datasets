### Access Control and Privilege Separation

To ensure secure access to the database, a trusted compartment should export access to the database. This privilege separation, similar to techniques explored in OKWS [5], prevents a user from accessing other users’ sensitive data.

### Oracle Prevention Techniques

In the previous section, we discussed how to implement cryptographic protocols to thwart Session Key Disclosure (SKD) and impersonation attacks. Throughout the suggested implementation structure, sensitive data is accessible only by trusted compartments, which in turn export privileged operations to unprivileged compartments. As discussed in Section 3.2, in such scenarios, there is a risk of providing an attacker with an oracle for sensitive information.

For example, during the session key negotiation stage, which depends on confidential session key sharing, an SKD attacker can use a trusted compartment as a decryption oracle to obtain a secret component of a session key. Similarly, an impersonator may replay authentication data from another connection to an authentication oracle and pass authentication as a legitimate user. Clearly, we need techniques to mitigate oracles in these stages.

#### Entangle Output Strongly with Per-Session Known-Random Input

Network protocols often use randomness generated afresh for every session to defeat authentication replay attacks, where an attacker replays messages eavesdropped from a user session to reestablish the past session and repeat a user’s past requests. The server generates a random nonce incorporated into the session key (in the case of RSA key exchange) or a fresh private DH component (for DH key exchange) to make the session key different for every session. We can similarly employ this session randomness as a defense against oracles.

The output of a trusted compartment should not completely depend on untrusted input, so that an attacker cannot replay past input to the compartment and get the same deterministic result. Entangling the output of a privileged compartment with a trusted per-session random nonce solves this problem.

**Example:**
Figure 4 demonstrates an approach to preventing a signing oracle in a privilege-separated OpenSSH server. The trusted monitor, which implements signing with the private key, signs only session IDs that incorporate per-session random bits. A sequence of privileged operations ensures that the server’s private DH component is included in the session ID. This way, the output of the RSA signing operation is entangled with trusted, per-session, known-random input. The numbers within the trusted compartments in Figure 4 specify the order of their invocation, which should be enforced by the application.

With this oracle defense mechanism, the attacker cannot mount an impersonation attack, as every signed session ID will incorporate different randomness contributed by the server, making it invalid in the context of any other session. Similarly, to prevent deterministic session key oracles, we ensure that the compartment generating the keys includes randomness generated afresh for every session. Per-session randomness is also crucial in preventing signature verification oracles; the data for signature verification should also incorporate it.

**Principle 6:** To prevent oracles, entangle output strongly with per-session, known-random input.

#### Obfuscate Untrusted Input by Hashing

In RSA key exchange in the SSL/TLS protocol, the finished message is an encrypted hash. A trusted compartment can be structured to obtain data from an untrusted compartment, hash the data, and then encrypt the resulting hash. A privileged operation that hashes data and then encrypts is not useful for an attacker, as the attacker’s requests and exploits for the pre-authenticated and post-authenticated stages will be viewed as hashes.

For the decryption oracle, we do not return the cleartext finished message to untrusted code. Instead, our trusted compartment takes the verification data from an untrusted compartment and performs verification of the finished message itself. The result of this verification is returned to the untrusted compartment. However, this mechanism allows dictionary attacks, where an attacker can guess the cleartext message by supplying the verification data. Hashing the untrusted validation data before comparing it with the cleartext finished message solves this problem. This approach fits the protocol because the finished message happens to be a hash of all previous handshake messages. If an attacker attempts to guess the cleartext requests, his guess will be hashed first, then compared with the original message.

The hashing that we apply to prevent both oracles is already present in the SSL handshake. However, the handshake and our oracle mitigation technique use it for different reasons. The handshake requires the compression and collision-resistance of a hash function, but our technique employs the hash function because of its non-invertibility. The hash function provides all the mentioned properties and does double duty.

**Principle 7:** To prevent oracles, obfuscate untrusted input by hashing.

#### Last Resort: More Trusted Code

If a cryptographic protocol does not specify the use of a random nonce or a hash function at a point where there is a risk of an oracle, we offer a last resort technique. For an oracle to exist, the result of a privileged operation must return to an unprivileged compartment. It is possible to avoid the oracle by making the output privileged and restricting access to it in the unprivileged code.

Although this technique helps, it is not efficient, as a new trusted compartment is required to process the result, and you may need to process the result of the new compartment in the same way. Our last resort technique is to add more trusted code.

**Principle 8:** To prevent oracles, as a last resort, add more trusted code.

### Degrees of Sensitivity

Cryptographic protocols often operate on sensitive data of more than one class. One frequently occurring class of sensitive data is that which must be kept secret to ensure the secrecy and integrity of data transferred within a single session, such as the pre-master secret in RSA key exchange, the private DH component in DH key exchange, the session key, and the per-session ephemeral RSA private key. Disclosure of such sensitive data results in violation of the secrecy and/or integrity of sensitive data within a single session.

Another class of even more sensitive data must remain secret to preserve the secrecy of user data across many sessions. This class includes a server’s private key, users’ private keys, and passwords reused on many servers. The secrecy of such data is vital because an attacker can use it to gain access to user data in multiple sessions by impersonating the server or using users’ passwords to access many servers.

Mixing sensitive data of both classes and code to manipulate data of both classes in the same compartment incurs unwarranted risk. To mitigate this risk, distinct compartments should be created for data of differing degrees of sensitivity (and the code that manipulates it). Similarly, to prevent disclosure of one user’s data to another, separate compartments should manage sensitive session-related key data for each user.

**Principle 9:** A privilege-separated application should manage a session with two separate privileged compartments—one to operate with data related to the secrecy of the current session, and one to manage data that preserves the secrecy of many sessions.

Isolating code and data in distinct compartments according to their sensitivity often reduces the size of the trusted code base; the quantity of code with privilege with respect to one piece of data decreases.

### Hardened SSH Protocol Implementation

We now demonstrate these principles for preventing SKD and oracle attacks by finely privilege-separating the implementations of the client and server sides of the SSH protocol.

Recent privilege separation and Discretionary Information Flow Control (DIFC) work focuses on server applications, as they accept connections and can thus be attacked at will. However, the rise of web browser exploits demonstrates that client code is equally at risk. An attacker can set up a public service and provide access to it via SSH. By exploiting vulnerabilities in the SSH client implementation, the attacker can obtain users’ private keys, used to authenticate them to other legitimate SSH servers. These keys allow the attacker to obtain or tamper with the user’s sensitive information stored at these other SSH servers. Moreover, as the SKD attack is equally valid on both sides, server and client, protection against it is equally needed on both sides.

Throughout this paper, the baseline OpenSSH server design we refer to is that of Provos et al. [9]. While this OpenSSH server implements privilege separation, it allows unprivileged code access to the session key (contravening Principles 1 and 2) and to sign a session ID provided by unprivileged code (contravening Principle 6), and thus is vulnerable to SKD and oracle attacks. We show how to partition the server more finely to prevent these attacks. But first, we focus on the OpenSSH client, which to date has only existed in monolithic form and is thus also vulnerable to both attacks.

### Hardened OpenSSH Client

The OpenSSH client runs under the invoking user’s user and group IDs. Because changing the user ID to nobody and invoking the chroot system call require root privilege, they cannot be used here. Instead, we limit the privilege of the trusted and untrusted compartments of the OpenSSH client with SELinux policies [7], and the SELinux type enforcement mechanism in particular.

SELinux policies allow us to restrict untrusted processes from issuing unwanted system calls such as ptrace, open, connect, etc. Our prototype supports only password and public key authentication and does not yet implement advanced SSH functionality (tunneling, X11 forwarding, or support for authentication agents).

Our hardened OpenSSH client starts in the ssh_t domain, defined as a standard policy in the SELinux package for the original monolithic SSH client. This policy provides the union of all privileges required by all code in the SSH client; i.e., an application in the ssh_t domain may open SSH configuration files, access files in the /tmp directory, and connect to a server using a network socket. The session monitor cannot create or access any files apart from known hosts, nor may it create new sockets. The private key monitor runs in the ssh_pkey_t domain, a domain we have defined with a similarly tight policy, allowing it only to read the user’s private key(s), with no access to other files, nor privilege to create any sockets.

The private key monitor shares a UNIX socket with the session monitor and only accepts requests from the latter. After creating these two monitor processes, the original SSH client process drops privilege to the ssh_nobody_t domain. Untrusted code runs in this unprivileged process and domain during the rest of the SSH client’s execution. The ssh_nobody_t domain allows the unprivileged process to communicate with the session monitor and remote server via previously opened sockets, but prevents it from opening any new ones. The ssh_nobody_t domain further denies all access to the file system, allowing the unprivileged process access to the terminal device only.

The session monitor compartment isolates all sensitive data that can be used to compromise the current remote login session and performs all privileged operations with these data, enumerated in Figure 6, that are essential for key exchange and prevention of a private-key oracle. When a privileged operation takes non-sensitive data as input, the non-sensitive input is supplied by the unprivileged compartment. Symmetric keys (sym keys) are the keys derived from the session key for the MAC and encryption/decryption. The session monitor enforces the order in which an untrusted compartment may invoke its privileged operations.

The private key monitor isolates the client’s private key and performs signing operations with the key. Only the session monitor may invoke these signing operations in the private key monitor (over a UNIX-domain socket), and it provides the session ID to be signed as an argument. We give a more detailed explanation of the private key signing operation at the end of this section.

#### Session Key Negotiation Stage

We now consider the first stage of the hardened OpenSSH client, the session key negotiation (SKN) stage, designed to thwart SKD attacks (described in Section 3.1). In the SKN stage, an unprivileged compartment—with the help of the session monitor—performs Diffie-Hellman key exchange to negotiate a session key and authenticate the server. In accordance with Principle 1, we restrict the SKN stage to run in an unprivileged compartment that cannot access sensitive data—not the DH private key, nor the session key, nor the symmetric keys (as shown in Figure 6). Keeping the session key secret (and thus thwarting an SKD attack) requires in turn keeping this data secret.

We must also prevent a verification oracle attack against the client at this point in the handshake. Suppose the attacker wants to impersonate a server to the client, as shown in Figure 5. The architecture of the privilege-separated OpenSSH client is depicted, with shaded ovals denoting privileged compartments and unshaded ovals denoting unprivileged compartments. The last line in each oval denotes the SELinux policy enforced.

**Figure 5:** Architecture of privilege-separated OpenSSH client. Shaded ovals denote privileged compartments. Unshaded ovals denote unprivileged compartments. The last line in each oval denotes the SELinux policy enforced.

**Session Monitor:**
- Isolates sensitive data
- Performs privileged operations
- Enforces the order of operations

**Private Key Monitor:**
- Isolates the client’s private key
- Performs signing operations
- Communicates with the session monitor over a UNIX-domain socket

By implementing these principles, we can effectively prevent SKD and oracle attacks in the SSH protocol, ensuring the security and integrity of the communication.