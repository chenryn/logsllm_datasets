The body of a chord can be a task, a chain of tasks, or a group of tasks. In
all of these cases, as expected, the result of the chord's header is passed to
the body. However, if the body of a chord contains one or more chains, the
return value of the chord's header is suddenly gone!
## Example application: canvastest.py
    #!/usr/bin/env python
    from celery import Celery
    __all__ = ('app', 'ident')
    app = Celery('canvastest.py', backend='redis://')
    @app.task
    def i(x):
        return x
    if __name__ == '__main__':
        app.start()
## Start the worker
    $ ./canvastest.py worker
## What works
The body of a chord can be a task, a chain of tasks, or a group of tasks.
These all give the expected results:
    $ ./canvastest.py shell --python
    >>> chord([i.s(1), i.s(2)])(i.s()).get(timeout=5)
    [1, 2]
    >>> chord([i.s(1), i.s(2)])(i.s() | i.s()).get(timeout=5)
    [1, 2]
    >>> chord([i.s(1), i.s(2)])(group(i.s(), i.s())).get(timeout=5)
    [[1, 2], [1, 2]]
## What's broken
It breaks if the body of the chord is a group that contains one or more
chains. For some reason the result of the chord's header is lost.
    >>> chord([i.s(1), i.s(2)])(group(i.s() | i.s(), i.s())).get(timeout=5)
    ...
    TimeoutError: The operation timed out.
Here is the error message from the worker:
    [2017-07-25 22:16:31,904: ERROR/ForkPoolWorker-3] Chord callback for '769854f7-bda9-4fa4-a496-b0e03809c5fd' raised: TypeError('i() takes exactly 1 argument (0 given)',)
    Traceback (most recent call last):
      File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/celery/backends/redis.py", line 290, in on_chord_part_return
        callback.delay([unpack(tup, decode) for tup in resl])
      File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/celery/canvas.py", line 182, in delay
        return self.apply_async(partial_args, partial_kwargs)
      File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/celery/canvas.py", line 986, in apply_async
        args=args, kwargs=kwargs, **options))
      File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/celery/canvas.py", line 1062, in _apply_tasks
        **options)
      File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/celery/canvas.py", line 566, in apply_async
        dict(self.options, **options) if options else self.options))
      File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/celery/canvas.py", line 596, in run
        first_task.apply_async(**options)
      File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/celery/canvas.py", line 221, in apply_async
        return _apply(args, kwargs, **options)
      File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/celery/app/task.py", line 518, in apply_async
        check_arguments(*(args or ()), **(kwargs or {}))
    TypeError: i() takes exactly 1 argument (0 given)