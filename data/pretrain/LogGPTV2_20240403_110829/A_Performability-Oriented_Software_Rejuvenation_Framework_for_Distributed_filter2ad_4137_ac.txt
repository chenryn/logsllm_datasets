# Optimized Text

## SAN Model for the PDRT Scheme

To achieve a comprehensive model that allows for the evaluation of both the PDRT scheme and its variants, we have developed a flexible framework. By assigning specific values to parameters, such as setting \( N_{\text{min}} > n \) or \( c_d = 0 \), or both, the model can be adapted to represent different schemes. Specifically:
- Setting \( N_{\text{min}} > n \) reduces the model to a representation of the PD scheme.
- Setting \( c_d = 0 \) reduces it to a random-timer-only scheme.
- Setting both \( N_{\text{min}} > n \) and \( c_d = 0 \) reduces it to a baseline system.

Due to space constraints, further details on the model are omitted.

## Quantitative Results

Using the SAN performability model, we conducted a comparative study of the PD and PDRT schemes with the same parameter values used in the first study (Section 4.3). The measures were computed using the transient analytic solver at \( t = 10,000 \) hours. As shown in Figure 5(a), the PDRT scheme consistently yields higher values of \( P(Y = 3) \) and lower values of \( P(Y = 0) \) across the range of \( \beta \) considered, compared to the PD scheme.

We then repeated the study for \( c_d = 0.4 \), with results displayed in Figure 5(b). The curves in this figure demonstrate that the use of timer-triggered rejuvenation effectively compensates for the PD scheme's inadequate detection coverage, reducing the likelihood of the system being unable to deliver any services at time \( t \) (i.e., \( P(Y = 0) \)). This improvement is particularly significant when \( \beta \) exceeds 0.0001. However, the improvement in \( P(Y = 3) \) is less pronounced.

From Figure 5(b), we observe that the sum of \( P(Y = 3) \) and \( P(Y = 0) \) for PDRT is significantly less than 1 when \( \beta \) is greater than 0.0001. To further examine the system behavior under PDRT, we used the performability measure \( P(Y \geq 1) \). The numerical results are illustrated in Figures 6(a) and 6(b).

The data show that with PDRT, the system is virtually guaranteed to provide services at performance level 1 or higher if \( c_d = 0.95 \). In contrast, \( P(Y \geq 1) \) drops rapidly when \( \beta \) exceeds 0.0001 if the system is equipped only with PD or has no rejuvenation schemes. As shown in Figure 6(b), with \( c_d = 0.4 \), the improvement from the PD scheme relative to the baseline system becomes negligible as \( \beta \) approaches 0.01. However, the system's ability to perform at level one or higher remains robust with PDRT.

Tables 3(a) and 3(b) provide a detailed view of the system's ability to deliver services with gracefully degradable performance. Even with a high failure rate, a system with PDRT maintains the best ability to provide services. For instance, as shown in Table 3(b), even when \( \beta = 0.01 \) and \( c_d = 0.4 \), PDRT can still perform at level one with a probability greater than 80%, enabling it to perform at level one or higher with a probability greater than 90%.

## Optimal Rejuvenation Rates

Next, we evaluated the optimal rejuvenation rate (the reciprocal of the mean rejuvenation interval \( \phi \)) for the PDRT scheme. Figure 7(a) shows the results for the system's ability to deliver services at the highest performance level. The optimal rates are 0.001 and 0.003 (equivalent to mean rejuvenation intervals of 1,000 hours and 333 hours, respectively) for \( \beta = 10^{-5} \) and \( \beta = 5 \times 10^{-5} \), respectively.

We then examined the optimal rejuvenation rates for the system's ability to perform at level one or higher, as shown in Figure 7(b). The optimal rates are 0.0015 and 0.005 (equivalent to mean rejuvenation intervals of 666 hours and 200 hours, respectively). These rates are higher than those when \( P(Y = 3) \) is used as the objective function because \( P(Y \geq 1) \) represents a less strict criterion, allowing more frequent rejuvenation to minimize the likelihood of the system being in a state corresponding to performance level zero.

## Consistency Restoration Duration

Finally, as shown in Equation (6), consistency restoration duration is a non-linear increasing function of the update-request rate \( \lambda \). A small increase in \( \lambda \) can cause post-rejuvenation performance degradation to persist longer. This suggests that our algorithm can be enhanced by including a workload-adaptive mechanism that stops the timer (or decreases the rejuvenation rate) when the update-request rate exceeds a threshold, allowing software rejuvenation to be performed solely based on precursor detection in such situations. Our future work will include a case study to investigate the feasibility of this framework and the adaptive approach, based on a networked space data system for future planetary exploration missions.

## Concluding Remarks

We have developed a performability-oriented software rejuvenation framework for stateful distributed applications, an important but underexplored area. Our framework enables error-accumulation-prone distributed applications to continuously deliver gracefully degradable services. The emphasis of this paper is not just to present a superior rejuvenation approach but to explore the potential of software rejuvenation in stateful distributed applications and address the unique design considerations for this class of applications.

Our framework goes beyond previous efforts by focusing on an algorithmic approach to software rejuvenation in distributed computing environments. The set of performability metrics guiding our development and enhancement are directly defined on performance levels and evaluated using an unweighted reward rate, enabling explicit assessment of the system's ability to provide services with gracefully degradable performance.

In summary, this investigation is significant for two reasons:
1. It is the first contribution to the realization of software rejuvenation in stateful distributed systems, enabling these applications to deliver gracefully degradable services at the best possible performance level, even in highly failure-prone situations.
2. Our novel application of eventual consistency allows software rejuvenation in stateful distributed computing environments without causing service unavailability or sacrificing data consistency. This synergy between distributed and dependable computing techniques may facilitate the realization of other state-of-the-art dependability enhancement methods in stateful distributed systems.

## References

[1] Y. Huang, C. Kintala, N. Kolettis, and N. D. Fulton, “Software rejuvenation: Analysis, module and applications,” in Digest of the 25th Annual International Symposium on Fault-Tolerant Computing, (Pasadena, CA), pp. 381–390, June 1995.

[2] S. Garg, A. Puliafito, M. Telek, and K. S. Trivedi, “Analysis of preventive maintenance in transaction-based software systems,” IEEE Trans. Computers, vol. 47, pp. 96–107, Jan. 1998.

[3] A. T. Tai, L. Alkalai, and S. N. Chau, “On-board preventive maintenance: A design-oriented analytic study for long-life applications,” Performance Evaluation, vol. 35, pp. 215–232, June 1999.

[4] T. Dohi, K. Goseva-Popstojanova, and K. S. Trivedi, “Estimating software rejuvenation schedules in high assurance systems,” Computer Journal, vol. 44, no. 6, pp. 473–485, 2001.

[5] A. Bobbio, M. Sereno, and C. Anglano, “Fine-grained software degradation models for optimal rejuvenation policies,” Performance Evaluation, vol. 46, pp. 45–62, Sept. 2001.

[6] K. Vaidyanathan, R. E. Harper, S. W. Hunter, and K. S. Trivedi, “Analysis and implementation of software rejuvenation in cluster systems,” in Proceedings of SIGMETRICS 2001, (Cambridge, MA), pp. 62–71, June 2001.

[7] A. Valdes et al., “An architecture for an adaptive intrusion tolerant server,” in Proceedings of the Security Protocols Workshop, (Cambridge, UK), pp. 158–178, Apr. 2002.

[8] S. Krishnamurthy, W. H. Sanders, and M. Cukier, “An adaptive quality of service aware middleware for replicated services,” IEEE Trans. Parallel and Distributed Systems, vol. 14, pp. 1112–1125, Nov. 2003.

[9] W. H. Sanders, W. D. Obal II, M. A. Qureshi, and F. K. Widjanarko, “The UltraSAN modeling environment,” Performance Evaluation, vol. 24, no. 1, pp. 89–115, 1995.

[10] L. Kleinrock, Queueing Systems. Volume I: Theory. New York: John Wiley & Sons, 1975.

[11] J. Abate and W. Whitt, “Limits and approximations for the busy-period distribution in single-server queues,” Probability in the Engineering and Informational Sciences, vol. 9, pp. 581–602, 1995.

[12] S.-H. Sheu and W. S. Griffith, “Optimal age-replacement policy with age-dependent minimal-repair and random-leadtime,” IEEE Trans. Reliability, vol. 50, pp. 302–309, Sept. 2001.