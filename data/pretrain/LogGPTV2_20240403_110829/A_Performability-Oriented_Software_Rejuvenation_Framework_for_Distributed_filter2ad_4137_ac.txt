n2_inrj
n2_torj
n2_rejuv
n2_robust
n2_vuln
n2_age
n2_gorj
n2_det
n2_nrf
n2_crash
n2_fail
n2_down
n2_rpr
n2_rpok
n2_repair
n2_rpf
n2_update
n2_rec
n2_restore
Figure 4: SAN Model for the PDRT Scheme
To this end, we obtain a comprehensive model that al-
lows us to evaluate not only the PDRT scheme but also
its variants. More succinctly, by assigning a value to Nmin
such that Nmin > n, setting cd to zero, or both, the model
will be reduced to a representation of, respectively, the PD
scheme, the random-timer-only scheme, or the baseline sys-
tem. Due to space limitations, we omit further discussion of
the model.
5.3 Quantitative Results
Based on the SAN performability model, we carry out
a comparative study for the PD and PDRT schemes by
applying the same parameter values we used for the ﬁrst
study presented in Section 4.3. Again, the measures are
computed by the transient analytic solver at the time point
t = 10, 000 hours. As shown in Figure 5(a), through-
out the domain of β we consider, the use of PDRT always
yields a higher value of P (Y = 3) and a lower value of
P (Y = 0), relative to PD. We then repeat the study for the
case cd = 0.4, and the results are displayed in Figure 5(b).
The curves in Figure 5(b) demonstrate that use of timer-
triggered rejuvenation to compensate for the shortcoming of
PD, namely its inadequate detection coverage, is effective
in reducing the likelihood that the system will be unable to
deliver any services at t (i.e., P (Y = 0)). In particular, the
improvement is very impressive when β becomes greater
than 0.0001. On the other hand, the improvement reﬂected
by the results of P (Y = 3) is less signiﬁcant.
As we note from Figure 5(b) that the summation of
P (Y = 3) and P (Y = 0) for PDRT is appreciably less
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
)
3
,
0
(
∈
y
,
)
y
=
Y
(
P
PPD  (Y=0)
PPD  (Y=3)
PPDRT   (Y=0)
PPDRT   (Y=3)
0
1e-08 1e-07 1e-06 1e-05 0.0001 0.001
0.01
Replica Failure Rate β
(a) cd = 0.95
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
)
3
,
0
(
∈
y
,
)
y
=
Y
(
P
PPD  (Y=0)
PPD  (Y=3)
PPDRT   (Y=0)
PPDRT   (Y=3)
0
1e-08 1e-07 1e-06 1e-05 0.0001 0.001
0.01
Replica Failure Rate β
(b) cd = 0.4
Figure 5: Improvement from the Use of the PDRT Scheme
than 1 in the region where β is greater than 0.0001, we fur-
ther examine the system behavior under PDRT based on the
other form of performability measure, namely, P (Y ≥ 1).
The numerical results are illustrated in Figures 6(a) and
6(b). The data show that with PDRT the system is virtu-
ally guaranteed to provide services at performance level 1
or higher if cd = 0.95, while P (Y ≥ 1) drops rapidly when
β becomes larger than 0.0001 if the system is equipped only
with PD or has neither of the rejuvenation schemes.
Also, as shown in Figure 6(b), with cd = 0.4, the im-
provement from the use of the PD scheme relative to the
baseline system becomes increasingly negligible as β ap-
proaches 0.01. However, when equipped with PDRT, the
system’s ability to perform at level one or higher is robust.
Tables 3(a) and 3(b) provide us with a more detailed view
of how this ability is composed.
We can observe from the tables that even with a high fail-
ure rate, a system with PDRT has the best ability to provide
services with gracefully degradable performance. More-
over, while a high failure rate and a low detection coverage
together are very likely to prevent a system from performing
at the highest level, with PDRT the system will still be able
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
)
1
≥
Y
(
P
PBL  (Y ≥ 1)
PPD  (Y ≥ 1)
PPDRT   (Y ≥ 1)
0
1e-08 1e-07 1e-06 1e-05 0.0001 0.001
0.01
Replica Failure Rate β
(a) cd = 0.95
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
)
1
≥
Y
(
P
PBL  (Y ≥ 1)
PPD  (Y ≥ 1)
PPDRT   (Y ≥ 1)
0
1e-08 1e-07 1e-06 1e-05 0.0001 0.001
0.01
Replica Failure Rate β
(b) cd = 0.4
Figure 6: Gracefully Degradable Performance
Table 3: P (Y ≥ 1) and Its Composition (β = 0.01)
Scheme
BL
PD
PDRT
Scheme
BL
PD
PDRT
P (Y = 1)
P (Y = 2)
P (Y = 3)
2.13e-04
9.43e-02
1.69e-01
1.89e-09
4.73e-04
5.23e-03
(a) cd = 0.95
2.94e-06
2.39e-01
8.24e-01
P (Y = 1)
P (Y = 2)
P (Y = 3)
2.13e-04
3.26e-03
8.20e-01
1.89e-09
4.89e-07
4.98e-04
(b) cd = 0.4
2.94e-06
4.01e-04
8.96e-02
P (Y ≥ 1)
0.00022
0.33423
0.99796
P (Y ≥ 1)
0.00022
0.00366
0.90959
to perform at level one with a high probability. In particu-
lar, as shown in Table 3(b), even when β and cd are equal
to 0.01 and 0.4, respectively, PDRT will still be able to per-
form at level one with a probability greater than 80%. In
turn, this enables PDRT to perform at level one or higher
with a probability greater than 90% for that extreme case,
as shown in Table 3(b).
Next we conduct evaluation to study the optimal reju-
venation rate (i.e., the reciprocal of the mean rejuvenation
interval φ) for the PDRT scheme. Figure 7(a) shows the re-
sults of the optimal rate with respect to the system’s ability
to deliver services at the highest performance level. The
curves show that the optimal rates are 0.001 and 0.003
(equivalent to mean rejuvenation intervals of 1,000 hours
and 333 hours, respectively), for the cases in which β equals
10−5 and 5 × 10−5, respectively.
1
0.9
0.8
0.7
0.6
0.5
0.4
)
3
=
Y
(
P
β = 0.00001
β = 0.00005
0.3
1e-05
0.001
0.0001
0.01
Replica Rejuvenation Rate γ
(a) P (Y = 3) as the objective function
0.1
1
0.99
0.98
0.97
0.96
0.95
0.94
0.93
)
1
≥
Y
(
P
β = 0.00001
β = 0.00005
0.92
1e-05
0.001
0.0001
0.01
Replica Rejuvenation Rate γ
(b) P (Y ≥ 1) as the objective function
Figure 7: Optimal Rejuvenation Rates
0.1
We then examine the optimal rejuvenation rates with
respect to the system’s ability to perform at level one or
higher. The results are shown in Figure 7(b), from which
we can observe that the optimal rejuvenation rates become
0.0015 and 0.005 (equivalent to mean rejuvenation inter-
vals of 666 hours and 200 hours, respectively). Note that
the optimal rates are higher than those when P (Y = 3) is
used as the objective function. The reason is that the objec-
tive function P (Y ≥ 1) represents a less strict criterion that
permits the system to undergo rejuvenation more frequently
to minimize the likelihood that the system will be in a state
corresponding to performance level zero.
Finally, as shown in Eq. (6), consistency restoration du-
ration is a non-linear increasing function of update-request
rate λ, which means that a small increase of λ may cause the
post-rejuvenation performance degradation to linger much
longer. In turn, this suggests that our algorithm can be en-
hanced by inclusion of a workload-adaptive mechanism that
will stop the timer (or decrease the rejuvenation rate) when
the update-request rate exceeds a threshold, so that soft-
ware rejuvenation can be performed solely on the precursor-
detection basis in that situation. Accordingly, our plan for
subsequent work includes a case study that will investigate
the feasibility of the framework and the adaptive approach
explained above, based on a networked space data system
for future planetary exploration missions.
6 Concluding Remarks
We have developed a performability-oriented software
rejuvenation framework for stateful distributed applica-
tions, which is an important area, but one that has not
yet been explored for the utility of software rejuvena-
tion. We demonstrate that our framework enables error-
accumulation-prone distributed applications to continu-
ously deliver services that are gracefully degradable.
As noted earlier, the intent of this paper is not just to
show a speciﬁc approach to software rejuvenation that is su-
perior to other rejuvenation schemes or policies. Rather, the
emphasis of the paper is on exploring the possibility of us-
ing software rejuvenation in stateful distributed applications
and on addressing the design considerations that are neces-
sary for and unique to this important class of distributed ap-
plications. Accordingly, while our effort is greatly inspired
by prior research work on software rejuvenation, we go one
step further toward generalizing and enriching its concepts,
methods, application domain, and design space.
Furthermore, in contrast to the previous efforts in which
mathematical modeling was usually the focus, the major
building block of our framework is an algorithmic approach
to the realization of software rejuvenation in distributed
computing environments. In addition, the set of performa-
bility metrics that have guided our framework development
and enhancement are directly deﬁned on performance lev-
els and evaluated using an unweighted reward rate, which
enables explicit assessment of a system’s ability to provide
services with gracefully degradable performance.
In summary,
the signiﬁcance of this investigation is
twofold. First, our framework is the ﬁrst contribution to the
realization of software rejuvenation in stateful distributed
systems, and can be utilized to enable distributed applica-
tions to deliver gracefully degradable services at the best
possible performance level, even in situations in which the
system is highly vulnerable to failures. Second, our novel
application of the concept of eventual consistency allows
software rejuvenation to be carried out in stateful distributed
computing environments without causing service unavail-
ability or sacriﬁcing data consistency. Indeed, we have ex-
ploited a particular synergy between the techniques for dis-
tributed computing and dependable computing, which may
enable or facilitate the realization (in stateful distributed
systems) of other state-of-the-art dependability enhance-
ment methods that require occasional or periodical brief
stopping of one or more server replicas, such as secure re-
boot, recovery-oriented computing, self-healing algorithms,
and beyond.
References
[1] Y. Huang, C. Kintala, N. Kolettis, and N. D. Fulton, “Soft-
ware rejuvenation: Analysis, module and applications,” in
Digest of the 25th Annual International Symposium on Fault-
Tolerant Computing, (Pasadena, CA), pp. 381–390, June
1995.
[2] S. Garg, A. Puliaﬁto, M. Telek, and K. S. Trivedi, “Analy-
sis of preventive maintenance in transaction based software
systems,” IEEE Trans. Computers, vol. 47, pp. 96–107, Jan.
1998.
[3] A. T. Tai, L. Alkalai, and S. N. Chau, “On-board preven-
tive maintenance: A design-oriented analytic study for long-
life applications,” Performance Evaluation, vol. 35, pp. 215–
232, June 1999.
[4] T. Dohi, K. Goseva-Popstojanova, and K. S. Trivedi, “Es-
timating software rejuvenation schedules in high assurance
systems,” Computer Journal, vol. 44, no. 6, pp. 473–485,
2001.
[5] A. Bobbio, M. Sereno, and C. Anglano, “Fine grained soft-
ware degradation models for optimal rejuvenation policies,”
Performance Evaluation, vol. 46, pp. 45–62, Sept. 2001.
[6] K. Vaidyanathan, R. E. Harper, S. W. Hunter, and K. S.
Trivedi, “Analysis and implementation of software rejuve-
nation in cluster systems,” in Proceedings of SIGMETRICS
2001, (Cambridge, MA), pp. 62–71, June 2001.
[7] A. Valdes et al., “An architecture for an adaptive intrusion
tolerant server,” in Proceedings of the Security Protocols
Workshop, (Cambridge, UK), pp. 158–178, Apr. 2002.
[8] S. Krishnamurthy, W. H. Sanders, and M. Cukier, “An
adaptive quality of service aware middleware for replicated
services,” IEEE Trans. Parallel and Distributed Systems,
vol. 14, pp. 1112–1125, Nov. 2003.
[9] W. H. Sanders, W. D. Obal II, M. A. Qureshi, and F. K.
Widjanarko, “The UltraSAN modeling environment,” Perfor-
mance Evaluation, vol. 24, no. 1, pp. 89–115, 1995.
[10] L. Kleinrock, Queueing Systems. Volume I: Theory. New
York: John Wiley & Sons, 1975.
[11] J. Abate and W. Whitt, “Limits and approximations for the
busy-period distribution in single-server queues,” Probabil-
ity in the Engineering and Informational Sciences, vol. 9,
pp. 581–602, 1995.
[12] S.-H. Sheu and W. S. Grifﬁth, “Optimal age-replacement
policy with age-dependent minimal-repair and random-
leadtime,” IEEE Trans. Reliability, vol. 50, pp. 302–309,
Sept. 2001.