PostgreSQL plan cache management
 5次调用id=1的查询后, 生成generic plan=seq scan, 并且num custom plan=5, total custom plan= 42948.07 * 5 ; avg custom plan = 42948.07
 后续将持续使用generic plan, 的原因:
 id=2的generic plan cost  Seq Scan on test (cost=0.00..37948.05 rows=1 width=0)
 Filter: (id = 2)
 (3 rows)
 显然id=2的generic plan cost(37948.06)  Seq Scan on test (cost=0.00..37948.05 rows=2000004 width=0)
 Filter: (id = 1)
 (3 rows)
PostgreSQL plan cache management
 如果要跟踪整个cacheplan.c 的函数调用, 使用通配符*
 stap -D MAXSTRINGLEN=99999 -e '
 probe process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__start") {
 println(pn(), user_string($arg1), pid())
 }
 probe process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__parse__start") {
 println(pn(), user_string($arg1), pid())
 }
 probe process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__rewrite__start") {
 println(pn(), user_string($arg1), pid())
 }
 probe process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__plan__start") {
 println(pn(), pid())
 }
 probe process("/home/pg93/pgsql9.3.3/bin/postgres").mark("query__execute__start") {
 println(pn(), pid())
 }
 probe process("/home/pg93/pgsql9.3.3/bin/postgres").function("*@/opt/soft_bak/postgresql-9.3.3/src/backend/utils/cache/plancache.c") {
 printf("%s called\n %s\n", pp(), $$vars$$)
 }
 '
PostgreSQL trace和debug
 跟踪的目的
 消息等级分类
 消息内容开关
 消息输出到何处
 消息输出等级配置(过滤)
 例子
PostgreSQL trace和debug
 trace和debug的目的
 从数据库中得到更多的信息,
 跟踪定位问题.
 PostgreSQL 对信息等级的分类例子
 src/include/utils/elog.h
 /* Error level codes */
 #define DEBUG5 10 /* Debugging messages, in categories of
 * decreasing detail. */
 #define DEBUG4 11
 #define DEBUG3 12
 #define DEBUG2 13
 #define DEBUG1 14 /* used by GUC debug_* variables */
 #define LOG 15 /* Server operational messages; sent only to
 * server log by default. */
 #define COMMERROR 16 /* Client communication problems; same as LOG
 * for server reporting, but never sent to
 * client. */
 #define INFO 17 /* Messages specifically requested by user (eg
 * VACUUM VERBOSE output); always sent to
 * client regardless of client_min_messages,
PostgreSQL trace和debug
 * but by default not sent to server log. */
 #define NOTICE 18 /* Helpful messages to users about query
 * operation; sent to client and server log by
 * default. */
 #define WARNING 19 /* Warnings. NOTICE is for expected messages
 * like implicit sequence creation by SERIAL.
 * WARNING is for unexpected messages. */
 #define ERROR 20 /* user error -abort transaction; return to
 * known state */
 #ifdef WIN32
 #define PGERROR 20
 #endif
 #define FATAL 21 /* fatal error -abort process */
 #define PANIC 22 /* take down the other backends with me */
PostgreSQL trace和debug
 PostgreSQL 如何输出消息, (elog, ereport)
 #ifdef HAVE__BUILTIN_CONSTANT_P
 #define elog(elevel, ...) \
 do { \
 elog_start(__FILE__, __LINE__, PG_FUNCNAME_MACRO); \
 elog_finish(elevel, __VA_ARGS__); \
 if (__builtin_constant_p(elevel) && (elevel) >= ERROR) \
 pg_unreachable(); \
 } while(0)
 #else /* !HAVE__BUILTIN_CONSTANT_P */
 #define elog(elevel, ...) \
 do { \
 int elevel_; \
 elog_start(__FILE__, __LINE__, PG_FUNCNAME_MACRO); \
 elevel_ = (elevel); \
 elog_finish(elevel_, __VA_ARGS__); \
 if (elevel_ >= ERROR) \
 pg_unreachable(); \
 } while(0)
 #endif /* HAVE__BUILTIN_CONSTANT_P */
 #define ereport(elevel, rest) \
 ereport_domain(elevel, TEXTDOMAIN, rest)
PostgreSQL trace和debug
 PostgreSQL 定义的消息开关举例, 记录客户端的连接信息的开关
 src/backend/postmaster/postmaster.c
 if (Log_connections) // 对应参数, postgresql.conf. log_connections
 {
 if (remote_port[0])
 ereport(LOG,
 (errmsg("connection received: host=%s port=%s",
 remote_host,
 remote_port)));
 else
 ereport(LOG,
 (errmsg("connection received: host=%s",
 remote_host)));
 }
PostgreSQL trace和debug
 PostgreSQL 的消息开关1 - 参数开关(通过postgresql.conf配置)
 application_name (string) 输出客户端指定的应用名
 debug_print_parse (boolean) 输出parse阶段的信息
 debug_print_rewritten (boolean) 输出rewritten阶段的信息
 debug_print_plan (boolean) 输出执行计划信息
 debug_pretty_print (boolean) 以比较易读的方式输出以上三个参数的信息
 log_checkpoints (boolean) 输出检查点信息
 log_connections (boolean) 输出连接信息
 log_disconnections (boolean) 输出断开连接信息
 log_duration (boolean) 输出SQL语句执行时间信息
 log_error_verbosity (enum) 输出详细级别, 例如函数以及代码文件名
 log_hostname (boolean) 主机名
 log_line_prefix (string) 输出位置为标准输出或者系统日志时, 指定输出格式
 log_lock_waits (boolean) 输出锁等待
 log_statement (enum) 按过滤条件输出SQL语句, 例如ddl, mod, all
 log_temp_files (integer) 按过滤条件输出临时文件相关信息
 log_timezone (string) 指定时区
PostgreSQL trace和debug
 PostgreSQL 的消息开关1 - 参数开关(通过postgresql.conf配置)
 #track_activities = on # 跟踪SQL语句的状态以及SQL语句的内容. 输出到pg_stat_activity
 #track_counts = on # 计数器, 例如表被插入了多少次, 更新了多少次
 #track_io_timing = off # 跟踪IO操作的时间, 例如一个SQL语句带来的IO时间是多少.
 #track_functions = none # none, pl, all # 跟踪函数的调用次数, 时间.
 track_activity_query_size = 4096 # (change requires restart) # 输出SQL语句的最大长度, 超出截断
 #update_process_title = on # 更新进程状态信息, 例如从select到idle, 显示进程当前的状态.
 #stats_temp_directory = 'pg_stat_tmp'
 # - Statistics Monitoring - getrusage()
 #log_parser_stats = off
 #log_planner_stats = off
 #log_executor_stats = off
 #log_statement_stats = off
PostgreSQL trace和debug
 PostgreSQL 的消息开关1 - 参数开关(通过postgresql.conf配置)
 以下为隐含参数, 需要配合宏的定义使用.
 debug_assertions 需要开启宏USE_ASSERT_CHECKING
 trace_locks , trace_lwlocks , trace_userlocks , trace_lock_oidmin , trace_lock_table , debug_deadlocks 需要开启宏
LOCK_DEBUG
 log_btree_build_stats 需要开启宏BTREE_BUILD_STATS (getrusage())
 wal_debug 需要开启宏WAL_DEBUG.
PostgreSQL trace和debug
 PostgreSQL 的消息开关2 - 宏开关(通过Makefile.custom, pg_config_manual.h,等配置文件进行配置)
 需要在编译PostgreSQL软件时完成
 src/include/pg_config_manual.h
 /*
 * Define this to force all parse and plan trees to be passed through
 * copyObject(), to facilitate catching errors and omissions in
 * copyObject().
 */
 /* #define COPY_PARSE_PLAN_TREES */
 /*
 * Enable debugging print statements for lock-related operations.
 */
 /* #define LOCK_DEBUG */
 /*
 * Enable debugging print statements for WAL-related operations; see
 * also the wal_debug GUC var.
 */
 /* #define WAL_DEBUG */
PostgreSQL trace和debug
 PostgreSQL 的消息开关2 - 宏开关(通过Makefile.custom, pg_config_manual.h,等配置文件进行配置)
 /*
 * Enable tracing of resource consumption during sort operations;
 * see also the trace_sort GUC var. For 8.1 this is enabled by default.
 */
 #define TRACE_SORT 1
 /*
 * Enable tracing of syncscan operations (see also the trace_syncscan GUC var).
 */
 /* #define TRACE_SYNCSCAN */
 /*
 * Other debug #defines (documentation, anyone?)
 */
 /* #define HEAPDEBUGALL */
 /* #define ACLDEBUG */
 /* #define RTDEBUG */
PostgreSQL trace和debug
 PostgreSQL 的消息开关2 - 宏开关(通过Makefile.custom, pg_config_manual.h, 等配置文件进行配置)
 只有定义了对应的宏才能开启这些跟踪的输出.
 src/backend/optimizer/path/allpaths.c
 #ifdef OPTIMIZER_DEBUG
 debug_print_rel(root, rel);
 #endif
 src/backend/optimizer/geqo/geqo_main.c
 #ifdef GEQO_DEBUG
 elog(DEBUG1, "GEQO best is %.2f after %d generations",
 pool->data[0].worth, number_generations);
 #endif
 src/backend/regex/regcomp.c
 #ifdef REG_DEBUG
 if (debug != NULL)
 {
 fprintf(debug, "\n\n\n========= TREE FIXED ==========\n");
 dumpst(v->tree, debug, 1);
 }
 #endif
PostgreSQL trace和debug
 PostgreSQL 的消息开关2 - 宏开关(通过Makefile.custom, pg_config_manual.h, 等配置文件进行配置)
 src/backend/utils/adt/acl.c
 #ifdef ACLDEBUG
 elog(LOG, "aclparse: input = \"%s\"", s);
 #endif
 src/backend/utils/adt/arrayfuncs.c
 #ifdef ARRAYDEBUG
 printf("array_in- ndim %d (", ndim);
 for (i = 0; i < ndim; i++)
 {
 printf(" %d", dim[i]);
 };