e
r
i
w
n
o
s
/
B
k
(
600
500
400
300
200
100
0
100
150
200
250
300
350
400
450 100
150
200
250
300
350
400
450 100
150
200
250
300
350
400
450
Round-trip latency (ms)
Figure 6: Overhead and resilience of StegoTorus’ HTTP steganography module, compared to Tor alone and to StegoTorus in chopper-only operation.
Each data point shows median bandwidth consumption over a 20-second interval while transferring a continuous, ﬁxed-rate stream of traﬃc over a
5.6 Mbps DSL link with adjustable latency. Whiskers indicate the inter-hinge distance [49]. Tor and chopper-only StegoTorus do not suﬀer from latencies
up to at least 450 ms. The present HTTP module is much more sensitive to latency, and cannot keep up with high-bandwidth streams at higher latencies.
the adversary’s odds all the way to chance, but it reduces them far
enough to make the attack impractical.
A determined adversary might train additional classiﬁers on visits
to sites of interest over StegoTorus. However, these classiﬁers will
be dependent on the covertext database that the adversary used
for training, so StegoTorus users who generate their own covertext
databases will be protected from this tactic.
6. PERFORMANCE
All performance tests were conducted using a desktop PC in Cali-
fornia with a DSL link to the Internet (5.6 Mbit/s down, 0.7 Mbit/s
up) as the client, and a virtual host in a commercial data center
in New Jersey as the server. During testing, the DSL link was
otherwise idle, and round-trip latency between the two machines
was 85 ms. To ensure that our results reﬂect the performance of
StegoTorus itself rather than factors beyond our control (such as
the instantaneous load on the global Tor network), we conﬁgured a
private Tor network entirely within the server host, and sourced all
of the test ﬁles and streams from an HTTP server also running on
that host.
Steganographic Expansion: We performed a series of downloads
of 1,000,000-byte ﬁles and measured the amount of data actually
transferred over the network by a direct HTTP connection, Tor,
StegoTorus using the chopper alone, and StegoTorus with the HTTP
module. The results are shown in Table 3. Tor itself has a small
amount of overhead, and the chopper imposes a little bit more, but
HTTP steganography is very expensive by comparison, increasing
the amount of data sent upstream by a factor of 41, and downstream
by 12. While we have not spent much time on optimizing our
encoding, an expansion factor of at least eight (one byte per bit) is
typical for modern steganography schemes [10], so we suspect that
HTTP steganography cannot be made that much more eﬃcient in
the downstream direction.
Goodput: Expanding on the previous experiment, we conducted
more downloads of ﬁles of various sizes, measured the time required,
and computed the mean goodput (that is, application-layer through-
put) achieved in the same conﬁgurations described earlier; the results
are shown in Figure 7. We see that the goodput of the chopper-only
conﬁguration is comparable to Tor, and that StegoTorus-HTTP is
only able to achieve goodput of roughly 27 kB/s, which is still about
4 times better than a 56 kbit/s modem. Consistent with this, we have
been able to use StegoTorus-HTTP as-is for casual Web browsing;
subjectively speaking, it is noticeably slower than a direct broadband
Direct
Tor
StegoTorus (chopper)
StegoTorus (HTTP)
To server
bytes
×
23,643
61,162
63,061
1
2.6
2.7
From server
bytes
1,014,401
1,075,715
1,084,228
×
1
1.1
1.1
966,964 41
11,814,610 12
Table 3: Mean number of bytes transferred in each direction in or-
der to download a 1,000,000-byte ﬁle directly, over Tor, and over
StegoTorus with and without HTTP steganography. The ﬁle was
downloaded 32 times for each test.
)
s
/
B
k
(
t
u
p
d
o
o
G
600
500
400
300
200
100
0
Tor
StegoTorus (chopper)
StegoTorus (HTTP)
100
200
300
400
500
600
700
800
900
1000
File size (kB)
Figure 7: Mean StegoTorus (ST) and Tor goodput for 100 kB to 1 MB
ﬁle transfers.
connection, but not so slow that waiting for page loads becomes
tedious.
Resilience: Since StegoTorus may be used in locations with poor
connectivity, we also investigated its performance as a function of
network latency. We used Linux’s netem mechanism [34] to vary
the round-trip latency to the StegoTorus server from 100 to 450 ms.
For comparison, packets from California take approximately 85 ms
to reach New Jersey, 120 to 180 ms to reach East Asia or Australia,
and 300 to 350 ms to reach India or Africa.
We conﬁgured the server to generate continuous streams of data
at three diﬀerent rates, thus measuring steady-state behavior, and
recorded the median bandwidth consumption over a period of 20
seconds at each latency setting. The results are shown in Figure 6.
Ideal behavior would be for each line to be perfectly horizontal, and
as close to the “Tor” line as possible.
Both Tor and StegoTorus in chopper-only mode are robust up to
450 ms of delay, suﬀering no measurable performance degradation.
117The HTTP module, however, can keep up with a 50 kB/s data stream
only at latencies below 200 ms. Allowing HTTP to use more parallel
connections increases throughput at low latencies, but does not help
it keep up at high latencies. We suspect this is because each chopper
block, which typically will only contain one or two Tor cells, takes a
full HTTP request-response pair to transfer to the peer. Thus we are
only transferring one or two Tor cells per round-trip cycle, despite
consuming far more bandwidth. However, we believe that the HTTP
module can be improved to handle high latency at least somewhat
better, and plan to make this a priority for future work.
7. RELATED WORK
Here we summarize related research in the areas of blocking
resistance and encrypted traﬃc analysis.
Address Filtering Resistance: The oldest technique for evading ad-
dress ﬁlters is the use of open proxy servers, such as DynaWeb [26]
and Ultrasurf [65]. However, with these services, users have to
rely on the proxy administrator not to betray their browsing habits.
Proxies also have publicly advertised and relatively stable IP ad-
dresses, so it is easy to block them in an address ﬁlter. While Tor
relays come and go frequently, Tor’s directory service is public, and
there is nothing to stop a perimeter ﬁlter from blocking every entry
point it lists. The obvious solution is to have many proxies whose
addresses are not published; users have to ﬁnd out about them via
covert means. Köpsell and Hillig proposed these covert proxies in
2004 as an add-on to their AN.ON service [41]. The Tor Project calls
them “bridge relays” and has deployed them extensively [19, 23].
Browser-hosted proxies [29] aim to make so many proxies avail-
able that it would be hopeless for a censor to block them all; there
is still a global directory, but it is piggybacked on a cloud-storage
service that is so widely used that the censor will hesitate to block it.
Telex [72], Decoy Routing [40], and Cirripede [38] take a diﬀerent
approach to address-ﬁltering resistance: TCP streams are covertly
“tagged” to request that a router somewhere on the path to the overt
destination divert the traﬃc to a covert alternate destination. Telex
and Decoy Routing place the tag in the TLS handshake, whereas
Cirripede uses the initial sequence numbers of several TCP connec-
tions. All three rely on the impenetrability of TLS to prevent the
censor from making its own connections to the overt destination
and comparing what it gets with the observed traﬃc, and may be
vulnerable to large-scale traﬃc analysis as Tor is.
Pattern and Statistical Filtering Resistance: Infranet [27], like
StegoTorus, conceals traﬃc that would otherwise be blocked within
seemingly normal HTTP traﬃc.
It works as a direct proxy for
the browser, and does not provide Tor’s anonymity guarantees; on
the other hand, it can take advantage of its access to unencrypted
network requests to reduce its bandwidth requirements. Dust [71]
attempts to deﬁne a cryptosystem whose output is wholly indis-
tinguishable from randomness; it is not a complete circumvention
system by itself (but is under active development as a pluggable
transport for Tor) and could theoretically be blocked by looking for
the absence of any cleartext. SkypeMorph is a pluggable transport
for Tor that makes Tor packet shape resemble Skype [51]. It is
conceptually similar to our embed module, but lacks our generic
chopper-reassembler and crypto framework. NetCamo [32] is an
algorithm for scheduling transmissions to prevent traﬃc analysis; it
is complementary to any of the above, and could also be deployed
within existing relay servers to enhance their resistance to global
adversaries. Collage [11] is a scheme for steganographically hiding
messages within postings on sites that host user-generated content,
such as photos, music, and videos. The sheer number of these sites,
their widespread legitimate use, and the variety of types of content
that can be posted make it impractical for the censor to block all
such messages. However, it is suitable only for small messages that
do not need to be delivered quickly, and it may be vulnerable to
steganographic stripping [30].
Encrypted Traﬃc Analysis: There have been a number of studies
on analyzing encrypted traﬃc to classify the application type [4] or
the web site being visited in an encrypted HTTP stream [8, 36, 64].
These attacks usually extract some set of features based on the
packet sizes, timings, and directions (essentially all of the available
information when encryption is used) and use machine learning
techniques to do the classiﬁcation. Recently, some similar traﬃc
analysis work has been done for clients who are using Tor. This
naturally makes the task more diﬃcult because Tor introduces two
defenses [24]: combining all network traﬃc into one TCP stream to
the ﬁrst Tor router, and padding each packet to a ﬁxed size (or a small
set of sizes). Herrmann et al. [35] use a multinomial naïve Bayes
classiﬁer on the histogram of packet sizes and directions successfully
against VPN technologies and OpenSSH, but they achieve under
3% accuracy against Tor while classifying on a set of 775 web
sites. The work of Panchenko et al. [57], however, demonstrates
that these defenses are not enough. Using support vector machines
and a carefully selected feature set, they were able to achieve over
50% accuracy on the same classiﬁcation task. This prompted the
developers of Tor to introduce an ad hoc defense in the form of
randomized pipelining [58] to defeat this type of classiﬁer. Last,
Wang et al. [67] present a potential application-level attack that
involves serving malicious content and then observing a distinctive
traﬃc pattern; although relevant, we are more interested in passive
attacks that could be carried out on a large scale.
8. CONCLUSION
We described StegoTorus, a new system for improving Tor’s ro-
bustness against automated protocol analysis. StegoTorus interposes
on communications between the Tor client and the ﬁrst Tor relay,
implements a custom encryption protocol and provides a suite of
steganography modules that make Tor resilient to ﬁngerprinting
attacks. Our statistical evaluations demonstrate that StegoTorus
makes Tor traﬃc more resilient to site ﬁngerprinting attacks and
and that it resembles HTTP in the dimensions of connection length,
payload size and bandwidth use. Our performance measurements
indicate that our prototype system, in its HTTP steganography mode,
delivers throughput of roughly 30 kB/s, which is about four times
that of a 56 kbit/s modem.
Future Work: There is much room for further research on expand-
ing and strengthening our suite of steganography modules. Beyond
steganography modules we plan to explore opportunities for perfor-
mance improvements and add support for redundant coding among
steganography modules.
9. ACKNOWLEDGMENTS
We appreciate helpful comments during system and paper devel-
opment from Arjun Athreya, Brian Caswell, Drew Dean, Bruce De-
Bruhl, Roger Dingledine, Pamela Griﬃth, David-Sarah Hopwood,
George Kadianakis, Eric Kline, Patrick Lincoln, Nick Mathewson,
Phil Porras, Steve Schwab, William Allen Simpson, Paul Vixie, and
Mike Walker. Paul Hick and kc claﬀy at CAIDA [14] provided
access to anonymized backbone traces. Data analysis was done in
R [61] with the “ggplot2” plotting add-on [69].