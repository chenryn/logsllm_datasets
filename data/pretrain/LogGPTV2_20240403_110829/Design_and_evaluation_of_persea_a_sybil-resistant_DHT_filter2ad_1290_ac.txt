hash of its ID to get a target ID and publishes the certiﬁcate to
the Persea DHT, using replication (see §4.3). When node P con-
tacts node Q in the DHT, it validates Q’s ID as follows. First, it
uses the DHT to ﬁnd Q’s certiﬁcate, which is signed by Q’s parent
Q1. Q1’s certiﬁcate is also obtained from the DHT, and the public
key it contains is used to verify Q’s certiﬁcate. Each replica that
stores Q’s certiﬁcate will also look up Q1’s certiﬁcate in the DHT
to prevent an attacker from storing fake certiﬁcates. Note that Q1’s
certiﬁcates have already been veriﬁed, and so on logically up to
the bootstrap node. The bootstrap node certiﬁcates themselves can
be distributed along with the P2P software or during the invitation
process.
Note that the Persea lookup for Q1’s certiﬁcate obtains all R
replicas.
If there are any discrepancies between the replicas, P
can continue to look up additional ancestors in the bootstrap tree
up to the bootstrap node itself, if necessary. This provides re-
silience in the face of content poisoning attacks. If such attacks
are widespread as an annoyance, the lookups for ancestors can be
made probabilistic to avoid excessive overhead while still ensuring
that fraudulent ID claims are detected quickly.
By placing certiﬁcates in the DHT, we avoid relying too much on
the bootstrap nodes. When the system is ﬁrst deployed, the boot-
strap nodes are highly trusted as being in charge of large chunks of
the ID space. After a number of peers have joined, however, much
of the ID space is allocated. If a bootstrap or other node is com-
promised, it may attempt to issue certiﬁcates for malicious peers in
space that has already been allocated. To prevent this, we propose
the following mechanism: Nodes who store a certiﬁcate for a peer
will not allow this certiﬁcate to be replaced by another node’s in-
formation. We expect that this rule can be made more ﬂexible by
establishing consensus that a node has left the system or should be
expelled, but protocols for doing so are beyond the scope of this
paper.
4.3 Replication Mechanism
In this section, we describe our replication mechanism, which is
the key difference between the Persea DHT layer and Kademlia.
As with other DHTs, we calculate the key for a given (key, value)
pair by taking the consistent hash (e.g. SHA-1) of a search key,
such as a ﬁle name. The node with the closest ID to the key in
terms of the XOR of the key and the ID, interpreted as an integer, is
deemed to be the owner of the key and should store the (key, value)
pair. A lookup for the key should return this owner.
In Persea,
we replicate each (key, value) pair over R owners that are evenly
x: A sub-chunk with label: x, which is not distributed yety: A sub-chunk with label: y, which is already distributedV : Ordering of sub-chunks in the vanilla approach 91013141516171819121234567V:123457B:B : Ordering of sub-chunks in the balanced approach 11601456783291012131415161718191101345678279Table 2: Topologies [MT: mixing time]
Network
Abbrv.
Nodes
Edges
MT
advogato
hamsterster
youtube
ca-AstroPh
ﬂickr
catster
adv
ham
ytub
astro
ﬂic
cat
6551
2426
51332
16631
15088
5574249
18772
396160
2.3
3.0
3.0
8.0
80513
5899882
11.5
149700
5449275
8.0
spaced over the circular ID space. Thus, even if a region is occu-
pied by the malicious peers, the redundant lookup operations can
retrieve the desired (key, value) pair from owners in other regions
of the network.
More speciﬁcally, when the initiator intends to store or retrieve
a (key, value) pair in Persea, it calculates the ID of the target nodes
as follows. Assume a b-bit ID space, such that nmax = 2b. We
virtually divide the ID space into R regions where each region
R (cid:99) IDs,
(except the last one) accommodates at most D = (cid:98) nmax
and the last region has nmax − D × (R − 1) IDs. The interval
[D× r, D× (r + 1)− 1] for 0 ≤ r < R− 1 represents the IDs that
are in the rth region; the last region spans [D×(R−1), nmax−1].
A node ID i is replicated to each other region by taking (i + D× r)
mod n for 1 ≤ r < R.
4.4 Routing Table Organization and Lookup
Our routing table organization and lookup mechanism follow
closely to the model of Kademlia [17], though we note that other
models could be followed. Here, we brieﬂy describe the mecha-
nisms for completeness.
Routing table organization.
In the DHT layer, each node main-
tains a routing table consisting of b node lists for a b-bit ID space.
Each list, or k-bucket, contains up to k entries, each of which con-
tains the IP address, port, ID, and public key of another node. The
ID of a node in the bth k-bucket of a node with ID i should share
the ﬁrst b − 1 bits of i and have a different bth bit from i.
Lookup mechanism. To initiate a lookup(key) request, the query-
ing node contacts the α nodes in its k-buckets that are the closest
ones to the desired key. Each of the α nodes sends the initiator β
IDs from its k-bucket closest to the target node. If any of the β
nodes is found not alive, the next closest node to the desired key,
which is alive, is returned to the initiator. From the set of returned
IDs, the initiator selects α nodes for the next iteration. This process
is iterated until the target is found or no nodes are returned that are
closer than the previous best results.
In Persea, the initiator performs R such independent parallel
lookup operations and calculates the ID of the target nodes ac-
cording to the mechanism described in §4.3. When an owner is
found from any of R independent lookups, the initiator sends the
owner a message for either the store (put(key, value)) or retrieval
(get(key)) operation.
5. SECURITY ANALYSIS
In this section, we examine the possible avenues of attack against
Persea. We focus primarily on examining the resilience of Persea
against attacks on ID control.
5.1 Attacks on ID Control
An attacker could attempt to undermine Persea’s restrictions on
ID space. We now discuss these attacks and how Perseea is resilient
to them.
Note that our arguments for security against these attacks are
inductive: Starting from a small base of honest nodes, in which
lookups will succeed, additional nodes can be added according to
the rules of protocol without substantial risk that lookups will be
subverted as long as the ratio of attack edges to nodes remains mod-
erate (i.e. g/n ≤ 1.0) at all times. This assumption would only be
violated if the early adopters were particularly vulnerable to social
engineering.
Node insertion.
In a node insertion attack, the attacker responds
to a lookup(key) request by pretending that there is a malicious
node with an ID that matches very closely to the key currently being
searched for and returning this node’s information. The attacker
creates a certiﬁcate with this ID and signs it with a plausible key
for a parent.
The certiﬁcate checks in Persea will cause this attack to fail. In
particular, the node that initiated the lookup(key) request will also
perform a lookup for the certiﬁcate of the returned node. The at-
tacker will not be able to store the certiﬁcate in the DHT, as the
replicas for the given ID will look up the parent’s certiﬁcate. Note
that the parent’s certiﬁcate similarly cannot be stored in the DHT
by the attacker. Additionally, the node ID must ﬁt the ﬁxed values
determined by Z, b, and cf (see §4.1). Each node can very simply
calculate whether a returned node ID ﬁts these system-wide values.
Thus, the attacker’s certiﬁcate will fail to validate and the user can
use the other returned lookup results.
Node ID hijacking.
In this attack, the malicious peer M falsely
claims to have the node ID of an existing honest peer H and sends a
request to a victim node V to insert this node ID into its k-bucket.
If effective, this attack would allow widespread poisoning of k-
buckets.
Persea is also resilient against this attack. A node cannot falsely
claim a node ID in Persea because of the certiﬁcation mechanism
(§4.2). When node P requests node Q to add it to Q’s k-bucket,
node P has to show its certiﬁcate, which shows the actual node ID.
5.2 Other Attacks on DHTs
P2P systems, and DHTs in particular, are subject to a wide range
of attacks. As most of these are orthogonal to our approach, we
limit our discussion to the most salient issues.
Persea, being based on Kad, is subject to the eclipse attack, in
which routing tables are ﬁlled the attacker [26]. Any P2P system
must address this attack, but it is orthogonal to our design and can
be solved using existing techniques, such as the approach of Singh
et al. [24].
Index poisoning attacks, in which the attacker adds a large vol-
ume of invalid information into the DHT [15], are no more prob-
lematic in Persea than other DHTs, and can also be addressed with
existing approaches [16].
Denial of service (DoS) is another possible attack on DHTs. DoS
has minimal additional impact on our system beyond the impact on
other DHTs. Notably, DoS on bootstrap nodes does not prevent
nodes from joining, except through the targeted nodes, and does
not stop nodes from verifying any certiﬁcates, as these are stored in
a replicated manner in the DHT.
6. SIMULATION AND RESULTS
To evaluate Persea, we built a custom simulation of the proto-
col, including building the bootstrap tree and ﬁlling the ID space,
adding malicious peers via attack edges, and performing lookups
over the modiﬁed Kad overlay. In this section, we describe the de-
sign of our simulation and present the results of our experiments.
80from Mohaisen et al. [20]; details are in the Appendix. Larger val-
ues show slower mixing times.
As we construct the initial boostrap graph, the nodes in these
datasets are considered to be honest. We build our system starting
with seven bootstrap nodes. In deployment, bootstrap nodes would
be the users who take initiative to build the system. In our exper-
iments, we choose seven highly connected nodes from the social
network to start building the network. We then use breadth-ﬁrst-
search over the social graph to add other nodes. A link between
node P and node Q in the dataset is interpreted as an invitation
from node P to node Q. Thus, P becomes Q’s parent in the boos-
trap graph. Also, P and Q add each other to their k-buckets.
After adding all of the honest nodes, we add Sybil nodes by cre-
ating attack edges to randomly selected honest peers. An attack
edge represents an invitation from the honest node, providing the
attacker with a certiﬁed ID and chunk of ID space through which it
could invite more Sybil nodes. An attack edge can be created with
a benign peer from any level of the hierarhcial ID space.
One may think that the attacker is at a disadvantage by being
added after honest nodes build a bootstrap tree. This is not the
case. The attackers have an equal chance to get attack edges at all
levels of the tree, and there are always chunks to be given out at
the highest levels of the tree. To demonstrate this, we examined the
ratio of attack edges to honest nodes (g/n) in our simulations for
all levels of the ID space (see Table 3 for the results for g/n = 1.0
overall). The ratios are roughly equal across the levels. We note
that the ratios are actually greater than the overall ratio at the top
level for the two networks (cat and ytub) for which Persea has the
best lookup performance.
Maximizing the number of nodes. As the bootstrap graph is
built, Persea should allow any new node to join through any ex-
isting node who is a real social connection. This means that both
the number of IDs in each node’s chunk and the depth of the tree
should be large to prevent signiﬁcant limitations on legitimate in-
vitations. These two numbers are balanced by the chunk factor
cf —a larger cf means larger chunks for each node, while a smaller
cf means a larger maximum tree depth. In Figure 3, we show this
trade-off for our ID space and our social network graphs in terms
of the maximum number of nodes in the system. Based on these
results, we use cf = 0.65 in our simulations to maximize the size
of the experiment.
Table 3: g/n in each level of hierarchical ID space [overall
g/n = 1.0]
Level
ham adv
ﬂic
cat
ytub
astro
1
2
3
4
5
6
7
8
0.91
0.96
1.01
0.98
1.00
1.16
0.94
1.04
0.95
1.10
1.03
1.04
0.93
0.95
−
−
1.17
0.96
0.97
0.95
0.97
0.98