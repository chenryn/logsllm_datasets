Slide: 1
Meta-Post Exploitation
Val Smith (PI:EMAIL)
Colin Ames (PI:EMAIL)
Using Old, Lost, Forgotten Knowledge
Slide: 2
Valsmith
– Affiliations:
• Offensive Computing
• Metasploit
• cDc
– Work:
• Malware Analyst
• Reverse Engineer
• Penetration Tester
• Exploit developer
Slide: 3
Colin Ames
– Security Researcher, Offensive Computing
– Steganography Research
– Penetration Testing
– Reverse Engineering
– Malware Analysis
Slide: 4
• What is this?
– Follow up to Val’s and HD Moore’s 
Tactical Exploitation talk from last year
– A talk about the use of automation 
and tactical tools post-exploitation
– Applied techniques 
– Good for LARGE environments
– Different perspectives: some old, 
some forgotten, some new
Slide: 5
Post Exploitation Concepts Overview
Slide: 6
What Is Post Exploitation?
• It’s what you do after you get root
– Note: This talk assumes you have access
• Includes
– Password Management
– Persistence
– Stealth / Evading Detection
– User Identity Theft
– Feature Modification
– Automation & Mass 0wnage
Slide: 7
What Is Post Exploitation?
• Getting root is just the beginning
– How do you spread?
– How to manage assets as you go along?
• Lots of tools to help you get root:
– Metasploit, Core, Canvas, Stand alone
• But what about after breaking in
– Lots of random tools
– Little automation / standardization
– Archaic, hard to use, poorly documented
– Maliciousness often obvious
– Not Scalable to 1000’s of hosts (ignoring botnets for this talk)
Slide: 8
Password Management
Slide: 9
Why Password Management?
– Large pentests, 1000’s of passwords
– Testing a cracked password on many 
systems can be time consuming
– Keeping track of cracking sessions
– Building and growing your wordlist lets 
you crack faster
– Aids in cleanup stage
• Tying accounts to systems
Slide: 10
Password Management Goals
– Acquired password storage 
– Organization and tracking
• What passwords go with which hosts
• What passwords are shared
• Which users have access to what 
resources
– Re-use for further access
– Expanding wordlist for faster 
cracking
Slide: 11
Password Management Stages 
& Techniques
– Acquiring: pwdump, cat /etc/shadow, 
cachedump, sql query, sniffing
– Decisions: Prioritize accounts to crack 
– Cracking: John, l0pht, Cain
– Tracking: Nothing?
– Reusing: Core Impact
Slide: 12
Manual Password Management
• Existing Tools
– L0phtCrack
• Stores passwords in session files
– Cain&Abel
• Static table, difficult to export / use / automate
• Password Classification (NTLM, Cisco, SQL, md5)
– Core Impact
• Good for automated reuse of passwords against many hosts
• No real storage / management capability
– Text file / John the Ripper
• Many people’s method
• Quick and dirty, not easily scalable
Slide: 13
Slide: 14
• MetaPass
• Demos
Slide: 15
Persistence
Slide: 16
A word on Stealth vs Persistence
– In the old days a rootkit helped you maintain root
– Today rootkits are all about hiding
– These two concepts still go hand in hand
Slide: 17
Persistence
• Persistence is maintaining access
• Why?
– Target’s can get patched
– Some exploits are 1 shot only
– Sometimes you need to return multiple times to the 
target
– Target’s usefulness not always immediately known
• Goals: Access target as often as needed/useful
• Huge area of study
• Sometimes persistence doesn’t matter
Slide: 18
Persistence
• Stages of Persistence
– Initial access: 
• Exploit
• Stolen password, etc.
– Decisions: What tool to use
• FUZZY – OS, Environment, Target dependent
– Setup 
– Re-accessing of target
– Cleanup: Don’t be a slob, it will get you caught
• When you no longer need the target, leave no trace
Slide: 19
Persistence 
• Existing tools
– Rootkits
– Backdoors
– Trojans
– Port knockers
– Adding accounts
– Things like netcat backdoors, inetd 
modifications, process injection, stealing 
credentials, etc.
Slide: 20
Persistence 
• Different perspective on persistence
– If you can always re-exploit who cares
– Inject, add, modify new vulnerabilities
• Hard to determine maliciousness
• We all know its hard to find bugs, now 
imagine someone is purposefully 
putting the bugs in
Slide: 21
Persistence 
• Leveraging existing persistent 
admin access
• Nagios checks
• Attack Configuration Management
– Cfengine
– SMS
– Automated Patching Systems (“patch” 
them with our trojans)
• GUI’s
• Tool distribution
Slide: 22
Persistence 
• Example:
• Machine has VNC installed 
• Replace installed VNC with vulnerable version
– Authentication bypass 
• Copy registry password so target doesn’t realize
• Persistence with no backdoors or rootkits to get 
detected
Slide: 23
Persistence 
• Add vulnerable code
• Example: web apps
– Take out user input validation
– Inject your vulnerable code
• Focus on vague intent
• Never be obviously and solely malicious
– Look for apps with previous vulnerabilities
– Re-introduce patched bugs
Slide: 24
Persistence 
• More web app examples
• Add hidden field to HTML form
– Users detect no change, app performs normally
• Edit web app and tie vuln perl code to form field 
input
If defined $hidden_field {
open($filename,”>$hidden_field);
}
• Craft a POST including the hidden field 
Slide: 25
Persistence 
• www.target.com/cgi-bin/app.cgi?lang=|cmd| 
• Code will execute your commands
• Who needs to bind a shell to a port?
• Unlikely to ever be detected
– Especially good in big apps
– Code review can’t even be sure of maliciousness
– Some sites replace code every X time period
• No rootkits to install
• Tripwire probably won’t see this
Slide: 26
Persistence 
• Take concept to another level
– Add a decoder to web app
– Look for a “trigger” string combination in form 
fields
– If Name = John Smith and Age = 42 then execute 
contents of Address field
– URL encode form entries containing commands
– Have identifier “stub” in encoded data for app to 
find
Slide: 27
Persistence 
• Mixing Stealth with Persistence
– Further encoding
– Take entries from all fields
– Concat them
– “Decode” commands
– Rotational Ciphers (rot 13, ceaser)
– Even more complex obfuscation
Slide: 28
Persistence 
• Covert Accounts
– Add an account / renable
– Modify local account policies to allow access
• Ex. SUPPORT_3848576b1, guest
– Add it to the admin group (net localgroup)
• Only use AT to run your commands
• Persistence without adding files, new accounts
– Unlikely to be discovered
Slide: 29
• DEMOS
Slide: 30
Stealth / Evading Detection
Slide: 31
Stealth / Evading Detection
• Hiding your activity
– From:
• IDS
• A/V
• LOGGING
• Suspicious users & admins
• Firewalls
• Process listing
Slide: 32
Stealth / Evading Detection
• Why Stealth?
– If you get caught, you get stopped
– The longer you can operate undetected, the more you 
can accomplish
– Admin’s won’t fix problems they don’t know exist 
(helps persistence)
– On a pen test you should also be testing the 
organizations detection and response capabilities
Slide: 33
Stealth / Evading Detection
• Goals
– Keep system operable
• If it breaks you can’t use it
• Someone will come fix it
– Operate without fear of detection
– Robustness
• Hiding shouldn’t require constant attention
– DON’T LOOK MALICIOUS!
Slide: 34
Stealth / Evading Detection
• Manual / Existing Tools
– Rootkits, rootkits, rootkits
– Meterpreter
– Encryption
• Shellcode Encoders for IDS evasion
– Log cleaners
– Packers
– Covert channels / Steganography
– Anti-analysis / anti-forensics
• See all of OC’s other talks 
• Also Vinnie Liu’s Metasploit research
Slide: 35
Stealth / Evading Detection
• Different Perspective
– DON’T BE AN ANOMALY!
– Hide in plain sight
• Many tools have ONLY malicious uses
• Make your intent hard to determine
– Be noisy on one to divert attention from 
another
Slide: 36
Stealth / Evading Detection
• Different Perspective
– Know the targets environment better than 
they do
• If they don’t use encryption, maybe you shouldn’t either
• Change strategies to match environment's normal 
behavior
– Don’t always default to exploits
• See Tactical Exploitation talk
• IDS’s can’t see normal behavior that is malicious
Slide: 37
Stealth / Evading Detection
• Using Windows security objects for stealth
– Auditing of Securable Objects is controlled by 
SACL’s
– Null SACL = No Auditing = No Logs
Slide: 38
• DEMOS
– Kaspersky squeals like a pig
Slide: 39
User Identity Theft
Slide: 40
User Identity Theft
• It’s not always about ROOT!
• Look like someone else
– Use the credentials / access of another user
• Goals
– Change your identity at will