### Slide 1: Meta-Post Exploitation
**Presenters:**
- Val Smith (Email: [PI:EMAIL])
- Colin Ames (Email: [PI:EMAIL])

**Topic:**
- Utilizing Old, Lost, and Forgotten Knowledge

---

### Slide 2: Val Smith
**Affiliations:**
- Offensive Computing
- Metasploit
- cDc

**Professional Experience:**
- Malware Analyst
- Reverse Engineer
- Penetration Tester
- Exploit Developer

---

### Slide 3: Colin Ames
**Professional Background:**
- Security Researcher, Offensive Computing
- Steganography Research
- Penetration Testing
- Reverse Engineering
- Malware Analysis

---

### Slide 4: Introduction
**Overview:**
- This presentation is a follow-up to Val’s and HD Moore’s Tactical Exploitation talk from the previous year.
- It focuses on the use of automation and tactical tools in post-exploitation scenarios.
- The techniques discussed are particularly useful for large environments.
- We will explore different perspectives, including some old, forgotten, and new methods.

---

### Slide 5: Post-Exploitation Concepts Overview

---

### Slide 6: What Is Post-Exploitation?
**Definition:**
- Post-exploitation refers to the actions taken after gaining root access.
- **Assumption:** You already have access to the system.
- **Key Areas:**
  - Password Management
  - Persistence
  - Stealth and Evading Detection
  - User Identity Theft
  - Feature Modification
  - Automation and Mass Exploitation

---

### Slide 7: Post-Exploitation Challenges
- **Initial Access:** Many tools like Metasploit, Core, and Canvas can help you gain root.
- **Post-Access:**
  - Limited tools for post-exploitation.
  - Lack of automation and standardization.
  - Tools are often archaic, hard to use, and poorly documented.
  - Malicious activity is often easily detectable.
  - Not scalable for managing thousands of hosts (excluding botnets).

---

### Slide 8: Password Management

---

### Slide 9: Why Password Management?
- **Large Pentests:** Involves handling thousands of passwords.
- **Efficiency:** Testing cracked passwords on multiple systems can be time-consuming.
- **Tracking:** Keeping track of cracking sessions and building wordlists.
- **Cleanup:** Tying accounts to systems for easier management.

---

### Slide 10: Password Management Goals
- **Storage and Organization:**
  - Store acquired passwords securely.
  - Track which passwords belong to which hosts.
  - Identify shared passwords and user access to resources.
- **Reusability:**
  - Reuse passwords for further access.
  - Expand wordlists for faster cracking.

---

### Slide 11: Password Management Stages & Techniques
- **Acquiring:**
  - Tools: pwdump, cat /etc/shadow, cachedump, SQL queries, sniffing.
- **Prioritization:**
  - Prioritize accounts to crack.
- **Cracking:**
  - Tools: John the Ripper, l0pht, Cain.
- **Tracking:**
  - Currently, there are no standardized tracking tools.
- **Reusing:**
  - Tools: Core Impact.

---

### Slide 12: Manual Password Management
- **Existing Tools:**
  - **L0phtCrack:**
    - Stores passwords in session files.
  - **Cain & Abel:**
    - Static table, difficult to export, use, or automate.
    - Supports password classification (NTLM, Cisco, SQL, md5).
  - **Core Impact:**
    - Good for automated reuse of passwords against many hosts.
    - No real storage or management capability.
  - **Text Files / John the Ripper:**
    - Common method.
    - Quick and dirty, not easily scalable.

---

### Slide 13: MetaPass
- **Demos:**

---

### Slide 14: MetaPass Demos

---

### Slide 15: Persistence

---

### Slide 16: Stealth vs. Persistence
- **Historical Context:**
  - Rootkits were used to maintain root access.
  - Today, rootkits are primarily used for hiding.
  - Both concepts are still interrelated.

---

### Slide 17: Persistence
- **Definition:**
  - Maintaining access to a target.
- **Why?**
  - Targets can get patched.
  - Some exploits are one-time only.
  - Multiple visits may be necessary.
  - Target's usefulness may not be immediately known.
- **Goals:**
  - Access the target as often as needed.
  - Large area of study.
  - Sometimes persistence is not critical.

---

### Slide 18: Stages of Persistence
- **Initial Access:**
  - Exploit or stolen password.
- **Tool Selection:**
  - Dependent on OS, environment, and target.
- **Setup:**
  - Configure persistence mechanisms.
- **Re-access:**
  - Ensure reliable re-access.
- **Cleanup:**
  - Leave no trace when no longer needed.

---

### Slide 19: Existing Persistence Tools
- **Tools:**
  - Rootkits
  - Backdoors
  - Trojans
  - Port knockers
  - Adding accounts
  - Netcat backdoors, inetd modifications, process injection, stealing credentials, etc.

---

### Slide 20: Different Perspective on Persistence
- **Re-Exploitation:**
  - If you can always re-exploit, persistence may not be a concern.
  - Inject, add, or modify new vulnerabilities.
- **Stealth:**
  - Hard to determine malicious intent.
  - Intentionally introducing bugs can be challenging to detect.

---

### Slide 21: Leveraging Admin Access
- **Admin Access:**
  - Use existing persistent admin access.
  - Nagios checks.
  - Attack Configuration Management:
    - Cfengine, SMS, automated patching systems.
  - GUIs and tool distribution.

---

### Slide 22: Example: VNC
- **Scenario:**
  - Replace installed VNC with a vulnerable version.
  - Authentication bypass.
  - Copy registry password to avoid detection.
  - Achieve persistence without backdoors or rootkits.

---

### Slide 23: Web App Examples
- **Vulnerable Code:**
  - Remove user input validation.
  - Inject vulnerable code.
  - Focus on vague intent.
  - Avoid obvious maliciousness.
  - Reintroduce patched vulnerabilities.

---

### Slide 24: More Web App Examples
- **Hidden Field:**
  - Add a hidden field to an HTML form.
  - Edit web app to tie vulnerable Perl code to the hidden field.
  - Craft a POST request including the hidden field.

---

### Slide 25: Command Execution
- **Example:**
  - `www.target.com/cgi-bin/app.cgi?lang=|cmd|`
  - Execute commands without binding a shell to a port.
  - Unlikely to be detected, especially in large apps.
  - Tripwire may not detect this.

---

### Slide 26: Decoder Concept
- **Concept:**
  - Add a decoder to the web app.
  - Look for a "trigger" string combination in form fields.
  - Execute contents of a specific field based on the trigger.
  - URL encode form entries containing commands.
  - Include an identifier "stub" in encoded data.

---

### Slide 27: Further Encoding
- **Techniques:**
  - Concatenate and decode commands.
  - Use rotational ciphers (e.g., rot13, Caesar).
  - Apply complex obfuscation.

---

### Slide 28: Covert Accounts
- **Accounts:**
  - Add or re-enable an account.
  - Modify local account policies to allow access.
  - Add to the admin group.
  - Use AT to run commands.
  - Persist without adding files or new accounts.

---

### Slide 29: Demos

---

### Slide 30: Stealth / Evading Detection

---

### Slide 31: Stealth / Evading Detection
- **Objective:**
  - Hide your activity from IDS, A/V, logging, suspicious users, admins, firewalls, and process listings.

---

### Slide 32: Why Stealth?
- **Importance:**
  - Getting caught means getting stopped.
  - Longer undetected operation leads to more accomplishments.
  - Admins won't fix problems they don't know exist.
  - Test the organization's detection and response capabilities.

---

### Slide 33: Stealth Goals
- **System Operability:**
  - Keep the system functional.
  - Avoid constant attention.
  - Do not look malicious.

---

### Slide 34: Existing Stealth Tools
- **Tools:**
  - Rootkits
  - Meterpreter
  - Encryption (shellcode encoders)
  - Log cleaners
  - Packers
  - Covert channels / steganography
  - Anti-analysis / anti-forensics
  - See OC’s other talks and Vinnie Liu’s Metasploit research.

---

### Slide 35: Different Perspective on Stealth
- **Avoid Anomalies:**
  - Hide in plain sight.
  - Make intent hard to determine.
  - Be noisy on one front to divert attention from another.

---

### Slide 36: Environmental Adaptation
- **Adaptation:**
  - Know the target's environment better than they do.
  - Match normal behavior.
  - Avoid defaulting to exploits.
  - See Tactical Exploitation talk.
  - IDSs cannot detect normal behavior that is malicious.

---

### Slide 37: Windows Security Objects
- **SACLs:**
  - Auditing of securable objects is controlled by SACLs.
  - Null SACL = No auditing = No logs.

---

### Slide 38: Demos
- **Example:**
  - Kaspersky detection.

---

### Slide 39: User Identity Theft

---

### Slide 40: User Identity Theft
- **Purpose:**
  - It's not always about root.
  - Use another user's credentials and access.
- **Goals:**
  - Change identity at will.