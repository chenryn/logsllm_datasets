# Smali
## 介绍
在执行 Android Java 层的代码时，其实就是 Dalvik(ART) 虚拟机（使用 C或 C++ 代码实现）在解析 Dalvik 字节码，从而模拟程序的执行过程。
自然，Dalvik 字节码晦涩难懂，研究人员们给出了 Dalvik 字节码的一种助记方式：smali 语法。通过一些工具（如 apktool），我们可以把已有的 dex 文件转化为若干个 smali 文件（**一般而言，一个 smali 文件对应着一个类**），然后进行阅读。对于不同的工具来说，其转换后的 smali 代码一般都不一样，毕竟这个语法不是官方的标准。这里我们介绍比较通用的语法。值得注意的是，在smali 语法中，使用的都是寄存器，但是其在解释执行的时候，很多都会映射到栈中。
**感觉似乎这里给个例子比较合适！！！！！**
## 基本结构
一个 Smali 文件的基本信息如下
- 基本类信息
    - 前三行描述转换为该 Smali 文件的类的信息
    - 如果类实现了接口，对应的接口信息
- 如果类使用了注解，对应的注解信息
- 字段描述
- 方法描述
比较有意思的是，Smali 代码基本上还原了 java 代码中含义。它主要有以下两种类型的语句
- 声明语句用来声明 java 中自顶向下的类，方法，变量类型，以及每个方法中所要使用的寄存器的个数等信息。
- 执行语句来执行 java 中的每一行代码，包含方法的调用，字段的读写，异常的捕捉等操作。
整体来说，Smali 代码的可读性还是比较强的。
## 声明语句
在 smali 代码中，声明语句一般都是以 `.` 开始。
### 寄存器
目前，Dalvik 使用的寄存器都是 32 位，对于 64 位类型的变量，如 double 类型，它会使用两个相邻的 32 位寄存器来表示。
此外，我们知道 Dalvik 最多支持 65536 个寄存器(编号从 0~65535 )，但是 ARM 架构的 cpu 中只有 37 个寄存器。那 Dalvik 是怎么做的呢？其实，每个 Dalvik 虚拟机维护了一个调用栈，该调用栈用来支持虚拟寄存器和真实寄存器相互映射的。
#### 寄存器声明
在执行具体方法时，Dalvik 会根据  `.registers`  指令来确定该函数要用到的寄存器数目，虚拟机会根据申请的寄存器的数目来为该方法分配相应大小的栈空间，dalvik 在对这些寄存器操作时，其实都是在操作栈空间。
#### 寄存器命名规则
一个方法所申请的寄存器会分配给函数方法的参数 (parameter) 以及局部变量 (local variable) 。在 smali 中，一般有两种命名规则
- v 命名法
- p 命名法
假设方法申请了 m+n 个寄存器，其中局部变量占 m 个寄存器，参数占 n 个寄存器，对于不同的命名规则，其相应的命名如下
|   属性   |          v命名法          |        p命名法        |
| :------: | :-----------------------: | :-------------------: |
| 局部变量 |   $v_0,v_1,...,v_{m-1}$   | $v_0,v_1,...,v_{m-1}$ |
| 函数参数 | $v_m,v_{m+1},...,v_{m+n}$ | $p_0,p_1,...,p_{n-1}$ |
 一般来说我们更倾向于 p 命名法，因为其具有较好的可读性，可以方便地让我们知道寄存器属于哪一种类型。
而这其实也就是 smali 语法中常见的寄存器命名规则，p 开头的寄存器都是参数寄存器，v 开头的寄存器都是局部变量寄存器，两者的数量之和为方法申请的寄存器数量。
### 变量类型
在 Dalvik 字节码中，变量主要分为两种类型
| 类型   | 成员                                       |
| ---- | ---------------------------------------- |
| 基本类型 | boolean，byte，short，char，int，long，float，double，void（只用于返回值类型） |
| 引用类型 | 对象，数组                                    |
但是，我们在 smali 中其实并不需要把一个变量的类型的描述的全称全部放进去，我们只需要可以识别它即可，那我们可以怎么做呢？可以对它进行简写啊。dalvik 中简写方式如下
| java类型  | 类型描述符 |
| :-----: | :---: |
| boolean |   Z   |
|  byte   |   B   |
|  short  |   S   |
|  char   |   C   |
|   int   |   I   |
|  long   |   J   |
|  float  |   F   |
| double  |   D   |
|  void   |   V   |
|  对象类型   |   L   |
|  数组类型   |   [   |
其中对象类型可以表示Java代码中的所有类。比如说如果一个类在java代码中的以package.name.ObjectName（全名）的方式被引用，那么在Davilk中，其描述则是 `Lpackage/name/ObjectName;` ，其中
- L即上面所说的对象类型。
- 全名中的 `.` 被替换为 `/` 。
- 后面跟了一个 `;` 。
比如说在 `java.lang.String` ，其相应的形式为`Ljava/lang/String;`
> 注：所谓全名就是它的全程不仅仅是简写，比如String其实是java.lang.String。
数组类型可以表示java中的所有数组。其一般的构成形式由前向后依次分为两个部分
- **数组维数**个[，但数组的维数最多为255。
- 数据元素类型，这里的类型自然就不能是[了。
 比如说int数组 `int []` 在smali中的表示形式为 `[I ` 。
比如说数组类型 `String[][]` 在smali中的表示形式为 `[[Ljava/lang/String;` 。
### 字段
在 java 的类中，一般都会有成员变量，也称为其属性或者字段。java中的字段分为
- 普通字段，实例属性
- 静态字段，类属性，所有的类实例共享。
#### 普通字段
声明如下
```text
#instance fields
.field  [非权限修饰符] :
```
其中访问权限修饰符可以为
- public
- private
- protected
非权限修饰符可以为(**查明其用法!!!**)
- final
- volidate
- transient
举个例子，如下
```smali
# instance fields
.field private str1:Ljava/lang/String;
```
这里声明其实如下
```java
private java.lang.String str1;
```
#### 静态字段
一般表示如下
```smali
#static fields
.field  static [修饰词] :
```
这里我们就不介绍相应内容了，直接给出一个例子
```
# static fields
.field public static str2:Ljava/lang/String;
```
其实声明如下
```java
public static java.lang.String str2;
```
### 方法
在 smali 代码中，方法一般的展现形式如下
```text
# 描述方法类型
.method  [修饰符] 
      [.parameter]
      [.prologue]
      [.line]
      [.line]
.end
```
其中第一行以注释形式描述方法的类型，一般是反编译工具添加上去的，分为两种类型
- 直接方法，direct method
- 虚方法，virtual method
访问权限可能有有以下形式，与 java 中的一一对应
- public
- private
- protected
修饰符主要有以取值范围
- static，表明该方法是静态方法
方法原型一般为 `方法名(参数类型描述符)返回值类型描述符` 。与java方法中不一样的是，在 smali 的这个方法原型中不会有参数对应的名字的，对应参数的名字可能会在.parameter中进行指定。
.locals 会指定方法使用的局部变量。
.parameter 的个数与方法的使用的参数格式一致，每一条语句声明一个参数。如果方法是静态方法的话，我们会使用 p0 来表示this，即当前对象，否则的话，参数就正常用 p0 开始。
.prologue 指定程序的开始处。混淆过后的代码可能会没有这一说明。
.line 指定相应的代码在原 java 文件的行数。如果程序进行了混淆，一般就不会有这一行了。
**举个例子，，，，找个合适的例子!!!!!!**
### 类
#### 基本类信息
如下
```text
.class  [非权限修饰符] 
.super 
.source 
```
其中，`<>` 中的内容必须存在，`[]` 的内容是可选的。访问权限修饰符即所谓的 `public`，`protected`，`private`。而非权限修饰符则指的是`final`，`abstract`。举个例子
```smali
.class public final Lcom/a/b/c;
.super Ljava/lang/Object;
.source "Demo.java"
```
可以看出我们类的访问权限是`public`，非权限修饰符为`final`，类名为`com.a.b.c`，它继承了父类`java.lang.object`，对应的源文件为`Demo.java`。
#### 接口
如果一个类实现了某个接口，则会通过`.implements`进行，如下:
```
#interfaces
.implements 
```
给个例子，一般来说，smali都会对其进行注释表明它是一个接口。
```smali
# interfaces
.implements Landroid/view/View$OnClickListener;
```
#### 类的类别
Java中允许在一个类中定义另外一个类，还允许多层嵌套，我们称类中的类为内部类。内部类主要有
- 成员内部类
- 静态嵌套类
- 方法内部类
- 匿名内部类
在smali中，每个类都会对应一个smali文件。
#### 类的引用
在smali代码中，我们会使用 this 来表示父类的引用，对于父类的中的子类，我们会根据其层数来进行引用，其格式为`this$[层数]` ，举个例子
```java
public class MainActivity extends Activity {   //this$0
   public class firstinner  //this$1
   {
      public class secondinner //this$2
      {
         public class thirdinner //this$3
         {
         }
      }
   }
}
```
比如说`thirdinner` 引用`firstinner` 其会使用`this$1` 来进行引用。而且，对于`this$x` 这样的字段都会被定义为`synthetic` 类型，表明这种字段是由编译器自动生成的，在源代码里并没有这样的字段。
此外，在smali中，每个类都会对应一个 smali 文件，这几个类对应的 smali 文件名分别为
```
MainActivity.smali
MainActivity$firstinner.smali
MainActivity$firstinner$secondinner.smali
MainActivity$firstinner$thirdinner.smali
```
### 注解
注解的格式如下
```smali
#annotations
.annotation [注解的属性] 
    [注解字段=值]
    ...
.end
```
其中，如果注解范围是类的话，注解会直接出现在 smali 文件中。如果注解范围是方法或者字段的话，会包含在相应的方法或者字段的定义中。