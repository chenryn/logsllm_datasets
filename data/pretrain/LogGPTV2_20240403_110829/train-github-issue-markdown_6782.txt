I found a strange behaviour when importing a default-exported module from
file1 and using it for variable/parameter/return value/whatever... type
declarations in file2. Please note that the imported namespace is still
visible and works correctly when I use it for variable definitions (e.g.
invoking class constructor with new). See the code below:
file1.ts
    export module a {
        export module b {
            export class MyClass {
                x: number = 10;
            }
        }
    }
    export default a.b;
file2.ts
    import y from './file1';
    function fn(): y.MyClass {      //warning here: Cannot find namespace 'y'.
        return new y.MyClass();     //it works here, no compiler warning
    }
    var a = fn();                   //works fine
    var b: y.MyClass = fn();        //warning here: Cannot find namespace 'y'.
    function fn2(i: y.MyClass) {    //warning here: Cannot find namespace 'y'.
    }
Instead, for class expression (`export default class {...` in file1.ts) it
works fine, both for type declarations and variable definitions.