## 创建与执行单元测试

12. 创建单元测试
13. 执行单元测试
14. 编写系统代码
15. 再次执行单元测试
16. 执行实例
17. 版本控制系统代码
18. 执行实例
19. 重构系统代码
20. 执行实例和单元测试

---

## Page 2014: 强大的开发环境需求

设计者（SME、分析师、测试员）需要一个强大的开发环境，它应具备主流软件开发环境的所有特性：代码补全、动态语法检查、重构和版本控制（包括功能测试的拆分与合并以及对DSTL代码的支持）。特别是对DSTL语言的支持是必不可少的。此外，该语言的格式及工具界面需易于被非技术人员理解。

### 针对不同用户群体的需求

- **读者**（如企业决策者）必须能够快速理解示例，以便对系统功能有一个清晰且无歧义的认识。他们期望示例组织良好，便于浏览查找，并且能够在各个需求工件之间建立必要的联系和跳转路径。
- **执行者**在不同阶段出于各自的目的多次执行示例：
  - 作者在TDD工具中创建并运行示例；
  - 开发人员和自动化工程师在其开发环境中编写系统代码时执行示例；
  - 读者通过桌面应用程序（如浏览器）来验证需求描述；
  - 其他角色（例如市场营销和技术销售人员）也可能利用自动化示例提高工作效率，比如准备演示数据或确保系统稳定性。
- 工具还需支持基于静态或动态元数据（如优先级、错误状态、功能区域等）灵活组合多个示例集，并允许在任何执行环境下进行调试以及自由地切换于示例、DSTL脚本和系统代码之间。
- **结果使用者**（程序员、QA工程师、技术支持、发布经理等）关心特定示例是否成功执行、失败原因及其具体位置。记录历史测试结果有助于分析过程趋势。
- **报告使用者**（项目经理、审计员等）则侧重于统计层面的测试结果，以追踪项目进展并做出决策。

所有上述核心功能加上更多附加特性共同定义了支持TDD的新一代工具标准。

---

## Page 2015: 团队协作的重要性

XP方法将增量迭代的理念推向极致。在此过程中，从规划到部署各阶段均体现了团队成员间紧密合作的精神。每个环节都有其独特的作用：

- **分析阶段**：多角色参与，包括领域专家、业务分析师、测试人员、工具开发者、文档撰写者和用户体验设计师共同工作。
- **设计阶段**：开发人员与测试人员紧密配合，在单元级别上采用测试驱动的方式推进项目。
- **开发阶段**：自动化的测试套件频繁运行，保证新加入的功能不会破坏现有系统的稳定性。
- **测试阶段**：不同于传统流程，XP下的测试人员一开始就收到相对稳定且符合当前需求的代码，从而可以集中精力于更深层次的质量保障活动，如集成测试和性能评估。

这种持续性的合作模式不仅提升了产品质量，也为整个团队树立了一个全新的美学标杆——即美丽存在于不断改进的过程中。

---

## Page 2016: TDD之美

美丽是一种主观感受。以狄德罗为例，虽然旁人认为他的书房经过装修后更加整洁美观，但他本人却并不满意这一变化。这说明了改善某个方面可能会带来意想不到的结果。对于希望采用TDD方法论的团队而言，除了选择合适的自动化测试工具外，还需要适应由此带来的角色转变，比如：

- 更加详细且可信的需求定义
- 对系统架构和编码实践产生直接影响
- 根据迭代周期调整工作节奏
- 利用新型工具促进跨职能协作
- 测试人员早期介入项目并承担更广泛的责任

只有当团队能够妥善平衡这些因素时，才能真正体验到TDD所带来的美好成果。

---

## 参考文献

此处列出了一些关于敏捷开发、TDD及相关主题的重要参考书目和文章链接，供进一步阅读参考。

---

## 第十五章：完美测试推动商业成功

本文探讨了如何通过实施全面有效的测试策略帮助企业实现快速增长。案例研究表明，通过将测试视为软件开发生命周期中的关键组成部分，并确保所有参与者都积极参与其中，不仅可以提升产品质量，还能显著增强企业的市场竞争力。