---
tags: ['中间件', 'es']
---
# ElasticSearch
> ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口
- Near Realtime
  - 从写入数据到数据可以被搜索到有一个小延迟，大概是 1s
  - 基于 es 执行搜索和分析可以达到秒级
## 优势
- 横向可扩展
- 分片机制提供更好的分布性
- 高可用
## 安装
> 使用 docker
```shell
docker run elasticsearch:7.3.1
```
```shell
docker network create somenetwork;
docker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" elasticsearch:7.3.1
```
9300端口： ES节点之间通讯使用
9200端口： ES节点 和 外部 通讯使用
## 图形化管理界面
- [head](https://github.com/mobz/elasticsearch-head)
## 概念
- 集群(cluster)
  - 多个节点组成
- 节点(node)
  - 服务器实例
- 索引（index）
  - Databases 数据库
- ​类型（type）
  - Table 数据表
- ​文档（Document）
  - Row 行
- ​字段（Field）
  - Columns 列
- shard
  - es 可以将一个索引中的数据切分为多个 shard，分布在多台服务器上存储
- replica
  - 任何一个服务器随时可能故障或宕机，此时 shard 可能就会丢失，因此可以为每个 shard 创建多个replica 副本。replica 可以在 shard 故障时提供备用服务，所以同一片shard跟replica不能存放在同一节点
![批注 2020-03-19 081056](/assets/批注%202020-03-19%20081056.png)
- 映射 mapping
## 索引结构
![批注 2019-10-18 145410](/assets/批注%202019-10-18%20145410.png)
## 操作
### 创建索引
```json
PUT /blog
{
    "settings": {
        "number_of_shards": 3,
        "number_of_replicas": 2
      }
}
```
- 获取索引库信息
`GET /blog`
- 删除索引库
`DELETE /blog`
### 添加映射
```json
PUT /索引库名/_mapping/类型名称
{
  "properties": {
    "字段名": {
      "type": "类型",
      "index": true,
      "store": true,
      "analyzer": "分词器"
    }
  }
}
```
**数据类型**
text：该类型被用来索引长文本，在创建索引前会将这些文本进行分词，转化为词的组合，建立索引；允许es来检索这些词，text类型不能用来排序和聚合。
keyword：该类型不需要进行分词，可以被用来检索过滤、排序和聚合，keyword类型自读那只能用本身来进行检索（不可用text分词后的模糊检索）
数值型：long、integer、short、byte、double、float
日期型：date
布尔型：boolean
二进制型：binary
- 查看映射关系
`GET /索引库名/_mapping`
- 更新索引
`POST http://my-pc:9200/blog/{indexName}`
### 添加文档
```json
POST /索引库名/类型名
{
    "key":"value"
}
```
- 自定义id
```json
POST /索引库名/类型/id值
{...}
```
### 删除文档
`DELETE http://my-pc:9200/blog/hello/1`
### 修改文档
`UPDATE http://my-pc:9200/blog/hello/1`
### 查询
#### 基本查询
```json
GET /索引库名/_search
{
    "query":{
        "查询类型":{
            "查询条件":"查询条件值"
        }
    }
}
```
- 根据ID查询
`GET http://my-pc:9200/blog/hello/1`
- 根据字段查询
>Term Query为精确查询，在搜索时会整体匹配关键字，不再将关键字分词。 
```json
GET /shop/_search
{
  "_source": ["title","price"],
  "query": {
    "term": {
      "price": 2699
    }
  }
}
```
- queryString查询
```json
{
    "query":{
        "query_string":{
            "default_field":"content",
            "query":"内容"
        }
    }
}
```
**过滤**
- includes：来指定想要显示的字段
- excludes：来指定不想要显示的字段
```json
GET /shop/_search
{
  "_source": {
    "includes":["title","price"]
  },
  "query": {
    "term": {
      "price": 2699
    }
  }
}
```
**排序**
```json
GET /shop/_search
{
  ...
  "sort": [
    {
      "price": {
        "order": "desc"
      }
    }
  ]
}
```
**模糊查询**
```json
GET /heima/_search
{
  "query": {
    "fuzzy": {
        "title": {
            "value":"appla",
            "fuzziness":1
        }
    }
  }
}
```
## 分词
### 内置的分词器
- Standard Analyzer
- Simple Analyzer
- Whitespace Analyzer
- Stop Analyzer
- Keyword Analyzer
- Pattern Analyzer
- Language Analyzers
- Fingerprint Analyzer
### 测试分词
`GET /_analyze`
```json
{
  "analyzer": "standard",
  "text": "中文测试分词"
}
```
### 中文分词器
[下载](https://github.com/medcl/elasticsearch-analysis-ik)
```shell
docker run --name elasticsearch --net somenetwork -v /root/plugin:/usr/share/elasticsearch/plugins -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" elasticsearch:7.3.1
```
`GET http://my-pc:9200/_analyze`
```json
{
  "analyzer": "ik_max_word",
  "text": "中文测试分词"
}
```
ik 的两种模式：
- max：会将文本做最细粒度的拆分 会穷尽所有的可能
- smart：最最粗粒度的划分
## 聚合
>桶
## ES集群
采用ES集群，将单个索引的分片到多个不同分布式物理机器上存储，从而可以实现高可用、容错性
### 架构
es 集群多个节点，会自动选举一个节点为 master 节点
master 节点宕机了，那么会重新选举一个节点为 master 节点
非 master节点宕机了，那么会由 master 节点，让那个宕机节点上的 primary shard 的身份转移到其他机器上的 replica shard
![批注 2020-03-19 081559](/assets/批注%202020-03-19%20081559.png)
可以使用三个节点，将索引分成三份，每个节点存放一份primary shard，两份replica，这样就算只剩下一台节点，也能保证服务可用
### 搭建
- 配置
```yml
# 集群名称，必须保持一致
cluster.name:  elasticsearch
# 节点的名称
node.name: node-1
# 监听网段
network.host: 0.0.0.0
# 本节点rest服务端口
http.port: 9201
# 本节点数据传输端口
transport.tcp.port: 9301
# 集群节点信息
discovery.seed_hosts: ["127.0.0.1:9301","127.0.0.1:9302","127.0.0.1:9303"]
cluster.initial_master_nodes: ["node-1","node-2","node-3"]
```
另外两个节点配置省略...
# JAVA客户端
- 依赖
```xml
    org.elasticsearch
    elasticsearch
    7.3.1
    org.elasticsearch.client
    transport
    7.3.1
```