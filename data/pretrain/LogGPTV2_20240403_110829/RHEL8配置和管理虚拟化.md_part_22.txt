    在命令中，替换：
    ::: itemizedlist
    -   使用您要在其上创建 PF 的 VF 数替换 [*VF-number*]{.emphasis}。
    -   使用 VF 要创建的网络接口的名称替换
        [*network-interface*]{.emphasis}。
    :::
    以下示例从 eth1 网络接口创建 2 个 VF：
    ``` literallayout
    # echo 2 > /sys/class/net/eth1/device/sriov_numvfs
    ```
3.  确定已添加了 VF：
    ``` literallayout
    # lspci | grep Ethernet
    01:00.0 Ethernet controller: Intel Corporation Ethernet Controller 10-Gigabit X540-AT2 (rev 01)
    01:00.1 Ethernet controller: Intel Corporation Ethernet Controller 10-Gigabit X540-AT2 (rev 01)
    07:00.0 Ethernet controller: Intel Corporation I350 Gigabit Network Connection (rev 01)
    07:00.1 Ethernet controller: Intel Corporation I350 Gigabit Network Connection (rev 01)
    ```
4.  通过为您用于创建 VF 的网络接口创建 udev 规则，使创建的 VF
    持久保留。例如，对于 [*eth1*]{.emphasis} 接口，创建
    `/etc/udev/rules.d/eth1.rules`{.literal} 文件，并添加以下行：
    ``` programlisting
    ACTION=="add", SUBSYSTEM=="net", ENV{ID_NET_DRIVER}=="ixgbe", ATTR{device/sriov_numvfs}="2"
    ```
    这样可确保两个使用 `ixgbe`{.literal} 驱动程序的 VF
    在主机启动时自动用于 `eth1`{.literal} 接口。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    目前，当尝试在 Broadcom NetXtreme II BCM57810 适配器中永久保留 VF
    时，这个命令无法正常工作。另外，基于这些适配器将 VF 附加到 Windows
    虚拟机当前还不可靠。
    :::
5.  使用 `virsh nodedev-list`{.literal} 命令，验证
    [*libvirt*]{.emphasis} 是否识别添加的 VF
    设备。例如，以下显示，上例中的 01:00.0 和 07:00.0 PF 已被成功转换为
    VF：
    ``` literallayout
    # virsh nodedev-list | grep pci_
    pci_0000_01_00_0
    pci_0000_01_00_1
    pci_0000_07_10_0
    pci_0000_07_10_1
    [...]
    ```
6.  获取 PF 的 `总线`{.literal}、`插槽`{.literal} `和功能`{.literal}
    值，以及对应的 VF 之一。例如： for `pci_0000_01_00_0`{.literal} 和
    `pci_0000_01_00_1:`{.literal}
    ``` literallayout
    # virsh nodedev-dumpxml pci_0000_01_00_0
      pci_0000_01_00_0
      /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0
      pci_0000_00_01_0
        ixgbe
        0
        1
        0
        0
    [...]
    # virsh nodedev-dumpxml pci_0000_01_00_1
      pci_0000_01_00_1
      /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.1
      pci_0000_00_01_0
        vfio-pci
        0
        1
        0
        1
    [...]
    ```
7.  创建一个临时 XML 文件，并使用您在上一步中获取的
    `总线`{.literal}、`插槽`{.literal} `和功能`{.literal} 值将配置添加到
    中。例如：
    ``` programlisting
    ```
8.  使用临时 XML 文件将 VF 添加到虚拟机。例如，以下命令将
    `/tmp/holdmyfunction.xml`{.literal} 中保存的 VF 附加到运行的
    [*testguest1*]{.emphasis} 虚拟机，并确保虚拟机重启后它可用：
    ``` literallayout
    # virsh attach-device testguest1 /tmp/holdmyfunction.xml --live --config
    Device attached successfully.
    ```
:::
::: itemizedlist
**验证**
-   如果过程成功，客户机操作系统会检测到新的网络接口卡。
:::
:::
::: section
::: titlepage
## []{#managing-virtual-devices_configuring-and-managing-virtualization.html#supported-devices-for-sr-iov-assignment-in-rhel-8_managing-sr-iov-devices}SR-IOV 分配支持的设备 {.title}
:::
并非所有设备都可用于 SR-IOV。以下设备已在 RHEL 8 中测试并验证是否与
SR-IOV 兼容。
::: itemizedlist
**网络设备**
-   Intel 82599ES 10 Gigabit Ethernet Controller - 使用
    `ixgbe`{.literal} 驱动程序
-   Intel Ethernet Controller XL710 系列 - 使用 `i40e`{.literal}
    驱动程序
-   Mellanox ConnectX-5 以太网适配器卡片 - 使用 `mlx5_core`{.literal}
    驱动程序
-   Intel Ethernet Network Adapter XXV710 - 使用 `i40e`{.literal}
    驱动程序
-   Intel 82576 千兆位以太网控制器 - 使用 `igb`{.literal} 驱动程序
-   Broadcom NetXtreme II BCM57810 - 使用 `bnx2x`{.literal} 驱动程序
:::
:::
:::
::: section
::: titlepage
# []{#managing-virtual-devices_configuring-and-managing-virtualization.html#attaching-dasd-devices-to-virtual-machines-on-ibm-z_managing-virtual-devices}将 DASD 设备附加到 IBM Z 中的虚拟机 {.title}
:::
直接访问的存储设备（DASD）提供很多特定的存储功能。使用
`vfio-ccw`{.literal} 功能，您可以将 DASD 作为 mediated devices 分配给
IBM Z 主机上的虚拟机(VM)。例如，虚拟机可以访问 z/OS 数据集，或者与 z/OS
机器共享分配的 DASD。
::: itemizedlist
**先决条件**
-   您的主机系统使用 IBM Z 硬件构架并支持 FICON 协议。
-   目标虚拟机使用 Linux 客户机操作系统。
-   已安装 [*mdevctl*]{.emphasis} 软件包。
    ``` literallayout
    # yum install mdevctl
    ```
-   已安装 [*driverctl*]{.emphasis} 软件包。
    ``` literallayout
    # yum install driverctl
    ```
-   在主机中载入了必要的内核模块。要验证，请使用：
    ``` literallayout
    # lsmod | grep vfio
    ```
    输出应包含以下模块：
    ::: itemizedlist
    -   `vfio_ccw`{.literal}
    -   `vfio_mdev`{.literal}
    -   `vfio_iommu_type1`{.literal}
    :::
-   您有一个备用 DASD 设备供虚拟机独占使用，并且您知道设备的标识符。
    此流程使用 `0.0.002c`{.literal} 作为示例。在执行这些命令时，使用
    DASD 设备的标识符替换 `0.0.002c`{.literal}。
:::
::: orderedlist
**流程**
1.  获取 DASD 设备的子频道标识符。
    ``` literallayout
    # lscss -d 0.0.002c
    Device   Subchan.  DevType CU Type Use  PIM PAM POM  CHPIDs
    ----------------------------------------------------------------------
    0.0.002c 0.0.29a8  3390/0c 3990/e9 yes  f0  f0  ff   02111221 00000000
    ```
    在本例中，子频道标识符被检测到为
    `0.0.29a8`{.literal}。在以下步骤中，将 `0.0.29a8`{.literal}
    替换为检测到的设备的子频道标识符。
2.  如果上一步中 `的 lscs`{.literal}
    命令只显示标头输出和没有设备信息，请执行以下步骤：
    ::: orderedlist
    1.  从 `cio_ignore`{.literal} 列表中删除该设备。
        ``` literallayout
        # cio_ignore -r 0.0.002c
        ```
    2.  编辑虚拟机的内核命令行，并在不存在的情况下将带有 a `!`{.literal}
        标记的设备标识符添加到以 `cio_ignore=`{.literal} 开头的行。
        ``` literallayout
        cio_ignore=all,!condev,!0.0.002c
        ```
    3.  重复上一步以获取子频道标识符。
    :::
3.  将子频道绑定到 `vfio_ccw`{.literal} passthrough 驱动程序。
    ``` literallayout
    # driverctl -b css set-override 0.0.29a8 vfio_ccw
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    这会将 [*0.0.29a8*]{.emphasis} 子频道绑定到
    `vfio_ccw`{.literal}，这意味着 DASD
    无法在主机上使用。如果需要在主机上使用该设备，您必须首先删除自动绑定到
    \'vfio_ccw\'，并将子频道重新绑定到默认驱动程序：
    [**\# driverctl -b css unset-override
    [*0.0.29a8*]{.emphasis}**]{.strong}
    :::
4.  生成 UUID。
    ``` literallayout
    # uuidgen
    30820a6f-b1a5-4503-91ca-0c10ba12345a
    ```
5.  使用生成的 UUID 创建 DASD 介质化设备。
    ``` literallayout
    # mdevctl start --uuid 30820a6f-b1a5-4503-91ca-0c10ba12345a --parent 0.0.29a8 --type vfio_ccw-io
    ```
6.  使 mediated 设备持久。
    ``` literallayout
    # mdevctl define --auto --uuid 30820a6f-b1a5-4503-91ca-0c10ba12345a
    ```
7.  将介质设备附加到虚拟机。为此，请使用 `virsh edit`{.literal}
    实用程序编辑虚拟机的 XML 配置，将以下部分添加到 XML 中，并将
    `uuid`{.literal} 值替换为您在上一步中生成的 UUID。
    ``` programlisting
    ```
:::
::: orderedlist
**验证**
1.  获取分配给介质化 DASD 设备的 `libvirt`{.literal}
    的标识符。为此，可显示虚拟机的 XML 配置并查找 `vfio-ccw`{.literal}
    设备。
    ``` literallayout
    # virsh dumpxml vm-name
    [...]
    [...]
    ```
    在本例中，设备的分配的标识符是 `0.0.0009`{.literal}。
2.  登录到虚拟机的客户端操作系统，并确认列出了该设备。例如：
    ``` literallayout
    # lscss | grep 0.0.0009
    0.0.0009 0.0.0007  3390/0c 3990/e9      f0  f0  ff   12212231 00000000
    ```
3.  设置设备在线。例如：
    ``` literallayout
    # chccwdev -e 0.0009
    Setting device 0.0.0009 online
    Done
    ```
:::