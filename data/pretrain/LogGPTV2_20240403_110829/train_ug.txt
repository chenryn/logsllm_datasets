.b eopnotsupp
if you attempt to set it.
.tp
.br siocgifmtu ", " siocsifmtu
get or set the mtu (maximum transfer unit) of a device using
.ir ifr_mtu .
setting the mtu is a privileged operation.
setting the mtu to
too small values may cause kernel crashes.
.tp
.br siocgifhwaddr ", " siocsifhwaddr
get or set the hardware address of a device using
.ir ifr_hwaddr .
the hardware address is specified in a struct
.ir sockaddr .
.i sa_family
contains the arphrd_* device type,
.i sa_data
the l2 hardware address starting from byte 0.
setting the hardware address is a privileged operation.
.tp
.b siocsifhwbroadcast
set the hardware broadcast address of a device from
.ir ifr_hwaddr .
this is a privileged operation.
.tp
.br siocgifmap ", " siocsifmap
get or set the interface's hardware parameters using
.ir ifr_map .
setting the parameters is a privileged operation.
.ip
.in +4n
.ex
struct ifmap {
    unsigned long   mem_start;
    unsigned long   mem_end;
    unsigned short  base_addr;
    unsigned char   irq;
    unsigned char   dma;
    unsigned char   port;
};
.ee
.in
.ip
the interpretation of the ifmap structure depends on the device driver
and the architecture.
.tp
.br siocaddmulti ", " siocdelmulti
add an address to or delete an address from the device's link layer
multicast filters using
.ir ifr_hwaddr .
these are privileged operations.
see also
.br packet (7)
for an alternative.
.tp
.br siocgiftxqlen ", " siocsiftxqlen
get or set the transmit queue length of a device using
.ir ifr_qlen .
setting the transmit queue length is a privileged operation.
.tp
.b siocsifname
changes the name of the interface specified in
.i ifr_name
to
.ir ifr_newname .
this is a privileged operation.
it is allowed only when the interface
is not up.
.tp
.b siocgifconf
return a list of interface (network layer) addresses.
this currently
means only addresses of the
.b af_inet
(ipv4) family for compatibility.
unlike the others, this ioctl passes an
.i ifconf
structure:
.ip
.in +4n
.ex
struct ifconf {
    int               ifc_len; /* size of buffer */
    union {
        char         *ifc_buf; /* buffer address */
        struct ifreq *ifc_req; /* array of structures */
    };
};
.ee
.in
.ip
if
.i ifc_req
is null,
.b siocgifconf
returns the necessary buffer size in bytes
for receiving all available addresses in
.ir ifc_len .
otherwise,
.i ifc_req
contains a pointer to an array of
.i ifreq
structures to be filled with all currently active l3 interface addresses.
.i ifc_len
contains the size of the array in bytes.
within each
.i ifreq
structure,
.i ifr_name
will receive the interface name, and
.i ifr_addr
the address.
the actual number of bytes transferred is returned in
.ir ifc_len .
.ip
if the size specified by
.i ifc_len
is insufficient to store all the addresses,
the kernel will skip the exceeding ones and return success.
there is no reliable way of detecting this condition once it has occurred.
it is therefore recommended to either determine the necessary buffer size
beforehand by calling
.b siocgifconf
with
.i ifc_req
set to null, or to retry the call with a bigger buffer whenever
.i ifc_len
upon return differs by less than
.i sizeof(struct ifreq)
from its original value.
.ip
if an error occurs accessing the
.i ifconf
or
.i ifreq
structures,
.b efault
will be returned.
.\" slaving isn't supported in 2.2
.\" .
.\" .tp
.\" .br siocgifslave ", " siocsifslave
.\" get or set the slave device using
.\" .ir ifr_slave .
.\" setting the slave device is a privileged operation.
.\" .pp
.\" fixme . add amateur radio stuff.
.pp
most protocols support their own ioctls to configure protocol-specific
interface options.
see the protocol man pages for a description.
for configuring ip addresses, see
.br ip (7).
.pp
in addition, some devices support private ioctls.
these are not described here.
.sh notes
.b siocgifconf
and the other ioctls that accept or return only
.b af_inet
socket addresses
are ip-specific and perhaps should rather be documented in
.br ip (7).
.pp
the names of interfaces with no addresses or that don't have the
.b iff_running
flag set can be found via
.ir /proc/net/dev .
.pp
.b af_inet6
ipv6 addresses can be read from
.i /proc/net/if_inet6
or via
.br rtnetlink (7).
adding a new ipv6 address and deleting an existing ipv6 address
can be done via
.b siocsifaddr
and
.b siocdifaddr
or via
.br rtnetlink (7).
retrieving or changing destination ipv6 addresses of a point-to-point
interface is possible only via
.br rtnetlink (7).
.sh bugs
glibc 2.1 is missing the
.i ifr_newname
macro in
.ir  .
add the following to your program as a workaround:
.pp
.in +4n
.ex
#ifndef ifr_newname
#define ifr_newname     ifr_ifru.ifru_slave
#endif
.ee
.in
.sh see also
.br proc (5),
.br capabilities (7),
.br ip (7),
.br rtnetlink (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man7/system_data_types.7
.so man3/round.3
.so man3/conj.3
.\" copyright 1993 david metcalfe (PI:EMAIL)
.\" and copyright (c) 2008 linux foundation, written by michael kerrisk
.\"     
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" modified mon apr 12 12:49:57 1993, david metcalfe
.\" modified sat jul 24 18:56:22 1993, rik faith (PI:EMAIL)
.\" modified wed feb 20 21:09:36 2002, ian redfern (PI:EMAIL)
.\" 2008-07-09, mtk, add rawmemchr()
.\"
.th memchr 3  2021-03-22 "" "linux programmer's manual"
.sh name
memchr, memrchr, rawmemchr \- scan memory for a character
.sh synopsis
.nf
.b #include 
.pp
.bi "void *memchr(const void *" s ", int " c ", size_t " n );
.bi "void *memrchr(const void *" s ", int " c ", size_t " n );
.bi "void *rawmemchr(const void *" s ", int " c );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br memrchr (),
.br rawmemchr ():
.nf
    _gnu_source
.fi
.sh description
the
.br memchr ()
function scans the initial
.i n
bytes of the memory
area pointed to by
.i s
for the first instance of
.ir c .
both
.i c
and the bytes of the memory area pointed to by
.i s
are interpreted as
.ir "unsigned char" .
.pp
the
.br memrchr ()
function is like the
.br memchr ()
function,
except that it searches backward from the end of the
.i n
bytes pointed to by
.i s
instead of forward from the beginning.
.pp
the
.br rawmemchr ()
function is similar to
.br memchr ():
it assumes (i.e., the programmer knows for certain)
that an instance of
.i c
lies somewhere in the memory area starting at the location pointed to by
.ir s ,
and so performs an optimized search for
.ir c
(i.e., no use of a count argument to limit the range of the search).
if an instance of
.i c
is not found, the results are unpredictable.
the following call is a fast means of locating a string's
terminating null byte:
.pp
.in +4n
.ex
char *p = rawmemchr(s,\ \(aq\e0\(aq);
.ee
.in
.sh return value
the
.br memchr ()
and
.br memrchr ()
functions return a pointer
to the matching byte or null if the character does not occur in
the given memory area.
.pp
the
.br rawmemchr ()
function returns a pointer to the matching byte, if one is found.
if no matching byte is found, the result is unspecified.
.sh versions
.br rawmemchr ()
first appeared in glibc in version 2.1.
.pp
.br memrchr ()
first appeared in glibc in version 2.2.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br memchr (),
.br memrchr (),
.br rawmemchr ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
.br memchr ():
posix.1-2001, posix.1-2008, c89, c99, svr4, 4.3bsd.
.pp
the
.br memrchr ()
function is a gnu extension, available since glibc 2.1.91.
.pp
the
.br rawmemchr ()
function is a gnu extension, available since glibc 2.1.
.sh see also
.br bstring (3),
.br ffs (3),
.br index (3),
.br memmem (3),
.br rindex (3),
.br strchr (3),
.br strpbrk (3),
.br strrchr (3),
.br strsep (3),
.br strspn (3),
.br strstr (3),
.br wmemchr (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man2/stat.2
.so man3/wprintf.3
.\" copyright (c) 2005 michael kerrisk
.\" based on earlier work by PI:EMAIL and
.\" mike battersby 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" 2005-09-15, mtk, created new page by splitting off from sigaction.2
.\"
.th sigsuspend 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
sigsuspend, rt_sigsuspend \- wait for a signal
.sh synopsis
.nf
.b #include 
.pp
.bi "int sigsuspend(const sigset_t *" mask );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br sigsuspend ():
.nf
    _posix_c_source
.fi
.sh description
.br sigsuspend ()
temporarily replaces the signal mask of the calling thread with the
mask given by
.i mask
and then suspends the thread until delivery of a signal whose
action is to invoke a signal handler or to terminate a process.
.pp
if the signal terminates the process, then
.br sigsuspend ()
does not return.
if the signal is caught, then
.br sigsuspend ()
returns after the signal handler returns,
and the signal mask is restored to the state before the call to
.br sigsuspend ().
.pp
it is not possible to block
.b sigkill
or
.br sigstop ;
specifying these signals in
.ir mask ,
has no effect on the thread's signal mask.
.sh return value
.br sigsuspend ()
always returns \-1, with
.i errno
set to indicate the error (normally,
.br eintr ).
.sh errors
.tp
.b efault
.i mask
points to memory which is not a valid part of the process address space.
.tp
.b eintr
the call was interrupted by a signal;
.br signal (7).
.sh conforming to
posix.1-2001, posix.1-2008.
.sh notes
normally,
.br sigsuspend ()
is used in conjunction with
.br sigprocmask (2)
in order to prevent delivery of a signal during the execution of a
critical code section.
the caller first blocks the signals with
.br sigprocmask (2).
when the critical code has completed, the caller then waits for the
signals by calling
.br sigsuspend ()
with the signal mask that was returned by
.br sigprocmask (2)
(in the
.i oldset
argument).
.pp
see
.br sigsetops (3)
for details on manipulating signal sets.
.\"
.ss c library/kernel differences
the original linux system call was named
.br sigsuspend ().
however, with the addition of real-time signals in linux 2.2,
the fixed-size, 32-bit
.ir sigset_t
type supported by that system call was no longer fit for purpose.
consequently, a new system call,
.br rt_sigsuspend (),
was added to support an enlarged
.ir sigset_t
type.
the new system call takes a second argument,
.ir "size_t sigsetsize" ,
which specifies the size in bytes of the signal set in
.ir mask .
this argument is currently required to have the value
.ir sizeof(sigset_t)
(or the error
.b einval
results).
the glibc
.br sigsuspend ()
wrapper function hides these details from us, transparently calling
.br rt_sigsuspend ()
when the kernel provides it.
.\"
.sh see also
.br kill (2),
.br pause (2),
.br sigaction (2),
.br signal (2),
.br sigprocmask (2),
.br sigwaitinfo (2),
.br sigsetops (3),
.br sigwait (3),
.br signal (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at