# Abusing Bleeding-Edge Web Standards for AppSec Glory

## Presenters
- **Bryant Zadegan**
  - Advisor/Mentor at Mach37
  - keybase.io/bryant
  - PI:EMAIL
  - @eganist
  - Focuses on AppSec, mentors security startups, and occasionally "mentors" others on AppSec.
  - Paid a dollar to make Steve Ballmer dance, but only once.

- **Ryan Lester**
  - CEO and Co-Founder of Cyph
  - @TheRyanLester
  - Runs an end-to-end encrypted (E2EE) communication startup.
  - Previously ran QA automation at a rocket factory and was sued by Napster (not for piracy).

## Introduction
In this presentation, we will explore the misuse of bleeding-edge web standards for application security (AppSec) purposes. We will discuss why new standards often introduce unforeseen complications and how novel uses can encourage future adjustments.

### Why New Standards?
- **Frequent Drafting:** New standards are regularly proposed and implemented.
- **Unforeseen Complications:** Many new standards come with unexpected issues.
- **Future Tweaks:** Novel uses of these standards can lead to further refinements.

## Subresource Integrity (SRI)
- **Purpose:** Validate resources beyond your trust (e.g., CDNs).
- **Resource:** [caniuse.com/subresource-integrity](https://caniuse.com/subresource-integrity)

### Demo
- **Demo Link:** [heisenberg.co/srifallbackdemo/](https://heisenberg.co/srifallbackdemo/)
- **Source Code:** [github.com/cyph/sri-fallback](https://github.com/cyph/sri-fallback) (Simplified BSD License)

## Content Security Policy (CSP)
- **Combines semi-strict headers with strict directives.**
- **Allows pre-loading of trusted complex logic.**
- **Limitations:** Does not work for `frame-ancestors`, `report-uri`, or `sandbox` verbs.

### Demo
- **Demo Link:** [heisenberg.co/metacspdemo/](https://heisenberg.co/metacspdemo/)

### Considerations
- **Static Content Only in Initial Response!**
- **Best for adapting semi-recent applications for CSP.**
- **Trusted static logic is allowed to execute on initial load.**
- **Meta-Hardening prevents dynamic content from potentially executing later.**
- **Compatibility:** Works in Chrome 46+; no reporting in Firefox.

## Public-Key Pinning (HPKP)
- **Example Header:**
  ```http
  Public-Key-Pins: max-age=5184000; includeSubdomains; pin-sha256="az9AwClWuHM+fYV+d8Cv9B4sAwdcoUqj93omk18O/pc="; pin-sha256="5UONcYAsFtYscIlFlm4+aodoL20RRHzGaOeoSNEZ+iA="; "https://report-uri.io/report/[id]/reportOnly"
  ```
- **Resource:** [caniuse.com/hpkp](https://caniuse.com/hpkp)

### Uses of HPKP
- **Enable in-browser code signing.**
- **Control content changes and harden SRI.**
- **Enable nuanced web content blocking (NetSec).**
- **Track users…**
- **Be total jerks…** (in ways we shouldn't put in print)

### In-Browser Code Signing
- **ServiceWorker Implementation:** Code signing logic goes into the ServiceWorker.
- **Trust On First Use (TOFU):** For current and future code.
- **Cyph's Implementation:** A mature, audited implementation that required a patent application due to its novelty.

### Hardening SRI with HPKP
- **Set HPKP max-age to count down to deployment date.**
- **Rotate keys routinely.**

#### Benefits
- **Retain control of front-end content between releases.**
- **Mitigate risks of SRI hash tampering server-side.**

#### Considerations
- **Design-Time Decision:** Suitable for Single Page Apps (SPAs) only.

### Demo
- **Demo Link:** [redskins.io](https://redskins.io)

### Web Content Gateway
- **Lock users out of sites even when they're not on your network.**
- **Steps:**
  1. Set HPKP headers for flagged domains.
  2. Optionally, rotate keys weekly at the gateway.

### User Tracking
- **Prerequisites:**
  - Lots of (sub)domains to pin.
  - Browsers that allow HPKP incognito.
  - Rapid Key Rotation.

- **Server-Side:**
  - `/set`: Returns HPKP header.
  - `/check`: No-op — no HPKP header, status code 200.

- **Client-Side (JavaScript):**
  - Set new ID: Hit `/set` on a random subset of domains.
  - Check ID: Hit `/check` on all domains; note failures.

### Demo
- **Demo Link:** [cyph.wang](https://cyph.wang)

### Considerations
- **Risk:** DoSing tracker domains as a public service.
- **Options:**
  1. Domain whitelist for your own tracker.
  2. App-issued and tracker-verified nonce if analytics is your business model.

### Source Code
- **GitHub Repository:** [github.com/cyph/hpkp-supercookie](https://github.com/cyph/hpkp-supercookie) (New BSD License)

### Acknowledgments
- **Special Thanks To:**
  - Geller Bedoya, DigiCert, @el_d33, Jonn Callahan, Jann Horn and all of Cure53, Samy Kamkar, Jim Manico, Mike McBryde, Jim Rennie and his superb legal skill, Garrett Robinson, John Wilander, Doug Wilson, as well as the Chrome, Firefox, and Let's Encrypt security teams for their contributions.

### Additional Resources
- **GitHub Repository:** [github.com/cyph/appsec-glory](https://github.com/cyph/appsec-glory)

---

**Contact Information:**
- **Bryant Zadegan**
  - keybase.io/bryant
  - PI:EMAIL
  - @eganist

- **Ryan Lester**
  - @TheRyanLester