# 20 \| 方法内联（上）在前面的篇章中，我多次提到了方法内联这项技术。它指的是：在编译过程中遇到方法调用时，将目标方法的方法体纳入编译范围之中，并取代原方法调用的优化手段。方法内联不仅可以消除调用本身带来的性能开销，还可以进一步触发更多的优化。因此，它可以算是编译优化里最为重要的一环。以 getter/setter 为例，如果没有方法内联，在调用 getter/setter时，程序需要保存当前方法的执行位置，创建并压入用于 getter/setter的栈帧、访问字段、弹出栈帧，最后再恢复当前方法的执行。而当内联了对getter/setter 的方法调用后，上述操作仅剩字段访问。在 C2中，方法内联是在解析字节码的过程中完成的。每当碰到方法调用字节码时，C2将决定是否需要内联该方法调用。如果需要内联，则开始解析目标方法的字节码。> [复习一下：即时编译器首先解析字节码，并生成 IR 图，然后在该 IR> 图上进行优化。优化是由一个个独立的优化阶段（optimization> phase）串联起来的。每个优化阶段都会对 IR> 图进行转换。最后即时编译器根据 IR> 图的节点以及调度顺序生成机器码。]{.reference}同 C2 一样，Graal也会在解析字节码的过程中进行方法调用的内联。此外，Graal还拥有一个独立的优化阶段，来寻找指代方法调用的 IR节点，并将之替换为目标方法的 IR图。这个过程相对来说比较形象一些，因此，今天我就利用它来给你讲解一下方法内联。``{=html}    方法内联的过程public static boolean flag = true;public static int value0 = 0;public static int value1 = 1; public static int foo(int value) {    int result = bar(flag);    if (result != 0) {        return result;    } else {        return value;    }} public static int bar(boolean flag) {    return flag ? value0 : value1;}上面这段代码中的 foo 方法将接收一个 int 类型的参数，而 bar方法将接收一个 boolean 类型的参数。其中，foo 方法会读取静态字段 flag的值，并作为参数调用 bar 方法。![](Images/8ca95cafd56e1b1bf450a449687ee39f.png){savepage-src="https://static001.geekbang.org/resource/image/c0/59/c024b8b45570f25534f76f0c4d378559.png"}\**foo 方法的 IR 图（内联前）**在编译 foo 方法时，其对应的 IR 图中将出现对 bar 方法的调用，即上图中的 5号 Invoke 节点。如果内联算法判定应当内联对 bar方法的调用时，那么即时编译器将开始解析 bar 方法的字节码，并生成对应的 IR图，如下图所示。![](Images/13fcfdd569417fee037a6123dd2375dc.png){savepage-src="https://static001.geekbang.org/resource/image/96/55/96d8575326f7c1991c6677e6d2d17155.png"}\**bar 方法的 IR 图**接下来，即时编译器便可以进行方法内联，把 bar 方法所对应的 IR 图纳入到对foo 方法的编译中。具体的操作便是将 foo 方法的 IR 图中 5 号 Invoke节点替换为 bar 方法的 IR 图。![](Images/17e038e6ecdb731e889758892e15785b.png){savepage-src="https://static001.geekbang.org/resource/image/62/c8/6209f233f5518ee470eb08422c8d0bc8.png"}\**foo 方法的 IR 图（内联后）**除了将被调用方法的 IR 图节点复制到调用者方法的 IR图中，即时编译器还需额外完成下述三项操作。第一，被调用方法的传入参数节点，将被替换为调用者方法进行方法调用时所传入参数对应的节点。在我们的例子中，就是将bar 方法 IR 图中的 1 号 P(0) 节点替换为 foo 方法 IR 图中的 3 号LoadField 节点。第二，在调用者方法的 IR图中，所有指向原方法调用节点的数据依赖将重新指向被调用方法的返回节点。如果被调用方法存在多个返回节点，则生成一个Phi 节点，将这些返回值聚合起来，并作为原方法调用节点的替换对象。在我们的例子中，就是将 8 号 == 节点，以及 12 号 Return 节点连接到原 5 号Invoke 节点的边，重新指向新生成的 24 号 Phi 节点中。第三，如果被调用方法将抛出某种类型的异常，而调用者方法恰好有该异常类型的处理器，并且该异常处理器覆盖这一方法调用，那么即时编译器需要将被调用方法抛出异常的路径，与调用者方法的异常处理器相连接。经过方法内联之后，即时编译器将得到一个新的 IR图，并且在接下来的编译过程中对这个新的 IR图进行进一步的优化。不过在上面这个例子中，方法内联后的 IR图并没有能够进一步优化的地方。    public final static boolean flag = true;public final static int value0 = 0;public final static int value1 = 1; public static int foo(int value) {    int result = bar(flag);    if (result != 0) {        return result;    } else {        return value;    }} public static int bar(boolean flag) {    return flag ? value0 : value1;}不过，如果我们将代码中的三个静态字段标记为 final，那么 Java编译器（注意不是即时编译器）会将它们编译为常量值（ConstantValue），并且在字节码中直接使用这些常量值，而非读取静态字段。举例来说，bar方法对应的字节码如下所示。    public static int bar(boolean);  Code:     0: iload_0     1: ifeq          8     4: iconst_0     5: goto          9     8: iconst_1     9: ireturn在编译 foo 方法时，一旦即时编译器决定要内联对 bar方法的调用，那么它会将调用 bar 方法所使用的参数，也就是常数 1，替换 bar方法 IR 图中的参数。经过死代码消除之后，bar 方法将直接返回常数0，所需复制的 IR 图也只有常数 0 这么一个节点。经过方法内联之后，foo 方法的 IR 图将变成如下所示：\![](Images/10488ddaa1658d62bf1acdb552581dc7.png){savepage-src="https://static001.geekbang.org/resource/image/15/36/1506286ffb9c9d0d8a927e8174594536.png"}该 IR 图可以进一步优化（死代码消除），并最终得到这张极为简单的 IR 图：\![](Images/5a7fdb36b27c07d3806c7b185d48244b.png){savepage-src="https://static001.geekbang.org/resource/image/6a/03/6affa54acd4d5f180efacdac93b02a03.png"}
## 方法内联的条件方法内联能够触发更多的优化。通常而言，内联越多，生成代码的执行效率越高。然而，对于即时编译器来说，内联越多，编译时间也就越长，而程序达到峰值性能的时刻也将被推迟。此外，内联越多也将导致生成的机器码越长。在 Java虚拟机里，编译生成的机器码会被部署到 Code Cache 之中。这个 Code Cache是有大小限制的（由 Java 虚拟机参数 -XX:ReservedCodeCacheSize 控制）。这就意味着，生成的机器码越长，越容易填满 Code Cache，从而出现 Code Cache已满，即时编译已被关闭的警告信息（CodeCache is full. Compiler has beendisabled）。因此，即时编译器不会无限制地进行方法内联。下面我便列举即时编译器的部分内联规则。（其他的特殊规则，如自动拆箱总会被内联、Throwable类的方法不能被其他类中的方法所内联，你可以直接参考[JDK的源代码](http://hg.openjdk.java.net/jdk/jdk/file/da387726a4f5/src/hotspot/share/opto/bytecodeInfo.cpp#l197)。）**首先，由 -XX:CompileCommand 中的 inline 指令指定的方法，以及由\@ForceInline 注解的方法（仅限于 JDK 内部方法），会被强制内联。** 而由-XX:CompileCommand 中的 dontinline 指令或 exclude指令（表示不编译）指定的方法，以及由 \@DontInline 注解的方法（仅限于 JDK内部方法），则始终不会被内联。**其次，如果调用字节码对应的符号引用未被解析、目标方法所在的类未被初始化，或者目标方法是native 方法，都将导致方法调用无法内联。****再次，C2 不支持内联超过 9 层的调用（可以通过虚拟机参数-XX:MaxInlineLevel 调整），以及 1 层的直接递归调用（可以通过虚拟机参数-XX:MaxRecursiveInlineLevel 调整）。**> [如果方法 a 调用了方法 b，而方法 b 调用了方法 c，那么我们称 b 为 a 的> 1 层调用，而 c 为 a 的 2 层调用。]{.reference}最后，即时编译器将根据方法调用指令所在的程序路径的热度，目标方法的调用次数及大小，以及当前IR 图的大小来决定方法调用能否被内联。![](Images/abe87e14ccd15c12efff16b2fd6d200c.png){savepage-src="https://static001.geekbang.org/resource/image/49/c3/49fb3a3849e82ddcc74bd982a5e4eac3.jpg"}我在上面的表格列举了一些 C2相关的虚拟机参数。总体来说，即时编译器中的内联算法更青睐于小方法。
## 总结与实践今天我介绍了方法内联的过程以及条件。方法内联是指，在编译过程中，当遇到方法调用时，将目标方法的方法体纳入编译范围之中，并取代原方法调用的优化手段。即时编译器既可以在解析过程中替换方法调用字节码，也可以在 IR图中替换方法调用 IR节点。这两者都需要将目标方法的参数以及返回值映射到当前方法来。方法内联有许多规则。除了一些强制内联以及强制不内联的规则外，即时编译器会根据方法调用的层数、方法调用指令所在的程序路径的热度、目标方法的调用次数及大小，以及当前IR 图的大小来决定方法调用能否被内联。今天的实践环节，你可以利用虚拟机参数 -XX:+PrintInlining来打印编译过程中的内联情况。具体每项内联信息所代表的意思，你可以参考[这一网页](https://wiki.openjdk.java.net/display/HotSpot/Server+Compiler+Inlining+Messages)。![](Images/a500044f1e4938fb43719f802cba82d8.png){savepage-src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg"}
# 21 \| 方法内联（下）在上一篇中，我举的例子都是静态方法调用，即时编译器可以轻易地确定唯一的目标方法。然而，对于需要动态绑定的虚方法调用来说，即时编译器则需要先对虚方法调用进行去虚化（devirtualize），即转换为一个或多个直接调用，然后才能进行方法内联。**即时编译器的去虚化方式可分为完全去虚化以及条件去虚化（guardeddevirtualization）。****完全去虚化**是通过类型推导或者类层次分析（class hierarchyanalysis），识别虚方法调用的唯一目标方法，从而将其转换为直接调用的一种优化手段。它的关键在于证明虚方法调用的目标方法是唯一的。**条件去虚化**则是将虚方法调用转换为若干个类型测试以及直接调用的一种优化手段。它的关键在于找出需要进行比较的类型。在介绍具体的去虚化方式之前，我们先来看一段代码。这里我定义了一个抽象类BinaryOp，其中包含一个抽象方法 apply。BinaryOp 类有两个子类 Add 和Sub，均实现了 apply 方法。    abstract class BinaryOp {  public abstract int apply(int a, int b);} class Add extends BinaryOp {  public int apply(int a, int b) {    return a + b;  }} class Sub extends BinaryOp {  public int apply(int a, int b) {    return a - b;  }}下面我便用这个例子来逐一讲解这几种去虚化方式。
## 基于类型推导的完全去虚化基于类型推导的完全去虚化将通过数据流分析推导出调用者的动态类型，从而确定具体的目标方法。``{=html}    public static int foo() {  BinaryOp op = new Add();  return op.apply(2, 1);} public static int bar(BinaryOp op) {  op = (Add) op;  return op.apply(2, 1);}举个例子，上面这段代码中的 foo 方法和 bar 方法均会调用 apply方法，且调用者的声明类型皆为 BinaryOp。这意味着 Java 编译器会将其编译为invokevirtual 指令，调用 BinaryOp.apply 方法。前两篇中我曾提到过，在 Sea-of-Nodes 的 IR系统中，变量不复存在，取而代之的是具体值。这些具体值的类型往往要比变量的声明类型精确。\![](Images/6b6cd2213ec1cee5c783e7632d033667.png){savepage-src="https://static001.geekbang.org/resource/image/28/07/2874be42bccaece59ed2484aaa478407.png"}**foo 方法的 IR 图（方法内联前）**![](Images/a25f70eab2cb5dab3fa411bc3f2596fb.png){savepage-src="https://static001.geekbang.org/resource/image/32/fc/32ce05f4929ae328ffbf5517175420fc.png"}
### bar 方法的 IR 图（方法内联前）在上面两张 IR 图中，方法调用的调用者（即 8 号 CallTarget节点的第一个依赖值）分别为 2 号 New 节点，以及 5 号 Pi节点。后者可以简单看成强制转换后的精确类型。由于这两个节点的类型均被精确为Add 类，因此，原 invokevirtual 指令对应的 9 号 invoke 节点都被识别对Add.apply 方法的调用。经过对该具体方法的内联之后，对应的 IR 图如下所示：![](Images/340f06c440051e3b7b738d82346e7863.png){savepage-src="https://static001.geekbang.org/resource/image/a9/0d/a90e99097591778a4dd5d145f84ed00d.png"}