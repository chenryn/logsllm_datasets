which uses the previous learned MAC/VLAN to port mapping (un-
derlined variable) to install forwarding rules. When the application
receives a PacketIn message (which means the first packet of a
new flow), if the destination MAC/VLAN has been learned before
from the switch (Line 23 - 30), the application will install a flow rule
Figure 2: Attacking the LearningSwitch Application
install/delete/modify a rule. And it will trigger a FlowRemoved mes-
sage to the control plane when a rule has expired or been removed.
About the control plane, we leverage the abstract modeling of the
SDN control plane in ConGuard [44] and propose a similar model
that can represent most of existing mainstream SDN controllers
(e.g., POX [10], Floodlight [3], OpenDaylight [8]). In this model, the
SDN control plane embraces an event-driven system. Multiple con-
current modules (also known as applications, we use the two words
interchangeably in this paper) communicate via events. There is a
Core Services module that works as the “event broker”. It receives
messages from the data plane (via OpenFlow messages) or the net-
work administrator (via REST APIs) and dispatches the events (e.g.,
PacketIn event, FlowRemoved event). Other applications in the
control plane subscribe the needed events from the Core Services.
Each application has several event handler functions to process
the events and make forwarding decisions. Some applications may
dispatch their own event types, publish to the Core Services and
allow other applications to subscribe. For example, in Floodlight [3]
controller, the LinkDiscovery application will discover every link
in the data plane and dispatch LinkUp and LinkDown events. Other
applications like the TopologyManager module can receive the
LinkUp/Down events and change the topology they have learned. In
this paper, we focus on the event handler functions of every applica-
tion because they represent the major logic that makes forwarding
decisions.
2.2 Threat Model and Assumptions
Similar to existing research in digital/network forensic [22, 29, 30,
40], we trust the networking OS (i.e., the SDN controller) and our
monitoring system (as an application in the SDN controller) and
treat them as a trusted computing base (TCB). We assume no rootkit
and also assume all applications running in the SDN control plane
are initially benign but could be mis-configured or buggy/vulnera-
ble. The bugs/vulnerabilities inside the applications written in Java
in mainstream controllers typically do not cause buffer overflow or
executable code injection. Instead, they might be exploited to crash
the app [44] or mislead network forwarding decisions [15, 19, 44].
For example, TopoGuard project [19] discussed an issue in the
topology discovery application which can be exploited to poison
the topology learned by the controller and make wrong routing
decisions. In this paper, these security issues of the SDN apps in the
control plane that can be exploited and lead to network forwarding
problems in the data plane are our targeted security problems. In
our threat model, we assume an attacker can take control of host
Host2Sw2Sw3Sw1Host1Dst: Host 2?to forward this flow to the port in the pair with the MAC/VLAN,
otherwise flood the packet (Line 20 - 21).
The above learning-based algorithm is vulnerable since the “learned”
information could be spoofed that will mislead the future forward-
ing decision. Illustrated in Figure 2, an attacker can spoof the MAC
address of Host 2 and make a connection to Host 1. The operation
will make every switch in the network learn that the MAC of Host
2 matches the attacker’s host. Later, when the real Host 2 makes a
connection to Host 1, the traffic from Host 1 will be forwarded to
the attacker. As a result, Host 2 does not have network connection
to Host 1. However, it is hard for Host 2 to pinpoint the root cause.
That is because she does not have enough information about what
happened in the control plane and data plane in the past. Host 2
desires a tool that receives her trouble ticket and pinpoints the root
cause of the forwarding problem.
2.4 Problem Statement
Traditional diagnosis tools can only locate the issues at either the
network level (e.g., Anteater [29]) or host level (e.g., Forenscope
[13]), and are not capable of integrating the two levels. Several
troubleshooting and verification tools in the context of SDN have
been proposed in recent years. They provide functions of static or
dynamic network-wide invariant verification [23–25], model check-
ing [12], packet history analysis [17], record and replay [43] and
delta debugging [35]. However, these tools fall short because of lim-
ited expressiveness (invariant expression), scalability (exponential
explosion), non-determinism (trace replay) or coarse granularity
(network flow/flow rule level) issues.
Unlike existing approaches, we leverage the concept of forensics
which records system activities in runtime and makes use of them
for diagnosis. Suppose we have enough information about what
happened in the SDN framework, for the above running example,
our concrete diagnosing steps can be like follows:
Step 1. We first analyze the forwarding rules in the data plane
to find out the set of rules that result in the forwarding problem.
We identify them as “suspicious” forwarding rules. In the running
example, the rules that forward the traffic whose MAC belongs to
Host 2 to the attacker are suspicious rules.
Step 2. Based on the suspicious rules, we can list all OpenFlow
messages that install/modify these rules.
Step 3. By recording the execution traces of the SDN appli-
cations, we can trace the relevant control plane activities which
generate the messages.
Step 4. By analyzing the causal relationship among different
activities in the execution trace that generate the messages, we
finally find out that the wrong forwarding decision is made by two
previous data plane activities. One is the new flow event from Host
1. The other is the new flow event (using spoofed source MAC)
from the attacker. Obviously, the spoofed packet from the attacker
is the root cause of the problem.
In summary, our idea is to record detailed activities in both the
control and data plane and build the causal relationship between
them. Nevertheless, realizing the forensics and diagnosis in SDN
networks requires tackling three challenging problems:
• First, how to decide useful activities that are necessary for the
diagnosing purpose?
• Second, how to build the causal relationship among different
• How to efficiently query/locate the suspicious activities from
activities?
the big data?
Besides, our system has the following design goals:
Fine Granularity: We aim to provide fine-grained details for
the execution traces (e.g., every main step that makes the forward-
ing decision) and root causes of forwarding problems (e.g., which
message/event/packet/piece of code is the root cause).
Minor Overhead: Forensics systems will introduce unavoidable
overhead. To analyze the runtime behaviors of the SDN framework,
unlike existing information flow analysis approaches (e.g., dynamic
taint-tracking), we aim to design a relatively lightweight solution.
Easy-to-Query: Our tool aims to support both directly querying
for network forwarding issues and querying for detail activities in
both the control plane and the data plane, and provide user-friendly
query interfaces.
3 MODELING OF THE SDN ACTIVITIES
In this section, we explain ForenGuard’s modeling of activities in
both the SDN control plane and the data plane.
Data Plane Activities: The purpose of recording the states of
the data plane is to understand the forwarding behaviors at any
time. First, we give a definition of the data plane state:
Definition 1: At time t, the state of the data plane (denoted as
st ) is the value of the set of all flow entries at all switches at time t.
st = {r1, r2, ...rn}|time =t
ri = (switchID, entryID,(match, action, priority))
(1)
Definition 2: A transition (denoted as ai) of the data plane is one
OpenFlow message that is triggered by or will trigger the change
of the state.
For instance, the FlowMod message sent from the control plane
will install/modify/remove a flow rule in one switch. And FlowRemoved
message sent from the data plane means a flow rule has been ex-
pired/removed. These two messages are types of transitions. We
use → to describe the transition of data plane state. So if an activity
ai triggers that the state of the data plane transits from sx to sy,
then: sx
at−−→ sy.
The state of the data plane can clearly show the forwarding
behavior at that time. And the transitions can explain the reason
of the state changes. In our diagnosis steps, we first search for
the corresponding data plane state that starts to have the faulty
forwarding behavior and then find the activity which causes the
transition to that state. For instance, in our running example, when
Host 2 observes that there is no network connection between Host
1 and Host 2, we start to search the state that tells us how the data
plane forwards the traffic of Host 2 (either source or destination
address is Host 2). We can quickly find that in some state, there is a
forwarding path that matches Host 2’s traffic but is between Host 1
and another location (not Host 2). Then by searching the transitions
and corresponding activities, we find that there are several FlowMod
messages that make the faulty forwarding path. After we find the
faulty data plane states and corresponding activities, our next step
is to move to the control plane and understand why and how the
control plane makes such forwarding decisions.
Figure 3: System Design of ForenGuard
Definition
Start the function f of app A in thread td
Terminate the function f of A in thread td
Operation
Init(f, A, td)
End(f, A, td)
Read(v, td)
Write(v, td)
Dispatch(e, td)
Receive(e, td)
Run(A)
Read variable v in thread td
Write variable v in thread td
Dispatch event e in thread td
Receive event e in thread td
run() function of a singleton task in app A
Send(sw, msg, td)
Send message msд to
switch sw in thread td
Table 1: Control Plane Operations
Control Plane Activities: We aim to record the execution of
the control plane to understand how each application receives and
dispatches events, and makes forwarding decisions during runtime.
We model the execution of the controller as a sequence of operations
to functions, state variables and events.
The operations in Table 1 list the activities that we think can
explain the major decision-making logic of the control plane. We
can divide the operations into three categories: function operations,
variable operations and communication operations. The initiation
and the termination of a function instance show the dynamic call
graphs. Specifically, the Run operation means that some applica-
tions may have a singleton task that maintains a life-cycle of a
run() function. This function itself could trigger some events or
modify the value of state variables. For example, some singleton
tasks will periodically clear the values of some state variables (e.g.,
clear the list of hosts information). For variable operations, the
read and write operations of state variables help to understand the
information flows in runtime. We define the state variables as the
global variables in every application (e.g., the MAC/VLAN to port
mapping table in the running example).2 The other three opera-
tions are communication operations. The Send operation means
this function generates new OpenFlow message to the data plane,
which may trigger the state transition in the data plane.
The purpose of logging the execution of the control plane is to
help pinpoint the root cause of some suspicious messages. When
we figure out the suspicious messages that trigger the data plane
state to have forwarding problems, we can observe the steps how
the control plane generates the messages. When diagnosing the
forwarding problem, the logged execution can explain which ap-
plication, which operations and which events/variables affect the
decisions made by the control plane. In the running example, when
2In our implementation of ForenGuard that works on Java-based controllers, the
state variables are the instance variables of the main class of each application.
Host 2 reports the connection problem and we already find the
suspicious OpenFlow messages, we can observe that the function
processPacketIn receives some new flow events, checks the value
of some fields in the MAC/VLAN to port mapping and generates
the suspicious messages. So the new flow event that triggers the
function to generate the faulty flow rule is the direct cause, and
the runtime value of the mapping table is the indirect cause of the
problem. Then we keep searching previous operations that write
the certain filed of the mapping table. At last, we find another event
which shows a new flow causes such MAC/VLAN to port pair to
the mapping table, which is the root cause of the reported problem.
4 SYSTEM DESIGN
In this paper, we propose a fine-grained forensics and diagnosis
system, named ForenGuard, which can help network administra-
tors to pinpoint security issues in software defined networks. The
key idea behind is that ForenGuard makes the trade-off between
SDN controller performance and the cost of monitoring sensitive
operations. To this end, ForenGuard is designed as three-fold.
First, ForenGuard applied static program analysis to identify the
minimal set of variables and operations whose changes may be
associated with future security issues. For convenience, we refer
to these variables and operations as state variables and operations
(according to our model of the control plane in Section 3). To mon-
itor these variables and operations in the run-time with minimal
overhead, ForenGuard instrumented the code of the target con-
troller. To monitor the information flow in the run-time, we also
design a novel lightweight flow tracking approach, which is also
implemented in the instrumentation. Second, ForenGuard deploys
and runs the newly instrumented SDN controller. By analyzing the
controller log in real time, the network activities are constructed
based on causal relationship. Finally, once administrators find a
routing problem, ForenGuard can help figure out the root reason
of the problem using an easy-to-query interface.
4.1 System Architecture
ForenGuard works on top of the SDN control plane and does not
disrupt the normal operation of other controller applications. As
showed in Figure 3, our system consists of three modules: 1) Pre-
processor, which conducts static analysis to extract the concise set
of activities for the recording purpose and further instruments SDN
controller to monitor the sensitive operations and apply our light-
weight information flow tracking approach; 2) Activity Logger,
DiagnosisPreprocessorGlobal Control Flow Graph AnalysisData Dependency Graph AnalysisInstrumentationApp.classRunActivity LoggerData Plane  Activity CollectorControl Plane Activity CollectorCausal Dependency GeneratorQueriesLikely Root CausesDatabasewhich runs the instrumented controller and dynamically recon-
structs the causal relationships from the collected activity logs; 3)
Diagnosis, which provides an easy-to-use diagnosis interface and
can help pinpoint the root reason of a security problem. In the
following of this section, we describe the design details of each
module and corresponding techniques.
4.2 Preprocessor
The goals of the Preprocessor module are three-fold: using static
analysis to extract activities, generating data dependency graphs
and instrumenting the controller. The Preprocessor module stati-
cally analyzes the source code of an SDN controller.3 As explained
in Section 3, to reason about how each forwarding decision has
been made from the control plane, we need to record the impor-
tant operations and the information flows (e.g., which flow rule is
triggered by which data plane events.). However, dynamic analysis
(e.g., taint analysis) to track the information flows will inevitably
add huge runtime overhead, which is unacceptable in the SDN
control plane, while static analysis is not precise. Instead, we aim
to achieve a trade-off between the overhead and precision. Foren-
Guard statically identifies the state variables, analyzes the data
flows and instruments the read/write operations of the variables.
Then, these state variables and operations are further recorded to
build the information flows. For example, in the running exam-
ple in Section 2, ForenGuard is able to analyze the information
flows from the data sources (e.g., the PacketIn event and/or one
filed of the MAC/VLAN to port map) to the generated messages.
Next we will detail how ForenGuard conducts static analysis and
instrumentation.
Static Analysis: The Preprocessor module consists of two sub-
modules: global control flow graph analysis and data dependency
graph analysis. Given an SDN controller application, ForenGuard
runs the sub-module global control flow graph analysis to first con-
vert its source code into an intermediate representative language
(bytecode) and transform to a global control flow graph (CFG).
Then, ForenGuard identifies the important operations according