14.2树的递归
118/143 -
if (left == -1 1l right == -1 11 abs(left - right) > 1) {
return -1;
return 1 + max(left, right);
543.Diameter of Binary Tree (Easy)
题目描述
求一个二叉树的最长直径。直径的定义是二叉树上任意两节点之间的无向距离。
输人输出样例
输入是一个二叉树，输出一个整数，表示最长直径。
Input:
/
1
2
/\
4
Output: 3
在这个样例中，最长直径是[4,2,1,3]和[5,2,1,3]。
题解
同样的，我们可以利用递归来处理树。解题时要注意，在我们处理某个子树时，我们更新的
最长直径值和递归返回的值是不同的。这是因为待更新的最长直径值是经过该子树根节点的最长
直径（即两侧长度）：而函数返回值是以该子树根节点为端点的最长直径值（即一侧长度），使用
这样的返回值才可以通过递归更新父节点的最长直径值）。
//主函数
int diameterOfBinaryTree(TreeNode* root) {
int diameter = 0;
helper (root, diameter) ;
return dianeter;
//辅函数
Int helper(TreeNode* node, intk dianeter){
if (!node){
return 0;
int 1 = helper (node->left, diameter), r = helper (node->right, diameter);
diameter = max(1 + r, diameter);
return max(1, r) + 1;
---
## Page 124
14.2树的递归
119/143 -
437.Path Sum III (Easy)
题目描述
给定一个整数二叉树，求有多少条路径节点值的和等于给定值。
输人输出样例
输人一个二叉树和一个给定整数，输出一个整数，表示有多少条满足条件的路径。
Input: sum
8,tree
10
5
- 3
/
3
3
2
11
/
3-2
1
:ndang
在这个样例中，和为8的路径一共有三个：[5,3],[5,2,1],[-3,11]]。
题解
递归每个节点时，需要分情况考虑：（1）如果选取该节点加入路径，则之后必须继续加入连
续节点，或停止加人节点（2）如果不选取该节点加入路径，则对其左右节点进行重新进行考虑。
因此一个方便的方法是我们创建一个辅函数，专门用来计算连续加入节点的路径。
//主函数
int pathSun(TreeNode* root, int sum) {
return root? pathSumStartWithRoot(root, sum) +
pathSum(root->left, sum) + pathSum(root->right, sum) : 0;
//辅函数
int pathSumStartWithRoot(TreeNode* root, int sum){
if (!root){
return 0;
int count = root->val == sum? 1: 0;
count += pathSumStartWithRoot(root->left, sum - root->val);
count += pathSumStartWithRoot(root->right, sum - root->val);
return count;
101. Symmetric Tree (Easy)
题目描述
判断一个二叉树是否对称。
---
## Page 125
14.2树的递归
120/143 -
输人输出样例
输人一个二叉树，输出一个布尔值，表示该树是否对称。
Input :
1
/
2
2
//
3443
Output: true
题解
判断一个树是否对称等价于判断左右子树是否对称。笔者一般习惯将判断两个子树是否相等
或对称类型的题的解法叫做“四步法”：（1）如果两个子树都为空指针，则它们相等或对称（2）
如果两个子树只有一个为空指针，则它们不相等或不对称（3）如果两个子树根节点的值不相等，
则它们不相等或不对称（4）根据相等或对称要求，进行递归处理。
//主函数
boolisSymmetric(TreeNode *root)(
return root? isSymmetric(root->left, root->right): true;
//辅函数
bool isSymmetric(TreeNode* left, TreeNode* right) {
if(!left &&!right){
return true;
if (!left 1l!right){
return false;
if (left->val != right->val) {
return false;
return isSymmetric(left->left, right->right) && isSymmetric(left->right,
right ->left) ;
1110. Delete Nodes And Return Forest (Medium)
题目描述
给定一个整数二叉树和一些整数，求删掉这些整数对应的节点后，剩余的子树。
输人输出样例
输入是一个整数二叉树和一个一维整数数组，输出一个数组，每个位置存储一个子树（的根
节点)。
---
## Page 126
14.3层次追历
121/143 -
Input: to_delete = [3,5], tree =
1
/\
2
//\
56
7
Output:[
2
6,7]
题解
这道题最主要需要注意的细节是如果通过递归处理原树，以及需要在什么时候断开指针。同
时，为了便于寻找待剩除节点，可以建立一个哈希表方便查找。笔者强烈建议读者在看完题解后，
自己写一遍本题，加深对于递归的理解和运用能力。
//主函数
vector delNodes(Treellode* root, vector& to_delete) {
vector forest;
unordered_set dict(to_delete.begin() , to_delete.end());
root - helper(root, dict, forest);
if (root) {
forest push_back(root) ;
return forest;
//辅函数
TreeNode* helper(TreeNode* root, unordered_set & dict, vector &
forest) {
if (!root){
return root;
root->left = helper(root->left, dict, forest);
root->right = helper(root->right, dict, forest) ;
if (dict.count (root->val)) {
if (root->left){
forest.push_back(root->left);
if (root->right){
forest .push_back(root->right);
root = NULL;
return root;
---
## Page 127
14.3层次追历
122/143 
14.3层次遍历
我们可以使用广度优先搜索进行层次追历。注意，不需要使用两个队列来分别存储当前层的
节点和下一层的节点，因为在开始遍历一层的节点时，当前队列中的节点数就是当前层的节点
数，只要控制遍历这么多节点数，就能保证这次遍历的都是当前层的节点。
637.Average of Levels in Binary Tree (Easy)
题目描述
给定一个二叉树，求每一层的节点值的平均数。
输人输出样例
输入是一个二叉树，输出是一个一维数组，表示每层节点值的平均数。
Input:
3
/
9 20
/
15
Output:[3, 14.5,11]
题解
利用广度优先搜索，我们可以很方便地求取每层的平均值。
vector averageOfLevels(TreeNode* root) {
vector ans;
if (!root){
return ans;
queue q;
q-push(root);
while (!q-empty()){
int count = q.size();
double sum = 0;
for (int i = 0; i left){
q.push(node->left);
if (node->right){
q. push (node->right) ;
ans.push_back(sum / count);
return ans;
---
## Page 128
14.4前中后序遍历
123/143 -
{
14.4前中后序追历
前序遍历、中序遍历和后序遍历是三种利用深度优先搜索遍历二叉树的方式。它们是在对节
点访问的顺序有一点不同，其它完全相同，考虑如下一棵树，
前序遍历先遍历父结点，再遍历左结点，最后遍历右节点，我们得到的遍历顺序是[12453
6].
void preorder (Treellode*root)(
visit (root);
preorder(root->left);
preorder(root->right);
中序遍历先遍历左节点，再遍历父结点，最后遍历右节点，我们得到的遍历顺序是[42513
6].
void inorder(TreeNode*root){
inorder(root->left);
visit(root);
inorder(root->right);
后序遍历先遍历左节点，再遍历右结点，最后遍历父节点，我们得到的遍历顺序是[45263
1].
void postorder(TreeMode*root){
postorder(root->left);
postorder (root->right) ;
visit (root) ;
105. Construct Binary Tree from Preorder and Inorder Traversal (Medium)
题目描述
给定一个二叉树的前序遍历和中序遍历结果，尝试复原这个树。已知树里不存在重复值的节
点。
---
## Page 129
14.4前中后序遍历
124/143 
输人输出样例
输入是两个一维数组，分别表示树的前序遍历和中序遍历结果：输出是一个二叉树。
Input: preorder - [4,9,20,15,7], inorder = [9,4,15,20,7]
Output :
4
/
9 20
/
15
7
题解
我们通过本题的样例讲解一下本题的思路。前序遍历的第一个节点是4，意味着4是根节点。
我们在中序遍历结果里找到4这个节点，根据中序遍历的性质可以得出，4在中序遍历数组位置
的左子数组为左子树，节点数为1，对应的是前序排列数组里4之后的1个数字（9）：4在中序
逾历数组位置的右子数组为右子树，节点数为3，对应的是前序排列数组里最后的3个数字。有
了这些信息，我们就可以对左子树和右子树进行递归复原了。为了方便查找数字的位置，我们可
以用哈希表预处理中序遍历的结果。
//主函数
TreeNode* buildTree(vector& preorder, vector& inorder) {
if (preorder.empty()）{
return nullptr;
unordered_map hash;
for (int i - O; i  & hash, vector& preorder
，int s0, int e0, int s1) {
if (s0 > e0) {
return nullptr;
int mid = preorder[s1], index = hash[mid], leftLen = index - s0 - 1;
TreeNode* node = nev TreeNode(mid);
node->left = buildTreeHelper(hash, preorder, s0, index - 1, 81 + 1);
node->right = buildTreeHelper(hash, preorder, index + 1, e0, s1 + 2 +
leftLen);
return node;
144.Binary Tree Preorder Traversal (Medium)
题目描述
不使用递归，实现二叉树的前序遍历。
---
## Page 130
14.5二叉查找树
125/143 -
输人输出样例
输入一个二叉树，输出一个数组，为二叉树前序遍历的结果，
Input :
1
2
Output:[1,2,3]
3
题解
因为递归的本质是栈调用，因此我们可以通过栈来实现前序遍历。注意入栈的顺序。
vector preorderTraversal (TreeNode* root) {
vector ret;
if (!root){
return ret;
stack s;
8 .push(root);
while (!s.empty()){
Treelode* node - s.top();
8.pop() ;
ret .push_back (node->val);
if (node->right){
8.push（node->right）；//先右后左，保证左子树先遍历
if (node->left){
8.push(node->left);
return ret;
14.5
二叉查找树
二叉查找树（Binary SearchTree，BST）是一种特殊的二叉树：对于每个父节点，其左子节点
的值小于等于父结点的值，其右子节点的值大于等于父结点的值。因此对于一个二叉查找树，我