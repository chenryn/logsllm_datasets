[3] Metasploit. http://www.metasploit.com.
[4] Arkeia
77
overﬂow (win32).
backup
client
type
http://www.metasploit.com/modules/exploit/windows/arkeia/type77,
visited in Jan 2013.
[5] Conﬁcker worm using metasploit
payload
to
spread.
http://blogs.mcafee.com/mcafee-labs/conﬁcker-worm-using-
metasploit-payload-to-spread, visited in Jan 2013.
[6] Top vulnerability exploit tools. http://sectools.org/tag/sploits, vis-
ited in Jan 2013.
[7] ARTZI, S., KIE, A., DOLBY, J., ERNST, M. D., KIEZUN, A.,
TIP, F., DIG, D., AND PARADKAR, A. Finding Bugs In Dy-
namic Web Applications.
In Proceedings of the 2008 Interna-
tional Symposium on Software Testing and Analysis (ISSTA’08),
pp. 261–272.
[8] AVGERINOS, T., CHA, S. K., LIM, B., HAO, T., AND BRUM-
LEY, D. AEG: Automatic Exploit Generation.
In Proceed-
ings of the Network and Distributed System Security Symposium
(NDSS’11).
[9] BOONSTOPPEL, P., CADAR, C., AND ENGLER, D. RWset:
Attacking Path Explosion in Constraint-Based Test Generation.
In Proceedings of the 14th International Conference on Tools
and Algorithms for the Construction and Analysis of Systems
(TACAS’08), pp. 351–366.
[10] BRUMLEY, D., NEWSOME, J., AND SONG, D. Towards Au-
tomatic Generation of Vulnerability-Based Signatures.
In Pro-
ceedings of the 2006 IEEE Symposium on Security and Privacy
(S&P’06), pp. 2–16.
[11] BRUMLEY, D., WANG, H., JHA, S., AND SONG, D. Creating
Vulnerability Signatures Using Weakest Preconditions. In Pro-
ceedings of the 20th IEEE Computer Security Foundations Sym-
posium (CSF’07), pp. 311–325.
[12] BRUNI, ALESSANDRO DISNEY, T. A Peer Architecture for
Lightweight Symbolic Execution. Tech. rep., UC Santa Cruz,
2011.
[13] CABALLERO, J., LIANG, Z., POOSANKAM, P., AND SONG,
D. Towards Generating High Coverage Vulnerability-Based Sig-
natures with Protocol-Level Constraint-Guided Exploration.
In
Proceedings of the 12th International Symposium on Recent Ad-
vances in Intrusion Detection (RAID’09), pp. 161–181.
[14] CADAR, C., GANESH, V., AND PAWLOWSKI, P. EXE: Auto-
matically Generating Inputs of Deathh.
In Proceedings of the
13th ACM Conference on Computer and Communications Secu-
rity (CCS’06), pp. 322 – 335.
[15] CHAUDHURI, A., AND FOSTER, J. S. Symbolic Security Anal-
ysis of Ruby-on-Rails Web Applications. In Proceedings of the
17th ACM Conference on Computer and Communications Secu-
rity (CCS’10), pp. 585–594.
[16] CHO, C., BABIC, D., AND POOSANKAM, P. MACE: Model-
inference-Assisted Concolic Exploration for Protocol and Vulner-
ability Discovery. In Proceedings of the 20th USENIX Security
Symposium (2011).
[18] COSTA, M., CROWCROFT, J., AND CASTRO, M. Vigilante:
End-to-End Containment of Internet Worms.
In Proceedings
of the 20th ACM Symposium on Operating Systems Principles
(SOSP’05), pp. 133–147.
[19] CUI, W., PEINADO, M., WANG, H. J., AND LOCASTO, M. E.
ShieldGen: Automatic Data Patch Generation for Unknown Vul-
nerabilities with Informed Probing. Proceedings of the 2007
IEEE Symposium on Security and Privacy (S&P’07), 252–266.
[20] GODEFROID, P., AND KLARLUND, N. DART: Directed Auto-
mated Random Testing. In Proceedings of the 2005 ACM SIG-
PLAN Conference on Programming Language Design and Imple-
mentation (PLDI’05), pp. 213–223.
[21] GODEFROID, P., LEVIN, M. Y., AND BERKELEY, U. C. Au-
tomated Whitebox Fuzz Testing. In Proceedings of Network and
Distributed Systems Security (NDSS’08).
[22] GODEFROID, P., AND LUCHAUP, D. Automatic Partial Loop
Summarization in Dynamic Test Generation. In Proceedings of
the 2011 International Symposium on Software Testing and Anal-
ysis (ISSTA’11), pp. 23–33.
[23] KIEZUN, A., GANESH, V., GUO, P. J., HOOIMEIJER, P., AND
ERNST, M. D. HAMPI: A Solver for String Constraints. In Pro-
ceedings of the 18th International Symposium on Software Test-
ing and Analysis (ISSTA’09), pp. 105–116.
[24] KIM, H., AND KARP, B. Autograph: Toward Automated, Dis-
tributed Worm Signature Detection. In Proceedings of the 13th
USENIX Security Symposium (2004), pp. 271–286.
[25] KING, J. C. Symbolic execution and program testing. Commun.
ACM 19, 7 (1976), 385–394.
[26] KUZNETSOV, V., KINDER, J., BUCUR, S., AND CANDEA, G.
Efﬁcient State Merging in Symbolic Execution. In Proceedings of
the 33rd ACM SIGPLAN Conference on Programming Language
Design and Implementation (PLDI’12), pp. 193–204.
[27] LI, Z., SANGHI, M., CHAVEZ, B., CHEN, Y., AND KAO,
M. Hamsa: Fast Signature Generation for Zero-day Polymor-
phicWorms with Provable Attack Resilience. In Proceedings of
the 2006 IEEE Symposium on Security and Privacy (S&P’06),
pp. 32–47.
[28] MOSER, A., KRUEGEL, C., AND KIRDA, E. Exploring Multiple
Execution Paths for Malware Analysis.
In Proceedings of the
2007 IEEE Symposium on Security and Privacy (S&P’07), vol. 0,
pp. 231–245.
[29] NEWSOME, J., KARP, B., AND SONG, D. Polygraph: Automat-
ically Generating Signatures for Polymorphic Worms.
In Pro-
ceedings of the 2005 IEEE Symposium on Security and Privacy
(S&P’05), pp. 226–241.
[30] NOTO-MONIZ, A. Software Agitation of a Dynamically Typed
Language. Tech. rep., Worcester Polytechnic Institute, 2012.
[31] QI, D., NGUYEN, H. D., AND ROYCHOUDHURY, A. Path Ex-
ploration based on Symbolic Output. In Proceedings of the 19th
ACM SIGSOFT Symposium on Foundations of Software Engi-
neering (FSE’11), pp. 278–288.
[32] RAGAN, S.
Java zero-day added to blackhole exploit kit and
metasploit. http://www.securityweek.com/java-zero-day-added-
blackhole-exploit-kit-and-metasploit, visited in Aug 2012.
[33] RAMIREZ-SILVA, E., AND DACIER, M. Empirical Study of the
Impact of Metasploit-Related Attacks in 4 Years of Attack Traces.
In Proceedings of the 12th Asian Computing Science Conference
on Advances in Computer Science: Computer and Network Secu-
rity (ASIAN’07), pp. 198–211.
[17] COSTA, M., CASTRO, M., AND ZHOU, L. Bouncer: Secur-
ing Software by Blocking Bad Input. In Proceedings of twenty-
ﬁrst ACM SIGOPS Symposium on Operating Systems Principles
(SOSP’07), pp. 117–130.
[34] SAXENA, P., AKHAWE, D., HANNA, S., MAO, F., MCCA-
MANT, S., AND SONG, D. A Symbolic Execution Framework
for JavaScript. In Proceedings of the 2010 IEEE Symposium on
Security and Privacy (S&P’10), pp. 513–528.
USENIX Association  
22nd USENIX Security Symposium  79
[35] SAXENA, P., POOSANKAM, P., MCCAMANT, S., AND SONG,
D. Loop-Extended Symbolic Execution on Binary Programs. In
Proceedings of the 18th International Symposium on Software
Testing and Analysis (ISSTA’09), pp. 225–236.
[36] SCHWARTZ, E. J., AVGERINOS, T., AND BRUMLEY, D. All
You Ever Wanted to Know about Dynamic Taint Analysis and
Forward Symbolic Execution (but Might Have Been Afraid to
Ask). In Proceedings of the 2010 IEEE Symposium on Security
and Privacy (S&P’10), pp. 317–331.
[37] SEN, K., AND AGHA, G. CUTE and jCUTE: Concolic Unit
Testing and Explicit Path Model-Checking Tools. In Proceedings
of the 18th International Conference on Computer Aided Veriﬁ-
cation (CAV’06), pp. 419–423.
[38] SONG, D., BRUMLEY, D., YIN, H., AND CABALLERO. Bit-
Blaze: A New Approach to Computer Security via Binary Anal-
ysis. In Proceedings of the 4th International Conference on In-
formation Systems Security (ICISS’08), pp. 1–25.
[39] SOPHOSLABS.
Exploring the blackhole
exploit kit.
http://nakedsecurity.sophos.com/exploring-the-blackhole-
exploit-kit, visited in Jan 2013.
[40] XIE, T., TILLMANN, N., DE HALLEUX, J., AND SCHULTE, W.
Fitness-Guided Path Exploration in Dynamic Symbolic Execu-
tion. In IEEE/IFIP International Conference on Dependable Sys-
tems & Networks (DSN’09), pp. 359–368.
[41] XIE, Y., AND AIKEN, A. Static Detection of Security Vul-
nerabilities in Scripting Languages. In Proceedings of the 15th
USENIX Security Symposium (2006), pp. 179–192.
Appendix A Example of Rule Comparison
1 def exploit
2
...
trigger = ’/ldap://localhost/%3fA%3fA%3
fCCCCCCCCCC%3fC%3f%90’
# Sending payload
send_request_raw({
’uri’ => ’/’ + rewrite_path() + trigger +
shellcode(),
’version’ => ’1.0’,
}, 2)
3
4
5
6
7
8
9
...
10
11 end
Listing 4: The code snippet from a Metasploit attack script
apache mod rewrite ldap.rb
alert tcp any any -> any 80 (
msg:"Metasploit apache_mod_rewrite_ldap,
Target:[Apache 1.3/2.0/2.2],
Behavior:[HTTP request with Vul-specific
bytes]";
content:"GET";
content:"/ldap|3A|//localhost/%3fA%3fA%3
fCCCCCCCCCC%3fC%3f%90";
content:"|20|HTTP/1.0|0D 0A|Host|3A 20|";
reference:cve,2006-3747;
sid:5000539; rev:0;)
Listing 5: One MetaSymploit Rule (MR) for an attack payload of
apache mod rewrite ldap.rb.
alert tcp $EXTERNAL_NET any -> $HOME_NET 80 (
msg:"WEB-MISC Apache mod_rewrite buffer
overflow attempt";
content:"GET";
content:"ldap|3A|";
pcre:"/ldap\x3A\x2F\x2F[ˆ\x0A]*(%3f|\x3F)[ˆ\
x0A]*(%3f|\x3F)[ˆ\x0A]*(%3f|\x3F)[ˆ\x0A
]*(%3f|\x3F)/smi";
reference:cve,2006-3747;
sid:11679; rev:5;)
Listing 6: One Ofﬁcial Snort Rule (OR) related to the Metasploit
attack script in Listing 4.
In Appendix A, we give a simple example to illustrate
the comparison between an ofﬁcial Snort rule contain-
ing general patterns with a MetaSymploit rule containing
speciﬁc patterns.
4
of
the
code
shows
Listing
snippet
the
exploit method in the Metasploit attack script
apache mod rewrite ldap.rb.
script
launches the attack by sending an HTTP GET request
packet that contains a special URI byte string to trigger
the vulnerability. Here send request raw is a
Metasploit HTTP output API method that is symbol-
ically extended by MetaSymploit to dump the entire
payload packet.
The
Listing 5 is a MetaSymploit Rule (MR) based on the
attack payload composed by the script. It contains the
constant byte string patterns, especially the vulnerabil-
ity triggering string that can identify the speciﬁc payload
packet. Listing 6 is the corresponding Ofﬁcial Rule (OR)
based on CVE matching. It contains a regular expression
(regex) pattern generalized by security analysts based on
large amounts of samples.
According to the Snort rule manual, a rule can have
multiple content byte string patterns. By default,
given a packet, Snort searches these content patterns
in order. A rule can also have one pcre regex pattern.
Snort searches the entire packet for the pcre pattern.
In the example rules, the ﬁrst content in both rules
share the same pattern “GET”. The second content
of the MR captures the triggering string, which includes
the second content of the OR “ldap|3A|” as a sub-
string. Furthermore, the second content of the MR is
also matched by the general pcre regex of the OR. In
addition, there is another content in the MR that cap-
tures the HTTP protocol version of the packet.
Although both rules can detect the attack payload of
this script, the MR has multiple speciﬁc patterns that
can precisely pinpoint the attacks launched by this script,
thus having very low false-positive rate compared to the
general OR. In practice, the MRs can help identify what
attack scripts are used by attackers, providing a way for
the defense side to proﬁle and obtain more knowledge of
the attacker side.
80  22nd USENIX Security Symposium 
USENIX Association