### Mach-O Malware Analysis: Combatting Mac OS X/iOS Malware with Data Visualization

#### Analysis of Keychain Dumper: An iOS Hacker Utility

**Keychain Dumper** is a popular utility used to extract all passwords stored in the iOS keychain. To use this utility, the iOS device (iPhone, iPad, etc.) must be jailbroken. Analyzing this file with Mach-O Viz exercises the disassembly analysis engine's ability to handle ARM7 instructions and provides Objective-C and string information when applicable.

After uploading the keychain dumper binary into Mach-O Viz and examining the header, we can confirm that it has been compiled for the ARM architecture (Figure 21).

**Figure 21:** The keychain dumper header indicates that the target architecture is ARM.

Additionally, by examining the ENCRYPTION_INFO load command (Figure 22), we can verify that the file has not been code-signed. The "breadcrumbs" in the top-left corner provide a simple history of our navigation, which is useful for navigating the complex Mach-O file format load commands. This visual representation makes it easier to find and focus on relevant fields.

**Figure 22:** Drilling down into the load commands, we arrive at ENCRYPTION_INFO and validate that the ARM binary is unencrypted.

Continuing the analysis, the Security Risk score for this hacker utility is 4, which is relatively low. From a network security perspective, you would not want this utility floating around. However, compared to a malware Trojan or similar backdoor utility, this binary does not appear to exhibit malicious API usage. The only string flagged as a security risk points to Apple's domain (Figure 23).

**Figure 23:** A low number of security risks demonstrates that this binary lacks the capability to act as a true threat.

Mach-O Viz's powerful feature is its ability to enumerate and resolve all Objective-C string data for method names and variables. This allows for a comprehensive enumeration of most of the code, turning malicious code analysis into technical reading. For example, the "Names/XRefs" section (Figure 24) of the keychain dumper utility provides a general idea of its inner workings and capabilities.

**Figure 24:** Objective-C structure and method enumeration provide immediate value in quickly triaging this binary.

The following methods highlight the core functionality of this binary: `dumpKeychainEntitlements`, `printCertificate`, `printGenericPassword`, `printIdentity`, `printInternetPassword`, and `printKey`. The SQLite methods provide data access to the keychain database store. By examining these functions, we can confirm they perform as advertised.

Let's conduct a verification of the `dumpKeychainEntitlements` method to ensure it does what it claims. Selecting it from the "Names/XRefs" and then from "Search Results" brings the method into the Graph Visualization tab (Figure 25).

**Figure 25:** A string resolution algorithm was developed to resolve ARM7 string references in Mach-O Viz.

It's important to note that to perform ARM string resolution in the code, an instruction-tracing algorithm was developed for Mach-O Viz's graphs. A native "otool" code dump will not provide this valuable information. Figure 26 shows an Apple otool dump of the same code sequence without the string references.

**Figure 26:** Apple’s otool does not provide the deep code analysis available in Mach-O Viz.

Further down the method, we find the call to open the keychain database along with a string referencing a SELECT statement (Figure 27). Our Strings tab quickly reveals the details of this call (Figure 28).

**Figure 27:** Tracing the code path of the `dumpKeychainEntitlements` method.

**Figure 28:** Due to Mach-O Viz’s string resolution ability, we were able to easily track down this value.

The next several code blocks iterate through the results of the SELECT statement and build a string out of the returned data. The graph visualization allows us to color and observe this code loop (Figure 29).

**Figure 29:** Graph view shows the SELECT statement and subsequent code loop to aggregate the results as strings.

The resulting string data is dumped to STDOUT, and the function exits. As demonstrated, in just a few minutes, you can quickly triage this file as a hacker utility, grab and deploy its flat file signature (Network Security tab), and move on to more malicious binaries.

#### Analysis of MacDefender: OSX’s First Malware Threat

MacDefender quickly established itself as the first real threat to the OSX operating system in 2011. Operating under social engineering principles, an unsuspecting user is lured into installing it as a legitimate Mac Anti-Virus product. It then attempts to obtain the user’s credit card number by asking them to pay for the “full” version. It also hijacks the user’s browser to display sites related to pornography [1].

MacDefender is a good example of a FAT file structure, where a binary is compiled for multiple architectures and executes on the one detected by the Mach-O loader. Sending the file into Mach-O Viz illustrates the two supported architectures: x86_64 and i386 (Figure 30). Visually, we can see that the x86_64 binary is larger than its i386 counterpart, while the header is minimal compared to the actual files.

**Figure 30:** Mach-O Viz correctly parses and displays FAT file headers with multiple architectures.

The Security Risk field and Network Security tab provide immediate feedback on the true nature of this binary by highlighting the malicious IP addresses and domains embedded within (Figure 31).

**Figure 31:** Malicious URLs and IP addresses embedded within MacDefender provide quick insight into its real intention.

The `sysctl` API, which provides access to get/set kernel-level attributes, rightfully scores as a significant security risk in the automated security assessment (Figure 32).

**Figure 32:** The `sysctl` API is not a function you want your average OSX binary to access.

Ironically, the “fake” anti-virus comes equipped with features to make it appear legitimate, as seen in the "Names/XRefs" list (Figure 33).

**Figure 33:** The malware author created routines to mimic an actual Anti-Virus scan.

As part of the scam to fool the user, we can examine one of the AV’s functions, `AntiVirus_IsFileInfected`. In a normal anti-virus, this would involve signature-based detection and heuristics to detect the maliciousness of a particular binary. The unusually small size of this AV’s detection function suggests something else (Figure 34).

**Figure 34:** The world’s smallest AV file infection detection routine.

Focusing on the highlighted code blocks, we see the use of a random number generator to create the effect of delayed scanning (Figure 35), making it appear as if it is actually finding viruses while displaying fake names to the user. Examining more of the so-called functionality reveals more of the same scamming.

**Figure 35:** Fake AV using random delays to create the appearance of a scan.

#### Mach-O Viz: Future Directions

As demonstrated, Mach-O Viz can be effectively used for analyzing Mac-related malware for both the OSX and iOS operating systems using data visualization. In addition to the many features already implemented, we plan to include the following functionality in future versions:
- Archiving support for previously analyzed files.
- Cloud integration for inline automated scanning of Mach-O files in enterprise networks.
- Function charting across multiple binaries to look for matching code sequences.
- Visual mapping of Mach-O Viz’s file and graph structures into an active debugger such as LLVM.
- Plugin support for modular enhancements.

#### Conclusions

Mach-O Viz was developed to fill the need for proper and easy malware analysis on Mac-related malware, regardless of the architecture or device. By creating a terminal-like interface using HTML/JavaScript and developing a powerful backend analytic engine, we have built a unique and extremely useful tool to quickly triage Mach-O binaries, visually display them, and provide unique and automated signatures for deployment to network defense systems.

The ability for network security staff and analysts to react quickly and accurately to the latest Mac threats is critical, especially in today’s Mac-centric world. Mach-O Viz provides the capability required to easily achieve this without sacrificing the power of a full-featured commercial disassembler.

#### About ANRC

ANRC delivers advanced cybersecurity training, consulting, and development services, providing our customers with peace of mind in a fast-paced and complex cybersecurity environment. ANRC was formed with two visions in mind: to provide the best and most current computer security education possible, and to administer that education through a revolutionary new approach, endowing our customers with knowledge that is truly usable, valuable, and retainable.

**Contact:**
- Mr. Remy Baumgarten
- Security Engineer, ANRC LLC
- 1-800-742-7931

[1] https://en.wikipedia.org/wiki/Mac_Defender