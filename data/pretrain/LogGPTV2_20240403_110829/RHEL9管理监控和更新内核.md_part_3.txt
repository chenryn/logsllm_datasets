filename:       /lib/modules/5.14.0-1.el9.x86_64/kernel/drivers/net/virtio_net.ko.xz
license:        GPL
description:    Virtio network driver
rhelversion:    9.0
srcversion:     8809CDDBE7202A1B00B9F1C
alias:          virtio:d00000001v*
depends:        net_failover
retpoline:      Y
intree:         Y
name:           virtio_net
vermagic:       5.14.0-1.el9.x86_64 SMP mod_unload modversions
…​
parm:           napi_weight:int
parm:           csum:bool
parm:           gso:bool
parm:           napi_tx:bool
```
\+ `modinfo`{.literal}
命令显示有关指定内核模块的一些详细信息。您可以查询所有可用模块的信息，无论它们是否被加载。`parm`{.literal}
条目显示用户可以为模块设置的参数，以及它们预期的值类型。
\+
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在输入内核模块的名称时，不要将 `.ko.xz`{.literal}
扩展附加到名称的末尾。内核模块名称没有扩展名，它们对应的文件有。
:::
::: itemizedlist
**其他资源**
-   `modinfo(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#loading-kernel-modules-at-system-runtime_managing-kernel-modules}在系统运行时载入内核模块 {.title}
:::
扩展 Linux 内核功能的最佳方法是加载内核模块。下面的步骤描述了如何使用
`modprobe`{.literal} 命令在当前运行的内核中查找并载入内核模块。
::: itemizedlist
**先决条件**
-   根权限
-   已安装 `kmod`{.literal} 软件包。
-   相关的内核模块没有被加载。要确保情况如此，请列出[载入的内核模块](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/managing_monitoring_and_updating_the_kernel/index#listing-currently-loaded-kernel-modules_managing-kernel-modules){.link}。
:::
::: orderedlist
**步骤**
1.  选择您要载入的内核模块。
    模块位于 `/lib/modules/$(uname -r)/kernel//`{.literal}
    目录中。
2.  载入相关内核模块：
    ``` literallayout
    # modprobe 
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    在输入内核模块的名称时，不要将 `.ko.xz`{.literal}
    扩展附加到名称的末尾。内核模块名称没有扩展名，它们对应的文件有。
    :::
3.  （可选）验证载入了相关模块：
    ``` literallayout
    $ lsmod | grep 
    ```
    如果正确加载了模块，这个命令会显示相关的内核模块。例如：
    ``` literallayout
    $ lsmod | grep serio_raw
    serio_raw              16384  0
    ```
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
重启系统后，这个过程中描述的更改[**不会保留**]{.strong}。有关如何在系统重启后载入内核模块使其具有[**持久性**]{.strong}的信息，请参[阅在系统引导时自动载入内核模块](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/managing_monitoring_and_updating_the_kernel/index#loading-kernel-modules-automatically-at-system-boot-time_managing-kernel-modules){.link}。
:::
::: itemizedlist
**其他资源**
-   `modprobe(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#unloading-kernel-modules-at-system-runtime_managing-kernel-modules}在系统运行时卸载内核模块 {.title}
:::
有时，您发现您需要从运行的内核中卸载某些内核模块。下面的步骤描述了如何使用
`modprobe`{.literal}
命令在当前载入的内核运行时在系统运行时查找和卸载内核模块。
::: itemizedlist
**先决条件**
-   根权限
-   已安装 `kmod`{.literal} 软件包。
:::
::: orderedlist
**步骤**
1.  执行 `lsmod`{.literal} 命令并选择您要卸载的内核模块。
    如果内核模块有依赖项，请在卸载内核模块前卸载它们。有关识别使用依赖项的模块的详情，请参阅[列出当前载入的内核模块](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/managing_monitoring_and_updating_the_kernel/index#listing-currently-loaded-kernel-modules_managing-kernel-modules){.link}和[内核模块依赖项](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/managing_monitoring_and_updating_the_kernel/index#kernel-module-dependencies_managing-kernel-modules){.link}。
2.  卸载相关内核模块：
    ``` literallayout
    # modprobe -r 
    ```
    在输入内核模块的名称时，不要将 `.ko.xz`{.literal}
    扩展附加到名称的末尾。内核模块名称没有扩展名，它们对应的文件有。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    当它们被正在运行的系统使用时，不要卸载这些内核模块。这样做可能会导致不稳定，或系统无法正常操作。
    :::
3.  （可选）验证相关模块是否已卸载：
    ``` literallayout
    $ lsmod | grep 
    ```
    如果模块被成功卸载，这个命令不会显示任何输出。
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
完成这个过程后，被定义为在引导是自动加载的内核模块，在重启系统后[**将不会处于卸载状态**]{.strong}。有关如何解决这个结果的详情，请参考[防止在系统引导时自动载入内核模块](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/managing_monitoring_and_updating_the_kernel/index#preventing-kernel-modules-from-being-automatically-loaded-at-system-boot-time_managing-kernel-modules){.link}。
:::
::: itemizedlist
**其他资源**
-   `modprobe(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#proc_unloading-kernel-modules-at-early-stages-of-the-boot-process_managing-kernel-modules}在引导过程早期卸载内核模块 {.title}
:::
在某些情况下，在引导过程早期需要卸载内核模块。例如，当内核模块包含代码时，会导致系统变得无响应，用户无法访问阶段来永久禁用恶意内核模块。在这种情况下，可以使用启动加载器临时阻止内核模块加载。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
下次重启后，这个过程中描述的更改
[**不会保留**]{.strong}。有关如何将内核模块添加到 denylist
中以便在引导过程中不会自动载入该模块，请参阅
[在系统引导时自动载入内核模块](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/managing_monitoring_and_updating_the_kernel/index#preventing-kernel-modules-from-being-automatically-loaded-at-system-boot-time_managing-kernel-modules){.link}。
:::
::: itemizedlist
**先决条件**
-   您有一个可加载的内核模块，因为某种原因您不希望加载这个模块。
:::
::: itemizedlist
**步骤**
-   编辑相关的引导装载程序条目，以便在引导序列继续之前卸载所需的内核模块。
    ::: itemizedlist
    -   使用光标键突出显示相关的引导装载程序条目。
    -   按 [e]{.guibutton} 键编辑条目。
        ::: figure
        []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#managing-kernel-modules-figu-kernel-bootmenu}
        **图 3.1. 内核引导菜单**
        ::: figure-contents
        ::: mediaobject
        ![内核引导子菜单 rhel9](images/kernel-bootmenu-rhel9.png)
        :::
        :::
        :::
    -   使用光标键导航到以 [**linux**]{.strong} 开头的那一行。
    -   将 `modprobe.blacklist=module_name`{.literal} 附加到行末。
        ::: figure
        []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#managing-kernel-modules-figu-kernel-boot-entry}
        **图 3.2. 内核引导条目**
        ::: figure-contents
        ::: mediaobject
        ![内核引导条目 rhel9](images/kernel-boot-entry-rhel9.png)
        :::
        :::
        :::
        `serio_raw`{.literal}
        内核模块演示了一个恶意模块，可在引导过程早期被卸载。
    -   按 [CTRL+x]{.guibutton} 键以使用修改后的配置引导。
    :::
:::
::: itemizedlist
**验证**
-   系统完全引导后，验证相关的内核模块没有被加载。
    ``` literallayout
    # lsmod | grep serio_raw
    ```
:::
::: itemizedlist
**其他资源**
-   [管理内核模块](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/managing_monitoring_and_updating_the_kernel/index#managing-kernel-modules_managing-monitoring-and-updating-the-kernel){.link}
:::
:::
::: section
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#loading-kernel-modules-automatically-at-system-boot-time_managing-kernel-modules}在系统引导时自动载入内核模块 {.title}
:::
下面的步骤描述了如何配置内核模块以便在引导过程中自动载入该模块。
::: itemizedlist
**先决条件**
-   根权限
-   已安装 `kmod`{.literal} 软件包。
:::
::: orderedlist
**步骤**
1.  选择您要在引导过程中载入的内核模块。
    模块位于 `/lib/modules/$(uname -r)/kernel//`{.literal}
    目录中。
2.  为模块创建配置文件：
    ``` literallayout
    # echo  > /etc/modules-load.d/.conf
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    在输入内核模块的名称时，不要将 `.ko.xz`{.literal}
    扩展附加到名称的末尾。内核模块名称没有扩展名，它们对应的文件有。
    :::
3.  另外，重启后，验证载入了相关模块：
    ``` literallayout
    $ lsmod | grep 
    ```
    上面的示例命令应该成功并显示相关的内核模块。
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
重启系统后，这个过程中描述的更改[**将会保留**]{.strong}。
:::
::: itemizedlist
**其他资源**
-   `modules-load.d(5)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#preventing-kernel-modules-from-being-automatically-loaded-at-system-boot-time_managing-kernel-modules}防止在系统引导时自动载入内核模块 {.title}
:::
下面的步骤描述了如何在 denylist
中添加内核模块使其不会在引导过程中自动载入。
::: itemizedlist
**先决条件**
-   根权限