---
## Page 531
Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, I) there are such that
A[i] + B[j] + C[k] + D[1] is zero.
To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers
are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.
Example 1:
Input:
A = [ 1, 2]
B = [2,1]
C = [1, 2]
D = [ 0, 2]
Output:
2
Explanation:
The two tuples are:
1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0
3.
题目大意
+++
解题思路
这道题的数据量不大，0sNs500，但是如果使用暴力解法，四层环，会超时。这道题的思路和第1
题思路也类似，先可以将2个数组中的组合都存入map中。之后将剩下的2个数组进行for循环，找
出和为0的组合。这样时间复杂度是O（n^2）。当然也可以讲剩下的2个数组的组合也存入map中，不
过最后在2个map中查找结果也是O（n^2)的时间复杂度。
代码
package leetcode
func fourSumCount(A []int, B []int, C []int, D []int) int {
m := make(map[int]int, len(A)*1en(B))
for _,a := range A{
for _, b := range B {
m[a+b]++
}
---
## Page 532
ret := 0
for
-,C := range C {
for _, d := range D {
ret += m[0-c-d]
}
return ret
455.AssignCookies
题目
nof 4ng salxooo awos uaupllqp nof anig o juem pue juaued awosame ue aue nof awnssy
should give each child at most one cookie. Each child i has a greed factor gi, which is the
minimum size of a cookie that the child will be content with; and each cookie j has a size sj. If sj
o sl jeo ino, quauo aq m 1 pip au pue  piuo au o  ayoo au uisse ue am  ==gi，我们可以将这个饼干”分配给孩子I，这个孩子会得到满足。你的目标是尽
可能满足越多数量的孩子，并输出这个最大数值。
注意：你可以假设胃口值为正。一个小朋友最多只能拥有一块饼干。
解题思路
·假设你想给小朋友们饼干，每个小朋友最多能够给一块饼干。每个小朋友都有一个贪心指数”，称
为g[i]，9[]表示的是这名小朋友需要的饼干大小的最小值。同时，每个饼干都有一个大小值
s[i]，如果s[j]≥g[i]，我们将饼干j分给小朋友i后，小朋友会很开心。给定数组g[]
和s[]，问如何分配饼干，能让更多的小朋友开心。
·这是一道典型的简单贪心题。贪心题一般都伴随着排序。将g[]和s[]分别排序。按照最难满
足的小朋友开始给饼干，依次往下满足，最终能满足的小朋友数就是最终解。
代码
package leetcode
import “sort"
func findcontentchildren(g []int， s []int) int {
sort.Ints (g)
sort.Ints(s)
gi, si, res = 0, 0, 0
for gi = g[gi] {
res++
si++
++↓6
}else{
si++
}
return res
456.132Pattern
题目
---
## Page 534
Given a sequence of n integers a1, a2, ., an, a 132 pattern is a subsequence ai, aj, ak such that i
= 0; i-- {
if nums[1] stack[len(stack)-1] {
num3 = stack[1en(stack)-1]
stack = stack[:len(stack)-1]
stack = append(stack, nums[i])
fmt.Printf("stack = %v \n", stack)
3
return false
}
//解法二暴力解法，超时！
func find132patternl(nums []int) boo]{
if 1en(nums） 0 && nums[i] >
nums [stack[1en(stack)-1]]) {
stack = append(stack, i)
} else if nums[i] = 0; index--{
if nums[stack[index]] 1. Furthermore, movements in a cycle must all follow a single direction. In
other words, a cycle must not consist of both forward and backward movements.
Example 1:
Input: [2, -1,1,2,2]
Output: true
Explanation: There is a cycle, from index 0 -> 2 -> 3 -> 0. The cycle′s length
is 3.
Example 2:
Input: [-1,2]
output: false
Explanation: The movement from index 1 -> 1 -> 1 ... is not a cycle, because
the cycle's length is 1. By definition the cycle's length must be greater than
1.
Example 3:
Input: [2,1,-1, 2,-2]
output: false
Explanation: The movement from index 1 -> 2 -> 1 -> ... is not a cycle,
because movement from index 1 -> 2 is a forward movement, but movement from
index 2 -> 1 is a backward movement. All movements in a cycle must follow a
single direction.
Note:
1. -1000 ≤ nums[i] ≤ 1000
2. nums[i] = 0
3. 1 ≤ nums.length ≤ 5000
Follow up:
Could you solve it in O(n) time complexity and O(1) extra space complexity?
---
## Page 537
题目大意
给定一个含有正整数和负整数的环形数组nums。如果某个索引l中的数k为正数，则向前移动k个索
引。相反，如果是负数（-k)，则向后移动k个索引。因为数组是环形的，所以可以假设最后一个元素的
下一个元素是第一个元素，而第一个元素的前一个元素是最后一个元素。
确定nums中是否存在循环（或周期）。循环必须在相同的索引处开始和结束并且循环长度>1。此
外，一个循环中的所有运动都必须沿着同一方向进行。换句话说，一个循环中不能同时包括向前的运动
和向后的运动。
提示：
● -1000 ≤ nums[i] ≤ 1000
●nums[i] ≠ 0
●1 ≤ nums.length ≤ 5000
进阶：
·你能写出时间时间复杂度为O（n）和额外空间复杂度为O（1)的算法吗？
解题思路
·给出一个环数组，数组的数字代表了前进和后退的步数，+代表往右（前进），-代表往左（后退）。
问这个循环数组中是否存在一个循环，并且这个循环内不能只有一个元素，循环的方向都必须是同
方向的。
·遇到循环就可以优先考虑用快慢指针的方法判断循环，这一题对循环增加了一个条件，循环不能只
是单元素的循环，所以在快慢指针中加入这个判断条件。还有一个判断条件是循环的方向必须是同
向的，这个简单，用num[i]*num[j]>0就可以判断出是同向的（如果是反向的，那么两者的
乘积必然是负数），如果没有找到循环，可以将当前已经走过的路径上的num[值都置为0，标记
已经访问过了。下次循环遇到访问过的元素，num[i]num[j]>0就会是0，提前退出找循
环的过程。
代码
package leetcode
func circularArrayLoop(nums []int) bool {
if len(nums) == 0 {
return false
for i:= 0;i  0 && nums[getNextIndex(nums, fast)]*nums[i] > 0 {
if slow m= fast {
// check for loop with only one element
---
## Page 538
if slow == getNextIndex（nums， slow){
break
return true
s1ow = getNextIndex(nums, slow)
fast = getNextIndex(nums, getNextIndex(nums, fast))
// loop not found, set all element along the way to 0
slow, val = i, nums[1]
for nums[slow]*val> 0 {
next := getNextIndex(nums,s1ow)
nums [s1ow]  = 0
slow = next
return false
func getNextIndex(nums []int,index int) int{
return ((nums[index]+index)%1en(nums) + 1en(nums)) % 1en(nums)
461.HammingDistance
题目
The Hamming.clistance between two integers is the number of positions at which the
corresponding bits are different.
Given two integers x and y, calculate the Hamming distance.
Note: 0 ≤ x, y =len(grid) 11 grid[i+1][j]== 0{
counter++
if j-1 =len(grid[o]) 11 grid[i][j+1]==0{
counter++
return counter
470.ImplementRand1o0UsingRand70)
题目
Given a function rand7 which generates a uniform random integer in the range 1 to 7, write a
function randl0 which generates a uniform random integer in the range 1 to 10.
Do NOT use System's Math.randomO)
Example 1:
Input: 1
output: [7]
Example 2:
Input: 2
Output:[8,4]
Example 3:
Input: 3
Output: [8,1,10]
Note:
1. rand7 is predefined.
2. Each testcase has one argument: n, the number of times that randlo is called.
---
## Page 542
Follow up:
1. What is the expected value for the number of calls to rand7 O function?
2. Could you minimize the number of calls to rand7 O) ?
题目大意
已有方法rand7可生成1到7范围内的均匀随机整数，试写一个方法rand10生成1到10范围内的均
匀随机整数。不要使用系统的Math.random()方法。
提示：