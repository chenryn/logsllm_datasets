                if (line[1] == 'j' && line[2] != 'm' && R(100) < inst_ratio) {
                    fprintf(outf, use_64bit ? trampoline_fmt_64 : trampoline_fmt_32,
                            R(MAP_SIZE));
                    ins_lines++;
                }
                continue;
            }
        ...
        if (strstr(line, ":")) {
            if (line[0] == '.') {
                if ((isdigit(line[2]) || (clang_mode && !strncmp(line + 1, "LBB", 3)))
                            && R(100) < inst_ratio) {
                                instrument_next = 1;
                            }
            }
            else {
                /* Function label (always instrumented, deferred mode). */
                instrument_next = 1;
            }
        }
    }
  * 检查`instr_ok && instrument_next && line[0] == '\t' && isalpha(line[1])`即判断instrument_next和instr_ok是否都为1，以及line是否以`\t`开始，且`line[1]`是否是字母 
    * 如果都满足，则设置`instrument_next = 0`,并向outf中写入`trampoline_fmt`，并将插桩计数器`ins_lines`加一。
    * 这其实是因为我们想要插入instrumentation trampoline到所有的标签，宏，注释之后。
  * 首先要设置instr_ok的值，这个值其实是一个flag，只有这个值被设置为1，才代表我们在`.text`部分，否则就不在。于是如果instr_ok为1，就会在分支处执行插桩逻辑，否则就不插桩。 
    * 如果line的值为`\t.[text\n|section\t.text|section\t__TEXT,__text|section __TEXT,__text]...`其中之一，则设置instr_ok为1，然后跳转到while循环首部，去读取下一行的数据到line数组里。
    * 如果不是上面的几种情况，且line的值为`\t.[section\t|section |bss\n|data\n]...`，则设置instr_ok为0，并跳转到while循环首部，去读取下一行的数据到line数组里。
  * 插桩`^\tjnz foo`条件跳转指令 
    * 如果line的值为`\tj[!m]...`,且`R(100) < inst_ratio`，R(100)会返回一个100以内的随机数，inst_ratio是我们之前设置的插桩密度，默认为100，如果设置了asan之类的就会默认设置成30左右。
    * `fprintf(outf, use_64bit ? trampoline_fmt_64 : trampoline_fmt_32, R(MAP_SIZE));`根据use_64bit来判断向outfd里写入trampoline_fmt_64还是trampoline_fmt_32。 
      * `define R(x) (random() % (x))`，可以看到R(x)是创建的随机数除以x取余，所以可能产生碰撞
      * 这里的R(x)实际上是用来区分每个桩的，也就是是一个标识。后文会再说明。
    * 将插桩计数器`ins_lines`加一。
  * 首先检查该行中是否存在`:`，然后检查是否以`.开始`
    * 如果以`.`开始，则代表想要插桩`^.L0:`或者`^.LBB0_0:`这样的branch label，即style jump destination 
      * 然后检查`line[2]`是否为数字 或者 如果是在clang_mode下，比较从line[1]开始的三个字节是否为LBB. 前述所得结果和`R(100) < inst_ratio)`相与。 
        * 如果结果为真，则设置`instrument_next = 1`
    * 否则代表这是一个function，插桩`^func:`function entry point 
      * 直接设置`instrument_next = 1`
  * 如果插桩计数器ins_lines不为0，就在完全拷贝input_file之后，依据架构，像outf中写入main_payload_64或者main_payload_32，然后关闭这两个文件
  * **至此我们可以看出afl的插桩相当简单粗暴，就是通过汇编的前导命令来判断这是否是一个分支或者函数，然后插入instrumentation trampoline。**
  * **关于instrumentation trampoline，后文叙述**
####  main函数
最后我们回来看一下main函数
  * 读取环境变量AFL_INST_RATIO的值，设置为inst_ratio_str
  * 设置srandom的随机种子为`rand_seed = tv.tv_sec ^ tv.tv_usec ^ getpid();`
  * 设置环境变量AS_LOOP_ENV_VAR的值为1
  * 读取环境变量AFL_USE_ASAN和AFL_USE_MSAN的值，如果其中有一个为1，则设置sanitizer为1，且将inst_ratio除3。 
    * 这是因为AFL无法在插桩的时候识别出ASAN specific branches，所以会插入很多无意义的桩，为了降低这种概率，粗暴的将整个插桩的概率都除以3
  * edit_params(argc, argv)
  * add_instrumentation()
  * fork出一个子进程，让子进程来执行`execvp(as_params[0], (char **) as_params);`
    * 这其实是因为我们的execvp执行的时候，会用`as_params[0]`来完全替换掉当前进程空间中的程序，如果不通过子进程来执行实际的as，那么后续就无法在执行完实际的as之后，还能unlink掉modified_file
    * [exec系列函数](https://www.cnblogs.com/mickole/p/3187409.html)
    * [fork出的子进程和父进程](https://blog.csdn.net/THEONE10211024/article/details/13774669)
  * `waitpid(pid, &status, 0)`等待子进程结束
  * 读取环境变量AFL_KEEP_ASSEMBLY的值，如果没有设置这个环境变量，就unlink掉modified_file。
稍微打印一下参数
    for (int i = 0; i < sizeof(as_params); i++) {
        printf("as_params[%d]:%s\n", i, as_params[i]);
    }
        ...
    [+] Instrumented 5 locations (64-bit, non-hardened mode, ratio 100%).
    as_params[0]:as
    as_params[1]:/Users/sakura/gitsource/AFL/cmake-build-debug/tmp/afl-8427-1595314986.s
## afl-fast-clang中叙
因为AFL对于上述通过`afl-gcc`来插桩这种做法已经属于不建议，并提供了更好的工具afl-clang-fast，通过llvm pass来插桩。
###  clang wrapper
`afl-clang-fast.c`这个文件其实是clang的一层wrapper，和之前的`afl-gcc`一样，只是定义了一些宏，和传递了一些参数给真正的clang。  
我们还是依次来看一下核心函数。
####  find_obj
  * 获取环境变量`AFL_PATH`的值，如果存在，就去读取`AFL_PATH/afl-llvm-rt.o`是否可以访问，如果可以就设置这个目录为`obj_path`，然后直接返回
  * 如果没有设置这个环境变量，就检查arg0中是否存在`/`，例如我们可能是通过`/home/sakura/AFL/afl-clang-fast`去调用afl-clang-fast的，所以它此时就认为最后一个`/`之前的`/home/sakura/AFL`是AFL的根目录，然后读取其下的`afl-llvm-rt.o`文件，看是否能够访问，如果可以就设置这个目录为`obj_path`，然后直接返回。
  * 最后如果上面两种都找不到，因为默认的AFL的MakeFile在编译的时候，会定义一个名为`AFL_PATH`的宏，其指向`/usr/local/lib/afl`,会到这里找是否存在`afl-llvm-rt.o`，如果存在设置`obj_path`并直接返回。
  * 如果上述三种方式都找不到，那么就会抛出异常`Unable to find 'afl-llvm-rt.o' or 'afl-llvm-pass.so'. Please set AFL_PATH`
####  edit_params
  * 首先根据我们执行的是`afl-clang-fast`还是`afl-clang-fast++`来决定`cc_params[0]`的值是clang++还是clang。 
    * 如果执行的是`afl-clang-fast++`，读取环境变量`AFL_CXX`，如果存在，就将其值设置为`cc_params[0]`，如果不存在，就直接设置成`clang++`
    * 如果执行的是`afl-clang-fast`，读取环境变量`AFL_CC`，如果存在，就将其值设置为`cc_params[0]`，如果不存在，就直接设置成`clang`
  * 默认情况下，我们通过`afl-llvm-pass.so`来注入instrumentation，但是现在也支持`trace-pc-guard`模式，可以参考[llvm的文档](http://clang.llvm.org/docs/SanitizerCoverage.html#tracing-pcs-with-guards)
  * 然后如果定义了`USE_TRACE_PC`宏，就将`-fsanitize-coverage=trace-pc-guard -mllvm -sanitizer-coverage-block-threshold=0`添加到参数里
  * 如果没有定义，就依次将`-Xclang -load -Xclang obj_path/afl-llvm-pass.so -Qunused-arguments`
  * 依次读取我们传给`afl-clang-fast`的参数，并添加到cc_params里，不过这里会做一些检查和设置。 
    * 如果传入参数里有`-m32`或者`armv7a-linux-androideabi`，就设置`bit_mode`为32
    * 如果传入参数里有`-m64`，就设置`bit_mode`为64
    * 如果传入参数里有`-x`，就设置`x_set`为1
    * 如果传入参数里有`-fsanitize=address`或者`-fsanitize=memory`，就设置asan_set为1
    * 如果传入参数里有`-Wl,-z,defs`或者`-Wl,--no-undefined`，就直接pass掉，不传给clang。
  * 读取环境变量`AFL_HARDEN`，如果存在，就在cc_params里添加`-fstack-protector-all`
  * 如果参数里没有`-fsanitize=address/memory`，即asan_set是0，就读取环境变量`AFL_USE_ASAN`，如果存在就添加`-fsanitize=address`到cc_params里，环境变量`AFL_USE_MSAN`同理
  * 如果定义了`USE_TRACE_PC`宏，就检查是否存在环境变量`AFL_INST_RATIO`，如果存在就抛出异常`AFL_INST_RATIO not available at compile time with 'trace-pc'.`
  * 读取环境变量`AFL_DONT_OPTIMIZE`，如果 **不存在** 就添加`-g -O3 -funroll-loops`到参数里
  * 读取环境变量`AFL_NO_BUILTIN`，如果存在就添加`-fno-builtin-strcmp`等。
  * 添加参数`-D__AFL_HAVE_MANUAL_CONTROL=1 -D__AFL_COMPILER=1 -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1`，定义一些宏
  * 这里定义了如下两个宏`__AFL_LOOP`,`__AFL_INIT()`,宏展开是类似这样的，为简化我去掉了和编译器优化相关的东西。
    #define __AFL_LOOP() \
      do { \
          static char *_B; \
          _B = (char*)"##SIG_AFL_PERSISTENT##"; \
          __afl_persistent_loop(); \
      }while (0)
    #define __AFL_INIT() \
      do { \
          static char *_A;  \
          _A = (char*)"##SIG_AFL_DEFER_FORKSRV##"; \
          __afl_manual_init(); \
      } while (0)
  * 如果x_set为1，则添加参数`-x none`
  * 根据`bit_mode`的值选择`afl-llvm-rt`
    * 如果为0，即没有`-m32`和`-m64`选项，就向参数里添加`obj_path/afl-llvm-rt.o`
    * 如果为32，添加`obj_path/afl-llvm-rt-32.o`
    * 如果为64，添加`obj_path/afl-llvm-rt-64.o`
####  main
  * 寻找obj_path路径
  * 编辑参数cc_params
  * 替换进程空间，执行要调用的clang和为其传递参数 
    * `execvp(cc_params[0], (char**)cc_params);`
###  afl-llvm-pass
关于llvm不懂的可以看CSCD70，顺便可以学一下优化，这里放一下我之前抽空做的[笔记](https://github.com/eternalsakura/sakura_llvm_opt),
以及[这篇文章](https://blog.csdn.net/qq_23599965/article/details/88538590)可以列为查询和参考.  
afl-llvm-pass里只有一个Transform pass
AFLCoverage，其继承自ModulePass，所以我们主要分析一下它的`runOnModule`函数，这里简单的介绍一下llvm里的一些层次关系，粗略理解就是Module相当于你的程序，里面包含所有Function和全局变量，而Function里包含所有BasicBlock和函数参数，BasicBlock里包含所有Instruction,Instruction包含Opcode和Operands。
####  注册pass
    static void registerAFLPass(const PassManagerBuilder &,
                                legacy::PassManagerBase &PM) {
      PM.add(new AFLCoverage());
    }
    static RegisterStandardPasses RegisterAFLPass(
        PassManagerBuilder::EP_ModuleOptimizerEarly, registerAFLPass);
    static RegisterStandardPasses RegisterAFLPass0(
        PassManagerBuilder::EP_EnabledOnOptLevel0, registerAFLPass);
这些都是向PassManager来注册新的pass，每个pass彼此独立，通过PM统一注册和调度，更加模块化。  
具体的可以参考定义，我摘取了必要的代码和注释，请仔细阅读。  
简单的理解就是当我创建了一个类RegisterStandardPasses之后，就会调用它的构造函数，然后调用`PassManagerBuilder::addGlobalExtension`，这是一个静态函数，这个函数会创建一个tuple保存
**Ty和Fn还有一个id** ，并将其添加到一个静态全局vector里，以供PassManagerBuilder在需要的时候，将其添加到PM里。  
而这个添加的时机就是`ExtensionPointTy`来指定的。
    /// Registers a function for adding a standard set of passes.  This should be
    /// used by optimizer plugins to allow all front ends to transparently use
    /// them.  Create a static instance of this class in your plugin, providing a
    /// private function that the PassManagerBuilder can use to add your passes.
    class RegisterStandardPasses {
      PassManagerBuilder::GlobalExtensionID ExtensionID;