The function takes two disjoint buffers a and b, each with three
limbs, adds them pointwise, and stores the result in-place within a.
We will prove that this optimized code implements, under certain
conditions, our high-level specification of field addition (fadd).
Verifying Memory Safety. Our first verification task is to prove
that fsum is memory safe. Low∗ provides a Buffer library that care-
fully models C arrays and exposes a typed interface with pre- and
post-conditions that enforces that the cryptographic code can only
use them in a memory-safe manner. In particular, any code that
reads or writes to a buffer must ensure that the buffer is live, which
means that it points to an allocated array in the current heap, and
that the index being accessed is within bounds.
To typecheck fsum against this buffer interface, we need to add a
pre-condition that the buffers a and b are live in the initial heap. As
a post-condition, we would like to prove that fsum only modifies
the buffer a. So, we annotate fsum with the following type:
val fsum: a:limbs → b:limbs → Stack unit
(requires (λ h0 → live h0 a ∧ live h0 b))
(ensures (λ h0 _h1 → modifies_1 a h0 h1))
The requires clause contains pre-conditions on the inputs and
initial heap h0; the ensures clause states post-conditions on the
return value and any modifications between the initial heap h0
and the final heap h1. F∗ automatically proves that fsum meets this
type, and hence that it is memory safe.
HACL∗ code never allocates memory on the heap; all temporary
state is stored on the stack. This discipline significantly simplifies
proofs of memory safety, and avoids the need for explicit memory
management. More formally, Low∗ models the C memory layout
using a Stack effect that applies to functions that do not allocate
on the heap and only access heap locations that are passed to them
as inputs. These functions are guaranteed to preserve the layout
of the stack and can only read and write variables from their own
stack frame. All HACL∗ code is typechecked in this effect.
Verifying Functional Correctness. To prove an implementation
correct, we need to show how it maps to its specification. For
example, to verify fsum, we first define a function eval that maps
the contents of a limb array (limbs) to a Poly1305 field element
(felem), and then extend the type of fsum with a post-condition
that links it to fadd:
val fsum: a:limbs → b:limbs → Stack unit
(requires (λ h0 → live h0 a ∧ live h0 b
∧ disjoint a b
∧ index h0.[a] 0 + index h0.[b] 0 >> 2ul) ^ ((x >>> 13ul) ^ (x >>> 22ul))
let _Sigma1 x = (x >>> 6ul) ^ ((x >>> 11ul) ^ (x >>> 25ul))
let _sigma0 x = (x >>> 7ul) ^ ((x >>> 18ul) ^ (x >> 3ul))
let _sigma1 x = (x >>> 17ul) ^ ((x >>> 19ul) ^ (x >> 10ul))
let k : uint32x64 = createL [0x428a2f98ul; 0x71374491ul; ...] // Constants
let h_0 : uint32x8 = createL [0x6a09e667ul; 0xbb67ae85ul; ...] // Constants
let rec ws (b:uint32x16) (t:nat{t >> is right-rotate; >> is right-shift; & is bitwise AND; ˆ is
bitwise XOR; lognot is bitwise NOT; + is wraparound addition. The
operators − and > (uint32_t )6 | e > (uint32_t )2 | a > (uint32_t )11 | e > (uint32_t )25 | e > (uint32_t )13 | a > (uint32_t )22 | a << (uint32_t )32 − (uint32_t )22))
+ (a & b ^ a & c ^ b & c);
uint32_t x1 = t1 + t2;
uint32_t x5 = d + t1;
uint32_t ∗p1 = hash_0;
uint32_t ∗p2 = hash_0 + (uint32_t )4;
p1[0] = x1; p1[1] = a; p1[2] = b; p1[3] = c;
p2[0] = x5; p2[1] = e; p2[2] = f1; p2[3] = g;
}
}
Figure 4: Compiled C code for the SHA-256 shuffle function
of these input buffers states their expected length and that their con-
tents are secure integers (uint32_s). The function is given the Stack
effect (see §2), which means that it obeys the C stack discipline, and
allocates nothing on the heap.
The requires clause states a series of pre-conditions. The first
line asks that all the input buffers must be live, for memory safety.
The second line asks that the buffer ks_w must contain the integer
sequence specified in Spec.k. The third line asks that the buffer
ws_w buffer must contain the precomputed results of the Spec.ws
function applied to the current block.
The first line of the ensures clause states as a post-condition that
the function only modifies the intermediate hash value hash_w; all
other buffers remain unchanged. The second line asserts that the
new contents of the hash_w buffer will be the same as the result of
the Spec.shuffle function applied to the old hash_w and the current
block_w, hence linking the specification to the implementation.
Verifying the code of shuffle against this type guarantees all
our target properties: memory safety, secret independence for all
inputs, and functional correctness with respect the the standard.
F∗ verifies shuffle with a little help in the form of annotations
indicating intermediate loop invariants. The full proof of SHA-256
requires a little more work; we write a total of 622 lines of Low∗
code and annotations, from which we generate 313 lines of C, which
gives a rough indication of the annotation overhead for verification.
Generating Verified C code for SHA-256. We run KreMLin on
our verified Low∗implementation to generate C code. Figure 4 de-
picts the compiled code for shuffle. Our Low∗source code is broken
into many small functions, in order to improve readability, modu-
larity and code sharing, and to reduce the complexity of each proof.
Consequently, the default translation of this code to C would result
in a series of small C functions, which can be overly verbose and
hurts runtime performance with some compilers like CompCert.
To allow better control over the generated code, the KreMLin
compiler can be directed (via program annotations) to inline cer-
tain functions and unroll certain loops, in order to obtain C code
that is idiomatic and readable. The shuffle function illustrates this
mechanism: the _Ch, _Maj, _Sigma0, _Sigma1, and shuffle_core
functions are inlined, yielding a compact C function that we believe
is readable and auditable. Furthermore, as we show in §8, the perfor-
mance of our generated C code for SHA-256 (and SHA-512) are as
fast as handwritten C implementations in OpenSSL and Libsodium.
Implementations of SHA-256
Comparison with prior work.
have been previously verified using a variety of tools and tech-
niques. The approach most closely-related to ours is that of Ap-
pel [8], who verified a C implementation adapted from OpenSSL
using the VST toolkit. We do not operate pre-existing C code di-
rectly but instead generate the C code from our own high-level
proofs and implementations. Appel wrote a high-level specification
in Coq and an executable functional specification (similar to ours)
in Coq; we only needed a single specification. He then manually
proved memory safety and functional correctness (but not side-
channel resistance) for his code using the Coq interactive theorem
prover. His proof takes about 9000 lines of Coq. Our total specs +
code + proofs for SHA-256 amount to 708 lines of F∗ code, and our
proofs are partially automated by F∗ and the Z3 SMT solver.
Other prior work includes SAW [35], which uses symbolic equiv-
alence checking to verify C code for HMAC-SHA-256 against a
compact spec written in Cryptol. The proof is highly-automated.
Vale [23] has been used to verify X86 assembly code for SHA-256
using Dafny. The verification effort of our approach is compara-