title:The Effect of Google Search on Software Security: Unobtrusive Security
Interventions via Content Re-ranking
author:Felix Fischer and
Yannick Stachelscheid and
Jens Grossklags
The Effect of Google Search on Software Security:
Unobtrusive Security Interventions via Content Re-ranking
Felix Fischer, Yannick Stachelscheid, Jens Grossklags
Technical University of Munich
{flx.fischer, yannick.stachelscheid, jens.grossklags}@tum.de
ABSTRACT
Google Search is where most developers start their Web journey
looking for code examples to reuse. It is highly likely that code that
is linked to the top results will be among those candidates that find
their way into production software. However, as a large amount
of secure and insecure code has been identified on the Web, the
question arises how the providing webpages are ranked by Google
and whether the ranking has an effect on software security.
We investigate how secure and insecure cryptographic code
examples from Stack Overflow are ranked by Google Search. Our
results show that insecure code ends up in the top results and is
clicked on more often. There is at least a 22.8% chance that one out
of the top three Google Search results leads to insecure code.
We introduce security-based re-ranking, where the rank of Google
Search is updated based on the security and relevance of the pro-
vided source code in the results. We tested our re-ranking approach
and compared it to Google‚Äôs original ranking in an online developer
study. Participants that used our modified search engine to look for
help online submitted more secure and functional results, with sta-
tistical significance. In contrast to prior work on helping developers
to write secure code, security-based re-ranking completely eradi-
cates the requirement for any action performed by developers. Our
intervention remains completely invisible, and therefore the proba-
bility of adoption is greatly increased. We believe security-based
re-ranking allows Internet-wide improvement of code security and
prevents the far-reaching spread of insecure code found on the
Web.
CCS CONCEPTS
‚Ä¢ Security and privacy ‚Üí Usability in security and privacy; ‚Ä¢
Information systems ‚Üí Content ranking.
KEYWORDS
usable security; software development; Web search; content ranking
ACM Reference Format:
Felix Fischer, Yannick Stachelscheid, Jens Grossklags, Technical University of
Munich, {flx.fischer, yannick.stachelscheid, jens.grossklags}@tum.de . 2021.
The Effect of Google Search on Software Security: Unobtrusive Security In-
terventions via Content Re-ranking. In Proceedings of the 2021 ACM SIGSAC
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea
¬© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484763
Conference on Computer and Communications Security (CCS ‚Äô21), November
15‚Äì19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA,
15 pages. https://doi.org/10.1145/3460120.3484763
1 INTRODUCTION
‚ÄúJust Google it!‚Äù Using the dominant search engine has become
one of the most popular ways to find an answer to a question
when there is no easy explanation at hand. This counts for software
developers as well, as it is often the first stop on their journey to
solve urgent programming problems. This is because the Web offers
everything developers need to know; from books and tutorials to
documentation and code examples. As such, solutions seem to be
only a few queries and clicks away.
Even though Google Search provides thousands of results for a
single query, users typically choose a link that is among the top
results, or ‚Äúabove the fold.‚Äù1 If there is nothing relevant, they try
another query and Google again. That means search results that are
above the fold may have a tremendous impact on today‚Äôs software
as they define what developers learn and how they solve problems.
Researchers at Google have shown that developers mostly used
their search engine in order to find out how to use a specific ap-
plication programming interface (API) and to find functional ex-
amples [39]. However, the safe use of cryptographic APIs not only
heavily relies on functional examples but on the availability of se-
cure best-practice examples [1, 2, 17, 18, 22]. Since the use cases of
these APIs are very different and complex [17, 18], Google Search
appears to be essential for finding the right examples for the prob-
lem at hand [2].
Stack Overflow is among developers‚Äô most favorite Web re-
source [2] and provides a huge amount of ready-to-use code ex-
amples [18]. Prior work shows that while developers usually start
with Google Search [2, 39, 41], Stack Overflow is almost always
part of the subsequent Web journey [2].
Unfortunately, these code examples often provide very weak
cryptography or contain severe software vulnerabilities. Moreover,
software developers tend to reuse these code examples over secure
ones even though sometimes significantly more secure than inse-
cure examples are available. Ninety-seven percent of Google Play
applications that reused code from Stack Overflow reused at least
one insecure example [17].
This phenomenon might be explained by a generally higher
Google Search rank for insecure code. The Google Search rank is
a very powerful positive indicator that people tend to follow even
if the displayed abstract of the related result is less relevant [32].
This selection bias might contribute to the reuse of insecure code if
it ends up in the top results.
1https://backlinko.com/google-ctr-stats
Session 11C: Software Development and Analysis CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea3070If this is the case, could this observation be harnessed to improve
software security by a deliberate and comprehensive re-ranking
of search results? To investigate this important question, we have
perform an end-to-end investigation on whether modifications to
the rank have a direct significant effect on the security of code
written by software developers.
First, in an online study, we have systematically tested how
secure and insecure cryptographic code examples are currently
ranked by Google Search. We collected search results from 192
developers and analyzed the security of Stack Overflow code exam-
ples found among the top ten search results (ùë°10) that are shown
on the first page of Google Search.
We find that significantly more results in ùë°10 provide links to
insecure code. More interestingly, if ùë°10 provides an insecure link
chances are higher that it is among the top three results. In fact,
there is a 22.8% probability that one out of the three top results link
to insecure code examples. Further, there is only a 46.1% chance
that users will not encounter an insecure Stack Overflow result on
Google Search.
Second, we introduce and evaluate security-based re-ranking. It
applies a semi-supervised clustering method to identify code exam-
ples on the Web that are not only secure, but provide secure best
practices. This means they provide the secure end-to-end pattern
to solve the given use case at hand. By boosting these examples in
search results and decreasing the rank of insecure results, we have
improved the security distribution of results in ùë°10. Afterwards, we
observed a near zero probability that the top three results contained
insecure code. Moreover, there was a 29.4% chance that at least one
top three result contained secure best practices.
Lastly, we tested security-based re-ranking in an online devel-
oper study with 218 participants that had to solve several security-
related programming tasks. The more the participants interacted
with the modified search engine, the more secure and functional
solutions they submitted. We show that this effect is statistically sig-
nificant (ùëù < 0.05). We did not observe this effect from our control
group using original Google Search, who provided more insecure
solutions.
effect on software security.
We summarize our contributions as follows:
‚Ä¢ We demonstrate that Web search ranking has a significant
‚Ä¢ We show that the current distribution of insecure coding
practices in the top results of Google Search is significantly
higher than those of secure ones.
‚Ä¢ We have developed security-based re-ranking which helps in
identifying secure best practices on the Web and adjusts the
Google Search ranking to show these results preferentially.
‚Ä¢ We have performed a developer study and show that security-
based re-ranking significantly helps software developers to
write more secure code in comparison to those that used
original Google Search.
We structure and present our work as follows. We first discuss
related work in the domains of search and security, software devel-
oper studies, and developer search behaviors in Section 2. We then
describe our first online study in Section 4, where we measure the
security of search results and present the results in Section 4.5. In
Section 5, we continue with the presentation of our methodology
for security-based re-ranking, and follow with its evaluation in
Section 5.6. Finally, we test whether security-based re-ranking has
an effect on code security in our second online study in Section 6
and present the results in Section 6.2.
We support open science and open-source our data including
surveys, study tasks, source code, and results.2
2 RELATED WORK
2.1 Search and Security
A key area of prior work relates to understanding search behavior.
Mining query data from search engines suggests that patterns fol-
low a power-law distribution [5], i.e., there are huge differences in
the importance of the quality of results. Likewise, research over the
last 20 years has shown that individual consumers typically visit
only a limited set of ‚Äî often prominent ‚Äî distinct websites [10, 12].
To protect users from reaching unwanted search destinations,
various approaches have been taken, ranging from automatic de-
tection of ‚Äúdangerous‚Äù websites (e.g., [30, 45]) to using notifications
to inform users about such risks, e.g., Google Safe Browsing [21].
From a privacy perspective, earlier work focused on embedding
P3P-related indicators in the search engine [8]. In the security
context, a variety of indicators have been studied regarding their
effectiveness, in particular in the phishing context [13, 14, 16, 26].
While the extant literature for this topic space is tremendously
rich, we are unaware of research on the impact of common Internet
search engines on the utilization of formal or informal security
advice sources, and the eventual implications for code security.
2.2 Software Developer Studies
In the past five years, the research area of usable security has in-
creasingly focused on the work practices of developers [3], thereby
complementing the existing literature on end-user security prac-
tices and behaviors [38, 50].
Previous work has shown that developers do not only vary in
their ability to deliver functional code, they also vary in terms of
creating code free of security problems [4].
In this context, programming advice forums play an important
role when it comes to code delivered by developers. For example,
previous work has shown that 30% of cryptographic code examples
on Stack Overflow were insecure, and that these insecure samples
were reused in over 190,000 Android apps [17]. Bai et al. performed
a survey to find out why developers reuse insecure code [6]. A user
study has shown that programmers prefer programming advice
platforms over more traditional sources such as textbooks and
official programming documentation [2].
In fact, a developer survey (with over 88,000 software developers
from 179 countries) conducted by Stack Overflow reported that
over 60% visit the platform at least once or more every day, and
that 96% come to seek solutions to specific problems [42].
Identifying secure code on Stack Overflow is challenging, since
quality signals can often be misleading. Based on the manual in-
spection of a large sample of advice postings for cryptographic
code, it was shown that insecure posts were most often associated
with higher view counts and scores, and were frequently posted
2https://github.com/TUM-ChairOfCyberTrust/security-based-reranking.git
Session 11C: Software Development and Analysis CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea3071by so-called trusted users [9]. Another study showed that addi-
tional information beyond the code can be taken into consider-
ation to identify insecure code on Stack Overflow with machine
learning methods [55]. Other research documented that developers
are easily influenced by the high-level (irrelevant) appearance of
postings, rather than such quantitative ratings provided on Stack
Overflow [44]. This means even developers may not even always
follow quantitative indicators.
Several studies have investigated how to help developers to
deliver more secure code. On the one hand, multiple systems such
as FixDroid have been designed to support developers with easy-to-
use tools to check (cryptographic) code and to provide fixes [31].
On the other hand, several works address the complexity of
developing secure code. One solution approach is to provide devel-
opers with simplified APIs to prevent incorrect usage [1]. However,
the associated developer study showed that code sometimes lacked
necessary functionality, and the simplified APIs were not applicable
to several specific use cases.
Recent work has tried to harvest the existing wealth of informa-
tion on Stack Overflow more directly by using machine learning
techniques to distinguish secure from insecure postings on crypto-
graphic use cases, and reworking the Stack Overflow interface to
nudge users to postings which are relevant for the use case and are
secure [18]. A user study shows that developers produce functional
code, which is often more secure using the improved system.
Our review of publications in the security and usable security
space did not yield any research that specifically addresses how
developers search for secure solutions with search engines.
2.3 Developer Search Behavior
However, a variety of studies have been conducted to explore de-
veloper search behaviors in the software engineering domain. The
studies analyze how developers use specialized code search engines
and also Web search engines.
A study with developers at a large Internet company showed
that they used a specialized code search engine for the internal
codebase 12 times each day on average [39]. The study used an
experience sampling methodology. Another recent study explored
how developers use Web search engines with a focus on comparing
code search with other search behaviors [35]. The authors explored,
e.g., whether the used vocabulary or the length of queries differ
across the two contexts. In another survey study, it was found that
91% (out of 55 developers) had used search engines in the past to
look for source code examples. However, directly using search func-
tionality on ‚Äúsocial help sites‚Äù (e.g., StackOverflow, Quora etc.) had
only been done by 36% of the participants [27], which emphasizes
the importance of the Web search context in our work.
A multi-method study investigating survey responses of 235
software engineers as well as the search queries of 60 developers
sheds some light on the self-reported frequency and perceived
difficulty of searching for certain types of programming-related
information on the Web, as well as actual query frequencies [53].
Somewhat relevant to our work, participants reported searching for
‚Äúexplanations for exceptions/error messages (e.g., HTTP 404)‚Äù and
‚Äúsolutions to common programming bugs‚Äù often, and considered
these search tasks to be relatively easy. The participants further
reported to sometimes ‚Äúsearch for reusable code snippets‚Äù (with a