# The Effect of Google Search on Software Security: Unobtrusive Security Interventions via Content Re-ranking

## Authors
Felix Fischer, Yannick Stachelscheid, Jens Grossklags  
Technical University of Munich  
{flx.fischer, yannick.stachelscheid, jens.grossklags}@tum.de

## Abstract
Google Search is the primary starting point for developers seeking code examples to reuse. Given the prevalence of both secure and insecure code on the Web, it is crucial to understand how these resources are ranked by Google and the impact of such ranking on software security. This study investigates the ranking of secure and insecure cryptographic code examples from Stack Overflow in Google Search results. Our findings indicate that insecure code frequently appears in top search results and is more likely to be clicked. Specifically, there is a 22.8% chance that one of the top three results leads to insecure code.

We introduce a security-based re-ranking approach, which updates the Google Search rank based on the security and relevance of the provided code. In an online developer study, participants using our modified search engine submitted significantly more secure and functional code. Unlike previous methods, our intervention is unobtrusive and does not require any additional action from developers, thus increasing the likelihood of adoption. We believe this approach can improve code security across the Internet and prevent the widespread use of insecure code.

## CCS Concepts
- Security and privacy ‚Üí Usability in security and privacy
- Information systems ‚Üí Content ranking

## Keywords
- Usable security
- Software development
- Web search
- Content ranking

## ACM Reference Format
Felix Fischer, Yannick Stachelscheid, Jens Grossklaps. 2021. The Effect of Google Search on Software Security: Unobtrusive Security Interventions via Content Re-ranking. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS '21), November 15‚Äì19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/3460120.3484763

## 1 Introduction
"Just Google it!" has become a common phrase, reflecting the dominance of Google Search as a primary resource for finding answers to various questions. For software developers, Google Search is often the first stop when solving programming problems. The Web offers a wealth of resources, including books, tutorials, documentation, and code examples, making solutions seem just a few queries away.

Despite the vast number of results Google provides, users typically focus on the top results, or those "above the fold." Research indicates that developers primarily use Google to find API usage information and functional examples [39]. However, the safe use of cryptographic APIs requires not only functional but also secure best-practice examples [1, 2, 17, 18, 22]. Given the complexity of these APIs, Google Search is essential for finding appropriate examples [2].

Stack Overflow is a popular resource among developers, providing numerous ready-to-use code examples [18]. While developers often start with Google, they frequently turn to Stack Overflow for detailed solutions [2]. Unfortunately, many of these code examples are insecure, and developers tend to reuse them even when more secure alternatives are available. For instance, 97% of Google Play applications that reused Stack Overflow code included at least one insecure example [17].

This phenomenon may be due to the higher Google Search rank of insecure code. Users tend to follow the top-ranked results, even if the abstracts are less relevant [32]. This selection bias can contribute to the reuse of insecure code. To address this, we investigated whether re-ranking search results could improve software security.

## 2 Related Work
### 2.1 Search and Security
Previous research on search behavior suggests that query patterns follow a power-law distribution [5], indicating significant differences in the importance of result quality. Studies have also shown that users typically visit a limited set of prominent websites [10, 12]. To protect users from malicious sites, various approaches, such as automatic detection and notifications, have been implemented [30, 45, 21].

From a privacy perspective, earlier work focused on embedding P3P-related indicators in search engines [8]. In the security context, studies have examined the effectiveness of various indicators, particularly in phishing [13, 14, 16, 26]. However, there is limited research on the impact of search engines on the utilization of security advice and its implications for code security.

### 2.2 Software Developer Studies
Recent research in usable security has increasingly focused on developer practices [3], complementing studies on end-user security behaviors [38, 50]. Developers vary in their ability to produce secure code [4]. Programming advice forums, such as Stack Overflow, play a critical role in this context. For example, 30% of cryptographic code examples on Stack Overflow were insecure, and these examples were reused in over 190,000 Android apps [17]. A survey by Bai et al. explored why developers reuse insecure code [6], and a user study found that programmers prefer advice platforms over traditional sources [2].

A Stack Overflow survey of over 88,000 developers from 179 countries reported that 60% visit the platform daily, and 96% seek specific problem solutions [42]. Identifying secure code on Stack Overflow is challenging, as quality signals can be misleading. Insecure posts often have higher view counts and scores and are frequently posted by trusted users [9]. Machine learning methods have been used to identify insecure code [55], but developers may still be influenced by irrelevant factors [44].

Several studies have aimed to help developers write more secure code. Tools like FixDroid provide easy-to-use interfaces for checking and fixing cryptographic code [31]. Simplified APIs have also been proposed to prevent incorrect usage [1], but they may lack necessary functionality for specific use cases. Recent work has used machine learning to distinguish secure from insecure postings on Stack Overflow and nudge users towards secure content [18]. However, no prior research specifically addresses how developers search for secure solutions using search engines.

### 2.3 Developer Search Behavior
Studies have explored developer search behaviors in the software engineering domain, analyzing the use of specialized code search engines and Web search engines. A study at a large Internet company found that developers used a specialized code search engine 12 times daily on average [39]. Another study compared code search with other search behaviors, examining differences in vocabulary and query length [35]. A survey found that 91% of 55 developers had used search engines to find source code examples, while only 36% used search functionality directly on social help sites [27].

A multi-method study of 235 software engineers and 60 developers' search queries revealed that developers frequently search for explanations of exceptions and solutions to common bugs, considering these tasks relatively easy [53]. They sometimes search for reusable code snippets, highlighting the importance of the Web search context in our work.

## 3 Methodology
### 3.1 Online Study: Current Ranking of Secure and Insecure Code
We conducted an online study to assess how secure and insecure cryptographic code examples are currently ranked by Google Search. We collected search results from 192 developers and analyzed the security of Stack Overflow code examples in the top ten results (ùë°10) displayed on the first page of Google Search.

### 3.2 Results
Our analysis showed that significantly more results in ùë°10 link to insecure code. If ùë°10 includes an insecure link, it is more likely to be among the top three results. There is a 22.8% probability that one of the top three results links to insecure code. Additionally, there is only a 46.1% chance that users will not encounter an insecure Stack Overflow result on Google Search.

### 3.3 Security-Based Re-Ranking
We introduced and evaluated a security-based re-ranking method. This approach uses a semi-supervised clustering method to identify secure best-practice code examples. By boosting these examples and decreasing the rank of insecure results, we improved the security distribution of results in ùë°10. After re-ranking, the probability of the top three results containing insecure code was nearly zero, and there was a 29.4% chance that at least one top three result contained secure best practices.

### 3.4 Online Developer Study
We tested the security-based re-ranking in an online developer study with 218 participants who solved several security-related programming tasks. Participants using the modified search engine submitted more secure and functional solutions, with statistically significant results (ùëù < 0.05). The control group using original Google Search provided more insecure solutions.

## 4 Contributions
- **Significant Impact**: We demonstrate that Web search ranking significantly affects software security.
- **Current Distribution**: We show that the current distribution of insecure coding practices in top Google Search results is significantly higher than that of secure ones.
- **Security-Based Re-Ranking**: We developed a method to identify secure best practices and adjust Google Search rankings to prioritize these results.
- **Developer Study**: We conducted a developer study showing that security-based re-ranking significantly helps developers write more secure code compared to using original Google Search.

## 5 Conclusion
We support open science and have made our data, including surveys, study tasks, source code, and results, publicly available. Our findings highlight the importance of re-ranking search results to improve code security and prevent the spread of insecure code. Future work should explore the broader implications of this approach and its potential for wider adoption.

## References
[References to cited works would be listed here.]

---

This revised version aims to make the text more coherent, clear, and professional, with a structured flow and enhanced readability.