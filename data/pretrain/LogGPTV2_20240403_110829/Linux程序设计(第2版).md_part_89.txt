set hello there
there
变量名中的字符是分大小写的，并且可以是任意长度。变量名或变量值里面的特殊字符
（比如空白字符等）需要用引号括起来，也就是要用双引号把变量名或变量值括起来。和在其他
UNIX操作系统的shell里一样，在使用引号时必须小心在意。我们很快就要学习Tcl语言里引号、
括号的各种使用方法了。
fare wel1
查看一个变量的当前值也要使用set命令，但这次不必给它加上一个值参数了。
set he1lo
tnere
fare we11
像上面这样交互式地使用TcI时，解释器会打印出每个命令的执行结果。拿set命令来说、在
赋值时我们将会看到变量的新值被打印出来，如果没有给出新值，我们看到的就是该变量的当
前值。这是因为set命令的作用就是返回变量的当前值。
就像我们在UNIX的shel里做的一样。在我们的程序示例里，我们把一个字符串赋值给变s，
然后把它用在了puts命令里，puts命令的作用是通过“$s”形式的引用把它输出到屏幕上去：如
果变量的名字里包含着空格，可以使用花括号把它括起来。如下所示：
puta $a
[dx]d
246
加入jaVa编程群：524621833
---
## Page 470
452
Linux程序设计
如果想在一条命令里引用其他命令的结果，需要把那条命令放在方括号里，上面的第二个
例子就是这样做的。这会使Tel先执行方括号里面的命令，然后把它的值放在原来的地方供其他
命令使用。这与我们在UNIX的shell里使用“S（command)”的用法非常相似。在同一个例子里，
我们还使用expr命令对个Tcl表达式进行求值并返回了结果。
我们可以用unset命令从Tcl解释器里去掉一个变量
unget a
can′t read *a*: no such variable
d
15.1.4引用和替换
类似于UNIX的shell，Tel对引号、括号的使用有很苛刻的限制。在Tcl里，与引号、括号和
变量替换有关的规定有很多，你必须掌提它们。
1.变量的替换
在一个Tel命令里，只要变量名的前面加上了一个“S”符号，该变量就会被替换为它的值。
这也是我们向命令传递参数的机制，在需要保存和使用普通数值或字符串值的时候用的还是这
种办法。如下所示：
set apple5
set orange $apple
2.命令的替换
如果一条命令被放在方括号里，就会先执行这条命令，然后把它的值放在原来的位置上。
如下所示：
set pear [expr Sorange + 1]
3.反解线字符的替换
我们用一个反斜线字符（\）来取消紧随其后的那个字符的特殊含义。我们可以用它创建出
名字或值里包含有特殊字符（比如说美元符号“S"）的命令来。
一个出现在语句末尾的反斜线字符被认为是一个续行标志（也就是说，它取消了换行符的
特殊含义）如下所示：
set fred sapple
1]
7
4.宇符串引用
创建包含空白或其他特殊字符的字符串时要使用双引号。但就象UNIX的shel里一样，这种
引用形式允许进行变量替换。如果变量出现在用双引号括起来的字符申里，就会被替换为它们
加入jaVa编程群：524621833
---
## Page 471
第15章工具命令语言Tcl
453
相应的值。如下所示：
set joe *Our fruits are orange: $orange, and pear: Spear
Our fruits are orange: 5, and pear: 6
5.花括号引用
另外一种引用办法使用的是花括号“！》”，它不允许进行变量替换，创建出来的字符串就是
原封不动的字面形式。与UNIX的shelI里使用单引号的情况相类似，花括号的作用是防止替换的
发生
我们还可以用花括号来保存函数体。我们希望变量和命令的替换发生在它们被执行的时候
而不是发生在它们被定义的时候。如下所示：
set moe （Our fruite are orange: $orange, and pear: $pear)
Our fruits are orange: Sorange. and pear: Spear
变joe和moe之间的区别是显而易见的。moe中的变量替换因为有花括号的存在血没有
发生
如果对花括号及其内容进行求值，实际效果就等于是去掉了最外层的花括号。如果还要做进
一步的求值，其结果里将是进行了变量替换之后得到的东西。括号可以嵌套。请看下面的例子：
#ot fzed 1234
eet cad1 [puts $fred]
$set cmd2（（puts Sfred])
1234
[puts $fred]
otcad1
set cmd2
(puts $fred]
变量cmdi取的是一个空值，即输出变量fred这个操作的返回值。变量cmd2取的值是这个命令
本身、而不是操作结果。在这里，因为有了花括号，所以puts的求值和Sfred的扩展都没有发生。
这一切看上去相当容易把人给弄糊涂，所以我们来看看当Tel的shel1遇到不同类型的引号、
括号时到底会做哪些事情。
6.Tcl解释器替换
Tcl对命令中的变量只进行一轮替换。在执行--个命令的时候，命令行根据其中的空白字符
（不包括换行符，它被认为是命令的分隔符）被划分为一个一个的“单词”。被包括在一对双引
号、方括号或花括号中的内容（即”...”、“...或！...）被看做是一个“单词”。解释器按下
面的规则对每个“单词”进行解释：
·如果“单词”以“S”开始，Tcl将进行变量替换。
·如果“单词”以左方括号“I”开始，Tcl将进行命令替换，即再次调用Tci解释器把这个
“单词”当作一个新的Tci脚本来处理。然后用其结果替换掉原来的“单词”。
·如果“单词”以左花括号“[”开始，单词中的所有内容（除开始和结尾处的左右花招号
以外）就都将保持原样，包括空格、“S”符号等。
加入jaVa编程群：524621833
---
## Page 472
454
Linux程序设计
这些规则可以总结为表15-7：
表15-1
单词
替换方式
结果
变量
a的值
[connands]
俞令
保释执行commandx的结果
{the fornatted text)
不替换
“the formatted text”原文
\$word
反斜线
Sword
如果结果包含着有进一步的变量引用或嵌套命令，它们将不会被扩展。这就意味着一个Tc1
命令的执行情况是可以预见的。尽管如此，在选用引号和括号的时候，你还是要深思熟虑。我
们再用下面这几个例子做进-步的说明。
set age 35
set stx (I'm Sage yaars old)
I'm Sage years old
puts *$str*
这些赋值形成了两层替换。变量cmd里引用了变量str，而str又引用了变量age，变址age的值
是35。如果我们想通过cmd来取得age的值，就必须再安排进一步的替换。
如果需要获得第二轮或更进一步的替换，我们可以使用eval命令或者明确地调用subst命令，
只有7.4和更高版本的Tcl里有subst命令。eval命令把它的参数分别替换后集中起来，然后把它当
作一个字符申传递到Tel解释器里去执行。如下所示：
eva1$ead
I'm Sage years o1d
我们看到，最终执行的是cmd的值--“puts“Sstr"”命令。字符串str的值是“I'mSage
yearsold"。如果我们想在执行puts命令之前展开这个字符串，就需要使用subst命令。subst命令
的作用是对字符串进行变遣、命令和反斜线替换，然后返回新得到的字符串。两者之间的区别
是：eval的参数必须是一个命令，我们对这个命令进行扩展：subst进行扩展但不对其结果求值。
如下所示：
wubat $cad
puts *I'm Sage years old
这里，subst返回了一个有效的命令，这条命令在被求值的时候将输出一个字符串，字符串
单包含看age的当前值。如下所示：
aval [nubst $cmd]
1'n 35 years old
转换和执行方面的控制使Tcl语言成为一个功能很强的工具。因为eval命令可以执行任何
个字符串，所以Tci程序之间可以彼此传递可执行的命令。利用这个技巧可以开发出Tel语言中的
加入jaVa编程群：524621833
---
## Page 473
第15章工具命令语言Tcl
455
Tcl调试器，用它来控制其他TcI程序的执行情况。我们也可以把它用在因特网程序设计中，比如
说让服务器发送一个程序到客户那里去执行，或者即时创建一个Tcl脚本等。
7.注释
Tcl程序可以包含注释。注释就象是-个名宁是“#”的Tcl命令，但这条命令不做任何事情。
这与其他类似的程序设计语言不同，它意味着我们可以通过在语句末尾加上一个反斜线而使注
释延续好几行。特别值得一提的是分号在注释里是不起作用的，所以我们可以在分号后面加上
我们的注释。如下所示：
This is a comment
but the comment continues onto this line; and this is still conment
15.1.5计算
Tcl专门有一个用来完成各种算术计算的命令expr。之所以会这样是因为Tcl解释器本身没
有数学函数，它必须依赖由命令提供的额外功能才能完成算术运算。虽然Tcl可以执行有限的
算术运算-一比如循环语句需要的计数和条件判断等，但大量的计算还是需要由expr命令来
完成。
expr命令可以用一个或者更多个参数计算出·-个结果来。这些参数可以是运算符、运算数和
圆括号，运算数可以被指定为数字（整数或浮点数）、逻辑表达式、将被转换（包括替换操作）
为数字值的字符串、变量引用和嵌套命令等。
下面是一些这样的例子：
axr5+5
8et a 5
 set b 6
expr $a+$b
er 2**$a.$b*
11
axpr 3*(1+[atring length*hello*))
11 . 2
? R
能够用在expr命令里的操作符列在表15-2里，它们是按照优先级从高到低的顺序排列的。比
较运算的结果用“1”代表真，用“0”代表假。
表15-2
操作符优先级
说明
单元正负符号、按位求反、逻辑非
/8
乘法、除法、除法求余数
加法、减法
左移、右移（两个运算都带正负符号）
加入jaVa编程群：524621833
---
## Page 474
456
Linux程序设计
（续）
操作符优先级
说
小下、大于，小于等下、大于等于
等于、不等于
按位与操作
按位异或操作
按位或操作
&a
逐辑与操作
1
逻辑或操作
cond?yes:no
双元条件判断，类似于C语自中的用法：如果cond非零，返回yes的值：含则返网mo的值
下面是最后一个操作符的使用示例：
set k*foo*
foo
pass
Tcl还支持在表达式里使用下列的数学函数，它们中的每-一个都会调用math函数库里的同名
函数。如下所示：
asin
atan
atan2
cei1
CoS
cosh
exp
floor
fmod
hypot
1og
log10
pow
sin
sinh
sqrt
tan
tanh
因为经常会用到如下所示的计算结构：
Stt a [expr $a + 1]
所以专门为此准备了一个incr命令。在缺省的情况下，它会给一个变量增加一个“1"。也可
以给定-个明确的递增数。如下所示：
set & 5
 incr &
incr a 5
3set a
11
15.1.6控制结构
Tel支持多种程序流程的控制结构，其中包括条件、循环和选择等。
加入jaVa编程群：524621833