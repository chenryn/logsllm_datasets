r
e
b
r
a
B
d
o
o
G
o
m
o
C
/
/
/
/
/
/
/
/
/
/
/
/
/
= vulnerable;
= not vulnerable
= risky
asset ﬁle app.xml [39] in which Seattle Cloud apps store,
among other things,
the user accounts and passwords for
logging into the app. We statically searched for this vulnerable
InternalFileContentProvider in 60,314 apps from
Seattle Cloud and found it
in 100% of those apps. We
also discovered the vulnerable AppContentProvider in
7,953 (98.5%) of analyzed 8,074 Mobincube apps in our test
set.14 This underlines the high security impact of application
generators that are using vulnerable boilerplate code. We also
discovered that unprotected components are not always within
the package domain of the application generator service,
but can sometimes be traced back to included third party
packages, e.g., by Radius Networks or ZXing, and it remains
to be determined whether the app generator failed to correctly
protect such third party components or whether the design of
those components prohibits a more secure integration.
aspect
are
A particularly worrisome
unprotected
BroadcastReceivers and Activity components
that might accept spoofed Intents from untrusted senders
and act upon such received data (P3). Eight of the tested
application generators produce code that is prone to such
Intent spooﬁng attacks. For example, Appinventor apps
react to a fake SMS notiﬁcation, Mobincube apps can be
triggered to interact with the WiFi service, and Appmachine-
generated apps have a remote command receiver exposed that
forwards received Intents unﬁltered to a native command
for execution.
B. Insecure Cryptographic API Usage (P4)
App developers might use cryptographic APIs to secure
their data on the end-user device. However, the security that
cryptographic APIs can actually deliver, strongly depends on
14We believe that
continued apps, built or
AppContentProvider.
the 121 apps without
last updated prior
this provider are older, dis-
the
to the introduction of
643
the correct usage of the cryptographic building blocks (e.g., ad-
equate block cipher modes, correct salting, etc.). App develop-
ers frequently make mistakes when using those primitives [15],
such as using ECB mode for encryption, using a non-random
IV for CBC encryption, or using constant salts/seeds (see
also [24]). The Android security best practices documentation
picked up some of these recommendations and, for instance,
advises using SecureRandom instead of Random, initializ-
ing cryptographic keys with KeyGenerator, or using the
Cipher class for encryption with AES and RSA.
Security analysis: To detect misuse of cryptographic APIs,
we re-apply the analysis methodology presented in [15] by
leveraging R-Droid [7] to search for usage of cryptographic
API methods and then track their parameters. To this end,
we focused on APIs in Android’s javax.crypto package.
For symmetric encryption, we analyzed the usage of the
Cipher.getInstance parameter, where developers are
expected to specify a symmetric encryption algorithm, mode
and padding—e.g."AES/CBC/PKCS5Padding". Similar to
related work and security best practices, we rated the use of
the ECB mode of operation as insecure and rated, additionally,
the following outdated algorithms as insecure: (3)DES, IDEA,
RC4, and Blowﬁsh. Moreover, the use of non-random IVs for
CBC mode or in general the use of a static encryption key is
rated as insecure.
To use hash functions, app developers are recommended
to use the MessageDigest class, where the hash func-
tion’s algorithm can be chosen via a string parameter—
-e.g. "SHA-256". App developers can include message
authentication codes (MACs) into their apps by using the
Mac.getInstance API call. Again, MAC algorithms
are expected to be passed as a string parameter—e.g.
"HmacSHA256". For hash functions and MACs, we consider
the use of MD2, MD4, MD5, SHA0, SHA1 and Ripemd128
as insecure.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:30:14 UTC from IEEE Xplore.  Restrictions apply. 
Regarding sources of randomness, we consider the usage of
Random instead of SecureRandom as insecure; however,
usage of SecureRandom is also rated as insecure when a
static seed is used.
Results: Seven out of thirteen tested app generators failed to
use Android’s cryptographic APIs securely. A rather patholog-
ical weakness seems to be using an insecure random number
generator. We discovered in ﬁve of seven vulnerable AppGens
that Random values are generated with a static initialization
vector, and most frequently used when generating symmet-
ric encryption keys or initialization vectors for CBC-mode
symmetric encryption, rendering the generated apps prone
to cryptanalytic attacks. For instance, Biznessapps creates
predictable session identiﬁers by concatenating the output of
Random with the current system time. Additionally, three
of those generators relied on the insecure ECB mode for
encryption.
C. Insecure WebViews (P5–P8)
App developers frequently fail in validating SSL/TLS cer-
tiﬁcates correctly [17], [18], [41], [21], making their apps
vulnerable against man-in-the-middle attacks. The Android
security best practices have a dedicated, extensive section on
security with HTTPS and SSL, explaining the pitfalls and their
solutions in implementing a secure SSL connection and even
providing tools for testing the SSL conﬁgurations of apps.
Moreover, web utility classes, such as WebView, allow
app developers to combine the features of web apps (e.g.,
platform independent languages) with those of native Android
apps (e.g., rich access to the device’s resources). However, the
access controls that govern web code (e.g., JavaScript from
different web domains) and local code (i.e., Android native
code) are not properly composed: the bridge code between web
code and local code can interact with the Android system with
the same access rights as its native host application, but does
not enforce the same origin policy on calls from the web code
to the bridge functions, thus opening this dangerous bridge
interface to all loaded web code. The security best practices
suggest to enable JavaScript only if really necessary, to prevent
cross-site scripting. In addition, it warns that bridges between
web code and local code should be used only for websites from
which all input is trusted, as it allows fracking attacks [22],
[13], [32].
This lack of origin-based protection of the JavaScript bridge
also opens the door for various origin-crossing attacks. A
particularly concerning cross-origin attack is based on the
scheme mechanism. Schemes allow apps on the device to be
invoked through URLs whose scheme part equals the scheme
registered by the app. However, any app can register for
arbitrary schemes. In combination with WebViews this allows
for unauthorized cross-origin attacks [44], when the user clicks
on a malicious link in the WebView, which refers to a local
application that might act on the parameters given by the URL.
Lastly, Android’s programming model allows app develop-
ers to dynamically load code from different sources, such
as public application packages, dex ﬁles, or the web via
WebViews. However, if the application does not correctly
verify the integrity and authenticity of loaded code, the app
becomes vulnerable to be compromised by an attacker that
can modify the loaded (or injected) code. This attack has to
be differentiated between platform native code (i.e., dex or
C/C++) [36] and web code (HTML, JavaScript) [29], [34]. In
the former attack, the attacker is able to modify the loaded
code, e.g., dex bytecode on the local ﬁle system or inject
malicious code into the download stream of such loaded
code. In the latter attack,
the attacker achieves execution
of custom JavaScript code within a trusted website in a
WebView or manages to navigate a WebView away from
a benign, safe website to an attacker-controlled website. As
a result, the attacker can control the web resources within
the compromised WebView (e.g., to exﬁltrate credentials) and
further leverage the WebView’s host app’s privileges to the
extent they are exposed through bridge code between host
app and WebView instance. Android’s security best practices
strongly discourages app developers from dynamically loading
code from outside of their application for the aforementioned
reasons and, again, recommends only loading web code from
trusted websites.
respectively. We
Security analysis: We tracked the parameters of
and
rated plain HTTP URLs
the
HTTPSUrlConnection
HTTPUrlConnection
as
classes
secure. Moreover, we
insecure and HTTPS URLs as
non-default TrustManager,
investigate
or
SSLSocketFactory,
HostnameVerifier
implementations with permissive veriﬁcation strategies,
which we deem as insecure. Additionally, for WebViews we
search for custom SSLErrorHandler implementations in
the WebViewClient with a permissive or insecure error
handling, which we deem as insecure.
use
the
of
We classify WebViews that enable JavaScript as in-
secure when the bridge functions expose security- and
privacy-sensitive functionality, and as secure if those op-
tions are disabled or non-critical functionality is exposed.
Since apps with target SDK 19 or higher reject mixed con-
tent by default, we consider those secure, unless develop-
ers used the setMixedContentMode method with the
MIXED_CONTENT_ALWAYS_ALLOW parameter to deviate
from the default; in this case, we consider the app’s behaviour
insecure according to the previously described metrics.
We further
investigate the presence and implementa-
tion of the shouldOverrideUrlLoading() method of
WebViewClient. We consider the app prone to origin
crossing if the WebViewClient is missing, i.e., the opening
of the URL is deferred to some installed app registered for
the URL’s scheme. Additionally, we consider the app prone
to this attack if a WebViewClient is present, but
it’s
implementation of the shouldOverrideUrlLoading()
defers the URL loading to apps via sending Intents with
the URL as parameter.
To determine whether apps load external code, we check
for API calls to DexClassLoader and subclasses that load
code over (insecure) network connections, which we consider
644
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:30:14 UTC from IEEE Xplore.  Restrictions apply. 
insecure behavior. Apps that use the URLClassLoader
with HTTP URLs are of particular danger.
In case of
WebViews, we consider code injection possible if ei-
ther the WebView uses insecure Internet connections or
if the WebViewClient is present but does not override
the shouldOverrideUrlLoading() function (or im-
plements a permissive URL overriding that opens attacker
provided links in the WebView). In those cases, an attacker
can potentially lure the WebView to an attacker-controlled
website.
the trustworthiness of
Results: Six of the tested application generators rely on web
technology, i.e., WebViews, to display their client’s content.
Thus, for those app generators it is paramount to prevent
untrusted content
from being loaded into the WebView
or securely sandboxing the WebView’s interaction with
the Android system and other installed apps. Out of the
thirteen tested app generators, six failed to correctly handle
SSL certiﬁcate veriﬁcation errors and accept any self-signed
certiﬁcate (P5), which also eases the task of an attacker to
inject code into a WebView by manipulating the download
stream (P8). Apps Geyser catches veriﬁcation errors, defers
the decision about
the certiﬁcate,
however, to the end-user, who has repeatedly been shown
in the literature to be unable to make such trust decisions
correctly [38]. At the same time, we found that none of the
investigated online services implemented measures to enhance
the SSL security, e.g., by pinning the certiﬁcate. Similarly, we
discovered that only about half of the tested apps correctly
limited the scope of navigation inside the WebViews or
enforce a same origin policy on the loaded web content,
thus opening the possibility to navigate the WebView to
untrusted web resources that deliver malicious code with
full access to the JavaScript bridge to native platform code.
This is particularly worrisome when considering that almost
all of the tested generators with WebViews expose quite
substantial JavaScript interfaces and hence enable fracking
attacks (P6). For instance, Apps Geyser exposes over 90
JavaScript bridge functions, providing an attacker with all
tools needed, such as camera and microphone access, storage
access, or Intent sending. Mobincube and Appy Pie even
exceed this number by exposing more than 100 functions,
such as createCalendarEvent,
including methods
getCurrentPosition,
getGalleryImage,
makeCall,
takeCameraPicture,
uploadMultipleFiles, or processHTML. Further
noticeable is that several of the tested generators convert the
loading of a custom URL in the WebView (e.g., through a
crafted link provided by the attacker) to an Intent that will
be sent by the generated app to other installed apps. This
opens the possibility for cross-origin attacks (P7).
sendSMS,
VII. DISCUSSION
We now interpret the key ﬁndings of our online applica-
tion generator study and propose some short and long-term
actionable items to improve the current status quo.
645
A. Citizen App Developers on the Rise
The ﬁrst key ﬁnding of our study is that citizen developers
are indeed a growing phenomenon in the mobile application
development ecosystem. As AppGens promise to decrease
the app’s development costs, more and more organizations
are interested in this new development paradigm. Financial
reports, already in 2011, expected citizen developers to build
at least 25% of new business applications by 2014 [20], with
an estimated a total revenues of $1.7 Billion in 2015 and
an expected growth of +50% per year [19]. Our analysis is
the ﬁrst to conﬁrm the growth forecast in terms of market
penetration for the mobile ecosystem, showing that at least