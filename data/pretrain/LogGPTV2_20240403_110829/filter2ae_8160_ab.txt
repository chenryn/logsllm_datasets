可以在适当的时候获取到前一个和后一个 chunk.
这里涉及到 chunk 到用户请求 mem 的想换转化操作, 以及对齐操作等. 请参考 `glibc-2.19/malloc/malloc.c:1258`
#### 空间复用
对于正在使用 chunk, **它的下一个 chunk 的`prev_size`** 是无效的, 所以这块内存被当前 chunk 给借用了,
因此对于请求分配 chunk 大小分配公式是 `chunk_size = (用户请求大小 + (2 - 1) *
sizeof(INTERNAL_SIZE_T)) align to 2 * sizeof(size_t)`
最后请参考 `eglibc-2.19/malloc/malloc.c:44`, 会指出一些默认参数值, 以及关于 chunk 的最小 size 和
对齐的相关说明. 这里列出来了一小部分.
      Supported pointer representation:       4 or 8 bytes
      Supported size_t  representation:       4 or 8 bytes
           Note that size_t is allowed to be 4 bytes even if pointers are 8.
           You can adjust this by defining INTERNAL_SIZE_T
      Alignment:                              2 * sizeof(size_t) (default)
           (i.e., 8 byte alignment with 4byte size_t). This suffices for
           nearly all current machines and C compilers. However, you can
           define MALLOC_ALIGNMENT to be wider than this if necessary.
      Minimum overhead per allocated chunk:   4 or 8 bytes
           Each malloced chunk has a hidden word of overhead holding size
           and status information.
      Minimum allocated size: 4-byte ptrs:  16 bytes    (including 4 overhead)
                  8-byte ptrs:  24/32 bytes (including, 4/8 overhead)
           When a chunk is freed, 12 (for 4byte ptrs) or 20 (for 8 byte
           ptrs but 4 byte size) or 24 (for 8/8) additional bytes are
           needed; 4 (8) for a trailing size field and 8 (16) bytes for
           free list pointers. Thus, the minimum allocatable size is
           16/24/32 bytes.
           Even a request for zero bytes (i.e., malloc(0)) returns a
           pointer to something of the minimum allocatable size.
           The maximum overhead wastage (i.e., number of extra bytes
           allocated than were requested in malloc) is less than or equal
           to the minimum size, except for requests >= mmap_threshold that
           are serviced via mmap(), where the worst case wastage is 2 *
           sizeof(size_t) bytes plus the remainder from a system page (the
           minimal mmap unit); typically 4096 or 8192 bytes.
翻译几个关键的点, chunk 的大小需要按照 Alignment 进行对齐, 每一个被分配的 chunk 都有一个字的头部消耗, 包含该 chunk
的大小以及状态信息, 具体会在 chunk 结构和边界标示说明.
## 空闲容器(缓存)
下面会介绍 ptmalloc 中存在的各种空闲容器
#### Bins
    eglibc-2.19/malloc/malloc.c:1341
    /*
       -------------------- Internal data structures --------------------    
       All internal state is held in an instance of malloc_state defined
       below. There are no other static variables, except in two optional
       cases:
     * If USE_MALLOC_LOCK is defined, the mALLOC_MUTEx declared above.
     * If mmap doesn't support MAP_ANONYMOUS, a dummy file descriptor
         for mmap.
       Beware of lots of tricks that minimize the total bookkeeping space
       requirements. The result is a little over 1K bytes (for 4byte
       pointers and size_t.)
     */
    /*
       Bins
        // Bins 就是由空闲 chunk - bin 组成数组, 每一个 bin 都是双向链表. Bin 存放是整理过的 chunks, 并且 bin 中合并过的空闲 chunk 是不存在相邻的, 所以 bin 中的每一个 chunk 都是可以被使用, 并且都是紧挨着正在使用的 chunk 或者 heap  内存末尾.
        An array of bin headers for free chunks. Each bin is doubly
        linked.  The bins are approximately proportionally (log) spaced.
        There are a lot of these bins (128). This may look excessive, but
        works very well in practice.  Most bins hold sizes that are
        unusual as malloc request sizes, but are more usual for fragments
        and consolidated sets of chunks, which is what these bins hold, so
        they can be found quickly.  All procedures maintain the invariant
        that no consolidated chunk physically borders another one, so each
        chunk in a list is known to be preceeded and followed by either
        inuse chunks or the ends of memory.
        // bins 中的 chunk 是按照大小排序的. FIFO, small bins 是不存在按大小排序的, 因为每一个 small bin 都是相同 size 的. 但是对于 large bin 是需要按照顺序插入的. 这样可以在内存分配时很快查找到合适内存.
        Chunks in bins are kept in size order, with ties going to the
        approximately least recently used chunk. Ordering isn't needed
        for the small bins, which all contain the same-sized chunks, but
        facilitates best-fit allocation for larger chunks. These lists
        are just sequential. Keeping them in order almost never requires
        enough traversal to warrant using fancier ordered data
        structures.
        // FIFO, 从头部插入节点, 尾部取节点. 这样有个特定就是更容易内存的合并.
        Chunks of the same size are linked with the most
        recently freed at the front, and allocations are taken from the
        back.  This results in LRU (FIFO) allocation order, which tends
        to give each chunk an equal opportunity to be consolidated with
        adjacent freed chunks, resulting in larger free chunks and less
        fragmentation.
        To simplify use in double-linked lists, each bin header acts
        as a malloc_chunk. This avoids special-casing for headers.
        But to conserve space and improve locality, we allocate
        only the fd/bk pointers of bins, and then use repositioning tricks
        to treat these as the fields of a malloc_chunk*.
     */
ptmalloc 采用分箱式管理空闲 chunk, 也就是 Bins. Bins 本身就是一个数组, 每一个存放的是一个对应长度的 chunk
双向环链表的头结点和尾节点. 相同 Size 的 chunk 才能组成一个环,Bins 是按大小依次进行存放.
关于 Bins 为什么定义为 `mchunkptr bins[NBINS * 2 - 2]` 而不是 `mchunkptr bins[NBINS * 4 -2]`, 是如何少一倍的空间实现的双向链表, 可以参考 `glibc内存管理ptmalloc源代码分析.pdf`, 这里大致说一下,
对于双向环的的标志头节点, 它的 `prev_size` 和 `size` 是无用的, 所以直接省略, 但是还要把它当成正确的 chunk 结构. 这里的
trick 就在于 `bin_at` 宏, 返回了伪造的 fake chunk 的地址, 这里和 `Double Free` 以及
`unlink绕过`的利用手法类似, 之后会在 `Double Free` 漏洞详细说明.
    /* addressing -- note that bin_at(0) does not exist */
    #define bin_at(m, i) \
      (mbinptr) (((char *) &((m)->bins[((i) - 1) * 2]))               \
                 - offsetof (struct malloc_chunk, fd))
这里举一个例子, 只摘取一部分, 完整的例子, 在下方的 ptmalloc 利用部分.
    # 查看 unsorted bin 的地址, 其实也就是 bin[1] 的地址
    (gdb) heap -b
    ===================================Heap Dump===================================
    unsorted bin @ 0x7ffff7dd1b88
            free chunk @ 0x602160 - size 0x90
            free chunk @ 0x6020b0 - size 0x90
            free chunk @ 0x602000 - size 0x90
    # 这里的 0x7ffff7dd1B78 也就是 bin_at 返回的地址, 返回了一个伪造的 chunk 的地址
    # 其实这里的 fd 和 bk 才真正属于 bin[1] 的内容.
    (gdb) p *(mfastbinptr)0x7ffff7dd1B78
    $17 = {prev_size = 6300176, size = 0, fd = 0x602160, bk = 0x602000, fd_nextsize = 0x7ffff7dd1b88 , bk_nextsize = 0x7ffff7dd1b88 }
#### small bins, large bins
对于 chunk `size bk` 为最小 size 的 chunk,
`large_bin->fd` 为最大 size 的 chunk.
#### Fastbins
关于 Fastbins 的介绍, 可以参考 `eglibc-2.19/malloc/malloc.c:1570`
    /*
       Fastbins
        // 单向链表, LIFO 规则
        An array of lists holding recently freed small chunks.  Fastbins
        are not doubly linked.  It is faster to single-link them, and
        since chunks are never removed from the middles of these lists,
        double linking is not necessary. Also, unlike regular bins, they
        are not even processed in FIFO order (they use faster LIFO) since
        ordering doesn't much matter in the transient contexts in which
        fastbins are normally used.
        Chunks in fastbins keep their inuse bit set, so they cannot
        be consolidated with other free chunks. malloc_consolidate
        releases all chunks in fastbins and consolidates them with
        other free chunks.
     */
当进行内存分配时先从 Fastbins 中进行查找, 之后才在 Bins 进行查找; 释放内存时, 当chunk `size fd` 遍历 Fastbins.
#### unsorted bin
只有一个 unsorted bin, 进行内存分配查找时先在 Fastbins, small bins 中查找, 之后会在 unsorted bin
中进行查找, 并整理 unsorted bin 中所有的 chunk 到 Bins 中对应的 Bin. unsorted bin 位于 `bin[1]`.
`unsorted_bin->fd` 指向双向环链表的头结点, `unsorted_bin->bk` 指向双向环链表的尾节点, 在头部插入新的节点.
#### top chunk
以下引用来自 《glibc内存管理ptmalloc源代码分析》。
> 对于非主分配区会预先从 mmap 区域分配一块较大的空闲内存模拟 sub-heap,通过管 理 sub-heap
> 来响应用户的需求,因为内存是按地址从低向高进行分配的,在空闲内存的最 高处,必然存在着一块空闲 chunk,叫做 top chunk.当 bins 和