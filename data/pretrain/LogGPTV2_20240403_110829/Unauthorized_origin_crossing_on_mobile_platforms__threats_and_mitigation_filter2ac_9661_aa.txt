title:Unauthorized origin crossing on mobile platforms: threats and mitigation
author:Rui Wang and
Luyi Xing and
XiaoFeng Wang and
Shuo Chen
Unauthorized Origin Crossing on Mobile Platforms:      
Threats and Mitigation 
Rui Wang 
Luyi Xing 
Microsoft Research 
PI:EMAIL 
Indiana University 
PI:EMAIL 
XiaoFeng Wang 
Indiana University 
PI:EMAIL 
Shuo Chen 
Microsoft Research 
PI:EMAIL 
ABSTRACT 
With  the  progress  in  mobile  computing,  web  services  are 
increasingly delivered to their users through mobile apps, instead 
of  web  browsers.  However,  unlike  the  browser,  which  enforces 
origin-based security policies to mediate the interactions between 
the web content from different sources,  today’s mobile OSes do 
not have a comparable security mechanism to control the cross-
origin communications between apps, as well as those between an 
app  and  the  web.  As  a  result,  a  mobile  user’s  sensitive  web 
resources could be exposed to the harms from a malicious origin.  
In this paper, we report the first systematic study on this mobile 
cross-origin  risk.  Our  study  inspects  the  main  cross-origin 
channels on Android and iOS, including intent, scheme and web-
accessing  utility  classes,  and  further  analyzes  the  ways  popular 
web services (e.g., Facebook, Dropbox, etc.) and their apps utilize 
those channels to serve other apps. The research shows that lack 
of origin-based protection opens the door to a wide spectrum of 
cross-origin attacks. These attacks are unique to mobile platforms, 
and their consequences are serious: for example, using carefully 
designed  techniques  for  mobile  cross-site  scripting  and  request 
forgery,  an  unauthorized  party  can  obtain  a  mobile  user’s 
Facebook/Dropbox authentication credentials and record her text 
input. We report our findings to related software vendors, who all 
acknowledged  their  importance.  To  address  this  threat,  we 
designed an origin-based protection mechanism, called Morbs, for 
mobile  OSes.  Morbs  labels  every  message  with  its  origin 
information,  lets  developers  easily  specify  security  policies, and 
enforce the policies on the mobile channels based on origins. Our 
evaluation demonstrates the effectiveness of our new technique in 
defeating  unauthorized  origin  crossing,  its  efficiency  and  the 
convenience for the developers to use such protection. 
Categories and Subject Descriptors 
D.4.6 [Operating Systems]: Security and Protection – access 
controls, invasive software 
Keywords: Android, iOS, same-origin policy, mobile 
platform. 
1.  INTRODUCTION 
The popularity of smartphones, tablets and other mobile devices 
has  brought  in  a  plethora  of  software  applications  designed  for 
Permission to make digital or hard copies of all or part of this work for personal 
or classroom use is granted without fee provided that copies are not made or 
distributed for profit or commercial advantage and that copies bear this notice 
and the full citation on the first page. Copyrights for components of this work 
owned  by  others  than  ACM  must  be  honored.  Abstracting  with  credit  is 
permitted. To copy otherwise, or republish, to post on servers or to redistribute to 
lists,  requires  prior  specific  permission  and/or  a  fee.  Request  permissions  from 
permissions@acm.org. 
CCS’13, November 4–8, 2013, Berlin, Germany. 
Copyright © 2013 ACM  978-1-4503-2477-9/13/11…$15.00. 
http://dx.doi.org/10.1145/2508859.2516727 
systems 
iOS),  whose 
in  developing 
(e.g.,  Android, 
running on these devices. Such applications, commonly known as 
apps,  are  typically  used  to  deliver  web  services  (data  storage, 
social  networking,  web  mails,  etc.)  through  their  compact  user 
interfaces and simple program logic, which are tailored to mobile 
platforms. Moreover, other than interactions with their own web 
services,  many  of  those  apps  are  also  built  to  work  with  other 
apps and services, leveraging the third-party’s resources to enrich 
their  functionalities.  This  is  a  trend  that  echoes  web-API 
integrations  extensively  utilized 
traditional, 
browser-based web applications. Examples include the apps that 
support social login and data sharing through the services offered 
by Facebook, Twitter, Google Plus, etc.  
Mobile  origin-crossing  hazard.  Those  mobile  apps  essentially 
play the same role as traditional web browsers at the client side. 
However,  different  from  conventional  web  applications,  which 
enjoy browse-level protection for their sensitive data and critical 
resources  (e.g.,  cookies),  apps  are  hosted  directly  on  mobile 
operating 
security 
mechanisms  (such  as  Android’s  permission and sandbox model) 
are  mainly  designed  to  safeguard  those  devices’  local  resources 
(GPS  locations,  phone  contacts,  etc.).  This  naturally  calls  into 
question  whether  the  apps’  web  resources  are  also  sufficiently 
protected  under  those  OSes.  More  specifically,  web  browsers 
enforce  the  same  origin  policy  (SOP),  which  prevents  the 
dynamic web content (e.g., scripts) of one domain from directly 
accessing  the  resources  from  a  different  domain.  When  the 
domain boundary has to be crossed, a designated channel needs to 
go  through  to  ensure  proper  mediation.  An  example  is  the 
postMessage channel [5], which a domain uses to send a message 
to another domain by explicitly specifying the recipient’s origin,  
and the browser mediates to ensure that only the content from that 
origin gets the message and the recipient is also well informed of 
the sender’s origin. Such origin-based protection has become a de 
facto security standard for a modern browser. However, it is not 
present  on  any  channels  provided  by  mobile  OSes  for  apps  to 
communicate  with  each  other  or  the  web.  As  a  result,  the  web 
content or apps from an untrusted domain may gain unauthorized 
access to the web resources of other apps/websites through those 
channels, causing serious security consequences.  
As  an  example,  consider  the  scheme  mechanism  [25][26] 
supported  by  Android  and  iOS,  through  which  an  app  on 
phone/tablet can be invoked by a URL once it registers the URL’s 
scheme (e.g., the “youtube” part of “youtube://watch?token=xxx”, 
with “xxx” as the input parameter for the app). What an adversary 
can  do  is  to  post  on  Facebook  a  link  that  points  to  a  malicious 
script  hosted  on  his  website.  Once  this  link  is  clicked  by  the 
victim  through  the  Facebook  app  on  her  iOS  device,  the  script 
starts  to  run  within  the  app’s  WebView  instance,  which  is  then 
redirected  to  a  dynamically  generated  URL  with  the  scheme  of 
another app that the adversary wants to run on the victim’s device 
and the parameters he chooses. As a result, the target app will be 
635invoked  to  blindly  act  on  the  adversary’s  command,  such  as 
logging  into  his  Dropbox  account  to  record  the  victim’s  inputs 
(Section  3.3.2),  since  the  app  is  given  no  clue  the  origin  (the 
adversary’s  site)  of  the  request.  In  another  case,  the  Android 
mobile browser processing a URL with the “fbconnect://” scheme 
from the Facebook server will deliver the secret token on the URL 
to an app from an arbitrary origin, as long as it claims to be able 
to handle that scheme (Section 3.3.1).   
Such  unauthorized  origin  crossing  is  related  to  the  confused 
deputy  problem  [24]  on  mobile  devices.  Prior  research  on  this 
subject, however, focuses on permission redelegation [10], which 
happens when an app with a permission requires sensitive system 
resources (e.g., a phone’s GPS location) on behalf of another app 
without that permission. The interactions between the two apps go 
through an Inter-Process Call (IPC) that delivers a message called 
intent from one app to invoke the other app’s Activity for services 
such as getting GPS coordinates. This intent channel can also be 
used  to  cross  origins:  for  example,  it  allows  an  app  from  one 
origin  to  send  intents  to  another  app  when  the  latter’s  related 
Activity is accidentally made public, a mobile cross-site request 
forgery  (CSRF)  attack  [27].  However,  given  that  those  prior 
studies  primarily  aim  at  protecting  mobile  devices’ 
local 
resources,  the  general  problem  has  not  been  dug  deeper:  for 
example, it is not clear whether an app’s private Activity can still 
be invoked by the intent message from an unauthorized origin, not 
to mention the security implications of other channels (such as the 
URL scheme) that can also be used for crossing domains.  
Our findings. To better understand this critical security issue, we 
conducted  the  first  systematic  study  on  unauthorized  origin-
crossing  over  mobile  OSes,  including  Android  and  iOS.    In  our 
study, we investigated all known channels that allow apps to cross 
domains,  such  as  intent,  scheme  and  utility  classes  for  web 
communications,  by  dissecting  popular  apps  like  Facebook, 
Dropbox, Google Plus, Yelp, and their SDKs, to understand how 
they utilize these channels to serve other apps on different mobile 
OSes. Our study found 5 generic cross-origin weaknesses in those 
high-profile  apps  and  SDKs,  which  can  be  exploited  through 
CSRF, login CSRF and cross-site scripting (XSS). Many of those 
problems affect multiple apps and web services. They are unique 
to  the  communication  channels  on  mobile  OSes,  which  are 
fundamentally different from those within the browsers. The root 
cause  of  the  vulnerabilities  is  the  absence  of  origin-based 
protection. More specifically, due to missing origin information, 
an app or a mobile web service is often left with little clue about 
the  true  origin  of  an  incoming  message,  nor  does  it  have  any 
control on where its outgoing message will be delivered to. 
The  consequences  of  these  cross-origin  attacks  are  dire.  They 
allow  a  malicious  app  to  steal  the  mobile  device  owner’s 
Facebook,  Dropbox  authentication  credentials,  or  even  directly 
perform  arbitrary  operations  on  her  Dropbox  account  (sharing, 
deleting, etc.) on Android.  On iOS, a remote adversary without 
direct access to any app on the victim’s device can stealthily log 
the phone into the adversary’s Dropbox account through Google 
Plus, Facebook apps. As a result, the victim’s text input on iPhone 
and iPad, her contacts and other confidential information are all 
exposed  to  the  adversary  once  she  uses  popular  editing  and 
backup apps (e.g., PlainText, TopNotes, Nocs, Contacts Backup, 
etc.)  that  integrate  Dropbox  iOS  SDK.  We  reported  those 
problems to related parties, who all acknowledged the importance 
of  our  discoveries.  We  received  over  $7000  bounty  for  these 
findings,  most  of  which  were  donated  to  charity.  The  details  of 
such  recognition  together  with  demos  of  our  attacks  are  posted 
online [31].   
Origin-based  defense.  Without  any  OS-level  support,  not  only 
does  app  development  become  highly  error-prone,  but  software 
manufacturers can also have hard time fixing the problems after 
they are discovered.  As examples, both Dropbox and Facebook 
need  to  spend  a  significant  amount  of  effort  to  fix  the  security 
problems  we  discovered,  which  involves  changing  software 
architecture  (Section  3.2.1)  or  deprecating  some  core  features 
within  their  apps  and  SDKs  (Section  3.3.1).  To  address  these 
issues and facilitate convenient development of securer apps, we 
present  in  this  paper  the  design  of  the  first  mobile  origin-based 
defense mechanism, called Morbs. Our approach mediates all the 
cross-origin  channels  on  Android  and  iOS,  including  intent, 
scheme  and  the  utility  classes  for  web  communications,  and 
enables  a  developer  to  specify  to  the  OS  authorized  origins  her 
app/website can receive requests from and/or send responses to. 
We implemented Morbs on Android in a way that fully preserves 
its  compatibility  with  existing  apps.  Moreover,  we  show  that 
through  our  mechanism,  the  developers  can  easily  gain  controls 
on  all  cross-origin  events,  avoiding  the  ordeal  experienced  by 
Facebook, Dropbox, and other companies. Our evaluation on the 
implementation  also  shows  that  it  is  both  effective,  stopping  all 
the  exploits  we  found,  and  efficient,  incurring  only  a  negligible 
impact on performance (< 1% overhead).  
The source code of Morbs is publicly available on GitHub [40].  
Contributions.  We summarize the paper’s contributions here:  
  New  problem.  Up  to  our  knowledge,  the  research  reported 
here  is  the  first  attempt  to  systematically  understand 
unauthorized origin crossing on mobile OSes.  The discovery 
made  by  our  study  brings  to  light  the  presence  of  such 
vulnerabilities in high-profile apps and more importantly, the 
seriousness and pervasiveness of the problem.  
  New techniques.  We developed new origin-based protection 
for existing mobile OSes, which works with apps/websites to 
oversee the communication channels on these systems. 
Implementation and evaluation.  We implemented our design 
on  Android,  and  evaluated  its  effectiveness,  efficiency, 
compatibility, and usability to the app developer.  
Roadmap.    The  rest  of  the  paper  is  organized  as  follows:    
Section  2  describes  the  mobile  channels  used  for  apps  to 
communicate with each other or the web; Section 3 elaborates our 
study on mobile cross-origin problems and our findings; Section 4 
presents  our  defense  mechanism  Morbs,  Section  5  reports  the 
evaluation of our techniques; Section 6 compares our work with 
other  related  research;  Section  7  concludes  the  paper  and 
discusses the future research.  
2.  MOBILE CHANNELS 
Today’s  mobile  OSes  (including  Android  and  iOS)  provide 
various channels for apps to communicate with each other or the 
web.  Those  channels  include  intent,  scheme,  and  web-accessing 
utility classes (which we elaborate later in the section). As shown 
in  ,  an  app  communicates  with  other  apps  through  the  intent  or 
scheme channel. It can also invoke the browser to load a webpage 
using an intent and be triggered by the web content rendered in 
the  browser  through  a  URL  scheme.  Moreover,  the  app  can 
simply  acquire  and  display  any  web  content  through  the 
WebView class, which embeds a browser-like widget within the 
app, and directly talks to a web server using the methods provided 
636by the HttpClient classes. Note that the intent channel is Android-
specific,  while  others  are  also  available  on  iOS.  Unlike  the 
domain-crossing  mechanisms  within 
(e.g., 
postMessage),  these  mobile  channels  are  not  under  the  origin-
based  protection:  messages  exchanged  do  not  carry  any  origin 
information 
inspect,  and  are 
completely unmediated with regard to where they come from.  
the  sender/receiver  can 
browser 
that 
a 
Mobile Device
App
callbacks
HttpClient classes
WebView class
mobile 
browser
intents
schemes
App