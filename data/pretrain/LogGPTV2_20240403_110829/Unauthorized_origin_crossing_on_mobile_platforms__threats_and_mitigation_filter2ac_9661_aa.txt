# Unauthorized Origin Crossing on Mobile Platforms: Threats and Mitigation

## Authors
- Rui Wang
- Luyi Xing
- XiaoFeng Wang
- Shuo Chen

### Affiliations
- **Rui Wang, Luyi Xing, XiaoFeng Wang:** Indiana University
- **Shuo Chen:** Microsoft Research

### Abstract
With the rapid advancement in mobile computing, web services are increasingly being delivered to users through mobile applications rather than traditional web browsers. Unlike web browsers, which enforce origin-based security policies to mediate interactions between web content from different sources, current mobile operating systems (OSes) lack a comparable security mechanism to control cross-origin communications between apps and between an app and the web. Consequently, sensitive web resources of a mobile user can be exposed to threats from malicious origins.

In this paper, we present the first systematic study on the risks associated with unauthorized origin crossing on mobile platforms. Our research examines the primary cross-origin channels on Android and iOS, including intents, URL schemes, and web-accessing utility classes. We further analyze how popular web services (e.g., Facebook, Dropbox) and their corresponding apps utilize these channels to interact with other apps. The findings indicate that the absence of origin-based protection opens the door to a wide range of cross-origin attacks, unique to mobile platforms, with serious consequences. For instance, using sophisticated techniques for mobile cross-site scripting (XSS) and request forgery, an unauthorized party can obtain a user's authentication credentials and record their text input.

We reported our findings to the relevant software vendors, all of whom acknowledged the importance of the issues. To address this threat, we designed an origin-based protection mechanism called Morbs for mobile OSes. Morbs labels every message with its origin information, allows developers to specify security policies, and enforces these policies on mobile communication channels based on origins. Our evaluation demonstrates the effectiveness of Morbs in preventing unauthorized origin crossing, its efficiency, and the convenience it offers to developers.

### Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection – access controls, invasive software

### Keywords
Android, iOS, same-origin policy, mobile platform

## 1. Introduction
The widespread adoption of smartphones, tablets, and other mobile devices has led to a proliferation of software applications designed for these platforms. These applications, commonly known as apps, are used to deliver web services such as data storage, social networking, and web mail through compact user interfaces and simple program logic tailored for mobile use. Additionally, many apps are built to integrate with other apps and services, leveraging third-party resources to enhance their functionality. This trend mirrors the extensive use of web-API integrations in traditional, browser-based web applications.

### Mobile Origin-Crossing Hazards
Mobile apps essentially serve the same role as traditional web browsers at the client side. However, unlike conventional web applications, which benefit from browser-level protection for sensitive data and critical resources (e.g., cookies), apps on mobile OSes are hosted directly on the device. Security mechanisms (such as Android’s permission and sandbox model) are primarily designed to protect local resources (e.g., GPS locations, phone contacts). This raises questions about whether web resources in apps are adequately protected under these OSes.

Web browsers enforce the same-origin policy (SOP), which prevents dynamic web content (e.g., scripts) from one domain from directly accessing resources from another domain. When crossing domain boundaries, a designated channel like `postMessage` is used, where the sender explicitly specifies the recipient's origin, and the browser mediates to ensure only the intended recipient receives the message. This origin-based protection is a de facto security standard for modern browsers. However, such protection is absent in the communication channels provided by mobile OSes for inter-app and web communication. As a result, untrusted domains can gain unauthorized access to web resources of other apps or websites, leading to serious security consequences.

For example, consider the scheme mechanism supported by Android and iOS, where an app can be invoked by a URL once it registers the URL's scheme. An adversary can post a link on Facebook that points to a malicious script hosted on their website. When the victim clicks this link through the Facebook app, the script runs within the app’s WebView instance, which is then redirected to a dynamically generated URL with the scheme of another app. The target app will then blindly execute the adversary’s command, such as logging into the adversary’s Dropbox account, because the app has no information about the origin of the request.

Such unauthorized origin crossing is related to the confused deputy problem on mobile devices. Prior research on this topic has focused on permission redelegation, where an app with a specific permission invokes another app without that permission to access sensitive system resources. Inter-Process Calls (IPC) using intents can also be used to cross origins, allowing an app from one origin to send intents to another app if the latter’s Activity is accidentally made public. This can lead to mobile cross-site request forgery (CSRF) attacks. However, these studies primarily aimed at protecting local resources, and the broader issue of origin-based protection has not been thoroughly explored.

### Our Findings
To better understand this critical security issue, we conducted the first systematic study on unauthorized origin-crossing over mobile OSes, including Android and iOS. We investigated all known channels that allow apps to cross domains, such as intents, URL schemes, and web-accessing utility classes, by analyzing popular apps like Facebook, Dropbox, Google Plus, and Yelp, along with their SDKs. Our study identified five generic cross-origin weaknesses in these high-profile apps and SDKs, which can be exploited through CSRF, login CSRF, and XSS. Many of these problems affect multiple apps and web services and are unique to the communication channels on mobile OSes, which differ fundamentally from those in browsers. The root cause of these vulnerabilities is the absence of origin-based protection, leaving apps and web services with little information about the true origin of incoming messages and no control over the delivery of outgoing messages.

The consequences of these cross-origin attacks are severe. They allow a malicious app to steal the mobile device owner’s Facebook or Dropbox authentication credentials and perform arbitrary operations on their Dropbox account. On iOS, a remote adversary can stealthily log the phone into their Dropbox account through apps like Google Plus and Facebook, exposing the victim’s text input, contacts, and other confidential information when they use popular editing and backup apps that integrate the Dropbox iOS SDK. We reported these issues to the relevant parties, who acknowledged their importance. We received over $7000 in bounty for these findings, most of which was donated to charity. The details of our discoveries and attack demonstrations are available online [31].

### Origin-Based Defense
Without OS-level support, app development becomes highly error-prone, and software manufacturers face significant challenges in fixing discovered issues. For example, both Dropbox and Facebook had to invest considerable effort to fix the security problems we identified, involving changes to software architecture or deprecating core features in their apps and SDKs. To address these issues and facilitate the development of more secure apps, we present the design of the first mobile origin-based defense mechanism, called Morbs. Our approach mediates all cross-origin channels on Android and iOS, including intents, URL schemes, and web-accessing utility classes, and enables developers to specify authorized origins for their apps and websites. We implemented Morbs on Android, ensuring compatibility with existing apps. Our mechanism allows developers to easily control all cross-origin events, avoiding the difficulties faced by companies like Facebook and Dropbox. Our evaluation shows that Morbs is both effective, stopping all the exploits we found, and efficient, with minimal performance overhead (<1%).

The source code of Morbs is publicly available on GitHub [40].

### Contributions
- **New Problem:** This is the first systematic study on unauthorized origin crossing on mobile OSes, highlighting the presence of such vulnerabilities in high-profile apps and the seriousness and pervasiveness of the problem.
- **New Techniques:** We developed new origin-based protection for existing mobile OSes, which works with apps and websites to oversee communication channels.
- **Implementation and Evaluation:** We implemented our design on Android and evaluated its effectiveness, efficiency, compatibility, and usability for app developers.

### Roadmap
- **Section 2:** Describes the mobile channels used for apps to communicate with each other or the web.
- **Section 3:** Elaborates on our study of mobile cross-origin problems and our findings.
- **Section 4:** Presents our defense mechanism, Morbs.
- **Section 5:** Reports the evaluation of our techniques.
- **Section 6:** Compares our work with other related research.
- **Section 7:** Concludes the paper and discusses future research.

## 2. Mobile Channels
Modern mobile OSes, including Android and iOS, provide various channels for apps to communicate with each other and the web. These channels include:

- **Intents:** Used for inter-process communication (IPC) on Android, allowing apps to send messages to each other.
- **URL Schemes:** Allow apps to be invoked by URLs, enabling inter-app communication.
- **Web-Accessing Utility Classes:** Such as `WebView` and `HttpClient`, which enable apps to display web content and communicate with web servers.

As shown in Figure 1, an app can communicate with other apps through intents or URL schemes. It can also invoke the browser to load a webpage using an intent and be triggered by web content rendered in the browser through a URL scheme. Additionally, the app can acquire and display web content using the `WebView` class, which embeds a browser-like widget, and directly communicate with a web server using the `HttpClient` classes.

Unlike the domain-crossing mechanisms within browsers (e.g., `postMessage`), these mobile channels do not carry any origin information, and the sender/receiver cannot inspect or mediate the origin of the messages. This lack of origin-based protection leaves mobile communication channels vulnerable to unauthorized origin crossing.

![Figure 1: Mobile Communication Channels](figure1.png)

---

This optimized version of the text aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.