## PostgreSQL 11 相似图像搜索插件 imgsmlr 性能测试与优化 1 - 单机单表 (4亿图像)    
### 作者      
digoal      
### 日期      
2018-09-04     
### 标签      
PostgreSQL , imgsmlr , GiST , 图像特征值 , 小波转换   
----      
## 背景   
imgsmlr是PostgreSQL的一款支持以图搜图的插件，  
https://github.com/postgrespro/imgsmlr  
这个插件新增了：  
1、几种图像特征值数据类型，  
2、图像特征值相似算子，  
3、图像特征值相似排序索引支持，  
4、图像相似排序的索引（通过扩展GiST索引接口实现）支持，  
5、png,gif等图像格式特征值提取函数。  
图像特征值为64*64的16个区域经过小波转换后的16个浮点数。  
在数据量（图片数）非常庞大时，输入一个图片特征值，搜索相似度排行前N的图片，性能如何呢？如何优化呢？  
接下来的3篇文档将分别介绍如下三种场景的图像特征值搜索性能以及优化思路：  
### 1、单机单表  
### 2、单机分区表（使用DBLINK 异步调用）  
### 3、citus，多机，sharding 表  
## 附加 - rum 相似查询性能(以及存在的问题)  
[《PostgreSQL 相似搜索插件介绍大汇总 (rum,pg_trgm,smlar,imgsmlr,pg_similarity) (rum,gin,gist)》](../201809/20180904_01.md)    
相似查询分元素重叠类，向量类。RUM为第一种元素重叠度类的相似搜索技术。  
相似排序，走索引，性能如何，有什么需要优化的点？  
```  
git clone https://github.com/postgrespro/rum  
cd rum  
. /var/lib/pgsql/.bash_profile  
USE_PGXS=1 make  
USE_PGXS=1 make install  
create extension rum;  
```  
1、生成随机浮点数组的UDF接口  
```  
create or replace function gen_rand_float4(int,int) returns float4[] as $$  
  select array(select (random()*$1)::float4 from generate_series(1,$2));  
$$ language sql strict;  
```  
2、建表，索引  
```  
create unlogged table t_rum(id int primary key, arr float4[]);  
create index idx_t_rum_1 on t_rum using rum(arr);  
```  
4、写入随机浮点数数组  
```  
vi test.sql  
\set id random(1,2000000000)  
insert into t_rum values (:id, gen_rand_float4(10,16)) on conflict(id) do nothing;  
```  
```  
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 64 -j 64 -t 10000000  
```  
```  
postgres=# select * from t_rum limit 2;  
    id     |                                                                   arr                                                                     
-----------+-----------------------------------------------------------------------------------------------------------------------------------------  
 182025544 | {5.07998,6.80827,5.42024,2.53619,4.10843,0.532198,4.33886,9.60262,6.68369,8.01305,9.60298,8.087,1.25819,6.54424,6.04902,5.3444}  
  51515704 | {0.123099,9.26626,0.00549683,9.01483,0.911669,3.44338,4.55135,4.65002,0.820029,9.66546,1.93433,3.00254,1.28121,8.99883,1.85269,6.39579}  
(2 rows)  
postgres=# select count(*) from t_rum;  
  count    
---------  
 3244994  
(1 row)  
```  
5、使用rum提供的数组相似搜索（元素重叠率计算）  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t_rum order by arr  '{5.07998,6.80827,5.42024,2.53619,4.10843,0.532198,4.33886,9.60262,6.68369,8.01305,9.60298,8.087,1.25819,6.54424,6.04902,5.3444}' limit 1;  
                                                                                     QUERY PLAN                                                                                       
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=22435.67..22435.68 rows=1 width=97) (actual time=12527.447..12527.450 rows=1 loops=1)  
   Output: id, arr, ((arr  '{5.07998,6.80827,5.42024,2.53619,4.10843,0.532198,4.33886,9.60262,6.68369,8.01305,9.60298,8.087,1.25819,6.54424,6.04902,5.3444}'::real[]))  
   Buffers: shared hit=50450  
   ->  Sort  (cost=22435.67..29469.15 rows=3244994 width=97) (actual time=12527.445..12527.446 rows=1 loops=1)  
         Output: id, arr, ((arr  '{5.07998,6.80827,5.42024,2.53619,4.10843,0.532198,4.33886,9.60262,6.68369,8.01305,9.60298,8.087,1.25819,6.54424,6.04902,5.3444}'::real[]))  
         Sort Key: ((t_rum.arr  '{5.07998,6.80827,5.42024,2.53619,4.10843,0.532198,4.33886,9.60262,6.68369,8.01305,9.60298,8.087,1.25819,6.54424,6.04902,5.3444}'::real[]))  
         Sort Method: top-N heapsort  Memory: 25kB  
         Buffers: shared hit=50450  
         ->  Seq Scan on public.t_rum  (cost=0.00..8368.72 rows=3244994 width=97) (actual time=0.054..11788.483 rows=3244994 loops=1)  
               Output: id, arr, (arr  '{5.07998,6.80827,5.42024,2.53619,4.10843,0.532198,4.33886,9.60262,6.68369,8.01305,9.60298,8.087,1.25819,6.54424,6.04902,5.3444}'::real[])  
               Buffers: shared hit=50447  
 Planning Time: 0.115 ms  
 Execution Time: 12527.498 ms  
(13 rows)  
```  
你会发现，走了索引，但是并不快。扫描了大量(50447)的索引PAGE。  
原因是我们没有管它的阈值，导致扫描了大量的index BLOCK。默认的阈值为0.5，太低了。  
```  
postgres=# show rum.array_similarity_threshold  
postgres-# ;  
 rum.array_similarity_threshold   
--------------------------------  
 0.5  
(1 row)  
```  
调成0.9，只输出90%以上相似(重叠度)的数组。性能瞬间暴增，扫描的数据块也变少了。  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t_rum where arr % '{5.07998,6.80827,5.42024,2.53619,4.10843,0.532198,4.33886,9.60262,6.68369,8.01305,9.60298,8.087,1.25819,6.54424,6.04902,5.3444}' order by arr  '{5.07998,6.80827,5.42024,2.53619,4.10843,0.532198,4.33886,9.60262,6.68369,8.01305,9.60298,8.087,1.25819,6.54424,6.04902,5.3444}' limit 1;  
                                                                                  QUERY PLAN                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=1.54..1.56 rows=1 width=97) (actual time=0.664..0.664 rows=0 loops=1)  
   Output: id, arr, ((arr  '{5.07998,6.80827,5.42024,2.53619,4.10843,0.532198,4.33886,9.60262,6.68369,8.01305,9.60298,8.087,1.25819,6.54424,6.04902,5.3444}'::real[]))  
   Buffers: shared hit=128 read=40  
   ->  Index Scan using idx_t_rum_1 on public.t_rum  (cost=1.54..87.65 rows=3245 width=97) (actual time=0.662..0.662 rows=0 loops=1)  
         Output: id, arr, (arr  '{5.07998,6.80827,5.42024,2.53619,4.10843,0.532198,4.33886,9.60262,6.68369,8.01305,9.60298,8.087,1.25819,6.54424,6.04902,5.3444}'::real[])  
         Index Cond: (t_rum.arr % '{5.07998,6.80827,5.42024,2.53619,4.10843,0.532198,4.33886,9.60262,6.68369,8.01305,9.60298,8.087,1.25819,6.54424,6.04902,5.3444}'::real[])  
         Order By: (t_rum.arr  '{5.07998,6.80827,5.42024,2.53619,4.10843,0.532198,4.33886,9.60262,6.68369,8.01305,9.60298,8.087,1.25819,6.54424,6.04902,5.3444}'::real[])  
         Buffers: shared hit=128 read=40  
 Planning Time: 0.184 ms  
 Execution Time: 0.691 ms  
(10 rows)  
```  
### 元素重叠度相似搜索优化  
1、调整阈值，阶梯化解题。  
[《PostgreSQL 相似搜索设计与性能 - 地址、QA、POI等文本 毫秒级相似搜索实践》](../201802/20180202_01.md)    
实际上图像特征值近似搜索，也有优化的空间，接下来进入正题。  
## 部署imgsmlr (on PG 11)  
1、假设yum安装的PG 11  
2、克隆源码  
```  
yum install -y git  
git clone https://github.com/postgrespro/imgsmlr  
cd imgsmlr  
```  