而对于地理位置，如果要进行快速筛选的话，可以建立GIST索引  
如果要建立两者的复合索引，可以使用btree_gist插件，那么时间和地理位置就能放在一个GIST索引中了。  
```  
create extension btree_gist;  
```  
2\. 递归优化  
如果轨迹点很多，但是大多数为重复人群，可使用递归优化IN查询  
参考  
[《用PostgreSQL找回618秒逝去的青春 - 递归收敛优化》](../201612/20161201_01.md)   
[《distinct xx和count(distinct xx)的变态递归优化方法 - 索引收敛(skip scan)扫描》](../201611/20161128_02.md)  
[《时序数据合并场景加速分析和实现 - 复合索引，窗口分组查询加速，变态递归加速》](../201611/20161128_01.md)  
3\. case when 优化，在使用本例的cube,grouping sets,rollup前，或者其他不支持数据透视语法的数据库中，可以使用case when的方法来聚合，但是每条数据都要经过case when的计算，耗费很大的CPU。  
```  
select   
  sum(case when c1=0 then 1 else 0 end)/(count(*))::float8 as c1_0,  
  sum(case when c1=1 then 1 else 0 end)/(count(*))::float8 as c1_1,  
  sum(case when c1=2 then 1 else 0 end)/(count(*))::float8 as c1_2,  
  sum(case when c1=3 then 1 else 0 end)/(count(*))::float8 as c1_3,  
  sum(case when c1=4 then 1 else 0 end)/(count(*))::float8 as c1_4,  
  sum(case when c2=0 then 1 else 0 end)/(count(*))::float8 as c2_0,  
  sum(case when c2=1 then 1 else 0 end)/(count(*))::float8 as c2_1,  
  sum(case when c2=2 then 1 else 0 end)/(count(*))::float8 as c2_2,  
  sum(case when c3=0 then 1 else 0 end)/(count(*))::float8 as c3_0,  
  sum(case when c3=1 then 1 else 0 end)/(count(*))::float8 as c3_1,  
  sum(case when c3=2 then 1 else 0 end)/(count(*))::float8 as c3_2,  
  sum(case when c3=3 then 1 else 0 end)/(count(*))::float8 as c3_3,  
  sum(case when c3=4 then 1 else 0 end)/(count(*))::float8 as c3_4,  
  sum(case when c4=0 then 1 else 0 end)/(count(*))::float8 as c4_0,  
  sum(case when c4=1 then 1 else 0 end)/(count(*))::float8 as c4_1,  
  sum(case when c4=2 then 1 else 0 end)/(count(*))::float8 as c4_2,  
  sum(case when c5=0 then 1 else 0 end)/(count(*))::float8 as c5_0,  
  sum(case when c5=1 then 1 else 0 end)/(count(*))::float8 as c5_1,  
  sum(case when c5=2 then 1 else 0 end)/(count(*))::float8 as c5_2,  
  sum(case when c6=0 then 1 else 0 end)/(count(*))::float8 as c6_0,  
  sum(case when c6=1 then 1 else 0 end)/(count(*))::float8 as c6_1,  
  sum(case when c6=2 then 1 else 0 end)/(count(*))::float8 as c6_2  
from   
people  
where id in (  
  select id from people_loc where crt_time between '2017-03-06'::date and '2017-03-08'::date  
);  
          c1_0          |          c1_1          |          c1_2          |          c1_3          |            c1_4            |          c2_0          |          c2_1          |          c2_2          |          c3_0          |          
  c3_1          |          c3_2          |          c3_3          |            c3_4            |          c4_0          |          c4_1          |          c4_2          |          c5_0          |          c5_1          |          c5_2    
        |          c6_0          |          c6_1          |          c6_2            
------------------------+------------------------+------------------------+------------------------+----------------------------+------------------------+------------------------+------------------------+------------------------+--------  
----------------+------------------------+------------------------+----------------------------+------------------------+------------------------+------------------------+------------------------+------------------------+----------------  
--------+------------------------+------------------------+------------------------  
 0.24980225645085151051 | 0.29976094301771467071 | 0.25052894429839958504 | 0.19990785623303423374 | 0.000000000000000000000000 | 0.35012740672019240526 | 0.35012425542857250901 | 0.29974833785123508572 | 0.25017915092859110163 | 0.29969  
035408542899478 | 0.24948901806383382357 | 0.20064147692214608001 | 0.000000000000000000000000 | 0.34921290189209851442 | 0.35033791300040147455 | 0.30044918510750001103 | 0.34951101407934069937 | 0.34983937866613388830 | 0.3006496072545  
2541233 | 0.34962824212760083976 | 0.34969441925161866094 | 0.30067733862078049930  
(1 row)  
Time: 8282.168 ms  
```  
perf report  
```  
# Events: 8K cycles  
#  
# Overhead   Command       Shared Object                                               Symbol  
# ........  ........  ..................  ...................................................  
#  
    12.15%  postgres  postgres            [.] ExecMakeFunctionResultNoSets  
            |  
            --- ExecMakeFunctionResultNoSets  
               |            
                --100.00%-- (nil)  
     7.11%  postgres  postgres            [.] ExecEvalCase  
            |  
            --- ExecEvalCase  
               |            
                --100.00%-- (nil)  
     6.85%  postgres  postgres            [.] ExecTargetList.isra.6.lto_priv.1346  
            |  
            --- ExecTargetList.isra.6.lto_priv.1346  
     5.43%  postgres  postgres            [.] ExecProject.constprop.414  
            |  
            --- ExecProject.constprop.414  
     5.37%  postgres  postgres            [.] ExecEvalScalarVarFast  
            |  
            --- ExecEvalScalarVarFast  
     4.35%  postgres  postgres            [.] slot_getattr  
            |  
            --- slot_getattr  
     4.13%  postgres  postgres            [.] advance_aggregates  
            |  
            --- advance_aggregates  
     3.43%  postgres  postgres            [.] slot_deform_tuple.lto_priv.1138  
            |  
            --- slot_deform_tuple.lto_priv.1138  
     3.12%  postgres  postgres            [.] ExecClearTuple  
            |  
            --- ExecClearTuple  
     2.82%  postgres  postgres            [.] IndexNext  
            |  
            --- IndexNext  
     2.45%  postgres  postgres            [.] ExecEvalConst  
            |  
            --- ExecEvalConst  
               |            
                --100.00%-- (nil)  
```  
## 小结  
1\. 语法cube, grouping sets, rollup给数据透视提供了比较好的便利。  
2\. 行列变换可以使用tablefunc插件。  
3\. case when过多时，对CPU的开销会比较大。  
4\. 结合PostGIS可以很方便的基于地理位置和时间维度，分析人群特性。  
5\. 关于精准营销的文章，请参考  
[《恭迎万亿级营销(圈人)潇洒的迈入毫秒时代 - 万亿user_tags级实时推荐系统数据库设计》](../201612/20161225_01.md)  
[《基于 阿里云 RDS PostgreSQL 打造实时用户画像推荐系统》](../201610/20161021_01.md)  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")