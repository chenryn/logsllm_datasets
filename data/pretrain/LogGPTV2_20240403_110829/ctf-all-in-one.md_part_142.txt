| ; var int local_ch @ rbp-0xc
| ; var void *buf @ rbp-0x8
| ; CALL XREF from sub.Enter_author_name:_b6d (0xb94)
| ; CALL XREF from sub.Enter_the_book_id_you_want_to_e
dit:_e17 (0xf2b)
| ; CALL XREFS from sub.Enter_book_name_size:_f55 (0xf
f8, 0x10b2)
| 0x000009f5 push rbp
| 0x000009f6 mov rbp, rsp
| 0x000009f9 sub rsp, 0x20
| 0x000009fd mov qword [local_18h], rdi
; arg1
| 0x00000a01 mov dword [local_1ch], esi
; arg2
| 0x00000a04 cmp dword [local_1ch], 0
| ,= 0x00000a11 mov rax, qword [local_18h]
; rax = [arg1] 取第一个参数
| | 0x00000a15 mov qword [buf], rax
; [buf] = rax = [arg1]
| | 0x00000a19 mov dword [local_ch], 0
; 循环计数 i 初始为 0
| | ; CODE XREF from sub.read_9f5 (0xa67)
| |.-> 0x00000a20 mov rax, qword [buf]
; rax = [buf]
| |: 0x00000a24 mov edx, 1
; size_t nbyte
| |: 0x00000a29 mov rsi, rax
; void *buf
| |: 0x00000a2c mov edi, 0
; int fildes
| |: 0x00000a31 mov eax, 0
| |: 0x00000a36 call sym.imp.read
; 调用 read(0, [buf], 1) 读入一个字节
1391
6.1.28 pwn ASISCTF2016 b00ks
| |: 0x00000a3b cmp eax, 1
| ,=== 0x00000a47 mov rax, qword [buf]
; rax = [buf]
| | |: 0x00000a4b movzx eax, byte [rax]
; eax = [rax] 取出最后一个字节
| | |: 0x00000a4e cmp al, 0xa
| |,=== 0x00000a54 add qword [buf], 1
; [buf] += 1
| || |: 0x00000a59 mov eax, dword [local_ch]
| || |: 0x00000a5c cmp eax, dword [local_1ch]
| ||,=== 0x00000a63 add dword [local_ch], 1
; 循环计数 i 加 1
| ||| |`= 0x00000a69 mov rax, qword [buf]
; rax = [buf]
| | | 0x00000a6d mov byte [rax], 0
; [rax] = 0 将最后一个字节设置为 '0x00'
| | | 0x00000a70 mov eax, 0
| | | ; CODE XREFS from sub.read_9f5 (0xa0f, 0xa45)
| `-`--> 0x00000a75 leave
\ 0x00000a76 ret
该函数存在单字节溢出漏洞，例如在读入 author name 的时候，arg2 为 0x20，但
却可以读入最多 0x21 个字节，读入完成后将最后一个字节设置为 “\x00” ，即溢
出了一个字节的 null byte。
1392
6.1.28 pwn ASISCTF2016 b00ks
Create
[0x000008e0]> pdf @ sub.Enter_book_name_size:_f55
/ (fcn) sub.Enter_book_name_size:_f55 634
| sub.Enter_book_name_size:_f55 ();
| ; var size_t size @ rbp-0x20
| ; var unsigned int local_1ch @ rbp-0x1c
| ; var void *local_18h @ rbp-0x18
| ; var void *fildes @ rbp-0x10
| ; var void *ptr @ rbp-0x8
| ; CALL XREF from main (+0xb0)
| 0x00000f55 push rbp
| 0x00000f56 mov rbp, rsp
| 0x00000f59 sub rsp, 0x20
| 0x00000f5d mov dword [size], 0
| 0x00000f64 lea rdi, str.Enter_book_name_size:
; 0x150f ; "\nEnter book name size: " ; const char *forma
t
| 0x00000f6b mov eax, 0
| 0x00000f70 call sym.imp.printf
; int printf(const char *format)
| 0x00000f75 lea rax, [size]
| 0x00000f79 mov rsi, rax
| 0x00000f7c lea rdi, [0x000013f8]
; "%d" ; const char *format
| 0x00000f83 mov eax, 0
| 0x00000f88 call sym.imp.__isoc99_scanf
; 调用 scanf() 读入 name_size 到 [size]
| 0x00000f8d mov eax, dword [size]
| 0x00000f90 test eax, eax
| ,= 0x00000faa lea rdi, str.Enter_book_name__Max_32
_chars_: ; 0x1538 ; "Enter book name (Max 32 chars): " ; const c
har *format
| | 0x00000fb1 mov eax, 0
| | 0x00000fb6 call sym.imp.printf
; int printf(const char *format)
| | 0x00000fbb mov eax, dword [size]
| | 0x00000fbe cdqe
| | 0x00000fc0 mov rdi, rax
; size_t size
| | 0x00000fc3 call sym.imp.malloc
; 调用 malloc([size]) 为 name 分配空间
| | 0x00000fc8 mov qword [fildes], rax
; 空间地址保存到 [fildes]
| | 0x00000fcc cmp qword [fildes], 0
| |,= 0x00000fe9 mov eax, dword [size]
| || 0x00000fec lea edx, [rax - 1]
| || 0x00000fef mov rax, qword [fildes]
| || 0x00000ff3 mov esi, edx
; void *buf
| || 0x00000ff5 mov rdi, rax
; int fildes
| || 0x00000ff8 call sub.read_9f5
; 调用 read_9f5([fildes], [size]-1) 读入 name
| || 0x00000ffd test eax, eax
| ||,= 0x00001017 mov dword [size], 0
; 将 [size] 置 0
| ||| 0x0000101e lea rdi, str.Enter_book_description_
size: ; 0x1598 ; "\nEnter book description size: " ; const char
*format
| ||| 0x00001025 mov eax, 0
| ||| 0x0000102a call sym.imp.printf
; int printf(const char *format)
| ||| 0x0000102f lea rax, [size]
| ||| 0x00001033 mov rsi, rax
| ||| 0x00001036 lea rdi, [0x000013f8]
; "%d" ; const char *format
| ||| 0x0000103d mov eax, 0
| ||| 0x00001042 call sym.imp.__isoc99_scanf
; 调用 scanf() 读入 description_size 到 [size]
| ||| 0x00001047 mov eax, dword [size]
| ||| 0x0000104a test eax, eax
| |||,= 0x00001064 mov eax, dword [size]
| |||| 0x00001067 cdqe
| |||| 0x00001069 mov rdi, rax
; size_t size
| |||| 0x0000106c call sym.imp.malloc
; 调用 malloc([size]) 为 description 分配空间
| |||| 0x00001071 mov qword [ptr], rax
; 空间地址保存到 [ptr]
| |||| 0x00001075 cmp qword [ptr], 0
| ||||,= 0x00001092 lea rdi, str.Enter_book_description:
; 0x15cf ; "Enter book description: " ; const char *forma
t
| ||||| 0x00001099 mov eax, 0
| ||||| 0x0000109e call sym.imp.printf
; int printf(const char *format)
| ||||| 0x000010a3 mov eax, dword [size]
| ||||| 0x000010a6 lea edx, [rax - 1]
| ||||| 0x000010a9 mov rax, qword [ptr]
| ||||| 0x000010ad mov esi, edx
; void *buf
| ||||| 0x000010af mov rdi, rax
; int fildes
| ||||| 0x000010b2 call sub.read_9f5
; 调用 read_9f5([ptr], [size] -1) 读入 description
| ||||| 0x000010b7 test eax, eax
| |||||,= 0x000010d1 mov eax, 0
| |||||| 0x000010d6 call fcn.00000b24
; 判断 book_num 是否达到上限 20
| |||||| 0x000010db mov dword [local_1ch], eax
; 返回值 eax 为该 book 在 books 里的序号
| |||||| 0x000010de cmp dword [local_1ch], 0xfffffffffff
1396
6.1.28 pwn ASISCTF2016 b00ks
fffff
| ||||||,= 0x000010fa mov edi, 0x20
; "@" ; size_t size
| |||||| 0x000010ff call sym.imp.malloc
; 调用 malloc(0x20) 为 book 结构体分配空间
| |||||| 0x00001104 mov qword [local_18h], rax
; 空间地址保存到 [local_18h]
| |||||| 0x00001108 cmp qword [local_18h], 0
| ||||||,= 0x00001122 mov eax, dword [size]
; 取出 description_size
| |||||| 0x00001125 mov edx, eax
| |||||| 0x00001127 mov rax, qword [local_18h]
; 取出 book 结构体
| |||||| 0x0000112b mov dword [rax + 0x18], edx
; book->description_size = [size]
| |||||| 0x0000112e lea rax, [0x00202010]
; rax = 0x00202010
| |||||| 0x00001135 mov rax, qword [rax]
; rax = 0x00202060 取出 books 数组地址
| |||||| 0x00001138 mov edx, dword [local_1ch]
| |||||| 0x0000113b movsxd rdx, edx
| |||||| 0x0000113e shl rdx, 3
| |||||| 0x00001142 add rdx, rax
1397
6.1.28 pwn ASISCTF2016 b00ks
; rdx 为 books 数组中该 book 的地址
| |||||| 0x00001145 mov rax, qword [local_18h]
| |||||| 0x00001149 mov qword [rdx], rax
; books[rdx] = book 将 book 地址放入 books 数组
| |||||| 0x0000114c mov rax, qword [local_18h]
| |||||| 0x00001150 mov rdx, qword [ptr]