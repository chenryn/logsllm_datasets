      ],
      "context_free_data": []
    }
包含一组 Action 的交易结构如下，这组 Action 必须都要执行成功，否则整个交易被回滚。
    {
      "expiration": "...",
      "region": 0,
      "ref_block_num": ...,
      "ref_block_prefix": ...,
      "net_usage_words": ..,
      "kcpu_usage": ..,
      "delay_sec": 0,
      "context_free_actions": [],
      "actions": [{
          "account": "...",
          "name": "...",
          "authorization": [{
              "actor": "...",
              "permission": "..."
            }
          ],
          "data": "..."
        }, {
              "account": "eosio",
              "name": "voteproducer",
              "authorization": [
                {
                  "actor": "gu4dgmjxgyge",
                  "permission": "active"
                }
              ],
              "data": {
                "voter": "gu4dgmjxgyge",
                "proxy": "",
                "producers": [
                  "bitfinexeos1",
                  "eosisgravity"
                ]
              },
              "hex_data": "a09867fd499688660000000000000000021030555d4db7b23be0b3dbe632ec3055"
        }
      ],
      "signatures": [
        ""
      ],
      "context_free_data": []
    }
其中一些字段的含义如下：
· delay_sec : 延迟时间，交易被打包到块中之后，延迟指定的时间执行。 在这段时间内，交易都可以被用户取消。
· action：
· account： Action 所在的合约名称
· name：所调用的 Action 的名字
· authorization：此次调用所需要的权限
· actor：操作者，如 gu4dgmjxgyge
· permission：权限名称，如active
· data: 调用所需要的参数
· hex_data: data数据的十六进制形式
· expiration：交易过期时间，超过这个时间，交易就失效，不能再被写入区块
· ref_block_num：参考区块，在最新的 2^16 个区块中选择一个
· ref_block_prefix：参考区块的前缀
**[注]**
ref_block_num(参考区块号), ref_block_prefix(参考区块的前缀)和
expiration(过期时间)三者是用作TaPOS(Transaction as Proof of Stake,
交易作为权益证明)算法，是为了确保一笔交易在所引用的区块之后和交易过期日期之前能够发生。
这样做有什么作用呢？
假设现在有2个用户 A 和 B， B 叫 A 说你转 2 个 EOS 给我， 我就送你 100 个 LIVE，A 说好啊。 然后 A 就转 2 个 EOS
给 B 了， 这个时候 A 的区块 a 还不是不可逆状态， 如果此时 B 转给 A 100 个 LIVE， 要是 区块 a 被回滚掉了怎么办，那么 B
就白白给了 A 100 个 LIVE 了。 这时候 ref-block 的作用就体现了，如果区块 a 被回滚了，那么 B 转给 A 100 个 LIVE
的区块 b 也会被丢弃掉。 所以 当区块 b ref-block 是 区块 a 的时候，只有 区块 a 被成功打包了， 区块 b 才会被成功打包。
所以很显然， 这两个参数是为了让链更稳固，也让用户交易更安全。但是，有的开发者使用这两个参数作为随机数的种子，这是非常不安全的做法，容易遭受随机数预测攻击。
##### **2.3.1.2 通信模型**
EOS体系是以通讯为基本的，Action 就是EOS上通讯的载体。EOSIO 支持两种基本通信模型：内联（inline）通信，如在当前交易中处理
Action，和延迟（defer）通信，如触发一笔将来的交易。
**Inline通信**
Inline 通信是指调用 Action 和被调用 Action 都要执行成功（否则会一起回滚）。
Inline communication takes the form of requesting other actions that need to
be executed as part of the calling action.
Inline 通信使用原始交易相同的 scope 和权限作为执行上下文，并保证与当前 action 一起执行。可以被认为是 transaction 中的嵌套
transaction。如果 transaction 的任何部分失败，Inline 动作将和其他 transaction
一起回滚。无论成功或失败，Inline 都不会在 transaction 范围外生成任何通知。
重要的是要记住内联操作是作为调用操作的一部分执行的。因此，它们与原始交易的范围和权限相同。这是他们将被执行的保证。如果其中一个操作失败，则整个交易将失败。
**Deferred通信**
Deferred 通信在概念上等同于发送一个 transaction 给一个账户。这个 transaction 的执行是 eos
出快节点自主判断进行的，Deferrd 通信无法保证消息一定成功或者失败。
如前所述，Deferred 通信将在稍后由出快节点自行决定，从原始 transaction（即创建 Deferred 通信的
transaction）的角度来看，它只能确定创建请求是成功提交还是失败（如果失败，transaction 将立即失败）。
在开发智能合约时，要区分两种通信方式，并斟酌要使用的方式，否则合约将会遭受攻击，如回滚攻击。
### **2.3.2 编译和部署合约**
#### **2.3.2.1 编译**
EOSIO 智能合约开发完成之后，需要先编译成 WASM 字节码，然后部署到链上。
EOS 平台 CDT 套件中提供了 eosio-cpp 工具编译合约，使用以下命令就可以把合约编译成 wasm 文件。
    eosio-cpp  -o overflow.token.wasm overflow.token.cpp --abigen
\--abigen 参数表示要同时生成 abi 文件。ABI描述文件对智能合约的每一个 action handler
进行了描述，根据这些描述就可以知道action handler接收的参数类型和数量，从而可以发起action调用 handler。
和以太坊一样，业界也有很多 IDE 环境可以帮助开发者开发、编译、部署合约，如 EOS Studio，成都链安也提供了一个在线的 IDE
。
#### **2.3.2.2 部署**
部署合约可以使用 cleos 命令完成。
    Adas-Macbook-Pro:random ada$ cleos set contract alice .
    Reading WASM from /Users/ada/Blockchain/eos/eosio.cdt-1.4.1/eosio.contracts/random/random.wasm...
    Publishing contract...
    executed transaction: 97d33fc2143a84ab23e9f975983a036efb266aa1a9e77ae76273b7df2a2a03bc  8024 bytes  10800 us
    #         eosio $ cleos push action eosio setcode '[eosio.bios.wasm]' -p eosio
    \>$ cleos push action eosio setabi eosio '[eosio.bios.abi] -p eosio
来看一下部署合约的交易的具体内容：
    Adas-Macbook-Pro:random ada$ cleos get transaction 97d33fc2143a84ab23e9f975983a036efb266aa1a9e77ae76273b7df2a2a03bc
    {
      "id": "97d33fc2143a84ab23e9f975983a036efb266aa1a9e77ae76273b7df2a2a03bc",
      "trx": {
        "receipt": {
          "status": "executed",
          "cpu_usage_us": 10800,
          "net_usage_words": 1003,
          "trx": [
            1,{
              "signatures": [
                "SIG_K1_K12rdVM7JiVVZsZ24dxeQF2ehKc7Nymom4zm3QAZijRtCESQneXnEyCXA3wwYpT98JEhr2HcnXcE4bu3crYG1PoNY8fZTz"
              ],
              "compression": "zlib",
              "packed_context_free_data": "",
              "packed_trx": "78dad57c7b8c5cd779df39f7358f3b... "
            }
          ]
        },
        "trx": {
          "expiration": "2019-12-26T03:25:48",
          "ref_block_num": 3263,
          "ref_block_prefix": 1594014232,
          "max_net_usage_words": 0,
          "max_cpu_usage_ms": 0,
          "delay_sec": 0,
          "context_free_actions": [],
          "actions": [{
              "account": "eosio",
              "name": "setcode",
              "authorization": [{
                  "actor": "alice",
                  "permission": "active"