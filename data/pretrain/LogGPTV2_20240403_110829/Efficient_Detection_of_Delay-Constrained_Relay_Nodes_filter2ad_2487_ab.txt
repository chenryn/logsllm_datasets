der relay trafﬁc, can be similarly calculated from Equation
(7) as:
σ2
S withRelay
F
(cid:9)
f =1(βf )2γ4 + (A − β)γ4
(cid:10)(cid:9)
+ γ4A
(cid:10)(cid:9)
+ σ2
f =1(βf )2 − β
f =1(βf )2 − β
=
= γ4
= γ4
(cid:11)
(cid:11)
F
F
(cid:9)
Since β =
isﬁed so long as
F
f =1 βf , “σ2
(cid:9)
S withRelay
F
F
f =1(βf )2 >
S noRelay
(cid:9)
> σ2
(8)
S noRelay” is sat-
f =1 βf , which holds for
Then, by using M3 and M4 one could determine the polarity relation of
ROj and ROk such that, if M3 = M4 then ROj = ROk as well and
if M3 (cid:1)= M4 then ROj (cid:1)= ROk. This information could later be used to
determine M1 such that if ROj = ROk then M1 = M2 and if ROj (cid:1)=
ROk then M1 = −M2. So, M1 is not independent from the collection
(M2, M3, M4). However, in order this to happen, ﬂow Ii has to be active
in the same time slot with Oj and in another or the same time slot with Ok.
Also Im should be active in the same time slot with Oj and in another or
the same time slot with Ok. And all this has to happen in a short period of
time before “A” terms are collected. The probability of such event is not
very high and therefore independent Ma assumption is quite realistic.
356356
Notice that S is effectively the summation of a new
set of random numbers which are assigned to each active
incoming-outgoing ﬂow pair for each time slot. Therefore,
Equation (3) can be written as:
A(cid:4)
S =
Ma
(cid:9)
(cid:9)
a=1
(cid:9)
where A is the number of
terms such that “A =
1” and “Ma = (RIi × ROj)”, which
T
t=1
are random numbers drawn from probability mass function
ˆP (n):
j∈ˆjt
i∈ˆit
ˆP (n) =
1
2
1
2
0
, n = +γ2
, n = −γ2
, elsewhere
, where γ ∈ (cid:2)
(5)
Rigorously speaking, the Ma values may not be indepen-
dent since a single RIi or a single ROj may, and probably
will, contribute to multiple Ma values. However, for prac-
tical purposes Ma values are considered as i.i.d. random
variables with probability mass function ˆP (n). As a matter
of fact, this is not a very crude assumption1.
1Suppose M1 = RIi × ROj and M2 = RIi × ROk. Since P (n)
is bipolar symmetric, knowing RIi doesn’t give any information about
RIi × ROj. In other words P (M1 | M2) = P (M1) and therefore M1
and M2 are independent. However, suppose the following values were
also given or known: M3 = RIm × ROj and M4 = RIm × ROk.
βf > 1. Therefore one can identify relay nodes by looking
at σ2
S values as long as the relay ﬂows are simultaneously
active for more than one time slot. This is a purely theoretic
constraint and in practice a relay has to be active for sufﬁ-
ciently enough number of time slots in order to be detected.
Fortunately, most of the relay scenarios have to satisfy this
constraint in order to serve their purpose. Another interest-
ing observation is that the above constraint is independent
of γ. Therefore, the system performance doesn’t change
for different values of γ. Therefore, in the experiments this
value is simply set to γ = 1.
In practice, estimating σ2
S is the ﬁrst task to be per-
formed. Then the system can declare a node as being a relay
if the estimated σ2
S is sufﬁciently larger than the anticipated
σ2
S if the node is not relaying at all. For this purpose, the
system computes a number of S values simultaneously but
independently in order to estimate the σ2
S value.
2.3 Detection Algorithm and the Analysis
In this section we ﬁrst discuss the proposed algorithms
which compute S values in order to estimate σ2
S and conse-
quently performs relay detection. Following that, space and
time requirements of these algorithms are discusses.
The S values are calculated by the algorithm,
Calculate S listed below, which basically performs the op-
eration deﬁned in Equation (2). The algorithm takes the
parameter A, which is introduced in Equation (4) and indi-
cates the number of terms added together. Here I and O in-
dicate the list of incoming and outgoing ﬂows respectively.
Also the function “Reverse()” returns the ﬂow identiﬁcation
which has the complete reverse direction of a given ﬂow.
The algorithm then checks if this reverse ﬂow has been in-
cluded in the summation previously in order to deal with
the problem of request-response based protocols mentioned
earlier in Section 2.1.
Notice that Calculate S computes a single S value.
In order to accurately estimate σ2
S, a number of S val-
ues have to be collected. This can be done by executing
multiple Calculate S instances simultaneously. The algo-
rithm, Estimate σ2
S listed below, implements the estima-
tion procedure by employing the algorithm Calculate S.
The input parameter T indicates the number of simultane-
ous Calculate S executions.
It should be noted that Estimate σ2
S outputs a single
σ2
S value whenever A terms are collected. The time elapsed
until A terms are collected totally depends on the input pa-
rameters and the characteristics of the underlying network
trafﬁc. In a typical scenario the parameters can be chosen
so that the elapsed time to collect A terms is around few
seconds. Therefore, each estimated σ2
S value would corre-
spond to a few seconds of network trafﬁc. For continuous
operation, Estimate σ2
S should be executed repeatedly.
The ﬁnal decision is given based on the difference be-
S value
S values and the anticipated σ2
tween estimated σ2
− γ4A
when the node is not relaying at all. This value can be writ-
ten more formally as:
Ψ = σ2
S
(9)
Algorithm 1 Calculate S(A,I = {I1, ., Im}, O =
{O1., On})
S ← 0
noOf T erms ← 0
timeSlot ← currentT imeSlot
while noOf T erms ≤ A do
incomingSum ← 0
actInF l ← 0
for all active incoming ﬂow Ii within timeSlot do
if ROi for Reverse(Ii) is already used timeSlot then
continue;
nore this ﬂow
//In order to avoid request-response problem ig-
end if
if RIi is not assigned to Ii then
assign RIi randomly
[as in Eq(1)]
end if
incomingSum ← incomingSum + RIi
actInF l ← actInF l + 1
end for
outgoingSum ← 0
actOutF l ← 0
for all active incoming ﬂow Oj within timeSlot do
if RIj for Reverse(Oj) is already used in timeSlot then
continue;
nore this ﬂow
//In order to avoid request-response problem ig-
end if
if ROj is not assigned to Oj then
assign ROj randomly
[as in Eq(1)]
end if
outgoingSum ← outgoingSum + ROi
actOutF l ← actOutF l + 1
end for
noOf T erms ← noOf T erms + actInF l × actOutF l
timeSlot ← nextT imeSlot
S ← S + incomingSum × outgoingSum
end while
output S
In the experiments, a recent few Ψ values are incorpo-
rated in the decision process such that if the sum of “d”
most recently calculated Ψ values exceeds a threshold “th”
then the corresponding host is declared as performing relay
activity within the corresponding time slice.
Before we begin to analyze the algorithm, it should be
emphasized that the parameters A and T are constant val-
ues which are in the order of few hundreds and they do not
vary with the input size. As for the investigation of time re-
quirements, the algorithm Calculate S loops over the ac-
tive incoming ﬂows and active outgoing ﬂows separately.
It repeats these loops a constant number of times until A
terms are collected for summation. Therefore CalculateS is
O(m + n) time algorithm where m and n are the number of
incoming and outgoing ﬂows respectively of the node being
analyzed. Practically speaking, the algorithm may actually
loop fewer times than m + n since only a fraction of incom-
ing and outgoing ﬂows are active for a given time slot.
algorithm, Estimate σ2
S
calls
For
the
second
357357
Calculate S exactly T times which is indeed a con-
stant parameter. Therefore, Estimate σ2
S too runs in
O(m + n) time. However, the time requirements of the
whole system actually depends on how many times the
algorithm Estimate σ2
S is executed. But again for a given
ﬁxed time interval, Estimate σ2
S is called repeatedly for a
constant number of times. Therefore for a given ﬁxed time
interval, which is typically the duration of a typical relay
activity, the decision is given in linear time.
The space required by the algorithm, on the other hand,
is mainly the table which keeps assigned random values of
the incoming and outgoing ﬂows. Hence, it can be con-
cluded that the algorithm requires linear space as well.
Algorithm 2 Estimate σ2
S
(A, T, I, O)
S ← 0
σ2
for i = 1 to T do
Si ← Calculate S(A, I, O)
S ← σ2
σ2
S + (Si)2
T
end for
output σ2
S
3 Experiments and Results
In order to verify the practical efﬁcacy of the proposed
scheme, the algorithms discussed in Section 2.3 were imple-
mented and executed for real network trafﬁc. This section
presents the experimental setup and their results in order to
demonstrate the performance of the proposed scheme.
3.1 Experimental Setup
The ultimate goal of the proposed scheme is to iden-
tify network nodes that perform relay activity, or in other
words, “relay nodes”. Aside from relay trafﬁc, in almost
every case, relay nodes also receive and transmit legitimate
non-relay trafﬁc. Therefore, in our experiments, trafﬁc for
relay nodes was constructed such that pure relay trafﬁc is
blended into non-relay host trafﬁc. For the non-relay trafﬁc,
two different types of trafﬁc data were captured from real
network. The ﬁrst type was the trafﬁc of our university’s
web server which basically consists of http ﬂows. The sec-
ond type was captured from a mail server, which provides
mail client connections and ssh/telnet interactive sessions.
Both trafﬁc data were captured on a typical day for a few
hours. The Web server’s trafﬁc had average packet rate of
70 packets/second and average bit rate of 416 kbps whereas
mail server’s trafﬁc had higher average packer rate of 76
packets/second but lower average bit rate of 257 kbps.
The relay trafﬁc on the other hand was artiﬁcially gen-
erated where the packet inter-arrival times were determined
by the following Gaussian mixture model:
P (i) = pN (µshort, σ2
) (10)
where, N (µ, σ2) indicates normal distribution with mean µ
and variance σ2.
)+(1−p)N (µlong, σ2
short
long
n
o
i
t
c
e
r
i
D
t
e
k
c
a
P
1
0
−1
30
35
40
Time (seconds)
45
50
Figure 2. A typical relay trafﬁc generated by
model in Equation (10).
This model generates bursty trafﬁc such that the pack-
ets are mostly sent back to back without waiting too much
(with probability p) and a pause period occurs once in a
while (with probability 1 − p). The reason this model was
used is that bursty trafﬁc captures the behavior of most ap-
plications more accurately. Notice that this model generates
only the incoming portion of the relay trafﬁc. Each received
packet has to be forwarded in order to obtain a complete re-
lay activity. Rather than forwarding packets immediately,
a certain amount of delay was introduced for each packet
in order to represent the packet processing time and/or in-
tentional adversarial delays. For each packet, delay val-
ues were chosen randomly from a normal distribution with
µdelay and σ2
delay. About 30 second portion of an exam-
ple relay trafﬁc generated by this model is given in Figure
2, which shows the incoming packets, inter-arrival times,
and introduced delay between incoming and outgoing pack-
ets. The parameters used for the relay trafﬁc in this ﬁgure
are p = 0.8, µshort = 100 milliseconds, σshort = 10,
µlong = 3000 milliseconds and σlong = 500. The intro-
duced delay parameters are µdelay = 400 milliseconds and
σdelay = 50. Also in this ﬁgure, positive bars indicate in-
coming packets where negative ones indicate corresponding
forwarded (relayed) packets.
Given network trafﬁc data, the system was required to
decide if there is relay activity or not. The decision is given
based on the Ψ value described in Section 2.3. As discussed
in that section, the system calculates a Ψ value each time A
terms are collected. In our experiments, the decision in fa-
vor of the presence of a relay activity was made if the sum of
the most recent two Ψ values exceeded the threshold value
th = 1000. The numbers 2 and 1000 are selected exper-
imentally and they are tuned to detect shorter relay activi-
ties which last only for a few hundred packets. However,
it should be noted that further reducing th value would en-
able detecting even shorter relay activity but would incur
the cost of increased false positive rates. On the other hand,
large th values could reduce false positive rates to arbitrar-
ily small values but the system can detect only long enough
relay activity.
In order to measure detection performance, the gener-
ated relay trafﬁc was blended into real network trafﬁc and
the overall trafﬁc was fed to the system for analysis. If the
system was able to detect the relay activity by the time all
358358
Under Web Server Traffic and  A=500
Under Web Server Traffic and  A=1000
Under Mail Server Traffic and  A=500
Under Mail Server Traffic and  A=1000
t
e
a
R
e
v
i
t
i
s
o
P
e
u
r
T
1
0.8
0.6
0.4
0.2
0
0
200
L=100 ms
L=200 ms
L=400 ms
L=600 ms
L=100 ms
L=200 ms
L=400 ms
L=600 ms
1
0.8
0.6
0.4
0.2
t
e
a
R
e
v
i
t
i
s
o
P
e
u
r
T
L=100 ms