## 前言
讲到JSONP，那么我们就要从浏览器的同源策略开始说起了。
### 浏览器的同源策略
SOP，全称为同源策略 (Same Origin
Policy)，该策略是浏览器的一个安全基石，如果没有同源策略，那么，你打开了一个合法网站，又打开了一个恶意网站。恶意网站的脚本能够随意的操作合法网站的任何可操作资源，没有任何限制。浏览器要严格隔离两个不同源的网站，目的是保证数据的完整性和机密性。  
[
浏览器的同源策略规定：不同域的客户端脚本在没有明确授权的情况下，不能读写对方的资源。那么何为同源呢，即两个站点需要满足同协议，同域名，同端口这三个条件。  
“同源”的定义：  
域名  
协议  
tcp端口号  
只要以上三个值是相同的，我们就认为这两个资源是同源的。  
为了更好的解释这个概念，以下这张图片将利用`http://www.example.com/dir/page.html`这个url作为示例，展示在同源策略控制下不同的结果:  
[
## JSONP的介绍
### 简单描述
JSONP 是 JSON with padding（填充式 JSON 或参数式 JSON）的简写。  
JSONP实现跨域请求的原理简单的说，就是动态创建``标签，然后利用``的src 不受同源策略约束来跨域获取数据。
JSONP 由两部分组成：回调函数和数据。回调函数是当响应到来时应该在页面中调用的函数。回调函数的名字一般是在请求中指定的。而数据就是传入回调函数中的
JSON 数据。
动态创建``标签，设置其src，回调函数在src中设置：
    var script = document.createElement("script");
    script.src = "https://api.douban.com/v2/book/search?q=javascript&count=1&callback=handleResponse";
    document.body.insertBefore(script, document.body.firstChild);
在页面中，返回的JSON作为response参数传入回调函数中，我们通过回调函数来来操作数据。
    function handleResponse(response){
        // 对response数据进行操作代码
    }
### 深入研究
首先来看看同源策略到底有什么作用：当浏览器发现有一个跨域的请求，但是它在服务器的返回头中如果没有发现  
`Access-Control-Allow-Origin` 值允许  的访问，那么便会将其给拦截。  
那么虽然浏览器受到了同源策略的限制，不允许实现跨域访问，但是由于在开发过程中，其中的前后端的交互过程中不可避免会涉及到跨域的请求（设计同源策略的人想必也发现了这个问题），于是设计者给我们留了一个后门，就是只要服务器响应头中返回允许这个源的选项，那么跨域请求就会成功。（这里纠正一个误区，不要认为浏览器默认支持同源策略就意味着不同源的请求就不能发出去，其实还是能发出去的，只是要看响应头）
我们都知道在页面中有几个东西是对同源策略免疫的，有 `` 的src 、`` 的 href 还有就是``的 src ,
那么JSONP 就是利用其中的 `` 标签的sec 属性实现跨区域请求的。  
``标签的请求不论是不是同源一律不受同源策略的限制，那我们就找到了解决跨域访问的方法。  
这里我们用一个例子来更加直观的展示：  
getUser.php代码如下：
请求该接口并加上jsoncallback=1，即访问`http://127.0.0.1/jsonp%20poc/getuser.php?jsoncallback=1`，返回值如下：  
[  
在返回值开头中可见1，如果我们修改callback的值为其他值，此处的返回值也会相应改变。
1.html代码如下：
    JSONP劫持测试
我们在``标签里面给出的链接是我本地服务器的一个php的代码，我给这个文件传递了一个参数，作为我要调用的函数。服务器接收到这个参数以后把它当做函数名，并给这个函数传递了一个json的值作为用户调用的函数的参数，最终实现调用。
下面是调用成功的截图  
[
实际上，jquery 给我们提供了现成的接口，我们可以不用这么麻烦。  
2.html代码如下：
        JSONP劫持测试
[
所以整个的具体过程其实就是：  
我们把回调函数给了服务器，服务器把json参数给了回来。
## JSONP劫持漏洞的学习
### JSONP劫持的原理
这里就简单的说一下：
JSONP就是为了跨域获取资源而产生的一种非官方的技术手段(官方的有 CORS 和 postMessage),它利用的是 `` 标签的
src 属性不受同源策略影响的特性。
那么劫持又是怎么回事呢？其实我们在学安全的过程中对劫持这个词可以说是一点也不陌生，我们遇到过很多的劫持的攻击方法，比如：dns
劫持、点击劫持、cookie劫持等等，也正如劫持这个词的含义：“拦截挟持”，dns 劫持就是把 dns
的解析截获然后篡改，点击劫持就是截获你的鼠标的点击动作，在用户不知情的情况下点击攻击者指定的东西；cookie 劫持就是获取用户的
cookie，然后可以进一步伪造身份；那么同样， `jsonp劫持`就是攻击者获取了本应该传给网站其他接口的数据。
### JSONP劫持漏洞如何利用和它有什么危害
通过JSONP技术可以实现数据的跨域访问，必然会产生安全问题，如果网站B对网站A的JSONP请求没有进行安全检查直接返回数据，则网站B 便存在JSONP
漏洞，网站A 利用JSONP漏洞能够获取用户在网站B上的数据。
#### 1.漏洞利用过程
1）用户在网站B 注册并登录，网站B 包含了用户的id，name，email等信息；  
2）用户通过浏览器向网站A发出URL请求；  
3）网站A向用户返回响应页面，响应页面中注册了JavaScript的回调函数和向网站B请求的``标签，示例代码如下：>标签，示例代码如下：
4）用户收到响应，解析JS代码，将回调函数作为参数向网站B发出请求；  
5）网站B接收到请求后，解析请求的URL，以JSON
格式生成请求需要的数据，将封装的包含用户信息的JSON数据作为回调函数的参数返回给浏览器，网站B返回的数据实例如下：
    Callback({"id":1,"name":"test","email":"PI:EMAIL"})
6）网站B数据返回后，浏览器则自动执行Callback函数对步骤4返回的JSON格式数据进行处理，通过alert弹窗展示了用户在网站B的注册信息。另外也可将JSON数据回传到网站A的服务器，这样网站A利用网站B的JSONP漏洞便获取到了用户在网站B注册的信息。
#### 2.利用图
[
#### 3.危害
    1.攻击者利用存在漏洞的网站，将链接通过邮件等形式推送给受害者，如果受害者点击了链接，则攻击者便可以获取受害者的个人敏感的信息。所以JSONP劫持漏洞会泄露信息。
    2.可能导致用户权限被盗用;
    攻击者通过JSON劫持构造盗取管理员或高权限用户的脚本，一旦被访问，权限立即被盗用。
    3. 可以通过劫持对网页进行挂马;
    在JSON劫持点构造引向漏洞后门木马，但访问直接利用漏洞批量挂马。
    4. 可对劫持页进行网站钓鱼;
    利用JSON劫持直接导向伪装网站地址。
    5. 可做提权攻击;
    6. 变种拒绝服务攻击;
    劫持后将流量导向受害网站，直接发动DDOS攻击。
### JSONP 漏洞的挖掘思路(和下面的 JSONP劫持漏洞实例 对应)
这里我采用chrome浏览器的调试窗口进行挖掘weibo.com中存在的漏洞(测试之前需要登录一下，因为我们需要检测是不是会有敏感信息泄露)
1.首先把Preserve log选项勾上，这样用来防止页面刷新跳转的时候访问记录被重置，也方便我们进行下一步的筛选。  
[
2.然后 F5 刷新，进入 NetWork 标签 ，`CTRL+F` 结合 `Filter`查找一些关键词 如 callback，json
，jsonp，email **（其中筛选出来的结果对应下面的getUser.php）**
常见的关键字还有这些：  
[
(1)在`Filter`中进行关键字筛选之后可以看到筛选结果：  
[
(2)`CTRL + F`中进行关键字筛选之后可以看到筛选结果：  
[
[
3.然后我们需要人工确认这个请求的返回值是否有泄露用户的敏感信息，并且能被不同的域的页面去请求获取，这里以上面查找到的 jsonp
为例。直接双击上面红框中的链接，页面出现以下结果：  
[