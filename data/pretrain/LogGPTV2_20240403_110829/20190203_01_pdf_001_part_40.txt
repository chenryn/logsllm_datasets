### Table Definitions
These issues need to be resolved on a case-by-case basis, as discussed earlier in this section.

---

**Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved.**

**EDB Postgres Replication Server User’s Guide**

**Figure 7-89: List of Publications with Modified Tables**

### 7.6.6 Removing a Publication

#### Single-Master Replication System
In a single-master replication system, you can remove a publication before removing its associated subscriptions. For instructions on removing a subscription, see Section 5.5.5.

#### Multi-Master Replication System
In a multi-master replication system, the publication is removed from under the Publication Database node representing the master definition node. Before removing a publication, all non-MDN (Master Definition Node) nodes must be removed. For instructions on removing a publication database definition of a master node, see Section 7.6.7.

**Important Notes:**
- Removing a publication does not delete the publication tables in the publication database. It only removes the identity and association of these tables with xDB Replication Server. The tables remain in the database until the DBA deletes them using the `DROP TABLE` SQL statement.
- The publication database user name and some xDB Replication Server metadata database objects are left intact.
- Shadow tables and triggers associated with the publication tables, created by the publication server, are deleted when the publication is removed.
- Remaining metadata database objects are deleted when the publication database definition is removed.

#### Steps to Remove a Publication

**Step 1: Ensure the Publication Server is Running**
- Make sure the publication server, which is the parent of the publication you wish to remove, is running and registered in the xDB Replication Console. For instructions on starting and registering a publication server, see Section 5.2.1.

**Step 2: Select the Publication Node**
- **Single-Master Replication (SMR):** Select the Publication node of the publication you wish to remove.
- **Multi-Master Replication (MMR):** Select the Publication node under the Publication Database node representing the master definition node.

**Figure 7-90: Selecting a Publication to Remove**

**Step 3: Remove the Publication**
- Choose one of the following methods:
  - From the Publication menu, select "Remove Publication."
  - Right-click the Publication node and choose "Remove Publication."
  - Click the "Remove Publication" icon.

**Figure 7-91: Removing the Publication Using the Menu Bar**

**Step 4: Confirm Removal**
- In the "Remove Publication" confirmation box, click the "Yes" button.

**Figure 7-92: Remove Publication Confirmation**

- The Publication node will no longer appear under the Publication Database node.

**Figure 7-93: Replication Tree After Removing a Publication**

### 7.6.7 Removing a Publication Database

Deleting a publication database definition from xDB Replication Server is equivalent to removing its Publication Database node.

**Controller Database Considerations:**
- If the Publication Database node to be removed is currently designated as the controller database, and there are additional publication databases in other single-master or multi-master replication systems, you must first switch the controller database role to another publication database. For information on switching the controller database, see Section 7.7.
- If the Publication Database node to be removed is the only remaining publication database, it can remain as the controller database. However, any existing subscription database definitions must be removed before removing the last Publication Database node.

**Single-Master Replication System:**
- Before removing a Publication Database node, all publications under that node must be removed. For instructions on removing a publication, see Section 7.6.6.

**Multi-Master Replication System:**
- Removing a Publication Database node representing a master node (other than the master definition node) eliminates that node’s future participation in the replication system. Synchronization replications no longer involve tables in the removed master node.
- Removing the Publication Database node representing the master definition node removes the remaining metadata database objects of that particular multi-master replication system, effectively removing the multi-master replication system (except for the database objects comprising the publication tables).

**Steps to Remove a Publication Database Node:**
1. **Switch the Controller Database (if necessary):**
   - If the multi-master replication system is the only xDB replication system, switch the controller database to the master definition node if the designated controller database is not currently the same database as the master definition node.
   - If there are one or more single-master replication systems in addition to the multi-master replication system, switch the controller database to a Postgres publication database of a single-master replication system. If none of the single-master publication databases is of type Postgres, and there are more than one Oracle or SQL Server publication databases, create a Postgres publication database for a single-master replication system just for the purpose of designating it as the controller database.

2. **Remove Non-MDN Nodes:**
   - All Publication Database nodes representing non-MDN nodes must be removed. Repeat the process described in this section for each such master node.

3. **Remove the Publication:**
   - The publication under the Publication Database node representing the master definition node must be removed. For instructions, see Section 7.6.6.

4. **Remove the Publication Database Node:**
   - Use the process described in this section to remove the Publication Database node representing the master definition node.

**Important Notes:**
- Removing a Publication Database node does not delete the physical database from the database server. It only removes the identity and association of the database with xDB Replication Server. No further replications can originate from tables in the database unless there are other publication database definitions in xDB Replication Server with the same host and database identifier.
- The physical database can only be removed using the database management system’s database removal procedures.
- The publication database user name is left intact.
- All xDB Replication Server metadata database objects created for that publication database definition are deleted.
- For Oracle and SQL Server: All metadata database objects under the publication database user’s schema are deleted.
- For Postgres: The schema `_edb_replicator_pub` and all of its database objects are deleted from the publication database.

**Steps to Remove the Publication Database Node:**

**Step 1: Ensure the Publication Server is Running**
- Make sure the publication server, which is the parent of the publication database definition you wish to remove, is running and registered in the xDB Replication Console. For instructions on starting and registering a publication server, see Section 5.2.1.

**Step 2: Select the Publication Database Node**
- Select the Publication Database node that you wish to remove.

**Figure 7-94: Selecting a Publication Database Definition for Removal**

**Step 3: Remove the Database**
- From the Publication menu, choose "Publication Database," then "Remove Database." Alternatively, right-click the Publication Database node and choose "Remove Database." The "Remove Publication Database" confirmation box appears.

**Step 4: Confirm Removal**
- In the "Remove Publication Database" confirmation box, click the "Yes" button.

**Figure 7-95: Remove Publication Database Confirmation**

- The Publication Database node will no longer appear under the Publication Server node.

**Figure 7-96: Replication Tree After Removing a Publication Database**

### 7.7 Switching the Controller Database

The controller database is designated in the xDB Replication Configuration file and determines the publication database to which the publication server and subscription server initially connect upon startup. For information on the controller database, see Section 2.3.1.12. For information on the xDB Replication Configuration file, see Section 2.3.1.3.

**Important Notes:**
- The current controller database cannot be removed from a replication system unless it is the last publication database remaining subordinate to the publication server.
- If there are multiple publication databases and you wish to remove the publication database currently designated as the controller database, you must first set another publication database as the controller, and then you can remove the previous controller database.
- The publication database used as the controller can be the master database of any single-master replication system or any master node of a multi-master replication system. Any database type (Oracle, SQL Server, or Postgres) is acceptable as the controller database.
- If the controller database is an Oracle or a SQL Server publication database, a second Oracle or SQL Server publication database cannot be added to create a second single-master replication system. To run more than one single-master replication system consisting of Oracle or SQL Server publication databases, a Postgres publication database must be designated as the controller database.
- Once you have multiple Oracle or SQL Server publication databases set up in single-master replication systems with a Postgres controller database, do not switch the controller database to an Oracle or SQL Server publication database.

**Upon Switching the Controller Database:**
- The publication server updates the xDB Replication Configuration file so the parameters `user`, `password`, `host`, `port`, `database`, and `type` are set to the connection and authentication settings for the selected publication database.

**Steps to Set Another Publication Database as the Controller Database:**

**Step 1: Ensure the Publication Server is Running**
- Make sure the publication server, which is the parent of the publication databases, is running and registered in the xDB Replication Console. For instructions on starting and registering a publication server, see Section 5.2.1.

**Step 2: Select the Publication Database Node**
- Select the Publication Database node corresponding to the publication database that you wish to set as the controller database.

**Figure 7-97: Selecting the Publication Database to Set as the Controller Database**

**Step 3: Set as Controller Database**
- Right-click the Publication Database node and choose "Set as Controller database."

**Figure 7-98: Setting the Controller Database**

**Step 4: Confirm the Change**
- In the "Set as Controller database" confirmation box, click the "Yes" button.

**Figure 7-99: Set as Controller Database Confirmation**

**Step 5: Verify the Change**
- The selected publication database has now been set as the controller database.

**Figure 7-100: Publication Database Promoted to Controller Database**

**Step 6: Check the Property Window**
- The value "Yes" in the "Controller database" field of the Property window indicates that this database is the controller database.

**Figure 7-101: Controller Database Indicated by 'Yes' in the Property Window**

**Example xDB Replication Configuration File:**

```plaintext
#xDB Replication Server Configuration Properties
#Thu Oct 15 14:42:35 GMT-05:00 2015
port=5444
admin_password=ygJ9AxoJEX854elcVIJPTw\=\=
user=mmruser
admin_user=admin
type=enterprisedb
database=mmrnode_b
password=ygJ9AxoJEX854elcVIJPTw\=\=
host=192.168.2.22
```

### 7.8 Replicating DDL Changes

Once a replication system has been created and is in operation, there may be occasions where it is necessary to make changes to the publication table definitions. These data definition language (DDL) changes may include:

- Adding new columns to a table
- Renaming existing columns
- Modifying a column data type
- Modifying a column constraint
- Removing columns

**Note:** For information on dealing with other types of table definition changes, see Section 7.6.5.

Table definition changes are generally implemented using the SQL `ALTER TABLE` statement, which is issued in an SQL command line utility program such as PSQL.

**DDL Change Replication Feature:**
- The DDL change replication feature accepts one or more `ALTER TABLE` statements. The statements may be provided by means of a text file or by entering them directly into the "Alter Publication Table" dialog box. You can copy and paste the statements into the dialog box or type them directly.
- The DDL change replication feature performs the following actions:
  - Applies the `ALTER TABLE` statements to the appropriate target table in the publication and subscription databases of a single-master replication system, or in all master nodes (including the master definition node) of a multi-master replication system.
  - For the trigger-based method of synchronization replication, modifies the insert/update/delete triggers that add data into the shadow table whenever a transaction occurs on the target table.
  - For the trigger-based method of synchronization replication, modifies the shadow table to properly accommodate the target table changes.

**Supported Databases:**
- The DDL change replication feature is supported for Oracle and SQL Server subscription databases as well as Postgres subscription databases. However, the publication database must always be a Postgres database.

**Syntax of the ALTER TABLE Statement:**

```sql
ALTER TABLE schema.table_name action
```

Where `action` can be any of the following:

- **Rename an Existing Column:**
  ```sql
  RENAME [ COLUMN ] column_name TO new_column_name
  ```

- **Add a Column to the Table:**
  ```sql
  ADD [ COLUMN ] column_name data_type
  [ DEFAULT dflt_expr ]
  [ column_constraint_1 [ column_constraint_2 ] ...]
  ```

- **Drop a Column from the Table:**
  ```sql
  DROP [ COLUMN ] column_name [ RESTRICT ]
  ```

- **Change the Data Type of a Column:**
  ```sql
  ALTER [ COLUMN ] column_name [ SET DATA ] TYPE data_type
  [ COLLATE "collation" ]
  [ USING data_type_expr ]
  ```

- **Set the DEFAULT Value of a Column:**
  ```sql
  ALTER [ COLUMN ] column_name SET DEFAULT dflt_expr
  ```
  **Note:** The `SET DEFAULT` clause is not supported when Oracle or SQL Server is the subscription database.

- **Drop the DEFAULT Value of a Column:**
  ```sql
  ALTER [ COLUMN ] column_name DROP DEFAULT
  ```
  **Note:** The `DROP DEFAULT` clause is not supported when Oracle or SQL Server is the subscription database.

- **Set the Column to Reject Null Values:**
  ```sql
  ALTER [ COLUMN ] column_name SET NOT NULL
  ```
  **Note:** The `SET NOT NULL` clause is not supported when SQL Server is the subscription database.

- **Allow the Column to Accept Null Values:**
  ```sql
  ALTER [ COLUMN ] column_name DROP NOT NULL
  ```
  **Note:** The `DROP NOT NULL` clause is not supported when SQL Server is the subscription database.

**Restrictions:**
- Each `ALTER TABLE` statement must be terminated by a semicolon and begin on a separate line.
- Although the Postgres `ALTER TABLE` statement allows multiple actions per statement, the xDB DDL change replication feature permits only one action per `ALTER TABLE` statement.
- The target table of all `ALTER TABLE` statements must be the same.
- The `DROP COLUMN` action cannot be specified for a column that comprises part of the table’s primary key.

**Parameters:**

- **schema**: The name of the schema containing `table_name`. This value is case-sensitive.
- **table_name**: The name of the table containing the column to be added, modified, or dropped. This value is case-sensitive.
- **column_name**: The name of the column to be added, modified, or dropped.
- **new_column_name**: The new name of the column specified in the `RENAME COLUMN` clause.
- **data_type**: The data type of the column.
- **dflt_expr**: An expression for the default value of the column.
- **column_constraint_n**: A column constraint such as a `UNIQUE` or `CHECK` constraint. For additional information on column constraints, see the `CREATE TABLE` SQL command in the PostgreSQL Core Documentation located at: [https://www.postgresql.org/docs/current/static/sql-createtable.html](https://www.postgresql.org/docs/current/static/sql-createtable.html)
- **RESTRICT**: In the `DROP COLUMN` clause, do not drop the column if there are objects dependent upon it. This is the default. Note: You cannot specify the `CASCADE` option as it is not supported by the DDL change replication feature.
- **collation**: Collation assigned to the column. If omitted, the column data type’s default collation is used. Examples of collation are `default`, `C`, `POSIX`, `en_US`, `en_GB`, or `de_DE`.
- **data_type_expr**: An expression specifying how the column value with the new data type is to be converted from the column value with the old data type. This expression may reference other columns in the same table. If omitted, the default conversion is an assignment cast from the old data type to the new data type.

**Examples:**

The following are examples of `ALTER TABLE` statements that can be used by the DDL change replication feature. The set of `ALTER TABLE` statements, either specified by a text file or entered directly into the "Alter Publication Table" dialog box, should follow the syntax and restrictions outlined above.