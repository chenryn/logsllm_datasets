# 使用Shell脚本的原因
Shell脚本在处理自动化任务或大规模任务时能够节省大量时间，并且功能强大。如果需要处理的任务涉及一系列命令，手动逐个输入并检查每个命令的输出会非常耗时。例如，将文件分类、向文件中插入文本、迁移文件、从文件中删除行、清除系统中的过期文件以及执行常规系统管理维护等任务都可以通过创建一个包含变量、条件判断、算术运算和循环结构的脚本来实现。这样不仅提高了效率，还能让信息在不同的命令间传递。

尽管不同版本的UNIX和LINUX可能要求对脚本进行少量调整才能运行，但总体来说，Shell脚本具有良好的可移植性。当遇到预期之外的结果时，请保持冷静，保存当前的工作状态作为修改的基础。勇于尝试新方法是学习过程中不可或缺的一部分。

# Shell脚本的基本元素
本书侧重于介绍如何编写易于理解和重复利用的脚本，而非复杂的编程技巧。一个好的实践是从简单易懂的脚本开始学习。所有脚本的第一行都应该是`#!/bin/sh`，这指定了用于解释该脚本的Bourne shell的位置。在脚本中添加注释是一个好习惯，注释行以`#`开头，解释器会忽略这些行的内容。确保给你的脚本加上执行权限，并设置正确的路径以便直接通过文件名来运行它。

# Shell脚本的运行方式
考虑这样一个名为`cleanup`的示例脚本，它负责清理特定目录下的文件。要使这个脚本可执行，你需要使用`chmod u+x cleanup`命令赋予其执行权限。之后，只需键入脚本名即可运行：`$ cleanup`。如果遇到“command not found”错误，可能是由于PATH环境变量没有包含脚本所在的目录。在这种情况下，可以通过编辑`.profile`文件来更新PATH变量，或者直接使用相对或绝对路径来调用脚本：`$ ./cleanup`。

# 小结
本章介绍了Shell脚本的基本概念及其优势所在。理解了上述内容后，读者应该已经掌握了启动和运行基本Shell脚本所需的知识点。接下来的章节将进一步探讨如何利用条件测试等功能增强脚本的功能性与灵活性。