• 使用s h e l l脚本的原因。
• shell脚本基本元素。
• shell脚本运行方式。
16.1 使用shell脚本的原因
s h e l l脚本在处理自动循环或大的任务方面可节省大量的时间，且功能强大。如果你有处
理一个任务的命令清单，不得不一个一个敲进去，然后观察输出结果，再决定它是否正确，
如果正确，再继续下一个任务，否则再回到清单一步步观察。一个任务可能是将文件分类、
向文件插入文本、迁移文件、从文件中删除行、清除系统过期文件、以及系统一般的管理维
护工作等等。创建一个脚本，在使用一系列系统命令的同时，可以使用变量、条件、算术和
循环快速创建脚本以完成相应工作。这比在命令行下一个个敲入要节省大量的工作时间。
s h e l l脚本可以在行命令中接收信息，并使用它作为另一个命令的输入。
对于不同的U N I X和L I N U X，使用一段s h e l l脚本将需要一些小小的改动才能运行通过。实
际上s h e l l的可迁移性不成问题，但是系统间命令的可迁移性存在差别。
试试新思路
如果写一段脚本，其执行结果与预想的不同，不必着急。无论多不可思议的结果，记住
先把它保存起来，这是修改的基础。这里要说的意思是不要害怕对待新事物，否则将不能树
立信心，学起来会更加困难。
16.2 脚本内容
本章不讲怎样设计精巧的脚本，而是怎样使脚本重复利用率高。当通过一些易理解的脚
本就可实现同样功能时，没有必要使脚本复杂化。如果作者要写这样一本书，可能会给你留
下深刻印象，但这要花费更多的时间和精力去研读和体会脚本。这不是本书的目标。本书脚
本流程仅使用基本的脚本技术，十分容易学，然后使用者就可以着手实践了。
脚本不是复杂的程序，它是按行解释的。脚本第一行总是以 # ! / b i n / s h开始，这段脚本通知
s h e l l使用系统上的Bourne shell解释器。
任何脚本都可能有注释，加注释需要此行的第一个字符为 #，解释器对此行不予解释。在
加入java编程群：524621833
152
第四部分 基础s h e l l编程
下载
第二行注释中写入脚本名是一个好习惯。
脚本从上到下执行，运行脚本前需要增加其执行权限。确保正确建立脚本路径，这样只
用文件名就可以运行它了。
16.3 运行一段脚本
下面是一个已经讨论过的例子，此文件为c l e a n u p。
上述脚本通过将目录下文件名截断，清除/ u s r / a d m /下信息，并删除/ u s r / l o c a l / a p p s / l o g下所
有注册信息。
可以使用c h m o d命令增加脚本执行权限。
$ chmod u+x cleanup
现在运行脚本，只敲入文件名即可。
$ cleanup
如果返回错误信息：
$ cleanup
sh:cleanup:command not found
再试：
$. /cleanup
如果脚本运行前必须键入路径名，或者 s h e l l结果通知无法找到命令，就需要在 . p r o f i l e
PAT H下加入用户可执行程序目录。要确保用户在自己的 $ H O M E可执行程序目录下，应键入：
$ pwd
$ /home/dave/bin
如果p w d命令最后一部分是b i n，那么需要在路径中加入此信息。编辑用户 . p r o f i l e文件，
加入可执行程序目录$ H O M E / b i n如下：
P A T H = $ P A T H : $ H O M E / b i n
如果没有b i n目录，就创建它。首先确保在用户根目录下。
$ cd $HOME
$ mkdir bin
现在可以在. p r o f i l e文件中将b i n目录加入PAT H变量了，然后重新初始化. p r o f i l e。
$. ./profile
脚本将会正常运行。
如果还有问题，见第2章和第1 3章，那里详细介绍了如何解决这一问题。
全书有许多脚本清单，这些脚本都是完整的。将这些脚本输入文件，保存并退出，再使
加入java编程群：524621833
153
第16章 shell 脚本介绍
下载
用c h m o d命令增加其执行权限，这些脚本就可以实际操作了。
16.4 小结
本章介绍了s h e l l脚本的基本原理，相信关于脚本的功能原理这些已经足够了，读本章时
可加快速度。本章目标只是要用户知道运行s h e l l脚本需要做些什么。
加入java编程群：524621833
下载
第17章 条 件 测 试
写脚本时，有时要判断字符串是否相等，可能还要检查文件状态或是数字测试。基于这
些测试才能做进一步动作。Te s t命令用于测试字符串，文件状态和数字，也很适合于下一章将
提到的i f、t h e n、e l s e条件结构。
本章内容有：
• 对文件、字符串和数字使用t e s t命令。
• 对数字和字符串使用e x p r命令。
e x p r命令测试和执行数值输出。使用最后退出状态命令 $ ?可测知t e s t和e x p r，二者均以0表
示正确，1表示返回错误。
17.1 测试文件状态
t e s t一般有两种格式，即：
test condition
或
[ c o n d i t i o n ]
使用方括号时，要注意在条件两边加上空格。
测试文件状态的条件表达式很多，但是最常用的可在表 1 7 - 1中查到。
表17-1 文件状态测试
- d 目录 - s 文件长度大于0、非空
- f 正规文件 - w 可写
- L 符号连接 - u 文件有s u i d位设置
- r 可读 - x 可执行
使用两种方法测试文件s c o r e s . t x t是否可写并用最后退出状态测试是否成功。记住， 0表示
成功，其他为失败。
两种状态均返回0，可知文件s c o r e s . t x t可写，现在测试其是否可执行：
查看文件s c o r e s . t x t权限列表，可知结果正如所料。
下面的例子测试是否存在a p p s b i n目录
加入java编程群：524621833
155
第17章 条件测试
下载
目录a p p s b i n果然存在。
测试文件权限是否设置了s u i d位
从结果知道s u i d位已设置。
17.2 测试时使用逻辑操作符
测试文件状态是否为O K，但是有时要比较两个文件状态。 s h e l l提供三种逻辑操作完成此
功能。
-a 逻辑与，操作符两边均为真，结果为真，否则为假。
-o 逻辑或，操作符两边一边为真，结果为真，否则为假。
! 逻辑否，条件为假，结果为真。
下面比较两个文件：
下面的例子测试两个文件是否均可读。
结果为真。
要测试其中一个是否可执行，使用逻辑或操作。
s c o r e s . t x t不可执行，但r e s u l t s . t x t可执行。
要测试文件r e s u l t s . t x t是否可写、可执行：
结果为真。
17.3 字符串测试
字符串测试是错误捕获很重要的一部分，特别在测试用户输入或比较变量时尤为重要。
字符串测试有5种格式。
加入java编程群：524621833
156
第四部分 基础s h e l l编程
下载
这里，s t r i n g _ o p e r a t o r可为：
= 两个字符串相等。
！= 两个字符串不等。
-z 空串。
-n 非空串。
要测试环境变量E D I TO R是否为空：
非空，取值是否是v i？
是的，用e c h o命令反馈其值：
测试变量t a p e与变量t a p e 2是否相等：
不相等。没有规定在设置变量时一定要用双引号，但在进行字符串比较时必须这样做。
测试变量t a p e与t a p e 2是否不相等。
是的，它们不相等。
17.4 测试数值
测试数值可以使用许多操作符，一般格式如下：
" n u m b e r " n u m e r i c _ o p e r a t o r " n u m b e r "
或者
[ " n u m b e r " n u m e r i c _ o p e r a t o r " n u m b e r " ]
n u m e r i c _ o p e r a t o r可为：
-eq 数值相等。
-ne 数值不相等。
-gt 第一个数大于第二个数。
-lt 第一个数小于第二个数。
-le 第一个数小于等于第二个数。
-ge 第一个数大于等于第二个数。
下面的例子返回结果都一样。均为测试两个数是否相等（ 1 3 0是否等于1 3 0）。
加入java编程群：524621833
157
第17章 条件测试
下载
结果果然正确。
改变第二个数，结果返回失败，状态1（1 3 0不等于2 0 0）
测试1 3 0是否大于1 0 0：
当然。
也可以测试两个整数变量。下面测试变量s o u r c e _ c o u n t是否小于d e s t _ c o u n t :
可以不必将整数值放入变量，直接用数字比较即可，但要加引号。
可以用逻辑操作符将两个测试表达式结合起来。仅需要用到一对方括号，而不能用两个，
否则将返回错误信息“too many arg u m e n t s”。
下面例子测试两个表达式，如果都为真，结果为真，正确使用方式应为：
17.5 expr用法
e x p r命令一般用于整数值，但也可用于字符串。一般格式为：
expr argument operator argument
e x p r也是一个手工命令行计数器。
使用乘号时，必须用反斜线屏蔽其特定含义。因为 s h e l l可能会误解显示星号的意义。
加入java编程群：524621833
158
第四部分 基础s h e l l编程
下载
17.5.1 增量计数
e x p r在循环中用于增量计算。首先，循环初始化为 0，然后循环值加1，反引号的用法意
即替代命令。最基本的一种是从（e x p r）命令接受输出并将之放入循环变量。
17.5.2 数值测试
可以用e x p r测试一个数。如果试图计算非整数，将返回错误。
这里需要将一个值赋予变量（不管其内容如何），进行数值运算，并将输出导入d e v / n u l l，
然后测试最后命令状态，如果为0，证明这是一个数，其他则表明为非数值。
这是一个数。
这是一个非数值字符。
e x p r也可以返回其本身的退出状态，不幸的是返回值与系统最后退出命令刚好相反，成
功返回1，任何其他值为无效或错误。下面的例子测试两个字符串是否相等，这里字符串为
“h e l l o”和“h e l l o”。
e x p r返回1。不要混淆了，这表明成功。现在检验其最后退出状态，返回 0表示测试成功，
“h e l l o”确实等于“h e l l o”。
17.5.3 模式匹配
e x p r也有模式匹配功能。可以使用e x p r通过指定冒号选项计算字符串中字符数。 . *意即任
何字符重复0次或多次。
在e x p r中可以使用字符串匹配操作，这里使用模式. d o c抽取文件附属名。
加入java编程群：524621833
159