![](../img/fig9-7.png)
**图 9-7 网路中断迫使线性一致性和可用性之间做出选择。**
考虑这样一种情况：如果两个资料中心之间发生网路中断会发生什么？我们假设每个资料中心内的网路正在工作，客户端可以访问资料中心，但资料中心之间彼此无法互相连线。
使用多主资料库，每个资料中心都可以继续正常执行：由于在一个数据中心写入的资料是非同步复制到另一个数据中心的，所以在恢复网路连线时，写入操作只是简单地排队并交换。
另一方面，如果使用单主复制，则主库必须位于其中一个数据中心。任何写入和任何线性一致的读取请求都必须传送给该主库，因此对于连线到从库所在资料中心的客户端，这些读取和写入请求必须透过网路同步传送到主库所在的资料中心。
在单主配置的条件下，如果资料中心之间的网路被中断，则连线到从库资料中心的客户端无法联络到主库，因此它们无法对资料库执行任何写入，也不能执行任何线性一致的读取。它们仍能从从库读取，但结果可能是陈旧的（非线性一致）。如果应用需要线性一致的读写，却又位于与主库网路中断的资料中心，则网路中断将导致这些应用不可用。
如果客户端可以直接连线到主库所在的资料中心，这就不是问题了，那些应用可以继续正常工作。但只能访问从库资料中心的客户端会中断执行，直到网路连线得到修复。
#### CAP定理
这个问题不仅仅是单主复制和多主复制的后果：任何线性一致的资料库都有这个问题，不管它是如何实现的。这个问题也不仅仅局限于多资料中心部署，而可能发生在任何不可靠的网路上，即使在同一个资料中心内也是如此。问题面临的权衡如下：[^v]
* 如果应用需要线性一致性，且某些副本因为网路问题与其他副本断开连线，那么这些副本掉线时不能处理请求。请求必须等到网路问题解决，或直接返回错误。（无论哪种方式，服务都 **不可用**）。
* 如果应用不需要线性一致性，那么某个副本即使与其他副本断开连线，也可以独立处理请求（例如多主复制）。在这种情况下，应用可以在网路问题解决前保持可用，但其行为不是线性一致的。
[^v]: 这两种选择有时分别称为 CP（在网路分割槽下一致但不可用）和 AP（在网路分割槽下可用但不一致）。但是，这种分类方案存在一些缺陷【9】，所以最好不要这样用。
因此，不需要线性一致性的应用对网路问题有更强的容错能力。这种见解通常被称为 CAP 定理【29,30,31,32】，由 Eric Brewer 于 2000 年命名，尽管 70 年代的分散式资料库设计者早就知道了这种权衡【33,34,35,36】。
CAP 最初是作为一个经验法则提出的，没有准确的定义，目的是开始讨论资料库的权衡。那时候许多分散式资料库侧重于在共享储存的丛集上提供线性一致性的语义【18】，CAP 定理鼓励资料库工程师向分散式无共享系统的设计领域深入探索，这类架构更适合实现大规模的网路服务【37】。对于这种文化上的转变，CAP 值得赞扬 —— 它见证了自 00 年代中期以来新资料库的技术爆炸（即 NoSQL）。
> #### CAP定理没有帮助
>
> CAP 有时以这种面目出现：一致性，可用性和分割槽容错性：三者只能择其二。不幸的是这种说法很有误导性【32】，因为网路分割槽是一种故障型别，所以它并不是一个选项：不管你喜不喜欢它都会发生【38】。
>
> 在网路正常工作的时候，系统可以提供一致性（线性一致性）和整体可用性。发生网路故障时，你必须线性一致性和整体可用性之间做出选择。因此，CAP 更好的表述成：在分割槽时要么选择一致，要么选择可用【39】。一个更可靠的网路需要减少这个选择，但是在某些时候选择是不可避免的。
>
> 在 CAP 的讨论中，术语可用性有几个相互矛盾的定义，形式化作为一个定理【30】并不符合其通常的含义【40】。许多所谓的 “高可用”（容错）系统实际上不符合 CAP 对可用性的特殊定义。总而言之，围绕著 CAP 有很多误解和困惑，并不能帮助我们更好地理解系统，所以最好避免使用 CAP。
CAP 定理的正式定义仅限于很狭隘的范围【30】，它只考虑了一个一致性模型（即线性一致性）和一种故障（网路分割槽 [^vi]，或活跃但彼此断开的节点）。它没有讨论任何关于网路延迟，死亡节点或其他权衡的事。因此，尽管 CAP 在历史上有一些影响力，但对于设计系统而言并没有实际价值【9,40】。
在分散式系统中有更多有趣的 “不可能” 的结果【41】，且 CAP 定理现在已经被更精确的结果取代【2,42】，所以它现在基本上成了历史古迹了。
[^vi]: 正如 “[真实世界的网路故障](ch8.md#真实世界的网路故障)” 中所讨论的，本书使用 **分割槽（partition）** 指代将大资料集细分为小资料集的操作（分片；请参阅 [第六章](ch6.md)）。与之对应的是，**网路分割槽（network partition）** 是一种特定型别的网路故障，我们通常不会将其与其他型别的故障分开考虑。但是，由于它是 CAP 的 P，所以这种情况下我们无法避免混乱。
#### 线性一致性和网路延迟
虽然线性一致是一个很有用的保证，但实际上，线性一致的系统惊人的少。例如，现代多核 CPU 上的记忆体甚至都不是线性一致的【43】：如果一个 CPU 核上执行的执行绪写入某个记忆体地址，而另一个 CPU 核上执行的执行绪不久之后读取相同的地址，并没有保证一定能读到第一个执行绪写入的值（除非使用了 **记忆体屏障（memory barrier）** 或 **围栏（fence）**【44】）。
这种行为的原因是每个 CPU 核都有自己的记忆体快取和储存缓冲区。预设情况下，记忆体访问首先走快取，任何变更会非同步写入主存。因为快取访问比主存要快得多【45】，所以这个特性对于现代 CPU 的良好效能表现至关重要。但是现在就有几个资料副本（一个在主存中，也许还有几个在不同快取中的其他副本），而且这些副本是非同步更新的，所以就失去了线性一致性。
为什么要做这个权衡？对多核记忆体一致性模型而言，CAP 定理是没有意义的：在同一台计算机中，我们通常假定通讯都是可靠的。并且我们并不指望一个 CPU 核能在脱离计算机其他部分的条件下继续正常工作。牺牲线性一致性的原因是 **效能（performance）**，而不是容错。
许多分散式资料库也是如此：它们是 **为了提高效能** 而选择了牺牲线性一致性，而不是为了容错【46】。线性一致的速度很慢 —— 这始终是事实，而不仅仅是网路故障期间。
能找到一个更高效的线性一致储存实现吗？看起来答案是否定的：Attiya 和 Welch 【47】证明，如果你想要线性一致性，读写请求的响应时间至少与网路延迟的不确定性成正比。在像大多数计算机网路一样具有高度可变延迟的网路中（请参阅 “[超时与无穷的延迟](ch8.md#超时与无穷的延迟)”），线性读写的响应时间不可避免地会很高。更快地线性一致演算法不存在，但更弱的一致性模型可以快得多，所以对延迟敏感的系统而言，这类权衡非常重要。在 [第十二章](ch12.md) 中将讨论一些在不牺牲正确性的前提下，绕开线性一致性的方法。
## 顺序保证
之前说过，线性一致暂存器的行为就好像只有单个数据副本一样，且每个操作似乎都是在某个时间点以原子性的方式生效的。这个定义意味著操作是按照某种良好定义的顺序执行的。我们将操作以看上去被执行的顺序连线起来，以此说明了 [图 9-4](../img/fig9-4.png) 中的顺序。
**顺序（ordering）** 这一主题在本书中反复出现，这表明它可能是一个重要的基础性概念。让我们简要回顾一下其它曾经出现过 **顺序** 的上下文：
* 在 [第五章](ch5.md) 中我们看到，领导者在单主复制中的主要目的就是，在复制日志中确定 **写入顺序（order of write）**—— 也就是从库应用这些写入的顺序。如果不存在一个领导者，则并发操作可能导致冲突（请参阅 “[处理写入冲突](ch5.md#处理写入冲突)”）。