2020/7/27 当frida来"敲"门
当frida来"敲"⻔
原创 队员编号006 酒仙桥六号部队 5⽉14⽇
这是 酒仙桥六号部队 的第 6 篇⽂章。
全⽂共计3156个字，预计阅读时⻓9分钟。
1
渗透测试瓶颈
⽬前，碰到越来越多的⼤客户都会将核⼼资产业务集中在统⼀的APP上，或者对⾃⼰⽐较
重要的APP，如⾃⼰的主业务，办公APP进⾏加壳，流量加密，投⼊了很多精⼒在移动端
的防护上。
⽽现在挖漏洞除了拿到shell以外，客户⼜要求可以尽可能的挖到核⼼业务系统的漏洞，
并将漏洞范围订在主域名，核⼼业务系统现在⼜基本集中在移动端，移动端现在都会进⾏
APP加壳，流量加密。这就导致⽆法进⾏平常渗透测试过程，像⽼⽣常谈的中间⼈攻击，
进⾏拦截，篡改数据包就很难进⾏。
接下来就尝试解决中间⼈攻击的问题，⽬标是
1.看到明⽂的request和response的数据包；
2.做到可以拦截，篡改数据包。
https://mp.weixin.qq.com/s/McipoCTgtY02_6dJvRe44g 1/16
2020/7/27 当frida来"敲"门
2
frida
frida是平台原⽣app的Greasemonkey，说的专业⼀点，就是⼀种动态插桩⼯具，可以
插⼊⼀些代码到原⽣app的内存空间去,（动态地监视和修改其⾏为），这些原⽣平台可以
是Win、Mac、Linux、Android或者iOS。⽽且frida还是开源的。
环境需要越狱的IOS或者ROOT的Android。安装的版本需要⼀致。
MAC：
越狱Iphone：
通过USB链接越狱⼿机，可以执⾏frida-ps -aU 就代表环境安装成功。
https://mp.weixin.qq.com/s/McipoCTgtY02_6dJvRe44g 2/16
2020/7/27 当frida来"敲"门
3
越狱检测绕过
启动⽬标APP时，APP⾃身会进⾏环境检测，如果处于越狱环境会提示如下：
https://mp.weixin.qq.com/s/McipoCTgtY02_6dJvRe44g 3/16
2020/7/27 当frida来"敲"门
点击“我知道了”就直接退出APP。
所以先尝试先绕过第⼀步越狱环境检测。可以先尝试搜索包含“jail,jeil,jb,break"关键
字的函数。
关于函数追踪可以使⽤frida-trace，如：
1 # Trace recv* and send* APIs in Safari
2 $ frida-trace -i "recv*" -i "send*" Safari
3
4 # Trace ObjC method calls in Safari
5 $ frida-trace -m "-[NSView drawRect:]" Safari
6
7 # Launch SnapChat on your iPhone and trace crypto API calls
8 $ frida-trace -U -f com.toyopagroup.picaboo -I "libcommonCrypto*"
https://mp.weixin.qq.com/s/McipoCTgtY02_6dJvRe44g 4/16
2020/7/27 当frida来"敲"门
burp的插件brida也⽀持对函数名进⾏检索hook，和"Jail"相关的越狱检测函数如下：
1 **** Result of the search of Jail
2 OBJC: +[BLYDevice isJailBreak]
3 OBJC: +[IFlySystemInfo isJailbroken]
4 OBJC: +[UIScreen _shouldDisableJail]
5 OBJC: +[UIStatusBarWindow isIncludedInClassicJail]
6 OBJC: -[_UIHostedWindow _isConstrainedByScreenJail]
7 OBJC: -[_UIRootWindow _isConstrainedByScreenJail]
8 OBJC: -[_UISnapshotWindow _isConstrainedByScreenJail]
9 OBJC: -[BLYDevice isJailbroken]
10 OBJC: -[BLYDevice setJailbrokenStatus:]
11 OBJC: -[RCCountly isJailbroken]
12 OBJC: -[UIClassicWindow _isConstrainedByScreenJail]
13 OBJC: -[UIDevice isJailbroken]
14 OBJC: -[UIStatusBarWindow _isConstrainedByScreenJail]
15 OBJC: -[UITextEffectsWindowHosted _isConstrainedByScreenJail]
16 OBJC: -[UIWindow _clampPointToScreenJail:]
17 OBJC: -[UIWindow _isConstrainedByScreenJail]
想将⽬标定在“OBJC: +[BLYDevice isJailBreak]”。
frida启动APP，并加载脚本的命令如下：
1 frida -U -f com.x.x -l js-scripts
js脚本编写可以看官⽅⽂档:
https://frida.re/docs/javascript-api/
1 //hook传⼊值，ObjC: args[0] = self, args[1] = selector, args[2-n] = argum
2 Interceptor.attach(myFunction.implementation, {
3 onEnter: function(args) {
4 var myString = new ObjC.Object(args[2]);
5 console.log("String argument: " + myString.toString());
https://mp.weixin.qq.com/s/McipoCTgtY02_6dJvRe44g 5/16
2020/7/27 当frida来"敲"门
6 }
7 });
8
9 //hook返回值，
10 Interceptor.attach(Module.getExportByName('libc.so', 'read'), {
11 onEnter: function (args) {
12 this.fileDescriptor = args[0].toInt32();
13 },
14 onLeave: function (retval) {
15 if (retval.toInt32() > 0) {
16 /* do something with this.fileDescriptor */
17 }}});
定义js脚本后，尝试hook出“OBJC:
+[BLYDevice isJailBreak]”的传⼊值和返回值。
1 function hook_specific_method_of_class(className, funcName)
2 {
3 var hook = ObjC.classes[className][funcName];
4 Interceptor.attach(hook.implementation, {
5 onEnter: function(args) {
6 // args[0] is self
7 // args[1] is selector (SEL "sendMessageWithText:")
8 // args[2] holds the first function argument, an NSString
9 console.log("\n\t[*] Class Name: " + className);
10 console.log("[*] Method Name: " + funcName);
11 //For viewing and manipulating arguments
12 //console.log("\t[-] Value1: "+ObjC.Object(args[2]));
13 //console.log("\t[-] Value2: "+(ObjC.Object(args[2])).toString()
14 console.log("\t[-]arg value "+args[2]);
15 Interceptor.attach(hook.implementation,
16 {
17 onLeave: function(retval) {
18 console.log("[*] Class Name: " + className);
19 console.log("[*] Method Name: " + funcName);
20 console.log("\t[-] Return Value: " + retval);
21 }}
https://mp.weixin.qq.com/s/McipoCTgtY02_6dJvRe44g 6/16
2020/7/27 当frida来"敲"门
22 );
23 }
24 });
25 }
26 //Your class name and function name here
27 hook_specific_method_of_class("BLYDevice", "- isJailbroken")
篡改后，发现未能绕过，可能不是这个函数做最终的逻辑判断，想到竟然都弹窗提示了，
和UI有关系。
那么可能是“OBJC: -[UIDevice isJailbroken]这个类，最终构造绕过越狱检测代码如
下：
1 if (ObjC.available)
2 {
3 try
4 {
5 var className = "UIDevice";
6 var funcName = "- isJailbroken";
7 var hook = eval('ObjC.classes.' + className + '["' + funcName +
8 Interceptor.attach(hook.implementation,
9 {
10 onLeave: function(retval) {
11 console.log("[*] Class Name: " + className);
12 console.log("[*] Method Name: " + funcName);
13 console.log("\t[-] Return Value: " + retval);//输出原本的返回值
14 var newretval = ptr("0x0")
https://mp.weixin.qq.com/s/McipoCTgtY02_6dJvRe44g 7/16
2020/7/27 当frida来"敲"门
15 retval.replace(newretval)//替换新的返回值
16 console.log("\t[-] New Return Value: " + newretval)
17 }}