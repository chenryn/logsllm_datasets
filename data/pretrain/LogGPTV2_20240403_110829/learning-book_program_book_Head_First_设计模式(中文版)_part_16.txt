这是任何咖啡都必须具备的，所以在Beverage类中加上了getSize（）与
setSize)。他们也希望调料根据咖啡容量收费，例如：小中大杯的咖啡
加上豆浆，分别加收0.10、0.15、0.20美金。
如何改变装饰者类应对这样的需求？
你现在的位置，
66
---
## Page 136
JavaIO中的装饰者
真实世界的装饰者：JavaI/0
javaio包内的类太多了，简直是.…….“排山倒海”。你第一次（还有第二次和第
三次）看到这些API发出“哇”的惊叹时，放心，你不是唯一受到惊吓的人。现
在，你已经知道装饰者模式，这些I/O的相关类对你来说应该更有意义了，因为其
中许多类都是装饰者。下面是一个典型的对象集合，用装饰者来将功能结合起来，
以读取文件数据：
供读取的文本文件
lool
lloloo
001010
ololll
FileJnpuSteam是被装锦的“组件”。Java
3/0程序库提供了几个组件，包括了
LineNamberJnpatStream也是
FileJnputStteam,SttingBusferJnputStteam,
一个具体的“装饰老”。它
Busered3nputStream是一个具体
ByteArnayJmputStteam*….等。这些类都提
加上了计算行数的能力。
的“装饰老”，它加入两种行
供了最基本的字节读取功能。
为：利用缓冲输入来改进性能：
用一个readline(）方法（用来一次
读取一行文本输入数据）来增
强接口。
BufferedInputStream及LineNumberlnputStream都扩展自
FilterlnputStream，而FilterlnputStream是一个抽象的装饰类。
PDG
100
第3章
---
## Page 137
装饰者模式
装饰java.io类
这是我们的抽象组件。
FiltetnpatStteam是-
InputStream
个抽象装饰者。
FilelnputStream
StringBufferinputStream
ByteArraylnputStream
FilterinputStream
BufferedinputStream
DatalnputStream
这些nputStream类是可以被装
饰老包起来的具体组件。还有
少数类没有显示在这里，例如
终子，这里有了我们所有的具体装饰者。
ObjectJnputStream
你可以发现，和星巴兹的设计相比，java.io其实没有多大的差异。我
们把java.ioAPI范围缩小，让你容易查看它的文件，并组合各种“输
人”流装饰者来符合你的用途。
你会发现“输出”流的设计方式也是一样的。你可能还会发现Reader/
似（虽然有一些小差异和不一致之处，但是相当雷同，所以你应该可以
了解这些类）。
但是JavaI/O也引出装饰者模式的一个“缺点”：利用装饰者模式，常
常造成设计中有大量的小类，数量实在太多，可能会造成使用此API程
序员的困扰。但是，现在你已经了解了装饰者的工作原理，以后当使用
别人的大量装饰的API时，就可以很容易地辨别出他们的装饰者类是如
何组织的，以方便用包装方式取得想要的行为。
PD
你现在的位置
101
---
## Page 138
编写自己的JavaI/O装饰者
编写自己的JavaI/0装饰者
你已经知道装饰者模式，也看过Java1/0类围，
应该已经准备好编写自己的输入装饰者了。
没问题，我只要扩展
FilterlnputStream类，并覆
这个想法怎么样：编写一个装饰者，把输入
盖read()方法就行了！
流内的所有大写字符转成小写。举例：当读
取“IknowtheVecoratorPatterntherefore
IRULE!”，装饰者会将它转成“iknoWthe
decoratorpatternthereforeirule!"
首先，扩展Fitter3mputSteam，这是所
不要忘了导入javu.io
有JnputStream的抽象装饰者。
(这里省略了)
public class LowerCaseInputStream extends FilterInputStream {
public LowerCaseInputStream(InputStream in)(
super(in);
public int read() throws IOException (
int c = super.read() ;
return (c ==
-1 ？c :Character.toLowerCase((char)c)）
public int read(byte[] b, int offset, int len) throws IOException
int result = super.read(b, offset, len);
for （int i = offset;i= 0){
滤器装饰它。
System.out.print ((char) c) ;
in.close ();
}catch (IoException e）{
e.printStackTrace ();
只用流来读取字符，一直到文件
尾端。每读一个字符，就马上将
test.txt file
它显示出来。
A
你需要做出这个
运行看看：
文件。
java InputTest
know the decorator pattern therefore i rule!
众
你现在的位置
103
---
## Page 140
装饰者访谈
模式访谈
本周访问：
装饰者的告白
HeadFirst：欢迎装饰者模式，听说你最近情绪有点差？
装饰者：是的，我知道大家都认为我是一个有魅力的设计模式，但是，你知道吗？我也有自己
的困扰，就和大家一样。
HeadFirst：愿意让我们分担一些你的困扰吗？
装饰者：当然可以。你知道我有能力为设计注入弹性，这是母庸置疑的，但我也有“黑暗
面”。有时候我会在设计中加人大量的小类，这偶尔会导致别人不容易了解我的设计方式。
HeadFirst：你能够举个例子吗？
装饰者：以JavaI/O库来说，人们第一次接触到这个库时，往往无法轻易地理解它。但是如果
他们能认识到这些类都是用来包装InputStream的，一切都会变得简单多了。
HeadFirst：听起来并不严重。你还是一个很好的模式，只需要一点点的教育，让大家知道怎么
用，问题就解决了。
装饰者：恐怕不只这些，我还有类型问题。有些时候，人们在客户代码中依赖某种特殊类型，
然后忽然导入装饰者，却又没有周详地考虑一切。现在，我的一个优点是，你通常可以透明地
插人装饰者，客户程序甚至不需知道它是在和装饰者打交道。但是，如我刚刚所说的，有些代
码会依赖特定的类型，而这样的代码一导人装饰者，！出状况了！
HeadFirst：这个嘛，我相信每个人都必须了解到，在插人装饰者时，必须要小心谨慎。我不认
为这是你的错！
装饰者：我知道，我也试着不这么想。我还有一个问题，就是采用装饰者在实例化组件时，将
增加代码的复杂度。一旦使用装饰者模式，不只需要实例化组件，还要把此组件包装进装饰者
中，天晓得有几个。
HcadFirst：我下周会访谈工厂（Factory）模式和生成器（Builder）模式，我昕说他们对这个
问题有很大的帮助。
装饰者：那倒是真的。我应该常和这些家伙聊聊。
HeadFirst：我们都认为你是一个好的模式，适合用来建立有弹性的设计，维持开放一关闭原
则。你要开心一点，别负面思考。
装饰者：我尽量吧，谢谢你！
104第3章
---
## Page 141
装饰者模式
设计箱内的工具
要点
本章已经接近尾声，你的工具箱内又多了一个新的
原则和一个新的模式。
继承属于扩展形式之一，但不
见得是达到弹性设计的最佳方
式。
00基础
在我们的设计中，应该允许行
为可以被扩展，而无须修改现
抽象
有的代码。
00原则
封装
组合和委托可用于在运行时动
型
态地加上新的行为。
封装变化
继承
除了继承，装饰者模式也可以
多用组合，少用继承
让我们扩展行为。
针对接口编程，不针对实现
装饰者模式意味着一群装饰者
编程
类，这些类用来包装具体组
件。
为交互对象之间的松耦合设
现在有了开放一关闭原则引导
装饰者类反映出被装饰的组件
计而努力
我们。我们会努力地设计系
类型（事实上，他们具有相同
对扩展开放，对修改关闭。
统，好让关闭的部分和新扩
的类型，都经过接口或继承实
展的部分隔离。
现）。
装饰者可以在被装饰者的行为
前面与/或后面加上自己的行
00模式
为，甚至将被装饰者的行为
整个取代掉，而达到特定的目
策略
观欧去楼式在对象少间会一过
的。
来.
多
装饰者模式—动态地将责任附
你可以用无数个装饰者包装
算法
变
个组件。
加到对象上。想要扩展功能，装饰者
装饰者一般对组件的客户是透
提供有别于继承的另一种选择。
明的，除非客户程序依赖于组
件的具体类型。
装饰者会导致设计中出现许多
小对象，如果过度使用，会让
这是第一个符合开放一关阅原则的模
程序变得很复杂。
式。真的是第一个喝：有没有其他曾
经用过的遵循此原则的模式？
你现在的位置
105
---
## Page 142
习题解答
习题解答
public class Beverage {
//为milkCost.soyCost、mochaCost
//和whipCost声明实例变量。
public class DarkRoast extends Beverage 
//为milk.soy、mocha和whip
//声明getter与setter方法。
public DarkRoastO {
description = Most Excellent Dark Roast :
public double cost( {
{
float condimentCost = O.0:
public double cost( 
if (hasMilk()) {
condimentCost+= milkCost;
return 1.99 + super.cost():
if (hasSoy())(
condimentCost += soyCost;
if (hasMocha())(
condimentCost += mochaCost;
if (hasWhipO)(
condimentCost += whipCost;
return condimentCost;
新咖啡师傅特训
“有双摩卡、豆浆、奶泡的House Blend咖啡”
②Whip调用Mocha的cost()。
Mocha调用另一个Mocha的costO。
接着，Mocha调用Soy的costO。
者Whipcost()。
最后，Soy调用HouseBlend的
costO.
HouseBlend的costO返
同0.89给Soy后，离开
本层。
$1.54
10
cost()
.20
Soy的cost把HouseBlend返
Mocha
S
网的结果加上0.15，返回给
Mocha后，离开本层。
③第二个Mocha的costO加上
0.20，返回结果，离开本层。
最后，Whip的costO把Mocha返
第一个Mocha的costO加上0.20.
回的价钱加上0.10，得到最终
返回结果，离开本层。
价钱为S1.54。
106
第3章
---
## Page 143
装饰者模式
习题解答
我们在星巴兹的朋友决定开始在菜单上加上咖啡的容量大小，供顾客可以选择小杯（tall）、
中杯（grande）、大杯（venti）。星巴兹认为这是任何咖啡都必须具备的，所以在Beverage类
中加上了getSize(与setSize(。他们也希望调料根据咖啡容量收费，例如：小中大杯的咖啡加
上豆浆，分别加收0.10、0.15、0.20美金。
如何改变装饰者类应对这样的需求？
public class Soy extends CondimentDecorator{
Beverage beverage;
现在要托setSixe（）传播到被包装的饮
public Soy(Beverage beverage)(
料。因为所有的调科装饰老都金用到
this.beverage = beverage;
这个方法，所以也应该把它移到抽象
类中。
public int getSize(){
return beverage.getSize ();
public String getDescription() {
return beverage.getDescription() +，Soy;
public double cost(){
double cost = beverage.cost();
在这里取得容量大小（全都传
if (getSize() == Beverage.TALL){
播到具体的饮料），然后加上
cost+=.10;
适当的价钱。
}else if (getSize()
== Beverage.GRANDE) (
cost +=.15;
else if (getSize() == Beverage.VENTI) {
cost +=.20;
return cost;
你现在的位置
107
---
## Page 144
PDG
---
## Page 145
4工厂模式
烘烤00的精华
准备好开始烘烤某些松耦合的OO设计。除了使用new操作符之外，还有
更多制造对象的方法。你将了解到实例化这个活动不应该总是公开地进行，也会认识到
初始化经常造成“耦合”问题。你不希望这样，对吧？读下去，你将了解工厂模式如何
PDG