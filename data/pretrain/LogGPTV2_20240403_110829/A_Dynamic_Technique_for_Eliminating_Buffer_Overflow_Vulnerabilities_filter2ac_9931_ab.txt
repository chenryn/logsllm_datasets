### Memory Allocation and Pointer Arithmetic

- **Memory Allocation**: A struct or variable can be allocated either on the stack or the heap, or it can be a value returned by `malloc`. All base pointers are assumed to be within bounds. The intended data unit of the base pointer is the corresponding array, struct, variable, or allocated block of memory to which it refers.
  
- **Pointer Arithmetic**: Pointer arithmetic expressions consist of a starting pointer (e.g., a pointer variable or the name of a statically allocated array) and an offset. The value of the expression is derived from the starting pointer. A derived pointer is in bounds if and only if the starting pointer is in bounds and the derived pointer points into the same data unit as the starting pointer. Regardless of where the starting and derived pointers point, they share the same intended data unit.

- **Pointer Variables**: A pointer variable is in bounds if and only if it was assigned to an in-bounds pointer. It has the same intended data unit as the pointer to which it was assigned.

Jones and Kelly distinguish between valid and invalid out-of-bounds pointers. A valid out-of-bounds pointer points to the next byte after its intended data unit, while an invalid out-of-bounds pointer points to an address not within its intended data unit. They implement this distinction by padding each data item with an extra byte. A valid out-of-bounds pointer points to this extra byte; all invalid out-of-bounds pointers have the value `ILLEGAL` (-2). This distinction supports code that uses valid out-of-bounds pointers in loop termination conditions. Jones and Kelly also instrument the code to check the status of each pointer before dereferencing it; attempting to dereference an out-of-bounds pointer causes the program to halt with an error.

However, their scheme does not support programs that use pointer arithmetic to obtain a pointer past the end of the intended data unit and then jump back into the data unit to access stored data. While this behavior is undefined according to the ANSI C standard, many C programs use this technique. Ruwase and Lam's extension addresses this issue by using out-of-bounds objects (OOBs) to support such behavior. In standard C compilation, in-bounds pointers refer directly into their intended data unit. When the program computes an out-of-bounds pointer, Ruwase and Lam's enhancement generates an OOB object that contains the starting address of the intended data unit and the offset from the start of that data unit. Instead of pointing to an arbitrary memory location or containing the value `ILLEGAL` (-2), the pointer points to the OOB object. The generated code checks for the presence of OOB objects during pointer dereferences and halts the program if it attempts to dereference an out-of-bounds pointer. Additionally, the generated code uses OOB objects to track data unit offsets and translate pointers derived from out-of-bounds pointers back into in-bounds pointers if the new pointer jumps back inside the intended data unit. This enhancement significantly increases the range of programs that can execute without terminating due to failed memory error checks. Unlike the Jones and Kelly scheme, it maintains enough information to determine the memory block and offset for each out-of-bounds pointer.

### Continuation Code Implementation

Our implementation of the write continuation code stores the written value in a hash table indexed by the memory block and offset of the write. For out-of-bounds reads, it looks up the accessed memory block and offset and returns the stored value if it is present in the hash table. If there is no indexed value, it returns a default value.

To avoid memory leaks, we manage the memory used to store out-of-bounds writes in the hash table. Our implementation allocates a fixed amount of memory to the hash table, effectively turning it into a cache of out-of-bounds writes. We use a least recently used (LRU) replacement policy. While this policy can lead to situations where an out-of-bounds read attempts to access a discarded write entry, our experimental results show that the distance (measured in out-of-bounds memory accesses) between successive accesses to the same entry in the hash table is relatively small. Our set of applications never attempts to access a discarded write entry. We chose a fixed-size cache to eliminate the possibility of denial of service attacks that could exhaust available memory by generating and storing a large number of out-of-bounds writes.

Our philosophy views out-of-bounds accesses as normal, albeit uncommon, events in program execution. However, we acknowledge that programmers may want to be informed of these accesses to increase the size of the accessed memory block or change the program to eliminate them. Our compiler can optionally augment the generated code to produce a log that identifies each out-of-bounds access, allowing programmers to locate and eliminate them.

### Experimental Evaluation

We implemented a compiler that generates code for boundless memory blocks and evaluated several widely-used open-source programs with out-of-bounds memory accesses. Many of these programs are key components of the Linux-based open-source interactive computing environment, and many of the out-of-bounds accesses correspond to exploitable buffer overflow security vulnerabilities.

#### Methodology

We evaluated three different versions of each program: the Standard version compiled with a standard C compiler (vulnerable to out-of-bounds accesses), the Check version compiled with the CRED safe-C compiler (terminates with an error message at the first out-of-bounds access), and the Boundless version compiled with our compiler (stores out-of-bounds writes in a hash table and returns values for corresponding out-of-bounds reads). We evaluated three aspects of each program's behavior:

- **Security and Resilience**: We used a workload with input that triggers known out-of-bounds memory accesses, typically exploiting a security vulnerability. We observed the behavior of the different versions on this workload, focusing on how the programs execute after the out-of-bounds accesses.
  
- **Performance**: We used a workload that both the Standard and Boundless versions can execute successfully to measure request processing time. We instrumented the program to record the start and stop times for processing requests and calculated the processing time.

- **Standard Usage**: We used the Boundless version of each program in our normal computational environment, presenting it with a workload intended to simulate standard usage and including attacks that trigger out-of-bounds accesses. We focused on the acceptability of continued execution of the Boundless version.

We ran all the programs on a Dell workstation with two 2.8 GHz Pentium 4 processors, 2 GB of RAM, and Red Hat 8.0 Linux.

#### Sendmail

Sendmail is the standard mail transfer agent for Linux and other Unix systems. It is typically configured to run as a daemon, creating a new process to service each new mail transfer connection. This process executes a simple command language that allows the remote agent to transfer email messages to the Sendmail server, which may deliver the messages to local users or forward them to other Sendmail servers. Versions of Sendmail earlier than 8.11.7 and 8.12.9 have a memory error vulnerability triggered by a carefully crafted email message, causing the server to execute injected code with root permissions.

- **Security and Resilience**: We worked with Sendmail version 8.11.6. The Standard version executes out-of-bounds writes and corrupts its call stack. The Check version is disabled by a memory error when the Sendmail daemon wakes up to check for incoming messages. The Boundless version is not vulnerable to the attack; it stores out-of-bounds writes in the hash table and continues to process subsequent Sendmail commands successfully.

- **Performance**: Figure 2 presents the request processing times for the Standard and Boundless versions of Sendmail. The Receive Small and Send Small requests handle a 4-byte message, while the Receive Large and Send Large requests handle a 4 KB message. We performed each request at least twenty times and report the means and standard deviations of the request processing times.

| Request          | Standard (ms) | Boundless (ms) | Slowdown |
|------------------|---------------|----------------|----------|
| Receive Small    | 15.6 ± 2.9%   | 72.9 ± 2.1%    | 4.7      |
| Receive Large    | 16.8 ± 4.3%   | 77.9 ± 0.6%    | 4.6      |
| Send Small       | 20.4 ± 3.3%   | 86.7 ± 2.4%    | 4.2      |
| Send Large       | 21.5 ± 5.7%   | 88.8 ± 1.9%    | 4.1      |

- **Standard Usage**: We installed the Boundless version of Sendmail and processed a set of one thousand messages, including 960 valid messages and 40 attack messages. Sendmail successfully executed through the memory errors and correctly processed all messages. Our logs indicate that Sendmail generates a steady stream of memory errors during normal execution, particularly when the daemon wakes up to check for work. We logged 12,017 out-of-bounds memory accesses, all of which accessed values previously stored in the hash table.

#### Pine

Pine is a widely used mail user agent (MUA) distributed with the Linux operating system. It allows users to read, fetch, compose, and forward email messages. We used Pine 4.44, distributed with Red Hat Linux version 8.0, which has out-of-bounds accesses associated with parsing certain legal From fields.

- **Security and Resilience**: Our security and resilience workload includes an email message with a From field that triggers a memory error. The Standard version corrupts its heap and aborts, while the Check version detects the memory error and terminates with an error message. Both versions prevent the user from using Pine to read mail until the problematic From field is manually removed. The Boundless version, however, continues to execute through the out-of-bounds accesses, enabling the user to process their mail without errors.

- **Performance**: Figure 3 presents the request processing times for the Standard and Boundless versions of Pine. The Read request displays a selected empty message, the Compose request brings up the user interface to compose a message, and the Move request moves an empty message from one folder to another. We performed each request at least twenty times and report the means and standard deviations of the request processing times.

| Request          | Standard (ms) | Boundless (ms) | Slowdown |
|------------------|---------------|----------------|----------|
| Read             | 0.287 ± 7.1%  | 2.19 ± 1.7%    | 7.6      |
| Compose          | 3.44 ± 1.8%   | 1.34 ± 10.4%   | 8.9      |
| Move             | 0.385 ± 4.3%  | 1.90 ± 10.0%   | 1.4      |

The Boundless version is substantially slower for the Read and Compose requests. However, because Pine is an interactive program, its performance is acceptable as long as it feels responsive to users. Assuming a pause perceptibility threshold of 100 milliseconds, the application of boundless memory blocks should not degrade the program's interactive feel. Our subjective experience confirms this expectation.