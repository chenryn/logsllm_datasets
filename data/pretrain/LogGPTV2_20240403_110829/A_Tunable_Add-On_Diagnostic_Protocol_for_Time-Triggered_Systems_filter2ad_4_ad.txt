Transient rate = 10
Transient rate = 10
Transient rate = 10
-2
-3
-4
 7
 6
 5
 4
 3
 2
 1
e
m
i
t
l
a
v
i
r
r
a
r
r
e
t
n
i
x
a
M
)
s
r
u
o
h
(
s
t
l
u
a
f
d
e
t
a
e
r
r
o
c
r
o
f
l
10
2
10
3
10
4
10
5
10
6
10
 0
7
10
Reward threshold R
Figure 3: Setting R with rounds of 2.5ms
Domain
Criticality class
Automotive
Safety Critical (SC)
Safety Relevant (SR)
Non Safety Relevant (NSR)
Example
X-by-wire
Stability control
Door control
20 − 50ms
100 − 200ms
500 − 1000ms
Aerospace
Safety Critical (SC)
High Lift, Landing Gear
50ms
Table 2: Results of the experimental tuning of the p/r algorithm
Tolerated outage
Crit. lvl. (si)
P
R
TDMA
40
6
1
1
197
106
2.5ms
17
106
2.5ms
the maximum tolerated transient outage time before a re-
covery action is activated in order to restore the availability
of the service or to reach a safe state. Such outage is the
sum of the diagnostic latency and the recovery time. Tol-
erated transient outages for different classes of automotive
and aerospace applications are shown in Table 2.
The automotive domain depicts a varied range of critical-
ity classes. Safety critical functionalities are necessary for
the physical control of the vehicle with strict reactivity con-
straints, e.g., X-by-wire. Recovery actions must preserve
the availability of the (possibly degraded) service. Safety
relevant functionalities support the driver, e.g., the Elec-
tronic Stability Control and the Driver Assistant Systems,
such as the collision warning and avoidance system. They
are not necessary for the control of the car but the driver
must know if they are unavailable. Finally, there are Non
Safety relevant functionalities such as comfort and enter-
tainment subsystems. In the aerospace domain, only safety
critical functionalities are connected to the backbone. The
High Lift System adds lift during the ﬂight and is related to
the control of ﬂaps. The Landing Gear System controls the
retractable wheels used for landing.
Both the diagnostic and the more complex membership
service are fast enough to satisfy the requirements of the
highest criticality class considered. However, we want to
delay the isolation of faulty nodes as much as possible to
maximize the availability in presence of transient faults.
The diagnostic latency can be tuned by setting the penalty
threshold and criticality levels according to the application
requirements. Hence, we injected continuous faulty bursts
and observed the value of the penalty counter reached when
the maximum diagnostic latency for each criticality class
was reached. We assumed that once a faulty node is isolated
by the diagnostic protocol, each obedient node can instan-
taneously apply the necessary recovery actions, discounting
further delays. Each experiment was repeated 100 times. If
classes c1, . . . , ci have corresponding penalties p1, . . . , pi,
we set P = max(p1, . . . , pi) and the criticality of each
class to si = ⌈P/pi⌉. To satisfy the requirements on the
diagnostic latency, the criticality increment for a node was
Table 3: Abnormal transient scenarios
Scenario
Auto (blinking light)
Aero (lightning bolt)
Burst
10ms
40ms
40ms
40ms
TTReapp.
# Inj.
500ms
160ms
290ms
500ms
50
1
1
9
set as the maximum si of the applications it hosts. Critical-
ity levels are stored in the vector criticalities used by the
p/r algorithm. The penalty thresholds and criticality levels
for the automotive and aerospace setups are shown in Ta-
ble 2. We observed in both setups that even for Safety Crit-
ical applications it is possible to wait for some round before
isolating faulty nodes. This enhances the capability of the
system of not overreacting to transient faults.
Diagnosis under adverse external conditions. We have
shown how we tuned the parameters of the p/r algorithm
under normal external conditions. The next step was to
try to evaluate the capability of the algorithm to guarantee
node availability under adverse external conditions, charac-
terized by an abnormal rate of transient faults. For this pur-
pose we considered two unfavorable but common scenar-
ios in the automotive and aerospace settings where external
faults are highly frequent and will likely be considered as
intermittent faults. For the automotive setting we consid-
ered a blinking light causing periodic electrical instabilities
on the bus due to an open relay, while for aerospace we con-
sidered a lighting bolt producing a sequence of instabilities
with increasing time to reappearance. Systems are designed
and tested to tolerate such transient behaviors without tak-
ing speciﬁc recovery actions, therefore isolations should be
avoided. The length of the faulty bursts, the times to reap-
pearance and the number of instances of the burst are shown
in Table 3. We reproduced these scenarios in 100 exper-
iments and observed if and after how much time healthy
nodes were incorrectly isolated.
In both cases, different transient burst are considered as
correlated by the p/r algorithm. The results for the automo-
tive and aerospace setting are shown in Table 4. The func-
tionalities with lower criticalities can tolerate longer periods
of abnormal transient behavior. The use of a p/r algorithm
with varied criticality levels gives advantages in terms of
availability. In fact, if nodes were immediately isolated after
the ﬁrst fault appearance, a single abnormal transient period
would result in the isolation of all the nodes in the system
and would entail a restart of the whole system. However,
even using our p/r algorithm, the availability of safety criti-
cal functionalities can be harmed by relatively short distur-
bances in both the experimental setting. From this data we
Table 4: Time to incorrect isolation
Setting
Criticality class
Time to isolation
Automotive
Aerospace
SC / SR / NSR
0.518 / 4.595 / 24.475sec
SC
0.205sec
can conclude that the detection of intermittent faults could
be sacriﬁced for the sake of availability for those nodes im-
plementing safety critical functions. For example, isolated
nodes could be kept under observation, collecting rewards if
a fault-free behavior is observed and reintegrating the node
if a speciﬁc reward threshold for reintegration is reached.
10. Portability Issues for Varied TT Platforms
One of our main design drivers was to deﬁne a diagnos-
tic/membership protocol that is a tunable and portable add-
on application level module, rather than a static and built-in
system level feature. Our experience has conﬁrmed that this
approach is viable. Our protocol only uses detection capa-
bilities that are provided by any TT platform. The concept
of validity bit abstracts a number of platform speciﬁc error
detection mechanisms, whose outcome can normally be ac-
cessed by applications using the basic API provided by the
operating system of the host node (see Sec. 8).
Another important issue was not to require interactions
or to interfere with other applications. For this reason, local
detection of faults is implicitly performed by monitoring the
exchange of diagnostic messages among diagnostic jobs. To
ease the integration, the bandwidth requirement of the pro-
tocol is limited. In our prototype diagnostic messages were
as small as N bits.
Finally, we avoided imposing strong constraints on node
scheduling. The read and send alignments ensure that all
diagnostic jobs use consistent data for any schedule, pro-
vided that the diagnostic jobs are executed at every round.
To achieve that, they require the application to know some
parameters that are directly related to the node scheduling,
such as l{1,..,N } and send curr round{1,..,N } (see Sec. 5).
If a static scheduling policy is used, this information is con-
stant and known at design time. In case of dynamic schedul-
ing we require the OS to provide this information to the ap-
plication at run-time.
The relaxed constraints on the scheduling of the diagnos-
tic jobs lead to a detection latency, i.e., the time necessary
to consistently detect a faulty slot, of four TDMA rounds in
the worst case, which is suboptimal. However, if needed, it
is possible to trade off ﬂexibility for a shorter latency. By
constraining the internal node scheduling, in fact, we can
reduce the detection latency down to one round for the di-
agnostic protocol and two rounds for the membership proto-
col. In this variant of the protocol, each node keeps sending
its local syndrome at each sending slot, but the analysis is
executed right after each slot and refers to a single previous
slot. After one round all local syndromes necessary to diag-
nose a slot are collected, and two diagnostic rounds would
be sufﬁcient to execute two instances of the modiﬁed diag-
nostic protocol, i.e., one instance of the membership proto-
col. All the properties of the protocol are preserved in this
variant, at the price of making portability more complex.
11. Conclusions
We have presented a generic diagnostic protocol that can
be added on as a middleware layer on top of any TT plat-
form. It tolerates multiple benign and malicious faults and
aims to maximize node availability by using a p/r algorithm
even under abnormal transient disturbances. We have ex-
tended it to be usable as a membership protocol without
using additional resources. Both variants of the protocol
have been experimentally validated. We tuned the p/r al-
gorithm under realistic automotive and aerospace settings,
and addressed open issues of characterization of intermit-
tent faults, determination of the severity of faults and diag-
nosis under adverse external conditions.
References
[1] FlexRay Communication System, Protocol Speciﬁcation v.
2.1. http://www.ﬂexray.com/speciﬁcation request v21.php
[2] H. Kopetz and G. Grunsteidl. TTP - A Protocol for Fault
Tolerant Real Time Systems. IEEE Computer, 27(1), pp. 14–
23, 1994.
[3] K. Hoyme and K. Driscoll. SAFEbus. IEEE Aerospace and
Electronic Systems Magazine, 8(3), pp. 34-39, 1993.
[4] C. Constantinescu.
Impact of Deep Submicron Technology
on Dependability of VLSI Circuits. DSN, pp. 205–209, 2000.
[5] A. Bondavalli et al. Discriminating Fault Rate and Persistency
to Improve Fault Treatment. FTCS, pp. 354–362, 1997.
[6] A. Bondavalli et al. Threshold-Based Mechanisms to Dis-
criminate Transient from Intermittent Faults. IEEE Trans. on
Computers, 49(3), pp. 230–245, 2000.
[7] M. Seraﬁni et al. On-line Diagnosis and Recovery: On the
Choice and Impact of Tuning Parameters. TR-TUD-DEEDS-
05-05-2006, 2006.
[8] F.P. Preparata at al. On the Connection Assignment Problem
of Diagnosable Systems. IEEE Trans. on Electronic Comput-
ers, 16(12), pp. 848-854, 1967.
[9] M. Malek. A Comparison Connection Assignment for Diag-
nosis of Multiprocessor Systems, ISCA, pp. 31–36, 1980.
[10] M. Barborak et.al, The Consensus Problem in Fault Tolerant
Computing, ACM Surveys, vol. 25, pp. 171–220, Jun. 1993.
[11] C. Walter et al. Formally Veriﬁed On-line Diagnosis. IEEE
TSE, 23(11), pp. 684–721, 1997.
[12] M.A. Hiltunen. Membership and System Diagnosis. SRDS,
pp. 208-217, 1995.
[13] F. Cristian. Reaching Agreement on Processor-group Mem-
bership in Synchronous Distributed Systems. Distributed
Computing, 4(4), pp. 175–187, 1991.
[14] G. Bauer and M. Paulitsch. An Investigation of Membership
and Clique Avoidance in TTP/C. SRDS, pp. 118–124, 2000.
[15] P.D. Ezhilchelvan and R. Lemos. A Robust Group Member-
ship Algorithm for Distributed Real Time Systems. RTSS, pp.
173-179, 1990.
[16] C. Walter et al. Continual On-line Diagnosis of Hybrid
Faults. DCCA, pp. 150-166, 1994.
[17] A. Ademaj et al. Evaluation of Fault Handling of the Time
Triggered Architecture with Bus and Star Topology. DSN, pp.
123-132, 2003.
[18] P. Lincoln and J. Rushby. A Formally Veriﬁed Algorithm for
Interactive Consistency under Hybrid Fault Models. FTCS,
pp. 402-411, 1993.