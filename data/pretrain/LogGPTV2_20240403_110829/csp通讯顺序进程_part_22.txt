143
---
## Page 167
L3若Q是右卫的，则（P>Q）无活锁。
L2若P是左卫的，则（P》Q）无活锁。
而且一经外部通信，（P》Q）的后续行为就不会发散，但是这
止的循环。一个不太明显的例子是
散现象（参见3.5.1节和3.8节）可见于下列例子。最明显的
X1 
上越推理完至适用于》的第二个运算对象的右卫性。
P是左卫的。
L1P的定义式中的每个递归式，若都是卫以左方输大命合，则
由P的上下文经常不难证明其左卫性。
数值：更形式地，我们定义
刻向右方输出的序列的长度，都不超过左方输入的序列的某个函
从左方输入的通信事件。为保证这一点，我们需要证明，任何时
是证明，P在向右方输出无穷消息串的整个过程中，必须散布有
种无穷的内部通信确实是可能的。
性；尽管一有机会就可供选择在左通道和右通道上的外部通信，
在这个例子中，（P》Q）的发散性仅仅来自无穷内部通信的可能
为它是一个不做任何事情，而叉消耗无穷尽计算资源的，永不停
是
144
证明（P》Q）无活锁的简单方法是证明P是左卫的，也就
由L1，下列进程是左卫的
举例
“P是左卫的”=3f.Psat（#right≤f(left))
COPY,
Q=(left?x→Q|right11Q1)
P=(right!1-P|left?x-→P1(x))
DOUBLE, SQUASH, BUFFER
Q=(left?x-Q)
P=(right!1→P)
---
## Page 168
X1DOUBLE sat right≤double*(left)
则(P>Q) sat 3s. S(left,s)AT(s,righ!)
除其存在性外，别的一无所知。我们还需避开活锁的危险。这
顺序相连时，左运算对象产生的right序列相等于右运算对象所消
道上输出的消息序列间的关系，如 S(left，right)。当两个导管
4.4.4描述
下，
X2按照定义，下列进程也是左卫的，因为
各进程定义详见4.1节X1，X2，X5，X9。
不必提及拒绝集。
及Q所保持的关系的复合。由于算子》不会导致导管的死锁，故
这个规则说明，（P>Q）所保持的left和right间的关系，就是P
且若P是左卫的，或Q是右卫的
L1若P sat S(left,right)
样，我们就有规则
耗的left序列：而且这个公共序列是要屏蔽的。对这个公共序列
故
导管的描述，通常可表示成左通道上输入的消息序列和右通
也可从左方输入任意多个消息。
BUFFER不是右卫的，因为它在不向右方输出消息的情况
(DOUBLE>DOUBLE) sat 3s. (s≤double*(left)
DOUBLE既是左卫的，又是右卫的。
举例
Q sat T(left,right)
UNPACK sat #right≤#(~/left)
PACK sat #right≤#left
=right≤doubte*(double*(left))
145
广
口
---
## Page 169
4.4.5缓存和协议
而1.10.2节中更简单的法则L6不能在这里使用，因为这个递归式
因此
由于右运算对象是右卫的，根据L1和假设
故
我们知道
假设
我们希望证明
不是明显的卫式。.
这样，由递归进程的证明规则（3.7.1节L8），
X2
146
(X>(right!x-→COPY)) sat(3s.(#left≥nVs≤teft)
使用>和递归式给出缓存的另一种定义
一个缓存是一种进程，它向右方输出从左方输入的消息，输
BUFF=μX.(left?x→(X>(right!x-→COPY)))
left?x-(-…-)sat right= left=<>
(right1x-COPY)sat((right =left =<>
Xsat#left≥nVright≤left
BUFF sat (right≤left)
COPY sat right≤left
>#left≥n+1Vright≤left
V(left><>A(#left'≥n
Vright≤left'))
→right ≤left
=right≤quadruple*(left)
>(#left≥nVright≤~left)
Aright'≤ left)）
V(right≥
人right≤(x>s)
可得所求结论。
口
口
---
## Page 170
单一个发送方，置于线路的一端：而将所有的接收进程集中起
当然，实际上实施一个协议时，将所有的发送进程集中起来成为
R);
是一个缓存。
作，尽管线路可能产生出错或丢失等不良行为，即保证
人的任务就是要使这个系统，作为整体而言，仍如缓存一般动
进程来模拟，称作WIRE，但它的动作不同于缓存了。协议设计
线路传送消息时，可能出错或者丢失。线路本身的行为也可以用
么（T》R）显然必须是个缓存。
R，它们顺序相连构成（T》R）。如果这个协议是正确的，那
这类协议由两个进程组成，一个是发送方T，另一个是接收方
行为的描述，这种通信协议是在保持原有消息次序下传递消息。
3.4节)。由上述描逃可见，缓存是左卫的。
此处ref意味着进程不拒绝在通道上进行通信（见3.7节和
X1
活锁，而且满足描述
右方输出。形式地说，
入和输出之间可能有某种延迟，当其非空时，还应时刻准备向其
实际上，连接发送方和接收方的线路是非常长的，沿着这条
缓存显然可用于储存待加工的信息。更可以用作通信协议的
下列进程是缓存
举例
每一层次以其前面的一层作为通信介质，即
T,>..·>(T>(T>WIRE>R,)>R)>..·>R
COPY, (COPY>COPY), BUFF, BUFFER
P sat(right≤left)A(if right=left
then left∈ref else right∈ref)
一个缓存是一个进程P，它永不终止，无
(T>WIRE>R)
147
---
## Page 171
X2在4.4.1节X1和X2中已指出.
X1由L1可知下述进程都是缓存
则(T(2)R(2))对一切z都是缓存。
L3若对某个函数和一切&有
L2 若(T>R)=(left?x-→(T>(right!x→R))),则(T>R)是
也是缓存。
11若P和Q是缓存；
L2的一个推广如下
Roscoe 提出的。
息已成功接收，从而使未确认的消息可以重新发送。
加反向的通道，使接收方可以发回确认信号，通知发送方那些消
适用的，是不可能在不可靠的线路上达到可靠的通信的，必须增
》的结合律保证，上远两种不同的分组方法不会改变系统的行
来，置于线路的另一端。这对应于定义式中括号的改变，写
缓存。
为。
148
下列法则对证明协议正确性是很有用的。它们是由A.W.
实际使用的协议比上述的更为复杂，因为单向的消息流是不
举例
(T(2)>R(z))
(T,>>T>T,)>WIRE>(R,>R>">R)
(COPY>COPY)
(P》Q）和
COPY >BUFFER,
COPY>COPY,
=(left?x→(T(f(x,z))>(right1x-→R(f(x,z))))
= (left?x→(COPY>(right1x-→COPY)))
(left?x→(P>(right[x→Q)))
则
 BUFFER>BUFFER
BUFFER>COPY
---
## Page 172
数据拷贝到right2上。为此，最容易的办法是用两个互不相干的
必定是一个缓存。T及R的构造，它们的正确性的证明，留作练
是010111010。接收方R则删去这些多余的。这样，（T>R）
三个1，就插入一个额外的数位0。如输入是01011110，则输出
X4数位填充
这样，出L2知（T>R）是缓存。
其中的进程FAIL未给定义。
码器R则做相反的翻译。即
个0就输出数位对，每输人一个1就输出数位对。译
故必须用于两个数据流，见图4.9。
协议，各自有专用的线路。可惜，现在只有一条可用的线路miu，
习。
X3相位编码
由L2，这也是一个缓存。
要求将通道leftl上的数据拷贝到right1上，将通道left2上的
发送方T忠实地将输入的数位由左向右转发，但每连续发送
在向mid传途输入的消息前，
线路共享
我们用L2证明（T》R)是一个缓存
一个相位编码器是一个进程T，
(T>R)=left?x-→((right!x-→right1(1-x)→T)
R=left?x→left?y→if y=x
T=left?x-→right1x-→right!(1-x)→T
then FAIL eise (rightix-→R)
=left?x→(T>(rightμx-→R))
=left?x-→(T> if (1 -x)=x then FAIL
>(left?x-→left?y-if y=x then FAIL
T必须添加标志；R则删去标
，T输入数位流，并每输人一
else (rightix-=R)))
else (rightix-R))
149
口
---
## Page 173
开环境而言已被屏藏。使用屏算子，上述记号可定义为
表示附进程和主进程间的通信，而且这种内部通信对它们的公
不必通知它。故P如同Q的奴隶或称附庸进程，而Q则如主人或称
立执行(aQ－αP)中的动作，不必得到它的同伙P的批准，甚至也
组合式（PIQ)中，P每做一个动作，必须得到Q的允准；而Q可独
的传输只得推迟。在各通道上安置缓存，也不能彻底解决问题。
相应的收方尚未就绪，则至系统陷入等待，left2和right2之间
这个解是不能合人满意的。如果接连两个消息由left1输入，但
志，并将加工后的消息由相应的右通道上输出。即
使用这个记号的前提是aP二aQ；因此
主进程。我们用非对称的记号
止暂不需要的数据流。这种方法叫作流控制。
正确的解决是引入一条反向通道，使R可向T发回信号，从而中
T=(left1?x-mid1tag1(x)-T|left2?y→mid1tag2(y)→T)
150
R=mid?z->if tag(z) = 1 then (right 1!untag (z)→R)
设P和Q为进程，且有
tef2
fef
4
α(P/Q)=(aQ-aP)
4.5附
P/Q=(P|Q)\aP
aP=aQ
PVO
图.9
Md
else(right2iuntag (z)→R)
庸
righ2
ighr
+
口
---
## Page 174
P直接通信的，甚系也无法知道P的存在，或者P的名字。
就是在附加名字n前，先将涉及名宇m的事件屏蔽掉。R是无法和
这里 am.c(m:P)=ac(P)，v∈ac(P)。
的一个通道。在这种通道上的每个通信都表示为三元组
通道名。复合通道名的形式为m.c，其中m是进程名，c是该进程
明的进程命名的技术不难扩充为通信进程命名，为此需引入复合
就使用这个名字表示和其附庸进程间的相互作用。2.6.2节中说
输出参数e，从其右通道输入结果。即
得到值2×e，需连续执行一次输出和一次输入：向doub的左通道
这里的附庸进程好比是一个子程序，由主进程Q调用。在Q中，为
X1 doub:DOUBLE/Q
在这种情况下，名字n只附加到出现在（αQ－aP)中的事件上；也
这种名字可用作附庸进程的局部名。
由于这类内部通信全被屏蔽了，故外部环境不可能察觉进程名m
用。合
X2 
QU ADRU PLE =
(doub:DOUBLE/(uX.left?x-doub.leftx→
可有套附庸进程，如
形如m,c和m.d；而P用相应的简单通道c和4完成同样的通
子程序本身也可有子程序，如此这般可出现多重的子程序调
例如
在结构（m:P/Q)中，Q用于和P通信的通道都其复合通道
为方便起见，通常给附庸进程起个名字，比如叫m，主进程
举例
(m:(c1u-→P)/(m.c?x-=Q(x)))=(m:P/Q(v))