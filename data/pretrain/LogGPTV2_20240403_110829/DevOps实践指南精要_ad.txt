变更更审批流程
项⽬目末尾的⼈人⼯工的安全Review
但这不不意味着DevOps组织没有有效控制
取代只在项⽬目末尾进⾏行行安全和合规活动
控制被集成到⽇日常⼯工作每个阶段中
更更好的质量量安全和合规性
DevOps Means Eliminating IT 
Operations, or “NoOps“
虽然IT运营的本质发⽣生变化，但仍然重要
IT运营更更早进⼊入软件周期，与开发⼀一起
开发在代码部署到⽣生产后与IT运营⼀一
起持续⼯工作
替代基于⼯工单的⼿手⼯工⼯工作
赋能给开发，提升⽣生产⼒力力
开发通过API和⾃自服务平台创建环
境，测试和部署代码，监控系统
IT运营更更像开发
IT运营的产品是⼀一个平台，让开发⼈人员可
靠/快速/安全的测试部署和运⾏行行IT服务
DevOps is Just “Infrastructure as 
Code” or Automation
很多DevOps的模式需要⾃自动化
DevOps还需要⽂文化规范和架构
让共享⽬目标通过IT价值流达成
这些远远超过⾃自动化的范畴
“DevOps isn’t about automation, just as 
astronomy isn’t about telescopes.”
DevOps is Only for Open Source 
Software
很多成功的故事使⽤用LAMP stack 
(Linux, Apache, MySQL, PHP)
得到DevOps的成果与使⽤用的技术⽆无关
还有成功的案例例使⽤用Microsoft.NET, COBOL, 
and mainframe assembly code, as well as 
with SAP and even embedded systems
Foreword：Dev and 
Ops Become DevOps
Imagine a world 
PO，开发，测试，IT运营，信息安全⼀一同⼯工
作，不不仅相互帮助，⽽而是确保整个组织成功
他们朝着共同的⽬目标，让计划的⼯工作
朝着⽣生产环境快速流动
同时达到世界级的稳定性，可靠性，
可⽤用性和安全性
跨职能团队严格测试他们的假设，哪
些功能能够满⾜足⽤用户和达到企业⽬目标
不不仅是实现⽤用户功能，更更要确保⼯工作
在整个价值流中顺畅流动
没有造成IT运维或内外部⽤用户的混乱
和运⾏行行中断
与此同时，还要降低团队的摩擦，建
⽴立⼯工作系统让开发具备更更⾼高的效率
将测试、运维和信息安全的知识注⼊入
到交付团队，及⾃自服务的⼯工具和平台
团队可以在⽇日常⼯工作中保持与其他团
队的独⽴立
这些能够建⽴立⼀一个安全⼯工作系统
⼩小的团队可以快速和独⽴立的开发，测
试和部署代码
价值快速，安全，可靠的到达⽤用户
可以让组织最⼤大化开发效率，促进组织
学习，创造⾼高的员⼯工满意度，赢得市场
The world we live in
我们⼯工作的系统是破碎的
导致⾮非常差的结果
远远达不不到我们的真实潜⼒力力
开发和运维是对⼿手
测试和信息安全只在项⽬目结尾进⾏行行
想修正问题已经为时过晚
⼤大多数关键活动需要⼤大量量⼿手⼯工⼯工作和
交接，让我们⼀一直处于等待状态
不不仅导致很⻓长的前置时间，⽽而且⼯工作
质量量（尤其是部署）是困难和混乱的
对客户和业务产⽣生消极影响
结果是，远远达不不到⽬目标，整个组织
对IT效能不不满意
预算缩减和阻碍
员⼯工满意度下降，觉得⽆无⼒力力改变流程和结果
解决办法：改变⼯工作⽅方式，DevOps
告诉我们最好的⽅方式
更更好的理理解DevOps⾰革命的潜能
1980s 年年代制造业的⾰革命
应⽤用精益原则和实践
改善了了⽣生产率，客户前置时间，产品
质量量，客户满意度，赢得市场
变⾰革之前
平均制造前置周期是6周，70%按时交付
2005年年，普遍应⽤用精益实践
产品前置时间少于3周，95%按时交付
没有采⽤用精益实践的组织丢失市场份额，或已退出市场
交付技术产品和服务也是⼀一样
1970到1980年年代
⼤大多数新需求需要1到5年年时间
开发和部署，成本千万美元
2000年年代
技术发展、敏敏捷原则和实践的应⽤用
开发新功能数周到数⽉月
部署到⽣生产环境需要数周到数⽉月
2010年年
DevOps的引⼊入及硬件、软件和云的商品化
功能（甚⾄至整个初创公司）可以按周创建
⼩小时或者分钟级快速部署到⽣生产环境
部署变得规律律化和低⻛风险
这些组织可以通过实验验证商业想法
然后快速和安全的开发
功能，部署到⽣生产环境
今天，采⽤用DevOps的原则和实践的
组织可以每天部署成百上千次变更更
在有利利竞争条件是需要快速⾯面向市场和持
续实验的时代⾥里里，那些不不能复制这些成果
的组织必将输给灵活的竞争者，就像那些
没有采⽤用精益原则的⽣生产制造企业⼀一样
The Problem
核⼼心、⻓长期的冲突
开发和运维内在冲突导致的恶性循环
缓慢速度、质量量下降、增加中断、技术债增加
开发和运维相互冲突的⽬目标
响应快速变更更的竞争场景
提供稳定、可靠和安全的服务给客户
不不同仓筒间度量量和激励机制，阻碍整
个组织⽬目标的达成
通常按⽉月甚⾄至季度部署，⽣生产部署⽆无法做到例例
⾏行行，⽽而是需要中断，习惯性的救⽕火和英雄主义
恶性循环的三种⾏行行为
1. 很多问题是由于应⽤用和基础设施复
杂、缺乏记录、⾮非常脆弱
经常承诺解决技术债，但是从未发⽣生
这些脆弱的制品经常⽀支撑着核⼼心业务
2.为了了补偿之前未实现承诺，产品经
理理承诺⼀一个更更⼤大的功能，或业务管理理
层设定了了更更⼤大的收⼊入⽬目标，但未注意
到技术是否可⾏行行
开发⼯工作被作为⼀一个新的紧急项⽬目处
理理，为按期发布⾛走捷径，结果注⼊入更更
多技术债
3.⼯工作变得更更难，⼤大家更更忙，⼯工作时间
更更⻓长，沟通更更慢，队列列更更⻓长，⼯工作紧耦
合，⼩小问题导致更更⼤大的失败
对变更更更更担⼼心、更更低容忍
部署时间更更⻓长，部署出现更更多问题，客户中断更更多，更更
多英雄式的救⽕火，剥夺了了解决技术债的能⼒力力
⼯工作需要更更多沟通，审批，等待其他依赖团队，质量量更更糟
IT fails, the entire organization fails
恶性循环为何到处发⽣生
IT组织有两个相反的⽬目标
每个公司都是技术公司，不不论他们
是否意识到
IT是重要的投⼊入，⽬目前50%项⽬目是技
术相关
银⾏行行只是有银⾏行行业务许可的IT公司
成本：⼈人和经济学
经历了了常年年的恶性循环，尤其是在开发下游
的⼈人，会有注定失败的⽆无能为⼒力力的感觉
精疲⼒力力尽，愤世嫉俗，绝望
害怕做正确的事情，因为怕惩罚、失
败甚⾄至危及⽣生计
both IDC and Gartner estimated 
that in 2011
5%花在IT
50%中的1/3花在紧急和计划外⼯工作或返⼯工
$520 billion浪费
其中50%花在运维现有系统
减少⼀一半浪费，投⼊入到五倍价值的⼯工作中
create $2.6 trillion of value per year
DevOps：有更更好的⽅方法，
破除恶性循环
理理想情况下
⼩小团队独⽴立开发功能，在类⽣生成环境验证
代码快速、可靠、安全的部署到⽣生产环境
代码部署有节奏和可预测
不不需要在周五午夜发布，然后周末都在解决问题
部署在⼯工作⽇日进⾏行行
每个⼈人在办公室准备好，客户⽆无感知
在这⼗十年年中，IT运营⼈人员第⼀一次可以像别⼈人⼀一样在业务时段⼯工作
建⽴立每⼀一步的快速反馈，每个⼈人可以⽴立即看到⾏行行为的效果
当变更更签⼊入版本控制，快速的⾃自动化
测试在类⽣生产环境进⾏行行
反复确保代码和环境像设计的那样运
⾏行行，处于安全和可部署的状态
⾃自动化测试分钟级反馈
实现更更快的处理理和学习
如果是⼏几个⽉月后集成测试发现的问题
很难与原因对应
问题在发现时处理理，避免累积技术债
遍布⽣生产的遥测，包括代码和⽣生产环境，确保问题发现和快速处理理
架构允许⼩小团队解耦地使⽤用⾃自服务
平台安全⼯工作
团队独⽴立⼯工作，⼩小批量量，快速，频繁
交付新价值给客户
⽽而不不是每个⼈人都在等待，延期、紧急返⼯工
重要产品和功能使⽤用灰度发布技术
在发布⽇日之前，代码和功能就
进⼊入⽣生产环境
仅对内部和少量量真实⽤用户可⻅见
测试和持续优化功能直到达到
业务预期⽬目标
仅仅变更更功能开关或配置设置，就可
以让新功能可⻅见或扩⼤大⽤用户群
取代数天或数周的救⽕火式⼯工作
出现问题⾃自动回滚
结果：发布受控，可预测，可回滚，低压⼒力力
所有问题及早被发现和修复
更更⼩小，更更便便宜，更更容易易修正
每次修复，进⾏行行组织学习，预防再次出现
每个⼈人持续学习，培养科学的