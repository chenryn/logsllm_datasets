### Saturated Throughput and Latency Analysis

The saturated throughput remains unaffected by different choices of ∆, while the latency deviates only slightly from the theoretical 2∆ line. It is important to note that the latency remains stable only when the ∆ bound is conservative. This is because, in such cases, the time required for certifying a block (represented by the O(δ) terms in our theoretical analysis) is overshadowed by the 2∆ wait period. When tolerating a larger number of faults or operating under slower network conditions (e.g., in consortium blockchains), ∆ should be set appropriately to ensure system safety.

### Scalability and Comparison with Prior Work

To understand how Sync HotStuff scales as the number of replicas increases, we conducted an experiment comparing it with HotStuff and Dfinity. In our baseline setup, clients issued zero-byte payload commands to saturate the system without overloading the replicas. We varied the number of faulty replicas (f) and repeated each experiment five times to average out fluctuations. Each data point represents the average value, with error bars indicating the standard deviation.

Synchronous protocols, like Sync HotStuff, tolerate up to one-half of the total number of faults, whereas partially synchronous protocols, like HotStuff, tolerate up to one-third. Therefore, for the same f, the actual number of replicas is 2f + 1 for Sync HotStuff and Dfinity, and 3f + 1 for HotStuff. While this comparison is not entirely fair due to the different assumptions about synchrony, it still provides valuable insights into the performance of Sync HotStuff relative to a state-of-the-art partially synchronous protocol like HotStuff.

#### Comparison with HotStuff

Figures 10 and 11 show the throughput and latency for two different payload configurations: 0/0 and 1024/1024. We used a batch size of 400 for both Sync HotStuff and HotStuff. Generally, the throughput of Sync HotStuff is slightly lower than that of HotStuff. However, as the number of faults increases, the throughput of Sync HotStuff approaches and eventually surpasses that of HotStuff in the 1024/1024 case. This is because, in both systems, the bottleneck is the leader's communication with all other replicas. Since Sync HotStuff requires fewer replicas to tolerate f faults, its performance scales better than HotStuff.

#### Comparison with Dfinity

For Dfinity, we first determined the optimal batch sizes to maximize its throughput. The results, shown in Figure 9, indicate that Dfinity requires a batch size of 14,000 to reach its peak throughput of approximately 130,000 operations per second. Dfinity requires a much larger batch size because proposals are made less frequently, every 2∆ time. In contrast, Sync HotStuff makes a new proposal every 2δ (where δ ≪ ∆), as soon as the previous proposal is certified. This allows Sync HotStuff to fully utilize available network bandwidth with much smaller batch sizes.

Figures 10b and 11b show the latency for the two payload configurations. As seen in the figures, the latency of Dfinity ranges between 330ms and 400ms, which is significantly higher than that of Sync HotStuff. This is consistent with the expected theoretical average latency described in Section V-A. At f = 64, the large batch size chosen for Dfinity violates the ∆ = 50ms synchrony bound, leading to safety violations. Therefore, this data point was excluded from our evaluation.

### Related Work

Decades of research on the Byzantine agreement problem have produced numerous solutions. Dolev and Strong introduced a deterministic protocol for Byzantine broadcast, tolerating up to f < n/3 faults. In this paper, we adopt the key idea of Thunderella to achieve optimistic responsiveness but make two significant changes. First, Sync HotStuff uses two rounds to commit in the responsive mode, providing safety for State Machine Replication (SMR). Second, Sync HotStuff employs a conventional approach for monitoring the progress of the responsive mode and using the view-change protocol for fallback, unlike the black-box mechanism in Thunderella.

XFT is another protocol with optimistic responsiveness. XFT guarantees responsiveness when a group of f + 1 honest replicas is determined. For t faults, it may take \(\binom{n}{f+1} / \binom{n-t}{f+1}\) view-changes for an honest group to emerge. This solution is practical for small t but requires an exponential number of view-changes for t = Θ(n). In comparison, Sync HotStuff and Thunderella are responsive under t < n/4 faults after at most t view-changes.

### Conclusion

In this work, we introduce Sync HotStuff, a simple and practical synchronous BFT SMR protocol. Sync HotStuff does not require lock-step execution, tolerates mobile sluggish faults, and offers practical performance. The mobile sluggish fault model captures short network glitches but is not ideal for replicas going offline for extended periods. Future work will focus on developing more realistic synchronous models and practical solutions within them.

### Acknowledgments

We thank Atsuki Momose for pointing out some mistakes in a previous version of this paper and suggesting potential fixes. We also thank Zhuolun Xiang and Nibesh Shrestha for their helpful feedback.

### References

[References listed as provided, with no changes needed.]