We have developed Brahmastra, a tool for analyzing Android applications. In this paper, we will present two security analyses conducted using Brahmastra, which will be detailed in Sections 7 and 8. This section provides an overview of the key features of the tool, as well as the practical challenges encountered during its implementation and the solutions we devised to overcome them.

### 5.1 Execution Planner

Brahmastra utilizes Redexer [24], a versatile bytecode rewriting framework for Android applications, to perform static analyses that construct call graphs and identify transition paths to target methods. Redexer takes an Android application binary (APK file) as input and generates an in-memory data structure representing the DEX file for various analyses. It offers utility functions for manipulating the DEX file and a generic engine for conducting data-flow analysis, call graph construction, and control-flow graph generation.

For APIs that trigger activity transitions, such as `Context.startActivity()`, we employ constant propagation analysis (see Appendix A for details) to identify the target activity stored within the intent. Figure 6 illustrates example bytecode snippets that create and initialize an intent, specify the target activity, and start the activity via `startActivity()`. The mappings between each bytecode line show how data-flow information is accumulated, from an empty intent to one with a specific target activity. We apply similar analysis to bindings between views and listeners.

### 5.2 App Rewriting

We use the Soot framework [29] to rewrite the bytecode, enabling self-execution. Dexpler [7] converts the Android app binary into Soot's intermediate representation, Jimple, which facilitates analysis and manipulation. The re-writing tool consists of Soot’s class visitor methods and an Android XML parser. Given an app binary and an execution path, the rewriter generates a modified binary that artificially invokes a callback method upon completing the current activity, thus triggering the next activity. The inserted code depends on the type of edge identified by the Execution Planner (recall the three kinds of asynchronous edges described in Section 4.1). For programmatic and XML-based registrations, the rewriter identifies the associated view by parsing the activity code and the manifest, respectively, and then invokes the appropriate UI interaction after the view has loaded. Lifetime methods are directly invoked by the Android framework, so the rewriter skips code insertion for these cases. In other scenarios, the rewriter inserts a timed call to the transition method to ensure the activity and its dependencies load completely.

### 5.3 Jump Start

Jump start involves initiating an activity even if it is not defined as the Launcher activity in the app. To achieve this, we modify the Android app's manifest file. The `Intent.ACTION_MAIN` entry in the manifest declares activities that the Android activity manager can start directly. To enable jump start, we add an `ACTION_MAIN` entry for each activity along the specified path, allowing the Execution Engine to start the activity. The manifest also includes an intent filter, which determines the sources from which an activity can be started; we modify this to allow the Execution Engine to launch the activity. The Engine then invokes the desired activity by passing an intent to it. We use the Android Debug Bridge (ADB) [4] to perform jump start. ADB allows us to create an intent with the desired parameters and target, and then pass it to the Android Activity Manager, which loads the appropriate app data and invokes the specified activity. Starting the (jump-started) activity immediately activates self-execution from that point onward.

### 6 Evaluation of Brahmastra

We evaluate Brahmastra based on two key metrics: (1) hit rate, i.e., the fraction of apps for which Brahmastra can invoke any target method, and (2) speed, i.e., the time (or number of activity transitions) Brahmastra takes to invoke a target method in an app. Since no existing tool achieves the same goal, we compare Brahmastra against PUMA [23], a high-performing Android app exploration tool.

#### 6.1 Experiment Methodology

**Target Method:** For our experiments, we configure Brahmastra to invoke authentication methods in the Facebook SDK for Android. We chose the Facebook SDK because it is widely used, and its methods are often invoked deep within apps. Using the public documentation for the Facebook SDK, we identified two target methods for testing. Note that the apps in our dataset use Facebook SDK version 3.0.2b or earlier.

**Apps:** We crawled 12,571 unique apps from the Google Play store between late December 2012 and early January 2013. These apps were listed as the 500 most popular free apps in each category at the time. Among them, 1,784 apps include the Facebook SDK for Android. We only consider apps that invoke the authentication method—over 50 apps have no call sites to Facebook APIs, and over 400 apps use the API but do not invoke any authorization-related calls. We also discard apps that do not work with our toolchain, e.g., those that crash on the emulator or have issues with apktool [1]. This leaves us with 1,010 apps.

**App Execution:** To determine if Brahmastra or PUMA can reach a program point that invokes the target method, we instrument the apps. The instrumentation detects when any of the target methods are invoked during runtime by comparing the signatures of executing methods with those of the target methods. For Brahmastra, we consider only five of all paths generated by the Execution Planner. For PUMA, we explore each app for up to 250 steps; higher timeouts significantly increase overall testing time with little gain in hit rate.

#### 6.2 Hit Rate

In our experiments, PUMA successfully invoked a target method in 127 apps (13%). PUMA’s hit rate is significantly lower than its reported activity coverage (> 90% compared to humans) [23], highlighting the difficulty in invoking specific program points deep inside an app. In contrast, Brahmastra successfully invoked a target method in 344 (34%) apps, a 2.7× improvement over PUMA. A closer examination of our results, as shown in Table 1, reveals that Brahmastra’s technique can help circumvent all the root causes for PUMA’s poor hit rate mentioned in Section 3.

We now investigate why PUMA and Brahmastra sometimes fail to invoke the target method. For PUMA, this is due to the four cases mentioned earlier. Figure 8 shows the distribution of apps for which PUMA fails due to specific causes. The most dominant cause is the failure to find UI controls to interact with, primarily due to complex UI layouts in the popular apps we tested. Figure 8 also shows the root causes for Brahmastra’s failure. The key reasons are as follows:

- **Blocking Page:** Even if jump start succeeds, successive activity transitions may fail on a blocking page. Brahmastra fails for 20% of the apps due to this cause. Brahmastra experiences more blocking pages than PUMA because it explores many paths that PUMA does not.
- **Crash:** Jump start can crash if the starting activity expects specific parameters in the intent and Brahmastra fails to provide them. Brahmastra fails for 7% of the apps due to this cause.
- **Custom Components:** The Execution Planner may fail to find useful paths if the app uses custom components, which can override standard event handlers, breaking our model of standard Android apps. This happens with 16% of the apps. We leave extending the Execution Planner to handle custom components as future work.

**Improving the Hit Rate:** There are several ways to further improve Brahmastra’s hit rate:
1. A better static analysis that can discover more useful paths.
2. Trying more paths instead of only five randomly selected ones.
3. Selecting paths to avoid nodes or edges where exploration failed in previously considered paths.
4. Improving the static analysis to better identify bindings between callback methods and UI elements.
5. Special-case handling of UI elements in the Android SDK.
6. Combining PUMA and Brahmastra in a hybrid system, where PUMA is used if Brahmastra fails (or vice versa).

#### 6.3 Speed

We use the number of activity transitions required to reach the target activity as a proxy for speed, as actual time varies depending on computational factors. Figure 9 plots the CDF of the number of transitions required to reach the target activity for apps successfully tested by both Brahmastra and PUMA. Brahmastra prunes away many unnecessary paths using static analysis, resulting in faster performance. On average, PUMA requires 18.7 transitions per app, while Brahmastra requires 2.5 transitions, resulting in a 7-fold speedup.

### 7 Analysis of Ads in Kids Apps

Our first scenario is to use Brahmastra to study whether ad libraries in Android apps meet guidelines for protecting the online privacy of children. We analyze two popular ad components embedded in 220 kids' apps. Our analysis shows that 80% of the apps displayed ads with links to landing pages that collect personal information, and 36% of the apps displayed ads deemed inappropriate for children.

#### 7.1 Motivation and Goals

The Children’s Online Privacy Protection Act (COPPA) sets forth various stipulations that mobile app developers must follow if their apps are directed at children under 13 years old [6]. COPPA disallows the collection of personal information by these apps unless they first obtain parental consent. COPPA holds the app developer responsible for the personal information collected by embedded third-party components and the app's code. Since it is common to see ad components in free apps, we aim to measure the extent of potentially non-COPPA-compliant practices in these apps.