title:AdJail: Practical Enforcement of Confidentiality and Integrity Policies
on Web Advertisements
author:Mike Ter Louw and
Karthik Thotta Ganesh and
V. N. Venkatakrishnan
AdJail: Practical Enforcement of Conﬁdentiality and Integrity Policies
on Web Advertisements
Mike Ter Louw
Karthik Thotta Ganesh
V.N. Venkatakrishnan
Department of Computer Science
University of Illinois at Chicago
Abstract
Web publishers frequently integrate third-party adver-
tisements into web pages that also contain sensitive pub-
lisher data and end-user personal data. This practice ex-
poses sensitive page content to conﬁdentiality and in-
tegrity attacks launched by advertisements.
In this pa-
per, we propose a novel framework for addressing security
threats posed by third-party advertisements. The heart of
our framework is an innovative isolation mechanism that
enables publishers to transparently interpose between ad-
vertisements and end users. The mechanism supports ﬁne-
grained policy speciﬁcation and enforcement, and does
not affect the user experience of interactive ads. Evalua-
tion of our framework suggests compatibility with several
mainstream ad networks, security from many threats from
advertisements and acceptable performance overheads.
Introduction
1
On September 13, 2009, readers of the New York Times
home web page were greeted by an animated image of a
fake virus scan. Amidst widespread confusion, NY Times
clariﬁed the situation in an article [48], explaining the
source of the rogue anti-virus attack was one of its adver-
tising partners. Just two months prior, members of social
web site Facebook were presented with advertisements
(henceforth, “ads”) deceptively portraying private images
of their family and friends [38]. Facebook responded in an
article [42] blaming advertisers for violating policy terms
governing the use of personal images.
Publishers of online ads (like the NY Times and Face-
book) face two serious challenges. They must ensure ads
will neither violate the integrity of publisher web pages
(as occurred with NY Times), nor breach conﬁdentiality
of user data present on publisher web pages (as occurred
with Facebook). Ads are often tightly integrated into pub-
lisher web pages, and therefore must coexist with high in-
tegrity content and sensitive information. Typically, ad
content is dynamically fetched from ad networks (e.g.,
Google AdSense) by the user’s browser, leaving little op-
portunity for publishers to inspect and approve ads before
the ads are rendered.
Online advertising is currently a lucrative market, ex-
pected to hit the US$50 billion mark in the U.S. dur-
ing 2011 [52]. For many publishers, online advertising
is an economic necessity. However, publishers have few
resources enabling them to enforce integrity and conﬁden-
tiality policies on ads. One common approach is for ad
networks to screen each ad for potential attacks. This pas-
sive approach simply shifts the burden of protection from
publisher to ad network. To enforce compliance, publish-
ers must use out-of-band mechanisms (e.g., legal agree-
ments), which leave the publisher vulnerable to any gaps
in the ad network’s screening strategy. Rogue ads may
slip through and cause damage, as in the above, high pro-
ﬁle examples.
Due to the dangers of rogue ads, publishers are in
great need of an active, technological approach to protect
themselves and their end users. Therefore, in this paper
we confront the problem of rogue ads from a publisher-
centric perspective. At a basic level, a publisher is a
web application that includes dynamically sourced con-
tent from an ad network in its output. Our objective is
to empower this web application to serve ads from main-
stream ad networks, while protecting its end users from
several threats posed by rogue ads.
1.1 Contributions
In this paper, we present ADJAIL, a framework that aids
web applications to support rendering of ads from main-
stream ad networks without compromising publisher se-
curity. Our framework achieves this protection by apply-
ing policy-based constraints on ad content. There are ﬁve
signiﬁcant contributions of our approach:
1. Conﬁdentiality and integrity policy speciﬁcation and
enforcement. We deﬁne a simple and intuitive policy
speciﬁcation language for publishers to specify several
conﬁdentiality and integrity policies on advertisements
at a ﬁne-grained level. We provide a novel and con-
ceptually simple policy enforcement mechanism that
offers principled security guarantees.
2. Compatibility with ad network targeting algorithms.
Ad networks use targeting algorithms to select which
ads to display, based on several factors such as page
context and user behavior.
In many cases, these al-
gorithms are implemented as scripts that analyze pub-
lisher content to select and fetch appropriate ads to
be displayed. Our approach supports these targeting
scripts, with the added beneﬁt of restricting the target-
ing script’s access to sensitive data.
3. Compatibility with ad network billing operations. Ad
networks employ complex billing strategies based on
several metrics, including ad impressions (number of
times an ad is shown) and mouse clicks. Furthermore,
ad networks have mechanisms for dealing with click
fraud [2]. To remain transparent to billing and click-
fraud detection mechanisms, our approach preserves
impression and click metrics.
4. Consistency in user experience. Our approach does not
affect the user experience in interacting with ads, for
any change in the user experience (in terms of content,
position and interactivity) may reduce the effectiveness
of advertising. Furthermore, ADJAIL highlights the se-
curity trade-offs that are required for ensuring consis-
tency in user experience for certain types of ads (such
as inline text ads).
5. Satisfaction of practical deployment requirements.
Publishers should not have to expend signiﬁcant labor
in adopting a new framework, as this may make adop-
tion prohibitively expensive. Furthermore, publishers
should be able to deploy a solution that does not require
end users to install new client software (e.g., browsers,
plug-ins, etc.) or make changes to their existing client
software. Therefore, we offer a practical solution that
is easy to adopt, and works on mainstream browsers in
their default settings, without any modiﬁcations.
1.2 Overview
The crux of our approach is a novel policy enforcement
strategy that can be employed by the publisher to interpose
itself transparently between the ad network and end user.
The enforcement strategy starts by fetching and execut-
ing ads in a hidden “sandbox” environment in the user’s
browser, thus shielding the end user and web application
from many harmful effects.
In order to preserve the user experience, all ad user in-
terface elements are then extracted from the sandbox and
communicated back to the original page environment, as
permitted by the publisher’s policy. This step enables the
user to see and interact with the ad as if no interposition
happened. All user actions are communicated back to the
sandbox, thus completing a two-way message conduit for
synchronization. Our approach ensures transparency with
regard to the number of ad clicks and impressions by inter-
posing on the browser’s Document Object Model to sup-
press extraneous HTTP requests.
We have built a prototype implementation of AD-
JAIL that supports speciﬁcation and enforcement of ﬁne-
grained policies on ads sourced from leading ad networks.
The prototype is designed to be compatible with several
mainstream browsers including Google Chrome, Firefox,
Internet Explorer (IE), Safari and Opera. One minor lim-
itation of our implementation (but not of our architecture)
is that it is not compatible with IE 7.x or below. However,
the current ADJAIL prototype is compatible with IE 8.0
and later.
We evaluate ADJAIL on the dimensions of ad network
compatibility, security, and performance overheads. Our
compatibility evaluation tested ads from six mainstream
ad networks. We ﬁnd that ADJAIL provides excellent
compatibility for most ads. We also demonstrate the
strong protection offered by ADJAIL from many signiﬁ-
cant threats posed by online ads. In our experiments, the
currently unoptimized ADJAIL prototype encountered at
most a 1.69× slowdown in rendering ads.
The remainder of this paper is organized as follows:
Section 2 provides the threat model, scope and related
work. We provide the architecture and the main ideas be-
hind ADJAIL in Section 3. Section 4 discusses the details
in the implementation of ADJAIL. Our security, compati-
bility and performance evaluation appears in Section 5. In
Section 6 we conclude.
2 Threat Model and Related Work
2.1 Threat model
Consider a publisher who wishes to carry ads on a web-
mail (Web-based email) application. We will use this as
a running example throughout the paper to illustrate the
various aspects of our framework. A screenshot from an
actual webmail application we used in our evaluation ap-
pears in Figure 1. The top pane of the window presents the
message list and the bottom pane presents the email mes-
sage text. Four numbered advertisements also appear in
the ﬁgure: (1) a banner ad that appears on top of the web-
mail page, (2) a skyscraper ad that appears as a sidebar,
(3) an inline text ad that appears when the user’s mouse
hovers over an underlined word, and (4) a ﬂoating ad that
overlays the image of a clock on the page.
These ads highlight two interesting challenges we need
to overcome. First, the sidebar ad requires access to the
email message text, which it mines to ascertain page con-
text and select relevant ads for display (i.e., contextual tar-
geting). The inline text ad also requires access to the mes-
sage for contextual targeting and to integrate ads among
the text. However, supporting these ads by providing ac-
2
Figure 1: Samples of various ad types. A webmail application with (#1) banner and (#2) skyscraper ads. Also illustrated are (#3) an
inline text ad and (#4) an ﬂoating ad.
cess to the entire message carries the risk of exposing pri-
vate content (e.g., email addresses) to the ad script. Sec-
ond, the ﬂoating ad requires access to the real estate of the
page to place the image of the clock over the message text.
However, providing access to the page real estate enables
an ad to overlay content over the entire page, which may
interfere with trusted interface components.
These common examples illustrate how ads require
non-trivial access to publisher content and the screen, and
will not work if such access is denied. Also, in all of the
examples above, the ad content is loaded and rendered by
a third-party ad script (an ad script example appears in
Figure 4a). Ad scripts are given full page access by de-
fault, and thus pose threats to the conﬁdentiality and in-
tegrity of page content. Our goal is to support the non-
trivial access required by these and many other typical
forms of ads, while addressing the security concerns of
executing third-party ad scripts.
2.2 Threat scope
Web applications that display third-party content on client
browsers are exposed to a wide variety of threats.
It is
therefore important to clarify our threat model, speciﬁ-
cally on the nature of protections that we offer and the
threats that are outside the scope of this work.
In-scope threats The broad threats that we address in this
work are those targeted by recent efforts in the Web stan-
dards community for content restrictions (e.g., Content
Security Policy [32, 43]). These policies are speciﬁed by
a website to restrict the capabilities of third-party scripts,
speciﬁcally with reference to access and modiﬁcation of
ﬁrst-party (site owned) content, as well as control over the
screen. Policies can be negotiated between a publisher
and its customers, or directly reﬂect the site security and
privacy practices.
Our framework provides a means for speciﬁcation and
enforcement of such policies. For instance, in our web-
mail example, an integrity policy can be enforced such
that email message content cannot be tampered with, but
can still be read (for contextual targeting of ads). Publish-
ers may also choose to restrict where ads can appear on
the page.
Publishers can also use our framework to enforce poli-
cies about conﬁdentiality of content. For instance, a pub-
lisher can enforce a policy that mail headers and email
“address books” (containing private email addresses) can-
not be read by ads. For the Facebook attack in §1, a policy
specifying conﬁdentiality of user images, combined with
our enforcement mechanism, would have prevented the
attack.
Out-of-scope threats Many security threats posed by ads
(and other third party content) have been identiﬁed by the
security community. Recently, there has been intense re-
search in this area which can complement our approach
for protection against speciﬁc attacks. In particular, our
work does not address the threats listed below. In this sec-
tion we omit threats for which publishers can readily de-
ploy strong protection (e.g., cross-site request forgeries).
1. Browser security bugs. We do not address browser vul-
nerabilities such as drive-by-downloads [49, 36, 5], at-
tacks launched through plug-ins [24], vulnerabilities in
image rendering [23] and so on.
3
2. Opaque content. Our approach leverages web content
introspection capabilities of JavaScript, and is there-
fore most capable of enforcing ﬁne-grained control
where such transparency is available. Although our ap-
proach provides coarse-grained conﬁdentiality and in-
tegrity protection from opaque content (e.g., Flash), the
many possible attack vectors from these binary formats
require special treatment [13].
3. Frame busting & navigation attacks. These are difﬁ-
cult attacks for any dynamic policy enforcement mech-
anism to prevent, due to the limited API exposed by
browsers. A detailed discussion of protection measures
against frame busting has been explored [39] and could
be used to enhance our approach.
4. Behavior tracking attacks. These are attacks that track
a user across multiple sites and sessions through use of
cookies. These could be addressed by users choosing
restrictive cookie policies, though such policies may
interfere with the functionality of some web sites.
5. Attacks through side channels. Sites can track users
through side channels, such as the cache timing chan-
nel [11], the “visited links” feature of browsers [19]
and so on. It is difﬁcult to defend these vectors without
browser customization, which is impractical for pub-
lishers to deploy.
2.3 Related Work
Privacy and behavioral targeting A few recent ap-
proaches have looked at the problem of addressing secu-
rity issues in online advertising. Privads [15] and Ad-
nostic [47] address this problem primarily from a user
privacy perspective. They both rely on specialized, in-
browser systems that support contextual placement of ads
while preventing behavioral proﬁling of users. In contrast,
our work mainly focuses on a different, publisher-centric
problem of protecting conﬁdentiality and integrity of pub-
lisher and user-owned content. Our work is also aimed
at providing compatibility with existing ad networks and
browsers.
Restricting content languages There have been a num-
ber of works [9, 6, 28, 29, 30, 12] in the area of Java-
Script analysis that restrict content from ad networks to
provide security protections. These works focus on limit-
ing the JavaScript language features that untrusted scripts
are allowed to use. The limitation is enforced statically
by checking the untrusted script and ensuring it conforms
to the language restrictions. Only those language features
that are statically deterministic and amenable to analysis
are allowed. Since much of the policy enforcement is
done statically, these solutions typically have good run-