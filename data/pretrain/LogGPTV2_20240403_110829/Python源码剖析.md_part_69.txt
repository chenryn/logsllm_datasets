16.2.3.2
440
Python源码剖析
表。图16-5展示了某一时刻多个arena的一个可能状态。
与arena之间通过nextarena连接，是一个单向链表；
有一个arena的链表。“未使用”的arena 的链表表头是unused_arena_objects、arena
用”状态；一旦建立了联系，这时arena就转换到了“可用”状态。对于每一种状态，都
代码清单16-3
情形（见代码清单16-3）。
statie struct arena_object*new_arena(void)
#define INITIAL_ARENA_OBJEeTS 16
1/当前arenas中管理的arena_object的个数
static struct
[obmalloc.c]
在运行期间，Python使用new_arena来创建一个arena，我们来看看arena创建时的
第16章Python的内存管理机制
当一个arena的area_object没有与pool集合建立联系时，这时的arena处于“未使
uint exoeser
struct arena_object*
//[1]：判断是否需要扩充“未使用的”arena_object列表
申请arena
unused_arena_objects
numarenas =maxarenas maxarenas ntotalpools arenaobj->nfreepools;
arenaobj->pool_
arenaobj->freepools= Nulib;
/[6]：设置pool集合的相关信息
arenaobj->address
assert(arenaobdr>address #e O);
if
ar
arenaobj=unus
arenaobj->pool_aadress += POOL_SIzE= excess;
enaobii
maxarenas =
mbytes.
if (numarenas nfmaepools:
Update globals.
(arenaob)
(nbytes
return NULL;//overflow
arenas[i].nextarena
anenaslil
(uint) (arenaobj->address & PoOL_SIZE_MASK):
初始化新申请的arena_object，
arena
maxarenas;
objects #:arenaobj
(struct arena_objedt *)realloc(arenas,nbytes);
seuaxeumu
address=
ed
OLS
arena.obieccs:
NULL)
冰
slzeof(*arenas):
&arenas[maxarenas];
八
(block-)arenaobj->address;
tumarenas;
inumarenas
STZE/ POOL_SIZE;
IOC(ARENA_SIZE):
=numarenas)
->nextarena;
Python源码剖析
mark as
16.2小块空间的内存池
unassociated */
一深度探索动态语言核心技术
441
---
## Page 472
Python源码剖析
16.2.4.1
16.2.4
442第16章Python的内存管理机制
当申请的内存小于256字节时，Pyobject_Malloc会在内存池中申请内存：当申请的内存
这个分界点由前面我们看到的名为SMALL_REQUEST_THRESHOLD的符号控制。也就是说，
用”的arena了，接下来，Python就将进入[4]处对一个arena的初始化了。
了。对喽，所以最后还设置了unusedarena_objects。这样一来，系统中又有了“未使
咱们可不是饭后随便溜达到这里的，是因为那个重要的urused_arenaLobjects变为NULL
集合建立了联系，这个address就变成了非0。当然，别忘了我们为什么会来到[3]这里的，
新申请的arena的address一律设置为0。实际上，这是一个标识一个arena是处于“未使
申请的arena_obiect 进行设置，特别要提到的是那个貌似毫不起眼的address，[3]处将
顺利通过，Python在代码清单16-3的[31处通过real1oc扩大arenas指向的内存，并对新
的个数设置为当前arena_objec:个数（maxarenas）的2倍。当然，在首次初始化时，
指向的数组中存储的arena_object的个数。在[2]处，Pyhon将待申请的arena_object
集合（小块内存内存池）。Pyhon在内部通过一个唤作maxarenas的变量维护了在arenas
NULL，则表明目前系统中已经没有“未使用”的arena了，Python将首先扩大系统的arena
集合所占用的256KB的内存在进行边界对齐后，实际上是交给poolL_address来维护了。
大惊小怪的，看来要等到释放一个pool时，这个freepools才有用。最后我们看到，pool
[6]处将freepools设置为NULL，基于前面我们对pool中reeblock的了解，这没什么
内存，而将可使用的内存边界（pooladdress）调整到了与系统页对齐。代码清单16-3的
特别注意的是，在[6]的动作中，Pyhon将申请到的256KB内存进行了处理，放弃了一些
关系，就等着usable_arenas这个组织的接收了，到底什么时候才能接收呢，别急，谜
备了成为“可用”内存的条件。到了这里，arena和unused_arena_objects已经脱离了
就是pool的容身之处，这时arena_object就和pool集合建立联系了，这个arena已经具
底一会儿揭晓。
在Pyhon2.5中，Python内部默认的小块内存与大块内存的分界点定在256个字节，
在获得了新的maxarenas后，Pyhon会检查这个新得到的值是否溢出了。如果检查
回到mew_arena中代码清单16-3的[1]处的判断，如果unusedarena_objects为
内存池
随后，在代码清单16-3的L6]处，Python设置了一些arena用于维护pool集合的信息
可用pool缓冲池
一深度探索动态语言核心技术
-usedpools
---
## Page 473
是unix平台，这个编译符号都是没有打开的，所以通常Pyhon都没有对小块内存的内存
的另一个符号会被激活，这个名为SMALLMEMORY_LTMIT的符号限制了整个内存池的大
限制这个内存池的大小。
池的大小是否有限制？这个决策取决于用户，Pyton提供了一个编译符号，用于控制是否
么Python内部对于arena的个数是否有限制呢？换句话说，Python对于这个小块空间内存
Python源代码，我们可以改变这个默认值，从而改变Pyhon的默认内存管理行为。
大于256字节时，Pyobject_Ma11oc的行为将蜕化为mal1oc的行为。当然，通过修改
还是一个有状态的内存管理抽象体。
字节的block了，甚至pool集合中一半管理32字节，一半管理64字节。这就决定了在进
同一个arena，在某个时刻，其内的pool集合可能都是管理的32字节的block：而到了另
pool_head中的那个 szidx么？而arena是没有size概念的内存管理抽象体，这就意味着，
pool中的block总是有确定的大小，这个pool总是和某个sizeclass index对应，还记得
arena自身的属性决定的。在Python中，pool是一个有size概念的内存管理抽象体，
满足需求的pool，从中取出一个block返回，而不会去寻找arena。这实际上是由pool和
而是pool。喉，绕来绕去的，我都觉得快晕了，没办法，兄弟，挺住，后面还有很多呢。
不直接与arenas和arena打交道。当Python申请内存时，最基本的操作单元并不是arena，
的最上层结构，所有arena的集合实际就是小块内存池。然而在实际的使用中，Pyhon并
池的大小做任何的限制。
小，同时，也就限制了可以创建的arena的个数。在默认情况下，不论是Win32平台，还
行内存分配和销毁时，所有的动作都是在pool上完成的。
一时刻，由于系统需要，这个arena可能被重新划分，其中的pool集合可能改为管理64
#endif
#define MAx_ARENAS
#iEdeE WITHLMEMORY_LIMITS
#endif
tendif
define
#ifndef
#ifdef WITH
[obmalloc.c]
当Python申请小于256字节的内存时，Pyhon会使用arenas所维护的内存空间。那
内存池中的pool，不仅是一个有size概念的内存管理抽象体，而且，更进一步的，它
当Python在WITH_MEMORY_LIMITS编译符号打开的背景下进行编译时，Python内部
尽管我们在前面花费了大量篇幅介绍arena，同时也看到arena是Pyhon小块内存池
SMALL_MEMORY_LIMIT
MEMORY_LIMITS
(SMALL MEMORY_LIMTT/ARENA_SIZE)
(641024*1024）
。一个pool在Python运行的任何一个时刻，总是处于
Python源码剖析
16.2小块空间的内存池
深度探索动态语言核心技术
443
---
## Page 474
Python源码剖析
444
们来看一看usedpools的结构。
Python也就无法寻找到最合适的pool了。这种机制与usedpools的结构有密切的关系，我
usedpools相关联的机制，完成从申请的内存的大小到sizeclassindex之间的转换，否则
pool，从中分配一个block。从这个简要的叙述中，我们已经可以看到，一定有一个与
pool。当申请内存时，Python就会通过usedpools寻找到一块可用的（处于used状态的）
Python内部维护的usedpools数组是一个非常巧妙的实现，维护着所有的处于used状态的
typedef uchar bloek;
[obmalloc.c]
接成链表。
以下三种状态的一种：
#definemPTA (x)
A
V
在图16-6中，我们看到所有处于used状态的pool都被置于usedpools的控制之下。
第16章Python的内存管理机制
PT(O)
请注意，arena中处于full状态的pool是各自独立的，并没有像其他的pool一样会链
图16-6给出了一个arena中包含三种状态的pool的集合的一个可能状态。
pool_header中的nextpol构成一个链表，这个链表的表头就是arerna_object中的
empty状态：pool中所有的block都未被使用，处于这个状态的pool的集合通过其
used状态：pool中至少有一个block已经被使用，并且至少有一个block还未被使用。
freepools;
full状态：pool中所有的block都已经被使用，这种状态的pool在arena中，但不在
这种状态的pool受控于Python内部维护的usedpools数组：
arena_object
一深度探索动态语言核心技术
pool header
PT）
PT(9)PT(10）,PT(11),PT（12),PT（13),
freepools
PTA(X)
图16-6某个时刻aerma中pool集合的可能状态
PT（2）
blocis
fuill
PTA(X)
8
joodxau
full
这个联系是什么？
empty
usedpools
7
pasn
/8)+8]=[
used
---
## Page 475
是Pyobject_Malloc中进行这个判断的代码。
通过简单的判断来发现与某个classsizeindex对应的pool是否在usedpools中存在。下面
当前内存需求的pool，从中分配一块block。
得到了。Python正是使用这个usedpools快速地从众多的pool中快速地寻找到一个最适合
class为32字节（sizeclassindex为3）的pool时，只需要简单地访间usedpool[3+3]就可以
=Doo1即可，其中i为sizeclassindex，对应于32字节，这个i为3。当下次需要访问size
中时，需要怎么做呢？从上面的描述可以看到，只需要进行usedpools[+i]-nextpool
是Python内部使用的一个trick。
freeblock的大小）后的内存，不正是usedpools[6]的地址（即usedpools+6）吗？这
usedpools[6）（即usedpools+4）开始向后偏移8个字节（一个ref的大小加上一个
pool_header的定义来看一看usedpools[6]->nextpoo1这个指针指向哪里了呢？是从
现usedpoolst6]的值是指向usedpools[4]的地址。有些迷惑了，对吧？好了，现在对照
ALIGNMENT_sHIFT，得到sizeclassindex为3。在usedpools中，寻找第3+3=6个元素，发
前面我们提到，Python会首先获得sizeclassindex，通过size=（uint）（nbytes=1）>>
如图16-7所示。
#deEineNB_SMALL_SIZE_CUASSES
[obmalloc.c]
想象一下，当我们手中有一个sizeclass为32字节的pool，想要将其放入这个usedpools
在我们即将看到的pyobject_Malloc代码中，Pyhon利用了usedpools的巧妙结构，
这样看上去似乎仍然摸不着头脑，别急，我们来考虑一下当申请28个字节时的情形。
这个数组的定义有些怪异，别急，待我们用一幅图来展示这个怪异的usedpools数组，
其中的NB_SMALL_SIZE_CLASSEs指明了在当前的配置之下，一共有多少个sizeclass。
prevpool
nextpoo
图16-7usedpools数组
2
(SMALL_REOUEST_THRESHOLD/ALIGNMENT)
struct pool
/Poolfarsmallblocks,/
int
struct pool
struct pool_header *niextpool;
block*freeblock;
unic
Python源码剖析
uint count]
16.2小块空间的内存池
header prevpool
ref
一深度探索动态语言核心技术
numbe
445
---
## Page 476
Python源码剖析
16.2.4.2
446
实开始申请小块内存时，Pyhon才开始建立这个内存池。正如前面所提到的，当申请28
准确地说，不存在任何可用的pool。在这里，Python采用了延迟分配的策略，即当我们确
的内存布局。图16-8左侧粗体显示的地址即是poo1和poo1->nextpoo1的值。
在第一次申请sizeclass index为3的内存块时发生中断，以便形象地观察这时usedpools
nextpoo1为什么能够工作的原因。我们在Pyhon的源代码中添加了代码，使得Python
PT
PT(2)0x1e2855080x00b66000
voiaPyobject_Malloc(eizeltnbytes)
[obmalloc.c]
当Python启动之后，在usedpools这个小块空间内存池中，并不存在任何可用的内存，
第16章Python的内存管理机制
在图16-8中，还是以申请大小为28字节的内存块为例，展示了poo11=p0o1->