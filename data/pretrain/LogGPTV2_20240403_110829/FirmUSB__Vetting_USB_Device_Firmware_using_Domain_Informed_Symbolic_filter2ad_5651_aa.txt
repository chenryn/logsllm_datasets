title:FirmUSB: Vetting USB Device Firmware using Domain Informed Symbolic
Execution
author:Grant Hernandez and
Farhaan Fowze and
Dave (Jing) Tian and
Tuba Yavuz and
Kevin R. B. Butler
FirmUSB: Vetting USB Device Firmware using Domain Informed
Symbolic Execution
Grant Hernandez∗
University of Florida
Gainesville, FL, USA
PI:EMAIL
Farhaan Fowze∗
University of Florida
Gainesville, FL, USA
PI:EMAIL
Dave (Jing) Tian
University of Florida
Gainesville, FL, USA
PI:EMAIL
7
1
0
2
g
u
A
0
3
]
R
C
.
s
c
[
1
v
4
1
1
9
0
.
8
0
7
1
:
v
i
X
r
a
Tuba Yavuz
University of Florida
Gainesville, FL, USA
PI:EMAIL
ABSTRACT
The USB protocol has become ubiquitous, supporting devices from
high-powered computing devices to small embedded devices and
control systems. USB’s greatest feature, its openness and expand-
ability, is also its weakness, and attacks such as BadUSB exploit the
unconstrained functionality afforded to these devices as a vector
for compromise. Fundamentally, it is virtually impossible to know
whether a USB device is benign or malicious. This work introduces
FirmUSB, a USB-specific firmware analysis framework that uses
domain knowledge of the USB protocol to examine firmware im-
ages and determine the activity that they can produce. Embedded
USB devices use microcontrollers that have not been well studied
by the binary analysis community, and our work demonstrates how
lifters into popular intermediate representations for analysis can
be built, as well as the challenges of doing so. We develop targeting
algorithms and use domain knowledge to speed up these processes
by a factor of 7 compared to unconstrained fully symbolic exe-
cution. We also successfully find malicious activity in embedded
8051 firmwares without the use of source code. Finally, we pro-
vide insights into the challenges of symbolic analysis on embedded
architectures and provide guidance on improving tools to better
handle this important class of devices.
CCS CONCEPTS
• Security and privacy → Intrusion/anomaly detection and
malware mitigation; Embedded systems security; Systems security;
KEYWORDS
USB; BadUSB; Firmware Analysis; Symbolic Execution
∗These authors have contributed equally to this work.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134050
Kevin R. B. Butler
University of Florida
Gainesville, FL, USA
PI:EMAIL
1 INTRODUCTION
The Universal Serial Bus (USB) protocol enables devices to com-
municate with each other across a common physical medium. USB
has become ubiquitous and is supported by a vast array of devices,
from smartphones to desktop PCs, small peripherals, such as flash
drives, webcams, or keyboards, and even control systems and other
devices that do not present themselves as traditional computing
platforms. This ubiquity allows for easy connecting of devices to
data and power. However, attacks that exploit USB have become
increasingly common and serious. As an example the BadUSB at-
tack exploits the open nature of the USB protocol, allowing the
advertisement of capabilities that device users may not realize are
present. A BadUSB device appears to be a benign flash drive, but
advertises itself as having keyboard functionality when plugged
into a victim’s computer; the host unquestioningly allows such a
capability to be used. The malicious device is then able to inject
keystrokes to the computer in order to bring up a terminal and
gain administrative access. Fundamentally, there is an inability to
constrain device functionality within USB, coupled with a corre-
sponding lack of ability to know what types of functionalities a
device is capable of advertising and whether or not these are benign.
Previous work has focused on preventing USB attacks at the pro-
tocol level, through isolation-based approaches such as sandboxing
and virtualization [2, 57] or involving the user in the authorization
process [55]. These approaches suffer from a common problem: they
rely on a device’s external actions to demonstrate its trustworthi-
ness. Without a deeper understanding of the underlying software
controlling these devices, an external observer cannot with cer-
tainty ensure that a device is trustworthy. Even solutions such as
signed firmware give little evidence of its actual validity; signing
merely demonstrates that an entity has applied their private key to
a firmware, but does not in itself provide any assurance regarding
device integrity. Consequently, there is limited ability to validate
the trustworthiness and integrity of devices themselves.
In this paper, we address these concerns through the analysis of
firmware underlying USB devices. We create FirmUSB, a framework
that uses domain knowledge of the USB protocol to validate device
firmware against expected functionality through symbolic execu-
tion. USB devices are often small and resource-constrained, with
significantly different chip architectures than the ARM and x86
processors found on computers and smartphones. While substan-
tial past work has focused on firmware analysis of these processor
architectures [23, 48], comparatively little has been done on the mi-
crocontrollers that embedded USB devices often employ. We bring
architecture-specific support to existing frameworks and provide
informed guidance through USB-specific knowledge to improve
analysis. We have designed and implemented binary lifters to allow
for symbolic analysis of the Intel 8051 MCU, which represents a
Harvard architecture chip designed in 1980 that looks vastly differ-
ent from modern processor designs, but is commonly used in USB
flash drives as well as many other embedded environments. We use
two symbolic execution frameworks for our analysis in order to bet-
ter understand the benefits and challenges of different approaches
when using uncommon instruction architectures. We use Fie [28],
which uses LLVM as an Intermediate Representation (IR) and is
built on top of the popular KLEE symbolic execution engine [16], as
well as angr [49], which is designed to be used for binary analysis
and employs Valgrind’s VEX as an IR. FirmUSB is bottom-up, in
that it does not rely on the existence of source code to perform its
analysis. This is crucial for microcontroller firmware, for which
source code may be difficult if not impossible to publicly find for
many proprietary USB controllers. FirmUSB uses static analysis and
symbolic execution, to extract the semantics of a firmware image
in order to build a model of discovered firmware functionality for
comparison to expected functionality.
Our contributions are summarized as follows:
• Firmware Analysis Framework: We develop a USB-specific
firmware analysis framework to verify or determine the in-
tention of compiled USB controller firmware binaries run-
ning on the 8051/52 architectures. To our knowledge this is
the first 8051 lifter into the popular VEX and LLVM IRs.
• Domain-Informed Targeting: We show that FirmUSB de-
tects malicious activity in Phison firmware images for flash
drive controllers containing BadUSB, as well as EzHID HID
firmware images for 8051 containing malicious activity. For
the malicious Phison image, our domain-specific approach
speeds up targeting by a factor of 7 compared to uncon-
strained fully symbolic execution.
• Analysis of Existing Symbolic Frameworks: We provide
insights and describe the challenges of utilizing existing
tools to analyze binary firmware for embedded systems ar-
chitectures, and present guidance on how such tools can be
improved to deal with these architectures.
Outline. The rest of this paper is structured as follows: Section 2
provides background on embedded firmware analysis, our case
study on the 8051 architecture in the context of USB devices, and our
major challenges in analyzing black-box firmware using symbolic
execution. Section 3 presents a high-level overview of FirmUSB and
Section 4 follows with low-level details. Section 5 evaluates the per-
formance of our angr and Fie implementations on crafted 8051/52
binaries. We discuss key takeaways from our work in Section 6 and
mention what difficulties we experienced during development. We
discuss related work in Section 7 and conclude in Section 8.
2 BACKGROUND
2.1 Universal Serial Bus
The USB protocol provides a foundation for host-peripheral com-
munications and is a ubiquitous interface. USB is a host-master
protocol, which means that the host initiates all communication on
the underlying bus.1 This is true even for interrupt driven devices
such as keyboards. The underlying bus arbitration and low-level bit
stream are handled in dedicated hardware for speed and reliability.
In our work, we primarily focus on the device level configuration
and omit the study of lower-level aspects of USB (i.e. power man-
agement, speed negotiation, timing).
When a USB device is first plugged in to a host machine, un-
dergoes the process of enumeration. A device possesses a set of
descriptors including device, configuration, interface, and endpoint
descriptors. A device descriptor contains the vendor (VID) and prod-
uct (PID) identifiers, pointers to string descriptors, and device class
and protocol. VIDs are assigned to the vendor by the USB Imple-
mentor’s Forum (USB-IF). Vendors are then able to assign arbitrary
PIDs to their products. VIDs and PIDs should be unique but are
not required to be. The device class (bDeviceClass) and its defined
protocol (bDeviceProtocol) hint to the host what capabilities to
expect from the device. The last field in the device descriptor is the
number of configurations (bNumConfigurations). A USB device
may have multiple configuration descriptors, but only one may be
active at a time. This high level descriptor describes the number
of interfaces and power characteristics. Interface descriptors have
a specific interface class and subclass. This defines the expected
command set to the host operating system.
Two important device classes in the context of this paper are
the Human Interface Device (HID) (0x03h) and the Mass Storage
(0x08h) classes. Devices are free to have mixed-class interfaces,
which means they are considered to be composite devices. For ex-
ample, a physical flash drive could contain two interfaces – one
mass storage and the other HID. This would allow it to transfer
and store bulk data while possibly acting as a keyboard on the host
machine. Additionally, a device could at runtime switch configura-
tions from a pure mass storage device to a HID device. The final
descriptor of interest is the endpoint descriptor. Endpoints are es-
sentially mail boxes that have a direction (in and out), transfer type
(control, isochronous, bulk, or interrupt), poll rate, and maximum
packet size. By default, devices’ first endpoint (Endpoint0 or EP0)
respond to control transfers, which are mainly configuration details
and commands from and to the host machine. Other endpoints may
be used for pure data transfer.
The elements of the USB protocol that are implemented in hard-
ware and firmware varies based on to the specific USB controller.
For instance, some USB devices may be completely fixed in hard-
ware, meaning that their configuration descriptors, including their
vendor and product IDs, are static. In this work, we assume that the
firmware deals with all of the major descriptors and the hardware
just provides low-level USB signaling.
1USB OTG and USB 3.0 are the exceptions. While USB 3.0 and later devices allow
for device-initiated communication, such a paradigm is still relatively rare amongst
peripherals, which are overwhelmingly designed to respond to host queries.
2
Figure 1: An overview of FirmUSB’s primary flow through analyzing firmware.
USB Attacks. Exploits on the USB protocol and implementations
of it (e.g., on hosts, peripherals, and controllers) may occur from
the physical layer upwards. An example of a physical layer attack
could be a malicious USB device that destroys the bus by using
out-of-specification voltages and currents via large capacitors [8].
An example of a more subtle attack is a “BadUSB” attack [41]. This
attack acts completely within the USB protocol and abuses the trust
of users and the lack of USB device authenticity. During the USB
enumeration phase, the USB host will query the device in order to
discover its functionality via descriptors (e.g., keyboard, storage,
webcam, etc.), but a BadUSB device will misrepresent itself as an
unlikely device type. In concrete terms, a flash drive could claim
itself as a keyboard or network device without consequence. This
mismatch between physical device and presentation of capabilities
could be used to socially engineer users [58] who would trust a key-
board differently than a flash drive (e.g., not anticipating keystrokes
from their flash drive).
What actually constitutes a malicious or misrepresenting USB
device is simply a malicious application of the USB protocol. This
application which, depending on the device, runs on hardware, a mi-
crocontroller, a CPU, or any combination of these determines how
a device functions when exposed to the USB protocol. FirmUSB fo-
cuses specifically on the software that runs on USB microcontrollers,
in particular microcontrollers that utilize the 8051 architecture.
2.2 Firmware Analysis
Microcontroller devices are often overlooked, but with the explo-
sion of embedded and IoT devices, these are becoming woven in to
the fabric of our modern day society. It is thus vital to have methods
for demonstrating their trustworthiness. USB devices represent one
of many classes of devices that run firmware, but are particularly
interesting to study, both due to the widespread deployment of
existing devices, and because in newer computers, many interfaces
are being replaced with USB-C connections to provide all peripheral
functionality. While the physical signal characteristics may differ
3
between USB connection types and protocol versions, the same
security issues (e.g., the USB-IF states that users are responsible the
security of USB devices) remain present in all devices.
8051 Architecture. The Intel MCS-51, also known as the 8051, was
developed by Intel Corporation in 1980 [63] for use in embedded
systems. Despite the 8051 being nearly 40 years old, it remains a
popular design due to its reliability, simplicity, and low cost, and
can be purchased in lightweight microcontrollers or embedded into
FPGA/ASIC designs via an IP core. The 8051 is an 8-bit microcon-
troller based on a Harvard architecture and contains four major
memory spaces: code, on-board memory (RAM), external RAM
(XRAM), and Special Function Registers (SFRs). The 8051 contains
128 bytes of RAM and its extended variant, the 8052, contains 256
bytes and additional SFRs and timers. The 8052 has no instruction
set differences from the 8051. This microcontroller has 32 regis-
ters spread across four memory-mapped banks and many SFRs for
controlling the processor’s peripherals. The notable SFRs are PSW,
which controls the register banks and contains the carry flag, and
the IE register, which controls interrupt functionality.
Intermediate Representation. In order to analyze firmware, ma-
chine code needs to be translated, or lifted, into an architecture-
independent representation. An Intermediate Representation (IR)
aims to be semantically equivalent to the underlying machine code,
while being generic enough to support many different instruction
operations across many architectures. There are many existing IRs
in use today, with each having a specific focus and purpose. There-
fore, an important design choice in binary analysis is the IR to use.
By supporting a single unified IR, the footprint of the supporting