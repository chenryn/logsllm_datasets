p ("a".."f").to_a     #=> ["a", "b", "c", "d", "e", "f"]
p ("a"..."f").to_a    #=> ["a", "b", "c", "d", "e"]
```
在 `Range` 对象内部，可以使用 `succ` 方法根据起点值逐个生成接下来的值。具体来说就是，对 `succ` 方法的返回值调用 `succ` 方法，然后对该返回值再调用 `succ` 方法……直到得到的值比终点值大时才结束处理。
```ruby
> irb --simple-prompt
>> val = "a"
=> "a"
>> val = val.succ
=> "b"
>> val = val.succ
=> "c"
>> val = val.succ
=> "d"
```
# 运算符的优先级
运算符是有优先级的，表达式中有多个运算符时，优先级高的会被优先执行。例如四则运算中的“先乘除后加减”。
表达式	| 含义	| 结果
- | - | -
1 + 2 * 3	        | 1 + (2 * 3)	            | 7
"a" + "b" * 2 + "c"	| "a" + ("b" * 2) + "c"	    | "abbc"
3 * 2 ** 3	        | 3 * (2 ** 3)	            | 24
2 + 3  3	    | (2  3)	    | true
如果不想按照优先级的顺序进行计算，可以用 `()` 将希望优先计算的部分括起来，当有多个 `()` 时，则从最内侧的 `()` 开始算起。因此，如果还未能熟练掌握运算符的优先顺序，建议多使用 `()`。
# 定义运算符
Ruby 的运算符大多都是作为实例方法提供给我们使用的，因此我们可以很方便地定义或者重定义运算符，改变其原有的含义。但是，部分运算符是不允许修改的。
- ::
- &&
- ||
- ..
- ...
- ?:
- not
- =
- and
- or
**二元运算符**
定义四则运算符等二元运算符时，会将运算符名作为方法名，按照定义方法的做法重定义运算符。运算符的左侧为接收者，右侧被作为方法的参数传递。在程序中，我们将为表示二元坐标的 `Point` 类定义运算符 `+` 以及 `-`。
```ruby
class Point
  attr_reader :x, :y
  def initialize(x=0, y=0)
    @x, @y = x, y
  end
  def inspect  # 用于显示
    "(#{x}, #{y})"
  end
  def +(other)  # x、y 分别进行加法运算
    self.class.new(x + other.x, y + other.y)
  end
  def -(other)  # x、y 分别进行减法运算
    self.class.new(x - other.x, y - other.y)
  end
end
point0 = Point.new(3, 6)
point1 = Point.new(1, 8)
p point0           #=> (3, 6)
p point1           #=> (1, 8)
p point0 + point1  #=> (4, 14)
p point0 - point1  #=> (2, -2)
```
如上所示，定义二元运算符时，我们常把参数名定义为 `other`。
在定义运算符 `+` 和 `-` 的程序中，创建新的 `Point` 对象时，我们使用了 `self.class.new`。而像下面这样，直接使用 `Point.new` 方法也能达到同样的效果。
```ruby
def +(other)
  Point.new(x + other.x, y + other.y)
end
```
使用上面的写法时，返回值一定是 `Point` 对象。如果 `Point` 类的子类使用了 `+` 和 `-`，则返回的对象应该属于 `Point` 类的子类，但是这样的写法却只能返回 `Point` 类的对象。在方法内创建当前类的对象时，不直接写类名，而是使用 `self.class`，那么创建的类就是实际调用 `new` 方法时的类，这样就可以灵活地处理继承与 `Mix-in` 了。
**puts 方法与 p 方法的不同点**
上面的代码中定义了用于显示的 `inspect` 方法，在 `p` 方法中把对象转换为字符串时会用到该方法。另外，使用 `to_s` 方法也可以把对象转换为字符串，在 `puts`、`print` 方法中都有使用 `to_s` 方法。下面我们来看看两者的区别。
```ruby
> irb --simple-prompt
>> str = "Ruby 基础教程"
=> "Ruby 基础教程"
>> str.to_s
=> "Ruby 基础教程"
>> str.inspect
=> "\"Ruby 基础教程\""
```
`String#to_s` 的返回结果与原字符串相同，但 `String#inspect` 的返回结果中却包含了 `\"`。这是因为 `p` 方法在输出字符串时，为了让我们更明确地知道输出的结果就是字符串而进行了相应的处理。这两个方法的区别在于，作为程序运行结果输出时用 `to_s` 方法；给程序员确认程序状态、调查对象内部信息等时用 `inspect` 方法。
除了 `puts` 方法、`print` 方法外，`to_s` 方法还被广泛应用在 `Array#join` 方法等内部需要做字符串处理的方法中。
`inspect` 方法可以说是主要使用 `p` 方法进行输出的方法。例如，irb 命令的各行结果的显示就用到了 `inspect` 方法。我们在写程序的时候，如果能根据实际情况选择适当的方法，就会达到事半功倍的效果。
**一元运算符**
可定义的一元运算符有 `+`、`-`、`~`、`!` 4 个。它们分别以 +@、-@、~@、!@ 为方法名进行方法的定义。下面就让我们试试在 `Point` 类中定义这几个运算符。这里需要注意的是，一元运算符都是没有参数的。
```ruby
class Point
  ┊
  def +@
    dup                     # 返回自己的副本
  end
  def -@
    self.class.new(-x, -y)  # 颠倒x、y 各自的正负
  end
  def ~@
    self.class.new(-y, x)   # 使坐标翻转90 度
  end
end
point = Point.new(3, 6)
p +point  #=> (3, 6)
p -point  #=> (-3, -6)
p ~point  #=> (-6, 3)
```
**下标方法**
数组、散列中的 `obj[i]` 以及 `obj[i]=x` 这样的方法，称为下标方法。定义下标方法时的方法名分别为 `[]` 和 `[]=`。
在代码中,定义 `Point` 类实例 `pt` 的下标方法，实现以 `v[0]` 的形式访问 `pt.x`，以 `v[1]` 的形式访问 `pt.y`。
```ruby
class Point
  ┊
  def [](index)
    case index
    when 0
      x
    when 1
      y
    else
      raise ArgumentError, "out of range `#{index}'"
    end
  end
  def []=(index, val)
    case index
    when 0
      self.x = val
    when 1
      self.y = val
    else
      raise ArgumentError, "out of range `#{index}'"
    end
  end
end
point = Point.new(3, 6)
p point[0]           #=> 3
p point[1] = 2       #=> 2
p point[1]           #=> 2
p point[2]           #=> 错误（ArgumentError）
```
参数 `index` 代表的是数组的下标。由于本例中的类只有两个元素，因此当索引值指定 2 以上的数值时，程序就会认为是参数错误并抛出异常。