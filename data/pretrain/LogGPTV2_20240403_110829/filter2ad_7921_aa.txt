#### 0x00 写在前面
前几天仔细跟了下这个漏洞，学到了很多东西，尽量详细地对漏洞分析和相关基础知识做了记录。
相关知识点用最通俗易懂的方式进行描述，应该能清晰的明白漏洞原理。
**零基础慎入，因为一不小心你就看懂了。**
#### 0x01 环境搭建
以tomcat
8.5.46版本为例进行漏洞分析，首先下载tomcat源码：
搭建过程可以参考这篇Paper：[Tomcat源码编译（IDEA）](https://blog.csdn.net/qq_35262405/article/details/101780644)，跟着这篇Paper一步一步搭建完成后，运行，随后浏览器访问
解决办法是IDEA中找到`org.apache.catalina.startup.ContextConfig`，增加如下的一行代码，将JSP解析器初始化:
    context.addServletContainerInitializer(new JasperInitializer(), null);
随后再次启动Tomcat，浏览器就能正常看到Tomcat的主页了。查看端口开放的开放情况，Tomcat运行开启了 **8009** 和 **8080**
端口。
#### 0x02 基础简介
##### (1) Tomcat Connector(连接器)
首先来说一下Tomcat的Connector组件，Connector组件的主要职责就是负责 **接收客户端连接** 和 **客户端请求的处理加工**
。每个Connector会监听一个指定端口，分别负责对请求报文的解析和响应报文组装，解析过程封装Request对象，而组装过程封装Response对象。
举个例子，如果把Tomcat比作一个城堡，那么Connector组件就是城堡的城门，为进出城堡的人们提供通道。当然，可能有多个城门，每个城门代表不同的通道。而Tomcat默认配置启动，开了两个城门（通道）：一个是监听8080端口的
**HTTP Connector** ，另一个是监听8009端口的 **AJP Connector** 。
Tomcat组件相关的配置文件是在`conf/server.xml`，配置文件中每一个元素都对应了Tomcat的一个组件（可以在配置文件中找到如下两项，配置了两个Connector组件）：
     .....
HTTP Connector很好理解，通过浏览器访问Tomcat服务器的Web应用时，使用的就是这个连接器；
AJP Connector是通过AJP协议和一个Web容器进行交互。在将Tomcat与其他HTTP服务器（一般是Apache
）集成时，就需要用到这个连接器。AJP协议是采用二进制形式代替文本形式传输，相比HTTP这种纯文本的协议来说，效率和性能更高，也做了很多优化。
显然，浏览器只支持HTTP协议，并不能直接支持AJP协议。所以实际情况是，通过Apache的proxy_ajp模块进行反向代理，暴露成http协议（8009端口）给客户端访问，大致如下图所示：
##### (2) Servlet(服务程序)
Servlet意为服务程序，也可简单理解为是一种用来处理网络请求的一套规范。主要作用是给上级容器(Tomcat)提供doGet()和doPost()等方法，其生命周期实例化、初始化、调用、销毁受控于Tomcat容器。有个例子可以很好理解：想象一下，在一栋大楼里有非常多特殊服务者Servlet，这栋大楼有一套智能系统帮助接待顾客引导他们去所需的服务提供者（Servlet）那接受服务。这里顾客就是一个个请求，特殊服务者就是Servlet，而这套智能系统就是Tomcat容器。
Tomcat中Servlet的配置是在`conf/web.xml`。Tomcat默认配置定义了两个servlet，分别为`DefaultServlet`和`JspServlet`：
            default
            org.apache.catalina.servlets.DefaultServlet
            ......
            ......
            jsp
            org.apache.jasper.servlet.JspServlet
            ......
            ......
        ......
        ......
            default
            /
            jsp
            *.jsp
            *.jspx
所有的请求进入tomcat，都会流经servlet。由注释可以很明显看出，如果没有匹配到任何应用指定的servlet，那么就会流到默认的servlet(即`DefaultServlet`)，而`JspServlet`负责处理所有JSP文件的请求。
##### (3) Tomcat内部处理请求流程
Tomcat内部处理请求的流程第一次看可能觉得会有点复杂。网上很多分析tomcat内部架构的文章，看几篇就能明白个大概了。网上看到张图，简单修改重新绘制了下，介绍一下Tomcat内部处理HTTP请求的流程，便于理解后续的漏洞分析：
  1. 用户点击网页内容，请求被发送到本机端口8080，被Connector获得（ **Connector中的Processor用于封装Request，Adapter用于将封装好的Request交给Container** ）。
  2. Connector把该请求交给Container中的Engine来处理，并等待Engine的回应。
  3. Engine获得请求localhost/test/index.jsp，匹配所有的虚拟主机Host。
  4. Engine匹配到名为localhost的Host（即使匹配不到也把请求交给该Host处理，因为该Host被定义为该Engine的默认主机），名为localhost的Host获得请求/test/index.jsp，匹配它所拥有的所有的Context。Host匹配到路径为/test的Context（如果匹配不到就把该请求交给路径名为" "的Context去处理）。
  5. path="/test"的Context获得请求/index.jsp，在它的mapping table中寻找出对应的Servlet。Context匹配到URL PATTERN为*.jsp的Servlet，对应于JspServlet类（ **匹配不到指定Servlet的请求对应DefaultServlet类** ）。
  6. Wrapper是最底层的容器，负责管理一个Servlet。构造HttpServletRequest对象和HttpServletResponse对象，作为参数调用JspServlet的doGet()或doPost()，执行业务逻辑、数据存储等程序。
  7. Context把执行完之后的HttpServletResponse对象返回给Host。
  8. Host把HttpServletResponse对象返回给Engine。
  9. Engine把HttpServletResponse对象返回Connector。
  10. Connector把HttpServletResponse对象返回给客户Browser。
#### 0x03 漏洞分析
理解了上文的基础，下面开始分析漏洞。这个漏洞主要是通过AJP协议（8009端口）触发。正是由于上文所述，Ajp协议的请求在Tomcat内的处理流程与我们上文介绍的Tomcat处理HTTP请求流程类似。我们构造两个不同的请求，经过tomcat内部处理流程，一个走`default
servlet`(DefaultServlet)，另一个走`jsp servlet`(JspServlet)，可导致的不同的漏洞。
**文件读取漏洞走的是DefaultServlet，文件包含漏洞走的是JspServlet。**
下面开始逐一进行分析，测试使用的POC如下：
##### (1) 文件读取漏洞
通过构造AJP协议请求，我们可以读取到 我们以读取`WEB-INF/web.xml`文件为例。
POC中赋值了四个很重要的参数，先在此说明：
    # 请求url