ing elements:
 An OSCORE version number, currently always set to 1
 The COSE algorithm identifier
 The Sender ID
 The Partial IV
 An options string. This is used to encode CoAP headers but is blank in this
example.
The COSE structure is then encrypted with the sender key.
DEFINITION
COSE allows messages to have external additional authenticated data,
which are included in the message authentication code (MAC) calculation but
Listing 13.11
Deriving the per-message nonce
Check the sequence 
number is not too large.
Check the Sender
ID fits in the
remaining space.
Encode the Sender ID 
length followed by the 
Sender ID left-padded to 
6 less than the IV length.
Encode the
sequence
number
as a 5-byte
big-endian
integer.
XOR the result with the Common 
IV to derive the final nonce.
505
End-to-end authentication
not sent as part of the message itself. The recipient must be able to inde-
pendently recreate this external data otherwise decryption will fail.
long sequenceNumber = 20L;
byte[] nonce = nonce(13, sequenceNumber, senderId, commonIv);    
byte[] partialIv = new byte[] { (byte) sequenceNumber };         
var message = new Encrypt0Message();
message.addAttribute(HeaderKeys.Algorithm,             
        algorithm.AsCBOR(), Attribute.DO_NOT_SEND);    
message.addAttribute(HeaderKeys.IV,                    
        nonce, Attribute.DO_NOT_SEND);                 
message.addAttribute(HeaderKeys.PARTIAL_IV,   
        partialIv, Attribute.UNPROTECTED);    
message.addAttribute(HeaderKeys.KID,          
        senderId, Attribute.UNPROTECTED);     
message.SetContent(                                       
    new byte[] { 0x01, (byte) 0xb3, 0x74, 0x76, 0x31});   
var associatedData = CBORObject.NewArray();           
associatedData.Add(1);                                
associatedData.Add(algorithm.AsCBOR());               
associatedData.Add(senderId);                         
associatedData.Add(partialIv);                        
associatedData.Add(new byte[0]);                      
message.setExternal(associatedData.EncodeToBytes());  
Security.addProvider(new BouncyCastleProvider());   
message.encrypt(senderKey.getEncoded());            
The encrypted message is then encoded into the application protocol, such as CoAP
or HTTP and sent to the recipient. Details of this encoding are given in section 6 of
the OSCORE specification. The recipient can recreate the nonce from its own recip-
ient security context, together with the Partial IV and Sender ID encoded into the
message.
 The recipient is responsible for checking that the Partial IV has not been seen
before to prevent replay attacks. When OSCORE is transmitted over a reliable proto-
col such as HTTP, this can be achieved by keeping track of the last Partial IV received
and ensuring that any new messages always use a larger number. For unreliable proto-
cols such as CoAP over UDP, where messages may arrive out of order, you can use the
algorithm from RFC 4303 (http://mng.bz/4BjV). This approach maintains a window
of allowed sequence numbers between a minimum and maximum value that the
recipient will accept and explicitly records which values in that range have been
received. If the recipient is a cluster of servers, such as a typical cloud-hosted API, then
this state must be synchronized between all servers to prevent replay attacks. Alterna-
tively, sticky load balancing can be used to ensure requests from the same device are
always delivered to the same server instance, shown in figure 13.5, but this can be
Listing 13.12
Encrypting the plaintext
Generate the 
nonce and 
encode the 
Partial IV.
Configure the
algorithm
and nonce.
Set the Partial IV 
and Sender ID as 
unprotected headers.
Set the
content
field to the
plaintext to
encrypt.
Encode the external 
associated data.
Ensure Bouncy Castle is 
loaded for AES-CCM support, 
then encrypt the message.
506
CHAPTER 13
Securing IoT APIs
problematic in environments where servers are frequently added or removed. Sec-
tion 13.1.5 discusses an alternative approach to preventing replay attacks that can be
effective to REST APIs.
DEFINITION
Sticky load balancing is a setting supported by most load balancers
that ensures that API requests from a device or client are always delivered to
the same server instance. Although this can help with stateful connections, it
can harm scalability and is generally discouraged.
13.2.2 Avoiding replay in REST APIs
All solutions to message replay involve the client and server maintaining some state.
However, in some cases you can avoid the need for per-client state to prevent replay.
For example, requests that only read data are harmless if replayed, so long as they do
not require significant processing on the server and the responses are kept confiden-
tial. Some requests that perform operations are also harmless to replay if the request
is idempotent.
DEFINITION
An operation is idempotent if performing it multiple times has the
same effect as performing it just once. Idempotent operations are important
for reliability because if a request fails because of a network error, the client
can safely retry it.
Device 1
Device 2
Device 3
Device 4
Load balancer
Server 1
Server 2
Server 3
In normal load balancing, each request
from a device can be sent to any server,
providing best use of resources.
With sticky load balancing, all
requests from the same device
always go to the same server.
Figure 13.5
In sticky load balancing, all requests from one 
device are always handled by the same server. This simplifies 
state management but reduces scalability and can cause 
problems if that server restarts or is removed from the cluster.
507
End-to-end authentication
The HTTP specification requires the read-only methods GET, HEAD, and OPTIONS,
along with PUT and DELETE requests, to all be idempotent. Only the POST and
PATCH methods are not generally idempotent. 
WARNING
Even if you stick to PUT requests instead of POST, this doesn’t
mean that your requests are always safe from replay.
The problem is that the definition of idempotency says nothing about what happens if
another request occurs in between the original request and the replay. For example,
suppose you send a PUT request updating a page on a website, but you lose your net-
work connection and do not know if the request succeeded or not. Because the
request is idempotent, you send it again. Unknown to you, one of your colleagues in
the meantime sent a DELETE request because the document contained sensitive
information that shouldn’t have been published. Your replayed PUT request arrives
afterwards, and the document is resurrected, sensitive data and all. An attacker can
replay requests to restore an old version of a resource, even though all the operations
were individually idempotent.
 Thankfully, there are several mechanisms you can use to ensure that no other
request has occurred in the meantime. Many updates to a resource follow the pattern
of first reading the current version and then sending an updated version. You can
ensure that nobody has changed the resource since you read it using one of two stan-
dard HTTP mechanisms:
 The server can return a Last-Modified header when reading a resource that
indicates the date and time when it was last modified. The client can then send
an If-Unmodified-Since header in its update request with the same timestamp.
If the resource has changed in the meantime, then the request will be rejected
with a 412 Precondition Failed status.2 The main downside of Last-Modified
headers is that they are limited to the nearest second, so are unable to detect
changes occurring more frequently.
 Alternatively, the server can return an ETag (Entity Tag) header that should
change whenever the resource changes as shown in figure 13.6. Typically, the
ETag is either a version number or a cryptographic hash of the contents of
the resource. The client can then send an If-Matches header containing the
expected ETag when it performs an update. If the resource has changed in
the meantime, then the ETag will be different and the server will respond
with a 412 status-code and reject the request.
WARNING
Although a cryptographic hash can be appealing as an ETag, it
does mean that the ETag will revert to a previous value if the content does.
This allows an attacker to replay any old requests with a matching ETag. You
2 If the server can determine that the current state of the resource happens to match the requested state, then
it can also return a success status code as if the request succeeded in this case. But in this case the request is
really idempotent anyway.
508
CHAPTER 13
Securing IoT APIs
can prevent this by including a counter or timestamp in the ETag calculation
so that the ETag is always different even if the content is the same.
Listing 13.13 shows an example of updating a resource using a simple monotonic
counter as the ETag. In this case, you can use an AtomicInteger class to hold the cur-
rent ETag value, using the atomic compareAndSet method to increment the value if
the If-Matches header in the request matches the current value. Alternatively, you can
store the ETag values for resources in the database alongside the data for a resource
and update them in a transaction. If the If-Matches header in the request doesn’t
match the current value, then a 412 Precondition Failed header is returned; otherwise,
the resource is updated and a new ETag is returned.
Client
API
GET/resource/xyz
Response, ETag: abc123
PUT/resource/xyz
If-Matches: abc123
Attacker
Captures request
object
PUT/resource/xyz
If-Matches: abc123
412 Precondition Failed
The client sends a request including the
expected ETag in the If-Matches header.
When the attacker tries to replay
the captured request, it fails because
the ETag no longer matches.
Figure 13.6
A client can prevent replay of authenticated request 
objects by including an If-Matches header with the expected ETag of 
the resource. The update will modify the resource and cause the ETag 
to change, so if an attacker tries to replay the request, it will fail with 
a 412 Precondition Failed error.
509
End-to-end authentication
var etag = new AtomicInteger(42);
put("/test", (request, response) -> {
    var expectedEtag = parseInt(request.headers("If-Matches"));   
    if (!etag.compareAndSet(expectedEtag, expectedEtag + 1)) {    
        response.status(412);    
        return null;             
    }                            
    System.out.println("Updating resource with new content: " +
        request.body());
    response.status(200);                                       
    response.header("ETag", String.valueOf(expectedEtag + 1));  
    response.type("text/plain");
    return "OK";
});
The ETag mechanism can also be used to prevent replay of a PUT request that is
intended to create a resource that doesn’t yet exist. Because the resource doesn’t
exist, there is no existing ETag or Last-Modified date to include. An attacker could
replay this message to overwrite a later version of the resource with the original con-
tent. To prevent this, you can include an If-None-Match header with the special
value *, which tells the server to reject the request if there is any existing version of
this resource at all.
TIP
The Constrained Application Protocol (CoAP), often used for implementing
REST APIs in constrained environments, doesn’t support the Last-Modified
or If-Unmodified-Since headers, but it does support ETags along with If-
Matches and If-None-Match. In CoAP, headers are known as options.
ENCODING HEADERS WITH END-TO-END SECURITY
As explained in chapter 12, in an end-to-end IoT application, a device may not be able
to directly talk to the API in HTTP (or CoAP) but must instead pass an authenticated
message through multiple intermediate proxies. Even if each proxy supports HTTP,
the client may not trust those proxies not to interfere with the message if there isn’t
an end-to-end TLS connection. The solution is to encode the HTTP headers along
with the request data into an encrypted request object, as shown in listing 13.14. 
DEFINITION
A request object is an API request that is encapsulated as a single
data object that can be encrypted and authenticated as one element. The
request object captures the data in the request as well as headers and other
metadata required by the request.
In this example, the headers are encoded as a CBOR map, which is then combined
with the request body and an indication of the expected HTTP method to create the
overall request object. The entire object is then encrypted and authenticated using
Listing 13.13
Using ETags to prevent replay
Check the 
current ETag 
matches the 
one in the 
request.
If not,
return a 412
Precondition
Failed
response.
Otherwise, 
return the 
new ETag after 
updating the 
resource.
510
CHAPTER 13
Securing IoT APIs
NaCl’s CryptoBox functionality. OSCORE, discussed in section 13.1.4, is an example
of an end-to-end protocol using request objects. The request objects in OSCORE are
CoAP messages encrypted with COSE.
TIP
Full source code for this example is provided in the GitHub repository
accompanying the book at http://mng.bz/QxWj.
var revisionEtag = "42";                    
var headers = CBORObject.NewMap()           
        .Add("If-Matches", revisionEtag);   
var body = CBORObject.NewMap()   
        .Add("foo", "bar")   
        .Add("data", 12345);   
var request = CBORObject.NewMap()
        .Add("method", "PUT")            
        .Add("headers", headers)         
        .Add("body", body);              
var sent = CryptoBox.encrypt(clientKeys.getPrivate(),         
        serverKeys.getPublic(), request.EncodeToBytes());     
To validate the request, the API server should decrypt the request object and then ver-
ify that the headers and HTTP request method match those specified in the object. If
they don’t match, then the request should be rejected as invalid.
CAUTION
You should always ensure the actual HTTP request headers match the
request object rather than replacing them. Otherwise, an attacker can use the
request object to bypass security filtering performed by Web Application Fire-
walls and other security controls. You should never let a request object change
the HTTP method because many security checks in web browsers rely on it.
Listing 13.15 shows how to validate a request object in a filter for the Spark HTTP
framework you’ve used in earlier chapters. The request object is decrypted using NaCl.
Because this is authenticated encryption, the decryption process will fail if the request
has been faked or tampered with. You should then verify that the HTTP method of the
request matches the method included in the request object, and that any headers listed
in the request object are present with the expected values. If any details don’t match,
then you should reject the request with an appropriate error code and message. Finally,
if all checks pass, then you can store the decrypted request body in an attribute so that it
can easily be retrieved without having to decrypt the message again.
before((request, response) -> {
    var encryptedRequest = CryptoBox.fromString(request.body());    
    var decrypted = encryptedRequest.decrypt(                       
            serverKeys.getPrivate(), clientKeys.getPublic());       
    var cbor = CBORObject.DecodeFromBytes(decrypted);               
Listing 13.14
Encoding HTTP headers into a request object
Listing 13.15
Validating a request object
Encode any 
required HTTP 
headers into CBOR.
Encode the headers 
and body, along with 
the HTTP method, as 
a single object.
Encrypt and 
authenticate 
the entire 
request object.
Decrypt the 
request object 
and decode it.
511
OAuth2 for constrained environments
    if (!cbor.get("method").AsString()             
            .equals(request.requestMethod())) {    
        halt(403);                                 
    }                                              
    var expectedHeaders = cbor.get("headers");                      
    for (var headerName : expectedHeaders.getKeys()) {              
        if (!expectedHeaders.get(headerName).AsString()             
                .equals(request.headers(headerName.AsString()))) {  
            halt(403);                                              
        }                                                           
    }                                                               
    request.attribute("decryptedRequest", cbor.get("body"));   
});
13.3
OAuth2 for constrained environments
Throughout this book, OAuth2 has cropped up repeatedly as a common approach to
securing APIs in many different environments. What started as a way to do delegated
authorization in traditional web applications has expanded to encompass mobile
Pop quiz
3
Entity authentication requires which additional property on top of message
authentication? 
a
Fuzziness
b
Friskiness
c
Funkiness
d
Freshness
4
Which of the following are ways of ensuring authentication freshness? (There are
multiple correct answers.)
a
Deodorant
b
Timestamps
c
Unique nonces
d
Challenge-response protocols
e
Message authentication codes
5
Which HTTP header is used to ensure that the ETag of a resource matches an
expected value?
a