PG外部表应用
mysql_fdw, oss_fdw
（直接读写MySQL数据，冷热分离、外部归档表）
阿里云
digoal
目录
• mysql_fdw
RDS PG
• 从外部表直接读写mysql实例数据
• oss_fdw
• 冷热分离
• 归档历史数据到oss 远程访问mysql表
• 从外部表直接读写oss文件 归档到oss
冷热分离存储
OSS海量对象存储 RDS MySQL
mysql_fdw
• server(host:port)
• mysql的网络配置
• user mapping(user:pwd)
• pg数据库user如何连接到以上mysql server（mysql的用户密码）
• foreign table(dbname,tablename,column define)
• mysql表结构如何映射到pg外部表
环境
• RDS MySQL
• RDS PG 12
• 相同vpc , vswitch
• pg实例可以通过vpc内网访问mysql server
• mysql数据，使用第5课的测试表和数据
使用第5课生成数据
• test_mm
• test_innodb
创建插件、mysql server、映射用户密码
使用rds_superuser创建 extension
create extension mysql_fdw ;
创建 mysql server
CREATE SERVER mysql_1
FOREIGN DATA WRAPPER mysql_fdw
OPTIONS (host 'mysql网络地址', port 'mysql端口');
设置 pg数据库用户digoal的user mapping
CREATE USER MAPPING FOR digoal
SERVER mysql_1
OPTIONS (username 'mysqluser', password 'mysqluserpwd');
方法1，单独建外部表
CREATE FOREIGN TABLE t1(
id INT8 NOT NULL,
user_id VARCHAR (20) NOT NULL,
group_id INT8 NOT NULL,
create_time timestamp NOT NULL
)
SERVER mysql_1
OPTIONS (dbname 'db1', table_name 'test_mm');
db1=> select count(*) from t1;
count
---------
1000000
(1 row)
方法2，一次性import所有外部表
db1=> create schema ft;
CREATE SCHEMA
db1=> import foreign schema db1 from server mysql_1 into ft;
IMPORT FOREIGN SCHEMA
db1=> \det ft.*
List of foreign tables
Schema | Table | Server
--------+-------------+---------
ft | test_innodb | mysql_1
ft | test_mm | mysql_1
(2 rows)
db1=> select count(*) from ft.test_mm;
count
---------
1000000
(1 row)
查询、观察远程sql
db1=> select * from t1 where id=2;
id | user_id | group_id | create_time
----+----------------------+----------+---------------------
2 | qGZKzux5FVrfN5RUN4QO | 19 | 2020-01-08 15:07:21
(1 row)
db1=> explain verbose select * from t1 where id=2;
QUERY PLAN
-----------------------------------------------------------------------------------------------------------
Foreign Scan on digoal.t1 (cost=25.00..1025.00 rows=1000 width=82)
Output: id, user_id, group_id, create_time
Remote server startup cost: 25
Remote query: SELECT `id`, `user_id`, `group_id`, `create_time` FROM `db1`.`test_mm` WHERE ((`id` = 2))
(4 rows)
条件没有下推，会导致传输所有记录
db1=> explain verbose select * from t1 limit 100;
QUERY PLAN
----------------------------------------------------------------------------------------------
Limit (cost=25.00..125.00 rows=100 width=82)
Output: id, user_id, group_id, create_time
-> Foreign Scan on digoal.t1 (cost=25.00..1025.00 rows=1000 width=82)
Output: id, user_id, group_id, create_time
Remote server startup cost: 25
Remote query: SELECT `id`, `user_id`, `group_id`, `create_time` FROM `db1`.`test_mm`
(6 rows)
插入远程mysql
db1=> explain verbose insert into t1 (user_id, group_id, create_time) values ('digoal', 123, now());
QUERY PLAN
-------------------------------------------------------------------------------------
Insert on digoal.t1 (cost=0.00..0.01 rows=1 width=82)
-> Result (cost=0.00..0.01 rows=1 width=82)
Output: NULL::bigint, 'digoal'::character varying(20), '123'::bigint, now()
(3 rows)
db1=> insert into t1 (user_id, group_id, create_time) values ('digoal', 123, now());
INSERT 0 1
db1=> select * from t1 where user_id='digoal';
id | user_id | group_id | create_time
---------+---------+----------+---------------------
1000003 | digoal | 123 | 2020-01-08 16:11:05
(1 row)
更新远程mysql
db1=> explain verbose update t1 set group_id=321 where id=1000003;
QUERY PLAN
----------------------------------------------------------------------------------------------------------------------
Update on digoal.t1 (cost=25.00..1025.00 rows=1000 width=90)
-> Foreign Scan on digoal.t1 (cost=25.00..1025.00 rows=1000 width=90)
Output: id, user_id, '321'::bigint, create_time, id
Remote server startup cost: 25
Remote query: SELECT `id`, `user_id`, `create_time` FROM `db1`.`test_mm` WHERE ((`id` = 1000003)) FOR UPDATE
(5 rows)
db1=> update t1 set group_id=321 where id=1000003;
UPDATE 1
db1=> select * from t1 where user_id='digoal';
id | user_id | group_id | create_time
---------+---------+----------+---------------------
1000003 | digoal | 321 | 2020-01-08 16:11:05
(1 row)
删除远程mysql记录
db1=> explain verbose delete from t1 where id=1000003;
QUERY PLAN
--------------------------------------------------------------------------------------------
Delete on digoal.t1 (cost=25.00..1025.00 rows=1000 width=8)
-> Foreign Scan on digoal.t1 (cost=25.00..1025.00 rows=1000 width=8)
Output: id
Remote server startup cost: 25
Remote query: SELECT `id` FROM `db1`.`test_mm` WHERE ((`id` = 1000003)) FOR UPDATE
(5 rows)
db1=> delete from t1 where id=1000003;
DELETE 1
db1=> select * from t1 where user_id='digoal';
id | user_id | group_id | create_time
----+---------+----------+-------------
(0 rows)
注意
• 检查explain verbose，如果没有push down，需要返回全表数据
到pg
查询有哪些外部表、server、用户映射
db1=> select * from pg_foreign_server ;
oid | srvname | srvowner | srvfdw | srvtype | srvversion | srvacl | srvoptions
-------+---------+----------+--------+---------+------------+--------+-------------------------------------------------------------------
16561 | mysql_1 | 16385 | 16559 | | | | {host=rm-xxxx.mysql.rds.aliyuncs.com,port=3306}
(1 row)
db1=> \h alter server
Command: ALTER SERVER
Description: change the definition of a foreign server
Syntax:
ALTER SERVER name [ VERSION 'new_version' ]
[ OPTIONS ( [ ADD | SET | DROP ] option ['value'] [, ... ] ) ]
ALTER SERVER name OWNER TO { new_owner | CURRENT_USER | SESSION_USER }
ALTER SERVER name RENAME TO new_name
URL: https://www.postgresql.org/docs/12/sql-alterserver.html
查询有哪些外部表、server、用户映射
db1=> \des db1=> \det
List of foreign servers List of foreign tables
Name | Owner | Foreign-data wrapper Schema | Table | Server
------------+--------+---------------------- --------+---------+------------
mysql_1 | digoal | mysql_fdw public | oss_tb1 | ossserver1
ossserver1 | digoal | oss_fdw public | oss_tb2 | ossserver1
(2 rows) public | test_mm | mysql_1
(3 rows)
db1=> \deu
List of user mappings
Server | User name
---------+-----------
mysql_1 | digoal
(1 row)