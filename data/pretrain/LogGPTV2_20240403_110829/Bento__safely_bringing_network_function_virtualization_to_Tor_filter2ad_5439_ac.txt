(even if the middlebox policy allowed for more).
6 BENTO’S SECURITY PROPERTIES
We evaluate how Bento achieves its security goals from §4.
6.1 Attacks Against Functions
One of our primary goals is to protect functions from middleboxes,
and from other functions running on those middleboxes. We envi-
sion two classes of attack:
The first class involves altering or exfiltrating data or code as it
executes. Conclaves give Bento strong guarantees of confidentiality
and integrity [34], subject to the reliability of the trusted hardware.
Data stored (and code run) in a conclave is protected against inspec-
tion and tampering from both other applications and an adversary
with physical access. Thus, even if a middlebox and adversarial
function were to collude, the code and data are protected.
Alternatively, an attacker might try to inject packets into a func-
tion that he himself does not control. We prevent this attack through
the invocation token provided on function load. This token is then
required to direct any further communication or requests to the
running function (see §5.3).
6.2 Attacks Against Middleboxes
We envision several concerns that a Bento middlebox operator
might have about its safety. We discuss them here, along with how
our design helps to prevent them.
Running arbitrary code One of the benefits of Bento is its ability
to allow for arbitrary code. This of course brings with it concern
that third-party programs may run amok. Bento does not seek
to limit what a third-party program can do within a container,
but rather what side-effects it can have on the system itself. As
described in §5.5, Bento achieves this with middlebox node policies
and function manifests.
Resource exhaustion attacks A malicious function could try to
consume a large amount of resources on a Bento box. Our OS-level
sandboxing mitigates this, as it allows us to restrict the maximum
level of resource consumption of the processes running in the sand-
box.
To work around the resource restrictions on a single function, an
adversary might try a denial of service attack on the middlebox by
rapidly flooding the middlebox with a large number of functions.
We prevent this from starving out the rest of the middlebox and
its processes through the OS sandbox as well, by limiting the total
resource consumption of Bento to a specified amount.
While Bento is able to limit the total resources that any given
function can consume, it does not yet have a mechanism for ensur-
ing fairness amongst users. This brings several concerns, such as
a malicious user preventing others from loading functions, lever-
aging functions (and the middleboxes’ resources) as a tool for un-
dertaking DDoS attacks, and using functions to modulate the mid-
dlebox’s CPU or network bandwidth so as to affect the traffic of
others. However, there are many existing lines of work in this space
that we believe are promising and would also apply here, such as
proofs of work [9, 25], anonymous credentials [18], or combinations
thereof [14, 21, 31]. We leave these to future work.
Abusive functions Bento has several safeguards to protect against
abusive functions. For instance, by adopting the relay’s exit node
policy (§5.3), Bento restricts the parties with which a function can
communicate.
The primary remaining potential for abuse is that of storing
illicit content on the operator’s machine. In the most extreme case,
an operator can protect themselves by setting a policy that prevents
functions from accessing the filesystem or storing any data on the
node. However, this greatly restricts the functions that could be run
on such a node. Alternatively, the operator can allow functions to
execute in the Python-OP-SGX container (described in §5.4), which
encrypts all filesystem writes with an ephemeral key inaccessible to
both the operator and the function itself. As a result of this design, a
Bento operator can only ever access encrypted data, resulting in the
same level of protection and plausible deniability as Tor currently
provides to standard relay operators. Thus we believe that Bento
does not make Tor relay operators more susceptible to abuse.
6.3 Attacks Against Users
As many users employ Tor specifically to protect their anonymity,
we must be careful that Bento does not compromise this. To discuss
the various deanonymization challenges a user might face (and
why Bento protects against them), we will briefly walk through the
life cycle of a user’s interaction with Bento.
A user must first fetch the middlebox node policy for its chosen
Bento server. This could be done over a Tor circuit if the user wishes
to hide that she is using Bento.5 She also obtains the attestation
verification report, to ensure that the node is setup correctly. We
discuss how we would maintain a user’s privacy when validating
this attestation in §5.4.
Next, the user uploads her function. Note that a node operator
should not be able to link function uploads to a specific user (or even
identify them) as there is nothing fingerprintable about uploads in
terms of the code itself. For maximum privacy, function uploads
could also be encrypted and only decrypted within the enclave. The
node then returns the necessary tokens to the user, which could be
blinded for privacy as we discuss in §5.3.
When the user wishes to run her function, she sends her mes-
sages to it with the (blinded) invocation token. We note that prevent-
ing a malicious operator from fingerprinting a function’s system
call patterns, network calls, and the like in order to identify what
function a user is running (or identify that two separately uploaded
functions are actually the same) is outside of the scope of this pa-
per. We believe techniques that build oblivious filesystems for SGX
(such as [2]) would be applicable here. While a network adversary
might be able to tell that a Bento node is running a function, he
5We will subsequently assume that all user interactions with the Bento node are done
over Tor circuits if the user wishes to preserve strong anonymity.
827
will not be able to link this function back to the specific user who
uploaded and invoked it, as a privacy-conscious user only interacts
with the node over Tor circuits.
Finally, when the user is done with her function, she uses the
(blinded) shutdown token to terminate it.
One final attack on users we consider is that of an “adversarial”
function, such as one that seeks to deanonymize a user or identify
a specific Tor node they are using by running a function that tries
to affect their traffic in some way, rendering it easier to fingerprint.
This could be achieved, for example, by creating a function that
over-consumes CPU or bandwidth on the node, thus slowing down
any traffic which passes through only that specific node, or trying
to “tag” another user’s traffic in some way. While it is difficult
to rule out all possible variants of this attack, there are two key
properties of Bento that greatly mitigate these threats. First, Bento
provides strong sandboxing and isolation when executing processes,
preventing a function from introspecting on or affecting another
user’s data or network traffic. Second, Bento servers can restrict
how many resources a function is permitted to use (see §5.3 and
§6.2), preventing starvation and other side-effects. Together, these
safeguards help prevent an untrusted function from affecting the
resource consumption of another or from trying to starve a co-
resident process.
7 CASE STUDY: BROWSER
In a website fingerprinting attack, an adversary is able to view all
traffic to and from a victim client. The attacker uses the patterns of
packet transmissions as a fingerprint of the website. For websites
with mostly static content, these patterns can be an effective finger-
print, allowing the adversary to uniquely identify which website
the user is visiting.
Although Tor users can take some measures to prevent website
fingerprinting attacks, no existing solution effectively prevents an
adversary from deriving salient features from users’ web brows-
ing traffic. Recently, Tor has integrated preliminary mechanisms
into the protocol to introduce dummy traffic and confuse most
fingerprinting techniques through traffic padding. However, these
solutions increase the load into and out of the Tor network, while
not introducing sufficient noise into the contents of web traffic.
7.1 Prior approaches
Past efforts in securing Tor web browsing against fingerprinting
attacks largely propose making significant changes to the underly-
ing Tor source code. WTF-PAD [45] introduces adaptive padding
techniques to optimize bandwidth by padding Tor traffic in low
usage streams. Additionally, Walkie-Talkie [84] makes use of half-
duplex communication such that the server must reply to the client
in non-overlapping bursts, thus shielding identifiable web traffic
behaviors.
7.2 Function overview
The insight behind the Browser function is that the adversary
cannot observe identifiable behaviors if the user is not the one
running the web client! Browser runs the web client on a separate
Bento box (an exit node, in this case). The function then packages
up the entire webpage and ships it back to the client. The size of the
828
Attack Accuracy Defense
93.9% None (unmodified Tor)
69.6% Browser, 0MB padding
8.25% Browser, 1MB padding
0.0% Browser, 7MB padding
Table 1: Accuracy of Deep Fingerprinting [73] attacks against
unmodified Tor and Browser with varying amounts of padding.
Browser offers significant defense.
page alone can reveal information about it, so Browser pads this
up to a given multiple of bytes. Both the URL to fetch and the size
to pad to are provided by the client when invoking the function.
We present the code to Browser in Appendix A.
This is immediately deployable without changes to Tor or to the
Tor Browser. As shown in Figure 3, our implementation creates
a basic application-layer web proxy at the exit node of the user’s
circuit. Although the current design of of Browser is not suitable
for latency-sensitive interactions (e.g., video chatting or online
gaming), it can easily be adapted to support cookies for interactive
browsing.
7.3 Evaluation
We evaluate three aspects of the Browser function: its efficacy as a
website fingerprinting defense, its performance in terms of page
load time, and its scalability.
Browser as a website fingerprinting defense We first evalu-
ate Browser under the adversarial conditions showcased in prior
work [73]. We used the same experiment setup as Sirinam et al. [73]:
10 medium-sized Amazon E2 instances, each running a Bento client,
and all Tor traffic between the client and its guard relay is recorded.
We visited 100 popular websites [4] at least 10 times using a stan-
dard Tor browser and again using Browser (with 0MB, 1MB, and
7MB padding of random bytes), running inside of an SGX-based
conclave. We apply a sophisticated fingerprinting attack involving
deep learning [73]. To train the deep learning models, we used 5
NVIDIA 1070 and 2 NVIDIA 1070ti GPUs.
We summarize our results in Table 1. Unmodified Tor results in a
93.9% accuracy for an attacker. Merely by using Browser—without
any padding—the change in traffic patterns results in a significant
decrease in attacker accuracy, down to 69.6%. Adding even a nomi-
nal amount of padding (1MB) results in a drastic decrease to 8.25%
accuracy, and a large amount of padding (7MB) renders the attack
completely ineffective (0% accuracy).
The reason Browser is so effective is because it fundamentally
removes the benefits of being an adversary close to the client; to the
attacker, the traffic patterns appear to be a modest upload (installing
the function), and then a pause (while the webpage is loaded at the
Bento box), and a long stream of packets back. This removes much
of the information that fingerprinting attacks rely on. We believe
this points to a broader class of promising functions: those that
offload tasks from a client into autonomous agents who can act on
the user’s behalf from other nodes within the network.
Performance of Browser Our performance benchmarks for
Browser focus on the time to fully download a webpage—from
Domain
indiatoday.in
yahoo.com
netflix.com
ebay.com
aliexpress.com
Standard
Tor
5.0
6.7
8.5
6.1
3.1
Browser
0MB 1MB 7MB
86.0
87.4
86.3
81.8
91.9
34.9
21.2
28.4
22.3
37.7
6.4
6.3
8.1
7.0
5.9
Table 2: Download times (in seconds). Bold numbers denote in-
stances where Browser performs faster than standard Tor. Note
that users can obtain the viewable webpage in the time to down-
load the 0MB version; the additional download time is purely for
padding.
the time the client issues the request to the function until it is done
downloading, with various padding levels.
Table 2 shows our results. At a high level, it is mostly what
one might expect: larger websites or large amounts of padding
increase the download time. With greater padding comes greater
security, but also a decrease in performance—a direct result of the
“anonymity trilemma”. However, for smaller websites, the time to
download the entire website using Browser can sometimes actually
be lower than traditional Tor. This is because TCP’s performance for
small file transfers is heavily affected by round-trip time (RTT); in
traditional Tor, this is the circuit’s RTT plus the exit node-to-server
RTT. For Bento, it is just the latter.
Note further that the results represent the full time to download
the content, but because the padding comes after the webpage, the
client receives (and can render) the webpage in the amount of time
it takes to transfer under the 0MB case. It is important, however,
that the user’s subsequent actions be delayed until after the full
padding has downloaded.
Scalability of Browser We provide a brief analysis of the scal-
ability of Browser (and other functions), as well as of Bento as a
whole.
One of the main potentials for overhead in our architecture is the
use of SGX and conclaves. A thorough microbenchmark analysis of
conclaves and SGX overhead was performed in [34], so we do not
repeat them here. However, we summarize some of the relevant
results for completeness. The authors of [34] note that the time
to swap in and out of the conclave introduces nominal overheads
for running a "CDN" (a highly latency-sensitive application); these
overheads would be even less impactful for Tor, as it already expe-
riences high latency overheads from the Tor circuits themselves.
We also note that the page load times from the previous section
were measured while using SGX, and, in some cases, the download
time is actually lower. Thus, the use of conclaves does not provide
a significant performance impact.
A second notion of scalability is the number of functions that can
run on a single node. SGX provides a limited amount of protected
memory (128MB), with only 93MB of this usable by applications
[34], meaning that we are constrained in the number of functions
that can be running concurrently on a node. To quantify this, we
Figure 4: The LoadBalancer function forwards requests from
the Introduction Point to one of its hidden service replicas. In our
implementation, LoadBalancer automatically scales the replicas
up and down to meet demands.
estimate6 the memory required by Bento and Browser by run-
ning them outside of conclaves. The maximum memory usage of
a Bento server and Browser is roughly 16–20 MB, depending on
the webpage being downloaded. We add to that the estimated 7.3
MB required for conclaves to obtain the total memory footprint of
running the Browser function in Bento.
We make a few observations about these results. First, Bento is
implemented in Python with little concern for memory footprint,
so it is likely that these numbers would be easily improved if mem-
ory usage is a concern. Second, even without optimization, we are
already able to run multiple functions without straining the SGX
memory limits (we additionally note that the memory required by
a function is highly dependent on which function one is running).
Third, SGX has support for paging; as we do not expect all func-
tions loaded on a node to always be running, enclaves could be
paged out if they are not currently being invoked. In summary, we