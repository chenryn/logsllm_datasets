---
author: Ed Welch
category: 系统运维
comments_data:
- date: '2021-01-08 14:44:28'
  message: 太重了
  postip: 1.192.90.183
  username: 来自河南郑州的 Firefox 84.0|GNU/Linux 用户
count:
  commentnum: 1
  favtimes: 2
  likes: 0
  sharetimes: 0
  viewnum: 6489
date: '2021-01-06 15:50:00'
editorchoice: false
excerpt: Loki 扩展了 Prometheus 用于度量监测和日志聚合的模型。
fromurl: https://opensource.com/article/20/10/shell-history-loki-fzf
id: 12988
islctt: true
largepic: /data/attachment/album/202101/06/155012r4khll9zlqgx79fs.jpg
permalink: /article-12988-1.html
pic: /data/attachment/album/202101/06/155012r4khll9zlqgx79fs.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: Loki 扩展了 Prometheus 用于度量监测和日志聚合的模型。
tags:
- 日志
thumb: false
title: 用 Loki 和 fzf 进阶你的 Shell 历史记录
titlepic: true
translator: wxy
updated: '2021-01-06 15:50:00'
---
> 
> Loki 扩展了 Prometheus 用于度量监测和日志聚合的模型。
> 
> 
> 
![](/data/attachment/album/202101/06/155012r4khll9zlqgx79fs.jpg)
[Loki](https://github.com/grafana/loki) 是一个 Apache 2.0 许可的开源日志聚合框架，由 Grafana 实验室设计，并在不断发展的社区的巨大支持之下建立。它也是我每天为之努力的项目。在这篇文章中，我将不只是谈论 Loki 如何工作，而是提供一个实际操作的介绍，以解决实际问题。
### 问题：一个持久的集中式 Shell 历史记录
我喜欢我的 shell 历史，一直是 `CTRL+R` 的狂热用户。大约一年前，我的终端生活发生了翻天覆地的变化，我的同行 Dieter Plaetinck 向我介绍了命令行模糊查找器 [fzf](https://github.com/junegunn/fzf)。
突然间，在命令中搜索就从这样：
![在 Loki 和 fzf 之前](/data/attachment/album/202101/06/155024uqt9jvzqh5c5ptjh.gif "Before Loki and fzf")
变成了这样：
![在 Loki 和 fzf 之后](/data/attachment/album/202101/06/155025n7u14eemmqh2mdyy.gif "After Loki and fzf")
虽然 `fzf` 极大地提高了我的生活质量，但围绕着我的 shell 历史记录，还是缺少了一些片段：
* 终端突然关闭、电脑崩溃、死机、整盘加密密钥被遗忘等情况下会丢失 shell 历史记录。
* 想从我的所有电脑上访问我的 shell 历史记录。
我认为我的 shell 历史记录是文件：它是一个重要的故事，我不想失去。将 Loki 与我的 shell 历史结合起来，有助于解决这些问题和更多问题。
### 关于 Loki
Loki 采用了开源 [Prometheus](https://prometheus.io/) 项目用于度量的直观的标签模型，并将其扩展到日志聚合的世界。这使得开发人员和运维人员能够使用相同的标签集在他们的度量和日志之间无缝切换。即使你没有使用 Prometheus，也有很多理由说明 Loki 可能很适合你的日志存储需求：
* **低开销：** Loki 不做全文日志索引；它只创建你放在日志上的标签的索引。保持小的索引大大降低了 Loki 的运维要求。我在 [树莓派](https://www.raspberrypi.org/) 上运行我的 loki-shell 项目，该项目使用 Loki 来存储 shell 历史记录，只使用了 50MB 多一点的内存。
* \*成本低：\*\*日志内容被压缩并存储在对象存储中，如 Amazon S3、Google 云存储、Azure Blob，甚至可以直接存储在文件系统中。我们的目标是使用价格低廉且持久的存储。
* **灵活性：** Loki 以单个二进制文件的形式提供，可以直接下载并运行，也可以作为 Docker 镜像在任何容器环境中运行。在 Kubernetes 中可以用一个 [Helm 海图](https://helm.sh/docs/topics/charts/) 快速上手。如果你对日志工具的要求很高，可以看看运行在 Grafana 实验室的 [生产环境](https://grafana.com/docs/loki/latest/installation/tanka/)。它使用开源的 [Jsonnet](https://jsonnet.org) 和 [Tanka](https://tanka.dev/) 部署了同样的 Loki 镜像作为离散的构件，以实现大规模的水平扩展、高可用性、复制、读写路径的分别扩展、高度可并行的查询等。
总而言之，Loki 的方法是保留一个关于你的日志元数据的小索引（标签），并将未索引的、压缩的日志内容存储在廉价的对象存储中，以使操作更容易和更便宜。该应用程序被构建为单进程运行，并很容易演变成一个高可用的分布式系统。你可以通过并行化和查询的分片，在较大的日志工作负载上获得较高的查询性能 —— 有点像为你的日志设计的 MapReduce。
此外，这个功能是任何人都可以免费使用的。与其 [Grafana](https://grafana.com/) 开放观测性平台一样，Grafana 实验室致力于将 Loki 打造成一个任何人都可以使用的全功能、全开放的日志聚合软件。
### 开始吧
我在树莓派上运行 Loki，并将我的 shell 历史记录异地存储在 S3 bucket 中。
当我按下 `CTRL+R`，Loki 的 [LogCLI](https://grafana.com/docs/loki/latest/getting-started/logcli/) 命令行界面会发起几个批处理请求，传输至 `fzf`。下面是一个例子，上半部分显示的是树莓派上的 Loki 服务器日志。
![树莓派上 Loki 服务器的日志](/data/attachment/album/202101/06/155026bxl1ahdhwwgzr52h.gif "Logs of the Loki server on Raspberry Pi")
准备试试？下面的指南将帮助你设置和运行 Loki，与你的 shell 历史记录集成。为了让本教程保持简洁，此设置将 Loki 本地运行在你的计算机上，并在文件系统上存储所有文件。
在 [loki-shell 的 GitHub 版本库](https://github.com/slim-bean/loki-shell)，你可以找到所有这一切，以及如何设置一个更复杂的安装的信息。
请注意，本教程不会改变任何围绕你的历史记录的现有行为，所以 *你现有的 shell 历史记录命令和历史记录设置不会被触动*。相反，这将用 Bash 中的 `$PROMPT_COMMAND` 和 Zsh 中的 `precmd` 复制命令历史记录到 Loki。在 `CTRL+R` 方面，它重载了 `fzf` 用来访问 `CTRL+R` 命令的函数。因此试一试是安全的，如果你觉得不喜欢它，只需按照 GitHub 版本库中的 [卸载步骤](https://github.com/slim-bean/loki-shell/blob/master/uninstall) 来删除所有痕迹。你的 shell 历史记录不会被触及。
#### 第一步：安装 fzf
安装 `fzf` 有几种方法，但我更喜欢 [Git 方法](https://github.com/junegunn/fzf#using-git)：
```
git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
~/.fzf/install
```
对所有的问题提示说 `yes`。
如果你已经安装了 `fzf`，确保你已经启用了键绑定（即，确保当你输入 `CTRL+R` 时，`fzf` 会弹出）。如果有必要的话，你可以重新运行 `fzf` 安装过程来启用键绑定。
#### 第二步：安装 loki-shell
和 `fzf` 一样，loki-shell 也有一个 Git 版本库和安装脚本：
```
git clone --depth 1 https://github.com/slim-bean/loki-shell.git ~/.loki-shell
~/.loki-shell/install
```
首先，该脚本创建了 `~/.loki-shell` 目录，所有的文件都将保存在该目录下（包括 Loki 数据），接下来，它将下载 [Promtail](https://grafana.com/docs/loki/latest/clients/promtail/)、LogCLI 和 Loki 的二进制文件。
然后它会问：
```
Do you want to install Loki? ([y]/n)
```
如果你已经为 Loki-shell 运行了一个集中化的 Loki，你可以回答 `n`；然而，对于本教程，回答 `y` 或按回车键。
在本地运行 Loki 有两种方式：作为一个 Docker 镜像或作为一个单一的二进制文件（支持添加为 systemd 服务）。如果可以，我建议使用 Docker，因为我认为它稍微简化了操作，但这两者都可以工作。
##### 使用 Docker 运行
将 Loki 作为 Docker 镜像运行：
```
[y] to run Loki in Docker, [n] to run Loki as a binary ([y]/n) y
Error: No such object: loki-shell
Error response from daemon: No such container: loki-shell
Error: No such container: loki-shell
54843ff3392f198f5cac51a6a5071036f67842bbc23452de8c3efa392c0c2e1e
```
如果这是你第一次运行这个安装程序，你可以忽略错误信息。这个脚本将停止和替换运行的 Loki 容器，如果版本不匹配，你可以重新运行此脚本升级 Loki。
就是这样！Loki 现在作为一个 Docker 容器运行了。
Loki 的数据将存储在 `~/.loki-shell/data` 中。
由于带着 `-restart=unless-stopped` 标志运行该镜像，所以它会在系统重启时重启该服务，但如果你运行 `docker stop loki-shell` 则会保持停止。
（如果你使用的是 Docker，你可以跳到 “Shell 集成”一节。）
##### 以二进制文件运行
在 Linux 系统上运行二进制文件的方法有很多。这个脚本可以安装一个 systemd 服务。如果你没有 systemd，你也可以使用二进制安装：