attacker instead of the victim. As a result, the attacker can hijack
the digital resources, such as IP addresses and domains, that belong
to the victim LIR.
DoS attacks. The attacker can block connectivity, e.g., for radius
clients or access to services, such as secure tunnels. The idea is
that if the attacker cannot forge cryptographic material, such as a
certificate to authenticate a radius client, it can redirect the client
to the wrong host via cache poisoning, preventing the client from
connecting to the genuine target service. The adversary will not be
able to provide authenticated material which will result in a failure,
and lack of service for the victim client.
5 INTERNET MEASUREMENTS
In this section, we analyse the fraction of the vulnerable resolvers
and nameservers with respect to each DNS poisoning method. We
evaluate properties which influence the success of the cross-layer
attacks against applications. Our measurements in this section
show that the vulnerabilities do not significantly differ for most of
the application-specific datasets. The outliers can be summarised
as follows:
• Vulnerabilities to BGP sub-prefix hijacking are exceptionally
high for eduroam and low for RPKI domains. The cause may be
inherent in networks’ sizes (large in case of universities and small
for RPKI repository operators) and accordingly use BGP announce-
ments which are larger than /24 for large networks or equal to /24
for small networks.
• Vulnerabilities to fragmentation cache poisoning among open
resolvers is low compared to other resolvers in our dataset. This
may be due to the fact that the distribution of the open resolvers is
skewed towards poorly configured devices which cannot handle
fragmentation.
• Domains with MX, SRV, NAPTR (eduroam) records are more
often vulnerable to fragmentation based cache poisoning than the
842
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Tianxiang Dai, Philipp Jeitner, Haya Shulman, and Michael Waidner
domains in the 1M-top Alexa dataset. One reason is that the re-
sponses to ANY queries result in much larger packets, which often
exceed the minimum MTU limit.
5.1 Vulnerabilities in Resolvers
We test the DNS resolvers for vulnerabilities to the three cache
poisoning methods (Section 3) for different applications. The results
of our evaluations for all datasets and all poisoning methods are
summarised in Table 3.
5.1.1 Dataset. For each application from Section 4, we gather
datasets of resolvers used by the front-end systems (i.e., Web clients,
Alexa MX records, etc.) of that application. To achieve this, we first
look for an appropriate dataset of front-end systems and then trig-
ger queries through those front-end systems. This allows us to
discover and test the corresponding resolver.
For front-end systems, we use the following datasets, listed in
Table 3: (1) Our local university eduroam service. (2) Password
recovery of popular infrastructure service providers, consisting of:
All 5 Regional Internet Registries, popular domain registrars used
by Alexa Top 100K domains and popular cloud providers [1, 2, 4, 5].
(3) Domain validation of most popular Certificate authorities [3].
(4) Popular CDNs in Alexa Top 100K (by mapping A record to
ASN). (5,6) SMTP and XMPP servers of Alexa Top 1M domains. (7)
Web clients gathered via an Ad-network. (8) Open resolvers from
Censys [32] and (9) a subset of those open resolvers who cache
pool.ntp.org. This resulted in a dataset of 89,924 resolvers (back-
end IP addresses) in 13,804 ASes associated with 33,418 prefixes.
We report the dataset size in terms of front-end systems (i.e.,
number of SMTP servers or number of open resolver front-end IP
addresses) in column "Dataset size" of Table 3. For vulnerability, we
report the percentage of vulnerable front-end systems which was
measured as described in Section 5.1.2. When a front-end system
uses multiple resolvers, we consider it vulnerable if any of the
resolvers it uses is vulnerable.
5.1.2 Measuring cache poisoning vulnerabilities in resolvers. The
results of our measurements and evaluations against resolvers for
different poisoning methodology are summarised in Table 3. In the
following sections we explain the measurements we carried out of
each attack methodology against the resolvers in our dataset.
Sub-prefix BGP hijacks (HijackDNS). Since many networks fil-
ter BGP advertisements with prefixes more specific than /24, we
consider an IP address hijackable if it lies inside a network block
whose advertised size is larger than /24. We therefore map all the
resolvers’ IP addresses to network blocks and consider those vulner-
able to sub-prefix hijacks whose advertisement is larger than /24,
since an advertisement with a smaller prefix will always take prece-
dence over a bigger one. For the remaining addresses, a BGP-hijack
may still be possible using same-prefix hijacks. To infer the scope
of DNS platforms potentially vulnerable to cache poisoning via
BGP sub-prefix hijack attacks we perform Internet measurements
checking for DNS platforms on prefixes less than /24. We collect
information on the state of the global BGP table in the Internet with
Routeview [71] and RIPE RIS [63] collectors. We analyse the BGP
announcements seen in public collectors for identifying networks
vulnerable to sub-prefix hijacks by studying the advertised prefixes
843
sizes. The measurements of resolvers vulnerable to BGP sub-prefix
hijacks are listed in Table 3 and plotted in Figure 3.
Same-prefix BGP hijacks (HijackDNS). We perform simulations
of same-prefix BGP hijacks using a set of randomly selected attacker
and victim AS pairs using a simulator developed in [39] and Inter-
net AS level topology downloaded from CAIDA [6]. The simulator
selects Gao-Rexford policy compliant paths [35], and considers pre-
fix lengths and AS-relationship (provider, customer and peer) and
sizes (stub, small, medium and tier one). The attackers are randomly
selected from all the ASes whereby the victim ASes are selected
from our dataset of DNS resolvers and 1M-top Alexa domains. For
each (attacker, victim)-pair we perform a simulation of same-prefix
hijack that the attacker AS launches against a victim AS. If the
attacking AS is closer to the victim, the attack succeeds. The sim-
ulation shows that the attacking AS was capable of hijacking the
traffic in 80% of the evaluations.
SadDNS. To test resolvers vulnerable to SadDNS, we test the
resolvers back-end IP addresses for a global ICMP message limit
which allows to use the side-channel identified by [57]. To limit
our dataset to functional resolvers which are still reachable, we
furthermore send an ICMP echo-response (‘ping‘) packet to the
resolver first. This is especially important for the open resolvers
dataset, since this dataset tends to include resolvers operating from
dynamic IP addresses, which may have changed since the dataset
was collected.
For the open resolver dataset we measured a vulnerability rate
of 12%, a notable reduction from the 35% vulnerability rate of the
original paper [57]. This difference could be influenced by various
factors including the fact that our dataset contained more resolvers
than [57]. The crucial difference is likely that our study was con-
ducted after the vulnerability which allowed the global rate limit
to be exploited was patched in many systems. For example, all up-
dated versions of Ubuntu should have been patched by the time we
carried out our evaluations1.
FragDNS. To test vulnerability to fragmentation-based DNS
cache poisoning, we use a custom nameserver application which
will always emit fragmented responses padded to a certain size to
reach the tested fragment size limit. The nameserver is configured
to only send CNAME responses in the first fragmented response.
This means that if the resolver receives a fragmented response, it
needs to re-query for the CNAME-alias. This allows us to verify
that the answer arrived at the resolver and thus, that the resolver
is vulnerable to this type of attack.
Using this setup, we test all resolvers by triggering queries to
our nameservers and observe if the fragmented responses are ac-
cepted. In our bigger datasets, vulnerability rates range between
31% for Open resolvers and 91% for Ad-net resolvers. For the smaller
datasets, we still observe many vulnerable services. However, all
certificate authorities’ resolvers in our dataset rejected our frag-
mented responses, maybe attributed to the fact that this attack
method was already evaluated and disclosed to CAs previously
[24]. We report results for all datasets and all poisoning methods
in Table 3.
1https://ubuntu.com/security/CVE-2020-25705
From IP to Transport and Beyond:
Cross-Layer Attacks Against Applications
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Dataset
Protocol
(1) Local university
(2) Popular services
(3) Popular CAs
(4) Popular CDNs
(5) Alexa 1M SRV
(6) Alexa 1M MX
(7) Ad-net study
(8) Open resolvers
(9) Cache test
Radius
PW-
recovery
DV
CDN
XMPP
SMTP
SPF
DMARC
DKIM
HTTP
DANE
OCSP
All
NTP
Vulnerable against
BGP hijack Sad- Frag-
sub-prefix DNS ment
100%
90%
0%
25%
57%
100%
93%
75%
100%
73%
0%
16%
0%
0%
1%
Dataset
size
1
29
5
4
476
79%
9%
56%
61,036
70%
74%
79%
11%
12%
9%
91%
5,847
31% 1,583,045
32%
448,521
Table 3: Vulnerable resolvers.
5.2 Vulnerabilities in Domains
In this section we perform measurements of the vulnerabilities in
domains to our cache poisoning methodologies for different ap-
plications. We collect lists of the domains associated with these
applications and test all the nameservers serving each domain ac-
cording to the properties required for each cache poisoning method
(from Section 3). The results of our evaluations and measurements
for all the tested datasets and poisoning methods are summarised
in Table 4.
Dataset
Protocol
Vulnerable against
BGP hijack Sad- Fragment
sub-prefix DNS Any Global
DNS
SEC Total
1,152
11% 44% 18% 10%
12% 4%
1%
2% 877,071
OpenVPN
Table 4: Vulnerable domains.
5.2.1 Dataset. For each application in Section 4, we collect datasets
of typical domains looked up by clients (or servers) of that appli-
cation. We collect such domains from the following data sources,
listed in Table 4:
(1) Eduroam institution lists from United Kingdom [46], Germany
[30] and Austria [15]. (2) Alexa Top 1 Million domains, including
844
(1) Eduroam list
(2) Alexa 1M
(3) Alexa 1M MX
Radius
HTTP
DANE
DV
SMTP
SPF
DKIM
DMARC
XMPP
PW-
(4) Alexa 1M SRV
(5) RIR whois
(6) Registrar whois recovery
(7) Well-known
(8) Well-known
(9) Well-known
(10) Cert. Scan
NTP
Crypto-
currency
RPKI
IKE
96%
53%
44%
59%
51%
25%
28%
14%
51%
44%
6% 7%
1%
3% 63,726
7%
2,025
4% 29% 5%
4% 58,742
9% 14% 4%
4,628
10% 23% 5%
6%
9
0% 25% 25% 25%
32
17% 21% 3% 21%
0% 0%
0% 67%
8
307
7%
1%
11% 5%
Figure 3: Announced prefixes.
subsets of domains which have (3) MX and (4) SRV (XMPP) records.
Domains from account email addresses from whois databases of
(5) RIRs and (6) Registrars. (7) Well-known NTP server domains.
(8) Well-known cryptocurrency domains. (9) Well-known RPKI
validator database domains. (10) Domains of IKE and OpenVPN
servers’ certificates. This resulted in 904,555 domains hosted on
200,086 nameservers in 24,353 ASes associated with 60,511 prefixes.
5.2.2 Measuring cache poisoning vulnerabilities in nameservers.
HijackDNS. We perform a similar analysis as in Section 5.1.2,
to check the vulnerabilities to BGP prefix hijacks. The results are
plotted in Figure 3. The differences between the fractions of name-
servers in 1M-top Alexa domains that can be sub-prefix hijacked