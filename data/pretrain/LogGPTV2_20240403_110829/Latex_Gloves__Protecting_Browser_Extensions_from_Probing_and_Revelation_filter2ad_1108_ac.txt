extensions with declared WARs can reveal their random UUID.
Having access to only the random UUID is not sufﬁcient.
The path component present in a WAR URL can give away the
identity of the extension, if there is a mapping between a path
and the corresponding extension. Out of the 1,378 extensions
that call a getURL() function, 1,107 extensions provide at
least one unique path, i.e. the full path to a resource. Aside
from the WAR URL, a potential attacker also has access to
TABLE II: Breakdown of the uniqueness detectability for
browser extensions, assuming a randomized schema with the
ability to probe.
Firefox
Chrome
Total
Extensions total
1,378
11,633
13,011
Path
1,107 (80.33%)
7,214 (62.01%)
8,321 (63.95%)
Hash
1,292 (93.76%)
10,355 (89.01%)
11,647 (89.52%)
Path ∪ Hash
1,301 (94.41%)
10,459 (89.91%)
11,760 (90.39%)
the contents of the WAR. We investigated the contents of
the extensions’ WARs to determine how unique they are by
calculating a hash digest over the contents. A total of 1,292
browser extensions have a unique digest when hashing their
WARs, where a different hash digest indicate a difference in
content between the WARs of the different browser extensions.
We then took the union of the two sets of browser extensions
with at least one unique path and a unique digest, yielding a
total of 1,301 browser extensions to be uniquely identiﬁable.
Although only ≈15.05% of all extensions can be uniquely
is ≈94.41% of all extensions that have the
identiﬁed,
possibility to inject a WAR.
it
B. Resetting Firefox’s random UUID
For Firefox, each UUID is “randomly generated for every
browser instance” [50]. However, it is not clear what “browser
instance” means in this setting. In order to determine when the
random UUID of a browser extension is being reset in Firefox,
we tried different approaches on three operating systems: Win-
dows 10, Linux (Debian) and Mac OSX. The approaches were
restarting, updating and re-installing the browser, updating
and re-installing the extension, switching the browser tab to
incognito mode and clearing the cache and cookies of the
browser. The result can be found in Table III, and for the
rest of this subsection, we will brieﬂy cover the differences
between the operating systems.
None of the operating systems change the internal UUIDs
upon restarting the browser,
indicating “browser instance”
from the documentation does not mean “started browser pro-
cess”. When re-installing the browser, the default behavior for
the Windows 10 installer is to reset the standard options, which
includes removing the old browser extensions. As this would
force a user to re-install the browser extensions, each browser
extension would get a new random UUID. However, a user
has the option of not resetting the standard options, along with
not removing the old browser extensions. Hence, uninstalling
Firefox on Windows keeps all settings, and it is up to the
user to decide to keep or remove them when re-installing the
browser. This is not the case for Linux and Mac OSX. For both
operating systems, it is up to the user to manually remove
the proﬁle folder (default is .mozilla in the home folder
for Linux, and Library/Application Support/Firefox
in Mac OSX) in order to remove the old browser extensions
upon re-installing the browser, as they are not prompted about
a default option of resetting the standard options.
For all operating systems, the UUID was regenerated when
reinstalling the extension, given that the browser was restarted
between uninstalling and reinstalling the extension. If the
browser was not restarted, the proﬁle ﬁle containing the data
would not change, giving the new installation the same UUID.
6
TABLE III: Actions which result in UUID regeneration for
each of the major operating systems. “Yes” or “No” means that
the action did or did not cause UUID regeneration respectively.
Notes: (∗) Firefox’s installer on Windows prompts the user
to reset settings and remove extensions, which is enabled by
default, whereas for Linux and Mac OSX (+), the default is
to keep all settings.
Restarting browser
Updating browser
Re-installing browser
Updating extension
Re-installing extension
Incognito mode
Clearing cache and cookies
Clearing the proﬁle
w/ browser restart
w/o browser restart
Linux Mac OSX Windows
Yes∗
No+
No
No
No
Yes
No
No
No
Yes
On all platforms, clearing the proﬁle (i.e. removing the
actual proﬁle folders) would force a user to re-install all
extensions, which means they would get a new random UUID.
C. Derandomizing Chrome extensions
As Chrome does not employ random UUIDs, the tech-
nique presented by Sj¨osten et al. [55] still works. However,
as Chromium developers plan to employ random UUIDs,
we performed the same experiment as for Firefox. In total,
we scraped 62,994 free extensions from the Chrome Web
Store [24]. Out of those, 16,280 deﬁned web_accessible_
resources with at least one corresponding WAR. The amount
of extension that called either chrome.runtime.getURL or
chrome.extension.getURL was 10,764. We also checked
the extensions that called chrome.runtime.id (728 exten-
sions), which return the extension’s UUID, and the ones
that hardcoded their extension UUID into a resource URL
(141 extensions), with the assumption they will change to
call getURL() if Chrome adopts random UUIDs. With this,
the total amount of detectable extensions would be 11,633
extensions, which corresponds to ≈71.46% of all extensions
with at least one WAR declared. Assuming random UUIDs
for Chrome, we must check if a path can uniquely identify
an extension. We applied the same uniqueness procedure as in
Section IV-A, ﬁnding 7,214 extensions being unique without
the need for any content hashing. When hashing the content of
the WARs, we got a total of 10,355 browser extensions, and
the union of those two sets yield a total of 10,459 uniquely
identiﬁable browser extensions. While only being ≈16.60%
of all extensions, it is ≈89.91% of all browser extensions that
have the possibility to inject a WAR.
D. Extensions revealing themselves to web pages
As browser extensions can inject WARs into a web page to
allow it access in the domain of the web page, the WARs are
visible to JavaScript executed in the origin of this web page. A
web page can scan for these WARs in order to reveal installed
browser extensions, as well as to deanonymize the visitor: from
the WARs, an attacker can infer the installed extension, and
from Firefox browser extensions’ random UUIDs, the attacker
can identify the visitor.
As Chrome are considering random UUIDs, the ﬁndings are
relevant to their future development plans.
Setup: We use Selenium 3.9.1 with Firefox 58.0.1 and
Chromium 64.0.3282.167 to automate the process.
For each browser extension, we visit a web page through
mitmproxy 2.0.2 [21] with a custom addon script. In order
to be able to manipulate web pages served over HTTPS, both
Firefox and Chromium were conﬁgured to allow untrusted SSL
certiﬁcates.
The mitmproxy addon script injects a piece of attacker
JavaScript code in the web page which walks through the
HTML tree and extracts any attributes that contain chrome-
extension:// or moz-extension:// present in the web
page. In addition, because the CSP may prevent the execution
of injected JavaScript, the mitmproxy addon script disables
CSP if present.
Because browser extensions may inject content only after
a while, the attacker script also installs a mutation observer
which repeats the scan every time a change to the web page
is detected. With this setup, we can detect the injection of
WARs at any point in the web page’s lifetime. For every page
visit, we wait for up to one minute for the page to load before
aborting that page visit. When a page is successfully loaded,
we wait for ﬁve seconds to let any JavaScript on the page run
its course.
Dataset extensions: Because of the way Firefox ex-
tensions work, we only consider those extensions which seem-
ingly make a call to getURL() and which have web accessible
resources. After this ﬁltering step, 1,378 out of the 8,646
Firefox extensions remain for our study.
Similarly for Chrome, we retain 11,633 out of the total
62,994 Chrome extensions.
Dataset URLs: These 13,011 extensions (1,378 Firefox
+ 11,633 Chrome) will only execute on a web page if the
URL matches the regular expressions in their manifest ﬁle. For
instance, an extension which lists http://example.com/*
in its manifest ﬁle, will not execute when visiting, e.g.,
http://attacker.invalid/index.html. Extensions can
only reveal themselves when they are executing on a web page
they were designed for, e.g by checking for the presence of a
certain keyword in the URL. Because of this, it is important
to visit the right URLs.
To determine the set of URLs we should visit for a partic-
ular extension, we make use of the CommonCrawl dataset [5].
This dataset contains data about ≈4.57 billion URLs from
a wide variety of domains. From the 13,011 extensions, we
extracted 24,398 unique regular expressions and matched them
against the CommonCrawl dataset using the regular expres-
sion matching rules speciﬁc to the manifest ﬁle speciﬁcation.
For each regular expression, we only consider the ﬁrst 100
matches. For each extension, which can have many regular
expressions in its manifest, we combine all matching URLs
and take a random subset of maximum 1,000 URLs. In total
we obtained 506,215 unique URLs from the CommonCrawl
dataset that match the regular expressions from the extensions’
manifest ﬁles. We call this set of URLs the “real” URLs.
For this experiment, we consider all 8,646 Firefox exten-
sions, but are also interested in the 62,994 Chrome extensions.
From the “real” URLs, we derive two extra sets of URLs by
considering that an attacker can host a copy of a real web page
7
on a different web host. For instance, the web page at http:
//www.example.com/abc could be hosted on an attacker-
controlled http://www.attacker.invalid/abc. We call
this cloned set of “real” URLs, where the hostname has been
replaced by attacker.invalid, the “attackerhost” URLs.
Extensions with more ﬁne-grained regular expressions may
require the attacker to register a domain in DNS. For instance,
a regular expression http://*.com/abc does not match
the attacker.invalid domain which we assume is under
attacker control. Therefore, we also consider a URL set where
the hostname in each URL has been replaced by a hostname
with the same top-level domain, but with an attacker-controlled
domain name. For instance, for http://www.example.com/
abc we also consider http://www.attacker.com/abc.
Naturally, we chose a domain name of sufﬁcient length and
consisting of random letters, to make sure it was not registered
yet. We call this cloned set of “real” URLs, the “buydns”
URLs.
In addition to the real CommonCrawl URLs which match
the regular expressions, we also generate URLs based on
those regular expressions by replacing all “*” characters
with “anystring”. For instance, we generate the URL http:
//*.example.com/anystring for the regular expression
http://*.example.com/*. We call this set of URLs the
“generated” URLs.
Dataset web page content: Aside from expecting a
certain URL, an extension may also depend on certain HTML
elements, HTML structure or particular text present on a
visited web page. To determine whether this is the case, each
web page visited through a URL in the “real” URLs set, as well
as the derived “attackerhost” and “buydns” sets, is also visited
with all content removed. We visit each of these URLs twice:
once with the real content, and once serving an empty page
instead of the real content. For the “generated” URL set, we
only serve empty pages, since there is no way to determine
what type of content should be present on such a URL. A
known practice from previous work is to use “Honey Pages”,
empty pages that create the DOM content of a web page
dynamically, based on what the extension is querying [56],
[35]. While “Honey Pages” can provide useful information to,
e.g., ﬁnd malicious extensions, some extension behavior can be
difﬁcult to trigger in an automated way, as it may not be only
nested DOM structures, but also events an extension acts on.
In this light, “Honey Pages” may not be representative of the
operation of actual web pages. As we are interested in whether
web pages would be able to employ a revelation attack with
their current structure, our experiments are not using “Honey
Pages”. Instead, we look at the current interaction between
web pages and extensions, providing an indication of how
many extensions that are currently vulnerable. For the best
coverage, it would be interesting to combine our results with
“Honey Pages”, but we leave that for future work.
Results: The results of the experiment are shown in
Tables IV to VI.
Out of 13,011 extensions, 2,906 revealed themselves on
actual pages. We suppose this behavior is intentional, but it
can be abused by the website owners to track the users. 9,543
did not reveal themselves and 562 could not be used in our
experiment because of issues with the third-party software we
TABLE IV: Breakdown of Chrome and Firefox extensions,
indicating which how many extensions revealed themselves,
how many didn’t, and how many we were unable to analyze
(broken).
Chromium
Firefox
Total
Revealed
2,684
222
2,906
Broken
412
150
562
Not revealed
8,537
1,006
9,543
Total
11,633
1,378
13,011
used in our setup (Selenium, browser-speciﬁc or addon-speciﬁc
issues).
The other
remaining 9,543 extensions which call
getURL() and have WARs, seemingly do not
inject any
WARs into the web page, or probably more accurately: we
did not trigger the correct code path in the extension that
results in a WAR being injected into a web page. Analyzing
these remaining extensions via “Honey Pages” could reveal
they also inject WARs under the right circumstances, although
none of the web pages we visited would make them inject
content. Nevertheless, our analysis of web page and extension
interaction succeeded in exposing 2,906 extensions which
reveal themselves on web pages.
Of these 2,906 extensions triggered by real URLs, 2,330
depend only on the URL of the web page visited, and do not