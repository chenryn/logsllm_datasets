### Issue Submission

- [x] Bug Report - Please search GitHub for a similar issue or PR before submitting.
- [ ] Feature Request
- [ ] Support Request - Please do not submit support requests here. Instead, see [CONTRIBUTING.md#question](https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question).

### Current Behavior

The `@angular/forms` package includes a directive for the `[required]` selector, which adds a required validator (`Validators.required`). This directive allows conditional assignment of the required validator based on the value of the `required` input parameter. If the value of the `required` parameter changes, the directive updates the state of the related control using the `_onChange` function.

However, this directive does not function as expected when the element with the `required` attribute is wrapped in a structural directive like `*ngIf`. In such cases, if the condition (`someCondition`) is `true` and the `fieldVisible` property is changed from `true` to `false`, the corresponding input element is removed from the DOM, but the `Validators.required` (assigned by the required directive) remains on the control.

### Expected Behavior

The required directive should manage the lifecycle of the `Validators.required` completely. Specifically, it should remove the `Validators.required` when the directive is destroyed (`onDestroy`). Failing to do so results in unmanageable validators that remain even after the associated form control is no longer visible.

**Note:** The best practice for managing required validators is to set all validators explicitly via the control and handle any necessary cleanup. However, this is not feasible with the current design of form controls in Angular.

### Minimal Reproduction with Instructions

1. Create a form with an input field that has the `required` attribute.
2. Wrap the input field in a structural directive, such as `*ngIf`.
3. Change the condition that controls the visibility of the input field.
4. Observe that the `Validators.required` remains on the control even when the input field is no longer visible.

### Motivation / Use Case

It is often useful to store the state of a form in reactive form controls while only displaying a portion of the form. For example, in a tab-based form where only a subset of the form is visible at any given time, the ability to manage validators dynamically is crucial.

### Environment

- **Angular Version:** Any version
- **Browser:** Any browser
- **Language:** Any language
- **Node (for AoT issues):** N/A

Please let me know if you need further information or have any questions.