 **I'm submitting a ...** (check one with "x")
    [x] bug report => search github for a similar issue or PR before submitting
    [ ] feature request
    [ ] support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question
**Current behavior**  
`@angular/forms` package has a directive for `[required]` selector which adds
a required validator (`Validators.required`). This directive allows to assign
required validator conditionally depending on value of `required` input
parameter. If value of `required` parameter has changed directive updates
state of related control using `_onChange` function.
This directive works great until you wrap element having 'required' attribute
in `*ngIf` or other structural directive.
In this case if `someCondition=true` and `fieldVisible` is modified from
`true` to `false` corresponding input disappears, but `Validators.required`
(assigned by required directive) remains on the control.
**Expected behavior**  
If required directive assignes `Validators.required` it should manage its
lifecycle completely and delete it on `onDestroy` of the directive. Otherwise
we have hanging unmanageable validators.
P. S. Definitely the best approach to work with required validators is to set
all validators via control explicitly and catch if this validator was
assigned. But this is not possible with the current design of form controls.
**Minimal reproduction of the problem with instructions**
**What is the motivation / use case for changing the behavior?**  
Sometimes its very helpful to store state of the form in reactive controls and
have only part of form displayed. In my case I use tab-based form, where only
part of form is displayed.
**Please tell us about your environment:**
  * **Angular version:**  
Any version
  * **Browser:**  
Any browser
  * **Language:**  
Any language
  * **Node (for AoT issues):**