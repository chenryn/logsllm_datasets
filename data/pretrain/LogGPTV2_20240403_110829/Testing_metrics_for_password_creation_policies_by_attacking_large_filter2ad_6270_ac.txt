  Rank  Digit 
Table 4.2.2: Top Ten Digits Found in the RockYou32 List 
Rank  Digit 
#1 
#2 
#3 
#4 
#5 
This means that the top 10 digits counted for roughly 26% of the 
total  digits  used.  If  we  further  mandate  that  a  password  must 
include an alpha character as well, (a-zA-Z), the results in Table 
4.2.2 remain mostly the same, with the main changes being that 
the number ‘123456’ drops out of the top 10, and that the number 
‘1’ by itself becomes more frequent with it appearing 15.44% of 
the time. Likewise, the coverage of the top 10 digits increases to 
36.25% of the total count. 
Of course, what is also important is how those digits are actually 
used  in  the  password  itself.  For  example  the  digit  could  be 
appended  at  the  end  of  the  password,  ‘secret123’,  before  the 
Figure 4.2.1: Results of Minimum Password Length on 
Longer Password Cracking Sessions 
Fig  4.2.1  shows  that  the  effectiveness  of  each  attack  was 
influenced by the minimum password length; however before we 
examine  the  impact  of  minimum  password  length  we  must 
consider  several  other  possible  causes  that  may  have  influenced 
this  decrease  in  password  cracking  effectiveness.  One  possible 
issue is that the division of the lists based on minimum password 
length  was  done  artificially,  since  the  RockYou  site  did  not 
enforce a uniform password creation policy. This might lead to an 
unequal  distribution  of  the  security  minded  users  between  the 
different  sub-lists  based  on  password  size.  For  example,  people 
who created longer passwords when they didn’t need to, (based on 
policy),  might  inherently  choose  a  stronger  password  than  users 
who create the simplest password allowed. Since none of the test 
sets we have access to enforced a password policy requiring users 
to  create  passwords  longer  than  six  characters  long,  verifying  if 
this  occurs  is  problematic.  Therefore  the  best  we  can  do  is 
evaluate the composition of passwords in the different sub-lists to 
see  if  there  are  any  noticeable  differences  in  password  creation 
strategies  between  the  different  sub-lists  beyond  minimum 
password length The results of this can be seen in Table 4.2.1. 
86.7% 
85.1% 
4.4% 
6.5% 
8.0% 
7.1% 
6.6% 
6.9% 
5.1% 
6.7% 
88.4% 
89.2% 
9+ Chars 
60.2% 
8+ Chars 
59.5% 
7+ Chars 
57.5% 
Table 4.2.1 Password Information from the RockYou1 List 
10+ Chars 
60.0% 
Character Set  
Contains Digits 
Contains Special 
Characters 
Contains 
Uppercase 
Contains Only 
Lowercase 
Letters, Digits 
As  expected,  as  shorter  passwords  were  excluded,  the  average 
complexity of the remaining sets increased. Of note is that as the 
length of the passwords increased, their composition also becomes 
more  complex.  From  7+  character  passwords  to  10+  character 
passwords,  the probability  of  a special  character  nearly  doubles, 
and  the  probability  of  uppercase  characters  increases  by  10%.  
These results imply that users picking longer passwords were also 
either  forced  by  policy  or  preference  to  add  additional  security 
features. To further confirm this, the above lists were once again 
divided  to  only  include  passwords  containing  at  least  one  digit. 
Likewise,  the  password  cracking  attacks  were  modified  so  they 
only produced guesses that contained digits as well. This test has 
an additional bonus of allowing us to evaluate the effectiveness of 
requiring  a  digit  in  a  password  creation  policy  since  we  can 
compare  it  to  the  previous  test  in  Fig  4.2.1.  The  results  of  re-
166taken 
from 
longer  passwords 
password,  ‘123secret’,  or  used  in  the  middle  of  the  password, 
‘s3cr3t’. To better understand how people incorporate digits into 
their passwords, Table 4.2.3 shows where the digits appeared in 
seven  character  or 
the 
RockYou_Train32 password list. 
Table 4.2.3:  How Digits are used in 7+ Character Passwords 
Percentage 
Location  Example 
All 
20.51% 
1234567 
Digits 
64.28% 
password123 
After 
Before 
123password 
5.95% 
Other 
9.24% 
passw0rd, pass123word, p1a2ssword, … 
It shouldn’t come as a surprise that most people simply add digits 
to the end of a base word when creating a password. If we filter 
the training list to only include passwords that also contained one 
non-digit, the number of users who appended a digit to the end of 
their password jumped to 77.46%. When running additional tests, 
we  found  that  an  attacker  could  crack  11.06%  of  7+  character 
passwords which included at least one digit and one non-digit, just 
by appending the number ‘1’ to the end of their password guesses. 
In an attempt to gain a better understanding of how people used 
digits that fell into the ‘other’ category, we performed a manual 
analysis  of  a  number  of  the  passwords  in  the  training  set.  We 
found  a  vast  majority  of  them  used  digits  as  letter  or  word 
replacements. Word replacements such as replacing ‘for’ with ‘4’, 
and  ‘to/too/two’  with  ‘2’  seemed  particularly  popular.  Several 
other  strategies,  such  as  using  keyboard  combinations,  for 
example  ‘1qaz2wsx’,  and  ASCII  art,  ‘alice<3bob’,  were  also 
noticed.  There  were  also  several  passwords  where  a  digit  was 
followed by a special character, such as ‘password1!’. While most 
replacements, (except for the most commonly used ones such as 
‘passw0rd’),  are  unlikely  to  be  targeted  in  an  online  attack,  an 
attacker  can  certainly  make  use  of  this  knowledge  when 
conducting an offline dictionary attack. 
The next step is to evaluate what effect increasing the minimum 
password  length  has  on  the  effectiveness  of  an  online  password 
cracking  attack.  To  accomplish  this,  we  must  first  determine  a 
relevant  method  to  compare  the  success  of  different  password 
cracking attacks to each other. This is not a trivial problem. One 
approach  would  be  to  compare  the  final  number  of  passwords 
cracked.  A  problem  with  this  approach  is:  how  long  should  the 
cracking session be limited to? As an example of that, Fig 4.2.3 
shows the same cracking sessions detailed in Fig. 4.2.1, but this 
time limited to 50 thousand guesses. 
difference  in  the  effort  required  to  crack  10+  character  long 
passwords.  This  is  deceiving  though,  since  the  attack  was  not 
intended/optimized for that short of a password cracking session. 
As  evidence  of  that,  the  input  dictionary  itself,  dic-0294, 
contained over 800 thousand words. This shows the importance of 
measuring  attacks  that  are  tailored  to  the  number  of  guesses 
allowed.  It  is  interesting  though  that  even  in  this  un-optimized 
attack,  each  of  the  cracking  sessions  nearly  cracked  1%  of  the 
total passwords. We’ll see in the next test though that, 1% cracked 
over 50,000 guesses is actually a poor success rate and we can do 
much better using an optimized attack.  
Another  method  to  measure  the  relative  effectiveness  of  a 
password  cracking  session  would  be  to  determine  how  many 
guesses were required to crack a certain percentage of passwords. 
This approach can also be problematic, as it is highly dependent 
on  the  percentage  set.  This  can  be  seen  in  the  previous  figures 
4.2.1 and 4.2.2, as a password cracking session will start out fast, 
but quickly slow down as it takes more and more guesses to crack 
each successive password.  
To that end, since the SP800-63 document is primarily concerned 
with  defending  against  online  password  cracking  attacks  of  a 
limited number of guesses, it is useful to see the success rate of a 
password  cracking  attack  specifically  tailored  for  shorter  attack 
runs. To set the next test up, we combined the training password 
lists  RockYou_train28  through  RockYou_train32  to  create  a 
training list of five million user passwords. This entire training list 
was then sorted by the number of occurrences of each password, 
(so the new list’s first password was ‘123456’), with all duplicate 
guesses then being removed. This resulted in an input dictionary 
where the most probable guesses are tried first. Using this targeted 
input  dictionary,  we  once  again  ran  attacks  against 
the 
RockYou_test1 list. The results of these attacks when limited to 
50k guesses using this targeted dictionary can be seen in Fig 4.2.4. 
The reason a limit of 50k guesses was selected was that it seemed 
a reasonable number to model an online attack against a system 
that  did  not  possess  a  lockout  policy.  Therefore  if  an  attacker 
could make a guess against each account every 10 seconds, this 
would represent a cracking session of around six days. 
Figure 4.2.3: Results of Minimum Password Length on 
Shorter Password Cracking Sessions, Un-optimized Attack 
At  first  glance,  the  results  depicted  in  Fig  4.2.3  are  decidedly 
mixed  with  the  minimum  length  only  making  a  noticeable 
Figure 4.2.4: Results of Minimum Password Length on 
Shorter Password Cracking Sessions, Optimized Attack 
What’s striking about the above graph is given just fifty thousand 
guesses;  over  25%  of  the  7+  character  long  passwords  were 
cracked. Even the 10+ character password suffered a crack rate of 
over 14%. Regardless, the session depicted in Fig. 4.2.4 represents 
a much longer cracking session than what the NIST 800-63 model 
would  recommend.  For  a  Level  1  certified  system  with  a 
167minimum password length of 10 characters, the maximum number 
of guesses recommended to allow an attacker and still maintain an 
acceptable  failure  rate  is  2048  guesses.  To  better  compare  the 
results  to  the  NIST  model,  Fig  4.2.5  shows  the  same  cracking 
session, but this time limited to 2,000 guesses. 
Figure 4.2.5: Results of Minimum Password Length on a Very 
Short Password Cracking Session 
This  raises  the  question,  how  does  the  above  cracking  sessions 
compare to the acceptable NIST failure rates given for level 1 and 
2 certified systems? The answer, based on the above tests can be 
seen in Table 4.2.4. As the results show, if a blacklist of common 
passwords is not part of the password creation policy, the NIST 
model quickly breaks down. For comparison, a policy that meets a 
Level 1 system should only allow an attacker to guess a password 
within the allowed number of guesses with a probability of 1 in 
1024,  or  approximately  a  0.097%  chance.  Likewise,  a  Level  2 
certified  system  should  only  allow  an  attacker  to  be  successful 
with  a  probability  of  1  in  16,384,  or  approximately  a  0.0061% 
chance.  This  is  drastically  different  from  our  findings.  What’s 
worse, the attacker’s success rate actually increases as the number 
of  guesses  allowed  grows  due  to  the  higher  minimum  password 
length,  (though  it  does  drop  a  bit  when  10+  characters  are 
required).  This  implies  that  the  current  NIST  measurements 
overestimate  the  security  provided  by  increasing  the  minimum 
password length. 
Table 4.2.4: Targeted Cracking Attack vs. the NIST Entropy 
Value 
NIST Entropy 
Level 1 # of 
Guesses 
% Cracked Using 
Guesses Allowed 
by Level 1 
Acceptable Level1 
Failure  Rate 
Level 2 # of 
Guesses 
% Cracked Using 
Guesses Allowed 
by Level 2 
Acceptable Level2 
Failure  Rate 
7+ Chars 
16 
8+ Chars 
18 
9+ Chars 
19.5 
0.097% 
0.0061% 
0.0061% 
0.0061% 
0.0061% 
3.21% 
0.097% 
0.097% 
0.097% 
7.19% 
7.12% 
2.92% 
2.63% 
0.98% 
2.19% 
6.04% 