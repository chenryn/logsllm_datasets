### Twitsper: Enhancing User Controls Without Additional Trust Entities

#### 1. Introduction
Twitsper aims to enhance user controls on Twitter without requiring users to trust an additional entity, unlike proposals such as Lockr [44], which necessitate API calls. The following table outlines the new API functions introduced by Twitsper:

| Function          | Description                                                  |
|-------------------|--------------------------------------------------------------|
| `PrivSend(msg, group)` | Sends a private message to all users specified in the group.  |
| `isPriv?(msg)`     | Determines if a message is a private message.                |
| `PrivReply(msg, orig_msg)` | Sends a reply to all followers who received the original message. |

**Table 3: Twitsperâ€™s API Extensions Beyond Standard Twitter Functionality**

These extensions facilitate the separation of social connections from content providers. Unlike previous implementations of group messaging on Twitter (e.g., GroupTweet [8], Tweetworks [19], and Twitter Groups [20]), Twitsper ensures that Twitter is aware of private conversations, but Twitsper itself is not.

#### 2. Design Overview
In this section, we present an overview of Twitsper's design, considering various architectural alternatives and their pros and cons. Our design objectives guide the choice of the architecture that offers the best trade-offs. Surprisingly, a relatively simple approach provides the best balance and is used as the basic building block in Twitsper.

##### 2.1 Basic Definitions
- **Tweet**: A tweet is the primary mode of communication on Twitter. When a user posts a tweet, it appears on the user's Twitter page (e.g., `http://twitter.com/username`) and is visible on the timeline of all followers.
- **Direct Message**: A one-to-one private message between two users, possible only if the recipient follows the sender.
- **@ Reply**: A user can reply to another user's tweet using the @reply feature. This message will appear on the timeline of anyone following both users.
- **Twitter Page**: Each user's Twitter page (e.g., `http://twitter.com/username`) contains all tweets and @reply messages posted by the user. By default, this page is public, but it can be set to private, making it visible only to followers.
- **Timeline**: A user's timeline aggregates all tweets, direct messages, and @reply messages (sorted chronologically) visible to the user. Users can also view any tweet or @reply message posted by users they follow by visiting those users' Twitter pages.
- **List**: Twitter allows users to create lists of other Twitter users. These lists can be public or private.
- **Whisper**: Twitsper's private messaging feature, allowing a user to send private messages to a subset of their followers.

Twitter assigns a unique ID to every tweet, Direct Message, user, and list.

##### 2.2 Interface
Our primary goal is to extend Twitter's privacy model. In addition to sharing messages with all followers (tweet) or a single follower (Direct Message), we enable users to privately share messages with a non-empty subset of their followers. We achieve this by extending Twitter's API with the functionality shown in Table 3.

- **`PrivSend(msg, group)`**: Allows users to post private messages to a specific group of followers.
- **`isPriv?(msg)`**: Determines if a message is private.
- **`PrivReply(msg, orig_msg)`**: Enables replies to private messages, maintaining existing social connections via follower-followee relationships.

The `PrivReply` function is crucial for enabling richer communication while preserving privacy. For example, when Nina responds to a private message from Jack, she may choose to restrict the visibility of her reply to those among the recipients of the original message whom she has approved as followers.

##### 2.3 Architectural Choices
We considered several architectural possibilities to support the extended interface:

- **Using a Supporting Server**: Clients send whispers to a group of users by sending Direct Messages to each recipient. The supporting server maintains metadata to facilitate replies. This design preserves user content privacy but places significant onus on the client, potentially leading to high energy consumption on smartphones.
- **Posting Encrypted Content**: Clients post encrypted whispers as public tweets. Only intended recipients can decrypt the message. This approach compromises Twitter's commercial interests and requires filtering at the recipient's side.
- **Using Community Pages for Anonymity**: Clients post messages to a community account on Twitter, obfuscating the source. This approach addresses the encryption-based architecture's shortcomings but requires users to trust the obfuscation server and may heavily load the server.
- **Using Dual Accounts**: Users maintain two accounts: one for public use and one for private whispers. However, Twitter discontinued the @reply feature between disconnected users, rendering this approach infeasible.

**Table 4: Comparison of Architectural Choices**

| Architecture         | Twitter's Interests Preserved | No Added Trust | Easily Scales | Same Text Size | Always Available | Linkable to Original Message |
|----------------------|-------------------------------|----------------|---------------|----------------|------------------|------------------------------|
| Supporting Server    | Yes                           | Yes            | Yes           | Yes            | Yes              | No                           |
| Embed Lists          | Yes                           | Yes            | Yes           | No             | Yes              | No                           |
| Encryption           | No                            | Yes            | Yes           | No             | Yes              | No                           |
| Community Pages      | No                            | No             | No            | Yes            | No               | No                           |
| Dual Accounts        | No                            | Yes            | No            | Yes            | No               | No                           |

Based on the comparison, the use of a supporting server presents the best trade-off in terms of simplicity and meeting our design goals.

#### 3. Protecting Privacy
With the supporting server architecture, users do not directly send content to the Twitsper server. However, metadata (e.g., mapping of Direct Message IDs to list IDs) is provided to the server to support group conversations. This metadata could reveal group membership and size, so we incorporate features to hide this information from the Twitsper server and other undesired users.

**Threat Model**:
- **Components**: Twitter, user devices, Twitsper server, and the channel connecting these entities.
- **Trust Assumptions**: We trust Twitter not to leak private information and assume user devices do not compromise privacy. The potential sources of leakage are the Twitsper server and the channel. Since we administer the Twitsper server, we focus on ensuring that metadata is shared and stored securely.

By focusing on these aspects, we aim to provide a robust and secure solution for enhancing user controls on Twitter.