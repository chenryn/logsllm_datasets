duce user controls via Twitsper without adding another entity
for users to trust, unlike proposals such as Lockr [44], which call
API call
PrivSend(msg, group)
isPriv?(msg)
PrivReply(msg, orig_msg)
Function
Send msg to all
users speciﬁed in group
Determine if msg
is a private message
Send msg to all
of the user’s followers
who received orig_msg
Table 3: Twitsper’s API beyond normal Twitter functionality.
for the separation of social connections from content providers.
Lastly, in contrast to prior implementations of group messaging
on Twitter such as GroupTweet [8], Tweetworks [19], and Twitter
Groups [20], we ensure that Twitter is privy to private conversations
but Twitsper is not.
5.
Twitsper DESIGN
Next, we present an overview of Twitsper’s design. We con-
sider various architectural alternatives and discuss the pros and
cons with each. Our design objectives guide the choice of the ar-
chitecture that presents the best trade-offs. As mentioned earlier,
surprisingly, a fairly simple approach seems to yield the best trade-
off and is thus, used as the basic building block in Twitsper.
Basic deﬁnitions: First, we deﬁne a few terms related to Twitter
and brieﬂy explain the Twitter ecosphere.
• Tweet: A tweet is the basic mode of communication on Twitter.
When a user posts a tweet, that message is posted on the user’s
Twitter page (i.e., http://twitter.com/username), and is seen on
the timeline of everyone following the user.
• Direct Message: A direct message is a one-to-one private tweet
from one user to a speciﬁc second user, and is possible only if
the latter follows the former.
• @ Reply: A user can use a @reply message to reply to another
user’s tweet; this message will also appear on the timeline of
anyone following both users.
• Twitter page: Every user’s Twitter page(http://twitter.com/username)
contains all tweets and @reply messages posted by the user. By
default, this page is visible to anyone, even those not registered
on Twitter. If a user sets her Twitter account to be private, all
messages on her page are visible to any of the users following
her account.
• Timeline: A user’s timeline is the aggregation of all tweets, di-
rect messages, and @reply messages (sorted in chronological or-
der) visible to that user. In addition to her timeline, note that a
user can view any tweet or @reply message posted by any user
that she follows by visiting that user’s Twitter page.
• List: Twitter allows every user to create lists—groups of Twitter
users selected by the user. Lists can either be public and world
viewable, or private and viewable to the user alone.
• Whisper: Twitsper’s private messaging primitive to allow a
user to contact any subset of followers
Twitter associates every tweet, Direct Message, user, and list with
a unique ID.
Interface: Our primary goal is to extend Twitter’s privacy model.
In addition to sharing messages with all followers (tweet) or pre-
cisely one follower (Direct Message), we seek to enable users to
privately share messages with a non-empty proper subset of their
followers. To do so, we extend Twitter’s API with the additional
functionality shown in Table 3. We present the algorithmic repre-
sentations of these API calls later.
First, the PrivSend API call allows users to post private messages
that can be seen by one or more members in the user’s network,
411
who are speciﬁcally chosen to be the recipients of such a message.
However, simply enabling a message to be shared with a group of
users is insufﬁcient. To enable richer communication, it is neces-
sary that the recipients of a message (shared with a group) be able
to reply back to the group. In the case of discussions that need not
be kept private, a user may choose to make her reply public so that
others with similar interests can discover her. However, when Nina
responds to a private message from Jack, it is unlikely that Nina
will wish to share her reply with all the original target recipients
of Jack’s message since many of them may be “unconnected" to
her. Nina will likely choose to instead restrict the visibility of her
reply to those among the recipients of the original message whom
she has approved as her followers. Therefore, the PrivReply API
call enables replies to private messages, while preserving social
connections currently established on Twitter via follower-followee
relationships. Finally, the isPriv? API call is necessary to deter-
mine if a received message is one to which a user can reply with
PrivReply. Hereafter, we refer to the messages exchanged with the
PrivSend and PrivReply calls as whispers.
It is important to note that, since our goal is to build a wrap-
per around Twitter, rather than build a new OSN with these privacy
controls, this extended API has to build upon Twitter’s existing API
for exchanging messages. Though Twitter’s API may evolve over
time, we rely here on simple API calls—to post a tweet to all fol-
lowers and to post a Direct Message to a particular follower—that
are unlikely to be pruned from Twitter’s API. Also note that, in
some cases, multiple rounds of replies to private messages can re-
sult in the lack of context for some messages for some recipients,
since all recipients of the original whisper may not be connected
with each other. In the trade-off between privacy and ensuring con-
text, we choose the former in designing Twitsper.
Architectural choices: Next, we discuss various architectural
possibilities that we considered for Twitsper’s design, to support
the interface described above. While it may be easy for Twitter to
extend their interface to support private group messaging, we note
that Twitter has not yet done so in spite of the need for this amongst
its users. Therefore, our focus is in designing Twitsper to offer
this privacy control to users without having to wait for Twitter to
make any changes.
Using a supporting server: The simplest architecture that one
can consider for Twitsper is to have clients send a whisper to a
group of users (represented by a list on Twitter) by sending a Direct
Message to each of those users. To enable replies, when a client
sends a whisper, it can send to the supporting server the identiﬁers
of the Direct Messages and the ID of the Twitter list which contains
the recipients. Thus, a user can query this supporting server to
check if a received Direct Message corresponds to a whisper and to
obtain the ID of the associated Twitter list. When the user chooses
to reply to a whisper, the user’s client can retrieve the Twitter list
containing the recipients of the original whisper, locally compute
the intersection between those recipients and the user’s followers,
and then send Direct Messages to all those in the intersection.
If the supporting server is unavailable, users can continue to use
Twitter as before, except that the metadata necessary to execute
the isPriv? and PrivReply API calls cannot be retrieved from the
server. However, the client software can be modiﬁed to allow a
recipient to obtain relevant mappings (ID of the list of recipients
of a whisper) from the original sender. Another option is to have
the client embed the ID of the list associated with a whisper in ev-
ery Direct Message sent out as part of a whisper. However, given
Twitter’s 140 character limit per Direct Message, this can be a sig-
niﬁcant imposition, reducing the permissible length of the message
content.
412
This design places much of the onus on the client and may result
in signiﬁcant energy consumption for the typical use case of Twit-
ter access from smartphones. On the ﬂip side, in this architecture,
the content posted by a user is not exposed to the supporting server,
i.e., privacy of user content from Twitsper’s server is preserved.
The server is simply a facilitator of group communications across a
private group and only maintains metadata related to whispers (we
discuss later in Section 6 how we protect the privacy of this meta-
data as well from the supporting server). Further, Twitter is able to
see users’ postings and thus its commercial interests are protected.
We note that the alternative of the client sending messages to the
supporting server for retransmission to the recipients is not an op-
tion, since this would require users to trust the supporting server
with the content of their messages.
This design however does have some shortcomings. Twitter lacks
sufﬁcient context to recognize that the set of Direct Messages shared
to send a whisper constitute a single message rather than a local
trending topic. Similarly, Twitter cannot link replies with the orig-
inal message, since all of this state is now maintained at the sup-
porting server.
Posting encrypted content: To address the shortcoming in the
previous architecture of being unable to link replies to the original
whispers, in our next candidate architecture, we consider clients
posting a whisper just as they would a public message (tweet) but
encrypt it with a group key which is only shared with a select group
of users (who are the intended recipients of the message). This
reduces the privacy problem to a key exchange problem for group
communications. An out-of-band key exchange is possible.
However, since only intended recipients can decrypt a tweet,
Twitter’s commercial interests are compromised. Furthermore, ﬁl-
tering of encrypted postings not intended for them is necessary at
the recipient’s side; if not, a user’s Twitter client will display inde-
cipherable noise from these postings. In other words, the approach
is not backward compatible with Twitter. Note here that if these
issues are resolved, e.g., by sharing encryption keys with Twitter,
encryption can be used with any of the other architectural choices
considered here to enhance privacy.
Using community pages to support anonymity: Alternatively,
one may try to achieve anonymity and privacy by obfuscation.
Clients post tweets to a obfuscation server, which in turn re-posts
messages on behalf of users to a common “community” account
on Twitter. Except for the server, no one else is aware of which
message maps to which user. When a user queries the obfuscation
server for her timeline, the server returns a timeline that consists
of messages from her original timeline augmented with messages
meant for that user from the “community” page. The obfuscation
prevents the exposure of private messages to undesired users. Since
the “community" page is hosted on Twitter, the shortcoming of the
encryption-based architecture is readily addressed—Twitter has ac-
cess to all information unlike in the case of encryption. An ap-
proach similar to this was explored in [41].
However, this architecture has several drawbacks. First, Twit-
ter cannot associate messages with speciﬁc users; this precludes
Twitter from proﬁling users for targeted advertisements and such.
Second, all users need to trust the obfuscation server with the con-
tents of their messages. Finally, since the architecture is likely to
heavily load the server (due to the scale), the viability of the design
in practice becomes questionable. When the server is unavailable,
no private messages can be sent or received.
Using dual accounts: In our last candidate architecture, every
user maintains two accounts. The ﬁrst is the user’s existing account,
and a second private account (with no followers or followees) is
used for sending whispers. When Alice wishes to send a whisper
Design
Supporting server
Embed lists
Encryption
Community pages
Dual accounts
(No longer possible)
Twitter’s
interests
preserved
(cid:2)
(cid:2)
×
×
×
No
added
trust
(cid:2)
(cid:2)
(cid:2)
×
(cid:2)
Easily
scales
(cid:2)
(cid:2)
(cid:2)
×
(cid:2)
Same
text
size
(cid:2)
×
(cid:2)
(cid:2)
(cid:2)
Always
avai-
lable
(cid:2)
(cid:2)
×
×
(cid:2)
Linkable
to orig
message
×
×
(cid:2)
×
(cid:2)
User
Controls
Twitsper
Server
Twitsper App
on user device
Login Credentials
+
Content
Twitter
Servers
Figure 1: Comparison of architectural choices.
Figure 2: System architecture using supporting
server.
to Bob and Charlie, she posts an @reply message from her private
account to Bob’s and Charlie’s private accounts. Since Alice’s pri-
vate account has no followers, these @reply messages are visible to
no users other than to the intended recipients. However, as of mid-
2009, Twitter discontinued the “capability” of @reply messages be-
tween disconnected users after concluding that less than 1% of the
users found this feature useful and that it contributes to spam mes-
sages [14]. Thus, @reply messages posted from these disconnected
private accounts will not be visible to intended recipients. Other
problems with this architectural choice are that Twitter is unable to
associate private messages with the normal accounts of users and
responding to private messages is a challenge.
Figure 1 summarizes the comparison of the various architectural
choices with respect to our design goals. While no solution satisﬁes
all desirable properties, we see that the use of a supporting server
presents the best trade-off in terms of simplicity and satisfying our
goals. Therefore, we choose this to be the architectural choice for
implementing Twitsper, as shown in Figure 2.
While the basic structure of the architecture is simple as dis-
cussed above, there exist certain challenges in making the server
and other undesired users oblivious to the speciﬁcs of a group con-
versation. We discuss these issues and our approaches for handling
them in the following section.
6. PROTECTING PRIVACY
With the supporting server architecture, users do not directly
send content to the Twitsper server. However, there is meta-
data that is provided to the server in order to support group con-
versations —the mapping of Direct Message IDs to list IDs. This
metadata could reveal the identities of the members that belong to
a private conversation or the group size, and a user may desire to
keep such information private. Hence, we incorporate several fea-
tures that hides this information both from the Twitsper server
and other undesired users.
Threat model: The components of Twitsper are a) Twitter
itself, b) user devices, c) the Twitsper server, and d) the channel
connecting these entities.
We trust Twitter not to leak a person’s private information and
this has been the premise of our work. We assume that a user’s
personal device does not compromise a user’s privacy; this prob-
lem is orthogonal to our work. Thus, the two potential sources of
leakage are the Twitsper server and the channel. Note here that
the Twitsper server is the only new addition to the pre-existing
Twitter architecture. As discussed earlier, in our supporting server
architecture, private content is always posted to Twitter’s servers,
thus ensuring that this content is not leaked due to the Twitsper
server. The threat is then the leakage of the metadata associated
with private content that may be exposed to the server. Since we
administer the Twitsper server, we assume that the server will
not modify or delete metadata stored on it. Therefore, we focus in-
stead on ensuring that the manner in which metadata is shared with
and stored on the Twitsper server does not reveal private infor-
413