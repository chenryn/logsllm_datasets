# HCTF-xor_game&the_end详细WP
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
这次比赛只做出了这两个题，其中我觉的the_end的思路还是可以借鉴一下的。
## xor_game
###  文件分析
题目给出了两个文件一个是加密脚本，一个是加密后输出的文件。打开加密的脚本，就能看出和2017suctf的一个题目很像。
###  加密脚本
    from Crypto.Util.strxor import strxor
    import base64
    import random
    def enc(data, key):
        key = (key * (len(data) / len(key) + 1))[:len(data)]
    return strxor(data, key)
    poem = open('poem.txt', 'r').read()
    flag = "hctf{xxxxxxxxxxx}"
    with open('cipher.txt', 'w') as f:
        f.write(base64.b64encode(enc(poem, flag[5:-1])))
    f.close()
###  加密的数据
    ciMbOQxffx0GHQtSBB0QSQIORihXVQAUOUkHNgQLV
    AQcAVMAAAMCASFEGQYcVS8BNh8BGAoHFlMAABwCTS
    VQC2UdMQx5FkkGEQQAAVMAAQtHRCNLF0NSORscMkk
    aHABSExIYBQseUmBCFgtSKwEWfwELFRcGbzwEDABH
    VS8DDAcXfwUcMQwCDUUBCgYYSQEBATNKGwQeOkkbP
    hsYERYGDB0TYzwCUSVCDE8dKh0BNg4GAAkLSVMWHB
    pHQCxQF08AOhkWPh1OAA0XRQQRBQJKQyVKFghSMA9
    5Gh8LGhEHBB8YEE4UViFaEQEVfwAdfx0GEUUWAAAR
    GxpHTiFQERx4FkkROgUHERMXRTpUCANtYy9RFk8TL
    EkHNwxOFhcbAhsASR0STC1GCk8UMwYEOhsdfiEdRR
    0bHU4QSDRLHR0XO0kGMQ0LEgATERYQSQgORDJaWAs
    XMgYdfxsbGAB4LRYVGxpHUyFXHU8TMQ1TPRsLFREa
    DB0TSRoIASJGGR1SKwEWfwUBFQFSChVUHQYCASNWF
    Q0XLRocMgxkNgoAABd+PRkIKwkDEAoTLQ1TKwELVA
    gHFhoXRU4BUy9OWBsaOkkeMAYAVAQcAVMXCBwEQDN
    Qci4HJwAfNggcDUUXHQcGDAMCASFGCxsaOh0aPAAd
    GUUQBBoASRoIASNCCBsHLQxTMgAdABx4IxoYBQcJR
    mBXEApSNgcHOgcdEUUeDBURRU4FVDQDGQMBMEkVNg
    UCHQsVRQccDE4XVDJGcjsaOhsWfwgcEUUTCQQVEB1
    HTCVOFx0bOhpTKwEcGxAVDRwBHU4TSSUDHQ4AKwF5
    FkkMEQkbAAURSSdHQC0pPAYXO0kSLEkaHABSFAYdD
    BpHQyVCDRsLfwYVfwgbABAfC1MYDA8RRDMpKwcXMQ
    5TNhpOGgoGRRAcCAEUDWBQFQAZOkkUOhoaARcXbzY
    CDABHVilPDE8TMxocfxsLAAQbCxYQSQwITyUDCB0d
    Kg0fJkk/
    HQsVRTURBwlHTDVQGwMXVSYQPBwCAG8mDQERDGQuA
    ShGGR1SMwYFOkVOPUUQAB8dDBgCASlNWAMdKQx5Ew
    YYEUUbFlMVSR4ITiwDFwlSLB0BKg4JGAwcAlMWBRs
    CDCdRHQocfwgfOAgLfiQBRRcRGgELQDRGWAIbPBsc
    cgsbBhYGRRwSSRkOTyQpOgMXOg0aMQ5OAA0ACgYTA
    U4KWGBVHQYcLGMqOggcB0UBERIAAAEJRCQDEQFSKw
    EWfwsLGAwXA3kyBhsVKwkDGgoeNgwFOkkaHAQGRRI
    YBU4EQC4DEAoTLWM2KQwAVAQcERoXAB4GVSUDHAYB
    PBsWKwxCVCxSCBYASRoPRGBMDAcXLUkHNwwHBkUdE
    h1+OgEKRGBAGQFSMQYHfw4cFRYCRQccDE4KTi1GFh
    t4EwwVK0kaG0UGDRZULA8UVWBXF08VMEkkOhoaWEU
    GDRZUDQsGRWBODRwGfwccK0kcEREHFx1UHQFHTy9U
    EAoAOmMgOgxCVCxSEhYVG049QC4DPgMdKAwBLEkBG
    kUfHFMcDA8DDWBKFk8UKgUffwsCGwofRRIYBgAAAT
    RLHU8FPhBTPgUCVBEaAFMDCBdtZzJGCRoXMR0fJkk
    DHRYBABdUGgEKRGwDGhoGfwgfLAZOEAAXFR8NSQMI
    VyVHWA0Lfx4aMQ1CVAMACgAARU4UTy9UWAAAfxsSN
    gdkMgwEAHkkGw8NTyEDKA4APgQaKwhCVBYdCh1UCB
    1HUi9MFk8TLGMfNg8LVAcXRRERCBsTSCZWFE8eNgI
    WfxobGQgXF1MSBQEQRDJQWA4cO0kXOggaHEUeDBgR
    SQ8SVTVOFk8eOggFOhpkNQkBClMXCBwCASFBFxoGf
    x4bPh1OHAQB
###  思路分析
由于key的长度肯定是远远小于给的poem的长度，这样的话进行异或的过程中肯定是会有可以利用统计规律进行计算得出的值（第一次做这样的密码题，让我想起了模仿游戏当中破解德军密码机的时候也是用了这个方法）
###  方法讲述
一、可以利用一个叫做xortools的工具进行一个字频率的一个统计，这样会方便一些在不知道脚本的情况下
二、上面这一步可能中间会有些错误会需要手动修改，于是。。因为suctf见过，就借用了一个师傅的脚本进行了一个快速的解题
😂
###  exp
     # coding:utf8
     # by https://findneo.github.io/
    def getCipher(file='cipher.txt'):
    '''从文件中读取十六进制串，返回十六进制数组
    '''
        c=''.join(map(lambda x:x.strip(),open('cipher.txt').readlines())).decode('base_64')
        cc= [ord(i) for i in c]
        # print cc,len(cc)
        return cc
        # c = open(file).read()
        # codeintlist = []
        # codeintlist.extend(
        #     (map(lambda i: int(c[i:i + 2], 16), range(0, len(c), 2))))
        # return codeintlist
    def getKeyPool(cipher, stepSet, plainSet, keySet):
    ''' 传入的密文串、明文字符集、密钥字符集、密钥长度范围均作为数字列表处理.形如[0x11,0x22,0x33]
        返回一个字典，以可能的密钥长度为键，以对应的每一字节的密钥字符集构成的列表为值，密钥字符集为数字列表。
            形如{
                    1:[[0x11]],
                    3:[
                        [0x11,0x33,0x46],
                        [0x22,0x58],
                        [0x33]
                       ]
                }
    '''
        keyPool = dict()
        for step in stepSet:
            maybe = [None] * step
            for pos in xrange(step):
                maybe[pos] = []
                for k in keySet:
                    flag = 1
                    for c in cipher[pos::step]:
                    if c ^ k not in plainSet:
                        flag = 0
                if flag:
                    maybe[pos].append(k)
        for posPool in maybe:
            if len(posPool) == 0:
                maybe = []
                break
        if len(maybe) != 0:
            keyPool[step] = maybe
    return keyPool
    def calCorrelation(cpool):
    '''传入字典，形如{'e':2,'p':3}
        返回可能性，0~1,值越大可能性越大
        (correlation between the decrypted column letter frequencies and
        the relative letter frequencies for normal English text)
    '''
        frequencies = {"e": 0.12702, "t": 0.09056, "a": 0.08167, "o": 0.07507, "i": 0.06966,
                   "n": 0.06749, "s": 0.06327, "h": 0.06094, "r": 0.05987, "d": 0.04253,