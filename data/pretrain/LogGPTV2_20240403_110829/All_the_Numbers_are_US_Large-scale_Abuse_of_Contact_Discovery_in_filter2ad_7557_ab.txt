its robustness, in-memory design, and near constant lookup-
time [70]. Since one Redis instance cannot handle the required
number of keys, we construct a cluster of 120 instances on our
node. Populating the table requires ≈13 h in our experiments
due to several bottlenecks, e.g., the interface to the Redis cluster
can only be accessed through a network interface. Unfortunately,
only 8 billion hashes (roughly 6.8 % of the considered number
space) can ﬁt into the RAM with our test setup. We perform
batched lookups of 10,000 items, which on average take 1.0 s,
resulting in an amortized lookup time of 0.1 ms.
To cover the entire mobile phone number space, a system
with several Terabytes of RAM would be necessary, which
makes this type of hash reversal feasible for attackers with
moderate ﬁnancial resources, such as large companies or nation
state actors. For attackers with consumer hardware, it would
also be feasible to store a full database on disk, which requires
roughly 3.3 TB of storage space6, but results in signiﬁcantly
higher lookup times due to disk access latencies.
5Signal truncates the SHA-1 output to 10 B to reduce communication
overhead while still producing unique hashes for all possible phone numbers.
6Assuming SHA-1 hashes of 20 bytes and 64-bit encoded phone numbers.
3
120
60
0
20
10
0
15.3
15.6
15.9
5.514
10
5
0
0.561 0.057
5
1
10
Mask Length
10k 100k 1M
10k 100k 1M
Batch Size
Batch Size
(a) Hash rates in MH/s.
(b) Total times in h.
(c) Amort. times in s.
Figure 1: Brute-force benchmark results.
B. Brute-Force
Another possibility to reverse phone number hashes is to
iteratively hash every element of the input domain until a
matching hash is found. A popular choice for this task is the
open-source tool hashcat [74], which is often used to brute-
force password hashes. Hashcat can efﬁciently parallelize the
brute-force process and additionally utilize GPUs to maximize
performance. With its hybrid brute-forcing mode it is possible
to specify masks that constrain the inputs according to a
given structure. We use this mode to model our input space
of 118 billion mobile phone numbers (cf. § II-B).
Benchmarks. We perform lookups of phone number hashes
on one node of our high-performance cluster with two In-
tel Xeon Gold 6134 (8 physical cores at 3.2 GHz), 384 GB
of RAM, and two NVIDIA Tesla P100 GPUs (16 GB of RAM
each). Our setup has a theoretical rate of 9.5 GHashes/s accord-
ing to the hashcat benchmark. This would allow us to search
the full mobile phone number space in less than 13 seconds.
However, the true hash rate is signiﬁcantly lower due to
the overhead introduced by hashcat when distributing loads for
processing. Since many of the preﬁxes have short subscriber
numbers (e.g., 158,903 preﬁxes with length 4 digits), the
overhead of distributing the masks is the bottleneck for the
calculations, dropping the true hash rate to 4.3 MHashes/s
for 3-digit masks (less than 0.05 % efﬁciency). The hash rate
reaches its plateau at around 105 MHashes/s for masks larger
than 4 digits (cf. Fig. 1a), which is still only 1.1 % of the
theoretical hash rate.
A full search over the number space can be completed
in 15.3 hours for batches of 10,000 hashes. While the total
time only slightly increases with larger batch sizes (cf. Fig. 1b),
the amortized lookup rate drops signiﬁcantly, to only 57 ms per
hash for batches of 1 million hashes (cf. Fig. 1c). Consequently,
the practical results show that theoretical hash rates cannot
be reached by simply deploying hashcat and that additional
engineering effort would be required to optimize brute-force
software for efﬁcient phone number hash reversal.
C. Optimized Rainbow Tables
Rainbow tables are an interesting time-memory trade-off to
reverse hashes (or any one-way function) from a limited input
domain. Based on work from Hellman [32] and Oechslin [55],
they consist of precomputed chains of plaintexts from the input
domain and their corresponding hashes. These are chained
together by a set of reduction functions, which map each hash
back to a plaintext. By using this mapping in a deterministic
chain, only the start and end of the chain must be stored to be
able to search for all plaintexts in the chain. A large number of
4
chains with random start points form a rainbow table, which
can be searched by computing the chain for the given hash,
and checking if the end point matches one of the entries in the
table. If a match is found, then the chain can be computed from
the corresponding start index to reveal the original plaintext.
The length of the chains determines the time-memory trade-
off: shorter chain lengths require more chains to store the
same number of plaintexts, while longer chains increase the
computation time for lookups. The success rate of lookups is
determined by the number of chains, where special care has to
be taken to limit the number of duplicate entries in the table
by carefully choosing the reduction functions.
Each rainbow table is speciﬁc to the hash algorithm being
used, as well as the speciﬁcations of the input domain, which
determines the reduction functions. Conventional rainbow tables
work by using a speciﬁc alphabet as well as a maximum
input length, e.g., 8-digit ASCII numbers7. While they can be
used to work on phone numbers as well, they are extremely
inefﬁcient for this purpose: to cover numbers conforming to
the E.164 standard (up to 15 digits), the size of the input
domain would be 1015, requiring either huge storage capacity
or extremely long chains to achieve acceptable hit rates.
By designing new reduction functions that always map a
hash back into a valid phone number, we improve performance
signiﬁcantly. While we use our approach to optimize rainbow
tables for phone numbers, our construction can also ﬁnd
application in other areas, e.g., advanced password cracking.
Specialized Reduction Functions. Our optimization relies
on the speciﬁc structure of mobile phone numbers, which
consist of a country code, a mobile preﬁx, and a subscriber
number of a speciﬁc length (cf. § II). Conventional reduction
functions simply perform a modulo operation to map each hash
back to the input domain, with additional arithmetic to reduce
the number of collisions in the table.
Our algorithm concatenates ranges of valid mobile phone
numbers into a virtual table, which we can index with a given
hash. For each preﬁx, we store the amount of possible subscriber
numbers and the offset of the range within the table. To select
a valid number, we calculate the index from the 64-bit preﬁx
of the given hash modulo the table size and perform a binary
search for the closest smaller offset to determine the corre-
sponding mobile preﬁx. Subtracting the offset from the index
yields the subscriber number. For example, given Tab. I and
index 3,849,382, we select the preﬁx +491511 and calculate
the subscriber number as 3,849,382 − 110,000 = 3,739,382,
yielding the valid mobile phone number +491511 3739382.
In practice, our algorithm includes additional inputs (e.g.,
the current chain position) to limit the number of collisions
and duplicate chains. The full speciﬁcation is given in § B.
Implementation. We implement our optimized rainbow
table construction based on the open-source version 1.28
of RainbowCrack [35]. To improve table generation and lookup
performance, we add multi-threading to parts of the program
via OpenMP [57]. SHA-1 hash calculations are performed
using OpenSSL [58]. The table generation is modiﬁed to receive
7There are implementations that allow per-character alphabets [7], which is
not applicable to phone numbers, since the allowed digits for each position
strongly depend on the previous characters. More details are given in § C.
8Newer versions of RainbowCrack that support multi-threading and GPU ac-
celeration exist, but are not open-source [68].
Country Code + Preﬁx
# Subscriber Numbers
Offset
+1982738
+172193
+491511
+49176
10,000
100,000
10,000,000
10,000,000
0
10,000
110,000
10,110,000
Table I: Example for selecting the next phone number from a
hash value for our improved rainbow table construction.
Evaluation Criteria
Hash Database
§ III-A
Brute-Force
§ III-B
Rainbow Tables
§ III-C
Generation Time
RAM / Storage Requirements
Lookup Time per 10k Batch
Best Amortized Time per Hash
GPU Acceleration
13 h
≥ 3.3 TB
1 s
0.1 ms

–
– / –
15.3 h
57 ms

24.5 h
2 GB / 24 GB
520 s
52 ms
()
Table II: Comparison of phone number hash reversal methods.
the number speciﬁcation as an additional parameter (a ﬁle
with a list of phone number preﬁxes and the length of
their subscriber numbers). Our open-source implementation
is available at https://contact-discovery.github.io/.
Benchmarks. We generate a table of SHA-1 hashes for
all registrable mobile phone numbers (118 billion numbers,
cf. § II) and determine its creation time and size depending on
the desired success rate for lookups, as well as lookup rates.
Our test system has an Intel Core i7-9800X with 16 physical
cores and 64 GB RAM (only 2 GB are used), and can perform
over 17 million hash-reduce operations per second.
We store 100 million chains of length 1,000 in each
ﬁle, which results in ﬁles of 1.6 GB with a creation time
of ≈98 minutes each. For a single ﬁle, we already achieve a
success rate of over 50 % and an amortized lookup time of less
than 26 ms for each hash when testing batches of 10,000 items.
With 15 ﬁles (24 GB, created within 24.5 hours) the success rate
is more than 99.99 % with an amortized lookup time of 52 ms.
In comparison, a conventional rainbow table of all 7 to 15-
digit numbers has an input domain more than 9,400x larger than
ours, and (with similar success rates and the same chain length)
would require approximately 230 TB of storage and a creation
time of more than 26 years on our test system (which is a
one-time expense). The table size can be reduced by increasing
the chain length, but this would result in much slower lookups.
These measurements show that our improved rainbow table
construction makes large-scale hash reversal of phone numbers
practical even with commodity hardware and limited ﬁnancial
investments. Since the created tables have a size of only a few
gigabytes, they can also be easily distributed.
D. Comparison of Hash Reversal Methods
Our results for the three different approaches are sum-
marized in Tab. II. Each approach is suitable for different
application scenarios, as we discuss in the following. In § D,
we discuss further optimizations for the presented methods.
A full in-memory hash database (cf. § III-A) is an option
only for well-funded adversaries that require real-time reversal
of hashes. It is superior to the brute-force method and rainbow
tables when considering lookup latencies and total runtimes.
Brute-force cracking (cf. § III-B) is an option for a range of
adversaries, from nation state actors to attackers with consumer-
grade hardware, but requires non-trivial effort to perform
efﬁciently, because publicly available tools do not perform well
for phone numbers. Batching allows to signiﬁcantly improve
the amortized lookup rate, making brute-force cracking more
suitable when a large number of hashes is to be reversed, e.g.,
when an attacker compromised a database.
Our optimized rainbow tables (cf. § III-C) are the approach
most suited for adversaries with commodity hardware, since
these tables can be calculated in reasonable time, require only
a few gigabytes of storage, can be easily customized to speciﬁc
countries or number ranges and types, and can reverse dozens
of phone number hashes per second. It is also possible to
easily share and use precomputed rainbow tables, which is
done for conventional rainbow tables as well [67], despite their
signiﬁcantly larger size.
For other hash functions than SHA-1, we expect reversal
and generation times to vary by a constant factor, depending
on the computation time of the hash function [31] (except for
hash databases where look-up times remain constant).
Our results show that hashing phone numbers for privacy
reasons does not provide any protection, as it is easily possible
to recover the original number from the hash. Thus, we strictly
advise against the use of hashing-based protocols in their current
form for contact discovery when users are identiﬁed by low-
entropy identiﬁers such as phone numbers, short user names, or
email addresses. In § VI-A, we discuss multiple ideas how to at
least strengthen hashing-based protocols against the presented
hash reversal methods.
IV. USER DATABASE CRAWLING
We study three popular mobile messengers to quantify
the threat of enumeration attacks based on our accurate phone
number database from § II-B: WhatsApp, Signal, and Telegram.
All three messengers discover contacts based on phone numbers,
yet differ in their implementation of the discovery service and
the information exposed about registered users.
Threat Model. Here we consider an adversary who is a
registered user and can query the contact discovery API of the
service provider of a mobile messaging application. For each
query containing a list of mobile phone numbers (e.g., in hashed
form) an adversary can learn which of the provided numbers are
registered with the service along with further information about
the associated accounts (e.g., proﬁle pictures). The concrete
contact discovery implementation is irrelevant and it might be
even based on PSI (cf. § VI-A). The adversary’s goal is to check
as many numbers as possible and also collect all additional
information and meta data provided for the associated accounts.
The adversary may control one user account or even multiple
accounts, and is restricted to (ab)use the contact discovery API
with well-formed queries. This implies that we assume no
invasive attacks, e.g., compromising other users or the service
provider’s infrastructure.
A. Investigated Messengers
WhatsApp. WhatsApp is currently one of the most popular
messengers in the world, with 2.0 billion users [25]. Launched
in 2009, it was acquired by Facebook in 2014 for approxi-
mately 19.3 billion USD.
5
Signal. The Signal Messenger is an increasingly popular
messenger focused on privacy. Their end-to-end-encryption
protocol is also being used by other applications, such as
WhatsApp, Facebook, and Skype. There are no recent statistics
available regarding Signal’s growth and active user base.
Telegram. Telegram is a cloud-based messenger that re-
ported 400 million users in April 2020 [23].
B. Differences in Contact Discovery
Both WhatsApp and Telegram transmit the contacts of users
in clear text to their servers (but encrypted during transit), where
they are stored to allow the services to push updates (such as
newly registered contacts) to the clients. WhatsApp stores phone
numbers of its users in clear text on the server, while phone
numbers not registered with WhatsApp are MD5-hashed with
the country preﬁx prepended (according to court documents
from 2014 [2]).
Signal does not store contacts on the server. Instead, each
client periodically sends hashes of the phone numbers stored
in the address book to the service, which matches them against
the list of registered users and responds with the intersection.
The different procedures illustrate a trade-off between
usability and privacy: the approach of WhatsApp and Telegram
can provide faster updates to the user with less communication
overhead, but needs to store sensitive data on the servers.
C. Test Setups
We evaluate the resistance of these three messengers against