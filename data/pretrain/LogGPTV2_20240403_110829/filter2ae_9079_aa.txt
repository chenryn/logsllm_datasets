# 前言
在CNVD看到一个MyuCMS的一个任意文件删除漏洞。然后去搜了下这个CMS，发现官网公告显示在V2.2.3版本修复了CNVD提供的多处漏洞。
怀着好奇的心里，去CNVD搜了下这个CMS，结果发现V2.1版本存在多处高危漏洞。既然这样，就来分析下这些漏洞产生的原因和利用方式。
# 过程分析
> MyuCMS_V2.1 基于 Thinkphp 5.0.24 开发。下载链接可以在官方社区找到。
## 前台任意文件下载
既然是文件下载，先在整个项目中搜索下 **download** 关键字，尝试看看能不能直接定位到关键代码。
通过搜索定位到 **bbs** 模块下的 **Index** 控制器的 **download** 方法。
**download** 方法接受三个参数，这三个参数我们是完全可控的，单从 **download** 这个方法来看，无任何参数内容限制，直接将
**$url** 和 **$name** 两个参数传递给了 **Http** 类的 **download** 方法来执行下载。
若 **Http- >download()** 方法中还未对参数内容进行限制，便会造成任意文件下载漏洞。
接下来，我们跟进 **Http- >download()** 方法。
    static public function download ($filename, $showname='',$content='',$expire=180) {
            if(is_file($filename)) { //判断 $filename 是否为文件
                $length = filesize($filename); // 获取 $filename 的文件大小
            }elseif($content != '') {
                $length = strlen($content);
            }else {
                throw_exception($filename.L('下载文件不存在！')); // 若文件不存在抛出异常
            }
            if(empty($showname)) {
                $showname = $filename; // $showname 为下载后文件的名称。若未设置则与被下载文件同名
            }
            $showname = basename($showname); //获取路径中的文件名部分
            if(!empty($filename)) {
                $type = mime_content_type($filename); //获取文件的MIME类型
            }else{
                $type    =   "application/octet-stream";
            }
            //发送Http Header信息 开始下载
            header("Pragma: public");
            header("Cache-control: max-age=".$expire);
            //header('Cache-Control: no-store, no-cache, must-revalidate');
            header("Expires: " . gmdate("D, d M Y H:i:s",time()+$expire) . "GMT");
            header("Last-Modified: " . gmdate("D, d M Y H:i:s",time()) . "GMT");
            header("Content-Disposition: attachment; filename=".$showname);
            header("Content-Length: ".$length);
            header("Content-type: ".$type);
            header('Content-Encoding: none');
            header("Content-Transfer-Encoding: binary" );
            if($content == '' ) {
                readfile($filename); // 读取文件内容并输出，从而实现下载
            }else {
                echo($content);
            }
            exit();
        }
由如上代码我们可以看出， **Http- >download()** 方法中同样 **未对传入的参数进行内容限制** ，只实现了下载的业务逻辑。
此处任意文件下载，结合 phar
反序列化，还可以造成任意文件删除和任意文件写入（仅linux下）。这两条反序列化利用链在先知和安全客上都已经有大佬分析的很好了，有兴趣的师傅直接看下面链接就行。
[MyuCMS
> 在CNVD上看到的是任意文件删除。但我发现的是一个任意目录删除，并不能只删除单独一个文件。可能此处所说的任意文件删除就是[MyuCMS "MyuCMSerror('请登录',url('login/index')); 
               print s();
            }
        }
而 **Addons.php** 继承自 **AdminBase** 类，且初始化时执行父类 **AdminBase** 的
**_initialize()** 方法，在 **AdminBase** 类中调用了父类 **Controller** 的
**_initialize()** 方法。而父类的 **Controller** 的 **_initialize();** 方法的实现内容为空。
所以 **Addons.php** 在未登录的情况下也可以访问。这意味我们不需要登录后台也可以触发任意目录删除漏洞。
### Payload
所以给出 Payload 如下，即可删除整个 **install** 目录
    Payload: http://xxxxxxxxx/admin/Addons/un?info=../install
## SQL注入漏洞
在 CNVD 上的描述为， **MyuCMS us***_xi***.html页面存在SQL注入漏洞**
通过对整个项目文件的搜索，最终确定为 **user_xiaoxi.html** 文件。
该视图文件，对应的控制器为 **application/bbs/controller/User.php** 。显示消息为 **User->xiaoxi()** 方法。该方法中无用户可控参数。所以注入不可能在此方法中。
如图所示功能处可将未读消息更改为已读消息。同时我们抓包观察。未读消息为其他用户在登录用户发布的文章下留言所产生。
可以发现，该功能对应的路由地址，以及所提交的参数。我们找到路由地址对应的方法为 **User- >xiaoxidel()** 代码如下
    public function xiaoxidel($ids)
        {
            if (!session('userid') || !session('username')) { // 进行登录判断
                $this->error('亲！请登录',url('bbs/login/index'));
            } else {
                if ($ids==0) { // 根据 ids 参数来判断执行的动作为标记消息还是删除消息
                $id = input('id'); // 通过input助手函数获取需要操作的消息对应的 id
                $data['open'] = 1;