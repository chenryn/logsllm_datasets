A in the above simulation, as well as the vector v that would
be output by PB when it does not abort, are computationally
indistinguishable from the corresponding values in the real
sVOLE, S forwards the query to F p,r
:= (V (cid:48)
spsVOLE.
¯αi
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:45 UTC from IEEE Xplore.  Restrictions apply. 
1089
Let β = a(cid:48) + a, x(cid:48) = x∗ + x, and x(cid:48) =(cid:80)r−1
protocol execution. It thus only remains to analyze steps 4–6,
which determine whether PB aborts.
i=0 x(cid:48)[i] · Xi, as
above. (Note that a(cid:48), a, x∗, x are well-deﬁned in the real-world
execution as well.) In the real-world execution, PB computes
VB =
(z[i] − ∆ · x(cid:48)[i]) · Xi
y[i] · Xi
χi · v[i] − r−1(cid:88)
χi · v[i] + χα · v[α] − r−1(cid:88)
χi · v[i] + χα · (δ − ∆ · β − d −(cid:88)
i=0
i=0
=
=
i=0
i(cid:54)=α
n−1(cid:88)
(cid:88)
(cid:88)
− r−1(cid:88)
n−1(cid:88)
i=0
A − ∆ · (β · χα − x
(cid:48)
χi · w[i] − r−1(cid:88)
z[i] · Xi + ∆ · x
= V
i(cid:54)=α
i=0
i=0
=
(cid:48)
i(cid:54)=α
z[i] · Xi − ∆ · (β · χα − x
(cid:48)).
(cid:48))
v[i])
A are deﬁned as in the description of S above.
where w and V (cid:48)
Say that A sends VA to FEQ. If x(cid:48) = β·χα (as will be the case
when A behaves honestly), then FEQ returns true iff VA = V (cid:48)
A.
Otherwise, FEQ returns true iff ∆ = (V (cid:48)
A − VA)/(β · χα − x(cid:48)).
We thus see that the ideal-world behavior of FEQ matches
what would occur in the real world.
Malicious PB. Simulator S interacts with A as follows. First,
S simulates the initialization step by recording the global key
∆ ∈ Fpr that A sends to F p,r
sVOLE. Then, every time the extend
procedure is executed (on input n), S does:
sVOLE. Then S samples
1) S records b ∈ Fpr that A sends to F p,r
a(cid:48) ← Fp and sends it to A. Next, S computes γ := b−∆·a(cid:48),
and then samples β ← F∗
1)}i∈[h] sent to FOT by A.
2) S records the values {(K i
3) S receives d ∈ Fpr from A. Then, for each α ∈ [0, n), it
}i∈[h]) and set
p and sets δ := γ + ∆ · β.
0, K i
computes a vector wα as follows:
j }j(cid:54)=α := GGM
a) Execute {vα
(cid:48)
for i (cid:54)= α.
wα[i] = vα
i
b) Compute wα[α] := δ − (d +(cid:80)
6) S computes Y :=(cid:80)r−1
4) S records the vector y∗ sent to F p,r
5) S samples χi ← Fpr for i ∈ [0, n) and x∗ ← Fr
p, and
sends them to A. Then S computes y := y∗ − ∆ · x∗.
i=0 y[i]·Xi. It then records VB sent to
FEQ by A. Next, S computes a set I ⊆ [0, n) as follows:
i=0 χi · wα[i] − ∆ ·
a) For α ∈ [0, n), compute V α
b) Deﬁne I := {α ∈ [0, n) | V α
S sends I to F p,r
then aborts. Otherwise, S sends (true, VB) to A.
a) Set v[i] := wα[i] for i ∈ [0, n), i (cid:54)= α.
A :=(cid:80)n−1
(cid:1) to A on behalf of FEQ, and
[0, n)\I, sends (cid:0)false, V ˜α
b) Set v[α] := γ − d −(cid:80)
spsVOLE; if it returns abort, S picks ˜α ←
7) S chooses an arbitrary α ∈ I and computes v as follows:
i(cid:54)=α wα[i]).
sVOLE by A.
β · χα − Y .
A = VB}.
(α,{K i
i(cid:54)=α v[i].
¯αi
A
S sends v to F p,r
spsVOLE and outputs whatever A outputs.
We ﬁrst consider the view of adversary A in the ideal-
world execution and the real-world execution. The values a(cid:48)
and x∗ simulated by S have the same distribution as the
real values, which are masked by a uniform element/vector
output by F p,r
sVOLE. The set I extracted by S corresponds to
the selective failure attack on the output index α∗ of PA. If
spsVOLE, we have that α∗ /∈ I. In
S receives abort from F p,r
the real protocol execution, if VB (cid:54)= V α∗
A , then PA aborts.
By previous considerations, this is equivalent to α∗ /∈ I.
Therefore, F p,r
spsVOLE aborts if and only if the real protocol
execution aborts. For an honest PA, the index α∗ ∈ [0, n) is
sampled uniformly in both the real-world execution and the
ideal-world execution. If receiving abort from F p,r
spsVOLE, then
A (cid:54)= VB to A.
S needs to send false along with an element V ˜α
Although S does not know the actual index α∗, it can sample
a random index ˜α from the set [0, n)\I and send V ˜α
A to A. In
the case of aborting, this simulation is perfect, since Z cannot
obtain the output of PA due to aborting, and the dummy index
˜α has the same distribution as the actual index α∗ under the
condition that I is an incorrect guess.
Overall, we have that
the adversary’s view is perfectly
indistinguishable between the real-world execution and the
ideal-world execution. Below, we prove that except with prob-
ability 1/pr, the distribution of PA’s output in the real-world
execution is the same as that in the ideal-world execution. It
is easy to see that the output vector u∗ that is 0 everywhere
except that u∗[α∗] = β∗ in the ideal-world execution and
the real-world execution have the same distribution, from
the above analysis and that β∗ is perfectly hidden. In the
following, we focus on proving the indistinguishability of w∗
output by PA between the ideal-world execution and the real-
world execution. Firstly, we prove that the vector v ∈ Fn
pr
computed by S in the step 7 is unique (i.e., independent of
the choice α ∈ I).
Claim 1. For any α, α(cid:48) ∈ [0, n), let vα, vα(cid:48) be the vectors
computed by S with α, α(cid:48) following the step 7, then we have
(cid:110)
(cid:12)(cid:12)(cid:12) V α
(cid:111) ≤ 1
pr .
vα (cid:54)= vα(cid:48)
Pr
A = V α(cid:48)
A
γ − d −(cid:80)
of PA. From wα∗ [α∗] = γ + ∆· β∗ − (d +(cid:80)
The proof of the claim described as above is similar to
that in prior work [60], and is not included due to the space
limitations; it is available for reviewers upon request.
Let w∗, u∗ be the output of PA and v be the input from
S (or PB). It is obvious that w∗ = v + ∆ · u∗ in the ideal-
world execution. Now we look at the real-world execution. We
deﬁne a vector v∗ as v∗[i] = wα∗ [i] for i (cid:54)= α∗ and v∗[α∗] =
i(cid:54)=α∗ v∗[i], where recall that α∗ is the output index
i(cid:54)=α∗ wα∗ [i]), we
have that wα∗ [α∗] = v∗[α∗] + ∆ · β∗. Therefore, we obtain
that w∗ = v∗ + ∆ · u∗ where w∗ = wα∗. Note that v∗ in
both the ideal-world execution and the real-world execution
are deﬁned in the identical way, and thus have the same
distribution. Based on Claim 1, we know that in the ideal-
world execution, v∗ is indistinguishable from v computed by
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:45 UTC from IEEE Xplore.  Restrictions apply. 
1090
invoke F p,r
sVOLE at all. Speciﬁcally, if we make n0 = k + t + r
calls to F p,r
sVOLE during initialization, we can run the extend
procedure without any additional call to F p,r
sVOLE. Each time
the extend procedure is run, we reserve n0 of the sVOLE
correlations that are produced for the following iteration, and
output n − n0 “usable” sVOLE correlations.
We can further optimize the generation of the initial set of
n0 sVOLE correlations during initialization. Let (k0, n0, t0) be
another set of LPN parameters. (Note that n0 (cid:28) n, so we can
take k0 (cid:28) k and t0 ≈ t while achieving security comparable
to what is achieved for the LPN parameters (n, k, t).) We then
make n(cid:48)
0 = k0 + t0 + r calls to the base-sVOLE protocol
described in Section IV-A to generate that number of sVOLE
correlations, after which we run the extend procedure of
Πp,r
sVOLE once to obtain n0 sVOLE correlations.
p×Fk
2) S computes x := u·A+e ∈ Fn
S, except with probability at most 1/pr. Therefore v in the
ideal-world execution is indistinguishable from v∗ in the real-
world execution, which implies the indistinguishability of the
output of PA in the ideal world and the real world.
E. Proof of Theorem 4 and Protocol Optimizations
Proof. We ﬁrst consider the case of a malicious PA and
then consider the case of a malicious PB. In each case, we
construct a PPT simulator S given access to F p,r
sVOLE that runs
the adversary A as a subroutine, and emulates functionalities
spsVOLE. We always implicitly assume that S
sVOLE and F p,r
F p,r
passes all communication between A and Z.
Malicious PA. S records the vectors (u, w) ∈ Fk
pr that A
sends to F p,r
sVOLE during initialization. Then in each iteration,
S runs as follows:
1) For i ∈ [t], S emulates F p,r
3) If A ever makes a global key query ∆(cid:48) to F p,r
spsVOLE and receives the value
p (with at most one nonzero entry) and ci ∈ Fm
pr
p and c :=
p and z := w·A+c ∈ Fn
pr,
pr to F p,r
sVOLE. It
p and w := z[0 :
ei ∈ Fm
from A; it then deﬁnes e := (e1, . . . , et) ∈ Fn
(c1, . . . , ct) ∈ Fn
pr.
and sends x[k : n) ∈ F(cid:96)
p and z[k : n) ∈ F(cid:96)
also locally updates u := x[0 : k) ∈ Fk
k) ∈ Fk
pr for the next iteration.
S forwards that query to F p,r
sVOLE. If F p,r
abort, S aborts; otherwise, it continues.
spsVOLE, then
sVOLE responds with
It is easy to see that the simulation provided by S is perfect.
Malicious PB. S runs G(1k, 1n, p) to generate A ∈ Fk×n
.
During initialization, S records the values ∆ ∈ Fpr and
v ∈ Fk
sVOLE.
Then in each iteration, S runs as follows:
1) For i ∈ [t], S receives the value bi ∈ Fm
pr that A sends to
F p,r
spsVOLE; it sets b := (b1, . . . , bt) ∈ Fn
pr.
2) For i ∈ [t], S receives the set Ii ⊆ [0, m) that A sends
to F p,r
spsVOLE. Then S samples e ← Dn,t and deﬁnes
{α1, . . . , αt} to be the nonzero entries of e. If αi mod m ∈
Ii for all i, then S continues; otherwise, it aborts.
pr, and sends y[k : n) ∈ F(cid:96)
pr
to F p,r
pr for
the next iteration.
The view of A is simulated perfectly, and in both the ideal-
world simulation and the ideal-world execution of the protocol
the output (s, M[s]) of PA satisﬁes y[k, n) = M[s] − ∆ · s.
The difference is that in the ideal world s is uniform, whereas
in the real world s = u · A + e for a uniform vector u. It
is not hard to see that this difference is undetectable if the
G
k,n,t,p assumption holds.
LPN
sVOLE. It also locally updates v := y[0 : k) ∈ Fk
3) S computes y := v·A+b ∈ Fn
pr that A sends to F p,r
sVOLE, and sends ∆ to F p,r
p
sVOLE makes t calls to F p,r
Optimizations. In each iteration of the extend procedure,
protocol Πp,r
spsVOLE is
instantiated by protocol Πp,r
spsVOLE from Section IV-B, and we
use the optimization described at the end of that section, the
t calls to Πp,r
spsVOLE require only t + r calls to F p,r
Moreover, we can push all the calls to F p,r
sVOLE.
sVOLE into the
initialization phase, so that the extend procedure does not
spsVOLE. If F p,r
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:45 UTC from IEEE Xplore.  Restrictions apply. 
1091