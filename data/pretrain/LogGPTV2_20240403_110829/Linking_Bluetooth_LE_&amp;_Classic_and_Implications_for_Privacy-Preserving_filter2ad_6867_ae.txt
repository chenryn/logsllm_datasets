advertisers - the former with nRF Connect and StopCovid,
and the latter with nRF Connect and Exposure Notiﬁcation.
We place these devices within 10 meters of the attack system
and record 60 samples of 10s each.
Our results showcase considerable loss of BLE adver-
tisement packets due to the congestion. For the same time
duration, we were able to record 7811 advertisements for
StopCovid, 3746 for Exposure Notiﬁcation and 8156 for nRF
Connect in the low trafﬁc Scenario A. In Scenario B, the
recorded advertisements were reduced to 2019, 497 and 5894,
respectively. Consequently, the results for RMSE of the time
alignment for 1s and 10s recordings in Figure 9 shows a
drop in the performance of the attack. For 1s recordings (Fig-
ure 9a), the probability drops to 55% and 44% for StopCovid
and Exposure Notiﬁcation, respectively. For 10s recordings
(Figure 9b), the attack remains robust at 90% and 82% for
StopCovid and Exposure Notiﬁcation, respectively. Another
side effect is that, due to the number of advertisements getting
reduced, the system adapts the minimum count of packets used
to perform the linkability to ensure that it does not decrease
the attack performance. This fact along with the increase in
volume of advertisements leads to the appearance of multiple
false positives. Analysing the two test devices, out of 120
measurements of 10s each, the algorithm incorrectly linked
11 advertisements.
In order to evaluate the impact of a high number of BTC
devices, we take the same devices, Xiaomi Mi8 and Moto G5
Plus, to Scenario A and we isolate them from the high BLE
trafﬁc while we increase the number of BTC devices by setting
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:04 UTC from IEEE Xplore.  Restrictions apply. 
1327
024681000.20.40.60.81ProbabilitynRFConnectImmuniStop Covid024681000.20.40.60.81ProbabilitynRFConnectImmuniStop CovidnRF Stop
Covid
1s
0.75
0.95
5s
0.98
0.87
0.76
10s 1.00
0.98
1.00
TABLE II: Linkability in walking and running scenarios.
Find
My nRF Stop
Covid
0.53
0.81
1.00
0.80
0.87 0.95
0.93 0.97
Imm.
(iOS)
0.90
0.93
0.97
Imm.
(iOS)
0.74
0.98
1.00
Find
My
-
-
Running
Imm.
(An.)
0.21
0.60
0.77
Walking
Imm.
(An.)
0.80
1.00
1.00
To study the viability of the attack from a distance, we
setup a Xiaomi Mi8, Motorola Moto G5 Plus and iPhone X
at different distances (20, 40, and 60m) from the attacker
in Scenario C. The Android devices are setup to transmit
high power advertisements using nRF Connect, concurrently
with Immuni and StopCovid advertisements,whereas iPhone
X is set up to transmit Immuni and Find My advertisements.
Instead of using an omnidirectional antenna, this time we use
a directional antenna with higher gain to get better coverage.
Our results show that nRF Connect advertisements are easily
spotted due to high transmit power and the linkability attack
has a probability above 90% even for a distance of 60m.
On the other hand, we did not see any Android Exposure
Notiﬁcation advertisements at 60m. At 20 and 40m, the system
was able to record 17 advertisements in a 300s period which
is not enough recordings for a successful attack. However,
for Exposure Notiﬁcations coming from the iPhone X, we are
able to link them correctly with a probability of 80% even
for a distance of 60m. This is in line with the results for
Find My, which we are able to link with a 75% probability
at 60 meters. The good results for iPhone X are due to Apple
devices transmitting BLE advertisements at high power. Lastly,
StopCovid, with a transmit power between the other apps, did
not see many advertisements for 60m but reported a linkability
of 70% and 90% at 40 and 20m, respectively.
To study the impact of mobility, we carry out our measure-
ments in Scenario C. We set the receiver at a ﬁxed position
and we use the same setup in terms of devices and apps as we
used for the distance measurements. The devices are moving
within a maximum distance of 20 meters from the receiver at
two different speed levels, walking and running.
Results for this experiment are summarized in Table II. We
only showcase results for 5s and 10s for Find My due to
its advertisement periodicity being 2s. At a walking speed,
we were able to link the advertisements for all apps -except
Find My- with at least 75% probability for 1s recordings.
At a running pace, the linkability percentage was notably
lower for certain apps. For 1s recordings, nRF Connect
still had a linkability above 90% but Stop Covid dropped
to 55% and Exposure Notiﬁcation dropped to 21% as the
decoder missed multiple packets coming from the Android
device. Despite its lower performance on Android, Immuni
on IphoneX demonstrated to be more reliable due to the high
power used for its transmissions, and the attack performance
was not particularly affected by speed. Similarly, Find My
was not affected by dynamism, leading to high linkability
values for both scenarios. For 10s recordings linkability on
most apps perform well, including Exposure Notiﬁcation for
Android which was able to be linked 77% of the time.
G. Summary of Attack Performance and Limitations
Evaluating the performance of the attack under varying
scenarios and setups, we observe that the attack proves to be
highly reliable and robust across device models and chipsets.
This is true even in scenarios that would,
intuitively, be
challenging. For instance,
the probability of linking BLE
advertisements with same-device BTC transmissions is be-
tween 80% and 95% in a crowded environment with more
than 100 BLE advertisers and signiﬁcant congestion. Another
challenging scenario is when a BTC connection on a device
is idle and just transmitting sporadic keep-alive messages.
In this scenario, an attacker is able to correctly link BLE
advertisements 90% of the time.
The results indicate that BLE advertisements transmitted
with higher power have higher probability of linkage with
BTC transmissions. For example,
the Find My app uses
high transmit power and high transmission period (2s) and
is more vulnerable to the attack than apps using the Exposure
Notiﬁcation service on Android. This is because, although the
Exposure Notiﬁcation service transmits more frequently (every
250 - 280ms), the transmit power is low increasing the chances
of the decoder missing packets.
To make matters worse for victim(s), the attacker does not
need to obtain sufﬁcient data to execute the attack. Our results
indicate that the probability of linking correctly a device is
already above 90% for 10s recordings in most scenarios.
Shorter recording times do see a performance drop, but the
attack is still successful even for 1s recording times. This is
especially true in low trafﬁc scenarios, where 1s recordings
have a linkability probability of above 75%.
it
to exploit
is difﬁcult
In terms of
limitations, without
improvements to the
the attack at
BLE/BTC decoders,
distances over 80 meters and with speed increases. Scaling the
exploitation of the vulnerability would require additional steps.
For instance, the adversary could conduct the attacks at the
entrance of a testing center or crowded spaces. Alternatively,
we believe the attack can be implemented as a mobile (without
SDR) within the Nexmon framework [33]. Finally, some pro-
tocols [15] support enhancements based on a k-out-of-n secret
sharing. We expect such schemes to limit the exploitation of
the vulnerability to users with low mobility. On the other hand,
since an adversary only needs k out of n advertisements, it
might also extend the range of the attack if the shares results
in shorter messages than the original advertisements.
VIII. COUNTERMEASURES
We discuss countermeasures, their design, and implementa-
tion in Android to reduce the impact of the vulnerability.
A. Measures for Reducing Attack Performance
The identiﬁed vulnerability exploits fundamental design de-
cisions in the Bluetooth standard. As such, complete mitigation
of the attack may require signiﬁcant changes, unlikely to
happen in the near future. We note that for speciﬁc applications
(e.g., contact tracing), the vulnerability can also be mitigated
by designing schemes that avoid user-to-user exchanges over
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:04 UTC from IEEE Xplore.  Restrictions apply. 
1328
utilized by the user and installed apps. The change in state
also generates user notiﬁcations that users can view on their
devices. These notiﬁcations show (and warn) the users when
BTC and BLE are concurrently used on the system.
1) Extensions to the Android Bluetooth stack: The Android
Bluetooth stack presents a serious problem that both BTC and
BLE are controlled using the same API. There are only two
possible states - BTC Off, BLE Off (BTC_OFF_BLE_OFF)
reachable by invoking the disable API provided by the An-
droid SDK BluetoothAdapter implementation; and BTC
On, BLE On (BTC_ON_BLE_ON) by invoking the enable
API provided by the same class. There are currently no public
APIs that apps can invoke to control BLE directly when BTC
is disabled. This forces installed apps to enable BTC on the
device even when they do not require any BTC services.
We solve the above problem in our system by decoupling
BTC and BLE, enabling BLE on the device even when
BTC is disabled. More precisely, our system introduces a
new state BTC Off, BLE On (BTC_OFF_BLE_ON) that
allows installed apps to use BLE without reliance on BTC.
We implemented this new state by creating public wrappers
around hidden APIs in the Android source code using Java
Reﬂection. The Android Bluetooth stack implements methods
(e.g., enableBLE, disableBLE, isLeEnabled) in the
BluetoothAdapter class that can be invoked to enable and
disable BLE on the device. These methods have a scope de-
ﬁned as public in the source code, it is just that the APIs are
not documented in the Android SDK. We must also note that
the above methods are protected using the same permissions as
BTC (android.permission.BLUETOOTH_ADMIN). As
such, our new state does not introduce any security vulnera-
bilities in the Android ecosystem. Implementing this wrapper
does not require any changes to the Android OS, nor does it
require rooting the device or installing third-party frameworks.
We will make this wrapper open-source as an Android library
to prevent apps from invoking the BTC_ON_BLE_ON state
(and enabling the attack) in the future.
2) Implementing Measures limiting the attacks: The states
BTC_OFF_BLE_OFF, BTC_OFF_BLE_ON, and BTC_ON_-
BLE_ON can be utilized to implement the protections from
the attack. To implement the countermeasures, we require the
capability of updating an app’s BLE transmissions without
instrumenting the app or changing its functionality. In all
versions of Android, this is infeasible due to obvious security
reasons. To achieve our objective, we implemented the system
as an extension of the MATRIX framework [40]. The frame-
work enables our system to insert code into Android SDK
APIs before or after the API invocation, the BLE Advertiser
API in our case. We preferred this approach over modifying
the Android source to quickly ship this protection to millions
of users who already use Xposed [41] on their devices.
BLE advertisements (e.g., VenusTrace [39]). Below, we out-
line some countermeasures that can be implemented for the
Android OS to reduce the attack performance.
1) Disable BTC when inactive: The Android OS does
not automatically disable BTC on the device when inac-
tive. This increases the likelihood of the BTC-BLE link-
age attack as the device can connect
to any paired de-
vice in proximity. Note than any app that
requests the
android.permission.BLUETOOTH_ADMIN permission
can also enable BTC on the device. Therefore, the functional-
ity to proactively disable BTC should be implemented directly
into the Android OS.
2) Reduce BLE T x power when BTC connected: The
Android OS currently does not restrict concurrent BTC and
BLE transmissions. When a smartphone user is using BTC
(e.g., streaming music), disabling BTC will result in usability
concerns. Disabling BLE is also not feasible as that may dis-
able health applications (e.g., Exposure Notiﬁcation, Samsung
Health) that use BLE for their services. One potential measure
to limit the attack radius (e.g., to 6-10 meters) can be to reduce
the BLE T x power when a BTC connection is active and
restore original T x power once BTC is disabled.
3) Restart Advertisements instead of Randomization: One
measure to protect against BLE pre- and post- randomization
linkage attacks can be to restart
the advertisements every
few minutes instead of randomizing the MAC address. By
introducing a small random delay before each restart, the
advertisements can be made to switch to a different clock and
change the timing information.
4) Minimize BLE T x power before Randomization: Recall
that
the clocks used for channel hopping drift over time.
As such, reducing the BLE advertisement T x power to a
minimum for a moment before randomization and restoring
power after randomization can force a distant attacker to lose
BLE advertisements and synchronization.
B. Implementing an Android System for Attack Mitigation
Our objective with the Android mitigation system was to
ensure that the system (1) does not affect the functionality
of existing apps that use BTC and BLE, and (2) minimizes
changes required to the Android Bluetooth stack. In terms of
measures, we focused on the aforementioned measures like
controlling the BTC state based on connection status, reducing
the BLE T x power when BTC is active, and minimizing
the BLE T x power before MAC randomization. Note that