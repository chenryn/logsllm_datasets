we call unbalanced eﬃciency and unbalanced security. The
former says that one of the two servers can perform the com-
putation essentially “for free”, i.e., as if it computes over
the original inputs in M. This is possible because only
one of the servers need to do public-key operations. Un-
balanced security instead guarantees that w.r.t.
such ef-
ﬁcient server the semantic security of the protocol holds
information-theoretically.
Our construction of two-server delegation of computation
on encrypted data builds on essentially the same idea il-
lustrated before, with the diﬀerence that now a ciphertext
consists of two components: one for the ﬁrst server and one
for the second server. More in detail, the ﬁrst server re-
ceives C (1) = (m − b, Enc(b)), b random in M, while the
second server receives just C (2) = b.5 As one can notice,
as long as the two servers do not collude, the conﬁdential-
ity of the message m is preserved.
In order to perform
computations on these ciphertexts, the second server sim-
ply operates over the bi’s, i.e., it computes b = f (b1, . . . , bt),
while the ﬁrst server works as in our HE scheme with the
key diﬀerence that, after performing a multiplication, it can
throw away the β components of the ciphertexts and keep
doing additions on the α components without any ciphertext
growth. This way, the ﬁrst server is eventually able to com-
pute α = Enc(f (m1, . . . , mt) − f (b1, . . . , bt)). So, when the
5Notice that here b is chosen explicitly at encryption time,
rather than while performing a multiplication.
client receives such values α and b = f (b1, . . . , bt) from the
ﬁrst and the second server respectively, then it can recover
the computation’s result as Dec(α) + b. It is interesting to
note that the two servers do not need to interact during the
computation, and actually they do not even need to know
about their mutual existence!
In the full version of the paper [9], we further generalize
our technique to outsource the computation of all degree-
3 polynomials by using a level-2 homomorphic encryption.
Such transformation yields for instance a protocol for degree-
3 polynomials based on the BGN cryptosystem.
Experimentals Results. To better assess the practical rel-
evance of our constructions we implemented the schemes re-
sulting when using Paillier [33] and Joye-Libert [25] as un-
derlying cryptosystems. We compared the performance of
our solutions with that of the BGV [4] homomorphic encryp-
tion implemented in HE-Lib [23], instantiated with parame-
ters suitable to support one multiplication. Although being
in a weaker security model, our two-server solution outper-
forms the BGV somewhat homomorphic encryption on es-
sentially all fronts (ciphertext size, costs of encryption, de-
cryption and homomorphic operations). Interestingly, how-
ever, our basic schemes remain competitive even in the single
server setting. More precisely, our JL13-based solution (with
80-bit security) remains competitive for L ≤ 10. Namely,
it achieves a decryption time comparable to that of BGV,
(much) shorter ciphertexts and much faster encryption and
homomorphic operations. We also compare our JL13-based
solution with BGN [3]. While in terms of bandwidth con-
sumption the latter is preferable, our scheme allows for more
ﬂexible message spaces and is faster overall6.
Other Related Work. As already mentioned above, fully
homomorphic encryption (FHE) allows to perform arbitrary
computation over encrypted data (e.g., [17, 37, 38, 5, 4]).
A key feature of FHE is that ciphertexts are both compact
and guarantee circuit privacy. Beyond FHE-based solutions,
many other works considered the problem of computing over
encrypted data. Cachin et al. [7] observed that (any) two-
message protocol for secure function evaluation (SFE) can
be used to perform computation over encrypted data with
circuit privacy. In particular, this idea can be extended to
construct an homomorphic public key cryptosystem from
any two-message SFE. This construction uses Yao’s garbled
circuits [39] as underlying building block, achieves semantic
security and circuit privacy but unfortunately is not compact
(roughly, because the ciphertext includes a garbled circuit).
Gentry et al.
[18] generalized this construction to support
computations on previously evaluated ciphertexts via boot-
strapping (they called i-hop an homomorphic cryptosystem
allowing up to i such computations). Other works proposed
HE schemes whose complexity of decryption (and ciphertext
size) depends in various ways on the evaluated function f .
Here we discuss some of them.
Sander et al.
[35] proposed a solution to evaluate con-
stant fan-in (boolean) circuits in NC1. More precisely, their
scheme allows to evaluate circuits (in NC1) composed of OR
6An exception is decryption time, where the comparison is
slightly more delicate to assess. In our case decryption cost
grows linearly in L (i.e. the number of after-multiplication
additions). The cost of decryption in BGN, on the other
hand, grows exponentially with the message length (yet, for
10-bit messages and L ≤ 600, our solution achieves faster
decryption than BGN).
1520and NOT gates. Unfortunately, it also requires communi-
cation complexity exponential in the circuit’s depth, as ci-
phertexts grow exponentially with the number of OR gates.
Building on earlier work of Kushilevitz and Ostrovsky
[27], Ishai and Paskin [24] proposed a scheme to evaluate
branching programs on encrypted data. Their protocol uses
strong oblivious transfer, a notion that can be implemented
using any linearly homomorphic encryption. This makes
this work somewhat related to ours. In comparison, their
scheme clearly supports a wider class of functionalities. On
the other hand, if we consider the question of building upon a
linearly-homomorphic encryption to obtain more expressive
functionalities, their construction is less direct than ours:
for instance, they have to change the computation model to
branching programs, and it is unclear whether tools origi-
nally designed for the underlying HE are “recyclable” in the
transformed scheme. Moreover, while when focusing on all
degree-2 polynomials we achieve the same level of compact-
ness, instead for the speciﬁc subset of polynomials consid-
ered in this paper7 the scheme in [24] induces much larger
ciphertexts (quadratic in the number of inputs).
Another work related to ours is the one of Aguilar Mel-
chor et al. [29] who proposed a construction of homomorphic
encryption (called chained) supporting up to d multiplica-
tions, for some constant d.
In this scheme the ciphertext
grows exponentially with each multiplication (but is not af-
fected by additions). The basic idea is somewhat similar to
ours. There they show how to achieve chained encryption
out of a linearly-homomorphic scheme with certain prop-
erties. These properties, however, are more stringent than
those required in this paper. In particular, none of the cur-
rently available number-theoretic cryptosystems is known to
meet such requirements.
Finally, we mention the work of Applebaum et al. [1] that
addresses the question of garbling arithmetic circuits. By
adapting the idea in [7] for achieving homomorphic encryp-
tion from two-message SFE in order to work with garbled
arithmetic circuits [1] (instead of Yao’s garbling), one can
implement more expressive homomorphic encryption schemes
(achieving non-constant-size ciphertexts) out of linearly ho-
momorphic ones. Compared to this approach, we believe
that ours is preferable for at least two reasons: it is concep-
tually much simpler (and easier to implement), and it allows
for a two-server constant size variant which is not achievable
using these other techniques.
Strawman approaches. An idea to construct a non-
compact HE scheme from a linearly-homomorphic one might
be to simply concatenate two ciphertexts whenever they
have to be multiplied. Then one may hope to achieve circuit
privacy by multiplying one ciphertext by a random z and the
other one by its inverse z−1. We point out that such solu-
tion is not suitable for at least two reasons. First, it does
not achieve circuit privacy if there is more than one degree-2
monomial: upon decryption one always recovers the value
of the single monomials. Second, it is less general as taking
inverses requires the message space to be a ﬁeld or, at least,
that the set of invertible elements is “dense” enough (as it is
the case for Paillier’s scheme, for instance). The issue is that
several schemes (e.g. [21, 30, 25]) do not have such density
7We stress that, although our solution is not fully compact
when considering all degree-2 polynomials, it achieves com-
pactness for the speciﬁc subset of degree-2 polynomials dis-
cussed above.
property. In particular, multiplicative obfuscation would not
work for the Joye-Libert cryptosystem (which leads to very
eﬃcient instantiations of our constructions).
2. PRELIMINARIES
We review the notation and some basic deﬁnitions used
in our work. We will denote with λ ∈ N the security pa-
rameter, and by poly(λ) any function which is bounded by
a polynomial in λ. Informally, we say that a function (λ) is
negligible if it vanishes faster than the inverse of any poly-
nomial in λ, and we compactly denote it as (λ) = negl(λ).
An algorithm A is said to be PPT if it is modeled as a prob-
abilistic Turing machine that runs in time polynomial in λ.
If S is a set, x $← S denotes the process of selecting x uni-
formly at random in S (which in particular assumes that S
can be sampled eﬃciently. If A is a probabilistic algorithm,
x $← A(·) denotes the process of running A on some appro-
priate input and assigning its output to x. For a positive
integer n, we denote by [n] the set of integers {1, . . . , n}.
Definition 1
(Statistical Distance). Let X, Y be two
random variables over a ﬁnite set U. The statistical distance
between X and Y is deﬁned as
(cid:12)(cid:12) Pr[X = u] − Pr[Y = u](cid:12)(cid:12)
(cid:88)
u∈U
SD[X, Y ] =
1
2
2.1 Homomorphic Encryption
Here we recall the deﬁnition of homomorphic encryption.
In this work we make the (somewhat canonical) assump-
tion that the messages live in some ring (M, +,·) while the
computations are expressed as arithmetic circuits (i.e., addi-
tions, multiplications and multiplications by constants) over
such ring. A homomorphic encryption scheme HE consists
of a tuple of four PPT algorithms (KeyGen, Enc, Eval, Dec)
working as follows:
KeyGen(1λ): the key generation algorithm takes as input the
security parameter λ and produces a secret key sk and
a public key pk. The public key pk implicitly deﬁnes a
message space M.
Enc(pk, m): the encryption algorithm takes as input pk and
a message m ∈ M, and it outputs a ciphertext C.
Eval(pk, f, C1, . . . , Ct): the evaluation algorithm takes as in-
put pk, an arithmetic circuit f : Mt → M in a class F
of “permitted” circuits, and t ciphertexts C1, . . . , Ct.
It
returns a ciphertext C.
Dec(sk, C): given sk and a ciphertext C, the decryption al-
gorithm outputs a message m.
An HE scheme should satisfy four main properties: cor-
rectness, compactness, security and circuit privacy. The ﬁrst
two properties regard the functionality of the scheme while
the remaining two properties model security.
The basic requirement is correctness:
Definition 2
(Correctness). A homomorphic encryp-
tion scheme HE = (KeyGen, Enc, Eval, Dec) is said to cor-
rectly evaluate a family of circuits F if for all honestly gen-
erated keys (pk, sk) $← KeyGen(1λ), for all f ∈ F and for all
messages m1, . . . , mt ∈ M we have that if Ci ← Enc(pk, mi)
∀i ∈ [t], then
Pr[Dec(sk, Eval(pk, f, (C1, . . . , Ct))) (cid:54)= f (m1, . . . , mt)] = negl(λ)
where the probability is taken over all the algorithms’ random
choices.
1521In addition to correctness, any “interesting” homomorphic
encryption scheme must be compact. Roughly speaking, this
means that the ciphertexts output by Eval have some ﬁxed
size, which does not depend on the size of the evaluated
circuit. This is formally deﬁned as follows:
(Compactness). A homomorphic encryp-
tion scheme HE = (KeyGen, Enc, Eval, Dec) is said to com-
pactly evaluate a family of circuits F if the running time of
the decryption algorithm Dec is bounded by a ﬁxed polyno-
mial in λ.
Definition 3
The security of a homomorphic encryption scheme is de-
ﬁned using the notion of semantic security put forward by
Goldwasser and Micali [20].
Definition 4
(Semantic Security). Let HE = (KeyGen,
Enc, Eval, Dec) be a (homomorphic) encryption scheme, and
A be a PPT adversary. Consider the following experiment:
Experiment ExpSSHE,A(λ)
b $← {0, 1}; (pk, sk) $← KeyGen(1λ)
(m0, m1)←A(pk)
c $← Enc(pk, mb) ; b(cid:48)←A(c)
If b(cid:48) = b return 1. Else return 0.
and deﬁne A’s advantage as AdvSSHE,A(λ) = Pr[ExpSSHE,A(λ) =
1] − 1
any PPT algorithm A it holds AdvSSHE,A(λ) = negl(λ).
2 . Then we say that HE is semantically-secure if for
When considering homomorphic encryption, the notion of
semantic security may not be suﬃcient to guarantee the con-
ﬁdentiality of the encrypted messages, and in particular of
the computation’s inputs. Roughly speaking, in a homomor-
phic encryption scheme we would like that the ciphertexts
output by Eval do not reveal any information about the mes-
sages encrypted in the input ciphertexts. This property is
formalized via the following notion of circuit privacy:
Definition 5
(Circuit Privacy). We say that a ho-
momorphic encryption scheme HE is circuit private for a
family of circuits F if there exists a PPT simulator Sim and
a negligible function (λ) such that the following holds. For
$← KeyGen(1λ), any
any λ ∈ N, any pair of keys (pk, sk)
circuit f ∈ F, any tuple of messages m1, . . . , mt ∈ M and
ciphertexts C1, . . . , Ct such that ∀i ∈ [t]: Ci
$← Enc(pk, mi),
then it holds
SD[Eval(pk, f, C1, . . . , Ct), Sim(1λ, pk, f (m1, . . . , mt))] ≤ (λ)
Leveled Homomorphic Encryption.
In this work we
consider the notion of leveled homomorphic encryption in
which the parameters of the scheme depend on the depth of
the circuits that the scheme can evaluate. In particular, in