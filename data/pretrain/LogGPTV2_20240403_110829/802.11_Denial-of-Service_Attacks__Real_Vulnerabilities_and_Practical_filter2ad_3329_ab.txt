on time synchronization between the access point
and its clients so clients know when to awake. Key
synchronization information, such as the period of
TIM packets and a timestamp broadcast by the ac-
cess point, are sent unauthenticated and in the clear.
By forging these management packets, an attacker
can cause a client node to fall out of sync with the
access point and fail to wake up at the appropriate
times.
While all of the vulnerabilities in this section
could be resolved with appropriate authentication
of all messages, it seems unlikely that such a capa-
bility will emerge soon. With an installed base of
over 15 million legacy 802.11 devices, the enormous
growth of the public-area wireless access market and
the managerial burden imposed by the shared key
management of 802.1X, it seems unlikely that there
will be universal deployment of mutual authenti-
cation infrastructure any time soon. Moreover, it
is not clear whether future versions of the 802.11
speciﬁcation will protect management frames such
as deauthentication (while it is clear they are aware
of the problem, the current work of the TGi work-
ing group still leaves the deauthentication operation
unprotected).
802.11 networks go through signiﬁcant eﬀort to
avoid transmit collisions. Due to hidden terminals
perfect collision detection is not possible and a com-
bination of physical carrier-sense and virtual carrier-
sense mechanisms are employed in tandem to con-
trol access to the channel [BDSZ94]. Both of these
mechanisms may be exploited by an attacker.
First, to prioritize access to the radio medium
four time windows are deﬁned. For the purposes of
this discussion only two are important: the Short
Interframe Space (SIFS) and the longer Distributed
Coordination Function Interframe Space (DIFS).
Before any frame can be sent the sending radio must
observe a quiet medium for one of the deﬁned win-
dow periods. The SIFS window is used for frames
sent as part of a preexisting frame exchange (for ex-
ample, the explicit ACK frame sent in response to
a previously transmitted data frame). The DIFS
window is used for nodes wishing to initiate a new
frame exchange. To avoid all nodes transmitting im-
mediately after the DIFS expires, the time after the
DIFS is subdivided into slots. Each transmitting
node randomly and with equal probability picks a
slot in which to start transmitting.
If a collision
does occur (indicated implicitly by the lack of an im-
mediate acknowledgment), the sender uses a random
exponential backoﬀ algorithm before retransmitting.
Since every transmitting node must wait at least
an SIFS interval, if not longer, an attacker may com-
pletely monopolize the channel by sending a short
signal before the end of every SIFS period. While
this attack would likely be highly eﬀective, it also
requires the attacker to expend considerable energy.
A SIFS period is only 20 microseconds on 802.11b
networks, leading to a duty cycle of 50,000 packets
per second in order to disable all access to the net-
work.
A more serious vulnerability arises from the vir-
tual carrier-sense mechanism used to mitigate col-
lisions from hidden terminals. Each 802.11 frame
carries a Duration ﬁeld that indicates the number
of microseconds that the channel is reserved. This
value, in turn, is used to program the Network Al-
location Vector (NAV) on each node. Only when
a node’s NAV reaches 0 is it allowed to transmit.
This feature is principally used by the explicit re-
quest to send (RTS) / clear to send (CTS) hand-
shake that can be used to synchronize access to the
channel when a hidden terminal may be interfering
with transmissions.
During this handshake the sending node ﬁrst
sends a small RTS frame that includes a duration
18
12th USENIX Security Symposium 
USENIX Association
DIFS
Client 1
Client 2
Client 3
Attacker
Figure 2: Graphical depiction of the virtual carrier-sense attack in action. The gradient portion of the
attacker’s frame indicates time reserved by the duration ﬁeld although no data is actually sent. Continually
sending the attack frames back to back prevents other nodes from sending legitimate frames.
large enough to complete the RTS/CTS sequence –
including the CTS frame, the data frame, and the
subsequent acknowledgment frame. The destination
node replies to the RTS with a CTS, containing a
new duration ﬁeld updated to account for the time
already elapsed during the sequence. After the CTS
is sent, every node in radio range of either the send-
ing or receiving node will have updated their NAV
and will defer all transmissions for the duration of
the future transaction. While the RTS/CTS fea-
ture is rarely used in practice, respecting the virtual
carrier-sense function indicated by the duration ﬁeld
is mandatory in all 802.11 implementations.
An attacker may exploit this feature by assert-
ing a large duration ﬁeld, thereby preventing well-
behaved clients from gaining access to the channel
(as shown in Figure 2). While it is possible to use
almost any frame type to control the NAV, including
an ACK, using the RTS has some advantages. Since
a well-behaved node will always respond to RTS with
a CTS, an attacker may co-opt legitimate nodes to
propagate the attack further than it could on its
own. Moreover, this approach allows an attacker to
transmit with extremely low power or using a direc-
tional antennae, thereby reducing the probability of
being located.
The maximum value for the NAV is 32767, or
roughly 32 milliseconds on 802.11b networks, so in
principal an attacker need only transmit approxi-
mately 30 times a second to jam all access to the
channel. Finally, it is worth noting that RTS, CTS
and ACK frames are not authenticated in any cur-
rent or upcoming 802.11 standard. However, even
if they were authenticated, this would only provide
non-repudiation since, by design, the virtual-carrier
sense feature impacts all nodes on the same channel.
4 Practical Attacks and Defenses
While the previous vulnerabilities are severe in
principal, understanding their true threat potential
requires evaluating the practicality of implementing
them and how well they perform in practice. In this
section we examine these issues as well as discussing
the eﬃcacy of several low-overhead defense mecha-
nisms.
4.1
802.11 Attack Infrastructure
From a purely practical perspective, a key en-
gineering question is, “Can an attack be gener-
ated with commodity hardware?” While theoreti-
cal vulnerabilities are clearly important, we feel that
attacks with software implementations represent a
qualitatively greater threat since they are available
to a dramatically expanded set of potential attack-
ers.
At ﬁrst glance this appears to be a trivial prob-
lem since all 802.11 Network Interface Cards (NIC)
are inherently able to generate arbitrary frames.
However, in practice, all 802.11(a,b) devices we are
aware of implement key MAC functions in ﬁrmware
and moderate access to the radio through a con-
strained interface.
The implementation of this
ﬁrmware, in turn, dictates the limits of how a NIC
can be used by an attacker.
Indeed, in reviewing
preprints of this paper, several 802.11 experts de-
clared the virtual carrier-sense attack infeasible in
practice due to such limitations.
In testing a wide variety of 802.11 NICs we have
found that most allow the generation of management
frames necessary to exploit the identity attacks de-
scribed earlier – typically using semi-documented or
undocumented modes of operation, such as HostAP
USENIX Association
12th USENIX Security Symposium 
19
ically accept raw 802.11 frames, these packets are
then further interpreted by concurrent ﬁrmware pro-
cesses. As a result, only a subset of potential frames
can be successfully transmitted by the host.
However, Choice-based MACs also provide an
unbuﬀered, unsychronized raw memory access inter-
face for debug purposes – typically called the “aux
port”. By properly conﬁguring the host and NIC, it
is possible to write a frame via the BAP interface,
locate it in the NIC’s SRAM, request a transmission,
and then modify the packet via the aux port – after
the ﬁrmware has processed it, but before it is actu-
ally transmitted. This process is depicted in Figure
3. To synchronize the host and NIC, a simple barrier
can be implemented by spinning on an 802.11 header
ﬁeld (such as duration) that is overwritten by the
ﬁrmware. Alternatively, the host can continuously
overwrite if synchronization is unnecessary. In prac-
tice, this “data race” approach, while undeniably
ugly, is both reliable and permits the generation of
arbitrary 802.11 MAC frames. Using this method we
are able to implement any of the attacks previously
described using oﬀ-the-shelf hardware. We believe
we are the ﬁrst to demonstrate this capability using
commodity equipment.
Our prototype, called Swat, consists of an iPAQ
H3600 Pocket PC, running Familiar Linux, with a
DLink DWL-650 PCMCIA 802.11 interface mounted
in a standard PC Card sleeve. The entire device
weighs approximately 375g (a bit over 12 oz) and
is easily concealed in a coat pocket. More modern
Pocket PCs, such as the Toshiba e740/e750 and the
HP iPAQ 5450, include integral 802.11 functionally
and could accomplish the same feats with roughly
half the size and weight.
Host Interface to NIC
AUX Port
BAP
SRAM
XmitQ
Xmit
process
Physical
resources
Virtualized
fmware interface
Radio Modem Interface
Figure 3: A block diagram depicting how the “aux
port” can be used to circumvent the limitations im-
posed by the ﬁrmware. By using this raw memory
interface, the host can transform “normal” packets
into arbitrary 802.11 frames as they are transmitted.
and HostBSS mode in Intersil ﬁrmware. However,
these same devices do not typically allow the gener-
ation of any control frames, permit other key ﬁelds
(such as Duration and FCS) to be speciﬁed by the
host, or allow reserved or illegal ﬁeld values to be
transmitted. Instead, the ﬁrmware overwrites these
ﬁelds with appropriate values after the host requests
that queued data be transmitted. While it might
be possible to reverse-engineer the ﬁrmware to re-
move this limitation, we believe the eﬀort to do so
would be considerable. Instead, we have developed
an alternative mechanism to sidestep the limitations
imposed by the ﬁrmware interface. To understand
our approach it is ﬁrst necessary to understand the
architecture of existing 802.11 products.
Most commodity 802.11 devices, including those
using Intersil Prism, Lucent/Agere/Orinoco/Proxim
Hermes and Cisco Aironet chipsets are based on an
initial MAC design originated by Choice Microsys-
tems (since acquired by Intersil). In this architec-
ture, all low-level functions – including frame trans-
mission, scheduling, acknowledgement, and frag-
mentation – are implemented in ﬁrmware while
the host is simply responsible for managing data
transfer to and from the device. Data transfer is
achieved through a ﬁrmware-implemented “Buﬀer
Access Path” (BAP) that shields the driver writer
from the details of NIC memory management and
synchronization. While the BAP interface will typ-
To experiment with denial-of-service attacks we
have built a demonstration application that pas-
sively monitors wireless channels for APs and clients.
Individual clients are identiﬁed initially by their
MAC address, but as they generate traﬃc, a cus-
tom DNS resolver and a slightly modiﬁed version of
dsniﬀ [Son] is used to isolate better identiﬁers (e.g.,
userids, DNS address of IMAP server, etc). These
identiﬁers can be used to select individual hosts for
attack, or all hosts may be attacked en masse. The
application and the actual device are pictured in Fig-
ure 4.
In the remainder of this section, we analyze the
impact of the deauthentication attack and a pre-
liminary defense mechanism, followed by a similar
examination of the virtual carrier-sense attack and
defense.
20
12th USENIX Security Symposium 
USENIX Association
ﬁrst, illustrated by the thin rectangle in Figure 5,
was directed against a single client running MacOS
X. This client’s transfer was immediately halted, and
even though the attack lasted less than ten seconds,
the client did not resume transmitting at its previ-
ous rate for more than a minute. This ampliﬁcation
was due to a combination of an extended delay while
the client probed for other access points and the ex-
ponential backoﬀ being employed by the ftp server’s
TCP implementation.
The second attack, delineated by the wider rect-
angle in the same ﬁgure, was directed against all
four clients. Service is virtually halted during this
period, although the Windows XP client is able to
send a number of packets successfully. This anomaly
has two sources. First, these are not data packets
from the ftp session but rather UDP packets used
by Window’s DCE RPC service and not subject to
TCP’s congestion control procedure. Second, there
is a small race condition in our attack implementa-
tion between the time a client receives the successful
association response and the time the attacker sends
the deauthentication frame. The WinXP client used
this small window to send approximately ten UDP
packets before the attacking node shut them down.
Modifying the implementation to send the deauthen-
tication packets after both authentication and asso-
ciation would mitigate this eﬀect.
A number of smaller, directed attacks were per-
formed in addition to those in Figure 5. The small
tests were done using the extended 802.11 infrastruc-
ture found at UCSD with varied victims. Recent ver-
sions of Windows, Linux, and the MacOS all gave up
on the targeted access point and kept trying to ﬁnd
others. Slightly older versions of the same systems
never attempted to switch access points and were
completely disconnected using the less sophisticated
version of the attack. The attack even caused one
device, an HP Jornada Pocket PC, to consistently
crash.
Figure 4:
iPAQ H3600 with Dlink DWL-650 card,
running Swat attack testing tool. Individual clients
and AP’s are identiﬁed either using MAC address or
by passively monitoring the channel and extracting
destination IP addresses and DNS names.
4.2 Deauthentication Attack
Our implementation of this attack promiscu-
ously monitors all network activity, including non-
data 802.11 frames, and matches the source and des-
tination MAC address against a list of attack tar-
gets. If a data or association response frame is re-
ceived from a target, we issue a spoofed deauthen-
tication frame to the access point on behalf of the
client. To avoid buﬀer overﬂow in congested net-
works on the attacking machine, deauthentication
frames are rate limited to 10 frames per second per
client. This limit is reset when an access point ac-
knowledges receipt of a deauthentication frame.
We tested this implementation in a small 802.11
network composed of 7 machines: 1 attacker, 1 ac-
cess point, 1 monitoring station, and 4 legitimate
clients. The access point was built using the Linux
HostAP driver, which provides an in-kernel software-
based access point. Each of the clients attempted to
transfer, via ftp, a large ﬁle through the access point
machine – a transfer which exceeded the testing pe-
riod. We mounted two attacks on the network. The
The deauthentication vulnerability can be
solved directly by explicitly authenticating manage-