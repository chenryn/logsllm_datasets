needed. 
12.3 Process Injection 
The process-inject block in Malleable C2 profiles shapes injected content and controls process 
injection behavior for the Beacon payload. 
process-inject { 
# set how memory is allocated in a remote process 
set allocator "VirtualAllocEx"; 
# shape the memory characteristics and content 
set min_alloc "16384"; 
set startrwx  "true"; 
set userwx    "false"; 
transform-x86 { 
prepend "\x90\x90"; 
} 
transform-x64 { 
# transform x64 injected content 
} 
# determine how to execute the injected code 
execute { 
CreateThread "ntdll.dll!RtlUserThreadStart"; 
SetThreadContext; 
www.cobaltstrike.com/
/
82/
RtlCreateUserThread; 
} 
} 
The process-inject block accepts several options that control the process injection process in 
Beacon: 
Option 
Example 
Description 
allocator 
VirtualAllocEx The preferred method to allocate memory in the remote process. 
Specify VirtualAllocEx or NtMapViewOfSection. The 
NtMapViewOfSection option is for same-architecture injection 
only. VirtualAllocEx is always used for cross-arch memory 
allocations. 
min_alloc 
4096 
Minimum amount of memory to request for injected content 
startrwx 
false 
Use RWX as initial permissions for injected content. Alternative 
is RW. 
userwx 
false 
Use RWX as final permissions for injected content.  
Alternative is RX. 
The transform-x86 and transform-x64 blocks pad content injected by Beacon. These blocks 
support two commands: prepend and append. The prepend command inserts a string before the 
injected content. The append command adds a string after the injected content. Make sure that 
prepended data is valid code for the injected content’s architecture (x86, x64). The c2lint 
program does not have a check for this.  
The execute block controls the methods Beacon will use when it needs to inject code into a 
process. Beacon examines each option in the execute block, determines if the option is usable for 
the current context, tries the method when it is usable, and moves on to the next option if code 
execution did not happen. The execute options include: 
Option 
x86 -> x64 
x64 -> x86 
Notes 
CreateThread 
Current process only 
CreateRemoteThread 
Yes 
No cross-session 
NtQueueApcThread 
NtQueueApcThread-s 
This is the “Early Bird” injection 
technique. Suspended processes (e.g., 
post-ex jobs) only. 
RtlCreateUserThread 
Yes 
Yes 
Risky on XP-era targets; uses RWX 
shellcode for x86 -> x64 injection. 
SetThreadContext 
Yes 
Suspended processes (e.g., post-ex jobs) 
only. 
The CreateThread and CreateRemoteThread options have variants that spawn a suspended 
thread with the address of another function, update the suspended thread to execute the injected 
code, and resume that thread. Use [function] “module!function+0x##” to specify the start address 
to spoof. For remote processes, ntdll and kernel32 are the only recommended modules to pull 
www.cobaltstrike.com/
/
83/
from. The optional 0x## part is an offset added to the start address. These variants work x86 -> 
x86 and x64 -> x64 only. 
The execute options you choose must cover a variety of corner cases. These corner cases include 
self injection, injection into suspended temporary processes, cross-session remote process 
injection, x86 -> x64 injection, x64 -> x86 injection, and injection with or without passing an 
argument. The c2lint tool will warn you about contexts that your execute block does not cover. 
12.4 Post Exploitation Jobs 
Larger Cobalt Strike post-exploitation features (e.g., screenshot, keylogger, hashdump, etc.) are 
implemented as Windows DLLs. To execute these features, Cobalt Strike spawns a temporary 
process, and injects the feature into it. The process-inject block controls the process injection 
step. The post-ex block controls the content and behaviors specific to Cobalt Strike’s post-
exploitation features. 
post-ex { 
# control the temporary process we spawn to 
set spawnto_x86 "%windir%\\syswow64\\rundll32.exe"; 
set spawnto_x64 "%windir%\\sysnative\\rundll32.exe"; 
# change the permissions and content of our post-ex DLLs 
set obfuscate "true"; 
# pass key function pointers from Beacon to its child jobs 
set smartinject "true"; 
# disable AMSI in powerpick, execute-assembly, and psinject 
set amsi_disable "true"; 
} 
The spawnto_x86 and spawnto_x64 options control the default temporary process Beacon will 
spawn for its post-exploitation features. Here are a few tips for these values: 
1. Always specify the full path to the program you want Beacon to spawn  
2. Environment variables (e.g., %windir%) are OK within these paths. 
3. Do not specify %windir%\system32 or c:\windows\system32 directly. Always use 
syswow64 (x86) and sysnative (x64). Beacon will adjust these values to system32 where 
it’s necessary. 
4. For an x86 spawnto value, you must specify an x86 program. For an x64 spawnto 
value, you must specify an x64 program. 
5. The paths you specify (minus the automatic syswow64/sysnative adjustment) must 
exist from both an x64 (native) and x86 (wow64) view of the file system. 
www.cobaltstrike.com/
/
84/
The obfuscate option scrambles the content of the post-ex DLLs and settles the post-ex 
capability into memory in a more OPSEC-safe way. It’s very similar to the obfuscate and userwx 
options available for Beacon via the stage block. 
The smartinject option directs Beacon to embed key function pointers, like GetProcAddress and 
LoadLibrary, into its same-architecture post-ex DLLs. This allows post-ex DLLs to bootstrap 
themselves in a new process without shellcode-like behavior that is detected and mitigated by 
watching memory accesses to the PEB and kernel32.dll. 
The amsi_disable option directs powerpick, execute-assembly, and psinject to patch the 
AmsiScanBuffer function before loading .NET or PowerShell code. This limits the Antimalware 
Scan Interface visibility into these capabilities. 
www.cobaltstrike.com/
/
85/
13. Reporting and Logging 
13.1 Logging 
Cobalt Strike logs all of its activity on the team server. These logs are located in the logs/ folder 
in the same directory you started your team server from. All Beacon activity is logged here with 
a date and timestamp.  
13.2 Reports 
Cobalt Strike has several report options to help make sense of your data and convey a story to 
your clients. You may configure the title, description, and hosts displayed in most reports. 
Figure 46. Export Report Dialog 
Go to the Reporting menu and choose one of the reports to generate. Cobalt Strike will export 
your report as an MS Word or PDF document. 
www.cobaltstrike.com/
/
86/
Activity Report 
The activity report provides a timeline of red team activities. Each of your post-exploitation 
activities are documented here. 
Figure 47. The Activity Report 
Hosts Report 
The hosts report summarizes information collected by Cobalt Strike on a host-by-host basis. 
Services, credentials, and sessions are listed here as well. 
www.cobaltstrike.com/
/
87/
Indicators of Compromise 
This report resembles an Indicators of Compromise appendix from a threat intelligence report. 
Content includes a generated analysis of your Malleable C2 profile, which domain you used, and 
MD5 hashes for files you’ve uploaded. 
Figure 48. Indicators of Compromise Report 
www.cobaltstrike.com/
/
88/
Sessions Report 
This report documents indicators and activity on a session-by-session basis. This report includes: 
the communication path each session used to reach you, MD5 hashes of files put on disk during 
that session, miscellaneous indicators (e.g., service names), and a timeline of post-exploitation 
activity. This report is a fantastic tool to help a network defense team understand all of red’s 
activity and match their sensors to your activity. 
Figure 49. The Sessions Report 
Social Engineering 
The social engineering report documents each round of spear phishing emails, who clicked, and 
what was collected from each user that clicked. This report also shows applications discovered 
by the system profiler. 
Tactics, Techniques, and Procedures 
This report maps your Cobalt Strike actions to tactics within MITRE’s ATT&CK Matrix. The 
ATT&CK matrix describes each tactic with detection and mitigation strategies. You may learn 
more about MITRE’s ATT&CK at: https://attack.mitre.org/ 
www.cobaltstrike.com/
/
89/
13.3 Custom Logo in Reports 
Cobalt Strike reports display a Cobalt Strike logo at the top of the first page. You may replace 
this with an image of your choosing. Go to Cobalt Strike -> Preferences -> Reporting to set 
this 
Your custom image should be 1192x257px set to 300dpi. The 300dpi setting is necessary for the 
reporting engine to render your image at the right size. 
You may also set an accent color. This accent color is the color of the thick line below your 
image on the first page of the report. Links inside reports use the accent color too. 
Figure 50. A Customized Report 
13.4 Custom Reports 
Cobalt Strike 3.0 supports custom reports. These scripts are defined in a subset of the Aggressor 
Script language. Consulting the Aggressor Script documentation to learn more about this feature: 
• https://www.cobaltstrike.com/aggressor-script/
www.cobaltstrike.com/
/
90/
Appendix A. Keyboard Shortcuts 
The following keyboard shortcuts are available.  
Shortcut 
Where 
Action 
Ctrl+A 
console 
select all text 
Ctrl+F 
console 
open find tool to search the console 
Ctrl+K 
console 
clear the console 
Ctrl+Minus 
console 
decrease font size 
Ctrl+Plus 
console 
increase font size 
Ctrl+0 
console 
reset font size 
Down 
console 
show next command in command history 
Escape 
console 
clear edit box 
Page Down 
console 
scroll down half a screen 
Page Up 
console 
scroll up half a screen 
Tab 
console 
complete the current command (in some console types) 
Up 
console 
show previous command in command history 
Ctrl+B 
everywhere 
send current tab to the bottom of the Cobalt Strike window 
Ctrl+D 
everywhere 
close current tab 
Ctrl+Shift+D 
everywhere 
close all tabs except the current tab 
Ctrl+E 
everywhere 
empty the bottom of the Cobalt Strike window (undo Ctrl+B) 
Ctrl+I 
everywhere 
choose a session to interact with 
Ctrl+Left 
everywhere 
switch to previous tab 
Ctrl+O 
everywhere 
open preferences 
Ctrl+R 
everywhere 
Rename the current tab 
Ctrl+Right 
everywhere 
switch to next tab 
Ctrl+T 
everywhere 
take screenshot of current tab (result is sent to team server) 
Ctrl+Shift+T 
everywhere 
take screenshot of Cobalt Strike (result is sent to team server) 
Ctrl+W 
everywhere 
open current tab in its own window 
Ctrl+C 
graph 
arrange sessions in a circle 
Ctrl+H 
graph 
arrange sessions in a hierarchy 
Ctrl+Minus 
graph  
zoom out 
Ctrl+P 
graph 
save a picture of the graph display 
Ctrl+Plus 
graph  
zoom in 
Ctrl+S 
graph 
arrange sessions in a stack 
Ctrl+0 
graph  
reset to default zoom-level 
Ctrl+F 
tables 
open find tool to filter table content 
Ctrl+A 
targets 
select all hosts 
Escape 
targets 
clear selected hosts