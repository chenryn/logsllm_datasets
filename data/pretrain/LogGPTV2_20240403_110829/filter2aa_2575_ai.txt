### 12.3 Process Injection

The `process-inject` block in Malleable C2 profiles is used to shape the injected content and control the process injection behavior for the Beacon payload.

```plaintext
process-inject {
    # Set how memory is allocated in a remote process
    set allocator "VirtualAllocEx";

    # Shape the memory characteristics and content
    set min_alloc "16384";
    set startrwx "true";
    set userwx "false";

    transform-x86 {
        prepend "\x90\x90";
    }

    transform-x64 {
        # Transform x64 injected content
    }

    # Determine how to execute the injected code
    execute {
        CreateThread "ntdll.dll!RtlUserThreadStart";
        SetThreadContext;
        RtlCreateUserThread;
    }
}
```

#### Options in the `process-inject` Block

- **allocator**: Specifies the preferred method for allocating memory in the remote process. Options include `VirtualAllocEx` and `NtMapViewOfSection`. `NtMapViewOfSection` is only for same-architecture injection, while `VirtualAllocEx` is used for cross-architecture allocations.
- **min_alloc**: Sets the minimum amount of memory to request for the injected content.
- **startrwx**: Determines whether the initial permissions for the injected content are RWX (Read, Write, Execute) or RW (Read, Write).
- **userwx**: Determines whether the final permissions for the injected content are RWX (Read, Write, Execute) or RX (Read, Execute).

#### Transform Blocks

- **transform-x86** and **transform-x86**: These blocks allow you to pad the content injected by Beacon. The `prepend` command inserts a string before the injected content, while the `append` command adds a string after the injected content. Ensure that prepended data is valid code for the injected content’s architecture (x86, x64). The `c2lint` program does not check this.

#### Execute Block

The `execute` block controls the methods Beacon will use to inject code into a process. Beacon evaluates each option, determines if it is usable in the current context, and tries the method. If execution fails, it moves on to the next option.

- **CreateThread**: Only works in the current process.
- **CreateRemoteThread**: Works for x86 -> x64 but not across sessions.
- **NtQueueApcThread** and **NtQueueApcThread-s**: This is the “Early Bird” injection technique, which only works for suspended processes.
- **RtlCreateUserThread**: Works for both x86 -> x64 and x64 -> x86, but is risky on XP-era targets.
- **SetThreadContext**: Works for suspended processes only.

#### Variants of `CreateThread` and `CreateRemoteThread`

These options can spawn a suspended thread with the address of another function, update the suspended thread to execute the injected code, and then resume the thread. Use `[function] "module!function+0x##"` to specify the start address to spoof. For remote processes, `ntdll` and `kernel32` are the only recommended modules. The optional `0x##` part is an offset added to the start address. These variants work only for x86 -> x86 and x64 -> x64.

#### Corner Cases

The `execute` options must cover various corner cases, including self-injection, injection into suspended temporary processes, cross-session remote process injection, x86 -> x64 injection, x64 -> x86 injection, and injection with or without passing an argument. The `c2lint` tool will warn you about contexts that your `execute` block does not cover.

### 12.4 Post-Exploitation Jobs

Cobalt Strike's larger post-exploitation features (e.g., screenshot, keylogger, hashdump, etc.) are implemented as Windows DLLs. To execute these features, Cobalt Strike spawns a temporary process and injects the feature into it. The `process-inject` block controls the process injection step, while the `post-ex` block controls the content and behaviors specific to Cobalt Strike’s post-exploitation features.

```plaintext
post-ex {
    # Control the temporary process we spawn
    set spawnto_x86 "%windir%\\syswow64\\rundll32.exe";
    set spawnto_x64 "%windir%\\sysnative\\rundll32.exe";

    # Change the permissions and content of our post-ex DLLs
    set obfuscate "true";

    # Pass key function pointers from Beacon to its child jobs
    set smartinject "true";

    # Disable AMSI in powerpick, execute-assembly, and psinject
    set amsi_disable "true";
}
```

#### Spawnto Options

- **spawnto_x86** and **spawnto_x64**: Control the default temporary process Beacon will spawn for its post-exploitation features.
  - Always specify the full path to the program.
  - Environment variables (e.g., `%windir%`) are allowed.
  - Do not specify `%windir%\system32` or `c:\windows\system32` directly; use `syswow64` (x86) and `sysnative` (x64).
  - For an x86 `spawnto` value, specify an x86 program. For an x64 `spawnto` value, specify an x64 program.
  - The paths must exist from both an x64 (native) and x86 (wow64) view of the file system.

#### Other Options

- **obfuscate**: Scrambles the content of the post-ex DLLs and settles the post-ex capability into memory in a more OPSEC-safe way.
- **smartinject**: Embeds key function pointers, like `GetProcAddress` and `LoadLibrary`, into its same-architecture post-ex DLLs, allowing them to bootstrap themselves in a new process without shellcode-like behavior.
- **amsi_disable**: Patches the `AmsiScanBuffer` function before loading .NET or PowerShell code, limiting the Antimalware Scan Interface visibility into these capabilities.

### 13. Reporting and Logging

#### 13.1 Logging

Cobalt Strike logs all activity on the team server, located in the `logs/` folder in the same directory where the team server was started. All Beacon activity is logged here with a date and timestamp.

#### 13.2 Reports

Cobalt Strike offers several report options to help make sense of your data and convey a story to clients. You can configure the title, description, and hosts displayed in most reports.

- **Activity Report**: Provides a timeline of red team activities.
- **Hosts Report**: Summarizes information collected by Cobalt Strike on a host-by-host basis.
- **Indicators of Compromise**: Resembles an Indicators of Compromise appendix from a threat intelligence report.
- **Sessions Report**: Documents indicators and activity on a session-by-session basis.
- **Social Engineering**: Documents each round of spear phishing emails, who clicked, and what was collected from each user.
- **Tactics, Techniques, and Procedures**: Maps Cobalt Strike actions to tactics within MITRE’s ATT&CK Matrix.

#### 13.3 Custom Logo in Reports

You can replace the Cobalt Strike logo in reports with a custom image. Go to `Cobalt Strike -> Preferences -> Reporting` to set this. Your custom image should be 1192x257px at 300dpi. You can also set an accent color, which is used for the thick line below your image and links inside reports.

#### 13.4 Custom Reports

Cobalt Strike 3.0 supports custom reports defined in a subset of the Aggressor Script language. Consult the Aggressor Script documentation for more information: [Aggressor Script Documentation](https://www.cobaltstrike.com/aggressor-script/)

### Appendix A. Keyboard Shortcuts

| Shortcut          | Where     | Action                                      |
|-------------------|-----------|---------------------------------------------|
| Ctrl+A            | console   | Select all text                             |
| Ctrl+F            | console   | Open find tool to search the console        |
| Ctrl+K            | console   | Clear the console                           |
| Ctrl+Minus        | console   | Decrease font size                          |
| Ctrl+Plus         | console   | Increase font size                          |
| Ctrl+0            | console   | Reset font size                             |
| Down              | console   | Show next command in command history        |
| Escape            | console   | Clear edit box                              |
| Page Down         | console   | Scroll down half a screen                   |
| Page Up           | console   | Scroll up half a screen                     |
| Tab               | console   | Complete the current command                |
| Up                | console   | Show previous command in command history    |
| Ctrl+B            | everywhere| Send current tab to the bottom of the window|
| Ctrl+D            | everywhere| Close current tab                           |
| Ctrl+Shift+D      | everywhere| Close all tabs except the current tab       |
| Ctrl+E            | everywhere| Empty the bottom of the window (undo Ctrl+B)|
| Ctrl+I            | everywhere| Choose a session to interact with           |
| Ctrl+Left         | everywhere| Switch to previous tab                      |
| Ctrl+O            | everywhere| Open preferences                            |
| Ctrl+R            | everywhere| Rename the current tab                      |
| Ctrl+Right        | everywhere| Switch to next tab                          |
| Ctrl+T            | everywhere| Take screenshot of current tab              |
| Ctrl+Shift+T      | everywhere| Take screenshot of Cobalt Strike            |
| Ctrl+W            | everywhere| Open current tab in its own window          |
| Ctrl+C            | graph     | Arrange sessions in a circle                |
| Ctrl+H            | graph     | Arrange sessions in a hierarchy             |
| Ctrl+Minus        | graph     | Zoom out                                    |
| Ctrl+P            | graph     | Save a picture of the graph display         |
| Ctrl+Plus         | graph     | Zoom in                                     |
| Ctrl+S            | graph     | Arrange sessions in a stack                 |
| Ctrl+0            | graph     | Reset to default zoom-level                 |
| Ctrl+F            | tables    | Open find tool to filter table content      |
| Ctrl+A            | targets   | Select all hosts                            |
| Escape            | targets   | Clear selected hosts                        |

For more information, visit [Cobalt Strike Documentation](https://www.cobaltstrike.com/).