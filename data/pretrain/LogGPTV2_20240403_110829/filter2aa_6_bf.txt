“ë”的名字是“GREEK SMALL LETTER LAMBDA.”
“!”的名字是“EXCLAMATION MARK.”
分类（http://bit.ly/1fwsjL9）。将字符归类为字母、大写字母、数字和标点符号。
版本。该字符在Unicode的哪个版本中被引入(1.0,1.1或是2.0)?
弃用。这个字符是否不推荐使用？
以及很多其他的属性。
24.3 码位
码位的范围初始有16位。在Unicode 2.0（1996年7月）中它被扩大了：现在它分为了17层，从0到16。每一层由16位组成（由16进制0x0000～0xFFFF表示）。因此，在之后的16进制范围中，在以下4个的数字范围中的数值都要包含平面的数字。
区间0，基本区间（BMP可表示多种语言的基本常用的字符）：0x0000～0xFFFF。
区间1，辅助区间（SMP可表示多种语言的辅助字符）：0x10000～0x1FFFF。
区间2，表意辅助区间（SIP可表示多种语言的辅助表意字符）：0x20000～0x2FFFF。
区间3～13，未赋值。
区间14，特殊目的辅助区间（SSP可表示特殊目的的字符）：0xE0000～0xEFFFF。
区间15～16，私人使用区段的辅助区间：0x0F0000～0x10FFFF。
区间1～16统称为辅助区间或者星形区间。
24.4 Unicode编码
UTF-32编码是以32位码元来表示的，任何一个码位都可以被一个固定32位长度的码元来编码，对而其他编码而言，编码位的字节长度是各不相同的。
UTF-16是以16位码元来编码的，它需要1到2个码元来表示一个码位。基本区间（BMP）码位一个码元就可以表示。更高区间的码位除去0x10000是20位（16倍的16位），这些位被用2个码位（所谓的代表对）来表示：
主要代理区影响最为显著的10位，其存储区间为0xD800～0xDBFF，也称为高位代理码元。
次要代理区影响最不显著的10位，其存储区间为0xDC00～0xDFFF，称为低位代理码元。
表24.1（适应于Unicode标准6.2.0，表3-5）展示了位是如何分配的。
表24.1
码位
UTF-16码元
xxxxxxxxxxxxxxxx(16 bits)
xxxxxxxxxxxxxxxx
pppppxxxxxxyyyyyyyyyy(21 bits=5+6+10bits)
110110qqqqxxxxxx 110111yyyyyyyyyy(qqqq= ppppp-1)
为了使此种编码可行，基本区间（BMP）的0xD800～0xDFFF是未被使用的空段。因此可以用来映射辅助区间的字符，下面的函数会用UTF-16来编码（稍后我们将看到一个使用它的例子）：
UCS-2，是过去的一种编码格式，仅使用16位码位来表示，也就是基本区间（BMP）的码位，当Unicode的码位超过了16位，UTF-16就替代了UCS-2。
UTF-8有8个码位，它搭建了ASCII编码和Unicode的桥梁。ASCII仅仅只有128个字符，这刚好和Unicode的前128个是一样的。UTF-8向后兼容，因为所有的ASCII编码都是有效的。换句话说，在0～127区间的码元在UTF-8的相同区间也表示一个码位。这些码位的最高位均用0填充，如果最高位是1，后续依次用0填充不足的位。具体遵循以下编码方式：
0000～007F：0xxxxxxx（7位，存储为1个字节）
0080～07FF：110xxxxx, 10xxxxxx（5+6位=11位，存储为2个字节）
0800～FFFF：1110xxxx,10xxxxxx,10xxxxxx（4+6+6位=16位，存储为3个字节）
10000～1FFFFF：11110xxx,10xxxxxx,10xxxxxx,10xxxxxx（3+6+6+6位=21位，存储为4个字节）。最高码位是10FFFF，所以UTF-8有额外的存储空间。
如果最高位不是0，那么数字中在0前面的这些数字表示在一个序列中有多少码元。在第一个码元之后的所有码元都有10这个位前缀。因此，初始码元和其后的码元的范围是不相交的。这有助于编码错误的恢复。UTF-8已经变成了一种流行的Unicode格式。刚开始只是因为它对ASCII的向后兼容而流行。后来，由于Unicode在跨操作系统、编程环境以及应用中的广泛使用越来越受关注。
24.5 JavaScript源码和Unicode
将JavaScript处理为Unicode源码的情况有两种：内部（在解析期间）以及外部（在载入文件期间）。
24.5.1 内部源码转化
在JavaScript引擎中，JavaScript源码被当作UTF-16的码元序列。按照EMCAScript规范第6部分（http://ecma-international.org/ecma-262/5.1/＃sec-6）所描述：
ECMAScript源码文本可以以Unicode字符编码（3.0及以上）的序列来表示[…]。规范中规定ECMAScript代码要转换十六进制的码元序列，但是事实并非如此。ECMAScript代码在其被转换为UTF-16之前必须被处理。
对于标示符，字符串字面量以及正则表达式字面量，任何的码元都会被表示为一个Unicode形式的序列 \uHHHH，这里HHHH是4位十六进制的数字。例如：
这意味着你可以在字面量和变量名中使用Unicode来表示，前提是不超出源码中ASCII的范围。
对于文本字面量，我们还有一种转义的方式：十六进制的转义序列通过两位十六进制数字来表示码元，其范围是0x00～0xFF。例如：
24.5.2 源码外部转化
尽管JavaScript内部使用的是UTF-16编码，但是JavaScript代码通常不以这种格式存储。当一个Web浏览器通过标签来加载一个原文件时，决定其编码的因素如下（http://bit.ly/ 1fwstC9）。
如果文件带有BOM头，那么编码是UTF的变体，这取决于所使用的BOM头。
否则，如果文件是通过HTTP(S)的，那么其编码由Content-Type头的charset参数决定。例如：
提示：
 对JavaScript文件来说，正确的媒体类型（我们所知的MIME type）是application/ javascript。然而，对于旧的浏览器（例如，Internet Explorer 8及以下）text/javascript也是可以的。不幸的是，标签的type属性（http://bit.ly/1fwsvKe）默认是text/ javascript。尽管你可以省略JavaScript的type属性，但是这并无益处。
否则，如果标签具有charset属性的话，那么就会使用这个编码。即便type属性具有合法的媒体类型，这个类型也不具有charset属性（如我们上面提到的Content-Type头）。这就保证了charset和type的值冲突。
否则，就会使用文档的编码，即标签所在的文档。例如，这个HTML5文档的开头，有一个标签定义了该文档的编码是UTF-8的：
我极力建议你加上这个编码的声明。如果不这样做，浏览器就会用一个本地的默认编码（http://bit.ly/1oODGWp）来替代。这就是说，不同国家的人看这个页面可能会看到不一样的效果。在不同的本地化编码中只有最低的7位是相对稳定的。
最后，我的建议如下：
对于你自己的应用，你可以使用Unicode。但是你必须声明app的HTML页面是UTF-8编码的。
对于类库，最安全的方式是发布ASCII（7位）编码的代码。
一些压缩工具可以将源码中Unicode码位超过7位的部分进行转换，使得源码处于“7位以内的安全状态”。它们是通过用Unicode转义来替代非ASCII字符的方式来实现的。例如，下面使用UglifyJS（https://github.com/mishoo/UglifyJS2）来转换test.js的例子：
这是test.js的原内容：
经过UglifyJS转换支行，代码变成了：
再看看下面一个相反的例子。有一段时间，D3.js是以UTF-8的格式发布的。这使得一个非UTF-8的页面载入D3.js的时候，就会报错（https://github.com/mbostock/d3/issues/1195），这是因为源码中包含了这样一条语句：
语句中声明的标示符 ð 和 å 没有被正确地解码，因此没有被识别为合法的变量名。此外，有一些字符串字面量使用了超7位的码位，也没有被正确地解码。综上所述，你应该在的标签上加上合适的charset属性：
24.6 JavaScript字符串和Unicode
根据ECMAScript规范中第8.4部分（http://ecma-international.org/ecma-262/5.1/#sec-8.4）所描述的，JavaScript的字符串是UTF-16的码元序列。
当一个字符串包含了文本数据，字符串的每一个元素都会被识别为单个UTF-16的码元。
24.6.1 转义序列
如上面所说的，你可以在字符串字面量中使用Unicode转义序列和十六进制转义序列。例如，你可以将o和一个分音符合并来产生字符 ö，（其码元为0x0308）：
我们可以在JavaScript命令行模式中进行验证，例如浏览器console和Node.js交互界面中。你可以将这种形式字符串插入到Web页面的DOM中。
24.6.2 通过转义引用星际平面的字符
在网络中有很多漂亮的Unicode标识。例如，你可以去看看Tim Whitlock的“Emoji Unicode Tables”（http://apps.timwhitlock.info/emoji/tables/unicode）。又如现在各种各样的Unicode字体的符号。这些符号都不是图片，而是字体的字形。假设你想通过JavaScript来展示一个星际平面的Unicode字符（当然，这样做是有风险的：因为并不是所有字体都对这些字符有支持）。例如，一头奶牛，它的码位是0x1F404：。
你可以将这个字符拷贝并直接粘贴到你的Unicode编码的JavaScript源码中：
JavaScript引擎会对源码进行解码（通常在UTF-8中都是这样）并创建一个由两个UTF-16码元组成的字符串。另外，你可以使用Unicode编码来计算这两个码元。会使用这种计算方式的web apps有：
UTF Converter（http://macchiato.com/unicode/convert.html）
“JavaScript escapes”（http://mothereff.in/js-escapes）by Mathias Bynens
之前我们定义的函数toUTF16的计算也是如此：
UTF-16配对(0xD83D, 0xDC04)的确最终被编译为了奶牛图案：
24.6.3 字符长度计算
如果字符包含代理码元（即两个码位编码成的一个码元），那么在字符长度计算中不会包含字形。它只统计码位：
这可以通过库类解决，例如，Mathias Bynens的Punycode.js库（https://github.com/bestiejs/ punycode.js），它被捆绑在Node.js中。
24.6.4 Unicode正常化
如果你想在字符串中搜索或是比较Unicode，那么你就要将Unicode正常化，例如，通过unorm这个库（https://github.com/walling/unorm/该库由Bjarke Walling创建）。
24.7 JavaScript正则表达式和Unicode
JavaScript的正则表达式（可见第19章）对Unicode的支持非常有限。例如，你没有办法来匹配“大写字母”的Unicode集合。
行结尾符影响了匹配。行结尾符可以是表24.2展示的四种形式的任一种。
表24.2
码元
名称
字符转义序列
\u000A
换行符
\n
\u000D
回车符
\r
\u2028
行分隔符
\u2029
段分隔符
下面的正则表达式是基于Unicode来构建的。
\s \S（空格，非空格）有其Unicode的定义：
. (点)可以匹配除了换行符之外的所有码元（注意不是码位!）。下一章我们会了解到如何进行码位匹配。
多行模式/m：在多行模式中，符号^会匹配输入以及换行符之后的行开始。而符号$则会匹配换行符之前或是输入的结尾。在非多行模式中，这两个匹配符则只会匹配整个输入的开头和结尾。
其他一些重要的字符类则是基于ASCII而非Unicode来定义的。
\d \D（数值，非数值）：单个数字，等价于[0-9]。
\w \W（字符，非字符）：单个字符（A-Za-z0-9_）等价于[A-Za-z0-9_]。
\b \B（分字符，单词中）：单词是一些列字母的序列（[A-Za-z0-9_]）。例如，对于字符串'über'，我们用\b来判断字母b是否处于一个单词的开头。
24.7.1 匹配任意的码元以及任意的码位
如果你要匹配任意的码元，你可以使用[\s\S]; 详细你可以参考19.1.1“原子：普通”如果你要匹配任意的码位，可以使用：[1]
上面的匹配模式的实质是：
鉴于模式中的这些区间相互之间没有交集，该模式可以正确的匹配UTF-16的字符串的码位。
24.7.2 库
我们还有一些专门处理JavaScript中Unicode的类库。
Regenerate（http://github.com/mathiasbynens/regenerate）可以针对任意的码元生成类似上面我们提到的那种范围形式的正则表达式。它可以作为构建工具的一部分，可以被灵活使用，做一些测试用。
XRegExp（http://xregexp.com）是一个对官方Unicode类、脚本、块以及属性进行扩展（http://xregexp.com/plugins/#unicode）的正则表达式的类库，它的语法主要由以下的几种形式：
例如，\p{字母}会匹配该字母的不同形式而\p{^字母} 和\P{字母} 则都会匹配其余的码位。我们会在第30章中简要介绍XRegExp。
ECMAScript国际化API中（详见30.3“ECMAScript的国际化API”）提供了支持Unicode的整理（排序以及字符串搜索）以及其他更丰富的功能。
24.7.3 推荐阅读的章节资源
要了解关于Unicode的更多信息，可以查看一下的信息：
Wikipedia有一些关于Unicode（http://en.wikipedia.org/wiki/Unicode）及其相关术语的百科词条非常好。
Unicode.org（http://www.unicode.org/）是Unicode联盟的官方网站，它的FAQ （http://www.unicode.org/faq/）也是很好的资源。
JoelSpolsky的论文“TheAbsoluteMinimumEverySoftwareDevel‐ oper Absolutely, Positively Must Know About Unicode and Character Sets(No Excuses!)”（http:// www.joelonsoftware.com/articles/Unicode.html）也是非常有用的。
获取关于Unicode方面JavaScript的支持情况，请看：
Mathias Bynens的“JavaScript’s internal character encoding: UCS-2 or UTF-16?”（http://mathiasbynens.be/notes/javascript-encoding）。
Steven Levithan的“JavaScript, Regex, and Unicode”（http://bit.ly/1oOE0oh）。
注解：
 感谢以下各位对本章的贡献：Mathias Bynens（@mathias），Anne van Kesteren（@annevk）和Calvin Metcalf（@CWMma）。
[1] 严格来说是匹配任意Unicode纯量值。
第25章 ECMAScript 5的新特性
本章列出了只在ECMAScript 5中具有的特性。如果需要兼容旧的JavaScript引擎，你应该避免使用这些特性，或通过类库（稍后介绍）实现这些特性。通常情况下，本书假设您使用的是完全支持ECMAScript 5的现代引擎。
ECMAScript 5规范包含以下范围描述。
ECMAScript第五版（作为ECMA-262第五版发布）。
编纂实际解释为语言规范，已经普遍在浏览器中实现。
增加了对自第三版出版以来已出现的新功能的支持。这些特性包括：
访问器属性；
反射创建和检查对象；
属性特性的程序控制；
附加的数组操作函数；
支持JSON对象编码格式；
提供增加错误检查和程序安全的严格模式。
25.1 新特性
ECMAScript 5中包含的新特性如下。
（1）严格模式（参见7.8“严格模式”）
把下面一行代码放在文件或函数的开始，开启所谓的严格模式。通过禁止某些特性，执行更多检查并抛出更多异常，让JavaScript变得更干净：
（2）访问器（参见17.7“访问器（getter 和 setter）”）
getter和setter方法允许你通过方法实现获取和设置属性。例如，下面的对象obj包含获取foo属性的getter方法：
25.2 语法的改变
ECMAScript 5包括以下语法改变。
（1）保留字作为属性键
你可以在对象字面量中，点操作符后使用保留字（如new和function）作为非引用属性键：
（2）结尾的逗号合法化
对象字面量和数组字面量中最后的逗号是合法的。
（3）多行字符串字面量
如果在行尾使用反斜杠转义，字符串字面量可以跨多行。
25.3 标准库的新功能
ECMAScript 5为JavaScript标准库带来了几个新功能。本节将按类别列出。
25.3.1 元编程
获取和设置原型（参见17.4.4“获取和设置原型”）：