A challenge is that the recommended BN subgroups do
not possess an eﬃciently-computable isomorphism from G1
to G2 or vice versa, which necessitates re-design of some
symmetric cryptographic protocols. A related issue is that
BN curves permit eﬃcient hashing only into the group G1.
This places restrictions on the set of valid group assignments
we can use.
3.2 How AutoGroup Works
AutoGroup is a new tool for automatically translating
a pairing-based encryption or signature scheme from the
symmetric-pairing setting to the asymmetric-pairing setting.
At a high-level, AutoGroup takes as input a representa-
tion of a cryptographic protocol (e.g., signature or encryp-
tion scheme) written in a Domain-Speciﬁc Language called
Scheme Description Language (SDL), along with a descrip-
tion of the optimizations desired by the user. These opti-
mizations may describe a variety of factors, e.g., requests to
minimize computational cost, key size, or ciphertext / sig-
nature size. The tool outputs a new SDL representation of
the scheme, one that comprises the optimal assignment of
groups for the given constraints. The assignment of groups
is non-trivial, as many schemes are additionally constrained
by features of common asymmetric bilinear groups settings,
most notably, restrictions on which groups admit eﬃcient
hashing. At a high level, AutoGroup works by reducing this
constrained group assignment problem to a boolean satis-
ﬁability problem, applying an SMT solver, and processing
the results. We next describe the steps of AutoGroup, as
illustrated in Figure 2.
3An alternative instantiation of the symmetric setting has
G1 (cid:54)= G2 but admits an eﬃciently-computable isomorphism
between the groups.
401Figure 2: A high-level presentation of the AutoGroup tool, which uses external tools Z3 and SDL Parser.
1. Extract Generator Representation. The ﬁrst stage
of the AutoGroup process involves parsing SDL to identify
all base generators of G that are used in the scheme. For
each generator g ∈ G, AutoGroup creates a pair of gener-
ators g1 ∈ G1 and g2 ∈ G2. This causes an increase in
the parameter size of the scheme, something that we must
address in later steps.
We assume the Parser knows the basic structure of the
scheme, and can identify the algorithm responsible for pa-
rameter generation. This allows us to parse the algorithm
to observe which generators that are created. When Auto-
Group detects the ﬁrst generator, it marks this as the “base”
generator of G and splits g into a pair g1 ∈ G1 and g2 ∈ G2.
Every subsequent group element sampled by the scheme is
deﬁned in terms of the base generators. For example, if the
setup algorithm next calls for “choosing a random generator
h in G”, then AutoGroup will select a random t(cid:48) ∈ Zp and
compute new elements h1 = gt(cid:48)
1 and h2 = gt(cid:48)
2 .
2. Traceback Inputs to the Pairing Function. Re-
call that the pairing function e(A, B) takes two inputs. We
extract all the pairings required in the scheme; these might
come from the setup algorithm, encryption/signing, or de-
cryption/veriﬁcation. Prior to tracing the pairing inputs,
we split pairings of the form e(g, A· B) as e(g, A)· e(g, B) to
prepare for encoding pairings as logical formulas in the SMT
solver. In the ﬁnal step of AutoGroup we recombine the pair-
ings to preserve eﬃciency. We reuse techniques introduced
in [4, 29] to split and combine pairings in AutoGroup.
After splitting applicable pairings, we obtain a program
slice for each variable input to determine which (symmetric)
generators were involved in computing it. This also helps us
later track which variables are aﬀected when an assignment
for a given variable is made in G1 or G2. Consider the
example A = X · Y . Clearly, the group assignment of A
aﬀects variables X and Y , and capturing the slice for each
pairing input variable is crucial for AutoGroup to perform
correct re-assignment for the subset of aﬀected variables.
3. Convert Pairings to Logical Formulas. Asymmet-
ric pairings require that one input to the function be in G1,
and the other be in G2. Conversion from a symmetric to
an asymmetric pairing can be reduced to a constraint sat-
isﬁability problem; we model the asymmetric pairing as an
inequality operator over binary variables. This is analogous
because an inequality constraint enforces that the binary
variables either have a 0 or 1 value, but not both for the
equation to be satisﬁable. Therefore, we express symmet-
ric pairings as a logical formula of inequality operators over
binary variables separated by conjunctive connectors (e.g.,
A (cid:54)= B ∧ C (cid:54)= D). We then employ an SMT solver to ﬁnd
a satisﬁable solution and apply the solver’s solution to pro-
duce an equivalent scheme in the asymmetric setting.
4. Convert Pairing Limitations into Constraints.
When translating from the symmetric to the asymmetric
pairing setting, we encounter several limitations that must
be incorporated into our model. Chief among these are lim-
itations on hashing: in some asymmetric groups, hashing to
G2 is not possible.
In other groups, there is no such iso-
morphism, but it is possible to hash into G1. Depending on
the groups that the user selects, we must identify an asym-
metric solution that respects these constraints. Fortunately
these constraints can easily be expressed in our formulae, by
simply assigning the output of hash functions to a speciﬁc
group, e.g., G1.
5. Execute SMT Solver. We run the logical formula
plus constraints through an SMT solver to identify a satis-
fying assignment of variables. The solver checks for a sat-
isﬁable solution and produces a model of 0 (or G1) and 1
(or G2) values for the pairing input variables that satisﬁes
the speciﬁed constraints. We can go one step further and
enumerate all the unique solutions (or models) found by the
solver for a given formula and constraints. After obtaining
all the possible models, we utilize the solver to evaluate each
model and determine the solutions that satisﬁes the user’s
application-speciﬁc requirements.
6. Satisfy Application-speciﬁc Requirements.
To
facilitate optimizations in the asymmetric setting that suit
user applications, we allow users to specify additional con-
straints on the chosen solution. There are two possible ways
of tuning AutoGroup: one set of options focus on reducing
the size of certain scheme outputs. For public key encryp-
tion, the user can choose to minimize the representation of
the secret keys, ciphertext or both. Similarly, for signatures
schemes, the user can optimize for minimal-sized public keys,
signatures or both. The second set of options focus on re-
ducing algorithm execution times. This is possible due to
the fact that for many candidate asymmetric groups, group
operations in G1 are dramatically more eﬃcient than those
that take place in G2. Users may also combine various op-
erations, in order to ﬁnd an optimal solution based on a
combination of size and operation time.
We ﬁnd application-speciﬁc solutions by minimizing an
objective function over all the possible models obtained from
the solver. Our objective function is straightforward and
calculated as follows:
n(cid:88)
F (A, C, w1, w2) =
((1 − ai) · w1 + ai · w2) · ci
i=1
where A = ai, . . . , an and represents the pairing input
variables, w1 and w2 denote weights over groups G1 and G2,
Input: SDL ofScheme SSDL ParserExtractGeneratorsOutput: SDL ofScheme S'Program Slicefor each pairing inputEncode Pairingsas FormulaInput: User Optimization ConstraintsAutoGroupRun Z31. ﬁnd all solutions2. reduce iteratively by constraint prioritiesEfﬁciency Passoptimize solution402respectively, C = ci, . . . , cn and each ci corresponds to the
cost for each ai. Each input variable ai can have a value
of 0 = G1 or 1 = G2. We now describe how the above
options are converted into parameters of F and discuss how
the SMT solver is used to obtain a minimal solution.
For each parameter that we intend to optimize, we de-
ﬁne a weight function that evaluates each candidate solution
according to some metric. For each assigned variable, the
weight function calculates the total “cost” of the construc-
tion as a function of some cost value for the speciﬁc variable,
as well as an overall cost for an assignment of G1 and G2.
In the case of ciphertext size we assign the cost value to 1
for each group element that appears in the ciphertext, and
0 for all others. For encryption time, we assign a cost that
corresponds to the number of group operations applied to
this variable during the encryption operation. The overall
cost value then determines the cost of placing a value in one
of the two groups – for size-related calculations, this roughly
corresponds to the length of a group element’s representa-
tion, and for operation time it corresponds to the cost of a
single group operation. By assigning these costs correctly,
we are able to create a series of diﬀerent weight functions
that represent all of the diﬀerent values that we would like
to minimize (e.g., ciphertext size, parameter size, time).
If the user chooses to optimize for multiple criteria simul-
taneously, we must ﬁnd a model that balances between all
of these at the same time. This is not always possible. For
example, some schemes admit solutions that favor a min-
imized secret key size or ciphertext size, but not both. In
this case, we allow the user to determine which constraint to
relax and thereby select the next best solution that satisﬁes
their requirements.
7. Evaluate and Process the Solution.
Once the
application-speciﬁc solution is obtained from the solver, the
next step is to apply the solution to produce an asymmetric
scheme. As indicated earlier, we interpret the solution for
each variable as 0 = G1 and 1 = G2. To apply the solution,
we ﬁrst pre-process each algorithm in SDL to determine how
the pairing inputs are aﬀected by each assignment. Consider
a simplistic example: e(A, B) where A = ga and B = hb.
Let us assume that the satisfying solution is that A ∈ G1 and
B ∈ G2. Therefore, we would rewrite these two variables as
2 where g1 ∈ G1 and h2 ∈ G2. The
A = ga
program slice recorded for each pairing input in step (2)
provides the necessary information to correctly rewrite the
scheme in the asymmetric setting.
1 and B = hb
In addition to rewriting the scheme, AutoGroup performs
several ﬁnal optimizations. First, it removes any unused pa-
rameter values in the public and secret keys. For signature
schemes, we try to optimize further by reducing the pub-
lic parameters used per algorithm. In particular, we trace
which variables in the public key are actually used during
signing and veriﬁcation. For elements that appear only in
the signing (resp. decryption) algorithms, we split the pub-
lic key into two: one is kept just for computing signatures
(resp. decryption), and the other is given out for use in
encryption/veriﬁcation. Second, AutoGroup performs an
additional eﬃciency check and attempts to optimize pair-
ing product equations to use as few pairings as possible.
This is due to the decoupling of pairings in earlier phases
of translating the scheme to the asymmetric setting or per-
haps, just a loose design by the original SDL designer. In
either case, we apply pairing optimization techniques from
previous work [4, 29] to provide this automatic eﬃciency
check. Finally, AutoGroup outputs a new SDL of the mod-
iﬁed scheme.
We do not oﬀer the eﬃciency check of AutoGroup as a
standalone tool for symmetric groups at present, because
our experience inclines us to believe that most practitioners
concerned with eﬃciency will want to work in asymmetric
groups. However, our results herein also demonstrate that
a simple tool of this sort is eﬃcient and feasible.
3.3 Security Analysis of AutoGroup
Whether a scheme is translated by hand (as is done to-
day [50]) or automatically (as in this work), a completely
separate question applying to both is: is the resulting asym-
metric scheme secure? The answer is not immediately clear.
Unlike the signature transformation that we automate in
Section 4 that already has an established security proofs
showing that the transformations preserve security, the the-
oretical underpinnings of symmetric-to-asymmetric transla-
tions are less explored. Here are some things we can say.
First, the original proof of security is under a symmet-
ric pairing assumption, and thus can no longer immediately
apply since the construction and assumption are changing
their algebraic settings. This would seem to require the iden-
tiﬁcation of a new complexity assumption together with a
new proof of security. In many examples, e.g., [21], the new
assumption and proof are only minor deviations from the
original ones, e.g., where the CDH assumption in G (given
[g, ga, gb], compute gab) is converted in a straight-forward
manner to the co-CDH assumption in (G1, G2) (given [g1, g2,
ga
2 ], compute ga
1 ). However, there could be cases where a ma-
jor change is required to the proof of security. For instance,
in some asymmetric groups it is not possible to hash into G2,
but in these groups there exists an isomorphism from G2 to
G1. In other groups there is no such isomorphism, but it is
possible to hash into G2. So if a scheme requires both for
the security proof, that scheme may not be realizable in the
asymmetric setting (see [32] for more).
In best practices today, a human ﬁrst devises the new
construction (based on their desired optimizations) and then
the human works to identify the new assumption and proof.
Our current work automates the ﬁrst step in this process,
and hopefully gives the human more time to spend on the
second step. In this sense, our automation is arguably faster,
and no less secure than what is done by hand today.
However, a more satisfactory solution requires a deeper
theoretical study of symmetric-to-asymmetric pairing trans-
lations, which we feel is an important open problem, but
which falls outside the scope of the current work. What can
one prove about the preservation of security in symmetric-
to-asymmetric translations? Is it necessary to dig into the
proof of security? Or could one prove security of the asym-
metric scheme solely on the assumption of security of the
symmetric one? Will this work the same for encryption, sig-
natures and other protocols? Do the rules by which trans-
lations are done (by hand or AutoGroup) need to change
based on these ﬁndings? These questions remain open.
3.4 Experimental Evaluation of AutoGroup
To determine the eﬀectiveness of our automation, we eval-
uate several encryption and signature schemes on a variety of
optimization combinations supported by our tool. We sum-
403Encryption
Keygen•
Time
Encrypt•
Decrypt•
Approx. Size
Num.
Secret Key
Ciphertext
Solutions
ID-Based Enc.
BB04 [16, §4] Symmetric (SS1536)
Asymmetric (BN256) [Min. CT]
Gentry06 [33, §3.1] Symmetric (SS1536)
WATERS09 [57, §3.1] Symmetric (SS1536)
Asymmetric (BN256) [Min. SK]
Asymmetric (BN256) [Min. SK/CT/Exp]
59.9 ms
4.8 ms
39.9 ms
1.4 ms
294.6 ms
12.6 ms
64.8 ms
7.8 ms
176.2 ms
41.0 ms
286.8 ms
19.2 ms
125.4 ms
27.6 ms
67.8 ms
19.1 ms
612.8 ms
128.0 ms
3072 bits
2048 bits
3072 bits
512 bits