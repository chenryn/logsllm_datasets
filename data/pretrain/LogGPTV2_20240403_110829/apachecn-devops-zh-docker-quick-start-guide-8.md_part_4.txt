      app.inside {
         sh 'npm test'
      }
   }
   stage('Push image') {
      /* Now, push the image into the registry */
      /* This would probably be docker hub or your company registry, like this */
      /* docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') */
      /* For this example, We are using our jenkins-stack service registry */
      docker.withRegistry('https://ubuntu-node01:5000') {
         app.push("latest")
      }
   }
}
```
以下是`main.js`文件的内容:
```
// load the http module
var http = require('http');
// configure our HTTP server
var server = http.createServer(function (request, response) {
   response.writeHead(200, {"Content-Type": "text/plain"});
   response.end("Hello Docker Quick Start\n");
});
// listen on localhost:8000
server.listen(8000);
console.log("Server listening at http://127.0.0.1:8000/");
```
以下是`package.json`文件的内容:
```
{
   "name": "dqs-example-app",
   "version": "1.0.0",
   "description": "A Docker Quick Start Example HTTP server",
   "main": "main.js",
   "scripts": {
      "test": "node test.js",
      "start": "node main.js"
   },
   "repository": {
      "type": "git",
      "url": "https://github.com/earlwaud/dqs-example-app/"
   },
   "keywords": [
      "node",
      "docker",
      "dockerfile",
      "jenkinsfile"
   ],
   "author": "PI:EMAIL",
   "license": "ISC",
   "devDependencies": { "test": ">=0.6.0" }
}
```
最后，以下是`test.js`文件的内容:
```
var assert = require('assert')
function test() {
   assert.equal(1 + 1, 2);
}
if (module == require.main) require('test').run(test);
```
完成后，您的 repo 文件夹应该如下所示:
![](img/94cd891d-3d0f-44a1-87bd-a5b1d51a81cf.png)
现在，让我们把我们的工作推进到 GitHub 回购。您将使用标准 git 命令添加文件，提交文件，然后将文件推送到 repo。以下是我使用的命令:
```
# Initial commit of our application files to the new repo
git add Dockerfile Jenkinsfile main.js package.json test.js
git commit -m "Initial commit"
git push origin master
```
以下是我看到的情况:
![](img/f01fd31d-6e5e-42cd-8382-a8657926144b.png)
现在，我们的应用的初始版本已经创建并推送到我们的 GitHub repo，我们准备创建 Jenkins 作业来获取我们的 repo 代码，构建我们的应用映像，测试它，然后发布我们的应用的 Docker 映像。首先，创建一个新的 Jenkins 工作，登录到您的 Jenkins 服务器，并点击新项目链接。接下来，在“输入项目名称”输入框中输入要用于作业的名称。我正在使用`dqs-example-app`。为我们正在创建的作业类型选择`Pipeline`，然后单击确定按钮。
您可以也应该为我们正在创建的构建作业提供一个有意义的描述。只需将其输入配置屏幕顶部的描述:输入框。对于我们的例子，我已经输入了稍微简洁的描述`Build the dqs-example-app using a pipeline script from SCM`。你可能会做得更好。
我们将设置 Jenkins 作业，每五分钟轮询一次 GitHub 回购，以寻找主分支的变化。有更好的选择，对 repo 的更改可以触发构建作业，而无需计划轮询，但是为了简单起见，我们将只使用轮询方法。因此，向下滚动到作业配置的构建触发器部分，并检查轮询配置管理。然后在时间表中，输入一个值`H/5 * * * *`:
![](img/2edd77ba-1fd9-43c2-a54b-c0721a69ebd8.png)
接下来，我们想建立我们的管道。与前面的例子不同，这次我们将从配置管理选项中选择管道脚本。我们将为我们的配置管理选择`Git`，然后为我们的应用在 GitHub 上的报告输入存储库网址。本例中，该网址为`https://github.com/EarlWaud/dqs-example-app.git`。确保要构建的分支值设置为`*/master`，这是默认值。您的管道定义应该如下所示:
![](img/c00bff59-f503-4d42-a9b0-5ace6f9aaf57.png)
管道还有一个关键设置，那就是脚本路径。这是 Jenkins 脚本文件的(路径和)文件名。在我们的例子中，这实际上只是`Jenkinsfile`，因为我们给文件起的名字是`Jenkinsfile`，它在我们的回购的根中。这是我们示例的输入内容:
![](img/50c3760a-1450-49fd-9276-ab3def3f10a4.png)
这是目前需要的全部配置。其他一切都已经在我们的源文件中设置好了，它们将从我们的应用 repo 中取出。配置只需点击保存按钮。回到作业页面，我们准备执行第一次构建。在我们的示例中，新创建的作业屏幕如下所示:
![](img/33667e7a-61d6-4fa0-8c47-8deffb2a9522.png)
现在，等着吧。在五分钟或更短的时间内，作业的第一次构建将自动开始，因为我们已经设置了每五分钟轮询一次 repo。我们将在作业完成时查看控制台日志，但首先这里是作业完成后我们的 Jenkins 作业视图(当然是成功的！):
![](img/2d26df0f-15ab-4df0-908a-45787221ef31.png)
以下是控制台日志输出的编辑视图，供参考(完整的日志输出可在源代码包中找到):
```
Started by an SCM change
Started by user Earl Waud
Obtained Jenkinsfile from git https://github.com/EarlWaud/dqs-example-app.git
[Pipeline] node
Running on agent-00042y2g983xq on docker in /home/jenkins/agent/workspace/dqs-example-app
[Pipeline] { (Clone repository)
Cloning repository https://github.com/EarlWaud/dqs-example-app.git
> git init /home/jenkins/agent/workspace/dqs-example-app # timeout=10
[Pipeline] { (Build image)
+ docker build -t jenkins-example-app .
Successfully built b228cd7c0013
Successfully tagged jenkins-example-app:latest
[Pipeline] { (Test image)
+ docker inspect -f . jenkins-example-app
+ npm test
> node test.js
Passed:1 Failed:0 Errors:0
[Pipeline] { (Push image)
+ docker tag jenkins-example-app ubuntu-node01:5000/jenkins-example-app:latest
+ docker push ubuntu-node01:5000/jenkins-example-app:latest
Finished: SUCCESS
```
现在剩下要做的就是庆祝我们的成功:
![](img/0d4fb92f-733c-4808-bc8a-904b799a8bd6.png)
说真的，这是创建自己的 Dockerized 应用以及使用 Jenkins 构建、测试和发布它们的一个很好的基础。将其视为一个可以重用和构建的模板。你现在已经准备好以任何你想要的方式利用 Docker 和 Jenkins。
# 摘要
好了，我们到了，这一章的最后。我希望你读这一章和我写这一章一样开心。我们有机会运用我们在前面章节中学到的许多技能。不仅如此，本章中还有一些非常有用的 Jenkins 课程。以至于你可以认真考虑跳过任何计划中的 Jenkins 培训或书籍阅读，因为你需要知道的关于使用 Jenkins 的几乎所有东西都在这里。
让我们回顾一下:首先，我们学习了如何设置独立的 Jenkins 服务器。我们很快过渡到部署 Jenkins 服务器作为 Docker 容器。这就是你读这本书的目的，对吗？然后我们学习了如何在 Dockerized Jenkins 服务器中构建 Docker 映像。接下来，我们找到了如何用超酷的 Docker 容器来替换无聊的 Jenkins 代理，这样就可以构建我们的 Docker 映像。你可能会想到这个和 Docker。你看过电影《盗梦空间》吗？好吧，你就这么过着。最后，为了总结这一章，我们创建了一个示例文档化的应用，以及构建、测试和发布该应用映像的 Jenkins 作业。这是一个示例，您可以将其用作将来创建的真实应用的模板和基础。
这是本书的结尾。我再说一遍……我希望你读它和我写它一样有趣。我希望你在阅读它时学到的和我在写作它时学到的一样多。在这些章节中，我们涵盖了大量的 Docker 信息。我们在[第 1 章](1.html)、*设置 Docker 化开发环境*中搞定了 Docker 工作站设置，不管你喜欢哪种操作系统。在[第 2 章](2.html)、*学习 Docker 命令*中，我们学习了关于 Docker 命令集的所有知识。在[第 3 章](3.html)、*创建 Docker 映像*中，我们深入研究了`Dockerfile`指令集，并了解了如何创建您可能想要构建的任何 Docker 映像。第四章*Docker 卷*，向我们展示了 Docker 卷的力量和用处。当我们在[第 5 章](5.html)、*DockerSwarm*中练习几乎神奇的 DockerSwarm 的特性时，我们开始使用前几章中的一些经验。然后，在[第 6 章](6.html)*Docker 网络*中，我们继续我们的 Docker 教育，这次学习 Docker 如何为我们简化了复杂的网络话题。而在[第七章](7.html)*Docker Stacks*中，我们在了解 Docker Stacks 的时候，看到了更多的 Docker 魔力和力量。最后，在[第 8 章](8.html)、 *Docker 和 Jenkins* 中，我们把我们所有的学习都用到 Docker 上，并和 Jenkins 一起利用 Docker 为我们创建现实世界的应用做准备。
剩下的就是让我说谢谢，并祝你在 Docker 的旅程中取得成功。