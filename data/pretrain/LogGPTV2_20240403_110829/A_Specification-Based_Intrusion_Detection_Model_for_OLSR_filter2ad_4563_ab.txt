### Potential Denial of Service and Routing Table Alteration

If an attacker node fails to include a legitimate MPR selector in an initiated TC message, it may potentially deny service to that MPR selector. The extent of this denial of service can be partial or total, depending on the network topology around the victim node. Similarly, if an attacker modifies the ANSN field or the MPR selector list in a forwarded TC message, it effectively alters how the routing table is established at other nodes in the network. This can not only affect the network service in the neighborhood of the victim node that originated the TC but may also result in cascading network effects due to altered routing decisions made by other nodes.

### Detection Challenges and Inconsistencies

The modifications described above follow the basic format specifications of OLSR messages, making them difficult to detect. However, they create inconsistencies with other OLSR control messages from other nodes. We refer to these conflicts as "inconsistencies." In the next section, we define constraints to be employed within the proposed intrusion detection model to identify these control message inconsistencies that lead to potential attacks.

## Intrusion Detection Model

### Overview

This section describes our specification-based approach to detecting attacks in OLSR. Specification-based detection identifies attacks by comparing the activity of an object with a model of correct behavior. This method has been applied to detect attacks on computer programs and network protocols. It is particularly suitable for detecting attacks on network protocols because the correct behavior of a protocol is well-defined and documented in the protocol specification. The challenge lies in extracting a suitable correct behavior model from the protocol specification that can be checked at runtime using network monitoring. We first list the assumptions employed and then present the correct behavior model of OLSR under these assumptions.

### Assumptions

We assume a distributed intrusion detection architecture that allows cooperative detectors to monitor all Hello and TC messages promiscuously and exchange their local data if necessary. IDS detectors in this architecture can monitor all Hello and TC messages sent by each node in the network, always exchange IDS data successfully, and will not be compromised.

Additionally, we assume that cryptographic protection, such as TESLA, is employed to guard against spoofing attacks. Furthermore, we assume that OLSR is the only routing protocol in the network and that each node has only one network interface. This means that Multiple Interface Declaration (MID) and Host and Network Association (HNA) messages are not used. Lastly, we assume that nodes forward TC messages following the OLSR Default Forwarding Algorithm and forward normal packets to the correct next hop. Our ongoing work, discussed in Section 6, aims to relax these assumptions.

### Correct Behavior Model of OLSR

Figure 2 shows the Finite State Automata (FSA) model of the OLSR protocol, which defines the correct operation of an OLSR node in handling control traffic. When a node receives a Hello control message, it updates its neighbor list and MPR set. Upon receiving a TC control message, the node updates the topology and routing table. If the node is an MPR node, it will forward the TC. Additionally, the node periodically broadcasts Hello and TC messages.

We describe the constraints on the control traffic between neighbor nodes for detecting inconsistencies within the control messages:

- **C1:** Neighbor lists in Hello messages must be reciprocal. For example, if node 2 is a neighbor of node 1, then node 1 must be a neighbor of node 2.
- **C2:** The MPR nodes of a node must reach all 2-hop neighbors of the node, and the MPR nodes must transmit TC messages periodically.
- **C3:** MPR selectors of a TC message must match the corresponding MPR sets of Hello messages. For example, if node 2 is node 1’s MPR selector, node 1 must be in node 2’s MPR set.
- **C4:** The fidelity of forwarded TC messages must be maintained.

**C1** ensures that 1-hop neighbor lists of Hello messages from all nodes are consistent, allowing nodes to produce correct 1-hop and 2-hop neighbor lists according to the OLSR routing specification.

**C2** ensures that MPR nodes of each node connect all 2-hop neighbors of the node, ensuring that MPR sets are correct.

**C3** ensures that MPR selector sets are consistent with MPR sets, thereby ensuring correctness.

**C4** ensures that the forwarded MPR selector sets are correct.

### Security Specification FSA

Figure 3 (an extension of the FSA in Figure 2) depicts the FSA used by the specification-based intrusion detection system. When an OLSR control message violates one of the constraints, the FSA moves from a normal state into one of the alarm states (Modified Hello State, Modified Init TC State, Modified Forward TC State). To recover from errors, a detector may broadcast the corrected TC message or force the node causing the violation to resend the corrected Hello message, thereby recovering corrupted routing tables of infected nodes. The "report violation" actions in the FSA can be enhanced to perform corrective actions. Since our proposed model focuses on intrusion detection, we do not explore recovery actions further in this paper. However, this preliminary recovery model is incorporated into our simulation experiments using GloMoSim, as described in Section 5.

### Temporary Inconsistency

Temporary violations of constraints C1, C2, and C3 may occur in a short period as links are created or removed when the topology changes. To avoid false alarms, a detector must wait for the two nodes on both sides of a link to learn the new link status before asserting the inconsistency as an attack. For example, if a new link between node A and node B is created, node A may update the status of link A-B and send a Hello message that is not consistent with the previous Hello message of node B, which does not claim that link A-B exists. The detector should wait for node B to receive the new Hello message from A and send a new Hello message that reflects the addition of link A-B. In case of broken links (leading to lost messages), the detector should wait for the expiration of the old records at the nodes. If a detector detects a violation of constraint 1, 2, or 3 with regard to nodes A and B, and the violation continues after a certain threshold, the detector will raise an alarm. Constraints C1 and C2 require 12 seconds, while C3 requires 15 seconds due to the 5-second TC interval time. For C4, temporary inconsistency does not occur because the validation of new messages depends on messages from the originators.

### Limitations

For a single attack or non-correlated attacks, the model can detect all attacks since it captures all possible ways to modify a single message at a time. However, if two or more attackers try to make a correlated lie, the constraints may not be able to detect it. For example, if two attackers are not neighbors but both claim they are, there may be no detectable violation. This is because Hello messages are 1-hop broadcast messages, and detectors do not know who actually receives them, making it impossible to employ constraint C1 to detect violations. This attack is a tunneling attack—attackers build a virtual link between them. We plan to address this issue by developing constraints to monitor forwarding behavior in MANETs, allowing detectors to identify some types of correlated attacks.

### Analysis of the OLSR Detection Model

In this section, we analyze the OLSR protocol and the proposed detection model to show that the set of constraints C1–C4 can identify attacks in MANETs. As illustrated in Section 2, a malicious node can disrupt the integrity of the network (causing good nodes to change their routing table to its advantage) by intentionally generating and forwarding incorrect control messages. Specifically, we show that in an OLSR network consisting of only one malicious node, these constraints ensure that the malicious node cannot compromise the integrity of the routing tables of all good nodes.