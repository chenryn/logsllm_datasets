OWASP Mobile Top 10 2016
M9 - Reverse Engineering - https://www.owasp.org/index.php/Mobile_Top_10_2016-M9-Reverse_Engineering
Tools
Angr - https://github.com/angr/angr
Cycript - http://www.cycript.org/
Frida - https://www.frida.re/
Frida CLI - https://www.frida.re/docs/frida-cli/
frida-ls-devices - https://www.frida.re/docs/frida-ls-devices/
frida-ps - https://www.frida.re/docs/frida-ps/
frida-trace - https://www.frida.re/docs/frida-trace/
Fridump - https://github.com/Nightbringer21/fridump
Objection - https://github.com/sensepost/objection
Passionfruit - https://github.com/chaitin/passionfruit
r2frida - https://github.com/nowsecure/r2frida
Radare2 - https://github.com/radare/radare2
Substrate - http://www.cydiasubstrate.com/
Xposed - https://www.xda-developers.com/xposed-framework-hub/
82
Tampering and Reverse Engineering
83
Testing User Education
Testing User Interaction
Testing User Education (MSTG-STORAGE-12)
A lot has happened lately in terms of responsibilities that developers have to educate users on what they need to
know. This has shifted especially with the introduction of the General Data Protection Regulation (GDPR) in Europe.
Ever since then, it is best to educate users on what is happening with their private data and why. Additionally, it is a
good practice to inform the user about how he can best use the application to ensure a secure processing of his
information. Both items will be dealt with here.
Please note that this is the MSTG project and not a legal handbook. Therefore, we will not cover the GDPR and
other possibly relevant laws here.
Informing users on their private information
When you need personal information from a user for your business process, the user needs to be informed on what
you do with the data and why you need it. If there is a third party doing the actual processing of the data, you should
inform the user about that too. Lastly, there are three processes you need to support:
The right to be forgotten: A user needs to be able to request the deletion of his data, and be explained how to
do so.
The right to correct data: The user should be able to correct his personal information at any time, and be
explained how to do so.
The right to access user data: The user should be able to request all information that the application has on
him, and the user should be explained how to request this information.
Most of this can be covered in a privacy policy, but make sure that it is understandable by the user.
When additional data needs to be processed, you should ask the user for consent again. During that consent request
it needs to be made clear how the user can revert from sharing the additional data. Similarly, when existing datasets
of a user need to be linked, you should ask the user's consent about it.
Informing the user on the best security practices
Here is a list of best practices where a user could be informed of:
Fingerprint usage: When an app uses a fingerprint for authentication and it provides access to high risk
transactions/information, inform the user about the issues there can be when having multiple fingerprints of other
people registered to the device as well.
Rooting/Jailbreaking: When an app detects a rooted or jailbroken device, inform the user of the fact that certain
high-risk actions will carry additional risk due to the jailbroken/rooted status of the device.
Specific credentials: When a user gets a recovery code, a password or a pin from the application (or sets one),
instruct the user to never share this with anyone else and that only the app will request it.
Application distribution: In case of a high-risk application it is recommended to communicate what the official
way of distributing the app is. Otherwise, users might use other channels in which they download a compromised
version of the application.
Other information you have to share (OSS information)
Given copyright laws, you must make sure you inform the user on any third party libraries that are used in the app. For
each third party library you should consult the license to see if certain information (such as copyright, modifications,
original author, ...) should be presented to the user. For this, it is best to request legal advice from a specialist. An
84
Testing User Education
example can be found at a blog post from Big Nerd Ranch. Additionally, the website TL;DR - Legal can help you in
figuring out what is necessary for each license.
References
OWASP MASVS
MSTG-STORAGE-12: "The app educates the user about the types of personally identifiable information
processed, as well as security best practices the user should follow in using the app."
Example for open source license mentioning
https://www.bignerdranch.com/blog/open-source-licenses-and-android/
Website to help with understanding licenses
https://tldrlegal.com/
85
Platform Overview
Android Platform Overview
This section introduces the Android platform from an architecture point of view. The following five key areas are
discussed:
1. Android security architecture
2. Android application structure
3. Inter-process Communication (IPC)
4. Android application publishing
5. Android application attack surface
Visit the official Android developer documentation website for more details about the Android platform.
Android Security Architecture
Android is a Linux-based open source platform developed by Google, which serves as a mobile operating system
(OS). Today the platform is the foundation for a wide variety of modern technology, such as mobile phones, tablets,
wearable tech, TVs, and other "smart" devices. Typical Android builds ship with a range of pre-installed ("stock") apps
and support installation of third-party apps through the Google Play store and other marketplaces.
Android's software stack is composed of several different layers. Each layer defines interfaces and offers specific
services.
86
Platform Overview
At the lowest level, Android is based on a variation of the Linux Kernel. On top of the kernel, the Hardware Abstraction
Layer (HAL) defines a standard interface for interacting with built-in hardware components. Several HAL
implementations are packaged into shared library modules that the Android system calls when required. This is the
basis for allowing applications to interact with the device's hardwareâ€”for example, it allows a stock phone application
to use a device's microphone and speaker.
Android apps are usually written in Java and compiled to Dalvik bytecode, which is somewhat different from the
traditional Java bytecode. Dalvik bytecode is created by first compiling the Java code to .class files, then converting
the JVM bytecode to the Dalvik .dex format with the dx tool.
87
Platform Overview
The current version of Android executes this bytecode on the Android runtime (ART). ART is the successor to
Android's original runtime, the Dalvik Virtual Machine. The key difference between Dalvik and ART is the way the
bytecode is executed.
In Dalvik, bytecode is translated into machine code at execution time, a process known as just-in-time (JIT)
compilation. JIT compilation adversely affects performance: the compilation must be performed every time the app is
executed. To improve performance, ART introduced ahead-of-time (AOT) compilation. As the name implies, apps are
precompiled before they are executed for the first time. This precompiled machine code is used for all subsequent
executions. AOT improves performance by a factor of two while reducing power consumption.
Android apps don't have direct access to hardware resources, and each app runs in its own sandbox. This allows
precise control over resources and apps: for instance, a crashing app doesn't affect other apps running on the device.
At the same time, the Android runtime controls the maximum number of system resources allocated to apps,
preventing any one app from monopolizing too many resources.
Android Users and Groups
Even though the Android operating system is based on Linux, it doesn't implement user accounts in the same way
other Unix-like systems do. In Android, the multi-user support of the Linux kernel to sandbox apps: with a few
exceptions, each app runs as though under a separate Linux user, effectively isolated from other apps and the rest of
the operating system.
The file system/core/include/private/android_filesystem_config.h includes a list of the predefined users and groups
system processes are assigned to. UIDs (userIDs) for other applications are added as the latter are installed. For
more details, check out Bin Chen's blog post on Android sandboxing.
For example, Android Nougat defines the following system users:
#define AID_ROOT 0 /* traditional unix root user */
#define AID_SYSTEM 1000 /* system server */
#...
#define AID_SHELL 2000 /* adb and debug shell user */
#...
#define AID_APP 10000 /* first app user */
...
88
Platform Overview
Android Device Encryption
Android supports device encryption from 2.3.4 version and it has undergone some big changes since then. Google
imposed that all devices running Android 6 or higher had to support storage encryption. Although some low-end
devices were exempt because it would significantly impact performance. In the following sections you can find
information about device encryption and its algorithms.
Full-Disk Encryption
Android 5.0 and above support full-disk encryption. This encryption uses a single key protected by the users' device
password to encrypt and decrypt the userdata partition. This kind of encryption is now considered deprecated and file-
based encryption should be used whenever possible. Full-disk encryption has drawbacks, such as not being able to
receive calls or not having operative alarms after a reboot if the user does not enter his password.
File-Based Encryption
Android 7.0 supports file-based encryption. File-based encryption allows different files to be encrypted with different
keys so they can be deciphered independently. Devices which support this type of encryption support Direct Boot as
well. Direct Boot enables the device to have access to features such as alarms or accessibility services even if the
user does not enter his password.
Adiantum
AES is used on most modern Android devices for storage encryption. Actually, AES has become such a widely used
algorithm that the most recent processor implementations have a dedicated set of instructions to provide hardware
accelerated encryption and decryption operations, such as ARMv8 with its Cryptography Extensions or x86 with AES-
NI extension. However, not all devices are capable of using AES for storage encryption in a timely fashion. Especially
low-end devices running Android Go. These devices usually use low-end processors, such as the ARM Cortex-A7
which don't have hardware accelerated AES.
Adiantum is a cipher construction designed by Paul Crowley and Eric Biggers at Google to fill the gap for that set of
devices which are not able to run AES at least at 50 MiB/s. Adiantum relies only on additions, rotations and XORs;
these operations are natively supported on all processors. Therefore, the low-end processors can encrypt 4 times
faster and decrypt 5 times faster than they would if they were using AES.
Adiantum is a composition of other ciphers:
NH: A hashing function.
Poly1305: A message authentication code (MAC).
XChaCha12: A stream cipher.
AES-256: A single invocation of AES.
Adiantum is a new cipher but it is secure, as long as ChaCha12 and AES-256 are considered secure. Its designers
didn't create any new cryptographic primitive, instead they relied on other well-known and thoroughly studied
primitives to create a new performant algorithm.
Adiantum is available for Android 9 and higher versions. It is natively supported in Linux kernel 5.0 and onwards, while
kernel 4.19, 4.14 & 4.9 need patching. Android does not provide an API to application developers to use Adiantum;
this cipher is to be taken into account and implemented by ROM developers or device vendors, which want to provide
full disk encryption without sacrificing performance on low-end devices. At the moment of writing there is no public
cryptographic library that implements this cipher to use it on Android applications. It should be noted that AES runs
faster on devices having the AES instruction set. In that case the use of Adiantum is highly discouraged.
Apps on Android
89
Platform Overview
Communication with the Operating System
Android apps interact with system services via the Android Framework, an abstraction layer that offers high-level Java
APIs. The majority of these services are invoked via normal Java method calls and are translated to IPC calls to
system services that are running in the background. Examples of system services include:
Connectivity (Wi-Fi, Bluetooth, NFC, etc.)
Files
Cameras
Geolocation (GPS)
Microphone
The framework also offers common security functions, such as cryptography.
The API specifications change with every new Android release. Critical bug fixes and security patches are usually
applied to earlier versions as well. The oldest Android version supported at the time of writing is 4.4 (KitKat), API level
19, and the current Android version is 7.1 (Nougat), API level 25.
Noteworthy API versions:
Android 4.2 (API Level 16) in November 2012 (introduction of SELinux)
Android 4.3 (API Level 18) in July 2013 (SELinux became enabled by default)
Android 4.4 (API Level 19) in October 2013 (several new APIs and ART introduced)
Android 5.0 (API Level 21) in November 2014 (ART used by default and many other features added)
Android 6.0 (API Level 23) in October 2015 (many new features and improvements, including granting; detailed
permissions setup at run time rather than all or nothing during installation)
Android 7.0 (API Level 24-25) in August 2016 (new JIT compiler on ART)
Android 8.0 (API Level 26-27) in August 2017 (A lot of security improvements)
Android 9 (API Level 28) in August 2018.
Linux UID/GID for Normal Applications
Android leverages Linux user management to isolate apps. This approach is different from user management usage in
traditional Linux environments, where multiple apps are often run by the same user. Android creates a unique UID for
each Android app and runs the app in a separate process. Consequently, each app can access its own resources
only. This protection is enforced by the Linux kernel.
Generally, apps are assigned UIDs in the range of 10000 and 99999. Android apps receive a user name based on
their UID. For example, the app with UID 10188 receives the user name u0_a188 . If the permissions an app
requested are granted, the corresponding group ID is added to the app's process. For example, the user ID of the app
below is 10188. It belongs to the group ID 3003 (inet). That group is related to android.permission.INTERNET
permission. The output of the id command is shown below.
$ id
uid=10188(u0_a188) gid=10188(u0_a188) groups=10188(u0_a188),3003(inet),
9997(everybody),50188(all_a188) context=u:r:untrusted_app:s0:c512,c768
The relationship between group IDs and permissions is defined in the file frameworks/base/data/etc/platform.xml
90
Platform Overview
The App Sandbox
Apps are executed in the Android Application Sandbox, which separates the app data and code execution from other
apps on the device. This separation adds a layer of security.
Installation of a new app creates a new directory named after the app package, which results in the following path:
/data/data/[package-name] . This directory holds the app's data. Linux directory permissions are set such that the
directory can be read from and written to only with the app's unique UID.
We can confirm this by looking at the file system permissions in the /data/data folder. For example, we can see that
Google Chrome and Calendar are assigned one directory each and run under different user accounts:
drwx------ 4 u0_a97 u0_a97 4096 2017-01-18 14:27 com.android.calendar
drwx------ 6 u0_a120 u0_a120 4096 2017-01-19 12:54 com.android.chrome
Developers who want their apps to share a common sandbox can sidestep sandboxing . When two apps are signed
with the same certificate and explicitly share the same user ID (having the sharedUserId in their AndroidManifest.xml
files), each can access the other's data directory. See the following example to achieve this in the NFC app:
Zygote
The process Zygote starts up during Android initialization. Zygote is a system service for launching apps. The Zygote
process is a "base" process that contains all the core libraries the app needs. Upon launch, Zygote opens the socket
/dev/socket/zygote and listens for connections from local clients. When it receives a connection, it forks a new
process, which then loads and executes the app-specific code.
App Lifeycle
In Android, the lifetime of an app process is controlled by the operating system. A new Linux process is created when
an app component is started and the same app doesnâ€™t yet have any other components running. Android may kill this
process when the latter is no longer necessary or when reclaiming memory is necessary to run more important apps.
91
Platform Overview
The decision to kill a process is primarily related to the state of the user's interaction with the process. In general,
processes can be in one of four states.
A foreground process (e.g., an activity running at the top of the screen or a running BroadcastReceive)
A visible process is a process that the user is aware of, so killing it would have a noticeable negative impact on
user experience. One example is running an activity that's visible to the user on-screen but not in the foreground.
A service process is a process hosting a service that has been started with the startService method. Though
these processes aren't directly visible to the user, they are generally things that the user cares about (such as
background network data upload or download), so the system will always keep such processes running unless
there's insufficient memory to retain all foreground and visible processes.
A cached process is a process that's not currently needed, so the system is free to kill it when memory is needed.
Apps must implement callback methods that react to a number of events; for example, the onCreate handler is
called when the app process is first created. Other callback methods include onLowMemory , onTrimMemory and
onConfigurationChanged .
App Bundles
Android applications can be shipped in two forms: the Android Package Kit (APK) file or an Android App Bundle
(.aab). Android App Bundles provide all the resources necessary for an app, but defer the generation of the APK and
its signing to Google Play. App Bundles are signed binaries which contain the code of the app in several modules.
The base module contains the core of the application. The base module can be extended with various modules which
contain new enrichments/functionalities for the app as further explained on the developer documentation for app
bundle. If you have an Android App Bundle, you can best use the bundletool command line tool from Google to build
unsigned APKs in order to use the existing tooling on the APK. You can create an APK from an AAB file by running
the following command:
$ bundletool build-apks --bundle=/MyApp/my_app.aab --output=/MyApp/my_app.apks
If you want to create signed APKs ready for deployment to a test-device, use:
$ bundletool build-apks --bundle=/MyApp/my_app.aab --output=/MyApp/my_app.apks
--ks=/MyApp/keystore.jks
--ks-pass=file:/MyApp/keystore.pwd
--ks-key-alias=MyKeyAlias
--key-pass=file:/MyApp/key.pwd
We recommend that you test both the APK with and without the additional modules, so that it becomes clear whether
the additional modules introduce and/or fix security issues for the base module.
Android Manifest
Every app has an Android Manifest file, which embeds content in binary XML format. The standard name of this file is