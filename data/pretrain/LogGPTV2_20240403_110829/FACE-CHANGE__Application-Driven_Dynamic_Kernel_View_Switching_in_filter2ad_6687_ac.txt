### Instructions and Recovery Mechanisms

For `do_sys_poll`, the return address (0xc021a526) is an even number, which does not cause any issues. Execution will return to the “0xf 0xb” opcode (UD2), triggering an invalid opcode trap. This allows us to recover `do_sys_poll` as normal, a process we refer to as "lazy recovery."

However, for `sys_poll`, the return address (0xc021a759) is an odd number, and the opcode starting at this address is “0xb 0xf.” This opcode will be misinterpreted by the processor and will not cause a trap. Our solution is to backtrack the stack during code recovery and recover any caller whose return-target opcode starts with “0xb 0xf” in the new kernel view. We call this "instant recovery." For example, when recovering the code for `pipe_poll`, we can instantly recover `sys_poll`.

### Backtrace and Opcode Analysis

- **Backtrace: 0xc021a526**
  - Opcodes: `0xf 0xb 0xf 0xb 0xf 0xb 0xf 0xb 0xf 0xb 0xf 0xb 0xf 0xb 0xf 0xb 0xf 0xb 0xf 0xb`
  - `0xf 0xb` can trap => Lazy recovery

- **Backtrace: 0xc021a759**
  - Opcodes: `0xb 0xf 0xb 0xf 0xb 0xf 0xb 0xf 0xb 0xf 0xb 0xf 0xb 0xf 0xb 0xf 0xb 0xf 0xb 0xf`
  - `0xb 0xf` cannot trap => Instant recovery

- **Backtrace: 0xc01033ec**
  - Opcodes: `0x89 0x44 0x24 0x18 0xfa 0x8d 0xb6 0x0 0x0 0x0`
  - `do_sys_poll`:
    - `c021a521: e8 4a f4 ff ff`
    - `c021a526: 89 85 8c fc ff ff`
  - `sys_poll`:
    - `c021a754: e8 97 fc ff ff`
    - `c021a759: 83 f8 fc`

### Cross-View Kernel Code Recovery

Figure 3 illustrates the cross-view kernel code recovery process. The opcode “0xb 0xf” will be misinterpreted by the processor and not cause a trap. During code recovery, we backtrack the stack and recover any caller whose return-target opcode starts with “0xb 0xf” in the new kernel view, enabling instant recovery.

### Dynamic Kernel View Management

FACE-CHANGE can dynamically load and unload customized kernel views at runtime, providing flexibility. When disabling a kernel view, FACE-CHANGE deallocates all memory pages for that view and switches the EPT back to a full kernel view without interrupting the running application. This allows for smooth adaptation to an altered environment by "hot-plugging" kernel views.

### Evaluation

#### Security Evaluation

1. **Kernel View Variation among Applications**:
   - We use the similarity index to measure the differences in kernel views among 12 well-known Linux applications from different categories.
   - Table I presents the profiling results as a square matrix. The main diagonal shows the size of the kernel view for each specific application.
   - The similarity index ranges from 33.6% for dissimilar applications to 86.5% for applications with common kernel requirements, confirming that applications from different categories have relatively low similarity indices.

2. **Attack Detection and Provenance**:
   - By reducing the kernel attack surface for each individual application, we can reveal malicious attack patterns whenever a process goes beyond the boundary of its kernel view.
   - FACE-CHANGE can detect anomalous execution based on an individual application’s kernel view, which is more effective than traditional system-wide kernel minimization techniques.
   - We evaluate the effectiveness of attack detection with 13 user-level malware and 3 kernel-level rootkits, highlighting four case studies in detail.

#### Case Study: Injectso

- **Injectso** is a hot-patching tool that modifies the behavior of a running process by injecting a dynamic shared object into its address space.
- The shellcode’s payload is a UDP server, and the target program is `top`.
- The kernel view for `top` does not contain the necessary kernel code to run a UDP server, triggering the kernel code recovery mechanism.
- From the kernel code recovery log, we can precisely identify the anomalous execution caused by Injectso in the `top` process.

### Example Code Snippet

```c
// create socket
sock = socket(AF_INET, SOCK_DGRAM, 0);

// bind to the specified port
server.sin_family = AF_INET;
server.sin_addr.s_addr = htonl(INADDR_ANY);
server.sin_port = htons(port); 
err = bind(sock, (struct sockaddr *) &server, sizeof(server));

// receive data loop
while (1) {   
    memset(buffer, 0, BUFF_LEN);
    // receive data
    err = recvfrom(sock, buffer, BUFF_LEN, 0, NULL, 0);
}
```

### Kernel Code Recovery Log

- **socket**: 0xc051c950
- **bind**: 0xc02f8900
- **recvfrom**: 0xc0324470, 0xc051c6a0, 0xc0522460, 0xc04ba450, 0xc05148c0, 0xc0514680, 0xc0512890, 0xc04ba3a0, 0xc04b86d0, 0xc04b8560, 0xc02f89a0, 0xc03243d0, 0xc04b9be0, 0xc0514b50, 0xc04c1d80, 0xc0168830

This detailed analysis and evaluation demonstrate the effectiveness and flexibility of our system in both security and performance aspects.