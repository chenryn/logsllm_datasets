*   Zabbix 共享页面:[https://share . Zabbix . com/virtual/docker-containers-monitoring](https://share.zabbix.com/virtualization/docker-containers-monitoring)
要安装、配置和运行代理和模块，我们需要执行以下步骤:
1.  安装 Zabbix 包存储库。
2.  安装 Zabbix 代理。
3.  安装模块的先决条件。
4.  将 Zabbix 代理用户添加到 Docker 组。
5.  下载自动发现 bash 脚本。
6.  下载预编译的`zabbix_module_docker`二进制。
7.  用我们的 Zabbix 服务器和 Docker 模块的详细信息配置 Zabbix 代理。
8.  为我们下载和创建的所有文件设置正确的权限。
9.  启动 Zabbix 代理。
虽然对于 CentOS 和 Ubuntu 来说步骤保持不变，但是进行初始软件包安装所采取的操作略有不同。在`/monitoring_docker/chapter04/`文件夹中，每个主机操作系统都有一个脚本，而不是显示安装和配置代理的命令。要查看脚本，请从终端运行以下命令:
```
cat /monitoring_docker/chapter04/install-agent-centos.sh
cat /monitoring_docker/chapter04/install-agent-ubuntu.sh
```
现在，您已经了解了运行脚本的时间，要执行此操作，请键入以下命令之一。如果您正在运行 CentOS，请运行以下命令:
```
bash /monitoring_docker/chapter04/install-agent-centos.sh
```
对于 Ubuntu，运行以下命令:
```
bash /monitoring_docker/chapter04/install-agent-ubuntu.sh
```
要验证一切是否按预期运行，请通过运行以下命令来检查 Zabbix 代理日志文件:
```
cat /var/log/zabbix/zabbix_agentd.log
```
您应该看到文件的结尾确认代理已经启动并且`zabbix_module_docker.so`模块已经加载:
![Preparing our host machine](img/00028.jpeg)
在我们进入 Zabbix 网络界面之前，让我们使用[第 2 章](2.html#K0RQ2-fcf7b4d102f841bba77b823d677470e0 "Chapter 2. Using the Built-in Tools")、*中的`docker-compose`文件，使用内置工具*启动几个容器:
```
[vagrant@docker ~]$ cd /monitoring_docker/chapter02/02-multiple/
[vagrant@docker 02-multiple]$ docker-compose up -d
[vagrant@docker 02-multiple]$ docker-compose scale web=3
[vagrant@docker 02-multiple]$ docker-compose ps
```
我们现在应该有三个运行的 web 服务器容器和一个在主机上运行的 Zabbix 代理。
## Zabbix 网络界面
一旦你安装了 Zabbix，你可以通过在你的浏览器中转到[http://zabbix.media-glass.es/](http://zabbix.media-glass.es/)来打开 Zabbix 网页界面，这个链接只有当你启动并运行了 Zabbix 游民箱时才会起作用，如果你没有运行它，页面将会超时。你应该会出现一个登录屏幕。在此输入默认用户名和密码，分别为`Admin`和`zabbix`(注意用户名有大写 *A* ，即可登录。
登录后，您需要添加主机模板。这些是预配置的环境设置，将添加一些关于 Zabbix 代理发送给服务器的统计信息的上下文，以及容器的自动发现。
要添加模板，进入顶部菜单的**配置**选项卡，选择**模板**；这将调出当前安装的所有模板列表。点击标题中的**导入**按钮，在你的主机上的`~/Documents/Projects/monitoring-docker/chapter04/template`文件夹中上传你能找到的两个模板文件的副本；上传模板时无需更改规则。
一旦两个模板都成功导入，就该添加我们的 Docker 主机了。再次进入**配置**选项卡，但这次选择**主机**。这里需要点击**创建主机**。然后，在**主机**标签中输入以下信息:
![The Zabbix web interface](img/00029.jpeg)
以下是上述信息的详细信息:
*   **主机名**:这是我们 Docker 主机的主机名
*   **可见名称**:在这里，名称服务器将显示为 Zabbix
*   **组**:您希望 Docker 主机属于 Zabbix 服务器中的哪个组
*   **代理接口**:这是我们 Docker 主机的 IP 地址或者 DNS 名称
*   **启用**:应勾选此项
在点击**上的添加**之前，您应该点击**模板**选项卡，并将以下两个模板链接到主机:
*   **模板应用 Docker**
*   **Linux 作业系统范本**
下面是主机的截图:
![The Zabbix web interface](img/00030.jpeg)
添加两个模板后，点击**添加**即可配置并启用主机。要验证主机添加是否正确，您应该进入**监控**选项卡，然后进入**最新数据**。点击**显示过滤器**，在**主机**框中输入主机。然后，您应该开始看到项目出现:
![The Zabbix web interface](img/00031.jpeg)
不要担心如果您没有立即看到 **Docker** 部分，默认情况下，Zabbix 将尝试每五分钟自动发现新容器。
# Docker 指标
对于每个容器，Zabbix 发现将被记录的以下度量:
*   容器(您的容器名称)正在运行
*   中央处理器系统时间
*   中央处理器用户时间
*   已用高速缓冲存储器
*   用过的 RSS 内存
*   已用交换
除了“已用交换”，这些都是 cAdvisor 记录的相同指标。
## 创建自定义图形
您可以访问由 Zabbix 收集的任何指标的基于时间的图表；您也可以创建自己的自定义图表。在下面的图表中，我创建了一个图表，绘制了我们在本章前面启动的三个 web 容器的所有 CPU 系统统计数据:
![Create custom graphs](img/00032.jpeg)
正如您所看到的，我使用 ApacheBench 执行了一些测试，以使图表更加有趣。
有关如何创建自定义图形的更多信息，请参见文档网站[的图形部分，网址为 https://www . zabbix . com/documentation/2.4/manual/config/visualization/graphics](https://www.zabbix.com/documentation/2.4/manual/config/visualisation/graphs)。
## 将容器与主机进行比较
当我们向主机添加 Linux 操作系统模板和 Docker 模板时，我们也记录了大量关于系统的信息，这里我们可以告诉您使用 ApacheBench 进行的测试对整体处理器负载的影响:
![Compare containers to your host machine](img/00033.jpeg)
我们可以进一步向下钻取整体利用率的信息:
![Compare containers to your host machine](img/00034.jpeg)
## 触发器
Zabbix 的另一个特性是触发器:您可以定义当一个指标满足某组标准时发生的动作。在下面的例子中，Zabbix 配置了一个名为**容器关闭**的触发器；此将监控项目的状态更改为**问题**，严重程度为**灾难**:
![Triggers](img/00035.jpeg)
状态的这种变化会触发一封电子邮件，通知由于某些原因，容器不再启动和运行:
![Triggers](img/00036.jpeg)
这也可能触发其他任务，如运行自定义脚本、通过 Jabber 发送即时消息，甚至触发第三方服务，如寻呼机任务([https://www.pagerduty.com](https://www.pagerduty.com))或 Slack([https://slack.com](https://slack.com))。
有关触发器、事件和通知的更多信息，请参见文档的以下章节:
*   [https://www . zabbix . com/documentation/2.4/manual/config/triggers](https://www.zabbix.com/documentation/2.4/manual/config/triggers)
*   [https://www . zabbix . com/documentation/2.4/manual/config/events](https://www.zabbix.com/documentation/2.4/manual/config/events)
*   [https://www . zabbix . com/documentation/2.4/manual/config/notifications](https://www.zabbix.com/documentation/2.4/manual/config/notifications)
# 总结
那么，这种传统的监控方法如何适应容器的生命周期呢？
回到宠物与牛的类比，乍一看，Zabbix 似乎更倾向于宠物:它的功能集最适合监控长时间静态的服务。这意味着同样的监控宠物的方法也可以应用于在你的容器中运行的长时间运行的过程。
Zabbix 也是监控混合环境的完美选择。也许您有几个数据库服务器没有作为容器运行，但是您有几个主机运行 Docker，并且您有需要监控的设备，例如交换机和 San。Zabbix 可以为您提供一个单一的窗格，向您显示所有环境的指标，并能够提醒您注意问题。
到目前为止，我们已经研究了使用由 Docker 和 LXC 提供的 API 和度量，但是我们可以使用的其他度量呢？在下一章中，我们将研究一个直接连接到主机内核的工具，以收集关于容器的信息。