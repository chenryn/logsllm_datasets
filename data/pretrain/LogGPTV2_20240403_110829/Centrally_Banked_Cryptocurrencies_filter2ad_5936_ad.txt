Fig. 3: Latency, in seconds, to perform the 2PC to validate a
payment for a transaction with freshly issued coins as inputs
(run 1), and transactions with two arbitrary previous transactions
as inputs (run 2).
Over a wide area network the latency increases (Figure 3b),
but under the conditions tested, the latency is still usually
well under a second for the full 2PC and all checks. We note
that no shortcuts were implemented: for each transaction, all
three mintettes for each input were contacted and expected to
respond in the ﬁrst phase, and all three mintettes responsible
for the new transaction were contacted and have to respond in
the second phase. In reality, only a majority need to respond
before concluding each phase, and this may reduce latency
further.
Figure 4 plots the throughput of the system as we increase
the number of mintettes from 2 to 30, under the load of 25
synthetic clients, each pushing 1000 transactions. As expected,
when fewer than three mintettes are available the throughput
is roughly ﬂat (fewer than 400 transactions per second), as
both phases of the 2PC need to contact all mintettes. Once
more than the minimum of three mintettes are available the
load is distributed across them: the ﬁrst phase need to access
at most six mintettes (three for each of the two transaction
inputs), and the second phase at most three mintettes. This
load per transaction is independent of the number of mintettes
and as a result the throughput scales linearly, as predicted
in Section V-D1. After the initial three mintettes, each new
mintette adds approximately 66 additional transactions per
second to the capacity of the system.
9
0.00.20.40.60.81.01.21.4Latency (sec)01000200030004000Number of transactionsPay (run 1)Pay (run 2)0.00.20.40.60.81.01.21.4Latency (sec)050100150200250300Number of transactionsPay (run 1)Pay (run 2)51015202530Number of Mintettes0500100015002000Transactions / secPay (run 1)Pay (run 2)higher-level block B(i−1)
(as described in Section VI-B), and
deﬁne otherblocks ← h1(cid:107) . . .(cid:107)hn for mset = (h1, . . . , hn).
Assuming the block b is produced in epochj, to check that b
is valid one then checks that
h = H(h(i−1)
bank (cid:107)h(m)
Sig.Verify(pkm, h, σ) = 1,
bank) ∈ DPKi for some σ(m)
(pkm, σ(m)
Sig.Verify(pkbank, (pkm, periodi), σ(m)
j−1(cid:107)otherblocks(cid:107)txset),
bank, and
1)
2)
3)
4)
bank
bank) = 1.
To form a lower-level block, a mintette uses the trans-
action set txset it has formed throughout
the epoch (as
described in Section V-B) and the hashes (h1, . . . , hn) that
it has received from other mintettes (as ferried through
the “bundle of evidence” described in Section V-C) and
creates mset ← (h1, . . . , hn), otherblocks ← h1(cid:107) . . .(cid:107)hn,
h ← H(h(i−1)
$←−
Sig.Sign(skm, h).
j−1(cid:107)otherblocks(cid:107)txset),
bank (cid:107)h(m)
and σ
B. Higher-level blocks
The higher-level block that marks the end of periodi looks
like B(i)
bank = (h, txset, σ, DPKi+1), where these ﬁrst three
values are similar to their counterparts in lower-level blocks
(i.e., a hash, a collection of transactions, and a signature), and
the set DPKi+1 contains pairs (pkm, σ(m)
bank); i.e., the public
keys of the mintettes authorized for periodi+1 and the bank’s
signatures on the keys.
To check that a block is valid, one checks that
1)
2)
3)
bank (cid:107)txset),
h = H(h(i−1)
Sig.Verify(pkbank, h, σ) = 1, and
Sig.Verify(pkbank, (pkm, periodi+1), σ(m)
all (pkm, σ(m)
bank) ∈ DPKi+1.
bank) = 1 for
To form a higher-level block, the bank must collate the
inputs it is given by the mintettes, which consist of the lower-
level blocks described above and the action logs described
in Section V-C. To create a consistent transaction set txset, a
vigilant bank might need to look through all of the transaction
sets it receives to detect double-spending, remove any conﬂict-
ing transactions, and identify the mintette(s) responsible for
including them. As this would require the bank to perform work
proportional to the number of transactions (and thus somewhat
obviate the reason for mintettes), we also consider an optimistic
approach in which the bank relies on the consensus protocol in
Section V and instead simply merges the individual transaction
sets to form txset. The bank then forms h ← H(h(i−1)
bank (cid:107)txset),
σ $←− Sig.Sign(pkbank, h), and creates the set of authorized
mintettes using a decision process we brieﬂy discuss below
and in Section VI-C.
1) Coin generation and fee allocation: In addition to this
basic structure, each higher-level block could also contain
within txset a special coin generation transaction and an
allocation of fees to the mintettes that earned them in the
previous period. Semantically, the coin generation could take on
the same structure as in Bitcoin; i.e., it could be a transaction
tx(∅ n−→ addrbank), where addrbank is an address owned by
the bank, and fees could be allocated using a transaction
f−→ addrm), where f represents the fees owed to
tx(addrbank
10
m. The interesting question is thus not how central banks can
allocate fees to mintettes, but how it decides which mintettes
have earned these fees. In fact, the provided action logs allow
the central bank to identify active and live mintettes and allocate
fees to them appropriately.
This mechanism (roughly) works as follows. The central
bank keeps a tally of the mintettes that were involved in
certifying the validity of input addresses; i.e., those that replied
in the ﬁrst phase of the consensus protocol. The choice to
reward input mintettes is deliberate: in addition to providing a
direct incentive for mintettes to respond in the ﬁrst phase of
the protocol, it also provides an indirect incentive for mintettes
to respond in the second phase, as only a transaction output
that is marked as unspent can later be used as an input (for
which the mintette can then earn fees). Thus, rewarding input
mintettes provides incentive to handle a transaction throughout
its lifetime.
The action logs also play a crucial role in fee allocation.
In particular, the “exposed inactivity” security property from
Section V-C prevents an inactive mintette from becoming active
at a later time and claiming that it contributed to previous
transactions, as an examination of the action logs can falsify
such claims. Additionally, if fee allocation is determined on
the basis of a known function of the action logs, anyone with
access to the action logs can audit the actions of the central
bank.
Finally, we mention that although the logs are sent only
to the central bank, the expectation is that the central bank
will publish these logs to allow anyone to audit the system, as
well as the bank’s operation. As we assume the central bank is
honest, this does not present a problem, but in a stronger threat
model in which less trust were placed in the central bank,
one might instead attempt to adopt a broadcast system for
distributing logs (with the caveat that this approach introduces
signiﬁcantly higher latency). In such a setting, anyone with
access to the logs could verify not only the actions of the
mintettes, but could also replay these actions to compare the
ledger agreed upon by the mintettes and the ledger published
by the bank; this would allow an auditor to ensure that the bank
was not engaging in misbehavior by, e.g., dropping transactions.
2) A simpliﬁed block structure: The above description of
higher-level blocks (and the previous description of lower-level
blocks) contains a number of additional values that do not exist
in the blocks of existing cryptocurrencies, making RSCoin
somewhat incompatible with their semantics. To demonstrate
that RSCoin can more strongly resemble these cryptocurrencies,
we brieﬂy describe a way of embedding these additional values
into the set of transactions.
Rather than include the set DPKi+1, the bank could instead
store some units of currency in a master address addrbank and
npk−−→ addr(i+1)
include in txseti a transaction tx(addrbank
bank ),
where addr(i+1)
is an address speciﬁc to periodi+1. The bank
bank
nm−−→
could then include in txseti a transaction tx(addr(i+1)
bank
pkm) for each mintette m authorized for periodi+1. Now, to
check the validity of a particular lower-level block, one could
check that such a transaction was included in the previous
higher-level block.
C. Incentivizing mintettes
One might naturally imagine that this structure, as currently
described, places the signiﬁcant burden on the central bank of
having to merge the distinct blocks from each mintette into a
consistent history. By providing appropriate incentives, however,
we can create an environment in which the presented ledger
is in fact consistent before the bank even sees it. If mintettes
deviate from the expected behavior then, as we described in
Section VI-B1, they can be held accountable and punished
accordingly (e.g., not chosen for future periods or not given
any fees they have earned).
Section VI-B1 describes one direct incentive for mintettes
to collect transactions, which is fees. As we described in Sec-
tion VI-B1, mintettes are rewarded only for active participation,
so that an authorized mintette needs to engage with the system
in order to earn fees. Section VI-B2 describes another direct
incentive, which is the authorization of mintettes by the central
bank. For semantic purposes, the value nm used to authorize
each mintette for the next period could be arbitrarily small. As
an incentive, however, this value could be larger to directly
compensate the mintettes for their services.
Finally, we expect that the central bank could be a national
or international entity that has existing relationships with, e.g.,
commercial banks. There thus already exist strong business
incentives and regulatory frameworks for such entities to act
as honest mintettes.
D. Setting system parameters
As described, the system is parameterized by a number of
variables, such as the length of epochs, the length of a period,
and the number of mintettes. The length of an epoch for an
individual mintette is entirely dependent on the rate at which it
processes transactions (as described in detail in Section V-C).
Mintettes that process more transactions will therefore have
shorter epochs than ones that do so less frequently. There is
no limit on how short an epoch can be, and the only upper
limit is that an epoch cannot last longer than a period.
It might seem desirable for periods to be as short as
possible, as ultimately a transaction is sealed into the ofﬁcial
ledger only at the end of a period. To ease the burden on the
bank, however, it is also desirable to have longer periods,
so that central banks have to intervene as infrequently as
possible (and, as we describe in Section VII-A, so that central
banks can potentially perform certain optimizations to reduce
transaction bloat). In Section V-B, we described methods by
which mintettes could “promise” (in an accountable way) to
users that their transactions would be included, so that in
practice near-instantaneous settlement can be achieved even
with longer periods, so long as one trusts the mintette quorum.
Nevertheless, we do not expect periods to last longer than a
day.
For the purposes of having a fair and competitive settlement
process, it is desirable to have as many mintettes as possible;
as we saw in Section V-D1, this is also desirable from a
performance perspective, as the performance of the RSCoin
system (measured in the rate of transactions processed) scales
linearly with the number of mintettes. Adding more mintettes,
however, also has the effect that they earn less in transaction
fees, so these opposing concerns must be taken into account
when settling on a concrete number (to give a very rough idea,
one number that has been suggested [2] is 200).
VII. OPTIMIZATIONS AND EXTENSIONS
In Sections V and VI, we presented a (relatively) minimal
version of RSCoin, which allows us to achieve the basic
integrity and scalability properties that are crucial for any
currency designed to be used on a global level. Here, we brieﬂy
sketch some extensions that could be adopted to strengthen
either of these properties, and leave a more detailed analysis
of these or other solutions as interesting future research.
A. Pruning intermediate transactions
At the end of a period, the central bank publishes a higher-
level block containing the collection of transactions that have
taken place in that time interval; it is only at this point that
transactions are ofﬁcially recorded in the ledger. Because
mintettes provide evidence on a shorter time scale that a user’s
transaction is valid and will be included in the ledger, however,
users might feel more comfortable moving currency multiple
times within a period than in traditional cryptocurrencies (in
which one must wait for one or several blocks to avoid possible
double-spending).
It therefore might be the case that at the end of a period, the
central bank sees not just individual transactions, but potentially
multiple “hops” or even whole “chains” of transactions. To limit
transaction bloat, the bank could thus prune these intermediate
transactions at the end of the period, so that ultimately only
the start and end points of the transaction appear in the ledger,
in a new transaction signed by the central bank.
On its surface, this idea may seem to require a signiﬁcant
amount of trust in the central bank, as it could now actively
modify the transaction history. The action logs, however, would
reveal the changes that the bank had made and allow users to
audit its behavior, but nevertheless the alterations that could
be made would need be signiﬁcantly restricted.
B. Further incentives for honest behavior
In addition to the existing incentives for honest behavior
outlined in Sections VI-B1 and VI-C, mintettes could adopt a
sort of proof-of-stake mechanism, in which they escrow some
units of currency with the central bank and are allowed to
collate only a set of transactions whose collective value does
not exceed the escrowed value. If any issue then arises with
the transactions produced by the mintette (e.g., it has accepted
double-spending transactions), the central bank can seize the
escrowed value and remove the double-spending transactions,
so the mintette ultimately pays for this misbehavior out of its
own pocket (and maybe even pays additional ﬁnes).
This mechanism as described is not fully robust (as in
particular the mintette might accept many expenditures of
the same unit of currency, not just two), but it does have
an interesting effect on the length of periods. In particular,
the length of earlier periods will necessarily be quite small,
as mintettes will not have much capital to post. As mintettes
accumulate stores of currency, however, periods can grow longer.
This is a fairly natural process, as it also allows for a trial
11
period in the beginning to ensure that authorized mintettes
don’t misbehave, and then for a more stable system as a set of
trustworthy mintettes emerges.
C. Multiple banks and foreign exchange
In a global setting, one might imagine that each central
bank could develop their own version of RSCoin; this would
lead, however, to a landscape much the same as today’s
Bitcoin and the many altcoins it has inspired,
in which
multiple implementations of a largely overlapping structure
lead to an infrastructure fragmentation: bugs are replicated
across codebases and compatibility across different altcoins is
artiﬁcially low.
An attractive approach is for different central banks to
instead use the same platform, to prevent this fragmentation
and to allow users to seamlessly store value in many different
currencies. While this allows the currencies generated by dif-
ferent central banks to achieve some notion of interoperability,
we still expect that different blockchains will be kept separate;
i.e., a particular central bank does not — and should not — have
to keep track of all transactions that are denominated in the
currency of another central bank. (Mintettes, however, may
choose to validate transactions for any number of central banks,
depending on their business interests.)
While every central bank does not necessarily need to be
aware of transactions denominated in the currency of another
central bank, this awareness may at times be desirable. For
example, if a user would like to exchange some units of
one currency into another belonging to a central bank that
is relatively known to and trusted by the ﬁrst (e.g., exchange
GBP for USD), then this should be a relatively easy process.
The traditional approach is to simply go to a third-party service
that holds units of both currencies, and then perform one
transaction to send units of the ﬁrst currency to the service,
which will show up in the ledger of the ﬁrst currency, and
another transaction to receive units of the second currency,
which will show up in the ledger of the second currency.
Although this is the approach by far most commonly
adopted in practice (both in ﬁat currency and cryptocurrency
markets), it has a number of limitations, ﬁrst and foremost of
which is that it is completely opaque: even an outside observer
who is able to observe both ledgers sees two transactions that
are not linked in any obvious way. One might naturally wonder,
then, if a more transparent mechansim is possible, in which the
currency exchange shows up as such in the ledger. We answer
this question in the afﬁrmative in the Appendix, in which we
demonstrate a form of fair exchange.