   PING app (172.25.0.7): 56 data bytes
   64 bytes from 172.25.0.7: seq=0 ttl=64 time=0.095 ms
   64 bytes from 172.25.0.7: seq=1 ttl=64 time=0.075 ms
   64 bytes from 172.25.0.7: seq=2 ttl=64 time=0.072 ms
   64 bytes from 172.25.0.7: seq=3 ttl=64 time=0.101 ms
   ...
   ```
   `app`别名现在解析为`container7` 的IP地址。
5. 最后一次测试，重新启动`container6` 。
   ```
   $ docker start container6
   ```
   在连接到`container4` 的终端，再次运行`ping` 命令。 现在可能会再次解决`container6` 。 如果您几次启动和停止`ping` ，您将看到每个容器的响应。
   ```
   $ docker attach container4
   $ ping app
   PING app (172.25.0.6): 56 data bytes
   64 bytes from 172.25.0.6: seq=0 ttl=64 time=0.070 ms
   64 bytes from 172.25.0.6: seq=1 ttl=64 time=0.080 ms
   64 bytes from 172.25.0.6: seq=2 ttl=64 time=0.080 ms
   64 bytes from 172.25.0.6: seq=3 ttl=64 time=0.097 ms
   ...
   ```
   用`CTRL+C` 停止ping。 从`container4` 离开，并使用`CTRL-p CTRL-q` 使其保持运行。
## 断开容器
您可以随时使用`docker network disconnect` 命令断开容器与网络的连接。
1. 从`isolated_nw` 网络断开`container2` ，然后检查`container2` 和`isolated_nw` 网络。
   ```
   $ docker network disconnect isolated_nw container2
   $ docker inspect --format=''  container2 | python -m json.tool
   {
       "bridge": {
           "NetworkID":"7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812",
           "EndpointID": "9e4575f7f61c0f9d69317b7a4b92eefc133347836dd83ef65deffa16b9985dc0",
           "Gateway": "172.17.0.1",
           "GlobalIPv6Address": "",
           "GlobalIPv6PrefixLen": 0,
           "IPAddress": "172.17.0.3",
           "IPPrefixLen": 16,
           "IPv6Gateway": "",
           "MacAddress": "02:42:ac:11:00:03"
       }
   }
   $ docker network inspect isolated_nw
   [
       {
           "Name": "isolated_nw",
           "Id": "06a62f1c73c4e3107c0f555b7a5f163309827bfbbf999840166065a8f35455a8",
           "Scope": "local",
           "Driver": "bridge",
           "IPAM": {
               "Driver": "default",
               "Config": [
                   {
                       "Subnet": "172.21.0.0/16",
                       "Gateway": "172.21.0.1/16"
                   }
               ]
           },
           "Containers": {
               "467a7863c3f0277ef8e661b38427737f28099b61fa55622d6c30fb288d88c551": {
                   "Name": "container3",
                   "EndpointID": "dffc7ec2915af58cc827d995e6ebdc897342be0420123277103c40ae35579103",
                   "MacAddress": "02:42:ac:19:03:03",
                   "IPv4Address": "172.25.3.3/16",
                   "IPv6Address": ""
               }
           },
           "Options": {}
       }
   ]
   ```
2. 当容器与网络断开连接时，它不能再与连接到该网络的其他容器进行通信，除非它与其他容器具有g共用他网络。 验证`container2` 不能再到达`isolated_nw` 上的`container3` 。
   ```
   $ docker attach container2
   / # ifconfig
   eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:03  
             inet addr:172.17.0.3  Bcast:0.0.0.0  Mask:255.255.0.0
             inet6 addr: fe80::42:acff:fe11:3/64 Scope:Link
             UP BROADCAST RUNNING MULTICAST  MTU:9001  Metric:1
             RX packets:8 errors:0 dropped:0 overruns:0 frame:0
             TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
             collisions:0 txqueuelen:0
             RX bytes:648 (648.0 B)  TX bytes:648 (648.0 B)
   lo        Link encap:Local Loopback  
             inet addr:127.0.0.1  Mask:255.0.0.0
             inet6 addr: ::1/128 Scope:Host
             UP LOOPBACK RUNNING  MTU:65536  Metric:1
             RX packets:0 errors:0 dropped:0 overruns:0 frame:0
             TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
             collisions:0 txqueuelen:0
             RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
   / # ping container3
   PING container3 (172.25.3.3): 56 data bytes
   ^C
   --- container3 ping statistics ---
   2 packets transmitted, 0 packets received, 100% packet loss
   ```
3. 验证`container2` 是否仍具有与默认`bridge`完全连接。
   ```
   / # ping container1
   PING container1 (172.17.0.2): 56 data bytes
   64 bytes from 172.17.0.2: seq=0 ttl=64 time=0.119 ms
   64 bytes from 172.17.0.2: seq=1 ttl=64 time=0.174 ms
   ^C
   --- container1 ping statistics ---
   2 packets transmitted, 2 packets received, 0% packet loss
   round-trip min/avg/max = 0.119/0.146/0.174 ms
   / #
   ```
4. 移除`container4` ， `container5` ， `container6`和`container7` 。
   ```
   $ docker stop container4 container5 container6 container7
   $ docker rm container4 container5 container6 container7
   ```
### 处理过时的网络端点
在某些情况下，例如在多主机网络中以非优雅的方式重新启动Docker daemon，Docker daemon将无法清除过时的连接端点。 如果新的容器连接到具有与过期端点相同的名称的网络，则此类过时的端点可能会导致错误：
   ```
ERROR: Cannot start container bc0b19c089978f7845633027aa3435624ca3d12dd4f4f764b61eac4c0610f32e: container already connected to network multihost
   ```
要清理这些过时的端点，可移除容器并强制将其与网络断开（ `docker network disconnect -f` ）。 这样，您就可将容器成功连接到网络。
```
$ docker run -d --name redis_db --network multihost redis
ERROR: Cannot start container bc0b19c089978f7845633027aa3435624ca3d12dd4f4f764b61eac4c0610f32e: container already connected to network multihost
$ docker rm -f redis_db
$ docker network disconnect -f multihost redis_db
$ docker run -d --name redis_db --network multihost redis
7d986da974aeea5e9f7aca7e510bdb216d58682faa83a9040c2f2adc0544795a
```
## 删除网络
当网络中的所有容器都已停止或断开连接时，您可以删除网络。 如果网络连接了端点，则会发生错误。
1. 断开`container3` 与`isolated_nw` 连接。
   ```
   $ docker network disconnect isolated_nw container3
   ```
2. 检查`isolated_nw` 以验证没有其他端点连接到它。
   ```
   $ docker network inspect isolated_nw
   [
       {
           "Name": "isolated_nw",
           "Id": "06a62f1c73c4e3107c0f555b7a5f163309827bfbbf999840166065a8f35455a8",
           "Scope": "local",
           "Driver": "bridge",
           "IPAM": {
               "Driver": "default",
               "Config": [
                   {
                       "Subnet": "172.21.0.0/16",
                       "Gateway": "172.21.0.1/16"
                   }
               ]
           },
           "Containers": {},
           "Options": {}
       }
   ]
   ```
3. 删除`isolated_nw` 网络。
   ```
   $ docker network rm isolated_nw
   ```
4. 列出所有网络以验证`isolated_nw `不再存在：
   ```
   $ docker network ls
   NETWORK ID          NAME                DRIVER              SCOPE
   4bb8c9bf4292        bridge              bridge              local
   43575911a2bd        host                host                local
   76b7dc932e03        local_alias         bridge              local
   b1a086897963        my-network          bridge              local
   3eb020e70bfd        none                null                local
   69568e6336d8        simple-network      bridge              local
   ```
## 相关信息
- [network create](https://docs.docker.com/engine/reference/commandline/network_create/)
- [network inspect](https://docs.docker.com/engine/reference/commandline/network_inspect/)
- [network connect](https://docs.docker.com/engine/reference/commandline/network_connect/)
- [network disconnect](https://docs.docker.com/engine/reference/commandline/network_disconnect/)
- [network ls](https://docs.docker.com/engine/reference/commandline/network_ls/)
- [network rm](https://docs.docker.com/engine/reference/commandline/network_rm/)
## 原文