(currently, more than one profi le is not supported). This profi le initialization occurs
in the same function as the App Store version. The AppleMobileFileIntegrity
extension is called to load the embedded profi le name. This name is used to
initialize the sandbox profi le just as the container was used previously.
To illustrate their use, this example attempts to create an application that
initializes its sandbox in each of these possible ways. One executable will be
placed in /tmp with no embedded entitlements, one executable will be placed
under the App Store directory, and one will have an embedded entitlement
specifying a built-in profi le.
cc0055..iinndddd 113344 44//1166//22001122 55::4444::2266 PPMM
Chapter 5 n Sandboxing 135
To trigger each of these paths, create a test executable to try reading a single
fi le under /private/var/tmp. This path is restricted by the App Store container
profi le. The source is given here:
#include 
#include 
int main(int argc, char *argv[]) {
FILE *f = fopen(“/private/var/tmp/can_you_see_me”, “r”);
if (f != NULL) {
char buff[80];
memset(buff, 0, 80);
fgets(buff, 80, f);
printf(“%s”, buff);
fclose(f);
} else {
perror(“fopen failed”);
}
return 0;
}
The fi rst test is to verify the operation outside the presence of any sandbox. You
can execute this from /tmp. The following transcript shows the expected output:
iFauxn:~ root# /tmp/sb5
This is /tmp/can_you_see_me
As expected, an unsandboxed application may read the fi le. To test the second
path through sbx_cred_label_update_execve, you copy the binary executed
earlier to a subdirectory under /private/var/mobile/Applications (such as /
private/var/mobile/Applications/DDDDDDDD-DDDD-DDDD-DDDD-DDDDDDDDDDDD/).
By executing it under this directory, the sandbox kernel extension will automati-
cally set the profi le for the process to the container built-in profi le. The following
code shows this and verifi es the container profi le further by looking at dmesg:
iFauxn:~ root# cp ~/ioshh/sb5 /private/var/mobile/Applications
/DDDDDDDD-DDDD-DDDD-DDDD-DDDDDDDDDDDD/
iFauxn:~ root# /private/var/mobile/Applications/DDDDDDDD-DDDD-DDDD-DDDD-
DDDDDDDDDDDD/sb5
fopen failed: Operation not permitted
iFauxn:~ root# dmesg | tail
...
bash[15427] Builtin profi le: container (sandbox)
bash[15427] Container: /private/var/mobile/Applications/DDDDDDDD-DDDD-DDDD-DDDD-
DDDDDDDDDDDD [69] (sandbox)
The dmesg output also verifi es the sandbox extension used (called a “Container”
when used by the App Store logic). The last thing to try is the platform application
cc0055..iinndddd 113355 44//1166//22001122 55::4444::2266 PPMM
136 Chapter 5 n Sandboxing
profi le via an embedded entitlement (the MobileSafari method). To do this, you
need to embed an entitlement plist during the code signing step:
pitfall:sb5 dion$ cat sb5.entitlements
seatbelt-profi les
container
pitfall:sb5 dion$ make sb5-ee
/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/gcc -arch armv6
-isysroot
/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.0.sdk sb5.c
-o sb5-ee
export
CODESIGN_ALLOCATE=
/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/codesign_
allocate
codesign -fs “dion” --entitlements sb5.entitlements sb5-ee
pitfall:sb5 dion$
The code sign tool signs the binary and places this signature in the LC_CODE_
SIGNATURE Mach-O load command. The format of the data in the LC_CODE_
SIGNATURE block is described in xnu-1699.24.8/bsd/kern/ubc_subr.c. The
embedded plist is placed into this block and is queried by the sandbox kernel
extension as explained previously. Once this binary is executed, the kernel
should initialize the profi le to container (in this case, no extension would be
set). The fi le shouldn’t be readable. Unfortunately, at least with redsn0w 0.9.9b7
patching an iPhone 4 running iOS 5.0, this example fails:
iFauxn:~ root# cp ~/ioshh/sb5-ee /tmp
iFauxn:~ root# /tmp/sb5-ee
This is /tmp/can_you_see_me
iFauxn:~ root# dmesg | grep Sandbox
Sandbox: ignoring builtin profi le for platform app:
/private/var/stash/Applications.D1YevH/MobileMail.app/MobileMail
Sandbox: ignoring builtin profi le for platform app:
/private/var/stash/Applications.D1YevH/MobileSafari.app/MobileSafari
Sandbox: ignoring builtin profi le for platform app: /private/var/tmp/sb5-ee
iFauxn:~ root#
In the dmesg output, you see that all platform applications are run outside their
sandboxes with that version of the jailbreak. Despite this, we’ve illustrated the
cc0055..iinndddd 113366 44//1166//22001122 55::4444::2277 PPMM
Chapter 5 n Sandboxing 137
correct path; the embedded entitlement would have been used. Before moving
on, you can fi gure out how the current jailbreak patches break platform applica-
tion sandboxing. The “Sandbox: ignoring builtin profile . . .” string is
easy to fi nd in the kernelcache and leads right to one of the patches. Figure 5.3
shows one of the patched basic blocks before (left) and after (right) the jailbreak
patch is applied.
Figure 5.3: redsn0w 0.9.9b7 cred_label_update_execve
This comparison shows the patched bytes, 01 23 01 23, used to force a debug
mode sysctl check and to ensure that the conditional always falls to the side
where the sandbox profi le is ignored for applications that aren’t under the App
Store directory. This kind of exception is important to keep in mind while work-
ing with a jailbroken phone for exploit or payload development.
Summary
The iOS sandbox intends to limit post-code-execution exploitation and malware
from the App Store by imposing limits on a process based on what permis-
sions it would normally need for operation. The App Store applications are
isolated using this feature, and more than 40 of the shipped platform applica-
tions (for example, MobileSafari and MobileMail) have custom profi les limiting
the operations available to them. The main component of the sandbox system
cc0055..iinndddd 113377 44//1166//22001122 55::4444::2277 PPMM
138 Chapter 5 n Sandboxing
is implemented through a kernel extension exposing a TrustedBSD policy. The
kernel extension places a process into a sandbox described by a Scheme script
written under a domain-specifi c language. This profi le is distilled into decision
tree fi ltering operations based on their attributes (for example vnode path, or
port number) terminating in a decision of allow or deny. The profi le may be
extended in a limited way at run time.
By now, you should be able to write a syscall fuzzer targeting the mac_
syscall(“Sandbox”, . . .) sub-syscalls. The kernel entry point for the sand-
box extension was given as a starting point for a manual audit. For an attacker
looking for a bypass, this chapter discussed the format and evaluation of a binary
profi le and the code that consumes it. It also discussed using the evaluation
function as a point of reference to map kernel operations to SBPL operations.
This is another path of interest for any attackers looking for a sandbox escape.
cc0055..iinndddd 113388 44//1166//22001122 55::4444::2277 PPMM
CHAPTER
6
Fuzzing iOS Applications
The fi rst step in the remote exploitation of a device is to fi nd a security vulnerability
in it. As you saw in the discussion of the iOS attack surface in the fi rst chapter,
an attacker has many potential ways to supply data to an iOS device. These
include some server-side threats such as mDNSresponder, the wireless and
Bluetooth stack, and to some extent, SMS messages. On the client side are many
programs including the web browser, mail client, audio/video player, and App
Store apps. The key is to fi nd an input to one of these programs that you can
use to change the behavior of the application.
This is where fuzzing comes in. Fuzzing is the process of dynamically testing
applications by repeatedly sending malformed data to the application being
tested. Most importantly, fuzzing allows you to discover many vulnerabilities
in iOS, sometimes with very little effort or even understanding of the underly-
ing programs being tested. In other words, it is the easiest way to fi nd iOS bugs.
In later chapters, you learn how to take these vulnerabilities and use them
to create exploits that can perform some unauthorized action on the devices
in question.
How Fuzzing Works
Fuzzing, also known as dynamic analysis, is the art and science of crafting
illegal inputs and supplying them to applications in the hope that the applica-
tion exhibits some security issue. Entire books have been written on the subject,
139
cc0066..iinndddd 113399 44//1166//22001122 55::4455::1199 PPMM
140 Chapter 6 n Fuzzing iOS Applications
including Fuzzing: Brute Force Discovery by Sutton, Greene, and Amini, (ISBN
978-0321446114) as well as Fuzzing for Software Security Testing and Quality Assurance
by Takanen, DeMott, and Miller, (ISBN 978-1596932142). Fuzzing is perhaps the
easiest way to fi nd bugs. In the past it has been used to fi nd numerous security-
related bugs in products as diverse as the Apache HTTP Server, the Microsoft
RPC interface, and of course, MobileSafari on iOS.
The basic idea behind fuzzing is to repeatedly send slightly malformed input
into a system. A well-designed and implemented application should be able to
handle any inputs provided to it. It should reject invalid inputs and wait for any
future data, if relevant. When it receives valid input, it should perform whatever
operations it is intended to perform. Under no circumstances should the pro-
gram crash and stop functioning as designed. Fuzzing tests this idea by sending
millions of inputs to the program to see if the program ever crashes (or performs
some other unacceptable action). By monitoring an application during fuzzing,
the tester can determine which inputs have caused faults in the application.
The typical kinds of bugs found with fuzzing include memory-corruption
types of vulnerabilities such as buffer overfl ows. For example, suppose the
programmer assumes that a particular piece of data, say a phone number, will
never exceed 32 bytes and thus prepares a buffer of that size for the data. If the
developer does not explicitly check the data (or limit the size of the copy into
this buffer), a problem could occur because data outside the intended buffer
may get corrupted. For this reason, fuzzing is often thought of as a technique
that tests the developer’s assumptions by submitting malformed data.
One of the great things about fuzzing is that it is very simple to set up a basic
fuzzing test environment and fi nd some real bugs, as you see shortly. You don’t
necessarily have to understand the program being tested (or have source code),
or the inputs you are fuzzing. In the simplest case, all you need is a program
and a valid input to it. You just need that and some time and CPU cycles to let
the fuzzing run. You also see later that, although it is possible to set up fuzzing
rather quickly, an understanding of the way the inputs are composed and an
understanding of how the underlying program functions will be necessary to
fuzz deeply into the program and fi nd the best bugs. After all, corporations (like
Apple) and other researchers are all fuzzing, and so sometimes it is necessary
to fuzz a little deeper to fi nd the best bugs.
Although fuzzing has many advantages, it does have some drawbacks. Some
bugs do not lend themselves to being found with fuzzing. Perhaps there is a
checksum on some fi eld that, when the input is modifi ed, causes the program
to reject the input. Maybe many bytes of the input are related, and changing
one of them is easily detectable and thus the program quickly rejects invalid
inputs. Likewise, if a bug is evident only when very precise conditions are met,
it is unlikely that fuzzing will fi nd this bug, at least in a reasonable period of
time. So, while certain types of protocols and inputs are harder to fuzz than
others, different types of applications are harder to fuzz as well. Programs can
sometimes mask memory corruption if they handle their own faults and are
cc0066..iinndddd 114400 44//1166//22001122 55::4455::1199 PPMM
Chapter 6 n Fuzzing iOS Applications 141
very robust. Programs can also be hard to monitor if they include heavy anti-
debugging such as Digital Rights Management software. For these reasons,
fuzzing is not always the best choice for vulnerability analysis. As you see
shortly, it works suffi ciently well for most iOS applications.
The Recipe for Fuzzing
A few steps are involved when fuzzing an application. The fi rst one is fi gur-
ing out exactly what application you want to fuzz. Next, you need to generate
the fuzzed inputs. After that, you need to fi nd a way to get these inputs to the
application. Finally, you need a way to monitor the application being tested for
any faults that might occur.
Identifying the application and the type of data to fuzz is probably the most
important step of the process, although one that involves a bit of luck. In Chapter
1, you learned about many of the ways data can be sent to an iOS device from an
attacker. You have a lot of options when choosing which application to fuzz. Even
once that decision is made, you have to decide exactly what types of inputs you
want to fuzz. For example, MobileSafari accepts many types of inputs. You may
choose to fuzz .mov fi les in MobileSafari or something even more exact, like Media
Header Atoms in .mov fi les in MobileSafari. A general rule of thumb is that the
more obscure the application and protocol, the better off you are likely to be. Also,
it helps to target applications that were written a long time ago (such as QuickTime)
and/or that have a history of security issues (yep, that’s you again QuickTime).
Mutation-Based (“Dumb”) Fuzzing
Once you know what you’d like to fuzz, you need to actually start coming up
with the fuzzed inputs, or test cases. You have basically two ways to do this.
One is called mutation-based fuzzing, or “dumb” fuzzing. This is the type of
fuzzing that takes just a few minutes to set up and get running, but normally
can’t fi nd deep hidden bugs. The way it works is simple. Take a valid input to
the application. This might be a fi le, like a .mov fi le, or some network inputs, like
an HTTP session, or even just a set of command-line arguments. Then begin
randomly making changes to this valid input. For example
GET /index.html HTTP/1.0
might be mutated to strings like
GEEEEEEEEEEEEEET /index.html HTTP/1.0
GET / / / / / / / / / / / / / / / //index.html HTTP/1.0
GET /index................................html HTTP/1.0
GET /index.htmllllllllllllllllllllllllllllllllllllllll HTTP/1.0
GET /index.html HTTP/1.00000000000000000
And so on.
cc0066..iinndddd 114411 44//1166//22001122 55::4455::1199 PPMM
142 Chapter 6 n Fuzzing iOS Applications
If the programmer made any incorrect assumptions about the size of one of
these fi elds, these inputs may trigger some kind of fault. To make these random
changes, you don’t necessarily have to know anything about the way the HTTP
protocol works, which is nice. However, as you may guess, most web servers
that perform any sanity checking on the data will quickly reject most of these
inputs. This leads to a subtle issue with regard to input generation. You have
to make changes to the valid inputs to fi nd bugs, but if you make your changes
too drastic, the inputs will be quickly rejected. You have to fi nd the sweet spot,
meaning you have to make enough changes to cause problems but not enough
to make the data too invalid. This chapter demonstrates mutation-based fuzz-
ing against MobileSafari.
Generation-Based (“Smart”) Fuzzing
Many researchers believe that the more protocol knowledge you can build
into your fuzzed inputs, the better chance you have at finding vulnerabilities.
This points to the other approach: constructing fuzzed inputs, generation-
based or “smart” fuzzing. Generation-based fuzzing does not start from a
particular valid input, but rather begins from the way the protocol specifica-
tion describes these types of inputs. So, for the previous example, instead of
starting for a specific request for a file called index.html on a web server,
this method starts from the RFC for HTTP (www.ietf.org/rfc/rfc2616
.txt). In section 5 of this document, it describes what an HTTP message
must look like:
HTTP-message = Request | Response ; HTTP/1.1 messages
It later defi nes what form a Request must take:
Request = Request-Line ; Section 5.1
*(( general-header ; Section 4.5
| request-header ; Section 5.3
| entity-header ) CRLF) ; Section 7.1
CRLF
[ message-body ] ; Section 4.3
Digging further, you see that Request-Line is specifi ed as follows:
Request-Line = Method SP Request-URI SP HTTP-Version CRLF
where Method is defi ned like this:
Method = “OPTIONS” ; Section 9.2
| “GET” ; Section 9.3
| “HEAD” ; Section 9.4
| “POST” ; Section 9.5
| “PUT” ; Section 9.6
cc0066..iinndddd 114422 44//1166//22001122 55::4455::1199 PPMM