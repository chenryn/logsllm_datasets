6.4 RC4加密
6.5 B85加密
参考代码: https://github.com/darkwyrm/b85
6.6 ⼋八卦加密
代码参考: https://github.com/Arks7/Go_Bypass
6.7 三重DES、RSA加密
偶然发现了了⼀一个专⻔门的GO的加解密项⽬目，很全⾯面。
项⽬目地址： https://github.com/wumansgy/goEncrypt
go语⾔言封装的各种对称加密和⾮非对称加密，可以直接使⽤用，包括3重DES，AES的CBC和CTR模
式，还有RSA⾮非对称加密。
我把源码打包放在了了这⾥里里
https://github.com/TideSec/GoBypassAV/tree/main/Encryption/goEncrypt
6.8 ShellcodeUtils
⼀一个专⻔门针对shellcode进⾏行行加解密的脚本，可以实现XOR、AES256、RC4的加解密。
https://github.com/TideSec/GoBypassAV/tree/main/Encryption/ShellcodeUtils
0x07 资源修改
资源修改主要是修改图标、增加签名之类的。
从⽹网上找到了了⼀一个Go语⾔言的伪造签名的代码，Go版和Python版的代码在这⾥里里
https://github.com/TideSec/GoBypassAV/tree/main/SignThief 。
其他资源修改之前的⽂文章也都有介绍**《68.远控免杀专题(68)-Mimikatz免杀实践(上)》**。
该案例例是对mimikatz可执⾏行行程序的免杀测试，我这直接摘过来了了。
需要⼏几个软件，VMProtect Ultimate 3.4.0加壳软件，下载链接:
https://pan.baidu.com/s/1VXaZgZ1YlVQW9P3B_ciChg  提取码: emnq
签名软件
https://raw.githubusercontent.com/TideSec/BypassAntiVirus/master/tools/mimikatz/
sigthief.py
资源替换软件
ResHacker： https://github.com/TideSec/BypassAntiVirus/blob/master/tools/mimikatz
/ResHacker.zip
先替换资源，使⽤用ResHacker打开mimikatz.exe，然后在图标⾥里里替换为360图标，version⾥里里⾯面⽂文字
⾃自⼰己随意更更改。
这⾥里里先介绍⼀一种⽐比较常⻅见的pe免杀⽅方法，就是替换资源+加壳+签名，有能⼒力力的还可以pe修改，⽽而且mimikatz是开源
安装vmp加壳软件后，使⽤用vmp进⾏行行加壳
使⽤用 sigthief.py 对上⼀一步⽣生成的exe⽂文件进⾏行行签名。sigthief的详细⽤用法可以参
考 https://github.com/secretsquirrel/SigThief 。
然后看看能不不能运⾏行行，360和⽕火绒都没问题。
VT平台上 mimikatz32_360.exe ⽂文件查杀率9/70，缺点就是vmp加壳后会变得⽐比较⼤大。
0x08 架构的影响
编译⽣生成的程序如果x86或x64架构不不同，那么对免杀的影响也很⼤大，整理理来说x64程序免杀更更好⼀一
些。
我以专题76中提到的 08-EarlyBird 为例例进⾏行行测试，正常x64免杀为7/70。
编译x86架构的程序，VT免杀为21/70，差的还是⽐比较⼤大的。
0x09 隐藏窗⼝口
常规的隐藏窗⼝口⼀一般都是使⽤用 -H=windowsgui 参数，但这样会增⼤大杀软查杀的概率。
我这提供两种隐藏窗⼝口的代码。
完整代码在这⾥里里 https://github.com/TideSec/GoBypassAV/tree/main/HideWindow
package main
import "github.com/gonutz/ide/w32"
func ShowConsoleAsync(commandShow uintptr) {
console := w32.GetConsoleWindow()
if console != 0 {
_, consoleProcID := w32.GetWindowThreadProcessId(console)
if w32.GetCurrentProcessId() == consoleProcID {
w32.ShowWindowAsync(console, commandShow)
}
}
}
func main() {
ShowConsoleAsync(w32.SW_HIDE)
}
另外⼀一种，相⽐比第⼀一种，⽣生成的⽂文件略略⼤大⼀一点。
package main
import "github.com/lxn/win"
func main(){
win.ShowWindow(win.GetConsoleWindow(), win.SW_HIDE)
}
0x10 ⼩小结
综上，做Go的免杀时，要注意下⾯面⼏几点。
1. API的选择⽐比较关键。 2. 选择合适的加密⽅方式来处理理shellcode 3. 尽量量⽣生成x64的shellcode，⽣生
成x64位程序 4. 编译时建议使⽤用 go build -ldflags="-s -w"
go build -ldflags="-s -w" ，也可以使⽤用 garble
garble  5. 加
壳的话可以使⽤用upx，其他如果有更更好的也可以使⽤用 6. 修改资源、加签名有⼀一定效果 7. 好的反沙
盒技巧还是很有效的 8. 隐藏窗⼝口不不要使⽤用 -H=windowsgui
-H=windowsgui 参数 9. 使⽤用分配虚假内存等⽅方式可绕
过部分杀软 10. 采⽤用正常功能进⾏行行混淆，可增强免杀效果，但⽂文件可能变⼤大很多
0x11 Go免杀实践
通过对Go免杀的研究，实现了了⼀一个在线免杀平，主要⽤用于杀软技术研究和样本分析。同时也⽅方便便
有免杀需求，但没时间和精⼒力力去研究免杀的⼩小伙伴。
潮影在线免杀平台：http://bypass.tidesec.com/
平台上使⽤用了了基于Go的7种API，并结合使⽤用了了上⾯面的shellcode加密、沙盒检测、⾏行行为混淆、随机
函数等⽅方式后，可实现VT平台查杀率3/70。⽽而在使⽤用了了shellcode分离后，⽬目前可实现VT平台0查
杀。
选择“URL加载”-“是”，⽣生成的TideAv_Go_XXXX_img.exe可以做到VT全免杀，⽀支持本地⽂文件加载
和⽹网络加载，图⽚片内置隐写的shellcode。
另外，⽬目前还添加了了两种基于Python的免杀⽅方式，⼀一种是基于RSA加密，⼀一种是基于pickle反序列列
化。使⽤用pyinstaller打包，经过⼀一些bypass处理理，⽬目前也可以接近VT平台0查杀。具体Python免杀
的实现后续⽂文章会介绍。
0x11 参考资料料
本⽂文内容参考节选⾃自以下资料料：
go-shellcode项⽬目： https://github.com/Ne0nd0g/go-shellcode
safe6Sec⼤大佬： https://github.com/safe6Sec/GolangBypassAV
GoBypass： https://github.com/afwu/GoBypass
AniYa免杀： https://github.com/piiperxyz/AniYa
Go加解密： https://github.com/wumansgy/goEncrypt