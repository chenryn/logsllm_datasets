### Ship Repair Functionality

- **Ship with Zero Health**: A ship with zero health cannot perform any actions.
- **Successful Repair Execution**:
  - The `RepairShip`'s `Engineering` value will be added to the `DamagedShip`'s health.
  - An event will be added to the `my_events` view for the player involved.
  - Any errors during this function will be reported through the player's `error_channel`.
- **Action Limitation**: Using this function counts as an action for the ship. The ship will not be able to perform another action until the game tic increases.

#### Parameters
- **Repair Ship ID**: Integer (ID of the ship performing the repair)
- **Damaged Ship ID**: Integer (ID of the ship being repaired)

#### Returns
- **Type**: Integer
- **Description**: Health regained by the ship

---

### Resource Conversion Functionality

- **Function**: `convert_resource(Current Resource Type, Amount to Convert)`
- **Purpose**: Converts fuel to currency or vice versa. The value of the fuel will fluctuate based on levels in the game.
- **Error Handling**: Any errors during this function will be reported through the player's `error_channel`.
- **Action Count**: This function does not count as an action and can be run as often as you like.

#### Parameters
- **Current Resource Type**: Character Varying (Either 'FUEL' or 'MONEY')
- **Amount to Convert**: Integer (The amount of the resource to convert)

#### Returns
- **Type**: Integer
- **Description**: Total resources acquired from the conversion

---

### Upgrade Functionality

- **Function**: `upgrade(Ship ID | Fleet ID, Product Code, Quantity)`
- **Purpose**: Upgrades fleets or ships. This does not count as a ship action.
- **Available Upgrades**: To see a list of available upgrades, run a `SELECT` on the `price_list` table and use the listed codes for the `Product Code` parameter.
- **Upgrade Limits**: There is a maximum number of upgrades that can be done to ships. Refer to the `public_variable` view for these limits.
- **Error Handling**: Any errors during this function will be reported through the player's `error_channel`.

#### Parameters
- **Ship ID | Fleet ID**: Integer (ID of the ship or fleet to upgrade)
- **Product Code**: Character Varying (Code from the `price_list` table)
- **Quantity**: Integer (Number of upgrades to purchase)

#### Returns
- **Type**: Boolean
- **Description**: Returns `TRUE` if the purchase was successful, and `FALSE` if there was a problem

---

### Utility Functions

#### Get Character Variable
- **Function**: `get_char_variable(Variable Name)`
- **Purpose**: Retrieves character varying values from the `public_variable` view.
- **Action Count**: This function does not count as an action and can be run as often as you like.

##### Parameters
- **Variable Name**: Character Varying (Name of the value to return from `public_variable`)

##### Returns
- **Type**: Character Varying
- **Description**: The matching character varying value from the `public_variable` view

#### Get Numeric Variable
- **Function**: `get_numeric_variable(Variable Name)`
- **Purpose**: Retrieves integer values from the `public_variable` view.
- **Action Count**: This function does not count as an action and can be run as often as you like.

##### Parameters
- **Variable Name**: Character Varying (Name of the value to return from `public_variable`)

##### Returns
- **Type**: Integer
- **Description**: The matching integer value from the `public_variable` view

#### Get Player ID
- **Function**: `get_player_id(Player Username)`
- **Purpose**: Performs a lookup of a user's player ID based on the username given.
- **Action Count**: This function does not count as an action and can be run as often as you like.

##### Parameters
- **Player Username**: Character Varying (Username of the player)

##### Returns
- **Type**: Integer
- **Description**: The player ID for the username supplied

#### Get Player Username
- **Function**: `get_player_username(Player ID)`
- **Purpose**: Performs a lookup of a player's username based on the Player ID given.
- **Action Count**: This function does not count as an action and can be run as often as you like.

##### Parameters
- **Player ID**: Integer (ID of the player)

##### Returns
- **Type**: Character Varying
- **Description**: The player username for the Player ID supplied

#### Get Player Error Channel
- **Function**: `get_player_error_channel(Player Username [DEFAULT SESSION_USER])`
- **Purpose**: Performs a lookup of a user's error channel based on the username given. This information is readily available from `my_players`, but this function makes the lookup easier.
- **Action Count**: This function does not count as an action and can be run as often as you like.

##### Parameters
- **Player Username**: Character Varying (Username of the player, defaults to `SESSION_USER`)

##### Returns
- **Type**: Character(10)
- **Description**: The error channel for the username supplied

#### Check If Planet Is in Range
- **Function**: `in_range_planet(Ship ID, Planet ID)`
- **Purpose**: Checks if a ship is within range of a specified planet. This is helpful to determine if a ship can mine a planet during the current tic.
- **Action Count**: This function does not count as an action and can be run as often as you like.

##### Parameters
- **Ship ID**: Integer (ID of the ship)
- **Planet ID**: Integer (ID of the planet)

##### Returns
- **Type**: Boolean
- **Description**: Returns `TRUE` if the planet is within range, and `FALSE` if it is not

#### Check If Ship Is in Range
- **Function**: `in_range_ship(Ship ID, Ship ID)`
- **Purpose**: Checks if a ship is within range of another specified ship. This is helpful to determine if a ship can attack or repair the other ship during the current tic.
- **Action Count**: This function does not count as an action and can be run as often as you like.

##### Parameters
- **Ship ID**: Integer (ID of the first ship)
- **Ship ID**: Integer (ID of the second ship)

##### Returns
- **Type**: Boolean
- **Description**: Returns `TRUE` if the ships are within range, and `FALSE` if they are not

#### Read Event
- **Function**: `read_event(Event ID)`
- **Purpose**: Converts the data within a row of the event table into a readable string of text.
- **Example**:
  - Consider the following entry in `my_events`:
    - `EventID: 171`
    - `Action: MINE_SUCCESS`
    - `player_id_1: 1`
    - `ship_id_1: 1`
    - `referencing_id: 1`
    - `descriptor_numeric: 1879`
    - `public: t`
  - `SELECT READ_EVENT(171) AS string_event;` will return: `(#1)cmdrâ€™s ship (#1)dog has successfully mined 1879 fuel from the planet (#1)Torono`

- **Action Count**: This function does not count as an action and can be run as often as you like.

##### Parameters
- **Event ID**: Integer (ID of the event)

##### Returns
- **Type**: Text
- **Description**: Returns the text based on the type of action being read and event details