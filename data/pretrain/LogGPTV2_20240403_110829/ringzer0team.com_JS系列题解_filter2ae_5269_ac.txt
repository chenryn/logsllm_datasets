        var a1 = Number.prototype.valueOf;
        var a2 = Number.prototype.toString;
        var a3 = Array.prototype.valueOf;
        var a4 = Array.prototype.toString;
        var a5 = Object.prototype.valueOf;
        var a6 = Object.prototype.toString;
        function f1() {
            return stack[ i++ % stack.length ].charCodeAt(0); 
        }
        function f2() {
            i += 3; return stack.pop();
        }
        function f3() {
            for (k in this) {
                if (this.hasOwnProperty(k)) {
                    i += stack.indexOf(this[k][0]);
                    stack.push(this[k]);
                }
            }
            return String.fromCharCode(new Number(stack[ i % stack.length ].charCodeAt(0)));
        }
        Number.prototype.valueOf = Number.prototype.toString = f1;
        Array.prototype.valueOf  = Array.prototype.toString  = f2;
        Object.prototype.valueOf = Object.prototype.toString = f3;
        var a  = (tmp[ [] ] * tmp[ [] ] * 1337 + tmp[ "" + { "wtf": password[1] } ]) / (tmp[ "" + { "wtf": password[0] } ] - tmp[ [] ]);
        // 确定第0位
        var b  = (tmp[ [] ] * tmp[ [] ] * 7331 + tmp[ "" + { "lol": "o" } ]) / (tmp[ "" + { "wtf": password[1] } ] - tmp[ [] ]);
        // 确定第1位
        var c  = (tmp[ [] ] * tmp[ [] ] * 1111 + tmp[ "" + { "wtf": password[3] } ]) / (tmp[ "" + { "lol": password[2] } ] - tmp[ [] ]);
        // 确定第2位
        var d  = (tmp[ [] ] * tmp[ [] ] * 3333 + tmp[ "" + { "wtf": "g" } ]) / (tmp[ "" + { "wtf": password[3] } ] - tmp[ [] ]);
        // 确定第3位
        var e  = (tmp[ [] ] * tmp[ [] ] * 7777 + tmp[ "" + { "wtf": "a" } ]) / (tmp[ "" + { "wtf": password[7] } ] - tmp[ [] ]);
        // 限制第7位
        var f  = (tmp[ [] ] * tmp[ [] ] * 2222 + tmp[ "" + { "wtf": password[7] } ]) / (tmp[ "" + { "lol": password[5] } ] - tmp[ [] ]);
        // 确定第7位，确定第5位
        var g  = (tmp[ [] ] * tmp[ [] ] * 6666 + tmp[ "" + { "lol": password[4] } ]) / (tmp[ "" + { "wtf": password[6] } ] - tmp[ [] ]);
        // 限制第4位，限制第6位
        var h  = (tmp[ [] ] * tmp[ [] ] * 1234 + tmp[ "" + { "wtf": "a" } ]) / (tmp[ "" + { "wtf": password[4] } ] - tmp[ [] ]);
        // 确定第4位，从而确定第6位
        var ii = (tmp[ [] ] * tmp[ [] ] * 2345 + tmp[ "" + { "wtf": "h" } ]) / (tmp[ "" + { "wtf": password[9] } ] - tmp[ [] ]);
        // 限制第9位
        var j  = (tmp[ [] ] * tmp[ [] ] * 3456 + tmp[ "" + { "wtf": password[9] } ]) / (tmp[ "" + { "lol": password[8] } ] - tmp[ [] ]);
        // 确定第8 9位
        var kk = (tmp[ [] ] * tmp[ [] ] * 4567 + tmp[ "" + { "lol": password[11] } ]) / (tmp[ "" + { "wtf": password[10] } ] - tmp[ [] ]);
        // 限制10 11位
        var l  = (tmp[ [] ] * tmp[ [] ] * 9999 + tmp[ "" + { "wtf": "o" } ]) / (tmp[ "" + { "wtf": password[11] } ] - tmp[ [] ]);
        // 确定11位，从而确定10位
        // 0 1 2 3 7 5 4 6 9 8 11 10
        Number.prototype.valueOf   = a1;
        Number.prototype.toString  = a2;
        Array.prototype.valueOf    = a3;
        Array.prototype.toString   = a4;
        Object.prototype.valueOf   = a5;
        Object.prototype.toString  = a6;
        if (a !== b) {
            return '0-a-b';
        } else if (b !== c) {
            return '1-b-c';
        } else if (c !== d) {
            return '2-c-d';
        } else if (d !== e) {
            return '3-d-e';
        } else if (e !== f) {
            return '4-e-f';
        } else if (f !== g) {
            return '5-f-g';
        } else if (g !== h) {
            return '6-g-h';
        } else if (h !== ii) {
            return '7-h-ii';
        } else if (ii !== j) {
            return '8-ii-j';
        } else if (j !== kk) {
            return '9-j-k';
        } else if (kk !== l) {
            return '10-kk-l';
        } else {
            console.log(password);
            return true;
        }
    }
    var flag = new Array(12);
    for (flag[0] = 32; result !== true && flag[0] :402:24)
        at :405:21
为了分析原因，我们先将原始代码再复制为另一段js片段，记为the_true_orgin，分析是否是原始代码有问题，并Ctrl+F8禁用断点，重新运行，发现报错不同。
    the_true_orgin:1 Uncaught ReferenceError: module is not defined
        at :1:26508
        at :1:27781
前一个提示的是`c8i.k4O`方法不存在，在代码格式化后的第402行，后一个的报错点则是第634行，显然原始代码中`c8i.k4O`方法是存在的，由此基本确定是对代码的改动导致的报错。  
跟踪查看`c8i`定义
    var c8i = (function B(t, n) {
            var E = ''
          , D = decodeURIComponent(/* 此处省略1k多密文字符 */);
        for (var o = 0, Z = 0; o ');
        // 此处省略两百多行代码
        }
    )(decodeURIComponent(/* 此处省略1W多个密文字符 */), "htq8Ure6eWWrIzyfUZbwXF60zbDctikoSyNkrYoSSTj1EE6O");
程序先定义`B`方法，然后将密文和密码传入`B`方法，而`c8i`获取到的是其运行后的返回值。  
持续跟进，可以发现代码里使用了大量的异常捕获来保证程序的继续运行。而`B`方法最终在199行有如下代码，决定了`c8i`的值。
    try {
        var x = 0
          , U = 23
          , l = [];
        l[x] = y[i[0]](Z7(y[i[1]] + i[2])) + i[2];
        var i7 = l[x][i[3]];
        for (var o = t[i[3]] - 1, Z = 0; o >= 0; o--,
        Z++) {
            if (Z === i7) {
                Z = 0;
                if (++x === U) {
                    x = 0;
                }
                if (l[i[3]] < U) {
                    l[x] = y[i[0]](l[x - 1], l[x - 1]) + i[2];
                }
                i7 = l[x][i[3]];
            }
            w = String[i[4]](t[i[5]](o) ^ l[x][i[5]](Z)) + w;
        }