# Static Detection of Malicious JavaScript-Bearing PDF Documents

**Authors:**
- Pavel Laskov, University of Tübingen, Sand 1, 72076 Tübingen, Germany, [Email](mailto:PI:EMAIL)
- Nedim Šrndić, University of Tübingen, Sand 1, 72076 Tübingen, Germany, [Email](mailto:PI:EMAIL)

## Abstract
Despite recent security improvements in Adobe’s PDF viewer, its underlying code base remains vulnerable to new exploits. The continuous emergence of rapidly evolving PDF malware underscores the need for novel protection methods beyond traditional signature-based scanners. This paper presents a technique for detecting JavaScript-bearing malicious PDF documents through static analysis of extracted JavaScript code. Compared to previous work, which primarily relies on dynamic analysis, our method incurs significantly lower run-time overhead and does not require special instrumentation. Due to its efficiency, we were able to evaluate it on an extremely large real-life dataset obtained from the VirusTotal malware upload portal. Our method has proven effective against both known and unknown malware and is suitable for large-scale batch processing.

**Categories and Subject Descriptors:**
- D.4.6 [Software]: Operating Systems—Security and Protection
- I.2.6 [Computing Methodologies]: Artificial Intelligence—Learning

**Keywords:**
- Malware detection, malicious JavaScript, PDF documents, machine learning

## 1. Introduction
Since the discovery of the first critical vulnerability in Adobe Reader in 2008, the Portable Document Format (PDF) has become one of the main attack vectors used by cybercriminals. In 2009, PDF-based attacks were the most frequently used remote exploitation technique, accounting for 49% of all such attacks. Two specific PDF-based vulnerabilities ranked second and fifth among all vulnerabilities discovered in 2009 [1]. Over 50 vulnerabilities were discovered in Adobe Reader between 2008 and 2010, leading to numerous security updates. The introduction of sandboxing technology in Adobe Reader X (version 10) has somewhat mitigated these issues, but the underlying code base remains vulnerable, with critical patches still being issued [2, 3].

Adobe Reader vulnerabilities can be categorized into three classes:
1. Bugs in the implementation of the Adobe JavaScript API, which significantly extends JavaScript functionality in the context of PDF documents.
2. Non-JavaScript features of Adobe Reader that typically require JavaScript for exploitation, such as the JBIG2 filter (e.g., CVE-2009-0658) and heap overflow (e.g., CVE-2009-1862).
3. Vulnerabilities that do not involve JavaScript, such as the flawed embedded TrueType font handling (CVE-2010-0195).

Unlike other modern exploitation techniques, PDF-based attacks have received limited attention in the research community. Previous work has mainly focused on dynamic analysis, such as the sandboxes JSand [7] and CWSandbox [26], which are adapted for analyzing malicious PDF documents. However, due to their heavy instrumentation and associated security risks, these approaches are limited to malware research systems. For end-user systems, early work on detecting potential exploits in PDF documents [13, 21] has gone largely unnoticed, and detection still relies on signatures provided by security vendors.

In this paper, we explore static analysis techniques for detecting JavaScript-based PDF exploits. Our goal is to develop efficient detection methods suitable for deployment on end-user systems and in networking infrastructure, such as email gateways and HTTP proxies. We present PJScan, a tool capable of reliably detecting PDF attacks with operational false positive rates in the promille range. The low computational overhead of PJScan makes it highly attractive for large-scale analysis of PDF data.

Conceptually, PJScan is related to static analysis techniques for detecting browser-based JavaScript attacks. Similar to the recent work of Rieck et al. [19], our methodology is based on lexical analysis of JavaScript code and uses machine learning to automatically construct models from available data for subsequent classification of new data. A key difference is that reliable ground truth information is scarce for PDF documents, making it challenging to identify benign JavaScript-bearing PDFs. Therefore, PJScan resorts to anomaly detection to learn only from malicious examples.

Reliable extraction of JavaScript code from PDF documents is a major challenge. PDF is complex and rich with features that can be used to hide JavaScript code, such as compression and various encodings. These features are often exploited by attackers to evade signature-based detection. In the preprocessing component of PJScan, we developed an interface to the popular PDF rendering library Poppler, enabling our system to handle all known locations of JavaScript in PDF documents.

We evaluated PJScan on a large real-world dataset comprising three months of data uploaded to the VirusTotal malware analysis portal. This is the first study of malicious PDF documents at such a scale. Our results confirm that there still exist malicious PDF documents not recognized by any antivirus system, although the share of novel malicious PDFs is no longer significant (52 such documents among more than 40,000 classified as benign by VirusTotal). In our experiments, PJScan achieved average detection rates of 85% for known and 71% for previously unknown PDF attacks, with an average operational false positive rate of about 0.37%.

### 1.1 Contributions
This paper provides the following contributions:
1. **Robust Extraction of JavaScript from PDF Documents:** We provide a detailed account of the mechanisms for embedding JavaScript content in PDF documents and present a methodology for reliable extraction using the open-source PDF parser Poppler.
2. **Fully Static Detection of Malicious JavaScript:** We describe a method for discriminating between malicious and benign JavaScript instances based on lexical analysis and anomaly detection. Unlike previous work, our method does not require manual labeling of data, which is especially important for PDF documents where verifying benign status is difficult.
3. **High Performance:** The key advantage of static analysis is its high processing speed. PJScan processes each file in less than 50ms on average.
4. **Comprehensive Evaluation:** We present the results of a large-scale evaluation of malicious PDF detection on a real-world dataset comprising over 65,000 PDF documents. PJScan detected 85% of known malicious PDFs compared to all 42 antivirus scanners deployed by VirusTotal and 71% of previously unknown malicious PDFs, with a promille-range false positive rate.

### 1.2 Paper Organization
The rest of this article is organized as follows:
- **Section 2:** Summarizes the main features of PDF and its mechanisms for embedding JavaScript.
- **Section 3:** Presents the architecture of PJScan and the methodology used in its specific components.
- **Section 4:** Analyzes the data corpus and its statistical features at different representational levels.
- **Section 5:** Presents our experimental evaluation.
- **Section 6:** Discusses related work.
- **Section 7:** Outlines the limitations of our methods and potential improvements.

## 2. PDF and JavaScript
Before delving into the technical details, we briefly summarize the main features of the Portable Document Format (PDF) and its mechanisms for embedding JavaScript. A significant portion of the following section is based on the PDF Reference [15].

### 2.1 PDF Essentials
A PDF file consists of four elements:
1. **Header:** Contains the characters `%PDF-` followed by the version number of the PDF standard (e.g., `1.1`).
2. **Body:** Contains PDF objects with the actual content of the document.
3. **Cross-Reference Table:** Lists indirectly referenced objects and their location in the file.
4. **Trailer:** Contains the location of the cross-reference table and some objects in the file body.

The parsing of a PDF file begins with checking the version number and looking at the file trailer for information about the location of the cross-reference table and some special objects in the file body.

The PDF standard defines eight basic types of objects:
1. **Boolean Objects:** Take values `true` and `false`.
2. **Integer and Real Numbers.**
3. **Strings:** May be stored as a sequence of literal characters enclosed in parentheses `(` and `)` or as a sequence of hexadecimal numbers enclosed in angle brackets `<` and `>`.
4. **Names:** Sequences of 8-bit characters used as identifiers.
5. **Arrays:** Sequences of PDF objects, potentially of different types; arrays can be nested.
6. **Dictionaries:** Collections of key-value pairs with keys being names and values being of any PDF object type. Dictionaries are used to describe complex objects such as pages or actions.
7. **Streams:** Dictionary objects followed by a sequence of bytes between the words `stream` and `endstream`. Streams can be used to represent large objects, such as images, in a compact way. The content may be stored in an encoded or compressed form. A special type of stream is the object stream, containing arbitrary PDF objects.
8. **Null Object:** Denoted by the keyword `null`.

The body of a PDF document is built as a hierarchy of these basic types of objects linked together to describe pages, multimedia, outlines, annotations, etc. The central role in the hierarchy belongs to the Catalog dictionary, pointed to by the `/Root` entry of the cross-reference table. It serves as the root of a tree-like structure describing the document content.

Objects can be assigned a unique identifier consisting of an object number and a generation number. Objects with a unique identifier can be referenced from other objects using an indirect reference written as a sequence of the object number, the generation number, and the capital letter `R`. For example, `23 0 R` refers to an object with the object number 23 and the generation number 0. PDF allows encryption of the contents of strings and streams.

### 2.2 JavaScript in PDF
PDF provides several mechanisms for including JavaScript code, which is essential for interactive features such as forms, dynamic content, and 3D rendering. Some usage scenarios cannot be realized without JavaScript.

The main indicator for JavaScript code is the presence of the keyword `/JS` in some dictionary. The JavaScript source is supplied directly as one of the two possible string types (literal or hexadecimal) or stored in another object pointed to by an indirect reference. In the latter case, it is usually stored in a compressed or encrypted form in a stream attached to that object. Examples of typical syntax for embedding JavaScript code are shown in Figure 1.

A simple search for `/JS` patterns in PDF files, as implemented in some tools like PDFID, is insufficient for identifying JavaScript locations. It can be easily evaded by placing objects containing dictionaries with the keyword `/JS` into object streams. Due to stream compression, the keyword `/JS` is not visible in plain text. Such a search may also yield multiple references to identical code if different revisions of the same content are present.

To reliably extract JavaScript code, documents must be processed at the semantic level, considering the potential uses of JavaScript in the context of other objects in the document. Generally, the use of JavaScript code in PDF documents is bound to action dictionaries. Such dictionaries may be tagged by a keyword/value pair `/Type/Action`, but this explicit qualification is optional. A mandatory feature of all action dictionaries is the keyword `/S`, which can take on 18 different name values. Two of these values, `/JavaScript` and `/Rendition`, are important for the search for JavaScript code. The former must, and the latter may have a keyword `/JS` [15], as shown in Figure 1. The content associated with the keyword `/JS` must use the PDFDocEncoding or the UTF-16BE Unicode encoding. In this article, we denote JavaScript source code located in or referred to by one JavaScript or Rendition action dictionary as a JavaScript entity.

JavaScript or Rendition action dictionaries can be found at the following locations in the PDF object hierarchy:
- **Catalog Dictionary's `/AA` Entry:** Defines an additional action specified by a JavaScript action dictionary.
- **Catalog Dictionary's `/OpenAction` Entry:** Defines an action to be run when the document is opened.
- **Document's Name Tree:** May contain an entry `JavaScript` that maps name strings to document-level JavaScript action dictionaries executed when the document is opened.
- **Document's Outline Hierarchy:** Referenced by the `Outlines` entry of the Catalog dictionary, may contain references to JavaScript action dictionaries.
- **Pages, File Attachments, and Forms:** May also contain references to JavaScript action dictionaries.

Besides being directly embedded in a PDF file, JavaScript code may reside in a different file on a local machine or be retrieved from a remote location using the directives `/URI` or `/GoTo`. JavaScript also supports dynamic code execution using the `eval()` function or its equivalent, `setTimeout()`. Such mechanisms are challenging for static analysis but are launched from an existing entry point code inside a document.

## 3. System Architecture
The architecture of our PDF scanner, PJScan, is shown in Figure 2. Conceptually, our system consists of two main components: feature extraction and learning.

### 3.1 Feature Extraction Component
The feature extraction component searches for and extracts JavaScript code from PDF documents. It uses an interface to the Poppler PDF rendering library to handle all known locations of JavaScript in PDF documents.

### 3.2 Learning Component
The learning component uses machine learning to classify the extracted JavaScript code as either malicious or benign. It employs lexical analysis and anomaly detection to automatically construct models from available data for subsequent classification of new data.

### 3.3 System Workflow
1. **Preprocessing:** The PDF document is parsed, and JavaScript code is extracted using the Poppler library.
2. **Feature Extraction:** Relevant features of the extracted JavaScript code are identified and extracted.
3. **Model Training:** Machine learning models are trained using the extracted features and labeled data.
4. **Classification:** New PDF documents are classified as malicious or benign based on the trained models.

### 3.4 Implementation Details
- **Poppler Library:** Version 0.14.3 was used in our implementation.
- **PJScan Source Code:** Available at [http://sf.net/p/{pjscan|libpdfjs}](http://sf.net/p/{pjscan|libpdfjs}).

## 4. Data Corpus and Statistical Analysis
We present the data corpus and analyze its statistical features at different representational levels. The dataset comprises over 65,000 PDF documents uploaded to the VirusTotal malware analysis portal over three months.

### 4.1 Dataset Overview
- **Size:** Over 65,000 PDF documents.
- **Source:** VirusTotal malware analysis portal.
- **Time Frame:** Three months of data.

### 4.2 Statistical Features
- **Distribution of Malicious and Benign Documents:**
  - **Malicious Documents:** 40,000+ (including 52 novel malicious PDFs).
  - **Benign Documents:** 25,000+.
- **JavaScript Content:**
  - **Presence of JavaScript:** Approximately 70% of the documents contain JavaScript.
  - **Compression and Encoding:** Commonly used to obfuscate JavaScript code.

### 4.3 Representational Levels
- **Syntactic Level:** Analysis of the structure and syntax of the JavaScript code.
- **Semantic Level:** Analysis of the functional and behavioral aspects of the JavaScript code.

## 5. Experimental Evaluation
We evaluated the effectiveness of PJScan on the large real-world dataset. Our results show that PJScan achieved high detection rates and low false positive rates.

### 5.1 Detection Rates
- **Known Malicious PDFs:** 85% detection rate.
- **Previously Unknown Malicious PDFs:** 71% detection rate.

### 5.2 False Positive Rates
- **Average Operational False Positive Rate:** 0.37%.

### 5.3 Performance
- **Processing Time:** Less than 50ms per file on average.

## 6. Related Work
Previous work in the field has primarily focused on dynamic analysis techniques, such as the sandboxes JSand [7] and CWSandbox [26]. These approaches, while effective, incur significant overhead and are limited to malware research systems. Wepawet [9] is a dynamic analysis tool that, while perfect in terms of false positives and good at detecting novel PDF attacks, performs poorly on known PDF attacks (63.6% detection accuracy). PJScan, on the other hand, offers a fully static approach with high performance and low false positive rates.

## 7. Limitations and Future Work
While PJScan has shown promising results, there are several limitations and areas for improvement:
- **Dynamic Code Execution:** Handling dynamic code execution (e.g., `eval()`) remains a challenge.
- **Obfuscation Techniques:** Advanced obfuscation techniques may still evade detection.
- **Continuous Learning:** The system could benefit from continuous learning and updating of models to adapt to new threats.

Future work will focus on addressing these limitations and further enhancing the detection capabilities of PJScan.

## References
- [1] Reference 1
- [2] Reference 2
- [3] Reference 3
- [7] Reference 7
- [9] Reference 9
- [13] Reference 13
- [15] PDF Reference
- [21] Reference 21
- [26] Reference 26
- [27] Reference 27