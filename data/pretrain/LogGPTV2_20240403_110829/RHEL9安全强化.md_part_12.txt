  问题     高级入侵检测环境(AIDE)                                                                      完整性测量架构 (IMA)
  -------- ------------------------------------------------------------------------------------------- ----------------------------------------------------------------------------------
  什么     AIDE 是一个在系统上创建文件和目录数据库的工具。此数据库用于检查文件完整性及检测入侵检测。   IMA 通过检查与之前存储的扩展属性相比的文件度量（哈希值）来检查文件是否被修改了。
  如何     AIDE 使用规则来比较文件和目录的完整性状态。                                                 IMA 使用文件哈希值来检测入侵。
  为什么   检测 - AIDE 通过验证规则来检测文件是否被修改。                                              检测和防止 - IMA 通过替换文件的扩展属性来检测和防止攻击。
  使用     当文件或目录被修改了，AIDE 会检测到威胁。                                                   当有人试图更改整个文件时，IMA 会检测到威胁。
  扩展     AIDE 检查本地系统上文件和目录的完整性。                                                     IMA 确保本地和远程系统的安全性。
:::
:::
:::
::: section
::: titlepage
# []{#checking-integrity-with-aide_security-hardening.html#related-information-checking-integrity-with-aide}其他资源 {.title}
:::
::: itemizedlist
-   `aide(1)`{.literal} 手册页
-   [内核完整性子系统](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_monitoring_and_updating_the_kernel/enhancing-security-with-the-kernel-integrity-subsystem_managing-monitoring-and-updating-the-kernel){.link}
:::
:::
:::
[]{#encrypting-block-devices-using-luks_security-hardening.html}
::: chapter
::: titlepage
# []{#encrypting-block-devices-using-luks_security-hardening.html#encrypting-block-devices-using-luks_security-hardening}第 9 章 使用 LUKS 加密块设备 {.title}
:::
磁盘加密通过加密来保护块设备中的数据。要访问设备的解密内容，用户必须提供密语或密钥来作为身份验证。这对于移动计算机和可移动介质而言尤为重要：即使已从系统上物理移除，它也有助于保护设备的内容。LUKS
格式是 RHEL 中块设备加密的默认实现。
::: section
::: titlepage
# []{#encrypting-block-devices-using-luks_security-hardening.html#luks-disk-encryption_encrypting-block-devices-using-luks}LUKS 磁盘加密 {.title}
:::
Linux Unified Key
Setup-disk-format(LUKS)允许您加密块设备，并提供了一组简化管理加密设备的工具。LUKS
允许多个用户密钥解密主密钥，用于分区的批量加密。
RHEL 使用 LUKS
执行块设备加密。默认情况下，在安装过程中不选中加密块设备的选项。如果您选择加密磁盘的选项，则系统会在每次引导计算机时都提示您输入密码短语。这个密码短语将["[解锁]{.quote}"]{.quote}用于加密您的分区所使用的加密密钥。如果您选择修改默认的分区表，可以选择加密哪个分区。这是在分区表设置中设定的。
::: itemizedlist
**LUKS 做什么**
-   LUKS
    对整个块设备进行加密，因此非常适合保护移动设备的内容，如可移动存储介质或笔记本电脑磁盘驱动器。
-   加密块设备的底层内容是任意的，这有助于加密交换设备。对于将特殊格式化块设备用于数据存储的某些数据库，这也很有用。
-   LUKS 使用现有的设备映射器内核子系统。
-   LUKS 增强了密码短语，防止字典攻击。
-   LUKS 设备包含多个密钥插槽，允许用户添加备份密钥或密码短语。
:::
::: itemizedlist
**LUKS [*不能*]{.emphasis}做什么**
-   LUKS 等磁盘加密解决方案只在您的系统关闭时保护数据。一旦系统开启并且
    LUKS
    解密了磁盘后，通常有权访问该磁盘的任何人都可以使用该磁盘上的文件。
-   LUKS 不适用于需要许多用户使用同一设备的不同访问密钥的情况。LUKS1
    格式提供了八个密钥插槽，LUKU2 最多提供 32 个密钥插槽。
-   LUKS 不适用于需要文件级加密的应用程序。
:::
::: title
**加密系统**
:::
LUKS 使用的默认密码是 `aes-xts-plain64`{.literal}。LUKS 的默认密钥大小为
512 字节。具有 [**[Anaconda]{.application}**]{.strong} （XTS 模式）的
LUKS 的默认密钥大小为 512 位。可用的加密系统包括：
::: itemizedlist
-   AES - 高级加密标准
-   Twofish（128 位块加密）
-   Serpent
:::
::: itemizedlist
**其它资源**
-   [LUKS
    项目主页](https://gitlab.com/cryptsetup/cryptsetup/blob/master/README.md){.link}
-   [LUKS
    磁盘格式规范](https://gitlab.com/cryptsetup/LUKS2-docs/blob/master/luks2_doc_wip.pdf){.link}
-   [FIPS PUB 197](https://doi.org/10.6028/NIST.FIPS.197){.link}
:::
:::
::: section
::: titlepage
# []{#encrypting-block-devices-using-luks_security-hardening.html#luks-versions-in-rhel_encrypting-block-devices-using-luks}RHEL 中的 LUKS 版本 {.title}
:::
在 RHEL 中，LUKS 加密的默认格式是 LUKS2。旧版 LUKS1
格式仍然被完全支持，它是作为与早期 RHEL 版本兼容的格式提供的。
LUKS2 格式旨在启用各个部分的未来更新，而无需修改二进制结构。LUKS2
在内部对元数据使用 JSON
文本格式，提供元数据冗余，检测元数据的损坏，允许从元数据副本进行自动修复。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
不要在必须与只支持 LUKS1 的传统系统兼容的系统中使用 LUKS2。请注意，RHEL
7 从版本 7.6 起支持 LUKS2 格式。
:::
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
LUKS2 和 LUKS1 使用不同的命令加密该磁盘。对 LUKS
版本使用错误的命令可能会导致数据丢失。
::: informaltable
  LUKS 版本   加密命令
  ----------- ----------------------------------
  LUKS2       `cryptsetup reencrypt`{.literal}
  LUKS1       `cryptsetup-reencrypt`{.literal}
:::
:::
::: title
**在线重新加密**
:::
LUKS2
格式支持在设备正在使用时重新加密加密设备。例如：您不必卸载该设备中的文件系统来执行以下任务：
::: itemizedlist
-   更改卷密钥
-   更改加密算法
:::
加密未加密的设备时，您仍然必须卸载文件系统。您可以在简短初始化加密后重新挂载文件系统。
LUKS1 格式不支持在线重新加密。
::: title
**转换**
:::
LUKS2 格式由 LUKS1 实现。在某些情况下，您可以将 LUKS1 转换为
LUKS2。在以下情况下无法进行转换：
::: itemizedlist
-   LUKS1 设备被标记为由基于策略的解密(PBD -
    Clevis)解决方案使用。当检测到 `luksmeta`{.literal}
    元数据时，`cryptsetup`{.literal} 工具会拒绝转换设备。
-   设备正在活跃。该设备必须处于不活跃状态，才能进行转换。
:::
:::
::: section
::: titlepage
# []{#encrypting-block-devices-using-luks_security-hardening.html#options-for-data-protection-during-luks2-re-encryption_encrypting-block-devices-using-luks}LUKS2 重新加密过程中数据保护选项 {.title}
:::
LUKS2 提供了几个选项，在重新加密过程中优先选择性能或数据保护：
::: variablelist
[`checksum`{.literal}]{.term}
:   这是默认的模式。它在数据保护和性能之间保持平衡。
    这个模式将单独的扇区校验和保存在重新加密区域,因此恢复过程可以检测哪些
    LUKS2 扇区已经重新加密。模式要求块设备扇区写入具有"原子"性。
[`journal`{.literal}]{.term}
:   这是最安全的模式，也是速度最慢的模式。此模式将重新加密区记录在二进制区中，因此
    LUKS2 将数据写入两次。
[`none`{.literal}]{.term}
:   此模式优先选择性能，不提供数据保护。它只保护数据，以防止安全进程终止，如
    `SIGTERM 信号`{.literal} 或用户按了
    [**Ctrl**]{.keycap}+[**C**]{.keycap}。任何意外的系统崩溃或应用程序崩溃都可能会导致数据损坏。
:::
您可以使用 `cryptsetup`{.literal} 的 `--resilience`{.literal}
选项选择模式。
如果 LUKS2 重新加密进程意外被强行终止，LUKU2 可通过以下方法执行恢复：
::: itemizedlist
-   在下一个 LUKS2 设备打开操作期间自动执行。此操作可以由
    `cryptsetup open`{.literal} 命令来触发，或者通过用
    `systemd-cryptsetup`{.literal} 连接设备来触发。
-   在 LUKS2 设备上使用 `cryptsetup repair`{.literal} 命令手动执行。
:::
:::
::: section
::: titlepage
# []{#encrypting-block-devices-using-luks_security-hardening.html#encrypting-existing-data-on-a-block-device-using-luks2_encrypting-block-devices-using-luks}使用 LUKS2 加密块设备上的现有数据 {.title}
:::
这个过程使用 LUKS2 格式加密设备中的数据。新的 LUKS
标头保存在设备的标头中。
::: itemizedlist
**先决条件**
-   块设备包含一个文件系统。
-   已备份了数据。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    在加密过程中可能会丢失数据：由于硬件、内核或人为故障。在开始加密数据之前，请确保您有可靠的备份。
    :::
:::
::: orderedlist
**步骤**
1.  卸载您要加密的设备中的所有文件系统。例如：
    ``` screen
    # umount /dev/sdb1
    ```
2.  为存储 LUKS 标头腾出空间。选择适合您场景的以下一个选项：
    ::: itemizedlist
    -   如果是加密逻辑卷，您可以扩展逻辑卷而无需调整文件系统的大小。例如：
        ``` screen
        # lvextend -L+32M vg00/lv00
        ```
    -   使用分区管理工具（如 `parted`{.literal} ）扩展分区。
    -   缩小该设备的文件系统。您可以对 ext2、ext3 或 ext4 文件系统使用
        `resize2fs`{.literal} 工具。请注意，您无法缩小 XFS 文件系统。
    :::
3.  初始化加密。例如：
    ``` screen
    # cryptsetup reencrypt \
                 --encrypt \
                 --init-only \
                 --reduce-device-size 32M \
                 /dev/sdb1 sdb1_encrypted
    ```
    该命令会要求您输入密码短语并启动加密过程。
4.  挂载该设备：
    ``` screen
    # mount /dev/mapper/sdb1_encrypted /mnt/sdb1_encrypted
    ```
5.  启动在线加密：
    ``` screen
    # cryptsetup reencrypt --resume-only /dev/sdb1
    ```
:::
::: itemizedlist
**其他资源**
-   `cryptsetup(8)`{.literal}、`lvextend(8)`{.literal}、`resize2fs(8)`{.literal}
    和 `parted(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#encrypting-block-devices-using-luks_security-hardening.html#encrypting-existing-data-on-a-block-device-using-luks2-with-a-detached-header_encrypting-block-devices-using-luks}使用带有分离标头的 LUKS2 在块设备上加密现有数据 {.title}
:::
此流程在设备上加密现有数据，而无需为存储 LUKS
标头创建可用空间。标头存储在分离的位置，它也充当额外的安全层。该流程使用
LUKS2 加密格式。
::: itemizedlist
**先决条件**
-   块设备包含一个文件系统。
-   已备份了数据。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    在加密过程中可能会丢失数据：由于硬件、内核或人为故障。在开始加密数据之前，请确保您有可靠的备份。
    :::
:::
::: orderedlist
**步骤**
1.  卸载该设备中的所有文件系统。例如：
    ``` screen
    # umount /dev/sdb1
    ```
2.  初始化加密：
    ``` screen
    # cryptsetup reencrypt \
                 --encrypt \