优化ARL的⼀些坑的细节 
0x00 前⾔ 
这篇⽂章主要是针对前⾯那篇关于漏扫优化的具体实践，实践时候也碰到了⼀些预想不到的问题包
括⼀系列ARL⾃身的bug问题。觉得有必要记录⼀下，也避免哪天硬盘挂了没备份忘记了怎么修改
的。
0x01 如何部署和调试代码 
我通常是不进⾏单步调试的，毕竟ARL是python写的，有报错看报错，然后打印打印关键信息基本
我就知道哪⾥有问题要怎么改了。
我按照官⽅的安装⽅式是⼀键部署的docker版本，通过docker-compose来进⾏管理。
可以看到分为好⼏个容器，除了db和mq，剩下三个应该都是有具体ARL代码的。⽽我们前⾯所说
的例如增加host碰撞、增加扫描等实际上都是在arl_worker这个容器⾥，因此当我们对代码做修改
时，其实只需要覆盖掉worker容器⾥的具体执⾏的py代码就⾏了。当然为了减少问题，每次对代码
修改可以同时覆盖这三个容器⾥的ARL代码，使他们保持⼀致。
⽐如我们修改了这个services⾥的altDNS.py，这个时候我们只需要把这个services的⽂件夹复制到
worker容器⾥直接覆盖就⾏了。
像这样，把本地的修改过的services⽂件夹复制到容器的app⽬录下覆盖掉⾥⾯的services⽂件夹，
就完成了⼀次代码修改更新，之后我们只需要restart⼀下容器即可 docker-compose restart 
worker ，不重启的话修改不会⽣效。
修改完重新跑容易报错，这时候我们需要做⼀些简单的排查，⽐如先多看看restart后容器是不是
up，如果报错了可能会不停的处于restart状态。
如果遇到执⾏错误了，这时候我们看看报了什么错
docker-compose logs
再在⽇志⾥寻找报错信息，基本上就可以找到哪⾥代码报错了，像上⾯这样。
修改错误后重新复制，容器就会正常了。还有个⽇志也要注意
项⽬⽬录下两个log是映射的容器内的两个⽇志，这⾥也会有⼀些其他的错误⽇志可以看。经常看
⽇志可以对实际运⾏情况进⾏了解，也能找到很多arl⾃身的bug。
0x02 修复⼀个ARL的隐藏bug 1 
这个bug只有在进⾏⻓时间重型扫描任务时才会出现，它会导致扫描任务假死，处于永远的进⾏
中。
在运⾏了很⻓时间没有结束的任务时，你可能会从⽇志⾥找到这个报错。如果有这个报错那么它会
导致你任务⼀直卡着不会结束。
https://groups.google.com/g/celery-users/c/5dPhSfF5APQ
https://stackoverflow.com/questions/67907336/celery-task-with-a-long-eta-and-rabbitmq
参考这⼏个帖⼦，⼤概可能是rabbitmq提前触发默认超时报错了，导致celery的任务卡在那边。解
决⽅式是修改rabbitmq的配置。
https://www.rabbitmq.com/consumers.html#acknowledgement-modes
我们进⼊到rabbitmq的容器⾥，在rabbitmq的配置⽬录下创建⼀个advanced.config⽂件写⼊上⾯
的配置内容，把超时时间改成undefined。修改完成后restart⼀下容器就会⽣效了。
0x03 修复⼀个ARL的隐藏bug 2 
在app->utils->conn.py的http_req函数⾥有个bug，这⾥conn如果遇到链接错误没有做异常捕获会
导致上层调⽤的进程直接报错退出。
我在fileleak这⾥看到的这个报错，因此我直接在这⾥加⼊了异常捕获。如果不加，基本上扫描⼗次
⼋次会中断报错。
0x04 集成xray时候的问题 
xray的集成废了好⼤的劲，有⼀些坑吧，我也不知道我解决的对不对，总之按照我的⽅式算是解决
了。
xray在执⾏的时候会寻找⽬录⾥的配置⽂件，⽽我们是通过arl来执⾏的xray所以⽬录的相对位置会
有⼀定影响，具体过程我就不说了，我是这样解决的。
把这三个yaml放到arl主⽬录⾥，然后还有xray的主⽂件夹，在主⽂件⾥我们在放⼊⾃⼰要⽤的
config再通过参数来指定config.yaml的位置，这样执⾏就不会报错了。如果没有把这三个yaml⽂件
放在根⽬录是会报错的。
其次，xray在容器内执⾏依赖于⼀个libpcap.so，解决⽅式是把Linux⾥正常的复制到容器⾥的lib⽬
录下。
这两个做完后，xray的执⾏基本上是不会有问题了。
接下来是arl⾥和xray对接的⼀些细节问题。之前说过把xray的json格式输出后对接到nuclei的字段
⾥，整体处理思路是没有问题的。但是xray的json输出很⼤的问题在于字段不太固定。它不像
nuclei⼀样如果⼀个字段没有值会置空，⽽是直接没有这个键值，因此我们在映射的时候可能会遇
到json获取键值获取不到直接报错的问题。
这⼀点确实要吐槽，太坑⼈了。我⽬前是这样做的。
实现效果
验证命令这⾥会展示完整的请求和响应，直接复制出来贴到vscode⾥看就⾏了
还算是⽐较⽅便的，就是xray可能误报⽐较多需要进⼀步优化⼀下。
0x05 总结 
基本这样就够⽤了，后⾯重点在指纹收集、⽬录爆破和合理的扫描策略上进⾏优化即可。