### References

1. [29(2):198–208, 1983.](#)
2. P. Fiterău-Broştean, R. Janssen, and F. Vaandrager. "Combining Model Learning and Model Checking to Analyze TCP Implementations." In *CAV*, pages 454–471. Springer, 2016.
3. P. Fiterău-Broştean, T. Lenaerts, E. Poll, J. de Ruiter, F. Vaandrager, and P. Verleg. "Model Learning and Model Checking of SSH Implementations." In *SPIN*, pages 142–151, 2017.
4. S. Hussain, O. Chowdhury, S. Mehnaz, and E. Bertino. "LTEInspector: A Systematic Approach for Adversarial Testing of 4G LTE." In *NDSS*, 2018.
5. B. Janes, H. Crawford, and T. O'Connor. "Never Ending Story: Authentication and Access Control Design Flaws in Shared IoT Devices." In *IEEE Workshop on the Internet of Safe Things*, 2020.
6. Y. Jia, L. Xing, Y. Mao, D. Zhao, X. Wang, S. Zhao, and Y. Zhang. "Burglars’ IoT Paradise: Understanding and Mitigating Security Risks of General Messaging Protocols on IoT Clouds." In *IEEE S&P*, pages 465–481. IEEE, 2020.
7. Y. Li, S. Ji, C. Lyu, Y. Chen, J. Chen, Q. Gu, C. Wu, and R. Beyah. "V-Fuzz: Vulnerability Prediction-Assisted Evolutionary Fuzzing for Binary Programs." *IEEE Transactions on Cybernetics*, 2020.
8. D. Lie, A. Chou, D. Engler, and D. L. Dill. "A Simple Method for Extracting Models from Protocol Code." In *ISCA*, pages 192–203. IEEE, 2001.
9. Q. Liu, S. Ji, C. Liu, and C. Wu. "A Practical Black-Box Attack on Source Code Authorship Identification Classifiers." *TIFS*, 2021.
10. G. Lowe. "A Hierarchy of Authentication Specifications." In *CSFW*, pages 31–43. IEEE, 1997.
11. C. Lyu, S. Ji, C. Zhang, Y. Li, W.-H. Lee, Y. Song, and R. Beyah. "MOPT: Optimized Mutation Scheduling for Fuzzers." In *USENIX Security*, pages 1949–1966, Santa Clara, CA, 2019.
12. C. D. Manning, M. Surdeanu, J. Bauer, J. R. Finkel, S. Bethard, and D. McClosky. "The Stanford CoreNLP Natural Language Processing Toolkit." In *ACL*, pages 55–60, 2014.
13. I. N. McAteer, M. I. Malik, Z. Baig, and P. Hannay. "Security Vulnerabilities and Cyber Threat Analysis of the AMQP Protocol for the Internet of Things." 2017.
14. OASIS. "MQTT Version 3.1.1." [Online]. Available: <http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html>
15. T. O'Connor, W. Enck, and B. Reaves. "Blinded and Confused: Uncovering Systemic Flaws in Device Telemetry for Smart-Home Internet of Things." In *WiSec*, pages 140–150, 2019.
16. T. O'Connor, R. Mohamed, M. Miettinen, W. Enck, B. Reaves, and A.-R. Sadeghi. "HomeSnitch: Behavior Transparency and Control for Smart Home IoT Devices." In *WiSec*, pages 128–138, 2019.
17. A. Palmieri, P. Prem, S. Ranise, U. Morelli, and T. Ahmad. "MQTTSA: A Tool for Automatically Assisting the Secure Deployments of MQTT Brokers." In *SERVICES*, volume 2642, pages 47–53. IEEE, 2019.
18. J. Y. Less, R. Holz, W. Hu, and S. Jha. "Automated Analysis of Secure Internet of Things Protocols." In *ACSAC*, pages 238–249, 2017.
19. E. Ronen, A. Shamir, A.-O. Weingarten, and C. O'Flynn. "IoT Goes Nuclear: Creating a Zigbee Chain Reaction." In *IEEE S&P*, pages 195–212. IEEE, 2017.
20. Y. Li, S. Ji, Y. Chen, S. Liang, W.-H. Lee, Y. Chen, C. Lyu, C. Wu, R. Beyah, P. Cheng, et al. "UniFuzz: A Holistic and Pragmatic Metrics-Driven Platform for Evaluating Fuzzers." In *USENIX Security*, 2021.
21. S. Sivakorn, G. Argyros, K. Pei, A. D. Keromytis, and S. Jana. "HVLearn: Automated Black-Box Analysis of Hostname Verification in SSL/TLS Implementations." In *IEEE S&P*, pages 521–538. IEEE, 2017.
22. Q. Wang, S. Ji, Y. Tian, X. Zhang, B. Zhao, Y. Kan, Z. Lin, C. Lin, S. Deng, A. X. Liu, and R. Beyah. "MPInspector: A Systematic and Automatic Approach for Evaluating the Security of IoT Messaging Protocols." [Online]. Available: <https://github.com/wqqqy/MPInspector>
23. B. Zhao, S. Ji, W.-H. Lee, C. Lin, H. Weng, J. Wu, P. Zhou, L. Fang, and R. Beyah. "A Large-Scale Empirical Study on the Vulnerability of Deployed IoT Devices." *TDSC*, 2020.
24. W. Zhou, Y. Jia, Y. Yao, L. Zhu, L. Guan, Y. Mao, P. Liu, and Y. Zhang. "Discovering and Understanding the Security Hazards in the Interactions Between IoT Devices, Mobile Apps, and Clouds on Smart Home Platforms." In *USENIX Security*, pages 1133–1150, 2019.

### Appendix

#### A. Security Properties
We present the main evaluated secrecy and authentication properties (both meta and extended properties) in Table 6 and Table 7, respectively.

**Table 6: Secrecy Properties**

| Secrecy Property | Description |
|------------------|-------------|
| Secrecy on MQTT ClientID | MS1 |
| Secrecy on MQTT Secret Key | MS2 |
| Secrecy on MQTT Username | MS3 |
| Secrecy on MQTT Password | MS4 |
| Secrecy on MQTT Topic | MS5 |
| Secrecy on MQTT Publish Payload | MS6 |
| Secrecy on MQTT User Properties (MQTT V5.0) | MS7 |
| Secrecy on MQTT Publish Response Topic (MQTT V5.0) | MS8 |
| Secrecy on MQTT Publish Correlation Data (MQTT V5.0) | MS9 |
| Secrecy on AMQP ContainerId | AS1 |
| Secrecy on AMQP Host Name | AS2 |
| Secrecy on AMQP Transfer Payload | AS3 |
| Secrecy on AMQP Target Node | AS4 |
| Secrecy on AMQP Source Node | AS5 |
| Secrecy on CoAP Uri | CS1 |
| Secrecy on CoAP Token | CS2 |
| Secrecy on CoAP MessageId | CS3 |
| Secrecy on CoAP ACK payload | CS4 |
| Secrecy on CoAP CON_GET Payload (EMQ X) | CS5 |
| Secrecy on CoAP CON_PUT Payload (EMQ X) | CS6 |
| Secrecy on CoAP Random (Aliyun Cloud) | CS7 |
| Secrecy on CoAP Secret Key (Aliyun Cloud) | CS8 |
| Secrecy on CoAP AuthToken (Aliyun Cloud) | CS9 |
| Secrecy on CoAP CON_POSTAUTH payload (Aliyun Cloud) | CS10 |
| Secrecy on CoAP CON_POSTPUBLISH payload (Aliyun Cloud) | CS11 |

*Notes:*
- The property with (cid:63) is an extended property.
- MS7-MS9 are only supported in MQTTv5.0, CS5-CS6 are only supported in EMQ X, and CS7-CS11 are only supported in Aliyun Cloud in CoAP protocol.

**Table 7: Authentication Properties**

| Property | Description |
|----------|-------------|
| Authentication on MQTT CONNECT message (server->client) | MA1 |
| Authentication on MQTT CONNACK message (client->server) | MA2 |
| Authentication on MQTT SUBSCRIBE message (server->client) | MA3 |
| Authentication on MQTT SUBACK message (client->server) | MA4 |
| Authentication on MQTT UNSUBSCRIBE message (server->client) | MA5 |
| Authentication on MQTT UNSUBACK message (client->server) | MA6 |
| Authentication on MQTT PUBLISH message (server->client) | MA7 |
| Authentication on MQTT PUBACK message (client->server) | MA8 |
| Authentication on MQTT DISCONNECT message (server->client) | MA9 |
| Authentication on MQTT Will message PUBLISH message | MA10 |
| Authentication on MQTT Retained message PUBLISH message | MA11 |
| Authentication on AMQP SASL message (server->client) | AA1 |
| Authentication on AMQP SASL message (client->server) | AA2 |
| Authentication on AMQP OPEN message (server->client) | AA3 |
| Authentication on AMQP OPEN message (client->server) | AA4 |
| Authentication on AMQP ATTACH message (server->client) | AA5 |
| Authentication on AMQP ATTACH message (client->server) | AA6 |
| Authentication on AMQP FLOW message (server->client) | AA7 |
| Authentication on AMQP FLOW message (client->server) | AA8 |
| Authentication on AMQP TRANSFER message (server->client) | AA9 |
| Authentication on AMQP DISPOSITION message (client->server) | AA10 |
| Authentication on AMQP DETACH message (server->client) | AA11 |
| Authentication on AMQP CLOSE message (server->client) | AA12 |
| Authentication on AMQP CLOSE message (client->server) | AA13 |
| Authentication on CoAP CON_GET message (EMQ X) (server->client) | CA1 |
| Authentication on CoAP CON_GET message (EMQ X) (client->server) | CA2 |
| Authentication on CoAP CON_PUT message (EMQ X) (server->client) | CA3 |
| Authentication on CoAP CON_PUT message (EMQ X) (client->server) | CA4 |
| Authentication on CoAP CON_POSTAUTH message (Aliyun Cloud) (server->client) | CA5 |
| Authentication on CoAP CON_POSTAUTH message (Aliyun Cloud) (client->server) | CA6 |
| Authentication on CoAP CON_POSTPUBLISH message (Aliyun Cloud) (server->client) | CA7 |
| Authentication on CoAP CON_POSTPUBLISH message (Aliyun Cloud) (client->server) | CA8 |

*Notes:*
- The property with (cid:63) is an extended property.
- Authentication properties on both client side and server sides are considered.
- CA1-CA4 are only supported in EMQ X and CA6-CA7 are only supported by Aliyun Cloud in CoAP protocols.
- A->B means that A authenticates the message from B.

#### B. A Running Example
We take the MQTT implementation on the Bosch IoT platform as a running example to clarify how the state machine is generated and how the formal code is translated.

**State Machine Generation**
1. **Message Extraction:** MPInspector applies message extraction from Section 4.3 to identify the parameter semantics for the key messages specified in the MQTT standard. For example, it outputs the semantics of nine key MQTT messages using JSON encoding, such as:
   ```json
   {
     "CONNECT": {
       "ClientID": "",
       "username": {"composition": ["authid", "tenantid"]},
       "password": ""
     }
   }
   ```
   An expression `"parameter":""` means that the parameter does not have extra semantics and is consistent with the standard MP.

2. **Interaction Logic Extraction:** MPInspector applies interaction logic extraction from Section 4.3 to the MQTT implementation on the Bosch IoT platform. It outputs a raw state machine whose transition messages only contain the message names, e.g., `CONNECT/CONNACK`. Then, it adds the semantics extracted from Section 4.3 to each transition message. After that, we have the inferred state machine as shown in Figure 9. According to the property generation method in Section 4.5, MPInspector outputs the secrecy and authentication properties as shown in Appendix A.

**State Machine Translation**
1. **Initial Rule and Session Key Negotiation Rule:** MPInspector generates the special initial rule and session key negotiation rule. The initial rule defines the initial states of the broker and clients, which is concluded from the MQTT specification. MPInspector uses the let-binding expression to specify the parameter semantics in the initial states, as shown in the second line of Listing 2. MPInspector generates the transition rule for session key negotiation based on the state machine, which is a simplified SSL/TLS key negotiation modeling. The rule is shown in Listing 3.

   **Listing 2: An example of an initial rule in Tamarin code.**
   ```tamarin
   rule init_client:
     !SERVER($SERVER), Fr(~ClientID), Fr(~authid), Fr(~tenantid), Fr(~password) 
     let username = authid in
     [
       !DEVICE($SERVER, ~ClientID, username, ~password),
       !State_0_Serv($SERVER, ~ClientID, username, ~password),
       !State_0_Dev($SERVER, ~ClientID, username, ~password)
     ]
   ```

   **Listing 3: An example of a session key negotiation rule in Tamarin code.**
   ```tamarin
   rule client_serv_negotiate_tls_key:
     let username = authid in
     [
       !State_0_Serv($SERVER, ~ClientID, username, ~password),
       !State_0_Client($SERVER, ~ClientID, username, ~password),
       Fr(~session_key)
     ] => [
       Dev_Tls_Sym($SERVER, ~ClientID, username, ~password, ~session_key),
       Serv_Tls_Sym($SERVER, ~ClientID, username, ~password, ~session_key)
     ]
   ```

2. **Transition Messages Translation:** We translate the transition messages from the inferred state machine to rules following the principle described in Section 4.6. Taking the server side transition `CONNECT(senc{ClientID,username(V1,V2),password}session_key)/CONNACK(senc('0')session_key)` as an example, we show its translated Tamarin rule in Listing 4.

   **Listing 4: An example of a transition rule in Tamarin code.**
   ```tamarin
   rule serv_recv_connect_snd_connack:
     let username = authid in
     connect = senc(ClientID, username, password, session_key),
     connack = senc('0', session_key)
     [
       In(connect), Serv_Tls_Sym($SERVER, tenantid, password, session_key)
     ] => [
       Create('connect', 'server', ClientID, authid, session_key),
       Commit($SERVER, username, session_key),
       Running($SERVER, username, session_key),
       Honest(), Secret(password), Secret(tenantid), Secret(session_key)
     ] => [
       Out(connack), State_1_Serv($SERVER, ClientID, authid, tenantid, password, session_key)
     ]
   ```

**Property Translation**
Finally, the formal code translation module automatically translates the secrecy properties on the password to Tamarin code using the formula shown in Listing 5. MPInspector automatically generates four types of authentication lemmas for each authentication property based on the state machine. Taking the injective agreement as an example, MPInspector generates the formalization of the injective agreement property on a `CONNECT` message, as shown in Listing 6. Listing 5 and Listing 6 show the property lemmas using first-order logic formulas over time points and action facts, based on the standard security property templates specified by Tamarin Prover [17].

**Listing 5: An example of a secrecy lemma in Tamarin code.**
```tamarin
lemma secret_Password_serv:
  "All n #i. Secret(password) @i
   ==> (not (Ex #j. K(n) @j)) &
      (not (Ex A B #j. Reveal(A, B) @j & Honest(A) @i))"
```

**Listing 6: An example of an authentication lemma in Tamarin code.**
```tamarin
lemma injective_agreement_dev_serv_CONNECT:
  "All a b t #i. Commit(a, b, connect) @i
   ==> (Ex #j. Running(b, a, connect) @j & j > i) &
      (not (Ex C data #r. Reveal(C, data) @r & Honest(C) @i))"
```

**Figure 9: The inferred state machine of the MQTT implementation on the Bosch IoT platform.**

This structured and detailed approach ensures clarity and coherence in the presentation of the state machine generation and translation processes, along with the associated security properties and their formalization.