unrecognizable.
One piece of research close to us is Abrath et al.’s work [1]. They proposed
a technique of linking Windows system DLLs statically with an executable and
deleting imported API information from it to prevent API calls from being
monitored. The eﬀect of linking Windows system DLLs with an executable could
be similar to the eﬀect we obtained. However, static linked DLLs may lose the
portability of a PE executable since system DLLs tend to depend on speciﬁc
Windows versions and the size of a linked executable becomes larger.
Aside from the obfuscation techniques that we explained in Sect. 2.1, another
type of obfuscation approach, called “API sequence obfuscation”, has been pro-
posed. Shadow Attack [13] is an API sequence obfuscation that works by parti-
tioning one piece of malware into multiple processes. These multiple processes
execute a part of the original behaviors of the malware. Illusion Attack [19] is
another API sequence obfuscation that passes requested system call numbers
and arguments via ioctl to an underlining kernel driver. From a monitoring tool
viewpoint, it looks like a sequence of ioctl. These attacks mainly focus on scram-
bling executed API calls to avoid detection, while our approach focuses on hiding
each API call to escape from both detection and analysis.
7 Discussion
In this section, we ﬁrst discuss platform dependency of Stealth Loader. Then,
we discuss other de-obfuscations and possible countermeasures against Stealth
Loader.
Stealth Loader: Trace-Free Program Loading for API Obfuscation
233
7.1 Platform Dependency
As we mentioned in Sect. 4, the current Stealth Loader is implemented to run
on Windows 7 environment. However, we believe that the design explained in
Sect. 3 is also applicable to other Windows platforms including Windows 8 and
10. Of course, since Windows 8 and 10 have diﬀerent implementations from Win-
dows 7, we need an eﬀort to make Stealth Loader runnable on these platforms
without any issues. More concretely, we have to resolve some corner cases like
we mentioned in Appendix A. In other word, the other part of this paper is
applicable to other Windows platforms.
Regarding applying Stealth Loader to Linux, we consider that the designs of
Stealth Loader are applicable to Linux platforms. Since Linux OS and libraries
are less dependent each other than Windows ones, the implementation of Stealth
Loader for Linux may become simpler than the one of Windows. We consider
that Stealth Loader on Linux could make library calls invisible to library-call-
monitoring tools, such as ltrace.
7.2 Other De-obfuscations
Eureka [18] relates the base address of a loaded DLL with a DLL ﬁle by monitor-
ing NtMapViewOfSection API calls and extracting the speciﬁed ﬁle name and
the return address. Since Stealth Loader does not use ﬁle-map functions at all,
this API is not called when Stealth Loader loads a DLL. As a result, Eureka fails
API name resolution, even though it overcomes stolen code or API redirection
with performing deep program analyses.
API Chaser, proposed in [9] relates code with API name before starting an
analysis by setting taint tags containing API name on the code. Then it keeps
track of its relationship by propagating the tags during its analysis. Since it
makes the relationship before Stealth Loader works, it may not be aﬀected by
Stealth Loader. However, it is widely known that tag propagation is disconnected
at implicit ﬂow code [3]. So, attackers are able to evade it by simply processing
code with implicit ﬂow without changing the value of it.
7.3 Countermeasures
Monitor at Kernel Layer. One countermeasure against Stealth Loader is
monitoring at kernel layer. Stealth Loader has to depend on Windows system
service calls, while it is independent of userland API code. Even though much
useful information has already been lost when the executions of some APIs,
e.g., network-related APIs, reach the kernel layer, a series of service system calls
possibly provides a part of the whole picture regarding the behaviors of the
executable protected with Stealth Loader.
Specialized Analysis Environment. Another one is to install hooks on sys-
tem DLLs in an analysis environment before starting an analysis by modifying
234
Y. Kawakoya et al.
a ﬁle of each DLL on disk. This kind of modiﬁcations is likely to be detected
and warned by Windows. However, since modiﬁed DLLs are loaded by not only
benign processes but also processes protected with Stealth Loader, analysis tools
probably identify the executions of APIs by the installed hooks when they are
executed.
Instrumentation tools, such as Intel PIN [12], could possibly become a solu-
tion against Stealth Loader because they can possibly identify the locations of
stealth-loaded DLLs by tracking the all memory reads and writes related to the
DLLs. However, a major drawback of these tools is that they are easily detectable
by malware. So, if malware analysts use these tools for analyzing Stealth-Loader-
applied malware in practice, they need a further consideration for hiding these
tools from malware.
Detecting DLLs from Memory Patterns. Scanning memory and ﬁnding
speciﬁc patterns for a DLL may be eﬀective. By preparing the patterns of each
DLL in advance and scanning memory with these patterns, it could be possible
to identify the modules loaded on memory. Also, comparing binaries using a
diﬀerent tool such as BinDiﬀ [24] is also eﬀective. By comparing the control
ﬂow of a Windows system DLL with that on memory, we could identify the
existence of speciﬁc DLLs. However, since there are several binary- or assembly-
level obfuscation techniques, such as [10], we need diﬀerent counter-approaches
to solve this type of problem.
Inferring DLLs from Visible Traces. Since current Stealth Loader avoids
supporting some APIs as we explained in Appendix A, this fact may give static
analysis tools a hint to infer a DLL. For example, if analysis tools identify the
position of the IAT of a stealth-loaded DLL using the way we explained in
Subsect. 2.1, they can probably specify the DLL from only visible imported APIs
in the IAT. To solve this, we could take advantage of API redirection explained in
Fig. 1-(c) in Subsect. 2.1. This type of API redirection modiﬁes indirect API call
instructions in original code with direct instructions which make the execution
jump to a stub for each API. So, since there are no indirect API call instructions
in original code, analysis tools are likely to fail to identify the IAT.
Detecting Stealth Loader Itself. Detecting Stealth Loader itself possibly
becomes another direction to ﬁght against Stealth Loader. One way is detecting
speciﬁc byte patterns of Stealth Loader. While Stealth Loader hides its behav-
iors as we explained in Subsect. 3.3, the code or data of it may be likely to
have speciﬁc patterns available to be detected. However, as we discussed above,
several techniques, such as [10], have already proposed to avoid byte-pattern-
based detection. If we apply one of them to Stealth Loader, we can avoid being
detected.
Stealth Loader: Trace-Free Program Loading for API Obfuscation
235
Restricting Untrusted Code. One more direction is to prevent Stealth
Loader from working at each phase. Policy enforcement, which is mentioned
in safe loading [5], may be partially eﬀective for that purpose. If there is a policy
to restrict opening a system DLL for reading, Stealth Loader cannot map the
code of a DLL on memory if it is not loaded by Windows yet. On the other
hand, if the DLLs are already loaded by Windows, Reﬂective loading allows us
to load them with Stealth Loader.
In addition, safe loading has a restriction to giving executable permissions.
No other instances except for the trusted components of safe loading does not
give executable permission to a certain memory area. Safe loader supports only
Linux platform, however, if it would support Windows, safe loading may be able
to prevent Stealth Loader from providing the executable permission to the code
read from a DLL ﬁle.
8 Conclusion
We analyzed existing API [de]obfuscation techniques and clariﬁed that API name
resolution becomes an attack vector for malware authors to evade malware analy-
ses and detections depending on API de-obfuscations. We also presented Stealth
Loader and its implementation as a proof-of-concept to exploit the attack vector.
Then, we demonstrated that Stealth Loader actually evaded all major analysis
tools. In addition, we qualitatively showed that Stealth Loader can evade API
de-obfuscations proposed in academic studies.
We do not consider that Stealth Loader is perfect. But we also consider
that defeating Stealth Loader is not easy because none of the existing counter-
measures discussed in Subsect. 7.3 can be come a direct solution against Stealth
Loader. We consider that most existing malware analysis tools depend on more or
less some of the API de-obfuscation techniques mentioned in this paper, implying
that Stealth Loader can pose a serious real-world threat in the future.
A The Reasons for Unsupported API
In this Appendix, we explain the reasons why we cannot support several APIs
with Stealth Loader on Windows 7 platform.
A.1 ntdll Initialization
ntdll.dll does not export the initialize function, i.e., DllMain does not exist in
ntdll.dll, and LdrInitializeThunk, which is the entry point of ntdll.dll for a newly
created thread, is also not exported. This inability of initialization leads to many
uninitialized global variables, causing a program crash. As a workaround to this,
we classiﬁed the APIs of ntdll.dll as to whether they are dependent on global
variables or not by using static analysis. Then, we deﬁned the APIs dependent
on global variables as unsupported. As a result, the number of supported APIs
for ntdll.dll is 776, while that of unsupported APIs is 1,992.
236
Y. Kawakoya et al.
A.2 Callback
APIs triggering callback are diﬃcult to apply Stealth Loader to because these
APIs do not work properly unless we register callback handlers in PEB. So, we
exclude some of the APIs of user32.dll and gdi32.dll, which become a trigger
callback from our supported APIs. To distinguish whether APIs are related to
callbacks or not, we developed an IDA script to make a call ﬂow graph and ana-
lyzed win32k.sys, user32.dll, and gdi32.dll using the script. Then, we identiﬁed
203 APIs out of 839 exported from user32.dll and 202 out of 728 exported from
gdi32.dll.
A.3 Local Heap Memory
Supporting APIs to operate local heap objects is diﬃcult because these objects
are possibly shared between DLLs. The reason is as follows. When a local heap
object is assigned, this object is managed under the stealth-loaded kernelbase.dll.
However, when the object is used, the object is checked under the Windows-
loaded kernelbase.dll. This inconsistency leads to failure in the execution of some
APIs related to the local heap object operation. To avoid this situation, we
exclude the APIs for operating local heap objects from our supported API. As
a result of static analysis, we found that local heap objects are managed in
BaseHeapHandleTable, located in the data section of kernelbase.dll. Therefore,
we do not support 6 APIs depending on this table in current Stealth Loader.
References
1. Abrath, B., Coppens, B., Volckaert, S., De Sutter, B.: Obfuscating windows dlls.
In: 2015 IEEE/ACM 1st International Workshop on Software Protection (SPRO),
pp. 24–30. IEEE (2015)
2. Bellard, F.: Qemu, a fast and portable dynamic translator. In: USENIX Annual
Technical Conference, FREENIX Track, USENIX, pp. 41–46 (2005)
3. Cavallaro, L., Saxena, P., Sekar, R.: On the limits of information ﬂow techniques for
malware analysis and containment. In: Zamboni, D. (ed.) DIMVA 2008. LNCS, vol.
5137, pp. 143–163. Springer, Heidelberg (2008). doi:10.1007/978-3-540-70542-0 8
injection. http://www.harmonysecurity.com/ﬁles/
4. Fewer, S.: Reﬂective dll
HS-P005 ReﬂectiveDllInjection.pdf
5. Gross, T.R., Hartmann, T., Payer, M.: Safe loading - a foundation for secure execu-
tion of untrusted programs. In: IEEE Symposium on Security and Privacy (2012),
pp. 18–32 (2012)
6. Henderson, A., Prakash, A., Yan, L.K., Hu, X., Wang, X., Zhou, R., Yin, H.: Make
it work, make it right, make it fast: building a platform-neutral whole-system
dynamic binary analysis platform. In: Proceedings of the 2014 International Sym-
posium on Software Testing and Analysis, ISSTA 2014, pp. 248–258. ACM, New
York (2014)
7. Hex-Rays. https://www.hex-rays.com/
8. Hunt, G., Brubacher, D.: Detours: binary interception of win32 functions. In: Third
USENIX Windows NT Symposium, USENIX, p. 8, July 1999
Stealth Loader: Trace-Free Program Loading for API Obfuscation
237
9. Kawakoya, Y., Iwamura, M., Shioji, E., Hariu, T.: API chaser: anti-analysis resis-
tant malware analyzer. In: Stolfo, S.J., Stavrou, A., Wright, C.V. (eds.) RAID
2013. LNCS, vol. 8145, pp. 123–143. Springer, Heidelberg (2013). doi:10.1007/
978-3-642-41284-4 7
10. Kruegel, C., Kirda, E., Moser, A.: Limits of static analysis for malware detection.
In: Proceedings of the 23rd Annual Computer Security Applications Conference
(ACSAC) 2007, December 2007
11. Ligh, M.H., Case, A., Levy, J., Walters, A.: The Art of Memory Forensics: Detect-
ing Malware and Threats in Windows, Linux, and Mac Memory, 1st edn. Wiley
Publishing, USA (2014)
12. Luk, C.-K., Cohn, R., Muth, R., Patil, H., Klauser, A., Lowney, G., Wallace, S.,
Reddi, V.J., Hazelwood, K.: Pin: building customized program analysis tools with
dynamic instrumentation. In: Proceedings of the 2005 ACM SIGPLAN Conference
on Programming Language Design and Implementation, PLDI 2005, pp. 190–200.
ACM, New York (2005)
13. Ma, W., Duan, P., Liu, S., Gu, G., Liu, J.-C.: Shadow attacks: automatically
evading system-call-behavior based malware detection. J. Comput. Virol. 8(1), 1–
13 (2012)
14. NtQuery. https://github.com/NtQuery/Scylla
15. Oktavianto, D., Muhardianto, I.: Cuckoo Malware Analysis. Packt Publishing,
Birmingham (2013)
16. Plohmann, D., Hanel, A.: simpliﬁre.idascope. In: Hacklu (2012)
17. Rekall. http://www.rekall-forensic.com/
18. Sharif, M., Yegneswaran, V., Saidi, H., Porras, P., Lee, W.: Eureka: a framework
for enabling static malware analysis. In: Jajodia, S., Lopez, J. (eds.) ESORICS
2008. LNCS, vol. 5283, pp. 481–500. Springer, Heidelberg (2008). doi:10.1007/
978-3-540-88313-5 31
19. Srivastava, A., Lanzi, A., Giﬃn, J., Balzarotti, D.: Operating system interface
obfuscation and the revealing of hidden operations. In: Holz, T., Bos, H. (eds.)
DIMVA 2011. LNCS, vol. 6739, pp. 214–233. Springer, Heidelberg (2011). doi:10.
1007/978-3-642-22424-9 13
20. Suenaga, M.: A museum of API obfuscation on Win32. In: Symantec Security
Response (2009)
21. Sycurelab. https://github.com/sycurelab/DECAF
22. VirusTotal. https://www.virustotal.com/
23. Yason, M.V.: The art of unpacking. In: Black Hat USA Brieﬁngs (2007)
24. Zynamics. https://www.zynamics.com/bindiﬀ.html