下。
a）往后扩展：
---
## Page 492
CTF特训营：技术详解、解题方法与
13.3.4 forgotten chunk
492/1144
条件：增大chunk的size（或者仅修改P位），使其大小覆盖到后
续chunk，满足后续chunk不合并（伪造后续chunk的size）或者能够
正常unlink（处于释放状态）
效果：可实现后续相邻堆块重叠，便于后续利用。
6x08/x
0x0000000066660600
0x602088
x602000:
0x0000000000000051
x602010:
0x0600000000000060
9x602020:
0000000000000000x0
堆块0
9x602030:
x602040:
0x0000000000000000
0x0000000000000006
9x602050:
x0000008880000006
size（修改后
0x602060:
0x602070:
8x8666006686886066
堆块1
0x602080:
0x0000000000000000
0x6020a0:
9x602090:
0x0000000000000000
0X000000
0x0000000000000051
9x6020b0:
0x6020c0:
0x0000000000000000
9000000000000000x0
堆块2
9x6020d0:
0x6020f0:
0x6020e0:
0x602100:
x602110:
堆块3
x602120:
0x0066600066666000
0x602130:
9x602140:
8020ec1
9x602150:
x602160:
9x0000000
0x000006
90000000
Top Chunk
0x602170:
图13-16free之前堆块布局
---
## Page 493
CTF特训营：技术详解、解题方法与
13.3.4 forgotten chunk
493/1144
x602010:
86
9x8
00006
x008
堆块0
x602030:
x602040:
9x6
8086
9x8
9x08
98888
8x08
959299
x
dd37b8
x
x602070:
9x06
90080
9x000
0x602080:
9x06
0000
新堆块（freed）
x6020b0:
x6020c0:
堆块2
do:
x
v
x6020e0:
x6020f0:
0056
602110:
x
0000
0x0
堆块3
X602120:
X00
00000
0X00
602140:
0x602150:
x0
0000
0x00
02160:
Top Chunk
2170
图13-17free之后堆块布局
b）往前合并：
条件：将chunk的P位清0，同时修改pre_ssize，使其大小刚好
能够包含前一个处于free状态的chunk（或者伪造的chunk），并且释
放时能够正常前向unlink（处于释放状态）。
效果：可实现前面相邻堆块重叠，便于后续利用。
2）堆收缩（shrinkchunk)：
条件：可修改本chunk的size，一般用于制造特定大小的chunk
---
## Page 494
CTF特训营：技术详解、解题方法与
13.3.4 forgotten chunk
494/1144
或者满足合适的条件。
效果：配合其他利用方式进行。
利用实例可参考如下题目。
1)Ore0（2014-PCTF-PWN-400)。
2)Shaxian（2015-RCTF-PWN-400)。
---
## Page 495
CTF特训营：技术详解、解题方法与
13.3.5 house of force495/1144
13.3.5houseofforce
这种利用方法主要是指堆块溢出覆盖topchunk中size域的情况
通过将其改写成一个非常大的数据，从而可以申请非常大的空间，使
得新topchunk的头部落到想要修改的位置。在下次申请时，就能够
得到自标内存，从而实现泄露和改写。
在执行malloc的时候，一般是直接根据申请的空间大小与top
chunk的大小进行比较，由于都是无符号整数，所以会将topchunk的
值改得特别大（如Oxffff**等），从而保证绝大多数在申请时都能被满
足。
houseofforce利用示意如图13-18所示
---
## Page 496
CTF特训营：技术详解、解题方法与
13.3.5 house of force
496/1144
cur_data
cur_data
CTan
图13-18houseofforce利用示意图
通常情况下，为了简便，利用步骤一般如下。
1）首先应该泄露出堆地址。
2）利用堆溢出，将topchunk的size域修改为很大的整数。
3）申请大块内存（内存大小可通过堆地址与目标地址的距离来
计算），使得topchunk的头部落在目标地址范围之内。
4）再次申请内存，那么新申请的内存即为目标地址，通常情况
下（未开启FullRelro），一般是将目标地址设为got表中的地址，其他
---
## Page 497
CTF特训营：技术详解、解题方法与
13.3.5 house of force
497/1144
情况则需要根据实际问题具体分析
利用方式具体如下。
条件：修改topchunk的size，使其大小能够包含libc，然后申请
一个大堆块，使得topchunk落到ibc中，从而达到修改libc中数据（如
malloc_hook或者free_hook等）的目的。
效果：修改libc数据。
这种情况比较简单，利用起来也相对方便，具体可参见如下赛题。
1)Ruin(2015-BCTF-PWN-200)。
2)Tinypad(2015-SECCON-PWN-300)。
延伸版的houseofforce可参见Noend（2018suctf）。
---
## Page 498
CTF特训营：技术详解、解题方法与
13.3.6 house of spirit
498/1144
13.3.6houseofspirit
这种利用方法主要是指在堆上构造fastbin结构，然后改写前一堆
块的后续指针，将下一次申请的位置改到栈上，从而进行利用，如图
13-19所示。
Stak
ebp/rbp
ebp/rbp
eip/rip
图13-19houseofspirit利用示意图
通常，在栈上布置的堆块需要满足fastbin的条件，如图13-19中
栈空间的阴影部分，包括size域中的大小必须与fastbin的大小保持一
致，另外，其后续块的size域中的p标志位必须为1、其实这两点很容
---
## Page 499
CTF特训营：技术详解、解题方法与
13.3.6 house of spirit
499/1144
易就能满足，但是需要泄露栈地址
具体见真题解析：
https://gbmaster.wordpress.com/2015/07/21/
x86-exploitation-101-house-of-spirit-friendly-stack-overflow/.
利用方式具体如下。
1）条件：满足fastbinattack的条件即可。
2）效果：修改栈数据，可以配合使用rop等利用方法。
---
## Page 500
CTF特训营：技术详解、解题方法与
13.3.7 house of orange500/1144
13.3.7houseoforange
houseoforange的名字来源于2016年hitconCTF中的题目house
oforange，该题的官方解法由4ngelboy给出，其使用Unsortedbin
Attack修改iO_list_all来获取shell。理解该利用的主要思路需要先理解
两个概念—UnsortedbinAttack和FSOP
1.UnsortedbinAttack
UnsortedbinAttack主要是针对unsortedbin实现的利用方法，在
glibc中分配unsortedbin的chunk的时候，有如下一段代码：
/*removefromunsortedlist*/
unsorted_chunks(av)->bk=bck
bck->fd=unsorted_chunks(av);
分配时，将chunk从unsortedbin链表中移除，移除时对bck的fd进
行赋值，这里没有做fd和bk的检查，所以如果能够控制bk，则将其指
向目标地址，这样可以实现改写任意地址。
需要注意的是：
---
## Page 501
CTF特训营：技术详解、解题方法与
13.3.7 house of orange
501/1144
1）当修改的unsortedbinchunk大小刚好等于申请的chunk大小
时，能够正常申请成功，可实现任意地址写
2）当修改的unsortedbinchunk大小不等于申请的chunk大小
时，能够实现任意地址写，此时会触发mallocerror，如果直接改写
lOlistall并布置好数据，就能够直接获取shell
3）需要在0x60大小的smallbinchunk的第一个堆块中布置好file
struct数据。
对于unsortedbin的构造可以很灵活，只需要在一处设置好bk的
值即可。
条件：
*bk=（target_addr-0x10)
效果：
target_addr=（0x60 smallchunkheader)
2.FSOP
---
## Page 502
CTF特训营：技术详解、解题方法与
13.3.7 house of orange
502/1144
FSOP（FileStreamOrientedProgramming）主要是对_IO_FILE
结构体链表进行的利用，其中_IO_FILE的结构体代码如下：
struct_IO_FILE{
int_flags;/*High-order word is _IO_MAGIC;rest is flags. */
#define_Io_file_flags_flags
/*Thefollowing pointers correspond to the C++streambuf protocol.*/
*Note:Tkuses the_IO_read_ptr and_IO_read_end fields directly.*
char*_IO_read_ptr;/*Current readpointer*/
char*IO_read_end;/*End of get area.*/
char_IO_read_base;/Start of putback+get area.*/
charIOwritebase;*Startofputarea.*/
charIO_write_ptr;*Current put pointer.*
char*Iowrite_end;*Endof put area.*
char*IObufbase;/*Startofreserve area.
char*IO_buf_end;*Endof reserve area.
/*Thefollowing fields are used to support backing up and undo.*/
char*_IO_save_base;/*Pointer to start of non-current getarea.
char*IO_backup_base;/*Pointertofirstvalidcharacterofbackup area*
char*_IO_save_end;/*Pointer to end of non-current get area.
struct_IO_marker*_markers;
struct_IO_FILE*_chain;
int _fileno;
int _blksize;
_IO_off_t_old_offset;/*This used to be_offset but it's too small.*/
#define_HAVE_COLUMN/*temporary*/
/*1+column number of pbase(); 0 is unknown. */
unsigned short_cur_column;
signed char_vtable_offset;
char_shortbuf[1];
/*char*_save_gptr;char*_save_egptr;
10_lockt*lock;
#ifdefIOUSEOLDIOFILE
struct_IO_FILE_plus
---
## Page 503
CTF特训营：技术详解、解题方法与
13.3.7 house of orange
503/1144
IO_FILEfile;//就是一个libio.h中的_IO_FILE结构体
conststruct_IO_jump_tvtable;//多出—个vtable
lO_list_all链表如图13-20所示
IO_list_all
stderr
stdout
stdin
flag
flag
flag
chain
chain
chain
图13-20IO_list_all链表
针对FSOP的利用，主要是因为堆破坏时，libc会通过调用
libc_message函数打印错误信息，最终调用_IO_flush_all_lockp刷新
_O_list_all（文件链表头部）链表中的文件流，即调用其中的
_IO_overflow函数。在libc中，函数的反编译结构如图13-21所示。
读者可参阅文章（https://dhavalkapil.com/blogs/FILE-Structure-
---
## Page 504
CTF特训营：技术详解、解题方法与
13.3.7 house of orange
504/1144
Exploitation/）了解文件结构体的利用方法，其中提供了如下pack方
式：
#Ahandyfunction tocraft FILEstructures
def pack_file(_flags=0,
IO_read_ptr=0,
IO_read_end=0
_IO_read_base=0,
IO_write base=0,
_IO_write_ptr=0,
_IO_write_end=0,
IO buf _base=0,
_IO_buf_end=0,
IO_save base=0,
_IO_backup_base=0,
_IO_save_end=0,
IO_marker=0,
_IO_chain=0,
_fileno=0,
_lock=0）:
struct=p32(_flags)+\
p32(0）+1
p64(_i0_read_ptr)+\
p64（I0_read_end)+\
p64（l0_read_base)+\
p64（1O_write_base)+\
p64（IO_write_ptr)+\
p64(I0_write_end)+\
p64(_1Obufbase)+\
p64(_1O_buf_end)+\
p64（IO_save base)+\
p64（1Obackup_base)+\
p64(10_save_end)+\
p64（10_marker)+\