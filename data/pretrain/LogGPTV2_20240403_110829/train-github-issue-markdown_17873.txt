I found an example where webpack struggles to avoid dependency duplication.
See below, where `c.js` is the entry point.
    // c.js
    function getMeAModule(moduleName) {
      if (moduleName === 'a') {
        require.ensure(['a'], function (require) {
          var a = require('a');
          a();
        });
      }
      if (moduleName === 'b') {
        require.ensure(['b'], function (require) {
          var b = require('b');
          b();
        });
      }
    }
    window.getMeAModule = getMeAModule;
    // a.js
    var d = require('d');
    module.exports = function () {
      d();
      console.log('a');
    };
    // b.js
    var d = require('d');
    module.exports = function () {
      d();
      console.log('b');
    };
    // d.js
    module.exports = function () {
      console.log('d');
    };
If you build this example with webpack, three chunks will be created. The
first will contain the entry point, `c.js`, as you would expect. The second
"normal" chunk will contain `a.js` as well as `d.js`, and the third "normal"
chunk will contain `b.js` and `d.js`.
It seems to me that in the ideal situation, I could run `getMeAModule('a')` in
the console, and then subsequently run `getMeAModule('b')` in the console but
before webpack sends the async request for the chunk containing b, it checks
(on the client) to see that b's dependency on d is already satisifed, and
performs a smarter async request.
I'm finding this to be quite problematic on a big project with a complicated
dependency graph, large modules, and a dynamic require statement (which we
currently work around with a long series of if-blocks, as in this example). Is
webpack equipped to handle this situation? If so, how best can I do so?
Thanks for your help! :)