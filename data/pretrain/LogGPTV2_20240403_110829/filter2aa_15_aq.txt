"UTF-8"
，
"GBK"
））；？
>
这里要注意的是，把网页和文件编码都设置成UTF-8，不然浏览器会自动转码，这段代码是把UTF-8编码转换成GBK，运行这段代码，输出如下：
where id='-1
运
' -- '
可以看到也成功闭合了前面的单引号。
这种方式造成的SQL注入也有不少先例，比如ecshop就出过多次这个问题，我们来看看出现这个问题的核心代码，代码位置在includes/cls_iconv.php文件的chinese类中的Convert（）函数：
function Convert
（
$source_lang
，
$target_lang
，
$source_string = ''
）
{
/******
省略
****/
    if
（（
$this->iconv_enabled || $this->mbstring_enabled
）
&&
！（
$this-> config['source_lang'] == 'GBK' && $this->config['target_lang'] == 'BIG-5'
））
       {
           if
（
$this->config['target_lang']
！
= 'UNICODE'
）
           {
               $string = $this->_convert_iconv_mbstring
（
$this-> SourceText
，
$this->config['target_lang']
，
$this-> config['source_lang']
）；
               /*
如果正确转换
*/
               if
（
$string
）
               {
                    return $string
；
               }
           }
           else
           {
                $string = ''
；
                $text = $SourceText
；
                while
（
$text
）
                {
                    if
（
ord
（
substr
（
$text
，
0
，
1
））
> 127
）
                    {
                        if
（
$this->config['source_lang']
！
= 'UTF-8'
）
                        {
                            $char = $this->_convert_iconv_mbstring
（
substr
（
$text
，
0
，
2
），
'UTF-8'
，
$this->config ['source_lang']
）；
                        }
                        else
这个函数的作用是将UTF-8的编码转换成GBK，本函数调用到$this->_convert_iconv_mbstring（）函数，我们跟进去看看，代码如下：
function _convert_iconv_mbstring
（
$string
，
$target_lang
，
$source_lang
）
{
    if
（
$this->iconv_enabled
）
    {
        $return_string = @iconv
（
$source_lang
，
$target_lang
，
$string
）；
        if
（
$return_string
！
== false
）
        {
            return $return_string
；
        }
    }
    if
（
$this->mbstring_enabled
）
    {
        if
（
$source_lang == 'GBK'
）
        {
            $source_lang = 'CP936'
；
        }
        if
（
$target_lang == 'GBK'
）
        {
            $target_lang = 'CP936'
；
        }
        $return_string = @mb_convert_encoding
（
$string
，
$target_lang
，
$source_lang
）；
        if
（
$return_string
！
== false
）
可以看到最终调用iconv（）函数或者mb_convert_encoding（）函数来进行转码，如果调用这个函数之后没有再次过滤，则会存在注入问题。
8.2 神奇的字符串
中国文字博大精深，而在计算机里面就是因为这些语言的“博大”即大而杂，导致机器在语言编码转换的时候，经常会出现各种各样的异常，这些神奇的字符串就有可能组合成一堆乱码出来，也有可能直接把程序搞崩溃掉，不过总有那么一些字符，可以帮助我们在利用漏洞的时候变得更简单一些，下面我们就来看看是哪些函数这么调皮。
8.2.1 字符处理函数报错信息泄露
页面的报错信息通常能泄露文件绝对路径、代码、变量以及函数等信息，页面报错有很多情况，比如参数少了或者多了、参数类型不对、数组下标越界、页面超时，等，不过并不是所有情况下页面都会出现错误信息，要显示错误信息需要打开在PHP配置文件php.ini中设置display_errors=on或者在代码中加入error_reporting（）函数，error_reporting（）函数有几个选项来配置显示错误的等级，列表如下：
E_WARNING
E_PARSE
E_NOTICE
E_CORE_ERROR
E_CORE_WARNING
E_COMPILE_ERROR
E_COMPILE_WARNING
E_USER_ERROR
E_USER_WARNING
E_USER_NOTICE
E_STRICT
E_RECOVERABLE_ERROR
E_ALL
其中最常用的是E_ALL、E_WARNING、E_NOTICE、E_ALL代表提示所有问题，E_WARNING代表显示错误信息，E_NOTICE则是显示基础提示信息。
大多数错误提示都会显示文件路径，在渗透测试中，经常遇到webshell的场景要用到文件绝对路径，所以这个利用页面报错来获取Web路径的方式也比较实在了，用户提交上去的数据后端大多是以字符串方式处理，所以利用字符串处理函数报错成了必不可少的方法，对于利用参数来报错的方式，给函数传入不同类型的变量是最实用的方式。
大多数程序会使用trim（）函数对用户名等值去掉两边的空格，这时候如果我们传入的用户名参数是一个数组，则程序就会报错，测试代码如下：
'
；
echo iconv
（
"UTF-8"
，
"gbk"
，
$a
）；
我们执行这段代码的行结果如图8-3所示。
图 8-3
可以看到第一次输出$a变量，1和2都被正常输出，当使用iconv（）函数转换编码后，从chr（130）字符开始之后的字符串都没有输出，已经被成功截断。经过笔者fuzz测试，当我们文件名中有chr（128）到chr（255）之间都可以截断字符。
这种截断有很多利用常见，下面我们来看一个真实的案例，乌云平台漏洞【建站之星模糊测试实战之任意文件上传漏洞】，漏洞编号WooYun-2014-48293，漏洞作者为felixk3y，漏洞发生在/module/mod_tool.php文件第89行起，img_create（）函数，代码如下：
public function img_create
（）
{
    $file_info =& ParamHolder
：：
get
（
'img_name'
，
array
（），
PS_FILES
）；
    if
（
$file_info['error'] > 0
）
{
        Notice
：：
set
（
'mod_marquee/msg'
，
__
（
'Invalid post file data
！
'
））；
        Content
：：
redirect
（
Html
：：
uriquery
（
'mod_tool'
，
'upload_img'
））；
    }
    if
（！
preg_match
（
'/\.
（
'.PIC_ALLOW_EXT.'
）
$/i'
，
$file_info["name"]
））
{
        Notice
：：
set
（
'mod_marquee/msg'
，
__
（
'File type error
！
'
））；
        Content
：：
redirect
（
Html
：：
uriquery
（
'mod_marquee'
，
'upload_img'
））；
    }
    if
（
file_exists
（
ROOT.'/upload/image/'.$file_info["name"]
））
{
        $file_info["name"] = Toolkit
：：
randomStr
（
8
）
.strrchr
（
$file_info["name"]
，
"."
）；
        }
        if
（！
$this->_savelinkimg
（
$file_info