### 0xF8070 Physical Address (PA) and Code Fetch in SMM

#### Legacy SMI Handlers Calling Out of SMRAM
- **Exploit at the OS Level**: An exploit at the operating system level can store a payload in the F-segment below 1 MB (at physical address 0xF8070).
- **Reprogramming PAM for F-Segment**: The exploit must also reprogram the Page Attribute Memory (PAM) for the F-segment.
- **Triggering SW SMI**: The exploit then triggers a "SW SMI" via the APMC port (I/O 0xB2).
- **SMI Handler Execution**: The SMI handler performs a `CALL 0F000:08070` in System Management Mode (SMM).

#### BIOS SMM Privilege Escalation Vulnerabilities
- **Multiple Issues in SMI Handlers**: There are 14 identified issues in just one SMI handler, highlighting the need for better security practices in SMI handlers.
- **System Management Mode Design and Security Issues**:
  - **Branch Outside of SMRAM**: Function pointers outside of SMRAM (e.g., DXE SMI) can be exploited.
  - **Function Pointers in ACPI NV Area**: 
    1. Read function pointer from ACPI Non-Volatile Storage (NVS) memory (outside SMRAM).
    2. Call the function pointer, which points to a payload outside SMRAM.

### Attacking Intel BIOS

#### UEFI Secure Boot
- **BIOS Attack Surface**:
  - **FW/BIOS**
  - **SMI Handlers**
  - **SPI Flash**
  - **HW Config/Protection**
  - **Secure Boot**
  - **BIOS Update**
  - **BIOS Settings (NVRAM, Variables)**
  - **Option ROMs**
  - **Firmware Volumes / PE Executable**

#### Secure Boot Key Hierarchy
- **Platform Key (PK)**: Verifies Key Exchange Keys (KEKs) and is typically the platform vendor's certificate.
- **Key Exchange Keys (KEKs)**: Verify the authorized and forbidden databases (db and dbx).
- **Authorized Database (db)**: Contains X509 certificates and SHA1/SHA256 hashes of allowed images.
- **Forbidden Database (dbx)**: Contains X509 certificates and SHA1/SHA256 hashes of revoked images.

#### Secure Boot Configuration
- **Platform Key (Root Key) Validation**:
  - If the PK variable exists in NVRAM, set `SetupMode` to `USER_MODE`.
  - If not, set `SetupMode` to `SETUP_MODE`.

- **SecureBootEnable Variable**:
  - If `SecureBootEnable` exists in NVRAM and is set to `SECURE_BOOT_ENABLE` with `SetupMode` as `USER_MODE`, set `SecureBoot` to `ENABLE`.
  - Otherwise, set `SecureBoot` to `DISABLE`.

#### First Public Windows 8 Secure Boot Bypass
- **Modifying Platform Key in NVRAM**:
  - Corrupt the Platform Key EFI variable in NVRAM by modifying its name or Vendor GUID.
  - The `AuthenticatedVariableService` DXE driver enters `SETUP_MODE` when the correct "PK" EFI variable cannot be located, setting `SecureBoot` to `DISABLE`.

- **Exploit Programs SPI Controller & Modifies SPI Flash**:
  - Modify the secure boot firmware or configuration in ROM.
  - Install a UEFI bootkit on the ESP (EFI System Partition).
  - The modified firmware does not enforce secure boot.

#### Disabling Secure Boot
- **SecureBootEnable UEFI Variable**:
  - When turning Secure Boot ON/OFF, the `SecureBootEnable` variable should change.
  - However, if the `SecureBootEnable` variable is not present, the BIOS stores the Secure Boot Enable flag in the SPI Flash.

- **Comparing SPI Flash Images**:
  - Dump SPI flash with Secure Boot ON and OFF.
  - Compare the two SPI flash images to identify changes.

- **Better Method**:
  - Use tools like `chipsec_util.py` to dump, decode, and compare SPI flash images.

#### Secure Boot: Image Verification Policies
- **DxeImageVerificationLib** defines policies applied to different types of images and on security violations.
- **Image Types and Policies**:
  - `IMAGE_FROM_FV`: Always execute.
  - `IMAGE_FROM_FIXED_MEDIA`, `IMAGE_FROM_REMOVABLE_MEDIA`, `IMAGE_FROM_OPTION_ROM`: Various policies like `ALWAYS_EXECUTE`, `NEVER_EXECUTE`, etc.

- **Storing Image Verification Policies in Setup**:
  - Read the 'Setup' UEFI variable and look for specific sequences.
  - Modify bytes corresponding to policies to `00` (ALWAYS_EXECUTE) and write the modified 'Setup' variable.

#### Bypassing Secure Boot via PE/TE Header Confusion
- **PE/COFF vs. TE Headers**:
  - BIOS allows running TE images without signature checks.
  - Convert a malicious PE/COFF EFI executable to TE format and replace the OS boot loader with the resulting TE EFI executable.

- **Other Secure Boot Problems**:
  - **CSM Module**: Allows legacy OS boot through unsigned MBR and option ROMs.
  - **Mitigations**: Force CSM to Disabled if Secure Boot is Enabled.

#### Handling Sensitive Data
- **BIOS and Pre-OS Applications**:
  - Store keystrokes in the legacy BIOS keyboard buffer.
  - Some BIOSes do not clear the keyboard buffer, leading to potential exposure of pre-boot authentication passwords.

- **Pre-Boot Passwords Exposure**:
  - Use `chipsec_main -m common.bios_kbrd_buffer` to check for exposed passwords in the keyboard buffer.

#### SMI Handlers
- **Coordination with Independent BIOS Vendors and Platform Manufacturers**:
  - Multiple UEFI BIOS SMI handler vulnerabilities require kernel privileges to exploit.
  - Suitable signed kernel drivers can act as confused deputies, allowing user-mode apps to access hardware resources.

#### References
- **BIOS Security Guidelines and Best Practices**:
  - CHIPSEC framework: https://github.com/chipsec/chipsec
  - MITRE Copernicus tool
  - NIST BIOS Protection Guidelines (SP 800-147 and SP 800-147B)
  - IAD BIOS Update Protection Profile
  - Windows Hardware Certification Requirements
  - UEFI Forum sub-teams: USST (UEFI Security) and PSST (PI Security)

- **BIOS Security Research**:
  - Various research papers and presentations on BIOS and UEFI security, including those from BlackHat, DEF CON, and other conferences.

### Thank You!
For more information and tools, refer to the provided references and resources.