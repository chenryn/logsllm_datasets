identifiers 
to 
370
than 
independence; 
the  comprehensive 
it  can  be  easily  applied 
High  compatibility  of  XIAO  in  analyzing  code  in  different 
development  environments  (such  as  different  build  systems)  is 
achieved with its compiler-independent lightweight and pluggable 
parsers.  XIAO  has  built-in  parsers  for  the  C/C++  and  C# 
languages. We define an open Application Programming Interface 
that  allows  the  easy  plug-in  of  parsers  to  support  various 
programming languages. It should be noted that the parsing task is 
lighter 
functionalities  offered  by 
compilers.  Compared  with  approaches  of  parse-tree-based  clone 
detection such as Deckard [14][9], our approach has the advantage 
of  compiler 
to 
accommodate different language variants and build environments, 
which  typically  exist  in  real  settings  of  software  development, 
especially for C/C++ [7]. 
High explorability of XIAO in supporting users to easily explore 
and  manipulate  detected  code  clones  is  achieved  with  its  well-
designed  user  interfaces  including  visualization  support.  We 
design a simple heuristic to define the level of difference between 
cloned snippets. We also use the metric to rank clones to prioritize 
the  review  of  clones  to  identify  bugs.  XIAO  includes  clone 
visualization  to  clearly  show  the  matching  blocks  and  the  block 
types of a clone pair. This way, users can quickly capture whether 
there is any difference between the two cloned snippets, what kind 
of difference it is, and how much difference there is. XIAO also 
includes a tagging  mechanism to  help coordinate joint efforts of 
reviewing code clones from multiple engineers. 
We have released XIAO to Microsoft engineers since April 2009 
and  a  great  number  of  Microsoft  engineers  from  different  teams 
have  used  it.  XIAO  has  been  integrated  into  Microsoft  Visual 
Studio  2012,  to  be  benefiting  a  huge  number  of  engineers  in 
industry. 
The  rest  of  this  paper  is  organized  as  follows.  We  present  our 
code-similarity  metric  in  Section  2.  We  introduce  our  clone-
detection  algorithm  and  visualization/reporting  in  Section  3  and 
Section 4, respectively. We present our empirical study in Section 
5  and  report  several  real-use  scenarios  in  Section  6.  Section  7 
discusses related work and Section 8 concludes. 
2.  CODE SIMILARITY METRIC 
Considering possible edits that can be applied to source code after 
it has been copied and pasted, we have identified three important 
inconsistencies  that  are  present  in  near-miss  clones  and  that 
should be measured: 
1.  Statement-level difference, which may be caused by adapting 
the copied code to the coding style of the source file where it 
is copied to, e.g., a few identifiers are renamed; 
Inserted/deleted/modified statements, which can be the result 
of  changes  to  the  code  necessary  for  fixing  bugs  or 
implementing new features; 
2. 
3.  Disordered  statements,  which  may  be  related  to  either  a 
change of code logic or coding style. 
We define our code-similarity metric to take these three types of 
inconsistencies into account. Before we define our metric, we next 
define three binary relationships between source-code statements. 
Let (cid:963) be  an  alphabet  whose  symbols  are  syntactical  tokens,  and 
(cid:149) (cid:1488) (cid:963)(cid:1499)be a source-code statement. 
Definition  1  (Exact-Match)  Let  (cid:1871)(cid:2869) and  (cid:1871)(cid:2870)  be  two  source-code 
statements; let (cid:513)(cid:1871)(cid:513) be the token length of the statement s, and s[i] 
be  the  i-th  token  of  s.  Then (cid:149)(cid:2869)and (cid:1871)(cid:2870) are  Exact-Match-related  if 
and only if (cid:513)(cid:1871)(cid:2869)(cid:513) (cid:3404) (cid:513)(cid:1871)(cid:2870)(cid:513)(cid:481) (cid:1853)(cid:1866)(cid:1856)(cid:3)(cid:1871)(cid:2869)(cid:4670)(cid:1861)(cid:4671) (cid:3404) (cid:1871)(cid:2870)(cid:4670)(cid:1861)(cid:4671)(cid:481) (cid:882) (cid:3407) (cid:1861) (cid:3409) (cid:513)(cid:1871)(cid:2869)(cid:513). 
Definition  2  (Transformed-Match)  Let (cid:1846)(cid:483) (cid:963) (cid:1372) (cid:963)(cid:3) be  a  token-
mapping  function  (e.g.,  mapping  several  different  identifiers  to 
the  same  token).  The  statements  (cid:1871)(cid:2869) and  (cid:1871)(cid:2870)  are  Transformed-
Match-related if and only if (cid:513)(cid:1871)(cid:2869)(cid:513) (cid:3404) (cid:513)(cid:1871)(cid:2870)(cid:513)(cid:481) (cid:1853)(cid:1866)(cid:1856)(cid:3)(cid:1846)(cid:4666)(cid:1871)(cid:2869)(cid:4670)(cid:1861)(cid:4671)(cid:4667) (cid:3404) (cid:1846)(cid:4666)(cid:1871)(cid:2870)(cid:4670)(cid:1861)(cid:4671)(cid:4667)(cid:481)
(cid:882) (cid:3407) (cid:1861) (cid:3409) (cid:513)(cid:1871)(cid:2869)(cid:513). 
Definition 3 (α-Transformed-Match) The statements (cid:1871)(cid:2869)  and  (cid:1871)(cid:2870) 
they  are 
are  α-Transformed-Match-related 
Transformed-Match-related  and 
least  (cid:2009) (cid:1499)
(cid:513)(cid:1871)(cid:2869)(cid:513)(cid:3)(cid:4666)(cid:134)(cid:135)(cid:144)(cid:145)(cid:150)(cid:135)(cid:134)(cid:3)(cid:131)(cid:149)(cid:3)(cid:1864)(cid:4667) distinct  indexes  (cid:1861)(cid:2869)(cid:481) (cid:485) (cid:481) (cid:1861)(cid:3039)  such  that  (cid:1871)(cid:2869)(cid:4670)(cid:1861)(cid:3038)(cid:4671) (cid:3404)
(cid:1871)(cid:2870)(cid:4670)(cid:1861)(cid:3038)(cid:4671)(cid:481) (cid:882) (cid:3407) (cid:1863) (cid:3409) (cid:1864). 
Intuitively,  two  statements  are  Exact-Match-related  if  they  are 
identical  after  code  formatting  is  ignored,  and  are  Transformed-
Match-related if they are identical after both code formatting and 
identifier  renaming  are 
ignored.  The  α-Transformed-Match 
relationship provides the flexibility  for controlling the degree on 
what  percentage  of  renamed  identifiers  between  two  matched 
statements  are  tolerated.  In  fact,  the  α-Transformed-Match 
relationship is equal to the Transformed-Match relationship when 
(cid:573) (cid:3404) (cid:882) , and equal to the Exact-Match relationship when (cid:573) (cid:3404) (cid:883). 
We  next  illustrate  these  three  relationships  with  examples. 
Consider that the parameterized versions of three statements A, B, 
and C listed below are identical. 
if  and  only 
if 
there  exist  at 
A: If (foo(a, b, c) == null)
A1: If ( T ( T, T, T) == T)
B: If (foo(a, b1,c1) == null)
B1: If ( T ( T, T, T) == T)
C: If (bar(x, y, z) == null)
C1: If ( T ( T, T, T) == T)
Original statements
Parameterized statements
Consequently,  any  two  of  them  are  Transformed-Match-related. 
Each  statement  has  13  tokens.  Statements  A  and  B  have  11 
identical tokens out of the 13 tokens (84.6%); Statements A and C 
have 9 identical tokens out of the 13 tokens (69.2%). If α = 0.6, A 
is α-Transformed-Match-related to both B and C; if α = 0.8, A is 
α-Transformed-Match-related to only B. 
In  practice,  Statements  A  and  C  could  have  a  totally  different 
semantic and could not be caused by copy-and-paste, thus being 
of low interest to users who focus on copy-and-paste clones. 
Definition  4  (Disordered-Match-Score,  in  short  as  DMS) 
Consider two code snippets (cid:1845)(cid:2869) and (cid:1845)(cid:2870) where m distinct statements 
in (cid:1845)(cid:2869) at  positions (cid:1861)(cid:2869) (cid:3407) (cid:1861)(cid:2870) (cid:3407) (cid:1710) (cid:3407) (cid:1861)(cid:3040) match  m  distinct  statements 
at positions (cid:1861)(cid:1314)(cid:2869)(cid:481) (cid:1861)(cid:1314)(cid:2870)(cid:481) (cid:1710) (cid:481) (cid:1861)(cid:1314)(cid:3040) in (cid:1845)(cid:2870). Let d be the number of inversion 
pairs1 in the index sequence (cid:4668)(cid:1861)(cid:2869)
(cid:4593) (cid:4669). The Disordered-Match-
(cid:4593) (cid:1710) (cid:1861)(cid:3040)
Score (DMS) of (cid:1845)(cid:2869) and (cid:1845)(cid:2870) is defined as 
(cid:4593) (cid:481) (cid:1861)(cid:2870)
(cid:1830)(cid:1839)(cid:1845)(cid:4666)(cid:1845)(cid:2869)(cid:481) (cid:1845)(cid:2870)(cid:4667) (cid:3404)
(cid:2870)(cid:1499)(cid:3031)
(cid:3040)(cid:2879)(cid:2869)
                                        (1) 
The  DMS  measures  the  structure  difference  of  the  two  code 
snippets.  The  smaller  the  value  of  the DMS  is,  the  more  similar 
the structures of the two code snippets are because there are fewer 
disordered  statements.  The  possible  value of  the  DMS is  from  0 
(when  there  is  no  inversion  pair)  to  m  (when  the  order  is  fully 
reversed). Figure 2 shows an example of two code snippets with 
disordered statements: the statement in Line 4 on the left snippet 
is moved to Line 2 on the right. The statements in Lines 1 to 5 on 
the  left  snippet  correspond  to  the  statements  in  Lines  1,  3, 4, 2, 
and  5  on  the  right  snippet.  The  inversion  pairs  of  this  index 
sequence are (3, 2) and (4, 2). The DMS of the two snippets in the 
example is 1 (being 2*2/4(cid:4667)(cid:3). 
1   for (i = 0; i < 10; i++) {
2       a++;
3       b++;
4       c=foo(a, b);
5       d=bar(a, b, c);}
1   for (i = 0; i < 10; i++) {
2       c=foo(a, b);
3       a++;
4       b++;
5       d=bar(a, b, c);}
Figure 2. Example of disordered statements 
Definition 5 (α-Transformed Similarity) Let (cid:513)(cid:1845)(cid:513) be the number 
of statements of a code snippet S. The α-Transformed Similarity 
between two snippets (cid:1845)(cid:2869)and (cid:1845)(cid:2870) is defined as 
(cid:2009)(cid:1845)(cid:1861)(cid:1865)(cid:4666)(cid:1845)(cid:2869)(cid:481) (cid:1845)(cid:2870)(cid:4667) (cid:3404) (cid:884)
(cid:3040)(cid:2879)(cid:3087)(cid:3005)(cid:3014)(cid:3020)(cid:4666)(cid:3020)(cid:3117)(cid:481)(cid:3020)(cid:3118)(cid:4667)
                           (2) 
(cid:513)(cid:3020)(cid:3117)(cid:513)(cid:2878)(cid:513)(cid:3020)(cid:3118)(cid:513)
where m is as in Definition 4 and (cid:2016) is a penalty coefficient to the 
DMS.  We  use  the  α-Transformed  similarity  to  measure  code 
similarity hereafter. 
(Transformed  Similarity)  The  Transformed 
Definition  6 
Similarity, (cid:1846)(cid:1845)(cid:1861)(cid:1865)(cid:4666)(cid:1845)(cid:2869)(cid:481) (cid:1845)(cid:2870)(cid:4667) is defined as its α-Transformed Similarity 
with (cid:2009) (cid:3404) (cid:2016) (cid:3404) (cid:3)(cid:882). 
Definition 7 (Clone Pair) Code snippets S1 and S2 are a clone pair 
when  (cid:2009)(cid:1845)(cid:1861)(cid:1865)(cid:4666)(cid:1845)(cid:2869)(cid:481) (cid:1845)(cid:2870)(cid:4667) (cid:3410) (cid:2011)(cid:481) (cid:883) (cid:3410) (cid:2011) (cid:3408) (cid:882) ,  where  γ  is  a  configurable 
similarity threshold. 
Definition  7  satisfies  the  requirement  posed  at  the  beginning  of 
this section. It controls the statement-level difference by the value 
of  (cid:573) .  It  controls  the  number  of  inserted/deleted  statements 
proportionally to the size of the code snippets by the value of (cid:576); 
the  bigger  the  snippets,  the  more  inserted/deleted  statements  are 
tolerated.  The  penalty  coefficient (cid:581) permits  users  to  control  the 
amount of disordered statements in a clone pair. 
3.  CLONE-DETECTION ALGORITHM 
Figure  3  shows  an  overview  of  our  clone-detection  algorithm, 
consisting  of  four  steps:  preprocessing,  coarse  matching,  fine 
matching, and pruning. Our algorithm takes one codebase as input 
and  produces  code  clones  detected  from  the  codebase  (our 
Code 
base
 Source Code 
Parser
Preprocessing
Parameterizer
Indexer
Statement 
Hash 
Dictionary
Rough 
Code 
Clones
Matching
Figure 3. Overview of XIAO’s algorithm of code-clone detection 
Candidates
Matching
Pruning
Fine 
Clone 
1 http://en.wiktionary.org/wiki/inversion_pair 
371
algorithm can handle multiple codebases by treating them as one 
codebase). 
In  the  preprocessing  step,  the  source-code  parser  extracts  the 
location  information  of  all  the  functions  and  their  statements. 