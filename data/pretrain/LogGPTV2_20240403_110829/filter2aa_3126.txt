# MesaTEE SGX: Redefining AI and Big Data Analysis with Intel SGX

## Speaker
**Yu Ding**  
Staff Security Scientist, Baidu X-Lab  
May 29, 2019

### About Me
- [Personal Website](https://dingelish.com)
- [GitHub Profile](https://github.com/dingelish)
- [Rust-SGX SDK](https://github.com/baidu/rust-sgx-sdk)

#### Background
- Security Scientist at Baidu X-Lab
- Rust Enthusiast
- Ph.D. in Exploit and Mitigation
- Working on Rust-SGX Projects

## Presentation Overview

### MesaTEE SGX
MesaTEE SGX is a framework that leverages Intel SGX to redefine AI and big data analysis by providing a secure and privacy-preserving environment.

### Intel SGX for Privacy-Preserving Computation
#### Background of Intel SGX
- **Introduction**: Intel Software Guard Extensions (Intel SGX) is a set of instructions that increase the security of application code and data.
- **Challenges**:
  - **Hard Limitations**:
    - No syscall
    - No RDTSC
    - No CPUID
    - Limited EPC memory (128 MB)
    - No mprotect
  - **Soft Limitations**:
    - Vulnerable to memory bugs
    - Requires memory safety guarantees

#### Key Features
- **Confidentiality and Integrity**: Ensures data remains confidential and unaltered.
- **Remote Attestation**: Verifies the integrity of the enclave and establishes trust.
- **Sealing and Attestation**: Protects data even when it is not in use.

### Hybrid Memory Safety
#### Rule-of-Thumb
- Unsafe components must not taint safe components, especially public APIs and data structures.
- Unsafe components should be as small as possible and decoupled from safe components.
- Unsafe components should be explicitly marked and ready for upgrades.

#### Practice in SGX
- **Software Stack**:
  - **Kernel**: N/A
  - **Syscall**: OCALL (statically controlled)
  - **Libc**: Intel – SGX tlibc
  - **Runtime**: Rust-SGX sgx_tstd/…
- **Example**: MesaPy, a ported version of PyPy with strong bound checks and customized runtime.

### Towards a Secure and Trustworthy AI/Big Data Analysis Framework
#### What is Trustworthiness?
- **Definition**: Trustworthy computing systems are inherently secure, available, and reliable.
- **Trusted Computing**: The system consistently behaves as expected, enforced by hardware and software.

#### Achieving Trustworthiness with Intel SGX
- **Gradient-Boosting Decision Tree (gbdt-rs)**:
  - ~2000 lines of Rust code
  - Well-documented and self-explanatory
  - 7x faster than XGBoost on a single thread
  - Seamless integration with SGX
- **MesaPy SGX**:
  - Ported PyPy with strong bound checks
  - Disabled all syscalls
  - Customized runtime with limited OCALLs
  - Elimination of indeterminism
  - Formal verification
  - Replacement of unsafe libraries with Rust crates

### Solution Overview
- **Trust and TEE**: Use Intel SGX to establish a trusted execution environment.
- **Secure Authentication/Authorization**: Ensure secure and trusted channels.
- **Hybrid Memory Safety**: Build a system with robust memory safety.
- **Trustworthy AI/Big Data Analysis**: Provide a secure and trustworthy framework for AI and big data analysis.

### Collaboration
- **Baidu XuperData**: Working on applications with Baidu XuperData.

### Q&A
Thank you for your attention. I am open to any questions.

---

**Yu Ding**  
Security Scientist, Baidu X-Lab