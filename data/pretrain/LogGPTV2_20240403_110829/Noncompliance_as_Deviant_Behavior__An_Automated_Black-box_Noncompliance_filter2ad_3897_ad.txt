80899
33011
21700
37191
75361
39953
35099
E
# of states
# of tran-
sitions
21
35
20
21
21
21
21
35
28
34
21
17
21
16
baseline testing approaches?
and base station. We replace the NAS and RRC FSM implementa-
tions of the canonical srsLTE stack with our modified stack and
create interfaces between the stack and adapter to forward NAS
and RRC packets in both directions. The other layers of srsLTE
are kept intact. We use USRP B210 as the software-defined radio
peripheral for OTA transmission. The FSM equivalence checker is
developed using the NuXmv model checker [14] and a python 2.7
script as the wrapper. Table 7 summarizes our efforts of modifying
the tools and creating new components for DIKEUE.
7 EVALUATION
To evaluate the performance of DIKEUE, we aim to answer the
following research questions in the subsequent sections:
• RQ1. How effective is DIKEUE in finding deviant behaviors?
• RQ2. How does DIKEUE perform compared to the existing
• RQ3. What are the effectiveness and performance of DIKEUE
components, i.e., FSM inference module and equivalence checker?
Evaluation setup. We use a laptop with Intel i7-3750QCM CPU
and 32 GB DDR3 RAM to run the FSM inference module with USRP.
We use the same configuration laptop for FSM equivalence checker.
Devices. We use 14 different COTS devices from 5 vendors (shown
in Table 8) for evaluation. Our test corpus includes basebands from
5 vendors: Qualcomm, Intel, MediaTek, HiSilicon, and Exynos. The
devices range from Android 6.0 to Android 9.0, Apple iPhone XS,
USB Wi-Fi Modem, and to a cellular development board.
8 DEVIATIONS (RQ1)
DIKEUE has been able to uncover 17 distinct deviations in all the
14 devices tested. Among them 15 are new and 2 are uncovered in
previous works but on different devices. Based on the root cause, we
categorize the issues into two groups: (i) deviations from the stan-
dards; (ii) underspecifications. Note that, we consider conflicting
specifications as a part of underspecifications. Furthermore, based
on the impact we categorize the issues as: exploitable attacks and
interoperability issues. The attacks are constructed manually from
the deviant traces. We summarize DIKEUE’s findings in Table 3.
8.1 Exploitable deviations
Among the deviations identified by DIKEUE, 11 are exploitable. In
the following we discuss some of the issues in detail.
8.1.1 Replayed GUTI_reallocation: We identified the exploitable devi-
ations E1 and E2 (from Table 3) in total 9 devices from 2 different
vendors. In E2, the implementation accepts replayed GUTI_reallocation
anytime after the attach procedure, whereas in E1 the implementa-
tion accepts GUTI_reallocation at a specific state– after every sm_command
message. Note that, all the devices affected by E2 are also affected
by E16 and accept replayed sm_command as well, posing the imple-
mentations in vulnerable situations.
Root cause analysis. In TS 24.301 [9], section 4.4.3.2 it is explic-
itly stated- “Replay protection must assure that one and the same
NAS message is not accepted twice by the receiver. Specially, for a
given security context." The deviant behavior, therefore, is a clear
mismatch from the standards.
Adversary assumptions. To successfully carry out an attack ex-
ploiting this vulnerability, the adversary is required to set up a fake
base station [39, 51] or Man-in-the-Middle (MitM) relay [30, 49]
that can replay previously saved messages.
Figure 5: Steps of the replayed GUTI reallocation attack
Attack Description. This vulnerability can be exploited in two
ways: (1) The adversary, using a sniffer [30, 49] or MitM relay [49],
captures the GUTI_reallocation message for a given security context.
Later on when the MME sends GUTI_reallocation again for refreshing
the GUTI, the attacker drops this packet and replays the saved
GUTI_reallocation to the UE. The replayed packet will be successfully
accepted by the victim UE. Since the GUTI_reallocation_complete message
does not contain the agreed-upon GUTI, the MME also assumes the
completion of the procedure causing a GUTI mismatch between the
UE and the core network; (2) For the second attack, the adversary,
using a fake base station, connects to all the UEs in a particular cell
area and replays captured GUTI_reallocation to all of them. The victim
UE accepts this message and responds with GUTI_reallocation_complete,
whereas all the other UEs in the cell do not respond, violating the
unlinkability property and exposing the victim’s presence in the
cell area. The steps of both the attacks are shown in Figure 5.
Impact. The first attack causes a GUTI mismatch between the
UE and MME and forces a victim user to use a fixed GUTI for an
extended time. During this time, if the core network tries paging
the UE with new GUTI, the UE will not be able to receive any
such notifications or incoming services up to the point the device
initiates an attach procedure (which can be done by restarting the
phone) or a tracking area update procedure (due to handover), or
a service procedure (initiating a service from the phone), or a UE
initiated detach procedure (detaching from the core network). Since
a UE often does not invoke a tracking area update even up to a
week [51], and may not generate service during idle hours, during
the period the GUTI remains desynchronized and the UE will keep
running into this silent consistent denial-of-service attack. Using
the second attack, it is also possible for an adversary to track or
detect the presence of a victim UE in a cell utilizing the different
responses of the same GUTI_reallocation packet.
Target UEMMEAttach procedure completedGUTI Reallocation CommandGUTI Reallocation Complete......GUTI Reallocation CommandReplayed GUTI Reallocation CommandGUTI Reallocation CompleteOld GUTIGUTI desynchronizationOther UEReplayed GUTI Reallocation CommandGUTI Reallocation CompleteReplayed GUTI Reallocation Commandno responseAttackerFake base stationSession 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea10908.1.2 Plaintext message acceptance after security context: The de-
viations EI3 and EI4 in Table 3 are identified in two different ven-
dors. The affected devices respond to plaintext identity_request and
auth_request messages even if the security context has been established.
No other vendors accept plaintext messages after the establishment
of the security context. Note that previous work has shown attacks
exploiting the plaintext identity_request and auth_request messages. But
those messages are sent by the adversary before the security con-
text is established, whereas our findings show some devices accept
those plaintext messages even after the security context is set up.
Root cause analysis. Initially, it may appear to be a straightfor-
ward deviation from the specification; however, a deeper analysis
of the specification paints out a different picture. In TS 24.301 [9]–
the specification for the NAS layer, it is stated that plaintext iden-
tity_request shall be processed by the UE until the secure exchange
of NAS messages for the NAS signaling connection. Once the se-
cure exchange of NAS messages has been established, the receiving
entity shall not process any plaintext NAS message. However, in
the security specification TS 33.401 [8], it is explicitly stated that
all NAS signaling messages except the listed messages in TS 24.301
(the list includes identity_request, auth_request) as exceptions shall be
integrity-protected. This implies that plaintext identity_request and
auth_request can be accepted by the UE even after the security con-
text has been established. These conflicting standards cause the
developers to pick one of the options, and in this case, it seems
the security standard (TS 33.401) has been followed. Therefore,
conflicting specifications are the root cause of this issue.
Adversary assumptions. The attacker needs the capability to set
up a fake base station and craft plaintext messages. We assume the
adversary knows the victim UE’s C-RNTI [49] but does not need to
eavesdrop or capture any messages apriori. The adversary can also
overshadow any downlink message between the network and the
UE to carry out the attack [22].
Attack description. The adversary uses a fake base station to
connect to a victim UE and sends a crafted plaintext auth_request or
identity_request message. Alternatively, the adversary can also over-
shadow any downlink message with plaintext identity_request or auth_request
even after the security context is established. The UE accepts these
messages and replies with plaintext identity_response containing the
IMSI/IMEI of the victim device, or replies with plaintext auth_response.
Impact. The exposure of IMSI even after security context estab-
lishment is particularly fatal. This is because the illegal exposure of
IMSI provides an edge to the adversary to further track the location
of the user or intercept phone calls and SMS using fake base sta-
tions [30, 31] or MitM relays [49]. Furthermore, it has been shown
that auth_request can be used to leak private information, including
subscriber activity monitoring [13], launching DoS, and tracking a
user [13, 37]. Implementations accepting plaintext auth_request are,
therefore, vulnerable to these attacks.
Inappropriate state reset. In exploitable issues E11-E14 (of
8.1.3
Table 3), out-of-sequence, downgraded, or replayed RRC layer mes-
sages induce unwarranted reset of the affected devices’ state ma-
chines, causing connection drops.
Root cause analysis and impact. The root cause for all four is-
sues boils down to the underspecification of the standard. In the
RRC [2] specification, it is stated that whenever a device receives a
message not compatible with the protocol state, the actions are im-
plementation dependent. Due to this underspecification, different
implementations treat these non-compatible messages in different
ways. Devices that are more restrictive than others reset the FSM
state, restart the connection, go through authentication and key
agreement again whenever such a non-compatible message is re-
ceived. This creates the pathway to unintentional DoS in which
an attacker can send such unwarranted (plaintext/replayed/out-of-
sequence) messages from a fake base station intermittently.
Adversary assumptions and attack description. Similar to pre-
vious attacks, this attack assumes the adversary knows the victim’s
C-RNTI and can craft plaintext messages or replay previously cap-
tured messages. The attacker connects to the victim device and
based on the implementation, either sends a replayed or an out-of-
sequence or a downgraded or a plaintext RRC message. Each time
the attacker sends a new adversarial RRC message, the victim just
becomes unresponsive for 4-5 seconds and then reconnects to the
actual base station. To maintain a semi-persistent DoS, the attacker
will have to keep replaying plaintext/replayed/out-of-sequence mes-
sages at every 4-5 seconds interval, causing disruption of regular
operations and fast battery depletion of the victim UE.
8.2 Interoperability issues
DIKEUE uncovered 3 potential interoperability issues EI3, EI4, I15
(shown in Table 3). Due to space constraints, we discuss only I15
related to the handling of RRC_reconf message. RRC Reconfigura-
tion is the key step in establishing/modifying radio connections
between the UE and network. In most of the devices, RRC_reconf
message is accepted both before and after the attach procedure
to create/modify a radio connection. However, DIKEUE identified
two UEs where either RRC_reconf message is exclusively accepted
either before (MediaTek) or after the attach procedure (HiSilicon)
is completed. This may create interoperability issues if the core
network sends RRC_reconf in the other way around. In such a case,
devices from one of the vendors (i.e., MediaTek or HiSilicon) may
fall into certain connectivity issues. From our experiments, a major
network operator sends the RRC_reconf exclusively before the attach
procedure is completed. The root cause of these issues is under-
specification as TS 36.311 [2] states that the only condition for RRC
connection reconfiguration is the UE has to be in the connected
state with the base station. But a UE can be in the connected state
both before and after the attach procedure is completed.
8.3 Other deviant behaviors
DIKEUE also uncovered deviant behaviors O6 - O10 in Table 3,
whose implications are not yet certain. For instance, in O9, some
devices respond to replayed auth_request messages even after an in-
valid sm_command is received, whereas other devices do not. In the
former case, the device accepts such replayed auth_request message
until a valid sm_command message is received. The acceptance of these
replayed messages in that short time interval do not apparently in-
duce state changes or undesired behavior. Nonetheless, these issues
resulting from underspecification of the standards should be further
analyzed for verifying the impact of these deviant behaviors.
8.4 Previous issues
We have also found 2 previously discovered issues (E16 and E17),
that have not been resolved yet. For instance, in E17, Huawei P8lite
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1091Issue
Description
Root cause
at
(E1) Replayed GUTI_reallocation
specific sequence
(E2) Replayed GUTI_reallocation any-
time
(EI3) Plaintext auth_request
(EI4) Plaintext identity_request
(E5) Selective replay of sm_command
(O6) DL_NAS_transport without
RRC security
(O7) Attach procedure without RRC security
before at-
(O8) GUTI_reallocation
tach procedure completion
(O9) auth_response after sm_reject
(O10) auth_seq_failure reply
RRC_reconf
Out-of-sequence
(E11)
causes unresponsiveness
(E12) Replayed RRC_reconf causes un-
responsiveness
(E13)
RRC_sm_command
responsiveness
(E14) Downgraded RRC_sm_command
causes unresponsiveness
Out-of-sequence
causes un-
(I15) Overly restrictive RRC_reconf
Accepts replayed GUTI_reallocation when sent
immediately after a sm_command
Accepts replayed GUTI_reallocation when sent
immediately after a sm_command
Accepts plaintext auth_request after security con-
text has been established
Accepts plaintext identity_request (identification
parameter IMSI) after security context has
been established
UE accepts replayed sm_command up to the com-
pletion of of the attach procedure. After attach
procedure, the replayed sm_command is not
accepted anymore
UE performs Downlink NAS Transport procedure even be-
fore RRC layer security has been established
UE completes the attach procedure before RRC layer se-
curity
UE performs GUTI_reallocation even before the
attach procedure has been completed or RRC
security has been established
UE replies to replayed auth_request even after se-
curity mode command procedure
After secure context has been established, some imple-
mentations reply with auth_MAC_failure while
others do not reply
RRC_reconf
makes all other symbols unresponsive
Replayed RRC_reconf causes the UE to be unre-
sponsive until new attach procedure is started
NAS
RRC_sm_command
sm_command makes the device unresponsive
After a downgraded RRC_sm_command,
the de-
vice has to start attach procedure again
For some UE, RRC_reconf works exclusively be-
fore or only after the attach procedure is com-
pleted
Accepts replayed sm_command
context has been established
UE accepts downgraded RRC_sm_command and
bypasses the whole RRC layer security
before RRC_sm_command
after security
before
6
s
u
x
e
N
"
"
"
1
C
T
H
6
S
y
x
a
l
a