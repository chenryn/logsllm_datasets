    int
    _IO_flush_all_lockp (int do_lock)
    {
      int result = 0;
      struct _IO_FILE *fp;
      int last_stamp;
      fp = (_IO_FILE *) _IO_list_all;
      while (fp != NULL)
        {
            ...
          if (((fp->_mode _IO_write_ptr > fp->_IO_write_base)
    #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T
           || (_IO_vtable_offset (fp) == 0
               && fp->_mode > 0 && (fp->_wide_data->_IO_write_ptr
                        > fp->_wide_data->_IO_write_base))
    #endif
           )
          && _IO_OVERFLOW (fp, EOF) == EOF)   //，如果输出缓冲区有数据，刷新输出缓冲区
        result = EOF;
        fp = fp->_chain; //遍历链表
        }
    ...
    }
通过对`fwrite`分析，我们知道输出缓冲区的数据保存在`fp->_IO_write_base`处，且长度为`fp->_IO_write_ptr-fp->_IO_write_base`，因此上面的`if`语句实质上是判断该FILE结构输出缓冲区是否还有数据，如果有的话则调用`_IO_OVERFLOW`去刷新缓冲区。其中`_IO_OVERFLOW`是vtable中的函数，因此如果我们可以控制`_IO_list_all`链表中的一个节点的话，就有可能控制程序执行流。
可以看出来该函数的意义是为了保证数据不丢失，因此在程序执行退出相关代码时，会去调用函数去刷新缓冲区，确保数据被保存。根据`_IO_flush_all_lockp`的功能，猜测这个函数应该是在程序退出的时候进行调用的，因为它刷新所有FILE的缓冲区。事实上，会`_IO_flush_all_lockp`调用函数的时机包括：
  * libc执行abort函数时。
  * 程序执行exit函数时。
  * 程序从main函数返回时。
再多做一点操作，去看下上述三种情况的堆栈，来进一步了解程序的流程。将断点下在`_IO_flush_all_lockp`，查看栈结构。
首先是abort函数的流程，利用的double free漏洞触发，栈回溯为：
    _IO_flush_all_lockp (do_lock=do_lock@entry=0x0)
    __GI_abort ()
    __libc_message (do_abort=do_abort@entry=0x2, fmt=fmt@entry=0x7ffff7ba0d58 "*** Error in `%s': %s: 0x%s ***\n")
    malloc_printerr (action=0x3, str=0x7ffff7ba0e90 "double free or corruption (top)", ptr=, ar_ptr=)
    _int_free (av=0x7ffff7dd4b20 , p=,have_lock=0x0)
    main ()
    __libc_start_main (main=0x400566 , argc=0x1, argv=0x7fffffffe578, init=, fini=, rtld_fini=, stack_end=0x7fffffffe568)
    _start ()
exit函数，栈回溯为：
    _IO_flush_all_lockp (do_lock=do_lock@entry=0x0)
    _IO_cleanup ()
    __run_exit_handlers (status=0x0, listp=, run_list_atexit=run_list_atexit@entry=0x1)
    __GI_exit (status=)
    main ()
    __libc_start_main (main=0x400566 , argc=0x1, argv=0x7fffffffe578, init=, fini=, rtld_fini=, stack_end=0x7fffffffe568)
    _start ()
程序正常退出，栈回溯为：
    _IO_flush_all_lockp (do_lock=do_lock@entry=0x0)
    _IO_cleanup ()
    __run_exit_handlers (status=0x0, listp=, run_list_atexit=run_list_atexit@entry=0x1)
    __GI_exit (status=)
    __libc_start_main (main=0x400526 , argc=0x1, argv=0x7fffffffe578, init=, fini=, rtld_fini=, stack_end=0x7fffffffe568)
    _start ()
看出来程序正常从main函数返回后，也是调用了`exit`函数，所以最终才调用`_IO_flush_all_lockp`函数的。
再说如何利用，利用的方式为：伪造IO
FILE结构体，并利用漏洞将`_IO_list_all`指向伪造的结构体，或是将该链表中的一个节点（`_chain`字段）指向伪造的数据，最终触发`_IO_flush_all_lockp`，绕过检查，调用`_IO_OVERFLOW`时实现执行流劫持。
其中绕过检查的条件是输出缓冲区中存在数据：
    if (((fp->_mode _IO_write_ptr > fp->_IO_write_base)
    #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T
           || (_IO_vtable_offset (fp) == 0
               && fp->_mode > 0 && (fp->_wide_data->_IO_write_ptr
                        > fp->_wide_data->_IO_write_base))
### 示例--house of orange
FSOP的利用示例，最经典的莫过于`house of orange`攻击方法。下面将通过`house of
orange`攻击方法具体体现vtable劫持和fsop，示例题是东华杯2016-pwn450的note。
先说明一下，程序中使用的`unsorted bin attack`改写`_IO_list_all`，使用`sysmalloc`得到`unsorted
bin`的原理我将不再详细描述，有需要的可以参考[unsorted bin
attack分析](https://www.anquanke.com/post/id/85127)，这里主要集中在vtable的劫持以及FSOP的实现上。
题目是一道菜单题，可以创建、编辑、以及删除堆块，其中只允许同时对一个堆块进行操作，只有释放了当前堆块才可以申请下一个堆块。
在创建函数中，堆块被`malloc`出来后会打印堆的地址，可以使用该函数来泄露堆地址；漏洞在编辑函数中，编辑函数可以输入任意长的字符，因此可以造成堆溢出。
首先要解决如何实现地址泄露，正常来说通过创建函数可以得到堆地址，但是如何得到libc的地址？答案是可以通过申请大的堆块，申请堆块很大时，mmap出来的内存堆块会紧贴着libc，可通过偏移得到libc地址。从下图中可以看到，当申请堆块大小为0x200000时，申请出来的堆块紧贴libc，可通过堆块地址得到libc基址。  
如何得到unsorted bin？想要利用unsorted bin attack实现`_IO_list_all`的改写，那么就需要有unsorted
bin才行，只有一个堆块，如何得到unsorted bin？答案是利用top chunk不足时堆的分配的机制，当top
chunk不足以分配，系统会分配新的top chunk并将之前的chunk 使用free函数释放，此时会将堆块释放至unsorted
bin中。我们可以利用覆盖，伪造top chunk的size，释放的堆块需满足下述条件：
    assert ((old_top == initial_top (av) && old_size == 0) ||
              ((unsigned long) (old_size) >= MINSIZE &&
               prev_inuse (old_top) &&
               ((unsigned long) old_end & (pagesize - 1)) == 0));
即：
  1. size需要大于0x20（MINSIZE）
  2. prev_inuse位要为1
  3. top chunk address + top chunk size 必须是页对齐的（页大小一般为0x1000）
最终利用unsorted bin attack，将`_IO_list_all`指向`main_arena`中`unsorted_bins`数组的位置。
此时的`_IO_list_all`由于指向的时`main arena`中的地址，并不是完全可控的。  
但是它的chain字段却是可控的，因为我们可以通过伪造一个大小为0x60的small bin释放到main arena中，从而在unsorted bin
attack后，该字段刚好被当作`_chain`字段，如下图所示：  
当调用`_IO_flush_all_lockp`时，`_IO_list_all`的头节点并不会使得我们可以控制执行流，但是当通过`fp =
fp->_chain`链表，对第二个节点进行刷新缓冲区的时候，第二个节点的数据就是完全可控的。我们就可以伪造该结构体，构造好数据以及vtable，在调用vtable中的`_IO_OVERFLOW`函数时实现对执行流的劫持。
写exp时，可以利用`pwn_debug`中`IO_FILE_plus`模块中的`orange_check`函数来检查当前伪造的数据是否满足house of
orange的攻击，以及使用`show`函数来显示当前伪造的FILE结构体。
伪造的IO FILE结构如下：  
可以看到`_mode`为0，`_IO_write_ptr`也大于`fp->_IO_write_base`因此会触发它的`_IO_OVERFLOW`函数，它的vtable被全都伪造成了`system`的地址，如下图所示：  
最终执行`system("bin/sh")`拿到shell。
## 小结
vtable劫持和FSOP还是比较好理解的，下一篇将介绍vtable check机制和它的绕过方法。
[`pwn_debug`](https://github.com/ray-cp/pwn_debug)新增了一个模块`IO_FILE_plus`，该模块可以很方便的查看和构造IO
FILE结构体，以及检查结构体是否满足利用条件。本文中可以使用的api为`IO_FILE_plus.orange_check`，即检查当前构造的IO
FILE是否满足house of orange的攻击条件。
exp和相关文件在我的[github](https://github.com/ray-cp/ctf-pwn/tree/master/PWN_CATEGORY/IO_FILE/vtable_hajack/东华杯2016-pwn450_note)
## 参考链接
  1. [unsorted bin attack分析](https://www.anquanke.com/post/id/85127)
  2. [伪造vtable劫持程序流程](https://wiki.gdpcisa.org/pwn/io_file/fake-vtable-exploit/)