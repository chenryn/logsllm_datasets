# Aeroctf2019 中逆向和pwn的writeup
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## AEROCTF
[Aeroctf](http://aeroctf.com/challenges) 是 Moscow State Technical University
of Civil aviation举办的CTF，题目大多和飞机有关，涉及了飞机、安全和航空固件等内容，同时具备战斗民族的属性——不走寻常路。
## 逆向
###  key checker
[题目](http://aeroctf.com/files/6921ce3540c49e34969dab8f22bde55f/keychecker.s)提供了一个keychecker.s文件，.s文件是.c文件编译成为汇编的结果，还没输出成为可执行文件。
    .file "keychecker.cpp";
        .section    .ctors,"aw",@progbits
        .align 4
        .long    __GLOBAL__I_main
        .section    .text._ZSt3minImERKT_S2_S2_,"axG",@progbits,_ZSt3minImERKT_S2_S2_,comdat
        .align 4
        .weak    __ZSt3minImERKT_S2_S2_
    .type __ZSt3minImERKT_S2_S2_, STT_FUNC;
    __ZSt3minImERKT_S2_S2_:
    L$LFB$1603:
        LINK 4;
    L$LCFI$0:
        [FP+8] = R0;
        [FP+12] = R1;
        P2 = [FP+12];
        R1 = [P2];
        P2 = [FP+8];
        R0 = [P2];
        cc =R1> 1) - 0x31U ^ 0xfefe) + 0x1e) * 2 ^0xdede)
                     & 0xbe;
      while( true ) {
        if (0x25 < idx) {
          print_out("Secret key is valid!nSet a hyper mode!");
          return 0x539;
        }
        uVar1 = getVar();
        if (((int)key[idx] ^ uVar1 & 0xff) != *(uint *)((int)&PTR_004a07dd + idx * 4 + 3)) break;
        idx = idx + 1;
      }
      return 0xffffffff;
    }
其中动态调试时发现， **第一次输入的内容只会传入1个字节到函数里** 。
经过一轮变换，存储在DAT_004a0878，即数组0x4a0e70的最后一个元素（如下图覆盖位0xb2）。最后一个元素由于& 0xbe，所以也会是1字节。
然后输入key，执行uVar1 = getVar(); 而getVar函数对数组最后一个元素进行变换（按4字节）
    int getVar(void)
    {
      DAT_004a0878 = DAT_004a0878 * 0xdead + 0xc0de;
      DAT_004a0878 = DAT_004a0878 + ((uint)(DAT_004a0878 != -1) ^ 1);
      return DAT_004a0878;
    }
然后进行比较判断
    if (((int)key[idx] ^ uVar1 & 0xff) != *(uint *)((int)&PTR_004a07dd + idx * 4 + 3)) break;
等效于
    key[idx] ^ uVar1 & 0xff == 0x4a0e70[idx]
**逆向**
由于没有分析第一次输入与传入函数内容的关系，但是由于最后一个元素&0xbe的关系，只有1字节，所以考虑用爆破方法
    target = [int(i) for i in """
            31          1          0        135
           221         53        206        182
            15          0         52         13
           133        229        232         67
            72         61        240        238
           240        154         47         22
           235        178         18        190
           225         26        156        243
           255        145        132         26
           211         49        178    
    """.replace("n"," ").split(" ") if i!='']
    print len(target),target
    #第一次是0xb9528
    def FUN_004012d4(target):
        DAT_004a0878 = target[-1]
        DAT_004a0878 = DAT_004a0878 * 0xdead + 0xc0de;
        DAT_004a0878 = DAT_004a0878 + ((DAT_004a0878 != -1) ^ 1);
        target[-1] = DAT_004a0878 & 0xffffffff
        return target[-1]
    for i in range(256):
        #爆破数组最后一个元素
        target[-1] = i
        #逆推满足条件的输入
        result = ""
        for j in range(38):
            uVar1 = FUN_004012d4(target)&0xff
            result += chr(target[j] ^ uVar1)
        print result
爆破结果中找到flag 为 Aero{94fa46539bc69bf665fef0f7f63a5625}
经过这题之后，发现 **qemu+IDA+Ghidra的组合非常好用！**
###  experimental packer
To run the unpacked binary, use the following:
  1. sudo apt-get install qemu qemu-user qemu-user-static
  2. sudo apt-get install gdb-multiarch
  3. sudo apt-get install ‘binfmt *’
  4. ./a.out
题目提供了一个packer和打包后的文件，要求恢复打包前的文件执行即可。
在ida中查找字符串时，发现.go的字样，想起之前看到的一篇
[无符号Golang程序逆向方法解析](https://www.anquanke.com/post/id/170332)
的文章，于是使用了文章推荐的[IDAGolangHelper](https://github.com/sibears/IDAGolangHelper)
恢复go语言的函数
恢复效果不错，找到main_main的地方开始逆向，packer先构造了0xe字节的文件头
从0xe字节开始，然后使用lzw压缩对原文件进行压缩
网上找到一个go语言的解压缩算法，对0xe字节之后的内容进行解密
    package main
     import (
             "compress/lzw"
             "fmt"
             "io"
             "os"
     )
     func main() {
             inputFile, err := os.Open("a.lzw")
             if err != nil {
                     fmt.Println(err)
                     os.Exit(1)
             }
             defer inputFile.Close()
             outputFile, err := os.Create("a.raw")
             if err != nil {
                     fmt.Println(err)
                     os.Exit(1)
             }
             defer outputFile.Close()
             // file.txt.lzw compressed by
             // https://socketloop.com/references/golang-compress-lzw-newwriter-function-example
             // litWidth is set to 8
             lzwReader := lzw.NewReader(inputFile, lzw.LSB, 8) //<----- here !
             if err != nil {
                     fmt.Println(err)
                     os.Exit(1)
             }
             defer lzwReader.Close()
             io.Copy(outputFile, lzwReader)
     }
恢复成为a.raw文件后，根据题目提示，运行得到flag
###  malware engine
We have already damaged more than one engine from this firmware. The thing is
in some incomprehensible requirement to enter the key. We do not understand
where it came from, can you figure out what key is required to enter?
又是飞机引擎的问题，这回不用脑洞，直接输入key
file一下，是PowerPC的程序，没做过啊！
    malware_engine: ELF 32-bit MSB executable, PowerPC or cisco 4500, version 1 (GNU/Linux), statically linked, for GNU/Linux 3.2.0, BuildID[sha1]=bd4ff12ea3e93b1a1767f42004eecb743bcaacf7, stripped