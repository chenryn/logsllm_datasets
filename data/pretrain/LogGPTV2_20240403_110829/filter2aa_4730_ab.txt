.B SOCK_STREAM
套接字而言,
用户有责任按照MTU的大小对数据分块并在必要的情况下进行中继重发.如果设置了该标识
(用
.B EMSGSIZE
),内核会拒绝比已知路径MTU更大的包.
.TS
tab(:);
c l
l l.
Path MTU discovery(路径MTU发现)标识:含义
IP_PMTUDISC_WANT:对每条路径进行设置.
IP_PMTUDISC_DONT:从不作Path MTU Discovery(路径MTU发现).
IP_PMTUDISC_DO:总作Path MTU Discovery(路径MTU发现).
.TE
当允许 PMTU （路径MTU）搜索时,
内核会自动记录每个目的主机的path MTU(路径MTU).当它使用
.BR connect (2)
连接到一个指定的对端机器时,可以方便地使用
.B IP_MTU
套接字选项检索当前已知的 path MTU(路径MTU)(比如，在发生了一个
.B EMSGSIZE
错误后).它可能随着时间的推移而改变.
对于带有许多目的端的非连接的套接字,一个特定目的端的新到来的 MTU 
也可以使用错误队列(参看
.BR IP_RECVERR )
来存取访问.
新的错误会为每次到来的 MTU 的更新排队等待.
当进行 MTU 搜索时,来自数据报套接字的初始包可能会被丢弃.
使用 UDP 的应用程序应该知道这个并且考虑
其包的中继传送策略.
为了在未连接的套接字上引导路径 MTU 发现进程,
我们可以用一个大的数据报(头尺寸超过64K字节)启动,
并令其通过更新路径 MTU 逐步收缩.
.\" XXX 这是一项丑陋的设计
为了获得路径MTU连接的初始估计,可通过使用
.BR connect (2)
把一个数据报套接字连接到目的地址,并通过调用带
.B IP_MTU选项的
.BR getsockopt (2)
检索该MTU.
.TP
.B IP_MTU
检索当前套接字的当前已知路径MTU.只有在套接字被连接时才是有效的.返回一个整数.只有作为一个
.BR getsockopt (2)
才有效.
.\"
.TP
.B IP_ROUTER_ALERT
给该套接字所有将要转发的包设置IP路由器警告（IP RouterAlert option）选项.
只对原始套接字（raw socket）有效,这对用户空间的 RSVP后
台守护程序之类很有用.
分解的包不能被内核转发,用户有责任转发它们.套接字绑定被忽略,
这些包只按协议过滤.
要求获得一个整型标识.
.\"
.TP
.B IP_MULTICAST_TTL
设置或者读取该套接字的外发多点广播包的生存时间值.
这对于多点广播包设置可能的最小TTL很重要.
缺省值为1,这意味着多点广播包不会超出本地网段,
除非用户程序明确地要求这么做.参数是一个整数.
.\"
.TP
.B IP_MULTICAST_LOOP
设置或读取一个布尔整型参数以决定发送的多点广播包是否应该被回送到本地套接字.
.\"
.TP
.B IP_ADD_MEMBERSHIP
加入一个多点广播组.参数为
.B struct ip_mreqn
结构.
.PP
.RS
.nf
.ta 4n 19n 34n
struct ip_mreqn
{
struct in_addr imr_multiaddr; /* IP多点传送组地址 */
struct in_addr imr_address; /* 本地接口的IP地址 */
int imr_ifindex; /* 接口索引 */
};
.fi
.RE
.IP
.I imr_multiaddr
包含应用程序希望加入或者退出的多点广播组的地址.
它必须是一个有效的多点广播地址.
.I imr_address
指的是系统用来加入多点广播组的本地接口地址;如果它与
.B INADDR_ANY
一致,那么由系统选择一个合适的接口.
.I imr_ifindex
指的是要加入/脱离
.I imr_multiaddr
组的接口索引,或者设为0表示任何接口.
.IP
由于兼容性的缘故,老的
.B ip_mreq
接口仍然被支持.它与
.B ip_mreqn
只有一个地方不同,就是没有包括
.I imr_ifindex
字段.这只在作为一个
.BR setsockopt (2)
时才有效.
.\"
.TP
.B IP_DROP_MEMBERSHIP
脱离一个多点广播组.参数为
.B ip_mreqn
或者
.B ip_mreq
结构,这与
.IR IP_ADD_MEMBERSHIP
类似.
.\"
.\TP
.B IP_MULTICAST_IF
为多点广播套接字设置本地设备.参数为
.B ip_mreqn
或者
.B ip_mreq
结构,它与
.IR IP_ADD_MEMBERSHIP
类似.
.IP
当传递一个无效的套接字选项时,返回
.B ENOPROTOOPT .
.SH SYSCTLS
IP协议支持 sysctl 接口配置一些全局选项.sysctl可通过读取或者写入
.B /proc/sys/net/ipv4/*
文件或使用
.BR sysctl (2)
接口来存取访问.
.\"
.TP
.B ip_default_ttl
设置外发包的缺省生存时间值.此值可以对每个套接字通过
.I IP_TTL
选项来修改.
.\"
.TP
.B ip_forward
以一个布尔标识来激活IP转发功能.IP转发也可以按接口来设置
.\"
.TP
.B ip_dynaddr
打开接口地址改变时动态套接字地址和伪装记录的重写.
这对具有变化的IP地址的拨号接口很有
用.0表示不重写,1打开其功能,而2则激活冗余模式.
.\"
.TP
.B ip_autoconfig
无文档
.\"
.TP
.B ip_local_port_range
包含两个整数,定义了缺省分配给套接字的本地端口范围.
分配起始于第一个数而终止于第二个数.
注意这些端口不能与伪装所使用的端口相冲突(尽管这种情况也可以处理).
同时,随意的选择可能会导致一些防火墙包过滤器的问题,它们会误认为本地端口在使用.
第一个数必须至少>1024,最好是>4096以避免与众所周知的端口发生冲突，
从而最大可能的减少防火墙问题.
.\"
.TP
.B ip_no_pmtu_disc
如果打开了,缺省情况下不对TCP套接字执行路径MTU发现.
如果在路径上误配置了防火墙(用来丢弃所有
ICMP包)或者误配置了接口
(例如,设置了一个两端MTU不同的端对端连接),路径MTU发现可能会失败.
宁愿修复路径上的损坏的路由器,也好过整个地关闭路径MTU发现,
因为这样做会导致网络上的高开销.
.\"
.TP
.B ipfrag_high_thresh, ipfrag_low_thresh
如果排队等待的IP碎片的数目达到
.B ipfrag_high_thresh ,
队列被排空为
.B ipfrag_low_thresh .
这包含一个表示字节数的整数.
.TP
.B ip_always_defrag
[kernel 2.2.13中的新功能;在早期内核版本中,该功能在编译时通过
.B CONFIG_IP_ALWAYS_DEFRAG
选项来控制]
当该布尔标识被激活(不等于0)时,
来访的碎片(IP包的一部分,这生成于当一些在源端和目的端之间的主机认
定包太大而分割成许多碎片的情况下)将在处理之前重新组合(碎片整理),
即使它们马上要被转发也如此．
只在运行着一台与网络单一连接的防火墙或者透明代理服务器时才这么干;
对于正常的路由器或者主机,
永远不要打开它.
否则当碎片在不同连接中通过时碎片的通信可能会被扰乱.
而且碎片重组也需要花费大量的内存和 CPU 时间．
这在配置了伪装或者透明代理的情况下自动打开.
.TP
.B neigh/*
参看
.BR arp (7)
.\" XXX 记载conf的文档/*/* sysctls
.\" XXX 记载route的文档/* sysctls
.\" XXX 记载它们的所有文档
.SH IOCTLS
所有在
.BR socket (7)
中有描述 的 ioctl 都可应用于ip.
.PP
用于配置防火墙应用的ioctl记载在
.B ipchains
包的
.BR ipfw (7)
的文档中.
.PP
用来配置普通设备参数的ioctl在
.BR netdevice (7)
中有描述.
.\" XXX 加入一章有关多点传送的内容
.SH NOTES(备注)
使用
.B SO_BROADCAST
选项要小心 \- 它在 Linux 中没有权限要求.
不小心的广播很容易导致网络过载.对于新的应用协议而言,最
好是使用多点广播组来替代广播.我们不鼓励使用广播.
.PP
有些其它的BSD套接字实现提供了
.I IP_RCVDSTADDR
和
.I IP_RECVIF
套接字选项来获得目的地址以及接收数据报的接口.Linux有更通用的
.I IP_PKTINFO
来完成相同任务.
.PP
.SH ERRORS(错误)
.\" XXX记载所有错误的文档.我们确实应该修复内核以返回更统一的错误信息(ENOMEM对
ENOBUFS,EPERM对EACCES等.)
.TP
.B ENOTCONN
操作只定义于连接的套接字,而该套接字却没有连接.
.TP
.B EINVAL
传递无效的参数.
对于发送操作,这可以因发送到一个
.I blackhole(黑洞)
路由而引发.
.TP
.B EMSGSIZE
数据报大于该路径上的 MTU,并且它不能被分成碎片.
.TP
.B EACCES
没有必要权限的用户试图执行一项需要某些权限的操作.
这包括:
在没有
.B SO_BROADCAST
标识设置的情况下发送一个包到广播地址.
通过一条
.I 禁止的
路由发送包.
在没有
.B CAP_NET_ADMIN
或者有效用户标识不为0的情况下修改防火墙设置.
在没有
.B CAP_NET_BIND_SERVICE
能力或者有效用户标识不为零0的情况下绑定一个保留端口.
.TP
.B EADDRINUSE
试图绑定到一个已在使用的地址.
.TP
.BR ENOMEM " 和 " ENOBUFS
没有足够的内存可用.
.TP
.BR ENOPROTOOPT " 和 " EOPNOTSUPP
传递无效的套接字选项.
.TP
.B EPERM
用户没有权限设置高优先级,修改配置或者发送信号到请求的进程或组.
.TP
.B EADDRNOTAVAIL
请求一个不存在的接口或者请求的源端地址不是本地的.
.TP
.B EAGAIN
在一个非阻塞的套接字上进行操作会阻塞.
.TP
.B ESOCKTNOSUPPORT
套接字未配置或者请求了一个未知类型的套接字.
.TP
.B EISCONN
在一个已经连接的套接字上调用
.BR connect (2) .
.TP
.B EALREADY
在一个非阻塞的套接字上的连接操作已经在进行中.
.TP
.B ECONNABORTED
在一次
.BR accept (2)
执行中连接被关闭.
.TP
.B EPIPE
连接意外关闭或者被对端关闭.
.TP
.B ENOENT
在没有报到达的套接字上调用
.B SIOCGSTAMP .
.TP
.B EHOSTUNREACH
没有有效路由表记录匹配目的地址.该错误可以被来自远程路由器的
ICMP消息或者因为本地路由表的缘故而引发.
.TP
.B ENODEV
网络设备不可用或者不适于发送IP.
.TP
.B ENOPKG
内核子系统没有配置.
.TP
.B ENOBUFS, ENOMEM
没有足够的空闲内存.
这常常意味着内存分配因套接字缓冲区的限制而受限,
而不是因为系统内存的缘故,但是这也不是100%正确．
.PP
其它错误可能由重叠协议族生成;参看
.BR tcp (7),
.BR raw (7),
.BR udp (7)
和
.BR socket (7).
.SH VERSIONS(版本)
.IR IP_PKTINFO ,
.IR IP_MTU ,
.IR IP_PMTU_DISCOVER ,
.IR IP_PKTINFO ,
.IR IP_RECVERR
和
.IR IP_ROUTER_ALERT
是Linux 2.2中的新选项.
.PP
.B struct ip_mreqn
也是新出现在Linux 2.2中的.Linux 2.0只支持
.BR ip_mreq .
.PP
sysctl是在Linux 2.2中引入的.
.SH COMPATIBILITY(兼容性)
为了与Linux 2.0相容,仍然支持用过时的
.BI "socket(PF_INET, SOCK_RAW, "protocol ")"
语法打开一个
.BR packet (7)
套接字.我们不赞成这么用,而且应该被
.BI "socket(PF_PACKET, SOCK_RAW, "protocol ")"
所代替.主要的区别就是
新的针对一般链接层信息的
.B sockaddr_ll
地址结构替换了旧的
.B sockaddr_pkt
地址结构.
.SH BUGS
有许多不连贯的错误码.
.PP
没有描述用来配置特定IP接口选项和ARP表的ioctl.
.SH AUTHORS(作者)
该man页作者是Andi Kleen.
.SH SEE ALSO(另见)
.BR sendmsg (2),
.BR recvmsg (2),
.BR socket (7),
.BR netlink (7),
.BR tcp (7),
.BR udp (7),
.BR raw (7),
.BR ipfw (7).
.PP
RFC791:原始IP规范.
.br
RFC1122:IPv4主机需求.
.br
RFC1812:IPv4路由器需求.
\" 私语: XXX 自动连接 INADDR REUSEADDR
.SH "[中文版维护人]"
.B riser 
.SH "[中文版最新更新]"
.BR 2001/07/19
.SH "《中国linux论坛man手册页翻译计划》:"
.BI http://cmpp.linuxforum.net