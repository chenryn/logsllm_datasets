is signiﬁcantly better than the random baseline where
a ﬂow density reduction by 80 % only preserves about
15 % of the paths. We observe that larger topologies gen-
erally exhibit better results than small ones. This is due
to the fact that in bigger topologies, a small modiﬁcation
has less impact on average accuracy than in a small topol-
ogy while still providing high obfuscation. Conversely,
smaller topologies lead to worse results as a small num-
ber of changes can have a big impact.
USENIX Association
27th USENIX Security Symposium    703
0.00.20.40.60.81.0Flow density reduction factor0.00.20.40.60.81.0Average accuracybetter0.00.20.40.60.81.0Flow density reduction factor0.00.20.40.60.81.0Average utilitybetterSwitchAbileneUsCarrierAlgorithm:NetHideRandom0.00.20.40.60.81.0Flow density reduction factor0.00.20.40.60.81.0% of paths with acc=100%betterFigure 9: Accuracy, utility and runtime for different number of forwarding trees. Considering only a small number of
forwarding trees per node does not signiﬁcantly decrease the accuracy and utility of NetHide but drastically decreases
the runtime. Thanks to this, NetHide can obfuscate large topologies (>150 nodes) in less than one hour.
6.3 Accuracy vs. utility
In Fig. 10, we analyze the impact of the accuracy weight
(wacc in Fig. 4) on the resulting accuracy and utility. We
specify the capacity of each link to 10 % of the maxi-
mum ﬂow density listed in Table 1 and observe that wacc
has a relatively small impact for our accuracy and util-
ity metrics especially for large topologies. This conﬁrms
that a topology with a high accuracy typically also has a
high utility. If the paths are similar (high accuracy), the
packets are routed via the same links (high utility), too.
6.4 Search space reduction and runtime
In this experiment, we analyze the impact of the search
space reduction—in terms of the number of forwarding
trees per node—on the runtime of NetHide. As we ex-
plained in §4.4, NetHide considers only a small subset of
forwarding trees to improve scalability. We again specify
the capacity of each link to 10 % of the maximum ﬂow
density listed in Table 1 and run NetHide for a varying
number of forwarding trees per node. The experiments
were run in a VirtualBox VM running Ubuntu 16.04 with
20 Intel Xeon E5 CPU cores and 90 GB of memory.
In Fig. 9, we show that a small number of forwarding
trees is enough to reach close-to-optimal results. While
the runtime increases exponentially with the number of
forwarding trees, the accuracy and utility do not notice-
ably improve above 100 forwarding trees per node.
The runtime of NetHide when considering 100 for-
warding trees per node is within one hour, even for large
topologies (Fig. 9). As the topology is computed ofﬂine
(cf. §5.7), such a running time is reasonable.
6.5 Path length
In this experiment, we analyze the difference between the
lengths of paths in P and V . Large differences between
the length of the physical path and the virtual path can
lead to unrealistic RTTs and leak information about the
obfuscation (e.g., if the RTT is signiﬁcantly different for
two paths of the same length).
As the results in Fig. 11 show, virtual paths are shorter
than physical paths (the ratio is ≤ 1)—intuitively because
removing a node from a path has a smaller impact on
our accuracy and utility metrics than adding one) and—
for the medium and large topology—the virtual paths are
less than 10 % shorter both on average and in the 10th
percentile for a ﬂow density reduction of 80 %.
The resulting small differences in path lengths sup-
port our assumption that timing information mainly leaks
through the processing time at the last node and not
through the propagation time (§5) as long as all links
have roughly the same propagation delay.
6.6 Partial deployment
We now analyze the achievable protection if not all de-
vices at the network edge are programmable. In NetHide,
a ﬂow can be obfuscated as long as it crosses a NetHide
device before the ﬁrst spoofed node (the ﬁrst node that
is different from the physical path). This is obviously the
case if all edge routers are equipped with NetHide. Yet,
as we show in Fig. 12, a small percentage of NetHide de-
vices (e.g., 40%) is enough to protect the majority (60%)
of ﬂows even in the average case where the devices are
placed at random locations and all nodes are considered
as ingress and egress points of trafﬁc (i.e., as edge nodes).
To obtain the results in Fig. 12, we set the maximum
ﬂow density to 10 % of the maximum value in Table 1
and vary the percentage of programmable nodes in V be-
tween 0 and 100%. For each step, we compute the aver-
age amount of ﬂows that can be protected for 100 differ-
ent samples of programmable devices.
The percentage of obfuscated ﬂows in Fig. 12 is nor-
malized to only consider ﬂows that need to be obfus-
cated. As we have shown in Fig. 8, the vast majority of
ﬂows does not need to be obfuscated at all.
704    27th USENIX Security Symposium
USENIX Association
0100200300400500Number of forwarding trees0.00.20.40.60.81.0Average accuracy0100200300400500Number of forwarding trees0.00.20.40.60.81.0Average utilitySwitchAbileneUsCarrier0100200300400500Number of forwarding trees10-410-310-210-1100101Runtime (h)In this experiment, we simulate three feasible strate-
gies for an attacker to select b ﬂows:
• Random: Samples b ﬂows uniformly at random from
the set of all ﬂows F.
• Bottleneck+Random: Identiﬁes the link with the high-
est ﬂow density in V (a "bottleneck" link lb) and at-
tacks by initiating all the fd(lb) ﬂows that cross this
link plus (b− fd(lb)) random additional ﬂows.
• Bottleneck+Closeness: Identiﬁes the link lb with the
highest ﬂow density in V and attacks by initiating all
the fd(lb) ﬂows that cross this link plus (b − fd(lb))
nearby ﬂows (according to the metric in Algorithm 2).
An attack is successful if running the selected set of
ﬂows in P exceeds any link’s capacity (not necessarily
the link that the attacker tried to attack).
In our simulations, we vary both the attacker’s budget
and the robustness of P (in terms of the link capacity).
We vary the capacity such that between 10 % and 100 %
of the links in P are secure (e.g., if 10 % of the links are
secure, an attacker could directly attack 90 % of the links
if there was no obfuscation). For each choice of the link
capacity c in P, we vary the number of ﬂows that the
attacker can initiate between b = c + 1 (just enough to
break a link) and b = 4× (c + 1) (four times the number
of ﬂows that the most efﬁcient attacker would need).
To obtain the simulation results in Fig. 14 and
Fig. 15, we simulated 10k attempts (Random and Bottle-
neck+Random) and 1k attempts (Bottleneck+Closeness)
for each virtual topology from §6.2 and each combina-
tion of the link capacity and attacker budget.
In Fig. 14 we compare the Random attacker with Bot-
tleneck+Random and in Fig. 15 we compare Random
with Bottleneck+Closeness. In the ﬁrst row of each ﬁg-
ure, we plot how much obfuscation (i.e., in terms of the
ﬂow density reduction factor) is required to make the at-
tacker successful in < 1% of her attempts. There, we ob-
serve that the Random attacker is (as expected) the least
powerful because it requires less obfuscation to defend
against it and that Bottleneck+Closeness is slightly more
powerful than Bottleneck+Random. Considering the set-
ting with the Abilene topology and the attacker with 2×
budget: Mitigating this attacker requires no obfuscation
when she follows the Random strategy, but 71% (Bot-
tleneck+Random) or 86% (Bottleneck+Closeness) ﬂow
density reduction for the more sophisticated strategies.
The required ﬂow density reduction naturally in-
creases as the attacker’s budget increases. In the right
column where the attacker can run four times the number
of required ﬂows, even the Random attacker is successful
because she can run so many ﬂows (or even all possible
ﬂows in many cases) that it does not matter how the ﬂows
are selected.
Figure 10: The accuracy
weight has a small impact
for our accuracy and utility
metrics.
Figure 11: Reducing the
ﬂow density
80 %
changes path lengths by
less than 20 %.
by
Figure 12: Partial deploy-
ment at random locations.
40 % NetHide devices al-
low to protect up to 60 %
of the ﬂows that need ob-
fuscation
Figure 13: Link failures
are correctly observed with
high probability (e.g., for
Switch: only 15 % of the
failures appear in less than
90 % of the paths.)
As an alternative approach to partial deployment,
NetHide can be extended to incorporate the number
and/or locations of NetHide devices as a constraint or as
an objective such as to compute virtual topologies that
can be deployed without new devices or with as few pro-
grammable devices as possible.
6.7 Security
As we explained in §4.5, inferring the exact physical in-
put topology from the virtual topology is difﬁcult.
However, an attacker can try to attack V directly, with-
out trying to determine P. Such an attacker is limited by
the fact that she does not know P and by a maximum
number (budget) of ﬂows that she can create. Therefore,
the key challenge for the attacker is to select the ﬂows
such that they result in a successful attack on P.
Besides the attacker’s budget, her chances of success
also depend on the robustness of P: If P is weak (i.e., the
capacity of many links is exceeded), it either needs to
be obfuscated more or attacks are more likely to succeed.
USENIX Association
27th USENIX Security Symposium    705
0.00.20.40.60.81.0Accuracy weight0.00.20.40.60.81.0{Accuracy, Utility}AbileneMetric:SwitchAccuracyUsCarrierUtility0.00.20.40.60.81.0Flow density reduction factor0.00.20.40.60.81.0len(v. path) / len(p. path)betterSwitchMetric:AbileneaverageUsCarrier10th perc.0.00.20.40.60.81.0% programmable nodes0.00.20.40.60.81.0% obfuscated flowsAbileneSwitchUsCarrier0.00.20.40.60.81.0% correct observations0.00.20.40.60.81.0CDF - P(X <= x)betterAbileneSwitchUsCarrierFigure 14: Attack simulations comparing the Random attacker with Bottleneck+Random. The plots show the required
ﬂow density reduction (FR) for making the attacker succeed with Pr < 1% (ﬁrst row) and the obtained accuracy
and utility (second and third row) depending on the link capacity of the physical topology (measured as the percent-
age of secure links in the x-axis). For example, defending the Switch topology with only 60% secure links against
Bottleneck+Random with 2× budget maintains 80% accuracy.
Figure 15: Attack simulations comparing the Random attacker with Bottleneck+Closeness. Bottleneck+Closeness is
slightly more powerful than Bottleneck+Random (Fig. 14), which results in more obfuscation that is required.
706    27th USENIX Security Symposium
USENIX Association
0204060801000.00.20.40.60.81.0Required FR for P(success) < 1%Attacker budget: 1x0204060801000.00.20.40.60.81.0Attacker budget: 2x0204060801000.00.20.40.60.81.0Attacker budget: 4x0204060801000.00.20.40.60.81.0Achieved accuracy 0204060801000.00.20.40.60.81.00204060801000.00.20.40.60.81.0020406080100% of secure links in P0.00.20.40.60.81.0Achieved utility 020406080100% of secure links in P0.00.20.40.60.81.0AbileneSwitchUsCarrierAttack:Bottleneck+RandomRandom020406080100% of secure links in P0.00.20.40.60.81.00204060801000.00.20.40.60.81.0Required FR for P(success) < 1%Attacker budget: 1x0204060801000.00.20.40.60.81.0Attacker budget: 2x0204060801000.00.20.40.60.81.0Attacker budget: 4x0204060801000.00.20.40.60.81.0Achieved accuracy 0204060801000.00.20.40.60.81.00204060801000.00.20.40.60.81.0020406080100% of secure links in P0.00.20.40.60.81.0Achieved utility 020406080100% of secure links in P0.00.20.40.60.81.0AbileneSwitchUsCarrierAttack:Bottleneck+ClosenessRandom020406080100% of secure links in P0.00.20.40.60.81.0Input: Virtual topology V = (N(cid:48),L(cid:48),T(cid:48)),
Flow (s,d) ∈ N(cid:48) × N(cid:48),
Flow path T(cid:48)
Bottleneck link (n1,n2) ∈ L(cid:48)
s→d
s→d) then
Output: Preference p ∈ [0,1]
if (n1 ∈ T(cid:48)
else if (n1 ∈ T(cid:48)
s→d)∧ (n2 ∈ T(cid:48)
p ← 1/| links between n1 and n2 in T(cid:48)
s→d)∧ (n2 /∈ T(cid:48)
s→d) then
na ← node after n1 in T(cid:48)
s→d
nb ← node before n1 in T(cid:48)
pa ← length of path from n2 to na
pb ← length of path from n2 to nb
p ← 1/min(pa, pb)
s→d) then
(see above with n1 and n2 ﬂipped)
p ← 0
s→d)∧ (n2 ∈ T(cid:48)
else if (n1 /∈ T(cid:48)
else
s→d|
s→d
Algorithm 2: Flow preference metric. Flows that con-
tain the bottleneck link or at least one of the endpoints
of the link are more promising to be useful in the attack.
The second and third row in the plots show the ac-
curacy and utility that is preserved after obfuscating the
topology. We observe there, that especially the Abilene
and Switch topologies provide high accuracy and util-
ity even if less than 50% of the links in P are secure.
Comparing Fig. 14 and Fig. 15 shows that since mitigat-
ing Bottleneck+Closeness requires more obfuscation, the
achieved accuracy and utility is lower.
6.8 Case study: Link failure detection
We now show that NetHide preserves most of the use-
fulness of tracing tools by considering the problem of
identifying link failures in obfuscated topologies. For our
analysis, we use all three topologies and a ﬂow density
reduction factor of 50 %. Then, we simulate the impact
of an individual failure for each link. That is, we analyze
how a failing physical link is represented in V .
Failing a link can have different effects in V : Ideally,
it is correctly observed, which means that the exact same
link failure appears in V . But since V contains links that
are not in P or vice-versa, a physical link failure can be
observed as multiple link failures or as the failing of an-
other virtual link.
In Fig. 13, we show that the vast majority of physi-
cal link failures is precisely reﬂected in the virtual topol-
ogy. That is, NetHide allows users to use prevalent de-
bugging tools to debug connectivity problems in the net-
work. These results are a major advantage compared to
competing approaches [28, 39] that do not send the trac-
ing packets through the actual network.
7 Frequently asked questions
Below, we provide answers to some frequently asked
questions and potential extensions of NetHide.
Can a topology be de-obfuscated by analyzing timing
information? In NetHide, each probing packet is an-
swered by the correct router and thus the processing time
at the last node is realistic. Though, the propagation time
can leak information in topologies where the propagation
delay of some links is signiﬁcantly higher than of others.
However, extracting information from the propagation
time in geographically small networks is hard for three
reasons: (i) it is impossible to measure propagation time
separately. Instead, only the RTT is measurable; (ii) the
RTT includes the unknown return path; and (iii) NetHide
keeps path length differences are small. For topologies