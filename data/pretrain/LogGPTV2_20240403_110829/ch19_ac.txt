通过包含所有文档必需部分的章节来确保文档完整。如果某条信息尚未提供或不适用，最好将其标记为“TBD”或“N/A”，但应在每个部分都写点什么。
使读者能够轻松且快速理解文档的主题、可能包含的信息类型以及文档的组织方式。此外，模板应确保读者知道文档上次更新的时间以及更新者。
站点可靠性工程一书包含几个文档模板示例。下面是一个示例 Playbook 模板，该模板为工程师填写内容提供了结构和指导：
TitleTitle
The title should be the name of the alert (e.g., Generic Alert_AlertTooGeneric).
Author:
Last updated:
Overview
Address the following:
What does this alert mean?
Is it a paging or an email-only alert?
What factors contributed to the alert?
What parts of the service are affected?
What other alerts accompany this alert?
Who should be notified?
Alert SeverityWho should be notified?
Alert Severity
Indicate the reason for the severity (email or paging) of the alert 
and the impact of the alerted condition on the system or service.
Verification
Provide specific instructions on how to verify that the condition is ongoing.
Troubleshooting
List and describe debugging techniques and related information sources here.Include links to relevant dashboards. Include warnings. Address the following:
What shows up in the logs when this alert fires?
What debug handlers are available?
What are some useful scripts or commands? What sort of output do they generate?
What are some additional tasks that need to be done after the alert is resolved?
Solution
List and describe possible solutions for addressing this alert.Address the following:
How do I fix the problem and stop this alert?
What commands should be run to reset things?
Who should be contacted if this alert happened due to user behavior?
Who has expertise at debugging this issue?
Escalation
List and describe paths of escalation. Identify whom to notify (person or team) 
and when. If there is no need to escalate, indicate that.
Related LinksRelated Links
Provide links to relevant related alerts, procedures, and overview documentation.
更好 > 最佳：为质量设定现实标准
 Google 提出 SRE 理念的核心原则是，努力使我们的系统足够可靠，从而让用户满意，但没有必要无止境的追求可靠性。提高可靠性是有代价的：最大限度地提高稳定性，这会限制新功能的开发速度以及产品交付用户的速度，并大大增加其成本，进而减少团队可以支持的功能数量。
要求高标准的写作可能会适得其反，使工程师懒得创建文档。同样，如果能保证关键信息始终得到更新、可发现且清晰，再花额外精力对文档进行美化就是浪费时间，这些时间本来可以用来改进文档的其他部分（或改进服务本身）。正如代码是一个迭代过程一样，文档也是如此。学会接受 安妮·拉莫特所说的“肮脏的初稿”：一个不完美的文件比一个尚不存在的完美文件更有用。问问自己：此文档是否满足其功能要求，以及所需的信息是否存在并清楚地传达？如果答案为“是”，则只需要对文档进行最低程度的合理更改。一旦文档达到质量要求后，就可以接受。文档质量是好事，但不要因为作者在文档中使用被动语气而阻止文档提交，不要做那种律法主义的工程师。
要求将文档作为代码评审的一部分
  文档就像测试：好事情，但没有人真的想动手。但是要记住，代码审查员有权力：他们可以不批准发布，直到文档足够。这样做很有必要！
当然，并非所有更改都需要文档更新。下面是一个很好的经验法则：
如果项目的开发人员、SRE 或用户需要在此更改后更改其行为，则更新列表中应包括文档更改。
但是，如果更改不需要测试，那么文档可能也不必更新。比如只是简单代码重构和实验性的微调。这需要运用你的判断力来决定。与往常一样，尽可能简化和自动化此过程。在 Google，团队可以强制执行预提交检查，除非发现了指示不需要文档更新的标志（对样式问题进行预提交检查也能避免许多麻烦）。我们还允许文件的所有者提交更改，且无需审阅。
如果你的团队对要求犹豫不决，请提醒成员，简单的项目文档其实就是将头脑中的信息保存下来，以便其他人以后可以访问这些信息，而不必打扰你。文档更新通常并不繁琐；通常，文档的大小会随代码变动的多少而变化。如果包含一千行代码变动，则可能需要编写几百行文档。如果只是单行更改，可能只需要更改一两个单词。
最后，请记住，文档不需要完美；他们只需要足够好。重要的是，关键信息要传达清楚。
无情地修剪你的文档
 相比处于各种年久失修状态下的大型“文档”，一组简洁且保持更新的文档总要好的多。
每行文档，就像每行代码一样，都应该起到一种作用。当文档不起作用时，应归档或干脆删除它（代码也是一样）。不需要的或无益的文档是一种智商税，也可以说是一种技术债务，增加了复杂性和不确定性，并且经常掩盖甚至抵挡有用的信息。在 Google，我们鼓励 SWE 和 SRE 无畏地删除不再有用的文档。源代码管理的魔力意味着，如果需要，我们可以轻松地还原它们，但这很少发生。
如果没有办法恢复已删除的文档，出于对以往的恋恋不舍，可以将它们移动到“已存档”目录，将它们标记为“已弃用”（可能是唯一适用 这个 HTML 标签的时候），并应该提供指向新版本的链接。