### Optimized Text

**All = Caching + GZIP (Level 5) + Delta Encoding + MODP (for all traffic). n and p are MODP parameters.**

In an ideal scenario with no packet loss, the Compression Ratio (CR) decreases by approximately 1% due to the elimination of retransmission overhead for reference packets. This implies that the impact of packet loss observed in the five-month dataset on CR is minimal.

### 5.3 Combining Multiple Approaches

We now apply multiple Redundancy Elimination (RE) techniques together, following the order described in §5.1. The left seven columns in Table 4 show that jointly employing caching, file compression, and delta encoding significantly reduces the CR to as low as 70.1% (for HTTP traffic) and 74.5% (for all traffic). Caching and file compression are complementary: the former enhances efficiency for multiple requests of the same file, while the latter improves the efficiency of a single file transfer.

Figure 1 illustrates the CR distribution (for all traffic) across 20 users, assuming the joint use of caching, GZIP (Level 5), and delta encoding. The CR for each user ranges from 34% to 89%, highlighting the heterogeneity of traffic generated by diverse users (§3). The effectiveness of RE techniques varies with the traffic content, but the bandwidth savings are consistently non-trivial (> 10%).

Next, we further reduce the CR by applying MODP in addition to the three object-based RE techniques. The right four columns in Table 4 show that the additional CR reduction due to MODP is significant (ranging from 5.4% to 7.2%) but smaller than the savings achieved by using MODP alone (21.0% to 29.8% as shown in Table 3). This suggests that object-based RE techniques have already eliminated most redundancies in the HTTP traffic that dominates the trace. Specifically, MODP further reduces HTTP traffic volume by 6.2% to 7.8%, primarily from cross-file redundancy of non-cacheable files. In contrast, MODP results in much more significant CR reductions for non-HTTP traffic, ranging from 16.1% to 21.7%.

### 5.4 Performance

We measured the performance of each RE technique on a real server and a smartphone device. Our equipment included a Dell PowerEdge server with an Intel Xeon E5620 quad-core CPU at 2.4 GHz and a Motorola Atrix 4G smartphone with a Tegra 2 dual-core CPU at 1 GHz. The server ran Ubuntu 11.04, and the phone used Android 2.2.

Two macro-benchmarks were employed to evaluate file compression and packet stream compression, respectively. The file benchmark consisted of 1000 HTTP responses randomly sampled from the dataset, and the packet stream benchmark was a 2GB packet trace generated by a random user. We produced five instances of this benchmark, all yielding very similar performance results. We report the results for one instance.

We measured the in-memory compression/decompression time (excluding disk I/O) for the two benchmarks on both the server and the phone, using binaries compiled from the same source code. Table 5 shows the results for the file benchmark. Each file was compressed (decompressed) separately, and the measured throughput is the total file size divided by the sum of the processing time of all files. For VCDIFF, we artificially generated a previous version of each file by randomly changing its content by a fixed percentage (δ). Table 6 summarizes the packet stream benchmark results. We measured the processing time of the second-half data of the 2GB packet trace, whose first-half data of 1GB was used to fill the packet cache and the signature table (for compression). Changing this 1GB to 0.5GB or 1.5GB had negligible impact on the results.

In Tables 5 and 6, the throughput was estimated in an extreme case where the data was fed into the compressor/decompressor as fast as possible without any interruption. Each test was repeated 10 times, and the average running time was measured, from which the throughput value was derived. The standard deviation of the running time across 10 runs was always less than 2% of the average.

The benchmark results provide several observations:
1. As expected, compression is slower than decompression. However, compressed files can be cached by servers to avoid repeating the compression for each incoming request for the same file.
2. GZIP is much faster than the more sophisticated BZIP2 and 7-Zip (for both compression and decompression), while achieving only slightly higher CR for small files, which benefit the most from compression (§5.2).
3. VCDIFF is more computationally expensive than all three file compression techniques due to the heavy computation required for comparing two versions of a file.
4. For GZIP, BZIP2, VCDIFF, and MODP, their low decompression overheads make it possible to keep up with high data rates (e.g., 15Mbps), with minimal impact on page processing/rendering time on a handset.
5. MODP is efficient for small values of n and p. Exponentially increasing n and p worsens performance (not shown in Table 6) and provides little additional traffic savings when object-based RE is performed beforehand (Table 4). Performance could be further improved by enhancements to MODP, such as MAXP and SAMPLEBYTE [5].

### 6. Summary and Recommendations

We summarize our main findings and recommendations as follows:

1. **Underutilization of Compression**: Significant redundancy (15% of overall traffic volume in our trace) is due to underutilization of compression. Content providers should utilize the compression feature supported by all mainstream web servers. Handsets should use the `Accept-Encoding` header field, which appeared in only 40% of HTTP requests within the dataset, to enable compression.

2. **Best Compression Approach for Small Files**: Considering both effectiveness and performance, GZIP is the best compression approach for small files, which contribute significantly to traffic volume (see §5.2). Applying delta encoding on non-trivial cases (§5.2) brings limited benefits, as less than 5% of HTTP bytes belong to files with a different previous version. Except for 7-Zip, decompression performance is generally not an issue on mobile devices, leading to very small impact on page processing/rendering time.

3. **Special Emphasis on Specific File Types**: Special emphasis should be placed on HTML, XML, JavaScript, and CSS files. These account for 15% of the HTTP traffic in the dataset (17% reported in [12] for handheld traffic in campus Wi-Fi networks) but are usually (58% to 98% bytewise) not compressed. More than 70% of their bytes can be saved using compression.

4. **Packet Stream Compression**: Using packet stream compression alone, represented by the MODP algorithm, effectively reduces traffic volume by up to 30%. If object-based RE techniques, which are already part of the HTTP specification, are applied beforehand, the benefit of MODP decreases but remains non-trivial, i.e., a reduction of 5.4% to 7.2% of all traffic. In this case, the impact of the aggressiveness level on CR is much less significant. We recommend deploying MODP in a less aggressive manner, e.g., n≤64k packets and p≤1/16 for downlink. This achieves most of the bandwidth savings possible from MODP while limiting the performance overhead for compression and decompression. Note that packet stream compression provides benefits despite idiosyncrasies in application implementations.

5. **Combination of All RE Techniques**: A judicious combination of all RE techniques achieves an overall reduction of the smartphone traffic studied in this measurement by more than 30% with acceptable computational overhead. This is particularly interesting and somewhat surprising given that a major fraction of the traffic is video, audio, or image, which are already compressed. In comparison, caching by itself only saves 17% of the overall traffic (§5.2).

### Acknowledgements

This work is partly funded by NSF grants CNS-1059372, CNS-1050157, CNS-1039657, and Navy grant N00014-09-1-0705. We thank Emir Halepovic and the shepherd Marios Iliofotou for their valuable comments on the paper. We would also like to thank anonymous reviewers whose comments improved the final version.

### References

1. Invest in Cell Phone Infrastructure for Growth in 2010 (2010), http://pennysleuth.com/invest-in-cell-phone-infrastructure-for-growth-in-2010/
2. Packet Data Convergence Protocol (PDCP) specification. 3GPP TS 25.323
3. SPDY: An experimental protocol for faster web, http://dev.chromium.org/spdy
4. Cisco Visual Networking Index (2012), http://newsroom.cisco.com/press-release-content?type=webcontent&articleId=668380
5. Aggarwal, B., Akella, A., Anand, A., Balachandran, A., Chitnis, P., Muthukrishnan, C., Ramjee, R., Varghese, G.: EndRE: An End-System Redundancy Elimination Service for Enterprises. In: NSDI (2010)
6. Anand, A., Gupta, A., Akella, A., Seshan, S., Shenker, S.: Packet Caches on Routers: The Implications of Universal Redundant Traffic Elimination. In: SIGCOMM (2008)
7. Anand, A., Sekar, V., Akella, A.: SmartRE: An Architecture for Coordinated Network-wide Redundancy Elimination. In: SIGCOMM (2009)
8. Anand, A., Muthukrishnan, C., Ramjee, R.: Redundancy in Network Traffic: Findings and Implications. In: SIGMETRICS (2009)
9. Deutsch, P.: DEFLATE Compressed Data Format Specification version 1.3. RFC 1951 (1996)
10. Erman, J., Gerber, A., Hajiaghayi, M., Pei, D., Sen, S., Spatscheck, O.: To Cache or not to Cache: The 3G case. IEEE Internet Computing (2011)
11. Fielding, R., Gettys, J., Mogul, J., Masinter, H.F.L., Leach, P., Berners-Lee, T.: Hypertext Transfer Protocol - HTTP/1.1. RFC 2616 (1999)
12. Gember, A., Anand, A., Akella, A.: A Comparative Study of Handheld and Non-handheld Traffic in Campus Wi-Fi Networks. In: Spring, N., Riley, G.F. (eds.) PAM 2011. LNCS, vol. 6579, pp. 173–183. Springer, Heidelberg (2011)
13. Korn, D., MacDonald, J., Mogul, J., Vo, K.: The VCDIFF Generic Differencing and Compression Data Format. RFC 3284 (2002)
14. Lumezanu, C., Guo, K., Spring, N., Bhattacharjee, B.: The Effect of Packet Loss on Redundancy Elimination in Cellular Wireless Networks. In: IMC (2010)
15. Mogul, J., Douglis, F., Feldmann, A., Krishnamurthy, B.: Potential benefits of delta encoding and data compression for HTTP. In: SIGCOMM (1997)
16. Mogul, J., Krishnamurthy, B., Douglis, F., Feldmann, A., Goland, Y., van Hoff, A., Hellerstein, D.: Delta encoding in HTTP. RFC 3229 (2002)
17. Qian, F., Quah, K.S., Huang, J., Erman, J., Gerber, A., Mao, Z.M., Sen, S., Spatscheck, O.: Web Caching on Smartphones: Ideal vs. Reality. In: Mobisys (2012)
18. Sanadhya, S., Sivakumar, R., Kim, K.H., Congdon, P., Lakshmanan, S., Singh, J.P.: Asymmetric Caching: Improved Network Deduplication for Mobile Devices. In: Mobicom (2012)
19. Spring, N.T., Wetherall, D.: A Protocol-Independent Technique for Eliminating Redundant Network Traffic. In: SIGCOMM (2000)
20. Zohar, E., Cidon, I., Mokryn, O.O.: The Power of Prediction: Cloud Bandwidth and Cost Reduction. In: SIGCOMM (2011)