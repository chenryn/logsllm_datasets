signatures that correspond with the BCM57765 descriptor rings.
These allow us to ﬁnd out the I/O virtual addresses of mbuf
chains. We performed the whole attack using our non-NIC FPGA
and were equally successful, replacing the free pointer in all
mbuf s we found. Since we had no view of NIC state, this reduced
the accuracy of the exploit ﬁring to a few seconds, additionally
ﬁlling the system log with (ignored) IOMMU page faults.
Disclosure We demonstrated this vulnerability in macOS
10.11.5 and disclosed it to Apple. Apple has since patched the
vulnerability in 10.12.4. Kernel function pointers in mbuf s are
now blinded by XORing with a secret cookie that is held in
kernel memory not exposed to the peripheral device. Because
the bottom 21 bits are known plaintext, we can generate a valid
function pointer to 2MiB of kernel code despite the blinding;
however, it is not called because the ﬂags an attacker needs
to modify have been moved outside DMA-able memory (though
they can still cause the kernel to panic).
Other OS We identiﬁed a similar pattern on Windows using
the kernel debugger. The NET_BUFFER contains some opaque
structures, one of which sometimes contains a function pointer
into tcpip.sys, and a distinctive ﬂags word that makes it
discoverable from the DMA device. We overwrote the function
pointer in the debugger with a pointer to KeBugCheckEx
(the ‘Blue Screen of Death’ function) and succesfully hijacked
control ﬂow. These data structures were entirely exposed to our
FPGA (both NIC and non-NIC versions). We conclude that, were
Windows to improve its use of the IOMMU, it would still be vul-
nerable to such an attack. Windows applies per-module KASLR,
hence we must use tcpip.sys for initial ROP gadgets.
E. Per-device mappings on FreeBSD
FreeBSD uses a network stack with the same BSD origins
as macOS, with similar mbuf structures. However, it provides
per-device IOMMU mappings, with a different page map for
each device. The baseline platform has no windows opened in
its page map and is thus prevented from accessing any memory
at all. If the device reports that it has the vendor and device
ID of a NIC, but does not exhibit the expected behavior, the
driver fails to attach the device and no mappings are opened.
However, memory windows are opened when Thunderclap mas-
querades as a functional NIC, and it is notiﬁed of their locations
via the ring buffer.The mbuf s exposed contain free() function
pointers which an attacker can overwrite to hijack control ﬂow.
8
Attack story 5: FreeBSD kernel privilege via control ﬂow
Despite very different IOMMU conﬁguration, we can adapt
attack 4 to work on FreeBSD. We used TrueOS (formerly
PC-BSD) 10.3, as it is a desktop FreeBSD distribution that by
default performs DHCP against an attached NIC; server FreeBSD
requires explicit conﬁguration of new NICs (it is possible
broadcast conﬁguration trafﬁc may sufﬁce for unconﬁgured
NICs, though we did not try it). We attached our malicious PCIe
NIC to the system. On boot, TrueOS performed DHCP against
our NIC; we were handed mbuf s whose free() function pointers
we could overwrite, enabling a call to kernel code of our choice.
Since FreeBSD does not do KASLR, kernel pointers are static.
The driver tells the NIC the I/O virtual address of the transmit
ring. We search it for the address of an mbuf by looking for
non-2KiB-aligned addresses. Then we modify an mbuf ’s ﬂags
to appear to the host as having external data and a custom
free function. We also must create a reference count inside the
body of the mbuf , and set a ﬁeld that works as a pointer to the
refcount to point to this value. To do this, we need the kernel’s
address for the mbuf . We derive this by masking the mbuf ’s
pointer to its internal data region.
An exploit using the custom free function is slightly more
complicated on FreeBSD than macOS. In contrast to macOS,
which gives full control over all three free function parameters,
FreeBSD always calls the function with the address of the
mbuf as the ﬁrst parameter. However, with a gadget that allows
the stack pointer to be set to the value found in the second
argument register, there is enough to carry out a ROP attack.
Other OS Were macOS to use per-device mappings, a
similar attack would still work subject to defeating KASLR.
Linux prevents it since its skbuff locates function pointers and
data on different pages, and only the data is exposed to our NIC.
It is unclear if this is a deliberate design decision or an artifact
of the allocator.
VII. EXPLORING THE VULNERABILITY SPACE
Thus far, we described vulnerabilities in operating systems
that may be exploited using relatively simple malicious behavior
– there was no need for anything more complex.
However, the vulnerability space is much richer. Fundamentally,
the malicious device presents to the operating system with a series
of claims, about what it is, what resources it needs and how it
behaves. Operating systems are entirely credulous of these claims,
since they have no other means of distrusting them. As a result, a
device driver is attached and further interacts with the device, gen-
erally believing everything the device says. As part of this interac-
tion, memory is exposed to the device based on previous claims.
If the device is malicious, how can it manipulate the OS and
device driver to abuse the shared-memory interface?
A. Linux
Unlike macOS, Linux has no sharing of IOMMU page
mappings between devices – which should, in theory, provide
better security. On macOS we exploited a spatial vulnerability,
where more data is exposed to the NIC than it needs to operate.
On Linux, this is also possible – devices are exposed pages
of 4KiB granularity, and data is leaked from other parts of the
same page. Can an attacker, as a NIC, force further leakage?
Attack story 6: Poor allocators and kernel NAT dispatch
tables
We studied a Fedora 25/kernel 4.8 desktop with a genuine Intel
82574 motherboard NIC that used the e1000e driver. A primary
9
function of the driver is to allocate skbuff s for incoming packets.
These come from a pool, but the data buffers are allocated with
a general kernel allocator, based on the maximum packet size.
When 2KiB buffers are allocated, the other half of the 4KiB
page is a 2KiB allocation from another part of the kernel. Using
SystemTap tracing [54] we dumped pages that were exposed to
the read queue of the Intel NIC. In these we found much kernel
data, for instance the dispatch table for the nf_nat Network
Address Translation packet rewriting functions. Since the NIC
can write this table, a malicious function could be attached
which rewrites destination addresses of packets to exﬁltrate to a
malicious Internet server.
Attack story 7: Spatio-temporal attack – UNIX domain
sockets and VPN trafﬁc
Having been given a packet, the NIC should update the ring buffer
pointer to indicate the packet was accepted for transmission. Until
the NIC updates the pointer, Linux will keep the window open
assuming the NIC is still busy. We conceived a spatio-temporal
attack where a malicious NIC can thus force the window to
stay open and monitor data in other parts of the window.
We modiﬁed our FPGA NIC to drop return updates, causing
windows to be left open. We then watched as other parts of the
pages were reused over time. In the windows we saw syscall
kernel stacks (not writable, but enough to break ASLR for
kernel code and all data memory); UNIX domain socket trafﬁc
(as used by security protocols such as SSH agent authentication)
and plaintext VPN trafﬁc.
B. PCIe conﬁguration vulnerabilities
PCIe allows devices to self-describe. A region of memory
called conﬁguration space contains a description of the device,
accessed by special conﬁguration request packets.
Conﬁguration space provides information such as vendor,
device type and ranges of registers the device provides. Additional
features are indicated by capabilities, data structures that describe
optional functionality such as power control. Firmware and oper-
ating systems use this data to understand what devices are present
in the system and attach the appropriate software drivers to them.
This not only allows the attacker to select the device driver
to target, but also to manipulate conﬁguration of PCIe by the
OS’s bus management framework to maximize advantage during
an attack.
Attack story 8: Full IOMMU bypass with ATS
PCIe can allow devices to carry out IOMMU translations
themselves, bypassing the central IOMMU, with the rationale
that devices can implement IOTLBs that are tailored to their
requirements. This feature is called ‘Address Translation
Services’ (ATS) in the PCIe speciﬁcation, and ‘Device TLBs’ by
Intel. Memory requests that have been translated by the device
have a header bit set, which implies that the IOMMU does not
need to apply translation. A device that supports ATS has the
ATS capability in its PCIe conﬁguration space, and the feature
must be enabled by the OS otherwise such requests are dropped.
Linux’s IOMMU subsystem allows any device with this PCIe
capability to use ATS. We modiﬁed our NIC model to report
support for ATS, and conﬁrmed Linux enabled it.
Without
the ATS capability, no memory windows were
accessible to our device. When the device advertised ATS support,
Linux enabled the ATS feature in the PCIe switches. Then we set
the ‘already translated’ bit in each memory packet, and we had un-
restricted access to memory. PCIe Access Control Services (ACS)
can block such ‘pre-translated’ requests however this was not
Windows: Windows currently uses a Thunderbolt prompt as
its only defense against DMA attacks: an approved device has
full access to all of system memory. UEFI ﬁrmware settings
allow TBT to operate in several modes – everything allowed;
USB/DisplayPort only; always prompt the user; or ‘secure
mode’, which checks a token previously saved on the device. On
our Dell laptop, the default ﬁrmware setting prompts for each
device. In Windows the user is prompted whether to disable
PCIe access, allow only once, or accept and remember the
setting. The prompt gives the TBT device name, which can be
content-free (Figure 6), and does not represent the actual PCIe
devices connected to the TBT bridge [21]. For a Thunderbolt
dock with a trojan PCIe device inside,
is no
different. Additionally, replacing the PCIe board in an approved
Thunderbolt device with a malicious one does not cause a
subsequent re-authentication [21]. Since users become habituated
to prompts, and can be misled by the physical shape of the
device, they can be tricked into accepting a malicious device.
Linux will accept TBT devices that are authorized by the
ﬁrmware and connected at boot. Patches for approval of hotplug
devices have been produced by Intel [36] and distributions are
beginning to implement user interfaces.
the prompt
FreeBSD has no TBT hotplug support, although it will
accept devices that are connected at boot and authorized by
the boot ﬁrmware, as they present as generic PCIe.
IX. DISCUSSION AND MITIGATIONS
Our work with vendors (see Section XI) has caused them
to ship mitigations to the speciﬁc attacks we have described.
However, many of the vulnerabilities we uncovered concern
the behavior of fundamental operating system components such
as kernel memory allocators, IOMMU-controlling subsystems,
and peripheral device drivers. In this section we consider how
vulnerabilities in operating system IOMMU protection may be
mitigated and why doing so is not necessarily straightforward.
A. New adversary models
Fundamentally, a change in threat model of operating systems
and device drivers is needed. Peripherals can no longer be
considered trustworthy and should be removed from system
TCBs. OS developers (and attackers) have long understood
that, despite using an MMU to separate kernel and user process,
the system-call interface is a rich attack surface on the kernel.
The interface offers breadth and depth of interaction with
complex kernel subsystems, any of which might suffer a security
vulnerability yielding ring-0 privilege. Our work shows that, with
a shift in adversary model, I/O peripheral DMA interfaces offer
an equally rich attack surface despite use of the IOMMU: the
complex performance-sensitive feature-rich concurrent shared-
memory interfaces used by peripherals can inﬂuence the behavior
of numerous kernel-resident device drivers and subsystems.
Some of our discoveries reﬂect simple and easily corrected
implementation mistakes. For example, I/O buffers should
not be allocated from the same pool as kernel jump tables.
Doing so would enable a malicious peripheral to gain arbitrary
privileged code execution trivially by exploiting spatial or
temporal vulnerabilities. More fundamentally, however, current
OS designs expose millions of lines of ring-0 device-driver code
to adversaries which they were never designed to protect against.
Even with careful review, drivers are unlikely to resist attacks –
and, as with system calls, the attacker is given their choice of code
to attack: PCIe devices can declare the device ID of the weakest
driver. Mitigations against system-call exploits, such as KASLR,
10
Fig. 6: When a malicious Thunderbolt device is attached,
Windows prompts for access without a description of what
rights are being requested. Users cannot make an informed
decision whether to enable a device.
enabled by default, perhaps due to performance considerations.
Other OS FreeBSD, macOS and (we suspect) Windows do
not support ATS, so are not vulnerable to vulnerabilities of this
nature. Of our test machines, only our server and Dell laptop
supported ATS.
VIII. DEVICE ACCESS CONTROL
In previous sections, we have explored the vulnerability space
of operating system IOMMU protection using the Thunderclap
platform. Here we brieﬂy address access control security features
of peripheral interconnects. These are largely orthogonal to the
broader attack surface we have described but must be subverted
by an attacker in practice.
1) PCIe: lacks protections to vet, block, or audit unauthorized
devices. An attached device is automatically allowed to send and
receive packets. The IOMMU ﬁlters only memory trafﬁc. PCIe
Access Control Services (ACS) can block other types but only in
limited circumstances. Apart from pluggable ExpressCards, most
PCIe devices are internal. Compromising the ﬁrmware of existing
internal devices is thus the primary attack vector against PCIe.
2) Firewire: has no access-control: all connected devices
are given rights to generate memory transactions. While mostly
obsolete, adaptors from Firewire to Thunderbolt still provide
an attack vector.
3) Thunderbolt (TBT): tunnels PCIe and DisplayPort (DP)
video, over USB Type-C or miniDisplayPort connectors. Users
can be (deliberately) confused whether a port supports TBT or
just native USB/video. TBT supports an access control protocol,
but it concerns only the TBT-PCIe bridge device and not the
PCIe device beyond it. A PCIe device can be replaced without
the access-control mechanisms being aware [21] and the system
cannot query a PCIe device before enabling DMA.
MacOS applies whitelisting for Thunderbolt devices, keyed
on their ID ROM. Apple’s requirements are unclear, but
generally a device sold as ‘Mac compatible’ will be on the
whitelist. Once whitelisted, a device is free to make PCIe
transactions, and all of the vulnerabilities that we describe
will apply. Any whitelisted Thunderbolt device could perform
our attacks. Many Thunderbolt to PCIe bridges (intended for
external GPU enclosures) are whitelisted, so the attacker has a
variety of choices. On a Mac, we could switch out the internal
PCIe board of our Thunderbolt docking station, and the new
PCIe device would be accepted by the OS without any messages
or prompts. For example, a Thunderbolt device shaped as a
‘charger’ is indistinguishable from a USB-C charger.
can be useful. However, they are no help if undermined elsewhere
– as for KASLR when device drivers leak kernel pointers.
B. Performance
These
performance
Previous work describes two main performance problems with
the IOMMU. These are IOTLB pressure (caused by a large
number of in-ﬂight mappings ﬁghting for limited IOTLB space),
and the slow speed of IOTLB invalidations [3], [9], [48]. As a
result, there is considerable cost to turning on the IOMMU by
default, which may explain why Linux and FreeBSD do not do so.
complicate mitigating
vulnerabilities
in operating system IOMMU protection.
Speciﬁcally, providing better protection may involve creating
more IOMMU mappings to isolate individual data objects (to
address spatial vulnerabilities) and invalidating the IOTLB more
frequently or in performance-critical code paths (to address
temporal vulnerabilities). Both of these techniques increase
IOTLB pressure and reduce overall system performance, which
makes adopting them less straightforward.
concerns
Some prior work describes improvements to the way the
IOMMU is used, which claims to ameliorate this cost [3],
[40]–[43], [53], although not addressing all of our vulnerabilities.
Markuze [42] proposed shadow buffering, an IOMMU driver
design that addresses both the spatial and temporal vulnerabilities.
It involves copying data to and from a region of memory
that is always accessible to a peripheral on map and unmap
calls. While shadow buffering provides protection from known
DMA attacks, its performance cost prevents it from providing
a complete solution in practice. They later improve with
DAMN [43], a scheme which implements a special allocator
for pre-IOMMU-exposed packets. Since these allocators are
dedicated to a particular NIC, it reduces invalidation and IOTLB
churn, although all received packets must still be copied out
of these buffers (increasing cache pressure) and inter-NIC trafﬁc
(for example, when routing) would require double-copying.
Address utilization study. Much of the focus of prior work
has been on network stacks. We investigated whether similar
work would apply equally to other device classes. In particular,
much of the work focuses on either copying or pre-allocation