的命令。NOPASSWD代表不需要密码直接可运行Sudo,限制多命令一定要写绝对路径，用逗号分开，多行用
\'，用！代表不能执行
%aixi
ALL=(ALL)
NOPASSWD: ALL
%aixi
ALL=(ALL)
NOPASSWD: /bin/ls,/bin/mkdir,/bin/rmdir,\
/usr/bin/who,!/usr/bin/passwd root
---
## Page 23
查询用户命令
W
可显示开机多久，当前登录的所有用户，平均负载
Who
显示当前登录的所有用户
Last
显示每个用户最后的登录时间
Lastlog
显示每个用户最后的登录时间
四、文件权限
1、文件类型
Linux广泛的被很多用户所接受，它强大的功能受到很多人喜欢，Linux文件一般是用一些相关的应
用程序创建，比如图像工具、文档工具、归档工具....或cp工具等。Linux文件的删除方式是用rm命
令。
Linux文件类型和Linux文件的文件名所代表的意义是两个不同的概念.我们通过一般应用程序而创建的
比如file.txt、fle.tar.g，这些文件虽然要用不同的程序来打开，但放在Linux文件类型中衡量的话，大
多是常规文件（也被称为普通文件）。
Linux文件类型常见的有：普通文件、目录、字符设备文件、块设备文件、符号链接文件等：现在我们
进行一个简要的说明：
1普通文件
1. [root@localhost ≈]# Is -Ih install.log
2.-rw-r--- 1 root root 53K 03-16 08:54 install.log
我们用s-Ih来查看某个文件的属性，可以看到有类似-rw-r--r--，值得注意的是第一个符号是-，
这样的文件在Linux中就是普通文件。这些文件一般是用一些相关的应用程序创建，比如图像工具、文
档工具、归档工具..或cp工具等。这类文件的删除方式是用rm命令：
2目录
1.[root@localhost ~]# Is -Ih
2.总计14M
3.-rw-r--r-- 1 root root  2 03-27 02:00 fonts.scale
4. -rw-r--r 1 root root 53K 03-16 08:54 install.log
5. -rw-r--r 1 root root 14M 03-16 07:53 kernel-6.15-1.2025_FC5.i686.rpm
6. drwxr-xr-x 2 1000 users 4.0K 04-04 23:30 mkuml-2004.07.17
7.drwxr-xr-x 2 root root 4.0K 04-19 10:53 mydir
8. drwxr-xr-x 2 root root 4.0K 03-17 04:25 Public
当我们在某个目录下执行，看到有类似drwxr-xr-x，这样的文件就是目录，目录在Linux是一个比较
特殊的文件。注意它的第一个字符是d。创建目录的命令可以用mkdir 命令，或cp命令，cp可以把一
个目录复制为另一个目录。删除用rm或rmdir命令。
3字符设备或块设备文件
---
## Page 24
如时您进入/dev目录，列一下文件，会看到类似如下的：
1.  [root@localhost ~]# Is -la /dev/tty
2. crw-rw-rw- 1 root tty 5, 0 04-19 08:29 /dev/tty
3.  [root@localhost ~]# Is -la /dev/hda1
4.brw-- 1 root disk 3, 1 2006-04-19 /dev/hda1
我们看到/dev/tty的属性是crw-rw-rw-，注意前面第一个字符是c，这表示字符设备文件。比如猫等
串口设备
我们看到/dev/hda1的属性是brw-r-，注意前面的第一个字符是b，这表示块设备，比如硬盘，光
驱等设备：
这个种类的文件，是用mknode来创建，用rm来删除。目前在最新的Linux发行版本中，我们一般不
用自已来创建设备文件。因为这些文件是和内核相关联的。
4套接口文件
当我们启动 MySQL服务器时，会产生一个mysql.sock的文件。
1. [root(@localhost ~]# Is -Ih /var/lib/mysql/mysql.sock
2. srwxrwxrwx 1 mysql mysql 0 04-19 11:12 /var/lib/mysql/mysql.sock
注意这个文件的属性的第一个字符是s。我们了解一下就行了。
5符号链接文件
1.  [root(@localhost ~]# Is -lh setup.log
2. lrwxrwxwx 1 root root 11 04-19 11:18 setup.log -> install.log
当我们查看文件属性时，会看到有类似Irwxrwxrwx,注意第一个字符是I，这类文件是链接文件。是通过
In -s 源文件名 新文件名。上面是一个例子，表示 setup.log是installog 的软链接文件。怎么理解呢？
这和Windows操作系统中的快捷方式有点相似。
符号链接文件的创建方法举例：
1. [root@localhost ~]# Is -Ih kernel-6.15-1.2025_FC5.i686.rpm
2.-Fw-r---- 1 root root 14M 03-16 07:53 kernel-6.15-1.2025_FC5.i686.rpm
3. [root@localhost ~]# In -s kernel-6.15-1.2025_FC5.i686.rpm kernel.rpm
4.[root@localhost ~]# Is -Ih kernel*
5.-w-r--r- 1 root root 14M 03-16 07:53 kernel-6.15-1.2025_FC5.i686.rpm
6.lrwxrwxrwx 1 root root 33 04-19 11:27 kernel.rpm -> kernel-6.15-1.2025_FC5
2、文件权限
Linux系统是一个典型的多用户系统，不同的用户处于不同的地位。为了保护系统的安全性，Linux
系统对不同用户访间同一文件的权限做了不同的规定。
对于一个Linux系统中的文件来说，它的权限可以分为三种：读的权限、写的权限和执行的权限，
分别用r、w和x表示。不同的用户具有不同的读、写和执行的权限。
对于一个文件来说，它都有一个特定的所有者，也就是对文件具有所有权的用户。同时，由于在
件所有者的同组用户和其它用户。因此，Linux系统按文件所有者、文件所有者同组用户和其它用户三
类规定不同的文件访问权限。
权限的概念
Linux文件系统安全模型是通过给系统中的文件赋予两个属性来起作用的，这两个赋予每个文件的
一个组。
下图是在我机器上的/root目录下运行s-I命令的情况。
---
## Page 25
[rooteRedHat ~]# 11
081
rW-
- 1 root root 1460 0304 05:03 snacondsks.cfg
drwxrxrx 2 root root 4096 0304 06:01 Desktop
rwrr- 1 root root 47018 0304 05:03 insta11.1og
rwrr- 1 root root  4186 0304 05:01 insta11.1og.sys1og
drwxr-xr-x 7 root root 4096 01-23 09:25 vmware-tools-distrib
--J--J-MJ-
这些符号用来描述文件的访间权限类别，也就是常说的文件权限。这些访问权限指导Linux根据文
件的用户和组所有权来处理所有访问文件的用户请求。总共有10种权限属性，因此一个权限列表总是
10个字符的长度。它的格式遵循下列规则：
第1个字符表示一种特殊的文件类型。其中字符可为d表示该文件是一个目录)、b（表示该文件
是一个系统设备，使用块输入/输出与外界交互，通常为一个磁盘）、c（表示该文件是一个系统设备，使
用连续的字符输入/输出与外界交互，如串口和声音设备），“.”表示该文件是一个普通文件，没有特殊
属性。
●2～4个字符用来确定文件的用户(user)权限，5~7个字符用来确定文件的组（group)权限，8～10
个字符用来确定文件的其它用户(otheruser，既不是文件所有者，也不是组成员的用户)的权限。其中，
2、5、8个字符是用来控制文件的读权限的，该位字符为r表示允许用户、组成员或其它人可从该文件
中读取数据。短线“-”则表示不允许该成员读取数据。与此类似，3、6、9位的字符控制文件的写权
限，该位若为w表示允许写，若为“.”表示不允许写。4、7、10位的字符用来控制文件的制造权限，
该位若为x表示允许执行，若为“”表示不允许执行。
任何列在/etc/passwd文件中的用户都可以是一个文件的所有者，也称为该文件的用户。同样任何
列在/etc/group文件中的组都可以是文件组的所有者，也简称为文件的组。
drwxrwxr-- 2 root root 4096 2 月 11 10:36 guo
因为guo的第1个位置的字符是d，所以由此知道guo是一个目录。第2至4位置上的属性是rwx，
表示用户root拥有权限列表显示guo中所有的文件、创建新文件或者删除guo中现有的文件，或者将
guo作为当前工作目录。第5至7个位置上的权限是rwx，表示root组的成员拥有和root一样的权限。
第8至10位上的权限仅是r-，表示不是root的用户及不属于root组的成员只有对guo目录列表的权
限。这些用户不能创建或者删除guo中的文件、执行junk中的可执行文件，或者将junk作为他们的当
前工作目录。
rwxr-xr-- 1 user admin 20480 11 月 11 09:23 Readme.txt
在该项中，第1个位置是短线“-”，表示该文件是一个普通文件，没有特殊属性。该文件对任何人
都可读，只对user可写，user和admin的组成员可以执行该文件。
另外需要注意的是，当用户访问一个文件时，权限检查是从左到右的。假设上述的readme.txt文件
其有以下权限：
---rW-f--
那么即使user是属于admin组的一个成员，也不能对该文件进行写操作，因为已经被左边的写权
限设置拒绝了。
一般文件权限读（R），写（W，执行（X）权限比较简单。一般材料上面都
有介绍。这里介绍一下一些特殊的文件权限一一SUID，SGID，Stickbit。
如果你检查一下/usr/bin/passwd和/tmp/的文件权限你就会发现和普
---
## Page 26
通的文件权限有少许不同，如下图所示：
/d/pt-spmssed/ua/xen/-sts~:dondet-uoutsgu
rwsr-xr-x1rootroot 41292 2009-07-31 21:55/usr/bin/passwd
drwxrwxrwt 7root root 4096 2010-03-27 22:30
tmp
这里就涉及到SUID和 Stickbit。
SUID和SGID
我们首先来谈一下passwd程序特殊的地方。大家都知道，Linux把用户的密码信息存放
在/etc/shadow里邮，该文件属性如下：
可以看到Shadow
的只有所有者可读写，所有者是root，所以该文件对普通用户是不可读写的。但是普通用户调
用passwd程序是可以修改自己的密码的，这又是为什么呢？难道普通用户可以读写shadow
文件？难道Linux有漏洞？当然不是啦。password可以修改shadow文件的原因是他设置了
SUID文件权限。
SUID文件权限作用于可执行文件。一般的可执行文件在执行期的所有者是当前用户，比
如当前系统用户是simon，simon运行程序a.out，a.out执行期的所有者应该是simon。但是
如果我们给可执行文件设置了SUID权限，则该程序的执行期所有者，就是该文件所有者。还
以前面的a.out为例，假如a.out设置了SUID，并且其所有者是root，系统当前用户是simon，
当simon运行a.out的时候，a.out在运行期的所有者就是root，这时a.out可以存取只有root
权限才能存取的资源，比如读写shadow文件。当a.out执行结束的时候当前用户的权限又回
到了simon的权限了。
passwd就是设置了SUID权限，并且passwd的所有者是root，所以所有的用户都可以
执行他，在passwd运行期，程序获得临时的root权限，这时其可以存取shadow文件。当passwd
运行完成，当前用户又回到普通权限。
同理，设置程序的SGID，可以使程序运行期可以临时获得所有者组的权限。在团队开发
的时候，这个文件权限比较有用，一般系统用SUID比较多。
SGID可以用于目录，当目录设置了SGID之后，在该目录下面建立的所有文件和目录都
具有和该目录相同的用户组。
Stickbit（粘贴位）
对程序，该权限告诉系统在程序完成后在内存中保存一份运行程序的备份，如该程序常
用，可为系统节省点时间，不用每次从磁盘加载到内存。Linux当前对文件没有实现这个功能，
一些其他的UNIX系统实现了这个功能。
Stickbit可以作用于目录，在设置了粘贴位的目录下面的文件和目录，只有所有者和root
可以删除他。现在我们可以回头去看看/tmp/目录的情况，这个目录设置了粘贴位。所以说，
并且所有人都可以对该目录读写执行（777），这样意味着所有人都可以在/tmp/下面创建临时
---
## Page 27
目录。因为设置Stickbit只有所有者和root才能删除目录。这样普通用户只能删除属于自己
的文件，而不能删除其他人的文件。如下图所示：
rwxrwxrwx1rootroot02010-03-2723:29root fi1e
sinon@sinon-laptop:/tmpsrm root file
rm：无法删除“rootfile：操作不允许
设置 SUID，SGID，Stick bit
前面介绍过SUID与SGID的功能，那么，如何打开文件使其成为具有SUID与SGID的
权限呢？这就需要使用数字更改权限了。现在应该知道，使用数字更改权限的方式为“3个数
字"的组合，那么，如果在这3个数字之前再加上一个数字，最前面的数字就表示这几个属性
了（注：通常我们使用chmod xyzfilename 的方式来设置filename 的属性时，则是假设没有
SUID、SGID 及 Sticky bit)。
4为SU1D
2为 SGID
1为 Sticky bit
假设要将一个文件属性改为“-rwsr-Xr-x”，由于s在用户权限中，所以是SUID，因此，在
原先的755之前还要加上4，也就是使用“chmod4755filename”来设置。
SUID也可以用“chmod u+s filename”来设置，“chmodu-s filename”来取消 SUID 设
置：同样，SGiD可以用“chmod g+s filename”，“chmod g-s filename”来取消SGiD设置。
一般来说，使用过Linux的同学都知道，Linux文件的权限有rwx，所有者、所有组、其它用户的rwx权限
是彼此独立的。为此，经常会听到如果某个web文件需要被修改的话，需要加上777的权限，这就是让所有
用户可写。
但仔细一想，这样的权限未免有些想得比较天真，没有考滤特殊情况。例如/tmp目录默认权限是777，
而且有些文件也是允许所有用户访间修改的，那么是不是任何一个用户都可以将这些删除呢？再如
/etc/shadow保存的是用户密码文件，默认情况下它的权限是640，那么只有shadow的owner（root）才能修
改它，按照常规理解，这是不可理解的，因为每个用户都可能修改密码，也就是会修改这个文件。
为了把这些情况解释清楚，需要引入Linux特殊文件权限的概念。Linux特殊文件权限有三个玩意：
sticky bit、SGID、SUID，以下—一道来。
sticky bit
stickybit只对目录有效，使目录下的文件，只有文件拥有者才能删除（如果他不属于owner，仅属于
group或者other，就算他有v权限，也不能删除文件）。
加 sticky bit 的方法：
chmod o+t/tmp 或者
---
## Page 28
chmod 1777 /tmp
上了sticky bit，而且生效了，如果显示的是“-rwxrwxrwT”，说明也已经加上了sticky bit，但没有生
效（因为本来other就没有写的权限）。
看看/tmp目录的权限，就是drwxrwxrwt吧
SGID (The Set GroupID )
加上SGID的文件，表示运行这个程序时，是临时以这个文件的拥有组的身份运行的：加上SGID的文件
夹，表示在这个目录下创建的文件属于目录所有的组，而不是创建人所在的组，在这个目录下创建的目录继
承本目录的SGID。
加 SGID 的方法：
chmod g+s /tmp 或
chmod 2777 /tmp
查看是否加了SGID，用1s-1，可以看到类似这样的权限“drwXIWsrwx”，s就代表已经加上了SGID,
而且生效，如果显示“drrxrwSrwx”。说明已经加上了SGID，但没有生效（因为本来group就没有执行的
权限）
SUID(The Set UserID)
SUID与SGID是一样的，惟一不同的是，运行时是以这个文件的拥有者身份来运行。
加SUID的方法：
chmod o+s /tmp 或
chmod 4777 /tmp
同样的，加了SUID 的文件权限有这类似这两种：“drwsruxrwx”、“druSrwxrwx”。
看看 passwd 命令的权限：11/usr/bin/passwd，是-rwsr-x-rx，终于知道为什么执行 passwd 时，可
以修改/etc/shadow文件了吧
SUID：置于u的x位，原位置有执行权限，就置为s，没有了为S
SGID：置于g的x位，原位置有执行权限，就置为s，没有了为S。
STICKY：粘滞位，置于o的x位，原位置有执行权限，就置为t，否则为T，
---
## Page 29
3、超级权限控制
在Linux操作系统中，root的权限是最高的，也被称为超级权限的拥有者。善通用户无法执行的操作，root用户都能完
成，所以也被称之为超级管理用户
在系统中，每个文件、目录和进程，都归属于某一个用户，没有用户许可其它普通用户是无法操作的，但对root除外。root
用户的特权性还表现在root可以超越任何用户和用户组来对文件或目录进行读取、修改或删除（在系统正常的许可范围内）：
对可执行程序的执行、终止：对硬件设备的添加、创建和移除等：也可以对文件和目录进行属主和权限进行修改，以适合系
统管理的需要（因为root是系统中权限最高的特权用户）：
3.1、对超级用户和普通用户的理解
3.1.1、什么是超级用户；
在所有Linux系统中，系统都是通过UID来区分用户权限级别的，面UID为0的用户被系统约定为是具有超级权限。超级用
户具有在系统约定的最高权限满园内操作，所以说超级用户可以完成系统管理的所有工具：我们可以通过/etc/passwd来查得
UID为0的用户是root，而且只有root对应的UID为0，从这一点来看，root用户在系统中是无可替代的至高地位和无限制
权限。root用户在系统中就是超级用户：
3.1.2、理解UID和用户的对应关系
确认的，我们在《用户（user）和用户组（group）配置文件详解》中的UID的解说中有谈到"UID是确认用户权限的标识，
用户登录系统所处的角色是通过UID来实现的，而非用户名：把几个用户共用一个UID是危险的，比如我们把普通用户的
UID改为0，和root共用一个UID，这事实上就造成了系统管理权限的混乱。如果我们想用root权限，可以通过su或sudo
深实现：切不可随意让一个用户和root分享同一个UID：“
在系统中，能不能让UID和用户是一对多的关系？是可以的，比如我们可以把一个UID为0这个值分配给几个用户共同使用，
这就是UID和用户的一对多的关系。但这样做的确有点危险：相同UID的用户具有相同的身份和权限。比如我们在系统中把
beinan这个普通用户的UID改为0后，事实上这个普通用户就具有了超级权限，他的能力和权限和root用户一样：用户beinan
所有的操作都将被标识为 root 的操作，因为 beinan 的 OID 为 0,i而 UID 为 0 的用户是 root，是不是有点扰口? 世可 以理解发
UID为0的用户就是root，root用户的 UID 就是0;
UID和用户的一对一的对应关系，只是要求管理员进行系统管理时，所要坚守的准则，因为系统安全还是第一位的。所以我
们还是把超级权限保留给root这唯一的用户是最好的选择；
3.1.3、普通用户和伪装用户
与超级用户相对的就是普通用户和虚拟（也被称为伪装用户），普通和伪装用户都是受限用户：但为了完成特定的任务，普
通用户和伪装用户也是必须的：Linux是一个多用户、多任务的操作系统，多用户主要体现在用户的角色的多样性，不同的用
户所分配的权限也不同：这也是Linux系统比Windows 系统更为安全的本质所在，即使是现在最新版本的Windows 2003，
地无法抹去其单用户系统的烙印
3.2.超级用户（权限）在系统管理中的作用
超级权限用户（UID为0的用户）到底在系统管理中起什么作用呢？主要表现在以下两点：
3.2.1、对任何文件、目录或进程进行操作；
但值得注意的是这种操作是在系统最高许可范围内的操作：有些操作就是具有超级权限的root也无法完成：
比如/proc 目录，/proc 是用来反应系统运行的实时状态信息的，因此即便是root也无能为力：它的权限如下
---
## Page 30