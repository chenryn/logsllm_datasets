## PostgreSQL 并行逻辑备份与一致性讲解 - PostgreSQL 9.3 parallel pg_dump    
### 作者                                                                                                                                                 
digoal                                                                                               
### 日期                                                                                                 
2013-03-25                                                                                                
### 标签                                                                                               
PostgreSQL , 逻辑备份 , 并行逻辑备份 , 事务快照 , snapshot                
----                                                                                              
## 背景            
PostgreSQL pg_dump并行备份的功能已经提交到最新的代码中, 9.3中应该会包含此功能. 导出速度提升非常明显.    
前段时间写过一篇并行导出的BLOG, 与pg_dump的并行导出一样都用到了9.2开始引入的export snapshot功能.    
感兴趣的朋友可以看如下文章 :     
http://blog.163.com/digoal@126/blog/static/163877040201326829943/    
接下来将测试一下pg_dump的并行导出功能.    
1\. 下载    
```    
su - pgdev    
pgdev@db-172-16-3-150-> wget --no-check-certificate https://github.com/postgres/postgres/archive/master.zip -O postgresql9.3.zip    
```    
2\. 安装    
```    
pgdev@db-172-16-3-150-> unzip postgresql9.3.zip    
pgdev@db-172-16-3-150-> less .bash_profile    
export PS1="$USER@`/bin/hostname -s`-> "    
export PGPORT=9300    
export PGUSER=postgres    
export PGDATA=/data06/pgdev/pg_root    
export LANG=en_US.utf8    
export PGHOME=/home/pgdev/pgsql9.3    
export PGHOST=127.0.0.1    
export PGDATABASE=digoal    
export LD_LIBRARY_PATH=/opt/uuid-1.6.2/lib:$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib    
export DATE=`date +"%Y%m%d%H%M"`    
export PATH=$PGHOME/bin:$PATH:.    
export MANPATH=$PGHOME/share/man:$MANPATH    
alias rm='rm -i'    
alias ll='ls -lh'    
su - root    
[root@db-172-16-3-150 ~]# . /home/pgdev/.bash_profile     
root@db-172-16-3-150-> cd postgres-master/    
root@db-172-16-3-150-> ./configure --prefix=/home/pgdev/pgsql9.3 --with-pgport=9300 --with-perl --with-python --with-tcl --with-openssl --with-pam --without-ldap --with-libxml --with-libxslt --enable-thread-safety --enable-cassert --with-wal-blocksize=16 --enable-debug && gmake    
root@db-172-16-3-150-> gmake install    
root@db-172-16-3-150-> cd contrib/    
root@db-172-16-3-150-> gmake install    
root@db-172-16-3-150-> su - pgdev    
pgdev@db-172-16-3-150-> initdb -D $PGDATA --locale=C -E UTF8 -U postgres    
pgdev@db-172-16-3-150-> pg_ctl start    
server starting    
postgres=# create table t1(id int, info text, crt_time timestamp);    
CREATE TABLE    
postgres=# create table t2(id int, info text, crt_time timestamp);    
CREATE TABLE    
postgres=# create table t3(id int, info text, crt_time timestamp);    
CREATE TABLE    
postgres=# create table t4(id int, info text, crt_time timestamp);    
CREATE TABLE    
postgres=# create table t5(id int, info text, crt_time timestamp);    
CREATE TABLE    
postgres=# create table t6(id int, info text, crt_time timestamp);    
CREATE TABLE    
postgres=# create table t7(id int, info text, crt_time timestamp);    
CREATE TABLE    
postgres=# create table t8(id int, info text, crt_time timestamp);    
CREATE TABLE    
postgres=# insert into t1 select generate_series(1,2000000),md5(random()::text),clock_timestamp();    
postgres=# insert into t2 select generate_series(1,1500000),md5(random()::text),clock_timestamp();    
postgres=# insert into t3 select generate_series(1,1000000),md5(random()::text),clock_timestamp();    
postgres=# insert into t4 select generate_series(1,3000000),md5(random()::text),clock_timestamp();    
postgres=# insert into t5 select generate_series(1,4000000),md5(random()::text),clock_timestamp();    
postgres=# insert into t6 select generate_series(1,1000000),md5(random()::text),clock_timestamp();    
postgres=# insert into t7 select generate_series(1,1000000),md5(random()::text),clock_timestamp();    
postgres=# insert into t8 select generate_series(1,5000000),md5(random()::text),clock_timestamp();    
```    
3\. 并行导出测试 :     
并行度为8, 导出耗时36秒 :     
```    
pgdev@db-172-16-3-150-> date;pg_dump -f ./postgres.dmp -F d -E UTF8 -j 8 -h $PGDATA -p 9300 -U postgres postgres;date    
Mon Mar 25 10:51:18 CST 2013    
Mon Mar 25 10:51:54 CST 2013    
```    
pg_dump fork了8个进程来处理dump.    
```    
pgdev@db-172-16-3-150-> ps -ewf|grep pg_dump    
pgdev    17136 16544  1 10:56 pts/1    00:00:00 pg_dump -f ./postgres.dmp -F d -E UTF8 -j 8 -h /data06/pgdev/pg_root -p 9300 -U postgres postgres    
pgdev    17138 17136 68 10:56 pts/1    00:00:01 pg_dump -f ./postgres.dmp -F d -E UTF8 -j 8 -h /data06/pgdev/pg_root -p 9300 -U postgres postgres    
pgdev    17140 17136 66 10:56 pts/1    00:00:01 pg_dump -f ./postgres.dmp -F d -E UTF8 -j 8 -h /data06/pgdev/pg_root -p 9300 -U postgres postgres    
pgdev    17141 17136 67 10:56 pts/1    00:00:01 pg_dump -f ./postgres.dmp -F d -E UTF8 -j 8 -h /data06/pgdev/pg_root -p 9300 -U postgres postgres    
pgdev    17142 17136 66 10:56 pts/1    00:00:01 pg_dump -f ./postgres.dmp -F d -E UTF8 -j 8 -h /data06/pgdev/pg_root -p 9300 -U postgres postgres    
pgdev    17144 17136 68 10:56 pts/1    00:00:01 pg_dump -f ./postgres.dmp -F d -E UTF8 -j 8 -h /data06/pgdev/pg_root -p 9300 -U postgres postgres    
pgdev    17145 17136 60 10:56 pts/1    00:00:01 pg_dump -f ./postgres.dmp -F d -E UTF8 -j 8 -h /data06/pgdev/pg_root -p 9300 -U postgres postgres    
pgdev    17146 17136 67 10:56 pts/1    00:00:01 pg_dump -f ./postgres.dmp -F d -E UTF8 -j 8 -h /data06/pgdev/pg_root -p 9300 -U postgres postgres    
pgdev    17147 17136 56 10:56 pts/1    00:00:01 pg_dump -f ./postgres.dmp -F d -E UTF8 -j 8 -h /data06/pgdev/pg_root -p 9300 -U postgres postgres    
```    
4\. 普通导出, 导出耗时129秒 :     
```    
pgdev@db-172-16-3-150-> date;pg_dump -f ./postgres.dmp -F d -E UTF8 -h $PGDATA -p 9300 -U postgres postgres;date    
Mon Mar 25 10:52:32 CST 2013    
Mon Mar 25 10:54:41 CST 2013    
pgdev@db-172-16-3-150-> ps -ewf|grep pg_dump    
pgdev    17173 16544 89 10:58 pts/1    00:00:01 pg_dump -f ./postgres.dmp -F d -E UTF8 -h /data06/pgdev/pg_root -p 9300 -U postgres postgres    
```    
5\. 并行导出对9.1以及更老的版本也适用, 但是请注意以下.    
## 注意    
1\. 并行导出利用了PostgreSQL引入的事务状态导出特性. 对于不支持并行导出的数据库版本, 9.2以前的版本. 如果使用并行导出, 可能导出不一致的数据, 那么为了在9.1以及以前的版本并行导出一致的数据, 办法是导出时禁止被导出表的一切DML操作, 并且加上pg_dump 的 --no-synchronized-snapshots 选项.    
导出事务状态的文章可参考如下 :     
http://blog.163.com/digoal@126/blog/static/1638770402012416105232835/    
2\. 目前pg_dump的并行导出需要注意, pg_dump子进程获取锁不是一步到位的, 而是随着备份进行去单个获取的(并且使用了nowait), 所以如果在导出过程中, 子进程获取锁可能会遇到用户操作的冲突. 获取失败, 导致整个备份失败. 如下.    
```    
SESSION A :     
pgdev@db-172-16-3-150-> date;pg_dump -f ./postgres.dmp -F d -E UTF8 -j 2 -h $PGDATA -p 9300 -U postgres postgres;date    
Mon Mar 25 11:28:46 CST 2013    
SESSION B :     
postgres=# truncate table t7;    
waiting...    
SESSION C :     
postgres=# select pid,query from pg_stat_activity;    
  pid  |                                                                  query                                                  
-------+---------------------------------------------------------------------------------------------------------------------    
---------------------    
 17326 | truncate table t7;    
 18585 | SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '16449' AND NOT attisdropped AND attacl IS NOT     
NULL ORDER BY attnum    
 18588 | COPY public.t8 (id, info, crt_time) TO stdout;    
 18589 | COPY public.t5 (id, info, crt_time) TO stdout;    
 17583 | select pid,query from pg_stat_activity;    
(5 rows)    
```    
并行备份的主pg_dump进程需要获取所有表包括系统表的AccessShareLock(也就是说，备份数据前就已经加锁), 然后fork的pg_dump进程则依次根据备份的需要获取相应对象的AccessShareLock.   
从以下查询可以得知两个pg_dump的子进程获得了t8和t5的AccessShareLock.    
```    
postgres=# select pid,database,relation,locktype,mode,granted,relname from pg_locks t1,pg_class t2 where t1.relation=t2.oid  and pid in (18585,18588,18589,17326) order by pid,relation;    
  pid  | database | relation | locktype |      mode       | granted |                 relname                     
-------+----------+----------+----------+-----------------+---------+-----------------------------------------    
 17326 |    12816 |    16420 | relation | AccessExclusiveLock | f       | t7    
 18585 |    12816 |      112 | relation | AccessShareLock | t       | pg_foreign_data_wrapper_oid_index    
 18585 |    12816 |      113 | relation | AccessShareLock | t       | pg_foreign_server_oid_index    
 18585 |    12816 |      548 | relation | AccessShareLock | t       | pg_foreign_data_wrapper_name_index    
 18585 |    12816 |      549 | relation | AccessShareLock | t       | pg_foreign_server_name_index    
 18585 |    12816 |      826 | relation | AccessShareLock | t       | pg_default_acl    
 18585 |    12816 |      827 | relation | AccessShareLock | t       | pg_default_acl_role_nsp_obj_index    