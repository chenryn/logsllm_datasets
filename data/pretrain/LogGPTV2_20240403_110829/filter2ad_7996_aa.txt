Author: **xd0ol1 (知道创宇404实验室)**
### 0x00 引子
前面一篇[文章](http://paper.seebug.org/179/)我们分析了CVE-2012-1876漏洞的成因，在此基础上我们接着看下漏洞的利用，另外，写的不对之处还望各位多多指正:D
### 0x01 漏洞利用
首先说明一点，我们这里讨论的利用方法如今大都存在防护手段了，比如用户模式下的EMET相对而言就加大了exploit的开发难度，但出于学习目的我们先不考虑这些。同时，和之前一样这里的分析环境也为Win7
x86 - IE 8.0.7601.17514。
#### 0\. Exp
本次分析中用到的[Exp代码](https://www.exploit-db.com/exploits/24017/)如下：
    &nbsp;
    //将字符串转换为整数
    function strtoint(str) {
        return str.charCodeAt(1)*0x10000 + str.charCodeAt(0);
    }
    //初始化布局的字符串变量
    var free = "EEEE";
    while ( free.length 
Exp执行完成后会弹出一个计算器，下面我们对其中利用到的各个技术点展开来讨论。
#### 1\. ROP
ROP（Return-oriented
Programming）是一种区别于代码注入的技术，它利用进程已加载模块中的代码实现所需的操作。其中有个重要的概念叫Gadget，即以ret指令结束的代码小片段，我们知道ret指令等价于pop＋jmp，因此可用来控制程序的执行流程。此技术正是通过控制栈空间的布局，即精心排列好的返回地址和参数，从而将各个Gadget拼接起来，最终实现想要的代码功能。我们来看如下的一个例子：
图0 ROP 的应用示例
栈里面是放置好的返回地址和参数，中间是各个Gadget，最开始会执行一条ret指令，程序弹出返回地址0xb8800000并跳到该地址处执行，此时栈顶指向参数0x00000001，接着第一个Gadget中会将该参数pop到eax寄存器中，执行完后栈顶指向返回地址0xb8801000，而后再次执行ret指令弹出该返回地址并跳过去执行，如此往复就实现了Action中对应的功能。可以看到，虽然每个Gadget只实现了一小部分操作，但拼接起来却是别有洞天，Exp中正是利用的此技巧。
#### 2\. ASLR
要想使用ROP技术，首先需要确定Gadget从哪里来，现今的操作系统一般采用ASLR（Address space layout
randomization）技术对程序各模块、堆栈等线性区布局进行随机化处理，以增加攻击者预测目的地址的难度，从如下示意图可以看到程序每次启动后的进程地址空间分布都是随机的：
图1 ASLR 技术示意图
因此我们需要想办法动态获取模块的基址，这样才能保证准确获取到Gadget，此Exp就是基于动态泄露的mshtml.dll模块基址实现的。通过相关资料我们知道读取mshtml!CButtonLayout对象的vftable值可以计算出mshtml.dll模块的基址，因为该值位于此模块中的固定偏移处，所以可被利用，接下来我们就分析下如何借助CVE-2012-1876这个漏洞来获取mshtml.dll模块的基址。
最开始需要对堆空间进行布局，关键代码如下：
    //初始化布局字符串变量