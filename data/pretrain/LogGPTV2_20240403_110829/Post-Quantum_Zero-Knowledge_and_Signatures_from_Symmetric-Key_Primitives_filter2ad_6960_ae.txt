k ∈ {0, 1}κ with respect to key x ∈ {0, 1}κ. For such an instanti-
ation we assume that we have κ/2 bit security. In Appendix D we
provide further details on this choice. There, to make our results
more general, we also show that a block cipher with k = n = 2s
when viewed as a PRF can be used as an OWF with 2s-bit classical
security, and thus gives us the s-bit post-quantum security that we
desire. Our implementations support multiple LowMC parameter
sets.
Function G. As explained in Section 5, G may be implemented
with a random function with the same domain and range. We im-
plement G(x) as h(0∥x)∥h(1∥x) . . ., where h is SHA-256 and the
output length is |x|.
Hash Function Security. We make the following concrete as-
sumptions for the security of our schemes. We assume that SHA-
256 provides 128 bits of pre-image resistance against quantum
adversaries. For collision resistance, when considering quantum
algorithms, in theory it may be possible to find collisions using a
generic algorithm of Brassard et al. [21] with cost O(2n/3). A de-
tailed analysis of the costs of the algorithm in [21] by Bernstein [16]
found that in practice the quantum algorithm is unlikely to out-
perform the O(2n/2) classical algorithm. Multiple cryptosystems
have since made the assumption that standard hash functions with
n-bit digests provide n/2 bits of collision resistance against quan-
tum attacks (for examples, see papers citing [16]). We make this
assumption as well, and in particular, that SHA-256 provides 128
bits of PQ collision-resistance.
7.2 Circuit for LowMC
For the linear (2,3)-decomposition we view LowMC as circuit over
F2. The circuit consists only of AND and XOR gates. The number
of bits we have to store per view is 3 · r · m, where r is the number
of rounds and m is the number of S-boxes.
Since the affine layer of LowMC only consists of AND and XOR
operations, it benefits from using block sizes such that all computa-
tions of this layer can be performed using SIMD instruction sets
like SSE2, AVX2 and NEON, i.e., 128-bit or 256-bit. Since our im-
plementation uses (arrays of) native words to store the bit vectors,
the implementation benefits from a choice of parameters such that
3 · m is close to the word size. This choice allows us to maximize
the number of parallel S-box evaluations in the bitsliced implemen-
tation.
7.3 Experimental Setup and Results
Our experiments were performed on an Intel Core i7-4790 CPU
(4 cores with 3.60 GHz) and 16 GB RAM running Ubuntu 16.10.
Henceforth, we target the 128 bit post-quantum setting.
Number of Parallel Repetitions. While we already established
that ZKB++ is a suitable Σ-protocol (see the discussion at the end
of Section 3.2), we must set the number of parallel repetitions to
achieve the desired soundness error. For a single repetition we have
a soundness error of 2/3, which means that we need 219 parallel
repetitions for 128-bit security ((3/2)219 ≥ 2128). For 128-bit PQ
security, we must set our repetition count to t (cid:66) 438. This is
double the repetition count required for classical security due to
Grover’s algorithm [52]. To see the effects of the search algorithm,
an adversary at first computes t views such that it can answer two
of the three possible challenges honestly for each view. Considering
the possible permutations of the individual views, the adversary is
thus able to answer 2t out of the 3t challenges. Grover’s algorithm
is then tasked to find a permutation of the views such that they
correspond to one of the 2t challenges. Out of the 2t permutations,
the expected number of solutions is (4/3)t , hence Grover’s algorithm
reduces the time to find a solution to (3/2)t/2. So for the 128-bit PQ
security level, we require t be large enough to satisfy (3/2)t/2 ≥ 2128,
and so t = 438 is the smallest possible repetition count.
Each of the parallel repetitions are largely independent. Thus,
we can split the signature generation/verification among multiple
cores. In Appendix E we discuss the benefits of using multiple cores.
Selection of the Most Suitable LowMC Instances. We now ex-
plore the design space of LowMC. Figure 1 shows that choosing
a concrete LowMC instance allows a trade-off between computa-
tional efficiency and signature size, parameterized by the number
of rounds and by the number of S-boxes.
Figure 1: Measurements for instance selection (128-bit post-
quantum security, average over 100 runs).
Using the notation[blocksize]-[keysize]-[#sboxes]-[#rounds], we
recommend the 256-256-10-38 instance as a good balance between
speed and size.
To support our choice of LowMC, we note that running the
implementation for the SHA-256 circuit from [44] with t = 438
repetitions on the same machine yields roughly 2.7MB proof size,
signing times of 237ms, and verification times of 137ms. Informally
speaking, this can be seen as a baseline instantiation of our scheme
Fish with SHA-256 instead of LowMC and ZKBoo instead of ZKB++
(cf. Table 1 for our results when using LowMC).
7.4 Comparison with Related Work
To compare our schemes to other post-quantum signature can-
didates, we focused on those that have a reference implementa-
tion available and ran the benchmarks on our machine. Table 1
gives an overview of the results, including MQDSS [56], the lattice
11
100150Size [kB]50100150200300400Time [ms]256-256-42-14256-256-1-316256-256-10-38Runtime vs. Signature Size, [n]-[k]-[m]-[r], n=256Sign (Fish)Verify (Fish)based schemes TESLA [7]16, ring-TESLA [3] and BLISS [36], the
hash-based scheme SPHINCS-256 [17], the supersingular isogeny-
based scheme SIDHp751 [87], and also give sizes for the code-based
scheme FS-Véron [86] to complete the picture.17 For our schemes,
we include LowMC instances with 128, 192, and 256 bit block- and
keysize for levels 1, 3, and 5, respectively. For all three levels we
use 10 S-boxes for LowMC. Additionally, for level 5 we also in-
clude the extreme points from the instance selection. Note however,
that the implementations for levels 1 and 5 profit more from our
SIMD-based optimizations then the implementation for level 3.
Sign Verify
[ms]
3.94
|sk|
Gen
Scheme
[ms] [bytes] [bytes] [bytes]
[ms]
16
0.01
1.69
Fish-L1-10-20
24
0.01 51.33 32.01
Fish-L3-10-30
32
0.01 364.11 201.17
Fish-L5-1-316
32
0.01 29.73 17.46
Fish-L5-10-38
32
0.01 13.27
7.45
Fish-L5-42-14
32
Picnic-L5-10-38 0.01 31.31 16.30
32
5.17
MQ 5pass
1056 41000
1088
0.58
SPHINCS-256
7168
0.02
2048
BLISS-I
Ring-TESLA∗
0.03 12288
8192
TESLA-768∗
0.36 3216k 4128k
n/a
FS-Véron
5.0k
SIDHp751
|σ | Model
|pk|
32 37473 ROM
48 73895 ROM
64 108013 ROM
64 118525 ROM
64 152689 ROM
64 195458 QROM
74 40952 ROM
SM
5732 ROM
1568 ROM
2336 (Q)ROM
160 129024 ROM
768 141312 QROM
0.96
7.21
0.82 13.44
0.12
44.16
0.06
16k
0.65
48k
n/a
n/a
16.41
7.3k
32
48
Table 1: Timings and sizes of private keys (sk), public keys
(pk) and signatures (σ) at the post-quantum 128-bit security
level. ∗An errata to [3] says that this parameter set is not
supported by the security analysis (due to a flaw).
Our implementation is a highly parameterizable implementation,
flexible enough to cover the entire design spectrum of our ap-
proaches. In contrast, the implementations of other candidates
used for comparison come with a highly optimized implementation
targeting a specific security level (and often also specific instances).
Thus, our timings are more conservative than the ones of the other
schemes. Yet, while timings and sizes can largely not compete with
efficient lattice-based schemes using ideal lattices, they are com-
parable to all other existing post-quantum candidates. We want
to stress that ideal lattices have not been investigated nearly as
deeply as standard lattices and thus there is less confidence in the
assumptions (cf. [75]) and also the choice of parameters of these
schemes can be seen as quite aggressive.
8 SUMMARY
We have proposed two post-quantum signature schemes, i.e., Fish
and Picnic. On our way, we optimize ZKBoo to obtain ZKB++. For
Fish, we then apply the FS transform ZKBoo, whereas we opti-
mize the Unruh transform and apply it to ZKB++ for Picnic. Fish
is secure in the ROM, while Picnic is secure in the QROM. ZKB++
optimizes ZKBoo by reducing the proof sizes by a factor of two,
at no additional computational cost. While this is of independent
16Due to an erroneous security analysis the scheme has been revised [8]. But since
this happened after we performed our benchmark computations, we present the
performance of the original TESLA scheme.
17Key sizes and signature sizes from BLISS were taken from [36], as they were not
readily available in the implementation. Sizes for FS-Véron are taken from https:
//pqcrypto.eu.org/mini.html.
12
interest as it yields more compact (post-quantum) zero-knowledge
proofs for any circuit, it also decreases our signature sizes. Our
work establishes a new direction to design post-quantum signature
schemes and we believe that this is an interesting direction for
future work, e.g., by the design of new symmetric primitives espe-
cially focusing on optimizing the metrics required by our approach.
Also, as ZKBoo/ZKB++ are still relatively young it is likely that we
will see further improvements in the next few years (for a recent
example see [78]).
Acknowledgments. D. Derler, S. Ramacher, C. Rechberger, and
D. Slamanig have been supported by H2020 project Prismacloud,
grant agreement n◦644962. C. Rechberger has additionally been sup-
ported by EU H2020 project PQCRYPTO, grant agreement n◦645622.
Steven Goldfeder is supported by the NSF Graduate Research Fel-
lowship under grant number DGE 1148900. C. Orlandi has been
supported by COST Action IC1306 and the Danish Council for
Independent Research.
REFERENCES
[1] Abdalla, M., An, J. H., Bellare, M., and Namprempre, C. From identification
to signatures via the fiat-shamir transform: Minimizing assumptions for security
and forward-security. In EUROCRYPT (2002).
[2] Abdalla, M., Fouqe, P., Lyubashevsky, V., and Tibouchi, M. Tightly-secure
signatures from lossy identification schemes. In EUROCRYPT (2012).
[3] Akleylek, S., Bindel, N., Buchmann, J. A., Krämer, J., and Marson, G. A. An
efficient lattice-based signature scheme with provably secure instantiation. In
AFRICACRYPT (2016).
[4] Albrecht, M., Rechberger, C., Schneider, T., Tiessen, T., and Zohner, M.
Ciphers for MPC and FHE. Cryptology ePrint Archive, Report 2016/687, 2016.
[5] Albrecht, M. R., Grassi, L., Rechberger, C., Roy, A., and Tiessen, T. MiMC:
Efficient encryption and cryptographic hashing with minimal multiplicative
complexity. In ASIACRYPT (2016), pp. 191–219.
[6] Albrecht, M. R., Rechberger, C., Schneider, T., Tiessen, T., and Zohner, M.
Ciphers for MPC and FHE. In EUROCRYPT (2015).
[7] Alkim, E., Bindel, N., Buchmann, J., Dagdelen, Ö., and Schwabe, P. Tesla:
Tightly-secure efficient signatures from standard lattices. Cryptology ePrint
Archive, Report 2015/755, 2015.
[8] Alkim, E., Bindel, N., Buchmann, J. A., Dagdelen, Ö., Eaton, E., Gutoski, G.,
Krämer, J., and Pawlega, F. Revisiting TESLA in the quantum random oracle
model. In PQCrypto 2017 (2017), pp. 143–162.
[9] Bai, S., and Galbraith, S. D. An improved compression technique for signatures
based on learning with errors. In CT-RSA (2014).
[10] Bansarkhani, R. E., and Buchmann, J. A. Improvement and efficient imple-
mentation of a lattice-based signature scheme. In SAC (2013).
[11] Barreto, P. S. L. M., Longa, P., Naehrig, M., Ricardini, J. E., and Zanon, G.
Sharper ring-lwe signatures. IACR Cryptology ePrint Archive 2016 (2016), 1026.
[12] Bellare, M., Poettering, B., and Stebila, D. From identification to signatures,
tightly: A framework and generic transforms. In ASIACRYPT (2016).
[13] Bellare, M., and Rogaway, P. Random oracles are practical: A paradigm for
designing efficient protocols. In ACM CCS (1993).
[14] Ben-Sasson, E., Chiesa, A., Garman, C., Green, M., Miers, I., Tromer, E., and
Virza, M. Zerocash: Decentralized anonymous payments from bitcoin. In IEEE
SP (2014).
[15] Ben-Sasson, E., Chiesa, A., Genkin, D., Tromer, E., and Virza, M. Snarks for
C: verifying program executions succinctly and in zero knowledge. In CRYPTO
(2013).
[16] Bernstein, D. J. Cost analysis of hash collisions: Will quantum computers make
SHARCS obsolete? http://cr.yp.to/hash/collisioncost-20090823.pdf.
[17] Bernstein, D. J., Hopwood, D., Hülsing, A., Lange, T., Niederhagen, R., Pa-
pachristodoulou, L., Schneider, M., Schwabe, P., and Wilcox-O’Hearn, Z.
SPHINCS: practical stateless hash-based signatures. In EUROCRYPT (2015).
[18] Boneh, D., Dagdelen, Ö., Fischlin, M., Lehmann, A., Schaffner, C., and
Zhandry, M. Random oracles in a quantum world. In ASIACRYPT (2011).
[19] Borghoff, J., Canteaut, A., Güneysu, T., Kavun, E. B., Knezevic, M., Knudsen,
L. R., Leander, G., Nikov, V., Paar, C., Rechberger, C., Rombouts, P., Thomsen,
S. S., and Yalçin, T. PRINCE - a low-latency block cipher for pervasive computing
applications - extended abstract. In ASIACRYPT (2012).
[20] Boyar, J., Matthews, P., and Peralta, R. Logic minimization techniques with
applications to cryptology. Journal of Cryptology 26, 2 (2013), 280–312.
[21] Brassard, G., Høyer, P., and Tapp, A. Quantum cryptanalysis of hash and
claw-free functions. In LATIN 1998 (Apr. 1998), C. L. Lucchesi and A. V. Moura,
Eds., vol. 1380 of LNCS, Springer, Heidelberg, pp. 163–169.
[22] Buchmann, J. A., Dahmen, E., and Hülsing, A. XMSS - A practical forward
secure signature scheme based on minimal security assumptions. In PQCrypto
(2011).
[23] Campanelli, M., Gennaro, R., Goldfeder, S., and Nizzardo, L. Zero-
knowledge contingent payments revisited: Attacks and payments for services.
In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communi-
cations Security (2017), ACM.
[24] Canteaut, A., Carpov, S., Fontaine, C., Lepoint, T., Naya-Plasencia, M.,
Paillier, P., and Sirdey, R. Stream ciphers: A practical solution for efficient
homomorphic-ciphertext compression. In FSE (2016).
[25] Carlet, C., Goubin, L., Prouff, E., Quisqater, M., and Rivain, M. Higher-
order masking schemes for s-boxes. In FSE (2012).
[26] Costello, C., Fournet, C., Howell, J., Kohlweiss, M., Kreuter, B., Naehrig,
M., Parno, B., and Zahur, S. Geppetto: Versatile verifiable computation. In
IEEE SP (2015).
[27] Courtois, N., Finiasz, M., and Sendrier, N. How to achieve a mceliece-based
digital signature scheme. In ASIACRYPT (2001).
[28] Cramer, R., Damgård, I., and Schoenmakers, B. Proofs of partial knowledge
and simplified design of witness hiding protocols. In CRYPTO (1994).
[29] Daemen, J., Peeters, M., Van Assche, G., and Rijmen, V. Nessie proposal:
Noekeon. In First Open NESSIE Workshop (2000).
[30] Dagdelen, Ö., Bansarkhani, R. E., Göpfert, F., Güneysu, T., Oder, T., Pöp-
pelmann, T., Sánchez, A. H., and Schwabe, P. High-speed signatures from
standard lattices. In LATINCRYPT (2014).
[31] Dagdelen, Ö., Fischlin, M., and Gagliardoni, T. The fiat-shamir transforma-
tion in a quantum world. In ASIACRYPT (2013).
[32] Dagdelen, Ö., Galindo, D., Véron, P., Alaoui, S. M. E. Y., and Cayrel, P.
Extended security arguments for signature schemes. Des. Codes Cryptography
78, 2 (2016), 441–461.
[33] De Cannière, C., and Preneel, B. Trivium. In New Stream Cipher Designs - The
eSTREAM Finalists. 2008.
[34] Derler, D., Orlandi, C., Ramacher, S., Rechberger, C., and Slamanig, D.
Digital signatures from symmetric-key primitives. Cryptology ePrint Archive,
Report 2016/1085, 2016. http://eprint.iacr.org/2016/1085.
[35] Ducas, L. Accelerating bliss: the geometry of ternary polynomials.