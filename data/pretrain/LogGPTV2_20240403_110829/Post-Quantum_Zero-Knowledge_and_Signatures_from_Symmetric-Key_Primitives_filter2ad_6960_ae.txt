### Key and Security Parameters

Let \( k \in \{0, 1\}^\kappa \) with respect to key \( x \in \{0, 1\}^\kappa \). For this instantiation, we assume that we have \(\kappa/2\) bits of security. Further details on this choice are provided in Appendix D. To generalize our results, we also show that a block cipher with \( k = n = 2^s \), when viewed as a Pseudorandom Function (PRF), can be used as a One-Way Function (OWF) with \( 2^s \)-bit classical security, thus providing \( s \)-bit post-quantum security. Our implementations support multiple LowMC parameter sets.

### Function G

As explained in Section 5, function \( G \) may be implemented using a random function with the same domain and range. We implement \( G(x) \) as \( h(0 \| x) \| h(1 \| x) \| \ldots \), where \( h \) is SHA-256, and the output length is \( |x| \).

### Hash Function Security

We make the following concrete assumptions for the security of our schemes:
- **Pre-image Resistance**: We assume that SHA-256 provides 128 bits of pre-image resistance against quantum adversaries.
- **Collision Resistance**: When considering quantum algorithms, a generic algorithm by Brassard et al. [21] can find collisions with a cost of \( O(2^{n/3}) \). However, a detailed analysis by Bernstein [16] found that, in practice, the quantum algorithm is unlikely to outperform the classical \( O(2^{n/2}) \) algorithm. Therefore, we assume that standard hash functions with \( n \)-bit digests provide \( n/2 \) bits of collision resistance against quantum attacks. Specifically, we assume that SHA-256 provides 128 bits of post-quantum (PQ) collision resistance.

### Circuit for LowMC

For the linear (2,3)-decomposition, we view LowMC as a circuit over \( \mathbb{F}_2 \) consisting only of AND and XOR gates. The number of bits we need to store per view is \( 3 \cdot r \cdot m \), where \( r \) is the number of rounds and \( m \) is the number of S-boxes.

Since the affine layer of LowMC only consists of AND and XOR operations, it benefits from using block sizes such that all computations can be performed using SIMD instruction sets like SSE2, AVX2, and NEON (i.e., 128-bit or 256-bit). Our implementation uses arrays of native words to store the bit vectors, so it benefits from choosing parameters such that \( 3 \cdot m \) is close to the word size. This maximizes the number of parallel S-box evaluations in the bitsliced implementation.

### Experimental Setup and Results

Our experiments were conducted on an Intel Core i7-4790 CPU (4 cores at 3.60 GHz) with 16 GB RAM running Ubuntu 16.10. We target the 128-bit post-quantum setting.

#### Number of Parallel Repetitions

While we established that ZKB++ is a suitable \(\Sigma\)-protocol (see the discussion at the end of Section 3.2), we must set the number of parallel repetitions to achieve the desired soundness error. For a single repetition, the soundness error is \( 2/3 \), which means we need \( 2^{19} \) parallel repetitions for 128-bit security (\( (3/2)^{2^{19}} \geq 2^{128} \)). For 128-bit PQ security, we set the repetition count to \( t \approx 438 \). This is double the repetition count required for classical security due to Grover's algorithm [52].

To see the effects of the search algorithm, an adversary first computes \( t \) views such that it can answer two of the three possible challenges honestly for each view. Considering the permutations of the individual views, the adversary can answer \( 2t \) out of the \( 3t \) challenges. Grover's algorithm then finds a permutation of the views such that they correspond to one of the \( 2t \) challenges. Out of the \( 2t \) permutations, the expected number of solutions is \( (4/3)^t \), so Grover's algorithm reduces the time to find a solution to \( (3/2)^{t/2} \). For 128-bit PQ security, \( t \) must satisfy \( (3/2)^{t/2} \geq 2^{128} \), and \( t = 438 \) is the smallest possible repetition count.

Each parallel repetition is largely independent, allowing us to split the signature generation/verification among multiple cores. In Appendix E, we discuss the benefits of using multiple cores.

#### Selection of the Most Suitable LowMC Instances

We explore the design space of LowMC. Figure 1 shows that choosing a specific LowMC instance allows a trade-off between computational efficiency and signature size, parameterized by the number of rounds and S-boxes.

**Figure 1: Measurements for instance selection (128-bit post-quantum security, average over 100 runs).**

Using the notation \([blocksize]-[keysize]-[#sboxes]-[#rounds]\), we recommend the 256-256-10-38 instance as a good balance between speed and size.

To support our choice of LowMC, we note that running the implementation for the SHA-256 circuit from [44] with \( t = 438 \) repetitions on the same machine yields roughly 2.7 MB proof size, signing times of 237 ms, and verification times of 137 ms. Informally, this can be seen as a baseline instantiation of our scheme Fish with SHA-256 instead of LowMC and ZKBoo instead of ZKB++ (cf. Table 1 for our results when using LowMC).

### Comparison with Related Work

To compare our schemes with other post-quantum signature candidates, we focused on those with a reference implementation available and ran the benchmarks on our machine. Table 1 provides an overview of the results, including MQDSS [56], lattice-based schemes TESLA [7], ring-TESLA [3], and BLISS [36], the hash-based scheme SPHINCS-256 [17], the supersingular isogeny-based scheme SIDHp751 [87], and the code-based scheme FS-Véron [86].

**Table 1: Timings and sizes of private keys (sk), public keys (pk), and signatures (σ) at the post-quantum 128-bit security level.**

| Scheme | Sign [ms] | Verify [ms] | |sk| [bytes] | |pk| [bytes] | |σ| [bytes] |
| --- | --- | --- | --- | --- | --- |
| Fish-L1-10-20 | 3.94 | 16 | 51.33 | 32.01 | 0.01 |
| Fish-L3-10-30 | 32 | 16 | 364.11 | 201.17 | 0.01 |
| Fish-L5-1-316 | 32 | 16 | 29.73 | 17.46 | 0.01 |
| Fish-L5-10-38 | 32 | 16 | 13.27 | 7.45 | 0.01 |
| Fish-L5-42-14 | 32 | 16 | 31.31 | 16.30 | 0.01 |
| Picnic-L5-10-38 | 32 | 16 | 31.31 | 16.30 | 0.01 |
| MQ 5pass | 1056 | 41000 | 1088 | 0.58 | 0.02 |
| SPHINCS-256 | 7168 | 0.02 | 2048 | 0.03 | 12288 |
| Ring-TESLA* | 12288 | 8192 | 0.36 | 3216k | 4128k |
| TESLA-768* | 3216k | 4128k | n/a | n/a | n/a |
| FS-Véron | 5.0k | 7.3k | 16.41 | 7.3k | 32 |
| SIDHp751 | 160 | 129024 | 768 | 141312 | 0.96 |

*An errata to [3] states that this parameter set is not supported by the security analysis (due to a flaw).

Our implementation is highly parameterizable and flexible enough to cover the entire design spectrum of our approaches. In contrast, the implementations of other candidates are highly optimized for a specific security level and often specific instances. Thus, our timings are more conservative than those of other schemes. While our timings and sizes cannot compete with efficient lattice-based schemes using ideal lattices, they are comparable to all other existing post-quantum candidates. We emphasize that ideal lattices have not been investigated as deeply as standard lattices, and there is less confidence in the assumptions (cf. [75]). The choice of parameters for these schemes can be seen as quite aggressive.

### Summary

We propose two post-quantum signature schemes, Fish and Picnic. We optimize ZKBoo to obtain ZKB++. For Fish, we apply the Fiat-Shamir transform to ZKBoo, while for Picnic, we optimize the Unruh transform and apply it to ZKB++. Fish is secure in the Random Oracle Model (ROM), while Picnic is secure in the Quantum Random Oracle Model (QROM). ZKB++ optimizes ZKBoo by reducing proof sizes by a factor of two without additional computational cost. This is of independent interest as it yields more compact (post-quantum) zero-knowledge proofs for any circuit and decreases our signature sizes. Our work establishes a new direction for designing post-quantum signature schemes, and we believe this is an interesting direction for future work, such as the design of new symmetric primitives focusing on optimizing the metrics required by our approach.

### Acknowledgments

D. Derler, S. Ramacher, C. Rechberger, and D. Slamanig have been supported by H2020 project Prismacloud, grant agreement no. 644962. C. Rechberger has additionally been supported by EU H2020 project PQCRYPTO, grant agreement no. 645622. Steven Goldfeder is supported by the NSF Graduate Research Fellowship under grant number DGE 1148900. C. Orlandi has been supported by COST Action IC1306 and the Danish Council for Independent Research.

### References

[References listed as in the original text]