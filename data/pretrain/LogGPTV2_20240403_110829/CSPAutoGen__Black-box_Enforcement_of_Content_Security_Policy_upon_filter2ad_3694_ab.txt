so they could be imported as external scripts (step 3). Then, the
applier engine fetches templates and host whitelist of the domain
for page rewriting (step 4). Next, the engine rewrites the webpage
to import those trusted inline scripts as external scripts, include this
domain’s templates and a client-side library to be used in the run-
(4)  inline & dynamic scripts(6). host whitelist(4). script tagsrc attributes(5). renderingurlTrainingManagerRendering TaskGeneratorHeadlessBrowser ClusterBrowserInstanceBrowserInstanceLink Spider /Test CasesTemplate GeneratorHostWhitelistGeneratorTemplate &Host Whitelist DB1. gAST    Template2. Symbolic     Template3. Host     Whitelistexample.comTemplateVisual Template Portal(7). template update cmdrenderingtaskrenderingurlCore of CSPAutoGen(2)(1) urllist(3)(6). templatesCSPAutoGenApplier EngineTemplate &Host Whitelist DBRewrite Webpage1. Import external JS.  a. benign inline JS.  b. client-side JS library.    c. gAST templates.  d. symbolic templates.2. Add CSP header.  a. trusted CSPAutoGen       sub-domain.  b. domain’s host whitelist.(5) Rewritewebpage.(1) Receive originalwebpage.(4) Fetch templates and host whitelist of the domain.CSPAutoGenJS Server(7) Re-import benign runtime-included inline scripts.(9) Instantiate symbolic template.Forwardrewritten webpage.(6) Extract and send inline scripts.(2) (3,8) Match scripts against templates and store benign ones.ClientServer(CNN.autoPlayVideoExist === true) ? true:false;
thumb: ’none’,
video: ’politics/...zard-sott-origwx.cnn’,
...
1 CNN.autoPlayVideoExist =
2
3 var configObj = {
4
5
6
7 },autoStartVideo = false,callbackObj,
8 currentVideoCollection = [{
9
10
11
12 }, ... ];
13 configObj.autostart = autoStartVideo;
14 ...
15 if (carousel
16
"videoCMSUrl": "/nicola...wx.cnn/index.xml",
"videoId": "politics/.../ott-origwx.cnn",
"videoUrl": "/videos/...uk-election-2015/"
&& currentVideoCollectionContainsId(videoId)){...}
Code 2: A snippet of scripts from one of CNN’s news webpages (some
codes are omitted because of page limits). Values of variables conﬁgObj
and currentVideoCollection depend on the topic of current webpage so
this script is unique and cannot be found in other webpages. However,
if we generalize this script by replacing these two variable values with
“CSP_Object” and “CSP_Array”, the generalized scripts exist in most of
CNN’s news pages.
4. DESIGN
In this section, we will discuss the design of CSPAutoGen. In-
stead of introducing CSPAutoGen in three phases, we will present
how CSPAutoGen process different categories of scripts—such as
inline, dynamic, and runtime-included—because these scripts are
the portals of attackers to launch XSS attacks. Now, let us ﬁrst
deﬁne these script modiﬁers:
• Inline vs. External. The modiﬁer inline refers to scripts that
are embedded directly as part of HTML, as opposed to external
scripts that are imported by the src attribute of a script tag.
• Dynamic vs. Static. The modiﬁer dynamic refers to scripts that
are generated during client-side execution through an eval or
eval-like function, as opposed to static scripts that are provided
by the server directly.
• Runtime-included vs. Pre-included. We use the modiﬁer runtime-
included to refer to the scripts that are included during client-side
execution, such as invoking createElement function to cre-
ate a script tag, as opposed to pre-included that are in the
HTML before rendering.
Some of the modiﬁers can be used together to describe scripts.
For example, runtime-included inline scripts mean that scripts in
a script tag are inline, and generated through JavaScript opera-
tions. In this paper, CSPAutoGen needs to process four categories:
pre-included inline scripts, runtime-included inline scripts, external
scripts, and dynamic scripts.
In the rest of this section, we ﬁrst discuss the template mech-
anism, gAST and its type system, in Section 4.1. Then, in Sec-
tion 4.2, we present how to apply templates upon each category of
scripts, generate corresponding CSPs, and enforce generated CSPs.
Last, we will brieﬂy discuss CSPAutoGen’s important subsidiary
components in Section 4.3.
4.1 Templates Mechanism
Templates are the foundation of CSPAutoGen of processing all
categories of scripts and generating CSPs. They are created by
the template generator (Figure 1) in the training phase, stored in
the template database, and used to match with inline scripts (by
CSPAutoGen applier engine in Figure 2) in the rewriting phase and
dynamic/runtime-included scripts in the runtime phase. In this sub-
section, we ﬁrst discuss the principals of designing templates, and
then present how our templates—gAST and its type system—work.
Design Principles. When designing templates for CSPAutoGen,
we have the following three principles:
• High benign script matching rate. The templates should match
benign scripts not present in the training phase. Because many
scripts carry runtime information, exact string matching, such as
comparing hash values, will not satisfy this principle. For exam-
ple, Code 2, a snippet of scripts from CNN, shows that the values
of configObj and currentVideoCollection are gen-
erated by the server based on the webpage topic. Our templates
should be general enough to match these unseen scripts.
• Prevention of injected scripts. The templates should not match
injected, malicious scripts. There is a tradeoff between the ﬁrst
and this principle: the templates should be general to match un-
seen website scripts, but not too general to match injected scripts.
• High performance. Because CSPAutoGen needs to enforce CSP
in real-time, the templates should be matched with scripts as fast
as possible. That is, string-similarity algorithms with high time
complexity, such as Levenshtein algorithm, are not suitable here.
Template Overview. Guided by these principles, we propose a
novel template based on Abstract Syntax Tree (AST) and a type
system. First, as observed in real-world websites, most scripts share
exactly the same logic structure but different data values (such as
Code 2). Therefore, we propose a generalization of AST, called
generalized AST (gAST), to group together such scripts. Compared
with AST, the data nodes of gAST are generalized to their type
information (e.g., array and string) with no actual values so that
they can cover unseen scripts in the training phase.
Second, to prevent script injection, we propose a conservative
type inference system, which limits the number of possibly matched
data. For example, if a data node only contains a single value in the
training phase, CSPAutoGen will assign a CONST type to the node;
similarly, if the node contains a limited number of values, CSPAu-
toGen will assign an ENUM type to the node. Such conservative
inference greatly restricts the ability of an attacker to bypass the
templates and inject their own scripts.
Third, the proposed template matching has O(n) time complex-
ity against an incoming script where n is the size of the AST of
the script. The overall matching has three steps: generating gAST
for the script, matching the generated gAST with templates, and
matching the type information in the script against the one in tem-
plates. Our evaluation results in Section 6.5 also conﬁrm the efﬁ-
ciency of the matching mechanism.
In the rest of this subsection, we will ﬁrst show how to build
gAST together with the conservative type information, and then
discuss how to match scripts against gAST.
Building gAST. The building of gAST is as follows. CSPAutoGen
ﬁrst generates the script’s standard AST and then traverses the AST
to generate gAST. Each gAST node has two attributes: tag used for
tree comparing, and value used for type inference and comparison.
Algorithm 1 illustrates how to recursively build gAST from AST.
For complex data node, the gAST node’s value attribute is set
to the corresponding AST node’s so called non-nested object value
(Line 18), a generalized data structure used for type inference and
comparison. Code 3 illustrates an example of converting an array
to a non-nested object. Each array or object is converted to a non-
nested format composed of a set of key-value pairs, where each key
obeys the key assignment rule and each value is a list of atomic data
values or gAST. The conversion algorithm recursively processes
data values from innermost arrays or objects: atomic value is as-
signed a key directly, while expression is converted to gAST and
then assigned a key. Here is the key assignment rule:
For array elements, all boolean or number values are assigned
with a key as “CSP_boolean” or “CSP_number” respectively; strings
are assigned with key of “CSP_string_level”, where “level” refers
to the item’s nested level. For object, if a value has multiple keys
gnode.tag = getN odeClassN ame(node)(e.g., Assign)
gnode.value = null
break
gnode.tag = getN odeV alue(node)(e.g., CN N, conf igObj)
gnode.value = null
return gnode
case AtomicDataN ode(e.g., N umber, String):
case Identif ierN ode(i.e., Identif ier):
case StructureN ode(e.g., DoW hile, If ):
case OperatorN ode(e.g., Assign, BinOp):
Algorithm 1 The Algorithm of Building gAST
Input: AST Node: node
gASTNode buildGAST(node):
1: gnode = createGAST N ode()
2: switch (getN odeClassT ype(node))
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20: end switch
21: for child in node.children do
22:
23: end for
24: return gnode
gnode.appendChild(buildGAST (child))
gnode.tag = getN odeClassN ame(node)(e.g., String)
gnode.value = getN odeV alue(node)(e.g., “...gwx.cnn(cid:48)(cid:48))
return gnode
case ComplexDataN ode(i.e., Array, Object):
gnode.tag = getN odeClassN ame(node)(e.g., Array)
gnode.value = getN onN estedObject(node)
return gnode
1 var org_array =
2 [’str1’, [4,’str2’], {k1:’str3’, k2:{k3:’str4’}},
3 {k1:’str5’}, 2, 3, fun()+1];
4 //org_array’s non_nested_obj
5 var non_nested_obj =
6 {CSP_expression:[gAST], CSP_string_lev1:[’str1’],
7
8
CSP_string_lev2:[’str2’], CSP_number:[2,3,4],
k1:[’str3’,’str5’], k3:[’str4’] };
Code 3: An example of converting an array variable org_array to non-
nested object variable non_nested_obj.
(nested array/object), keep the closet one that are not generated by
CSPAutoGen (i.e., starting with “CSP_”); otherwise, keep its orig-
inal key. All expressions in array and object will be assigned with
key of CSP_expression.
Type System. As mentioned, CSPAutoGen infers the type infor-
mation of each data node (i.e., array, boolean, number, object and
string type) in gAST. In particular, all scripts with the same gAST
are grouped together and corresponding nodes’ values are put to-
gether as training samples. Based on these samples, CSPAutoGen
infers type information for each generalized data node. For an
atomic data node (i.e., boolean, number and string), each node is
assigned a single type; for a complex data node (i.e., array and
object), each key-value pair of the non-nested object has an inde-
pendent type.
To accurately and conservatively infer type information, CSPAu-
toGen requires that the number of samples for each inferred type
is larger than a threshold (10 by default in our implementation).
If this condition does not meet, CSPAutoGen will send URLs of
the webpages containing relevant scripts to the rendering task gen-
erator (Figure 1), which then starts rendering tasks with various
client-side conﬁgurations to obtain more samples.
In our type system, we deﬁne the following six types:
• CONST. If all the samples are with the same value, CSPAutoGen
infers a CONST type. When matched with a CONST type, the
target value should be exactly the same as the const value.
• ENUM. If the sample set size is larger than a threshold (120
by default), and the number of different values is signiﬁcantly
smaller (5 or less than 5 by default), CSPAutoGen infers an ENUM
type. When matched with an ENUM type, the target value should
be an element of the type’s value set.
• NUMBER. If all the samples can be parsed as numbers, CSPAu-
toGen infers a NUMBER type. When matched with a NUMBER
type, the target value should be a number.
• URL. If all the samples can be parsed as URLs, CSPAutoGen
infers a URL type, which contains a subtype—domain name—
with a set of domains appearing in the samples. When matched
with a URL type, the target value should be parsed as a URL
and the domain in the URL should match the domain name as
an ENUM type. Note that a URL’s parameters might contain an-
other URL for redirection and that URL also needs to be checked.
• GAST. The value of an array or object can be an expression.
In the step of converting array and object to non-nested objects,
expressions are extracted and put under key of CSP_expression.
CSPAutoGen infers a GAST type when the key in a non-nested
object is CSP_expression. When matched with a GAST type, the
target value should be an expression and the gAST of the target
value will be matched with the gASTs stored in the type.
• REGEXP. If CSPAutoGen cannot infer any of the aforementioned
ﬁve types, CSPAutoGen will infer a REGEXP type based on dif-
ferent attributes. At the same time, CSPAutoGen also allows
specifying a regular expression manually. Towards this end, we
have identiﬁed eight possible attributes of generating a regular
expression: (1) length (min and max), (2) character (is_alphabetic,
is_numeric or special character set), and (3) common strings (a
preﬁx, an appendix, or a domain name in the middle).
Note that GAST is a complex type whose restrictiveness de-
pends on the rest ﬁve basic types. Among these ﬁve basic types,
except the REGEXP type, all the rest four types are so conservative
that the number of possible matched data in real time is very small
and most of the matched data is seen in the training phase. Only
the REGEXP type is potentially dangerous if it contains charac-
ters other than letter or number because an attacker may have more
ﬂexibility to inject suspicious contents. However, though theoret-
ically possible, we believe that such attack venue is impractical,
because it requires the collaboration of website developers to im-
plement a functionality wanted by the attacker. Moreover, because
the number of such ﬂexible types is small, one could utilize our
visual template portal to manually review regular expressions gen-
erated by CSPAutoGen to ensure security. A detailed evaluation of
the amount of manual work could be found in Section 6.4.
Template Matching. There are two steps in matching an incoming
script (i.e., the target script) with the templates of its domain: gAST
matching and type matching. First, CSPAutoGen ﬁrst generates tar-
get script’s gAST and then compares the gAST with the ones in the
templates. When comparing two gASTs, CSPAutoGen only com-
pares each node’s tag attribute because tag is used to describe the
script’s structure. To further speed up the matching, CSPAutoGen
pre-stores a string consisted of a sequence of tags—which are the
traversing results of each gAST in the templates—and the string’s
hash value (called gAST hash). When matching the target script,
CSPAutoGen only compares the gAST hash of the target script and
the ones of the templates.
Second, if the gAST matching succeeds, CSPAutoGen extracts
the template’s type set and compares all the data nodes of the target
script with their corresponding types in the templates. For each
data node, the matching rule depends on the data node type:
• Atomic data node. Directly match the value extracted from target
script against the corresponding type associated with the node.
• Complex data node. To match a complex data node, CSPAuto-
Gen ﬁrst converts the value of the target script, either an array or
an object, to a non-nested object, and then compares it against
the corresponding object in the templates. Speciﬁcally, for each
key-value pair in the target non-nested object, CSPAutoGen ﬁrst
checks whether all the keys can be found in templates. If not, the
matching fails; otherwise, for each value in the target non-nested
object, CSPAutoGen compares it against the corresponding type
speciﬁed in templates. CSPAutoGen will determine the complex
node a match only when all the value match.
In sum, a script matches templates only when (1) the gAST
matches, and (2) the types of all the data nodes match.
4.2 Processing Scripts based on Templates
In this section, we will discuss in details how CSPAutoGen pro-
cesses four categories of scripts, i.e., pre-included inline scripts,
runtime-included inline scripts, external scripts (both pre- and runtime-
included) and dynamic scripts, to ensure only these matching tem-
plates can be executed. CSPAutoGen stores pre- and runtime-included
inline scripts at its JavaScript server (Figure 2) and speciﬁes the
server in CSP’s script-src directive. For inline scripts from
different domains, the sever provides corresponding globally unique
subdomains, i.e., hashValue.cspautogen.com, where hashV alue is
the hash value of the domain that inline scripts come from. We refer
to this trusted subdomain as the domain’s CSP trusted host.
Pre-included Inline Scripts. Pre-included inline scripts—which
are processed during rewriting phase—can be further divided into
three sub-categories:
• These embedded in script nodes (e.g., ).
CSPAutoGen extracts scripts and sends them to CSPAutoGen
JavaScript server, where the scripts are matched against tem-
plates. If match, the scripts are stored at the server with a unique
URL from the domain’s CSP trusted host. Then, CSPAu-