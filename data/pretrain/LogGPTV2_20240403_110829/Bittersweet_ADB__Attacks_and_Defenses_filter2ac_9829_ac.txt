function, our tool also tracks value ﬂows from the results of the
read function to the parameters of the write function via taint
analysis. Because private user data received from the ADB server
via read may be leaked through write, we perform a taint analysis
with the read calls as sources and the write calls as sinks. Simi-
larly for the string analysis, we extend the traditional taint analysis
to track data ﬂows between asynchronous multiple threads. Unlike
static analysis which requires precise string values that particular
variables may have, taint analysis simply tracks value ﬂows be-
tween sources and sinks. Thus, the taint analysis performs only a
ﬂow-insensitive analysis which provides sound analysis results. If
we want to improve the taint analysis results, we can apply the same
approach as the string analysis and use two kinds of taint analyses.
Evaluation.
Because we proposed new attacks in this paper, we evaluated
the efﬁciency of our static analyzer using all 7 applications that
leak string values to the write function, and we evaluated the
taint analysis using 2 malicious applications described in Section 3
that leak information to outside of devices. For the former, we
tested such cases where string values ﬂow intra-procedurally, inter-
procedurally, via ﬁelds of classes, and via static ﬁelds of classes.
For the latter, we tested malicious applications for application mod-
iﬁcation, SIM information leakage, and message tracking. Our static
analyzer correctly detected command strings that are sent to the
ADB server. The analyzer could detect data ﬂows from the ADB
server to the outside from the malicious applications.
4.2 Defenses with Changes to Android
We propose mitigation methods that require changes to Android.
Informative Message for Using ADB.
Starting from Android 4.2.2, the Android system protects ADB
by asking a user’s conﬁrmation to use the USB debugging capa-
bility. When trying to enable USB debugging, the Android system
show a dialog including a RSA key to a user to approve USB de-
bugging. However, RSA keys may not be useful information to
ordinary users who are not familiar with security vulnerabilities.
To help ordinary users understand possible security issues result-
ing from allowing USB debugging, more informative message than
RSA keys should be provided.
Automatic Disable of USB Debugging.
While still allowing the ADB capabilities to ordinary applica-
tions, the Android system may turn them off automatically. Even
though USB debugging is disabled by default, once it is enabled, it
remains to be enabled even after the system reboots. Instead, dis-
abling USB debugging by the system periodically is much more
secure. The BlackBerry system indeed turns off the USB debug-
ging option after a certain amount of time [3].
Restricted ADB Functionalities.
Because ADB capabilities are vulnerable to many attacks as we
showed in the previous section, restricting ADB functionalities may
be a plausible option. One way to restrict their uses is to prohibit
combined uses of multiple ADB commands. While this restriction
does not preclude all the attacks we described in this paper, it can
rule out many attacks like contact collection using screenrecord
with input and overbilling using am with input. More rigid ap-
proach is to disallow ADB capabilities from production applica-
tions. This restriction goes back to the original intention of ADB,
which is only for debugging purposes. We have compared the de-
bugging utilities of the Android system and Ubuntu 12.04.01, and
we found that Android provides more debugging utilities by de-
fault than Ubuntu. Restricting ADB capabilities in production ap-
plications will surely limit the application functionalities but it will
guide them more securely.
Secured ADB Channels.
Even though the Android system displays a dialog with an RSA
key for allowing USB debugging, the system does not authenti-
cate the server and the client. Once the ADB server is running, any
applications can connect to the server via a TCP connection. We
propose several approaches to guide the communication with the
ADB server securely. The most straightforward approach is to add
an authentication mechanism to the ADB server. For example, the
ADB server may allow connections only from the shell by checking
clients whether their UID are 2000. Another possible solution is to
create a new ADB permission and to modify the system so that only
the applications with the ADB permission can communicate with
the ADB server. Also, if the ADB permission is protected with the
level of the signature permission, ordinary applications including
malicious ones cannot leverage the ADB server any more.
5. RELATED WORK
Recently, various attacks in Android applications have been re-
ported. These attacks leverage vulnerabilities in intents [4], dy-
namic code loading [23], content providers [30], permission esca-
lation [6], and advertisement libraries [22]. In this paper, we re-
ported a variety of attacks that leverage one of the Android system
component, ADB. Because ADB is originally for debugging pur-
poses, the Android system assigns higher privileges to ADB than to
third-party Android applications. Thus, we could present powerful
attacks of various kinds by leveraging ADB and its utility functions
only with the INTERNET permission.
Even though protecting system components is critical due to their
high privileges, only a few work have focused on the Android ker-
nel layer security. Zhou et al. [29] pointed out that vulnerable An-
droid device drivers can leak users’ private data. Moreover, Jana
and Shmatikov [15] demonstrated that examining shared memory
can leak private information. Similarly, investigating public infor-
mation can lead to private data leakage [28]. Compare to these
work, our research focused on understanding security risks of ADB
and the Android system utilities. The most closest work to ours is
Lin et al.’s work [18], which studied security risks of the screen-
shot function using ADB. While Lin et al. focused on the screen-
shot function to build a malware using ADB, we presented how
powerful ADB capabilities are and showed their security risks by
presenting various kinds of attacks. Given that a malware leverag-
ing ADB to launch attacks has appeared [19], we believe our study
on ADB capabilities would be useful to understand their security
vulnerabilities.
5836. CONCLUSION
In this paper, we demonstrated that by leveraging ADB capabil-
ities, malicious applications can leak private data, monitor device
usages, and even interfere with device behavior. For private data
leakage, we showed that malicious applications can track messages
exchanges, call history, and geographic locations, record screen
snapshots, access private database of other applications, and leak
SIM information. To demonstrate usage monitoring attacks, we pre-
sented packet dump and keystroke logging attacks. Finally, we showed
that malware can disturb users by overbilling and modiﬁcation of
applications, and they can even prohibit users from using their de-
vices by DoS attacks and locking device screens. To our surprise,
all these attacks are possible only with the INTERNET permission.
To protect Android users from such attacks, we presented mul-
tiple mitigation mechanisms. We developed a static analysis tool
that detects potential malware leveraging the ADB server. Instead
of simply displaying a dialog with an RSA key to protect the ADB
server as the current Android system does, a more informative mes-
sage would be helpful for ordinary users to be aware of security
vulnerabilities. We strongly believe that ADB capabilities should
be restricted or they should use secure channels; if possible, ADB
should be used only for debugging purposes.
Acknowledgment
This work is supported in part by Korea Ministry of Education, Science
and Technology(MEST) / National Research Foundation of Korea(NRF)
(Grants NRF-2014R1A2A2A01003235 and NRF-2008-0062609).
7. REFERENCES
[1] Android logging system.
http://elinux.org/Android_Logging_System, 2012.
[2] AppTornado GmbH. AppBrain: Number of Android applications.
http://www.appbrain.com/stats/number-of-
android-apps, 2014.
[3] BlackBerry. Blackberry developer.
http://developer.blackberry.com.
[4] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing
inter-application communication in Android. In Proceedings of the
9th International Conference on Mobile Systems, Applications, and
Services, 2011.
[5] ClockworkMod. ClockworkMod tether (no root).
https://play.google.com/store/apps/details?id=
com.koushikdutta.tether, 2013.
[6] L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy. Privilege
escalation attacks on Android. In Proceedings of the 13th
International Conference on Information Security, 2010.
[7] A. P. Fuchs, A. Chaudhuri, and J. S. Foster. Scandroid: Automated
security certiﬁcation of Android applications. Technical Report
CS-TR-4991, University of Maryland, 2009.
[8] Google. Android debug bridge. http:
//developer.android.com/tools/help/adb.html.
[9] Google. Toasts. http://developer.android.com/guide/
topics/ui/notifiers/toasts.html.
[10] Google. NetworkOnMainThreadException.
http://developer.android.com/reference/
android/os/NetworkOnMainThreadException.html,
2014.
[11] C. Gutman. Remote ADB shell.
https://play.google.com/store/apps/details?id=
com.cgutman.androidremotedebugger&hl=en, 2013.
[12] Hiandroidstudio. No root screen recorder-trial.
https://play.google.com/store/apps/details?id=
com.screenrecnoroot&hl=en, 2014.
[13] IBM. T.J. Watson Libraries for Analysis (WALA).
http://wala.sourceforge.net.
[14] Invisibility. Free screen recorder no root.
https://play.google.com/store/apps/details?id=
uk.org.invisibility.recordablefree&hl=en, 2014.
[15] S. Jana and V. Shmatikov. Memento: Learning secrets from process
footprints. In Proceedings of the 2012 IEEE Symposium on Security
and Privacy, 2012.
[16] E. Kim. No root screenshot it.
https://play.google.com/store/apps/details?id=
com.edwardkim.android.screenshotitfullnoroot,
2013.
[17] D. F. Kune, J. Koelndorfer, N. Hopper, and Y. Kim. Location leaks
on the GSM air interface. In Proceedings of the 19th Network and
Distributed System Security Symposium, 2012.
[18] C.-C. Lin, H. Li, X. Zhou, and X. Wang. Screenmilker: How to milk
your Android screen for secrets. In Proceedings of the 21st Network
and Distributed System Security Symposium, 2014.
[19] F. Liu. Windows malware attempts to infect Android devices.
http://www.symantec.com/connect/blogs/windows-
malware-attempts-infect-android-devices, 2014.
[20] H. Lockheimer. Android and security. http://googlemobile.
blogspot.kr/2012/02/android-and-security.html,
2012.
[21] M. Niemietz and J. Schwenk. UI redressing attacks on Android
devices. In Black Hat Abu Dhabi, 2012.
[22] P. Pearce, A. P. Felt, G. Nunez, and D. Wagner. AdDroid: Privilege
separation for applications and advertisers in Android. In
Proceedings of the 7th ACM Symposium on Information, Computer
and Communications Security, 2012.
[23] S. Poeplau, Y. Fratantonio, A. Bianchi, C. Kruegel, and G. Vigna.
Execute this! Analyzing unsafe and malicious dynamic code loading
in Android applications. In Proceedings of the 21st Network and
Distributed System Security Symposium, 2014.
[24] E. Protalinski. Android malware numbers exploded to 25,000 in June
2012.
http://www.zdnet.com/android-malware-numbers-
explode-to-25000-in-june-2012-7000001046, 2012.
[25] J. Rivera and R. van der Meulen. Gartner says annual smartphone
sales surpassed sales of feature phones for the ﬁrst time in 2013.
http://www.gartner.com/newsroom/id/2665715,
2014.
[26] SmartUX. Screenshot UX. https://play.google.com/
store/apps/details?id=com.liveov.shotux, 2012.
[27] X. Zhang, R. Gupta, and Y. Zhang. Cost and precision tradeoffs of
dynamic data slicing algorithms. ACM Transactions on Programming
Languages and Systems, 27:631–661, 2005.
[28] X. Zhou, S. Demetriou, D. He, M. Naveed, X. Pan, X. Wang, C. A.
Gunter, and K. Nahrstedt. Identity, location, disease and more:
Inferring your secrets from Android public resources. In Proceedings
of the 20th ACM Conference on Computer and Communications
Security, 2013.
[29] X. Zhou, Y. Lee, N. Zhang, M. Naveed, and X. Wang. The peril of
fragmentation: Security hazards in Android device driver
customizations. In Proceedings of the 2014 IEEE Symposium on
Security and Privacy, 2014.
[30] Y. Zhou and X. Jiang. Detecting passive content leaks and pollution
in Android applications. In Proceedings of the 20th Network and
Distributed System Security Symposium, 2013.
584