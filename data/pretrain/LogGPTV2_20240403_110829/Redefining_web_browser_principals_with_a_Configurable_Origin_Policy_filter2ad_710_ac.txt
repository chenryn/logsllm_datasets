### Configurable Origin Policy (COP)

#### Overview
The Configurable Origin Policy (COP) allows a principal (which includes both server and client components) to assign any of its resources to an arbitrary but unique origin. This means that a principal can change the origin of its content to any value. On the server side, this is achieved by configuring the `originID` for the content being sent to clients. For example, the server can send content with a specific `originID`. On the client side, a JavaScript program can also change the `originID` of a document tree.

#### Server-Side Configuration
In contrast to the Same-Origin Policy (SOP), where the content-to-origin mapping is fixed, COP allows a principal to configure its own origin. In SOP, all content from the same domain tuple shares a single origin. However, in COP, a single SOP origin can be split into multiple COP origins. For instance, different web sessions or mashups can each have their own origin. Conversely, multiple SOP origins can be combined into a single COP origin. For example, Google Docs and Gmail might share the same principal to facilitate dynamic code or data sharing. Similarly, `www.cnn.com` and `ads.cnn.com` can be combined into a single `cnn.com` origin. Figure 2 illustrates the differences between SOP and COP content-to-principal mappings.

#### Client-Side Configuration
In the classical SOP model, switching origins on the client side is not allowed, except for limited cases using `document.domain`. This restriction can be too limiting for some applications and may introduce security risks. In COP, the origin ID of a principal is not tied to its location, allowing the client to arbitrarily decide the origin of a principal. This flexibility is particularly useful for scenarios where multiple sessions or domains need to share the same principal.

#### Operations on a COP Principal

1. **Creating a Principal:**
   - A principal can be created by either a server or a client by assigning a new `originID`.
   - **Server Creation:** The server sends content with a new `originID` to the client. For example, to support multiple Gmail accounts, the server sends different `originIDs` for each session.
   - **Client Creation:** A client can create a principal by assigning a new `originID` to a resource. This is useful for isolating content from different third-party sources in a mashup.

2. **Joining an Existing Principal:**
   - Resources from one principal can join another principal. This process involves:
     - **Explicit Join:** A web site (e.g., `a.com`) can request a resource from another site (e.g., `b.com`) to join `a.com`'s principal. If `b.com` agrees, it sends the resource with `a.com`'s `originID`.
     - **Pseudo-Join:** A web site can request a resource without revealing its `originID`. The resource is sent with a default `originID`, and `b.com` does not participate in the principal.
     - **Third-Party Join:** A resource or principal from `a.com` can join an existing principal from `b.com` by acquiring the `originID` via an auxiliary communication channel (e.g., `postMessage`).

3. **Communication Inside a Principal:**
   - Communication within a principal is unrestricted. Any resource can freely access other resources.
   - For client-server communication, if the server is in the PSL (Public Suffix List), the communication is considered internal. Otherwise, it is treated as a join operation.

4. **Communication Between Principals:**
   - Communication across principals is regulated through explicit channels, such as the `postMessage` API.

5. **Destroying a Principal:**
   - A principal can be destroyed by closing all associated tabs and windows, or by user action.

#### Implementation

**ConÔ¨Ågurable Origin Framework (COF):**
- **Server-Side Modification:** The server sends each resource with a corresponding `originID` to the client. This changes the content-to-principal mapping from SOP (one origin per domain) to COP (one origin per session).
- **Client-Side Modification:** The client browser recognizes the `originID` and assigns the resource to the corresponding principal. Our implementation is based on WebKit, with 327 lines of code added to enforce COF.

**Access Control:**
- **OriginID and PublicID Generation:** `originID` is a random 128-bit string generated by CSPRNGs. A `publicID` is assigned to each principal for reference by other principals.
- **Enforcing COP:**
  - **Resources from Servers:** HTTP headers and HTML tags are used to associate `originID` with resources.
  - **Dynamically-Generated Resources:** These include DOM, JavaScript objects, and CSS. They inherit the `originID` from the parent resource.

**Compatibility:**
- COF is designed to be compatible with existing browsers. New modifications are ignored by older browsers, ensuring backward compatibility.

This framework provides a flexible and secure way to manage origins, enabling better isolation and collaboration among web resources.