title:Mix&amp;Slice: Efficient Access Revocation in the Cloud
author:Enrico Bacis and
Sabrina De Capitani di Vimercati and
Sara Foresti and
Stefano Paraboschi and
Marco Rosa and
Pierangela Samarati
Mix&Slice: Efﬁcient Access Revocation in the Cloud
Enrico Bacis
Sabrina De Capitani di Vimercati
Sara Foresti
Università di Bergamo
24044 Dalmine - Italy
Università degli Studi di Milano
Università degli Studi di Milano
26013 Crema - Italy
26013 Crema - Italy
PI:EMAIL
PI:EMAIL
PI:EMAIL
Stefano Paraboschi
Università di Bergamo
24044 Dalmine - Italy
PI:EMAIL
Marco Rosa
Università di Bergamo
24044 Dalmine - Italy
Pierangela Samarati
Università degli Studi di Milano
26013 Crema - Italy
PI:EMAIL
PI:EMAIL
ABSTRACT
We present an approach to enforce access revocation on re-
sources stored at external cloud providers. The approach
relies on a resource transformation that provides strong mu-
tual inter-dependency in its encrypted representation. To
revoke access on a resource, it is then suﬃcient to update a
small portion of it, with the guarantee that the resource as
a whole (and any portion of it) will become unintelligible to
those from whom access is revoked. The extensive experi-
mental evaluation on a variety of conﬁgurations conﬁrmed
the eﬀectiveness and eﬃciency of our solution, which showed
excellent performance and compatibility with several imple-
mentation strategies.
Keywords
Access control; Policy revocation; Resource encryption;
Mix&Slice
1.
INTRODUCTION
With the considerable advancements in ICT solutions,
users and companies are ﬁnding increasingly appealing to
rely on external services for storing resources and making
them available to others.
In such contexts, a promising
approach to enforce access control to externally stored re-
sources is via encryption: resources are encrypted for storage
and only authorized users have the keys that enable their de-
cryption. There are several advantages that justify the use
of encryption for enforcing access control. First, robust en-
cryption has become computationally inexpensive, enabling
its introduction in domains that are traditionally extremely
sensitive to performance (like cloud-based applications and
management of large resources). Second, encryption pro-
vides protection against the service provider itself, which -
while trustworthy for providing access - cannot typically be
considered authorized to know the content of the resources
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24-28, 2016, Vienna, Austria
c(cid:13) 2016 ACM. ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978377
it stores (honest-but-curious scenario) and hence also to en-
force access control. Third, encryption solves the need of
having a trusted party for policy enforcement: resources en-
force self-protection, since only authorized users, holding the
keys, will be able to decrypt them.
One of the complex aspects in using encryption to enforce
access control policy concerns access revocation. If granting
an authorization is easy (it is suﬃcient to give the newly au-
thorized user access to the key), revoking an authorization
is a completely diﬀerent problem. There are essentially two
approaches to enforce revocation: i) re-encrypt the resource
with a new key or ii) revoke access to the key itself. Re-
encryption of the resource entails, for the data owner, down-
loading the resource, decrypting it and re-encrypting it with
a new key, re-uploading the resource, and re-distributing
the key to the users who still hold authorizations.
If de-
cryption, re-encryption, and even key management (for this
speciﬁc context) can today be considered not an issue, the
big problem is represented by the need of downloading and
re-uploading the resource, with a considerable overhead for
the data owner. This overhead, already an obstacle today,
will become even more so in emerging big data contexts. The
alternative approach of enforcing revocation on the resource
by preventing access to the key with which the resource is
encrypted cannot be considered a solution. As a matter of
fact, it protects the key, not the resource itself, and it is
inevitably fragile against a user who - while having been re-
voked from an access - has maintained a local copy of the
key. Since keys are compact in size, such a threat is indeed
real.
Our approach. In this paper, we present a novel approach
to enforce access revocation that provides eﬃciency, as it
does not require expensive upload/re-upload of (large) re-
sources, and robustness, as it is resilient against the threat
of users who might have maintained copies of the keys pro-
tecting resources on which they have been revoked access.
The basic idea of our approach is to provide an encrypted
representation of the resources that guarantees complete in-
terdependence (mixing) among the bits of the encrypted
content. Such a guarantee is ensured by using diﬀerent
rounds of encryption, while carefully selecting their input
to provide complete mixing, meaning that the value of each
bit in the resulting encrypted content depends on every bit
of the original plaintext content. In this way, unavailabil-
ity of even a small portion of the encrypted version of a
resource completely prevents the reconstruction of the re-
217source or even of portions of it. Brute-force attacks guess-
ing possible values of the missing bits are possible, but even
for small missing portions of the encrypted resource, the re-
quired eﬀort would be prohibitive. The all-or-nothing trans-
form (AONT) [16] considers similar requirements, but the
techniques proposed for it are not suited to our scenario,
because they are based on the assumption that keys are not
known to users, whereas in our scenario revoked users can
know the encryption key and may plan ahead to locally store
critical pieces of information.
Trading oﬀ between the potentially clashing need of con-
necting all bits of a resource to provide the wished interde-
pendency of the content on one side, and the potential huge
size of the resources and need to maintain a possible ﬁne-
granularity of access within the resource itself on the other
side, we apply the idea of mixing content within portions
of the resource, enforcing then revocation by overwriting
encrypted bits in every such portion. Before mixing, our
approach partitions the resource in diﬀerent, equally sized,
chunks, called macro-blocks. Then, as the name hints, it is
based on the following concepts.
• Mix: the content of each macro-block is processed by
an iterative application of diﬀerent encryption rounds
together with a carefully designed bit mixing, that en-
sures, at the end of the process, that every individual
bit in the input has had impact on each of the bits in
the encrypted output.
• Slice: the mixed macro-blocks are sliced into fragments
so that fragments provide complete coverage of the re-
source content and each fragment represents a minimal
(in terms of number of bits of protection, which we call
mini-block ) unit of revocation: lack of any single frag-
ment of the resource completely prevents reconstruc-
tion of the resource or of portions of it.
To revoke access from a user, it is suﬃcient to re-encrypt
one (any one) of the resource fragments with a new key not
known to the user. The advantage is clear: re-encrypting
a tiny chunk of the resource guarantees protection of the
whole resource itself. Also, the cloud provider simply needs
to provide storage functionality and is not required to play
an active role for enforcing access control or providing user
authentication. Our Mix&Slice proposal is complemented
with a convenient approach for key management that, based
on key regression, avoids any storage overhead for key dis-
tribution.
Outline. The remainder of the paper is organized as fol-
lows. Section 2 illustrates our approach to produce an en-
crypted representation with the desired guarantees. Sec-
tion 3 presents the enforcement of access revocation. Sec-
tion 4 discusses the eﬀectiveness of our solution in providing
revocation. Section 5 illustrates our implementation and the
extensive experimental evaluation conﬁrming its advantages
and applicability. Section 6 discusses related work. Finally,
Section 7 presents our conclusions.
2. MIX & SLICE
2.1 Blocks, mini-blocks, and macro-blocks
The basic building block of our approach is the appli-
cation of a symmetric block cipher. A symmetric crypto-
graphic function operating on blocks guarantees complete
dependency of the encrypted result from every bit of the in-
put and the impossibility, when missing some bits of an en-
crypted version of a block, to retrieve the original plaintext
block (even if parts of it are known). The only possibility to
retrieve the original block would be to perform a brute-force
attack attempting all the possible combinations of values for
the missing bits. For instance, modern encryption functions
like AES guarantee that the absence of i bits from the input
(plaintext) and of o bits from the output (ciphertext) does
not permit, even with knowledge of the encryption key k, to
properly reconstruct the plaintext and/or ciphertext, apart
from performing a brute-force attack generating and verify-
ing all the 2min(i,o) possible conﬁgurations for the missing
bits [1].
Clearly, the larger the number of bits that are missing
in the encrypted version of a block, the harder the eﬀort
required to perform a brute-force attack, which requires at-
tempting 2x possible combinations of values when x bits are
missing. Such security parameter is at the center of our ap-
proach and we explicitly identify a sequence of bits of its
length as the atomic unit on which our approach operates,
which we call mini-block . Applying block encryption with
explicit consideration of such atomic unit of protection, and
extending it to a coarser-grain with iterative rounds, our
approach identiﬁes the following basic concepts.
• Block : a sequence of bits input to a block cipher (it
corresponds to the classical block concept).
• Mini-block : a sequence of bits, of a speciﬁed length,
contained in a block. It represents our atomic unit of
protection (i.e., when removing bits, we will operate
at the level of mini-block removing all its bits).
• Macro-block : a sequence of blocks. It allows extend-
ing the application of block cipher on sequences of bits
larger than individual blocks.
In particular, our ap-
proach operates mixing bits at the macro-block level,
extending protection to work against attacks beyond
the individual block.
Our approach is completely parametric with respect to
the size (in terms of the number of bits) that can be con-
sidered for blocks, mini-blocks, and macro-blocks. The only
constraints are for the size of a mini-block to be a divisor
of the size of the block (aspect on which we will elaborate
later on) and for the size of a macro-block to be a product
of the size of a mini-block and a power of the number of
mini-blocks in a block (i.e., the ratio between the size of a
block and the size of a mini-block).
In the following, for
concreteness and simplicity of the ﬁgures, we will illustrate
our examples assuming the application of AES with blocks
of 128 bits and mini-blocks of 32 bits, which corresponds to
having 4 mini-blocks in every block and therefore operating
on macro-blocks of size 32 · 4x, with x arbitrarily set.
In
the following, we will use msize, bsize, Msize to denote the
size (in bits) of mini-blocks, blocks, and macro-blocks, re-
spectively. We will use bj [i] (Mj[i], resp.) to denote the i-th
mini-block in a block bj (macro-block Mj, resp.). We will
simply use notation [i] to denote the i-th mini-block in a
generic bit sequence (be it a block or macro-block), and [[j]]
to denote the j-th block. In the encryption process, a sub-
script associated with a mini-block/block denotes the round
that produced it.
218[0]
0
[1]
0
[2]
0
[3]
0
[4]
0
[5]
0
[6]
0
[7]
0
[8]
0
[9]
0
[10]
[11]
0
0
[12] [13]
0
[14]
[15]
0
0
0
E
E
E
E
[0]
1
[1]
1
[2]
1
[3]
1
[4]
1
[5]
1
[6]
1
[7]
1
[8]
1
[9]
1
[10]
[11]
1
1
[12] [13]
1
[14]
1
1
[15]
1
E
E
E
E
[0]
2
[1]
2
[2]
2
[3]
2
[4]
2
[5]
2
[6]
2
[7]
2
[8]
2
[9]
2
[10]
[11]
2
2
[12] [13]
2
[14]
[15]
2
2
2
Figure 1: An example of mixing of 16 mini-blocks
assuming m = 4
2.2 Mixing
The basic step of our approach (on which we will iter-
atively build to provide complete mixing within a macro-
block) is the application of encryption at the block level.
This application is visible at the top of Figure 1, where the
ﬁrst row reports a sequence of 16 mini-blocks ([0], . . . , [15])
composing 4 blocks. The second row is the result of block
encryption on the sequence of mini-blocks. As visible from
the pattern-coding in the ﬁgure, encryption provides mixing
within each block so that each mini-block in the result is
dependent on every mini-block in the same input block. In
other words, each [i]1 is dependent on every [j]0 with (i div
4) = (j div 4).
One round of block encryption provides mixing only at
the level of block. With reference to our example, mix-
ing is provided among mini-blocks [0]0 . . . [3]0, [4]0 . . . [7]0,
[8]0 . . . [11]0, and [12]0 . . . [15]0, respectively. Absence of a
mini-block from the result will prevent reconstruction only
of the plaintext block including it, while not preventing the