deﬁned in a straightforward way following the implemen-
tation outlined in Section IV. The script script_RP_index
(issued by RP) also includes the script that is (in reality)
loaded from LPO. In particular, this script creates the CIF
and the LD iframes/subwindows, whose contents (scripts)
are loaded from LPO.
2) Formal Security Properties: The security properties
for BrowserID, informally introduced in Section V-A, are
formally deﬁned as follows. First note that every RP service
token (cid:5)n, i(cid:6) recorded in an RP was created by the RP as
the result of a unique HTTPS POST request m with a valid
CAP for ID i. We refer to m as the request corresponding
to (cid:5)n, i(cid:6).
9Mozilla recommends to (1) protect against Cross-site Request Forgery
(Rr checks the Origin header, which is always set in our model), (2) verify
CAPs on the server (rather than in the browser), (3) check if the CAP is
issued for the correct RP, and (4) verify SSL certiﬁcates.
Deﬁnition 7. Let BID be a BrowserID web system. We say
that BID is secure if for every run ρ of BID, every state
(Sj, Ej) in ρ, every r ∈ RP, every RP service token of the
form (cid:5)n, i(cid:6) recorded in r in the state Sj(r), the following
two conditions are satisﬁed:
(A) If (cid:5)n, i(cid:6) is derivable from the attackers knowledge in
Sj (i.e., (cid:5)n, i(cid:6) ∈ dN attacker (Sj(attacker))), then it follows that
the browser owning i is fully corrupted in Sj, i.e., the value
of isCorrupted is FULLCORRUPT.
(B) If the request corresponding to (cid:5)n, i(cid:6) was sent by some
b ∈ B which is honest in Sj, then b owns i.
3) Security of the Fixed System: We call a BrowserID
web system BID with the ﬁxes proposed in Section V-B a
ﬁxed BrowserID web system. We now obtain the following
theorem, which says that such a system satisﬁes the security
properties (A) and (B).
Theorem 1. Let BID be a ﬁxed BrowserID web system.
Then, BID is secure.
The complete proof with all details is provided in the full
version of this paper [14]. Due to space limitations, here we
only provide a very rough sketch of how security property
(A) is proved: We assume that (A) is not satisﬁed and lead
this to a contradiction. To do so, we ﬁrst prove a sequence
of (twelve) lemmas. To provide an example, in one lemma
we show that in every run of BID if a CAP c is created by
script_LPO_ld, then the origin for which c is issued is the
origin of the script that receives the postMessage containing c
( 26 in Figure 3). Using these lemmas, we distinguish between
two (main) cases to lead the assumption that (A) does not
hold to a contradiction: the attacker, in state Sj, knows (or
does not know) the key used to encrypt the service token
(cid:5)n, i(cid:6) recorded in and issued by r.
VI. RELATED WORK
Early work in the direction of formal web security analysis
includes work by Kerschbaum [21], in which a Cross-Site
Request Forgery protection proposal is formally analyzed
using a simple model expressed using Alloy, a ﬁnite-state
model checker [19].
In seminal work, Akhawe et al. [2] initiated a more general
formal treatment of web security. Again the model was
provided in the Alloy modeling language. Inspired by this
work, Bansal et al. [5], [6] built the WebSpi model for
the web infrastructure, which is encoded in the modeling
language (a variant of the applied pi-calculus [1]) of ProVerif,
a specialized tool for cryptographic protocol analysis [8].
Both models have successfully been applied to ﬁnd attacks
in standards and web applications.
We see our work as a complement to these models: On the
one hand, the above models support (fully) automated analy-
sis. On the other hand, our model is much more comprehen-
686
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:20 UTC from IEEE Xplore.  Restrictions apply. 
sive and accurate, but not directly suitable for automation.10
We think that, similarly to the area of cryptography, both
approaches, automated analysis and manual analysis, are very
valuable. Clearly, it is highly desirable to push automated
analysis as much as possible, given that manual proofs are
laborious and error-prone. Conversely, automated approaches
may miss important problems due to the less accurate models
they consider. Moreover, a “service” more comprehensive
and accurate models provide, even if they are manually
driven, is that they summarize and condense relevant aspects
in the various standards and speciﬁcations for the web. As
such, they are an important basis for the formal foundation
and discourse on web security and can serve as reference
models (for tool-supported analysis, web security researchers,
for developers of web technologies and standards, and maybe
for teaching basic web security concepts).
The BrowserID system has been analyzed before using
the AuthScan tool developed by Bai et al. [4]. Their work
focusses on the automated extraction of a model from a
protocol implementation. Their analysis of BrowserID is not
very detailed; only two rather trivial attacks are identiﬁed,
for example, CAPs that are sent unencrypted can be replayed
by the attacker to an RP. There is also work on the analysis
of other web-based single sign-on systems, such as SAML-
based single sign-on, OpenID, and OAuth (see, e.g., [3], [7],
[11], [15], [17], [22], [26]–[29]). However, none of these
works are based on a model of the web infrastructure.
In [16], [25], [26], [29], potentially problematic usage
of postMessages and the OpenID interface are discussed.
While very useful, these papers do not consider BrowserID or
formal models, and they do not formalize security properties
for web applications or establish formal security guarantees.
Bohannon and Pierce propose a formal model of a web
browser core [9]. The scope and goal of the model is different
to ours, but some mechanisms can be found in both models.
Börger et al. present an approach for the analysis of web
application frameworks, focussing on the server [10].
VII. CONCLUSION
We presented an expressive model of the web infrastruc-
ture and web applications, the most comprehensive model
for the web infrastructure to date. It contains many security-
relevant features and is designed to closely mimic standards
and speciﬁcations for the web. As such, it constitutes a solid
10The tool-based models are necessarily tailored to and limited by
constraints of the tools. For example, models for Alloy are necessarily
ﬁnite state. Terms (messages) need to be encoded in some way as they are
not directly supported. Due to the analysis method employed in ProVerif,
the WebSpi model is of a monotonic nature. For instance, cookies and
localStorage entries can only be added, but not deleted or modiﬁed. Also,
the number of cookies per request is limited. Several features (that have been
crucial for the analysis of BrowserID) are not supported by the tool-based
models, including the precise handling of windows, documents, and iframes
as well as cross-document messaging (postMessages), and the ability for
an attacker to take over a browser after it has been closed. Dealing with
such features in an automated tool is indeed challenging.
basis for the analysis of a broad range of web standards and
applications.
In our case study, we analyzed the BrowserID system,
found several very critical attacks, proposed ﬁxes, and proved
the ﬁxed system for the case of secondary IdP case secure
w.r.t. the security properties we speciﬁed. The analysis of
this system is out of the scope of other models for the web
infrastructure.
As for future work, it is straightforward to incorporate
further features, such as subdomains, cross-origin resource
sharing, and ﬁner-grained settings for cookie paths and
domains, which we have left out mainly for brevity of
presentation for now. Our model could serve as a basis and
a reference for automated approaches, where one could try
to extend the existing automated approaches or develop new
ones (e.g., based on theorem provers, where higher accuracy
is typically paid by more interaction). Finally, BrowserID is
being used by more and more web sites and it will continue
to be an interesting object of study. An obvious next step is to
analyze BrowserID for the case of primary IdPs. The model
is already expressive enough to carry out such an analysis.
We also plan to apply our model to other web applications
and web standards.
ACKNOWLEDGEMENT
The ﬁrst author is supported by the Studienstiftung des
Deutschen Volkes (German National Academic Foundation).
REFERENCES
[1] M. Abadi and C. Fournet. Mobile Values, New Names, and
Secure Communication.
In Proceedings of the 28th ACM
Symposium on Principles of Programming Languages (POPL
2001), pages 104–115. ACM Press, 2001.
[2] D. Akhawe, A. Barth, P. E. Lam, J. Mitchell, and D. Song.
Towards a Formal Foundation of Web Security. In Proceedings
of the 23rd IEEE Computer Security Foundations Symposium,
CSF 2010, pages 290–304. IEEE Computer Society, 2010.
[3] A. Armando, R. Carbone, L. Compagna, J. Cuéllar, and M. L.
Tobarra. Formal analysis of SAML 2.0 web browser single
sign-on: breaking the SAML-based single sign-on for google
apps. In V. Shmatikov, editor, Proceedings of the 6th ACM
Workshop on Formal Methods in Security Engineering, FMSE
2008, pages 1–10. ACM, 2008.
[4] G. Bai, J. Lei, G. Meng, S. S. Venkatraman, P. Saxena, J. Sun,
Y. Liu, and J. S. Dong. AUTHSCAN: Automatic Extraction
of Web Authentication Protocols from Implementations. In
Proceedings of the 20th Annual Network and Distributed
System Security Symposium (NDSS’13). The Internet Society,
2013.
[5] C. Bansal, K. Bhargavan, A. Delignat-Lavaud, and S. Maffeis.
Keys to the Cloud: Formal Analysis and Concrete Attacks on
Encrypted Web Storage. In D. A. Basin and J. C. Mitchell,
editors, Principles of Security and Trust - Second International
Conference, POST 2013, volume 7796 of Lecture Notes in
Computer Science, pages 126–146. Springer, 2013.
687
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:20 UTC from IEEE Xplore.  Restrictions apply. 
[6] C. Bansal, K. Bhargavan, and S. Maffeis. Discovering
Concrete Attacks on Website Authorization by Formal Anal-
ysis.
In S. Chong, editor, 25th IEEE Computer Security
Foundations Symposium, CSF 2012, pages 247–262. IEEE
Computer Society, 2012.
[19] D. Jackson. Alloy: A new technology for software modelling.
In J.-P. Katoen and P. Stevens, editors, Tools and Algorithms
for the Construction and Analysis of Systems, 8th International
Conference, TACAS 2002, volume 2280 of Lecture Notes in
Computer Science, page 20. Springer, 2002.
[7] J. Bellamy-McIntyre, C. Luterroth, and G. Weber. OpenID and
the Enterprise: A Model-Based Analysis of Single Sign-On
Authentication. In Proceedings of the 15th IEEE International
Enterprise Distributed Object Computing Conference, EDOC
2011, pages 129–138. IEEE Computer Society, 2011.
[8] B. Blanchet. An Efﬁcient Cryptographic Protocol Veriﬁer
Based on Prolog Rules.
In Proceedings of the 14th IEEE
Computer Security Foundations Workshop (CSFW-14), pages
82–96. IEEE Computer Society, 2001.
[9] A. Bohannon and B. C. Pierce.
Featherweight Firefox:
formalizing the core of a web browser. In Proceedings of the
2010 USENIX conference on Web application development,
pages 11–11. USENIX Association, 2010.
[10] E. Börger, A. Cisternino, and V. Gervasi. Contribution to a
Rigorous Analysis of Web Application Frameworks. In J. Der-
rick, J. A. Fitzgerald, S. Gnesi, S. Khurshid, M. Leuschel,
S. Reeves, and E. Riccobene, editors, Abstract State Machines,
Alloy, B, VDM, and Z - Third International Conference, ABZ
2012, volume 7321 of Lecture Notes in Computer Science,
pages 1–20. Springer, 2012.
[11] S. Chari, C. S. Jutla, and A. Roy. Universally Composable
Security Analysis of OAuth v2.0. IACR Cryptology ePrint
Archive, 2011:526, 2011.
[20] C. Karlof, U. Shankar, J. D. Tygar, and D. Wagner. Dynamic
pharming attacks and locked same-origin policies for web
browsers.
In P. Ning, S. D. C. di Vimercati, and P. F.
Syverson, editors, Proceedings of the 2007 ACM Conference
on Computer and Communications Security, CCS 2007, pages
58–71. ACM, 2007.
[21] F. Kerschbaum. Simple cross-site attack prevention.
In
Third International Conference on Security and Privacy in
Communication Networks and the Workshops, SecureComm
2007, pages 464–472. IEEE Computer Society, 2007.
[22] A. Kumar. Using automated model analysis for reasoning
about security of web protocols. In R. H. Zakon, editor, 28th
Annual Computer Security Applications Conference, ACSAC
2012, pages 289–298. ACM, 2012.
[23] Mozilla Identity Team. Persona. Mozilla Developer Network.
Last visited May 1, 2013. https://developer.mozilla.org/en/
docs/persona.
[24] OpenID Foundation website. http://openid.net.
[25] S. Son and V. Shmatikov. The Postman Always Rings
Twice: Attacking and Defending postMessage in HTML5
Websites.
In 20th Annual Network and Distributed System
Security Symposium, NDSS 2013, San Diego, California, USA,
February 24-27, 2013. The Internet Society, 2013.
[12] Cross-Origin Resource Sharing - W3C Recommendation
29 January 2013. Available at http://www.w3.org/TR/2013/
CR-cors-20130129/.
[26] P. Sovis, F. Kohlar, and J. Schwenk. Security Analysis of
OpenID. In Sicherheit, volume 170 of LNI, pages 329–340.
GI, 2010.
[13] N. Durgin, P. Lincoln, J. Mitchell, and A. Scedrov. Multiset
rewriting and the complexity of bounded security protocols.
Journal of Computer Security, 12(2):247–311, 2004.
[14] D. Fett, R. Küsters, and G. Schmitz. An Expressive Model
for the Web Infrastructure: Deﬁnition and Application to the
BrowserID SSO System. Technical Report arXiv:1403.1866,
arXiv, 2014. Available at http://arxiv.org/abs/1403.1866.
[15] T. Groß. Security Analysis of the SAML Single Sign-on
Browser/Artifact Proﬁle. In 19th Annual Computer Security
Applications Conference (ACSAC 2003), pages 298–307. IEEE
Computer Society, 2003.
[16] S. Hanna, R. Shin, D. Akhawe, A. Boehm, P. Saxena, and
D. Song. The emperor’s new apis: On the (in)secure usage
of new client side primitives. In Proceedings of the 4th Web
2.0 Security and Privacy Workshop (W2SP), 2010, 2010.
[17] S. M. Hansen, J. Skriver, and H. R. Nielson. Using static
analysis to validate the SAML single sign-on protocol.
In
C. Meadows, editor, Proceedings of the POPL 2005 Workshop
on Issues in the Theory of Security, WITS 2005, pages 27–40.
ACM, 2005.
[27] S.-T. Sun and K. Beznosov. The devil is in the (implementa-
tion) details: an empirical analysis of OAuth SSO systems. In
T. Yu, G. Danezis, and V. D. Gligor, editors, ACM Conference
on Computer and Communications Security, CCS’12, pages
378–390. ACM, 2012.
[28] S.-T. Sun, K. Hawkey, and K. Beznosov. Systematically
breaking and ﬁxing OpenID security: Formal analysis, semi-
automated empirical evaluation, and practical countermea-
sures. Computers & Security, 31(4):465–483, 2012.
[29] R. Wang, S. Chen, and X. Wang. Signing me onto your
accounts through facebook and google: A trafﬁc-guided
security study of commercially deployed single-sign-on web
services. In IEEE Symposium on Security and Privacy (S&P
2012), 21-23 May 2012, San Francisco, California, USA,
pages 365–379. IEEE Computer Society, 2012.
[30] R. Wang, S. Chen, X. Wang, and S. Qadeer. How to shop for
free online - security analysis of cashier-as-a-service based
web stores. In 32nd IEEE Symposium on Security and Privacy,
S&P 2011, pages 465–480. IEEE Computer Society, 2011.
[31] Web Storage - W3C Recommendation 30 July 2013. http:
//www.w3.org/TR/2013/REC-webstorage-20130730/.
[18] HTML5, W3C Candidate Recommendation. Dec. 17, 2012.
[32] whatwg.org. Fetch. http://fetch.spec.whatwg.org/.
688
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:20 UTC from IEEE Xplore.  Restrictions apply.