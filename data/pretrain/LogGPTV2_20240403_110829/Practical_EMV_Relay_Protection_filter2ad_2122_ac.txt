### IV. Mobile Payments via Transport Mode

This section presents the results of our experiments with Apple Pay Express Transit (referred to as Express Travel in Europe) and Samsung Pay’s "Transport card" feature. We collectively refer to these systems as "Transport mode." This feature allows users to make payments on certain transport networks without prior device authentication (e.g., fingerprint, Face ID, or passcode) by simply tapping their phone on an EMV reader.

#### Availability
- **Apple Pay Express Transit** is available in London (TfL), New York City, Portland, Chicago, Los Angeles, Washington, Beijing, Shanghai, Hong Kong, and Japan [21].
- **Samsung Pay's Transport mode** is currently only advertised to work in London (TfL) [22].
- **Google Pay** allows for small-value transactions without user authentication by design but does not have a dedicated transport mode.

### A. Setup and Data Collection

#### Hardware
- **Target Devices:**
  - Two Apple products: iPhone 7 and iPhone 12 running iOS 14.4.2.
  - Two Samsung products: Galaxy S9 Edge and Galaxy S10 running Android 11.
- **EMV Terminals:**
  - Commercially available readers: iZettle v1, SumUp, and SquareUp.

#### Preparation Stage
- **Data Collection:**
  - We collected transaction traces between a locked phone and TfL ticket gate readers at Clapham South, Clapham Common, Balham, and Epson London Underground stations.
  - **Tools Used:**
    - Proxmark RDV4 with a high-frequency antenna, running standard firmware.
    - The Proxmark was chosen for its versatility, excellent ISO 14443-A support, and small form factor, allowing discreet snifﬁng.
    - The Proxmark was connected via USB to a Linux laptop for issuing snifﬁng commands.

#### Observations
- **Magic Bytes:**
  - An extra, static 15-byte message (referred to as Magic Bytes) is sent before the ISO 14443-3 Wake-UP command, Type A (WUPA).

### B. Visa Apple Pay Express Transit Replay & Relay Attack

We discovered that by replaying the Magic Bytes to an iPhone, Apple Pay would unlock and allow us to start a transaction for both Mastercard and Visa, even without any authentication. However, neither card initially allowed us to complete an EMV transaction.

#### Visa Traces Analysis
- To continue the transaction in transit mode, we needed to ensure the TTQ in the GPO had the Offline Data Authentication (ODA) for Online Authorizations supported bit set (byte 1 bit 1) and the EMV mode supported bit set (byte 1 bit 6). This flag indicates to the device that the reader may be offline but should use online mode.

#### Relay Attack
- By setting these flags in a relay, we could relay transactions between a locked iPhone and any of our shop readers, enabling an attacker to wirelessly pickpocket money from the iPhone’s owner. This attack can also be used to extract money from a stolen, locked iPhone.
- **Severity:**
  - This vulnerability has a Severity Score of 7.1 and a High Severity rating (based on the Common Vulnerability Scoring System v3.1 [24], [25]).

#### Attack Details
- **Hardware:**
  - Proxmark RDV4 with modified firmware.
  - NFC-enabled Android device (Nokia 6 TA-1033, running Android 9 Pie).
  - Laptop running a Python script for the relay server.
- **Process:**
  - The Proxmark acts as a terminal emulator, sending the Magic Bytes and WUPA command.
  - The Nokia phone acts as a card emulator, communicating with the laptop via cellular or WiFi.
  - The relay server handles communication between the Proxmark and the CardEmulator, modifying messages as needed.
  - Once the iPhone is in the ACTIVE state, the EMV protocol starts, and messages are relayed between the EMV reader and the iPhone.

### C. Investigation of Mode-Change in Samsung Pay

We investigated Samsung Pay Transport Card on a Samsung Galaxy S9 Edge and Galaxy S10, running Android 11. Unlike Apple, the Samsung phone did not require the presence of the Magic Bytes to respond to EMV commands. Samsung’s solution relies on small/zero value payments:
- If the transaction value is 0, it is considered a public transport transaction and executed without authentication.
- Larger amounts require authentication, and if not provided, the phone stops the transaction.

### D. Investigating the IAD

To understand how CDCVM (Cardholder Device CVM) is authenticated, we compared mobile device transactions with and without CDCVM. For Mastercard, the differences were in the UN, AC, SDAD, and IAD. The AIP indicated that the device supports CDCVM but did not indicate whether user authentication was performed.

#### MitM Attack
- Inserting the IAD from a user-authenticated transaction into a non-authenticated transaction resulted in rejection, indicating that the IAD is authenticated. Mastercard confirmed that the IAD is included in the AC and checked.

#### Visa Plastic Cards
- Multiple IAD formats were observed, with the first byte of the CVR reflecting whether CDCVM was used. Visa confirmed this but stated that they do not check these bytes.

### E. Responsible Disclosure

We discussed the vulnerability with Apple and Visa:
- **Apple:**
  - Acknowledged the issue but believed Visa should be responsible for checking the CDCVM status in the IAD.
  - Suggested restricting transactions to low or zero value when unlocked with the Magic Bytes, but Apple did not want to limit payment values in transport mode.
- **Visa:**
  - Stated that back-end anti-fraud checks are applied and suggested that Apple should fix the issues.
  - Until a fix is implemented, we recommend disabling transit mode for Visa cards on iPhones.

### F. Comparison with Existing Attacks

The attack presented by Galloway [7] involves clearing the CVM bit in the TTQ to perform over-the-CVM-limit transactions without Cardholder Verification on plastic cards. Our attack, however, specifically targets the transport mode feature in mobile payments.