IV. MOBILE-PAYMENTS VIA TRANSPORT MODE
This section presents our results from experimenting with
Apple Pay Express Transit (known as Express Travel
in
Europe) and Samsung Pay “Transport card”. We refer to these
two systems as “Transport mode”. The transport mode on these
phones is a convenience feature, which allows a user to pay on
certain transport networks without prior authentication to the
device (ﬁngerprint, face ID or passcode), by simply tapping
the phone on the EMV reader of the transport network.
Apple Pay’s transport mode is available in London (TfL),
New York City, Portland, Chicago, Los Angeles, Washington,
Beijing, Shanghai, Hong Kong and Japan [21]. Samsung
Pay’s transport mode is only advertised to work in London
(TfL) [22]. Google Pay allows, by design, for certain small-
value transactions without user authentication2 and does not
have a dedicated transport mode.
A. Setup and Data Collection
Hardware: As target devices we had two Apple products
(an iPhone 7 and an iPhone 12, running iOS 14.4.2 and two
Samsung products (a Samsung Galaxy S9 Edge and S10
running Android 11. We tested our ﬁndings on a number of
commercially available EMV terminals: iZettle v1, SumUp,
and SquareUp readers.
Preparation Stage: We collected transport mode trans-
action traces between a locked phone and TfL ticket gate
readers at Clapham South, Clapham Common, Balham and
Epson London Underground stations. For this we used a Prox-
mark RDV4 ﬁtted with the high frequency antenna, running
standard ﬁrmware3. The Proxmark was chosen both due to
its versatility and excellent ISO 14443-A support, as well as
its small form factor, which meant we could carry out the
snifﬁng experiments without drawing too much attention. The
Proxmark was connected via USB to a Linux laptop in order
to issue the snifﬁng commands.
Analysing the sniffed traces, we noticed that an extra, static
15-byte message is sent before the ISO 14443-3 Wake-UP
command, Type A (WUPA) [23], which we refer to as the
Magic Bytes.
B. Visa Apple Pay Express Transit Replay & Relay Attack
We found that by replaying the Magic Bytes to an iPhone,
Apple Pay would unlock and allow us to start a transaction
for both Mastercard and Visa, even if no authentication (PIN,
FaceID or TouchID) has taken place. However neither would
initially let us then complete an EMV transaction.
By examining the Visa traces we found that in order to
continue with the transaction in transit mode, we have to make
sure the TTQ, contained in the GPO, has the Ofﬂine Data
Authentication (ODA) for Online Authorizations supported bit
set (byte 1 bit 1) as well as the EMV mode supported bit set
(byte 1 bit 6). The former ﬂag indicates to the device that the
reader may be ofﬂine, but that the device should use online
mode anyway.
2https://support.google.com/pay/answer/7644132
3https://github.com/RﬁdResearchGroup/proxmark3
By setting these ﬂags in a relay we found we could relay
transactions between a locked iPhone and any of our shop
readers, therefore, allowing the attacker to wirelessly pick
pocket money from the iPhone’s owner. The attack may also
be used to extract money from a stolen, locked iPhone. We
note that it would be possible for Visa to try to authenticate
the TTQ and so limit the attack to just shop readers that have
the Online/Ofﬂine mode ﬂag set, however, as shown by [7],
Visa do not authenticate this ﬁeld.
Attack Details: This vulnerability has a Severity Score
of 7.1 and a High Severity rating (based on the Common
Vulnerability Scoring System v3.1 [24], [25]).
For carrying out the attack, we used a Proxmark RDV4, with
small modiﬁcations to the device ﬁrmware (details to follow)
which acted as a reader emulator, the EMV readers mentioned
above and an NFC enabled Android device which acted as a
card emulator (Nokia 6 TA-1033, running Android 9 Pie, in
our case). A device to run the relay server was also needed;
for our experiments we used the same laptop as above.
To carry out
the attack a Proxmark acts as a terminal
emulator, and it is connected to a laptop via USB. The Nokia
phone acts as a card emulator, using the CardEmulator app
from [26], and communicates with the laptop via some net-
work (cellular or WiFi). We modiﬁed the Proxmark ﬁrmware
such that, when emulating an ISO 14443 type A reader, it
would ﬁrst send the Magic Bytes, wait 8ms for the iPhone to
process the message, then send the WUPA command. The rest
of the ISO 14443 protocol is run according to the standard,
after which the EMV protocol can begin. This step only
involves the iPhone and the Proxmark, and no messages are
relayed in this part of the attack.
The relay server
runs a Python script which handles
the communication with the Proxmark, via the pm3 client,
and the communication with the CardEmulator via a
socket. It relays the messages between the Proxmark and the
CardEmulator, and can modify them in-ﬂight, as needed.
Once the iPhone is in the ACTIVE state (as described in
ISO 14443-3), we can start the interaction between the card
emulator and reader. They will complete the standard ISO
14443 activation protocol.
The EMV protocol then starts, and the messages are relayed
between the EMV reader and the iPhone. A diagram of the
relay can be seen in Fig. 4. At the point in which the reader
provides the transaction information, as part of the GPO
message, in order to continue with the transaction, we set the
Ofﬂine Data Authentication (ODA) for Online Authorizations
supported bit (byte 1 bit 1), as well as the EMV mode
supported bit (byte 1 bit 6) in the TTQ – we denote the
modiﬁed message as GPO’ in our diagram. The EMV protocol
continues as normal. We would like to highlight that as part of
the answer to the last READ RECORD command the phone
sends, among other details, the Card Authentication Related
Data (CARD), which contains the card nonce (Nc) and a copy
of the CTQ. Once the last reply is received by the reader, the
transaction is successfully completed - the iPhone shows a tick
and displays ‘Done’ in the user interface (UI), and issues its
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:17 UTC from IEEE Xplore.  Restrictions apply. 
1742
iPhone
Proxmark
Relay
Server
Card
Emulator
Reader
Magic Bytes
14443-A activation protocol
14443-A activation protocol
SELECT 2PAY.SYS.DDF01
FCI(AID-VISA)
SELECT VISA AID
PDOL,FCI(API)
GPO(PDOL-DATA)
modify TTQ (GPO’)
GPO’(PDOL-DATA)
AIP,AFL,AC,IAD,ATC,SDAD,CTQ
V
M
E
READ RECORD 1
ICC,TRID,PAR
READ RECORD 2
Issuer PK Cert
READ RECORD 3
READ RECORD 1
ICC,TRID,PAR
READ RECORD 2
Issuer PK Cert
READ RECORD 3
ICC PK Cert,PAN,CARD
ICC PK Cert,PAN,CARD
Records can be cached, therefore this
exchange would not be needed
Fig. 4. Communications diagram for the Apple Pay Express Transit attack
trademark sound, and the reader shows the payment has been
received.
The READ RECORD commands can also be cached, in
which case the Proxmark no longer needs to relay the requests
for these to the iPhone. The replies can be cached on the
relay server or,
ideally, on the device acting as the card
emulator. If the replies are cached the UI does not show the
transaction as completed; instead, it displays ‘Try Again’ and
a red exclamation mark. There is also no audio cue. However,
the reader shows the payment has been successful, and the
transaction can be conﬁrmed by unlocking the iPhone and
checking the Apple Pay transaction history. As the last record
technically contains the card nonce, it is ambiguous to us why
we can successfully perform a transaction by replaying an old
nonce, as the Nc should be included in the SDAD. This version
of the attack requires for an attacker to be in the proximity
of the target iPhone and either sniff a previous transaction
or emulate an EMV reader, in order to acquire the needed
responses for the READ RECORD commands.
Relay Success Rate: The full relay has a success rate
of approx 40%4. This success rate is achieved by a slight
modiﬁcation in the attack ﬂow, whereby when the ﬁrst READ
RECORD command is issued, we continue the phone-side
only messages exchange with the two subsequent read com-
mands. We then relay them to the reader, as it requests them
(as opposed to forwarding each READ RECORD command
when received from the reader). We point out that the success
rate is not due to any Apple protection mechanism, but due
to the timing of relaying the messages, and for the cached
READ RECORD variant, the success rate is 100%.
Over the CVM Limit Payments Escalation: The above
described attack works for transactions under the contactless
48 successful transactions out of 20 attempts.
payment limit. We were able to escalate this attack to work for
any amount. We could bypass the contactless limit by setting
the CDCVM performed bit in the CTQ (bit 8 in byte 2), as well
as setting the same bit in the CTQ copy of the CARD ﬁeld.
We successfully tested this with amounts up to £1000. The
code for the proof of concept is open sourced and available
in [9] along with a video of the attack being performed.
Disclaimer: For ethical reasons, we used our own per-
sonal cards while carrying out this research and we do not
publish the value of the Magic Bytes.
Mastercard: We have also investigated whether this at-
tack works when using a Mastercard with Apple Pay Express
Transit. In order to complete a transport transaction, we found
that the Merchant Category Code (MCC), which the EMV
reader sends, needs to map to transportation services [27];
we conﬁrmed it works with MCC 4111 (local commuter
transport) or 4131 (bus lines). However, the MCC is authenti-
cated in the Mastercard protocol (it is included in the SDAD),
and therefore this modiﬁcation is detected and the transaction
rejected. This check on the MCC is the reason why we cannot
relay Mastercard transactions from a locked iPhone to a shop
reader, although relays to other transit readers are possible.
C. Investigation of Mode-Change in Samsung Pay
We investigated Samsung Pay Transport Card, the equiva-
lent of Apple Pay Express Transit, on a Samsung Galaxy S9
Edge and Galaxy S10, running Android 11, with all updates
applied. We found that the transaction logic of the Samsung
phone differs from the iPhone; when it comes to choosing
whether a transaction should be executed via its transport
mode or through the normal mode. The Samsung phone did
not require the presence of the Magic Bytes to respond to
EMV commands. Samsung’s solution relies on one of the
suggested mitigations we had for Apple: small/zero value
payments. If the transaction value is 0, the phone considers
this to be a transaction with the public transport infrastructure
and executes it through the transport card (no authentication
required). A larger amount
is considered to be a normal
transaction, and requires authentication. If the ﬁngerprint (or
Samsung Pay PIN) is not provided beforehand, the phone
replies with a message to signal that the conditions of use
have not been satisﬁed and stops the transaction.
We could activate the Samsung Transport card by replaying
a TfL trace to it. However, when trying to relay a non-
zero value transaction between a real EMV reader and the
phone, the transaction was always cancelled by the phone,
and a message that authentication to the device is required
was displayed. Changing the amount of the transaction while
relaying (in the same way we changed the TTQ when relaying
the iPhone) resulted in the transaction reaching the end of the
protocol on the phone, but being declined by the EMV reader.
As it is clear that the transaction is cancelled by the phone
if any non-zero value is present in the authorised amount ﬁeld
of the GPO message (which is used for purchases), we also
experimented whether the same occurs for the other amount
ﬁeld, which is used for cashback. Here we found that we could
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:17 UTC from IEEE Xplore.  Restrictions apply. 
1743
complete a transaction with a locked Samsung phone (and
therefore had an AC generated) with some value in the other
amount ﬁeld, as long as the authorised amount value was zero.
Plans have been announced to allow cashback without
a purchase on contactless cards5 transactions from locked
Samsung phones. Unfortunately, we were unable to acquire
readers that support the cashback functionality, in order to
test this. We hope to be able to try this attack in future.
D. Investigating the IAD
To ﬁnd out how CDCVM was authenticated we carried out
a byte-by-byte comparison of mobile device transactions with
and without CDCVM (transport mode). Looking at Mastercard
we found that the only differences were in the UN, AC,
SDAD, and the IAD. The AIP was the same whether CDCVM
was used or not, always indicating that the device supports
CDCVM,
indicate that device has
performed user authentication. We would expect the UN, AC
and SDAD to be different for each run because they are
designed to be fresh values, therefore this suggests that the
IAD indicates if CDCVM was successfully performed on the
device.
the AIP does not
i.e.,
We tried a MitM attack that
inserted the IAD from a
user authenticated transaction into a transaction with no user
authentication and the transaction was rejected, indicating that
the IAD is authenticated. Mastercard later conﬁrmed to us that
the IAD is included in the AC and this is checked.
For Visa plastic cards, we found that there are multiple
IAD formats used. We saw in our transactions IADs with
“Format 0/1/3”, for example: 065C0A03A00000. The general
description of an IAD is deﬁned in EMV Book 3 [28]. Bytes
5-7 of the IAD are the Card Veriﬁcation Results (CVR), which
indicate whether a second GEN AC was issued, and the type
of AC returned, among other things.
On mobile devices we saw 32 byte IADs starting:
Apple (CDCVM) : 1F4A5732A0000000001003...
Apple (transport) : 1F4A5760A0000000001003...
Google Pay (CDCVM) : 1F434651200000000000000...
Samsung (transport) : 1F436300200000000000000...
Samsung (CDCVM) : 1F434642200000000000000...
While the format of these longer IADs is not public, we
see that the ﬁrst byte of the CVR, highlighted in red, always
reﬂects whether or not CDCVM was used, therefore indicating
to the EMV back-end if CDCVM was used on the device.
During the disclosure process Visa conﬁrmed this, and that
these bytes were in the AC, but that Visa does not check them.
In summary, Mastercard use the IAD to authenticate the
use of CDCVM. From the IAD, Visa could determine if the
transaction was with a device capable of performing CDCVM,
and if CDCVM was used, and these could be authenticated
against the value in the AC, however this check is not currently
performed. If this check was performed then the Visa over the
limit attack against the iPhone would not be possible.
5https://www.moneysavingexpert.com/news/2020/10/
shoppers-to-be-able-to-get-cashback-without-buying-anything-unde
E. Responsible Disclosure
The details of this vulnerability have been discussed with
Apple and Visa. In a meeting with the Apple Pay security
team, they stated that they believed that this was a serious
security issue, but they believe Visa would be responsible
for allowing this IAD-unchecked transaction to go through.
Explicitly, they stated that Visa should identify iPhone transac-
tions, check the CDCVM status in the IAD, and that iPhone
transactions without CDCVM should only be allowed when
the MCC code indicated transit payment.
We suggested restricting transactions to low or zero value,
when Apple Pay is unlocked with the Magic Bytes. Zero value
is in line with the operations/transactions needed by TfL,
which calculates the correct amount to charge travellers at the
end of the day based on all their trips, but Apple stated that
they support transit systems that require non-zero payments,
so they do not want to put any bound on the payment value in
transport mode. Apple did not pay a bug bounty, even though
they advertise $100,000 for bypassing a lock screen, and our
attack bypasses the Apple Pay lock screen.
We have also discussed this attack with Visa, who pointed
out that this attack only affected Apple Pay, and suggested
Apple were best placed to ﬁx the issues. Visa also stated
that back-end anti-fraud checks weregenerally applied, when
needed. So, if this attack was to raise fraud-alerts, they claim,
it would be eventually stopped. That said, we performed our
attack multiple times, on large values, from the same card,
and we were never blocked and ﬂagged for fraud. Until either
Apple or Visa implement a ﬁx, we recommend that iPhone
owners disable transit mode for Visa cards.
F. Comparison with Existing Attacks Over the Limit Attacks
The attack presented by Galloway [7] is used to perform
over the CVM limit transactions without Cardholder Veriﬁca-
tion on plastic cards and involves clearing the CVM bit in the
TTQ – i.e. the reader will believe that no CDCVM is required.