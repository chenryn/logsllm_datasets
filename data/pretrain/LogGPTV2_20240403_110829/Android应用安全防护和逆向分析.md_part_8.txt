查看so文件的全部内容，如下所示：
::: bodypic-c
![](OEBPS/Images/056-2-i.jpg){.calibre172}
:::
::: bodypic-c
![](OEBPS/Images/057-i.jpg){.calibre173}
:::
还有很多命令及用法，这里就不细讲了。
[]{#029.xhtml}
#### 4.3 解析ELF文件 {.bodycontent-title2}
上面介绍了ELF文件格式资料、解析ELF文件的工具，下面就来实际操作一下，用Java代码动手解析一个libhello-jni.so文件。这个libhello-jni.so文件可以下载。
[提示：]{.yanse}libhello-jni.so下载地址：
[http://download.csdn.net/detail/jiangwei0910410003/9204087](http://download.csdn.net/detail/jiangwei0910410003/9204087){.calibre32
.pcalibre}\
###### 1.定义ELF文件中各个结构体内容 {.section-subtitle}
这需要参考elf.h这个头文件的格式，这个文件在Android源码目录中：
::: bodypic-c
![](OEBPS/Images/057-2-i.jpg){.calibre67}
:::
在看elf.h文件中定义的数据结构时，要记得每个字段的占用字节数就可以了。
有了结构定义，下面就来看看如何解析吧。在解析之前需要将so文件读取到byte\[\]中，定义一个数据结构类型：
::: bodypic-c
![](OEBPS/Images/057-3-i.jpg){.calibre174}
:::
###### 2.解析ELF文件的头部信息 {.section-subtitle}
文件的最开始几个字节给出如何解释文件的提示信息。这些信息独立于处理器，也独立于文件中的其余内容。ELF头部信息数据结构如下表示：
::: bodypic-c
![](OEBPS/Images/057-4-i.jpg){.calibre175}
:::
::: bodypic-c
![](OEBPS/Images/058-i.jpg){.calibre176}
:::
这里介绍几个重要的字段，后面修改so文件的时候也会用到：
·e_phoff：是程序头（Program
Header）内容在整个文件的偏移值，可以用这个偏移值来定位程序头的开始位置，用于解析程序头信息。
·e_shoff：是段头（Section
Header）内容在这个文件的偏移值，可以用这个偏移值来定位段头的开始位置，用于解析段头信息。
·e_phnum：是程序头的个数。
·e_shnum：是段头的个数。
·e_shstrndx：是String段在整个段列表中的索引值，用于后面定位String段的位置。
参照图4-1可以很容易解析下面代码：
::: bodypic-c
![](OEBPS/Images/058-2-i.jpg){.calibre177}
:::
按照对应的每个字段的字节个数，读取字节就可以了。
###### 3.解析段头信息 {.section-subtitle}
每个段头部可以用如下数据结构描述：
::: bodypic-c
![](OEBPS/Images/059-i.jpg){.calibre178}
:::
这个结构中字段就不做解释了。后面会手动构造这样一个数据结构，到时候再详细说明每个字段含义。
按照这个结构，解析也简单了：
::: bodypic-c
![](OEBPS/Images/059-2-i.jpg){.calibre179}
:::
这里需要注意的是，看到的SectionHeader一般都是多个的，所以这里用一个List集合来保存。
###### 4.解析程序头信息 {.section-subtitle}
可执行文件或者共享目标文件的程序头部是一个结构数组，每个结构描述了一个段或者系统准备程序执行所必需的其他信息。目标文件的"段"包含一个或者多个"节区"，也就是"段内容"（Segment
Contents）。程序头部仅对可执行文件和共享目标文件有意义。可执行目标文件在ELF头部的e_phentsize和e_phnum成员中给出其自身程序头部的大小。
程序头部的数据结构如下：
::: bodypic-c
![](OEBPS/Images/060-i.jpg){.calibre180}
:::
按照这个结构来进行解析，如下所示：
::: bodypic-c
![](OEBPS/Images/060-2-i.jpg){.calibre181}
:::
当然还有其他结构的解析工作，这里就不一一介绍了，因为这些结构在后面的介绍中不会用到，这里只需了解一下。
[]{#030.xhtml}
#### 4.4 验证解析结果 {.bodycontent-title2}
解析工作做完了，为了验证解析工作是否正确，需要给每个结构定义打印函数，也就是重写toString方法即可，如下所示：
::: bodypic-c
![](OEBPS/Images/061-i.jpg){.calibre182}
:::
然后再使用readelf工具来查看so文件的各个结构内容，对比就可以知道解析是否成功了。
[提示：]{.yanse}解析代码下载地址：[https://github.com/fourbrother/parse_androidso](https://github.com/fourbrother/parse_androidso){.calibre32
.pcalibre}
[]{#031.xhtml}
#### 4.5 本章小结 {.bodycontent-title2}
本章主要介绍了Android中的so文件格式解析内容，了解so文件格式，对应用安全防护和逆向应用都有很重要的意义。比如，现在为了应用的安全，可以对so文件进行加密操作，这就需要对so文件格式有非常深入的了解；在逆向应用的时候，碰到so加固混淆时，可以分析so文件格式来确定哪一块数据结构被加密和防护了，从而更深入地分析问题和解决问题。
[]{#032.xhtml}
### 第5章 AndroidManifest.xml文件格式解析 {.bodycontent-title4}
本章介绍Android的AndroidManifest.xml文件格式的内容。为什么要介绍这个内容呢？在应用安全防护中，可以利用对应用的AndroidManifest.xml文件做混淆，从而达到安全防护功能，同时在做逆向分析的时候，为了能够反编译成功，有时候必须要了解AndroidManifest.xml文件格式，需要进行文件修复才可行。
[]{#033.xhtml}
#### 5.1 格式分析 {.bodycontent-title2}
首先来脑补一个知识点，Android中的apk程序其实就是一个压缩包，可以用压缩软件进行解压的，如图5-1所示。
::: bodypic-c
![](OEBPS/Images/5a1-i.jpg){.calibre183}
:::
图5-1 apk压缩包
可以看到这里有三个文件：AndroidManifest.xml、classes.dex、resources.arsc，这三个文件都非常重要，本章介绍第一个文件，后续两章分析后两个文件。
只要反编译过apk的人都知道apktool工具的工作原理就是解析这三个文件格式。因为Android在编译成apk之后，这个文件有自己的格式，用普通文本格式打开的话是乱码，所以需要解析成能看懂的内容。就像前一章解析so文件一样。
既然编译成apk之后格式变了，那么就说明谷歌给AndroidManifest定义了一种文件格式，只要知道这种格式的话，就可以详细地解析这个文件了，如图5-2所示。
这张图详细解析了AndroidManifest.xml文件的格式，但是光看这张图可能印象不深，所以要结合一个案例来解析一个文件，才能理解透彻。下面就用一个案例来解析一下吧。
随便找一个简单的apk，用压缩文件打开，解压出AndroidManifest.xml就可以了，然后开始读取内容进行解析。
::: bodypic-c
![](OEBPS/Images/5a2-i.jpg){.calibre184}
:::
图5-2 Android Mainfest.xml文件格式（见书后彩图）
[]{#034.xhtml}
#### 5.2 格式解析 {.bodycontent-title2}
通过前一节的格式分析，大致知道了编译之后的AndroidManifest.xml文件格式，本节通过代码案例来详细解析文件中的各个模块。
##### 5.2.1 解析头部信息 {.bodycontent-title3}
任何一个文件格式都会有头部信息，而且头部信息也很重要，同时，头部一般都有固定格式头部信息还有以下这些字段信息：
1）文件魔数：四个字节。
2）文件大小：四个字节。
下面就开始解析所有的字段Chunk内容了，其实每个Chunk的内容都有一个相似点，就是头部信息：ChunkType（四个字节）和ChunkSize（四个字节）。
##### 5.2.2 解析String Chunk {.bodycontent-title3}
String
Chunk主要用于存放AndroidManifest文件中所有的字符串信息，如图5-3所示。
说明如下：
·ChunkType：StringChunk的类型，固定四个字节：0x001C0001。
·ChunkSize：StringChunk的大小，四个字节。
·StringCount：StringChunk中字符串的个数，四个字节。
·StyleCount：StringChunk中样式的个数，四个字节，但是在实际解析过程中，这个值一直是0x00000000。
·Unknown：位置区域，四个字节，在解析的过程中，这里需要略过四个字节。
·StringPoolOffset：字符串池的偏移值，四个字节，这个偏移值是相对于StringChunk的头部位置。
·StylePoolOffset：样式池的偏移值，四个字节，这里没有Style，所以这个字段可忽略。
·StringOffsets：每个字符串的偏移值，它的大小应该是StringCount\*4个字节。
·SytleOffsets：每个样式的偏移值，它的大小应该是SytleCount\*4个字节。
后面就是字符串内容和样式内容了。
::: bodypic-c
![](OEBPS/Images/5a3-i.jpg){.calibre185}
:::
图5-3 String Chunk结构\
下面介绍代码，由于代码的篇幅有点长，所以这里分段说明。后面会给出整个项目代码下载地址的。
1）首先需要把AndroidManifest.xml文件读入到一个byte数组中：
::: bodypic-c
![](OEBPS/Images/064-i.jpg){.calibre186}
:::
2）下面来解析头部信息：
::: bodypic-c
![](OEBPS/Images/064-2-i.jpg){.calibre187}
:::
::: bodypic-c
![](OEBPS/Images/065-i.jpg){.calibre188}
:::
按照上面说的格式解析即可：
::: bodypic-c
![](OEBPS/Images/065-2-i.jpg){.calibre189}
:::
3）解析StringChunk信息：
::: bodypic-c
![](OEBPS/Images/065-3-i.jpg){.calibre190}
:::
::: bodypic-c
![](OEBPS/Images/066-i.jpg){.calibre191}
:::
这里需要解释几点：
1）在上面的格式说明中，有一个Unknow字段，四个字节，所以需要略过。
2）在解析字符串内容的时候，字符串内容的结束符是0x0000。
3）每个字符串开始的前两个字节是字符串的长度。
有了每个字符串的偏移值和大小，那么解析字符串内容就简单了，如下所示：
::: bodypic-c
![](OEBPS/Images/066-2-i.jpg){.calibre192}
:::
可以看到0x000B（高位和低位相反）就是字符串的大小，结尾是0x0000：
::: bodypic-c
![](OEBPS/Images/066-3-i.jpg){.calibre193}
:::
::: bodypic-c
![](OEBPS/Images/067-i.jpg){.calibre194}
:::
一个字符对应的是两个字节，而且这里有一个方法：
::: bodypic-c
![](OEBPS/Images/067-2-i.jpg){.calibre195}
:::
逻辑就是过滤空字符串：在C语言中是NULL，在Java语言中就是00，如果不过滤的话，会出现下面的这种情况：
::: bodypic-c
![](OEBPS/Images/067-3-i.jpg){.calibre196}
:::
每个字符是宽字符，很难看，其原因是每个字符后面多了一个00，所以过滤之后就可以了，如下所示：
::: bodypic-c
![](OEBPS/Images/067-4-i.jpg){.calibre197}
:::
::: bodypic-c
![](OEBPS/Images/068-i.jpg){.calibre198}
:::
上面解析了AndroidManifest.xml中所有的字符串内容。这里需要用一个全局的字符列表来存储这些字符串的值，后面会用索引来获取这些字符串的值。