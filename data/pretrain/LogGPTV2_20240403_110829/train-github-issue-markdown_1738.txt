Hi,
For my project I need to load/unload various models avoiding main JS thread to
get blocked (models are a little heavy in MB) So I tried this approach:
**Worker code**
    importScripts( "lib/dev.three.js/build/Three.js" );
    function privateComponentLoaded( geometry ) {
        postMessage( geometry );
        self.close();
    }
    self.onmessage = function(event) {
        var componentLoader = new THREE.JSONLoader();
        componentLoader.load( event.data, self.privateComponentLoaded );
    };
**Main code**
    var _self = this;
    var worker = new Worker( "ComponentLoaderWorker.js" );
     worker.onmessage = function(event) {
        _self.createComponent( event.data );
      };
    worker.onerror = function(error) { console.error( "Worker error: Error al cargar" ) };
    worker.postMessage( myURL );
    this.createComponent = function ( geometry ) {
        myMesh = new THREE.Mesh( geometry, new THREE.MeshFaceMaterial() );
        myObj.add( myMesh );
    };
**Error given by chrome for previous code**
`Uncaught TypeError: Object has no method 'computeBoundingSphere'
Three.js:133`
I checked that line and what crashed was this:
`this.geometry.computeBoundingSphere()`
So I came up to the conclusion that geometry was not a ThreeJS geometry due to
JSON communication parsing from Worker to main thread.
So I think Worker support has to be implemented inside JSONLoader directly.
However, maybe the geometry can be recovered somehow or maybe I'm missing
something important.
**What I think needs to be done**
The worker has to just do the `XMLHttpRequest` Then, the main thread has to
call createModel so geometry object gets created. What do you think?
I think if we also put the createModel function inside worker we will come to
the same problem I have here (although it could be desirable to have this
inside worker too in the name of performance for main thread)
I think I can try to do this changes in JSONLoader.