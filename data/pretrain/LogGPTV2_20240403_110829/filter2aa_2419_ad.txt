dec!edx!
add!eax,!edx!
pop!edx!
add!eax,!ecx!!
1!
2!
3!
4!
如何逆向混淆代码，从阶段4回到阶段1?  J 
DEF"CON"CHINA"1.0"(2019)"
47"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  METASM 作为反汇编器器，汇编器器，调试器器，编译器器和链接器器。  
ü  主要特点:  
ü  Ruby语⾔言编写 
ü  C编译器器和反编译器器 
ü  ⾃自动回溯 
ü  实时流程操作 
ü  ⽀支持以下架构： 
ü  Intel IA32 (16/32/64 bits) 
ü  PPC 
ü  MIPS 
ü  ⽀支持以下⽂文件格式: 
ü  MZ and PE/COFF 
ü  ELF 
ü  Mach-O 
ü  Raw (shellcode) 
ü  root@kali:~/programs# git clone https://github.com/jjyg/metasm.git 
ü  root@kali:~/programs# cd metasm/ 
ü  root@kali:~/programs/metasm# make 
ü  root@kali:~/programs/metasm# make all 
ü 将以下行包含到.bashrc文件中，以指示Metasm⽬目录安装: 
ü export RUBYLIB=$RUBYLIB:~/programs/metasm 
DEF"CON"CHINA"1.0"(2019)"
48"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
插⼊入这条指令是为了了使eax寄存器器的
计算更更容易易. J 
v  based on metasm.rb file 
and Bruce Dang code. 
DEF"CON"CHINA"1.0"(2019)"
49"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
从start开始初始化和反汇
编代码。 
列出汇编代码。 
确定从那里返回的最后一条指令是
什么。J  
初始化回溯引擎.  
DEF"CON"CHINA"1.0"(2019)"
50"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
从上一条指令回溯。 
只显示有效的指令，这真的可以改
变最终的结果。 
记录回溯指令的序
列列。 
DEF"CON"CHINA"1.0"(2019)"
51"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
记住:这是混淆代码。!J!
DEF"CON"CHINA"1.0"(2019)"
52"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
53"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
Game!over.!
J
DEF"CON"CHINA"1.0"(2019)"
54"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
输出来⾃自"backtracing_log.select"命令"(在逆
向中)"
DEF"CON"CHINA"1.0"(2019)"
55"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  仿真始终是解决实际逆向⼯工程问题的⼀一种优秀⽅方法，幸运的是，我们有uEmu，还
可以使⽤用Keystone Engine 汇编器器和Capstone Engine 反汇编器器。 J 
ü  Keystone Engine的作用是汇编和:  
ü  支持x86、Mips、Arm等多种架构。 
ü  它是用C/ C++实现的，并绑定到Python、Ruby、Powershell和C#(以及其他语⾔言)。 
ü  安装Keystone： 
ü  root@kali:~/Desktop# wget https://github.com/keystone-engine/keystone/archive/0.9.1.tar.gz 
ü  root@kali:~/programs# cp /root/Desktop/keystone-0.9.1.tar.gz . 
ü  root@kali:~/programs# tar -zxvf keystone-0.9.1.tar.gz  
ü  root@kali:~/programs/keystone-0.9.1# apt-get install cmake 
ü  root@kali:~/programs/keystone-0.9.1# mkdir build ; cd build 
ü  root@kali:~/programs/keystone-0.9.1/build# apt-get install time 
ü  root@kali:~/programs/keystone-0.9.1/build# ../make-share.sh 
ü  root@kali:~/programs/keystone-0.9.1/build# make install 
ü  root@kali:~/programs/keystone-0.9.1/build# ldconfig 
ü  root@kali:~/programs/keystone-0.9.1/build# tail -3 /root/.bashrc  
ü  export PATH=$PATH:/root/programs/phantomjs-2.1.1-linux-x86_64/bin:/usr/local/bin/kstool 
ü  export RUBYLIB=$RUBYLIB:~/programs/metasm 
ü  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib 
DEF"CON"CHINA"1.0"(2019)"
56"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
来⾃自原始模糊代码的指
令 
创建⼀一个 keystone 引擎 
使用keystone引擎汇编我
们的指令。 
释放内存，关闭
引擎.  
DEF"CON"CHINA"1.0"(2019)"
57"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
58"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
安装 Capstone:  apt-get install libcapstone3 libcapstone-dev   J 
DEF"CON"CHINA"1.0"(2019)"
59"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
OCapstone反汇编的原始代
码.!J!
DEF"CON"CHINA"1.0"(2019)"
60"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
IDA!Pro确认了了我们的
反汇编任务.!J!
DEF"CON"CHINA"1.0"(2019)"
61"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  # git clone https://github.com/unicorn-engine/unicorn.git 
ü  # cd unicorn ; ./make.sh  
ü  # ./make.sh install 
DEF"CON"CHINA"1.0"(2019)"
62"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
63"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
64"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
65"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
66"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
67"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
68"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
在运行uEmu之
前进⾏行行设置 
这个结果确定我们之前的结论 
ü  下载uEmu 从 https://github.com/alexhude/uEmu 
ü  安装Unicorn: pip install unicorn. 
ü  在IDA中加载 uEmu 使⽤用 ALT+F7 热键.  
ü  右键单击 代码并选择uEmu⼦子菜单。 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
"MIASM 
DEF"CON"CHINA"1.0"(2019)"
69"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
70"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  MIASM是逆向⼯工程中最令⼈人印象深刻的框架之⼀一，它能够分析、生成和修改⼏几种不不
同类型的程序。  
ü  MIASM支持从ARM、x86、MIPS等不不同平台汇编和反汇编程序，还可以使⽤用JIT进⾏行行仿
真。 
ü  因此, MIASM 是最出⾊色的对抗混淆的⼯工具.  
ü  安装 MIASM:  
ü  git clone https://github.com/serpilliere/elfesteem.git elfesteem 
ü  cd elfesteem/ 
ü  python setup.py build 
ü  python setup.py install 
ü  apt-get install clang 
ü  apt-get remove libtcc-dev 
ü  apt-get install llvm 
ü  cd .. 
ü  git clone http://repo.or.cz/tinycc.git 
ü  cd tinycc/ 
ü  git checkout release_0_9_26 
ü  ./configure --disable-static 
ü  make 
ü  make install 
DEF"CON"CHINA"1.0"(2019)"
71"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  pip install llvmlite 
ü  apt-get install z3 
ü  apt-get install python-pycparser 
ü  git clone https://github.com/cea-sec/miasm.git 
ü  root@kali:~/programs/miasm# python setup.py build 
ü  root@kali:~/programs/miasm# python setup.py install 
ü  root@kali:~/programs/miasm/test# python test_all.py 
ü  apt-get install graphviz 
ü  apt-get install xdot 
ü  (testing MIASM) root@kali:~/programs# python /root/programs/miasm/example/disasm/
full.py -m x86_32 /root/programs/shellcode 
INFO : Load binary 
INFO : ok 
INFO : import machine... 
INFO : ok 
INFO : func ok 0000000000001070 (0) 
INFO : generate graph file 
INFO : generate intervals 
[0x1070 0x10A2] 
INFO : total lines 0 
ü  (testing MIASM) xdot graph_execflow.dot 
DEF"CON"CHINA"1.0"(2019)"
72"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
73"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
打开我们的⽂文件。容器器向反汇编引擎
提供字节源。 
使用x86 32位体系结构实例例化组装引
擎。 
从开始运⾏行行递归的横向反汇
编。 
⽣生成点图。 
将“llvm”设置为Jit引擎进⾏行行仿
真并初始化堆栈。  
设置虚拟启动地址、寄存
器器值和内存保护。  
在最后⼀一⾏行行代码中添
加断点。 
运⾏行行仿真 
DEF"CON"CHINA"1.0"(2019)"
74"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
反汇编我们的代码(再⼀一次) J 
DEF"CON"CHINA"1.0"(2019)"
75"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
76"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"