title:On the responsiveness of DNS-based network control
author:Jeffrey Pang and
Aditya Akella and
Anees Shaikh and
Balachander Krishnamurthy and
Srinivasan Seshan
On the Responsiveness of DNS-based Network Control
Jeffrey Pang(cid:3), Aditya Akella(cid:3), Anees Shaikhy, Balachander Krishnamurthyz, Srinivasan Seshan(cid:3)
(cid:3)Computer Science Department
Carnegie Mellon University
Pittsburgh, PA 15213-3891
fjeffpang,aditya,srini+PI:EMAIL
yNetwork Software and Services
IBM T.J. Watson Research Center Florham Park, NJ 07932-0971
zAT&T Labs – Research
PI:EMAIL
Hawthorne, NY 10532-2134
PI:EMAIL
ABSTRACT
For the last few years, large Web content providers interested in im-
proving their scalability and availability have increasingly turned
to three techniques: mirroring, content distribution, and ISP multi-
homing. The Domain Name System (DNS) has gained a prominent
role in the way each of these techniques directs client requests to
achieve the goals of scalability and availability. The DNS is thought
to offer the transparent and agile control necessary to react quickly
to ISP link failures or phenomenon such as ﬂash crowds.
In this paper, we investigate this assumption with the objective
of quantifying the degree of responsiveness that can be expected
from DNS. We use a combination of Web and DNS access mea-
surements from several busy Web sites, as well as a large content
distribution network, to characterize the behavior of end-systems
and local DNS servers in terms of their adherence to DNS-based
controls. Our results suggest that DNS is at best a coarse-grained
mechanism, and poorly suited for applications, such as route con-
trol, which require quick response to link failures or performance
degradations. We then propose several proactive techniques that,
when deployed in cooperation between large content providers and
important clients, have the potential to improve the responsiveness
of DNS-based control.
Categories and Subject Descriptors: C.2.2 [Computer Systems
Organization]: Computer-Communication Networks–Network Pro-
tocols
General Terms: Measurement
Keywords: DNS, time-to-live, network control
1.
INTRODUCTION
With the growing popularity of Internet services and applica-
tions, large content and service providers have turned to a number
of distribution techniques to improve their scalability, availability,
and performance. For example, in the face of an ever-increasing
request rate, some popular Web sites deliver their content via re-
dundant mirror sites, or by outsourcing delivery to alternate servers
in a content distribution network (CDN). Many large data centers
and enterprises also rely on multihomed connectivity, coupled with
intelligent route control, to improve resilience to network or link
failures while optimizing performance and bandwidth costs.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’04, October 25–27, 2004, Taormina, Sicily, Italy.
Copyright 2004 ACM 1-58113-821-0/04/0010 ...$5.00.
A common requirement in each of these approaches is the need
for tighter network control over client access to the application. For
example, in a CDN or mirrored site deployment, clients must be
directed to servers that are available and offer good response time.
Similarly, when employing route control with multiple ISP connec-
tions, directing packets over the correct provider link is crucial to
extract the performance and reliability beneﬁts of multihoming.
Over the last few years, the Domain Name System (DNS) [1]
has emerged as a common approach for this type of network con-
trol. The appeal of DNS-based techniques arises from its ubiquity
and transparency. By leveraging the DNS, content providers can
provide a “late binding” that controls which IP address is returned
to the client during the name resolution operation. This returned
IP address, in turn, determines which server is contacted, or which
ISP is used. Inherent in this approach is the assumption that DNS-
based control responds quickly enough to unexpected conditions,
such as link failures, ﬂash crowds [5], or increased congestion.
Responses to name resolution requests have an associated time-
to-live (TTL) value that determines how long the response should
be cached by the client’s local nameserver. Setting the TTL to a
very small value (e.g., 10 seconds or even zero) forces clients to
resolve the IP address frequently, thus providing fast response. In
practice, however, this is complicated by the behavior of the wide
variety of applications and DNS servers deployed in the Internet.
Many applications perform their own internal DNS caching that
does not adhere to the expected behavior, and some implementa-
tions of local DNS server (LDNS) software have been reported to
not adhere to the speciﬁed DNS TTLs [11]. This would imply that
clients behind those LDNSes will continue to connect via the failed
link, or access the more loaded mirror site.
In this paper, we consider the degree of responsiveness that can
be expected from DNS-based network control in practice. We base
our analysis on empirical observations of client access behavior
for several large Web sites hosting major sports events, as well as
requests from a wide variety of LDNSes contacting authoritative
DNS servers in a large CDN. Our results show that, while a major-
ity of clients and LDNSes honor DNS TTLs, a signiﬁcant fraction
does not (up to 47% of clients and LDNSes collectively, and 14% of
LDNSes in our measurements). Moreover, those that violate TTLs
do so by a large amount, in excess of 2 hours.
Our ﬁndings suggest a need for mechanisms to improve DNS
responsiveness, since we expect Internet services and applications
to continue to rely on DNS for network control, in addition to its
traditional distributed database function. Hence, we propose sev-
eral architectural techniques to increase DNS agility that are most
useful for deployment by performance- or availability-sensitive ap-
plication providers in cooperation with speciﬁc users.
Previous work has addressed other issues with DNS-based con-
trol, focusing on the context of server selection in CDNs. Some
examples include: the impact of small TTLs on response time [12];
the effect of DNS lookups on overall client-perceived response time [9];
the question of accuracy due to the proximity of clients and their
LDNSes [10, 12]; and the effects on DNS cache hit rates [6] from
small TTLs. Our contribution is the measurement and quantiﬁca-
tion of the level of responsiveness offered by the DNS. We view this
as an important issue, given the continued growth in the number of
services and vendor products using DNS as a control mechanism.
In the next section we provide a brief overview of some of the
related research on DNS. Section 3 follows with a description of
our measurement data collection methodology.
In Section 4 we
present our observations and analysis, and follow with proposals
for improving the responsiveness of DNS-based control in Sec-
tion 5. Section 6 summarizes the paper.
2. RELATED WORK
There has been considerable work in the DNS arena ranging
from exhaustive characterization on a local and wide-area level to
examinations of (mis)use of DNS for speciﬁc applications. Traf-
ﬁc to the root DNS servers, especially unnecessary trafﬁc [14], has
also been characterized. The CAIDA team has examined the im-
pact of DNS caching software [15] on load at upper levels of DNS
hierarchy. In [6], the authors collect local area traces of DNS and
application trafﬁc to characterize DNS performance and caching
behavior. Proposed modiﬁcations to DNS to improve Web perfor-
mance include piggybacking HTTP responses in DNS replies [7],
and having LDNSes renew cache entries proactively [2].
The notion of leases arose in the context of Web cache coherency
to reduce staleness in caches. Recent work on adaptive leases [3]
discusses ways by which caches can avoid having to constantly poll
to reduce risk of staleness primarily by promising to ﬂush cached
objects upon lease expiry or when proactively notiﬁed by the origin
server. We draw upon this idea to examine ways by which Web
content owner or a CDN can notify cooperating LDNS to ﬂush their
caches.
3. DATA COLLECTION METHODOLOGY
In order to measure the responsiveness of DNS-based control,
we should ideally observe how clients respond to DNS changes that
update the name-to-address mapping (i.e., A records) for a particu-
lar domain). This requires, for example, access to application logs
at various servers to track the access patterns of clients, along with
information about the timing of DNS updates. This would allow
us to measure how quickly clients respond to DNS changes. The
challenge is to identify data sources from which both DNS update
logs and application logs are available, and also where DNS entries
are updated often enough to collect a reasonable set of observations
of how clients react to the DNS.
Since it is difﬁcult to obtain such coordinated data, we use ob-
servations of speciﬁc behavior from several different data sets to
collectively infer DNS responsiveness. In particular, we focus on
client and LDNS behavior in terms of adherence to DNS TTLs.
Our approach is to identify the frequency with which clients and
LDNSes use cached DNS records beyond their speciﬁed TTL to
access an application or another DNS server. We refer to this be-
havior as TTL violations. If violations are widespread, we can infer
that DNS techniques for network control are not well-suited for sit-
uations that require fast response. On the other hand, if the number
of violations is small, it suggests that DNS-based control can in-
deed provide good responsiveness.
Below, we describe the characteristics of our measurement data
sets, and how we use them in the analysis.
3.1 Observations from large Web events
Our ﬁrst data set consists of cache logs from a distributed host-
ing infrastructure that serves content for a number of Web sites. We
collected logs from three large sporting events with worldwide au-
diences that were held in April, June, and July, 2003 and hosted on
this infrastructure. During each event, when the request rate was
very high, the authoritative name servers directed all clients to the
set of distributed caches with a 10 minute TTL. At the conclusion
of each event, they were “archived” by updating the name servers
to direct clients to lower capacity origin servers. We combine the
cache access logs with an administrator log containing timestamps
indicating when updates to the DNS are made to archive each event.
After combining the access logs from all cache sites, we ex-
tracted a roughly 2-day long segment for each event near the time at
which the corresponding DNS update took place. Ideally, all traf-
ﬁc to the caches should subside 10 minutes (i.e., the TTL period)
after the DNS update to archive the event. In our analysis we focus
on client requests that continue to arrive at the cache sites after the
DNS is updated and the TTL expires. We count these requests as
TTL violations, and further classify them according to how long
beyond the TTL expiry they arrive at the caches, and the network
location of the clients that originate such requests. We also allow a
30 second “grace time” after the DNS update log timestamp to ac-
count for any delay in updating the DNS, though we believe this is
quite conservative. As a result, we may underestimate the number
of violations. Note that since we can only view client requests, we
cannot distinguish between violations caused by client applications
and those caused by noncompliant LDNS servers. Also, our data
for each event extends approximately a day after the TTL expira-
tion, thus we cannot count violations beyond one day.
3.2 LDNS behavior in a large CDN
The second data set consists of measurements from servers be-
longing to the Akamai CDN. The CDN employs a two-level name-
server hierarchy to achieve ﬁne-grained client redirection and load
balancing. By analyzing this data set, we aim to characterize the ef-
fectiveness of DNS referrals, and adherence to TTLs on NS records,
both of which are crucial parts of a DNS-based network control in-
frastructure.
In this data set, we ﬁrst collect DNS request logs (containing A
requests) at the “high-level” name servers of the CDN for the du-
ration of a day. These logs contain the IP address of the requesting
LDNS server, along with a summary of the request made (e.g., the
requested domain name, timestamp, etc.). In response to these re-
quests from the client LDNS , the high-level name servers return a
referral, typically a list of NS records for “low-level” CDN name
servers, which are deemed to be close to the requesting LDNS
servers. The LDNS server then sends its request to one of these
low-level servers (typically the ﬁrst on the list). These NS records
could each have different TTLs, typically, they are 30, 45, or 60
minutes.
We pick a random sample of 100,000 LDNS IP addresses appear-
ing in the high-level request logs, out of a total of approximately 1.2
million (about 8%). For each LDNS IP from the 100,000 chosen,
we track the DNS requests it makes, if any, at the low-level name
servers returned to it by the high-level servers. We only tracked
64,611 of the 100,000 since the others did not appear in the low
level request logs within the time window we tracked. In the ideal
case, after the TTL on the low-level record expires, the LDNS must
make a fresh request to the high-level server. Therefore, we check
150 k
125 k
100 k
75 k
50 k
25 k
e
m
u
l
o
v
t
s
e
u
q
e
r
l
a
t
o
T
06-09 00:00
06-09 03:00
0 
07-06 12:00 07-06 18:00 07-07 00:00 07-07 06:00 07-07 12:00 07-07 18:00 07-08 00:00
Date / time
06-08 18:00
06-08 21:00
Date / time
25000
22500
20000
17500
15000
12500
10000
7500
5000
2500
e
m
u
l
o
v
t
s
e
u
q
e
r
l
a
t
o
T
0
07-07 09:00 07-07 09:30 07-07 10:00 07-07 10:30 07-07 11:00 07-07 11:30
Date / time
(c) July 2003
350 k
300 k
250 k
200 k
150 k
100 k
50 k
e
m
u
l
o
v
t
s
e
u
q
e
r
l
a
t
o
T
0 
200 k
175 k
150 k
125 k
100 k
75 k
50 k
25 k
e
m
u
l
o
v
t
s
e
u
q
e
r
l
a
t
o
T
04-13 15:00 04-13 18:00 04-13 21:00 04-14 00:00 04-14 03:00 04-14 06:00 04-14 09:00
Date / time
150000
125000
100000
75000