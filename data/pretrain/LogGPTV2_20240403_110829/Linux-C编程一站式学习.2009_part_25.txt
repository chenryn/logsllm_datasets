---
## Page 211
3.深度优先搜索
分配多少个元素的队列空间呢？跟什么因素有关？
2、本节例子中给队列分配的存储空间是512个元素，
度优先搜索解迷宫问题"不能采用这种方法表示前趋？
1、本节的例子直接在队列元素中加一个指针成员表示前趋，想一想为什么上一节的例12.3“用深
习题 请点评
么。
搜索找到的不一定是最短路径，比较本节和上一节程序的运行结果可以看出这一点，想一想为什
了广度优先的特点。广度优先搜索还有一
示这个前线，
广度优先是一种步步为营的策略，
如下图所示。
流往前走一步，这称为广度优先搜索（BFS，Breadth First Search）。探索迷宫和队列变化的过程
从打印的搜索过程可以看出，
图12.4.广度优先搜索
1013
队列中的元素总是由前线的点组成的，
17
11
15
1 2 3 4 56 7
123 45 6
1 2 34 5
12
，这个算法的特点是沿各个方向同时展开搜索，每个可以走通的方向轮
每次都从各个方向探索一步,
全国嵌入式人才培训基地
一个特点是可以找到从起点到终点的最短路径，
起始页
上一级
其实没必要这么多，那么解决这个问题至少要
可见正是队列先进先出的性质使这个算法具有
将前线推进一步,
图中的虚线就表
而深度优先
5.环形队列
下一页
---
## Page 212
5.环形队列请点评
队列的存储空间满了。如下图所示:
从tai1到head之间是空的存储位置
组开头，就像两个人围着操场赛跑,
和每个点的前趋,
利用。在例12.4“用广度优先搜索解迷宫问题"的解法中，出队的元素仍然有用，
比较例12.3“用深度优先搜索解迷宫问题"的栈操作和例12.4“用广度优先搜索解迷宫问题"的队列
，这些元素的存储空间应该回收利用，
L二
页
图12.5.环形队列
但大多数程序并不是这样使用队列的，
， head和taii指针仍然是一直增大的，当指到数组末尾时就自动回到数
富
沿着它们跑的方向看，
虽然前面的元素已经出队了
全国嵌入式人才培训基地
：由此想到把队列改造成环形队列（Circular Queue）：
第12章栈与队列
5.环形队列
从head到tai1之间是队列的有效元素，
一般情况下出队的元素就不再有保存价值
但它所占的存储空间却不能重
栈空间是可以重复利用的，
保存着走过的路径
212
而队
复
贝
---
## Page 213
者"没有路能到达终点"，
1、现在把迷宫问题的要求改一下,
习题请点评
而不需要把路径打印出来。
tail
head
ad
 只要求程序给出最后结论就可以了,
请把例12.4“用广度优先搜索解迷宫问题"改用
回答“有路能到达终点"或
213
---
## Page 214
4.队列与广度优先搜索
上一页
全国嵌入式人才培训基地
起始页
上一级
第13章 本阶段总结
---
## Page 215
2、思维方法与编程思想。
1、C的语法规则。
第13 章 本阶段总结 请点评
点串起来。请从以下几个方面整理和复习。
新知识点的时候都只用到前面章节讲过的知识，
善于学习的人都应该善于总结。本书的编排顺序充分考虑到知识的前后依赖关系，
9．哪些地方必须用常量表达式？哪些地方必须用整数常量表达式?
8．哪些表达式可以做左值？哪些表达式只能做右值？
7．哪些运算符取操作数的左值？哪些运算符的操作数必须是整型？哪些运算符有Side Effect?
5．表达式由哪些语法元素组成？
4．哪些语法元素需要遵循标识符的命名规则?
3．语句有哪几种？
2．函数定义之中可以出现哪些语法元素？
1．源文件中所有函数定义之外可以出现哪些语法元素？
二
·函数式编程，第1节“while语句"
·Least Surprise，第3节“形参和实参"
·组合规则，第5节“表达式”
·以概念为中心，第1节“程序和编程语言"
递归，第3节“递归”
布尔逻辑，第3节“布尔代数"
封装，第 2 节“if/else语句”
充分条件与必要条件，第4节“全局变量、局部变量和作用域”
第13章本阶段总结
全国嵌入式人才培训基地
部分I.C语言入门
但正因为如此，
，很多相互关联的知识点被拆散到多
保证在讲解每个
215
下一页
---
## Page 216
3、调试方法
5.环形队列
一页
·gdb，第10章gdb
·打印语句与Scaffold，
·增量式开发，第2节“增量式开发”
·编译错误、运行时错误与语义错误，
·DbC与Assertion，第6节“折半查找"
·回溯，例12.3“用深度优先搜索解迷宫问题"
·迭代（第6章循环语句）
折半查找，第6节“折半查找”
分而治之，
数据驱动，第5节“多维数组”
抽象，第2节“数据抽象”
第4节“归并排序"
，第2节“增量式开发"
）与增量式求解（第2节“插入排序"
全国嵌入式人才培训基地
，第3节“程序的调试”
起始页
上一级
部分II. C语言本质
216
下一页
---
## Page 217
16.运算符详解
15.数据类型详解
14.计算机中数的表示
帐Ⅲ
部分ⅡI.C语言本质
上一页
2.其它运算符
1.位运算
3.类型转换
2.浮点型
1.整型
4.浮点数
3.整数的加减运算
2.不同进制之间的换算
1.为什么计算机用二进制计数
1.4.异或运算的一些特性
1.2.移位运算
3.5.编译器如何处理类型转换
3.4.强制类型转换
3.3.由赋值产生的类型转换
3.1. Integer Promotion
3.4.有符号数和无符号数
1.1.按位与、或、异或、取反运算
3.3.2'sComplement表示法
3.2.1'sComplement表示法
3.1. Sign and Magnitude表示法
1.3.掩码
全国嵌入式人才培训基地
部分IⅡ. C语言本质
---
## Page 218
20.链接详解
19.汇编与C之间的关系
18.x86汇编程序基础
17.计算机体系结构基础
4.共享库
3.静态库
2.定义和声明
1.多目标文件的链接
6. volatile限定符
5.C内联汇编
4.结构体和联合体
3.变量的存储布局
2. main函数和启动例程
1.函数调用
5. ELF文件
4.寻址方式
3.第二个汇编程序
2.x86的寄存器
 5. Memory Hierarchy
1.最简单的汇编程序
4. MMU
3.设备
2. CPU
1.内存与地址
4.运算符总结
3. Side Effect与Sequence Point
4.3.共享库的命名惯例
4.2.动态链接的过程
4.1.编译、
2.3.定义和声明的详细规则
2.1. extern和static关键字
5.2.可执行文件
5.1.目标文件
2.4.sizeof运算符与typedef类型声明
2.3.逗号运算符
2.1.复合赋值运算符
2
.2.头文件
链接、运行
2.
---
## Page 219
25.C标准库
24.函数接口
23.指针
22. Makefile基础
21.预处理
6.可变参数
4.返回值是指针的情况
2.传入参数与传出参数
1.本章的预备知识
8.函数类型和函数指针类型
6.指向指针的指针与指针数组
2.指针类型的参数和返回值
1.指针的基本概念
5.常用的make命令行选项
4.自动处理头文件的依赖关系
4.其它预处理特性
3.条件预处理指示
2. 宏定义
1.预处理的步骤
5.虚拟内存管理
1.字符串操作函数
6
7
.指向数组的指针与多维数组
不完全类型和复
指针与结构体
隐含规则和模式规则
基本规则
雷
2.4.宏展开的步骤
2.2.内联函数
2.1.函数式宏定义
1.2. malloc与free
#运算符和可变参数
杂声明
2.6
---
## Page 220
27.本阶段总结
26.链表、
第13 章 本阶段总结
页
3.哈希表
2.二叉树
1.链表
4.分配内存的函数
2.标准I/O库函数
.C
.数值字符串转换函数
2.2.排序二叉树
1.4.本节综合练习
1.3.静态链表
1.2.双向链表
1.1.单链表
2.11.本节综合练习
2.10.C标准库的IVO缓冲区
2.9.格式化IO函数
2.8.以记录为单位的IVO函数
2.7.以字符串为单位的IV/O函数
2.6.操作读写位置的函数
2.5.以字节为单位的IO函数
2.1.文件的基本概念
1.7.分割字符串
1.6.搜索字符
1.5.比较字符串
1.4.连接字符串
1.3.拷贝字符串
12.取字符串的长度
叉树和哈希表
1.初始化字符串
二叉树的基本概念
串
全国嵌入式人才培训基地
起始页
第 14章计算机中数的表示
2
---
## Page 221
4.浮点数
3.整数的加减运算
2.不同进制之间的换算
第 14 章计算机中数的表示 请点评
部分Ⅱ. C语言本质
1.为什么计算机用二进制计数
目
上一页
3.4.有符号数和无符号数
3.2.1's Complement表示法
3.1. Sign and Magnitude表示法
贝
第14章计算机中数的表示
全国嵌入式人才培训基地
全国嵌入式人才培训基地
部分Ⅱ. C语言本质
起始页
上一级
1.为什么计算机用二进制计数
2
下一页
---
## Page 222
计算机采用如下的逻辑电路计算两个bit的加法：
变，
个bit能够表示的最大的二进制数是111，也就是十进制的7。不管用哪种计数方式,
以对计算机来说二进制（Binary）是最自然的计数方式。
计算机是用数字电路搭成的，数字电路中只有1和0两种状态.
用的。
制是最自然的计数方式，很多民族的语言文字中都有十个数字，而阿拉伯数字0~9是目前最广泛采
人类的计数方式通常是"逢十进一”，
1.为什么计算机用二进制计数 请点评
上一页
，十进制的1+1等于2，
图 14.1. 1-bit Full Adder
AND
NOR
OR
二进制的1+1等于10，
二进制的1、10、
称为十进制（Decimal）
1.为什么计算机用二进制计数
Inverter
AND
第14章计算机中数的表示
全国嵌入式人才培训基地
11、
100。
cross connect
wire
二进制的10和十进制的2大小是相等的。事实上，
二进制的一
Cout
S
根据“逢二
或者可以说计算机只有两个手指，
一位数字称为-
大概因为人有十个手指，所以十进
二进-
一"的原则
个位（Bit）
十进制
数的大小并没有
三
23
---
## Page 223
如果把与门、或门和反相器组合来实现NAND和NOR运算,
用一句话概括就是：两个操作数相同则结果为0，
真值表如下：
相器（Inverter）实现。
算。AND、OR和NOT运算在第3节“布尔代数"中讲过了
在门电路的输出端输出运算结果的电压值，
有短接在-
接在一起则它们的电压值相同,
同一条导线上在某一时刻的电压值只能是高和低两种状态之-
逻辑电路符号的图例。我们首先解释这些图例，逻辑电路由门电路（Gate）和导线（Wire）组成，
图的上半部分（出自Wikipedia）的电路称为一位全加器（1-bit Full Adder）
00 1
ABANORB
表14.3.NOR的真值表
00 1
ABA NAND B
表14.2.NAND的真值表
101
0o 0 
表14.1.XOR的真值表
0
0
0
0
[1 lo
BA XORB
一起，
0
0
0
只是在画图时无法避免交叉。
 另外几种逻辑运算在这里补充一
在接点处画一
，任何复杂的加减乘除运算都可以分解成简单的逻辑运