### Other Chip Vendors' Mitigation Strategies
Other chip vendors often delegate the mitigation of traditional covert and side-channel attacks to software [56]. They recommend using constant-time code, which can be either manually written or automatically generated [57], in security-sensitive applications.

### Conclusion
We have demonstrated that transient execution attacks can extend beyond individual CPU cores. Using CROSSTALK, we leveraged performance counters to investigate microcode behavior and explore the potential attack surface of complex instructions, whose execution may depend heavily on their operands and context. We further examined the data these instructions leave behind in microarchitectural buffers using MDS (Microarchitectural Data Sampling) attacks. This led to the discovery of a global 'staging buffer' that can be exploited to leak data between CPU cores. 

Our findings reveal that the cryptographically-secure RDRAND and RDSEED instructions on many Intel CPUs can leak their output to attackers via this staging buffer. We have shown that such an attack is not only possible but also practical. Additionally, we found that it is almost trivial to apply these attacks to compromise code running within Intel’s secure SGX enclaves.

Worse still, existing mitigations for transient execution attacks are largely ineffective against these cross-core attacks. Most current mitigations rely on spatial isolation, which is no longer sufficient due to the cross-core nature of these attacks. New microcode updates that lock the entire memory bus for these instructions could mitigate these vulnerabilities, but only if there are no other similar issues yet to be discovered.

### Acknowledgments
We would like to thank our shepherd, Frank Piessens, and the anonymous reviewers for their valuable feedback. We also extend our gratitude to Marius Muench for his assistance with the paper and Stephan van Schaik for his work on RIDL. This research was supported by the European Union’s Horizon 2020 research and innovation program under grant agreements No. 786669 (ReAct) and No. 825377 (UNICORE), by Intel Corporation through the Side Channel Vulnerability ISRA, by the United States Office of Naval Research (ONR) under contract N00014-17-1-2782, and by the Netherlands Organisation for Scientific Research through grants NWO 639.021.753 VENI "PantaRhei" and NWO 016.Veni.192.262. The views expressed in this paper are solely those of the authors, and the funding agencies are not responsible for any use that may be made of the information contained herein.

### Disclosure
In September 2018, we disclosed an initial proof-of-concept (PoC) of staging buffer leaks to Intel, followed by the cross-core RDRAND/RDSEED leakage in July 2019. In response to our reports, Intel rewarded CROSSTALK under the Intel Bug Bounty (Side Channel) Program and attributed the disclosure to our team. Intel requested an embargo until May 2020 (later extended) due to the difficulty of implementing a fix for the identified vulnerabilities.

Intel refers to our attack as "Special Register Buffer Data Sampling" or SRBDS (CVE-2020-0543), classifying it as a domain-bypass transient execution attack [36]. After the disclosure, Intel informed us that the issue had also been independently discovered internally by Rodrigo Branco, Kekai Hu, Gabriel Negreira Barbosa, and Ke Sun.

### References
[References listed here]

### Appendix A: Example Code
The code in Listing 4 demonstrates how to leak a byte from the staging buffer using TAA (Transactional Asynchronous Abort), without SMT (Simultaneous Multithreading). If SMT is available to the attacker, the leaking primitive (in this case, CPUID) can be run in a tight loop on a sibling thread, and the code marked "flush some cache lines" is no longer required (see Section V).

For complete, ready-to-run PoCs (proof-of-concepts), see https://www.vusec.net/projects/crosstalk.

```c
/* reloadbuf, flushbuf, and leak are just mmap()ed buffers */
// Flush the Flush+Reload buffer entries.
for (size_t k = 0; k < 256; ++k) {
    size_t x = ((k * 167) + 13) & (0xff);
    volatile void *p = reloadbuf + x * 1024;
    asm volatile("clflush (%0)\n"::"r"(p));
}

/* Leak primitive; as an example,
* here we use a CPUID leaf. */
asm volatile(
    "movabs $0x80000002, %%rax\n"
    "cpuid\n"
    :::"rax","rbx","rcx","rdx"
);

/* Flush some cache lines
* (until we get the right LFB).*/
for (size_t n = 0; n < 15; ++n)
    asm volatile("clflush (%0)\n"
                 ::"r"(reloadbuf + (n + 256)*0x40));

/* Perform a TAA-based leak */
asm volatile(
    // prepare an abort through cache conflict
    "clflush (%0)\n"
    "sfence\n"
    "clflush (%2)\n"
    // leak inside transaction
    "xbegin 1f\n"
    "movzbq 0x0(%0), %%rax\n"
    "shl $0xa, %%rax\n"
    "movzbq (%%rax, %1), %%rax\n"
    "xend\n"
    "1:\n"
    "mfence\n"
    :
    :"r"(leak+off),
     "r"(reloadbuf),
     "r"(flushbuf)
    :"rax"
);

/* Reload from the flush+reload buffer
* to find the leaked value. */
for (size_t k = 0; k < 256; ++k) {
    size_t x = ((k * 167) + 13) & (0xff);
    unsigned char *p = reloadbuf + (1024 * x);
    uint64_t t0 = rdtscp();
    *(volatile unsigned char *)p;
    uint64_t dt = rdtscp() - t0;
    if (dt < 160) results[x]++;
}
```

**Listing 4: Leaking a value from the staging buffer.**

---

This version of the text is more structured, clear, and professional, with improved readability and coherence.