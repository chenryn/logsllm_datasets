pg93      9615  9614  0 11:17 ?        00:00:00 postgres: logger process            
pg93      9617  9614  0 11:17 ?        00:00:00 postgres: checkpointer process      
pg93      9618  9614  0 11:17 ?        00:00:00 postgres: writer process            
pg93      9619  9614  0 11:17 ?        00:00:00 postgres: wal writer process        
pg93      9620  9614  0 11:17 ?        00:00:00 postgres: autovacuum launcher process     
pg93      9621  9614  0 11:17 ?        00:00:00 postgres: archiver process   last was 0000000100000010000000FB  
pg93      9622  9614  0 11:17 ?        00:00:00 postgres: stats collector process     
pg93      9632  9000 16 11:18 pts/3    00:00:00 pgbench -M prepared -n -r -f ./test.sql -c 1 -T 60 -h /ssd2/pg93/pg_root -p 1921 -U postgres digoal  
pg93      9634  9614 99 11:18 ?        00:00:03 postgres: postgres digoal [local] SELECT  
可以看到, 修改后的脚本, 输出的设备名有意义了, 同一个进程9249, 也就是bench进程, 写了3个块设备的数据. sdb1 sda1 sde1,  
分别是global, table, index所在的块设备. 同意可以看到wal writer进程只写了pg_xlog所在的块设备.  
[root@db-172-16-3-150 io]# stap disktop_digoal.stp   
Fri Nov 15 03:18:36 2013 , Average:4103Kb/sec, Read:    1711Kb, Write:  18808Kb  
     UID      PID     PPID                       CMD   DEVICE    T        BYTES  
     500     9619     9614                  postgres     sdd1    W     16220160  
     500     9634     9614                  postgres     sda1    W      1564672  
     500     9634     9614                  postgres     sdb1    W      1343488  
     500     9634     9614                  postgres     sde1    W       131072  
     500     9634     9614                  postgres     sda1    R      1744896  
     500     9652     9621                        sh     sdc1    R         3620  
     500     9652     9621                      date     sdc1    R         3533  
     500     9652     9621                  postgres     sdc1    R          788  
     500     9615     9614                  postgres     sde1    W           29  
Fri Nov 15 03:18:41 2013 , Average:3780Kb/sec, Read:    1175Kb, Write:  17725Kb  
     UID      PID     PPID                       CMD   DEVICE    T        BYTES  
     500     9619     9614                  postgres     sdd1    W     15204352  
     500     9634     9614                  postgres     sda1    W      1589248  
     500     9634     9614                  postgres     sdb1    W      1220608  
     500     9634     9614                  postgres     sde1    W       131072  
     500     9634     9614                  postgres     sda1    R      1064960  
     502     9653     1670                  postgres     sdd1    R       136419  
     502     1678     1670                  postgres     sdd1    W         5547  
     502     1676     1670                  postgres     sdd1    R         1968  
本文用到的2个probe alias原型.  
/usr/share/systemtap/tapset/vfs.stp  
probe vfs.read.return = kernel.function("vfs_read").return  
{  
        name = "vfs.read"  
        retstr = sprintf("%d", $return)  
        file = $file  
        pos = $pos  
        buf = $buf  
        bytes_to_read = $count  
        dev = __file_dev($file)  
        devname = __find_bdevname(dev, __file_bdev($file))  
        ino = __file_ino($file)  
        ret = $return  
        bytes_read = $return > 0 ? $return : 0  
        error = $return  0 ? $return : 0  
        error = $return f_mode & FMODE_READ))  
                return -EBADF;  
        if (!file->f_op || (!file->f_op->read && !file->f_op->aio_read))  
                return -EINVAL;  
        if (unlikely(!access_ok(VERIFY_WRITE, buf, count)))  
                return -EFAULT;  
        ret = rw_verify_area(READ, file, pos, count);  
        if (ret >= 0) {  
                count = ret;  
                if (file->f_op->read)  
                        ret = file->f_op->read(file, buf, count, pos);  
                else  
                        ret = do_sync_read(file, buf, count, pos);  
                if (ret > 0) {  
                        fsnotify_access(file->f_path.dentry);  
                        add_rchar(current, ret);  
                }  
                inc_syscr(current);  
        }  
        return ret;  
}  
EXPORT_SYMBOL(vfs_read);  
ssize_t vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)  
{  
        ssize_t ret;  
        if (!(file->f_mode & FMODE_WRITE))  
                return -EBADF;  
        if (!file->f_op || (!file->f_op->write && !file->f_op->aio_write))  
                return -EINVAL;  
        if (unlikely(!access_ok(VERIFY_READ, buf, count)))  
                return -EFAULT;  
        ret = rw_verify_area(WRITE, file, pos, count);  
        if (ret >= 0) {  
                count = ret;  
                if (file->f_op->write)  
                        ret = file->f_op->write(file, buf, count, pos);  
                else  
                        ret = do_sync_write(file, buf, count, pos);  
                if (ret > 0) {  
                        fsnotify_modify(file->f_path.dentry);  
                        add_wchar(current, ret);  
                }  
                inc_syscw(current);  
        }  
        return ret;  
}  
EXPORT_SYMBOL(vfs_write);  
```  
## 参考  
1\. https://sourceware.org/systemtap/SystemTap_Beginners_Guide/mainsect-disk.html  
2\. https://sourceware.org/systemtap/examples/  
3\. /usr/share/systemtap/testsuite/systemtap.examples  
4\. systemtap-testsuite  
5\. /usr/share/systemtap/testsuite/systemtap.examples/index.txt  
6\. /usr/share/systemtap/testsuite/systemtap.examples/keyword-index.txt  
7\. /usr/share/systemtap/tapset  
8\. https://sourceware.org/systemtap/tapsets/API-ctime.html  
9\. https://sourceware.org/systemtap/tapsets/API-gettimeofday-s.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")