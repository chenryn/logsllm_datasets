and on the number of HIRB nodes depend on the following
bound on the sum of geometric random variables. This is a
(cid:3)
standard type of result along the lines of Lemma 6 in [11].
1≤i≤n Xi be the sum of n ≥ 1 inde-
Lemma 10. Let X =
pendent random variables Xi, each stochastically dominated
by a geometric distribution over {0, 1, 2, . . .} with expected
value E[Xi] ≤ μ. Then there exists a constant c0 > 0 whose
value depends only on μ such that, for any a ≥ 2 and b ≥ 0,
we have
Pr[X ≥ (μ + 1)(an + b)]  BR
iff
node v∈τ (size of v in ∞-ORAM) ≥ Z|τ| + BR.
Step 3: Size of subtrees. We prove a bound on the total size
of all blocks in any subtree τ in the ∞-ORAM in two steps.
First we bound the number of blocks in the subtree, which
can use the same analysis as the Path ORAM; then we bound
the total size of a given number of variable-length blocks; and,
ﬁnally, we combine these with a union bound argument.
To bound the total number of blocks that occur in τ, because
the block sizes do not matter in the ∞-ORAM, we can
simply recall from [40, Lemma 5] that, for any subtree τ,
the probability that τ contains more than 5|τ| + R/4 blocks
is at most
4|τ| · (0.9332)
1
|τ| · (0.881)
.
(2)
Next we consider the total size of 5|τ|+R/4 variable-length
blocks. From the statement of the theorem, each block size
is stochastically dominated by BX, where B is the expected
block size and X is a geometric random variable with expected
value μ = 1. From Lemma 10, the total size of all 5|τ| + R/4
blocks exceeds 2(a(5|τ| + R/4))B with probability at most
R
exp (−c0a (5|τ| + R/4)) .
From (1), we can take c0 = 1/4, and by setting a = 2 >
(cid:7)
(cid:6)− 5
(4/5) ln 4, the probability that the total size of 5|τ| + R/4
2|τ| − 1
blocks exceeds (20|τ| + R)B is at most exp
,
8 R
which in turn is less than
4|τ| · (0.329)
1
|τ| · (0.883)
R
.
(3)
Finally, by the union bound, the probability that the total
size of all blocks in τ exceeds (20|τ| + R)B is at most the
sum of the probabilities in (2) and (3), which is less than
4|τ| · (0.9332)
2
|τ| · (0.883)
R
.
(4)
Step 4: Stash overﬂow probability. As in [40, Section 5.2],
the number of subtrees of size i is less than 4i, and therefore
by another application of the union bound along with (4), the
probability of any subtree τ having total block size greater
than (20|τ| + R)B is at most
4i · (0.9332)
(cid:8)
i≥1
< 28 · (0.883)
i 2
4
R
.
i · (0.883)
R
C. Proof of Theorem 8
We now utilize Lemma 10 to prove the two lemmata on the
distributions of the number and size of HIRB tree nodes.
Lemma 11. Suppose a HIRB tree with n items has height
H ≥ logβ n, and let X be the total number of nodes in the
HIRB, which is a random variable over the choice of hash
function in initializing the HIRB. Then for any m ≥ 1, we
have
Pr [X ≥ H + 4n + m] < 0.883
m
.
In other words, the number of HIRB nodes in storage at
any given time is O(n) with high probability. The proof is a
fairly standard application of the Hoeffding inequality [41].
196196
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:59 UTC from IEEE Xplore.  Restrictions apply. 
Proof. The HIRB has H nodes initially. Consider the n
items label1, . . . , labeln in the HIRB. Because the tree is
uniquely represented, we can consider the number of nodes
after inserting the items in any particular order.
When inserting an item with labeli into the HIRB, its height
h = chooseheight(labeli) is computed from the label hash,
where 0 ≤ h ≤ H, and then exactly h existing HIRB nodes
are split when labeli is inserted, resulting in exactly h newly
created nodes.
Therefore the total number of nodes in the HIRB after
inserting all n items is exactly H plus the sum of the heights
of all items in the HIRB, which from Assumption 6 is the
sum of n iid geometric random variables, each with expected
value 1/(β − 1). Call this sum Y .
We are interested in bounding the probability that Y exceeds
4n + m. Writing μ = 1/(β− 1) for the expected value of each
r.v., we have μ + 1 = β/(β − 1), which is at most 2 since
β ≥ 1. This means that 4n + m ≥ (μ + 1)(2n + m/2), and
from Lemma 10,
Pr[X ≥ H + 4n + m] = Pr[Y ≥ 4n + m]
≤ Pr[Y ≥ (μ + 1)(2n + m/2)]
< exp(−c0(2n + m/2))
< exp(−c0m/2).
Because μ + 1 ≤ 2, c0 = 1/(2(μ + 1)) ≥ 1/4. Numerical
computation conﬁrms that exp(−1/8) < 0.883, which com-
(cid:2)
pletes the proof.
Along with the bound above on the number of HIRB nodes,
we also need a bound on the size of each node.
Lemma 12. Suppose a HIRB tree with n items has height
H ≥ logβ n, and let X, a random variable over the choice of
hash function, be the size of an arbitrary node in the HIRB.
Then for any m ≥ 1, we have
Pr[X ≥ m · nodesizeβ] < 0.5
m
.
The proof of this lemma works by ﬁrst bounding the
probability that the number of items in any node is at most
mβ and applies the formula for node size, i.e.,
nodesizek =
(k + 1)(2T + γ + 1) + k(|Hash(label)| + |value|).
(5)
Proof. We ﬁrst show that
the probability that any node’s
branching factor is more than mβ is at most 0.5m. This ﬁrst
part requires a special case for the root node, and a general
case for any other node. Then we show that any node with
branching factor at most mβ has size less than m· nodesizeβ.
First consider the items in the root node. These items all
have height H, which according to Assumption 6 occurs for
any given label with probability 1/βH. Therefore the number
of items in the root node follows a binomial distribution with
parameter 1/βH. It is a standard result (for example, Theorem
C.2 in [42]) that a sample from such a distribution is at least
(cid:10)
k with probability at most
1
βHk <
2k−1βHk .
(cid:9)
n
k
nk
From the assumption H ≥ logβ n, nk ≤ βHk, so the bound
−k+1. Setting k = mβ, the probability
above becomes simply 2
that the root node has at least k items and hence branching
−mβ+1, which
factor greater than mβ, is seen to be at most 2
is always at most 2
−m because m ≥ 1 and β ≥ 2..
Next consider any nonempty HIRB tree node at height (cid:2),
and consider a hypothetically inﬁnite list of possible label
hashes from the HIRB which have height at least (cid:2) and could
be in this node. The actual number of items is determined
by the number of those labels whose height is exactly equal
to (cid:2) before we ﬁnd one whose height
least (cid:2) + 1.
From Assumption 6, and the memorylessness property of the
geometric distribution,
these label heights are independent
Bernoulli trials, and each height equals (cid:2) with probability
(β − 1)/β.
Therefore the size of each non-root node is a geometric
random variable over {0, 1, . . .} with parameter 1/β. The
probability that the node contains at least mβ items, and
therefore has banching factor greater than mβ, is exactly
is at
(cid:5)mβ
(cid:4)
β−1
β
< exp(−m) < 0.5
m
.
x )ax < exp(−a) for any x ≥ 1
Here we use the fact that (1− 1
and any real a.
All that remains is to say that a node with branching factor
mβ has size less than m · nodesizeβ, which follows directly
from m ≥ 1 and the deﬁnition of nodesizeβ in (5).
(cid:2)
Finally, we prove the main theorems on the vORAM+HIRB
performance and security.
Proof of Theorem 8. We step through and motivate the
choices of parameters, one by one.
The expected branching factor β must be at least 2 for the
HIRB to work, which means we must always have H ≤ lg n,
and so T = lg(4n + lg n + γ) ≤ lg(4n + H + γ). Then
Lemma 11 guarantees that the number of HIRB nodes is less
than H +4n+γ with probability at least (0.883)γ. This means
that T is an admissible height for the vORAM according to
Theorem 5 with at least that probability.
The choice of β is such that Z ≥ 20 · nodesizeβ, using the
inequality
H ≤ lg n < lg(4n) < T.
Therefore, by Lemma 12, the size of blocks in the HIRB will
be admissible for the vORAM according to Theorem 5.
This allows us to say from the choice of R and Theorem 5
that the probability of stash overﬂow is at most 28 · (0.883)γ.
Choosing H as we do is required to actually apply Lem-
mas 11 and 12 above.
Finally, the probability of two label hashes in the HIRB
−γ. The stated result follows from the
colliding is at most 2
union bound over the three failure probabilities.
197197
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:59 UTC from IEEE Xplore.  Restrictions apply.