γ1 has the maximum number of roles in Γ. Then we create dummy
roles to ﬁll the vacancies of missing roles in each conﬁguration ex-
cept γ1. In this way, we made the conﬁguration set of the tested
instances meet the assumption. We only tested the instances where
|Γ| = 2 and |Γ| = 3.
ple. We ﬁrst obtain two sets: leastR[u] = (cid:84)
mostR[u] =(cid:83)
Here, C also consists of two parts. One is similar to Cran of
previous tests. Take the constraints on user-role relation for exam-
γi∈Γ roleγi [u] and
γi∈Γ roleγi [u]; and then create a pair of constraints
leastR[u]\R1 ⊆ role[u] ⊆ mostR[u] ∪ R2; R1 and R2 are ran-
domly chosen from leastR[u] and R\mostR[u], respectively, such
that |R1| = α− × |leastR[u]| and |R2| = α+ × |mostR[u]|. The
other part is exactly Cman.
When transforming RCP(cid:104)C, Γ(cid:105), the selected conﬁguration γ1 is
chosen randomly from Γ. Table 4 reports the results, when α+ =
1.5, α− = 0.9, and β = 40. Here we set the timeout limit as 1800
seconds. The reported time was averaged over 3 runs. First, the
time was much more demanding than the instances where |Γ| =
1. Second, the performance seemed sensitive to |Γ|; the tests for
|Γ| = 3 were almost 3 times slower than those for |Γ| = 2. When
|Γ| = 3, the programs for AmLa ran out of memory within time
limit.
6. DISCUSSIONS
6.1 The Quality of Solutions
Optimization Objectives.
 0 100 200 300 400 500 600DomEMEAFW1FW2HCareMelbSUSAAPJAmSmAmLaTime (sec)204060Table 4: The computing time in seconds when a solution was found for RCP(cid:104)C, Γ(cid:105). o/m denotes “out-of-memory”.
|Γ| = 1
|Γ| = 2
|Γ| = 3
Dom
2.62
3.17
10.39
EMEA
4.18
5.84
14.53
FW1
6.53
9.44
30.10
FW2
34.17
41.18
132.97
HCare MelbS
2.92
6.75
15.62
3.77
5.37
10.13
USA
36.18
43.94
87.63
APJ
4.12
8.61
28.22
AmSm
30.03
50.62
213.65
AmLa
426.83
812.75
o/m
replaces Π(closeness) with the following statement to search for
solutions in speciﬁed proximity to Γ.
K #count{dif (Asg, Y ) : conﬁg(Y )} K + ∆ .
Solutions thereof may exhibit certain properties that one is after.
6.2 Assumptions
Recall that we made the assumption that R1 = R2 for any
γ1, γ2 ∈ Γ (i.e., AS2) in Section 3.2. That is, all conﬁgurations
in Γ have the same role set. This sometimes appears unreasonable.
We now lift it by pre-processing conﬁgurations in Γ. AS2 entails
two requirements: (1) for each γi ∈ Γ there is a 1-1 mapping Mi
from Ri to a set RNames of role names, and (2) |R1| = |R2|
for any γ1, γ2 ∈ Γ. For conﬁgurations that are designed in guide
of business information analysis or mined in view of role seman-
tics [5, 11, 21], these mappings could be established along with
the setup of conﬁgurations. For conﬁgurations lacking this infor-
mation, we may apply some similarity measurement to roles, such
as the one used in [29, Deﬁnition 3], so that counterpart roles are
mapped to the same name.
Assume that mappings are established for the requirement (1).
For the requirement (2), we assume, without loss of generality,
that γ1 has the largest number of roles. We create dummy roles
for other conﬁgurations to equalize the sizes of their role sets.
Take γ2 for example. We need to add a number |R1| − |R2| of
roles to R2 and extend M2 by mapping dummy roles to names in
RNames\{M2(r) | r ∈ R2}. We may further assume that the
dummy roles are not assigned to any users or permissions.
One drawback of this pre-processing is that a solution γ0 always
has the same number of roles as γ1. From γ2’s viewpoint, it has
to add all its dummy roles. However, the addition of such roles is
not counted in dist(Γ, γ0), thus having no effect on the selection of
solutions.
D =(cid:83)
To mitigate this side-effect, we deﬁne additional rules. Suppose
that a dummy role r of γ2 remains not assigned to any users or
permissions in γ0; then r could be neglected. From γ2’s perspec-
tive, r can be removed as if it were never added. For each con-
ﬁguration γ ∈ Γ, denote the set of γ’s dummy roles as Dγ; let
γ∈Γ Dγ. Deﬁne a mapping d : D (cid:55)→ {1,··· , N − 1} such
that for each r ∈ D, d(r) = |{γ ∈ Γ | r ∈ Dγ}|, where N = |Γ|;
namely, d(r) is the number of conﬁgurations where r is a dummy
role, whereas N − d(r) is the number of conﬁgurations where it
is not. If r remains not assigned to any user or permission in γ0,
it goes against N − d(r) many conﬁgurations; otherwise, it is not
dummy in γ0, and goes against d(r) many conﬁgurations. We min-
imize the number of conﬁgurations that dummy roles go against
in total by the following rules, where dummy(r, v) are facts for
r ∈ D and v = d(r).
assigned (R) ← hold (asg(R, _, _), γ0), dummy(R, _).
#minimize[assigned (R) : dummy(R, V ) = V
not assigned (R) : dummy(R, V ) = N − V ].
Another assumption (AS3) makes R0 ⊆ R. The number of
roles is an important metric of conﬁgurations’ quality. Brieﬂy, the
fewer roles, the better a conﬁguration is [28, 21]. Since conﬁgura-
tions in Γ are either the running one or recommended by RE tools,
they should contain a reasonable number of roles. Therefore, it
is worthwhile to investigate whether a solution is reachable under
this assumption. In contrast, if a solution is allowed to contain new
roles, various other implications remain to be clariﬁed; for exam-
ple, a natural question is how many new roles are enough. Finally,
if no solution exists for an RCP instance, security ofﬁcers may set-
tle for a conﬁguration that violates constraints to a limited extend,
or allow a certain number of new roles. However, this deserves
detailed study and is left for future work.
Role hierarchy.
For simplicity, we omitted role hierarchy in RBAC conﬁgura-
tions. It is not hard to extend the approach to handle it. We need
to augment Π(Γ) with facts about role hierarchy, and Π(γ0) with
rules deﬁning applicable changes to role hierarchy and rules mod-
eling its inheritance and transitivity. However, this encoding of role
hierarchy may result in blowup of problem size. A two-stage ap-
proach is of interest: ﬁrst ﬂatten conﬁgurations and solve RCP,
and then construct role hierarchy. We leave this for future work.
6.3 Expressiveness of Constraints
We concern ourselves mainly with static constraints, instead of
dynamic or historical constraints [1, 7]. We believe this sufﬁces
for RCP. First, RCP instances arise prior to the deployment of
conﬁgurations or when the running conﬁguration fails to meet new
constraints; constraints should capture properties of conﬁgurations’
relations, rather than their run-time behaviors. Second, it has been
argued that certain security policies may be modeled as static con-
straints but not as dynamic ones [17]. This shows the more funda-
mental position of static constraints.
A general sod policy (cid:104)P, k(cid:105) states that no k − 1 or fewer users
together have all permissions in P , where P ⊆ P and 1  2, we need
j=1 perm[uj]) ∩
P| < n to model the sod policy. In this case, C has an exponential
blowup in size. Instead, one may consider encoding the sod policy
in ASP directly; we leave this for future work. However, we believe
sod policies with k = 2 are more common.
(cid:1) many constraints of the form |((cid:83)k−1
by a single constraint |(cid:83)
to put (cid:0) |U|
k−1
7. RELATED WORK
A close related work is [16], which guarantees that no role con-
tains more than a given number of permissions in the discovered
conﬁgurations. For one thing, [16] deals with a special class of the
constraints considered in this work. For another, we support con-
straints in a modular way. In [16], the proposed algorithm accepts
(cid:104)U,P, UPA(cid:105) and constraints as input, and produces a conﬁgura-
tion satisfying the constraints. Rather, our approach is fed with
conﬁguration candidates and constraints.
In general, our approach can be considered as a complement for
existing RE methodologies. It ﬁne-tunes the given set of conﬁgu-
rations in the hope of reaching a conﬁguration in compliance with
constraints. There exists a wealth of literature on RE. The problem
has been approached from different perspectives, e.g., business in-
formation analysis [5, 25], data mining [21, 30], and machine learn-
ing [11]. While these tools work out a conﬁguration optimized in
various ways, there is no guarantee of its consistency with con-
straints. Though Coyne [6] and Shin et al. [25] mention constraints
in passing; their approaches lack technical details of handling con-
straints.
Vaidya et al. [29] study the problem of discovering a optimal
conﬁguration that is similar to a deployed one. First, the similar-
ity measurement only evaluates role-permission assignments. This
measurement is not suitable for RCP, because differences in user-
role and user-permission relations have equal, if not more, impacts
on the acceptability of conﬁgurations. Second, RCP may taken
into account conﬁgurations besides the deployed one. Finally, con-
straint support is not the focus of [29].
Lu et al. [20] propose an approach to constraint-aware role min-
ing problem, which is essentially the original role mining problem
[28] augmented with possible negative authorizations. The neg-
ative authorizations can help identify underlying constraints. An
assumption is made that the user-permission assignments (the in-
put of the problem) imply the information of constraints. This
assumption appears less reasonable in two cases. First, when the
user-permission assignments contain noisy data or errors [10, 22],
the implied constraints may not suit the organization in question.
Second, some constraints may not be embodied by the input. More
speciﬁcally, [20] works with sod policy and exceptions, overlook-
ing constraints of other types.
In contrast, our work avoids the
noisy data issue by relying on other RE tools such as [22] to pro-
duce conﬁguration candidates. Further, we deal with constraints
provided by the organization in question. Since constraints are usu-
ally high-level security and business requirements, we believe that
the organization’s security ofﬁcers are able to propose constraints,
especially when they can inspect the running conﬁguration and/or
the conﬁgurations suggested by RE tools.
Molloy et al. [21] present a roadmap for RE research. Among
others, they mention one valuable problem—to update a deployed
conﬁguration in some optimal and “localized” way. This work
could be viewed as a response to this problem. The closeness re-
quirement limits the deviation of discovered conﬁgurations from
the deployed one. Due to ASP’s richness in modeling, other opti-
mization objectives may be encoded as well.
Sun et al. [27] investigate the problem of assigning permission-
s/roles to users under a variety of constraints, mostly from a compu-
tational complexity perspective. Our language can express all types
of constraints there, except that [27] considers a user-role qualiﬁca-
tion relation. Sun et al. further consider the problem of generating
user-role assignments that are consistent with given constraints and
propose an algorithm. As implied by Theorem 11, [27] differs from
this work in several aspects. First of all, constraints in place are dif-
ferent. Second, [27] puts more emphasis on authorization, and thus
generates user-role assignments. By contrast, this work aims to ﬁnd
an appropriate conﬁguration and consequently considers user-role
relation, role-permission relation, and user-permission relation. To
ensure solutions’ quality, RCP also requires the conﬁguration be
close to the provided ones. There is no such requirement in [27].
Finally, we employ ASP to encode RCP, whereas Sun et al. reduce
the problem to SAT. Though ASP and SAT are closely related, ASP
programs tend to be more understandable.
Constraints in RBAC context are well-studied from different per-
spectives. Some works propose expressive languages for specify-
ing various constraints [1, 7], whereas others put forward effective
enforcement mechanisms for constraints [4, 7]. Neither do we pro-
pose a new language for expressing constraints nor a mechanism to
enforce them. Li et al. [17] study the constraint generation prob-
lem, which is to derive constraints from high-level security poli-
cies and conﬁgurations. In contrast, RCP assumes the existence of
constraints and wants to generate conﬁgurations. An access control
system may face these two problems at different stages.
8. CONCLUSIONS
Constraints, an inherent component of RBAC models, capture
important security and business requirements.
In this paper, we
have formulated the problem of enhancing role engineering with
constraint support (i.e., RCP) and provided an ASP-based solu-
tion framework. The deﬁnition of RCP enables to utilize the huge
body of role engineering tools and to add constraint support in a
modular way. The framework harnesses ASP’s rich modeling lan-
guage to present a concise, declarative representation of RCP. We
have also performed experiments to validate the framework. As for
future work, we plan to consider RCP variants with more expres-
sive constraints such as the resiliency policies [19].
Acknowledgment
We thank the anonymous reviewers for their helpful comments.
This publication was made possible by the support of an NPRP
grant (NPRP 09-079-1-013) from the Qatar National Research
Fund (QNRF). The statements made herein are solely the responsi-
bility of the authors.
9. REFERENCES
[1] G.-J. Ahn and R. Sandhu. Role-based authorization
constraints speciﬁcation. ACM Trans. Inf. Syst. Secur.,
3(4):207–226, 2000.
[2] ANSI. American national standard for information
technology - role based access control. ANSI INCITS