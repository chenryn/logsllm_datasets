**作者：沈沉舟  
公众号：[青衣十三楼飞花堂](https://mp.weixin.qq.com/s/5laQ9uIiYfngvSABzXxvYQ "青衣十三楼飞花堂")**

本文介绍了一种调试IoT设备的方法，该设备基于ARM/Linux架构。通过获取后台root shell和gdb server，我们能够上传全功能的ARM版BusyBox以改善调试环境。在调试过程中，我们发现某个进程（记为some）监听了多个TCP和UDP端口，显然这是设备的主要程序。

### 定位UDP端口处理流程

为了定位UDP端口的处理流程，通常会调用`recvfrom()`函数。分析后发现，`some!recvfrom()`实际上调用了`libuClibc!recvfrom()`。该函数原型如下：

```c
ssize_t recvfrom(
    int sockfd,
    void *buf,
    size_t len,
    int flags,
    struct sockaddr *src_addr,
    socklen_t *addrlen
);
```

#### 在IDA中静态分析

在IDA中静态分析`libuClibc!recvfrom()`时，在其尾部寻找合适位置，确保有寄存器或栈变量对应形参`buf`、`src_addr`及返回值`n`，并确保此时UDP数据已存储在`buf`中。然后在此位置设置条件断点，例如，当源端口等于0x1314且源IP等于特定值时显示读取的报文：

```gdb
b *0xhhhhhhhh
commands $bpnum
    silent
    get_big_endian_2 *(char**)($sp+0x28)+2
    set $sport=$ret
    get_big_endian_4 *(char**)($sp+0x28)+4
    set $src=$ret
    if (($src==0xhhhhhhhh)&&($sport==0x1314))
        set scheduler-locking on
        display
        i r r7 r8 r10 r4
        x/2wx $sp+0x28
        db $r8 $r4
    else
        c
    end
end
```

### 为什么不在入口处设断点？

- **入口处无法知道源IP和源端口**：因此无法设置有效的条件断点。
- **出口处可以获取所需信息**：在出口处设置条件断点更为合适。
- **多调用点问题**：如果直接在`some!recvfrom()`的返回地址处设断点，可能会遇到多个调用点的问题，难以确定哪个调用处理了关心的UDP端口。

### 单线程与多线程调试

- **单线程进程**：可以直接拦截`libuClibc!recvfrom()`，记录相应参数，并继续执行到返回地址检查数据。具体方法可参考：
  - [《2.15 GDB断点后处理commands中finish/until/tb带来的问题》](http://scz.617.cn:8/unix/200901071528.txt)
  - [《Unix编程/应用问答中文版》](http://scz.617.cn:8/unix/201403241123.txt)

- **多线程进程**：由于存在多个线程调用`libuClibc!recvfrom()`，提前锁定某个线程可能导致条件断点无法命中。因此，需要在`libuClibc!recvfrom()`的出口设置条件断点，并在满足条件时锁定当前线程。

### 使用`recvmsg()`读取UDP报文

`recvmsg()`也可以用于读取UDP报文，其原型如下：

```c
ssize_t recvmsg(
    int sockfd,
    struct msghdr *msg,
    int flags
);

struct iovec {
    void *iov_base;       /* Starting address */
    size_t iov_len;       /* Number of bytes to transfer */
};

struct msghdr {
    void *msg_name;       /* optional address */
    socklen_t msg_namelen; /* size of address */
    struct iovec *msg_iov; /* scatter/gather array */
    size_t msg_iovlen;    /* # elements in msg_iov */
    void *msg_control;    /* ancillary data, see below */
    size_t msg_controllen; /* ancillary data buffer len */
    int msg_flags;        /* flags on received message */
};

struct cmsghdr {
    size_t cmsg_len;      /* Data byte count, including header */
    int cmsg_level;       /* Originating protocol */
    int cmsg_type;        /* Protocol-specific type */
    unsigned char cmsg_data[1];
};
```

设置条件断点示例：

```gdb
b *0xhhhhhhhh
commands $bpnum
    silent
    get_big_endian_2 *(char**)$r6+2
    set $sport=$ret
    get_big_endian_4 *(char**)$r6+4
    set $src=$ret
    if (($src==0xhhhhhhhh)&&($sport==0x1314))
        set scheduler-locking on
        display
        i r r7 r6 r5
        db *(*(char***)($r6+8)) $r5
    else
        c
    end
end
```

### 定位TCP端口处理流程

对于TCP端口，通常会调用`recv()`函数，其原型如下：

```c
ssize_t recv(
    int sockfd,
    void *buf,
    size_t len,
    int flags
);
```

不同于`recvfrom()`和`recvmsg()`，`recv()`无法直接获取源IP和源端口。因此，条件断点需要做些改动。例如，当TCP数据区长度等于11且前4字节等于指定值时显示读取的报文：

```gdb
b *0xhhhhhhhh
commands $bpnum
    silent
    if ($r0==0xb)
        get_big_endian_4 $r4
        set $magic=$ret
        if ($magic==0xhhhhhhhh)
            set scheduler-locking on
            display
            i r r5 r4 r7 r0
            db $r4 $r0
        else
            c
        end
    else
        c
    end
end
```

### 发送触发报文

使用以下命令向1984/TCP发送"scz@nsfocus"，源端口0x1314，等待响应报文，读超时1小时：

```sh
$ nsfocus_scan -q tcpdata -k 0x1314 -p 1984 -x "scz@nsfocus" -y "\xff\xff\0\0" -b x.x.x.x -t 3600
```

如果条件断点命中，单步回到父函数即可定位1984/TCP的处理流程。

### 读取TCP报文的其他方法

`read()`函数也可以用于读取TCP报文，其原型如下：

```c
ssize_t read(
    int fd,
    void *buf,
    size_t count
);
```

### 系统调用

在IDA中分析这些读取函数时，可能会遇到Linux系统调用。例如，`svc 0`相当于x86的`int 0x80`，其中`r7`对应系统调用号，`r0-r6`用于传递参数。

### 条件断点的调整

针对`recv()`的条件断点可能需要根据实际情况进行调整。例如，对于312/TCP端口，处理流程是先读取4字节长度域，再继续读取后续数据。因此，原来的条件断点不会命中。调整后的条件断点如下：

```gdb
b *0xhhhhhhhh
commands $bpnum
    silent
    if ($r0>=4)
        get_big_endian_4 $r4
        set $magic=$ret
        if ($magic==0xhhhhhhhh)
            set scheduler-locking on
            display
            i r r5 r4 r7 r0
            db $r4 $r0
        else
            c
        end
    else
        c
    end
end
```

### 动态拦截网络函数

动态拦截网络函数如`socket()`、`bind()`、`listen()`、`accept()`也是一种选择。对于`bind()`，可以通过形参确定绑定的端口号。即使这样，也不能完全取代拦截读函数，特别是对于复杂的网络服务框架。

### 多个库中的相同函数

动态拦截网络函数时，需要注意可能存在多个库中的相同函数。例如，`liba!read()`和`libb!read()`。在这种情况下，需要仔细查找所有可能的调用点，避免遗漏。

* * *

希望以上内容能帮助你更好地理解和调试IoT设备。如果有任何疑问或需要进一步的帮助，请随时联系我。