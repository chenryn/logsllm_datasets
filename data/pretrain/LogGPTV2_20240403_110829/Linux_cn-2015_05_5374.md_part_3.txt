* [关于 ssl\_prefer\_server\_ciphers 的更多信息](http://wiki.nginx.org/HttpSslModule#ssl_prefer_server_ciphers)
* [关于 ssl\_ciphers 的更多信息](http://wiki.nginx.org/HttpSslModule#ssl_ciphers)
### 前向安全性和 Diffie Hellman Ephemeral （DHE）参数
 前向安全性   （    Forward Secrecy    ） 的概念很简单：客户端和服务器协商一个永不重用的密钥，并在会话结束时销毁它。服务器上的 RSA 私钥用于客户端和服务器之间的 Diffie-Hellman 密钥交换签名。从 Diffie-Hellman 握手中获取的预主密钥会用于之后的编码。因为预主密钥是特定于客户端和服务器之间建立的某个连接，并且只用在一个限定的时间内，所以称作 短暂模式   （    Ephemeral    ） 。
使用了前向安全性，如果一个攻击者取得了一个服务器的私钥，他是不能解码之前的通讯信息的。这个私钥仅用于 Diffie Hellman 握手签名，并不会泄露预主密钥。Diffie Hellman 算法会确保预主密钥绝不会离开客户端和服务器，而且不能被中间人攻击所拦截。
所有版本的 nginx（如1.4.4）都依赖于 OpenSSL 给 Diffie-Hellman （DH）的输入参数。不幸的是，这意味着 Diffie-Hellman Ephemeral（DHE）将使用 OpenSSL 的默认设置，包括一个用于密钥交换的1024位密钥。因为我们正在使用2048位证书，DHE 客户端就会使用一个要比非 DHE 客户端更弱的密钥交换。
我们需要生成一个更强壮的 DHE 参数：
```
cd /etc/ssl/certs
openssl dhparam -out dhparam.pem 4096
```
然后告诉 nginx 将其用作 DHE 密钥交换：
```
ssl_dhparam /etc/ssl/certs/dhparam.pem;
```
### OCSP 装订（Stapling）
当连接到一个服务器时，客户端应该使用 证书吊销列表   （    CRL，Certificate Revocation List    ） 或 在线证书状态协议   （    OCSP，Online Certificate Status Protocol    ） 记录来校验服务器证书的有效性。CRL 的问题是它已经增长的太大了，永远也下载不完了。
OCSP 更轻量级一些，因为我们每次只请求一条记录。但是副作用是当连接到一个服务器时必须对第三方 OCSP 响应器发起 OCSP 请求，这就增加了延迟和带来了潜在隐患。事实上，CA 所运营的 OCSP 响应器非常不可靠，浏览器如果不能及时收到答复，就会静默失败。攻击者通过 DoS 攻击一个 OCSP 响应器可以禁用其校验功能，这样就降低了安全性。
解决方法是允许服务器在 TLS 握手中发送缓存的 OCSP 记录，以绕开 OCSP 响应器。这个机制节省了客户端和 OCSP 响应器之间的通讯，称作 OCSP 装订。
客户端会在它的 CLIENT HELLO 中告知其支持 status\_request TLS 扩展，服务器仅在客户端请求它的时候才发送缓存的 OCSP 响应。
大多数服务器最多会缓存 OCSP 响应48小时。服务器会按照常规的间隔连接到 CA 的 OCSP 响应器来获取刷新的 OCSP 记录。OCSP 响应器的位置可以从签名的证书中的 授权信息访问   （    Authority Information Access    ） 字段中获得。
* [阅读我的教程：在 NGINX 中启用 OCSP 装订](https://raymii.org/s/tutorials/OCSP_Stapling_on_nginx.html)
### HTTP 严格传输安全（HSTS）
如有可能，你应该启用 [HTTP 严格传输安全（HSTS）](https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security)，它会引导浏览器和你的站点之间的通讯仅通过 HTTPS。
* [阅读我关于 HSTS 的文章，了解如何配置它](/article-5266-1.html)
### HTTP 公钥固定扩展（HPKP）
你也应该启用 [HTTP 公钥固定扩展（HPKP）](https://wiki.mozilla.org/SecurityEngineering/Public_Key_Pinning)。
公钥固定的意思是一个证书链必须包括一个白名单中的公钥。它确保仅有白名单中的 CA 才能够为某个域名签署证书，而不是你的浏览器中存储的任何 CA。
我已经写了一篇[关于 HPKP 的背景理论及在 Apache、Lighttpd 和 NGINX 中配置例子的文章](/article-5282-1.html)。
### 配置范例
```
server {
  listen [::]:443 default_server;
  ssl on;
  ssl_certificate_key /etc/ssl/cert/raymii_org.pem;
  ssl_certificate /etc/ssl/cert/ca-bundle.pem;
  ssl_ciphers 'AES128+EECDH:AES128+EDH:!aNULL';
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_session_cache shared:SSL:10m;
  ssl_stapling on;
  ssl_stapling_verify on;
  resolver 8.8.4.4 8.8.8.8 valid=300s;
  resolver_timeout 10s;
  ssl_prefer_server_ciphers on;
  ssl_dhparam /etc/ssl/certs/dhparam.pem;
  add_header Strict-Transport-Security max-age=63072000;
  add_header X-Frame-Options DENY;
  add_header X-Content-Type-Options nosniff;
  root /var/www/;
  index index.html index.htm;
  server_name raymii.org;
}
```
### 结尾
如果你使用了上述配置，你需要重启 nginx：
```
# 首先检查配置文件是否正确
/etc/init.d/nginx configtest
# 然后重启
/etc/init.d/nginx restart
```
现在使用 [SSL Labs 测试](https://www.ssllabs.com/ssltest/)来看看你是否能得到一个漂亮的“A”。当然了，你也得到了一个安全的、强壮的、经得起考验的 SSL 配置！
* [参考 Mozilla 关于这方面的内容](https://wiki.mozilla.org/Security/Server_Side_TLS)
---
via: 
作者：[Remy van Elst](https://raymii.org/) 译者：[wxy](https://github.com/wxy) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](http://linux.cn/) 荣誉推出