using lazy replication techniques, which would on the other
hand loosen consistency and reduce availability. It can also
be seen that latency increases as overlap decreases (n − r
increases), because smaller overlap increases the total number
of shares that must be read or written. The bottom left of
the ﬁgure shows the impact of object size. Performance is
reasonable up to 1 MB ﬁles but increases signiﬁcantly for 4
MB ﬁles. The bottom right compares all 3 schemes and shows
that their latencies are similar except for the replicated write
latency as already discussed. Latency is most sensitive to the
overlap in our techniques while n and k have much less impact
since the number of shares is primarily determined by n − r.
Fig. 10. Number of attempts needed to reconstruct remaining secrets given
one secret in NCP scheme (m = 50, n = 15, log scale on y-axis)
We use the above expressions to generate Figure 10, which
shows the number of combinations to guarantee that all
remaining secrets can be reconstructed given the ﬁrst secret.
With the example from the previous subsection with k = 14
and r = 10, which was sufﬁcient to ensure the desired security
level for the ﬁrst secret, an adversary can reconstruct all
remaining secrets with only about 106 attempts. However, if
we reduce r to 5, the number of attempts increases to about
1016, which was our target. This decrease in r causes the
number of shares to increase to 505, which is still about 2/3
of the number needed in P NAIVE but is signiﬁcantly higher
than when only considering the security of the ﬁrst secret.
E. Discussion
It is interesting to consider the relationship of the parameters
m and k in NCP relative to the parameter k in Shamir’s secret
sharing scheme (without deception). In Shamir’s scheme, k
is thought of as a fault threshold, i.e. it is the minimum
number of servers that must be compromised by an adversary
to reveal a secret. Such threshold schemes have been criticized
for security if they are deployed on a set of identical servers,
where a vulnerability on one server is likely to be present on
all other servers as well. A major beneﬁt of deceptive secret
sharing is that k is no longer a strict fault threshold. Even
if an adversary is lucky enough to compromise k servers that
contain a set of shares that allow a correct-looking secret to be
assembled, it is unlikely to actually be a correct secret. Even if
all servers, and therefore all shares, are compromised, we have
shown that the adversary would still have to do a practically
infeasible amount of computation to reconstruct all secrets and,
therefore, be guaranteed to know at least one correct secret.
In other words, using deceptive secret sharing with a large
enough value of m, even with a small k, can provide much
stronger security than simply increasing k without deception.
VI. PROTOTYPE EVALUATION
Here, we evaluate our techniques using a CloudLab [4]
prototype. Since security was extensively evaluated in previous
sections, we focus on performance and data availability in the
experimental evaluation.
A. Overview of Prototype Implementation
The implementation follows the architecture of Figure 2.
The storage servers shown in Figure 2 are implemented on
451
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:50:43 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 11. Latency. The top shows the three schemes with 256KB objects and m = 50. The bottom left focuses on impact of object size using CYCLIC
without replication for illustration. The bottom right compares the three schemes on one graph.
ﬁle size (KB)
64
256
1024
4096
no encoding
read
write
1.108s
1.078s
1.312s
1.205s
1.762s
1.693s
2.983s
3.207s
deceptive secret sharing
write
1.256s
1.415s
1.905s
4.191s
read
1.274s
1.624s
2.772s
6.099s
COMPARISON BETWEEN DECEPTIVE SECRET SHARING AND A
SYSTEM WITH NO SECRET SHARING AND NO DECEPTION.
TABLE II
We also wanted to understand how the performance of secret
sharing and deception compares to a system with no protection
at all, i.e. one where there is no secret sharing and no deception
deployed. The latter situation is equivalent
to reading or
writing a single share, instead of the N shares required for
deceptive secret sharing, where N depends on the parameters
of the DSS scheme. Table II compares the cyclic DSS scheme
without replication and with m = 50, n = 15, and r = 14, in
which each ﬁle is encoded with 64 shares, compared with a
single share for no secret sharing and no deception. Despite
reading or writing 64 times the number of shares, the latency
of DSS is always less than twice that of reading a single share.
For the smaller ﬁle sizes, the DSS latency is actually only
10–20% higher than reading a single share. This is because,
with these ﬁle sizes, performance is not bandwidth-limited
and multiple share reads/writes can overlap substantially. With
much larger ﬁle sizes, the latency degradation would deﬁnitely
increase. However, for applications where ﬁle sizes are in the
range we evaluated such as email, photo sharing, etc., latencies
should deﬁnitely be in a range that is tolerable for users.
Availability: Figure 12 depicts the data availability of the
three schemes. Note that the availability of CYCLIC without
replication drops very quickly as the number of crashed servers
increases. Each server stores shares of some real secrets and
CYCLIC needs all shares to reconstruct the secret, therefore
even one crashed server causes some data objects to be
unavailable. Notice also that availability decreases with the
number of servers since, with fewer servers, more shares need
Fig. 12. Availability of CYCLIC and NCP. s is number of storage nodes.
(m = 50, n = 15, r = 9)
to be stored on each server. CYCLIC with three replicas im-
proves fault tolerance signiﬁcantly, having availability near one
even with up to 10 crashed servers, except when the number of
servers is quite small (50). Triplication comes with very high
cost, however, as the storage overhead is tripled and write
latency is also increased substantially unless lazy replication
is employed. Note, however, that NCP with appropriate values
of k and a large enough number of servers can also achieve
availabilities near one for a relatively large number of crashed
servers. Since NCP has similar overheads to CYCLIC without
replication, in those scenarios it provides an ideal solution
when considering security, performance, and availability. As
an example, with n = 15, k = 12, r = 9, m = 50, and 150
servers of which 8 are crashed, NCP requires 309 shares and
has an availability of 0.9995, while CYCLIC with triplication
requires 903 shares and has an availability of 0.9999.
VII. RELATED WORK
Fake resources are often used to detect and/or track attacks.
This was ﬁrst done with honeypots [16], [19], [24], which
capture attack trafﬁc. An additional deception is used in
honey patches [1], in which an attempt to exploit a patched
vulnerability on a system causes the attack to be redirected to
a honeypot where the attack is monitored and the attacker is
led to believe that the attack succeeded. Deception has also
been used inside legitimate systems to detect attacks using
fake credentials [3], [10] or fake documents [3], [22]. Access
452
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:50:43 UTC from IEEE Xplore.  Restrictions apply. 
to fake resources causes alerts to be generated and, in [3], also
generates information about where an exﬁltrated document
was opened. In [12], the authors discuss information deception
generally. These works deploy fake resources openly, because
they want adversaries to access them. The issue of conﬁden-
tiality of sensitive information that might exist on the same
systems is considered to be orthogonal and not addressed.
Our work combines the protection of the real information with
provision of fake information to provide two layers of security.
VIII. CONCLUSION
We presented new deceptive secret sharing techniques that
work with both XOR secret sharing and Shamir’s polynomial-
based threshold secret sharing. We evaluated both the overhead
and security of the proposed techniques and showed that they
permit tunable security, i.e. a tradeoff between security and
overhead, by varying one parameter of the techniques. A
Cloudlab prototype was used to show that our techniques have
acceptable latency and very high availability.
One aspect of our work involves hiding true information
among a sea of true and fake information. The earliest use of
this idea is Rivest’s chafﬁng and winnowing concept, which he
applied in the context of conﬁdential exchange of messages
across a network [17]. This idea has also been proposed to
protect stored information [5], [6], [23]. The chafﬁng and
winnowing concept was extended to distributed storage in [23].
This work provides a novel encoding to produce wheat and
chaff pieces for storage and uses an inverse decoding process
to eliminate the chaff when reading the data. In [5], the authors
secret share sensitive information and hide the shares within
a very large ﬁle, which increases the difﬁculty for an attacker
to exﬁltrate the information for off-line analysis. In [6], large
shares that are hard to exﬁltrate are also used together with an
interactive secret reconstruction scheme, which is resilient to
attackers that can compromise a limited number of rounds
of reconstruction. None of these approaches addresses the
additional deception aspect that we consider herein.
Secret sharing has been used in various ways in distributed
storage systems [2], [8], [14], [15], [20], [21]. One approach
is to encrypt data and secret share the key among multiple
servers [8]. In [14], secret sharing and replication are com-
bined to reduce write cost compared to (k, n) secret sharing.
In [21], secret sharing and XOR replication are combined
to provide equivalent guarantees to (k, n) secret sharing but
with better performance. Another approach is to secret share
data across multiple cloud providers [2], which can protect
against insider attacks within a single provider. In [20], the
authors propose combining secret sharing with RAID to pro-
vide conﬁdentiality and reliability of archival data. In [15],
Shamir’s secret sharing scheme was extended with Byzantine
fault tolerance. All of these works are only concerned with
conﬁdentiality and do not address the issue of deception.
The only work of which we are aware that combines
conﬁdentiality and deception as is done in our approach is
honey encryption [9], [11]. In honey encryption, decryption
with the proper key yields the correct plaintext but decryption
with other keys yields correct-looking but fake plaintext. The
approach relies on distribution-transforming encoders (DTEs),
which transform messages into seeds that are then encrypted.
To date, DTEs have been given for only a few message types,
e.g. RSA keys and credit card numbers in [11] and genomic
data in [9]. Since our approach is built upon basic secret
sharing schemes, it can be applied to any type of data.
REFERENCES
[1] Araujo F, Hamlen K W, Biedermann S, et al, “From patches to honey-
patches: Lightweight attacker misdirection, deception, and disinforma-
tion,” Proc. ACM SIGSAC Conference on Computer and Communica-
tions Security, 2014: 942-953.
[2] Bessani A, Correia M, Quaresma B, et al, “DepSky: Dependable and
secure storage in a cloud-of-clouds,” ACM Transactions on Storage
(TOS), 2013, 9(4): 12.
[3] Bowen B M, Hershkop S, Keromytis A D, et al, “Baiting inside
attackers using decoy documents,” Int’l Conf. on Security and Privacy
in Communication Systems. Springer Berlin Heidelberg, 2009: 51-70.
[4] CloudLab Team, “The CloudLab Manual,” http://docs.cloudlab.us/.
[5] Dagon D, Lee W, Lipton R, “Protecting secret data from insider attacks,”
Int’l Conf. on Financial Cryptography and Data Security, 2005: 16-30.
[6] Dziembowski S, Pietrzak K, “Intrusion-resilient secret sharing,” Proc.
Symposium on Foundations of Computer Science, 2007: 227-237.
[7] Greenberg, A.,
ahead
leak
https://www.wired.com/2017/05/macron-email-hack-french-election.
(URL checked on 4/12/2018)
of
hit macron with
election,” Wired
huge
Security
“Hackers
French
email
blog,
[8] Herlihy, M., and Tygar, J., “How to make replicated data secure,” Proc.
of Advances in Cryptology, pp. 379–391, 1987.
[9] Huang, Z., Ayday, E., Fellay, J., et al., “GenoGuard: Protecting genomic
data against brute-force attacks,” Security and Privacy (SP), 2015 IEEE
Symposium on. IEEE, 2015: 447-462.
[10] Juels A., Rivest R., “ Honeywords: Making password-cracking de-
tectable,” Proc. ACM SIGSAC Conference on Computer & Comm.
Security, 2013: 145-160.
[11] Juels A, Ristenpart T, “Honey encryption: Security beyond the brute-
force bound,” Int’l Conf. Theory & Appl. Crypto. Tech., 2014: 293-310.
[12] Kott, A., Swami, A., and West, B., “The fog of war in cyberspace,”
IEEE Computer, pp. 84–87, Nov. 2016.
[13] Krawczyk, H., “Secret sharing made short,” Proc. of the Annual Inter-
national Cryptology Conference, pp. 136–146, 1993.
[14] Lakshmanan, S., Ahamad, M., and Venkateswaran, H., “Responsive
security for stored data,” IEEE Transactions on Parallel and Distributed
Systems, Vol. 14, pp. 818-828, 2003.
[15] Padilha, R., Pedone, F., “Belisarius: BFT storage with conﬁdentiality,”
Proc. Int’l Symp. on Network Computing and Appl., pp. 9–16, 2011.
[16] Provos, N., “Honeyd: A virtual honeypot daemon,” Proc. of 10th DFN-
CERT Workshop, pp. 4–9, 2003.
[17] Rivest, R.L., “ Chafﬁng and winnowing: Conﬁdentiality without encryp-
tion,” CryptoBytes (RSA laboratories), 1998, 4(1): 12-17.
[18] Shamir, A., “How to share a secret,” Communications of the ACM, Vol.
22, pp. 612–613, Nov. 1979.
[19] Spitzner L, “Honeypots: Catching the insider threat,” Proc. Computer
Security Applications Conference, 2003: 170-179.
[20] Storer, M., Greenan, K., Miller E., et al., “POTSHARDS: Secure
long-term storage without encryption,” 2007 USENIX Annual Technical
Conference. USENIX Association, 2008.
[21] Subbiah, A. and Blough, D.M., “An approach for fault tolerant and
secure data storage in collaborative work environments,” Proc. of the
ACM Workshop on Storage Security and Survivability, pp. 84–93, 2005.
[22] Yuill J, Zappe M, Denning D, et al, “Honeyﬁles: Deceptive ﬁles for in-
trusion detection,” Information Assurance Workshop, 2004. Proceedings
from the Fifth Annual IEEE SMC. IEEE, 2004: 116-122.
[23] Zage, D., Obert, J., “Utilizing linear subspaces to improve cloud
security,” Dependable Systems and Networks Workshops (DSN-W), 2012
IEEE/IFIP 42nd International Conference on. IEEE, 2012: 1-6.
[24] Zhang, F., Zhou, S., Qin, Z., and Liu, J., “Honeypot: A supplemented
active defense system for network security,” Proc. Int’l. Conf. on Parallel
& Dist. Computing, Applications and Technologies, pp. 231–235, 2003.
453
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:50:43 UTC from IEEE Xplore.  Restrictions apply.