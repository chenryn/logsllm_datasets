in the TCB, such as module import, in untrusted user code.
Over the past 20 months, we have used the described sand-
box as part of a network research testbed [49]. The testbed
is built using donated resources from end user machines, in
a manner similar to BOINC [11] and SETI@Home [3]. How-
ever, since this is a network testbed, the use model is closer
to PlanetLab [43]. Typical use cases of our testbed include
network measurement, peer-to-peer applications, web mea-
surement, and distributed hash tables.
As the size of our testbed grew into the thousands, ma-
chine owners began requesting increasingly more complex
functionality. There were requests to control the local IP or
interface used, the source or destination of network traﬃc,
diﬀerent resource restrictions based on the system location,
and other functionality. This motivated us to add required
security layers as a general mechanism to help facilitate these
requests. Unlike in Java, the standard library programmer
does not need to remember to add security policy checks in
the appropriate portions of the standard libraries.
In our
model, a security layer that wishes to enforce a policy, such
as the same origin policy enforced by web browsers, may
simply interpose on the network capabilities that are per-
mitted to the security layer it instantiates. As we discuss
in Section 6, this is a common way to interpose required se-
curity functionality without bloating the TCB or breaking
compatibility with existing code.
4. SECURITY LAYER DESIGN
This section describes how the sandbox provides security
layer functionality within our architecture. First, we de-
scribe virtual namespaces, which are provided by the kernel
for loading and executing code. We then describe the en-
casement library, which is implemented above the TCB and
uses virtual namespaces to implement the security layer ab-
straction.
4.1 Virtual Namespace
To support code loading and execution, the sandbox ker-
nel supports two virtual namespace calls. The ﬁrst call val-
idates the safety of code. It takes a string that contains the
program source and ensures that the string only contains
language constructs permitted by our Repy language (see
Appendix A for more details).
214mechanisms [24, 9, 28, 1], in that they mediate access to a
sensitive interface. For example, since Python is a dynami-
cally typed language, it is useful to type check a function’s
arguments, exceptions, and return values. The contract lists
the number and types of arguments, the exceptions which
can be legally raised by the function, and the return type of
the function.
A contract is represented as a Python dictionary which
is a hash table with keys and values. As an example, if the
module foo wanted to create a contract that would map
listfiles and safe_removefile into a new namespace,
the contract would be: {‘listfiles’:{‘type’:‘func’,
‘args’:None, ‘exceptions’:None, ‘return’:list,
‘target’:listfiles}, ‘removefile’:{‘type’:‘func’,
‘args’:str, ‘exceptions’: (RepyArgumentError,
FileNotFoundError, FileInUseError), ‘return’: None,
‘target’:safe_removefile}}. Note that the symbols listed
in the contract come from foo’s namespace. Thus the target
for the ‘listfiles’ in the contract is the foo.listfiles
capability. Similarly, the target for the ‘removefile’ in the
contract is the foo.safe_removefile capability.
The veriﬁcation function uses the contract to perform
type-checking whenever a capability is used.
If the veriﬁ-
cation function detects a semantic violation, the program
is terminated.
In addition to type checking, the veriﬁca-
tion function copies arguments and return values of muta-
ble types to prevent time-of-check-to-time-of-use bugs. Since
mutable types are copied, the caller cannot cause a race con-
dition by modifying objects.
4.3 Security Layer Instantiation
Each security layer call provides the encasement library
with a contract to instantiate the next security layer. Even-
tually the ﬁnal security layer starts the user program with
the appropriate set of capabilities. This instantiation pro-
cess is helpful when a developer wants to implement a se-
curity layer that interposes on a speciﬁc capability. This is
done by substituting a version of the function that enforces
a given policy. All security layers loaded after this layer will
have access to the version of the function which enforces this
new policy. Since every layer above the interposition layer
has access only to the new version of the function, the user’s
program is forced to use the new policy.
From start to ﬁnish, the entire process proceeds as fol-
lows. The sandbox kernel obtains a list of command-line ar-
guments, the ﬁrst of which must be the encasement library.
The kernel reads in the encasement library code and uses
the virtual namespace abstraction to execute the code with
the exported kernel capabilities1. The encasement library
uses its security layer creation call to instantiate the next
security layer. To do this, the encasement library creates
a capability mapping that contains the kernel’s exported
capabilities, the security layer instantiation call, and the re-
maining command-line arguments. The newly instantiated
security layer repeats this process using the encasement li-
brary’s security layer creation call to instantiate the next
security layer with a potentially updated contract and capa-
bility mapping. Eventually, the user program is instantiated
in a separate security layer with the capabilities provided
through the stack of security layers that preceded it.
1The kernel wraps its calls similarly to how the encasement
library works.
Figure 2: Architecture of our sandbox with a min-
imal sandbox kernel comprising the TCB. Each re-
quired library is isolated in its own security layer (in-
dicated with horizontal dashed lines), and standard
or optional libraries are located in the same secu-
rity layer as user code (top layer). There is a clearly
deﬁned boundary between each security layer. The
bottommost security layer contains the encasement
library, which enforces security layer isolation. The
vertical dotted line indicates the only possible call-
path from user code into the sandbox TCB.
The second virtual namespace call executes validated code
with the provided capability mapping. The namespace will
not contain capabilities from the sandbox kernel or the
namespace of the creating module unless these are explicitly
listed in the provided capability mapping. For example, if
module foo with capabilities listfiles, safe_removefile,
and removefile were to instantiate a module bar with
a capability mapping {‘listfiles’:listfiles, ‘remove-
file’:safe_removefile}, the module bar would have ac-
cess to foo.listfiles via the name listfiles and to
foo.safe_removefile via the name removefile. The mod-
ule would be unable to access foo.removefile.
4.2 Encasement Library
The virtual namespace abstraction is useful for loading
code dynamically, but does not provide adequate security for
use as an isolation boundary. A created virtual namespace
will share objects with the creator and may be missing even
basic veriﬁcation such as type checking.
The encasement library implements the security layer ab-
straction, which provides strong isolation between virtual
namespaces. The call to create a new security layer takes
three arguments: the code to isolate in a security layer, a
capability mapping, and a contract that speciﬁes capability
semantics. Security layers do not share objects or functions.
The encasement library copies all objects that are passed
between security layers.
Each function call that can be called by other security
layers is wrapped in a veriﬁcation function. The veriﬁca-
tion function uses the contract for a function to verify its
behavior. A contract speciﬁes the set of behaviors that a
veriﬁcation function should have. The veriﬁcation function
and contract are conceptually similar to system call ﬁltering
Required Lib 1Required Lib 2Required Lib KSandbox KernelUser CodeTCB BoundarySec. Layer 0Sec. Layer 1Sec. Layer 2...Sec. Layer KStandardLibrariesSec. Layer K+1Encasement Library...2155. STANDARD LIBRARIES
The security layer mechanism eﬀectively isolates the sand-
box kernel from the functionality that can be externalized.
However, it is important to retain containment while exter-
nalizing functionality. For example, if the ability to write to
arbitrary ﬁles on the ﬁle system is allowed externally to the
kernel, this could be used to overwrite the sandbox imple-
mentation’s code. While there is insuﬃcient space to fully
describe the capabilities provided by our sandbox kernel im-
plementation [25], we summarize its capabilities and then
describe how our sandbox provides functionality common to
existing sandboxes.
Our sandbox kernel has a total of 32 capabilities that it
provides to the untrusted security layer above it. These calls
can be summarized as follows:
• Thirteen network functions, to perform DNS lookups,
obtain the local IP address, and send / receive TCP
and UDP traﬃc.
• Two virtual namespace calls described in the previous
section.
• Six ﬁle I/O calls involving access to a sandbox-speciﬁc
directory on the ﬁle system. These allow the user to
open a ﬁle, read at a location in the ﬁle, write at a
location in the ﬁle, close the ﬁle, delete a ﬁle, and list
the ﬁles in the sandbox.
• A call to create and return a lock object, which has
methods to acquire or release the lock.
• Four functions to provide information. These calls re-
turn a string to describe the last error’s stack trace, re-
source utilization information, the thread’s name, and
the elapsed time since the program started.
• Three thread-related calls: a call to create a new
thread of execution for a function, a call to sleep the
current thread, and a call to force all threads to exit.
• A call to return random bytes suitable for crypto-
graphic use.
Using the above primitives, we have built standard li-
braries that reconstruct common language functionality. For
example, import is provided via a library that calls the
sandbox kernel to read the appropriate ﬁle from disk, and
passes the string containing the code into the kernel’s vir-
tual namespace API. All of the complexity of correctly map-
ping symbols between namespaces is handled outside of the
sandbox kernel. Utilizing the minimal functionality pro-
vided by the sandbox kernel we were able to restore access
to large amounts of Python functionality including print,
eval, traceback handling, and many types of introspection.
Similarly, standard libraries can extend the minimal ﬁle
system API provided by the sandbox kernel to provide many
conveniences expected by programmers. For example, in
Python a programmer can iterate over the lines of a ﬁle
using for line in file:. Rather than providing an it-
erator for thread-safe readline with consistent ﬁle location
in the kernel, we provide it as part of a standard library
above the TCB. Similarly, we provide write-buﬀering, log-
ging functionality, and other common mechanisms in stan-
dard libraries, moving thousands of lines of code out of the
TCB.
While reconstructing the common language functionality
of Python we worked with numerous undergraduates to im-
plement our standard libraries. These undergraduates were
able to write a majority of our standard libraries within
roughly ﬁve to ten hours per library with a heavy focus on
testing. For certain library functions there existed a pure-
Python implementation already; in this case we found that
occasionally the function ran correctly within our sandbox
without any major modiﬁcations.
In addition to core functionality, such as import and basic
ﬁle I/O, other complex functionality is also provided out-
side of the sandbox kernel. This includes cryptographic li-
braries, XML parsing, RPC, serialization, NAT traversal,
HTTP client / server code, argument parsing, advanced syn-
chronization primitives, and a variety of encoding schemes.
These routines comprise the majority of the lines of code
in our codebase. A bug in any of these routines will not
allow an attacker to escape the sandbox. Somewhat sur-
prisingly, portions of these libraries are implemented with
security sensitive code in other sandbox environments.
Another beneﬁt of moving complexity out of the kernel
is that it simpliﬁes interposition. For example, the kernel
function for opening a TCP connection requires that ports
and IP addresses are explicitly speciﬁed for both sides of the
connection. If a security layer wants to prevent connections
from using speciﬁc local IPs, or to reject traﬃc to speciﬁc
destinations, such ﬁltering policies are trivial to implement
because all connection-related information is explicit. This
explicitness is also useful to expand the minimal API for
programmer convenience. For instance, programmers may
want to be able to specify the remote side of the connection
as a hostname instead of as an IP address. We provide
this functionality in a portion of the standard library that
is loaded after all the other security layers.
In the next section we overview a particular feature of our
sandbox architecture – required libraries. These libraries are
loaded in security layers prior to any standard libraries or
user code. We overview how we leverage required libraries to
implement security policies and to carry out a variety of use-
ful functionality, all of which is enabled by the interposition
aﬀorded by security layers.
6. REQUIRED LIBRARIES
Previously, our sandbox allowed the machine owner to
ﬁlter application capabilities using mechanisms such as reg-
ular expressions over the values allowed as arguments to
privileged calls. This complex set of functionality resided
entirely in the trusted computing base.
The interposition provided by security layers made our
previous approach obsolete – it is trivial to perform ﬁltering
using Python code in a security layer. This allowed us to
reduce the size of the sandbox kernel by removing regular ex-
pressions and the other ﬁltering code. Using security layers
also naturally separates the policies speciﬁed by the machine
owner from policies that are controlled by the application de-
veloper. As Figure 2 shows, the application developer can
only load security layers once the required libraries – secu-
rity layers required by the sandbox and the machine owner –
have been loaded. In this section we describe an assortment
of interesting required libraries that we have implemented
in our sandbox.
2166.1 Network API Interposition for Controlled
Node Communication
A networked testbed must be designed with a global se-
curity perspective in mind. For example, the testbed should
not be able to send SPAM, launch DDoS attacks, spread
malware through remote exploits, or perform similar mali-
cious actions. To prevent such actions, there must be re-
strictions on which hosts testbed nodes can communicate
with. Speciﬁcally, it is desirable to allow testbed nodes to
only communicate with each other, with critical services like
DNS, and with computers that have explicitly opted-in. To
provide this capability, we constructed a traﬃc containment
service [7], which restricts communication between the local
node and a remote node based on the destination IP, port,
or some combination of the two. Here we brieﬂy overview
how required libraries made this service possible.
Although this service is essential to the adoption of our
testbed, it is also complex due to the various distributed
protocols it uses to maintain the list of participating nodes.
Because of this we were hesitant to add this service to the
TCB. Instead, we isolate this service in a security layer, and
transparently add it as a required library to those machines
whose owners want to ﬁlter the source or destination of their
machine’s traﬃc. The transparency of security layers makes
the addition of this required library trivial – it merely in-
terposes on the sandbox network API just above the kernel.
Additionally, security layer isolation guarantees that a bug
in this library will not compromise the sandbox kernel.