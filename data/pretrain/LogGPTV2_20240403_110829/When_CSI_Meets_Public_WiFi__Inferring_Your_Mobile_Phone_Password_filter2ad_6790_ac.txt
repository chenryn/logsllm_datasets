1
S
C
0.5
0
0
2000
4000
6000
8000 10000 12000 14000 16000
Sample
0
2000
4000
6000
8000 10000 12000 14000 16000
Sample
(a) After Once Filter
(b) After Twice Filter
−0.5
1.3
1.4
1.5
1.7
x 104
(c) Judgement Value
Sample
1.6
CSI Value
Variance
l
e
u
a
V
I
S
C
3
2
1
0
-1
0
CSI Value
Start Point
End Point
2
1.5
J
Start Point
End Point
l
e
u
a
V
I
S
C
1
0.5
2000
4000
6000
8000 10000 12000 14000 16000
Sample
0
−0.5
1.4
1.5
1.6
Sample
1.7
x 104
3
2
1
0
-1
3
2
1
0
l
e
u
a
V
I
S
C
l
e
u
a
V
I
S
C
-1
0
2000
4000
6000
8000 10000 12000 14000 16000
Sample
(d) Variance Scan
(e) The Results of Extraction
(f) Keystroke Area
Figure 6: Keystroke Extraction
and fall of the CSI waveform signals are observed in coinci-
dence with the start and end of ﬁnger touch. How to deter-
mine the start and the end point of CSI time series during a
keystroke is essential for keystroke recognition. However, the
existing burst detection schemes such as Mann-Kendall test
[9], moving average method [10] and cumulative anomalies
[14] do not work well in our situation since the CSI waveform
has many change-points during the password input period.
Therefore, we propose a novel detection algorithm to au-
tomatically detect the start and end point. The proposed
algorithm includes the following three steps.
Waveform Proﬁle Building: As shown in Fig.6(a), it is
observed that there is a sharp rise and fall which correspond
to the ﬁnger motions. However, there is a strong noise which
prevents us from extracting interested CSI waveform related
to the keystrokes. This motives us to perform another round
of noise ﬁltering. In the experiment, we adopt Butterworth
ﬁlter and choose 10Hz as the cutoﬀ frequency to make the
waveform smooth. After being ﬁltered, the CSI data during
the keystroke period are highlighted while the waveform dur-
ing non-keystroke period becomes smooth, which are shown
in Fig.6(b).
CSI Time Series Segmentation and Feature Seg-
ment Selection: To extract the CSI waveforms for indi-
vidual keystrokes, we slice the CSI time series into multiple
segments, which be grouped together according to the tem-
poral proximity, and then choose the center of segment as
the feature waveform for a speciﬁc keystroke. Without loss
of the generality, it is assumed that each segment contains
W samples. Given the sampling frequency S, and the time
duration τ , W can be represented by S × τ . For the wave-
form with time duration of T , the number of segments N
can be calculated as below:
(cid:3)
(cid:2)
T × S
W
N =
It is observed that the CSI segments during the keystroke
period show a much larger variance than those happening
out of the period, which is shown in Fig.6(d). Motivated by
this, we are only interested in the segments with the vari-
ance which is larger than a predetermined threshold while
removing the segments with the variance under this thresh-
old. The selected segments are grouped into various groups
according to the temporal proximity (e.g., ﬁve adjacent seg-
ments grouped into one group in the practice). Each group
represents the CSI waveform of an individual keystroke and
the center point of this group is selected as the feature seg-
ment of this keystroke. The process of time series segmen-
tation and feature segment selection is shown in Fig.6(d).
Keystroke Waveforms Extraction: To extract keystroke
waveforms, the key issues is how to determine the start and
the end point of CSI time series, which could cover as much
keystroke waveform as possible while minimizing the cov-
erage of the non-keystroke portion. We choose the average
value of the segment samples J as the key metric and the
intersection of J and the CSI waveform serves as the an-
chor points. In particular, starting from the leftmost anchor
point, it performs a local search and chooses the nearest lo-
cal extremum which is below J as the start point. Similarly,
beyond the rightmost anchor point, it can choose the near-
est local extremum which is below J as the end point. As
shown in Fig.6(c), Fig.6(f), Fig.6(e), with the start and the
end point, keystroke waveform can be extracted.
Thus, we can divide a CSI stream into several keystroke
waveform. The ith keystroke waveform Ki from the kth
principal component Hr(:, k) of CSI waveforms as follows.
Ki = Hr(si : ei, k)
where si and ei be the start and the end time of ith keystroke.
After keystroke extraction, we use these keystroke waveform
to conduct recognition process.
4.5.2 Keystroke recognition
One of the major challenges for diﬀerentiating keystrokes
is how to choose the appropriate features that can uniquely
represent the keystrokes. As shown in Fig.7, it is observed
that diﬀerent keystrokes will lead to diﬀerent waveforms,
which motivates us to choose waveform shape as the feature
for keystroke classiﬁcation. To compare the waveforms of
diﬀerent keystrokes, we adopt the Dynamic Time Warping
(DTW) to measure the similarity between the CSI time se-
ries of two keystrokes. However, directly using the keystroke
1073l
e
u
a
V
I
S
C
20
10
0
−10
0
l
e
u
a
V
I
S
C
15
10
5
0
−5
0
2000
500
1000
Sample Index
1500
1000
500
Sample Index
1500
(a) Two samples of keystroke waveforms number 2
l
e
u
a
V
I
S
C
5
0
−5
−10
−15
0
500
1000
Sample Index
1500
l
e
u
a
V
I
S
C
10
5
0
−5
−10
0
1000
500
Sample Index
1500
2000
(b) Two samples of keystroke waveforms number 4
Figure 7: CSI Diﬀerence Between Two Number
waveforms as the classiﬁcation features leads to high com-
putational costs in the classiﬁcation process since waveforms
contain many data points for each keystroke. Therefore, we
leverage Discrete Wavelet Transform (DWT) to compress
the length of CSI waveform by extracting the approximate
sequence. In the below, we will introduce the details.
4.5.3 Discrete Wavelet Transform
Diﬀerent from the traditional frequency analysis such as
Fourier Transform, DWT is the time-frequency analysis which
has a good resolution at both of the time and frequency do-
mains. A discrete signal x [n] can be expressed in terms of
the wavelet function by the following equation:
(cid:4)
x[n] =
1√
L
Wφ[j0, k]φj0,k[n]+
k
Wψ[j, k]ψj,k[n],
j=j0
k
∞(cid:4)
(cid:4)
1√
L
where x[n] represents the original discrete signal and L
represents the length of x[n]. φj0,k[n] and ψj,k[n] refer to
wavelet basis. Wφ[j0, k] andW ψ[j, k] refer to the wavelet
coeﬃcients. The functions φj0,k[n] refer to scaling functions
and the corresponding coeﬃcients Wφ[j0, k] refer to the ap-
proximation coeﬃcients. Similarly, functions ψj,k[n] refer
to wavelet functions and coeﬃcients Wψ[j, k] refer to detail
coeﬃcients. To obtain the wavelet coeﬃcients, the wavelet
basis φj0,k[n] andψ j,k[n] are chosen to be orthogonal to each
other.
During the decomposition process, the origin signal is ﬁrst
divided into the approximation coeﬃcients and detail coef-
ﬁcients. Then the approximation coeﬃcients are iteratively
divided into the approximation and detail coeﬃcients of next
level. The approximation and the detail coeﬃcients in jth
level can be calculated as follows:
Wφ[j0, k] = (cid:4)x[n], φj0+1,k[n](cid:5) =
x[n]φj0+1,k[n]
(cid:4)
1√
L
Wψ[j, k] = (cid:4)x[n], ψj+1,k[n](cid:5) =
1√
L
n
(cid:4)
n
x[n]ψj+1,k[n]
In the ﬁrst DWT decomposition step, the length of ap-
proximation coeﬃcients is half of L. For the jth decompo-
sition step, the length is half of the previous decomposition.
We use the approximation coeﬃcients to compress the orig-
inal keystroke waveforms to reduce computational cost. In
order to achieve the tradeoﬀ between the sequence length
reducing and preserving the waveform information, we need
to choose an appropriate wavelet basis and decomposition
level. In practice, we choose Daubechies D4 wavelet and per-
form 3-level DWT decomposition in the classiﬁcation model.
Therefore, for ith keystroke, the third level approximation
coeﬃcients of Ki is chosen as the feature of the keystroke.
4.5.4 Dynamic Time Warping
To compare features of diﬀerent keystrokes, WindTalker
adopts DTW to achieve keystroke recognition. DTW utilizes
dynamic programming to calculate the distance between two
time series of keystroke waveforms with diﬀerent lengths.
With DTW, the sequences (e.g., time series) are warped non-
linearly in the time dimension to measure their similarity.
The input of DTW algorithm is two time series and the
output is the distance between two series. A low distance
indicates that these two sequences are highly similar.
4.5.5 Classiﬁer Training
We build a classiﬁer to recognize the keystrokes based
on their keystroke waveform shapes. Our classiﬁer gives
each keystroke waveform a set of scores, which allows the
keystrokes to be diﬀerentiated based on the user’s training
dataset (keystrokes on diﬀerent numbers). For a certain
key number, classiﬁer ﬁrst calculates the DTW distances
between the input waveform and all the key number’s wave-
forms in dataset. Then classiﬁer chooses the average value of
the previous distances as the score between the input wave-
form and the certain key number. The smaller the score, the
higher possibility the certain number is actual input num-
ber. The classiﬁer choose the key number which has the
minimum score as the predicted key number. Note that the
classiﬁer saves all scores in order to generate password can-
didates in Section 5.3.
5. EVALUATION
5.1 System Setup
WindTalker is built with the oﬀ-the-shelf hardware, which
is actually a commercial laptop computer equipped with In-
tel 5300 NIC with one external directional antenna and two
omni-directional antennas. WindTalker also serves as the
WiFi hotspot to attract the users to access to the WiFi. The
laptop runs Ubuntu 14.04 LTS with a modiﬁed Intel driver
to collect CSI data. To collect the CSI data related to the
user’s touch screen clicks, WindTalker uses ICMP echo and
reply to achieve the sampling rate of 800 packets/s. In this
evaluation, the distance between the mobile user and the
AP is 75 cm and the AP is placed on the left side of mobile
phone.
In the online phase, we recruit 10 volunteers to join our
evaluation, including 7 males and 3 females. All of the vol-
unteers are right-handed and they perform the touch-screen
operations by following their own fashions. During the ex-
periment, the volunteers should participate in the data train-
ing phase and keystroke recognition phase by inputting the
numbers according to the system hints. In the data training
phase, WindTalker records each input and its corresponding
CSI data.
In the test phase, WindTalker infers the input
data based on the observed CSI time series. The training
data and testing data collection should be ﬁnished within 30
1074r
e
b
m
u
N
y
e
K
l
a
u
t
c
A
1
2
3
4
5
6
7
8