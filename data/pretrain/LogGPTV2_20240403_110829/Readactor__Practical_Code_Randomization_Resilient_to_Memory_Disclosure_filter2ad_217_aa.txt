title:Readactor: Practical Code Randomization Resilient to Memory Disclosure
author:Stephen Crane and
Christopher Liebchen and
Andrei Homescu and
Lucas Davi and
Per Larsen and
Ahmad-Reza Sadeghi and
Stefan Brunthaler and
Michael Franz
2015 IEEE Symposium on Security and Privacy
Readactor: Practical Code Randomization Resilient to Memory Disclosure
Stephen Crane∗, Christopher Liebchen†, Andrei Homescu∗, Lucas Davi†,
Per Larsen∗, Ahmad-Reza Sadeghi†, Stefan Brunthaler∗, Michael Franz∗
∗University of California, Irvine.
{sjcrane,ahomescu,perl,s.brunthaler,franz}@uci.edu
†CASED/Technische Universität Darmstadt, Germany.
{lucas.davi,christopher.liebchen,ahmad.sadeghi}@trust.cased.de
Abstract—Code-reuse attacks such as return-oriented pro-
gramming (ROP) pose a severe threat
to modern software.
Designing practical and effective defenses against code-reuse
attacks is highly challenging. One line of defense builds upon
ﬁne-grained code diversiﬁcation to prevent the adversary from
constructing a reliable code-reuse attack. However, all solutions
proposed so far are either vulnerable to memory disclosure or
are impractical for deployment on commodity systems.
In this paper, we address the deﬁciencies of existing solutions
and present the ﬁrst practical, ﬁne-grained code randomization
defense, called Readactor, resilient to both static and dynamic
ROP attacks. We distinguish between direct memory disclosure,
where the attacker reads code pages, and indirect memory
disclosure, where attackers use code pointers on data pages
to infer the code layout without reading code pages. Unlike
previous work, Readactor resists both types of memory disclosure.
Moreover, our technique protects both statically and dynamically
generated code. We use a new compiler-based code generation
paradigm that uses hardware features provided by modern CPUs
to enable execute-only memory and hide code pointers from
leakage to the adversary. Finally, our extensive evaluation shows
that our approach is practical—we protect the entire Google
Chromium browser and its V8 JIT compiler—and efﬁcient with
an average SPEC CPU2006 performance overhead of only 6.4%.
I.
INTRODUCTION
Design and implementation of practical and resilient de-
fenses against code-reuse attacks is challenging, and many
defenses have been proposed over the last few years. So
far, these defense mechanisms can roughly be classiﬁed into
two primary categories: control-ﬂow integrity (CFI) and code
randomization. CFI, when properly implemented [2], prevents
attackers from executing control-ﬂow edges outside a static
control-ﬂow graph (CFG) [3]. However, ﬁne-grained CFI
solutions suffer from performance problems and the precision
of the CFI policy is only as good as that of the underlying CFG.
Obtaining a completely precise CFG is generally not possible,
even with source code. Recent work on control-ﬂow integrity
has therefore focused on coarse-grained solutions that trade
security for performance [17, 25, 50, 67, 69]. Unfortunately,
all of these solutions have been successfully bypassed due to
their imprecise CFI policies [13, 20, 29, 30, 55].
Code randomization (see [40] for an overview), on the
other hand, has suffered a blow from information disclosure,
which breaks the fundamental memory secrecy assumption
of randomization, namely, that the code layout of a running
program is unknown to attackers [61]. We distinguish between
two types of memory disclosure: direct and indirect. In a
direct memory disclosure attack, the adversary reads code
pages directly and mounts a return-oriented programming (ROP)
attack based on the leakage of code pointers embedded in
instructions residing on code pages, as shown in the just-in-
time code-reuse (JIT-ROP) attack [59]. In an indirect memory
disclosure attack, the adversary reads multiple code pointers
that are located on data pages (e.g., stack and heap) to infer the
memory layout of an application (as we show in an experiment
in Section III).
Since randomization is known to be efﬁcient [22, 34],
recently proposed defenses [6, 7] focus on reducing or elimi-
nating memory disclosure. For instance, Oxymoron [6] aims at
hiding direct code and data references in instructions, whereas
Execute-no-Read (XnR) marks all memory pages (except a
sliding window) as non-accessible to prevent memory pages
from being dynamically read and disassembled [7]. However,
information disclosure is surprisingly hard to prevent. As
we explain in Section III, none of these techniques provide
sufﬁcient protection against memory disclosure and can be
bypassed. They are also not sufﬁciently practical to protect
complex applications such as web browsers that contain just-
in-time compilers. Finally, we note that Szekeres et al. [62]
propose a different approach called Code-Pointer Integrity (CPI)
which separates code pointers from non-control data. Kuznetsov
et al. [39] implement CPI by placing all code pointers in a
secure region which (in 64-bit mode) is hidden by randomizing
its offset in the virtual address space. However, Evans et al. [23]
successfully bypass this CPI implementation using side-channel
attacks enabled by the large size of the secure region.
Goals and contributions. In this paper, we focus on code
randomization. Our goal is to tackle the shortcomings of
existing defenses by closing memory disclosure channels
while using a reasonable granularity of code randomization.
We classify information disclosure sources into direct and
indirect memory leakage. We then present the design and
implementation of Readactor, the ﬁrst practical ﬁne-grained
code randomization defense that resists both classes of memory
disclosure attacks. Our defense combines novel compiler
transformations with a hardware-based enforcement mechanism
that prevents adversaries from reading any code. Speciﬁcally, we
use virtualization support in current, commodity Intel processors
to enforce execute-only pages [35]. This support allows us to
avoid two important shortcomings of prior work [7, 27]: either
requiring a sliding window of readable code or legacy hardware,
respectively. Our main contributions are:
•
Comprehensive ROP resilience. Readactor prevents
all existing ROP attacks: conventional ROP [58], ROP
without returns [14], and dynamic ROP [9, 59]. Most
importantly, Readactor improves the state of the art
© 2015, Stephen Crane. Under license to IEEE.
DOI 10.1109/SP.2015.52
763
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:24 UTC from IEEE Xplore.  Restrictions apply. 
•
•
•
in JIT-ROP defenses by preventing indirect memory
disclosure through code-pointer hiding.
Novel techniques. We introduce compiler transfor-
mations that extend execute-only memory to protect
against the new class of indirect information disclosure.
We also present a new way to implement execute-only
memory that leverages hardware-accelerated memory
protections.
Covering statically & dynamically generated code.
We introduce the ﬁrst technique that extends coverage
of execute-only memory to secure just-in-time (JIT)
compiled code.
Realistic and extensive evaluation. We provide a full-
ﬂedged prototype implementation of Readactor that
diversiﬁes applications, and present the results of a
detailed evaluation. We report an average overhead
of 6.4% on compute-intensive benchmarks. Moreover,
our solution scales beyond benchmarks to programs as
complex as Google’s popular Chromium web browser.
II. RETURN-ORIENTED PROGRAMMING
In general, code-reuse attacks execute benign and legitimate
code to perform illegal actions. To do so, the adversary exploits
a memory corruption error (such as a buffer overﬂow) to transfer
control to existing instruction sequences that are chained
together to perform the malicious behavior.
The most common code-reuse technique is return-oriented
programming (ROP) [53]. The basic idea of ROP is to invoke
short instruction sequences (gadgets, in ROP parlance) one after
another. To successfully launch an attack, the adversary ﬁrst
needs to identify—using an ofﬂine static analysis phase—which
gadgets and library functions satisfy the attack goal. Once all
gadgets are identiﬁed, the adversary injects pointers into the
data area of the application, where each pointer references a
gadget.
For a conventional stack-overﬂow vulnerability, the adver-
sary writes the pointers onto the stack and overwrites the return
address of the vulnerable function with the address of the ﬁrst
gadget. This can be achieved by overﬂowing a stack-allocated
buffer and writing a new pointer address to the stack slot
containing the return address.
Once the vulnerable function executes a return instruction,
the control ﬂow is redirected to the ﬁrst gadget, which itself
ends with a return instruction. Return instructions play an
important role1 as they are responsible for chaining multiple
sequences together. This attack principle has been shown to
be Turing-complete, meaning that the adversary can perform
arbitrary, malicious computations [53].
III. THE THREAT OF MEMORY DISCLOSURE
Simple code randomization such as address space layout
randomization (ASLR) complicates ROP attacks by randomiz-
ing the base addresses of code segments. Hence, the adversary
must guess where the required instruction sequences reside
in memory. Recent research has shown that randomization
1ROP does not necessarily require return instructions, but can leverage
indirect jumps or calls to execute a chain of ROP gadgets [12, 14].
Code page 1
JMP label
Code page 2
Code page 3
Direct 
disclosure
CALL Func_A
label: 
asm_ins
asm_ins
...
Func_A:
asm_ins
asm_ins
...
Adversary
Indirect
disclosure
Readable-writable
Readable-executable
Data pages
Function pointer 2
Return address
Function pointer 1
Stack / Heap
Code pages
Figure 1: Direct and indirect memory disclosure.
at the level of functions, basic blocks, or individual instruc-
tions enhances security (see [40] for a detailed overview of
ﬁne-grained code randomization) relative to ASLR because
these approaches randomize the internal code structure of an
application.
However, the adversary can sometimes use memory disclo-
sure vulnerabilities to learn the memory layout and randomized
locations of machine code in an application. Using this
information,
the adversary can reliably infer the runtime
addresses of instruction sequences and bypass the underlying
code randomization. In general, the adversary can launch direct
and indirect memory disclosure attacks; Figure 1 illustrates
both classes of disclosure.
In a direct memory disclosure attack, the adversary is
able to directly read code pointers from code pages. Such
pointers are typically embedded in direct branch instructions
such as direct jumps and calls. The top of Figure 1 shows how
the adversary can access a single code page (code page 1),
dynamically disassemble it, and identify other code pages
(pages 2 and 3) via direct call and jump instructions. By
performing this recursive disassembly process on-the-ﬂy, the
adversary can directly disclose all gadgets needed to relocate
a ROP attack to match the diversiﬁed code [59].
Two protection methods have been proposed to prevent
direct memory disclosure: rewriting inter-page references and
redirecting attempts to read code pages. In the ﬁrst approach,
direct code references in calls and jumps between code pages
are replaced by indirect branches to prevent the adversary
from following these code pointers [6]. A conceptually simpler
alternative is to prevent read access to code pages that are not
currently executing [7], e.g., code page 2 and 3 in Figure 1.
Unfortunately, obfuscating code pointers between pages
does not prevent indirect memory disclosure attacks, where
the adversary only harvests code pointers stored on the data
pages of the application which are necessarily readable (e.g., the
stack and heap). Examples of such pointers are return addresses
and function pointers on the stack, and code pointers in C++
virtual method tables (vtables). We conducted experiments that
indicate that the adversary can bypass countermeasures that
764
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:24 UTC from IEEE Xplore.  Restrictions apply. 
only hide code pointers in direct calls and jumps. We collected
code addresses from virtual table pointers on the heap, and
disassembled code pages to identify useful gadgets, similar to
the original JIT-ROP attack. We found 144 virtual function
pointers pointing to 74 code pages in IE 8 and showed that it
is possible to construct a JIT-ROP attack from those 74 code
pages [21]. We call this updated attack indirect JIT-ROP to
distinguish it from the original JIT-ROP attack that directly
reads the code layout.
We must also consider whether preventing read access
to code pages sufﬁces to protect against indirect memory
disclosure vulnerabilities. Since code pages are not readable,
the adversary cannot disassemble code to construct an attack.
The adversary still gains information from leaked code pointers,
however, as our experiment on indirect JIT-ROP demonstrates.
By leaking pointers to known code locations, the adversary
is able to infer the contents of code surrounding the pointer
targets. The severity of this threat depends on the type of code
randomization that is deployed in conjunction with non-readable
code pages. For example, if function permutation is used, each
leaked code pointer allows the adversary to correctly infer the
location and the entire content of the function surrounding
the leaked code address, since there is no randomization used
within functions. Thus, the security of making code pages non-
readable depends on the granularity of the code randomization.
IV. ADVERSARY MODEL AND ASSUMPTIONS
Our defense against all known variants of return-oriented
programming attacks builds on the following assumptions and
adversary model:
•
•
•
•
•
•
The target system provides built-in protection against
code injection attacks. Today, all modern processors
and operating systems support data execution preven-
tion (DEP) to prevent code injection.
The adversary cannot tamper with our implementation
of Readactor.
The adversary has no a priori knowledge of the in-
memory code layout. We ensure this through the use
of ﬁne-grained diversiﬁcation.
The target program suffers at least from one memory
corruption vulnerability which allows the adversary to
hijack the control-ﬂow.
The adversary knows the software conﬁguration and
defenses on the target platform, as well as the source
code of the target application.
The adversary is able to read and analyze any readable
memory location in the target process.
Our adversary model is consistent with prior offensive and
defensive work, particularly the powerful model introduced in
JIT-ROP [59].
We cannot rule out the existence of timing, cache, and
fault side channels that can leak information about the code
layout to attackers. Although information disclosure through
side-channels is outside the scope of this paper we note
that Readactor mitigates recent remote side-channel attacks
against diversiﬁed code since they also involve direct memory
disclosure [9, 57].
765
// my ﬁrst program 
#include 
Source 
Code
int main()
{
  std::cout << 
"Hello World!";
}
Readacted 
Application
  Readactor Compiler
  Readacted Process
Read-write Execute-only 
Code-data separation
Code diversiﬁcation
Data
page 1
⠇
Data
page n