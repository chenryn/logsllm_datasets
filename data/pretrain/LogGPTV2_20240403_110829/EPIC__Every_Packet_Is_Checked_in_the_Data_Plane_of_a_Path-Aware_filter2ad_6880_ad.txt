Ai
HS
HD
honesty ass.
packets
–
–
HS, A1, A(cid:96)
HS, A1
A1
HS, A1, A(cid:96)
non-oracle
all
all
non-oracle
all
all
L0
(BA)
L1
(SA)
L2
(SA)
L3
(SA)
ICING OPT
(BA)
(BA)
PPV
(BA)

























()
2
2
2
2,3

()

1







()3
1 Ai has to additionally assume the honesty of HD.
2 A1 and A(cid:96) do not need to be honest.
3 A1 and HS do not need to be honest.
First, forging even a single packet (i.e., at least one HVF)
is expensive as it cannot be performed locally but only by
sending packets. Second, a forged packet will be forwarded at
most once. The HVFs are bound to the packet origin (source
and timestamp). If the attacker brute-forces a HVF and cre-
ates an unauthorized (but valid) path, she can violate path
authorization or source authentication at routers, but only for
a speciﬁc PO. Any packets with an outdated timestamp in
their PO will be dropped immediately by routers, meaning
that the attack can only happen in a short time frame. Fur-
thermore, the replay-suppression system prevents more than
one packet with the same PO from being forwarded. Third,
in many practical attacks more than a single HVF needs to be
brute-forced and the attack becomes exponentially harder in
the number of ﬁelds to be forged. The probability of forging
n HVFs and segment identiﬁers for any packet is given by
2−8n(lval+lseg). Fourth, the security guarantees for end hosts
are not affected, since they are based on the validation ﬁeld
VSD, which is cryptographically strong.
Attacks that only allow a tiny number of packets to be
falsely validated by ASes do not pose a grave threat to them.
Their concerns regarding path authorization are primarily
driven by economic interests, and it sufﬁces if path-policy en-
forcement works for the vast majority of packets. On the other
hand, the main application of source authentication at routers
is DoS defense by ﬁltering out unauthentic packets before
they reach a bottleneck and enforcing bandwidth reservations
through source attribution. For these in-network security ap-
plications a small number of forged packets that fool routers
(but not the destination) have minimal consequences.
5.3 Path Authorization
The following property protects the path policies of ASes:
P1 Path authorization: Packets traverse the network only
along paths authorized by all honest on-path ASes.
This enforces the control-plane choices in the data plane and
prevents path-splicing attacks: in these, a malicious source
would combine hop ﬁelds from multiple authorized paths
to create an unauthorized path. An on-path attacker can
exchange the authorized path that the source picked by a dif-
ferent authorized path. Nevertheless, each portion of the path
that the packet traverses along honest ASes is still authorized.
EPIC L0 and OPT EPIC L0 satisﬁes path authorization
due to its chained hop authenticators: each authenticator con-
tains in its MAC recursively all previous authenticators. Thus,
the MAC binds the entire portion of the path from the authen-
ticating AS to the end. Since the property is only achieved in
the basic-attacker model, hop authenticators have to be long
enough to prevent brute-force attacks. Otherwise, attackers
could forge a path and not only use it to send a single packet,
but use it for arbitrarily many packets until a hop ﬁeld expires
(based on tsexp) or the ASes’ long-term keys Ki are rotated.
OPT also only satisﬁes P1 in the basic-attacker model since
its mechanism is based on SCION / EPIC L0.
EPIC L1–3 EPIC L1 and onward achieve property P1 in the
strong-attacker model. These protocols create a HVF for each
hop, which is a MAC containing both the hop authenticator
σ and the packet origin ﬁelds (SRC, TSpath, and tspkt).1 The
former ensures path authorization, similar to EPIC L0. The
latter ensures that this property holds even under the strong
attacker: an attacker who obtains a HVF for a speciﬁc PO
from the oracle cannot use it to create a HVF that is valid for
a different PO, as the HVF is bound to its PO.
Both the segment identiﬁer and the HVF directly appear in
the packet and are truncated for efﬁciency reasons. In contrast,
the hop authenticator σ itself does not appear in the packet
and thus does not need truncation as it can be recomputed
on demand. The combination of long hop authenticators
and short HVFs and segment identiﬁers minimizes risk; on
one hand, a successful brute-forcing attack on a 16 B hop
authenticator is practically infeasible; on the other hand, such
an attack on a HVF or segment identiﬁer, which is possible
by sending a large number of probing packets, has limited
impact, as we have discussed in §5.2.
1TSpath is indirectly contained in the HVF through the hop authenticator.
USENIX Association
29th USENIX Security Symposium    549
ICING and PPV ICING achieves path authorization in the
basic-attacker model through its proofs of consent (PoCs),
which are used to calculate authenticators. PPV does not
consider path authorization.
5.4 Freshness
In order to prevent DoS attacks by repeated packet resending,
we require that each packet’s origin (PO) is unique.
P2 Freshness: Packets are uniquely identiﬁable and cannot
be replayed.
EPIC L1–3 achieves freshness using a replay-suppression
system where PO, i.e., the combination of source, path times-
tamp, and packet timestamp, serves as a unique packet iden-
tiﬁer. With such a system in place, the attacker can send at
most one unauthorized packet per forged HVF, which is an
enormous cost for a very limited return value.
EPIC L0 lacks unique packet identiﬁers required for replay
suppression; ICING and OPT have limited support for replay
suppression but do not discuss this in their work. PPV does
not use sequence numbers or timestamps and instead uses a
“PacketID” based on source, destination, and the hash of the
payload. This is insufﬁcient to uniquely identify packets or to
enable an efﬁcient replay-suppression system.
5.5 Packet and Source Authentication
Packet and source authentication are desirable properties
at the network layer. We formulate authentication as non-
injective agreement properties [32]. Together with prop-
erty P2 and enforcement of the timestamp’s validity, they
yield strong recent-injective-agreement properties [32].
P3 Packet authentication for HD: The destination HD agrees
with the source HS on the packet origin, path, and pay-
load unless HS, its AS, or HD’s AS are corrupted.
P4 Source authentication for routers: On-path ASes agree
with the source on the packet origin unless the source or
its AS are corrupted.
EPIC EPIC L0–1 do not provide any authentication.
EPIC L2–3 achieve P3 in the strong-attacker model by com-
puting the destination validation ﬁeld VSD as the MAC under
KSD of the packet timestamp tspkt, the path (including TSpath),
and the payload, see Eqs. (11) and (14). Since we assume
that VSD is unforgeable (it is not included in O (l)’s output),
any source, path, payload, or timestamp modiﬁcations by an
attacker can be detected by the destination.
EPIC L2–3 achieve P4 since their HVFs are computed as
the MAC under the host key KS
i of the packet timestamp, the
source, and the hop authenticator (which is calculated based
on the path timestamp). The reasoning is similar to the one
for property P3 above, with the difference that individual
HVFs are forgeable by sufﬁciently strong attackers (included
in O (l)’s output). The modiﬁcation of part of the packet origin,
i.e., the timestamps or the source, requires forging all honest
ASes’ HVFs on the path from the attacker to the destination.
As a consequence, these routers may falsely authenticate the
source of a packet, but, due to freshness (P2), this is limited
to individual packets, see also §5.2.
OPT OPT authenticates the source and payload, but it
achieves property P4 only in the basic-attacker model and only
under the additional assumption that HD is honest. This is
due to the use of DRKeys of the form KAi→A1:HS,A(cid:96):HD, which
are not only shared between HS and the intermediate AS Ai,
but also with HD. This weakens the source-authentication
property compared to EPIC as all HVFs could also have been
created by A(cid:96) or HD. For example, if source authentication is
used for bandwidth attribution, a malicious destination could
slander the source by fabricating packets or sharing this key.
ICING and PPV ICING achieves both authentication prop-
erties P3–P4 through its proofs of provenance (PoPs). PPV
achieves property P3 through its “PacketID”, which is calcu-
lated using a secret key shared between HS and HD. There is
no mechanism in PPV for authentication to routers (P4).
Honesty Assumptions
In all schemes discussed here ex-
cept for ICING (which is not based on DRKey), an end host’s
use of a host key shared with its AS requires the host’s trust
in its AS. While this may appear like a strong assumption, a
malicious source or destination AS would need to launch an
active attack, which hosts can detect by comparing authenti-
cators out of band. Hosts have contracts with their ASes and
could have a legal remedy when misbehavior occurs. This
is in stark contrast to today’s Internet, where hijacks can be
performed by an off-path adversary with no relationship to the
affected hosts, and no common jurisdiction to settle disputes.
The alternatives to using DRKey in the data plane are using
asymmetric cryptography or using symmetric cryptography
with pairwise end-to-end keys, which both violate our efﬁ-
ciency requirements (see Sections 2.3 and 3.4).
5.6 Path Validation
Path-validation properties ensure that the actual path cor-
responds to the sender’s intended path. This is primarily
interesting to the end points, for instance if there are compli-
ance rules that mandate certain paths. It can be considered the
dual property to path authorization: while path authorization
protects the routing decisions of ASes from malicious end
hosts, path validation protects the path choices of end hosts
from on-path ASes.
P5 Path validation for HS: Upon receiving a reply from
HD, the source HS can verify that the original packet
traversed all honest ASes on the path intended by HS.
P6 Path validation for HD: HD can verify that the packet
traversed all honest ASes on the path from HS to HD
intended by HS.
Both P5 and P6 are achieved by EPIC L3 in the strong-
attacker model through the destination validation ﬁeld VSD
(for which the attacker’s ability to forge HVFs is irrelevant).
ICING and OPT also satisfy path-validation properties P5
and P6. They additionally ensure that ASes are traversed in
550    29th USENIX Security Symposium
USENIX Association
Table 3: Size (in bytes) and number of occurrences (#) of
various header ﬁelds in a path of length (cid:96).
ﬁeld
TSpath
SRC
Vi
Si
tspkt
VSD
content
path timestamp
source AS and host
hop validation ﬁeld
segment identiﬁer
packet timestamp offset
destination validation ﬁeld
#
1
1
(cid:96)
(cid:96)
1
1
size
4
8
3
2
8
16
the correct order. PPV does not allow the source to validate
the path (P5) and only probabilistically validates individual
links at the destination (P6).
Honesty Assumptions For EPIC L3 and OPT, property P5
requires that the source assumes the honesty of its own AS,
since they share the host key. Likewise, for property P6, the
destination must assume the honesty of its own AS and also of
the source and its AS, since all validation ﬁelds are computed
by HS. This assumption is not needed for ICING, which does
not rely on DRKey and uses separate keys for the destination.
PPV also uses a key which is not shared with the source to
achieve property P6 and therefore does not need to assume
the source to be honest.
6 Implementation and Evaluation
In this section, we describe our prototype implementation and
evaluate its performance. In addition, we analyze the commu-
nication overhead of EPIC, OPT, ICING, and PPV as well as
of supporting systems. For this analysis, we assume the sizes
for various ﬁelds in the EPIC header shown in Table 3.
6.1
Implementation and Measurement Setup
To show that EPIC is practically feasible, we implemented
and evaluated EPIC L3 prototypes for the source, the routers,
and the destination according to the algorithm speciﬁcation in
Algorithms 1–3 using Intel DPDK [18]. As other EPIC levels
have a strict subset of processing steps, they would achieve
strictly better performance.
In summary, the following evaluation shows that the system
can be implemented efﬁciently even on commodity hardware,
it is parallelizable and scales well to core links on the Internet,
has signiﬁcantly lower communication overhead compared to
existing systems, requires virtually no state on routers, and
limits additional control-plane overhead.
EPIC Packet Structure
In our prototype implementation,
we follow the packet structure of Eq. (1), using the ﬁeld sizes
speciﬁed in Table 3, and extend it with some auxiliary ﬁelds
(a pointer to the current hop ﬁeld, the total path length, a
version number, and additional ﬂags) and an Ethernet header.
Cryptographic Primitives As we calculate many PRFs
and MACs over short inputs and want to avoid the overhead
due to subkey generation of CMAC [25], we use the AES-128
block cipher in CBC mode for both PRFs and MACs. As we
calculate MACs over variable-length inputs, we prepend the
input length and use zero padding such that the CBC-MAC
indeed fulﬁlls all properties of a PRF and a MAC [7]. Because
EPIC and DRKey heavily rely on MAC and PRF calculations,
we use Intel’s AES-NI hardware instructions [41], available
on all modern Intel CPUs, to reduce the computation time.
HVF Store at the Source The store of HVFs of sent pack-
ets at the source is implemented as a hash table as it en-
ables insertion and retrieval of data using the 12-byte key
(TSpath || tspkt) with average complexity O(1) and there exists
a ready-to-use hash-table implementation in DPDK.
Measurement Setup The prototypes are evaluated using
a Spirent SPT-N4U, which serves as packet generator and
bandwidth monitor, and a commodity machine with an 18-
core Intel Xeon 2 GHz processor executing the component
to be tested, i.e., the source or router. The two machines are
connected with a 40 Gbps Ethernet link.
We evaluate the performance of the prototype as a function
of the EPIC L3 payload. However, the size of the EPIC header
depends on the AS-level path length and therefore contributes
dynamically to the Ethernet packet content. To test the pro-
totypes using the same EPIC L3 payload range, independent
of the path length, we enable jumbo-frame support (Ethernet