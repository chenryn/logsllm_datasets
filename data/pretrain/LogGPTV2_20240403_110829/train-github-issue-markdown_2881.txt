#### Copy-pastable examples:
    import pandas as pd
    fileName = 'temp/df.h5'
    #### Example 1
    t = pd.DataFrame(data={'k':['A','B','C'],
                           'x':[ 1., 2., 3.]})
    t.set_index(['k'], inplace=True)
    t.sort_index(inplace=True)
    t.to_hdf(fileName, 't', format='table')
    t2 = pd.read_hdf(fileName, where='k=="A"'    ) # XXX: does not work
    t2 = pd.read_hdf(fileName, where='k in ["A"]') # XXX: does not work
    t2 = pd.read_hdf(fileName, where='k in {"A"}') # XXX: does not work
    #### Example 2
    t = pd.DataFrame(data={'k1':['A','B','C'],
                           'k2':[ 10, 20, 30],
                           'x' :[ 1., 2., 3.]})
    t.set_index(['k1','k2'], inplace=True)
    t.sort_index(inplace=True)
    t.to_hdf(fileName, 't', format='table')
    t2 = pd.read_hdf(fileName, where='k1=="A"'    ) # XXX: works
    t2 = pd.read_hdf(fileName, where='k1 in ["A"]') # XXX: works
    t2 = pd.read_hdf(fileName, where='k1 in {"A"}') # XXX: does not work
#### Problem description
  * 'where' queries seem to completely fail if the DataFrame has single str index
  * 'where' queries do not support sets, which are much more algorithmically efficient for searches than lists (in my use cases, I select routinely keys, which belong to sets with hundreds or thousands of elements)
#### Expected Output
  * It would be great to support the single index case
  * It would be great to allow sets in 'where' queries
#### Output of `pd.show_versions()`
    >>> pd.show_versions()
    INSTALLED VERSIONS
    ------------------
    commit: None
    python: 3.6.3.final.0
    python-bits: 64
    OS: Linux
    OS-release: 3.10.0-693.17.1.el7.x86_64
    machine: x86_64
    processor: x86_64
    byteorder: little
    LC_ALL: en_US.utf-8
    LANG: en_US.utf-8
    LOCALE: en_US.UTF-8
    pandas: 0.23.0
    pytest: 3.3.2
    pip: 10.0.1
    setuptools: 39.0.1
    Cython: 0.27.3
    numpy: 1.14.3
    scipy: 1.0.1
    pyarrow: None
    xarray: None
    IPython: 6.2.1
    sphinx: 1.6.6
    patsy: 0.5.0
    dateutil: 2.7.2
    pytz: 2018.4
    blosc: None
    bottleneck: None
    tables: 3.4.2
    numexpr: 2.6.4
    feather: None
    matplotlib: 2.2.2
    openpyxl: None
    xlrd: None
    xlwt: None
    xlsxwriter: None
    lxml: None
    bs4: None
    html5lib: 0.9999999
    sqlalchemy: None
    pymysql: None
    psycopg2: None
    jinja2: 2.10
    s3fs: None
    fastparquet: None
    pandas_gbq: None
    pandas_datareader: None