（详实版）
引言
把你的心思放在软件开发上。此时，你们围坐在一起，准备开始学习，但你
的大脑不停地告诉你，要学习的内容井不重要。你的大脑告诉你说，“最好
在大脑中留一点空间，因为还有更重要的事情，就像油价要不要上涨，徒手
攀登是不是一个错误的想法。”所以，你如何哄骗你的大脑去思考你的生活
真地依赖于你学习怎样开发伟大的软件？
本书适合谁？
xivi
我们知道你们在想什么
Xxvi
元认知
Xxix
让你的大脑顺从你
xxi
读我
xxii
技术审阅团队
xXxiv
致谢
XXXV
ix
---
## Page 22
目录
伟大的软件开发
让客户满意
如果你的客户不爽，每个人都不会爽！
软件系统中每段伟大的代码都源自客户的宏大想法。身为职业的软件开发人
员，你的工作就是把这些想法付诸实现。但是，要把客户模糊不清的想法转
换为可工作的软件代码一
一客户满意的代码，井不是一件很容易的事情。在
本章中，你将学到如何通过交付满足需求、且在预计的时间和预算内的软件。
避免成为软件开发战投的阵亡将士。打开你的笔记本电脑，让我们踏上交付
伟大软件的征途吧！
Tom’s Traill将上线
2
大多数项目都有两个焦点
3
大露需式开发法
4
时间飞驰：两周以后
5
大露雳开发法通常以一团精结束
伟大的软件开发是
9
通过开发循环达到目标
10
每个开发循环是一个微型项目
14
目录
每个开发循环都会产生有品质的软件
14
客户会请求变更
20
由你来进行调整
20
然而，有一些大的问题
20
开发循环白动处理变更（好啦，一点点啦）
22
直到软件交付，你的开发工作才算完成
25
软件开发工具箱
你酒着交付停大款件的递
路是了这么送了。
原初的0标
O
你一直在进行开复得
……但编夺.0
标巴经移动了！
---
## Page 23
目录
收集需求
知道客户想要什么
你不能总能得到你想要的但你的客户应该可以！
伟大的软件开发交付客户所需要的软件系统。本章的内容都将讲述与客户沟通
以弄清他们对软件系统的需求，你将学会使用情节（UserStories）、头脑风暴
（Brainstorming）、估计游戏（Estimation game）如何有助于你获得客户的真实想法
的。这样的话，在你完成项目之时，你就能深信你开发的软件系统就是客户所想要
的，而不是一个低劣的、其他系统的仿制品。
Orion’s Orbits正在进行现代化
30
与客户沟通，获得更多的信息
33
与客户共筑愿景
34
有时你的其筑愿最的会议可以这样
36
找出人们真正在做的事情
ARAE
37
需求一定是面向客户的
39
通过客户反馈，澄清需求
41
8.
使用情节定义了项目要构建什么
财间估计值定义了什么时候完成开发
43
小组交流
47
98.
玩计划扑克牌的游戏
48
验证假设
51
大而不当的使用情节估计值
54
目标是收敛
需求与估计的反复循环
60
最后，你准备估计整个项目
63
/2
2
3
5
天
天
天
天
天
天
8
13
20
40
100
天
天
天
天
天
---
## Page 24
目录
项目规划
为成功而筹划
每段伟大的代码始于伟大的计划。
在本章，你就要学会如何创建计划。你要学会与客户一道按优先顺序排序他们的需
求，你还要确定开发循环，使你和你的团队向一个方向努力。最后，你还要创建一
个有可行性的开发计划，你和你的团队有信心地执行和监控该计划。到你工作完成
之时，你就确切地知道如何从需求到软件的第一次交付。
客户现在就要他们的软件！
70
与客户一起确定优先级顺序
73
我们知道什么是Milestone 1.0版（好吧，可能知道）
74
如果功能太多，重新进行优先顺序排序
75
更多人力有时意味着减损绩效
77
找到合理的Milestone 1.0
78
开发循环应该简短和易行
85
达宝是编程人昌的说法
将你的计划与真实情况作比较
87
时间效率值是在作估计时需要考虑的时间开销
89
理想国里的程序员
90
现实世界里的开发人员…
16
你的开发循环何时算太长？
92
在你着手开发循环之前，先处理时闻效率值
93
该进行评估了
97
管理受发牌气的客户
墙上的大白板
100
如何毁了团队的生活
103
但，站星是的真宝的想法
xi
---
## Page 25
目录
使用情节和任务
开始你实际的工作
开始去工作，使用情节抓住了你需要为客户开发什么、但现在是认真开始工作并分
派所需要完威的工作的时候了，这样你才能使使用情节成为现实。在这一章里，你
将学会如何将使用情节分解成任务，任务估计（TaskEstimates）如何帮助你从头
到尾跟踪项目，你将学会如何更新你的白板，使进行中的任务成为完成，最终完成
整个使用情节。沿着这条道路，你将处理和优先顺序排序你的客户不可避免地增加
给你的工作。
iSwoon简介
110
你的任务汇总了吗？
113
标注剩余的任务
115
把任务写在白板上
116
开始为任务工作
118
“正在进行中”表示任务正在进行
119
万一我同时做两件事呢？
120
你的第一次碰头会
123
任务1：创建Data类
124
你的第一次碰头会
碰头会：第五天，第一周的最后一天
130
碰头会：第二周的第二天
136
Mask，版据度考
在此先打断一下·
140
家务SOL嘉手
你必须跟踪计划外的任务
Bo6,
141
开是人英
意料之外的任务会让你的工作量完成情况呈上升趋势
143
时间效率值有帮助，但
144
我们有很多事情要做
146
但是，我们确切地知道我们身在何处
147
Velocity的心邮
148
---
## Page 26
目录
足够好的设计
以良好的设计完成工作
良好的设计有助于你交付软件。在第4章中，事情看起来很是不理想。不良的设计
正使每个人感到软件开发的艰辛，事情越来越糟糕，意想不到的任务又产生出来了。
在本章中，你将看到如何重构你的设计要素，以使你和你的团队更有生产力。你将
应用良好设计的原则，同时警防陷于为“完美设计”而奋斗的承诺。最后，你会利
用墙上的项目大白板，采用处理所有其他任务的完全相同的方式处理计划外的任务。
iSwoon项目陷于困境
150
这种设计打破了“单一责任原则”
153
辨别设计中的多重资任
156
从多重责任到单一责任
159
你的设计应该遵守SRP，但也不能违背DRY
160
重构之后的碰头会议
164
计划外的任务仍然是任务
166
你的任务的一部分是Demo本身
167
当每件事情得到完成时，开发循环就结束
170
使用情节
正在速行中
已宏成
Eanind
进延的使用情节
图国
xiv
---
## Page 27
目录
版本控制
防御性开发
当谈到编写伟大软件时，安全第一！
编写伟大的软件不是件容易的事…尤其当你要确保开发的代码能运行，并且
是一直能运行时，只要一个打字错误，一个来自同伴的错误决定，一个坏掉的
硬盘驱动器，就会突然间让你的工作付诸东流。但是，通过版本控制（Version
control），你就能确保你开发的代码，在代码存储库中（Coderepository）中一
直是安全的，你能取消错误（Undomistakes）动作，并且你能对你的软件的新旧
版本进行补T的修补（Bug fixes）。
你拿到了新的合同—BeatBox Pro
178
现在着手GUI的工作
182
向客户演示新的BeatBox
185
从版本控制开始
188
首先，建立你的项目
190
接看，把代码调人及调出
191
大多数版本控制工具将试图帮你解决问题
192
服务器试图合并你们的修改
193
BeatBox Pro 1.0
如果你的软件不能合并修改，就会产生冲突
194
开发循环越多，故事越丰富
198
我们的软件具有一个以上的版本
200
良好的提交信息使查找旧的软件版本更加容易
202
现在你可以调出1.0版本
203
（紧急）碰头会议
204
标记你的软件版本
205
标记、分支和主干，哦，我的天！
207
这次，修改真正的1.0版本
208
BeatBox Pro L.x
现在我们有两个代码库
209
何时不要分支·
212
良好分支之道
212
版本控制在做什么
214
版本控制不能确保你编写的代码能运行
215
软件开发工具箱
216
XV
---
## Page 28
目录
6y
构建代码
自动化构建
遵循说明是值得的
特别是在你自己撰写它们时。
使用版本控制工具不足以保证代码的安全，你还得去关心编译代码和打包成可配置
的单元（DeployableUnit）的问题。最重要的是，哪一类是你应用系统的主类？这
些类如何运行？在本章，你将学会如何构建工具（BuildTool）以允许你编写自已的
说明来处理你的源代码。