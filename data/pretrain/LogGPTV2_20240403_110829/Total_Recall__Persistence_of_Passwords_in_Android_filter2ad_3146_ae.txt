7
0
0
BG
24
13
0
20
9
0
2
1
N.A.
2
1
0
2
0
0
YouTube
11
4
0
8
8
0
1
1
N.A.
1
1
0
2
0
0
Lock
11
4
0
7
5
0
1
1
N.A.
1
1
0
1
0
0
TABLE IV: Our proposed ﬁxes, SecureTextView and Key-
Exporter, can successfully address the password retention
problem. A(cid:48) is the version of app A running on the Android
framework with SecureTextView; A† is the version of app
A integrated with KeyExporter and SecureTextView. Since
Yelp is not open source, we were only able to apply Secure-
TextView, but not KeyExporter.
side ﬁxes.
B. Effectiveness
Table IV shows the results of our experiments, which we
now summarize.
#1: Basic Password-based Authentication Applications.
Sample app 1 uses passwords for authentication. As we can
see from Table IV, the original app contains a large number
of passwords. However, the number is reduced roughly by
half after using SecureTextView. The remaining password in-
stances, which live in the app memory, completely disappeared
after integration with KeyExporter. The results conﬁrm that our
solution effectively solves Problems #1 – #7. Also, the result
for the Sample app 1(cid:48) conﬁrms that password retention cannot
be solved only by using an improved password entry widget.
Integration with KeyExporter only required changing six
lines of code in the original app. More speciﬁcally, three lines
of code were applied to the registration method, and three
other lines to the login method. These changes replaced invo-
cations of getText().toString() into getKey(), which
is the method provided by KeyExporter for an app to retrieve
credentials from TextView.
The original app sends raw passwords and usernames to
the server for authentication. The server computes a hash of
the password, and stores the hash in a local database (upon
registration), or compares the hash with the local entry (upon
authentication). We have modiﬁed the app to send the hash
of the password instead, and removed the logic for the server
to hash the password locally. The entire change required less
than an hour of effort.
Obviously, while this process hides the passwords, an
adversarial capture of the hashed password is just as vulnerable
as the capture of the original plaintext password. We next
consider better protocols without obvious replay attacks.
#2: Challenge Response Authentication Applications. Sam-
ple app 3 uses a challenge/response authentication. When
// OnClick
case R.id.ok: {
if (itsYubikeyCb.isChecked()){
...
// Open Database
Owner passwd =
new Owner<>(new
PwsPassword(passUIitsPasswordEdit.getText()));
...
(a) Original authentication code in passwdSafe.
// OnClick
case R.id.ok: {
keyExporter = (PBKDF2KeyExporter)
itPasswordEdit.getKeyExporter("PBKDF2");
keyExporter.init();
if (itsYubikeyCb.isChecked()){
...
// Open Database
Owner passwd =
new Owner<>(new PwsPassword(keyEXporter.getKey()));
...
(b) Integration with KeyExporter using PBKDF2.
Fig. 6: Integrating PasswdSafe with KeyExporter.
running app 3(cid:48), which is the version that uses SecureTextView,
the number of passwords in memory also gets reduced by
about half. Integrating the app with KeyExporter eliminates
the rest of the passwords. After applying our ﬁxes, app 3† is
actually 16 lines shorter than the original app. This is because
the original HMAC-based authentication protocol gets replaced
by a simple invocation of KeyExporter. The source code has
about 800 lines of code, and again required less than an hour
of effort to ﬁx.
#3: OAuth Authentication Applications. OAuth-based apps,
such as Yelp, present a challenge for us to repair because
neither Yelp nor its OAuth provider apps, like Facebook, are
open source. Therefore, we were only able to test the password
reduction on our patched Android that uses SecureTextView. In
this case, Yelp uses Facebook’s OAuth service, which retains
much fewer passwords in memory than other apps. Neverthe-
less, password retention still occurred, and our SecureTextView
reduced the password instances somewhat, but not to zero.
#4: Password Managers. Next, we tested the popular pass-
word manager, PasswdSafe. As discussed before, its code-
base reﬂects many good security practices, such as managing
passwords using reference counts. Nevertheless, the developers
failed to remove all passwords after authentication, as our
results in Table IV show. After integrating this app with
SecureTextView and KeyExporter, all password instances dis-
appeared immediately after authentication was complete.
In this case, the engineering challenges are that the app has
38,000 lines of code in 160 ﬁles, and we are not familiar with
its source code. However, our modiﬁcations can be applied in
a straightforward fashion. Figure 6 shows our core changes by
comparing the original code (6a) and our modiﬁed code (6b).
We ﬁrst located the code for the login ﬁle using a simple
pattern match, and identiﬁed R.id.ok to be the starting point.
We integrated this method with the initialization routine for
11
PBKDF2. For the rest of the codebase, there is only one place
that uses the master password; therefore, we replaced this
usage with the hash value derived by KeyExporter. In total,
our ﬁx changed only 50 lines of code, taking several hours
to complete and test. Most of the time was spent studying the
codebase to identify the relevant entry points. Nevertheless, our
success with ﬁxing PasswdSafe demonstrates that patching a
sizable program to improve its password retention behavior is
straightforward.
#5: System Processes. Next, we tested lockscreen processes
(SystemUI and LocalSettingsService) which leave PINs
in memory (Table IV). We found that the starting point for
authentication is in the KeyGuard module in the SystemUI
process, so we generated derived keys using scrypt in this
module and deleted passwords right away. We found more than
ten methods to which the passwords are passed, so we ﬁxed all
these methods. The result for SystemUI† in Table IV shows
that the password retention problem was solved completely
after the ﬁxes: right after unlocking the phone, all passwords
disappeared.
This ﬁx took about 200 lines of code, most of which
modiﬁed the function prototypes. Although we are familiar
with the Android codebase, applying this ﬁx took three days of
work for one developer. This is because we had to go through
the codebase to trace how the system processes use the PIN
password. Nevertheless, we were able to apply the same types
of ﬁxes to solve the problem.
#6: Password Authenticated Key Exchange. Next, we eval-
uated our PAKE support. We did not ﬁnd secure sample apps
that use PAKE protocols such as SRP. Thus, we decided to
improve a na¨ıve app with the secure protocol, allowing us to
measure the effectiveness of our system as well as the time
effort required to make the changes. First, we modiﬁed Sam-
ple 1 to avoid the use of password strings, creating Sample 1†.
With only this change, the derived secret is simply a hash of
the password, retaining a variety of security vulnerabilities.
We further modiﬁed this app to use the SRP protocol
in
KeyExporter. This requires an additional change of 110 lines
of code: 30 in the app, and 80 lines in the server side to
support SRP. Note that only 30 lines are added in the client
code for implementing both registration and login routines. The
server requires additional modiﬁcation on the database because
it never sees user password or hash; instead, they have to store
a crypt veriﬁer and a salt value. (We’re assuming the presence
of a suitable SRP library on the server.)
Sample 1srp shows the result of the ﬁx: as before, all pass-
words are successfully erased after login. Given our simplistic
sample app, it took a couple of hours to apply SRP (client and
server-side) and make sure everything worked. Of course, not
all developers will be comfortable with SRP. Even when the
client-side code is easy to integrate, the server-side code might
be much more complicated, or might have its own closed-
source legacy components that a developer cannot easily ﬁx.
Nonetheless, our evaluation shows that KeyExporter correctly
manages client-side plaintext passwords in memory and can
help developers follows stronger cryptographic practices.
C. Summary
To summarize, there are four key takeaways from our eval-
uation. First, our solutions are effective in solving password
retention in Android, as they can successfully remove all pass-
words from our tested apps (with the exception of Yelp, which
is not open source). Second, the size of the necessary patch and
the necessary effort to apply it are app-speciﬁc, but generally
speaking, they are relatively small. Third, the modiﬁcation can
be done in a systematic manner by following the principles
of the ﬁxes in Section VI. Lastly, ﬁxing an app “correctly”
requires the adoption of a cryptographic protocol like SRP. Our
proposed solution not only helps reduce password lifetimes,
but also helps developers migrate to these stronger protocols,
which they should be using anyway.
VIII. DISCUSSION
Stronger threat models. Our solution successfully clears pass-
words right after login, providing an effective defense against
sophisticated attackers. Moreover, the design of KeyExporter
can further prevent passwords from being propagated to the
rest of the codebase, so it prevents the possibility for passwords
to be leaked to the network or stored in ﬁles.
Nevertheless, memory disclosure attacks are not the only
way in which an adversary can compromise user passwords. If
an attacker can compromise an Android phone and gain root
privileges, it is possible that they might be able to perform
real-time monitoring of touchscreen activities to capture the
password. This is outside the scope of this current paper. A
possible defense, however, may be to leverage TrustZone for
protection, similar as how the Android framework protects
ﬁngerprint data from attackers. In future work, we plan to
investigate the feasibility for an attacker with root privileges
to monitor keystrokes and capture passwords, and explore
potential mitigations that protect passwords using TrustZone,
moving password-management functionality out of the Text-
View class entirely.
Credentials derived from passwords. Our paper focuses on
user passwords as they are of paramount importance, and as
our paper shows, protecting passwords itself is an unresolved
problem in Android. Credentials derived from passwords, such
as hash values or cryptographic keys, are equally important
but beyond the scope of our current paper. Obviously, these
credentials and keys must also be deleted in a timely manner.
We previously looked at SSL/TLS session key retention [34],
discovering a number of issues similar to what we have found
with password retention in this study.
Fixes without modifying the Android framework. Our
current SecureTextView and KeyExporter are implemented as
a set of patches to the AOSP TextView widget. Needless to
say, this means that it’s difﬁcult or impossible to install on
most users’ phones. We considered the possibility of making
these into standalone code which could be distributed as a
separate library, allowing individual app authors to adopt our
solution without waiting for Google. A standalone imple-
mentation would require duplicating a substantial amount of
code from TextView, to ensure that we had proper behavior
under all conditions (e.g., different layout styles, different input
languages, and/or different Android versions).
12
We examined the possibility of simply subclassing the
existing TextView widget, but our patches require changing
how it stores and manages passwords; we cannot achieve the
necessary memory erasure behaviors while also reusing the
stock TextView widget class. While this is less than ideal,
we would prefer for Google to make central changes to help
app authors migrate to more secure password management
behaviors.
Fixes without modifying the apps. Since several root causes
of password retention are due to developers’ insecure prac-
tices, our ﬁxes require the insecure apps to be modiﬁed to
address these problems. Concretely, we provide APIs that can
help developers ﬁx the apps without heavy code changes. It
might be possible to develop ﬁxes that do not require app
modiﬁcation, e.g., by tracking all password usage and cleaning
them at the OS level. However, this would be very intrusive to
the Android framework and cause considerable performance
overhead. We believe that the ﬁxes we have developed could
present an easier path for adoption by app developers and the
Android community.
Usability. As developers prioritize functionality over secu-
rity [43], we have designed KeyExporter to be not only more
secure but also provide a rich set of additional functionalities,
such as hashing and PAKE. We believe that providing these
functionalities can further attract developers to integrate their
apps with KeyExporter. Moreover, studies have found that
developers do not use security APIs at all if they are too
complicated [26], [42]. KeyExporter follows this principle that
simplicity promotes security [1], and exports key materials in
a similar fashion as how existing widgets export passwords.
Centralized security management. By shifting the respon-
sibility of password management from app developers to
KeyExporter and SecureTextView, we relieve the developers
from having to reason about password security manually app-
by-app, and we can harden the system from password misuse
by the app developers. Needless to say, the design and imple-
mentation of SecureTextView/KeyExporter need to be secure;
otherwise, all apps that are integrated with them would become
vulnerable again. As KeyExporter can localize the reasoning of
passwords to this one component, such “centralized” security
management is similar in spirit to how TLS eases the burden
for developers to implement secure communication, or how
OAuth centralizes authentication by managing user credentials
in a small number of trusted service providers.
Disclosure process. We reported the issues in this paper to
all of the impacted vendors in December 2018 via their stan-
dard security vulnerability reporting channel. For Google, we
reported the problems in the AOSP keyboard, the lockscreen
processes, and the Android widget implementation, and rec-
ommended that they update the ofﬁcial documentation about
password protection best practices. We also contacted the
keyboard app developers and the OAuth team at Facebook.
Finally, we reached out to the app developers of the password
managers with proposed ﬁxes. The source code of our solution
and patches are publicly available5. We provide KeyExporter
as a standalone library, and public code samples to demonstrate
how developers can harden their apps.
5https://github.com/friendlyJLee/totalrecall
Static analysis. Google regularly adds static analysis features
to the Android Studio development environment to highlight
undesirable coding practices. If Android were to adopt more
secure alternatives to the password entry widget such as
ours, the development environment could highlight uses of
the default TextView widget and generate suitable warnings.
Moreover, a campaign by Google to improve developers’ code