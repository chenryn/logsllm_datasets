facts are reachable from the empty state.
3.3 Execution and Adversary Model
Given that protocol rules cannot generate fresh names, i.e. protocol
rules are not allowed to use Fr facts in their conclusion, we add
a special rule Fresh, independent of the protocol specification, to
model generation of fresh names:
Fresh :=(cid:2) (cid:3)−→(cid:2)Fr(x)(cid:3) where x : fresh.
To model the adversary’s actions we use the standard Dolev-
Yao network adversary, modelled by the rules depicted in Figure 3,
sharedkIsharedkRfreshnifreshnrsenc(ni,k)senc(nr,ni)h(nr)agreeni,nrOn the one hand, the prefix-closure of traces imposes an implicit
order j  e. φ(t, i).
(7)
We write Proto′ ̸|=⋆ φ to indicate that Proto′ |=⋆ φ does not hold.
As Figure 5 shows, Toy ∪ {Leak_ni} is not post-collusion secure
with respect to non-injective agreement, i.e.
Toy ∪ {Leak_ni} ̸|=⋆ ni_agreement.
(8)
The attack works with two consecutive sessions, in which a
compromised agent Eve can re-use the messages senc(ni, k) and
ni from the first session to impersonate I in the second session.
Observe that the second claim is a post-collusion claim, as the first
session is complete and no collusion occurred in the second session.
The impact of post-collusion security can depend on the circum-
stances in which a given protocol is deployed. We see from the
Toy protocol that the effects of collusion can cause an irreversible
change to the truth value of future authentication claims. Thus, a
legitimate agent playing the initiator role would not want to col-
lude with a “friend” by giving them their nonce ni, as this would
lead to impersonation. On the contrary, suppose a given protocol
is post-collusion secure with respect to a desirable authentication
property. Then, an agent can issue their one-time keys to their
friends if desired, confident that these friends will not be able to
re-use this information for later authentication.
sharedkwithIRsharedkwithRIEvefreshnifreshnrsenc(ni,k)nisenc(nr,ni)h(nr)agreeni,nrfreshnr′senc(ni,k)senc(nr′,ni)h(nr′)agreeni,nr′Out(k),
−−−−−−−−−−−−−→
−−−−−−−−−−−−−→
Out(k),
Compromise(P)
Compromise(V)
KeyGen :=(cid:2)Fr(k)(cid:3)−→(cid:2)Shk(V , P, k)(cid:3)
(cid:20)
(cid:21)
KeyRevV :=(cid:2)Shk(V , P, k)(cid:3) Compromise(V )
(cid:20)
(cid:21)
KeyRevP :=(cid:2)Shk(V , P, k)(cid:3) Compromise(P)
DBInject :=(cid:2)In(m), Compromise(X)(cid:3)−→(cid:2)Send(X, m)(cid:3)
DBSend :=(cid:2)Send(X, m)(cid:3) Send(X ,m),Action(X)
−−−−−−−−−−−−−−−−−−→(cid:2)Net(m), Out(m)(cid:3)
−−−−−−−−−−−−−−−−−→(cid:2)Recv(Y , m)(cid:3)
DBRecv :=(cid:2)Net(m)(cid:3) Action(Y),Recv(Y ,m)
(cid:21)
(cid:20)Send(P, senc(m, k)),
P1 :=(cid:2)Fr(m), Shk(V , P, k)(cid:3) Start(m)
(cid:21) Start(n),Send(V ,n)
P2 :=(cid:2)ProvSt1(P, m), In(n)(cid:3) End(m)
−−−−−−→(cid:2)Send(P, f (n, m, P))(cid:3)
(cid:21) DBSec(V ,P ,n,f (n,m,P)), End(n)
−−−−−−−−−−−−−−−−−−−−−−−−−−−→(cid:2) (cid:3)
(cid:20)Fr(n), Shk(V , P, k),
(cid:20)VerifSt1(V , P, n, m),
−−−−−−−−−−−−−−−−→
V1 :=
In(senc(m, k))
V2 :=
Recv(V , f (n, m, P))
−−−−−−−→
ProvSt1(P, m)
(cid:20)
(cid:21)
Out(n),
VerifSt1(V , P, n, m)
Figure 7: Specification rules of the DBToy protocol.
Shk are persistent. The rest of the fact symbols used in Figure 7 are
linear.
The rules DBInject, DBSend, and DBRecv restrict the Dolev-Yao
attackers’ communication with protocol participants, in order to
comply with the semantic domain of [44]. This was briefly mo-
tivated in Section 2. The aim is to capture the statement “every
message that can be received by the verifier during the fast phase
has been sent from a real physical location”. The reason behind this
is that messages cannot travel faster than light, thus the adversary
cannot instantaneously send a message to an agent (as modelled
by Dolev-Yao’s rule Inject in Figure 3). Hence, in order for the
adversary to inject data for an agent to receive, they must use a
compromised agent as the sender, and so the message takes a while
to arrive to the receiver. Note that we do not drop the traditional
Inject rule of Figure 3, but we use Recv and Send facts to model
the sending and receiving of messages during the fast phase.