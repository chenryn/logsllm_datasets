we assume that any normal stream Si can be modeled as a Poisson process, with
a ﬁxed Poisson rate λi. We then generalize this model in Section 4.2. We make
no additional assumptions on the attacking streams.
4.1 A Simple Poisson Model
We ﬁrst describe our detection algorithm and analysis for the case that p∆ is
known, and then later show how this assumption can be removed.
The Detection Algorithm. Our algorithm is simple and eﬃcient: for a given
pair of streams, the monitor watches the packet arrivals, and counts packets
on both streams until the total number of packets (on both streams) reaches a
certain threshold 8p2
1. The monitor then computes the diﬀerence in the number
1 The intuition for the parameters as well as the proof of correctness is in the analysis
∆
π
section.
Detection of Interactive Stepping Stones: Algorithms and Conﬁdence Bounds
265
Detect-Attacks (δ, p∆)
8p2
∆
π .
Set m = log 1
For m iterations
δ , n =
Observe n packets on S1 ∪ S2.
Compute d = N1 − N2. If d > p∆ return Normal.
return Attack.
Fig. 1. Algorithm for stepping-stone detection (without chaﬀ) with a simple Poisson
model
of packets of the two streams – if the diﬀerence exceeds the packet bound p∆,
we know the streams are normal; otherwise, it restarts. If the diﬀerence stays
π packets), the monitor
bounded for a suﬃciently long time (log 1
declares that the pair of streams is a stepping stone. The algorithm is shown in
Fig. 1.
δ such trials of 8p2
We note that the algorithm is memory-eﬃcient – we only need to keep track
of the number of packets seen on each stream. We also note that the algorithm
does not need to know or compute the Poisson rates; it simply needs to observe
the packets coming in on the streams.
∆
Analysis. We ﬁrst note that, by design, our algorithm will always identify a
stepping-stone pair, providing they send M packets. We then show that the false
positive rate of δ is also achieved by the algorithm. Under the assumption that
normal streams may be modeled as Poisson processes, we show three analytical
results in the following analysis:
∆
1. When p∆ is known, the monitor needs to observe no more than M =
8p2
π log 1
δ packets on the union of the two streams under consideration, to
guarantee a false positive rate of δ for any given pair of streams (Theorem 1).
2. Suppose instead that we wish to achieve a δ probability of false positive over
all pairs of streams that we examine. For instance, we may wish to achieve
a false positive rate of δ over an entire day of observations, rather than over
a particular number of streams. When p∆ is known, the monitor needs to
observe no more than M = 8p2
packets on the union of the ith
pair of streams, to guarantee a δ chance of false positive among all pairs of
streams it examines (Theorem 2).
π log i(i+1)
∆
δ
3. When p∆ is unknown, we can achieve the above guarantees with only an
O(log log p∆) factor increase in the number of additional packets that need
to observe (Theorem 3).
Below, we ﬁrst give some intuition and then the detailed theorem statements
and analysis.
Intuition. We ﬁrst give some intuition behind the analysis. Consider two normal
streams as Poisson processes with rates λ1 and λ2. We can treat the diﬀerence
266
Avrim Blum, Dawn Song, and Shobha Venkataraman
between two Poisson processes as a random walk, as shown in Fig. 2. Consider a
sequence of packets generated in the union of the two streams. The probability
λ1
that a particular packet is generated by the ﬁrst stream is
λ1+λ2 (which we
denote µ1), and probability that it is generated by the second stream is
λ1+λ2
(which we call µ2). We can deﬁne a random variable Z to be the diﬀerence
between the number of packets generated by the streams. Every time a packet is
sent on either S1 or S2, Z increases by 1 with probability µ1, and decreases by
1 with probability µ2. It is therefore a one-dimensional random walk. We care
about the expected time for Z to exit the bounded region [0, p∆], given that
it begins at some arbitrary point inside this range. If Z  p∆, then the
delay bound is violated.
λ2
1λ
1λ
1λ
1λ
-2-2
-1-1
00
11
22
Stream 1
Stream 1
Stream 1
Stream 1
Stream 2
Stream 2
Stream 2
Stream 2
2λ
2λ
2λ
2λ
(a)
(b)
Fig. 2. (a) Packets arriving in the two streams. (b) Viewing the arrival of packets as a
random walk with rates λ1 and λ2
Theorem 1. Under the assumption that normal streams behave as Poisson pro-
cesses, the algorithm Detect-Attacks will correctly detect stepping-stone at-
tacks with a false positive probability at most δ for any given pair of streams,
after monitoring 8p2
Proof. Let 0 ≤ N 1(w) − N 2(w) ≤ p∆ at total packet count w. Then, after n
further packet arrivals, we want to bound the probability that the diﬀerence is
still within [0, p∆]. Let Z = N 1(w + n) − N 2(w + n). For any given x, we have:
δ packets on the union of the two streams.
π log 1
∆
(cid:1)
(cid:2)
n−x
2
n+x
2
µ
1
n
n+x
2
P r[Z = x] =
.
Using Stirling’s approximation, for 0 ≤ x ≤ p∆ (cid:3) n
1(cid:5)
πn/2
(cid:3)
P r[Z = x] ≤ µ
n/2
n/2
1 µ
2
πn/2
(cid:4)n(cid:5)
−x
2 <
µx
1µ
µ
2
.
1
2
Therefore, over the interval of length p∆,
P r[0 ≤ Z ≤ p∆] ≤ p∆(cid:6)
P r[Z = x] <
p∆(cid:5)
πn/2
.
x=0
Substituting n =
8p2
∆
π
, we get P r[0 ≤ Z ≤ p∆] < 1
2 .
Detection of Interactive Stepping Stones: Algorithms and Conﬁdence Bounds
267
To ensure that this is bounded by the given conﬁdence level, we take m such
observations of n time steps, so that
(cid:3)
1
2
(cid:4)m ≤ δ, or
m ≥ log
1
δ
.
We need to observe m sets of n packets; therefore, we need log 1
δ intervals. (cid:4)(cid:5)
We have just shown in Theorem 1 that our algorithm in Fig. 1 will identify
any given stepping-stone pair correctly, and will have a probability δ of a false
positive for any given non-attacking pair of streams. We can also modify our
algorithm so that it only has a probability δ of a false positive among all the
pairs of streams that we observe. That is, given δ, we distribute it over all the
pairs of streams that we can observe, by allowing only
i(i+1) probability of false
i(i+1) = δ.
positive for the ith pair of streams, and using the fact that
To see why this might be useful, suppose δ = 0.001. Then, we would expect to
falsely accuse one pair out of every 1000 pairs of (normal) streams. It could be
more useful at times to be able to give a false positive rate of 0.001 over an entire
month of observations, rather than give that rate over a particular number of
streams.
(cid:7)∞
i=1
δ
δ
Theorem 2. Under the assumption that normal streams behave as Poisson pro-
cesses, the algorithm Detect-Attacks will have a probability at most δ of a
false positive among all the pairs of streams it examines if, for the ith pair of
streams, it uses a monitoring time of 8p2
packets.
π log i(i+1)
∆
δ
Proof. We need to split our allowed false positives δ among all the pairs we will
observe; however, since we do not know the number of pairs in advance, we do
not split the δ evenly.
Instead, we allow the ith pair of streams a false positive probability of
i(i+1) ,
and then use the previous algorithm with the updated false positive level. The
(cid:4)(cid:5)
result then follows from Theorem 1 and the fact that
(cid:7)∞
δ
δ
i(i+1) = δ.
i=1
The arguments so far assume that the algorithm knows the quantity p∆.
We now remove this assumption by using a “guess and double” strategy. Let
pj = 2j. When a pair of streams is “cleared” as not being a stepping-stone
attack with respect to pj, we then consider it with respect to pj+1. By setting
the error parameters appropriately, we can maintain the guarantee that any
normal pair is falsely accused with probability at most δ, while guaranteeing
that any attacking pair will be discovered with a monitoring time that depends
only on the actual value of p∆. Thus, we can still obtain strong guarantees. In
addition, even though this algorithm “never” ﬁnishes monitoring a normal pair
of streams, the time between steps at which the monitor compares the diﬀerence
N1 − N2 increases over the sequence. This means that for the streams that have
been under consideration for a long period of time, the monitor tests diﬀerences
less often, and thus does not need to do substantial work, so long as the stream
counters are running continuously.
268
Avrim Blum, Dawn Song, and Shobha Venkataraman
∆(log log p∆ + log 1
Theorem 3. Assume that normal streams behave as Poisson processes. Then,
even if p∆ is unknown, we can use algorithm Detect-Attacks as a subroutine
and have a false positive probability at most δ, while correctly catching stepping-
stone attacks within O(p2
δ )) packets, where p∆ is the actual
maximum value of N1(t) − N2(t) for the attacker.
Proof. As discussed above, we run Detect-Attacks using a sequence of “p∆”
values pj, where pj = 2j, incrementing j when the algorithm returns Normal.
As in Theorem 2, we use
j(j+1) as our false-positive probability on iteration j,
which guarantees having at most a δ false-positive probability overall. We now
need to calculate the monitoring time. For a given attacking pair, the number
of packets needed to catch it is at most:
8 · 22j
π
log j(j + 1)
(cid:3)log p∆(cid:4)(cid:6)
δ
.
δ
j=1
Since the entries in the summation are more than doubling with j, the sum is
at most twice the value of its largest term, and so the total monitoring time is
(cid:4)(cid:5)
O(p2
∆(log log p∆ + log
)).
1
δ
4.2 Generalizing the Poisson Model
We now relax the assumption that a normal process is Poisson with a ﬁxed rate
λ. Instead, we assume that a normal process can be modeled as a sequence of
Poisson processes, with varying rates, and over varying time periods. From the
point of view of our algorithm, one can view this as a Poisson process with a
user-adjustable “knob” that is being controlled by an adversary to fool us into
making a false accusation.
Note that this is a general model; we could use it to coarsely approximate
almost any distribution, or pattern of usage. For example, at a high level, this
model could approximately simulate Pareto distributions which are thought to
be a good model for users’ typing patterns [13], by using a Pareto distribution
to choose our Poisson rates for varying time periods, which could be arbitrarily
small. Correlated users can be modeled as having the same sequence of Poisson
rates and time intervals: for example, co-workers may work together and take
short or long breaks together.
Formally, for a given pair of streams, we will assume the ﬁrst stream is a
sequence given by (λ11, t11), (λ12, t12), . . ., and the second stream by (λ21, t21),
(λ22, t22), . . .. Let Ni(t) denote the number of packets sent in stream i by time
t. Then, the key to the argument is that over any given time interval T , the
number of packets sent by stream i is distributed according to a Poisson process
with a single rate ˆλi,T , which is the weighted mean of the rates of all the Poisson
(cid:7)jend
processes during that time. That is, if time interval T contains a sequence of
time intervals jstart, . . . , jend, then ˆλi,T = 1|T|
j=jstart λij tij (breaking intervals
if necessary to match the boundaries of T ).
Detection of Interactive Stepping Stones: Algorithms and Conﬁdence Bounds
269
Theorem 4. Assuming that normal streams behave as sequences of Poisson pro-
cesses, the algorithm Detect-Attacks will have a false positive rate of at most
δ, if it observes at least 7
δ intervals of n packets each, where n = 16p2
π .
∆
2 log 1
Proof. Let S(t) be the number of packets on the union of the streams at time t.
Let D(t) be the diﬀerence in the number of packets at time t, i.e. N1(t)− N2(t).
Let ˆn = 8p2
π .