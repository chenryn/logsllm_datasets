### Table VIII: Number of Passwords (out of 25,000) in Each Set Rated Among the 25% Easiest to Guess by JtR or Hashcat, but Among the 25% Hardest to Guess by a Given Meter

| Dataset | Neopets | 000webhost | Clixsense | Brazzers | Battlefield | CSDN |
|---------|----------|-------------|-----------|-----------|-------------|-------|
| Markov: Multi [53] | 11 | 15 | 11 | 21 | 19 | 16 |
| PCFG: 2016 [54] | 0 | 12 | 39 | 33 | 19 | 0 |
| Neural Network [13] | 19 | 35 | 14 | 22 | 0 | 21 |
| zxcvbn [22] | 84 | 26 | 24 | 18 | 23 | 22 |
| zxcvbn/LinkedIn-30k | 22 | 34 | 1 | 28 | 32 | 30 |

### Discussion

The table above highlights a significant discrepancy between the estimated password strength and the actual guessability. For instance, in the Neopets dataset, 11 passwords were among the 25% easiest to guess by JtR or Hashcat but were rated as among the 25% hardest to guess by the Markov: Multi meter. This indicates that a small fraction of passwords in the set had strength estimates that differed radically from real-world attack scenarios.

### Optimization Techniques and Their Impact

Our optimization techniques significantly enhance the effectiveness of transformation-based attacks. As detailed in Appendix D, we compared JtR and Hashcat both pre- and post-optimization with probabilistic approaches. Consistent with previous research [8], [13], Neural Networks performed best on a guess-by-guess basis, and probabilistic methods often outperformed pre-optimized JtR and Hashcat. However, at 10^9 guesses, post-optimized JtR performed comparably to, or better than, all other approaches except Neural Networks for four out of the six evaluation sets. These results suggest that, with our proposed configurations, JtR and Hashcat may not be as far behind probabilistic approaches as previously thought. Additionally, JtR and Hashcat generate guesses much more quickly than probabilistic methods, offering practical advantages.

### Conclusions and Discussion

We have introduced some of the first techniques for principled, scientific analysis of popular password-cracking software's most common attack, the mangled-wordlist attack. Our tools provide the first computationally efficient method to analyze password security against such attacks. We also demonstrated how our techniques enable four data-driven optimizations to improve the ordering and completeness of rule lists and wordlists, aligning our models with experienced attackers' non-public and effective configurations.

Our open-source tools directly enable real-time, server-side estimation of password strength. A company could deploy our guess-number calculator to disallow easily guessable passwords. Prior research has shown that when users are discouraged [29] or forbidden [7] from using weak passwords, they rarely choose the next most probable password. Future empirical studies are needed to understand human adaptation mechanisms [55], which attackers might encode into new transformation rules.

### References

[1] J. Bonneau, “The Science of Guessing: Analyzing an Anonymized Corpus of 70 Million Passwords,” in Proc. IEEE S&P, 2012.
[2] M. L. Mazurek, S. Komanduri, T. Vidas, L. Bauer, N. Christin, L. F. Cranor, P. G. Kelley, R. Shay, and B. Ur, “Measuring Password Guessability for an Entire University,” in Proc. CCS, 2013.
[3] D. Goodin, “13 Million Plaintext Passwords Belonging to Webhost Users Leaked Online,” October 28, 2015, https://arstechnica.com/information-technology/2015/10/13-million-plaintext-passwords-belonging-to-webhost-users-leaked-online/.
[4] X. Yang, “Chinese Internet Suffers the Most Serious User Data Leak in History,” Forcepoint Blog, December 26, 2011, https://blogs.forcepoint.com/security-labs/chinese-internet-suffers-most-serious-user-data-leak-history.
[5] D. Goodin, “Why Passwords Have Never Been Weaker – And Crackers Have Never Been Stronger,” Ars Technica, August 20, 2012, http://arstechnica.com/security/2012/08/passwords-under-assault/.
[6] C. Castelluccia, M. Dürmuth, and D. Perito, “Adaptive Password-Strength Meters from Markov Models,” in Proc. NDSS, 2012.
[7] P. Kelley, S. Kom, M. L. Mazurek, R. Shay, T. Vidas, L. Bauer, N. Christin, L. F. Cranor, and J. López, “Guess Again (and Again and Again): Measuring Password Strength by Simulating Password-Cracking Algorithms,” in Proc. IEEE S&P, 2012.
[8] B. Ur, S. M. Segreti, L. Bauer, N. Christin, L. F. Cranor, S. Komanduri, D. Kurilova, M. L. Mazurek, W. Melicher, and R. Shay, “Measuring Real-World Accuracies and Biases in Modeling Password Guessability,” in Proc. USENIX Security, 2015.
[9] M. Weir, S. Aggarwal, M. Collins, and H. Stern, “Testing Metrics for Password Creation Policies by Attacking Large Sets of Revealed Passwords,” in Proc. CCS, 2010.
[10] M. Dell’Amico and M. Filippone, “Monte Carlo Strength Evaluation: Fast and Reliable Password Checking,” in Proc. CCS, 2015.
[11] J. Ma, W. Yang, M. Luo, and N. Li, “A Study of Probabilistic Password Models,” in Proc. IEEE S&P, 2014.
[12] M. Dürmuth, F. Angelstorf, C. Castelluccia, D. Perito, and A. Chaabane, “OMEN: Faster Password Guessing Using an Ordered Markov Enumerator,” in Proc. ESSoS, 2015.
[13] W. Melicher, B. Ur, S. M. Segreti, S. Komanduri, L. Bauer, N. Christin, and L. F. Cranor, “Fast, Lean, and Accurate: Modeling Password Guessability Using Neural Networks,” in Proc. USENIX Security, 2016.
[14] M. Weir, S. Aggarwal, B. de Medeiros, and B. Glodek, “Password Cracking Using Probabilistic Context-Free Grammars,” in Proc. IEEE S&P, 2009.
[15] D. Goodin, “Anatomy of a Hack: How Crackers Ransack Passwords Like ‘qeadzcwrsfxv1331’,” Ars Technica, May 27, 2013, http://arstechnica.com/security/2013/05/how-crackers-make-minced-meat-out-of-your-passwords/.
[16] Trustwave SpiderLabs, “SpiderLabs/KoreLogic-Rules,” Sep. 2012, https://github.com/SpiderLabs/KoreLogic-Rules.
[17] KoreLogic, “Crack me if you can,” 2018, https://contest.korelogic.com/.
[18] G. Picchioni, “Hey, I Just Met You, and This is Crazy, But Here’s My Hashes, So Hack Me Maybe?” SpiderLabs Blog, Sept. 25, 2012, https://www.trustwave.com/Resources/SpiderLabs-Blog/Hey,-I-just-met-you,-and-this-is-crazy,-but-here-s-my-hashes,-so-hack-me-maybe-/.
[19] m3g9tr0n, “Cracking Story - How I Cracked Over 122 Million SHA1 and MD5 Hashed Passwords,” Thireus’ Bl0g, August 28, 2012, https://blog.thireus.com/cracking-story-how-i-cracked-over-122-million-sha1-and-md5-hashed-passwords/.
[20] A. Das, J. Bonneau, M. Caesar, N. Borisov, and X. Wang, “The Tangled Web of Password Reuse,” in Proc. NDSS, 2014.
[21] A. Greenberg, “The police tool that pervs use to steal nude pics from Apple’s iCloud,” Wired, September 2, 2014, https://www.wired.com/2014/09/eppb-icloud/.
[22] D. L. Wheeler, “zxcvbn: Low-Budget Password Strength Estimation,” in Proc. USENIX Security, 2016.
[23] H.-C. Chou, H.-C. Lee, H.-J. Yu, F.-P. Lai, K.-H. Huang, and C.-W. Hsueh, “Password Cracking Based On Learned Patterns From Disclosed Passwords,” IJICIC, vol. 9, no. 2, pp. 821–839, 2013.
[24] M. Dürmuth, A. Chaabane, D. Perito, and C. Castelluccia, “When Privacy Meets Security: Leveraging Personal Information for Password Cracking,” CoRR, vol. abs/1304.6584, pp. 1–19, Apr. 2013.
[25] R. Shay, S. Komanduri, A. L. Durity, P. S. Huh, M. L. Mazurek, S. M. Segreti, B. Ur, L. Bauer, N. Christin, and L. F. Cranor, “Can Long Passwords Be Secure and Usable?” in Proc. CHI, 2014.
[26] Y. Zhang, F. Monrose, and M. K. Reiter, “The Security of Modern Password Expiration: An Algorithmic Framework and Empirical Analysis,” in Proc. CCS, 2010.
[27] M. Dell’Amico, P. Michiardi, and Y. Roudier, “Password Strength: An Empirical Analysis,” in Proc. INFOCOM, 2010.
[28] B. Ur, P. G. Kelley, S. Komanduri, J. Lee, M. Maass, M. L. Mazurek, T. Passaro, R. Shay, T. Vidas, L. Bauer, N. Christin, and L. F. Cranor, “How Does Your Password Measure Up? The Effect of Strength Meters on Password Creation,” in Proc. USENIX Security, 2012.
[29] B. Ur, F. Alfieri, M. Aung, L. Bauer, N. Christin, J. Colnago, L. F. Cranor, H. Dixon, P. E. Naeini, H. Habib, N. Johnson, and W. Melicher, “Design and Evaluation of a Data-Driven Password Meter,” in Proc. CHI, 2017.
[30] T. Hunt, “Have I been pwned?” 2018, https://haveibeenpwned.com/.
[31] A. Narayanan and V. Shmatikov, “Fast Dictionary Attacks on Passwords Using Time-Space Tradeoff,” in Proc. CCS, 2005.
[32] R. Veras, C. Collins, and J. Thorpe, “On the Semantic Patterns of Passwords and their Security Impact,” in Proc. NDSS, 2014.
[33] Y. Chrysanthou, “Modern Password Cracking: A Hands-On Approach to Creating an Optimised and Versatile Attack,” Master’s thesis, Royal Holloway, University of London, 2013.
[34] A. Forget, S. Chiasson, P. C. van Oorschot, and R. Biddle, “Improving Text Passwords Through Persuasion,” in Proc. SOUPS, 2008.
[35] S. Fahl, M. Harbach, Y. Acar, and M. Smith, “On the Ecological Validity of a Password Study,” in Proc. SOUPS, 2013.
[36] X. de Carné de Carnavalet and M. Mannan, “From Very Weak to Very Strong: Analyzing Password-Strength Meters,” in Proc. NDSS, 2014.
[37] D. Wang, Z. Zhang, P. Wang, J. Yan, and X. Huang, “Targeted Online Password Guessing: An Underestimated Threat,” in Proc. CCS, 2016.
[38] S. Marechal, “Automatic Mangling Rules Generation,” Passwords ’12, 2012, http://www.openwall.com/presentations/Passwords12-Mangling-Rules-Generation/.
[39] P. Kacherginsky, “Smarter Password Cracking with PACK,” Passwords ’13, 2013, http://thesprawl.org/research/automatic-password-rule-analysis-generation/.
[40] Openwall, “Wordlist Rules Syntax,” 2018, https://www.openwall.com/john/doc/RULES.shtml.
[41] Hashcat, https://hashcat.net/wiki/doku.php?id=rule_based_attack.
[42] Y. Baburov, “python-chartrie,” https://github.com/buriy/python-chartrie.
[43] Llamasoft, https://github.com/llamasoft/HashcatRulesEngine.
[44] M. Burnett, “Ten Million Passwords FAQ,” February 10, 2015, https://xato.net/ten-million-passwords-faq-3b2752ed3b4c.
[45] S. Perez, “117 Million LinkedIn Emails and Passwords From a 2012 Hack Just Got Posted Online,” TechCrunch, May 18, 2016, http://tcrn.ch/23Xcd6R.
[46] Z. Li, W. Han, and W. Xu, “A Large-Scale Empirical Analysis of Chinese Web Passwords,” in Proc. USENIX Security, 2014.
[47] Hashcat Forum, https://hashcat.net/forum/thread-5486.html.
[48] Openwall, “John the Ripper’s Cracking Modes,” http://www.openwall.com/john/doc/MODES.shtml.
[49] J. Walker, “LulzSec Over, Release Battlefield Heroes Data,” Rock Paper Shotgun, June 26, 2011, https://www.rockpapershotgun.com/2011/06/26/lulzsec-over-release-battlefield-heroes-data/.
[50] J. Cox, “Nearly 800,000 Brazzers Porn Site Accounts Exposed in Forum Hack,” Vice Motherboard, September 5, 2016, https://motherboard.vice.com/en_us/article/vv7pgd/nearly-800000-brazzers-porn-site-accounts-exposed-in-forum-hack.
[51] D. Goodin, “6.6 Million Plaintext Passwords Exposed as Site Gets Hacked to the Bone,” Ars Technica, September 13, 2016, https://arstechnica.com/information-technology/2016/09/plaintext-passwords-and-wealth-of-other-data-for-6-6-million-people-go-public/.
[52] J. Cox, “Another Day, Another Hack: Tens of Millions of Neopets Accounts,” Vice Motherboard, May 5, 2016, https://motherboard.vice.com/en_us/article/ezpvw7/neopets-hack-another-day-another-hack-tens-of-millions-of-neopets-accounts.
[53] M. Golla and M. Dürmuth, “On the Accuracy of Password Strength Meters,” in Proc. CCS, 2018.
[54] S. Komanduri, “Modeling the Adversary to Evaluate Password Strength with Limited Samples,” Ph.D. dissertation, CMU, 2016.
[55] M. Wei, M. Golla, and B. Ur, “The Password Doesn’t Fall Far: How Service Influences Password Choice,” in Proc. WAY, 2018.

### Appendix

#### A. Detailed Explanations of Handling Particular Transformation Rules

In Table I, we claimed that a handful of transformation rules are not fully invertible or are not countable. Here, we detail why this is the case. We also justify our decision to enumerate guesses for rules that are only regex-invertible.

1. **Complexity of Memory Commands**:
   - JtR supports memory commands that memorize a string (M), query the memory and reject the word if unchanged (Q), insert substrings from memory into a guess at a given position (XNMI), and perform numeric operations to calculate differences (vVNM) [40]. Hashcat supports five similar memory commands.
   - Our tool handles the common special case when the Q command is both the only memory command in a rule and appears as the final transformation. Skipping a guess if the input has not changed is often desirable, so this special case is commonly used. We handle this special case by removing the target password from the set of possible preimages after inversion.
   - While this common case is covered, our analytical techniques cannot efficiently invert or count rules containing memory commands in their full generality. Consider the fourth command, vVNM. By concatenating several such commands, a rule can express any straight-line arithmetic program, and hence any computation expressible in a program with a fixed number of instructions. If JtR were to allow arbitrarily long rules with any number of variables, then in principle any computation would be possible (e.g., checking if the length of the input word is prime or represents a three-colorable graph under some unary encoding). The variables used by vVNM can be used by XNMI, making its behavior dependent on some arbitrary computation. We observe that JtR does not fully support completely arbitrary computation like this, and only allows for 11 variables, along with other length restrictions. However, it appears impossible to efficiently analyze such general computation simulated with JtR rules.

2. **Performance Tradeoffs of Enumeration / Non-Simple Regexes**:
   - While JtR and Hashcat transformations for truncation and substring extraction are regex-invertible and our tool supports comparing such regexes individually against each wordlist entry, by default we enumerate and sort guesses for such rules as if they were uninvertible. We do so for performance reasons.
   - We sampled 100 Hashcat regex-invertible rules and compared the wall-clock time of enumerating guesses versus evaluating the regex against each wordlist entry. We separately tested XATO and LinkedIn as the wordlist. We found the total time (both precomputation and evaluating 25,000 passwords from 000webhost) for the larger LinkedIn wordlist was 1.98 × 10^4 seconds for guess enumeration and 8.96 × 10^9 seconds for regex matching. For the smaller XATO wordlist, these values were 1.09 × 10^4 seconds and 6.88 × 10^8 seconds, respectively. Thus, we enumerate regex-invertible rules by default.

3. **Complexity of Hashcat Shift Case Commands**:
   - There are two Hashcat-specific transformations we can invert, yet cannot count. These transformations "lowercase the whole line, then uppercase the first letter and every letter after a space" (E) and "lowercase the whole line, then uppercase the first letter and every letter after a custom separator character" (eX).
   - Similar to purge, supporting these transformations in the general case would require detailed case analysis. Consider a rule that lowercases the whole line, then uppercases the first letter and every letter after a space, and then requires the resultant word to contain "a." If the input word has only one "a," but the character before "a" is a space, then the word is rejected. To correctly count guesses, one has to know the relative locations of all "a"s and spaces, which is inconsistent with our approach.

#### B. Evaluating Guess Number Accuracy

The lower and upper bounds on a password's guess number are computed by summing the guesses made by the rules up to and including (respectively) the rule that first guesses that password. Thus, we must ensure that `invert_rule` and `guess_count` are accurate. We did so by creating unit tests of single transformations, as well as by creating a random-rule generator, crafting 100,000 invertible rules each for JtR and Hashcat. We did not observe any false positives or negatives comparing `invert_rule` with the software's output on random samples of our evaluation sets.

To test the accuracy of `guess_count`, we focused on the complexity created by rejection transformations. Therefore, we randomly generated 100,000 JtR rules and 100,000 Hashcat rules containing at least three transformations and at least three more rejection transformations in arbitrary order. The analytical `guess_count` results exactly matched the empirical results of enumerating the guesses for all 100,000 Hashcat rules. JtR discards guesses that exactly match previous guesses. Muting this behavior results in a 100% match between the analytical `guess_count` results and the empirical results.

#### C. Detailed Comparison to Existing Password Meters / Proactive Password Checkers

Proactive password checking using a JtR or Hashcat attack as the metric of password strength entails computing a given password's guess number. Our techniques enable this to be done server-side in under a second for many combinations of rule lists and wordlists. Here, we compare the accuracy and coverage of our techniques to existing meters. For equality, we trained each meter using a sample of 10 million LinkedIn passwords [45] as the training data (probabilistic methods) or wordlist (software tools). We had to use a sample because of implementation limitations for many probabilistic approaches.

Hashcat used the Best64 rules followed by the T0XlC rules and the generated2 rules. JtR used the John rules followed by the SpiderLabs rules and the Megatron rules. As in Section VIII, we reordered these rules for each evaluation set based on the other five (JtR Reordered). As in Section X, we extended this list with "missing" rules prior to reordering (JtR Extended).

As one point of comparison, we arranged this sample of 10 million LinkedIn passwords (6 million after discarding duplicates) in descending order of frequency (LinkedIn: 10M), assigning the guess number 1 to the most frequent password, the guess number 2 to the second most frequent, and so on. To test an analogue appropriate for client-side password checking, we also tested the 30,000 most frequent of these (LinkedIn: 30k). We tested the popular zxcvbn client-side meter [22], which uses combinatorial heuristics to estimate guess numbers. For a more equal comparison with other approaches, we also tested replacing zxcvbn’s built-in dictionary of 30,000 frequent RockYou passwords with LinkedIn-30k (zxcvbn + LinkedIn-30k).

We also compared to probabilistic approaches, including a Neural Network password meter [13]. We also tested a PCFG (PCFG: 2016) that integrates probability smoothing and other enhancements over previous PCFG approaches [54]. Finally, Markov: Multi is a meter that calculates password probabilities under Markov models of different orders (n-gram sizes) [53].

To compare meters, Golla et al. recommend computing the weighted Spearman correlation (rw) between a meter’s guess number or probabilities and a ground truth source [53]. For each evaluation set, we evaluated each of the 25,000 passwords with each meter. As ground truth, we used the frequency of that password in that set (the full set, not the sample, for greater precision). Correlation values closer to 1 indicate better alignment between the meter’s ranking and the frequency counts.

Our analytical techniques for JtR and Hashcat had higher correlation (better agreement with the ground truth) for each of the six evaluation sets than both the popular zxcvbn meter and any probabilistic approach we tested (Neural Networks, Markov: Multi, PCFG: 2016), as shown in Table IX. This greater accuracy, however, comes partially at a cost of the ability to relatively rank passwords that are potentially guessable, yet non-trivial to guess. Three approaches we tested — Neural Networks, Markov: Multi, and zcxvbn — estimate a guess number for every possible password. For the remaining approaches, including JtR and Hashcat, passwords that are not guessed in the attack have no true guess number, so we assigned them a guess number one past the maximum guess number. We define a meter’s % coverage to be the percentage of passwords that are assigned a true guess number (i.e., not one past the maximum guess number). Hashcat and JtR had roughly 40% coverage for 000webhost, roughly 50% coverage for CSDN, and roughly 70%–80% coverage for the four other approaches (Table IX). Thus, these approaches cannot fully leverage the training data in rating the strength of some unseen passwords.

### Table IX: A Comparison of the Coverage and Accuracy of Server-Side (Top) and Client-Side (Bottom) Password Meters

| Meter | Battlefield Heroes | 000webhost | Neopets | Brazzers | Clixsense | CSDN |
|-------|-------------------|-------------|----------|-----------|-----------|------|
| **Type** | | | | | | |
| **%** | 40.1 | 39.5 | 39.5 | 40.3 | 12.2 | 100.0 |
| **rw** | 0.512 | 0.512 | 0.515 | 0.515 | 0.511 | 0.472 |
| **%** | 59.4 | 3.7 | 100.0 | 100.0 | 100.0 | |
| **rw** | 0.454 | 0.354 | 0.507 | 0.437 | 0.440 | |
| **%** | 73.6 | 69.8 | 69.8 | 70.9 | 37.0 | 100.0 |
| **rw** | 0.641 | 0.643 | 0.644 | 0.644 | 0.712 | 0.539 |
| **%** | 84.5 | 17.2 | 100.0 | 100.0 | 100.0 | |
| **rw** | 0.613 | 0.717 | 0.604 | 0.586 | 0.575 | |
| **%** | 83.3 | 78.4 | 78.4 | 79.4 | 46.8 | 100.0 |
| **rw** | 0.731 | 0.732 | 0.734 | 0.734 | 0.775 | 0.629 |
| **%** | 91.6 | 24.3 | 100.0 | 100.0 | 100.0 | |
| **rw** | 0.707 | 0.771 | 0.702 | 0.693 | 0.668 | |
| **%** | 69.6 | 68.2 | 68.2 | | | |

This table provides a comprehensive comparison of the coverage and accuracy of various password meters, highlighting the strengths and limitations of each approach.