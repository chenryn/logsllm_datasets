title:Let's Revoke: Scalable Global Certificate Revocation
author:Trevor Smith and
Luke Dickenson and
Kent E. Seamons
Let’s Revoke:
Scalable Global Certiﬁcate Revocation
Trevor Smith, Luke Dickinson, Kent Seamons
Brigham Young University
PI:EMAIL, PI:EMAIL, PI:EMAIL
revocation is often ignored,
their widespread adoption and use,
Abstract—Current revocation strategies have numerous issues
including
that prevent
requirements.
scalability, privacy, and new infrastructure
Consequently,
leaving clients
vulnerable to man-in-the-middle attacks. This paper presents
Let’s Revoke, a scalable global revocation strategy that addresses
the concerns of current revocation checking. Let’s Revoke
introduces a new unique identiﬁer to each certiﬁcate that
serves as an index to a dynamically-sized bit vector containing
revocation status information. The bit vector approach enables
signiﬁcantly more efﬁcient revocation checking for both clients
and certiﬁcate authorities. We compare Let’s Revoke to existing
revocation schemes and show that it requires less storage and
network bandwidth than other systems,
including those that
cover only a fraction of the global certiﬁcate space. We further
demonstrate through simulations that Let’s Revoke scales linearly
up to ten billion certiﬁcates, even during mass revocation events.
I. INTRODUCTION
In the current web Public Key Infrastructure (PKI),
Certiﬁcate Authorities (CAs)
issue and sign the X.509
certiﬁcates that secure TLS connections. It is critical to identify
any certiﬁcate that was erroneously issued or has had its key
pair compromised. Once identiﬁed, the owner of the certiﬁcate
requests the issuing CA to revoke or invalidate their certiﬁcate.
Notice of this revocation needs disseminating to all clients
that rely on the certiﬁcate. Otherwise, connections using the
compromised certiﬁcate are vulnerable to man-in-the-middle
(MitM) attacks until the certiﬁcate has expired, which can be
up to 2 years later [1]. Without accurate and timely revocation
checking, attackers can impersonate the server undetected and
glean private information such as passwords, emails, ﬁnancial
data, and other personally-identifying information.
Currently deployed revocation strategies have some critical
interfere with providing secure and practical
issues that
revocation checking. Among these concerns are scalability
[2]–[4], privacy [5], page loading delays [5], and susceptibility
to downgrade attacks [2], [5], [6]. The remaining strategies
have other debilitating weaknesses, such as requiring signiﬁcant
infrastructure changes [7], [8] or opening new attack surfaces
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.24084
www.ndss-symposium.org
[9]. Due to these critical issues, certiﬁcate revocation is ignored
by most clients, leaving many computers and mobile devices
vulnerable to attack [10].
Major browser vendors consider the security of their users a
high priority. At the same time, browsers emphasize low latency
and fast page loads to remain competitive, and mobile browsers
must consider network bandwidth usage. Because of these
concerns, combined with vulnerability to downgrade attacks,
Firefox and Chrome have reduced their support for traditional
revocation methods such as Certiﬁcate Revocation Lists (CRLs)
[2] and Online Certiﬁcate Status Protocol (OCSP) [5]. Instead,
Firefox and Chrome have both deployed custom revocation
systems to protect their users against the compromise of a
relatively few critical certiﬁcates. Liu et al. [10] additionally
found that mobile browsers do not currently evaluate certiﬁcate
revocation statuses due to the previously described concerns,
especially those relating to network bandwidth consumption.
Over the last few years, the certiﬁcate space has grown
tremendously. From January 2017 to January 2018 alone,
the number of live CA-trusted certiﬁcates observed in public
Internet scans more than doubled, growing from 30 million
[11] to over 80 million [12]. Two years later, in January 2020,
this number has increased more than ﬁvefold to over 434
million [12]. One reason for this explosive growth is the
emergence of a new CA, Let’s Encrypt [13], which freely issues
certiﬁcates through an automated system. As of January 2020,
the number of active trusted certiﬁcates signed by Let’s Encrypt
exceeded 231 million [12]. The recent efforts to promote using
only encrypted web trafﬁc [14] has also contributed to the
increase of trusted certiﬁcates. As the number of certiﬁcates in
use continues to grow, the scalability of revocation strategies
becomes increasingly essential.
While revocation strategies should maintain acceptable
network bandwidth requirements during normal conditions, it
is also imperative that they effectively handle mass revocation
events such as the period following the announcement of
the Heartbleed vulnerability. In 2014, Liu et al. [10] found
that, before the announcement of Heartbleed, the percentage
of revoked certiﬁcates was approximately 1% of all active
certiﬁcates (non-expired certiﬁcates signed by a trusted CA).
Following the announcement, the percentage spiked to nearly
11%. During this time, Cloudﬂare estimated that they incurred
an additional cost of $400,000 per month to publish their
enlarged CRL due to increased network bandwidth consumption
[15]. After measuring the effects of Heartbleed, Durumeric et al.
stated: “The community needs to develop methods for scalable
revocation that can gracefully accommodate mass revocation
events, as seen in the aftermath of Heartbleed” [16].
Despite the importance of these performance concerns,
perhaps the most troubling issue is that many revocation
strategies are subject to downgrade attacks. When a revocation
status is unavailable because the authoritative server
is
inaccessible, modern browsers “soft-fail” by assuming the
certiﬁcate in question is still valid. This default posture
shows that browsers value accessibility over protection against
the attack vectors exposed by a compromised certiﬁcate.
Soft-failing is particularly dangerous since an attacker
conducting a MitM attack using a revoked certiﬁcate can also
trivially force soft-failure by blocking outgoing requests to
verify revocation status. On this topic, Langley stated that
“soft-fail revocation checks are like a seat-belt that snaps when
you crash” [17].
These issues motivate the general requirements for an
effective revocation strategy, which Larisch et al. [11] formally
enumerated as the following six criteria that a universal
revocation strategy should fulﬁll:
1) Efﬁciency - The revocation strategy should require
minimal network bandwidth, storage, and computational
resources.
2) Timeliness - Revocation status updates should be sent
frequently to ensure that they never become stale.
3) Failure Model - The strategy should enable clients to
adopt a hard-failure policy.
4) Privacy - The strategy should preserve client
trafﬁc
privacy.
5) Deployability - The revocation strategy should be
incrementally deployable and provide incentives for
adopters.
6) Auditability - Revocation information should be auditable
by other parties.
In this paper, we present Let’s Revoke, a new revocation
strategy designed to overcome the limitations of other
revocation strategies and fulﬁll the six criteria set forth by
Larisch et al. First, we provide a survey of current revocation
strategies with their strengths and weaknesses. Second, we
describe an efﬁcient method for uniquely identifying certiﬁcates.
Third, we propose a new revocation strategy, Let’s Revoke,
and describe how it fulﬁlls the six criteria listed above and
addresses the concerns surrounding current revocation strategies.
Fourth, we compare Let’s Revoke to other proposed revocation
strategies. Fifth, we provide simulations showing the storage
requirements of Let’s Revoke for revocation spaces up to 10B
certiﬁcates and a 10% revocation percentage. While we present
Let’s Revoke in the context of the web PKI, the scheme applies
to any PKI where revocation scalability is an issue.
CRLite, a recent proposal that satisﬁes the six criteria of
a universal revocation strategy, inspired our work for more
efﬁcient revocation checking. Let’s Revoke offers improvements
over CRLite in computational resource efﬁciency, especially
network bandwidth. Our measurements presented in this paper
estimate that Let’s Revoke clients require only approximately
2
28% of the network bandwidth of CRLite. Let’s Revoke also
eliminates the necessity of CRLite to acquire the revocation
statuses of all certiﬁcates on the Internet to construct the
cascading Bloom ﬁlter each day, which would currently require
over 950 OCSP requests per second to the CA Let’s Encrypt
alone.
The contributions of the paper are an analysis showing that
Let’s Revoke requires less storage and network bandwidth
than currently deployed revocation methods, even those that
cover only a small fraction of the certiﬁcate space. Further,
we provide simulated revocation data anticipating the growth
of the certiﬁcate space to both 1B and 10B certiﬁcates. These
estimates show typical daily revocation download requirements
as 612 KB and 7.4 MB, respectively. Storage estimates also
remain manageable during mass revocation events that revoke
10% of all valid certiﬁcates.
II. RELATED WORK
Many certiﬁcate revocation proposals have arisen in the past
two decades. These strategies for certiﬁcate revocation generally
fall into one of three classiﬁcations: pull-based, push-based, or
network-assisted.1
A. Pull-Based Revocation
Pull-based revocation is synonymous with on-demand
revocation validation. Pull-based requests for a revocation
status occur only at the time a certiﬁcate needs to be validated.
Numerous revocation strategies of this type have been proposed
such as Certiﬁcate Revocation Trees [18], [19], Certiﬁcate
Revocation System [20], and Revocation Transparency [21].
Of the pull-based certiﬁcate revocation strategies, CRLs [2]
and OCSP [5] are the most commonly used today.
CRLs [2] are lists of all revoked certiﬁcates which the
issuing CA assembles, signs, and distributes. A client seeking
to check a single certiﬁcate must download and parse the
corresponding CRL to ensure the certiﬁcate is not in the list.
Scalability is the main criticism against CRLs as they can grow
large2, consuming processor, memory, storage, and bandwidth
resources. Due to these issues, Mozilla Firefox and Google
Chrome have disabled revocation checks using CRLs.
OCSP [5] responders provide a signed revocation status
for individual certiﬁcates. OCSP requires clients to make this
request for every web session initiated through HTTPS and
must wait for the OCSP response to check the revocation status
before the page can be fully loaded. In addition to page load
delays, OCSP presents a signiﬁcant privacy concern as each
client divulges its browsing history to a third party. While
some revocation strategies only share coarse-grained trafﬁc
patterns [2], OCSP divulges detailed client trafﬁc patterns to
the CA that signs the collection of certiﬁcates that the client
checks and all the nodes along the path of an unencrypted
OCSP request. Despite these concerns, most modern desktop
browsers use OCSP.
1We employ the pull-based and push-based terminology given by Larisch
et al., though clients download the revocation updates themselves [11].
2Apple once published a 76 MB CRL [10].
Generally, all pull-based certiﬁcate revocation strategies share
common features. Depending on the speciﬁc implementation,
clients typically cache responses to pull-based revocation
requests to improve access times and availability. If a request
is not cached or has expired, the client request introduces
page delays and resorts to soft-failing when the revocation
status cannot be ascertained. Thus, any issue in availability,
malicious or not, forces the client to soft-fail [22]. Because
uncached soft-failing revocation checks allow a MitM attack to
go unnoticed, pull-based certiﬁcate revocation strategies offer
little protection.
B. Push-Based Revocation
Clients using a push-based revocation strategy regularly
download revocation information at periodic intervals. In
contrast to pull-based strategies, push-based strategies do
not reveal client trafﬁc patterns as all clients receive similar
payloads. Because the data is collected and cached on the
client ahead of time, there is a higher probability that a client
can rely on the cached status information at the time of
connection. Compared to pull-based strategies, clients collect
more certiﬁcate revocation status information than necessary.
Some revocation strategies minimize this additional
bandwidth consumption by only including a small, hand-picked
set of high-priority certiﬁcates. Both Google’s CRLset and
Mozilla’s OneCRL ﬁt into this category of selective, push-based
revocation strategies.
Google pushes periodic updates to Chrome with a small
list of revoked certiﬁcates called a CRLset. This list is built
internally at Google by ﬁltering Extended Validation (EV) leaf
certiﬁcates by revocation reason. CRLSets have a maximum
size of 250 KB [4], which equates to a capacity of about 40,000
revoked certiﬁcates. While CRLSets are useful for protecting
against critical certiﬁcate compromises, they are not designed
to protect most certiﬁcates. In 2015, Liu et al. [10] found
that only 0.35% of revoked certiﬁcates had ever existed in a
CRLset.
Mozilla produces a similar revocation list called OneCRL [3].
Instead of ﬁltering through leaf certiﬁcates, OneCRL includes
only revoked intermediate certiﬁcates, which would have a
much more signiﬁcant impact if abused.
Another method to minimize bandwidth consumption is to
use a more efﬁcient data structure, such as a Bloom ﬁlter.
A Bloom ﬁlter is an append-only data structure used to test
whether a particular element is in a given set. To achieve their
efﬁciency, Bloom ﬁlters allow false positives but disallow false
negatives. Rabieh et al. [23] showed how using two Bloom
ﬁlters in tandem, one stating if a certiﬁcate is not revoked
and one stating if a certiﬁcate is revoked, drastically reduced
false-positive rates. In rare cases where the ﬁlters report a
certiﬁcate as both revoked and not revoked, an on-demand
request is necessary.
Larisch et al. [11] presented CRLite, a revocation strategy
that uses a Bloom ﬁlter cascade. CRLite allows clients to
download the revocation status of all live certiﬁcates across
the Internet in a compressed, deterministic data structure.
The cascade stores any false positive queries into another
Bloom ﬁlter that tests for the opposite value. The alternating
process repeats until a Bloom ﬁlter has no false-positive entries.
Building the ﬁlter cascade requires testing the entire set of both
non-revoked and revoked certiﬁcates through the data structure,
requiring substantial computational and network resources. In
January 2017, CRLite required 10 MB of storage with daily
updates averaging 580 KB. Using the data we collected (see
section 5) in March of 2018, we estimated that the data structure
had grown to 18.0 MB.3
C. Network-Assisted Revocation
Network-assisted revocation strategies eliminate the need for
a client to request a revocation status but instead modify the
TLS ecosystem to address revocation.
One approach is through a middlebox. Revocation in the
Middle (RITM) [8] is one such strategy that distributes
revocation information to middleboxes throughout the Internet
via a CDN. As the middlebox intercepts trafﬁc, it checks each
certiﬁcate’s revocation status and appends this status to the
connection as part of a TLS extension. Use of a middlebox
eliminates the latency of a separate revocation status check
since the middlebox is along the route of the connection.
However, this strategy requires middleboxes throughout the
Internet, potentially costly CDN access to update these systems,
and both clients and servers to adopt a new TLS extension.
As an alternative middlebox strategy, Hu et al. [24] proposed
Certiﬁcate Revocation Guard (CRG), which uses a middlebox to
intercept all TLS trafﬁc for an entity such as an organizational
gateway. This middlebox performs OCSP requests to check a
certiﬁcate revocation status. If a revoked certiﬁcate is detected,
then a malformed certiﬁcate is returned to the client, effectively
blocking the connection. This strategy does not require clients
to make any modiﬁcations to participate. However, by nature
of using a middlebox, mobile clients such as laptops and
smartphones lose protection when they leave the network.
OCSP Stapling [6], proposed in 2001, requires each website
administrator, instead of end clients, to download an OCSP
response for their certiﬁcates. The web server transmits the