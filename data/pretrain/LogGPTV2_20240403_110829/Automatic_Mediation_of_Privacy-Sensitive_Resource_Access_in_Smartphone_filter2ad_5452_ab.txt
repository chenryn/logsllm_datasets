taining consent prior to accessing potentially sensi-
tive user data on the phone and in ﬁxing problems
before submitting apps to a marketplace. Note that
our work in this paper is in the control ﬂow, not
data ﬂow space; we want to reason about whether
the acquisition points for sensitive content are well-
protected.
In this section we ﬁrst formulate the
problem of prompt placement and then discuss some
approaches for computing a valid placement.
3.1 Graph Representation
As is typical in static analysis, it is helpful to rep-
resent the program in the form of a graph, to ab-
stract away many unnecessary features of the origi-
nal source or bytecode representation.
Since our goal is to reason about prompts “guard-
ing” resource access points, we choose a represen-
tation similar to a control-ﬂow graph. Because
both prompts and resource accesses take the form
of method calls, we ﬁnd it convenient to augment
the traditional notion of basic blocks to treat call
sites specially. We use the term enhanced basic block
to emphasize the diﬀerence in construction. An en-
hanced basic block is diﬀerent from a basic block in
that only the ﬁrst and last of its instructions can be
(method) calls. Consequently, call instructions exist
USENIX Association  
22nd USENIX Security Symposium  117
in a block of their own. (First and last instructions
can also be jumps, just as in the case of regular basic
blocks.)
Our
representations also need to be inter-
procedural: we need to be able to handle prompts
that are located outside of the method in which the
resource access takes place. This is especially neces-
sary given that WP apps are written in .NET, where
methods generally tend to be small. We therefore
augment the control glow graph with call and return
edges denoted as C below.
Deﬁnition 1 A resource access prompt place-
Let P =
ment problem is deﬁned as follows.
(cid:30)N, A, B, E, C,L(cid:28) be a tuple with the following com-
ponents:
• N :
set of enhanced basic blocks in the pro-
gram consisting of a sequence of instructions
N = n1, n2, . . . nk. For simplicity, we as-
sume that graph G has unique entry and exit
nodes Nentry, Nexit ∈ N .
• A ⊂ N : set of resource access points;
• B ⊂ N : set of enhanced basic blocks located
within background tasks and (third-party) li-
braries; we assume that Nentry and Nexit are
outside background tasks and libraries;
• E: intra-procedural control ﬂow edges;
• C: inter-procedural call and return edges.
• L = (cid:30)R,∧(cid:28): the semi-lattice of access permis-
sions with meet operator ∧1.
Intuitively, this representation is an expanded inter-
procedural control ﬂow graph G = (cid:30)N, E ∪ C(cid:28).
3.2 Valid Placement
Based on the challenges described in Section 2.2, we
proceed to formulate what it means to have a valid
placement of resource access prompts.
Deﬁnition 2 We say that placement P ⊂ N is a
valid placement for a prompt placement problem P =
(cid:30)N, A, B, E, C,L(cid:28) if the following conditions hold for
every runtime execution of the app:
• Safe: Every access to resource r ∈ R is preceded
by a prompt check for r.
• Visible: No prompt is located within a back-
ground task or a library.
1We assume that in the general case it is possible for per-
missions to subsume one another, like in the case of ﬁne- and
coarse-grained GPS locations, giving rise to a partial order,
although we currently do not strictly need this kind of support
in our implementation.
Check if access is 
adequately protected
no
Dominator-based 
strategy successful? 
no
Try backward 
placement strategy
Figure 6: Analysis steps.
• Frugal: Prompt for r ∈ R is never invoked
unless it is either followed by a call to get(r)
or an exception occurs2.
• Not-repetitive: Prompt for permission r2 ∈
R is never invoked if permissions for r1 ∈ R
have already been granted and r2 (cid:22) r1 (that
is, r1 is at least as or more permissive than r2).
3.3 Solution Outline
We provide intuition for our solution in the remain-
ing sections; Section 4 gives the actual algorithms.
Figure 6 shows the overall ﬂow of our analysis. Given
a graph with well-identiﬁed resource access points,
a safe placement is relatively easy to come up with.
The main obstacle is the fact that we cannot always
put prompts right before accesses, because some-
times accesses are within background tasks or, more
frequently, in libraries (violating the visible require-
ment).
Intuitively, we can start with resource access
points A and move the prompts up until we are
outside of background tasks. The downside of this
approach is a possibility of moving these prompts
too far (to the beginning of the app in the most
extreme case), which would violate the frugal re-
quirement. This gives rise to a notion of a prompt
being needed at a particular point, for which we use
the term anticipating, common in compiler litera-
ture [4]. By way of example, for the code snippet in
Figure 7, location access is anticipating before line 3,
but it is not anticipating before the if on line 2, be-
cause of the else branch. So placing the prompt on
line 1 leads to unnecessary prompting, violating the
requirement of being frugal .
1.
2. if(P){
3.
4. } else {
5.
x++;
6. }
var l = getLocation();
Figure 7: Conditional location access.
2Note that this notion of frugality is optimized for runtime
savings, not necessarily savings in terms of code size.
118  22nd USENIX Security Symposium 
USENIX Association
entry
1
exit
4
5
2
3
entry
1
4
2
3
5
exit
Figure 8: Graph (left) and its dominator tree (right).
Node 5 is a resource access node within a library.
Deﬁnition 3 We say that basic block B ∈ N is r-
anticipating if every path from B to Nexit passes
through a resource access of type r.
Intuitively, placing prompts for resource accesses of
type r at r-anticipating nodes is necessary because
these nodes are guaranteed to require them eventu-
ally; in other words, these placements will be frugal .
Finally, the discussion so far has not considered
the case of prompts granting permissions of diﬀer-
ent “strength”, resulting in potentially unnecessary
prompts. This suggests that the notion of being an-
ticipating should be deﬁned not globally, but with
respect to a particular kind of resource, taking into
account the lattice of resource access permissions.
Dominator-based Approach: Using the notion
of dominators in the graph [4] we can abstract away
unnecessary details. Recall that we say that node
d ∈ N dominates node n ∈ N if every path from
Nentry → n passes through d. Dominator rela-
tionships induce a dominator tree over the set of
nodes N . An example of such a dominator tree for
a graph in Figure 8a is shown in Figure 8b.
By this deﬁnition, dominator-based placement is
an easy way to “block” access to a particular resource
access. The most immediate approach is to place
prompts on the nodes dominating the resource ac-
cess node.
Of course, since we want a placement as close as
possible to the access point, we will prefer the im-
mediate dominator of the resource access node. By
deﬁnition, we will have a safe placement, because
∀ a ∈ A, every path from Nentry → a must pass
through idom(a), the immediate dominator of a.
This simple approach suﬀers from two problems:
• Background and library nodes can invalidate
immediate dominator-based placement. To deal
with the issue of visibility, we can shift the
prompts up in the dominator tree.
• Immediate dominator-based placement can vi-
olate the frugal condition. Indeed, consider the
location access at line 3 in Figure 7.
Its im-
mediate dominator is the if(P) node. However,
this node is not location-anticipating, because
the else branch is not accessing the location.
A viable approach is therefore to start at the re-
source access node and walk up the dominator tree
until we encounter a node that is not in the back-
ground or a library. We are guaranteed to encounter
such a node eventually, because sooner or later we
will encounter Nentry, which is a foreground non-
library node by Deﬁnition 1.
For the graph in Figure 8, node 5 is a library node.
Nodes 1 and Nentry are in the cover for node 5.
Node 1 is the immediate cover of 5. Our approach,
therefore, will choose node 1 for a prompt protect-
ing node 5, but, unfortunately, this placement will
violate the frugality condition.
Backward Placement:
Sometimes dominator-
based placement will backtrack “too far” in the graph
to become unnecessary — in other words, not fru-
gal . In these cases, we propose an alternative strat-
egy called backward placement, which often avoids
this problem. Backward placement explores the pre-
decessors of the resource access node and ﬁnd an
individual separate place for a prompt for each of
them. For node 5 in Figure 8, both predecessors 2
and 4 present valid placement opportunities, which
are also frugal. Frequently, the backward placement
approach will yield a valid placement. The concern
with this strategy is two-fold:
• This approach may not scale well, as it involves
an exponential graph search. While this is true
in general, in practice we frequently ﬁnd a valid
placement within several nodes, as detailed in
Section 5.
• More prompts will be created compared to the
dominator-based approach. (Indeed, in our Fig-
ure 8 example, we inserted two nodes instead of
one.) More inserted prompts may increase the
size of the rewritten app and may also make
manual validation of placement results more
challenging and time-consuming.
Unlike dominator-based placement, there is a possi-
bility of passing through prompt placement nodes
multiple times at runtime. To see this, consider
adding a backward edge from 3 → 1 in Figure 8.
USENIX Association  
22nd USENIX Security Symposium  119
n (cid:28)∈ G.Background ∧ n (cid:28)∈ G.Libraries
if ¬HasPrompt(G, a.Type, a) then
// Try dominator-based ﬁrst
P lacement ← ∅
success ← InsertPrompt-D(G, a, ant, idom)
if ¬ success then
// Try backward placement next
P lacement ← ∅
InsertPrompt-B(G, a, ant)
end if
if IsAnticipating(n, a.Type, ant) ∧
then
Placement ← Placement ∪ {n}
return true
else
n ← idom(n) (cid:19) Proceed to the immediate dominator
end if
1: function InsertPrompt(G, a, ant, idom)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11: end if
12: end function
13:
14: //Dominator-based placement
15: function InsertPrompt-D(G, a, ant, idom)
16: n ← a
17: while n (cid:28)= Nentry do
18:
19:
20:
21:
22:
23:
24:
25:
26: end while
27: return false
28: end function
29:
30: //Backward search placement
31: function InsertPrompt-B(G, a, ant)
32: Occurs-check(a)
33:
34:
35:
36:
37:
38: else
39:
40:
41:
42:
43:
44:
45:
46: end if
47: end function
48:
49: //Helper function to check if n is anticipating for r ∈ R
50: function IsAnticipating(n, r, ant)
r(cid:31) ← ant(n)
(cid:19) Computed prompt type at n
51:
(cid:19) True if r(cid:31) is more permissive
return r (cid:21) r(cid:31)
52:
53: end function
(cid:19) Prevent inﬁnite recursion
if ¬IsReachable(a) ∨ (IsAnticipating(a, a.Type, ant)
then
Placement ← Placement ∪ {a}
return true
∧ a (cid:28)∈ G.Background ∧ a (cid:28)∈ G.Libraries)
for all p ∈ G.predecessors(a) do
success ← InsertPrompt-B(G, p, ant)
if ¬success then
return false
end if
end for
return true
(cid:19) Predecessors
(cid:19) One of the predecessors failed
(cid:19) All predecessors succeeded
Figure 9: Insertion of resource access prompts. G is the
graph; a is the access node; ant : N → 2R is the antic-
ipating lookup map computed as speciﬁed in Figure 10,
and, ﬁnally, idom is the immediate dominator relation.
This edge does not aﬀect the dominator tree or
dominator-based placement. If we place prompts at
nodes 2 and 4 for resource access at node 5, there is
a possibility of encountering the prompt at node 2
multiple times as we go through the loop 1 → 2 → 3.
This kind of double-prompting violates the not-
repetitive condition in Deﬁnition 2. A simple way
to address this is to record user consent in app’s iso-
lated storage for both the current runtime session
and future app invocations, as shown in Section 4.3.
Semi-lattice
Top
Initial value
2R, the power set of R
L
(cid:20)
∅
init(n) ∅
Transfer func. T F (n) (cid:31) add r to set
identity
Meet operator ∧(x, y) union x ∪ y
Direction
backward
if n is an access
for r ∈ R
otherwise
Figure 10: Dataﬂow analysis formulation for comput-
ing anticipating nodes: ∀n ∈ N , we compute the set of
resource types that node n is anticipating.
3.4 Placement Algorithm
In our evaluation section, we will examine the trade-
oﬀs between the dominator-based and backward
placement strategies. To summarize, this is an out-
line of our placement approach:
1. For every r ∈ R and every node n ∈ N , compute
2. Merge values by meeting them in the semi-
its r-anticipating value Ar(n).
lattice L = (cid:28)R,∧(cid:25) for all resource types:
A(n) = (cid:30)r∈R
Ar(n)
3. For every resource access a of type r, use a back-
ward search to ﬁnd if it is adequately covered
by existing prompts of type r(cid:30) such that r (cid:24) r(cid:30).
4. If not, proceed to insert a prompt of type A(n)
using either a dominator-based or a backward
placement strategy.