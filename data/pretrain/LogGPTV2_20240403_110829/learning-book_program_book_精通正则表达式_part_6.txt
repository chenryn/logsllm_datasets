普通观众不明白魔术师掌握的那些技巧而已。如果你也懂得如何在手中藏一张牌，那么，
像天书了。
以文件名做类比
The Filename Analog!
选择这本书的读者，大概对“正则表达式”多少有点认识。即便没有，也应该熟悉其中的
基本概念。
我们都知道，report.txt是一个文件名，但是，如果你用过Unix或者DOS/Windows的话，
）
者“通配符”wildcards）中，有些字符具有特殊的意义。星号表示“任意文本”，问号表示
.txti结尾，所以，它的意思是：选择以任意文本开头，以.txt结尾的所有文件。
大多数系统都提供了少量的附加特殊字符（additionalspecialcharacters），但是，总的来说，
这些文件名模式（filenamepatterms）的表达能力还很有限。不过，因为这类问题的领域很
狭窄一一只涉及文件名，所以这算不上缺陷。
不过，处理普通的文本就没有这么简单了。散文、诗、程序代码、报表、HTML、表格、单
词表…到你想得出的任何文本。如果某种特殊的需求足够专业，例如“选择文件”，我们
可以发明一些特殊的办法和工具来解决问题。不过，近年来，一种“通用的模式语言”
（generalizedpatternlanguage）已经发展起来，它功能强大，描述能力也很强，可以用来解
决各种问题。不同的程序以不同的方式来实现和使用这种语言，但是综合来说，这种功能
强大的模式语言和模式本身被称为“正则表达式”（regularexpression）。
---
## Page 31
作为编程语言的正则表达式
以语言做类比
The Langmage Analogy
完整的正则表达式由两种字符构成。特殊字符（specialcharacters，例如文件名例子中的*）
称为“元字符”（metacharacters），其他为“文字”（literal），或者是普通文本字符（normaltext
characters)。正则表达式与文件名模式（filenamepattern）的区别就在于，正则表达式的元
字符提供了更强大的描述能力。文件名模式只为有限的需求提供了有限的元字符，但是正
则表达式“语言”为高级应用提供了丰富而且描述力极强的元字符。
为了便于理解，我们可以把正则表达式想象为普通的语言，普通字符对应普通语言中的单
词，而元字符对应语法。根据语言的规则，按照语法把单词组合起来，就会得到能传达思
想的文本。在E-mail的例子中，我用正则表达式FromLSubject：来寻找以‘From：'
或者‘Subject：开头的行。下画线标注的就是特殊字符，稍后我们将解释它们的含义。
就像学习任何一门外语一样，第一眼看上去，正则表达式很不好理解。这也是那些对它只
有粗浅了解或者根本不了解的人觉得正则表达式很神奇的原因。但是，就像学日语的人很
快就能理解正规表现简单上！（注2）一样，读者很快也能够彻底明白下面这个正则表
达式的含义：
s!([0-9]+(\. [0-9]+)(3})!$1!
这个例子取自一个Perl脚本，我的编辑器用它来修改手稿。手稿的作者错误地使用了
串）。其中的奥妙就在于使用Perl的文本替换命令，使用：
([0-9]+(\.(0-9]+)(3})
把IP地址两端的tag替换为，而不改动其他的标签。在后面的章节中，
读者会了解这个表达式的构造细节，然后就能按照自己的需求，在自己的应用程序或者开
发语言中应用这些技巧。
注2：这句话的意思是，“正则表达式很简单！”。有趣的是，就像第3章介绍的，“正则表达式”
这个术语来自形式代数。问我这本书的主题的人，如果对这个概念不熟悉，听到“正则表
达式”多半会满脸茫然。正则表达式在日文中写作，正规表现，同它的英文名宇一样不好
理解，但是我用日语来回答通常会令人反应更奇怪。因为在日文中，“正则”（regular）很
不章地与一个表示“生殖器官”的医学术语发音相同。读者可以想象，在我没有解释之前，
人们会有多么惊奇。
---
## Page 32
6
第1章：正则表达式入门
本书的目的
你或许不需要重复把替换为的工作，不过很可能需要解决“把这些文字
替换为那些文字”的问题。本书的目的不是提供具体问题的解决办法，而是教会读者利用
正则表达式来思考，解决遇到的各种问题。
正则表达式的思维框架
The Regular-Expression Frame of Mind
我们将会看到，完整的正则表达式由小的构建模块单元（buildingblockunit）组成。每个单
独的构建模块都很简单，不过因为它们能够以无穷多种方式组合，将它们结合起来实现特
殊目标必须依靠经验。所以，本章提供了有关正则表达式的若干概念的总体描述。这一章
并没有艰深的内容，而是为本书其余章节的知识打下基础，在深入探索正则表达式之前，
把相关事宜阐释清楚。
某些例子看起来可能有点无聊（因为它们确实无聊），但它们代表了一类需要完成的任务，
只是读者目前可能还没有意识到。即使觉得每个例子的意义都不大也不必担心，慢慢理解
其中的道理就好。这就是本章的目的。
对于有部分经验的读者
IfYou Have SomeRegular-Expression Experience
如果读者已经熟悉正则表达式，这些综述便没有太大价值，但务必不要忽略它们。你或许
明白某些元字符的基本意义，但某些思维和看待正则表达式的方式可能是你不了解的。
就像真正值演美和仅仅会弹奏之间差别迥异一样，了解正则表达式和真正理解正则表达式
并不是一回事。某些内容可能会重复读者已经了解的知识，但方式可能与之前的不同，而
且这些方式正是真正理解正则表达式的第一步。
检索文本文件：Egrep
Searching Text Files: Egrep
文本检索是正则表达式最简单的应用之一一一许多文本编辑器和文字处理软件都提供了正
则表达式检索的功能。最简单的就是egrep。在指定了正则表达式和需要检索的文件之后，
egrep会尝试用正则表达式来匹配每个文件的每一行，并显示能够匹配的行。
---
## Page 33
正则表达式的思维框架
/
许多系统——例如DOS、MacOS、Windows、Unix等等一都对应有免费提供的egrep。在
本书的网页http://regex.info上可以找到获得对应读者操作系统的egrep拷贝的链接。
回到第3页的E-mail的例子，真正用来从E-mail文件中提取结果的命令如图1-1所示。egrep
把第一个命令行参数视为一个正则表达式，剩下的参数作为待搜检索的文件名。注意，图
1-1中的单引号并不是正则表达式的一部分，而是根据commandshell需要添加的（注3)。
使用egrep时，我通常用单引号来包围正则表达式。如果要在支持对正则表达式提供了完整
支持的程序设计语言中使用正则表达式一这是下一章开头的内容，重要的问题是知道特
殊字符有哪些，具体文本是什么，针对什么对象（什么表达式，什么工具软件），以及按何
种顺序解释这些字符。
shell
提示符
提交给egrep的正则表达式
mailbox-file
第一个命令行参数
图1-1：通过命令行调用egrep
我们马上就能明白，这个正则表达式的各个部分都是什么意思，但已经知道某些字符具有
特殊含义的读者或许能够猜出大概了。在这里，和1都是正则表达式的元字符，它们与
其他字符结合起来，实现我们期望的功能。
如果一个正则表达式不包括任何egrep支持的元字符，它就成了一个简单的“纯文本”检索。
例如，在一个文件中检索cat，会显示任何包含c'a*t这3个连续字母的行。例如，它包
括所有出现了vacation的行。
注3：commandshell是操作系统的一部分，用来接收用户的命令，执行用户请求的程序。在我使
用的shell中，单引号用来分组命令参数，告诉shell不必关心其中的内容。如果不这样写，
shell或许会认为，我在正则表达式中使用的“*’是需要解释的文件名模式的一部分。而
这不是我的意思，所以我用单引号在shell中“屏蔽（hide）”元字符。使用COMMAND.COM
或者CMD.EXE的Windows用户可能需要使用双引号而不是单引号。
---
## Page 34
8
第1章：正则表达式入门
即便这行文本中不包含单词cat，vacation中包含的c'a't序列仍然符合匹配条件。如果
某行中包含vacation，egrep就会把它显示出来。关键就在于，此处进行的正则表达式搜
索不是基于“单词”的—egrep能够理解文件中的字节和行，但它完全不理解英语（或者
其他任何语言）的单词、句子、段落，或者是其他复杂概念。
Egrep元字符
EgrepMetncharacters
现在我们来看egrep中支持正则表达式功能的元字符。我会用几个例子来简要介绍它们，把
详细的例子和描述留到后面的章节。
印刷体例在开始之前，请务必回顾前言第V页上解释的体例说明。本书使用了一些新的文
字形式，所以某些体例读者初次接触可能并不熟悉。
行的起始和结束
StartandEndofthieLine
行的开始，‘s代表结束。我们曾经看到，正则表达式cati寻找的是一行文本中任意位置的
配的字符）“锚定”（anchor）在这一行的开头。同样，cat$i只寻找位于行末的c'a't，例如
以scat结尾的行。
读者最好能养成按照字符来理解正则表达式的习惯。例如，不要这样：
^cat匹配以cat开头的行
而应该这样理解：
“~cati匹配的是以c作为一行的第一个字符，紧接一个a，紧接一个t的文本。
这两种理解的结果并无差异，但按照字符来解读更易于明白新遇到的正则表达式的内部逻
辑。egrep会如何解释~catSi、~si和单个的~呢？请翻到下页查看答案。
脱字符号和美元符号的特别之处就在于，它们匹配的是-一个位置，而不是具体的文本。当
然，有很多方式可以匹配具体文本。在正则表达式中，除了使用cat之类的普通字符，还
可以使用下面几节介绍的元字符。
---
## Page 35
Egrep元字符
9
字符组
Character Classes
匹配若干字符之一
达式结构体（construct）[]。它容许使用者列出在某处期望匹配的字符，通常被称作字符
组（characterclass（译注2））。e：匹配字符e，aj匹配字符a，而正则表达式[ea]能匹配a
或者e。所以，gr[ea]y的意思是：先找到g，跟着是一个r，然后是一个a或者e，最后
是一个Y。我很不擅长拼写，所以总是用正则表达式从一大堆英文单词中找到正确的拼写。
我经常使用的一个正则表达式是sep[ea]r[ea]tel，因为我从来都记不住这个单词到底是
法，而正则表达式就是我的领路人。
请注意，在字符组以外，普通字符（例如'gr[ae]yi中的'gi和'r:）都有“接下来是（andthen）”
的意思一“首先匹配g，接下来是r…”。这与字符组内部的情况是完全相反的。字
符组的内容是在同一个位置能够匹配的若干字符，所以它的意思是“或”。
来看另一个例子，我们还必须考虑单词的第一个字母为大写的情况，例如[Ss1mith。请
记住，这个表达式仍然能够匹配内嵌在其他单词里头的smith（或者是Smith），例如
blacksmith。在综述阶段，我不打算为这种情况费太多笔墨，但是这确实是某些新手遇到
的问题的根源。等了解了更多的元字符以后，我会介绍一些办法来解决单词嵌套的问题。
在一个字符组中可以列举任意多个字符。例如[123456]：匹配1到6中的任意一个数字。
这个字符组可以作为的一部分，用来匹配、、等等。在搜索
HTML代码的头文件时这非常有用。
在字符组内部，字符组元字符（character-class metacharacter）‘-’（连字符）表示一个范围：
与是完全-一样的。[0-9]和[a-z]是常用的匹配数字和小写字
母的简便方式。多重范围也是容许的，例如[0123456789abcdefABCDEF]；可以写作
用于处理十六进制数字。我们还可以随心所欲地把字符范围与普通文本结合起来：
[0-9A-Z_！.？]能够匹配一个数字、大写字母、下画线、惊叹号、点号，或者是问号。
请注意，只有在字符组内部，连字符才是元字符一否则它就只能匹配普通的连字符号。其
实，即使在字符组内部，它也不一定就是元字符。如果连字符出现在字符组的开头，它表
示的就只是一个普通字符，而不是一个范围。同样的道理，问号和点号通常被当作元字符
处理，但在字符组中则不是如此（说明白一点就是，[0-9A-Z_！.？]里面，真正的特殊字符
就只有那两个连字符）。
为“字符组”。
---
## Page 36
10
第1章：正则表达式入门
分析~catS、~S和~]
第8页问题的答案
^catS：文字意义：匹配的条件是，行开头（显然，每一行都有开头），然后是字母
c'a't，然后是行末尾。
应用意义：只包含cat的行-没有多余的单词、空白字符.…..只有‘cat"。
I~S1
文字意义：匹配的条件是，行开头，然后就是行末尾。
应用意义：空行（没有任何字符，包括空白字符）。
文字意义：匹配条件是行的开头。
应用意义：无意义！因为每一行都有开头，所以每一行都能匹配一空行也
不例外。
不妨把字符组看作独立的微型语言。在字符组内部和外部，关于元字符的规定（哪
些是元字符，以及它们的意义）是不同的。
我们很快就会看到更多的例子。
排除型字符组
用~]取代[]，这个字符组就会匹配任何未列出的字符。例如，【^1-6]匹配除了1
到6以外的任何字符。这个字符组中开头的表示“排除（negate）”，所以这里列出的不
是希望匹配的字符，而是不希望匹配的字符。
读者可能注意到了，这里的~和第8页的表示行首的脱字符是一样的。字符确实相同，但意
义截然不同。英语里的“wind”，根据情境的不同，可能表示一阵强烈的气流（风），也可
能表示给钟表上发条：元字符也是如此。我们已经看过用来表示范围的连字符的例子。只
有在字符组内部（而且不是第一个字符的情况下），连字符才能表示范围。在字符组外部，
表示一个行锚点（lineanchor），但是在字符组内部（而且必须是紧接在字符组的第-一个方
括号之后），它就是一个元字符。请不要担心一这就是最复杂的情况，接下来的内容比这
简单。
---
## Page 37
Egrep元字符
II
来看另一个例子，我们需要在一堆英文单词中搜索出一些特殊的单词：在这些单词中，字
母a后面的字母不是1。用正则表达式来表示，就是q（^u]。用这个正则表达式来搜索我
手头的数据，确实得到了一些结果，但显然不多，其中还有些是我没见过的英文单词。
下面是结果（我输入的命令用粗体表示）：
egrep'q[^u]'word.list
Iraqi
Iraqian
miqra
qasida
qintar
ydob
zaqqum%
其中有两个单词值得注意：伊拉克“Iraq”和澳大利亚航空公司的名字“Qantas”。尽管它们
都在word.list文件中，但都不包含在egrep结果中。为什么呢？请动动脑筋，然后翻到下
一页来检查你的答案。
请记住，排除型字符组表示“匹配一个未列出的字符（matchacharacterthat'snotlisted）”，
而不是“不要匹配列出的字符（don'tmatchwhatislisted）”。这两种说法看起来-一样，但是
Iraq的例子说明了其中的细微差异。有一种简单的理解排除型字符组的办法，就是把它们
看作普通的字符组，里面包含的是除了“排除型字符组中所有字符”以外的字符。
用点号匹配任意字符
Matcling Any Character with Dot
元字符.（通常称为点号dot或者小点poinr）是用来匹配任意字符的字符组的简便写法。
如果我们需要在表达式中使用一个“匹配任何字符”的占位符（placeholder），用点号就很
方便。例如，如果我们需要搜索03/19/76、03-19-76或者03.19.76，不怕麻烦的话用一
个明确容许‘/、-、’的字符组来构建正则表达式，例如03[-./]19[-./]76。也可
以简单地尝试03.19.76。
读者第一次接触这个表达式时，可能还不清楚某些情况。在03[-./]19[-./176中，点号
并不是元字符，因为它们在字符组内部（记住，在字符组里面和外面，元字符的定义和意