parallel are false positives. In fact, we can expect the number of
structural changes to decrease as the tree grows. Based on this
observation, in the next section we propose a new technique
to increase the concurrency of P-SMR in the presence of
dependent commands.
B. Overview of opt-PSMR
Inspired by the inefﬁciency of P-SMR at executing depen-
dent commands, and based on our observation in Section IV-A,
in this section we propose an optimistic technique to increase
concurrency of P-SMR.
Considering the impact
that service state can have on
the command interdependencies, we differentiate between two
types of interdependencies: we refer to command interde-
pendencies as static, if they are determined irrespective to
the service state, and as dynamic,
if they are determined
with respect to the service state. Static interdependencies are
known before runtime, that is, they can be assessed upon
inspecting the command’s code and parameters. For example,
two updates on the same entry are statically dependent. Dy-
namic interdependencies can only be known when commands
are executed, based on the state of the replica. Two insert
operations on different keys are dynamically dependent if they
lead to structural changes in the tree.
We recall from Section III-F that in P-SMR commands
are mapped to multicast groups by the client proxies. Since
client proxies do not have access to the service state, which
resides on the servers, client proxies cannot exploit dynamic
dependencies among commands. Client proxies handle dy-
namic dependencies by conservatively declaring the involved
commands as dependent. In opt-PSMR, clients handle dy-
namic dependencies by optimistically declaring the involved
commands as independent. Dynamic dependencies are tracked
at the servers. Upon detecting a dynamic dependency among
commands, the replica multicasts the command again, as a
dependent command. Note that dynamic dependency tracking
must be deterministic at replicas.
We deﬁne CC-G (conservative command-to-group) and
OC-G (optimistic command-to-group) functions, for mapping
the commands to multicast groups. CC-G is conservative
mapping used by P-SMR: it declares two commands depen-
dent if they have static dependencies or could possibly have
dynamic dependencies. OC-G is built on static dependencies
only; commands that may have dynamic dependencies only
are deemed independent.
A client proxy in opt-PSMR calls the OC-G function to de-
termine the groups to which commands will be optimistically
multicast. Whenever a worker thread tk on a server proxy si
delivers an optimistically multicast command C, tk performs
050010001500200025003000010255075100Throughput (Kcps)Percentage of dependent commandsP-SMR  SMR  (cid:31)a safety check on C against the current state of the service.
A safety check is application speciﬁc and should be provided
by the application developer or automatically computed from
the service code. During the safety check, tk seeks to ﬁgure
the consequences of C’s execution on the state. Depending
on the application, the changes of a command’s execution on
the state can either be identiﬁed without actually executing the
command or during the execution of the command. Two cases
can happen as the result of safety check:
Fail. If the safety check identiﬁes that the modiﬁcations of C to
the service state are detrimental to the concurrent execution of
other threads, tk fails C and calls the CC-G function to identify
the set of new groups to which the failed command must be
sent. In this case, we say that the optimistic assumption has
failed. If the safety check can be performed without executing
C, the replica’s state remains intact and a rollback is not
needed. Otherwise, if the safety check requires executing C,
then a fail must rollback C’s effects to the replica.
Pass. If the safety check decides that C’s execution will not
interfere with the concurrent execution of other commands we
say that the optimistic assumption has succeeded. In this case
if C was not executed during the safety check, tk executes
it. Otherwise, tk continues with the rest of the delivered
commands.
Since a failed command passes through the agreement
layer twice and it might require rollbacks, the cost of failed
commands is reﬂected on the latency and possibly the CPU
usage of the replicas, specially if rollbacks are needed. Thus
the optimistic assumption is of practical interest if for a given
execution, the ratio of fails is lower than the ratio of passes.
We illustrate opt-PSMR with the B+-tree example. In P-
SMR as a client proxy is not aware of the state changes caused
by the insert and delete operations, it conservatively
categorizes them as dependent and multicasts them to all
the multicast groups. A client proxy in opt-PSMR, however,
selects the multicast groups of these operations based on
the keys they access, similarly to the read and update
operations. The optimistic assumption in this example is that
the consequences of insert and delete operations will at
most affect the node that contains the accessed key. Basically,
the CC-G and OC-G functions can be deﬁned as follows, where
K is the number of threads on replicas and M is the value of
the largest key in the key space:
function CC-G(cid, x)
if cid ∈ {read,update} : return((cid:98)xK/M(cid:99))
else return(ALL GROUPS)
function OC-G(cid, x)
return((cid:98)xK/M(cid:99))
If a thread tk on a server proxy delivers an insert or
delete operation that is multicast optimistically, it issues
a safety check against the current state of the tree. If tk
ﬁgures that the execution of the insert or delete will
cause changes that will propagate to other nodes of the tree,
it will fail the command and call the CC-G function and con-
servatively retry the command. Otherwise tk can successfully
execute the command. We note that in the B+-tree example,
the potential changes of a command’s execution on the tree’s
structure can be determined without actually executing it.
Therefore rollbacks are never needed.
Algorithm 1: Optimistic P-SMR (opt-PSMR)
1: A client proxy c executes a call to command C with
upon deliver([γ, mode, c, cid, input]) for the ﬁrst time
if γ is a singleton then
if mode = opt then
{is C in optimistic mode?}
{γ is the set of groups involved in C}
if safety check(cid, input) fails then
γ ← CC-G(cid, input)
multicast(γ, [γ, csv , c, cid, input])
identiﬁer cid and input and output parameters as follows:
γ ← OC-G(cid, input)
multicast(γ, [γ, opt, c, cid, input])
wait for ﬁrst response
output ← response
return
2:
3:
4:
5:
6:
7: Thread tk at a server proxy si executes a command as follows:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
execute cid with input parameters
send response to c
for each j (cid:54)= k such that gj ∈ γ
// Thread tk is in synchronous mode
e ← min{j : gj ∈ γ}
if k = e then
for each j (cid:54)= k such that gj ∈ γ
signal te
wait for signal from te {thread tk pauses its execution}
// Thread tk is in parallel mode
execute cid with input parameters
send response to c
else
signal tj
else
{let thread tj resume its execution}
{pick a thread deterministically}
wait for signal from tj
C. Algorithm in detail
Algorithm 1 presents opt-PSMR in detail, for the case in
which rollbacks are not needed (see Section V). To execute
command C,
invoked by an application client (line 1 in
Algorithm 1), the client proxy determines all groups γ involved
in C using the OC-G function (line 2) and multicasts C and
its input parameters to groups in γ (line 3). The client proxy
then waits for the ﬁrst response from the replicas (line 4),
assigns the response received to the output parameters of C
(line 5), and returns to the application (line 6). Upon delivering
C (line 8) for the ﬁrst time, if C was multicast to a single
group (line 9), thread tk tests whether C is in optimistic mode
(line 10) and whether it fails the safety check (line 11), in
which case tk calls CC-G to conservatively determine the set
of groups involved in C (line 12) and multicasts C to the
groups speciﬁed by CC-G in conservative mode (line 13). If
C is in conservative mode, tk executes C in parallel mode
(line 15) and sends the response to client (line 16). If C was
multicast to multiple groups (line 18), then ti continues in
synchronous mode and determines the thread, te, among C’s
destinations, that will execute C (line 19). If tk is in charge
of executing C (lines 21–26), it waits for a signal from every
other thread in C’s destination set (lines 21–22), executes C
(line 23), sends the response to the client (line 24), and then
signals all other threads in C’s destination set to continue their
execution (lines 25–26). If tk is not in charge of C, it signals
thread te (line 28) and waits for C to complete (line 29).
Fig. 3. The impact of failed commands on the latency of opt-PSMR with a dependent-only workload. The following metrics are shown: fail rate and number
of failed commands versus the throughput measured in Kilo commands per second (Kcps) (left graphs); latency in milliseconds for failed, passed, and all the
commands (right graph).
D. Correctness
In this section we argue that opt-PSMR is linearizable.
From the deﬁnition of linearizability (see Section II), there
must be a permutation π of commands in E that respects
(i) the real-time ordering of commands across all clients, and
(ii) the semantics of the commands. Our argument below relies
on the fact that P-SMR is itself linearizable [5]. opt-PSMR
differs from P-SMR for commands for which the output of
CC-G and OC-G functions differ. Here we argue that opt-
PSMR is linearizable for this subset of commands. Let Cx
and Cy be two commands in E submitted by clients cx and
cy, respectively, where at least for one of the commands the
outputs of CC-G and OC-G functions differ. There are two
cases to consider.
Case (a): For both commands Cx and Cy, the output of CC-G
and OC-G differ.
Before executing any of these commands a replica will
perform the safety check. We assume thread tx performs
the safety check for command Cx and thread ty performs
the safety check for command Cy. Three cases are possible:
(1) the safety check for both commands passes, (2) the safety
check for only one of the commands passes (without loss
of generality we assume this command is Cx), or (3) the
safety check for both the commands fail. In case (1), the
commands are independent and the correctness of this case
directly follows from the correctness of P-SMR at executing
independent commands [5]. In case (2), only command Cy is
executed and according to the replicas’ logic, command Cx
is not executed and must be multicast again with the output
of the CC-G function and treated as a dependent command.
The correctness of this case follows from the correctness of P-
SMR when executing dependent commands. In case (3), none
of the commands are executed, and therefore the state of the
replica is not changed. These commands are then multicast
again with the output of the CC-G function and similar to case
(2); correctness follows from P-SMR’s correctness at executing
dependent commands.
Case (b): For only one of the commands, either Cx or Cy, the
outputs of CC-G and OC-G functions differ.
Without
loss of generality, we assume the outputs of
the CC-G and OC-G functions differ for command Cx. The
replicas will perform the safety check for command Cx only
and will directly execute command Cy. If the safety check for
command Cx passes, commands Cx and Cy are independent
and the correctness of this case follows directly from the
correctness of P-SMR with independent commands. If the
safety check fails, command Cx is multicast again as a
dependent command. The correctness of this case follows from
the correctness of P-SMR at executing dependent commands.
V. EVALUATION
In this section, we describe the environment in which we
conducted our experiments, comment on the implementation,
explain the experimental setup and the rationale behind the ex-
periments, and then report on our ﬁndings on the performance
of opt-PSMR and how it relates to other techniques.
A. Hardware setup
We ran all the tests on a cluster with two types of nodes:
(a) HP SE1102 nodes equipped with two quad-core Intel Xeon
L5420 processors running at 2.5 GHz and 8 GB of main
memory, and (b) Dell SC1435 nodes equipped with two dual-
core AMD Opteron processors running at 2.0 GHz and 4 GB of
main memory. The HP nodes are connected to an HP ProCurve
Switch 2910al-48G gigabit network switch, and the Dell nodes
are connected to an HP ProCurve 2900-48G gigabit network