title:VEX: Vetting Browser Extensions for Security Vulnerabilities
author:Sruthi Bandhakavi and
Samuel T. King and
P. Madhusudan and
Marianne Winslett
VEX: Vetting Browser Extensions For Security Vulnerabilities
Sruthi Bandhakavi
Samuel T. King
University of Illinois at Urbana Champaign
{sbandha2,kingst,madhu,winslett}@illinois.edu
P. Madhusudan
Marianne Winslett
Abstract
The browser has become the de facto platform for ev-
eryday computation. Among the many potential attacks
that target or exploit browsers, vulnerabilities in browser
extensions have received relatively little attention. Cur-
rently, extensions are vetted by manual inspection, which
does not scale well and is subject to human error.
In this paper, we present VEX, a framework for high-
lighting potential security vulnerabilities in browser ex-
tensions by applying static information-ﬂow analysis to
the JavaScript code used to implement extensions. We
describe several patterns of ﬂows as well as unsafe pro-
gramming practices that may lead to privilege escala-
tions in Firefox extensions. VEX analyzes Firefox ex-
tensions for such ﬂow patterns using high-precision,
context-sensitive, ﬂow-sensitive static analysis. We an-
alyze thousands of browser extensions, and VEX ﬁnds
six exploitable vulnerabilities, three of which were previ-
ously unknown. VEX also ﬁnds hundreds of examples of
bad programming practices that may lead to security vul-
nerabilities. We show that compared to current Mozilla
extension review tools, VEX greatly reduces the human
burden for manually vetting extensions when looking for
key types of dangerous ﬂows.
1
Introduction
Driving the Internet revolution is the modern web
browser, which has evolved from a relatively simple
client application designed to display static data into a
complex networked operating system tasked with man-
aging many facets of a user’s on-line experience. To
help meet the varied needs of a broad user population,
browser extensions expand the functionality of browsers
by interposing on and interacting with browser-level
events and data. Some extensions are simple and make
only small changes to the appearance of web pages or the
browser itself. Other extensions provide more sophis-
ticated functionality, such as NOSCRIPT that provides
ﬁne-grained control over JavaScript execution [20], or
GREASEMONKEY that provides a full-blown program-
ming environment for scripting browser behavior [6].
These are just a few of the thousands of extensions cur-
rently available for Firefox, the second most popular
browser today1.
Extensions written with benign intent can have subtle
vulnerabilities that expose the user to a disastrous attack
from the web, often just by viewing a web page. Fire-
fox extensions run with full browser privileges, so at-
tackers can potentially exploit extension weaknesses to
take over the browser, steal cookies or protected pass-
words, compromise conﬁdential information, or even hi-
jack the host system, without revealing their actions to
the user. Unfortunately, tens of extension vulnerabili-
ties have been discovered in the last few years, and capa-
ble attacks against buggy extensions have already been
demonstrated [23].
To help reduce the attack surface for extensions,
Mozilla provides a set of security primitives to ex-
tension developers. However,
these security primi-
tives are discretionary, and can be difﬁcult to under-
stand and use correctly.
For example, Firefox pro-
vides an evalInSandbox (text, sandbox) function
that returns the result of evaluating the text string
under the restricted privileges associated with the en-
vironment sandbox. Using evalInSandbox correctly
requires developers to test
to
evalInSandbox with the non-traditional “===” rather
than “==”, as the “==” operation may invoke unsafe code
as a side effect (See http://developer.mozilla.org/
En/Components.utils.evalInSandbox for details).
the result of a call
Current approaches from the research community pro-
pose dynamic techniques for improving the security of
extensions. The SABRE system tracks tainted JavaScript
1Firefox now surpasses Internet Explorer in W3schools trafﬁc
(www.w3schools.com/browsers/browsers_stats.asp),
arguably due to the popularity of Firefox extensions.
objects to prevent extensions from accessing sensitive in-
formation unsafely [9]. Although SABRE can prevent po-
tentially malicious ﬂows from both exploited extensions
and from malicious extensions, SABRE adds overhead to
all JavaScript execution within the browser, adding 6.1x
overhead for the SunSpider benchmark and 2.36x over-
head for the V8 JavaScript benchmark. Furthermore,
SABRE’s dynamic nature pushes security violation no-
tiﬁcation to users who are unable to determine if a par-
ticular ﬂow is malicious or benign. The Google Chrome
Extension System revisits the overall extension API to
make it easier for the browser to enforce least privilege
and strong isolation on extensions [4]. Their system
works by partitioning the full set of extension function-
ality into different protection domains, and sand-boxing
extensions to prevent them from obtaining more privi-
leges than needed. Although this system is likely to limit
the damage from some extension attacks, it does little to
prevent the vulnerabilities themselves.
In this paper, we propose VEX, a system for ﬁnd-
ing vulnerabilities in browser extensions using static
information-ﬂow analysis. Many vulnerabilities trans-
late to certain types of explicit information ﬂows from
injectable sources to executable sinks. For extensions
written with benign intent, most attacks involve the at-
tacker injecting JavaScript into a data item that is sub-
sequently executed by the extension under full browser
privileges. We identify key ﬂows of this nature that can
lead to security vulnerabilities, and we analyze for these
ﬂows statically using high-precision static analysis that
is both path-sensitive and context-sensitive, to minimize
the number of false positive suspect ﬂows. VEX uses
precise summaries to analyze code, and has special fea-
tures to handle the quirks of JavaScript (e.g., VEX does
a constant string analysis for expressions that ﬂow into
the eval statement). Because VEX uses static analysis,
we avoid the runtime overhead induced by dynamic ap-
proaches.
Determining whether extensions are malicious or har-
bor security vulnerabilities is a hard problem. Exten-
sions are typically complex artifacts that interact with
the browser in subtle and hard to understand ways. For
example, the ADBLOCK PLUS extension performs the
seemingly simple task of ﬁltering out ads based on a
list of ad servers. However, the ADBLOCK PLUS im-
plementation consists of over 11K lines of JavaScript
code. Similarly, the NOSCRIPT extension provides ﬁne-
grained control over which domains are allowed to ex-
ecute JavaScript and basic cross-site scripting protec-
tion. The NOSCRIPT extension implementation consists
of over 19K lines of JavaScript code. Also, ADBLOCK
PLUS had 30 releases in 1/1/06–11/20/09, and NO-
SCRIPT had 38 releases just in 1/1/09–11/20/09. While
Mozilla uses volunteers to vet each new extension and re-
vision before posting it on their ofﬁcial list of approved
Firefox extensions, examining an extension to ﬁnd a vul-
nerability requires a detailed understanding of the code
to reason about anything beyond the most basic type of
information ﬂow. Thus tools to help vet browser exten-
sions can be very useful for improving the security of
extensions.
We show that VEX can catch several known vulnera-
bilities, such as a vulnerability in the FIZZLE extension
[8], and also ﬁnd new problems, including exploitable
vulnerabilities in BEATNIK and WIKIPEDIA TOOLBAR.
In particular, VEX reported a previously unknown vul-
nerability in WIKIPEDIA TOOLBAR that could lead to an
attack, and that resulted in the report CVE-2009-4127.
We reported this vulnerability to the WIKIPEDIA TOOL-
BAR developers, who ﬁxed the extension. We also show
that VEX can help to ﬁnd the use of unsafe programming
practices, such as misuse of evalInSandbox, that can
result from subtle information ﬂows.
The remainder of the paper is organized as follows.
Section 2 describes the threat model and the assumptions
under which we analyze the browser extensions. Sec-
tion 3 provides background material on the architecture
of Firefox and the nature of certain key undesirable in-
formation ﬂows in its extensions. Section 4 describes our
static analysis and the various design choices we made to
build VEX. Section 5 lists and describes our results. Sec-
tion 6 surveys related work, and Section 7 concludes the
paper.
2 Threat model, assumptions, and usage
model
In this paper, we focus on ﬁnding security vulnerabili-
ties in buggy browser extensions. We do not try to iden-
tify malicious extensions, bugs in the browser itself, or
bugs in other browser extensibility mechanisms, such as
plug-ins. We assume that the developer is neither mali-
cious nor trying to obfuscate extension functionality, but
we assume the developer could write incorrect code that
contains vulnerabilities.
We use two attack models. First, we consider attacks
that originate from web sites, and we assume the attacker
can send arbitrary HTML and JavaScript to the user’s
browser. We focus on attacks where this untrusted data
can lead to code injection or privilege escalation through
buggy extensions. In the second attack model, we con-
sider some web sites as trusted. For example, if an exten-
sion gleans information from Facebook, we assume that
the Facebook code will not include arbitrary HTML and
JavaScript, but only well formatted and trusted data.
According to the Mozilla developer site, Mozilla has
a team of volunteers who help vet extensions manually.
2
Figure 1: The overall analysis process of VEX.
They run new and updated extensions isolated in a vir-
tual machine to test the user experience. The editors also
use a validation tool, which uses grep to look for key in-
dicators of bugs. Many of the patterns they search for
involve interactions between extensions and web pages,
and they use their understanding of these patterns to help
guide their inspection of the code. Our goal is to help
automate this process, so that analysts can quickly hone
in on particular snippets of code that are likely to contain
security vulnerabilities. Figure 1 shows our overall work
ﬂow for using VEX.
3 Background
3.1 Mozilla privilege levels
Firefox has two privilege levels: page, for the web page
displayed in the browser’s content pane; and chrome, for
elements belonging to Firefox and its extensions, i.e., ev-
erything surrounding the content pane. Page privileges
are more restrictive than chrome privileges. For exam-
ple, a page loaded from site x cannot access content from
sites other than x. General Firefox code runs with full
chrome privileges, which give it access to all browser
states and events, OS resources like the ﬁle system and
network, and all web pages. Firefox provides the ex-
tensions with full chrome privileges by exposing a spe-
cial API called the XPCOM Components to extension
JavaScript, thereby allowing the extensions to have ac-
cess to all the resources Firefox can access.
Extensions can often access objects that run with page
privileges and interact with page content, as well as ob-
jects that run with full chrome privileges. Extensions can
also include user interface components via a chrome doc-
ument, which also runs with full chrome privileges. For
example, the object window refers to the chrome win-
dow and the object window.content refers to the con-
tent window. To access the document object referring
to the content (i.e., the user page), the extension has to
access the document property of the content window,
i.e., window.content.document.
To make this extension architecture practical, Firefox
has APIs for extension code to communicate across pro-
tection domains. These interactions are one cause of ex-
tension security vulnerabilities. As the Mozilla devel-
oper site explains, “One of the most common security is-
sues with extensions is execution of remote code in privi-
leged context. A typical example is an RSS reader exten-
sion that would take the content of the RSS feed (HTML
code), format it nicely and insert into the extension win-
dow. The issue that is commonly overlooked here is that
the RSS feed could contain some malicious JavaScript
code and it would then execute with the privileges of the
extension – meaning that it would get full access to the
browser (cookies, history etc) and to user’s ﬁles” [sic].
3.2 Points of attack
Here we discuss key vulnerable points for code injection
and privilege escalation attacks against non-malicious
extensions: eval, evalInSandbox, innerHTML, and
wrappedJSObject. We focus on these Firefox features
because they are key points of interaction between ob-
jects with page and chrome privileges, respectively, and
this interaction is a key source of security vulnerabilities,
as noted above. Though other avenues of attack are pos-
sible, we do not consider them here.
3
eval: The eval function call interprets string data as
JavaScript, which it executes dynamically. This ﬂexible
mechanism can be used to generate JavaScript code dy-
namically, for example to serialize JSON objects. How-
ever, this ﬂexibility can lead to code injection vulnera-
bilities in extensions. If extensions execute eval func-
tions on un-sanitized strings that come from untrusted
web pages, the attacker will be able to inject JavaScript
code that will run with full chrome privileges.
it calls window.content.document.getElementById,
Firefox automatically wraps the object so that
the
window.content.document accesses only use the orig-
inal document object, not the modiﬁed one. However,
Firefox also provides the wrappedJSObject method,
which lets the extension access the modiﬁed version,
even when automatic wrapping is turned on; calling
wrappedJSObject on a content document is potentially
dangerous.
InnerHTML: Each HTML element for a page has an
innerHTML property that deﬁnes the text that occurs be-
tween that element’s opening and closing tag. Exten-
sions can change the innerHTML property to alter ex-
isting document object model (DOM) elements, or to
add new DOM elements. When an extension modiﬁes
the innerHTML property, the browser re-parses and pro-
cesses the new data. Thus, passing specially crafted un-
sanitized strings (e.g.,  tags with script in their
onload attribute) into innerHTML modiﬁcations can
lead to code injection attacks.
EvalInSandbox: One way Firefox facilitates com-
munication across protection domains is through the
evalInSandbox method. This method enables exten-
sions to execute JavaScript in the extension’s context
with restricted privileges, thus enabling extensions to
process untrusted data from web pages safely. The
sandbox object is an empty JavaScript object created
with restricted privileges. For example, the call s =
Sandbox("http://www.w3.org/") creates a sandbox
s where code can execute with page privileges, as though
it came from the domain www.w3.org. One can add
properties to this object by calling the evalInSandbox
function, and any attempts to access global scope ob-
jects from within evalInSandbox, including privileged
chrome objects, are denied. evalInSandbox compli-
cates extension programming because objects returned
from the method call execute in the extension with full
chrome privileges. Since methods associated with the
object could have been modiﬁed within the sandbox, they
should not be called in the chrome context. For example,
“==” should not be used on these objects as its evaluation
calls the tostring or valueOf method, which could
have been modiﬁed; instead the non-traditional “===”
operator needs to be used.
wrappedJSObject:
JavaScript objects can be dynam-
ically modiﬁed. That means that any web page can
modify the properties of the document object. For ex-
ample, a web page can reassign the getElementById
method to return a malicious script. To prevent this
script from being executed by the extension when
3.3 Suspicious ﬂow patterns
In this section we discuss the ﬁve source to sink
ﬂows that might be vulnerable. Speciﬁcally, we track
ﬂows from Resource Description Framework (RDF)
data (e.g., bookmarks) to innerHTML, content document
data to eval, content document data to innerHTML,
evalInSandbox return objects used improperly by code
running with chrome privileges, or wrappedJSObject
return object used improperly by code running with
chrome privileges. These ﬂows do not always result in
a vulnerability, and they are by no means an exhaustive
list of all possible extension security bugs, but they are
the patterns we use in our tool.
RDF is a model for describing hierarchical relation-
ships between browser resources [33]. Extension de-
velopers can store persistent extension data in an RDF
ﬁle, or access browser resources, such as bookmarks,
stored in RDF format. RDF data can come from un-
trusted sources. For example, when a user stores a book-
mark, Firefox records the un-sanitized title of the book-
marked page in the RDF ﬁle. Extensions that use RDF
data need to sanitize it properly if they use it directly in
an innerHTML statement that modiﬁes an element in a
chrome document.
Content document data ﬂowing to eval or innerHTML
can sometimes be exploited. This ﬂow can result in script
execution with chrome privileges if specially crafted
content from the window.content.document ob-
ject is passed to eval or innerHTML or an element in the