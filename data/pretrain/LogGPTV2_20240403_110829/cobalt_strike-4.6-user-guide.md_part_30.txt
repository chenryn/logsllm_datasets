### Session Report
The session report provides a comprehensive overview, including miscellaneous indicators (e.g., service names) and a timeline of post-exploitation activities. This report is an invaluable tool for network defense teams to understand the adversary's actions and align their sensors with the observed activity.

**Figure 50: The Sessions Report**

### Social Engineering Report
The social engineering report documents each round of spear-phishing emails, who clicked on them, and what data was collected from users who interacted with the emails. Additionally, this report includes information on applications discovered by the system profiler.

**User Guide: www.helpsystems.com | Page: 344**
**Section: Reporting and Logging/Reports**

### Tactics, Techniques, and Procedures (TTPs) Report
This report maps your Cobalt Strike actions to tactics within MITRE’s ATT&CK Matrix. The ATT&CK matrix provides detailed descriptions of each tactic, along with detection and mitigation strategies. For more information, visit: [MITRE’s ATT&CK](https://attack.mitre.org/).

**User Guide: www.helpsystems.com | Page: 345**
**Section: Reporting and Logging/Custom Logo in Reports**

### Custom Logo in Reports
Cobalt Strike reports display a Cobalt Strike logo at the top of the first page. You can replace this with a custom image of your choosing. To do so, go to `Cobalt Strike -> Preferences -> Reporting`.

- **Image Specifications:**
  - Dimensions: 1192x257 pixels
  - Resolution: 300 DPI

The 300 DPI setting is necessary for the reporting engine to render your image at the correct size. You can also set an accent color, which will be used for the thick line below your image on the first page of the report and for links within the report.

**Figure 51: A Customized Report**

**User Guide: www.helpsystems.com | Page: 346**
**Section: Appendix/Custom Reports**

### Custom Reports
Cobalt Strike uses a domain-specific language to define its reports. You can create and load your own reports through the Report Preferences dialog. For more information, refer to the Custom Reports chapter in the Aggressor Script documentation.

### Keyboard Shortcuts
The following keyboard shortcuts are available in Cobalt Strike:

| Shortcut       | Where   | Action                                           |
|----------------|---------|--------------------------------------------------|
| Ctrl+A         | Console | Select all text                                  |
| Ctrl+F         | Console | Open find tool to search the console             |
| Ctrl+K         | Console | Clear the console                                |
| Ctrl+Minus     | Console | Decrease font size                               |
| Ctrl+Plus      | Console | Increase font size                               |
| Ctrl+0         | Console | Reset font size                                  |
| Down           | Console | Show next command in command history             |
| Escape         | Console | Clear edit box                                   |
| Page Down      | Console | Scroll down half a screen                        |
| Page Up        | Console | Scroll up half a screen                          |
| Tab            | Console | Complete the current command (in some consoles)  |
| Up             | Console | Show previous command in command history         |
| Ctrl+B         | Everywhere | Send current tab to the bottom of the Cobalt Strike window |
| Ctrl+D         | Everywhere | Close current tab                                |
| Ctrl+Shift+D   | Everywhere | Close all tabs except the current tab            |
| Ctrl+E         | Everywhere | Empty the bottom of the Cobalt Strike window (undo Ctrl+B) |
| Ctrl+I         | Everywhere | Choose a session to interact with                |
| Ctrl+Left      | Everywhere | Switch to previous tab                           |
| Ctrl+O         | Everywhere | Open preferences                                 |
| Ctrl+R         | Everywhere | Rename the current tab                           |
| Ctrl+Right     | Everywhere | Switch to next tab                               |
| Ctrl+T         | Everywhere | Take screenshot of current tab (result sent to team server) |
| Ctrl+Shift+T   | Everywhere | Take screenshot of Cobalt Strike (result sent to team server) |
| Ctrl+W         | Everywhere | Open current tab in its own window               |
| Ctrl+C         | Graph   | Arrange sessions in a circle                     |
| Ctrl+H         | Graph   | Arrange sessions in a hierarchy                  |
| Ctrl+Minus     | Graph   | Zoom out                                         |
| Ctrl+P         | Graph   | Save a picture of the graph display              |
| Ctrl+Plus      | Graph   | Zoom in                                          |
| Ctrl+S         | Graph   | Arrange sessions in a stack                      |
| Ctrl+0         | Graph   | Reset to default zoom-level                      |
| Ctrl+F         | Tables  | Open find tool to filter table content           |
| Ctrl+A         | Targets | Select all hosts                                 |
| Escape         | Targets | Clear selected hosts                             |

**User Guide: www.helpsystems.com | Page: 347**
**Section: Appendix/Beacon Command Behavior and OPSEC Considerations**

### Beacon Command Behavior and OPSEC Considerations
A proficient operator should understand their tools and how they achieve their objectives. This document surveys Beacon's commands and provides background on which commands inject into remote processes, spawn jobs, or rely on `cmd.exe` or `powershell.exe`.

#### API-only Commands
The following commands are built into Beacon and rely on Win32 APIs to meet their objectives:
- `cd`
- `cp`
- `connect`
- `download`
- `drives`
- `exit`
- `getprivs`
- `getuid`
- `inline-execute`
- `jobkill`
- `kill`
- `link`
- `ls`
- `make_token`
- `mkdir`
- `mv`
- `ps`
- `pwd`
- `rev2self`
- `rm`
- `rportfwd`
- `rportfwd_local`
- `setenv`
- `socks`
- `steal_token`
- `unlink`
- `upload`

#### House-keeping Commands
The following commands are built into Beacon and exist to configure Beacon or perform house-keeping actions. Some of these commands (e.g., `clear`, `downloads`, `help`, `mode`, `note`) do not generate a task for Beacon to execute.
- `argue`
- `blockdlls`
- `cancel`
- `checkin`
- `clear`
- `downloads`
- `help`
- `jobs`
- `modedns`
- `modedns-txt`
- `modedns6`
- `note`
- `powershell-import`
- `ppid`
- `sleep`
- `socksstop`
- `spawnto`

#### Inline Execute (BOF)
The following commands are implemented as internal Beacon Object Files (BOFs). A BOF is a compiled C program that executes within a Beacon session. The capability is cleaned up after it finishes running.
- `dllload`
- `elevatesvc-exe`
- `elevateuac-token-duplication`
- `getsystem`
- `jumppsexec`
- `jumppsexec64`
- `jumppsexec_psh`
- `kerberos_ccache_use`
- `kerberos_ticket_purge`
- `kerberos_ticket_use`
- `netdomain`
- `regquery`
- `regqueryv`
- `remote-execpsexec`
- `remote-execwmi`
- `runasadminuac-cmstplua`
- `runasadminuac-token-duplication`
- `timestomp`

The network interface resolution in both the port scan and covert VPN dialogs also use a BOF.

**OPSEC Advice:**
- BOFs use RWX memory by default. Set the `startrwx` and `userwx` hints in Malleable C2's `process-inject` block to change the initial or final memory permissions.

#### Post-Exploitation Jobs (Fork & Run)
Many Beacon post-exploitation features spawn a process and inject a capability into that process. This pattern, often called "fork & run," is used for several reasons:
1. It protects the agent if the capability crashes.
2. Historically, this scheme made it seamless for an x86 Beacon to launch x64 post-exploitation tasks, which was critical before the x64 build was available in 2016.
3. Some features can target a specific remote process, allowing post-exploitation to occur in different contexts without the need to migrate or spawn a payload in another context.
4. This design keeps a lot of clutter (threads, suspicious content) generated by post-exploitation out of the Beacon process space.

**Features Using Fork & Run:**
- `covertvpn`
- `execute-assembly`
- `powerpick`

**Target Explicit Process Only:**
- `browserpivot`
- `psinject`

**Fork & Run or Target Explicit Process:**
- `chromedump`
- `dcsync`
- `desktop`
- `hashdump`
- `keylogger`
- `logonpasswords`
- `mimikatz`
- `net*`
- `portscan`
- `printscreen`
- `pth`
- `screenshot`
- `screenwatch`
- `ssh`
- `ssh-key`

**OPSEC Advice:**
- Use the `spawnto` command to change the process Beacon will launch for its post-exploitation jobs. The default is `rundll32.exe` (you may want to change this).
- The `ppid` command changes the parent process under which these jobs run.
- The `blockdlls` command stops userland hooking for some security products.
- Malleable C2's `process-inject` block gives extensive control over the process injection process.
- Malleable C2's `post-ex` block has several OPSEC options for the post-exploitation DLLs themselves.
- For features with an explicit injection option, consider injecting into your current Beacon process. Cobalt Strike detects and handles self-injection differently from remote injection.
- Explicit injection will not clean up any memory after the post-exploitation job has completed. It is recommended to inject into a process that can be safely terminated to clean up in-memory artifacts.

#### Process Execution
The following commands spawn a new process:
- `execute`
- `run`
- `runas`
- `runu`

**OPSEC Advice:**
- The `ppid` command changes the parent process of commands run by `execute`. It does not affect `runas` or `runu`.

#### Process Execution (cmd.exe)
The `shell` command depends on `cmd.exe` to run a command and get output. If you want to run a command without `cmd.exe`, use other methods.

The `pth` command relies on `cmd.exe` to pass a token to Beacon via a named pipe. The command pattern to pass this token is an indicator that some host-based security products look for. For manual instructions, see "How to Pass-the-Hash with Mimikatz."

#### Process Execution (powershell.exe)
The following commands launch `powershell.exe` to perform tasks on your behalf:
- `jump`
- `winrm`
- `jumpwinrm64`
- `powershell`
- `remote-execwinrm`

**OPSEC Advice:**
- Use the `ppid` command to change the parent process `powershell.exe` is run under.
- Use the `POWERSHELL_COMMAND` Aggressor Script hook to change the format of the PowerShell command and its arguments.
- The `jumpwinrm`, `jumpwinrm64`, and `powershell` (when a script is imported) commands deal with PowerShell content that is too large to fit in a single command-line. These features host a script on a self-contained web server within your Beacon session. Use the `POWERSHELL_DOWNLOAD_CRADLE` Aggressor Script hook to shape the download cradle used to download these scripts.

#### Process Injection (Remote)
The post-exploitation job commands (previously mentioned) rely on process injection. Other commands that inject into a remote process include:
- `dllinject`
- `dllload`
- `inject`
- `shinject`

**OPSEC Advice:**
- Malleable C2's `process-inject` block gives extensive control over the process injection process.
- When Beacon exits an injected process, it will not clean itself from memory and will no longer be masked when the `stage.sleep_mask` is set to true. With the 4.5 release, most of the heap memory will be cleared and released.
- Recommendation: Do not exit Beacon if you do not want to leave memory artifacts unmasked during your engagement. When your engagement is done, it is recommended to reboot all targeted systems to remove any lingering in-memory artifacts.

**User Guide: www.helpsystems.com | Page: 352**
**Section: Appendix/Unicode Support**

### Unicode Support
Unicode is a map of characters in the world's languages to a fixed number or code-point. This document covers Cobalt Strike's support for Unicode text.

#### Encodings
Unicode is a map of characters to numbers (code-points), but it is not an encoding. An encoding is a consistent way to assign meaning to individual or byte sequences by mapping them to code-points within this map.

Internally, Java applications store and manipulate characters using the UTF-16 encoding. UTF-16 uses two bytes to represent common characters, and four bytes for rarer characters. Cobalt Strike, being a Java application, is capable of storing, manipulating, and displaying text in various writing systems. There are no real technical barriers to this in the core Java platform.

In the Windows world, things are a bit different. Character representation options in Windows date back to the DOS days. DOS programs work with ASCII text and those beautiful box-drawing characters. A common encoding to map numbers 0-127 to USASCII and 128-255 to box-drawing characters is known as code page 437. There are several variations of code page 437 that mix box-drawing characters with characters from specific languages. This collection of encodings is known as an OEM encoding.

Today, each Windows instance has a global OEM encoding setting, which dictates how to interpret the output of bytes written to a console by a program. To interpret the output of `cmd.exe` properly, it is important to know the target's OEM encoding.

Windows also has the concept of an ANSI encoding, which is a global setting like the OEM encoding. The ANSI encoding dictates how ANSI Win32 APIs will map a sequence of bytes to code-points. An ANSI encoding for a language forgoes box-drawing characters for characters useful in the language that encoding is designed for. An encoding is not necessarily confined to mapping one byte to one character; a variable-length encoding may represent the most common characters as a single byte and others as a multi-byte sequence.

ANSI encodings are not the full story, though. The Windows APIs often have both ANSI and Unicode variants. An ANSI variant of an API accepts and interprets a text argument as described above. A Unicode Win32 API expects text arguments encoded with UTF-16.

In Windows, there are multiple encoding situations possible:
- **OEM Encoding:** Can represent some text in the target's configured language.
- **ANSI Encoding:** Can represent more text, primarily in the target's configured language.
- **UTF-16:** Can contain any code-point.
- **UTF-8:** A variable-length encoding that is space-efficient for ASCII text but can also contain any code-point.

#### Beacon
Cobalt Strike's Beacon reports the target's ANSI and OEM encodings as part of its session metadata. Cobalt Strike uses these values to encode text input, as needed, to the target's encoding. It also uses these values to decode text output, as needed, with the target's encoding.

In general, the translation of text to and from the target's encoding is transparent to you. If you work on a target configured to one language, things will work as expected. Different behaviors between commands will show up when working with mixed-language environments. For example, if output contains characters from Cyrillic, Chinese, and Latin alphabets, some commands will handle it correctly, while others may not.

Most commands in Beacon use the target's ANSI encoding to encode input and decode output. The target's configured ANSI encoding may only map characters to code-points for a handful of writing systems. If the ANSI encoding of the current target does not map Cyrillic characters, `make_token` will not handle a username or password that uses Cyrillic characters correctly.

Some commands in Beacon use UTF-8 for input and output. These commands will generally handle mixed-language content as expected because UTF-8 text can map characters to any Unicode code-point.

The following table documents which Beacon commands use something other than the ANSI encoding to decode input and output:

| Command        | Input Encoding | Output Encoding |
|----------------|----------------|-----------------|
| `hashdump`     | UTF-8          |                 |
| `mimikatz`     | UTF-8          | UTF-8           |
| `powerpick`    | UTF-8          | UTF-8           |
| `powershell`   | UTF-16         | OEM             |
| `psinject`     | UTF-8          | UTF-8           |
| `shell`        | ANSI           | OEM             |

**Note:**
For those familiar with Mimikatz, note that Mimikatz uses Unicode Win32 APIs internally and UTF-16 characters. Where does UTF-8 come from? Cobalt Strike's interface to Mimikatz sends input as UTF-8 and converts output to UTF-8.

#### SSH Sessions
Cobalt Strike's SSH sessions use UTF-8 encoding for input and output.

#### Logging
Cobalt Strike's logs are UTF-8 encoded text.

#### Fonts
Your font may have limitations displaying characters from some writing systems. To change the Cobalt Strike fonts:
- Go to `Cobalt Strike -> Preferences -> Cobalt Strike` to change the GUI Font value. This will change the font Cobalt Strike uses in its dialogs, tables, and the rest of the interface.
- Go to `Cobalt Strike -> Preferences -> Console` to change the Font used by Cobalt Strike's consoles.
- Go to `Cobalt Strike -> Preferences -> Graph` to change the font used by Cobalt Strike's pivot graph.

**User Guide: www.helpsystems.com | Page: 356**