          1796 OP_MOVE      R10     R14             ; R10:wanted
          1799 OP_JMP               2065
    # 这里是一个for循环开始的部分，首先跳转到循环变量i的检查
          1802 OP_GETCONST  R14     :Cipher
          1805 OP_SEND      R14     :new    0
          1809 OP_MOVE      R11     R14             ; R11:cipher
          1812 OP_MOVE      R14     R3      ; R3:content
          1815 OP_MOVE      R15     R4      ; R4:i
          1818 OP_SEND      R14     :[]     1
    # R14=content[i]
          1822 OP_MOVE      R15     R3      ; R3:content
          1825 OP_MOVE      R16     R4      ; R4:i
          1828 OP_ADDI      R16     16
          1831 OP_SEND      R15     :[]     1
          1835 OP_ADD       R14     R15
          ...
          2011 OP_MOVE      R12     R14             ; R12:cc
    # R14+=content[i+16]，下面省略了一些取content数组元素的操作，
    # 最终的结果是用content[i,i+8,i+16,i+24]四字节组成一个14字节的字符串放在cc里
          2014 OP_MOVE      R14     R11             ; R11:cipher
          2017 OP_MOVE      R15     R12             ; R12:cc
          2020 OP_STRING    R16     L(2)    ; c*
          2023 OP_SEND      R15     :unpack 1
          2027 OP_SEND      R14     :hash   1
          2031 OP_MOVE      R13     R14             ; R13:output
    # output=cipher.hash(cc.unpack("c*"))
    # 将cc字符串unpack为bytes，再把bytes传给cipher的hash函数
          2034 OP_MOVE      R15     R10             ; R10:wanted
          2037 OP_MOVE      R16     R4      ; R4:i
          2040 OP_SEND      R15     :[]     1
    # wanted=R4[i]，R4即比较对象，下文有解释
          2044 OP_SEND      R14     :!=     1
          2048 OP_JMPNOT    R14     2056
          2052 OP_LOADF     R14
          2054 OP_RETURN_BLK        R14
    # if(output!=wanted){return false;}
          2056 OP_MOVE      R14     R4      ; R4:i
          2059 OP_ADDI      R14     1
          2062 OP_MOVE      R4      R14             ; R4:i
    # i = i+1
          2065 OP_MOVE      R14     R4      ; R4:i
          2068 OP_MOVE      R15     R3      ; R3:content
          2071 OP_SEND      R15     :length 0
          2075 OP_LOADI_4   R16
          2077 OP_DIV       R15     R16
          2079 OP_LT                R14     R15
          2081 OP_JMPIF     R14     1802
    # if（i 
    #include 
    #include 
    const unsigned char h1[] = {
        16,  87,  130, 164, 79,  211, 145, 230, 203, 8,   8,   147, 105, 87,  47,
        ... // 从字节码中提取出R4数组
    };
    int main() {
      int a, b, c, d;
      int i;
      char flag[32];
      char buf[14];
      memset(flag, 0xff, 32);
      unsigned char md[64];
      for (i = 0; i < 8; i++) {
        printf("%d\n", i);
        for (a = 0; a < 80; a++) {
          for (b = 0; b < 80; b++) {
            for (c = 0; c < 80; c++) {
              for (d = 0; d < 80; d++) {
                buf[0] = a;
                buf[1] = c;
                buf[2] = c;
                buf[3] = b;
                buf[4] = d;
                buf[5] = c;
                buf[6] = a;
                buf[7] = c;
                buf[8] = a;
                buf[9] = c;
                buf[10] = b;
                buf[11] = c;
                buf[12] = d;
                buf[13] = c;
                WHIRLPOOL(buf, 14, md);
                if (memcmp(md, h1 + 64 * i, 64) == 0) {
                  printf("%d good\n", i);
                  flag[i] = a;
                  flag[i + 8] = b;
                  flag[i + 16] = c;
                  flag[i + 24] = d;
                  goto done;
                }
              }
            }
          }
        }
      done:
        printf("%d done\n", i);
      }
      for (i = 0; i < 32; i++) {
        printf("0x%02x,", flag[i]);
      }
      return 0;
    }
    //[0x16, 0x27, 0x00, 0x35, 0x32, 0x16, 0x18, 0x15, 0x22, 0x21, 0x03, 0x1a, 0x1e, 0x1d, 0x3b, 0x1a,
    // 0x2d, 0x38, 0x0e, 0x03, 0x28, 0x08, 0x28, 0x0e, 0x2e, 0x31, 0x39, 0x3e, 0x04, 0x1d, 0x15, 0x23]
然而这还不是这道题目的全部，爆破结果只是输入`cipher.hash`的数组，在这之前该程序还对输入有一些处理：
          081 OP_MOVE       R15     R3      ; R3:content
          084 OP_SEND       R15     :length 0
          088 OP_SUBI       R15     1
          091 OP_RANGE_INC  R14
    # R14=content[0:length-1]，OP_RANGE_INC用R15创建range
          093 OP_BLOCK      R15     I(0:0x55d31260ff20)
          096 OP_SENDB      R14     :each   0
    # OP_BLOCK加载了一个lambda函数到R15中
    # 将这个lambda函数应用到R14的每个元素上，类似python的map函数