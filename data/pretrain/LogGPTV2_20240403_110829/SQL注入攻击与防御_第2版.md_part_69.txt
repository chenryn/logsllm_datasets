Windows的方法是在Windows注册表中存储密钥。Windows注册表是一种相对于单纯文本文
件更为复杂的存储格式，所以在使用攻击者获取的未授权访问级别查看时会更具挑战性。如果
不存在针对操作系统的存储方法（比如Linux服务器），就应该在应用了严格文件系统ACL的文
件系统的受保护区城存储密钥（或用于产生密钥的密文）。值得注意的是，Microsoft SQLServer
2005 和Oracle Database 10g R2 本质上均原生支持列级加密。不过，这些良好的内置特性并未
提供很多附加的针对SQL注入的保护，因为这些信息通常为应用程序透明地解密了。
5.维护审查跟踪
维护对应用程序数据库对象的访问审查跟踪非常关键。不过，很多应用程序并未在数据库
层进行该操作。如果没有审查跟踪，那么当出现SQL注入攻击时，将很难了解应用程序数据
的完整性是否得到维护。服务器的事务日志可能会提供一些细节。不过这种日志包含了系统范
围的数据库事务，很难跟踪针对应用程序的事务。可以将所有存储过程更新至合并的审查逻辑
中。不过，更好的解决方案是使用数据库触发器。可以使用触发器监视在应用程序使用的表上
执行的操作，而且不需要修改现有的存储过程即可开始利用该功能。从本质上讲，不再修改任
何数据访问代码即可很容易地将这种功能添加到现有的应用程序中。使用触发器时，一定要保
持逻辑的简单以避免与附加代码相关的性能损失，同时应确保安全地编写了触发器逻辑以避免
这些对象中的SQL注入。下面我们仔细看一下Oracle数据库中的触发器，以便更好地理解如
何通过充分利用触发器来检测可能的SQL注入攻击。
Oracle错误触发器
Oracle提供了一种名为数据库触发器的特性。当出现特定的事件时—比如使用DDL（数
据定义语言，比如DDL触发器）创建对象时，或者出现数据库错误（比如ERROR触发器）时，这
些触发器会在数据库范围内激活，从而提供了一种简易的方法来检测SQL注入尝试。
大多数情况下，SQL注入尝试（至少在攻击之初）会创建错误消息，比如“ORA-01756Single
quote not properly terminated" iR “ORA-01789 Query block has incorrect number of result
columns”。这种错误消息的数目较少，多数情况下它们对SQL注入攻击是唯一的，所以可以
341
---
## Page 356
SQL注入攻击与防御（第2版）
使错误数量保持在较低的水平。
下列代码将寻找并存档Oracle数据库中的SQL注入尝试：
-- Purpose: Oracle Database Error Trigger to detect SQL injection Attacks
-- Version: v 0.9
Works against: Oracle 9i, 10g and 11g
==
Author: Alexander Kornbrust of Red-Database-Security GmbH
--
SAS xosn ge unz qsne
-
latest version: http://www.red-database-security.com/scripts/oracle_
error_trigger.html
-- Create a table containing the error messages
create table system.oraerror (
1d NUMBER,
log_date DATE,
1og_usr VARCHAR2(30),
terminal VARCHAR2 (50),
err_nr NUMBER(10),
err_msg VARCHAR2 (4000),
);
-- Create a sequence with unique numbers
create sequence system.oraerror_seq
increment by 1
start vith 1
minvalue 1
nomaxvalue
nocache
nocycle;
CREATE OR REPLACE TRIGGER after_error
AFTER SERVERERROR ON DATABASE
DECLARE
pragma autonomous_transaction,
id NUMBER;
sql_text ORA_NAME_LIST_T;
v_stmt CLOB;
n NUXBER;
BEGIN
SELECT oraerror_seq.nextval INTO id FROM dual;
n:= ora_sql_txt (sgl_text) ;
=
IF n >= 1
THEN
FOR i IN 1..n LOOP
v_stmt:= v_stmt 11 sql_text (1) :
END LOOP;
END IF1
342
---
## Page 357
第9章平台层防御
FOR n IN 1..ora_server_error_depth LoOP
1og only potential SQL injection attenpts
-- alternatively it' s possible to log everything
IF ora_server_error(n) in (*900*,*906′,*907*,*911*, *917*,*920′,*923′,
*933*, *970*, *1031′, *1476′,*1719′, *1722′, *1742*, *1756*, *1789′, *1790′,
 24.247*, *29257*,*29540*)
AND ((ora_server_error (n) = *1476′) and (instr (v_stmt, */*
OracleOEM*) =0)) -- exception bug 1n Oracle OEM
N3H
-- insert the attempt including the SQL statement into a table
INSERT INTO system.oraerror VALUES (id, sysdate, ora_login_user,
ora_client_ip_address, ora_server_error (n), ora_server_error_
msg (n) , v_stmt) ;
-- >
send the information via email to the DBA
COMMIT;
:aI GN3
END LOOP;
i/
END after_error;
9.3.2锁定数据库服务器
确保应用程序数据的安全之后，我们仍然需要采取一些额外的步骤来强化数据库服务器自
身的安全。在默认情况下，PostgreSQL 和MySQL 为用户提供的附加功能相对较少，但 SQL
Server和Oracle则提供了丰富的功能，在加固数据库服务器时，应该禁用这些功能。
在nutshell中，希望按照与最低权限安全原则相一致的方式来确保系统范围内配置的安全，
确保数据库服务器软件更新至最新且打了补丁。如果遵循了这两条关键方针，那么攻击者将很
难访问到超出应用程序预设数据范围的内容。下面我们仔细讲解一些具体的建议。
1.额外的系统对象锁定
除了撤销系统对象（systemobject）上的公共对象许可外，请考虑采取额外的步骤来进一步锁
定特权对象的访问，比如用于系统管理的对象、执行操作系统命令和产生网络连接的对象。虽
然这些特性对数据库管理员很有用，但它们对已经获取数据库访问指令的攻击者来说也同样有
用（即便不是更有用）。请考虑通过以下措施来施加约束：确保未向应用程序角色赋予多余余
许可、通过服务器配置禁用访问系统范围内的特权对象，或者彻底将这些功能从服务器删除（通
免重新启用带来的权限提升).在Oracle中，应该约束运行操作系统的命令以及从数据库访间
操作系统级文件的能力。为确保无法使用（PL)SQL注入漏洞来运行操作系统命令或访问文件，
请不要为Web应用程序的用户赋予下列权限：CREATE ANYLIBRARY、CREATEANY
DIRECTORY、ALTERSYSTEM和 CREATEJOB。还应该从下列包中至少移除PUBLIC授权(如
果不是必需的话)：UTL_FILE、UTL_TCP、UTL_MAIL、UTL_SMTP、HTTPURITYPE、UTL
INADDR、DBMS_ADVISOR、DBMS_SQL、DBMS_PIPE、DBMS_XMLQUERY 和I DBMS_
XMLGEN。如果这些包的功能是必需的，就只能通过安全的应用程序角色来使用它们。
343
---
## Page 358
SQL注入攻击与防御（第2版）
在SQLServer中，应该考虑删除危险的存储过程，比如xp_cmdshell以及与xp_reg*、xp
instancereg*和sp_OA*匹配的存储过程。如果不可行，就应审查这些对象并撤销所有已分配的
不必要的许可。
2.约束即席查询（ad hoc querying)
Microsof SQL Server支持一种名为OPENROWSET的命令来查询远程和本地数据源。远
程查询的有用之处在于可利用它来攻击所连网络上的其他数据库服务器。使用这一功能查询本
地服务器，攻击者可以在更高特权的 SQLServer数据库登录语境中重新向服务器发出验证。可
通过在Windows注册表的HKLMISoftwareMicrosoffMSSQLServeriProviders位置将每个数据提
供者的DisallowAdhocAccess设为1米禁用这一特性。
与此类似，Oracle支持借助数据库链接（database link）的远程服务器的即席查询。默认情况
下，普通用户不需要这种权限，应该从账户中移除该权限。请检查CREATEDATABASELINK
权限（在Oracle10.1之前，它是连接角色的一部分）以确保只分配了必需的登录权限和角色，从
而避免攻击者创建新链接。
3.增强对验证周边的控制
应该复查所有数据库登录，禁用或删除不必要的内容，比如默认账户。此外，应该启用数
据库服务器中的口令强度控件以防止懒情的管理员选择弱口令。攻击者可以利用保护较弱的账
户来向数据库服务器重新发出验证或潜在地提升权限。最后，启用服务器审查以监视可疑的行
为，尤其是失败登录。
在SQLServer数据库中，请考虑专门使用Windows 集成验证取代不太安全的SQLServer
验证。这样一来，攻击者便无法使用OPENROWSET这样的内容来进行重新验证。此外，这种
方法还降低了通过网络来噢探口令的可能性，并且可利用Windows操作系统来施加强口令和
账户控制。
4.在最低权限的操作系统账户语境中运行
如果攻击者能够突破数据库服务器语境并获取底层操作系统的访问权，那么此时是否处于
最低权限的操作系统账户语境中将非常关键，应该将运行在*nix系统中的数据库服务器软件配
置成其运行语境所属的账户属于自定义组（拥有最小的文件系统许可以运行软件）的一员。默认
情况下，SQLServer2005及之后的安装程序将选择最低权限的NETWORK SERVICE账户来运
 SQL Server。
工具与陷阱
SQLServer认真对待安全性
好消息是从SQLServer2005开始，Microsoft包含了一种便利的配置工具，称为SQL
ServerServiceAreaConfiguration，使得禁用那些攻击者会溢用的功能变得更为简单.而
之前的SQLServer版本则需要运行Transact-SQL语句或修改Windows注册表才能实现
更好的是，默认情况下，SQLServer2005禁用了大多数的危险特性
344
---
## Page 359
第9章平台层防御
5.确保数据库服务器软件打了补丁
使用当前的补丁保证软件更新至最新是一项基本的安全规则，但如果数据库服务器不是面
向Intermet的系统，就很容易忽略这一点。攻击者通过应用层SQL注入漏洞来利用服务器漏润，
这就像跟数据库服务器位于同一网络上一样简单。漏洞利用的有效载荷可以是利用PL/SQL包
中SQL注入漏润的一个SQL命令序列，甚至可以是利用扩展存储过程中缓冲区溢出的shell
代码。自动更新机制是保证更新最新的理想之选。可以将 SQL Server 更新与Windows
Update(http:// update.microsoft.com）同步起来。Oracle 数据库管理员可以通过注册Oracle MetaLink
服务（https://metalink.oracle.com/CSP/ui/index.html)来检查当前的更新。操作系统厂商常常将
MySQL和Postgre-SQL打包在操作系统中(比如 Red Hat)，因此可以通过与更新操作系统相同
的方法来为MySQL和PostgreSQL打补丁—如果是已安装的或是手工编译的，就需要手工安
装以实现更新，因此如非必要，不建议自定义安装。另一种保持补丁最新的方法是使用第三方
补丁管理系统。表9-1列出了有助于判定SQLServer和Oracle的数据库服务器软件版本的命令。
表中还包括了用于检查版本信息的链接，这些链接会检查数据库的版本信息，并说明在这些平
台上数据库服务器是否完整地打了补丁。
表9-1判定SQLServer/Oracle数据库服务器版本
数据库
命令
版本查阅
SQL Server
select @@version
http://spport.microsofft.com/kb/321185
-显示数据库版本
select * from vSversion;
显示已安装组件的版本
http:/www.oraele.com/technetwork/topics/security/
Oracle
seleet * from dba_registry;
alerts-086861.html
显示补丁级别
9.4额外的部署考虑
本节介绍一些额外的安全措施来保证所部署的应用程序的安全。这些措施主要用于对Web
服务器和网络基本结构的配置进行优化以帮助减慢对潜在的易受SQL注入攻击的应用的识别。
这些技术可作为第一层防御来阻止应用程序被逐渐盛行且危险的自动SQL注入端虫检测到。
此外，我们还将介绍一些在SQL注入漏润被发现后，减慢和（或）减缓漏洞被利用的技术。
9.4.1最小化不必要信息的泄露
一般来说，泄露与软件行为有关的不必要信息明显会帮助攻击者发现应用程序中的弱点。
这些信息包括软件版本信息（可用于跟踪潜在的易受攻击应用程序的版本）和与应用程序失败有
关的错误明细，比如发生在数据库服务器上的SQL语法错误。我们将介绍一些在应用部署描
述符文件中禁止这些错误信息公布并加固Web服务器配置的方法。
345
---
## Page 360
SQL注入攻击与防御（第2版）
1.隐藏错误消息
包含描述数据库服务器失败原因信息的错误消息对SQL注入识别和后续的漏洞利用均非
常有用。在应用程序级别的错误处理程序中，处理异常和错误消息隐藏会极其有效。不过，运
行时不可避免地会存在出现未预料条件的可能性。所以，好的做法是配置应用框架和（或）Web
服务器，以使在产生未预料的应用程序错误（比如包含500状态码的HTTP响应（例如，Intemal
ServerError)时返回自定义响应。配置后的响应可以是显示通用消息的自定义错误页面，也可
以重定向到默认的Web页面。关键是该页面不应该显示与异常产生原因相关的任何技术细节。
表9-2提供了一些对应用程序和Web服务器进行配置，以便产生错误条件时返回自定义响应的
例子。
表9-2显示自定义错误的配置技术