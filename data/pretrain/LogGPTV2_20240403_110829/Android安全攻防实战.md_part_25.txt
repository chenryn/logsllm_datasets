ul magic[6]: /* includes version number */
u4 checksum; /* adler32 checksum */
ulsignature [kSHA1DigestLen] ;/*  SHA1 hash */
u4 fileSize; /* length of entire file */
u4 headerSize; /* offset to start of next section */
u4 endlanTag
u4 1inkSize;
u4 linkoff;
u4 mapOff;
u4 stringIdsSize}
u4 stringIds0ff;
178
---
## Page 197
第6章逆向app
u4typeIdsSize;
u4 typeIdsoff;
u4 protoIdsSizez
u4 protoIdsOff;
u4 fieldIdsSize:
u4 fieldIdsOff:
u4 methodIdsSize;
u4 methodIdsoff;
u4 classDefsSize;
u4 classDefs0ff;
u4 dataSize;
u4 dataoff;
其中，数据类型u1和u4就是无符号整型数的别名，下面是Dalvik虚拟机自身
源码中Common.h头文本中的数据类型定义。
typedef uint8_t ul; /*8 byte unsigned integer*/
typedef uint16_t u2; /*16 byte unsigned Integer*/
typedef uint32_t u4; /*32 byte unsigned integer*/
typedef uint64_t u8; /*64 byte unsigned integer*/
typedef int8_t s1; /*8 byte signed integer*/
typedef int16_t. s2; /*16 byte signed integer*/
typedef int32_t s4; /*32 byte signed integer*/
typedef int64_t s8; /*64 byte signed integer*/
以 上 代 码 摘 自 :https:/github.com/android/platform_dalvik/blob/
master/vm/Common.h。
有了这些开路的预备知识之后，你现在应该对DEX文件看上去应该是怎么回事，
相关的数据都存放在哪儿有了个大概的印象了。下面几段中将会详细介绍各个区段
都是做什么用的，以及Dalvik虚拟机是如何使用它们的。
现在开始。DEX文件的第一个字段的定义如下。
ul magic[8]; /* includes version nunber */
magic[8]里是一个“标记”，它更常用的名字是“幻数”（magic number），其中存
放的是一串只会出现在DEX文件开头一个字符串?，DEX文件的幻数是dexin035，
或者用十六进制表示：6465780a30333500。
①由于每个文件开头的这个幻数都是不同的，所以，在电子取证相关文献中也被称为“文件签
名”。—译者注
179
---
## Page 198
Android安全攻防实战
如图6.3所示的这张Example.dex文件截图中，标出了十六进制形式表示的幻数。
Shexdump-CExanple.dex
80000010
6465780a30333506
3567e3 3f b7 eddd99
09000920
00 00 00 002 0 95 84
0045 3d 3d4e
48
28000030
0000000070026000
1003
20060040
10686900700006 08
89000050
80890060
01000000f4006000
04000000 fc000000
61 00066
d4616
806
00 3c 01 00
] 6.3
下一个字段的定义如下：
u4 checksum;_ /* adler32 checksum */
图6.4这张截图中标出了DEX文件中的 Adlr32校验和。
Shexdump -C Exanple.dex
00000010
35 67e3 3f b7 ed dd 99
00000020
1003000070000000
540302
7856341260000000
62ea00 45
3d
20000030
1080800670000000
80000050
01000000f4000000
00 0000 2, 000000 00
EO
98
86
900708a0100099201000000010000af010000
01 00 0000 1c 01
00
d4 01 00 063c010686
图 6.4
这4个字节是整个头部的校验和。校验和是对构成头部的各个位（bit）执行一
系列异或（XOR）和加法操作的结果。它被用来验证DEX文件头部中各个数据没有
在有意或无意间被破坏掉。确保文件头部完整性的这一验证是非常重要的，因为头
部中的数据决定了DEX文件的其余部分会被如何解析，并在之后的解析过程中扮演
了路标的角色。在Dalvik中，是使用DexHeader这个结构体来确定DEX文件其他部
分的存储位置的。
下一个字段是一个占21个字节的 SHA（Secure HashingAlgorithm）签名，其定
义如下：
u1 signature [kSHA1DigestLen] : /* SHA1 hash lengt.h = 20* /
图6.5中标出了 DEX文件中的 SHA签名。
①原文如此，显然这里应该是“20个字节”—译者注。
180
---
## Page 199
第6章逆向app
16 03 00 99 70 90 00 00
20 00 90 0021PE958
48
02
10806e58
01006999 f4660089
03609000d00000
10300708a01 00 009201 00 00a0 6100 09af 0100 00
图 6.5
kSHAIDigestLen 被定义为 20，如果你还没看出来的话。这是因为 SHA1hash 的
长度正好就是20个字节。这个hash，根据Dalvik源码中的一段短小的注释，是用来
唯一地标识该DEX文件的，计算这个hash的数据是，DEX文件中的这一区段里该
hash之后的数据一它们全是些区段的地址偏移以及指定区段大小的数据。
在SHA签名字段之后是“fileSize”字段，它的定义如下所示。
u4 fileSizes/* length of entire file */
0690818
00453
100300067000
90000040
20000850
93000000d00000
10006046
016090601c
00 00102 000010 p
10000070 8a010009 92 01 0909a0 01 00 00 af 0100 00
[ 6.6
“fileSize”字段是个占4个字节的字段，其中存放的是整个DEX文件的长度。
这个字段是用来帮助计算偏移以及方便定位某些区段（section）的。它也有助于唯一
地标识DEX文件，因为它是DEX文件中计算SHA1hash区段的一个组成部分。
u4 headerSize;/* offset to start of next section */
图6.7中标出的是DEX文件中的“hcaderSize”字段。
700000.00
9c 5403 62
785634 1209
0800098
00 70 02 09 00
9400
01000960f40009866
04 006000 fc 0000
00890708a010000 92010900a00100 00 af0100 00
d401
指 6.7
181
---
## Page 200
Android安全攻防实战
“headerSize”字段中存放的是整个DexHeader结构体的长度，单位为字节。就像
注释中建议的那样，它也可以用来计算下一个区段在文件中的起始位置。
DEX文件中，下一个域是endianness 标记，其定义如下。
u4 endianTag7
图 6.8 中标出的是 Example.dex 文件中的 endianness 域。
10
78 56 34 12
03 00 80 00 
0000000000010
fc
00 809 10 0 00 00 18 0000 00 10 26 00 0 18 990:000
图 6.8
endianTag字段中存放的是个固定值，它在所有DEX文件中都一样。这个值是：
12345678。它是用来确保文件能被以正确的“endianness”或称字节序解释的。有些
体系结构的处理器认为最高有效位应该被放在左边，而另一些（体系结构的）处理
Dalvik虚拟机读取这个值，并检查这个字段中数字存放的顺序后，就能确定它使用
的是哪种体系结构的处理器了。
再接下来是linkSize和linkOff字段，当多个.class文件被编译到一个DEX文件
中去时，它们就会被用到，如图6.9所示。
u4 1inkoff;
u4 1inkSize;
再接下来是map section offset，它的定义如下。
u4 mapOff;
再接下来的字段是stringldsSize，其定义如下。
u4 stringIdsSizej
Shexdunp-C Exanole.dex
90060010
5d 35 75 4f 9c 54 83 82
1003600070 80 6090
78563412
OEE
04 00 80 00
10006000
81.80.88
000000f4006098
900900798a 0200 90 9261 0090a0 9100 00af 0106 00
01.00.40
d4B16
6°9 B]
stringldsSize字段中存放的是Stringlds 区段的大小。其用法与其他size字段一样，
182
---
## Page 201
第6章逆向app
用来计算Stringlds区段的起始位置—相对于DEX文件加载基地址的偏移量。
下一个字段是stringldsOff，其定义如下。
u4 stringIdsoff;
这个字段中存放的是stringlds区段的实际偏移量，单位“字节”。它帮助Dalvik
编译器和虚拟机直接跳转到这个区段，而不必进行任何严格意义上的计算，或一遍
又一遍地反复读取文件内容，直到读到 stringlds 区段为止。在StringldsOff之后，分
别是表示 type,prototype,method,class 和 data ID区段的偏移量（offset）和大小（size）
的字段—这些字段表示大小和偏移量的方法与 stringlds 和 stringldsOf 的是一样
的。除了表示的区段不同之外，它们的作用与 stringldsOff和 stringldsSize 字段的也
是一样一都是为了能方便有效地访问相应的区段。就像之前讲过的那样，Dalvik
就不必反复读取文件内容，或者做很多加/减操作才能得到相应区段的起始地址了。
下面是这些表示大小和偏移量字段的定义。
u4 typeIdsS1ze;
u4 typeIdsOff}
u4 protoIdsSizej
u4 fieldIdsSize;
u4 protoIdsOff;
u4 fieldIdsoff;
u4 methodIdsSize;
v4 methodIdsOff;
u4 classDefsSize;
u4 classDefsOff;
u4 dataSize;
u4 data0ff;
所有这些表示大小和偏移的字段中存放的数据，都会被认为是计算DEX文件中
相关区段内部偏移量的（一部分）依据。这就是为什么，它们都被定义为同一种数
据类型—4个字节的无符号整型数—的原因。
Stringlds 区段
Stringlds 区段纯就是由一系列地址（或者用Dalvik的术语，识别号（identification
number））构成的。这些地址是相对DEX文件的加载基地址的偏移量，用于计算定
义在Data区段中的各个静态字符串的起始位置。根据Dalvik虚拟机源码中 libdex 文
件（里的相关内容），Stringlds区段中的各个域定义如下。
8truct DexStringId {
u4 stringDataoff; /* file offset to atring_data_item */
) ;
183
---
## Page 202
Android安全攻防实战
这些定义说明：每个StringID都只是一个4个字节的无符号整数，毫无疑间，
它们的用法和DexHeader区段中我们看到的那些偏移量都是一回事。图6.10这张截
图中标出的是Example.dex 中的 Stringlds 区段。
0660708a01080092010600
00 0010e30000109p0000109000010eq08000000
a0 01 00 60 af 01 00 00
30066090
fe 01 00 00 12 02 06 60
15 02 00 00 19 02 00