, r10
| --------> 0x0040286d 488b7d80 mov rdi, qword [local
_80h]
| --------> 0x00402a1c 488b7d80 mov rdi, qword [local
_80h]
| --------> 0x00402b58 488b7d80 mov rdi, qword [local
_80h]
继续跟踪 local_80 ，你会发现输入的字符放在 0x6236a8 的位置。
继续往下看，终于看到了曙光，下面这个函数对输入字符做一些变换：
| 0x00402a20 e88beaffff call sym.transform_in
put_std::vector_int_std::allocator_int___
进入该函数，找到字符转换的核心算法：
1468
6.2.4 re CSAWCTF2015 wyvern
| |:||:|: 0x004017dd e85e3e0000 call method.std::vect
or>.operator[](unsignedlong) ; 获得一
个输入字符的地址 rax
| |:||:|: 0x004017e2 8b08 mov ecx, dword [rax]
; 将该字
符赋值给 ecx
| |:||:|: 0x004017e4 488b45e0 mov rax, qword [local
_20h] ; 获得上
一个加密字符的地址 rax
| |:||:|: 0x004017e8 0308 add ecx, dword [rax]
; 上一个
加密字符加上当前输入字符
| |:||:|: 0x004017ea 8908 mov dword [rax], ecx
; 将当前
加密字符放回
例如第二个字符是 r ，即 0x72 + 0x64 = 0xd6 ，第三个字符 4 ，即 0x34
+ 0xd6 = 0x10a ，依次类推。由此可以写出解密算法：
array = [0x64, 0xd6, 0x10a, 0x171, 0x1a1, 0x20f, 0x26e,
0x2dd, 0x34f, 0x3ae, 0x41e, 0x452, 0x4c6, 0x538,
0x5a1, 0x604, 0x635, 0x696, 0x704, 0x763, 0x7cc,
0x840, 0x875, 0x8d4, 0x920, 0x96c, 0x9c2, 0xa0f]
flag = ""
base = 0
for num in array:
flag += chr(num - base)
base = num
print flag
Bingo!!!
1469
6.2.4 re CSAWCTF2015 wyvern
$ ./wyvern
+-----------------------+
| Welcome Hero |
+-----------------------+
[!] Quest: there is a dragon prowling the domain.
brute strength and magic is our only hope. Test your ski
ll.
Enter the dragon's secret: dr4g0n_or_p4tric1an_it5_LLVM
success
[+] A great success! Here is a flag{dr4g0n_or_p4tric1an_it5_LLVM
}
常规方法逆向出来了，但实在是太复杂，我们可以使用一些取巧的方法，想想前面
讲过的 Pin 和 angr，下面我们就分别用这两种工具来解决它。
使用 Pin
首先要知道验证是逐字符的，一旦有不相同就会退出，也就是说执行下面语句的次
数减一就是正确字符的个数：
| 0x00402a7f 39c8 cmp eax, ecx
; 进行比较。逐字符比较，不相等时退出。
另外只有验证成功，才会跳转到地址 0x0040e2af ，所以把 6.2.1 节的 pintool 拿
来改成下面这样，当 count 为 28+1=29 时，验证成功：
// This function is called before every instruction is executed
VOID docount(void *ip) {
if ((long int)ip == 0x00402a7f) icount++; // 0x00402a7f cm
p eax, ecx
if ((long int)ip == 0x0040e2af) icount++; // 0x0040e2a2 jn
e 0x0040e2af
}
1470
6.2.4 re CSAWCTF2015 wyvern
编译 pintool：
$ cp dont_panic.cpp source/tools/MyPintool
[MyPinTool]$ make obj-intel64/wyvern.so TARGET=intel64
执行下看看：
$ python -c 'print("A"*28)' | ../../../pin -t obj-intel64/wyvern
.so -o inscount.out -- ~/wyvern ; cat inscount.out
+-----------------------+
| Welcome Hero |
+-----------------------+
[!] Quest: there is a dragon prowling the domain.
brute strength and magic is our only hope. Test your ski
ll.
Enter the dragon's secret:
[-] You have failed. The dragon's power, speed and intelligence
was greater.
Count 1
$ python -c 'print("d"+"A"*27)' | ../../../pin -t obj-intel64/wy
vern.so -o inscount.out -- ~/wyvern ; cat inscount.out
+-----------------------+
| Welcome Hero |
+-----------------------+
[!] Quest: there is a dragon prowling the domain.
brute strength and magic is our only hope. Test your ski
ll.
Enter the dragon's secret:
[-] You have failed. The dragon's power, speed and intelligence
was greater.
Count 2
看起来不错，写个脚本自动化该过程：
1471
6.2.4 re CSAWCTF2015 wyvern
import os
def get_count(flag):
cmd = "echo " + "\"" + flag + "\"" + " | ../../../pin -t obj
-intel64/wyvern.so -o inscount.out -- ~/wyvern "
os.system(cmd)
with open("inscount.out") as f:
count = int(f.read().split(" ")[1])
return count
charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0
123456789_-+*'"
flag = list("A" * 28)
count = 0
for i in range(28):
for c in charset:
flag[i] = c
# print("".join(flag))
count = get_count("".join(flag))
# print(count)
if count == i+2:
break
if count == 29:
break;
print("".join(flag))
使用 angr
参考资料
CSAW QUALS 2015: wyvern-500
1472
6.2.5 re PicoCTF2014 Baleful
6.2.5 re PicoCTF2014 Baleful
题目解析
逆向 VM 求解
使用 Pin 求解
参考资料
下载文件
题目解析
1473
6.2.5 re PicoCTF2014 Baleful
$ file baleful
baleful: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/
Linux), statically linked, stripped
$ strings baleful | grep -i upx
@UPX!
$Info: This file is packed with the UPX executable packer http:/
/upx.sf.net $
$Id: UPX 3.91 Copyright (C) 1996-2013 the UPX Team. All Rights R
eserved. $
UPX!u
UPX!
UPX!
$ upx -d baleful -o baleful_unpack
Ultimate Packer for eXecutables
Copyright (C) 1996 - 2017
UPX 3.94 Markus Oberhumer, Laszlo Molnar & John Reiser
May 12th 2017
File size Ratio Format Name
-------------------- ------ ----------- -----------
144956  pdf @ main
/ (fcn) main 96
| main ();
| ; var int local_8h @ ebp-0x8
| ; var int local_10h @ esp+0x10
| ; var int local_8ch @ esp+0x8c
| ; DATA XREF from entry0 (0x8048557)
| 0x08049c82 push ebp
| 0x08049c83 mov ebp, esp
| 0x08049c85 push edi
| 0x08049c86 push ebx
| 0x08049c87 and esp, 0xfffffff0
| 0x08049c8a sub esp, 0x90
| 0x08049c90 mov eax, dword gs:[0x14]
; [0x14:4]=-1 ; 20
| 0x08049c96 mov dword [local_8ch], eax
| 0x08049c9d xor eax, eax
| 0x08049c9f lea eax, [local_10h]
; 0x10 ; 16
| 0x08049ca3 mov ebx, eax
| 0x08049ca5 mov eax, 0
| 0x08049caa mov edx, 0x1f
; 31
| 0x08049caf mov edi, ebx
| 0x08049cb1 mov ecx, edx
| 0x08049cb3 rep stosd dword es:[edi], eax
| 0x08049cb5 lea eax, [local_10h]
; 0x10 ; 16
| 0x08049cb9 mov dword [esp], eax
| 0x08049cbc call fcn.0804898b
| 0x08049cc1 mov eax, 0
| 0x08049cc6 mov edx, dword [local_8ch]
; [0x8c:4]=-1 ; 140
| 0x08049ccd xor edx, dword gs:[0x14]
| ,= 0x08049cdb lea esp, [local_8h]
| 0x08049cde pop ebx
| 0x08049cdf pop edi
| 0x08049ce0 pop ebp
\ 0x08049ce1 ret
fcn.0804898b 是程序主要的逻辑所在，很容易看出来它其实是实现了一个虚拟
机：
使用 Pin 求解
就像上面那样逆向实在是太难了，不如 Pin 的黑科技。
编译 32 位 pintool：
[ManualExamples]$ make obj-ia32/inscount0.so TARGET=
随便输入几个长度不同的密码试试：
[ManualExamples]$ echo "A" | ../../../pin -t obj-ia32/inscount0.
so -o inscount.out -- ~/baleful_unpack ; cat inscount.out
Please enter your password: Sorry, wrong password!
Count 437603
[ManualExamples]$ echo "AA" | ../../../pin -t obj-ia32/inscount0
.so -o inscount.out -- ~/baleful_unpack ; cat inscount.out
Please enter your password: Sorry, wrong password!
Count 438397
[ManualExamples]$ echo "AAA" | ../../../pin -t obj-ia32/inscount
0.so -o inscount.out -- ~/baleful_unpack ; cat inscount.out
Please enter your password: Sorry, wrong password!
Count 439191
$ python -c 'print(439191 - 438397)'
794
$ python -c 'print(438397 - 437603)'
794
1476
6.2.5 re PicoCTF2014 Baleful
指令执行的次数呈递增趋势，完美，这样只要递增到这个次数有不同时，就可以得
到正确的密码长度：
#!/usr/bin/env python
import os
def get_count(flag):
cmd = "echo " + "\"" + flag + "\"" + " | ../../../pin -t obj
-ia32/inscount0.so -o inscount.out -- ~/baleful_unpack"
os.system(cmd)
with open("inscount.out") as f:
count = int(f.read().split(" ")[1])
return count
flag = "A"
p_count = get_count(flag)
for i in range(50):
flag += "A"
count = get_count(flag)
print("count: ", count)
diff = count - p_count
print("diff: ", diff)
if diff != 794:
break
p_count = count
print("length of password: ", len(flag))
Please enter your password: Sorry, wrong password!
count: 459041
diff: 794
Please enter your password: Sorry, wrong password!
count: 459835
diff: 794
Please enter your password: Sorry, wrong password!
count: 508273
diff: 48438
length of password: 30
1477
6.2.5 re PicoCTF2014 Baleful
好，密码长度为 30，接下来是逐字符爆破，首先要确定字符不同对 count 没有影
响：
[ManualExamples]$ echo "A" | ../../../pin -t obj-ia32/inscount0.
so -o inscount.out -- ~/baleful_unpack ; cat inscount.out
Please enter your password: Sorry, wrong password!
Count 437603
[ManualExamples]$ echo "b" | ../../../pin -t obj-ia32/inscount0.
so -o inscount.out -- ~/baleful_unpack ; cat inscount.out
Please enter your password: Sorry, wrong password!
Count 437603