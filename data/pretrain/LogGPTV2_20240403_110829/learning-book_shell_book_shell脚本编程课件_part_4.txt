# Description
This document covers a variety of Bash scripting examples and exercises, including basic script structures, conditional statements, loops, and configuration files. The content is intended to provide a comprehensive guide for learning and practicing Bash scripting.

## Copyright
2019 All rights reserved

### Example Script: `ping.sh`
```bash
#!/bin/bash
IP=172.16.0.123
if ping -c 1 $IP &>/dev/null; then
    echo "IP is up"
else
    echo "IP is unreachable"
fi
echo "Script is finished"
```

### Example Script: `disk_check.sh`
```bash
#!/bin/bash
# Author: wangxiaochun
# QQ: 29308620
# Date: 2019-12-23
# FileName: disk_check.sh
# URL: http://www.magedu.com
# Description: The test script
# Copyright (C): 2019 All rights reserved

WARNING=80
SPACE_USED=$(df -h | awk '{print $5}' | tail -n 1 | sed 's/%//')
if [ "$SPACE_USED" -ge $WARNING ]; then
    echo "Disk used is $SPACE_USED%, will be full" | mail -s "Disk Warning" root
fi
```

### Exercises
1. **`argsnum.sh`**: Accepts a file path as an argument. If the number of arguments is less than 1, it prompts the user to provide at least one argument and exits. Otherwise, it displays the number of blank lines in the file.
2. **`hostping.sh`**: Accepts an IPv4 address as an argument and tests if it is reachable. It informs the user if the IP is accessible or not.
3. **`checkdisk.sh`**: Checks the disk partition space and inode usage. If either exceeds 80%, it broadcasts a warning.
4. **`per.sh`**: Determines if the current user has no read and write permissions on a specified file.
5. **`execute.sh`**: Checks if the argument is a regular file with a `.sh` extension. If so, it adds execute permissions for all users. Otherwise, it informs the user that it is not a script file.
6. **`nologin.sh` and `login.sh`**: Scripts to disable and enable login for regular users.

### Using `read` Command
The `read` command reads input from standard input and assigns it to shell variables. Common options include:
- `-p`: Specifies a prompt.
- `-s`: Silent input, useful for passwords.
- `-n N`: Reads N characters.
- `-d CHAR`: Sets the delimiter.
- `-t N`: Timeout after N seconds.

### Example Usage of `read`
```bash
read -p "Please enter your name: " NAME
echo $NAME
```

### Pipelines
A pipeline is a sequence of commands separated by `|` or `|&`.

### Bash Configuration Files
Bash configuration files can be categorized by scope, login type, and function. They include global and personal configurations, and are executed in a specific order based on the login method.

### Conditional Statements
#### `if` Statements
```bash
if condition; then
    # code if true
elif condition; then
    # code if true
else
    # code if false
fi
```

#### `case` Statements
```bash
case $variable in
    pattern1)
        # code
        ;;
    pattern2)
        # code
        ;;
    *)
        # default code
        ;;
esac
```

### Loops
#### `for` Loop
```bash
for variable in list; do
    # code
done
```

### Example: 9x9 Multiplication Table
```bash
for i in {1..9}; do
    for j in $(seq 1 $i); do
        echo -e "${j}x${i}=$((i*j))\t\c"
    done
    echo
done
```

### Example: File Renaming Script
```bash
DIR=/data/test
cd $DIR
for FILE in *; do
    PRE=$(echo $FILE | sed -nr 's/(.*).([^.]+)$/\1/p')
    EXT=$(echo $FILE | sed -nr 's/(.*).([^.]+)$/\2/p')
    mv $FILE ${PRE}.bak
done
```

### Example: Directory Creation and File Generation
```bash
for i in {1..365}; do
    DIR=$(date -d "-$i day" +%F)
    mkdir $DIR
    cd $DIR
    for n in {1..10}; do
        touch random.$n.log
    done
    cd ..
done
```

This document provides a structured and clear guide for Bash scripting, including examples and exercises to practice various scripting concepts.