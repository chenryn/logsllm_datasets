大语数据结构
3.根结点只有左子树。
4.根结点只有右子树。
5.根结点既有左子树又有右子树。
应该说这五种形态还是比较好理解的，那我现在问大家，如果是有三个结点的
树，有几种形态？如果是有三个结点的二叉树，考虑一下，又有几种形态？
若只从形态上考虑，三个结点的树只有两种情况，那就是图6-5-4中有两层的树1
和有三层的后四种的任意一种，但对于二叉树来说，由于要区分左右，所以就演变成
五种形态，树2、树3、树4和树5分别代表不同的二叉树。
树1
树2
树3
树4
树5
图 6-5-4
6.5.2特殊二叉树
我们再来介绍一些特殊的二叉树。这些树可能暂时你不能理解它有什么用处，但
先了解一下，以后会提到它们的实际用途。
1.斜树
顾名思义，斜树一定要是斜的，但是往哪斜还是有讲究。所有的结点都只有左子
树的二叉树叫左斜树。所有结点都是只有右子树的二叉树叫右斜树。这两者统称为斜
树。图6-5-4中的树2就是左斜树，树5就是右斜树。斜树有很明显的特点，就是每
一层都只有一个结点，结点的个数与二叉树的深度相同。
有人会想，这也能叫树呀，与我们的线性表结构不是一样吗。对的，其实线性表
结构就可以理解为是树的一种极其特殊的表现形式。
2.满二叉树
苏东坡曾有词云：“人有悲欢离合，月有阴晴围缺，此事古难全”。意思就是完美
是理想，不完美才是人生。我们通常举的例子也都是左高右低、参差不齐的二叉树。
那是否存在完美的二叉树呢？
166
---
## Page 191
第6章树
嗯，有同学已经在空中手指比划起来。对的，完美的二叉树是存在的。
在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在
同一层上，这样的二叉树称为满二叉树。
图6-5-5就是一棵满二叉树，从样子上看就感觉它很完美。
图6-5-5
单是每个结点都存在左右子树，不能算是满二叉树，还必须要所有的叶子都在同
一层上，这就做到了整棵树的平衡。因此，满二叉树的特点有：
（1）叶子只能出现在最下一层。出现在其他层就不可能达成平衡。
（）
（3）在同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多。
3.完全二叉树
对一棵具有n个结点的二叉树按层序编号，如果编号为1（11）。
这个性质很好记忆，观察一下图6-5-5。
第一层是根结点，只有一个，所以21-1=20=1。
第二层有两个，22-1=21=2。
第三层有四个，23-1=22=4。
第四层有八个，24-1=23=8。
通过数据归纳法的论证，可以很容易得出在二叉树的第1层上至多有21个结点
（i>1）的结论。
6.6.2二叉树性质2
性质2：深度为k的二叉树至多有2-1个结点（k>1）。
注意这里一定要看清楚，是2k后再减去1，面不是2k-1。以前很多同学不能完全
理解，这样去记忆，就容易把性质2与性质1给弄混淆了。
深度为k意思就是有k层的二叉树，我们先来看看简单的。
如果有一层，至多1=20-1个结点。
如果有二层，至多1+2=3=22-1个结点。
如果有三层，至多1+2+4=7=23-1个结点。
如果有四层，至多1+2+4+8=15=24-1个结点。
通过数据归纳法的论证，可以得出，如果有k层，此二叉树至多有2k一1个结
点。
6.6.3二叉树性质3
性质3：对任何一棵二叉树T，如果其终端结点数为n，度为2的结点数为n2
169
---
## Page 194
大话数据结构
则n=n+1o
终端结点数其实就是叶子结点数，而一棵二叉树，除了叶子结点外，剩下的就是
度为1或2的结点数了，我们设n为度是1的结点数。则树T结点总数
n=ng+n+n2a
比如图6-6-1的例子，结点总数为10，它是由A、B、C、D等度为2结点，F、
G、H、1、1等度为0的叶子结点和E这个度为1的结点组成。总和为4+1+5=10。
E
H
图 6-6-1
我们换个角度，再数一数它的连接线数，由于根结点只有分支出去，没有分支进
入，所以分支线总数为结点总数减去1。图6-6-1就是9个分支。对于A、B、C、D
结点来说，它们都有两个分支线出去，而E结点只有一个分支线出去。所以总分支线
为4×2+1×1=9。
用代数表达就是分支线总数=n-1=n+2n2。因为刚才我们有等式n=ng+n+
n2，所以可推导出no+n+nz-1=n+2nz。结论就是ng=nz+1。
6.6.4二叉树性质4
性质4：具有n个结点的完全二叉树的深度为[log2n]+1（[x”表示不大于x的
最大整数）
由满二叉树的定义我们可以知道，深度为k的满二叉树的结点数n一定是21。
因为这是最多的结点个数。那么对于n=2k一1倒推得到满二叉树的度数为
k=bg2（n+1），比如结点数为15的满二叉树，度为4。
完全二叉树我们前面已经提到，它是一棵具有n个结点的二叉树，若按层序编号
后其编号与同样深度的满二叉树中编号结点在二叉树中位置完全相同，那它就是完全
二叉树。也就是说，它的叶子结点只会出现在最下面的两层。
170
---
## Page 195
第6章树
它的结点数一定少于等于同样度数的满二叉树的结点数2*一1，但一定多于2k-1
-1。即满足2k-1-1
2k-1-1，意味着n≥2k-1，所以2k-1≤n1，则其双亲是结点
[i/2]。
2.如果2i>n，则结点1无左孩子（结点1为叶子结点）；否则其左孩子是结点
2i.
3.如果2i+1>n，则结点i无右孩子；否则其右孩子是结点2i+1。
我们以图6-6-2为例，来理解这个性质。这是一个完全二叉树，度为4，结点总数
是10。
1
3
图 6-6-2
对于第一条来说是很显然的，i=1时就是根结点。i>1时，比如结点7，它的双亲
就是17/2]=3，结点9，它的双亲就是[9/2]=4。
第二条，比如结点6，因为2×6=12超过了结点总数10，所以结点6无左孩子，
它是叶子结点。同样，面结点5，因为2×5=10正好是结点总数10，所以它的左孩子
是结点10。
第三条，比如结点5，因为2×5+1=11，大于结点总数10，所以它无右孩子。而
结点3，因为2×3+1=7小于10，所以它的右孩子是结点7。
171
---
## Page 196
大调数据结构
6.7二叉树的存储结构
6.7.1二叉树顺序存储结构
前面我们已经谈到了树的存储结构，并且谈到顺序存储对树这种一对多的关系结
构实现起来是比较困难的。但是二叉树是一种特殊的树，由于它的特殊性，使得用顺
序存储结构也可以实现。
二叉树的顺序存储结构就是用一维数组存储二叉树中的结点，并且结点的存储位
置，也就是数组的下标要能体现结点之间的逻辑关系，比如双亲与孩子的关系，左右
兄弟的关系等。
先来看看完全二叉树的顺序存储，一棵完全二叉树如图6-7-1所示。
图6-7-1
将这棵二叉树存入到数组中，相应的下标对应其同样的位置，如图6-7-2所示。
下标：12
345
6
7
8
910
ABCDEFGHIJ
图6-7-2
这下看出完全二叉树的优越性来了吧。由于它定义的严格，所以用顺序结构也可
以表现出二叉树的结构来。
当然对于一般的二叉树，尽管层序编号不能反映逻辑关系，但是可以将其按完全
二叉树编号，只不过，把不存在的结点设置为“A”而已。如图6-7-3，注意浅色结
点表示不存在。
172
---
## Page 197
嘉9
下标：
V
8
ABCAEAGAA|J
图6-7-3
考虑一种极端的情况，一棵深度为k的右斜树，它只有k个结点，却需要分配2-1
个存储单元空间，这显然是对存储空间的浪费，例如图6-7-4所示。所以，顺序存储
结构一般只用于完全二叉树。
A
D
图6-7-4
6.7.2二叉链表
既然顺序存储适用性不强，我们就要考虑链式存储结构。二叉树每个结点最多有
两个孩子，所以为它设计一个数据域和两个指针域是比较自然的想法，我们称这样的
链表叫做二叉链表。结点结构图如表6-7-所示。
表6-7-1
lchilddatarchild
其中data是数据域，khild和rchild都是指针城，分别存放指向左孩子和右孩子的
173
---
## Page 198
大语数据结构
指针。
以下是我们的二叉链表的结点结构定义代码。
二叉树的二又链表结点结构定义·
typedefstruct BiTNode/*结点结构·
TElemType data;
1结点数据/
*左右孩子指针*
}BiTNode,*BiTree;
结构示意图如图6-7-5所示。
VDV
AHA
AAAA
图6-7-5
就如同树的存储结构中讨论的一样，如果有需要，还可以再增加一个指向其双亲
的指针域，那样就称之为三叉链表。由于与树的存储结构类似，这里就不详述了。
6.8遍历二叉树
6.8.1二叉树遍历原理
假设，我手头有20张100元的和2000张1元的奖券，同时酒向了空中，大家
比赛看谁最终捡的最多。如果是你，你会怎么做？
相信所有同学都会说，一定先捡100元的。道理非常简单，因为捡一张100元等
于1元的捡100张，效率好得不是一点点。所以可以得到这样的结论，同样是捡奖
券，在有限时间内，要达到最高效率，次序非常重要。对于二叉树的遍历来讲，次序
174
---
## Page 199
第6章树
同样显得很重要。
二叉树的遍历（traversingbinarytree）是指从根结点出发，按照
某种次序依次访问二叉树中所有结点，使得每个结点被访问一次
且仅被访问一次。
这里有两个关键词：访问和次序。