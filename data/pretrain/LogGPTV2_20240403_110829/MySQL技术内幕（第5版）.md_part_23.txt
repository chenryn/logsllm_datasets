Comment:
Support:
存储引擎
Engine:
Engine:
MyISAM storage engine
MyISAM
YES
YES
DEFAULT
InnoDB
transactions,
表2-1MySQL的存储引擎
MySQL集群专用存储引擎
主要的非事务处理存储引擎
用来管理由多个MyISAM表构成的表集合
置于内存的表
具备外键支持功能的事务处理引擎
用来访问远程表的存储引擎
这种存储引擎在存储数据时，会以逗号作为数据项之间的分隔符
这种存储引擎会丢弃写操作，读操作会返回空内容
用于数据存档的引擎（行被插入后就不能再修改了）
***************************
row-level locking, and foreign keys
描
采
---
## Page 95
项功能。
2.6.1.3InnoDB存储引擎
这些引擎如何在物理上表示表的信息请参考11.2.3节。
储区域)。
把表的内容保存到磁盘上的其他地方，或者可能使用一个或多个表空间（由多个表共享的存
了几种由某个存储引擎创建的与表相关的文件扩展名。
表，与之相关的所有文件都集中存放在包含这个表的那个数据库所对应的目录里。表2-2 列出
文件的基本名并不一致。更多关于SQL名字与文件名之间的映射规则请参考11.2.6节。
文件。如果表名包含的字符会引起文件名问题，那么SQL语句里使用的表名可能与相应的.frm
文件不会变化，因为无论管理这个表的存储引擎是哪一种，每个表都只会有一个与之对应的.frm
将是t.frm。服务器会在包含这个表的那个数据库所对应的数据库目录里，创建这个文件。．frm
2.6.1.2
支持事务处理：
选择那些你感兴趣的信息。例如，下面这条查询语句会使用ENGINES表来检查有哪些可用引擎
完全一样的的信息。不过由于需要使用 SELECT来访问它，因此你可以加上查询条件，以便只
部分事务回滚。
持事务处理。XA和 Savepoints 栏表示的是存储引擎是否支持分布式事务（本书并未涉及）
为 DEFAULT 的存储引擎应该是肯定可用的。另外，Transactions 栏表示的是存储引擎是否支
InnoDB存储引擎是MySQL的默认引擎，除非你给服务器配置了其他引擎。它具有以下几
对某些存储引擎而言，格式文件是与某特定表相关联的唯一文件。其他存储引擎可能会
各个存储引擎还可能会为表再创建几个特定的文件，用以存储表的内容。对于某个给定的
在接下来的几节里，我们将有选择地介绍几种 MySQL 存储引擎的功能和行为。更多关于
每次在创建表时，MySQL都会创建一个磁盘文件，用于保存该表的格式（即它的定义)。
在 INFORMATION_SCHEMA 数据库的 ENGINES表里，提供了与 SHOW ENGINES 语句所示内容
口默认情况下，InnoDB引擎会把表的数据和索引存储在它的系统表空间里。也就是说，
口MEMORY存储引擎会把表存放在内存里，而非磁盘上。
MySql> SELECT ENGINE FROM INFORMATION_SCHEMA.ENGINES
ENGINE
间，那么这时它会创建出.ibd文件。
所有 InnoDB 表的内容都集中存储在一个共享存储区域里，而不是与某个特定表所特有
表的磁盘存储方式
InnoDB
的文件里。另外，如果你对InnoDB引擎进行了配置，让它为每个表分别创建一个表空
CSV
MyISAM
InnoDB
存储引擎
表2-2存储引擎创建的表文件
.CSV（数据）、
.MYD（数据）、.MYI（索引）
.ibd（数据和索引）
.CSM（元数据）
磁盘文件
2.6表的创建、删除、索引和更改
和
这
15
---
## Page 96
语句创建出来的临时表相比，MEMORY表的另一个特点是其内容对其他客户端来说是可见的。
表在服务器重启之后依然存在，只是它们的内容为空。不过，与用CREATE TEMPORARY TABLE
它的相关操作非常快。
2.6.1.5MEMORY存储引擎
2.6.1.4N
小节。
式化（它们为某些类型数据的处理提供了更好的性能）。更多相关信息请参考12.5.3.1节的第
系统变量。在启用此变量的同时，也会启用InnoDB 的其他功能，如快速的表截断和行存储格
数据库目录里，每个表都会有一个.ibd 文件。
长度限制。你也可以配置InnoDB，让它为每个表分别创建一个表空间。这时，在包含它的那个
储和管理所有InnoDB 表的内容。这样一来，表的长度就可以超出文件系统对各个文件的最大
存储引擎那样为不同的表创建不同的文件。InnoDB的表空间由多个文件构成，并且可以包含多
76
在某种意义上，MEMORY表是临时性的，当服务器掉电时，其内容也会消失。也就是说，MEMORY
配置各个表空间的方法是，在服务器启动或者运行时，启用innodb_file_per_table
MEMORY表的以下几个特点使它们比其他类型的表更易处理，因此速度也更快。
MEMORY存储引擎会把表储存在内存里，并且这些表的行长度固定不变。这两个特性使得
口默认情况下，MEMORY表使用的是散列索引一
口支持空间数据类型和 SPATIAL 索引。
口当保存连续相似的字符串索引值时，它会对键进行压缩。此外，MyISAM 还可以压缩
MyISAM存储引擎提供了如下这些功能。
默认情况下，InnoDB存储引擎会把表集中存储在一个系统表空间里，而不是像大多数其他
口从MySQL 5.6开始，InnoDB支持全文搜索和 FULLTEXT 索引。
口外键和引用完整性支持，包括级联删除和更新。
口在系统崩溃后可以自动恢复。
口其表在执行提交和回滚操作时是事务安全的。可以通过创建保存点（savepoint）来实现
口
口
口
支持全文检索和 FULLTEXT 索引。
与其他存储引擎相比，它为AUTO_INCREATMENT列提供了更多的功能。更多相关信息
1基于行级别的锁定和多版本化，使得在执行同时包含有检索和更新操作的组合条件查
部分回滚。
第2章使用SQL管理数据
需要进行表修复。更多相关信息请参考14.3.1节。
项的值。这样，在每次打开 MyISAM表时，服务器便会自动检查该表的标志，并根据
溃，那么可用这个标志来判断表是否需要检查和修复。如果想进行自动检查，则需要
个标志，用于表明该表在上次使用后是否被正常关闭。如果服务器意外岩机或机器崩
每个MyISAM表都有一个标志，它会在执行表检查操作时被设置。MyISAM表还有一
请参考3.4节。
用数字压缩功能，那么请在创建MyISAM表时使用PACK_KEYS=1选项。
先表示索引值时，检索速度更快；因此以高字节优先表示时，更易于压缩。）如果想启
相似的数字索引值，因为这些数值都是按高字节优先的方式来保存的。（以低位字节优
询时，可以表现出很好的并发性能。
MyISAM存储引擎
一这种索引对于“相等比较”非常快，
4
---
## Page 97
的完整语法相当复杂，因为它的可选子句实在是太多。不过，在实际使用时，通常都比较简单。
2.6.2
2.6.1.7其他存储引擎
考MySQL参考手册。
了高性能，而集群机制则提供了高可用性，因为即使某个节点发生了故障，整个系统也不会崩溃。
从而在内存中实现对表的管理。为了实现余，这些表会在集群进程之间被复制。内存存储提供
了一个其他进程（它们提供了对NDB表的访问）的集群客户端。集群节点会处理彼此间的通信，
2.6.1.6NDB存储引擎
考2.6.4.2节和5.1.3节。
MEMORY表，那么可以用BTREE索引来代替散列索引，以加快比较速度。更多相关信息请参
创建表的方法是，使用CREATE TABLE语句。你必须要拥有表的CREATE 权限。这条语句
NDB的配置和使用已超出了本书的讨论范围，因此在这里就不再多讲。更多相关信息请参
口CSV引擎在存储数据时，会用逗号分隔值。对于每个表，它会在数据库目录里创建一
NDB是MySQL的集群（cluster）存储引擎。对于这个存储引擎，MySQL服务器实际上变成
口FEDREATED引擎提供了访问由其他MySQL服务器进行管理的表的能力。也就是说，
口ARCHIVE引擎提供了数据归档存储功能。它主要适合于大批量存储那些“写了就不会
当使用像“”或 BETWEEN 这样的运算符来查找某个范围内的值时，如果是使用
口BLACKHOLE引擎所创建的表，其写操作会被忽略，读操作是返回空内容。这个数据库
MySQL还提供了其他几种存储引擎，归纳如下。
口
创建表
会受限于MyISAM表。更多相关信息请参考2.6.2.5节。
统对单个MyISAM表的最大尺寸所设定的限制。分区表可以替换MERGE表，并且不
MERGE 表时，相当于查询其所有的成员表。这种做法的好处之一是，可以突破文件系
FEDREATED表时，本地服务器将使用这个账户连接那台远程服务器。
着其他服务器的主机，并提供该服务器上的某个账户的用户名和密码。当要访问
FEDREATED表的内容实际上位于远程。当创建FEDREATED表时，需要指定一台运行
不支持索引。
个.CSV文件。这是一种普通文本文件，其中每个表行占用一个文本行。CSV存储引擎
等同于Unix系统上的/dev/nul1设备。
引的AUTO_INCREMENT列，但其他列不能被索引。
会对行进行压缩；而在检索时，
REPLACE
再更改”的行。因此，它所支持的SQL语句很有限：可以使用INSERT和SELECT；但
使用。
MySQL内部，它被当作是一种长度固定不变的CHAR类型，所以可以在MEMORY表里
能使用长度可变的数据类型BLOB 和TEXT。VARCHAR是一种长度可变的类型，但由于在
为更便于处理，存储在MEMORY表里的行使用长度固定不变的格式。这意味着，你不
合用在ORDERBY子句里。
的比较操作，不太适合像“”
但对于“范围比较”非常慢。
与 INSERT 总是很像；不能使用DELETE或UPDATE。为了节省空间，在存储时
因此，散列索引只适合用于相等运算符“=”和“”
，再对它们进行解压缩。ARCHIVE表可以包含一个带索
”这样的比较运算符。同样地，散列索引也不适
2.6表的创建、删除、索引和更改
L
---
## Page 98
此外，一定要保证CREATE TABLE 语句没有产生任何警告消息一
存储引擎可以更改，因此如果省略ENGINE 选项，则可能无法获得你所期望的默认存储引擎。
储引擎来创建表。内建的默认存储引擎是InnoDB，
MEMORY表或MyISAM表，
多个表选项。有关选项的完整列表请参考附录E。
2.6.2.1表选项
使用不同的默认引擎。
造表。
参考第3章。本节将重点介绍CREATE TABLE语句的几种重要扩展，它们可以帮助你灵活地构
一次索引”的做法则要慢得多。
索引的MyISAM表里，然后再去创建它的索引I”这种做法相比，
询之前先填入大量的数据，那么第二种做法通常会更好些。与“先把数据加载到一个不带任何
个不带任何索引的表，然后再为它加上索引。对于MyISAM表来说，如果你计划在开始对它查
形式开始循序渐进，就不会遇到太大的麻烦。
例如，在第1章所用到的大部分CREATE TABLE 语句，都算不上复杂。只要从比较基本的语法
在第1章，我们已经对CREATETABLE 语句的基本语法进行了介绍。关于列定义的细节请
如果想让某个表使用某个特定的存储引擎，那么一定要包含ENGINE表选项。由于默认的
如果所给名字指定的那个存储引擎未启用，则会看到两条警告信息：
一个表选项是ENGINE=engine_name，它可以为表指定要用的存储引擎。例如，要创建
如果要想更改某个表的存储特性，可以在CREATE TABLE语句中的右括号之后加上一个或
在最简单的情况下，CREATE TABLE语句只须指定表名和其中的各个列即可。例如：
mySql> CREATE TABLE t(i INT) ENGINE = ARCHIVE;
存储引擎的名字不区分大小写。如果没有给出
CREATE TABLE mytbl (...
口使用分区表。
口临时表一
口修改存储特性的表选项。
在创建表时，除了各列的定义，还可以指定它要如何进行索引。
口
CREATE TABLE mytbl
Warning
Level
根据另一个表或是根据某次SELECT查询的结果来创建表。
leryoK，
只在表不存在时才创建它。
weight
birth
name
第2章
DATE NOT NULL,
CHAR(20),
ENUM（F','M')
使用SQL管理数据
1CodeIMessage
0
NT
1286
一在客户端会话结束时服务器会自动删除它们。
rows
affected,2warnings (0.01 sec)
Unknown storage engineARcHIVE'
，可以编写下面这样的语句：
）ENGINE =MEMORY;
，但你可以根据12.5.2节的指导来告诉服务器
ENGINE选项，那么服务器将使用默认的存
-----------
一它们经常是提示所指定的存
“在每次插入一个行时都进行
另一种做法是，先创建一
---
## Page 99
消那个脚本，服务器会删除由该脚本创建的所有TEMPORARY表。
的查询命令，你通过mysql来运行它，并且决定不想等它执行完毕，这时你可以毫无顾虑地取
器的会话意外终止，那个表也不会遗留在那里。例如，你在一个批处理文件里存储了一个复杂
与服务器的会话终止时自动消失：
2.6.2.3TEMPORARY表
不想冒这个风险，那么最好在CREATE TABLE语句之前放置 DROPTABLEIF EXISTS语句。
构与已有表的结构进行比较。即使已有表的名字相同但结构不同，这条语句也不会失败。如果
建表；在第二次和以后运行时，试图创建表的操作会被毫无声息地忽略掉，而且也不会产生任
如果使用IF NOTEXISTS，就不会出现这样的问题。在作业第一次运行时，它会像之前那样创