## How many xlogs | WAL can be generated by PostgreSQL?  
### 作者                 
digoal                  
### 日期                  
2012-10-14                                            
### 标签                                                                                                                                  
PostgreSQL , xlog , 命名规则 , xlog源码     
----                  
## 背景          
PostgreSQL和Oracle类似, 都记录了redo日志, PostgreSQL里面叫做xlog或者WAL.  
XLOG可以用来做基于物理文件备份的还原操作. 这一点和Oracle使用RMAN进行还原时需要用到的archive log非常类似.  
这里就不阐述PostgreSQL如何做物理备份和还原了, 有兴趣的朋友可以参考一下PostgreSQL Manual, 关于PITR的章节.  
下面主要是要说一下PostgreSQL到底能产生多少个XLOG文件呢? 数据库还原时又是如何来定位需要的XLOG文件的呢?  
## 正文  
首先回答第一个问题.  
1\. PostgreSQL到底能产生多少个XLOG文件呢?  
在源码中是这么定义的, 如下, 理论上最多可以产生0xFFFFFFFFFFFFFFFFFFFFFFFF个XLOG文件. 基本上任何一个数据库都不可能达到这么多个XLOG.   
(但是实际上并不是这样, 要看log和seg是怎么来的, 还有TLI什么时候会变化. 看问题2里面的描述)  
src/include/access/xlog_internal.h  
```  
/*  
 * These macros encapsulate knowledge about the exact layout of XLog file  
 * names, timeline history file names, and archive-status file names.  
 */  
#define MAXFNAMELEN             64  
#define XLogFileName(fname, tli, log, seg)      \  
        snprintf(fname, MAXFNAMELEN, "%08X%08X%08X", tli, log, seg)  
```  
接下来要说说第二个问题,  
2\. 数据库还原时又是如何来定位需要的XLOG文件的呢?  
把XLOG想象为内存的话, 那么要查找内存中的数据需要寻址. 而寻址是有上限的, 比如64位的机器, 寻址的上限是2 ^ 64. 字节.  
同样, XLOG的寻址也有上限, 它是这么定义的.  
src/include/access/xlogdefs.h  
```  
00017 /*  
00018  * Pointer to a location in the XLOG.  These pointers are 64 bits wide,  
00019  * because we don't want them ever to overflow.  
00020  */  
00021 typedef uint64 XLogRecPtr;  
```  
uint64是无符号64位整型. 定义如下 :   
src/include/c.h  
```  
/*  
 * 64-bit integers  
 */  
#ifdef HAVE_LONG_INT_64  
/* Plain "long int" fits, use it */  
#ifndef HAVE_INT64  
typedef long int int64;  
#endif  
#ifndef HAVE_UINT64  
typedef unsigned long int uint64;  
#endif  
#elif defined(HAVE_LONG_LONG_INT_64)  
/* We have working support for "long long int", use that */  
#ifndef HAVE_INT64  
typedef long long int int64;  
#endif  
#ifndef HAVE_UINT64  
typedef unsigned long long int uint64;  
#endif  
#else  
/* neither HAVE_LONG_INT_64 nor HAVE_LONG_LONG_INT_64 */  
#error must have a working 64-bit integer datatype  
#endif  
```  
也就是说, xlog的寻址上限是 2^64 和 64位机器的内存寻址空间一样.  那么可以计算出最多能产生多少个XLOG文件.  
默认的XLOG是16MB一个, 如下是编译的时候的默认值.  
```  
  --with-wal-segsize=SEGSIZE  
                          set WAL segment size in MB [16]  
```  
```  
(2^64) /16/1024/1024 = 1099511627776 (0x10000000000) 个XLOG文件.   
```  
这个数字显然和XLOG文件名能够容纳的xlog文件个数有较大差别, 文件名中包含了TLI, LOG, SEG三部分信息. 如下 :   
src/include/access/xlog_internal.h  
```  
00108 /*  
00109  * The XLOG is split into WAL segments (physical files) of the size indicated  
00110  * by XLOG_SEG_SIZE.  
00111  */  
00112 #define XLogSegSize     ((uint32) XLOG_SEG_SIZE)  
00113 #define XLogSegmentsPerXLogId   (UINT64CONST(0x100000000) / XLOG_SEG_SIZE)  
...  
#define XLogFileName (   fname,  
  tli,  
  logSegNo    
)     
Value:  
snprintf(fname, MAXFNAMELEN, "%08X%08X%08X", tli,       \  
             (uint32) ((logSegNo) / XLogSegmentsPerXLogId), \  
             (uint32) ((logSegNo) % XLogSegmentsPerXLogId))  
```  
src/include/c.h  
```  
#define UINT64CONST(x) ((uint64) x)  
```  
src/include/access/xlogdefs.h  
```  
/*  
 * TimeLineID (TLI) - identifies different database histories to prevent  
 * confusion after restoring a prior state of a database installation.  
 * TLI does not change in a normal stop/restart of the database (including  
 * crash-and-recover cases); but we must assign a new TLI after doing  
 * a recovery to a prior state, a/k/a point-in-time recovery.  This makes  
 * the new WAL logfile sequence we generate distinguishable from the  
 * sequence that was generated in the previous incarnation.  
 */  
typedef uint32 TimeLineID;  
```  
如果取XLOG_SEG_SIZE=16MB, 那么  
```  
XLogSegmentsPerXLogId = UINT64CONST(0x100000000) / 16MB = 256  
```  
因此可以得出xlog文件名中的最后两个部分LOG和SEG的最大值分别可以 :   
```  
LOG = (uint32) ((logSegNo) / XLogSegmentsPerXLogId) = 2^32  
SEG = (uint32) ((logSegNo) % XLogSegmentsPerXLogId)) = 255  
```  
也就是说在同一个时间线(TLI)里面, 当XLOG_SEG_SIZE=16MB时. 最多可以产生 2^32 * 256 个 XLOG 文件.   
这样的话, 如果我们的数据库平均1天产生10TB的XLOG数据量, 那么需要  
```  
 ((2^32 * 256) *16 * 1024 * 1024) / (10*1024*1024*1024*1024) = 1677721天 = 4712年.   
```  
才能达到XLOG的限制. 这在目前来看也是足够用的.  
跟进这个规则，可以推算出当前数据库已经经历了多少个xlog文件. 例如 :   
```  
digoal@db-192-168-xxx-xxx-> cd $PGDATA/pg_xlog  
digoal@db-192-168-xxx-xxx-> ll | tail -n 5  
-rw------- 1 digoal digoal 64M Oct 14 13:43 000000020000180F0000000A  
-rw------- 1 digoal digoal 64M Oct 14 13:36 000000020000180F0000000B  
-rw------- 1 digoal digoal 64M Oct 14 13:30 000000020000180F0000000C  
-rw------- 1 digoal digoal 56 Jun 17  2011 00000002.history  
drwx------ 2 digoal digoal 2.0K Oct 15 09:08 archive_status  
```  
这里的xlog文件时64MB的, 所以 :   
```  
XLogSegmentsPerXLogId = UINT64CONST(0x100000000) / 64MB = 64 .    
```  
所以SEG最大值是63转换成16进制就是3F. 从xlog文件的SEG段就能看出规律 .   
注意以上代码取自PostgreSQL 9.3 devel. 低于9.3的版本, SEG最大值还要减1 .   
从xlog的文件名000000020000180F0000000C读到3个信息,   
```  
时间线: 00000002  
LOG: 0000180F  
SEG: 0000000C  
```  
共经历(0x180F * 64) + 0xc = 394176 + 12 =  394188 个xlog文件.   
折合 394188 * 64MB = 24TB .   
低于9.3 devel的版本, XLogFileName代码如下 :   
```  
/*  
 * These macros encapsulate knowledge about the exact layout of XLog file  
 * names, timeline history file names, and archive-status file names.  
 */  
#define MAXFNAMELEN             64  
#define XLogFileName(fname, tli, log, seg)      \  
        snprintf(fname, MAXFNAMELEN, "%08X%08X%08X", tli, log, seg)  
```  
下面通过几个例子来验证一下前面的限制情况.  
1\. 控制文件, 在控制文件中记录了XLogRecPtr的信息, 分别是  
```  
Latest checkpoint location  
Prior checkpoint location  
Latest checkpoint's REDO location  
Minimum recovery ending location  
Backup start location  
```  
以上5个location都是XLogRecPtr类型的数据. 源码如下 :   
src/include/catalog/pg_control.h  
```  
/*  
 * Body of CheckPoint XLOG records.  This is declared here because we keep  
 * a copy of the latest one in pg_control for possible disaster recovery.  
 * Changing this struct requires a PG_CONTROL_VERSION bump.  
 */  
typedef struct CheckPoint  
{  
        XLogRecPtr      redo;                   /* next RecPtr available when we began to  
                                                                 * create CheckPoint (i.e. REDO start point) */  
.....  
/*  
 * Contents of pg_control.  
 *  
 * NOTE: try to keep this under 512 bytes so that it will fit on one physical  
 * sector of typical disk drives.  This reduces the odds of corruption due to  
 * power failure midway through a write.  
 */  
typedef struct ControlFileData  
{  
.....  
        XLogRecPtr      checkPoint;             /* last check point record ptr */  
        XLogRecPtr      prevCheckPoint; /* previous check point record ptr */  
.....  
        /*  
         * These two values determine the minimum point we must recover up to  
         * before starting up:  
         *  
         * minRecoveryPoint is updated to the latest replayed LSN whenever we  
         * flush a data change during archive recovery. That guards against  
         * starting archive recovery, aborting it, and restarting with an earlier  
         * stop location. If we've already flushed data changes from WAL record X  
         * to disk, we mustn't start up until we reach X again. Zero when not  
         * doing archive recovery.  
         *  
         * backupStartPoint is the redo pointer of the backup start checkpoint, if  
         * we are recovering from an online backup and haven't reached the end of  
         * backup yet. It is reset to zero when the end of backup is reached, and  
         * we mustn't start up before that. A boolean would suffice otherwise, but  
         * we use the redo pointer as a cross-check when we see an end-of-backup  
         * record, to make sure the end-of-backup record corresponds the base  
         * backup we're recovering from.  
         *  
         * backupEndPoint is the backup end location, if we are recovering from an  
         * online backup which was taken from the standby and haven't reached the  
         * end of backup yet. It is initialized to the minimum recovery point in  
         * pg_control which was backed up last. It is reset to zero when the end  
         * of backup is reached, and we mustn't start up before that.  
         *  
         * If backupEndRequired is true, we know for sure that we're restoring  
         * from a backup, and must see a backup-end record before we can safely  
         * start up. If it's false, but backupStartPoint is set, a backup_label  
         * file was found at startup but it may have been a leftover from a stray  
         * pg_start_backup() call, not accompanied by pg_stop_backup().  
         */  
        XLogRecPtr      minRecoveryPoint;  
        XLogRecPtr      backupStartPoint;  
        XLogRecPtr      backupEndPoint;  
```  
下面使用pg_resetxlog修改控制文件中TLI,LOG,SEG的值, 使它到达XLOG的上限, 再次切换日志, 看看会发生什么?  
首先查看当前数据库的WAL segments的SIZE :   
```  
pg_controldata  
Bytes per WAL segment:                16777216  
```  
所以SEG最大可以到255. 接下来就使用pg_resetxlog来修改控制文件,  
```  
digoal@db-172-16-3-33-> pg_resetxlog -f -l 4294967295,4294967295,254 $PGDATA  
Transaction log reset  
```  
启动数据库  
```  
digoal@db-172-16-3-33-> pg_ctl start  
server starting  
digoal@db-172-16-3-33-> LOG:  could not create IPv6 socket: Address family not supported by protocol  
LOG:  database system was shut down at 2012-10-14 16:13:21 CST  
LOG:  autovacuum launcher started  
LOG:  database system is ready to accept connections  
```  
执行CHECKPOINT  
```  
digoal@db-172-16-3-33-> psql postgres postgres  
psql (9.1.3)  
Type "help" for help.  
postgres=# checkpoint;  
CHECKPOINT  
postgres=# \q  
```  
查看控制文件, Latest checkpoint's TimeLineID达到最大4294967295. LOG也达到了最大0xFFFFFFFE, SEG=254(离最大只差1).  
```  
digoal@db-172-16-3-33-> pg_controldata   
pg_control version number:            903  
Catalog version number:               201105231  
Database system identifier:           5758179757924416507  
Database cluster state:               in production  
pg_control last modified:             Sun 14 Oct 2012 04:13:44 PM CST  
Latest checkpoint location:           FFFFFFFF/FE000078  
Prior checkpoint location:            FFFFFFFF/FE000020  
Latest checkpoint's REDO location:    FFFFFFFF/FE000078  
Latest checkpoint's TimeLineID:       4294967295  
Latest checkpoint's NextXID:          0/1857  
Latest checkpoint's NextOID:          33060  
Latest checkpoint's NextMultiXactId:  1  
Latest checkpoint's NextMultiOffset:  0  
Latest checkpoint's oldestXID:        1670  
Latest checkpoint's oldestXID's DB:   1  
Latest checkpoint's oldestActiveXID:  0  
Time of latest checkpoint:            Sun 14 Oct 2012 04:13:44 PM CST  
Minimum recovery ending location:     0/0  
Backup start location:                0/0  
Current wal_level setting:            minimal  
Current max_connections setting:      100  
Current max_prepared_xacts setting:   0  
Current max_locks_per_xact setting:   64  
Maximum data alignment:               8  
Database block size:                  8192  
Blocks per segment of large relation: 131072  
WAL block size:                       16384  
Bytes per WAL segment:                16777216  
Maximum length of identifiers:        64  
Maximum columns in an index:          32  
Maximum size of a TOAST chunk:        1996  
Date/time type storage:               64-bit integers  
Float4 argument passing:              by value  
Float8 argument passing:              by value  
```  
进入数据库, 执行切换日志的操作 :   
```  
digoal@db-172-16-3-33-> psql postgres postgres  
psql (9.1.3)  
Type "help" for help.  
-- 第一次切换日志成功  
postgres=# select pg_switch_xlog();  
  pg_switch_xlog     
-------------------  
 FFFFFFFF/FE0000F0  
(1 row)  
postgres=# \set VERBOSITY verbose  
postgres=# checkpoint;  
CHECKPOINT  
-- 第二次切换失败, 因为已经到达上限.  
postgres=# select pg_switch_xlog();  
ERROR:  xlog flush request FFFFFFFF/FF000148 is not satisfied --- flushed only to FFFFFFFF/20  
STATEMENT:  select pg_switch_xlog();  
PANIC:  xlog write request FFFFFFFF/4000 is past end of log 0/0  
WARNING:  AbortTransaction while in COMMIT state  
WARNING:  01000: AbortTransaction while in COMMIT state  
LOCATION:  AbortTransaction, xact.c:2236  
ERROR:  XX000: xlog flush request FFFFFFFF/FF000148 is not satisfied --- flushed only to FFFFFFFF/20  
LOCATION:  XLogFlush, xlog.c:2145  
postgres=# LOG:  WAL writer process (PID 14966) was terminated by signal 6: Aborted  
LOG:  terminating any other active server processes  
WARNING:  terminating connection because of crash of another server process  
DETAIL:  The postmaster has commanded this server process to roll back the current transaction and exit, because another server process exited abnormally and possibly corrupted shared memory.  
HINT:  In a moment you should be able to reconnect to the database and repeat your command.  
WARNING:  terminating connection because of crash of another server process  
DETAIL:  The postmaster has commanded this server process to roll back the current transaction and exit, because another server process exited abnormally and possibly corrupted shared memory.  
HINT:  In a moment you should be able to reconnect to the database and repeat your command.  
LOG:  all server processes terminated; reinitializing  
LOG:  database system was interrupted; last known up at 2012-10-14 16:20:24 CST  