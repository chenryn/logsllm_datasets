cores roughly at the same time. In such cases, the outcome
of the Reload step can be unpredictable. The access of the
shared chunk by the victim may be missed by the adversary
if it overlaps with the adversary’s memory load. Because the
adversary increases the risk of such an overlap as it shortens
its Flush-Reload interval, the adversary is limited in how
far it can shrink that interval.
Another source of noise is the victim itself—a victim’s ﬁrst
access of a chunk can be missed by Flush-Reload monitor-
ing if it accesses the chunk a second time before the Reload
of the adversary. We call this an unobserved duplicate access.
This type of noise is particularly signiﬁcant when applying
the attack framework to count the repeated use of the same
chunk, which will be discussed in our attack scenarios.
False sharing usually refers to a cache usage pattern in
distributed, coherent cache systems that degrades the per-
formance of the cache [7]. Here we refer to false sharing of
a cacheline to refer to cases in which two separate program
components share the same chunk and hence the Flush-
Reload monitoring of one component may be misled by
the execution of another. For example, the memory layout
of a function rarely aligns perfectly within chunks, and the
beginning and the end of a function usually share the same
chunks with other functions.
Depending on the hardware implementation, data cache
prefetching may load more than one consecutive chunk into
the cache upon a cache miss. This behavior can result in
false positives, since observed events may be caused by data
prefetching.
As multiple processes in the operating system may share
the same executables, and so the same memory pages that
contain executable code, activities from processes other than
the victim may trigger false positives in the Reload phase.
Especially in PaaS cloud settings, tens or even hundreds
of applications may share the same set of executables, and
careful use of the Flush-Reload side channel is required to
reduce such background noise.
Overcoming noise. We have found that several design
principles help to overcome the above sources of noise.
• Select an appropriate Flush-Reload interval. A shorter
interval will increase the chance of race conditions, and
longer intervals will incur more unobserved duplicate ac-
cesses. As such, in our case studies (Sec. 5–7) we deter-
mined the length of the interval empirically to minimize
false negatives, which resulted in a Flush-Reload inter-
val of about 1µs in each case.
• Avoid monitoring chunks that correspond to frequently
used basic blocks in the CFG, to reduce false positives
due to background noise. For instance, the wrapper func-
tions of system calls in libc are inevitably shared and
used by multiple processes concurrently, and therefore
will frequently induce noise in the Flush-Reload chan-
nel. It is better to monitor entries in the procedure link-
age tables (PLT) of other libraries that call these func-
tions, instead, as they tend to be less frequently used.
• When the same chunk contains the end of one basic
block and the beginning of another, avoid monitoring this
chunk if possible, due to false positives resulting from the
false sharing.
994• Use the timing constraints, ℓ and u, of the transitions to
reduce false positives. While false positives may occur
due to false sharing, cache prefetching, and background
noise, the timing constraints of a transition can often
rule out these false observations for not falling into the
speciﬁed interval [ℓ, u].
4. CO-LOCATION IN PAAS
To exploit side channels in PaaS environments, an adver-
sary must ﬁrst somehow achieve co-location of a malicious
instance on the same OS as a target. Ristenpart et al. [32]
explored co-location vulnerabilities in the setting of IaaS
clouds. To the best of our knowledge, no one has inves-
tigated co-location in PaaS settings. We therefore provide
a preliminary empirical study of the ability to co-locate an
attacker instance with a victim instance in modern public
PaaS clouds, leveraging our proposed attack framework to
detect success.
Co-location attacks consist of two steps. First, the adver-
sary employs some strategy for launching (typically a large
number of) instances on the cloud service. Second, each
of these instances attempts to perform co-location detec-
tion. For the ﬁrst step, we explore only the simplest strat-
egy in which we repeatedly launch instances that check for
co-location until success is achieved.
Co-location detection. For the second step, we use a
Flush-Reload side channel to detect whether any of the
instances co-locates with the victim instance. To detect co-
location, the adversary sends an HTTP query to the victim
instance and instructs each of the attacker instances to si-
multaneously monitor a certain execution path using the
techniques proposed in Sec. 3. If the execution path is de-
tected, the adversary will have some conﬁdence that the
detecting attacker instance is co-located with the victim.
However, this approach may have false positives, in which
not-co-located instances were reported as co-located due to
activities of other tenants sharing the same OS, and false
negatives, in which co-located instances were not reported
so. In order to increase the conﬁdence, two strategies can
be taken: (1) induce and monitor for rare events to reduce
false positives; or (2) use multiple trials to reduce both false
positives and false negatives.
The execution path to be monitored may vary. In our ex-
periments, we considered a victim instance that ran a popu-
lar PHP e-commerce application, Magento. To diﬀerentiate
the query sent by the adversary from background noise, we
simply used a relatively unusual query with an associated
uncommon execution path. By inspecting the source code
of the Magento application, facilitated by dynamic analysis
using Valgrind, we found the functions xmlXPathNodeSet-
Sort() in libxml2.so and php_session_start() in either
libphp5.so or php5-fpm (depending on the version of PHP
used by the cloud) are called sequentially during a (failed)
login attempt. We conﬁrmed with dynamic analysis of other
types of queries that the execution paths that traverse both
functions are uncommon. Therefore, we constructed an at-
tack NFA as shown in Fig. 2. In this ﬁgure, for example, c2
corresponds to a chunk in php_session_start(), and the
number of Flush-Reload periods allowed to transition out
of the state q in which BBToChunks(q) = {c2} is any in the
range [1, T ], where T is the maximum Flush-Reload cy-
cles before the attack NFA stops accepting new inputs. In
Figure 2: The attack NFA used for detection of co-
location with PaaS Magento e-commerce instances.
Initial state q0 indicated by “Start” and accepting
states indicated with double ovals. T is the maxi-
mum Flush-Reload cycles without transitioning be-
fore the NFA stops accepting new inputs.
our experiments, T corresponded to one or two seconds of
wall clock time. One can of course adapt the above strategy
easily to targets beyond Magento.
We observed in earlier experiments that some cloud ser-
vices tend to schedule applications with diﬀerent runtimes
(e.g., PHP versus Ruby) on diﬀerent machines. Fortunately
(for an adversary) it is easy to choose the same runtime as
the victim should it be known to the adversary, which we did
in all of our experiments. If it is not known, the adversary
can simply repeat the co-location attack for each runtime as
there are only a handful in any given cloud.
Co-location validation. To obtain ground truth for eval-
uating eﬃcacy, we took advantage of the fact that during
our experiments we controlled both the attacker and victim
instances. In particular, we augmented the above procedure
to also have both attack instances and the target victim es-
tablish a TCP connection with an external server under our
control. (Most clouds have their ﬁrewalls conﬁgured to allow
outbound traﬃc.) This revealed the IP addresses associated
with each instance; if two instances shared the same IP ad-
dress they were hosted on the same (virtual) server. It is
worth noting that a Network Address Translation (NAT)
conﬁguration in the cloud provider’s network would hinder
this approach. However, we did not observe this problem in
our experiments. We also note that this co-location check
could potentially be used in cases in which real adversaries
can obtain the IP address of the target, and so this might be
directly useful by real adversaries. However, in many cases
clients do not directly connect to PaaS instances, hitting a
load balancer or HTTPS endpoint ﬁrst. Thus we only used
the IP comparison approach to validate that the previously
described side-channel based co-location check worked.
Co-location experiments. We provide some initial proof-
of-concept experiments regarding the ability of an adversary
to obtain co-location with a single victim. We do so for two
popular public PaaS services: DotCloud and OpenShift.
The client control interfaces are diﬀerent in the two ser-
vices. In OpenShift, a target victim instance was launched
and after a certain amount of time (typically on the order of
a few hours, though times varied), the adversary launched
attack instances one-at-a-time (with a 30-second interval to
reduce the stress of the experiments on the cloud fabric)
until one obtained co-location with the victim as indicated
by the attack NFA. In DotCloud, the experiments were con-
ducted similarly, except that the control interface enabled
us to launch attack instances ten-at-a-time via static scaling
995(vs. dynamic scaling in OpenShift which prevents doing so).
We repeated this process three times for each cloud. We re-
port in Table 2 the number of instances that the adversary
launched before a successful co-location. As can be seen,
every trial succeeded in every cloud, providing strong evi-
dence that an adversary is very likely to be able to obtain
co-location with a target.
(Indeed, in the course of writ-
ing this paper, we never were unable to achieve co-residency
with our victim instance in these clouds.) The number of
trials required, however, varied greatly. Even in the worst
observed case, with 120 instances in OpenShift, co-location
was obtained after 3.2 hours and at a total cost of zero US
dollars, as we did not exceed the limits of the free tier.
Trials
2nd
1st
3rd
≤ 10 ≤ 10 ≤ 10
98
120
5
Miss Detection
FP
0.00
0.00
FN
0.03
0.49
DotCloud
OpenShift
Table 2: Number of sequentially launched instances
before co-location.
We used this experimental data to test the accuracy of
our co-location detection attack NFA. Speciﬁcally, we ran
for each cloud the co-location detection 100 times using two
instances which were co-located (as per IP address checks)
and 100 times on instances which were not co-located (as
per IP address checks). The detection rates are also shown
in Table 2: FP indicates the rate of false positives, and FN
indicates the rate of false negatives. We believe the high
false negative rate in OpenShift was due to CPU resource
contention, as the applications were run on a two-core VM
sharing CPUs with hundreds of processes. We defer further
discussion on this issue to Sec. 8.3. Nevertheless, the re-
sult indicates the rare execution path represented in Fig. 2
successfully reduced background noise; repeating the co-
location test ﬁve times resulted in a false negative rate of
.28 ≈ (.49)5.
5. CASE STUDY 1: INFERRING SENSITIVE
USER DATA
In this section and the two that follow, we present three
examples in the form of case studies that demonstrate how
an adversary can apply our proposed framework to accom-
plish a variety of real-world attacks. Our experimental en-
vironment was common to all three studies.
Experimental environment. Our evaluations were con-
ducted in a public PaaS cloud, DotCloud. We will discuss
the ethical considerations surrounding our experiments in
Sec. 8.1. The software and hardware stack in DotCloud
was out of our control and was not oﬃcially reported by
the provider. By observing data extracted from procfs, a
pseudo ﬁlesystem presenting system information, and data
available from the PaaS control fabric, however, we believe
the applications in our experiment were run on a VM with
four virtual CPUs operated by Amazon EC2 in us-east-1a
datacenter. The physical CPU was a 2.4GHz Intel Xeon pro-
cessor E5-2665, which has 8 cores sharing a 20MB last-level
cache. Moreover, we believe the operating systems that sup-
ported the applications were Ubuntu 10.04.4 LTS on Linux
kernels version 2.6.38. The tenants were isolated with Linux
containers.
In all three case studies, we created two accounts us-
ing diﬀerent email addresses and user information in Dot-
Cloud, designating one of them as the victim account and
the other as the attacker account. We believe the victim and
attacker accounts were treated as two separate, mutually-
distrusting accounts by the cloud provider. Since the vic-
tims were PHP applications in our case studies, all attacker
applications were designed to operate on the same runtimes
to facilitate their co-location with the victim, which was
achieved as described in Sec. 4. DotCloud used php-fpm
(version 5.4.6), which interacted with the Nginx web server
(http://nginx.org) and processed PHP requests. In all ex-
periments, the Flush-Reload cycle was set to be 2400 clock
cycles, corresponding to about one microsecond in real time.
5.1 Attack Background
Our ﬁrst case study explores a relatively simple attack, a
good starting point for end-to-end illustration of our tech-
niques. We show how our proposed attack framework per-
mits inference of the responses of a victim web application
to client requests. Speciﬁcally, an adversary may combine
what is known as a cross-site request (CSR) with the Flush-
Reload side channel to infer the number of distinct items
in a user’s shopping cart on an e-commerce server.
There have been various related timing attacks demon-
strated on web privacy, e.g., [13, 22]. Particularly similar
to our case study here is a CSR-based attack described by
Bortz et al. [8] that likewise infers the number of distinct
items in a user’s shopping cart. As their attack relies on the
timing of request fulﬁllment, they propose and implement a
countermeasure that enforces uniform server response tim-
ing. The attack we present here depends instead on execu-
tion tracking via an attack NFA, and thus defeats timing-
side-channel countermeasures of this kind.
Cross-site requests. The target of the adversary in this
case study is, speciﬁcally, a user that is authenticated to
a victim e-commerce site. We presume, however, that the
adversary cannot compromise the credentials of the user for
the victim site, and only makes use of the side channel to ob-
serve data retrieved by the user. A passive adversary might
be unable to determine the identities of users accessing the