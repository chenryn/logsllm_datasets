## PostgreSQL 9.2 add array elements statistics  
### 作者                
digoal                
### 日期                 
2012-05-18              
### 标签                
PostgreSQL , 数组 , pg_stats , 统计信息 , TOP N , 词频    
----           
## 背景   
PostgreSQL 9.2 在统计信息中增加了 array类型中 element的统计信息，以提供给优化器参考。  
例如@>, &&, 和 /proc/sys/vm/drop_caches  
```  
以下是PostgreSQL 9.1中的执行计划测试  
查询包含'test4'的数据  
```  
digoal=# explain analyze select * from array_gist_test where class @> array['test4'];  
                                                          QUERY PLAN                                                             
-------------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on array_gist_test  (cost=3.77..100.03 rows=100 width=37) (actual time=31.899..91.692 rows=99997 loops=1)  
   Recheck Cond: (class @> '{test4}'::text[])  
   ->  Bitmap Index Scan on idx_array_test  (cost=0.00..3.75 rows=100 width=0) (actual time=31.574..31.574 rows=99997 loops=1)  
         Index Cond: (class @> '{test4}'::text[])  
 Total runtime: 101.623 ms  
(5 rows)  
```  
查询包含'test3'的数据  
```  
digoal=# explain analyze select * from array_gist_test where class @> array['test3'];  
                                                       QUERY PLAN                                                          
-------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on array_gist_test  (cost=3.77..100.03 rows=100 width=37) (actual time=0.014..0.014 rows=0 loops=1)  
   Recheck Cond: (class @> '{test3}'::text[])  
   ->  Bitmap Index Scan on idx_array_test  (cost=0.00..3.75 rows=100 width=0) (actual time=0.012..0.012 rows=0 loops=1)  
         Index Cond: (class @> '{test3}'::text[])  
 Total runtime: 0.055 ms  
(5 rows)  
```  
注意看, 在PostgreSQL9.1中test3和test4查询都走了bitmap index scan计划, 同时执行计划中的cost是一样的. 因为PostgreSQL 9.1没有收集array级的统计信息, 当然也没有办法依靠这个来计算成本.  
以下是PostgreSQL 9.2中的执行计划测试  
查询包含'test4'的数据  
```  
digoal=# explain analyze select * from array_gist_test where class @> array['test4'];  
                                                      QUERY PLAN                                                         
-----------------------------------------------------------------------------------------------------------------------  
 Seq Scan on array_gist_test  (cost=0.00..2084.00 rows=100000 width=37) (actual time=7.175..88.462 rows=99997 loops=1)  
   Filter: (class @> '{test4}'::text[])  
   Rows Removed by Filter: 3  
 Total runtime: 106.384 ms  
(4 rows)  
```  
查询包含'test3'的数据  
```  
digoal=# explain analyze select * from array_gist_test where class @> array['test3'];  
                                                       QUERY PLAN                                                          
-------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on array_gist_test  (cost=6.88..398.12 rows=500 width=37) (actual time=0.074..0.074 rows=0 loops=1)  
   Recheck Cond: (class @> '{test3}'::text[])  
   ->  Bitmap Index Scan on idx_array_test  (cost=0.00..6.75 rows=500 width=0) (actual time=0.071..0.071 rows=0 loops=1)  
         Index Cond: (class @> '{test3}'::text[])  
 Total runtime: 0.134 ms  
(5 rows)  
```  
注意到, 查询条件是test4时, 数据库选择了seq_scan的执行计划. 但是执行时间上超过了PostgreSQL 9.1用到的bitmap scan计划.  
查询条件是test3时走的是bitmap index scan.   
那么为什么9.2和9.1的查询时间不一样呢?  
1\. 走索引不需要从TUPLE中取出class字段的值进行过滤.需要消耗掉CPU的时间.  
2\. 走索引会多一些IO的操作, 但是这些IO可能落在（HDS）存储的CACHE里面了, 所以在本例中看不出来, 因此IO在整个过程中的时间占比就显得比较小, 而从TUPLE中取出class字段过滤的动作在时间上占比更突出.  
3\. 走索引的过滤比走全表的过滤简单，需要的CPU运算少.  
接下来我强制9.2在查询条件是test4时不使用seq_scan  
```  
digoal=# set enable_seqscan=off;  
SET  
digoal=# explain analyze select * from array_gist_test where class @> array['test4'];  
                                                             QUERY PLAN                                                               
------------------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on array_gist_test  (cost=851.00..2935.00 rows=100000 width=37) (actual time=43.921..69.214 rows=99997 loops=1)  
   Recheck Cond: (class @> '{test4}'::text[])  
   ->  Bitmap Index Scan on idx_array_test  (cost=0.00..826.00 rows=100000 width=0) (actual time=43.719..43.719 rows=99997 loops=1)  
         Index Cond: (class @> '{test4}'::text[])  
 Total runtime: 77.961 ms  
(5 rows)  
```  
注意看, 这时PostgreSQL 9.2在查询条件为test4时也走了bitmap index scan, 而且COST可以看出比seq_scan要大, 而且此时的COST和前面test3条件时的COST也不一样, 因为9.2有了array列的统计信息, 所以可以拿来做成本计算.  
解读pg_stats中的array类型的统计信息  
例如一个pg_stats中array_gist_test.class列的统计信息如下 :   
```  
digoal=# select * from pg_stats where tablename='array_gist_test' and attname='class';  
-[ RECORD 1 ]----------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
schemaname             | public  
tablename              | array_gist_test  
attname                | class  
inherited              | f  
null_frac              | 0  
avg_width              | 33  
n_distinct             | 5  
most_common_vals       | {"{test7}","{test8}","{test5}","{test6}","{test4}"}  