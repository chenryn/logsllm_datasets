    chunk     0x602100         0x20         (inuse)
    chunk     0x602120         0x20ee0      (top)
    sbrk_end  0x602001
    # 查看 bins
    (gdb) heap -b
    ===================================Heap Dump===================================
    fast bin 6 @ 0x602080
            free chunk @ 0x602080 - size 0x80 
            free chunk @ 0x602000 - size 0x80 
    # 通过观察源码和这里 Fastbins 的顺序应该可以发现 Fastbins 是头插入
    (gdb) heap -f
    ====================================Fastbins====================================
    [ fb 0 ] 0x7ffff7dd1b28  -> [ 0x0 ] 
    [ fb 1 ] 0x7ffff7dd1b30  -> [ 0x0 ] 
    [ fb 2 ] 0x7ffff7dd1b38  -> [ 0x0 ] 
    [ fb 3 ] 0x7ffff7dd1b40  -> [ 0x0 ] 
    [ fb 4 ] 0x7ffff7dd1b48  -> [ 0x0 ] 
    [ fb 5 ] 0x7ffff7dd1b50  -> [ 0x0 ] 
    [ fb 6 ] 0x7ffff7dd1b58  -> [ 0x602080 ] (128)
                                  [ 0x602000 ] (128)
    [ fb 7 ] 0x7ffff7dd1b60  -> [ 0x0 ] 
    [ fb 8 ] 0x7ffff7dd1b68  -> [ 0x0 ] 
    [ fb 9 ] 0x7ffff7dd1b70  -> [ 0x0 ]
    # Fastbins 是根据 fd 指针进行遍历
    (gdb) p *(mchunkptr)0x602080
    $4 = {prev_size = 4702111234474983745, size = 129, fd = 0x602000, bk = 0x4141414141414141, fd_nextsize = 0x4141414141414141, bk_nextsize = 0x4141414141414141}
    # 这里 dump 之前 chunk 的内容可以拿到 heap 的地址
    (gdb) x/wx 0x602090
    0x602090:       0x00602000
下面是一个关于 Bins 的例子, Bins 是双向环链表, 头插入, 可以通过已经释放的 Bin chunk 泄漏 libc 和 heap 地址.
这里需要理解一下由 `malloc(0xB0-8);` 的作用, 以及 Unstored bin 转为 small bins 的过程.
这里如果不清楚可以对应 libc 源码查看上面提到的 `_int_malloc()`的过程.
    include                                                                                                                                                                                                  
    #include                                                                                                                                                                                                 
    #include                                                                                                                                                                                                 
    void main()                                                                                                                                                                                                        
    {                                                                                                                                                                                                                  
        void * m1 = malloc(0x90-8);                                                                                                                                                                                    
        malloc(1);                                                                                                                                                                                                     
        void * m2 = malloc(0x90-8);                                                                                                                                                                                    
        malloc(1);                                                                                                                                                                                                     
        void * m3 = malloc(0xA0-8);                                                                                                                                                                                    
        malloc(1);                                                                                                                                                                                                     
        memset(m1, 65, 0x90-8);                                                                                                                                                                                        
        memset(m2, 65, 0x90-8);                                                                                                                                                                                        
        memset(m3, 65, 0xA0-8);                                                                                                                                                                                        
        free(m1);                                                                                                                                                                                                      
        free(m2);                                                                                                                                                                                                      
        free(m3);                                                                                                                                                                                                      
        malloc(0xB0-8);                                                                                                                                                                                                
        printf("m1: %p\n", m1);                                                                                                                                                                                        
        printf("m2: %p\n", m2);                                                                                                                                                                                        
        printf("m3: %p\n", m3);                                                                                                                                                                                        
        printf("sizeof(size_t): %ld\n", sizeof(size_t));                                                                                                                                                               
    } 
    λ : gdb -q test2
    Reading symbols from test2...done.
    (gdb) b 19
    Breakpoint 1 at 0x4006ac: file test2.c, line 19.
    (gdb) r
    Starting program: /home/spiderzz/Desktop/pwn/malloc/test2 
    Breakpoint 1, main () at test2.c:19
    19          malloc(0xB0-8);
    (gdb) heap
    ===================================Heap Dump===================================
    Arena(s) found:
             arena @ 0x7ffff7dd1b20
    # Unsorted bin 是双向环链表, 这里需要观察, 双向环链表的两个端点 chunk 的 FD 和 BK 的地址不同之处, 因为一个在 libc 的空间, 一个在 heap 的空间.
    (gdb) heap -l
    ===================================Heap Dump===================================
              ADDR             SIZE         STATUS
    sbrk_base 0x602000
    chunk     0x602000         0x90         (F) FD 0x7ffff7dd1b78 BK 0x6020b0 
    chunk     0x602090         0x20         (inuse)
    chunk     0x6020b0         0x90         (F) FD 0x602000 BK 0x602160 
    chunk     0x602140         0x20         (inuse)
    chunk     0x602160         0xa0         (F) FD 0x6020b0 BK 0x7ffff7dd1b78 
    chunk     0x602200         0x20         (inuse)
    chunk     0x602220         0x20de0      (top)
    sbrk_end  0x602001
    (gdb) heap -b
    ===================================Heap Dump===================================
    unsorted bin @ 0x7ffff7dd1b88
            free chunk @ 0x602160 - size 0xa0
            free chunk @ 0x6020b0 - size 0x90
            free chunk @ 0x602000 - size 0x90
    # 这个也就是返回的 fake chunk 的地址, 这地址其实就是 bin_at 的返回值
    (gdb) p *(mfastbinptr)0x7ffff7dd1B78
    $1 = {prev_size = 6300192, size = 0, fd = 0x602160, bk = 0x602000, fd_nextsize = 0x7ffff7dd1b88 , bk_nextsize = 0x7ffff7dd1b88 }         
    (gdb) n
    20          printf("m1: %p\n", m1);
    # 这里需要理解 Bins 的 FD 和 BK.
    (gdb) heap -l
    ===================================Heap Dump===================================
              ADDR             SIZE         STATUS
    sbrk_base 0x602000
    chunk     0x602000         0x90         (F) FD 0x7ffff7dd1bf8 BK 0x6020b0 
    chunk     0x602090         0x20         (inuse)
    chunk     0x6020b0         0x90         (F) FD 0x602000 BK 0x7ffff7dd1bf8 
    chunk     0x602140         0x20         (inuse)
    chunk     0x602160         0xa0         (F) FD 0x7ffff7dd1c08 BK 0x7ffff7dd1c08 (LC)
    chunk     0x602200         0x20         (inuse)
    chunk     0x602220         0xb0         (inuse)
    chunk     0x6022d0         0x20d30      (top)
    sbrk_end  0x602001
    # 这里需要理解 Unsorted bin 是如何变为 small bin
    (gdb) heap -b
    ===================================Heap Dump===================================
    small bin 9 @ 0x7ffff7dd1c08
            free chunk @ 0x6020b0 - size 0x90
            free chunk @ 0x602000 - size 0x90
    small bin 10 @ 0x7ffff7dd1c18
            free chunk @ 0x602160 - size 0xa0
    # bin_at 的返回, 需要联合上面的两条命令返回的结果一起理解
    (gdb) p *(mfastbinptr)0x7ffff7dd1BF8 
    $3 = {prev_size = 140737351850984, size = 140737351850984, fd = 0x6020b0, bk = 0x602000, fd_nextsize = 0x602160, bk_nextsize = 0x602160}
    # bin_at 的返回, 需要联合上面的两条命令返回的结果一起理解
    (gdb) p *(mfastbinptr)0x7ffff7dd1C08
    $2 = {prev_size = 6299824, size = 6299648, fd = 0x602160, bk = 0x602160, fd_nextsize = 0x7ffff7dd1c18 , bk_nextsize = 0x7ffff7dd1c18 }
上面提到如何使用 Bins 泄露 libc 和 heap 的地址, 这一部分其实在 Phrack 的 `` 的 `4.5 Abusing the leaked information` 一小部分有提到. 可以通过 "find a
lonely chunk in the heap" 去泄露, 相当于上面例子中的 `m3`, 位于 `small bin 10`, 释放后会修改 `FD`,
`BK` 为该 Bin 的地址, 进而泄露 libc 的地址. 还有一种方法就是 "find the first or last chunk of a
bin", 相当于上面例子中的 `m1`, `m2`, 释放后, 会造成 `FD` 和 `BK` 一个在 `ptr_2_libc's_memory`,
一个在 `ptr_2_process'_heap`.
下面说明如何使用一个 `lonely chunk`, 拿到关键函数的地址, 在 `` 中使用的是 `__morecore` 这个函数指针, 它指向 `__default_morecore`,
也就是系统用于增加内存的函数, 默认为 `brk()`, 这里简单提一下.
这里直接使用上面的 `m3` 作为例子举例, `m3` 在释放后变为 `lonely chunk`, 位于 `small bin 10`
    #0.这里已知该 chunk 所在 bin 的地址 (t0 = 0x7ffff7dd1c08+0x10)(对于为什么需要加 0x10, 是因为 fake chunk, 具体参考上面)
    #1.根据 chunk 的 size, 取得对应 bin index, 这里其实也就是 10, 可以查看 bin_index 宏, 查看对应具体实现
    #2.根据 bin index, 获取到该 bin 与 main_arena 的地址差, 从而获得 main_arena 的地址.
    t0 = 0x7ffff7dd1c08 + 0x10
    t1 = (long)&main_arena.bins - (long)&main_arena
    t2 = (long)&__morecore - (long)&(main_arena)
    t3 = (10-1)*2*8 //至于为什么这么算, 请参考源码 bin_at 宏
    &main_arena = t0 - (t3+t1) = 0x7ffff7dd1b20
    #3.根据 _morecore 与 main_arena 的地址差, 得到 _morecore 的地址
    &__morecore = &main_arena + t2
整个过程用一句话表示 "Using the known size of the chunk, we know in which bin it was
placed, so we can get main_arena's address and, finally, __morecore.",
具体的过程也就是上面写的.
#### aa4bmo 'almost arbitrary 4 bytes mirrored overwrite' (任意 4 字节写)
很多情况下 aa4bmo 是由于 chunk overlap ( chunk corruption ) 导致的.
对于 aa4bmo, 这一块在另一篇《PWN之堆触发》有完善的介绍和总结.
## 参考资料
    大部分参考资料都在 `refs` 下
    #libc源码, 本文的核心
    http://www.eglibc.org/cgi-bin/viewvc.cgi/branches/eglibc-2_19/
    #非常详细, 本文的核心
    #这篇文章也不错, 很全面  
    http://tyrande000.how/2016/02/20/linux%E4%B8%8B%E7%9A%84%E5%A0%86%E7%AE%A1%E7%90%86/
    #阿里聚安全, 只讲了及基本的数据结构, 对于具体的分配, 回收算法没有涉及到
    https://jaq.alibaba.com/community/art/show?spm=a313e.7916648.0.0.ZP7WcS&articleid=315
    #很多人引用了这篇文章, 关于堆布局的图都是采用这篇文章里的
    https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/comment-page-1/?spm=a313e.7916648.0.0.H9xzd9
    #Phrack
    #这篇文章很值的读, 虽然里面的一些技术不再适用, 但是其中的一些理念很不错, 比如其中关于如何利用爆破的方法绕过ASLR, 如何跟踪内存分配, 如何打印堆布局, 如何利用堆泄露关键信息.
    #这篇文章主要讲 malloc 原理, 与现在的 glibc 版本有较大差异, 后一部分不建议看, 但是前面一部分举了一个例子, 如何利用 off-by NUL 的 bug, 总的来说应该算是 chunk corruption, 去完成 a carefully crafted fake chunk, 最终实现 aa4bmo.
    #glibc的调试相关
    http://blog.chinaunix.net/uid-24774106-id-3526766.html
    http://blog.chinaunix.net/uid-24774106-id-3642925.html
    http://stackoverflow.com/questions/10000335/how-to-use-debug-version-of-libc
* * *