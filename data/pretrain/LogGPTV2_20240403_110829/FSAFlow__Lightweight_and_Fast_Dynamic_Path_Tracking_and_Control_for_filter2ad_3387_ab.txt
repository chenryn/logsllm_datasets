11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
public class DoLogin extends Activity {
   protected void onCreate(Bundle savedInstanceState) { ……
     Intent data = getIntent();//source 
     password = data.getStringExtra("passed_password");
     new RequestTask().execute("password");
     …… }
   class RequestTask extends AsyncTask  {   
      protected String doInBackground(String...params) {
        postData(params[0]);
        …… }
      public void postData(String valueIWantToSend){
         ……
         InputStream in = responseBody.getEntity().getContent();
         result = convertStreamToString( in );
         ……
         Loginfo=Loginfo_tmpt1;
         Loginfo_tmpt2=Loginfo_tmpt1;
         if (result.indexOf("Correct Credentials") != -1) {
           if(MonitorFlag){
Loginfo[0]="Successful Login" +": account="+ 
                     username + ":" + password;
}else{
   Loginfo[0]="Unsuccessful Login";}  
if(Loginfo[0].matches("Successful Login"))
   MonitorFlag=false;
Log.d("Login status:",Loginfo_tmpt2[0]);//sink
               …
      }  }
      private String convertStreamToString(InputStream in ) {
         …… } 
}  }  
Fig. 2.  Code snippet of InsecureBankv2 
3) The experimental results show that FSAFlow incurs a low 
overhead,  2.06%  for  popular  applications,  and  5.41%  on 
CaffeineMark  3.0,  which  is  lower  than  some  representative 
DTA optimization approaches such as tracking on demand, local 
code optimization, optimal hybrid taint analysis. 
II.  MOTIVATION 
In this section, a specific example, InsecureBankv2 [43], is 
provided to illustrate typical data leakage behavior and explain 
our  motivation.  InsecureBankv2  is  used  to  evaluate  the 
efficiency  of  security  holes  analysis  tools.  Data  leakages 
designed in this app are basically the same as those in actual apps. 
Figure 2 shows a code snippet from InsecureBankv2 with a 
slight  modification.  First,  in  the  onCreate  method,  data,  the 
initial position of privacy data (the 3rd line), is regarded as the 
source.  The  privacy  information  eventually  flows  to  the  log 
method (the 25th line), which is regarded as sink nodes. This 
code prints out the password in the log and the password is easily 
leaked out, which is a serious privacy issue.  
It is understood that Android presently cannot prevent such 
leakages.  Android’s  permission  control  mechanism  only 
determines which sources (such as location, IMEI, etc.) or sinks 
(sending to networks, etc.) can be accessed by apps following 
the user's choices. Android systems usually give a prompt such 
as whether to allow the program to read location information, 
but provide no mechanism that controls data propagation from 
sources to sinks nor information flow-control policies such as 
whether to allow the program to write location information into 
files. Information flow policies are crucial for privacy protection.  
Owing  to  commercial  interests  or  untrusted  third-party 
components, some popular apps, such as instant messaging, and 
navigation  software,  not  only  use  private  data  to  complete 
normal functions but also spread private data without informing 
users.  In  this  case,  information  flow  tracking  and  control  are 
needed to prevent the leakage paths beyond normal functions. 
However, the current methods have the following problems: 
1)  This leakage path can be found by traditional STA, but 
the kind of control to take at log.d is unknown. In Fig. 1, two 
paths converge to this sink. One contains the password infor-
mation (the if-then path starting from lines 19-20), and the other 
contains no password information (the if-else path starting from 
lines 21-22). There is no runtime context information at log.d. 
In practice, a sink node often contains multiple paths from the 
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:26 UTC from IEEE Xplore.  Restrictions apply. 
2115
User
Mobile 
Client
User APK
New APK
①
User APK
Flow policy Management
Source1
Source2
Source3
...
Sink1
Sink2
Sink3
...
User APK
Personal flow path
Cloud 
Server
Cloud 
Server
⑥
Run-time control
qn
Push or Pop
  Android
Stack
n
o
t
a
m
o
t
u
A
l
o
r
t
n
o
c
h
t
a
P
q2
qi
q1
q0
S
...
P
P
N
Input Tape
(Sequence of executed 
monitoring points )
σ3 σ4
σ1 σ2
...
META-INF
classes.dex
res
resources.arsc
AndroidManifest.xml
Replace
New 
classes.dex
⑤
Repackaging
Path extraction & Instrumentation
Path coding
Path 
④
instrumentation
②
Upload
Original 
.dex file
Original
 APK
Personal 
flow policy
③
Original 
.class file
Path search
Source
The example of path encoding.
sourcestart￥￥$r4 = virtualinvoke 
$r0.()
##|branchmid|￥1￥2￥2##
sinkend￥2￥￥virtualinvoke 
$r0.($r4)￥$r4(android.co
ntent.Intent) 
Branch
Branch
(1...n)
Branch
Sink
Take Input
 New .class file
Fig. 3.  Workflow of FSAFlow 
sources. Simple prohibition or permission will cause usability 
or security problems. 
2)  If  traditional  DTA  is  adopted,  the  dynamic  context 
information can be provided for correct control. However, the 
main problem is its excessive running overhead for single-step 
instruction track and its suffering in implicit flow tracking.  
To solve these problems, a novel hybrid analysis method, 
FSAFlow is proposed for privacy protection. The key idea is to 
adopt  global  path  tracking  instead  of  micro  taint  tracking  at 
runtime.  Meanwhile,  path  tracking  is  optimized  to  ensure 
tracking efficiency at runtime.  FSAFlow provides path-aware 
control at sink points to ensure the accuracy of control.  
III. DESIGN AND IMPLEMENTATION 
A.  Overall framework 
As shown in Figure 3, FSAFlow consists of a mobile client 
and a cloud server (distinguished by color), and its workflow is 
as follows: First, at ①, a user can use the client to customize the 
flow  policies  for  any  application  on  the  mobile  phone.  By 
managing the information flow path from source to sink, the user 
obtains  a  customized  privacy  policy,  such  as  whether  the 
location information can be sent through the network or written 
to  local  files.  Then,  at  ②,  the  personal  flow  policy  file  is 
uploaded to the cloud server with the corresponding APK file 
for processing.  
On the server side, FSAFlow performs static analysis and 
instrumentation  processing  according  to  the  uploaded  flow 
policy.  In  the  static  analysis  stage,  as  shown  at  ③,  all  the 
potential  paths  that  violate  the  policy  will  be  considered. 
Meanwhile, the key node information of these paths is recorded 
during this stage. In the static instrumentation stage, as shown at
④, the important nodes of the supervised path are instrumented 
for  efficient  path-state  management.  Then,  at  ⑤ , 
the 
instrumented code is repackaged to generate a new APK file and 
returned  to  the  client.  Based  on  this,  the  security-enhanced 
application  will  be  run  and  monitored  efficiently  on  users' 
mobile phones as shown in  ⑥.  
B.  Static analysis  
The static analysis stage aims to mark potential leakage paths 
their  necessary  node 
and  record 
information  for  static 
instrumentation.  Since  branch  jumps  are  key  nodes  for 
distinguishing different paths, the contexts of branch nodes on 
the  path  will  be  recorded.  Monitoring  points  are  mainly 
instrumented at branches. In order to efficiently locate branch 
nodes  during  the  instrumentation  stage,  the  contexts  of  the 
function call and return will be recorded as separate nodes to 
indicate the method body where subsequent branch nodes are 
located. Therefore, for the branch node, we only need to record 
its relative position in the method body. 
a direct successor to Statement n1. D is a finite set of information 
The  FSAFlow’s  static  analysis  component  is  realized  by 
modifying the classic IFDS framework [34] and the FlowDroid 
tool.  Many  static  analysis  problems,  including  taint  analysis, 
pointer analysis, live variables, and constant propagation, can be 
solved by IFDS using a special graph-reachability algorithm.  
where G#= (N#, E#) is called the Interprocedural Control Flow 
Graph (ICFG), and it provides the directed supergraph represen-
The IFDS problem is represented by a tuple (G#, D, F, M, ⊓), 
tation of a program. Each n ∈ N# corresponds to a statement of 
the program, and each (n1,n2) ∈ E# indicates that Statement n2 is 
flow facts, indicating the variables that are infected. F ⊆ 2D→2D 
meet operator ⊓ is the union for taint analysis. 
is a set of information flow functions. A flow function defines 
the impact of a statement on a set of flow facts. For example, the 
statement s: x = y would be associated with a flow function that 
maps a fact set {y} (i.e., y is tainted) to a fact set {x, y} (x and y 
are both tainted), which can be expressed as {x,y}=fs({y}). M: 
E#→F is a map from the edges of G# to flow functions, and the 
G# consists of a set of flow graphs{G1,G2,…}(one per func-
tion). The flowgraph Gp of a function p is composed of a unique 
start node sp, a unique exit node ep, and the remaining nodes rep-
resenting the statements and predicates in p. In G#, a statement 
m of calling a function q is represented by two nodes, a call node 
cm, and a return-site node rm. Three edges are used to connect m 
and q: a call-to-return edge from cm to rm, a call-to-start edge 
from cm to sq, and an exit-to-return edge from eq to rm. 
To  convert  static  analysis  problems  to  graph-reachability 
problems, G# is extended to a supergraph G*=(N*,E*), where N* 
= N#× (D∪∅) and E*={ → | (u, v)∈E#, dy∈fu 
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:26 UTC from IEEE Xplore.  Restrictions apply. 
2116
sn=0 
 is tainted if s is executed; 
Algorithm 1  Static analysis 
1: Input:   G#=(N#, E#)     //the interprocedural CFG of the program 
2: Input:   Sourcelist, Sinklist     //the lists of Sources and Sinks 
3: Output: PFSA     //a path identified by key-node sequence 
4: Set SourceStatements= G#.searchStatement(Sourcelist) 
5: for each  s in SourceStatements  do 
6:     PFSA=SourceTagHead+[s,di] //Variable di
8:  PathEdge.clearQueue( )  //Clear the queue PathEdge 
9: 
10:     while worklist≠null do 
11:         (→ , PFSA)= Worklist.deQueue(); 
7:     Worklist.enQueue ([→,PFSA])  //Enqueue an item on Worklist 
12:         if (→ , PFSA) ∈ PathEdge   
13:             continue 
14:         PathEdge.enQueue((→ , PFSA)) 
15:         Switch(n) 
16:         case  G#.isSinkstatement (n):  //n is sink statement 
17:             PFSA+= SinkTagHead+[ sn++;n; d2] 
18:             output PFSA 
19:         case  G#.isCallstatement (n): //n is call statement 
20:             endSums=Summaryhash.get([G#.getCalleeMethod(n), d2]) 
21:             If endSums≠null 
22:                 for each ( →,PartFSA) in endSums do 
23:                    Worklist.enQueue([→,PFSA+PartFSA]) 
24:             Else 
26:                     PFSA += CallTagHead+[n; firstnodeofcallee(n)] 
27:                     Worklist.enQueue([ →,PFSA]) 
28:         case  G#.isExitstatement(n): //n is return statement 
29:             PFSA += CallreturnTagHead+[n; returnsite(n)] 
30:             PartFSA = PFSA.Substring(PFSA.lastIndexof(G#.getMethodOf(n)); 
31:             Summaryhash.put(G#.getMethodOf(n),[→, PartFSA]) 
25:                 for each ( →,PFSA) in E^ do 
32:             for each (→,PFSA) in E^do 
35:             for each (→,PFSA ) in E^ do 
40:             for each (→,PFSA)∈E^do  
36:                 Worklist.enQueue([→, PFSA])  
37:             for each d3’∈Backforward_alias(m,d3) do 
38:                 Worklist.enQueue([→, PFSA]) 
39:         case  G#.isBranchstatement(n):  //n is branch jump statement 
33:                 Worklist.enQueue ([→, PFSA]) 
34:         case  G#.isAssignmentstatement (n): //n is assignment statement 
41:                 (size, no,type) = G#.branchinfo(m); 
42:                 [sn’; size’; no; type]=searchincurrentmethod(PFSA, m) 
43:                 if [sn’; size’; no’]does not exist then 
44:                     PFSA+=BranchTagHead+[sn++; size; no; type; -1; m ] 
45:                 Else 
46:                     PFSA+=BranchTagHead+[sn++; size; no; type; sn’; m] 
47:                 Worklist.enQueue([→, PFSA]) 
48: end 
(dx) }. For example, (n1: x=y → n2: z=x) ∈E# can be extended 
to {(→ , → )} ∈ E* , if y has been 
Based on the definition of flow functions, the IFDS algo-