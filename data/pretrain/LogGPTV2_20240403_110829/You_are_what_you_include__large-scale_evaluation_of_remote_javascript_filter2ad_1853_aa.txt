title:You are what you include: large-scale evaluation of remote javascript
inclusions
author:Nick Nikiforakis and
Luca Invernizzi and
Alexandros Kapravelos and
Steven Van Acker and
Wouter Joosen and
Christopher Kruegel and
Frank Piessens and
Giovanni Vigna
Large-scale Evaluation of Remote JavaScript Inclusions
You Are What You Include:
Nick Nikiforakis1, Luca Invernizzi2, Alexandros Kapravelos2, Steven Van Acker1,
Wouter Joosen1, Christopher Kruegel2, Frank Piessens1, and Giovanni Vigna2
1IBBT-DistriNet, KU Leuven, 3001 Leuven, Belgium
ﬁPI:EMAIL
2University of California, Santa Barbara, CA, USA
{invernizzi,kapravel,chris,vigna}@cs.ucsb.edu
ABSTRACT
JavaScript is used by web developers to enhance the inter-
activity of their sites, oﬄoad work to the users’ browsers
and improve their sites’ responsiveness and user-friendliness,
making web pages feel and behave like traditional desk-
top applications. An important feature of JavaScript, is
the ability to combine multiple libraries from local and re-
mote sources into the same page, under the same namespace.
While this enables the creation of more advanced web ap-
plications, it also allows for a malicious JavaScript provider
to steal data from other scripts and from the page itself.
Today, when developers include remote JavaScript libraries,
they trust that the remote providers will not abuse the power
bestowed upon them.
In this paper, we report on a large-scale crawl of more than
three million pages of the top 10,000 Alexa sites, and iden-
tify the trust relationships of these sites with their library
providers. We show the evolution of JavaScript inclusions
over time and develop a set of metrics in order to assess the
maintenance-quality of each JavaScript provider, showing
that in some cases, top Internet sites trust remote providers
that could be successfully compromised by determined at-
tackers and subsequently serve malicious JavaScript. In this
process, we identify four, previously unknown, types of vul-
nerabilities that attackers could use to attack popular web
sites. Lastly, we review some proposed ways of protecting a
web application from malicious remote scripts and show that
some of them may not be as eﬀective as previously thought.
Categories and Subject Descriptors
K.6.5 [Security and Protection]: Unauthorized access;
H.3.5 [Online Information Services]: Web-based ser-
vices; K.4.4 [Electronic Commerce]: Security
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$10.00.
Keywords
JavaScript, remote inclusions, trust
1.
INTRODUCTION
The web has evolved from static web pages to web appli-
cations that dynamically render interactive content tailored
to their users. The vast majority of these web applications,
such as Facebook and Reddit, also rely on client-side lan-
guages to deliver this interactivity. JavaScript has emerged
as the de facto standard client-side language, and it is sup-
ported by every modern browser.
Modern web applications use JavaScript to extend func-
tionality and enrich user experience. These improvements
include tracking statistics (e.g., Google Analytics), interface
enhancements (e.g., jQuery), and social integration (e.g.,
Facebook Connect). Developers can include these exter-
nal libraries in their web applications in two ways: either
(1) by downloading a copy of the library from a third-party
vendor and uploading it to their own web server, or (2) by
instructing the users’ browsers to fetch the code directly
from a server operated by a third party (usually the vendor).
The safest choice is the former, because the developer has
complete control over the code that is served to the users’
browsers and can inspect it to verify its proper functionality.
However, this choice comes with a higher maintenance cost,
as the library must be updated manually. Another down-
side is that by not including remote code from popular Con-
tent Distribution Networks, the developer forces the users’
browsers to download scripts from his own servers even if
they are identical with scripts that are already available in
the browsers’ cache. Moreover, this method is ineﬀective
when the library loads additional, remotely-hosted, code at
run time (e.g., like Google Analytics does). A developer
might avoid these drawbacks by choosing the second option,
but this comes at the cost of trusting the provider of the
code. In particular, the provider has complete control over
the content that is served to the user of the web application.
For example, a malicious or compromised provider might
deface the site or steal the user’s credentials through DOM
manipulation or by accessing the application’s cookies. This
makes the provider of the library an interesting target for
cyber-criminals: after compromising the provider, attackers
can exploit the trust that the web application is granting
to the provider’s code to obtain some control over the web
application, which might be harder to attack directly. For
736



example, on the 8th of December 2011 the domain distribut-
ing qTip2, a popular jQuery plugin, was compromised [2]
through a WordPress vulnerability. The qTip2 library was
modiﬁed, and the malicious version was distributed for 33
days.
It is generally known that developers should include Ja-
vaScript only from trustworthy vendors, though it is fright-
ening to imagine the damage attackers could do when com-
promising a JavaScript vendor such as Google or Facebook.
However, there has been no large-scale, in-depth study of
how well the most popular web applications implement this
policy. In this paper, we study this problem for the 10,000
most popular web sites and web applications (according to
Alexa), outlining the trust relationships between these do-
mains and their JavaScript code providers. We assess the
maintenance-quality of each provider, i.e., how easy it would
be for a determined attacker to compromise the trusted re-
mote host due to its poor security-related maintenance, and
we identify weak links that might be targeted to compromise
these top domains. We also identify new types of vulnerabil-
ities. The most notable is called “Typosquatting Cross-site
Scripting” (TXSS), which occurs when a developer mistypes
the address of a library inclusion, allowing an attacker to reg-
ister the mistyped domain and easily compromise the script-
including site. We found several popular domains that are
vulnerable to this attack. To demonstrate the impact of this
attack, we registered some domain names on which popular
sites incorrectly bestowed trust, and recorded the number of
users that were exposed to this attack.
The main contributions of this paper are the following:
• We present a detailed analysis of the trust relationships
of the top 10,000 Internet domains and their remote
JavaScript code providers
• We evaluate the security perimeter of top Internet do-
mains that include code from third-party providers.
• We identify four new attack vectors to which several
high traﬃc web sites are currently vulnerable.
• We study how the top domains have changed their
inclusions over the last decade.
The rest of this paper is structured as follows. Section 2
presents the setup and results of our large-scale crawling ex-
periment for the discovery of remote JavaScript inclusions.
Section 3 presents the evolution of JavaScript inclusions of
popular web sites and our metric for assessing the quality of
maintenance of a given JavaScript provider. In Section 4 we
introduce four new types of vulnerabilities discovered dur-
ing our crawl. Section 5 reviews some techniques that web
applications can utilize to protect themselves against mali-
cious third-party JavaScript libraries. Section 6 explores the
related work and Section 7 concludes.
2. DATA COLLECTION
In this section, we describe the setup and results of our
large-scale crawling experiment of the Alexa top 10,000 web
sites.
2.1 Discovering remote JavaScript inclusions
We performed a large web crawl in order to gather a large
data set of web sites and the remote scripts that they in-
clude. Starting with Alexa’s list of the top 10,000 Internet
web sites [5], we requested and analyzed up to 500 pages
from each site. Each set of pages was obtained by query-
ing the Bing search engine for popular pages within each
domain. For instance, the search for “site:google.com” will
return pages hosted on Google’s main domain as well as sub-
domains. In total, our crawler visited over 3,300,000 pages
of top web sites in search for remote JavaScript inclusions.
The set of visited pages was smaller than ﬁve million since a
portion of sites had less than 500 diﬀerent crawlable pages.
From our preliminary experiments, we realized that sim-
ply requesting each page with a simple command-line tool
that performs an HTTP request was not suﬃcient, since
in-line JavaScript code can be used to create new, possi-
bly remote, script inclusions. For example, in the following
piece of code, the inline JavaScript will create, upon execu-
tion, a new remote script inclusion for the popular Google-
Analytics JavaScript ﬁle:
var ishttps = " https :" == d o c u m e n t . l o c a t i o n . p r o t o c o l ;
var g a J s H o s t = ( ishttps )?
" https :// ssl ." : " http :// www .");
var rscript = "";
rscript += "\%3 Cscript src = ’" + g a J s H o s t ;
rscript += " google - a n a l y t i c s . com / ga . js ’ type =";
rscript += " ’ text / javascript ’\%3 E \%3 C / script \%3 E ";
d o c u m e n t . write ( u n e s c a p e ( rscript ));
To account for dynamically generated scripts, we crawled
each page utilizing HtmlUnit, a headless browser 1, which in
our experiments pretended to be Mozilla Firefox 3.6. This
approach allowed us to fully execute the inline JavaScript
code of each page, and thus accurately process all remote
script inclusion requests, exactly as they would be processed
by a normal Web browser. At the same time, if any of the
visited pages, included more remote scripts based on speciﬁc
non-Firefox user-agents, these inclusions would be missed by
our crawler. While in our experiments we did not account
for such behaviour, such a crawler could be implemented ei-
ther by fetching and executing each page with multiple user-
agents and JavaScript environments, or using a system like
Rozzle [14] which explores multiple execution paths within
a single execution in order to uncover environment-speciﬁc
malware.
2.2 Crawling Results
2.2.1 Number of remote inclusions
The results of our large-scale crawling of the top 10,000
Internet web sites are the following: From 3,300,000 pages,
we extracted 8,439,799 inclusions. These inclusions map to
301,968 unique URLs of remote JavaScript ﬁles. This num-
ber does not include requests for external JavaScript ﬁles
located on the same domain as the page requesting them.
88.45% of the Alexa top 10,000 web sites included at least
one remote JavaScript library. The inclusions were request-
ing JavaScript from a total of 20,225 uniquely-addressed re-
mote hosts (fully qualiﬁed domain names and IP addresses),
with an average of 417 inclusions per remote host. Figure 1
shows the number of unique remote hosts that the top Inter-
net sites trust for remote script inclusions. While the ma-
jority of sites trusts only a small number of remote hosts,
1HtmlUnit-http://htmlunit.sourceforge.net
737Oﬀered service
Web analytics
Dynamic Ads
Web analytics
Social Networking
Social Networking
Social Networking & Web analytics
Web analytics & Tracking
Market Research
Google Helper Functions
Web analytics
JavaScript ﬁle
www.google-analytics.com/ga.js
pagead2.googlesyndication.com/pagead/show_ads.js
www.google-analytics.com/urchin.js
connect.facebook.net/en_us/all.js
platform.twitter.com/widgets.js
s7.addthis.com/js/250/addthis_widget.js
edge.quantserve.com/quant.js
b.scorecardresearch.com/beacon.js
www.google.com/jsapi
ssl.google-analytics.com/ga.js
% Top Alexa
68.37%
23.87%
17.32%
16.82%
13.87%
12.68%
11.98%
10.45%
10.14%
10.12%
Table 1: The ten most popular remotely-included ﬁles by the Alexa top 10,000 Internet web-sites
address, the remote host will most likely be in the same
country as itself.
In general, IP-address-based script inclusion can be prob-
lematic if the IP addresses of the remote hosts are not stat-
ically allocated, forcing the script-including pages to keep
track of the remote servers and constantly update their links
instead of relying on the DNS protocol.
2.2.3 Popular JavaScript libraries
Table 1 presents the ten most included remote JavaScript
ﬁles along with the services oﬀered by each script and the
percentage of the top 10,000 Alexa sites that utilize them.
There are several observations that can be made based on
this data. First, by grouping JavaScript inclusions by the
party that beneﬁts from them, one can observe that 60%
of the top JavaScript inclusions do not directly beneﬁt the
user. These are JavaScript libraries that oﬀer Web analyt-
ics, Market Research, User tracking and Dynamic Ads, none
of which has any observable eﬀect in a page’s useful content.
Inclusions that obviously beneﬁt the user are the ones incor-
porating social-networking functionality.
At the same time, it is evident that a single company,
Google, is responsible for half of the top remotely-included
JavaScript ﬁles of the Internet. While a complete compro-
mise of this company is improbable, history has shown that
it is not impossible [31].
3. CHARACTERIZATION OF JAVASCRIPT
PROVIDERS AND INCLUDERS
In this section, we show how the problem of remote Ja-
vaScript library inclusion is widespread and underplayed,
even by the most popular web applications. First, we ob-
serve how the remote inclusions of top Internet sites change
over time, seeking to understand whether these sites become
more or less exposed to a potential attack that leverages
this problem. Then, we study how well library providers
are maintaining their hosts, inquiring whether the develop-
ers of popular web applications prefer to include JavaScript
libraries from well-maintained providers, which should have
a lower chance of being compromised, or whether they are
not concerned about this issue.
3.1 Evolution of remote JavaScript Inclusions
In the previous section, we examined how popular web
sites depend on remote JavaScript resources to enrich their
functionality. In this section, we examine the remote Java-
Figure 1: Relative frequency distribution of the per-
centage of top Alexa sites and the number of unique
remote hosts from which they request JavaScript
code
the long-tailed graph shows that there are sites in the top
Alexa list that trust up to 295 remote hosts. Since a sin-
gle compromised remote host is suﬃcient for the injection of
malicious JavaScript code, the fact that some popular sites
trust hundreds of diﬀerent remote servers for JavaScript is
worrisome.
2.2.2 Remote IP address Inclusions
From the total of 8,439,799 inclusions, we discovered that
23,063 (0.27%) were requests for a JavaScript script, where
the URL did not contain a domain name but directly a re-
mote IP address. These requests were addressing a total of
324 unique IP addresses. The number of requesting domains
was 299 (2.99% percent of the Alexa top 10,000) revealing
that the practice of addressing a remote host by its IP ad-
dress is not widespread among popular Internet sites.
By geolocating the set of unique IP addresses, we discov-
ered that they were located in 35 diﬀerent countries. The
country with most of these IP addresses is China (35.18%).
In addition, by geolocating each domain that included Ja-
vaScript from a remote IP address, we recorded only 65
unique cases of cross-country inclusions, where the Java-
Script provider and the web application were situated on
diﬀerent countries. This shows that if a web application re-
quests a script directly from a remote host through its IP
515253545556575859510511512513514515517018021522525526527528529505101520253035#Remote hosts providing JS files% of Alexa sites738Unique
domains
Total remote
inclusions
Average # of
new domains
428
680
759
894
941
974
1,168
1,513
1,728
2,249
1,447
2,392
2,732
3,258
3,576
3,943
5,765
8,816
11,439
16,901
1.41
1.57
1.67
1.67