      }
      a1a = (char *)malloc(64);
      copy_str(a1a, (char *)(data[19] ^ data[24]));
      if ( *a1a )
        print(a1a);
      else
        print("MISSED!");
      sub_100160();
    }
So we set a breakpoint at `0x100128`, which is:
    seg000:00100122                 push    [ebp+a2]        ; a2
    seg000:00100125                 push    [ebp+a1]        ; a1
    seg000:00100128                 call    copy_str
    seg000:0010012D                 add     esp, 10h
When we take a look in the debugger, we found the arg2 in `copy_str` points
NULL, that's why the rom always prints `MISSED!`.
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
    â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[ REGISTERS ]â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
     EAX  63 â€”â–¸ 0 â—‚â€” 0x0
     EBX  0x7ff3798 â€”â–¸ 0x7fef0d9 â€”â–¸ 0x505f5342 â€”â–¸ 0 â—‚â€” 0x0
     ECX  0x1086e8 â€”â–¸ 0x26c0 â€”â–¸ 0 â—‚â€” 0x0
     EDX  0 â—‚â€” 0x0
     EDI  0x100000 â€”â–¸ 0x906622eb â€”â–¸ 0 â—‚â€” 0x0
     ESI  0x1b8 â€”â–¸ 0 â—‚â€” 0x0
     EBP  0x10d498 â€”â–¸ 0x7ff4fd8 â€”â–¸ 0xa0000 â€”â–¸ 0 â—‚â€” 0x0
     ESP  0x10d470 â€”â–¸ 0x1086a8 â€”â–¸ 0 â—‚â€” 0x0
     EIP  0x100128 â€”â–¸ 0x3d68e8 â€”â–¸ 0 â—‚â€” 0x0
    â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[ DISASM ]â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
     â–º 0x100128    call   0x103e95
       0x10012d    add    esp, 0x10
       0x100130    mov    eax, dword ptr [ebp - 0x14]
       0x100133    movzx  eax, byte ptr [eax]
       0x100136    test   al, al
       0x100138    jne    0x10014c
       0x10013a    sub    esp, 0xc
       0x10013d    push   0x10500d
       0x100142    call   0x103ca3
       0x100147    add    esp, 0x10
       0x10014a    jmp    0x10015a
    â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[ STACK ]â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    00:0000â”‚ esp  0x10d470 â€”â–¸ 0x1086a8 â€”â–¸ 0 â—‚â€” 0x0
    01:0004â”‚      0x10d474 â€”â–¸ 0xc8000 â€”â–¸ 0 â—‚â€” 0x0
    02:0008â”‚      0x10d478 â€”â–¸ 63 â€”â–¸ 0 â—‚â€” 0x0
    03:000câ”‚      0x10d47c â€”â–¸ 1 â€”â–¸ 0 â—‚â€” 0x0
    04:0010â”‚      0x10d480 â€”â–¸ 0x1b8 â€”â–¸ 0 â—‚â€” 0x0
    05:0014â”‚      0x10d484 â€”â–¸ 0x1086a8 â€”â–¸ 0 â—‚â€” 0x0
    06:0018â”‚      0x10d488 â€”â–¸ 0xc8000 â€”â–¸ 0 â—‚â€” 0x0
    07:001câ”‚      0x10d48c â€”â–¸ 64 â€”â–¸ 0 â—‚â€” 0x0
    Breakpoint *0x100128
    pwndbg> x/s 0xc8000
    0xc8000:    ""
So we search `flag` and found that:
    pwndbg> find /w 0xa0000, 0xe0000, 0x67616c66
    0xc0000
    1 pattern found.
    pwndbg> x/3s 0xc0000
    0xc0000:    "flag{xxxxxxxxxx"...
    0xc000f:    'x' ...
    0xc001e:    "xxxxxx}"
Clearly, if we change `data[19] ^ data[24] == 0xc0000`, we will get flag.
There are two options:
  1. modify 0xef5a3f92 to 0xef5abf92(data[24])
  2. modify 0xef56bf92 to 0xef563f92(data[19])
Finally, option 2 works.
    1-bit-missile nc arcade.fluxfingers.net 1816
    Enter target byte [0 - 262143]: 194401
    ]> 10111111  ---------------------------------------{0}
    ]> 00111111 
    #include 
    #include 
    int enc_byte(c, magic) {
        char tmp = ((magic >> 2) | (magic > 3)) ^ 0x66;
        char res = c ^ ~((tmp >> 1) | (tmp > 4));
        return res;
    }
    int decrypt(char *enc, char *buf, char fb) {
        char magic = fb;
        int i, j;
        size_t nbytes = strlen(enc);
        printf("decrypting %d bytes\n", nbytes);
        for (i = 0; i ', 0x1b, 'V', 'd', ',', '(', '\n', 0x9a, 4, 0xad, 0xc, 0xc8, 0xd9, 0};
        char res[0x100] = {0};
        int fb;
        for (fb = 0x20; fb >> 00
    Ciphertext is  01CbySNWb0TnVv/V6M7NVF229tgcV7QDEY6CIG5oyrcq47Z3eaVYKDzmj1a+MG6umsx106NgRvCf
    b6uimScNcw==
    ------------------------------    Possible Oracles
    (XOR) Choose XOR Oracle
    (ADD) Choose ADD Oracle
    (DEC) For trying to decrypt
    -----------------------------*
    ADD
    Please choose the operand in hex >>> 00
    Ciphertext is  01CbySNWb0TnVv/V6M7NVF229tgcV7QDEY6CIG5oyrcq47Z3eaVYKDzmj1a+MG6umsx106NgRvCf
    b6uimScNcw==
    ------------------------------    Possible Oracles
    (XOR) Choose XOR Oracle
    (ADD) Choose ADD Oracle
    (DEC) For trying to decrypt
    -----------------------------*
    DEC
    Enter the key base64 encoded >>> YWFhYWFhYWFhYWFhYWFhYQ==
    Decryption is  Û”N\_@arÐ¼Ö¹s`4-U/~
:H~8]%
    ------------------------------    Possible Oracles
    (XOR) Choose XOR Oracle
    (ADD) Choose ADD Oracle
    (DEC) For trying to decrypt
    -----------------------------*
    DEC
    Enter the key base64 encoded >>> 111
    Traceback (most recent call last):
      File "/home/chall/rka.py", line 113, in 
        main()
      File "/home/chall/rka.py", line 106, in main
        key = choose_key()
      File "/home/chall/rka.py", line 64, in choose_key
        return base64.decodestring(key)
      File "/usr/lib/python2.7/base64.py", line 328, in decodestring
        return binascii.a2b_base64(s)
    binascii.Error: Incorrect padding
    ^C
    $ nc arcade.fluxfingers.net 1821
    ------------------------------    Welcome to theory world
    ------------------------------    
    ------------------------------    Possible Oracles
    (XOR) Choose XOR Oracle
    (ADD) Choose ADD Oracle
    (DEC) For trying to decrypt
    -----------------------------*
    DEC
    Enter the key base64 encoded >>> ABCD
    Traceback (most recent call last):
      File "/home/chall/rka.py", line 113, in 
        main()
      File "/home/chall/rka.py", line 107, in main
        aes = pyaes.AESModeOfOperationECB(key)
      File "/home/chall/pyaes/aes.py", line 304, in __init__
        self._aes = AES(key)