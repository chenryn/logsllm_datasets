            } while (sum != 0);
            *mem0_ptr = v0;
            mem0_ptr[1] = v1;
            i = i + 8;
        } while (i != 0x1000);
        return;
    }
    ulonglong seed;
    void _srand(ulonglong _seed) {
        seed = _seed;
    }
    uint _rand() {
        seed = seed * 1103515245 + 12345;
        return (seed > 49;
    }
    int main() {
        struct stat sb;
        mem0 = (char*) malloc(0x1000);
        mem1 = (char*) malloc(0x1000);
        if (mem0 == NULL || mem1 == NULL) {
            perror("malloc");
            exit(-1);
        }
        /*
        char input[65] = "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";
        puts(input);
        for (int i = 0; i = 0; i--) {
            // FUN_0000091a_inv(mem0, mem1);
            char* temp = mem0;
            mem0 = mem1;
            mem1 = temp;
            /**/
            replace_mem0_index_with_mem1_15_sub_index_inv(i);
            tea_decrypt_mem1_inv();
            tea_encrypt_mem0_inv();
        }
        /*
        for (int i = 0; i = 0 )
        memset(input_count_sum, 0, 4LL * _200 + 4);
      if ( (int)_28 = (int)v8 );
        if ( (int)_28  0 )
        goto LABEL_7;
    LABEL_10:
      v9 = (int)_28;
      do
      {
        v10 = input_buffer[v9];
        v11 = input_count_sum[v10];
        count_sort_result_index[v11] = v9--;
        input_count_sum[v10] = v11 - 1;
      }
      while ( (int)v9 > 0 );
学过算法的话跟着流程走一遍就知道是计数排序，计算的 count_sort_result_index
是排好序后数在原数组中的下标。而且动调一下，发现后面部分没有修改 count_sort_result_index ，很简单：
    index = [2, 26, 17, 28, 24, 11, 21, 10, 16, 20, 19, 18, 3, 8, 6, 12, 9, 14, 13, 22, 4, 27, 15, 23, 1, 25, 7, 5]
    index = [i - 1 for i in index]
    s = 'abcdefghiijklmnopqrstuuvwxyz'
    t = [0] * 28
    for i in range(len(index)):
        t[index[i]] = s[i]
    print(''.join(t))
    # waltznymphforquickjigsvexbud
###  CplusExceptionEncrypt
这道题是利用 C++ 的异常处理控制执行流程，问题在于 F5 后的代码只会解析到 throw 抛异常，后面的处理看不到。
      printf("---------------------Welcome_to_SCTF_2021---------------------\n");
      printf("Please input your flag: \n");
      scanf("%s", data);
      length = strlen(data);
      if ( length == 32 )
      {
        w = 0;
        v0 = *(_DWORD *)data;
        v1 = *(_DWORD *)&data[4];
        v2 = *(_DWORD *)&data[8];
        v3 = *(_DWORD *)&data[12];
        sum1 = 0;
        sum2 = 0;
        rbx3 = _cxa_allocate_exception(0x20ui64);
        std::allocator::allocator(&v8);
        std::__cxx11::basic_string,std::allocator>::basic_string(rbx3, "init_part", &v8);
        std::allocator::~allocator(&v8);
        _cxa_throw(
          rbx3,
          (struct type_info *)&`typeinfo for'std::__cxx11::basic_string,std::allocator>,
          refptr__ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev);
      }
      printf("length error!\n");
这个时候就想怎么能将整个流程恢复出来，让 F5 能正常解析，一个很自然的想法就是修改指令，修改 throw 为 jmp ，就找 throw 对应的
catch 段，这里的很容易找，在 ida Graph View 里可以清晰看到：
（也有可能看到的不是这样的，而是 call cxa_throw 这条指令与上面的块合在一起，并且没有指向 catch 块的箭头，暂不知道具体原因，可能是
ida 的问题，关闭 ida 保存到 i64 后重新打开就没了。这种情况下可以删除 i64 或者重命名，让ida打开时重新开始解析 exe
，这样就能看到了）
catch 段的 rdx 应该是表明由哪个 catch 块处理，这里只有一个，就应该是直接跳转到 loc_402A5F 进行处理， patch 为 jmp
：
再 F5 ，这里的处理解析出来了：
      printf("---------------------Welcome_to_SCTF_2021---------------------\n");
      printf("Please input your flag: \n");
      scanf("%s", data);
      length = strlen(data);
      if ( length == 32 )
      {
        w = 0;
        inp[0] = *(_DWORD *)data;
        inp[1] = *(_DWORD *)&data[4];
        inp[2] = *(_DWORD *)&data[8];
        inp[3] = *(_DWORD *)&data[12];
        v0 = *(_DWORD *)data;
        v1 = *(_DWORD *)&data[4];
        v2 = *(_DWORD *)&data[8];
        v3 = *(_DWORD *)&data[12];
        sum1 = 0;
        sum2 = 0;
        *(_QWORD *)dst = 0i64;
        *(_QWORD *)&dst[2] = 0i64;
        *(_QWORD *)out1 = 0i64;
        *(_QWORD *)&out1[8] = 0i64;
        rbx3 = _cxa_allocate_exception(0x20ui64);
        std::allocator::allocator(&v18);
        std::__cxx11::basic_string,std::allocator>::basic_string(rbx3, "init_part", &v18);
        std::allocator::~allocator(&v18);
        v9 = _cxa_get_exception_ptr(rbx3);
        std::__cxx11::basic_string,std::allocator>::basic_string(&init, v9);
        _cxa_begin_catch(rbx3);
        qmemcpy(key, "Welcome_to_sctf!", sizeof(key));
        k0_0 = *(_DWORD *)key;
        k1_0 = *(_DWORD *)&key[4];
        k2_0 = *(_DWORD *)&key[8];
        k3_0 = *(_DWORD *)&key[12];
        /*
        set cmp_arr
        /**/
        std::__cxx11::basic_string,std::allocator>::~basic_string(&init);
        _cxa_end_catch();
        for ( i = 0; i <= 31; ++i )
        {
          cnt = 0;
          srand(0x53435446u);
          do
          {
            control1 = rand();
            switch ( control1 )
            {
              case 0x5208:
                v6 = (struct_of_step3 *)_cxa_allocate_exception(1ui64);
                struct_of_step3::struct_of_step3(v6);