The second part of the regex,  (?1[>]*?\sce1lspacing\b), is a negative lookahead. It
doesn’t consume any text as part of the match, but it asserts that the match attempt
should fail if the word cellspacing occurs anywhere within the opening tag. Since we're
going to add the cellspacing attribute to all matches, we don’t want to match tags that
already contain it.
Because the lookahead peeks forward from the curent position in the match attempt,
it uses the leading [^>J*?> to let it search as far forward as it needs to, up until what is
assumed to be the end of the tag (the first occurrence of >). The remainder of the
lookahead subpatterm ($\scellspacing^b>) simply matches the literal characters *cell-
spacing" as a complete word. We match a leading whitespace character (, the match fails. If the
lookahead does notfind cellspacingbefore it runs into a>, the restofthe match attempt
can continue.
Moving along, we get to the third piece of the regex: ([>]*) . This is a negated char-
dnous Suundeo e u! paddeam *aguuenb auou ao ouaz, Sumooj e pue ssep 1aoe
Capturing this part of the match allows you to easily bring back the attributes that each
matched tag contained as part of the replacement string. And unlike the negative look-
ahead, this part actually adds the attributes within the tag to the string matched by the
regex.
Finally, the regex matches the literal character (> to end the tag.
Solution 2, the more reliable version, replaces both instances of the negated character
class ] from the simplistic solution with "]|°[^J*"|′[^′]*′). This im-
proves the regular expression's reliability in rwo ways. First, it adds support for quoted
clude matching tags that merely contain the word *cellspacing” within an artribute’'s
attribute values that contain literal > characters. Second, it ensures that we don’t pre-
value.
552 I Chapter 9: Markup and Data Fermats
---
## Page 569
As for the replacement strings, they work with both regexes, replacing each matched
 tag with a new tag that includes cellspacing=*0” as the first attribute, followed
by whatever attributes occurred within the original tag (backreference 1).
See Also
Recipe 9.7 is the conceptual inverse of this recipe, and finds tags that contain a specific
attribute.
Recipe 9.1 shows how to match all XML-style tags while balancing rade-offs including
tolerance for invalid markup.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.3 explains character classes. Recipe 2.6 explains word boundaries.
Recipe 2.8 explains alternation. Recipe 2.9 explains grouping. Recipe 2.12 explains
repetition. Recipe 2.16 explains lookaround.
9.9RemoveXML-StyleComments
Problem
You want to remove comments from an (X)HTML or XML document. For example,
you want to remove development comments from a web page before it is served to web
browsers, or you want to perform subsequent searches without finding any matches
within comments.
Solution
Finding comments is not a difficult task, thanks to the availability of lazy quantifiers.
Here is the regular expression for the job:
Regex options: Dot matches line breaks
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
That'’s pretty straightforward. As usual, though, JavaScript's lack of a “dot matches line
breaks” option (unless you use the XRegExp library) means that you'll need to replace
the dot with an allinclusive character class in order for the regular expression to match
JavaScript:
comments that span more than one line. Following is a version that works with standard
Regex options: None
Regexflaver: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
To remove the comments, replace all matches with the empty string (i.e., nothing).
Recipe 3.14 lists code to replace all matches of a regex.
9.9 RemoveXML-Style Comments | 553
---
## Page 570
Discussion
How it works
At the beginning and end of this regular expression are the literal character sequences
 and (-->). Since none of those characters are special in regex syntax (except
within character classes, where hyphens create ranges), they don’t need to be escaped.
That just leaves the  *?> or ≤[s\S]*? in the middle of the regex to examine further.
Thanks to the “dot matches line breaks* option, the dot in the regex shown first
matches any single character. In the JavaScript version, the character class  quantifier repeats its preceding °any character" element zero or more
times, as few times as possible. Thus, the preceding token is repeated only until the
first ocurrence of ->, rather than matching all the way to the end of the subject string,
and then backtracking until the last ->. (See Recipe 2.13 for more on how backtracking
works with lazy and greedy quantifiers.) This simple strategy works well since XML-
style comments cannot be nested within each other. In other words, they always end
at the first (leftmost) occurrence of -->.
When comments can’t be removed
Most web developers are familiar with using HTML comments within  and
 elements for backward compatibility with ancient browsers. These days, it’s
just a meaningless incantation, but its use lives on in part because of copy-and-paste
coding. We're going to assume that when you remove comments from an (X)HTML
document, you don’t want to strip out embedded JavaScript and CSS. You probably
also want to leave the contents of  elements, CDATA sections, and the values
of attributes within tags alone.
Earlier, we said removing comments wasn’t a difcult task. As it tums out, that was
only true if you ignore some of the tricky areas of (X)HTML or XML where the syntax
rules change. In other words, if you ignore the hard parts of the problem, it’s easy.
Of course, in some cases you might evaluate the markup you're dealing with and decide
it's OK to ignore these problem cases, maybe because you wrote the markup yourself
and know what to expect. It might also be OK if you’re doing a search-and-replace in
a text editor and are able to manually inspect each match before removing it.
But getting back to how to work around these issues, in “Skip Tricky (X)HTML and
XML Sections* on page 523 we discussed some of these same problems in the context
of matching XML-style tags. We can use a similar line of attack when searching for
comments. Use the code in Recipe 3.18 to first search for tricky sections using the
554 | Chapter 9: Markup and Data Fermats
---
## Page 571
regular expression shown next, and then replace comments found berween matches
with the empty string (in other words, remove the comments):
**]1"[^"]**|′[^′]*′)*>
]1["]*"|[]*)*>|
*?|*']1*[^*]**|′[^']*')*>.*|
Regexoptions: Case insensitive, dot matchesline breaks
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
Adding some whitespace and a few comments to the regex in free-spacing mode makes
this a lot easier to follow:
# Special element: tag and its content
.*？
#  continues until the end of the string
.*
# Standard elenent: tag only
# CDATA section
Regexoptions Case insensitive, dot matches line breaks, free-spacing
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
Here's an equivalent version for standard JavaScript, which lacks both *dot matches
line breaks” and “free-spacing” options:
**]|"[^"]**|′[^*]*′)*>
[\s\S]*?|]1[^]**1[]*)*>[sS]*|
|
Regexoptions: Case insensitive
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Variations
Find valid XML comments
There are in fact a few syntax rules for XML comments that go beyond simply starting
with . Specifically:
•Two hyphens cannot appear in a row within a comment. For example,  is invalid because of the rwo hyphens in the middle.
9.9 RemoveXML-Style Comments | 555
---
## Page 572
•The closing delimiter cannot be preceded by a hyphen that is part of the
comment. For example,  is invalid, but the completely empty
comment  is allowed.
• Whitespace may occur between the closing - and >. For example,  is a valid, complete comment.
It's not hard to work these rules into a regex:
Regexoptions: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Notice that everything between the opening and closing comment delimiters is still
optional, so it matches the completely empty comment ,. However, if a hyphen
occurs between the delimiters, it must be followed by at least one nonhyphen character.
And since the inner portion of the regex can no longer match two hyphens in a row,
the lazy quantifier from the regexes at the beginning of this recipe has been replaced
with greedy quantifiers. Lazy quantifiers would still work fine, but sticking with them
here would result in unnecessary backtracking (see Recipe 2.13).
Some readers mightlook at this new regex and wonderwhy the [^] negated character
class is used twice, rather than just making the hyphen inside the noncapruring group
optional (i.e., ). There'’s a good reason, which brings us back
to the discussion of °catastrophic backtrackinga from Recipe 2.15.
So-called nested quantifiers always warrant extra attention and care in order to ensure
that you’re not creating the potential for catastrophic backtracking. A quantifier is
nested when it occurs within a grouping that is itself repeated by a quantifier. For
example, the pattern (?: -?[ ^- ]+)*> contains two nested quantifiers: the question mark
following the hyphen and the plus sign following the negated character class.
However, nesting quantifiers is not really what makes this dangerous, performance
wise. Rather, it's that there are a potentially massive number of ways that the outer
*> quantifier can be combined with the inner quantifiers while attempting to match a
string. If the regex engine fails to find > at the end of a partial match (as is required
when you plug this pattern segment into the comment-matching regex), the engine
must try all possible repetition combinations before failing the match attempt and
moving on. This number of options expands extremely rapidly with each additional
character that the engine must ry to match. However, there is nothing dangerous about
the nested quantifiers if this situation is avoided. For example, the pattern  does not pose a risk even though it contains a nested  quantifier, because now
that exactly one hyphen must be matched per repetition of the group, the potential
number of backtracking points increases linearly with the length of the subject string.
Another way to avoid the potential backtracking problem we’ve just described is to use
an atomic group. The following is equivalent to the first regex shown in this section,
but it’s a few characters shorter and isn’t supported by JavaScript or Python:
556 | Chapter 9: Markup and Data Fermats
---
## Page 573
Regex options: None
Regexflaver: .NET, Java, PCRE, Perl, Ruby
-sod “edaasuno au pue) sdno suoe mou snoqe siap aq aog +I7 adoag aog
sessive quantifiers) work.
Find valid HTML comments
HTML 4.01 officially used the XML comment rules we described earlier, but web
browsers never paid much attention to the finer points. HTML5 comment syntax has
rwo differences from XML, which brings it closer to what web browsers actually im-
plement. First, whitespace is not allowed between the closing - and >. Second, the text
within comments is not allowed to start with > or -> (in web browsers, that ends the
comment early).
Here are the HTML5 comment rules translated into regex:
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Compared to the earlier regex for matching valid XML comments, this one doesn’t
the opening  before the trailing <>), and adds the negative lookahead (?! -?>) just after
The reality of what web browsers treat as comments is more permissive
than the official HTML rules. It's therefore typically preferable to use
uoas _uoos, ueu sadoau sq u umoqs saxaau 
:+
Solution
There are at least rwo approaches to this problem, and both have their advantages. The
first tactic, which we'llcall the *rwo-step approach," is to find comments with an outer
regex, and then search within each match using a separate regex or even a plain text
search. That works best if you’re writing code to do the job, since separating the task
into two steps keeps things simple and fast. However, if you’re searching through files
using a text editor or grep tool, splitting the task in two won’t work unless your tool
of choice offers a special option to search within matches found by another regex.9
When you need to find words within comments using a single regex, you can accom-
plish this with the help of lookaround. This second method is shown in the upcoming
ptoadde dais-afuss, uogoas
Two-step approach
When it's a workable option, the better solution is to split the task in two: search for
comments, and then search within those comments for T000.
Here’s how you can find comments:
Regexoptions: Dot matches line breaks
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
Standard JavaScript doesn’t have a *dot matches line breaks* option, but you can use
an all-inclusive character class in place of the dot, as follows:
Regex options: None
Regexflaver: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
For each comment you find using one of the regexes just shown, you can then search
within the matched text for the literal characters Topoo. If you prefer, you can make it
9. PowerGREP—described in *Tools foe Wocking with Regular Expressioes° in Chapter 1is one tool
that's able to search within matches
558 | Chapter 9: Markup and Data Fermats
---
## Page 575
a case-insensitive regex with word boundaries on each end to make sure that only the
complete word roco is matched, like so:
\bTODO\b
Regexoptions: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Follow the code in Recipe 3.13 to search within matches of an outer regex.
Single-step approach
Lookahead (described in Recipe 2.16) lets you solve this problem with a single regex,
albeit less efficiently. In the following regex, positive lookahead is used to make sure
that the word rooo is followed by the closing comment delimiter ->. On its own, that
doesn’t tell whether the word appears within a comment or is simply followed by a
comment, so a nested negative lookahead is used to ensure that the opening comment
delimiter :
\bTODo\b(?=(?:(?1)
Regexoptions Case insensitive, dot matches line breaks
Regexflavers: NET, Java, XRegExp, PCRE, Perl, Python, Ruby
Since standard JavaScript doesn’t have a *dot matches line breaksa option, use )
Regex options: Case insensitive
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
Two-step approach
Recipe 3.13 shows the code you need to search within matches of another regex. It
takes an inner and outer regex. The comment regex serves as the outer regex, and
follows the dot or character class in the comment regex. As explained in Recipe 2.13.
\bTooo as the inner regex. The main thing to note here is the lazy  (the one that ends the comment), rather than the
very last occurrence of -> in your subject string.
Single-step approach
This solution is more complex, and slower. On the plus side, it combines the rwo steps
of the previous approach into one regex. Thus, it can be used when working with a text
editor, IE, orother tool that doesnt allow searching within matches of anotherregex.
Let’s break this regex down in free-spacing mode, and take a closer look at each part:
\b T000 b
# Match the characters "Tooo", as a coeplete word
(?=