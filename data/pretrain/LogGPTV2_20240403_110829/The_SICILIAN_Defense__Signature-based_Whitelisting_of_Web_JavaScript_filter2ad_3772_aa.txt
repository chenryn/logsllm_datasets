# The SICILIAN Defense: Signature-based Whitelisting of Web JavaScript

**Authors:** Pratik Soni, Enrico Budianto, and Prateek Saxena  
**Affiliation:** National University of Singapore, Singapore  
**Emails:** {pratikso, enricob, prateeks}@comp.nus.edu.sg

## Abstract
Whitelisting is a common practice to ensure the execution of trusted applications. However, its effectiveness in protecting client-side web application code remains unproven. This paper investigates the efficacy of signature-based whitelisting in preventing script injection attacks, including the recently proposed W3C recommendation, Subresource Integrity (SRI), which relies on raw text signatures of scripts. Our 3-month measurement study reveals that applying such raw signatures requires impractical frequent updates. We introduce SICILIAN, a novel multi-layered approach for whitelisting scripts that can tolerate changes without compromising security. Our solution includes a deployment model called progressive lockdown, where browsers assist the server in composing the whitelist, thereby minimizing the burden of building the signature-based whitelist. Evaluation on Alexa's top 500 sites and 15 popular PHP applications shows that SICILIAN can be fully applied to 84.7% of the sites and all the PHP applications, with whitelist updates required approximately once a month. SICILIAN incurs an average performance overhead of 7.02%.

## Categories and Subject Descriptors
- **D.2.8 [Software Engineering]: Metrics**
- **D.3.3 [Programming Languages]: Language Constructs and Features**
- **D.4.6 [Operating Systems]: Security and Protection**

## Keywords
- Web security
- Whitelisting
- Script injection attacks

## 1. Introduction
Whitelisting has become a standard practice to ensure the execution of trusted application code. Mainstream operating systems, such as Windows and Linux, check the signature of application binaries against a public whitelist before installation. Browsers also enable code signature verification for extensions to ensure they are signed by trusted parties. Despite its success in other platforms, the effectiveness of whitelisting in protecting web applications remains unproven.

In this paper, we investigate the efficacy of signature-based whitelisting in defending web applications against script injection attacks. These attacks, prevalent on the web, occur through various channels, including cross-site scripting (XSS) and tampering with third-party scripts. A whitelist in a web context authorizes specific scripts to execute on the client side, making signature-based whitelisting a strong defense against such attacks.

Previous solutions, such as BEEP, DSI, and Noncespaces, have proposed signature-based whitelisting. Some of these ideas have been implemented in mainstream browsers as Subresource Integrity (SRI), which uses cryptographic hashes (SHA256) of script text as signatures. However, our 3-month longitudinal study on Alexa's top 500 websites and 15 popular PHP applications reveals that raw signatures require frequent updates, making them impractical.

### Observations from the Study
- **Observation 1:** Of the 33,302 scripts crawled, only 2,313 change over time. Changes in 586 out of 2,313 scripts are syntactic and do not affect the code semantics.
- **Observation 2:** 1,156 of the 2,313 changing scripts have semantic-preserving changes, affecting only small portions of functionality, such as random tokens in advertisement URLs.
- **Observation 3:** The remaining 669 scripts (28.9%) have code-introducing updates. These can be further categorized into 461 infrequently changing scripts and 208 frequently changing scripts.

### Our Proposal
Based on our findings, 97.99% of the scripts remain mostly static, suggesting that signature-based whitelisting can be effective. However, SRI's raw signature mechanism is limited in practical adoption due to high false positives. Therefore, we develop SICILIAN, a multi-layered solution for JavaScript whitelisting. SICILIAN uses raw signatures as the first layer of defense and structural signatures as the second layer. Structural signatures, based on the abstract syntax tree representation, are robust against syntactic changes and handle certain semantic changes. For the 461 infrequently changing scripts, we propose a browser-server collaboration mechanism to update the whitelist efficiently.

### Progressive Lockdown Deployment
To address the deployment challenge, we propose a progressive lockdown approach consisting of three phases: INIT, CRAWL, and LOCKDOWN. In the INIT phase, the website compiles an initial whitelist. The optional CRAWL phase allows browsers to assist in composing the whitelist based on a trust-on-first-use assumption. Finally, the LOCKDOWN phase ensures that only whitelisted scripts are executed. This incremental approach makes the solution more pragmatic and widely adoptable.

### Evaluation
Our evaluation on Alexa's top 500 sites shows that SICILIAN introduces a 4.68% performance overhead over an SRI-enabled browser and 7.02% over a vanilla browser. SICILIAN can be fully applied to 372 domains, requiring updates only once a month, covering five times more domains than SRI.

## 2. Problem Definition
We discuss the channels available for script injection attacks, problems with existing approaches, and define our problem statement.

### 2.1 Channels of Script Injection
Web applications are vulnerable to various script injection attacks, including:
- **Cross-Site Scripting (XSS):** Reflected, persistent, and DOM-based XSS.
- **Script Tampering:** Via insecure networks or unauthorized modifications at third-party servers, including CDNs and JavaScript libraries.
- **Typosquatting XSS (TXSS):** Exploiting developer mistakes in URL addresses.

### 2.2 Problems with Existing Approaches
Existing countermeasures, such as sanitization, privilege separation, confinement, filtering, and policy enforcement, have limitations:
- **Handling Multiple Injection Channels:** Enforcing security across multiple channels is impractical due to the continuous addition of new features and specifications.
- **Weak Notion of Malicious Script:** Solutions often over-generalize or under-generalize malicious scripts, leading to deployability issues.
- **Browser Variations:** Differences in browser implementations can lead to script injection attacks, even when proper sanitization is applied.

### 2.3 Problem Statement
Our goal is to propose a solution to mitigate script injection attacks via signature-based whitelisting of JavaScript. We evaluate the efficacy of existing script signature techniques and propose SICILIAN, a robust multi-layered defense. Our research questions include:
- **RQ1:** Are raw signatures practical in real-world websites?
- **RQ2:** Do scripts on the web change? If so, what kinds of changes are reflected in them, with respect to time and users?
- **RQ3:** What are the characteristics of a signature scheme that is secure and robust for practical adoption?
- **RQ4:** Is whitelisting via script signatures sufficient to prevent script injection attacks?

### Threat Model & Scope
We consider the attacker to be a web attacker who aims to inject malicious scripts into web applications. Our scope includes evaluating the effectiveness of signature-based whitelisting in preventing such attacks.

---

This optimized version of your text is more structured, concise, and professional, making it easier to read and understand.