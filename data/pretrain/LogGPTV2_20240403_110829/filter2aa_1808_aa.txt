# Snort Plug-in Development: Teaching an Old Pig New Tricks

## Presentation Details
- **Speaker:** Ben Feinstein, CISSP GCFA
- **Organization:** SecureWorks Counter Threat Unit™
- **Event:** DEFCON 16
- **Date:** August 8, 2008
- **Copyright:** © 2008 SecureWorks, Inc. All rights reserved.

## Overview
- **Snort v2 Architecture & Internals**
- **Snort Plug-in Development**
  - Dynamic Rules
  - Dynamic Preprocessors
- **Snort Plug-in API**
  - Examples, Pitfalls, and Tips
- **Releasing Two Dynamic Preprocessors**
  - ActiveX Virtual Killbits (DEMO)
  - Debian OpenSSL Predictable PRNG Detection (DEMO)

## Snort Basics
- **Open-source IDS** created by Marty Roesch
- **First released** for *NIX platforms in 1998
- **Commercialized** by Sourcefire, Inc.
- **Snort Inline mode** now available for IPS
  - Linux Bridge + Netfilter
  - Linux ip_queue and nf_queue interfaces
- **Snort v3** is currently in Beta
  - This talk does not cover plug-ins for v3 or v3 architecture (refer to Marty Roesch for details)

## Snort v2 Architecture
- **Highly modular** for extensibility
- **Snort Rules & The Rules Matching Engine**
  - SF Engine Dynamic Plug-in
  - Detection Plug-ins (implement/extend rules language)
- **Output Plugins**
  - Unified / Unified2
  - Syslog
  - Others
- **Preprocessors**
  - Detection (i.e., alerting)
  - Normalization (i.e., decoding)

### Run-time (Dynamic) Extensions
- **Dynamic Preprocessors**
  - Define a packet processing callback
  - Preprocessor local storage
  - Stream-local storage
- **Dynamic Rules**
  - Write Snort rules in C
  - v2.6.x added the ability to register a C callback
  - Previously, useful primarily for rule obfuscation
  - Used by some commercial Snort rulesets
  - Relatively straightforward to reverse engineer using IDA Pro

## Other Snort Internals of Interest
- **Alert vs. Log**
  - Logs contain packet capture data in addition to alerts
- **Unified2 is extensible**
  - Additional data in simple Length|Value encoding
- **Logging additional alert data?**
  - Use Unified2!
- **Examples**
  - Portscan Alerts
  - Preprocessor Stats

## Snort Plug-in Development
### Getting Started
- **Familiarity with C language**
- **Lack of code-level documentation**
  - Available documentation is often outdated
- **Snort-Devel mailing list**
  - Sourcefire developers are very responsive
  - Do your homework before posting to the list
  - You will get better responses and save everyone's time
- **Source contains basic examples**
  - Dynamic Rules
  - Dynamic Preprocessor

### Getting Started, Continued
- **Use the source!**
- **Examine existing plug-ins**
  - SMTP
  - DNS
  - SSH
  - SSL
  - HTTP Inspect (more complex)
- **Write small blocks of code and (unit) test them**
- **Ask questions on the Snort-Devel mailing list**

### Snort Development Environment
- **Snort 2.8.x source tarball**
- **CentOS 5**
  - gcc 4.1
  - glibc 2.5
- **GNU Autoconf 2.61**
  - CentOS 5 packages older version 2.59
- **GNU Automake 1.10**
  - CentOS 5 packages older version 1.9.6

### Snort Dynamic Rules
- **Key header file: "sf_snort_plugin_api.h"**
  - Defines C-struct equivalents to rule syntax
- **Define global variable**
  - `Rules *rules[]`
  - Framework handles the rest
- **Makefile**
  - Compile C files into object code
  - Use GNU Libtool to make dynamic shared objects
- **Dynamically loaded by Snort at run-time**

### Configuration
- **Snort config**
  - `--dynamic-detection-lib`
  - `--dynamic-detection-lib-dir`
- **Snort can create stub rules files for all loaded dynamic rules**
  - `--dump-dynamic-rules`
- **"Meta rules" must be loaded in Snort rules file**
  - Example:
    ```plaintext
    alert tcp any any -> any any (msg:"Hello World!"; […] 
    metadata : engine shared, soid 3|2000001; 
    sid:2000001; gid:3; rev:1; […] )
    ```

### Snort Plug-in API
- **Different C structs for each rule option in rules language**
- **Rule Option is a Union of different specific rule opt structs**
- **Rule struct w/ NULL-terminated array of Rule Options**
  - Rule Header
  - Rule References
- **Functions for matching**
  - content, flow, flowbits, pcre, byte_test, byte_jump
- **Function to register and dump rules**

### Content Matching
- **Example: ContentInfo struct**
  ```c
  static ContentInfo sid109content = {
      (u_int8_t *)"NetBus", /* pattern to search for */
      0, /* depth */
      0, /* offset */
      CONTENT_BUF_NORMALIZED, /* flags */
      NULL, /* holder for aho-corasick info */
      NULL, /* holder for byte representation of "NetBus" */
      0, /* holder for length of byte representation */
      0 /* holder of increment length */
  };
  ```

- **Example: RuleOption struct**
  ```c
  static RuleOption sid109option2 = {
      OPTION_TYPE_CONTENT,
      {
          &sid109content
      }
  };
  ```

- **Content Match Function**
  ```c
  ENGINE_LINKAGE int contentMatch(void *p, ContentInfo* content, const u_int8_t **cursor);
  ```

### Implementation Example
- **PCREInfo struct**
  ```c
  static PCREInfo activeXPCRE = {
      "ip4_header.identifier % (u_int16_t)2))
      return RULE_MATCH;
      return RULE_NOMATCH;
  }
  ```
- **Question for Audience: What does this do?**

### Snort Dynamic Preprocessors
- **Another key header file: "sf_dynamic_preprocessor.h"**
- **Key struct: "DynamicPreprocessorData"**
  - Typically defined as an extern variable named `_dpd`
- **Contains:**
  - Functions to add callbacks for Init / Exit / Restart
  - Internal logging functions
  - Stream API
  - Search API
  - Alert functions
  - Snort Inline (IPS) functions

### Example: spp_activex.c
```c
void SetupActiveX(void) {
    _dpd.registerPreproc("activex", ActiveXInit);
}

static void ActiveXInit(char *args) {
    _dpd.addPreproc(ProcessActiveX, PRIORITY_TRANSPORT, PP_ACTIVEX);
}

static void ProcessActiveX(void* pkt, void* contextp) {
    // ...
    _dpd.alertAdd(GENERATOR_SPP_ACTIVEX, ACTIVEX_EVENT_KILLBIT, 1, 0, 3, ACTIVEX_EVENT_KILLBIT_STR, 0);
    return;
}
```

---

This revised version aims to provide a clear, professional, and well-structured presentation of the content.