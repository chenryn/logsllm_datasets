[[**blktrace**]{.application}]{.term}
:   ::: para
    [**blktrace**]{.application} 是一个非常详细的块 I/O
    追踪程序。它将信息截成与应用关联的单一块。与[**diskdevstat**]{.application}
    合并使用时非常有用。
    :::
:::
:::
:::
[]{#Core_Infrastructure.html}
::: chapter
::: titlepage
# [⁠]{#Core_Infrastructure.html#Core_Infrastructure}第 3 章 核心基础结构及技巧 {.title}
:::
::: {.important xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**重要**
:::
::: admonition
::: para
若要使用本章论述的 `cpupower`{.command} 命令，请确定已安装
[cpupowerutils]{.package} 软件包。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#Core_Infrastructure.html#C-States}3.1. CPU 闲置状态 {.title}
:::
::: para
使用 x86 构架的 CPU 支持不同的状态，在这些状态中部分 CPU
会被停用或者以低性能设置运行。这些状态，也就是我们知道的"*C
状态*"，允许系统通过停用部分不使用的 CPU 达到节能目的。C 状态从 C0
开始用数字编号，数字越大代表 CPU
功能降低越多，也就越节能。虽然给定数字的 C
状态在不同处理器间类似，但为特定处理器或者处理器产品线使用的特定 C
状态的含义是特定的。C 状态 0-3 定义如下：
:::
::: variablelist
[C0]{.term}
:   ::: para
    操作或者运行状态。在这个状态中，CPU 处于工作状态，完全没有闲置。
    :::
[C1, ]{.term}[挂起]{.term}
:   ::: para
    处理器不执行任何指令的状态，但通常不处于较低功率状态。CPU
    可继续进行处理而没有延迟。所有提供 C
    状态的处理器都需要支持这个状态。奔腾 4 处理器支持改进的 C1 状态，即
    C1E，它实际上是一个低能耗状态。
    :::
[C2, ]{.term}[时钟停止]{.term}
:   ::: para
    在这个状态中，处理器会停止时钟，但它让其暂存器和缓冲保持完整状态，因此重新启动时钟后，它可以立即重新启动处理进程。这是一个可选状态。
    :::
[C3, ]{.term}[休眠]{.term}
:   ::: para
    处理器真正进入睡眠状态且不需要一直更新缓冲。因此从这个状态唤醒的时间要大大长于从
    C2 唤醒的时间。这也是一个可选状态。
    :::
:::
::: para
要查看可用闲置状态以及其他 CPU 闲置驱动程序的统计数据，请运行以下指令：
:::
``` screen
cpupower idle-info
```
::: para
最近使用 \"Nehalem\" 微构架的英特尔 CPU 有新的 C 状态，即 C6
状态。它可将供应 CPU 的电压降低到 0，但通常的节能率在 80% 到 90%
之间。Red Hat Enterprise Linux  7 中的 kernel 包括对这个新 C
状态的优化。
:::
:::
::: section
::: titlepage
# [⁠]{#Core_Infrastructure.html#cpufreq_governors}3.2. 使用 CPUfreq 调控器 {.title}
:::
[]{#Core_Infrastructure.html#idm139882360433888
.indexterm}[]{#Core_Infrastructure.html#idm139882360435360
.indexterm}[]{#Core_Infrastructure.html#idm139882360444352
.indexterm}[]{#Core_Infrastructure.html#idm139882360438304
.indexterm}[]{#Core_Infrastructure.html#idm139882360440224
.indexterm}[]{#Core_Infrastructure.html#idm139882360442144 .indexterm}
::: para
减少系统电力消耗和发热量的最有效的方法之一就是使用
CPUfreq。CPUfreq，也被称为 CPU
速度计，它允许随时调整处理器的时钟速度。这让系统可在降低的时钟速度下运行以便节电。CPUfreq
调控器中定义了更改频率的规则，无论是加快还是减慢时钟速度，以及何时更改频率。
:::
::: para
调控器定义了系统的电源属性，它可影响 CPU
性能。每个调控器有其自身独特的负载行为、目的和实用性。这部分描述了如何选择和配置
CPUfreq 调节器，每个调节器的属性以及每个调节器适用的负载种类。
:::
::: section
::: titlepage
## [⁠]{#Core_Infrastructure.html#governor_types}3.2.1. CPUfreq 调控器类型 {.title}
:::
[]{#Core_Infrastructure.html#idm139882360446592
.indexterm}[]{#Core_Infrastructure.html#idm139882360448032
.indexterm}[]{#Core_Infrastructure.html#idm139882360449472
.indexterm}[]{#Core_Infrastructure.html#idm139882360450944 .indexterm}
::: para
本节列出了 Red Hat Enterprise Linux 7 中可用的 CPUfreq
调控器的不同类型。
:::
::: para
::: {.title xmlns:d="http://docbook.org/ns/docbook"}
cpufreq_performance
:::
[]{#Core_Infrastructure.html#idm139882360454944
.indexterm}[]{#Core_Infrastructure.html#idm139882360456864
.indexterm}[]{#Core_Infrastructure.html#idm139882360456704
.indexterm}[]{#Core_Infrastructure.html#idm139882360458464
.indexterm}[]{#Core_Infrastructure.html#idm139882360459744
.indexterm}[]{#Core_Infrastructure.html#idm139882360463424 .indexterm}
性能调控器会强制 CPU
使用最高时钟频率。这个频率是静态设置的，不会改变。因此，这个特定的调节器"[*不提供节电效益*]{.emphasis}"。它只适用于几个小时的高负载，而且即使在那种情况下也只可用于
CPU 几乎不（或者从不）闲置的时候。
:::
::: para
::: {.title xmlns:d="http://docbook.org/ns/docbook"}
cpufreq_powersave
:::
[]{#Core_Infrastructure.html#idm139882360465184
.indexterm}[]{#Core_Infrastructure.html#idm139882360466944
.indexterm}[]{#Core_Infrastructure.html#idm139882360468368
.indexterm}[]{#Core_Infrastructure.html#idm139882360470288
.indexterm}[]{#Core_Infrastructure.html#idm139882360478896
.indexterm}[]{#Core_Infrastructure.html#idm139882360473360 .indexterm}
相反，节电调控器会强制 CPU
使用最低时钟频率。这个频率将被静态设置，且不会更改。因此，这个特定调节器提供最大节能效益，但这是以"[*最低
CPU 性能*]{.emphasis}"为代价的。
:::
::: para
这里"节电"一词有时是不正确的，因为（原则上）满负载但低速运行的 CPU
消耗的电量比没有负载但高速运行的 CPU
要多。因此，尽管我们可能建议在需要低性能时设定 CPU
使用节电调控器，但是在这期间意外的高负载可能会导致系统实际消耗了更多的电量。
:::
::: para
简单地说，节电调控器对 CPU
更象是\"限速器\"而不是\"节能器\"。它在过热时会出问题的系统和环境中最有用。
:::
::: para
::: {.title xmlns:d="http://docbook.org/ns/docbook"}
cpufreq_ondemand
:::
[]{#Core_Infrastructure.html#idm139882360478576
.indexterm}[]{#Core_Infrastructure.html#idm139882360480976
.indexterm}[]{#Core_Infrastructure.html#idm139882360480816
.indexterm}[]{#Core_Infrastructure.html#idm139882360482576
.indexterm}[]{#Core_Infrastructure.html#idm139882360483856
.indexterm}[]{#Core_Infrastructure.html#idm139882360485792 .indexterm}
按需调控器是一个动态调控器，它允许 CPU
在系统负载高时达到最大时钟频率，还允许系统处于闲置时使用最低时钟频率。虽然这允许系统根据系统负载调整电源消耗，但也确实要承受"[*频率切换间造成的延迟*]{.emphasis}"。因此，如果系统在闲置和高负载间切换过于频繁，那么延迟可抵消任何按需调控器带来的性能/节能优势。
:::
::: para
对大多数系统来说，按需调控器可在散热、电源消耗、性能以及管理性间提供最佳折中方案。若系统只在每天的某个具体时间繁忙，按需调控器将根据负载自动在最大和最小频率间切换而无须进一步操作。
:::
::: para
::: {.title xmlns:d="http://docbook.org/ns/docbook"}
cpufreq_userspace
:::
[]{#Core_Infrastructure.html#idm139882400713392
.indexterm}[]{#Core_Infrastructure.html#idm139882400714672
.indexterm}[]{#Core_Infrastructure.html#idm139882400716400
.indexterm}[]{#Core_Infrastructure.html#idm139882400718160
.indexterm}[]{#Core_Infrastructure.html#idm139882362619952
.indexterm}[]{#Core_Infrastructure.html#idm139882362621712 .indexterm}
用户空间调控器允许用户空间程序，或者任何以 root
身份运行的进程，来设置频率。所有的调控器当中，用户空间调控器是最能够自定义的。根据它的配置，它能够为您的系统提供最佳的性能和能耗的折中方案。
:::
::: para
::: {.title xmlns:d="http://docbook.org/ns/docbook"}
cpufreq_conservative
:::
[]{#Core_Infrastructure.html#idm139882400720544
.indexterm}[]{#Core_Infrastructure.html#idm139882400721824
.indexterm}[]{#Core_Infrastructure.html#idm139882400723584
.indexterm}[]{#Core_Infrastructure.html#idm139882400725344
.indexterm}[]{#Core_Infrastructure.html#idm139882399532512
.indexterm}[]{#Core_Infrastructure.html#idm139882399533312 .indexterm}
与按需调控器类似，传统调控器也会根据用量调整时钟频率（类似按需调控器）。但是按需调控器更极端（从最大到最小，再返回），传统调控器则在更接近的频率间进行切换。
:::
::: para
这意味着传统调控器会将时钟频率调整为它认为适合负载的频率，而不是简单的在最大和最小频率间选择。虽然这样可以极大地节省电量消耗，但它的代价是产生比按需调控器"[*更多的延迟*]{.emphasis}"。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**备注**
:::
::: admonition
[]{#Core_Infrastructure.html#idm139882399537472
.indexterm}[]{#Core_Infrastructure.html#idm139882384821296
.indexterm}[]{#Core_Infrastructure.html#idm139882384823200
.indexterm}[]{#Core_Infrastructure.html#idm139882384824640 .indexterm}
::: para
您可以使用 `cron`{.command}
指令启用调控器。这允许您在每天的特定时间自动设定某特定调节器。因此，您可以在闲置时指定低频率调控器（例如工作之余），并在高负载时返回高频率调控器。
:::
::: para
若要查看如何启用特定调控器的操作指南，请参阅〈[第 3.2.2 节 "CPUfreq
设置"](#Core_Infrastructure.html#cpufreq_setup){.xref}〉。
:::
:::
:::
:::
::: section
::: titlepage
## [⁠]{#Core_Infrastructure.html#cpufreq_setup}3.2.2. CPUfreq 设置 {.title}
:::
[]{#Core_Infrastructure.html#idm139882407580496
.indexterm}[]{#Core_Infrastructure.html#idm139882407581488
.indexterm}[]{#Core_Infrastructure.html#idm139882407583296 .indexterm}
::: para
所有的 CPUfreq 调控器都被内置于 kernel
工具包中，并且会被自动选定，因此若要设置 CPUfreq，您需要选择一个调控器。
:::
::: para
您可以通过下列指令查看特定 CPU 可以使用的调控器：
:::
``` screen
cpupower frequency-info --governors
```
::: para
之后，您可以通过下列指令在所有 CPU 上启用这些调控器：
:::
``` screen
cpupower frequency-set --governor [governor]
```
::: para
若要只在特定核上启用某个调控器，请使用 `-c`{.command} 指令和 CPU
数的范围或是逗号分隔的清单。例如，若要为 CPU 1-3 和 5
启用用户空间调控器，指令为：
:::
``` screen
cpupower -c 1-3,5 frequency-set --governor cpufreq_userspace
```
:::
::: section
::: titlepage
## [⁠]{#Core_Infrastructure.html#tuning_cpufreq_policy_and_speed}3.2.3. 微调 CPUfreq 策略和速度 {.title}
:::
[]{#Core_Infrastructure.html#idm139882384904160
.indexterm}[]{#Core_Infrastructure.html#idm139882384903680
.indexterm}[]{#Core_Infrastructure.html#idm139882384905616
.indexterm}[]{#Core_Infrastructure.html#idm139882407582848
.indexterm}[]{#Core_Infrastructure.html#idm139882418251648
.indexterm}[]{#Core_Infrastructure.html#idm139882406375568 .indexterm}
::: para
选择适当的 CPUfreq 调控器后，您就可以使用
`cpupower frequency-info`{.command} 指令查看 CPU
速度和策略的信息，并可以使用 `cpupower frequency-set`{.command}
指令的选项进一步微调每一个 CPU 的速度。
:::