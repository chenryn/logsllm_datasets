* New: [Explain how to implement the REGEXP operator with Python.](sqlite3.md#regexp)
### [Requests](requests.md)
* New: Introduce the requests python library.
### [Rq](rq.md)
* New: Add note to test arq.
    arq is a similar library that can be better.
### [Tenacity](tenacity.md)
* New: Introduce the Tenacity python library.
    [Tenacity](https://github.com/jd/tenacity) is an Apache 2.0 licensed general-purpose retrying library, written in Python, to simplify the task of adding retry behavior to just about anything.
### [TinyDB](tinydb.md)
* New: [Explain how to serialize datetime objects.](tinydb.md#serializing-custom-data)
## [SQLite](sqlite.md)
* New: Solve the autoincrementation not working bug.
* New: [Explain how to configure sqlite to be able to use the REGEXP operator.](sqlite.md#regexp)
    It's not enabled by default.
* Improvement: Add rqlite as an interesting distributed solution of.
* New: [Get the columns of a database.](sqlite.md#get-the-columns-of-a-database)
    ```sqlite
    PRAGMA table_info(table_name);
    ```
## [Promql](promql.md)
* New: [Generating range vectors from return values in Prometheus queries.](promql.md#generating-range-vectors-from-return-values-in-prometheus-queries)
## Javascript
### [MermaidJS](mermaidjs.md)
* New: Introduce the diagram library and how to make flowchart diagrams.
    [MermaidJS](https://mermaid-js.github.io) is a Javascript library that lets you create diagrams using text and code.
    It can render the [next diagram
    types](https://mermaid-js.github.io/mermaid/#/?id=diagrams-that-mermaid-can-render):
    * Flowchart
    * Sequence.
    * Gantt
    * Class
    * Git graph
    * Entity Relationship
    * User journey
## [Issues](issues.md)
* New: Introduce the issue tracking document.
    I haven't found a tool to monitor the context it made me track certain
    software issues, so I get lost when updates come. Until a tool shows up,
    I'll use the good old markdown to keep track of them.
* New: Add today's issues.
    * Gadgetbridge improvements
    * Ombi improvements
* Improvement: Monitor today's issues.
    * Mkdocs migration to 7.x is giving errors with the search bar and repo
    stats.
* Improvement: Track python dependency errors.
* Correction: Gitdb has updated smmap.
* New: Jellyfin 10.7.1 broke the login page.
    Don't upgrade till it's solved, as the rollback is not easy.
* Correction: Jellyfin login page problem after upgrade to 10.7.X is solved.
    Surprisingly the instructions in
    [#5489](https://github.com/jellyfin/jellyfin/issues/5489) solved it.
    ```bash
    systemctl stop jellyfin.service
    mv /var/lib/jellyfin/data/jellyfin.db{,.bak}
    systemctl start jellyfin.service
    [ Go to JF URL, get asked to log in even though there are no Users in the JF DB now]
    systemctl stop jellyfin.service
    mv /var/lib/jellyfin/data/jellyfin.db{.bak,}
    systemctl start jellyfin.service
    ```
# [DevOps](devops.md)
* New: Comment on the DevOps pitfalls and update the learn path.
## Infrastructure as Code
### [Helmfile](helmfile.md)
* Correction: [Improve the helmfile chart update process.](helmfile.md#keep-charts-updated)
    Updating charts with `helmfile` is easy as long as you don't use environments,
    you run `helmfile deps`, then `helmfile diff` and finally `helmfile apply`. The
    tricky business comes when you want to use environments to reuse your helmfile
    code and don't repeat yourself. I've updated the process to include
    this case.
* New: [Document the directory and files structure for multi-environment projects.](helmfile.md#multi-environment-project-structure)
* New: [Document how to use helmfile environments to follow DRY.](helmfile.md#using-helmfile-environments)
* New: [Document how to avoiding code repetition.](helmfile.md#avoiding-code-repetition)
    Besides environments, `helmfile` gives other useful tricks to prevent the
    illness of code repetition, such as [using release templates](helmfile.md#using-release-templates), or [layering the state](helmfile.md#layering-the-state).
* New: [Document how to manage dependencies between the charts, to be able to use concurrency.](helmfile.md#managing-dependencies)
    Helmfile support concurrency with the option `--concurrency=N` so we can take
    advantage of it and improve our deployment speed, but to ensure it works as
    expected we have to define the dependencies among charts. For example, if an
    application needs a database, it has to be deployed before hand.
* Correction: Use environment name instead of get values.
    Instead of `.Environment.Name`, in theory you could have used `.Vars | get "environment"`, which could have prevented the variables and secrets of the default environment will need to be called `default_values.yaml`, and `default_secrets.yaml`, which is misleading. But you can't use `.Values` in the `helmfile.yaml` as it's not loaded when the file is parsed, and you get an error. A solution would be to [layer the helmfile state files](https://github.com/roboll/helmfile/blob/8594944f6374454e6ddea61d04b201133798cd95/docs/writing-helmfile.md#layering-state-template-files) but I wasn't able to make it work.
* New: How to install a chart only in one environment.
    ```yaml
    environments:
      default:
      production:
    ---
    releases:
    - name: newrelic-agent
      installed: {{ eq .Environment.Name "production" | toYaml }}
      # snip
    ```
* New: Add note that templates can't be used inside the secrets.
    See [this issue](https://github.com/jkroepke/helm-secrets/issues/126)
### [Terraform](terraform.md)
* New: Introduce terraform and how to handle RDS secrets.
    [Terraform](https://en.wikipedia.org/wiki/Terraform_(software)) is an
    open-source infrastructure as code software tool created by HashiCorp. It
    enables users to define and provision a datacenter infrastructure using
    an awful high-level configuration language known as Hashicorp Configuration Language
    (HCL), or optionally JSON. Terraform supports a number of cloud
    infrastructure providers such as Amazon Web Services, IBM Cloud
    , Google Cloud Platform, DigitalOcean, Linode, Microsoft Azure,
    Oracle Cloud Infrastructure, OVH, or VMware vSphere as well as
    OpenNebula and OpenStack.
* New: [Explain how to ignore the change of an attribute.](terraform.md#ignore-the-change-of-an-attribute)
    ```hcl
    resource "aws_instance" "example" {
      # ...
      lifecycle {
        ignore_changes = [
          # Ignore changes to tags, e.g. because a management agent
          # updates these based on some ruleset managed elsewhere.
          tags,
        ]
      }
    }
    ```
* New: [Explain how to define the default value of an variable that contains an object as empty.](terraform.md#define-the-default-value-of-an-variable-that-contains-an-object-as-empty)
    ```hcl
    variable "database" {
      type = object({
        size                 = number
        instance_type        = string
        storage_type         = string
        engine               = string
        engine_version       = string
        parameter_group_name = string
        multi_az             = bool
      })
      default     = null
    ```
* New: [Explain how to do a conditional if a variable is not null.](terraform.md#do-a-conditional-if-a-variable-is-not-null)
    ```hcl
    resource "aws_db_instance" "instance" {
      count                = var.database == null ? 0 : 1
      ...
    ```
* New: [How to do elif conditionals in terraform.](terraform.md#conditionals)
    ```terraform
    locals {
      test = "${ condition ? value : (elif-condition ? elif-value : else-value)}"
    }
    ```
* New: [How to enable debug traces.](terraform.md#debugging)
    You can set the `TF_LOG` environmental variable to one of the log levels
    `TRACE`, `DEBUG`, `INFO`, `WARN` or `ERROR` to change the verbosity of the logs.
### [Helm Secrets](helm_secrets.md)
* Correction: Update the repository url.
    The last fork is dead, long live the [fork](https://github.com/jkroepke/helm-secrets)
* New: How to install the plugin.
### [Helm Git](helm_git.md)
* Correction: Suggest version 0.8.0 until issue is solved.
    Newer versions have
    a [bug](https://github.com/aslafy-z/helm-git/issues/131) that makes
    impossible to use helm_git with a repository that contains just one
    chart in the root of the git repository.
* Correction: Update installation method.
    In the last version 0.11.1, the issue that forced us to use the version
    0.8.0 was solved
## Infrastructure Solutions
### [Kubernetes](kubernetes.md)
* New: [Add Velero as interesting tool.](kubernetes.md#tools-to-test)
    [Velero](https://velero.io/) is a tool to backup and migrate Kubernetes resources and persistent volumes.
### [Architecture](kubernetes_architecture.md)
* New: [Give suggestions on how to choose the number of kubernetes clusters to use.](kubernetes_architecture.md#number-of-clusters)
    You can run a given set of workloads either on few large clusters (with many
    workloads in each cluster) or on many clusters (with few workloads in each
    cluster).
    Here's a table that summarizes the pros and cons of various approaches:
    ![ ](number_k8s_clusters.svg)
    *Figure: Possibilities of number of clusters from [learnk8s.io
    article](https://learnk8s.io/how-many-clusters)*
### [Jobs](kubernetes_jobs.md)
* Improvement: Remove false positive alerts on failed jobs that succeeded.
    A Kubernetes cronjob spawns jobs, if the first one fails, it will try to spawn a new one. If the second succeeds, the cronjob status should be success, but with the rule we had before, a successful job with failed past jobs will still raise an alert.
* New: [Explain how to rerun failed cronjobs.](kubernetes_jobs.md#rerunning-failed-jobs)
    If you have a job that has failed after the 6 default retries, it will show up
    in your monitorization forever, to fix it, you can manually trigger the job.
    ```bash
    kubectl get job "your-job" -o json \
        | jq 'del(.spec.selector)' \
        | jq 'del(.spec.template.metadata.labels)' \
        | kubectl replace --force -f -
    ```
* New: [Manually creating a job from a cronjob.](kubernetes_jobs.md#manually-creating-a-job-from-a-cronjob)
    ```bash
    kubectl create job {{ job_name }} -n {{ namespace }} \
        --from=cronjobs/{{ cronjob_name}}
    ```
## [Continuous Integration](ci.md)
* New: Explain how to troubleshoot the error: pathspec master did not match any file.
    Remove all git hooks with `rm -r .git/hooks`.
### [Flakehell](bandit.md)
* New: Explain how to ignore errors.
* Correction: Update the git repository.
    The existent repository has been archived in favor of [this one](https://github.com/flakeheaven/flakeheaven)
* New: Explain how to patch the extended_default_ignore error for versions > 3.9.0.
    Add to your your `pyproject.toml`:
    ```ini
    [tool.flakeheaven]
    extended_default_ignore=[]  # add this
    ```
* New: [Troubleshoot the 'Namespace' object has no attribute 'extended_default_ignore' error.](flakeheaven.md#troubleshooting)
    Add to your `pyproject.toml`:
    ```ini
    [tool.flakeheaven]
    extended_default_ignore=[]
    ```
* New: [Latest version is broken.](flakeheaven.md#issues)
    It returns an [ImportError: cannot import name 'MergedConfigParser' from 'flake8.options.config'](https://github.com/flakeheaven/flakeheaven/issues/22), wait for the issue to be solved before upgrading.
### [Pyment](pyment.md)
* New: Introduce Pyment.
    [Pyment](https://github.com/dadadel/pyment) is a python3 program to
    automatically create, update or convert docstrings in existing Python files,
    managing several styles.
    As of 2021-11-17, the program is not production ready yet for me, I've tested it
    in one of my projects and found some bugs that needed to be fixed before it's
    usable. Despite the number of stars, it looks like the development pace has
    dropped dramatically, so it needs our help to get better :).
### [Dependency managers](pip_tools.md)
* New: Sync the virtualenv libraries with the requirements files.
    ```python
    python -m piptools sync requirements.txt requirements-dev.txt
    ```
* Correction: Use `-c` instead of `-r` in the nested requirement files.
    To avoid duplication of version pins.
* Correction: Deprecate in favour of Poetry.
## Automating Processes
### [cruft](cruft.md)
* New: [Monitor the issue to save the cruft config in `pyproject.toml`.](cruft.md#issues)
## Monitoring
### [Monitoring Comparison](monitoring_comparison.md)
* New: Compare Nagios and Prometheus as monitoring.
* Correction: Improve the comparison.
    * State that nagios is not easy to configure. If you're used to it it
        is, otherwise it's not.
    * Add that grafana has a huge community building graphs.
    * Mention Thanos as the long term storage solution for Prometheus.