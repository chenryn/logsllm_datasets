24
25
26 main lens.ko
27
camera rsc.ko
28
4.0/camera fdvt.ko
29 mtk irtx pwm.ko
30
imgsensor.ko
31 mtkbattery.ko
Huawei P20 Pro kernel
53
54
55
56
ﬁngerprint.ko
usb audio power.ko
anc hs default.ko
hwcam module.ko
ﬂashlights-dummy.ko
vcodec kernel driver.ko 4,996
1,920
dfrc.ko
2,883
sub lens.ko
15,624
3,660
1,396
412
2,784
11,491
msm rotator.ko
msm serial hs.ko
8
9
10 msm.ko
11 msm ispif.ko
12 msm rmnet.ko
13 msm rmnet smux.ko
14
dwc3-msm.ko
btif.ko
ﬂahslights-leds191.ko
teei.ko
32
33
34
35 mtk extd mgr.ko
36 main2 lens.ko
camera isp.ko
37
38
3.5/camera fdvt.ko
camera dip.ko
39
eeprom driver.ko
40
41
cmdq.ko
42 mtkcharger.ko
1,850
3,447
1,056
1,085
841
934
3,217
7,554
544
7,838
5,474
4,081
15,330
1,389
5,028
1,406
17,959
5,079
57 maxim.ko
58
59
618
usb audio power v600 192
anc hs.ko
1,517
















adsprpc.ko
vidc venc.ko
15
16
17 msm gemini.ko
18 msm cpp.ko
19 msm rmnet bam.ko
20 msm rmnet wwan.ko
ﬂashlight.ko
ﬂashlights-lm3642.ko
ccu drv.ko
43
44
45
46 mtk auxadc.ko
47
48
49
50
51
52 mmproﬁle.ko
sub2 lens.ko
camera dpe.ko
5.0/camera fdvt.ko
sec.ko
jpeg drv.ko
1,287
4,149
2,399
1,951
1,013
750
1,902
728
1,468
2,000
670
5,053
4,569
399
3,176
2,429
60
61
62
tfa98xx.ko
497
usb audio common.ko 205
ext modem power.ko
1,244


∓∓∓

















∓∓∓











LOC
Init
# Module
LOC
Init
# Module
LOC Init
369
1,533
273
2,303
1,645
713
3,056
1,958
689
2,284
593
236
5,471
TABLE II: Evaluation of driver initialization. ∓∓∓ – surrogate module was used.
Total successful: 48/62 (77%)
/dev ﬁle. From our analysis, it appeared that some of the
missing functionality could be extracted from the host kernel
and added to the stub functions in the evasion kernel, but we
leave the exploration of this functionality for future work.
3) Using stub1: In the vast majority of cases, the evasion
kernel’s stub function returns 0 and this is the value ex-
pected by the driver. However, two drivers, vidc_vdec.ko
and mdss_rotator.ko from Table I requires stub1. In
both cases, the most recent evaded relocations needed to be
changed, thus requiring only one attempt for the ﬁrst driver,
and two attempts for second driver to correct the issue.
D. Fuzzing results
Finally, we evaluate the ability of our framework to discover
new bugs, the false positive rate due to evasion and the speed
at which EASIER supports fuzzing.
1) Evaluation set: We fuzz a total of 32 drivers: all of the
24 Xiaomi drivers that loaded successfully and 8 MSM kernel
drivers from section V-B. Since our current implementation
of dUnicorn is for 32bit ARM binaries, and Huawei drivers
could only be compiled for ARM64 we currently cannot fuzz
them. We plan to add support for fuzzing arm64 binaries in
future versions. We fuzzed each driver between 12 hours and
2 days on an 8-core machine with 8GB of memory running
Ubuntu 18.04. In total we fuzzed the drivers for 715 hours.
2) Bugs discovered: We discovered bugs in the drivers of
both the Xiaomi and MSM kernels. The number of bugs and
their types are shown in Table IV. We found a total of 12 new
bugs in the Xiaomi drivers, all of which were conﬁrmed by
the Xiaomi security. We also received bounties for 5 of them
(submitted as 4 reports, one report combining two bugs into
a single read-write primitive).
We also found a total of 17 bugs in the MSM kernel. These
bugs were not known to us at the time of the experiments.
However because an older version of the MSM kernel was
used in our experiments (we originally used the MSM kernel
to test known vulnerabilities), we cannot be sure they are zero-
days. We are in the process of checking whether the bugs are
previously known, silently ﬁxed or still present in the most
recent MSM kernel version.
Finally, our fuzzing experiments also used a checker that
detects cases where a userspace application can cause a driver
to attempt to allocate arbitrarily large memory buffers with
kmalloc. This checker found 13 unbound kmalloc uses
for Xiaomi and 1 unbound kmalloc for MSM kernel.
During fuzzing we were able to recover all IOCTL struc-
tures and catch all ﬁeld interdependencies. For each of the
bugs we automatically generated a C program that we used to
triage bugs and prepare vulnerability reports
3) False positives: We observed 1 false positive in the
MSM kernel and 4 false positives for the Xiaomi kernel (see
Table IV). Three of the Xiaomi false positives are due to
a mismatch in the struct pm_qos_request deﬁnition
between the Xiaomi kernel and the evasion kernel. Upon
manual analysis we found that the Xiaomi’s version included
an additional ﬁeld, resulting in an incompatibility between the
driver and the evasion kernel that resulted in a false crash. Our
current evasion kernel only guarantees the same layouts of
common structs like struct device and struct file
and did not handle this structure, though it could be extended
to do so.
The fourth Xiaomi false positive was due to a loop where
the driver reads a value from the device until it gets a non-
zero value. Since EASIER always returns a zero whenever the
driver tries to read from the non-existent peripheral the loop
never terminates. Note that this issue can also be classiﬁed as
a bug: ideally a kernel should not hang simply because of a
malfunctioning peripheral device.
The one false positive for MSM kernel was a driver that
failed to initialize completely, but still generated a device ﬁle
so it appeared to have been properly initialized. In reality, a
variable had not been properly initialized and then was used
by the driver’s IOCTL handler.
4) Fuzzing rate and execution paths: We tabluate the time
spent fuzzing, number of code paths discovered and rate of
fuzzing for each driver in Table III. On the average, EASIER
fuzzed MSM kernel drivers at 1,167 executions per second
and Xiaomi drivers at 525 executions per second (on an 8-
core machine). The difference between the two kernels is
due to the difference in snapshot sizes: 37Mb and 205Mb
correspondingly. This fuzzing speed is an improvement of 1-
2 orders of magnitude over previous hybrid systems such as
Charm [29], which achieves roughly 20 executions per second
by fuzzing drivers on a 16-core machine, but still forwarding
low-level operations to be run in-vivo on a real device. Another
advantage on our system was that the lack of a physical device
removed the need to re-initialize or restart the device when
needed (after a crash for example [8]).
On some drivers, fuzzing produced a low number of discov-
ered paths. We found that it often was due to magic numbers
that the fuzzer was not able to ﬁnd rather than due to EASIER
or the evasion kernel. For example we often observed that after
IOCTL command switch statement drivers use yet another
switch statement on user input subﬁelds. We plan to use our
symbolic execution tool together with the fuzzer to deal with
this cases in future work.
5) Halts during context switch: As mentioned in Sec-
tion IV-C, a driver may invoke a context switch if it needs to
wait for a value from the peripheral. Since dUnicorn cannot
simulate a context switch, it halts if this happens. Such context
switches might prevent exploring new paths in the driver.
During fuzzing, such halts happened only in 13/267 IOCTL
commands for Xiaomi drivers and 3/137 IOCTL commands
for MSM drivers.
Module
MSM kernel
diagchar.ko
qseecom.ko
msm isp.ko
msm csiphy.ko
radio-iris.ko
msm actuator.ko
vidc vdec.ko
msm csid.ko
Xiaomi kernel
mtk disp mgr.ko
mtk btif.ko
mtk ﬂashlight.ko
ccu drv.ko
camera isp.ko
ﬂashlights-dummy.ko
ﬂashlights-lm3642.ko
vcodec.ko
dfrc.ko
mtk extd mgr.ko
mtk auxadc.ko
subaf.ko
main2af.ko
sub2af.ko
mainaf.ko
camera fdvt v3.5.ko
camera fdvt v4.0.ko
camera fdvt v5.0.ko
camera dip.ko
sec.ko
eeprom.ko
mmproﬁle.ko
mtkbattery.ko
mtkcharger.ko
Time, hrs
Paths
Speed, exec/s
48
49
50
17
16
51
51
20
19
22
22
20
20
15
15
14
16
17
17
17
17
17
17
12
23
12
12
12
19
19
19
20
37
42
251
14
172
140
52
32
58
11
36
90
422
63
63
40
54
21
5
9
9
7
8
118