A64BitFunction(0x00c0ffee, 0, 1, 0xdeadbeef, 0x10101010)
r8 0x0000000000000000
r9 0x0000000000000000
0x0000000000000000
0x0000000010101010
0x0000000000000000
0x0000000000000000
64 bit Call Semantics
push 0x10101010
mov rcx, 0x00c0ffee
mov rdx, 0xffffffff
mov r8, 0x1
mov r9, 0xdeadbeef
sub rsp, 0x20
call A64BitFunction
rsp 0x0000000000804018
rip 0x000000007f40010c
0x00802000
0x00804000
0x0000000000000000
0x0000000000000000
0x0000000000000000
0x0000000000000000
rcx 0x0000000000c0ffee
rdx 0x0000000000000000
0x0000000000000000
0x0000000000000000
A64BitFunction(0x00c0ffee, 0xffffffff, 1, 0xdeadbeef, 0x10101010)
r8 0x0000000000000000
r9 0x0000000000000000
0x0000000000000000
0x0000000010101010
0x0000000000000000
0x0000000000000000
64 bit Call Semantics
push 0x10101010
mov rcx, 0x00c0ffee
mov rdx, 0xffffffff
mov r8, 0x1
mov r9, 0xdeadbeef
sub rsp, 0x20
call A64BitFunction
rsp 0x0000000000804018
rip 0x000000007f40010c
0x00802000
0x00804000
0x0000000000000000
0x0000000000000000
0x0000000000000000
0x0000000000000000
rcx 0x0000000000c0ffee
rdx 0x00000000ffffffff
0x0000000000000000
0x0000000000000000
A64BitFunction(0x00c0ffee, 0xffffffff, 1, 0xdeadbeef, 0x10101010)
r8 0x0000000000000000
r9 0x0000000000000000
0x0000000000000000
0x0000000010101010
0x0000000000000000
0x0000000000000000
64 bit Call Semantics
push 0x10101010
mov rcx, 0x00c0ffee
mov rdx, 0xffffffff
mov r8, 0x1
mov r9, 0xdeadbeef
sub rsp, 0x20
call A64BitFunction
rsp 0x0000000000804018
rip 0x000000007f40010c
0x00802000
0x00804000
0x0000000000000000
0x0000000000000000
0x0000000000000000
0x0000000000000000
rcx 0x0000000000c0ffee
rdx 0x00000000ffffffff
0x0000000000000000
0x0000000000000000
A64BitFunction(0x00c0ffee, 0xffffffff, 1, 0xdeadbeef, 0x10101010)
r8 0x0000000000000001
r9 0x0000000000000000
0x0000000000000000
0x0000000010101010
0x0000000000000000
0x0000000000000000
64 bit Call Semantics
push 0x10101010
mov rcx, 0x00c0ffee
mov rdx, 0xffffffff
mov r8, 0x1
mov r9, 0xdeadbeef
sub rsp, 0x20
call A64BitFunction
rsp 0x0000000000804018
rip 0x000000007f40010c
0x00802000
0x00804000
0x0000000000000000
0x0000000000000000
0x0000000000000000
0x0000000000000000
rcx 0x0000000000c0ffee
rdx 0x00000000ffffffff
0x0000000000000000
0x0000000000000000
A64BitFunction(0x00c0ffee, 0xffffffff, 1, 0xdeadbeef, 0x10101010)
r8 0x0000000000000001
r9 0x00000000deadbeef
0x0000000000000000
0x0000000010101010
0x0000000000000000
0x0000000000000000
64 bit Call Semantics
push 0x10101010
mov rcx, 0x00c0ffee
mov rdx, 0xffffffff
mov r8, 0x1
mov r9, 0xdeadbeef
sub rsp, 0x20
call A64BitFunction
rsp 0x0000000000804018
rip 0x000000007f40010c
0x00802000
0x00804000
0x0000000000000000
0x0000000000000000
0x0000000000000000
0x0000000000000000
rcx 0x0000000000c0ffee
rdx 0x00000000ffffffff
0x0000000000000000
0x0000000000000000
A64BitFunction(0x00c0ffee, 0xffffffff, 1, 0xdeadbeef, 0x10101010)
r8 0x0000000000000001
r9 0x00000000deadbeef
0x0000000000000000
0x0000000010101010
0x0000000000000000
0x0000000000000000
64 bit Call Semantics
push 0x10101010
mov rcx, 0x00c0ffee
mov rdx, 0xffffffff
mov r8, 0x1
mov r9, 0xdeadbeef
sub rsp, 0x20
call A64BitFunction
rsp 0x0000000000804018
rip 0x000000007f40010c
0x00802000
0x00804000
0x0000000000000000
0x0000000000000000
0x00068004c970c080
0x0000000000000000
rcx 0x0000000000c0ffee
rdx 0x00000000ffffffff
0x0000000000000000
0x0000000000000000
A64BitFunction(0x00c0ffee, 0xffffffff, 1, 0xdeadbeef, 0x10101010)
r8 0x0000000000000001
r9 0x00000000deadbeef
0x0000000000000000
0x0000000010101010
0x0000000000000000
0x0000000000000000
• VirtualProtect
• Modifies memory protection
• Used to change memory into executable memory
• VirtualAlloc
• Allows to allocate executable memory
• Should be used in conjunction with memcpy
• Endpoint Protection monitor those and similar functions
Return Oriented Programming
User Mode
Kernel Mode
Return Oriented Programming
Applications
Kernel32.dll
User32.dll
DLLs
Ntdll.dll
User Mode
Kernel Mode
Return Oriented Programming
Applications
Kernel32.dll
User32.dll
DLLs
Ntdll.dll
ROP Gadgets on ntdll.dll
ROP Gadgets on ntdll.dll
ntdll!RtlCopyLuid:
48 8b 02        mov     rax, [rdx]
48 89 01        mov     [rcx], rax
c3              ret
ROP Gadgets on ntdll.dll
ntdll!RtlCopyLuid:
48 8b 02        mov     rax, [rdx]
48 89 01        mov     [rcx], rax
c3              ret
ROP Gadgets on ntdll.dll
ntdll!RtlSetExtendedFeaturesMask (last part):
488908          mov     [rax], rcx
4883c428        add     rsp, 28h
c3              ret
ROP Gadgets on ntdll.dll
(~30 occurences on ntdll.dll):
48 83 c4 58     add     rsp, 58h
c3              ret
ROP Gadgets on ntdll.dll
(~30 occurences on ntdll.dll):
48 83 c4 58     pop rax
c3              ret
ROP Gadgets on ntdll.dll
(~3 occurences on ntdll.dll):
f2 0f 59 c3     mulsd   xmm0,xmm3
ROP Gadgets on ntdll.dll
(~3 occurences on ntdll.dll):
f2 0f 59 c3     pop rcx
ret
ROP Gadgets on ntdll.dll
ntdll!_chkstk (last part of function):
4c 8b 14 24     mov     r10, [rsp]
4c 8b 5c 24 08  mov     r11, [rsp+8]
48 83 c4 10     add     rsp, 0x10
c3              ret
ROP Gadgets on ntdll.dll
ntdll!_chkstk (last part of function):
4c 8b 14 24     mov     r10, [rsp]    pop r10
4c 8b 5c 24 08  mov     r11, [rsp+8]  pop r11
48 83 c4 10     add     rsp, 0x10     ret
c3              ret
ROP Gadgets on ntdll.dll
ntdll!_chkstk (last part of function):
4c 8b 14 24     mov     edx, [rsp]    pop edx
4c 8b 5c 24 08  mov     r11, [rsp+8]  pop r11
48 83 c4 10     add     rsp, 0x10     ret
c3              ret
ROP Gadgets on ntdll.dll
(~50 occurences on ntdll.dll):
41 5c           pop     r12
c3              ret
ROP Gadgets on ntdll.dll
(~50 occurences on ntdll.dll):
41 5c           pop     rsp
c3              ret
ROP Gadgets on ntdll.dll
NTSTATUS NtContinue(
CONTEXT
*ThredContext,
BOOLEAN
Alertable);
ROP Gadgets on ntdll.dll
NTSTATUS NtContinue(
CONTEXT
*ThredContext,
BOOLEAN
Alertable);
VOID RtlMoveMemory(
VOID 
*Destination,
VOID 
*Source,
SIZE_T
Length);
ROP Gadgets on ntdll.dll
Windows Exploit 
Mitigations
Mending the Earth
Shana and Robert ParkeHarrison, 1999
Return Oriented Programming - Timeline
Morris Worm
Smashing The 
Stack For Fun 
And Profit
1988
1996
DEP
Windows XP SP2
2004
ASLR
Windows Vista
ROP
“The Geometry of 
Innocent Flesh on 
the Bone” by 
Hovav Shacham
2006
2007
Canary 
Stack
Visual Studio 
2005
2003
• Protects against buffer overflow
• Writes cookie on the stack before return address
• Check if cookie is valid before performing ret opcode
• If not, crash the process
• Requires to recompile current software
Canary Stack
Canary Stack
0x00803E00
0x00804000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00C0FFEE
0x00000000
0x00000000
0x00000000
int QueryUser()
{
mov ecx, canary_value
xor ecx, esp
push ecx
char buffer[512];
gets(buffer);
...
pop ecx,
xor ecx, esp
call verify_canary_value(ecx)
return 1;
}
Canary Stack
0x00803E00
[Cookie]
0x00804000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0xdeadbeef
0x00c0ffee
0x00000000
0x00000000
0x00000000
int QueryUser()
{
mov ecx, canary_value
xor ecx, esp
push ecx
char buffer[512];
gets(buffer);
...
pop ecx,
xor ecx, esp
call verify_canary_value(ecx)
return 1;
}
Canary Stack
0x00803E00
[Cookie]
0x00804000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0x00000000
0xdeadbeef
0x00c0ffee
0x00000000
0x00000000
0x00000000
int QueryUser()
{
mov ecx, canary_value
xor ecx, esp
push ecx
char buffer[512];
gets(buffer);
...
pop ecx,
xor ecx, esp
call verify_canary_value(ecx)
return 1;
}
Canary Stack
0x00803E00
[Cookie]
0x00804000
int QueryUser()
{
mov ecx, canary_value
xor ecx, esp
push ecx
char buffer[512];
gets(buffer);
...
pop ecx,
xor ecx, esp
call verify_canary_value(ecx)
return 1;
}
call execv
nop
nop
nop
nop
nop
nop
0x00803E00
push ‘/sh’
push ‘/bin’
push esp
• Ensure RSP is in valid range on memory functions
• Bypass by setting RSP to correct rage while calling Win32 API
• How can you get RSP’s value?
Windows 8 ROP Mitigation
Return Oriented Programming - Timeline
Morris Worm
Smashing The 
Stack For Fun 
And Profit
Canary Stack
Visual Studio 2005
1988
1996
2003
2014/5
CFG
Windows 8.1
Visual Studio 2015
DEP
Windows XP SP2
2004
ASLR
Windows Vista
ROP
“The Geometry of 
Innocent Flesh on 
the Bone” by 
Hovav Shacham
2006
2007
• Mitigate control flow hijacking
call eax
• Coarse grain mitigation
• 8 bytes boundary of function start
• How can we abuse it?
Control Flow Guard
• Mitigate control flow hijacking
call eax
• Coarse grain mitigation
• 8 bytes boundary of function start
• How can we abuse it?
• We already did!
Control Flow Guard
ROP Mitigations
Guardian
Shana and Robert ParkeHarrison, 1999
Return Oriented Programming - Timeline
Morris Worm
Smashing The 
Stack For Fun 
And Profit
Canary Stack
Visual Studio 2005
1988
1996
2003
2014/5
2014
CFG
Windows 8.1
Visual Studio 2015
DEP
Windows XP SP2
2004
ASLR
Windows Vista
ROP
“The Geometry of 
Innocent Flesh on 
the Bone” by 
Hovav Shacham
2006
2007
ROPGuard
kBouncer
2012
ROPecker
• ROPGuard
• Implemented by all endpoint protection products
• Strategic hooks on memory functions
• Opcode before return address is a call instruction
• Call instructions leads back to hooked function
ROP Mitigations
• ROPGuard
• Implemented by all endpoint protection products
• Strategic hooks on memory functions
• Opcode before return address is a call instruction
• Call instructions leads back to hooked function
• kBouncer
• Utilizes Last Branch Records on modern CPU
• Performs variation of ROPGuard checks on those addresses
• Requires user-mode hooks on strategic locations
ROP Mitigations
• ROPecker
• Allows only two executable memory pages
• Consider ROP gadget only if less than 6 instructions
ROP Mitigations
• ROPecker
• Allows only two executable memory pages
• Consider ROP gadget only if less than 6 instructions
• Shadow Stack
• Two different stacks
• Regular stack for data (and return addresses)
• Matching kernel for only return addresses
• On ret opcode - compare both
• First paper published on 2016, not yet implemented
ROP Mitigations
The Beast Is In Your 
Memory
by Daniel Lehmann and  Ahmad-Reza Sadeghi
How to bypass ROPecker and 
kBouncer by abusing their 
heuristics
(BlackHat 2014)
Cupid and Centaur in the Museum of Love
Joel-Peter Witkin, 1992
Rite Of Passage
Bypassing ROP Mitigations
FRANCE. Paris. 5th arrondissement. Students in a chain 
passing cobble stones for the barricades, Gay Lussac Street
Bruno Barbey, 1968
• Syscall semantics – transition from user mode to kernel mode
Bypassing ROP Mitigations
• Syscall semantics – transition from user mode to kernel mode
ntdll!NtAllocateVirtualMemory:
mov     r10,rcx
mov     eax,18h
syscall
ret
Bypassing ROP Mitigations
• Syscall semantics – transition from user mode to kernel mode
ntdll!NtAllocateVirtualMemory:
mov     r10,rcx
mov     eax,18h
syscall
ret
Bypassing ROP Mitigations
• Syscall semantics – transition from user mode to kernel mode
ntdll!NtAllocateVirtualMemory:
mov     r10,rcx
mov     eax,18h
syscall
ret
Bypassing ROP Mitigations
• Syscall semantics – transition from user mode to kernel mode
ntdll!NtAllocateVirtualMemory:
mov     r10,rcx
mov     eax,18h
syscall
ret
Bypassing ROP Mitigations
• Syscall semantics – transition from user mode to kernel mode
ntdll!NtAllocateVirtualMemory:
mov     r10,rcx jmp EndpointProtectionHook
mov     eax,18h
syscall
ret
Bypassing ROP Mitigations
• Syscall semantics – transition from user mode to kernel mode
ntdll!NtAllocateVirtualMemory:
mov     r10,rcx jmp EndpointProtectionHook
mov     eax,18h
syscall
ret
Bypassing ROP Mitigations
• Syscall semantics – transition from user mode to kernel mode
ntdll!NtYieldExecution:
mov     r10,rcx
mov     eax,46h
syscall
ret
Bypassing ROP Mitigations
pop rax
// Load system call number
ret
Bypassing ROP Mitigations
pop rax
// Load system call number
ret
mov r10, [rsp] 
// Prepare first parameter
mov r11, [rsp + 0x8]
add rsp, 0x10
ret
Bypassing ROP Mitigations
pop rax
// Load system call number
ret
mov r10, [rsp] 
// Prepare first parameter
mov r11, [rsp + 0x8]
add rsp, 0x10
ret
Bypassing ROP Mitigations
ntdll!NtYieldExecution:
mov     r10,rcx
mov     eax,46h
syscall
ret
pop rax
// Load system call number
ret
mov r10, [rsp]
// Prepare first parameter
mov r11, [rsp + 0x8]
add rsp, 0x10
ret
Bypassing ROP Mitigations
ntdll!NtYieldExecution + 0x12:
syscall
// Execute in kernel
ret
Demo
• By Nick Peterson
• Exploits Windows Event Tracing to hook syscall on kernel
• Can be leveraged to protect against previous bypass
• https://github.com/everdox/InfinityHook
InfinityHook
• Have fun!
• ROP remains a viable threat
• Security industry needs to respond faster
• Utilize the brains in academy to verify security solutions
• Break it to make it better
Takeaways
• Smashing The Stack For Fun And Profit, Aleph One, 1996
• The Geometry of Innocent Flesh on the Bone, Hovav Shacham, 2007
• The Beast Is In Your Memory, Daniel Lehmann and  Ahmad-Reza 
Sadeghi 2014
• InfinityHook, Nick Peterson, 2019 
https://github.com/everdox/InfinityHook
References