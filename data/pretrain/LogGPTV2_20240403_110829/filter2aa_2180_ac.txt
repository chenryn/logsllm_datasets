### 64-bit Function Call Semantics

#### Example 1
- **Function Call**: `A64BitFunction(0x00c0ffee, 0, 1, 0xdeadbeef, 0x10101010)`
- **Register Values**:
  - `r8`: `0x0000000000000000`
  - `r9`: `0x0000000000000000`
  - `0x0000000000000000`
  - `0x0000000010101010`
  - `0x0000000000000000`
  - `0x0000000000000000`

- **Assembly Instructions**:
  ```assembly
  push 0x10101010
  mov rcx, 0x00c0ffee
  mov rdx, 0xffffffff
  mov r8, 0x1
  mov r9, 0xdeadbeef
  sub rsp, 0x20
  call A64BitFunction
  ```

- **Post-Call Register and Stack Values**:
  - `rsp`: `0x0000000000804018`
  - `rip`: `0x000000007f40010c`
  - `rcx`: `0x0000000000c0ffee`
  - `rdx`: `0x0000000000000000`

#### Example 2
- **Function Call**: `A64BitFunction(0x00c0ffee, 0xffffffff, 1, 0xdeadbeef, 0x10101010)`
- **Register Values**:
  - `r8`: `0x0000000000000001`
  - `r9`: `0x00000000deadbeef`
  - `0x0000000000000000`
  - `0x0000000010101010`
  - `0x0000000000000000`
  - `0x0000000000000000`

- **Assembly Instructions**:
  ```assembly
  push 0x10101010
  mov rcx, 0x00c0ffee
  mov rdx, 0xffffffff
  mov r8, 0x1
  mov r9, 0xdeadbeef
  sub rsp, 0x20
  call A64BitFunction
  ```

- **Post-Call Register and Stack Values**:
  - `rsp`: `0x0000000000804018`
  - `rip`: `0x000000007f40010c`
  - `rcx`: `0x0000000000c0ffee`
  - `rdx`: `0x00000000ffffffff`

### Memory Protection and Allocation Functions

- **VirtualProtect**:
  - Modifies memory protection.
  - Used to change memory into executable memory.

- **VirtualAlloc**:
  - Allows allocation of executable memory.
  - Should be used in conjunction with `memcpy`.

- **Endpoint Protection**:
  - Monitors functions like `VirtualProtect` and `VirtualAlloc`.

### Return-Oriented Programming (ROP)

- **User Mode vs. Kernel Mode**:
  - ROP can be used in both user mode and kernel mode.

- **Common DLLs**:
  - `Kernel32.dll`
  - `User32.dll`
  - `Ntdll.dll`

- **ROP Gadgets in ntdll.dll**:
  - **ntdll!RtlCopyLuid**:
    ```assembly
    48 8b 02        mov     rax, [rdx]
    48 89 01        mov     [rcx], rax
    c3              ret
    ```
  - **ntdll!RtlSetExtendedFeaturesMask (last part)**:
    ```assembly
    488908          mov     [rax], rcx
    4883c428        add     rsp, 28h
    c3              ret
    ```
  - **Other Common Gadgets**:
    - `add rsp, 58h; ret`
    - `pop rax; ret`
    - `mulsd xmm0, xmm3`
    - `pop rcx; ret`
    - **ntdll!_chkstk (last part of function)**:
      ```assembly
      4c 8b 14 24     mov     r10, [rsp]
      4c 8b 5c 24 08  mov     r11, [rsp+8]
      48 83 c4 10     add     rsp, 0x10
      c3              ret
      ```

### Exploit Mitigations

- **Canary Stack**:
  - Protects against buffer overflows by writing a cookie on the stack before the return address.
  - Checks if the cookie is valid before performing the `ret` opcode.
  - Requires recompilation of software.

- **Control Flow Guard (CFG)**:
  - Mitigates control flow hijacking.
  - Coarse-grain mitigation with 8-byte boundaries for function starts.
  - Implemented in Windows 8.1 and Visual Studio 2015.

- **ROPGuard**:
  - Implemented by endpoint protection products.
  - Strategic hooks on memory functions.
  - Ensures the opcode before the return address is a call instruction leading back to a hooked function.

- **kBouncer**:
  - Utilizes Last Branch Records on modern CPUs.
  - Performs ROPGuard checks on those addresses.
  - Requires user-mode hooks on strategic locations.

- **ROPecker**:
  - Allows only two executable memory pages.
  - Considers ROP gadgets only if they are less than 6 instructions long.

- **Shadow Stack**:
  - Two different stacks: one for data and return addresses, and another for only return addresses.
  - On `ret` opcode, compares both stacks.
  - First paper published in 2016, not yet implemented.

### Bypassing ROP Mitigations

- **Syscall Semantics**:
  - Transition from user mode to kernel mode.
  - Example: `ntdll!NtAllocateVirtualMemory`:
    ```assembly
    mov r10, rcx
    mov eax, 18h
    syscall
    ret
    ```

- **Bypass Techniques**:
  - Hooking system calls to bypass protections.
  - Using ROP gadgets to manipulate the stack and registers.

### References

- **Smashing The Stack For Fun And Profit**, Aleph One, 1996
- **The Geometry of Innocent Flesh on the Bone**, Hovav Shacham, 2007
- **The Beast Is In Your Memory**, Daniel Lehmann and Ahmad-Reza Sadeghi, 2014
- **InfinityHook**, Nick Peterson, 2019
  - [GitHub Repository](https://github.com/everdox/InfinityHook)