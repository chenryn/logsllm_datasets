Related reference
“Return code= 2035 MQRC_NOT_AUTHORIZED” on page 204
The RC2035 reason code is displayed for various reasons including an error on opening a queue or a
channel, an error received when you attempt to use a user ID that has administrator authority, an error
when using an IBM MQ JMS application, and opening a queue on a cluster. MQS_REPORT_NOAUTH and
MQSAUTHERRORS can be used to further diagnose RC2035.
2035 (07F3) (RC2035): MQRC_NOT_AUTHORIZED
Troubleshooting IBM MQ resource adapter problems
When using the IBM MQ resource adapter, most errors cause exceptions to be thrown, and these
exceptions are reported to the user in a manner that depends on the application server. The resource
adapter makes extensive use of linked exceptions to report problems. Typically, the first exception in a
chain is a high-level description of the error, and subsequent exceptions in the chain provide the more
detailed information that is required to diagnose the problem.
For example, if the IVT program fails to obtain a connection to a IBM MQ queue manager, the following
exception might be thrown:
jakarta.jms.JMSException: MQJCA0001: An exception occurred
in the JMS layer. See the linked exception for details.
javax.jms.JMSException: MQJCA0001: An exception occurred in the JMS layer. See the
linked exception for details.
Linked to this exception is a second exception:
jakarta.jms.JMSException: MQJMS2005: failed to create an
MQQueueManager for 'localhost:ExampleQM'
javax.jms.JMSException: MQJMS2005: failed to create an MQQueueManager for
'localhost:ExampleQM'
This exception is thrown by IBM MQ classes for JMS and has a further linked exception:
com.ibm.mq.MQException: MQJE001: An MQException occurred: Completion Code 2, Reason 2059
This final exception indicates the source of the problem. Reason code 2059 is
MQRC_Q_MGR_NOT_AVAILABLE, which indicates that the queue manager specified in the definition of
the ConnectionFactory object might not have been started.
If the information provided by exceptions is not sufficient to diagnose a problem, you might need to
request a diagnostic trace. For information about how to enable diagnostic tracing, see Configuring the
IBM MQ resource adapter.
Configuration problems commonly occur in the following areas:
114 Troubleshooting and Support for IBM MQ
• Deploying the resource adapter
• Deploying MDBs
• Creating connections for outbound communication
Related tasks
Using the IBM MQ resource adapter
Problems in deploying the resource adapter
If the resource adapter fails to deploy, check that Java EE Connector Architecture (JCA) resources are
configured correctly. If IBM MQ is already installed, check that the correct versions of the JCA and IBM
MQ classes for JMS are in the class path.
Failures in deploying the resource adapter are generally caused by not configuring JCA resources
correctly. For example, a property of the ResourceAdapter object might not be specified correctly, or
the deployment plan required by the application server might not be written correctly. Failures might also
occur when the application server attempts to create objects from the definitions of JCA resources and
bind the objects into the Java Naming Directory Interface (JNDI) namespace, but certain properties are
not specified correctly or the format of a resource definition is incorrect.
The resource adapter can also fail to deploy because it loaded incorrect versions of JCA or IBM MQ
classes for JMS classes from JAR files in the class path. This type of failure can commonly occur on a
system where IBM MQ is already installed. On such a system, the application server might find existing
copies of the IBM MQ classes for JMS JAR files and load classes from them in preference to the classes
supplied in the IBM MQ resource adapter RAR file.
Related concepts
What is installed for IBM MQ classes for JMS
Related tasks
Configuring the application server to use the latest resource adapter maintenance level
Problems in deploying MDBs
Failures when the application server attempts to start message delivery to an MDB might be caused by an
error in the definition of the associated ActivationSpec object, or by missing resources.
Failures might occur when the application server attempts to start message delivery to an MDB. This
type of failure is typically caused by an error in the definition of the associated ActivationSpec object, or
because the resources referenced in the definition are not available. For example, the queue manager
might not be running, or a specified queue might not exist.
An ActivationSpec object attempts to validate its properties when the MDB is deployed. Deployment
then fails if the ActivationSpec object has any properties that are mutually exclusive or does not have all
the required properties. However, not all problems associated with the properties of the ActivationSpec
object can be detected at this time.
Failures to start message delivery are reported to the user in a manner that depends on the application
server. Typically, these failures are reported in the logs and diagnostic trace of the application server. If
enabled, the diagnostic trace of the IBM MQ resource adapter also records these failures.
Problems in creating connections for outbound communication
A failure in outbound communication can occur if a ConnectionFactory object cannot be found, or if the
ConnectionFactory object is found but a connection cannot be created. There are various reasons for
either of these problems.
Failures in outbound communication typically occur when an application attempts to look up and use a
ConnectionFactory object in a JNDI namespace. A JNDI exception is thrown if the ConnectionFactory
object cannot be found in the namespace. A ConnectionFactory object might not be found for the
following reasons:
• The application specified an incorrect name for the ConnectionFactory object.
IBM MQ troubleshooting and support 115
• The application server was not able to create the ConnectionFactory object and bind it into the
namespace. In this case, the startup logs of the application server typically contain information about
the failure.
If the application successfully retrieves the ConnectionFactory object from the JNDI namespace, an
exception might still be thrown when the application calls the ConnectionFactory.createConnection()
method. An exception in this context indicates that it is not possible to create a connection to an IBM MQ
queue manager. Here are some common reasons why an exception might be thrown:
• The queue manager is not available, or cannot be found using the properties of the ConnectionFactory
object. For example, the queue manager is not running, or the specified host name, IP address, or port
number of the queue manager is incorrect.
• The user is not authorized to connect to the queue manager. For a client connection, if the
createConnection() call does not specify a user name, and the application server supplies no user
identity information, the JVM process ID is passed to the queue manager as the user name. For the
connection to succeed, this process ID must be a valid user name in the system on which the queue
manager is running.
• The ConnectionFactory object has a property called ccdtURL and a property called channel. These
properties are mutually exclusive.
• On a TLS connection, the TLS-related properties, or the TLS-related attributes in the server connection
channel definition, have not been specified correctly.
• The sslFipsRequired property has different values for different JCA resources. For more information
about this limitation, see Limitations of the IBM MQ resource adapter.
Related tasks
Specifying that only FIPS-certified CipherSpecs are used at run time on the MQI client
Related reference
Federal Information Processing Standards (FIPS) for AIX, Linux, and Windows
Using IBM MQ connection property override
Connection property override allows you to change the details that are used by a client application to
connect to a queue manager, without modifying the source code.
About this task
Sometimes, it is not possible to modify the source code for an application, for example, if the application
is a legacy application and the source code is no longer available.
In this situation, if an application needs to specify different properties when it is connecting to a queue
manager, or is required to connect to a different queue manager, then you can use the connection override
functionality to specify the new connection details or queue manager name.
The connection property override is supported for two clients:
• IBM MQ classes for JMS
• IBM MQ classes for Java
You can override the properties that you want to change by defining them in a configuration file that is
then read by the IBM MQ classes for JMS or IBM MQ classes for Java at startup.
When the connection override functionality is in use, all applications that are running inside the same
Java runtime environment pick up and use the new property values. If multiple applications that are using
either the IBM MQ classes for JMS or the IBM MQ classes for Java are running inside the same Java
runtime environment, it is not possible to just override properties for individual applications.
Important: This functionality is only supported for situations where it is not possible to modify the source
code for an application. It must not be used for applications where the source code is available and can
be updated.
116 Troubleshooting and Support for IBM MQ
Related tasks
“Tracing IBM MQ classes for JMS applications” on page 426
The trace facility in IBM MQ classes for JMS is provided to help IBM Support to diagnose customer issues.
Various properties control the behavior of this facility.
“Tracing IBM MQ classes for Java applications” on page 430
The trace facility in IBM MQ classes for Java is provided to help IBM Support to diagnose customer issues.
Various properties control the behavior of this facility.
Using IBM MQ classes for JMS
Using IBM MQ classes for Java
Using connection property override in IBM MQ classes for JMS
If a connection factory is created programmatically, and it is not possible to modify the source code
for the application that creates it, then the connection override functionality can be used to change
the properties that the connection factory uses when a connection is created. However, the use of the
connection override functionality with connection factories defined in JNDI is not supported.
About this task
In the IBM MQ classes for JMS, details about how to connect to a queue manager are stored in a
connection factory. Connection factories can either be defined administratively and stored in a JNDI
repository, or created programmatically by an application by using Java API calls.
If an application creates a connection factory programmatically, and it is not possible to modify the
source code for that application, the connection override functionality allows you to override the
connection factory properties in the short term. In the long term, though, you must put plans in place
to allow the connection factory used by the application to be modified without using the connection
override functionality.
If the connection factory that is created programmatically by an application is defined to use a Client
Channel Definition Table (CCDT), then the information in the CCDT is used in preference to the overridden
properties. If the connection details that the application uses need to be changed, then a new version of
the CCDT must be created and made available to the application.
The use of the connection override functionality with connection factories defined in JNDI is not
supported. If an application uses a connection factory that is defined in JNDI, and the properties of that
connection factory need to be changed, then the definition of the connection factory must be updated
in JNDI. Although the connection override functionality is applied to these connection factories (and the
overridden properties take precedence over the properties in the connection factory definition that is
looked up in JNDI), this use of the connection override functionality is not supported.
Important: The connection override functionality affects all of the applications that are running inside of
a Java runtime environment, and applies to all of the connection factories used by those applications. It is
not possible to just override properties for individual connection factories or applications.
When an application uses a connection factory to create a connection to a queue manager, the IBM MQ
classes for JMS look at the properties that have been overridden and use those property values when
creating the connection, rather than the values for the same properties in the connection factory.
For example, suppose a connection factory has been defined with the PORT property set to 1414. If
the connection override functionality has been used to set the PORT property to 1420, then when the
connection factory is used to create a connection, the IBM MQ classes for JMS use a value of 1420 for the
PORT property, rather than 1414.
To modify any of the connection properties that are used when creating a JMS connection from a
connection factory, the following steps need to be carried out:
1.Add the properties to be overridden to an IBM MQ classes for JMS configuration file.
2.Enable the connection override functionality.
3.Start the application, specifying the configuration file.
IBM MQ troubleshooting and support 117
Procedure
1.Add the properties to be overridden to an IBM MQ classes for JMS configuration file.
a)Create a file containing the properties and values that need to be overridden in the standard Java
properties format.
For details about how you create a properties file, see The IBM MQ classes for JMS configuration
file.
b)To override a property, add an entry to the properties file.
Any IBM MQ classes for JMS connection factory property can be overridden. Add each required
entry in the following format:
jmscf.property name=value
where property name is the JMS administration property name or XMSC constant for the
property that needs to be overridden. For a list of connection factory properties, see Properties
of IBM MQ classes for JMS objects.
For example, to set the name of the channel that an application should use to connect to a queue
manager, you can add the following entry to the properties file:
jmscf.channel=MY.NEW.SVRCONN
2.Enable the connection override functionality.
To enable connection override, set the
com.ibm.msg.client.jms.overrideConnectionFactory property to be true so that the
properties that are specified in the properties file are used to override the values that are specified in
the application. You can either set the extra property as another property in the configuration file itself,
or pass the property as a Java system property by using:
-Dcom.ibm.msg.client.jms.overrideConnectionFactory=true
3.Start the application, specifying the configuration file.
Pass the properties file that you created to the application at run time by setting the Java system
property:
-Dcom.ibm.msg.client.config.location
Note that the location of the configuration file must be specified as a URI, for example:
-Dcom.ibm.msg.client.config.location=file:///jms/jms.config
Results
When the connection override functionality is enabled, the IBM MQ classes for JMS write an entry to
the jms log whenever a connection is made. The information in the log shows the connection factory
properties that were overridden when the connection was created, as shown in the following example
entry:
Overriding ConnectionFactory properties:
Overriding property channel:
Original value = MY.OLD.SVRCONN
New value = MY.NEW.SVRCONN
Related tasks
“Using connection property override in IBM MQ classes for Java” on page 119
118 Troubleshooting and Support for IBM MQ
In the IBM MQ classes for Java, connection details are set as properties using a combination of different
values. The connection override functionality can be used to override the connection details that an
application uses if it is not possible to modify the source code for the application.
“Overriding connection properties: example with IBM MQ classes for JMS ” on page 122
This example shows how to override properties when you are using the IBM MQ classes for JMS.
Creating and configuring connection factories and destinations in an IBM MQ classes for JMS application
Configuring connection factories and destinations in a JNDI namespace
Using connection property override in IBM MQ classes for Java
In the IBM MQ classes for Java, connection details are set as properties using a combination of different
values. The connection override functionality can be used to override the connection details that an
application uses if it is not possible to modify the source code for the application.
About this task
The different values that are used to set the connection properties are a combination of:
• Assigning values to static fields on the MQEnvironment class.
• Setting property values in the properties Hashtable in the MQEnvironment class.
• Setting property values in a Hashtable passed into an MQQueueManager constructor.
These properties are then used when an application constructs an MQQueueManager object, which
represents a connection to a queue manager.
Each property has an identifier - the property name - which is a character string literal. For example, the
property which specifies the host name to IBM MQ is identified by the literal value "hostname".
To define the application name for your application, in your Java code you can use code similar to this:
Hashtable properties = new Hashtable();
properties.Add("hostname", "localhost" );
MQQueueManager qMgr = new MQQueueManager("qmgrname", properties);
However, the literal value is part of the IBM MQ classes for Java internal implementation. In case the
literal part ever changes (although this is unlikely) rather than using the literal value you should use the
corresponding constant value, defined in the MQConstants class.
The constant is part of the documented external interfaces for IBM MQ classes for Java and will not
change.
For host name this constant is HOST_NAME_PROPERTY, so the preferred code is:
Hashtable properties = new Hashtable();
properties.Add( MQConstants.HOST_NAME_PROPERTY, "ExampleApplName" );
MQQueueManager qMgr = new MQQueueManager("qmgrname", properties);
The full set of properties that can be set in a program is shown in the following table:
Property Constant name in MQConstants
CCSID CCSID_PROPERTY
Channel CHANNEL_PROPERTY
Connect options CONNECT_OPTIONS_PROPERTY
Hostname HOST_NAME_PROPERTY
SSL key reset SSL_RESET_COUNT_PROPERTY
Local address LOCAL_ADDRESS_PROPERTY
IBM MQ troubleshooting and support 119
Property Constant name in MQConstants
Password PASSWORD_PROPERTY
Port PORT_PROPERTY
Cipher suite SSL_CIPHER_SUITE_PROPERTY
FIPS required SSL_FIPS_REQUIRED_PROPERTY
SSL peer name SSL_PEER_NAME_PROPERTY
User ID USER_ID_PROPERTY
Application name APPNAME_PROPERTY
Note: The table does not list the literal values because, as already noted, they are part of the IBM MQ
classes for Java implementation and could change.
If it is not possible to modify the source code for an application that uses the IBM MQ classes for Java
to specify different properties that must be used when creating a connection to a queue manager, the
connection override functionality allows you to override the connection details in the short term. In the
long term, though, you must put plans in place to allow the connection details used by the application to
be modified without using the connection override functionality.
When an application creates an MQQueueManager, the IBM MQ classes for Java look at the properties
that have been overridden and use those property values when creating a connection to the queue
manager, rather than the values in any of the following locations:
• The static fields on the MQEnvironment class
• The properties Hashtable stored in the MQEnvironment class
• The properties Hashtable that is passed into an MQQueueManager constructor
For example, suppose an application creates an MQQueueManager, passing in a properties Hashtable
that has the CHANNEL property set to MY.OLD.CHANNEL. If the connection override functionality has
been used to set the CHANNEL property to MY.NEW.CHANNEL, then when the MQQueueManager is
constructed, the IBM MQ classes for Java attempt to create a connection to the queue manager by using
the channel MY.NEW.CHANNEL rather than MY.OLD.CHANNEL.
Note: If an MQQueueManager is configured to use a Client Channel Definition Table (CCDT), then the
information in the CCDT is used in preference to the overridden properties. If the connection details that
the application creating the MQQueueManager uses need to be changed, then a new version of the CCDT
must be created and made available to the application.