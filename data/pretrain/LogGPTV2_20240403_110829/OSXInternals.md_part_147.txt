$ hdiutil makehybrid -o /tmp/hybrid.iso . -hfs -iso -hfs-volume-name HFS \
-iso-volume-name ISO -hide-hfs iso.txt -hide-iso hfs.txt
Creating hybrid image...
...
$ hdiutil attach -nomount /tmp/hybrid.iso
/dev/disk10 Apple_partition_scheme
/dev/disk10s1 Apple_partition_map
/dev/disk10s2 Apple_HFS
$ hdiutil pmap /dev/rdisk10
Partition List
## Dev_______ Type_______________ Name_____________ Start___ Size____ End_____
0 disk10s1 Apple_partition_map Apple 1 63 63
-1 Apple_ISO ISO 64 24 87
1 disk10s2 Apple_HFS DiscRecording 3.0 88 36 123
Legend
- ... extended entry
+ ... converted entry
...
If we explicitly mount the hybrid volume's ISO 9660 file system, we will not see the HFS+-only file
hfs.txt on it. If we mount it as an HFS+ volume, we will see only hfs.txt on it.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 33 of 90
$ mkdir /tmp/iso
$ mount -t cd9660 /dev/disk10 /tmp/iso
$ ls /tmp/iso
ISO.TXT
$ umount /tmp/iso
$ hdiutil detach disk10
...
$ open /tmp/hybrid.iso
...
$ ls /Volumes/HFS
hfs.txt
Apple's ISO 9660 implementation stores a resource fork as an associated file, which it names by adding
the ._ prefix to the containing file's name.
11.7.3. MS-DOS
Mac OS X includes support for the FAT12, FAT16, and FAT32 variants of the MS-DOS file system. The
file system is not compiled into the kernel but is present as a loadable kernel extension
(/System/Library/Extensions/msdosfs.kext). When an MS-DOS volume is being mounted, the
mount_msdos command attempts to load the kernel extension if it is not already loaded.
hdiutil supports writing an MS-DOS file system to a disk image.
$ hdiutil create -size 32m -fs MS-DOS -volname MS-DOS /tmp/ms-dos.dmg
$ hdiutil attach /tmp/ms-dos.dmg
/dev/disk10 /Volumes/MS-DOS
$ hdiutil pmap /dev/rdisk10
## Dev_______ Type_______________ Name_____________ Start___ Size____ End_____
-1 disk10 MS-DOS Single Volume 0 65536 65535
...
The Mac OS X MS-DOS file system implementation supports symbolic links by storing link-target
information in a specially formatted text file that is exactly 1067 bytes in size. Figure 1119 shows the
contents of a symbolic link file symlink.txt whose link target is specified as a relative path target.txt.
Figure 1119. Structure of a symbolic link on the MS-DOS file system on Mac OS X
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 34 of 90
You can synthesize your own symbolic link by simply writing the appropriate information to a file[8]the
MD5 digest of the link-target path can be generated using a command such as the following.
[8] You may need to unmount and remount the volume; the file system initially might not
recognize the file as a symbolic link because of caching.
$ echo -n target.txt | md5
4d6f333d2bc24ffddcca34414a0cb12d
11.7.4. NTFS
Mac OS X includes read-only support for NTFS. The NTFS file system driver
(/System/Library/Extensions/ntfs.kext) is based on the FreeBSD NTFS driver. As with the MS-
DOS file system, NTFS it is not compiled into the kernel but is loaded by the mount_ntfs program when
required.
11.7.5. UDF
Universal Disk Format (UDF) is the file system used by DVD-ROM discs (including DVD-video and
DVD-audio discs) and many CD-R/RW packet-writing programs. It is implemented as a kernel extension
(/System/Library/Extensions/udf.kext) that is loaded by the mount_udf program when required.
Mac OS X 10.4 supports the "normal" flavor of the UDF 1.5 specification.
11.7.6. UFS
Darwin's implementation of UFS is similar to that on FreeBSD, but they are not entirely compatible
because the Darwin implementation is always big-endian (as was NEXTSTEP's)even on little-endian
hardware. Technically, UFS is BSD's Unix file system layer that is independent of the underlying file
system implementation. The part that deals with on-disk structures is based on the Berkeley Fast File
System (FFS). We will use the term UFS to represent the combination of UFS and FFS.
UFS does not provide some features that HFS+ providesfor example, it does not support multiple forks,
(native) extended attributes, and aliases. However, resource forks and extended attributes can be used on
UFS through emulation. For example, when a file (named, say, file.txt) with a nonzero resource fork is
copied to a UFS volume, it is split into two files: file.txt (containing the data fork) and ._file.txt
(containing the resource fork). Copying such a file to an HFS+ volume will populate both forks in the
destination file.
UFS2
Newer versions of FreeBSD include UFS2, a redesigned version of UFS (or UFS1, as it is
now called). UFS2 provides numerous improvements over UFS1, such as the following: 64-
bit block pointers, 64-bit time fields for access and modification times, support for a per-file
"birth time" field, support for extended attributes, and dynamically allocated inodes. As in the
case of HFS+, UFS2 extended attributes are used for implementing access control lists
(ACLs). They are also used for data labeling in FreeBSD's mandatory access control (MAC)
framework.
Unlike HFS+, UFS is always case-sensitive. It also supports sparse filesor files with "holes"which HFS+
does not. If a file contains a relatively large amount of zero data (as compared to its size), it is efficiently
represented as a sparse file. On a file system with sparse file support, you can create a physically empty file
with a nonzero size. In other words, the file would contain virtual disk blocks. When such a file is read, the
kernel returns zero-filled memory in place of the virtual disk blocks. When a portion of a sparse file is
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 35 of 90
written, the file system manages the sparse and nonsparse data. A good example of the utility of sparse files
is in an emulator (such as Virtual PC) that uses large disk images as virtual disks belonging to guest
operating systems. If the emulator is not to allocate physical storage until necessary, either it must use
sparse files or it must simulate the sparseness itselfabove the file system. The latter is likely to result in a
fragmented disk image.
Even though HFS+ does not support sparse files, it supports deferred zeroing of file blocks that have never
been written. Meanwhile, the kernel will return zero-filled pages when such blocks are read.
Let us compare the behavior of HFS+ and UFS when we attempt to create an empty file with a nonzero
size that exceeds the file system's capacity. We will create two disk images, each 16MB in size, but one
containing an HFS+ file system and the other containing a UFS file system. Note that hdiutil supports
writing a UFS file system to a disk image. Next, we will use the mkfile command to attempt to create
32MB sparse files on both volumes.
$ hdiutil create -size 16m -fs HFS -volname HFS hfs.dmg
...
$ hdiutil create -size 16m -fs UFS -volname UFS ufs.dmg
...
$ open hfs.dmg
$ open ufs.dmg
$ cd /Volumes/HFS
$ df -k .
Filesystem 1K-blocks Used Avail Capacity Mounted on
/dev/disk10s2 16337 261 16076 2% /Volumes/HFS
$ mkfile -nv 32m bigfile
mkfile: (bigfile removed) Write Error: No space left on device
$ cd /Volumes/UFS
$ df -k .
Filesystem 1K-blocks Used Avail Capacity Mounted on
/dev/disk11s2 15783 15 14979 0% /Volumes/UFS
$ mkfile -nv 32m bigfile
bigfile 33554432 bytes
$ ls -lh bigfile
-rw------- 1 amit amit 32M Oct 22 11:40 bigfile
$ df -k .
Filesystem 1K-blocks Used Avail Capacity Mounted on
/dev/disk11s2 15783 27 14967 0% /Volumes/UFS
Although Mac OS X supports UFS as a root file system, the operating system's features are best integrated
with HFS+. Therefore, HFS+ is recommended as the primary file system.
11.7.7. AFP
The Apple Filing Protocol (AFP) is a protocol for file sharing over the network. It was the primary file-
sharing protocol in Mac OS 9 and was extensively used by AppleShare servers and clients. It still is the
default protocol for sharing files between Mac OS X systems. In general, any file system that supports
Unix semantics can be shared over AFP. In particular, besides HFS+ mounts, AFP can be used to export
NFS and UFS mounts.
The Mac OS X implementation of AFP is contained in a loadable kernel extension
(/System/Library/Filesystems/AppleShare/afpfs.kext).
The /Systems/Library/Filesystems/AppleShare/ directory also contains the asp_atp.kext and
asp_tcp.kext kernel extensions. These implement the Apple Session Protocol (ASP) over AppleTalk and
TCP, respectively. ASP is a session-layer protocol that allows a client to establish a session with a server
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 36 of 90
and send commands to the latter.
When an application on an AFP client computer accesses a remote file residing on an AFP file server, the
native file system layer sends the requests to the AFP translator, which translates and sends the requests to
the server. Not all AFP-related communication goes through the translator, however. There are AFP
commands with no native file system equivalentsfor example, commands for user authentication. Such
commands may be sent directly to the AFP server while bypassing the translator.
Unlike traditional NFS, which is stateless, AFP is session based. An AFP server shares one or more
volumes, which AFP clients can access during sessions. An AFP session begins when an AFP client
authenticates with an AFP server using a User Authentication Method (UAM). AFP supports multiple
UAMs such as the following:
No User Authentication
Cleartext Password
Random Number Exchange
Two-Way Random Number Exchange
Diffie-Hellman Exchange
Diffie-Hellman Exchange 2
Kerberos
Reconnect
The Reconnect UAM is intended for use by a client for reconnecting a session that was disruptedsay, due
to a network outage. Note also that AFP supports tunneling with SSH as an option.
AFP has another, less secure level of access control, wherein each volume made available through AFP
may have a fixed-length eight-character password associated with it. It also provides Unix-style access
privileges, with support for owner and group privileges for searching, reading, and writing.
AFP versions older than 3.0 do not support file permissions. If both the AFP client and server support AFP
3.x, BSD file permissions are sent as-is (untranslated) over the connection. If only the client or the server is
using AFP 2.x, permissions have slightly different semantics. For example, when dealing with folders, the
3.x party (server or client) maps between BSD's read, write, and execute bits to AFP's See Files, See
Folders, and Make Changes analogs. Note that a process with an effective user ID (UID) of 0 cannot use
AFP to access data over the network.
Mac OS X uses a user-space AFP daemon (/usr/sbin/AppleFileServer), which is launched when you
select the Personal File Sharing checkbox under System Preferences Sharing. The AFP server
provides synchronization rules to facilitate sane simultaneous-file access. In particular, AFP has the notion
of a deny modean application opening a file fork can use this mode to specify privileges that should be
denied to other applications that open the same fork.
AFP commands can be grouped under the following functional categories:
Login commands
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 37 of 90
Volume commands
Directory commands
File commands
Combined directory and file commands
Fork commands
Desktop database commands
11.7.8. FTP
The mount_ftp command makes a directory residing on an FTP server locally visible, thus providing an
FTP file system.
$ mount_ftp ftp://user:password@host/directory/path local-mount-point
Mac OS X includes a private framework called URLMount that allows AFP, FTP, HTTP (WebDAV), NFS,
and SMB URLs to be mounted. The directory /System/Library/Filesystems/URLMount/
contains .URLMounter plug-in bundles for each of these URL types.
The FTP file system is implemented as a user process that is both an FTP client and a local NFS serverit
uses NFS to export the FTP view, which is then mounted by the Mac OS X built-in NFS client. You can
use the nfsstat program to monitor client-side NFS activity caused by accessing an instance of the FTP
file system.
$ mkdir /tmp/ftp
$ mount -t ftp ftp://PI:EMAIL/pub /tmp/ftp
$ ls /tmp/ftp
Linux electronic-publications micro
X11 gnu mirrors
academic historic-linux multimedia
archives languages packages
docs linux solaris
$ nfsstat
Rpc Counts:
Getattr Setattr Lookup Readlink Read Write Create Remove
12 0 19 1 0 0 0 0
Rename Link Symlink Mkdir Rmdir Readdir RdirPlus Access
0 0 3 0 0 1 0 0
Mknod Fsstat Fsinfo PathConf Commit
0 8 0 0 0
Rpc Info:
TimedOut Invalid X Replies Retries Requests
0 0 0 3 44
...
Even in the absence of any explicit NFS mounts, nfsstat will normally report NFS activity because the
automount daemon, which is started by default on Mac OS X, also uses the local NFS server approach
used by the FTP file system.
11.7.9. NFS
Mac OS X derives its NFS client and server support from FreeBSD. The implementation conforms to NFS
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 38 of 90
version 3 and includes the NQNFS extensions. As we saw in Section 8.10.2, the Mac OS X kernel uses a
separate buffer cache for NFS.
Mac OS X also includes the usual supporting daemons for NFS, namely, the following.
 rpc.lockd implements the Network Lock Management protocol.
 rpc.statd implements the Status Monitor protocol.
 nfsiod is the local asynchronous NFS I/O server.
Not Quite NFS (NQNFS)
NQNFS adds procedures to NFS to make the protocol stateful, which is a departure from the
original NFS design. The NFS server maintains states of open and cached files on clients.
NQNFS uses leases to facilitate server recovery of client state in the case of a crash. The
leases are short term but are extended on use.
11.7.10. SMB/CIFS
Server Message Block (SMB) is a widely used protocol for sharing a variety of resources over a network.
Examples of SMB-shareable resources include files, printers, serial ports, and named pipes. SMB has been
around since the early 1980s. Microsoft and other vendors helped evolve an enhanced version of SMBthe
Common Internet File System (CIFS). Mac OS X provides support for SMB/CIFS through Samba, a
popular Open Source SMB server that is available for numerous platforms.
11.7.11. WebDAV
Web-based Distributed Authoring and Versioning (WebDAV) is an extension of the ubiquitous Hypertext
Transfer Protocol (HTTP) that allows collaborative file management on the web. For example, using
WebDAV, you can create and edit content remotely by connecting to a WebDAV-enabled web server.
Given the URL to a WebDAV-enabled directory, the mount_webdav command can mount the remote
directory as a locally visible file system. In particular, since a .Mac account's iDisk is available through
WebDAV, it can also be mounted this way.
$ mkdir /tmp/idisk
$ mount_webdav http://idisk.mac.com// /tmp/idisk
... # a graphical authentication dialog should be displayed
$ ls /tmp/idisk
About your iDisk.rtf Movies Sites
Backup Music Software
Documents Pictures
Library Public
Mac OS X also supports secure WebDAV, in which Kerberos and the HTTPS protocol can be used while
accessing WebDAV volumes.
The Mac OS X WebDAV file system implementation uses a hybrid approach that involves a user-space
daemon (implemented within mount_webdav) and a loadable file system kernel extension
(/System/Library/Extensions/webdav_fs.kext). Figure 1120 shows an overview of this
implementation.
Figure 1120. Implementation of the WebDAV file system
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 39 of 90
Most of the actual work is performed by the user-space daemon. As Figure 1120 shows, the file system
kernel extension communicates with the daemon using an AF_LOCAL socket, which the daemon provides to
the kernel as a mount() system call argument. The various vnode operations in the kernel-resident
WebDAV code simply redirect I/O requests to the daemon, which services the requests by performing the
appropriate network transfers. The daemon also uses a local temporary cache directory.[9] Note that the
daemon does not actually send file data to the kernelonce the data of interest has been downloaded to a
cache file, the kernel reads it directly from the file. This setup may be thought of as a special form of file
system stacking.
[9] The files in this directory are unlinked by the daemon while they are open; therefore, they
are "invisible."
11.7.12. cddafs
The cdda[10] file system is used to make the tracks of an audio compact disc appear as AIFF files. The
implementation consists of a mounting utility (mount_cddafs) and a loadable file system kernel extension
(/System/Library/Extensions/cddafs.kext). The mount utility attempts to determine the album name