467467
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:52:32 UTC from IEEE Xplore.  Restrictions apply. 
item is inserted into the tree, or the server rebalances the tree,
the OPE Table is updated to map the DET ciphertexts to
their new or updated OPE encodings. Using this OPE Table,
a client needs to keep track only of DET ciphertexts, which
never become stale. Given a DET ciphertext, the server can
compute the OPE encoding at any time, without the client’s
help. Thus, we envision that OPE encodings would be stored
only internally at the server, where they can be rewritten
on demand. We remark that the OPE Table also helps as a
cache, saving client work when encoding a repeated value.
We will next present a formal description of the syntax
of this scheme, the scheme itself, and the ideal IND-OCPA
security deﬁnition for our construction.
A. Syntax and correctness
Since our encoding scheme can mutate ciphertexts, it has
a different syntax from a regular encryption scheme. The
encoding of a value v can be of two types:
• a permanent ciphertext c that refers to v and does not
change (corresponding to the DET encryption), and
• a transient order-preserving encoding e, where the
encoding corresponding to a given value can change
over time as the tree is rebalanced at the server; we will
refer to this as the OPE encoding.
Deﬁnition 1 (Mutable order-preserving encoding (mOPE)).
A mutable order-preserving encryption scheme for plaintext
domain D is a tuple of polynomial-time algorithms mOPE =
(KeyGen, InitState, Enc, Dec, Order) run by a client and a
stateful server, where KeyGen is probabilistic and the rest
are deterministic, and Enc is interactive.
• Key generation: sk ← KeyGen(1κ). KeyGen runs at
the client, takes as input the security parameter κ, and
outputs a secret key sk.
• Initializing server state: st ← InitState(1κ). InitState
runs as the server, takes as input the security parameter
κ, and outputs an initial state st.
(cid:7)) ← Enc(sk,v, st). Enc is an interac-
tive algorithm between the client and the server. The
inputs to the client are sk and v, and the input to the
server is the state st. At the end, the client obtains a
(cid:7). Enc’s
ciphertext c and the server obtains a new state st
running time is a ﬁxed polynomial in |sk| and |v|.
• Decryption: v ← Dec(sk,c). The client runs Dec on the
secret key and a ciphertext c, and obtains a plaintext v.
• Ordering: e ← Order(st,c). Order runs at the server,
takes as input a state st and a ciphertext c, and outputs
an order-preserving encoding e.
• Encryption: (c, st
In this syntax, Order(st,c) produces the OPE encoding
of the value corresponding to ciphertext c. In practice,
Order(st,c) rarely changes with st (since a given node in
the tree is rebalanced rarely); thus, we expect the application
would store the Order(st,c) value on disk, and update it
as necessary when tree rebalancings happen. Another nice
468468
Algorithm 2 (KeyGen(1κ) – runs at Cl).
1: Return sk ← DET.KeyGen(1κ).
Algorithm 3 (InitState(1κ) – runs at Ser).
1: Initialize server state, st, with OPE Tree and OPE
Table containing only the values ±∞.
2: Return st.
Algorithm 4 (Enc(sk,v, st) – runs at Cl and Ser).
1: Cl: compute c ← DET.Enc(sk,v) and send c to Ser.
2: Ser: if c is in the OPE Table,
Ser: return st unchanged. Cl: return c.
3: Ser: else
a) Cl ↔ Ser run the OPE Tree traversal (Alg. 1) so
the server inserts c in the OPE Tree and obtains
the path of c. Ser then computes the OPE encoding
of c based on Eq. 1 and stores it in OPE Table.
b) Ser: If the OPE Tree needs to be rebalanced as
a result of the insertion, rebalance the tree and
update all affected encodings in the OPE Table.
c) Ser: return the new state. Cl: return c.
Algorithm 5 (Dec(sk,c) – runs at Cl).
1: Return v ← DET.Dec(sk,c).
Algorithm 6 (Order(st,c) – runs at Ser).
1: If c is in OPE Table return the corresponding OPE
encoding from the OPE Table, else signal error.
The mOPE scheme. The algorithms that have client-server
Figure 4.
interaction contain text in blue indicating at which party each piece of
computation happens (Cl or Ser).
feature of this syntax is that the algorithms that run at the
client return only permanent ciphertexts, so the client need
not worry about encodings becoming stale. Fig. 4 presents
our mOPE scheme in terms of this syntax.
We now turn to deﬁning what it means for the scheme to
be correct. Intuitively, the scheme should decrypt the correct
values and Order should indeed output order-preserving
ciphertexts. Consider encrypting a sequence of values seq =
v1, . . . ,vn. The state evolves after each encryption, from st0
to stn, by successively computing (ci, sti) ← Enc(sk,vi, sti−1)
for i = 1 . . .n, where st0 ← InitState(1κ).
Deﬁnition 2 (Correctness). A mOPE scheme for plaintext
domain D is correct if, for all security parameters κ, for all
sk ← KeyGen(1κ),
1) for all v ∈ D and for all states st, for every c outcome
of Enc(sk,v, st), Dec(sk,c) = v; and,
2) for all sequences seq = {v1, . . . ,vn} ∈ Dn, for all pairs
vi,v j ∈ seq, for all ci,c j obtained as above, we have
vi < v j ⇔ Order(stn,ci) < Order(stn,c j).
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:52:32 UTC from IEEE Xplore.  Restrictions apply. 
B. Security deﬁnition
We now deﬁne the “ideal” security of mOPE, which
intuitively says that the scheme must not leak anything
besides order. The security deﬁnition is the IND-OCPA
deﬁnition presented in Boldyreva et al. [6], except that we
adapt it to the syntax of our encoding scheme. The deﬁnition
says that an adversary cannot distinguish between encryptions
of two sequences of values as long as the sequences have
the same order relation.
In this section, we assume that the server is passive (see
§III), and treat malicious adversaries in §VII.
IND-OCPA security game. The security game between
a client Cl and an adversary Adv for security parameter κ
proceeds as follows:
1) The client Cl generates sk ← KeyGen(1κ) and chooses
a random bit b.
2) The client Cl and the adversary Adv engage in a
polynomial number of rounds of interaction in which
the adversary is adaptive. At round i:
∈ D to the
a) The adversary Adv sends values v0
i
,v1
i
client Cl.
i
i
b) The client Cl
algorithm on inputs sk and vb
with Adv observing all the state at Ser.
leads the interaction for the Enc
i with the server Ser,
< v1
⇔ v1
3) The adversary Adv outputs b(cid:7), its guess for b.
We say that the adversary Adv wins the game if (1) its
guess is correct (b = b(cid:7)), and (2) the sequences {v0
}i and
}i have the same order relations (namely, for all i, j,
{v1
i
j). Let winAdv,κ be the random variable
< v0
v0
i
j
indicating the success of the adversary in the above game.
Deﬁnition 3 (IND-OCPA:
indistinguishability under an
ordered chosen-plaintext attack). A mOPE scheme is IND-
OCPA secure if
for all
for all p.p.t. adversaries Adv,
sufﬁciently large κ, Pr[winAdv,κ] ≤ 1/2 + negl(κ).
C. Security proof
Theorem 1. Our mOPE scheme is IND-OCPA secure.
Due to space constraints, we point to Appendix B of our
extended paper [34] for the proof, and provide intuition here.
Proof intuition. Consider any adversary Adv and any two
sequences of values Adv asks for in the security game:
v = (v1, . . . ,vn) and w = (w1, . . . ,wn). The view of Adv
consists of the information the server receives in the security
game. The ﬁrst step is to use the security guarantees of the
DET encryption scheme, and assume that DET encryptions
are computationally indistinguishable from random values
that have the same pattern of repetitions (e.g., produced by
a random oracle). Next, we examine the information the
adversary learns in case the client encrypts v and in case
the client encrypts w, and show that this information is
information-theoretically the same.
469469
For this goal, we proceed inductively in the number of
values to be encrypted. The base case is when no value
was encrypted and we can see that Adv starts off with the
same information. Now consider that after i encryptions, Adv
obtains the same information in both cases, and we show
that the information after step i + 1 also remains the same.
At step i + 1, Cl and Adv run Enc from Fig. 4 for vi and wi.
We have two possibilities. The ﬁrst possibility is that the
encoding of vi is in the OPE Table. Then the encoding of wi
is also in the OPE Table (and vice versa) because v and w
have the same order relation; in particular, vi = v j iff wi = w j
so the pattern of repetitions will be the same. In this case,
Cl does not give any information to Adv.
The second possibility is that the encoding of vi (and
therefore of wi) is not in the OPE Table. Cl and Adv interact
according to Alg. 4 in both cases. Since v and w have the
same order relation, the path down the tree taken by Cl and
Adv must be the same. Also, the only information the client
gives the server is which edges to take in this path, which is
also the same for both cases.
Therefore, Adv receives the same information in both
(cid:2)
cases, and hence cannot distinguish between them.
V. IMPOSSIBILITY OF NON-MUTABLE STATEFUL OPE
The previous section showed that mOPE achieves IND-
OCPA security, but it changes the traditional model of an en-
cryption scheme, most notably via ciphertext mutability (there
have been interactive and/or stateful encryption schemes
before). A natural question is whether there exists an IND-
OCPA secure scheme that is stateful, but does not mutate
ciphertexts. In this section, we demonstrate that mutable
ciphertexts are needed, by showing that even a stateful and
interactive encryption scheme cannot feasibly achieve IND-
OCPA without prior knowledge of the values to be encrypted.
Boldyreva et al. [6] showed that any IND-OCPA-secure
OPE scheme must have ciphertext sizes at least exponential
in the size of the plaintext. For example, encrypting 64-
bit numbers would require 264-bit ciphertexts, which is
impractical. Their impossibility result implicitly assumes
a traditional model where encryption is a stateless function,
thus leaving open the question of whether an IND-OCPA-
secure stateful OPE scheme is possible. We show that even
such a scheme is infeasible: namely, any such scheme would
also have exponentially large ciphertexts. Due to space
constraints, we present only a proof sketch, and refer the
reader to Appendix C of our full paper [34] for more details.
Let us deﬁne IND-OCPA security for stateful OPE infor-
mally. Let EncOrd be the encryption algorithm of a stateful
OPE scheme. EncOrd takes as input a secret key, a current
state, and a plaintext x, and outputs a ciphertext c and a new
state. Let EncOrd(x) denote informally the encryption of x
under the appropriate secret key and state.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:52:32 UTC from IEEE Xplore.  Restrictions apply. 
We say that EncOrd is IND-OCPA-secure if all polynomial-
time adversaries Adv can win the following game with
probability of at most 1/2 + negl(κ):
• Adv provides two sequences of numbers x = {x1, . . . ,xn}
and y = {y1, . . . ,yn}, such that they have the same order
relation (namely, xi < x j ⇔ yi < y j, for all i, j).
• Adv is given an encryption of one of these sequences:
either {EncOrd(x1), . . . , EncOrd(xn)} or {EncOrd(y1),
. . . , EncOrd(yn)}. The values in these sequences are
encrypted in order; that is, when encrypting xi, EncOrd
receives the state from encrypting xi−1.
• Adv wins the game if it guesses correctly whether it
received an encryption of x or y.
Theorem 2. Any stateful OPE scheme that is IND-OCPA-
secure has ciphertext size exponential in the plaintext size.
Proof intuition. (See the full proof in Appendix C of the
extended paper [34].) We need to show that there exists a
polynomial-time adversary Adv that can break any scheme
that has shorter than exponentially large ciphertexts. Pick
any stateful IND-OCPA-secure OPE scheme and let EncOrd
be its encryption algorithm.
Let us ﬁrst build some intuition, by considering the
impossibility result of Boldyreva et al. [6] and showing why
it does not sufﬁce here. Let 1, . . . ,N be the possible plaintext
values, with a corresponding plaintext size of ≈ logN.
Boldyreva et al. speciﬁes an attacker Adv that can break any
stateless IND-OCPA scheme, unless the scheme has large
ciphertexts. Adv picks a random value m in {2, . . . ,N−2} and
outputs the sequences x = (1,m,m +1) and y = (m,m +1,N).
Then, when receiving c = (c1,c2,c3), the encryption of one
of these sequences, Adv checks if c1 and c2 are further apart
than c2 and c3 are, in which case it outputs “I guess x”,
else it outputs “I guess y”. The attack will fail if, for exam-
ple EncOrd(m)−EncOrd(1) < EncOrd(m+1)−EncOrd(m).
Boldyreva et al. use the term long jump to denote a
large difference between two consecutive values, such as
EncOrd(m + 1) − EncOrd(m). The adversary fails only if
there are many long jumps, but as Boldyreva et al. show,
many long jumps imply an exponential ciphertext size.
However, when the scheme is stateful, this argument no
longer applies. One can no longer argue that if EncOrd(m)−
EncOrd(1) < EncOrd(m + 1)− EncOrd(m), then the cipher-
text space is huge: there can be a scheme EncOrd that is
specialized to counter this attack using state. Such a scheme
can adjust the encryption of m +1 based on the previous two
values encrypted, 1 and m, which it can recall using state.
To show that the ciphertext size blows up even for stateful
schemes, our idea is to design an attack such that no stateful
scheme can specialize to counter it. For this, an adversary
provides a long trace of challenges but chooses only one at
random on which to guess.
E[1] E[2]
E[N-3] mid2
E[N-2] E[N-1]
0
long jump at the 3rd pair
max 
ciphertext
Figure 5. The OPE encryptions of the values in the trace (1,N−1), (2,N−
2),N−3. E denotes encryption with EncOrd. The axis shows the ciphertext
space from a ciphertext of zero to a maximum ciphertext value.
Let us deﬁne our adversary Adv. Adv uses a trace
of T pairs of challenges {(1,N − 1), (2,N − 2), (3,N −
3), . . . , (T,N − T )}, for some polynomial T = T (κ). Adv
shufﬂes the order of values in each pair, by choosing random
bits: we deﬁne (v,w)b to be (v,w) if b = 0, or (w,v) if b = 1.
Then, Adv chooses a random pair t on which to guess on.
Algorithm 7 (Adversary Adv(κ)).
1: Choose t randomly from 1, . . . ,T .
2: Choose t random bits b1, . . . ,bt.