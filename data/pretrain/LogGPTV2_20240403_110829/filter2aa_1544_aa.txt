The Emperor Has No Cloak – WEP Cloaking Exposed
Vivek Ramachandran 
( PI:EMAIL ) 
Deepak Gupta 
( PI:EMAIL ) 
Security Research Team (Amit, Gopi, Pravin) 
AirTight Networks 
www.airtightnetworks.net
Background
 Claim: WEP key cracking can be prevented 
using WEP Chaffing. 
 Question: Is it safe to use WEP again now that 
we have a cloak for it? 
Vendor aims to ‘Cloak’ WEP, April 2007
“ .. [Cloaking] is designed to protect a widely used but flawed wireless 
LAN encryption protocol ..”
“ .. Cloaking module creates dummy data traffic ... attacker can’t tell the 
difference between product frames from the WLAN and spoofed 
frames generated .. ”
Important Note
Our presentation this afternoon concerns a technique that 
we refer to as "chaff insertion," which recently has been 
proposed as a way to prevent cracking WEP keys. To 
avoid any confusion, while our abstract may have 
mentioned "WEP Cloaking," and while we may mention 
"WEP Cloaking" during the course of our presentation, it 
should be noted that WEP Cloaking is the name one 
company is using to refer to its particular 
implementation of the chaff insertion technique. Our 
presentation is not intended as an analysis of or 
commentary on this company's particular 
implementation, but rather addresses the technique of 
chaff insertion in general and demonstrates our belief 
that the approach is easily defeated and does not 
provide any useful protection against cracking WEP 
keys.
Talk Outline
 Evolution of WEP Cracking
 What is WEP Chaffing? What are Chaff packets?
 WEP Chaffing example
 Techniques to counter different types of Chaff:
 Random frames
 Single key
 Multiple keys 
 Random keys
 …
 Implementation problems with WEP Chaffing
 Final verdict on WEP Chaffing
 Q&A 
Talk Outline
 Evolution of WEP Cracking
 What is WEP Chaffing? What are Chaff packets?
 WEP Chaffing example
 Techniques to counter different types of Chaff:
 Random frames
 Single key
 Multiple keys 
 Random keys
 …
 Implementation problems with WEP Chaffing
 Final verdict on WEP Chaffing
 Q&A 
WEP Cracking – what is it?
WEP is a per packet encryption 
mechanism which uses a 
combination of a shared secret 
(WEP Key) and an Initialization 
Vector (IV) for generating the 
key stream using the RC4 
encryption mechanism. This 
key stream is XOR’ed with the 
data and transmitted 
WEP cracking involves trying to 
infer the WEP Key using various 
statistical attacks – FMS, KoreK
Lets now look at the historical 
evolution of WEP Cracking
Cracks in WEP -- Historic Evolution
2001 - The insecurity of 802.11, Mobicom, July 2001 
N. Borisov, I. Goldberg and D. Wagner.
2001 - Weaknesses in the key scheduling algorithm of RC4.
S. Fluhrer, I. Mantin, A. Shamir. Aug 2001.
2002 - Using the Fluhrer, Mantin, and Shamir Attack to Break WEP
A. Stubblefield, J. Ioannidis, A. Rubin.
2004 – KoreK, improves on the above technique and 
reduces the complexity of WEP cracking. We now require 
only around 500,000 packets to break the WEP key.
2005 – Adreas Klein introduces more correlations between 
the RC4 key stream and the key.
2007 – PTW extend Andreas technique to further simplify 
WEP Cracking. Now with just around 60,000 – 90,000 
packets it is possible to break the WEP key.
IEEE WG admitted that WEP 
cannot hold any water. 
Recommended users to upgrade 
to WPA, WPA2
This hasn’t stopped people from using 
band-aids to stop leakage
128-bit key
Suppress weak IV generation
ARP filtering
The Latest Development
OR
Is chaffing approach yet another 
band-aid which cannot hold 
water?
Can chaffing approach indeed hide
all WEP cracks?
WEP Chaff frame insertion
Talk Outline
 Evolution of WEP Cracking
 What is WEP Chaffing? What are Chaff packets?
 WEP Chaffing example
 Techniques to counter different types of Chaff:
 Random frames
 Single key
 Multiple keys 
 Random keys
 …
 Implementation problems with WEP Chaffing
 Final verdict on WEP Chaffing
 Q&A 
What is WEP Chaffing?
WEP Chaffing is a technique of 
mixing spoofed WEP encrypted 
frames a.k.a. “Chaff” which are 
indistinguishable from the 
legitimate frames. This 
confuses the statistical analysis 
of WEP cracking tools
The current versions of WEP 
key cracking tools such as 
Aircrack-ng and AirSnort will 
either produce wrong results or 
won’t converge on the WEP key 
in presence of WEP Chaffing
WEP 
Data
Chaff
Aircrack-ng 
Fails!!!
What are Chaff packets?
Chaff packets are spoofed WEP 
encrypted packets which try to 
mislead the decision making 
process of cracking tools.
In reality, not all WEP 
encrypted packets qualify as 
Chaff; Only those which satisfy 
any one of the FMS or Korek
conditions can cause a bias in 
the cracking logic.
The WEP Chaffing process will 
craft the IV and the first two 
encrypted bytes of the Chaff 
packet to make it satisfy an 
FMS or Korek condition.
WEP 
Data
Chaff
Talk Outline
 Evolution of WEP Cracking
 What is WEP Chaffing? What are Chaff packets?
 WEP Chaffing example
 Techniques to counter different types of Chaff:
 Random frames
 Single key
 Multiple keys 
 Random keys
 …
 Implementation problems with WEP Chaffing
 Final verdict on WEP Chaffing
 Q&A 
WEP Chaffing Example
(Demo)
Why does this work? 
 Current generation of WEP cracking tools “trust” all data 
seen over the air
 WEP Chaffing exploits this trust and spoofs garbage 
data into the air
 This data is blindly used in the statistical analysis for 
calculating the WEP key – causing either a wrong / no 
result
 WEP crackers such as Aircrack-ng, Airsnort etc thus fail 
to crack the key in presence of Chaffing
 As, Aircrack-ng is the most reliable WEP cracker 
currently available which implements all the known 
statistical attacks till date. We decided to use Aircrack-
ng 0.7 version as a benchmark to run our tests
Let us now try and understand the key cracking 
process in Aircrack-ng (0.7 version)
AirCrack-ng Review – the Cracking Logic
Init:
Preprocess the input packet trace & store a list unique IVs and first two encrypted bytes; 
ignore duplicates
Iteration:
To crack the Bth byte of the key assume the first (B-1) bytes of the secret key have 
already been cracked. Start with B=0.
To crack byte B of the secret key
Simulate the first B+3 steps of RC4 KSA
Find the next weak IV (matching any Korek condition) which leaks information 
about byte B of the secret WEP key; For the above IV
• 
Compute a probable value for key byte B based on which Korek condition 
matched
• 
Award a score (vote) for the above guess
After all unique IVs are processed,
• 
Calculate weighted score for each possibility
• 
The most probable value of secret byte B is = value with the highest score
Use the fudge factor to determine number of possibilities to use for bruteforce for 
each byte. By default fudge factor is 5 for 40 bit key and 2 for 104 bit key.
Crack the last key byte using brute force; Verify against 32 IVs from the list of IVs if 
the key is right
AirCrack-ng – Possible Attack Points
Init:
Preprocess the input packet trace & store a list unique IVs and first two encrypted bytes; 
ignore duplicates
Iteration:
To crack the Bth byte of the key assume the first (B-1) bytes of the secret key have 
already been cracked. Start with B=0.
To crack byte B of the secret key
Simulate the first B+3 steps of RC4 KSA
Find the next weak IV (matching any Korek condition) which leaks information 
about byte B of the secret WEP key; For the above IV
• 
Compute a probable value for key byte B based on which Korek condition 
matched
• 
Award a score (vote) for the above guess
After all unique IVs are processed,
• 
Calculate weighted score for each possibility
• 
The most probable value of secret byte B is = value with the highest score
Use the fudge factor to determine number of possibilities to use for bruteforce for 
each byte. By default fudge factor is 5 for 40 bit key and 2 for 104 bit key.
Crack the last key byte using brute force; Verify against 32 IVs from the list of IVs if 
the key is right
Attack points
(1)
(2)
(3)
(4)
Attacking AirCrack-ng
 Attack point (1) “Eliminate legit IVs”: If chaffer’s packet 
containing weak IV is seen before a legit packet with the same 
IV, legit packets with weak IVs will be ignored by AirCrack.
 Attack point (2) “Influence voting logic”: Chaffer can inject 
packets with weak IVs matching Korek conditions and in turn 
influence the voting logic.
 Attack point (3) “Beat Fudging”: Maximum fudge factor 
allowed is 32. Hence the Chaffer can easily create a bias such 
that the legit key byte is never included for brute forcing.
 Attack point (4) “Beat the verification step”: After a key is 
cracked, it is verified against a selected subset of IVs and first 
two encrypted bytes in the packet. If this set contains chaff, 
Aircrack-ng will exit with failure.
So, can AirCrack-ng be made ‘Smarter’?
 Aircrack-ng “trusts” what 
it sees. It does not and in 
its current form cannot 
differentiate between the 
Chaffer’s WEP packets 
(noise) and the 
Authorized networks WEP 
packets (signal).
 Could we teach Aircrack-
ng to separate the 
“Chaff” a.k.a. Noise from 
the “Grain” a.k.a. Signal? 
 Lets now look at various 
techniques to beat WEP 
Chaffing 
WEP 
Data
Chaff
Aircrack-ng 
Succeeds!!!
Filter
Talk Outline
 Evolution of WEP Cracking
 What is WEP Chaffing? What are Chaff packets?
 WEP Chaffing example
 Techniques to counter different types of Chaff:
 Random frames
 Single key
 Multiple keys 
 Random keys
 …
 Implementation problems with WEP Chaffing
 Final verdict on WEP Chaffing
 Q&A 
Chaff Insertion Approaches
Naive
Sophisticated
Chaff Insertion Approaches
Naive
Inject random 
frames
Sophisticated
Necklace
Chaff Insertion Approaches
Naive
Inject random 
frames
Sophisticated
Off goes the 
necklace
Aircrack-ng 
Default
Chaff Insertion Approaches
Naive
Inject random 
frames
Sophisticated
Crown
Aircrack-ng 
Default
Weak IV frames 
of fixed size
Chaff Insertion Approaches
Naive
Inject random 
frames
Sophisticated
Missing 
Something?
Aircrack-ng 
Default
Weak IV frames 
of fixed size
Frame Size 
Filter
Chaff Insertion Approaches
Naive
Inject random 
frames
Sophisticated
Robe
Aircrack-ng 
Default
Weak IV frames 
of fixed size
Frame Size 
Filter
Chaff using 
single  key
Chaff Insertion Approaches
Naive
Inject random 
frames
Sophisticated
Off goes your 
robe!! ☺
Aircrack-ng 
Default
Weak IV frames 
of fixed size
Frame Size 
Filter
Chaff using 
single  key
Aircrack-ng 
Visual 
Inspection
Quick review - AirCrack-ng with a normal trace file
Traffic Characteristics
TCP based file download using WEP key “g7r0q”
Approx. 1 GB of the traffic collected in a packet trace
About 300,000 Unique IVs present in the trace
6,958 Weak IVs were used to crack the key.
AirCrack-ng is able to crack the WEP Key using the above trace
Note that the maximum vote (bias) is in the range of 47 to 148
Our observation
Max vote for any cracked key byte is typically less than 250 in a 
“normal” trace of  ~300,000 packets
Basic Idea
 Pattern of votes caused by chaff packets is visibly different 
than naturally occurring voting distribution
 At each step of byte cracking, anomalous voting pattern can 
be identified and the corresponding guess can be eliminated
Simple Aircrack-ng Modification
While cracking a key byte, compute votes and display on 
screen.
Take user’s input on which value to choose for that key 
byte 
 User can visually inspect the votes and remove 
any “obviously wrong” guesses
 Aircrack-ng uses the user’s choice as the 
“guessed byte” for that byte of the key.
Visual Inspection using Aircrack-ng
Guiding Aircrack-ng with Manual 
Inputs: Chaff with single key
Demo
Guiding Aircrack-ng with Manual Inputs: 
Analysis
 Strengths
 Can crack the key in many cases
• Single chaff key
• Multiple chaff keys
 Weaknesses
 May not work in presence of a chaffer 
with random keys
Chaff Insertion Approaches
Naive
Inject random 
frames
Sophisticated
I like that 
sword ;-)
Aircrack-ng 
Default
Weak IV frames 
of fixed size
Frame Size 
Filter
Chaff using 
single  key
Aircrack-ng 
Visual 
Inspection
Chaff using 
multiple keys
Chaff Insertion Approaches
Naive
Inject random 
frames
Sophisticated
Thanks!
Aircrack-ng 
Default
Weak IV frames 
of fixed size
Frame Size 
Filter
Chaff using 
single  key
Aircrack-ng 
Visual 
Inspection
Chaff using 
multiple keys
Sequence 
Number 
analysis
Seq# Vs Time graph
 Example Illustrating Sequence Filter Implementation (using a 
subset of packets from the trace) 
 Sequence number is a part of the MAC header and is present 
in all Management and Data packets.
 It is important to note the distinct pattern of sequence 
numbers for different sources
 This pattern can be used as a filter 
 Most MAC spoofing detection algorithms already use 
Sequence# 
Sequence Filter
0
500
1000
1500
2000
2500
0
200
400
600
800
1000
1200
Packet Number
MAC Sequence Number
Legitimate-Client-Seq
Chaffer-Seq-Num
Just a few hours before we submitted this presentation, we came across Joshua Wright’s blog in 
which he countered WEP Cloaking advocating the same technique (sequence number + IV based 
filtering).  This submission will demonstrate the tool whose development Joshua predicted. 
http://edge.arubanetworks.com/blog/2007/04/airdefense-perpetuates-flawed-protocols
Few lines of pseudo-code illustrating 
sequence filter!
For all packets of a given device in the trace:
Prev_seq_num = First Sequence number seen for device;
If (current_seq_num – prev_seq_num < threshold)
{
prev_seq_num = current_seq_num;
consider packet for key cracking
} else {
Discard packet
}
Chaff Insertion Approaches
Naive
Inject random 
frames
Sophisticated
Shoes
Aircrack-ng 
Default
Weak IV frames 
of fixed size
Frame Size 
Filter
Chaff using 
single  key
Aircrack-ng 
Visual 
Inspection
Chaff using 
multiple keys
Sequence 