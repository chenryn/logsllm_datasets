# Title: Assessing Robustness of Web-Services Infrastructures

## Authors:
- Marco Vieira
- Nuno Laranjeiro
- Henrique Madeira
- Ali Shahrokni
- Robert Feldt

## Affiliation:
Department of Computer Science & Engineering, Chalmers University of Technology, 412 96 Gothenburg, Sweden

## Abstract:
**Context:** In modern society, software plays a critical role in managing key functions, making it essential to understand and support software robustness. Despite numerous contributions to the field, a coherent and comprehensive overview is lacking.

**Objective:** To address this gap, we conducted a systematic literature review on software robustness.

**Method:** The review followed established guidelines for systematic literature reviews, which involve identifying, evaluating, and synthesizing all relevant literature in a specific field.

**Results:** From an initial pool of 9,193 papers found in three prominent research databases, 144 relevant papers were selected through a multi-step filtering process with independent validation at each step. These papers were analyzed and categorized based on their development phase, domain, research type, contribution, and evaluation method. The findings indicate that most existing work on software robustness focuses on verification and validation of Commercial Off-The-Shelf (COTS) or operating systems, or proposes design solutions for robustness. There is a notable lack of research on eliciting and specifying robustness requirements. Additionally, the majority of the research consists of solution proposals with minimal or no evaluation, and when evaluations are conducted, they are often limited to small, toy/academic example systems.

**Conclusion:** We conclude that there is a need for more research on real-world, industrial systems and on software development phases other than testing and design, particularly on requirements engineering.

**Keywords:**
- Systematic review
- Robustness
- Software robustness

## 1. Introduction
As the importance and complexity of software systems increase, both practitioners and researchers emphasize the need for systematic and effective development methods. A key aspect of these methods is maintaining and enhancing the quality of the resulting software. Software quality is a multifaceted concept, and dependability and reliability are crucial attributes, especially for critical systems [13].

Robustness is a vital quality attribute defined by the IEEE standard glossary of software engineering terminology [1] as:

"The degree to which a system or component can function correctly in the presence of invalid inputs or stressful environmental conditions."

In a previous study [147], we identified gaps in the practice of specifying and assuring software quality. One significant gap was the lack of systematic ways to specify quality attributes such as robustness in many companies. To address this, we conducted an informal search in academic literature, but found only a limited number of results. Therefore, we extended our approach to a more systematic review of the existing literature on software robustness.

Systematic reviews follow clear guidelines and steps to classify and synthesize all available literature on a specific research question or focus area. Although this paper presents the findings from a systematic review, we also adopted some practices from systematic mapping to visualize and classify the results.

This paper discusses the results of a systematic literature review on software robustness. Our objectives were to identify and classify existing literature according to their phase focus, system focus, and study quality. The quality of studies was assessed based on the type of research, contribution, and evaluation strength. Given that the need for this study was identified in an industrial project, the type of evaluation and its relevance to an industrial setting were particularly important.

The paper is structured as follows: Section 2 presents related work, Section 3 describes the research methodology, Section 4 reports the results, Section 5 discusses and analyzes the results, and Section 6 provides conclusions and implications.

## 2. Related Work
There are no prior systematic reviews specifically on software robustness. However, a well-known review on non-functional (quality) requirements by Chung et al. [34] provides a general perspective on software quality. This review discusses different definitions of software quality and quality requirements, and introduces the ISO 9126 standard, which classifies quality requirements into categories such as functionality, reliability, usability, efficiency, maintainability, and portability. The paper also covers various methods for specifying quality requirements, including the IEEE standard 830 for recommended practices in software requirements specification.

The IEEE standard defines robustness as:

"The degree to which a system or component can function correctly in the presence of invalid inputs or stressful environmental conditions."

Robustness is sometimes considered a quality attribute for achieving higher dependability in systems. Dependability is an umbrella term encompassing multiple attributes, including availability, reliability, safety, confidentiality, integrity, and maintainability [13]. Avizienis et al. [13] define robustness as dependability with respect to erroneous input, though it is not a main attribute of dependability but rather a secondary and specializing attribute. Robustness can be seen as either a specialized attribute within the broader concept of dependability or as an extension to dependability in the context of invalid input or stressful environments.

Common to several uses of the term robustness is the idea that a system should exhibit acceptable behavior under exceptional or unforeseen operating conditions [50]. Specifying different levels of acceptable behavior is one task of robustness requirements, which is related to the concept of graceful degradation, where a system can deliver partial functionality despite erroneous conditions.

## 3. Research Methodology
This section describes the methodology used for the systematic review, based on guidelines from [90]. We also discuss the research questions, results from the planning and conducting phases of the review, and threats to validity.

### 3.1. Research Questions
The primary goal of this review is to identify the state of knowledge and gaps in software robustness. The following research questions were formulated:

- **RQ1: Phase Focus:** Which phase of the software development process is the main focus of the existing studies?
- **RQ2: System Focus:** What types of systems do these studies mainly focus on?
- **RQ3: Contribution/Research Quality:**
  1. **Research Type:** What kind of research study is this?
  2. **Contribution Facet:** What is the form of the main contribution?
  3. **Evaluation:** What kind of evaluation is made to assess the proposed contribution?

### 3.2. Sources of Information
To ensure a broad and comprehensive set of papers, we searched the following popular literature databases in the field:

1. ISI Web of Knowledge (ISI)
2. Compendex
3. IEEE Xplore Digital Library
4. ACM Digital Library

We used the following search string within keywords, titles, and abstracts to find relevant results:

```
((robust OR robustness) AND software)
```

The search term was deliberately broad to capture the most relevant results. The selection of relevant primary studies was conducted by one researcher, with a second person independently validating 20% of the studies at each step to minimize bias. Discrepancies were addressed, and the results from this process are discussed in Section 3.5.1.