title:Assessing Robustness of Web-Services Infrastructures
author:Marco Vieira and
Nuno Laranjeiro and
Henrique Madeira
A Systematic Review of Software Robustness
Department of Computer Science & Engineering, Chalmers University of Technology, 412 96 Gothenburg, Sweden
Ali Shahrokni & Robert Feldt
Abstract
Context: With the increased use of software for running key functions in modern society it is
of utmost importance to understand software robustness and how to support it. Although there
have been many contributions to the ﬁeld there is a lack of a coherent and summary view.
Objective: To address this issue, we have conducted a literature review in the ﬁeld of robust-
ness.
Method: This review has been conducted by following guidelines for systematic literature
reviews. Systematic reviews are used to ﬁnd and classify all existing and available literature in a
certain ﬁeld.
Results: From 9193 initial papers found in three well-known research databases, the 144 rel-
evant papers were extracted through a multi-step ﬁltering process with independent validation in
each step. These papers were then further analyzed and categorized based on their development
phase, domain, research, contribution and evaluation type. The results indicate that most exist-
ing results on software robustness focus on veriﬁcation and validation of Commercial of the shelf
(COTS) or operating systems or propose design solutions for robustness while there is a lack of
results on how to elicit and specify robustness requirements. The research is typically solution
proposals with little to no evaluation and when there is some evaluation it is primarily done with
small, toy/academic example systems.
Conclusion: We conclude that there is a need for more software robustness research on real-
world, industrial systems and on software development phases other than testing and design, in
particular on requirements engineering.
Keywords:
Systematic review, Robustness, Software robustness
1. Introduction
As the importance and complexity of software systems increase, both software practitioners
and researchers emphasize systematic and eﬀective development methods. A key aspect of these
methods is that they help maintain and increase the quality of the resulting software. Software
quality is a multi-faceted concept and can be conceptualized and measured using many diﬀerent
quality attributes [22]. For critical software systems quality attributes dealing with dependability
and reliability take center stage [13].
Email address: {ali.shahrokni, robert.feldt}@chalmers.se (Ali Shahrokni & Robert Feldt)
Preprint submitted to Journal of Information and Software Technology
March 22, 2012
Robustness is one such important quality attribute which is deﬁned by the IEEE standard
glossary of software engineering terminology [1] as:
The degree to which a system or component can function correctly in the presence
of invalid inputs or stressful environmental conditions.
In one of our previous studies [147] we identiﬁed gaps in the state of practice for specifying
and assuring software quality. An important gap we identiﬁed was the lack of systematic ways
to specify quality attributes such as robustness in many companies. One of our initial steps to
address this gap was to search in the academic literature for ways to specify, improve and ensure
robustness. Since our informal searches found only a limited number of results we here extend
our method to a more systematic review of the existing literature on software robustness.
An obvious choice for this purpose was to follow the guidelines on conducting systematic
literature reviews presented in [90]. A systematic review goes through all available literature
regarding a speciﬁc research question or focus area and classiﬁes the results following clear
guidelines and steps. Systematic reviews consist of three main phases: planning, conducting,
and reporting the review. Although this paper presents our ﬁndings from performing a systematic
review, to present the results in a more clear and understandable manner, we decided to adopt
some of the practices used for systematic mapping to visualize and classify the results of our
review.
In this paper we discuss the results of a systematic literature review we performed on software
robustness. The objectives of this study are to ﬁnd the existing literature in the ﬁeld and classify
them according to their phase focus, system focus, and quality of studies. Quality of the studies
was measured based on research contribution type (contribution facet), type of research and type,
and strength of evaluation. Since the need to conduct this study was identiﬁed in an industrial
project, an important factor for the studies were the type of evaluation performed, and whether
they were done in an industrial setting. This measure is incorporated to evaluate the usability and
validity of the studies in the industrial context.
We continue the paper by presenting related works in Section 2. Section 3 presents the
research methodology we used to achieve our objectives, together with the results from the plan-
ning and conducting phases of the review. Section 4 reports the results from performing the
review. The results are presented in a structure based on our research questions. In Section 5 we
discuss and analyze the results to identify gaps and strengths in the state of knowledge. Finally,
Section 6 gives our conclusions about the presented results and what they imply.
2. Related Work
There are no previous reviews or systematic reviews on the subject of robustness. How-
ever, there is a review in the ﬁeld of quality attributes that can be mentioned here. A short but
well known review on non-functional (quality) requirements was made by Chung et al.
[34].
This study discusses quality attribute from a general perspective. The paper presents diﬀerent
deﬁnitions of software quality and quality requirements.
It continues by presenting diﬀerent
classiﬁcations of quality requirements, which leads us to the ISO 9126 standard for classifying
quality requirements. ISO 9126 divides quality requirements into main categories of functional-
ity, realiability, usability, eﬃciency, maintainability, and portability. The paper also discusses
diﬀerent methods for specifying quality requirements. An important artifact in this regards is the
IEEE standard 830 about recommended practices for software requirements speciﬁcation.
2
Another concept that needs to be discussed in this section is software robustness.
standard deﬁnes robustness as [1]:
IEEE
The degree to which a system or component can function correctly in the presence
of invalid inputs or stressful environmental conditions.
However, robustness is sometimes considered a quality for achieving higher dependability in sys-
tems by non-academicers. Dependability is an ‘umbrella’, ‘integrative’ concept having multiple
attributes [99]. Formally it and its basic sub-concepts are deﬁned as [13]:
The ability to deliver service that can justiﬁably be trusted in a software system.
Dependability is the integrate of these basic attributes: availability (readiness for correct ser-
vice), reliability (continuity of correct service), safety (absence of catastrophic consequences on
the user(s) and the environment), conﬁdentiality (absence of unauthorized disclosure of infor-
mation), integrity (absence of improper system state alterations), and maintainability (ability to
undergo repairs and modiﬁcations) [13].
Avizienis et al. deﬁnes robustness as dependability with respect to erroneous input [13]. How-
ever, robustness is not considered a main attribute of dependability, but is characterized as a
secondary and specializing attribute [13]:
An example of specializing secondary attribute is robustness, i.e. dependability with
respect to external faults, that characterizes a system reaction to a speciﬁc class of
faults.
Thus, it seems that robustness can either be seen as a specializing attribute within the more
general concept of dependability, or it can be seen as an extension to the concept of dependability
to the situation of invalid input or stressful environment.
Common to several uses of the term robustness is that a system should show ‘acceptable’
behavior in spite of exceptional or unforeseen operating conditions[50]. One task of requirements
on robustness can be to specify diﬀerent levels of acceptable behavior of the system. This is
related to graceful degradation of a system, which means that the system can deliver parts of its
originally intended behavior or function despite erroneous operating conditions.
3. Research Methodology
In this section we describe the methodology of a systematic review based on guidelines
from [90]. We also discuss the research questions, results from the planning and conducting
phases of the review, and the threats to validity.
Systematic reviews were ﬁrst presented to software engineering by Kitchenham [89] and have
since gained an increasing popularity for conducting literature reviews in the ﬁeld [155, 5, 82, 47,
48, 92]. The goal of a systematic review is “to identify, evaluate, interpret all available research
relevant to a particular research question, or topic area, or phenomenon of interest. Individual
studies contributing to a systematic review are called primary studies; a systematic review is a
form of a secondary study” [89].
Systematic reviews are conducted to:
• summarize the existing evidence about a topic
• identify gaps in current research
3
• provide background to position new research activities
This review is based on the guidelines speciﬁed in [21, 90, 89]. Parts of the structure we used
were inspired by other systematic reviews [49, 106].
As discussed in [90], during the planning phase, the researchers identify the objectives of the
review and develop a review protocol that speciﬁes every step in detail. Then, they use the proto-
col to conduct each step of the review. The steps here are: to identify and select primary studies
in the subject, extract data from the studies, assess the quality of the studies, and synthesize data
based on the included studies. The last step is reporting where the researchers write and evaluate
the report and draw conclusions based on the results.
As discussed in the introduction, we identiﬁed the need to conduct a systematic review on
the basis of the results from [147] and the need of industry to have a better understanding of
the concept of robustness. Furthermore, most academic works about robustness focus on limited
parts and implications of the deﬁnition provided by the IEEE deﬁnition. This fact increases the
need for a systematic review to build a larger perspective over the area and categorize the existing
studies.
The next step is to identify the research questions. We needed to classify the results based on
the focus area of the studies. We also needed to consider the system focus, and assess the quality
of research and the contribution based on the type of research, contribution facet, and evaluation
of the study. These research questions are deﬁned in Section 3.1.
As another part of the review protocol we needed to decide which databases to search, what
search terms to use, what types of studies to include, and decide how to classify and report the
results. ISI Web of Knowledge, Compendex and IEEE Xplore digital libraries were chosen. We
also used the ACM digital library to control the completeness of our selected studies.
We used the following search string within keywords, title and abstract to ﬁnd results in the
databases mentioned above:
((robust OR robustness) AND software)
The search term was chosen to be very broad in order to cover the most relevant results. The
intention was to use more or fewer words depending on the number of hits, which proved to be
unnecessary since the number of hits was in a typical range for large systematic reviews.
To select relevant primary studies from the whole set of identiﬁed studies the exclusion was
made by one researcher. However, to minimize the bias the review protocol required us to use
a second person in each step to classify 20% of the studies in every selection step. The control
studies were to be selected randomly. The results from the primary and control selections were
then to be compared and in case of diﬀerence the issue needed to be addressed. The results from
this step are discussed in Section 3.5.1.
3.1. Research Questions
This paper identiﬁes the state of knowledge and the gaps in the knowledge in Software ro-
bustness. Robustness is the main topic in our ongoing industrial project described in [147]. The
goal of the project is to identify and improve the state of art and practice of software robustness
in diﬀerent phases of software development. To answer these questions we have speciﬁed the
following research questions:
RQ1 Phase focus: Which phase of the software development process is the main focus of the
existing studies?
4
RQ2 System focus: What kind of systems do these studies mainly focus on?
RQ3 Contribution/research quality: What is the quality of the research and contributions in
each study:
1. Research type: What kind of a research study is this?
2. Contribution facet: What is the form of the main contribution?
3. Evaluation: What kind of evaluation is made to evaluate the proposed contribution?
We answered these questions by conducting this systematic literature review and following
the review protocol described earlier in the paper. The results and conduct of the review are
discussed in the following sections.
3.2. Sources of Information
To have the broadest set of papers possible, we searched the most popular literature databases
in the ﬁeld. These are databases used often by the researchers in the ﬁelduse. Here is the list of
the digital databases searched in our study:
1. ISI Web of Knowledge (ISI)1