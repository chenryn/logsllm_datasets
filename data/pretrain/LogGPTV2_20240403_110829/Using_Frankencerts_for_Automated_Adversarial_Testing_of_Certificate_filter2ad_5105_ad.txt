acting as intermediate certiﬁcates. For example, the key us-
age extension of an intermediate certiﬁcate may not include
keyCertSign, as required by the X.509 RFC [69], or an
121
intermediate certiﬁcate may violate a name constraint which
limits the set of subjects it is allowed to certify.
else
end if
if f ield =“key” then
new cert ← Create a blank cert
for all f ield ∈ new cert do
new cert.key ← Create a random key
else if f ield =“issuer” then
new cert.issuer ← issuer
random cert ← CHOICE(certs)
new cert.f ield ← random cert.f ield
Algorithm 1 Generating a single frankencert
1: procedure FRANKENCERT(certs, exts, issuer)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25: end procedure
random id ←CHOICE(exts)
random val ←CHOICE(exts[random id])
new cert.extensions[i].id ← random id
new cert.extensions[i].val ← random val
if RANDOM version > 1) && (ic->extensions.bc.caauthStatus = PS_CERT_AUTH_FAIL_BC;
return PS_CERT_AUTH_FAIL_BC;
}
GnuTLS, on the other hand, contains a very subtle error.
This error could not have been uncovered without frankencerts
because none of the real certiﬁcate chains in our corpus contain
v1 intermediate certiﬁcates.
GnuTLS has three ﬂags that an application can set
to customize the library’s
treatment of v1 CA certiﬁ-
cates: GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT (only accept v1
root certiﬁcates), GNUTLS_VERIFY_ALLOW_ANY_X509_V1_CA_CRT (ac-
cept v1 certiﬁcates for root and intermediate CAs), and
GNUTLS_VERIFY_DO_NOT_ALLOW_X509_V1_CA_CRT (reject all v1 CA
certiﬁcates). Only GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT is set by
default. The intention is good: the application may locally trust
a v1 root CA, but, to prevent other customers of that root CA
from acting as CAs themselves, no v1 intermediate certiﬁcates
should be accepted.
The relevant part of GnuTLS certiﬁcate validation code
is shown below (adapted from lib/x509/verify.c). After a
root v1 certiﬁcate has been accepted, GnuTLS needs to
prevent any further v1 certiﬁcates from being accepted. To
this end, it clears the GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT ﬂag
on line 12 before calling _gnutls_verify_certificate2. The
latter function accepts v1 certiﬁcates unless a different ﬂag,
GNUTLS_VERIFY_DO_NOT_ALLOW_X509_V1_CA_CRT is set (line 25).
unsigned int _gnutls_x509_verify_certificate(...)
{
...
/* verify the certificate path (chain) */
for (i = clist_size - 1; i > 0; i--)
{
/* note that here we disable this V1 CA flag. So
that no version 1
* certificates can exist in a supplied chain.
*/
if (!(flags &
GNUTLS_VERIFY_ALLOW_ANY_X509_V1_CA_CRT))
flags &= ˜(GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT);
if ((ret = _gnutls_verify_certificate2 (...)) ==
0)
/* return error */
{
}
}
...
}
int _gnutls_verify_certificate2(...)
{
...
if (!(flags & GNUTLS_VERIFY_DISABLE_CA_SIGN) &&
((flags &
GNUTLS_VERIFY_DO_NOT_ALLOW_X509_V1_CA_CRT)
|| issuer_version != 1))
{
if (check_if_ca (cert, issuer, flags) == 0)
{
/*return error*/
...
1
2
3
4
5
6
7