values can include the date, time, the IP address of the requester, the ARN of the request
source, the user name, user ID, and the user agent of the requester. A value from the request
is represented by a key.
Whenever a request is made, the policy is evaluated and AWS replaces key with a similar
value from the request. The condition returns a boolean value, either true or false, that
decides if the policy should either allow or deny that request.
Policies can be categorized into 2 broad categories as follows:
Managed policies: These are standalone policies that can be attached to IAM
1.
identities in your AWS account such as users, groups, and roles. These policies
cannot be applied to AWS resources such as EC2 or S3. When you browse
through policies on IAM dashboard, you can identify AWS managed policies by
the yellow AWS symbol before them. AWS recommends that you use managed
policies over inline policies. There are two types of managed policies available:
AWS managed policies: As the name suggests, these policies are
created as well as managed by AWS. To begin with, it is recommended
you use AWS managed policies as it will cover almost all of your use
cases. You can use these policies to assign permissions to AWS
identities for common job functions such as Administrators,
SecurityAudit, Billing, SupportUser, and so on, as shown in the
following figure. AWS managed policies cannot be changed.
AWS Identity and Access Management
[ 63 ]
customer managed policies: These are the policies created and
managed by you in your AWS account. You would normally create a
policy when you have a use case that's not supported by an AWS
managed policy. You can copy an existing policy, either an AWS
managed policy or a customer managed policy and edit it, or you can
start from scratch as well to create a policy:
Figure 9 - AWS job functions policies
Inline policies: These are policies created and managed by you, and these 
2.
policies are embedded directly into a principal entity such as a single user, group,
or role. The policy is part of that entity either when you create an entity or you
can embed the policy later as well. These policies are not reusable. Moreover, if
you delete the principal entity, the inline policy gets deleted as well. You would
normally create inline policies when you need to maintain a one to one
relationship between a policy and a principal entity, that is, you want to make
sure your principal entity is used for a specific purpose only.
Creating a new policy
AWS gives you multiple options to create a new policy in IAM. You can copy an existing
AWS managed policy and customize it according to your requirements. You can use the
policy generator or you can write JSON code to create a policy from scratch or use the
policy editor to create a new policy.
AWS Identity and Access Management
[ 64 ]
Here are the following common steps to be followed before we choose one of the options
for creating a policy:
Sign in to the AWS Management Console using your sign in URL.
1.
Navigate to the IAM dashboard.
2.
Click on Policies on the left navigation bar.
3.
Click on the Create Policy button.
4.
Click on any of the three options to create a new policy as shown in the following
5.
figure:
Copy an AWS Managed Policy
Policy Generator
Create Your Own Policy
Figure 10 - AWS Create Policy options
IAM Policy Simulator
AWS provides you with a Policy Simulator tool that is accessible at https:/​/​policysim.
aws.​amazon.​com.​ IAM Policy Simulator helps you to test as well as troubleshoot policies,
both identity and resource based. This tool is quite helpful in testing the scope of existing
policies and the scope of newly created policies. You can find out if a policy is allowing or
denying the requested actions for a particular service for a selected IAM identity (user,
group, or role). Since it is a simulator, it does not make an actual AWS request. This tool is
accessible to all users who can access the AWS Management Console.
AWS Identity and Access Management
[ 65 ]
You can also simulate IAM policies using the AWS CLI, API requests or through tools for
Windows PowerShell. You can find more information on testing policies by using the policy
simulator at http:/​/​docs.​aws.​amazon.​com/​IAM/​latest/​UserGuide/​access_​policies_
testing-​policies.​html. As shown in the following figure, the IAM policy simulator shows
for an IAM administrator group how many permissions are allowed or denied for Amazon
SQS and AWS IAM services:
Figure 11 - AWS IAM Policy Simulator
IAM Policy Validator
This is another tool available to fix your non compliant policies in IAM. You will know that
you have a non-compliant policy if you see a yellow banner titled Fix policy syntax at the
top of the console screen. You can use IAM policy validator only if your policy is not
complying with the IAM policy grammar. For example, the size of policy can range
between 2048 characters and 10,240 characters excluding the white space characters, or
individual elements such as Statement cannot have multiple instances of the same key
such as Effect element. Note that a policy cannot be saved if it fails validation. Policy
Validator only checks the JSON syntax and policy grammar, it does not check variables
such as ARN or condition keys. You can access policy validator in three ways: while
creating policies, while editing policies, and while viewing policies.
AWS Identity and Access Management
[ 66 ]
Access Advisor
IAM console gives you information on policies that were accessed by a user. This
information is very useful to implement the least privilege principle for assigning
permissions to your resources. Through access advisor, you can find out what permissions
are used infrequently or permissions that are never used, you can then revoke these
permissions to improve the security of your AWS account. The following figure shows a
few policies in the access advisor that were last accessed 144 days back; there is no reason
these policies should be attached to this user:
Figure 12 - AWS IAM Access Advisor
Passwords Policy
You can set up the password policy for your AWS account from IAM. Navigate to the IAM
dashboard from the AWS console. Click on Account settings. As shown in the following
figure, on the Password Policy page, you can setup requirements such as minimum
password length, rotation period, and so on. Most of these changes in your password policy
are effective when your users log in the next time, however, for changes such as change in
the password expiration period, they are applied immediately:
AWS Identity and Access Management
[ 67 ]
Figure 13 - AWS IAM Password Policy
AWS credentials
As we have seen in the previous chapter, AWS provides you with various credentials to
authorize and authenticate your requests. Let us look at these AWS credentials in detail:
Email and password: These credentials are used by your account root user. As
discussed earlier, by default, the account root user has access to all services and
resources. AWS recommends that root user credentials should be used to create
another user and all the work should be carried out by the other user.
AWS Identity and Access Management
[ 68 ]
IAM username and password: When you create one or more users in your AWS
account through IAM. They can login to the AWS console by using the username
and password. This username is given by you when you create a user in IAM.
Passwords for these users are created by you as well, you can give permissions to
users to change their passwords.
Multi-factor Authentication (MFA): MFA adds an additional layer of security for
your AWS account. When you login to the AWS console by using your username
and password or by using your email address and password for your root user,
you can opt for MFA as an additional level of authentication. You can setup MFA
on the hardware device or you can have a virtual token as well. AWS
recommends to setup MFA for your account root user and IAM users with higher
permissions, to secure your account and resources. You can configure MFA from
the IAM console.
Access keys (access key ID and secret access key): Access keys are used to sign
requests sent to AWS programmatically through AWS SDKs or API. AWS SDKs
use these access keys to sign requests on your behalf so you don't have to do it
yourself. Alternatively, you can sign these requests manually. These keys are
used through CLIs. You can either issue commands signed using your access
keys or you can store these keys as a configuration setting on your resource
sending requests to AWS. You can opt for access keys for users when you are
creating them or later through the IAM console.
Key pairs: Key pairs constitutes a public key and a private key. The private key is
used to create a digital signature and AWS uses the corresponding public key to
validate this digital signature. These key pairs are used only for Amazon EC2 and
Amazon CloudFront. They are used to access Amazon EC2 instances, for
example, to remotely logging into a Linux instance. For CloudFront, you will use
key pairs to create signed URLs for private content, that is when you want to
distribute content that can be viewed only by selected people and not by
everybody. For EC2, you can create key pairs using the AWS console, CLI, or
API. For CloudFront, key pairs can be created only by using the account root user
and through the Security Credentials Page accessible through the AWS console.
AWS account identifiers: AWS provides two unique IDs for each account that
serves as an account identifier: AWS account ID and a canonical user ID. AWS
account ID is a 12 digit number, such as 9028-1054-8394 that is used for
building ARN. So when you refer to AWS resources in your account such as the
S3 bucket, this account ID helps to distinguish your AWS resources from the
AWS resources of other accounts. The canonical user ID is a long string such as
28783b48a1be76c5f653317e158f0daac1e92667f0e47e8b8a904e03225b81b
5. You would normally use the canonical user ID if you want to access AWS
resources in AWS accounts other than your AWS account.
AWS Identity and Access Management
[ 69 ]
X.509 Certificates: A X.509 certificate is a security device designed to carry a
public key and bind that key to an identity. X.509 certificates are used in public
key cryptography. You can either use the certificate generated by AWS or upload
your own certificate to associate it with your AWS account.
You can view all these security credentials except for EC2 key pairs in the AWS console as
shown in the following figure. The EC2 key pairs can be found on the EC2 dashboard:
Figure 14 - AWS Security Credentials
IAM limitations
IAM has certain limitations for entities and objects. Let us look at the most important
limitations across the most common entities and objects:
Names of all IAM identities and IAM resources can be alphanumeric. They can
include common characters such as plus (+), equal (=), comma (,), period (.), at
(@), underscore (_), and hyphen (-).
Names of IAM identities (users, roles, and groups) must be unique within the
AWS account. So you can't have two groups named DEVELOPERS and
developers in your AWS account.
AWS account ID aliases must be unique across AWS products in your account. It
cannot be a 12 digit number.
AWS Identity and Access Management
[ 70 ]
You can create 100 groups in an AWS account.
You can create 5000 users in an AWS account. AWS recommends the use of
temporary security credentials for adding a large number of users in an AWS
account.
You can create 500 roles in an AWS account.
An IAM user can be a member of up to 10 groups.
An IAM user can be assigned a maximum of 2 access keys.
An AWS account can have a maximum of 1000 customer managed policies.
You can attach a maximum of 10 managed policies to each IAM entity (user,
groups, or roles).
You can store a maximum of 20 server certificates in an AWS account.
You can have up to 100 SAML providers in an AWS account.
A policy name should not exceed 128 characters.
An alias for an AWS account ID should be between 3 and 63 characters.
A username and role name should not exceed 64 characters.
A group name should not exceed 128 characters.
For more information on AWS IAM limitations, please visit http:/​/​docs.​aws.​amazon.​com/
IAM/​latest/​UserGuide/​reference_​iam-​limits.​html.
To increase limits for some of these resources, you can contact AWS support through the
AWS console.
IAM best practices
Lock root account keys: As we know the root account user has access to all resources for all
AWS services by default, so if you have access keys (access key ID and secret access key) for
a root account user, lock them in a secure place and rotate them periodically.
Do not share credentials: AWS gives you multiple ways for your users to interact with
resources in your AWS account, so you would never have a requirement to share
credentials. Create individual users for all access requirements with necessary credentials
and never share credentials with other users.
AWS Identity and Access Management
[ 71 ]
Use managed policies: AWS provides comprehensive sets of policies that cover access
requirements for the most common scenarios. AWS also provides you policies aligned with
job functions. These policies are managed by AWS and they are updated as and when
required so you don't have to worry about your policies getting outdated when new
services or functionalities are introduced.
Use groups to manage users: Groups are an excellent way to manage permissions for your
users and individual IAM users as well. Always add users to groups and assign policies
directly to groups instead of assigning permissions to individual IAM users. Whenever
there is a movement required for an individual user, you can simply move them to the
appropriate group.
Follow the least privilege principle: Whenever you grant permissions, follow the standard
security advice of Least Privilege, that is, if a user does not need to interact with a resource,
do not grant access to that resource. Another example of least privilege is that if a user
needs read-only access for one S3 bucket, access should be given only for that one S3 bucket
and that access should be read-only. Use the IAM Access Advisor feature periodically to
verify if all permissions assigned to a user are used frequently. If you find that a permission
is used rarely or not used at all, revoke it after confirming it is not required to carry on
regular tasks by your IAM user.
Review IAM permissions: Use the IAM summary feature in IAM console to review
permissions assigned for each IAM user. Check their access levels for all resources they are
allowed to interact with. Access level for a policy is categorized as list, read, write, and
permissions management. Review these periodically for all policies. The following image
shows how policies are summarized in three categories:
Figure 15 - AWS IAM policy summaries
AWS Identity and Access Management
[ 72 ]
Enforce strong passwords: Configure your account password policy from Account settings
in your IAM console to enforce strong passwords for all your users, including periodic
password rotation, avoiding reuse of old passwords, minimum length, using alphanumeric
characters, and so on.
Enable MFA: Enable MFA for all IAM users who access AWS resources through the AWS
Management Console. This will provide an additional layer of security for your AWS
resources.
Use roles for applications: For all the applications that run on Amazon EC2 instances, use
roles for providing access to other AWS services. Roles are managed by AWS and they do
not need to store security credentials on EC2 instances. So, even if your EC2 instance is
compromised, your credentials are secure. You can either assign roles to an EC2 instance
when you are launching it or you can also assign roles on the fly, that is, when you need to
access a resource you can assign it.
Use roles for delegation: Whenever you have a requirement for delegation, that is, you
need to allow cross account access, use roles instead of sharing credentials. In general, AWS
recommends using roles instead of using individual IAM users as roles are managed by
AWS and credentials are rotated several times in a day.
Rotate credentials: Ensure that all credentials in your AWS account are rotated periodically.
These credentials include passwords, access keys, key pairs, and so on. This will ensure that
you will limit the abuse of your compromised credentials. If you find that credentials are
not required for a user, remove them. You can find if credentials are used or not by
downloading the credentials report from the AWS console for your AWS account.
Use policy condition: For all policies that allow access, use policy condition element as
much as possible. For example: if you know all the IP addresses that should be accessing
your AWS resource, add them to the policy condition. Similarly, if you know that you want
to allow access only for a limited duration, like for four hours, add that duration to the
policy condition. For high privilege actions, such as deleting an S3 bucket or provisioning
an EC2 or and RDS instance, enforce Multi-Factor Authentication (MFA) by adding it to
the policy condition.
Monitor account activity: IAM integrated with AWS CloudTrail that records all API
activity for your AWS account. Use AWS CloudTrail to monitor all activities in your
account. How many requests where made, how many were allowed and how many were
denied. Monitor what actions were performed on your AWS resources and by whom. You
can identify suspicious activity from CloudTrail logs and take the necessary actions based
on your analysis.
AWS Identity and Access Management
[ 73 ]
Summary
This concludes Chapter 2, AWS Identity and Access Management. IAM is one of the most
important AWS service as it controls access to your AWS resources. We had a detailed view
of Identities including users, groups, and roles. We learnt how to create each of these
identities and what features each of these identities offer to support multiple use cases.
We looked at identity federation to allow access for identities that are managed out of our
AWS account. We learnt about delegation, temporary security credentials, AWS Security
token service and account root user.
We also learnt about policies and permissions. We went through various elements of a
policy. We got to know that AWS managed policies are preferred over inline policies for
most use cases. There are multiple tools and features available to help us write, validate,
and manage our own policies such as IAM policy validator, access advisor, credentials
report, and so on.
Apart from these, we looked at various AWS credentials to support numerous scenarios.
We ran through IAM limitations for various entities and objects. Lastly, we went through
IAM best practices to secure our AWS resources.
In the next chapter, AWS Virtual Private Cloud, we are going to learn how we can secure our
network in AWS. VPC, as it is popularly called, closely, resembles your on-premises
network and has all the components similar to your on-premises network. So, you will find
route tables, subnets, gateways, virtual private connections, and so on available at your
fingertips in AWS as well to design your own virtual private network in AWS. We will
learn how to create a VPC including various components of a VPC, how to configure it to
secure our resources in our VPC, how to connect our network in cloud to our data center
securely, and what security features are available for our VPC.
3
AWS Virtual Private Cloud
Amazon Virtual Private Cloud or VPC, as it is popularly known, is a logically separated,
isolated, and secure virtual network on the cloud, where you provision your infrastructure,
such as Amazon RDS instances and Amazon EC2 instances. It is a core component of
networking services on AWS cloud.
A VPC is dedicated to your AWS account. You can have one or more VPCs in your AWS
account to logically isolate your resources from each other. By default, any resource
provisioned in a VPC is not accessible by the internet unless you allow it through AWS-
provided firewalls. A VPC spans an AWS region.
VPC is essentially your secure private cloud within AWS public cloud. It is specifically
designed for users who require an extra layer of security to protect their resources on the
cloud. It segregates your resources with other resources within your AWS account. You can
define your network topology as per your requirements, such as if you want some of your
resources hidden from public or if you want resources to be accessible from the internet.
Getting the design of your VPC right is absolutely critical for having a secure, fault-tolerant,
and scalable architecture.
It resembles a traditional network in a physical data center in many ways, for example,
having similar components such as subnets, routes, and firewalls; however, it is a software-
defined network that performs the job of data centers, switches, and routers. It is primarily
used to transport huge volume of packets into, out of, and across AWS regions in an
optimized and secured way along with segregating your resources as per their access and
connectivity requirements. And because of these features, VPC does not need most of the
traditional networking and data center gear.
VPC gives you granular control to define what traffic flows in or out of your VPC.
AWS Virtual Private Cloud
[ 75 ]
Chapter overview
In this chapter, we will deep dive into the security of AWS VPC. VPC is the most important
component of networking services in AWS. Networking services are one of the foundation
services on the AWS cloud. A secure network is imperative to ensure security in AWS for
your resources.
We will look at components that make up VPC, such as subnets, security groups, various
gateways, and so on. We will take a deep dive into the AWS VPC features and benefits such
as simplicity, security, multiple connectivity options, and so on.
We will look at the following most popular use cases of VPC that use various security and