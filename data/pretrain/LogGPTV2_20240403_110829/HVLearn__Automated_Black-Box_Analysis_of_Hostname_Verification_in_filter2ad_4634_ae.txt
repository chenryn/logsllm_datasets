is the effect of different values of the depth parameter on the
correctness of the models inferred by HVLearn.
For our ﬁrst experiment, we explore the correlation between
the overall number of membership queries and the corre-
sponding depth parameter. The results of this experiment are
presented in Figure 6 and Table V. In order to ensure that
the experiment ﬁnishes within a reasonable time, we further
reduced the alphabet size only to two symbols. the results
clearly show that the dependence between the depth parameter
and the overall number of queries performed by the learning
algorithm is clearly exponential, and in fact exactly matches
the O(|Σ|d) bound where d is the depth parameter as discussed
in Section IV-D. Notice that when the depth parameter of the
Wp-method is set to a value less than 8, HVLearn fails to
infer any aspect of the target implementation and outputs a
single state DFA model that rejects all hostnames as shown in
Table V.
Result 4: Large values of the Wp-method depth pa-
rameter result in impractical running times while small
values result in incomplete models.
RQ.5: How much improvement is offered by the equivalence
query optimization in HVLearn?
The previous experiment clearly demonstrates that the Wp-
method alone is not efﬁcient enough to accurately analyze a
variety of different templates with HVLearn. Using our full
alphabet, inferring a complete model for the common name
“*.aaa.aaa” requires the depth parameter to be ≥ 8 as shown
in Table V. With our full alphabet of 13 symbols this would
require around 230 queries based on the query complexity of
the algorithm. We ﬁnd that even running the algorithm with a
depth of 6, which is still not able to infer a complete model,
results in more than 68 million queries.
Therefore, our equivalence query optimization is a crucial
component of HVLearn that allows it to produce accurate
DFA models that can be used to evaluate the security and
correctness of the implementations. As we can see from
Table V, using our equivalence query optimization and a
depth parameter of just 1, our system is able to produce a
complete model for a given certiﬁcate template. Running the
same experiment with the alphabet size 15, we found that
HVLearn infers a correct model using only 14,812 queries as
shown in Table IV.
Result 5: EQ optimization is providing, in some cases,
over one order of magnitude improvement on the number
of queries required to infer a complete DFA model.
THE NUMBER OF QUERIES NEEDED TO LEARN THE DFA MODEL OF
CPYTHON CERTIFICATE VERIFICATION FOR DIFFERENT WP-METHOD
TABLE V
DEPTH VALUES
W/o EQ Optimization
#States Complete?
With EQ Optimization
#States Complete?
Wp.
Depth
1
2
3
4
5
6
7
8
9
10
#Queries
7
15
31
63
127
255
511
28,415
56,831
113,663
1
1
1
1
1
1
1
11
11
11










#Queries
226
448
890
1,778
3,554
7,104
14,207
28,415
56,831
113,663
11
11
11
11
11
11
11
11
11
11










0
a
a
5
dot
4
a
dot
dot
dot
3
a
1
a
2
dot
a
dot
6
a dot
(c) MbedTLS,
MatrixSSL, and
CPython
0
a
dot
5
a
dot
3
a
4
dot
dot
6
a
7
dot
a
dot
a
8
a dot
2
a
1
a
(a) OpenSSL
dot
0
a
dot
4
a
dot
dot
3
a
1
a
dot
2
dot
a
dot
5
a dot
(b) GnuTLS, JSSE,
and HttpClient
0
a
a
5
dot
4
a
0
a
6
a
dot
5
3
dot
1
a
dot
dot
dot
2
a
dot
dot
a
7
a dot
6
a dot
a
4
dot
dot
3
a
1
a
dot
a dot
2
a dot
(d) cURL
Fig. 7. SSL/TLS implementations’ DFA and intersection DFA with CN/DNS:
*.a.a and alphabet: {a, .}
(e) Intersection
F. Speciﬁcation Extraction
Let us now examine how we can utilize HVLearn’s spec-
iﬁcation extraction functionality in order to infer a practical
speciﬁcation for the rule corresponding to the common name
“*.a.a”. This rule corresponds to the basic wildcard certiﬁcate
case where a wildcard is found in the leftmost label of the
identiﬁer. Nevertheless, Figure 7 demonstrates that even for
this simple rule, the corresponding DFA models for different
implementations present obvious discrepancies. For example,
DFA model (a) accepts the hostname “.a”, model (b) accepts
the hostname “.a.a”, while model (d) accepts the hostname
“a.a.a.”. Only model (c) perform the most intuitive matching
532
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:20:25 UTC from IEEE Xplore.  Restrictions apply. 
by only accepting hostnames matching the regular expression
“a+.a.a” (here ‘+’ denotes one or more repetitions of the
character ‘a’).
By computing the intersection between all DFA models, we
obtain the intersection DFA model (e). Our ﬁrst observation
is that the intersection DFA has only 6 states and it is thus
very compact as discussed in Section V-F. Furthermore, we
notice that
the intersection DFA is the same as DFA (c)
that corresponds to the most natural implementation of the
corresponding rule. More importantly, even if we compute the
intersection without including model (c), we will still infer
the same speciﬁcation. Thus, we conclude that computing the
intersection of DFA models, even from implementations which
fail in different ways, can often produce compact and natural
speciﬁcations.
Size of inferred models. In general, the actual size of the
inferred models is heavily dependent on the implementation
details of the tested system. However, we expect that the DFA
models inferred by our system will have around l + 2 states,
where l is the length of the common name in the certiﬁcate
template. Indeed, if we consider the inferred DFAs in Figure 7
we can notice that, for the common name “*.a.a” with length
l = 5, the average number of states is 6.9, which is very close
to the expected 7 states. Intuitively, the reasoning behind this
size is that a DFA for matching a string of length l is expected
to have l + 2 states in general where l states are moving the
DFA forward towards the accepting state while the additional
2 states include the initial state and a sink state where the DFA
goes when no match is found.
VI. CASE STUDY OF BUGS
The goal of our study aims at understanding the severity of
potential exploitation by incorrect or unclear hostname check
in certiﬁcate veriﬁcation. We are also interested in ﬁnding any
inconsistency of SSL/TLS implementations’ hostname checks
with what RFC speciﬁes. In this section, we present some
interesting cases we achieved from the result of our experiment
or corner cases we found.
A. Wildcards within A-labels in IDN identiﬁers
RFC 6125 strictly prohibits matching a certiﬁcate with an
identiﬁer containing wildcards embedded within an A-label
of an IDN. For a certiﬁcate with an identiﬁer of the form
“xn--aa*”, it is very difﬁcult to predict the set of unicode
strings that will be matched after they are transformed into the
punycode format due to the complexity of the transformation
process. This inability to easily predict the set of hostnames
which match an A-label with an embedded wildcard often
present avenues for man-in-the-middle attacks.
Hostname veriﬁcation implementations which match iden-
tiﬁers with wildcards embedded within A-labels have been
found recently in the Ruby OpenSSL extension [28] and the
NSS library used by Mozilla Firefox [27]. These issues were
identiﬁed as security vulnerabilities by the developers of the
corresponding products.
Using HVLearn, we identiﬁed that both JSSE and Http-
Client (without using PublicSuffixMatcher in construc-
tor) were also vulnerable to this issue. Our tool also reported
that the other tested libraries/applications were not affected.
B. Confusing order of checking between CN and SAN identi-
ﬁers.
RFC 6125 explicitly speciﬁes that applications should not
attempt to match the hostname with the subject CN when any
subjectAltName identiﬁers are present, regardless of whether
there is a match in subjectAltName as shown in Section II).
We found a number of violations of that rule using HVLearn as
described in Table II. We also found that MatrixSSL exhibits
an interesting behavior in such cases.
More speciﬁcally, MatrixSSL matches the CN identiﬁer
before attempting to match any identiﬁers in the SAN even
if they are present in the certiﬁcate. Note here that the CN
does not have any strong restrictions on its content and may
even contain non-FQDN characters (e.g., UTF-8).
Therefore, it is possible that certain certiﬁcate authorities,
following the instructions in RFC 6125, will not check the CN
in the presence of SAN identiﬁers and will issue a certiﬁcate
regardless of the value in the CN as long as the user is
successfully identiﬁed as the owner of the domains in the SAN
identiﬁer. Albeit natural, this choice will render applications
using MatrixSSL vulnerable to a simple man-in-the-middle
attack.
Speciﬁcally, an attacker can generate a signed certiﬁcate
with a SAN identiﬁer for a domain owned by the attacker, say
“www.attacker.com” and have the CN ﬁeld set to the victim
domain, say “www.bank.com”. MatrixSSL will ﬁrst check
the CN and omit to check the SAN identiﬁers. Therefore,
MatrixSSL will allow the attacker to hijack any domain which
is present in the CN ﬁeld (e.g., www.bank.com).
C. Hijacking IP-based certiﬁcates
Section 2.3.1 of domain names implementation and speci-
ﬁcation in RFC [16] dictates that the preferred name (label)
should only begin with a letter character. However, RFC [17]
changed this restriction to allow the ﬁrst character to be a letter
or a digit. This change introduced valid DNS names which are
identical to IP addresses.
Unfortunately, the fact that IP addresses are also valid DNS
names may open a new avenue for an attack as we describe
below. Notice that, for this attack to become practical, a
numeric Top Level Domain (TLD) in the range 0-255 must
exist, something that is currently unavailable. Nevertheless,
our description should be taken as a precautionary note for
new TLDs.
The attack is based on the fact that certain implementations
ﬁrst check if the given hostname matches the certiﬁcate’s
CN/SAN as a domain name and afterward as IP address.
Therefore, consider an attacker controlling an IP address,
say 80.50.12.33 and holding an IP-based certiﬁcate with that
IP address. Then, assuming that “33” is a valid TLD, the
same entity is automatically in possession of a certiﬁcate for
533
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:20:25 UTC from IEEE Xplore.  Restrictions apply. 
BEHAVIORS OF SSL/TLS IMPLEMENTATIONS FOR X.509 CERTIFICATES
SUPPORT FOR EMBEDDED NULL CHARACTER IN CN/SUBJECTALTNAME
WITH IPV4 ADDRESSES IN CN/SUBJECTALTNAME
IN DIFFERENT SSL/TLS LIBRARIES
TABLE VI
TABLE VII
Certiﬁcate with IPv4 in
SubjectAltName DNS
Subject CN
SSL/TLS
Libs/Apps
OpenSSL
GnuTLS
MbedTLS
MatrixSSL
JSSE
CPython SSL
HttpClient
cURL
app:
accept*:
but allows IPv4-format string in hostname veriﬁcation.
app
accept
accept*
accept
reject
accept
accept
accept
library lets application choose the identiﬁer type.
app
accept
accept*
accept
reject
reject
reject
reject
library/application does not support IP-based certiﬁcation veriﬁcation
the domain name “80.50.12.33” and can perform man-in-the-
middle attacks on that domain!
We evaluated whether this attack is feasible in current
SSL/TLS implementations. Table VI shows the results of our
evaluation. All libraries/applications which are marked with
an accept either in the subject CN or subjectAltName DNS
columns are vulnerable to this attack. Even though this issue
is not currently exploitable, it presents a security risk for these
libraries in case numerical TLDs are introduced in future.
D. Embedded NULL bytes in CN/SAN identiﬁers
In 2008, Kaminsky et al. [53] demonstrated a vulnerabil-
ity in the hostname veriﬁcation implementations of popular
SSL/TLS libraries where early NULL-byte (\0) terminations
in an X.509 CN causes some libraries to recognize different
CN values. In a nutshell, a client accepts certiﬁcate from an
attacker’s subdomain “www.bank.com\0.attacker.com” when
attempting to connect to “www.bank.com” and therefore allow
the attacker to hijack the connection.
In order to defend against this attack, two lines of defense
were followed. The ﬁrst option was to reject any certiﬁcate
containing NULL bytes embedded within any CN/SAN iden-
tiﬁers. The second line was to simply patch the API functions
which retrieve the CN/SAN identiﬁers from the certiﬁcate in
order to recover the entire identiﬁer even in the presence of
embedded NULL bytes.