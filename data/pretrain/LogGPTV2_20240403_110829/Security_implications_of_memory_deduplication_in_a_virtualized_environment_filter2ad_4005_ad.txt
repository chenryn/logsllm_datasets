ideal situation, where we set the entire system to be idle and
leverage 400MB memory to build the channel. Meanwhile,
in a realistic scenario, the bit rate of our covert channel can
achieve more than 40bps. Moreover, our covert channel is
more reliable than L2 cache channel, i.e., with the same
bit rate our channel will introduce much fewer errors and
by properly setting sleeping time our channel can reach
100% correctness. Wu et. al [21] proposed the memory bus
based covert channel, and their transmission rate in Amazon
EC2 cloud can achieve 100bps. However, their approach
relies on the lower level features and therefore has some
hardware limitations, e.g., the atomic instructions it exploits
are platform dependent.
Milo’s et al [22] mentioned the potential threat of covert
channel attacks based on page sharing. However, in their
context, by covert channel, they primarily meant information
leakage rather than two guest OSes collude with each other
to transmit information. Similarly, Suzaki et al. [1] also, in
a few words, described the potential threat of side channel
attacks leveraging memory deduplication. Again, they just
mentioned that attackers can use the channel
to search
for another VM in the cloud. In contrast, we not only
implemented a covert channel to transmit information but
also evaluated it with experiments and conducted a compre-
hensive analysis to verify its feasibility and performance.
Besides memory deduplication, there is another type of
deduplication, commonly known as data deduplication or
storage deduplication [23], [24], [25]. Data deduplication
means that when there are multiple copies of the same
data, only one copy is stored. Data deduplication is a key
technique used by online storage service vendors, such
as Dropbox [26], one of the most popular cloud storage
provider. By storing and transferring only one copy of
redundant data, data deduplication can reduce disk space
consumption signiﬁcantly.
However, recent research efforts [27], [28] have demon-
strated that data deduplication also offers new chances to
attackers. By exploiting two crucial features of the current
data deduplication mechanism: source-based deduplication
and cross-user deduplication, attackers can reveal the content
of other users’ ﬁles; in addition, a similar covert channel can
also be constructed by attackers.
B. Virtualization Detection
In the past several years, many solutions have been
proposed to detect virtualization. However, most of them are
not generic enough. For example, RedPill [29] and Scooby
Doo [30] can only detect VMWare, while the LDT [31]
based approach only works on Windows guest OSes, and
the counter-based mechanism [32] requires a multi-core
processor. In contrast, our approach is more generic, as it
does not rely on any speciﬁc hardware or guest/hypervisor
implementation, and the feature it
leverages—memory
deduplication—is commonly used in various mainstream
hypervisors.
A variety of timing analysis based detection mechanisms
have also been proposed [33], [34]. The basic idea is that,
some instructions (e.g., RDMSR) will be intercepted by
the hypervisor, and hence the execution time will increase
compared to running on a real machine. However, timing
analysis suffers from the difﬁculty of obtaining accurate
timing, since the hypervisor can fool the guest OS [35]. In
contrast, our approach is more stealthy, and thus can hardly
be cheated by the hypervisor.
C. Kernel Integrity
The ultimate goal of kernel integrity monitoring is to
detect rootkits. Traditional rootkit detection tools running
inside the system can be easily defeated when the system is
compromised by attackers. Another type of rootkit detection
tools, which rely on an external PCI card to acquire system
memory, are considered to be more reliable [36], [37], but
recent research [38] has demonstrated that they can still be
fooled by attackers.
A new type of rootkit detector is based on virtualization.
Livewire [3], which presents the idea of virtual machine
introspection, namely inspects a virtual machine from the
hypervisor level. By marking the code section as well as
some other critical data structures read-only, Livewire is
able to ensure kernel code integrity. Inspired by Livewire, in
recent years, more and more researchers have proposed to
build defense tools using this virtual machine introspection
methodology, such as VMwatcher [4] and HIMA [39].
As alluded to earlier, a common problem in these virtual
machine introspection based tools is that, the semantic gap
between the hypervisor and the guest OSes prevents the
hypervisor from monitoring guest OSes efﬁciently. In other
words, to monitor the guest OSes, signiﬁcant efforts are
required; for example, in VMwatcher, the authors wrote a
Windows device driver to interpret Linux ﬁle systems, which
are the root ﬁle system for the guest OS. Worse yet, these
tools highly depend on the internal kernel data structures.
When the internal kernel data structures change, these tools
need to be changed accordingly. Thus,
the maintenance
cost of such tools are quite high. In contrast, although our
solution is also based on virtualization technology, it does
not require any understanding on the guest OS. As long
as we have a clean Linux kernel image ﬁle (vmlinux), we
can extract the read-only section and load it into memory,
and then use the detection technique we described before
to monitor kernel integrity. In other words, our solution is
more generic since it is applicable to the vast majority of
modern Linux kernel versions.
VII. CONCLUSION
Memory page sharing, or memory deduplication, is an
important feature in modern hypervisors, and even in op-
erating systems. Whereas this feature is originally designed
for improving performance, it can be exploited for security
purposes and induce unexpected implications on system
security. In this paper, we have demonstrated that attackers
can build a new covert channel and detect virtual machine
monitors based on memory deduplication. Meanwhile, we
have also showed that defenders can take advantage of this
feature to monitor kernel integrity. We have developed pro-
totypes of the proposed mechanisms and conducted a series
of experiments on Linux/KVM to validate their feasibility
and effectiveness. In our future work, we plan to investigate
effective defense approaches to thwarting information leak-
age and other potential security threats posed by memory
deduplication.
ACKNOWLEDGMENTS
We would like to thank the anonymous reviewers for their
insightful feedback. This work was partially supported by
NSF grant 0901537 and ONR grant N00014-13-1-0088.
REFERENCES
[1] K. Suzaki, K. Iijima, T. Yagi, and C. Artho, “Software side
channel attack on memory deduplication,” SOSP’11 POSTER
Session, 2011.
[2] K. Suzaki, K. Lijima, T. Yagi, and C. Artho, “Memory
deduplication as a threat to the guest os,” in Proceedings of
the Fourth European Workshop on System Security, 2011, pp.
1–6.
[3] T. Garﬁnkel and M. Rosenblum, “A virtual machine
introspection-based architecture for intrusion detection,” in
Proceedings of the Network and Distributed Systems Security
Symposium, 2003, pp. 191–206.
[4] X. Jiang, X. Wang, and D. Xu, “Stealthy malware detection
through vmm-based ”out-of-the-box” semantic view recon-
struction,” in Proceedings of the 14th ACM conference on
Computer and communications security (CCS’07), 2007, pp.
128–138.
[5] B. Dolan-Gavitt, T. Leek, M. Zhivich, J. Gifﬁn, and W. Lee,
“Virtuoso: Narrowing the semantic gap in virtual machine
introspection,” in Proceedings of the IEEE Symposium on
Security and Privacy (S&P’11), 2011, pp. 297–312.
[6] C. Waldspurger, “Memory resource management in vmware
esx server,” in Proceedings of the 5th Symposium on Operat-
ing systems design and implementation (OSDI’02). USENIX,
2002, pp. 181–194.
[7] “New features of xen 4.0,” http://wiki.xen.org/xenwiki/Xen4.
0.
[8] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage, “Hey,
you, get off of my cloud: exploring information leakage
in third-party compute clouds,” in Proceedings of the 16th
ACM conference on Computer and communications security
(CCS’09), 2009, pp. 199–212.
[9] B. Lampson, “A note on the conﬁnement problem,” Commu-
nications of the ACM, vol. 16, no. 10, pp. 613–615, 1973.
[10] Y. Xu, M. Bailey, F. Jahanian, K. Joshi, M. Hiltunen, and
R. Schlichting, “An exploration of l2 cache covert channels
in virtualized environments,” in Proceedings of the 3rd ACM
workshop on Cloud computing security, 2011, pp. 29–40.
[11] “Cuadro cpu benchmark,” http://sourceforge.net/projects/
cuadrocpubenchm.
[12] “Lmbench,” http://www.bitmover.com/lmbench/.
[13] Halﬂife, “Abuse of the linux kernel for fun and proﬁt,” http:
//biblio.l0t3k.net/rootkit/en/P50-05.txt.
[14] M. Jakobsson and Z. Ramzan, Crimeware: understanding new
attacks and defenses. Addison-Wesley Professional, 2008,
p. 261.
[15] Plaguez, “Weakening the linux kernel,” http://www.phrack.
org/issues.html?issue=52&id=18.
[16] Pragmatic, “Complete linux loadable kernel modules,” http:
//www.thc.org/papers/LKM HACKING.html.
[17] R. Riley, X. Jiang, and D. Xu, “Guest-transparent prevention
of kernel rootkits with vmm-based memory shadowing,”
in Proceedings of the 11th Recent Advances in Intrusion
Detection (RAID’08), 2008, pp. 1–20.
[18] Z. Lin, R. Riley, and D. Xu, “Polymorphing software by
randomizing data structure layout,” in Detection of Intrusions
and Malware, and Vulnerability Assessment. Springer, 2009,
pp. 107–126.
[19] Z. Wang, X. Jiang, W. Cui, and X. Wang, “Countering
persistent kernel rootkits through systematic hook discovery,”
in Proceedings of the 11th Recent Advances in Intrusion
Detection (RAID’08), 2008, pp. 21–38.
[20] “How to
improve
kvm performance
adjusting
http://searchenterpriselinux.techtarget.com/tip/
ksm,”
How-to-improve-KVM-performance-by-adjusting-KSM.
by
[21] Z. Wu, Z. Xu, and H. Wang, “Whispers in the hyper-
space: high-speed covert channel attacks in the cloud,” in
Proceedings of the 21st USENIX Security Symposium, 2012,
pp. 159–173.
[22] G. Mił´os, D. Murray, S. Hand, and M. Fetterman, “Satori:
Enlightened page sharing,” in Proceedings of the USENIX
Annual Technical Conference (ATC’09), 2009, pp. 1–14.
[23] C. Dubnicki, L. Gryz, L. Heldt, M. Kaczmarczyk, W. Kilian,
P. Strzelczak, J. Szczepkowski, C. Ungureanu, and M. Wel-
nicki, “Hydrastor: A scalable secondary storage,” in Proc-
cedings of the 7th USENIX Conference on File and Storage
Technologies (FAST’09), 2009, pp. 197–210.
[24] L. You, K. Pollack, and D. Long, “Deep store: An archival
storage system architecture,” in Proceedings of
the IEEE
International Conference on Data Engineering (ICDE’05),
2005, pp. 804–815.
[25] K. Suzaki, T. Yagi, K. Iijima, N. Quynh, C. Artho, and
Y. Watanebe, “Moving from logical sharing of guest os to
physical sharing of deduplication on virtual machine,” in
Proceedings of the 5th USENIX Workshop on Hot Topics in
Security (HotSec’10), 2010.
[26] “Dropbox,” http://www.dropbox.com/.
[27] D. Harnik, B. Pinkas, and A. Shulman-Peleg, “Side channels
in cloud services: Deduplication in cloud storage,” in Pro-
ceedings of the IEEE Symposium on Security and Privacy
(S&P’10), 2010, pp. 40–47.
[28] M. Mulazzani, S. Schrittwieser, M. Leithner, M. Huber, and
E. Weippl, “Dark clouds on the horizon: Using cloud storage
as attack vector and online slack space,” in Proceedings of
the 20th USENIX Security Symposium, 2011, pp. 65–75.
[29] J. Rutkowska, “Redpill,” http://invisiblethings.org/papers/
redpill.html.
[30] T. Klein, “Scooby doo,” http://www.trapkit.de/research/vmm/
scoopydoo/index.html.
[31] D. Quist, V. Smith, and O. Computing, “Detecting the pres-
ence of virtual machines using the local data table,” http:
//www.offensivecomputing.net/ﬁles/active/0/vm.pdf, 2006.
[32] C. Thompson, M. Huntley, and C. Link, “Virtualization
detection: New strategies and their effectiveness,” http:
//www-users.cs.umn.edu/∼cthomp/papers/vmm-detect-2010.
pdf.
[33] T. Garﬁnkel, K. Adams, A. Warﬁeld, and J. Franklin, “Com-
patibility is not
transparency: Vmm detection myths and
realities,” in Proceedings of the 11th USENIX workshop on
Hot topics in operating systems, 2007, pp. 1–6.
[34] J. Franklin, M. Luk, M. Jonathan, A. Seshadri, A. Perrig,
and L. van Doorn, “Towards sound detection of virtual ma-
chines,” Advances in Information Security, Botnet Detection:
Countering the Largest Security Threat, 2008.
[35] M. Athreya, “Subverting linux on-the-ﬂy using hardware
virtualization technology,” Master’s thesis, Georgia Institute
of Technology, 2010.
[36] N. L.Petroni Jr., T. Fraser, J. Molina, and W. A.Arbaugh,
“Copilot - a coprocessor-based kernel runtime integrity mon-
itor,” in Proceedings of the 13th USENIX Security Symposium,
2004, pp. 179–194.
[37] A. Baliga, V. Ganapathy, and L. Iftode, “Detecting kernel-
level rootkits using data structure invariants,” IEEE Transac-
tions on Dependable and Secure Computing, pp. 670–684,
2011.
[38] J. Rutkowska, “Beyond the cpu: Defeating hardware based
http://www.blackhat.com/presentations/
ram acquisition,”
bh-dc-07/Rutkowska/Presentation/bh-dc-07-Rutkowska-up.
pdf.
[39] A. M.Azab, P. Ning, E. C.Sezer, and X. Zhang, “Hima: A
hypervisor-based integrity measurement agent,” in Proceed-
ings of
the 18th ACM Symposium on Operating Systems
Principles (SOSP’09), 2009, pp. 461–470.