### Ideal Scenario and Realistic Performance
In an ideal scenario, we can set the entire system to be idle and utilize 400MB of memory to build the covert channel. In a more realistic setting, our covert channel can achieve a bit rate of over 40bps. Additionally, our covert channel is more reliable than L2 cache channels; it introduces significantly fewer errors at the same bit rate and can reach 100% correctness by properly setting the sleeping time.

Wu et al. [21] proposed a memory bus-based covert channel, which achieved a transmission rate of 100bps in Amazon EC2 cloud environments. However, their approach relies on lower-level features, making it platform-dependent and subject to hardware limitations, such as the use of atomic instructions.

### Covert Channel Threats
Milo et al. [22] highlighted the potential threat of covert channel attacks based on page sharing. In their context, "covert channel" primarily referred to information leakage rather than collaboration between two guest operating systems to transmit data. Similarly, Suzaki et al. [1] briefly described the potential threats of side-channel attacks using memory deduplication, noting that attackers could use these channels to search for other VMs in the cloud. In contrast, we not only implemented a covert channel for information transmission but also conducted experiments and a comprehensive analysis to verify its feasibility and performance.

### Data Deduplication
Besides memory deduplication, there is another type of deduplication known as data deduplication or storage deduplication [23], [24], [25]. This technique involves storing only one copy of redundant data, significantly reducing disk space consumption. Data deduplication is widely used by online storage service providers like Dropbox [26].

Recent research [27], [28] has shown that data deduplication also presents new attack opportunities. By exploiting source-based and cross-user deduplication, attackers can reveal the content of other users' files and construct similar covert channels.

### Virtualization Detection
Many solutions have been proposed to detect virtualization, but most are not generic enough. For example, RedPill [29] and Scooby Doo [30] can only detect VMware, while LDT-based approaches [31] work only on Windows guest OSes, and counter-based mechanisms [32] require multi-core processors. Our approach, however, is more generic, as it does not rely on specific hardware or hypervisor implementations and leverages the commonly used feature of memory deduplication.

Various timing analysis-based detection mechanisms [33], [34] have also been proposed. These methods rely on the increased execution time of intercepted instructions (e.g., RDMSR) when running on a hypervisor. However, accurate timing is challenging due to the hypervisor's ability to deceive the guest OS [35]. In contrast, our approach is more stealthy and less susceptible to deception by the hypervisor.

### Kernel Integrity
The primary goal of kernel integrity monitoring is to detect rootkits. Traditional rootkit detection tools running inside the system can be easily defeated by attackers. External PCI card-based tools [36], [37] are considered more reliable, but recent research [38] has shown that they can still be fooled.

A newer approach to rootkit detection is based on virtualization. Livewire [3] introduced the concept of virtual machine introspection, which inspects a VM from the hypervisor level. By marking code sections and critical data structures as read-only, Livewire ensures kernel code integrity. Inspired by Livewire, researchers have developed tools like VMwatcher [4] and HIMA [39] using virtual machine introspection.

However, these tools face a semantic gap between the hypervisor and guest OSes, requiring significant effort for efficient monitoring. For example, VMwatcher requires a Windows device driver to interpret Linux file systems. Moreover, these tools are highly dependent on internal kernel data structures, necessitating frequent updates. In contrast, our solution, also based on virtualization, does not require understanding the guest OS. We can extract the read-only section from a clean Linux kernel image (vmlinux), load it into memory, and use our detection technique to monitor kernel integrity, making it more generic and applicable to most modern Linux kernel versions.

### Conclusion
Memory page sharing, or memory deduplication, is a crucial feature in modern hypervisors and operating systems. While designed to improve performance, it can be exploited for security purposes, leading to unexpected implications. We have demonstrated that attackers can use memory deduplication to build covert channels and detect virtual machine monitors. Conversely, defenders can leverage this feature to monitor kernel integrity. We have developed prototypes of the proposed mechanisms and conducted experiments on Linux/KVM to validate their feasibility and effectiveness. Future work will focus on developing effective defense strategies against information leakage and other security threats posed by memory deduplication.

### Acknowledgments
We would like to thank the anonymous reviewers for their insightful feedback. This work was partially supported by NSF grant 0901537 and ONR grant N00014-13-1-0088.

### References
[References remain unchanged]