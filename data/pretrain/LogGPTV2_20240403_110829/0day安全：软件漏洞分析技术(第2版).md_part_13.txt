mov var_mein, eax
图2.1.8函数调用的实现
2.2
修改邻接变量
2.2.11
修改邻接变量的原理
通过上一节，我们已经知道了函数调用的细节和栈中数据的分布情况。如图2.1.8所示，
函数的局部变量在栈中一个挨着一个排列。如果这些局部变量中有数组之类的缓冲区，并且程
序中存在数组越界的缺陷，那么越界的数组元素就有可能破坏栈中相邻变量的值，甚至破坏栈
顿中所保存的EBP值、返回地址等重要数据。
题外话：大多数情况下，局部变量在栈中的分布是相邻的，但也有可能出于编译优化
47
---
## Page 73
0
day
等需要而有所例外。具体情况我们需要在动态调试中具体对待，这里出于讲述基本原
安全
理的目的，可以暂时认为局部变量在栈中是紧换在一起的。
：
我们将用个非常简单的例子来说明破坏栈内局部变量对程序的安全性有何种影响。
软
#include 
件
#define PASSWORD*1234567"
漏
int verify_password(char*password)
洞分折
int authenticated;
析
char buffer[8]:// add local buffto be overflowed
技
术
authenticated=strcmp(password,PAsSwORD);
strcpy(buffer,password)://overflowedhere!
（第
return authenticated;
2
版
main()
int valid_flag=0;
charpassword[1024]:
while(1)
printf("please input password:
scanf("&s',password);
valid_flag=verify_password(password);
if(valid_flag)
else
printf("Congratulation! You have passed the
verification!\n");
break;
上述代码是第1章最后一节中Crack实验的验证程序修改而来的。请尤其注意以下两处
修改：
（1）verify_password(函数中的局部变量charbuffer[8]的声明位置。
(2）字符串比较之后的strcpy(buffer,password)。
这两处修改实际上对程序的密码验证功能并没有额外作用，这里加上它们只是为了人为制
造一个栈溢出漏洞。
按照前面对系统栈工作原理的了解，我们不难想象出这段代码执行到intverify_password
48
---
## Page 74
第
（char*password）时的栈顿状态如图2.2.1所示。
2
题外话：这里只是给出了字符数组的缓冲区与局部变量authenticated在栈中的一种分
章
布形式。出于编译优化等目的，变量在栈中的存储顺序可能会有变化，需要在动态调
栈
试时具体问题具体分析。
溢
可以看到，在verify_password函数的栈帧中，局部变量int authenticated恰好位于缓冲区
原
charbuffer[8]的“下方”。
理
与
ESP
实
践
char buffer[0~3](ASCIl:qqqq)
buffer[8]
stack fram of
char buffer[4~7] (ASCIl: qq q null)
verify_password
int authenticated(Ox00000001)
上一个栈帧的EBP
返回地址
bbbbbbb
EBP
形参：password
图2.2.1栈帧布局
authenticated为int类型，在内存中是一个DWORD，占4个字节。所以，如果能够让buffer
数组越界，buffer[8]、buffer[9]、buffer[10]、buffer[11]将写入相邻的变量authenticated中。
观察一下源代码不难发现，authenticated变量的值来源于strcmp函数的返回值，之后会返
回给main函数作为密码验证成功与否的标志变量：当authenticated为0时，表示验证成功：
反之，验证不成功。
如果我们输入的密码超过了7个字符（注意：字符串截断符NULL将占用一个字节），则
越界字符的ASClⅡI码会修改掉authenticated的值。如果这段溢出数据恰好把authenticated改为
0，则程序流程将被改变。本节实验要做的就是研究怎样用非法的超长密码去修改buffer的邻
接变量authenticated从而绕过密码验证程序这样一件有趣的事情。
2.2.2突破密码验证程序
实验环境要求如表2-2-1所示。
表2-2-1实验环境
推荐使用的环境
备注
操作系统
Windows XP SP2
其他Win32操作系统也可进行本实验
编详器
Visual C++ 6.0
如使用其他编译器，需重新调试
编详选项
默认编译选项
VS2003和VS2005中的GS编译选项会使栈溢出实验失败
build版本
debug版本
如使用release版本，则需要重新调试
说明：如果完全采用实验指导所推荐的实验环境，将精确地重现指导中所有的细节：否则需要根据具体情况重新调试。
49
---
## Page 75
day安全：
0
请您在开始实验前务必先确定实验环境是否符合要求。
按照程序的设计思路，只有输入了正确的密码“1234567”之后才能通过验证。程序运行
情况如图2.2.2所示。
软件漏洞分析技术（第2版）
可x
2I4
图2.2.2程序正常运行时的情况
假如我们输入的密码为7个英文字母“q”，按照字符串的序关系“qqqqqqq”>“1234567”，
strcmp应该返回1，即authenticated为1。OllyDbg动态调试的实际内存情况如图2.2.3所示。
Oilyote-
GP
w.vtrcnp
PH
GSSFN
004H159
C9 87818100
oo.strcpy
经过这个strcpy后的栈状态
注意0x71是q
的ASCII码表示
局部变量authenticated
已经被赋值为1
图2.2.3
栈帧布局
50
---
## Page 76
第
也就是说，栈帧数据分布情况如表2-2-2所示。
2
章
表2-2-2栈帧数据分布情况
局部变量名
内存地址
偏移3处的值
偏移2处的值
偏移1处的值
偏移0处的值
栈
buffer(0~3]
0x0012FB18
0x71(q)
0x71 (q′)
0x71 (q)
0x71 (q')
溢
buffer[4~7]
0x0012FB1C
NULL
0x71 (q′)
0x71 ('q)
0x71 (q')
原
authenticated
0x0012FB20
0x00
0x00
0x00
10x0
理
与
在观察内存的时候应当注意“内存数据”与“数值数据”的区别。在我们的调试环境中，
实
内存由低到高分布，您可以简单地把这种情形理解成Win32系统在内存中由低位向高位存储一
践
个4字节的双字（DWORD），但在作为“数值”应用的时候，却是按照由高位字节向低位字节
进行解释。这样一来，在我们的调试环境中，“内存数据”中的DWORD和我们逻辑上使用的
“数值数据”是按字节序逆序过的。
例如，变量authenticated在内存中存储为0x01000000，这个“内存数据”的双字会被计
算机由高位向低位按字节解释成“数值数据”0x00000001。出于便于阅读的目的，OllyDbg
在栈区显示的时候已经将内存中双字的字节序反转了，也就是说，栈区栏显示的是“数值数据”，
而不是原始的“内存数据”，所以，在栈内看数据时，从左向右对于左边地址的偏移依次为3、
2、1、0。请您在实验中注意这一细节。
下面我们试试输入超过7个字符，看看超过buffer[8]边界的数据能不能写进authenticated
变量的数据区。为了便于区分溢出的数据，这次我们输入的密码为“qqqqqqqqrst”（‘q”、‘r"、
‘s'、‘t”的ASCII码相差1)，结果如图2.2.4所示。
X
RUD ESF,8
PIK SS:[1SPA1.E0X
51
KSrTE SS:[E-]
5FA
SP'
00A6169
18 07016
w.sircpy
PEMIC
1483]:553188
REEFEFITE
12E815
rst”和字符串截断符0x00将
authenticated变量覆盖
图2.2.4覆盖邻接变量
51
---
## Page 77
0
day
栈中的情况和我们分析的一样，从输入的第9个字符开始，将依次写入authenticated变量。
安
按照我们的输入“qqqqqqqqrst”，最终authenticated的值应该是字符‘r'、‘s'、‘t’和用于截
全：
断字符串的null所对应的ASCⅡI码0x00747372。
软件漏洞分析技术
这时的栈帧数据如表2-2-3所示。
表2-2-3
栈帧数据
局部变量名
内存地址
偏移3处的值
偏移2处的值
偏移1处的值
偏移0处的值
buffer
0x0012FB18
0x71('q)
0x71(°q°)
0x71 (q)
0x71(q)
0x0012FB1C
0x71 (°q′)
0x71 (q′)
0x71 (q°)
0x71('q')
authenticated被覆盖前
0x0012FB20
0x00
0x00
0x00
10x0
authenticated被覆盖后
0x0012FB20
NULL
0x74 ('t')
0x73 ('s')
0x72(r')
（第
authenticated变量的值来源于strcmp函数的返回值，之后会返回给main函数作为密码验证
2
成功与否的标志变量。当authenticated为0时，表示验证成功：反之，验证不成功。
版
我们已经知道越过数组buffer[8]的边界的后续数据可以改写变量authenticated，那么如果
我们用这段溢出数据恰好把authenticated改为0，是不是就可以直接通过验证了呢？
字符串数据最后都有作为结束标志的NULL（O），当我们输入8个‘g’的时候，按照前边
的分析，buffer所拥有的8个字节将全部被‘q’的ASCII码0x71填满，而字符串的第9个字
符一一作为结尾的NULL将刚好写入内存0x0012FB20处，即下一个双字的低位字节，恰好将
authenticated从0x00000001改成0x00000000，如图2.2.5所示。
FN
D TTR SS:[EBP]
PEP
ISI
7
83 32bit0(1E11HF1)
输入8个字母‘q，第9个字节为字符串截断
符Oxoo，溢出至uthnticated的高位字节
恰好将其由0x00000001修改为0x00000000
图2.2.5修改邻接变量
这时系统栈内的变化过程如表2-2-4所示。
52
---
## Page 78
第
表2-2-4栈帧数据
2
局部变量名
内存地址
偏移3处的值
偏移2处的值
偏移1处的值
偏移0处的值
章
buffer
0x0012FB18
0x71 (q′)
0x71(q')
0x71('g)
0x71(q')
栈溢
0x0012FB1C
0x71 (q′)
0x71 (q')
0x71 (q)
0x71(q)
authenticated被覆盖前
0x0012FB20
0x00
0x00
0x00
0x01
田
authenticated被覆盖后
0x0012FB20
0x00
00x0
00x0
(TINN00X0
原
理
经过上述分析和动态调试，我们知道即使不知道正确的密码“1234567”，只要输入一个为
与
8个字符的字符串，那么字符串中隐藏的第9个截断符NULL就应该能够将authenticated低字
实
践
节中的1覆盖成0，从而绕过验证程序！修改邻接变量成功的界面如图2.2.6所示。
然也是8个字特，
由于其字特串值小于密
能冲破验证。
图2.2.6修改邻接变量成功
题外话：严格说来，并不是任何8个字符的字符串都能冲破上述验证程序。由代码中
的authenticated=strcmp（password，PASSWORD），我们知道authenticated的值来源于字
符串比较函数strcmp的返回值。按照字符串的序关系，当输入的字符串大于“1234567”
时，返回1，这时authenticated在内存中的值为0x00000001，可以用字串的截断符NULL
淹没authenticated的低位字节而突破验证；当输入字符串小于“1234567时（例如，
“0123”等字符串），函数返回-1，这时authenticated在内存中的值按照双字-1的补码
存放，为OxFFFFFFFF，如果这时也输入8个字符的字符串，截断符淹没authenticated
低字节后，其值变为0xFFFFFF00，所以这时是不能冲破验证程序的。图2.2.6所示的
“01234567”输入就属于这种情形。如果您感兴趣，可以尝试进一步调试研究这种情况。