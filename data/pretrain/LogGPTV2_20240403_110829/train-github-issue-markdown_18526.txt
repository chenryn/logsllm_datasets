    Profiling vet on a large corpus shows about >10% time spent in syscalls initiated by
    gcimporter.(*parser).next. Many of these reads are avoidable; there is high import
    overlap across packages, particularly within a given project.
    Concretely, instrumenting calls to Import (in gcimporter.go) and then running 'go vet'
    on camlistore yields these top duplicate imports:
     153 fmt.a
     147 testing.a
     120 io.a
     119 strings.a
     113 os.a
     108 bytes.a
      99 time.a
      97 errors.a
      82 io/ioutil.a
      80 log.a
      76 sync.a
      70 strconv.a
      64 net/http.a
      56 path/filepath.a
      51 camlistore.org/pkg/blob.a
      44 runtime.a
      39 sort.a
      39 flag.a
      35 reflect.a
      35 net/url.a
    These 20 account for 1627 of the 2750 import reads.
    Hacking in a quick LRU that simply caches the raw data in the files cuts 'go vet' user
    time for camlistore by ~10%. I'm not sure that that is the right long-term approach,
    though.