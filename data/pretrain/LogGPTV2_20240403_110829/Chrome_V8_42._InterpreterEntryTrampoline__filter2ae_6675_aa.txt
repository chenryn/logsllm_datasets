# 《Chrome V8 源码》42. InterpreterEntryTrampoline 与优化编译
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 1 介绍
InterpreterEntryTrampoline 属于 V8 ignition，负责为 JSFunction
函数构建堆栈并执行该函数，也负责启动优化编译功能 Runtime_CompileOptimized_Concurrent。之前的文章讲过
InterpreterEntryTrampoline 与解释执行，而本文重点介绍 InterpreterEntryTrampoline 与
Runtime_CompileOptimized_Concurrent 之间的调用关系以及重要数据结构。
## 2 InterpreterEntryTrampoline 源码
源码如下：
    1.  void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler* masm) {
    2.  Register closure = rdi;
    3.  Register feedback_vector = rbx;
    4.  __ LoadTaggedPointerField(
    5.      rax, FieldOperand(closure, JSFunction::kSharedFunctionInfoOffset));
    6.  __ LoadTaggedPointerField(
    7.      kInterpreterBytecodeArrayRegister,
    8.      FieldOperand(rax, SharedFunctionInfo::kFunctionDataOffset));
    9.  GetSharedFunctionInfoBytecode(masm, kInterpreterBytecodeArrayRegister,
    10.                                 kScratchRegister);
    11.   Label compile_lazy;
    12.   __ CmpObjectType(kInterpreterBytecodeArrayRegister, BYTECODE_ARRAY_TYPE, rax);
    13.   __ j(not_equal, &compile_lazy);
    14.   __ LoadTaggedPointerField(
    15.       feedback_vector, FieldOperand(closure, JSFunction::kFeedbackCellOffset));
    16.   __ LoadTaggedPointerField(feedback_vector,
    17.                             FieldOperand(feedback_vector, Cell::kValueOffset));
    18.   Label push_stack_frame;
    19.   __ LoadTaggedPointerField(
    20.       rcx, FieldOperand(feedback_vector, HeapObject::kMapOffset));
    21.   __ CmpInstanceType(rcx, FEEDBACK_VECTOR_TYPE);
    22.   __ j(not_equal, &push_stack_frame);
    23.   Register optimized_code_entry = rcx;
    24.   __ LoadAnyTaggedField(
    25.       optimized_code_entry,
    26.       FieldOperand(feedback_vector,
    27.                    FeedbackVector::kOptimizedCodeWeakOrSmiOffset));
    28.   Label optimized_code_slot_not_empty;
    29.   __ Cmp(optimized_code_entry, Smi::FromEnum(OptimizationMarker::kNone));
    30.   __ j(not_equal, &optimized_code_slot_not_empty);
    31.   Label not_optimized;
    32.   __ bind(&not_optimized);
    33.   __ incl(
    34.       FieldOperand(feedback_vector, FeedbackVector::kInvocationCountOffset));
    35.  /*解释执行，参见之前的文章*/
    36.  /*解释执行，参见之前的文章*/
    37.  /*解释执行，参见之前的文章*/
    38.    __ bind(&optimized_code_slot_not_empty);
    39.    Label maybe_has_optimized_code;
    40.    __ JumpIfNotSmi(optimized_code_entry, &maybe_has_optimized_code);
    41.    MaybeOptimizeCode(masm, feedback_vector, optimized_code_entry);
    42.    __ jmp(&not_optimized);
    43.    __ bind(&maybe_has_optimized_code);
    44.    __ LoadWeakValue(optimized_code_entry, &not_optimized);
    45.    TailCallOptimizedCodeSlot(masm, optimized_code_entry, r11, r15);
    46.    __ bind(&stack_overflow);
    47.    __ CallRuntime(Runtime::kThrowStackOverflow);
    48.    __ int3();  // Should not return.
    49.  }
上述代码中，第 2 行代码 closure 是 JSFunction 函数地址；  
第 4 行代码从 JSFunction 中获取 SharedFunction 函数地址，并保存到 rax 寄存器；  
第 6-9 行代码从 SharedFunction 中获取 BytecodeArray 地址，并保存到
kInterpreterBytecodeArrayRegister 寄存器；  
第 12 行代码判断 kInterpreterBytecodeArrayRegister 寄存器的值是 BytecodeArray 或者
compile_lazy;  
 **提示：** JavaScript源码编译时，如果该 SharedFunciton 不是最外层函数，而是一个函数调用，该 SharedFunction
被标记为 compile_lazy，那么 kInterpreterBytecodeArrayRegister 的值是 compile_lazy。  
第 14-16 行代码加载 feedback_vector；feedback_vector 保存当前 SharedFunction 的优化信息；  
第 19-25 行代码获取 feedback_vector 的 Map，并判断当前 SharedFunction 是否已被 TurboFan 编译了；  
第 33 行代码 feedback_vector 的值增加1，记录当前 SharedFunction 的执行次数，当 feedback_vector
值达到一个阈值时会触发 TurboFan 编译该 SharedFunction，即优化编译；  
第 34-37 行代码省略了解释执行 BytecodeArray 的过程，参见之前的文章；  
第 41 行代码启动优化编译器，生成优化代码入口 optimized_code_entry；  
第 45 行代码执行 optimized_code_entry。  
MaybeOptimizeCode() 负责启动优化编译，源码如下：
    1.  static void MaybeOptimizeCode(MacroAssembler* masm, Register feedback_vector,
    2.                                Register optimization_marker) {
    3.    DCHECK(!AreAliased(feedback_vector, rdx, rdi, optimization_marker));
    4.    TailCallRuntimeIfMarkerEquals(masm, optimization_marker,
    5.                                  OptimizationMarker::kLogFirstExecution,
    6.                                  Runtime::kFunctionFirstExecution);
    7.    TailCallRuntimeIfMarkerEquals(masm, optimization_marker,
    8.                                  OptimizationMarker::kCompileOptimized,
    9.                                  Runtime::kCompileOptimized_NotConcurrent);
    10.    TailCallRuntimeIfMarkerEquals(masm, optimization_marker,
    11.                                  OptimizationMarker::kCompileOptimizedConcurrent,
    12.                                  Runtime::kCompileOptimized_Concurrent);
    13.    if (FLAG_debug_code) {
    14.      __ SmiCompare(optimization_marker,
    15.                    Smi::FromEnum(OptimizationMarker::kInOptimizationQueue));
    16.      __ Assert(equal, AbortReason::kExpectedOptimizationSentinel);
    17.    }
    18.  }
上述代码中，第 7-12 行根据 optimization_marker 的值决定使用 CompileOptimized_NotConcurrent 或
CompileOptimized_Concurrent 编译方法。这两种方法的区别是 NotConcurrent 和
Concurrent，但它们的编译流程一样。
## 3 优化编译
Concurrent 和 NotConcurrent 的入口函数如下：
     RUNTIME_FUNCTION(Runtime_CompileOptimized_Concurrent) {
      HandleScope scope(isolate);
      DCHECK_EQ(1, args.length());
      CONVERT_ARG_HANDLE_CHECKED(JSFunction, function, 0);
      StackLimitCheck check(isolate);
      if (check.JsHasOverflowed(kStackSpaceRequiredForCompilation * KB)) {
        return isolate->StackOverflow();
      }
      if (!Compiler::CompileOptimized(function, ConcurrencyMode::kConcurrent)) {
        return ReadOnlyRoots(isolate).exception();
      }
      DCHECK(function->is_compiled());
      return function->code();
    }
    //分隔线............................
    RUNTIME_FUNCTION(Runtime_CompileOptimized_NotConcurrent) {
      HandleScope scope(isolate);
      DCHECK_EQ(1, args.length());
      CONVERT_ARG_HANDLE_CHECKED(JSFunction, function, 0);
      StackLimitCheck check(isolate);
      if (check.JsHasOverflowed(kStackSpaceRequiredForCompilation * KB)) {
        return isolate->StackOverflow();
      }
      if (!Compiler::CompileOptimized(function, ConcurrencyMode::kNotConcurrent)) {
        return ReadOnlyRoots(isolate).exception();
      }
      DCHECK(function->is_compiled());
      return function->code();
    }
上述两部分代码都会调用 Compiler::CompileOptimized()，它是编译的入口函数，该函数中调用 GetOptimizedCode()
以完成编译工作，GetOptimizedCode 源码如下：
    1.  MaybeHandle GetOptimizedCode(Handle function,
    2.                                     ConcurrencyMode mode,
    3.                                     BailoutId osr_offset = BailoutId::None(),