如果你将一个函数c作为另一个函数f的参数传入，那么你要注意两种情况：
函数f签名声明需要传入的参数。f可能会提供多个参数，而c可以决定使用这些参数中的哪几个。
c的实际签名，它有可能支持可选参数。
如果同时遇到了这两种情况，你就有可能会得到非预期的结果：c中可能定义了你不知道的可选参数，那么f传入多余参数就有可能被错误地解析。
我们来看一个例子，数组map()方法（详情可见18.12.2“转化方法”）的参数通常是只有一个参数的函数：
而parsrInt()正好是可以传入一个参数的函数（可见11.7.4“通过parseInt()得到整数”）：
你可能会错误地认为map()方法只提供一个参数，而parseInt也仅接受一个参数。看到下面的结果你可能会觉得惊讶：
因为map()期望函数有如下签名：
而parseInt()的签名是：
因此，map()不仅仅传入了string，也传入了radix（通过index参数）。这意味着上面的数组被做了如下的处理：
总之，当你不明确函数或者方法的调用方式时，你需要格外注意。一旦你要使用这些函数，你就要格外明确函数接受哪些参数，同时你会传入哪些参数。这是我们通过回调来实现的方式：
15.9 具名参数
在编程语言中调用函数或者方式时，你必须将实参（由调用者指定）和形参（函数定义中指明）做映射。通常有两种方式：
通过位置来映射的位置型参数。第一个实参对应第一个形参，第二个实参对应第二个形参，以此类推。
具名参数则通过名称（标识）来做变量的映射。在一个函数的定义中名称会与形参做关联，在函数调用中，名称则与实参做关联。只要参数的名称正确，你不需要关心参数名的顺序。
具名参数有两个优点：它们对函数的参数进行了描述，同时它们对于处理可选参数的场景也很有用。我先来解释一下这些优势，然后我们来看看如何通过对象字面量模拟具名参数。
15.9.1 具名参数可作为描述信息
一旦一个函数有了超过一个参数，你可能会困惑每一个参数的用途。例如，假设我们有一个函数selectEntries()，它会从数据中返回一个入口。我们用下面的方式来进行调用：
这里的数字都是表示什么？相比之下，在Python中，有对具名参数的支持，这使得你可以简单地认出每个参数的作用：
15.9.2 可选的具名参数
对于可选的位置型参数，只有当它们被放置在参数的最后时才可能正确地工作。否则，你就要通过对中间的参数传入例如null的值来保持每个参数所在位置的正确性。而对于可选的具名参数，就不存在这一问题。你可以省略其中的任意一个参数。我们来看一些例子：
15.9.3 在JavaScript中模拟具名参数
JavaScript中并不像Python或是其他的语言原生支持具名参数。但是我们有一个很有效的模拟方案：通过对象字面量来命名参数，并将对象作为一个实参传入函数。使用了这种方式之后，对selectEntries()的调用就会像这样：
函数接受了一个包含start,end,step属性的对象，而你可以省略其中任意一个属性：
在selectEntries()中你可以这样实现：
你也可以将位置型参数和具名参数相结合。就像是下面的这种形式：
注解：
 在JavaScript中，具名参数的形式往往被称为选项或是选项对象（例如jQuery文档中就这样描述）。
第16章 变量：作用域、环境和闭包
本章我们会讨论如何使用变量，之后会深入讨论它们是如何工作的（环境、闭包等）。
16.1 定义变量
在JavaScript中，在使用变量前，你可以通过var语句来定义变量：
你也可以将赋值语句与变量定义语句合并进行变量的初始化：
一个未初始化的变量的值是undefined：
16.2 背景知识：静态性和动态性
你可以从两个角度来看一个程序：
（1）静态性（或词法性）
你可以无须执行程序而只从程序源码的角度来看程序的工作。我们看下面的代码，我们可以肯定函数g被函数f包围在内部：
描述性的词法就像是静态声明，因为它们都涉及了程序的词法（单词、源码）。
（2）动态性
它表示一个程序在运行期所表现出来的特性。我们看看下面的代码：
当我们调用f()，它会调用g()。在执行期间，g被f调用代表了一种动态的关系。
16.3 背景知识：变量的作用域
为了学习本章后面的内容，你需要理解以下的概念：
（1）变量的作用域
变量的作用域是指变量在何处可以被访问到。例如：
这里，x的直接作用域是函数foo()。
（2）词法作用域
JavaScript中的变量都是有词法作用域的，因此一个程序的静态结构决定了一个变量的作用域（这个作用域并不会被函数从哪里调用等影响）。
（3）嵌套作用域
如果在一个变量的直接作用域中嵌套有多个作用域，那么这个变量在所有的这些作用域中都可以被访问：
arg的直接作用域是foo()，但是它同样可以在嵌套的作用域bar()中被访问。我们说嵌套，foo()是外部的作用域，而bar()是内部作用域。
（4）覆盖
如果在一个作用域中声明了一个与外层作用域同名的变量，那么在这个内部作用域以及其内部的所有作用域中将会访问不到外面的变量。而内部的变量的变化并不影响外部的变量，当离开内部作用域，外部变量又可以被访问了。
在函数f()中，全局的x被本地x所覆盖。
16.4 变量以函数为作用域
大多数主流语言都是块级作用域的：变量“存活”于最近的代码块中。我们来看看Java的例子：
上面的代码中，变量foo只在包含它的代码块中可以被访问。如果我们试图在代码块之后访问它，我们会得到一个编译错误。
不同的是，JavaScript的变量是函数级作用域的：只有函数可以产生新的作用域；代码块在作用域中是不起作用的。例如：
换句话说，foo在main()中都是可以被访问到的，而不仅仅是在块中。
16.5 变量声明的提前
JavaScript会提前所有的变量声明，它会把所有的声明移到直接作用域的最前面。很明显当我们试图在变量声明前来访问它会发生什么：
我们可以看到变量bar在函数f()的第一行已经存在了，只是还没有值；因此，被提前的是变量的声明，而非变量的复制。实际上，JavaScript中是这样执行f()的：
如果你定义一个已经被定义过的变量，那么什么也不会发生（包括变量的值，也不会变化）：
函数的声明也会被提前，但是与变量截然不同，函数声明会被整体提前，而不仅仅是变量的创建的那部分(详情可见15.4“函数提升”)。
提示：
 最佳实践：注意提前的变量，但也不必产生恐惧
在一些JavaScript的风格规范中建议你将变量的声明放在函数的开始，以避免因变量提前产生的误导。如果你的函数相对比较小(也应当足够小)，那么你可以不遵循这一规则，将变量声明在它们所使用的位置的周围（例如一个for循环）。这对于代码的封装更有效。当然，这种封装的方式只是一种概念，因为函数提升依旧会产生。
陷阱：赋值给一个未定义的变量会产生全局变量
在非严格模式中，不通过var将一个值赋值给一个变量的时候会产生一个全局的变量：
而在严格模式中，这会导致一个错误：
16.6 通过IIFE引入新的作用域
我们往往会通过引入一个新的作用域来限制变量的生命周期。这么做的一个适用场景是一个if语句的“执行”部分：它只在条件满足的情况下才执行;而如果你要引入辅助的变量的话，你可能并不希望将这个变量暴露给外部的作用域：
如果你想为代码的“执行”块引入一个新的作用域，你可以定义一个函数并立即执行它。这是一种对块作用域的模拟方式：
这是JavaScript中的一种常见的模式。Ben Alman将它命名为立即执行的函数表达式（http://bit.ly/ i-ife）（IIFE，发音为“iffy”）。通常来说，一个IIFE看起来是这样的：
关于IIFE，我们有一些要注意的：
（1）它是立即执行的
函数的结束大括号后面的括号是用来立即调用函数的。函数体会立即执行。
（2）它必须是一个表达式
如果一个语句以function关键词开头，解析器会认为它是一个函数定义（可见7.3“表达式与语句”）。但是一个函数声明并不会立即执行。因此，我们在语句前加了一个左括号告诉解析器function关键词是处于一个函数表达式的开头。在括号中，只存在表达式。
（3）别忘了后面的分号
如果在两个IIFE之间遗漏了分号，你的代码可能会出现问题：
上面的代码会被翻译为一个函数调用——前一个IIFE（包含它的括号）是被调用的函数，而后一个IIFE则作为变量。
注解：
 IIFE会带来成本（认知和性能上面的考虑），因此，事实上在if语句中它很少被使用。上面的例子仅仅是教学例子。
16.6.1 IIFE变体：前缀运算符
你可以通过前缀运算符来强制执行一个表达式。例如，你可以用逻辑非：
或者是void运算符（可见9.7.3“void运算符”）：
使用前缀运算符的好处是忘了分号结尾并不会造成任何问题。
16.6.2 IIFE变体：预内置表达式上下文
要注意的是，为IIFE强制执行表达式上下文并不是必需的，如果已经在一个表达式的上下文里面，那么你不必使用括号或者前缀操作符。例如：
上面的例子中，有两个不同的变量都叫File。其中一个只能在IIFE中被访问，另一个定义在第一行的变量，则被赋予了IIFE的返回值。
16.6.3 IIFE变体：传参的IIFE
你可以使用参数的方式在IIFE的内部定义变量：
这就类似于：
16.6.4 IIFE的应用
IIFE使得你可以获取函数中的私有数据。你不必定义全局变量也可以严密地将函数本身的逻辑包装在一起。这样就可以避免对全局命名空间的污染：
IIFE的其他使用场景在本书中也有描述：
避免全局变量，隐藏全局作用域的变量（详情可以参考16.7.1“最佳实践：避免创建全局变量”）。
创建新的环境，避免共享（详情可见16.10.2“陷阱：不经意间的环境共用”）。
保持全局的数据对于构造器的数据相对独立（可参见17.12.4小节的“保持全局数据对所有构造函数私有”）。
将全局数据附加到单例对象上（详情可参见17.12.4小节的“把私有数据存储于一个单例对象”）。
将全局数据附加到方法中（同样可参见17.12.4小节的“把全局数据放在一个方法中”）。
16.7 全局变量
包含整个程序的作用域叫作全局作用域或是程序作用域。这就是进入你编写的脚本时（Web页面上面的或是.js文件）所在的作用域。在全局作用域中，你可以定义函数来创建嵌套的作用域。每一个作用域都可以访问它内部以及其父作用域中的变量。由于全局作用域包含了所有的作用域，它里面的变量便可以在任何地方被访问到：
16.7.1 最佳实践：避免创建全局变量
全局作用域有两大劣势。首先，程序中依赖全局作用域的代码片段会产生一些边缘效应，程序可能不够健壮，会产生一些不可预期的效果，重用性更低。
其次，一个Web页面上面的所有JavaScript都共享一个相同的全局作用域以及其全局变量：代码、内置的插件、分析代码、社交媒体按钮等。这意味着可能会产生名字的冲突的问题。这也是为什么要将变量隐藏于全局作用域之外的原因。例如，你不应该这么做：
变量tmp变成了一个全局的变量，因为它是定义在一个全局的作用域中。但它并没有在全局作用域中使用。因此，我们可以使用IIFE（详情可见16.6“通过IIFE引入新的作用域”）来将它隐藏在一个作用域中：
16.7.2 模块系统可以减少全局变量的引入
庆幸的是，大多数模块系统（详情可见31.1“模块系统”）解决了全局变量的问题，因为模块不会通过全局作用域提供接口，并且每一个模块都为它其中的模块全局变量提供了自己的作用域。
16.8 全局对象
ECMAScript规范中定义使用内部数据结构环境来存储变量（可见16.9“环境：变量的管理”）。JavaScript有一些不常用的特性可以通过一个对象来为全局的变量创建环境，这个对象就叫作全局对象。全局对象可以用来创建、读取或是修改全局变量。在全局作用域中，this指向全局对象：
要注意的是，全局对象有原型。如果你要罗列它所有（自己以及继承）的属性，你可以使用类似getAllPropertyNames()的函数（详情可见17.5.2“列出所有的属性键”）：
JavaScript之父Brendan Eich认为全局对象的设计是他“最大的遗憾”。它影响了性能，使得变量的作用域的实现变得更为复杂，并且导致模块化代码的减少。
16.8.1 跨平台兼容
浏览器和Node.js都有一些全局的变量可以引用全局的对象。不幸的是，它们是不一样的：
浏览器中的全局对象是window，它是文档对象模型（DOM）的一部分，而非ECMAScript 5的一部分。在每一个帧或者window中，都有一个全局对象。
Node.js中的全局对象是global，它是一个Node.js专属的变量。每一个模块都有它自己的作用域，在这些作用域中this指向了这个作用域的对象。因此，this和global在模块中是不同的。
在两个平台上，this都指向全局对象，但是这仅仅是在全局作用域中。而这在Node.js中是不可能的。如果你想用一种跨平台的方式来访问全局对象，你可以像下面这样做：
接下来，我会用window来指向全局对象，但是在跨平台的代码中，你应该用上面的形式，并用glob来做。
16.8.2 window的使用场景
这一节将会描述使用window来访问全局对象的场景。总的来说，我们有一个准则：你还是要尽可能避免这么做。
场景一：创建全局变量
代码前面的window前缀直观地表示了代码指向了一个全局变量而非一个本地变量：
然而，这使得你的程序变得脆弱。如果你将foo从全局作用域中移到另一个作用域中，可能会使得程序停止工作：
因此，最好将foo用一个变量来进行引用，而不是作为window的属性。如果你想让foo一看就知道是一个全局或者是类全局的变量，你可以给它加上一个例如g_的前缀：
场景二：内置插件
我不推荐通过window来引用一个全局变量。它们本身的名字就很好区分，因此你将它们标示为全局并没有什么意义。并且添加window的前缀会很混乱：
场景三：风格检查器
当你使用例如JSLint或是JSHint这样的风格校验工具时，使用window意味着，如果你在当前文件中引用了一个并不定义在该文件中的全局变量，你将不会得到错误提示。然而，这两个工具都会提供方式告诉它们这样的变量并避免这样的错误（详情可以在它们的文档中搜索“全局变量”）。
场景四：检测一个全局变量是否存在
这不是一个常用的场景，但是对于浏览器shim或是polyfill来说（详情可见30.1“Shim和Polyfill”）通常都需要检查一个全局的变量someVariable是否存在，这种情况下，window就起作用了：
这是一种安全的检测方式，而下面的语句会在someVariable未被定义时抛出异常：
另外还有两种通过window来检查的方式；它们大致相同，但是更为明确：
检查一个变量是否存在（并是否有值）的常用方法是通过typeof（详情可见9.8.1“typeof：判断原始值”）：
场景五：在全局作用域中创建内容
借助window你可以向全局作用域添加新的内容（即便是在一个子作用域中），并且这一方式是条件性的：
当你处于全局作用域，通常将变量添加到全局作用域的最好方式是使用var。相比之下，使用window结合响应的条件判断更为清晰。
16.9 环境：变量的管理
提示：
 环境是一个比较高级的话题。它们是JavaScript内部实现的一部分。在学习这一节之后相信你会对变量的工作原理有更深的理解。
当程序运行到变量所在的作用域时，变量被创建。这时它们需要一个存储的空间。而JavaScript中提供存储空间的数据结构就被称为环境。它将变量名与变量的值做映射。其结构与JavaScript对象非常类似。有时候在你离开作用域时，环境还依然会存在。因此，它们是被存储于堆中，而非栈。
变量有两种传递的方式，如果有必要，有两种维度。
（1）动态维度：调用函数
每当一个函数被调用，它就需要给它的参数和变量准备新的存储空间。当调用结束之后，空间通常会被释放。我们来看看下面的示例函数的实现。它进行了多次的自递归调用，并且每一次，它都为n创建新的存储空间：
（2）词法维度：与外部作用域进行关联
无论一个函数被调用了多少次，它总要访问它自己（最新）的本地变量和外部作用域的变量。例如下面的doNTimes函数，它内部有一个辅助函数doNTimesRec，当doNTimesRec多次调用自己的时候，每一次调用都会创建一个新的环境。然而，doNTimesRec在这多次调用中却一直与doNTimes的环境保持着联系（类似于所有的函数都共享了同一个全局环境）。在第一行中，doNTimesRec就需要通过这个联系来访问action。
对于这两个维度，我们做一下总结。
（1）动态维度：执行上下文的栈
函数每调用一次，就会创建一个新的环境将（变量和参数的）标识符和变量做映射。对于递归的情况，执行上下文，即环境的引用是在栈中进行管理的。这里的栈对应了调用栈。
（2）词法维度：环境链
为了支持这一维度，JavaScript会通过内部属性[[Scope]]来记录函数的作用域。在函数调用时，JavaScript会为这个函数所在的新作用域创建一个环境。这个环境有一个外层域(outer)，它通过[[Scope]]创建并指向了外部作用域的环境。因此，在JavaScript中一直存在一个环境链，它以当前环境为起点，连接了一层外部的环境。每一个环境链最终会在全局环境（它是所有函数初始化调用的作用域）终结。而全局环境的外部环境指向了null。
为了识别环境中的标识，整个环境链会从当前环境开始被遍历。
我们来看一个例子：
图16.1展示了上面代码执行时的过程：