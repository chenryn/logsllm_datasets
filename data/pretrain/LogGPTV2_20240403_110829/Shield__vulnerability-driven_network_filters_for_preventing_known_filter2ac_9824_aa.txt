**Title: Shield: Vulnerability-Driven Network Filters for Preventing Known Vulnerability Exploits**

**Authors: Helen J. Wang, Chuanxiong Guo, Daniel R. Simon, and Alf Zugenmaier**

**Affiliation: Microsoft Research**

**Email: {helenw, t-chuguo, dansimon, alfz}@microsoft.com**

**Abstract:**
Software patching has proven ineffective as a first-line defense against large-scale worm attacks, even when patches are available for known vulnerabilities. Users often delay or avoid applying patches due to concerns about reliability and disruption. To address this issue, we propose Shield, a network-based first-line defense that uses vulnerability-specific, exploit-generic filters. These filters, installed in end systems upon vulnerability discovery but before patch application, examine and correct incoming or outgoing traffic that exploits the vulnerability. Shields are less disruptive, easier to test, and more reliable than traditional patches. Additionally, they are resilient to polymorphic or metamorphic variations of exploits.

In this paper, we present a prototype implementation of the Shield framework, which operates above the transport layer. We have developed a safe and restrictive language to describe vulnerabilities as partial state machines of the vulnerable application. Our evaluation demonstrates Shield's low false positive rate and minimal impact on application throughput. Analysis of a sample set of known vulnerabilities suggests that Shield can prevent exploitation of a significant fraction of the most dangerous ones.

**Categories and Subject Descriptors:**
D.4.6 [Security and Protection]: Information flow controls

**General Terms:**
Security, Design, Languages, Performance

**Keywords:**
Worm Defense, Patching, Vulnerability Signature, Network Filter, Generic Protocol Analyzer

**Permission to Use:**
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.

**SIGCOMM’04, Aug. 30–Sept. 3, 2004, Portland, Oregon, USA.**
Copyright 2004 ACM 1-58113-862-8/04/0008 ...$5.00.

**1. Introduction:**
One of the most pressing security challenges for administrators of networked computer systems is the threat of remote attacks over the Internet, exploiting vulnerabilities in running software. Self-propagating attacks, or "worms," are particularly damaging, as they exploit vulnerabilities to take control of hosts and spread to other vulnerable hosts.

The primary defense against such attacks is to patch the vulnerabilities before they can be exploited. However, experience shows that administrators often delay or neglect to install patches, even when they are available. This has led to widespread damage from worms like CodeRed, Slammer, MSBlast, and Sasser, which exploited known vulnerabilities.

Several reasons contribute to the reluctance to install patches:
- **Disruption:** Patch installation often requires system reboots, causing service disruptions.
- **Unreliability:** Patches are released quickly with limited testing, leading to potential side effects.
- **Irreversibility:** Once applied, patches are difficult to remove, increasing the risk.
- **Unawareness:** Administrators may miss or ignore patch announcements.

To mitigate these issues, methods are being explored to address vulnerabilities without immediate patching. For example, firewalls can block traffic to vulnerable ports, but this approach is crude and can prevent legitimate application functionality. Exploit-signature-based firewalls are more flexible but can be evaded by polymorphic or metamorphic variations of known exploits.

In this paper, we propose Shield, an intermediate "patch" in the network stack that filters traffic to prevent exploitation of vulnerabilities. Shield operates at the application protocol layer, examining and correcting traffic based on vulnerability signatures. Unlike software patches, shields are deployed in the network stack, making them less likely to cause unforeseen side effects and easier to test and reverse.

**2. Vulnerability Modeling and Shield Usage:**
A key aspect of Shield is the method of modeling and expressing vulnerability signatures. A Shield vulnerability signature specifies the sequences of application messages and payload characteristics that lead to a remote exploit. For example, the Slammer worm exploits a UDP packet at port 1434 with a size exceeding the buffer limit.

We have developed a taxonomy for modeling vulnerabilities, considering each application as a finite state machine. The protocol state machine, which overlays the application state machine, is used to define the pre-vulnerability state and the vulnerability state machine. A Shield policy includes both the vulnerability signature and the actions to take upon recognizing an exploit.

When a new vulnerability is discovered, the vendor creates a Shield policy and distributes it to users. Shield intercepts and examines the application's traffic, walking through the vulnerability state machine and taking specified actions to protect against exploits.

Shields can protect against malicious incoming traffic and filter outgoing traffic that triggers malicious responses, providing a robust first-line defense against known vulnerabilities.