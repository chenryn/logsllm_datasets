网上很多解决方案都是说apktool工具的版本太旧了，用最新版本，但是这里可以看一下apktool.jar的版本，如下所示：
这个版本是最新的了。反编译失败的原因是应用开发公司知道了apktool工具反编译的厉害，所以去看apktool的源码，分析得到漏洞，然后进行apk的一些混淆，防止反编译。因此，防护和破解真的是无休止的战争。幸好apktool的代码也更新得比较快，所以会解决这些漏洞，但是在破解的时候遇到这些问题，不能一味地等待apktool的更新，既然是开源的，那么就直接分析源码，发现报错的地方修复即可。
16.3 分析apktool的源码
上面说了为什么要分析apktool的源码，下面就真正开始分析。当然第一步是得到apktool的源码，地址为https://code.google.com/p/android-apktool/。看到有Google的域名是不是很郁闷？的确，国内程序员一般打开时始终处于loading状态，直至报错，所以只能去万能的GitHub上搜索了，找到了地址https://github.com/iBotPeaches/Apktool。可以看到有很多人关注，而且代码是有人维护和更新的，所以下载到本地。
但是下载后发现是一个Gradle项目，所以就给Eclipse装一个Gradle插件，然后导入项目即可。但是又遇到一个问题，还是国内网络的问题，Gradle下载失败，因为这里引用了一些第三方的jar，如下所示：
那么，只能无奈地手动去一个一个找这些jar包，这个过程还是比较辛苦的，有些jar很难找，不过最后还是都找到了，不再有报错，项目结构如图16-1所示。
图16-1 apktool项目结构
Apktools这个项目是入口，也是主要功能项目类，Baksmali和Smali、SmaliUtil是操作smali的工具类，BrutCommon和BrutDir、BrutUtil是一些辅助的工具类，代码简单，不做太多的解释。除了Apktools之外，其他项目都是功能库，它们之间的引用关系如下：
·Baksmali依赖于SmaliUtil。
·BrutDir依赖于BrutCommon、BrutUtil。
·BrutUtil依赖于BrutCommon。
·Smali依赖于SmaliUtil。
·Apktools依赖于Baksmali、BrutCommon、BrutDir、BrutUtil、Smali。
直接来看看主要功能Apktools项目。首先Java项目的入口方法肯定是main方法，搜一下找到这个Main类：
在方法中得到参数，然后进行参数的分析和组装。继续往下看执行代码：
这里看到了经常用的一些命令参数，它们的含义都了解了，ApkDecoder类是反编译的核心类：
最终也是调用它的decode方法，如下所示：
可以看到使用了Androlib这个核心类来做了一些操作，首先判断是否需要解析arsc格式的资源文件，下面仔细解析resource.arsc和AndroidManifest.xml这两个文件：
这里解析了dex文件，得到smali源码，而且区分了多个dex的情况。可以发现，apktool在整个反编译的过程中有三个核心点：解析resource.arsc文件、AndroidManifest.xml文件、dex文件。
关于这三个文件，在本书的前几章已经讲解过具体格式和解析方法，所以这里就不详细介绍了。
继续分析Androidlib这个核心解析类，就几个方法，下面来一一讲解。
1.解析原生文件
这个方法主要解析原生的文件，就是Android在编译apk的过程中不参与编译的文件目录，一般是assets和libs：
2.解析配置文件
这个方法主要是解析AndroidManifest.xml文件格式的：
Android在安装一个apk的时候，肯定也需要解析AndroidManifest.xml文件，而且Android中解析XML文件采用的是Pull解析法，所以这里直接把Android中的一些方法拷贝过来了，如图16-2所示。
然后再找一个xmlPull的解析jar包即可，如图16-3所示。
图16-2 apktool解析AndroidManifest功能类
图16-3 apktool项目引入的jar包
3.解析资源文件
这个方法是用来解析resource.arsc文件的，这个文件主要包含了所有资源文件的一种格式。Android中资源文件都有相应的类型，以及唯一的一个整型id值，那么这个文件就包含这些内容，如下所示：
这个方法用到的解析类和AndroidManifest.xml的解析类是一样的，因为它们都属于arsc格式，而且资源文件也是XML格式。这里值得注意的是，会产生一个反编译中最关键的文件public.xml，这个文件位于反编译之后的res\values\public.xml目录下：
可以看到，每个id字段都有对应的类型、名称和id值，而这里的id值是一个整型值，8个字节，由PackageId+TypeId+EntryId：三部分组成，如下所示：
·PackageId：包的id值，Android中如果是第三方应用的话，这个值默认是0x7F，系统应用的话是0x01，具体可以看后面的aapt源码得知，占用两个字节。
·TypeId：资源的类型id值，一般Android中有以下几个类型：attr、drawable、layout、dimen、string、style等，这些类型的值是从1开始逐渐递增的，顺序不能改变，attr=0x01，drawable=0x02……占用两个字节。
·EntryId：具体的类型下资源实体的id值，从0开始，依次递增，占用四个字节。
4.解析dex文件
这个方法主要是将dex文件解析成smali源码：
这里使用了SmaliDecoder的decode方法，如下所示：
这里需要借助一个工具包dexlib，它用来处理dex文件，处理完dex文件之后，再交给baksmali工具类生成smali文件即可。
源码分析完了，下面开始测试一下。这里为了运行简单，在入口的main方法中手动构造一个参数：
16.4 解决常见问题
反编译也会出现错误，本节分析并解决这类问题。
1.第一类反编译错误
错误信息如图16-4所示。
图16-4 反编译错误（一）
报错信息和开始使用apktool工具的时候是一样的，看看崩溃代码：
可以发现，这里使用一个Map结构存放ResResSpec格式数据，而且key是spec的name值，那么知道资源id的值是唯一的，不可能出现相同的name值，是做了混淆机制，这种混淆机制只对apktool工具有效，对Android系统解析apk运行是不影响的。知道了崩溃的原因，修复也就简单了，直接加一个判断，判断这个key是否在map中，存在的话就直接返回，如图16-5所示。
图16-5 修复问题
再次运行，如图16-6所示。
过滤了重复的资源值，反编译成功了。这里因为反编译过程中会用到系统的资源id，需要系统资源包framework.apk参与解析工作，因为程序包比较大，反编译时间会长点。可以看看反编译之后的目录，如图16-7所示。
图16-6 再次运行
图16-7 回编译文件apktool.xml
它的AndroidManifest.xml内容如下：
解析成功，可以正常查看了。这里就解决了反编译的错误。
2.第二类反编译错误
错误信息如图16-8所示。
这个错误和开始看到的错误是一样的，下面看看崩溃的地方是什么原因导致的：
图16-8 反编译错误（二）
这里是读取一个字符串常量池Chunk头部信息报错的，StringChunk的头部信息包括如下内容：
·header：标准的Chunk头部信息结构。
·stringCount：字符串的个数。
·styleCount：字符串样式的个数。
·flags：字符串的属性，取值包括0x000（UTF-16）、0x001（字符串经过排序）、0x100（UTF-8）及其组合值。
·stringStart：字符串内容块相对于其头部的距离。
·stylesStart：字符串样式块相对于其头部的距离。
其中header是一个标准的Chunk头部信息：
·type：当前Chunk的类型（两个字节）。
·headerSize：当前Chunk的头部大小（两个字节）。
·size：当前Chunk的大小（四个字节）。
共八个字节。继续分析错误代码：
这里会检查已给Chunk结构的完整性，输入的StringPool值是：
下面是字符串常量池Chunk的头部信息，而且值是固定的：0x001C0001，再进入看看代码：
如果发现格式不正确就抛出一个异常，即格式不是0x001C0001的话就不正确。那么问题差不多清楚了，崩溃的原因很可能是应用的resource.arsc的StringPool这个Chunk的头部信息被混淆了。通过上面的分析知道，StringPool这个Chunk的头部标准格式是0x001C0001，我们来看看应用的resource.arsc文件的二进制数据，如图16-9所示。
图16-9 分析resource.arsc头部信息（一）
可以发现有这个值，那么为何还报错呢？到这里或许不知道该怎么办了。再去看一个能够反编译的apk的resource.arsc文件，如图16-10所示。
图16-10 分析resource.arsc头部信息（二）
发现果然不一样，头部信息多了8个字节0x000001000，那么再看上面检查Chunk头部类型数据的代码：
可以看到，apktool其实已经做了头部信息的检查，但是这里只是检查0x001C0001这个正确信息之前的值只有四个字节，而且是0的情况，读取int整型值，四个字节，发现值等于传递进来的possible的话，就继续执行这个方法，但是这里的possible值是-1了，也就是这里只会检查四个字节，但是分析了应用的resource.arsc文件，发现它是八个字节，而且还不全是0，前四个字节是0，后四个字节是1：
所以这里检测也是失败的，抛出异常了。
分析完资源文件混淆的机制，下面修改就简单了，首先把上面的8个字节全部改成0：
然后替换之前的resource.arsc文件，直接用压缩软件替换即可，然后再修改上面的检测代码，如下所示：
修改代码，一直做检测，直到遇到正确的值为止，修复完成之后，运行：
不报错了，看看反编译之后的目录：
反编译也成功！
通过上面的分析可见，使用apktool反编译的问题主要有两个：
·Exception in thread“ main” brut.androlib.AndrolibException：Multiple res specs：attr/name
异常原因：通过分析源码知道，这个错误主要是因为apk做了混淆操作，导致在反编译的过程中存入了重复的id值。
错误代码：ResTypeSpec.java的addResSpec方法78行。
修复：在这个方法存入map数据之前做一个判断操作即可。
·Exception in thread“ main” brut.androlib.AndrolibException：Could not decode arsc file
异常原因：通过分析源码知道，这个错误主要是因为apk做了resource.arsc头部信息的修改，导致在分析头部数据结构的时候出错。
错误代码：ExtDataInput.java的skipCheckChunkTypeInt方法73行。
修复：修复resource.arsc头部数据，修改skipCheckChunkTypeInt检测方法逻辑。
16.5 apktool的回编译源码分析
前面分析了apktool的反编译功能源码，解决了两个应用反编译的失败问题，下面继续分析一下apktool的回编译功能。关于回编译功能，首先要了解aapt命令功能，如图16-11所示。
图16-11 apk编译流程图
使用aapt命令编译资源文件：
命令参数有点多，只说明如下几个：
·-J后面跟着的是gen目录，也就是编译之后产生的R类，存放资源id。
·-S后面跟着的是res目录，也就是需要编译的资源目录。
·-I后面跟着的是系统的库，因为我们在项目资源中会用到系统的一些资源文件，所以这里需要链接一下。
·-M后面跟着的是项目的清单文件，需要从这个文件中得到应用的包名，然后产生对应的R文件和包名。
这个命令不仅可以进行编译，也可以反编译，如上面提到的解析AndroidManifest.xml和resource.arsc的时候，使用它可以反编译，解析dex文件可以使用dumpdex命令。这些命令都在androidsdk的build-tools目录下。
知道了编译过程，回编译就是按照这个步骤来的，而这里重要的就是使用aapt命令：