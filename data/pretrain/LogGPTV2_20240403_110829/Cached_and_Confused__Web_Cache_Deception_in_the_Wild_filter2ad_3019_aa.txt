title:Cached and Confused: Web Cache Deception in the Wild
author:Seyed Ali Mirheidari and
Sajjad Arshad and
Kaan Onarlioglu and
Bruno Crispo and
Engin Kirda and
William Robertson
Cached and Confused: 
Web Cache Deception in the Wild
Seyed Ali Mirheidari, University of Trento; Sajjad Arshad, Northeastern University; 
Kaan Onarlioglu, Akamai Technologies; Bruno Crispo, University of Trento, 
KU Leuven; Engin Kirda and William Robertson, Northeastern University
https://www.usenix.org/conference/usenixsecurity20/presentation/mirheidari
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.Cached and Confused: Web Cache Deception in the Wild
Seyed Ali Mirheidari
University of Trento
Bruno Crispo
University of Trento &
KU Leuven
Sajjad Arshad∗
Northeastern University
Engin Kirda
Northeastern University
Kaan Onarlioglu
Akamai Technologies
William Robertson
Northeastern University
Abstract
Web cache deception (WCD) is an attack proposed in 2017,
where an attacker tricks a caching proxy into erroneously
storing private information transmitted over the Internet and
subsequently gains unauthorized access to that cached data.
Due to the widespread use of web caches and, in particular,
the use of massive networks of caching proxies deployed
by content distribution network (CDN) providers as a critical
component of the Internet, WCD puts a substantial population
of Internet users at risk.
We present the ﬁrst large-scale study that quantiﬁes the
prevalence of WCD in 340 high-proﬁle sites among the Alexa
Top 5K. Our analysis reveals WCD vulnerabilities that leak
private user data as well as secret authentication and autho-
rization tokens that can be leveraged by an attacker to mount
damaging web application attacks. Furthermore, we explore
WCD in a scientiﬁc framework as an instance of the path
confusion class of attacks, and demonstrate that variations on
the path confusion technique used make it possible to exploit
sites that are otherwise not impacted by the original attack.
Our ﬁndings show that many popular sites remain vulnerable
two years after the public disclosure of WCD.
Our empirical experiments with popular CDN providers
underline the fact that web caches are not plug & play tech-
nologies. In order to mitigate WCD, site operators must adopt
a holistic view of their web infrastructure and carefully con-
ﬁgure cache settings appropriate for their applications.
1 Introduction
Web caches have become an essential component of the Inter-
net infrastructure with numerous use cases such as reducing
bandwidth costs in private enterprise networks and accelerat-
ing content delivery over the World Wide Web. Today caching
is implemented at multiple stages of Internet communications,
for instance in popular web browsers [45,58], at caching prox-
ies [55, 64], and directly at origin web servers [6, 46].
∗Currently employed by Google.
In particular, Content Delivery Network (CDN) providers
heavily rely on effective web content caching at their edge
servers, which together comprise a massively-distributed In-
ternet overlay network of caching reverse proxies. Popular
CDN providers advertise accelerated content delivery and
high availability via global coverage and deployments reach-
ing hundreds of thousands of servers [5, 15]. A recent scien-
tiﬁc measurement also estimates that more than 74% of the
Alexa Top 1K are served by CDN providers, indicating that
CDNs and more generally web caching play a central role in
the Internet [26].
While there exist technologies that enable limited caching
of dynamically-generated pages, web caching primarily tar-
gets static, publicly accessible content. In other words, web
caches store static content that is costly to deliver due to an ob-
ject’s size or distance. Importantly, these objects must not con-
tain private or otherwise sensitive information, as application-
level access control is not enforced at cache servers. Good
candidates for caching include frequently accessed images,
software and document downloads, streaming media, style
sheets, and large static HTML and JavaScript ﬁles.
In 2017, Gil presented a novel attack called web cache de-
ception (WCD) that can trick a web cache into incorrectly
storing sensitive content, and consequently give an attacker
unauthorized access to that content [23,24]. Gil demonstrated
the issue with a real-life attack scenario targeting a high pro-
ﬁle site, PayPal, and showed that WCD can successfully leak
details of a private payment account. Consequently, WCD
garnered signiﬁcant media attention, and prompted responses
from major web cache and CDN providers [8,9,12,13,43,48].
At its core, WCD results from path confusion between an
origin server and a web cache. In other words, different in-
terpretations of a requested URL at these two points lead to
a disagreement on the cacheability of a given object. This
disagreement can then be exploited to trick the web cache
into storing non-cacheable objects. WCD does not imply
that these individual components—the origin server and web
cache—are incorrectly conﬁgured per se. Instead, their haz-
ardous interactions as a system lead to the vulnerability. As a
USENIX Association
29th USENIX Security Symposium    665
result, detecting and correcting vulnerable systems is a cum-
bersome task, and may require careful inspection of the en-
tire caching architecture. Combined with the aforementioned
pervasiveness and critical role of web caches in the Internet
infrastructure, WCD has become a severely damaging issue.
In this paper, we ﬁrst present a large-scale measurement
and analysis of WCD over 295 sites in the Alexa Top 5K. We
present a repeatable and automated methodology to discover
vulnerable sites over the Internet, and a detailed analysis of
our ﬁndings to characterize the extent of the problem. Our
results show that many high-proﬁle sites that handle sensitive
and private data are impacted by WCD and are vulnerable to
practical attacks. We then discuss additional path confusion
methods that can maximize the damage potential of WCD,
and demonstrate their impact in a follow-up experiment over
an extended data set of 340 sites.
To the best of our knowledge, this is the ﬁrst in-depth inves-
tigation of WCD in a scientiﬁc framework and at this scale. In
addition, the scope of our investigation goes beyond private
data leakage to provide novel insights into the severity of
WCD. We demonstrate how WCD can be exploited to steal
other types of sensitive data including security tokens, explain
advanced attack techniques that elevate WCD vulnerabilities
to injection vectors, and quantify our ﬁndings through further
analysis of collected data.
Finally, we perform an empirical analysis of popular CDN
providers, documenting their default caching settings and
customization mechanisms. Our ﬁndings underline the fact
that WCD is a system safety problem. Site operators must
adopt a holistic view of their infrastructure, and carefully
conﬁgure web caches taking into consideration their complex
interactions with origin servers.
To summarize, we make the following contributions:
• We propose a novel methodology to detect sites impacted
by WCD at scale. Unlike existing WCD scan tools that
are designed for site administrators to test their own
properties in a controlled environment, our methodology
is designed to automatically detect WCD in the wild.
• We present ﬁndings that quantify the prevalence of WCD
in 295 sites among the Alexa Top 5K, and provide a
detailed breakdown of leaked information types. Our
analysis also covers security tokens that can be stolen via
WCD as well as novel security implications of the attack,
all areas left unexplored by existing WCD literature.
• We conduct a follow-up measurement over 340 sites
among the Alexa Top 5K that show variations on the
path confusion technique make it possible to successfully
exploit sites that are not impacted by the original attack.
• We analyze the default settings of popular CDN
providers and document their distinct caching behavior,
highlighting that mitigating WCD necessitates a compre-
hensive examination of a website’s infrastructure.
Ethical Considerations. We have designed our measure-
ment methodology to minimize the impact on scanned sites,
and limit the inconvenience we impose on site operators. Sim-
ilarly, we have followed responsible disclosure principles to
notify the impacted parties, and limited the information we
share in this paper to minimize the risk of any inadvertent
damage to them or their end-users. We discuss details of the
ethical considerations pertaining to this work in Section 3.5.
2 Background & Related Work
In this section, we present an overview of how web cache
deception (WCD) attacks work and discuss related concepts
and technologies such as web caches, path confusion, and
existing WCD scanners. As of this writing, the academic
literature has not yet directly covered WCD. Nevertheless, in
this section we summarize previous publications pertaining
to other security issues around web caches and CDNs.
2.1 Web Caches
Repeatedly transferring heavily used and large web objects
over the Internet is a costly process for both web servers and
their end-users. Multiple round-trips between a client and
server over long distances, especially in the face of common
technical issues with the Internet infrastructure and routing
problems, can lead to increased network latency and result
in web applications being perceived as unresponsive. Like-
wise, routinely accessed resources put a heavy load on web
servers, wasting valuable computational cycles and network
bandwidth. The Internet community has long been aware of
these problems, and deeply explored caching strategies and
technologies as an effective solution.
Today web caches are ubiquitous, and are used at various—
and often multiple—steps of Internet communications. For
instance, client applications such as web browsers implement
their own private cache for a single user. Otherwise, web
caches deployed together with a web server, or as a man-in-
the-middle proxy on the communication path implement a
shared cache designed to store and serve objects frequently
accessed by multiple users. In all cases, a cache hit elimi-
nates the need to request the object from the origin server,
improving performance for both the client and server.
In particular, web caches are a key component of Content
Delivery Networks (CDN) that provide web performance and
availability services to their users. By deploying massively-
distributed networks of shared caching proxies (also called
edge servers) around the globe, CDNs aim to serve as many
requests as possible from their caches deployed closest to
clients, ofﬂoading the origin servers in the process. As a re-
sult of multiple popular CDN providers that cover different
market segments ranging from simple personal sites to large
enterprises, web caches have become a central component of
666    29th USENIX Security Symposium
USENIX Association
the Internet infrastructure. A recent study by Guo et al. esti-
mates that 74% of the Alexa Top 1K make use of CDNs [26].
The most common targets for caching are static but fre-
quently accessed resources. These include static HTML pages,
scripts and style sheets, images and other media ﬁles, and large
document and software downloads. Due to the shared nature
of most web caches, objects containing dynamic, personal-
ized, private, or otherwise sensitive content are not suitable
for caching. We point out that there exist technologies such
as Edge Side Includes [63] that allow caching proxies to
assemble responses from a cached static part and a freshly-
retrieved dynamic part, and the research community has also
explored caching strategies for dynamic content. That being
said, caching of non-static objects is not common, and is not
relevant to WCD attacks. Therefore, it will not be discussed
further in this paper.
The HTTP/1.1 speciﬁcation deﬁnes Cache-Control head-
ers that can be included in a server’s response to signal to
all web caches on the communication path how to process
the transferred objects [21]. For example, the header “Cache-
Control: no-store” indicates that the response should not
be stored. While the speciﬁcation states that web caches
MUST respect these headers, web cache technologies and
CDN providers offer conﬁguration options for their users to
ignore and override header instructions. Indeed, a common
and easy conﬁguration approach is to create simple caching
rules based on resource paths and ﬁle names, for instance,
instructing the web cache to store all ﬁles with extensions
such as jpg, ico, css, or js [14, 18].
2.2 Path Confusion
Traditionally, URLs referenced web resources by directly
mapping these to a web server’s ﬁlesystem structure,
followed by a list of query parameters. For instance,
example.com/home/index.html?lang=en would corre-
spond to the ﬁle home/index.html at that web server’s doc-
ument root directory, and lang=en represents a parameter
indicating the preferred language.
However, as web applications grew in size and complexity,
web servers introduced sophisticated URL rewriting mecha-
nisms to implement advanced application routing structures as
well as to improve usability and accessibility. In other words,
web servers parse, process, and interpret URLs in ways that
are not clearly reﬂected in the externally-visible representa-
tion of the URL string. Consequently, the rest of the communi-
cation endpoints and man-in-the-middle entities may remain
oblivious to this additional layer of abstraction between the
resource ﬁlesystem path and its URL, and process the URL
in an unexpected—and potentially unsafe—manner. This is
called path confusion.
The widespread use of clean URLs (also known as REST-
ful URLs) help illustrate this disconnect and the subsequent
issues resulting from different interpretations of a URL.
Clean URL schemes use structures that abstract away from
a web server’s internal organization of resources, and in-
stead provide a more readable API-oriented representation.
For example, a given web service may choose to struc-
ture the URL example.com/index.php?p1=v1&p2=v2 as
example.com/index/v1/v2 in clean URL representation.
Now, consider the case where a user accesses the same web
service using the URL example.com/index/img/pic.jpg.
The user and all technologies in the communication path
(e.g., the web browser, caches, proxies, web application ﬁre-
walls) are likely to misinterpret this request, expect an image
ﬁle in return, and treat the HTTP response accordingly (e.g.,
web caches may choose to store the response payload). How-
ever, in reality, the web service will internally map this URL
to example.com/index.php?p1=img&p2=pic.jpg, and re-
turn the contents of index.php with an HTTP 200 status code.
Note that even when img/pic.jpg is an arbitrary resource
that does not exist on the web server, the HTTP 200 status
code will falsely indicate that the request was successfully
handled as intended.
Web application attacks that involve malicious payload in-
jection, such as cross-site scripting, are well-understood and
studied by both academics and the general security commu-
nity. Unfortunately, the security implications of path confu-
sion have started to garner attention only recently, and aca-
demic literature on the subject is sparse.
One notable class of attacks based on path confusion is
Relative Path Overwrite (RPO), ﬁrst presented by Gareth
Heyes in 2014 [28]. RPO targets sites that utilize relative
paths for security-sensitive resource inclusions such as style
sheets and scripts. The attack is made possible by maliciously-
crafted URLs that are still interpreted in the same way their
benign counterparts are by web servers, but when used as
the base URL causes a web browser to expand relative paths
incorrectly. This results in attacker-controlled same-origin
inclusions. Other researchers have since proposed variations
on more advanced applications of RPO, which can elevate
this attack vector into numerous other vulnerabilities [17,
33, 36, 57]. Recently, Arshad et al. conducted a large-scale
measurement study of RPO in the wild and reported that 9%
of the Alexa Top 1M are vulnerable, and that more than one
third of these are exploitable [7].
Other related work include more general techniques for
exploiting URL parser behavior. For instance, Orange Tsai
presented a series of exploitation techniques that take advan-
tage of the quirks of built-in URL parsers in popular program-
ming languages and web frameworks [61, 62]. While Tsai’s
discussion mainly focuses on Server-Side Request Forgery,
these techniques are essentially instances of path confusion
and can be utilized in many attacks in the category.
Our focus in this paper is web cache deception, the most
recently discovered major security issue that is enabled by an
attacker exploiting a path confusion vulnerability. To the best
of our knowledge, this paper is the ﬁrst academic exploration
USENIX Association
29th USENIX Security Symposium    667
of WCD in the literature, and also constitutes the ﬁrst large-
scale analysis of its spread and severity.
2.3 Web Cache Deception
WCD is a recently-discovered manifestation of path confusion
that an attacker can exploit to break the conﬁdentiality prop-
erties of a web application. This may result in unauthorized
disclosure of private data belonging to end-users of the target
application, or give the attacker access to sensitive security
tokens (e.g., CSRF tokens) that could be used to facilitate fur-
ther web application attacks by compromising authentication
and authorization mechanisms. Gil proposed WCD in 2017,
and demonstrated its impact with a practical attack against a
major online payment provider, PayPal [23, 24].
In order to exploit a WCD vulnerability, the attacker crafts
a URL that satisﬁes two properties:
1. The URL must be interpreted by the web server as a re-
quest for a non-cacheable page with private information,
and it should trigger a successful response.
2. The same URL must be interpreted by an intermediate
web cache as a request for a static object matching the