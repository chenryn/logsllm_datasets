### 优化后的文本

#### 使用假想的 `bill-my-credit-card` 选项
- **Cache-Control**: `max-age=3600`
- **Connection**: `meter, close, bill-my-credit-card`
- **Meter**: `max-uses=3, max-refuses=6, dont-report`

在本次事务结束后，应关闭持久连接。

**代理**
- 客户端 ↔ 服务器

**图4-9 Connection 首部允许发送端指定与连接有关的选项**

当 HTTP 应用程序接收到带有 `Connection` 首部的报文时，接收端会解析并应用发送端请求的所有选项。然后，在将此报文转发给下一跳地址之前，删除 `Connection` 首部及其列出的所有首部。此外，还有一些逐跳首部（尽管未在 `Connection` 首部中列出）也不能被代理转发，例如 `Proxy-Authenticate`、`Proxy-Connection`、`Transfer-Encoding` 和 `Upgrade`。更多关于 `Connection` 首部的信息，请参见附录C。

### 4.3.2 串行事务处理时延
如果仅对连接进行简单的管理，TCP 的性能时延可能会叠加。假设一个包含三个嵌入图片的 Web 页面，浏览器需要发起四个 HTTP 事务来显示该页面：一个用于顶层 HTML 页面，另外三个用于嵌入的图片。如果每个事务都需要建立新的连接，则连接时延和慢启动时延将会累积（参见图4-10）。

**图4-10 四个事务（串行）**

除了实际的时延外，加载一幅图片时页面上其他部分没有动静也会让用户感觉速度较慢。用户更希望同时加载多幅图片。另一个缺点是，某些浏览器在对象加载完成前无法确定其尺寸，因此在加载足够多的对象之前无法显示任何内容。这可能导致用户面对空白屏幕，对加载进度一无所知。

有几种现有和新兴的方法可以提高 HTTP 连接性能：
- **并行连接**：通过多条 TCP 连接发起并发的 HTTP 请求。
- **持久连接**：重用 TCP 连接以消除连接和关闭时延。
- **管道化连接**：通过共享的 TCP 连接发起并发的 HTTP 请求。
- **复用的连接**：交替传送请求和响应报文（实验阶段）。

### 4.4 并行连接
如前所述，浏览器可以依次请求原始 HTML 页面和每个嵌入对象，但这非常慢。HTTP 允许客户端打开多条连接，并行执行多个 HTTP 事务。这样可以显著提高页面加载速度（参见图4-11）。

**图4-11 每个组件都包含一个独立的 HTTP 事务**

#### 4.4.1 并行连接可能提高页面加载速度
包含嵌入对象的组合页面可以通过并行连接克服单条连接的空载时间和带宽限制。时延可以重叠，如果单条连接未充分利用客户端的互联网带宽，可以分配未用带宽来加载其他对象（参见图4-12）。

**图4-12 四个事务（并行）**

#### 4.4.2 并行连接不一定更快
即使并行连接可能更快，但并不总是如此。客户端网络带宽不足时（例如通过 28.8kbps 调制解调器连接到互联网），大部分时间可能都用于传输数据。在这种情况下，并行加载多个对象会导致每个对象竞争有限带宽，从而降低整体性能。此外，打开大量连接会消耗大量内存资源，导致性能问题。实际上，浏览器通常限制并行连接的数量（通常是4个）。服务器可以关闭来自特定客户端的超量连接。

#### 4.4.3 并行连接可能让人“感觉”更快
虽然并行连接并不总是能加快页面加载速度，但它们通常会让用户觉得页面加载得更快。因为多个组件对象同时出现在屏幕上，用户可以看到加载的进展。即使秒表显示整个页面下载时间更长，人们也会认为 Web 页面加载得更快。

### 4.5 持久连接
Web 客户端经常打开到同一站点的连接。例如，一个 Web 页面上的大多数嵌入图片通常来自同一个站点。这种性质称为站点局部性。HTTP/1.1 及其增强版本允许 HTTP 设备在事务处理结束后保持 TCP 连接打开状态，以便为未来的 HTTP 请求重用现有连接。在事务处理结束后仍然保持打开状态的 TCP 连接称为持久连接。非持久连接在每个事务结束后关闭。持久连接在不同事务之间保持打开状态，直到客户端或服务器决定关闭为止。

#### 4.5.1 持久及并行连接
并行连接可以提高复合页面的传输速度，但也有一些缺点：
- 每个事务都会打开/关闭新连接，耗费时间和带宽。
- 新连接受 TCP 慢启动特性影响，性能降低。
- 并行连接数量实际上是有限的。

持久连接降低了时延和连接建立的开销，保持连接调谐状态，并减少了打开连接的潜在数量。然而，管理不当可能会累积大量空闲连接，消耗本地和远程资源。持久连接与并行连接结合使用可能是最高效的方式。现代 Web 应用程序通常打开少量持久连接，并行使用。持久连接有两种类型：旧的 HTTP/1.0+ “keep-alive” 连接和现代的 HTTP/1.1 “persistent” 连接。

#### 4.5.2 HTTP/1.0+ keep-alive 连接
从1996年开始，许多 HTTP/1.0 浏览器和服务器扩展支持早期的实验型持久连接，称为 keep-alive 连接。这些早期的持久连接存在一些互操作性设计问题，但在后期的 HTTP/1.1 版本中得到了修正。许多客户端和服务器仍使用这些早期的 keep-alive 连接。

**图4-13 4个事务（串行与持久连接）**

#### 4.5.3 Keep-Alive 操作
尽管 keep-alive 已不再使用，且在当前的 HTTP/1.1 规范中没有说明，但浏览器和服务器对其握手的使用仍然广泛。实现 HTTP/1.0 keep-alive 连接的客户端可以通过包含 `Connection: Keep-Alive` 首部请求保持连接打开状态。如果服务器愿意为下一条请求保持连接打开状态，会在响应中包含相同的首部（参见图4-14）。否则，客户端会在发回响应报文后关闭连接。

**图4-14 HTTP/1.0 keep-alive 事务首部的握手过程**

#### 4.5.4 Keep-Alive 选项
`Keep-Alive` 首部只是请求保持连接活跃状态。发出 keep-alive 请求后，客户端和服务器并不一定会同意进行 keep-alive 会话。它们可以在任意时刻关闭空闲的 keep-alive 连接，并可随意限制 keep-alive 连接所处理事务的数量。

`Keep-Alive` 通用首部中可以指定以下逗号分隔的选项：
- **timeout**：估计服务器希望保持连接活跃的时间（非承诺值）。
- **max**：估计服务器还希望为此连接处理多少个事务（非承诺值）。
- **未经处理的属性**：主要用于诊断和调试。