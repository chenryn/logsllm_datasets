from P. Thus, we can only recommend Client-CASH to users for whom this assumption holds. A large
body of research has explored the security of user selected passwords (e.g., [27, 12, 31, 7]), how users cope
with multiple passwords [20] and how users respond to password restrictions [25, 6]. These results indicate
that many users do not select their password uniformly at random — contrary to the assumption we made in
our security analysis. However, several research results indicate that users are capable of remembering truly
random system-assigned passwords with practice [3, 5, 10, 35]. Our assumption would hold for users who
adopt the four random words strategy popularized by the web comic XKCD5 or the password management
strategies proposed by Blocki et al. [3]. Thus, we believe that this assumption could be reasonable for many
the security conscious users who would adopt Client-CASH.
5.1 Two Round Strategies
In the two-round case we have F ∗ = A1 ∪ A2 in Theorem 2, so it suﬃces to calculate these two sets. We
have A2 =(cid:8)(cid:0) 2
3 , 1
3
(cid:1)(cid:9) and
If b = (1, 0) then, using the fact that O1 = 1, we have
(cid:96)j − 1
Thus, working out each case for b ∈ F ∗ Theorem 2 simpliﬁes to:
Oi ˜pibi
j=1
i=2
B
k|P|
(cid:17)(cid:111)
(cid:18) (cid:96)j
B
A1 =
(cid:40){(1, 0)}
(cid:110)(cid:16) k|P|
B , 1 − k|P|
O1 ˜p1b1 +
i−1(cid:89)
n(cid:88)
max
(cid:110)
(cid:111)
(cid:110)
(cid:16) B
(cid:17)
B
k|P|
k|P| − 1
k|P| , 2
˜p1 + 2
max
˜p1
B
3
if B
k|P| ≤ 1
otherwise.
(cid:19) = ˜p1
B
k|P| .
(cid:111)
if B
k|P| ≤ 1
otherwise.
˜p2, 2
3
B
k|P|
Padv,B ≥
5.2 Three Round Strategies
In the three-round case we have F ∗ = A1 ∪A2 ∪A3 in Theorem 2, so it suﬃces to calculate these three sets.
To bound Padv,B we note that it is suﬃcient to ﬁnd the extremal points of each region since the adversary’s
objective function is linear in the bi’s. Letting Ai denote the extremal points of Ai, we thus have
5See http://xkcd.com/936/ (retrieved 9/8/2015).
10
A1 =
(cid:17)
(cid:17)
(cid:17)
,
5
{(1, 0, 0)}
(cid:110)(cid:16) k|P|
(cid:16)
(cid:16) k|P|
B , 1 − k|P|
B , 0
(cid:16)
(cid:110)(cid:16) k|P|
1 − k|P|
B , 3
1 − k|P|
(cid:40)(cid:8)(cid:0) 3
5 , 0(cid:1)(cid:9)
B , 3
(cid:110)(cid:16) k|P|
(cid:26)(cid:18) 9
B , 2
5 , 2
A2 =
B
B
5
3
6
19
,
4
19
,
19
A3 =
(cid:16)
(cid:16)
, 2
5
, 2
5
1 − k|P|
1 − k|P|
B
B
(cid:17)(cid:17)(cid:111)
(cid:17)(cid:17)(cid:111)
(cid:17)(cid:111)
(cid:19)(cid:27)
k|P|
B , 1 − 5
3
k|P|
B
if B
k|P| ≤ 1
k|P| ∈(cid:2)1, 5
3
(cid:3)
if B
otherwise
if B
k|P| ≤ 5
3
otherwise
Thus, we can express Padv,B in terms of the following bounds.
(2)
(1) 3˜p1
B
k|P|
(4) 3˜p1 + 3˜p2
(cid:19)
(cid:18) B
k|P| − 1
5 , 0(cid:1) then, using the fact that O1 = 3, O2 = 2 and (cid:96)j = 3, we have
For example, if b =(cid:0) 3
O1 ˜p1b1 +
(cid:18)
5 , 2
n(cid:88)
(cid:19)(cid:18) B
(cid:19)
k|P| − 1
(cid:18)
(6) 3˜p1 + 2˜p2 + 9˜p3
(cid:18) 3
(cid:19)(cid:19)
B
k|P|
i−1(cid:89)
(5) 3˜p1 +
Oi ˜pibi
+ 2˜p2
9
19
3˜p1
(3)
=
(cid:18) B
k|P| − 5
(cid:19)
3
˜p1
+
˜p2
(cid:19)
B
k|P|
9
5
6
5
3
5
2
5
2
B
k|P|
i=2
j=1
as in (2). Thus, in the three-round case Theorem 2 simpliﬁes to:
(cid:18) 9
(cid:19) B
5
5
˜p3
˜p2
6
5
˜p2 +
˜p1 +
k|P|
18
5
(cid:18) 9
(cid:19) =
(cid:18) (cid:96)j
max{(1), (2), (3)}
(cid:96)j − 1
B
k|P|
max{(2), (3), (4), (5)}
max{(3), (5), (6)}
Padv,B ≥
k|P| ≤ 1
k|P| ∈(cid:2)1, 5
if B
if B
otherwise.
3
(cid:3)
6 The Exponential Mechanism
In this section we show how to construct the SelPreds function so that it satisﬁes our security and cost
constraints (equations 1 and 2). Our construction is based on the Exponential Mechanism of McSherry and
Talwar [28], a powerful tool from the diﬀerential privacy literature. We demonstrate that this mechanism
is feasible and that it leads to a signiﬁcant reduction in the adversary’s success rate.
In particular the
exponential mechanism can reduce the adversary’s success rate by up to 12% when n, the maximum number
of hashing rounds, is two and by up to 18% when n = 3.
6.1 Constructing SelPreds via the Exponential Mechanism
To deﬁne the SelPreds function it suﬃces to specify the probability of each outcome o ∈ O given an input
password pwd ∈ P. Consider the utility function U (pwd, o)
which assigns a utility score to
= 1−S(pwd,o)
.
n−1
11
each outcome o ∈ O given a password pwd. We can now use U (pwd, o) to specify the probability of an
outcome o given password pwd. We deﬁne SelPredsexp, such that
Pr[SelPredsexp,(pwd) = o]
.
=
(cid:80)
eU (pwd,o)
o(cid:48)∈O eU (pwd,o(cid:48))
.
Intuitively, given a ﬁxed password pwd the exponential mechanism assigns a higher probability to outcomes
o with shorter stopping times S(pwd, o).
We can ensure that our cost constraints are satisﬁed by tuning the parameter k (the number of hash
iterations per round). After  and O have been ﬁxed we will set k to be the maximum integer such that:
n(cid:88)
i=1
n(cid:88)
i=1
iOi ˜pi =
1
W
iOieU (i) ≤ Csrv
k · CH
.
where the left hand side is a constant.
Observe that whenever O is symmetric it is possible to precompute the stopping time probabilities
(cid:80)n
Oj·e·j
.
i=1 Oi·e·i . Thus, to sample from SelPredsexp,(pwd) it suﬃces to sample the stopping time j,
=
˜pj
compute Hjk(pwd, su) and sample uniformly at random from the set Oj,pwd.
Theorem 3 states that the exponential mechanism above satisﬁes our desired security constraint. Theorem
3 is similar to the general result of McSherry and Talwar [28], which would imply that our mechanism
SelPredsexp, satisﬁes the security constraint with security parameter 2. In our particular setting we can
exploit symmetry (e.g., |Oj,pwd(cid:48)| = |Oj,pwd|) to obtain a tighter bound with security parameter .
Theorem 3 For any symmetric O we have
∀pwd, pwd(cid:48) ∈ P,∀o ∈ O,
Pr[SelPredsexp,(pwd) = o]
Pr[SelPredsexp,(pwd(cid:48)) = o]
≤ e .
= (cid:80)
.
Proof of Theorem 3.
and let Wpwd
Wpwd = Wpwd(cid:48) for any pair of passwords pwd, pwd(cid:48) ∈ P. Thus,
o∈O
Let wo,pwd
= eU (pwd,o) denote the weight of outcome o ∈ O given password pwd
.
wo,pwd denote the cumulative weight of all o ∈ O. Because O is symmetric we have
Pr [SelectPredicate (pwd) = o]
Pr [SelectPredicate (pwd(cid:48)) = o]
=
wo,pwd/Wpwd
wo,pwd(cid:48)/Wpwd(cid:48)
=
wo,pwd
wo,pwd(cid:48)
≤ e|U (pwd(cid:48),0)−U (pwd,o)| ≤ e .