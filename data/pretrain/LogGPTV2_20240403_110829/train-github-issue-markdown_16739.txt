I'm in the process of getting MUI@next to work with next.js, and I just wanted
to pass on my experience so far. Even though MUI uses JSS, it feels like MUI
is getting involved in a lot of areas that are already handled by `react-jss`
MUI now has its own SSR configuration, separate from `jss` and `react-jss`,
and this, to me, feels like a possible mistake. Personally, I wish MUI just
deferred SSR configuration to the JSS suite. If it did that, then a there
would be a single point of SSR configuration for all use of JSS within an app,
rather than separate MUI and non-MUI configurations. Also, `react-jss` now
supports the the new JSS function properties, automatically generating both a
static and dynamic stylesheet for the wrapped react component, and passing in
the component props to all of the function properties. It seems like a
decision was made to not use that library, and instead have a combination of
`jss-theme-reactor` and `MuiThemeProvider` take over those responsibilities.
This means that, as `react-jss` evolves, MUI will have to duplicate features
to stay current.
I realize that a shortcoming with `react-jss` has been that it can only take
in an object when injecting a stylesheet, when what we really want is for it
to take in a function like `theme => stylesheet`, and this is probably the
main perk of theme reactor. Now, with function properties, we can do:
    injectSheet({
      backgroundColor: ({theme}) => theme.backgroundColor,
      color: ({theme}) => theme.color
    })
It's more verbose, but it works. All that would be necessary would be to wrap
the `react-jss` `injectSheet` HOC like:
    export const withStyles = styleSheet => compose(
      withTheme,
      injectSheet(styleSheet)
    )
If all of the MUI components then used that HOC, SSR config could be done just
with the `react-jss` `StyleRegistryProvider`
If using function properties for theme-related styles is too much overhead,
then perhaps the `withStyles` HOC could be reworked to both take in a `theme
=> stylesheet` function, populate an object with the theme data, and then
delegate to `injectSheet` for the actual stylesheet injection. That way we
would have the best of all worlds: a choice between static or dynamic theme-
based styles.
Just my two cents. Thanks for the amazing library.
Jay