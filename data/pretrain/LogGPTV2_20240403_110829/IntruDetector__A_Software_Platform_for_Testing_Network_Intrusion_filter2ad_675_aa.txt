# IntruDetector: A Software Platform for Testing Network Intrusion Detection Algorithms

**Authors:**  
Tao Wan and Xue Dong Yang  
Email: {taowan, yang}@cs.uregina.ca  
Department of Computer Science  
University of Regina  
Regina, Saskatchewan S4S OA2, CANADA

## Abstract
An Intrusion Detection System (IDS) is a system that passively monitors specific computing resources, such as operating systems, applications, or networks, and reports any anomalous events or known patterns indicating potential intrusions. IDSs have been receiving increasing attention from both research institutions and industrial sectors. Despite significant progress in this area, the field remains relatively young and far from mature. Many technologies from other fields are being applied, and various detection systems are under development [5, 7, 11, 12, 14, 15, 16, 17]. Consequently, researchers need an environment to test and evaluate their detection systems.

Researchers at the University of California at Davis, IBM, and MIT Lincoln Labs have made significant efforts in testing and evaluating IDSs. Their work is briefly summarized below.

### Introduction
As the usage of the Internet proliferates, more of our daily lives and business operations depend on the availability of networks and the integrity of data. Unfortunately, the information infrastructure we rely on is highly vulnerable to attacks. Computer intrusions are occurring more frequently and have become a major threat to society [1, 2, 3]. Detecting intrusions is a significant challenge faced by every organization.

#### Testing at UC Davis
The researchers at the University of California at Davis were among the first to address the issues of testing intrusion detection systems [22, 23]. They developed a methodology and software platform for testing IDSs using the UNIX package, Expect, to simulate both intruders and normal users. The intruders can be individual or cooperative. Three testing objectives were identified:
- **Broad Detection Range:** The ability to distinguish intrusions from normal activities.
- **Economy in Resource Usage:** The efficiency of using system resources.
- **Resilience to Stress:** The ability to function correctly under high load.

The Network Security Monitor (NSM) [13, 21] was evaluated in this environment as an example.

#### Testing at MIT Lincoln Labs
MIT Lincoln Labs conducted two IDS tests in 1998 and 1999, respectively [4, 19]. The tests were performed in a simulated network, with test data sampled from a real environment. Pseudonymized data were replayed in the simulated network using scripts or manual duplication. Several well-known attacks were simulated and inserted into background traffic. Several major IDSs were tested, and the results were published. This test is sophisticated and advanced, and the results serve as a basis for comparing different IDSs. The comprehensive test data are widely used by researchers for experimenting with their IDSs.

#### Testing at IBM Zurich Research Lab
IBM Zurich Research Laboratory developed an experimentation workbench for testing intrusion detection systems [8]. An isolated experimentation network was constructed, disconnected from the rest of the world. Both normal user behaviors and intrusions were obtained through simulation. Normal user behaviors were simulated using Expect scripts, while intrusions were simulated using exploit scripts from a vulnerability database maintained internally. After analyzing the results of various IDSs, the operator could evaluate their performance.

### Our Work
These efforts focus on testing the performance of an IDS consisting of several discrete components, such as sensors, analyzers, and managers. The results can be used by end-users as guidelines to select IDSs or by vendors to improve their products.

Our work is inspired by these efforts but takes a different approach. Instead of focusing on testing an entire IDS, we aim to build a software platform for testing intrusion detection algorithms incorporated into an IDS. We first describe the components of an IDS and then explain why a platform for testing detection algorithms is of interest.

According to the Intrusion Detection Exchange Format (IDWG) [10], an IDS consists of a set of discrete components: sensors, analyzers, and managers. Sensors process data sources (e.g., raw network packets, operating system audit logs, application logs) and generate events representing occurrences of activities. Analyzers analyze events produced by the sensors and report security alerts for unauthorized or undesired activity. Analyzers use various algorithms to perform analysis; for example, misuse IDSs may implement pattern-matching algorithms, while anomaly IDSs may use neural networks to build profiles. In this paper, intrusion detection algorithms and analyzers are used interchangeably. Managers handle configuration, presentation, and reporting.

A platform for experimenting with intrusion detection algorithms is of interest because:
1. **Importance of Analyzers:** Among the components of an IDS, the analyzer is crucial as the efficiency of an IDS is largely determined by its detection algorithm. Therefore, a dedicated platform for testing and improving these algorithms is essential.