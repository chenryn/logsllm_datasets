ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Obfuscation type
Standard
Virt
Virt ×2
Virt ×3
k = 11
SPLIT k = 15
k = 19
[5]
k = 1
k = 2
k = 3
FOR
(new)
× 30s = 1 0 0 ) ;
}
Figure 5: Range Divider obfuscation
Range Divider [5]. Range Divider is an anti-symbolic execu-
tion obfuscation proposed by Banescu et al.. Branch conditions are
inserted in basic blocks to divide the input value range into multiple
sets. The code inside each branch of the conditional statement is an
obfuscated version of the original code. We distinguish two cases,
depending on whether the branch condition uses a switch or a if
statement. In the remaining part of this paper, Split will denote the
Range Divider obfuscation with if statement, and Range Divider
the Range Divider obfuscation with switch statement.
The Range Divider (switch) scheme introduces an exhaustive
switch statement over all possible values of a given variable – see
example in Fig. 5, thus yielding 2S extra-paths, with S the bit size
of the variable. This scheme enjoys the SVP property as in each
branch of the switch the target variable can have only one value, and
it is also tractable in time provided the switch is efficiently compiled
into a binary search tree or a jump table, as usual. Yet, while not
pointed out by Banescu et al., this scheme is not tractable in space
(code size) as it leads to huge amount of code duplication – the byte
case may be fine, but not above.
Split [5]. This transformation (Fig. 6) is similar to Range Divider,
but the control-flow is split by a condition triggered by a variable.
This protection is tractable in both time (only one additional condi-
tion check per forking point) and space (only one block duplication
per forking point). Yet, the protection is not SVP.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
int main ( int argc , char ∗ ∗ argv ) {
char ∗
char chr = ∗ input ;
i f
input = argv [ 1 ] ;
/ /
/ /
/ /
( chr < 3 0 )
. . .
{
}
else
. . .
/ /
i n s e r t e d by o b f u s c a t i o n
i n s e r t e d by o b f u s c a t i o n
o r i g i n a l