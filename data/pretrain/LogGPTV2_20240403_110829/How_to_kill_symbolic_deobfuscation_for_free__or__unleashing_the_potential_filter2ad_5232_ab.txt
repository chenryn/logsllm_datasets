### ACSAC '19, December 9–13, 2019, San Juan, PR, USA

#### Obfuscation Types
- **Standard**
- **Virt**
- **Virt ×2**
- **Virt ×3**
- **k = 11**
- **SPLIT k = 15**
- **k = 19** [5]
- **k = 1**
- **k = 2**
- **k = 3**

### Range Divider Obfuscation

**Range Divider** is an anti-symbolic execution obfuscation technique proposed by Banescu et al. This method involves inserting branch conditions into basic blocks to divide the input value range into multiple sets. The code inside each branch of the conditional statement is an obfuscated version of the original code. We distinguish two cases based on whether the branch condition uses a `switch` or an `if` statement.

- **Split**: Denotes the Range Divider obfuscation with `if` statements.
- **Range Divider (Switch)**: Denotes the Range Divider obfuscation with `switch` statements.

#### Range Divider (Switch)
The Range Divider (switch) scheme introduces an exhaustive `switch` statement over all possible values of a given variable, as shown in Figure 5. This results in \(2^S\) extra paths, where \(S\) is the bit size of the variable. This scheme has the Single Value Permutation (SVP) property, meaning that in each branch of the switch, the target variable can have only one value. It is also tractable in time if the switch is efficiently compiled into a binary search tree or a jump table. However, it is not tractable in space (code size) because it leads to a large amount of code duplication, which becomes impractical for variables larger than a byte.

#### Split
The Split transformation, as shown in Figure 6, is similar to Range Divider but splits the control flow using a condition triggered by a variable. This protection is tractable in both time (only one additional condition check per forking point) and space (only one block duplication per forking point). However, it does not have the SVP property.

### Example Code

```c
int main(int argc, char **argv) {
    char *input = argv[1];
    char chr = *input;

    if (chr < 30) {
        // Inserted by obfuscation
        // ...
    } else {
        // Inserted by obfuscation
        // ...
    }

    // Original code
    // ...
}
```

This example demonstrates the insertion of branch conditions by the obfuscation process, which divides the input value range and creates multiple execution paths.

### Figures
- **Figure 5**: Range Divider obfuscation with `switch` statement.
- **Figure 6**: Split obfuscation with `if` statement.

By understanding these obfuscation techniques, developers can better protect their code from symbolic execution attacks while balancing the trade-offs between time, space, and security.