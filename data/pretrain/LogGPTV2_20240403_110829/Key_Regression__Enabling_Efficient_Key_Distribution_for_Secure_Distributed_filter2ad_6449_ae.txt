10 The security of KR-RSA
In our proof of security for KR-RSA we view
the use of SHA1 in keyder as a random oracle.
Construction 10.1, KR-RSA-RO, makes this generaliza-
tion concrete.
Construction 10.1 [KR-RSA-RO.] Given an RSA key
generator Krsa for some security parameter k and a ran-
dom oracle H: Z
2k → {0, 1}l, we can construct a
key regression scheme KR-RSA-RO = (setup, wind,
unwind, keyder) as shown below, where MW = ∞.
Alg. setupH
(N, e, d) $← Krsa ; S
Return stp
Alg. windH (stp)
$← Z∗
N ; stp ← hN, e, d, Si
Parse stp as hN, e, d, Si ; S 0 ← Sd mod N
stp0 ← hN, e, d, S 0i ; stm ← hN, e, Si
Return (stp0, stm)
Alg. unwindH (stm)
Parse stm as hN, e, Si
S 0 ← Se mod N ; stm0 ← hN, e, S 0i
Return stm0
Alg. keyderH (stm)
Parse stm as hN, e, Si ; K ← H(S)
Return K
The derived key space for the scheme KR-RSA-RO is
DK = {0, 1}l.
the result
Toward proving KR-RSA secure, we ﬁrst prove in
Section 10.1 that KR-RSA-RO is KR-secure against ad-
versaries that use reasonable resources and that make
at most one KeyderO oracle query;
in
Section 10.1 assumes that the RSA key generator Krsa in
KR-RSA-RO is one-way. We then show in Section 10.2
that if a key regression scheme is secure against ad-
versaries restricted to one KeyderO oracle query, then
the key regression scheme is secure against adver-
saries making multiple KeyderO oracle queries.
In
Section 10.3 we combine these two results to show that
KR-RSA-RO is secure against adversaries that use rea-
sonable resources but make an otherwise unrestricted
number of KeyderO oracle queries.
Before proceedings with Section 10.1, we ﬁrst deﬁne
what it means for an RSA key generator to be one-way.
Security for RSA key generators. Let Krsa be an RSA
key generator with security parameter k. If A is an ad-
versary, we let
Advrsa-ow
(N, e, d) $← Krsa ;
: A(y, e, N ) = x
y ← xe mod N
= Pr
Krsa,A
x
$
← Z∗
N ;
denote the RSA one-way advantage of A in inverting
RSA with the key generator Krsa. Under the concrete
security approach, Krsa is said to be a “one-way” if the
RSA one-way advantage of all adversaries A using rea-
sonable resources is “small.”
10.1 Security of KR-RSA under one KeyderO or-
acle query
Lemma 10.2 below states that if the RSA key gen-
erator Krsa is one-way, then the resulting construction
KR-RSA-RO is secure against adversaries that use rea-
sonable resources and that make at most one KeyderO
oracle query.
Lemma 10.2 If Krsa is an RSA key generator with se-
curity parameter k, then the key regression scheme KR
built from Krsa via KR-RSA-RO (Construction 10.1) is
KR-secure in the random oracle model against adver-
saries restricted to one KeyderO oracle query assuming
that Krsa is one-way. Concretely, given an adversary A
attacking KR that makes at most one key derivation or-
acle query, we can construct an adversary B attacking
Krsa such that
Advkr
KR,A ≤ (q + 1) · Advrsa-ow
Krsa,B ,
(6)
where q is the maximum number of winding oracle
queries that A makes. Adversary B uses within a small
constant factor of the resources as A plus performs up
to q RSA encryption operations.
To prove Lemma 10.2 we observe that in order for an
adversary A in possession of the i-th member state
hN, e, Sii to distinguish the (i + 1)-st key from ran-
dom, the adversary must query its random oracle with
Si+1, where hN, e, Si+1i is the (i + 1)-st member state.
Since Si = Se
i+1 mod N , querying the random oracle
with Si+1 amounts to inverting Si. The actual proof of
Lemma 10.2 involves B guessing the number of WindO
oracle queries that A makes. Details in [24].
10.2 Security under one KeyderO oracle query
implies security under many
The following lemma states that if a key regression
scheme is secure against adversaries restricted to one
KeyderO oracle query, then the key regression scheme
is secure against adversaries allowed multiple KeyderO
oracle queries. The proof of Lemma 10.3 is in [24].
11 Performance of key regression in
access-controlled content distribution
Lemma 10.3 If a key regression scheme is secure when
an adversary is limited to one KeyderO oracle query,
then the key regression scheme is secure when an adver-
sary is allowed multiple KeyderO oracle queries. Con-
cretely, let KR be a key regression scheme. Given an ad-
versary A attacking KR that makes at most q1 queries
to WindO and q2 queries to KeyderO, we can construct
an adversary B attacking KR such that
KR,A ≤ q2 · Advkr
Advkr
KR,B ,
(7)
B makes at most q1 + q2 − 1 queries to WindO (or 0
queries if q1 + q2 = 0), B makes at most one query to
KeyderO, and B has other resource requirements within
a small constant factor of the resource requirements
of A.
10.3 The security of KR-RSA under multiple
KeyderO oracle queries
From Lemma 10.2 and Lemma 10.3 it follows that
KR-RSA-RO is secure in the random oracle model as-
suming that Krsa is one-way, even for adversaries al-
lowed multiple KeyderO oracle queries. Theorem 10.4
makes this reasoning formal. Although SHA1 is not a
random oracle, Theorem 10.4 suggests that when instan-
tiated with a suitable RSA key generator, KR-RSA may
provide a reasonable level of security in practice; see
Section 5 for additional discussion.
Theorem 10.4 If Krsa is an RSA key generator with
then KR built from Krsa via
security parameter k,
KR-RSA-RO (Construction 10.1) is KR-secure in the
random oracle model under the RSA assumption. Con-
cretely, given an adversary A attacking KR, we can
construct an adversary B attacking Krsa such that
Advkr
KR,A ≤ 2q2 · Advrsa-ow
Krsa,B ,
where q is the maximum number of winding and key
derivation oracle queries that A makes. Adversary B
uses resources within a constant factor of the resources
of A plus the time to perform q RSA encryption opera-
tions.
Proof of Theorem 10.4: The proof of Theorem 10.4
follows from Lemma 10.3 and Lemma 10.2. Note that
for the application of Lemma 10.3 we set q1 = q and
q2 = q, meaning the adversary B from Lemma 10.3 may
make up to 2q − 1 queries to its WindO oracle, or 2q if
q = 0.
We integrated key regression into the Chefs ﬁle sys-
tem [22] to measure the performance characteristics of
key regression in a real application. We ﬁrst give an
overview of Chefs. Then we provide measurements to
show that key regression enables efﬁcient key distribu-
tion even for publishers with low-bandwidth and high-
latency connections such as cable and analog modems.
Chefs for access-controlled content distribution.
Chefs [22] is a secure, single-writer, many-reader ﬁle
system for access-controlled content distribution using
untrusted servers. Chefs extends the SFS read-only ﬁle
system [23] to provide access control. Chefs uses lazy
revocation [21, 32] and KR-SHA1 key regression to re-
duce the amount of out-of-band communication neces-
sary for group key distribution.
Three modules comprise the Chefs ﬁle system. An
untrusted server makes encrypted, integrity-protected
content available in the form of a block store. A pub-
lisher creates the encrypted, integrity-protected content
and manages key distribution. A client downloads con-
tent from an untrusted server, then veriﬁes integrity and
decrypts the content using keys fetched from the pub-
lisher. Our publisher, e.g., a blogger, is expected to have
a low-bandwidth connection.
Several types of keys guard the access control and
conﬁdentiality of content in Chefs. Chefs uses a content
key to encrypt content. A member obtains a content key
by opening a lockbox that is encrypted with the group
key; the member derives the group key from the group
member state. After a membership event, e.g., an evic-
tion, the publisher produces a new key regression mem-
ber state. The remaining group members request this
member state on-demand from the publisher; to com-
municate the new member state, the publisher encrypts
the member state with each member’s 1 024-bit public
RSA key using the low exponent e = 3.
11.1 Hypothesis and methodology
Performance measurements validate that (1) key re-
gression allows a publisher to serve many keys per
second to clients effectively independent of the pub-
lisher’s network throughput and the rate of membership
turnover, and (2) key regression does not degrade client
latency. To test these hypotheses, we compare the per-
formance of Chefs to Sous-Chefs, a version of Chefs
without key regression.
Experimental setup. The client and server contained
the same hardware: a 2.8 GHz Intel Pentium 4 with
512 MB RAM. Each machine used a 100 Mbit/sec
full-duplex Intel PRO/1000 Ethernet card and a Max-
tor 250 GB, Serial ATA 7 200 RPM hard drive with an
8 MB buffer size, 150 MB/sec transfer rate, and less
than 9.0 msec average seek time. The publisher was
a 3.06 GHz Intel Xeon with 2 GB RAM, a Broadcom
BCM5704C Dual Gigabit Ethernet card, and a Hitachi
320 GB SCSI-3 hard drive with a 320 MB/sec transfer
rate.
The machines were connected on a 100 Mbit/sec lo-
cal area network and all used FreeBSD 4.9. NetPipe [46]
measured the round-trip latency between the pairs of
machines at 249 µsec, and the maximum sustained TCP
throughput of the connection at 88 Mbit/sec when writ-
ing data in 4 MB chunks and using TCP send and receive
buffers of size 69 632 KB. When writing in 8 KB chunks
(the block size in Chefs), the peak TCP throughput was
66 Mbit/sec.
The experiments used the dummynet [44] driver in
FreeBSD to simulate cable modem and analog modem
network conditions. For the cable modem on the pub-
lisher machine, the round-trip delay was set to 20 msec
and the download and upload bandwidth to 4 Mbit/sec
and 384 Kbit/sec respectively. For the analog modem,
the round-trip delay was set to 200 msec and the upload
and download bandwidth each to 56 Kbit/sec.
In the Chefs measurements,
the inode cache has
16 384 entries, a directory block cache has 512 entries,
an indirect block cache has 512 entries, and a ﬁle block
cache has 64 entries. A large ﬁle block cache is unnec-
essary because the NFS loopback server performs most
of the ﬁle data caching.
For each measurement, the median result of ﬁve sam-
ples are reported. Errors bars in Figure 5 indicate mini-
mum and maximum measurements.
11.2 Secure content distribution on untrusted
storage
A standard benchmark is not available for measuring
the effects of group membership dynamics. Therefore,
we evaluate Chefs based on how a client might search
for content in a subscription-based newspaper.
Table 2 displays the performance of basic key re-
gression operations. The internal block size of the
hash function matters signiﬁcantly for the throughput
of KR-SHA1 key regression. Because SHA1 uses an
internal 512-bit block size, hashing values smaller than
512 bits results in poorer throughput than one would ex-
pect from SHA1 hashing longer inputs. For this rea-
son, KR-AES key regression performs signiﬁcantly bet-
ter than KR-SHA1 key regression.
Searching encrypted content. The benchmarks were
inspired by the membership dynamics reported at Sa-
lon.com, a subscription-based online journal [45]. Salon
announced that in the year 2003, they added 31 000 paid
subscribers (for a total of 73 000) and maintained a 71%
renewal rate. Thus, a 29% eviction rate would generate
an expected 21 170 evictions in one year. This suggests
that the total number of membership events would reach
52 170.
To represent a workload of searching newspaper con-
tent, the experiment tests a ﬁle system containing 10 000
8 KB encrypted ﬁles and the associated content keys.
The experiment consists of mounting the ﬁle system and
reading all the ﬁles. This causes the client machine to
fetch all the content keys.
We further motivate our example workload as fol-
lows. While there is promising research in enabling a
third party server to search encrypted data [2, 12, 26, 28,
47, 50], current approaches for searchable encryption do
not prevent the server from outputting false negatives.
Because Chefs extends the SFS read-only ﬁle system, it
inherits the property that the client can verify whether it
has received all intended content (i.e., the whole truth)
from the server. Therefore, to avoid false negatives, we
desire a client-based search in which the Chefs client
downloads all the encrypted content and keys to perform
the search itself.
Sous-Chefs. To determine the cost of key regression,
Chefs is compared to a version of Chefs with key re-
gression disabled. This strawman ﬁle system is called
Sous-Chefs. Chefs and Sous-Chefs differ only in how
they fetch group keys from the publisher. When using
KR-SHA1 for key regression, Chefs fetches a 20-byte
member state, encrypted in the client’s public 1 024-bit
RSA key with low exponent e = 3. Chefs then uses
key regression to unwind and derive all past versions of
the group key. Sous-Chefs fetches all the derived group
keys at once (each 16 bytes). The group keys them-
selves are encrypted with 128-bit AES in CBC mode.
The AES key is encrypted with the client’s RSA public
key. A Sous-Chefs client is allowed to request a single
bulk transfer of every version of a group key to fairly
amortize the cost of the transfer.
Reduced throughput requirements. Figure 4 shows
that a publisher can serve many more clients in Chefs
than Sous-Chefs in low-bandwidth, high-latency condi-
tions. The CPU utilization for Chefs under no band-
width limitation is negligible, indicating that the cost of
RSA encryptions on the publisher is not the bottleneck.
Each test asynchronously plays back 20 traces of a
single client fetching the keys for the search workload.
This effectively simulates the effect of 20 clients apply-
ing the same key distribution workload to the publisher.
After all traces have completed, we record the effective
number of trace playbacks per second. The Sous-Chefs
traces of fetching 10, 102, 103, 104, 105, and 106 keys
generate 4, 4, 5, 24, 200, and 1 966 asynchronous remote
Key regression protocol
KR-SHA1
KR-AES
KR-RSA
Winds/sec
Not applicable
Not applicable
158
Unwinds/sec
687 720
3 303 900
35 236
Table 2. Microbenchmarks of KR-SHA1, KR-AES, KR-RSA key regression.
chefs 
chefs (cable modem)
chefs (analog modem)
souschefs 
souschefs (cable modem)
souschefs (analog modem)
c
e
s
/
s
n
o
i
s
s
e
s
-
t
n
e
i
l
C
10000
1000
100
10