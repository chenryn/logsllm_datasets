Figure 1. S-ARP packet extension.
2
3
In order to avoid information leakage [1], the S-ARP additional por-
tion is ﬁrst written with zeros.
The hash is computed with the ﬁeld “siglen” equal to zero and af-
ter the signature has been calculated the ﬁeld assumes the real length
of the signature. This must be remembered during the veriﬁcation pro-
cess.
3.4. Message Authentication
Every host maintains a ring of the public keys and cor-
responding IP addresses previously requested to the AKD.
When a host receives a S-ARP reply, it searches the sender
IP address and its corresponding public key in its ring. If it
ﬁnds such an entry, it uses the content to verify the signa-
ture, otherwise it sends a request to the AKD for the cer-
tiﬁcate. A request to the AKD is sent also in case the key
in the local ring does not verify the signature, since it may
no longer be valid4. In this case the packet is enqueued in a
“pending replies list”. The AKD sends a signed reply with
the requested public key and the current time-stamp. Upon
receiving the reply from the AKD, the host resynchronizes
the local clock with the time-stamp, if necessary, stores the
public key in its ring and veriﬁes the signature. In case the
old key were no longer valid, if the new key received from
the AKD is the same as the one in the cache, the reply is
considered invalid and is dropped. If the key has indeed
changed, the host updates its cache and veriﬁes the signa-
ture with the new key.
If the time-stamp in the S-ARP reply is too old, the re-
ply is discarded to avoid replay attacks. Since hosts are
not synchronized exactly, an acceptable difference between
the time-stamp and the local clock is in the range of 30s.
Such a value is arbitrary and can be set by the network ad-
ministrator, provided it is not so large to allow an attacker
to launch a replay attack. Without the use of time-stamps,
an attacker could successfully perform a poisoning attack
even with S-ARP, in the following scenario. An attacker
stores a sniffed S-ARP reply from victim 192.168.0.1 with
MAC address 01:01:01:01:01:01. The attacker waits until
the victim is off-line and cannot reply to ARP requests. At
this point, the attacker changes its own MAC address to
01:01:01:01:01:01 and sends the stored S-ARP reply when
requested.
3.5. Key Management
S-ARP hosts are identiﬁed by the IP address as it appears
in the host certiﬁcate. Since particular care must be taken
when dealing with dynamically assigned IP addresses, we
consider key management in networks with statically or dy-
namically assigned IP addresses separately.
In the next sections we will use the following notation:
3.5.1. Static Networks In networks with statically as-
signed IP addresses, keys are bound to IP addresses when
they are generated and then inserted in the AKD repos-
itory. Therefore, when a generic host i broadcasts a
4
S-ARP public keys do not have an explicit expiration date. They are
changed either periodically by the system administrator or upon re-
quest in case of compromise.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:37:36 UTC from IEEE Xplore.  Restrictions apply. 
AKD
Authoritative Key Distributor
S-DHCP S-ARP enabled DHCP server
Hi
Rq(a)
Rp(a)
SHA(x)
T
N
AH
MH
PH
SH(x)
Generic host i
Request for object a
Reply carrying object a
SHA-1 hash of message x
Local S-ARP Time-stamp
Nonce
Host H’s IP address
Host H’s MAC address
Host H’s Public Key
Message x digitally signed by host H
regular ARP request to ﬁnd host j’s MAC address, assum-
ing j’s key is not in i’s cache, Hj replies with a signed
message containing its own MAC address and the lo-
cal S-ARP clock. Upon receiving host j’s reply, Hi contacts
the AKD to request j’s key. The nonce N in host i’s key re-
quest prevents replay attacks that could desynchronize its
S-ARP clock. The AKD’s signed reply includes the re-
quested key, the nonce N and the time-stamp T, which
host i will use to update its local S-ARP clock Ti. The se-
quence of messages exchanged is summarized below.
Hi → all :
Hj → Hi :
Hi → AKD : Rq(PHj ) || N
AKD → Hi :
Rq(Mj)
SHj (Rp(Mj) || Tj)
SAKD(Rp(PHj ) || N || T)
Note that an attacker cannot produce a valid signature
for an IP address other than its own. This is because the
public key used for verifying the host’s signatures has been
released by the AKD, which ﬁrst has veriﬁed the correct-
ness of the information contained in the certiﬁcate submit-
ted by the host and then released such an information in dig-
itally signed messages. Thus an attacker can no longer send
spoofed ARP replies to redirect trafﬁc through its adapter.
However, an attacker could still announce a false MAC ad-
dress for its adapter, whether such an address be some other
host’s or a non-existing one. In the former case, the victim
host would receive both its legitimate trafﬁc and additional
trafﬁc originally directed to the attacker, thus possibly suf-
fering a denial of service. In the latter case, all the trafﬁc to-
wards the attacker would be dropped, thus isolating the at-
tacker.
3.5.2. Dynamic Networks In a S-ARP network where a
DHCP server dynamically assigns IP addresses to the hosts,
keys cannot be bound to IP addresses at generation time.
Such a binding is dynamic and is renewed every time a host
is assigned a new IP address. This implies that the DHCP
server has to talk to the S-ARP server, thus requiring a cus-
tomized version of the DHCP server. We implemented it
and called it S-DHCP.
We assume that, if an organization deploys a secure
DHCP server, dynamic IP addresses can be assigned only
to well known machines that have been enrolled in the sys-
tem and authorized in some way. What type of connection,
to which sub-net, and other details regarding what a host
may or may not do are part of the authorization proﬁle asso-
ciated with the host, as deﬁned by the security policy of the
organization. Part of the enrollment procedure is the gen-
eration by the host of the public-private key pair and the
corresponding certiﬁcate. At this stage, the IP ﬁeld of such
a certiﬁcate is empty. To complete the enrollment proce-
dure, the AKD manually inserts the certiﬁcate with the null
IP address and the corresponding public key in its own key
repository, using a secure channel. Note that this procedure
is performed only once, before the host ever enters the sys-
tem. Later on, if the host wanted to change its key, it could
just send a key exchange packet to the AKD.
When host H joins the network, it requests an IP address
to the S-DHCP server. In order to allow the S-DHCP server
and the AKD to identify it, H appends the signed SHA-1 di-
gest of its public key PH to the IP request to the S-DHCP
server. Before assigning an IP address to H, the S-DHCP
server contacts the AKD to verify whether H is authorized
to be added to the LAN, i.e., if H’s key is in the AKD repos-
itory and it is valid, and to inform the AKD of the IP ad-
dress the host will be assigned. The message is signed by
the S-DHCP server and comprises the original signed digest
from H and the proposed IP address. The AKD searches its
database for the given public key and replies to S-DHCP
with an ACK or a NACK. The message exchange sequence
in case of a positive response from the AKD is summarized
below.
H → S-DHCP :
S-DHCP → AKD :
AKD → S-DHCP :
S-DHCP → H :
DHCP request || SH(SHA(PH))
SS−DHCP (SH(SHA(PH)) || AH)
SAKD(ACK)
SS−DHCP (DHCP reply || AH)
If the response from the AKD is positive, the S-DHCP
server proceeds with the assignment of the new IP address
to H, while the AKD updates H’s entry in the repository
binding H’s new IP address to H’s key. If the response from
the AKD is negative, the S-DHCP server will not release a
new IP to the host and the host will not be able to join the
LAN. Every time the S-DHCP releases a new IP address to
a host for an expired lease or a new request, it will contact
the AKD to inform it of the new association. The S-DHCP
will release the renewal to the host and meanwhile will con-
tact the AKD to inform it of the renewal. The procedure is
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:37:36 UTC from IEEE Xplore.  Restrictions apply. 
the same as for a new assignment. From the AKD point of
view there is no difference between manually inserted asso-
ciation or S-DHCP automatic association, so a mixed net-
work with static and dynamically assigned IP addresses is
managed correctly.
4. Implementation
S-ARP has been implemented under the Linux operat-
ing system and is available for download at URL : [10].
The prototype was implemented as a proof of concept and
it is not intended to be a ﬁnal and fully functional daemon
to be used in large or production environments. It is com-
posed of two parts: a kernel patch and a user-space dae-
mon, as illustrated in Figure 2. The kernel patch removes
the ARP packet from the incoming packet list through the
dev remove pack() function. This way the kernel will
not parse any ARP packets and will drop them. Note that the
patch does not affect the way the kernel tries to resolve Eth-
ernet addresses, since it continues to send ARP request as
usual. It will only not process the replies. Since in the cur-
rent version of S-ARP requests are not signed, it is possi-
ble to use the simple old ARP implementation for the re-
quests and leave reply veriﬁcation to a userland daemon.
Such a daemon captures S-ARP packets through a link layer
socket, veriﬁes the signature and add the ARP entry in the
system cache via a netlink socket. The daemon can act as
AKD or as a generic host depending upon the command
line parameter passed to the protocol at launch time. It is
also responsible for the communications with the AKD for
key management.
sarpd  daemon
Kernel
neighbor
system
ARP layer
PF_PACKET
socket
user land
kernel land
Loadable
Kernel
Module
sarp
Ethernet
outgoing
requests
incoming
replies
outgoing
replies
Figure 2. The structure of S-ARP.
Using a user land daemon was chosen not to burden the
kernel with a time consuming task such as the veriﬁcation
of a digital signature. In particular, since the kernel (as of
2.4.x) is not preemptible, if the signature veriﬁcation were
left to it, no other task could execute until the veriﬁcation
had terminated. With the introduction of crypto API and
kernel preemption in the upcoming 2.6 kernel, the current
implementation could be revisited and compared with a ker-
nel one, for the best performance.
5. Experimental Evaluation
In order to measure the overhead introduced by S-ARP,
a test bed comprising three PC’s connected through a 10
Mbit/sec hub was set up. A 1.0 GHz AMD Athlon 4 com-
puter with 256 MB RAM running Gentoo Linux 1.4, ker-
nel 2.4.20, acted as the AKD. Two 1.6 GHz Intel Pentium
4 computers with 128 MB RAM, running Debian Linux
3.0, kernel 2.4.18, acted as generic network hosts. Note that
there is no difference in the implementations of ARP in the
two distributions and kernel versions of the Linux operat-
ing system running on the test machines. We conducted two
sets of measurements. We ﬁrst measured the signature op-
eration in isolation and then we indirectly measured the im-
pact of S-ARP on address resolution.
5.1. Signature Performance
From a performance point of view, S-ARP execution
time is dominated by signature veriﬁcation and signature
generation. Since the time required by signature veriﬁcation
depends upon the length of the key, which is a critical pa-
rameter of the protection level the key offers against crypto-
analytic attacks, the bit length of the public keys should
strike a balance between these two factors. Signature cre-
ation is time consuming mostly due to the exponential cal-
culation. However, some factors of such a calculation can be
computed separately because they do not depend upon the
message to be signed, thus signiﬁcantly improving the exe-
cution time [14]. Unfortunately, nothing similar can be done
for signature veriﬁcation.
We ran 1000 tests to measure the time to generate a sig-
nature with pre-computation of the exponential factors and
1000 tests to measure the time to verify a signature for 512
bit and 1024 bit keys. The results are reported in Table 1.
As the table shows, once the exponential factors have been
computed, the time to generate the signature is independent
of the key length. Furthermore, the time required to verify
a signature is about 20-25% larger than the total time re-
quired by the complete generation of a signature.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:37:36 UTC from IEEE Xplore.  Restrictions apply. 
key len.
512
1024
operation
exp. fact.
sig. gen.
sig. verif.
exp. fact.
sig. gen.
sig. verif.
min max
1082
923
58
32
1255
1133
2819
2565
34
59
3458
3204
mean
982.47
33.45
1201.46
2721.67
35.36
3346.24
st. dev.
16.91
1.53
15.45
38.05
1.50
38.07
Table 1. Execution times in µsec for signa-
ture operations (exponential factor computa-
tion, signature generation, signature veriﬁca-
tion) for different key lengths (in bit). Aver-
ages were obtained on 1000 tests.
5.2. ICMP Performance
We measured the performance of S-ARP indirectly, by
means of ICMP messages. A set of ping commands were
repeated, with no parameters, both with and without S-ARP.
ping provides the roundtrip delay of an ICMP echo re-
quest from a host to another, which can be used as an indi-
rect measure of the cost of address resolution. The ﬁrst time
an ICMP echo request/reply is sent, if the destination MAC
address is unknown, an instance of ARP is executed.
ping returns the roundtrip delay for each ICMP mes-
sage sent by the pinging computer, which for the ﬁrst mes-
sage includes the time for address resolution. It is therefore