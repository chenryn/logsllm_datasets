 50
 40
 30
 20
 10
 0
Linux/AMD - Capture Rate %
Linux/Intel - Capture Rate %
FreeBSD/AMD - Capture Rate %
FreeBSD/Intel - Capture Rate %
Linux/AMD - CPU load %
Linux/Intel - CPU load %
FreeBSD/AMD - CPU load %
FreeBSD/Intel - CPU load %
 50  100  150 200  250  300 350  400 450  500  550 600  650 700  750  800 850  900 950
Mbit/s (Data rate)
 100
 90
 80
 70
 60
 50
 40
 30
 20
 10
 0
)
d
a
o
l
U
P
C
(
e
g
a
t
n
e
c
r
e
P
Fig. 4. Data rate vs. Capture Rate (top) and CPU utilization (bottom) for: single processor; in-
creased buffers
214
F. Schneider, J. Wallerich, and A. Feldmann
)
e
t
a
R
e
r
u
t
p
a
C
(
e
g
a
t
n
e
c
r
e
P
 100
 90
 80
 70
 60
 50
 40
 30
 20
 10
 0
Linux/AMD - Capture Rate %
Linux/Intel - Capture Rate %
FreeBSD/AMD - Capture Rate %
FreeBSD/Intel - Capture Rate %
Linux/AMD - CPU load %
Linux/Intel - CPU load %
FreeBSD/AMD - CPU load %
FreeBSD/Intel - CPU load %
 50  100  150 200  250  300 350  400 450  500  550 600  650 700  750  800 850  900 950
Mbit/s (Data rate)
 100
 90
 80
 70
 60
 50
 40
 30
 20
 10
 0
)
d
a
o
l
U
P
C
(
e
g
a
t
n
e
c
r
e
P
Fig. 5. Data rate vs. Capture Rate (top) and CPU utilization (bottom) for: multiple processors;
increased buffers. (A CPU usage of 50% implies that one CPU is fully utilized.)
)
e
t
a
R
e
r
u
t
p
a
C
(
e
g
a
t
n
e
c
r
e
P
 100
 90
 80
 70
 60
 50
 40
 30
 20
 10
 0
 100
 90
 80
 70
 60
 50
 40
 30
 20
 10
 0
)
d
a
o
l
U
P
C
(
t
e
g
a
n
e
c
r
e
P
 50  100  150 200  250  300 350  400 450  500  550 600  650 700  750  800 850  900 950
Mbit/s (Data rate)
Fig. 6. Data rate vs. Capture Rate (top) and CPU utilization (bottom) for: multiple processors;
increased buffers; 50 additional memcpy operations on the packet data. (To increase readability
the legend for this plot is omitted as it is the same as in Fig. 4.)
dramatically with increasing data rates. The efﬁciency of the FreeBSD/AMD machine is
especially surprising as FreeBSD performs an additional (kernel) packet copy operation
and does not use device polling which proved beneﬁcial on Linux systems.
This observation indicates that utilizing the multi-processor system may help over-
come the above problems as the kernel can be scheduled on one processor while the
application is scheduled on the other. This almost doubles the CPU resources. Yet,
Packet Capture in 10-Gigabit Ethernet Environments
215
)
e
t
a
R
e
r
u
t
p
a
C
(
e
g
a
t
n
e
c
r
e
P
 100
 90
 80
 70
 60
 50
 40
 30
 20
 10
 0
32bit FreeBSD - Capture Rate %
64bit FreeBSD - Capture Rate %
32bit Linux - Capture Rate %
64bit Linux - Capture Rate %
32bit FreeBSD - CPU load %
64bit FreeBSD - CPU load %
32bit Linux - CPU load %
64bit Linux - CPU load %
 50  100  150 200  250  300 350  400 450  500  550 600  650 700  750  800 850  900 950
Mbit/s (Data rate)
 100
 90
 80
 70
 60
 50
 40
 30
 20
 10
 0
)
d
a
o
l
U
P
C
(
e
g
a
t
n
e
c
r
e
P
Fig. 7. Data rate vs. Capture Rate (top) and CPU utilization (bottom) for: multiple dual-core
processors; increased buffers; writing full packets to disk. (A CPU usage of 25% implies that one
CPU is fully utilized.)
memory conﬂicts and cache misses have the potential to deteriorate the capture perfor-
mance. The results shown in Fig. 5 show the resulting signiﬁcant performance increase.
This indicates that the additional CPU cycles of the SMP architecture clearly top their
penalties, e. g., cache misses. In fact, the FreeBSD/AMD combination is able to capture
all packets even at the highest data rate. Overall we note that in our experience FreeBSD
outperforms Linux. To test if further increasing the multiprocessor capabilities helps
the performance we enabled Hyper-Threading (only available on Intel machines). This
does not impact the performance. But keep in mind that in this test only two processes
require signiﬁcant CPU resources, the kernel and the capture application.
As it is common to use ﬁlters while capturing, we studied the impact of conﬁguring
a 50 BFP instructions ﬁlter. We ﬁnd that even if packets have to pass a long ﬁlter be-
fore being accepted that does not drastically change the performance. The performance
of the FreeBSD machines stays as is while the one of the Linux machines decreases
slightly (up to 10%) at high data rates (>800 Mbits/s). This indicates that at least for
FreeBSD ﬁltering does not impose high costs on CPU resources. But what if we run
multiple capture applications at the same time? In this case the packets have to be du-
plicated within the kernel and delivered to multiple ﬁlter instances. We not surprisingly
ﬁnd that the performance deteriorates for all four systems. As the Linux machines start
to massively drop packets when reaching their CPU limits, we suggest to use FreeBSD
as the drop rates are less signiﬁcant.
The next challenge that we add to the application are memory copy operations as
these are common in network security applications. To investigate an extreme position
we instructed the application to copy the captured packet 50 times in user-space. From
Fig. 6 we see that all systems suffer under the additional load. The Linux machines yet
216
F. Schneider, J. Wallerich, and A. Feldmann
again experience larger problems. The next challenge is to compress the content of each
packet using a standard compression routine, libz. For the ﬁrst time the Intel systems
outperform their AMD counterparts. This suggests that Intel processors and not AMD’s
have better hardware realizations for instructions used by libz.
Recapitulating, we ﬁnd that the multiprocessor Opteron system with FreeBSD 5.4
outperforms all other systems. Its maximum loss rate is less than 0.5%. One expla-
nation is that AMD has a superior memory management and bus contention handling
mechanism. These results motivated us to only purchase Opteron dual-core machines
for the next tests. To baseline the new system we repeated the above experiments, except
the ones with additional application load. These experiments show that both machines
can capture every single packet on FreeBSD as well as Linux running either the 32-bit
or the 64-bit version of the respective OS.
The newer machines clearly outperformed the older ones. Therefore we next examine
if either system is able to capture full packet traces to disk. For this we switch to using
tcpdump as application. From Fig. 7 we see that Linux is able to write all packets to
disk up to a data rate of about 600 Mbit/s independent of using a 32-bit or 64-bit kernel.
FreeBSD is always dropping roughly 0.1% of the packets even at the lowest data rates.
This indicates a minor but ﬁxable principle problem in the OS. FreeBSD only begins to
drop a signiﬁcant number of packets when the data rate exceeds 800 Mbit/s. But keep in
mind that Linux captures only about 65% of the packets at the highest data rate (32-bit).
While under FreeBSD the difference between 32-bit and 64-bit mode is negligible (up
to a capture rate of 83%), Linux in 64-bit mode deteriorates drastically. It records only
half of the generated packets. The poor performance of 64-bit Linux might be due to
the increased memory consumption for longer pointers within the kernel.
6 Summary
In this paper we argue that due to currently available bus and disk bandwidth it is im-
possible to tackle the crucial problem of packet capture in a 10-Gigabit Ethernet envi-
ronment using a single commodity system. Therefore we propose a novel way for dis-
tributing trafﬁc across a set of lower speed interface using a switch feature that allows
one to bundle lower speed interface into a single higher speed interface, e. g., Cisco’s
EtherChannels feature. Each of the lower speed interfaces can then be monitored using
commodity hardware.
To answer the question which system is able to support packet monitoring best we
present a methodology for evaluating the performance impact of various system com-
ponents. We ﬁnd that AMD Opteron systems outperform Intel Xeon ones and that
FreeBSD outperforms Linux. While multi-processor systems offer a lot, the beneﬁt
of adding Hyper-Threading and multi-core is small. Moreover, it appears that for the
task of packet capture the 64-bit OS versions are not quite ready yet. The newer sys-
tems clearly outperform the older ones and can even capture full packet traces to disk as
long as the data rate is less than 600 to 700 Mbit/s. All in all, multi-processor Opteron
systems with FreeBSD clearly outperformed all other systems.
Obviously, our goal has to be to understand not just the packet capture performance
but the characteristics of such highly complex security screening applications as Bro.
Packet Capture in 10-Gigabit Ethernet Environments
217
Therefore we plan to investigate how system performance scales with the trafﬁc load
and if there is a way to predict future performance. A summary of our current and future
results is available on the project Website [14].
References
1. The Munich Scientiﬁc Network. http://www.lrz-muenchen.de/wir/intro/en/#mwn
2. Paxson, V.: Bro: A System for Detecting Network Intruders in Real-Time. Computer Net-
works, 31(23-24) (1999) 2435–2463
3. Endace Measurement systems: http://www.endace.com
4. Mogul, J. C., and Ramakrishnan, K. K.: Eliminating receive livelock in an interrupt-driven
kernel. ACM Transactions on Computer Systems, 15(3) (1997) 217–252.
5. Jacobson, V., Leres, C., and McCanne, S.: libpcap and tcpdump. http://www.tcpdump.org
6. Wood, P.: libpcap MMAP mode on linux. http://public.lanl.gov/cpw/
7. Deri, L.: Improving passive packet capture: Beyond device polling. In Proc. of the 4th Int.
System Administration and Network Engineering Conference (SANE’2004) (2004)
8. Deri, L.: nCap: Wire-speed packet capture and transmission. In Proc. of the IEEE/IFIP Work-
shop on End-to-End Monitoring Techniques and Services (IM 2005, E2EMON) (2005)
9. Snort http://www.snort.org/
10. Salim, H. D., Olsson, R., and Kuznetsov, A.: Beyond softnet. In Proc. of the 5th Annual Linux
Showcase & Conference (2001)
11. Rizzo, L.: Device Polling support for FreeBSD. In Proc. of the EuroBSDCon’ 01 (2001)
12. Schneider, F.: Performance Evaluation of Packet Capturing Systems for High-Speed Net-
works Diploma thesis, Technische Universit¨at M¨unchen (2005) for cpusage and the captur-
ing application see: http://www.net.in.tum.de/∼schneifa/proj en.html
13. Olsson, R.: Linux kernel packet generator.
14. Hints for improving Packet Capture System performance:
http://www.net.t-labs.tu-berlin.de/research/bpcs/