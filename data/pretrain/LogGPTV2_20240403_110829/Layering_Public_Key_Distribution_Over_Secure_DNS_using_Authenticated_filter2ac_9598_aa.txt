title:Layering Public Key Distribution Over Secure DNS using Authenticated
Delegation
author:John P. Jones and
Daniel F. Berger and
Chinya V. Ravishankar
Layering Public Key Distribution Over Secure DNS
using Authenticated Delegation ∗
John P. Jones, Daniel F. Berger, Chinya V. Ravishankar
Department of Computer Science & Engineering
University of California, Riverside
{jjones,dberger,ravi}@cs.ucr.edu
Riverside, CA, 92521
Abstract
speciﬁcations for securing email, they have not been widely
adopted.
We present the Internet Key Service (IKS), a distributed
architecture for authenticated distribution of public keys,
layered on Secure DNS (DNSSEC). Clients use DNSSEC to
securely discover the identities of the relevant IKS servers,
and send key lookup or management requests directly to
these servers using a special-purpose protocol. Clients au-
thenticate keys retrieved from IKS servers using key commit-
ments published in DNSSEC. IKS derives its authentication
authority from the authority DNS domains have over Inter-
net names. The IKS architecture is loosely coupled with
DNS to minimize overhead on DNS servers. We also present
RIKS, a prototype IKS implementation.
1. Introduction
Digital communication has become pervasive, but there
are few guarantees that such communications are secure and
private. Indeed, security and privacy threats, long seen as
hypothetical, are already real; in 2004, for the ﬁrst time
ever, an arrest was publicly acknowledged as having re-
sulted from passive email monitoring [2].
Though cryptographic techniques exist that can address
these concerns, no infrastructure is available to facilitate
their use by a variety of applications, and across the In-
ternet. Cryptography has been most successfully deployed
in protocols where a clear client-server relationship ex-
ists, such as Secure Socket Layer/Transport Layer Security
(SSL/TLS) [22, 13], and Secure Shell (SSH) [50]. While
proposals exist for securing less hierarchical applications,
such as the Privacy Enhanced Mail (PEM) [32], and Se-
cure Multimedia Internet Mail Extensions (S/MIME) [29]
∗This work was supported in part by the Defense Advanced Projects
Research Agency under contract F30602-01-2-0536.
1.1. The Internet Key Service
We focus on a capability crucial to pervasive adop-
tion of cryptography: simple, scalable, authenticated pub-
lic key distribution. We present the Internet Key Service
(IKS), a practical and deployable architecture for providing
application-independent public key distribution layered on
top of Secure DNS (DNSSEC). Our approach is ﬂexible and
extensible, and can store and serve a variety of key types in
support of a variety of applications.
The Internet Key Service bases its key-authentication au-
thority on DNS’s authority to manage Internet names. This
is a signiﬁcant feature, since all global names encountered
on the Internet, regardless of their syntax or structure, ulti-
mately represent resources or entities that are only address-
ible over the network as a part of the DNS namespace. A
DNS domain has naming authority over the objects that be-
long to it so, in this sense at least, all names are ultimately
DNS names.
The DNS namespace is the Internet-wide standard for
deﬁning who has control over which names. IKS is loosely
coupled to DNS, so that it can provide specialized key dis-
tribution protocols without requiring changes to or impos-
ing signiﬁcant overhead on DNS.
The remainder of this document is organized as follows:
Section 2 provides necessary background. Section 3 brieﬂy
surveys related work. Section 4 gives a high-level view of
our proposed solution. Section 5 delves deeper into the pro-
tocol design. Section 6 presents the Riverside Internet Key
Server (RIKS) our proof-of-concept implementation of the
IKS. Finally, Section 7 summarizes our ﬁndings, and points
out avenues for future exploration.
2. Background
We assume familiarity with asymmetric (public key)
cryptography, digital signatures and one-way hash func-
tions. Readers unfamiliar with these topics are encouraged
to consult a cryptography text, such as [42].
2.1. Key Authentication
Key authentication is the process of validating the bind-
ing of a cryptographic key to a named entity. Public key
cryptosystems simplify, but do not solve, the problem of
key distribution, since public keys must be authenticated to
prevent impersonation and man-in-the-middle attacks. The
most widely used approaches for solving the key authenti-
cation problem are the certifying authority model, exempli-
ﬁed by SSL/TLS, and the web-of-trust model, exempliﬁed
by Pretty Good Privacy (PGP).
Certifying Authorities. The certifying authority (CA)
model assumes a small number of highly trusted individuals
or organizations. Each key-identity binding must be certi-
ﬁed by one of these trusted entities. Certiﬁcate veriﬁcation
requires the certiﬁer’s public key to ﬁrst be authenticated.
In practice, a small set of root certiﬁcates, which are public
keys for various recognized certifying authorities, are typi-
cally preloaded into the cryptographic application.
Webs Of Trust. The web-of-trust model, relies on peers to
vouch for the validity and trustworthiness of other peers. An
unfamiliar key is accompanied by afﬁrmations (digital sig-
natures) from a set of community members who assert that
the provided key is associated with the claimed identity. A
recipient accepts the key only upon receiving enough veri-
ﬁable afﬁrmations from individuals that they trust.
IKS follows the certifying authority model; the IKS server
for a domain acts as a CA for that domain and its public key
can be authenticated by its key commitment published via
DNSSEC.
2.2. The Domain Name System (DNS)
The Domain Name System (DNS) [36] is the most effec-
tive and widely-used mechanism for name registration and
resolution on the Internet, and is a critical component of the
Internet infrastructure. DNS names are assigned from a hi-
erarchical namespace, and organizations are granted control
over a sub-tree rooted at the domain they have registered.
The DNS top-level domains (e.g. .com, .org, .edu, .us, .uk)
are administered by ICANN. Domain administrators man-
age DNS servers to provide authoratitive answers to queries
regarding the domain and to participate in resolving DNS
queries for clients belonging to the domain.
Security was not a primary consideration during the de-
sign and implementation of DNS. Its security shortcomings
were ﬁrst discussed in [7, 47]. The Internet Engineering
Task Force (IETF) launched the DNSSEC effort in 1993 to
secure DNS. Presently, the DNSSEC working group pro-
posal is nearing operational readiness, bringing with it the
promise of a trustworthy name service.
2.3. DNSSEC Overview
DNSSEC is a collection of proposals for securing the
data stored in DNS. Using cryptographic techniques, re-
sponses can be strongly authenticated, greatly reducing the
potential for abuse present in the current DNS. An IETF
draft [5] enumerates the threats DNSSEC is intended to
guard against. We focus here on the portions of DNSSEC
relevant to our work. A detailed overview appears in [3].
Zone Signing. A DNSSEC-enabled DNS server responsi-
ble for a given domain (called a zone) signs the resource
records comprising the zone with a public/private key pair
bound to that zone, and delivers those signatures to querying
clients. These Resource Record SIGnatures are stored in a
new DNS record type, RRSIG, which contains a signature
that authenticates a speciﬁc named set of resource records
(RRSet). Each named resource in a secured DNS zone will
have at least one associated RRSIG record.
DNSSEC responds to a query from a DNSSEC-enabled
client with the DNS record for the name speciﬁed, along
with the associated RRSIG record. The client obtains the
public key associated with the zone and veriﬁes the pro-
vided signature. If the signature is valid, the client can trust
that the response was provided by the authoritative source.
Key Distribution in DNSSEC. To verify signatures, the
client must be either statically conﬁgured with the public
key for the queried zone (the zone key), or be able to obtain
and authenticate it. To facilitate distribution of zone keys,
DNSSEC deﬁnes a DNSKEY resource record type.
A DNS client queries for a zone key in the same way it
queries for any other DNS record type. To authenticate the
retrieved key, the DNSKEY record must be signed by a key
which the client has previously authenticated, typically the
key of the parent domain. By recursively requesting keys
and moving up the DNS hierarchy, the client will either ﬁnd
a trusted key, or exhaust the name space without doing so,
causing the key authentication attempt to fail. (This descrip-
tion is conceptually sufﬁcient, but not technically precise.
Full details are in [27].)
DNSSEC Implementation Status. DNSSEC has recently
matured into an implementable system. An IETF draft ex-
ists that updates RFC 2535 and details the DNS protocol
changes required to support DNSSEC [4]. A DNSSEC de-
ployment working group has been formed with support of
NIST and ICANN. Consensus is growing that DNSSEC is
largely ready for deployment, and that 2006 may see the
beginnings of wide-spread adoption.
2.4. Barriers to Distributing Keys in DNS
Unfortunately, DNSSEC does not generally solve au-
thenticated key distribution. The KEY record was originally
intended to store various key types, including application
keys [14]. This decision was explicitly reversed due to scal-
ability concerns, query interface limitations, and adminis-
trative authority mismatches [33].
Scalability.
Proposals to house per-user information in
DNS did not anticipate that the growth in Internet user pop-
ulation would far surpass the growth in DNS-registered host
systems. Estimates for 2004 suggest about 945 million
users [11], compared with 230 million hosts [30].
Adding DNSSEC signature records to a zone increases
the size of the zone data by a factor of 8 or 9 [24],
and adding per-user keys and their signatures would fur-
ther increase the size of the zone data. Finally, DNS
has been designed and optimized for very small (∼300 B)
query/response exchanges. Returning key data and associ-
ated signatures (∼1.2 KB) in DNS responses would signiﬁ-
cantly increase network load.
Query Interface.
The DNS query interface does not
match the requirements of an application seeking authenti-
cated key distribution. Different types of keys stored in KEY
records were to be differentiated by subtype, so that a single
named entity may have multiple key records, each storing a
different type of key. Unfortunately, the DNS resolver in-
terface does not support query by subtype, so the client was
forced to retrieve all key records present for the named en-
tity before sifting through the results for the “right one.”
Since DNSSEC internally requires keys retrieved from for-
eign servers, this affected not only applications but the efﬁ-
ciency of the name service itself.
Administrative Authority.
DNS data tends to change
slowly and is under the control of a domain administrator.
Allowing users some level of direct control over their keys
would violate the existing administrative model. Support-
ing dynamic DNS update in the context of DNSSEC is dif-
ﬁcult in general; RFC 3007 discusses it in detail and several
researchers have contributed solutions [20, 48].
3. Related Work
Here we brieﬂy survey previous approaches to key dis-
tribution, from application-speciﬁc to general approaches.
3.1. In-Band Key Transmission
A common approach to key distribution is to relegate it to
the communication protocol. The SSH and SSL/TLS proto-
cols both transmit the necessary keying information during
connection setup, but use different authentication methods.
Secure Shell (SSH). SSH performs initial key authentica-
tion by asking the user to certify the key-host association. A
hash of the public key (a key ﬁngerprint) is then stored lo-
cally. Subsequent connections use this stored ﬁngerprint to
authenticate known hosts without further user intervention.
This approach assumes that the end-user will know the
appropriate key ﬁngerprint during initial connection setup.
While it limits the window for a successful attack to the
initial connection, it does not eliminate the threat. This is
generally an acceptable level of risk mitigation when trust
relationships are fairly static (users tend to repeatedly con-
nect to the same small set of hosts). However, this sort of
manual, out-of-band, process is not viable when the trust
relationships are more dynamic (i.e. end-user to end-user
communication).
Secure Socket Layer (SSL/TLS). SSL/TLS uses the cer-
tifying authority model; the connecting client is provided
with the server’s certiﬁcate, signed by one or more CAs.
Clients (such as web browsers) are preconﬁgured with a
number of “root certiﬁcates,” which are public keys of
trusted CAs. If the certiﬁcate provided by the server has
been signed by a statically known certifying authority, the
connection is established without user intervention.
3.2. Dedicated Key Distribution Services
Another approach to key distribution is to deploy a dedi-
cated distributed service to handle the registration and query
of public keys. Several proposals have been made, mainly
differing on how keys are named and bound to individuals,
how clients verify responses, and how servers distribute the
responsibility of key distribution.
PGP/GPG. The MIT Pretty Good Privacy (PGP) key
server is perhaps the best known dedicated key distribution
service. PGP and Gnu Privacy Guard (GPG) [25] support
locating and publishing keys via the PGP key-server.
SDSI/SPKI. The Simple Distributed Security Infrastruc-
ture (SDSI) [38] was intended as an integrated solution
to authentication and authorization based on capabilities.
This proposal has subsequently been incorporated into the
IETF’s Simple Public Key Infrastructure (SPKI) working
group’s proposal [19]. In SPKI certiﬁcates bind speciﬁc au-
thorizations to keys. Names in SPKI can be assigned to
keys and can exist in a local namespace or rooted in a global
namespace such as DNS.
SPKI effectively switches from a model that separates
authentication from authorization to a model that performs
these functions jointly. This pushes the burden of key dis-
tribution onto applications making authorization choices
about the resources they control. These requirements have
signiﬁcantly hindered the further development and deploy-
ment of SPKI.
Scalable Key Distribution Hierarchy. McDaniel and
Jamin [34] describe a scheme for a hierarchical set of certiﬁ-
cate servers similar in capabilities to the certiﬁcation author-
ity requirements outlined in the Privacy Enhanced Email
(PEM) speciﬁcation [32]. The authors describe their de-
sign, which is based on a well-meshed trust graph and is
not directly related to the DNS namespace, and examine
its behavior under hypothesized load. They do not discuss
operational issues such as off-line signing keys and hetero-
geneous keys.
3.3. Distribution by Directory Service
Many proposals have chosen to incorporate key distribu-
tion into existing directory services.
X.500, LDAP. ISO and CCITT maintain recommendations
for distributed replicable directory services under the name
X.500 [31]. Clients typically access these directories us-
ing the LDAP protocol deﬁned in RFC 1487. Conﬁguration
and maintenance of X.500/LDAP directories is perceived as
difﬁcult and complex. Standard schemas exist for various
object types, including X.509 certiﬁcates [9], but are not
always used and LDAP is often forbidden across network
boundaries, creating disconnected islands of information.
Most damagingly, X.500 complexity is exposed be-
yond implementor and administrator. Users searching an
X.500/LDAP directory must specify values for unfamiliar
terms such as “Search Base” and “Search Scope.” Correct
values are required to obtain useful search results, and most
tools provide little guidance. X.500/LDAP has not emerged
as a practical Internet-wide key distribution tool.
DNS. Efforts have been made to standardize storing keys of
various types [15, 18, 16, 17, 41] and X.509 certiﬁcates [18]
within DNS. Yahoo! has submitted an IETF draft [12] that
describes using DNS to distribute public keys for authenti-
cating email delivery.
The FreeS/WAN Project [21], an open source IPSec im-
plementation, supports “opportunistic encryption;” by auto-
matically retrieving host keys from DNS, end-to-end IPSec
encryption can be setup without user intervention. While
the FreeS/WAN solution made retrieving keys from DNS
invisible, it did not address key publication.
In [23], Galvin presented an overview of DNSSEC and