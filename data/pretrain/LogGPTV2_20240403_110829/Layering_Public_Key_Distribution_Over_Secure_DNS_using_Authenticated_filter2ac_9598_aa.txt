# Layering Public Key Distribution Over Secure DNS using Authenticated Delegation

**Authors:**
- John P. Jones
- Daniel F. Berger
- Chinya V. Ravishankar

**Department of Computer Science & Engineering, University of California, Riverside**
- Email: {jjones, dberger, ravi}@cs.ucr.edu
- Address: Riverside, CA, 92521

## Abstract
While cryptographic specifications exist for securing email, they have not been widely adopted. We present the Internet Key Service (IKS), a distributed architecture for authenticated public key distribution, layered on Secure DNS (DNSSEC). Clients use DNSSEC to securely discover the identities of the relevant IKS servers and send key lookup or management requests directly to these servers using a special-purpose protocol. Clients authenticate keys retrieved from IKS servers using key commitments published in DNSSEC. IKS derives its authentication authority from the authority DNS domains have over Internet names. The IKS architecture is loosely coupled with DNS to minimize overhead on DNS servers. We also present RIKS, a prototype IKS implementation.

## 1. Introduction
Digital communication has become pervasive, but there are few guarantees that such communications are secure and private. Security and privacy threats, once considered hypothetical, are now real. For example, in 2004, an arrest was publicly acknowledged as resulting from passive email monitoring [2].

Although cryptographic techniques can address these concerns, no infrastructure exists to facilitate their use by various applications across the Internet. Cryptography has been most successfully deployed in protocols with clear client-server relationships, such as Secure Socket Layer/Transport Layer Security (SSL/TLS) [22, 13] and Secure Shell (SSH) [50]. Proposals for securing less hierarchical applications, such as Privacy Enhanced Mail (PEM) [32] and Secure Multimedia Internet Mail Extensions (S/MIME) [29], have not gained widespread adoption.

### 1.1. The Internet Key Service
We focus on a crucial capability for the pervasive adoption of cryptography: simple, scalable, and authenticated public key distribution. We present the Internet Key Service (IKS), a practical and deployable architecture for providing application-independent public key distribution layered on top of Secure DNS (DNSSEC). Our approach is flexible and extensible, capable of storing and serving a variety of key types to support various applications.

The Internet Key Service bases its key-authentication authority on DNS's authority to manage Internet names. This is significant because all global names encountered on the Internet, regardless of their syntax or structure, ultimately represent resources or entities that are only addressable within the DNS namespace. A DNS domain has naming authority over the objects that belong to it, so, in this sense, all names are ultimately DNS names.

The DNS namespace is the Internet-wide standard for defining who has control over which names. IKS is loosely coupled with DNS, allowing it to provide specialized key distribution protocols without requiring changes to or imposing significant overhead on DNS.

The remainder of this document is organized as follows:
- **Section 2** provides necessary background.
- **Section 3** briefly surveys related work.
- **Section 4** gives a high-level view of our proposed solution.
- **Section 5** delves deeper into the protocol design.
- **Section 6** presents the Riverside Internet Key Server (RIKS), our proof-of-concept implementation of IKS.
- **Section 7** summarizes our findings and points out avenues for future exploration.

## 2. Background
We assume familiarity with asymmetric (public key) cryptography, digital signatures, and one-way hash functions. Readers unfamiliar with these topics are encouraged to consult a cryptography text, such as [42].

### 2.1. Key Authentication
Key authentication is the process of validating the binding of a cryptographic key to a named entity. Public key cryptosystems simplify, but do not solve, the problem of key distribution, as public keys must be authenticated to prevent impersonation and man-in-the-middle attacks. The most widely used approaches for solving the key authentication problem are the certifying authority model, exemplified by SSL/TLS, and the web-of-trust model, exemplified by Pretty Good Privacy (PGP).

#### Certifying Authorities
The certifying authority (CA) model assumes a small number of highly trusted individuals or organizations. Each key-identity binding must be certified by one of these trusted entities. Certificate verification requires the certifier’s public key to first be authenticated. In practice, a small set of root certificates, which are public keys for various recognized certifying authorities, are typically preloaded into the cryptographic application.

#### Webs Of Trust
The web-of-trust model relies on peers to vouch for the validity and trustworthiness of other peers. An unfamiliar key is accompanied by affirmations (digital signatures) from a set of community members who assert that the provided key is associated with the claimed identity. A recipient accepts the key only upon receiving enough verifiable affirmations from individuals they trust.

IKS follows the certifying authority model; the IKS server for a domain acts as a CA for that domain, and its public key can be authenticated by its key commitment published via DNSSEC.

### 2.2. The Domain Name System (DNS)
The Domain Name System (DNS) [36] is the most effective and widely-used mechanism for name registration and resolution on the Internet and is a critical component of the Internet infrastructure. DNS names are assigned from a hierarchical namespace, and organizations are granted control over a sub-tree rooted at the domain they have registered. The DNS top-level domains (e.g., .com, .org, .edu, .us, .uk) are administered by ICANN. Domain administrators manage DNS servers to provide authoritative answers to queries regarding the domain and to participate in resolving DNS queries for clients belonging to the domain.

Security was not a primary consideration during the design and implementation of DNS. Its security shortcomings were first discussed in [7, 47]. The Internet Engineering Task Force (IETF) launched the DNSSEC effort in 1993 to secure DNS. Presently, the DNSSEC working group proposal is nearing operational readiness, bringing with it the promise of a trustworthy name service.

### 2.3. DNSSEC Overview
DNSSEC is a collection of proposals for securing the data stored in DNS. Using cryptographic techniques, responses can be strongly authenticated, greatly reducing the potential for abuse present in the current DNS. An IETF draft [5] enumerates the threats DNSSEC is intended to guard against. We focus here on the portions of DNSSEC relevant to our work. A detailed overview appears in [3].

#### Zone Signing
A DNSSEC-enabled DNS server responsible for a given domain (called a zone) signs the resource records comprising the zone with a public/private key pair bound to that zone and delivers those signatures to querying clients. These Resource Record SIGnatures (RRSIG) are stored in a new DNS record type, which contains a signature that authenticates a specific named set of resource records (RRSet). Each named resource in a secured DNS zone will have at least one associated RRSIG record.

DNSSEC responds to a query from a DNSSEC-enabled client with the DNS record for the specified name, along with the associated RRSIG record. The client obtains the public key associated with the zone and verifies the provided signature. If the signature is valid, the client can trust that the response was provided by the authoritative source.

#### Key Distribution in DNSSEC
To verify signatures, the client must either be statically configured with the public key for the queried zone (the zone key) or be able to obtain and authenticate it. To facilitate the distribution of zone keys, DNSSEC defines a DNSKEY resource record type.

A DNS client queries for a zone key in the same way it queries for any other DNS record type. To authenticate the retrieved key, the DNSKEY record must be signed by a key that the client has previously authenticated, typically the key of the parent domain. By recursively requesting keys and moving up the DNS hierarchy, the client will either find a trusted key or exhaust the name space without doing so, causing the key authentication attempt to fail. (This description is conceptually sufficient, but not technically precise. Full details are in [27].)

#### DNSSEC Implementation Status
DNSSEC has recently matured into an implementable system. An IETF draft exists that updates RFC 2535 and details the DNS protocol changes required to support DNSSEC [4]. A DNSSEC deployment working group has been formed with support from NIST and ICANN. Consensus is growing that DNSSEC is largely ready for deployment, and 2006 may see the beginnings of widespread adoption.

### 2.4. Barriers to Distributing Keys in DNS
Unfortunately, DNSSEC does not generally solve authenticated key distribution. The KEY record was originally intended to store various key types, including application keys [14]. This decision was explicitly reversed due to scalability concerns, query interface limitations, and administrative authority mismatches [33].

#### Scalability
Proposals to house per-user information in DNS did not anticipate the rapid growth in the Internet user population compared to the growth in DNS-registered host systems. Estimates for 2004 suggest about 945 million users [11], compared with 230 million hosts [30].

Adding DNSSEC signature records to a zone increases the size of the zone data by a factor of 8 or 9 [24], and adding per-user keys and their signatures would further increase the size of the zone data. Finally, DNS has been designed and optimized for very small (∼300 B) query/response exchanges. Returning key data and associated signatures (∼1.2 KB) in DNS responses would significantly increase network load.

#### Query Interface
The DNS query interface does not match the requirements of an application seeking authenticated key distribution. Different types of keys stored in KEY records were to be differentiated by subtype, so that a single named entity may have multiple key records, each storing a different type of key. Unfortunately, the DNS resolver interface does not support query by subtype, so the client was forced to retrieve all key records present for the named entity before sifting through the results for the "right one." Since DNSSEC internally requires keys retrieved from foreign servers, this affected not only applications but the efficiency of the name service itself.

#### Administrative Authority
DNS data tends to change slowly and is under the control of a domain administrator. Allowing users some level of direct control over their keys would violate the existing administrative model. Supporting dynamic DNS update in the context of DNSSEC is difficult in general; RFC 3007 discusses it in detail, and several researchers have contributed solutions [20, 48].

## 3. Related Work
Here we briefly survey previous approaches to key distribution, from application-specific to general approaches.

### 3.1. In-Band Key Transmission
A common approach to key distribution is to relegate it to the communication protocol. The SSH and SSL/TLS protocols both transmit the necessary keying information during connection setup but use different authentication methods.

#### Secure Shell (SSH)
SSH performs initial key authentication by asking the user to certify the key-host association. A hash of the public key (a key fingerprint) is then stored locally. Subsequent connections use this stored fingerprint to authenticate known hosts without further user intervention. This approach assumes that the end-user will know the appropriate key fingerprint during initial connection setup. While it limits the window for a successful attack to the initial connection, it does not eliminate the threat. This is generally an acceptable level of risk mitigation when trust relationships are fairly static (users tend to repeatedly connect to the same small set of hosts). However, this sort of manual, out-of-band process is not viable when the trust relationships are more dynamic (i.e., end-user to end-user communication).

#### Secure Socket Layer (SSL/TLS)
SSL/TLS uses the certifying authority model; the connecting client is provided with the server’s certificate, signed by one or more CAs. Clients (such as web browsers) are preconfigured with a number of "root certificates," which are public keys of trusted CAs. If the certificate provided by the server has been signed by a statically known certifying authority, the connection is established without user intervention.

### 3.2. Dedicated Key Distribution Services
Another approach to key distribution is to deploy a dedicated distributed service to handle the registration and query of public keys. Several proposals have been made, mainly differing on how keys are named and bound to individuals, how clients verify responses, and how servers distribute the responsibility of key distribution.

#### PGP/GPG
The MIT Pretty Good Privacy (PGP) key server is perhaps the best-known dedicated key distribution service. PGP and Gnu Privacy Guard (GPG) [25] support locating and publishing keys via the PGP key server.

#### SDSI/SPKI
The Simple Distributed Security Infrastructure (SDSI) [38] was intended as an integrated solution to authentication and authorization based on capabilities. This proposal has subsequently been incorporated into the IETF’s Simple Public Key Infrastructure (SPKI) working group’s proposal [19]. In SPKI, certificates bind specific authorizations to keys. Names in SPKI can be assigned to keys and can exist in a local namespace or rooted in a global namespace such as DNS.

SPKI effectively switches from a model that separates authentication from authorization to a model that performs these functions jointly. This pushes the burden of key distribution onto applications making authorization choices about the resources they control. These requirements have significantly hindered the further development and deployment of SPKI.

#### Scalable Key Distribution Hierarchy
McDaniel and Jamin [34] describe a scheme for a hierarchical set of certificate servers similar in capabilities to the certification authority requirements outlined in the Privacy Enhanced Email (PEM) specification [32]. The authors describe their design, which is based on a well-meshed trust graph and is not directly related to the DNS namespace, and examine its behavior under hypothesized load. They do not discuss operational issues such as offline signing keys and heterogeneous keys.

### 3.3. Distribution by Directory Service
Many proposals have chosen to incorporate key distribution into existing directory services.

#### X.500, LDAP
ISO and CCITT maintain recommendations for distributed replicable directory services under the name X.500 [31]. Clients typically access these directories using the LDAP protocol defined in RFC 1487. Configuration and maintenance of X.500/LDAP directories are perceived as difficult and complex. Standard schemas exist for various object types, including X.509 certificates [9], but are not always used, and LDAP is often forbidden across network boundaries, creating disconnected islands of information.

Most damagingly, X.500 complexity is exposed beyond implementors and administrators. Users searching an X.500/LDAP directory must specify values for unfamiliar terms such as "Search Base" and "Search Scope." Correct values are required to obtain useful search results, and most tools provide little guidance. X.500/LDAP has not emerged as a practical Internet-wide key distribution tool.

#### DNS
Efforts have been made to standardize storing keys of various types [15, 18, 16, 17, 41] and X.509 certificates [18] within DNS. Yahoo! has submitted an IETF draft [12] that describes using DNS to distribute public keys for authenticating email delivery.

The FreeS/WAN Project [21], an open-source IPSec implementation, supports "opportunistic encryption" by automatically retrieving host keys from DNS, enabling end-to-end IPSec encryption without user intervention. While the FreeS/WAN solution made retrieving keys from DNS invisible, it did not address key publication.

In [23], Galvin presented an overview of DNSSEC and its implications for key distribution.