链接器 `/lib64/ld-linux-x86–64.so.2` 是一个指向 `ld-2.30.so` 的软链接，它也是我的 Linux 发行版的默认链接器：
```
$ file /lib64/ld-linux-x86-64.so.2
/lib64/ld-linux-x86-64.so.2: symbolic link to ld-2.31.so
```
回头看看 `ldd` 命令的输出，你还可以看到（在 `libmy_shared.so` 边上）每个依赖都以一个数字结尾（例如 `/lib64/libc.so.6`）。共享对象的常见命名格式为：
```
libXYZ.so..
```
在我的系统中，`libc.so.6` 也是指向同一目录下的共享对象 `libc-2.31.so` 的软链接。
```
$ file /lib64/libc.so.6
/lib64/libc.so.6: symbolic link to libc-2.31.so
```
如果你正在面对一个应用因为加载库的版本不对导致无法启动的问题，有很大可能你可以通过检查整理这些软链接或者确定正确的搜索路径（查看下方“动态加载器：[ld.so](http://ld.so)”一节）来解决这个问题。
更为详细的信息请查看 [ldd 手册页](https://www.man7.org/linux/man-pages/man1/ldd.1.html)。
#### 动态加载
动态加载的意思是一个库（例如一个 `.so` 文件）在程序的运行时被加载。这是使用某种特定的编程方法实现的。
当一个应用使用可以在运行时改变的插件时，就会使用动态加载。
查看 [dlopen 手册页](https://www.man7.org/linux/man-pages/man3/dlopen.3.html) 获取更多信息。
#### 动态加载器：[ld.so](http://ld.so)
在 Linux 系统中，你几乎总是正在跟共享库打交道，所以必须有个机制来检测一个应用的依赖并将其加载进内存中。
`ld.so` 按以下顺序在这些地方寻找共享对象：
1. 应用的绝对路径或相对路径下（用 GCC 编译器的 `-rpath` 选项硬编码的）
2. 环境变量 `LD_LIBRARY_PATH`
3. `/etc/ld.so.cache` 文件
需要记住的是，将一个库加到系统库归档 `/usr/lib64` 中需要管理员权限。你可以手动拷贝 `libmy_shared.so` 至库归档中来让应用可以运行，而避免设置 `LD_LIBRARY_PATH`。
```
unset LD_LIBRARY_PATH
sudo cp libmy_shared.so /usr/lib64/
```
当你运行 `ldd` 时，你现在可以看到归档库的路径被展示出来：
```
$ ldd my_app
        linux-vdso.so.1 (0x00007ffe82fab000)
        libmy_shared.so => /lib64/libmy_shared.so (0x00007f0a963e0000)
        libc.so.6 => /lib64/libc.so.6 (0x00007f0a96216000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f0a96401000)
```
### 在编译时定制共享库
如果你想你的应用使用你的共享库，你可以在编译时指定一个绝对或相对路径。
编辑 `makefile`（第 10 行）然后通过 `make -B` 来重新编译程序。然后 `ldd` 输出显示 `libmy_shared.so` 和它的绝对路径一起被列出来了。
把这个：
```
CFLAGS =-Wall -Werror -Wl,-rpath,$(shell pwd)
```
改成这个（记得修改用户名）：
```
CFLAGS =/home/stephan/library_sample/libmy_shared.so
```
然后重新编译：
```
$ make
```
确认下它正在使用你设定的绝对路径，你可以在输出的第二行看到：
```
$ ldd my_app
    linux-vdso.so.1 (0x00007ffe143ed000)
        libmy_shared.so => /lib64/libmy_shared.so (0x00007fe50926d000)
        /home/stephan/library_sample/libmy_shared.so (0x00007fe509268000)
        libc.so.6 => /lib64/libc.so.6 (0x00007fe50909e000)
        /lib64/ld-linux-x86-64.so.2 (0x00007fe50928e000)
```
这是个不错的例子，但是如果你在编写给其他人用的库，它是怎样工作的呢？新库的路径可以通过写入 `/etc/ld.so.conf` 或是在 `/etc/ld.so.conf.d/` 目录下创建一个包含路径的 `.conf` 文件来注册至系统。之后，你必须执行 `ldconfig` 命令来覆写 `ld.so.cache` 文件。这一步有时候在你装了携带特殊的共享库的程序来说是不可省略的。
查看 [ld.so 的手册页](https://www.man7.org/linux/man-pages/man8/ld.so.8.html) 获取更多详细信息。
### 怎样处理多种架构
通常来说，32 位和 64 位版本的应用有不同的库。下面列表展示了不同 Linux 发行版库的标准路径：
**红帽家族**
* 32 位：`/usr/lib`
* 64 位：`/usr/lib64`
**Debian 家族**
* 32 位：`/usr/lib/i386-linux-gnu`
* 64 位：`/usr/lib/x86_64-linux-gnu`
**Arch Linux 家族**
* 32 位：`/usr/lib32`
* 64 位：`/usr/lib64`
[FreeBSD](https://opensource.com/article/20/5/furybsd-linux)（技术上来说不算 Linux 发行版）
* 32 位：`/usr/lib32`
* 64 位：`/usr/lib`
知道去哪找这些关键库可以让库链接失效的问题成为历史。
虽然刚开始会有点困惑，但是理解 Linux 库的依赖管理是一种对操作系统掌控感的表现。在其他应用程序中运行这些步骤，以熟悉常见的库，然后继续学习怎样解决任何你可能遇到的库的挑战。
---
via: 
作者：[Stephan Avenwedde](https://opensource.com/users/hansic99) 选题：[lujun9972](https://github.com/lujun9972) 译者：[tt67wq](https://github.com/tt67wq) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出