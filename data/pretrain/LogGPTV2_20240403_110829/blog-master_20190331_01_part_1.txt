## PostgreSQL 12 preview - partitions pruned at plan time. 原生分区表性能提升23.5倍，已与pg_pathman持平。   
### 作者                                                    
digoal                                                    
### 日期                                                    
2019-03-31                                                    
### 标签                                                    
PostgreSQL , 原生分区表 , ppas , lock , cache , plan , 性能 , pg_pathman        
----                                                    
## 背景       
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=428b260f87e8861ba8e58807b69d433db491c4f4  
PostgreSQL 12 原生分区表性能大幅度提升。已与pg_pathman持平。此前用户可以使用pg_pathman加速或者使用阿里云PPAS。    
[《PostgreSQL 商用版本EPAS(阿里云ppas(Oracle 兼容版)) - 分区表性能优化 (堪比pg_pathman)》](../201801/20180122_03.md)    
性能提升23.57倍。  
版本 | TPS  
---|---  
PG 11 | 11348  
PG 12 | 267447  
在12前，使用原生分区表，PLAN时需要对所有分区创建RangeTblEntry与RelOptInfo结果，同时需要加锁。  
pg_pathman插件的分区功能使用custom plan的方式，没有以上问题。所以很多用户会选择PG_PATHMAN来作为分区表使用。（当然pg_pathman还支持interval分区（自动添加分区）等功能。）  
现在PG 12，原生分区功能，已经不存在如上问题。  
PG 12带来的提升包括：  
1、内存使用量降低  
2、plan更快  
3、整体TPS性能提升  
```  
Speed up planning when partitions can be pruned at plan time.  
Previously, the planner created RangeTblEntry and RelOptInfo structs  
for every partition of a partitioned table, even though many of them  
might later be deemed uninteresting thanks to partition pruning logic.  
This incurred significant overhead when there are many partitions.  
Arrange to postpone creation of these data structures until after  
we've processed the query enough to identify restriction quals for  
the partitioned table, and then apply partition pruning before not  
after creation of each partition's data structures.  In this way  
we need not open the partition relations at all for partitions that  
the planner has no real interest in.  
For queries that can be proven at plan time to access only a small  
number of partitions, this patch improves the practical maximum  
number of partitions from under 100 to perhaps a few thousand.  
Amit Langote, reviewed at various times by Dilip Kumar, Jesper Pedersen,  
Yoshikazu Imai, and David Rowley  
Discussion: https://postgr.es/m/PI:EMAIL  
```  
## 例子  
```  
do language plpgsql $$  
declare  
begin  
  execute format('create unlogged table p (id int primary key, info text, crt_time timestamp) partition by hash (id)');  
  for i in 0..255 loop  
    execute format('create unlogged table p%s partition of p for values WITH (MODULUS %s, REMAINDER %s)', i, 256, i);  
  end loop;  
end;  
$$;  
```  
### 1、PG 12  
PG 12 在操作单一分区时，很简单的方法可以界定以上PATCH，LOCK仅单个分区以及主分区。  
```  
postgres=# begin;  
BEGIN  
postgres=# insert into p values (1,'test',now());  
INSERT 0 1  
postgres=# select pid,relation::regclass,* from pg_locks ;  
  pid  | relation |   locktype    | database | relation | page | tuple | virtualxid | transactionid | classid | objid | objsubid | virtualtransaction |  pid  |       mode       | granted | fastpath   
-------+----------+---------------+----------+----------+------+-------+------------+---------------+---------+-------+----------+--------------------+-------+------------------+---------+----------  
 57519 | p184     | relation      |    13577 |    21711 |      |       |            |               |         |       |          | 3/1106134          | 57519 | RowExclusiveLock | t       | t  
 57519 | pg_locks | relation      |    13577 |    12137 |      |       |            |               |         |       |          | 3/1106134          | 57519 | AccessShareLock  | t       | t  
 57519 | p        | relation      |    13577 |    20234 |      |       |            |               |         |       |          | 3/1106134          | 57519 | AccessShareLock  | t       | t  
 57519 | p        | relation      |    13577 |    20234 |      |       |            |               |         |       |          | 3/1106134          | 57519 | RowExclusiveLock | t       | t  
 57519 |          | virtualxid    |          |          |      |       | 3/1106134  |               |         |       |          | 3/1106134          | 57519 | ExclusiveLock    | t       | t  
 57519 |          | transactionid |          |          |      |       |            |      34480647 |         |       |          | 3/1106134          | 57519 | ExclusiveLock    | t       | f  
(6 rows)  
```  
### 2、PG 12以前的版本  
PG 12 以前的版本，在操作单一分区时，LOCK所有分区。  
```  
postgres=# begin;  
BEGIN  
postgres=# insert into p values (1,'test',now());  
INSERT 0 1  
postgres=# select pid,relation::regclass,* from pg_locks ;  