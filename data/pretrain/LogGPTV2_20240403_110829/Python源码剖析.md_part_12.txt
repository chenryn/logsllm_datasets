在Win32平台下：
statie PyStringObject charactersTucHAR MAx +1J:
设计了这样一个对象池characters：
Python的设计者为ryStringObject中的一个字节的字符对应的ryStringobject对象也
冲池。在“尊老爱幼”这一点上，Pyhon是做得相当好的，类似于小整数对象的对象池，
define DCHAR MAX
Object对象，如果想创建SSTATE_INTERNED_IMMORTAL状态的对象，必须要通过另外的
永远不会被销毁的，它将与Python虚拟机同年同月同日死。
中可以清晰地看到，显然，SSTATE_INTERNED_IMMORTAL状态的 PyStringObject 对象是
态，而另一类则处于sSTATE_INTERNED_MORTAL状态，这两种状态的区别在string_dealloc
对象intemed中，因为PyDictobject必须以Pyobject*指针作为键。
样一个临时的pyStringobject 对象来完成interm操作。为什么呢？答案就在PyDictobject
void PyString_InternImmortal(PyObdect**p)
[Btringobject.c]
字符缓冲池
在Python的整数对象体系中，小整数的缓冲池是在Pyhon初始化时被创建的，而字
当我们在创建一个pystringobject对象时，无论是通过调用pyString_FromString
其中的UCHAR_MAX是在系统头文件中定义的常量，这也是一个平台相关的常量，
在上一章对整数对象的剖析中我们看到，Pyuhon为小整数对象贴心地准备了专有的缓
关于pystringobject对象的interm机制，还有一点需要注意。实际上，被intern机
PyString_InteraInPlace(p)
临时对象照样被创建出来，实际上，仔细一想，就会发现在Pyton中，必须创建这
第3章
PyString_CHECK_INTERNED(*p)
(Pystring_
PY_INCREF(D）;
一深度探索动态语言核心技术
Python中的字符串对象
CHECK_INTERN
oxff
NED(p)
maximum unsigned char value*/
=SSTATE_INTERNED_IMMORTALY
SSTATE INTERNED_IMMORTAL;
---
## Page 87
冲池characters中。图3-3演示了缓存一个字符对应的PyStxingobject 对象的过程，
如下的操作：
缓冲的对象即可：
后检查字符缓冲池中是否已经有了这个字符的字符对象的缓冲，如果有，则直接返回这个
Pyobject*
Pyobject*Pystring_FromStringAndsize(const char *str,int size)
[stringobject.c]
[stringobject.c]
3条带有标号的曲线既代表指针，又代表进行操作的顺序：
先对所创建的字符串（字符）对象进行intern操作，再将inten的结果缓存到字符缓
同样，在创建PyStringobject时，会首先检查所要创建的是否是一个字符对象，然
将对象缓存至字符缓冲池中。
创建pystringobject 对象
Py_INCREP(OP):
PyString_InterninPlace(&t):
characters
PyString_FromStringAndsize(const char *str, int size)
图3-3创建字符对应的PyStringObject 对象
C&UCHAR_MAX]=OP
"p"
256个PyStringObject*
七
Python源码剖析
intermed
...
3.4字符缓冲池
一深度探索动态语言核心技术
3
"p”
---
## Page 88
Python源码剖析
3.5
tuple中的一组PyStringobject对象进行连接操作，这种做法只需要分配一次内存，执
须要创建一个新的pyStringobject对象。这样，如果要连接N个PyStringobject对象，
行效率将大大提高。
的执行效率。
那么就必须进行N-1次的内存申请及内存搬运的工作。毫无疑问，这将严重影响Pyhon
PyStringobject对象是一个不可变对象。这就意味着当进行字符串连接时，实际上是必
同样提供了利用“”操作符连接字符串的功能，然而不幸的是，这样的做法正是万恶之
源。
操作符将两个字符串连接在一起，得到一个新的字符事“pythonRuby”。当然，Pyhon中
下面我们就来看看这个在Pyhon中举足轻重的问题一字符串连接。
有一种说法，绝大部分执行效率特别低下的Pyon程序都是由于没有注意这个问题所致。
static
[stringobject.c]
PyStringObject效率相关问题
Pyobteet
通过“+”操作符对字符串进行连接时，会调用string_concat 函数：
假如现在有两个字符串“Python”和“Ruby”，在Java或C#中，都可以通过使用“
Python中通过“”进行字符串连接的方法效率极其低下，其根源在于Pyhon中的
关于PyStringObject，有一个地球人都知道的严重影响Python程序执行效率的问题，
第3章Python中的字符串对象
size = a->ob_size +b->ob_slze;
//计算字将串连接后的长度size
register
register unsigned int size;
下面我们通过考察源码来更细致地了解这一问题。
官方推荐的做法是通过利用pyStringObject对象的join操作来对存储在1ist或
register PyStringobjedE*op:
return (Pyobject*)op:
一深度探索动态语言核心技术
*bb)
string_concat (register PystringObject *a,
register
---
## Page 89
PyStringobject对象进行连接）：
利用PyStringobject对象的join操作，则会进行如下的动作（假设是对list中的
口
[stringobject.c]
对于任意两个pyStringobject对象的连接，就会进行一次内存申请的动作。而如果
for
int
size_
int
//假设调用aba.join（1ist）
#undef
memcpy(op->ob_sval +a->ob_size,b->ob_sval;（int) b->ob_size）;
Pyobj
memcpy(op->ob_6yal,
//将a和b中的字符拷贝到新创建的EyStringObject中
PyObject_INTT_VAR(op
op=（PyStringobject
/创建长度为sz的PyStringObject对
/获得11
yobleot
P+=n
Imline Pyobjeot_NewVar
size_tn
Pystring_As_
ZS
//seg为Python中的1ist 对象，
=01
iect
em
*D:
Sz
SZ
en.
(Pyobject
4=seplen;
Pystring GBm_sizE(item):
=0）
10:
PyStrino_AS_STRING(selE)
string_join(PyStringobject *gelf,Pyobiect *orig)
8eglen;
一个字符事，
STRING(Yes),
olnsU
11
a->ob Gval
NO
SlnOA
+）
累加获得连接1isE中所有字符事后的长度
那么selE就是“abc对应的 PyStringobjegt对象
其维护的用于存储字符的内存长度为Bi2e
这里获得其中第：个字符串
Python源码剖析
(int)
3.5PyStringObject效率相关问题
a->ob_size);
sizel:
(int)sz）
深度操索动态语言核心技术
---
## Page 90
3.6
60
Python源码剖析
object对象在interm后应该是同一个对象，图3-5是观察的结果：
就会对这个pyStringobject对象进行intem操作，所以我们预期内容相同的PyString
行时的行为进行两项观察。
地看到两种连接字符串的方法的区别：
操作符，待连接的PyStringobyect对象越多，效率的提升也越明显。
进行了一次内存空间的申请，就完成了N个PyStringObject对象的连接操作。相比于“+”
所有的pyStringobject对象维护的字符串都拷贝到新开辟的内存空间中。注意，这里只
统计这些PyStringobject对象所维护的字符串一共有多长，然后申请内存，将1ist中
Hack PyStringObject
通过在string_concat和string_join中添加输出代码，我们可以在图3-4中形象
第3章Python中的字符串对象
执行join操作时，会首先统计出在list中一共有多少个PyStrngobect对象，并
同上一章的HackPylIntObject一样，在这一节，我们将对PyStringobject对象在运
return resi
注（1>>2=x
address:0zB8C420
>>>o1=x
图3-5
S152s3
call string_join
图3-4
intern机制的观察结果
concat与join的区别
address0xB91060
address:0xB91060
=s>>len(s2)
>>>s2="python”
len(sl)
---
## Page 91
是对另外的PyStringobject对象调用len操作：
避免执行1en（）对引用计数的影响，我们并不会对a到e的字符对象调用1en操作，而
中添加代码，打印出缓冲池中从a到e的字符对象的引用计数信息。需要注意的是，为了
指针指向相同的对象。
论是对于一般的字符串，还是对于单个字符，intern机制最终都会使不同的pyStringobject
是字符串的长度信息，我们已经将之更换为引用计数信息）。从观察结果中可以看到，无
期间获得每一个Pystringobject对象的地址及其引用计数（在address下一行输出的不
冲池里的对象，而没有创建新的对象：
static void Showcharacter()
prantf("\nrefcnt
for(1=0；1>>len(s)
refant
refont
>>>len(s)
value:
value:
0
图3-6Python内部的字符缓冲池
99
99
99
6
P
口
---
## Page 93
4.1PyListObject对象
操作，可以在运行时动态地调整其所维护的内存和元素，所以，它还是一个可变对象。
是不同的。但是，和PyStringobject不同的是，pyListobject对象还支持插入删除等
中的PyListobject:vector
列表中，无一例外地存放的都是pPyobject*指针。所以实际上，我们可以这样看待Python
更为神似。
上，Python中的列表和C++的STL中1ist是大相径庭，相反，它与STL中的vector却
反射地将PyListObject与C++中的1ist对应起来（至少它们名字是相似的）。然而实际
vedtor等。每一种实现都为某种目的的元素聚集或元素访问提供了极大的方便。
中或标准库中实现这样的群。而且群的概念还进一步地细分为多种实现方式，比如map
要，C语言就内建了数组的概念，随着编程语言的发展，现在所有的编程语言都会在语言
为一个群，当然，还要可以向群中添加或删除元素。这样的群的概念对于编程语言十分重
[listobject.h]
先来看一看PyListobject的定义：
很显然，PyListObject一定是一个变长对象，因为不同的1ist中存储的元素个数会
PyListObject对象可以有效地支持对元素的插入、添加、删除等操作，在Pyhon的
PyLiatobject是Python提供的对列表的抽象，如果你熟悉C++，那么很可能会条件
//ob_1tem为指向元素列表的指针，实际上，Python中的1ist[0]就是ob_item[0]
PyObjeCt_VAR HEAD
元素的一个群是一个非常重要的抽象概念，我们可以将符合某一特性的一堆元素聚集
Python中的List对象
Python源码剖析
一深度探索动态语言核心技术
第
CHAPTER
A
---
## Page 94
Python源码剖析