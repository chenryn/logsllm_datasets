a probabilistic polynomial-time Turing machine with named
input and output tapes. The names determine how diﬀerent
IITMs are connected in a system of IITMs. An IITM runs in
one of two modes, CheckAddress and Compute. The Check-
Address mode is used as a generic mechanism for addressing
copies of IITMs in a system of IITMs, as explained below.
The runtime of an IITM may depend on the length of the
94k(cid:48) where the Mi and M(cid:48)
input received so far and in every activation an IITM may
perform a polynomial-time computation; this is why these
ITMs are called inexhaustible. However, in this extended
abstract we omit the details of the deﬁnition of IITMs, as
these details are not necessary to be able to follow the rest
of the paper.
A system S of IITMs is of the form S = M1 | ··· | Mk |
1 | ··· | !M(cid:48)
!M(cid:48)
j are IITMs such that
the names of input tapes of diﬀerent IITMs in the system
are disjoint. We say that the machines M(cid:48)
j are in the scope
of a bang operator. This operator indicates that in a run of
a system an unbounded number of (fresh) copies of a ma-
chine may be generated. Conversely, machines which are
not in the scope of a bang operator may not be copied. Sys-
tems in which multiple copies of machines may be generated
are often needed, e.g., in case of multi-party protocols or in
case a system describes the concurrent execution of multiple
instances of a protocol.
In a run of a system S at any time only one IITM is active
and all other IITMs wait for new input; the ﬁrst IITM to
be activated in a run of S is the so-called master IITM,
of which a system has at most one. To illustrate runs of
systems, consider, for example, the system S = M1 | !M2
and assume that M1 has an output tape named c, M2 has
an input tape named c, and M1 is the master IITM. (There
maybe other tapes connecting M1 and M2.) Assume that in
the run of S executed so far, two copies of M2, say M(cid:48)
2 and
M(cid:48)(cid:48)
2 , have been generated, in this order, and that M1 just
sent a message m on tape c. This message is delivered to a
copy of M2, since M2 has an input tape named c. The copy
of M2 to which m is sent is determined as follows. First,
M(cid:48)
2, the ﬁrst copy of M2, runs in the CheckAddress mode
with input m; this is a deterministic computation which
2 accepts m, then M(cid:48)
outputs “accept” or “reject”.
2
gets to process m and could, for example, send a message
back to M1. Otherwise, M(cid:48)(cid:48)
2 , the second copy of M2, is
run in CheckAddress mode with input m. If M(cid:48)(cid:48)
2 accepts m,
then M(cid:48)(cid:48)
2 gets to process m. Otherwise, a new copy M(cid:48)(cid:48)(cid:48)
2
of M2 with fresh randomness is generated and M(cid:48)(cid:48)(cid:48)
runs in
CheckAddress mode with input m. If M(cid:48)(cid:48)(cid:48)
2 accepts m, then
M(cid:48)(cid:48)(cid:48)
2 gets to process m. Otherwise, if no IITM accepts m, the
message m is dropped and the master IITM is activated, in
this case M1, and so on. The master IITM is also activated
if the currently active IITM does not produce output, i.e.,
stops in this activation without writing to any output tape.
A run stops if the master IITM does not produce output
(and hence, does not trigger another machine) or an IITM
outputs a message on a tape named decision. Such a message
is considered to be the overall output of the system.
If M(cid:48)
2
We will consider so-called well-formed systems, which sat-
isfy a simple syntactic condition that guarantees polynomial
runtime of a system.
Two systems P and Q are called indistinguishable (P ≡
Q) iﬀ the diﬀerence between the probability that P outputs
1 (on the decision tape) and the probability that Q outputs 1
(on the decision tape) is negligible in the security parameter.
Given an IITM M , we will often use its identiﬁer (ID)
version M to be able to address multiple copies of M . The
identiﬁer version M of M is an IITM which simulates M
within a “wrapper”. The wrapper requires that all messages
received have to be preﬁxed by a particular ID, e.g., a session
ID (SID) or party ID (PID); other messages will be rejected
in the CheckAddress mode. Before giving a message to M ,
the wrapper strips oﬀ the ID. Messages sent out by M are
preﬁxed with this ID by the wrapper. The ID that M will
use is the one with which M was ﬁrst activated. We often
refer to M by session version or party version of M if the
ID is meant to be a SID or PID, respectively. For exam-
ple, if M speciﬁes an ideal functionality, then !M denotes
the multi-session version of M , i.e., a system with an un-
bounded number of copies of M where every copy of M can
be addresses by an SID. Given a system S, its identiﬁer (ID)
version S is obtained by replacing all IITMs in S by their
ID version. For example, S = M | !M(cid:48) for S = M | !M(cid:48).
4.2 Notions of Simulation-Based Security
We need the following terminology. For a system S, the in-
put/output tapes of IITMs in S that do not have a matching
output/input tape are called external. We group these tapes
into I/O and network tapes. We consider three diﬀerent
types of systems, modeling i) real and ideal protocols/func-
tionalities, ii) adversaries and simulators, and iii) environ-
ments: Protocol systems and environmental systems are sys-
tems which have an I/O and network interface, i.e., they may
have I/O and network tapes. Adversarial systems only have
a network interface. Environmental systems may contain a
master IITM. We can now deﬁne strong simulatability, other
equivalent security notions, such as black-box simulatability
and (dummy) UC can be deﬁned in a similar way [23].
Definition 5. Let P and F be protocol systems with the
same I/O interface, the real and the ideal protocol, respec-
tively. Then, P realizes F (P ≤ F) iﬀ there exists an adver-
sarial system S (a simulator) such that the systems P and
S |F have the same external interface and for all environ-
mental systems E, connecting only to the external interface
of P (and hence, S |F) it holds that E |P ≡ E |S |F.
4.3 Composition Theorems
We restate the composition theorems from [23]. The ﬁrst
composition theorem handles concurrent composition of a
ﬁxed number of protocol systems. The second one guaran-
tees secure composition of an unbounded number of copies
of a protocol system.
Theorem 1. Let P1,P2,F1,F2 be protocol systems such
that P1 and P2 as well as F1 and F2 only connect via their
I/O interfaces, P1 |P2 and F1 |F2 are well-formed, and Pi ≤
Fi, for i ∈ {1, 2}. Then, P1 |P2 ≤ F1 |F2.
Theorem 2. Let P,F be protocol systems such that P ≤
F. Then, !P ≤ !F. (Recall that P and F are the session
versions of P and F, respectively.)
Theorems 1 and 2 can be applied iteratively, to get more
and more complex systems. For example, using that ≤ is
reﬂexive, we obtain as a corollary of the above theorems that
P ≤ F implies Q| !P ≤ Q| !F for any protocol system Q,
i.e., Q using an unbounded number of copies of P realizes
Q using an unbounded number of copies of F.
IDEAL FUNCTIONALITIES
5.
We recall two ideal functionalities that we use in this pa-
per, namely Fke for ideal key exchange and Fenc for ideal
symmetric encryption.
955.1 The Key Exchange Functionality
We use the key exchange functionality Fke as speciﬁed in
[14]. This functionality describes one session of an ideal
key exchange between two parties.
It waits for key ex-
change requests from the two parties and if the simulator
(ideal adversary) sends a message for one party to ﬁnish
(session ﬁnish message), this party receives a session key
output (SK-output) message which contains the key gener-
ated within Fke, where the key is chosen uniformly at ran-
dom from {0, 1}η (η is the security parameter). (Of course,
other distributions for the session key could be used.) The
simulator has the ability to corrupt Fke before the ﬁrst SK-
output message was sent, i.e., before one party received a
key. In this case, upon completion of the key exchange, the
simulator may determine the key a party obtains. In other
words, an uncorrupted Fke guarantees that the key a party
receives upon a key exchange request is a freshly generated
key that is only known to the parties involved in the key
exchange. The key is indistinguishable from random for an
adversary even if the key is output by one party before the
end of the protocol. Also, if both parties receive a key, the
two keys are guaranteed to coincide. Conversely, a corrupted
Fke does not provide security guarantees; the key exchanged
between the two parties is determined by the adversary. As
usual for functionalities, the environment may ask whether
or not Fke has been corrupted.
As mentioned, Fke captures only one key exchange be-
tween any two parties. An unbounded number of sessions of
key exchanges between arbitrary parties is described by the
system !Fke (see also Section 7).
5.2 The Symmetric Encryption Functionality
We use the functionality Fenc for ideal authenticated sym-
metric encryption as speciﬁed in [26]. Arbitrary many par-
ties can invoke Fenc via the I/O interface to generate (short-
and long-term) symmetric keys and to encrypt and decrypt
messages and ciphertexts, respectively, in an ideal way un-
der these keys, where the messages to be encrypted may
again contain (short-term) keys. The functionality Fenc can
handle an unbounded number of encryption and decryption
requests, with messages and ciphertexts being arbitrary bit
strings of arbitrary length.
In what follows, we provide a
more detailed description of Fenc (see [26] for full details).
The functionality Fenc is parameterized by a leakage algo-
rithm L which determines what information about a plain-
text may be leaked by the ciphertext. We will use the leakage
algorithm L which takes a message m of length at least the
security parameter as input and returns a random bit string
of the same length as m. In essence, L leaks the length of a
message.
As mentioned, the functionality Fenc allows for encryption
and decryption with short- and long-term symmetric keys.
We ﬁrst consider the interface of Fenc for short-term keys.
In an initialization phase, encryption and decryption algo-
rithms, enc and dec, respectively, are provided by the simu-
lator.
A party can request Fenc to generate a short-term key
upon which the simulator may provide a key and the party
obtains a pointer to this key. The key itself is stored in
Fenc. When the simulator provides the key, it can decide to
corrupt the key, in which case the key is marked corrupted.
To encrypt a message m (an arbitrary bit string) under
a short-term key, a party provides Fenc with m and the
pointer to the short-term key, say k, under which m shall be
encrypted. The message m may contain pointers to other
short-term keys. Before m is encrypted these pointers are
replaced by the corresponding short-term keys, if any, re-
sulting in a message m(cid:48). Now, if the short-term key k is
marked unknown (see below), m(cid:48) is encrypted ideally, i.e.,
not m(cid:48) but the leakage L(m(cid:48)) is encrypted under k with the
encryption algorithm enc, resulting in a ciphertext c, say.
Hence, by deﬁnition of L, only the length of m(cid:48) is leaked.
It is also guaranteed that the ciphertext has high entropy,
i.e., it can be guessed only with negligible probability. The
functionality Fenc stores the pair (m(cid:48), c). In case k is marked
known, not the leakage of m(cid:48) but m(cid:48) itself is encrypted.
To decrypt a ciphertext c (an arbitrary bit string) un-
der a short-term key, a party provides Fenc with c and the
pointer to the short-term key, say k. If k is marked unknown,
c is decrypted ideally, i.e., it is checked whether there is a
pair of the form (m(cid:48), c) stored in Fenc. In this case, m(cid:48) is
returned to the party, where keys in m(cid:48), if any, are ﬁrst
replaced by pointers; for keys to which the party does not
have a pointer yet, new pointers are generated. If Fenc does
not contain a pair of the form (m(cid:48), c), an error message is
returned. This models authenticated encryption. In partic-
ular, valid ciphertexts for unknown symmetric keys can only
be generated within Fenc with the corresponding keys.
The functionality Fenc also allows a party via the I/O in-
terface to import symmetric keys and to ask to reveal keys
stored in Fenc using the commands store and reveal, respec-
tively. These keys are marked known in Fenc.
The environment can ask Fenc via the I/O interface about
the corruption status of single keys.
It remains to deﬁne what it means for a key to be marked
unknown. A short-term key is marked unknown if it has
not been entered into Fenc by a store command, has not
been revealed by a reveal command, has not explicitly been
corrupted by the simulator, and has always been encrypted
under short-term keys marked unknown or uncorrupted long-
term keys (see below).
The functionality Fenc also provides means to establish
long-term symmetric keys between parties and to use such
keys for symmetric encryption in a similar way as described
above.
In particular, short-term symmetric keys may be
(ideally) encrypted under long-term keys. However, long-
term keys itself may not be encrypted. Altogether, this
provides a bootstrapping mechanism for short-term key en-
cryption/decryption. In [26], bootstrapping with public-key
encryption is also considered.
It has been proven in [26] that Fenc can be realized in a
natural way by an authenticated encryption scheme Σ, i.e.,
a symmetric encryption scheme that is IND-CPA and INT-
CTXT secure; a version of Fenc realizable by IND-CCA2
secure encryption was also considered.