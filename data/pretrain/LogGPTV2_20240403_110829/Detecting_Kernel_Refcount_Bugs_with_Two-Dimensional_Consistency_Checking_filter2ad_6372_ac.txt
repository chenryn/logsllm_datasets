INC function should perform what refcount operations.
More speciﬁcally, the checker takes two inputs: the be-
haviors of an INC function and the behaviors of one caller
function that invokes this INC function. The checker then
works as follows. First, in the INC function, it selects its paths.
For each path, the checker computes both the refcount opera-
tions as well as the post-condition (i.e., returning an error or
USENIX Association
30th USENIX Security Symposium    2477
Refcount Field  IdentificationLLVM Bytecode(LLVM IR)LinuxSource CodeCandidate Fields CollectionBehavior-based Refcount Field InferenceRefcount Operation AnalysisRefcount Operation IdentificationPath-sensitive Refcount Behavior AnalysisTwo-Dimensional Consistency CheckingINC-DEC Consistency CheckerDEC-DEC Consistency CheckerBug ReportsInconsistenciesClangCompilernot). Second, it merges the results for the paths in a form of
. Note that if a path performs both INC and
DEC, the merged action will be EMPTY. Third, it generates the
refcount rules for the DEC function:  where
“–” denotes an opposite action. Fourth, using the rules and
the modeled behaviors of a caller of the INC function, which
are in the form of , the checker detects
violating cases as refcount bugs.
DEC-DEC Consistency Checking. For each INC function,
the DEC-DEC consistency checker ﬁrst summarizes the DEC
behaviors for its each caller and then identiﬁes deviating cases
across all callers through statistical analysis. The deviating
cases are identiﬁed as potential refcount bugs because in
general most callers are correct.
The DEC behaviors of a caller function are summarized
from all the paths starting from the return of the INC func-
tion. We call the summarized DEC behaviors of a caller as its
tendency. There are three possible values for the tendency of
an caller: (1) EMPTY which means all paths in the caller do
not perform any DEC operations; (2) DEC which means all
the paths perform DEC operations or conditional DEC opera-
tions that depends on the return value of the corresponding
INC function; (3) UNKNOWN which is used in the remaining
scenarios when we are unable to make the decision.
To measure the inconsistency of the tendency among all
callers of an INC function, we deﬁne inconsistency score. CID
uses three steps to calculate the inconsistency score across
all callers of an INC function. First, the checker counts the
number of callers for each tendency, and represents them as a
normalized three-dimensional vector.
x = num o f callers implies EMPTY
y = num o f callers implies DEC
z = num o f callers implies UNKNOWN
(cid:112)x2 + y2 + z2
length =
length ) = (xnv,ynv,znv)
z
vector = (
x
length ,
y
length ,
Second, the checker separately calculates the distances be-
tween the normalized vector and the three base vectors as
follows.
(cid:113)
(cid:113)
(cid:113)
distancex =
distancey =
distancez =
(xnv − 1)2 + y2
nv + z2
nv
nv + (ynv − 1)2 + z2
x2
nv + (znv − 1)2
x2
nv + y2
nv
Finally, the checker gets the main tendency among the callers
by comparing their distances and deﬁnes the inconsistency
score as:
inconsistency score = min(distancex,distancey,distancez)
The rationale behind the inconsistency score is that it mea-
sures the uniformity of the DEC behaviors among all the callers
for an INC function. If the score is zero, it means all callers
has the same DEC behaviors. The high the score is, the more
diverse that these callers behaves. When most of the callers
tend to perform DEC operations, the checker marks the callers
which deviate the main tendency as potential refcount bugs.
5
Implementation
We have implemented CID as multiple passes on top of LLVM
(version 10.0.0), including a pass for constructing call graph,
a pass for identifying reference escape, a pass for performing
data ﬂow analysis and alias analysis, and a pass for detecting
and reporting potential refcount bugs. The alias analysis is
based on the LLVM alias analysis infrastructure. The imple-
mentation of CID contains 10K lines of C++ code (counted
by cloc). We present some interesting implementation details
below.
Escape Analysis. As described in §4.3, CID needs to know
whether an object reference escapes from the caller. Thus, CID
performs reference escape analysis on an refcount-tracked
object in the caller. We consider three common reference
escape scenarios: (1) the referenced object may escape to an
argument pointer of the caller function; (2) the referenced
object may escape to a global variable; (3) the referenced
object may escape to the return value of the caller function.
CID tracks the use of the object within the caller through
def-use analysis and alias analysis. During the analysis, CID
carefully inspects each use point of the reference to test if an
escape occurs.
However, since we perform intra-procedural data ﬂow anal-
ysis, we may miss data ﬂows through function calls, resulting
in false negatives in escape analysis. For example, if a caller
invokes a function to acquire a ﬁeld of a global struct and then
assigns the referenced object to this ﬁeld, a reference escape
occurs while we can not capture. To eliminate such false neg-
atives, we perform a conservative one-layer inter-procedural
analysis to generate data ﬂow summaries for invoked func-
tions. Speciﬁcally, we only capture the direct data ﬂows from
the arguments of an invoked function to its return value with-
out considering other complicated situations, such as pointer
alias, function calls. Note that this conservative approach may
cause false positives in reference escape analysis, but it may
only generate some false negatives in bug detection. More
importantly, this design makes CID scale to the whole-kernel
analysis.
Identify Contradictory Path Constraints. In §4.3, CID ex-
cludes infeasible paths in the INC function. A common prac-
tice in infeasible path elimination is to check the satisﬁabil-
ity of the path’s constraints with the help of an SMT solver.
However, this method is expensive. We observe that the un-
satisﬁability of a path is frequently caused by two obvious
contradictory constraints on the same expression. For exam-
ple, there is one constraint requires an expression being true
while the other one says the expression must be false. Hence,
2478    30th USENIX Security Symposium
USENIX Association
we implement a light-weight approach to identify such con-
tradictory constraints: ﬁrst, CID collects the path constraints
for each path with data ﬂow analysis; second, CID groups
the constraints for the same expression; third, CID checks if
there are contradictory constraints in each group; ﬁnally, CID
reports infeasible path if there is any contradictory constraint
group. In this way, CID can efﬁciently identify and eliminate
infeasible paths.
Bug Reporting and Ranking. CID generates detailed bug
reports to ease bug conﬁrmation. Because CID checks bugs
from two different dimensions, it outputs reports in two dif-
ferent formats.
The INC-DEC Consistency Checker examines the incon-
sistency between the conditional INC operations and corre-
sponding conditional DEC operations. For each reported bug,
it outputs the name of the INC function, the name of the in-
consistent caller, and the inconsistent path pair. The analysts
can easily conﬁrm the bug with such information.
The DEC-DEC Consistency Checker identiﬁes deviating
callers from the majority. In order to reduce the burden of
manual veriﬁcation, CID ranks the reports based on the incon-
sistency score and prunes these reports with a threshold (θ).
Therefore, the remaining bug report set may have a higher true
positive rate. For each reported bug, the checker outputs the
name of the INC function, the names of the deviated callers
which may have bugs, the inconsistency score and suggests
the appropriate refcount operation learned from the majority.
6 Evaluation
This section applies CID to the Linux kernel to evaluate its
effectiveness in refcount bug detection and refcount ﬁeld
identiﬁcation.
6.1 Setup and Conﬁguration
The experiments are performed on a Debian 8.11 (64-
bit) machine with LLVM 10.0.0 installed (git commit:
771899e94452). The machine has 128 GB memory and two
Intel Xeon E7-4830 v2 processors (2.20 GHz, 20 cores). We
compiled the source code of the Linux kernel version 5.6-rc2
(git commit: 11a48a5a18c6, released on Feb 16, 2020) with
allyesconﬁg to enable all kernel modules for the x86_64 archi-
tecture. At last, 18,868 LLVM IR bitcode ﬁles are generated
and used as the input of CID for evaluation.
Hyper-parameter Determination. As described in §5,
bug detection from DEC-DEC dimension requires a hyper-
parameter—threshold (θ) of the inconsistency score among
all the callers of an INC function. The higher of the θ, the
more bugs would be reported by CID, but the higher false
positive rate CID may have. By trying several values for θ, we
count the bugs reported by DEC-DEC consistency checking in
Table 4. From this table, we ﬁnd the reported bugs increased
by 33 when θ increases from 0.4 to 0.5, while only 10 more
Table 4: Evaluating the hyper-parameter value, θ, among mul-
tiple choices.
Threshold (θ) Reported Bugs
0.1
0.2
0.3
0.4
0.5
0.6
18
55
67
86
119
129
bugs are reported when increasing θ from 0.5 to 0.6. There-
fore, to control the volume of reported bugs, we choose θ =
0.5 for the following bug conﬁrmation.
6.2 Bugs Reported by CID
By applying CID on Linux 5.6-rc2, CID identiﬁes 792 refcount
ﬁelds (details explained in §6.6) and reports 149 bugs. We
manually analyzed all the reported bugs and conﬁrmed 44
new refcount bugs. The details of the conﬁrmed 44 bugs
are presented in Table 8 (in Appendix A). Among all the
bugs, DEC-DEC consistency checking reports 119 ones and
35 of them were conﬁrmed; INC-DEC consistency checking
reports 102 potential bugs from which we conﬁrmed 27 real
bugs. Based on the bug root cause, we wrote 42 security
patches to ﬁx these bugs and submitted them to the Linux
community. Until now, 36 bugs have been conﬁrmed by the
Linux community, and the patches for 34 bugs have already
been applied to the Linux mainline.
Bug Conﬁrmation. CID relies on static analysis to detect
bugs, which are known to have false positives, so manual con-
ﬁrmation is necessary. To ease the bug conﬁrmation and the
patch development, CID also outputs intermediate information
(such as the INC function callsites, the detected DEC operation
set in DEC-DEC consistency checking, the reference escape
ﬂag) for all the reported bugs. During the bug conﬁrmation,
we take the output information of CID as reference and man-
ually check the inconsistency of the refcount operations in
the reported buggy function. To be speciﬁc, we ﬁrst observe
whether the refcount behavior is operated just as the behavior
tuple reported by CID. This step is to ensure the inconsistency
is not caused by CID misidentifying or missing the DEC opera-
tion. Second, we check if the inconsistency state is caused by
some special code logic, such as synchronization mechanism
(e.g., completions), indirect function call (e.g., ﬁle open and
close), which are known to be too difﬁcult to handle in our
current implementation. If we observe that those situations
happen in the buggy function, we would like to conservatively
exclude it from bugs. Otherwise, we deem it a real refcount
bug and report it later. Following the above process, we man-
ually analyzed 149 bug reports and conﬁrmed 44 new bugs.
The whole process took us 37 man-hours, which we believe
is affordable.
USENIX Association
30th USENIX Security Symposium    2479
Efﬁciency. CID completes the analysis of the whole kernel
within 18 minutes, of which loading bitcode ﬁles and con-
structing call graph take 7 minutes, refcount ﬁeld/operation
identiﬁcation costs about 1 minute, and refcount operation
analysis together with bug checking cost 10 minutes. The
analysis covered 19.2 million lines of code (reported by the
tool cloc) for the Linux kernel. According to the results, we
conﬁrm that CID is quite efﬁcient to scale to the highly com-
plex whole-kernel analysis.
6.3 False Positives Breakdown
Among the 149 bugs reported by CID, we manually conﬁrm
44 of them as real refcount bugs and the left of them are
false positives. We analyze the 105 FPs and summarize three
causes for them.
• Imprecise escape analysis (34 FPs). CID leverages the
escape information collected through escape analysis to
perform two-dimensional consistency checking. However,
in addition to the situations we discussed in §5, there are
other complicated reference-escape situations which CID
can not recognize. When the escape analysis exhibits a false
negative, CID may wrongly expects a paired DEC operation
in the current function, causing a false positive.
• Imprecise alias analysis (23 FPs): In refcount operation
analysis, CID attempts to identify the DEC operations on the
incremented object via intra-procedural data-ﬂow analysis
and alias analysis. The intra-procedural analysis used by
CID prevents it from ﬁnding some paired DEC operations
that are performed on aliased object pointers. Therefore,
CID incorrectly reports bugs.
• Others (48 FPs): Other reasons relate to the special features
of the Linux kernel, such as the heavy use of the function
pointers to support polymorphism (i.e. indirect function
call), synchronization mechanism (e.g., completions) and
so on. Due to those reasons, sometimes CID can not locate
the paired DEC operations and falsely reports refcount bugs.
Besides, we found that some bugs are reported on infeasi-
ble paths. Since these bugs cannot be triggered, they also
belong to false positives.
It turns out that most false positives are introduced by the
inaccuracy of the static analysis instead of our bug detection
oracle. In §7, we discuss how to mitigate these false positives
by applying more precise analysis techniques.
6.4 Security Impacts of Reported Bugs
We manually examine the security impacts of the reported
bugs and ﬁnd that these bugs cause severe security impacts, in-
cluding UAF, DoS, and memory leak. As presented in Table 8,
we conﬁrm 37 bugs that may cause DoS, 5 bugs that may re-
sult in UAF, and all of them may cause memory leak. Here
Figure 4: A missing decrease refcount bug detected by CID
in comedi_open(), which results in memory leak and DoS.
we present two case studies to explain the security impact of
the reported bugs.
Case Study on Bug #11. In bug #11, there is a missing ref-
count decrease in one exceptional path of comedi_open(),
and we ﬁnd that it causes memory leak and DoS. We present
the bug-related code in Figure 4. In this bug, comedi_open()
ﬁrst
invokes comedi_dev_get_from_minor() (line 5)
which returns a reference to the comedi device and increases
its refcount. When comedi_open() returns zero, it means the
open operation is successful. Otherwise, the open operation
fails and the increased refcount at line 5 should be decreased.
However, if we trigger a memory allocation failure at line
7, comedi_open() returns an error code (line 10) without
decreasing the refcount to the comedi device. Therefore, the
comedi device will not be freed, causing a memory leak. Fur-
thermore, since the refcount for the comedi_device struct is
deﬁned with kref, which has overﬂow/underﬂow protections.
Therefore, we can not continuously trigger this bug to cause
a UAF. However, if an overﬂow on kref is detected by Linux
kernel, the kernel will panic (aka. DoS), which is severe for a
long-running system.
Case Study on Bug #21. Similarly, bug #21 is also a missing
decrease bug in one exceptional path of ext4_orphan_get().
We ﬁnd that this bug may lead to an exploitable UAF vul-
nerability. As shown in Figure 5, ext4_orphan_get() in-
vokes ext4_read_inode_bitmap() (line 6) to return a ref-
erence to the buffer head object. If the invocation succeeds,
it increases the refcount of the object, and the reference is
hold by bitmap_bh. Otherwise, it returns an error code and
does not touch the refcount of the buffer head object. When
ext4_orphan_get() returns, the local variable bitmap_bh
becomes invalid. Therefore, ext4_orphan_get() invokes
brelse (line 17) to decrease the refcount of the the buffer
head object. However, if the invocation to ext4_iget()
(line 10) fails, ext4_orphan_get() directly returns with-
out releasing bitmap_bh (line 14), causing a memory leak.
2480    30th USENIX Security Symposium
USENIX Association
1 static int comedi_open(struct inode *inode,struct file *file)2 {3    ...4    // increase refcount if success5    struct comedi_device *dev = comedi_dev_get_from_minor(minor);6    ...7    cfp = kzalloc(sizeof(*cfp), GFP_KERNEL);8    if (!cfp)9        // missing refcount decrease here10       return -ENOMEM;11   ... 12   if(rc) {13       // Other error paths14       comedi_dev_put(dev); // decrease the refcount15       kfree(cfp);16   }17   ...18}Table 5: Comparison between CID and RID on Detecting 60
Known Refcount Bugs.
Total Reported by
CID Only
Reported by
RID Only
Reported by both
CID and RID
60
46
8
2
even that it has the same ability in refcount ﬁeld identiﬁcation
as CID. We present the detection results of CID and RID in
Table 5. From this table, we ﬁnd that CID detects 54 (=46+8)
bugs while RID only detects 10 (=2+8) bugs. In all, there
are 46 bugs that can only be detected by CID, while CID only
misses 2 bugs that are detected by RID.
Bugs Missed by RID. The missed 50 bugs by RID are caused