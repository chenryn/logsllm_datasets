### Made in Morocco
### Penetration Testing with Kali Linux

#### 19.2 DNS Tunneling Theory and Practice

This section covers the following learning objectives:
- Understanding DNS tunneling
- Performing DNS tunneling with `dnscat2`

DNS is a fundamental Internet protocol that has been exploited by attackers for various malicious purposes, including tunneling data in and out of restrictive network environments. To understand how this works, we will provide a simplified overview of DNS and then demonstrate how to perform DNS tunneling using `dnscat2`.

##### 19.2.1 DNS Tunneling Fundamentals

IP addresses, not human-readable domain names, are used to route Internet data. To access a domain by its name, we first need to resolve its IP address. This is done by querying DNS servers.

Let's walk through the process of resolving the IPv4 address of `www.example.com`:

1. **Recursive Resolver**: We typically ask a DNS recursive resolver server for the A record (IPv4 address) of the domain. The recursive resolver does most of the work, making queries until it satisfies the request and returns the response.

2. **Root Name Servers**: The recursive resolver holds a list of root name servers (13 as of 2022). It sends a query to one of these root servers. Since `example.com` has the `.com` suffix, the root server responds with the address of a TLD (Top-Level Domain) name server responsible for `.com`.

3. **TLD Name Server**: The recursive resolver then queries the `.com` TLD name server, asking which DNS server is responsible for `example.com`. The TLD name server responds with the authoritative name server for `example.com`.

4. **Authoritative Name Server**: The recursive resolver asks the `example.com` authoritative name server for the IPv4 address of `www.example.com`. The authoritative name server replies with the A record, and the recursive resolver returns this to us.

All these requests and responses are transported over UDP on port 53.

In our lab network, with `MULTISERVER03` as the DNS server, a request from `PGDATABASE01` for the IP address of `www.example.com` would follow the flow shown below. For simplicity, firewalls have been removed from the diagram.

**Figure 263: High-level DNS request flow with `MULTISERVER03` as the DNS resolver**

It's common to use the recursive resolver provided by an ISP, but other well-known public recursive name servers, such as Google's `8.8.8.8`, can also be used.

#### Lab Scenario: DNS Tunneling

In this scenario, we introduce a new server, `FELINEAUTHORITY`, situated on the WAN alongside our Kali machine. `MULTISERVER03`, `CONFLUENCE01`, and our Kali machine can route to it, but `PGDATABASE01` and `HRSHARES` cannot.

`FELINEAUTHORITY` is registered as the authoritative name server for the `feline.corp` zone. We will use it to observe how DNS packets reach an authoritative name server, specifically between `PGDATABASE01` and `FELINEAUTHORITY`.

**Figure 264: Network layout for DNS experiments**

To simulate a real DNS setup, we will make `FELINEAUTHORITY` a functional DNS server using `Dnsmasq`, which is a lightweight DNS server that requires minimal configuration.

**Step-by-Step Setup:**

1. **Access `PGDATABASE01` via `CONFLUENCE01`**:
   - Exploit `CVE-2022-26134` on `CONFLUENCE01` to gain a reverse shell.
   - Create an SSH remote port forward to relay a port on our Kali machine to the SSH service on `PGDATABASE01`.
   - SSH into `PGDATABASE01` as the `database_admin` user.

2. **Access `FELINEAUTHORITY`**:
   - SSH directly into `FELINEAUTHORITY` using the username `kali` and password `7he_C4t_c0ntro11er`.

3. **Configure Dnsmasq on `FELINEAUTHORITY`**:
   - Navigate to the `dns_tunneling` folder and view the basic `dnsmasq.conf` file.
   - Start the `dnsmasq` process with the `dnsmasq.conf` configuration file in the foreground.

```bash
kali@felineauthority:~$ cd dns_tunneling
kali@felineauthority:~/dns_tunneling$ cat dnsmasq.conf
# Do not read /etc/resolv.conf or /etc/hosts
no-resolv
no-hosts
# Define the zone
auth-zone=feline.corp
auth-server=feline.corp

kali@felineauthority:~/dns_tunneling$ sudo dnsmasq -C dnsmasq.conf -d
```

4. **Set up `tcpdump` on `FELINEAUTHORITY`**:
   - Use `tcpdump` to listen on the `ens192` interface for DNS packets on UDP/53.

```bash
kali@felineauthority:~$ sudo tcpdump -i ens192 udp port 53
```

5. **Confirm DNS settings on `PGDATABASE01`**:
   - Use `resolvectl status` to check the current DNS settings.

```bash
database_admin@pgdatabase01:~$ resolvectl status
```

Now that `tcpdump` is listening and `Dnsmasq` is running on `FELINEAUTHORITY`, we can move to our shell on `PGDATABASE01` and make DNS queries aimed at the `feline.corp` domain.

This setup allows us to observe the DNS traffic and understand how DNS tunneling can be performed in a controlled environment.

---

**References:**
- [Wikipedia: Recursive and Caching Name Server](https://en.wikipedia.org/wiki/Domain_Name_System#Recursive_and_caching_name_server)
- [Wikipedia: List of DNS Record Types](https://en.wikipedia.org/wiki/List_of_DNS_record_types#A)
- [Wikipedia: Root Name Server](https://en.wikipedia.org/wiki/Root_name_server)
- [Wikipedia: Top-Level Domain](https://en.wikipedia.org/wiki/Top-level_domain)
- [Wikipedia: Authoritative Name Server](https://en.wikipedia.org/wiki/Name_server#Authoritative_name_server)
- [Wikipedia: Public Recursive Name Server](https://en.wikipedia.org/wiki/Public_recursive_name_server)
- [Wikipedia: DNS Zone](https://en.wikipedia.org/wiki/DNS_zone)
- [The Kelleys: Dnsmasq Documentation](https://thekelleys.org.uk/dnsmasq/doc.html)

**Copyright Â© 2023 OffSec Services Limited. All rights reserved.**