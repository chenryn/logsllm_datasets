Made in Morocco
Penetration Testing with Kali Linux
192.168.50.63.41424 > 192.168.118.4.8080: Flags [P.], cksum 0xce2b (correct), seq
1:225, ack 1, win 502, options [nop,nop,TS val 1290578437 ecr 143035602], length 224:
HTTP, length: 224
GET / HTTP/1.1
Host: 192.168.118.4:8080
User-Agent: Go-http-client/1.1
Connection: Upgrade
Sec-WebSocket-Key: L8FCtL3MW18gHd/ccRWOPQ==
Sec-WebSocket-Protocol: chisel-v3
Sec-WebSocket-Version: 13
Upgrade: websocket
0x0000: 4500 0114 d200 4000 3f06 3f4f c0a8 323f E.....@.?.?O..2?
0x0010: c0a8 7604 a1d0 1f90 61a9 fe5d 2446 312e ..v.....a..]$F1.
0x0020: 8018 01f6 ce2b 0000 0101 080a 4cec aa05 .....+......L...
0x0030: 0886 8cd2 4745 5420 2f20 4854 5450 2f31 ...y.GET./.HTTP/1
0x0040: 2e31 0d0a 486f 7374 3a20 3139 322e 3136 .1..Host:.192.16
0x0050: 382e 3131 382e 343a 3830 3830 0d0a 5573 8.118.4:8080..Us
0x0060: 6572 2d41 6765 6e74 3a20 476f 2d68 7474k er-Agent:.Go-htt
0x0070: 702d 636c 6965 6e74 2f31 2e31 0d0a 436f p-client/1.1..Co
0x0080: 6e6e 6563 7469 6f6e 3a20 5570 6772 6164 nnection:.Upgrad
s
0x0090: 650d 0a53 6563 2d57 6562 536f 636b 6574 e..Sec-WebSocket
0x00a0: 2d4b 6579 3a20 4c38 4643 744c 334d 5731 -Key:.L8FCtL3MW1
0x00b0: 3867 4864 2f63 6352 574f 505o1 3d3d 0d0a 8gHd/ccRWOPQ==..
0x00c0: 5365 632d 5765 6253 6f63 6b65 742d 5072 Sec-WebSocket-Pr
0x00d0: 6f74 6f63 6f6c 3a20 6368 6973 656c 2d76 otocol:.chisel-v
0x00e0: 330d 0a53 6563 2d57 65n62 536f 636b 6574 3..Sec-WebSocket
0x00f0: 2d56 6572 7369 6f6e 3a20 3133 0d0a 5570 -Version:.13..Up
0x0100: 6772 6164 653a 2077 6562 736f 636b 6574 grade:.websocket
0x0110: 0d0a 0d0a i ....
18:13:53.687745 IP (tos 0x0, tztl 64, id 60604, offset 0, flags [DF], proto TCP (6),
length 52)
192.168.118.4.8080 > 192.168.50.63.41424: Flags [.], cksum 0x46ca (correct), seq
D
1, ack 225, win 508, options [nop,nop,TS ...
...
Listing 595 - Inbound Chisel traffic logged by our tcpdump session.
The traffic indicates that the Chisel client has created an HTTP WebSocket connection with the
server.
Our Chisel server has logged an inbound connection.
kali@kali:~$ chisel server --port 8080 --reverse
2022/08/21 17:57:53 server: Reverse tunnelling enabled
2022/08/21 17:57:53 server: Fingerprint Pru+AFGOUxnEXyK1Z14RMqeiTaCdmX6j4zsa9S2Lx7c=
2022/08/21 17:57:53 server: Listening on http://0.0.0.0:8080
2022/08/21 18:13:54 server: session#2: tun: proxy#R:127.0.0.1:1080=>socks: Listening
Listing 596 - Incoming connection logged by the Chisel server.
Next, we’ll check the status of our SOCKS proxy with ss.
kali@kali:~$ ss -ntplu
Netid State Recv-Q Send-Q Local Address:Port Peer
Address:Port Process
udp UNCONN 0 0 0.0.0.0:34877
0.0.0.0:*
tcp LISTEN 0 4096 127.0.0.1:1080
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 619
Made in Morocco
Penetration Testing with Kali Linux
0.0.0.0:* users:(("chisel",pid=501221,fd=8))
tcp LISTEN 0 4096 *:8080
*:* users:(("chisel",pid=501221,fd=6))
tcp LISTEN 0 511 *:80
*:*
Listing 597 - Using ss to check if our SOCKS port has been opened by the Kali Chisel server.
Our SOCKS proxy port 1080 is listening on the loopback interface of our Kali machine.
Let’s use this to connect to the SSH server on PGDATABASE01. In Port Redirection and SSH
Tunneling, we created SOCKS proxy ports with both SSH remote and classic dynamic port
forwarding, and used Proxychains to push non-SOCKS-native tools through the tunnel. But we’ve
not yet actually run SSH itself through a SOCKS proxy.
SSH doesn’t offer a generic SOCKS proxy command-line option. Instead, it offers the
ProxyCommand941 configuration option. We can either write this into ya configuration file, or pass it
as part of the command line with -o.
k
ProxyCommand accepts a shell command that is used to open a proxy-enabled channel. The
documentation suggests using the OpenBSD version of Netcat, which exposes the -X flag942 and
can connect to a SOCKS or HTTP proxy. However, thse version of Netcat that ships with Kali
doesn’t support proxying.
o
Instead, we’ll use Ncat,943 the Netcat alternative written by the maintainers of Nmap. We can
install this on Kali with sudo apt install ncat.
n
kali@kali:~$ sudo apt install ncat
Reading package lists... Done
Building dependency tree... Donei
Reading state information... Dzone
The following NEW packages will be installed:
ncat
0 upgraded, 1 newly instaDlled, 0 to remove and 857 not upgraded.
Need to get 487 kB of archives.
After this operation, 819 kB of additional disk space will be used.
Get:1 http://http.kali.org/kali kali-rolling/main amd64 ncat amd64 7.92+dfsg2-1kali1
[487 kB]
Fetched 487 kB in 5s (97.3 kB/s)
Selecting previously unselected package ncat.
(Reading database ... 298679 files and directories currently installed.)
Preparing to unpack .../ncat_7.92+dfsg2-1kali1_amd64.deb ...
Unpacking ncat (7.92+dfsg2-1kali1) ...
Setting up ncat (7.92+dfsg2-1kali1) ...
update-alternatives: using /usr/bin/ncat to provide /bin/nc (nc) in auto mode
Processing triggers for man-db (2.10.2-1) ...
Processing triggers for kali-menu (2022.2.0) ...
kali@kali:~$
Listing 598 - Installing Ncat with apt.
941 (OpenBSD manual, 2022), https://man.openbsd.org/ssh_config#ProxyCommand
942 (OpenBSD manual, 2022), https://man.openbsd.org/ssh_config#ProxyCommand
943 (Nmap, 2022), https://nmap.org/ncat/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 620
Made in Morocco
Penetration Testing with Kali Linux
Now we’ll pass an Ncat command to ProxyCommand. The command we construct tells Ncat to
use the socks5 protocol and the proxy socket at 127.0.0.1:1080. The %h and %p tokens represent
the SSH command host and port values, which SSH will fill in before running the command.
kali@kali:~$ ssh -o ProxyCommand='ncat --proxy-type socks5 --proxy 127.0.0.1:1080 %h
%p' PI:EMAIL
The authenticity of host '10.4.50.215 ()' can't be
established.
ED25519 key fingerprint is SHA256:IGz427yqW3ALf9CKYWNmVctA/Z/emwMWWRG5qQP8JvQ.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '10.4.50.215' (ED25519) to the list of known hosts.
PI:EMAIL's password:
Welcome to Ubuntu 22.04 LTS (GNU/Linux 5.15.0-41-generic x86_64)
* Documentation: https://help.ubuntu.com
* Management: https://landscape.canonical.com y
* Support: https://ubuntu.com/advantage
k
0 updates can be applied immediately.
Last login: Thu Jul 21 14:04:11 2022 from 192.168.s97.19
database_admin@pgbackup1:~$
Listing 599 - A successful SSH connection through our Chisel HTTP tunnel.
o
Very nice! We gained access to the SSH server, through our Chisel reverse SOCKS proxy,
tunneling traffic through a reverse HTTP tunnel.
n
In this Learning Unit, we created a reverse tunnel using Chisel, and then used this tunnel to log in
to an SSH server on PGDATABASE01 within the internal network. We did this with only HTTP-
i
formatted traffic to and from the compromised CONFLUENCE01 pivot server.
z
19.2 DNS Tunneling Theory and Practice
D
This Learning Unit covers the following Learning Objectives:
• Learn about DNS tunneling
• Perform DNS tunneling with dnscat2
DNS is one of the foundational Internet protocols and has been abused by attackers for various
nefarious purposes. For example, it can serve as a mechanism to tunnel data indirectly in and out
of restrictive network environments. To understand exactly how this works, let’s present a
simplified “crash course” in DNS. We will then learn how to perform DNS tunneling with a tool
called dnscat2.
19.2.1 DNS Tunneling Fundamentals
IP addresses, not human-readable names, are used to route Internet data. Whenever we want to
access a domain by its domain name, we need first obtain its IP address. To retrieve (or resolve)
the IP address of a human-readable address, we need to ask various DNS servers. Let’s walk
through the process of resolving the IPv4 address of “www.example.com”.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 621
Made in Morocco
Penetration Testing with Kali Linux
In most cases, we’ll ask a DNS recursive resolver944 server for the DNS address record (A
record)945 of the domain. An A record is a DNS data type that contains an IPv4 address. The
recursive resolver does most of the work: it will make all the following DNS queries until it
satisfies the DNS request, then returns the response to us.
Once it retrieves the request from us, the recursive resolver starts making queries. It holds a list of
root name servers946 (as of 2022, there are 13 of them scattered around the world947). Its first task
is to send a DNS query to one of these root name servers. Because example.com has the “.com”
suffix, the root name server will respond with the address of a DNS name server that’s
responsible for the .com top-level domain (TLD).948 This is known as the TLD name server.
The recursive resolver then queries the .com TLD name server, asking which DNS server is
responsible for example.com. The TLD name server will respond with the authoritative name
server949 for the example.com domain.
y
The recursive resolver then asks the example.com authoritative name server for the IPv4 address
of www.example.com. The example.com authoritative name server replies with the A record for
k
that.
The recursive resolver then returns that to us. All theses requests and responses are transported
over UDP, with UDP/53 being the standard DNS port.
In our lab network, with MULTISERVER03 as the DoNS server, a request from PGDATABASE01 for
the IP address of www.example.com would follow the flow shown below. The firewalls have been
removed from this diagram for simplicity.
n
i
z
D
944 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Domain_Name_System#Recursive_and_caching_name_server
945 (Wikipedia, 2022), https://en.wikipedia.org/wiki/List_of_DNS_record_types#A
946 (Wikipeia, 2022), https://en.wikipedia.org/wiki/Root_name_server
947 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Root_name_server#Root_server_addresses
948 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Top-level_domain
949 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Name_server#Authoritative_name_server
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 622
Made in Morocco
Penetration Testing with Kali Linux
Figure 263: The high-level DNS request flow, with MULTISERVER03 configured as the DNS resolver
It’s common to use the recursive resolver provided by an ISP (which is usually
pre-programmed into the stock ISP router), but other well-known public recursive
name servers950 can be used as well. For example, Google has a public DNS
server at 8.8.8.8.
Let’s try this out in a new scenario in the lab, which is configured precisely for this purpose. In this
scenario, we have a new server: FELINEAUTHORITY. This server is situated on the WAN alongside
our Kali machine. This means that MULTISERVER03, CONFLUENCE01, and our Kali machine can
route to it, but PGDATABASE01 and HRSHARES cannot.
y
FELINEAUTHORITY is registered within this network as the authoritative name server for the
feline.corp zone.951 We will use it to observe how DNS packets reach an authoritative name
k
server. In particular, we will watch DNS packets being exchanged between PGDATABASE01 and
FELINEAUTHORITY.
s
While PGDATABASE01 cannot connect directly to FELINEAUTHORITY, it can connect to
MULTISERVER03. MULTISERVER03 is also configured as the DNS resolver server for
o
PGDATABASE01.
n
i
z
D
Figure 264: The network layout for our DNS experiments
In the real world, we will have registered the feline.corp domain name ourselves,
set up the authoritative name server machine ourselves, and told the domain
registrar that this server should be known as the authoritative name server for
950 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Public_recursive_name_server
951 (Wikipedia, 2022), https://en.wikipedia.org/wiki/DNS_zone
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 623
Made in Morocco
Penetration Testing with Kali Linux
the feline.corp zone. However, for simplicity in this lab environment,
FELINEAUTHORITY is provided pre-configured. In a real deployment, we would
need to configure the server and take care of all other peripheral registrations to
ensure that any other DNS servers would eventually find our server for all
feline.corp requests.
In order to see how DNS requests will be relayed to FELINEAUTHORITY from PGDATABASE01,
we need to initiate DNS requests from PGDATABASE01, and monitor what comes in to
FELINEAUTHORITY. For that reason, we need a shell on each of these machines.
As in previous examples, we can only access PGDATABASE01 through CONFLUENCE01. So in
order to connect to the SSH server on PGDATABASE01, we must pivot through CONFLUENCE01.
We’ll compromise CONFLUENCE01 by exploiting CVE-2022-26134 with our reverse shell payload,
y
and create an SSH remote port forward to relay a port on our Kali machine to the SSH service on
PGDATABASE01. We’ll then SSH into PGDATABASE01 as the database_admin user.
k
Since FELINEAUTHORITY is also on the WAN, we can SSH directly into FELINEAUTHORITY using
the username kali and the password 7he_C4t_c0ntro11er.
s
We now have two open shells. The first is on PGDATABASE01 as the database_admin user, and
the second is on FELINEAUTHORITY as the kali usoer.
In order to simulate a real DNS setup, we can make FELINEAUTHORITY a functional DNS server
using Dnsmasq.952 Dnsmasq is DNS servenr software that requires minimal configuration. A few
Dnsmasq configuration files are stored in the ~/dns_tunneling folder, which we’ll use as part of
our DNS experiments. For this initial experiment, we’ll use the very sparse dnsmasq.conf
i
configuration file.
z
kali@felineauthority:~$ cd dns_tunneling
D
kali@felineauthority:~/dns_tunneling$ cat dnsmasq.conf
# Do not read /etc/resolv.conf or /etc/hosts
no-resolv
no-hosts
# Define the zone
auth-zone=feline.corp
auth-server=feline.corp
Listing 600 - The basic configuration for our Dnsmasq server.
This configuration ignores the /etc/resolv.conf and /etc/hosts files and only defines the auth-
zone and auth-server variables. These tell Dnsmasq to act as the authoritative name server for the
feline.corp zone. We have not configured any records so far. Requests for anything on the
feline.corp domain will return failure responses.
Now that the configuration is set, we’ll start the dnsmasq process with the dnsmasq.conf
configuration file (-C), making sure it runs in “no daemon” (-d) mode so it runs in the foreground.
We can kill it easily again later.
952 (The Kelleys, 2022), https://thekelleys.org.uk/dnsmasq/doc.html
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 624
Made in Morocco
Penetration Testing with Kali Linux
kali@felineauthority:~/dns_tunneling$ sudo dnsmasq -C dnsmasq.conf -d
dnsmasq: started, version 2.88 cachesize 150
dnsmasq: compile time options: IPv6 GNU-getopt DBus no-UBus i18n IDN2 DHCP DHCPv6 no-
Lua TFTP conntrack ipset nftset auth cryptohash DNSSEC loop-detect inotify dumpfile
dnsmasq: warning: no upstream servers configured
dnsmasq: cleared cache
Listing 601 - Starting Dnsmasq with the basic configuration.
In another shell on FELINEAUTHORITY, we’ll set up tcpdump953 to listen on the ens192 interface
for DNS packets on UDP/53, using the capture filter udp port 53.
kali@felineauthority:~$ sudo tcpdump -i ens192 udp port 53
[sudo] password for kali:
tcpdump: verbose output suppressed, use -v[v]... for full protocol decode
listening on ens192, link-type EN10MB (Ethernet), snapshot length 262144 bytes
Listing 602 - Starting tcpdump on FELINEAUTHORITyY.
Now that tcpdump is listening and Dnsmasq is running on FELINEAUTHORITY, we will move to
k
our shell on PGDATABASE01. From there we will make DNS queries aimed at the feline.corp
domain.
s
First let’s confirm PGDATABASE01’s DNS settings. Since DNS resolution is handled by systemd-
resolved we can check the DNS settings using the resolvectl utility.
o
database_admin@pgdatabase01:~$ resolvectl status
...
n
Link 5 (ens224)
Current Scopes: DNS