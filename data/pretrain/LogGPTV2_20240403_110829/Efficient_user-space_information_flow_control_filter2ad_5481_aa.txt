title:Efficient user-space information flow control
author:Ben Niu and
Gang Tan
Efﬁcient Purely-Dynamic Information Flow Analysis
Thomas H. Austin
Cormac Flanagan
University of California at Santa Cruz
PI:EMAIL
PI:EMAIL
Abstract
We present a novel approach for efﬁciently tracking in-
formation ﬂow in a dynamically-typed language such as
JavaScript. Our approach is purely dynamic, and it detects
problems with implicit paths via a dynamic check that avoids
the need for an approximate static analyses while still guar-
anteeing non-interference. We incorporate this check into
an efﬁcient evaluation strategy based on sparse information
labeling that leaves information ﬂow labels implicit when-
ever possible, and introduces explicit labels only for values
that migrate between security domains. We present experi-
mental results showing that, on a range of small benchmark
programs, sparse labeling provides a substantial (30%–50%)
speed-up over universal labeling.
Categories and Subject Descriptors D.3.3 [Programming
Languages]: Language Constructs and Features; D.4.6
[Operating Systems]: Security and Protection—Information
ﬂow controls
General Terms Languages, Security
Keywords
Information ﬂow control, dynamic analysis
Introduction
1.
The error-prone nature of software systems motivates the
desire to separate security from functionality wherever pos-
sible. For example, much current software is developed in
safe languages, where memory safety is ensured by the lan-
guage runtime itself, rather than being an emergent property
of complex and buggy application code.
Applications written in safe languages such as JavaScript
are still vulnerable to other kinds of security problems, how-
ever, such as loss of privacy or integrity, and particularly so
in a browser setting where JavaScript code from multiple un-
trusted or semi-trusted servers executes in the same process.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute
to lists, requires prior speciﬁc permission and/or a fee.
PLAS ’09
Copyright c(cid:13) 2009 ACM 978-1-60558-645-8/09/06. . . $10.00
June 15, Dublin, Ireland.
For example, cross-site scripting attacks exploit confusions
about the degree of authority or trust that should be granted
to various code and data fragments.
To help address these kinds of higher-level security prob-
lems, we explore the approach of dynamically tracking in-
formation ﬂow in the language runtime. The particular lan-
guage we consider is a variant of the untyped λ-calculus,
but the general approach should be applicable to JavaScript
and other dynamically-typed languages. We note that much
prior work on type systems that enforce information ﬂow
properties [Myers 1999, Myers and Liskov 1997] is unfor-
tunately not applicable to such languages. Furthermore, a
static analysis approach could be problematic in a browser
setting, where the analysis might need to be re-run on each
browser client before program execution [Vogt et al. 2007].
Finally, dynamic analysis also allows for somewhat more
ﬂexibility in applying policies, and can allow us to hot-swap
information ﬂow policies [Chandra and Franz 2007].
To exploit this label locality property, our second seman-
tics uses a more efﬁcient Sparse Labeling representation that
leaves labels implicit (i.e., determined by context) whenever
possible, and introduces explicit labels only for values that
migrate between information ﬂow domains. This strategy
eliminates a signiﬁcant fraction of the overhead usually asso-
ciated with dynamic information ﬂow analyses. At the same
time, sparse labeling has no effect on program semantics and
is observably equivalent to universal labeling. In particular,
This paper presents two semantics for tracking infor-
mation ﬂow. The ﬁrst semantics uses a straightforward
Universal Labeling representation, where every value has
an associated information ﬂow label. This explicit rep-
resentation makes it straightforward to track information
ﬂows and to enforce the key correctness property of non-
interference [Goguen and Meseguer 1982]. However, uni-
versal labeling incurs signiﬁcant overhead to allocate, track,
and manipulate the labels attached to each value.
In practice, programs typically exhibit a signiﬁcant de-
gree of label locality, where most or all items in a data
structure will likely have identical labels. For example, in
a browser setting, most values will likely be created and ma-
nipulated within a single information ﬂow domain.
we show that sparse labeling still satisﬁes the key correct-
ness property of non-interference.
We present experimental results showing that, on a range
of small benchmark programs, sparse labeling provides a
substantial (30%–50%) speed-up over universal labeling.
The presentation of our results proceeds as follows. The
next section introduces the source language that we use
as the basis for our development. Section 3 and 4 present
the universal and sparse labeling semantics, respectively,
together with their non-interference proofs. Section 5 de-
scribes our language implementations, benchmarks, and ex-
perimental results. Section 6 discusses related work, and
Section 7 concludes.
2.
Information Flow in the Lambda Calculus
We assume that the set Label of information ﬂow labels
forms a lattice with associated ordering operation (cid:118), join
operation (cid:116), and minimal element ⊥, and that this lattice has
at least two elements L and H such that L (cid:118) H. Thus, H
is a high-conﬁdentiality label, and L is a low-conﬁdentiality
label.
This lattice may of course contain additional elements.
For example, in a browser setting, Label might be the power
set lattice over all web sites that the browser is communicat-
ing with. If a data item is labelled with
{ good.com, evil.com }
then this label indicates that that data has been inﬂuenced by
network messages from both these sites. In particular, that
data should not be sent to evil.com, since it might contain
private data from good.com. In this paper, however, our fo-
cus is not so much on information ﬂow policies, but rather on
efﬁcient mechanisms for information ﬂow tracking, which is
a prerequisite to policy enforcement.
We formalize our information ﬂow tracking mechanisms
in terms of the idealized language λinfo, which is a variant
of the λ-calculus extended with imperative reference cells
and with a mechanism for tagging data with information
ﬂow labels. The syntax of λinfo is shown in Figure 1. Terms
include constants (c), variables (x), functions (λx.e) and
functional application (e1 e2). In addition, the language also
supports mutable reference cells, with operations to allocate
(ref e), dereference (!e), and update (e1:= e2) a reference
cell. Finally, the operation (cid:104)k(cid:105)e attaches the information ﬂow
label k to the result of evaluating e.
This language λinfo is intentionally minimal, in order to
clearly present our information ﬂow evaluation strategies.
However, as usual, a rich variety of additional constructs
(booleans, conditionals, let-expressions, pairs, etc) can be
encoded in the language, as illustrated in Figure 1. We will
use some of these encodings in example programs below.
Figure 1: The Source Language λinfo
Syntax:
e ::=
x
c
λx.e
(e1 e2)
ref e
!e
e:= e
(cid:104)k(cid:105)e
k, l, pc
x, y, z
c
Standard encodings:
true
false
if e1 then e2 else e3
let x = e1 in e2
e1 ; e2
pair e1 e2
fst e
snd e
Term
variable
constant
abstraction
application
reference allocation
dereference
assignment
labeling operation
Label
Variable
Constant
def= λx.λy.x
def= λx.λy.y
def= (e1 (λd.e2) (λd.e3)) (λx.x)
def= (λx.e2) e1
def= let x = e1 in e2, x (cid:54)∈ FV (e2)
def= (λx.λy.λb. b x y) e1 e2
def= e true
def= e false
3. Universal Labeling Semantics for λinfo
We formalize a semantics of λinfo that tracks information
ﬂow dynamically to enforce non-interference. In particular,
if the result of program execution is public (i.e., labeled L)
then that result cannot have been inﬂuenced by conﬁdential
data. Of course, any conﬁdential data accessed during the
execution could inﬂuence how long that execution takes,
and in the extreme could cause the program to diverge. To
de-emphasise these timing-related issues, we formulate the
semantics of λinfo as a big-step operational semantics.
In this semantics, each reference cell is allocated at an ad-
dress a, and the store σ maps addresses to values. A closure
(λx.e, θ) is a pair of a λ-expression and a substitution θ that
maps variables to values. We use ∅ to denote both the empty
store and the empty substitution. A raw value r is either a
constant, an address, or a closure.
Our initial semantics uses a universal labeling strategy,
where every value v has the form rk and combines a raw
value r with an explicit information ﬂow label k.
Figure 2: Universal Labeling for λinfo
Runtime Syntax
a ∈ Address
σ ∈ Store u
θ ∈ Subst u
r ∈ RawValueu
v ∈ Valueu
= Address →p Value u
= Var →p Value u
::= c | a | (λx.e, θ)
::= rk
Evaluation Rules:
σ, θ, e ⇓pc σ(cid:48), v
σ, θ, c ⇓pc σ, cpc
σ, θ, (λx.e) ⇓pc σ, (λx.e, θ)pc
σ, θ, x ⇓pc σ, (θ(x) (cid:116) pc)
σ, θ, e1 ⇓pc σ1, (λx.e, θ(cid:48))k
σ2, θ(cid:48)[x := v2], e ⇓pc(cid:116)k σ(cid:48), v
σ1, θ, e2 ⇓pc σ2, v2
σ, θ, (e1 e2) ⇓pc σ(cid:48), v
σ, θ, e1 ⇓pc σ1, ck
σ1, θ, e2 ⇓pc σ2, dl
r = [[c]](d)
σ, θ, (e1 e2) ⇓pc σ2, rk(cid:116)l(cid:116)pc
σ, θ, e ⇓pc σ(cid:48), v
σ, θ,(cid:104)k(cid:105)e ⇓pc σ(cid:48), (v (cid:116) k)
σ, θ, e ⇓pc σ(cid:48), v
a (cid:54)∈ dom(σ(cid:48))
σ, θ, (ref e) ⇓pc σ(cid:48)[a := v], apc
σ, θ, e ⇓pc σ(cid:48), ak
σ, θ, !e ⇓pc σ(cid:48), (σ(cid:48)(a) (cid:116) k (cid:116) pc)
σ, θ, e1 ⇓pc σ1, ak
σ1, θ, e2 ⇓pc σ2, v
k (cid:118) label(σ2(a))
σ, θ, (e1:= e2) ⇓pc σ2[a := (v (cid:116) k)], v
[U-CONST]
[U-FUN]
[U-VAR]
[U-APP]
[U-PRIM]
[U-LABEL]
[U-REF]
[U-DEREF]
[U-ASSIGN]
We formally deﬁne the universal labeling strategy via the
big-step evaluation relation:
σ, θ, e ⇓pc σ(cid:48), v
This relation evaluates an expression e in the context of a
store σ, a substitution (or environment) θ, and the current
label pc of the program counter, and it returns the resulting
value v and the (possibly modiﬁed) store σ(cid:48).
This relation is deﬁned via the evaluation rules shown
in Figure 2. The rules ensure that the result value v has a
label of at least pc (since this computed value depends on
the program counter). Thus, the rule [U-CONST] evaluates a
constant c to the value cpc. The rule [U-VAR] evaluates x to
(θ(x)(cid:116) pc). Here, we overload the operation (cid:116) to also take a
value as its left argument, and this operation strengthens the
label on that value:
rl (cid:116) k def= rl(cid:116)k
The rule [U-APP] evaluates the body of the called function
with upgraded program counter label pc (cid:116) k, where k is the
label of the called closure, since the callee “knows” that that
closure was invoked. The notation θ[x := v] denotes the
substitution that is identical to θ except that it maps x to v.
A primitive function is a constant such as “+” that can be
applied. The rule [PRIM] evaluates applications of primitive
functions. This rule is deﬁned in terms of the partial func-
tion:
[[·]] · : Constant × Constant →p Constant
For example:
[[+]](3) = +3
[[+3]](4) = 7
The rule [U-LABEL] joins an additional label k onto a
computed value v.
The last three rules track information ﬂow across refer-
ence cells. Allocation of reference cells via [U-REF] returns
a newly-allocated address apc with label pc. When a labeled
address ak is dereferenced via [U-DEREF], the correspond-
ing value σ(cid:48)(a) is retrieved from the store, and the value
(σ(cid:48)(a) (cid:116) k (cid:116) pc) is returned, since this result depends on
the address being dereferenced and on the execution of this
code branch.
Implicit Flows Finally, we consider the tricky issue of im-
perative updates, which introduces the classic problem of
implicit ﬂows [Denning 1976]. To illustrate this problem,
suppose we used the following assignment rule, which dy-
namically upgrades the label on a reference cell whenever it
is updated. Note that the ﬁrst antecedent in this rule ensures
that pc (cid:118) k:
σ, θ, e1 ⇓pc σ1, ak
σ1, θ, e2 ⇓pc σ2, v
σ, θ, (e1:= e2) ⇓pc σ2[a := (v (cid:116) k)], v
[U-ASSIGN-BAD]
Unfortunately, this rule leaks information via implicit ﬂows.
To illustrate this problem, consider the function:
f def= λx. let y = ref true in
let z = ref true in
if x then y := false else skip;
if !y then z := false else skip;
!z
fok
from a conﬁdential program counter. However, the program-
mer can preemptively upgrade reference cells as needed, be-
fore the conditional branch, as in the following function fok:
When this function is applied to conﬁdential boolean data,
the rule [U-ASSIGN-BAD] permits both of the following eval-
uations:
∅,∅, (f true H) ⇓L [ay := false H , az := true L], true L
∅,∅, (f false H) ⇓L [ay := true L, az := false L], false L
Thus, the function f leaks the value of its conﬁdential argu-
ment (labeled with H) into its public result (labeled with L).
In particular, the conditional statement
if x then y := false else skip
leaks information about the argument x into the reference
cell y in both branches, but only in one of these branches is
the label on !y upgraded to H (as shown by the values for ay
in the two resulting stores). Thus, this conditional leaks half
a bit, and so the dynamic upgrade strategy illustrated by the
rule [U-ASSIGN-BAD] is inadequate to prevent information
leaks, essentially because the information ﬂow label is only
upgraded on one of the two possible branches.
The No-Sensitive-Upgrade Check Our solution to this im-
plicit paths problem is to prohibit such dynamic label up-
grades that are caused by a conﬁdential program counter
or a conﬁdential address (an approach also explored by
Zdancewic [2002] in his dissertation). Dynamic label up-
grades caused by a conﬁdential right-hand-side are not prob-
lematic, however, and so are permitted.
Our semantics formalizes this strategy via the following