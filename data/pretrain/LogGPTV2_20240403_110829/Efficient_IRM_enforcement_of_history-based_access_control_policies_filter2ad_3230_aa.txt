title:Efficient IRM enforcement of history-based access control policies
author:Fei Yan and
Philip W. L. Fong
Efﬁcient IRM Enforcement of History-Based
Access Control Policies
Fei Yan and Philip W. L. Fong
Department of Computer Science
University of Regina
Regina, Saskatchewan, Canada
{ feiya200, pwlfong }@cs.uregina.ca
ABSTRACT
Inlined Reference Monitor (IRM) is an established enforce-
ment mechanism for history-based access control policies.
IRM enforcement injects monitoring code into the binary of
an untrusted program in order to track its execution his-
tory. The injected code denies access when execution devi-
ates from the policy. The viability of IRM enforcement is
predicated on the ability of the binary rewriting element to
optimize away redundant monitoring code without compro-
mising security.
This work proposes a novel optimization framework for
IRM enforcement. The scheme is based on a constrained
representation of history-based access control policies, which,
despite its constrained expressiveness, can express such poli-
cies as separation of duty, generalized Chinese Wall policies,
and hierarchical one-out-of-k authorization. An IRM opti-
mization procedure has been designed to exploit the struc-
ture of this policy representation. The optimization scheme
is then extended into a distributed optimization protocol, in
which an untrusted code producer attempts to help boost
the optimization eﬀectiveness of an IRM enforcement mech-
anism administered by a distrusting code consumer.
It is
shown that the optimization procedure provably preserves
security even in the midst of distributed optimization. A
prototype of the optimization procedure has been imple-
mented for Java bytecode, and its eﬀectiveness has been
empirically proﬁled.
Categories and Subject Descriptors
D.2.0 [Software Engineering]: General—protection mech-
anisms; D.3.4 [Programming Languages]: Processors—
code generation, optimization; D.4.6 [Operating Systems]:
Security and Protection—Access controls
General Terms
Security, Languages, Veriﬁcation, Performance
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’09, March 10–12, 2009, Sydney, NSW, Australia
Copyright 2009 ACM 978-1-60558-394-5/09/03 ...$5.00.
Keywords
Language-based security, history-based access control poli-
cies, inlined reference monitors, security automata, distrib-
uted optimization protocol.
1.
INTRODUCTION
This paper presents novel implementation techniques for
the protection mechanism of extensible systems, that is, soft-
ware systems composed of a trusted application core collab-
orating with a number of untrusted software components,
all running within the same address space. To support the
late binding of features to an application, the latter could
be made extensible by adopting a plug-in architecture or
oﬀering scripting support. This paper focuses on language-
based extensible systems [30] such as those developed on the
safe language environments Java and .Net. In these systems,
untrusted components collaborate with the application core
through a well-deﬁned Application Programming Interface
(API). To protect the integrity of the resources encapsulated
by the API, it is in the interest of the application core to
ensure that access requests made by the untrusted compo-
nents through the API honor certain security policies. A
notable such family of security policies are history-based ac-
cess control policies, also known as safety properties in the
literature [29]. To enforce these policies, authorization deci-
sions are made solely on the basis of the execution history
of the target program as observed by the enforcement mech-
anism at run time. Examples of such policies include the
Chinese Wall policy [10], Biba’s low water mark policy [8],
one-out-of-k authorization [14], assured pipelines [9], as well
as Stack Inspection [38] and its variants [1].
Execution monitoring [14, 15, 40] is the standard enforce-
ment mechanism for history-based access control policies.
The classical implementation strategy is to interpose a ref-
erence monitor at the entry points of the API, so that the
monitor may track the API calls previously made, argu-
ments passed, or even the run-time state of the untrusted
component to ensure policy compliance. This is the im-
plementation strategy adopted by the Java platform in its
Stack Inspection mechanism [18]. A modern implementa-
tion strategy for execution monitoring is Inlined Reference
Monitor (IRM) [36], in which monitoring code is injected
into an untrusted component through binary rewriting. The
advantage of IRM over interpositioning is that IRM fully
decouples the enforcement mechanism from the application
core, thereby allowing the security model to evolve sepa-
rately from the application code base. An important chal-
lenge faced by IRM enforcement mechanisms is the run-time
overhead induced by the injected code [38, 29]. Viability of
the IRM approach is predicated on the ability of the binary
rewriting element to optimize away unnecessary monitoring
code [12].
In this work, we explore the interplay between security
concerns and optimization procedures for IRM enforcement
of history-based access control policies. Our contribution is
twofold:
1. Optimization-friendly policy representation:
Since [29, 35, 36], the Security Automaton has become
the standard representation for security policies to be
enforced by execution monitoring. A research concern
[5, 17, 22, 33, 34] of the language-based security com-
munity has been the following: Can we trade oﬀ the
expressiveness of policy representation (i.e., by adopt-
ing a less powerful version of the Security Automaton)
for improved resource consumption (e.g., time, space,
information) of the execution monitor? In this work,
we address a related but novel research question: Can
we trade oﬀ the expressiveness of policy representation
for improved eﬀectiveness of the optimization element
in the IRM binary rewriter? By adopting a declara-
tive state representation and imposing structures on
state transitions, we have shown that one can employ
standard compiler optimization techniques to optimize
away state transition code that would otherwise be in-
jected into the target program, and do so without com-
promising security. We also demonstrate that the re-
sulting policy representation is still expressive enough
to encode a wide range of history-based access control
policies.
2. Distributed optimization protocol: To further en-
hance the eﬀectiveness of IRM optimization, we pro-
pose a distributed optimization protocol that has been
inspired by Proof-Carrying Code [24]. Speciﬁcally, an
untrusted code producer sends a software component
to a distrusting code consumer for execution. To pro-
mote usage of the component, the code producer ships
a version of the component that has been annotated
with optimization directives, which are hints on how
the code consumer can aggressively optimize the mon-
itor code to be injected into the component for IRM
enforcement. As the code producer could very well
be malicious, blindly following the optimization di-
rectives could lead to the omission of key monitoring
logic, thus compromising security. To counter this,
the code consumer injects into the component specially
designed run-time checks that will be completely op-
timized away if the code producer is honest about the
optimization directives, but will detect the dishonesty
at run time if the code producer attempts to mislead
the code consumer.
The rest of this paper outlines the proposed policy repre-
sentation (Sect. 3), the optimization procedure that takes
advantage of this policy representation (Sect. 4), a corre-
sponding distributed optimization protocol (Sect. 5), as well
as an implementation (Sect. 6) and its empirical evaluation
(Sect. 7).
2. RELATED WORK
What we call history-based access control policies are also
known in the literature as safety properties1. Schneider
characterized the security policies enforceable by execution
monitoring to be safety properties [29], and proposed Secu-
rity Automata (SA) as the standard representation of ex-
ecution monitors. (A recent sharpening of this result can
be found in [19].)
Inlined Reference Monitoring was ﬁrst
proposed in [36] as a framework to unify previous work [14,
15] that employs binary rewriting to enforce history-based
access control policies. Fong proposed an information-based
characterization of security policies enforceable by execu-
tion monitors consuming only a limited portion of history
information [17]. The goal was to understand the trade-oﬀ
between the diﬀerentiating power of an execution monitor
and the resource to which it is made available, a goal ﬁrst
articulated by Ligatti et al [5, 22]. The work has been re-
ﬁned by Talhi et al to obtain a characterization of execution
monitors operating under memory constraints [33, 34]. Our
work poses a related but novel question: can the expressive-
ness of policy representation be restricted to facilitate IRM
optimization? Our policy representation is formally akin to
STRIPS planning operators [16].
A ﬁrst principled design of optimization procedures for
IRM enforcement mechanisms is [12], which assumes each
transition has a constant cost. Our optimization procedure
is designed for unbounded state space, and thus we adopted
a diﬀerent performance metric (see Sect. 4). As IRM en-
forcement could be seen as a special-case of Aspect-Oriented
Programming (AOP) [21], previous work on optimization
techniques for AOP languages (e.g., [4]) is also relevant. Our
work is unique in that we facilitate optimization by trading
oﬀ policy expressiveness and by adopting a distributed op-
timization protocol.
Proof-Carrying Code (PCC) [24] pioneered the idea of self-
certifying code. Speciﬁcally, a proof of safety is shipped
along with an untrusted program, allowing the code con-
sumer to verify safety in a tractable manner. Rose and Rose
proposed a lightweight Java bytecode veriﬁcation framework
[27], in which type states are shipped along with Java class-
ﬁles, so that bytecode veriﬁcation can be performed more
eﬃciently. In model-carrying code [31], the code producer
ships an untrusted program together with its behavior model.
The model is checked by the code consumer against a preset
policy for compliance. The veriﬁed model is then employed
to monitor the execution of the untrusted program. In [2], a
PCC-style safety proof is attached to an untrusted program
to certify that an execution monitor has been properly in-
lined. Compared to the work above, ours is unique in that
it is the ﬁrst to propose annotations for facilitating IRM
optimization rather than veriﬁcation.
CMV [32] is a model checker for verifying complete medi-
ation [28] in the Stack Inspection enforcement mechanism of
a Java Virtual Machine (JVM) implementation. Our work
could be seen as a generalization of the static analysis per-
formed by CMV to (1) support a more general class of safety
properties and (2) inject dynamic checks when a target prop-
erty cannot be statically veriﬁed. Both systems employ a
notion of method interfaces (called method summaries in
1We adopt the nomenclature of [14], and use the term
“history-based access control” to refer to execution moni-
toring in general. Recently, some authors (e.g., [39]) use the
term to refer to a variant of Stack Inspection [38] proposed
by Abadi and Fournet [1]. We deviate from the latter usage.
manager();
if (...) {
accountant();
}
if (...) {
critical();
manager();
}
accountant();
critical();
Figure 1: Program before monitor inlining.
Program Point
after manager()
after accountant()
before critical()
Event
m
a
c
Figure 2: Mapping program points to access events.
[32]) to modularize analysis. While method summaries are
computed by a special-purpose algorithm, method interfaces
are generated by a work-list-based whole-program analysis
[41, Appendix A].
3. AN OPTIMIZATION-FRIENDLY
POLICY REPRESENTATION
3.1 Inlined Reference Monitor
Consider the enforcement of Separation of Duty [11] in
an example program shown in Fig. 1 (adapted from [12], in
turn inspired by [20, 6]). Our goal is to ensure that the crit-
ical() operation is performed only under the endorsement
of both the manager() and accountant() operations. To pre-
cisely articulate this policy, we interpret the run-time traver-
sal of certain program points to be security-relevant events
(Fig. 2): events m, a and c correspond respectively to the
three operations. Program execution therefore generates an
event sequence. For example, if both of the “then” branches
are executed, then the event sequence macmac will be gen-
erated. Our policy can then be phrased as a safety property
regarding the generated event sequences [29]. One way to
enforce such a policy is through Inlined Reference Monitors
(IRMs) [36]. Speciﬁcally, monitoring code is injected into
the program points of interest, tracking the history of exe-
cution, and aborting execution whenever a policy violation
is detected.
In Fig. 3, monitoring code has been injected
into the original programs identiﬁed in Fig. 1, tracking the
occurrences of events m and a, and ensuring that every oc-
currence of event c is properly guarded by both m and a.
Since [29, 35, 36], history-based access control policies are
represented by Security Automata. A Security Automa-
ton (SA) is a quadruple M = hΣ, Q, q0, {δa}a∈Σi, where (i)
Σ is a countable set of access events, (ii) Q is a countable
set of monitor states, (iii) q0 ∈ Q is a distinguished start
state, and (iv) {δa}a∈Σ is a family of transition functions,
indexed by access events, such that each transition function
δa : Q ⇀ Q is a partial function mapping the current moni-
tor state to an optional next state. Given an event sequence
w ∈ Σ∗, we write δw for the partial function deﬁned induc-
tively as follows: δ(ǫ) = ιQ, the total identity function for
Q, and δa·w = δw ◦ δa (i.e., function composition). Note
bool pm = false;
bool pa = false;
manager();
pm = true;
if (...) {
accountant();
pa = true;
}
if (...) {
if (pm ∧ pa) { pm = false; pa = false; }
else throw new IRMException();
critical();
manager();
pm = true;
}
accountant();
pa = true;
if (pm ∧ pa) { pm = false; pa = false; }
else throw new IRMException();
critical();
Figure 3: Program after monitor inlining.
that, since δw is partial, δw(q) may not be deﬁned for every
state q. An event sequence w ∈ Σ∗ is considered policy
compliant iﬀ δw(q0) is deﬁned.
At the program points corresponding to event a, IRM in-
jects a code fragment that simulates δa. A competitive IRM
implementation will subject this code fragment to aggressive
optimization.
3.2 A Constrained Policy Representation
Any practical policy representation must place constraints
on the Q and δ components [35, 36, 3]. We consider repre-
sentation constraints that facilitate IRM optimization. Our
proposed policy representation is based on two design choices
that balance eﬃciency considerations against policy expres-
siveness.
Design choice 1: Unbounded state space, ﬁnitary tran-
sitions.
Unlike [12], which assumes Q to be ﬁnite, we anticipate
the state space to be unbounded for practical IRM. Speciﬁ-
cally, we envision the employment of IRM rewriting at load
time, such that the state space may have to be expanded