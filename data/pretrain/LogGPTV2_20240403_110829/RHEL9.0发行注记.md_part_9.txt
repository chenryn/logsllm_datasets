合作伙伴和独立软件供应商(ISV)应利用早期版本的 RHEL 9
测试他们的内核模块，以确保其符合 GPL。
:::
([BZ#1960556](https://bugzilla.redhat.com/show_bug.cgi?id=1960556){.link})
[]{#New-features.html#BZ-1978382}
::: title
**64 位 ARM 架构在 RHEL 9 中有 4 KB 页面大小**
:::
红帽已经为 Red Hat Enterprise Linux 9 的 64 位 ARM 架构选择了 4 KB
页面大小。这个大小对大多数基于 ARM
的系统的工作负载和内存数量良好。要有效地使用大型页面大小，请使用巨页选项来处理大量内存或带有大型数据集的工作负载。
有关巨页的更多信息，请参阅[监控和管理系统状态和性能](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/monitoring_and_managing_system_status_and_performance/index#configuring-huge-pages_monitoring-and-managing-system-status-and-performance){.link}。
(BZ#1978382)
[]{#New-features.html#BZ-2038965}
::: title
**`strace`{.literal} 程序现在可以正确地显示 SELinux 上下文不匹配**
:::
`strace`{.literal} 的现有 `--secontext`{.literal} 选项已使用
`mismatch`{.literal} 参数进行了扩展
。这个参数可让您只打印预期的上下文以及实际不匹配的上下文。输出用双感叹号(`!!`{.literal})分隔，第一个是实际上下文，然后是预期上下文。在下面的示例中，`full,mismatch`{.literal}
参数打印预期的完整上下文以及实际的上下文，因为上下文的用户部分不匹配。但是，在使用单独的
`mismatch`{.literal}
时，它只检查上下文的类型部分。预期的上下文不会打印，因为上下文的类型部分匹配。
``` screen
[...]
$ strace --secontext=full,mismatch -e statx stat /home/user/file
statx(AT_FDCWD, "/home/user/file" [system_u:object_r:user_home_t:s0!!unconfined_u:object_r:user_home_t:s0], ...
$ strace --secontext=mismatch -e statx stat /home/user/file
statx(AT_FDCWD, "/home/user/file" [user_home_t:s0], ...
```
SELinux 上下文不匹配通常会导致与 SELinux 相关的访问控制问题。系统调用
traces 中打印的不匹配可显著加快 SELinux 上下文正确性的检查。系统调用
traces 也可以解释有关访问控制检查的特定内核行为。
([BZ#2038965](https://bugzilla.redhat.com/show_bug.cgi?id=2038965){.link})
[]{#New-features.html#BZ-1851933}
::: title
**`perf-top`{.literal} 现在可以按特定列排序**
:::
在这个版本中，对 `perf-top`{.literal}
系统性能分析工具的更新，您可以根据任意事件列对示例进行排序。在以前的版本中，当一个组中的多个事件被抽样时，事件按照第一列进行排序。要排序示例，请使用
`--group-sort-idx`{.literal}
命令行选项，然后按数字键，按匹配的数据列对表进行排序。请注意列编号从
`0`{.literal} 开始。
（BZ#1851933）
[]{#New-features.html#BZ-1972029}
::: title
**新软件包： `jigawatts`{.literal}**
:::
checkpoint/Restore In Userspace(CRIU)是一个 Linux
工具，它允许检查识别和恢复进程。`jigawatts`{.literal} 软件包包含一个
Java 库，旨在提高 Java 应用程序可用性的 CRIU 机制。
([BZ#1972029](https://bugzilla.redhat.com/show_bug.cgi?id=1972029){.link})
[]{#New-features.html#BZ-1933980}
::: title
**`trace-cmd reset`{.literal} 命令有新的行为**
:::
在以前的版本中，`trace-cmd reset`{.literal} 命令会将
`tracing_on`{.literal} 配置重置为 0。`trace-cmd 重置`{.literal}
的新行为是将 `tracing_on`{.literal} 重置为默认值 1。
(BZ#1933980)
[]{#New-features.html#BZ-2070506}
::: title
**RHEL 9 支持扩展 Berkeley Packet 过滤器**
:::
[**Extended Berkeley Packet Filter(eBPF)**]{.strong}
是一个内核中的虚拟机,允许在可访问有限功能的受限沙箱环境中在内核空间中执行代码。虚拟机执行类特殊的装配代码。
[**eBPF**]{.strong}
字节码首先加载到内核。然后，使用即时编译对原生机器代码进行验证并转换为原生机器代码。最后，虚拟机会执行代码。
红帽提供大量使用 [**eBPF**]{.strong} 虚拟机的组件。在 RHEL 9
中，这些组件包括：
::: itemizedlist
-   [**BPF Compiler Collection(BCC)**]{.strong} 软件包，提供用于使用
    [**eBPF**]{.strong} 的 I/O 分析、联网和监控 Linux 操作系统的工具。
-   [**BCC**]{.strong} 库，它允许开发与 [**BCC**]{.strong}
    工具软件包中相似的工具。
-   `bpftrace`{.literal} 追踪语言。
-   `libbpf`{.literal} 软件包，对于 `bpf`{.literal} development 和
    `bpf`{.literal}- 相关的应用程序（如 `bpftrace`{.literal}
    ）至关重要。
    ::: itemizedlist
    -   `libbpf`{.literal} 库中的 `XDP`{.literal} 和 `AF_XDP`{.literal}
        API 部分不被支持，并可能在以后的发行版本中删除。
    :::
-   [**eBPF for Traffic Control（tc）**]{.strong}
    功能，可在内核网络数据路径中启用可编程数据包处理。
-   [**eXpress Data Path(XDP)**]{.strong}
    功能，可在内核网络堆栈处理它们前提供对接收的数据包的访问。红帽仅在通过
    `libxdp`{.literal} 库使用时支持 [**XDP**]{.strong}。
-   `xdp-tools`{.literal} 软件包，其中包含 [**XDP**]{.strong}
    功能的用户空间支持工具，在 AMD64 和 Intel64 CPU
    构架中被支持。`xdp-tools`{.literal} 软件包包括：
    ::: itemizedlist
    -   `libxdp`{.literal} 库。
    -   载入 XDP 程序的 `xdp-loader`{.literal} 工具。
    -   用于数据包过滤的 `xdp-filter`{.literal} 示例程序。
    -   用于从启用了 [**XDP**]{.strong} 的网络接口捕获数据包的
        `xdpdump`{.literal} 工具。目前仅在 AMD64 和 Intel64 CPU
        构架中支持 `xdpdump`{.literal}
        工具。它可用于其他架构作为技术预览。
    :::
-   用于连接 [**eXpress Data Path(XDP)路径到用户空间的
    `AF_XDP`{.literal}** ]{.strong} 套接字。
:::
([BZ#2070506](https://bugzilla.redhat.com/show_bug.cgi?id=2070506){.link})
[]{#New-features.html#BZ-1896647}
::: title
**RHEL 9 提供 `crash`{.literal} 工具版本 8.0.0**
:::
RHEL 9 带有 `crash`{.literal} 工具版本
8.0.0。程序错误修复和显著改进包括：
::: itemizedlist
-   在 `add-symbol-file`{.literal} 命令中添加新的 `偏移`{.literal}
    参数。这一支持有助于将 `kaslr_offset`{.literal} 设置为
    `gdb`{.literal}。
-   将 `gdb-7.6`{.literal} 升级到 `gdb-10.2`{.literal}。
:::
(BZ#1896647)
[]{#New-features.html#BZ-1988894}
::: title
**`makedumpfile`{.literal} 现在支持改进的 `zstd`{.literal} 压缩功能**
:::
在这个版本中，`makedumpfile`{.literal} 包含了
Zstandard(`zstd`{.literal})压缩功能，它提供了高压缩率。这种改进有助于在大型内存系统中特别使用。
`与之前`{.literal} 的压缩率相比，zstd 压缩功能在 `vmcore`{.literal}
转储大小和压缩时间之间有很好的平衡。现在，改进的压缩机制会使用可接受的压缩时间创建一个较小的
`vmcore`{.literal} 文件。
请注意，良好的压缩率还取决于系统的使用方式以及 RAM 中存储的数据类型。
(BZ#1988894)
[]{#New-features.html#BZ-1874125}
::: title
**Intel Xeon 可扩展服务器处理器上启用了 `numatop`{.literal}**
:::
`numatop`{.literal} 是一个跟踪和分析 NUMA
系统上运行的进程和线程的行为，并显示可以识别 NUMA 相关性能瓶颈的指标。
`numatop`{.literal} 使用 Intel 性能计数器抽样技术，并将性能数据与 Linux
系统 `运行时信息`{.literal} 相关联，以在生产系统中提供分析。
(BZ#1874125)
[]{#New-features.html#BZ-1895232}
::: title
**`kexec_file_load`{.literal} 已添加为 RHEL 9 的默认选项**
:::
在这个版本中，为 64 位 Arm 架构添加了 `kexec_file_load`{.literal}
系统调用。它为 `kdump`{.literal} 提供内核化 `kexec`{.literal}
装载程序。在以前的版本中，当启用了安全引导选项时，内核会阻止加载未签名的内核镜像。`kdump`{.literal}
机制首先会尝试检测是否启用了安全引导，然后选择要运行的引导接口。因此，在启用了安全引导并指定了
`kexec_file_load（）`{.literal} 时，未签名的内核无法加载。
在这个版本中解决了这个问题，未签名的内核在上述场景中可以正常工作。
(BZ#1895232)
[]{#New-features.html#BZ-1958452}
::: title
**`makedumpfile`{.literal} 现在包含改进的选项，以获得预计
`vmcore`{.literal} 大小**
:::
在这个版本中，`makedumpfile`{.literal}
程序包括以下选项，可帮助打印当前运行的内核转储大小的估算：
::: itemizedlist
-   `--dry-run`{.literal}
    执行其他选项指定的所有操作，但不会写入输出文件。
-   `--show-stats`{.literal} 会显示报告信息。这是在提供给
    `--message`{.literal} 级别选项的级别上启用位 4 的替代选择。
:::
以下示例显示了 `--dry-run`{.literal} 和 `--show-stats`{.literal} 用法：
``` screen
$ makedumpfile --dry-run --show-stats -l --message-level 7 -d 31 /proc/kcore dump.dummy
```
请注意，转储文件大小可能会根据 panic
的系统状态而有所不同，选项提供的估算可能与实际状态不同。
([BZ#1958452](https://bugzilla.redhat.com/show_bug.cgi?id=1958452){.link})
[]{#New-features.html#BZ-2034490}
::: title
**`kexec-tools`{.literal} 软件包现在支持 RHEL 9 的默认
`crashkernel`{.literal} 内存保留值**
:::
`kexec-tools`{.literal} 软件包现在维护默认的 `crashkernel`{.literal}
内存保留值。`kdump`{.literal} 服务使用默认值为每个内核保留
`crashkernel`{.literal} 内存。这个实现还提高了在系统有 4GB 可用内存时
`kdump`{.literal} 的内存分配。
查询默认的 crashkernel 值：
``` screen
$ kdumpctl get-default-crashkernel
```
如果系统上默认 `crashkernel`{.literal} 值保留的内存不够，请提高
`crashkernel`{.literal} 参数。
请注意，RHEL 9 及更新的版本不再支持引导命令行中的
`crashkernel=auto`{.literal} 选项。
如需更多信息，请参阅
`/usr/share/doc/kexec-tools/crashkernel-howto.txt`{.literal} 文件。
(BZ#2034490)
[]{#New-features.html#JIRA-RHELPLAN-100497}
::: title
**RHEL 9 支持内核调度**
:::
借助内核调度功能，用户可以防止不应相互信任的任务共享相同的 CPU
内核。类似地，用户可以定义可共享 CPU 内核的任务组。
可以指定这些组：
::: itemizedlist
-   通过减少一些跨严重多线程(SMT)攻击来提高安全性
-   隔离需要整个内核的任务。例如，对于实时环境中的任务，或依赖特定处理器功能的任务，如单指令、多数据(¢D)处理
:::
如需更多信息，请参阅 [Core
Scheduling](https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/core-scheduling.html){.link}。
(JIRA:RHELPLAN-100497)
[]{#New-features.html#BZ-2050415}
::: title
**使用非限制 iommu 模式作为默认在 64 位 ARM 架构上提高了性能**
:::
在这个版本中，64 位 ARM 架构默认使用 lazy
直接内存访问(DMA)域进行系统内存管理单元(SMMU)。虽然获得显著的性能，但它在
SMMU 上的地址未映射和翻译 Lookaside
Buffer(TLB)刷新之间引入了一个窗口。在以前的版本中，ARM64 架构将严格的
DMA 域配置为默认值，这会导致因为 4KB 页的大小造成性能下降。
如果您需要使用严格的 DMA 域模式，请使用内核命令行指定
`iommu.strict=1`{.literal} 模式。请注意，使用严格的 DMA 域可能会导致 64
位 ARM 架构的性能下降。
(BZ#2050415)
[]{#New-features.html#BZ-2002474}
::: title
**`kernel-rt`{.literal} 源树已更新至 RHEL 9.0 树**
:::
`kernel-rt`{.literal} 源已更新为使用最新的 Red Hat Enterprise Linux
内核源树。实时补丁集也更新至最新的上游版本
v5.15-rt19。这些更新提供了很多程序错误修正和增强。
(BZ#2002474)
[]{#New-features.html#BZ-1844416}
::: title
**在 `hv_24x7`{.literal} 和 `hv_gpci`{.literal} PMU 中支持 CPU 热插拔**
:::