# lol (Crypto, 233p, 16 solved)
In the task we get [encryption code](encrypt.cpp) and [encrypted flag](flag.txt.enc).
This task turned out to be "broken" and solvable with an unintended solution, so another version was released at some point with a fix.
The code here is pretty straighforward.
Core part is:
```c
    string input;
    in >> input;
    Vector plaintext(input.size());
    copy(input.begin(), input.end(), begin(plaintext));
    // Generate deterministic helper matrix A
    Matrix A(key_size, plaintext.size());
    {
        RNG rng(0);
        A.fill(&rng);
    }
    // Generate random key
    Vector key(key_size);
    {
        RNG rng;
        for (auto& x : key)
            x = rng.next_qword_safe();
    }
    Vector cipher = A * plaintext + key;
```
The flag is treated as integer vector and multiplied by a fixed matrix, and the a random key vector is added to the result.
```
ciphertext = M*flag + key
```
In order to recover the flag we would have to figure out the random key vector, subtract it from the ciphertext we have and then solve the matrix equation.
The random number generator is:
```c
struct RNG {
    random_device dev;
    mt19937_64 rng;
    RNG() : dev(), rng(dev()) {}
    RNG(uint64_t seed) : rng(seed) {}
    bool next_bit() { return rng() & 1; }
    // For when we want to hide the RNG state
    uint64_t next_qword_safe() {
        uint64_t res = 0;
        for (int i = 0; i (buffer);
    Vector all(64);
    for(int i=0;i(buffer);
        all[i] = element;
    }
    Vector res(size);
    for(int i=0;i<size;i++){
        res[i] = all[i+4];
    }
    return res;
}
int main(int argc, const char **argv) {
    if(argc < 4){
        cerr<<"./binary start end encrypted_file"<<endl;
        exit(-1);
    }
    unsigned int start = atoi(argv[1]);
    unsigned int end = atoi(argv[2]);
    Vector result = load_result(string(argv[3]));
    Matrix A_inv(37, 37);
    uint64_t data[] = {...}; # list of inverse matrix coefficients
    A_inv.fill(data);
    // Generate random key
    for(unsigned int i=start;i<end;i++){
        if((i & 0xFFFFF) == 0){
            cout<<i<<endl;
        }
        Vector key(key_size);
        {
            RNG rng(i);
            for (auto& x : key)
                x = rng.next_qword_safe();
        }
        Vector cut_key(37);
        for(int j=0;j<37;j++){
            cut_key[j] = key[j+4];
        }
        Vector clean = (result - cut_key);
        Vector solution = A_inv * clean;
        if(solution[0] == 51) {
            cout<<"match at seed = "<<i<<endl;
            for (int k=0;k<37;k++) {
                cout << solution[k]<<" ";
            }
        }
    }
}
```
And with such code we can test all seed ranges from `start` till `end`.
It takes a while, but we can run this in paralell on as many cores as we have available and at some point we get a match and the result flag `34C3_l3nstra_w0uld_h4ve_b33n_s0_proud`, which indicates that the author expected this to be solved via `LLL`.
The complete solver code available [here](brute.cpp)