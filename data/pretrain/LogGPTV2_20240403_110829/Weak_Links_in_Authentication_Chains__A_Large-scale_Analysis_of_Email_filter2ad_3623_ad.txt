dorsement. But this feature can be abused by the attacker to
send spooﬁng emails. The forwarder should not add a DKIM
signature of its domain name if the forwarded email does not
have a DKIM signature or fails the DKIM validation before.
Otherwise, the attacker can defraud the forwarding services
of legitimate DKIM signature. However, both RFC 6376 [34]
and RFC 6377 [30] suggest that forwarders should add their
signatures to the forwarded emails. It has further led to more
email services have such problems.
Figure 12 illustrates the complete process of the attack.
The email forwarding service (a.com) signs and adds DKIM
signatures to all forwarded emails without strict veriﬁcation.
First, the attacker can register an account (PI:EMAIL) un-
der the email forwarding service. Second, he can conﬁgure all
receiving emails forward to another attacker’s email address
(PI:EMAIL). The attacker can then send a spooﬁng email
with From: PI:EMAIL, To: PI:EMAIL to PI:EMAIL
through the direct MTA attack model. The forwarding service
(a.com) adds a legal DKIM signature to this spooﬁng email.
As a result, the attacker gets a spooﬁng email with a legal
DKIM signature signed by a.com. In our experiments, Al-
ibaba Cloud, Ofﬁce 365, and Yahoo Email are all vulnerable
to such attacks.
ARC Problems (A11). ARC [4] is a newly proposed protocol
that provides a chain of trust to link the veriﬁcation results of
SPF, DKIM, and DMARC in the email forwarding process.
Only three email services (i.e., Gmail, Ofﬁce 365, and Zoho)
deploy the ARC protocol in our experiments. However, our
research found that both Ofﬁce 365 and Zoho have security
issues with the ARC protocol implementation. Besides, except
for the A10 attack, ARC cannot defend against most of the
attacks discussed above.
For Zoho email services, it shows alerts for users if the
email fails the sender inconsistency checks. However, there
is an error in Zoho’s ARC implementation. When a spoof-
ing email is automatically forwarded to the Zoho mailbox
via Gmail, the ARC-Authentication-Results (AAR) header
added by Zoho shows a wrong "pass" DMARC veriﬁcation
result. Even worse, this incorrect ARC implementation can
also bypass the sender inconsistency checks. Zoho does not
display alerts to users for this spooﬁng email. Ofﬁce 365
also has errors in the implementation of ARC. It passes the
wrong veriﬁcation results of SPF, DKIM, and DMARC in the
AAR header. This would break the ARC trust chain, which
introduces more security risks.
4.4 Attacks in Email UI Rendering
The last and most crucial part of the email system is to ensure
that emails are rendered correctly. Once the attacker can break
the defensive measures in this stage, ordinary users are easily
Figure 11: Exploiting forwarding services to bypass SPF and
DMARC.
2821 [26] mentions that, when a domain has no MX records,
SMTP assumes an A record will sufﬁce, which means any
domain name with an A record can be considered a valid
email domain. In addition, many well-known websites deploy
a wildcard DNS A record that makes this type of attack more
applicable. As a result, it is difﬁcult for the receiver’s MTA to
determine whether to reject such emails.
Experimental results show that 13 email services are vulner-
able to such attacks. Only one email service (Mail.ru) deploys
a wildcard DNS entry for the SPF record in our experiments.
By default, the DMARC policy set for an organizational do-
main should apply to any sub-domains, unless a DMARC
record has been published for a speciﬁc sub-domain. How-
ever, the experimental results show that our attack is still
effective, even if the receiver’s MTA conducted a DMARC
check.
4.3 Attacks in Email Forwarding Veriﬁcation
This work shows that attackers can abuse the email forwarding
service to send spooﬁng emails that would fail in the shared
MTA attack model. Besides, forwarding service may give the
forwarded email a higher security endorsement. Both situa-
tions are exploitable for attackers to send spooﬁng emails.
Unauthorized Forwarding Attack (A9). If the attacker can
freely conﬁgure forwarded emails to any accounts without any
authentication veriﬁcation, the email service has unauthorized
forwarding issues. First, the attacker should have a legitimate
email account on the email forwarding service. Because these
emails are sent from a well-known email forwarding MTA,
the receiver’s MTA generally accepts such emails. We can
also exploit forwarding services to bypass SPF and DMARC
protocols when the target domain name is the same as the
forwarding domain name. This attack is depicted in Figure 11.
Based on this attack, attackers can abuse the credibility of
well-known MTAs to craft an realistic spooﬁng email.
Among our experimental targets, 12 email services have
such vulnerabilities. 7 email services do not provide the email
forwarding feature. The other email services have realized the
risks and performed corresponding forwarding veriﬁcation to
3210    30th USENIX Security Symposium
USENIX Association
(a) The spooﬁng email defraud a DKIM signature signed by a.com.
(b) Spooﬁng with the legal DKIM signature.
Figure 12: Exploiting forwarding services to bypass DKIM
and DMARC.
deceived by such spooﬁng emails unconsciously.
The displayed address is the sender address shown on the
MUA, but the real address is the sender identity (From) used
in SMTP communication. If an attacker can make the dis-
played address inconsistent with the real address, the attack is
considered successful. Besides, as shown in Figure 2, some
MUAs add a security indicator to those emails which fail the
sender inconsistency checks. If an attacker can bypass the
sender inconsistency checks, it is also regarded as an effective
attack technique.
There are various attacks in the email UI rendering stage.
Some are similar to the A6, A7 attacks discussed previously.
The difference is that a UI level attack’s goal is to bypass
the sender inconsistency checks and spoof the email address
shown for users, rather than bypass the three email security
protocols’ veriﬁcation. Thus, we usually construct ambiguous
From headers rather than Mail From headers. In this section,
we only discuss the attack techniques not previously men-
tioned.
IDN Homograph Attack (A12). The homograph attack [16]
is a known web security issue, but its security risks to the
email system have not been systematically discussed. As
popular email providers gradually support the emails from
internationalized domain names (IDN), this attack is likely to
have a wider security impact.
Figure 13: A example of IDN homograph attack to imperson-
ate PI:EMAIL on iCloud.com web interface.
Punycode is a way of converting words that cannot
be displayed in ASCII into Unicode encoding. Notably,
Unicode characters can have a similar appearance on the
screen while the original addresses are different. Figure 13
shows a spooﬁng email that seems to come from the ad-
dress (PI:EMAIL), but is actually from the address
(admin@xn–aypal-uye.com).
Modern browsers have implemented some defensive mea-
sures against the IDN homograph attack. For example, the
IDN should not be rendered if the domain label contains char-
acters from multiple languages. Unfortunately, we found few
similar defensive measures in email systems.
The experimental results show that 10 email services (e.g.,
Gmail, iCloud, Mail.ru) support IDN email is displayed. Cur-
rently, only Coremail ﬁxes this vulnerability. With our as-
sistance, Coremail adds white spaces before and after the
Unicode characters in the address bar. In this way, users can
easily distinguish between ASCII characters and Unicode
characters to prevent such attacks.
Missing UI Rendering Attack (A13). We also ﬁnd that many
characters can affect the rendering of the MUA. Some charac-
ters may be discarded during the rendering process. Addition-
ally, some characters may also cause the email address to be
truncated (similar to the attack A6). These characters include
invisible characters (U+0000-U+001F,U+FF00-U+FFFF) and
semantic characters (@,:,;,"). For example, the MUA ren-
ders the address admin@PI:EMAIL as admin@gmail.com.
There are still 12 email services (e.g., zoho.com, 163.com,
sohu.com) vulnerable to such attacks. Other services refuse
to receive or just throw such emails into the spam box.
Right-to-left Override Attack (A14). Several characters are
designed to control the display order of the string. One
of these is the "RIGHT-TO-LEFT OVERRIDE" character,
U+202E which tells computers to display the text in a right-
to-left order. It is mainly used for writing and reading Ara-
bic or Hebrew text. Although this attack technique [1] has
been discussed elsewhere, its security risk to email spooﬁng
has not yet been fully explored. An attacker can construct
a string as \u202emoc.a@\u202dalice, which is displayed
USENIX Association
30th USENIX Security Symposium    3211
attack techniques to bypass the corresponding security check.
Figure 14 shows a representative example under the shared
MTA attack model. Yahoo email performs a simple sender
check policy to defend against the A2 attack. It prohibits
user from sending emails with different Mail From and
From headers. However, the attacker can still bypass this
sender check policy through the A4 attack. To be speciﬁc,
we can send a spooﬁng email with a ﬁrst From header
(PI:EMAIL), which is same as the Mail From header.
Then, we add a second From header ( PI:EMAIL).
Interestingly, iCloud does not reject such a spooﬁng email
with multiple From headers. Even worse, iCloud uses the
ﬁrst From header to perform the DMARC veriﬁcation and
gets a "pass" result with yahoo.com, while the second From
(PI:EMAIL) header is displayed on the webmail’s
UI for users. Therefore, this combined attack can eventually
bypass all three email security protocols and spoof the MUA.
Combined Attacks under Different Attack Models. The
attacker can also conduct a more effective attack by combin-
ing different attack models. The email system is a complex
ecosystem with a multi-party trust chain, which relies on
security measures implemented and deployed by multiple par-
ties. Under different attack models, multiple parties may have
various vulnerabilities. For example, it is difﬁcult to attack
through the shared MTA attack model if a email service’s
sending MTA performs strict checks in sending authentica-
tion. However, once it fails to provide a correct and complete
security defensive solution in other stages, the attacker can
still bypass and send spooﬁng emails through the other two
attack models. Hence, we have more combination attacks in
the real world by combining multiple attack models.
Figure 4 shows a successful spooﬁng attack by combining
the direct and forward MTA attack models. For instance, Os-
car employs the attack techniques (A2,A3) to send a spooﬁng
email with empty Mail From and crafted From headers. Be-
sides, Oscar has a legitimate account (PI:EMAIL),
which is different from the victim’s account. Thus, Oscar
can conﬁgure this account to automatically forward the re-
ceived emails to one of his accounts (PI:EMAIL).
Alibaba Cloud service adds a DKIM signature to all for-
warded emails without a necessary veriﬁcation check (A10).
It grants Oscar’s spooﬁng email a legitimate DKIM signa-
ture. Then, Oscar can send this spooﬁng email with Mail
From: header through the direct MTA
attack model, which is illustrated in Figure 15(b).
For this spooﬁng email, the SPF protocol veriﬁes the
attack.com domain, while the DKIM and DMARC proto-
cols verify the aliyun.com domain. Therefore, this email
can pass all the three email security protocols, and enter the
inbox of Gmail. In addition, no email service shows alerts
for users about the email with different veriﬁed domains of
the three protocols. It further makes this type of attack more
deceptive to ordinary users.
Figure 14: Combining A2 and A4 attacks to impersonate
PI:EMAIL on iCloud.
as Alice@a.com. Because spooﬁng emails with RTL charac-
ters may be directly thrown into the spam box, we generally
encode the payload (with utf-8 mode) to attack.
11 email services (e.g., Outlook, Yahoo, Yandex) are still
vulnerable to this attack. 10 services (e.g., cock.li,daum.net,
onet.pl) cannot correctly render this type of email address.
Other email services directly reject such mails.
5 Combined Attacks
According to four authentication stages in email delivery pro-
cess, we divide our attacks into four categories. However,
these attacks have certain limitations. First, some attacks
(e.g., A2, A3) can have a spooﬁng effect on the recipent. How-
ever, they can not bypass all email spooﬁng protections. For
example, a spooﬁng email via Empty Mail From Attack (A3)
bypasses the SPF veriﬁcation but fails in the DMARC ver-
iﬁcation.
In addition, most email vendors have ﬁxed the
individually conducted attacks which can bypass all the three
email security protocols in our experiment. Thus, combin-
ing multiple attacks of different stages is more feasible in
practice. With a "cocktail" joint attack combining different
attack techniques, we can easily construct a spooﬁng email
that can completely pass the veriﬁcation of three email se-
curity protocols and user-interface protections. Finally, there
is no difference shown on the receiver’s MUA between this
spooﬁng email and a legitimate one.
There are numerous feasible combined attacks by combin-
ing 3 types of attack models and 14 attack techniques in the
4 authentication stages. This work selects two of the most
representative examples to illustrate the effects of combined
spooﬁng attacks. Table 3 lists key information of the two
examples.
Combined Attacks under the Same Attack Model. We
identiﬁed a total of 14 email spooﬁng attack techniques, of
which 14 attack techniques can be combined under the same
attack model to achieve better attack effects. In addition, al-
though some vendors might ﬁx a vulnerability through one
security check, the attacker can accurately combine other
3212    30th USENIX Security Symposium
USENIX Association
Table 3: Details of two combined attack examples.
From
To
Attack
Case 1 PI:EMAIL PI:EMAIL
Case 2 PI:EMAIL PI:EMAIL Direct & Forward MTA Attack
Shared MTA Attack
Attack Model
Combination of attacks
A2 + A4
A2+A3+A10
Weak Links among Multi-roles. In the email system, au-
thenticating the sender’s identity is a complicated process. It
involves four important roles: senders, receivers, forwarders,
and UI renderers. Standard security models work on the as-
sumption that each role properly develops and implements
related security veriﬁcation mechanisms to provide the over-
all security. However, many email services do not implement
the correct security strategy in all four roles.
Many email services (e.g., iCloud, Outlook, Yeah.com) do
not notice the security risks caused by unauthorized forward-
ing attacks (A9) in the email forwarding stage. In addition, the
speciﬁcations do not state any clear responsibilities of four
roles (i.e., senders, receivers, forwarders, and UI renderers)
in email security veriﬁcation.
Weak Links among Multi-services. Different email services
usually have different conﬁgurations and implementations.
Some services (e.g., Gmail, Yandex.com) forbid sending
emails with ambiguous headers but receive them with tol-
erance. Conversely, some (e.g., Zoho, Yahoo) tend to allow
the sending of emails with an ambiguous header, but conduct
very strict checks in the email receiving veriﬁcation stage.
The differences among security policies allow attackers to
send spooﬁng emails from a service with a tolerant sending
policy to a service with a loose receiving strategy.
Besides, some email providers deviate from RFC speciﬁ-
cations while dealing with emails with ambiguous headers.
When MUA handles with multiple From headers, some ser-
vices (e.g., Outlook,Mail.ru) display the ﬁrst header, while
others (e.g., iCloud, yandex.com) display the last header.
Moreover, different vendors support Unicode characters to
various degrees. Some vendors (e.g., 21cn.com, Coremail)
have been aware of the new security challenges caused by
Unicode characters, but some (e.g., 163.com, yeah.net) have
no knowledge. Particularly, some (e.g., zoho.com, EwoMail)
even have not yet supported Unicode characters’ rendering.
Finally, only a few email providers show visual UI noti-
ﬁcation to alert users of spooﬁng emails and only 12 ven-
dors implement sender inconsistency checks. In particular,
the sender inconsistency checks in practice are signiﬁcantly
diverse because of the absence of a uniﬁed implementation
standard. The lack of an effective and reasonable email se-
curity notiﬁcation mechanism is also one reason why email
spooﬁng has been repeatedly prohibited, but never eliminated.
(a) The ﬁrst stage of the attack obtained an Alibaba Cloud legal DKIM signa-
ture.
(b) The second stage of the attack passed Gmail’s three mail protocol security
veriﬁcations.
Figure 15: A combination attack with A2,A3 and A10 from
PI:EMAIL to victim@gmail.com.
6 Root Causes and Mitigation
6.1 Root Causes
As aforementioned, the security of email systems relies on
several protection policies that are separately enforced by
multiple parties. Thus, the inconsistencies in these multiple
parties could create more vulnerabilities and lead to severe
spooﬁng attacks. We identify the root causes of the attacks as
follows.
Weak Links among Multi-protocols. The protocol veriﬁca-
tion process is one of the weak links in the authentication
chain, due to the ambiguity of email speciﬁcations, the lack of
best practice and the complexity of the MIME standard. In the
SMTP communication process, multiple ﬁelds of protocols
contain sender’s identity information (i.e., Auth username,
MAIL From, From, Sender). The inconsistency of these ﬁelds
provides the basis for email spooﬁng attacks.
SPF, DKIM, and DMARC are proposed and standardized
to prevent email spooﬁng attacks from different aspects. How-
ever, an email system can prevent email spooﬁng attacks only
when all protocols are well enforced. In this chain-based au-
thentication structure, a failure of any link can render the
authentication chain invalid.
USENIX Association
30th USENIX Security Symposium    3213
6.2 Mitigation
This subsection discusses the key mitigating measures. Since