15
16 ⋆ secs->base = vm_mmap(file, MANIPULATED_BASE_ADDR, secs->size,
17 ⋆
18 ⋆
19
20 }
void *secs_la = createp->secs;
struct isgx_secs *secs = NULL;
// SGX Enclave Control Structure (SECS)
long ret;
...
secs = kzalloc(sizeof(*secs), GFP_KERNEL);
ret = copy_from_user((void *)secs, secs_la, sizeof (*secs));
...
PROT_READ | PROT_WRITE | PROT_EXEC,
MAP_SHARED, 0);
...
Figure 12: Modified Intel SGX driver to manipulate the base
address of an enclave
C Case Study in Detail
We study other sensitive applications the branch shad-
owing can attack. Specifically, we focus on examples in
which the controlled-channel attack cannot extract any
information, e.g., control flows within a single page.
mbed TLS. We checked mbed TLS’s another function:
the Montgomery multiplication (mpi_montmul). As shown
for (i = 0; i p; n = N->n; m = (B->n n : n;
size_t i, n, m;
mbedtls_mpi_uint u0, u1, *d;
u0 = A->p[i];
u1 = (d[0] + u0 * B->p[0]) * mm;
const mbedtls_mpi *N, mbedtls_mpi_uint mm,
const mbedtls_mpi *T) {
1 /* bignum.c */
2 static int mpi_montmul(mbedtls_mpi *A, const mbedtls_mpi *B,
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20 ⋆ if (mbedtls_mpi_cmp_abs(A, N) >= 0) {
21 ⋆
22 ⋆
23 ⋆ }
24 ⋆ else { // dummy subtraction to prevent timing attacks
25 ⋆
26 ⋆
27 ⋆ }
28
29 }
mpi_mul_hlp(m, B->p, d, u0);
mpi_mul_hlp(n, N->p, d, u1);
mpi_sub_hlp(n, N->p, A->p);
i = 1;
mpi_sub_hlp(n, N->p, T->p);
i = 0;
*d++ = u0; d[n+1] = 0;
return 0;
}
Figure 13: Montgomery multiplication (mpi_montmul()) of
mbed TLS. The branch shadowing attack can infer whether
a dummy subtraction has performed or not.
in Figure 13, this function has a dummy subtraction
(Lines 24–27) to prevent the well-known remote timing
attack [8]. The branch shadowing attack was able to de-
tect the execution of this dummy branch. In contrast,
the controlled-channel cannot know whether a dummy
subtraction has happened because both real and dummy
branches execute the same function: mpi_sub_hlp().
Linux SGX SDK. We attacked two libc functions,
strtol() and vfprint(), Linux SGX SDK provides. Fig-
ure 14a shows strtol() converting a string into an inte-
ger. The branch shadowing can infer the sign of an input
number by checking the branches in Lines 7–12. Also,
it infers the length of an input number by checking the
loop branch in Lines 14–24. When an input number was
hexadecimal, we were able to use the branch at Line 16
to know whether each digit was larger than nine.
Figure 14b shows vfprintf() printing a formatted
string. The branch shadowing was able to infer the format
string by checking the switch-case statement in Lines
4–13 and the types of input arguments to this function
according the switch-case statement in Lines 15–23. In
contrast, the controlled-channel attack cannot infer this
information because the functions called by vfprint(),
including ADDSARG() and va_arg(), are inline functions.
No page fault sequence will be observed.
LIBSVM. LIBSVM is a popular library supporting sup-
port vector machine (SVM) classifiers. We ported a classi-
fication logic of LIBSVM to Intel SGX because it would
be a good example of machine learning as a service [39]
USENIX Association
26th USENIX Security Symposium    573
} else {
if (c == ’-’) {
neg = 1; c = *s++;
neg = 0;
if (c == ’+’) c = *s++;
/* linux-sgx/sdk/tlibc/stdlib/strtol.c */
long strtol(const char *nptr, char **endptr, int base) {
...
s = nptr;
do { c = (unsigned char) *s++; } while (isspace(c));
1
2
3
4
5
6
7 ⋆
8 ⋆
9 ⋆
10 ⋆
11 ⋆
12 ⋆ } // infer the sign of an input number
13
14 ⋆ for (acc = 0, any = 0;; c = (unsigned char) *s++) {
15 ⋆
16 ⋆
17 ⋆
18
19
20
21
22
23
24 ⋆ } // infer the length of an input number
25
26
if(isdigit(c)) c -= ’0’;
else if (isalpha(c)) c -= isupper(c) ? ’A’-10 : ’a’-10;
//
else break;
acc *= base; acc += c;
infer hexademical
if (!neg) {
}
...
...
}
(a) Simplified strtol(). The branch shadowing attack can infer
the sign and length of an input number.
const svm_node *y, const svm_parameter& param) {
return powi(param.gamma*dot(x,y)+param.coef0,
param.degree);
return dot(x,y);
double sum = 0;
while (x->index != -1 && y->index != -1) {
switch(param.kernel_type) {
if (x->index == y->index) {
double d = x->value - y->value;
sum += d*d; ++x; ++y;
1 /* svm.cpp */
2 double Kernel::k_function(const svm_node *x,
3
4
5 ⋆ case LINEAR:
6 ⋆
7 ⋆ case POLY:
8 ⋆
9
10 ⋆ case RBF:
11
12
13 ⋆
14 ⋆
15 ⋆
16 ⋆
17 ⋆
18 ⋆
19 ⋆
20
21 ⋆
22 ⋆
23 ⋆ case SIGMOID:
24 ⋆
25 ⋆ case PRECOMPUTED:
26 ⋆
27
28
29 ⋆ } // infer the kernel type
30 }
} // infer the lengths of x and y
return exp(-param.gamma*sum);
return x[(int)(y->value)].value;
}
else {
...
return 0;
default:
}
...
return tanh(param.gamma*dot(x,y)+param.coef0);
/* linux-sgx/sdk/tlibc/stdio/vfprintf.c */
int __vfprintf(FILE *fp, const char *fmt0, __va_list ap) {
...
for (;;) {
ch = *fmt++;
switch (ch) {
...
case ’d’: case ’i’: ADDSARG(); break;
case ’p’: ADDTYPE_CHECK(TP_VOID); break;
case ’X’: case ’x’: ADDUARG(); break;
...
}
1
2
3
4
5
6
7
8 ⋆
9 ⋆
10 ⋆
11
12
13
14
15
16
17 ⋆
18 ⋆
19 ⋆
20 ⋆
21
22
23 ⋆ } // infer the types of input arguments
24
25
} // infer input format string
...
for (n = 1; n <= tablemax; n++) {
switch (tyypetable[n]) {
case T_INT:
case T_DOUBLE:
...
}
...
}
(*argtable)[n].intarg = va_arg(ap, int); break;
(*argtable)[n].doublearg = va_arg(ap, double); break;
(b) Simplified vfprintf(). The branch shadowing attack can
infer the format string and variable arguments.
Figure 14: libc functions attacked by the branch shadowing
while hiding the detailed parameters. Figure 15 shows
the LIBSVM’s kernel function code running inside an
enclave. The branch shadowing attack can recognize the
kernel type such as linear, polynomial, and radial basis
function (RBF) because of the switch-case statement in
Lines 4–28. Also, when a victim used an RBF kernel, we
were able to infer the number of features (i.e., the length
of a vector) he or she used (Lines 11–20).
Apache. We ported some modules of Apache to SGX.
Figure 16 shows its lookup function to parse the method
of an HTTP request. Because of its switch-case state-
Figure 15: Kernel function of LIBSVM. The branch shadowing
attack can infer the kernel type.
case ’G’: return (method[1] == ’E’ && method[2] == ’T’
switch (method[0]) {
case ’P’: return (method[1] == ’U’ && method[2] == ’T’
apr_size_t len) {
? M_GET : UNKNOWN_METHOD);
? M_PUT : UNKNOWN_METHOD);
...
switch (len) {
default: return UNKNOWN_METHOD;
}
1 /* http_protocol.c */
2 static int lookup_builtin_method(const char *method,
3
4
5
6 ⋆ case 3:
7
8 ⋆
9 ⋆
10 ⋆
11 ⋆
12
13
14
15 ⋆ case 5:
16
17 ⋆
18 ⋆
19 ⋆
20 ⋆
21
22
23
24 ⋆ }
25 }
switch (method[2]) {
case ’T’: return (memcmp(method, "PATCH", 5) == 0
case ’R’: return (memcmp(method, "MERGE", 5) == 0
? M_PATCH : UNKNOWN_METHOD);
? M_MERGE : UNKNOWN_METHOD);
...
}
...
..
Figure 16: Apache HTTP method lookup function. The branch
shadowing infers the type of HTTP method sent by clients.
ments, we can easily identify the method of a target HTTP
request, such as GET, POST, DELETE, and PATCH. Since
this function invokes either no function or memcmp(), the
controlled-channel attack has no chance to identify the
method.
574    26th USENIX Security Symposium
USENIX Association