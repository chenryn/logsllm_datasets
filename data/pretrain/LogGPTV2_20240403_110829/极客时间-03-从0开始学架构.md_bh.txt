# 33 传统的可扩展架构模式：分层架构与SOA

相比于高性能和高可用架构模式在过去几十年中的迅猛发展，可扩展架构模式的发展相对缓慢。近年来，微服务架构因其在可扩展性方面的优势而受到广泛关注，但这也导致了在讨论可扩展性时常常过度强调微服务，甚至将其视为解决所有架构问题的“银弹”。然而，在实际应用中，这种做法往往违背了架构设计的“合适原则”和“简单原则”。为了帮助你在实践中更好地进行可扩展架构设计，本文将介绍几种常见的可扩展架构模式，并分析它们的关键点、优缺点。

## 分层架构
分层架构是一种非常普遍的架构模式，也被称为N层架构。通常情况下，N至少为2，如C/S架构或B/S架构。更为常见的是三层架构（例如MVC、MVP），四层架构较少见，五层及以上则主要用于复杂系统，比如操作系统内核。

### 架构类型
1. **C/S 和 B/S 架构**：这类架构针对整个业务系统，基于用户交互进行划分。用户界面部分作为一层，后台支持逻辑作为另一层。
2. **MVC 和 MVP 架构**：这些架构聚焦于单个子系统，根据职责进行分层。各层间依赖关系灵活，允许两两交互。
3. **逻辑分层架构**：可以应用于单个子系统或整个业务系统，同样基于职责划分。不过，逻辑分层架构中的层之间是自顶向下依赖的，例如TCP/IP协议栈或Android操作系统架构。

### 核心要点
- **清晰边界**：确保每层之间的差异足够明显，以便开发者能够轻松理解整个架构。
- **隔离关注点**：每个层专注于处理特定类型的逻辑，从而实现快速扩展而不影响其他层。

### 优缺点
- **优点**：通过明确的职责分离简化了系统维护，并且支持独立扩展。
- **缺点**：可能导致冗余代码，特别是在实现简单功能时；另外，由于每次请求都需要穿越所有层级，可能会对性能产生一定影响。

## SOA (面向服务架构)
SOA起源于上世纪90年代，旨在解决企业内部IT系统重复建设和低效协作的问题。它通过定义三个核心概念来实现这一目标：

1. **服务**：所有业务功能都被视为服务，提供开放的能力供其他系统使用。
2. **ESB (企业服务总线)**：连接不同服务并屏蔽异构系统的接口差异。
3. **松耦合**：减少服务间的相互依赖，以提高灵活性和可靠性。

### 应用场景
SOA更多地被传统行业采用，如制造业和金融业，而在互联网领域并未得到广泛推广。尽管如此，亚马逊等少数公司成功地利用了SOA来构建其内部系统和服务。

### 挑战
- ESB的引入虽然解决了异构系统集成的问题，但也带来了额外的复杂性和潜在的性能瓶颈。
- 实现真正的松耦合需要克服技术上的诸多障碍，尤其是在向后兼容性方面。

## 总结
本篇文章介绍了两种传统的可扩展架构模式——分层架构和SOA，并探讨了它们各自的特点及适用范围。希望这能为你在选择合适的架构方案时提供有价值的参考。最后，请思考这样一个问题：为什么大多数互联网公司不倾向于使用SOA架构？期待你的见解！