### 6.3.1 Improving Control Flow Integrity

While monitoring the `403.gcc` benchmark, π-CFI allows over 1,400 return targets for some return instructions (Figure 3b). Similarly, while monitoring `444.namd`, π-CFI permits more than 46 transfer targets for certain return instructions (Figure 3d). In contrast, PITTYPAT, which maintains a stack of points-to information during its analysis, restricts each return instruction to a single transfer target across all programs and workloads. This significantly enhances defense against Return-Oriented Programming (ROP) attacks, which remain one of the most prevalent types of software attacks.

### 6.3.2 Mitigating Malicious Applications

To evaluate PITTYPAT's ability to detect common control flow attacks, we monitored selected RIPE benchmarks [39]. For each of the 264 benchmarks in our experimental setup, PITTYPAT successfully detected attacks on the benchmark’s control security.

We also constructed a proof-of-concept program vulnerable to a COOP [32] attack, which corrupts virtual-function pointers to execute a sequence of method calls that would not be possible in a well-defined run of the program. The program defines two derived classes, `Student` and `Teacher`, both inheriting from the `SchoolMember` base class. Each class implements its own version of the virtual function `registration()` (lines L7–L9 and L13–L15, respectively). The `set_buf()` function (lines L17–L21) allocates a buffer `buf` on the stack with a size of 4 bytes but does not limit the amount of data read into it (line L20).

In the `main` function (lines L22–L37), instances of `Student` and `Teacher` are created and stored in `SchoolMember` pointers. The `main` function then calls the `registration()` method for each instance (lines L29–L31), reads user input by calling `set_buf()` (line L33), and calls `Student::registration()` a second time (line L35). A malicious user can exploit the buffer overflow vulnerability in `set_buf` to overwrite the vptr of `Student` with that of `Teacher`, causing `Teacher::registration()` to be called at line L35 instead of `Student::registration()`.

Previous work on COOP attacks [32] established that such an attack cannot be detected by traditional CFI. π-CFI was unable to detect this attack because it allows a dynamic method as a call target once its address is taken. However, PITTYPAT detected the attack due to its analyzer module accurately modeling the effects of each load of a function pointer used to implement dynamic calls over the program’s well-defined runs.

```cpp
class SchoolMember {
public:
    virtual void registration() = 0;
};

class Student : public SchoolMember {
public:
    void registration() override {
        cout << "Student registration" << endl;
    }
};

class Teacher : public SchoolMember {
public:
    void registration() override {
        cout << "Teacher registration" << endl;
    }
};

void set_buf(char* buf) {
    gets(buf);
}

int main() {
    SchoolMember* member_1 = new Student();
    SchoolMember* member_2 = new Student();

    member_1->registration(); // Student calling its virtual functions
    member_2->registration(); // Student calling its virtual functions
    set_buf((char*)member_2); // Buffer overflow to overwrite the vptr
    member_2->registration(); // Should call Teacher::registration()

    return 0;
}
```

### 6.3.3 Efficient Path-Sensitive CFI Enforcement

Table 2 presents performance measurements of PITTYPAT when monitoring benchmarks from SPEC CPU2006 and the NGINX server, along with results replicated from the paper introducing π-CFI [26]. A key observation is that PITTYPAT consistently incurs overhead that is larger but often comparable to that of π-CFI. Specifically, PITTYPAT introduces a geometric mean of 12.73% overhead across the 16 SPEC CPU2006 benchmarks and a 11.9% increase in response time for the NGINX server over one million requests with a concurrency level of 50. The overhead from sharing branch targets is consistently less than 5%. The remaining overhead, attributed to the analysis module, is proportional to the number of memory operations (e.g., loads, stores, and copies) performed on memory cells that transitively point to a target of an indirect call, as well as the number of child processes/threads spawned during execution of multi-process/-threading benchmarks.

Another important observation is that PITTYPAT induces much smaller overhead compared to CETS [23] and SoftBound [22], which can only be applied to a limited selection of the SPEC CPU2006 benchmarks. CETS provides temporal memory safety, and SoftBound ensures spatial memory safety; both enforce full data integrity for C benchmarks, which includes control security. However, these approaches introduce significant overhead and are not applicable to programs that perform specific combinations of memory-unsafe operations [17].

#### Table 2: Performance and Security Features

| Name          | KLoC | Exp | Tm (sec) | π-CFI Overhd (%) | PITTYPAT Overhd (%) | CETS+SB Overhd (%) |
|---------------|------|-----|----------|------------------|--------------------|--------------------|
| 400.perlbench | 128  | No  | 332      | 8.7%             | 47.3%              | -                  |
| 401.bzip2     | 6    | No  | 317      | 1.3%             | 17.7%              | 91.4%              |
| 403.gcc       | 383  | No  | 179      | 6.2%             | 34.1%              | -                  |
| 429.mcf       | 2    | No  | 211      | 4.3%             | 32.2%              | -                  |
| 433.milc      | 10   | No  | 514      | 1.9%             | 1.8%               | -                  |
| 444.namd      | 4    | No  | 556      | -0.3%            | 28.8%              | -                  |
| 445.gobmk     | 158  | No  | 328      | 11.4%            | 4.0%               | -                  |
| 450.soplex    | 28   | No  | 167      | -1.1%            | 27.5%              | -                  |
| 453.povray    | 79   | No  | 100      | 11.9%            | 16.0%              | -                  |
| 456.hmmer     | 21   | No  | 258      | 0.2%             | 20.2%              | -                  |
| 458.sjeng     | 11   | No  | 359      | 8.5%             | 6.7%               | -                  |
| 462.libquantum| 3    | No  | 234      | -1.5%            | 14.1%              | -                  |
| 464.h264ref   | 36   | No  | 339      | 8.0%             | 11.8%              | -                  |
| 470.lbm       | 1    | No  | 429      | 1.4%             | 0.7%               | -                  |
| 473.astar     | 4    | No  | 289      | 2.2%             | 22.5%              | -                  |
| 482.sphinx3   | 13   | No  | 338      | 1.7%             | 16.0%              | -                  |
| Geo. Mean     | 15   | No  | 285      | 3.30%            | 12.73%             | -                  |
| nginx-1.10.2  | 122  | No  | -        | 2.7%             | 11.9%              | 122.60%            |

- **KLoC**: Number of lines of code in the benchmark.
- **Exp**: Indicates if the benchmark contains an exploit.
- **Tm (sec)**: Time used by the program when given the payload.
- **Overhd (%)**: Time taken by the framework, expressed as the ratio over the baseline time.