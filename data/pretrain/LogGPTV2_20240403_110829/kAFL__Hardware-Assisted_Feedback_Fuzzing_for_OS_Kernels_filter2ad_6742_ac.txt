The physical addresses of this buffer and how to han-
dle full buffers is speciﬁed by an array of data structures
called Table of Physical Addresses (ToPA) entries.
The array can contain multiple entries and has to be
terminated by a single END entry 3(cid:13). There are two
different ways the CPU can handle an overﬂow: It can
stop the tracing (while continuing the execution—thus
Figure 3: KVM-PT ToPA conﬁguration.
resulting in incomplete traces) or it can raise an inter-
rupt. This interrupt causes a VM-exit since it is not mask-
able. We catch the interrupt on the host and consume the
trace data. Finally, we reset the buffers and continue with
the VM execution. Unfortunately, this interrupt might be
raised at an unspeciﬁed time after the buffer was ﬁlled2.
Our conﬁguration of the ToPA entries can be seen in Fig-
ure 3. To avoid losing trace data, we use two different
ToPA entries. The ﬁrst one is the main buffer 1(cid:13).
Its
overﬂow behavior is to trigger the interrupt. Once the
main buffer is ﬁlled, a second entry is used until the in-
terrupt is actually delivered. The ToPA speciﬁes another
smaller buffer 2(cid:13). Overﬂowing the second buffer would
lead to the stop of the tracing. To avoid the resulting
data loss, we chose the second buffer to be about four
times larger than the largest overﬂowing trace we have
ever seen in our tests (4 KB).
In case the second buffer also overﬂows, the following
trace will contain a packet indicating that some data is
missing. In that case the size of the second buffer can
simply be increased. This way, we manage to obtain pre-
cise traces for any amount of trace data.
4.2 QEMU-PT
To make use of the KVM extension KVM-PT, an user
space counterpart is required. QEMU-PT is an extension
of QEMU and provides full support for KVM-PT’s user
space interface. This interface provides mechanisms to
enable, disable, and conﬁgure Intel PT at runtime as well
as a periodic ToPA status check to avoid overruns. KVM-
PT is accessible from user mode via ioctl() commands
and an mmap() interface.
In addition to being a userland interface to KVM-PT,
QEMU-PT includes a component that decodes trace data
into a form more suitable for the fuzzing logic: We de-
code the Intel PT packets and turn them into an AFL-like
bitmap.
4.2.1 PT Decoder
Extensive kernel fuzzing may generate several hundreds
of megabytes of trace data per second. To deal with
2This is due to the current implementation of this interrupt. Intel
speciﬁes the interrupt as not precise, which means it is likely that fur-
ther data will be written to the next buffer or tracing will be terminated
and data will be discarded.
USENIX Association
26th USENIX Security Symposium    173
Figure 4: Overview of the pipeline that converts Intel PT traces to kAFL bitmaps.
such large amounts of incoming data, the decoder must
be implemented with a focus on efﬁciency. Otherwise,
the decoder may become the major bottleneck during
the fuzzing process. Nevertheless, the decoder must also
be precise, as inaccuracies during the decoding process
would result in further errors. This is due to the nature of
Intel PT decoding since the decoding process is sequen-
tial and is affected by previously decoded packets.
To ease efforts to implement an Intel PT software
decoder, Intel provides its own decoding engine called
libipt [4]. libipt is a general-purpose Intel PT decod-
ing engine. However, it does not ﬁt our purposes very
well because libipt decodes trace data in order to pro-
vide execution data and ﬂow information. Furthermore,
libipt does not cache disassembled instructions and has
performed poorly in our use cases.
Since kAFL only relies on ﬂow information and the
fuzzing process is repeatedly applied to the same code,
it is possible to optimize the decoding process. Our In-
tel PT software decoder acts like a just-in-time decoder,
which means that code sections are only considered if
they are executed according to the decoded trace data.
To optimize further look-ups, all disassembled code sec-
tions are cached. In addition, we simply ignore packets
that are not relevant for our use case.
Since our PT decoder is part of QEMU-PT, trace data
is directly processed if the ToPA base region is ﬁlled.
The decoding process is applied in-place since the buffer
is directly accessible from user space via mmap(). Un-
like other Intel PT drivers, we do not need to store large
amounts of trace data in memory or on storage devices
for post-mortem decoding. Eventually, the decoded trace
data is translated to the AFL bitmap format.
4.3 AFL Fuzzing Logic
We give a brief description of the fuzzing parts of AFL
because the logic we use to perform scheduling and mu-
tations closely follows that of AFL. The most important
aspect of AFL is the bitmap used to trace which basic
block transitions where encountered. Each basic block
has a randomly assigned ID, and each transition from ba-
sic block A to another basic block B is assigned an offset
into the bitmap according to the following formula:
(id(A)/2⊕ id(B)) % SIZE_OF_BITMAP
Instead of the compile-time random, kAFL uses the
addresses of the basic blocks. Each time the transition is
observed, the corresponding byte in the bitmap is incre-
mented. After ﬁnishing the fuzzing iteration, each entry
of the bitmap is rounded such that only the highest bit re-
mains set. Then the bitmap is compared with the global
static bitmap to see if any new bit was found. If a new bit
was found, it is added to the global bitmap and the input
that triggered the new bit is added to the queue. When
a new interesting input is found, a deterministic stage is
executed that tries to mutate each byte individually.
Once the deterministic stage is ﬁnished,
the non-
deterministic phase is started.
During this non-
deterministic phase, multiple mutations are performed at
random locations. If the deterministic phase ﬁnds new
inputs, the non-deterministic phase will be delayed un-
til all deterministic phases of all interesting inputs have
been performed. If an input triggers an entirely new tran-
sition (as opposed to a change in the number of times the
transition was taken), it will be favored and fuzzed with
a higher priority.
5 Evaluation
Based on our implementation, we now describe the
different fuzzing campaigns we performed to evaluate
kAFL. We evaluate kAFL’s fuzzing performance across
different platforms. Section 5.5 provides an overview of
all reported vulnerabilities, crashes, and bugs that were
found during the development process of kAFL. We also
evaluate kAFL’s ability to ﬁnd a previously known vul-
nerability. Finally, in Section 5.6 the overall fuzzing
performance of kAFL is compared to ProjectTriforce,
the only other OS-independent feedback fuzzer avail-
able. TriforceAFL is based on the emulation backend
of QEMU instead of hardware-assisted virtualization and
Intel PT. The performance overhead of KVM-PT is dis-
cussed in Section 5.7. Additionally, a performance com-
parison of our PT decoder and an Intel implementation
of a software decoder is given in Section 5.8.
If not stated otherwise,
the benchmarks were per-
formed on a desktop system with an Intel i7-6700 pro-
cessor and 32GB DDR4 RAM. To avoid distortions due
174    26th USENIX Security Symposium
USENIX Association
to poor I/O performance, all benchmarks are performed
on a RAM disk. Similar to AFL, we consider a crash-
ing input to be unique if it triggered at least one basic
block transition which has not been triggered by any pre-
vious crash (i.e., the bitmap contains at least one new
bit). Note this does not imply that the underlying bugs
are truly unique.
5.1 Fuzzing Windows
We implemented a small Windows 10 speciﬁc user mode
agent that mounts any data chunk (fuzzed payload) as
NTFS-partitioned volume (289 lines of C code). We
used the Virtual Hard Disk (VHD) API and various
IOCTLS to mount and unmount volumes programmat-
ically [31, 32]. Unfortunately, mounting volumes is a
slow operation under Windows and we only managed
to achieve a throughput of 20 executions per second.
Nonetheless, kAFL managed to ﬁnd a crash in the NTFS
driver. The fuzzer ran for 4 days and 14 hours and re-
ported 59 unique crashes, all of which were division by
zero crashes. After manual investigation we suspect that
there is only one unique bug. While it does not allow
code execution, it is still a denial-of-service vulnerability,
as for example, a USB stick with that malicious NTFS
volume plugged into a critical system will crash that sys-
tem with a blue screen. It seems that we only scratched
the surface and NTFS was not thoroughly fuzzed yet.
Hence, we assume that the NTFS driver under Windows
is a valuable target for coverage-based feedback fuzzing.
Furthermore, we implemented a generic system call
(syscall) fuzzing agent that simply passes a block of data
to a syscall by setting all registers and the top stack re-
gion (55 lines of C and 46 lines of assembly code). This
allows to set parameters for a syscall with a fuzzing pay-
load independent of the OS ABI. The same fuzzer can
be used to attack syscalls on different operation sys-
tems such as Linux or macOS. However, we evaluated
it against the Windows kernel given the proprietary na-
ture of this OS. We did not ﬁnd any bugs in 13 hours
of fuzzing with approx 6.3M executions since many
syscalls cause the userspace agent to terminate: Due
to the coverage-guided feedback, kAFL quickly learned
how to generate payloads to execute valid syscalls, and
this led to the unexpected execution of user mode call-
backs via the kernel within the fuzzing agent. These
crashes require rather expensive restarts of the agent and
therefore we only achieved approx. 134 executions per
second, while normally kAFL achieves a throughput of
1,000 to 4,000 tests per second (see Section 5.2). Ad-
ditionally, the Windows syscall interface has already re-
ceived much attention by the security community.
Figure 5: Fuzzing the ext4 kernel module for 32 hours.
5.2 Fuzzing Linux
We implemented a similar agent for Linux, which
mounts data as ext4 volumes (66 lines of C code). We
started the fuzz campaign with a minimal 64KB ext4 im-
age as initial input. However, we conﬁgured the fuzzer
such that it only fuzzes the ﬁrst two kilobytes during
the deterministic phase.
In contrast to Windows, the
Linux mount process is very fast, and we reached 1,000
to 2,000 tests per second on a Thinkpad laptop with a
PI:EMAIL CPU and 32GB RAM. Due to this
high performance, we obtained signiﬁcantly better cov-
erage and managed to discover 160 unique crashes and
multiple (conﬁrmed) bugs in the ext4 driver during a
twelve-day fuzzing campaign. Figure 5 shows the ﬁrst
32 hours of another fuzzing run. The fuzzing process was
still ﬁnding new paths and crashes on a fairly regular ba-
sis after 32 hours. An interesting observation is that there
was no new coverage produced between hours 16 and 25,
yet the number of inputs increased due a higher number
of loop iterations. After hour 25, a truly new input was
found that unlocked signiﬁcant parts of the codebase.
5.3 Fuzzing macOS
Similarly to Windows and Linux, we targeted multiple
ﬁle systems for macOS. So far, we found approximately
150 crashes in the HFS driver and manually conﬁrmed
that at least three of them are unique bugs that lead to
a kernel panic. Those bugs can be triggered by unprivi-
leged users and, therefore, could very well be abused for
local denial-of-service attacks. One of these bugs seems
to be a use-after-free vulnerability that leads to full con-
trol of the rip register. Additionally, kAFL found 220
unique crashes in the APFS kernel extension. All 3 HFS
vulnerabilities and multiple APFS ﬂaws have been re-
ported to Apple.
USENIX Association
26th USENIX Security Symposium    175
5.4 Rediscovery of Known Bugs
We evaluated kAFL on the keyctl interface, which al-
lows a user space program to store and manage vari-
ous kinds of key material in the kernel. More specif-
ically, it features a DER (see RFC5280) parser to load
certiﬁcates. This functionality had a known bug (CVE-
2016-07583). We tested kAFL against the same interface
on a vulnerable kernel (version 4.3.2). kAFL was able
to uncover the same problem and one additional previ-
ously unknown bug that was assigned CVE-2016-86504.
kAFL managed to trigger 17 unique KASan reports and
15 unique panics in just one hour of execution time. Dur-
ing this experiment, kAFL generated over 34 million in-
puts, found 295 interesting inputs, and performed nearly
9,000 executions per second. This experiment was per-
formed while running 8 processes in parallel.
5.5 Detected Vulnerabilities
During the evaluation, kAFL found more than a thou-
sand unique crashes. We evaluated some manually and
found multiple security vulnerabilities in all tested op-
erating systems such as Linux, Windows, and macOS.
So far, eight bugs were reported and three of them were
conﬁrmed by the maintainers:
• Linux: keyctl Null Pointer Dereference5 (CVE-
2016-86506)
• Linux: ext4 Memory Corruption7
• Linux: ext4 Error Handling8
• Windows: NTFS Div-by-Zero9
• macOS: HFS Div-by-Zero10
• macOS: HFS Assertion Fail10
• macOS: HFS Use-After-Free10
• macOS: APFS Memory Corruption10
Red Hat has assigned a CVE number for the ﬁrst re-
ported security ﬂaw, which triggers a null pointer def-
erence and a partial memory corruption in the kernel
ASN.1 parser if an RSA certiﬁcate with a zero expo-
nent is presented. For the second reported vulnerabil-
ity, which triggers a memory corruption in the ext4 ﬁle
3https://access.redhat.com/security/cve/cve-2016-0758
4https://access.redhat.com/security/cve/cve-2016-8650
5http://seclists.org/fulldisclosure/2016/Nov/76
6https://access.redhat.com/security/cve/cve-2016-8650
7http://seclists.org/fulldisclosure/2016/Nov/75
8http://seclists.org/bugtraq/2016/Nov/1
9Reported to Microsoft Security.
10Reported to Apple Product Security.
system, a mainline patch was proposed. The last re-
ported Linux vulnerability, which calls in the ext4 error
handling routine panic() and hence results in a kernel
panic, was at the time of writing not investigated any fur-
ther. The NTFS bug in Windows 10 is a non-recoverable
error condition which leads to a blue screen. This bug
was reported to Microsoft, but has not been conﬁrmed
yet. Similarly, Apple has not yet veriﬁed or conﬁrmed
our reported macOS bugs.
5.6 Fuzzing Performance
We compare the overall performance of kAFL across dif-
ferent operating systems. To ensure comparable results,
we created a simple driver that contains a JSON parser
based on jsmn11 for each aforementioned operating sys-
tem and used it to decode user input (see Listing 2). If
the user input is a JSON string starting with "KAFL", a
crash is triggered. We traced both the JSON parser as
well as the ﬁnal check. This way kAFL was able to learn
correct JSON syntax. We measured the time used to ﬁnd
the crash, the number of executions per second, and the
speed for new paths to be discovered on all three target
operating systems.
jsmn_parser parser ;
jsmntok_t tokens [5];
jsmn_init (& parser );
int res = jsmn_parse (& parser , input , size , tokens , 5) ;
if ( res >= 2) {
if ( tokens [0]. type == JSMN_STRING ){
int json_len = tokens [0]. end - tokens [0].
start ;
int s = tokens [0]. start ;
if ( json_len > 0 && input [s +0] == ’K ’){
if ( json_len > 1 && input [s +1] == ’A ’){
if ( json_len > 2 && input [s +2] == ’F ’){
if ( json_len > 3 && input [s +3] == ’L ’){
panic ( KERN_INFO " KAFL ...\ n");
}}}}}
}
Listing 2: The JSON parser kernel module used for the
coverage benchmarks.