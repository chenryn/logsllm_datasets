  * Github地址：[smart-contract-honeypots/firstTest.sol](https://github.com/thec00n/smart-contract-honeypots/blob/master/firstTest.sol)
  * 智能合约地址：[0x42dB5Bfe8828f12F164586AF8A992B3a7B038164](https://etherscan.io/address/0x42dB5Bfe8828f12F164586AF8A992B3a7B038164#code)
  * 合约关键代码如下：
       contract firstTest
      {
          address Owner = 0x46Feeb381e90f7e30635B4F33CE3F6fA8EA6ed9b;
          address emails = 0x25df6e3da49f41ef5b99e139c87abc12c3583d13;
          address adr;
          uint256 public Limit= 1000000000000000000;
          function withdrawal()
          payable public
          {
              adr=msg.sender;
              if(msg.value>Limit)
              {  
                  emails.delegatecall(bytes4(sha3("logEvent()")));
                  adr.send(this.balance);
              }
          }
      }
逻辑看起去很简单，只要在调用 `withdrawal()` 时发送超过 `1 ether`，该合约就会把余额全部转给发送者。至于通过
`delegatecall()` 调用的 `logEvent()`，谁在意呢？
在 `DASP TOP10` 的漏洞中，排名第二的就是访问控制漏洞，其中就说到 `delegatecall()` 。
`delegatecall()` 和 `call()` 功能类似，区别仅在于 `delegatecall()`
仅使用给定地址的代码，其它信息则使用当前合约(如存储，余额等等)。这也就意味着调用的 `logEvent()` 也可以修改该合约中的参数，包括 `adr`。
举个例子，在第一个合约中，我们定义了一个变量 `adr`，在第二个合约中通过 `delegatecall()` 调用第一个合约中的
`logEvent()`。第二个合约中的第一个变量就变成了 `0x1111`。这也就意味着攻击者完全有能力在 `logEvent()` 里面修改 `adr`
的值。
为了验证我们的猜测，使用 `evmdis` 逆向 `0x25df6e3da49f41ef5b99e139c87abc12c3583d13` 地址处的
`opcode`。`logEvent()` 处的关键逻辑如下：
翻译成 `Solidity` 的伪代码大致是：
      function logEvent(){
          if (storage[0] == 0x46FEEB381E90F7E30635B4F33CE3F6FA8EA6ED9B){
              storage[2] = address of current contract;
          }
      }
这也就意味着，在调用蜜罐智能合约 `firstTest` 中的 `withdrawal()`
时，`emails.delegatecall(bytes4(sha3("logEvent()")));` 将会判断第一个变量 `Owner` 是否是
`0x46FEEB381E90F7E30635B4F33CE3F6FA8EA6ED9B`，如果相等，就把 `adr`
设置为当前合约的地址。最终将会将该合约中的余额转给当前合约而非消息的发送者。`adr` 参数被偷梁换柱!
#### 4.3 仅仅是测试？(整数溢出)：For_Test
  * Github地址：[Solidlity-Vulnerable/honeypots/For_Test.sol](https://github.com/misterch0c/Solidlity-Vulnerable/blob/master/honeypots/For_Test.sol)
  * 智能合约地址：[0x2eCF8D1F46DD3C2098de9352683444A0B69Eb229](https://etherscan.io/address/0x2eCF8D1F46DD3C2098de9352683444A0B69Eb229#code)
  * 合约关键代码如下：
     pragma solidity ^0.4.19;
     contract For_Test
     {
             function Test()
             payable
             public
             {
                 if(msg.value> 0.1 ether)
                 {
                     uint256 multi =0;
                     uint256 amountToTransfer=0;
                     for(var i=0;i investment
             investors[msg.sender].investment -= amount;
             sumInvested -= amount; 
             this.loggedTransfer(amount, "", msg.sender, owner);
     }
该智能合约大致有存钱、计算利息、取钱等操作。在最开始的分析中，笔者并未在整个合约中找到任何存在漏洞、不正常的地方，使用 `Remix`
模拟也没有出现任何问题，一度怀疑该合约是否真的是蜜罐。直到打开了智能合约地址对应的页面：
在 `Solidity 0.4.12`
之前，存在一个[bug](https://etherscan.io/solcbuginfo?a=SkipEmptyStringLiteral)，如果空字符串
`""` 用作函数调用的参数，则编码器会跳过它。
举例：当我们调用了 `send(from,to,"",amount)`， 经过编译器处理后的调用则是 `send(from,to,amount)`。
编写测试代码如下：
    pragma solidity ^0.4.0;
    contract DividendDistributorv3{
        event Transfer(uint amount,bytes32 message,address target,address currentOwner);
        function loggedTransfer(uint amount, bytes32 message, address target, address currentOwner) 
        {
            Transfer(amount, message, target, currentOwner);
        }
        function divest() public {
            this.loggedTransfer(1, "a", 0x1, 0x2);
            this.loggedTransfer(1, "", 0x1, 0x2);
        }
    }
在 `Remix` 中将编译器版本修改为 `0.4.11+commit.68ef5810.Emscripten.clang`后，执行 `divest()`
函数结果如下：
在这个智能合约中也是如此。当我们需要调用 `divest()` 取出我们存进去的钱，最终将会调用 `this.loggedTransfer(amount,
"", msg.sender, owner);`。
因为编译器的 `bug`，最终调用的是 `this.loggedTransfer(amount, msg.sender,
owner);`，具体的转账函数处就是 `owner.call.value(amount)` 。成功的将原本要转给 `msg.sender()`的以太币转给
`合约的拥有者`。合约拥有者成功盗币！
### 0x05 后记
在分析过程中，我愈发认识到这些蜜罐智能合约与原始的蜜罐概念是有一定差别的。相较于蜜罐是诱导攻击者进行攻击，智能合约蜜罐的目的变成了诱导别人转账到合约地址。在欺骗手法上，也有了更多的方式,
**部分方式具有强烈的参考价值，值得学习。**
这些蜜罐智能合约的目的性更强，显著区别与普通的 `钓鱼` 行为。相较于钓鱼行为面向大众，蜜罐智能合约主要面向的是
`智能合约开发者`、`智能合约代码审计人员` 或
`拥有一定技术背景的黑客`。因为蜜罐智能合约门槛更高，需要能够看懂智能合约才可能会上当，非常有针对性，所以使用 `蜜罐` 这个词，我认为是非常贴切的。
这也对 `智能合约代码审计人员` 提出了更高的要求，不能只看懂代码，要了解代码潜在的逻辑和威胁、了解外部可能的影响面（例如编辑器 `bug`
等），才能知其然也知其所以然。
对于 `智能合约代码开发者` 来说，`先知攻` 才能在代码写出前就拥有一定的警惕心理，从源头上减少存在漏洞的代码。
目前智能合约正处于新生阶段，流行的 `solidity` 语言也还没有发布正式 `1.0`
版本，很多语⾔的特性还需要发掘和完善；同时，区块链的相关业务也暂时没有出现完善的流水线操作。正因如此，在当前这个阶段智能合约代码审计更是相当的重要，合约的部署一定要经过严格的代码审计。
最后感谢 `404实验室` 的每一位小伙伴，分析过程中的无数次沟通交流，让这篇文章羽翼渐丰。
* * *
针对目前主流的以太坊应用，知道创宇提供专业权威的智能合约审计服务，规避因合约安全问题导致的财产损失，为各类以太坊应用安全保驾护航。
知道创宇404智能合约安全审计团队：   
联系电话：(086) 136 8133 5016(沈经理，工作日:10:00-18:00)
欢迎扫码咨询：
### 0x06 参考链接
  1. [Github smart-contract-honeypots](https://github.com/thec00n/smart-contract-honeypots/)
  2. [Github Solidlity-Vulnerable](https://github.com/misterch0c/Solidlity-Vulnerable/)
  3. [The phenomenon of smart contract honeypots](https://medium.com/@gerhard.wagner/the-phenomena-of-smart-contract-honeypots-755c1f943f7b)
  4. [Solidity 中文手册](https://solidity-cn.readthedocs.io/zh/develop/index.html)
  5. [Solidity原理（一）：继承(Inheritance)](https://blog.csdn.net/Programmer_CJC/article/details/80042261)
  6. [区块链安全 - DAO攻击事件解析](https://paper.seebug.org/544/)
  7. [以太坊智能合约安全入门了解一下](https://paper.seebug.org/601/)
  8. [Exposing Ethereum Honeypots](https://www.reddit.com/r/ethereum/comments/7xvoui/exposing_ethereum_honeypots/)
  9. [Solidity Bug Info](https://etherscan.io/solcbuginfo)
  10. [Uninitialised storage references should not be allowed](https://github.com/ethereum/solidity/issues/1789)
### 0x07 附录：已知蜜罐智能合约地址以及交易情况
基于已知的欺骗手段，我们通过内部的以太坊智能合约审计系统一共寻找到 `118` 个蜜罐智能合约地址，具体结果如下：
下载地址：[下载](https://images.seebug.org/archive/transactions.csv)
* * *