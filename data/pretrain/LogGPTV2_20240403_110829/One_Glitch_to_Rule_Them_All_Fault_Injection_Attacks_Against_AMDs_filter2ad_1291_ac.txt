fakes the attestation report during deployment or migration to trick
a VM owner into accepting a malicious MA. The MA is part of a
VM’s TCB and has access to the Offline Encryption Key (OEK) of
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2879In a second experiment, we flipped a single, non-functional bit
of the ARK. While the flipped bit would still allow validating signa-
tures, the hash comparison by the ROM bootloader would fail. The
corresponding trace is shown in the lower part of Figure 2. The CS
signal will be pulled low if the SPI master, in our case the AMD-SP,
transmits data on the bus; otherwise the CS signal is high.
Our analysis revealed a small period of time after the ARK is
loaded without SPI traffic. As we could not observe further SPI
traffic when providing a manipulated ARK, we inferred that the
AMD-SP validates the ARK’s integrity during this window. Further-
more, we could observe that the amount CS line changes prior to
this gap only depends on the ARK size.
tunity to inject our fault due to the following reasons:
We identified this time period as a promising window of oppor-
• Injecting a fault during the validation of the ARK potentially
enables us to coerce the AMD-SP into accepting our own
public key. By re-signing the flash image, we can manipulate
all existing firmware components signed with that key.
• The ARK validation happens at an early stage in the AMD-SP’s
boot process. The fault injection might render the target sys-
tem non-responsive which forces us to reset the target. By
focusing on a very early security check we increase the num-
ber of glitches we can inject.
• According to our observation, the amount of SPI traffic prior
to the ARK validation only depends on the size of the ARK.
This enables us to leverage the SPI traffic as a trigger for our
fault injection.
To inject a fault during the ARK validation, we chose a similar
approach as presented by Chen et al. in their attack called Volt-
Pillager [17]. We explain the similarities and differences to their
approach in the following section.
4.2 Glitching the AMD-SP
To inject a fault, we leverage a CPU-external VR to manipulate the
input voltage of AMD SoCs. The VR is an external controller that
communicates via a dedicated bus, the SVI2 bus, with the AMD
SoC to allow the SoC to dynamically change the input voltage, e.g.,
when CPU-frequency changes require a different input voltage.
Our analysis of the AMD SVI2 bus revealed that the external VR
not only controls the input voltage of the main x86 cores, but
also the input voltage of the AMD-SP. Although the SVI2 protocol
allows a single VR to handle both input voltages, we observed that
AMD Epyc systems leverage two independent VRs to handle the
input voltages. As described in Section 3.4, the AMD SoC uses
two different voltage domains, Core and SoC. We verified that we
can manipulate the AMD-SP’s input voltage via the SoC voltage
domain. Using a similar hardware setup as presented by Chen at
al. [17], we injected our own packets into the SVI2 bus leveraging
a Teensy µController.
However, in contrast to the approach taken by Chen et al.,
where the authors target the protected entity, i.e., code execut-
ing in the SGX enclave, we target the AMD-SP. To overcome the
protections imposed by SEV, targeting the AMD-SP instead of the
SEV-protected VM has several benefits for the attacker:
• System stability - If our fault attack renders the target un-
usable, we can simply reset the target and try again as the
Figure 2: SPI bus traces during the initial boot. CS and MISO
lines only. The upper part depicts SPI bus activity for the
original flash image (“CS original” and “MISO original”). The
lower part shows the corresponding SPI signals for a flash
image with a manipulated ARK.
VMs, see Section 3.1.4. Using the OEK, a malicious MA can decrypt
a VM’s memory.
For pre-SEV-SNP systems, the SEV firmware is responsible for
handling migration. As the pre-SEV-SNP firmware will only accept
endorsement keys of the same microarchitecture, the attacker has
to extract an endorsement key of a CPU from the same microarchi-
tecture as the targeted host’s CPU. In other words, to attack a VM
running on a Zen 2 CPU, the extracted endorsement keys must also
belong to a Zen 2 CPU. Furthermore, pre-SEV-SNP systems might
require the endorsement keys to be signed by the host owner’s
certificate authority, e.g., the CA of the CSP. In this case, the at-
tacker must be able to acquire a valid signature from the CA for
the extracted endorsement keys. This procedure is also required
when integrating a new SEV-capable system in an existing cloud
infrastructure and can be seen as part of a CSP administrator’s
responsibilities. For Zen 1 systems, the migration attack was previ-
ously presented in [15].
Both presented example scenarios require the attacker to gain
code execution on the AMD-SP. Therefore, in the following sections,
we present our analysis of the AMD-SP’s susceptibility towards
voltage fault injection as means to execute attacker-controlled code.
4.1 Targeting the AMD-SP
For the attack scenarios presented in the previous section, the
attacker needs to execute custom code on the AMD-SP, either to
provide a custom SEV firmware, or to extract the endorsement keys.
As described in Section 3, the AMD-SP loads an RSA public key,
the ARK, from the SPI attached flash to validate the authenticity of
subsequent loaded firmware components. If an attacker would be
able to replace the original ARK, all firmware components would
be validated using the attacker-controlled key, thereby enabling the
attacker to execute code directly after the ROM bootloader stage.
To better understand the ARK verification, we analyzed the traf-
fic on the Serial Peripheral Interface (SPI) bus during the boot
process of an AMD Epyc CPU. We conducted two experiments: first
we recorded the SPI traffic during a normal boot, i.e., a boot with
the original flash content. The upper part of Figure 2 shows the
activity on the chip select (CS) and MISO lines of the SPI bus for
this first experiment.
Continued SPI activityCSCSoriginal330ms+834.15µsMISOMISOoriginalmodifiedmodifiedNo SPI activityTime since resetSession 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2880Using the described setup, we were able to successfully execute
custom payloads on the CPUs shown in Table 2. We used the Su-
permicro H11DSU-iN motherboard2 for all targeted CPUs. In the
following sections, we describe the required steps to mount our
glitching attack.
Previously Exploited
CPU µArchitecture
72F3
Zen 3 (Milan)
7272
Zen 2 (Rome)
7281 Zen 1 (Naples)
Table 2: AMD-SPs successfully attacked.
Yes [15]
No
No
5.1 Payload Preparation
As a pre-requisite for our attack, we prepare the SPI flash image of
the target so that our payload replaces the PSP OS component in the
target’s flash image, see Section 3.2. Then we replace the ARK with
our own public key and re-sign the payload with this key. In case of
a successful glitch, the AMD-SP accepts our public key and executes
our payload instead of the original PSP OS component. As a proof-
of-concept payload, we use a simple “Hello World” application,
which outputs the string “Hello World” on the SPI bus. After the
attack, we can verify that we gained code execution by reading
“Hello World” from the SPI bus using a logic analyzer.
5.2 Attack Cycle
To coerce the AMD-SP into accepting our public key, we need to
inject a fault during the hash verification of the ARK. The attack
can be split into several steps, executed in a loop until a successful
glitch was detected. For each targeted CPU, we first determine static
glitch parameters: delay and duration. In Section 5.5, we explain
our approach for identifying these parameters in detail.
Figure 4 depicts the output of the relevant signals of a successful
glitch cycle. In each cycle, the following steps are executed:
A1 The Teensy detects the SVI2 bus becoming active, starting
the attack logic (5.3.2)
A2 - A4 To avoid later SVI2 packet collisions, we inject two com-
mands to disable the telemetry reports and set default
voltages (5.3.3).
B1 - B2 Using the number of CS pulses and the delay parameter
we determined for the targeted CPU, we precisely trigger
the voltage drop (5.4.1).
B3 - B5 By injecting two SVI2 commands (B3 and B4), we cause
the voltage drop. The lowest voltage (B5) is determined
by the duration parameter (5.4).
B6 - B7 We observe further SPI traffic to distinguish between suc-
cessful and failed attack attempts (5.4.2).
After each failed attempt, we start the next one by resetting the
AMD SoC using the ATX reset line (see Figure 3). Our attack cycle
takes 3.14 (± 2 ms) seconds, which amounts to just above 1100
attempts per hour. This attack rate is limited by the ATX reset line
timeout, which allows us to reset the AMD SoC only after around
3 seconds have passed since the last reset.
2Although the H11DSU-iN does not officially support the 72F3 CPU, we still could
successfully boot the AMD-SP.
Figure 3: Schematic of the attack setup.
the decryption of VM memory is 100% effective.
AMD-SP rom-bootloader will immediately execute once the
SoC powers on. We don’t need to fully instantiate the SEV-
protected VM.
• Attack effectiveness - Once our fault injection is successful,
• Independence from target VM - Our approach works for
all SEV-protected VMs, regardless of the type of operating
system or application used inside the VM.
• Key extraction - Targeting the AMD-SP allows us to extract
SEV-related secrets which can be used to target remote sys-
tems. For these systems, we don’t require physical access.
• Automation of the attack - Once the target CPU is charac-
terized, i.e., the glitching parameters are determined, subse-
quent attacks require no manual intervention.
• Blinded glitching - Our glitching attack solely relies on ob-
serving an external trigger, the chip select (CS) signal of the
SPI bus. We don’t require code execution on the target to
determine our glitching parameters.
In the following section we present our experimental setup that
allows us to inject faults into the AMD-SP’s ROM bootloader.
5 GLITCH ATTACK
To overcome the boot protection mechanisms of the AMD-SP, we
target the ROM bootloader’s signature verification of the ARK with
our glitching attack. Figure 3 depicts our glitching setup and the
components involved. Inspired by the Voltpillager attack [17], we
use a Teensy 4.0 µController [42] for all communication with the
low-level hardware and to run the time-critical attack logic. The
Teensy is responsible for monitoring the chip select (CS) line of
the target motherboard’s SPI bus to identify the precise time to
perform the glitch and whether a glitch was successful or not, see
Section 4.1. In order to drop the voltage of the AMD-SP, the Teensy
is connected to the SVI2 bus of the target. By injecting packets into
this bus, the Teensy programs the VR to apply the corresponding
voltage levels. For resetting the target SoC after a failed attack, the
Teensy is connected to the ATX Reset line.
The Teensy is controlled from an attack machine via a serial-
over-USB interface. This attack machine is responsible for selecting
attack parameters and orchestrating the glitching attacks. We want
to emphasize that the Teensy µController is capable of performing
the attack on its own with only minor firmware modifications.
 USBAttackmachineCSRESETTeensy µController SVC, SVDV_SOCSVI2Voltageregulator ATX caseheader UEFI SPI flash  AMD SOC Motherboardx86 cores Busdrivers AMD-SP Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2881Figure 4: Logic traces of a complete Attack Cycle including CS traces of a successful and a failed attempt. The “A”-labels mark
the SVI2 bus activation, periodic telemetry reports, and disabling the telemetry reports, as described in Section 5.3. Labels
starting with “B” mark trigger events, the voltage drop injections, and the feedback mechanism described in Section 5.4. The
CS edges marked with “C” are used to determine the initial window for the delay parameter.
5.3 SVI2 Bus Injection
On all AMD CPUs that we tested, the AMD-SP is powered by the
SoC voltage rail, which is controlled by a dedicated VR and a dedi-
cated SVI2 bus on CPUs with an SP3 socket [56]. To inject packets
onto this SVI2 bus, we soldered two wires to its SVC and SVD lines.
While the bus is idle, both lines are permanently pulled to a logical
high level by the CPU, which we use to inject packets by pulling
the lines low. We used an 8-channel open-drain driver (the LVC07A
[49]) for this task. Per bus line, we connected two channels of the
driver in parallel to reliably achieve a logical low level accepted by
the IR35204 VR [27] present on our motherboard.
The driver’s inputs are connected to one of the Teensy’s I2C hard-
ware interfaces and are pulled high with a 150 Ω resistor. Together
with the Teensy’s own open-drain drivers, this enables us to inject
SVI2 commands at a baudrate of 4.6 Mbit/s. This is within the 0.1
to 21 Mbit/s range commonly supported by the VRs [26, 27, 46, 47],
but faster than the 3.3 Mbit/s that we measured for our CPUs.
SVI2 Protocol. The SVI2 bus packet format is best described
5.3.1
in [46] and [47]. An SVI2 command contains many configuration
values, of which the following are of interest to us: The voltage do-
main selection bits, the voltage identification (VID) byte, the power
state bits, and the telemetry function (TFN) bit. All other values
have a “no change” setting, which we choose for every injected
packet. Each SVI2-compliant VR can regulate two voltage rails. On
motherboards with a single VR (e.g., with AM4 socket [55]), both
the Core and SoC voltage rails (aka VDD and VDDNB, respectively)
are regulated by that VR. The voltage domain selector bits are used
to select which voltage rail is affected by an SVI2 packet. For Epyc
CPUs, there is one voltage regulator for each voltage rail. Our ex-
periments have shown that the Core (VDD) settings are used for
both rails.
The VID byte sets the main parameter of the VR: the voltage
of the selected voltage rail. As there is no “no change” VID, we
must set a reasonable value every time we inject a command. The
default values we use for the Core and SoC voltage rails are the
first values we observed on the bus. The VRs use different power
states for increased efficiency in low-power phases [26, 27, 46, 47].
We always choose the highest power state for our injections, as
we noticed more significant voltage switching ripples in the lower
power states, which cause our voltage faults to be less predictable.
5.3.2 Boot Detection. When the CPU starts its boot sequence (after
a power on or a reset), there is a period when the VR is already
providing power to the CPU, but is not controlled via the SVI2
bus [26, 27, 46, 47]. This period ends when the CPU signals the
VR to use the SVI2 bus. For all CPUs that we tested, the SVD line
are constantly pulled low when the SVI2 bus is inactive. However,
when the SVI2 communication is activated, SVD transitions to a
high state (A1 in Figure 4). When the SVI2 bus becomes deactivated
again (e.g., when the SoC is reset), the SVD line constantly remains
at a low level, which we use to arm our SVI2 startup detection
again.
5.3.3 Avoiding Packet Collisions. Once the SVI2 bus is active, the
CPU immediately sends two SVI2 commands, configuring defaults
for the two voltage rails (A2 in Figure 4). No more commands are
sent on the SVI2 bus until the ARK has been verified. Therefore,
we are not affected by interfering SVI2 commands from the CPU
during the packet injection.
In contrast, the periodic telemetry reports sent from the VR to
the CPU use the SVC line as a shared clock (A3 in Figure 4). This