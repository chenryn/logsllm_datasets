1 from m, and this step is deterministic, for each m there is exactly one
value E1 = E(cid:48)
1 such that decryption will succeed. For a pair of ciphertexts (E1, E2) and
(E∗
a2) =
DecodeFromG(E∗
1 )a2,
and since E1 = E∗
Note that this proof continues to hold if DecodeFromG returns a set of group elements,
only one of which is correct, provided that the image of DecodeFromG consists of disjoint
sets. In this case there will still be a single valid E1 for each m, a single M(cid:48)
2 which decodes
to a set containing m, and thus a single valid E2.
Now for correctness under adversarially chosen keys. We argue that no eﬃcient A can
output (k0, m) such that k = Derive(k0) and Deck(Enck(m)) = m(cid:48) (cid:54)= m. By deﬁnition Enck
succeeds for any k and m in range, therefore Enc always outputs some (E1, E2), where
E2 = Ea2
1 , so N (m) must be the same. When N (m)
is the same, Dec can only fail if E1 = H(m)a1 = 1, which occurs with negligible probability
since H and Derive are random functions.
1 N (m). Dec computes N (m) = E2/Ea2
The next lemma establishes that E1 = H(m)a1, is a MAC on m, since our plaintext
integrity proof will depend on this fact.
Lemma 11. The function F : Zq ×{0, 1}∗ → G, deﬁned Fa1(m) := H(m)a1 is an suf-cma-
secure MAC (with key a1) if H is a random oracle, and the DDH problem is hard in G.
The public parameters for the MAC include pk = Ga1
a1Ga2
a2.
Proof. We show that Fa1(m) := H(m)a1 is a PRF, assuming H is a random oracle and
that DDH is hard in G. Then since Fa1(m) is a deterministic PRF, it is an suf-cmva-
secure MAC (where veriﬁcation just recomputes the MAC from the key and message and
compares it to the received MAC). Let A be a PRF adversary for Fa1(m), we deﬁne an
algorithm B that is a DDH distinguisher using A as a subroutine. Let Game 0 be the real
PRF security game, where B acts as challenger to A. Let Game 1 be identical to Game
0, but pk is replaced with a random value. This transition is the same as Game 0 to 1 in
the CPA security proof (§7); by the same argument, Games 0 and 1 are indistinguishable
if DDH is hard in G.
In Game 2, B acts as an adversary for the wPRF instance fa1, and no longer chooses
a1. When A makes a hash query H(m), B queries the wPRF oracle, to get the pair U, U(cid:48),
and sets H(m) = U , and stores σm := U(cid:48) as the MAC on m. When A makes a PRF query
on a message m, B queries H(m) if m has not already been queried, then returns σm to
A. When A outputs 0 or 1 (indicating real or random), B outputs the same for the wPRF
instance.
32
When the wPRF instance is real, B’s output is σm = U(cid:48) = U a1 = H(m)a1 (since H(m)
was deﬁned as U ), identical to Game 0. But when the wPRF instance is random, B outputs
a random value. Therefore, A’s success probability in Game 2 is bounded by ddh.
As with the deﬁnition of CPA security, we specialize the deﬁnitions of ciphertext in-
tegrity and plaintext integrity to our setting, since these will be used in our analysis of
CCA security (Theorem 13).
Deﬁnition 12. (PI and CI security) For a deterministic symmetric key cipher with public
veriﬁability (KeyGen, Enc, Dec), deﬁne the following game.
• The challenger generates (k, pk) ← KeyGen(1κ), and sends pk to the adversary A.
• A makes several encryption queries, submitting distinct messages mi. The challenger
computes ci = Enc(k, mi) and returns ci to A.
• Eventually A outputs a candidate ciphertext c∗.
We say that A wins the ciphertext integrity game if c∗ (cid:54)= ci for any i, and Dec(k, ci) (cid:54)= ⊥.
We say that A wins the plaintext integrity game if Dec(k, c∗) = m∗ and m∗ (cid:54)= mi for any i.
The encryption scheme is CI secure (or PI secure) if A wins the ciphertext integrity (or
plaintext integrity) game with negligible probability.
Theorem 13. The encryption scheme of Section 4.1 is CCA secure in the random oracle
model, assuming the DDH problem is hard in G.
Proof. First note that the unique ciphertexts property combined with PI implies CI. Then,
if an encryption scheme is both CI and CPA secure, then it is also CCA secure [BS20,
§9.2.3]. We’ve proven CPA security in Theorem 7 and unique ciphertexts in Theorem 10,
what remains is to prove that the scheme has PI.
Our proof will use the fact that E1 is a MAC on the plaintext, namely that H(m)a1
is a MAC on m with key a1 (as shown in Lemma 11). Since E1 is recomputed during
decryption, a successful PI attacker must compute a valid MAC on the plaintext.
Now consider the PI security game, where B is the challenger and A is an adversary.
B will choose a and act as an attacker in the uf-cma security game for the MAC H(m)a1.
To compute the public key, B gets the MAC σt from its MAC oracle, where t is the string
used to derive Ga1. Then B computes pk = Ga2
B initializes A with pk and must answer A’s hash and encrypt queries. B forwards A’s
hash queries to it’s own hash oracle, and relays the output to A. When A makes an encrypt
query for plaintext m, B queries the MAC oracle to get σm := H(m)a1, then computes
E1 = σm and E2 = (E1)a2m, and outputs (E1, E2) to A. When A outputs a ciphertext
1 , E∗
(E∗
We now argue that if A wins the PI game, B is a successful forger. If A wins the PI
2 ), then B partially decrypts m∗ = E∗
1 as a MAC on m∗.
a2σt.
2 /(E∗
1 )a2 and outputs E∗
game, then the winning conditions of the game ensure that
33
1. B never queried m∗ to its MAC oracle (since A did not query m∗ in an encryption
query), and
2. (E∗
1 , E∗
2 ) decrypts correctly.
Since decryption re-computes E∗
H(m∗)a1, and so B’s output is a valid MAC on m∗.
1 from m∗ and the secret key, it must be that E∗
1 =
7.3 Security of our New MAC
In this section we analyze the security of our new MAC.
Theorem 14. The MAC deﬁned in Section 3.1 is suf-cmva secure in the random oracle
model, assuming the DDH problem is hard in G, and that the MACGGM construction is
uf-cma secure.
Proof. Using Lemma 3, we can ignore veriﬁcation queries and prove that the MAC is
suf-cma secure.
We consider three possible types of forgeries, and show that each can occur with at
most negligible probability. Recall that the forged MAC on message M∗ consists of three
values (t∗, U∗, V ∗), and let Mi and (ti, Ui, Vi) be the message used and MACs resulting
from the adversary’s MAC oracle queries. In Type 1 forgeries, t∗ (cid:54)= ti for any i. In Type 2
forgeries, there exists a previous query i such that t∗ = ti, but M∗ (cid:54)= Mi. (Note that since
t is chosen freshly at random for each MAC produced by the oracle, there will be at most
one such i.) Finally, in Type 3 forgeries, there exists a previous query i such that t∗ = ti
and M∗ = Mi, but U∗ (cid:54)= Ui. Note that since V ∗ is fully deﬁned by M∗, U∗, t∗, this covers
all possible forgeries in the suf-cma game. Let A be an attacker who plays the suf-cma
security game.
(t∗ was not output by the MAC oracle) Suppose that there is an attacker A
Type 1
that can produce a Type 1 forgery in the suf-cma game with non-negligible probability.
In this case, A’s forgery uses a new tag value t∗, i.e., one that has not been output by in
response to a MAC query from A.
We construct an algorithm B that uses A as a subroutine. B will be a uf-cma forger for
MACGGM. B plays the uf-cma security game for MACGGM with a challenger, who provides a
MAC oracle. First B generates part of the MAC key and the issuer parameters. B chooses
(w, y1, . . . , yn) at random and computes CW . Then B chooses a random z and queries
MACGGM(z) to get a MAC (U, U(cid:48)). Since U(cid:48) = U x0+x1z = U x0U x1z, when the random
oracle used to generate parameters is programmed to output Gx0 = U and Gx1 = U z, B
ynU(cid:48)). Now B
ynGx0
can create I = GV /(Gy1
initializes A with the issuer parameters.
x1) as I = GV /(Gy1
y1 . . . Gyn
y1 . . . Gyn
x0Gx1
34
For MAC queries, B computes ˜M = (cid:81)n
yj . B chooses a random t, queries
MACGGM(t) to get (U, U(cid:48)) and computes the MAC as (t, U, V = W U(cid:48) ˜M ). Since U(cid:48) =
U x0+x1t, this MAC is computed correctly.
When A outputs a forgery, B can compute (U∗, V ∗/ ˜M W ), and output this as a MACGGM
forgery on the message t∗. If t∗ was never output in a MAC created by B it was never
queried to the MACGGM oracle, and is therefore a valid MACGGM forgery, if σ∗ is a valid
MAC and a Type 1 forgery.
j=1 Mj
Type 2 or Type 3 (t∗ was output by the MAC oracle) Suppose that there is an attacker
A that can produce a Type 2 or Type 3 forgery in the suf-cma game with non-negligible
probability. We argue that this will allow us to construct a reduction B to break DDH. We
proceed via a series of games:
Game 0 This is the real suf-cma game, with the modiﬁcation that the adversary wins if
the forgery is valid and is of Type 2 or Type 3. By assumption A produces a Type 2 or
Type 3 forgery with non-negligible probability .
Game 1 This game proceeds as the suf-cma game with the following exception: the game
ﬁrst chooses a random i∗ ∈ 1 . . . Q, where Q is the maximum number of queries that A
can make, and the adversary wins only if t∗ = ti∗. The adversary will win this game with
probability at least /Q.
Game 2 This game proceeds as in Game 1 with the following exceptions: First, the
issuer parameters are chosen at random. Then, on the i∗th query that A makes to its
MAC oracle, the game will respond by running the MAC algorithm. For all other MAC
oracle queries, the game will return three random values (t, U, V ) in the appropriate groups.
The adversary wins if the MAC veriﬁes and t∗ = ti∗ but either (cid:126)M or U is new. Suppose
that the adversary’s success probability in Game 2 is non-negligibly lower than in Game 1.
In this case we build an algorithm B that breaks DDH.
Let (R, X1, Z) be a DDH instance in G, that B will use A to answer. We use the notation
(Gr, Gx1, Grx1) for a real DDH triple, and replace Grx1 with Gz when Z is random. The
base G ∈ G is assumed to be diﬀerent from the parameters used by the MAC scheme.
B no longer chooses x0, x1 in the secret key. Instead B chooses random d, ti∗ ∈ Zq. The
value of x1 is ﬁxed by X1 in the DDH instance, and the value x0 used by B when creating
MACs will be implicitly deﬁned as x0 = d − x1t∗.
To create I in the issuer parameters without (x0, x1), B ﬁrst programs the random oracle
so that Gx1 is derived as RaGb for a random a, b. Then B computes the term Gx1
x1 as
x0, B programs the random oracle to derive Gx0 = Ra(cid:48)
Gb(cid:48)
ZaX b
. Finally B chooses
for a random a(cid:48), b(cid:48). Then B computes Gx0
1. Similarly, for the term Gx0
x0 = ((Ra(cid:48)
1 )−t∗
X b(cid:48)
Gb(cid:48)
)d(Za(cid:48)
35
CW at random; since this is a perfectly hiding commitment the distribution is identical to
that in the real parameters.
For MAC query i∗, B chooses random ai∗, bi∗ and outputs the MAC
(t∗, Rai∗ Gbi∗ , W (Rai∗ Gbi∗ )d ˜M )
and for the other query i (cid:54)= i∗ B chooses random ai, bi, t and outputs
(t, RaiGbi, W (RaiGbi)d(ZaiX bi
1 )t−t∗ ˜M )
(1)
(2)
Note that (1) is a special case of (2), since when t = t∗ part of (2) cancels out.
By the deﬁnition of d, the MAC in (1) is valid and distributed identically to the output of
the MAC algorithm. When Z = Grx1, it can be checked that (2) is also valid and distributed
identically to the output of the MAC algorithm, as are the issuer parameters. When Z
is random, ZaX b
1 is random and independent of RaGb, so (2) consists of 3 independent
random values. Similarly in this case I is random as well.
When A outputs a forgery (M∗, t∗, U∗, V ∗), by assumption it will use a tag output by
B, and if the tag is not t∗ output in query i∗, B aborts. If the tag is t∗, B computes ˜M from
M∗, uses (cid:126)yi and checks whether V ∗/(U∗)d = ˜M W . If the comparison fails, the forgery is
invalid, and B outputs “random” to the DDH instance, if it succeeds, B outputs “DDH
tuple”. So if A’s forgery probability changes between games 0 and 1, B’s DDH advantage
changes by the same amount. Thus games 1 and 2 are indistinguishable assuming DDH is
hard in G.
j=0 M(cid:48)
j
yj . If (cid:126)M(cid:48) = G (cid:126)m(cid:48)
(cid:126)M(cid:48) must have ˜M(cid:48) = (cid:81)n
Success probability in Game 2 Now we argue that A’s forgery probability in Game
2 is negligible. First consider a Type 2 forgery. Note that a forgery on a new message
, the logarithm of ˜M(cid:48)W to the base G is
1 + . . . + ynm(cid:48)
y1m(cid:48)
n + w (mod q). Note that this is a pairwise independent function [BS20]
n. Since A has only received one value using (cid:126)y and w (in the response to the
1, . . . , m(cid:48)
of m(cid:48)
i∗th MAC query), the adversary can produce this value with probability at most 1/q.
Next, we consider a Type 3 forgery. Let d = x0 + x1t∗. Then the one MAC that B has
output using the secret key has V = ˜M Gw+ud and the forgery has V ∗ = ˜M Gw+u∗d, where
u, u∗ are the discrete logs of U and U∗ from the i∗th query and the forgery respectively.
Again, note that this is a pairwise independent function of u, and since A only has one
MAC using w, d, the adversary has only negligible probability of producing the right value
for u∗.
7.4 Credential Security
Referring to the deﬁnition in [CMZ14], a keyed-veriﬁcation anonymous credential scheme
has the following protocols: CredKeygen, BlindIssue, BlindObtain, Show, ShowVerify. The
36
key generation, (non-blind) issuance, and show protocols are described in Section 3, and
the blind issuance protocol is described in Section 5.10
The following security properties are formally deﬁned in [CMZ14]. In this section we
review them brieﬂy and argue that a similar analysis applies here.
Correctness The ﬁrst part of correctness (that credentials always verify) follows from
correctness of the MAC. Correctness of the second part (that Show always succeeds for
valid credentials), follows from the correctness of the zero-knowledge proof system, and the
equation Z = I z. Using a 4-attribute example where (M1, M2, M3) are hidden and M4 is
revealed, when Z is computed honestly, we have
Z =
Cy1
y1Cy2
CV
y3(M4Cy4)y4W Cx0
x0Cx1
x1
y2Cy3
z)y1 ··· (M4Gy4
V GV