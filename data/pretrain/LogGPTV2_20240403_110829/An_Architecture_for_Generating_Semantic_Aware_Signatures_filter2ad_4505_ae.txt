and Honeycomb on identical traces as a means to further
understand the beneﬁts of semantics awareness in auto-
mated signature generators. This evaluation was compli-
cated by two issues: ﬁrst, we transformed Honeycomb’s
Honeyd plug-in implementation into a standalone appli-
cation by feeding it the input trafﬁc from a pcap loop.
Second, since Honeycomb was developed as a proof-of-
concept tool, it turned out to be incapable of processing
large traces6. In our experience, Honeycomb’s process-
ing time grows quadratically with each connection since
it performs pairwise comparison across all connections,
and running it on a relatively small trace of 3000 packets
took several hours on a high performance workstation.
As a result, our evaluation is a qualitative comparison of
Honeycomb signatures and its performance on a small
trace with 126 HTTP connections.
Honeycomb produced 202 signatures from the input
trace. While there were several perfectly functional sig-
natures, there were also a surprisingly large number of
benign strings that were identiﬁed by the LCS algorithm.
Some of these were small strings such as “GET” or
USENIX Association
14th USENIX Security Symposium
109
s
d
n
o
c
e
S
30
27
24
21
18
15
12
9
6
3
0
HTTP
Session
generalization
Connection
generalization
Clustering
Preprocessing
Data Abstraction
0
50
100
150
200
Number of Packets (Thousands)
s
d
n
o
c
e
S
70
60
50
40
30
20
10
0
NetBIOS
Connection
generalization
Clustering
Preprocessing
Data Abstraction
0.0
0.5
1.0
1.5
2.0
Number of Packets (Millions)
Figure 8: Time to construct signatures for HTTP and NetBIOS data, based upon the number of packets in the data set.
Note that X and Y scales differ in the two graphs. Preprocessing is a data ﬁle translation step converting SSTs into the
input format of our clustering module. HTTP session-level signature generalization required 587 seconds at 200,000
packets.
Honeycomb Signature
1. /MSADC/root.exe?/c+dir HTTP/1.0 |0D 0A|
Host: www|0D 0A|Connection: close|0D 0A 0D|
2. /root.exe?/c+dir HTTP/1.0|0D 0A|Host: www|0D 0A|
Connection: close|0D 0A 0D|
1. SEARCH / HTTP/1.1|0D 0A|Host: 128.1
1.
2. HTTP /1
|0D 0A|Connection: Keep-Alive|0D 0A 0D|
Exploit
Nimda
Deﬁciency
Redundant7
WebDAV Restrictive8
None
Benign
Table 7: Example signatures produced by Honeycomb on an HTTP trace with 126 connections.
“HTTP” that are clearly impractical and just happened
to be the longest common substring between unrelated
sessions. Communication with the Honeycomb author
revealed these were part of normal operation and the
typical way to suppress these are to whitelist signatures
smaller than a certain length. There were also much
longer strings in the signature set, such as proxy-headers
that also do not represent real attack signatures. It seems
that the only way to avoid these kinds of problems is
through manual grooming of signatures by an expert with
protocol knowledge. It should be noted that while Ne-
mean also requires a sanity check process, this affects
Honeycomb to a much greater extent because of it ten-
dency to generate a large number of signatures.
The summary of the comparison of signatures pro-
duced by Honeycomb versus those produced by Nemean
is as follows:
1. Honeycomb produces a large number of signatures
that lack speciﬁcity due to pairwise connection
comparison. Nemean’s algorithm generalizes from
a cluster that includes several connections resulting
in a smaller, balanced signature set.
3. Honeycomb signatures are often too restrictive. As
a result, we require several restrictive signatures to
capture all instances of a particular attack and this
could lead to false negatives. Nemean’s generation
of balanced signatures make them less susceptible
to false negatives.
4. Honeycomb’s lack of semantics awareness leads to
signatures consisting of benign substrings. These
lead to false positives and explains why Honeycomb
is unable to produce precise signatures for protocols
such as NetBIOS, MS-SQL and HTTP attacks, such
as Nimda, where the exploit content is a small por-
tion of the entire attack string. Nemean’s semantics
awareness addresses the issue of benign substrings.
We present examples of signatures that we obtained
from Honeycomb that demonstrate these weaknesses in
Table 7.
8 Discussion
2. Pairwise LCS employed by Honeycomb often
leads to redundant (non-identical) signatures, which
would generate multiple alarms for the same attack.
Again, Nemean’s algorithm generalizes from clus-
ters and its semantics awareness makes it far less
prone to redundant signature production.
A potential vulnerability of Nemean is its use of hon-
eynets as a data source.
If attackers become aware of
this, they could either attempt to evade the monitor or to
pollute it with irrelevant trafﬁc resulting in many unnec-
essary signatures. Evasion can be complicated by peri-
odic rotation of the monitored address space. Intentional
110
14th USENIX Security Symposium
USENIX Association
pollution is a problem for any automated signature gener-
ation method and we intend to address it in future work.
Three issues may arise when deploying Nemean on a
live network. First, live networks have real trafﬁc, so we
cannot assume that all observed sessions are malicious.
To produce signatures from live trafﬁc traces containing
mixed malicious and normal trafﬁc, we must ﬁrst sep-
arate the normal trafﬁc from the malicious. Flow-level
anomaly detection or packet prevalence techniques [27]
could help to identify anomalous ﬂows in the complete
trafﬁc traces. Simple techniques that ﬂag sources that
horizontally sweep the address space, vertically scan sev-
eral ports on a machine, and count the number of rejected
connection attempts could also be used.
Second, Nemean must generate meaningful signatures
for Snort, Bro, or other NIDS. Snort utilizes an HTTP
preprocessor to detect HTTP attacks and does not pro-
vide support for regular expressions. Converting Ne-
mean signatures to Bro signatures is straightforward
since Bro allows for creation of policy scripts that sup-
port regular expressions.
Third, while it is not the focus of the current imple-
mentation, the limited manual selection required sug-
gests that automating deployment of Nemean signatures
should be realizable. This resiliency of Nemean sig-
natures to false positives makes it quite attractive as
a means to automate defense against ﬂash worms that
propagate rapidly. The data abstraction component’s
modules work without any changes on live traces. The
star clustering algorithm is also designed to perform
incremental clustering and work in an online fashion.
Anomaly detection techniques could be employed in par-
allel with Nemean to ﬂag compelling clusters for worm
outbreaks. Automatically generated Nemean signatures
for these clusters could then be rapidly propagated to
NIDS to defend against emergent worms.
9 Conclusions
We have described the design and implementation of
Nemean, a system for automated generation of bal-
anced NIDS signatures. One of the primary objectives
of this system is to reduce false alarm rates by creat-
ing signatures that are semantics aware. Nemean’s ar-
chitecture is comprised of two major components: the
data-abstraction component and the signature-generation
component. This modular design supports and encour-
ages independent enhancement of each piece of the ar-
chitecture. Nemean uses packet traces collected at hon-
eynets as input since they provide an unfettered view of
a wide range of attack trafﬁc.
We evaluated a prototype implementation of Nemean
using data collected at two unused /19 subnets. We col-
lected packet traces for two services for which we devel-
oped service normalizers (HTTP and NetBIOS/SMB).
Running Nemean over this data resulted in clusters for
a wide variety of worms and other exploits. Our evalu-
ation suggests that simple similarity metrics, such as the
cosine metric, can provide clusters with a high degree of
precision. We demonstrated the signature generation ca-
pability of our system and discussed optimizations used
by our automata learning module, such as structure ab-
straction and subsequence creation. We showed that Ne-
mean generated accurate signatures with extremely low
false alarm rates for a wide range of attack types, includ-
ing buffer overﬂows (Welchia), attacks with large diver-
sity (Nimda), and attacks for complicated protocols like
NetBIOS/SMB.
In future work, we intend to hone the on-line capabili-
ties of Nemean and to assess its performance over longer
periods of time in live deployments. We will also con-
tinue to evaluate methods for clustering and learning with
the objective of ﬁne tuning the resulting signature sets.
10 Acknowledgements
This work is supported in part by Army Research Of-
ﬁce grant DAAD19-02-1-0304, Ofﬁce of Naval Research
grant N00014-01-1-0708, and National Science Founda-
tion grant CNS-0347252. The ﬁrst author was supported
in part by a Lawrence H. Landweber NCR Graduate
Fellowship in Distributed Systems. The second author
was supported in part by a Cisco Systems Distinguished
Graduate Fellowship.
The U.S. Government is authorized to reproduce and
distribute reprints for Governmental purposes, notwith-
standing any copyright notices afﬁxed thereon. The
views and conclusions contained herein are those of the
authors and should not be interpreted as necessarily rep-
resenting the ofﬁcial policies or endorsements, either ex-
pressed or implied, of the above government agencies or
the U.S. Government.
We thank CSL for providing us access to the traces,
Dave Plonka, Geoff Horne, Bill Jensen and Michael Hare
for support of iSink project. Finally, we would like to
thank Vern Paxson, our shepherd Fabian Monrose and
the anonymous reviewers whose insightful comments
have greatly improved the presentation of the paper.
References
[1] R. Agrawal, T. Imielinski, and A. Swami. Mining association
rules between sets of items in large databases. In ACM SIGMOD
International Conference on Management of Data, 1993.
[2] J. Aslam, K. Pelekhov, and D. Rus. A practical clustering algo-
rithm for static and dynamic information organization. In ACM-
SIAM Symposium on Discrete Algorithms (SODA), Baltimore,
Maryland, January 1999.
USENIX Association
14th USENIX Security Symposium
111
[3] B. Caswell and M. Roesch. The SNORT network intrusion de-
tection system. http://www.snort.org, April 2004.
[4] M. Christodorescu, S. Seshia, S. Jha, D. Song, and R. E. Bryant.
Semantics-aware malware detection. In IEEE Symposium on Se-
curity and Privacy, Oakland, California, May 2005.
[24] A. V. Raman and J. D. Patrick. The sk-strings method for infer-
ring PFSA. In 14th International Conference on Machine Learn-
ing (ICML97), Nashville, Tennessee, July 1997.
[25] W32 Sasser.Worm.
http://securityresponse.symantec.com/
avcenter/venc/data/w32.sasser.worm.html.
[5] T.
Conneff.
removal
http://securityresponse.symantec.com/avcenter/venc/data/-
w32.hllw.lovgate.removal.tool.html, April 2004.
W32.HLLW.lovgate
tool.
[26] U. Shankar and V. Paxson. Active mapping: Resisting NIDS
evasion without altering trafﬁc. In IEEE Symposium on Security
and Privacy, Oakland, California, May 2003.
[6] M. Handley, V. Paxson, and C. Kreibich. Network intrusion de-
tection: Evasion, trafﬁc normalization and end-to-end protocol
In 10th USENIX Security Symposium, Washington,
semantics.
DC, August 2001.
[7] The Honeynet project. http://project.honeynet.org, April 2004.
[8] K. Julisch. Clustering intrusion detection alarms to support root
cause analysis. ACM Transactions on Information and System
Security (TISSEC), 6(4):443–471, November 2003.
[9] J. Jung, V. Paxson, A. W. Berger, and H. Balakrishnan. Fast
portscan detection using sequential hypothesis testing. In IEEE
Symposium on Security and Privacy, Oakland, California, May
2004.
[10] H.-A. Kim and B. Karp. Autograph: Toward automated, dis-
In 13th USENIX Security
tributed worm signature detection.
Symposium, San Diego, California, August 2004.
[11] C. Kreibich and J. Crowcroft. Honeycomb–creating intrusion de-
tection signatures using honeypots. In 2nd Workshop on Hot Top-
ics in Networks (Hotnets-II), Cambridge, Massachusetts, Novem-
ber 2003.
[12] K. Lai.
Deloder worm/trojan analysis.
.klcconsulting.net/deloder worm.htm, April 2004.
http://www-
[13] J. Levine, R. LaBella, H. Owen, D. Contis, and B. Culver. The use
of honeynets to detect exploited systems across large enterprise
networks.
In 2003 IEEE Workshop on Information Assurance,
West Point, New York, June 2003.
[14] S. P. Lloyd. Least squares quantization in PCM. IEEE Transac-
tions on Information Theory, IT-2:129–137, 1982.
[15] Microsoft
security
bulletin
MS03-007.
http://www.microsoft.com/technet/security/bulletin/MS03-007.asp,
April 2004.
[16] R. Pang, V. Yegneswaran, P. Barford, V. Paxson, and L. Peter-
In ACM
son. Characteristics of internet background radiation.
SIGCOMM/Usenix Internet Measurement Conference, 2004.
[17] J. Patrick, A. Raman, and P. Andreae. A Beam Search Algorithm
for PFSA Inference, pages 121–129. Springer-Verlag London
Ltd, 1st edition, 1998.
[18] V. Paxson. BRO: A system for detecting network intruders in real
time. In 7th USENIX Security Symposium, San Antonio, Texas,
January 1998.
[19] F. Pouget and M. Dacier. Honeypot-based forensics. In AusCERT
Asia Paciﬁc Information technology Security Conference 2004
(AusCERT2004), Brisbane, Australia, May 2004.
[20] N. Provos. A virtual honeypot framework. In USENIX Security
Symposium, San Diego, CA, August 2004.
[21] T. Ptacek and T. Newsham. Insertion, evasion and denial of ser-
vice: Eluding network intrusion detection. Technical report, Se-
cure Networks, January 1998.
[22] R. F. Puppy.
A look at Whisker’s anti-IDS tactics.
http://www.wiretrip.net/rfp/txt/whiskerids.html, April 2004.
[23] A. Raman and J. Patrick. Beam search and simulated beam an-
nealing. Technical Report 2/97, Department of Information Sys-
tems, Massey University, Palmerston North, New Zealand, 1997.
[27] S. Singh, C. Estan, G. Varghese, and S. Savage. Automated worm
ﬁngerprinting. In 6th Symposium on Operating Systems Design
and Implementation (OSDI), December 2004.
[28] R. Sommer and V. Paxson. Enhancing byte-level network intru-
sion detection signatures with context. In 10th ACM Conference
on Computer and Communication Security (CCS), Washington,
DC, October 2003.
[29] S. Staniford, J. A. Hoagland, and J. M. McAlerney. Practical
automated detection of stealthy portscans. Journal of Computer
Security, 10(1/2):105–136, 2002.
[30] S. Staniford, V. Paxson, and N. Weaver. How to 0wn the internet
in your spare time. In 11th USENIX Security Symposium, Aug.
2002.
[31] G. Vigna and R. Kemmerer. NetSTAT: A network-based intru-
sion detection system. Journal of Computer Security, 7(1):37–71,
1999.
[32] G. Vigna, W. Robertson, and D. Balzarotti. Testing network-
based intrusion detection signatures using mutant exploits.
In
ACM Conference on Computer and Communication Security
(ACM CCS), Washington, DC, October 2004.
[33] V. Yegneswaran, P. Barford, and D. Plonka. On the design and
use of internet sinks for network abuse monitoring.
In Recent
Advances in Intrusion Detection, Sophia Antipolis, France, Sept.
2004.
[34] V. Yegneswaran, P. Barford, and J. Ullrich. Internet intrusions:
In ACM SIGMETRICS,
Global characteristics and prevalence.
San Diego, California, June 2003.
[35] V. Yegneswaran,
J. T. Gifﬁn, P. Barford,
Jha.
An architecture for generating semantic-aware signatures.
Technical Report 1507, University of Wiscsonsin, 2004.
http://www.cs.wisc.edu/∼ vinod/nemean-tr.pdf.
and S.
Notes
1The ﬁrst labor of the Greek hero Heracles was to rid the Nemean
plain of a ﬁerce creature known as the Nemean Lion. After slaying the
beast, Heracles wore its pelt as impenetrable armor in his future labors.
2A honeynet is a network of high-interaction honeypots.
3A negligible amount of non-malicious trafﬁc on our honeynet was
caused by misconﬁgurations and was easily separated from the mali-
cious trafﬁc.
4Honeyd is a popular open-source low-interaction honeypot tool
that simulates virtual machines over unused IP address space.
5The check for destinations avoids hotspot misconﬁguration.
6An observation which was conﬁrmed through personal communi-
cation with C. Kreibich, one of the authors of Honeycomb.
7Signature 2 is a more general version of signature 1 which is re-
dundant.
8The Host ﬁeld should be ignored. The signature would miss at-
tacks from sources with preﬁxes other than 128.1.
112
14th USENIX Security Symposium
USENIX Association