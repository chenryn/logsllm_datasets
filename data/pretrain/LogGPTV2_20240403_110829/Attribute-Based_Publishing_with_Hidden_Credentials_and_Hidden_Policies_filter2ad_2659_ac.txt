crypt the sender’s encrypted messages, even if the sender is
able to observe the system. More formally, what can be ob-
served by a sender (or a coalition of senders) constitutes to
the protocol view of the sender (or the coalition), which in-
cludes secrets, inputs and randomness of the sender (or the
coalition) during the executions of the encryption algorithm
and the deposit protocol, protocol transcripts of all deposit
and retrieval protocol runs. A PEAPOD system has cre-
dential privacy if given any protocol view of the system, an
adversary cannot decide non-negligibly better than random
guessing if a recipient has a certain attribute for any recipi-
ent and attribute in the system.
Achieving credential privacy is generally a big challenge
for interactive schemes such as policy-based access control.
Trust negotiation allows users to specify “release policies”
that explicitly allow certain credentials to be “leaked” [15].
Nevertheless, credential privacy comes as a natural guaran-
tee in PEAPOD due to the existence of a server as an in-
termediary. In particular, the ofﬂine nature of message de-
livery from the sender to the recipient through an interme-
diate server ensures that the sender never directly interacts
with recipients. In fact, the sender of an encrypted mes-
sage might never know who has attempted to decrypt the
message.
3. Our Construction
we will use the terms “conjunctive clauses” and “clauses”
interchangeably.
3.1. PEAPOD for single-attribute policies
Earlier in this paper we reviewed how SELS achieves
its goal of securely sending email messages to a list of sub-
scribers. If we think of a mailing list as the list of users who
possess a certain attribute, then SELS can immediately be
used to securely disseminate data to users who possess that
attribute. Therefore, if all polices contain only a single at-
tribute, then all we need to do to construct PEAPOD is to
instantiate a SELS list for each of the attributes in the sys-
tem.
The list managers who manage list membership in these
SELS lists now collectively act like the Certiﬁcation Au-
thority (CA) in PEAPOD, which is the entity responsible
for authenticating users according to their attributes before
giving out credentials to them. The list servers become
the PEAPOD Server which handles deposits of encrypted
messages. However, instead of actively broadcasting the
encrypted messages to the intended recipients as in SELS,
the PEAPOD Server waits for individual retrieval requests
from users in the system.
Now the SELS instantiation in Figure 1 can be thought
of as being associated with an attribute a and re-interpreted
as follows. Key y is the encryption public key for en-
crypting data under attribute a for deposit. Secret s is the
server’s transformation secret with respect to attribute a for
transforming ciphertexts before storage. Secrets sA, sB are
the re-encryption secrets the server keeps for re-encrypting
stored ciphertexts to Alice and Bob, the two users who pos-
sess attribute a, respectively. Secrets xA and xB are re-
spectively the decryption secrets of Alice and Bob that en-
able them to decrypt retrieved ciphertexts and recover the
plaintext message encrypted under the attribute a.
We call
the above construction Simple-PEAPOD,
which supports only single-attribute policies by adapting
SELS in a rather straightforward fashion. We do not an-
alyze the security of Simple-PEAPOD as it is only an in-
termediate step towards our full construction. However, it is
easy to see that Simple-PEAPOD is conﬁdential as the se-
curity of SELS implies an adversary who does not possess
an attribute cannot decrypt a ciphertext encrypted under that
attribute’s public key.
For
simplicity, we describe the construction of
PEAPOD in stages. First we show that it is straightfor-
ward to construct PEAPOD using an adapted version of
SELS as a building block if only single-attribute policies
are allowed. Then, we demonstrate a construction that sup-
ports policies based on a conjunction of attributes and their
negations (a conjunctive clause). Finally, we describe how
complex policies in the form of a disjunction of conjunctive
clauses can also be supported. In the remainder of the paper
3.2. PEAPOD for single-clause policies
We now demonstrate how to construct a PEAPOD sys-
tem that supports policies that are conjunctions of attributes
and their negations (a single “conjunctive clause”). We
present the construction by walking through an example.
This example is generic enough to illustrate the actual con-
struction, which we refer to as Clausal-PEAPOD.
The example We continue with the matchmaking sce-
nario we have been using. Recall that there are ﬁve at-
tributes: {males, college graduates, in their
30’s, smokers, pet lovers} in the system. Let us
assume the criteria user Alice has for her perfect partner is
a “male in his 30’s who does not smoke.” Her policy is thus
hX,∗, X,×,∗i.
(1)
Bob is a 32 year-old non-smoking gentleman who loves
pets and has no college degree. Bob thus satisﬁes Alice’s
criteria and hence her policy. In the following steps, Alice
encrypts and deposits at the server her protected proﬁle (in
form of a message string) under her policy, which is then
retrieved and decrypted by Bob.
hk1, 1, k3, r4, 1i.
Encryption To leave a message M for her potential per-
fect partners, Alice encrypts M with a secure symmetric
encryption under key k ∈ Zp generated uniformly at ran-
dom. Let the resulting ciphertext be ψ. Alice then randomly
picks a “sub-key” for each X-attribute in Eqn. (1) such
that the sub-keys multiply to k (mod p), i.e. k1, k3 ∈ Zp
such that k1k3 ≡ k(mod p). She also picks r4 ∈ Zp for
the ×-attribute uniformly at random. For the remaining ∗-
attributes, she picks the identity element 1. These result in
the tuple:
(2)
The basic idea behind these values is that Bob will even-
tually receive the subset of values that correspond to his
attributes. As long as Bob does not possess any of the ×-
attributes, these values can be multiplied together to retrieve
the key – the 1’s corresponding to the ∗-attributes do not af-
fect the overall product thereby preserving the key, and the
random numbers for the ×-attribute will “destroy” the key
if used. What remains to be shown is how Bob is forced to
multiply all these values to maintain the requisite security
and privacy properties of the message and the policy.
To each entry in Eqn. (2), Alice applies the Elgamal en-
cryption algorithm E under the public key yi for the corre-
sponding attribute, resulting in tuple below,7 which is then
sent along with the ciphertext ψ to the server for deposit.
h{k1}E
y1, {1}E
y2, {k3}E
y3,{r4}E
y4, {1}E
y5i.
(3)
Deposit Upon receiving the tuple in Eqn. (3) and ψ
from Alice,
the server applies the transformation func-
tion T on the entries in Eqn. (3) using the transforma-
tion secrets for the corresponding attributes, thereby ob-
taining h{{k1}E
y4}T
s4,
{{1}E
s5i, which, as explained earlier, is equivalent to the
Elgamal encryptions of entries in Eqn. (2) under ˜yi’s, i.e.
s2, {{k3}E
s3, {{r4}E
s1, {{1}E
y3}T
y2}T
y1}T
y5}T
h{k1}E
˜y1, {1}E
˜y2, {k3}E
7We adopt the notation of {x}A
˜y4, {1}E
˜y3, {r4}E
k to mean the output of a (possibly
˜y5i.
randomized) algorithm A under key k when given the input x.
(4)
The server stores in its database the tuple in Eqn. (4) along
with ψ.
Retrieval Now Bob comes to the server and asks for the
ciphertext Alice just deposited. The server reads the tuple in
Eqn. (4) from its database and then operates on it as follows.
It ﬁrst strips off the entries that correspond to the attributes
Bob does not have (the second and fourth in this case),8
resulting in the tuple
h{k1}E
˜y1,{k3}E
˜y3,{1}E
˜y5i.
(5)
˜y1,{b3}E
For each of the entries in Eqn. (5), the server randomly
picks a blinding factor from Zp, such that the product
b1, b3, b5 ∈ Zp
of these factors equals 1 (mod p), i.e.
such that b1b3b5 ≡ 1(mod p).
The server then ap-
plies Elgamal encryption E on these blinding factors un-
der the corresponding public keys ˜yi’s, resulting in the tu-
˜y5i, which is then “homomorphi-
ple h{b1}E
cally” multiplied into Eqn. (5) in a pairwise fashion, giving
rise to:
h{k1}E
which is equivalent to:
h{k1b1}E
˜y1 ⊗{b1}E
˜y5 ⊗{b5}E
˜y3 ⊗{b3}E
˜y1, {k3}E
˜y3,{b5}E
˜y3, {1}E
˜y5i, (6)
˜y1, {k3b3}E
˜y3,{b5}E
˜y5i.
(7)
These blinding factors ensure that the receiver is forced to
multiply all values, and does not have access to any of the
individual values. Finally, the server uses its re-encryption
secret-keys for Bob (s1,B, s3,B and s5,B) and re-encrypts
the ciphertexts into the tuple below, which is sent9 to Bob
along with the ciphertext ψ:
h{{k1b1}E
˜y1}R
s1,B
, {{k3b3}E
˜y3}R
s3,B
, {{b5}E
˜y5}R
s5,B
i.
(8)
Decryption Now Bob uses his decryption secret-keys
(x1,B, x3,B and x5,B) to decrypt the entries in Eqn. (8) in
order to get the tuple:
hk1b1, k3b3, b5i
(9)
Bob multiplies all the entries in Eqn. (9) together, which
gives him back k, the symmetric key for decrypting the ci-
phertext ψ, thus enabling him to recover the original mes-
sage M. Note that if Bob was actually a smoker and thus
possessed a forbidden attribute, Eqn (9) would look like
hk1b0
5i. The existence of r4 would make it
impossible for Bob to recover k.
1, k3b0
3, r4b0
4, b0
8The server knows the set of attributes every user in the system has as
it is involved in the procedure during which a user obtains a credential for
an attribute from the CA. For details, consult [23].
9The size of the overall ciphertext leaks information on the number of
attributes Bob possesses. To cope with this, we assume that the Server
packs the overall ciphertext into a ﬁxed size with bogus sub-ciphertexts of
which the bogusness is only identiﬁable by Bob.
We assume the existence of a mechanism for the users
in the system to tell if they satisfy the policies associated
with the ciphertexts and thus have correctly decrypted those
ciphertexts.10
We state without proof that Clausal-PEAPOD is con-
ﬁdential in the C-IND-CPA-RUCA model, enjoys policy
privacy in the C-P-IND-CPA model, and also guarantees
credential privacy. The proofs can easily be inferred as spe-
cial cases from the theorems for our full construction of
PEAPOD, which supports complex policies.
3.3. Complete version of PEAPOD
PEAPOD for a single conjunctive clause can be gen-
eralized to support complex policies that contain more than
one clause (interpreted as a disjunction of multiple conjunc-
tive clauses). To recover an encrypted message, it sufﬁces
to reconstruct the associated symmetric key k. The sender
can encrypt the message for each of the clauses in a com-
plex policy, such that the same k is used for each clause.
Note that for each clause, new sub-keys are generated for
k. In this way, anyone who satisﬁes at least one clause will
be able to recover k, and thus the encrypted message.
However, care must be taken in order not to leak (too
much) information about the policy. First, if a ciphertext
contains only those legitimate clauses in the policy, anyone
would be able to tell how many clauses are there in the pol-
icy that was used in the encryption. To keep the actual size
of the policy secret, one could pad the policy with “bogus”
clauses so that ciphertexts will always be of the same size,
irrespective of the actual size of the policy. This can eas-
ily be done by assuming a random symmetric key k0 6= k
in the bogus clauses. We assume that the system picks a
parameter n, which is the maximum number of clauses for
each policy, and requires that all ciphertexts deposited have
policies padded to n clauses.
The sender should also compute a random permutation
of the original clauses and the bogus ones (call this a “shuf-
ﬂe”). This makes the recipients learn only the number of
clauses they satisfy. All the remaining clauses may or may
not be legitimate clauses. For example, if the clauses were
not shufﬂed and Bob satisﬁed only the third clause, then
Bob would know for sure that the ﬁrst and second clauses
are not bogus clauses and hence the policy contains at least
three clauses. If the clauses are shufﬂed, however, Bob can-
not infer whether the ﬁrst and second clauses are bogus and
only knows that there is at least one clause in the policy.
We call such a construction Full-PEAPOD.
Security theorems We now list the security theorems for
Full-PEAPOD. Their proofs can be found in the Appendix.
10For example, we can require the senders to ﬁrst encode the plaintext
messages, such as padding them with a string of zeros at the front.
Theorem 1 (Conﬁdentiality) If
the DDH assumption
holds for Z∗
p, then Full-PEAPOD has Ciphertext Indistin-
guishability against Chosen Plaintext Attack and Restricted
User Coalition Attack (C-IND-CPA-RUCA).
Theorem 2 (Policy privacy) If the DDH assumption holds
for Z∗
p, then Full-PEAPOD has Clausal Policy Indistin-