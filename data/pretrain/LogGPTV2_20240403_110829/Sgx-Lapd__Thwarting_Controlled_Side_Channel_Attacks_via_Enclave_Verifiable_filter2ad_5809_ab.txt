...
...
0x88: RIP
...
0xA0: EXITINFO.VECTOR
0xA1: EXITINFO.EXIT_TYPE
...
Fig. 2. The layout of involved enclave data
structures.
Speciﬁcally, when an exception occurs, SGX hardware will automatically
store the fault instruction address in the GPRSGX.RIP ﬁeld and the exception
vector in the GPRS.EXITINFO.VECTOR ﬁeld (Step ❶), and meanwhile inform the
CPU of the instruction to be executed next, which is deﬁned as the Asynchro-
nous Exit Pointer (AEP, which is normally just an ERESUME instruction). This is
because an exception needs to be handled by system software, and the enclave
internal address should not be exposed to the system software; the CPU will
just execute AEP after handling the exception, so the address is not exposed.
Also note that there are only two instructions that can enter an enclave: EENTER
and ERESUME. EENTER always starts the execution at the enclave entry address
whereas ERESUME will use the internally maintained GPRSGX.RIP as the starting
address.
For a page fault exception, SGX hardware will also store the fault address in
MADDR as well as the corresponding error code (ERRCD) in the EXINFO structure,
whose layout is presented in Fig. 2. Note that EXINFO and EXITINFO are two
diﬀerent data structures, and EXINFO is only used for PF and GP exceptions,
though both of them are stored in the State Save Area (SSA) page.
364
Y. Fu et al.
2
l
l
a
c
m
e
e
t
s
y
s
n
r
u
t
e
r
g
i
s
s
6
App Code
sig_handler:
...
EENTER
...
AEP:
ERESUME
ERESUME
n
r
u
t
e
r
g
g
i
s
s
n
r
u
t
e
r
7
Enclave Code
enclave_entry:
...
...
trts_handle_exception
GPRSGX.RIP = &internal_handle_excep(cid:415)on
EEXIT
SGXLAPD_probe:
0x7ffff5004d81: mov %gs:0x10,%rbx
0x7ffff5004d8a:  mov (%rbx),%rdx
internal_handle_exception:
call user_defined_handler
...
3
3
5
8
3
4
1
1
a
8
d
4
0
0
5
ﬀ
ﬀ
7
x
0
=
P
I
R
X
G
S
R
P
G
.
.
P
G
#
=
R
O
T
C
E
V
O
O
F
N
I
T
I
X
E
.
X
G
S
R
P
G
n
o
(cid:415)
p
e
c
x
E
P
G
0x7ffff501a540:   mov (%rdx), %rax
1
User
Kernel
PF Excep(cid:415)on
GPRSGX.RIP = 0x7ﬀﬀ501a540
GPRSGX.EXITINFO.VECTOR=#PF
2
System Exception Handler
Fig. 3. Detailed CPU control ﬂow transfers in SGX enclave exception handling.
After the system software maps the missing page (Step ❷) for the page
fault exception, the CPU will continue the execution in user space to execute
the ERESUME instruction, which restores registers and returns control to where
the exception occurred. Again, the ERESUME instruction is stored at address
called AEP, which is deﬁned by the EENTER instruction. After executing ERESUME
(Step ❸), the CPU will continue the execution at the fault address that is cap-
tured by GPRSGX.RIP. For other exceptions such as GP, the CPU has to execute
8 steps to eventually resolve that exception.
Non-Page Fault Exceptions. Some exceptions cannot be completely resolved
by the system software. In this case, the event will be triggered again if the
enclave is re-entered using ERESUME to the same fault instruction (e.g., a divide
by 0 instruction). Therefore, SGX supports resuming execution at a diﬀerent
location (to skip the fault instruction for instance). However, the fault instruction
address is internally stored in GPRSGX.RIP ﬁeld by the hardware inside enclave,
and we must rely on the enclave code to update GPRSGX.RIP to a diﬀerent
instruction location, and then ERESUME to this new location. To tell the enclave
and update GPRSGX.RIP, we have to use the EENTER instruction and then EEXIT.
Take a GP exception as an example, as illustrated in Fig. 3: when enclave
code accesses data in TCS (thread control structure, which is not supposed to be
accessed by the enclave code), it triggers a GP exception (Step ➀). The hardware
SGX-LAPD: Thwarting Controlled Side Channel Attacks
365
stores the fault instruction address at GPRSGX.RIP and the exception number,
namely #GP, in EXITINFO.VECTOR. Meanwhile, the hardware also passes the AEP
address to the system software, which is the next instruction to be executed after
handling the exception. The system exception handler processes this exception
as SIGSEGV, which cannot be completely resolved without collaboration with
the enclave code. Therefore, the control ﬂow goes to the user space sig handler
(Step ➁), which works together with the trts handle exception function inside
the enclave to resolve the exception. More speciﬁcally, after learning more details
about this exception, sig handler executes EENTER at Step ➂ and then the
execution goes to the enclave entry point.
Note that enclave entry is deﬁned in the enclave binary and initialized by
EINIT, and EENTER will start to execute enclave code at enclave entry, which
normally contains a dispatch table. In our exception handling case, it will call
trusted exception handling function trts handle exception (Step ➃) to reset
GPRSGX. RIP to the address of the internal handle exception function, and
then it executes EEXIT at Step ➄ to continue the execution of signal handler,
which further executes system call sigreturn (Step ➅) to trap to the kernel.
Then at Step ➆, the sigreturn system call will return to AEP, which will exe-
cute ERESUME instruction (Step ➇). Having set up the GPRSGX.RIP value with
internal handle exception, enclave code will execute this function, call the
corresponding user deﬁned handler if there is one, and continue the execution.
To Capture Page Fault Exceptions SGX hardware will not automatically
report a page fault exception to EXINFO and EXITINFO unless the EXINFO-bit
(namely SECS. MISCSELECT[0]) is set, and this bit can be controlled in SGX-v2,
not in the current market available SGX v1. We have veriﬁed this observation in
a real SGX-v2 machine with the help from the Intel SGX team. Note that SECS is
the enclave control structure, which contains meta-data used by the hardware to
protect the enclave and is created by the ECREATE instruction. Enclave developers
can set the SECS.MISCSELECT ﬁeld before invoking ECREATE to create the enclave.
Once the EXINFO-bit is set, both GP and PF will be reported in the EXINFO
structure. Therefore, an enclave can inject a GP exception to probe whether
EXINFO-bit has been set, as we have demonstrated in the SGXLAPD probe code
in Fig. 3.
3 System Overview
3.1 Scope and Assumptions
The focus of this paper is on defending the controlled channel attacks, which can
be more speciﬁcally termed as page fault attacks. There are two types of page
fault attacks: code page fault and data page fault. As a ﬁrst step, we focus on
the code page fault attacks and leave the protection of data page fault attacks
to future work. Also, we focus on the Linux platform.
We assume the SGX hardware and the enclave program itself are trusted.
While we wish for the OS to provide large pages, the OS may not cooperate and
may cheat the enclave programs. Therefore, we will verify whether an OS indeed
366
Y. Fu et al.
provides large pages from the application itself. Regarding the SGX hardware,
the market available one is Skylake, and we focus on the x86-64 architecture.
Typically, under this architecture, the CPU supports 4K and 2M page sizes [2].
We use 2M large pages. Also, we assume an attacker has a binary code copy of
our enclave code, the same threat model as in [31].
3.2 Challenges and Approaches
Key Idea. The goal of Sgx-Lapd is to minimize page fault occurrence by
using large pages (i.e., 2 MB). However, an OS may not provide large pages to
the enclave program, and therefore the key idea of Sgx-Lapd is to verify from
the enclave itself whether an OS provides it 2 MB or 4 KB size pages. To perform
the veriﬁcation, fortunately we have another observation: if the OS is hostile and
only provides 4 KB size pages, but if there is no controlled page fault attack, the
execution will still be normal; but if there is such an attack, then a cross 4 KB
page control ﬂow transfer will trigger a page fault. If we have set the enclave to
report page fault exceptions to EXINFO, we can detect this attack by checking
the MADDR ﬁeld in this data structure. Also, another reason to use 2 MB pages
is to minimize the page fault occurrences for enclave code, since most programs
have less than 2 MB code. If we do not use large pages, we cannot diﬀerentiate
whether the page fault is malicious or benign when a real page fault occurs.
Challenges. However, there are still two major challenges we have to solve:
– How to insert the veriﬁcation code. We certainly cannot manually insert
the veriﬁcation code into the enclave binary, as that would be error-prone
and not scalable. Instead, we must resort to either binary code rewriting or
compilers to automatically insert our code. Meanwhile, not all control ﬂow
transfers need the veriﬁcation; we only need to check those that cross 4 KB
page boundaries and we must identify them to insert our code.
– How to perform the veriﬁcation. At each cross 4 KB page control ﬂow
transfer, we need to know how to traverse the EXITINFO and EXINFO struc-
tures inside the enclave in order to retrieve data such as the fault address.
Meanwhile, we also have to decide whether the fault is legal or not since there
could exist enclaves that have more than 2 MB code.
Approaches. To address the ﬁrst challenge, we decide to modify a mainstream
compiler, LLVM, to automatically insert the large page veriﬁcation code, which
will be executed at run-time inside an enclave to make sure the OS really cooper-
ates. The reason why we selected a compiler approach is because SGX essentially
comes with a set of new instructions, and it requires an ecosystem change for
applications to really take advantage of its security features (unless one is directly
running a legacy application inside the enclave using a library OS).
We use the insight we learned in Sect. 2.3 to address the second challenge.
Speciﬁcally, we notice that inside the enclave, %gs:0x20 always points to the
GPRSGX region (as illustrated in Fig. 2), from which we can easily reach EXINFO,
which is at (%gs:0x20)-16, and EXITINFO, which is at (%gs:0x20)+ 0xA0. To
SGX-LAPD: Thwarting Controlled Side Channel Attacks
367
allow legal control ﬂow transfers across 2M page boundaries, our instrumented
code will also collect the source address of the control ﬂow transfer in addition
to the target fault address. If this transfer crosses to another 2 MB page, it will
be considered legal. Next, we present our detailed veriﬁcation algorithm using
our running example.
the
3.3 The Veriﬁcation Algorithm
The page fault exception attack
can be triggered in two ways.
The ﬁrst and most straight-