TABLE V
328
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:46 UTC from IEEE Xplore.  Restrictions apply. 
Operation Time Breakdown
Throughput vs CPU Cores
)
s
m
(
e
m
T
i
20
18
16
14
12
10
8
6
4
2
0
19.92
Data handling
Hash Server
Sign
Verify
8.11
0.95
Re−Up
Register
Authentication Operation
Login
/
c
e
s
s
t
s
e
u
q
e
R
9000
8000
7000
6000
5000
4000
3000
2000
1000
0
Login
Mixed (20% to 80%)
Re−Up
1
2
4
8
CPU Cores
Fig. 2. The average cost of different requests on an unsaturated server. The
bulk of the time is spent in signature veriﬁcation.
Fig. 3. The maximum throughput for a different mix of operations. There is
a 3.5× difference between just login and the 20% to 80% mix and a 8.9×
different between login and re-up.
shows a break down of each authentication operation and how
time is spent on the server. For registration, the signature
operation is our modiﬁed CL signature on the blinded client
secret, whereas the signature for login and re-up are standard
ECDSA signatures. The majority of the work for the ECDSA
signature can be precomputed, and hence takes almost no
time to compute. There is also a small amount of time spent
contacting the hash server during login and re-up that does
not happen for registration. Re-up is 8.5× faster than login.
C. Authentication Server Scaling
We run the authentication service in different conﬁgurations
to see how well the system scales with the addition of more
cores or more machines in the system. For these experiments,
we artiﬁcially restrict computation to a subset of the possible
cores from one to eight cores. We precompute a number
of valid login and re-up tokens and measure the maximum
capacity of the servers.
Figure 3 shows the throughput scaling across two four-core
machines. Note that for an average mix of 20% logins to 80%
re-up operations, the servers can handle over 3× as many
requests per second as 100% logins. The re-up line shows
the upper bound on the number of operations our servers can
handle per second, approximately 8,500 requests/sec for the
two servers. If we consider an epoch length of 15 seconds,
this implies a re-up capacity of over 120,000 concurrent user
sessions for the two quad-core CPUs.
D. Gateway Cost
Figure 4 shows the relative latency overhead of a request
compared with simply downloading a number of different
sized ﬁles. The experiment is run on a local area network to
isolate the computational overhead; however, the authentica-
tion server, gateway, and hash server are all hosted on separate
machines to better simulate a real deployment. Overhead for
reasonably sized ﬁles is low. And, although the worst case
of accessing a 1 byte ﬁle suffers a 1.30× overhead, the time
difference is only 0.15 milliseconds. In comparison, receiving
16 MB of data takes on average 194ms, dwarﬁng the additional
cost of the hash server query.
E. Streaming music service
We build an example streaming music service. We lack
datacenter-level resources, and so must adapt the benchmark
to run on our local cluster of machines: network bandwidth
is limited to 1 Gbps; we run the authentication server and
application server on the Dell Optiplex 780s; and the hash
server on the Dell 755. Clients run on 10 other machines. Each
client randomly chooses a song and fetches it using pyCurl
rather than a more memory-intensive media player like VLC.
Avoiding VLC allows us to scale to a greater number of clients
for our testbed.
We serve a media library consisting of 406 MP3 ﬁles, whose
length is drawn from the most popular 500 songs on the
Grooveshark music service, eliminating duplicates and songs
that are over 11 minutes long. The average length of a song is
4:05± 64.38 s. We represent the music ﬁles using white noise
329
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:46 UTC from IEEE Xplore.  Restrictions apply. 
Gateway Access Latency
1.30
1.30
1.20
Baseline
Gateway
Access auth.
Playback auth.
1.05
1.01
1.00
e
c
n
e
r
e
f
f
i
d
e
v
i
t
a
l
e
R
1.5
1.4
1.3
1.2
1.1
1
0.9
0.8
0.7
0.6
0.5
Authentication Server
CPU Usage
Login−only
saturation
Login−only
Anon−Pass
100
80
60
40
20
U
P
C
%
1 B
256 B
4 KB
64 KB 1 MB 16 MB
Download Size
0
0
10
20
30
Time (minutes)
Fig. 4. Average latency overhead versus different sized client requests. Access
authentication only veriﬁes client requests while playback authentication also
veriﬁes returned data.
encoded at 32Kbps. The system dynamics are independent of
the music content, and 32Kbps allows our server to saturate
its CPU before saturating its outbound network bandwidth.
Media streaming servers want their clients to have enough
data to buffer changing network conditions, but transferring
too much data too quickly costs server resources with no end-
user beneﬁt. For our service, clients are allowed a burst of
32 KB at the beginning of each song request which helps
to ﬁll quickly the client song buffer. After this initial burst,
the server aggressively throttles the download speed to only
5 KBps (or 40 Kbps) – enough to keep each stream playing,
but not enough for a client to quickly download the entire
library. We measure how much data each client downloaded as
a function of time and infer the number of pauses for buffering
that would have occurred during song playback.
We deploy a tightly integrated service running an authenti-
cation server, gateway, and data server with an epoch length
of 15 seconds. We simulate two different scenarios: one case
using only login and the other using both the login and re-
up operations. We use an epoch length of 15 seconds as we
believe this would be an acceptable delay for users to re-
anonymize between songs.
Figures 5 and 6 show the performance of Anon-Pass and
a modiﬁed login-only service that provides a linkable re-up
service at the server CPU cost of a regular login. We modify
the client programs to call the anonymous subscription service.
In both the login-only conﬁguration and the Anon-Pass
conﬁguration, we ramp up the number of concurrent clients at
a rate of 300 new clients every epoch (approximately 20 new
Fig. 5.
The CPU usage on the authentication server measured every 5
seconds. The average CPU utilization for Login-only during the ﬁrst stable
segment (6,000 clients) is 77.9% (±2.42) and reaches saturation at about
the 17 minute mark, or approximately 8,100 clients. The CPU utilization for
Anon-Pass is 16.8% (±0.73) at 6,000 clients, and 33.4% (±0.96) at 12,000
clients (the second stable segment).
clients a second) until we reach 6,000 total clients. After 10
minutes, we continue to increase the total number of clients
until we reach 12,000 active clients. At 12,000 clients, the
login-only conﬁguration has a client failure rate of 34% due
to CPU saturation. On the other hand, Anon-Pass only fails
0.02% of the requested songs.
Figure 5 shows the limited capacity of the login-only
service. At 6,000 clients, the login-only service is able to
keep up with authentication requests. However, the the steady-
state average CPU utilization is already 77.9%. At the CPU
saturation point, there are 8,100 clients attempting to connect
to the service.
Figure 6 shows the CPU utilization on the application server
and measures the impact of the gateway server. In addition
to serving content, an authenticating application server must
also receive client re-authentication updates and interact with
the hash server. The intermittent client updates (once per
epoch) each require an ECDSA signature veriﬁcation which is
relatively CPU intensive. Each update also requires at least one
network round trip to the hash server (two in the case of re-up),
and every active client connection also triggers a check (and
hence network round trip) once every epoch. In combination,
Anon-Pass adds an appreciable, but manageable amount of
additional CPU utilization. On average, 6,000 clients adds
5.9 percentage points of CPU utilization and 12,000 clients
330
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:46 UTC from IEEE Xplore.  Restrictions apply. 
Application CPU Usage
U
P
C
%
50
40
30
20
10
0
0
Login−only
Anon−Pass
Unmodified application
Login−only
saturation
10
20
30
Time (minutes)
Fig. 6. The CPU usage on the application server measured every 5 seconds.
The CPU usage with login-only follows the Anon-Pass behavior until the
authentication server reaches saturation. Clients timeout and the application
server has an overall drop in CPU utilization due to the lower number of
clients successfully completing requests.
adds 11.8 percentage points. The login-only conﬁguration adds
approximately the same amount of overhead for as long as the
authentication server can keep up, but as soon as clients begin
to fail, the application server sees a decrease in overall CPU
utilization due to the decrease in the number of successful
clients. Clients request new songs causing a larger amount of
variation in the application server CPU utilization.
Anon-Pass keeps its state in hash server memory, and
does not require persistent storage. One average, the hash
server memory utilization is only 2.1 KB per client. However,
the authentication server requires an additional 23.8 KB of
memory per client and the application server requires an
additional 7.3 KB of memory per client. The unmodiﬁed server
requires 52.1 KB of memory per client, so Anon-Pass has a
memory overhead of 1.64× per active client.
F. Public Transit Pass
We compute the amount of time it takes to generate a login
QR code on an HTC Evo 3D. Recall, the login QR code
consists a normal client login and three re-up tokens. The
time to generate a login QR code is 222 ± 24 ms. Power
usage is minimal because the the application does not need to
communicate with any remote servers over the network.
G. Content proxy service
We set up a proxy to test how much latency our proposed
proxy service adds to clients’ requests. We host the proxy
Website
http://news.yahoo.com/
http://www.nytimes.com/
http://www.guardiannews.com/
http://abcnews.go.com/
http://espn.go.com/
http://www.npr.org/
Normal Access
2.69 (±0.46)
2.74 (±1.12)
3.03 (±0.27)
2.35 (±0.55)
1.67 (±0.14)
1.24 (±0.19)