constraints to the following simpliﬁed lemma:
Lemma 1 (Informal Trilemma). For security parameter η, no
2(cid:4)β  1 − (η), where p = p(cid:2)
+ β combines the
genuine user messages p(cid:2) with their bandwidth overhead β.
Our result shows a connection between the expected usage
behavior p and the latency (cid:4). If p is not particularly large,
the latency cannot be low; otherwise, the path-length cannot
be sufﬁciently high to ensure mixing at an honest node. In
other words, unless p is very large (as should be the case for
some ﬁle sharing applications), a low latency renders the AC
protocol cheap to compromise, i.e., c can be low.
Our necessary constraints enable protocol designers of
AC protocols to avoid bad trade-offs between latency and
bandwidth overhead. For a given expected user behavior and
a given target attacker against which the AC shall provide
anonymity, our constraints clearly state which combinations
of latency and bandwidth overhead to avoid.
E. Related Work
In contrast to previous work, our work provides necessary
constraints for strong anonymity w.r.t. to bandwidth and la-
tency overhead. While there is a successful line of work on
provable anonymity guarantees [12], [26], [27], [34]–[37], it is
incomparable since it provides lower bounds on anonymity for
speciﬁc protocols, and does not prove any general statements
about sufﬁcient conditions for strong anonymity.
Previous work on attacks against anonymous communica-
tion protocols, except for Oya et al. [38], solely provides
upper bounds on anonymity for speciﬁc protocols [39]–[42].
Oya et al. [38] cast
their attack in a general model and
provide a sophisticated generic attacker. However, they only
compute bounds w.r.t. a dummy message rate against timed
pool mixes, not against other protocols and not w.r.t. latency
and compromisation rate. Even more important, none of these
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:11 UTC from IEEE Xplore.  Restrictions apply. 
results discuss the relationship of the lower bounds for latency
and bandwidth overheads.
III. ANONYMITY DEFINITION AND USER DISTRIBUTIONS
A. AnoA-Style Anonymity Deﬁnition
1
We deﬁne our anonymity notions with a challenge-response
game similar to AnoA [26], [27], where the challenger sim-
ulates the protocol and the adversary tries to deanonymize
users. The challenger Ch(Π, α, b) allows the adversary to
adaptively control user communication in the network, up to
an uncertainty of one bit for challenges, and is parametric in
the following parts: (i) the AC protocol Π to be analyzed, (ii)
the so called anonymity function α, that describes the speciﬁc
variant of anonymity such as sender anonymity, recipient
anonymity and relationship anonymity, (iii) and the challenge
bit b which determines the decision the challenger takes in
challenge inputs from the adversary.
Given a security parameter η, we quantify the anonymity
provided by the protocol Π simulated by Ch(Π, α, b) in terms
of the advantage the probabilistic polynomial
time (PPT)
adversary A has in correctly guessing Ch’s challenge bit b. We
measure this advantage in terms of indistinguishability of ran-
dom variables additively, where the random variables in ques-
tion represent the output of the interactions (cid:5)A|Ch(Π, α, 0)(cid:6)
and (cid:5)A|Ch(Π, α, 1)(cid:6).
Deﬁnition
((α, δ)-IND-ANO). A protocol Π is
(α, δ)-IND-ANO 4 for the security parameter η, an adversary
class C, an anonymity function α and a distinguishing factor
δ(· ) ≥ 0, if for all ppt machines A ∈ C,
Pr [0 = (cid:5)A|Ch(Π, α, 0)(cid:6)] ≤ Pr [0 = (cid:5)A|Ch(Π, α, 1)(cid:6)] + δ(η).
For an anonymity function α, we say that a protocol Π
provides strong anonymity [12], [13] if it is (α, δ)−IND-ANO
with δ ≤ neg(η) for some negligible function neg. If δ is
instead non-negligible in η,
then we say that Π provides
weak anonymity. Note that η does not measure the size of
the anonymity set, but the computational limitation of the
adversary.
Sender Anonymity. Sender anonymity characterizes the ano-
nymity of users against a malicious server through the inability
of the server (or some intermediary) to decide which of two
self-chosen users have been communicating with the server.
We borrow the sender anonymity αSA deﬁnition from the
AnoA framework [26], where αSA selects one of two possible
challenge users and makes sure that
the users cannot be
distinguished based on the chosen recipient(s) or message(s).
Deﬁnition 2 (Sender anonymity). A protocol Π provides δ-
is (αSA, δ)-IND-ANO for αSA as
sender anonymity if
deﬁned in Figure 2.
it
Recipient Anonymity. Recipient anonymity characterizes
that the recipient of a communication remains anonymous,
even to observers that have knowledge about the sender in
4AnoA also allows a multiplicative factor ε; we use the simpliﬁed version
with ε = 0, such that δ directly corresponds to the adversarial advantage.
Adaptive AnoA Challenger Ch(Π, α, b)
Upon message (Input, u, R, m): RunProtocol(u, R, m)
Upon message (Challenge, u0, u1, R0, R1, m):
if this is the ﬁrst time, such a message is received then
Compute (u∗, R∗
RunProtocol(u∗, R∗, m))
) ← α(u0, u1, R0, R1, b)
end if
RunProtocol(u, R, m):
Run Π on r = (u, R, m) and forward all messages that are sent by
Π to the adversary A and send all messages by the adversary to Π.
αSA(u0, u1, R0, R1, b) = (ub, R0)
αRA(u0, u1, R0, R1, b) = (u0, Rb)
Fig. 2. Adaptive AnoA Challenger [26]
question. Similar to sender anonymity, we borrow the recipient
anonymity αRA deﬁnition from the AnoA framework, where
αRA selects one of two possible recipients for a message and
makes sure that the recipients cannot be distinguished based
on the chosen sender(s) or message(s).
Deﬁnition 3 (Recipient anonymity). A protocol Π provides
δ-recipient anonymity if it is (αRA, δ)-IND-ANO for αRA as
deﬁned in Figure 2.
We omit the detailed technical notation of the anonymity
functions in the following sections, and write Pr [0 = A|b = i]
instead of Pr [0 = (cid:5)A|Ch(Π, αSA, i)(cid:6)].
B. Game Setup
Let S be the set of all senders, R be the set of all recipients,
and P be the set of protocol parties that participate in the
execution of the protocol (like relays/mix-nodes in Tor/mix-
nets, for DC-net or P2P mixing users and protocol parties are
the same). We consider a system of total |S|= N senders.
Given our focus on sender anonymity, we need only a single
element in R. We allow the adversary to set the same entity
(say R) as the recipient of all messages, and expect R to be
compromised by the adversary. The adversary uses a challenge
(as deﬁned in Figure 2) of the form (u0, u1, R,
, m0), where
u0, u1 ∈ S, for our sender anonymity game.
We consider a completely connected topology, which means
any party can send a message directly to any other party.
We assume a standard (bounded) synchronous communication
model as in [16], [17], [31], [32], where a protocol operates
in a sequence of communication rounds.5 In each round, a
party performs some local computation, sends messages (if
any) to other party through an authenticated link. By the
end of the round, every party receives all messages sent by
the other parties to her the same round. With our focus on
computing lower bounds, our model abstracts from the time
5While a time-sensitive model [43] would be more accurate, e.g., for low-
latency protocols like Tor [44], such a model would only strengthen the
attacker. As we present necessary constraints, our results also hold for the
more accurate setting.
111
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:11 UTC from IEEE Xplore.  Restrictions apply. 
the computations at the node take and also the length of the
messages. Nevertheless, as we are interested in quantifying the
communication/bandwidth overhead, unlike [16], [17], [32],
we do not assume that the parties have access to ready-made
broadcast communication channels; Parties are expected to
communicate with each other to implement broadcast fea-
tures [31], [45]. Lastly, the use of the asynchronous communi-
cation model offers more capabilities to the attacker, and thus,
our impossibility results for the synchronous model naturally
apply to the asynchronous model as well.
We deﬁne the latency overhead (cid:4) as the number of rounds a
message can be delayed by the protocol before being delivered.
We deﬁne the bandwidth overhead β as the number of noise
messages per user that the protocol can create in every round
(i.e., the dummy message rate) and we do not restrict the time
these noise messages reside within the protocol.
We consider
two types of global passive adversaries:
Our non-compromising adversaries (which model network-
level eavesdroppers) can observe all communication be-
tween all protocol parties, but do not compromise any party
the recipient R. We say that
of the AC protocol except
the AC protocol is non-compromised. Our strictly stronger
partially compromising adversaries (which model hacking and
inﬁltration capabilities) can additionally compromise some of
the AC parties in the setup phase of the game to obtain
these parties’ mapping between the input messages and output
messages during the protocol’s runtime. We say that the AC
protocol is partially compromised.
C. User Distributions
We consider two kinds of user distributions in our anony-
mity games and both of them assume an N sized set S of users
that want to send messages. In both cases, the adversary can
choose any two senders u0, u1 ∈ S. However, the time and
method by which they actually send messages differs:
• In the synchronized user distribution the users globally
synchronize who should send a message at which point in
time. We assume that each user wants to send exactly one
message. Consequently, we choose a random permutation of
the set of users S and the users send messages in their
respective round. In every single round out of a total of N
rounds exactly one user sends a message. Since the users
globally synchronize their sending of messages, we allow the
protocol to also globally decide on the bandwidth overhead
it introduces. Note that here the requirements are identical to
those of the Bulk protocol in [17].
• In the unsynchronized user distribution each of the N users
wants to send messages eventually and we assume that each
user locally ﬂips a (biased) coin every round to decide whether
or not to send a message. In this case we deﬁne the bandwidth
overhead as an increased chance of users sending messages.
Since the protocol does not globally synchronize the input
messages, for noise messages also we allow the users to decide
it locally and send noise messages with a certain probability.
Protocol
P1
TP1
$1
S
TS
P2
TP2
R
P3
TP3
Fig. 3. Petri net of an AC protocol with K = 3 parties.
IV. A PROTOCOL MODEL FOR AC PROTOCOLS
An AC protocol allows any user in the set of users S to
send messages to any user in R, via a set of anonymizing
parties P. We deﬁne protocols that are under observation of
an eavesdropping adversary A that may have compromised
a set of c parties Pc ⊆ P and that furthermore observes the
communication links between any two parties, including users.
Technically, whenever a party P1 ∈ P ∪ S sends a message
to another party P2 ∈ P ∪ R, the adversary is able to observe
this fact together with the current round number. However,
we assume the protocol applies sufﬁcient cryptography, s.t.,
the adversary can not read the content of any message except
the messages sent to the malicious recipient, which technically
results in simply being able to additionally recognize when the
challenge reaches the recipient.
For an actual protocol, the sets S, R, and P might not be
mutually exclusive [15], [16], [18]. Since we have only one
malicious party in R, and the content of a message can only
be read when it reaches its ﬁnal recipient, we consider R to be
mutually exclusive from S ∪ P for the purpose of simplicity.
With the above preliminaries in mind, we shall now formally
deﬁne our generic AC protocol using a petri net model.
A. Protocol Model
We model any AC protocol with K parties by a timed
colored petri net [28]–[30] M, consisting of places S for
the users, P1, . . . , PK symbolizing the protocol parties, $1 for
randomness and R for recipients of messages, and colored
tokens m symbolizing the messages (real or noise) sent by
clients or protocol parties, and transitions TS for inserting
, . . . , TPK as functions for
messages into the network and TP1
sending the messages from one party to another. The structure
of the petri net with its places, tokens and transitions remains
the same for every AC protocol. However, the implementation
of the guards within the transitions is different for different
protocols: protocols can choose to which party messages are
to be sent next and whether they should be delayed. But,
protocols in M are oblivious to the challenge message or the
challenge users. We refer to Figure 3 for a graphical depiction
of petri net model M.
112
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:11 UTC from IEEE Xplore.  Restrictions apply. 
Deﬁnition 4 (Colored token). A colored token is represented
by the tuple m = (cid:5)msg, meta, tr, IDt, prev, next, ts(cid:6), where,
msg is the content of the message, meta is the internal protocol
meta-data for this message, tr is the time the message can
remain in the network, IDt is a new unique ID generated by
each transition for each token by honest parties; dishonest
parties instead keep IDt untouched to allow the adversary to
link incoming and outgoing messages, prev is party/user that
sent the token and next is the user/party that receives the
token. Finally, ts is the time remaining for the token to be
eligible for a ﬁring event (a feature of timed petri-net). Here,
ts either describes when new messages are introduced into the
petri net or is set to the next round, such that messages can be
processed in every round as soon as they enter the network.
The four ﬁelds IDt, prev, next, ts are public, and are visible
to the adversary. The remaining three ﬁelds msg, meta and tr
in a token are private and can not be observed by the adversary,
with the exception that msg can be observed when a message
reaches its destination, i.e, is received by a recipient. Formally,
we introduce a set Tokens, that is initially empty and in which
we collect the pair (t, r), where t is a copy of a token and r