### Bounds on \( n' \)

- In [46], a bound of \( n' = 6n \) is stated.
- In [47], a bound of \( n' = 4n \) is stated.
- In [43], a range of bounds \( n' = 2.4cn \) for \( c \in \{2, 3, 4, 5\} \) is given, depending on different parameters.

## 5. Experimental Results

### 5.1 Implementation

To evaluate the performance of our Private Set Intersection (PSI) protocol, we developed and tested an implementation. The complete code is available on GitHub: [osu-crypto/MiniPSI](https://github.com/osu-crypto/MiniPSI). Below, we discuss the instantiation of the various components.

#### Key Agreement

We use the Diffie-Hellman Key Agreement (DHKA) with elliptic curve groups and hash \( g^{ab} \) using SHA2. As previously mentioned, this variant of DHKA is non-malleable (Definition 3.3) under the One-More Discrete Logarithm (ODH) assumption.

An elliptic curve consists of the solutions \((x, y)\) in a field \( F_q \) to the Weierstrass equation \( y^2 = x^3 + Ax^2 + B \) or the Montgomery equation \( y^2 = x^3 + Ax^2 + x \). Depending on the curve parameters, the elliptic curve can take different shapes. In this work, we chose the Curve25519 Montgomery curve, as it is recommended for elligator [1]. This curve is defined over \( GF(q = 2^{255} - 19) \) and has a curve parameter \( A \) with the value 486662.

We implemented the elligator encoding based on [6]. The encoding takes a curve point and outputs a pseudorandom string of 256 bits. A point \((x, y)\) has an inverse map if it satisfies two conditions: 
1. The \( x \) value is not equal to the curve parameter \( A \).
2. \(-2x(x + a)\) must be a square.

Therefore, we continue sampling points until these conditions are met. According to [1, 6] and confirmed by our experiments, the success probability is \( \frac{1}{2} \). The elligator encoding of such a valid point is defined by:
\[ r = \sqrt{\frac{x + A}{b}}, \]
where \( b = 1 \) if \( v \leq \frac{q-1}{2} \), otherwise \( b = -1 \).

### Performance Comparison

| \( n \) | Protocol | Secure Communication (KB) | Running Time (milliseconds) |
|---------|----------|---------------------------|-----------------------------|
| 27      | Classic DH [29] | 9.09 | 241.1 (10 Gbps), 241.1 (50 Mbps) |
| 27      | KKRT [36] | 22.22 | 838.1 (10 Gbps), 838.1 (50 Mbps) |
| 27      | Ours | 4.99 | 201.2 (10 Gbps), 201.2 (50 Mbps) |
| 27      | SpOT-low [42] | 26.70 | 756.5 (10 Gbps), 756.5 (50 Mbps) |
| 27      | CM [11] | 32.00 | 903.2 (10 Gbps), 903.2 (50 Mbps) |
| 27      | DKT [16] | 31.48 | 1918.8 (10 Gbps), 1918.8 (50 Mbps) |
| 27      | PaXoS [43] | 40.96 | 1201.3 (10 Gbps), 1201.3 (50 Mbps) |
| 27      | Ours | 8.19 | 221.8 (10 Gbps), 221.8 (50 Mbps) |
| 28      | Classic DH [29] | 18.18 | 848.3 (10 Gbps), 848.3 (50 Mbps) |
| 28      | KKRT [36] | 43.8 | 270.6 (10 Gbps), 270.6 (50 Mbps) |
| 28      | Ours | 9.98 | 782.5 (10 Gbps), 782.5 (50 Mbps) |
| 28      | SpOT-low [42] | 33.90 | 984.6 (10 Gbps), 984.6 (50 Mbps) |
| 28      | CM [11] | 43.00 | 3081.8 (10 Gbps), 3081.8 (50 Mbps) |
| 28      | DKT [16] | 62.74 | 1220.14 (10 Gbps), 1220.14 (50 Mbps) |
| 28      | PaXoS [43] | 69.83 | 1225.14 (10 Gbps), 1225.14 (50 Mbps) |
| 28      | Ours | 16.38 | 287.6 (10 Gbps), 287.6 (50 Mbps) |
| 29      | Classic DH [29] | 36.86 | 998.9 (10 Gbps), 998.9 (50 Mbps) |
| 29      | KKRT [36] | 94.64 | 375.1 (10 Gbps), 375.1 (50 Mbps) |
| 29      | Ours | 20.48 | 837.7 (10 Gbps), 837.7 (50 Mbps) |
| 29      | SpOT-low [42] | 48.40 | 988.6 (10 Gbps), 988.6 (50 Mbps) |
| 29      | CM [11] | 64.00 | 5966.2 (10 Gbps), 5966.2 (50 Mbps) |
| 29      | DKT [16] | 125.27 | 1225.14 (10 Gbps), 1225.14 (50 Mbps) |
| 29      | PaXoS [43] | 127.56 | 1225.14 (10 Gbps), 1225.14 (50 Mbps) |
| 29      | Ours | 32.77 | 390.2 (10 Gbps), 390.2 (50 Mbps) |
| 210     | Classic DH [29] | 73.73 | 574.2 (10 Gbps), 574.2 (50 Mbps) |
| 210     | KKRT [36] | 188.64 | 574.2 (10 Gbps), 574.2 (50 Mbps) |
| 210     | Ours | 40.96 | 899.2 (10 Gbps), 899.2 (50 Mbps) |
| 210     | SpOT-low [42] | 77.20 | 534.7 (10 Gbps), 534.7 (50 Mbps) |
| 210     | CM [11] | 105.00 | 671.2 (10 Gbps), 671.2 (50 Mbps) |
| 210     | DKT [16] | 250.32 | 164 (10 Gbps), 164 (50 Mbps) |
| 210     | PaXoS [43] | 243.01 | 155 (10 Gbps), 155 (50 Mbps) |
| 210     | Ours | 65.54 | 345.1 (10 Gbps), 345.1 (50 Mbps) |

This table summarizes the secure communication overhead and running times for different protocols at varying set sizes \( n \). The results show that our protocol achieves competitive performance in both secure communication and running time.