# 八、使用 Docker Swarm 的集群
我们已经涵盖了持续交付管道的所有基本方面。在本章中，我们将看到如何将 Docker 环境从单个 Docker 主机更改为机器集群，以及如何与 Jenkins 一起使用它。
本章包括以下几点:
*   解释服务器集群的概念
*   介绍 Docker Swarm 及其最重要的特性
*   介绍如何从多个 Docker 主机构建集群集群
*   在群集上运行和缩放 Docker 映像
*   探索高级群功能:滚动更新、耗尽节点、多个管理器节点和调整调度策略
*   在集群上部署 Docker 编写配置
*   引入 Kubernetes 和阿帕奇介子作为 Docker Swarm 的替代品
*   在集群上动态扩展 Jenkins 代理
# 服务器群集
到目前为止，我们已经单独与每台机器进行了交互。即使当我们使用 Ansible 在多个服务器上重复相同的操作时，我们也必须明确指定应该在哪个主机上部署给定的服务。然而，在大多数情况下，如果服务器共享相同的物理位置，我们对服务部署在哪个特定机器上不感兴趣。我们所需要的只是让它在许多情况下可以被访问和复制。我们如何配置一组机器一起工作，以便添加新机器时不需要额外的设置？这就是集群的作用。
在本节中，您将了解服务器集群的概念和 Docker Swarm 工具包。
# 引入服务器集群
服务器集群是一组相互连接的计算机，它们以类似于单个系统的方式协同工作。服务器通常通过本地网络连接，连接速度足够快，以确保服务分布的影响很小。下图显示了一个简单的服务器集群:
![](img/5932276e-c8df-4777-80c1-69ac1bbccded.png)
用户通过称为管理器的主机访问集群，管理器的接口应该类似于通常的 Docker 主机。在集群内部，有多个工作节点接收任务，执行任务，并通知管理器它们的当前状态。经理负责编排流程，包括任务分派、服务发现、负载平衡和工作人员故障检测。
The manager can also execute tasks, which is the default configuration in Docker Swarm. However, for large clusters, the manager should be configured for management purposes only.
# 引入 Docker Swarm
Docker Swarm 是 Docker 的本机集群系统，它将一组 Docker 主机转换为一个一致的集群，称为群。连接到群集的每台主机都扮演着管理者或工作者的角色(群集中必须至少有一个管理者)。从技术上讲，机器的物理位置并不重要；但是，将所有 Docker 主机放在一个本地网络中是合理的，否则，管理操作(或在多个管理人员之间达成共识)可能会花费大量时间。
Since Docker 1.12, Docker Swarm is natively integrated into Docker Engine as swarm mode. In older versions, it was necessary to run the swarm container on each of the hosts to provide the clustering functionality.
关于术语，在群集模式下，运行的映像称为**服务，**，而不是在单个 Docker 主机上运行的**容器**。一个服务运行指定数量的**任务。**任务是群的原子调度单元，它保存关于容器的信息和应该在容器内部运行的命令。一个**副本**是在节点上运行的每个容器。副本的数量是给定服务的所有容器的预期数量。
让我们看一张展示术语和 Docker Swarm 集群过程的图片:
![](img/503d41a5-5167-45a9-ac26-547095f5f638.png)
我们从指定服务、Docker 映像和副本数量开始。经理自动将任务分配给工作节点。显然，每个复制的容器都是从同一个 Docker 映像运行的。在所呈现的流程的上下文中，Docker Swarm 可以被视为负责容器编排的 Docker Engine 机制之上的一层。
在前面的示例映像中，我们有三个任务，每个任务都在单独的 Docker 主机上运行。然而，也可能发生所有容器都在同一个 Docker 主机上启动的情况。一切都取决于使用调度策略将任务分配给工作节点的管理节点。稍后，我们将在单独的章节中展示如何配置该策略。
# Docker Swarm 功能概述
Docker Swarm 提供了许多有趣的特性。让我们来看看最重要的几个:
*   **负载平衡** : Docker Swarm 负责负载平衡和分配唯一的 DNS 名称，以便部署在集群上的应用可以像部署在单个 Docker 主机上一样使用。换句话说，群可以以与 Docker 容器类似的方式发布端口，然后群管理器在集群中的服务之间分发请求。
*   **动态角色管理** : Docker 主机可以在运行时加入群，不需要重启集群。此外，节点(管理人员或工作人员)的角色也可以动态更改。
*   **动态服务缩放**:每个服务都可以通过 Docker 客户端进行动态缩放。管理器节点负责在节点中添加或移除容器。
*   **故障恢复**:节点由管理器持续监控，如果其中任何一个出现故障，新任务将在不同的机器上启动，这样声明的副本数量将保持不变。还可以创建多个管理器节点，以防其中一个节点出现故障。
*   **滚动更新**:服务的更新可以增量应用；例如，如果我们有 10 个副本，并且我们想要进行更改，我们可以定义部署到每个副本之间的延迟。在这种情况下，当出现任何问题时，我们永远不会遇到副本无法正常工作的情况。
*   **两种服务模式:**有两种模式可以运行:
    *   **复制服务**:基于调度策略算法，指定数量的复制容器分布在节点之间
    *   **全局服务**:集群中的每个可用节点上运行一个容器
*   **安全性:**由于一切都在 Docker 中，Docker Swarm 会强制执行 TLS 身份验证和通信加密。也可以使用证书颁发机构(或自签名)证书。
让我们看看所有这些在实践中是怎样的。
# 实践中的 DockerSwarm 体
Docker 引擎默认包含 Swarm 模式，因此不需要额外的安装过程。由于 Docker Swarm 是本地 Docker 集群系统，管理集群节点是通过`docker`命令完成的，因此非常简单直观。让我们从创建一个具有两个工作节点的管理节点开始。然后，我们将从 Docker 映像运行和扩展服务。
# 设置群
为了设置 Swarm，我们需要初始化管理器节点。我们可以在应该成为管理器的机器上使用以下命令来实现这一点:
```
$ docker swarm init
Swarm initialized: current node (qfqzhk2bumhd2h0ckntrysm8l) is now a manager.
To add a worker to this swarm, run the following command:
docker swarm join \
--token SWMTKN-1-253vezc1pqqgb93c5huc9g3n0hj4p7xik1ziz5c4rsdo3f7iw2-df098e2jpe8uvwe2ohhhcxd6w \
192.168.0.143:2377
To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.
```
A very common practice is to use the `--advertise-addr ` parameter, because if the manager machine has more than one potential network interfaces, then `docker swarm init` can fail.
在我们的例子中，管理机有 IP 地址`192.168.0.143`，显然，它必须可以从工作节点到达(反之亦然)。请注意，要在工作机上执行的命令已打印到控制台。还要注意，已经生成了一个特殊的令牌。从现在开始，它将用于将机器连接到集群，并且应该保密。
我们可以使用`docker node`命令检查蜂群是否已经创建:
```
$ docker node ls
ID                          HOSTNAME       STATUS  AVAILABILITY  MANAGER STATUS
qfqzhk2bumhd2h0ckntrysm8l * ubuntu-manager Ready   Active        Leader
```
当管理器启动并运行时，我们准备向 Swarm 添加工作节点。
# 添加工作节点
为了向 Swarm 添加一台机器，我们必须登录给定的机器并执行以下命令:
```
$ docker swarm join \
--token SWMTKN-1-253vezc1pqqgb93c5huc9g3n0hj4p7xik1ziz5c4rsdo3f7iw2-df098e2jpe8uvwe2ohhhcxd6w \
192.168.0.143:2377
This node joined a swarm as a worker.
```
我们可以使用`docker node ls`命令检查该节点是否已添加到 Swarm 中。假设我们添加了两台节点机器，输出应该如下所示:
```
$ docker node ls
ID                          HOSTNAME        STATUS  AVAILABILITY  MANAGER STATUS
cr7vin5xzu0331fvxkdxla22n   ubuntu-worker2  Ready   Active 
md4wx15t87nn0c3pyv24kewtz   ubuntu-worker1  Ready   Active 
qfqzhk2bumhd2h0ckntrysm8l * ubuntu-manager  Ready   Active        Leader
```
此时，我们有一个由三个 Docker 主机组成的集群，`ubuntu-manager`、`ubuntu-worker1`和`ubuntu-worker2`。让我们看看如何在这个集群上运行服务。
# 部署服务
为了在集群上运行映像，我们不使用`docker run`而是使用 Swarm 专用的`docker service`命令(在管理器节点上执行)。让我们开始一个单一的`tomcat`应用，并给它命名为`tomcat`:
```
$ docker service create --replicas 1 --name tomcat tomcat
```
该命令创建了服务，因此发送了一个任务来启动其中一个节点上的容器。让我们列出正在运行的服务:
```
$ docker service ls
ID            NAME    MODE        REPLICAS  IMAGE
x65aeojumj05  tomcat  replicated  1/1       tomcat:latest
```
日志确认`tomcat`服务正在运行，并且它有一个副本(一个 Docker 容器正在运行)。我们可以更仔细地检查服务:
```
$ docker service ps tomcat
ID           NAME      IMAGE          NODE            DESIRED STATE CURRENT STATE 
kjy1udwcnwmi tomcat.1  tomcat:latest  ubuntu-manager  Running     Running about a minute ago
```
If you are interested in the detailed information about a service, you can use the `docker service inspect ` command.
从控制台输出中，我们可以看到容器正在管理器节点(`ubuntu-manager`)上运行。它也可以在任何其他节点上启动；管理者使用调度策略算法自动选择工作节点。我们可以使用众所周知的`docker ps`命令确认容器正在运行:
```
$ docker ps
CONTAINER ID     IMAGE
COMMAND           CREATED            STATUS              PORTS            NAMES
6718d0bcba98     tomcat@sha256:88483873b279aaea5ced002c98dde04555584b66de29797a4476d5e94874e6de 
"catalina.sh run" About a minute ago Up About a minute   8080/tcp         tomcat.1.kjy1udwcnwmiosiw2qn71nt1r
```
If we don't want a task to be executed on the manager node, we can constrain the service with the `--constraint node.role==worker` option. The other possibility is to disable the manager completely from executing tasks with `docker node update --availability drain `.
# 缩放服务
当服务正在运行时，我们可以向上或向下扩展它，以便它可以在许多副本中运行: