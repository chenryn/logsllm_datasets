（conn ==NULL)
(mysql_library_init(0,NULL,NULL))
初始化客户端开发库*/
如果命令行指定了数据库名，则获取它*/
break;
opt_db_name, opt_port_num, opt_socket_name,opt_flags)== NULL)
(argc>0）
ask_password=0;
while(*argument)
*argument++
exit（l）;
(conn,
(NULL,
(NULL,
"mysql_library_init() failed");
,client_groups,&argc, &argv);
"mysql_real_connect()failed");
x';
"mysql_init() failed (probably out of memory)");
---
## Page 271
么请把这些新增选项添加到 my_opts 数组里，并对那个选项处理循环进行修改。
种不同客户端程序的基础。如果要编写新的客户端，可以这样做。
器。它还做了一件很漂亮的事情，即在连接失败时报告出错。我们现在有了一个框架，可用作各
connect2具备了每一个MySQL客户端程序都应该具备的功能，即使用适当的参数去连接服务
修改。
数据库。如果带有选项文件，那么connect2 还会处理它的内容，并且对连接参数进行相应的
着会连接some_host主机，并把用户名some_user以及你在提示时输入的密码传递给服务器：
令来运行connect2程序，那么它将提示你输入密码（因为-p选项的后面没有紧跟密码值），接
localhost主机，并且会把你的Unix登录名和空密码传递到服务器。但如果使用如下所示的命
把问题简化一下，假设没有使用选项文件。如果不带任何参数运行connect2，那么它会连接
文件并重新编译它来解决问题。但connect2程序是根据你指定的选项来连接MySQL服务器的。
着你还需要提供一些必要的连接参数。对于connect1程序，你将别无选择，只有通过编辑源
能会看到下面这样的消息：
让我们稍停片刻，回想一下到目前为止，我们都取得了哪些成果。主要的成果体现在，让
(3）把你自己的应用程序所特有的代码添加到连接调用和断开连接调用之间。
（2）如果新程序还需要接受，除connect2.c已实现的那些标准选项以外的其他选项，那
connect2还会把数据库名 some_db 传递给 mysql_real_connect（），以便让它成为默认
（1）将connect2.c复制一份。
%./connect2-hsome_host -p-uBome_user some_db
这种输出消息表明没有建立连接，
%./connect2
如果 connect2 程序没有产生任何输出（如上所示)，则表明连接成功。如果有输出，你可
在编译并链接connect2之后，便可以试着运行它：
(using password:NO)
./connect2
口女
口
口允许以命令行参数的方式指定默认数据库。这与MySQL 发行版里的标准客户端是一
与此前开发的connect1和 show_opt 程序相比，connect2 新做了如下几件事情。
置来适应特定的系统。
的，并且是在所有选项都被处理完之后调用get_tty_passwora（)来完成的。这是一个
如果在命令行只给出了密码选项，而没有给出密码值，那么get_one_option（)将设置
来那个。这样可以大大缩小时间窗口——在这期间，在命令行指定的密码会被 ps 或其
如果密码值存在于输入参数向量里，那么 get_one_option（）将复制它，并且会改写原
致的。
IN
exit (0）;
mysql_library_end (）;
（例如，Windows系统就没有）。get_tty_passwora（）可跨系统移植，因为它可通过配
客
一个标志，用以表明程序应该记得提示用户输入密码。这项工作是在 main（）里完成
密码的做法仍然存在安全风险。）
他系统状态程序看到。（时间窗口只能压缩到最小，但不能彻底消除。在命令行上指定
户端开发库里的辅助例程，它会提示你输人密码，同时不会把密码回显到屏幕上。
，并且它还说明了具体原因。此时，Access denied 意味
7.3出错处理和命令选项处理
251
---
## Page 272
多少个行；也不表示，DELETE语句删除了多少个行。对语句的实际执行效果进行检查，还会涉
能够执行；与语句的执行效果没任何关系。例如，“语句成功”并不表示，SELECT 语句查询了
都将返回一个非零值。所谓的语句“成功”指的是，MySQL服务器认为它没有语法错误，并且
须对它们进行转义处理。7.4.7.1节将会对此问题进行讨论。
的语句使用的值中包含二进制数据，或者其他具有特殊含义的字符，如引号或反斜线，那么必
sprintf()。
准函数库中的字符串函数来构造语句，其中有些函数你可能已经熟悉了，像 strcpy（)和
mysql_query（）。另一方面，如果你正在处理以 null结尾的字符串，那么你可以利用C语言标
来讲，如果语句可以包含任意二进制数据，那么它就有可能包含null字节，因此这时不应使用
语句文本不得包含 null字节，因为 null字节会导致语句被错误地解释成比实际长度更短。一般
以它可以包含任何内容，
mysql_real_query()。
串加上长度值)。你必须计算出语句字符串的长度，并把这个长度值随同字符串一起传递给
进制协议，能以原始格式发送和返回非字符串数据，
字符串发送给服务器，并且会按字符串格式返回所有数据列的结果。第二组例程，使用的是二
回多行数据供你处理。INSERT 语句则不返回数据。
数据。
节的主要内容是展示具体该如何做。每条语句的执行都会涉及以下步骤。
7.4
容上一
调用之间。不过，在有了可重用的编程骨架之后，你便可以把注意力集中在你真正感兴趣的内
252
在构造语句时，需要考虑的另一个因素是，是否需要执行某些字符转义操作。如果想构造
MySQL客户端开发库包含两组用于语句执行的例程。第一组例程，会把每条语句当作一个
（1）构造语句。实现的方式取决于语句本身的内容一
连接MySQL服务器的目的在于：在连接打开的时候，通过执行语句与其进行“对话”。本
如果语句执行成功，mysql_query（)和 mysql_real_query（）都将返回零值；否则，它
if (mysql_query (conn, stmt_str) I= 0)
下面是一个简单的语句处理框架：
在构造语句时，需要考虑的一个因素是，使用哪个函数来把它们发往服务器。最常用的语
本节将对第一种处理SQL语句的办法进行讨论。到7.8节才会讲到二进制协议。
(3）对结果进行处理。这一步取决于你要执行的语句类型。例如，SELECT 语句通常都会返
（2）把语句发送给服务器执行。服务器将执行这条语句，并生成结果。
应用程序的所有实际动作都将发生在 mysql_real_connect（）调用和 mysql_close（）
else
至此，大功告成！
1*若成功，则弄清语句所带来的影响*/
/*若失败，则报告错误*/
处理SQL语句
第7章用C语言编写MySQL程序
-访问数据库的内容。
容，包括二进制数据或null字节。
。因为这种语句将被视为计数字符串，而不是以null 结尾的字符串，
，不需要来回转换字符串格式。
一具体地说，即它是否包含二进制
2
---
## Page 273
里把CLIENT_FOUND_ROWS 值传递给 mysql_real_connect（），服务器便可支持这种行为。
计算在内。如果某个应用程序确实需要用到这种含义，那么只要在连接服务器时，在标志参数
配到行”
子句）查询到某个行，但这个行也有可能实际并未改变。
数。对于UPDATE语句，它指的是实际修改的行数。如果行原有的内容与你要更新的内容相同，
取决于语句的类型。对于语句INSERT、REPLACE 和 DELETE，它指的是插入、替换和删除的行
库系统的可移植性，那么请牢记这一点。
函数，如mysql_num_rows（)和mysql_insert_id（）。如果想让编写的客户端程序具备跨数据
的，并使用%lu输出格式来解决此问题。此原则也适用于其他会返回my_ulonglong类型值的
在某些数据库系统上无法直接输出。因此，需要把这个返回值强制转换成unsignedlong类型
换成unsigned long 值的。此函数返回的是一个 my_ulonglong 类型的值，但是这种类型的值
少个行。
用它。如果语句成功，那么调用mysql_affected_rows（）可以查明实际插入、删除或修改了多
7.4.1
为空，即包含0个行。
里面包含了各个行的数据值，以及关于这些值的元数据（如列名和数据值长度)。结果集也允许
句所返回的结果集，将会通过 MYSQL_RES 数据类型来表示。这种数据类型其实是一个结构，它
行受到了影响。
像INSERT、DELETE和UPDATE这样的语句，可以修改行，并返回一个计数值，用以表明有多少个
及其他的处理操作。
那
对于UPDATE语句，“受影响的行”的含义有时也存在争议，因为有人会希望它的含义是“匹
么MySQL并不会更新这个行。这意味着，即使更新操作可能会（通过UPDATE语句的WHERE
mysql_affected_rows（）函数会返回受语句影响的行数，不过“受影响的行”的具体含义
如果想要处理修改行的语句，那么可以使用mysql_query（）或mysql_real_query（）来调
像 SELECT 和 SHOW 这样的语句，会返回一个结果集。在MySQL的C语言API里，这类语
请注意，为了便于输出显示，这段代码是如何把mysql_affected_rows（）的返回值强制转
下面这个示例演示了如何处理修改行的语句：
所有语句可以粗略地划分为两大类：一类用于修改行；另一类则会返回一个结果集（一组行)。
口要访问语句所引用的那个表，但权限不够。
语句失败的原因有很多。
else
口
口语句本身有语法错误。
printf ("INSERT statement succeeded; number of rows affected: %lu\n",
print_error (conn, "INSERT statement failed");
处理那些修改行的语句
语句在语义上有错误一
一即更新时查询到的所有行数，即使这个更新操作没有实际更改它们的值，也将其
(unsigned long) mysql_affected_rows (conn));
下面列出一些较为常见的失败原因。
一例如，语句用了某个其实并不存在的表。
7.4处理SQL语句
253
---
## Page 274
范围是从O到行里的列数少1。关于数据类型 MYSQL_ROW有以下几个值得注意的地方。
返回值赋给一个名为row的变量，那么可以使用row[i订语法来访问行中的各个值，这里的
只是我们还未定义它。一般来讲，那些处理结果集的操作都是基于一个如下的循环结构展开的：
变得越来越慢。
把结果集占用的内存资源释放掉是很重要的一步操作。
忘记做这件事，那么应用程序会存在内存泄漏的问题。对于需要长时间运行的应用程序，及时
则由应用程序来决定。
一个字符串数组指针，其中的字符串分别代表着这个行里各个列的值。要如何处理这些列值，
时，会返回一个MYSQL_ROW值；如果已没有行，则会返回NULL。返回的 MYSQL_ROW值其实是
result（），这个函数会立刻从服务器检索出行，并把它们缓存在客户端的内存里。
函数之间的区别和它们各自的适用场合进行介绍。当前，我们的示例使用的是mysql_store
在调用成功时，会返回一个MYSQL_RES 指针；失败时，则会返回NULL。我们稍后会对这两个
这样的语句，也都会返回结果集。对于这些语句，在调用语句之后，必须执行附加的行处理操作。
MySQL 里能返回行的语句并非只有 SELECT。像 SHOW、DESCRIBE、EXPLAIN 和 CHECK TABLE
mysql_real_query（），那么检索出来的数据将以结果集的形式返回。值得注意的是，
7.4.2处理那些返回结果集的语句
254
其中，mysql_fetch_row（)将返回一个MYSQL_ROW值—
这段代码把对结果集的处理细节，都隐藏在另一个名为 process_result_set（)的函数里，
(3）当处理完结果集之后，请调用mysql_free_result（）释放它所使用的内存资源。如果
（2）调用mysql_fetch_row（）函数可以依次取回结果集里的每个行。这个函数在调用成功
口MYSQL_ROW 是指针类型，因此应该把这种类型的变量定义为 MYSQL_ROWroW，而不能
while ((row = mysql_fetch_row (res_set)) != NULL)
MYSQL_ROW roW;
if (mysql_query (conn,
MYSQL_RES *res_set;
有些语句会返回一个结果集。在调用这类语句时，如果使用了mysql_query（）或
口
else
下面是一个对返回结果集的语句进行处理的示例：
/*处理行的内容*/
print_error (conn,"mysql_query() failed");
1在 MYSQL_ROW数组里，对于所有类型的值，甚至包含数字类型的，都是以字符串方式
定义为 MYSQL_ROW*roW。
if (res_set == NULL)
res_set = mysql_store_result (conn);
/*处理结果集，然后释放它*/
print_error
第7章用C语言编写MySQL程序
(conn,
例如，你可以输出列值，也可以对它们进行统计分析。
(conn,res_set);
"mysql_store_result() failed");
 (S  S 
/*生成结果集*/
，否则，系统会随着资源消耗量的增长，
一它是一个数组指针。如果把这个
是
---
## Page 275
肯定有缺点。请执行下面这个查询，看看会得到什么结果：
试可以让它在两种情况下都能正确地检测到出错情况。
则表示“已无更多行”或者有错误发生。因为process_result_set（)并不知道其调用者在生
不过，如果使用mysql_use_result（)来创建结果集，那么 mysql_fetch_row(）的返回值 NULL
result（）来创建结果集，那么 mysql_fetch_row（)的返回值 NULL 将始终表示“已无更多行”
是一个连接处理器。
mysql_affected_rows（)不同的是，mysql_num_rows（)接受的参数是一个结果集指针，而不
此需要先把它强制转换成unsigmedlong类型，再用格式符%lu来输出它。
与mysql_affected_rows（）相似的是，mysql_num_rows（）返回的也是m_ulonglong值，因
依次输出各个行的内容，以及检索到的行数。这个行数可以通过调用mysql_num_rows（）获得。
这种信息可以使用另一个客户端开发库函数mysql_num_fields（）来查询。
来，其中的各个列值之间用制表符隔开。如果要想做到这一点，则必须知道行由多少个列构成。
循环结束后的那段代码包含一个用作预防措施的错误检测。如果使用 mysql_store_
这里展示的process_result_set（）版本只显示了最简单的输出各个列值的方法一
SELECT last_name, first_name, city, state FROM president
unsigned int i;
MYSQL_ROW
process_result_set (MYSQL *conn, MYSQL_RES *res_set)
void
下面是 process_result_set()的代码：
要如何处理各个行，则取决于应用程序的具体目标。
口
口N
if（mysql_errno （conn）!=0)
while ((row = mysql_fetch_row (res_set)) != NULL)
的程序可能会因试图解引用NULL指针而崩溃。
print_error (conn,
for (i = 0; i < mysql_num_fields (res_set); i++)
被定义成 NOT NULL，那么你应该在程序里检查该数据列里的值是否为NULL；否则，你
在 MYSQL_ROW数组里，SQL的NULL 值将被表示成C语言的 NULL 指针。如果数据列未
请参考7.4.6节。）