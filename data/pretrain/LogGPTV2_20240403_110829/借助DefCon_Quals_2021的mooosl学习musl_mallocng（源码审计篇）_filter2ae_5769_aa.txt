# 借助DefCon Quals 2021的mooosl学习musl mallocng（源码审计篇）
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
本题来源于DefCon Quals 2021的mooosl，考察点是最新版本musl libc 1.2.2利用。
关于musl libc的资料比赛期间找到过一篇[从一次 CTF 出题谈 musl libc
堆漏洞利用](https://www.anquanke.com/post/id/202253#h3-15)，碍于musl
libc在1.2.x之后的堆管理机制有较大的改版，因而有了该文章。本次文章分上下两篇，从musl libc
1.2.2的源码审计、调试，以及其中的利用机会，再到mooosl这道题的解题过程做一个分析。
musl libc
1.2.2的源码可以从[此处]，(https://musl.libc.org/releases/musl-1.2.2.tar.gz)下载获得。1.2.x采用src/malloc/mallocng内的代码，其堆管理结构与早期版本几乎完全不同，而早期的堆管理器则放入了src/malloc/oldmalloc中。
## 调试带符号的musl libc
###  0x01源码编译
题目提供的libc.so不带符号，很难通过调试去理解musl堆管理器的数据结构，可以通过源码编译，生成一份带调试符号的libc.so，进行源码级debug。
    tar -xzvf ./musl-1.2.2.tar.gz
    cd musl-1.2.2
    mkdir build x64
    cd build
    CC="gcc" CXX="g++" \             
        CFLAGS="-g -g3 -ggdb -gdwarf-4 -Og -Wno-error -fno-stack-protector" \
        CXXFLAGS="-g -g3 -ggdb -gdwarf-4 -Og -Wno-error -fno-stack-protector" \
        ../configure --prefix=/home/sung3r/workspace/sharefd/glibc/glibc-2.32/x64 --disable-werror
    make
    make install
在`/src/x64/`下找到编译好的libc.so
通过patchelf将ld.so改成libc.so即可，gdb调试时加上`dir /path/to/musl-1.2.2/src/malloc/`和`dir
/path/to/musl-1.2.2/src/malloc/mallocng`便可源码调试。
###  0x02安装调试符号
此方法要在ubuntu 20.04下才能成功
下载[musl_1.2.2-1_amd64.deb](http://archive.ubuntu.com/ubuntu/pool/universe/m/musl/musl_1.2.2-1_amd64.deb)、[musl-dbgsym_1.2.2-1_amd64.ddeb](https://launchpad.net/ubuntu/+archive/primary/+files/musl-dbgsym_1.2.2-1_amd64.ddeb)
在ubuntu20.04安装
    sudo dpkg -i musl_1.2.2-1_amd64.deb
    sudo dpkg -i musl-dbgsym_1.2.2-1_amd64.ddeb
gdb调试时通过`dir`加载源码即可。推荐此方法，比较简单，而且该deb里的libc.so与题目提供的libc.so md5一致。
## 源码审计
meta.h
    //line:124~127
    static inline int get_slot_index(const unsigned char *p)
    {
        //chunk地址往前的第3个byte就是该chunk的下标
        return p[-3] & 31;
    }
    //line:129~157
    static inline struct meta *get_meta(const unsigned char *p)
    {
        assert(!((uintptr_t)p & 15));//16字节对齐
        //获取slot的偏移offset，offset*0x10才是真实偏移
        int offset = *(const uint16_t *)(p - 2);
        //获取slot的下标，这里的slot就是我们习惯中理解的chunk
        int index = get_slot_index(p);
        if (p[-4]) {
            //如果offset不为0，表示不是group里的首个chunk，抛出异常
            assert(!offset);
            offset = *(uint32_t *)(p - 8);
            assert(offset > 0xffff);
        }
        //获取group首地址，也即`meta->mem`这个地址
        const struct group *base = (const void *)(p - UNIT*offset - UNIT);
        //获取meta地址，group首地址指向meta结构的地址
        const struct meta *meta = base->meta;
        assert(meta->mem == base);
        assert(index last_idx);
        assert(!(meta->avail_mask & (1ufreed_mask & (1ucheck == ctx.secret);
        if (meta->sizeclass = size_classes[meta->sizeclass]*index);
            assert(offset sizeclass]*(index+1));
        } else {
            assert(meta->sizeclass == 63);
        }
        if (meta->maplen) {
            assert(offset maplen*4096UL/UNIT - 1);
        }
        return (struct meta *)meta;
    }
    //line:229~238
    //16字节对齐向上取整，最后换算成size_classes的下标，对group进行分类
    static inline int size_to_class(size_t n)
    {
        n = (n+IB-1)>>4;
        if (nsize_classes[i+1]) i+=2;
        if (n>size_classes[i]) i++;
        return i;
    }
mallocng/malloc.c:
    //line:174~284
    static struct meta *alloc_group(int sc, size_t req)
    {
    ...
        } else {///通过brk分配
            int j = size_to_class(UNIT+cnt*size-IB);
            int idx = alloc_slot(j, UNIT+cnt*size-IB);
            if (idx maplen = 0;
            p[-3] = (p[-3]&31) | (6= MMAP_THRESHOLD) {///p MMAP_THRESHOLD; $10 = 0x1ffec
            size_t needed = n + IB + UNIT;
            void *p = mmap(0, needed, PROT_READ|PROT_WRITE,
                MAP_PRIVATE|MAP_ANON, -1, 0);
            if (p==MAP_FAILED) return 0;
            wrlock();
            step_seq();
            g = alloc_meta();
            if (!g) {
                unlock();
                munmap(p, needed);
                return 0;
            }
            g->mem = p;
            g->mem->meta = g;
            g->last_idx = 0;
            g->freeable = 1;
            g->sizeclass = 63;
            g->maplen = (needed+4095)/4096;
            g->avail_mask = g->freed_mask = 0;
            // use a global counter to cycle offset in
            // individually-mmapped allocations.
            ctx.mmap_counter++;
            idx = 0;
            goto success;
        }
        //否则通过brk分配
        //根据传入size，转换成size_classes的下标，根据sc申请相对应group的chunk
        sc = size_to_class(n);
        rdlock();
        //根据sc，获取存放着对应size group的meta，如果还没申请过这类group，对应ctx.active[sc]为0
        g = ctx.active[sc];
        // use coarse size classes initially when there are not yet
        // any groups of desired size. this allows counts of 2 or 3
        // to be allocated at first rather than having to start with
        // 7 or 5, the min counts for even size classes.
        if (!g && sc>=4 && scavail_mask
                && !ctx.active[sc|1]->freed_mask))
                usage += 3;
            if (usage avail_mask : 0;
            first = mask&-mask;
            if (!first) break;
            if (RDLOCK_IS_EXCLUSIVE || !MT)
                g->avail_mask = mask-first;
            else if (a_cas(&g->avail_mask, mask, mask-first)!=mask)
                continue;
            idx = a_ctz_32(first);
            goto success;
        }
        upgradelock();
        //申请分配sc类别的chunk，size为n
        idx = alloc_slot(sc, n);
        if (idx avail_mask--;
        queue(&ctx.acti
        ve[sc], g);
        return 0;
    }
free.c
    //line:101~143
    void free(void *p)
    {
        if (!p) return;//地址为0，直接返回
        //获取meta结构，以及做一些检查
        struct meta *g = get_meta(p);
        //获取chunk的下标
        int idx = get_slot_index(p);
        size_t stride = get_stride(g);
        unsigned char *start = g->mem->storage + stride*idx;
        unsigned char *end = start + stride - IB;
        get_nominal_size(p, end);
        uint32_t self = 1ulast_idx)-1;
        //将对应chunk的下标置0xff
        ((unsigned char *)p)[-3] = 255;
        // invalidate offset to group header, and cycle offset of
        // used region within slot if current offset is zero.
        //将chunk的offset清0
        *(uint16_t *)((char *)p-2) = 0;
        // release any whole pages contained in the slot to be freed
        // unless it's a single-slot group that will be unmapped.
        if (((uintptr_t)(start-1) ^ (uintptr_t)end) >= 2*PGSZ && g->last_idx) {
            unsigned char *base = start + (-(uintptr_t)start & (PGSZ-1));
            size_t len = (end-base) & -PGSZ;
            if (len) madvise(base, len, MADV_FREE);
        }