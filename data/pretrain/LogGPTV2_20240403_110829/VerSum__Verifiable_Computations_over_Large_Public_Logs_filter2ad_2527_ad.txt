A suitable computation has small DetermineNext proofs, as each
function itself will call no more than c functions and access no more
than c ADS nodes,
Then, because SEQHASH is efficient, an efficient server exists, as
described in §6.4:
SH 1..1SH 2..2SH 3..3SH 2..3SH 1..3SH 1..7SH 1..16SH 4..7SH 8..16• Determining the current balance held by a single Bitcoin account.
• Determining all (recent) incoming transactions to an account.
• Determining all (recent) outgoing transactions from an account.
• Determining all (recent) outgoing transactions from an account
over a threshold amount.
• Various statistics, such as daily transaction volume, transaction
size, etc.
One solution is to perform these computations locally on the
user’s device. Unfortunately, the Bitcoin blockchain is too large to
reasonably store on mobile phones, and most PC users are unwilling
to spend several hours downloading and processing the blockchain.
Instead of downloading the entire log, Bitcoin users currently out-
source their computations to various parties on the Internet. These
service providers tell Bitcoin users their balance, list various trans-
actions, provide statistics, and so forth. Unfortunately, this approach
has a significant security problem: users blindly trust the results sent
to them from the server, and a malicious server can manipulate this
financial information.
VERSUM enables the best of both worlds: it allows clients to
verify the results of arbitrary computations over the blockchain,
without requiring them to either blindly trust some server, or to
download the blockchain and perform the computation themselves.
Various lightweight Bitcoin clients currently exist. They trust a
single server to provide them with correct information on the state
of the Blockchain. The lightweight Electrum client [1] now requires
balance information to come from an authenticated data structure
(ADS). However, the identity of this ADS itself is not verified, and
so an attacker can simply tell the client to trust an incorrect ADS.
An alternative to VERSUM might be to modify the Bitcoin proto-
col. For example, the Bitcoin community has proposed modifying
the Bitcoin blockchain to store the set of unspent transactions out-
puts as an ADS, similar to the one used by Electrum. Under this
proposal, lightweight clients need not process the entire blockchain,
and can instead ask an untrusted third-party to perform a lookup
in the ADS. If adopted, this will help a lightweight client deter-
mine if a transaction has been spent or not. However, this ADS is
specific to one particular computation. Every other computation
would require changing the Bitcoin protocol again, which not only
increases the size of the blockchain but also requires buy-in to each
such computation from the entire Bitcoin community.
VERSUM needs no modifications of the underlying log to verify
any outsourced computation. If lightweight clients were to switch
to VERSUM, they would be secure immediately without Bitcoin
protocol changes, and with more flexibility.
7.2 Calculating unspent transactions
To illustrate the power of VERSUM’s verifiable computations,
consider the Bitcoin blockchain. Bitcoin tracks money as unspent
transaction outputs. Each transaction spends several previously
unspent transaction outputs, and makes several new transaction
outputs available. Transactions are grouped into blocks, and the
entire Bitcoin blockchain consists of a singly linked list of these
blocks. The Bitcoin protocol ensures that all participants agree on
the same blockchain [15].
A developer can use VERSUM to summarize the Bitcoin log into
a set of unspent transaction outputs, as shown in Figure 9. The de-
veloper summarizes the Bitcoin log using the recursive Summarize
function. Since the blockchain is a linked list, Summarize first
recursively calls itself to summarize the entire blockchain before the
current block. It then processes all transactions in the current block
using ProcessTxn, marking their inputs as spent in SpendOutput
and making their outputs available.
9
Summarize(block):
if block is nil:
return empty
balances := Summarize(block.previous)
for txn in block.transactions:
balances = ProcessTxn(balances, txn)
return balances
ProcessTxn(balances, txn):
for output in txn.inputs:
balances = SpendOutput(balances, output)
balances = balances.makeAvailable(txn)
return balances
SpendOutput(balances, previousOutput):
balances = balances.spend(previousOutput)
return balances
Figure 9: A program to summarize the Bitcoin blockchain into
a set of balances for each account.
This example demonstrates two important properties of VERSUM
computations. First, all computations must be purely functional so
that VERSUM can track the input and output of each function. In
this example, the state of the blockchain is stored in the immutable
dictionary balances, which in our prototype implementation is an
authenticated binary Patricia tree. The input, the blockchain itself, is
also an ADS; clients can learn the current head of the blockchain by
participating as a lightweight node in the Bitcoin network. Because
the computation is purely functional, previous calls to Summarize
can be reused in new computations when a new block is added to
the Blockchain.
Second, all functions should make relatively few calls, to keep
DetermineNext proofs small, while the total runtime of a function
(including recursive calls) can be very long. In our example, a
Summarize can take a long time to compute on the server as it
recursively calls itself, but a client will never have to perform that
nested call as the result will already be known.
7.3
Intermediate output
Once the client has determined the set of unspent transaction out-
puts in an ADS, it can then ask any untrusted server to prove, in that
given set, whether a transaction is spent or not. For our evaluation
of the unspent transaction output computation, we implemented a
function proofTxnSpent which checks if a transaction is spent.
From the point of view of a single client, having to first obtain
the root hash of the output ADS and to then query it to obtain
the ultimate result seems less efficient than asking the server to
compute the desired result directly. However, this intermediate
output ADS allows VERSUM to share the same computation among
many clients, and allows for compact proofs of arbitrary queries on
this intermediate ADS.
8.
IMPLEMENTATION
We built a prototype of VERSUM in Go, as well as several appli-
cations that compute over the Bitcoin blockchain, in a style similar
to the code from Figure 9. The line count for each VERSUM compo-
nent is shown in Figure 10. The implementation reuses the existing
“btcwire” (github.com/conformal/btcwire) Go library to parse and
store Bitcoin’s internal datastructures, with a small wrapper to inte-
grate with VERSUM’s authenticated data structure support.
To handle large authenticated data structures, our prototype trans-
parently pages ADS nodes to and from disk.
Component
authenticated data structures core
SEQHASH
computation proofs, DetermineNext
authenticated map
Bitcoin wrapper
Line count
713
215
524
441
580
Figure 10: Major VERSUM components.
Computation
Unspent Bitcoin transaction outputs
Incoming Bitcoin transactions
Name registration and transfer
Line count
123
90
119
Figure 11: Different VERSUM computations.
9. EVALUATION
To evaluate VERSUM we wanted to measure its practicality by
answering the following questions:
1. Can VERSUM support a variety of computations? (§9.1)
2. Can VERSUM support many clients? (§9.3)
3. How much bandwidth does a VERSUM client need? (§9.4)
4. Can VERSUM quickly update its computation when a log grows?
(§9.5)
5. Can VERSUM be used to summarize a large log? (§9.6)
9.1 Computations
To evaluate the utility and versatility of VERSUM we imple-
mented several computations in VERSUM. Figure 11 lists these
computations along with how many lines of code each implemen-
tation consists of. Using VERSUM, implementing new verifiable
computations is easy, and can be done in about a hundred lines of
code.
Besides the unspent Bitcoin transaction outputs example from §7,
we implemented two extra computations, as follows.
The first, a list of incoming Bitcoin transactions for each Bitcoin
account, stores all incoming transactions for each account in a linked
list held in a map of accounts.
The second computation, a name registration and transfer scheme,
uses Bitcoin in an unconventional way. The Bitcoin blockchain
allows transactions to include 40 bytes of arbitrary data, which the
name registration program uses to store two types of commands:
registering a name to a public key, or transferring a name from
one public key to another key. The 40 bytes hold a 32-byte hash
of a name, along with an 8 byte-tag to indicate name registration
transactions. The computation tracks registrations, and ensures that
no name gets registered twice and that transfers include a signature
from the current owner. This computation implements a subset of
Namecoin on top of the Bitcoin blockchain, showing that VERSUM
can implement interesting computations and build on existing public
logs to support new features.
9.2 Experimental setup
Request
proofTxnSpent
getPrefix
proofDetermineNext
Warm cache Cold cache
76 op/s
9 op/s
6 op/s
4000 op/s
87 op/s
55 op/s
Figure 12: Throughput in operations per second for client re-
quests with warm and a cold disk cache.
blocks, storing 279,000 blocks holding approximately 30 million
transactions.
Server. The VERSUM server ran as single-threaded process on
an Intel E7-8870 2.4 GHz processor, with a single 1TB HDD as
permanent storage and 256 GB of RAM. Although the machine has
a large amount of memory, the computation was configured to use
no more than 4 GB of RAM, to decrease pressure on Go’s garbage
collector. The remaining RAM was used as a buffer cache for the
slow HDD.
9.3 Server performance
To understand whether VERSUM can support many clients, we
measured the throughput that a VERSUM server can achieve. In
particular, we measured the throughput of three different types of
requests that the VERSUM server supports: queries on the output
ADS of the Bitcoin computation (proofTxnSpent), prefixes re-
quested during the conflict resolution protocol (getPrefix), and
DetermineNext proofs requested at the end of the conflict resolu-
tion protocol (proofDetermineNext). Because a large part of the
server time is spent paging in ADS nodes from disk, we measured
the performance of the queries with both warm and cold OS disk
caches. The results are shown in Figure 12.
A single core supports thousands of ADS queries per second on
the output of the Bitcoin computation, with a warm disk cache. This
suggests that VERSUM should be able to support a large number of
clients querying the outputs of their computations.
getPrefix and proofDetermineNext are significantly slower
because both of them must construct the SEQHASH for the requested
prefix. This is also reflected in the cold cache performance numbers,
as all the partial SEQHASH’s must be loaded from disk.
Both of these functions are used in the conflict resolution protocol,
which consists of two phases: first, a binary search over prefixes us-
ing getPrefix, and then verifying a prefix with proofDetermine-
Next. The binary search takes time logarithmic in getLength. The
client enforces an upper bound on getLength so that the conflict
resolution protocol never takes more than 60 binary search steps.
This means that the end-to-end runtime of the conflict resolution
protocol is less than a second for two servers with a warm cache.
We expect that conflict resolution protocol invocations should be
relatively rare, as they should occur only after a server is determined
to have given a wrong result. Once a client has a proof that a server
misbehaved, the client can publish the proof to other servers and
clients, so that the server is not used again. As a result, we expect
that VERSUM’s performance is sufficient to support a large number
of clients, even if some of them do invoke conflict resolution.
9.4 Bandwidth usage
To evaluate the performance of VERSUM, we tested our imple-
mentation of the unspent Bitcoin transaction outputs calculation,
and ran experiments using the following setup:
Blockchain statistics. We used a snapshot from January 2014 of
the Bitcoin blockchain to perform our experiments. This snapshot,
used to bootstrap new Bitcoin nodes, contains 14 GB of Bitcoin
To support lightweight clients, values returned to clients cannot
be too big; Figure 13 lists the sizes of return values for several
operations. We measured the size of query proofs for (proofTxn-
Spent) by picking 1000 random unspent transactions and invoking
proofTxnSpent on them. No proof was bigger than 4267 bytes.
Such small proof sizes can be explained by noting that each query in
10
Operation
proofTxnSpent
getPrefix
proofDetermineNext
Size of return value
< 4267 bytes
32 bytes
10 KB – 600 KB
Figure 13: Sizes of return values
the authenticated map, holding the output of the computation over
the blockchain, must access only a logarithmic number of nodes.
The size of the value returned by getPrefix is 32 bytes in size;
a single hash representing the root of the partial SEQHASH holding
the prefix.
The value of proofDetermineNext varied from less than 10 KB
to a maximum of 600 KB. Because they varied more wildly, we
sampled 10000 random prefix lengths, as well as 20 random series
of 5000 consecutive prefixes. This roughly corresponds with the
expected maximum proof size. A Summarize proof on a block
with the maximum number of transactions, 6000, will contain the
transaction hash, as well as a call and return record for each block,
totaling around 70 bytes per block. With additional overhead from
lookups in the SEQHASH to find these entries, 600 KB is around the
theoretical maximum proof size.
9.5
Incremental computation updates
For VERSUM to be practical a server must be able to quickly
incorporate changes to the underlying log. We measured the av-
erage time to include each of the last 2000 blocks in the Bitcoin
blockchain (around 20 days worth of blocks). Adding a block took
approximately 1.12 seconds per block, including paging data in and
out of memory. Over the last 2000 blocks, the average block size
was 0.17 MB, and the theoretical maximum block size is 1 MB, so
even the largest possible blocks can be included in seconds. The Bit-
coin blockchain grows one block approximately every 10 minutes,
which VERSUM can incorporate in a fraction of that time.
9.6
Initializing VerSum
To bootstrap our VERSUM server we summarized all 14 GB of
the Bitcoin blockchain. This entire computation took 25 hours,
and the final computation history contains 195 million steps. The
final computation history serialized to disk, including all arguments
and return values, measures approximately 365 GB. The growth
from 14 GB to 365 GB happens because VERSUM must store all
intermediate results.
Processing the complete Bitcoin log is expensive even without
VERSUM. For example, developers of a Bitcoin client in Go report
that the time for processing 9.1 GB (250,000 blocks) of the Bitcoin
log took 4.5 hours.1 VERSUM processes a bigger log (14 GB)