) :
1 ··· gxk
k gy(cid:48)
k+1
k(cid:94)
(Ci = gxi
1 gri
2 )
i=0
5This can be done by setting the generators to the output of
a cryptographic hash function of some publicly known seeds.
2. The signer returns 0 if veriﬁcation of the proof fails.
Otherwise the signer randomly generates e, y(cid:48)(cid:48) ∈R Zp,
933computes A = (gCM gy(cid:48)(cid:48)
to the user.
k+1)
1
e+γ , and returns (A, e, y(cid:48)(cid:48))
3. The user computes y = y(cid:48) + y(cid:48)(cid:48). She returns 0 if
k+1, h). Otherwise the user
1 ··· gy
ˆe(A, whe) (cid:54)= ˆe(ggx0
0 gx1
outputs σ as (A, e, y).
Protocol SSig. In protocol SSig a prover convinces a veriﬁer
he/she knows a signature σ = (A, e, s) on a block of mes-
sages (x0, . . . , xk) committed in C0, . . . , Ck. Additionally,
the prover knows the values and openings of the commit-
ments x0, r0, . . . , xk, rk such that Ci = gxi
for i = 0 to
k.
1 gri
2
1. Let M be the random challenge. The prover randomly
2 , A2 =
generates k1, k2 ∈R Zp, computes A1 = gk1
Agk1
2 , and the following SPK Π.
1 gk2
({xi, ri}, e, y, k1, k2, β1, β2) :
k(cid:94)
i=0
1 gri
(Ci = gxi
2 ) ∧
2 ∧
1 gk2
A1 = gk1
−e
1 gβ1
1 gβ2
2 ∧
SPK
1 = A
= ˆe(g0, h)x0 ··· ˆe(gk, h)xk
ˆe(A2, w)
ˆe(g, h)
(cid:48)
)
(M
ˆe(gk+1, h)y ˆe(g2, w)k1
ˆe(g2, h)β1 /ˆe(A2, h)e
where M(cid:48) = M||A1||A2 and β1 = k1e, β2 = k2e.
2. The prover outputs pSig as (Π, A1, A2).
3. Upon receiving (pSig, M ), the veriﬁer parses pSig as
(Π, A1, A2) and outputs accept if Π is a valid proof.
3.2.4 Signature-based interval proof
To demonstrate that the reputation of a user is within a
certain range, we employ the signature-based interval proof
due to Camenisch et al. [9]. In a nutshell the veriﬁer pro-
vides a set of ‘digital signatures’ on the elements of the re-
quired range under a veriﬁcation key. We consider this set
of digital signatures to be the public parameter. In order
for the prover to demonstrate that a certain value commit-
ted in a commitment is within the range, the prover proves
in zero-knowledge that he/she knows a signature under the
veriﬁcation key for the element committed. This proof is of
constant size and is useful when the range is small.
3.3 Actual construction
SP Setup. The SP selects the revocation window K, judg-
ment window N , and the total number of categories J. The
SP further creates two instances of the BBS+ signatures
(P K1, SK1) and (P K2, SK2). The ﬁrst BBS+ signature in-
stance supports a message block of size K + J + 2 and the
second instance supports a message block of size J + 2.
The public parameter is (P K1, P K2, K, N, J) together
with the judgment pointer jp and the current transaction
counter tc which are both initialized to zero.
The secret key is (SK1, SK2).
mj +(cid:80)K
Registration. The user randomly picks two values x(cid:48), q ∈R
Zp and prepares a queue of size K + J + 2 as Q =
(x(cid:48), q, 0, . . . , 0).
The user computes C(x(cid:48)), C(q) and sends them to the SP.
The SP randomly picks another random number x(cid:48)(cid:48) ∈R Zp
and computes C(x(cid:48) + x(cid:48)(cid:48)). The value x(cid:48)(cid:48) is sent to the user.
The user computes x = x(cid:48) + x(cid:48)(cid:48) and sets the ﬁrst element of
his queue Q to x. The value x is used as his long-term secret
key. Note that this is possible due to the homomorphic
property of the commitment scheme.
tion policy P = (cid:87)(cid:96)
The user and SP engage in the protocol SIss of the BBS+
signature scheme with public key P K1. Upon successful
completion of the protocol, the user obtains a signature σQ
on his queues Q. The user stores (σQ, x, q).
Authentication. The user is in possession of σQ on his
queue Q = (x, q, m1, . . . , mJ , t1, . . . , tK ). The user down-
loads the latest list from the SP as well as the authentica-
j=1 Plj). Each Plj is of the form
(ζlj, ηlj) and requires the user’s reputation in category j to
be within the range (ζlj, ηlj). The list L is a list of jp en-
tries (i, s1,i, . . . , sJ,i, σi)jp
i=1, where σi is a BBS+ signature
on the tuple (i, s1,i, . . . , sJ,i) under P K2. sj,i is the score of
transaction with identiﬁer i in category j.
l=1((cid:86)J
The user computes his reputation in category j as Rj =
a=1,ta≤jp sj,ta and checks that there exists an index
l ∈ {1, . . . , (cid:96)} such that ζlj ≤ Rj ≤ ηlj. If yes, the user sat-
isﬁes the policy and computes the following commitments.
C(x), C(m1), . . . , C(mJ ), C(t1), . . . , C(tK )
Next, the user send q to the SP and employs SSig to show
that he has a signature σQ. This assures the SP the set of
commitments is computed correctly. The SP also checks the
freshness of q and stores it in the database.
{C(s1,ta ), . . . , C(sJ,ta )}K
of the following two statements is true for a = 1 to K:
set of commitments
a=1 to the SP, and proves that one
sends another
the user
Next
1. 1 ≤ (ta − jp) ≤ N and sj,ta = 0 for j = 1 to J;
2. The user has a signature σi on message block
(ta, s1,ta , . . . , sJ,ta ) and sj,ta = sj,i for all j = 1 to
J.
a=1
both
Next,
parties
compute
C(sj,ta ).
locally C(Rj)
The above proof assures the SP that C(sj,ta ) is the score
of the user’s authentication ta in category j.
C(mj)(cid:81)K
sub-clause of ((cid:86)J
=
The value C(Rj) is a commit-
ment of the user’s reputation in category j.
In order to
show that the user satisﬁes the boolean policy, the user
proves in zero-knowledge that the set {Rj}J
j=1 satisﬁes one
j=1 Plj) of the policy P, which states that:
∃l ∈ {1, . . . (cid:96)} : ζlj ≤ Rj ≤ ηlj for i = 1 to J. Proving
in zero-knowledge that ζlj ≤ Rj ≤ ηlj is accomplished by
the interval proof. We assume the scores are small so that
the interval proof discussed in Section 3 can be employed.
Further, since we are working in a cyclic group of prime
i=0 si < p to prevent the sum of
positive reputation scores from wrapping around and being
interpreted as negative. Combining the zero-knowledge
proofs in a 1-out-of-(cid:96) manner can be accomplished using
the technique described by Cramer et al. [14]. Thus, the
user can prove in zero-knowledge that the boolean policy is
satisﬁed.
order p, we assume (cid:80)tc
934Finally, the user randomly generates q(cid:48) ∈R Zp and com-
putes C(q(cid:48)). Using protocol SIss, the SP issues two signa-
tures to the user. The ﬁrst one is σQ(cid:48) which is a BBS+
signature on the queue Q(cid:48) = (x, q(cid:48), m1 + s1,t1 , . . . , mJ +
sJ,t1 , t2, . . . , tK , t). Note that t = tc is the value of the cur-
rent transaction counter.
SP adds
The SP also issues another BBS+ signature σx,t1 , which
is a signature on message (x, t1). The user stored this should
he want to use the free upgrade in the future. The SP in-
creases the value of tc by 1.
Scoring a transaction. The
entry
(jp, s1,jp, . . . , sJ,jp, σjp) after giving the appropriate score to
authentication j. Then the SP increases jp by 1.
Upgrading a score. After some time, the SP could in-
crease the scores for transaction identiﬁer t. Let’s say
the original score is s1,t, . . . , sJ,t and the updated score is
s(cid:48)
1,t, . . . , s(cid:48)
J,t. To conduct an upgrade, the user uses his cur-
rent secret σQ, which is a signature on his current queue
Q = (x, q, m1, . . . , mJ , t1, . . . , tK ) as well as a signature σx,t,
which he obtains when the transaction identiﬁer t shifts out
from his queue.
the
Similar to an authentication, the user releases q and pro-
duces the following commitments:
C(x), C(m1), . . . , C(mJ ), C(t1), . . . , C(tK ).
The SP checks the freshness of the value q and stores it in
its database.
The user proves to the SP in zero-knowledge that he has
σx,t and σQ using the protocol SSig.
If the SP accepts
the proof, the user further randomly generates q(cid:48) ∈R Zp.
They then engage in the protocol SIss. Upon termination of
the protocol, the user obtains a signature σQ(cid:48) on messages
j,t−sj,t.
(x, q(cid:48), m1 +d1, . . . , mJ +dJ , t1, . . . , tK ), where dj = s(cid:48)
The SP marks the update as complete and no score update
request on this entry will be entertained.
3.4 Security of our construction
The security model for PERM, and the proof of security
for our construction is sketched in the Appendix.
4. QUANTITATIVE ANALYSIS
We now analyze the communication and computational
performance of PERM and show that PERM is the ﬁrst
practical and scalable scheme to support reputation-based
blacklisting. Note that for PEREA we assume the ‘PEREA
with Naughtiness’ extension [4], which adds some form of
reputation (albeit only negative reputation and the score
computed is only over the most recent revocation window).
4.1 Data transfer
Assume each score is of 5 bits and the maximum reputa-
tion of the user in any category is in a 10-bit range. Fur-
ther, assume the total number of authentications is less than
250 (an entirely reasonable assumption considering that the
total number of edits made to all pages in Wikimedia is
about 231.6). Following the parameters in BLACR [2], we
have Zp = 249 bits and elements in G1 and G2 are of size
320 and 944 bits. Each entry in the reputation list is of
868 + 5J bits, where J is the number of categories. Together
with the random challenge, the total downlink complexity is
6http://toolserver.org/~emijrp/wikimediacounter/
((868+5J)L+249) bits, where L is the size of the reputation
list, which is the value of jp in PERM. Further, assume we
have 5 categories. Each entry in the list is less than 1Kb.
Suppose the number of anonymous authentications per day
is 20,000 (this would correspond to about 1 in 5 edits on
Wikipedia being anonymous, which is what Au et al. as-
sume [2, §5.2]), a user would need to download 2.2MB of
data a day to keep its list up-to-date. The overhead of each
authentication is 0.2KB, which corresponds to the receipt
plus a signature on the new queue. Here we assume the pol-
icy is not changed frequently and is thus treated as part of
the public parameters.
The size of the uploaded proof by the user (with J = 5)
is (2K + 8 + 10(cid:96))*320 + (78K + 5(cid:96) + 27)*249 bits. Further,
assume (cid:96) = 5, K = 10, a proof is of constant size at 28KB.
Note that this is a conservative estimate, since further opti-
mizations are possible. For instance, one could replace the
commitment of an individual transaction identiﬁer with a
commitment of all in a single group element. We leave such
optimizations for future work, although, given that the size
is only 28KB, these may not be necessary.
The public parameter size is linear to the judgment win-
dow. Again, assume the total number of authentications per
day is 20,000 and that each authentication is to be judged
within one day and the public parameter size will be around
2MB. Even if the judgment window is computed over a week,
a one-time download of about 14MB is reasonable.
4.2 Computation
We now compare the performance of PERM at the SP and
the user. We compare PERM with BLACR and PEREA, as
those are the two closest schemes that support reputation-
based blacklisting with strong security properties.
We have identiﬁed the major operations for each of the
schemes as shown in Table 1. The symbols EN1 and EN2
represent the time cost of an exponentiation of a small expo-
nent to a random base without pre-processing and a range
exponent to a ﬁxed base with pre-processing modulo a large
RSA modulus, respectively. The symbols “E1”, “E2”, and
“ET” represent the time cost of a multi-based exponentia-
tion without pre-processing in the groups G1, G2, and GT ,
respectively. Likewise, “EP1”, “EP2”, and “EPT” represent
the time cost of an exponentiation with respect to a known
single base with pre-processing in the groups G1, G2, and
GT , respectively. Finally, P represents the time cost of a
bilinear pairing operation. Since these parameters are the
same as those in BLACR, we reuse the benchmarks from
BLACR [2, Table 3], which were obtained on a Lenovo X200s
with an Intel Core 2 Duo CPU L9400 and 4GB RAM run-
ning Windows Vista as the host.
For PERM the amount of computation at the user is
drastically reduced as compared to other schemes. In fact,
nearly all exponentiation operations at the user side are pre-
computable. Since the score of each transaction identiﬁer is
from a limited range (e.g. 5 bits), it is possible to pre-
compute commitments of all possible scores. At the same
time, the reputation is also from a limited range (e.g. 10
bits) and thus the range proof is pre-computable. The ﬁrst
move of the three-move, zero-knowledge proof can always be
pre-computed, and the last move of the proof only consists of
additions and subtractions in Zp. The only step that cannot