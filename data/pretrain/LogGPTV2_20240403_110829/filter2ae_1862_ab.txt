    HTTP/1.1 200 OK
    Connection: close
    Server: Apache
    Content-Length: 44
    It works!
因为这些没有存在变化的元素，那就直接复制上面的字符段开搜：
`"HTTP/1.1 200 OK Connection: close Server: Apache Content-Length: 44
It works!"`
当然因为这个Content-Length: 44 已经很唯一了，所以其实我们在简洁一下去掉后面的html内容，最终搜索语法如下：
`"HTTP/1.1 200 OK Connection: close Server: Apache Content-Length: 44"`
[https://www.zoomeye.org/searchResult?q="HTTP%2F1.1 200 OK Connection%3A close
Server%3A Apache Content-Length%3A
44"](https://www.zoomeye.org/searchResult?q=%22HTTP%2F1.1%20200%20OK%20Connection%3A%20close%20Server%3A%20Apache%20Content-Length%3A%2044%22)
![
](https://images.seebug.org/content/images/2020/08/309d92b9-3ceb-416b-8a30-6f919693a627.png-w331s)
### 3、Empire
相比Cobalt
Strike及Metasploit，可能Empire知名度稍微差那么一点点，不过目前也是有不少人在使用，在这里我需要说明一下我之前是没有用过这个东西的所以就不多做其他评价了，本文主要是介绍怎么通过ZoomEye去搜索这些框架，我这里不想现成单独去安装一个去获取指纹，那还有其他套路可以走？
这里我介绍一个很常用的套路：“从其他搜索引擎语法到ZoomEye搜索语法”。再此之前我留意到一个著名FireEye公司的研究者的的一个PPT[7]（这里需要说明下的是这个PPT的主题和本文其实一样的，本文的下面的一些研究的包括Empire等框架目标也是参考了这个PPT）另外顺带说一下题外八卦：
这个PPT里的主题和本文其实是一个主题，之前黑哥也在他的知识星球“黑科技”里吐槽过，大意是说他这个PPT里使用的套路尤其是Cobalt
Strike那部分是有参考了本文开始提到黑哥的那些研究内容的，而且全篇直接忽视了来自中国的ZoomEye，看来川普同学覆盖面还是很广的！
回归正题，在这个ppt里提到了一个Empire的shodan搜索语法：
http.html_hash:"611100469"  
[https://www.shodan.io/search?query=http.html_hash%3A"611100469"](https://www.shodan.io/search?query=http.html_hash%3A%22611100469%22)
这里利用的背后的原理也类似上面Metasploit
Meterpreter提到的问题，这里Empire是想伪装成为IIS服务器，但是因为使用空格、tab的区别导致跟真正的IIS页面不一致导致的，所以国外的研究人员都喜欢从比对这个角度去想办法。那么我们怎么从Shodan这个语法转化为ZoomEye的搜索语法呢？首先我们通过Shodan搜索结果找到如下banner：
    HTTP/1.0 200 OK
    Content-Type: text/html; charset=utf-8
    Content-Length: 682
    Cache-Control: no-cache, no-store, must-revalidate
    Pragma: no-cache
    Expires: 0
    Server: Microsoft-IIS/7.5
    Date: Wed, 19 Aug 2020 08:33:52 GMT
细心的人可以发现：真假IIS页面的主要区别在html里空格与tab的区别，那为什么你只关注http头呢？其实这个问题上面的例子就用过了那就是
"Content-Length: 682 "，页面内容长度变化都体现在http头Content-Length上，对于正常的IIS7的返回Content-Length 我们可以通过ZoomEye搜索:
`IIS7
[https://www.zoomeye.org/searchResult?q=IIS7](https://www.zoomeye.org/searchResult?q=%3Ctitle%3EIIS7%3C/title%3E)`
正常的为`"Content-Length: 689"`,
而且Empire的返回头的内容及顺序是相对固定的，IIS7本身很多设置相关而有变化，所以我们继续老套路提取http头特征：
`"HTTP/1.0 200 OK Content-Type: text/html; charset=utf-8 Content-Length: 682
Cache-Control: no-cache, no-store, must-revalidate Pragma: no-cache Expires:
0"`
[https://www.zoomeye.org/searchResult?q="HTTP%2F1.0 200 OK Content-Type%3A
text%2Fhtml%3B charset%3Dutf-8 Content-Length%3A 682 Cache-Control%3A no-cache%2C no-store%2C must-revalidate Pragma%3A no-cache Expires%3A
0"](https://www.zoomeye.org/searchResult?q=%22HTTP%2F1.0%20200%20OK%20Content-Type%3A%20text%2Fhtml%3B%20charset%3Dutf-8%20Content-Length%3A%20682%20Cache-Control%3A%20no-cache%2C%20no-store%2C%20must-revalidate%20Pragma%3A%20no-cache%20Expires%3A%200%22)
![
](https://images.seebug.org/content/images/2020/08/5e81c14f-9cf7-4dc0-9168-90b10c44350b.png-w331s)
### 4、SpiderLabs Responder
这个目标同样来自于FireEye公司的研究者的PPT，关于SpiderLabs
Responder的介绍可以自行搜索或者访问项目主页：
这个框架字纹是由于http头里直接硬编码了Date:头[8]
    class IIS_Basic_401_Ans(Packet):
    fields = OrderedDict([
    ("Code", "HTTP/1.1 401 Unauthorized\r\n"),
    ("ServerType", "Server: Microsoft-IIS/6.0\r\n"),
    ("Date", "Date: Wed, 12 Sep 2012 13:06:55 GMT\r\n"),
    ("Type", "Content-Type: text/html\r\n"),
    ("WWW-Auth", "WWW-Authenticate: Basic realm=\"Authentication Required\"\r\n"),
    ("PoweredBy", "X-Powered-By: [ASP.NET](http://asp.net/)\r\n"),
    ("AllowOrigin", "Access-Control-Allow-Origin: *\r\n"),
    ("AllowCreds", "Access-Control-Allow-Credentials: true\r\n"),
    ("Len", "Content-Length: 0\r\n"),
    ("CRLF", "\r\n"),
    ])
从上面的案例或者正常情况来看Date是变化的，可以直接搜索：
`"Date: Wed, 12 Sep 2012 13:06:55 GMT"`
[https://www.zoomeye.org/searchResult?q="Date%3A Wed%2C 12 Sep 2012
13%3A06%3A55
GMT"](https://www.zoomeye.org/searchResult?q=%22Date%3A%20Wed%2C%2012%20Sep%202012%2013%3A06%3A55%20GMT%22)
这里需要注意的是在FireEye那个PPT里强调了"HTTP/1.1 401
Unauthorized",不过在我看来这个是没有必要的，在我看来这个Date:硬编码能撞上的几率那是非常小的，SpiderLabs
Responde是个开源项目，很可能有其他变种或者参考代码的项目，于是我在github上搜索了下确实找到不少：[https://github.com/search?q="Date%3A+Wed%2C+12+Sep+2012+13%3A06%3A55+GMT"&type=Code](https://github.com/search?q=%22Date%3A+Wed%2C+12+Sep+2012+13%3A06%3A55+GMT%22&type=Code)
大部分属于代理中间人框架。
![
](https://images.seebug.org/content/images/2020/08/28903f3e-8938-43bf-9e50-0d837319f02c.png-w331s)
### 5、PoshC2
PoshC2 是基于powershell开发的C2代理框架，介绍详见：
我们这里从另外一个使用网络空间搜索引擎的常用套路：“证书搜索”，在github项目主页搜索Certificate 后找到
代码：
    Certificate Options
    Cert_C = "US"
    Cert_ST = "Minnesota"
    Cert_L = "Minnetonka"
    Cert_O = "Pajfds"
    Cert_OU = "Jethpro"
    Cert_CN = "P18055077"
    Cert_SerialNumber = 1000
    Cert_NotBefore = 0
    Cert_NotAfter = (10 * 365 * 24 * 60 * 60)
看到"P18055077"这个很特别，直接使用ZoomEye证书搜索语法：
`ssl:"P18055077"`
[https://www.zoomeye.org/searchResult?q=ssl:"P18055077"](https://www.zoomeye.org/searchResult?q=ssl:%22P18055077%22)
![
](https://images.seebug.org/content/images/2020/08/a9011638-ace2-4847-8fa9-ebc9144d0030.png-w331s)
这里顺带提一句：证书搜索很可能出现覆盖不全的情况，这个例子里本身搜索出来的结果不太多所以不是很明显，所以遇到其他的例子可以先通过证书搜索的到返回的banner后，再根据提取banner特征去搜索匹配。
### 总结
1、主动扫描探测及网络空间搜索引擎可以协助我们追踪识别各种攻击者痕迹，也非常认同黑哥提出来的“动态测绘”的观点，通过动态测绘关联各种数据可以更加完善攻击者画像，比如上文里介绍的几个框架都是历史上多个APT组织使用过的框架。目前从火眼等多个公司的文章来看，有更多的安全关注到主动扫描及网络空间搜索引擎在APT追踪领域的应用。
2、对于红队来说应该注意到C2服务器的安全，尤其这些渗透攻击框架的默认配置需要做修改，以免被主动扫描追踪。
3、对于蓝队来说网络空间搜索引擎也是威胁情报的来源之一，我们能提前获取某些C2 IP并监控拉黑，或许有意想不到的发现。
### 参考
[1] [Identifying Cobalt Strike team servers in the wild by using
ZoomEye](https://medium.com/@80vul/identifying-cobalt-strike-team-servers-in-the-wild-by-using-zoomeye-debf995b6798)
[2] [Identifying Cobalt Strike team servers in the wild by using ZoomEye(Part
2)](https://medium.com/@80vul/identifying-cobalt-strike-team-servers-in-the-wild-by-using-zoomeye-part-2-acace5cc612c)
[3] [Identifying Cobalt Strike team servers in the wild](https://blog.fox-it.com/2019/02/26/identifying-cobalt-strike-team-servers-in-the-wild/)
[4] [Analysing meterpreter payload with
Ghidra](https://isc.sans.edu/forums/diary/Analysing+meterpreter+payload+with+Ghidra/24722/)
[5] 
[6]
[7] 
[8] 
* * *