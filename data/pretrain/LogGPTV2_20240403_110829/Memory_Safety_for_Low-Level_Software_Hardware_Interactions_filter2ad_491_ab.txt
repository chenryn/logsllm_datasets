from a signal handler requires undoing the modi(cid:2)cations
made by signal delivery. The veri(cid:2)er must be able to dis-
tinguish legal from illegal changes to saved state.
2.2 Corrupting Stack State
The kernel directly manages the stacks of both user and
kernel threads; it allocates and deallocates memory to
hold them, sets up initial stack frames for new threads
and signal handlers, and switches between stacks during
a context switch or interrupt/system call return.
Memory for the stack is obtained from some standard
memory allocation. Several safety violations are possible
through this allocated memory. First, the memory for the
stack should only be used for stack frames created during
normal function calls and not directly modi(cid:2)ed via arbi-
trary stores;3 such stores could corrupt the stack frames
and thus compromise safety. Second, the memory for the
stack must not be deallocated and reused for other mem-
ory objects while the stack is still in use. Third, a context
switch must switch to a stack and its corresponding saved
processor state as a pair; a context switch should not load
processor state with the wrong stack or with a stack that
has been deallocated. Fourth, after a stack is deallocated,
live pointers to local variables allocated on the stack must
not be dereferenced (the exiting thread may have stored
pointers to such objects into global variables or the heap
where they are accessible by other threads).
2.3 Corrupting Memory-Mapped I/O
Most systems today use memory-mapped I/O for con-
trolling I/O devices and either memory-mapped I/O or
DMA for performing data transfers. Many hardware ar-
chitectures treat regular memory and memory-mapped
I/O device memory (hereafter called I/O memory) iden-
tically, allowing a single set of hardware instructions to
access both. From a memory safety perspective, how-
ever, it is better to treat regular memory and I/O memory
as disjoint types of memory that are accessed using dis-
tinct instructions. First, I/O memory is not semantically
the same as regular memory in that a load may not re-
turn the value last stored into the location; program anal-
ysis algorithms (used to enforce and optimize memory
safety [15]) are not sound when applied to such mem-
ory. Second, I/O memory creates side-effects that regu-
lar memory does not. While erroneously accessing I/O
memory instead of regular memory may not be a mem-
ory safety violation per se, it is still an error with po-
tentially dire consequences. For example, the e1000e
bug [9] caused fatal damage to hardware when an in-
struction (cmpxchg) that was meant to write to mem-
ory erroneously accessed memory-mapped I/O registers,
which has unde(cid:2)ned behavior. Therefore, for soundness
of regular memory safety and for protection against a se-
rious class of programming errors, it is best to treat reg-
ular memory and I/O memory as disjoint.
2.4 Corrupting Code
Besides the general memory corruption violations de-
scribed below, there are only two ways in which the con-
tents of code pages can be (or appear to be) corrupted.
One is through self-modifying code (SMC); the other is
through incorrect program loading operations (for new
code or loadable kernel modules).
3An exception is when Linux stores the process’s task structure at
the bottom of the stack.
Self-modifying code directly modi(cid:2)es the sequence of
instructions executed by the program. This can modify
program behavior in ways not predicted by the compiler
and hence bypass any of its safety checking techniques.
For these reasons, most type-safe languages prohibit self-
modifying code (which is distinct from (cid:147)self-extending(cid:148)
behaviors like dynamic class loading). However, mod-
ern kernels use limited forms of self-modifying code
for operations like enabling and disabling instrumenta-
tion [9] or optimizing synchronization for a speci(cid:2)c ma-
chine con(cid:2)guration [8]. To allow such optimizations, the
veri(cid:2)er must de(cid:2)ne limited forms of self-modifying code
that do not violate the assumptions of the safety checker.
Second, the veri(cid:2)er must ensure that any program
loading operation is implemented correctly. For ex-
ample, any such operation, including new code, self-
modifying code, or self-extending code (e.g., loadable
kernel modules) requires (cid:3)ushing the instruction cache.
Otherwise, cached copies of the old instructions may be
executed out of the I-cache (and processors with split in-
struction/data caches may even execute old instructions
with fresh data). This may lead to arbitrary memory
safety violations for the kernel or application code.
2.5 General Memory Corruption
Finally, there are three kinds of kernel functionality that
can corrupt arbitrary memory pages: (1) MMU con(cid:2)gu-
ration; (2) page swapping; and (3) DMA. Note that errors
in any of these actions are generally invisible to a safety
checking compiler and can violate the assumptions made
by the compiler, as follows.
First, the kernel can violate memory safety with di-
rect operations on virtual memory. Fundamentally, most
of these are caused by creating an incorrect virtual-to-
physical page mapping. Such errors include modifying
mappings in the range of kernel stack memory, mapping
the same physical page into two virtual pages (uninten-
tionally), and changing a virtual-to-physical mapping for
a live virtual page. As before, any of these errors can
occur even with a type-safe language.
A second source of errors is in page swapping. When
a page of data is swapped in on a page fault, memory
safety can be violated if the data swapped in is not iden-
tical to the data swapped out from that virtual page. For
example, swapping in the wrong data can cause invalid
data to appear in pointers that are stored in memory.
Finally, a third source of problems is DMA. DMA
introduces two problems. First, a DMA con(cid:2)guration
error, device driver error, or device (cid:2)rmware error can
cause a DMA transfer to overwrite arbitrary physical
memory, violating type-safety assumptions. Second,
even a correct DMA transfer may bring in unknown data
which cannot be used in a type-safe manner, unless spe-
cial language support is added to enable that, e.g., to
prevent such data being used as pointer values, as in the
SPIN system [21].
3 Design Principles
We now describe the general design principles that a
memory safe system can use to prevent the memory er-
rors described in Section 2. As described earlier, we as-
sume a safety checker already exists that creates a safe
execution environment; the veri(cid:2)er is the set of exten-
sions to the safety checker that enforces the underlying
assumptions of the checker. Examples of safety checkers
that could bene(cid:2)t directly from such extensions include
SVA, SafeDrive, and XFI. We also assume that the kernel
source code is available for modi(cid:2)cation.
Processor State: Preventing the corruption of proces-
sor state involves solving several issues. First, the veri-
(cid:2)er must ensure that the kernel does not make arbitrary
changes to CPU registers. Most memory safe systems
already do this by not providing instructions for such
low-level modi(cid:2)cations. Second, the veri(cid:2)er must en-
sure that processor state saved by a context switch, in-
terrupt, trap, or system call is not accessed by mem-
ory load and store instructions. To do this, the veri(cid:2)er
can allocate the memory used to store processor state
within its own memory and allow the kernel to manipu-
late that state via special instructions that take an opaque
handle (e.g., a unique integer) to identify which saved
state buffer to use. For checkers like SVA and SafeDrive,
the safety checker itself prevents the kernel from manu-
facturing and using pointers to these saved state buffers
(e.g., via checks on accesses that use pointers cast from
integers). Additionally, the veri(cid:2)er should ensure that
the interface for context switching leaves the system in a
known state, meaning that a context switch should either
succeed completely or fail.
There are operations in which interrupted program
state needs to be modi(cid:2)ed by the kernel (e.g., signal han-
dler dispatch). The veri(cid:2)er must provide instructions
for doing controlled modi(cid:2)cations of interrupted pro-
gram state; for example, it can provide an instruction
to push function call frames on to an interrupted pro-
gram’s stack [11]. Such instructions must ensure that
either their modi(cid:2)cations cannot break memory safety
or that they only modify the saved state of interrupted
user-space programs (modifying user-space state cannot
violate the kernel’s memory safety).
Stack State: The memory for a kernel stack and for the
processor state object (the in-memory representation of
processor state) must be created in a single operation (in-
stead of by separate operations), and the veri(cid:2)er should
ensure that the kernel stack and processor state object
are always used and deallocated together. To ease imple-
mentation, it may be desirable to move some low-level,
error-prone stack and processor state object initialization
code into the veri(cid:2)er. The veri(cid:2)er must also ensure that
memory loads and stores do not modify the kernel stack
(aside from accessing local variables) and that local vari-
ables stored on the stack can no longer be accessed when
the kernel stack is destroyed.
Memory-mapped I/O: The veri(cid:2)er must require that
all I/O object allocations be identi(cid:2)able in the kernel
code, (e.g., declared via a pseudo-allocator). It should
also ensure that only special I/O read and write instruc-
tions can access I/O memory (these special instructions
can still be translated into regular memory loads and
stores for memory-mapped I/O machines) and that these
special instructions cannot read or write regular mem-
ory objects. If the veri(cid:2)er uses type-safety analysis to
optimize run-time checks, it should consider I/O objects
(objects analogous to memory objects but that reside in
memory-mapped I/O pages) to be type-unsafe as the de-
vice’s (cid:2)rmware may use the I/O memory in a type-unsafe
fashion. Since it is possible for a pointer to point to both
I/O objects and memory objects, the veri(cid:2)er should place
run-time checks on such pointers to ensure that they are
accessing the correct type of object (memory or I/O), de-
pending upon the operation in which the pointer is used.
Kernel Code: The veri(cid:2)er must not permit the kernel
to modify its code segment. However, it can support a
limited version of self-modifying code that is easy to im-
plement and able to support the uses of self-modifying
code found in commodity kernels.
In our design, the
kernel can specify regions of code that can be enabled
and disabled. The veri(cid:2)er will be responsible for replac-
ing native code with no-op instructions when the ker-
nel requests that code be disabled and replacing the no-
ops with the original code when the kernel requests the
code to be re-enabled. When analyzing code that can be
enabled and disabled, the veri(cid:2)er can use conservative
analysis techniques to generate results that are correct
regardless of whether the code is enabled or disabled.
For example, our pointer analysis algorithm, like most
other inter-procedural ones used in production compil-
ers, computes a may-points-to result [24], which can be
computed with the code enabled; it will still be correct,
though perhaps conservative, if the code is disabled.
To ensure that
the instruction cache is properly
(cid:3)ushed, our design calls for the safety checker to handle
all translation to native code. The safety checker already
does this in JVMs, safe programming languages, and in
the SVA system [10]. By performing all translation to
native code, the veri(cid:2)er can ensure that all appropriate
CPU caches are (cid:3)ushed when new code is loaded into
the system.
General Memory Corruption: The veri(cid:2)er must im-
plement several types of protection to handle the general
memory corruption errors in Section 2.5.
MMU con(cid:2)guration: To prevent MMU miscon(cid:2)gu-
ration errors, the veri(cid:2)er must be able to control ac-
cess to hardware page tables or processor TLBs and vet
changes to the MMU con(cid:2)guration before they are ap-
plied. Implementations can use para-virtualization tech-
niques [16] to control the MMU. The veri(cid:2)er must pre-
vent pages containing kernel memory objects from be-
ing made accessible to non-privileged code and ensure
that pages containing kernel stack frames are not mapped
to multiple virtual addresses (i.e., double mapped) or
unmapped before the kernel stack is destroyed.4 Veri-
(cid:2)ers optimizing memory access checks must also pro-
hibit double mappings of pages containing type known
objects; this will prevent data from being written into
the page in a way that is not detected by compiler anal-
ysis techniques. Pages containing type-unknown mem-
ory objects can be mapped multiple times since run-time
checks already ensure that the data within them does not
violate any memory safety properties. The veri(cid:2)er must
also ensure that MMU mappings do not violate any other
analysis results upon which optimizations depend.
Page swapping: For page swapping, the kernel must
notify the veri(cid:2)er before swapping a page out (if not, the
veri(cid:2)er will detect the omission on a subsequent physical
page remapping operation). The veri(cid:2)er can then record
any metadata for the page as well as a checksum of the
contents and use these when the page is swapped back in
to verify that the page contents have not changed.
DMA: The veri(cid:2)er should prevent DMA transfers from
overwriting critical memory such as the kernel’s code
segment, the veri(cid:2)er’s code and data, kernel stacks (aside
from local variables), and processor state objects. Im-
plementation will require the use of IOMMU techniques
like those in previous work [17, 36]. Additionally, if the
veri(cid:2)er uses type information to optimize memory safety
checks, it must consider the memory accessible via DMA
as type-unsafe. This solution is strictly stronger than pre-
vious work (like that in SPIN [21]): it allows pointer val-
ues in input data whereas they do not (and they do not
guarantee type safety for other input data).
Entry Points: To ensure control-(cid:3)ow integrity, the ker-
nel should not be entered in the middle of a function.
Therefore, the veri(cid:2)er must ensure that all interrupt, trap,
and system call handlers registered by the kernel are the
initial address of a valid function capable of servicing the
interrupt, trap, or system call, respectively.
4We assume the kernel does not swap stack pages to disk, but the
design can be extended easily to allow this.
4 Background: Secure Virtual
Architecture
The Secure Virtual Architecture (SVA) system (Figure 1)
places a compiler-based virtual machine between the
processor and the traditional software stack [10, 11]. The
virtual machine (VM) presents a virtual instruction set
to the software stack and translates virtual instructions
to the processor’s native instruction set either statically
(the default) or dynamically. The virtual instruction set
is based on the LLVM code representation [23], which is
designed to be low-level and language-independent, but
still enables sophisticated compiler analysis and transfor-
mation techniques. This instruction set can be used for
both user-space and kernel code [11].
SVA optionally provides strong safety guarantees for
C/C++ programs compiled to its virtual instruction set,
close to that of a safe language. The key guarantees are:
1. Partial type safety: Operations on a subset of data
are type safe.
2. Memory safety: Loads and stores only access the
object to which the dereferenced pointer initially
pointed, and within the bounds of that object.
3. Control (cid:3)ow integrity: The kernel code only follows
execution paths predicted by the compiler; this ap-
plies to both branches and function calls.
4. Tolerating dangling pointers: SVA does not detect
uses of dangling pointers but guarantees that they
are harmless, either via static analysis (for type-
safe data) or by detecting violations through run-
time checks (for non-type safe data).
5. Sound operational semantics: SVA de(cid:2)nes a virtual
instruction set with an operational semantics that is
guaranteed not to be violated by the kernel code;
sound program analysis or veri(cid:2)cation tools can be
built on this semantics.
Brie(cid:3)y, SVA provides these safety guarantees as fol-
lows. First, it uses a pointer analysis called Data Struc-
ture Analysis (DSA) [24] to partition memory into logi-
cal partitions ((cid:147)points to sets(cid:148)) and to check which parti-
tions are always accessed or indexed with a single type.
These partitions are called (cid:147)type-known(cid:148) (TK); the rest
are (cid:147)type-unknown(cid:148) (TU). SVA then creates a run-time
representation called a (cid:147)metapool(cid:148) for each partition.
It maintains a lookup table in each metapool of mem-
ory objects and their bounds to support various run-time
checks. Maintaining a table per metapool instead of a
single global table greatly improves the performance of
the run-time checks [14].
Compile-time analysis with DSA guarantees that all
TK partitions are type-safe. Moreover, all uses of data
Figure 1: System Organization with SVA [10]
and function pointers loaded out of TK partitions are
type safe. SVA simply has to ensure that dangling pointer
references to TK metapools cannot create a type vio-
lation by enforcing two constraints: (a) objects in TK
metapools are aligned identically; and (b) freed mem-
ory from such a metapool is never used for a different
metapool until the former is destroyed. These constraints
are enforced by modifying the kernel allocators manu-
ally during the process of porting the kernel to SVA; this
means that the allocators are effectively trusted and not
checked. To enforce these constraints for stack objects
belonging to TK metapools, SVA automatically modi(cid:2)es
the kernel code to allocate such objects on the heap. To-
gether, these guarantee that a pointer to a freed object and
a new object (including array elements) access values of
identical type [15].
At run-time, the SVA VM (thereafter called VM) per-