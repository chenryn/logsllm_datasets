2013.
[32] Chin-Chen Chang, Jyh-Jong Leu, Pai-Cheng Huang, and
Wei-Bin Lee. A scheme for obtaining a message from
the digital multisignature. In PKC’98, February 1998.
[33] Alexander Chepurnoy, Charalampos Papamanthou, and
Yupeng Zhang. Edrax: A cryptocurrency with stateless
transaction validation. Cryptology ePrint Archive, Report
2018/968, 2018. https://eprint.iacr.org/2018/968.
[34] Alessandro Chiesa, Yuncong Hu, Mary Maller, Pratyush
Mishra, Noah Vesely, and Nicholas P. Ward. Marlin:
Preprocessing zkSNARKs with universal and updatable
SRS. In EUROCRYPT 2020, Part I, May 2020.
[35] Alessandro Chiesa, Dev Ojha, and Nicholas Spooner.
Fractal: Post-quantum and transparent recursive proofs
from holography. In EUROCRYPT 2020, Part I, May
2020.
[36] Craig Costello, Cédric Fournet, Jon Howell, Markulf
Kohlweiss, Benjamin Kreuter, Michael Naehrig, Bryan
Parno, and Samee Zahur. Geppetto: Versatile veriﬁable
computation. In 2015 IEEE Symposium on Security and
Privacy, May 2015.
[37] Phil Daian, Rafael Pass, and Elaine Shi. Snow white:
Robustly reconﬁgurable consensus and applications to
provably secure proof of stake. In FC 2019, February
2019.
[38] Bernardo David, Peter Gazi, Aggelos Kiayias, and
Alexander Russell. Ouroboros praos: An adaptively-
secure, semi-synchronous proof-of-stake blockchain. In
EUROCRYPT 2018, Part II, April / May 2018.
[39] Yvo Desmedt. Society and group oriented cryptography:
A new concept. In CRYPTO’87, August 1988.
[40] Yvo Desmedt and Yair Frankel. Threshold cryptosystems.
In CRYPTO’89, August 1990.
[41] Yvo Desmedt and Yair Frankel. Shared generation of
In
authenticators and signatures (extended abstract).
CRYPTO’91, August 1992.
[42] Jack Doerner, Yashvanth Kondi, Eysa Lee, and abhi
shelat. Secure two-party threshold ECDSA from ECDSA
assumptions. In 2018 IEEE Symposium on Security and
Privacy, May 2018.
[43] Manu Drijvers, Kasra Edalatnejad, Bryan Ford, Eike
Kiltz, Julian Loss, Gregory Neven, and Igors Stepanovs.
On the security of two-round multi-signatures. In 2019
IEEE Symposium on Security and Privacy, May 2019.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:28 UTC from IEEE Xplore.  Restrictions apply. 
638
May 1992.
[62] Yuichi Komano, Kazuo Ohta, Atsushi Shimbo, and Shin-
ichi Kawamura. Formal security model of multisigna-
tures. In ISC 2006, August / September 2006.
[63] Russell W. F. Lai and Giulio Malavolta. Subvector
commitments with application to succinct arguments.
In CRYPTO 2019, Part I, August 2019.
[64] Susan K. Langford. Threshold DSS signatures without
a trusted party. In CRYPTO’95, August 1995.
[65] Duc-Phong Le, Alexis Bonnecaze, and Alban Gabillon.
Multisignatures as secure as the Diﬃe-Hellman problem
in the plain public-key model. In PAIRING 2009, August
2009.
[66] Chuan-Ming Li, Tzonelih Hwang, and Narn-Yih Lee.
Threshold-multisignature schemes where suspected
forgery implies traceability of adversarial shareholders.
In EUROCRYPT’94, May 1995.
[67] Benoît Libert, Somindu C. Ramanna, and Moti Yung.
Functional commitment schemes: From polynomial com-
mitments to pairing-based accumulators from simple
assumptions. In ICALP 2016, July 2016.
[68] Benoît Libert and Moti Yung. Concise mercurial vector
commitments and independent zero-knowledge sets with
short proofs. In TCC 2010, February 2010.
[69] libsodium: A modern, portable, easy to use crypto library.
https://github.com/jedisct1/libsodium.
[70] Yehuda Lindell. Fast secure two-party ECDSA signing.
In CRYPTO 2017, Part II, August 2017.
[71] Steve Lu, Rafail Ostrovsky, Amit Sahai, Hovav Shacham,
and Brent Waters. Sequential aggregate signatures and
In EURO-
multisignatures without random oracles.
CRYPT 2006, May / June 2006.
[72] Anna Lysyanskaya, Silvio Micali, Leonid Reyzin, and
Hovav Shacham. Sequential aggregate signatures from
trapdoor permutations. In EUROCRYPT 2004, May 2004.
[73] Mary Maller, Sean Bowe, Markulf Kohlweiss, and Sarah
Meiklejohn. Sonic: Zero-knowledge SNARKs from
linear-size universal and updatable structured reference
strings. In ACM CCS 2019, November 2019.
[74] Gregory Maxwell, Andrew Poelstra, Yannick Seurin, and
Pieter Wuille. Simple Schnorr multi-signatures with
applications to Bitcoin. Cryptology ePrint Archive,
Report 2018/068, 2018. https://eprint.iacr.org/2018/068.
[75] Ralph C. Merkle. A digital signature based on a
conventional encryption function. In CRYPTO’87, August
1988.
[76] Silvio Micali. CS proofs (extended abstracts). In 35th
FOCS, November 1994.
[77] Silvio Micali. Computationally sound proofs. SIAM J.
Comput., 30(4):1253–1298, 2000.
[78] Satoshi Nakamoto. Bitcoin: A peer-to-peer electronic
[44] Rachid El Bansarkhani and Jan Sturm. An eﬃcient
lattice-based multisignature scheme with applications to
bitcoins. In CANS 16, November 2016.
[45] Amos Fiat and Adi Shamir. How to prove yourself: Prac-
tical solutions to identiﬁcation and signature problems.
In CRYPTO’86, August 1987.
[46] Sadayuki Furuhashi et al. Messagepack: it’s like JSON,
but fast and small. https://msgpack.org/.
[47] Ariel Gabizon. AuroraLight: Improved prover eﬃciency
and SRS size in a sonic-like system. Cryptology ePrint
Archive, Report 2019/601, 2019. https://eprint.iacr.org/
2019/601.
[48] Ariel Gabizon, Zachary J. Williamson, and Oana Ciobo-
taru. PLONK: Permutations over Lagrange-bases for
oecumenical noninteractive arguments of knowledge.
Cryptology ePrint Archive, Report 2019/953, 2019.
https://eprint.iacr.org/2019/953.
[49] Rosario Gennaro, Craig Gentry, Bryan Parno, and Mar-
iana Raykova. Quadratic span programs and succinct
NIZKs without PCPs. In EUROCRYPT 2013, May 2013.
[50] Rosario Gennaro and Steven Goldfeder. Fast multiparty
threshold ECDSA with fast trustless setup. In ACM CCS
2018, October 2018.
[51] Rosario Gennaro, Steven Goldfeder, and Arvind
Narayanan. Threshold-optimal DSA/ECDSA signatures
and an application to bitcoin wallet security. In ACNS
16, June 2016.
[52] Rosario Gennaro, Stanislaw Jarecki, Hugo Krawczyk,
and Tal Rabin. Robust and eﬃcient sharing of RSA
functions. In CRYPTO’96, August 1996.
[53] Rosario Gennaro, Stanislaw Jarecki, Hugo Krawczyk, and
Tal Rabin. Secure applications of Pedersen’s distributed
key generation protocol. In CT-RSA 2003, April 2003.
[54] Craig Gentry, Adam O’Neill, and Leonid Reyzin. A uni-
ﬁed framework for trapdoor-permutation-based sequential
aggregate signatures. In PKC 2018, Part II, March 2018.
Identity-based
[55] Craig Gentry and Zulﬁkar Ramzan.
aggregate signatures. In PKC 2006, April 2006.
[56] Yossi Gilad, Rotem Hemo, Silvio Micali, Georgios
Vlachos, and Nickolai Zeldovich. Algorand: Scaling
In Pro-
byzantine agreements for cryptocurrencies.
ceedings of the 26th Symposium on Operating Systems
Principles, 2017.
[57] Sergey Gorbunov, Leonid Reyzin, Hoeteck Wee, and
Zhenfei Zhang. Pointproofs: Aggregating proofs for mul-
tiple vector commitments. In ACM CCS 20, November
2020.
[58] Jens Groth. On the size of pairing-based non-interactive
arguments. In EUROCRYPT 2016, Part II, May 2016.
[59] Thomas Hardjono and Yuliang Zheng. A practical digital
multisignature scheme based on discrete logarithms. In
AUSCRYPT’92, December 1993.
[60] Aniket Kate, Gregory M. Zaverucha, and Ian Goldberg.
Constant-size commitments to polynomials and their
applications. In ASIACRYPT 2010, December 2010.
[61] Joe Kilian. A note on eﬃcient zero-knowledge proofs
and arguments (extended abstract). In 24th ACM STOC,
cash system, 2009.
[79] Gregory Neven. Eﬃcient sequential aggregate signed
data. In EUROCRYPT 2008, April 2008.
[80] Kazuo Ohta and Tatsuaki Okamoto. A digital multisig-
In
nature scheme based on the Fiat-Shamir scheme.
ASIACRYPT’91, November 1993.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:28 UTC from IEEE Xplore.  Restrictions apply. 
639
[81] Alex Ozdemir, Riad S. Wahby, Barry Whitehat, and Dan
Boneh. Scaling veriﬁable computation using eﬃcient set
accumulators. In USENIX Security 2020, August 2020.
[82] Sangjoon Park, Sangwoo Park, Kwangjo Kim, and
Dongho Won. Two eﬃcient RSA multisignature schemes.
In ICICS 97, November 1997.
[83] Bryan Parno, Jon Howell, Craig Gentry, and Mariana
Raykova. Pinocchio: Nearly practical veriﬁable computa-
tion. In 2013 IEEE Symposium on Security and Privacy,
May 2013.
[84] Rafael Pass and Elaine Shi. Thunderella: Blockchains
with optimistic instant conﬁrmation. 2018.
[85] Torben P. Pedersen. A threshold cryptosystem without
a trusted party (extended abstract) (rump session). In
EUROCRYPT’91, April 1991.
[86] Secure hash standard. National Institute of Standards and
Technology, NIST FIPS PUB 180-4, U.S. Department
of Commerce, August 2015.
[87] Douglas R. Stinson and Reto Strobl. Provably secure
distributed Schnorr signatures and a (t, n) threshold
scheme for implicit certiﬁcates. In ACISP 01, July 2001.
[88] Steve Thakur. Batching non-membership proofs with
bilinear accumulators. Cryptology ePrint Archive, Report
2019/1147, 2019. https://eprint.iacr.org/2019/1147.
[89] Alin Tomescu, Ittai Abraham, Vitalik Buterin, Justin
Drake, Dankrad Feist, and Dmitry Khovratovich. Aggre-
gatable subvector commitments for stateless cryptocur-
rencies. In SCN 20, September 2020.
[90] Riad S. Wahby, Ioanna Tzialla, abhi shelat, Justin Thaler,
and Michael Walﬁsh. Doubly-eﬃcient zkSNARKs
In 2018 IEEE Symposium on
without trusted setup.
Security and Privacy, May 2018.
[91] Tiancheng Xie, Jiaheng Zhang, Yupeng Zhang, Char-
alampos Papamanthou, and Dawn Song. Libra: Succinct
zero-knowledge proofs with optimal prover computation.
In CRYPTO 2019, Part III, August 2019.
Appendix A
Using Merkle Trees Unambiguously
Merkle trees ensure that there is a unique decommitment for
every leaf position. However, the security goal of the vector
commitment Cattestors as well as of the Merkle tree with root
Rootsigs, is to ensure that there is a unique decommitment for
every index i. This goal can be achieved by ensuring that there
is an unambiguous mapping, enforced by the veriﬁer, between
indices and leaf positions. How to construct this mapping
depends on the tree structure and the veriﬁer’s knowledge. We
suggest the following options.
• The size of the vector should be included as part of the
commitment, and the tree structure should be ﬁxed for any
given size.
• Alternatively, if the tree structure is variable (which is
helpful when the tree is constructed dynamically), but we
can be sure that the commitment is computed by a trusted
party (we make that assumption on Cattestors), then the
640
data at each leaf can include its index, and the veriﬁer will
check that this index is equal to i.
• Finally, if the tree structure is variable and the commitment
is not trusted, then the mapping from indices to leaf
positions can be provided by another, trusted, commitment,
as long as the veriﬁer checks that this mapping is followed.
Thus, the tree structure for Rootsigs can simply parallel
the structure of the tree that computes Cattestors, and the
veriﬁer will check that the paths in the two trees are the
same for a given index (in addition to verifying that the
index matches in Cattestors, as per the previous item).
Appendix B
Computing numReveals efficiently
In order to compute the value
(cid:24)
(cid:25)
numReveals =
k + q
log2 (signedWeight/provenWeight)
(per analysis in Section V-B) while avoiding expensive precise
integer arithmetic or imprecise (and not always cross-platform
compatible) ﬂoating-point arithmetic, we may wish to use
approximate multiplication and exponentiation. Approximate
multiplication, described below, stores only the most signiﬁcant
bits of intermediate values (“mantissa”) and a second value
(“exponent”) representing the number of remaining, not stored,
bits. In this section we describe this method of computing
numReveals and analyze the error it produces.
Deﬁnition and Analysis of Approximate Multiplication
and Exponentiation: Suppose we are limited to multipli-
cation of integers less than 2w, where w is a power of 2
(e.g., w = 231 and thus multiplication is limited to 32-bit
integers and never produces an answer longer than 64 bits).
For a positive integer x, deﬁne [x]w (respectively, [x]w) as
follows: if x 
≈
provenWeightn · (1 − 1/w)2n
(1 + 1/w)2n
(provenWeight(1 + 4/w))n .
signedWeightn
signedWeightn
Therefore, the cost of this method is equivalent to the cost
of increasing provenWeight by a factor of approximately
(1 + 4/w). If we are using 32-bit integers, the cost of this
method is less than the cost of increasing provenWeight by
two parts per billion.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:28 UTC from IEEE Xplore.  Restrictions apply. 
641