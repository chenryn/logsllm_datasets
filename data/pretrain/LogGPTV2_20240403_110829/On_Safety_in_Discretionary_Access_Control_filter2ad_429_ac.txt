∨ control ∈ Mγ[i, s] then
Mγ0 [s, o] ← Mγ[s, o] − {r∗}
command destroy object(i, o)
if own ∈ Mγ[i, o] ∧ o 6∈ Sγ then
Oγ0 ← Oγ − {o}
command destroy subject(i, s)
if own ∈ Mγ[i, s] ∧ s ∈ Sγ then
∀ o ∈ Oγ, if own ∈ Mγ[s, o] then
Mγ0 [i, o] ← Mγ[i, o] ∪ {own}
Oγ0 ← Oγ − {s}
Sγ0 ← Sγ − {s}
Figure 1. The set of commands that constitutes the state-change rule, ψ, for a system based on
the Graham-Denning scheme. Each command has a name (e.g., transfer own), and a sequence of
parameters. The ﬁrst parameter is always named i, and is the initiator of the command, i.e., the
subject that executes the command. There is one transfer r, grant r, and delete r command for each
r ∈ Rψ ∩ Rb, and one transfer r∗, grant r∗, and delete r∗ command for each r∗ ∈ Rψ ∩ R∗b.
6
1 Subroutine isSafeGD(γ, ψ, ω,T )
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
/* inputs: γ, ψ, ω = hs, o, xi, T ⊆ S */
/* output: true or false */
if x ∈ R∗b then let y ← x
else if x 6= own ∧ x 6= control then let y ← x∗
else let y ← invalid /* No copy flags for own or control */
if x 6∈ Rψ then return true
if x = control ∧ o ∈ O − S then return true
if x ∈ Mγ[s, o] then return false
if y ∈ Mγ[s, o] then return false
if T ⊇ Sγ then return true
if o 6∈ Oγ then return false
for each sequence U, sn, . . . , s2, s1 such that
own ∈ Mγ[s1, o] ∧ · ·· ∧ own ∈ Mγ[sn, sn−1] ∧ own ∈ Mγ[u, sn] do
return true
if ∃bs ∈ Sγ − T such that y ∈ Mγ[bs, o] then return false
if ∃si ∈ {s1, . . . , sn} such that si ∈ Sγ − T then return false
Figure 2. The subroutine isSafeGD returns “true” if the system based on the Graham-Denning
scheme, characterized by the start-state, γ, and state-change rule, ψ, satisﬁes the safety property
with respect to ω and T . Otherwise, it returns “false”. In line 6, we assign some invalid value to y,
as there is not corresponding right with the copy ﬂag for the rights own and control. In this case,
the algorithm will not return in line 10 or 13. The subject u appears in line 15 only to emphasize
that the “chain” of ownership is terminal.
before we are able to decide whether the system is safe or
not. In lines 5-6, we consider the case that a subject may
have (or acquire) the right with the copy ﬂag. For this, we
need to exclude own and control from consideration, as
those rights do not have counterparts with the copy ﬂag.
We use the mnemonic invalid to indicate this. In line 7,
we check that the right x is indeed in the system. In line
8, we check whether we are being asked whether s can
get the control right over o, where o is an object that is
not a subject (we know s does not have and cannot get the
right, by property (2) of the seven properties we discuss
in the previous section). In line 9, we check whether the
right x has already been acquired by s over o. In line 10,
we check that if the right y has already been acquired by
s over o (the check in line 10 is needed when x ∈ Rb,
as then, the possession of x∗ implies the possession of x;
in the case that x ∈ R∗b, the lines 9 and 10 are identical).
When x = own or x = control, the condition of line 10
will never be true, and we will not return from that line.
In the remainder of the algorithm, we consider those cases
in which a state-change is needed before s can get x over
o (if it can at all). In line 11, we check whether there is
at least one subject that can initiate state-changes, and if
not, we know that the system is safe. In line 12, we check
whether o exists, and if it does not, given that there exists
a subject that can create o (from our check in line 11), the
subject can then grant x to s over o. In line 13, we check
whether there is a subject that can initiate state-changes,
and that has x with the copy-ﬂag (or x itself, if x ∈ R∗b).
If x = own or x = control, the condition of line 13
cannot be true. In lines 14-16, we check whether there is a
sequence of subjects with the particular property that each
owns the next in the sequence, and the last subject in the
sequence owns o. If any one of those subjects can initiate
state-changes, then we conclude that the system is not safe
and return false. In all other cases, we conclude that the
system is safe, and return true.
The following lemma asserts that the algorithm is cor-
rect. Theorem 2 summarizes our results with respect to
safety analysis in the Graham-Denning scheme.
is safe with respect
Lemma 1 A system based on the Graham-Denning
scheme, that is characterized by the start-state, γ, and
state-change rule, ψ,
to ω =
hs, o, xi and T ⊂ S (where T is ﬁnite) if and only if
isSafeGD(γ, ψ, ω,T ) returns true.
Proof. Sketch: the proof is quite lengthy, and we present
it in [15]. We present a sketch of the proof here. For
the “if” part, we need to show that if the system is not
safe with respect to ω and T , then isSafeGD returns false
on input (γ, ψ, ω,T ). If the system is not safe, then we
know that there exists a state-change sequence γ 7→ψ(s1)
γ1 7→ψ(s2) ··· 7→ψ(sn) γn, such that x ∈ Mγn[s, o]. If
such a sequence exists with n = 0, then this can only be
because s already has the right, and we show that in this
case the algorithm returns false. If n = 1, then the right
7
has to appear in Mγ1[s, o] in only one state-change, and
we show that in this case as well, the algorithm returns
false. For the general case, we use induction on n, with
n = 1 as the base case.
For the “only if” part, we need to show that if the algo-
rithm returns false, then the system is not safe with respect
to ω and T . We consider each case in which the algorithm
returns false (lines 9, 10, 12, 13 and 16). In each case,
we construct a state-change sequence such that in the ﬁnal
state of the sequence, γ0, x ∈ Mγ0 [s, o].
Theorem 2 Safety is efﬁciently decidable in a system
based on the Graham-Denning scheme.
In particular,
isSafeGD runs in time at worst cubic in the size of the
components of the start state and the set of rights in the
system.
Proof. We make the following observations about the
running time of isSafeGD in terms of its input, namely,
Sγ, Oγ, Rψ, Mγ[ ], ω and T , by considering each line in
the algorithm as follows. Each of the lines 5-10 runs in
time at worst linear in the size of the input.
In partic-
ular, as we mention in the previous section, we adopt a
naming convention for subjects and objects that enables
us to perform the check o ∈ O − S in line 8, in constant
time. Line 11 runs in time at worst quadratic in the size
of the input (|Sγ| × |T |), line 12 runs in time at worst
linear (|Oγ|), and line 13 runs in time at worst quadratic
(|Sγ|×|Rψ|). As each subject is owned only by one other
subject, each sequence to which line 14 refers is of size
at most |Sγ|. Furthermore, there are at most |Sγ| such se-
quences. Therefore, lines 14-16 run in time at worst cubic
in the size of the input. The fact that isSafeGD(γ, ψ, ω,T )
runs in time polynomial in the size of the input in conjunc-
.
tion with Lemma 1 proves our assertion.
We observe that cubic running time is only an upper-
bound, and is not necessarily a tight upper-bound on the
time-complexity of the algorithm. It may be possible, for
instance, to store the “chains” of owners in some auxiliary
data structure to get a faster running time.
5. The Solworth-Sloan Scheme, Revisited
Solworth and Sloan [27] present a new DAC scheme
based on labels and relabelling rules, and we call it the
Solworth-Sloan scheme. While the presentation in [27]
does not clearly specify what information is maintained in
a state and how states may change, we were able to infer
what is intended after considerable effort.
In this section, we give a precise characterization of
the Solworth-Sloan scheme as a state transition system.
Our objective in doing so is to represent the Solworth-
Sloan scheme sufﬁciently precisely to enable comparisons
to other DAC schemes. In particular, our intent is to as-
sess the mapping of DAC schemes to the Solworth-Sloan
scheme that is discussed by Solworth and Sloan [27]. Sol-
worth and Sloan [27] refer to the DAC schemes discussed
by Osborn et al. [21] and assert that they present a gen-
eral access control model which is sufﬁciently expressive
to implement each of these DAC models. In this section,
we show that this claim is incorrect.
We reiterate that the DAC schemes discussed by Os-
born et al. [21] are either subsumed by, or are minor ex-
tensions of the Graham-Denning scheme that we discuss
in Section 4. We have shown in Section 4.2 that safety is
efﬁciently decidable in the Graham-Denning scheme, and
our algorithm can be used with relatively minor modiﬁca-
tions to decide safety in these schemes. Thereby, Solworth
and Sloan’s [27] other assertion in reference to the DAC
schemes discussed by Osborn et al. [21], that “. . . every
published general access control model. . . either is insuf-
ﬁciently expressive to represent the full range of DACs or
has an undecidable safety problem. . . ”, has been rendered
invalid.
5.1. The Solworth-Sloan Scheme
Overview There exists the following countably inﬁnite
sets of constants:
• a set S of subjects
• a set O of objects
• a set R of rights
• a set G of groups
• a set T o of object tags
• a set T g of group tags
An object label is a pair hs, ti, where s ∈ S is a subject
and t ∈ T o is a object tag.
Which rights a subject has over a particular object are
determined indirectly in the following three steps.
1. There is a labelling function label that assigns an ob-
ject label to each object.
An object’s label may be changed by object rela-
belling rules, which determine whether an action
rewriting one object label into another succeeds or
not. For example, when the object label (cid:99)1 = hs1, t1i
is relabelled to (cid:99)2 = hs2, t2i, all objects that origi-
nally have the label (cid:99)1 now have the label (cid:99)2.
2. There is an authorization function auth that maps
each object label and each right to a group. For each
object label (cid:99) and each right r, members of the group
identiﬁed by auth((cid:99), r) have right r over objects that
are assigned the label (cid:99).
8
3. Which subjects are members of a group is determined
by native group sets (NGS’s), which are complicated
structures that we describe below. We deﬁne a func-
tion members that maps each group to a set of sub-
jects.
We schematically illustrate the steps to determine whether
a subject can access an object or not as follows.
objects label−→ object labels auth−→ groups members−→ subjects
States, Γ A state, γ,
is characterized by a 9-tuple
hSγ, Oγ, Rγ, Gγ, Lγ, labelγ, authγ, ORSγ, Eγi.
• Sγ is the set of subjects in the state γ; Oγ is the set
of objects in the state γ; Rγ is the set of rights in the
state γ, and Gγ is the set of groups in state γ.
There is a distinguished right wr, which exists in ev-
ery state, i.e., wr ∈ Rγ. The role of wr is explained
in our discussion of the state-change rules.
• Lγ ⊂ Sγ × T o is the ﬁnite set of object labels in the
state γ.
• labelγ : Oγ −→ Lγ assigns a unique object label to
each object in the current state.
• authγ : (Lγ × Rγ) −→ Gγ maps each pair of an
object label and a right to a group. For example,
authγ[(cid:99), re] = g1 means that the group g1 has the
re right over all objects labelled (cid:99).
• ORSγ is an ordered sequence of object relabelling
rules, each rule has the form of rl(p1, p2) = h, where
rl is a keyword, and p1, p2 are object patterns. An
object pattern is a pair, where the ﬁrst element is a
subject in S or one of the three special symbols ∗, ∗u,
and ∗w, and the second element is an object tag in T o
or the special symbol ∗. In the rule rl(p1, p2) = h, h
is a group, a subject, or one of the four following sets:
{},{∗},{∗u},{∗w}. When h is {∗u} (resp., {∗w}),
{∗u} (resp., {∗w}) must appear in p1 or p2.
For example, the following is an ORSγ, in which s1
is a subject, t1 is an object tag, and g1 is a group:
rl(h∗u, t1i, hs1,∗i) = g1
rl(hs1,∗i, h∗u, t2i) = {∗}
rl(h∗u,∗i, h∗u,∗i) = {∗u}
rl(h∗u,∗i, h∗w,∗i) = {}
a ﬁnite
native
that exist
Eγ
of
set
in the state, γ.
is
sets
• Eγ
(NGS’s)
Each
characterized by the 7-tuple
e
∈
he.G, e.T g, e.gtag, e.nt g, e.admin, e.patterns,
e.GRSi.
group