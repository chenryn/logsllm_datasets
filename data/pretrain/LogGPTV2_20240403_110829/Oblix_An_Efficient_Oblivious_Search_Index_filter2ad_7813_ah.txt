iii) workQueue.push(intersection.ptr).
iv) While workQueue is not empty:
A) Let ptr := workQueue.pop().
B) curNode := ODS.AccessS(mut stODS, read(ptr)).
C) If curNode  ﬁrst and curNode > last:
workQueue.push(curNode.lChild).
E) Else:
OSM.InsHelperS(mut st, k, v, ptr)
1) Let stODS := st.stODS.
2) if ptr (cid:7)= ⊥:
a) let curNode := ODS.AccessS(mut stODS, read(ptr)).
b) If k = curNode.key and v = curNode.value: return.
c) Else if k < curNode.key:
i) Let
(child, kc, size, keySize) = OSM.InsHelperS(mut st, k, v, curNode.lChild).
ii) If curNode.key = kc: curNode.lSize := size.
iii) If curNode.key = k: curNode.lSize := size; keySize := curNode.size.
iv) curNode.lChild := ptrc.
v) ODS.AccessS(mut stODS, write(ptr, curNode)).
vi) Return (BalanceS(mut st, curNode.key, ptr), keySize).
d) Else:
i) Let
(child, kc, size, keySize) = OSM.InsHelperS(mut st, k, v, curNode.rChild).
3) Else:
ii) If curNode.key = kc: curNode.rSize := size.
iii) If curNode.key = k: curNode.rSize := size; keySize := curNode.size.
iv) curNode.rChild := ptrc.
v) ODS.AccessS(mut stODS, write(ptr, curNode)).
vi) Return (BalanceS(mut st, curNode.key, ptr), keySize).
⎞
⎟⎠.
⎛
⎜⎝ Key k
a) Construct new node
node :=
lChild = ⊥
lSize = 0
leftHeight = 0
Value v
rChild = ⊥
rSize = 0
rightHeight = 0
workQueue.push(curNode.rChild);
workQueue.push(curNode.lChild).
v) If (ﬁrst ≤ curNode ≤ last) and (curNode.key = k):
b) st.treeSize = st.treeSize + 1.
c) Let ptrc ← ODS.AccessS(mut stODS, ins(node)).
d) (node.key, ptrc, node.size(), node.size())
result.push(curNode).
h) Return results.
3) Else, return empty list.
Figure 12
OSM.GetAtIndexS(mut st, k, i)
1) Let stODS := st.stODS.
2) Let curKey := st.rootKey.
3) Let ptr := st.ptrrt.
4) Initialize empty list path.
5) While curKey (cid:7)= ⊥:
a) Let curNode := ODS.AccessS(mut stODS, read(ptr)).
b) If the current node is a k-node, i.e. k = curKey:
i) If i = curNode.lSize():
A) path.Insert(curNode)
B) Break out of loop.
ii) Else if i < curNode.lSize():
A) curKey := curNode.leftKey().
B) ptr := curNode.lChild().
iii) Else:
A) curKey := curNode.rightKey().
B) ptr := curNode.rChild().
C) i := i − curNode.lSize() + 1.
Ignore non-k-nodes for indexing purposes.
c) Else if k < curKey:
i) curKey := curNode.leftKey().
ii) ptr := curNode.lChild().
d) Else:
i) curKey := curNode.rightKey().
ii) ptr := curNode.rChild().
e) path.Insert(curNode)
6) Return path.
Figure 13
Security
Init(m, [bli]
Read(bid)
n
1 ) store
SReal
st ← ORAM.InitS
ORAM.ReadBlockS
SIdeal
store
st ← Sim.InitS
(mut st, bid) Sim.ReadBlockS
n
1 )
(m, [bli]
(m, |bl1|)
(mut st)
Evict([lf i]
n
1 ) ORAM.EvictS
(mut st, [lf i]
n
1 )
Sim.EvictS
(mut st, n)
Figure 16: Real and ideal oracles for Path ORAM.
of Access calls to the oracle. The adversary is allowed to
observe the server accesses made by the oracles as a result of
these invocations. An ODS scheme is secure if the adversary
cannot distinguish between the two experiments.
APPENDIX D
CONSTRUCTION OF PATH DORAM
We expand upon our description of Path DORAM in
Section V-A by providing pseudocode for our construction
in Fig. 18.
Figure 14
implementing the ODS scheme, and another in which he
interacts with an oracle SIdeal that acts as a proxy to a simulator
Sim that only gets some of the inputs. Both oracles expose to
the adversary the same interface (see Fig. 17): the adversary
ﬁrst invokes the oracle on Init, and then makes any number
295
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:06 UTC from IEEE Xplore.  Restrictions apply. 
⎞
⎟⎟⎟⎠
⎛
⎜⎜⎜⎝
DS
[DSopj ]
s
1
m
[nodei]
irt
n
1
Init
Access(DSop)
Security
SReal
results in nodes [nodei]
n
1 with root at index irt.
1) Check that sequentially executing operations in [DSopj ]
2) Store (st, ptrrt) ← ODS.InitS
1) Start ODS: ODS.StartS
2)
Invoke the data structure DS on DSop, replacing plaintext
pointer accesses with corresponding ODS pointer accesses.
(mut st, ptrrt).
(m, [nodei]
n
1 , irt).
3) Let the current root node be node.
4) Store ptr
← ODS.Finalize(mut st, node, bound).
(cid:2)
rt
Figure 17: Real and ideal oracles for ODS.
SIdeal
s
1
Store st ← Sim.InitS
(m, |Node1|).
Sim.AccessS
(mut st, bound).
DORAM.ReadBlockS(mut st, bid, lf) → bl
1) Fetch from S the list of buckets Bu that are on the path to lf.
2) Let mut ans be a dummy block.
3) For each bucket bu ∈ Bu:
a) For each i ∈ {1, . . . , C}:
i) Let cond := (bu[i].bid = bid).
ii) OblSwap(cond, ans, bu[i])
b) Insert bu into st.ImplicitBuckets.
4) Insert ans into st.ExplicitBlocks and output ans.
DORAM.InitS(m, [bli]n
1 )
1) Let treeSize := ComputeTreeSize(m, C).
2) Let layer size (in buckets) s := (treeSize + 1)/2.
3) Initialize empty list of buckets buckets.
4) Initialize block list blocks := [bli]n
1 .
5) For each layer in the ORAM tree:
a) Let k := blocks.len().
b) Let D be a list of sC dummy blocks.
c) For the i-th chunk of C blocks in D, set the node of each block in this
chunk to be the i-th tree node in the current layer.
d) Append D to blocks (so that blocks.len() = k + sC).
e) Annotate each block in blocks with a boolean ﬂag indicating whether
or not it is dummy.
f) Obliviously prepare blocks for bucketing: obliviously sort blocks so
that all same-node blocks are grouped together, and within every such
group, dummy blocks are sorted to the end of the group. The groups
are sorted in ascending node order.
g) Let ctr := 0.
h) Let cur_node := ⊥.
i) For each bl in blocks, try to assign it to a bucket in current layer:
i) Let b := bl.node = cur_node.
ii) ctr := b · (ctr + 1).
iii) cur_node := bl.node.
iv) bl.in_bucket := ctr < C;
j) Obliviously collect all bucketed blocks together: obliviously sort
blocks so that blocks with in_bucket = false are last, and the remaining
blocks are sorted in ascending order of their node.
k) Construct s buckets from the ﬁrst sC blocks in blocks, and append
these to buckets.
l) Remove bucketed blocks: blocks := blocks[sC . . . sC + k].
m) For each remaining block bl in blocks, update its assigned node:
bl.node := bl.node.parent().
n) Update layer size: s := s/2.
6) Create ExplicitBlocks from the remaining blocks in blocks.
7) Encrypt and upload each bucket in buckets to S.
8) Output st := (ImplicitBuckets = ⊥, ExplicitBlocks).
1 ).
1 ).
S(st, [lfi]n
S(st, [lfi]n
S(mut st, [lfi]n
1 )
DORAM.EvictS(mut st, [lfi]n
1 )
1) If st.NumWrites = 0 (mod t): DORAM.Evicts
2) Else: DORAM.Evictf
3) Set st.NumWrites := st.NumWrites + 1.
DORAM.Evicts
1) Initialize blocks := st.ExplicitBlocks.
2) Append blocks (in each bucket) in st.ImplicitBuckets to blocks.
3) Let Nodes be the list of nodes comprising paths to [lfi]n
1 .
4) Initialize bucket fullness map BuFu so that for each node ∈ Nodes,
5) Assign blocks to buckets: for each block bl in blocks:
BuFu[node] = 0.
a) Let assigned_node := ⊥ and let assigned_ﬂag := 0.
b) For each node node in path to bl.lf:
i) Let is_free := (BuFu[node] (cid:7)= ⊥) ∧ (BuFu[node] < C).
ii) Let cond := is_free ∧ ¬ assigned_ﬂag.
iii) Increment BuFu[node] by cond.
iv) OblSwap(cond, assigned_node, node).
v) OblSwap(cond, assigned_ﬂag, 1).
c) Set bl.node := assigned_node.
(having node ⊥) to blocks.
with node ⊥ to the end.
6) Append dummy blocks: Append |ImplicitBuckets| · C dummy blocks
7) Construct buckets: obliviously sort blocks by bl.node, sorting blocks
8) From the ﬁrst |Nodes| · C elements of blocks, construct the buckets to
be written back. Truncate the remainder of blocks at at maximum stash
size, and insert these blocks into st.ExplicitBlocks.
S(mut st, [lfi]n
1 )
DORAM.Evictf
1) Let Nodes be the list of nodes comprising paths to [lfi]n
1 .
2) Initialize bucket fullness map BuFu so that for each node ∈ Nodes,
BuFu[node] = 0.
3) Assign blocks to buckets: for each block bl in st.ExplicitBlocks:
a) Let assigned_node := ⊥ and let assigned_ﬂag := 0.
b) For each node node in path to bl.lf:
i) Let is_free := BuFu[node] (cid:7)= ⊥ ∧ BuFu[node] < C.
ii) Let cond := is_free ∧ (assigned_ﬂag = 0).
iii) Increment BuFu[node] by cond.
iv) OblSwap(cond, assigned_node, node).
v) OblSwap(cond, assigned_ﬂag, 1).
c) Set bl.node := assigned_node.
4) Insert blocks into buckets:
5) Initialize empty list blocks.
6) Append all blocks in ExplicitBlocks to blocks.
7) For each bucket bu ∈ st.ImplicitBuckets:
a) For each block bl in bu:
i) Set bl.node := bu.node.
ii) Insert bl into blocks.
8) Construct buckets from blocks by oblivious sorting as in Evicts.
9) Write back constructed buckets to S, and insert any remaining blocks into
st.ExplicitBlocks.
Figure 18: Algorithms for Path doubly-oblivious RAM (for bucket size C).
296
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:06 UTC from IEEE Xplore.  Restrictions apply.