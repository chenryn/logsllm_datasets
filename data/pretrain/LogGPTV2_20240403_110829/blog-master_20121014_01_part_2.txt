LOG:  database system was not properly shut down; automatic recovery in progress  
LOG:  could not open file "pg_xlog/FFFFFFFF0000000000000000" (log file 0, segment 0): No such file or directory  
LOG:  redo is not required  
LOG:  autovacuum launcher started  
LOG:  database system is ready to accept connections  
```  
这些错误和TLI的值都没有关系, 时间线是在恢复结束后打开数据库时才会用到的, 自增长的一个值. 用来区分数据库是否是从备份中恢复过来的.  
XLOG文件  
```  
digoal@db-172-16-3-33-> pwd  
/home/digoal/pg_root/pg_xlog  
digoal@db-172-16-3-33-> ll  
total 33M  
drwx------ 2 digoal digoal 4.0K Jun 26 11:18 archive_status  
-rw------- 1 digoal digoal  16M Oct 14 16:20 FFFFFFFF0000000000000000  
-rw------- 1 digoal digoal  16M Oct 14 16:20 FFFFFFFFFFFFFFFF000000FF  
```  
显然, 文件名被rotate了( FFFFFFFF | 000000FF -> 00000000 | 00000000 ).  
2\. 系统函数  
在PostgreSQL中有一些系统函数  
可以用来查看当前插入或者写入的XLogRecPtr,   
STANDBY库上查看接收到的XLOG的XLogRecPtr或者是  
已经APPLY的XLOG的XLogRecPtr.   
又或者是比较两个XLogRecPtr之间的数据量.  
```  
pg_current_xlog_insert_location()  
pg_current_xlog_location()  
pg_start_backup(label text [, fast boolean ])  
pg_stop_backup()  
pg_xlogfile_name(location text)  
pg_xlog_location_diff(location text, location text)  
```  
源码如下 :   
src/backend/access/transam/xlogfuncs.c  
pg_current_xlog_insert_location()  
```  
00192 /*  
00193  * Report the current WAL insert location (same format as pg_start_backup etc)  
00194  *  
00195  * This function is mostly for debugging purposes.  
00196  */  
00197 Datum  
00198 pg_current_xlog_insert_location(PG_FUNCTION_ARGS)  
00199 {  
00200     XLogRecPtr  current_recptr;  
00201     char        location[MAXFNAMELEN];  
00202   
00203     if (RecoveryInProgress())  
00204         ereport(ERROR,  
00205                 (errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),  
00206                  errmsg("recovery is in progress"),  
00207                  errhint("WAL control functions cannot be executed during recovery.")));  
00208   
00209     current_recptr = GetXLogInsertRecPtr();  
00210   
00211     snprintf(location, sizeof(location), "%X/%X",  
00212              (uint32) (current_recptr >> 32), (uint32) current_recptr);  
00213     PG_RETURN_TEXT_P(cstring_to_text(location));  
00214 }  
```  
pg_current_xlog_location()  
```  
/*  
00167  * Report the current WAL write location (same format as pg_start_backup etc)  
00168  *  
00169  * This is useful for determining how much of WAL is visible to an external  
00170  * archiving process.  Note that the data before this point is written out  
00171  * to the kernel, but is not necessarily synced to disk.  
00172  */  
00173 Datum  
00174 pg_current_xlog_location(PG_FUNCTION_ARGS)  
00175 {  
00176     XLogRecPtr  current_recptr;  
00177     char        location[MAXFNAMELEN];  
00178   
00179     if (RecoveryInProgress())  
00180         ereport(ERROR,  
00181                 (errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),  
00182                  errmsg("recovery is in progress"),  
00183                  errhint("WAL control functions cannot be executed during recovery.")));  
00184   
00185     current_recptr = GetXLogWriteRecPtr();  
00186   
00187     snprintf(location, sizeof(location), "%X/%X",  
00188              (uint32) (current_recptr >> 32), (uint32) current_recptr);  
00189     PG_RETURN_TEXT_P(cstring_to_text(location));  
00190 }  
```  
pg_start_backup(label text [, fast boolean ])  
```  
00038 /*  
00039  * pg_start_backup: set up for taking an on-line backup dump  
00040  *  
00041  * Essentially what this does is to create a backup label file in $PGDATA,  
00042  * where it will be archived as part of the backup dump.  The label file  
00043  * contains the user-supplied label string (typically this would be used  
00044  * to tell where the backup dump will be stored) and the starting time and  
00045  * starting WAL location for the dump.  
00046  */  
00047 Datum  
00048 pg_start_backup(PG_FUNCTION_ARGS)  
00049 {  
00050     text       *backupid = PG_GETARG_TEXT_P(0);  
00051     bool        fast = PG_GETARG_BOOL(1);  
00052     char       *backupidstr;  
00053     XLogRecPtr  startpoint;  
00054     char        startxlogstr[MAXFNAMELEN];  
00055   
00056     backupidstr = text_to_cstring(backupid);  
00057   
00058     startpoint = do_pg_start_backup(backupidstr, fast, NULL);  
00059   
00060     snprintf(startxlogstr, sizeof(startxlogstr), "%X/%X",  
00061              (uint32) (startpoint >> 32), (uint32) startpoint);  
00062     PG_RETURN_TEXT_P(cstring_to_text(startxlogstr));  
00063 }  
```  
pg_stop_backup()  
```  
00065 /*  
00066  * pg_stop_backup: finish taking an on-line backup dump  
00067  *  
00068  * We write an end-of-backup WAL record, and remove the backup label file  
00069  * created by pg_start_backup, creating a backup history file in pg_xlog  
00070  * instead (whence it will immediately be archived). The backup history file  
00071  * contains the same info found in the label file, plus the backup-end time  
00072  * and WAL location. Before 9.0, the backup-end time was read from the backup  
00073  * history file at the beginning of archive recovery, but we now use the WAL  
00074  * record for that and the file is for informational and debug purposes only.  
00075  *  
00076  * Note: different from CancelBackup which just cancels online backup mode.  
00077  */  
00078 Datum  
00079 pg_stop_backup(PG_FUNCTION_ARGS)  
00080 {  
00081     XLogRecPtr  stoppoint;  
00082     char        stopxlogstr[MAXFNAMELEN];  
00083   
00084     stoppoint = do_pg_stop_backup(NULL, true);  
00085   
00086     snprintf(stopxlogstr, sizeof(stopxlogstr), "%X/%X",  
00087              (uint32) (stoppoint >> 32), (uint32) stoppoint);  
00088     PG_RETURN_TEXT_P(cstring_to_text(stopxlogstr));  
00089 }  
```  
pg_xlogfile_name(location text)  
```  
/*  
00345  * Compute an xlog file name given a WAL location,  
00346  * such as is returned by pg_stop_backup() or pg_xlog_switch().  
00347  */  
00348 Datum  
00349 pg_xlogfile_name(PG_FUNCTION_ARGS)  
00350 {  
00351     text       *location = PG_GETARG_TEXT_P(0);  
00352     char       *locationstr;  
00353     uint32      hi,  
00354                 lo;  
00355     XLogSegNo   xlogsegno;  
00356     XLogRecPtr  locationpoint;  
00357     char        xlogfilename[MAXFNAMELEN];  
00358   
00359     if (RecoveryInProgress())  
00360         ereport(ERROR,  
00361                 (errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),  
00362                  errmsg("recovery is in progress"),  
00363          errhint("pg_xlogfile_name() cannot be executed during recovery.")));  
00364   
00365     locationstr = text_to_cstring(location);  
00366   
00367     validate_xlog_location(locationstr);  
00368   
00369     if (sscanf(locationstr, "%X/%X", &hi, &lo) != 2)  
00370         ereport(ERROR,  
00371                 (errcode(ERRCODE_INVALID_PARAMETER_VALUE),  
00372                  errmsg("could not parse transaction log location \"%s\"",  
00373                         locationstr)));  
00374     locationpoint = ((uint64) hi) > 32), (uint32) current_recptr);  
```  
recptr 是 uint64的类型, 右移32位后转换成uint32相当于去uint64的高32位数字.  
recptr直接转换成uint32相当于取的recptr的低32位数字,   
所以输出的 :   
```  
digoal=# select pg_current_xlog_insert_location();  
 pg_current_xlog_insert_location   
---------------------------------  
 0/C1F1EA8  
(1 row)  
```  
recptr就是 :   
```  
0x000000000C1F1EA8  
digoal=# select pg_xlogfile_name('0/C1F1EA8');  
     pg_xlogfile_name       
--------------------------  
 00000001000000000000000C  
(1 row)  
```  
在这里0/C1F1EA8经过  
```  
locationpoint = ((uint64) hi) << 32 | lo;   
```  
后还原成XLogRecPtr类型, 也就是0x000000000C1F1EA8  
然后返回文件名, 还需要用到时间线ID.xlogsegno.  
```  
00376     XLByteToPrevSeg(locationpoint, xlogsegno);  
00377     XLogFileName(xlogfilename, ThisTimeLineID, xlogsegno);  
00378   
00379     PG_RETURN_TEXT_P(cstring_to_text(xlogfilename));  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")