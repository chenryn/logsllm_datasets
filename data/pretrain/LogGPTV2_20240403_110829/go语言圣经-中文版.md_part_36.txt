}
if sw, ok := w.(stringWriter); ok {
return sw.WriteString(s) // avoid a copy
}
return w.Write([]byte(s)) // allocate temporary copy
}
func writeHeader(w io.Writer, contentType string) error {
if _, err := writeString(w, "Content-Type: "); err != nil {
return err
}
if _, err := writeString(w, contentType); err != nil {
return err
}
// ...
}
为了避免重复定义，我们将这个检查移入到一个实用工具函数writeString中，但是它太有用了
以致标准库将它作为io.WriteString函数提供。这是向一个io.Writer接口写入字符串的推荐方
法。
这个例子的神奇之处在于没有定义了WriteString方法的标准接口和没有指定它是一个需要行为
的标准接口。而且一个具体类型只会通过它的方法决定它是否满足stringWriter接口，而不是
任何它和这个接口类型表明的关系。它的意思就是上面的技术依赖于一个假设；这个假设就
是，如果一个类型满足下面的这个接口，然后WriteString(s)就方法必须和Write([]byte(s))有相
同的效果。
interface {
io.Writer
WriteString(s string) (n int, err error)
}
尽管io.WriteString记录了它的假设，但是调用它的函数极少有可能会去记录它们也做了同样
的假设。定义一个特定类型的方法隐式地获取了对特定行为的协约。对于Go语言的新手，特
别是那些来自有强类型语言使用背景的新手，可能会发现它缺乏显式的意图令人感到混乱，
但是在实战的过程中这几乎不是一个问题。除了空接口interface{},接口类型很少意外巧合地被
实现。
上面的writeString函数使用一个类型断言来知道一个普遍接口类型的值是否满足一个更加具体
的接口类型；并且如果满足，它会使用这个更具体接口的行为。这个技术可以被很好的使用
不论这个被询问的接口是一个标准的如io.ReadWriter或者用户定义的如stringWriter。
通过类型断言查询接口 277
gopl
这也是fmt.Fprintf函数怎么从其它所有值中区分满足error或者fmt.Stringer接口的值。在
fmt.Fprintf内部，有一个将单个操作对象转换成一个字符串的步骤，像下面这样：
package fmt
func formatOneValue(x interface{}) string {
if err, ok := x.(error); ok {
return err.Error()
}
if str, ok := x.(Stringer); ok {
return str.String()
}
// ...all other types...
}
如果x满足这个两个接口类型中的一个，具体满足的接口决定对值的格式化方式。如果都不满
足，默认的case或多或少会统一地使用反射来处理所有的其它类型；我们可以在第12章知道
具体是怎么实现的。
再一次的，它假设任何有String方法的类型满足fmt.Stringer中约定的行为，这个行为会返回一
个适合打印的字符串。
通过类型断言查询接口 278
gopl
7.13. 类型开关
接口被以两种不同的方式使用。在第一个方式中，以io.Reader，io.Writer，fmt.Stringer，
sort.Interface，http.Handler，和error为典型，一个接口的方法表达了实现这个接口的具体类
型间的相似性，但是隐藏了代表的细节和这些具体类型本身的操作。重点在于方法上，而不
是具体的类型上。
第二个方式利用一个接口值可以持有各种具体类型值的能力并且将这个接口认为是这些类型
的union（联合）。类型断言用来动态地区别这些类型并且对每一种情况都不一样。在这个方
式中，重点在于具体的类型满足这个接口，而不是在于接口的方法（如果它确实有一些的
话），并且没有任何的信息隐藏。我们将以这种方式使用的接口描述为discriminated
unions（可辨识联合）。
如果你熟悉面向对象编程，你可能会将这两种方式当作是subtype polymorphism（子类型多
态）和 ad hoc polymorphism（非参数多态），但是你不需要去记住这些术语。对于本章剩下
的部分，我们将会呈现一些第二种方式的例子。
和其它那些语言一样，Go语言查询一个SQL数据库的API会干净地将查询中固定的部分和变
化的部分分开。一个调用的例子可能看起来像这样：
import "database/sql"
func listTracks(db sql.DB, artist string, minYear, maxYear int) {
result, err := db.Exec(
"SELECT * FROM tracks WHERE artist = ? AND ? 
Name Name
Attr []Attr
}
type EndElement struct { Name Name } // e.g., 
type CharData []byte // e.g., CharData
type Comment []byte // e.g., 
type Decoder struct{ /* ... */ }
func NewDecoder(io.Reader) *Decoder
func (*Decoder) Token() (Token, error) // returns next Token in sequence
这个没有方法的Token接口也是一个可识别联合的例子。传统的接口如io.Reader的目的是隐
藏满足它的具体类型的细节，这样就可以创造出新的实现；在这个实现中每个具体类型都被
统一地对待。相反，满足可识别联合的具体类型的集合被设计确定和暴露，而不是隐藏。可
识别的联合类型几乎没有方法；操作它们的函数使用一个类型开关的case集合来进行表述；
这个case集合中每一个case中有不同的逻辑。
示例: 基于标记的XML解码 282
gopl
下面的xmlselect程序获取和打印在一个XML文档树中确定的元素下找到的文本。使用上面的
API，它可以在输入上一次完成它的工作而从来不要具体化这个文档树。
gopl.io/ch7/xmlselect
示例: 基于标记的XML解码 283
gopl
// Xmlselect prints the text of selected elements of an XML document.
package main
import (
"encoding/xml"
"fmt"
"io"
"os"
"strings"
)
func main() {
dec := xml.NewDecoder(os.Stdin)
var stack []string // stack of element names
for {
tok, err := dec.Token()
if err == io.EOF {
break
} else if err != nil {
fmt.Fprintf(os.Stderr, "xmlselect: %v\n", err)
os.Exit(1)
}
switch tok := tok.(type) {
case xml.StartElement:
stack = append(stack, tok.Name.Local) // push
case xml.EndElement:
stack = stack[:len(stack)-1] // pop
case xml.CharData:
if containsAll(stack, os.Args[1:]) {
fmt.Printf("%s: %s\n", strings.Join(stack, " "), tok)
}
}
}
}
// containsAll reports whether x contains the elements of y, in order.
func containsAll(x, y []string) bool {
for len(y) <= len(x) {
if len(y) == 0 {
return true