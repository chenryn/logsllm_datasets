::: itemizedlist
**其他资源**
-   `update-crypto-policies(8)`{.literal} 手册页中的
    `自定义策略`{.literal} 部分和 `crypto-policies(7)`{.literal}
    手册页中的 `加密策略定义格式`{.literal} 部分
-   [如何在 RHEL
    中自定义加密策略](https://www.redhat.com/en/blog/how-customize-crypto-policies-rhel-82){.link}红帽博客
:::
:::
:::
[]{#configuring-applications-to-use-cryptographic-hardware-through-pkcs-11_security-hardening.html}
::: chapter
::: titlepage
# []{#configuring-applications-to-use-cryptographic-hardware-through-pkcs-11_security-hardening.html#configuring-applications-to-use-cryptographic-hardware-through-pkcs-11_security-hardening}第 4 章 通过 PKCS#11 将应用程序配置为使用加密硬件 {.title}
:::
在专用加密设备（如用于最终用户身份验证的智能卡和加密令牌以及用于服务器应用程序的硬件安全模块（HSM））上分离部分机密信息，可以提供额外的安全层。在
RHEL 中，通过 PKCS #11 API
对加密硬件的支持在不同的应用程序之间是一致的，并且加密硬件上的机密隔离不是一项复杂的任务。
::: section
::: titlepage
# []{#configuring-applications-to-use-cryptographic-hardware-through-pkcs-11_security-hardening.html#cryptographic-hardware-support-through-pkcs-11_configuring-applications-to-use-cryptographic-hardware-through-pkcs-11}通过 PKCS #11 的加密硬件支持 {.title}
:::
PKCS
#11(公钥加密标准)定义了一个应用程序编程接口(API)来保存加密信息并执行加密功能的加密设备。这些设备被称为令牌，它们可以以硬件或软件形式来实现。
PKCS #11
令牌可以存储各种对象类型，包括证书、数据对象以及公有、私有或机密密钥。这些对象可通过
PKCS #11 URI 方案来唯一识别。
PKCS #11 URI 是一种标准方法，其根据对象属性来识别 PKCS #11
模块中的特定对象。这可让您以 URI
格式，使用同样的配置字符串来配置所有的库和应用程序。
RHEL 默认为智能卡提供 OpenSC PKCS #11 驱动程序。但是，硬件令牌和 HSM
可以有自己的 PKCS #11 模块，这些模块在系统中没有对应项。您可以使用
`p11-kit`{.literal} 工具注册这些 PKCS #11
模块，该工具充当系统中注册的智能卡驱动程序的包装器
要使您自己的 PKCS #11 模块在系统上正常工作，请在
`/etc/pkcs11/modules/`{.literal} 目录中添加一个新的文本文件
您可以通过在 `/etc/pkcs11/modules/`{.literal}
目录中创建一个新的文本文件，来将自己的 PKCS #11
模块添加到系统。例如，`p11-kit`{.literal} 中的 OpenSC 配置文件如下所示：
``` screen
$ cat /usr/share/p11-kit/modules/opensc.module
module: opensc-pkcs11.so
```
::: itemizedlist
**其他资源**
-   [PKCS #11 URI 方案](https://tools.ietf.org/html/rfc7512){.link}
-   [控制对智能卡的访问](https://access.redhat.com/blogs/766093/posts/1976313){.link}
:::
:::
::: section
::: titlepage
# []{#configuring-applications-to-use-cryptographic-hardware-through-pkcs-11_security-hardening.html#using-ssh-keys-stored-on-a-smart-card_configuring-applications-to-use-cryptographic-hardware-through-pkcs-11}使用保存在智能卡中的 SSH 密钥 {.title}
:::
Red Hat Enterprise Linux 可让您使用保存在 OpenSSH 客户端智能卡中的 RSA
和 ECDSA 密钥。使用这个步骤使用智能卡而不是使用密码启用验证。
::: itemizedlist
**先决条件**
-   在客户端中安装了 `opensc`{.literal} 软件包，`pcscd`{.literal}
    服务正在运行。
:::
::: orderedlist
**流程**
1.  列出所有由 OpenSC PKCS #11 模块提供的密钥，包括其 PKCS #11
    URIs，并将输出保存到 [*key.pub*]{.emphasis} 文件：
    ``` screen
    $ ssh-keygen -D pkcs11: > keys.pub
    $ ssh-keygen -D pkcs11:
    ssh-rsa AAAAB3NzaC1yc2E...KKZMzcQZzx pkcs11:id=%02;object=SIGN%20pubkey;token=SSH%20key;manufacturer=piv_II?module-path=/usr/lib64/pkcs11/opensc-pkcs11.so
    ecdsa-sha2-nistp256 AAA...J0hkYnnsM= pkcs11:id=%01;object=PIV%20AUTH%20pubkey;token=SSH%20key;manufacturer=piv_II?module-path=/usr/lib64/pkcs11/opensc-pkcs11.so
    ```
2.  要使用远程服务器上的智能卡（[*example.com*]{.emphasis}）启用验证，将公钥传送到远程服务器。使用带有上一步中创建的
    [*key.pub*]{.emphasis} 的 `ssh-copy-id`{.literal} 命令：
    ``` screen
    $ ssh-copy-id -f -i keys.pub PI:EMAIL
    ```
3.  要使用在第 1 步的 `ssh-keygen -D`{.literal} 命令输出中的 ECDSA
    密钥连接到 [*example.com*]{.emphasis}，您只能使用 URI
    中的一个子集，它是您的密钥的唯一参考，例如：
    ``` screen
    $ ssh -i "pkcs11:id=%01?module-path=/usr/lib64/pkcs11/opensc-pkcs11.so" example.com
    Enter PIN for 'SSH key':
    [example.com] $
    ```
4.  您可以使用 `~/.ssh/config`{.literal} 文件中的同一 URI
    字符串使配置持久：
    ``` screen
    $ cat ~/.ssh/config
    IdentityFile "pkcs11:id=%01?module-path=/usr/lib64/pkcs11/opensc-pkcs11.so"
    $ ssh example.com
    Enter PIN for 'SSH key':
    [example.com] $
    ```
    因为 OpenSSH 使用 `p11-kit-proxy`{.literal} 包装器，并且 OpenSC PKCS
    #11 模块是注册到 PKCS#11 Kit 的，所以您可以简化前面的命令：
    ``` screen
    $ ssh -i "pkcs11:id=%01" example.com
    Enter PIN for 'SSH key':
    [example.com] $
    ```
:::
如果您跳过 PKCS #11 URI 的 `id=`{.literal} 部分，则 OpenSSH
会加载代理模块中可用的所有密钥。这可减少输入所需的数量：
``` screen
$ ssh -i pkcs11: example.com
Enter PIN for 'SSH key':
[example.com] $
```
::: itemizedlist
**其他资源**
-   [Fedora 28：在 OpenSSH
    中更好地支持智能卡](https://fedoramagazine.org/fedora-28-better-smart-card-support-openssh/){.link}
-   `p11-kit(8)`{.literal}, `opensc.conf(5)`{.literal},
    `pcscd(8)`{.literal}, `ssh(1)`{.literal}, 和
    `ssh-keygen(1)`{.literal} man pages
:::
:::
::: section
::: titlepage
# []{#configuring-applications-to-use-cryptographic-hardware-through-pkcs-11_security-hardening.html#configuring-applications-to-authenticate-using-certificates-from-smart-cards_configuring-applications-to-use-cryptographic-hardware-through-pkcs-11}配置应用程序以使用智能卡的证书进行身份验证 {.title}
:::
在应用程序中使用智能卡进行身份验证可能会提高安全性并简化自动化。
::: itemizedlist
-   `wget`{.literal}网络下载器可以让您指定 PKCS #11
    URI，而不是本地存储的私钥的路径，从而简化了为需要安全存储私钥和证书的任务创建脚本。例如：
    ``` screen
    $ wget --private-key 'pkcs11:token=softhsm;id=%01;type=private?pin-value=111111' --certificate 'pkcs11:token=softhsm;id=%01;type=cert' https://example.com/
    ```
    如需更多信息，请参阅 `wget(1)`{.literal} 手册页。
-   指定用于 `curl`{.literal} 工具的 PKCS #11 URI 类似如下：
    ``` screen
    $ curl --key 'pkcs11:token=softhsm;id=%01;type=private?pin-value=111111' --cert 'pkcs11:token=softhsm;id=%01;type=cert' https://example.com/
    ```
    如需更多信息，请参阅 `curl(1)`{.literal} 手册页。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    由于 PIN
    是一种安全措施，它控制对保存在智能卡中的密钥的访问，而配置文件中包含纯文本形式的
    PIN，因此请考虑采取额外的保护来防止攻击者读取 PIN。例如，您可以使用
    `pin-source`{.literal} 属性并提供 `file:`{.literal}从文件中读取 PIN
    的 URI。请参阅 [RFC 7512:PKCS #11 URI Scheme Query Attribute
    Semantics](https://datatracker.ietf.org/doc/html/rfc7512#section-2.4){.link}
    了解更多信息。请注意，不支持将命令路径用作 `pin-source`{.literal}
    属性的值。
    :::
-   `Firefox`{.literal} Web 浏览器会自动加载 `p11-kit-proxy`{.literal}
    模块。这意味着系统中的每个支持的智能卡都会被自动检测到。要使用 TLS
    客户端身份验证，不需要额外的设置，当服务器请求智能卡的密钥时，会自动使用它们。
:::
::: title
**在自定义应用程序中使用 PKCS #11 URI**
:::
如果您的应用程序使用 `GnuTLS`{.literal} 或 `NSS`{.literal} 库，则对 PKCS
#11 URI 的支持是通过它们对 PKCS #11的内置支持来保证的。此外，依赖于
`OpenSSL`{.literal} 库的应用程序还可以访问加密的硬件模块，这得益于
`openssl-pkcs11`{.literal} 引擎。
对于需要在智能卡上使用私钥且不使用 `NSS`{.literal}、`GnuTLS`{.literal}
和 `OpenSSL`{.literal} 的应用程序，请使用 `p11-kit`{.literal} 来实现注册
PKCS #11 模块。
::: itemizedlist
**其他资源**
-   `p11-kit(8)`{.literal} 手册页。
:::
:::
::: section
::: titlepage
# []{#configuring-applications-to-use-cryptographic-hardware-through-pkcs-11_security-hardening.html#ref_using-hsms-protecting-private-keys-in-apache_configuring-applications-to-use-cryptographic-hardware-through-pkcs-11}在 Apache 中使用 HSM 保护私钥 {.title}
:::
`Apache`{.literal} HTTP
服务器可以使用存储在硬件安全模块(HSM)上的私钥，这有助于防止密钥泄漏和中间人攻击。请注意，对于繁忙的服务器，这通常需要高性能的
HSM 。
对于 HTTPS 协议形式的安全通信，`Apache`{.literal} HTTP
服务器(`httpd`{.literal})使用 OpenSSL 库。OpenSSL 本身不支持 PKCS #11
。要使用 HSM，您必须安装 `openssl-pkcs11`{.literal}
软件包，它通过引擎接口提供对 PKCS #11 模块的访问。您可以使用 PKCS #11
URI 而不是常规文件名在 `/etc/httpd/conf.d/ssl.conf`{.literal}
配置文件中指定服务器密钥和证书，例如：
``` screen
SSLCertificateFile    "pkcs11:id=%01;token=softhsm;type=cert"
SSLCertificateKeyFile "pkcs11:id=%01;token=softhsm;type=private?pin-value=111111"
```
安装 `httpd-manual`{.literal} 软件包以获取 `Apache`{.literal} HTTP
服务器的完整文档，包括 TLS 配置。`/etc/httpd/conf.d/ssl.conf`{.literal}
配置文件中的指令在
[/usr/share/httpd/manual/mod_ssl.html](file:///usr/share/httpd/manual/mod/mod_ssl.html){.link}
中有详细介绍。
:::
::: section
::: titlepage
# []{#configuring-applications-to-use-cryptographic-hardware-through-pkcs-11_security-hardening.html#ref_using-hsms-protecting-private-keys-in-nginx_configuring-applications-to-use-cryptographic-hardware-through-pkcs-11}使用 HSM 保护 Nginx 中的私钥 {.title}
:::
`Nginx`{.literal} HTTP
服务器可以使用存储在硬件安全模块(HSM)上的私钥，这有助于防止密钥泄漏和中间人攻击。请注意，对于繁忙的服务器，这通常需要高性能的
HSM 。
因为 `Nginx`{.literal} 也使用 OpenSSL 进行加密操作，所以对 PKCS #11
的支持必须通过 `openssl-pkcs11`{.literal} 引擎。`nginx`{.literal}
目前只支持从 HSM 加载私钥，证书必须作为常规文件单独提供。修改
`/etc/nginx/nginx.conf`{.literal} 配置文件 `server`{.literal} 部分的
`ssl_certificate 和 `{.literal} ssl_certificate_key``{=html}
选项：
``` screen
ssl_certificate     /path/to/cert.pem
ssl_certificate_key "engine:pkcs11:pkcs11:token=softhsm;id=%01;type=private?pin-value=111111";
```
请注意，在 `Nginx`{.literal} 配置文件中，PKCS #11 URI 需要
`engine:pkcs 11:`{.literal} 前缀。这是因为其它 `pkcs11`{.literal}
前缀引用引擎名称。
:::
::: section
::: titlepage
# []{#configuring-applications-to-use-cryptographic-hardware-through-pkcs-11_security-hardening.html#related-information-configuring-applications-to-use-cryptographic-hardware-through-pkcs-11}其他资源 {.title}
:::
::: itemizedlist
-   `pkcs11.conf(5)`{.literal} 手册页。
:::
:::
:::
[]{#assembly_controlling-access-to-smart-cards-using-polkit_security-hardening.html}
::: chapter
::: titlepage
# []{#assembly_controlling-access-to-smart-cards-using-polkit_security-hardening.html#assembly_controlling-access-to-smart-cards-using-polkit_security-hardening}第 5 章 使用 polkit 控制对智能卡的访问 {.title}
:::
为了覆盖在智能卡中内置的机制（如 PIN、PIN pads 和
biometrics）无法阻止的可能威胁，RHEL 使用 `polkit`{.literal}
框架来控制对智能卡的访问控制。
系统管理员可以将 `polkit`{.literal}
配置为适合特定场景，如非特权或非本地用户或服务的智能卡访问。
::: section
::: titlepage
# []{#assembly_controlling-access-to-smart-cards-using-polkit_security-hardening.html#con_smart-card-access-control-through-polkit_assembly_controlling-access-to-smart-cards-using-polkit}通过 polkit 进行智能卡访问控制 {.title}