# 八、在 Java 中使用 Kubernetes
在[第 7 章](07.html)、*Kubernetes 家介绍*中，我们了解了 Kubernetes 家的建筑和概念。我们了解节点、Pods 和服务。在这一章中，我们将进行一些实际操作，并将我们的 Java REST 服务部署到本地 Kubernetes 集群中。出于学习目的，我们将使用 Minikube 工具在本地机器上创建一个集群。在本地机器上学习 Kubernetes 比一开始就去云上更容易。因为 Minikube 在本地运行，而不是通过云提供商运行，所以某些特定于提供商的功能，如负载平衡器和持久卷，将无法开箱即用。但是，您可以使用`NodePort`、`HostPath`、持久卷和几个插件(如域名系统)或仪表板在本地测试您的应用，然后再推送到真正的生产级集群。在[第 10 章](10.html)、*在云*中的 Kubernetes 上部署 Java，我们将使用**亚马逊 Web 服务** ( **AWS** )运行 Kubernetes，并在 Google 容器引擎中托管 Kubernetes。
接下来，我们需要准备好以下工具:
*   `Docker`:构建我们想要部署的 Docker 映像
*   `minikube`:当地的库本内斯环境
*   `kubectl`:Kubernetes 命令行界面
本章将涵盖以下主题:
*   在 macOS、Windows 和 Linux 上安装 Minikube
*   使用 Minikube 启动本地 Kubernetes 集群
*   在本地集群上部署 Java 应用
*   与容器交互:缩放、自动缩放和查看集群事件
*   使用 Kubernetes 仪表板
我假设到目前为止 Docker 已经启动并运行，那么让我们关注一下`minikube`实用程序。我们已经在[第七章](07.html)*中提到了`minikube`库本内斯介绍；*现在，我们将深入一些细节，从安装过程开始。
# 安装 Minikube
Minikube 工具的源代码和所有文档都可以在 https://github.com/kubernetes/minikube 的 GitHub 上获得。
# 在苹果电脑上安装
以下命令序列将下载`minikube`二进制文件，设置可执行标志并将其复制到`/usr/local/bin`文件夹，这将使其在 macOS shell 中可用:
```
$ curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.12.2/minikube-darwin-amd64
$ chmod +x minikube
$ sudo mv minikube /usr/local/bin/  
```
或者，如果您使用自制软件包管理器(可在 [https://brew.sh](https://brew.sh) 上免费获得)，顺便说一下，这非常方便，值得推荐，您只需键入以下内容即可安装`minikube`:
```
$ brew cask install minikube
```
# 在 Windows 上安装
Windows 的 Minikube 也只是一个可执行文件。你总能在迷你库的网站上找到最新的版本，在[https://github.com/kubernetes/minikube](https://github.com/kubernetes/minikube)。您只需要下载最新的可执行文件，将其重命名为`minikube.exe`，并将其放在您的系统路径中，以便可以从命令行获得它。
# 在 Linux 上安装
Linux 上的安装过程与 macOS 相同。唯一的区别是可执行文件的名称。以下命令将下载最新的 Minikube 版本，设置可执行位，并将其移动到`/usr/local/bin`目录:
```
$ curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
```
仅此而已，启动本地集群只需要一个 Minikube 和 Docker。是时候让它活起来了:
# 启动本地 Kubernetes 集群
我们正在使用`minikube`提供的本地 Kubernetes 集群。以下列方式启动集群:
```
$ minikube start 
```
Minikube 在自己的虚拟机上工作。根据您的主机操作系统，您可以在几种虚拟化驱动程序之间进行选择。目前支持的有`virtualbox`、`vmwarefusion`、`xhyve`、`hyperv`和`kvm` ( **基于内核的虚拟机**)。默认虚拟机驱动程序是虚拟机箱。您可以覆盖此选项。这是使用`xhyve`的 macOS 启动命令行示例:
```
$ minikube start --vm-driver=xhyve
```
第一次启动 Minikube 的时候，会看到它在下载 Minikube ISO，所以过程会稍微长一点。然而，这是一次性的行动。Minikube 配置将保存在您的`home`目录下的`.minikube`文件夹中，例如 Linux 或 macOS 上的`~/.minikube`。在第一次运行时，Minikube 还将配置`kubectl`命令行工具(我们稍后将回到这一点)来使用本地`minikube`集群。该设置称为`kubectl`上下文。它确定`kubectl`正在与哪个集群交互。所有可用的上下文都存在于`~/.kube/config`文件中。
由于集群现在正在运行，并且我们默认启用了`dashboard`插件，您可以使用以下命令查看(仍然是空的)Kubernetes 仪表板:
```
$ minikube dashboard
```
它将打开您的默认浏览器，其中包含集群仪表板的网址:
**![](img/0c0e3408-9934-47ef-a26e-eeebfae5bf46.png)**
如您所见，仪表板现在是空的。如果您浏览“名称空间”菜单，您会注意到 Minikube 创建了一些名称空间，其中用于我们的名称空间被简单地命名为默认名称空间。Minikube 安装的各个部分，如 DNS 或 Dashboard，也在集群本身上运行，具有独立的名称空间，如 kube-public 和 kube-system。
随意浏览菜单和部分；到目前为止，没有造成任何伤害，这是一个本地开发集群，目前没有运行任何东西。我们将在本章的最后一节回到仪表板，看看我们如何使用它从 nice UI 部署我们的服务，如果您喜欢这样做，而不是使用命令行的外壳。
当然，让集群空着运行是没有用的，所以我们需要一个工具来管理它。虽然我们几乎可以使用仪表板做任何事情，但是有一个命令行工具要方便得多。`kubectl`控制库本内斯星团。我们将大量使用`kubectl`命令行工具来部署、调度和扩展我们的应用和微服务。该工具是一个独立的二进制文件，适用于苹果电脑、Linux 和视窗系统。在下一节中，您将找到不同平台的安装说明。
# 安装 kubectl
`kubectl`适用于所有主要平台。让我们从安装 macOS 开始。
# 在苹果电脑上安装
以下命令序列将下载`kubectl`二进制文件，设置可执行标志，并将其复制到`/usr/local/bin`文件夹，使其在 macOS 外壳中可用:
```
$ curl -O https://storage.googleapis.com/kubernetes-release/release/v1.5.2
/bin/darwin/amd64/kubectl
$ chmod +x kubectl
$ sudo cp kubectl /usr/local/bin  
```
自制程序提供了最方便的方式来安装`kubectl`并保持更新。要安装，请使用以下命令:
```
$ brew install kubectl
```
要更新，请使用以下命令:
```
$ brew upgrade kubectl
```
# 在 Windows 上安装
你可以在[https://github.com/eirslett/kubectl-windows/releases](https://github.com/eirslett/kubectl-windows/releases)的 GitHub 上找到 Windows `kubectl`版本列表。与 Minikube 类似，kubectl 只是一个单独的`.exe`文件。写这本书的时候是[https://github . com/eir slett/kube CTL-windows/releases/download/v 1 . 6 . 3/kube CTL . exe](https://github.com/eirslett/kubectl-windows/releases/download/v1.6.3/kubectl.exe)。您需要下载`exe`文件并将其放入系统路径中，以便在命令行中使用。
# 在 Linux 上安装
同样，安装过程与 macOS 非常相似。以下命令将获取`kubectl`二进制文件，给它一个可执行标志，然后将其移动到`/usr/local/bin`以使其在 shell 中可用:
```
$ curl -O https://storage.googleapis.com/kubernetes-release/release/v1.5.2
/bin/linux/amd64/kubectl
$ chmod +x kubectl
$ sudo cp kubectl /usr/local/bin/kubectl  
```
要验证您的本地集群是否已启动并运行，以及`kubectl`是否已正确配置，请执行以下命令:
```
$ kubectl cluster-info       
```
在输出中，您将获得关于集群的基本信息，包括它的 IP 地址，以及运行 Minikube 插件(我们将在本章后面回到插件):
![](img/5314565e-a997-4eb3-ad0a-04b795327bec.png)
要列出集群中运行的节点，请执行`get nodes`命令:
```
$ kubectl get nodes      
```
当然，这只是一个单节点集群，因此在前面命令的输出中没有什么值得惊讶的:
![](img/a690fcf9-713b-43b1-8d42-5141063aa923.png)
我们的集群已启动并运行；是时候在上面部署我们的服务了。
# 在 Kubernetes 集群上部署
我们通过定义服务开始在 Kubernetes 集群上部署软件的过程。正如您从[第 7 章](07.html)*对 Kubernetes* 的介绍中所记得的，服务将一组 Pods 抽象为单个 IP 和端口，允许简单的 TCP/UDP 加载，并允许 Pods 列表动态变化。让我们从服务创建开始。
# 创建服务
默认情况下，每个 Pod 只能通过其在 Kubernetes 集群中的内部 IP 地址进行访问。为了使容器可以从 Kubernetes 虚拟网络外部访问，我们需要将 Pod 公开为 Kubernetes 服务。为了创建一个服务，我们将使用简单的`.yaml`文件，带有一个服务清单。YAML 是一种人类可读的数据序列化语言，通常用于配置文件。我们的 Java `rest-example`的一个示例服务清单可能如下所示:
```
apiVersion: v1
kind: Service
metadata:
 name: rest-example
 labels:
 app: rest-example
 tier: backend
spec:
 type: NodePort
 ports:
 - port: 8080
 selector:
 app: rest-example
 tier: backend
```
请注意，服务的清单并不引用 Docker 映像。这是因为，正如您从[第 7 章](07.html)、*对 Kubernetes* 的介绍中所记得的，Kubernetes 中的服务只是一个抽象，它为一个或多个 Pods 提供网络连接。每个服务都有自己的 IP 地址和端口，在服务的生命周期内保持不变。每个 Pod 需要有一个特定的标签，由服务发现，服务找到 Pod 进行分组使用和标签`selectors`。在我们前面的示例中，`selector`将拾取标签为`app`值为`rest-example`和标签为`tier`值为`backend`的所有 Pods:
```
selector:
 app: rest-example
 tier: backend
```
正如您从[第 7 章](07.html)*对 Kubernetes* 的介绍中所记得的，Kubernetes 集群中的每个节点都运行一个 kube 代理进程。kube 代理在 Kubernetes 服务中起着至关重要的作用。其目的是为他们暴露一个虚拟 IP。由于 Kubernetes 1.2，iptables 代理是默认的。您有两个选项可以用来设置代理:userspace 和 iptables。这些设置指的是实际处理连接转发的内容。在这两种情况下，都会安装本地 iptables 规则来拦截具有与服务相关联的目标 IP 地址的出站 TCP 连接。这两种模式之间有一个重要的区别:
*   `Proxy-mode: userspace`:在用户空间模式下，iptables 规则转发到一个本地端口，kube-proxy 正在该端口监听连接。运行在用户空间中的 kube 代理终止连接，为服务建立到后端的新连接，然后将请求转发到后端，并将响应返回给本地进程。用户空间模式的一个优点是，因为连接是从应用创建的，如果连接被拒绝，应用可以重试到不同的后端。
*   `Proxy-mode: iptables`:在这种模式下，iptables 规则被安装为直接将去往服务的数据包转发到该服务的后端。这比将数据包从内核转移到 kube-proxy，然后再转移回内核更有效，因此它会带来更高的吞吐量和更好的尾部延迟。然而，与用户空间模式不同，如果最初选择的 Pod 没有响应，使用 iptables 模式就不可能自动重试另一个 Pod，因此这取决于是否有工作就绪探测器。
如您所见，在这两种情况下，节点上都将运行 kube-proxy 二进制文件。在用户空间模式下，它将自己作为代理插入；在 iptables 模式下，它将配置 iptables，而不是自己代理连接。
服务类型可以具有以下值:
*   **节点端口**:通过指定`NodePort`的服务类型，我们声明在集群外公开服务。Kubernetes 主机将从标志配置的范围(`default: 30000-32767`)中分配一个端口，集群的每个节点将代理该端口(每个节点上的端口号相同)到您的服务中
*   **负载平衡器**:这将在支持外部负载平衡器的云提供商上创建负载平衡器(例如，在亚马逊 AWS 云上)。使用 Minikube 时，此功能不可用
*   **集群 IP** :这将只在集群内公开服务。这是默认值，如果您不提供其他值，将使用该值
准备好`service.yml`文件后，我们可以通过执行以下`kubectl`命令来创建第一个 Kubernetes 服务:
```