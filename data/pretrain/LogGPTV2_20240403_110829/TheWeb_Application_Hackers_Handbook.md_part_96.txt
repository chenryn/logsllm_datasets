### Challenges with Internet Explorer
Encountering difficulties in making certain features work against Internet Explorer (IE) is a common issue. Historically, Firefox-specific features have enabled a range of attacks that are not possible against IE, as detailed in Chapter 13.

---

### Browser Extensions for Firefox
Firefox offers a wide array of browser extensions that can be valuable when attacking web applications. Some notable ones include:

- **HttpWatch**: Also available for Firefox.
- **FoxyProxy**: Facilitates flexible management of the browser’s proxy configuration, allowing quick switching and setting different proxies for different URLs.
- **LiveHTTPHeaders**: Enables modification of requests and responses, and allows replaying individual requests.
- **PrefBar**: Allows enabling and disabling cookies, facilitating quick access control checks. It also supports switching between different proxies, clearing the cache, and changing the browser’s user agent.
- **Wappalyzer**: Identifies and displays technologies used on the current page via an icon in the URL bar.
- **Web Developer Toolbar**: Provides a variety of useful features, such as viewing all links on a page, altering HTML to make form fields writable, removing maximum lengths, unhiding hidden form fields, and changing request methods from GET to POST.

---

### Chrome: A New Player
Chrome is a relatively new browser that has quickly gained popularity, capturing approximately 15% of the market. Several browser extensions for Chrome can be useful in web application attacks:

- **XSS Rays**: Tests for XSS vulnerabilities and allows DOM inspection.
- **Cookie Editor**: Enables in-browser viewing and editing of cookies.
- **Wappalyzer**: Also available for Chrome.
- **Web Developer Toolbar**: Available for Chrome as well.

Chrome is likely to have unique features that can be exploited for constructing XSS and other vulnerabilities. As a newer browser, it presents a fertile ground for research in the coming years.

---

### Integrated Testing Suites
After a web browser, the most essential tool for attacking web applications is an intercepting proxy. Initially, these were standalone tools with minimal functionality, like the Achilles proxy, which simply displayed each request and response for editing. Despite its basic and buggy nature, Achilles was sufficient for skilled attackers to compromise many web applications.

Over time, intercepting proxies have evolved into comprehensive tool suites, each containing several interconnected tools designed to facilitate common tasks in web application attacks. Commonly used testing suites include:

- Burp Suite
- WebScarab
- Paros
- Zed Attack Proxy
- Andiparos
- Fiddler
- CAT
- Charles

These toolkits vary in capabilities, with some being newer and more experimental. In terms of functionality, Burp Suite is the most advanced and currently the only toolkit that includes all the features described in the following sections. The choice of tools often comes down to personal preference. If you do not have a preference, we recommend downloading and using several of these suites in real-world scenarios to determine which best meets your needs.

This section will examine how these tools work and describe the common workflows involved in their effective use.

#### How the Tools Work
Each integrated testing suite contains several complementary tools that share information about the target application. Typically, the attacker interacts with the application through their browser, while the tools monitor the resulting requests and responses, storing relevant details and providing useful functions. The typical suite includes the following core components:

- An intercepting proxy
- A web application spider
- A customizable web application fuzzer
- A vulnerability scanner
- A manual request tool
- Functions for analyzing session cookies and other tokens
- Various shared functions and utilities

#### Intercepting Proxies
The intercepting proxy is the central component of the tool suite and remains the only essential one. To use an intercepting proxy, you must configure your browser to use a port on the local machine as its proxy server. The proxy tool listens on this port and receives all requests issued by the browser. With access to the two-way communication between the browser and the destination web server, the proxy can pause each message for review and modification by the user, as shown in Figure 20-2.

##### Configuring Your Browser
Setting up your browser to use a proxy server is straightforward. First, determine the local port your intercepting proxy uses (usually 8080). Then follow the steps for your browser:

- **Internet Explorer**:
  - Go to `Tools > Internet Options > Connections > LAN settings`.
  - Uncheck “Automatically detect settings” and “Use automatic configuration script”.
  - Check “Use a proxy server for your LAN”.
  - Enter `127.0.0.1` in the Address field and the proxy port in the Port field.
  - Click Advanced and check “Use the same proxy server for all protocols”.
  - Remove any expressions in the “Do not use proxy server for addresses beginning with” box that match the hostname of the application you are attacking.
  - Click OK to confirm the new configuration.

- **Firefox**:
  - Go to `Tools > Options > Advanced > Network Settings`.
  - Select “Manual Proxy Configuration”.
  - Enter `127.0.0.1` in the HTTP Proxy field and the proxy port in the adjacent Port field.
  - Check “Use this proxy server for all protocols”.
  - Remove any expressions in the “No proxy for” box that match the hostname of the application you are attacking.
  - Click OK to confirm the new configuration.

- **Chrome**:
  - Chrome uses the proxy settings from the native browser. Access these settings via `Options > Under the Bonnet > Network > Change Proxy Settings`.

#### Working with Non-Proxy-Aware Clients
Occasionally, you may need to test applications that use a thick client outside of the browser. Many of these clients do not offer settings to configure an HTTP proxy and attempt to connect directly to the web server, preventing the use of an intercepting proxy.

Burp Suite provides features to handle this situation. Follow these steps:

1. Modify your operating system's hosts file to resolve the hostnames used by the application to your loopback address (127.0.0.1). For example:
   ```
   127.0.0.1 www.wahh-app.com
   ```
   This redirects the thick client’s requests to your computer.

2. For each destination port used by the application (typically 80 and 443), configure a Burp Proxy listener on this port of your loopback interface and set the listener to support invisible proxying. Invisible proxying means the listener will accept non-proxy-style requests redirected to your loopback address.

3. Invisible mode proxying supports both HTTP and HTTPS requests. To prevent SSL certificate errors, configure your invisible proxy listener to present an SSL certificate with a specific hostname that matches what the thick client expects.

4. For each hostname you have redirected using your hosts file, configure Burp to resolve the hostname to its original IP address. These settings can be found under `Options > Connections > Hostname Resolution`. This ensures outgoing requests from Burp are directed to the correct destination server.

5. When operating in invisible mode, Burp Proxy identifies the destination host using the Host header in requests. If the thick client does not include a Host header, Burp cannot forward requests correctly. For a single destination host, configure the invisible proxy listener to redirect all requests to the required destination host. For multiple destination hosts, run multiple instances of Burp on different machines and use your hosts file to redirect traffic for each destination host to a different intercepting machine.

#### Intercepting Proxies and HTTPS
For unencrypted HTTP communications, an intercepting proxy functions similarly to a normal web proxy. The browser sends standard HTTP requests to the proxy, which parses the hostname, resolves it to an IP address, converts the request, and forwards it to the destination server. When the server responds, the proxy forwards the response back to the client browser.

For HTTPS communications, the process is more complex. The browser first makes a cleartext request to the proxy using the CONNECT method, specifying the hostname and port of the destination server. A normal proxy responds with an HTTP 200 status code and keeps the TCP connection open, acting as a TCP-level relay. The browser then performs an SSL handshake with the destination server, creating a secure tunnel for HTTP messages.

With an intercepting proxy, the process is different to allow the proxy to access the HTTP messages. After responding to the CONNECT request with an HTTP 200 status code, the intercepting proxy performs the server’s end of the SSL handshake with the browser and acts as an SSL client, performing a second SSL handshake with the destination web server. This creates two SSL tunnels, with the proxy acting as a middleman, decrypting and reencrypting messages as needed.

If an attacker could perform this without detection, SSL would be ineffective. Therefore, SSL handshakes use cryptographic certificates to authenticate identities. The intercepting proxy must use its own SSL certificate, causing browsers to warn the user and allow them to decide whether to trust it. Figure 20-3 illustrates this process.

When testing an application with a single domain, handling the browser security warning and accepting the proxy’s certificate is usually straightforward. However, applications with numerous cross-domain requests can cause problems. Browsers typically drop cross-domain requests if they receive an invalid SSL certificate, either silently or with an alert.

Another issue arises with thick clients, which fail to connect if an invalid SSL certificate is received and provide no way to accept the certificate.

To circumvent these problems, Burp Suite generates a unique CA certificate for the user on installation. When Burp Proxy receives an HTTPS request to a new domain, it creates a new host certificate signed by the CA certificate. Installing Burp’s CA certificate as a trusted root in the browser or other trust store ensures all per-host certificates are accepted as valid, eliminating SSL errors.

The method for installing the CA certificate depends on the browser and platform. Generally, it involves visiting an HTTPS URL via the proxy, exploring the certificate chain, selecting the root certificate (PortSwigger CA), and importing it as a trusted root.

Detailed instructions for installing Burp’s CA certificate on different browsers are available in the online Burp Suite documentation at [http://portswigger.net/burp/help/servercerts.html](http://portswigger.net/burp/help/servercerts.html).

#### Common Features of Intercepting Proxies
In addition to intercepting and modifying requests and responses, intercepting proxies offer a range of features to aid in web application attacks:

- **Fine-grained interception rules**: Allow messages to be intercepted for review or silently forwarded based on criteria such as the target host, URL, method, resource type, response code, or specific expressions. This helps focus on relevant messages.
- **Detailed history**: Stores all requests and responses, allowing previous messages to be reviewed and passed to other tools for further analysis. You can filter and search the proxy history to quickly find specific messages.