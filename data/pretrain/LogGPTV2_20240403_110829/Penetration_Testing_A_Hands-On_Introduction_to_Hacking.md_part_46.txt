### Exploiting the War-FTP Stack-Based Buffer Overflow Vulnerability

#### Introduction
In this chapter, we will explore and exploit a stack-based buffer overflow vulnerability in War-FTP 1.65. This vulnerability is particularly dangerous because it allows an attacker to launch an attack without needing to log in to the FTP server.

#### Setting Up War-FTP
1. **Start War-FTP:**
   - Ensure that War-FTP 1.65 is open and running on your Windows XP virtual machine.
   - The lightning bolt icon in the top-left corner of the GUI (as shown in Figure 17-2) indicates that the server is listening for incoming connections.

2. **Attach Immunity Debugger:**
   - Open Immunity Debugger from the desktop.
   - From the File menu, select "Attach" and attach the debugger to the War-FTP process.
   - If the process is paused, click the Play button at the top-left corner of the Immunity Debugger window to resume execution.

#### Understanding the Vulnerability
- **Vulnerability Description:**
  - War-FTP 1.65 is prone to a stack-based buffer-overflow vulnerability due to improper boundary checks on user-supplied data.
  - This can lead to denial-of-service conditions and the execution of arbitrary machine code.

- **Exploit Strategy:**
  - We will manually exploit the buffer overflow in the Username field of the FTP login.
  - Unlike the previous example, we will need to introduce instructions to be executed as part of our attack string.

#### Crashing the Program
1. **Python Exploit Script:**
   - We will use a Python script to send a large string of characters to the Username field to cause a crash.
   - Listing 17-1 shows the initial exploit script.

```python
#!/usr/bin/python
import socket

buffer = "A" * 1100
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('192.168.20.10', 21))
response = s.recv(1024)
print(response)
s.send('USER ' + buffer + '\r\n')
response = s.recv(1024)
print(response)
s.send('PASS PASSWORD\r\n')
s.close()
```

2. **Running the Exploit:**
   - Make the script executable with `chmod +x ftpexploit`.
   - Run the script: `./ftpexploit`.

3. **Observing the Crash:**
   - After running the exploit, check Immunity Debugger to see if War-FTP has crashed.
   - The crash should be due to an access violation, indicating that the return address was overwritten by our long string of As.

#### Locating the Return Address Overwrite
1. **Using Mona to Generate a Cyclic Pattern:**
   - Use Mona to generate a unique cyclic pattern of 1,100 bytes: `!mona pattern_create 1100`.
   - The pattern will be written to `C:\logs\war-ftpd\pattern.txt`.

2. **Replacing the Buffer with the Cyclic Pattern:**
   - Modify the Python script to use the generated pattern instead of the As.
   - Restart War-FTP and run the modified exploit.

3. **Finding the Offset:**
   - After the program crashes, use Mona to find the offset: `!mona pattern_offset <value in EIP>`.
   - The output will show the exact offset where the return address was overwritten.

#### Verifying the Offset
1. **Creating a New Attack String:**
   - Construct a new attack string with 485 As, 4 Bs, and 611 Cs.
   - The Bs will help us verify the correct offset.

2. **Running the New Exploit:**
   - Run the modified exploit and check the value in EIP.
   - If EIP contains `42424242`, the offset is correct.

#### Hijacking Execution
1. **Identifying Accessible Registers:**
   - Use the `!mona findmsp` command to identify which registers point to parts of the attack string.
   - ESP, EDI, and EBP are likely candidates.

2. **Crafting the Final Exploit:**
   - Replace the part of the attack string (the Cs) with useful instructions.
   - Redirect execution to these instructions to achieve the desired effect.

#### Conclusion
By following these steps, we can successfully exploit the stack-based buffer overflow vulnerability in War-FTP 1.65. This exercise provides a deeper understanding of real-world exploit development and the importance of proper input validation in software.