3.1.2 Attack 2: TTL Expiry
Our second attack exploits the fact that the AH MAC
cannot cover all the ﬁelds of the inner header, iIP. In par-
ticular, the TTL and checksum ﬁelds are unprotected and
so can be manipulated by the attacker. This attack allows
us to relax the plaintext requirements in comparison to the
previous attack. However, we require that IP packets on the
VPN are directed to hosts behind GB. Again, we begin by
assuming that AH replay protection is disabled.
Attack 2, Step 1.
We begin with a one-time preparation step. Suppose the
attacker captures an arbitrary IPsec-protected packet in-
tended for a host behind GB. The attacker can manipulate
bits in the IV of the CBC-mode ciphertext after the ESP
header, with the eﬀect of reducing the TTL ﬁeld in the inner
header to 0. This requires the header checksum to be cor-
rected, and here we rely on the improved method described
in Section 2.5. For example, supposing the TTL ﬁeld’s orig-
inal value is 0x40, then on average 2 trials are needed, while
if the original value is 0xFF, then on average 6.75 trials are
needed. Alternatively, we might only assume that the TTL
ﬁeld is uniformly distributed; then, by carefully scheduling
the bit ﬂips applied to the TTL and checksum ﬁelds in an
extension of the method of Section 2.5, we can simultane-
ously reduce the TTL ﬁeld to 0 and correct the checksum
using an expected number of 382 trials.
In each case, after a certain expected number of trials, the
attacker succeeds in creating an IPsec-protected packet for
which the TTL ﬁeld in iIP is 0, the checksum for iIP is cor-
rect, and the AH MAC on the inner packet veriﬁes. Because
the inner packet should be forwarded to a host behind the
gateway GB, such an IP packet should always induce GB to
produce an ICMP response (of type 11 and code 0). We will
use this IP packet in step 2 as a carrier packet3.
Attack 2, Step 2.
The attacker now mounts an ESP trailer oracle attack
using the carrier packet constructed in step 1, splicing blocks
i onto the end of the carrier packet for diﬀerent values
R, C ∗
R, starting with the 216 variants in the rightmost 2 bytes
of R. As with Attack 1, we rely on ESP’s handling of TFC
bytes to ensure that the inner packet presented to AH after
successful ESP processing at GB always passes AH’s MAC
check, even with the blocks R, C ∗
i spliced onto the carrier
packet. On average, after 215 trials, an ICMP response will
be detected in the reverse direction on the VPN between GA
and GB. This indicates a particular value of R for which the
packet ending in R, C ∗
i passed the ESP trailer checks. The
attack now continues in the usual way.
This attack only applies for encryption algorithms with
128-bit block size, because we must be able to manipulate
the TTL ﬁeld in the inner IP header, and this is located
beyond the ﬁrst 64 bits of the header. In step 2, the attack
requires an average of 215 + 14 · 27 trial packet injections to
recover any complete 128-bit block of plaintext.
Attack 2 with AH replay protection enabled.
We can modify the above attack to cope with the sit-
uation where AH replay protection is enabled. The main
diﬀerence is that we can no longer re-use a single carrier
packet constructed in a ﬁrst step, because once AH process-
ing has been triggered (after successful ESP processing), a
ﬁxed carrier packet’s AH sequence number would always be
rejected thereafter. To overcome this, we combine the car-
rier packet generation and ESP trailer oracle steps. Thus,
for each choice of R used in a normal attack, we must splice
i onto a sequence of trial packets, with each trial start-
R, C ∗
ing with a base packet and attempting to manipulate the
TTL ﬁeld, correct the checksum, pass ESP trailer process-
ing, pass AH processing, and ﬁnally generate an ICMP mes-
sage. Clearly, for each success in this endeavour, the attacker
can extract 2 or 1 plaintext bytes (depending on whether the
rightmost bytes are being targetted or not), and must move
on to a new base packet with a fresh sequence number for
each success.
For an assumed inner TTL ﬁeld of, say 0xFF, an average of
6.25 × 216 trials are needed to extract the rightmost 2 bytes
of any block, and an average of 6.25 × 28 trials for each byte
thereafter. Extracting each block of plaintext requires the
attacker to have gathered 16 IPsec-protected packets with
roughly increasing AH sequence numbers, and also to block
3In the case when the starting value of the TTL ﬁeld is
not known, we need to be careful to distinguish this ICMP
response from any other replies that may arise when the
IP header checksum is correct but the TTL has not been
successfully set to 0.
500other traﬃc on the VPN while the attack is in progress. If
nothing is assumed about the starting TTL value, then the
attacker would ﬁrst conduct a reconnaissance phase to as-
certain likely TTL values (since only a few possible diﬀerent
values would be expected, depending on the particular OS
involved and the number of hops between the end host gen-
erating the inner packet and the gateway GA). This would
involve testing possible TTL value and checksum correction
masks in a systematic manner in an eﬀort to produce an
ICMP response, with an expected number of 382 trials being
needed (assuming the TTL ﬁeld is uniformly distributed).
Once the likely TTL values have been determined, the at-
tack can proceed as just described for known TTL values.
The attack can still be mounted without a reconnaissance
phase, or with unstable inner TTL ﬁeld values, but it be-
comes rather expensive in terms of the number of packet
injections needed.
3.1.3 Attack 3: Fragmentation
In the previous two attacks we endeavoured not to tamper
with authenticated portions of payloads, instead making use
of intercepted packets that generate some form of reply at
the receiver, or by manipulating portions of the ESP pay-
load that are not protected by AH. Our third attack adopts
a diﬀerent approach, managing to avoid the plaintext re-
quirements of the previous two attacks. We now craft pack-
ets that will generate replies whilst completely bypassing
AH processing at the receiver. The basic idea is that, after
ESP decapsulation of a crafted packet, the receiver discovers
that the ESP payload contains only a fragment of the packet
that was originally protected by AH; since AH’s MAC can-
not be veriﬁed unless the receiver has the complete packet,
the MAC check will not occur and AH will enter a state in
which it waits for further fragments. Eventually, this state
will time-out, and generate an error message that is detected
by the adversary.
Attack 3, Step 1.
We begin with a one-time preparation step. Suppose the
attacker captures an arbitrary IPsec-protected packet in-
tended for GB. The attacker can manipulate bits in the
ID ﬁeld and the MF and DF bits by ﬂipping bits in the IV
of the CBC-mode ciphertext after the ESP header, with the
eﬀect of turning the inner packet (that is still protected by
AH) into something that is interpreted by the receiver as a
fragment. Here, we need to set the MF bit, possibly unset
the DF bit, and then use the ID ﬁeld to compensate the
checksum, as discussed in Section 2.5.
(Alternatively, we
can manipulate the fragment oﬀset and ID ﬁelds with simi-
lar results.) This can be done even for a block cipher having
a 64-bit block, and with a small number of trial masks to
determine how to ﬂip bits in the IV. In fact, because of the
speciﬁc bit ﬂips involved, at most 17 trial packets are needed.
The attacker injects all the trial packets in rapid succession,
then waits. All the packets will be successfully processed
by ESP at GB, where all but one will have incorrect check-
sums and be dropped silently by the gateway. The one that
has a correct checksum will be interpreted as a fragment, so
IPsec will wait for the arrival of further fragments in an at-
tempt to reassemble the original packets before any further
AH processing takes place at GB. Eventually, because the
further fragments never arrive, the ﬁrst remaining fragment
provokes the production of an ICMP fragment reassembly
time exceeded message (of type 11 and code 1) in the re-
verse direction on the VPN between GA and GB, as per
Section 2.3. Because of the predictability of the time-out in-
terval, the attacker can correlate the time of appearance of
this packet with the time of injection of the trial packets to
determine exactly which trial packet was the ﬁrst one with
a correct checksum. This trial packet will be the attacker’s
carrier packet for the second step in the attack. Note that,
whenever this packet is injected into the network towards
GB, it will eventually produce an ICMP response after a
suitable time-out period.
Attack 3, Step 2.
Now that the preparation phase is complete, the attacker
has a carrier packet that can be used to create an ESP trailer
oracle. This step works largely as before: the attacker splices
blocks R, C ∗
i onto the end of the carrier packet for diﬀerent
values R, starting with the 216 variants in the rightmost 2
bytes of R. Here C ∗
is any target block. He injects these
i
216 trial packets into the network towards GB, looking for an
ICMP message in the reverse direction. He correlates the ap-
pearance time of the ICMP message with the injection time
of trial packets in order to identify the value of R which led
to the ICMP message being produced, again using the pre-
dictable nature of the fragmentation time-out. The packet
with this value of R must have passed ESP processing, indi-
cating that its trailer ﬁeld ended with the bytes 00,04. From
i can be deduced in the usual
this, the rightmost 2 bytes of C ∗
way. The attacker now continues to extract bytes further to
the left, again by modifying R, creating trial packets, inject-
ing them and correlating the appearance time of the ICMP
message with the injection time of trial packets to identify
the successful value of R. Each subsequent plaintext byte
that is extracted needs the injection of 28 trial packets.
The modiﬁcations made to the inner packet in this attack
do not cause any problems for AH processing, because the
attack bypasses this processing.
In this sense, the attack
exploits the non-atomic nature of IPsec processing, and the
complexities arising from IPsec needing to support IP frag-
mentation.
It works for 64-bit and 128-bit ciphers (using
the fact that checksums can be corrected by manipulating
the ID ﬁeld for the 64-bit case). It has no known or cho-
sen plaintext requirements and extracts complete plaintext
blocks. Its only disadvantage is that, no matter how fast the
attacker can inject the (roughly) 216 trial packets needed, he
must wait for the IP fragmentation time-out after each pair
of bytes/individual byte. As noted previously, this time-out
is recommended to be 60-120 seconds, though it is only 15
seconds in the OpenSolaris implementation. This, then, is
the limiting factor for the rate at which the attacker can
extract plaintext.
Attack 3 with AH replay protection enabled.
The key feature of this attack is that AH processing is
bypassed altogether. Thus, the carrier packet created in
step 1 of the attack continues to produce IP fragmentation
time-outs even when used repeatedly in step 2. So, in this
case, enabling AH replay protection does not present any
additional barrier to the attack. In fact this attack is much
easier to mount than our ﬁrst two attacks when AH replay
protection is enabled, because it has no chosen plaintext
assumptions, only a single packet is needed in the attack,
no control over the traﬃc ﬂow is needed, and it avoids the
501complications required to implement the previous attacks
without disrupting the traﬃc ﬂow.
3.2 Attacking Other Conﬁgurations
Having given a detailed discussion of three diﬀerent at-
tack types against the “AH Transport + ESP Tunnel” con-
ﬁguration, we move on to other conﬁgurations in which AH
is followed by encryption-only ESP. We omit discussion of
“ESP (auth only) + ESP (enc only)” conﬁgurations: since
the scope of AH’s integrity protection is always greater than
that of ESP, it is easy to see that any attack against some
“AH + ESP” conﬁguration will also apply to the correspond-
ing “ESP (auth only) + ESP (enc only)” conﬁguration.
AH Tunnel + ESP Tunnel.
Here the format of the IPsec-protected packets is:
oIP ESPh
iIP AH iiIP ULP TFC ESPt
where now there are 3 IP headers, an outer header, an inner
header and an “inner-inner” header. Here, Attacks 1 and 3
still work with simple modiﬁcations, but Attack 2 does not,
since the TTL ﬁeld that needs to be manipulated is the one
in iiIP, and this is protected by AH (and cannot be reached
from ESP’s IV any more).
AH Tunnel + ESP Transport.
Here the format of the IPsec-protected packets is:
oIP ESPh AH iIP ULP TFC ESPt
Here, Attack 2 does not work, since this attack needs to
manipulate ﬁelds in iIP which can no longer be reached from
ESP’s IV because of the intervening AH bytes. In Attack 3
we forge an ESP datagram whose payload contains only a
fragment of an AH-authenticated IP packet. This is only
allowed to happen when ESP is in tunnel mode;
in fact
there is no way of indicating such an instance when ESP
in transport mode is used. As such, Attack 3 cannot be
mounted either.
Attack 1 requires some extra assumptions to make it work
in this conﬁguration. Firstly, the “expected” value of the
NH byte in ESPt is 51, indicating AH as the next protocol,
rather than 04 as before. However, it may be that more
byte values are accepted here by IPsec processing, depend-
ing on how liberal the IPsec policies are at the gateway.
This increases the success probability when extracting the
rightmost 2 bytes, but may leave some uncertainty about
the exact value of the rightmost byte of the recovered plain-
text block. In practice, only 51 for the NH byte will lead to
the production of a response message, since other values will
lead to the AH data bytes being misinterpreted as coming
from a diﬀerent upper layer protocol, and the data will most
likely not be correctly formatted for that protocol.
Secondly, the attacker relies on ESP processing at GB to
interpret the original data in ESPt and some of the bytes
in the spliced blocks R, C ∗