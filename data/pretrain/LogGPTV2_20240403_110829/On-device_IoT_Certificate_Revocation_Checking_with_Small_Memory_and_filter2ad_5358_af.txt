### OCSP Stapling in IoT Scenarios

OCSP stapling is a practical design for Certificate Revocation (CR) checking in IoT scenarios, as it does not rely on server access during verification and can protect user privacy. The primary difference between TinyCR and OCSP stapling lies in their operational requirements: TinyCR requires the verifying device to maintain a Dynamic Access Status Structure (DASS), while OCSP stapling requires the device being verified to provide a time-stamped OCSP response extension. Devices using OCSP stapling typically have higher bandwidth overhead.

In IoT scenarios, if the device that needs to authenticate another device has more memory or network resources (e.g., a smartphone authenticating a sensor), TinyCR is a better choice because it only requires the inquiring device to maintain an up-to-date DASS. Conversely, if the devices to be authenticated are more powerful (e.g., a sensor authenticating a smartphone), then OCSP stapling can be used. For bi-directional authentication, a hybrid method combining DASS and OCSP stapling can optimize the resource-security trade-off.

### 8. Security Analysis

We discuss the following attack vectors for TinyCR:

1. **Masquerading with a Revoked Certificate**:
   - An attacker may attempt to masquerade as a legitimate IoT client using a revoked certificate. TinyCR's synchronization latency is on the millisecond level plus network latency, significantly reducing the window for such attacks compared to daily synchronization methods [19, 29]. It is also crucial for a Certificate Authority (CA) to detect compromised certificates promptly, although this is not the focus of this paper.

2. **Man-in-the-Middle (MitM) Attacks**:
   - MitM attacks between the IDM server and IoT devices can be defended against using current methods. Each device can obtain the public keys of IDM servers and CAs through offline methods during manufacturing or installation, enabling trusted TLS sessions. Hacking an IDM server or CA requires much more effort than hacking a device. This paper does not consider the scenario where the IDM server is hacked.

3. **Manipulating CRL, DASS, or Delta Messages**:
   - The integrity of the CRL is protected by using trusted TLS sessions on the CA-IDM channel. Additionally, DASS messages are signed by the IDM servers, preventing attackers from manipulating DASS installation or updating patches.

4. **Inferring Private Information**:
   - An attacker can easily obtain TinyCR install and update messages by compromising a single device. However, this provides no advantage since CR information is public, and DASS is not constructed for individual devices, thus containing no private information.

5. **Blocking Update Messages**:
   - An attacker can block update messages between an IoT device and the IDM server, then use a revoked certificate to attack the device. While TinyCR does not specifically prevent such communication-blocking attacks, they can be detected. For example, the IDM server can periodically send heartbeat packets with the digest of the up-to-date DASS verifier and the current time. If the device does not receive the heartbeat, it may detect the communication-blocking attack.

6. **Compromised IDM Server**:
   - A compromised IDM server may send incorrect DASS information and update messages. These messages can be audited by another IDM server that knows all certificates and the revoked ones. Any party with the entire CRL can verify if a DASS version is maliciously modified. The device can forward DASS messages with signatures to other IDM servers for auditing, and the IDM servers can use their maintained certificate universe and CRL to test the integrity of the DASS.

7. **Triggering Frequent Rebuilds of DASS**:
   - An adversary could acquire and cause a revocation with a strategy to trigger frequent rebuilds of DASS. To defend against this, preallocating extra space in DASS can reduce the probability of finding a certificate that triggers a rebuild. Doubling the size of DASS upon initialization makes it over 20 times harder to find such a certificate, effectively defending against limited-power attackers.

### 9. Conclusion

TinyCR is a new system and protocol for on-device CR checking in IoT. We developed DASS, a compact and dynamic data structure, to maintain the CR status of the entire IoT network with minimal memory usage. We also implemented two communication components: the tracker, which runs on an IDM server to construct and update DASS and send updates to devices, and the verifier, which synchronizes with the tracker and queries the CR status on IoT devices. Experiments show that TinyCR requires small memory, short CR checking time, low network bandwidth, and low synchronization latency.

### 10. Acknowledgments

The authors were partially supported by NSF Grants 1717948, 1750704, 1932447, and 2114113. C. Qian was partially supported by the Army Research Office under Grant Number W911NF-20-1-0253. The views and conclusions in this document are those of the authors and should not be interpreted as representing the official policies of the Army Research Office or the U.S. Government. The U.S. Government is authorized to reproduce and distribute reprints for Government purposes, notwithstanding any copyright notation. We thank all CCS reviewers for their valuable comments, which helped improve the paper.

### Session 4B: Wireless, Mobile, and IoT
CCS '21, November 15â€“19, 2021, Virtual Event, Republic of Korea

### References
[References section remains unchanged]

### A. Appendices

#### A.1 Preliminaries

##### A.1.1 Cuckoo Filters

Cuckoo Filters are inspired by Cuckoo Hashing Tables [24], where a key can be stored in two candidate buckets of a hash table, calculated using two hash functions. We use a (2, 4)-Cuckoo Filter as an example to illustrate the algorithm. As shown in Fig. 15, the Cuckoo Filter maintains a cuckoo hashing table with two hash functions \( h_1(x) \) and \( h_2(x) \). Each bucket of the table has four slots.

- **Insert(k)**: To insert a key \( k \) into the Cuckoo Filter, the operation involves inserting the fingerprint of \( k \), i.e., \( f_p(k) \), into one of the two candidate buckets. The two candidate positions, \( h_1(k) \) and \( h_2(k) \), are calculated using a single uniform hash function \( h(x) \) by:
  \[
  h_1(k) = h(k) \mod m,
  \]
  \[
  h_2(k) = h_1(k) \oplus (h(f_p(k)) \mod m),
  \]
  where \( \oplus \) is the bit-wise XOR operation, and \( m \) is the size of the buckets. The alternate bucket position of \( k \) can be found by:
  \[
  h_j(k) = h_i(k) \oplus (h(f_p(k)) \mod m), \quad \{i, j\} = \{1, 2\}.
  \]
  If either of the two candidate buckets contains an empty entry, the fingerprint \( f_p(k) \) is inserted. Otherwise, the insertion algorithm chooses a random entry and reallocates the stored fingerprint \( FP' \) to its alternate bucket. If the alternate bucket is full, the process repeats until an empty entry is found or the maximum number of kicking-off operations is reached, indicating the filter is too full and should be rebuilt with extra buckets.

- **Query(k)**: To check if a key \( k \) is a member, we visit the two candidate buckets using Eq. 3. If either bucket contains \( f_p(k) \), then \( k \) is in the set; otherwise, it is not.

- **Delete(k)**: Deleting a key \( k \) from the membership set involves removing one copy of \( f_p(k) \) from the found bucket entry.

One limitation of Cuckoo Filters is that the number of buckets \( m \) must be an exact power of two [36] to support the XOR operation, making it challenging to achieve optimal performance in some cases.