title:Inherent Time Redundancy (ITR): Using Program Repetition for Low-Overhead
Fault Tolerance
author:Vimal K. Reddy and
Eric Rotenberg
Inherent Time Redundancy (ITR): 
Using Program Repetition for Low-Overhead Fault Tolerance 
Center for Efficient, Secure and Reliable Computing, ECE, North Carolina State University 
Vimal Reddy, Eric Rotenberg 
{vkreddy, ericro}@ece.ncsu.edu 
Abstract 
to  provide 
in  programs 
A new approach is proposed that exploits repetition 
inherent 
low-overhead 
transient  fault  protection  in  a  processor.  Programs 
repeatedly  execute  the  same  instructions  within  close 
time periods. This can be viewed as a time redundant 
re-execution of a program, except that inputs to these 
inherent 
instructions  vary. 
Nevertheless,  certain  microarchitectural  events  in  the 
processor  are  independent  of  the  input  and  only 
depend  on  the  program  instructions.  Such  events  can 
be  recorded  and  confirmed  when  ITR  instructions 
repeat. 
time  redundant  (ITR) 
In this paper, we use ITR to detect transient faults 
in the fetch and decode units of a processor pipeline, 
avoiding costly approaches like structural duplication 
or explicit time redundant execution. 
1. Introduction 
to 
Technology 
scaling  makes 
transistors  more 
susceptible  to  transient  faults.  As  a  result,  it  is 
becoming 
incorporate 
transient fault tolerance in future processors. 
increasingly 
important 
Traditional  transient  fault  tolerance  approaches 
duplicate  in  time  or  space  for  robust  fault  tolerance, 
but  are  expensive  in  terms  of  performance,  area,  and 
power,  counteracting  the  very  benefits  of  technology 
scaling. To make fault tolerance viable for commodity 
processors, unconventional techniques are needed that 
provide  significant  fault  protection  in  an  efficient 
manner. In this spirit, we are pursuing a new approach 
to fault tolerance based on microarchitecture insights. 
The  idea  is  to  engage  a  regimen  of  low-overhead 
microarchitecture-level 
fault  checks.  Each  check 
protects  a  distinct  part  of  the  pipeline,  thus,  the 
regimen as a whole provides comprehensive protection 
of  the  processor.  This  paper  adds  to  the  suite  of 
microarchitecture  checks 
that  we  have  begun 
developing.  Recently,  we  proposed  microarchitecture 
assertions  to  protect  the  register  rename  unit  and  the 
out-of-order  scheduler  of  a  superscalar  processor  [3]. 
In  this  paper,  we  introduce  a  new  concept  called 
is 
is 
to 
The 
key 
idea 
for 
inherent  time  redundancy  (ITR),  which  provides  the 
basis  for  developing  low-overhead  fault  checks  to 
protect  the  fetch  and  decode  units  of  a  superscalar 
processor.  Although  ITR  only  protects  the  fetch  and 
decode  units,  it  is  an  essential  piece  of  an  overall 
regimen 
comprehensive  pipeline 
coverage. 
achieving 
Programs possess inherent time redundancy (ITR): 
the same instructions are executed repeatedly at short 
intervals.  This  program 
repetition  presents  an 
opportunity to discover low-overhead fault checks in a 
processor. 
observe 
microarchitectural  events  which  depend  purely  on 
program  instructions,  and  confirm  the  occurrence  of 
those events when instructions repeat. 
There  have  been  previous  studies  on  instruction 
repetition  in  programs  [1][2].  The  focus  has  been  on 
reusability of dynamic instruction results to reduce the 
number of instructions executed for high performance. 
Our  proposal 
to  exploit  repetition  of  static 
instructions for low-overhead fault tolerance.  
We characterize repetition in SPEC2K programs in 
Figure  1  (integer  benchmarks)  and  Figure  2  (floating 
point benchmarks). Instructions are grouped into traces 
that  terminate  either  on  a branching  instruction  or  on 
reaching a limit of 16 instructions. The graphs plot the 
number  of  dynamic  instructions  contributed  by  static 
traces. Static instructions are unique instructions in the 
program  binary,  whereas  dynamic 
instructions 
correspond  to  the  instruction  stream  that  unfolds 
during execution of the program binary. 
A  relatively  small  number  of  static  instructions 
contribute a large number of dynamic instructions. For 
instance,  in  most  integer  benchmarks,  less  than  five 
hundred  static  traces  contribute  nearly  all  dynamic 
instructions  (e.g.,  in  bzip,  100  static  traces  contribute 
99% of all dynamic instructions). Gcc and vortex are 
the  only  exceptions  due  to  the  large  number  of  static 
traces.  Floating  point  benchmarks  are  even  more 
repetitive,  as  seen  in  Figure  2  (e.g.,  in  wupwise,  50 
static 
traces  contribute  99%  of  all  dynamic 
instructions). 
An important aspect of repetition is the distance at 
which traces repeat. This  is  characterized  in  Figure 3 
 < 2500 
 < 2000 
 < 1500 
 < 3000 
 < 1000 
 < 500 
 < 10000 
 < 9500 
Figure 3. Distance between trace repetitions 
# of dynamic instructions separating repetitive traces
 < 6500 
 < 9000 
 < 5500 
 < 7500 
 < 8500 
 < 3500 
 < 4000 
 < 4500 
 < 5000 
 < 6000 
 < 7000 
 < 8000 
(integer benchmarks). 
bzip
gzip
parser
gap
vpr
gcc
twolf
perl
vortex
art
mgrid
wupwise
applu
equake
swim
apsi
100
s
n
o
i
t
c
u
r
t
s
n
i
i
c
m
a
n
y
d
l
a
t
o
t
f
o
%
90
80
70
60
50
40
30
20
10
0
bzip
vpr
gzip
gap
parser
twolf
perl
vortex
gcc
0
100
200
300
400
500
600
700
800
900
1000
Number of static traces
Figure 1. Dynamic instructions per 100 static 
traces (integer benchmarks). 
100
s
n
o
i
t
c
u
r
t
s
n
i
i
c
m
a
n
y
d
l
a
t
o
t
f
o
%
90
80
70
60
50
40
30
20
10
0
wupwise
mgrid
art
swim
applu
equake
apsi
0
50
100
150
200
250
300
350
400
450
500
Number of static traces
Figure 2. Dynamic instructions per 50 static 
traces (floating point benchmarks). 
100
90
80
70
60
50
40
30
20
10
s
n
o
i
t
c
u
r
t
s
n
i
i
c
m
a
n
y
d
l
a
t
o
t
f
o
%
0
0
s
n
o
i
t
c
u
r
t
s
n
i
i
c
m
a
n
y
d
l
a
t
o
t
f
o
%
100
90
80
70
60
50
40
30
20
10
0
0
 < 2500 
 < 1500 
 < 2000 
 < 3000 
 < 1000 
 < 500 
 < 10000 
 < 9500 
Figure 4. Distance between trace repetitions 
# of dynamic instructions separating repetitive traces
 < 8500 
 < 4000 
 < 6000 
 < 8000 
 < 6500 
 < 5000 
 < 7500 
 < 3500 
 < 4500 
 < 5500 
 < 7000 
 < 9000 
(floating point benchmarks). 
(integer  benchmarks)  and  Figure  4  (floating  point 
benchmarks). Here, instructions are grouped into traces 
like  before,  and  the  number  of  dynamic  instructions 
between  repeating  traces  is  measured.  The  graphs 
show  the  number  of  dynamic  instructions  contributed 
by  all  static  traces  that  repeat  within  a  particular 
distance. Distances are shown at increasing intervals of 
five hundred dynamic instructions. 
As seen, there is a high degree of ITR in programs. 
In all integer benchmarks, except perl and vortex, 85% 
of  all  dynamic  instructions  are  contributed  by  traces 
repeating  within  five  thousand  instructions,  four  of 
them  reaching 
thousand 
instructions.  In  all  floating  point  benchmarks,  except 
apsi, nearly all dynamic instructions are contributed by 
repetitive  traces  with  high  proximity  (within  1500 
instructions). 
target  within  one 
The main idea of the paper is to record and confirm 
microarchitecture  events  that  occur  while  executing 
highly  repetitive  instruction  traces.  The  fact  that 
relatively  few  static  traces  contribute  heavily  to  the 
total instruction count, suggests that a small structure is 
sufficient  to  record  events  for  most  benchmarks.  We 
propose 
record 
microarchitecture  events  during  repetitive  traces.  The 
cache  is  indexed  with  the  program counter (PC) that 
to  use 
cache 
small 
that 
to 
a 
starts  a  trace.  A  miss  in  the  cache  indicates  the 
unavailability of a counterpart to check the correctness 
of  the  microarchitectural  events.  However,  misses  do 
not always lead to loss of fault detection. A future hit 
to  a  trace  that  previously  missed  in  the  cache  can 
detect  anomalies  during execution of both the missed 
instance and the newly executed instance of the trace. 
In a single-event upset model, a reasonable assumption 
for fault studies, the two instances will differ if there is 
a fault. However, if a missed instance is evicted from 
the cache before it is accessed, it constitutes a loss in 
fault detection, since a fault during the missed instance 
goes undetected. Based on this, even benchmarks with 
a  large  number  of  static  traces  and  mild  proximity 
(e.g., gcc) can get reasonable fault detection coverage 
with small event caches. 
The  recorded  microarchitectural  events  depend 
purely  on  instructions  being  executed.  For  example, 
the  decode  signals  generated  upon  fetching  and 
decoding  an  instruction  are  the  same  across  all 
instances.  Recording  and  confirming  them  to  be  the 
same can detect faults in the fetch and decode units of 
a  processor.  Indexes  into  the  rename  map  table  and 
architectural  map  table  generated  for  a  trace  are 
constant  across  all 
instances.  Recording  and 
confirming  their  correctness  will  boost  the  fault 
its 
coverage of the rename unit of a processor, especially 
when  used  with  schemes 
like  Register  Name 
Authentication  (RNA)  [3].  For  instance,  RNA  cannot 
detect pure source renaming errors like reading from a 
wrong  index  in  the  rename  map  table.  Further, 
recording and confirming correct issue ordering among 
instructions  in  a  trace  can  detect  faults  in  the  out-of-
order scheduler of a processor, similar to Timestamp-
based Assertion Checking (TAC) [3]. 
In  this  paper,  we  add  microarchitecture  support  to 
use ITR to extend transient fault protection to the fetch 
and decode units of a processor. Signals generated by 
the decode unit for instructions in a trace are combined 
to  generate  a  signature.  The  signature  is  stored  in  a 
small  cache,  called  the  ITR  cache.  On  the  next 
occurrence  of  the  trace,  the  signature  is  re-generated 
and compared to the signature stored in the ITR cache. 
A  mismatch  indicates  a  transient  fault  either  in  the 
fetch  or  the  decode  unit  of  the  processor.  On  fault 
detection,  safe  recovery  may  be  possible  by  flushing 
and restarting the processor from the faulting trace, or 
the program must be aborted through a machine check 
exception. We provide insight into diagnosing a fault 
and define criteria to accurately identify fault scenarios 
where  safe  recovery  is  possible,  and  where  aborting 
the program is the only option. 
propose 
•  We 
The main contributions of this paper are as follows: 
•  A  new  fault  tolerance approach is proposed based 
on  inherent  time  redundancy  (ITR)  in  programs. 
The  key 
record  and  confirm 
microarchitectural  events  that  depend  purely  on 
program instructions. 
an 
record 
microarchitectural  events  pertaining  to  a  trace  of 
instructions.  The  key  novelty  is  that  misses  in  the 
ITR  cache  do  not  directly  lead  to  a  loss  in  fault 
detection.  Only  evictions  of  unreferenced,  missed 
instances lead to a loss in fault detection coverage. 
We  develop  microarchitectural  support  to  use  the 
ITR cache for protecting the fetch and decode units 
of a high-performance processor. 