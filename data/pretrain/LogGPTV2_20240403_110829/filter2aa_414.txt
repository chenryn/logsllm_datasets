### Exploiting Google Gadgets: Gmalware and Beyond
**Presenters:**
- Robert Hansen (Rsnake)
- Tom Stracener

**Note:** The complete presentation slides will be available after our talk on August 8th.

#### The Dark Side of Gadgets

The web is increasingly becoming a significant executable platform, much like Windows. As such, it is crucial to consider the security implications of this shift. PDP, an architect at GNUCITIZEN, has emphasized that we should start thinking about the web as a major executable platform from a security perspective.

#### XSS Vulnerability in gmodules.com

In 2007, Rsnake documented a Cross-Site Scripting (XSS) vulnerability in `gmodules.com`:
- **Vulnerability Report:** [Link](http://ha.ckers.org/blog/20070817/xss-hole-in-google-apps-is-expected-behavior/)
- **Status:** The vulnerability remains unfixed and is not expected to be fixed.
- **Disclosure:** Rsnake reported the vulnerability to Google and later disclosed it publicly after discussions with Google.

#### Why is XSS Ignored?

Cross-Site Scripting (XSS) is a serious vulnerability. Here are some potential consequences:
- **Arbitrary Code Execution:** Attackers can use JavaScript and HTML to craft custom payloads.
- **Content Spoofing:** Users may be misled into believing that malicious content is legitimate.
- **Phishing:** Attackers can steal user credentials by creating fake login portals.
- **Impact:** Arbitrary JavaScript can execute when a user follows a link to the gadget or if the gadget is embedded in a webpage.

#### Google's Argument

Google argues that JavaScript is essential for the functionality of their gadgets and that arbitrary execution of JavaScript is part of the expected behavior. They also state that since `gmodules.com` is a different domain from `google.com`, cross-domain protection prevents attacks from stealing Google-specific cookies. However, this reasoning is flawed.

#### Dissecting Google's Reasoning

1. **Domain Argument:**
   - **Premise (Google):** `gmodules.com` is a different domain from `google.com` or `gmail.com`.
   - **Conclusion (Google):** The vulnerability is insignificant.
   - **Response:** This argument overlooks the potential for phishing and other attacks on `gmodules.com`.

2. **Resemblance Argument:**
   - **Premise (Google):** `gmodules.com` does not look like a Google domain.
   - **Conclusion (Google):** Fixing the vulnerability would not reduce risk to the user.
   - **Response:** This ignores the fact that users might trust links that appear to be from Google.

3. **Expected Behavior Argument:**
   - **Premise (Google):** `gmodules.com` needs JavaScript to serve and cache gadgets.
   - **Conclusion (Google):** The XSS is expected behavior and should not be fixed.
   - **Response:** The issue is not JavaScript itself but its security. Additional security measures could make the hosted code more secure.

#### Impact of the `gmodules.com` XSS

1. **Exploitation of Google Gadgets:** Attackers can exploit the XSS to attack Google Gadgets and potentially the user's desktop.
2. **Hosting Malware:** `gmodules.com` can be used to host malware, making it difficult to distinguish between safe and dangerous code.
3. **Phishing Sites:** `gmodules.com` can be used to host phishing sites, further increasing the risk to users.

#### Understanding the New Web Paradigm

Gadgets are often discussed in ideological terms, and they play a significant role in the new world view of how the web should operate.

#### Google Gadgets Overview

1. **Simple to Build:** Developers can create gadgets with features like tabs, Flash content, persistent storage, dynamic resizing, and more.
2. **Multi-Site Access:** Gadgets can run on multiple sites and products, including iGoogle, Google Maps, Orkut, or any webpage.
3. **Wide Reach:** Gadgets are viewed millions of times per week and generate significant traffic.

#### Social Design of Gadgets

1. **Viral Spread via 'Social Graph':** Gadgets can spread virally with little to no serving costs.
2. **Decentralized Architecture:** Distributed processing allows gadgets to act as agents.
3. **Content Rich, Self-Expression:** Gadgets can be used for self-expression.
4. **Dynamic, Organic Change:** Gadgets can evolve and change over time.
5. **Activity Stream Exposure:** Gadgets can expose activity streams.
6. **Monitoring without Centralization:** Gadgets can monitor social graphs.
7. **Driving Interactions and Communication:** Gadgets can facilitate communication.
8. **Building Relationships and Communities:** Gadgets can help build communities.
9. **Solving Real World Tasks:** Gadgets can be used as tools for problem-solving and revenue generation.

#### Types of Google Gadgets

1. **iGoogle Gadgets**
2. **Google Maps Gadgets**
3. **Web Gadgets**
4. **OpenSocial API**
5. **Desktop Gadgets**

#### High-Level Security Concerns

1. **Weaponization:** Gadgets can be easily weaponized into attack tools or payloads.
2. **Third-Party Code:** Gadgets are largely third-party code and can be potentially malicious.
3. **Attacks on Other Gadgets, Desktop, or Websites:** Gadgets can attack other gadgets, the desktop, or websites.
4. **Vulnerabilities:** Gadgets can have the same vulnerabilities as web applications.

#### Disturbing Disclaimers: Gadget FAQ

**Q:** What if my Gadget is broken or displays offensive or inappropriate content?
**A:** This highlights the need for better security and content management practices.

#### Gadgets Threat Model

1. **JavaScript/HTML/Script Injection:**
   - **Gadget-to-Gadget Vectors**
   - **Gadget-to-Desktop Vectors**
2. **Defacement:**
   - **Content/Data Manipulation Attacks**
3. **Poisoning:**
   - **Data Pollution**
   - **Social Graph Attacks**
   - **'Click Fraud' Correlates**
4. **Content/Gateway Spoofing:**
   - **Masquerading, Redirection**
   - **Gateways to other apps**
   - **Phishing**
5. **Surveillance/Spyware:**
   - **Spyware/Adware**
   - **User Tracking/Monitoring**
   - **Unauthorized Data Collection & Export**
6. **Exposures:**
   - **Exposing “Low-Interaction” User Data**
   - **Personal Information Theft + Leaks**
7. **Malware (Gmalware):**
   - **Targeted Attacks, DDOS**
   - **Cookie Theft, Zombies**
   - **Exploits, Wrappers**
   - **Browser Attacks + Hijacking**
8. **Worms:**
   - **Social Networks**
9. **Abusive/Coercive Functionality:**
   - **Tracking Gadgets, Privacy Concerns, Unfriendly Gadgets**

#### Example Gadgets and Proof of Concepts (POCs)

We will discuss several example gadgets and POCs, categorized into general types such as Gmalware and WHGs. Not every gadget or Gmalware will have a POC, and gadgets will be introduced in no particular order.

#### Developer Humor

**"Let's run this with the 'Do Evil' Option..."**
Take a close look at the Gadget's options. Someone at Google has a sense of humor...

#### Example Gadgets and POCs

1. **Crackdown Gadget:**
   - Monitors feeds and websites for subversive content.
   - Uploads search terms and IP addresses to a state server.
   - Spiders websites to determine their "Red" level.
   - Hinders freedom movements and suppresses anti-communist rhetoric.
   - Updates the state database with data from the "Social Grid."

2. **Yahoo Site Explorer Spider Gadget:**
   - Port of PDP's Yahoo Spider Gadget.
   - Client-side JavaScript spider.
   - Retrieves information about subpages in a domain or beneath a path within the Yahoo! index.
   - Demonstrates the ability to call an external PHP script to include functionality within a Gadget.

3. **JS Port Scanner Gadget:**
   - Demonstrates port scanning via JavaScript embedded within a gadget.
   - Ported PDP's JS scanner to a Gadget.
   - Gadget code and port scanner code are available for download.

#### Gmodules Proxy Cache

- **Vulnerabilities & Insecure Design:**
  - The proxy is linked to gadgets for caching purposes.
  - Can be used to cache arbitrary JavaScript/HTML rather than just gadgets.
  - Allows 'one-click' JavaScript execution.
  - Enables JavaScript malware persistence.

- **Implications:**
  - Any JavaScript construct on the proxied page executes.
  - JavaScript can re-open a connection to the proxy cache, reactivating content.
  - Persistence: Malicious JavaScript can remain active indefinitely until a reboot.

#### Cross-Gadget Attacks

We have recorded a video demonstrating Robert's attack, showing how gadgets can attack one another, steal cookies and/or data, and manipulate the content of other gadgets.

This comprehensive overview highlights the critical security issues surrounding Google Gadgets and the need for robust security measures to protect users.