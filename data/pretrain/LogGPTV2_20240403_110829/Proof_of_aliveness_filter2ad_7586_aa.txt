# Proof of Aliveness

**Authors:**
- Chenglu Jin<sup>1</sup>
- Zheng Yang<sup>2</sup>
- Marten van Dijk<sup>1</sup>
- Jianying Zhou<sup>2</sup>

<sup>1</sup>University of Connecticut,  
<sup>2</sup>Singapore University of Technology and Design

*Jin and Yang share the first authorship.*

## Introduction

### Definition and Importance of Aliveness
- **Aliveness**: The continuous existence and operation of a device.
- **Importance**:
  - **Collaborative Work**: Ensures devices can work together effectively.
  - **Critical Component**: Essential for the overall system's functionality.
  - **Safety Issues**:
    - **Overflow**: Example: Water treatment system failure (SUTD, 2018).
    - **Blackout**: Example: Power grid failure (US, 2017).

## Checking Aliveness

### Methods to Check Aliveness
- **Track Running Status**: Monitor the operational status of devices.
- **Immediate Alarm and Fix**: Raise an alarm and address issues promptly.
  - **On-site Check**: Physical inspection.
  - **Remote Monitoring**: Continuous monitoring through networked systems.

### Challenges in Checking Aliveness
- **Unpredictable Timing of Failures**:
  - System failures or damages.
  - Device replacement.
  - Malicious program updates.
- **Fraud Data Injection**: Adversaries may inject false data to bypass automatic checks.
  - **Fraud Data**: Data that appears valid but is actually fraudulent.
  - **Watchman**: A role responsible for monitoring and verifying data.
  - **Client-Server Interaction**: The client (prover) sends data to the server (verifier).
- **Prompt Identification of Failure**: Difficult to detect when a device has stopped functioning.

## This Work: Proof of Aliveness (PoA)

### Cryptographic Notion of PoA
- **Two-party Protocol**:
  - **Prover (Client)**: Periodically sends proofs to the verifier.
  - **Verifier (Server)**: Validates the proofs.
- **Heartbeat Pattern**:
  - Prover sends proofs at a fixed time interval \(\Delta s\), e.g., every 30 seconds.
  - If no valid proof is received within the aliveness tolerance time \(T_{att}\), e.g., 3 minutes, the device is considered dead.

### Security Model for PoA
- **Adversary Model**:
  1. **Get Proof \(i\)**: Adversary obtains a valid proof.
  2. **Send Proof \(j\)**: Adversary sends a different proof.
  3. **Get All Info of Verifier**: Adversary gains access to all information on the verifier.
- **Security Goal**: No adversary can forge a valid aliveness proof, especially when the prover is dead.

## Realizing PoA

### Methods to Realize PoA
- **Digital Signature**:
  - Inefficient for resource-constrained devices.
- **Message Authentication Code (MAC)**:
  - Vulnerable to server compromise impersonation attacks.
- **Time-based One-time Password (TOTP)**:
  - Lightweight, relies on hash or one-way functions (OWF).
  - Resilient to server compromise, e.g., T/Key [DMB17].
  - Proofs are sent at a constant pace, every \(\Delta s\) seconds.

### Single-chain PoA OWF from [Lam81]
- **One-way Function \(F\)**: \(F: \{0,1\}^m \rightarrow \{0,1\}^m\)
  - **Initial Check-secret**: \(x_0\)
  - **Chain Generation**:
    - \(x_0 \rightarrow x_1 \rightarrow x_2 \rightarrow \ldots \rightarrow x_N\)
  - **Usage Direction**:
    - From \(T_{start}\) to \(T_{end}\)
  - **Verification**:
    - Verify-point \(x_j = F(F(\ldots F(x_i)))\)
    - Update \(x_j := x_i\)

### Limitations of OWF
- **Limited Proofs**:
  - Number of proofs \(N = 1\) million → 1 year with \(\Delta s = 30\) seconds intervals.
  - Shorter intervals, e.g., 3 seconds, require more proofs.
- **Efficiency**:
  - Larger \(N\) → larger bit-length of proofs → reduced efficiency.
- **Password Replenishment**:
  - Lack of automatic replenishment.
  - Assume no long-term public/secret key.
- **Checkpoint Storage**:
  - Store checkpoints, e.g., \(x_{100}, x_{200}, x_{300}, \ldots\)
  - Facilitates proof generation by computing from the nearest checkpoint.

### Multiple-chain PoA OWF
- **One-way Function \(F\)**: \(F: \{0,1\}^m \rightarrow \{0,1\}^m\)
- **Pseudorandom Generator \(G\)**: \(G: \{0,1\}^s \rightarrow \{0,1\}^{m+s}\)
- **Lamport One-time Signature (OTS) [Lam79]**:
  - **Auto-replenishment**:
    - 2×128 secret keys, i.e., \(\{x_i\}_{1 \leq i \leq 256}\)
    - 2×128 verification keys, i.e., \(\{vki = F(x_i)\}_{1 \leq i \leq 256}\)
  - **Signature Generation**:
    - For message \(m = (0,1,1,0,0,0,1,0,1,0,0,1,\ldots,1,0,1)\), the signature is:
      - Select corresponding verification keys based on the message bits.

### Multiple-chain PoA OWF Diagram
- **Usage Direction**:
  - From \(T_{start}\) to \(T_{end}\)
  - Generate multiple chains using pseudorandom generator \(G\)
  - Each chain follows the same one-way function \(F\)
  - Multiple instances of OWF provide enhanced security and flexibility.

This document provides a comprehensive overview of the Proof of Aliveness (PoA) concept, its importance, and the methods to realize it. The cryptographic approach ensures robust and efficient verification of device aliveness in cyber-physical systems.