# 2021Datacon_Polaris_wp
流量赛道考察数据分析、流量分析、机器学习。
2021年的题目设计包括 **Cobalt Strike流量分析** （TeamServer特征、命令特征）和 **代理识别**
（代理app与隧道网页）两个方面。
## 一、恶意流量分析
题目描述为：
给出hint为：
整体的解题思路：
### 0．流量数据筛选
给定pcap包的时间跨度为40分钟，统计得到TCP流为11957条，服务端提供通信的端口为：`80`、`443`。对服务内容进行聚类得到两大类通信行为，一类是走http的门户网站浏览，一类是CDN资源请求。因此希望从网络行为的角度，识别通信过程中的恶意流量。
参考提示，从题目给的`stage1.pcap`中筛选可疑流量。
### 1．恶意域名提取
最简单的可疑流量筛选手段是看访问频率，统计失陷主机的请求域名（client_hello报文）统计如下：
由于加密流量载荷不可读的特点，，无法直接发现隐藏在正常域名后的可疑通信。访问频率高的10个域名为常用域名，优先关注可疑域名`d28e`，其所在的二级域cloudfront是CDN服务提供商，可能被攻击者用于隐藏与反溯源。跟进发现与d28e
域名的通信存在可疑的心跳行为，心跳间隔为45s：
结合题目描述，猜测d28e可能是Cobalt Strike渗透框架的TeamServer服务器。CS框架中，失陷主机上的Stager会向CS
Server上的一个路径发起请求，拉取一个被称为Beacon的后续样本。
提取流量数据中与CloudFront建连的通信域：
    d3noow75xz96w4.cloudfront.net
    d2lj8kjjwt8rn6.cloudfront.net
    d32jqjeqo1vb2n.cloudfront.net
    d28ef1bm70qsi.cloudfront.net
    dku6bh98adktv.cloudfront.net
    d2og948cy5uxtu.cloudfront.net
    d1yr5tm734gi1r.cloudfront.net
通过Beacon扫描脚本grab_beacon_config.nse，对可疑主机的`80`、`443`端口进行beacon探测，结果如下：
`[*].cloudfront.net`的beacon扫描结果与正常域名的区别明显：
确定`[*].cloudfront.com`为恶意通信域名。
### 2\. 获取Beacon
检索相关资料得到：为了规避侦测，红队往往会对CS采用一些隐匿手段，常见方式有云函数和CDN等。这些隐匿手段隐匿了CS的真实IP。以Stager型Beacon为例，CS的上线流程如下图所示：
其中红框部分是受控主机在Exploit阶段后已被注入了Stage，Stage会向CS
Server上一个符合checksum8规则的路径发起请求，Server随后会响应Beacon内容，Stage拉取该后续样本后解密并解析Beacon配置信息。
访问符合校验和路径的URL下载攻击者放置在CDN节点上的Beacon文件：
解析Beacon文件获取Profile内容，在C2Server字段得到`key1`：
### 3．彩蛋
从除`d32jqjeqo1vb2n.cloudfront.net`外6个可疑域名下载的样本均解析成功，部分样本C2Server字段填充为:
`this.is.the.fake.c2.XD,/jquery-3.3.1.min.js`，唯独该样本 **解析失败**
。猜测该样本在构造时使用了自定义配置，导致样本解析出错。
单独对`d32j`下载的样本进行分析。经比较发现，正常样本中存在大量`0x2E`的padding字符，而该解析异常样本相同偏移位置的padding是`0x28`。
结合搜索引擎：
修改stager异或密钥是Beacon staging server **去特征**
的一种方法，而0x2E是默认配置信息的xor密钥，分析得该样本的xor密钥改为了`0x28`。对`d32jqjeqo1vb2n_x86`样本进行全局xor，得到彩蛋，
**Bingo!**
### 4\. 总结
  1. 彩蛋环节需要关注报错和细心，一开始解析beacon发现有报错的时候，我们以为就是坏了。其他样本可以得到输出，就没有深入研究。打开解析失败的样本内容，会发现与可解析样本存在差异，把这个差异原因搞清楚了彩蛋就出来了。
  2. 是C2服务端的攻防：后门C2是如果不考虑操作安全性，随意使用长连接直连服务器，很容易就被追踪发现。于是出现了Beacon（信标）后门，它是以定期发送信标到C2服务器获取指令的方式进行命令控制。提起Beacon大家大多都想到的是Cobalt Strike，但其实Beacon后门的技术细节可能不是Cobalt Strike原创，CIA可能才是鼻祖。从CIA泄漏的资料可以发现，他们研发的后门几乎都使用了Beacon标准。
  1. 这道题对于实际应用的启发在于，怎样从大流量中快速的进行白流量筛选，这是一个值得研究的课题；同时，有些样本为了隐藏心跳行为，可能会引入抖动，恶意心跳行为的发现，对于自动识别可疑流量也是十分有价值的。
## 二、攻击指令识别
### 0．题目解读
HTTP、DNS、HTTPS三题，都需解决pcap包中流量与指令序列的映射问题。
### 1\. C2通信特征
观察Beacon与Teamserver的通信特征，由于失陷主机与攻击者间通过 CS
TeamServer间接通信，因此CS的命令控制信道中，存在心跳请求、拉取指令 和 回传响应
的通信模式。如图所示是Beacon与Teamserver的通信特征，可以直观的看到Server下发任务，获取失陷主机POST响应的通信行为。
### 2\. HTTP 指令隧道
在CS通信特征调研的过程中，发现HTTP指令流量中Referer字段为`http://code.jquery.com`：
据此推断攻击者在借助Cobalt
Strike的Malleable-C2-Profiles配置文件自定义通信流量，来对抗流量检测。攻击者通过加载定制的配置文件（如此处使用到的jquery.profile模板）来改变目标主机与Server端的流量特征，将通信流量伪装、混淆成正常通信。
HTTP隧道的控制命令隐藏在JS脚本中的P变量，回传响应通过POST数据。
其中sleep指令的特征为：经过sleep秒数后会发起心跳GET请求。 此图sleep时长为10s：
根据待识别指令的流量中，统计变量P字节与POST包载荷长度的分布，最终可以得到心跳包+50条指令与序列。
### 3\. DNS 指令隧道
DNS指令的流量特征表现在`TXT记录响应`和`带POST`的A记录请求中，其中其中TXT记录是失陷主机拉取TeamServer上的指令后，服务端下发的命令；而失陷主机带POST的A记录请求，是命令执行后的回传信息。其中存在的上下行包分布统计如下图。统计待识别流量最后只得到48个指令，还需要根据心跳间隔的变化加入两个sleep指令。
### 4\. HTTPS 指令隧道
HTTPS指令隧道上，失陷主机与beacon通过TLS会话进行加密通信，其指令的流量特征集中表现在上下行包的载荷长度上，具有下发指令(特定TLS载荷长)-应答(特定范围TLS载荷长)的字节分布特征，其分布如下图所示：
下图是File、Shell上下行载荷长手稿：
## 三、代理隧道分类
阶段一是代理隧道的软件分类，通过强特征形成代理软件的分类树，阶段二是隧道网页的识别，通过流量表征和网站访问行为形成多分类器模型。
### 0\. 代理隧道识别任务概述
该任务旨在对11类加密代理流量进行分类。通过分析每一类有限的流量样本，统计样本的静态特征与时空特征，总结出每一类样本的匹配规则。然后设计了一种基于树模型的推导算法（强特征推理树），将多分类任务具体分解为多个二分类任务，最后将每一个测试样本归类到某个具体的类别上。推理树的每一个二叉结点都具有将当前类别二分类的强特征规则，因此该算法能够同时具有高准确度与高运行效率。
下面介绍该方法的分析步骤与推导算法的具体实现。
### 1\. 代理隧道特征分析
#### 1.1 协议总体分析
首先，我们分别对11类样本的高层通信协议进行了分析。如图
1所示，我们分析了每一类样本的协议组成，分别计数了UDP，TCP与TLS包的数量。可以看到，`0,6,8`类样本包含了UDP包，其中`0,8`类样本只包含了UDP包。同时`1,2,3,6,10`类样本包含了同时包含TCP与TLS包，`4,5,7,9`只包含了TCP包，并没有包含TLS包。
11种不同的代理软件分别通过UDP、标准TLS加密协议以及私有加密协议进行隧道通信。11类样本的通信协议分布如下图：