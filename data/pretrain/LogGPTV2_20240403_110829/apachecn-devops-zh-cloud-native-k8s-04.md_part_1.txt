# 四、扩展和部署您的应用
在本章中，我们将了解用于运行应用和控制 Pods 的高级 Kubernetes 资源。首先，我们将讨论 Pod 的缺点，然后讨论最简单的 Pod 控制器，ReplicaSets。接下来我们将讨论部署，这是将应用部署到 Kubernetes 的最流行的方法。然后，我们将介绍特殊资源，帮助您部署特定类型的应用—水平 Pod 自动缩放器、DaemonSets、状态集和作业。最后，我们将通过一个完整的例子来说明如何在 Kubernetes 上运行一个复杂的应用。
在本章中，我们将涵盖以下主题:
*   了解 Pod 的缺点及其解决方案
*   使用复制集
*   控制部署
*   利用水平 Pod 自动缩放器
*   实现 DaemonSets
*   查看状态集和作业
*   把它们放在一起
# 技术要求
为了运行本章中详细介绍的命令，您将需要一台支持`kubectl`命令行工具的计算机以及一个工作正常的 Kubernetes 集群。参见 [*第 1 章*](01.html#_idTextAnchor016)*与 Kubernetes*通讯，了解几种与 Kubernetes 快速启动运行的方法，以及如何安装`kubectl`工具的说明。
本章使用的代码可以在本书的 GitHub 资源库中找到[https://GitHub . com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/chapter 4](https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter4)。
# 了解 Pod 的缺点及其解决方案
正如我们在前一章、 [*第三章*](03.html#_idTextAnchor091) 、*在 Kubernetes 上运行应用容器*中所述，Kubernetes 中的 Pod 是一个节点上运行的一个或多个应用容器的实例。只创建一个 Pod 就足以像在任何其他容器中一样运行应用。
也就是说，使用单个 Pod 运行应用首先会忽略运行容器的许多好处。容器允许我们将应用的每个实例视为无状态项，可以通过旋转应用的新实例来扩大或缩小以满足需求。
这有两个好处，一是允许我们轻松地扩展我们的应用，二是通过在给定时间提供我们的应用的多个实例，使我们的应用更加可用。如果我们的一个实例崩溃，应用仍将继续运行，并将自动扩展到崩溃前的水平。我们在 Kubernetes 上这样做的方法是使用 Pod 控制器资源。
## Pod 控制器
Kubernetes 为 Pod 控制器提供了几种开箱即用的选择。最简单的选择是使用复制集，它为特定的 Pod 维护给定数量的 Pod 实例。如果一个实例失败，复制集将启动一个新实例来替换它。
其次，还有部署，它们自己控制一个复制集。当在 Kubernetes 上运行应用时，部署是最受欢迎的控制器，它们使得使用跨复制集的滚动更新来升级应用变得容易。
水平 Pod 自动缩放器允许应用根据性能指标自动缩放到不同数量的实例，从而将部署提升到一个新的水平。
最后，有几个专业控制器在某些情况下可能很有价值:
*   DaemonSets，它在每个节点上运行应用的一个实例并维护它们
*   状态集，其中 Pod 标识保持静态，以帮助运行有状态工作负载
*   启动、运行到完成，然后在指定数量的 Pods 上关闭的作业
控制器的实际行为，无论是像复制集这样的默认 Kubernetes 控制器还是自定义控制器(例如 PostgreSQL 操作符)，都应该很容易预测。标准控制回路的简化视图如下图所示:
![Figure 4.1 – A basic control loop for a Kubernetes controller](img/B14790_04_001.jpg)
图 4.1–Kubernetes 控制器的基本控制回路
如你所见，控制器不断对照**当前集群状态**检查**预期集群状态**(我们想要这个应用的七个 PODS)(我们有这个应用的五个 PODS 在运行)。当预期状态与当前状态不匹配时，控制器将通过应用编程接口采取行动来纠正当前状态以匹配预期状态。
到目前为止，你应该理解为什么控制器在 Kubernetes 上是必要的:在交付高可用性应用时，Pod 本身还不是一个足够强大的原语。让我们继续讨论最简单的控制器:复制集。
# 使用复制集
复制集是最简单的 Kubernetes Pod 控制器资源。它们取代了旧的复制控制器资源。
复制器组和复制器控制器之间的主要区别在于复制器控制器使用更基本类型的选择器-决定应该控制哪些 Pod 的过滤器。
当复制控制器使用简单的基于权益的(*键=值*)选择器时，复制集使用具有多种可能格式的选择器，例如`matchLabels`和`matchExpressions`，这将在本章中讨论。
重要说明
没有任何理由在副本集上使用副本控制器——除非你有很好的理由不这样做，否则就坚持使用副本集。
复制集允许我们通知 Kubernetes 为特定的 Pod 规格保持一定数量的 Pod 。副本集的 YAML 与 Pod 的非常相似。事实上，整个 Pod 规范嵌套在复制集 YAML 中的`template`键下。
还有一些其他关键区别，可以在下面的代码块中观察到:
副本集. yaml
```
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: myapp-group
  labels:
    app: myapp
spec:
 replicas: 3
 selector:
 matchLabels:
 app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: myapp-container
        image: busybox
```
正如你所看到的，除了`template`部分(本质上是一个 Pod 定义)之外，我们的副本集规范中还有一个`selector`键和一个`replicas`键。先说`replicas`。
## 复制品
`replicas`键指定一个副本计数，我们的副本集将确保它始终在给定的时间运行。如果一个 Pod 死亡或停止工作，我们的复制集将创建一个新的 Pod 来代替它。这使得副本集成为一种自我修复的资源。
副本集控制器如何决定 Pod 何时停止工作？它会查看 Pod 的状态。如果 Pod 的当前状态不是“运行”*或“包含创造”**，复制集将尝试启动一个新的 Pod 。*
正如我们在 [*第 3 章*](03.html#_idTextAnchor091)*中讨论的，在 Kubernetes* 上运行应用容器，容器创建后容器的状态是由活跃度、就绪性和启动探测驱动的，可以专门为容器配置这些探测。这意味着您可以设置特定于应用的方法来知道 Pod 是否以某种方式损坏，并且您的副本集可以跳进去并在它的位置启动一个新的副本集。
## 选择器
`selector`键很重要，因为复制器集的工作方式——它是一个以选择器为核心的控制器。复制器组的工作是确保与其选择器匹配的运行 Pod 的数量是正确的。
例如，假设您有一个运行应用的现有 Pod`MyApp`。这个 Pod 标有`App=MyApp`的`selector`键。
现在假设您想用同一个应用创建一个副本集，这将为您的应用添加另外三个实例。您可以使用相同的选择器创建一个副本集，并指定三个副本，目的是总共运行四个实例，因为您已经运行了一个实例。
一旦启动复制集会发生什么？您会发现运行该应用的 Pods 总数将是三个，而不是四个。这是因为复制组有能力收养孤儿 PODS 并将其置于其统治之下。
当副本集启动时，它看到已经有一个现有的 Pod 匹配它的`selector`键。根据所需的副本数量，副本集将关闭现有的 Pods 或启动与`selector`匹配的新 Pods，以创建正确的数量。
## 模板
`template`部分包含 Pod，并支持与 Pod YAMLs 相同的所有字段，包括元数据部分和规范本身。大多数其他控制器遵循这种模式——它们允许您在更大的整体控制器 YAML 中定义 Pod 规范。
现在，您应该了解了复制集规范的各个部分及其作用。让我们继续使用我们的复制集实际运行应用。
## 测试复制集
现在，让我们部署我们的副本集。
复制前面列出的`replica-set.yaml`文件，并在您的集群上使用以下命令在与 YAML 文件相同的文件夹中运行它:
```
kubectl apply -f replica-set.yaml
```
要检查复制集是否已正确创建，运行`kubectl get pods`获取默认命名空间中的 Pods。
由于我们还没有为我们的复制集指定一个名称空间，它将被默认创建。`kubectl get pods`命令应给出以下内容:
```
NAME                            READY     STATUS    RESTARTS   AGE
myapp-group-192941298-k705b     1/1       Running   0          1m
myapp-group-192941298-o9sh8     1/1       Running   0        1m
myapp-group-192941298-n8gh2     1/1       Running   0        1m
```
现在，尝试使用以下命令删除其中一个复制集荚:
```
kubectl delete pod myapp-group-192941298-k705b
```
副本集将始终尝试保持指定数量的副本在线。
让我们使用`kubectl get`命令再次查看我们的运行舱:
```
NAME                         READY  STATUS             RESTARTS AGE
myapp-group-192941298-u42s0  1/1    ContainerCreating  0     1m
myapp-group-192941298-o9sh8  1/1    Running            0     2m
myapp-group-192941298-n8gh2  1/1    Running            0     2m
```
如您所见，我们的副本集控制器正在启动一个新的 pod，以将副本数量保持在三个。
最后，让我们使用以下命令删除我们的复制集:
```
kubectl delete replicaset myapp-group
```
随着我们的集群变得更加干净，让我们继续讨论更复杂的控制器——部署。
# 控制部署
虽然副本集包含了您想要运行高可用性应用的大部分功能，但大多数时候您会希望使用部署在 Kubernetes 上运行应用。
与副本集相比，部署有一些优势，它们实际上是通过拥有和控制副本集来工作的。
部署的主要优势在于，它允许您指定一个`rollout`过程，即如何将应用升级部署到部署中的各个单元。这使您可以轻松地配置控制，以阻止不良升级在其轨道上。
在我们回顾如何做到这一点之前，让我们看一下部署的整个规范:
deployment.yaml
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-deployment
  labels:
    app: myapp
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25% 
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: myapp-container
        image: busybox
```
如您所见，这与副本集的规格非常相似。我们在这里看到的区别是规格中的一个新键:`strategy`。
使用`strategy`设置，我们可以通过`RollingUpdate`或`Recreate`告诉我们的部署升级我们的应用的方式。
`Recreate`是一个非常基础的部署方式:部署中的所有 Pods 都会被同时删除，新版本会创建新的 Pods。`Recreate`并不能让我们很好地控制糟糕的部署——如果新的 Pods 由于某种原因没有启动，我们将被一个完全不起作用的应用卡住。
另一方面，`RollingUpdate`的部署速度更慢，但控制力更强。首先，新的应用将一点一点地推出，一个接一个。我们可以指定`maxSurge`和`maxUnavailable`的值来调整策略。
滚动更新是这样工作的——当部署规范用新版本的 Pod 容器更新时，部署将一次关闭一个 Pod，用新的应用版本创建一个新的 Pod，等待新的 Pod 注册`Ready`，如就绪检查所确定的，然后继续下一个 Pod。
`maxSurge`和`maxUnavailable`参数允许您加快或减慢该过程。`maxUnavailable`允许您在部署过程中调整不可用 Pods 的最大数量。这可以是一个百分比，也可以是一个固定数字。`maxSurge`允许您调整在任何给定时间可以创建的部署副本数量上的最大 Pods 数量。就像`maxUnavailable`一样，这可以是一个百分比，也可以是一个固定的数字。
下图显示了`RollingUpdate`程序:
![Figure 4.2 – RollingUpdate process for a Deployment](img/B14790_04_002.jpg)
图 4.2–部署的滚动更新流程
如你所见，`RollingUpdate`程序遵循几个关键步骤。部署尝试逐个更新 Pods。只有在 Pod 成功更新后，更新才会进行到下一个 Pod。
## 用命令控制部署
正如我们已经讨论过的，我们可以通过使用声明性方法简单地更新它的 YAML 来改变我们的部署。然而，Kubernetes 也在`kubectl`中给了我们一些特殊命令来控制部署的几个方面。
首先，Kubernetes 允许我们手动扩展部署，也就是说，我们可以编辑应该运行的副本数量。
要将我们的`myapp-deployment`扩展到五个副本，我们可以运行以下命令:
```
kubectl scale deployment myapp-deployment --replicas=5
```
同样，如果需要，我们可以将`myapp-deployment`回滚到旧版本。为了演示这一点，首先让我们手动编辑我们的部署，以使用我们容器的新版本:
```
Kubectl set image deployment myapp-deployment myapp-container=busybox:1.2 –record=true
```
该命令告诉 Kubernetes 将我们部署中的容器版本更改为 1.2。然后，我们的部署将通过上图中的步骤来展开我们的变更。
现在，假设我们想在更新容器映像版本之前回到以前的版本。我们可以使用`rollout undo`命令轻松实现这一点:
```