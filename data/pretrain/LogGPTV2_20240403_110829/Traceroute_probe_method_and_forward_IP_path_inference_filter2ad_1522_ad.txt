UDP−Paris only
UDP−Paris n TCP
TCP only
TCP n ICMP−Paris
ICMP−Paris only
ICMP−Paris n UDP−Paris
by all methods
k
u
−
g
b
c
p
j
−
t
r
n
u
a
−
d
y
s
s
e
−
n
c
b
i
f
−
l
e
h
r
k
−
j
j
c
s
u
−
d
a
i
s
u
−
n
a
s
k
u
−
g
b
c
p
j
−
t
r
n
u
a
−
d
y
s
s
e
−
n
c
b
i
f
−
l
e
h
r
k
−
j
j
c
s
u
−
d
a
i
s
u
−
n
a
s
Figure 4: Uniqueness of complete IP paths by the
combinations of methods that see them for the ran-
dom routable address list. The vantage point has
more impact than the method on the number of
complete IP paths observed and their uniqueness
to each method.
Figure 5: Uniqueness of IP links by the combi-
nations of methods that see them for the random
routable address list. UDP-Paris infers the most
IP links despite reaching the fewest destinations.
Looking at cbg-uk: UDP-Paris 89.1%, ICMP-Paris
88.7%, and TCP 87.4%.
due to reaching the fewest number of destinations (Figure 1)
restricts its inference of AS topology. 99% of the AS links
inferred using our data are inferred by combining the AS
paths inferred with ICMP-Paris and TCP.
3.1.6 Probe generation
We examined the workload that various probing meth-
ods generated in terms of the number of probes sent to the
network. Since scamper runs at a constant packets per sec-
ond rate regardless of probing method, the probe count is
a reasonable approximation of the time a measurement will
take. For cbg-uk, ICMP-Paris sent the fewest packets with
6,943,071, followed by TCP at 7,033,384 and UDP-Paris
with 7,122,459. ICMP-Paris had a slight edge, sending 2.5%
fewer packets than UDP-Paris.
3.1.7 Enumeration of all hops per method
As the UDP-Paris, ICMP-Paris, and TCP probe methods
reveal diﬀerent sets of IP links, we became curious about
the extensiveness of forwarding policies for diﬀerent proto-
col types. To investigate further we implemented a per-ﬂow
load-balancer traceroute in scamper similar to that of Au-
gustin, et al. [15] to enumerate all links that could be ob-
served between a source and a destination. The three meth-
ods implemented were UDP and TCP traceroute methods
which vary the source port but keep the destination port
constant, and an ICMP traceroute method which varies the
ICMP checksum. In the UDP and TCP cases, we kept the
destination port constant in order to receive consistent treat-
ment by ﬁrewalls in the path.
We probed with the three methods from san-us to 500
addresses chosen with the procedure of Section 2.4.1. We
used the same stochastic approach as Augustin, et al. [15] to
send suﬃcient probes with varying ﬂow identiﬁers to reach
99% conﬁdence we had observed all links forward from a
hop. We did not probe beyond any unresponsive hops or
load balancers we inferred to forward on a per-packet basis.
Figure 7 shows the intersection of IP links observed by
each method. In total, we enumerated 3899 IP links; 68%
of these links were in common for all three methods, rising
to 82% in common between TCP and UDP. In total, we
detected 619 load-balancer interfaces; the next-hop for 222
(36%) of these varied with IP protocol. This conﬁrms our
hypothesis that the sequence of hops visited will vary based
on the IP protocol used.
3.2 Website probing results
Table 9 lists the halt reasons for all methods using the
website list from san-us. At the time of probing, 95.3% of
webservers were reachable with tcptraceroute. However, less
than half of these webservers were reachable when probing
with a UDP method, and only three-quarters of them with
an ICMP method. In these cases, the proportion of tracer-
outes that halt after ﬁve consecutive unresponsive hops in-
creases signiﬁcantly. That is, a ﬁrewall was silently discard-
ing traceroute probes from reaching the intended destina-
tion.
3.3 Router probing results
Table 10 lists the halt reasons for all methods using the
router list from san-us. As with the website list, most of
the targets should be up; in this case we expect them to be
active because we recently received an ICMP time exceeded
message from them. ICMP-based methods are most eﬀective
for this router destination list, reaching approximately 84%
of the list. The UDP and TCP probe methods both reach
approximately 68% of the routers in the list, with the UDP
methods reaching slightly more than the TCP method.
4. ARK DATA ANALYSIS
In this section, we analyse the reachability and loop rates
observed for UDP and ICMP-Paris traceroutes in the ﬁrst
seven months of IP topology data collected on Ark [18].
Table 9: Traceroute method halt reasons for top 500 website address list. 422 addresses were probed.
UDP
UDP-Paris
UDP-Paris DNS
ICMP
ICMP-Paris
TCP port 80
Reached
182 (43.0%)
182 (43.0%)
196 (46.3%)
323 (76.4%)
324 (76.6%)
404 (95.5%)
ICMP-unreach
18 (4.3%)
15 (3.5%)
11 (2.6%)
10 (2.4%)
8 (1.9%)
0
Loop
14 (3.3%)
10 (2.4%)
10 (2.4%)
11 (2.6%)
9 (2.1%)
9 (2.1%)
Gaplimit
209 (49.4%)
216 (51.1%)
206 (48.7%)
79 (18.7%)
82 (19.4%)
10 (2.4%)
Table 10: Traceroute method halt reasons for router address list. 2000 addresses were probed.
UDP
UDP-Paris
UDP-Paris DNS
ICMP
ICMP-Paris
TCP port 80
Reached
1383 (69.2%)
1399 (70.0%)
1364 (68.2%)
1690 (84.5%)
1702 (85.1%)
1342 (67.1%)
ICMP-unreach
117 (5.8%)
117 (5.8%)
119 (6.0%)
118 (5.9%)
116 (5.8%)
133 (6.7%)
Loop
34 (1.7%)
16 (0.8%)
16 (0.8%)
27 (1.4%)
16 (0.8%)
14 (0.7%)
Gaplimit
466 (23.3%)
468 (23.4%)
501 (25.1%)
165 (8.2%)
166 (8.3%)
511 (25.6%)
)
s
d
n
a
s
u
o
h
t
(
s
k
n
i
l
S
A
f
o
r
e
b
m
u
n
 18
 16
 14
 12
 10
 8
 6
 4
 2
 0
UDP−Paris only
UDP−Paris n TCP
TCP only
TCP n ICMP−Paris
ICMP−Paris only
ICMP−Paris n UDP−Paris
by all methods
k
u
−
g
b
c
p
j
−
t
r
n
u
a
−
d
y
s
s
e
−
n
c
b
i
f
−
l
e
h
r
k
−
j
j
c
s
u
−
d
a
i
s
u
−
n
a
s
Figure 6: Uniqueness of inferred AS links by the
combinations of methods that see them for the ran-
dom routable address list.
ICMP-Paris infers the
most AS links due to reaching the most destinations.
Looking at cbg-uk: ICMP-Paris 92.3%, TCP 92.2%,
and UDP-Paris 87.2%
4.1 Ark background
Ark is CAIDA’s newest active measurement infrastruc-
ture, the next generation of the skitter infrastructure CAIDA
operated for nearly a decade. The distinguishing feature
of Ark is its focus on coordination. Coordination, broadly
speaking, is concerned with planning, executing, and con-
trolling an ensemble of distributed computations [26, 27].
Coordination is the meta-activity that surrounds a compu-
tation.
To facilitate coordination, Ark provides a new implemen-
tation, called Marinda, of the well-known tuple-space coor-
dination model ﬁrst introduced by David Gelernter in his
Linda coordination language [28, 29]. A tuple space is a
distributed shared memory combined with operations, in-
UDP
sport
189
593
2633
TCP
sport
104
143
144
93
ICMP
Figure 7: Intersection of IP links inferred for 500
random addresses using three load-balancer trace-
route techniques.
cluding an operation to retrieve tuples by simple pattern
matching.
4.2 Dataset
We use Marinda to perform coordinated large-scale topol-
ogy measurements on the Ark infrastructure using a process
we call team probing.
In team probing, monitors dynami-
cally divide the work of probing to a random destination in
every routed /24. This parallelisation allows us to obtain
a traceroute measurement to all routed /24’s in a relatively
short period of time: about 48 hours for a team of 13 mon-
itors probing 7 million /24’s at 100pps. One pass through
every routed /24 is called a cycle, and a team continues to
the next cycle when it has ﬁnished probing all /24’s. In a
given cycle, each /24 receives a traceroute from only a single
monitor per team. This probing approach diﬀers from our
past skitter measurements, in which each monitor probed
every destination on each cycle.
The Ark project currently has two teams active. Each
team independently probes the same set of routed /24’s,
but to diﬀerent random destinations within each /24, and
typically to diﬀerent /24’s at any given moment in time.
We probe the set of /24’s themselves, as well as the destina-
tions within each /24, in random order2 to avoid patterns in
2The random ordering of /24’s is the same across all cycles.