### 4. Ark Data Analysis

In this section, we analyze the reachability and loop rates observed for UDP and ICMP-Paris traceroutes in the first seven months of IP topology data collected on Ark [18].

#### 4.1 Ark Background

Ark is CAIDA's newest active measurement infrastructure, designed as the next generation of the skitter infrastructure that CAIDA operated for nearly a decade. The distinguishing feature of Ark is its focus on coordination. Coordination, broadly speaking, involves planning, executing, and controlling an ensemble of distributed computations [26, 27]. It is the meta-activity that surrounds a computation.

To facilitate coordination, Ark provides a new implementation called Marinda, which is based on the well-known tuple-space coordination model first introduced by David Gelernter in his Linda coordination language [28, 29]. A tuple space is a distributed shared memory combined with operations, including an operation to retrieve tuples by simple pattern matching.

#### 4.2 Dataset

We use Marinda to perform coordinated large-scale topology measurements on the Ark infrastructure using a process called team probing. In team probing, monitors dynamically divide the work of probing to a random destination in every routed /24. This parallelization allows us to obtain a traceroute measurement to all routed /24s in a relatively short period of time: about 48 hours for a team of 13 monitors probing 7 million /24s at 100 pps. One pass through every routed /24 is called a cycle, and a team continues to the next cycle when it has finished probing all /24s. In a given cycle, each /24 receives a traceroute from only a single monitor per team. This probing approach differs from our past skitter measurements, in which each monitor probed every destination on each cycle.

The Ark project currently has two teams active. Each team independently probes the same set of routed /24s but to different random destinations within each /24 and typically to different /24s at any given moment in time. We probe the set of /24s themselves, as well as the destinations within each /24, in random order to avoid patterns. The random ordering of /24s is the same across all cycles.

### 3. Results

#### 3.1.6 Probe Generation

We examined the workload generated by various probing methods in terms of the number of probes sent to the network. Since scamper runs at a constant packets per second rate regardless of the probing method, the probe count is a reasonable approximation of the time a measurement will take. For cbg-uk, ICMP-Paris sent the fewest packets with 6,943,071, followed by TCP at 7,033,384 and UDP-Paris with 7,122,459. ICMP-Paris had a slight edge, sending 2.5% fewer packets than UDP-Paris.

#### 3.1.7 Enumeration of All Hops per Method

Since the UDP-Paris, ICMP-Paris, and TCP probe methods reveal different sets of IP links, we became curious about the extensiveness of forwarding policies for different protocol types. To investigate further, we implemented a per-flow load-balancer traceroute in scamper similar to that of Augustin et al. [15] to enumerate all links that could be observed between a source and a destination. The three methods implemented were UDP and TCP traceroute methods, which vary the source port but keep the destination port constant, and an ICMP traceroute method, which varies the ICMP checksum. In the UDP and TCP cases, we kept the destination port constant to receive consistent treatment by firewalls in the path.

We probed with the three methods from san-us to 500 addresses chosen using the procedure of Section 2.4.1. We used the same stochastic approach as Augustin et al. [15] to send sufficient probes with varying flow identifiers to reach 99% confidence that we had observed all links forward from a hop. We did not probe beyond any unresponsive hops or load balancers we inferred to forward on a per-packet basis.

Figure 7 shows the intersection of IP links observed by each method. In total, we enumerated 3,899 IP links; 68% of these links were common to all three methods, rising to 82% in common between TCP and UDP. In total, we detected 619 load-balancer interfaces; the next-hop for 222 (36%) of these varied with IP protocol. This confirms our hypothesis that the sequence of hops visited will vary based on the IP protocol used.

#### 3.2 Website Probing Results

Table 9 lists the halt reasons for all methods using the website list from san-us. At the time of probing, 95.3% of webservers were reachable with tcptraceroute. However, less than half of these webservers were reachable when probing with a UDP method, and only three-quarters of them with an ICMP method. In these cases, the proportion of traceroutes that halt after five consecutive unresponsive hops increases significantly. This indicates that a firewall was silently discarding traceroute probes from reaching the intended destination.

#### 3.3 Router Probing Results

Table 10 lists the halt reasons for all methods using the router list from san-us. As with the website list, most of the targets should be up; in this case, we expect them to be active because we recently received an ICMP time exceeded message from them. ICMP-based methods are most effective for this router destination list, reaching approximately 84% of the list. The UDP and TCP probe methods both reach approximately 68% of the routers in the list, with the UDP methods reaching slightly more than the TCP method.

### Figures and Tables

**Figure 4:** Uniqueness of complete IP paths by the combinations of methods that see them for the random routable address list. The vantage point has more impact than the method on the number of complete IP paths observed and their uniqueness to each method.

**Figure 5:** Uniqueness of IP links by the combinations of methods that see them for the random routable address list. UDP-Paris infers the most IP links despite reaching the fewest destinations. Looking at cbg-uk: UDP-Paris 89.1%, ICMP-Paris 88.7%, and TCP 87.4%.

**Figure 6:** Uniqueness of inferred AS links by the combinations of methods that see them for the random routable address list. ICMP-Paris infers the most AS links due to reaching the most destinations. Looking at cbg-uk: ICMP-Paris 92.3%, TCP 92.2%, and UDP-Paris 87.2%.

**Figure 7:** Intersection of IP links inferred for 500 random addresses using three load-balancer traceroute techniques.

**Table 9:** Traceroute method halt reasons for the top 500 website address list. 422 addresses were probed.
| Method | Reached | ICMP-unreach | Loop | Gaplimit |
|--------|---------|--------------|------|----------|
| UDP    | 182 (43.0%) | 18 (4.3%) | 14 (3.3%) | 209 (49.4%) |
| UDP-Paris | 182 (43.0%) | 15 (3.5%) | 10 (2.4%) | 216 (51.1%) |
| UDP-Paris DNS | 196 (46.3%) | 11 (2.6%) | 10 (2.4%) | 206 (48.7%) |
| ICMP   | 323 (76.4%) | 10 (2.4%) | 11 (2.6%) | 79 (18.7%) |
| ICMP-Paris | 324 (76.6%) | 8 (1.9%) | 9 (2.1%) | 82 (19.4%) |
| TCP port 80 | 404 (95.5%) | 0 | 9 (2.1%) | 10 (2.4%) |

**Table 10:** Traceroute method halt reasons for router address list. 2000 addresses were probed.
| Method | Reached | ICMP-unreach | Loop | Gaplimit |
|--------|---------|--------------|------|----------|
| UDP    | 1383 (69.2%) | 117 (5.8%) | 34 (1.7%) | 466 (23.3%) |
| UDP-Paris | 1399 (70.0%) | 117 (5.8%) | 16 (0.8%) | 468 (23.4%) |
| UDP-Paris DNS | 1364 (68.2%) | 119 (6.0%) | 16 (0.8%) | 501 (25.1%) |
| ICMP   | 1690 (84.5%) | 118 (5.9%) | 27 (1.4%) | 165 (8.2%) |
| ICMP-Paris | 1702 (85.1%) | 116 (5.8%) | 16 (0.8%) | 166 (8.3%) |
| TCP port 80 | 1342 (67.1%) | 133 (6.7%) | 14 (0.7%) | 511 (25.6%) |