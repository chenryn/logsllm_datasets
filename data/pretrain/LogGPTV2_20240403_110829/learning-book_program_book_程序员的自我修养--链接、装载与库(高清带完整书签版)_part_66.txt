程序员的自我修养一链接、装载与库
---
## Page 380
11.4C++全局构造与析构
357
tiddata 这样一个结构存在，那么很明显是_endthread(释放的，这电正是CRT的做法。
不过我们很多时候会发现，即使使用CrcateThreadO和ExitThrcad(（不调用ExitThread()）
值接退出线程函数的效果相问），也不会发现任何内存泄露，这又是为什么呢？经过仔
细检查之后，我们发现原来密码在CRT DLL的入口函数DIlIMain中。我们如道，当一
个进程/线程开始或退出的时候，每个DLL的DlMain都会被调用一次，于是动态链接
版的 CRT就有机会在DlIMain中释放线程的_tiddata。可是DIIMain只有当CRT是动态
链接版的时候才起作用，静态链接CRT是没有DlMain的！这就是造成使用
CreateThread(会导致内存泄露的一种情况，在这种情况下，_tiddata在线程结束时无法
释效，进成了泄露。我们可以用下面这个小程序来测试：
include 
include 
char* r = strtok( *aae*, *b* ):
ExitThread（0）：//这个函数是否调用都无所请
int nain(int argc, char* argv [11
whi1e(1)(
CreateThread( 0, 0, (LPTHREAD_START_ROUTINE) thread, 0, O, 0 );
Sleep( 5 1:
return 0;
如果用动态链接的CRT（/MD，/MDd）就不会有问题，但是，如果使用静态链接CRT
（/MT，/MTd），运行程序后在进程管理器中观察它就会发现内存用量不停地上升，但
是如果我们把thread(函数中的ExitThread()改成_endthread(就不会有问题，因为
_endthread(）会将_tiddata(释放。
这个问题可以总结为：当使用CRT时（基本上所有的程序都使用CRT），请尽量使用
_beginthreadO/_beginthreadex()/_endthread()/_endthreadex(这组函数来创建线程。在
MFC中，还有一组类似的函数是AfxBeginThreadO和AfxEndThread()，根据上面的原
理类推，它是MFC层面的线程包装函数，它们会维护线程与MFC相关的结构，当我
们使用MFC类库时，尽量使用它提供的线程包策函数以保证程序运行正确。
11.4C++全局构造与析构
在C++的世界里，入口函数还肩负着另一个观巨的使命，那就是在main的前后完成全
局变量的构造与析构。本节将介绍在glibc和MSVCRT的努力下，这件事是如何完成的。
程序员的自我修养一—链接、装载与库
---
## Page 381
358
第11章运行库
11.4.1glibc全局构造与析构
在前面介绍glibe的启动文件时已经介绍了“init”和“.finit”段，我们知道这两个段中
的代码最终会被拼成两个函数_initO和_finitO.这两个函数会先于/后于main函数执行。但
是它们具体是在什么时候被执行的呢？由谁来负责调用它们呢？它们又是如何进行全局对
象的构造和析构的呢？为了解决这些间题，这一节将继续沿若本章第一节从_start入口函数
开始的那条线进行模索，顺藤摸瓜地找到这些问题的答案。
为了表述方便，下面使用这样的代码编译出来的可执行文件进行分析：
class He1loWor1d
pub1ic:
Hellowor1d();
He1loWor1d() ;
1 :
He11oWor1d: :He11oWor1d()
HelloWorld Hw;
He11oWor1d: :~He11oWor1d()
.....
int main()
return 0:
为了了解全局对象的构造细节，对程序的启动过程进行更深一步的研究是必须的。在本
章的第一节里，由_start传递进来的init函数指针究竞指向什么？通过对地址的跟踪，init
实际指向了_libc_csu_init函数。这个函数位于Glibc源代码目录的csuElf-init.c，让我们来
看看这个函数的定义：
_start -> __libc_start_main -> _1ibc_csu_init:
void _libc_csu_init (int argc, char **argv, char **envp)
_inft ():
const size_t size = _init_array_end -
for (size_t i - 0; 1 :
80480f4:
80480f51
Sa 68
55
push
tebp
80480f7 :
mov
push
tesp, $ebp
80480f8:
5.3
83 ec 04
Bub
tebx
80480fb:
e8 00 00 00 00
ca11
8048100 
$0x4, $esp
8048100:
8048101:
81 c3 9c 39 07 00
5b
pop
add
$0x7399c,$ebx
tebx
8048107 :
8b 93 fc ff ff ff
804810d:
85 d2
mOV
test
- 0x4 ($ebx) , $edx
804810f :
7405
8048116 
$edx, tedx
8048111:
e8 ea 7e fb f7
ca11
Je
0_
80481161
00 50 a9 09 8a
e8 95 00 00
00
ca11
80481b0 
804811b:
ca11
809efd0 
8048120:
5b
58
pop
teax
8048121:
pop
$ebx
8048123:
8048122 :
c9
c3
ret
leave
可以看到_init 调用了—个叫做_do_global_ctors_aux 的函数，如果你在 glibc 源代码里
面查找这个函数，是不可能找到它的。因为它并不属于glibc，而是来自于GCC提供的一个
目标文件crtbegin.o。我们在上一节中也介绍过，链接器在进行最终链接时，有一部分目标
文件是来自于GCC，它们是那些与语言密切相关的支持函数，很明显，C++的全局对象构
造是与语言密切相关的，相应负责构造的函数来自于GCC也非常容易理解。
即使它在GCC的源代码中，我们也把它揪出来，它位于gcc/Crtstuff.e，把它简化以后
代码如下：
_start -> _libc_start_main -> _libc_csu_init => _init ->
_do_global_ctors_aux:
void __do_globa1_ctors_aux(void)
/* Call constructor functions.
unsigned long nptr8 = (unsigned long) CroR_LIST_[0} ;
*/
unsigned i1
for [i = nptrs; i >= 1; i--1
_CTOR_LIST_{11 () :
程序员的自我修养一链接、装载与库
---
## Page 383
360
第11章运行库
上面这段代码首先将_CTOR_LIST_数组的第一个元素当做数组元素的个数，然后将
第一个元素之后的元素都当做是函数指针，并一一调用。这段代码的意图非常明显，我们都
可以猜到_CTOR_LIST_里面存放的是什么，没错，_CTOR_LIST_里面存放的就是所有
全局对象的构造函数的指针。那么接下来的焦点很明显就是二CTOR_LIST了，这个数组
怎么来的，由谁负责构建这个数组？
_CTOR_LIST
这里不得不暂时放下_CTOR_LIST_的身世米历，从GCC方面再追究_CTOR_LIST_
末免有些乏味，我们不妨从问题的另一端，也就是从编译器如何生产全局构造函数的角度来
看看全局构造函数是怎么实现的。
对于每个编译单元（cPP)，GCC编译器会通历其中所有的全局对象，生成一个特殊的函
数，这个特殊函数的作用就是对本编译单元里的所有全局对象进行初始化。我们可以通过对
本节开头的代码进行反汇编得到一些粗略的信息，可以看到GCC在目标代码中生成了一个
名为_GLOBAL_LHw的函数，由这个函数负责本编译单元所有的全局静态对象的构造和
析构，它的代码可以表示为：
static void GLoBAL_1_Hw (void)
Hw::Hw():/ /构造叶象
atexit（_ccf_1)：/ /一个神秘的函数叫做__tcf_1核注册到了exit
我们暂且不管这里的神秘函数_tcf_1，它将在本节的最后部分讲到。GLOBAL_1_Hw
编译单元产生的目标文件（o）的“ctors”段里放置一个指针，这个指针指向的便是
GLOBAL_I_Hw。
那么把每个目标文件的复杂全局/静态对象构造的函数地址放在一个特殊的段里面有什
么好处呢？当然不为别的，为的是能够让链接器把这些特殊的段收集起来，收集齐所有的全
局构造函数后就可以在初始化的时候进行构造了。
在编译器为每个编译单元生成一份特殊函数之后，链接器在连接这些目标文件时，会将
同名的段合并在一起，这样，每个目标文件的.ctors段将会被合并为一个.ctors段，其中的内
容是各个目标文件的.ctors 段的内存拼接面成。由于每个目标文件的.ctors段都只存储了一个
指针（指向该目标文件的全局构造函数），因此拼接起来的.ctors段就成为了一个函数指针数
组，每一个元素都指向一个目标文件的全局构造函数，这个指针数组不正是我们想要的全局
构造函数的地址列表吗？如果能得到这个数组的地址，岂不是构造的问题就此解决了？
没错，得到这个数组的地址其实也不难，我们可以效仿前面“init”和“finit”拼决的
办法，对”ctor”段也进行拼凑。还记得在链接的时候，各个用户产生的目标文件的前后分
程序员的自我修养一链接、装载与库
---
## Page 384
11.4C++全局构造与析构
361
别还要链接上一个crtbegin.o和crtend.o吧？这两个glibc自身的目标文件同样具有.ctors段，
在链接的时候，这两个文件的.ctors段的内容也会被合并到最终的可执行文件中。那么这两
个文件的.ctors段里有什么呢？
crtbegin.o：作为所有.ctors 段的开头部分，crtbegin.o的.ctor段里面存储的是一个4字
节的-1(0xFFFFFFFF），由链接器负责将这个数字改成全局构造函数的数量，然后这个
段还将起始地址定义成符号_CTOR_LIST_，这样实际上_CTOR_LIST_所代表的就
是所有.ctor段最终合并后的起始地址了。
crtend.o：这个文件里面的.ctors内容就更简单了，它的内容就是一个0.然后定义了一
个符号_CTOR_END_，指向.ctor段的末尾。
在前面的章节中已经介绍过了，链接器在链接用户的目标文件的时候，crtbegin.o总是
处在用户目标文件的前面，面crtend.o则总是处在用户目标文件的后面。例如链接两个用户
的目标文件a.o和b.o时，实际链接的目标文件将是（按顺序）ld crti.o crtbegin.oa.o b.o crtend.o
crtn.o。在这里我们忽略crtio和crtn.o，因为这两个目标文件和全局构造无关，在合并
crtbegin.o、用户目标文件和crtend.o时，链接器按顺序拼接这些文件的ctors 段，因此最终
形成.ctors段的过程将如图11-10所示。
CTOR_LIST
CTOR_END
图11-10.ctor段的形成
程序员的自我修养—链接、装载与库
---
## Page 385
362
第11章运行库
在了解了可执行文件的.ctors 段的结构之后，再回过头来看_do_global_ctor_aux 的代码
就很容易了。_do_global_ctor_aux从_CTOR_LIST_的下一个位置开始，按顺序执行函数
指针.直到遇上NULL（_CTOR_END_）.如此每个目标文件的全局构造函数都能被调用。
【小实验】
在main 前调用函数：
glibc的全局构造函数是放置在.ctors 段里的，国此如果我们手动在.ctors 段里添加一些
函数指针，就可以让这些函数在全局构造的时候（main之前）调用：
void my_init (void)
#include 
printf(*He11o *)
typedef void (*ctor_t) (void) :