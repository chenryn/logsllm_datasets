2.3
修改函数返回地址
2.3.1
返回地址与程序流程
上节实验介绍的改写邻接变量的方法是很有用的，但这种漏洞利用对代码环境的要求相对
53
---
## Page 79
0
day
比较苛刻。更通用、更强大的攻击通过缓冲区溢出改写的目标往往不是某一个变量，而是瞄准
安
栈帧最下方的EBP和函数返回地址等栈帧状态值。
全
回顾上节实验中输入7个‘9’程序正常运行时的栈状态，如表2-3-1所示。
软
表2-3-1
栈帧数据
件
局部变量名
内存地址
偏移3处的值
偏移2处的值
偏移1处的值
偏移0处的值
漏
buffer
0x0012FB18
0x71 (q′)
0x71 (°q′)
0x71(q)
0x71 (q′)
洞
分析
0x0012FB1C
NULL
0x71 (q')
0x71(q°)
0x71(°q′)
authenticated
0x0012FB20
0x00
0x00
0x00
10x0
技
前栈帧EBP
0x0012FB24
0x00
0x12
OxFF
0x80
术
返同地址
0x0012FB28
0x00
0x40
0x10
OxEB
（第
如果继续增加输入的字符，那么超出buffer[8]边界的字符将依次淹没authenticated、前栈
2
帧EBP、返回地址。也就是说，控制好字符串的长度就可以让字符串中相应位置字符的ASCII
版
码覆盖掉这些栈帧状态值。
按照上面对栈帧的分析，不难得出下面的结论。
（1）输入11个‘q”，第9～11个字符连同NULL结束符将authenticated冲刷为0x00717171。
（2）输入15个‘q'，第9~12个字符将authenticated冲刷为0x71717171：第13～15个字
符连同NULL结束符将前栈顿EBP冲刷为0x00717171。
（3）输入19个‘q'，第9~12个字符将authenticated冲刷为0x71717171：第13～16个字
将前栈帧EBP冲刷为0x71717171：第17~19个字符连同NULL结束符将返回地址冲刷为
0x00717171。
这里用19个字符作为输入，看看淹没返回地址会对程序产生什么影响。出于双字对齐的
目的，我们输入的字符串按照“4321”为一个单元进行组织，最后输入的字符串为
“4321432143214321432”，运行情况如图2.3.1所示。
D:yb
lered a problem and
Pleoce tollMicoshabou hinprobl
To mwe nhgt dele thn e
repol conlan, chck.ho
Debo
SerdEnRepotDnt Send
图2.3.1栈溢出导致程序崩溃
---
## Page 80
第
用OllyDbg加载程序，在字符串复制函数调用结束后观察栈状态，如图2.3.2所示。
2
实际的内存状况和我们分析的结论一致，此时的栈状态如表2-3-2所示。
章
表2-3-2
栈帧数据
栈
溢
局部变量名
内存地址
偏移3处的值
偏移2字节
偏移1字节
偏移0字节
出
buffer[0~3]
0x0012FB18
0x31('1′)
0x32(*2')
0x33(*3')
0x34 (4')
原
buffer[4~7]
0x0012FBIC
0x31(1′)
0x32(2')
0x33(*3)
0x34(*4')
理与实
authenticated（被覆盖前）
0x0012FB20
0x00
0x00
0x00
10x0
authenticaled（被覆盖后）
0x0012FB20
0x31 (1′)
0x32(*2')
0x33 (*3')
0x34 (*4')
践
前栈帧EBP（被覆盖前）
0x0012FB24
00x0
0x12
OxFF
0x80
前栈顿EBP（被覆盖后）
0x0012FB24
0x31 (*1')
0x32(*2')
0x33(*3')
0x34 (4')
返回地址：（被覆盖前）
0x0012FB28
0x00
0x40
0x10
OxEB
返回地址：（被覆盖后）
0x0012FB28
0x00(NULL)
0x32('2')
0x33 ('3')
0x34 (°4')
5514
LEA.
DFIRSS:[P-C)
7FFUFEai
01059
ISFV
EA
ESP.8
eex01est
RDPISS:[DP-4]
0P012F824a5C11*4321422
:B1
ASCIN
SF.
IP
tark
SCTE
authenticated
前栈EBP
函数返回地址
图2.3.2溢出前栈中的布局
前面已经说过，返回地址用于在当前函数返回时重定向程序的代码。在函数返回的“retn”
指令执行时，栈顶元素恰好是这个返回地址。“retn”指令会把这个返回地址弹入EIP寄存器，
之后跳转到这个地址去执行。
在这个例子中，返回地址本来是0x004010EB，对应的是main函数代码区的指令，如图2.3.3
所示。
55
---
## Page 81
day安全：
0
Eal stack o.printt
SD3I ICIEIFFI
LIRFES.
E22e
PUSUISL1StackaO.YCe82DILLS
PIRS1G
EOLL
ornat
U.SCaR
软件漏洞分析技术
PIR SSEHF
30 E5P,
SS/ETEES
SH03T14k_0.001106
686284
PISE ArFSETsLck_ao
87F60638
Call
stack_ao.printf
P3SBS1Ka.80
JIIP
FHBRS
Leck ov.Bahal115
Cait stack_ov.printf
（第2版）
图2.3.3正常情况下函数返回后的指令
现在我们已经把这个地址用字符的ASCⅡI码覆盖成了0x00323334，函数返回时的状态如
图2.3.4所示。
我们可以从调试器中的显示看出计算机中发生的事件。
（1）函数返回时将返回地址装入EIP寄存器。
（2）处理器按照EP寄存器的地址0x00323334取指。
（3）内存0x00323334处并没有合法的指令，处理器不知道该如何处理，报错。
图2.3.4溢出后程序返回到无效地址0x00323334
由于0x00323334是一个无效的指令地址，所以处理器在取指的时候发生了错误使程序崩
56
---
## Page 82
第
溃。但如果这里我们给出一个有效的指令地址，就可以让处理器跳转到任意指令区去执行（比
2
如直接跳转到程序验证通过的部分），也就是说，我们可以通过淹没返回地址而控制程序的执
章
行流程。以上就是通过淹没栈帧状态值控制程序流程的原理，也是本节实验要做的事。
栈
2.3.2控制程序的执行流程
溢
出
用键盘输入字符的ASCII表示范围有限，很多值（如0x11、0x12等符号）无法直接用键
原
理
盘输入，所以我们把用于实验的代码稍作改动，将程序的输入由键盘改为从文件中读取字符串。
与
#include
实
#define PASSWORD*1234567*
践
int verify_password (char *password)
（
int authenticated;
char buffer[8];
authenticated=strcmp(password,PAsswORD);
strcpy(buffer,password);//overflowed here!
return authenticated;
)
main()
int valid_flag=0;
char password[1024];
FILE*fp:
if(!(fp=fopen("password.txt","rw+")))
exit(0);
，
fscanf(fp,"es",password);
valid_flag-verify_password(password);
if(valid_flag)
else
printf('Congratulation! You have passed the verification!\n*):
fclose（fp);
以上节实验中的代码为基础，稍作修改后得到上述代码。程序的基本逻辑和上一节中的代
码大体相同，只是现在将从同目录下的password.txt文件中读取字符串，而不是用键盘输入。
我们可以用十六进制的编辑器把我们想写入但不能直接键入的ASCII字符写进这个
password.txt文件。
57
---
## Page 83
0
day
实验环境如表2-3-3所示。
安
表2-3-3实验环境
全
推荐使用的环境
备注
软
操作系统
Windows XP SP2
其他Win32操作系统也可进行本实验
件
编译器
Visual C++ 6.0
如使用其他编详器，需重新调试
漏
编译选项
默认编译选项
VS2003和VS2005中的GS编译选项会使栈溢出实验失败
洞
分
build版本
debug版本
如使用release版本，则需要重新调试
析
如果完全采用实验指导所推荐的实验环境，将精确地重现指导中所有的细节，否则需要根
技
术
据具体情况重新调试。
用VC6.0将上述代码编译链接（使用默认编译选项，Build成debug版本），在与PE文件
第
同目录下建立password.txt并写入测试用的密码之后，就可以用OllyDbg加载调试了。
2
开始动手之前，我们先理清思路，看看要达到实验自的我们都需要做哪些工作。
版
（1）要摸清楚栈中的状况，如函数地址距离缓冲区的偏移量等。这虽然可以通过分析代码
得到，但我还是推荐从动态调试中获得这些信息。
（2）要得到程序中密码验证通过的指令地址，以便程序直接跳去这个分支执行。
（3）要在password.txt文件的相应偏移处填上这个地址。
这样verify_password函数返回后就会直接跳转到验证通过的正确分支去执行了。
首先用OllyDbg加载得到可执行PE文件，如图2.3.5所示。
PUISI t02
UEXDORDPTR SS:[AP-40R]
ct stack ov.fseanf
strean
1s08e2naea
BDS5 FEFRFFFF
FAD%OUORD PIR SS:[F8F-404]
PISEED
110:
stack_oo.ea1
00110A
EDPTE SS:[EBP 41.EAX
3
CIP DRD PIRSS:[EBP-A1.
e1stack au.eDhe112
30N701
H118583 80L
ernt
"incetrect passeord
801118
tah38
aDDESP,4
JIPSHOE
E1stack_o9.B8h0112F
3
ornat
881120
SiBEFEI
]
E8 1sereaea
cAlL stack ow.fclose
PUSH ER
08521138