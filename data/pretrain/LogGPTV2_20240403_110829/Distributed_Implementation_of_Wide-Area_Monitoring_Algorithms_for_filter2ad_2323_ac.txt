of N PDCs, S k must be active infinitely often with probability
1 [20]. By virtue of this algorithm, the real-time nature for
solving (7) can still be maintained despite asynchronous delays
in the SDN.
C. Architecture 2: Distributed Prony using Distributed ADMM
(D-ADMM)
Consider again the problem (7). The S-ADMM and the
A-ADMM algorithms discussed for Architecture 1 need a
central PDC to update z at each iteration, and to broadcast
it back to the local active PDCs. Although this architecture
preserves the data privacy between the N PDCs, it is not very
resilient as the central PDC is directly amenable to failure under
extraneous attacks. This problem can be resolved by resorting
to a completely distributed version of Architecture 1 as shown
in Fig. 3. The resulting distributed algorithm for solving (7)
is referred to as distributed ADMM (D-ADMM). In this
formulation, each active PDC at each iteration communicates
directly with a subset of other active PDCs determined by a
communication graph G. Therefore, the need for the central
PDC no longer exists. The set of nodes of the communication
graph G, denoted by V(G), are the indexed PDCs of the
network, i.e., V(G) = {1, 2, . . . , N}. The edge set of G is
denoted by E(G), where ejv ∈ E(G) determines the existence
of a communication link between PDCs j and v. We consider
the following assumptions for the graph G: 1) G is known
a-priori and is considered to be fixed during the iterations.
2) G is a simple1 and connected2 graph. Before stating the
main algorithm, we define an alternative representation of (7)
using the communication graph G as follows:
(cid:107) ˆHjaj − ˆcj(cid:107)2
minimize
a1,...,aN
subject to aj − av = 0, for ejv ∈ E(G).
1
2
j=1
(14)
Since G is connected, then the reformulated problem (14)
is equivalent to (7) [22]. Now, let us define two sets of
predecessors and successors of PDC j, denoted respectively
by Pj and Sj as
Pj = {PDC v | ejv ∈ E(G), v  j}.
(15a)
(15b)
Let n(Pj) and n(Sj) denote the number of elements of the
sets Pj and Sj, respectively. Also, let us define the Lagrangian
associated with (14) at iteration k as
L(cid:48)k
ρ =
(cid:0)(cid:107) ˆH k
j aj − ˆck
j (cid:107)2 + ρ(
(cid:88)
(cid:107)ak+1
N(cid:88)
(cid:107)aj − ak
v − 1
ρ
v∈Pj
jv(cid:107)2) − 1
wk
ρ
(
v − aj − 1
(cid:88)
ρ
vj(cid:107)2 +
(cid:107)wk
vj(cid:107)2+
wk
(cid:88)
(cid:107)wk
jv(cid:107)2)(cid:1),
v∈Pj
v∈Sj
(16)
N(cid:88)
(cid:88)
j=1
1
2
v∈Sj
1A graph with no self-loop or multiple edges between two nodes.
2A graph that has at least one path between any two arbitrary nodes.
5
Fig. 3: Architecture 2 using D-ADMM for a given communication graph G
for a 4-area network.
where wjv is the dual variable associated with the edge ejv ∈
E(G), and ρ > 0 is the penalty factor. Using these definitions,
we next present the D-ADMM algorithm for solving (14).
Distributed Prony using Distributed ADMM
1) Each PDC j initializes a0
j and w0
vj, j ∈ V(G), evj ∈
E(G).
2) At iteration k, every PDC j, j = 1, . . . , N:
for all v ∈ Pj.
v
a) Receives the update of ak+1
b) Updates ˆHj and ˆcj using (9).
c) Updates aj as:
ak+1
j = arg min
aj
j )T ˆH k
(cid:48)k
L
ρ
j + ρ(n(Pj) + n(Sj))I2n
where κk
j = ( ˆH k
j )T ˆck
j +
wk
(cid:1)−1κk
jv − (cid:88)
v∈Pj
j ,
(17)
wk
vj +
(cid:88)
v∈Sj
=(cid:0)( ˆH k
(cid:88)
(cid:88)
v∈Sj
ak+1
v +
ak
v).
ρ(
v∈Pj
d) Updates all wvj for l ∈ Pj as:
vj − ρ(ak+1
wk+1
v − ak+1
j
).
j
e) Sends ak+1
f) Sends wk+1
g) Receives ak+1
vj
v
vj = wk
to all PDCs in Pj ∪ Sj.
to v ∈ Pj.
and wk+1
jv
from all v ∈ Sj.
At every iteration k, the primal variables ak
j are updated
sequentially starting from PDC 1 to PDC N using the most
recent available values of av for v belonging to its predecessors
and successors. PDC j also updates the dual variables wvj for v
belonging to Pj. This algorithm also has a convergence rate of
O( 1
k ), and can be realized using asynchronous ADMM [22].
D. Architecture 3–Distributed Prony using Hierarchical
ADMM (H-ADMM)
Let us consider again the Prony formulation in Architecture 1
where every area is assumed to contain only one aggregated
PDC. However, if p, the number of PMUs is large, a better
strategy will be to create multiple hierarchical layers of PDCs
so that the computational load of the global estimation gets
divided, as shown in Fig. 4. Let us divide the entire network
PMUPMUPMUPMU(cid:537)11(t)(cid:537)12(t)(cid:537)31(t)(cid:537)32(t)(cid:537)21(t)(cid:537)22(t)(cid:537)41(t)(cid:537)42(t)Area 1Area 3Area 2Area 4CommunicationGraphG1ka212kkaw1ka3ka4ka1ka3ka434kkaw14kw13kw6
Note that the solution of H-ADMM is equal to that of an
equivalent S-ADMM problem with N areas, each containing
exactly one PDC. Table I compares the three proposed
architectures in terms of their various properties.
V. CASE STUDIES
A. IEEE 68-bus Model
To verify the distributed Prony algorithms described in
Section IV, we first consider the IEEE 68-bus system shown
in Fig. 5. The system is divided into 5 areas, each with one
local PDC and 3 PMUs as shown in Fig. 5. The simulated
measurements are obtained using the Power Systems Toolbox
(PST) nonlinear dynamics simulation routine s_simu and
the data file data16m.m [23]. The synchronous generators
in this model are assumed to be 6th order for the sake of
practicality. A three-phase fault is considered occurring at the
line connecting buses 1 and 2. The fault starts at t = 0.1
sec, clears at bus 1 at t = 0.15 sec and at bus 2 at t = 0.20
sec. The measurements are downsampled and the sampling
period T is increased up to up to 0.2 seconds. Our objective
is to estimate the post-fault inter-area oscillation modes of the
system. Since there are 16 generators, our proposed algorithms
should ideally solve a 96th order polynomial. However, several
of these 96 eigenvalues have negligible residues in (2), as a
result of which, the practical order can be chosen to be a
much smaller number. In fact, in our simulations we show
that choosing 2n = 40 yields a satisfactory estimates of the
inter-area modes. The initial 10 samples (2 seconds) of the
measurements are gathered before starting the optimization
iterations. We set ρ = 10−9.
1) Results of Distributed Prony using S-ADMM: We first
deploy the Prony algorithm using S-ADMM. Fig. 6a shows
how the estimates of σ and Ω per iteration converges to their
global values for four selected slow modes after 50 iterations.
The dashed lines show the actual values of σ and Ω for these
four modes obtained from PST. Fig. 8 also compares the errors
per iteration of S-ADMM with the other three algorithms. As
the curves show, the error in all algorithms converge to zero
asymptotically.
2) Results of Distributed Prony using A-ADMM: For the
asynchronous case, the active PDCs in each iteration are chosen
Fig. 5: IEEE 68-bus model.
Fig. 4: Architecture 3 using H-ADMM for a network consisting of four areas.
into r computational areas, where each area contains multiple
layers of PDCs. Each PDC receives measurements from a
subset of the total number of PMUs in that area. We assume
these subsets to be disjoint. For each PDC j in layer (cid:96) of Area l,
let Qj denote the set of the PDCs in layer (cid:96) − 1 from which
it receives information, and let Uj denote the set containing
a single PDC in layer (cid:96) + 1 to which it sends information.
Also, without loss of generality, let us assume that the final
layer in every area consists of exactly one PDC. This PDC
is referred to as the leader PDC for any Area l, l = 1, . . . , r.
Every leader PDC is connected to the central PDC at the ISO
through an inter-area communication link. For example, in the
system shown in Fig. 4, we have r = 4 areas with 2 layers of
PDCs in each. PDCs 1b and 1c belong to layer 1 while PDC 1c
is the leader PDC of Area 1. Similar notations have been used
for the other areas. Using these definitions, distributed Prony
using the Hierarchical ADMM (H-ADMM) can be described
as follows:
Distributed Prony using the Hierarchical ADMM
1) Every PDC j initializes a0
2) At each iteration k:
j, z0, and w0
j , j = 1, . . . , N.
a) PDC j belonging to layer (cid:96) of Area l constructs ˆH k
j
b) PDC j receives the values of zk+1
from all PDCs v
and ˆck
j from (9).
belonging to Qj.
v
j +(cid:80)
j
using (11).
j = ak+1
c) PDC j computes ak+1
d) PDC j calculates zk+1
e) If PDC j is not the leader PDC of Area l, it transmits
to the PDC v belonging to Uj. If PDC j is the
to the
zk+1
j
leader PDC l, then it transmits zk+1
central PDC.
(cid:44) zk+1
zk+1
v
v∈Qj
.
l
f) The central PDC receives zk+1
from the leader PDC
l
l, l = 1, . . . , r.
.
g) The central PDC calculates zk+1 = 1
N
h) The central PDC broadcasts zk+1 to the r leader
PDCs through an inter-area communication network.
i) The leader PDC l broadcasts zk+1 to all PDCs in
Area l through an intra-area communication network.
using (13).
j) Every PDC j in Area l computes wk+1
l=1 zk+1
l
j
j
(cid:80)r
(cid:537)11b(t)(cid:537)21b(t)(cid:537)11a(t)(cid:537)21a(t)(cid:537)11c(t)(cid:537)21c(t)(cid:537)13b(t)(cid:537)23b(t)(cid:537)13a(t)(cid:537)23a(t)(cid:537)13c(t)(cid:537)23c(t)(cid:537)22a(t)(cid:537)12a(t)(cid:537)22b(t)(cid:537)12b(t)(cid:537)22c(t)(cid:537)12c(t)(cid:537)14b(t)(cid:537)24b(t)(cid:537)14a(t)(cid:537)24a(t)(cid:537)14c(t)(cid:537)24c(t)1ka2ka3ka4kakakakakaCentral(cid:3)PDCat(cid:3)ISOArea 1Area 3Area 2Area 466G1441G15G10G164048474267526813031626338G11329333435464950514544393743G136536G1264G2548765414131211G35510151632G15325G86018172627282961G919G456G5572024212322G65859G7PMUPMUPMUPMUPMUPMUPMUPMUPMUPMUPMUPMUPMUPMUPMUArea 3Area 2Area 1Area 4Area 5TABLE I: Comparison between three different architectures
7
Architecture
Resilience
S-ADMM low, single point failure
D-ADMM
H-ADMM low, single point failure
high, collaborative
Data Privacy Convergence Rate
high
low
low
O(1/k)
O(1/k)
O(1/k)
randomly with equal probability of 0.5 for a PDC to be either
active or dormant. Fig. 6b shows the estimates of σ and Ω
per iteration for each of the four selected modes. Compared
to S-ADMM, the convergence of this method is slower due to
the stochastic nature of the algorithm.
3) Results of Distributed Prony using D-ADMM: For the
distributed case, we consider the two communication graphs
G1 and G2 shown in Fig. 7. Figs. 6c and 6d show the mode
estimation per iteration for the four selected eigenvalues using
G1 and G2, respectively. These figures show that the estimates
of σ and Ω per iteration converges to their actual values
asymptotically using both G1 and G2. However, G2 has more
number of communication links compared to G1, which makes
it a less-favorable choice.
4) Results of Distributed Prony using H-ADMM: We now
consider each of the three PMUs in every area to be equipped
with its own PDC. Two of these PMU-PDC pairs are considered
to be in layer 1, while the third pair is considered to be in
layer 2. Fig. 6e shows the four selected eigenvalues converge