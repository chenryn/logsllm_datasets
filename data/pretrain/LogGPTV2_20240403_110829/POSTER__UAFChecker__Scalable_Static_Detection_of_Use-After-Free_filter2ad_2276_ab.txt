solution GUEB [16] in-lines callee functions directly into the
caller function. This solution has the serious limitation that a
function called many times needs to be analyzed repeatedly.
An example of inter-procedural analysis is shown in Fig. 5.
The (a) and (b) show the code and the control ﬂow of the
example. The results of the inter-procedural analysis using
the in-lining approach in GUEB are shown in (c). The func-
tions foo1 and foo2 are analyzed twice because the in-lining
approach always analyzes the callee function in detail at each
function call point. Although this example only has 3 func-
tions, the total number of functions to be analyzed is 5 due
to the redundant repeated analysis. The redundant analysis is
more serious in analyzing large-scale programs. Therefore,
the existing method has high performance overhead and is
not suitable for analyzing large-scale programs.
We introduce function summaries technique for
the
inter-procedural analysis to address this problem. First,
important behaviors of each function are summarized with an
intra-procedural analysis, such as creating, using and destroy-
ing dangling pointers. Then, when the analysis is enlarged to
an inter-procedural analysis, each function call is replaced by
its summary. Therefore, each function needs to be analyzed
only once, even if it is called many times.
FIGURE 5. Example of the inter-procedural analysis.
intra-procedural analysis. As described in Section II-A, three
kinds of operations related to pointers are focused on in use-
after-free detection. We consider generating summaries for
the functions that have these three kinds of operations.
1) GENERATING A SUMMARY FOR A SINGLE FUNCTION
This section describes which functions should be summarized
and how to generate a summary for a single function with an
a: DANGLING POINTERS CREATING FUNCTION
If a function makes an external pointer dangling after the
function is called, we call this function as a Dangling Pointers
78716
VOLUME 8, 2020
K. Zhu et al.: Scalable Static Detection of Use-After-Free Vulnerabilities in Binary Code
Creating Function (DPCF). The external pointers mean the
pointers that are not local variables in the function, gener-
ally including pointer-type arguments and global pointers.
In static analysis, when a function satisﬁes the following
conditions, a DPCF is identiﬁed.
1) The function uses a external pointer ext_ptr, that may
be a pointer-type argument arg_ptr or global pointer
glb_ptr.
2) There are operations, FREE(ext_ptr) or
FREE(Alias(ext_ptr)), to free ext_ptr or its aliases in
the function.
3) There are at least one path that does not contain
DESTROY(ext_ptr) from the point where ext_ptr or
its aliases are freed to the exit of the function.
A DPCF may have more than one such pointer. If F is
a DPCF, Dangling(F) represents the set of pointers satisfy-
ing the above conditions. Because the static analysis in our
approach is an over-approximation, all pointers in Dangling
(F) are considered dangling after F is called. Therefore,
the set of operations that free pointers in function F is con-
sidered as the summary of the function as follows:
Summary(F) = {FREE(ext_ptr)|ext_ptr ∈ Dangling(F)}.
In an intermediate representation, the offset relative to the
stack base BP of a function is used to represent the argument,
and the ﬁxed offset is used to represent the global pointer.
In particular, the function free in C is a DPCF, which makes
the ﬁrst argument become dangling. Thus, Summary(free) =
{FREE(arg0)}. A simple example is shown in Fig. 6 to
explain how to generate a summary for a single DPCF.
The function foo is a DPCF according to the above condi-
tions. The arguments, arg0 and arg1, are pointer-type argu-
ments and global_ptr is a global pointer. These pointers
are freed in lines 2, 3 and 4, respectively. There exists a
path that does not contain DESTROY from FREE(arg0) and
FREE(global_ptr) to the exit of the function. Thus, arg0
and global_ptr are considered dangling pointers after foo
is called. However, arg1 is not a dangling pointer because
it is redeﬁned in line 5. Therefore, the summary of foo is
Summary(foo) = {FREE(arg0), FREE(global_ptr)}.
FIGURE 6. Example of function summaries.
b: DANGLING POINTERS DESTROYING FUNCTION
Similarly, we deﬁne the Dangling Pointers Destroying Func-
tion (DPDF). If a function assigns an external pointer to a new
valid address or NULL after the function is called, we call this
function as a DPDF. It requires the following conditions to be
satisﬁed:
1) The function uses an external pointer ext_ptr.
2) The operations DESTROY(ext_ptr) exist in all paths
from the entry to the exit of the function.
Suppose F is a DPDF, the set of operations that destroy
pointers in the function is considered as its summary as
follows.
Summary(F)={DESTROY (ext_ptr)|ext_ptr ∈Assigned(F)}.
Assigned(F) denotes the set of all external pointers
assigned in function F.
c: DANGLING POINTERS USING FUNCTION
If a function dereferences an external pointer, we call this
function as a Dangling Pointers Using Function (DPUF).
It requires the following conditions to be satisﬁed:
1) The function uses an external pointer ext_ptr.
2) There are operations, USE(ext_ptr) or
USE(Alias(ext_ptr)),
aliases in the function.
to dereference ext_ptr or its
3) There are at least one path that does not contain
DESTROY(ext_ptr) from the entry of the function to
the point where ext_ptr or its aliases are dereferenced.
The summary of a DPUF F is as follows.
Summary(F)={USE(ext_ptr)|ext_ptr ∈Dereferenced(F)}.
Dereferenced(F) denotes the set of all external pointers
dereferenced in function F.
As can be observed above, our analysis is conservative
to discover as many use-after-free vulnerabilities as possi-
ble. If a function has any path where a dangling pointer is
created and not destroyed, it is considered as a DPCF. And
if a function has any path where a pointer is dereferenced
before assigned, it is considered as a DPUF. However, only
if all paths from the entry to the exit in a function contain
DESTROY(p), the function is considered as a DPDF and p is
considered destroyed. These three kinds of functions are not
mutually exclusive. A function is probably a DPCF, a DPDF
and a DPUF at the same time.
2) ITERATIVE ANALYSIS
The summary of a single function is already generated
through the above procedure. However, summaries of all
functions cannot be obtained by simple traversal. In the
example in Fig. 7, obviously, foo2 is a DPCF with a sum-
mary {FREE(arg0)}. When foo1 calls foo2, the function call
is replaced by the summary. Then, foo1 is also a DPCF.
Therefore, iterative analysis is required to summarize all the
DPCFs, DPDFs and DPUFs in the entire program.
We perform an iterative analysis along the backward direc-
tion of the call graph of the target program to generate sum-
maries of the above three kinds of functions. Summarizing
DPCFs is taken an example to explain how the iterative
VOLUME 8, 2020
78717
K. Zhu et al.: Scalable Static Detection of Use-After-Free Vulnerabilities in Binary Code
FIGURE 7. Example of iterative analysis.
FIGURE 9. Inter-procedural analysis using the function summaries
technique.
our approach is 3 in this example, which is less than the
total number using the in-lining technique. Our approach
can effectively prevent redundant analysis in inter-procedural
analysis. The advantage is more obvious when analyzing
large-scale programs, which is shown in Section V-C.
C. ALIAS ANALYSIS
The purpose of an alias analysis is to determine which point-
ers point to the same memory address at a program point.
As described in Section II-B, alias analysis is a challenge
in use-after-free vulnerability detection, which affects the
detection accuracy. Although there are many solutions for
alias analysis in high-level languages, there are few solutions
for binary code due to lack of information during compilation.
Thus we need to create our own alias analysis to mitigate
this problem. A dedicated data-ﬂow analysis is performed to
address alias analysis.
1) ABSTRACT STATE
To identify aliases, we focus on each pointer and the
addresses it points to. The association between a pointer and
memory addresses is represented by a pair (p, ADDR(p)),
where p denotes a pointer variable and ADDR(p) denotes the
set of memory addresses that p points to. In the intermediate
representation, if the pointer is on the stack, it is represented
as the offset relative to stack base BP. Otherwise, if the
pointer is a global variable, it is represented as a ﬁxed offset.
The symbol addri is used to represent the memory address
because the static analysis cannot obtain the speciﬁc value
of the address. For each program point, AbsState contains all
such pairs that associate pointers and addresses. If ADDR(p)∩
ADDR(q) (cid:54)= φ in a point, p is considered an alias to q.
2) STATEMENT TRANSFER FUNCTION
The assignment statement of
that changes
AbsState is deﬁned as s : p = addr. In the statement,
addr represents a memory address, which may be the result
returned by malloc, the address pointed by another pointer,
an immediate value or NULL.
the pointer
FIGURE 8. The algorithm for generating summaries of all the DPCFs.
analysis works. Fig.8 shows our algorithm for the iterative
analysis. Q represents the work queue to be analyzed. SDPCF
represents the set of DPCFs that have been summarized.
At the beginning, the work queue Q is initialized with the
DPCFs speciﬁed by the user, such as free. The algorithm gets
and removes a function f from Q and determines whether
it is a DPCF or not in each loop. If f is a DPCF, it will be
summarized using the method in Section IV-B.1 and added
to SDPCF . In addition, all functions calling f is added to the
work queue Q. If f
is not a DPCF, it will be ignored. The
algorithm ends until Q is empty. It should be noted that we
ignore recursive calls.
Obviously, the summaries of all DPDFs and DPUFs can
be obtained by the same approach. With this knowledge,
function calls can be handled easily in the inter-procedural
analysis. If the callee of a function call belongs to the above
three kinds of functions, the call is replaced by the summary
of the callee. Otherwise, the call is ignored. Therefore, a func-
tion only need to be analyzed once in our method although it
is probably called many times.
The function summaries technique is used to analyze the
example in Fig. 5 and compared with the in-lining tech-
nique in existing solutions. The results of the analysis are
shown in Fig 9. The number following ‘‘line’’ indicates the
line number in Fig 5. The function foo1 is ﬁrst analyzed and
summarized. Summary(foo1) = {Free(arg0)}. When foo2 is
analyzed, the function call that calls foo1 at line 6 is replaced
by foo1’s summary and foo1 does not need to be analyzed
repeatedly. Similarly, foo2 also only needs to be analyzed
once, although it is called twice in line 12 and line 14.
Therefore, the total number of functions to be analyzed using
78718
VOLUME 8, 2020
K. Zhu et al.: Scalable Static Detection of Use-After-Free Vulnerabilities in Binary Code
The values of AbsState before and after an assignment
statement s are denoted by IN [s] and OUT [s]. Thus, the trans-
fer function fs of the statement s is
OUT [s] = fs(IN [s], p, addr) = IN [s] ← {p (cid:55)→ addr}.
IN [s] ← {p (cid:55)→ addr} denotes the AbsState identical to
IN [s], except that the address associated with p is addr.
3) BASIC BLOCK TRANSFER FUNCTION
The values of AbsState immediately before and immediately
after each basic block B are denoted by IN [B] and OUT [B],
respectively. Suppose a basic block B consists of assignment
statements of pointers s1, s2, . . . , sn, in that order. We derive
the transfer function fB of a basic block by composing the
transfer function of the statements in the block. Thus, fB =
fsn ◦ . . . fs2 ◦ fs1. The relationship between the AbsState before
and after the basic block is
OUT [B] = fB(IN [B]) = fsn ◦ . . . fs2 ◦ fs1(IN [B]).
The purpose of our data-ﬂow analysis is to ﬁnd all possible
addresses pointed to by a pointer. Thus, the input of a basic
block B is the union of all the output of its predecessors, i.e.,
IN [B] =(cid:83)
P∈predecessors(B)OUT [P].
We use the iterative algorithm in [23] to solve these equa-
tions and obtain the least ﬁxed point. For a pointer in each
program point, the results of these equations contain all the
addresses that the pointer may point to. The pointer aliases
can be easily identiﬁed by exploiting the results. An example
given in Section IV-E explains the detailed process of the alias
analysis in use-after-free vulnerability detection.
D. POINTER TRACKING AND USE-AFTER-FREE
VULNERABILITY CHECKING
According to the vulnerability feature model in Section II-A,
the creation of dangling pointers is a necessary condition for
use-after-free vulnerabilities. In the previous section, we have
obtained the summaries of DPCFs, DPDFs and DPUFs. Sup-
ported by these summaries, the inter-procedural analysis is
transferred to the intra-procedural analysis through replac-
ing function calls with the summaries of callee functions.
Therefore, we only need to perform an intra-procedural point-
ers tracking in the functions that call DPCFs to check use-
after-free vulnerabilities. If a function calls a DPCF, it is
called as a Calling Freeing Function (CFF).
A ﬁnite-state machine (FSM) for use-after-free detec-
tion is established according the vulnerability feature model,
as shown in Fig. 10. The vulnerability checking maintains
the state of each pointer and traces the state transition in
CFFs. The pointer’s state is tracked forward along the CFGs
from the entry of each CFF. The state of a pointer p is
Start in the beginning and converted to Dangling when the
pointer or its aliases are freed by FREE(p) or FREE(Alias(p)),
otherwise the state remains the same when other opera-
tions are performed. In the Dangling state, dereferencing the
FIGURE 10. FSM for use-after-free detection.
pointer (USE(p)) shifts the state to a use-after-free defect.
Moreover,
the creation and dereference of the dangling
pointer are recorded and output to the error reports. Note
that FREE(p) is a special kind of dereference of pointer p
(in Section II-A). Thus, double-free vulnerabilities can be
detected by this FSM. Finally, if a dangling pointer is reas-
signed by DESTROY(p), the state is converted to End, and
the pointer tracking for this pointer ends.
E. EXAMPLE
A real vulnerability, CVE-2015-5221, is taken as an exam-
ple to introduce the workﬂow of our approach in detail.
This vulnerability is a double-free vulnerability in an image
manipulation software, Jasper. The key code associated with
vulnerability is shown in Fig. 11. To explain the process of
alias analysis in vulnerability detection, we modiﬁed the code
to include more complex alias relationships.
FIGURE 11. A real use-after-free vulnerability.
• Generating summaries of the DPCFs. According to the
algorithm in Fig. 8, the functions free, jas_free and
VOLUME 8, 2020
78719
K. Zhu et al.: Scalable Static Detection of Use-After-Free Vulnerabilities in Binary Code
TABLE 1. Checking use-after-free in mif _process_cmpt.
jas_tvparser_destroy are determined as DPCFs in turn.
Their summaries are
Summary(free) = {FREE(arg0)},