title:Workshop on Dependable Software - Tools and Methods - Workshop Abstract
author:Takuya Katayama and
Yutaka Ishikawa and
Yoshiki Kinoshita
Workshop on Dependable Software – Tools and Methods –
Workshop Chair:
Takuya Katayama
Japan Advanced Institute of
Science and Technology,
JAPAN
Program Co-chair:
Yutaka Ishikawa
University of Tokyo,
JAPAN
Program Co-chair:
Yoshiki Kinoshita
National Institute of
Advanced Industrial
Science and Technology,
JAPAN
Dependability includes attributes such as reliability,
availability, safety, and security. In order to realize depend-
able systems, the system software must provide not only
such attributes against hardware failures and intrusions, but
also the software system itself must have robustness. For-
mal methods, as symbolized by UML and model checking,
have been attracting much attention in this ﬁeld. This one-
day workshop covers all aspects of supporting such depend-
able software. Ten papers, consisting of ﬁve long and ﬁve
short papers, and one invited talk are presented in this work-
shop. These papers are summarized as follows.
Session: Systems and Tools Four papers related to de-
pendable systems and tools have been selected as follows:
“Difference of Degradation Schemes among Operating Sys-
tems – Experimental analysis for web application servers –
,” given by H. Hibino, et al., reports the performance on the
Solaris operating system is gradually degraded and others,
such as Linux and Windows, are steeply degraded.
“XGE-ProtoDevel: A Communication Protocol Devel-
opment Tool for 10Gbps Class Network,” given by S. Sum-
imoto, et al., proposes a communication protocol devel-
opment tool, which provides network fault injection and
packet proﬁling functions. The paper also presents the ex-
perience of a protocol development using the tool.
“A methodology for designing fault injection experi-
ments as an addition to communication systems confor-
mance testing,” given by A. M. Ambrosio, et al., is an
introduction paper of CoFI, Conformance and Fault Injec-
tion testing methodology, developed by the authors. A case
study of CoFI, a simple communication protocol, is also
presented.
“A Consistency Checker for UML Model Diagrams,”
given by Y. Kotb, et al., proposes an automatic consistency
checker for UML diagrams. The checker converts UML di-
agrams into XML documents by means of the UML-XMI
mapping, and then evaluates whether or not attributes in
the XML documents should satisfy consistency conditions
speciﬁed in the speciﬁc meta-language, called SLXS.
Session: Concurrency and Tools Three papers related to
concurrency and tools are presented as follows: “Language-
based Software Reliability: Examples and Future Direc-
tions,” given by P. T. Wojciechowski, et al., presents a brief
survey and research direction in the ﬁeld and shows that the
advanced type systems enable the detection of non-trivial
errors.
“Congruences for a Timed Extension of the π-Calculus,”
given by H. Kuwabara, et al., proposes a timed variant of a
synchronous π-calculus and investigates notions of equality,
in particular such where processes proceeding at different
speeds can be related.
“Model Checking of Multi-Process Applications Using
SBUML and GDB,” given by Y. Nakagawa, et al., proposes
a new framework for model checking of applications on a
real environment with the aid of a virtual machine.
Session: Models There are three papers in this session.
“Execution Monitoring and Information Flow Properties,”
given by N. Nagatou, et al., proposes an extension to
Schneider’s security automaton to deal with the information
ﬂow properties. The property used in analyzing the infor-
mation ﬂow can be stated as a safety property.
“Preconditions of properties described in CTL for state-
ments manipulating pointers,” given by Y. Tanabe, et al.,
presents a result on a formal treatment of programs ma-
nipulating pointers. The main technical contribution is a
method to construct the weakest preconditions of predicates
on pointer structures.
“Analyzing Behaviors in VDM Speciﬁcations by Focus-
ing on User-deﬁned Types,” given by K. Miyoshi, et al.,
introduces a method to extract an FSP model from a formal
speciﬁcation in VDSM-SL (Vienna Development Method
Speciﬁcation Language) and apply it to a model checking
tool LTSA (Labelled Transition System Analyzer).
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:53:50 UTC from IEEE Xplore.  Restrictions apply.