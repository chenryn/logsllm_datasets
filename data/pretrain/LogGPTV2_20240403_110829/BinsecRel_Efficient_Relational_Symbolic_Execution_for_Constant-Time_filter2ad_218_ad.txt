basic block.
Example 2 (Fault-packing). For example, let us consider a
basic-block with a path predicated π. If there are two memory
accesses along the basic block that evaluate to (cid:104)ϕ | ϕ(cid:48)(cid:105)
and (cid:104)φ | φ(cid:48)(cid:105), we would normally generate two insecurity
(cid:86)
, ϕ
queries (π ∧ ϕ (cid:54)= ϕ(cid:48)) and (π ∧ φ (cid:54)= φ(cid:48)) – one for each
memory access. fp regroups these checks into a single query
(cid:0)π ∧ ((ϕ (cid:54)= ϕ(cid:48)) ∨ (φ (cid:54)= φ(cid:48)))(cid:1) sent to the solver at the end of
the basic block.
This optimization reduces the number of insecurity queries
sent
to the solver and thus helps improving performance.
However it degrades the precision of the counterexample:
while checking each instruction individually precisely points
to vulnerable instructions, fault-packing reduces accuracy to
vulnerable basic blocks only. Note that even though disjunctive
constraints are usually harder to solve than pure conjunctive
constraints, those introduced by fp are very limited (no nesting)
and thus do not add much complexity. Accordingly, they never
end up in a performance degradation (see Table VI).
B. Theorems
In order to deﬁne properties of our symbolic execution, we
use −→k (resp. (cid:32)k), with k a natural number, to denote k steps
in the concrete (resp. symbolic) evaluation.
Deﬁnition 2 (∼∼∼p). We deﬁne a relation ∼∼∼M
p between con-
crete and symbolic conﬁgurations, where M is a model and
p ∈ {l, r} is a projection on the left or right side of a
symbolic conﬁguration. Intuitively, the relation c ∼∼∼M
p s is
the concretization of the p-side of the symbolic state s with
the model M. Formally c ∼∼∼M
p s holds if M (cid:15) π and for all
where c (cid:44) (l, r, m) and s (cid:44)(cid:0)ls, ρ, µ
, π(cid:1) with l = ls. We also
expression e,
(cid:86)
deﬁne c ∼∼∼p s which holds if ∃M. c ∼∼∼M
Notice that because both executions represented in the ini-
∼∼∼r s0
tial conﬁguration s0 are low-equivalent, c0
implies that c0 (cid:39)L c(cid:48)
0.
, e(cid:1) (cid:96) ϕ
(cid:0)ρ, µ
then c e (cid:96) bv and bv = M (ϕ
∼∼∼l s0 ∧ c(cid:48)
p s.
|p)
(cid:86)
(cid:86)
(cid:86)
0
Through this section, we assume that the solver always
returns after a call to (cid:15) and that the location l(cid:48) returned in the
rule D_JUMP is always a location to executable code. Under
this hypothesis, the symbolic execution can only get stuck
(cid:86)
). In
when an expression ϕ
this case, a vulnerability is detected and there exists a model
M such that M (cid:15) π ∧ (ϕ
is leaked such that ¬secLeak (ϕ
|l (cid:54)= ϕ
|r).
(cid:86)
(cid:86)
(cid:86)
The following theorem claims the completeness of our
symbolic execution relatively to an initial symbolic state, i.e.
for each pair of concrete executions producing the same traces,
there exists a corresponding symbolic execution (no under-
approximation). A sketch of proof is given in Appendix B1.
Theorem 1 (Relative Completeness of RelSE). Let s0 be a
symbolic initial conﬁguration for a program P . For every
∼∼∼l s0,
concrete states c0, ck, c(cid:48)
k, such that c0
if c0 −→
0 −→
k with t = t(cid:48) then there exists sk
t(cid:48)
such that:
∼∼∼l sk ∧ c(cid:48)
s0 (cid:32)k sk ∧ ck
∼∼∼l s0 ∧ c(cid:48)
k ck and c(cid:48)
∼∼∼r sk
0, c(cid:48)
k c(cid:48)
0
t
k
3We implement untainting with a cache of "untainted variables" that are
substituted in the program copy when relational expressions are built.
The following theorem claims the correctness of our sym-
bolic execution, stating that for each symbolic execution and
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:43 UTC from IEEE Xplore.  Restrictions apply. 
1028
model M satisfying the path predicate, the concretization of
the symbolic execution with M corresponds to a valid concrete
execution (no over-approximation). A sketch of proof is given
in Appendix B2.
Theorem 2 (Correctness of RelSE). For every symbolic con-
ﬁgurations s0, sk such that s0 (cid:32)k sk and for every concrete
∼∼∼M
p s0 and
conﬁgurations c0, ck and model M, such that c0
∼∼∼M
p sk, then there exist a concrete execution c0 −→k ck.
ck
The following is our main result. If the symbolic execution
does not get stuck due to a satisﬁable insecurity query, then the
program is constant-time. The proof is given in Appendix B3.
t
0
k c(cid:48)
0 ∧ c0 −→
∼∼∼l s0, and c(cid:48)
∼∼∼r s0,
0 −→
k ck ∧ c(cid:48)
t(cid:48)
Theorem 3 (CT Security). Let s0 be a symbolic initial
conﬁguration for a program P . If the symbolic evaluation does
not get stuck, then P is constant-time w.r.t. s0 . Formally, if
for all k, s0 (cid:32)k sk then for all initial conﬁgurations c0 and
c(cid:48)
0 such that c0
c0 (cid:39)L c(cid:48)
k =⇒ t = t(cid:48)
Additionally, if s0 is fully symbolic, then P is constant-time.
The following theorem expresses that when the symbolic
execution gets stuck, then there is a concrete path that violates
constant-time. The proof is given in Appendix B4.
Theorem 4 (Bug-Finding for CT). Let s0 be a symbolic initial
conﬁguration for a program P . If the symbolic evaluation
gets stuck in a conﬁguration sk then P is not constant-time.
Formally, if there exist k st. s0 (cid:32)k sk and sk is stuck, then
there exist initial conﬁgurations c0 and c(cid:48)
0 st.
0 −→
t(cid:48)
VI. IMPLEMENTATION
k ck ∧ c(cid:48)
k ∧ t (cid:54)= t(cid:48)
∧ c0 −→
c0 (cid:39)L c(cid:48)
0
k c(cid:48)
t
We implemented our relational symbolic execution, BIN-
SEC/REL, on top of the binary-level analyzer BINSEC [55].
BINSEC/REL takes as input a x86 or ARM executable, a spec-
iﬁcation of high inputs and an initial memory conﬁguration
(possibly fully symbolic). It performs bounded exploration of
the program under analysis (up to a user-given depth), and
reports the identiﬁed CT violations together with counterexem-
ples (i.e., initial conﬁgurations leading to the vulnerabilities).
In case no violation is reported, if the initial conﬁguration is
fully symbolic and the program has been explored exhaustively
then the program is proven secure.
BINSEC/REL is composed of a relational symbolic ex-
ploration module and an insecurity analysis module. The
symbolic exploration module chooses the path to explore,
updates the symbolic conﬁguration, builds the path predicate
and ensure that it is satisﬁable. The insecurity analysis module
builds insecurity queries and check that they are not satisﬁable.
We explore the program in a depth-ﬁrst search manner and
[70], currently the best
we rely on the Boolector SMT-solver
on theory QF_ABV [66], [71].
Overall architecture is illustrated in Fig. 6. The DISASM
module loads the executable and lifts the machine code to
Figure 6: BINSEC architecture with BINSEC/REL plugin.
the DBA intermediate representation [68]. Then, the analysis
is performed by the REL module on the DBA code. The
FORMULA module is in charge of building and simplifying
formulas, and sending the queries to the SMT-solver. The
queries are exported to the SMTLib [63] standard which
permits to interface with many off-the-shelf SMT-solvers. The
REL plugin represents ≈3.5k lines of Ocaml.
Usability. Binary-level semantic analyzers tend to be harder
to use than their source-level counterparts as inputs are more
difﬁcult
to interpret.
In order to mitigate this point, we propose a vizualisation
mechanism (based on IDA, which highlight coverage and vio-
lations) and easy input speciﬁcation (using dummy functions,
cf. Appendix C) when source-level information is available.
to specify and results more difﬁcult
VII. EXPERIMENTAL RESULTS
We answer the following research questions:
able
RQ1: Effectiveness Is BINSEC/REL
perform
constant-time analysis on real cryptographic binaries, for
both bug ﬁnding and bounded-veriﬁcation?
to
RQ2: Genericity Is BINSEC/REL generic enough to encom-
pass several architectures and compilers?
RQ3: Comparison vs. Standard Approaches How
does
BINSEC/REL scale compared to traditional approaches
based on standard SC and RelSE?
RQ4: Impact of simpliﬁcations What are the respective im-
pacts of our different simpliﬁcations?
RQ5: Comparison vs. SE What
is the overhead of BIN-
SEC/REL compared to standard SE, and can our simpli-
ﬁcations be useful for standard SE?
Experiments were performed on a laptop with an Intel(R)
Core(TM) i5-2520M CPU @ 2.50GHz processor and 32GB
of RAM, running Linux Mint 18.3 Sylvia. Similarly to related
work (e.g. [23]), esp is initialized to a concrete value, we
start the analysis from the beginning of the main function,
we statically allocate data structures and the length of keys
and buffers is ﬁxed (e.g. for Curve25519-donna [67], three
256-bit buffers are used to store the input, the output and the
secret key). When not stated otherwise, programs are compiled
for x86 (32bit) with their default compiler setup.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:43 UTC from IEEE Xplore.  Restrictions apply. 
1029
A. Effectiveness (RQ1,RQ2)
We carry out three experiments to assess the effectiveness
of our technique: (1) bounded-veriﬁcation of secure crypto-
graphic primitives previously veriﬁed at source- or LLVM-
level [11], [15], [16], (2) automatic replay of known bug
studies [12], [16], [50], (3) automatic study of CT preservation
by compilers extending prior work [12]. Overall, our study
encompasses 338 representative code samples for a total of
70k machine instructions and 22M unrolled instructions (i.e.,
instructions explored by BINSEC/REL).
Bounded-Veriﬁcation (RQ1). We analyze a large range of
secure constant-time cryptographic primitives (296 samples,
64k instructions), comprising: (1) several basic constant-time
utility functions such as selection functions [12], sort func-
tions [72] and utility functions from HACL*4 and OpenSSL5;
(2) a set of representative constant-time cryptographic prim-
itives already studied in the literature on source code [15]
or LLVM [16],
including implementations of TEA [73],
Curve25519-donna [67], aes and des encryption functions
taken from BearSSL [9], cryptographic primitives from lib-
sodium [10] and the constant-time padding remove function
tls-cbc-remove-padding from OpenSSL [16]; (3) a set
of functions from the HACL* library [11].
Results are reported in Table II. For each program, BIN-
SEC/REL is able to perform an exhaustive exploration without
ﬁnding any violations of constant-time in less than 20 min-
utes. Note that exhaustive exploration is possible because in
cryptographic programs, bounding the input size bounds loops.
These results show that BINSEC/REL can perform bounded-
veriﬁcation of real-world cryptographic implementations at
binary-level in a reasonable time, which was impractical with
previous approaches based on self-composition or standard
RelSE (see Section VII-B).
This is the ﬁrst automatic CT-analysis of
these crypto-
graphic libraries at the binary-level.
Bug-Finding (RQ1). We take three known bug studies from
the literature [12], [50], [72] and replay them automatically at
binary-level (42 samples, 6k instructions), including: (1) bina-
ries compiled from constant-time sources of a selection func-
tion [12] and sort functions [72], (2) non-constant-time ver-
sions of aes and des from BearSSL [9], (3) the non-constant-
time version of OpenSSL’s tls-cbc-remove-padding6
responsible for the famous Lucky13 attack [50].
Results are reported in Table III with fault-packing disabled
to report vulnerabilities at the instruction level. All bugs have
been found within the timeout. Interestingly, we found 3
unexpected binary-level vulnerabilities (from secure source
codes) that slipped through previous analysis:
• function ct_select_v1 [12] was deemed secured
through binary-level manual inspection, still we conﬁrm
4https://github.com/project-everest/hacl-star/blob/master/snapshots/hacl-c/
Hacl_Policies.c and https://github.com/project-everest/hacl-star/blob/master/
snapshots/hacl-c/kremlib_base.h
5https://github.com/xbmc/openssl/blob/master/crypto/constant_time_locl.h
6https://github.com/openssl/openssl/blob/OpenSSL_1_0_1/ssl/d1_enc.c
ct-select
ct-sort
Hacl*
OpenSSL
-O0
-O3
-O0
-O3
salsa20
chacha20
sha256
sha512
chacha20
curve25519
sha256
sha512
aes_ct
des_ct
tls-rempad-patch
utility
tea
donna
libsodium
Hacl*
BearSSL
OpenSSL
Total
≈ #I
1015
2400
3850
4550
290
250
7083
4643
1627
2717
4879
16312
1221
8522
1279
2013
357
682
424
64114
#Iu
1507
1782
90953
5113
953
804
T
.21
.24
9.34
.75
.12
.12
10.2M 1166
401
2.7M
6.5k
.7
5.0
30.0k
4.5
38.7k
7.1
62.1k
5.0k
1.0
9.4M 1110