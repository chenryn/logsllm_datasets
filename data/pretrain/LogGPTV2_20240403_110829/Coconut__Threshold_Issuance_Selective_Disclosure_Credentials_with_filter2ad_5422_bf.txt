All machines are running a fresh 64-bit Ubuntu distribution,
the client runs on a large AWS instance and the authorities
run on nano instances.
As expected, we observe that the further the authorities are
from the client, the higher the latency due to higher response
times; the ﬁrst authorities to respond are always those situated
in Europe, while Sidney and Tokyo are the latest. Latency
grows linearly, with the exception of a large jump (of about
150 ms) when t increases from 2 to 3—this is due to the
7 remaining authorities being located outside Europe. The
latency overhead between credential requests on public and
private attributes remains constant.
B. Chainspace Implementation
We evaluate the Coconut smart contract
library imple-
mented in Chainspace, as well as the the coin tumbler (Sec-
tion V-A) and the privacy-preserving e-petition (Section V-B)
applications that use this library. As expected, Table III shows
that the most time consuming procedures are the checker of
Create and the checker of Verify; i.e., they call the VerifyCred
12345678910Threshold parameter0100200300400500600Client Latency [ms]Public attributePrivate attributeCoconut smart contract library
Operation
Create [g]
Create [c]
Request [g]
Request [c]
Issue [g]
Issue [c]
Verify [g]
Verify [c]
µ [ms]
0.195
12.099
7.094
6.605
4.382
0.024