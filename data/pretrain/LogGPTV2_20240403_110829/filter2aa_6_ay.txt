18.7 数组原型方法
在下面几节中，数组原型方法会按功能分组。在每个小节中，我会谈到这些方法是否具有破坏性（在调用这些方法时会改变数组）或者非破坏性（通常这些方法不会修改接收者，而是返回新的数组）。
18.8 添加和删除元素（破坏性地）
本节中的所有方法都具有破坏性：
Array.prototype.shift()
移除索引0处的元素并返回该元素。随后元素的索引依次减1：
Array.prototype.unshift(elem1?, elem2?, ...)
在数组最前面增加给定元素，返回新的数组长度：
Array.prototype.pop()
移除数组最后的元素并返回该元素：
Array.prototype.push(elem1?, elem2?, ...)
在数组的尾部增加给定元素，返回新的数组长度：
apply()（参见17.3.1小节的“Function.prototype.apply(thisValue, argArray)”）破坏性地把数组arr2添加到另一个数组arr1之后：
Array.prototype.splice(start, deleteCount?, elem1?, elem2?, ...)
从索引start开始，移除deleteCount个元素，并插入给定的元素。换句话说，用elem1、elem2等元素替换了从索引start开始的deleteCount个元素。该方法返回被移除的元素：
特殊参数值：
start可以是负数，这种情况下，start与数组length相加来确定起始位置。因此−1指向最后的元素，以此类推。
deleteCount是可选的。如果省略（连同所有后续的参数），那么在start索引后的所有元素都会被移除。
在这个例子中，我们移除倒数第二个索引及之后的所有元素：
18.9 排序和颠倒元素顺序（破坏性地）
下面这些方法也具有破坏性：
Array.prototype.reverse()
颠倒数组中的元素顺序，并返回指向原（修改后的）数组的引用：
Array.prototype.sort(compareFunction?)
数组排序，并返回排序后的数组：
请记住，排序是通过把元素转换为字符串再对值进行比较，这意味着数字不是按照数值进行排序的：
你可以通过可选参数compareFunction来解决这个问题，该参数控制如何实现排序。它具有以下签名：
这个函数比较a和b，并返回：
小于0的整数（例如，−1），如果a小于b；
0，如果a等于b；
大于0的整数（例如，1），如果a大于b。
18.9.1 比较数字
对于数字，你可以简单地返回a-b，但这会导致数值溢出。为了防止发生这种情况，需要更繁琐的代码：
我不喜欢嵌套条件操作符。但在这种情况下，代码比较简洁，所以我暂时推荐这种做法：
使用这个函数：
18.9.2 比较字符串
对于字符串，你可以使用String.prototype.localeCompare（参见12.5“字符串比较”）：
18.9.3 比较对象
参数compareFunction也可以用于对象排序：
使用compareNames作为比较函数，arr按name排序：
18.10 合并、切分和连接（非破坏性地）
以下方法对数组执行各种非破坏性操作：
Array.prototype.concat(arr1?, arr2?, ...)
创建一个新数组，其中包括接受者的所有元素，其次是数组arr1的所有元素，以此类推。如果其中一个参数不是数组，那么它作为元素添加到结果中（例如，此处的第一个参数'c'）：
调用concat()的数组没有被改变：
Array.prototype.slice(begin?, end?)
把数组从begin开始到end（不包含end）的元素复制到新数组中：
如果缺少end，则使用数组长度：
如果两个索引都缺少，则复制整个数组：
如果任意一个索引是负值，则该值加上数组长度。因此，−1指向最后一个元素，以此类推：
Array.prototype.join(separator?)
通过对所有数组元素应用toString()创建字符串，并用separator连接字符串。如果缺少separator，默认使用','：
join()把undefined和null转化为空字符串：
数组中的“空缺”也被转化为空字符串：
18.11 值的查找（非破坏性地）
以下方法用于在数组中查找某些值：
Array.prototype.indexOf(searchValue, startIndex?)
从数组的startIndex开始，查找searchValue。这个方法返回第一次出现searchValue的索引，如果没有找到，则返回−1。如果startIndex是负数，则加上数组长度；如果缺少startIndex，则查找整个数组。
查找使用严格相等（参见9.3“等号运算符：=== 和 ==”），这意味着不能用indexOf()查找NaN：
Array.prototype.lastIndexOf(searchElement, startIndex?)
从数组的startIndex开始，反向查找searchValue。这个方法返回第一次出现searchValue的索引，如果没有找到，则返回−1。如果startIndex是负数，则加上数组长度；如果缺少startIndex， 则查找整个数组。查找使用严格相等（参见9.3“等号运算符：=== 和 ==”）：
18.12 迭代（非破坏性地）
迭代方法使用一个函数遍历数组。我区分了三种迭代方法，所有这些都是非破坏性的：检测方法（examination methods）主要观察数组的内容；转化方法（transformation methods）从接受者获得新数组；归约方法（reduction methods）基于接受者的元素计算出结果。
18.12.1 检测方法
本节中描述的方法如下：
该方法需要如下参数。
callback是它的第一个参数，一个调用函数。根据检测方法，回调函数返回布尔值或什么都不返回。函数签名如下：
element是提供回调函数callback处理的数组元素，index是元素的索引，array是调用examinationMethod的数组。
thisValue可以配置callback内的this。
现在，对于我刚才描述的检测方法签名有如下方法。
Array.prototype.forEach(callback, thisValue?)
遍历数组中的元素：
Array.prototype.every(callback, thisValue?)
如果对每个元素，回调函数都返回true，则返回true。一旦回调函数返回false，则停止迭代。注意，没有返回值会导致隐式返回undefined，而every()解释为false。every()类似于全称量词。
这个示例检测数组中是否每个元素都是偶数：
如果数组是空的，则结果是true（且不调用callback）：
Array.prototype.some(callback, thisValue?)
如果回调函数至少有一个元素返回true，则返回true。一旦回调函数返回true，则停止迭代。注意，没有返回值会导致隐式返回undefined，而some解释为false。some()类似于存在量词。
这个示例检测数组中是否存在偶数：
如果数组是空的，则结果是false（且不会调用callback）：
forEach()的一个潜在缺陷是不支持break或类似于提前终止循环的处理。如果你需要这么做，可以使用some()：
如果发生中断（break），some()返回true，否则返回false。这样你可以根据是否需要成功完成迭代（对于for循环有点技巧）来使用不同的方法。
18.12.2 转化方法
转化方法接收一个输入数组，产生一个输出数组，回调函数控制如何产生输出。回调函数与检测方法中的回调函数具有相同的函数签名：
有两个转化方法：
Array.prototype.map(callback, thisValue?)
输出数组的每个元素是对输入元素应用callback后的结果。例如：
Array.prototype.filter(callback, thisValue?)
输出数组只包含callback返回为true的输入元素。例如：
18.12.3 归约函数
对于归约，回调函数的签名不同：
参数previousValue是回调函数返回之前的值。初次调用回调函数时，有两种可能（Array. prototype.reduce()的描述与括号中提到的reduceRight()不同）。
提供显式initialValue。而previousValue是initialValue，currentElement是数组的第一个元素（reduceRight：数组最后一个元素）。
未提供显式initialValue。previousValue是数组的第一个元素，currentElement是数组的第二个元素（reduceRight是数组的最后一个元素和数组的倒数第二个元素）。
有两个归约方法：
Array.prototype.reduce(callback, initialValue?)
从左到右进行迭代，并按照之前描述的调用回调函数。这个方法的结果是由回调函数返回的最后的值。这个例子计算所有数组元素的和：
如果你对只有一个元素的数组调用reduce，则返回这个元素：
如果对空数组调用reduce，你必须指定initialValue，否则会产生异常：
Array.prototype.reduceRight(callback, initialValue?)
与reduce()工作原理相同，但从右到左遍历。
注解：
 在许多函数式编程语言中，reduce被称为折叠、左折叠（left fold），而reduceRight被称为右折叠（right fold）。
另一种reduce方法的解读是它实现了n元操作符OP：
通过一系列二进制操作符op2的应用：
这就是之前的代码示例所发生的：我们通过JavaScript的二进制加运算符实现了对数组的n元求和操作符。
作为例子，让我们通过以下函数看看两个方向的迭代：
正如所料，reduce()从左到右迭代：
而reduceRight()从右到左迭代：
18.13 缺陷：类数组对象
JavaScript的一些对象看起来像数组，但实际上不是。这通常意味着它们可以通过索引访问且具有length属性，但没有数组方法。例如特殊变量arguments、DOM节点列表和字符串。17.15.3“类似数组的对象和泛型方法”提供了使用类数组对象的技巧。
18.14 最佳实践：遍历数组
遍历数组arr有两种方法。
简单的for循环（参见13.3.4“for”）：
一种数组迭代的方法（参见18.12“迭代（非破坏性地）”）。例如，forEach()：
不要使用for-in循环（参见13.3.5“for-in”）遍历数组。它遍历索引，而不是值。且这样做既包含普通属性的键，也包含继承的键。
第19章 正则表达式
本章介绍了正则表达式的 JavaScript API。我们假设你已大致熟悉它是如何工作的。如果你还不了解，网上有很多不错的教程，例如以下两个网站：
Jan Goyvaerts的Regular-Expressions.info（http://www.regular-expressions.info/）
Cody Lindley的JavaScript Regular Expression Enlightenment（http://bit.ly/ 1fwoQMs）
19.1 正则表达式语法
这里使用的术语可以更进一步地体现ECMAScript规范的语法。有时我会偏点儿题，使这些变得更容易理解。
19.1.1 原子：常规
常规原子的语法如下。
（1）特殊字符
下面所有的字符都有特殊的意义：
你可以使用反斜杠前缀进行转义。例如：
其他特殊字符如下。
在字符集合中[…]
在以问号开始的分组中（?…）
尖括号只在XRegExp库（详见第30章）中，用于命名分组。
（2）模式字符
除了上述一些特殊的字符，所有的字符都匹配它们自身。
（3）.（点）
匹配任意的JavaScript字符（UTF-16编码单元），除了行结束符（换行符、回车等）。要真正匹配任何字符，请使用[\ S \S]。例如：
（4）字符转义（匹配单个字符）
特殊的控制字符包括\f（翻页符），\n（换行符），\r（回车），\t（水平制表符）和\v（垂直制表符）。
\ 匹配NUL字符（\U）。
任何控制字符：\cA～\cZ。
Unicode字符转义：\u～\xFFFF（Unicode编码单元；详见第24章）。
十六进制字符转义：\x～\xFF。
（5）字符分类转义（匹配字符集合中的一个字符）
数字：\d匹配任意数字（同[-9]）；\D匹配任何非数字（同[^-9]）。
字母数字字符：\w匹配任意拉丁文字母数字字符和下划线（同为[A-Za-z-9_]）；\W匹配所有\w不匹配的字符。
空格：\s匹配空白字符（空格、制表符、换行符、回车符、翻页符和所有Unicode空格等）；\S匹配所有非空白字符。
19.1.2 原子：字符类
字符类的语法如下：
[«charSpecs»]至少匹配charSpecs中的任意一个字符。
[^«charSpecs»]匹配不属于charSpecs的任意一个的字符。
所有字符的规范结构如下。
源字符与自身匹配。大多数字符是源字符（即使很多字符在其他地方比较特殊）。只有三个字符不是源字符：
通常，你可以通过反斜杠转义。如果你想匹配没有转义的连接符号，它必须是左方括号后，右侧范围内的第一个字符，这会稍后介绍。
分类转义：前面列出的任何字符转义和字符分类转义都是允许的。还有另外一个转义字符。
退格键（\b）：在字符分类外，\b匹配单词边界。在字符分类中，它匹配退格控制字符。
范围包括源字符或分类转义，后面跟随一个链接符（-），之后接着源字符或分类转义。
为了演示如何使用字符分类，这个例子解析了ISO 8601标准格式化的日期：