    ```
12.  Return to the expression browser by either clicking the back button or by entering the URL `http://localhost:9090/graph`. Click the drop-down list next to the `Execute` button to see all the metric points available:
    ![Figure 13.4: Prometheus metrics available from the expression browser ](img/B15021_13_04.jpg)
    图 13.4:表达式浏览器中可用的普罗米修斯度量
13.  From the drop-down list or in the query editor, add the `prometheus_http_requests_total` metrics to view all the HTTP requests made to the Prometheus application. Your output may differ from the following. Click the `Execute` button and click the `Graphs` tab to see a visual view of our data:
    ![Figure 13.5: Prometheus HTTP requests graph displayed from the expression browser ](img/B15021_13_05.jpg)
图 13.5:从表达式浏览器显示的普罗米修斯 HTTP 请求图
如果你对我们到目前为止所取得的成就还有点困惑，不要担心。在短时间内，我们建立了普罗米修斯，并开始收集它的数据。尽管我们只收集了普罗米修斯本身的数据，但我们已经能够展示我们现在如何快速轻松地可视化应用正在执行的 HTTP 请求。下一节将向您展示如何通过对 Prometheus 配置进行小的更改来开始从 Docker 和您正在运行的容器中捕获数据。
# 用普罗米修斯监控 Docker 容器
普罗米修斯监控是了解应用功能的一个很好的方法，但是它不能帮助我们监控 Docker 和我们系统上运行的容器。幸运的是，有两种方法可以收集数据，让我们更深入地了解正在运行的容器。我们可以使用 Docker 守护程序向 Prometheus 公开度量，还可以安装一些额外的应用，例如`cAdvisor`，以收集我们系统上运行的容器的进一步度量。
通过对 Docker 配置进行一些小的更改，我们能够向 Prometheus 公开度量标准，以允许它收集在我们的系统上运行的 Docker 守护进程的特定数据。这将是收集度量的一部分，但不会给我们实际运行的容器的度量。这就是我们接下来需要安装`cAdvisor`的地方，它是由谷歌专门为收集我们的运行容器指标而创建的。
注意
如果我们需要在底层硬件上收集更多的指标，Docker 和我们的容器正在运行，我们也可以使用`node_exporter`收集更多的指标。我们不会在本章中讨论`node_exporter`，但支持文档可以在以下网址找到:
https://github.com/prometheus/node_exporter.
由于 Docker 已经在您的主机系统上运行，将其设置为允许 Prometheus 从其连接度量是一个向`/etc/docker/daemon.json`文件添加配置更改的问题。在大多数情况下，文件很可能是空白的。如果文件中已经有详细信息，您只需将以下示例中的*第 2 行*和*第 3 行*添加到您的配置文件中。*第 2 行*启用此`experimental`功能，公开 Prometheus 要收集的指标，*第 3 行*为这些要公开的数据点设置 IP 地址和端口:
```
1 {
2        "experimental": true,
3        "metrics-addr": "0.0.0.0:9191"
4 }
```
由于配置更改，您系统上的 Docker 守护程序需要重新启动才能生效。但是一旦发生这种情况，您就应该在您添加到`daemon.json`文件中的指定 IP 地址和端口上有可用的指标。在我们上面的例子中，这将是在`http://0.0.0.0:9191`。
为了安装`cAdvisor`，谷歌提供了一个易于使用的 Docker 映像，可以从谷歌的云注册表中提取并在您的环境中运行。
要运行`cAdvisor`，您将运行装载与 Docker 守护程序和运行容器相关的所有目录的映像。您还需要确保公开指标可用的端口。默认情况下，`cAdvisor`被配置为在端口`8080`上公开指标，除非您对`cAdvisor`的底层映像进行更改，否则您将无法更改这些指标。
以下`docker run`命令将卷装入容器，如`/var/lib/docker`、`/var/run`，将端口`8080`暴露给主机系统，最后使用谷歌提供的最新`cadvisor`映像:
```
docker run \
  --volume=: \
  --publish=8080:8080 \
  --detach=true \
  --name=cadvisor \
  gcr.io/google-containers/cadvisor:latest
```
注意
对`cAdvisor`的底层映像进行更改不是我们将在本章讨论的内容，但是您需要参考`cAdvisor`文档并对`cAdvisor`代码进行具体更改。
`cAdvisor`映像还将提供一个有用的网络界面来查看这些指标。`cAdvisor`不保存任何历史数据，需要用普罗米修斯收集数据。
一旦 Docker 守护程序和`cAdvisor`有了普罗米修斯可以收集的数据，我们需要确保我们有一个计划的配置来将数据添加到时间序列数据库中。应用目录中的`prometheus.yml`配置文件允许我们这样做。您只需将配置添加到文件的`scrape_configs`部分。从下面的例子中可以看出，您需要添加一个`job_name`参数，并提供指标作为`targets`条目的详细信息:
```
    - job_name: ''
      static_configs:
      - targets: [':']
```
一旦目标对普罗米修斯可用，你就可以开始搜索数据。现在，我们已经提供了如何开始使用 Prometheus 收集 Docker 指标的详细信息，下面的练习将向您展示如何在运行的系统上执行此操作。
## 练习 13.02:与普罗米修斯一起收集 Docker 指标
在本练习中，您将配置普罗米修斯开始从我们的 Docker 守护程序收集数据。这将允许您查看 Docker 守护程序本身具体使用了哪些资源。您还将运行`cAdvisor` Docker 映像，以开始收集正在运行的容器的特定指标:
1.  To start collecting data from the Docker daemon, you first need to enable this functionality on your system. Start by opening the `/etc/docker/daemon.json` file with your text editor and add in the following details:
    ```
    1 {
    2        "experimental": true,
    3        "metrics-addr": "0.0.0.0:9191"
    4 }
    ```
    您对配置文件所做的更改将公开 Docker 守护程序度量，以允许普罗米修斯抓取并存储这些值。要启用此更改，请保存 Docker 配置文件并重新启动 Docker 守护程序。
2.  通过打开您的网络浏览器并使用您在配置中设置的网址和端口号来验证这是否有效。输入网址`http://0.0.0.0:9191/metrics`，你会看到一个允许普罗米修斯抓取的指标列表:
    ```
    # HELP builder_builds_failed_total Number of failed image builds
    # TYPE builder_builds_failed_total counter
    builder_builds_failed_total{reason="build_canceled"} 0
    builder_builds_failed_total{reason="build_target_not_reachable
    _error"} 0
    builder_builds_failed_total{reason="command_not_supported_
    error"} 0
    builder_builds_failed_total{reason="dockerfile_empty_error"} 0
    builder_builds_failed_total{reason="dockerfile_syntax_error"} 0
    builder_builds_failed_total{reason="error_processing_commands_
    error"} 0
    builder_builds_failed_total{reason="missing_onbuild_arguments_
    error"} 0
    builder_builds_failed_total{reason="unknown_instruction_error"} 0
    …
    ```
3.  您现在需要让普罗米修斯知道它可以在哪里找到 Docker 向它公开的指标。您可以通过应用目录中的`prometheus.yml`文件来实现。不过，在执行此操作之前，您需要停止 Prometheus 服务的运行，这样配置文件中的添加内容才会生效。打开普罗米修斯正在运行的终端，按下 *Ctrl* + *C* 。当您成功做到这一点时，您应该会看到类似如下的输出:
    ```
    level=info ts=2020-04-28T04:49:39.435Z caller=main.go:718 
    msg="Notifier manager stopped"
    level=info ts=2020-04-28T04:49:39.436Z caller=main.go:730 
    msg="See you next time!"
    ```
4.  Open the `prometheus.yml` configuration file in the application directory with your text editor. Move to the end of the file in the `scrape_configs` section and add *lines 21* to *34*. The additional lines will tell Prometheus that it can now obtain metrics from the Docker daemon that has been exposed on IP address `0.0.0.0` and port `9191`:
    普罗米修斯号
    ```
    21 scrape_configs:
    22   # The job name is added as a label 'job=' to any        timeseries scraped from this config.
    23   - job_name: 'prometheus'
    24
    25     # metrics_path defaults to '/metrics'
    26     # scheme defaults to 'http'.
    27 
    28     static_configs:
    29     - targets: ['localhost:9090']
    30 
    31   - job_name: 'docker_daemon'
    32     static_configs:
    33     - targets: ['0.0.0.0:9191']
    34
    ```
    这一步的完整代码可以在 https://packt.live/33satLe.找到
5.  保存您对`prometheus.yml`文件所做的更改，并从命令行再次启动普罗米修斯应用，如下所示:
    ```
    ./prometheus --config.file=prometheus.yml
    ```
6.  If you move back to the expression browser for Prometheus, you can once again verify it is now configured to collect data from the Docker daemon. Either select `Targets` from the `Status` menu or use the URL `http://localhost:9090/targets`, which should now include the `docker_daemon` job we specified in our configuration file:
    ![Figure 13.6: Prometheus Targets now with docker_daemon ](img/B15021_13_06.jpg)
    图 13.6:普罗米修斯目标现在有了 docker_daemon
7.  Verify that you are collecting data by searching `engine_daemon_engine_cpus_cpus`. This value should be the same as the number of CPUs or cores available on your host system. Enter this into the Prometheus expression browser and click the `Execute` button:
    ![Figure 13.7: docker_daemon CPUs available on the host system ](img/B15021_13_07.jpg)
    图 13.7:主机系统上可用的 docker _ daemon CPUs
8.  Docker 守护进程受限于它可以向普罗米修斯公开的数据量。设置`cAdvisor`映像以收集运行容器的详细信息。在命令行中使用以下`docker run`命令，将它作为谷歌提供的容器运行。`docker run`命令使用存储在谷歌容器注册表中的`cadvisor:latest`映像，类似于 Docker Hub。没有必要登录到此注册表；映像会自动被拉到你的系统中:
    ```
    docker run \
      --volume=/:/rootfs:ro \
      --volume=/var/run:/var/run:ro \
      --volume=/sys:/sys:ro \
      --volume=/var/lib/docker/:/var/lib/docker:ro \
      --volume=/dev/disk/:/dev/disk:ro \
      --publish=8080:8080 \
      --detach=true \
      --name=cadvisor \
      gcr.io/google-containers/cadvisor:latest
    ```
9.  `cAdvisor` comes with a web interface that will give you some basic functionality, but as it does not store historical data, you will be collecting the data and storing it on Prometheus. For now, open another web browser session and enter the URL `http://0.0.0.0:8080` and you should see a web page similar to the following:
    ![Figure 13.8: The cAdvisor welcome page ](img/B15021_13_08.jpg)
    图 13.8:cAdvisor 欢迎页面
10.  Enter the URL `http://0.0.0.0:8080/metrics` to view all the data that `cAdvisor` is displaying on the web interface.
    注意
    对普罗米修斯配置文件进行更改时，需要重新启动应用才能使更改生效。在我们进行的练习中，我们通过停止服务来达到同样的效果。
11.  As you did with the Docker daemon, configure Prometheus to periodically scrape data from the metrics endpoint. Stop the Prometheus application running and, once again, open the `prometheus.yml` configuration file with your text editor. At the bottom of the configuration, add in another configuration for `cAdvisor` with the following details:
    普罗米修斯号
    ```
    35   - job_name: 'cadvisor'
    36     scrape_interval: 5s
    37     static_configs:
    38     - targets: ['0.0.0.0:8080']
    ```
    这一步的完整代码可以在 https://packt.live/33BuFub.找到