𝑛∑
𝐹1 =
𝑥𝑗
(1)
by selecting 𝑥𝑗 ∈ {0, 1}∀𝑗 subject to:
𝑗=1
𝑛∑
∀𝐴𝑖 ∈ 𝒜,
𝑡𝑖𝑗 × 𝑥𝑗 ≥ 1
𝑗=1
(2)
i.e., covered set = 𝒜, where 𝒜 = {𝐴1, 𝐴2, 𝐴3, ..., 𝐴𝑚}
attack events, 𝒞ℳ =
is
all
{𝐶𝑀1, 𝐶𝑀2, 𝐶𝑀3, ..., 𝐶𝑀𝑛} is the set of all countermea-
sures and 𝑛=∣𝒞ℳ∣.
set of
atomic
the
This optimization problem is a special case of the set
cover problem [15] or the ‘unate covering problem’ [16].
To compute the cover, we improve on the greedy algorithm
presented in [17]. Reduction techniques are ﬁrst applied to
the T matrix. Some terminologies relevant to the reduction
are as follows:
∙ Essential Columns: Columns that contain the only non-
zero entry of a certain row.
∙ Row Dominance: Row 𝑖 is said to dominate row 𝑗 if
row 𝑖 contains at least all the 1-entries in row 𝑗. Row 𝑖
is the dominating row and row 𝑗 is the dominated row.
∙ Column Dominance: Column 𝑖 is said to dominate
column 𝑗 if column 𝑖 contains at least all the 1-entries
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:10 UTC from IEEE Xplore.  Restrictions apply. 
in column 𝑗. Column 𝑖 is the dominating column and
column 𝑗 is the dominated column.
system administrator is said to be performing a partial
cover without intent.
Instances of essential columns and column dominance are
shown in Figure 4. The procedure for reduction of the matrix
is described in Algorithm 1.
Algorithm 1 Reduction of matrix T
REDUCE(𝒪𝒫𝒯 , T) {
1. do {
2. ﬁnd essential columns {𝐶𝑀1,...,𝐶𝑀𝑝} in T
remove essential columns {𝐶𝑀1,...,𝐶𝑀𝑝} from T
remove rows {𝐴1,...,𝐴𝑞} covered by the essential
𝒪𝒫𝒯 =𝒪𝒫𝒯 ∪
columns {𝐶𝑀1,...,𝐶𝑀𝑝} from matrix T
{𝐶𝑀1,...,𝐶𝑀𝑝}
4.
3.
rebuild matrix T
∗
check for row dominance
remove dominating rows {𝐴1,...,𝐴𝑟} from matrix T
rebuild matrix T
∗
check for column dominance
remove dominated columns {𝐶𝑀1,...,𝐶𝑀𝑠}
rebuild matrix T
} while(reduction occurred in T)
5. return (𝒪𝒫𝒯 , T)
}
A sample run of the procedure REDUCE(𝒪𝒫𝒯 ,T) on the
matrix of the BGP ACT in Figure 2 is shown in Figure 4
with the optimal solution {𝐶𝑀1,𝐶𝑀2}. The same reduction
technique is used by the Quine-McCluskey method for
ﬁnding the smallest set of prime implicants that cover a
given Boolean sum of minterms [16]. Sometimes the set
covering problem is easy to solve, but this is not always true
(for instance, when matrix T is reducible to a cyclic matrix).
We will deal with such cases later. Further, we may not be
always able to cover all atomic attack events due to various
reasons such as budgetary constraints, inadequate number
of countermeasures and so on. This case (partial cover of
atomic attack events) is discussed in the next subsection.
2) Partial cover of atomic attack events: A system ad-
ministrator is interested in ﬁnding the best possible way of
defending only the critical sectors of their system. This type
of optimization problem is termed as ’partial cover’. Based
on the nature of motivation, partial cover may be of two
types: partial cover with/without intent.
(a) Partial cover with intent: A system administrator has
to work within a given budget constraint which may
preclude him from implementing all the countermea-
sures required for full cover. If given the cost constraint,
the countermeasures can cover only a subset of all the
attack events in the ACT (we call this subset the ’critical
vulnerability set’ or in short, 𝒞𝒱𝒮) then this case is said
to be partial cover with intent.
(b) Partial cover without intent: When the countermeasures
provided are insufﬁcient in covering all the attack events
(e.g., as in case of the SCADA ACT, in some cases we
can not ﬁnd all the countermeasures against attacks even
though we have enough security investment cost), the
Constraint Matrix  T1
CM12
CM1
1
A111
A1121
A1122
A1123
A12
A2
1
1
1
1
0
1
1
1
1
1
0
CM2 is an 
essential 
column (for A )
2
OPT=OPT  U {CM 2}
OPT= φ
CM2
0
1
0
0
0
0
1
Constraint Matrix  T2
OPT={CM2}
CM1
1
1
1
1
1
0
A111
A1121
A1122
A1123
A12
A2
CM12
1
1
1
1
1
1
0
CM2
0
0
0
0
0
1
Remove column 
CM2 and rows 
covered by CM2 (A2) 
Rebuild 
matrix T
Constraint Matrix  T4
OPT={CM1, CM2}
Column 
Dominance: 
CM1
dominates 
CM12, remove 
column CM12
1
1
CM1
1
1
1
1
1
CM12
1
1
1
1
1
1
A111
A1121
A1122
A1123
A12
Columns CM1 and 
CM121 dominate 
each other 
OPT=OPT U {CM1}
OPT={CM2}
Constraint Matrix  T3
CM1
1
A111
CM12
1
1
1
1
1
1
A1121
A1122
A1123
A12
1
1
1
1
Figure 4.
Algorithm 1) on the matrix T for the BGP ACT in Figure 2
A sample run of the procedure REDUCE (𝑂𝑃 𝑇 ,T) (in
The partial cover problem can be considered as a special
case of the full cover problem. The objective function is the
same as in Eq. (1) but the constraint is different from the
full cover case:
𝑛∑
∀𝐴𝑖 ∈ 𝒞𝒱𝒮,
𝑡𝑖𝑗 × 𝑥𝑗 ≥ 1
(3)
𝑖=1
Optimal solution of BGP ACT in Figure 4 is an instance
of the partial cover with intent case. One optimal solution
{𝐶𝑀1,𝐶𝑀2} requires a total security investment cost of 90$
(based on values in Table A.4). The other possible optimal
solution {𝐶𝑀121,𝐶𝑀2} requires a total security investment
cost of 80$. If the system administrator has a budget
constraint of less than 80$ (let us say 50$), only one counter-
measure can be implemented in the ACT (𝐶𝑀1 or 𝐶𝑀121 or
𝐶𝑀2, each with its own CVS). For example, CVS of 𝐶𝑀1
is {𝐴1} or {𝐴111,𝐴1121,𝐴1122,𝐴1123,𝐴121} whereas CVS of
𝐶𝑀2 is {𝐴2}. The system administrator then decides which
countermeasure to be enforced based on its corresponding
CVS. The SCADA ACT in Figure 3 is an instance of a
partial cover without intent. The system administrator is
provided with countermeasures for dealing with corruption
in the power load system but none of them can deal with
any corrupt estimates provided by the customers. Optimal
countermeasure set is computed using Algorithm 2 but with
covered set 𝒞𝒱𝒮 = {HMI, SCOPF, G1, G2, G3}. The
possible optimal countermeasure sets are OPT1={(switch
HMI),(restart 𝐺1)},OPT2={(switch HMI),(restart 𝐺2)} and
OPT3 = {(switch HMI),(restart 𝐺3)}.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:10 UTC from IEEE Xplore.  Restrictions apply. 
3) Special cases on full/partial cover of attack events:
the BGP ACT in Figure 2, greedy solution
For
works and returns an optimal countermeasure set of
𝒪𝒫𝒯 ={𝐶𝑀1,𝐶𝑀2} (see Figure 4). However, only greedy
strategy does not work for all ACTs. For the ACT for TCP
sequence number attack in Figure 5, we see that reduction
techniques do not work on the matrix as the matrix is
devoid of essential columns, row or column dominance (this
form of a matrix is called a cyclic matrix). This problem
is a special case of the ‘unate covering problem’ called
the ‘cyclic unate covering problem’. Noel et. al. in [18]
discussed a similar drawback while analyzing attack graphs
with their Topological Vulnerability Analysis (TVA) tool. If
an ACT has a cyclic matrix or has a matrix that is reducible
to a cyclic matrix, multiple optimal solutions may exist.
To reduce computational overhead, we perform an implicit
enumeration of the possible solutions. We use a branch and
bound algorithm [19]. The optimal solution using objective
function 𝐹1 can be found using Algorithm 2 where we
separate out all four cases (i) full cover, (ii) partial cover
with intent, (iii) partial cover without intent, and (iv) cyclic
constraint matrix. Before we present a branch and bound
GOAL:  Integrity Compromise (TCP 
sequence number attack)
OR
Blind spoofing 
attack
Non-blind 
spoofing attack
Partially blind 
spoofing attack
AND
AND
AND
A1: Guess 
sequence 
number 
AND
AND
A2:Inject 
valid BGP 
message
A2:Inject 
valid BGP 
message
CM2
’ : MD5 
authentication
A3:Sniff 
ongoing 
traffic
CM3
’ : Remove
Sniffer
AND
A3: Use 
sniffed
traffic
data
A1: Guess 
sequence 
number 
CM1
’ :  Sequence 
Number 
Randomization
ACT mincuts:
A1A2CM2
A2A3CM3
A3A1CM1
’
’
’
Constraint Matrix   T
CM2
1
CM1
1
A1
A2
A3
0
1
1
0
           Cyclic Matrix
CM3
0
1
1
No essential columns, 
no row dominance, no 
column dominance. 
Reduction 
techniques stop 
without termination
Cyclic Unate 
Covering Problem
Figure 5.
Instance of a cyclic matrix
algorithm for the special cases, we introduce cost analysis
using ACT.
B. Quantitative Analysis without probability assignment
Cost Computation. In ACT, cost may be of two types:
cost of attack and security investment cost. Cost of attack
in an ACT (𝐶𝑎𝑡𝑡𝑎𝑐𝑘𝑒𝑟) with no repeated events is computed
using the expressions in Table I [20]. For an ACT containing
one or more repeated events, attack cost of the mincut with
lowest cost is selected to be the cost of attack for the ACT in
general. Security investment cost for ACT is computed by
summing the security investment cost of countermeasures
present in the ACT.
FORMULAE FOR ATTACK COST AND IMPACT COMPUTATION
Table I
Gate type
AND gate
OR gate
k-of-n gate
attack cost
∑𝑛
min𝑛
∑𝑘
impact
∑𝑛
𝑖=1 c𝐴𝑖
𝑖=1 c𝐴𝑖 max𝑛
∑𝑘
𝑖=1 c𝐴𝑖
𝑖=1 i𝐴𝑖
𝑖=1 i𝐴𝑖
𝑖=1 i𝐴𝑖
Impact Computation. Impact computation for different
gates in ACT with no repeat events is summarized in Table
I. If one or more repeated events are present in the ACT, we
follow a procedure similar to that used in cost computation.
We ﬁrst ﬁnd the mincuts of the ACT. Impact of a mincut is
the sum of the impact values of the atomic attack events in
the mincut.
C. Minimization of Security Investment Cost
We use objective function 𝐹2 shown in Eq. (4) to ﬁnd
a countermeasure set to minimize the security investment
cost and maximize the security level of a system. We can
see that 𝐹2 is a general version of the objective function
𝐹1 where ∀𝐶𝑀𝑗, 𝑐𝐶𝑀𝑗 =1. Then the objective is to select
𝑥𝑗 ∈ {0, 1}∀𝑗 so as to minimize
𝐹2 =