func rob213_l(nums []int, start, end int) int {
return curMax
for i := start + 2; i = i {
if len(c) == k{
return
C = c[:len(c)-1]
findcombinationSum3(k, target-i, i+l, C, res)
C = append(c，i)
*res = append(*res, b)
copy(b，c)
b := make([]int, len(c))
---
## Page 353
formed by these buildings collectively (Figure B).
buildings as shown on a cityscape photo (Figure A), write a program to output the skyline
viewed from a distance. Now suppose you are given the locations and height of all the 
题目
218. The Skyline Problem
代码
用map判断即可。
解题思路
这是一道简单题，如果数组里面有重复数字就输出 true，否则输出 flase。
题目大意
func containsDuplicate(nums []int) bool{
package leetcode
return false
record := make(map[int]bool, len(nums))
record[n] = true
if_
 return true 
, found := record[n]; found {
---
## Page 354
5
0
2
---
## Page 355
Notes:
0], [15 10], [20 8], [24, 0] ].
For instance, the skyline in Figure B should be represented as: [ [2 10], [3 15], [7 12], [12
in between any two adjacent buildings should be considered part of the skyline contour.
merely used to mark the termination of the skyline, and always has zero height. Also, the ground
horizontal line segment. Note that the last key point, where the rightmost building ends, is 
[x3, y3] , ... ] that uniquely defines a skyline. A key point is the left endpoint of a 
The output is a list of "key points" (red dots in Figure B) in the format of [ [x1,yl], [x2, y2],
15], [5 12 12], [15 20 10], [19 24 8] ].
For instance, the dimensions of all buildings in Figure A are recorded as: [ [2 9 10], [3 7
surface at height O.
-Li > O. You may assume all buildings are perfect rectangles grounded on an absolutely flat 
and Hi is its height. It is guaranteed that O ≤ Li, Ri ≤ INT_MAX, O 0。您可以假设所有建
每个建筑物的几何信息用三元组[Li，Ri，Hi] 表示，其中 Li 和 Ri 分别是第i座建筑物左右边缘的×坐
照片（图A）上显示的所有建筑物的位置和高度，请编写一个程序以输出由这些建筑物形成的天际线
（图B）。
城市的天际线是从远处观看该城市中所有建筑物形成的轮廓的外部轮廓。现在，假设您获得了城市风光
题目大意
·给出一个二维数组，每个子数组里面代表一个高楼的信息，
）类似的线段树的题目有：第715题，第732题，第 699 题。第715 题是区间更新定值(不是增
这一题可以用线段树来解。用线段树来解答，可以不用关心"楼挡住楼"的情况。由于楼的坐标是离
起始坐标，高楼终止坐标，高楼高度。要求找到这些高楼的边际点，并输出这些边际点的高度信
确的答案；三条高度为 5 的线应该在最终输出中合并为一个：[.[2 3],[4 5],[12 7], .]
减)，第218题可以用扫描线，第732 题和第 699 题类似，也是俄罗斯方块的题目，但是第732
间的高度和前一个区间的高度一样，就算是等高的楼。当高度与前一个高度不相同的时候就算是天
个楼的右边界也要加入到 query 中，因为最终 query 的结果需要包含这些边界。将离散的数据排
散的，所以先把楼在×轴上两个坐标离散化。同第 699 题一样，楼的宽度是一个区间，但是离散
输出天际线中不得有连续的相同高度的水平线。 例如 [.,[2 3],[4 5],[7 5],[11 5],[12 7].] 是不正 
题的俄罗斯方块的方块会“断裂”。
序以后，按照楼的信息，每个区间依次 update。最后统计的时候依次统计每个区间，如果当前区
的结果是 20，因为[3,3]这个点会查询到第二个楼上面去。所以每个楼的右边界应该减一。但是每
第一个楼是[1,3)，楼高10，第二个楼是[3,6)，楼高 20。第一个楼如果算上右边界 3，查询[1,3]
输出列表必须按×位排序。
输入列表已经按左×坐标 Li 进行升序排列。
任何输入列表中的建筑物数量保证在[0,10000] 范围内。
[12 7], ...]
lines of height 5 should be merged into one in the final output as such: [... [2 3], [4 5],
际线的边缘，就要添加到最后输出数组中。
的过程中，楼的宽度右边界需要减一，不然查询一个区间会包含两个点，导致错误的结果，例如
instance, [...[2 3], [4 5], [7 5], [11 5], [12 7]...] is not acceptable; the three 
一个高楼的信息包含3 个信息，高楼
---
## Page 357
代码
//解法一 线段树 Segment Tree，时间复杂度 o(n log n)
·排序的时候也需要注意几个问题：如果大楼的边界相等，并且是进入状态，那么再按照高度从大到
func getskyline(buildings [][]int) [][]int {
·动态插入，查找最大值可以选用的数据结构有，最大堆和二叉搜索树。最大堆找最大值O(1)，插
·这一题用线段树做时间复杂度有点高，可以用扫描线解题。扫描线的思路很简单，用一根根垂直于
import
package leetcode
小进行排序；如果大楼的边界相等，并且是离开状态，那么高度按照从小到大进行排序。
st.Init(tmp,func(i,j int) int 
tmp := make([]int, len(posMap)) 
posMap, pos := discretization218(buildings)
"github.com/halfrost/LeetCode-Go/template"
"sort"
查找 max，添加和删除元素都是 O(log n) 的时间复杂度。
入 O(log n)，但是 remove_by_key 需要 O(n)的时间复杂度，并且需要自己实现。二叉搜索树,
度和第二高的高度。其实只需要维护最高的高度这一个高度，因为当离开状态到来的时候，移除掉
时还需要记录下第二高的点。在扫描线扫描的过程中，动态的维护大楼的高度，同时维护最高的高
楼后面了。当扫到一个大楼的右边界的时候，如果是最高点，那么记录下它的状态是离开状态，此
到一个大楼的左边界，有比它更高的高度，就不记录，因为它不是天际线，它被楼挡楼，挡在其他
果没有比这个左边界最高点更高的点，就记录下这个最高点keyPoint，状态是进入状态。如果扫
×轴的竖线，从最左边依次扫到最右边，扫描每一条大楼的边界，当进入大楼的左边界的时候，如
return max(i,j)
当
白前最高的，剩下的高度里面最高的就是第二高的高度。描述的伪代码如下：
for e in events:
event.SortByx()
events = {{x: L 
//扫描线伪代码
if leaving(e): 
if entering(e):
= new DS()
if e.height > ds.max(): ans += [ds.max()]
ds.remove(e.height)
ds.add(e.height)
if e.height > ds.max(): ans += [e.height]
{x: R，height: H，type: leaving}}
,height: H , type: entering},
---
## Page 358
func getskylinel(buildings [][]int) [][]int {
// 解法二 扫描线 Sweep Line，时间复杂度 o(n log n)
func discretization218(positions [][]int) (map[int]int, []int） {
for i, b := range buildings {
es := make([]E, O) 
size := len(buildings)
return posMap, posArray
for i, pos := range posArray {
sort.Ints(posArray)
for k := range tmpMap { 
tmpMap, posArray, posMap := map[int]int{}, []int{}, map[int]int{}
return ans
for i := O; i O && h != lastHeight {
check = true 
 ans = append(ans, []int{pos[i], h})
:= NewE(i, r, h,
0 -- leave 
= append(es, el)
:= NewE(i, l, h, (
:= b[2]
:= b[1]
1-- enter
1)
---
## Page 359
type E struct {// 定义—个 event 事件
// E define 
二
二
// for e in events:
// event.SortByx()
二
二
//扫面线伪代码
N int // number 编号
return skyline
pq := NewIndexMaxPQ(size)
sort.slice(es,func(i,j int) bool {
sky]ine := make([][]int, 0) 
ds = new Ds()
 events = {{x: l 
for.
if leaving(e):
if entering(e):
curH := pq.Front()
if es[i].x == es[j].x {
return es[i].x  ds.max(): ans += [ds.max()]
ds.remove(e.height)
ds.add(e.height)
 if e.height > ds.max(): ans += [e.height]
if curH >h{ 
h := pq.Front()
pq. Remove(e.N)
else { 
pq.Enque(e.N, e.H)
if e.H > curH { 
if es[i].T == es[j].T
{x:R，height: H，type: leaving}} 
-, e := range es {
return es[i].T  es[j].H
,height: H，type: entering},
---
## Page 360
func (q *IndexMaxPQ)
// Front define
func (q *IndexMaxPQ)
// Enque define
func NewIndexMaxPQ(n int)
// NewIndexMaxPQ 
type IndexMaxPQ struct 
// IndexMaxPQ define 
func NewE(n, x, h, t int) 
// NewE define
if q.total<l{
q.qp[key] = q.tota]
q.pq[q.total] = key
q.items[key] = val
q.total++ 
for i := O; i < n; i++ {
q.swim(q.total)
return IndexMaxPQ{
total 
b
items []int 
return 0
pq:
items: make([]int,
T:
N:
int 
int//× 坐标
int
n,
 int
t
[]int
十
[]int
// type0-进入 1-离开
//height 高度
qp,
make([]int,
 define
Front(） int
 Enque(key,
n+1),
 IndexMaxPQ 
m
了
val
了
int)
r
---