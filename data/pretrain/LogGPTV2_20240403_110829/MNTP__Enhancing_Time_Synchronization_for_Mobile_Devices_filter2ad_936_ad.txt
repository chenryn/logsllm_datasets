protocols have also been developed for more specialized de-
ployments such as wireless sensor networking [22, 24, 25],
underwater sensor networks [20, 31, 32] and acoustic net-
works [50].
There has been substantial work in analyzing the NTP’s
synchronization accuracy, which has led to improvements
to the protocol and to new protocols e.g., [21, 38, 46, 47, 52].
Our work on MNTP relates to this research in that we design
mechanisms to improve the accuracy of clock synchroniza-
tion using SNTP through wireless channel-aware pacing of
synchronization requests, and we propose improvements to
the ﬁltering and clock correction heuristics. An issue re-
lated to clock synchronization is that of correctly process-
ing packet trace data containing timestamps from two in-
Figure 10: Reported SNTP offsets on wired network vs.
MNTP offsets on wireless network without NTP clock
correction.
offsets reported by SNTP client connected to a wireless host
and simultaneously collect the offsets reported by MNTP.
Throughout the experiment, the wireless host’s clock is al-
lowed to drift, i.e., the clock correction using NTP is turned
off.
Figure 12 shows the comparison of the offsets reported by
standard SNTP and MNTP on a wireless network without
NTP’s clock correction. The ﬁtted trend line for clock skew
and the clock correction feature capabilities of MNTP along
with the large offsets rejected by MNTP are also shown. We
again observe high offsets with SNTP—as high as 392ms—
whereas the offsets reported by MNTP are always less than
20ms, as seen from MNTP’s clock corrected drift values
(shown in blue). Further, we see that many of the large off-
sets reported by SNTP are effectively rejected by MNTP’s
ﬁltering logic producing a robust and accurate clock synchro-
nization for wireless devices despite the presence of lossy
channel conditions.
5.3 Tuning MNTP
In order
to tune the four parameters of MNTP—
speciﬁcally, warmupPeriod, warmupWaitTime, regularWait-
Time and resetPeriod—shown in Algorithm 1 for various
indoor and outdoor settings, we built a stand-alone tool called
the MNTP tuner. At the core of the MNTP tuner tool is the
ability to perform trace-driven analysis on the recorded clock
offset values. Using the MNTP tuner tool, our goal is to
evaluate the impact of various input parameter choices and
the suitability of parameters in a given network condition.
MNTP tuner consists of three components: (a) a logger,
(b) an emulator, and (c) a searcher. First, the logging compo-
nent runs on the TN of our testbed and emits SNTP requests
to multiple reference clocks every 5 seconds and records
the responses in the form of traces. It also records the corre-
sponding wireless hints from the channel every time an SNTP
request is emitted. Next, the emulator is capable of running
the MNTP algorithm using the captured traces and wireless
hints and prints the offsets reported by MNTP.
Table 2: Sample list of values for parameters, RMSE of offsets, and the number of requests generated by MNTP tuner.
Figure 11: Outputs produced by our MNTP tuning emulator.
Conﬁguration no. warmupPeriod (min) warmupWaitTime (min)
resetPeriod (min) RMSE (ms) Number of requests
1
2
3
4
5
6
30
40
50
70
90
240
0.25
0.25
0.25
0.25
0.084
0.084
regularWaitTime (min)
15
15
15
30
15
15
240
240
240
240
240
240
13.08
11.66
11.09
10.86
9.27
8.9
239
316
387
534
1210
2913
dependent clocks by correcting for clock skew and other
artifacts [41, 44]. Key ﬁndings from these studies that inform
the design of MNTP are that clock skew can be non-linear
and highly erratic.
in experiments over a wireless network (100’s of ms) than in
experiments with a wired network (close to zero).
Based on the results of our laboratory experiments, we
describe MNTP, a set of modiﬁcations to SNTP that improve
its behavior by (1) exposing wireless link-layer information
to pace out polling request to NTP servers when wireless
channel conditions are favorable, and (2) adding lightweight
ﬁltering heuristics which result in discarding outlier latency
samples. We evaluate MNTP in a laboratory setting, com-
paring it with SNTP. Our results show that MNTP is able to
maintain synchronization with a reference clock to within 25
ms, which is a 12-fold improvement over SNTP.
In future work, we intend to extensively test and enhance
our MNTP implementation toward the goal of broader deploy-
ment. Unfortunately, there are no known implementations of
NTP for any of the popular mobile operating systems, which
complicates this effort. However, we plan to build a reference
NTP implementation and perform an exhaustive benchmark-
ing of MNTP against SNTP and NTP in terms of metrics
like processor and battery performance on various mobile
platforms.
We also plan to investigate self-tuning of parameter settings
and to evaluate MNTP in a wider variety of cellular and
WiFi settings and to evaluate the trade-offs between MNTP’s
performance and the tuning of its parameters. We intend to
carry out longer-term in situ experiments in order to evaluate
not only the trade-offs but also MNTP’s effectiveness in day-
to-day operation.
Acknowledgements
We thank the NTP operators for providing NTP server
logs, and our shepherd Sharon Goldberg and the anonymous
reviewers for their valuable comments. This material is based
upon work supported by the NSF under grant CNS-1054985,
DHS grant BAA 11-01 and AFRL grant FA8750-12-2-0328.
Any opinions, ﬁndings, and conclusions or recommendations
expressed in this material are those of the author and do not
necessarily reﬂect the views of the NSF, DHS or AFRL.
References
[1] Android Codebase. https://source.android.com/source/.
[2] Cisco wireless site survey FAQ. http://www.cisco.com/c/
en/us/support/docs/wireless-mobility/wireless-lan-wlan/
68666-wireless-site-survey-faq.html#qa23.
[3] Getting time from GPS on iOS. http://stackoverﬂow.com/
questions/31920829/getting-time-from-gps-on-ios.
[4] Is it possible to get the atomic clock timestamp from the
iPhone GPS.
http://stackoverﬂow.com/questions/1444456/
is-it-possible-to-get-the-atomic-clock-timestamp-from-the-
iphone-gps .
[5] NITZ functionality for non-3gpp devices. http://goo.gl/
xQUECH.
22042.htm.
[6] NITZ Service Description. http://www.3gpp.org/DynaReport/
[7] NTP Clock Discipline Algorithm. https://www.eecis.udel.edu/
[8] NTP Clock Select Algorithm. https://www.eecis.udel.edu/
~mills/ntp/html/discipline.html.
~mills/ntp/html/discipline.html.
Figure 12: Reported SNTP versus MNTP offsets on wire-
less network without NTP clock correction. The experi-
ments were ran for 4 hours.
The idea of measuring and exposing wireless hints to
higher protocol layers is similar to other efforts in the area of
cross-layer design of mobile systems [28, 29, 49, 53]. In par-
ticular, MNTP considers wireless conditions when emitting
synchronization requests in order to avoid collecting clock
offsets that may be skewed due to channel contention. To
the best of our knowledge, MNTP exploits cross-layer infor-
mation for enhancing clock synchronization in mobile and
wireless devices in a way that has not been considered in
prior studies.
7. SUMMARY AND FUTURE WORK
Synchronizing independent clocks in a network setting is
important for a wide variety of applications and has been
extensively studied. The problem of clock synchronization
on mobile wireless devices poses particular challenges and
has received little attention in prior work. Our study seeks to
address this gap, with the goal of improving clock synchro-
nization on mobile wireless hosts and with low overhead.
We begin by examining the one-way delay characteris-
tics of likely wireless hosts through analysis of packet traces
collected at 19 NTP servers in the US, observing high aver-
age delays as well as high variance. In particular, for three
predominantly wireless service providers, we see median
latencies of 550 ms and high variance, whereas for other
service providers we see median latencies of 40–50ms with
low variance. Through further analysis of the traces, we at-
tribute these characteristics to the fact that the majority of
these clients implement SNTP, and thus do not employ any of
the mechanisms used in NTP that would generally eliminate
poor latency samples.
In a set of laboratory testbed experiments, we further exam-
ine the degree to which SNTP exhibits poor synchronization.
We create a tool that enables wireless interference to be pro-
grammatically altered through manipulation of base station
transmit power and introduction of cross-trafﬁc. We ﬁnd that
the mean time offset with respect to a reference clock of the
latency samples observed with SNTP is signiﬁcantly higher
[9] NTP Polling Interval. http://www.eecis.udel.edu/~mills/ntp/
html/poll.html.
NTPSync.
[11] NTPSync
[10] NTPSync app. https://github.com/Free-Software-for-Android/
code
snippet.
https://github.com/
Free-Software-for-Android/NTPSync/blob/master/
NTPSync/src/main/java/org/ntpsync/service/
NtpSyncRemoteService.java.
[12] Relationship between SNR and RSSI. http://community.
arubanetworks.com/t5/Controller-Based-WLANs/
What-is-the-relationship-between-data-rate-SNR-and-RSSI/
ta-p/178312.
[13] Smart GPS Time app. https://play.google.com/store/apps/
details?id=com.pautinanet.smartgpstime&hl=en.
[14] SNR and RSSI values. https://supportforums.cisco.com/
discussion/10954591/snr-and-rssi-values.
Tool.
https://github.com/the-tcpdump-group/
[15] Tcpdump
tcpdump.
[16] Team Cymru whois lookup service. http://www.team-cymru.
org/IP-ASN-mapping.html#whois.
[17] Windows and Mac Stumbler and Survey Tools.
http://www.networkworld.com/article/2925081/wi-ﬁ/
7-free-wi-ﬁ-stumbling-and-surveying-tools-for-windows-
and-mac.html .
[18] AKELLA, A., JUDD, G., SESHAN, S., AND STEENKISTE, P.
Self-Management in Chaotic Wireless Deployments. Wireless
Networks (2007).
[19] BALASUBRAMANIAN, N., BALASUBRAMANIAN, A., AND
VENKATARAMANI, A. Energy Consumption in Mobile
Phones: A Measurement Study and Implications for Network
Applications. In ACM IMC (2009).
[20] CHIRDCHOO, N., SOH, W.-S., AND CHUA, K. C. MU-Sync:
A Time Synchronization Protocol for Underwater Mobile Net-
works. In WuWNeT (2008).
[21] D. VEITCH AND K. VIJAYALAYAN. Network Timing and the
2015 Leap Second. In PAM (2016).
[22] DAI, H., AND HAN, R. TSync: A Lightweight Bidirectional
Time Synchronization Service for Wireless Sensor Networks.
SIGMOBILE CCR (2004).
[23] DURAIRAJAN, R., MANI, S., SOMMERS, J., AND BARFORD,
P. Time’s Forgotten: Using NTP to Understand Internet La-
tency. In ACM HotNets (2015).
[24] ELSON, J., GIROD, L., AND ESTRIN, D. Fine-grained
Network Time Synchronization Using Reference Broadcasts.
OSDI (2002).
[25] ELSON, J., AND RÖMER, K. Wireless Sensor Networks: A
New Regime for Time Synchronization. SIGCOMM CCR
(2003).
[26] HAVERINEN, H., SIREN, J., AND ERONEN, P. Energy Con-
sumption of Always-on Applications in WCDMA Networks.
In IEEE VTC (2007).
[27] IEEE. IEEE 1588 Precision Time Protocol (PTP), Version 2
Speciﬁcation, March 2008.
[28] KHAN, S., PENG, Y., STEINBACH, E., SGROI, M., AND
KELLERER, W. Application-driven Cross-layer Optimization
for Video Streaming over Wireless Networks. IEEE Communi-
cations Magazine (2006).
[29] KUMAR, S., CIFUENTES, D., GOLLAKOTA, S., AND
KATABI, D. Bringing Cross-layer MIMO to Today’s Wire-
less LANs. In ACM SIGCOMM (2013).
[30] LAMPORT, L. Time, Clocks, and the Ordering of Events in a
Distributed System. Communications of ACM (1978).
[31] LIU, J., ZHOU, Z., PENG, Z., CUI, J.-H., ZUBA, M., AND
FIONDELLA, L. Mobi-Sync: Efﬁcient Time Synchronization
for Mobile Underwater Sensor Networks. IEEE TPDS (2013).
[32] LU, F., MIRZA, D., AND SCHURGERS, C. D-sync: Doppler-
based Time Synchronization for Mobile Underwater Sensor
Networks. In WuWNet (2010).
[33] MARZULLO, K. Loosely-coupled distributed services: a dis-
tributed time service. PhD thesis, Stanford University, 1983.
[34] MILLS, D. Network Time Protocol (Version 3): Speciﬁcation,
Implementation and Analysis. https://www.ietf.org/rfc/rfc1305.
txt.
[35] MILLS, D. DCNet Internet Clock Service. https://tools.ietf.
[36] MILLS, D. Internet Delay Experiments. https://tools.ietf.org/
org/html/rfc778, April 1981.
html/rfc889, December 1983.
[37] MILLS, D. Network Time Protocol (NTP). https://tools.ietf.
org/html/rfc958, September 1985.
[38] MILLS, D. Measured Performance of the Network Time Pro-
tocol in the Internet System. https://tools.ietf.org/html/rfc1128,
October 1989.
[39] MILLS, D. Simple Network Time Protocol (SNTP). https:
//tools.ietf.org/html/rfc1769, March 1995.
[40] MILLS, D., MARTIN, J., BURBANK, J., AND KASCH, W.
Network Time Protocol Version 4: Protocol and Algorithms
Speciﬁcation. https://tools.ietf.org/html/rfc5905, June 2010.
[41] MOON, S. B., SKELLY, P., AND TOWSLEY, D. Estimation and
Removal of Clock Skew from Network Delay Measurements.
In IEEE Infocom (1999).
[42] MURDOCH, S. J. Hot or Not: Revealing Hidden Services by
their Clock Skew. In ACM CCS (2006).
[43] PAEK, J., KIM, J., AND GOVINDAN, R. Energy-efﬁcient
Rate-adaptive GPS-based Positioning for Smartphones. In Pro-
ceedings of the MobiSys (2010).
[44] PAXSON, V. Measurements and Analysis of End-to-end Inter-
net Dynamics. PhD thesis, University of California, Berkeley,
1997.
[45] PAXSON, V. On Calibrating Measurements of Packet Transit
Times. In ACM SIGMETRICS (1998).
[46] RIDOUX, J., AND VEITCH, D. Principles of Robust Timing
over the Internet. Queue (2010).
[47] RIDOUX, J., VEITCH, D., AND BROOMHEAD, T. The Case
for Feed-forward Clock Synchronization. IEEE/ACM TON
(2012).
[48] SCHIVELBUSCH, W. The Railway Journey: The Industrializa-
tion of Time and Space in the Nineteenth Century. 2014.
[49] SHAKKOTTAI, S., RAPPAPORT, T. S., AND KARLSSON, P. C.
Cross-layer Design for Wireless Networks. IEEE Communica-
tions Magazine (2003).
[50] SYED, A. A., HEIDEMANN, J. S., ET AL. Time synchro-
nization for high latency acoustic networks. In IEEE Infocom
(2006).
[51] THIAGARAJAN, A., RAVINDRANATH, L., LACURTS, K.,
MADDEN, S., BALAKRISHNAN, H., TOLEDO, S., AND
ERIKSSON, J. VTrack: Accurate, Energy-aware Road Trafﬁc
Delay Estimation using Mobile Phones. In Proceedings of the
SenSys (2009).
[52] VIJAYALAYAN, K., AND VEITCH, D. Rot at the Roots? Exam-
ining Public Timing Infrastructure. In IEEE Infocom (2016).
[53] VUTUKURU, M., BALAKRISHNAN, H., AND JAMIESON, K.
Cross-layer Wireless Bit Rate Adaptation. ACM SIGCOMM
(2009).
[54] ZHANG, T., PATRO, A., LENG, N., AND BANERJEE, S. A
Wireless Spectrum Analyzer in Your Pocket. In ACM HotMo-
bile (2015).