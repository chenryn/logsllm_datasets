(σk, DB(wk); EDBk) ← Search(K, wk,
7:
8:
else if typek = update then
σk−1; EDBk−1)
(σk; EDBk) ← U pdate(K, add/del, (idk, wk),
σk−1; EDBk−1)
Let tk be the messages from client to server in
the Search/U pdate protocols above
9:
10: b ← Adv(1λ, EDB0, t1, t2, . . . , tq);
11: return b;
b ← IdealSSE
1: N ← Adv(1λ)
2: (stS , EDB0) ← SimInit(1λ, N )
3: for k = 1 to q do
4:
5:
6:
Adv,Sim,L(λ, q):
(typek, idk, wk) ← Adv(1λ, EDB0, t1, . . . , tk−1)
if typek = search then
(stS ; tk, EDBk) ← SimSearch(stS ,
LSrch(wk); EDBk−1)
else if typek = update then
(stS ; tk, EDBk) ← SimU pdate(stS ,
7:
8:
9: b ← Adv(1λ, EDB0, t1, t2, . . . , tq);
10: return b
Fig. 13: Real and ideal experiments for the SSE scheme.
LU pdt(wk); EDBk−1)
and each instance SimSE is spawned independently with fresh
randomness, and given that the timestamp of an update fully
determines the corresponding index structure for its entry,
the transcript produced by Sim is indistinguishable from the
messages observed by the adversary during the real protocol
execution. (cid:3)
Theorem 2: Assuming PiBas is an adaptively-secure
result-hiding static SE scheme, and OMAPi are secure obliv-
ious maps, SDa is an adaptively-secure DSE according to
Deﬁnition 1 with LU pdt(op, w, id) = ⊥ and LSrch(w) =
Updates(w).
Proof sketch. Let SimPB = {SimInitPB, SimSearchPB} be
the simulator for Pibas. First, we observer that SimInitPB
can be decomposed into calls to a stateful SimInitOnePB that
simulates just one step of the setup simulation at a time. The
input state of SimInitOnePB is the partially built table, and
the leakage N. After N executions, SimInitOnePB provides
an output that is identically distributed with that of SimInitPB
on input N. This follows easily by the fact that the setup
process of Pibas consists of populating a hash table with
N semantically secure encryptions, stored at pseudorandomly
computed positions. The simulator SimInitOnePB just needs
to remember its previous randomly chosen positions so that
17
eventually he outputs the entire table.5
With that observation, we build our simulator Sim as
follows. First, all calls to OMAP, are replaced by simu-
lated accesses. During setup, SimInit launches 4 · ((cid:96) + 1)
independent instances of SimInitOnei
PB for i = 0, . . . , (cid:96)
and corresponding sizes 1, . . . , 2(cid:96), and initializes update
counter upd = 0. For each update, whenever OLDESTi,
OLDERi are full (which can be computed from i and upd),
SimU pdate calls SimInitOnei+1
PB is full
(after 2i+1 + 1 calls), the simulator terminates the existing
PB instances mapped to OLDESTi, OLDERi and
SimInitOnei
PB instance of OLDi to OLDESTi (if it
map the SimInitOnei
is not vacant). Moreover, it treats the SimInitOnei+1
PB instance
as mapped to the oldest vacant instance for size 2i+1, and
launches a new instance mapped to NEWi. Finally, it always
PB, maps it to the
launches a new instance of SimInitOne1
oldest non-vacant instance for size 1, and increments upd. The
search simulator SimSearch is identical to that of SDa (it just
has to call up to three instances of SimSearchPB per size,
depending on upd).
PB . If SimInitOnei+1
By the same reasoning as that for SDa above, and since
OMAPi are independently instantiated with secure oblivious
the transcript produced by Sim is indistinguishable
maps,
from the messages observed by the adversary during the real
protocol execution. (cid:3)
Theorem 3: Assuming F is a PRF, RN D is a semanti-
cally secure encryption scheme, and the three OMAPs are
secure oblivious maps, QOS is an adaptively-secure DSE
according to Deﬁnition 1 in the programmable random or-
acle model, with LU pdt(op, w, id) = op and LSrch(w) =
(Updates(w), DelHist(w)).
Proof. We prove the security of QOS by deﬁning a sequence
of games as follows:
• Game−0: This is the RealSSE game as deﬁned in
Appendix A.
• Game−1: This is the same as Game−0 but during
setup the OM AP initializations are replaced with
calls to the OM AP simulators for sizes W, N, N
respectively. All future OM AP accesses are emulated
by calls to the corresponding access simulators.
Game−1 is indistinguishable from Game−0 due to
the security of the oblivious maps.
• Game−2: This is the same as Game−1, except that
the encryptions value computed during update and
search are all replaced with dummy zero encryptions.
Game−2 is indistinguishable from Game−1 due to
the semantic security of RN D.
• Game−3: This is the same as Game−2, except
that
the tokens tkI, tkD generated during update
and search are generated uniformly at
random
from the range of the PRF F , {0, 1}λ. The ﬁrst
time a token is created for a certain w, cntw
5For simplicity, we assume that the ﬁrst time SimInitOnePB is called, it
just simulates (internally) the key generation process, hence SimInitOnePB
will be called a total of N + 1 times to emulate the execution of SimInitPB
on input N.
let
Dels
during
1), . . . , (vdw , v(cid:48)
search,
Then,
=
(v1, v(cid:48)
dw ) be the list of all timestamp-
pairs that match each deletion timestamp vi to the
timestamp v(cid:48)
i of the previous insertion it cancels out,
sorted in increasing order such that vi > vi−1. Using
U (from Game−4) and Dels the client builds the
entire update tree for w as follows. First create an
empty binary tree with 2(cid:100)log iw(cid:101) leafs. Match each
leaf [1, iw] to an insertion operation’s timestamp u(cid:48)
(as computed in Game−4) starting from the leftmost
leaf. Then, for every vi ∈ Dels, mark the leaf with
timestamp v(cid:48)
i as black and then keep moving upwards,
reading at every level
its ancestor and the sibling
of its ancestor. If both children of a node is black
mark it black. After ﬁnishing all steps for deletion
with timestamp vi, let d(cid:48)
i be the node closest to the
root
then
programs the oracle such that H(cid:48)(tkD, d(cid:48)
i) = TD[vi].
If H(cid:48)(tkD, d(cid:48)
i) has been set previously (due to an
adversarial query involving tkD before this token was
revealed), then the game aborts.
that you just marked black. The client
i
Finally, line 18 of the search algorithm is replaced
with choosing key uniformly at random from the
range of H(cid:48). Let d(cid:48)
j = y, then client sets TI [vj] = key,
in preparation of future searches.
First, note that unless the game aborts it produces a
transcript identical to Game−3, in the programmable
random oracle model for H. This holds since the
combination of U, Dels uniquely deﬁne the colors
of the nodes of the update tree for w. Then, using
the same argument as above but for H(cid:48), we conclude
that Game−5 is indistinguishable from Game−4.
• Game−6 : This is the same as Game−5 but client
receives op instead of op, w, id during updates,
and Updates(w), DelHist(w) instead of w during
searches. Since he does not have access to w, he
populates lists TokensI, TokensD as follows. For a
search at timestamp ˆw, the client ﬁrst checks whether
the input update history Updates(w) is an extension
of one observed during a previous search that took
place during timestamp ˆw(cid:48). If so, this implies that
the searches at times ˆw and ˆw(cid:48) are for the same
keyword and he retrieves tkI, tkD as the latest entries
from TokensI( ˆw(cid:48)), TokensD( ˆw(cid:48)). Else, he chooses
fresh random tokens tkI, tkD and appends them to
TokensI( ˆw), TokensD( ˆw).
The client’s code as described in Game−6, is es-
sentially the code of the simulator in the IdealSSE
game since it only takes as input the leakage speciﬁed
in Theorem 3. By a standard hybrid argument, the
produced transcript is indistinguishable from the one
produced in Game−0, and the result follows. (cid:3)
is appended to one of
combination it
the two
lists TokensI(w), TokensD(w) (for insertions and
deletions respectively),
that are different for every
keyword. Game−3 is indistinguishable from Game−2
due to the security of the PRF.
• Game−4: This is the same as Game−3, except that
calls to H are replaced with a programmable random
oracle as follows. For general H-calls from the
adversary, if the input has not be queried before and
the result has not been programmed, return a value
chosen uniformly at random from the range of H
and store the input-result pairs for future consistency.
Else, return the previously stored result for this input.
Speciﬁcally during insertion updates (line 6), H−
calls are entirely eliminated and instead key is chosen
uniformly at random from the range of H. The client
holds a list TI where he appends the chosen key. If
the update is a deletion he appends ⊥. Note that this
also eliminates token generation at line 5.
U
let
for
during
search,
1, . . . , u(cid:48)
Then,
=
(u1, op1), . . . , (uaw , opaw ) be the list of timestamp-
update type pairs corresponding to all previous
the queried keyword w,
updates
sorted by
timestamp in increasing order. Let u(cid:48)
iw be
the sub-list of U such that opi = add, again sorted
in increasing order, and let d1, . . . , diw be the
natural ordering of u(cid:48)
i from 1 . . . , iw. The client then
programs the oracle such that H(tkI, di) = TI [u(cid:48)
i].
If H(tkI, di) has been set previously (due to an
adversarial query involving tkI before this token
was revealed), then the game aborts. Finally, line 13
of the search algorithm is replaced with choosing
key uniformly at random from the range of H.
Let dj = leaf, then client sets TI [u(cid:48)
j] = key, in
preparation of future searches.
First, note that unless the game aborts it produces a
transcript identical to Game−3, in the programmable
random oracle model for H. Given that the range of
H is {0, 1}λ, whereas the total number of H-calls that
the adversary can do beyond the ones required during
searches is polynomial in λ (since the adversary is
PPT),
the probability of aborting is negligible in
λ, hence Game−4 is indistinguishable from Game−3.
• Game−5: This is the same as Game−4 but we
now also replace H(cid:48) with a programmable random
oracle. For general H(cid:48)-calls from the adversary, if
the input has not been queried before and the result
has not been programmed, return a value chosen
uniformly at random form the range of H and store
the input-result pairs for future consistency. Else,
return the previously stored result for this input.
Speciﬁcally during deletion updates (line 17), H(cid:48)−
calls are entirely eliminated and instead key is chosen
uniformly at random from the range of H(cid:48). The client
holds a list TD where he appends the chosen key. If
the update is an insertion he appends ⊥. Note that this
also eliminates token generation at line 16.
18