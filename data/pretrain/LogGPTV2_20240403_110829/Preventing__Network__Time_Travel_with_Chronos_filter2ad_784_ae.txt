Figure 16: β as a function of x
n
server pool for the Chronos clients in Europe still consists of
hundreds of servers, as described in Figure 14. Also, examining
the delay values and distribution shown in Figure 13 reveals
that setting a delay threshold of, say, 80ms, is sufﬁcient to
obtain large server pools in California and Ohio, containing
the majority of available NTP servers in these regions. We turn
our attention to Virginia, which exhibits the highest average
delay. Figure 15 depicts a CDF. As shown in the ﬁgure, setting
the delay threshold to be 80ms yields a server pool of only
90 servers, whereas a threshold of 107ms yields a pool of
300 servers. We conclude that the desired delay threshold
varies across geographical regions and that, in general, a delay
threshold lower than 100ms enables the generation of very
large server pools.
B. Choosing ω
Bounding inter-sample distances. Recall that Chronos, after
sampling the server pool, discards the highest and lowest sam-
ples and then checks that the distance between the highest and
lowest surviving samples does not exceed a certain threshold
(speciﬁcally, 2ω). Our aim is to gain empirical insights into
what would be a reasonable threshold to set.
We examine each of the 2000 all-server-sample sets and,
for each such collection of samples, remove the x lowest-
offset-value and x highest-offset-value samples for varying
values of x. We refer to the distance between the lowest and
highest surviving samples as β.
Figure 16 plots the average value of β, across all exper-
n, i.e., of the fraction of samples
iments, as a function of x
removed (from each end) from the total number of queried
servers. Observe that when x
n = 0.33, i.e., two thirds of
the samples are removed, β < 4ms. Observe also that when
n = 0.033, i.e. after removing 6.6% of the samples, β is
x
always below 50ms (with a maximum difference of 25ms
between regions). As these results indicate, even setting x to be
very low with respect to the size of the sample n, i.e., when
only the very lowest and very highest values are discarded,
13
client-server communication, as proposed in [36], [42], is a
nontrivial task in practice.
Clock synchronization in distributed computing theory.
Synchronizing clocks in a distributed system has been central
to distributed computing research from its early days [20]. The
early work of Cristian [5] inﬂuenced the design of the clock
synchronization protocols that are still in use. The speciﬁc
clock synchronization protocol used in NTP was suggested
by Marzullo [28]–[30].
The topic of fault tolerant clock synchronization has also
been the subject of much attention [6], [15], [44]. The idea
of using approximate agreement [7], [8] to synchronize clocks
was introduced in [44]. We point out, however, that the above
mentioned fault tolerant protocols assumed a relatively small
group of processors and were not designed to operate at Inter-
net scale. Chronos relies on the adaptation ideas from this rich
body of literature to the context of NTP time synchronization.
This involves contending with challenges such as maintaining
backwards compatibility, avoiding excessive overhead, and
beyond.
VII. CONCLUSION AND FUTURE RESEARCH
We presented Chronos, an NTP client designed to enable
secure time synchronization in a backwards compatible, easily
deployable manner, and without involving excessive commu-
nication overhead. We view Chronos as a promising approach
for securing NTP in a way that sidesteps the many obstacles
facing prior approaches.
We leave the reader with interesting directions for future
research. We list a few of these directions below.
•
•
•
Chronos’
time synchronization guarantees. Our
primary motivation in designing Chronos was pre-
venting timeshifting attacks. We conjecture, however,
that as Chronos relies on more time samples than
today’s NTP clients and also crowdsources queries
across multiple servers, Chronos might improve upon
today’s NTP clients also in terms of time accuracy.
We leave this question for future research. We do
point out, however, that our results in section V-A
(see Figure 12) suggest that the majority of servers
in Chronos’ server pools exhibit local times that are
very close to each other. This suggests that averaging
over the clock values of many servers is a reasonable
approach for attaining time accuracy.
Better security guarantees. Our analysis of Chronos’
security guarantees was aimed merely to set an upper
bound on the attacker’s probability of success, show-
ing that it is negligible. We believe that deeper in-
vestigation of the Chronos approach (the implications
of parameter setting, more nuanced probabilistic anal-
yses, and more) could lead to better formal security
guarantees.
Upper bounds on the security guarantees of NTP
security schemes. Our results establish that Chronos
signiﬁcantly outperforms today’s NTP clients in terms
of resilience to MitM attacks. How close, however, is
Chronos to the optimal level of security achievable
via such security schemes? Answering this question
requires setting upper bounds on the level of security
attainable by any backwards-compatible NTP client
design. Consider a model in which an NTP client can,
as in our framework, repeatedly query a server pool
(of legacy NTP servers) of size n and is limited to
some (expected) number of queries x per time-update
round. What are the optimal security guarantees of
deterministic/randomized time-sampling schemes as a
function of n, x, and the fraction of the server pool
controlled by the attacker?
• Weighing servers according to reputation. Chronos’
time sampling scheme treats all servers in the server
pool as equal both when sampling and when averaging
over samples. Another approach might be to weigh
servers differently according to their reliability (e.g.,
assign higher weights to servers with GPS clocks),
trustworthiness (e.g., servers controlled by trusted
parties), and past behavior (e.g., servers with good
“reputation” from past sampling iterations).
•
•
Beneﬁts from changes to the server-side. A key
principle guiding Chronos’ design is not relying on
changes to NTP servers (only to the client side).
This is needed, in our view, to render deployment
easier and more realistic. Understanding, however, the
implications for security of being able to modify (e.g.,
a small number of NTP servers) is of value and might
prove beneﬁcial.
other
improve
approach
to
protocols. To
Extending
our
time-
synchronization
upon
NTP’s time-accuracy guarantees, other approaches,
such as PTP [11], [45], have been designed. While
our focus is on NTP, application of our high-level
approach to other
time-synchronization protocols
might aid in securing these alternate schemes.
We advocate the further exploration of the merits and limi-
tations of Chronos, and the further investigation the feasibility
of this new path to NTP security.
ACKNOWLEDGEMENTS
We thank the Cyber Security Research Center at Hebrew
University,
in conjunction with the Israeli National Cyber
Bureau (INCB) in the Prime Minister’s Ofﬁce, for ﬁnancial
support. We also thank the INCB for helpful discussions. We
thank the anonymous reviewers and Vyas Sekar for valuable
comments. Michael Schapira and Neta Rozen Schiff are sup-
ported by an ERC Starting Grant.
REFERENCES
[1] Ntp version 4.2.8p9 code, November 2016.
[2] The secure network time protocol (ntpsec) distribution, April 2017.
[3] ANDREEVA, O., GORDEYCHIK, S., GRITSAI, G., KOCHETOVA, O.,
POTSELUEVSKAYA, E., SIDOROV, S. I., AND TIMORIN, A. A. Indus-
trial control systems vulnerabilities statistics. Tech. rep., Kaspersky lab,
2016.
14
[4] AWERBUCH, B., CURTMOLA, R., HOLMER, D., NITA-ROTARU, C.,
AND RUBENS, H. Mitigating byzantine attacks in ad hoc wireless
networks. Tech. rep., Department of Computer Science, Johns Hopkins
University, Tech, 2004.
[28] MARZULLO, K., AND OWICKI, S. Maintaining the time in a distributed
In Proceedings of the Second Annual ACM Symposium on
system.
Principles of Distributed Computing (New York, NY, USA, 1983),
PODC ’83, ACM, pp. 295–305.
[29] MARZULLO, K. A. Maintaining the time in a distributed system. Tech.
rep., Xerox, 1984.
[30] MARZULLO, K. A. Maintaining the Time in a Distributed System:
An Example of a Loosely-coupled Distributed Service (Synchronization,
Fault-tolerance, Debugging). PhD thesis, Stanford, CA, USA, 1984.
AAI8506272.
[31] MILLS, D. How ntp works, 2014.
[32] MILLS, D., MARTIN, J., BURBANK, J., AND KASCH, W. Rfc 5905:
Network time protocol version 4: Protocol and algorithms speciﬁcation.
internet engineering task force (ietf), 2010.
[33] MILLS, D. L. Internet time synchronization: the network time protocol.
IEEE Transactions on Communications 39 (1991), 1482–1493.
[34] MILLS, D. L., MAMAKOS, L., AND PETRY, M. Network Time Protocol
(NTP). RFC 958, sep 1985.
[35] MIZRAHI, T. A game theoretic analysis of delay attacks against time
In 2012 IEEE International Symposium
synchronization protocols.
on Precision Clock Synchronization for Measurement, Control and
Communication Proceedings (Sept 2012), pp. 1–6.
[36] MIZRAHI, T. Slave diversity: Using multiple paths to improve the
In 2012 IEEE Interna-
accuracy of clock synchronization protocols.
tional Symposium on Precision Clock Synchronization for Measurement,
Control and Communication Proceedings (Sept 2012), pp. 1–6.
[37] MIZRAHI, T. Rfc 7384 (informational):security requirements of time
protocols in packet switched networks, October 2014.
[38] NOVICK, A. N., AND LOMBARDI, M. A. Practical limitations of ntp
In 2015 Joint Conference of the IEEE International
time transfer.
Frequency Control Symposium the European Frequency and Time
Forum (April 2015), pp. 570–574.
[39] PETERSON, A. Researchers say u.s. internet trafﬁc was re-routed
through belarus. that’s a problem., November 2013.
[40] ROTTGER, S. Analysis of the ntp autokey procedures. master’s thesis,
technische universitt braunschweig, 2012.
[41] SELVI, J. Bypassing http strict transport security. In Black Hat Europe
(2014).
[42] SHPINER, A., REVAH, Y., AND MIZRAHI, T. Multi-path time pro-
In 2013 IEEE International Symposium on Precision Clock
tocols.
Synchronization for Measurement, Control and Communication (ISPCS)
Proceedings (Sept 2013), pp. 1–6.
[43] TIME, N., AND DIVISION, F. The nist authenticated ntp service, 2010.
[44] WELCH, J. L., AND LYNCH, N. A. A new fault-tolerance algorithm
for clock synchronization. Inf. Comput. 77, 1 (1988), 1–36.
[45] WOLFE, M. Improving network timing in ﬁnancial institutions: Regu-
latory imperative or opportunity to achieve operational excellence? In
The ATIS Workshop on Time Sync in Financial Markets (November
2016).
[5] CRISTIAN, F. Probabilistic clock synchronization. Distributed Com-
puting 3, 3 (1989), 146–158.
[6] DOLEV, D., HALPERN, J. Y., SIMONS, B., AND STRONG, R. Dynamic
fault-tolerant clock synchronization. J. ACM 42, 1 (Jan. 1995), 143–185.
[7] DOLEV, D., LYNCH, N. A., PINTER, S. S., STARK, E. W., AND
WEIHL, W. E. Reaching approximate agreement in the presence of
faults. In Third Symposium on Reliability in Distributed Software and
Database Systems, SRDS 1983, Clearwater Beach, FL, USA, October
17-19, 1983, Proceedings (1983), IEEE Computer Society, pp. 145–154.
[8] DOLEV, D., LYNCH, N. A., PINTER, S. S., STARK, E. W., AND
WEIHL, W. E. Reaching approximate agreement in the presence of
faults. J. ACM 33, 3 (1986), 499–516.
[9] DOWLING, B., STEBILA, D., AND ZAVERUCHA, G. Authenticated
In 25th USENIX Security Symposium
network time synchronization.
(USENIX Security 16) (Austin, TX, 2016), USENIX Association,
pp. 823–840.
[10] DUAN, H., WEAVER, N., ZHAO, Z., HU, M., LIANG, J., JIANG, J.,
LI, K., AND PAXSON, V. Hold-On: Protecting against on-path DNS
poisoning. In Securing and Trusting Internet Names (2012), National
Physical Laboratory.
[11] ESTRELA, P. V., AND BONEBAKKER, L. Challenges deploying ptpv2
in a global ﬁnancial company. In 2012 IEEE International Symposium
on Precision Clock Synchronization for Measurement, Control and
Communication Proceedings (September 2012), pp. 1–6.
[12] GERSTUNG, H. How to conﬁgure ntp for use in the ntp pool project
on ubuntu 16.04, May 2017.
[13] GOLDBERG, S. Why is it taking so long to secure internet routing?
Queue 12, 8 (Aug. 2014), 20:20–20:33.
[14] HABERMAN, B., AND MILLS, D. Rfc 5906: Network time protocol
version 4: Autokey speciﬁcation. internet engineering task force (ietf),
2010.
[15] HALPERN, J. Y., SIMONS, B., STRONG, R., AND DOLEV, D. Fault-
In Proceedings of the Third Annual
tolerant clock synchronization.
ACM Symposium on Principles of Distributed Computing (New York,
NY, USA, 1984), PODC ’84, ACM, pp. 89–102.
[16] HERZBERG, A., AND SHULMAN, H. Fragmentation Considered Poi-
In IEEE CNS 2013. The
sonous: or one-domain-to-rule-them-all.org.
Conference on Communications and Network Security. (2013).
[17] HOCH, D.
Integrating sun kerberos and microsoft active directory
kerberos, 2005.
[18] HODGES, J., AND JACKSON, C. Http strict transport security (hsts),
November 2012.
[19] KAMINSKY, D. It’s the end of the cache as we know it. In Black ops
2008, Black Hat USA.
[20] LAMPORT, L. Time, clocks, and the ordering of events in a distributed
system. Commun. ACM 21, 7 (July 1978), 558–565.
[21] LEE, K. S., WANG, H., SHRIVASTAV, V., AND WEATHERSPOON, H.
Globally synchronized time via datacenter networks. In Proceedings of
the 2016 Conference on ACM SIGCOMM 2016 Conference (New York,
NY, USA, 2016), SIGCOMM ’16, ACM, pp. 454–467.
[22] LISKA, A. NTP Security: A Quick-Start Guide. Apress, 2016.
[23] LTD, N. M. Time traceability for the ﬁnance sector. Tech. rep., NPL
Management Ltd, United Kingdom, March 2016.
[24] MALHOTRA, A., COHEN, I. E., BRAKKE, E., AND GOLDBERG, S.
Attacking the network time protocol. IACR Cryptology ePrint Archive
2015 (2015), 1020.
[25] MALHOTRA, A., AND GOLDBERG, S. Attacking ntp’s authenticated
broadcast mode. SIGCOMM Comput. Commun. Rev. 46, 2 (May 2016),
12–17.
[26] MALHOTRA, A., GUNDY, M. V., VARIA, M., KENNEDY, H., GARD-
NER, J., AND GOLDBERG, S. The security of ntp’s datagram protocol.
IACR Cryptology ePrint Archive 2016 (2016), 1006.
[27] MALHOTRA, A., GUNDY, M. V., VARIA, M., KENNEDY, H., GARD-
NER, J., AND GOLDBERG, S. The security of ntp’s datagram protocol.
Tech. rep., 2016.
15