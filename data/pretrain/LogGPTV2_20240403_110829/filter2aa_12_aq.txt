### TCP确认机制详解

#### 摘要
本文详细探讨了TCP协议中的确认机制，特别是如何处理非连续片段的接收情况。通过具体示例和图解，解释了累积确认机制的局限性，并介绍了选择确认（SACK）作为改进方案。

#### 引言
在TCP确认机制中，非连续片段的有效处理是一个重要问题。确认号表示所有小于该编号的数据已被接收方成功接收。如果接收到的数据不连续，则无法仅通过一个确认号来有效确认。这可能导致严重的性能问题，尤其是在高速或可靠性较差的网络中。

#### 传输过程示例
假设服务器向客户端发送四个片段，每个片段包含200字节的数据。客户端成功接收到前两个片段后，会发送一条确认消息，确认号为201。这意味着客户端已经成功接收了从序列号0到200的所有数据。此时，服务器可以将这两个片段从重传队列中移除，并将其发送窗口右移200字节。

接下来，假设片段3丢失，但片段4被成功接收。由于TCP使用累积确认机制，客户端无法单独确认片段4，因为这会暗示片段3也被成功接收。因此，客户端需要等待片段3的重传。在此期间，客户端将片段4保存在其接收缓冲区中，但不会发送确认消息。

服务器端，片段3的重传计时器会超时，导致服务器重新发送片段3。当客户端收到重传的片段3后，它会发送一条确认消息，确认号为361，表明片段3和片段4都已成功接收。

#### 处理非连续片段的问题
在这种情况下，服务器不知道片段4的状态。虽然客户端已经收到了片段4，但由于片段3未被确认，客户端不能发送确认号501或更高的确认消息。因此，服务器可能会继续发送后续片段，直到填满客户端的接收窗口，但其发送窗口不会移动。

#### 未确认片段的处理策略
对于丢失片段后的处理，有两种常见的策略：

1. **仅重传超时片段**：
   - 仅重传超时的片段，希望其他片段能够成功接收。
   - 如果超时片段之后的片段确实已经被接收，这种方法是最佳的。
   - 如果这些片段没有被接收，每个片段都需要单独计时并重传，这会导致较高的延迟。

2. **重传所有未确认片段**：
   - 一旦某个片段超时，不仅重传该片段，还重传所有尚未确认的片段。
   - 这种方法确保了任何时间都有一个等待确认的停顿时间，并在所有未确认片段丢失的情况下刷新全部未确认片段。
   - 缺点是可能重传不必要的数据，增加了网络负载。

#### 选择确认（SACK）
为了更有效地处理非连续片段，TCP引入了选择确认（SACK）机制。SACK允许设备分别确认非连续片段的数据范围。连接双方必须在建立连接时通过SYN片段协商是否启用SACK。

例如，在上述示例中，如果客户端接收到片段4而未接收到片段3，它可以在确认号为201的消息中包含SACK选项，指明“已接收到字节361至500，但尚未确认”。服务器收到这个信息后，知道片段4已经被接收，但片段3仍需重传。

当片段3重传并被客户端成功接收后，客户端会发送确认号为501或更高的确认消息，正式确认片段3和片段4。如果客户端没有发送确认消息，服务器会在片段3重传时或计时器超时的情况下自动重传片段4。

#### 重传计时器的设置
重传计时器的值也是一个关键因素。如果设置过低，会导致过度重传；如果设置过高，会降低性能。通常，通过自适应重传过程动态调整这一值，以优化性能。

#### 结论
TCP确认机制在处理非连续片段时存在一定的局限性，但通过选择确认（SACK）机制可以显著提高效率。理解这些机制有助于更好地设计和优化网络通信系统。

#### 参考资料
- EMC中文支持论坛: https://community.emc.com/go/chinese

---

本文作者：Zhang Jiawen  
来源：网络基本功系列：细说网络那些事儿