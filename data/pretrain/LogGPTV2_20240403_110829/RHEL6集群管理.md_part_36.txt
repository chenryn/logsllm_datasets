2.  ::: para
    在将要接收陷阱的外部主机中编辑 `/etc/snmp/snmptrapd.conf`{.filename}
    配置文件，指定您的社区字符串。例如：使用以下条目可让
    `snmptrapd`{.command} 守护进程使用 `public`{.literal}
    社区字符串处理通知。
    :::
    ``` screen
    authCommunity log,execute,net public
    ```
3.  ::: para
    执行以下命令在接收陷阱的外部主机中确定启用并运行
    `snmptrapd`{.command} 守护进程：
    :::
    ``` screen
    # chkconfig snmptrapd on
    # service snmptrapd start
    ```
:::
::: para
有关处理 SNMP 通知的详情请参考 `snmptrapd.conf`{.command} man page。
:::
:::
::: section
::: titlepage
# [⁠]{#ch-SNMP-Configuration-CA.html#s1-snmp-traps-CA}10.4. 红帽高可用性附加组件产生的 SNMP 陷阱 {.title}
:::
::: para
`foghorn`{.command} 守护进程生成以下陷阱：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `fenceNotifyFenceNode`{.literal}
    :::
    ::: para
    在被 fence 的节点尝试 fence
    另一个节点时会出现这个陷阱。注：只会在一个节点中生成这个陷阱 \--
    即在尝试执行 fence 操作的节点中生成。这个通知包括以下字段：
    :::
    ::: itemizedlist
    -   ::: para
        `fenceNodeName`{.literal} \-- 被 fence 的节点名称
        :::
    -   ::: para
        `fenceNodeID`{.literal} \-- 被 fence 的节点 id
        :::
    -   ::: para
        `fenceResult`{.literal} \-- fence 操作结果（0 表示成功，-1
        表示有问题，-2 表示没有定义 fencing 方法）
        :::
    :::
-   ::: para
    `rgmanagerServiceStateChange`{.literal}
    :::
    ::: para
    集群服务状态更改时会出现这个陷阱。该通知包括以下字段：
    :::
    ::: itemizedlist
    -   ::: para
        `rgmanagerServiceName`{.literal} \--
        该服务名称，其中包括服务类型（例如：`service:foo`{.literal} 或者
        `vm:foo`{.literal}）。
        :::
    -   ::: para
        `rgmanagerServiceState`{.literal} \--
        该服务的状态。这不包括过渡状态，比如 `starting`{.literal} 和
        `stopping`{.literal}，以减小陷阱中的杂乱程度。
        :::
    -   ::: para
        `rgmanagerServiceFlags`{.literal} \--
        服务标签。以下是目前支持的两个标签：`frozen`{.literal}
        表示已经使用 `clusvcadm -Z`{.command}
        冻结服务；`partial`{.literal} 表示在该服务中将失败的资源标记为
        `non-critical`{.literal}，这样可在该资源失败并手动重启其组件时不影响整个服务。
        :::
    -   ::: para
        `rgmanagerServiceCurrentOwner`{.literal} \--
        服务拥有者。如果该服务没有运行，则该字段为 `(none)`{.literal}。
        :::
    -   ::: para
        `rgmanagerServicePreviousOwner`{.literal} \--
        如果知道，则列出最后的服务拥有者。如果不知道最后的拥有者，该字段会显示
        `(none)`{.literal}。
        :::
    :::
:::
::: para
`corosync-nodifyd`{.command} 守护进程生成以下陷阱：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `corosyncNoticesNodeStatus`{.literal}
    :::
    ::: para
    当节点加入或者离开集群时会出现这个陷阱。该通知包括以下字段：
    :::
    ::: itemizedlist
    -   ::: para
        `corosyncObjectsNodeName`{.literal} \-- 节点名称
        :::
    -   ::: para
        `corosyncObjectsNodeID`{.literal} \-- 节点 id
        :::
    -   ::: para
        `corosyncObjectsNodeAddress`{.literal} \-- 节点 IP 地址
        :::
    -   ::: para
        `corosyncObjectsNodeStatus`{.literal} \--
        节点状态（`joined`{.literal} 或者 `left`{.literal}）
        :::
    :::
-   ::: para
    `corosyncNoticesQuorumStatus`{.literal}
    :::
    ::: para
    仲裁状态更改时会出现这个陷阱。该通知包括以下字段：
    :::
    ::: itemizedlist
    -   ::: para
        `corosyncObjectsNodeName`{.literal} \-- 节点名称
        :::
    -   ::: para
        `corosyncObjectsNodeID`{.literal} \-- 节点 id
        :::
    -   ::: para
        `corosyncObjectsQuorumStatus`{.literal} \--
        仲裁的新状态（`quorate`{.literal} 或者 `NOT quorate`{.literal}）
        :::
    :::
-   ::: para
    `corosyncNoticesAppStatus`{.literal}
    :::
    ::: para
    客户端程序连接到 Corosync 或者与之断开连接时会出现这个陷阱。
    :::
    ::: itemizedlist
    -   ::: para
        `corosyncObjectsNodeName`{.literal} \-- 节点名称
        :::
    -   ::: para
        `corosyncObjectsNodeID`{.literal} \-- 节点 id
        :::
    -   ::: para
        `corosyncObjectsAppName`{.literal} \-- 应用程序名称
        :::
    -   ::: para
        `corosyncObjectsAppStatus`{.literal} \--
        该应用程序的新状态（`connected`{.literal} 或者
        `disconnected`{.literal}）
        :::
    :::
:::
:::
:::
[]{#ch-clustered-samba-CA.html}
::: chapter
::: titlepage
# [⁠]{#ch-clustered-samba-CA.html#ch-clustered-samba-CA}第 11 章 集群 Samba 配置 {.title}
:::
::: para
从红帽企业版 Linux 6.2 发行本开始，红帽高可用附加组件为配置为
active/active 的运行中的集群 Samba
提供支持。中要求您在集群的所有节点中安装并配置 CTDB，与 GFS2
集群的系统文件一同使用。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
红帽企业版 Linux 6 最多支持 4 个运行集群 Samba 的节点。
:::
:::
:::
::: para
本章通过配置示例系统论述配置 CTDB 的步骤。有关配置 GFS2
文件系统的详情请参考*《全局文件系统
2》*。有关配置逻辑卷的详情请参考*《管理逻辑卷管理器》*。
:::
::: section
::: titlepage
# [⁠]{#ch-clustered-samba-CA.html#s1-about-CTDB-CA}11.1. CTDB 概述 {.title}
:::
::: para
CTDB 是 Samba 使用的 TDB 数据库的集群实施。要使用
CTDB，则必须有一个可用的集群文件系统，且该文件系统可为该集群中的所有节点共享。CTDB
在这个集群的文件系统顶层提供集群的功能。从红帽企业版 Linux 6.2
开始，CTDB 还可运行与红帽企业版 Linux 集群提供的堆栈平行的堆栈。CTDB
管理节点成员、执行恢复/故障切换、IP 重新定位以及 Samba 服务。
:::
:::
::: section
::: titlepage
# [⁠]{#ch-clustered-samba-CA.html#s1-Samba-packages-CA}11.2. 所需软件包 {.title}
:::
::: para
除运行红帽高可用附加组件以及红帽弹性存储附加组件所需标准软件包外，使用红帽企业版
Linux 集群运行 Samba 还需要以下软件包：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `ctdb`{.literal}
    :::
-   ::: para
    `samba`{.literal}
    :::
-   ::: para
    `samba-common`{.literal}
    :::
-   ::: para
    `samba-winbind-clients`{.literal}
    :::
:::
:::
::: section
::: titlepage
# [⁠]{#ch-clustered-samba-CA.html#s1-GFS2-Configuration-CA}11.3. GFS2 配置 {.title}
:::
::: para
使用红帽企业版 Linux 集群配置 Samba 需要两个 GFS2
文件系统：一个小文件系统用于 CTDB，第二个文件系统用于 Samba
共享。这个示例演示了如何生成两个 GFS2 文件系统。
:::
::: para
在生成 GFS2 文件系统前，请首先为每个文件系统生成 LVM 逻辑卷。有关生成
LVM
逻辑卷的详情，请参考*《管理逻辑卷管理器》*。这个示例使用以下两个逻辑卷：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `/dev/csmb_vg/csmb_lv`{.literal}，保存将要使用 Samba
    共享导出的用户数据，并根据情况确定大小。这个示例生成大小为 100GB
    的逻辑卷。
    :::
-   ::: para
    `/dev/csmb_vg/ctdb_lv`{.literal}，保存共享 CTDB 状态信息，大小应为
    1GB.
    :::
:::
::: para
您只能在集群的一个节点中生成集群的卷组和逻辑卷。
:::
::: para
要在逻辑卷中生成 GFS2，请运行 `mkfs.gfs2`{.command}
命令。您只能在一个集群节点中运行这个命令。
:::
::: para
要在逻辑卷 `/dev/csmb_vg/csmb_lv`{.literal} 中生成托管 Samba
共享的文件系统，请执行以下命令：
:::
``` screen
[root@clusmb-01 ~]# mkfs.gfs2 -j3 -p lock_dlm -t csmb:gfs2 /dev/csmb_vg/csmb_lv
```
::: para
参数含义如下：
:::
::: variablelist
[`-j`{.literal}]{.term}
:   ::: para
    指定在该文件系统中生成的日志数。这个示例使用有三个节点的集群，因此我们为每个节点生成一个日志。
    :::
[`-p`{.literal}]{.term}
:   ::: para
    指定锁定协议。`lock_dlm`{.literal} 是 GFS2
    用来在节点间进行沟通的锁定协议。
    :::
[`-t`{.literal}]{.term}
:   ::: para
    指定锁定表名称，格式为 *cluster_name:fs_name*。在这个示例中，在
    `cluster.conf`{.filename} 文件中指定的集群名称为
    `csmb`{.literal}，同时我们使用 `gfs2`{.literal} 作为该文件系统名称。
    :::
:::
::: para
这个命令的输出结果如下：
:::
``` screen
This will destroy any data on /dev/csmb_vg/csmb_lv.
  It appears to contain a gfs2 filesystem.