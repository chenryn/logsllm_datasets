前段时间补上了迟迟没有写的 ⽂件包含漏洞原理与实际案例介绍⼀⽂，在其中就提到了
Thymeleaf SSTI 漏洞，昨天在赛博群⾥三梦师傅扔了⼀个随⼿挖的 CVE——Thymeleaf SSTI
Bypass，想着之前项⽬的代码还没清理，⼀起分析来看看
Thymeleaf 是与 java 配合使⽤的⼀款服务端模板引擎，也是 Spring 官⽅⽀持的⼀款服务端模板
引擎。⽽ SSTI 最初是由 James Kettle 提出研究，后来 Emilio Pinna 对他的研究进⾏了补充，然
⽽，这些作者都没有对 Thymeleaf 进⾏ SSTI 漏洞挖掘，因此后来 Aleksei Tiurin 在 ACUNETIX
的官⽅博客上发表了关于 Thymeleaf SSTI 的⽂章。
为了更⽅便读者理解这个 Bypass，因此在这⾥赘述⼀遍⼀些基础性的内容，了解的可以直接跳到
0x03 的内容。
Thymeleaf 表达式可以有以下类型：
${...} ：变量表达式 —— 通常在实际应⽤，⼀般是OGNL表达式或者是 Spring EL，如果
集成了Spring的话，可以在上下⽂变量（context variables ）中执⾏
*{...} : 选择表达式 —— 类似于变量表达式，区别在于选择表达式是在当前选择的对象⽽
不是整个上下⽂变量映射上执⾏。
#{...} : Message (i18n) 表达式 —— 允许从外部源（⽐如 .properties ⽂件）检索特定
于语⾔环境的消息
@{...} : 链接 (URL) 表达式 —— ⼀般⽤在应⽤程序中设置正确的 URL/路径（URL重
写）。
~{...} ：⽚段表达式 —— Thymeleaf 3.x 版本新增的内容，分段段表达式是⼀种表示标
记⽚段并将其移动到模板周围的简单⽅法。 正是由于这些表达式，⽚段可以被复制，或者作
为参数传递给其他模板等等
实际上，Thymeleaf 出现 SSTI 问题的主要原因也正是因为这个⽚段表达式，我们知道⽚段表达式
语法如下：
1. ~{templatename::selector} ，会在 /WEB-INF/templates/ ⽬录下寻找名为
templatename 的模版中定义的 fragment
如有⼀个 html ⽂件的代码如下：
001 写在前⾯
002 Thymeleaf SSTI
然后在另⼀template中可以通过⽚段表达式引⽤该⽚段：
th:insert 和 th:replace: 插⼊⽚段是⽐较常⻅的⽤法
2. ~{templatename} ，引⽤整个 templatename 模版⽂件作为 fragment
这个也⽐较好理解，不做详细举例
3. ~{::selector}  或 ~{this::selector} ，引⽤来⾃同⼀模版⽂件名为 selector 的
fragmnt
在这⾥， selector 可以是通过 th:fragment 定义的⽚段，也可以是类选择器、ID选择器等。
4. 当 ~{} ⽚段表达式中出现 :: ，那么 :: 后需要有值（也就是 selector ）
在了解这些内容后，我们就可以正式来看这个漏洞是怎么⼀回事了。
⾸先，同样的，我们拿⼀个常⻅的例⼦：
这是 SpringBoot 项⽬中某个控制器的部分代码⽚段，thymeleaf 的⽬录如下：
  &copy; 2021 ThreeDream yyds  
HTML
xmlns:
th:
HTML
th:
@GetMapping("/admin")  
public String path(@RequestParam String language)  
{  
    return "language/" + language + "/admin";  
} 
JAVA
从代码逻辑中基本上可以判断，这实际上是⼀个语⾔界⾯选择的功能，如果是中⽂阅读习惯者，那
么会令 language 参数为 cn ，如果是英⽂阅读习惯者，那么会令 language 参数为 en ，代码逻辑
本身实际上是没有什么问题的，但是这⾥采⽤的是 thymeleaf 模板，就出现了问题。
在springboot + thymeleaf 中，如果视图名可控，就会导致漏洞的产⽣。其主要原因就是在控制
器中执⾏ return 后，Spring 会⾃动调度 Thymeleaf 引擎寻找并渲染模板，在寻找的过程中，会
将传⼊的参数当成SpEL表达式执⾏，从⽽导致了远程代码执⾏漏洞。
thymeleaf 渲染的流程如下：
createView() 根据视图名创建对应的View
renderFragment() 根据视图名解析模板名称
所以可以跟进 renderFragment() 来看看如何解析模板名称的：
核⼼代码我复制了出来：
protected void renderFragment(Set markupSelectorsToRender, 
Map model, HttpServletRequest request, HttpServletResponse 
response) throws Exception {   
    String templateName;   
    Set markupSelectors, processMarkupSelectors;   
    ServletContext servletContext = getServletContext();   
    String viewTemplateName = getTemplateName();   
    ISpringTemplateEngine viewTemplateEngine = getTemplateEngine(); 
        ... 
            if (!viewTemplateName.contains("::")) { 
                templateName = viewTemplateName; 
                markupSelectors = null; 
            } else { 
                IStandardExpressionParser parser = 
StandardExpressions.getExpressionParser(configuration); 
                FragmentExpression fragmentExpression; 
                try { 
                    fragmentExpression = 
(FragmentExpression)parser.parseExpression(context, "~{" + 
viewTemplateName + "}"); 
                } catch (TemplateProcessingException var25) { 
JAVA
可以发现，这⾥将模板名称( viewTemplateName ) 进⾏拼接 "~{" + viewTemplateName +
"}" ，然后使⽤ parseExpression 进⾏解析，继续跟进 parseExpression 就可以发现
会通过 EngineEventUtils.computeAttributeExpression 将属性计算成表达式：
                    throw new IllegalArgumentException("Invalid template 
name specification: '" + viewTemplateName + "'"); 
                } 
        ... 
然后再进⾏预处理（预处理是在正常表达式之前完成的执⾏，可以理解成预处理就解析并执了⾏表
达式），最终执⾏了表达式。
效果如下：
http://127.0.0.1:8080/admin?language=__${new 
java.util.Scanner(T(java.lang.Runtime).getRuntime().exec("whoami").getInp
utStream()).next()}__::.k 
这个 POC 为什么这样构造呢？
前⽂在介绍 renderFragment 函数的时候我们提到， renderFragment 在解析模板名称的时候会
将模板名称进⾏拼接  "~{" + viewTemplateName + "}" ，然后使⽤ parseExpression 进⾏解
析，我们跟进 parseExpression
进⼊ org.thymeleaf.standard.expression  StandardExpressionParser.java 中的
parseExpression ⽅法：
(preprocess? StandardExpressionPreprocessor.preprocess(context, input) : 
input); 
JAVA
可以发现对表达式进⾏了 preprocess 预处理，跟进该⽅法：
preprocess 预处理会解析出 __xx__ 中间的部分作为表达式
如果 debug 可以发现，该表达式最终在
org.thymeleaf.standard.expression.VariableExpression.executeVariableExpressio
n() 中作为 SpEL表达式执⾏。
因此 POC 中我们要构造形如 __xx__ 的SpEL表达式（SpEL相关的知识点可以参考此⽂：SPEL 表
达式注⼊漏洞深⼊分析），即表达式要为： __${xxxxx}__  这种形式
那么为什么后⾯还有带有 :: 呢？
因为 renderFragment 中的判断条件：
即只有当模板名包含 :: 时，才能够进⼊到 parseExpression ，也才会将其作为表达式去进⾏执
⾏。
⾄于 POC 最后的 .k ，我们在最开始的提到了：
当 ~{} ⽚段表达式中出现 :: ，那么 :: 后需要有值（也就是 selector ）
因此，最终 POC 的形式就为： __${xxxx}__::.x
实际上，只有3.x版本的Thymeleaf 才会受到影响，因为在2.x 中 renderFragment 的核⼼处理⽅
法是这样的：
if (!viewTemplateName.contains("::")) { 
JAVA
并没有3.x 版本中对于⽚段表达式（ ~{ ）的处理，也因此不会造成 SSTI 漏洞，以下是
SpringBoot 默认引⽤的 thymeleaf 版本
spring boot:1.5.1.RELEASE spring-boot-starter-thymeleaf:2.1.5 
spring boot:2.0.0.RELEASE spring-boot-starter-thymeleaf:3.0.9 
spring boot:2.2.0.RELEASE spring-boot-starter-thymeleaf:3.0.11
针对上⽂中的问题，Thymeleaf 实际上做了修复，在 3.0.12 版本，Thymeleaf 在 util ⽬录下增
加了⼀个名为 SpringStandardExpressionUtils.java 的⽂件：
protected void renderFragment(Set markupSelectorsToRender, 
Map model, HttpServletRequest request, HttpServletResponse 
response) throws Exception { 
        ... 