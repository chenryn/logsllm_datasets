                         - png_ptr->zstream.avail_out + key_size + 1));
                   png_memcpy(text + key_size, png_ptr->zbuf,
                      png_ptr->zbuf_size - png_ptr->zstream.avail_out);
                   png_memcpy(text, key, key_size);
                   text_size = key_size + png_ptr->zbuf_size -                      png_ptr->zstream.avail_out;
                   *(text + text_size) = '\0';
                }
                else
                {
                   png_charp tmp;
                   tmp = text;
                   text = (png_charp)png_malloc(png_ptr, text_size +
                      (png_uint_32)(png_ptr->zbuf_size 
                      - png_ptr->zstream.avail_out));
                   png_memcpy(text, tmp, text_size);
                   png_free(png_ptr, tmp);
                   png_memcpy(text + text_size, png_ptr->zbuf,
                      png_ptr->zbuf_size - png_ptr->zstream.avail_out);
                   text_size += png_ptr->zbuf_size - png_ptr->zstream.avail_out;
                   *(text + text_size) = '\0';
分配内存时
    png_malloc(png_ptr, text_size +
                      (png_uint_32)(png_ptr->zbuf_size 
                      - png_ptr->zstream.avail_out));
最后一步给解压后的字符串末尾赋值时
    *(text + text_size) = '\0';
通过代码可以知道
    text_size = text_size +
                      (png_uint_32)(png_ptr->zbuf_size 
                      - png_ptr->zstream.avail_out)
典型的单字节数组越界即
    buf[buf_length]
**分配内存时 ，分配了 0x4006**
**最后赋值 \x00 时 , 使用 0x4006作为索引 off-by-one**
这个漏洞的样本构造需要让 zTXt 的压缩数据的大小大于 0x2000 , 因为zstream.avail_out初始值为 2000.zTXt
的压缩数据的大小大于 0x2000 时才能进入漏洞分支。
## 修复
分配的时候多分配一个字节
    tmp = text;
         text = (png_charp)png_malloc(png_ptr, text_size +
         (png_uint_32)(png_ptr->zbuf_size 
         - png_ptr->zstream.avail_out + 1));
# CVE-2008-5907
测试样本
    iccp_longkeyword.png
## 分析
漏洞代码
    png_size_t /* PRIVATE */
    png_check_keyword(png_structp png_ptr, png_charp key, png_charpp new_key)
    {
       key_len = strlen(key);
       ............
       ............
       if (key_len > 79)
       {
          png_warning(png_ptr, "keyword length must be 1 - 79 characters");
          new_key[79] = '\0';  // new_key 是一个指针数组
          key_len = 79;
       }
当 key_len 大于 79时，会使用
    new_key[79] = '\0';
往地址写 `0` ， 注意到 `new_key`是一个 `char**p`, 所以上面的代码实际是往一个随机的位置写 8 字节的 `0` .
对应的汇编代码
    lea     rsi, aKeywordLengthM ; "keyword length must be 1 - 79 character"...
    mov     rdi, png_ptr    ; png_ptr
    call    _png_warning
    mov     qword ptr [new_key+278h], 0  // new_key[79] = '\0'; 
    mov     eax, 4Fh ; 'O'
    jmp     loc_12237
以 `png_write_tEXt` 为例
    void /* PRIVATE */
    png_write_tEXt(png_structp png_ptr, png_charp key, png_charp text,
       png_size_t text_len)
    {
       if (key == NULL || (key_len = png_check_keyword(png_ptr, key, &new_key))==0)
       {
          png_warning(png_ptr, "Empty keyword in tEXt chunk");
          return;
       }
这里 `new_key` 是一个栈变量 ，当触发漏洞时 ，就会往 `png_write_tEXt`函数栈帧某个位置写8字节 0 。
**调试时可以看到往栈里面写 0x000000000000000**
## 修复
正确使用指针
    if (key_len > 79)
       {
          png_warning(png_ptr, "keyword length must be 1 - 79 characters");
          (*new_key)[79] = '\0';
          key_len = 79;
       }
# [CVE-2009-0040](https://www.cvedetails.com/cve/CVE-2009-0040/)
## 分析
漏洞代码
    png_read_png(png_structp png_ptr, png_infop info_ptr,
                               int transforms,
                               voidp params)
    {
          info_ptr->row_pointers = (png_bytepp)png_malloc(png_ptr,
             info_ptr->height * png_sizeof(png_bytep));
          for (row = 0; row height; row++)
          {
             info_ptr->row_pointers[row] = (png_bytep)png_malloc(png_ptr,
                png_get_rowbytes(png_ptr, info_ptr));
          }
       }
这里会分配多个 `row_pointer` ， 当内存不足时 ， `png_malloc` 会使用 `longjmp`
去释放掉`row_pointers`数组内的指针，`row_pointers` 中后面的一些没有初始化的内存区域中的残留数据也有可能会被当做指针而
`free` 。
## 修复
分配内存前，初始化为 0
    png_memset(info_ptr->row_pointers, 0, info_ptr->height
             * png_sizeof(png_bytep));
          for (row = 0; row height; row++)
             info_ptr->row_pointers[row] = (png_bytep)png_malloc(png_ptr,
                png_get_rowbytes(png_ptr, info_ptr));
       }
# CVE-2009-5063
## 分析
漏洞代码
    png_write_iCCP(png_structp png_ptr, png_charp name, int compression_type,
       png_charp profile, int profile_len)
    {
       png_size_t name_len;
       png_charp new_name;
       compression_state comp;
       int embedded_profile_len = 0;
       if (profile == NULL)
          profile_len = 0;
       if (profile_len > 3)
          embedded_profile_len =
              ((*( (png_bytep)profile    )) embedded_profile_len)
       {
          png_warning(png_ptr,
            "Truncating profile to actual length in iCCP chunk");
          profile_len = embedded_profile_len;
       }
        if (profile_len)
          profile_len = png_text_compress(png_ptr, profile,
            (png_size_t)profile_len, PNG_COMPRESSION_TYPE_BASE, &comp);
可以看到这里的 profile_len 和 embedded_profile_len 都是 int 类型，
embedded_profile_len从png图片的数据里面取出，当embedded_profile_len为负数时 比如（0xffffffff) ，
最终会进入
    profile_len = embedded_profile_len;
之后会将profile_len 传入
    profile_len = png_text_compress(png_ptr, profile,
            (png_size_t)profile_len, PNG_COMPRESSION_TYPE_BASE, &comp);
而 png_text_compress 接收的参数为 png_size_t 即无符号整数，所以会造成越界。
## 修复
修改类型为 png_size_t.
# [CVE-2010-1205](https://www.cvedetails.com/cve/CVE-2010-1205/)
处理 PNG 的 IDAT数据时会发生堆溢出。测试样本
    xploit.png
## 分析
处理PNG 图片中的 IDAT 数据时，会把 IDAT 中的数据一行一行的取出来保存后，然后进行处理。程序在一开始会使用
`rpng2_info.height` （即IHDR chunk 中的 heigth） 分配一些内存，用来保存每一行的数据。
    static void rpng2_x_init(void)
    {
        rpng2_info.image_data = (uch *)malloc(rowbytes * rpng2_info.height); // 0xaf0
        rpng2_info.row_pointers = (uch **)malloc(rpng2_info.height * sizeof(uch *));// 这里只分配一个指针空间， 因为 heigh 为 1， 而且是 malloc 会有内存残留
以上图为例，`rpng2_info.height` 为 `1`， 首先会分配 `rowbytes` 的空间用来存储所有的 `IDAT` 数据， 然后会分配
**1** 个指针数组 `row_pointers` ， 用来保存指向保存每一行数据的内存区域。其中 `rowbytes` 是通过 `IHDR`
里面的字段计算出来的
    void __cdecl png_handle_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
    {
      png_ptr->pixel_depth = png_ptr->channels * png_ptr->bit_depth;// 4*8
      v4 = png_ptr->width * (png_ptr->pixel_depth >> 3);
      png_ptr->rowbytes = v4;                       // 0xaf0
还是上图为例， 最终计算的结果为 `0xaf0`. 之后程序会每次读取 `0xaf0`数据，然后从 `rpng2_info.row_pointers`
取出一个指针， 然后往指针对应的内存空间里面写数据， 直到读取完所有的 `IDAT` 数据。后面会使用越界的指针进行内存拷贝，导致内存写。
触发越界访问的代码如下：
    static void readpng2_row_callback(png_structp png_ptr, png_bytep new_row,
                                      png_uint_32 row_num, int pass)
    {
        png_progressive_combine_row(png_ptr, mainprog_ptr->row_pointers[row_num],// row_num 会为1， 而 row_pointers的长度为1， 典型溢出
          new_row);
在溢出前，`row_pointers[1]` 后面有残留的内存指针，因为 `row_pointers` 的分配使用的是 `malloc`
，所以会有内存残留。`0x612020` 是一个堆上的指针。
执行完毕后会触发堆溢出把堆上的数据给覆盖了。
**总结** ：分配内存空间时使用的是 `png` 图片中的字段， 然后实际使用的空间是根据数据长度进行计算的，两者的不一致导致了漏洞。
## 修复
在 `readpng2_row_callback` 对 `row_num` 进行判断。
# CVE-2011-2692
## 分析
漏洞代码
    void /* PRIVATE */
    png_handle_sCAL(png_structp png_ptr, png_infop info_ptr, png_uint_32
    length) {
       png_charp ep;
       ...
       png_ptr->chunkdata = (png_charp)png_malloc_warn(png_ptr, length + 1);
       ...
       slength = (png_size_t)length;
       ...
       png_ptr->chunkdata[slength] = 0x00; /* Null terminate the last
       string */
       ep = png_ptr->chunkdata + 1;        /* Skip unit byte */
       ...
       width = png_strtod(png_ptr, ep, &vp);
       ...
       swidth = (png_charp)png_malloc_warn(png_ptr, png_strlen(ep) + 1);
      --
当 `length` 为 `0` 时， `ep` 会出现越界访问。
## 修复
对 length 检查