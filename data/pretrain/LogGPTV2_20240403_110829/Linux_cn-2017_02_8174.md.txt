---
author: Ansh
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 7
  likes: 0
  sharetimes: 0
  viewnum: 11198
date: '2017-02-04 17:56:58'
editorchoice: false
excerpt: GDB - 可以帮你更轻松地调试代码 bug 以及其它问题。在这篇文章中，我们将讨论一下 GDB 调试器的基础知识，包括它提供的一些有用的功能/选项。
fromurl: https://www.howtoforge.com/tutorial/how-to-debug-c-programs-in-linux-using-gdb/
id: 8174
islctt: true
largepic: /data/attachment/album/201702/04/175653ff8gl0f5flw4f518.jpg
permalink: /article-8174-1.html
pic: /data/attachment/album/201702/04/175653ff8gl0f5flw4f518.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: GDB - 可以帮你更轻松地调试代码 bug 以及其它问题。在这篇文章中，我们将讨论一下 GDB 调试器的基础知识，包括它提供的一些有用的功能/选项。
tags:
- gcc
- gdb
thumb: false
title: 在 Linux 中如何使用 gdb 调试 C 程序
titlepic: true
translator: zhb127
updated: '2017-02-04 17:56:58'
---
无论多么有经验的程序员，开发的任何软件都不可能完全没有 bug。因此，排查及修复 bug 成为软件开发周期中最重要的任务之一。有许多办法可以排查 bug（测试、代码自审等等），但是还有一些专用软件（称为调试器）可以帮助准确定位问题的所在，以便进行修复。
如果你是 C/C++ 程序员，或者使用 Fortran 和 Modula-2 编程语言开发软件，那么你将会很乐意知道有这么一款优秀的调试器 - [GDB](https://www.sourceware.org/gdb/) - 可以帮你更轻松地调试代码 bug 以及其它问题。在这篇文章中，我们将讨论一下 GDB 调试器的基础知识，包括它提供的一些有用的功能/选项。
![](/data/attachment/album/201702/04/175653ff8gl0f5flw4f518.jpg)
在我们开始之前，值得一提的是，文章中的所有说明和示例都已经在 Ubuntu 14.04 LTS 中测试过。教程中的示例代码都是 C 语言写的；使用的 shell 为 bash（4.3.11）；GDB 版本为 7.7.1。
### GDB 调试器基础
通俗的讲，GDB 可以让你看到程序在执行过程时的内部流程，并帮你明确问题的所在。我们将在下一节通过一个有效的示例来讨论 GDB 调试器的用法，但在此之前，我们先来探讨一些之后对你有帮助的基本要点。
首先，为了能够顺利使用类似 GDB 这样的调试器，你必须以指定的方式编译程序，让编译器产生调试器所需的调试信息。例如，在使用 gcc 编译器（我们将在本教程之后的章节用它来编译 C 程序示例）编译代码的时候，你需要使用 `-g` 命令行选项。
想要了解 gcc 编译器手册页中关于 `-g` 命令行选项相关的内容，请看[这里](https://linux.die.net/man/1/gcc)。
下一步，确保在你的系统中已经安装 GDB 调试器。如果没有安装，而且你使用的是基于 Debian 的系统（如 Ubuntu），那么你就可以使用以下命令轻松安装该工具：
```
sudo apt-get install gdb
```
在其他发行版上的安装方法，请看[这里](https://www.sourceware.org/gdb/download/)。
现在，当你按照上述的方式编译完程序（gcc `-g` 命令行选项），同时也已经安装好 GDB 调试器，那么你就可以使用以下命令让程序在调试模式中运行：
```
gdb [可执行程序的名称]
```
这样做会初始化 GDB 调试器，但你的可执行程序此时还不会被启动。在这个时候你就可以定义调试相关的设置。例如，你可以在特定行或函数中设置一个断点让 GDB 在该行暂停程序的执行。
接着，为了启动你的程序，你必须输入执行以下 gdb 命令：
```
run
```
在这里，值得一提的是，如果你的程序需要一些命令行参数，那么你可以在这里指定这些参数。例如：
```
run [参数]
```
GDB 提供了很多有用的命令，在调试的时候总是能派的上用场。我们将在下一节讨论其中一部分命令。
### GDB 调试器用例
现在我们对 GDB 及其用法有了基本的概念。因此，让我们举例来应用所学的知识。这是一段示例代码：
```
#include 
int main()
{
    int out = 0, tot = 0, cnt = 0;
    int val[] = {5, 54, 76, 91, 35, 27, 45, 15, 99, 0};
    while(cnt 
作者：[Ansh](https://www.howtoforge.com/tutorial/how-to-debug-c-programs-in-linux-using-gdb/) 译者：[zhb127](https://github.com/zhb127) 校对：[jasminepeng](https://github.com/jasminepeng)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出