outputs ct = (ct1, ct2, . . . , cth) s.t. ctj ← SE.Enc(skij , m)
for j ∈ [h]. For a key-revocation query R ⊆ T ,
the
challenger computes BR ← BF.Upd(H, B, R) and ﬁnds the
index set I = {i(cid:48) ∈ [b] : BR[i(cid:48)] = 1}, then it computes
skI ← MF.Punc(sk, I) and returns skR = (skI , H, BR). In
the challenge phase, A comes up with two distinct messages
m0, m1 ∈ M, and receives a challenge ciphertext ct∗ ←
SRE.Enc(msk, mγ, t∗) for γ $←− {0, 1}. Finally, A outputs
her guess γ(cid:48) ∈ {0, 1} when she halts. We note that for each
key-revocation query R, it must hold that t∗ ∈ R if A is
a legitimate adversary. From the Deﬁnition 7, we know that
AdvIND-sREV-CPA
Game G1: In this game, we modify the way of generating
ciphertexts. Namely, we produce in advance all PRF values
(λ) = | Pr[Win0] − 1/2|.
SRE,A
SE,B(cid:48)
F,B
ski =
9
ski = F (sk, i) for all i ∈ [b], and use them straightforwardly
to compute the challenge ciphertext ct∗ and those for encryp-
tion queries. The other queries are responded in the same way
as before. Obviously, it holds that Pr[Win1] = Pr[Win0].
Game G2: This game is identical
to G1, apart from the
generation of the revoked secret key. Namely, the revoked
secret key skR for each key-revocation query R is generated
in the following way:
Computes BR ← BF.Upd(H, B, R) and ﬁnds out the
index set I = {i(cid:48) ∈ [b] : BR[i(cid:48)] = 1}.
Sets It∗ = {Hj(t∗)}j∈[h], which is a subset of I due
to t∗ ∈ R, and computes skt∗ ← MF.Punc(sk, It∗ ).
Computes skI ← MF.Punc(skt∗ , I \ It∗ ) and returns
skR = (skI , H, BR).
1)
2)
3)
In other words, the punctured secret key skI in this scheme
is computed in the alternative way, as mentioned in Section
II-C, which ensures that the skI in both games are identically
distributed. Thus, we have that Pr[Win2] = Pr[Win1].
Game G3: We further modify the way of producing PRF
values {ski}i∈[b] in G1. Namely, we ﬁrst compute the index
set It∗ = {Hj(t∗)}j∈[h] corresponding to t∗, select ui
$←− Y
for all i ∈ It∗, and then set the PRF values {ski}i∈[b] as:
(cid:26) F (sk, i),
ski =
ui,
i ∈ [b] \ It∗
i ∈ It∗
.
(λ).
In other words, all PRF values associated with t∗ (i.e.,
{ski}i∈It∗ ) are replaced by random ones. In consequence, the
challenge chiphertext ct∗ and the ciphertexts corresponding to
the encryption queries on t∗ will be simulated directly with
these random values. As for key-revocation queries, they are
processed similarly as before.
Under the security of multi-puncturable PRF, we argue that
the above modiﬁcation changes the distribution of A’s view
only negligibly, as stated in Lemma 1.
Lemma 1. Suppose that F : K × X → Y is a secure
then games G3 and G2 are computationally
b-Punc-PRF,
indistinguishable for all PPT adversary, which means that
|Pr[Win3] − Pr[Win2]| ≤ 2Advb-Punc-PRF
F,B
(λ).
Proof of Lemma 1: We assume by contradiction that there
exists an adversary A that can distinguish G3 and G2 with
non-negligible advantage. Then we can construct an efﬁcient
reduction B that can break the security of the multi-puncturable
PRF F . The algorithm B proceeds as follows.
B(1λ) ﬁrst obtains t∗ ∈ T that A wishes to be challenged
upon, and generates (H, B) ← BF.Gen(b, h), where H =
{Hj}j∈[h] and B = 0b. Then it computes It∗ = {i∗
j =
Hj(t∗)}j∈[h] and replays It∗ to the challenger of the multi-
puncturable PRF F . The challenger responds to B by running
sk ← MF.Setup(1λ) and generating (skt∗ ,{y∗
Computes skt∗ ← MF.Punc(sk, It∗ ) and yj,0 =
F (sk, i∗
Chooses yj,1
sets y∗
j ) for all i∗
j = yj,0 if δ = 0 and y∗
$←− Y, δ $←− {0, 1} for all j ∈ [h], and
j = yj,1 otherwise.
j}j∈[h]):
j ∈ It∗.
j : i∗
•
•
B then sets all PRF values {ski}i∈[b] as:
(cid:26) MF.Eval(skt∗ , i),
y∗
j ,
i ∈ [b] \ It∗
i ∈ It∗
j
1)
j ) ski = ski∗
secret key skR in the following way:
where for each i /∈ It∗ we have ski = MF.Eval(skt∗ , i) =
F (sk, i) and for i ∈ It∗ (i.e.,∃j s.t. i = i∗
=
j . After that, B uses them together with skt∗ to simulate all
y∗
following queries.
For an encryption query (m, t), B computes ij = Hj(t)
and ctj ← SE.Enc(skij , M ) for all j ∈ [h], where skij is set
as above. Then it returns ct = (ct1, ct2, . . . , cth) to A.
For a key-revocation query R, B generates the revoked
Computes BR ← BF.Upd(H, B, R) and ﬁnds out the
index set I = {i(cid:48) ∈ [b] : BR[i(cid:48)] = 1}, which includes
It∗ = {Hj(t∗)}j∈[h] due to t∗ ∈ R.
Computes skI ← MF.Punc(skt∗ , I \ It∗ ) and returns
2)
skR = (skI , H, BR).
In the challenge phase, B receives two distinct messages
m0, m1 from A and picks γ $←− {0, 1}. Then it computes
, mγ) for all j ∈ [h], where ski∗
j ← SE.Enc(ski∗
= y∗
ct∗
j ,
h). Eventually, A outputs
1, ct∗
and returns ct∗ = (ct∗
her guess γ(cid:48) ∈ {0, 1}, and B returns δ(cid:48) = 1 if γ(cid:48) = γ.
It can be seen that B perfectly simulates game G2 when
$←− Y),
δ = 0 (i.e., y∗
so we have Pr[δ(cid:48) = 1|δ = 0] = Pr[Win2] and Pr[δ(cid:48) = 1|δ =
1] = Pr[Win3], and the advantage of B is
Advm-Punc-PRF
j )) and G3 when δ = 1 (i.e., y∗
j = F (sk, i∗
2, . . . , ct∗
j
j
j
F,B
(λ) = 1
= 1
2 |Pr[δ(cid:48) = 1|δ = 1] − Pr[δ(cid:48) = 1|δ = 0]|
2 |Pr[Win3] − Pr[Win2]| .
j
2, . . . , ct∗
, 0|m|), where ski∗
This completes the proof of Lemma 1.
Game G4: This differs from G3 only in the generation
1, ct∗
of ct∗. Namely, ct∗ = (ct∗
h) in this game is
computed as the encryption of constant string 0’s, instead of
j for j ∈ [h] is generated as
mγ. More precisely, each ct∗
$←− Y and |m| denotes
j ← SE.Enc(ski∗
ct∗
the bit-length of the message m ∈ M. We observe that the
random bit γ ∈ {0, 1} is independent of this game, so we have
that Pr[Win4] = 1/2.
Next, we proceed to show that the views of A in both G4
and G3 are computationally indistinguishable under the IND-
CPA security of SE, as stated formally in Lemma 2.
Lemma 2. Suppose that SE = (SE.Gen, SE.Enc, SE.Dec)
is an IND-CPA secure symmetric encryption scheme, then G3
and G4 are computationally indistinguishable for all PPT
adversaries A. That is,
j
| Pr[Win4] − Pr[Win3]| ≤ 2h · AdvIND-CPA
SE,B(cid:48)
(λ),
where B(cid:48) is a PPT adversary against the IND-CPA security.
This lemma can be proven by the standard hybrid argu-
ment. For more details, please refer to Appendix A-A.
Given all above lemmas, we get the advantage of any PPT
adversary A attacking our scheme:
AdvIND-sREV-CPA
SRE,A
(λ) = | Pr[Win0] − Pr[Win4]|
≤ 2Advb-Punc-PRF
+ 2h · AdvIND-CPA
F,B
SE,B(cid:48)
(λ)
(λ).
This concludes the proof of Theorem 1.
10
IV. BACKWARD-PRIVATE SSE FROM CSRE
Next we propose a generic construction of forward and
backward private SSE from CSRE, and show it can achieve
Type-II backward privacy within a single roundtrip.
A. Generic Construction
is,
the document
Our construction follows the essential idea of Janus [9]
and Janus++ [52]. That
identiﬁers are
encrypted in a way that the deleted documents cannot be
decrypted, even if their ciphertexts can be retrieved by the
server. To make clear the differences between them, we ﬁrst
give a brief introduction to Janus++. In general, it is based
on two forward-private SSE instances Σadd and Σdel, one for
addition and the other for deletion. More speciﬁcally, each time
a new document identiﬁer/keyword pair (ind, w) is inserted,
the identiﬁer is encrypted with SPE and stored to the server
by employing Σadd. Similarly, whenever a pair (ind, w) is
deleted, an associated punctured key element is generated and
outsourced to the server by leveraging Σdel. To search on
keyword w, the client runs the search protocol of both Σadd and
Σdel. Consequently, the server retrieves all encrypted identiﬁes
containing w and all remaining key elements w.r.t. w from the
instance Σadd and Σdel, respectively. Then the server uses the
secret key to decrypt all documents that are not deleted.
Compared to Janus++, our construction uses only one
forward-private SSE instance Σadd. Particularly, it is employed
to store the newly inserted document
identiﬁers encrypted
with a CSRE scheme, which realizes the addition of our SSE
scheme and leaks no more information than Σadd allows. For
the deletion, it is conducted locally by the client, rather than by
resorting to the server. Thus it is oblivious and leaks nothing
to the server, and the client need not to interact frequently
with the server, at the cost of only a small storage due to the
compressed revocation property of our SRE scheme. Whenever
the client performs search on w, it generates and sends to
the server a revoked secret key for the deleted documents
containing w. Then the server is able to decrypt all non-
deleted documents with this key. Under this framework, our
SSE scheme not only achieves Type-II backward privacy but
also scales for large deletions.
We note that our scheme, same as previous works [9], [52],
also requires the client to refresh the encryption key after each
search, as the server can use the previous revoked secret key
to decrypt the non-deleted document indices inserted in future.
Nevertheless, we do not need to re-encrypt the search result
with the refreshed key, which can be stored in a cache as
processed in [9], [52]. As a result, we can obtain a large storage
saving on server side by physically removing the retrieved
ciphertexts from the server.
Next we brieﬂy describe our scheme,
the details of
which are shown in Algorithm 1. Let Σadd = (Σadd.Setup,
Σadd.Search, Σadd.Update) be a forward private SSE scheme,
and SRE = (SRE.KGen, SRE.Enc, SRE.KRev, SRE.Dec)
a CSRE scheme in which SRE.KRev consists of
two
sub-algorithms SRE.Comp and SRE.cKRev (cf. Com-
pressed Revocation in Section III-C). Then our generic
SSE scheme Σ based on Σadd and SRE is comprised of
(Setup, Search, Update).
Algorithm 1 Type-II Backward-Private DSSE Σ from Compressed SRE
Setup(1λ)
1: (EDBadd, Kadd, σadd)← Σadd.Setup(1λ)
2: Ks, Kt
$←− {0, 1}λ, EDBcache ← ∅, MSK, C, D ←⊥
(σadd, MSK, C, D),
3: return (cid:0)(Kadd, Ks, Kt),
EDBcache)(cid:1)
(EDBadd,
Search(K, w, σ; EDB)
Client:
1: i ← C[w], (sk, D) ← MSK[w], D ← D[w]
2: if i =⊥ then
return ∅
3:
4: end if
5: Compute skR ← SRE.cKRev(sk, D)
(cid:46) D is from D[w]
6: Send (skR, D) and tkn = F (Ks, w) to server