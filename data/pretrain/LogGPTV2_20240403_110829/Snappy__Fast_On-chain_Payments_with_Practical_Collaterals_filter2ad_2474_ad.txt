8 if ∃ i ∈ {1 . . . τ p
9
return ⊥
/* Any pending & preceding txs missing?
i−1} such that i (cid:54)∈ I∗ and i (cid:54)∈ Tp then
(cid:46) Past tx had no approval.
*/
/* Verify signatures of pending preceding txs.
c −(cid:80) Tp)
10 if !Verify(Tp) then
11
*/
return ⊥
/* Process claim.
i (cid:54)∈ I∗ then
c ← C[c].(cid:99)(cid:111)(cid:108)c
(cid:99)(cid:111)(cid:108)∗
cov ← max(0, (cid:99)(cid:111)(cid:108)∗
ρ ← min(cov, τ p
v )
(cid:99)(cid:111)(cid:108)c ← (cid:99)(cid:111)(cid:108)∗
c − ρ
Send(τ p
m, ρ)
r ← τ p
v − ρ
return r
12 if τ p
13
14
15
16
17
18
19
20 else
21
return τv
*/
(cid:46) Pass by reference
(cid:46) Max claimable amount
(cid:46) Statekeeper equivocated
(lines 3-7), it veriﬁes the signatures of preceding ﬁnalized
transactions that have not been veriﬁed already (recall that sig-
natures are not veriﬁed during Record-and-Forward to reduce
payment processing cost). Subsequently, the contract checks
that the list Tp contains all the pending transactions preceding
τ p (lines 8-9) and veriﬁes their signatures (lines 10-11). For
every transaction that is deleted (line 7), the merchant should
have included another transaction with the same index and
valid approval signature in Tp. These two checks ensure that
the merchant did its due diligence and veriﬁed the approval
signatures of preceding pending and non-pending transactions
during ”Customer evaluation” step (Section IV-D).
After that, the contract checks for another valid transaction
with the same index, and if there was it returns τ p
v to its parent
process (line 21). In this case, the losses should be claimed
from the equivocating statekeepers’ collaterals. Otherwise, the
arbiter compensates the merchant from the customer’s collat-
eral (cid:99)(cid:111)(cid:108)c. In case the customer’s collateral does not sufﬁce
to fully recoup τ p
v , then the algorithm returns the remaining
amount (line 19). This amount is then used in further claims
against the statekeepers.
The Snappy system supports arbitrarily many past transac-
tions. However, in practice, an expiration window can be used
to reduce the computational load of verifying the signatures of
preceding transactions. For example, a 24-hour window would
allow sufﬁcient time to accept payments and claim settlements
if needed, and at the same time keep the number of past-
transaction veriﬁcations small. Such time window would also
reduce the storage requirements of the Arbiter smart contract,
as it would only need to store the most recent transactions
Algorithm 4: Claim-Statekeeper. Arbiter sends lost funds from
the misbehaving statekeepers’ collaterals to the affected merchant.
Actor
Input
: Arbiter (smart contract)
: Residual r
Pending Transaction τ p
Conﬂicting transaction tuples Tcnﬂ
Output : None
1 left ← r
2 while left > 0 and Tcnﬂ (cid:54)= ∅ do
(cid:104)τ(cid:48), τ(cid:48)(cid:48)(cid:105) ← Tcnﬂ.pop()
if Verify(τ(cid:48)) and Verify(τ(cid:48)(cid:48)) and
i ≤ τ p
τ(cid:48)
i and τ(cid:48)(cid:48)
sk ← FindOverlap(τ(cid:48), τ(cid:48)(cid:48))
if sk (cid:54)= ∅ then
i ≤ τ p
3
4
5
6
7
8
9
10
11
12
13 ρ ← min(τ p
14 Send(τ p
m, ρ)
(cid:46) Tuple of txs with the same idx
i and τ(cid:48) (cid:54)= τ(cid:48)(cid:48) then
(cid:46) Find who equivocated
(cid:46) Pass by reference
v |
v − τ(cid:48)(cid:48)
δ ← |τ(cid:48)
sk ← S[sk].colsk[τ p
(cid:99)(cid:111)(cid:108)∗
m]
/* Is there enough collateral left?
*/
sk[m] − δ ≥ 0 then
if (cid:99)(cid:111)(cid:108)∗
sk[m] ← (cid:99)(cid:111)(cid:108)∗
(cid:99)(cid:111)(cid:108)∗
left ← left − δ
v − left|)
v , |τ p
sk[m] − δ
from each user in C[c].D, instead of all the past transactions.
Note that valid payments will appear in the blockchain within
a few minutes and thus the operators’ collateral will be quickly
freed to be allocated to other transactions.
Claim-Statekeepers sub-routine is shown in Algorithm 4. It
is executed in cases where the customer’s collateral does not
sufﬁce to fully recoup the value of the transaction τ p
v for which
settlement is requested. In this case, the arbiter attempts to
recover the lost funds from the equivocating statekeepers.
The Arbiter iterates over the tuples of conﬂicting (and
v has been fully recovered or
preceding) transactions until τ p
there are no more tuples to be processed (line 2). For each of
those tuples, the Arbiter does the following: First, it veriﬁes the
approval signatures of the two transactions, checks that the two
transactions precede τ p and that they are not identical (lines 4-
5). Then, it uses FindOverlap() based on bit strings τq of
processed transactions to identify the equivocating statekeepers
(line 6). Finally, it computes the amount that the merchant was
deceived for (|τ(cid:48)
v |) and subtracts it from the collateral of
one of the statekeepers (lines 8-11).
v − τ(cid:48)(cid:48)
We only deduct the missing funds from one of the equivo-
cating statekeepers in each tuple, as our goal is to recoup the
v in full. However, Snappy can be easily modiﬁed to punish
τ p
all the equivocating statekeepers. Recall that each merchant
is responsible for ensuring that the collateral allocated by
each statekeeper for them, sufﬁces to cover the total value
of pending payments approved by that statekeeper (line 10).
F. De-registration
Customers can leave the Snappy system at any point in
time, but in the typical usage de-registrations are rare opera-
tions (comparable to credit card cancellations). The process is
carried out in two steps, ﬁrst by clearing the customer’s pend-
ing transactions and subsequently by returning any remaining
collateral. This two-step process allows enough time for any
pending settlements to be processed before the collateral is
returned to the customer.
9
The customer submits a clearance request that updates the
clearance ﬁeld C[c].cl to the current block number. At this
point, the customer’s account enters a clearance state that lasts
for a predetermined period of time (e.g., 24 hours). During this
time, customer c can no longer initiate purchases, but (cid:99)(cid:111)(cid:108)c can
still be claimed as part of a settlement. Once the clearance is
complete, the customer can withdraw any remaining collateral
by submitting a withdrawal request. The Arbiter checks that
enough time between the two procedures has elapsed and then
returns the remaining (cid:99)(cid:111)(cid:108)c to customer c.
V. SNAPPY ANALYSIS
In this section, we analyze the safety and liveness proper-
ties of Snappy.
A. Safety
(cid:80)Sc + τv ≤ (cid:99)(cid:111)(cid:108)c. Less formally, compatibility means that
First we prove that a merchant who follows the Snappy
protocol to accept a fast payment is guaranteed to receive
the full value of the payment (our Requirement R1) given the
strong adversary deﬁned in Section II-B.
Deﬁnitions. We use BC to denote all the transactions in the
chain, and BC[c] to refer to the subset where c is the sender. We
say that a customer’s state Sc is compatible with a transaction
τ when all τ(cid:48) such that τ(cid:48) /∈ BC and τ(cid:48)
i  (cid:99)(cid:111)(cid:108)(cid:48)
τv to merchant m from (cid:99)(cid:111)(cid:108)(cid:48)
c),
merchant m can still recoup any lost funds, as long as Sc
was compatible with τ and m followed the Snappy payment
approval protocol and veriﬁed before payment acceptance that
the approving statekeepers’ remaining collaterals R[s] sufﬁce
to cover τv and all other pending transactions previously
approved by the same statekeeper.
According to Lemma 1, if τv > (cid:99)(cid:111)(cid:108)(cid:48)
c, then there are more
than one approved transactions from customer c with the same
index value τi. As shown by Proposition 1, for this to happen,
one or more statekeepers need to approve two transactions with
the same index (i.e., equivocate). The arbiter contract can ﬁnd
the equivocating statekeepers by comparing the quorum bit
vectors τq and τ(cid:48)
q from the conﬂicting transaction tuples, and
recoups all lost funds from their collaterals.3
it
In Snappy,
is the responsibility of the merchant
to
verify that each statekeeper who approves a payment has
sufﬁcient collateral remaining. Before payment acceptance, the
merchant veriﬁes that the sum of all approved but pending
payments and the current payment are fully covered by R[s]
which is initially (cid:99)(cid:111)(cid:108)s/k but can be reduced by previous
settlement claims. Since one merchant cannot claim collateral
allocated for another merchant, the merchant is guaranteed to
be able recover the full payment value, even if one or more
statekeepers equivocate to several merchants simultaneously.
Lemmas. We now provide proofs for Lemma 1 and Proposi-
tion 1 used above.
Lemma 1. Let Sc be state of customer c that is compatible
with a transaction τ, if at any point (cid:99)(cid:111)(cid:108)(cid:48)
c  (cid:99)(cid:111)(cid:108)c. By
(cid:88)
(cid:88)Sc + τv  (cid:99)(cid:111)(cid:108)(cid:48)
Π
From this, we derive that Π (cid:54)⊂ Sc. Since, Π is not a subset of
Sc, there is at least one transaction τ(cid:48) ∈ Π such that τ(cid:48) (cid:54)∈ Sc.
Sc is compatible with τ, and thus Sc contains all the pending
transactions up to τi. As a result, a pending τ(cid:48) that is not
included in Sc must have τ(cid:48)
i greater than τi. Note that if
τ(cid:48) is not pending, the Arbiter contract will not process the
settlement claim (line 12 in Algorithm 3). Thus, τi  (cid:99)(cid:111)(cid:108)(cid:48)
(1) If (cid:99)(cid:111)(cid:108)(cid:48)
c  τi) are processed ﬁrst.
From (1) and (2), it follows that τ(cid:48)
i ≤ τi.