# Embedded System Design: From Electronics to Microkernel Development

**Author:** Rodrigo Maximiano Antunes de Almeida  
**E-mail:** [PI:EMAIL]  
**Twitter:** [@rmaalmeida]  
**Affiliation:** Universidade Federal de Itajubá  
**License:** Creative Commons 3.0 – Attribution – Non Commercial – Share Alike

Additional permissions can be requested by contacting the author directly via email: [PI:EMAIL]

## Workshop Schedule
- **Electronic Building**
- **Board Programming**
- **Kernel Development**

### Electronic Building
- **Electronics Review**
- **Schematics**
- **Protoboard/Breadboard**
- **System Design**
- **Basic Steps**
- **Microcontroller**
- **LCD Display**
- **Potentiometer**

#### Electronics Review
- Refer to: [xkcd.com/730](http://xkcd.com/730/)

#### Schematics
- **Definition:** A schematic is a diagram that represents the components and their connections.
- **Symbols:** Each component has its own symbol.
- **Connections:** Crossing wires are only connected if they are joined with a dot.

#### Protoboard/Breadboard
- Description of protoboard/breadboard usage (to be expanded).

#### System Design
- **Generic Steps:**
  - Define the objective(s).
  - Choose the main components needed to achieve the objective.
  - Consult the datasheet for use examples and recommendations.
  - Build the schematics.
  - Simulate the hardware elements.
  - Layout the board.

#### Datasheets
- **Main Source of Information:**
  - Electrical characteristics.
  - Simplified schematics.
  - Use examples.
  - Opcodes/API.

#### System Design Example
- **Objective:** Build a digital voltage reader.
- **Main Components:**
  - Microcontroller
  - LCD text display
  - Potentiometer

#### Microcontroller
- **Overview:**
  - System-on-a-chip.
  - Processor.
  - Memory.
  - Input/Output peripherals.
  - Communication.
  - Safety components.

- **Configuration:**
  - Xtal configuration.
  - Reset pin.
  - DC power requirements.
  - Multiple peripherals on the same pin.

#### LCD Display
- **Features:**
  - Data connection.
  - Backlight.
  - Current consumption.
  - Power-on time/routine.

#### Potentiometer
- **Types:**
  - Linear/Logarithmic.
- **Usage:**
  - Voltage divider.
  - Requires an analog input.
  - Filtering.

### Board Programming
- **Programmer:** PICkit3
  - Supports ICSP (In-Circuit Serial Programming).
  - Can program a variety of Microchip products.
  - Also functions as a debugger.

- **IDE:** MPLABX
  - Based on Netbeans.
  - **Compiler:** SDCC (based on GCC).
  - **Utility:** GPUtils.

- **Basic Concepts:**
  - PIC architecture.
  - Memory segmentation.
  - Hardware configuration.
    - Some options must be set before the program starts.
    - This is accomplished using special instructions.
    - Example:
      ```c
      // CONFIG.H
      __code char __at 0x300000 CONFIG1L = 0x01;  // No prescaler used
      __code char __at 0x300001 CONFIG1H = 0x0C;  // HS: High Speed Crystal
      __code char __at 0x300003 CONFIG2H = 0x00;  // Disabled-Controlled by SWDTEN bit
      __code char __at 0x300006 CONFIG4L = 0x00;  // Disabled low voltage programming
      ```

- **Memory Addressing:**
  - Example:
    ```c
    void main(void) {
        char *ptr;
        ptr = 0xF83;  // Pointing to Port D
        *ptr = 0xFF;  // Changing all outputs to high
    }
    while(PORTD == PORTD);  // Not an infinite loop!
    ```

- **Header File Definitions:**
  - Example:
    ```c
    #define PORTD (*(volatile __near unsigned char*)0xF83)
    #define TRISC (*(volatile __near unsigned char*)0xF94)
    ```

### First Program
- **Objective:** Initialize the LCD and print "He110 DEFC0N".
- **Steps:**
  - Open MPLABX IDE.
  - Configure SDCC and PICkit.
  - Create a project to initialize the LCD and print the message.

#### LCD Communication
- **Data Format:**
  - 8-bit information.
  - Can be split into two 4-bit passes.
  - RS pin distinguishes between data and commands.
  - Data must be stable for a certain period.
  - EN pin must be set during this period.

- **Example Code:**
  ```c
  void LCD_comm(unsigned char data, char cmd) {
      if (cmd)
          BitClr(PORTE, RS);
      else
          BitSet(PORTE, RS);
      BitClr(PORTE, RW);  // Writing
      PORTD = cmd;
      BitSet(PORTE, EN);  // Enable read
      Delay40ms();
      BitClr(PORTE, EN);  // Finish read
  }

  void LCD_init(void) {
      char i;
      for (i = 0; i < 3; i++) {
          LCD_comm(0x38, 1);  // 8-bit, 2 lines, 5x7 font
          LCD_comm(0x0C, 1);  // Display on, cursor off, blink off
          LCD_comm(0x06, 1);  // Increment cursor, no shift
          LCD_comm(0x01, 1);  // Clear display
          Delay40ms();
      }
  }
  ```

### Circular Buffers
- **Description:**
  - "Endless" memory spaces.
  - Uses FIFO (First-In-First-Out) approach.
  - Stores temporary data.
  - Can be implemented using vectors or linked lists.

- **Vector Implementation:**
  - Uses less space.
  - Requires caution when cycling.
  - Problem differentiating full from empty.

- **Example:**
  ```c
  #define CB_SIZE 10
  int circular_buffer[CB_SIZE];
  int start = 0, end = 0;

  char AddBuff(int newData) {
      if (((end + 1) % CB_SIZE) != start) {
          circular_buffer[end] = newData;
          end = (end + 1) % CB_SIZE;
          return SUCCESS;
      }
      return FAIL;
  }
  ```

### Temporal Conditions
- **Overview:**
  - Ensures functions execute at specific frequencies.
  - Failure to meet deadlines can cause system failure.

- **Implementation:**
  1. **Tick Event:** Occurs with precise frequency.
  2. **Kernel Notification:** Inform the kernel of the required execution frequency.
  3. **Process Duration:** Sum of process durations must fit within available processor time.

- **Conditions:**
  - **Internal Timer:** Generates interrupts.
  - **Process Information:** Added when creating processes.
  - **Testing:** Test, test, and test. Change chip if necessary, optimize as a last resort.

- **Scheduling:**
  - Using a finite timer can result in overflow.
  - Example: Scheduling two processes for 10 and 50 seconds ahead.

- **Simultaneous Processes:**
  - Use a downtime counter for each process instead of setting a trigger time.
  - Decrement each counter in the interrupt subroutine.
  - Consider system impact.

### Void Pointers
- **Description:**
  - Abstraction allowing different types to be passed to the same function.
  - Function must know how to handle the parameter.
  - Must be cast properly.

- **Example:**
  ```c
  char *name = "Paulo";
  double weight = 87.5;
  unsigned int children = 3;

  void main(void) {
      print(0, &name);
      print(1, &weight);
      print(2, &children);
  }

  void print(int option, void *parameter) {
      switch (option) {
          case 0:
              printf("%s", (char *)parameter);
              break;
          case 1:
              printf("%f", *((double *)parameter));
              break;
          case 2:
              printf("%d", *((unsigned int *)parameter));
              break;
      }
  }
  ```

This revised version aims to provide a clear, coherent, and professional presentation of the content.