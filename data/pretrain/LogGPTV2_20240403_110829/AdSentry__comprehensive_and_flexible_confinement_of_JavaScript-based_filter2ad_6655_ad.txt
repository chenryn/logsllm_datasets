vertisements and has not yet explored the support of other types of
advertisements. In particular, Flash technology is another popular
way to write and display ads, which still remains to be investigated
how ﬂash-based ads can be supported.
Second, AdSentry protects the browsers from attacks exploiting
vulnerabilities of the JavaScript engine, but it is not designed to
prevent attacks to other browser components, such as the HTML
rendering engine. If the malicious HTML segment is dynamically
generated by JavaScript code, AdSentry’s policy engine can mit-
igate the attack by the HTML normalization and signature-based
attack blocking. A more general solution is to extend our solution
to isolate other components of the browser.
Finally, we will continue to work on improving AdSentry’s com-
patibility with JavaScript on a web page. Our prototype implemen-
tation is able to handle typical JavaScript advertisements, which has
limited ways in accessing other parts of the web page. However,
third-party JavaScript code in general has much tighter integration
with the rest of the web page. As our future work, we will improve
the support for transparently isolating a wider class of JavaScript
code in web applications. It will also be interesting to investigate
possible ways (e.g., in software testing) that automatically test Ad-
Sentry’s compatibility with a broader set of web applications.
7. RELATED WORK
In this section, we discuss existing work that mitigates threats
from untrusted web content embedded into web applications, in-
cluding those compromising user data, web application integrity as
well as users’ operating systems.
Drive-by download prevention.
Drive-by downloads are serious threats to web and host secu-
rity [37,38]. BLADE [25] proposes a detection system for drive-by
download exploits. This type of attacks has recently received lots
of attention. For example, heap-spraying attacks can pre-populate
a large heap space with attack code and a software bug can be
exploited to redirect execution ﬂow to the heap sprays (with at-
tack code).
In addition, several systems [11, 12, 39] have been
proposed to leverage speciﬁc memory characteristics of these at-
tacks to identify them and prevent browsers from being exploited.
WebShield [21] proposes a middlebox framework that processes
page contents in a shadow browser, and transforms DOM updates
to the client browser to reﬂect DOM changes there. As a result,
drive-by downloads can be detected at the middlebox without af-
fecting the client browser. Other existing sandbox and isolation
solutions [14, 22] can also be used to protect the operating system
against drive-by download attacks. Compared to AdSentry, solu-
tions in this category are not designed to protect user privacy and
web application integrity from malicious JavaScript ads.
Isolation in web browsers.
Several recent research projects [9,16,46] attempt to achieve bet-
ter browser security architecture by running different browser com-
ponents in isolated environments. The Google Chrome browser
Performance Test
with AdSentry (ms) without AdSentry (ms) Overhead (%)
Google Adsense Rendering
DoubleClick Ad Rendering
MSN Ad Rendering
Yahoo Ad Rendering
381
601
1224
1539
363
578
1188
1475
4.96
3.98
3.03
4.34
Table 4: Runtime page load overhead of AdSentry
also uses a sandbox to isolate browser components and protect the
operating system [8, 29]. The IBOS [42] system steps further by
designing a secure architecture for both the operating system and
the web browser altogether, minimizing default sharing and trust
between software components. However, they do not support iso-
lating JavaScript ads from the rest of web applications, while Ad-
Sentry executes untrusted ads scripts in a separate and sandboxed
environment from trusted scripts, mediating every access from ads
to web applications.
Web application integrity protection.
To prevent tightly-integrated third-party JavaScript from affect-
ing the integrity of web application, one type of solutions [2,10,13,
17,26,27] restricts the “dangerous” functionality of JavaScript. For
example, ADsafe [10] only allows ads to use a safe subset of the
JavaScript functionality. It removes dangerous JavaScript features,
such as global variables, eval, this, and with. ADsafety [36]
proposes a lightweight and efﬁcient veriﬁcation for JavaScript sand-
boxes, and has been successfully applied to ADsafe. Another line
of solutions [4,19,35,40,49] protects web application against JavaScript
ads through code transformation, enforcing policies against mali-
cious JavaScript at runtime. Similarly, ConScript [30] introduces
aspect into JavaScript language to enforce users’ security rules.
MashupOS [45] proposes new script integration primitives reﬂect-
ing different trust relationships between the integrator and the mashup
content provider. Besides enabling web publishers to protect their
web applications, AdSentry also allows end users to ﬂexibly spec-
ify access control policies according to their own requirements.
AdJail [23] addresses the privacy and web application integrity
threat from ads by isolating them into an iframe-based sandbox.
Using a separate origin in the sandbox, AdJail leverages browser’s
native origin-based protection to isolate ads.
It is a solution for
publishers to isolated third-party ads. Compared to AdSentry, Ad-
Jail assumes the ads on a web page are relatively independent and
do not have tight dependencies with the page environment. For ex-
ample, ad scripts cannot access global JavaScript objects deﬁned or
overwritten by other trusted scripts in the same hosting page. Ad-
Sentry transparently supports tight dependency between ads and
the host page, without signiﬁcant modiﬁcation of the web page. It
also provides ﬂexible control of behaviors of JavaScript ads.
In addition, solutions in this category cannot prevent malicious
ads from exploiting browser vulnerabilities.
Privacy protection.
One of users’ major concern about JavaScript ads is privacy. Pri-
vad [18] proposes a solution to protect users’ privacy by making
users anonymous to the advertisers and publishers, but it does not
prevent users’ data from being used by the ad script, which may
implicitly leak our user data. Adnostic [43] uses a browser exten-
sion to perform ad targeting, selecting ads to display from a larger
set of ads sent by the advertisement network. Compared to AdSen-
try, both solutions only focus on protecting users’ privacy, and do
not address the ad’s threat to integrity of web applications and the
underlying operating system.
8. CONCLUSION
JavaScript-based advertisements are ubiquitous on the Internet.
They pose threats to the privacy and integrity of web applications,
as well as security of operating systems. In this paper, we present
the design, implementation, and evaluation of AdSentry, a com-
prehensive and ﬂexible framework to conﬁne untrusted JavaScript
advertisements. AdSentry not only separates the untrusted ad ex-
ecution in a shadow JavaScript engine, but also mediates their ac-
cess to the main page with access control policies, which can be
speciﬁed by both web publishers and end users. We have imple-
mented a Linux-based prototype of AdSentry that supports current
Firefox browsers. Our experiments with a number of ad-related
exploits show that AdSentry is effective in blocking these attacks.
Our performance evaluation shows that the comprehensive protec-
tion is achieved with a small performance overhead.
Acknowledgments
We thank Michael Wright for his help in investigation and imple-
mentation. We also thank the anonymous reviewers for their in-
sightful comments that helped improve the presentation of this pa-
per. This work is supported in part by an NUS Young Investigator
Award R-252-000-378-101, the US Army Research Ofﬁce (ARO)
under grant W911NF-08-1-0105 managed by NCSU Secure Open
Systems Initiative (SOSI), and the US National Science Foundation
(NSF) under Grants 0855297, 0855036, 0910767, and 0952640.
Any opinions, ﬁndings, and conclusions or recommendations ex-
pressed in this material are those of the authors and do not neces-
sarily reﬂect the views of the ARO and the NSF.
9. REFERENCES
[1] Common vulnerabilities and exposures.
http://cve.mitre.org/.
[2] FBJS (Facebook JavaScript).
http://developers.facebook.com/docs/fbjs/.
[3] Firebug. Web Development Evolved.
http://getfirebug.com/.
[4] Google Caja.
http://code.google.com/p/google-caja/.
[5] Quirk Mode.
http://en.wikipedia.org/wiki/Quirk_mode.
[6] Tag Soup. http://en.wikipedia.org/wiki/Tag_soup.
[7] XSS (Cross Site Scripting) Cheat Sheet.
http://ha.ckers.org/xss.html.
[8] A. Barth, C. Jackson, C. Reis, and The Google Chrome Team. The
security architecture of the chromium browser.
http://seclab.stanford.edu/websec/chromium/.
[9] R. S. Cox, S. D. Gribble, H. M. Levy, and J. G. Hansen. A
safety-oriented platform for web applications. In IEEE Symposium
on Security and Privacy, 2006.
[10] D. Crockford. ADsafe. http://www.adsafe.org/.
[11] Y. Ding, T. Wei, T. Wang, Z. Liang, and W. Zou. Heap Taichi:
Exploiting Memory Allocation Granularity In Heap-Spraying
Attacks. In Proceedings of the 26th Annual Computer Security
Applications Conference (ACSAC), 2010.
[12] M. Egele, P. Wurzinger, C. Kruegel, and E. Kirda. Defending browser
against drive-by downloads: Mitigating heap-srpaying code injection
attacks. In Proceedings of the 6th Conference on Detection of
Intrusions and Malware & Vulnerability Assessment (DIMVA), 2009.
[13] M. Finifter, J. Weinberger, and A. Barth. Preventing capability leaks
in secure javascript subsets. In Proc. of Network and Distributed
System Security Symposium, 2010.
[14] Goldberg, Wagner, Thomas, and Brewer. A Secure Environment for
Untrusted Helper Applications: Conﬁning the Wily Hacker. In
Proceedings of the 5th USENIX Security Symposium, 1996.
[15] Google Inc. Google Fiscal Year 2010 Results, 2010.
http://investor.google.com/earnings/2010/Q4_
google_earnings.html.
[16] C. Grier, S. Tang, and S. King. Secure web browsing with the op web
browser. In IEEE Symposium on Security and Privacy, 2008.
[17] S. Guarnieri and B. Livshits. Gatekeeper: mostly static enforcement
of security and reliability policies for javascript code. In Proceedings
of the 18th conference on USENIX security symposium, SSYM’09,
pages 151–168, Berkeley, CA, USA, 2009. USENIX Association.
[18] S. Guha, B. Cheng, A. Reznichenko, H. Haddadi, and P. Francis.
Privad: Rearchitecting Online Advertising for Privacy. Technical
Report MPI-SWS-2009-004, Max Planck Institute for Software
Systems, Germany, 2009.
[19] S. Isaacs and D. Manolescu. WebSandbox - Microsoft Live Labs.
http://websandbox.livelabs.com/, 2009.
[20] D. Jang, R. Jhala, S. Lerner, and H. Shacham. An Empirical Study of
Privacy-Violating Information Flows in JavaScript Web Applications.
In Proceedings of the 17th ACM Conference on Computer and
Communications Security (CCS), 2010.
[21] Z. Li, T. Yi, Y. Cao, V. Rastogi, Y. Chen, B. Liu, and C. Sbisa.
WebShield: Enabling various web defense techniques without client
side modiﬁcations. In Proceedings of the 18th Annual Network and
Distributed System Security Symposium (NDSS), San Diego, CA,
USA, 2011.
[22] Z. Liang, V. Venkatakrishnan, and R. Sekar. Isolated Program
Execution: An Application Transparent Approach for Executing
Untrusted Programs. In Proceedings of the 19th Annual Computer
Security Applications Conference (ACSAC), 2003.
[23] M. T. Louw, K. T. Ganesh, and V. Venkatakrishnan. AdJail: Practical
Enforcement of Conﬁdentiality and Integrity Policies on Web
Advertisements. In Proceedings of the 19th USENIX Security
Symposium, 2010.
[24] M. T. Louw and V. Venkatakrishnan. Blueprint: Robust Prevention of
Cross-site Scripting Attacks for Existing Browsers. In Proceedings of
the 30th IEEE Symposium on Security and Privacy, 2009.
[25] L. Lu, V. Yegneswaran, P. Porras, and W. Lee. BLADE: An
Attack-Agnostic Approach for Preventing Drive-By Malware
Infections. In Proceedings of the 17th ACM Conference on Computer
and Communications Security, 2010.
[26] S. Maffeis, J. Mitchell, and A. Taly. Run-time enforcement of secure
javascript subsets. In Proc of W2SP’09. IEEE, 2009.
[27] S. Maffeis and A. Taly. Language-based isolation of untrusted
javascript. In Proceedings of the 2009 22nd IEEE Computer Security
Foundations Symposium, pages 77–91, Washington, DC, USA, 2009.
IEEE Computer Society.
[28] Matthew. Facebook’s response to uproar over ads.
http://endofweb.co.uk/2009/07/facebook_ads_2/.
[29] S. McCloud. The Chrome Comic Book, 2008. http://www.
google.com/googlebooks/chrome/index.html.
[30] L. A. Meyerovich and B. Livshits. ConScript: Specifying and
Enforcing Fine-Grained Security Policies for JavaScript in the
Browser. In Proceedings of the 31st IEEE Symposium on Security
and Privacy, 2010.
[31] Mozilla. Bugzilla@mozilla.
https://bugzilla.mozilla.org/.
[32] Mozilla. Components.utils.evalInSandbox.
[35] P. H. Phung, D. Sands, and A. Chudnov. Lightweight Self-protecting
JavaScript. In Proceedings of the 4th International Symposium on
Information, Computer, and Communications Security, ASIACCS
’09, 2009.
[36] J. G. Politz, S. A. Eliopoulos, A. Guha, and S. Krishnamurthi.
ADsafety type-based veriﬁcation of javascript sandboxing. In
Proceedings of the 20th USENIX Security Symposium, San
Francisco, CA, USA, 2011.
[37] N. Provos, P. Mavrommatis, M. A. Rajab, and F. Monrose. All your
iframes point to us. In Proceedings of the 17th USENIX Security
Symposium, pages 1–15, 2008.
[38] N. Provos, D. McNamee, P. Mavrommatis, K. Wang, and
N. Modadugu. The ghost in the browser analysis of web-based
malware. In Proceedings of the ﬁrst conference on First Workshop on
Hot Topics in Understanding Botnets, pages 4–4, Berkeley, CA,
USA, 2007. USENIX Association.
[39] P. Ratanaworabhan, B. Livshits, and B. Zorn. NOZZLE: A Defense
Against Heap-spraying Code Injection Attacks. In Proceedings of the
18th USENIX Security Symposium, 2009.
[40] C. Reis, J. Dunagan, H. J. Wang, O. Dubrovsky, and S. Esmeir.
BrowserShield: Vulnerability-Driven Filtering of Dynamic HTML.
In Proceedings of the 7th Symposium on Operating Systems Design
and Implementation (OSDI), 2006.
[41] D. Sehr, R. Muth, C. Bifﬂe, V. Khimenko, E. Pasko, K. Schimpf,
B. Yee, and B. Chen. Adapting Software Fault Isolation to
Contemporary CPU Architectures. In Proceedings of the 19th
USENIX Security Symposium, 2010.
[42] S. Tang, H. Mai, and S. T. King. Trust and protection in the illinois
browser operating system. In Proceedings of the 9th USENIX
conference on Operating systems design and implementation,
OSDI’10, pages 1–8, Berkeley, CA, USA, 2010. USENIX
Association.
[43] V. Toubiana, A. Narayanan, and D. Boneh. Adnostic: Privacy
Preserving Targeted Advertising. In Proceedings of the 17th Annual
Network and Distributed System Security Symposium (NDSS), 2010.
[44] W3C. Document Object Model (DOM) Speciﬁcations.
http://www.w3.org/DOM/DOMTR.
[45] H. J. Wang, X. Fan, J. Howell, and C. Jackson. Protection and
communication abstractions for web browsers in mashupos. In
Proceedings of twenty-ﬁrst ACM SIGOPS symposium on Operating
systems principles, SOSP ’07, pages 1–16, New York, NY, USA,
2007. ACM.
[46] H. J. Wang, C. Grier, A. Moshchuk, S. T. King, P. Choudhury, and
H. Venter. The multi-principal os construction of the gazelle web
browser. In Proceedings of the 18th conference on USENIX security
symposium, SSYM’09, pages 417–432, Berkeley, CA, USA, 2009.
USENIX Association.
[47] Wikipedia. Online advertising - Revenue models.
http://en.wikipedia.org/wiki/Online_
advertising#Revenue_models.
[48] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy,
S. Okasaka, N. Narula, and N. Fullagar. Native Client: A Sandbox
for Portable, Untrusted x86 Native Code. In Proceedings of the 30th
IEEE Symposium on Security and Privacy, 2009.
[49] D. Yu, A. Chander, N. Islam, and I. Serikov. JavaScript
Instrumentation for Browser Security. In Proceedings of the 34th
annual ACM SIGPLAN-SIGACT symposium on Principles of
programming languages (POPL), 2007.
https://developer.mozilla.org/en/Components.
utils.evalInSandbox.
[33] R. Naraine. Research: 1.3 Million Malicious Ads Viewed Daily.
http://threatpost.com/en_us/blogs/
research-13-million-malicious-ads-viewed-daily-051910.
[34] W. Palant. Adblock Plus. https://addons.mozilla.org/
en-US/firefox/addon/adblock-plus/.