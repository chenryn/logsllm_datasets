title:TEE-Perf: A Profiler for Trusted Execution Environments
author:Maurice Bailleu and
Donald Dragoti and
Pramod Bhatotia and
Christof Fetzer
2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
TEE-Perf: A Proﬁler for Trusted Execution Environments
†
Maurice Bailleu
‡
, Donald Dragoti
†
, Pramod Bhatotia
‡
, Christof Fetzer
‡
TU Dresden
†
The University of Edinburgh
Abstract—We introduce TEE-PERF, an architecture- and
platform-independent performance measurement tool for trusted
execution environments (TEEs). More speciﬁcally, TEE-PERF
supports method-level proﬁling for unmodiﬁed multithreaded
applications, without relying on any architecture-speciﬁc hard-
ware features (e.g. Intel VTune Ampliﬁer), or without requiring
platform-dependent kernel features (e.g. Linux perf). Moreover,
TEE-PERF provides accurate proﬁling measurements since it
traces the entire process execution without employing instruction
pointer sampling. Thus, TEE-PERF does not suffer from sam-
pling frequency bias, which can occur with threads scheduled to
align to the sampling frequency.
We have implemented TEE-PERF with an easy to use in-
terface, and integrated it with Flame Graphs to visualize the
performance bottlenecks. We have evaluated TEE-PERF based
on the Phoenix multithreaded benchmark suite and real-world
applications (RocksDB, SPDK, etc.), and compared it with Linux
perf. Our experimental evaluation shows that TEE-PERF incurs
low proﬁling overheads, while providing accurate proﬁle mea-
surements to identify and optimize the application bottlenecks in
the context of TEEs. TEE-PERF is publicly available.
I. INTRODUCTION
Hardware-assisted trusted execution environments (TEEs),
such as ARM TrustZone [9], Intel SGX [13], AMD SEV [8]
and RISC-V Keystone [26], provide an appealing way to build
secure applications for the untrusted computing environment.
In particular, TEEs are increasingly being used in the context
of shielded execution to build a wide-range of secure appli-
cations [10, 12, 20, 24, 28, 33]. Shielded execution aims to
provide strong conﬁdentiality and integrity properties using a
hardware-protected secure memory region.
Unfortunately, application performance proﬁling,
However, developing applications for TEEs is quite chal-
lenging. While building a secure application, the application
programmer not only has to preserve the conﬁdentiality and
integrity guarantees provided by the TEE, but (s)he also needs
to ensure that the application achieves high performance.
i.e.,
to
understand the performance bottlenecks inside the TEEs is
quite difﬁcult [16]. This is due to the fact that the application
performance signiﬁcantly varies inside the TEE due to the
micro-architectural implementation details of the secure hard-
ware. For instance, the cost of random memory accesses in
TEEs signiﬁcantly increases due to the memory encryption
engine, which usually operates at the granularity of cache
lines. Likewise, the cost of accessing memory beyond the se-
cure physical memory region (allocated in the main memory)
incurs very high performance overheads due to secure paging;
for example, the Intel SGX architecture supports EPC paging,
a mechanism to securely swap enclave pages to unprotected
host memory that can slow down application performance up
to 2000× [10]. In addition, the application suffers signiﬁcant
performance cost when performing a context switch from
the normal world to the secure world of the TEE since the
hardware needs to ensure that the context switch does not leak
any information stored in the TEE, e.g. ﬂushing or restoring
the translation lookaside buffer (TLB). Further, direct I/O
is forbidden inside TEEs, and therefore, the I/O operations
have to pass through some wrappers resulting in different
performance characteristics as a developer might expect.
To summarize, the micro-architectural implementation of
TEEs provides signiﬁcant challenges for proﬁling applications
while designing high performance applications. Further, many
applications need to be proﬁled across different TEE platforms
since they are designed to operate across multiple platforms
and architectures. However, there is very little support for
performance debugging for TEE, as the conventional proﬁling
tools are either tightly coupled to speciﬁc architectures or
operating systems. For instance, Intel VTune Ampliﬁer pro-
ﬁler [5] is a proprietary proﬁler that is speciﬁcally designed
for the Intel architecture. perf [6] relies on the Linux kernel
infrastructure for the application proﬁling. SGX-perf [34] tar-
gets Intel SGX architecture speciﬁcally, and does not provide
method-level application proﬁling information.
To overcome the limitations of the existing proﬁlers, we
propose TEE-PERF, a performance proﬁling tool for TEEs.
More speciﬁcally, TEE-PERF targets three design points:
• Generality: TEE-PERF provides an architecture- and
platform-independent proﬁling infrastructure.
• Transparency: TEE-PERF supports unmodiﬁed multi-
threaded applications with an easy-to-use interface.
• Accuracy: TEE-PERF provides accurate method-level
proﬁling, without resorting to the instruction sampling.
At a high-level, TEE-PERF is based on four straightforward
stages (see Figure 1). Firstly, the application is recompiled
using our compiler pass, which is used to transparently in-
ject proﬁling code in the application at the call and return
instructions. In the second stage, the recorder collects the
performance characteristics while the application is running
inside the TEE. The recorder relies on a (hardware- and
platform-independent) software counter to capture the appli-
cation performance proﬁle. Next, the analyzer dissects the
recorded log to accurately report the method-level performance
characteristics. Lastly, we integrated TEE-PERF with Flame
Graphs [1] to visualize the bottlenecks.
We have implemented the TEE-PERF tool with an easy-
to-use interface for the application programmers. In addition,
TEE-PERF provides several additional design features: sup-
port for multi-threaded applications, call stack proﬁling, a rich
978-1-7281-0057-9/19/$31.00 ©2019 IEEE
DOI 10.1109/DSN.2019.00050
414
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:15:59 UTC from IEEE Xplore.  Restrictions apply. 
Compiler
(stage #1)
Recorder
(stage #2)
Analyzer
(stage #3)
Visualizer
(stage #4)
Transforms the 
application to inject 
profiling code 
Run-time component
to trace the program 
Offline stage to 
analyze the logs via a 
Visualizes the perfor-
mance bottlenecks 
execution
query interface
based on Flame Graph 
Figure 1: TEE-PERF overview
declarative query interface, and selective code proﬁling.
We have experimentally evaluated TEE-PERF based on
the Phoenix multithreaded benchmark suite and real-world
applications. Our experimental evaluation shows that TEE-
PERF incurs low proﬁling overheads, while providing accurate
proﬁle measurements compared with Linux perf. Further-
more, we showcase that TEE-PERF is able to identify and
optimize the application bottlenecks in the context of TEEs.
In particular, we have successfully used the tool to increase the
performance to near native performance of Intel’s SPDK [18]
running inside a SGX enclave.
parallel, which runs natively outside the TEE. The recorder
also establishes the shared memory communication medium
between the two processes, and it maps a fast reasonable
accurate software counter into the TEE.
After the measurement phase,
the analyzer dissects the
performance measurement log ﬁle collected in the recording
phase, and it maps the binary, using the debug symbols,
to correlate the jump addresses with functions. Thereby, it
associates the performance measurement proﬁle at the granu-
larity of functions. Lastly, TEE-PERF is integrated with Flame
Graphs [1] to visualize the performance bottlenecks.
II. DESIGN
B. Design Details
A. Overview
In this section, we present the design of TEE-PERF.
Design goals and assumptions. The primary goal of TEE-
PERF is to build a performance measurement tool, which is
independent of the underlying operating systems and architec-
tures. Therefore, the tool should also be able to make these
measurements independent of the TEE implementation; i.e.,
different instruction sets (x86 or RISC) or versions (SGX
v1 or SGX v2). Since it is platform independent, we do not
require any performance counters or timer being available to
make introspection into the TEE. Further, we aim to support
unmodiﬁed multi-threaded applications with an easy-to-use
interface. TEE-PERF provides accurate time measurements
statistics at function level, which enables applications pro-
grammer to identify performance bottlenecks in the context of
TEEs. However, we assume that the application running inside
TEE is able to access the shared memory with a proﬁling
application (or the recorder) running natively on the host.
Additionally, the operating system must support multitasking,
i.e., it is able to run a process in the TEE and a process
natively outside in parallel. These assumptions hold for most
commercially available TEEs and operating systems. We also
think that these assumptions will also be valid for future TEEs,
which might have additional security features. Lastly, we note
that TEE-PERF is designed to be used in the development and
debugging phases. Therefore, we can accept the performance
overhead of an architecture independent software counter.
Design overview. Figure 1 shows the high-level architecture
of TEE-PERF. The tool consists of four main phases: (a)
compiler, (b) recorder, (c) analyzer, and (d) visualizer. The
compiler pass transforms the application to inject the proﬁling
code in the executable. The recorder sets up the application
in the TEE, while simultaneously initiating a process in
We next detail the four stages of TEE-PERF.
Stage #1: Compiler. In the compiler phase, we recompile the
input application to inject proﬁling code, which collects the