Trust for Measurement, or TRTM. The TRTM is realized via
the inclusion of a TrustVisor-managed, software micro TPM
(µTPM) instance associated with each PAL (§4.3). The µTPM
executes on the platform’s primary CPU for high performance
while avoiding the TCB growth required of a full software
TPM implementation (e.g., vTPM [4]). The TRTM is instan-
tiated as part of the PAL registration process, and is designed
to serve as a “second-layer” dynamic root of trust, where the
PAL code is isolated and measured before it is executed. The
combination of the isolated environment, TRTM, and µTPM
offer PALs facilities for ﬁne-grained remote attestation and
long-term protection of sensitive state with a small TCB.
App
B
App
A PAL
Untrusted
Legacy OS
TrustVisor
API: µTPM
Device
Drivers
Loc. 1
TPM
Driver
A’s µTPM TrustVisor
Locality 2
Devices
TPM
Hardware
Figure 2: System architecture with TrustVisor. Applications
can register PALs for execution in isolation from the un-
trusted legacy OS and applications. The OS remains responsi-
ble for controlling the platform’s devices. The only interface
exposed to a PAL by TrustVisor is that of a µTPM. The sys-
tem’s physical TPM is shared by TrustVisor and the OS using
the TPM’s locality mechanism.
PAL (a)
PAL (b)
PAL (c)
µTPM (a)
µTPM (b)
µTPM (c)
TrustVisor
Legend:
X     Y: X Trusts Y
Other PALs
TCB for PAL (b)
TPM + DRTM
Figure 3: Trust relationships in the TrustVisor architecture.
To distinguish between legacy code and PALs, we devise a
registration mechanism by which untrusted applications can
register selected code and data as security-sensitive. Regis-
tration triggers the sequence of TRTM operations, including
allocation of a µTPM instance and protection of the PAL’s
memory pages. Once registered, a PAL can be invoked mul-
tiple times without requiring a new TRTM operation. The
µTPM instance provides PALs with a facility for long-term
secret protection, and enables remote attestation that a partic-
ular PAL has executed.
TrustVisor enables remote attestation and long-term pro-
tected storage for PALs via the TRTM and µTPM associ-
ated with each PAL. TrustVisor is itself instantiated using the
hardware dynamic root of trust mechanism, thereby reducing
the TCB for TrustVisor and PALs executing thereupon, and
rooting trust in TrustVisor in the platform’s physical TPM.
Figure 3 shows the relationship of trusted components when
multiple PALs are registered. The shaded areas indicate the
trusted components in the TCB for a particular PAL.
4.2 Memory Protection Mechanisms
TrustVisor enforces code and execution integrity, and data se-
crecy and integrity. We ﬁrst describe how TrustVisor protects
itself, and then show how TrustVisor provides these proper-
ties for PALs.
4.2.1 Hardware Memory Protections
TrustVisor must protect its own memory regions while also
isolating PALs from each other, from the legacy OS and its
applications, and from DMA-capable devices. We further
wish to support unmodiﬁed legacy OSes and legacy appli-
cations. Though it is our intention for PALs to be more trust-
worthy than the legacy OS, PALs are still programs written
by humans, and may be susceptible to compromise; e.g., spe-
cially crafted input may stimulate a latent bug in the PAL.
Thus, it is prudent to prevent PALs from arbitrarily accessing
other memory, as they may compromise the secrecy of data
belonging to other applications, e.g., security-sensitive legacy
applications or other PALs.
TrustVisor uses secure x86 hardware virtualization support
to securely bootstrap itself, as well as to enforce isolation be-
tween TrustVisor itself, the legacy OS, and PALs. Efﬁcient
memory isolation and low hypervisor complexity are more
readily achieved given the increasingly wide availability of
2D hardware page walkers [5] that natively support separate
paging structures for virtual-to-physical address translation
in guest mode, and physical-to-machine address translation
in host mode (Figure 1). The memory regions accessible by
DMA-capable devices can also be restricted by the hypervi-
sor using modern platforms’ IOMMUs (Input/Output Mem-
ory Management Unit).
TrustVisor conﬁgures its page tables such that guest phys-
ical memory simply excludes the machine pages that con-
tain state that must remain inaccessible. Likewise, TrustVi-
sor programs the system’s IOMMU to prevent access to these
pages by DMA-capable devices. This design enforces code
integrity and data secrecy and integrity for both TrustVisor it-
self and PALs, since a compromised legacy OS can only ma-
nipulate the virtual CPU that is under the control of TrustVi-
sor. Even if the malicious OS reprograms DMA-capable de-
vices, the IOMMU will prevent access to TrustVisor or PAL
memory regions.
4.2.2 Protection Life-Cycle for PALs
We now describe the life-cycle of a PAL, which begins when
code is ﬁrst identiﬁed as comprising a PAL via a registration
process. We detail how TrustVisor is conﬁgured to provide
code and execution integrity, and data secrecy and integrity,
to PALs. We deﬁne code integrity to be the property that code
P has not been modiﬁed from its intended version, and execu-
tion integrity to be the property that code P actually executes
with inputs Pinputs and produces outputs Poutputs. We discuss
these properties as a PAL progresses through registration, in-
vocation, termination, and unregistration.
PAL Registration. To avoid modifying the legacy OS to
support PALs, TrustVisor implements an application-level
hypercall interface for registering PALs (though PALs can
also be components of the OS if desired). The registration
interface allows application programmers to specify sets of
functions as security-sensitive. The speciﬁcation includes a
list of function entry points, and input and output parameter
formats. This design makes it the responsibility of applica-
tion developers to identify the security-sensitive regions of
their programs and group sets of functions into one or more
PALs and untrusted portions. Essentially developers are re-
quired to perform privilege-separation.2
TrustVisor veriﬁes that the speciﬁed addresses belong to
the calling application’s address space, and (un)marshals pa-
rameters between legacy mode and secure mode when PAL
functions are invoked. The registration hypercall returns an
error if the provided addresses are illegal.
While a PAL is registered, TrustVisor ensures that the ma-
chine physical pages that contain any relevant PAL state (both
code and data) are unmapped from the legacy OS’s guest
physical memory space. Any illegal access by the untrusted
application or legacy OS to read, write, or execute the PAL’s
registered pages will trap to TrustVisor. TrustVisor handles
illegal accesses by injecting a fault (e.g., General Protection
Fault, Segmentation Fault, or Bus Error) into the legacy OS,
which will handle it in accordance with that OS’s design (typ-
ically by terminating the offending process).
PAL Invocation. Following registration, the untrusted legacy
application and OS cannot read, write, or directly execute the
memory containing the PAL that it registered. However, the
functions inside the PAL can still be invoked using what ap-
pears to the developer to be an ordinary function call. Any
function call to code inside the PAL will trap to TrustVi-
sor. TrustVisor then performs the following three steps before
transfering control to the called function inside the PAL:
1. Identify which registered PAL contains the current
called sensitive function.
2. Switch from legacy guest mode to secure guest mode,
with secure guest mode conﬁgured so that only the pages
containing this PAL are accessible.
3. Prepare the secure-mode execution environment for the
called sensitive function. This includes marshaling input
parameters into isolated pages available to the PAL and
setting up the PAL’s stack pointer.
Passing pointers in and out of a PAL requires knowing the
size of the pointed-to area.
(This information is provided
as part of the registration call, when entry-points are enu-
merated.) Thus, nested pointers (e.g., a pointer to a struct
that contains another pointer to a buffer) must be marshaled
by PAL developers during invocation. Likewise, a PAL that
wishes to output any of its state to the untrusted world can
do so simply by passing it as an output parameter. Note that,
despite TrustVisor’s protections, PAL developers must take
care to perform appropriate input parameter validation, as un-
trusted code may invoke a PAL with arbitrary inputs.
The application that registers a PAL is held responsible for
faults or exceptions caused by the PAL. TrustVisor zeros the
PAL’s state and injects the fault into the legacy OS. Thus, data
secrecy is maintained and applications can attempt recovery.
2While automatic privilege separation may be possible in some in-
stances [6], such mechanisms are beyond the scope of this paper.
PAL Termination. When a PAL has completed executing
and returns to the calling legacy application, TrustVisor once
again gets control. This happens because any attempt to exe-
cute code in secure mode outside the PAL causes a trap into
TrustVisor. TrustVisor performs the following two steps be-
fore transfering control back to the legacy application:
1. Marshal any returned parameters and make them avail-
able to the calling untrusted application.
2. Switch from secure guest mode to legacy guest mode,
in which the pages containing the PAL are once again
inaccessible from guest mode.
The PAL’s execution state is left intact, so that the cor-
responding untrusted application can invoke it a second time,
e.g., with different input parameters. Thus, PALs should clear
their sensitive state to ensure semantic security if warranted
by application requirements.
PAL Unregistration. Unregistration is normally initiated
by the application that originally registered a particular PAL.
However, it can also be initiated by the legacy OS if a PAL
exits due to an error (e.g., a null-pointer exception). Either
way, other than the PAL’s output parameters, TrustVisor ze-
ros all execution state associated with that PAL. Once all PAL
state is cleared, the relevant pages are once again marked ac-
cessible to the untrusted OS.
4.3 Trusted Computing Mechanisms
Trusted computing mechanisms are used to provide two basic
capabilities for TrustVisor and the PALs it supports. The ﬁrst
is a sealed storage mechanism, by which a particular PAL can
encrypt data along with a policy such that the resulting cipher-
text can only be decrypted by the PAL speciﬁed in the policy.
The second is a remote attestation mechanism by which a re-
mote party can be convinced that a particular PAL indeed ran
on a particular platform (optionally with particular inputs and
producing particular outputs) protected by TrustVisor. Both
of these mechanisms are enabled by an integrity measurement
process that maintains a set of measurements (cryptographic
hashes) of all code in the TCB for a PAL of interest.
The security properties provided by these mechanisms ul-
timately stem from hardware roots of trust – the TPM chip
and the platform’s chipset and CPU support for dynamic root
of trust. However, as it is our goal to enable arbitrarily many
PALs to be registered with TrustVisor concurrently, we must
provide a means to delegate the hardware root of trust to PALs
as needed. This is accomplished through a software µTPM in-
stance associated with each registered PAL. The µTPM main-
tains integrity measurements and enables sealed storage and
attestation for a speciﬁc PAL. We detail the interactions be-
tween hardware trusted computing primitives provided by the
TPM and chipset, TrustVisor, µTPM instances, and PALs.
4.3.1 Roots of Trust and Integrity Measurement
Code integrity measurement is a prerequisite for remote at-
testation and long-term data protection. It comprises keeping
track of the cryptographic hash of all software that has been
loaded for execution in the TCB for some operation. For a
particular PAL, this amounts to TrustVisor and the PAL it-
self. Integrity measurement provides a trustworthy source of
information about what code has been loaded for execution
to use in remote attestations. Further, it serves as a means for
controlling access to the cryptographic keys used by sealed
storage to provide long-term data secrecy and integrity on a
per-PAL basis.
Two-Level Integrity Measurement. TrustVisor employs a
two-level approach for integrity measurement. The physical
TPM stores measurements of TrustVisor when it is invoked
via hardware DRTM, and TrustVisor in turn measures each
PAL when it is registered. This design is intended to avoid
Flicker’s performance issues and monopolization of the plat-
form’s DRTM capabilities. PAL integrity measurements are
maintained in a software µTPM that exposes trusted comput-
ing and dynamic root of trust capabilities to PALs.
Every registered PAL has its own distinct µTPM instance
that is created as part of the PAL registration process. How-
ever, the µTPM is not created until after TrustVisor’s memory
protection mechanisms are actively enforcing that no other
code or devices on the platform can tamper with this PAL’s
memory pages. Following µTPM creation, a measurement
of the PAL is extended into the µTPM. This measurement in-
cludes PAL metadata, including its size and legal entry points.
This atomic (from the perspective of the PAL) isolate-then-
extend sequence during registration constitutes the establish-
ment of the TRTM. Further, the TCB includes only TrustVi-
sor and the PAL itself (Figure 3). Note that µTPM instances
are zeroed and freed whenever a PAL is unregistered, which
may be during normal operation or in response to an error.
Measurements extended into a µTPM instance are stored in
micro Platform Conﬁguration Registers (µPCRs) within the
µTPM instance. Thus, TRTM imitates the functionality of
the dynamic root of trust provided by the platform’s physi-
cal TPM, but with the relevant TPM operations performed in
software by the µTPM. This enables multiple µTPM instances
to exist concurrently, and removes the slow TPM chip from
critical-path measurement and data sealing operations.
Measuring Parameters.
PAL input parameters, and any
outputs produced, can be measured (extended into a µPCR) if
the PAL is written to do so, thereby enabling the presence (or
absence) of certain inputs and outputs to serve as additional
access control to sealed data, and to be attested to remote
parties. A PAL written to take full advantage of these capa-
bilities achieves the strongest execution integrity properties.
This gives PAL developers maximum ﬂexibility in managing
parameters (Figure 4).
4.3.2
µTPM Functions
We describe the µTPM design that TrustVisor exposes to
PALs. Many of the more sophisticated TPM functions re-
main useful to a system running TrustVisor and executing
PALs, but they can be leveraged at the whole-system layer
of abstraction. An example is the generation of Attestation
Identity Keys (AIKs). Multiple AIKs can be generated by
the system’s physical TPM, and a particular AIK can be used
when attesting to a particular PAL running on top of Trust-
Visor. This does not require any explicit action from the
PAL or µTPM. Additionally, migrating TPM-sealed data be-
tween physical platforms is accomplished via migration of
TrustVisor-level secrets. The higher-level, µTPM-sealed data
will unseal perfectly on the relocated TrustVisor.
The small number of commands included in our µTPM
design help to keep the TrustVisor TCB small. TrustVisor
accesses the TPM chip via its Locality 2 interface during
platform startup and shutdown [33], and prevents the legacy
OS from accessing this interface. TrustVisor exposes Local-
ity 1 (less privileged) access to the physical TPM chip to the
untrusted legacy guest OS (Figure 2), thereby maintaining
compatibility with existing TPM-based applications (e.g., the
open-source TCG Software Stack [33]).
The software µTPM interface that TrustVisor exposes to
PALs includes the following TPM-like functions:
1. HV Extend for measuring code and data,
2. HV GetRand for obtaining random bytes,
3. HV Seal and HV Unseal for sealing and unsealing data
based on measurements, and
4. HV Quote to attest to measurements in µPCRs.
The secrecy and integrity of µTPM-sealed data is protected
by symmetric cryptographic primitives performed in Trust-
Visor. These mechanisms are a signiﬁcant source of Trust-
Visor’s efﬁciency for trusted computing operations. Previ-
ous systems rely on the TPM’s low-cost CPU to perform
asymmetric sealing and quote operations, or monopolize the
TPM’s scarce non-volatile (NV) RAM, whereas TrustVisor
executes the HV * family of trusted computing operations
on the platform’s primary CPU, and uses efﬁcient symmet-
ric primitives for HV Seal and HV Unseal.
We now detail the design of TrustVisor’s µTPM interface.
HV Extend. TrustVisor allocates memory from its own ad-
dress space for the µPCRs in the µTPM for each PAL. PALs
can be written to invoke HV Extend with arguments of their
choosing, thereby enabling measurement of input and output