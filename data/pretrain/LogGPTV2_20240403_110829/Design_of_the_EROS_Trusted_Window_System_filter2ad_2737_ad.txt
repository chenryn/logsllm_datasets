identify and specify a next-generation secure L4 architec-
ture. Among other systems, the PERSEUS project will
clearly beneﬁt from these revisions.
Following up on the web spooﬁng work by Felten et al.
[11], Ye and Smith have examined the problem of trusted
paths in browsers [34]. They examine various methods
for displaying trusted path information to the user, and ex-
plore the pitfalls of each. This is an area that needs further
exploration in EWS. Our work on EWS to date is largely
complementary with the work of Ye and Smith. Where
Ye and Smith focus on issues of presentation, we have fo-
cused on issues of separation. Our goal is to ensure that
ordinary applications lack the necessary authority to dis-
rupt the trusted path successfully, and to ensure that any
hostility encountered in an application remains conﬁned
to that application.
10.1 DoPE
DoPE [12] is a window system created by the L4 team at
T.U. Dresden for use in real-time systems. The real-time
Figure 5: Usability demonstration by young potential Pi-
casso.
this paper the impact of Trusted X [9, 8] and the Compart-
mented Mode Workstation [4, 20, 21, 33] efforts.
A key decision in the design of EWS was the adoption
of local shared memory to support our basic rendering
model. This was encouraged by our experiences as early
users of the Blit [22, 24] bitmapped terminal, and later
by the architectural success of the Gnot (the original dis-
play for Plan 9 [23]). The success of these two systems
convinced us that the argument for generic remoting ad-
vanced by Gettys and others is not compelling. Even
in the absence of a cooperative display update protocol,
bitmap propagation strategies such as those used by tools
like VNC [25] do an excellent job of providing efﬁcient
display update while reducing the displays server’s trusted
computing base by an order of magnitude. The display
update protocol used in EWS is actively VNC-friendly.
For applications such as movie display or gaming where
low latency is required, remote connections are unsatis-
factory from a usability standpoint.
In the movie case,
there is also a substantial bandwidth (and therefore power)
cost imposed by performing decompression before the
bits arrive at the destination display. In short, generic re-
moting appears to be viable only in the cases where inter-
active performance does not matter.
While many other well-known window systems exist,
most notably those of the Macintosh [2, 3], Microsoft
Windows, and the Alto [31], none have given particular
attention to the possibility of hostile applications.
An increasing number of applications today incorpo-
rate scripting languages or full programming languages.
Among many others, Tygar and Whitten have identiﬁed
design environment presents many of the same constraints
that arise in trusted window systems. While motivated by
real-time predictability rather than security, the DoPE sys-
tem must minimize variance, and in doing so, must apply
resource minimization techniques that are comparable to
those described here. Discussions between the two project
teams revealed that the two systems are comparable in
size and complexity when DoPE’s rendering operations
and higher-level widgets are excluded from the compari-
son (Table 1).
Feature
Core function, drivers
Higher Widgets
EWS DoPE
4,500
7,000
3,000
N/A
Table 1: Comparative sizes of EWS and DoPE, in lines of
code.
The total lines of code attributable to drivers are approx-
imately equal in the two systems. EWS provides two
hardware-dependent display drivers (VMWare and Rage-
128). DoPE implements only one display driver (VESA),
but the driver exports a richer set of rendering operations
than the EWS drivers. Given this, we believe that the
2,500 line gap in the respective core functionality is pri-
marily due to the inclusion of lower-level widgets in the
DoPE display server design.
As originally conceived, EWS incorporated a similar wid-
get system, but we are aware of no motivation from ei-
ther a security or a performance perspective that requires
this functionality to be implemented by the trusted com-
puting base (TCB). In consequence, TCB minimization
requirements therefore mandated moving this function to
the client, and we never attempted a server-side widget
implementation. If the above breakdown of function and
complexity is correct, the security argument for remov-
ing widgets was clearly compelling: the complexity of the
DoPE widget set (including lower and higher widgets) is
approximately equal to the complexity of the entire EWS
trusted computing base.
Both DoPE and EWS plan to incorporate support for 3D
acceleration in future work. Hardware interactions of this
kind are necessarily trusted, but from a security perspec-
tive, defensive engineering practice suggests that such
function should be implemented by a separate protection
domain. Software rendering routines intended to replace
missing hardware functions should be implemented by the
client rendering library, which is entirely outside of the
trusted computing base; there is no reason to incorporate
such function into the display server.
11 Acknowledgements
While it has diverged in recent years, the original EROS
architecture was closely derived from that of KeyKOS.
No work derived from KeyKOS could be complete with-
out acknowledging the principal architects and implemen-
tors of that system: Norman Hardy, Charlie Landau, and
William Frantz. Each of these individuals has participated
in and encouraged work on the EROS system.
While this paper does not present X11 as a positive ex-
ample for purposes of security, it is a system that contains
many brilliant ideas that have had a strong inﬂuence on
the work of the authors for many years. In large measure,
X11 and its predecessors are responsible for the accep-
tance of bitmapped computer graphics today. Many years
ago, Phil Karlton spent a fair bit of time explaining the
design of X11 to Jonathan S. Shapiro while we worked
on the Silicon Graphics ProDev tool set. More recently,
Jim Gettys offered some of his rationale for the desirabil-
ity of remote display access. Ultimately, though it was not
his intention, he reafﬁrmed our view that remoting didn’t
belong in the window system.
Jeremy Epstein was gracious enough to review a draft of
this paper, and offered a number of helpful comments.
We are extremely greatful to Norman Feske and Hermann
H¨artig of the Dresden L4 group for their time and courtesy
in explaining the implementation and design concept of
DoPE.
Wesley Vanderburgh graciously permitted us to reproduce
Figure 5. Framed and signed lithographs may be obtained
by request from the artist, who is struggling to pay for his
ﬁrst grade home-schooled education and would appreciate
your support. Twenty years from now, they will surely be
very rare and possibly more valuable than SCO stock.
12 Conclusion
We have presented the design of the EROS Trusted Win-
dow System, which provides robust traceability of user
volition and is capable (with extension) of enforcing
mandatory access controls. The EWS implementation, in-
cluding the two current display drivers, is less than 4,500
lines, which is a factor of ten smaller than previous trusted
window systems such as Trusted X, and well within the
range of what can easily be evaluated for high assurance.
Based on our experience with both the implementation
and the result, the EROS Window System is practical,
usable and assurable. As is so often the case in asking
how to secure subsystems, the key lay in deciding what
to remove. What is staggering in this instance is that the
trusted component of EWS is between 2% and 5% of the
lines of code of X11 with no user-apparent reduction in
functionality or utility. It can readily be extended to new
input devices, and extension of this form would not entail
a complex re-evaluation effort because input drivers are
strongly isolated. Most of the work would lie in the as-
sociated device helper, which is isolated from the display
server by a protection boundary.
While we have not attempted to tune the EWS implemen-
tation for performance, the evidence of the widely-used
Apple Quartz 2D implementation suggests that ﬁnal per-
formance should be acceptable.
The small size of EWS provides a partial validation of
the EROS design. A key idea in EROS is that breaking
applications into small, protected components yields more
secure applications and often allows smaller programs to
perform very powerful functions by leveraging existing
components.
Both EROS and the EROS window system implementa-
tion will be accessable via the EROS web site at the time
of publication.
References
[1] M. D. Abrams. Renewed understanding of access control
policies. In Proc. 16th National Computer Security Con-
ference, pages 87–96, Oct. 1993.
[2] Apple Computer.
sachusetts, 1985.
Inside Macintosh. Reading, Mas-
[3] Apple Computer. Quartz 2D Reference. Apple Computer,
Inc., 2003.
[4] J. L. Berger, J. Picciotto, J. P. L. Woodward, and P. T.
Cummings. Compartmented mode workstation: Prototype
highlights. IEEE Transactions on Software Engineering,
16(6):608–618, June 1990.
[5] B. Bershad, T. Anderson, E. Lazowska, and H. Levy.
Lightweight remote procedure call.
In Proc. 12th Sym-
posium on Operating Systems Principles, pages 102–113,
Dec. 1989.
[6] R. Cox, E. Grosse, R. Pike, D. Presotto, and S. Quinlan.
In Proceedings of the 11th USENIX
Security in plan 9.
Security Symposium, pages 3–16, San Francisco, 2002.
[7] U.S. Department of Defense Trusted Computer System
Evaluation Criteria, 1985.
[8] J. Epstein, J. McHugh, H. Orman, R. Pascale, A. Marmor-
Squires, B. Dancer, C. R. Martin, M. Branstad, G. Benson,
and D. Rothnie. A high-assurance window system proto-
type. Journal of Computer Security, 2(2):159–190, 1993.
[9] J. Epstein and J. Picciotto. Trusting X: Issues in building
Trusted X window systems -or- what’s not trusted about
X? In Proceedings of the 14th Annual National Computer
Security Conference, Washington, DC, USA, Oct. 1991.
A survey of the issues involved in building trusted X sys-
tems, especially of the multi-level secure variety.
[10] J. Epstein, et. al. A prototype B3 Trusted X Window Sys-
tem. In Proceedings of the Seventh Annual Computer Se-
curity Applications Conference, San Antonio, TX, USA,
Dec. 1991. The architecture for TRW’s high assurance
multi-level secure X prototype.
[11] E. W. Felten, D. Balfanz, D. Dean, and D. S. Wallach.
Web spooﬁng: An internet con game. In 20th National In-
formation Systems Security Conference, Baltimore, Mary-
land, Oct. 1997.
[12] N. Feske and H. Haertig. DOpE – a window server for
real-time and embedded systems. In Proc. 24th IEEE In-
ternational Real-Time Systems Symposium, Cancun, Mex-
ico, Dec. 2003.
[13] M. Hohmuth and H. H¨artig. Pragmatic nonblocking syn-
chronization for real-time systems. In Proc. 2001 USENIX
Annual Technical Conference, pages 217–230, Boston,
MA., 2001.
[14] Common Criteria for Information Technology Security.
International Standards Organization, 1998. International
Standard ISO/IS 15408, Final Committee Draft, version
2.0.
[15] M. J. Kilgard, D. Blythe, and D. Hohn. System sup-
port for openGL direct rendering.
In W. A. Davis and
P. Prusinkiewicz, editors, Graphics Interface ’95, pages
116–127. Canadian Human-Computer Communications
Society, 1995.
[16] L4 eXperimental reference manual, version X.2. Techni-
cal report, L4KA Team, University of Karlsruhe, 2001.
[17] B. W. Lampson. A note on the conﬁnement problem.
Communications of the ACM, 16(10):613–615, 1973.
[18] C. W. Mercer, S. Savage, and H. Tokuda. Processor ca-
pacity reserves: Operating system support for multimedia
applications. In Proc. IEEE International Conference on
Multimedia Computing and Systems, May 1994.
The PERSEUS system architecture.
[19] B. Pﬁtzmann, J. Riordan, C. St¨uble, M. Waidner, and
A. Weber.
In
D. Fox, M. K¨ohntopp, and A. Pﬁtzmann, editors, VIS
2001, Sicherheight in komplexen IT-Infrastrukturen, DuD
Fachbeitrge, pages 1–18. Vieweg Verlag, 2001. Also avail-
able as IBM Research Report RZ 3335 (#93381).
[20] J. Picciotto. Towards trusted cut and paste in the X Win-
dow System. In Proceedings of the Seventh Annual Com-
puter Security Applications Conference, San Antonio, TX,
USA, Dec. 1991. A discussion of the security problems as-
sociated with cut and paste in multi-level secure versions
of X.
[21] J. Picciotto and J. Epstein. A comparison of Trusted X se-
curity policies, architectures, and interoperability. In Pro-
ceedings of the Eighth Annual Computer Security Appli-
cations Conference, San Antonio, TX, USA, Dec. 1992.
A survey of interoperability issues among CMWs and the
TRW prototype.
[22] R. Pike. The blit: A multiplexed graphics terminal. Bell
Labs Tech. J., 63(8, part 2):1607–1631, Oct. 1984.
[23] R. Pike. 8 1
2 , the plan 9 window system. In Proceedings
of the Summer 1991 USENIX Conference, pages 257–265,
Nashville, 1991.
[24] R. Pike, B. Locanthi, and J. Reiser. Hardware/software
tradeoffs for bitmap graphics on the blit. Software - Prac-
tice and Experience, Jan. 1985.
[25] T. Richardson, Q. Stafford-Fraser, K. R. Wood, and
IEEE Internet
A. Hopper. Virtual network computing.
Computing, 2(1):33–38, 1998.
[26] D. Rosenthal. Inter-client Communications Conventions
Manual, version 2.0. X Consortium and Sun Microsys-
tems, 1994.
[27] R. W. Scheifﬂer and J. Gettys. X Window System. Digital
Press, 3rd edition, 1992.
[28] M. Segal and K. Akeley. The OpenGL Graphics System:
A Speciﬁcation, version 1.0. Silicon Graphics, Inc., 1993.
[29] J. S. Shapiro, J. M. Smith, and D. J. Farber. EROS: A
fast capability system. In Proc. 17th ACM Symposium on
Operating Systems Principles, pages 170–185, Kiawah Is-
land Resort, near Charleston, SC, USA, Dec. 1999. ACM.
[30] J. S. Shapiro and S. Weber. Verifying the EROS conﬁne-
ment mechanism. In Proc. 2000 IEEE Symposium on Se-
curity and Privacy, pages 166–176, Oakland, CA, USA,
2000.
[31] C. Thacker, E. M. McCreight, B. W. Lampson, R. F.
Sproull, and D. Boggs. Alto: A personal computer. ACM
Transactions on Computer Systems, 2(1), Feb. 1984.
[32] J. Tygar and A. Whitten. WWW electronic commerce
and Java Trojan horses. In Proc. 2nd USENIX Workshop
on Electronic Commerce, pages 243–250, Oakland, CA,
1996.
[33] J. P. L. Woodward. Security requirements for system high
and compartmented mode workstations. Technical Report
MTR 9992, Revision 1 (also published by the Defense In-
telligence Agency as document DDS-2600-5502-87), The
MITRE Corporation, Bedford, MA, USA, Nov. 1987. The
original requirements for the CMW, including a descrip-
tion of what they expect for Trusted X.
[34] Z. E. Ye and S. Smith. Trusted paths for browsers. In Proc.
11th USENIX Security Symposium, pages 263–279, 2002.
[35] K.-P. Yee. User interaction design for secure systems.
In Proc. 4th International Conference on Information and
Communications Security, pages 278–290, Dec. 2002.