# Title: Tracking Probabilistic Correlation of Monitoring Data for Fault Detection in Complex Systems

## Authors:
- Zhen Guo
- Guofei Jiang
- Haifeng Chen
- Kenji Yoshihira

### Affiliations:
- **Robust and Secure System Group, NEC Laboratories America, Princeton, NJ 08540**
  - Email: {gfj, haifeng, kenji}@nec-labs.com
- **Dept. of Electrical & Computer Engineering, New Jersey Institute of Technology, Newark, NJ 07102**
  - Email: [PI:EMAIL]

---

## Abstract

The increasing complexity of modern systems makes fault detection and isolation extremely challenging. While a large amount of monitoring data can be collected from such systems, effectively correlating this data across distributed systems and over time is a significant challenge. This paper proposes using Gaussian Mixture Models (GMMs) to characterize the probabilistic correlation between flow intensities measured at multiple points. A novel algorithm derived from the Expectation-Maximization (EM) algorithm is used to learn the "likely" boundary of normal data relationships, which is then used as an oracle for anomaly detection. Our recursive algorithm can adaptively estimate the boundary of dynamic data relationships and detect faults in real-time. The approach is tested in a real system with injected faults, and the results demonstrate its feasibility.

---

## 1. Introduction

The prevalence of Internet services like Google and Amazon has dramatically changed our daily lives. As these services grow in scale and complexity, ensuring their operational reliability and availability becomes increasingly important. Even brief service outages can lead to significant revenue loss and user dissatisfaction. Large internet services often consist of thousands of components, such as application software, operating systems, databases, servers, and networking devices. A single fault can cause the entire service to fail. While building a completely fault-free system is unrealistic, effective fault detection and isolation methods are crucial for maintaining system reliability.

Studies have shown that the time taken to detect and isolate faults significantly contributes to the mean time to repair (MTTR). For example, on November 1, 2005, trading on the Tokyo stock market was suspended for four hours due to an IT system failure. Therefore, effective fault detection and isolation are critical for improving the reliability and availability of mission-critical systems.

Large amounts of monitoring data, such as software log files, system audit events, and network traffic statistics, can be collected from distributed systems for fault analysis. This data can be seen as observables of the internal states of dynamic systems. However, given the distributed nature of complex information systems, evidence of fault occurrence is often scattered across various monitoring data and observation times. One challenge is how to effectively correlate this data for fault analysis.

Internet services handle a large number of user requests daily, and much of the monitoring data reacts to the volume of these requests. For instance, network traffic volume and the number of web server log entries change in accordance with the volume of user requests. Thus, we can model the correlation between various monitoring data collected at multiple points for fault analysis. Recently, we proposed modeling and tracking transaction flow dynamics for fault detection in complex systems. We calculated the flow intensity from monitoring data to measure how various data respond to the volume of user requests.

In this paper, we use Gaussian Mixture Models (GMMs) to characterize the probabilistic correlation between flow intensities measured at multiple points. A novel algorithm derived from the Expectation-Maximization (EM) algorithm is proposed to learn the "likely" boundary of normal data relationships, which is further used as an oracle in anomaly detection. Our recursive algorithm can adaptively estimate the boundary of dynamic data relationships and detect faults in real-time. Our approach is tested in a real system with injected faults, and the results demonstrate its feasibility.

---

## 2. Related Work

There is extensive research on fault detection and isolation in telecommunication network management. Yemini et al. [5] proposed a "Codebook" approach for high-speed and robust event correlation. Chao et al. [6] developed an automated fault diagnosis system using hierarchical reasoning and alarm correlation. Benveniste et al. [7] employed a net unfolding approach based on Petri nets for distributed fault diagnosis. These methods collect and correlate events to locate faults based on known dependency knowledge between faults and symptoms. While this knowledge can be derived from network topology in telecommunication networks, it is difficult to obtain in large and complex information systems.

The Berkeley Recovery-Oriented Computing (ROC) group modified the JBoss middleware to trace user requests in the J2EE platform and developed two methods to use collected traces for fault detection and diagnosis [1]. However, with the large volume of user visits, it is challenging to monitor, collect, and analyze the trace of each individual user request. Based on commonly available monitoring data such as log files, we recently proposed tracking transaction flow dynamics for fault detection in complex systems. However, we only used linear regression models to characterize dynamic relationships among flow intensities measured at multiple points. In this paper, we propose using Gaussian mixtures to model probabilistic relationships of monitoring data and further use these models for fault detection. Due to system dynamics and uncertainties, some measurements may only have weak and probabilistic correlations rather than linear relationships.

Vaarandi [8] applied clustering algorithms to mine event logs for fault detection. The work first constructs clusters by grouping event logs based on their message characters and then detects failures by tracking anomalous events that do not belong to any existing clusters. Yamanishi et al. [9] developed an online unsupervised outlier detection engine named Smartsifter, which uses Gaussian mixtures for intrusion detection in computer security. Although Gaussian mixtures are also used to model data relationships in our work, we apply a new variant of the recursive EM algorithm that can dynamically tune the number of clusters. Additionally, we track the probabilistic relationship among monitoring data rather than their real values, providing a different approach for outlier detection.

---

## 3. Probabilistic Relationship

Many Internet services employ multi-tier system architecture to integrate their components. A typical three-tier architecture includes web servers, application servers, and database servers. Web servers act as the system interface to handle requests and responses from clients. Application servers support specific application and business logic for Internet services. Database servers are the back-end servers for persistent data storage. Monitoring data, such as access logs, runtime data, and network statistics, can be collected from these systems for fault analysis.

The rich set of monitoring data collected at multiple points enables us to analyze their correlations across distributed systems. For example, the correlation between the volume of user requests and the number of Java threads running on the application server can be analyzed. In this paper, we select pairs of such measurements, \( x(t) \) and \( y(t) \), to form a set of two-dimensional variables: \((x(t), y(t))\), which correspond to data points in a 2-D space. Since these measurements are affected by the same factor—user loads—there is a strong correlation between them. However, due to system dynamics and uncertainties, some correlations may only be characterized with probabilistic models.

If we consider a system component as a black box, the correlation between the monitoring data measured at the input and output of the component can reflect the constraints the system bears. As an engineered system, these constraints can be imposed by factors such as hardware capacity, application software logic, and system architecture. After faults occur inside the component, some of these constraints may be violated, and we can detect such faults by continuously tracking the correlation between the input and output measurements. In this paper, we use GMMs to approximate the probabilistic correlation between flow intensity measurements. A probability density boundary is determined by tracking the mass characteristics of historical measurements. Anomalies are detected by determining whether a new data point lies outside this boundary, i.e., whether its probability density is less than a selected threshold.

---

## 4. Gaussian Mixture Models

Figure 3 shows an example of the correlation between memory usage and the number of Java threads in a middleware server. The samples are collected from a real system, which will be introduced in Section 8. From the scatter plot in Figure 3, we notice that data points can be clustered around several centers with compact cluster sizes. We apply a GMM to characterize such relationships because many flow intensity measurements are likely to follow Gaussian distributions. The volume of user requests is the major factor affecting the intensity of internal monitoring data. Given a certain volume of user requests, these measurements are likely to follow Gaussian distributions, and their mean values can correspond to the current intensity of workloads. Due to varying workloads, multiple Gaussian distributions may be needed to capture the mass characteristics of measurements. This is our motivation for using GMMs in this work.

In a GMM, we use the following probability density function \( p \) to approximate the real data distribution:

\[
p(z_i) = \sum_{j=1}^{G} \alpha_j p(z_i | \mu_j, \Sigma_j)
\]

where \( G \) is the number of mixtures, \( \alpha_j \) are the unknown proportions of these mixtures, and \( p(z_i | \mu_j, \Sigma_j) \) denotes the j-th two-dimensional Gaussian distribution with mean value \( \mu_j \) and covariance matrix \( \Sigma_j \). The mixture parameter set is denoted by \( \theta = \{ \alpha_j, \mu_j, \Sigma_j \} \). The probability density of a data point is a weighted mixture of the \( G \) Gaussian distributions. Given data samples, the well-known EM algorithm [3] can be used to estimate the optimal parameter set \( \theta \) that maximally approximates the real data distribution.

---

## 5. Model-Based Fault Detection

For two-dimensional Gaussian distributions, the Mahalanobis distance is defined as:

\[
d^2(z_i, \mu_j) = (z_i - \mu_j)^T \Sigma_j^{-1} (z_i - \mu_j)
\]

For a specific Gaussian distribution, the squared Mahalanobis distance follows a Chi-squared distribution. We use this property to determine the boundary of normal data. A new data point is considered an anomaly if its Mahalanobis distance exceeds a certain threshold, indicating that its probability density is less than the selected boundary.

---

## 6. Experimental Results

Our approach is tested in a real system with injected faults. The results demonstrate the feasibility and effectiveness of our method. The details of the experimental setup and the results are provided in the full paper.

---

## 7. Conclusion

In this paper, we proposed using Gaussian Mixture Models (GMMs) to characterize the probabilistic correlation between flow intensities measured at multiple points in complex systems. A novel algorithm derived from the Expectation-Maximization (EM) algorithm is used to learn the "likely" boundary of normal data relationships, which is then used as an oracle for anomaly detection. Our recursive algorithm can adaptively estimate the boundary of dynamic data relationships and detect faults in real-time. The experimental results demonstrate the feasibility and effectiveness of our approach.

---

## References

[1] [Reference details]
[2] [Reference details]
[3] [Reference details]
[4] [Reference details]
[5] [Reference details]
[6] [Reference details]
[7] [Reference details]
[8] [Reference details]
[9] [Reference details]
[10] [Reference details]

---

**Note:** The references should be filled in with the appropriate details.