357
在Linux的使用手册页里定义的错误有：
EMFILE
进程使用的文件描述符过多。
ENFILE
系统的文件表已经满了。
EFAULT
文件措述符无效。
那两个返回的文件描述符通过一种特殊的方式连接起来。写到rile_descriptor[1]的所有数据
都可以再从file_descriptor[0]处读回来。数据按先人先出的原则进行处理，人们把这种做法简称
为FIFO（“Firstin，FirstOut”的字头缩写）。也就是说，如果你把字节“1，2，3”写到
file_descriptor[1]里去，从file_descriptor[0]读回来的数据也会是“1，2，3”。这与堆栈的是不一
样的，堆栈操作采用后进先出的原则，简称LIFO（“Firstin，FirstOut”的字头缩写）。
注意：这里必须使用的是文件描述符而不是文件流，所以访问数据时必须使用底层
的read和write调用，而不是用fread和fwrite。
下面这个pipel.c程序使用pipe创建了一个管道。
动手试试：pipe函数
敲人下面这些代码。注意file_pipes指针的用法，它被当作一个参数传递到pipe函数。
include 
include 
inciude 
include 
int main()
int data_processed;
int file_pipes(2]:
.
char buffer[BUrSIz ▪1]:
memset(buffer,*\o'， sizeof (buffer)):
if (pipe(file_pipes1 0){
data_processed = write(file_pipes[1]. sone_data, strlen(sone_data));
printf(*Wrote d bytes\n*,data_processed):
(21S408
exit(EXIT_SUCCESS):
exit (EXIT_FAILURE);
运行这个程序的时候，我们将看到如下所示的输出情况：
Spipe1
21 ise/a c peag
Wrote 3 bytes
操作注释：
这个程序创建的管道使用着两个文件描述符file_pipes[]。它用file_pipes[1]向管道里写数据，
再从file_pipes[0j读回数据。我们给这个管道里增加了一点缓冲功能，让数据在write和read调用
加入jaVa编程群：524621833
---
## Page 376
358
Linux程序设计
的间隔里有地方保存。
请大家注意：用file_descriptor[0]读、或者用file_descriptor[l]写的后果在有关文档里没有定
义，所以它们在不同版本的UNIX上的行为是会变化的。在作者的系统上，这样的调用失败了，
返回值是“-1”一这多少能够使这一错误的查找工作简单些。
这个例子乍看上去好象没什么高明的地方，它做的工作用一个简单的文件也可以解决。管
道真正的优越性体现在两个进程之间的数据传递上。我们在前面曾经看到过，当进程用fork调用
创建出一个新的进程时，原来打开着的文件描述符还将保持在打开状态。如果我们在原来的进
程里先创建一个管道再用fork函数创建一个新的进程，就可以把数据通过管道传递给其他进程，
动手试试：跨在fork调用两端的管道
1)这是pipe2.c程序。它的开始部分和第一个例子差不多，直到我们发出fork调用。
#include cunistd,h>
#include 
include 
#include 
int main()
int file_pipes[2]:
int data_processed;
const char some_data[] =*123’;
pid_t fork_result;
memset (buffer,*\0′, sizeof (buffer)):
if (pipe(file_pipes) == 0)(
fork_result =fork(1:
if (fork_result =s -1){
fprintf(stderr,*Fork failure*);
exit(EXIT_FAILURE);
d
2）我们对fork的工作情况已经比较了解了，所以如果fork_result等于零，就说明我们是在子
进程里，如下所示：
if 1fork_result == 0){
data_processed = read(file_pipes[0}.buffer,BUFsIz):
exit(EXIT_SUCCESS):
3）否则，我们就是在父进程里，如下所示：
else{
data_processed = write(file_pipes[1]. some_data,
printf(*Wrote ed bytes\n*. data_processed):
strlen[sone_data1 1 ;
exit(EXIT_SUCCESS):
运行这个程序的时候，我们将看到如下所示的输出情况：
rodpd s
加入jaVa编程群：524621833
---
## Page 377
第12章进程间通信：管道
359
Wrote 3 bytes
Read 3 bytes: 123
操作注释：
这个程序先用pipe调用创建了一个管道，接着用fork调用创建了一个新的进程。如果fork操
作成功，父进程就把数据写到管道里去，而子进程就从管道里读出数据。父进程和子进程里分
别只调用了一次write或read函数。如果父进程是在子进程前面退出的，你就在两部分输出内容
之间看到一个shell提示符。
从表面上看，这个程序和第一个例子是很相似的，但这里的做法是把读写操作分别交给两
个进程去完成，比过去前进了一大步。整个操作过程可以用图12-2来说明。
file_pipes[1]
file_pipes[o]
父进
子选程
图12-2
12.4父进程和子进程
接下来，我们把管道的应用再推进一步：在子进程里启动并执行一个有别于它父进程的程
序，而不只是一个简单的进程。我们用exec调用来完成这一工作。这就产生了一个问题：通过
exec函数调用的进程需要知道应该去访问那个文件描述符。以前的例子根本用不着考虑这件事，
因为于进程本身有file_pipes数据的一份拷贝，对它进行访问自然没有问题。但加上exec调用后
的情况就和以前的不一样了，原先的进程已经被新的子进程替换掉了。这个问题可以这样解决：
把文件描述符（它最终只是一个数字而已）当作一个参数传递到用exec启动的程序里去
我们需要两个程序来做演示。第一个程序是“数据加工厂”，它负责创建管道和启动第二个
程序，后者是一个“数据消费者”。
动手试试：管道和exec函数
1）这是“数据加工厂”pipe3.c，它是从pipe2.c修改而来的。改动之处加上了阴影。如下
所示：
#include 
include 
include 
#include 
int main()
int data_processed:
int fi1e_pipes[2]:
char buffer[BUFSIz +1]:
constchar some_data[]=*123*:
pid_t fork_result;
加入jaVa编程群：524621833
---
## Page 378
360
Linux程序设计
nenset (buffer,'\o', sizeof (buffer)1:
if (pipe(file_plpes]se 0){
if (fork_result sa (pid_t)-1)[
fork_result =fork[):
fprintf (stderr,
rork failure");
exit (EXIT_FAILURE);
if (fork_result == O）（
sprintf (buffer,
d*,file_pipes[0]};
(void)execl(*pipe4*,*pipe4*,buffer,（char *}0):
exit(EXIT_FAILURE) :
else{
data_processed = write(file_pipes[1), some_data,
printf(*&d - wrote ed bytes\n*, getpid(1, data_processed) :
strlen(some_data)1 ;
exit (EXIT_SUCCESS) :
1
2)下面是“数据消费者”pipe4.c，它负责读取数据，比pipe3.c简单多了。
#include cunistd.h>
include 
tinclude 
#include 
int main(int argc, char *argv[])
int data_processed;
int file_descriptor:
sscanf（argv[1].*d*,6file_descriptor);
memset (buffer,
'\o,sizeof(buffer)):
data_processed =read（file_descriptor.buffer.BUrsIz):
printf(*ed - read &d bytes: es\n*. getpid(1. data_processed, buffer):
exit(EXIT_SUCCESS):
程序pipe3将调用程序pipe4。运行pipe3程序的时候，我们将看到如下所示的输出情况：
980-wrote 3 bytes
cedrds
s-6
操作注释：
pipe3程序的开始部分和前面的例子一样，它先通过pipe调用创建一个管道，再通过fork调用
创建一个新的进程。接下来，它用sprintf把对应于管道“读操作”的文件描述符数字保存的一个
缓冲区里，该缓冲区中的内容将构成pipe4程序的一个参数。
我们通过一个excel调用来启动pipe4程序。excel调用有四个参数，它们的含义依次是：
准备启动的程序的名称。
·argv[0]，被调用程序的名称。
·argv1]，存放着我们想让被调用程序去读取的文件描述符。
加入jaVva编程群：524621833
---
## Page 379
第12章进程间通信：管道
361
·（char*）0，这个参数的作用是结束被调用程序的执行。
pipe4程序从参数字符申里提取出文件描述符数字，再利用文件描述符进行读操作以取得数据。
12.4.1管道关闭后的读操作
在继续学习之前，我们先来研究研究打开着的文件描述符。我们到自前为止一直采取着一
个简单的做法：让读进程读取一些数据后直接退出一一认为UNIX会把清理文件当做是进程结束
扫尾工作的一部分。
我们此前见过的例子都是这样做的，但大多数从标准输人读取数据的程序采用的却是另外
一种做法。通常，它们并不知道有多少数据需要它去读取，所以它们往往采用环的办法，读
数据——处理数据一—读更多的数据，直到没有数据可读为止。
当没有数据可读时、read调用就会阻塞，即进程暂停执行，一直等到有数据来到为止。如果
管道的另一端已经被关闭了，也就是没有进程打开这个管道并向它写数据的时候，read调用就会
阻塞。但阻塞并不解决问题，所以对没有为写数据而打开的管道做read调用时将返回“0”，而不
是阻寨。这就使读进程能够象检测文件文件尾end-of-file标志一样对管道进行检测。注意：这与
读一个无效的文件描述符不同，read把无效的文件描述符看做是一个错误，它将返回一个“-1”
表示有问题发生。
如果我们在fork调用的两端使用一个管道，就会产生两个可以用来向管道写数据的文件描述
符，一个在父进程里，另外一个在子进程里。只有把父进程和子进程里的两个写操作文件描述
符都关闭了，管道才会被认为是关闭了，以后的read调用就会不能进行。我们还会对这一问题做
进一步讨论，在学习到O_NONBLOCK标志和FIFO文件的时候，大家将看到一个这样的例子。
12.4.2把管道用做标准输入和标准输出
知道读空管道操作失败的原因之后，我们再向大家介绍一个用管道连接两个进程时更简明
的方法。我们把一个管道文件描述符设置为一个已知值，一般是标准输人“0”，或标准输出“1”。
这比在父进程里进行设置要稍微复杂--些，但子程序的编写工作就大大简化了。
这样做最大的好处是我们可以调用运行操作系统中的标准程序，即那些不需要文件描述符
做参数的程序。这就要用到我们在第3章里遇见的dup函数。dup有两个紧密关联的版本，它们的
定义情况如下所示：
#include 
int dup2（int file_descriptor_one, Ant flle_descriptor_two)
int dup(int file_dascriptor);
dup调用的作用是打开一个新的文件描述符，这与open调用有点相似。dup的特点是用它新
创建出来的文件描述符与做为它参数的那个现有的文件描述符指向的是同一个文件（或管道）
dup函数创建的新文件描述符永远取最小的可用值；而dup2函数创建的新文件描述符或者与
file_descriptor_two相同，或者是第一个大于file_descriptor_two的可用值。
通过更具普遍意义的fcntl调用，我们能达到与调用dup和dup2相同的目的，fcntl调
加入jaVa编程群：524621833
---
## Page 380
362
Linux程序设计
用中相应的命令是F_DUPFD。虽然这么说，还是dup函数用起来更方便些，因为它们是
专门来复制文件描述符用的，它们的使用面也非常广，读者在现有程序里更经常看见的
是它们而不是fcnt和F_DUPFD
那么，dup是如何帮助我们在进程问传递数据的呢？秘密就在这句话里：标准输人的文件描
述符永远是“0”，而dup返回的新文件描述符水远是最小的可用数字。因此，先关闭文件描述符
“0”，再调用dup，这样得到的新文件描述符就会是数字“0".这个取值为“0”的新文件描述符
是一个现有文件描述符的复制品，所以标准输人就会改为指向一个文件或管道一—我们刚才传递
给dup函数的参数就是它们的文件描述符。我们创建了两个文件描述符，它们指向同一个文件或
管道，而且其中之一还是标准输人。
用close和dup对文件描述符进行处理
表12-1
文件指述符
初始慎
关闭后
dup湖用后
0
标准输人
普道文件描述符
 1
标准输出
标准输出
2
标准错误
标准错误
标准错误
管道文件措述符
管道文件指述符