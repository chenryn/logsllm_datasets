1.5
0.6
75.6
50.0
28.7
10.3
Full
–
–
All
All
Orig.
Orig.
−13), and only 2.2%
cracked in less than a day (GP of 10
could be cracked in less than a week. This panel illustrates
that the strengthening algorithm was eﬀective in guarding
against a PCFG-based attack which uses data from typical,
weak passwords.
Moving to the bottom panel, we see that if the PCFG at-
tack uses data derived from passwords which were strength-
ened using the same algorithm as the passwords which are
to be guessed, one edit no longer suﬃces. In this scenario,
2.5% of the passwords could be cracked in less than a day,
and 4.6% in less than a week. However, if two edits are
applied rather than one, the strengthening algorithm is still
largely eﬀective, with only 1.3% of the strengthened pass-
words recoverable in a week.
5.1.2 Attacking with Leaked Data
Alternatively,
it is possible that a site’s strengthening
database could be accidentally leaked. Ideally, the leakage
of that data should not be suﬃcient to crack a large percent-
age of the user passwords. Since the strengthening database
contains statistics on the actual passwords, this seems to be
a worst-case scenario.
In Table 3 the GPs for the strengthened passwords are
shown for three diﬀerent scenarios, each representing a vari-
ation of Algorithm 3. The top panel utilizes Algorithm 3 as
presented. The middle panel shows the consequences of fully
processing all original and strengthened passwords; in other
words, Algorithm 3 would be modiﬁed so that every string
in both the original and strengthened passwords would enter
the dictionaries. The bottom panel shows the results if Al-
gorithm 3 were modiﬁed so that it fully processed all original
passwords but still only partially processed the strengthened
passwords. In all scenarios, the training phase (subset A)
fully processes both the original and unstrengthened pass-
words; partial processing can only occur in the strengthening
phase (subsets B and C), if at all.
The top panel is rather surprising as it shows that the
strengthening database for Algorithm 3, as presented, pro-
vides less information to an attacker than does the Weak
data set of Table 2. This lack of success is attributable to
the use of full versus partial processing of the passwords in
Algorithm 3, and the remaining rows illustrate the impor-
tance of this diﬀerential in processing.
As the percentages for both the middle and bottom panels
134
show, either alternative method to building the strengthen-
ing database has the risk that, in the event of a leak of
the strengthening database, a large percentage of passwords
would be guessed in under a day, even with two edits.
As described in Section 4.4, the strengthening database is
built from both the original, weak passwords and the revised,
strengthened passwords. Consequently, it is not surprising
that the rows in the top panel exhibit lower percentages
than the Strong rows in Table 2.
In the latter case, the
data used in cracking only reﬂects the statistics of the pass-
words that are to be guessed, rather than both weak and
strong passwords.
It is, however, not immediately appar-
ent why the leaked database would be less eﬀective than
using a database built solely from weak passwords. The an-
swer has to do with the role of the dictionaries in computing
GPMC(token) and thus the password GPs. Because the dic-
tionaries are built only from the training data in Algorithm
3, the dictionaries in the strengthening database are much
smaller than they are in the databases built from either the
original or strengthened passwords. The larger dictionaries
give those data sets an advantage in guessing.
As an example, when the password “pearlharbor1” in the
rockyou-2 set was run through the strengthening process,
the dictionary in the strengthening database did not contain
the string “pearlharbor”. As a result, GPMC(pearlharbor)
was computed using the Markov chain’s probability tables,
and GP(pearlharbor1) calculated to 2.5 × 10
−17, and there-
fore not in need of strengthening. However, the rockyou-
1 set contained two passwords which contained the string
“pearlharbor”, so the dictionary in the cracking database
computed from rockyou-1 contained “pearlharbor”. Thus,
GPMC(pearlharbor) was much larger (easier to guess) and
the cracking database computed from rockyou-1 would gen-
erate the password “pearlharbor1” quickly.
Clearly, a larger dictionary is advantageous in guessing.
Similarly, when strengthening, the use of a larger dictionary
should produce passwords which are more resistant to guess-
ing as the scenario just described would not have occurred if
the strengthening dictionary contained “pearlharbor”. Thus,
while the partial versus full processing of passwords has the
beneﬁt of not providing an attacker any advantage in the
event of a leak, there is also a cost: the strengthened pass-
words must, due to the smaller dictionary being used, be
more susceptible to a PCFG-based attack. Table 4 shows the
results of a PCFG-based attack on the strengthened pass-
words under the three full/partial processing combinations
used in Table 3: partial processing of both the original and
strengthened passwords, corresponding to the top panel of
Table 3; full processing on both passwords, corresponding to
the middle panel; and fully processed original passwords but
partially processed strengthened passwords, corresponding
to the bottom panel. In each of these cases, the data used
to mount the attack is calculated exclusively from passwords
strengthened from the rockyou-1 set; this corresponds to the
Strong rows in Table 2.
The alternative constructions do produce strengthened
passwords which are more resistant to a PCFG-based at-
tack. However, the diﬀerential in the percent of recover-
able passwords is slight, particularly if two edits are used.
Nonethless, if the probability of a leak is deemed suﬃciently
small, the superior resilience to cracking seen in the alterna-
tive constructions could be judged as a risk worth taking.
Recall that Algorithm 3 placed no constraints on the edit-
−15
Table 4: GPs using Diﬀerent Dictionaries
−14 % 10
18.0
7.6
16.4
6.4
17.7
7.5
Partial Edits % 10
2.5
0.4
2.0
0.3
2.4
0.3
−13 % 10
4.6
1.3
3.7
1.1
4.4
1.3
1
2
1
2
1
2
Full
–
–
All
All
Orig.
Orig.
All
All
–
–
Str.
Str.
ing process – inserted or replacement characters could be
any printable character.
If constraints along the lines of
what was used in [12] were used, the results are compara-
ble to the ﬁgures in Tables 2 and 3, with no meaningful
changes. However, as discussed below, the restricted editing
does have a signiﬁcant impact in a diﬀerent context.
5.2 Resistance to Brute Force Attacks
A second form of attack against strengthened passwords
would be for an attacker to try to guess the original, un-
strengthened password, and then to test all possible variants.
This attack is a brute force approach, but it is guided by the
passwords generated by Algorithm 1. While this GBF search
is far slower than a PCFG-based attack, it is nonetheless fast
enough to be practical as will be illustrated shortly.
Detailed examination of the strengthened passwords shows
one reason why a GBF attack could be successful: often-
times, the change in GP from the original password to the
strengthened one is several orders of magnitude more than
what should be possible. As a somewhat extreme exam-
ple, “12qwaszx” has a GP of 1.04 × 10
−8; this is quite weak,
due to “qwaszx” being a keyboard pattern used frequently
enough to be included in the cracking database’s dictionary,
and the relatively common structure of D2L6. The strength-
ened password “12qwasJx” has GP of 1.75×10
−17, reﬂecting
the extreme improbability of the Markov chain within the
cracking database to generate the string “qwasjx”. While
the calculations from the Markov chain’s transition prob-
ability tables are mathematically correct, it is entirely un-
reasonable to assert that changing a single character within
an 8-character password actually makes it more secure by
9 orders of magnitude – particularly since the number of
possible variants is only 1,607.5 A similar state of aﬀairs is
shown in [12]: there the authors present an example that
shows transforming the password “life45!” to “lifeˆ45!” de-
creases the GP by four orders of magnitude – 1.1× 10
−12 to
1.8 × 10
−16.
In order to determine how many passwords could poten-
tially be guessed using this brute force approach, we need
to know the GPs of the passwords which were strengthened.
−12 can be guessed
Passwords with GPs no stronger than 10
in about two hours, and thus strengthened passwords built
from these passwords may be vulnerable to a brute force
attack. Table 5 shows a breakdown of the GPs of the pass-
words which were strengthened by Algorithm 3 using one or
two edits. Results are also shown for full editing (no restric-
tions on characters used, denoted “Y”) or restricted editing
(as in [12], denoted “N”).
The percentages in Table 5 reveal that a GBF attack as
5855 variants from inserting one of 95 characters at 9 pos-
sible locations, plus 752 variants from changing any of the
eight characters to one of 94 others.
135
Table 5: GPs for Passwords Needing Strengthening
Edits Full? % 10
13.3
2.4
26.5
4.9
Y
N
Y
N
1
1
2
2
−12
−9 % 10
22.2
4.4
41.6
9.5
−10 % 10
35.2
6.4
60.3
25.0
−11 % 10
54.0
11.4
74.5
49.0
Table 6: Guided Brute Force Run Times
Run Time, 12 cores
−9
−9
−10
−10
−11
−11
−9
−9
1.2 hours
8 minutes
12.7 hours
1.3 hours
1 week (est)
16.2 hours
Guessed 5.4% in 24 hours
Y
N
Y
N
Y
N
Y
N
1
1
1
1
1
1
2
2
20.4 hours
Min GP Edits Full?
10
10
10
10
10
10
10
10
described above would be eﬀective in cracking a signiﬁcant
number of strengthened passwords. With one edit and no
restrictions on editing, 13% of the strengthened passwords
−9. As
had original passwords with a GP weaker than 10
observed in Table 1, a search of all passwords at this level
of GP can be done in a minute. Thus, the only barrier to
guessing a large percentage of the strengthened passwords is
the computation time to generate and test all possible vari-
ants of the weak passwords. In this regard, the passwords
strengthened with two edits may be more secure. Despite
the higher percentage of weak original passwords, using two
edits will have a signiﬁcant impact on the run time.
Notably, if the strengthening process restricts the edits
that can be made, the likelihood of a password with a low
GP being successfully strengthened is signiﬁcantly less than
in the case with unrestricted edits since it is more diﬃcult
to strengthen a password with the restrictions in place. As a
side eﬀect, this means that restricted editing actually makes
the passwords less susceptible to a GBF attack. An explicit
exploration of the impact of stronger initial passwords on the
eﬀectiveness of GBF guessing is presented in Section 5.3.
To determine run times for GBF attacks, the guessing
algorithm shown in Algorithm 2 was modiﬁed so that when-
ever currentGuess was checked against the list of passwords,
all variants of currentGuess were generated and tested as
well. The results are presented in Table 6.
As was seen in Table 5, restricting the edits (“Full?” col-
umn of “N”) greatly reduces the number of weak passwords
that can be strengthened, which reduces the eﬀectiveness of
a GBF attack. Table 6 shows this advantage is oﬀset to a
degree. Here, it is evident that reduction in the size of the
search space that the GBF attack must explore has a large
impact on run time. As exhibited, when compared to unre-
stricted editing (“Full?” column of “Y”) an additional order
of magnitude of GPs can be explored when restricted edits
were used.
The runs which applied two edits would clearly take a long
time to ﬁnish. However, the runs for passwords with GPs
−9 were started and allowed to run for
no stronger than 10
24 hours before being halted. Even though the search space
with two edits is too large to exhaustively search, a GBF at-
tack was still capable of guessing roughly 5% of the strength-
136
ened passwords in 24 hours when searching at a GP level of
−9. Since the goal of the strengthening algorithm was
10
to ensure that no password could be guessed within weeks,
the strengthening algorithm has therefore not met its goal,
despite the fact that the strengthened passwords are signif-
icantly harder to guess than the original passwords. Addi-
tional, longer runs are required to better assess the overall
security risks.
The GBF search actually guessed slightly more passwords
than was indicated by Table 5 as some of the passwords
which did not need strengthening were within one or two
edits of a weak password. For example, the user password
“k3ybo@rd” would be judged secure by the strengthening
process, but it would be guessed when all 2-edit variants of
“keyboard” were generated. Because of these “extra” hits,
the completed run in the bottom panel of Table 6 guessed
5.1% of the passwords, rather than 4.9% shown in Table 5.
5.3 Counter-measures
In order for a strengthening algorithm to perform as de-
sired, the eﬀectiveness of GBF attacks must be signiﬁcantly
reduced. One way to accomplish this goal would be to
increase the number of edits as this increases the number
of possible variants for each password by several orders of
magnitude, making GBF attacks signiﬁcantly more time-
consuming. However, as noted in [9, 10], going beyond two
random edits signiﬁcantly impairs memorability, so two ran-