# Spring 框架漏洞分析与利用

## 一、漏洞概览

| 漏洞名称 | CVE/CNVD 编号 | 影响版本 | 发布日期 |
| --- | --- | --- | --- |
| SpringBoot 远程代码执行漏洞 | - | 1.2.0-1.2.7, 1.3.0 | 2016/7/15 |
| Spring Data REST 远程代码执行漏洞 | CVE-2017-8046 | Spring Data REST < 3.0.1, Spring Boot < 1.5.9, Spring Data REST < 2.6.9 | 2017/9/21 |
| Spring Web Flow 远程代码执行漏洞 | CVE-2017-4971 | Spring Web Flow 2.4.0-2.4.4, 2.4.4-2.4.8 | 2017/5/31 |
| SpringBoot 远程代码执行漏洞 | CNVD-2019-11630 | Spring Boot 1-1.4, 2.x | 2019/4/22 |

从上表可以看出，这些漏洞分布在Spring框架的不同子分类中，且主要影响较低版本。用户应尽快升级至最新版本，并持续关注新的漏洞信息。尽管近期未出现相关新漏洞，但这些高风险漏洞仍不可忽视。这些漏洞大多不需要复杂的配置即可直接攻击成功，从而执行任意代码，危害较大。因此，开发者在使用Spring进行开发时，必须关注其历史风险点，尽量规避高危漏洞，减少不必要的配置修改。

## 二、漏洞利用链
上述漏洞基本不依赖其他Spring漏洞即可直接获取权限。下图对其利用方式做了简要概述：

## 三、高可利用漏洞分析

### 1. CVE-2018-1270
- **威胁等级**: 严重
- **影响范围**: Spring Framework 5.0 - 5.0.5, 4.3 - 4.3.15
- **利用难度**: 简单
- **漏洞描述**: 在受影响的Spring Framework版本中，通过spring-messaging模块内存中的STOMP代理创建WebSocket时，攻击者可以向代理发送消息，导致远程代码执行。
- **漏洞分析**:
  - 点击`connect`触发`DefaultSubscriptionRegistry.java`中的`addSubscriptionInternal`方法。
  - 第80行提取`selector`字段值（恶意表达式），第83行解析表达式。
  - 监听网络流量，发现`send`信息时将消息分发给不同订阅者，并包含之前`connect`的上下文。
  - `SimpleBrokerMessageHandler.java`中的`sendMessageToSubscribers`方法最终触发`getValue`方法，执行恶意代码。
- **补丁分析**: 补丁将`StandardEvaluationContext`替换为`SimpleEvaluationContext`，避免恶意类加载。

### 2. CVE-2018-1273
- **威胁等级**: 严重
- **影响范围**: Spring Data Commons 1.13 - 1.13.10, 2.0 - 2.0.5; Spring Data REST 2.6 - 2.6.10, 3.0 - 3.0.5
- **利用难度**: 简单
- **漏洞描述**: 攻击者可构造恶意SPEL表达式实现远程代码执行。
- **漏洞分析**:
  - 从`/users`入口调用`MapPropertyAccessor`静态类处理用户名。
  - 创建解析器并使用`StandardEvaluationContext`，包含待解析表达式，使用`setValue`触发。
- **补丁分析**: 补丁将`StandardEvaluationContext`替换为`SimpleEvaluationContext`，避免恶意类加载。

### 3. CNVD-2016-04742
- **威胁等级**: 严重
- **影响范围**: Springboot 1.1.0-1.1.12, 1.2.0-1.2.7, 1.3.0
- **利用难度**: 简单
- **漏洞描述**: 低版本Springboot在处理内部500错误时使用SpEL表达式，允许外部传入恶意表达式，导致远程代码执行。
- **漏洞分析**:
  - 访问URL进入控制器并抛出异常。
  - 异常代码调用`render`方法，`replacePlaceholders`方法替换形如`${}`的SpEL表达式。
  - 构造payload，循环解析SpEL，导致任意代码执行。
- **补丁分析**: 添加`NonRecursivePropertyPlaceholderHelper`类，限制二次解析的值。

### 4. CVE-2017-8046
- **威胁等级**: 严重
- **影响范围**: Spring Data REST < 3.0.1, Spring Boot < 1.5.9, Spring Data REST < 2.6.9
- **利用难度**: 简单
- **漏洞描述**: 使用PATCH方法局部更新时，`path`参数被传入SpEL表达式，导致代码执行。
- **漏洞分析**:
  - 执行payload定位到`JsonPatchHandler`类。
  - 判断HTTP方法和`content-type`，进入`applyPatch`方法，根据`replace`字段进入处理器。
  - 实例化`patchOperation`并初始化SpEL解析器，调用`setValue`触发。
- **补丁分析**: 在`perform`方法中添加参数合法性校验，分割`path`参数并判断是否为类属性，避免非法操作。

### 5. CVE-2017-4971
- **威胁等级**: 中危
- **影响范围**: Spring Web Flow 2.4.0 - 2.4.4, 2.4.4 - 2.4.8
- **利用难度**: 较高
- **漏洞描述**: 配置`view-state`但未配置相应`binder`，且`useSpringBeanBinding`默认为`false`时，特殊HTTP请求可导致SpEL注入，造成远程代码执行。
- **漏洞分析**:
  - 执行`confirm`请求，断点到`binderConfiguration`判断。
  - 未配置`binder`时进入`addDefaultMapping`方法，遍历所有参数，以`_`开头的参数进入`addEmptyValueMapping`方法。
  - `addEmptyValueMapping`方法使用SpEL表达式解析变量名并进行`get`操作，导致漏洞。
- **补丁分析**: 将表达式类型改为`BeanWrapperExpressionParser`，避免处理类的问题；全局解析器改为`SimpleEvaluationContext`。

### 6. CNVD-2019-11630
- **威胁等级**: 严重
- **影响范围**: Spring Boot 1-1.4, 2.x
- **利用难度**: 简单
- **漏洞描述**: 通过`env`路径修改`spring.cloud.bootstrap.location`位置，并使用`refresh`接口触发，导致加载恶意文件并执行任意代码。
- **漏洞分析**:
  - 搭建环境并按上述方式进行攻击。
  - 跟进`environment`和`refresh`接口，更新环境变量。
  - `refresh`接口触发后，挑选变化的信息并处理恶意地址。
  - `ConfigFileApplicationListener`的`load`方法加载远程yml文件，处理内容导致远程代码执行。
- **补丁分析**: Springboot 1.5及以后版本对这些接口添加了授权验证，防止随意调用。

## 四、漏洞利用
漏洞利用视频，请转到原文观看，链接：[此处插入链接]

## 五、参考链接
1. [链接1]
2. [链接2]
3. [链接3]
4. [链接4]
5. [链接5]
6. [链接6]
7. [链接7]
8. [链接8]
9. [链接9]
10. [链接10]