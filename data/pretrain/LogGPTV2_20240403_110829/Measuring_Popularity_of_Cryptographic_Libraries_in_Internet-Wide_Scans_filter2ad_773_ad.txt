are otherwise hidden from ordinary IPv4 scans because of the use
of Server Name Indication (SNI) TLS extension. SNI enables the
web server to multiplex X.509 certificates on a single IP address,
because the client sends the desired host name directly in the TLS
handshake. Simple TLS handshake returns only one, default virtual
host certificate, hence other virtual hosts are hidden from the scan.
Moreover, the default certificate is usually generated during server
installation (if not overridden later) and thus does not have to be
relevant to the context.
4.1.3 Rapid7 Sonar SSL. Project Sonar [6] performs a regular
scan of IPv4 SSL services on TCP port 443. The dataset includes both
raw X.509 certificates and processed subsets. It contains snapshots
taken within a time frame of maximum 8 hours. It ranges from
2013-10-30 to the present (still active) with many samples. The files
with certificates are incremental, so the scan from a particular day
contains only new certificates – not yet seen in the preceding scan.
We transform the increments into snapshots. The scanning peri-
odicity varies, making the analysis more complicated. The project
also maintains an independent IP address blacklist that evolves in
time. Additionally, the scanner code evolves (cipher suite selection,
bug fixes, methodology fixes) causing fluctuations in the data.
4.1.4 HTTPS Certificate Ecosystem. IPv4 TLS scanning dataset
[18] ranging from 2012-06-10 to 2014-01-29. It is essentially the
same as the Sonar SSL dataset with respect to the format and the
properties. This dataset contains one host-to-certificate fingerprint
mapping file for each scan and one big certificate database for the
whole dataset. The periodicity varies a lot. There are many snap-
shots only two days apart, as well as large gaps between samples,
up to 50 days. We recoded the dataset to the Sonar SSL format, with
an incremental certificate database. We then transformed it to the
full snapshot format identical as for Sonar SSL.
4.1.5 Certificate Transparency. The specification of CT (RFC
6962) allows retrieving an arbitrary range of entries from a log. We
processed all entries in logs maintained by Google up to May 2017.
All entries must be submitted with all the intermediate certificates
necessary to verify the certificate chain up to a root certificate
published by the log. We process only the leaf certificates. Since the
logs are append-only, there is no reliable way of knowing whether
an older certificate is still active (the validity period gives an upper
estimate), hence we do not have a sample of all certificates in use
for a given date. Instead, we process incremental samples – all
certificates submitted during a specific period (a day or a week).
4.1.6 Client SSH keys – GitHub. GitHub gives users SSH-au-
thenticated access to their Git repositories. Developers upload their
public SSH keys. One user can have no, one or more SSH keys.
GitHub provides an API to list all the registered users and another
endpoint allows downloading SSH keys on a per-user basis. We
downloaded a list of almost 25M GitHub users with almost 4.8M
SSH keys found. The scan was performed in February 2017 and took
3 weeks to finish on a commodity hardware. We implemented a
168Figure 4: Some distributions may be interchanged for a mix of other distributions. We used our method to approximate each
of the 13 distributions using only the remaining 12 distributions. The graphs show the original distribution as a green outline
and the combination of libraries that minimizes the sum of squared distances is visualized by stacking the scaled distributions
on top of each other. The results show that Group 7 (OpenSSL) cannot be easily approximated by other groups (the process
leads to a large squared differences in the distributions that will not be permitted by the NNLSF method). However, Group 11
(with Microsoft libraries) can be simulated relatively closely by a combination of other distributions. Hence, when a real world
distribution contains keys from Group 11, the method may misattribute the keys as coming from a specific mixture of libraries
instead.
TLS v1.2 handshake by the scanning software, resulting in exclusion
of a significant portion of Microsoft IIS servers for 18 months as
confirmed by Project Sonar authors.
custom multi-threaded crawler for this purpose, downloading user
list, SSH keys, parsing them and producing a file for classification.
4.1.7 Pretty Good Privacy (PGP). PGP key servers play an im-
portant role in the PGP infrastructure as public registers of public
PGP keys. The PGP servers synchronize among themselves periodi-
cally. We downloaded a dump of the database in April 2017, parsed
it and extracted RSA master and sub-keys for the analysis. Anyone
can upload a valid PGP public key to the key server and download
the key later. This has to be taken into account during analysis.
Anyone can generate thousands of keys and upload them to the key
server, which would skew a statistics. This actually happened when
a group called Evil 32 [29] generated a new PGP key for thousands
of identities in the PGP server with a collision on the short key ID
to demonstrate the weakness of using a short 32-bit identifier in
the PGP ecosystem.
4.2 Internet-wide TLS scans
Various projects performed Internet-wide scanning since 2010, with
different periods, frequencies and scanning techniques. We ex-
tracted unique RSA keys from certificates collected by EFF SSL
Observatory (only two scans), HTTPS Ecosystem (07/2012-02/2014),
Rapid7 SonarSSL (11/2013-05/2017) and Censys IPv4 TLS (08/2015-
05/2017) scans. The processing is described in Section 4.1.
The overlapping portions of the different scans provide a good
match except for Group 11 (Microsoft libraries) in the Rapid7 Sonar
SSL scan between 11/2013 to 06/2015. The significant decrease of
Microsoft libraries is caused by an improper implementation of the
Figure 5 shows the absolute number of unique RSA keys attrib-
uted by us to every classification group of cryptographic libraries.
OpenSSL (Group 7) is increasingly more popular, also relatively to
other libraries. As of May 2017, there are about 8 million active
unique RSA keys generated by OpenSSL. Group 11 that contains
Microsoft libraries is relatively stable since 2012 starting with 2M,
rising to 2.4M in 2014 and then slightly decreasing to 2.2M keys in
2016. Since there are several changes in the data collection method-
ology and software, it is difficult to make a conclusion about the
significance of the numbers. However, the data indicates a compa-
rably stable number of keys originating from the group.
The large Group 13 (containing Nettle, OpenSSL FIPS, and Wolf-
SSL among others) used to be the third most common library with
0.4-0.5M keys, but was gradually matched by Group 12 (containing
OpenJDK and mbedTLS) in year 2016. Both groups now have an
almost equal share of about 0.5 M unique keys.
The last somewhat significant group is Group 8 with about 1%
of keys, slightly decreasing in popularity since 2016. The group
contains only the PGPSDK 4 FIPS implementation, which is unlikely
to be so popular in TLS. There either exists a different popular
library with a similar prime generation algorithm (not included in
the set of libraries studied by us), or a portion of the dataset was
misattributed to the library due to a similarity of a combination of
profiles, as explained in Section 3.5.
0641281922550123456Mask probability [%]Group  1 approximated064128192255024681012Mask probability [%]Group  2 approximated06412819225501234Mask probability [%]Group  3 approximated0641281922550.00.51.0Mask probability [%]Group  4 approximated0641281922550.00.51.01.5Mask probability [%]Group  5 approximated0641281922550.00.51.01.5Mask probability [%]Group  6 approximated0641281922550.00.20.40.6Mask probability [%]Group  8 approximated06412819225501234Mask probability [%]Group  9 approximated06412819225501234Mask probability [%]Group 10 approximated0641281922550.00.20.40.60.8Mask probability [%]Group 12 approximated0641281922550.00.51.01.5Mask probability [%]Group  7 approximated0641281922550.00.20.40.60.8Mask probability [%]Group 11 approximated0641281922550.00.20.40.60.8Mask probability [%]Group 13 approximated169Figure 5: The combined results from scans of TLS services in the whole IPv4 space as provided by four independent datasets,
given with one-month granularity. An absolute number of unique keys as attributed to different groups by our method are
shown. The sudden “jump” for Group 11 (Microsoft libraries) in SonarSSL in 06/2015 is caused by an improper implementation
of TLS 1.2 handshake in the scanning software, resulting in an exclusion of a significant portion of Microsoft IIS servers for
18 months.
4.3 Popularity between usage domains
Although the TLS ecosystem is the most frequently studied one,
large datasets of RSA keys exist for other usage domains. We an-
alyzed and compared the relative popularity of cryptographic li-
braries as of March 2017 for Internet-wide TLS scans (Censys),
obtained from the 1 million most popular domains according to the
Alexa survey, and the certificates uploaded to all Google’s Certifi-
cate Transparency logs during that month. We also present the TLS
keys as of December 2010 to illustrate the progress in time. Addi-
tionally, SSH authentication keys of all GitHub users and all keys
from PGP key servers were analyzed. The differences are shown in
Figure 6.
The analysis shows significant differences among the usage do-
mains. The GitHub SSH dataset is clearly dominated by OpenSSL
with more than 96% – the default library behind ssh-keygen utility
from OpenSSH software. Fewer than 3% belong to Group 12, which
contains the popular SSH client PuTTY for Microsoft Windows.
The PGP keys are generated mostly by Group 13 (containing
Libgcrypt from the widely used GnuPG software) with about 85%
share, followed by OpenSSL with approximately 11%.
4.4 TLS to CT comparison
According to a survey based on IPv4 scans, Certificate Transparency
(CT) and a large set of active domain names [37], the combination of
CT and IPv4 scans provides a representative sample of the Internet.
We are interested in the differences between the methodologies.
An interesting popularity distribution can be observed from CT
logs. CT has been used on a large scale since 2015, with the first
logs launching in 2013. The logs now contain almost an order of
magnitude more certificates than those reachable by direct IPv4
TLS scans. Due to the validation of TLS certificates performed by
all modern browsers, all valid certificates used for TLS are now
present in CT, but also more. CT logs also contain TLS certificates
hidden from IPv4-based scans due to Server Name Indication (SNI)
10/1001/1104/1107/1110/1101/1204/1207/1210/1201/1304/1307/1310/1301/1404/1407/1410/1401/1504/1507/1510/1501/1604/1607/1610/1601/1704/170M1M2M3M4M5M6M7M8MEstimated number of keysHTTPS EcosystemEFF SSL ObservatoryRapid7 SonarCensys IPv4 TLS scanSonar fixed TLS 1.2 handshakeUnfinished Sonar scanGroup  1: G&D SmartCafe 3.2Group  2: G&D SmartCafe 4.x & 6.0Group  3: GNU Crypto 2.0.1Group  4: Gemalto GXP E64Group  5: NXP J2A080 & J2A081                 & J3A081 & JCOP 41 V2.2.1Group  6: Oberthur Cosmo Dual 72KGroup  7: OpenSSL 0.9.7 & 1.0.2g                 & 1.0.2k & 1.1.0eGroup  8: PGPSDK 4 FIPSGroup  9: Infineon JTOP 80K, YubiKey 4 & 4 NanoGroup 10: NXP J2D081 & J2E145G, YubiKey NEOGroup 11: BouncyCastle 1.54 (Java), Crypto++ 5.6.0 & 5.6.3 & 5.6.5,                  Libgcrypt 1.7.6 FIPS, Microsoft CryptoAPI & CNG & .NETGroup 12: BouncyCastle 1.53 (Java), Cryptix JCE 20050328,                  FlexiProvider 1.7p7, HSM Utimaco Security Server Se50,                  Nettle 2.0, PolarSSL 0.10.0, PuTTY 0.67, SunRsaSign OpenJDK 1.8.0,                  mbedTLS 1.3.19 & 2.2.1 & 2.4.2Group 13: Botan 1.5.6 & 1.11.29 & 2.1.0, Feitian JavaCOS A22 & A40,                  Gemalto GCX4 72K, HSM SafeNet Luna SA-1700, LibTomCrypt 1.17,                  Libgcrypt 1.6.0 & 1.6.5 & 1.7.6, Libgcrypt 1.6.0 FIPS & 1.6.5 FIPS,                  Nettle 3.2 & 3.3, Oberthur Cosmo 64, OpenSSL FIPS 2.0.12 & 2.0.14,                  PGPSDK 4, WolfSSL 2.0rc1 & 3.9.0 & 3.10.2, cryptlib 3.4.3 & 3.4.3.1170Figure 6: Library share in different usage domains. The sources responsible for at least 0.1% of all keys in a particular scan of
the domain are listed in the legend. OpenSSL library dominates in all domains, except for the PGP dataset.
TLS extension. Additionally, certificates never seen in TLS or not
intended for TLS can be submitted to the logs. According to a study
of the CT landscape [22], almost 95% of certificates stored in CA
operated logs are also seen in CT logs operated by Google (Pilot,
Icarus, Rocketeer, Skydiver, Aviator) – we therefore use these logs
with newly inserted certificates during certain time frames (a day,
a week, a month) to perform our analysis.
We compare selected results for certificates submitted to CT
during March 2017 with a Censys scan from the same month in
Figure 6. While OpenSSL is again the most common library in CT,
it is responsible only for about 60% of unique RSA keys, where the
Censys scan contains about 70% of the same. Microsoft libraries
(Group 11) are in a minority with 3.5% in CT, whereas they are
responsible for almost 20% in TLS. The longer validity of certificates
generated by Microsoft software (especially when compared to
certificates produced by Let’s Encrypt CA with 3-month validity)
is a potential reason, with SNI multiplexing being another one.
Groups 12 and 13 are relatively common in CT with 20% and 15%,
respectively, whereas both are below 5% in TLS.
4.5 Detection of transient events
We used our method to estimate the proportion of libraries for
keys newly submitted every week to Google’s CT servers between
Figure 7: The number of keys from distinct groups added to
CT weekly, found in certificates issued by Let’s Encrypt CA.
October 2016 and May 2017, limited to certificates issued by Let’s
Encrypt CA, as shown in Figure 7. The number of certificates added
every week fluctuates significantly, as well as the responsible li-
braries. Only a relatively small number of keys from Group 11 were
inserted when compared to the number of certificates in active use
found by TLS scans. This suggest that Microsoft libraries are less
064128192255Mask0K10K20K30K40K50K60K70KNumber of keys with a given maskTLS 08/2010 (EFF SSL Observatory)Total keys: 5,333,919Original distributionGroup   7: 56.65%Group 11: 23.73%Group 13: 15.23%Group   8: 2.02%Group 12: 1.94%Group   4: 0.35%064128192255Mask0K50K100K150KNumber of keys with a given maskTLS 03/2017 (Censys)Total keys: 11,649,495Original distributionGroup   7: 70.16%Group 11: 19.56%Group 12: 4.61%Group 13: 4.10%Group   8: 1.15%Group   4: 0.34%064128192255Mask0K1K2K3K4K5K6KNumber of keys with a given maskTLS 03/2017 Alexa Top 1M (Censys)Total keys: 353,185Original distributionGroup   7: 84.59%Group 11: 11.08%Group 12: 2.17%Group 13: 0.92%Group   8: 0.67%Group   4: 0.47%064128192255Mask0K50K100K150K200KNumber of keys with a given maskCertificate Transparency 03/2017Total keys: 17,745,546Original distributionGroup   7: 60.06%Group 12: 20.40%Group 13: 15.21%Group 11: 3.50%Group   4: 0.68%064128192255Mask0K10K20K30K40K50K60K70K80KNumber of keys with a given maskGitHub 02/2017Total keys: 4,740,955Original distributionGroup   7: 96.72%Group 12: 2.62%Group   8: 0.58%064128192255Mask0K5K10K15K20K25K30K35KNumber of keys with a given maskPGP 04/2017Total keys: 3,650,466Original distributionGroup 13: 85.20%Group   7: 11.21%Group   6: 2.24%Group 12: 0.59%Group   8: 0.51%Group 10: 0.11%Group   9: 0.10%10/1001/1104/1107/1110/1101/1204/1207/1210/1201/1304/1307/1310/1301/1404/1407/1410/1401/1504/1507/1510/1501/1604/1607/1610/1601/1704/170M1M2M3M4M5M6M7M8MEstimated number of keysHTTPS EcosystemEFF SSL ObservatoryRapid7 SonarCensys IPv4 TLS scanSonar fixed TLS 1.2 handshakeUnfinished Sonar scanGroup  1: G&D SmartCafe 3.2Group  2: G&D SmartCafe 4.x & 6.0Group  3: GNU Crypto 2.0.1Group  4: Gemalto GXP E64Group  5: NXP J2A080 & J2A081                 & J3A081 & JCOP 41 V2.2.1Group  6: Oberthur Cosmo Dual 72KGroup  7: OpenSSL 0.9.7 & 1.0.2g                 & 1.0.2k & 1.1.0eGroup  8: PGPSDK 4 FIPSGroup  9: Infineon JTOP 80K, YubiKey 4 & 4 NanoGroup 10: NXP J2D081 & J2E145G, YubiKey NEOGroup 11: BouncyCastle 1.54 (Java), Crypto++ 5.6.0 & 5.6.3 & 5.6.5,                  Libgcrypt 1.7.6 FIPS, Microsoft CryptoAPI & CNG & .NETGroup 12: BouncyCastle 1.53 (Java), Cryptix JCE 20050328,                  FlexiProvider 1.7p7, HSM Utimaco Security Server Se50,                  Nettle 2.0, PolarSSL 0.10.0, PuTTY 0.67, SunRsaSign OpenJDK 1.8.0,                  mbedTLS 1.3.19 & 2.2.1 & 2.4.2Group 13: Botan 1.5.6 & 1.11.29 & 2.1.0, Feitian JavaCOS A22 & A40,                  Gemalto GCX4 72K, HSM SafeNet Luna SA-1700, LibTomCrypt 1.17,                  Libgcrypt 1.6.0 & 1.6.5 & 1.7.6, Libgcrypt 1.6.0 FIPS & 1.6.5 FIPS,                  Nettle 3.2 & 3.3, Oberthur Cosmo 64, OpenSSL FIPS 2.0.12 & 2.0.14,                  PGPSDK 4, WolfSSL 2.0rc1 & 3.9.0 & 3.10.2, cryptlib 3.4.3 & 3.4.3.110/1611/1612/1601/1702/1703/1704/1705/170.0M0.5M1.0M1.5M2.0M2.5MEstimated number of keys12345678910111213171likely to be used with Let’s Encrypt software. Interestingly, there is
a certain periodicity between such certificates being submitted.
Some periodic monthly insertion events are also visible for
Group 12 (OpenJDK, Bouncy Castle before v. 1.54, mbedTLS, etc.)
and bi-monthly for Group 13 (OpenSSL FIPS, WolfSSL, etc.). Most
Let’s Encrypt certificates from the events are reissued after 60 days.
valid certificates use the RSA algorithm – making our method based
on RSA keys representative of the ecosystem.
The client SSH authentication keys extracted from GitHub were
previously collected and analyzed [9, 14] with a focus on the al-
gorithms, key lengths, and presence of weak keys, detecting keys
generated from OpenSSL with insufficient entropy.
5 RELATED WORK
Only very few prior publications are concerned with the identifica-
tion of the library responsible for generating an RSA key. Except for
[36] (the work we directly improve on), the task was done by [32],
who observed that particular biases in private keys generated by
OpenSSL can be also seen in the majority of keys that were found
in TLS scans and factored by [1, 23, 24]. However, the method only
worked because of the knowledge of the private primes. Further-
more, the keys were generated with insufficient entropy due to bad
random generators. Hence the technique can be extended neither
to all keys generated by OpenSSL, nor to other libraries.
The popularity of a library can be also estimated from the positive
ratings (stars or likes) of open-source repositories, such as those
hosted on GitHub. However, this seems to be a very poor method –
OpenSSL only has four times as many stars as mbedTLS and closed-
source libraries like Microsoft CAPI/CNG cannot be compared this
way at all.
Server fingerprints were used to probabilistically determine the
operating system, or even the versions of the deployed software
[34, 35]. Indeed, the estimates on the number of servers running
Microsoft OS published by [33] matches the results of our analysis
of a scan of the Alexa Top 1 million domains. A similar analysis
was performed for software packages handling the SSH connec-
tion [8] mostly served by Dropbear and OpenSSH, confirming the
dominance of OpenSSH-based software.
Debian-based Linux distributions offer public statistics about the
popularity of software packages as a part of a quality assurance
effort [7]. The results are based on a relatively high number of users
(almost 200K) and provide an insight into the number of package
installation, yet they cannot capture the number of keys in use.
The libraries used to validate SSL certificates in non-browser client
software were surveyed in [21].