代理的授权与访问控制，典型的以OAuth 2.0协议为代表；另一类是基
于使用者角色的授权与访问控制，典型的以RBAC模型为代表。
■ 基于使用者身份代理的授权与访问控制技术：对于API的授权和
可访问资源的控制依赖于使用者的身份，使用者可能是某个自然人用
户，也可能是某个客户端应用程序，当得到使用者的授权许可后，即可
访问该使用者授权的资源。
■ 基于使用者角色的授权与访问控制技术：对于API的授权和资源
访问依赖于使用者在系统中被授予的角色和分配的权限，不同的角色拥
有不同的权限，比如功能权限、数据权限，访问资源时依据此角色分配
的权限的不同可以访问不同的资源。
OAuth协议是目前最流行的客户端应用授权机制，其产生是为了
解决API在多个应用程序之间调用时的授权问题，其基本思路是采用授
权令牌的代理机制，在客户端应用程序、授权服务器、被调用API或
资源之间，构建一个虚拟的令牌层，用于资源访问的授权确认，
OAuth授权的核心流程如图6-5所示。
●图6-5 OAuth授权核心流程
在使用OAuth协议时，根据令牌使用者和调用对象不同，采用不同
的授权方式。一般来说，遵循的授权流程如表6-1所示。
表6-1 OAuth授权方式与调研对象
RBAC模型最开始是在Web应用程序中被广泛使用，近些年在API
应用程序的访问控制中也被广泛使用，比如高版本的Kubernetes中默认
启用RBAC作为授权与访问控制机制。RBAC模型的基础是业务角色，
依赖于角色构建授权和访问控制能力。在企业内部，根据工作职责的
不同会划分不同的部门或岗位。在信息系统中，将这些信息抽象后归类
为角色或组，同一个角色或同组中的用户具备相同的权限。当需要管理
权限时，是通过对角色的分配来实施权限的控制。某公司客服员工、部
门经理、IT经理在信息系统中的不同权限和所对应的功能，如图6-6所
示。
●图6-6 RBAC模型用户-角色-功能权限关系图
在RBAC模型中，其授权的核心要素是账号、角色和权限。账号是
指在API调用时代表的调用者身份，代表用户身份或调用应用客户端的
身份。权限是将系统提供的业务功能按照数据维度和功能维度划分为数
据权限和功能权限，比如能访问哪些数据属于数据权限，能做哪些操作
或操作哪些接口属于功能权限。而角色是账号与权限之间的桥梁，将调
用者身份与可操作的具体功能或数据进行授权关联。某客服系统中，不
同地区的同一角色具备相同的功能权限，但数据权限却各不一样，其对
应关系图如图6-7所示。
●图6-7 RBAC模型用户-角色-功能权限+数据权限关系图
在互联网应用程序中，OAuth协议和RBAC模型通常被同时使用，
共同解决API资源调用和数据访问的授权控制问题。
6.2.4 消息保护技术
消息保护是指对API通信过程中的传输链路及传输的消息对象进行
保护，从TCP/IP四层通信模型上看，API主要表现在应用层，其他各层
与TCP/IP消息特征并无个性化差异，如图6-8所示。
●图6-8 API通信协议模型
针对API的消息保护一般从以下两个方面来实现安全保护机制。
■ 通信链路保护：主要是传输层保护，使用mTLS/SSL来提高通信
链路的安全性。
■ 应用层消息加密和签名：在应用层，除了使用HTTPS、SFTP、
SSH等安全协议外，还会对消息体进行加密和签名。加密用来保护数据
的机密性，签名用来保护数据的防劫持和防篡改。
因应用层API交互技术的不同，对消息体的保护更多是围绕具体的
交互细节去实现，比如对认证令牌的保护、对访问令牌的保护、对敏感
信息的保护等。而JSON和XML作为消息传递的数据格式，其相关的技
术标准（如JWT、JWE、JWS、WS-Security等）为消息保护提供了可操
作指南。
在API消息传输的过程中，为了解决消息可能被监听、拦截与篡改
的问题，加密和签名在消息保护中发挥了极大的作用。加密通常采用加
密算法，依赖密钥对数据进行加密后再传输，如图6-9所示。
●图6-9 消息加密、签名示意图
在密码学中，加密算法又分为对称加密与非对称加密，对称加密中
通信双方使用同样的密钥，仅适用了信息系统内部、通信交互方比较少
的场景。试想，在大范围的公共网络环境中，涉及多方交互，使用对称
加密算法，多方均知道密钥，安全性大大降低。这时使用非对称加密算
法的优势就比较明显，公钥、私钥密钥对的方式在使用过程中，各方使
用公钥加密，私钥解密，即使某一方密钥泄露或丢失，也不会给整体的
安全性带来多大的影响。当然，如果考虑到非对称加密算法对性能的影
响，也可以在消息保护中，模拟HTTPS握手的过程，先使用非对称加密
算法建立通信信道，协商对称加密的密钥，再使用对称加密算法，提高
技术难度来规避性能影响。
使用签名算法处理后的消息，在传输过程中消息内容仍是明文，仅
仅是在原有的消息内容后增加签名信息，供对方在消息验证时验签使
用。签名通常被用来校验消息在传输过程中是否被篡改，所以，如果涉
及敏感信息的传输，仅使用签名算法是不够的。在API的使用过程中，
签名通常结合数字证书一并使用，融入API整体的安全防护机制中，既
解决了消息防篡改的问题，也增加了API身份认证的安全性。
6.2.5 日志审计技术
日志审计在API技术中通常是结合已有的日志服务一起使用，很少
单独去构建日志审计服务，API服务仅作为日志输入的一个端点，为审
计服务提供日志数据来源。如图6-10所示，业务组件服务和API服务作
为两个不同的端点向日志审计系统输入原始日志数据。
●图6-10 日志处理流程
日志审计的目的是通过审计策略和日志分析，发现系统在某一时间
段内发生的异常事件，通过事件关联和追溯，分析与事件相关联的内外
部人员、系统、事件涉及的范围等。一条标准的日志，至少包含以下关
键要素。
■ 时间：指日志发生的时间点，一般精确到秒级，特殊业务需要精
确到毫秒级，准确的时间记录有利于事件的分析与关联。
■ 来源：指日志操作的来源，比如源IP、源主机。
■ 结果：指日志涉及的操作是否成功，比如一次管理API的调用请
求，在日志中需要记录是调用成功还是失败。
■ 操作者：指当前日志是由谁操作的，是某个用户还是某个客户端
应用程序。
■ 操作详情：指操作的具体内容是什么，比如给某个API授权，则
操作详情需要记录授予什么样的权限。
■ 目标对象：指被操作的对象，比如被请求的API端点、被访问的
目标主机。
除了上述基本字段外，很多审计系统根据业务场景的不同在设计时
会增加其他关键字段，比如日志的类型表示是新增操作还是删除操作或
其他，会话ID记录多条日志与会话的关系。
在API服务的日志采集中，可以从以下两个层面去收集。
■ 
接口层：接口的日志主要用于记录在什么时间，谁调用了哪个
API端点，是否调用成功等信息。如果在整个技术架构中使用了API网
关，则最好在网关层面收集。这类日志信息的格式易于统一和标准化，
收集可以使用代理或切面的方式，对原有API服务的影响小，基本很少
需要改造。
■ 操作层：操作的日志主要用于记录API端点被调用时执行的业务
操作，比如创建某个资源、删除某个资源、查询哪些数据等。这些与业
务逻辑相关的日志信息，需要提前在代码中植入代码片段，按照日志标
准格式输出。
当前互联网应用系统中，对API日志的收集主要采用拦截器技术。
在不同的API服务或API端点日志被收集后，交由后端日志分析服务，
根据既定的审计规则对数据进行分析，生成审计事件。这个过程中，审
计规则的制定需要根据业务情况去梳理并在运营过程中不断优化。举例
来说，系统中存在一条针对API调用限流的审计规则是非工作时间单位
时间5min内连续调用接口大于2000次。在第三方厂商的业务初期，业务
量小，这条审计规则不会触发审计事件，但当第三方厂商业务发展起来
之后，2000的阈值可能会导致审计系统频繁触发审计事件。这时，这条
审计规则就需要根据实际业务量来评估一个合理值作为新的阈值。
从日志采集、日志标准化到日志分析、日志展现，这些功能在已有
日志审计系统的前提下，直接把API服务当作一个日志输入接入系统比
较简单。但如果没有日志审计系统，业界也有一些开源产品供架构设计
时选择，主要的产品有Elasticsearch、Logstash、Kibana、Filebeat等，如
图6-11所示。
●图6-11 开源日志审计技术组件
Beats工具内置多种模块（如Filebeat、AuditBeat、Functionbeat
等），可针对常见设备或组件（如Apache、Cisco 
ASA、Kubernetes、
Docker、NGINX、MySQL等）的日志进行收集、解析；Elasticsearch是
实时全文搜索和分析引擎，提供检索、分析、存储数据的功能；Kibana
用于搜索、分析和可视化数据。使用这些开源组件搭建日志审计系统在
技术上已经比较成熟，架构选择时，可以通过这些组件的整合为业务提
供一整套日志审计的解决方案，满足大多数场景下的应用需求。
6.2.6 威胁防护技术
威胁防护是整个API安全中很重要的一环，在大多数应用架构中，
防护技术通常选择前置WAF（Web Application Firewall）来接入整个链
路，但目前市场上的WAF产品因API技术的特殊性对API安全的防护能
力仍显不足，其主要表现在以下几个方面。
■ 认证和授权流程的绕过。API的认证和授权流程很多互联网应用
是基于OAuth 2.0和OpenID Connect去实现的，比传统的Web安全中的认
证和授权流程复杂且与业务耦合度高，传统的安全防护产品难以检测业
务流程绕过的威胁。
■ 数据格式难以识别。API在交互过程使用的消息格式大多数为数
据对象实体，而非单一的字段，比如JSON格式、XML格式、Protobuf格
式、JWT格式等。在威胁检测时需要深入这些数据格式的数据结构内容
去分析，传统的安全防护产品在此方面检测能力比较弱。
■ 
流量控制能力难以满足业务需求。面对API层面的CC攻击、慢
BOT攻击时，传统上使用的检测和防护策略，如访问频率限制、IP黑名
单设置、二次验证机制等难以对新型攻击起到很好的防御效果。
针对API的威胁防护，除了常规使用WAF外，通过开发实现一些安
全机制和使用RASP防护是不错的选择。在前文提及的API技术中传输所
使用的数据是导致WAF无法做深度攻击向量检测的原因，而在RASP层
面，这些数据已被应用解析完毕，比如JWT格式的数据，虽然在传输时
WAF无法解析，但通过应用程序处理到RASP层时已被还原，能被
RASP捕获，这也是在威胁防护技术中推荐使用RASP产品的原因。
对于需要开发实现的安全机制，需要根据不同的业务需求来做定制
化的设计。比如针对限流和熔断可以通过流量控制策略和API管理来实
现。流量控制策略可以根据API端点、应用程序、用户三个层面设置流
量阈值规则。
■ 
API端点：设置API端点在单位时间内被调用的次数不能超过阈
值，超过阈值触发限流或熔断机制。比如不超过2000次/min，不超过
200次/s，不超过50000次/h等。
■ 应用程序：设置某个应用程序在单位时间内被调用的总数不能超
过阈值，超过阈值触发限流或熔断机制。一个应用程序可能包含多个
API端点的调用，根据其调用总数设置阈值。