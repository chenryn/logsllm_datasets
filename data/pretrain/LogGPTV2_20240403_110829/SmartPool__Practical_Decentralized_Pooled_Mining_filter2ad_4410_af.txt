centralized mining problem in Bitcoin and Ethereum by
enabling a platform where mining is fully decentralized,
yet miners still enjoy low variance in reward and better
security. Our experiments on Ethereum and Ethereum
Classic show that SMARTPOOL is efﬁcient.
9 Acknowledgment
We thank Vitalik Buterin, Andrew Miller, Ratul Saha,
Pralhad Deshpande, and anonymous reviewers for use-
ful discussions and feedback on the early version of the
paper. We thank 26 pseudonymous donors who donated
to support the development of SMARTPOOL. We also
thank Victor Tran and Andrew Nguyen for their work on
the robust implementation of SMARTPOOL’s client.
This work is supported by the Ministry of Education,
Singapore under Grant No. R-252-000-560-112 and the
European Research Council under the European Union’s
7th Framework Programme (FP7/2007-2013, ERC grant
no 278410). The deployment of SMARTPOOL on the
main Ethereum network is supported by the Ethereum
Foundation under a special development grant. All opin-
ions expressed in this work are those of the authors.
References
[1] Satoshi Nakamoto. Bitcoin: A peer-to-peer electronic cash sys-
tem. bitcoin.org, 2009.
[2] Meni Rosenfeld. Analysis of Bitcoin pooled mining reward sys-
tems. CoRR, abs/1112.4980, 2011.
[3] Arthur Gervais, Ghassan O. Karame, Vedran Capkun, and Srdjan
Capkun. Is bitcoin a decentralized currency? IEEE Security and
Privacy, 12(3):54–60, 2014.
[4] Joseph Bonneau, Andrew Miller,
Jeremy Clark, Arvind
Naryanan, Joshua A. Kroll, and Edward W. Felten. SoK: Bit-
coin and second-generation cryptocurrencies. In IEEE Security
and Privacy 2015, May 2015.
[5] Maria Apostolaki, Aviv Zohar, and Laurent Vanbever. Hijack-
ing bitcoin: Large-scale network attacks on cryptocurrencies. To
appear at IEEE Security and Privacy, 2017.
[6] The problem of censorship. https://blog.ethereum.org/
2015/06/06/the-problem-of-censorship/, June 2015.
[7] Bitcoin Wiki. getblocktemplate mining protocol. https://
en.bitcoin.it/wiki/Getblocktemplate, November 2015.
[8] P2pool: Decentralized bitcoin mining pool.
p2pool.org/.
http://
[9] Nicolas T. Courtois and Lear Bahack. On subversive miner strate-
gies and block withholding attack in Bitcoin digital currency.
CoRR, abs/1402.1718, 2014.
[10] Ittay Eyal. The miner’s dilemma.
In Proceedings of the 2015
IEEE Symposium on Security and Privacy, SP ’15, pages 89–103,
Washington, DC, USA, 2015. IEEE Computer Society.
USENIX Association
26th USENIX Security Symposium    1423
[11] Loi Luu, Ratul Saha, Inian Parameshwaran, Prateek Saxena, and
Aquinas Hobor. On power splitting games in distributed compu-
tation: The case of bitcoin pooled mining. In IEEE 28th Com-
puter Security Foundations Symposium, CSF 2015, Verona, Italy,
13-17 July, 2015, pages 397–411, 2015.
[12] SmartPool team. SmartPool’s github. https://github.com/
smartpool.
[13] Andrew Miller, Ahmed Kosba, Jonathan Katz, and Elaine Shi.
Nonoutsourceable scratch-off puzzles to discourage bitcoin min-
ing coalitions. In Proceedings of the 22Nd ACM SIGSAC Con-
ference on Computer and Communications Security, CCS ’15,
pages 680–691, New York, NY, USA, 2015. ACM.
[14] Cynthia Dwork and Moni Naor. Pricing via processing or com-
batting junk mail. In CRYPTO, 1992.
[15] Adam Back. Hashcash - a denial of service counter-measure.
Technical report, 2002.
[16] Ethereum Foundation.
github.com/ethereum/wiki/wiki/Ethash.
Ethash proof of work.
https://
[32] Transaction that veriﬁes a claim in an ethereum pool. http:
//tinyurl.com/y9an3pwp.
[33] Arthur Gervais, Ghassan Karame, Srdjan Capkun, and Vedran
Capkun. Is bitcoin a decentralized currency? In IEEE Security
and Privacy, 2014.
[34] Thedao smart contract. https://daohub.org/, 2016.
[35] Ari Juels, Ahmed Kosba, and Elaine Shi. The ring of gyges: In-
vestigating the future of criminal smart contracts. In Proceedings
of the 2016 ACM SIGSAC Conference on Computer and Com-
munications Security, CCS ’16, pages 283–295, New York, NY,
USA, 2016. ACM.
[36] Jason Teutsch,
Loi Luu,
and Christian Reitwiess-
Truebit: A veriﬁcation and storage solution for
https://medium.com/@chriseth/truebit-
ner.
blockchains.
c8b6a129d580#.d2txm5usu, 2016.
[17] Loi Luu, Duc-Hiep Chu, Hrishi Olickel, Prateek Saxena, and
Aquinas Hobor. Making smart contracts smarter. In Proceedings
of the 2016 ACM SIGSAC Conference on Computer and Commu-
nications Security, 2016.
10 Appendix
10.1 Applications
[18] N. Szabo.
The idea of
smart contracts.
http://
szabo.best.vwh.net/smart contracts idea.html, 1997.
[19] Loi Luu, Viswesh Narayanan, Chaodong Zheng, Kunal Baweja,
Seth Gilbert, and Prateek Saxena. A secure sharding protocol for
open blockchains. In Proceedings of the 2016 ACM SIGSAC Con-
ference on Computer and Communications Security, CCS ’16,
pages 17–30, New York, NY, USA, 2016. ACM.
[20] Kyle Croman, Christian Decker, Ittay Eyal, Adem Efe Gencer,
Ari Juels, Ahmed Kosba, Andrew Miller, Prateek Saxena, Elaine
Shi, Emin G¨un Sirer, Dawn Song, and Roger Wattenhofer. On
Scaling Decentralized Blockchains, pages 106–125. Springer
Berlin Heidelberg, Berlin, Heidelberg, 2016.
[21] Loi Luu, Jason Teutsch, Raghav Kulkarni, and Prateek Saxena.
Demystifying incentives in the consensus computer. In Proceed-
ings of the 22Nd ACM SIGSAC Conference on Computer and
Communications Security, CCS ’15, pages 706–719, New York,
NY, USA, 2015. ACM.
[22] Ethereum Foundation. Ethereum’s white paper.
https://
github.com/ethereum/wiki/wiki/White-Paper, 2014.
[23] Loi Luu, Yaron Velner, Jason Teutsch, and Prateek Saxena. Smart
pool : Practical decentralized pooled mining. Cryptology ePrint
Archive, Report 2017/019, 2017. http://eprint.iacr.org/
2017/019.
[24] P2POOL’s coinbase transaction.
zrp3dod.
https://tinyurl.com/
[25] SmartPool contract on Ethereum.
http://tinyurl.com/
yankgher.
[26] SmartPool
contract
on Ethereum classic.
//tinyurl.com/yd2b2ry7.
[27] Blocks mined by SmartPool on Ethereum.
tinyurl.com/ycs4tpzb.
[28] Blocks mined by SmartPool on Ethereum classic.
tinyurl.com/ya8xf8xm.
http:
http://
http://
[29] Source code of a SMARTPOOL-based ethereum mining pool.
http://tinyurl.com/yc22jdjs.
[30] SmartPool set 1GB dataset contract. http://tinyurl.com/
y7qt2khq.
[31] Transaction that submits a claim to an ethereum pool. http:
//tinyurl.com/ya9vbc2k.
We discuss several applications that can be built based
on SMARTPOOL. One straightforward application is
to build decentralized mining pools for cryptocurren-
cies as we have established. Apart from requiring low
costs, guaranteeing low variance in rewards to miners
than the only related solution P2POOL, SMARTPOOL is
also more secure. Speciﬁcally, one must compromise the
entire Ethereum network (e.g. having more than 50%
of Ethereum network) in order to compromise SMART-
POOL. On the other hand, the adversary only needs to
acquire 51% of P2POOL’s mining power in order to build
the longest share-chain in P2POOL and rule out other
miners’ contributions.
The second application is a new cryptocurrency based
on SMARTPOOL in which mining is fully decentralized.
Typically, we enforce the consensus rules such that only
blocks generated by SMARTPOOL are accepted valid
blocks. One can easily build a SMARTPOOL-based cryp-
tocurrency by using our introduced solution and adding
the aforementioned consensus rule which dictates that
only SMARTPOOL can produce new valid blocks. Such
cryptocurrencies can offer several good properties to the
network that existing cryptocurrencies cannot. First,
mining is fully decentralized, yet miners still enjoy low
variance in reward. This improves the security of the
underlying network as a whole signiﬁcantly. Second,
miners are not susceptible to several attacks targeting
to pooled mining. For example, in [9–11] the authors
demonstrate that if a malicious miner withholds blocks
from a victim pool and mines privately in other pool, the
miner can earn more proﬁts from the loss of miners in
the victim pool. Such block withholding attack does not
work in SMARTPOOL-based cryptocurrencies since there
is only one pool in the network.
1424    26th USENIX Security Symposium
USENIX Association
Field Size
(bytes)
4
32
32
4
4
4
Name
version
prevBlock
TxMerkleRoot
timestamp
bits
nonce
Data type
int32 t
char[32]
char[32]
uint32 t
uint32 t
uint32 t
Table 3: Header of a Bitcoin block. This is also used as the
header for shares in pooled mining.
10.2
Implementation
SMARTPOOL-based Bitcoin pool
Subtleties
for
In this section we address two technical issues that arise
from the design of the protocol. The ﬁrst issue is the
format of a witness for a new valid block, and the sec-
ond issue is how a miner should decide on his coinbase
transaction in the next share he mines.
Witness for a new valid block. Intuitively, a witness for
a new block is a block header (see Table 3) with sufﬁ-
cient difﬁculty. However, in Bitcoin network (like in any
blockchain based network), some of the mined blocks
could be orphan, namely, they could be transmitted to the
network a short period before or after an uncle block (a
block that extends the a previous block but does not reach
the blockchain) was found. In this case the network will
eventually form a consensus over only one of the blocks,
and the other block(s) will become orphan (and will not
get any block reward from the network). In our proto-
col we must update the miners verClaimList list only
according to non-orphan blocks. For this purpose, as a
witness we ask for a chain of six blocks. While in the-
ory, even a chain of six blocks could become orphan, in
practice this never happens.
Deciding on the coinbase transaction of the next
share. In order for a share to be valid it must have a coin-
base transaction that corresponds to a verClaimList
list. However, the verClaimList list is updated by the
Ethereum contract. Hence, the contract is only aware of
the Ethereum timestamp at the time the list is updated.
On the other hand, the function verifyClaim() is sup-
posed to verify the coinbase transaction according to the
Bitcoin timestamp of the share. Hence SMARTPOOL
must synchronize Bitcoin and Ethereum time-stamps.
The synchronization is done by introducing a new time
metric, namely, the number of blocks SMARTPOOL has
found. With this new notion of timestamp, we imple-
ment the verClaimList list in such way that a list of
payment claims is maintained for every block number n.
The list of n corresponds to the payments that have to be
done when SMARTPOOL ﬁnds block number n. As new
blocks might be reported with some delay, a payment re-
quest for a bulk that is veriﬁed in time n is added to the
payment list of time n + 20.
Given this implementation, the miner should construct
the coinbase transaction in time n in the following way:
As long as a new block is not found, the coinbase should
correspond to list n. Once a new block is added to Bit-
coin’s blockchain, the miner should immediately start
working on list n + 1 (which already exists, as it was
constructed at time n− 19), even before the new block is
submitted to the contract. If the new block becomes or-
phan, the miner should switch back to list n. Otherwise,
after six blocks he should submit a witness for block n.
We note that in this approach the miner might do some
stale unrewarded work in case the new block ends as an
orphan block. However, such cases are also not rewarded
in standard pools.
Other candidates for counter. Careful readers may re-
alize that the timestamp ﬁeld has only 4 bytes, thus we
will run out of values for the counter after 232 shares.
In SMARTPOOL, one can have several ways to imple-
ment the share’s counter. For example, one can embed
the counter inside the coinbase transaction of a share.
Speciﬁcally, Bitcoin allows users to insert 40 random
bytes in a transaction output after the OP RETURN op-
code 7. SMARTPOOL can force miners to store the
share’s counter in these 40 bytes, which can accommo-
date much more number of shares (i.e. 2320).
7https://en.bitcoin.it/wiki/OP RETURN
USENIX Association
26th USENIX Security Symposium    1425
Notations
• Let NSize, NSample denote the number of shares included in a claim and the number of random samples
SMARTPOOL will verify in each claim respectively.
• Let claimList[x] store all unveriﬁed claims submitted by the miner at address x.
• Let verClaimList[x][y] store all veriﬁed and unpaid claims submitted by the miner at address x at block y.
• Let maxCounter[x] store the maximum counter of the miner at address x.
• We denote d as the minimum difﬁculty of a share.
The ShareProof structure for a share si has the following ﬁelds.
Data structures.
The Claim structure has the following ﬁelds.
1. the number NSize of claimed shares;
2. the ShareAugMT commitment of the set of claimed shares.
• the header of the share si located at the i-th leaf in the augmented Merkle tree;
• the AugMkProof, attesting that si is committed to the ShareAugMT;
• the Coinbase transaction;
• the CoinProof, attesting that the coinbase transaction is included in the TxList of si; and
• the Snapshot of verClaimList that the Coinbase is computed on.
For SMARTPOOL-based Bitcoin pool, the following additional data ﬁelds are included in the ShareProof
Main executions in SMARTPOOL
• Accept a claim. Accept a claim C which has the Claim structure and includes NSize shares from a miner x.
• Verify a claim. Receive a proof p which has ShareProof structure for a share si included in a claim C from
Add C to claimList[x] and update maxCounter[x].
miner x. SMARTPOOL veriﬁes the following.
1. if i is the supposed position that we want to sample based on the intended block hash;
2. if si’s hash is included in the claim C by verifying amkpsi;
3. if si meets the minimum difﬁculty d;
4. if si’s counter is greater than the last maxCounter[x];
5. if the coinbase address is the pool contract’s address for Ethereum; or if Coinbase is included
in si based on CoinProof and if Coinbase is correctly constructed with respect to Snapshot of
verClaimList for Bitcoin.
We reject the claim C if any of the above checks fail. If everything is correct and we have veriﬁed NSample
from C , update verClaimList[x]. Otherwise, wait for more proofs from miner x.
• Get a new valid block (for Bitcoin’s pool only).
If a new block is mined by SMARTPOOL, update
• Request payment (for Ethereum’s pool only). When a miner requests his/ her payment, send the payment in
verClaimList.
proportional to his/her shares in verClaimList. Update verClaimList when the payment is done.
For miners
Bitcoin, fetch verClaimList from SMARTPOOL and build the correct coinbase transaction locally.
• Construct block template. For Ethereum, simply use the pool contract’s address as the coinbase address. For
• Find valid shares. Simply search for valid nonce which yields valid shares.
• Submit a claim. If have found enough NSize shares, build an augmented Merkle tree and submit a claim C to
• Submit proofs. Wait until C is accepted then construct and submit NSample proofs pi (i = 1,2, . . . , NSample),
SMARTPOOL to claim these NSize shares.
each follows the ShareProof structure, to SMARTPOOL.
Figure 4: Summary of how SMARTPOOL protocol works for both the pool and miners.
1426    26th USENIX Security Symposium
USENIX Association