### Centralized Mining Problem in Bitcoin and Ethereum

SMARTPOOL addresses the centralized mining problem in Bitcoin and Ethereum by providing a platform where mining is fully decentralized. Despite this decentralization, miners still enjoy low variance in rewards and enhanced security. Our experiments on Ethereum and Ethereum Classic demonstrate that SMARTPOOL is efficient.

### 9. Acknowledgments

We would like to thank Vitalik Buterin, Andrew Miller, Ratul Saha, Pralhad Deshpande, and anonymous reviewers for their valuable discussions and feedback on the early version of this paper. We also extend our gratitude to 26 pseudonymous donors who supported the development of SMARTPOOL. Additionally, we thank Victor Tran and Andrew Nguyen for their work on the robust implementation of the SMARTPOOL client.

This research is supported by the Ministry of Education, Singapore under Grant No. R-252-000-560-112, and the European Research Council under the European Union’s 7th Framework Programme (FP7/2007-2013, ERC grant no. 278410). The deployment of SMARTPOOL on the main Ethereum network is supported by the Ethereum Foundation through a special development grant. All opinions expressed in this work are those of the authors.

### References

1. Satoshi Nakamoto. "Bitcoin: A Peer-to-Peer Electronic Cash System." bitcoin.org, 2009.
2. Meni Rosenfeld. "Analysis of Bitcoin Pooled Mining Reward Systems." CoRR, abs/1112.4980, 2011.
3. Arthur Gervais, Ghassan O. Karame, Vedran Capkun, and Srdjan Capkun. "Is Bitcoin a Decentralized Currency?" IEEE Security and Privacy, 12(3):54–60, 2014.
4. Joseph Bonneau, Andrew Miller, Jeremy Clark, Arvind Narayanan, Joshua A. Kroll, and Edward W. Felten. "SoK: Bitcoin and Second-Generation Cryptocurrencies." In IEEE Security and Privacy 2015, May 2015.
5. Maria Apostolaki, Aviv Zohar, and Laurent Vanbever. "Hijacking Bitcoin: Large-Scale Network Attacks on Cryptocurrencies." To appear at IEEE Security and Privacy, 2017.
6. "The Problem of Censorship." https://blog.ethereum.org/2015/06/06/the-problem-of-censorship/, June 2015.
7. Bitcoin Wiki. "Getblocktemplate Mining Protocol." https://en.bitcoin.it/wiki/Getblocktemplate, November 2015.
8. P2pool: Decentralized Bitcoin Mining Pool. http://p2pool.org/.
9. Nicolas T. Courtois and Lear Bahack. "On Subversive Miner Strategies and Block Withholding Attack in Bitcoin Digital Currency." CoRR, abs/1402.1718, 2014.
10. Ittay Eyal. "The Miner's Dilemma." In Proceedings of the 2015 IEEE Symposium on Security and Privacy, SP '15, pages 89–103, Washington, DC, USA, 2015. IEEE Computer Society.
11. Loi Luu, Ratul Saha, Inian Parameshwaran, Prateek Saxena, and Aquinas Hobor. "On Power Splitting Games in Distributed Computation: The Case of Bitcoin Pooled Mining." In IEEE 28th Computer Security Foundations Symposium, CSF 2015, Verona, Italy, 13-17 July, 2015, pages 397–411, 2015.
12. SmartPool Team. "SmartPool’s GitHub." https://github.com/smartpool.
13. Andrew Miller, Ahmed Kosba, Jonathan Katz, and Elaine Shi. "Nonoutsourceable Scratch-Off Puzzles to Discourage Bitcoin Mining Coalitions." In Proceedings of the 22Nd ACM SIGSAC Conference on Computer and Communications Security, CCS '15, pages 680–691, New York, NY, USA, 2015. ACM.
14. Cynthia Dwork and Moni Naor. "Pricing via Processing or Combatting Junk Mail." In CRYPTO, 1992.
15. Adam Back. "Hashcash - A Denial of Service Counter-Measure." Technical report, 2002.
16. Ethereum Foundation. "Ethash Proof of Work." https://github.com/ethereum/wiki/wiki/Ethash.
17. Loi Luu, Duc-Hiep Chu, Hrishi Olickel, Prateek Saxena, and Aquinas Hobor. "Making Smart Contracts Smarter." In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, 2016.

### 10. Appendix

#### 10.1 Applications

SMARTPOOL can be used to build several applications, including:

1. **Decentralized Mining Pools for Cryptocurrencies**: SMARTPOOL provides a more secure and cost-effective alternative to traditional pooled mining. Unlike P2POOL, which requires an adversary to control 51% of the pool's mining power to compromise it, SMARTPOOL requires compromising the entire Ethereum network, making it significantly more secure.

2. **New Cryptocurrency Based on SMARTPOOL**: A new cryptocurrency can be built using SMARTPOOL, ensuring fully decentralized mining while maintaining low variance in rewards for miners. This enhances the overall security of the network and protects miners from attacks such as block withholding, which are common in traditional pooled mining.

#### 10.2 Implementation

##### SMARTPOOL-based Bitcoin Pool: Subtleties

**Witness for a New Valid Block**: A valid block witness in SMARTPOOL is a block header with sufficient difficulty. To ensure that only non-orphan blocks are considered, a chain of six blocks is required as a witness. While theoretically, even a chain of six blocks could become orphaned, this is highly unlikely in practice.

**Deciding on the Coinbase Transaction of the Next Share**: The coinbase transaction must correspond to the `verClaimList` maintained by the Ethereum contract. To synchronize Bitcoin and Ethereum timestamps, a new time metric based on the number of blocks found by SMARTPOOL is introduced. This ensures that the miner constructs the correct coinbase transaction even if there is a delay in reporting new blocks.

**Other Candidates for Counter**: The timestamp field in Bitcoin has only 4 bytes, limiting the counter to \(2^{32}\) shares. SMARTPOOL can use the 40 random bytes allowed after the `OP_RETURN` opcode in a transaction output to store the share's counter, allowing for a much larger number of shares (\(2^{320}\)).

### Notations and Data Structures

- **NSize, NSample**: Number of shares included in a claim and the number of random samples SMARTPOOL will verify in each claim.
- **claimList[x]**: Stores all unverified claims submitted by the miner at address `x`.
- **verClaimList[x][y]**: Stores all verified and unpaid claims submitted by the miner at address `x` at block `y`.
- **maxCounter[x]**: Stores the maximum counter of the miner at address `x`.
- **d**: Minimum difficulty of a share.

**ShareProof Structure**:
- Header of the share `si` located at the i-th leaf in the augmented Merkle tree.
- AugMkProof, attesting that `si` is committed to the ShareAugMT.
- Coinbase transaction.
- CoinProof, attesting that the coinbase transaction is included in the TxList of `si`.
- Snapshot of `verClaimList` that the Coinbase is computed on.

**Claim Structure**:
- Number of claimed shares `NSize`.
- ShareAugMT commitment of the set of claimed shares.

### Main Executions in SMARTPOOL

- **Accept a Claim**: Accept a claim `C` with the Claim structure from a miner `x`, add it to `claimList[x]`, and update `maxCounter[x]`.
- **Verify a Claim**: Verify the proof `p` for a share `si` included in a claim `C` from miner `x`. Check if:
  - `i` is the supposed position to sample based on the intended block hash.
  - `si`'s hash is included in the claim `C` by verifying `amkpsi`.
  - `si` meets the minimum difficulty `d`.
  - `si`'s counter is greater than the last `maxCounter[x]`.
  - The coinbase address is the pool contract’s address for Ethereum, or if the Coinbase is correctly constructed with respect to the Snapshot of `verClaimList` for Bitcoin.
- **Get a New Valid Block (for Bitcoin’s pool only)**: If a new block is mined by SMARTPOOL, update `verClaimList`.
- **Request Payment (for Ethereum’s pool only)**: When a miner requests payment, send the payment proportional to their shares in `verClaimList` and update `verClaimList`.

### For Miners

- **Construct Block Template**: Use the pool contract’s address as the coinbase address for Ethereum. For Bitcoin, fetch `verClaimList` from SMARTPOOL and build the correct coinbase transaction locally.
- **Find Valid Shares**: Search for valid nonces that yield valid shares.
- **Submit a Claim**: If enough `NSize` shares are found, build an augmented Merkle tree and submit a claim `C` to SMARTPOOL.
- **Submit Proofs**: After `C` is accepted, construct and submit `NSample` proofs `pi` (i = 1,2, ..., NSample), each following the ShareProof structure, to SMARTPOOL.

### Summary

Figure 4 summarizes how the SMARTPOOL protocol works for both the pool and miners, detailing the main executions and steps involved in the process.