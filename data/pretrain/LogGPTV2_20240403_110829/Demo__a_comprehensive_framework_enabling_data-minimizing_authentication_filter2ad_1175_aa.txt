title:Demo: a comprehensive framework enabling data-minimizing authentication
author:Patrik Bichsel and
Franz-Stefan Preiss
A Comprehensive Framework Enabling
Data-Minimizing Authentication
Patrik Bichsel, Jan Camenisch and Franz-Stefan Preiss
IBM Research – Zurich, Switzerland
{pbi, jca, frp}@zurich.ibm.com
ABSTRACT
1.
INTRODUCTION
Classical authentication mechanisms have various drawbacks such
as the weak security properties they achieve, users’ privacy, ser-
vice providers’ data quality, and the necessary protection of the
collected data. Credential-based authentication is a ﬁrst step to-
wards overcoming these drawbacks. When used with anonymous
credentials, the personal data disclosed can be reduced to the min-
imum w.r.t. a business purpose while improving the assurance of
the communicated data. However, this privacy-preserving combi-
nation of technologies is not used today. One reason for this lack of
adoption is that a comprehensive framework for privacy-enhancing
credential-based authentication is not available. In this paper we
review the different components of such an authentication frame-
work and show that one remaining missing piece is a translation
between high-level authentication policies and the cryptographic
token speciﬁcation level. We close this gap by (1) proposing an ad-
equate claim language specifying which certiﬁed data a user wants
to reveal to satisfy a policy and by (2) providing translation algo-
rithms for generating the anonymous credentials (cryptographic to-
kens) providing the data to be revealed. For the latter we consider
the Identity Mixer and the U-Prove technologies, where we provide
detailed translation instructions for the former.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Access Con-
trols, Authentication, Cryptographic Controls;
K.6.5 [Management of Computing and Information Systems]:
Security and Protection—Authentication
General Terms
Languages, Security
Keywords
Access Control, Policy Languages, Privacy, Anonymous Creden-
tials, Digital Credentials.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
DIM’11, October 21, 2011, Chicago, Illinois, USA.
Copyright 2011 ACM 978-1-4503-1006-2/11/10 ...$10.00.
Authentication has become an all-embracing requirement in elec-
tronic communication. Virtually any online service, from music
streaming platforms to online bookstores, requires its users to log
in or at least provides added value for registered users. The prevail-
ing method to authenticate is by username and password, a simple
and cheap solution most users are familiar with. At account es-
tablishment time, users often have to provide an extensive set of
personal information. This erodes the users’ privacy and opens the
door for criminals misusing the data, e.g., for identity theft.
Authentication based on anonymous credentials (proposed by
Chaum [11] and implemented by Brands [5] or Camenisch and
Lysyanskaya [8]) can overcome these security issues by providing
strong authentication, minimizing the personal data required for a
transaction, and ensuring correctness of data revealed, all at the
same time. Unfortunately, this technology is not deployed today as
it is hard to understand and complex to use.
In this paper we aim at removing the barriers for using privacy-
friendly authentication. To this end, we review the different pieces
of a framework for credential-based authentication. This frame-
work consists of (1) a policy language that allows service provid-
ers to express which data about a user they require and which au-
thorities they trust in vouching for such data, (2) mechanisms to
generate a speciﬁcation about how a user wants to satisfy the pol-
icy, (3) means to generate evidence supporting this speciﬁcation,
(4) mechanisms for the service provider to verify whether the ev-
idence corresponds to the original policy, and (5) means to verify
the evidence itself.
As a concrete instance of the ﬁrst component, i.e., a policy lan-
guage, we use the credential-based authentication requirements lan-
guage (CARL) as proposed in [9]. It abstracts the cryptographic
aspects of anonymous credentials into well-known authentication
concepts. We selected this language as it provides the most com-
prehensive support for privacy-preserving features. The third and
ﬁfth components are provided by several credential technologies,
e.g., Identity Mixer (idemix), U-Prove, or X.509 that provide token
generation and veriﬁcation. However, so far no efforts have been
made to provide the components (2) and (4) and thereby to close
the gap between high-level authentication languages and low-level
technology-dependent speciﬁcation languages responsible for the
token generation and veriﬁcation algorithms.
We solve this problem by (a) proposing a high-level claim lan-
guage, (b) showing how this language can be translated into two
speciﬁc speciﬁcation languages of anonymous credentials, namely,
the idemix proof speciﬁcation and the U-Prove token speciﬁcation,
and (c) showing how the service provider can verify the different
pieces it received against the policy it had sent. For translating the
claim speciﬁcation into the idemix proof speciﬁcation, we show
13how the different cryptographic building blocks need to be orches-
trated the generate tokens realizing the different claim elements.
Finally, we discuss how to extend idemix and U-Prove so that all
concepts in the claim language (except disjunction) can be realized.
We believe that connecting the high-level languages to the spe-
ciﬁc technologies is a major step towards enabling data-minimizing
credential-based authentication and will foster deployment of the
technology.
Related Work.
While currently no other authentication solution provides the
comprehensive set of privacy features offered by our framework,
the Security Assertion Markup Language (SAML) and WS-Trust as
standards for exchanging certiﬁed information must be mentioned.
SAML enables a party to send certiﬁed attribute information to
a recipient. Such attribute information is accumulated within so-
called assertions, which are similar to what we call credentials. De-
pending on the underlying certiﬁcation technology, attributes may
be disclosed selectively, however, there is neither support for at-
tribute predicates nor for concepts such as attribute disclosure to
third parties. Therefore, without extensions, SAML is not suitable
for being used as claim language in data-minimizing authentication
scenarios. Ardagna et al. [1] give a brief intuition on how SAML
may be extended with those missing features. This extended ver-
sion of SAML is an alternative to our proposed claim language,
however, our language makes deriving claims from CARL policies
much easier as it is based on CARL. Further, our language provides
a clear grammar that can directly be used for implementing the lan-
guage. WS-Trust deﬁnes protocols to issue, renew and cancel WS-
Security tokens. However, WS-Trust is agnostic w.r.t. the type of
token. Users obtain tokens from so called security token services
(STS) and present those to web services. Web services publish their
security policy by means of the WS-Policy standard. WS-Policy,
however, merely standardizes an empty container that needs to be
ﬁlled by concrete policy languages such as CARL. Thus, while we
may use WS-Trust or WS-Policy in a data-minimizing authenti-
cation framework, they do not close the existing gap between the
different levels of languages we currently have.
2. PRELIMINARIES
Anonymous credentials are an important ingredient of privacy-
friendly authentication. Therefore we provide a brief overview
about the concepts and technologies that implement such systems,
borrowing notation from Camenisch et al. [9].
We consider a credential to be a set of attributes together with the
values of a speciﬁc entity, which we call the owner of the creden-
tial. Each credential has a type that deﬁnes the set of attributes the
credential contains. As an example, a credential of type ‘passport’
would contain the attributes name, address, and date of birth. Fur-
ther, each credential has an entity, the so-called issuer, that vouches
for the attribute values. As the certiﬁed values identify the owner,
we also denote the issuer as identity provider (IdP). The reputa-
tion of an issuer as well as the issuance process (e.g., with physical
presence or not) inﬂuence the trustworthiness of a credential.
Credentials can be issued using various technologies such as
anonymous credential systems [5, 8], X.509 [12], OpenID [15],
SAML [14], or LDAP [19]. Identity providers can vouch for users
directly or by means of certiﬁcation. That is, the issuer either com-
municates the credential directly to the relying party (i.e., service
provider) or it provides the user with a certiﬁed credential she can
then show to the relying party. We call these two approaches on-
line and certiﬁed credentials, respectively, and discuss them in the
remainder of this section.
2.1 On-Line Credentials
In the case of on-line credentials, the issuer retains the user’s at-
tribute values and when a user wants to use a credential, the relying
party and the issuer interact directly. We call such credentials ‘on-
line’ as the issuer needs to be online for each transaction of a user.
Let us illustrate how on-line credentials work on the example
of OpenID. An OpenID provider, which may be seen as identity
provider, stores the user’s attribute values, e.g., in an database. If
the user wants to release any of her attribute values, she relates the
relying party to her issuer, i.e., her OpenID provider. The latter
provides the attributes to the relying party by using a secure chan-
nel to transfer the information. Based on the trust of the relying
party in the OpenID provider as well as the security provided by the
communication channel, it derives the assurance about the commu-
nicated attribute values. Note that this information ﬂow does not
require certiﬁed information to be transferred.
2.2 Certiﬁed Credentials
Credential technologies such as X.509 or anonymous credentials
use a different approach. They add a certiﬁcation value to the cre-
dential, i.e., some form of a digital signature. This value allows
a user to prove that the issuer vouches for her credential without
involving the issuer into the communication with the relying party.
From a privacy perspective, this is an important advantage over on-
line credentials as the issuer does not get involved into any trans-
action of a user. As mentioned before, our main interest lies in cre-
dential technologies that support even more privacy-preserving fea-
tures compared to standard certiﬁcation technology such as X.509.
Anonymous credential system implementations, more speciﬁ-
cally, idemix [18] or U-Prove [16] offer such additional features.
In essence, they allow a user to obtain a signature from an issuer on
a number of attributes similar to standard certiﬁcation technology.
The difference in the issuing process being that the issuer does not
get to know the credential the user obtains nor does it learn the at-
tributes that it certiﬁes. This is possible as anonymous credentials
use a blind issuance process.
After a user has obtained a credential she can release the certiﬁed
attributes to a relying party. In contrast to other certiﬁed credentials
where all attributes need to be shown for verifying the signature,
anonymous credentials enable a user to only release a subset of the
attributes where the signature of the issuer may still be veriﬁed by
the relying party. This feature is called selective attribute disclo-
sure. Another advantage of anonymous credentials lies in the fact
that properties about attributes can be proven without revealing the
attributes themselves. For example, using an anonymous credential
containing a user’s date of birth, she can prove the certiﬁed state-
ment that she is older than 21 (provided this is indeed the case)
without revealing the exact date itself.
3. DATA-MINIMIZING AUTHENTICATION
In this section we discuss the different components of credential-
based authentication systems [9] and classify them into already ex-
isting and missing components. More concretely, we discuss the
existing ones also in this section and provide the missing compo-
nents in the remainder of this paper.
Figure 1 depicts the components of a data-minimizing authen-
tication system and the sequence of an authentication transaction.
Users own certiﬁed credentials (in [9] called “cards”) that were pre-
viously issued to them from identity providers. The ﬁgure depicts
how a user wants to use a service (e.g., a teenage chat room) hosted
by some server. For using their service, the server requires the user
to authenticate w.r.t. service-speciﬁc authentication policy. An im-
portant aspect of data-minimizing authentication is that the policy
14is formulated in terms of properties of the user’s credentials. For
example, a policy could specify that only users who are teenagers
according to a national ID card may use the service.
Figure 1: Data-Minimizing Authentication
Upon receiving an authentication request (1) for a service, a
server determines and pre-evaluates the applicable policy (1a) and
sends it to the user (2). During this pre-evaluation, references to
static content such as the current date are resolved to generate the
policy sent. Having received the policy, the user’s system deter-
mines which claims, i.e., statements about a subset of attributes of
one or more of the available credentials, can be made that fulﬁll
the given policy (2a). For example, a policy requiring the user to
be a teenager according to an ID card may be fulﬁlled by means
of a user’s national ID card or her student ID. Thereby, the state-
ment of being a teenager can be made by disclosing the exact date
of birth or by a (cryptographic) proof that the birth date lies within
the required range. Indeed, the claims that a user can make depend
on the capabilities of the underlying credential technology. The fa-
vored claims are then selected (2b) interactively by the user [3] or
automatically by a heuristics capable of ﬁnding the most privacy-
preserving one. Once the claims are deﬁned, the speciﬁc credential
technologies have to be instructed to generate the necessary creden-
tials (or tokens) that satisfy these claims. To this end, a technology-
speciﬁc proof speciﬁcation (e.g., an idemix proof speciﬁcation or
a U-Prove token speciﬁcation) must be generated. Based on this
speciﬁcation, technology-speciﬁc evidence is generated (2c). The
claim is then sent together with the accompanying evidence to the
server (3) who veriﬁes that the claim implies the policy (3a) and
checks whether the claim’s evidence is valid (3b). Depending on
the credential technology, the evidence may be generated and ver-
iﬁed with or without the credential issuer being involved. After
successful veriﬁcation, the user is authenticated (4) as someone ful-
ﬁlling the authentication requirements dictated in the policy. The
strength of anonymous credential systems lies in the fact that the
server does not learn more than what it strictly requested. For ex-
ample, the only information the server learns about the user is the
fact the she or he is indeed a teenager according to an ID card is-
sued by a trusted identity provider. Thus, the user has minimized
the information revealed about herself w.r.t. the given authentica-
tion policy. Ideally, the policy also reﬂects the minimal information
necessary for conducting the scenario at hand.
For implementing such authentication scenario, at least three
types of languages are required. First, a policy language to ex-
press the server’s authentication requirements. Second, a claim
language to make statements about (attributes of) the user’s cre-
dentials, and third, a technology-speciﬁc language that deﬁnes how
the evidence is generated. Camenisch et al. [9] provide a suitable
policy language with their credential-based authentication require-
ments language (CARL, cf. Section 3.1). The currently existing
idemix proof speciﬁcation [2] language is a technology-speciﬁc
language for generating evidence (cf. Section 3.2). The language
specifying claims made by the user, however, is missing. In this
paper, we provide this missing piece by deﬁning such language on
the basis of CARL. We also show how to extend the currently ex-
isting idemix proof speciﬁcation language to make it as expressive
as our claim language.
Given this new claim language, in Section 4 we further describe
how technology-speciﬁc claims can be generated and veriﬁed for
a given policy. In Section 5 we explain how evidence can be gen-
erated and veriﬁed for a claim formulated in the speciﬁed claim
language with a focus on anonymous credential technologies.
3.1 CARL Policy Language
We brieﬂy introduce the CARL policy language [9] as it is the
basis for the claim language that we deﬁne in Section 4.2. The lan-
guage allows for expressing authentication requirements in terms of
credentials in a technology-agnostic way. One kind of requirement
states a predicate over the credential’s attributes. The predicate is a
Boolean expression that allows for applying logic, comparison and
arithmetic operators to attributes, constants or further expressions.
Consider the following example policy for a car rental service that
illustrates the language features relevant for us:
01: own dl ::DriversLicense issued-by DeptMotorVehicles
02: own mc::MemberShipCard issued-by CarRentalCo
03: own cc::CreditCard issued-by Amex, Visa
04: own li ::LiabilityInsurance issued-by InsuranceCo
05: reveal cc.number
06: reveal li.pNo to EscrowAgent under ‘in case of damage’
07: where dl .issueDate ≤ dateSubtrDuration (today (), P 3Y ) ∧
08:
li.guaranteedAmoutUSD ≥ 30.000 ∧
(mc.status == ‘gold’ ∨ mc.status == ‘silver’) ∧
dl.name == li .name
09:
10:
11: sign ‘I agree with the general terms and conditions.’
According to this policy, authentic users (a) have their driver’s
license for at least three years, (b) have gold or silver membership
status with the car rental company, (c) reveal their American Ex-
press or Visa credit card number, (d) reveal the policy number of the
driver’s liability insurance – with a coverage of at least thirty thou-
sand dollars – to a trusted escrow agent who may disclose this num-
ber only in case of damage to the car, and (e) consent to the general