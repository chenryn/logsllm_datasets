(*dial) [index+i] = false
(*dia2) [index=i+n-1] = false
*row = (*row) [: 1en(*row) -1]
return
func generateBoard(n int, row *[]int) []string {
board := []string{}
res := **
for i := 0; i > &res)
---
## Page 145
//
//
static vector ans;
if (p >= n)
//
//
res.push_back(ans);
//
return ;
//
//
int mask =1 | m| r;
//
for （int i =0，b=l；i> 1，m1 b，(r | b)  > solveNQueens(int n)
//
//
this->n = n;
//
vector> res;
//
nQueens(o,0，0,0，res）;
//
return res;
//
//3;
52.N-Queensll
题目
The n-queens puzzle is the problem of placing n queens on an nxn chessboard such that no two
queens attack each other.
6
h
警
警
a
d
f
h
One solution to the eight queenspuzzle
---
## Page 146
azznd suaanb-u au o suonjos usip jo jaqnu au unau du yaaui ue uanig
Example:
Input: 4
output: 2
Explanation: There are two distinct solutions to the 4-queens puzzle as shown
below.
[".Q..",
// Solution 1
“...Q”,
"Q...",
"..Q."],
["..Q.",// Solution 2
"Q...",
"...Q”,
".Q. ."]
题目大意
给定一个整数n，返回n皇后不同的解决方案的数量。
解题思路
·这一题是第51题的加强版，在第51题的基础上累加记录解的个数即可。
·这一题也可以暴力打表法，时间复杂度为O（1）。
代码
package leetcode
//解法一，暴力打表法
func totalNQueens(n int) int {
res =[]int[0, 1, 0, 0, 2, 10, 4, 40,92， 352, 724}
return res[n]
//解法二，DFS回潮法
func totalNQueensl(n int) int {
col, dial, dia2, row, res := make([]bool, n), make([]bool, 2*n-l),
make([]bool,2*n-1),[]int{}，0
putQueen52(n,0,&co1,&dial，&dia2,&row,&res)
return res
//尝试在一个n皇后问题中，摇放第index行的皇后位置
---
## Page 147
( s   os   o  x 
if index == n {
res++
return
for i := 0; i >l)&bit,ans) ;
//
cur-=curPos;//for next possible place
//
row-=curPos;//reset row
//
//
//}；
---
## Page 148
53.MaximumSubarray
题目
Given an integer array nums , find the contiguous subarray (containing at least one number)
which has the largest sum and return its sum.
Example:
Input: [2,1, -3,4,-1,2,1, -5,4],
Output: 6
Explanation: [4, -1,2,1] has the largest sum = 6.
Follow up:
If you have figured out the O(n) solution, try coding another solution using the divide and
conquer approach, which is more subtle.
题目大意
给定一个整数数组nums，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最
大和。
解题思路
·这一题可以用DP求解也可以不用DP。
·题目要求输出数组中某个区间内数字之和最大的那个值。dp[i]表示[0，i]区间内各个子区间
和的最大值，状态转移方程是dp[i]=nums[i]+dp[i-1]（dp[i-1]>0)，dp[i]=
nums[i] (dp[i-1] ≤ 0)。
代码
package leetcode
//解法一DP
func maxSubArray(nums []int) int {
if len(nums) == 0 {
return 0
if len(nums) == 1 {
return nums[o]
dp, res := make([]int, len(nums)), nums[0]
[o]swnu =[o]dp
for i := l; i  0{
dp[1]  = nums [1i]  +  dp[i-1]
}else{
dp[1]  = nums[1]
res =
max(res, dp[i])
return res
//解法二模拟
func maxSubArrayl(nums[]int)int{
if 1en(nums) == 1 {
return nums[0]
maxSum, res, p := nums [o] , 0, 0
for p  maxSum {
maxSum = res
if res  m-1 11 y > n-1 11 x = 0 && visit[x][y-1] == 1 {
++punou
continue
case 3:
if x-l >= 0 && visit[x-1][y] == 1 {
++punou
continue
return res
//解法2
func spiralorder2(matrix [][]int) []int {
---
## Page 152
m:= 1en(matrix)
if m == 0 {
return ni1
n := 1en(matrix[0])
if n == 0 {
return ni1
//top、1eft、right、bottom分别是剩余区域的上、左、右、下的下标
top,left, bottom, right := 0,0,m-1, n-1
count, sum :=0，m*n
res = []int{}
//外层循环每次追历一圈
for count = 1eft && count  top && count <sum{
res = append(res, matrix[1][j])
count++
i --
//进入到下一层
top,1eft,bottom, right = top+l,1eft+l, bottom-l, right-1
return res
---
## Page 153