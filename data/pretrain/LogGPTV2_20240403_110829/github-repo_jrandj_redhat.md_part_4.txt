    * To stop a service:
        ```shell
        systemctl stop 
        ```
    * To make a service reload its configuration:
        ```shell
        systemctl reload 
        ```
    * To make a service reload its configuration or restart if it can't reload:
        ```shell
        systemctl reload-or-restart 
        ```
    * To make a service start on boot:
        ```shell
        systemctl enable 
        ```
    * To stop a service starting on boot:
        ```shell
        systemctl disable 
        ```
    * To check if a service is enabled:
        ```shell
        systemctl is-enabled 
        ```
    * To check if a service has failed:
        ```shell
        systemctl is-failed 
        ```
    * To view the configuration file for a service:
        ```shell
        systemctl cat /usr/lib/sysdtemd/system/
        ```
   * To view the dependencies for a service:
        ```shell
        systemctl list-dependencies 
        ```
   * To stop a service from being run by anyone but the system and from being started on boot:
        ```shell
        systemctl mask 
        ```
   * To remove a mask:
        ```shell
        systemctl unmask 
        ```
1. Configure systems to boot into a specific target automatically
   * To get the default target:
        ```shell
        systemctl get-default
        ```
   * To list available targets:
        ```shell
        systemctl list-units --type target --all
        ```
   * To change the default target:
        ```shell
        systemctl set-default 
        ```
    * The change will take affect after a reboot.
1. Configure time service clients
    * To print the date:
        ```shell
        date +%d%m%y-%H%M%S
        ```
    * To set the system clock as per the hardware clock:
        ```shell
        hwclock -s
        ```
    * To set the hardware clock as per the system clock:
        ```shell
        hwclock -w
        ```
    * The *timedatectl* command can also be used to view the date and time.
    * To change the date or time:
        ```shell
        timedatectl set-time 2020-03-18
        timedatectl set-time 22:43:00
        ```
    * To view a list of time zones:
        ```shell
        timedatectl list-timezones
        ```
    * To change the time zone:
        ```shell
        timedatectl set-timezone 
        ```
    * To enable NTP:
        ```shell
        timedatectl set-ntp yes
        ```
    * To start the *chronyd* service:
        ```shell
        systemctl start chronyd
        ```
1. Install and update software packages from Red Hat Network, a remote repository, or from the local file system
    * The .rpm extension is a format for files that are manipulated by the Redhat Package Manager (RPM) package management system. RHEL 8 provides tools for the installation and administration of RPM packages. A package is a group of files organised in a directory structure and metadata that makes up a software application.
    * An RPM package name follows the below format:
        ```shell
        openssl-1.0.1e-34.el7.x86_64.rpm
        # package name = openssl
        # package version = 1.0.1e
        # package release = 34
        # RHEL version = el7
        # processor architecture = x86_64
        # extension = .rpm
        ```
    * The *subscription-manager* command can be used to link a Red Hat subscription to a system.
    * The *dnf* command is the front-end to *rpm* and is the preferred tool for package management. The *yum* command has been superseded by *dnf* in RHEL 8. It requires that the system has access to a software repository. The primary benefit of *dnf* is that it automatically resolves dependencies by downloading and installing any additional required packages.
    * To list enabled and disabled repositories:
        ```shell
        dnf repolist all
        dnf repoinfo
        ```
    * To search for a package:
        ```shell
        dnf search 
        dnf list 
        ```
    * To view more information about a particular package:
        ```shell
        dnf info 
        ```
    * To install a package:
        ```shell
        dnf install 
        ```
    * To remove a package:
        ```shell
        dnf remove 
        ```
    * To find a package from a file:
        ```shell
        dnf provides 
        ```
    * To install a package locally:
        ```shell
        dnf localinstall 
        ```
    * To view available groups:
        ```shell
        dnf groups list
        ```
    * To install a group (e.g. System Tools):
        ```shell
        dnf group "System Tools"
        ```
    * To remove a group (e.g. System Tools):
        ```shell
        dnf group remove "System Tools"
        ```
    * To see the history of installations using *dnf*:
        ```shell
        dnf history list
        ```
    * To undo a particular installation (e.g. ID=22):
        ```shell
        dnf history undo 22
        ```
    * To redo a particular installation (e.g. ID=22):
        ```shell
        dnf history redo 22
        ```
    * To add a repository using the dnf config manager:
        ```shell
        dnf config-manager --add-repo 
        ```
    * To enable a repository using the dnf config manager:
        ```shell
        dnf config-manager --enablerepo 
        ```
    * To disable a repository using the dnf config manager:
        ```shell
        dnf config-manager --disablerepo 
        ```
    * To create a repository:
        ```shell
        dnf install createrepo
        mkdir 
        createrepo -- 
        yum-config-manager --add-repo file://
        ```
1. Work with package module streams
    * RHEL 8 introduced the concept of Application Streams. Components made available as Application Streams can be packaged as modules or RPM packages and are delivered through the AppStream repository in RHEL 8. Module streams represent versions of the Application Stream components. Only one module stream can be active at a particular time, but it allows multiple different versions to be available in the same dnf repository.
    * To view modules:
        ```shell
        dnf module list
        ```
    * To get information about a module: 
        ```shell
        dnf module info --profile 
        ```
    * To install a module: 
        ```shell
        dnf module install 
        ```
    * To remove a module: 
        ```shell
        dnf module remove 
        ```
    * To reset a module after removing it: 
        ```shell
        dnf module reset 
        ```
    * To be specific about the module installation:
        ```shell
        dnf module install :/
        ```
    * To check the version of a module:
        ```shell
         -v
        ```
1. Modify the system bootloader
    * The GRUB2 configuration can be edited directly on the boot screen. The configuration can also be edited using the command line.
    * To view the grub2 commands: 
        ```shell
        grub2
        ```
    * To make a change to the configuration: 
        ```shell
        vi /etc/default/grub
        # Change a value
        grub2-mkconfig -o /boot/grub2/grub.cfg
        # View changes
        vi /boot/grub2/grub.cfg
        ```
### Manage basic networking
1. Configure IPv4 and IPv6 addresses
    * The format of an IPv4 address is a set of 4 8-bit integers that gives a 32-bit IP address.  The format of an IPv6 is a set of 8 16-bit hexadecimal numbers that gives a 128-bit IP address.
    * The *nmcli* command is used to configure networking using the NetworkManager service. This command is used to create, display, edit, delete, activate, and deactivate network connections. Each network device corresponds to a Network Manager device.
    * Using nmcli with the connection option lists the available connection profiles in NetworkManager.
    * The *ip* command can also be used for network configuration. The main difference between ip and nmcli is that changes made with the ip command are not persistent.
    * To view system IP addresses:
        ```shell
        ip addr
        ```
    * To show the current connections:
        ```shell
        nmcli connection show
        ```
    * Using nmcli with the device option lists the available network devices in the system.
    * To view the current network device status and details:
        ```shell
        nmcli device status
        nmcli device show
        ```
    * To add an ethernet IPv4 connection:
        ```shell
        nmcli connection add con-name  ifname  type ethernet ip4  gw4 
        ```
    * To manually modify a connection:
        ```shell
        nmcli connection modify  ipv4.addresses 
        nmcli connection modify  ipv4.method manual
        ```
    * To delete a connection:
        ```shell
        nmcli connection delete 
        ```
    * To activate a connection:
        ```shell
        nmcli connection up 
        ```
    * To deactivate a connection:
        ```shell
        nmcli connection down 
        ```
    * To check the DNS servers that are being used:
        ```shell
        cat /etc/resolv.conf
        ```
    * To change the DNS server being used:
        ```shell
        nmcli con mod  ipv4.dns 
        systemctl restart NetworkManager.service
        ```
1. Configure hostname resolution
    * To lookup the IP address based on a host name the *host* or *nslookup* commands can be used.
    * The `/etc/hosts` file is like a local DNS. The `/etc/nsswitch.conf` file controls the order that resources are checked for resolution. 
    * To lookup the hostname:
        ```shell
        hostname -s # short
        hostname -f # fully qualified domain name
        ```
    * The hostname file is in `/etc/hostname`. To refresh any changes run the *hostnamectl* command.
1. Configure network services to start automatically at boot
    * To install a service and make it start automatically at boot:
        ```shell
        dnf install httpd
        systemctl enable httpd
        ```
    * To set a connection to be enabled on boot:
        ```shell
        nmcli connection modify eth0 connection.autoconnect yes
        ```
1. Restrict network access using firewall-cmd/firewall
	* Netfilter is a framework provided by the Linux kernel that provides functions for packet filtering. In RHEL 7 and earlier iptables was the default way of configuring Netfilter. Disadvantages of ipables were that a separate version (ip6tables) was required for ipv6, and that the user interface is not very user friendly.
    * The default firewall system in RHEL 8 is *firewalld*. Firewalld is a zone-based firewall. Each zone can be associated with one or more network interfaces, and each zone can be configured to accept or deny services and ports. The *firewall-cmd* command is the command line client for firewalld.
    * To check firewall zones:
        ```shell
        firewall-cmd --get-zones
        ```