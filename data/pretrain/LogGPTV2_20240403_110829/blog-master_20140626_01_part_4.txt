http://blog.163.com/digoal@126/blog/static/16387704020145264116819/  
5\.10 同步接口调用的操作. 不推荐关闭, 关闭可能导致异常后数据丢失. 因为某些应用程序如数据库的一些操作, 希望调用fsync后数据确实写入了非易失存储. 而关闭sync的话, 显然和应用程序的期望实际不符.   
```  
       sync=standard | always | disabled  
           Controls  the  behavior  of  synchronous  requests  (e.g. fsync, O_DSYNC).  standard is the POSIX specified  
           behavior of ensuring all synchronous requests are written to stable storage and all devices are flushed  to  
           ensure  data  is  not  cached  by device controllers (this is the default). always causes every file system  
           transaction to be written and flushed before its system call returns. This has a large performance penalty.  
           disabled disables synchronous requests. File system transactions are only committed to stable storage peri-  
           odically. This option will give the highest performance.  However, it is very dangerous  as  ZFS  would  be  
           ignoring  the  synchronous  transaction  demands  of applications such as databases or NFS.  Administrators  
           should only use this option when the risks are understood.  
```  
下面测试一下关闭sync后的性能, 虽然我们非常不建议这么做, 但是提供一下测试结果.  
```  
# zfs set sync=disabled zp1/data01  
# zfs get all|grep cache  
zp1         primarycache          all                    default  
zp1         secondarycache        all                    default  
zp1/data01  primarycache          all                    default  
zp1/data01  secondarycache        all                    default  
> pg_test_fsync -f /data01/pgdata/1  
5 seconds per test  
O_DIRECT supported on this platform for open_datasync and open_sync.  
Compare file sync methods using one 8kB write:  
(in wal_sync_method preference order, except fdatasync  
is Linux's default)  
        open_datasync                                n/a*  
        fdatasync                       109380.512 ops/sec       9 usecs/op  
        fsync                           115186.570 ops/sec       9 usecs/op  
        fsync_writethrough                            n/a  
        open_sync                                    n/a*  
* This file system and its mount options do not support direct  
I/O, e.g. ext4 in journaled mode.  
Compare file sync methods using two 8kB writes:  
(in wal_sync_method preference order, except fdatasync  
is Linux's default)  
        open_datasync                                n/a*  
        fdatasync                       60158.540 ops/sec      17 usecs/op  
        fsync                           60352.231 ops/sec      17 usecs/op  
        fsync_writethrough                            n/a  
        open_sync                                    n/a*  
* This file system and its mount options do not support direct  
I/O, e.g. ext4 in journaled mode.  
Compare open_sync with different write sizes:  
(This is designed to compare the cost of writing 16kB  
in different write open_sync sizes.)  
         1 * 16kB open_sync write                    n/a*  
         2 *  8kB open_sync writes                   n/a*  
         4 *  4kB open_sync writes                   n/a*  
         8 *  2kB open_sync writes                   n/a*  
        16 *  1kB open_sync writes                   n/a*  
Test if fsync on non-write file descriptor is honored:  
(If the times are similar, fsync() can sync data written  
on a different descriptor.)  
        write, fsync, close             75829.757 ops/sec      13 usecs/op  
        write, close, fsync             75501.094 ops/sec      13 usecs/op  
Non-Sync'ed 8kB writes:  
        write                           94328.592 ops/sec      11 usecs/op  
```  
关闭sync后, 其实和cache没有什么关系, 即使同时关闭cache性能依旧彪悍.  
```  
# zfs set primarycache=none zp1/data01  
> pg_test_fsync -f /data01/pgdata/1  
5 seconds per test  
O_DIRECT supported on this platform for open_datasync and open_sync.  
Compare file sync methods using one 8kB write:  
(in wal_sync_method preference order, except fdatasync  
is Linux's default)  
        open_datasync                                n/a*  
        fdatasync                       115321.769 ops/sec       9 usecs/op  
        fsync                           115119.262 ops/sec       9 usecs/op  
        fsync_writethrough                            n/a  
        open_sync                                    n/a*  
* This file system and its mount options do not support direct  
I/O, e.g. ext4 in journaled mode.  
Compare file sync methods using two 8kB writes:  
(in wal_sync_method preference order, except fdatasync  
is Linux's default)  
        open_datasync                                n/a*  
        fdatasync                       60296.171 ops/sec      17 usecs/op  
        fsync                           60201.468 ops/sec      17 usecs/op  
        fsync_writethrough                            n/a  
        open_sync                                    n/a*  
* This file system and its mount options do not support direct  
I/O, e.g. ext4 in journaled mode.  
Compare open_sync with different write sizes:  
(This is designed to compare the cost of writing 16kB  
in different write open_sync sizes.)  
         1 * 16kB open_sync write                    n/a*  
         2 *  8kB open_sync writes                   n/a*  
         4 *  4kB open_sync writes                   n/a*  
         8 *  2kB open_sync writes                   n/a*  
        16 *  1kB open_sync writes                   n/a*  
Test if fsync on non-write file descriptor is honored:  
(If the times are similar, fsync() can sync data written  
on a different descriptor.)  
        write, fsync, close             75542.879 ops/sec      13 usecs/op  
        write, close, fsync             75654.249 ops/sec      13 usecs/op  
Non-Sync'ed 8kB writes:  
        write                           95557.532 ops/sec      10 usecs/op  
```  
6\. zfs模块内核参数也会极大的影响性能.  
参见  
http://blog.163.com/digoal@126/blog/static/16387704020145253599111/  
## 参考  
1\. zfs source  
2\. man zpool  
3\. man zfs  
4\. man zdb  
5\. http://blog.163.com/digoal@126/blog/static/1638770402014525103556357/  
6\. http://blog.163.com/digoal@126/blog/static/1638770402014525111238683/  
7\. http://blog.163.com/digoal@126/blog/static/16387704020145253599111/  
8\. http://fixunix.com/solaris-rss/579853-choosing-stripsize-lun-recordsize-zfs-postgresql.html  
9\. https://github.com/zfsonlinux/zfs/blob/master/cmd/zpool/zpool_vdev.c#L108  
10\. http://blog.delphix.com/matt/2014/06/06/zfs-stripe-width/  
11\. http://open-zfs.org/wiki/Performance_tuning  
12\. https://pthree.org/2013/01/03/zfs-administration-part-xvii-best-practices-and-caveats/  
13\. http://www.solarisinternals.com/wiki/index.php/ZFS_Best_Practices_Guide#Memory_and_Dynamic_Reconfiguration_Recommendations  
14\. http://www.solarisinternals.com/wiki/index.php/ZFS_Evil_Tuning_Guide#Tuning_ZFS_for_Database_Performance  
15\. http://www.solarisinternals.com/wiki/index.php/ZFS_for_Databases  
16\. https://blogs.oracle.com/roch/entry/dedup_performance_considerations1  
17\. https://wiki.freebsd.org/ZFSTuningGuide  
18\. https://blogs.oracle.com/roch/entry/proper_alignment_for_extra_performance  
19\. http://blog.163.com/digoal@126/blog/static/16387704020145264116819/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")