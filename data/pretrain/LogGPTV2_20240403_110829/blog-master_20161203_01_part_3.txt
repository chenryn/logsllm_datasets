为了使查询更加清晰、连贯和专业，我将对文本进行优化，并对SQL查询进行整理。以下是优化后的版本：

### 无法输出跳跃点

#### Query 4
**目标**: 输出与左右相邻点差值大于局部落差百分比的点。

```sql
WITH wind_data AS (
  SELECT 
    id, 
    val,
    LAG(val) OVER (ORDER BY id) AS lag_val, -- 上一个值（第一条为空）
    LEAD(val) OVER (ORDER BY id) AS lead_val, -- 下一个值（最后一条为空）
    MIN(val) OVER (ORDER BY id ROWS BETWEEN 10 PRECEDING AND CURRENT ROW) AS left_min, -- 左边相邻10个点的最小值（包括当前点）
    MAX(val) OVER (ORDER BY id ROWS BETWEEN 10 PRECEDING AND CURRENT ROW) AS left_max, -- 左边相邻10个点的最大值（包括当前点）
    MIN(val) OVER (ORDER BY id ROWS BETWEEN CURRENT ROW AND 10 FOLLOWING) AS right_min, -- 右边相邻10个点的最小值（包括当前点）
    MAX(val) OVER (ORDER BY id ROWS BETWEEN CURRENT ROW AND 10 FOLLOWING) AS right_max, -- 右边相邻10个点的最大值（包括当前点）
    MIN(val) OVER (ORDER BY id ROWS BETWEEN 10 PRECEDING AND 10 FOLLOWING) AS range_min, -- 左右相邻10个点的最小值（包括当前点）
    MAX(val) OVER (ORDER BY id ROWS BETWEEN 10 PRECEDING AND 10 FOLLOWING) AS range_max, -- 左右相邻10个点的最大值（包括当前点）
    MIN(val) OVER () AS global_min, -- 全局最小值
    MAX(val) OVER () AS global_max  -- 全局最大值
  FROM wind
)
SELECT * 
FROM wind_data
WHERE 
  lag_val IS NOT NULL 
  AND lead_val IS NOT NULL 
  AND (
    ABS(lag_val - val) / (range_max - range_min + 0.00000000001) > 0.35
    OR ABS(lead_val - val) / (range_max - range_min + 0.00000000001) > 0.35
  );
```

#### Query 5
**目标**: 结合多个查询条件，找出全局谷底、全局高潮、局部低谷和局部高潮点。

**说明**: 相邻点的个数可以根据总记录数的百分比来确定。例如，对于1万条记录，可以取1%作为评判标准，即100个点。

```sql
WITH wind_data AS (
  SELECT 
    id, 
    val,
    LAG(val) OVER (ORDER BY id) AS lag_val, -- 上一个值（第一条为空）
    LEAD(val) OVER (ORDER BY id) AS lead_val, -- 下一个值（最后一条为空）
    MIN(val) OVER (ORDER BY id ROWS BETWEEN 10 PRECEDING AND CURRENT ROW) AS left_min, -- 左边相邻10个点的最小值（包括当前点）
    MAX(val) OVER (ORDER BY id ROWS BETWEEN 10 PRECEDING AND CURRENT ROW) AS left_max, -- 左边相邻10个点的最大值（包括当前点）
    MIN(val) OVER (ORDER BY id ROWS BETWEEN CURRENT ROW AND 10 FOLLOWING) AS right_min, -- 右边相邻10个点的最小值（包括当前点）
    MAX(val) OVER (ORDER BY id ROWS BETWEEN CURRENT ROW AND 10 FOLLOWING) AS right_max, -- 右边相邻10个点的最大值（包括当前点）
    MIN(val) OVER (ORDER BY id ROWS BETWEEN 10 PRECEDING AND 10 FOLLOWING) AS range_min, -- 左右相邻10个点的最小值（包括当前点）
    MAX(val) OVER (ORDER BY id ROWS BETWEEN 10 PRECEDING AND 10 FOLLOWING) AS range_max, -- 左右相邻10个点的最大值（包括当前点）
    MIN(val) OVER () AS global_min, -- 全局最小值
    MAX(val) OVER () AS global_max  -- 全局最大值
  FROM wind
)
SELECT * 
FROM wind_data
WHERE 
  -- 查询1: 找出全局谷底
  (
    (left_max - val > (global_max - global_min) * 0.5 AND val = left_min)
    AND (right_max - val > (global_max - global_min) * 0.5 AND val = right_min)
  )
  OR
  -- 查询2: 找出全局高潮
  (
    (val - left_min > (global_max - global_min) * 0.5 AND val = left_max)
    AND (val - right_min > (global_max - global_min) * 0.5 AND val = right_max)
  )
  OR
  -- 查询3: 找出越过低水位后的局部低谷
  (
    (left_max - val > (range_max - range_min) * 0.5 AND val = left_min)
    AND (right_max - val > (range_max - range_min) * 0.5 AND val = right_min)
    AND (val - global_min) / (global_max - global_min + 0.0000001) < 0.5
  )
  OR
  -- 查询4: 找出越过高水位后的局部高潮
  (
    (val - left_min > (range_max - range_min) * 0.5 AND val = left_max)
    AND (val - right_min > (range_max - range_min) * 0.5 AND val = right_max)
    AND (global_max - val) / (global_max - global_min + 0.0000001) < 0.5
  )
  OR
  -- 查询5: 找出跳跃点
  (
    lag_val IS NOT NULL 
    AND lead_val IS NOT NULL 
    AND (
      ABS(lag_val - val) / (range_max - range_min + 0.00000000001) > 0.35
      OR ABS(lead_val - val) / (range_max - range_min + 0.00000000001) > 0.35
    )
  );
```

通过这种方式，查询变得更加清晰和易于理解。每个部分都有明确的注释和逻辑结构，便于维护和扩展。