    ...
    4139         for (i = 0; i tp_version) {
    4230                 case TPACKET_V3:
    ...
    4234                         if (!tx_ring)
    4235                                 init_prb_bdqc(po, rb, pg_vec, req_u);
    4236                         break;
    4237                 default:
    4238                         break;
    4239                 }
init_prb_bdqc()函数会将环形缓冲区参数拷贝到环形缓冲区结构体中的prb_bdqc字段，在这些参数的基础上计算其他一些参数值，设置停用内存块的计时器，然后调用prb_open_block()函数初始化第一个内存块：
    604 static void init_prb_bdqc(struct packet_sock *po,
    605                         struct packet_ring_buffer *rb,
    606                         struct pgv *pg_vec,
    607                         union tpacket_req_u *req_u)
    608 {
    609         struct tpacket_kbdq_core *p1 = GET_PBDQC_FROM_RB(rb);
    610         struct tpacket_block_desc *pbd;
    ...
    616         pbd = (struct tpacket_block_desc *)pg_vec[0].buffer;
    617         p1->pkblk_start = pg_vec[0].buffer;
    618         p1->kblk_size = req_u->req3.tp_block_size;
    ...
    630         p1->blk_sizeof_priv = req_u->req3.tp_sizeof_priv;
    631 
    632         p1->max_frame_len = p1->kblk_size - BLK_PLUS_PRIV(p1->blk_sizeof_priv);
    633         prb_init_ft_ops(p1, req_u);
    634         prb_setup_retire_blk_timer(po);
    635         prb_open_block(p1, pbd);
    636 }
prb_open_block()函数做了一些事情，比如它会设置tpacket_kbdq_core结构体中的nxt_offset字段，将其指向紧挨着每个内存块私有区域的那个地址。
    841 static void prb_open_block(struct tpacket_kbdq_core *pkc1,
    842         struct tpacket_block_desc *pbd1)
    843 {
    ...
    862         pkc1->pkblk_start = (char *)pbd1;
    863         pkc1->nxt_offset = pkc1->pkblk_start + BLK_PLUS_PRIV(pkc1->blk_sizeof_priv);
    ...
    876 }
**4.3 数据包接收**
每当内核收到一个新的数据包时，内核应该会把它保存到环形缓冲区中。内核所使用的关键函数为__packet_lookup_frame_in_block()，这个函数的主要工作为：
1、检查当前活跃的内存块是否有充足的空间存放数据包；
2、如果空间足够，保存数据包到当前的内存块，然后返回；
3、如果空间不够，就调度下一个内存块，将数据包保存到下一个内存块。
    1041 static void *__packet_lookup_frame_in_block(struct packet_sock *po,
    1042                                             struct sk_buff *skb,
    1043                                                 int status,
    1044                                             unsigned int len
    1045                                             )
    1046 {
    1047         struct tpacket_kbdq_core *pkc;
    1048         struct tpacket_block_desc *pbd;
    1049         char *curr, *end;
    1050 
    1051         pkc = GET_PBDQC_FROM_RB(&po->rx_ring);
    1052         pbd = GET_CURR_PBLOCK_DESC_FROM_CORE(pkc);
    ...
    1075         curr = pkc->nxt_offset;
    1076         pkc->skb = skb;
    1077         end = (char *)pbd + pkc->kblk_size;
    1078 
    1079         /* first try the current block */
    1080         if (curr+TOTAL_PKT_LEN_INCL_ALIGN(len) tp_version >= TPACKET_V3 &&
    4208                     (int)(req->tp_block_size -    4209                           BLK_PLUS_PRIV(req_u->req3.tp_sizeof_priv)) req3.tp_sizeof_priv的高位字节，那么将这个赋值表达式转换为整数（int）则会导致一个非常大的正整数值（而不是负值）。如下所示：
    A = req->tp_block_size = 4096 = 0x1000
    B = req_u->req3.tp_sizeof_priv = (1  0
之后，在init_prb_bdqc()函数中，当req_u->req3.tp_sizeof_priv被复制到p1->blk_sizeof_priv时（参考前文提到的代码片段），它会被分割成两个低位字节，而后者的类型是unsigned
short。因此我们可以利用这个bug，将tpacket_kbdq_core结构体中的blk_sizeof_priv设置为任意值，以绕过所有的完整性检查过程。
**5.2 漏洞后果**
如果我们遍历net/packet/af_packet.c的源码，搜索blk_sizeof_priv的用法，我们会发现源码中有两处使用了这个函数。
第一个调用位于init_prb_bdqc()函数中，此时blk_sizeof_priv刚被赋值，用来设置max_frame_len变量的值。p1->max_frame_len的值代表可以保存到内存块中的某个帧大小的最大值。由于我们可以控制p1->blk_sizeof_priv，我们可以使BLK_PLUS_PRIV(p1->blk_sizeof_priv)的值大于p1->kblk_size的值。这样会导致p1->max_frame_len取的一个非常大的值，比内存块的大小更大。这样当某个帧被拷贝到内存块中时，我们就可以绕过对它的大小检测过程，最终导致内核堆越界写入问题。
问题还不仅限于此，blk_sizeof_priv的另一个调用位于prb_open_block()函数中，这个函数用来初始化一个内存块（参考上文的代码片段）。在这个函数中，当内核收到新的数据包时，数据包的写入地址存放在pkc1->nxt_offset中。内核不想覆盖内存块头部以及内存块对应的私有数据，因此它会将这个地址指向紧挨着头部和私有数据之后的那个地址。由于我们可以控制blk_sizeof_priv，因此我们也可以控制nxt_offset的最低的两个字节。这样我们就能够控制越界写入的偏移量。
总而言之，这个bug会导致内核堆越界写入，我们能控制的大小和偏移量最多可达64k字节。
**六、漏洞利用**
现在让我们研究下如何利用这个漏洞。我的目标系统是x86-64架构的Ubuntu
16.04.2，内核版本为4.8.0-41-generic，内核启用了KASLR、SMEP以及SMAP选项。Ubuntu内核为非特权用户启用了用户命名空间（CONFIG_USER_NS=y，且没有对空间的使用做出限制），因此非特权用户可以利用这个漏洞获取root权限。以下所有的漏洞利用步骤都在用户命名空间中完成。
Linux内核支持某些增强功能，会导致漏洞利用更加困难。KASLR（Kernel Address Space Layout