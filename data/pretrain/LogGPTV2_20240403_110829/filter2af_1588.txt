# 【技术分享】SnatchLoader恶意软件更新分析

## 译文声明
本文为翻译文章，原文来源：arbornetworks.com。具体内容及含义以原文为准。
- 译者：[blueSky](http://bobao.360.cn/member/contribute?uid=1233662000)
- 预估稿费：200RMB
- 投稿方式：发送邮件至linwei#360.cn，或登录网页版在线投稿

## 摘要
SnatchLoader是一种专门用于分发（或加载）恶意软件到受感染计算机系统的“downloader”型恶意软件。我们在2017年1月首次发现其网络攻击活动，该活动持续了几个月后逐渐消失。最近，研究人员再次发现了该恶意软件的新一轮网络攻击，并捕获到了其更新版本。此次攻击中，SnatchLoader被用于加载Ramnit银行特洛伊木马。此外，该恶意软件还具备地理IP阻止功能，仅允许特定地区的计算机被感染。目前，我们已确认英国和意大利是该恶意软件的主要目标地区，而美国、法国和香港尚未受到攻击。

![](链接: SnatchLoader命令和控制面板的登录页面)

## 介绍
几个月前，Twitter上出现了一条关于垃圾邮件广告的推文，提及了一个未知的“downloader”恶意软件。根据我们的分析，这个“downloader”实际上是SnatchLoader恶意软件的更新版本。KernelMode.info论坛在2017年1月期间曾简要讨论过SnatchLoader。尽管没有进行详细的代码比较，但SnatchLoader和H1N1 Loader似乎有一些相似之处。然而，目前还没有看到更多关于SnatchLoader的进一步讨论。因此，本文将对SnatchLoader最新版本的更新进行详细分析。

## 样本
Twitter中引用的示例可以在[VirusTotal](https://www.virustotal.com/en/file/41e698c7f1febdb53b9b7eae0f48fd93949602d0631d6f6b7dc0768958f7107a/analysis/)上找到。然而，我们的大部分静态分析工作是在一个更新版本的核心DLL上执行的，该DLL的最新编译日期为2017-10-04，并于2017年10月11日首次上传至[VirusTotal](https://www.virustotal.com/en/file/075420f10a1b4fc7302c5e95e578e8397b93019acc0f7f018dc7453a9266e17e/analysis/)。

## Windows API调用
通过分析发现，该恶意软件在运行时通过函数名哈希的方式调用Windows API。散列算法结合了ROL和XOR运算，在[GitHub](https://github.com/tildedennis/malware/blob/master/snatch_loader/api_hash.py)上可以找到该散列算法的Python实现。以下是一些API函数名称及其对应的哈希值：

- **RtlZeroMemory** – > 0x6b6c652b
- **CreateMutexW** – > 0x43725043
- **InternetConnectA** – > 0x1d0c0b3e

## 静态配置
静态配置信息加密存储在DLL的PE Section中。我们已经观察到两个Section名称：.idata 和 .xdata。Section的第一个DWORD（如图中的0x99a8）用作密钥生成函数的种子。此功能的Python实现在[GitHub](链接)上可以找到。使用RC4算法和生成的密钥可以解密剩余的数据。解密后的配置分为两个块：

1. 第一个块是XML结构的配置数据，如下所示（为了可读性添加了空格）：
   - SRV: 命令和控制（C2）服务器的URL
   - TIME: 回连的轮询间隔（单位为分钟）
   - NAME: 活动标识符（例如02.10可能表示10月2日）
   - KEY: 用于加密回连通信的密钥

2. 第二个配置块是一个RSA证书，用于对下载的数据进行签名检查。

## 命令与控制
到目前为止，所有观察到的C2 URL都是HTTPS的。通过使用调试器，我们可以使用HTTP与服务器通信并以明文方式查看回连的网络流量。恶意软件对POST数据进行了四次加密操作：
1. RC4加密，KEY来源于配置文件
2. Base64编码
3. 字符替换
4. 使用“\r\n”分隔符将数据拆分成64字节的数据块

字符替换规则如下：
- `+` 替换为 `-`
- `/` 替换为 `_`
- `.` 替换为 `=`

响应数据也经过加密处理，但不是四次加密。通信分为四种请求类型：
1. 获取动态配置
2. 发送系统信息
3. 命令轮询
4. 发送命令结果

### 获取动态配置请求
以下是“获取动态配置”请求的纯文本请求数据：
```
req=0&guid=FCD08AEE3C0E9409&name=02.10&trash=ulbncmamlxwjakbnbmaklvvhamathrgsfrpbsfrfqeqpatisgsfrqbtfrgqfrpbuithtisrctisgsfrqbujtiuistduith
```
各字段的含义：
- **req**: 请求类型
- **guid**: bot ID
- **name**: 来自静态配置的NAME
- **trash**: 随机长度的随机字符

响应如下：
```
SUCCESS|https://lookmans[.]eu/css/order.php|https://vertasikupper[.]eu/css/order.php12002.10547bnw47drtsb78d3|
```
响应分为两个字段：状态字段和数据部分。这里的状态字段是“SUCCESS”，数据部分被封装在“块”中，称为DYNAMIC配置。

### 发送系统信息请求
第二个回连请求发送一堆系统信息，如下所示：
```
req=1&guid=FCD08AEE3C0E9409&name=02.10&win=9&x64=1&adm=1&det=0&def=0&nat=1&usrn=SYSTEM&cmpn=JOHN-PC&uagn=Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)&sftl=AddressBook|Connection Manager|DirectDrawEx|Fontcore|IE40|IE4Data|IE5BAKEX|IEData|MobileOptionPack|SchedulingAgent|WIC|&prcl=[System Process]rnSystemrnsmss.exerncsrss.exernwininit.exerncsrss.exernwinlogon.exernservices.exernlsass.exernlsm.exernsvchost.exernVBoxService.exernsvchost.exernsvchost.exernsvchost.exernsvchost.exernaudiodg.exernsvchost.exernsvchost.exernspoolsv.exernsvchost.exerntaskhost.exernsvchost.exerndwm.exernexplorer.exernVBoxTray.exernSearchIndexer.exernwmpnetwk.exernsvchost.exernsppsvc.exernsvchost.exernmscorsvw.exernmscorsvw.exernSearchProtocolHost.exernmsiexec.exernsvchost.exernTrustedInstaller.exerntaskhost.exernSearchFilterHost.exernmsiexec.exerndllhost.exerndllhost.exernmsiexec.exernsvchost.exern&trash=ilnyyiittddnoyyiblambllvwgblalakjvufynamblcmambllwugxlwkwjvurn
```
各字段的含义：
- **req**: 请求类型
- **guid**: bot ID
- **name**: 来自配置的NAME
- **win**: Windows版本
- **x64**: 是否为64位架构
- **adm**: 是否为管理员
- **det**: 与反分析相关
- **def**: 检测反分析过程名称
- **nat**: 具有RFC1918 IP地址
- **usrn**: 用户名
- **cmpn**: 计算机名称
- **uagn**: 用户代理
- **sftl**: 从注册表中的Uninstall键值中列举软件
- **prcl**: 进程列表
- **trash**: 随机长度的随机字符

响应如下：
```
SUCCESS|
```

### 命令轮询请求
除了请求号是2之外，命令轮询请求类似于“获取动态配置”请求。一个示例响应如下：
```
SUCCESS |  20 | 1 | 2 || MZ … X00 X00  |
```
响应包含两个字段：状态字段和数据部分。数据部分可以是零个或多个TASK块，每个块包含以下字段：
- **任务ID**
- 命令类型
- 命令参数1（例如文件类型）
- 命令参数2（例如哈希值）
- 命令数据（例如可执行文件或URL）

SnatchLoader的主要功能是下载并加载其他恶意软件系列，因此大多数命令类型和参数都支持以各种方式执行。在这个例子中，命令是首先提取嵌入的可执行文件然后执行提取到的可执行文件。其他一些支持的命令包括：
- 插件功能
- 更新配置
- 更新程序
- 发送命令结果

最后一个回连类型用于发送命令的结果：
```
req=3&guid=FCD08AEE3C0E9409&name=02.10&results=&trash=pffebxmawlawigdawkifcymbxmawlgebxlawkifcymbxmhebymbxlawkifcy
```
除了请求号是3之外，该请求类似于“命令轮询”的请求，并且添加了一个附加参数（results）。对于此请求，C2没有任何响应内容。

## 地理阻止和当前有效载荷
我们发现C2服务器的一个有趣特征是基于源IP地址执行某种地理阻塞操作。当我们尝试通过美国、法国或香港的TOR或VPN节点与C2服务器互动时，服务器会响应“404 Not Found”错误。但是，如果我们使用英国和意大利的VPN节点，C2服务器则会对请求进行回应。地理阻挡并不是一个新的特征，但在这种情况下并不常见。

截至撰写本文时，SnatchLoader僵尸网络正在分发Ramnit恶意软件（一种银行恶意软件），该恶意软件的编译日期为2017年10月13日。该样本可在[VirusTotal](https://www.virustotal.com/en/file/789c129a7d5815d81e324a065a8a50091b25f6e9d9f24d4a34cd2f0e2abdaa8d/analysis/)上获得。

## 结论
在这篇文章中，我们对SnatchLoader下载器恶意软件进行了研究和分析。该恶意软件最早可追溯到2017年1月，并在上周发现了其更新版本。目前，该恶意软件通过垃圾邮件广告进行传播，并利用地理位置封锁功能对某些特定地区发起网络攻击。截至撰写本文时，SnatchLoader正在将Ramnit恶意软件在英国和意大利这两个国家内进行传播。