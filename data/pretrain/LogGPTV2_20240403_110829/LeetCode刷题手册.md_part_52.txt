题目大意
 Example 2: 
Example 1: 
The order of output does not matter.
larger than 20,100. 
Strings consists of lowercase English letters only and the length of both strings s and p will not be
[0,1, 2]
S: "abab" p: "ab"
Input: 
The substring with start index = 6 is "bac", which is an anagram of "abc".
The substring with start index = O is "cba", which is an anagram of "abc".
Explanation:
[0,6]
Output:
S: "cbaebabacd" p: "abc""
The
The
The
Explanation:
output:
Input:
.qe. jo weubeue ue s! yotum 'eq. S! T = xapul lueis yaim buiuasqns a
---
## Page 520
代码
func findAnagrams(s string, p string) []int 
package leetcode
return result
for i := O; i = l {
freq[p[i]-'a']++ 
if right-left :
freq[s[right]-'a']--
return result
if count == 0 {
right++
if freq[s[left]-'a'] >= O {
result = append(result, left)
left++
freq[s[left]-'a']++
 count++
---
## Page 521
解题思路
n，找出可形成完整阶梯行的总行数。n是一个非负整数，并且在32位有符号整型的范围内。
你总共有 n 枚硬币，你需要将它们摆成一个阶梯形状，第k行就必须正好有k枚硬币。给定一个数字
题目大意
Example 2:
Example 1: 
n is a non-negative integer and fits within the range of a 32-bit signed integer.
have exactly k coins.
You have a total of n coins that you want to form in a staircase shape, where every k-th row must
题目
441. Arranging Coins
·这一题有 2 种解法，第一种解法就是解方程求出×，(1+x)×/2= n，即×=
·n个硬币，按照递增的方式排列搭楼梯，第一层一个，第二层二个，...第n层需要n个硬币。问
Because the 4th row is incomplete, we return 3.
αα
αα
αα
The coins can form the following rows:
n=8
Because the 3rd row is incomplete, we return 2.
αα
The coins can form the following rows:
n=5
floor(sqrt(2*n+1/4）－1/2)，第二种解法是模拟。
硬币 n 能够搭建到第几层？
---
## Page 522
题目大意
Example:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.
Follow up:
You may assume the two numbers do not contain any leading zero, except the number O itself.
and return it as a linked list.
significant digit comes first and each of their nodes contain a single digit. Add the two numbers 
You are given two non-empty linked lists representing two non-negative integers. The most 
题目
445. Add Two Numbers I
代码
（= k {
k:=1
X := math.Sqrt(2*float64(n)+0.25) - 0.5
return int(x)
k++ 
n -= k 
return 0
---
## Page 523
代码
位，有进位再往前进一位。加法的过程可以用到递归。
思路也不难，加法只用把短的链表依次加到长的链表上面来就可以了，最终判断一下最高位有没有进
解题思路
来的。
一直进位即可。这道题目中强制要求不能把链表逆序。2个数字是从高位排到低位的，这样进位是倒着
这道题是第2题的变种题，第2题中的2个数是从个位逆序排到高位，这样相加只用从头交到尾，进位
func addNode(l1 *ListNode, l2 *ListNode, offset int) *ListNode {
func addTwoNumbers445(l1 *ListNode, 12 *ListNode) *ListNode {
package leetcode
if l1 == nil {
if newHeader.Next.val > 9 { 
if 12 == nil {
if ll == nil { 
 type ListNode struct { 
var （ 
return newHeader.Next 
if l1Length  9 {
} else { 
if offset == O { 
res = &ListNode{val: l1.val + l2.val, Next: nil}
cur = cur.Next
count++ 
node.val = node.val % 10 
res.val++ 
node = addNode(l1.Next, 12, offset-1)
res = &ListNode{val: l1.Val, Next: nil}
node = addNode(l1.Next, 12.Next, 0) 
---
## Page 525
代码
的结果累积起来即可。
里面任取2 个点就是解，所以利用排列组合，C n2 就可以得到这个距离的结果，最后把这些排列组合
最后求结果的时候，遍历 map，把里面距离大于2的 key 都拿出来，value 对应的是个数，在这些个数
后一步不需要开根号，保留平方差即可。
了多少次。求距离一般都需要开根号，但是key 如果为浮点数就会有一些误差，所以计算距离的时候最
首先依次求出两两点之间的距离，然后把这些距离记录在 map 中，key 是距离，value 是这个距离出现
这道题考察的是哈希表的问题。
解题思路
种？注意(ij,k)和 (ji,k)是不同的解，即元素的顺序是有关系的。
在一个 Point 的数组中求出(ij,k)三元组，要求j和i的距离等于k和i的距离。这样的三元组有多少
题目大意
func numberofBoomerangs(points [][]int) int{
package leetcode
The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]
Explanation: 
output:
[[0,0],[1,0],[2,0]]
Input:
return res
for i := O;i 
if nums[v-1] > 0 { 
if [2,3,3] => [3,4,3] => [4,4,4]
Only three moves are needed (remember each move increments two elements):
Explanation:
Output:
[1,2,3]
Input:
return sum - min*7
sum, min, l := 0, math.MaxInt32, len(nums)
即等于让所有元素相对差异减少到最小的那个数。想到这里，此题就可以优雅的解出来了。
那个元素和其他 n-1个元素相对差异就缩小了。所以这道题让所有元素都变为相等的最少步数,
同，意思让所有元素的差异变为 0。每次移动的过程中，都有 n-1 个元素+1，那么没有+1 的
if min > v {
sum += v 
min = V
---
## Page 531
代码
过最后在 2 个 map 中查找结果也是 O(n^2)的时间复杂度。
出和为 0 的组合。这样时间复杂度是 O(n^2)。当然也可以讲剩下的 2 个数组的组合也存入 map 中，不
解题思路
给出 4 个数组，
题目大意
Example 1: 
are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.
To make problem a bit easier, allA, B, C, D have same length of N where O ≤N ≤500. Alintegers
A[i] + B[j] + C[k] + D[1] is zero.
Given fourlists A, B, C, D of integer values, compute how many tuples i,j, k,I)there are such that
题思路也类似，先可以将 2 个数组中的组合都存入 map 中。之后将剩下的 2 个数组进行 for 循环，找
这道题的数据量不大，〇 A[1] + B[1] + C[0] + D[0] = 2 +（-1] +（-1] + 0 = 0 
1. （0， 0，0，1) -> A[0] + B[0] + C[0] + D[1] = 1 +（-2) +（-1) + 2 = 0
output:
D=[0,2]
The two tuples are:
Explanation: 
2
n
A = [ 1, 2]
Input:
m := make(map[int]int, len(A)*len(B))
 for _
++[q+e]u 
0= + + +““
---
## Page 532
 Example 2:
Example 1: 
cookie to one child.
auo ueu aow uisse ouuen nos 'anisod semie s! loey paaia aun awnsse Kew nor:anon
maximize the number of your content children and output the maximum number.
 s! leo inos 'auon aa lm ! puo aue pue '! pluo aue on ayoon aun uaisse uee am 'i =<