return char
if rev:
return chars[（chars.index(char)-chars.index(key))% len(chars)]
else
return chars[(chars.index(char)+ chars.index(key)) % len(chars)]
def encrypt(message,key):
encrypted =b64encode(message.encode(ascir).decode(asci)
def decrypt(encrypted，key):
encrypted)])
returnb64decode(encrypted.encode(ascir).decode('asci)
def generate_random_key（length=5):
if len(sys.argv) == 4 and sys.argv[1] =='encrypt':
f=open(sys.argv[3])
plain=f.read()
f.close()
key =generate_random_key（random.randint(5,14))
print(encrypt(plain,key))
---
## Page 775
CTF特训营：技术详解、解题方法与
22.2 VIGENERE
775/1144
f= open(sys.argv[2],w)
f.write(key)
f.close()
elif len(sys.argv) ==4 and sys.argv[1] =='decrypt
f=open(sys.argv[3])
encrypted=f.read()
f.dlose()
f=open(sys.argv[2])
key = f.read()
f.close()
print(decrypt(encrypted,key),end=“)
else:
print("Usage: python %s encryptldecrypt (key-file) (input-file) % sys.argv[0])
分析程序得知，程序进行了两次变化，一次base64变化，一次
维吉尼亚加密。
这就产生一件麻烦的事情了，因为是对base64的内容进行维吉
尼亚加密，所以词频统计不那么有用了。面对这种情况，首先我们要
结合之前的介绍，思考base64的工作方式（如图22-1所示）。
A
S
T
65
83
84
01000001
01010011
01010100
010000010101001101010100
16
21
13
20
Q
V
N
U
---
## Page 776
CTF特训营：技术详解、解题方法与
22.2 VIGENERE
776/1144
图22-1base64示意图
如图22-1所示，base64在工作的时候，将三个字符变成了四个字
符。也就是说，每个编码前的学符对应看1~2个编码后的学符。编
码后的字符被维吉尼亚加密了，我们不知道密钥是什么，甚至不知道
密钥的长度。但是有这样一句话：
encrypted =b64encode(message.encode(asci).decode(ascil)
这句话限制了明文的取值范围是0～127，也就是说所有明文的
最高bit都是0。
下面开始进行破解工作，首先我们需要知道的是密钥的长度。这
里提供了一个好用的猜解密钥长度的方法，即求解3个间隔的最大公
约数。因为如果是三个出现的字母相同时，很大概率上是同一密文对
应相同位置的密钥的情况，那么此时这两个相同的三个间隔就是密钥
长度的整数倍。所以如果有多组的话，它们的最大公约数就是密钥的
长度。
首先来看看哪些3字符出现了2次及以上次数，打印出它们的间
隔：
---
## Page 777
CTF特训营：技术详解、解题方法与
22.2VIGENERE
777/1144
a="a7TFeCShtf94+t5quSA5ZBn4+3tqLTl0EvoMsNxeeCm50Xoet+
1fvy821r6Fe4fpeAw1ZB+as3Tphe8xZXQ/
s3tbJy8BDzX4vN5svYqlZ96rt35dKuz0DfCPf4nfKe300fM9utiauTe5tgs5utLpLTh0Fz
Yx0O1sJYKgJvul0OfiuTI00BCks+aaJZm8Kwb4u+LtLCqbZ96lv3bieCahtegx+
7nzqyO6YCb4b9LovCELZ9Pe0L5rLSaBDzXaftxseAw1JzCF0MGjeCacKb69u9TlgC
udZT6Os3ojhcWxD914vNHfeCuaJvH4s4aarBKIGdsT8G4UKZhfJB+
yOLbjqCOnZT6baF1WiZeNtfsNtuoo+c=="
chars='
abcdefghijklmnopqrstuwwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/
i=0
slist=
=wnus
sjg=
while i=2:
print slist[j],sjg[]
结果如下：
TIO 144
eAw192
Aw1192
BDz156
DzX156
4vN 204
Z9696
eCa60
ZT660
---
## Page 778
CTF特训营：技术详解、解题方法与
22.2VIGENERE
778/1144
可以看到满足条件的字符还是不少的，下面就来计算这些数字的
最大公约数：
def god(a, b):
ifa<b:
a,b=b,a
while b!=0:
temp=a%b
a=b
b=temp
returna
ans=[144,192,192,156,156,204,96,60,60]
ff=144
for i in ans:
print “gcd",ff,i
ff=gcd(ff,i)
print ff
结果如下：
gcd 144144
gcd 144192
gcd48192
gcd48156
gcd12156
gcd12204
gcd1296
gcd1260
gcd1260
12
至此我们得到了维吉尼亚密码的密钥长度为12。
---
## Page 779
CTF特训营：技术详解、解题方法与
22.2VIGENERE
779/1144
下面考虑在分析中提到的明文的每个字符的最高bi都是0的问
题。我们来看一张图（图22-2）。
123456789101112123456789101112
图22-2bit分析示意图
图22-2中有两组加密，我们现在需要定位到所有明文的最高bit对
应到密文中的位置。比如，第一个明文，其最高bit就在vinegere加密
之后的密文的第一个学节里；第二个明文，在密文的第二个学节里
第三个明文在密文的第三个学节里；第四个明文在密文的第五个学节
里；依次类推，以9个明文为一组，也就是12个密文为一组进行循环
12学节的密钥能够控制9个明文中的最高bit位，也就是说每个被选中
的密钥能够控制所有分组的对应字符的最高bit位
因为最高bit位需要为0，所以我们可以通过枚举密钥的单个字符
观察base64解密之后明文所有对应位置的最高bit位是否为0来确定这
个密钥的正确性，代码如下：
frombase64importb64encode，b64decode
a="a7TFeCShtf94+t5quSA5ZBn4+3tqLTi0EvoMsNxeeCm50Xoet+
---
## Page 780
CTF特训营：技术详解、解题方法与
22.2 VIGENERE
780/1144
1fvy821r6Fe4fpeAw1ZB+as3Tphe8xZxQ
s3tbJy8BDzX4vN5svYqlZ96rt35dKuz0DfCPf4nfKe300fM9utiauTe5tgs5utLpLTh0Fz
Yx0O1sJYKgJvul0OfiuTI00BCks+aaJZm8Kwb4u+LtLCqbZ96lv3bieCahtegx+
7nzqyO6YCb4b9LovCELZ9Pe0L5rLSaBDzXaftxseAw1JzCF0MGjeCacKb69u9TlgC
udZT6Os3ojhcWxD914vNHfeCuaJvH4s4aarBKIGdsT8G4UKZhfJB+
yOLbjqCOnZT6baF1WiZeNtfsNtuoo+c=="
chars='
def shift(char,key,rev = False):
if not char in chars:
returnchar
if rev:
return chars[(chars.index(char) - chars.index(key)) % len(chars)]
else:
return chars[(chars.index(char)+ chars.index(key)) % len(chars)]
def decrypt(encrypted，key):
encrypted)1)
return b64decode(encrypted)
def check(key,loc):
s=decrypt(a,key)
i=0
calc=0
whilei<270:
if ord(s[i+loc])<128:
calc+=1
i+=9
print calc,key
foriin chars:
check("shAx18HxYL"+i+"1",8)
结果如下：
11shAxl8HxYLa1
14 shAxl8HxYLb1
18shAxl8HxYLc1
15shAxl8HxYLd1
12shAxl8HxYLe1
15shAxl8HxYLf1
---
## Page 781
CTF特训营：技术详解、解题方法与
22.2 VIGENERE
781/1144
18shAx18HxYLg1
20 shAx18HxYLh1
17shAxl8HxYLi1
10 shAxl8HxYLj1
14shAxl8HxYLk1
23shAx18HxYLI1
18shAxl8HxYLm1
7shAxl8HxYLn1
13shAxl8HxYLo1
22shAxl8HxYLp1
15shAxl8HxYLq1
8shAxl8HxYLr1
15shAxl8HxYLs1
20 shAxl8HxYLt1
13shAxl8HxYLu1
9shAxl8HxYLv1
16shAxl8HxYLw1
21shAxl8HxYLx1
14 shAxl8HxYLy1
9 shAxl8HxYLz1
17shAxl8HxYLA1
24shAxl8HxYLB1
15shAxl8HxYLC1
3shAxI8HxYLD1
12 shAxl8HxYLE1
30 shAxl8HxYLF1
21shAxl8HxYLG1
1shAxI8HxYLH1
9shAxI8HxYLI1
28 shAxl8HxYLJ1
21shAx8HxYLK1
2 shAxl8HxYLL1
9shAxl8HxYLM1
27shAxl8HxYLN1
20 shAxl8HxYLO1
6shAxI8HxYLP1
12shAxl8HxYLQ1
22shAxl8HxYLR1
17shAxl8HxYLS1
8shAxI8HxYLT1
14shAxl8HxYLU1
23shAx18HxYLV1
16shAxl8HxYLW1
7 shAxl8HxYLX1
---
## Page 782
CTF特训营：技术详解、解题方法与
22.2 VIGENERE
782/1144
12shAxl8HxYLY1
21 shAxl8HxYLZ1
18shAxl8HxYL01
9 shAxl8HxYL11
12shAxl8HxYL21
22shAxl8HxYL31
19shAxl8HxYL41
8shAxI8HxYL51
11shAxl8HxYL61
16 shAxl8HxYL71
13shAxl8HxYL81
14shAxl8HxYL91
18 shAxl8HxYL+1
16 shAxl8HxYL/1
如上述代码所示，如果在某个位置的字符能够满足所有的30组
的最高bi都是0，那么密钥这个位置的字符就是可以确定的。通过程
序测试，可以得知利用该方法确定的密钥组成为：
shA未知I8H未知XorYL
F
未知
接下来就简单了，爆破未知位置即可，代码如下：
frombase64importb64encode,b64decode
a="a7TFeCShtf94+t5quSA5ZBn4+3tqLTI0EvoMsNxeeCm50Xoet+
1fvy821r6Fe4fpeAw1ZB+as3Tphe8xZXQ
s3tbJy8BDzX4vN5svYqlZ96rt35dKuz0DfCPf4nfKe300fM9utiauTe5tgs5utLpLTh0Fz
Yx0O1sJYKgJvul0OfiuTI00BCks+aaJZm8Kwb4u+LtLCqbZ96lv3bieCahtegx+
7nzqyO6YCb4b9LovCELZ9Pe0L5rLSaBDzXaftxseAw1JzCF0MGjeCacKb69u9TlgC
udZT6Os3ojhcWxD914vNHfeCuaJvH4s4aarBKIGdsT8G4UKZhfJB+
yOLbjqCOnZT6baF1WiZeNtfsNtuoo+c==
chars=
abcdefghijklmnopqrstuwwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/
def shift(char,key,rev = False):
ifnotcharinchars:
---
## Page 783
CTF特训营：技术详解、解题方法与
22.2 VIGENERE
783/1144
return char
if rev:
return chars[(chars.index(char)-chars.index(key))% len(chars)]
else:
return chars[（chars.index(char)+chars.index(key))% len(chars)]
def decrypt(encrypted,key):
encrypted =join([shift(encrypted[ij],key[i % len(key)],True) for i in range(len(
encrypted))1)
returnb64decode(encrypted)
for i3 in chars:
fori7in chars:
for i8 in"XY":
for i11 in chars:
key="shA°+i3+"I8H"+i7+i8+"LF"+i11
tmp=decrypt(a,key)
if "the flag is" in tmp:
print tmp
结果如下：
SKKisaJapaneseInputMethod developed bySatoMasahiko.OriginalSKK targets
Emacs.However,there arevariousSKKprograms that works other systems such as
SKKFEP(forWindows),AquaSKK（for MacOSX)and eskk(forvim)
OK,theflag isTWCTF{C14ss1caLCiPhEriSv3ryfun}
最终得到flag。由这两题可以看出，解答Crypto类型的题目时，
判断什么情景用什么攻击方法是基础能力，最关键的考察点还是加密
算法的分析能力。
---
## Page 784
CTF特训营：技术详解、解题方法与
22.3 Revolver
784/1144
22.3Revolver
这是强网杯线下赛中的一道题目，题目类型为Reverse+PWN
+Crypto，是在线下赛中引l入Crypto类型题点的突破性尝试。题目为
note式交互方式。
1.初始化和验证
题目中的选项1、2为初始化和验证功能模块，包含一个proof过
程。通过proof过程可以消耗一定的攻击者计算资源，使用此措施可
以有效地避免拒绝服务攻击。具体实现代码如下：
1.bool open_insurance()
2.{
3.
srand(unsigned)time(NULL));
4.
char ch[16+1]={0};
5.
const char CCH="
0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+";
6.
for (int i = 0; i <16;++i)
7.
{
8.
int x= rand()/(RAND_MAX / (sizeof(CCH)-1);