让我们详细看看它们。
# 自动化构建和部署
第一步包括自动化部署过程。好消息是，在我使用过的大多数遗留系统中，已经有了一些自动化，例如，以 shell 脚本的形式。
无论如何，自动化部署的活动包括以下内容:
*   **构建和打包**:一些自动化通常已经以 Makefile、Ant、Maven、任何其他构建工具配置或自定义脚本的形式存在。
*   **数据库迁移**:我们需要开始以增量方式管理数据库模式。它需要将当前模式作为初始迁移，并使用诸如 Flyway 或 Liquibase 之类的工具进行所有进一步的更改，正如本章已经描述的那样。
*   **部署**:即使部署过程完全是手动的，那么通常也会有文本/wiki 页面描述需要转换成自动化脚本。
*   **可重复配置**:在遗留系统中，配置文件通常是手动更改的。我们需要提取配置并使用配置管理工具，如[第 6 章](06.html)、*使用 Ansible* 进行配置管理中所述。
在前面的步骤之后，我们可以将所有内容放入一个部署管道中，并在一个手动 UAT(用户验收测试)周期之后将其用作一个自动化阶段。
从过程的角度来看，更频繁地开始发布是值得的。例如，如果发布是一年一次，试着每季度发布一次，然后每月发布一次。对这一因素的推动将导致更快的自动化交付采用。
# 自动化测试
下一步通常要困难得多，就是为系统准备自动化测试。它需要与质量保证团队沟通，以便了解他们当前如何测试软件，这样我们就可以将所有东西都转移到自动化验收测试套件中。这个阶段需要两个步骤:
*   **验收/健全性测试套件**:我们需要添加自动化测试，以替代 QA 团队的一些回归活动。根据系统的不同，它们可以作为黑盒硒测试或黄瓜测试提供。
*   **(虚拟)测试环境**:在这一点上，我们应该已经想到了我们的测试将要运行的环境。通常，节省资源和限制所需机器数量的最佳解决方案是使用 float 或 Docker 虚拟化测试环境。
最终目标是拥有一个自动化的验收测试套件，它将取代开发周期中的整个 UAT 阶段。然而，我们可以从一个健全性测试开始，该测试将很快从回归的角度检查系统是否正确。
While adding test scenarios, remember that the test suite should execute in reasonable time. For sanity tests, it is usually less than 10 minutes.
# 重构和引入新功能
当我们至少有了基本的回归测试套件时，我们就可以添加新的特性并重构旧的代码了。一步一步地以小块的方式来做总是更好，因为一次重构所有东西通常会导致混乱，导致生产失败(与任何特定的变化都没有明显的关系)。
该阶段通常包括以下活动:
*   **重构**:开始重构旧代码最好的地方就是新特性被期待的地方。这样开始，我们为即将到来的新特性请求做好了准备。
*   **重写**:如果我们计划重写部分旧代码，应该从最难测试的代码开始。这样，我们不断增加项目中的代码覆盖率。
*   **引入新特性**:在新特性实现过程中，值得使用**特性切换**模式。然后，万一有什么不好的事情发生，我们可以迅速关闭新功能。实际上，在重构过程中应该使用相同的模式。
For this phase, it's worth reading an excellent book by *Martin Fowler*, *Refactoring: Improving the Design of Existing Code*.
在接触旧代码时，最好遵循这样的规则:总是先添加一个通过的单元测试，然后再更改代码。通过这种方法，我们可以依靠自动化来检查我们没有偶然改变业务逻辑。
# 理解人的因素
在将自动化交付过程引入遗留系统时，您可能会比其他任何地方都更能感受到人的因素。为了自动化构建过程，我们需要与运营团队进行良好的沟通，他们必须愿意分享他们的知识。同样的故事也适用于手工 QA 团队；他们需要参与编写自动化测试，因为只有他们知道如何测试软件。如果您考虑一下，运营和质量保证团队都需要为项目做出贡献，这些项目将在以后使他们的工作自动化。在某个时候，他们可能会意识到他们在公司的未来并不稳定，并且变得不那么有帮助。许多公司难以引入持续交付流程，因为团队不想参与得太多。
在本节中，我们讨论了如何处理遗留系统及其带来的挑战。如果您正在将您的项目和组织转换为持续交付方法，那么您可能想看一看持续交付成熟度模型，它旨在为采用自动化交付的过程提供结构。
A good description of the Continuous Delivery Maturity Model can be found at [https://developer.ibm.com/urbancode/docs/continuous-delivery-maturity-model/](https://developer.ibm.com/urbancode/docs/continuous-delivery-maturity-model/).
# 练习
在本章中，我们已经介绍了持续交付流程的各个方面。既然熟能生巧，我们推荐以下练习:
1.  使用 Flyway 在 MySQL 数据库中创建不向后兼容的更改:
    *   使用官方 Docker 映像`mysql`启动数据库
    *   使用正确的数据库地址、用户名和密码配置 Flyway
    *   创建一个初始迁移，创建一个具有三列的`users`表:`id`、`email`和`password`
    *   向表中添加示例数据
    *   将`password`列更改为`hashed_password`，这将存储散列的密码
    *   按照本章所述，将不向后兼容的变更分为三次迁移
    *   您可以使用 MD5 或 SHA 进行哈希运算
    *   因此，检查数据库是否没有以纯文本形式存储密码
2.  创建一个 Jenkins 共享库，包含构建和单元测试 Gradle 项目的步骤:
    *   为库创建单独的存储库
    *   在库中创建两个文件:`gradleBuild.groovy`和`gradleTest.groovy`
    *   写出适当的`call`方法
    *   将库添加到 Jenkins
    *   在管道中使用库中的步骤
# 摘要
本章混合了以前没有涉及的各种持续交付方面。本章的要点如下:
*   数据库是大多数应用的重要组成部分，因此应该包含在持续交付过程中。
*   数据库模式更改存储在版本控制系统中，并由数据库迁移工具管理。
*   有两种类型的数据库模式更改:向后兼容和向后不兼容。虽然第一种类型很简单，但第二种类型需要一些开销(随着时间的推移分成多个迁移)。
*   数据库不应该是整个系统的中心点。首选的解决方案是为每个服务提供自己的数据库。
*   交付过程应该始终为回滚场景做好准备。
*   应该始终考虑三种发布模式:滚动更新、蓝绿色部署和加那利发布
*   遗留系统可以通过小步骤转换为持续交付流程，而不是一次全部转换。
# 最佳实践
谢谢你读这本书。我希望您已经准备好将持续交付方法引入您的信息技术项目。作为本书的最后一部分，我提出了一个持续交付实践的 10 大清单。好好享受！
# 练习 1–在团队中拥有流程！
在团队中拥有从接收需求到监控生产的整个过程。就像曾经说过的:一个运行在开发者机器上的程序是赚不到钱的。这就是为什么拥有一个完整的产品所有权的小型 DevOps 团队非常重要。事实上，这是 DevOps -开发和运营自始至终的真正含义:
*   拥有持续交付管道的每个阶段:如何构建软件，验收测试中有什么要求，以及如何发布产品。
*   避免有管道专家！团队中的每个成员都应该参与创建管道。
*   找到一个在团队成员之间共享当前管道状态(和生产监控)的好方法。最有效的解决方案是团队空间的大屏幕。
*   如果开发人员、质量保证和信息技术运营工程师是独立的专家，那么确保他们在一个敏捷团队中一起工作。基于专业知识的独立团队导致对产品不负任何责任。
*   请记住，给予团队自主权会带来高工作满意度和出色的参与度。这导致了伟大的产品！
# 练习 2–自动化所有事情！
自动化从业务需求(以验收测试的形式)到部署过程的一切。手动描述、带有说明步骤的维基页面，它们都很快变得过时，并导致部落知识，使过程缓慢、繁琐和不可靠。这反过来又导致了发布彩排的需要，并使每个部署都是独特的。不要走这条路！通常，如果你第二次做任何事情，自动化它:
*   消除所有手动步骤；它们是错误的来源！整个过程必须是可重复和可靠的。
*   不要直接在生产中做任何改变！请改用配置管理工具。
*   使用完全相同的机制部署到每个环境。
*   始终包括自动烟雾测试，以检查发布是否成功完成。
*   使用数据库模式迁移来自动化数据库更改。
*   使用自动维护脚本进行备份和清理。不要忘记删除未使用的 Docker 映像！
# 练习 3–版本一切！
版本化一切:软件源代码、构建脚本、自动化测试、配置管理文件、持续交付管道、监控脚本、二进制文件和文档。简单的一切。使您的工作基于任务，其中每个任务都导致提交到存储库，无论它是否与需求收集、架构设计、配置或软件开发相关。任务开始于敏捷板，结束于存储库。这样，你对历史和变化的原因保持一个单一的真理点:
*   严格控制版本。一切都意味着一切！
*   将源代码和配置保存在代码存储库中，将二进制文件保存在工件存储库中，将任务保存在敏捷问题跟踪工具中。
*   将持续交付管道开发为代码。
*   使用数据库迁移并将它们存储在存储库中。
*   以可版本控制的标记文件的形式存储文档。
# 练习 4–使用商业语言进行验收测试！
使用面向业务的语言进行验收测试，以改善相互沟通和对需求的共同理解。与产品所有者密切合作，创造埃里克·埃文所说的无处不在的语言“T1”，这是商业和技术之间的通用方言。误解是大多数项目失败的根本原因:
*   创建一种通用语言并在项目中使用它。
*   使用验收测试框架，如黄瓜或 FitNesse，帮助业务团队理解并让他们参与进来。
*   在验收测试中表达业务价值，在开发过程中不要忘记它们。很容易在不相关的话题上花太多时间！
*   改进和维护验收测试，以便它们总是作为回归测试。
*   确保每个人都知道，通过验收测试套件意味着业务部门同意发布软件。
# 练习 5–准备好回滚！
准备好回滚；迟早你需要做这件事。请记住，您不需要更多的 QAs，您需要更快的回滚。如果在生产中出现任何问题，您首先要做的是谨慎行事，回到上一个工作版本:
*   制定一个回滚策略，以及系统关闭时该做什么的过程
*   将不向后兼容的数据库更改拆分为兼容的更改
*   对于回滚和标准发布，始终使用相同的交付流程
*   考虑引入蓝绿色部署或加那利版本
*   不要怕 bug，反应快用户就不会离开你！
# 实践 6–不要低估人的影响
不要低估人的影响。它们通常比工具更重要。如果信息技术运营团队不帮助您，您将无法实现交付自动化。毕竟，他们了解当前的流程。这同样适用于质量保证、业务和所有相关人员。让他们变得重要和参与:
*   让质量保证和信息技术运营成为 DevOps 团队的一部分。你需要他们的知识和技能！
*   为当前正在进行手动活动的成员提供培训，以便他们能够转向自动化。
*   比起等级和秩序，更喜欢非正式的交流和扁平的组织结构。没有善意你什么都不会做！
# 实践 7–建立可追溯性！
建立交付过程和工作系统的可追溯性。没有什么比没有任何日志消息的失败更糟糕的了。监控请求的数量、延迟、生产服务器的负载、持续交付管道的状态，以及您能想到的有助于您分析当前软件的一切。积极主动！在某些时候，您需要检查统计数据和日志:
*   记录管道活动！在失败的情况下，用一个信息性的消息通知团队。
*   对正在运行的系统进行适当的记录和监控。
*   使用专门的工具进行系统监控，如 Kibana、Grafana 或 Logmatic.io。
*   将生产监控集成到您的开发生态系统中。考虑在公共团队空间中使用具有当前生产统计数据的大屏幕。
# 练习 8–经常整合！
经常整合，其实一直都是！就像有人说的:*持续的次数比你想象的多*。没有什么比解决合并冲突更令人沮丧的了。持续集成更多的是团队实践，而不是工具。每天至少几次将代码集成到一个代码库中。忘掉持久的特征分支和大量的局部变化。基于主干的开发和功能切换的胜利！
*   使用基于主干的开发和功能切换，而不是功能分支。
*   如果你需要一个分支或者局部的改变，确保你每天至少和团队的其他成员整合一次。
*   始终保持躯干健康；确保在合并到基线之前运行测试。
*   每次提交到存储库后运行管道，以实现快速反馈周期。
# 练习 9–只构建一次二进制文件！
只构建一次二进制文件，并在每个环境中运行相同的二进制文件。无论它们是 Docker 映像还是 JAR 包的形式，只构建一次就消除了各种环境引入差异的风险。它还节省了时间和资源:
*   构建一次并在环境之间传递相同的二进制文件。
*   使用工件存储库来存储和版本化二进制文件。不要为此目的使用源代码库。
*   将配置外部化，并使用配置管理工具来引入环境之间的差异。
# 练习 10–经常释放！
经常发布，最好是在每次提交到存储库之后。俗话说*疼就多做。*释放作为日常的例行公事，让这个过程变得可预测和平静。远离被困在难得的释放习惯中。那只会变得更糟，你最终会得到一年一次的释放，有三个月的准备期！
*   将你对完成的定义改写为*完成意味着释放*。掌控整个过程！
*   使用功能切换隐藏(对用户)仍在进行的功能。
*   使用加那利版本和快速回滚来降低生产中出现 bug 的风险。
*   采用零宕机部署策略，实现频繁发布。