### Inducing False Positives and Performance Analysis

To simulate normal user activity, we utilized words and clicked on links across various web pages. With our default policy, as expected, we induced false positives on five of the web pages. For example, a search query for the string "javascript:" on Slashdot8 caused benign data to be marked as quarantined. We confirmed that these false positives arise because our client-side proxy server marks trusted code as untrusted, which subsequently raises alarms when interpreted as code by the browser. In principle, we expect that a full implementation with a taint-aware server-side component would eliminate these false positives inherent in the client-side proxy server approximation.

However, even with the client-side proxy server approximation, we did not raise false positives in certain cases where the IE 8 Beta XSS filter did. For instance, searching for the string "javascript:" on Google's search engine did not trigger false positives. This is because our DSI enforcement is parser-context awareâ€”though all occurrences of "javascript:" are marked untrusted in the HTTP response page, our browser did not raise an alert as the untrusted data was not interpreted as code.

**Note:** [Slashdot](http://slashdot.org)

### Performance Overhead

#### Browser Performance

To measure the browser performance overhead, we compared the page load times of our modified version of Konqueror 3.5.9 with the vanilla version. We evaluated against the test benchmark internally used at Mozilla for browser performance testing, consisting of over 350 popular web pages with common features including HTML, JavaScript, CSS, and images. No data on these web pages was marked untrusted. We measured a performance overhead of 1.8% averaged over five runs of the benchmark.

We also measured the performance of loading all the pages from the XSSed dataset, consisting of 5,328 pages, with untrusted data marked with serialization delimiters. We observed a similar overhead of 1.85% when processing web pages with tainted data.

#### Web Page Size Increase

Web page (or code) size increase often translates to increased corporate bandwidth consumption, which is important to characterize in a cost analysis. For the XSSed dataset, our instrumentation with delimiters of length \( \ell = 10 \) increased the page size by less than 1.1% on average for all the web pages with marked untrusted data.

#### Server Performance

We measured the CPU overhead for the phpBB application running on a DSI-compliant web server with PHPTaint enabled. This was done using `ab` (ApacheBench), a tool provided with Apache to measure the performance. The results are shown in Figure 12, which illustrates the increase in CPU overhead averaged over five runs for different page sizes.

### Comparison with Existing XSS Defenses

#### Comparison Criteria

To concretely summarize the strengths and weaknesses of various XSS defense techniques, we present a defender-centric taxonomy of adaptive attacks to characterize the ability of current defenses against both current and future attacks. Adaptive attackers can potentially target the following avenues:

- **Browser Inconsistency:** Inconsistencies in assumptions made by the server and client lead to various attacks.
- **Lexical Polymorphism:** Attackers may find variants in lexical entities to evade lexical sanitization.
- **Keyword Polymorphism:** Attackers may use different syntactic constructs to bypass keyword filters. For example, in the Samy worm, the attacker used "eval('inner' + 'HTML')" to inject the restricted keyword `innerHTML`.
- **Multiple Injection Vectors:** Attackers can inject non-script-based elements.
- **Breaking Static Structural Integrity:** To evade confinement-based schemes, attackers can break out of static confinement regions on the web page.
- **Breaking Dynamic Structural Integrity:** Attacks may target the structure of dynamically executing client-side code.

Defense against each of the above adaptive attack categories serves as a point of comparison for existing defenses. Additionally, we compare the potential effectiveness of techniques to defend against stored XSS attacks and whether a defense mechanism enables flexible server-side specification of policies. Fixed policies often result in false positives, especially for content-rich untrusted data, which can impede deployability.

#### Existing Techniques

Figure 13 shows the comparative capabilities of existing defense techniques based on the criteria outlined earlier. We describe current XSS defenses and discuss some of their weaknesses.

##### Purely Server-Side Defenses

- **Input Validation and Sanitization:** Popular server-side languages such as PHP provide standard sanitization functions like `htmlspecialchars`. However, this mechanism is not robust and places excessive burden on the web developer for its correctness. The prevalence of XSS attacks today shows that these mechanisms fail to safeguard against both static and dynamic DSI attacks.
- **Taint-Tracking:** Taint-tracking on the server-side aims to centralize sanitization checks at the output interface using taint metadata. This approach suffers from the lack of client-side language semantics in the policy checking engine and can be susceptible to browser-server inconsistency bugs.
- **XSS-GUARD:** XSS-GUARD employs a complete browser implementation on the server output to deal with both static and dynamic DSI attacks. However, it incurs significant performance overheads and still suffers from browser inconsistency bugs.

##### Purely Client-Side Defenses

- **Sensitive Information Flow Tracking:** Vogt et al. propose sensitive information flow tracking in the browser to identify spurious cross-domain sensitive information transfer. This approach is symptom-targeted and limited in its goal, leading to high false positives.
- **Script Injection Blocking:** Techniques like the Firefox NoScript extension block scripts globally on websites. However, many websites do not render well with this extension, and it requires user intervention.
- **Personal Firewalls with URL Blocking:** Noxes is a client-side rule-based proxy to disallow users from visiting potentially unsafe URLs. Such solutions are not designed to distinguish trusted data generated by the server from user-generated data, leading to high false negatives and false positives.
- **GET/POST Request Content-Based URL Blocking:** Proposals aim to block URLs containing known attack characters or patterns. The most recent implementation is the XSS filter in Internet Explorer 8 Beta. This approach does not detect XSS attacks based on parsing context and does not allow configurable server-specified policies, leading to false positives and false negatives.

##### Client-Server Cooperative Defenses

- **Whitelisting Legitimate Scripts:** BEEP proposes whitelisting legitimate scripts to prevent script-injection-based vectors. However, this mechanism does not comprehensively defend against other XSS vectors and does not thwart attacks violating dynamic DSI.
- **Region-Based Script Disabling:** BEEP outlines a technique to define regions of the web page that cannot contain script code. This mechanism can be tricky to enforce for content-rich untrusted data and does not deal with dynamic DSI attacks.

### Discussion

DSI enforcement using a client-server architecture offers a strong basis for XSS defense in principle. However, there are practical concerns for full deployment:

- **Client and Server Participation:** Our approach requires both client and server participation, necessitating collective upgrades to enable protection.
- **Quarantine Bit Tracking:** A DSI-compliant browser requires quarantine bit tracking across operations of several languages. While this can prevent JavaScript-based attack vectors, it does not address attacks using other languages. Uniform cross-component quarantine bit tracking is possible but requires cooperation from multiple third-party web plugin vendors.
- **End-User Usability:** It is important to account for end-user usability to ensure that the solution is practical and widely adopted.

By addressing these concerns, we can enhance the effectiveness and deployability of DSI-based XSS defenses.