Through the Looking-Glass, and What Eve Found There
Luca Bruno, Mariano Graziano, Davide Balzarotti, Aur´elien Francillon
EURECOM
{ﬁrstname.lastname}@eurecom.fr
Abstract
Looking-glasses are web applications commonly de-
ployed by Autonomous Systems to offer restricted web
access to their routing infrastructure, in order to ease re-
mote debugging of connectivity issues. In our study, we
looked at existing deployments and open-source code to
assess the security of this critical software. As a result,
we found several ﬂaws and misconﬁgurations that can be
exploited to escalate from a web attack to a remote com-
mand execution on backbone routers.
This paper summarises the results of our study, and
shows how even an attacker with very limited resources
can exploit such ﬂaws in operators’ networks and gain
access to core Internet infrastructure. Depending on sys-
tems conﬁguration, these attacks may result in trafﬁc dis-
ruption and global BGP routes injection, with severe im-
plications for the security of the Internet.
1
Introduction
The Internet is composed by a large number of Autonou-
mous Systems (AS) which cooperate to exchange and
carry data across their links. Several intra- and extra-
AS routing protocols running on backbone routers are
responsible for distributing routes in the control plane,
across the world.
Some of those protocols, however,
have not been designed with security in mind and are not
speciﬁcally resilient against malicious agents [1].
For example, the Border Gateway Protocol (BGP) [2]
takes care of extra-AS routes distribution, but any mali-
cious or wrongly conﬁgured AS can hijack and re-route
preﬁxes owned by other ASes. Therefore, most of In-
ternet routing relies on the assumption that no malicious
BGP routers are ever allowed to announce bogus routes,
and that the existing routers are benign and properly se-
cured.
The aim of our study is to show how these assumptions
do not hold true in the real-world, by focusing on a series
of software ﬂaws and widespread misconﬁgurations in
“looking-glass” software that offers limited web-access
to backbone routers.
The paper is organized as follow.
In Section 1 we
introduce the concept of “looking-glass” software as a
public-access network debug tool, and its typical code
architecture. Then, in Section 3 we outline a possible
threat model, along with some of the most severe men-
aces. Furthermore, in Section 4 and 5 we present the re-
sults of the software review we did, and we describe the
indirect experiments we performed to conﬁrm our ﬁnd-
ings. The most relevant statistics and results of our ex-
periments are shown in Section 6, along with an empir-
ical rough estimation of BGP injection feasibility, based
on historical records. Finally, Section 8 summarises our
ﬁndings and give some insights on the current state of the
Internet infrastructure.
2
Background
An AS infrastructure is composed of several network ser-
vices, each handled by different systems and devices.
For the purposes of this paper, we will limit our focus
to just two categories of systems that are strictly related
to Internet routing: backbone BGP routers and Linux-
based route servers.
• Backbone routers
The worldwide Internet backbone is run on top
of dedicated network devices capable of acceler-
ated packet routing in the data-plane, using custom
ASICs and dedicated hardware.
These devices run a custom OS and control-plane
stack which is responsible for computing the rout-
ing topology, e.g., by participating in BGP sessions
with neighbors. In addition, all these devices have
one or more interfaces for remote and out-of-band
(OOB) administration, like a telnet service, a SSH
service, or a remote serial port. The access to these
Public IP (data+BGP)
Private admin (telnet/SSH)
Public web (looking-glass)
Internet
AS64496
NOC
AS64497
NOC
AS64498
NOC
Private net
Public net
Figure 1: Looking glass architecture.
interfaces should be strictly restricted to Network
Operations Center (NOC) operators and authorized
AS personnels.
• Route servers
Routing software exists for traditional Linux-
based servers to establish BGP sessions with other
routers and servers. Two prominent examples are
Quagga [3] and Xorp [4], which are used by several
operators and are under active development.
The usages of route servers are multiple, from pro-
viding a read-only copy of the global BGP table to
allowing scripting of BGP rules (e.g., by using tra-
ditional UNIX utilities). Also these servers can be
accessed out-of-band by AS personnel, via telnet or
SSH.
Some public services exist, like the Route Views
project [5], which provide unrestricted telnet access
to their route servers to expose a read-only copy of
the BGP table to analysts and researchers. How-
ever, those services are purposefully meant for pub-
lic access, and are therefore outside the scope of this
paper.
When debugging BGP routing problems, NOC oper-
ators are often facing issues affecting only a few ASes.
Such problems are harder to debug due to the lack of a
view on the remote routing table.
For this reason, a new category of web-applications
emerged in the ’90s to permit a restricted set of opera-
tions on AS routers and route servers by the large public,
over the web. This kind of software is usually referred as
“looking-glass”, as it offers a local observation point to
remote network engineers.
Looking-glasses are web scripts, usually implemented
in Perl or PHP and directly connected to routers admin
interfaces (i.e., telnet or SSH). These scripts are designed
to relay textual commands from the web to the router and
print back the router’ replies. They run on top of com-
mon Linux/Apache stacks, and sometimes provide addi-
Looking glass
Language
Release (date)
Cougar-LG [6]
Perl
1.9 (2004-11-25)
Cistron-LG [7]
Perl
1.01 (1997-10-21)
MRLG [8]
Perl
5.4.1 (2007-08-30)
MRLG4PHP [9]
PHP
1.0.7 (2007-10-11)
Telephone [10]
PHP
1.2.0 (2012-10-01)
Table 1: Open-source looking-glass software.
tional utilities for latency and traceroute measurements.
Figure 1 brieﬂy shows their typical architecture and de-
ployment.
We decided to focus our attention on looking-glass
software, as most of them are small and old web-
applications that have been last updated in early 2000s.
In this paper we analyse what we found to be the most
commonly used open-source software looking-glasses,
as listed in Table 1.
3
Threat model
A looking-glass is an often overlooked critical part of an
operator infrastructure, as it sits at the border between the
public web and restricted admin consoles. As such, the
threat model encompasses both the typical web security
scenario and some more custom networking threats.
We categorized some of the most relevant issues as
follow:
• Reverse Cross-Channel Scripting (Reverse-XCS)
Reverse-XCS are deﬁned by Bojinov et al. [11] as
“the use of web interface to eventually attack a non-
web channel”.
In our scenario, this translates to two relevant cases:
– Malicious command injection
Bypassing a weak or non-existent commands
2
sanitization, an attacker may trick the looking-
glass into sending malformed commands to a
router console, e.g., to trigger a DoS on the
control-plane.
– Routing Information Base (RIB) manipulation
By exploiting ﬂaws in the looking-glass, an at-
tacker may inject arbitrary commands to ma-
nipulate the RIB on the router, e.g., by chang-
ing the BGP conﬁguration.
If the attacked
router relays its topology to neighboring ASs,
this may also affect remote networks.
• Web ﬂaws
Typical web threats applies here too. In particular,
we highlight two of the most relevant cases:
– Exposed routers credentials
The conﬁguration ﬁles of a looking glass con-
tain IP addresses, usernames, and passwords
in cleartext. If not properly secured, an at-
tacker may be able to gather credentials by
guessing the URLs of conﬁguration ﬁles.
– Cookies stealing via XSS
Even though looking-glass applications are
usually unauthenticated, an attacker may ex-
ploit XSS ﬂaws in them to gather admin cook-
ies for other administration web-applications
served under the same-origin domain.
4
Threat Analysis
4.1
Misconﬁgurations
Misconﬁguration or improper access control of resources
are two of the most basic, yet important, issues for web
security.
First of all, if server modules are not properly con-
ﬁgured, it may be possible to get a listing of suppos-
edly private ﬁles – including source codes and conﬁg-
uration ﬁles. In this case, search engine bots are capable
of crawling and inspecting the ﬁles content, thus making
login credentials easy to gather by searching for ad-hoc
Google-dorks [12].
Another possible issue comes from temporary ﬁles. In
this case, source code and conﬁgurations could be recov-
ered by looking for temporary editor ﬁles (e.g., ending
in ⇠) on the web server. This can as well help an at-
tacker conﬁrm which version of the software is run by
a targeted operator, and may pose a bigger problem for
proprietary/custom looking-glasses.
Moreover, conﬁgurations and login credentials for
routers may be stored as plain text ﬁles in the same web
server directory. By default, web-servers will serve them
as plain-text to anyone querying the proper URL. By in-
specting source code and looking at default ﬁle names, it
is possible to guess the URL of conﬁguration ﬁles and, if
not properly protected, retrieve them.
Finally, some software allows advanced authentication
methods, for example by using SSH public/private key-
pairs instead of cleartext passwords. In this case, the
path to the SSH key is stored in the conﬁguration ﬁles,
instead of the full passwords. However, the SSH keys
themselves could be stored by mistake in the same path,
openly readable to the entire world.
4.2
Poor network policies
Backbone routers are parts of a critical infrastructure and
as such their admin interfaces have to be properly se-
cured. Cisco’s own best practices [13], for example, rec-
ommend exposing consoles only over out-of-band loop-
back interfaces, unreachable from the public Internet
(e.g., by using private addresses and placing them in ded-
icated admin VLANs).
However, some operators may decide to put loopback
interfaces on publicly routable networks, or to expose ad-
ministration services on all router’s interfaces. In such
cases, a remote attacker may be able to directly login
onto them, e.g., by using stolen credentials.
4.3
Web security
It is usually recommended that actionable web applica-
tions make use of captcha or other automation blocker to
avoid scripted attacks [14]. While this may not look like
a big issue for looking-glasses, the lack of this counter-
measure can effectively help an attacker to automatically
map resources in an AS infrastructure and scan them for
information gathering. This may also result in automated
bot attacks aimed at DoSing connected devices or other
parts of the network.
Moreover, an attacker may be able to exploit insufﬁ-
cient input parameters sanitization to perform XSS and
inject HTML/JS code in web responses. While looking-
glasses are usually unauthenticated, this ﬂaw can be used
to steal admin cookies for other panels hosted under the
same-origin domain.
Similarly, it could be possible to perform a Reverse-
XCS against the network infrastructure. If web input is
not properly sanitized, an attacker may forge input pa-
rameters to inject custom commands into the router con-
sole. This directly means an escalation from a web at-
tack to an Internet routing attack if the attacker manages
to modify the router conﬁguration.
Finally, some software may come with additional tools
to be deployed directly on the web-server to perform
advanced measurements (e.g., high granularity latency
3
measurements). Such tools may as well include vulnera-
bilities, leading to remote code execution on the looking-
glass server itself.
4.4
Impact
Most of the threats described so far can result in an at-
tacker getting unauthorised access to the administration
interface of a router, under the same access level of the
looking-glass software.
In a typical network topology designed as in Figure 1,
this results into having an observation point into the pri-
vate part of an AS infrastructure, and possibly manip-
ulating portions of it.
Moreover, an attacker with re-
stricted console access to a router could easily elevate his
privileges by cracking weakly-hashed secrets [15] (e.g.,
Cisco’s ciphers Type-0, Type-5 and Type-4 [16]) or by
abusing known authorization bypass vulnerabilities that
affected several top vendors [17, 18].
The impact of a malicious attacker with elevated priv-
ileges on a backbone routers are manifold with respect
to both the local AS infrastructure and the global Inter-
net. For example, by altering internal or external routing
conﬁgurations, an attacker may be able to blackhole or
disrupt speciﬁc subnetworks, or set up trafﬁc mirroring
or re-routing scenarios for further attacks.
We consider the post-exploitation analysis of such a
scenario to be complex and quite speciﬁc to single ven-
dors, devices, and network setup. As a result, we will not
cover post-exploitation details in the rest of this paper.
However, we would like to stress the fact that backbone
routers are usually capable of announcing routes both in-
ternally (e.g., into an OSPF domain) and to the whole
Internet (i.e., to peering ASes via BGP). As such, in this
threat analysis we have highlighted one possible path for
a remote attacker with modest resources to escalate from
a web attack, to a remote command injection into mul-
tiple backbone routers, to injecting malicious announces
into the Internet BGP table.
5
Experiments
Given the theoretical attack surface presented in Sec-
tion 3, we tried to assess how many ASes worldwide
were actually vulnerable to remote attackers. Our goal
was complicated by the fact that, due to ethical and legal
considerations, we could not perform direct experiments,
e.g., by injecting commands on remote routers or by just
trying to login into them.
5.1
Ethical concerns
Unauthorized access to computers and network devices
is prosecuted by several national and international laws.
Since in this paper we conducted a comprehensive study,
encompassing 26 countries with different legislations,
we took ethical considerations as a top priority. For this
reason we avoided any direct connections to routers and
other devices we found online, even when credentials
where publicly exposed. We performed our analysis and
code review of the looking-glass software in a local set-
ting, performing the injection experiments in a controlled
environment, as described further below.
During our research we found several vulnerabili-
ties and misconﬁgurations.
Unfortunately, in most of
the cases these ﬂaws were trivial to detect and to ex-
ploit, signiﬁcantly increasing the relevance of our study.
For this reason, we decided to responsible disclose the
vulnerabilities and misconﬁgurations by contacting the
CERT/CC in order to coordinate all the entities involved.
In addition, we contacted and reported our ﬁndings to
the software developers, who acknowledged the prob-
lems and are working on ﬁxes.
5.2
Methodology
Not all ASes provide public looking-glasses, and there is
not a single central list containing all of them. As such,
we compiled a list of known ones on a best-effort basis
by collecting URL from operators-related resources.
Such resources are not updated frequently and may
contain unreachable or inactive services, while missing
recent ones. We started ﬁltering out the inactive entries
by connecting to them and looking for network or web
failures. For the remaining ones, we performed a sim-
ple HTTP request, matching the returned page with a set
of HTML signatures we developed for each open-source
looking glass we were able to download. At the end of
this ﬁngerprinting phase, we obtained the list of the most
popular open-source software, and which ASes are using
them.
We then proceed to perform a security review of their
codebase, especially looking for the kind of issues we de-
scribed in Section 4. At the same time, we also collected
a list of default paths for conﬁguration ﬁles, sources, and
keys. This knowledge base was subsequently used to
scan web servers and search engine indexes for publicly
exposed conﬁgurations and key ﬁles.
At this point, we focused our tests on the subset of
ASes for which we identiﬁed an existing security prob-
lem. In our experiment, we ﬁrst tried to enumerate at
least one public IP for all routers connected to a looking-