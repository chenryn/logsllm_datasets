# Through the Looking-Glass, and What Eve Found There

**Authors:** Luca Bruno, Mariano Graziano, Davide Balzarotti, Aur√©lien Francillon  
**Affiliation:** EURECOM  
**Email:** {firstname.lastname}@eurecom.fr

## Abstract
Looking-glasses are web applications commonly deployed by Autonomous Systems (AS) to provide restricted web access to their routing infrastructure, facilitating remote debugging of connectivity issues. In our study, we examined existing deployments and open-source code to assess the security of this critical software. We identified several vulnerabilities and misconfigurations that can be exploited to escalate from a web attack to remote command execution on backbone routers.

This paper summarizes the results of our study and demonstrates how even an attacker with limited resources can exploit these flaws in operators' networks to gain access to core Internet infrastructure. Depending on system configurations, such attacks may result in traffic disruption and global BGP route injection, with severe implications for the security of the Internet.

## 1. Introduction
The Internet is composed of numerous Autonomous Systems (AS) that cooperate to exchange and carry data across their links. Several intra- and inter-AS routing protocols running on backbone routers are responsible for distributing routes in the control plane worldwide. However, some of these protocols were not designed with security in mind and are not resilient against malicious agents [1].

For example, the Border Gateway Protocol (BGP) [2] handles inter-AS route distribution, but any malicious or misconfigured AS can hijack and reroute prefixes owned by other ASes. Therefore, most Internet routing relies on the assumption that no malicious BGP routers will announce bogus routes and that existing routers are benign and properly secured.

Our study aims to show that these assumptions do not hold true in the real world by focusing on a series of software flaws and widespread misconfigurations in "looking-glass" software, which provides limited web access to backbone routers.

The paper is organized as follows:
- **Section 1** introduces the concept of "looking-glass" software as a public-access network debug tool and its typical code architecture.
- **Section 3** outlines a possible threat model and some of the most severe threats.
- **Sections 4 and 5** present the results of our software review and the indirect experiments we performed to confirm our findings.
- **Section 6** shows the most relevant statistics and results of our experiments, along with an empirical rough estimation of BGP injection feasibility based on historical records.
- **Section 8** summarizes our findings and provides insights into the current state of the Internet infrastructure.

## 2. Background
An AS infrastructure consists of various network services, each managed by different systems and devices. For this paper, we focus on two categories of systems related to Internet routing: backbone BGP routers and Linux-based route servers.

### Backbone Routers
The global Internet backbone runs on dedicated network devices capable of accelerated packet routing in the data plane using custom ASICs and hardware. These devices run a custom OS and control-plane stack, responsible for computing the routing topology, e.g., by participating in BGP sessions with neighbors. They also have interfaces for remote and out-of-band (OOB) administration, such as telnet, SSH, or a remote serial port. Access to these interfaces should be strictly restricted to Network Operations Center (NOC) operators and authorized AS personnel.

### Route Servers
Routing software exists for traditional Linux-based servers to establish BGP sessions with other routers and servers. Examples include Quagga [3] and Xorp [4], which are widely used and under active development. Route servers can provide a read-only copy of the global BGP table and allow scripting of BGP rules. Some public services, like the Route Views project [5], offer unrestricted telnet access to their route servers, but these are purposefully meant for public access and are outside the scope of this paper.

When debugging BGP routing problems, NOC operators often face issues affecting only a few ASes, making them harder to debug due to the lack of a view on the remote routing table. To address this, a new category of web applications emerged in the 1990s, allowing a restricted set of operations on AS routers and route servers by the public over the web. This kind of software is known as "looking-glass," as it offers a local observation point to remote network engineers.

Looking-glasses are web scripts, typically implemented in Perl or PHP, and directly connected to router admin interfaces (telnet or SSH). They relay textual commands from the web to the router and print back the router's replies. They run on common Linux/Apache stacks and sometimes provide additional utilities for latency and traceroute measurements. Figure 1 briefly shows their typical architecture and deployment.

We focused on looking-glass software because most of them are small, old web applications last updated in the early 2000s. Table 1 lists the most commonly used open-source looking-glass software.

| Looking Glass | Language | Release (Date) |
|---------------|----------|----------------|
| Cougar-LG [6] | Perl     | 1.9 (2004-11-25) |
| Cistron-LG [7]| Perl     | 1.01 (1997-10-21) |
| MRLG [8]      | Perl     | 5.4.1 (2007-08-30) |
| MRLG4PHP [9]  | PHP      | 1.0.7 (2007-10-11) |
| Telephone [10]| PHP      | 1.2.0 (2012-10-01) |

## 3. Threat Model
A looking-glass is a critical part of an operator's infrastructure, sitting at the border between the public web and restricted admin consoles. The threat model includes both typical web security scenarios and custom networking threats.

### Key Issues
- **Reverse Cross-Channel Scripting (Reverse-XCS)**: Defined by Bojinov et al. [11] as "the use of a web interface to eventually attack a non-web channel."
  - **Malicious Command Injection**: Bypassing weak or non-existent command sanitization, an attacker can trick the looking-glass into sending malformed commands to a router console, potentially triggering a DoS on the control plane.
  - **Routing Information Base (RIB) Manipulation**: By exploiting flaws in the looking-glass, an attacker can inject arbitrary commands to manipulate the RIB on the router, changing the BGP configuration. If the attacked router relays its topology to neighboring ASs, this can affect remote networks.

- **Web Flaws**
  - **Exposed Router Credentials**: Configuration files of a looking glass contain IP addresses, usernames, and passwords in cleartext. If not properly secured, an attacker may gather credentials by guessing the URLs of configuration files.
  - **Cookies Stealing via XSS**: Even though looking-glass applications are usually unauthenticated, an attacker may exploit XSS flaws to gather admin cookies for other administration web-applications served under the same-origin domain.

## 4. Threat Analysis

### 4.1 Misconfigurations
Misconfigurations or improper access control of resources are fundamental web security issues. If server modules are not properly configured, it may be possible to list supposedly private files, including source codes and configuration files. Search engine bots can crawl and inspect these files, making login credentials easy to gather using Google dorks [12].

Temporary files can also pose a risk. Source code and configurations could be recovered by looking for temporary editor files (e.g., ending in `~`) on the web server. This can help an attacker confirm the version of the software and pose a bigger problem for proprietary/custom looking-glasses.

Configuration and login credentials for routers may be stored as plain text files in the same web server directory. By default, web-servers will serve them as plain-text to anyone querying the proper URL. By inspecting source code and looking at default file names, it is possible to guess the URL of configuration files and, if not properly protected, retrieve them.

Some software allows advanced authentication methods, such as using SSH public/private key-pairs instead of cleartext passwords. In this case, the path to the SSH key is stored in the configuration files. However, the SSH keys themselves could be stored by mistake in the same path, openly readable to the entire world.

### 4.2 Poor Network Policies
Backbone routers are part of a critical infrastructure, and their admin interfaces must be properly secured. Cisco's best practices [13] recommend exposing consoles only over out-of-band loopback interfaces, unreachable from the public Internet. However, some operators may expose loopback interfaces on publicly routable networks or administration services on all router interfaces. In such cases, a remote attacker may be able to directly log in using stolen credentials.

### 4.3 Web Security
It is recommended that actionable web applications use captchas or other automation blockers to avoid scripted attacks [14]. While this may not seem critical for looking-glasses, the lack of such countermeasures can help an attacker automatically map resources in an AS infrastructure and scan them for information gathering. This can also result in automated bot attacks aimed at DoSing connected devices or other parts of the network.

An attacker may exploit insufficient input parameter sanitization to perform XSS and inject HTML/JS code in web responses. While looking-glasses are usually unauthenticated, this flaw can be used to steal admin cookies for other panels hosted under the same-origin domain.

Similarly, it could be possible to perform a Reverse-XCS against the network infrastructure. If web input is not properly sanitized, an attacker may forge input parameters to inject custom commands into the router console, escalating from a web attack to an Internet routing attack if the attacker modifies the router configuration.

Some software may come with additional tools to be deployed directly on the web-server for advanced measurements. Such tools may include vulnerabilities leading to remote code execution on the looking-glass server itself.

### 4.4 Impact
Most of the threats described can result in an attacker gaining unauthorized access to the administration interface of a router, under the same access level as the looking-glass software. In a typical network topology, this provides an observation point into the private part of an AS infrastructure and possibly manipulating portions of it.

An attacker with restricted console access to a router could easily elevate privileges by cracking weakly-hashed secrets [15] (e.g., Cisco's ciphers Type-0, Type-5, and Type-4 [16]) or abusing known authorization bypass vulnerabilities [17, 18].

The impact of a malicious attacker with elevated privileges on a backbone router is significant for both the local AS infrastructure and the global Internet. By altering internal or external routing configurations, an attacker may blackhole or disrupt specific subnetworks or set up traffic mirroring or re-routing scenarios for further attacks.

We consider the post-exploitation analysis of such a scenario to be complex and specific to single vendors, devices, and network setups. Therefore, we will not cover post-exploitation details in this paper. However, we highlight that backbone routers can announce routes internally (e.g., into an OSPF domain) and to the whole Internet (i.e., to peering ASes via BGP). This threat analysis highlights a possible path for a remote attacker with modest resources to escalate from a web attack to remote command injection into multiple backbone routers, and to injecting malicious announcements into the Internet BGP table.

## 5. Experiments
Given the theoretical attack surface presented in Section 3, we assessed how many ASes worldwide were vulnerable to remote attackers. Due to ethical and legal considerations, we could not perform direct experiments, such as injecting commands on remote routers or trying to log in.

### 5.1 Ethical Concerns
Unauthorized access to computers and network devices is prosecuted by national and international laws. Our comprehensive study encompassed 26 countries with different legislations, so we took ethical considerations seriously. We avoided any direct connections to routers and other devices, even when credentials were publicly exposed. We performed our analysis and code review of the looking-glass software in a local setting, conducting injection experiments in a controlled environment.

During our research, we found several vulnerabilities and misconfigurations. Unfortunately, in most cases, these flaws were trivial to detect and exploit, significantly increasing the relevance of our study. We responsibly disclosed the vulnerabilities and misconfigurations by contacting the CERT/CC to coordinate with all involved entities. We also reported our findings to the software developers, who acknowledged the problems and are working on fixes.

### 5.2 Methodology
Not all ASes provide public looking-glasses, and there is no central list. We compiled a list of known ones on a best-effort basis by collecting URLs from operator-related resources. These resources are not frequently updated and may contain unreachable or inactive services while missing recent ones. We filtered out inactive entries by connecting to them and looking for network or web failures. For the remaining ones, we performed simple HTTP requests, matching the returned page with a set of HTML signatures we developed for each open-source looking glass we could download. At the end of this fingerprinting phase, we obtained a list of the most popular open-source software and which ASes use them.

We then conducted a security review of their codebase, focusing on the issues described in Section 4. We also collected a list of default paths for configuration files, sources, and keys. This knowledge base was used to scan web servers and search engine indexes for publicly exposed configurations and key files.

Finally, we focused our tests on the subset of ASes for which we identified existing security problems. In our experiment, we first tried to enumerate at least one public IP for all routers connected to a looking-glass.