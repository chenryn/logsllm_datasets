### Pseudo-Random Number Generator with Input [DHY02]

**Definition 19 (Pseudo-Random Number Generator with Input [DHY02]):**
A pseudo-random number generator with input is a pair of algorithms \((\text{key}, \text{next})\), where:
- \(\text{key}\) is a probabilistic algorithm that takes no input and outputs a key \(K \in \{0, 1\}^n\) and an initial state \(S \in \{0, 1\}^n\).
- \(\text{next}\) is a deterministic algorithm that, given the current state \(S\), the key \(K\), and an auxiliary input \(I \in \{0, 1\}^p\), outputs a pair \((S', R) \leftarrow \text{next}(S, K, I)\) where \(S' \in \{0, 1\}^n\) is the new state and \(R \in \{0, 1\}^\ell\) is the output.

**Note:**
- The model assumes the existence of an entropy pool for accumulating entropy, which is used as input for the \(\text{key}\) algorithm to generate the key \(K\) and the initial state \(S\). However, the model does not specify a secure method for accumulating entropy or handling potentially adversarial inputs.
- In Definition 19, the \(\text{next}\) algorithm updates the state \(S\), but the key \(K\) remains unchanged.

**Attacks:**
- **CIA (Chosen-Input Attack):** The key \(K\) is hidden, the states are known but not chosen, and the auxiliary input can be chosen by the adversary.
- **CSA (Chosen-State Attack):** Similar to CIA, but the auxiliary inputs cannot be chosen, and the states can be chosen.
- **KKA (Known-Key Attack):** The key \(K\) is known, but the states are hidden, and the auxiliary inputs cannot be chosen.

**Security Model:**
- The security games CIA, CSA, and KKA use procedures described in Figure 3.6.
- The procedure \(\text{initialize}\) sets a random key \(K\) and a random state \(S\) using the \(\text{key}\) algorithm, generates \(q_r\) random inputs \((I_1, \ldots, I_{q_r}) \leftarrow (\{0, 1\}^p)^{q_r}\), initializes a counter \(i\) to 0, and sets a random Boolean parameter \(b\).
- After all oracle queries, the adversary \(A\) outputs a bit \(b^*\), which is compared to the challenge bit \(b\) in the \(\text{finalize}\) procedure.

**Procedures:**
- \(\text{getinput}/\text{setinput}\): Used by \(A\) to get or set the value of the auxiliary inputs.
- \(\text{get-state}/\text{set-state}\): Used by \(A\) to get or set the current value of the internal state \(S\).
- \(\text{get-key}\): Used by \(A\) to get the value of the key \(K\).
- \(\text{next-ror}\): Challenges \(A\) on its ability to distinguish the output of the \(\text{next}\) algorithm from a random string. The counter \(i\) is incremented during this procedure.

**Figure 3.6 – Procedures in Security Games CIA, CSA, KKA**

```plaintext
proc. initialize
(K, S) $← key;
(I1,··· , Iqr) $← ({0, 1}p)qr;
i ← 0;
b $← {0, 1};
OUTPUT b

proc. finalize(b∗)
IF b = b∗ RETURN 1
ELSE RETURN 0

proc. getinput
OUTPUT Ii

proc. setinput(I∗)
Ii ← I∗

proc. get-state
OUTPUT S

proc. set-state(S∗)
S ← S∗

proc. next-ror
(S, R0) ← next(S, K, Ii)
R1 $← {0, 1}‘
i ← i + 1
OUTPUT Rb
```

**Definition 20 (Security of a Pseudo-Random Number Generator with Input [DHY02]):**
A pseudo-random number generator with input \((\text{key}, \text{next})\) is called \((T = (t, q_r), \epsilon)\)-secure against Chosen Input Attack (resp. Chosen State Attack or Known Key Attack) if for any adversary \(A\) running in time at most \(t\) and using at most \(q_r\) inputs, the advantage of \(A\) in game CIA (resp. CSA, KKA) is at most \(\epsilon\).

- **CIA:** Restricted game where \(A\) is not allowed to make calls to \(\text{get-key}\) and \(\text{set-state}\), but can make calls to \(\text{get-state}\), \(\text{setinput}\), \(\text{getinput}\), and \(\text{next-ror}\).
- **CSA:** Restricted game where \(A\) is not allowed to make calls to \(\text{get-key}\) and \(\text{setinput}\), but can make calls to \(\text{get-state}\), \(\text{set-state}\), \(\text{getinput}\), and \(\text{next-ror}\).
- **KKA:** Restricted game where \(A\) is not allowed to make calls to \(\text{get-state}\), \(\text{set-state}\), and \(\text{setinput}\), but can make calls to \(\text{get-key}\), \(\text{getinput}\), and \(\text{next-ror}\).

**Comparison with Previous Models:**
- If one removes the procedures \(\text{getinput}\), \(\text{setinput}\), \(\text{get-state}\), \(\text{set-state}\), and \(\text{get-key}\) from the security game, the adversary \(A\) has only access to the \(\text{next-ror}\) procedure. This makes the objective similar to the security games PR and DCA, although the generator definition differs.
- Concerning input compromise, the model distinguishes between an adversary that has access to the input and one that can choose the input. When the key \(K\) remains secret, if \(A\) can choose the auxiliary input \(I\), \(A\) only has access to the state \(S\), and vice versa.
- CIA is similar to IBA (described in Section 3.2.2), but includes the \(\text{get-state}\) procedure, which implies a partial compromise of the internal state in CIA, while it implies a complete compromise in IBA.
- The adversary \(A\) always has access to \(\text{getinput}\), so CIA, CSA, and KKA cannot be directly compared with FWD (which does not concern pseudo-random number generators with input).
- The \(\text{get-key}\) procedure allows \(A\) to get the key, and the associated security property KKA ensures the generator remains safe even if the key is compromised. This can be used to model generators with public parameters, such as those in [BST03] and [BH05].

### Secure Constructions

**Construction Secure Against CSA and CIA:**
- Let \(F\) be a pseudo-random function. Use the \(\text{key}\) algorithm to generate a key \(K\) for \(F\), defining a function \(F_K : \{0, 1\}^n \to \{0, 1\}^n\).
- Define the pseudo-random number generator with input ANSI, as per [ANS85]:
  - \(\text{ANSI.key}\): \(K \leftarrow \{0, 1\}^n; S_0 \leftarrow \{0, 1\}^n\), returns \((K, S_0)\).
  - \(\text{ANSI.next}(S_{i-1}, K, I_i)\): \(y_i \leftarrow F_K(S_{i-1} \oplus F_K(I_i))\), \(S_i \leftarrow F_K(y_i \oplus F_K(I_i))\), returns \((y_i, S_i)\).

**Theorem 5 (Security of ANSI [DHY02]):**
- If \(F\) is modeled as a \((t, 3q_r, \epsilon_F)\)-pseudo-random function, then ANSI is:
  - \(((t, q_r), 2\epsilon_F + \frac{q_r(2q_r-1)}{2^n})\)-secure against CSA.
  - \(((t, q_r), 2\epsilon_F + \frac{(2q_r-1)^2}{2^n})\)-secure against CIA.

**Construction Secure Against KKA:**
- Let \(F\) be a pseudo-random function. Use the \(\text{key}\) algorithm to generate a key \(K\) for \(F\), defining a function \(F_K : \{0, 1\}^n \to \{0, 1\}^n\).
- Define the pseudo-random number generator with input FIPS, as per [DSS00]:
  - \(\text{FIPS.key}\): \(K \leftarrow \{0, 1\}^n; S_0 \leftarrow \{0, 1\}^n\), returns \((K, S_0)\).
  - \(\text{FIPS.next}(S_{i-1}, K, I_i)\): \(y_i \leftarrow F_K(S_{i-1} + I_i \mod 2^n)\), \(S_i \leftarrow S_{i-1} + y_i + 1 \mod 2^n\), returns \((y_i, S_i)\).

**Theorem 6 (Security of FIPS [DHY02]):**
- If \(F\) is modeled as a \((t, q_r, \epsilon_F)\)-pseudo-random function, then FIPS is \(((t, q_r), \epsilon_F + \frac{q_r(q_r-1)^2}{2^{n-1}})\)-secure against KKA.

**Remark 1:**
- The proofs of these theorems rely on the adversary's ability to cause collisions in the inputs to the functions computing the outputs or the next states. However, the independence between successive inputs cannot be completely guaranteed, leading to some uncertainty about the bounds presented in these theorems.

**Forward Security:**
- The forward security of the generators ANSI and FIPS is not part of the security model in [DHY02]. However, if formalized, the restricted game would allow \(A\) to make one call to \(\text{get-state}\) followed by one call to \(\text{get-key}\). Under this definition, the generator ANSI is not forward secure, as the complete compromise of state \(S\) and key \(K\) allows \(A\) to reverse the underlying block cipher and compute past outputs. A similar attack can be mounted on the generator FIPS.

### Security Model From [BST03]

**3.5.1 Description:**
- Barak, Shaltiel, and Tromer [BST03] defined a resilient pseudo-random number generator with input, naming their class "True Random Number Generators."
- Their objective is to model situations where the entropy source can be influenced by an adversary with partial control over it, ensuring the generator is secure against such an adversary.
- They consider a scenario where a manufacturer designs a device whose output is supposed to be a randomness source. An adversary can control up to \(\tau\) Boolean properties of the environment, creating up to \(2^\tau\) different environments.
- The definition of a pseudo-random number generator with input is a stateless algorithm \(G\) that takes two inputs: \(I \in \{0, 1\}^p\) and \(\text{seed} \in \{0, 1\}^s\), and outputs \(G(I, \text{seed}) = R \in \{0, 1\}^\ell\).

**Definition 21 (Pseudo-Random Number Generator with Input [BST03]):**
- A pseudo-random number generator with input is an algorithm \(G\) that, given a first input \(I \in \{0, 1\}^p\) and a second input \(\text{seed} \in \{0, 1\}^s\), outputs \(G(I, \text{seed}) = R \in \{0, 1\}^\ell\).

**Security Game:**
- The security game allows an adversary \(A\) to choose a family of distributions \(F\) of size \(2^\tau\), where each distribution \(D_i\) in \(F\) is a \(k\)-source.
- The game uses procedures described in Figure 3.7:
  1. \(\text{initialize}\): Sets the family \(F\), parses \(F\) as \(2^\tau\) distributions \(D_1, \ldots, D_{2^\tau}\), sets the public parameter \(\text{seed}\), and sets the Boolean parameter \(b\). The parameter \(\text{seed}\) is given to the adversary \(A\).
  2. \(\text{next-ror}\): Challenges \(A\) on its capability to distinguish the output of \(G\) from random. \(A\) chooses a distribution \(D_i \in F\), the challenger samples an input \(I\) from \(D_i\), generates the real output \(R_0 = G(\text{seed}, I)\), and picks a random string \(R_1\). The challenge \(R_b\) is returned to \(A\).
  3. \(\text{finalize}\): Compares the response \(b^*\) from \(A\) with the previously generated bit \(b\).

**Figure 3.7 – Procedures in Security Game BST-RES(τ)**

```plaintext
proc. next-ror(i)
I $← Di
R0 ← G(I, seed)
R1 $← {0, 1}‘
RETURN Rb

proc. initialize(F)
seed $← {0, 1}s;
parse F as {D1,··· ,D2τ}
b $← {0, 1};
OUTPUT seed

proc. finalize(b∗)
IF b = b∗ RETURN 1
ELSE RETURN 0
```

**Definition 22 (Resilience of Pseudo-Random Number Generator with Input [BST03]):**
- A pseudo-random number generator with input \(G : \{0, 1\}^p \times \{0, 1\}^s \to \{0, 1\}^\ell\) is \((t, \tau, \epsilon)\)-Resilient if for any adversary running in time \(t\), with probability \((1 - \epsilon)\) over the choice of \(\text{seed}\), the advantage of \(A\) in game BST-RES(\(\tau\)) is at most \(\epsilon\).

**Comparison with Previous Models:**
- In this security model, the adversary can choose a high-entropy distribution from a finite family of distributions. Once the distribution is chosen, the extraction is processed, and the adversary is challenged on its capacity to distinguish the output from random.
- This security property is related to previous security properties like IBA and CIA, but they are not equivalent due to differences in the generator definitions. Specifically, there are no \(\text{getinput}\) or \(\text{setinput}\) procedures in this model.
- The security model can be seen as an extension of the initial PR model, where the challenger has complete control over the generation of the first internal state. Here, the adversary has some control over this generation by choosing the distribution from which the first internal state will be generated.

**3.5.2 A Secure Construction:**
- Barak, Shaltiel, and Tromer proposed several constructions based on pairwise independent hash function families. They provided two results linking the length of the parameter \(\text{seed}\) with the number of distributions \(2^\tau\), the min-entropy of the distribution \(k\), the size of the input \(p\), and the size of the output \(m\).