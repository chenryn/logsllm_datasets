fresh biometric sample B against Γ.
3.1 Shamir secret sharing
Shamir secret sharing allows a secret s to be divided into
many (n) shares [31]. A threshold number t or more such
shares can be used to reconstruct s, while any (t − 1) or
fewer shares cannot. Indeed, any (t − 1) or fewer shares
leak no information about s.
• In the Shamir secret share generation algorithm, (t −
1) random elements, r1, r2, . . . , rt−1, are ﬁrst picked
from a ﬁnite ﬁeld Fq, where q is a prime, q >
max(n, s). Let ϕ(x) = s + r1x + r2x2 + . . . +
rt−1xt−1 mod q. (Thus, the secret s is encoded as the
free term of ϕ(x).)
Next, shares si are calculated as si = ϕ(IDi), 1 ≤
i ≤ n, where IDi is the identity of si; for example,
IDi = i for 1 ≤ i ≤ n. This share generation step is
denoted as s
(t,n)−→ (s1, s2, . . . , sn) mod q.
132142
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:00:38 UTC from IEEE Xplore.  Restrictions apply. 
• Let {IDi1 , IDi2 , . . . , IDid
} be the identities of shares
(cid:2)
(cid:2)
(cid:2)
) that will participate in the recon-
(s
i2 , . . . , s
i1 , s
struction, where d ≥ t; 1 ≤ ij ≤ n for 1 ≤ j ≤ d. For
id
1 ≤ j ≤ d, deﬁne cij
IDik
mod
−IDij
(cid:2) =
q. The shared secret can be reconstructed as s
(cid:5)d
1≤k≤d,k(cid:4)=j
IDik
(cid:4)
=
j=1 cij
× s
(cid:2)
ij
mod q.
(cid:2)
(cid:2)
(cid:2)
When all participating shares (s
i2 , . . . , s
i1 , s
id
(cid:2)
correct (that is, s
ij
proved that s
as s
) are
= sij , for all 1 ≤ j ≤ d), it can be
(cid:2) = s. This reconstruction step is denoted
(t,n)←− (si1 , si2 , . . . , sid
) mod q.
3.2 Reed-Solomon decoding
In the Shamir secret reconstruction step, if one or more
the recon-
will not be the same as the original secret
participating shares have an incorrect value,
(cid:2)
structed secret s
s.
As noted by [23], Shamir secret sharing is closely related
to the Reed-Solomon code [30] and the set of participating
(cid:2)
(cid:2)
(cid:2)
), can be viewed as a code-
shares, Ω = (s
i2 , . . . , s
i1 , s
id
word. As a result, if there are some error shares but enough
number of correct shares in Ω, the original secret s can still
be reconstructed from Ω with the Reed-Solomon decoding
function.
Several Reed-Solomon decoding functions have been de-
veloped [2, 22]. For simplicity, we use the algorithm given
in [12], which is rephrased for our application below. For all
polynomials of the following algorithm, their coefﬁcients
are computed in Fq.
1. Deﬁne g0(x) =
(cid:4)d
j=1(x − IDij
)
2. Find through polynomial interpolation g1(x) of degree
≤ (d − 1) such that g1(IDij
ij for 1 ≤ j ≤ d.
(cid:2)
) = s
3. Find a polynomial g(x) of degree  (m − (cid:12) σ−t
2. If α ≤ β ≤ (m − (cid:12) σ−t
2 (cid:13)), the expected number of
tries of our improved algorithm select a Bi of size σ to
σ = δ(cid:2)
(cid:2)
σ+1
recover s and pass the check is e
σ+1 .
λ(cid:2)
2 (cid:13)), only one try is needed.
(cid:3)
The ﬁrst case is straightforward as there are no appropri-
ate Bi and the algorithm will brute-force all
combina-
tions. In the third case, there are so many correct elements
in B such that any Bi can be used to recover s and thus the
algorithm needs only one try.
m
σ
(cid:2)
The proof of the second case can be found in the Ap-
pendix of this paper.
(cid:2)
σ << e of the FESI
Our goal is to choose σ to make e
scheme. Given t, β, and |B|, one can brute-force to ﬁnd the
(cid:2)
σ and the corresponding σ.
best e
134144
As described in Section 1, in FESI [32], fA(x) is de-
ﬁned as a discrete function and it returns si when (x = ai).
fA(x) returns a random ˆsi when x (cid:6)= ai. (si are secret
shares generated from secret s with Shamir secret share
function ϕ.) Details are missing on how this discrete func-
tion is stored in FESI.
Both ai and si should be kept secret. One natural way to
hide (cid:2)ai, si(cid:3) is to create some chaff points (cid:2) ˆaj, ˆsj(cid:3), where
ˆaj (cid:6)= ai, ˆsj (cid:6)= si, and store them together [14, 15]. (Note
that (cid:2)ai, si(cid:3) are points on ϕ while (cid:2) ˆaj, ˆsj(cid:3) are not.) In this
way, when the server is compromised, the attacker will still
not be able to ﬁnd ai or si.
According to Lemma 4 of [15], for 0 < μ < 1, with
probability (1 − μ), ζ chaff points will result in at least