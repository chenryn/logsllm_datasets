since e and f are independent, the distribution of (cid:104)z, e + f(cid:105) is actually the
distribution of (cid:104)z, e(cid:105) + f(cid:48) where f(cid:48) ← D√
. From this point, the output of the
reduction is exactly the WHintLWEk
n,q,σ1,σ(cid:48)
(D) sample.
kσ2
kσ2
2
We ﬁxed the domain of the vector z to {−1, 1}k, but actually our reduction
does not depend on the domain.
From Theorem 3 and Theorem 4, we ﬁnally obtain the hardness of the
WHintLWE problem under the hardness assumption of the LWE problem.
Corollary 1. Let n, q, k be positive integers, σ1, σ(cid:48)
satisfying σ1 = σ(cid:48)
exists a polynomial-time reduction from LWEk
which preserves the advantage.
2 , and D be a distribution over Zn×k
(D) to WHintLWEk
2 be positive real numbers
. Then there
(D)
2/(cid:112)σ(cid:48)2
1 + σ(cid:48)2
n,q,σ(cid:48)
1,
1, σ(cid:48)
1σ(cid:48)
n,q,σ1
√
kσ(cid:48)
2
q
5 HDM-PPBA
In this section, we formally introduce a new user-centric privacy-preserving bio-
metric authentication for HD matcher called HDM-PPBA derived from FFB-IPE
in Section 4.3, and analyze its security.
5.1 HDM-PPBA protocol
Our protocol consists of two phases: enrollment, and authentication. The pro-
tocol is based on the proposed FFB-IPE Π = (Setup, KeyGen, Enc, Dec) con-
structed in Section 4 for a secure computation of HD.
5.2 Security Analysis
We formally deﬁne the attack models in Section 3.3 following the approach in [15]
and prove that our HDM-PPBA equipped with 1-sSIM-secure FFB-IPE is secure
against both attacks.
Security Against Passive Attack According to the attack experiment depicted in
Figure 2, we deﬁne the security of FFB-IPE against passive attack as follows.
Deﬁnition 6. The FFB-IPE is secure against passive attack if, for all polynomial-
time adversary A, there exists a cryptographically negligible function negl such
that
|P r(PassiveFFB-IPE
A
(λ) = 1) − 1
2
| < negl(λ).
Protocol 1 Our HDM-PPBA system
Input: x, y ∈ {−1, 1}k, T ∈ R
Output: res ∈ {authenticate, reject}
Registration: An end-user U registers with his/her identity ID and a biometric
template x to the service provider S.
1: An end-user U sets the parameters of FFB-IPE according to the security
2: U generates a master secret key (msk, pp) ← Setup(1λ), and stores it.
3: U generates a key sk ← KeyGen(pp, msk, x) with the end-user’s biometrics
parameter λ.
(x), and sends (IDU , sk, pp) to the service provider S.
4: S stores (IDU , sk, pp).
Authentication: An end-user U retrieves a fresh biometric template, and sends
a ciphertext of it to the service provider S for an authentication.
1: U computes a ciphertext c ← Enc(pp, msk, y), and sends it along with user’s
ID IDU to S.
2: S retrieves the stored values (IDU , sk, pp) at the enrollment phase, computes
an inner-product value z ← Dec(pp, sk, c), and gets the hamming distance
d = (k–z)/2 between the biometrics x and y.
and reject otherwise (d ≥ T ).
3: S output authenticate if a distance d is less than a given threshold T (d < T ),
Theorem 5. The proposed HDM-PPBA scheme in Section 4.3 is secure against
passive attack.
We skip the proof of Theorem 5 since the security against passive attack is
implied by the security against active attack.
Security Against Active Attack
Deﬁnition 7. The FFB-IPE is secure against active attack if, for all polynomial-
time adversary A, there exists a cryptographically negligible function negl such
that
(cid:12)(cid:12)(cid:12)(cid:12)P r(ActiveFFB-IPE
A
(cid:12)(cid:12)(cid:12)(cid:12) < negl(λ).
(λ) = 1) − 1
2
Theorem 6. The proposed HDM-PPBA scheme in Section 4.3 is secure against
active attack.
Proof. The proposed FFB-IPE is proven to achieve the 1-sSIM-security de-
ﬁned in Deﬁnition 2. The security of HDM-PPBA against active attack is an
indistinguishability-based version of the simulation-based security in Deﬁnition 2,
so is straightforward.
A
Experiment 2 Passive Attack Experiment PassiveFFB-IPE
(λ):
1: Given a security parameter λ, the challenger C outputs pp.
2: Given λ and pp, the adversary A generates and outputs x0, x1, and two
) and Y1 =
sequences of messages in {−1, 1}k, say Y0 = (y(1)
0 (cid:105) = (cid:104)x1, y(i)
(y(1)
) such that (cid:104)x0, y(i)
3: Given λ, C runs Setup(1λ) to obtain msk.
4: C chooses a uniform random bit b ∈ {0, 1} and computes sk ←
b ) for all i’s. C sends the se-
0 ,··· , y(Q)
0 , y(2)
1 (cid:105) for all i’s.
KeyGen(pp, msk, xb) and ci = Enc(msk, pp, y(i)
quence C = (c1, c2,··· , cQ) and sk to A.
1 ,··· , y(Q)
1 , y(2)
5: A outputs b(cid:48) ∈ {0, 1}.
6: The output of the experiment is 1 if b = b(cid:48), and 0 otherwise.
1
0
A
(λ):
(msk, pp), and sends pp to the adversary A.
Experiment 3 Active Attack Experiment ActiveFFB-IPE
1: Given a security parameter λ, the challenger C runs Setup(1λ) to obtain
2: A generates and sends x0, x1 ∈ {−1, 1}k to C.
3: C chooses a uniform random bit
4: for i = 1 → Q do
5:
KeyGen(pp, msk, xb), and sends sk to A.
b ∈ {0, 1}, calculates sk ←
such that (cid:104)x0, y(i)
A is queries with y(i)
C computes and sends c ← Enc(pp, msk, y(i)
b ).
0 (cid:105) = (cid:104)x1, y(i)
1 (cid:105).
6:
7: end for
8: A outputs b(cid:48) ∈ {0, 1}.
9: The output of the experiment is 1 if b = b(cid:48), and 0 otherwise.
0 and y(i)
1
6 Performance Evaluation
In this section, we only evaluate the performance of FFB-IPE because (1) a lot
of works have been done for the performance evaluation of TLS, for example,
the one showing a fast implementation of TLS reports that the running time
of a TLS handshake is less than 10 milliseconds on Intel Core 2 Duo E8400 at
3.0 GHz with 4GB RAM [24], and (2) TLS is widely used to protect network
communications and https, a secure http protocol protected by TLS, will now be
the default for all Android Apps as announced by Google [25], so there will be a
high possibility that TLS is applied to services before adopting our HDM-PPBA.
6.1 Experimental Setup
Our primitive was implemented in C++ 11 standard, and performed on Intel
Core i5 CPU running MacOS (64 bit) at 2.9GHz processor with 8GB of memory.
We used g++ compiler of Apple LLVM version 9.1.0.
As an optimization for the implementation, we used power-of-2 moduli p <
q ≤ 264. To be precise, we store elements of Zq and Rq in uint64 t type while
scaling them up for (64 − log q) bits. Then, the modulo q operation is automat-
ically done without any overhead, which makes the implementation very simple
and fast overall. Note that the elements in Rq are rounded oﬀ to the (64− log q)-
th bit after the radix point. Furthermore, the rounding operation (cid:98)(p/q) · x(cid:101) for
x ∈ Zq included in the Dec algorithm is eﬃciently done by adding a constant
and bit-wise shifting. Since (cid:98)(p/q) · x(cid:101) = (cid:98)(p/q)· (x + q/2p)(cid:99), it is done by right-
shifting for (log q − log p) bits after adding a constant q/2p. The source code can
be found in github (https://github.com/dwkim606/IPPBA).
6.2 Parameters Setting with LWE Estimator
We present several parameter sets in case that DS = U ({0, 1}n×k), that is, each
component of the secret matrix is binary. In Table 2, parameter sets I and II
correspond to the case that k = 2048 and k = 145832 (for about 18KB biometric
templates), respectively.
where σ1 = σ · σ∗/(cid:112)kσ2 + (σ∗)2. For the simplicity, we set σ =
By Corollary 1, there exists a reduction from LWEk
k.
Rather than considering direct attacks on WHintLWEk
n,q,σ,σ∗ (DS), we select the
parameters following the reduction from LWE. That is, we set the parameters
which make LWEk
(DS) to be secure against the best attacks, which is more
conservative approach in parameter selection.
n,q,σ1
n,q,σ1
(DS) to WHintLWEk
√
n,q,σ,σ∗ (DS),
2σ1 = σ∗/
√
Note that k denotes the number of secret vectors in the LWE problem, and
it corresponds to the bit length of a biometric in our scheme. A positive integer
n denotes the dimension of secret in the LWE problem. To analyze concrete
hardness of LWE problem for certain parameters, we used Albrecht’s LWE esti-
mator [26]5. It estimates the bit security of certain LWE problems considering
known attacks (dual attack [27], primal attack [28], etc.) on the LWE prob-
lem. We also set our parameters to achieve the correctness of our construction
described in Theorem 1, i.e., the Dec algorithm in Section 4.3 computes the
exact inner product v = (cid:104)x, y(cid:105) except for a negligible probability in the security
parameter λ.
Table 2: Proposed Parameters for our construction satisfying 128-bit security on
LWEk
2(U ({0, 1}n×k))
n,q,σ/
√
λ
Name
k
n
128
I
II
2048
928
145832 1368
q
232
264
σ
p
220
232 2.96 × 105 1.12 × 108
2.39
σ∗
108
Table 3: Implementation results of our FFB-IPE
Parameter Set Biometric
(bits)
Master Secret Key Secret Key Ciphertext
Running Time
msk (MB)
sk (KB)
c (KB) KeyGen (ms) Enc (ms) Dec (ms)
I
II
2048
145832
0.24
26.11
23.81
23.82
15 + 0.33
1177.60
1177.61
1535 + 115
3.12
304
0.0021
0.125
6.3 Implementation Results
Here follows the implementation results of our FFB-IPE for each of the param-
eter sets in Table 3. The size of a master secret key msk, a secret key sk, a
ciphertext c, and the running time of KeyGen, Enc, and Dec algorithms are pre-
sented. Note that the running times for KeyGen (resp. Enc and Dec) was averaged
over 100 times of measurements.
Adapting this result into our PPBA protocol, the master secret key is stored
by end-user, and a secret key (resp. a ciphertext) is sent from the end-user to the
service provider as an enrollment message (resp. a query message). As described
in Section 5, KeyGen, Enc, and Dec algorithms are included in the enrollment
phase, the query phase, and the authentication phase, respectively.
The size ratio of sk to x, and that of c to y is no larger than 100 which
is somewhat reasonable to be used in practice. The most notable point of our
implementation result is running time of algorithms: for a 2048-bit message