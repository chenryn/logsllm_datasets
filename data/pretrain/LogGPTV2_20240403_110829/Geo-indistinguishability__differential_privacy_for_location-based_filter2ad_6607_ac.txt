versary who already knows all values except individual’s i, gains
no extra knowledge from the reported answer, regardless of side
knowledge about i’s value [17].
Abstracting from side information.
A major difference of geo-indistinguishability, compared to sim-
ilar approaches from the literature, is that it abstracts from the side
information available to the adversary, i.e. from the prior distribu-
tion. This is a subtle issue, and often a source of confusion, thus we
would like to clarify what “abstracting from the prior” means. The
goal of a privacy deﬁnition is to restrict the information leakage
caused by the observation. Note that the lack of leakage does not
mean that the user’s location cannot be inferred (it could be inferred
by the prior alone), but instead that the adversary’s knowledge does
not increase due to the observation.
However, in the context of LBSs, no privacy deﬁnition can en-
sure a small leakage under any prior, and at the same time allow
reasonable utility. Consider, for instance, an attacker who knows
that the user is located at some airport, but not which one. The at-
tacker’s prior knowledge is very limited, still any useful LBS query
should reveal at least the user’s city, from which the exact location
(i.e.
the city’s airport) can be inferred. Clearly, due to the side
information, the leakage caused by the observation is high.
So, since we cannot eliminate leakage under any prior, how can
we give a reasonable privacy deﬁnition without restricting to a par-
ticular one? First, we give a formulation (Deﬁnition 3.1) which
does not involve the prior at all, allowing to verify it without know-
ing the prior. At the same time, we give two characterizations
which explicitly quantify over all priors, shedding light on how the
prior affects the privacy guarantees.
Finally, we should point out that differential privacy abstracts
from the prior in exactly the same way. Contrary to what is some-
times believed, the user’s value is not protected under any prior
information. Recalling the well-known example from [14], if the
adversary knows that Terry Gross is two inches shorter than the av-
erage Lithuanian woman, then he can accurately infer the height,
even if the average is release in a differentially private way (in fact
no useful mechanism can prevent this leakage). Differential pri-
vacy does ensure that her risk is the same whether she participates
in the database or not, but this might me misleading: it does not
imply the lack of leakage, only that it will happen anyway, whether
she participates or not!
3.3 Protecting location sets
So far, we have assumed that the user has a single location that
he wishes to communicate to a service provider in a private way
(typically his current location). In practice, however, it is common
for a user to have multiple points of interest, for instance a set of
905past locations or a set of locations he frequently visits. In this case,
the user might wish to communicate to the provider some informa-
tion that depends on all points; this could be either the whole set of
points itself, or some aggregate information, for instance their cen-
troid. As in the case of a single location, privacy is still a require-
ment; the provider is allowed to obtain only approximate informa-
tion about the locations, their exact value should be kept private. In
this section, we discuss how -geo-indistinguishability extends to
the case where the secret is a tuple of points x = (x1, . . . , xn).
Similarly to the case of a single point, the notion of distance
is crucial for our deﬁnition. We deﬁne the distance between two
tuples of points x = (x1, . . . , xn), x(cid:48) = (x(cid:48)
1, . . . , x(cid:48)
n) as:
d∞(x, x
(cid:48)
) = maxi d(xi, x(cid:48)
i)
Intuitively, the choice of metric follows the idea of reasoning within
a radius r: when d∞(x, x(cid:48)) ≤ r, it means that all xi, x(cid:48)
i are within
distance r from each other. All deﬁnitions and results of this section
can be then directly applied to the case of multiple points, by using
d∞ as the underlying metric. Enjoying (cid:96)-privacy within a radius
r means that two tuples at most r away from each other, should
produce distributions at most r apart.
Reporting the whole set.
A natural question then to ask is how we can obfuscate a tuple
of points, by independently applying an existing mechanism K0
to each individual point, and report the obfuscated tuple. Starting
from a tuple x = (x1, . . . , xn), we independently apply K0 to
each xi obtaining a reported point zi, and then report the tuple z =
(z1, . . . , zn). Thus, the probability that the combined mechanism
K reports z, starting from x, is the product of the probabilities to
obtain each point zi, starting from the corresponding point xi, i.e.
K(x)(z) =(cid:81)
i K0(xi)(zi).
The next question is what level of privacy does K satisfy. For
simplicity, consider a tuple of only two points (x1, x2), and assume
that K0 satisﬁes -geo-indistinguishability. At ﬁrst look, one might
expect the combined mechanism K to also satisfy -geo-indistin-
guishability, however this is not the case. The problem is that the
two points might be correlated, thus an observation about x1 will
reveal information about x2 and vice versa. Consider, for instance,
the extreme case in which x1 = x2. Having two observations about
the same point reduces the level of privacy, thus we cannot expect
the combined mechanism to provide the same level of privacy.
Still, if K0 satisﬁes -geo-indistinguishability, then K can be
shown to satisfy n-geo-indistinguishability, i.e. a level of privacy
that scales linearly with n. Due to this scalability issue, the tech-
nique of independently applying a mechanism to each point is only
useful when the number of points is small. Still, this is sufﬁcient
for some applications, such as the case study of Section 5. Note,
however, that this technique is by no means the best we can hope
for: similarly to standard differential privacy [7, 32], better results
could be achieved by adding noise to the whole tuple x, instead
of each individual point. We believe that using such techniques
we can achieve geo-indistinguishability for a large number of lo-
cations with reasonable noise, leading to practical mechanisms for
highly mobile applications. We have already started exploring this
direction of future work.
Reporting an aggregate location.
Another interesting case is when we need to report some aggre-
gate information obtained by x, for instance the centroid of the
tuple.
In general we might need to report the result of a query
f : X n → X . Similarly to the case of standard differential privacy,
we can compute the real answer f (x) and the add noise by apply-
ing a mechanism K to it. If f is ∆-sensitive wrt d, d∞, meaning
that d(f (x), f (x(cid:48))) ≤ ∆d∞(x, x(cid:48)) for all x, x(cid:48), and K satisﬁes
geo-indistinguishability, then the composed mechanism K ◦ f can
be shown to satisfy ∆-geo-indistinguishability.
Note that when dealing with aggregate data, standard differen-
tial privacy becomes a viable option. However, one needs to also
examine the loss of utility caused by the added noise. This highly
depends on the application: differential privacy is suitable for pub-
lishing aggregate queries with low sensitivity, meaning that changes
in a single individual have a relatively small effect on the outcome.
On the other hand, location information often has high sensitiv-
ity. A trivial example is the case where we want to publish the
complete tuple of points. But sensitivity can be high even for ag-
gregate information: consider the case of publishing the centroid
of 5 users located anywhere in the world. Modifying a single user
can hugely affect their centroid, thus achieving differential privacy
would require so much noise that the result would be useless. For
geo-indistinguishability, on the other hand, one needs to consider
the distance between points when computing the sensitivity. In the
case of the centroid, a small (in terms of distance) change in the
tuple has a small effect on the result, thus geo-indistinguishability
can be achieved with much less noise.
4. A MECHANISM TO ACHIEVE GEO-IN-
DISTINGUISHABILITY
In this section we present a method to generate noise so to sat-
isfy geo-indistinguishability. We model the location domain as a
discrete3 Cartesian plane with the standard notion of Euclidean dis-
tance. This model can be considered a good approximation of the
Earth surface when the area of interest is not too large.
(a) First, we deﬁne a mechanism to achieve geo-indistinguishability
in the ideal case of the continuous plane.
(b) Then, we discretized the mechanism by remapping each point
generated according to (a) to the closest point in the discrete
domain.
(c) Finally, we truncate the mechanism, so to report only points
within the limits of the area of interest.
4.1 A mechanism for the continuous plane
Following the above plan, we start by deﬁning a mechanism for
geo-indistinguishability on the continuous plane. The idea is that
whenever the actual location is x0 ∈ R2, we report, instead, a point
x ∈ R2 generated randomly according to the noise function. The
latter needs to be such that the probabilities of reporting a point in a
certain (inﬁnitesimal) area around x, when the actual locations are
x0 and x(cid:48)
0 respectively, differs at most by a multiplicative factor
e− d(x0,x(cid:48)
0).
We can achieve this property by requiring that the probability
of generating a point in the area around x decreases exponentially
with the distance from the actual location x0. In a linear space this
is exactly the behavior of the Laplace distribution, whose proba-
bility density function (pdf) is /2 e− |x−µ|. This distribution has
been used in the literature to add noise to query results on statistical
databases, with µ set to be the actual answer, and it can be shown
to satisfy -differential privacy [15].
There are two possible deﬁnitions of Laplace distribution on high-
er dimensions (multivariate Laplacians). The ﬁrst one, investigated
3 For applications with digital interface the domain of interest is
discrete, since the representation of the coordinates of the points is
necessarily ﬁnite.
906Drawing a point (r, θ) from the polar Laplacian
1. draw θ uniformly in [0, 2π)
2. draw p uniformly in [0, 1) and set r = C−1
(p)

Figure 3: Method to generate Laplacian noise.
Thanks to the fact that R and Θ are independent, in order to draw
a point (r, θ) from D(r, θ) it is sufﬁcient to draw separately r and
θ from D,R(r) and D,Θ(θ) respectively.
Since D,Θ(θ) is constant, drawing θ is easy: it is sufﬁcient to
generate θ as a random number in the interval [0, 2π) with uniform
distribution.
We now show how to draw r. Following standard lines, we con-
sider the cumulative distribution function (cdf) C(r):
D,R(ρ)dρ = 1 − (1 +  r) e
C(r) =
− r
(cid:90) r
0
Intuitively, C(r) represents the probability that the radius of the
random point falls between 0 and r. Finally, we generate a random
number p with uniform probability in the interval [0, 1), and we set
r = C−1
(p). Note that

(cid:0)W−1( p−1
e ) + 1(cid:1)

−1

(p) = − 1
C
where W−1 is the Lambert W function (the −1 branch), which can
be computed efﬁciently and is implemented in several numerical
libraries (MATLAB, Maple, GSL, . . . ).
4.2 Discretization
We discuss now how to approximate the Laplace mechanism on
a grid G of discrete Cartesian coordinates. Let us recall the points
(a) and (b) of the plan, in light of the development so far: Given the
actual location x0, report the point x in G obtained as follows:
(a) ﬁrst, draw a point (r, θ) following the method in Figure 3,
(b) then, remap (r, θ) to the closest point x on G.
We will denote by K : G → P(G) the above mechanism. In
summary, K(x0)(x) represents the probability of reporting the
point x when the actual point is x0.
It is not obvious that the discretization preserves geo-indistingui-
shability, due to the following problem: In principle, each point x
in G should gather the probability of the set of points for which x
is the closest point in G, namely
R(x) = {y ∈ R2 |∀x
(cid:48) ∈ G. d(y, x
) ≤ d(y, x
)}
(cid:48)
(cid:48)
However, due to the ﬁnite precision of the machine, the noise gen-
erated according to (a) is already discretized in accordance with
the polar system. Let W denote the discrete set of points actually
generated in (a). Each of those points (r, θ) is drawn with the prob-
ability of the area between r, r + δr, θ and θ + δθ, where δr and δθ
denote the precision of the machine in representing the radius and
the angle respectively. Hence, step (b) generates a point x in G with
the probability of the set RW (x) = R(x) ∩ W. This introduces
some irregularity in the mechanism, because the region associated
to RW (x) has a different shape and area depending on the position
of x relatively to x0. The situation is illustrated in Figure 4 with
R0 = RW (x0) and R1 = RW (x1).
Geo-indistinguishability of the discretized mechanism.
We now analyze the privacy guarantees provided by our dis-
cretized mechanism. We show that the discretization preserves
Figure 2: The pdf of two planar Laplacians, centered at
(−2,−4) and at (5, 3) respectively, with  = 1/5.
in [27], and used also in [17], is obtained from the standard Lapla-
cian by replacing |x− µ| with d(x, µ). The second way consists in
generating each Cartesian coordinate independently, according to
a linear Laplacian. For reasons that will become clear in the next
paragraph, we adopt the ﬁrst approach.
The probability density function.
the pdf of our noise mechanism, on any other point x ∈ R2, is:
Given the parameter  ∈ R+, and the actual location x0 ∈ R2,
D(x0)(x) =
− d(x0,x)
2
2 π
e
(1)
where 2/2 π is a normalization factor. We call this function planar
Laplacian centered at x0. The corresponding distribution is illus-
trated in Figure 2. It is possible to show that (i) the projection of a
planar Laplacian on any vertical plane passing by the center gives
a (scaled) linear Laplacian, and (ii) the corresponding mechanism
satisﬁes -geo-indistinguishability. These two properties would not