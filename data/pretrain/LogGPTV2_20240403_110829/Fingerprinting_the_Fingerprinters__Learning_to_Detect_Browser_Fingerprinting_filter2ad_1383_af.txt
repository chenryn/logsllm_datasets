in timing information can potentially leak entropy.
timing
2) Animation
to
using
ﬁngerprinting, we
frame
requestAnimationFrame
rate of content
rendering in a browser. The browser
guarantees that it will execute the callback function passed
to requestAnimationFrame before it repaints the view.
The browser callback rate generally matches the display
refresh rate [28] and the number of callbacks within an
interval can capture the frame rate. The differences in frame
rates can potentially leak entropy.
3) Audio ﬁngerprinting: Englehardt and Narayanan [54] ﬁrst
reported the audio ﬁngerprinting technique that uses the
AudioContext API. Speciﬁcally,
the audio signal gen-
erated with AudioContext varies across devices and
browsers. Audio ﬁngerprinting seems to have evolved. We
identify several cases in which ﬁngerprinting scripts used
the AudioContext API
to capture additional proper-
ties such as numberOfInputs, numberOfOutputs, and
destination among many others properties. In addition
to reading AudioContext properties, we also ﬁnd cases
in which canPlayType is used to extract the audio codecs
supported by the device. This additional information exposed
by the AudioContext API can potentially leak entropy.
4) Sensors ﬁngerprinting: Prior work has shown that
the
device sensors can be abused for browser ﬁngerprinting
[43], [47], [50]. We ﬁnd several
instances of previously
known and unknown sensors being used by ﬁngerprint-
ing scripts. Speciﬁcally, we ﬁnd previously known sensors
[47] such as devicemotion and deviceorientation
and, more importantly, previously unknown sensors such as
userproximity being used by ﬁngerprinting scripts.
VII. LIMITATIONS
In this section, we discuss some of the limitations of FP-
INSPECTOR’s detection and mitigation components. Since FP-
INSPECTOR detects ﬁngerprinting at the granularity of a script,
an adversarial website can disperse ﬁngerprinting scripts into
several chunks to avoid detection or amalgamate all scripts—
functional and ﬁngerprinting—into one to avoid enforcement
of mitigation countermeasures.
Evading detection through script dispersion. For detec-
tion, FP-INSPECTOR only considers syntactic and semantic
relationship within scripts and does not considers relationship
across scripts. Because of its current design, FP-INSPECTOR
may be challenged in detecting ﬁngerprinting when the re-
sponsible code is divided across several scripts. However, FP-
INSPECTOR can be extended to capture interaction among
scripts by more deeply instrumenting the browser. For ex-
ample, prior approaches such as AdGraph [62] and JSGraph
[69] instrument browsers to capture cross-script interaction.
Future versions of FP-INSPECTOR can also implement such
instrumentation; in particular, FP-INSPECTOR can be extended
to capture the parent-child relationships of script inclusion.
To avoid trivial detection through parent-child relationships,
the script dispersion technique would need to be embed each
chunk into a website from an independent ancestor node,
and return the results to seemingly independent servers. Thus,
script dispersion also has a maintenance cost: each update to
the ﬁngerprinting script will require the distribution of script
into several chunks along with extensive testing to ensure
correct implementation.
Evading countermeasures through script amalgamation.
To restrict ﬁngerprinting, FP-INSPECTOR’s most effective
countermeasure (i.e. targeted API restriction) is applied at the
granularity of a script. FP-INSPECTOR may break websites
where all of the scripts are amalgamated in a single script.
However, more granular enforcement can be used to effec-
tively prevent ﬁngerprinting in such cases. For example, the
instrumentation used by future versions of FP-INSPECTOR can
be extended to track the execution of callbacks and target those
related to ﬁngerprinting. It is noteworthy that—similar to script
dispersion—script amalgamation has a maintenance cost: each
update to any of the script will require the amalgamation of all
scripts into one. Script amalgamation could also be used as a
countermeasure against ad and tracker blockers, which would
introduce the same type of breakage. However, anecdotal
evidence suggests that
the barriers to use are sufﬁciently
high to prevent widespread deployment of amalgamation as
a countermeasure against privacy tools.
VIII. CONCLUSION
We presented FP-INSPECTOR, a machine learning based
syntactic-semantic approach to accurately detect browser ﬁn-
gerprinting behaviors. FP-INSPECTOR outperforms heuristics
from prior work by detecting 26% more ﬁngerprinting scripts
and helps reduce website breakage by 2X. FP-INSPECTOR’s
deployment showed that browser ﬁngerprinting is more preva-
lent on the web now than ever before. Our measurement study
on the Alexa top-100K websites showed that ﬁngerprinting
scripts are deployed on 10.18% of the websites by 2,349
different domains.
We plan to report the domains serving ﬁngerprinting scripts
to tracking protection lists such as Disconnect [12] and
EasyPrivacy [14]. FP-INSPECTOR also helped uncover ex-
ploitation of several new APIs that were previously not known
to be used for browser ﬁngerprinting. We plan to report
the names and statistics of these APIs to privacy-oriented
browser vendors and standards bodies. To foster follow-up
research, we will release our patch to OpenWPM, ﬁnger-
printing countermeasures prototype extension, list of newly
discovered ﬁngerprinting vendors, and bug reports submitted
to tracking protection lists, browser vendors, and standards
bodies at https://uiowa-irl.github.io/FP-Inspector.
ACKNOWLEDGEMENTS
The authors would like to thank Charlie Wolfe (NSF REU
Scholar) for his help with the breakage analysis. A part of this
work was carried out during the internship of the lead author
at Mozilla. This work is supported in part by the National
Science Foundation under grant numbers 1715152, 1750175,
1815131, and 1954224.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:55 UTC from IEEE Xplore.  Restrictions apply. 
1156
REFERENCES
[1] Adscore privacy policy. https://www.adscore.com/privacy-policy.
[2] Apple Declares War on Browser Fingerprinting, the Sneaky Tactic That
Tracks You in Incognito Mode. https://gizmodo.com/apple-declares-
war-on-browser-ﬁngerprinting-the-sneak-1826549108.
[3] Brave Browser Fingerprinting Protection Mode.
https://github.com/
brave/browser-laptop/wiki/Fingerprinting-Protection-Mode.
[4] C3 Metrics privacy policy. https://c3metrics.com/privacy/.
[5] Canvas Defender. https://multilogin.com/canvas-defender/.
[6] Cliqz Content Blocking Library. https://github.com/cliqz-oss/adblocker.
[7] Combating Fingerprinting with a Privacy Budget Explainer.
https:
//github.com/bslassey/privacy-budget.
[8] Default on Cookie Restrictions Excerpt.
https://mozilla.report/post/
projects/cookie restrictions.kp/.
[9] Disconnect
policy
review for
adscore.
disconnectme/disconnect-tracking-protection/commit/
9666265d0a26fbcc65a20c1021517a44a5ade580.
[10] Disconnect
policy
review
for
c3metrics.
github.com/disconnectme/disconnect-tracking-protection/
blob/940d5e6da8fbc738a747a30328c397c4f453683a/
descriptions.md#policy-review-3.
https://github.com/
https://
[11] Disconnect
tracking
deﬁnition.
trackerprotection#deﬁnition-of-tracking.
[12] Disconnect
tracking
protection
lists.
https://disconnect.me/
https://disconnect.me/
trackerprotection.
https:
[13] DoubleVerify, Product Privacy Notice.
https://web.archive.org/web/
20191130014642/https://www.doubleverify.com/privacy/.
[14] EasyPrivacy. https://easylist.to/easylist/easylist.txt.
[15] Fingerprinting Defenses in The Tor Browser. https://www.torproject.org/
projects/torbrowser/design/#ﬁngerprinting-defenses.
[16] Fingerprintjs2 ﬁngerprinting script. https://ﬁngerprintjs.com/.
[17] Firefox
Fingerprinting Blocking Breakage Bugs.
//bugzilla.mozilla.org/show bug.cgi?id=1527013.
[18] Firm uses
typing
users.
https://arstechnica.com/tech-policy/2010/02/ﬁrm-uses-typing-cadence-
to-ﬁnger-unauthorized-users/.
unauthorized
cadence
ﬁnger
[19] Full Third-Party Cookie Blocking and More. https://webkit.org/blog/
to
10218/full-third-party-cookie-blocking-and-more/.
[20] How to block ﬁngerprinting with Firefox.
https://blog.mozilla.org/
ﬁrefox/how-to-block-ﬁngerprinting-with-ﬁrefox/.
[21] Improving Privacy Without Breaking The Web. https://blog.mozilla.org/
data/2018/01/26/improving-privacy-without-breaking-the-web/.
[22] Integral Ad Science, Privacy Policy.
https://web.archive.org/web/
20191130014644/https://integralads.com/privacy-policy/.
[23] Iovation
Fraud
https://web.archive.org/web/
20191130164107/https://www.iovation.com/fraudforce-fraud-detection-
prevention.
Protection.
[24] MDN Web APIs. https://developer.mozilla.org/en-US/docs/Web/API.
[25] MediaMath
ﬁngerprinting
(MathTag)
script.
https://
www.mediamath.com/.
[26] Mozilla postpones default blocking of
in
https://www.computerworld.com/article/2497782/mozilla-
Firefox.
postpones-default-blocking-of-third-party-cookies-in-ﬁrefox.html.
third-party cookies
[27] Privacy Badger. https://www.eff.org/privacybadger.
[28] requestAnimationFrame API.
US/docs/Web/API/window/requestAnimationFrame.
https://developer.mozilla.org/en-
[29] Same-origin security model
- Resource Timing APIs.
w3c.github.io/perf-security-privacy/#same-origin-security-model.
[30] The Tapad Graph. https://www.tapad.com/the-tapad-graph.
[31] Tor browser bug - reduced time precison to mitimate ﬁngerprinting.
https://
https://trac.torproject.org/projects/tor/ticket/1517.
[32] Tor Browser Fingerprinting Bugs. https://trac.torproject.org/projects/tor/
query?keywords=⇠tbb-ﬁngerprinting.
[33] W3C Fingerprinting Guidance.
guidance.
https://w3c.github.io/ﬁngerprinting-
[34] W3C. Privacy Interest Group Charter.
https://www.w3.org/2011/07/
privacy-ig-charter.
[35] webRequest API.
https://developer.mozilla.org/en-US/docs/Mozilla/
Add-ons/WebExtensions/API/webRequest.
[36] Webshrinker Website Categorization. https://www.webshrinker.com/.
[37] ACAR, G., EUBANK, C., ENGLEHARDT, S.,
JUAREZ, M.,
NARAYANAN, A., AND DIAZ, C. The Web Never Forgets: Persistent
Tracking Mechanisms in the Wild. In CCS (2014).
[38] ACAR, G., JUAREZ, M., NIKIFORAKIS, N., DIAZ, C., G ¨URSES, S.,
PIESSENS, F., AND PRENEEL, B. FPDetective: dusting the web for
ﬁngerprinters. In Proceedings of CCS (2013), ACM.
[39] AL-FANNAH, N. M., LI, W., AND MITCHELL, C. J. Beyond Cookie
Monster Amnesia: Real World Persistent Online Tracking. In Informa-
tion Security Conference (2018).
[40] ALACA, F., AND VAN OORSCHOT, P. Device Fingerprinting for Aug-
menting Web Authentication: Classiﬁcation and Analysis of Methods.
In Proceedings of the 32nd Annual Conference on Computer Security
Applications (ACSAC) (2016).
[41] AZAD, B. A., STAROV, O., LAPERDRIX, P., AND NIKIFORAKIS, N.
Web runner 2049: Evaluating third-party anti-bot services.
In 17th
Conference on Detection of Intrusions and Malware & Vulnerability
Assessment (DIMVA) (2020).
[42] BLONDEL, V. D., GUILLAUME, J.-L., LAMBIOTTE, R., AND LEFEB-
VRE, E. Fast unfolding of communities in large networks. In Journal
of Statistical Mechanics: Theory and Experiment (2008).
[43] BOJINOV, H., MICHALEVSKY, Y., NAKIBLY, G., AND BONEH, D.
Mobile Device Identiﬁcation via Sensor Fingerprinting. In arXiv (2014).
[44] BURSZTEIN, E., MALYSHEV, A., PIETRASZEK, T., AND THOMAS, K.
Picasso: Lightweight Device Class Fingerprintingfor Web Clients.
In
ACM CCS Workshop on Security and Privacy in Smartphones and
Mobile Devices (SPSM) (2016).
[45] CAO, S. Y., AND WIJMANS, E.
(cross-)browser ﬁngerprinting via os
In Proceedings of the 2017 Network &
and hardware level features.
Distributed System Security Symposium, NDSS (2017), vol. 17.
[46] CURTSINGER, C., LIVSHITS, B., ZORN, B., AND SEIFERT, C. ZOZ-
In
ZLE: Fast and Precise In-Browser JavaScript Malware Detection.
USENIX Security Symposium (2011).
[47] DAS, A., ACAR, G., BORISOV, N., AND PRADEEP, A. The Web’s
Sixth Sense:A Study of Scripts Accessing Smartphone Sensors. In CCS
(2018).
[48] DATTA, A., LU, J., AND TSCHANTZ, M. C. The effectiveness of
privacy enhancing technologies against ﬁngerprinting. arXiv preprint
arXiv:1812.03920 (2018).
[49] DAVIS, W.
BlueCava Touts Device Fingerprinting.
https:
//web.archive.org/web/20150928090154/https://www.mediapost.com/
publications/article/166916/bluecava-touts-device-ﬁngerprinting.html,
2012.
[50] DEY, S., ROY, N., XU, W., CHOUDHURY, R. R., AND SRI-
HARINELAKUDITI. AccelPrint: Imperfections of accelerometers make
smartphones trackable. In Proceeding of the 21st Annual Network and
Distributed System Security Symposium (NDSS) (2014).
[51] ECKERSLEY, P. How unique is your web browser?
In Privacy
Enhancing Technologies (2010), Springer.
[52] EDELSTEIN, A. Protections Against Fingerprinting and Cryptocurrency
Mining Available in Firefox Nightly and Beta. https://blog.mozilla.org/
futurereleases/2019/04/09/protections-against-ﬁngerprinting-and-
cryptocurrency-mining-available-in-ﬁrefox-nightly-and-beta/, 2019.
[53] ENGLEHARDT, S.
The Hidden Perils of Cookie Syncing.
https://freedom-to-tinker.com/2014/08/07/the-hidden-perils-of-cookie-
syncing/, 2014.
[54] ENGLEHARDT, S., AND NARAYANAN, A. Online Tracking: A 1-
million-site Measurement and Analysis. In ACM Conference on Com-
puter and Communications Security (CCS) (2016).
[55] FASS, A., BACKES, M., AND STOCK, B.
Jstap: A static pre-ﬁlter
for malicious javascript detection. In Proceedings of the 32nd Annual
Conference on Computer Security Applications (ACSAC) (2019).
[56] FIFIELD, D., AND EGELMAN, S. Fingerprinting web users through font
metrics. In Financial Cryptography and Data Security. Springer, 2015,
pp. 107–124.
[57] FOUAD, I., BIELOVA, N., LEGOUT, A., AND SARAFIJANOVIC-DJUKIC,
N. Missed by Filter Lists: Detecting Unknown Third-Party Trackers with
Invisible Pixels.
In Proceedings on Privacy Enhancing Technologies
(PETS) (2020).
[58] FOWLER, G. A. Think you’re anonymous online? A third of popular
https://www.washingtonpost.com/
websites are ’ﬁngerprinting’ you.
technology/2019/10/31/think-youre-anonymous-online-third-popular-
websites-are-ﬁngerprinting-you/, 2019.
[59] GOMEZ-BOIX, A., LAPERDRIX, P., AND BAUDRY, B. Hiding in the
Crowd: an Analysis of the Effectiveness of Browser Fingerprinting at
Large Scale. In The Web Conference (2018).
[60] IKRAM, M., ASGHAR, H. J., KAAFAR, M. A., MAHANTI, A., AND
KRISHNAMURTHY, B. Towards Seamless Tracking-Free Web: Improved
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:55 UTC from IEEE Xplore.  Restrictions apply. 
1157
Detection of Trackers via One-class Learning . In Privacy Enhancing
Technologies Symposium (PETS) (2017).
[61] IQBAL, U., SHAFIQ, Z., AND QIAN, Z. The Ad Wars: Retrospective
Measurement and Analysis of Anti-Adblock Filter Lists. In IMC (2017).
[62] IQBAL, U., SNYDER, P., ZHU, S., LIVSHITS, B., QIAN, Z., AND
SHAFIQ, Z. AdGraph: A Graph-Based Approach to Ad and Tracker
Blocking. In To appear in the Proceedings of the IEEE Symposium on
Security & Privacy (2020).
[63] JOHN ROSS QUINLAN. Induction of decision trees. Kluwer Academic
Publisher, 1986.
[64] LAPERDRIX, P. Browser Fingerprinting: An Introduction and the
https://blog.torproject.org/browser-ﬁngerprinting-
Challenges Ahead.
introduction-and-challenges-ahead, 2019.
[65] LAPERDRIX, P., AVOINE, G., BAUDRY, B., AND NIKIFORAKIS, N.
Morellian Analysis for Browsers: Making Web Authentication Stronger
with Canvas Fingerprinting. In International Conference on Detection of
Intrusions and Malware, and Vulnerability Assessment (DIMVA) (2019).
[66] LAPERDRIX, P., BIELOVA, N., BAUDRY, B., AND AVOINE, G. Browser
ﬁngerprinting: A survey. arXiv preprint arXiv:1905.01051 (2019).
[67] LAPERDRIX, P., RUDAMETKIN, W., AND BAUDRY, B. Beauty and
the Beast: Diverting modern web browsers to build unique browser
ﬁngerprints. In IEEE Symposium on Security and Privacy (2016).
[68] LAUINGER, T., CHAABANE, A., ARSHAD, S., ROBERTSON, W., WIL-
SON, C., AND KIRDA, E. Thou Shalt Not Depend on Me: Analysing
the Use of Outdated JavaScript Libraries on the Web. In Network and
Distributed System Security Symposium (NDSS) (2017).
[69] LI, B., VADREVU, P., LEE, K. H., AND PERDISCI, R.
JSgraph:
Enabling Reconstruction of Web Attacks via Efﬁcient Tracking of
Live In-Browser JavaScript Executions.