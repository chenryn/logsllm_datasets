we conduct measurements from 4 vantage points outside China,
viz, in US, UK, Germany, and Japan, using instances on Amazon
EC2, to targets inside China. This dataset includes top 33 Chinese
websites chosen from the same Alexa’s top 10,000 websites using
the same method as in § 3.3 except they are inside China. By doing
the bi-directional evaluation, we are in hope to examine if our
4A possible reason for doing this could be achieving bi-directional information barriers
such as censoring what outsiders can see or restricting certain services, e.g., VPN.
new hypotheses/strategies work well for both directions and the
implementations/policies of the GFW in both directions are the
same.
7.1 Evading HTTP censorship
There are 4 basic strategies that we evaluate in this subsection.
These include two improved strategies based on previous strategies.
These still worked but had high “Failure 1” and “Failure 2” rates.
Specifically, they are TCB Teardown with RST and In-order Data
Overlapping. The other two are new strategies viz., Resync-Desync
and TCB Reversal. Note that these latter strategies explicitly leverage
the new features that only exist in the evolved GFW model. We
combine them with the aforementioned existing strategies that
work for the old GFW model, in order to defeat both GFW models
(i.e., the objective is to defeat the GFW regardless of whether an
old GFW model or an evolved model is encountered, or both).
Making old strategies robust. We make the TCB Teardown with
RST strategy more robust by integrating within it, the sending
of a “desynchronization packet” mentioned in §4. We send this
desynchronization packet right after the RST packet(s) and before
the legitimate HTTP request, to address the case wherein the GFW
enters the “resynchronization state” due to the RST packets. We
improve the reliability of the In-order Data Overlapping strategy by
using more carefully chosen insertion packets to reduce potential
interference from middleboxes, or because of hitting the server.
Accounting for both old and new GFW models. We combine
the Resync-Desync strategy with the TCB Creation with SYN strategy.
The latter can evade the old GFW model by causing the creation of
a false TCB, while the former can desynchronize the evolved GFW
model by forcing them into the resynchronization state first. Specif-
ically, as illustrated in Fig. 3, we will send two SYN insertion packets
(both with wrong sequence numbers), one before the legitimate
3-way handshake and one after, and followed by a desynchroniza-
tion packet and then the HTTP request. Note that the first SYN
insertion packet followed by the legitimate SYN does also cause
an evolved GFW to enter the resynchronization state; however, it
is later resynchronized with SYN/ACK packet. We therefore need
another SYN insertion packet after the handshake to cause the
IMC ’17, November 1–3, 2017, London, UK
Vantage Points
Inside China
Outside China
Strategy
Improved TCB Teardown
Improved In-order Data Overlapping
TCB Creation + Resync/Desync
TCB Teardown + TCB Reversal
INTANG Performance
Improved TCB Teardown
Improved In-order Data Overlapping
TCB Creation + Resync/Desync
TCB Teardown + TCB Reversal
Failure 1
Failure 2
Success
Max
98.2%
97.1%
98.1%
98.2%
Avg. Min Max Avg.
Avg. Min Max
Min
0.0% 5.4% 1.1%
6.7%
95.8% 1.7%
89.2%
3.1%
0.0% 5.2% 1.1%
8.9%
94.5% 2.9%
86.7%
4.4%
0.0% 5.5% 1.1%
95.6% 1.9%
7.0%
88.5%
3.3%
0.0% 5.7% 1.1%
5.6%
90.2%
96.2% 1.7%
2.6%
0.0% 3.5% 0.6%
3.0%
93.7% 100.0% 98.3% 0.0%
0.9%
0.3% 6.8% 3.5%
7.6%
89.8% 4.6%
85.6%
6.8%
0.6% 7.0% 3.7%
89.4%
92.7% 1.3%
6.2%
3.6%
84.6% 2.4% 18.6% 12.9% 0.9% 4.0% 2.6%
78.1%
84.6%
89.5% 5.5%
0.1% 7.9% 3.3%
92.9%
96.0%
95.6%
93.1%
7.1%
8.7%
Table 4: Success rate of new strategies
evolved GFW devices to “re-transition” into the resynchronization
state.
We combine the TCB Reversal strategy with the TCB Teardown
with RST strategy. Specifically, as shown in Fig. 4, we first send a
fake SYN/ACK packet from the client to the server to create a false
TCB on the evolved GFW device. Next, we establish the legitimate
3-way handshake, which invalid with respect to the evolved GFW
due to the existing TCB. Then we send a RST insertion packet to
teardown the TCB on the old GFW model, followed by the HTTP
request.
Avoiding interference from middleboxes or server. When
crafting “insertion” packet, we choose the insertion packets wisely
so as to not experience interference from the middleboxes, and not
result in side-effects on the server. We primarily use TTL-based
insertion packets since it is generally applicable. The key challenge
here is to choose an accurate TTL value to hit the GFW, while
not hitting server-side middleboxes or servers. We do that by first
measuring the hop count from the client to the server using a
way similar as tcptraceroute. Then, we subtract a small δ from the
measured hop count, to try and prevent the insertion packet from
reaching (hitting) the server-side middleboxes or the server. In
our evaluation, we heuristically choose δ = 2, but INTANG can
iteratively change this to converge to a good value.
In addition, we exploit the new MD5 and old timestamp insertion
packets, which allow the bypassing of the GFW without interfering
with middelboxes or the server. Table 5 summarizes how we choose
insertion packets for each type of TCP packet.
Packet Type TTL MD5 Bad ACK Timestamp
SYN
RST
Data
(cid:8)
(cid:8)
(cid:8)
(cid:8)
(cid:8)
Table 5: Preferred construction of insertion packets
(cid:8)
(cid:8)
this is caused by some unknown GFW behavior or middlebox in-
terference. However, since these cases are not sustained (are very
rare), we argue that this is more likely to be due to middlebox
interference.
Overall, we find that high Failure 1 rates is the major reason
for overall low success rates. An introspective look suggests that
because some servers/middleboxes accept packets regardless of the
(wrong) ACK number or the presence of the MD5 option header,
Failures 1 happen. Further, the TTL chosen is sometimes inaccurate
due to (a) network dynamics or (b) hitting server-side middleboxes;
this results in undesired side-effects that increase “Failures 1”.
In addition, we find that for vantage points outside China, the
TTL discrepancy unfortunately has a significant drawback. When
accessing the servers in China, the GFW devices and the desired
servers are usually within a few hops of each other (sometimes co-
located). As a result it is extremely hard to converge to a TTL value
for the insertion packet, that satisfies the requirement of hitting the
GFW but not the server. As a consequence, in these scenarios, use
of this discrepancy can cause either type of failures. We see from
Table 4 that both the Failure 1 and Failure 2 rates are on average a
bit higher than for the vantage points inside China.
Finally, because INTANG can choose the best strategy and in-
sertion packets for each server IP based on historic results, we also
evaluated INTANG performance in an additional row in Table 4 for
vantage points inside China. It shows an average success rate of
98.3% which represents the performance with the optimal strategy
specific to each website and network path. This is without further
optimizing our implementation (e.g., measuring packet losses and
adjusting the level of redundancy for insertion packets).
Take away: While we do magnify the causes for failures, the
biggest take away from this section is that our new hypothesized
behaviors of the GFW seem to be fairly accurate, and that the
new strategies are seemingly very effective in realizing the goal of
evading the GFW, especially when the best strategies are chosen
according to websites and network paths.
Results. We first analyze the results for individual evasion strate-
gies. As seen from Table 4, the overall “Failure 2” rate is as low as
1% for all the strategies, which (a) show that our new strategies
have a high success rate on the GFW which suggests that (b) our
hypotheses with regards to the GFW evolution seem accurate.
We find that both the Failures 1 and Failures 2 always happen
with regards to a few specific websites/IPs. One can presume that
7.2 Evading TCP DNS Censorship
The GFW censors UDP DNS requests with DNS poisoning. It cen-
sors TCP DNS requests by injecting RST packets just like how it
censors HTTP connections. Thus, our evasion strategies can also
be used to help evade TCP DNS censorship. As discussed in §6,
INTANG converts UDP DNS requests into TCP DNS requests. To
IMC ’17, November 1–3, 2017, London, UK
Zhongjie Wang et al.
DNS resolver
Dyn 1
Dyn 2
IP
216.146.35.35
216.146.36.36
except Tianjin
98.6%
99.6%
All
92.7%
93.1%
Table 6: Success rate of TCP DNS censorship evasion
evaluate the effectiveness of our strategies on evading TCP DNS cen-
sorship, we use 2 public DNS resolvers from Dyn, and the same 11
vantage points in China. Google’s DNS resolvers 8.8.8.8 and 8.8.4.4
have been IP hijacked by the GFW and thus cannot be used. By
repeatedly requesting a censored domain, (e.g., www.dropbox.com)
100 times, using the “improved TCB Teardown with RST strategy,”
we get the results shown in Table 6. The vantage points in Tianjin
have low success rates of 38% and 24%. However, the others jointly
yield success rates of over 99.5 %. Interestingly, we accidentally
discover that if we use the TCP DNS through the two OpenDNS’s
DNS resolvers 208.67.222.222 and 208.67.220.220, even without ap-
plying INTANG we do not experience any censorship from any of
our vantage points.
7.3 Tor and VPN
Tor is famous for supporting anonymous communications [22],
and poses a serious threat to censorship. It is not surprising that
it is reported that the GFW has been blocking Tor Bridge nodes
through passive traffic analysis and active probing for more than
7 years [28]. Next, we examine if INTANG can help cover up Tor
connections.
In our experiments, we first verify whether and how Tor nodes
are blocked by the GFW. Subsequently, we test if INTANG can help
clients from China evade Tor censorship.
We try to access hidden Tor bridge nodes setup on Amazon EC2
in the US from the same 11 vantage points (over 9 cities) (See § 3)
inside China acting as Tor clients. Surprisingly, we find that there
are four vantage points (in three cities Beijing, Zhangjiakou, and
Qingdao) from which Tor connections to the hidden Tor bridge can
operate without issues (as is) for over 2 days with periodic, manually
generated traffic. Meanwhile, any hidden bridge nodes requested by
the remaining 7 vantage points triggers active probing [13, 31] and
are immediately blocked by the GFW, i.e., any node in China can no
longer connect to this IP via any port. This is very different from
what was previously reported i.e., the GFW only blocks the Tor port
on that hidden bridge [31], and could cause collateral damage as
the Amazon EC2 IPs are recycled. We test 5 different hidden bridge
IPs and find no exceptions so far. The common characteristic of
the first four locations is that they are all in Northern China. Thus,
we speculate that Tor-filtering GFW nodes are most probably not
encountered on the paths from this region.
Now, for the remaining vantage points where the Tor connec-
tions do trigger censorship blocking, we apply INTANG with the
“improved TCB teardown strategy,” five times each, and the success
rate for the Tor connections is 100 %. We periodically repeat these
experiments over a 9-hour period, and are able to keep using the Tor
bridge node. This shows that: (a) our hypothesis that some of the
GFW devices have evolved to a new model holds; and (b) INTANG
is extremely effective in crafting the right measurement-driven
strategy towards evading the GFW. We envision that Tor clients
can even integrate INTANG in the future to improve its censorship
evasion chances.
Similar to Tor, virtual private networks (VPN), which help users
evade censorship, are also popular targets of the GFW. It is shown
that there are multiple approaches used by the GFW to disconnect