# Dynamic and Efficient Key Management for Access Hierarchies

**Authors:**
- Mikhail J. Atallah
- Keith B. Frikken
- Marina Blanton

**Abstract:**
The problem of key management in an access hierarchy has garnered significant attention in the literature. The hierarchy is modeled as a set of partially ordered classes, represented as a directed graph. A user who obtains access (i.e., a key) to a certain class can also obtain access to all descendant classes through key derivation. Our solution to this problem has the following properties:
1. Only hash functions are used for a node to derive a descendant’s key from its own key.
2. The space complexity of the public information is the same as that of storing the hierarchy.
3. The private information at a class consists of a single key associated with that class.
4. Updates (revocations, additions, etc.) are handled locally in the hierarchy.
5. The scheme is provably secure against collusion.
6. Key derivation by a node of its descendant’s key is bounded by the number of bit operations linear in the length of the path between the nodes.

While many previous schemes have some of these properties, ours is the first to satisfy all of them. For trees and other "recursively decomposable" hierarchies, we achieve a worst- and average-case number of bit operations for key derivation that is exponentially better than the depth of a balanced hierarchy (double-exponentially better if the hierarchy is unbalanced, i.e., "tall and skinny"). This is achieved with only a constant increase in the space for the hierarchy. We also show how our scheme can handle extensions proposed by Crampton, such as "limited depth" and reverse inheritance. The security of our scheme relies only on the use of pseudo-random functions.

**Keywords:**
Hierarchical access control, key management, efficient key derivation.

## 1. Introduction

### Background
In this work, we address the problem of access control and, more specifically, the key management problem in an access hierarchy. The general model involves a set of access classes ordered using partial order. We represent the hierarchy as a directed graph \( G \), where nodes correspond to classes and edges indicate their ordering. A user entitled to access a certain class can also access all descendant classes in the hierarchy. A key management scheme assigns keys to the access classes and distributes a subset of these keys to users, allowing them to access objects at their class(es) and all descendant classes. Such schemes are evaluated based on the total number of keys the system must maintain, the number of keys each user receives, the size of public information, the time required to derive keys for access classes, and the work needed to perform when the hierarchy or the set of users change.

Access hierarchies are used in various domains, including Role-Based Access Control (RBAC) models, content distribution, cable TV, project development, defense in depth, operating systems, databases, and networking. Low computational and storage space requirements for key management and processing are crucial for the scheme's applicability to a wide range of devices and applications, such as inexpensive smartcards, small battery-operated sensors, and embedded processors.

### Security and Efficiency
The security of access control models comes from their ability to deny access to unauthorized data. Collusion-resilience ensures that even if multiple users with access to different nodes conspire to derive additional keys, they cannot gain access to more nodes than they are legally entitled to. While we intend to use the scheme with tamper-resistant smartcards, prior publications suggest that compromising cards is easier than commonly believed. Therefore, collusion-resilience is essential for using the scheme with other non-tamper-resistant devices.

One key efficiency measure for hierarchical access control schemes is the number of operations needed to compute the key for an access class lower in the hierarchy. The best schemes, including ours, require the number of bit operations linear in the depth of the graph in the worst case, which for some graphs is \( O(n) \) where \( n \) is the number of nodes in the access graph. Deep hierarchies arise in various situations, such as hierarchically organized hardware, distributed control structures, hierarchical design structures, and task graphs.

### Our Results
Our scheme works for arbitrary access graphs, even those that may contain cycles. It uses only hash functions for a node to derive a descendant’s key from its own key. The space complexity of the public information is the same as that of storing \( G \) and is asymptotically optimal. The private information at a node consists of a single key associated with that node. Key derivation requires the number of bit operations linear in the distance between the nodes. Updates are handled locally in the hierarchy and do not propagate to descendants or ancestors of the affected part of the graph. Our scheme is resistant to collusion, and we address key management at both the levels of access classes and individual users.

We rely on the assumption of a trusted central authority that can generate and distribute keys. The security of our scheme relies on the use of pseudo-random functions. We also show that the scheme can be extended to cover access models beyond traditional privilege inheritance, enabling normal and reverse inheritance and fixed-depth inheritance. These extensions are useful in contexts such as Bell-LaPadula and RBAC models.

A substantial part of our work is dedicated to improving the efficiency of key derivation for deep hierarchies. By inserting additional "shortcut" edges in the graph, we achieve key derivation in \( O(\log \log n) \) bit operations in the worst case with a constant increase in public information, and to only 3 hashes with public space usage of \( O(n \log \log n) \). These techniques allow us to achieve the fastest key derivation known to date.

## 2. Related Work

The first work addressing key management in hierarchical access control was by Akl and Taylor in 1983. Since then, numerous publications have improved existing key assignment schemes. Most approaches assume the existence of a central authority (CA) that maintains the keys and related information. Many schemes, including ours, are based on the idea that a node in the hierarchy can derive keys for its descendants.

Several schemes have been shown to be insecure or incorrect, and we do not consider these in our discussion. Many schemes, such as [1, 34, 22, 6, 25, 23, 10, 37, 27, 38, 31, 43], operate with large numbers computed as a product of up to \( O(n) \) coprime numbers or large numbers, which can grow up to \( O(n \log n) \) bits long. Such numbers are prohibitively large for most hierarchies. In contrast, our key derivation is bounded by the depth of the access hierarchy and is \( O(n) \) hash operations in the worst case.

Some work, such as [29, 40, 42], is limited to trees and thus has limited use. Other work, such as [5, 45, 51], deals with a slightly different model involving hierarchies of users and resources. The scheme of [5] is not dynamic, and [45, 51] have high rekeying overheads for additions/deletions and store a large number of keys per class.

The work of [17] gives an information-theoretic approach, where each user might have to store a large number of keys, and insertions/deletions result in many changes. The scheme of [48] uses modular exponentiation, and additions/deletions require rekeying of all descendants. Schemes based on interpolating polynomials, such as [14, 46, 7], provide reasonable performance but have higher private storage and rekeying overheads. Schemes using sibling intractable function families (SIFF), such as [52, 53], are efficient but require rekeying of all descendants on additions and deletions.

Recent schemes, such as [9, 11, 12, 30, 54], have overall structures similar to ours and comparable performance. However, [12] does not address dynamic updates.

## 3. Problem Description

[Formal description of the problem will be provided here.]

## 4. Base Model and Security Proof

[Description of the base model and its security proof will be provided here.]

## 5. Dynamic Versions and Extensions

[Description of dynamic versions of the model and extensions will be provided here.]

## 6. Techniques to Improve Key Derivation Efficiency

[Techniques to improve key derivation efficiency for trees and more general hierarchies will be provided here.]

## 7. Conclusion

[Conclusion of the paper will be provided here.]