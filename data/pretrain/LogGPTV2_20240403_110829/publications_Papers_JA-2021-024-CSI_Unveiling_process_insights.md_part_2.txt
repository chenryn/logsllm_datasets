Findings
Programming Languages Overall Results
Java The most popular primary programming language
JavaScript The most used overall programming language
Go The most promising language as 13% said they will adopt it
Python Most studied language as 27% said they used it in the last 12 months
Languages used in last 12 months
JavaScript(69%), HTML/CSS(61%), SQL(56%), Java(50%), Python(49%)
Shell Scripting(40%), PHP(29%), TypeScript(25%), C#(24%), C++(20%)
Development Environments(Operating Systems)
Windows(57%), macOS(49%), Unix/Linux(48%), Other(1%)
Type of Application Development
Web Back-End(60%), Web Front-End(46%), Mobile(23%), Libraries(14%)
Desktop(12%), Other Back-End(16%), Data Analysis(13%), Machine Learning(7%)
Type of Tests Used
Unitary(71%), Integration(47%), End-to-End(32%), Other(2%), Don’t Test(16%)
Targeted Mobile Operating Systems & Frameworks Used
Android(83%), iOS(59%), Other(3%)
React Native(42%), Flutter(30%), Cordova(29%), Ionic(28%), Xamarin(26%)
Regularly Used Tools
Source Code Collaboration Tool(80%), Standalone IDE(75%)
Lightweight Desktop Editor(71%), CI/CD Tool(45%), Issue Tracker(44%)
Static Analysis Tool(13%), Code Review Tool(10%)
*All values(%) represent the percentage of affirmative respondents
pluginsavailableintheirmarketplaces. Thesepluginsarenotjustavail-
able, they are properly customized for specific users/purposes, such as
for modellers, programmers, testers, integrators or language engineers.
• Low Code and No Code Paradigms. Modern software develop-
ment practices make consistent use of both approaches. They enable
faster development cycles requiring little to no coding in order to build
and deliver applications and processes. Low-code development plat-
forms are seen as advanced IDEs which employ drag-and-drop software
components and visual interfaces to replace extensive coding. With
8
high-level visual modeling languages, they provide higher levels of ab-
straction that allow a major reduction in hand-coding to develop an
application [46]. In the extreme case we have no-code development
where, by definition, textual programming is banned, giving rise to
the so-called citizen developers. The most notable examples are online
application generators (OAGs) that automate mobile and web app de-
velopment, distribution, and maintenance, butthisapproachisclaimed
to be pledged with security vulnerabilities [47]. This paradigm shift in
software development may also require a change in the way we assess
critical properties of a software project, such as, quality, maintainabil-
ity, and evolvability.
• Global Software Development. The aforementioned IDE platforms
facilitated collaboration and the adoption of Global Software Develop-
ment (GSD). Nowadays, a single software project often has developers,
testers and managers located in different time zones and distinct world
regions or countries [48].
• CI/CD and DevOps. Continuous Integration and Continuous De-
ployment(CI/CD)haveseenanincrementalusageinthelastfewyears.
However, efficient CI/CD pipelines are rare, particularly in the mobile
apps world where developers seem to prefer the execution of ad hoc
tasks [49]. Whilst CI/CD focuses more on the automation of tools
along a defined software life cycle, DevOps has major concerns with the
responsiveness, responsibilities and processes within the development,
the deployment and the operational phases of software projects. Keep-
ing these intertwined processes compliant with organizational rules is
therefore a persistent requirement.
• Resource Coordination. It is still one of the fundamental prob-
lems in software engineering [50] and it can be characterized as a
socio-technical phenomenon. Understanding the dependencies between
development tasks and discover teams’ behaviours continues to be a
challenge in resource allocation and coordination of modern software
projects.
Software product repositories have many limitations in terms of the pro-
cess data they handle. For example, these repositories usually deal only
with source code and do not track the developers’ geographic location, their
workflows within the IDE nor the developers’ environment characteristics. A
complete repository of process related data with the communications, activi-
ties, decisions and actions taken by developers, testers and project managers,
9
are, most of the time, if not always, neglected when the goal is to study a
development process. Usually, even if the authors claim they are studying a
process, they are often doing it using only artifact related data [36].
With the existing diversity of languages, methodologies, tools and the
fact that resources are now distributed across the world and originate from
multiple cultures with different skills, it is somewhat an anachronism to keep
using old methods to assess, for example, complexity or build cross-cutting
analytical models in current software projects. New approaches, supporting
multi-languages, being multi-process aware, and keeping geography diversity
transparent are called for, such as our pioneering approach for mining of
software development processes based on the IDE event logs. That approach,
dubbed Software Development Process Mining [29], allows reversing engineer
a complete software development process, just a process fragment or simply
ad hoc activities performed by developers, by mining event logs taken from
real software development activities.
3. Related Work
Toaddresstheincompletenessofdatasourcesrelatedwithsoftwarerepos-
itories, we strongly believe that Software Development Process Mining based
at least on the IDE(but not limited to) can play that role and Process Mining
tools and methods can be the vehicles to achieve that goal. Many authors
have followed similar paths, bringing not only evidences for its usefulness but
also valid contributions to improve established methods.
Adecadeago, [51]minedsoftwarerepositoriestoextractknowledgeabout
the underlying software processes, and [52, 53] have learned about user be-
havior from software at operations. [54] was able to extract events from
Eclipse and have discovered, using a process mining tool, basic developers’
workflows. Some statistics were computed based on the activities executed
and artifacts edited.
[55] presented an application of mining three software repositories: team
wiki (used during requirement engineering), version control system (devel-
opment and maintenance) and issue tracking system (corrective and adap-
tive maintenance) in the context of an undergraduate Software Engineering
course. Experimentation revealed that not only product but process quality
varies significantly between student teams and mining process aspects can
help the instructor in giving directed and specific feedback. However, in this
case, IDE usage mining was not contemplated.
The working habits and challenges of mobile software developers with
respect to testing were investigated by [49]. A key finding of this exhaustive
study, using 1000 Android apps, demonstrates that mobile apps are still
10
tested in a very ad hoc way, if tested at all. A another relevant finding
of this study is that Continuous Integration and Continuous Deployment
(CI/CD)pipelinesarerareinthemobileappsworld(only26%oftheappsare
developedinprojectsemployingCI/CD)-authorsarguethatoneofthemain
reasons is due to the lack of exhaustive and automatic testing. Therefore,
distinguishing during development sessions the type of tests being done can
contribute to the overall software quality.
[56] explored if one can characterize and identify which commits will be
reverted. An identification model (e.g., random forest) was built and evalu-
ated on an empirical study on ten open source projects including a total of
125,241 commits. The findings show that the ’developer’ is the most deter-
minant dimension of features for the identification of reverted commits. This
suggests that assessing developers behaviors can lead to better understand
software products quality.
[57] studied the dialogue between users and developers of free apps in the
Google Play Store. Evidences found, showed that it can be worthwhile for
app owners to respond to reviews, as responding may lead to an increase in
the given rating and that studying the dialogue between user and developer
can provide valuable insights which may lead to improvements in the app
store and the user support process. We believe the same rationale may be
applied to comprehend the workflows and dialogues between developers and
project owners, and how that may impact software products.
Development activities were extracted by [58] from non-instrumented ap-
plications and used machine learning algorithms to infer a set of basic de-
velopment tasks. However, in this case, no process mining techniques were
used to discover any pattern of application usage. The extraction of usage
smells was the focus of [59], where a semi-automatic approach was adopted
to analyze a large dataset of IDE interactions using cluster analysis. Again,
process mining techniques were not used. Process mining was indeed used
by [60] to gain knowledge on software under operation (not under develop-
ment) by analyzing the hierarchical events produced by application calls(eg:
execution of methods within classes) at runtime.
[61] collected events from the IDE to measure program comprehension
and evaluated the correlation between developers’ activities and the time
they spent on them. Despite the fact that a process was being studied, no
evidence of using process mining methods was provided.
A few authors have also followed the route we suggested earlier and re-
sumed in [62]. As such, we are witnessing more evidences that it is indeed
a valid approach, therefore, [63] used process mining to evaluate developers’
coding behavior in software development processes. Process models were
discovered and used to classify the developers as low-performing and high-
11
performing profiles. With a similar goal, in [64], a different miner algorithm
was assessed to obtain complementary results and in [65], developers’ profil-
ing was achieved by mining event logs from a web-based cloud IDE.
Finally, [16] highlights the importance of having more fine-grained pro-
cess metrics in prediction models and evaluated several machine learning al-
gorithms in predicting software refactoring opportunities. This work focuses
on deciding when, what and why to refactor, however, it does not address
which refactor practice was indeed applied.
The studies mentioned above used a multitude of process mining tech-
niques, statistics and machine learning methods. Different data source types
have been used to extract the information needed to support them. How-
ever, to the best of our knowledge, none of these works combine process
and product metrics with the aim of assessing potential correlations and/or
impacts between the process and the product. Moreover, none uses only pro-
cess metrics to discover work patterns or to predict development behaviors,
particularly, refactoring practices.
4. Study Setup
We setup an environment where the same well-defined tasks on software
quality assurance was performed independently by several teams.
Our research guaranteed that all teams had similar backgrounds and per-
formed the same task upon the same software system. This approach was
used to block additional confounding factors in our analysis. The task tar-
geted a complex open-source Java system named Jasml (Java Assembling
Language)5.
Tounderstandtheworkdevelopedbyeachteamineachtask, wecollected
the corresponding IDE events for mining the underlying process. At the end
of each task, we also collected the modified Jasml project code for each team
and obtained the corresponding product metrics.
4.1. Subject Selection
Our subjects were the finalists (3rd year) of a B.Sc. degree on computer
science at the ISCTE-IUL university, attending a compulsory software en-
gineering course. They had similar backgrounds as they have been trained
across the same set of courses along their academic path. Teams were as-
sembled with up to 4 members each and were requested to complete a code
smells detection assignment, aiming at identifying refactoring opportunities
and then to apply them.
5http://jasml.sourceforge.net/
12
4.2. Data Collection
The participants were requested to perform the refactoring tasks in two
different ways: Automatically and Manually.
The refactoring tasks had the following requirements:
• Automatic Refactoring(AR). This task was executed from March
1st to March 20th, using JDeodorant6. This tool suggests refactor-
ing opportunities by detecting, among others, the following four well-
known code smells: Long Method, God Class, Feature Envy and
Type Checking [66]. Once participants have detected the occurrences
of those code smells, they were required to apply JDeodorant’s fully
automated refactoring features to fix the critical ones.
• Manual Refactoring(MR). This task was pursued from March 21st
to 28th and differed from the previous one because JDeodorant auto-
matic refactoring capabilities were banned. Instead, subjects could use
Eclipse’s native interactive refactoring features or perform the refactor-
ings manually.
The Eclipse IDE has an internal event bus accessed by the interface
IEventBroker7 which is instantiated once the application starts. It contains
apublishingservicetoputdatainthebus, whilstthesubscriberservicereads
what’s in that bus. Using this feature we developed an Eclipse plugin8
capable of listening to the actions developers were executing. Before the
experiment, the plugin was installed on each subject’s IDE, and later, all
subjects received an unique username/key pair as credentials.
6https://users.encs.concordia.ca/ nikolaos/jdeodorant/
7https://wiki.eclipse.org/Eclipse4/RCP/Event Model
8https://github.com/jcaldeir/iscte-analytics-plugins-repository
13
A sample event instance collected with our plugin is presented in listing
1. The field tags are self explanatory.
Listing 1: Sample Eclipse Event Instance in JSON format
{
”team” : ”Team−10”,
”session” : ”dkoep74−ajodje5−63j3k2”,
”timestamp begin” : ”2019−05−03 16:53:52.144”,
”timestamp end” : ”2019−05−03 16:54:04.468”,
”fullname” : ”John User”,
”username” : ”john”,
”workspacename” : ”Workspace1”,
”projectname” : ”/jasml 0.10”,
”filename” : ”/jasml 0.10/src/jasml.java”,
”extension” : ”java”,
”categoryName”: ”Eclipse Editor”,
”commandName”: ”File Editing”,
”categoryID”: ”org.eclipse.ui.internal.EditorReference”,
”commandID”: ”iscte.plugin.eclipse.commands. file .edit”,
”platform branch”: ”Eclipse Oxygen”,
”platform version”: ”4.7.3.M20180330−0640”,
”java”: ”1.8.0 171−b11”,
”continent”: ”Europe”,
”country”: ”Portugal”,
”city”: ”Lisbon”,
....
”hash”: ”00b7c0ef94e02eb5138d33daf38054e3” //To detect event tampering
}
4.2.1. Data Storage
Collecteddatawasstoredlocallyoneachsubject’scomputerinaCSVfile.
WheneverInternetconnectionwasavailable,thesamedatawasstoredinreal-
timeinthecloud9. Thisstoragereplicationmechanismallowedforofflineand
online collection10. The final dataset, combining the two different sources,
was then loaded into a MySQL database table where the username and event
timestamps that formed the table’s unique key were used to detect and avoid
duplicated data insertions. Figure 1 presents the complete schema for the
data collection workflow. We use the BPMN standard process definition
language for that purpose [67].
4.2.2. Data Preparation
When the software quality task ended, we collected from each team their
projects’ code together with the events files containing the actions performed
9https://azure.microsoft.com/en-us/services/event-hubs/
10The plugin currently supports the collection of events locally in CSV and JSON files;
streameventstoAzureEventHubandKafkaremotely;andusesanintegrationwithTrello
to extract project activities which can be triggered as manual events by the developers.