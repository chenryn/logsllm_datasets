We choose to employ edges as the markers. RPM works
on graph structured networks. Edge encoding facilitates a
hop-by-hop reconstruction of the attack graph.
x ∈ Xi iﬀ Di(x) > 0) is the same for every marker i. Let
In this scheme, the size of the set of tags Xi (recall that
h = |Xi|.
The association of Xi to an edge i is obtained using a known
hash function, for example, taking the ﬁrst L bits from the
output of SHA. For an edge with IP addresses IP1 and IP2,
let us represent the identity of this edge as i = IP1(cid:107)IP2
where (cid:107) is concatenation. The set Xi assigned to i is
{ H(r(cid:107)IP1(cid:107)IP2) | r = 1, 2, . . . , h }
where H is the hash function whose output is a L-bit se-
quence.
For clarity, let us recall the marking process. For the
marker i with the associated Xi, when a packet is received,
the followings are carried out:
• With probability , randomly and uniformly picks a x
from Xi, and write x into the packet header.
There are two important parameters for us to determine,
 and h, which will be discussed in Section 4.3. An example
in our experiment takes  = 1
16 , L = 16 and h = 24.
Note that the markers make decisions independently and
they mark packets by overwriting existing values. It evades
the potential domino eﬀect from malicious packet mark ma-
nipulation. Even if there are compromised routers in the
network, the attack paths reconstructed are reliable up to
the nearest attacking routers.
It improves the survivabil-
ity of traceback, compared to marking schemes that rely on
existing packet marks [3, 7].
4.2 Path Reconstruction
Path reconstruction ﬁnds the likely attack edges based
on a collection of packet marks and connects the edges to
reconstruct the attack paths. Packet marks are generated
on attack and benign paths alike. Those from benign paths
can be treated as noise in the reconstruction. RPM works on
graph structured networks. Edge encoding facilitates a hop
by hop reconstruction of the attack graph. It is assumed that
the victim has an upstream router map. This is a reasonable
assumption that is also made in [16, 20].
We now describe two methods. Both methods follow the
hop-by-hop approach. They diﬀer in the choice of an evalua-
tion function that decides whether a given edge is a marker.
The ﬁrst evaluation function employs a Bloom ﬁlter, which
is fast to compute but some information is discarded. Specif-
ically, it only keeps track of the unique L-bit tags that the
victim received, but not the number of packets for each tag.
The second evaluation function counts the number of oc-
currences per tag, and estimates the likelihood of an edge
contributing to the tags received by the victim.
In a noiseless path reconstruction, the victim is assumed
to be capable of diﬀerentiating malicious packets from be-
nign ones. For example, in TCP SYN ﬂoods, malicious pack-
ets with spoofed addresses never completely establish a net-
work connection; whereas benign packets abide by the net-
work protocol and their sources are responsive. The victim
can process only packet marks from non-responsive sources
for path reconstruction. A Bloom ﬁlter [4] is used to store
packet marks received from the attackers. With suﬃcient
packets received, the victim performs a breadth-ﬁrst search
on the topology to reconstruct the attack paths edge by edge.
It starts by testing if the edges composed of an immediate
upstream router and itself belong to the attack graph. Re-
call that a router’s marking behavior is fully determined by
its IP address and the random identiﬁer. The victim checks
all neighboring edges, and computes for each edge the re-
sulting packet marks. Benign edges are ruled out if not all
packet marks encoding the edge are in the Bloom ﬁlter, else
the edge is determined as residing on an attack path. The
search continues at the identiﬁed edges until the obtained
attack graph cannot be further extended.
In a noisy reconstruction, the victim does not pre-process
the packets to discard benign packet marks. All packet
marks are supplied to the path reconcentration procedure.
In the presence of noise, it is more appropriate for the vic-
tim to evaluate the likelihood of an attack edge based on the
occurrence frequencies of its packet marks rather than sim-
ply based on their existence. A counting Bloom ﬁlter is used
to store the occurrence frequency of each packet mark. The
frequency of packet marks generated by an edge reﬂects the
packet rate the edge experiences. If the likelihood exceeds
some threshold, the edge is identiﬁed as attacking. Note
that the threshold is distance dependent. Edges approaching
the victim have gradually higher thresholds, because their
packet marks experience lower probability of being overwrit-
ten and appear more frequently.
Equation 1 shows the function used to evaluate the rela-
tive likelihood of an attack edge,
h(cid:88)
i=1
f (e) =
1
h
#He,i
(1)
where #He,i measures the number of packets having mark
vi of marker e. This equation computes, for a marker, the
algebraic mean of the occurrence frequencies of its packet
marks. Because occurrence frequency of packet marks is
proportional to the packet rate, and packet rate is the dif-
ferentiation criteria between benign users and attackers, the
value from Equation 1 gives the relative measure of conﬁ-
dence in determining attackers.
The pseudocodes below summarize the path reconstruc-
tion procedure.
RPM Reconstruction
Start at the victim’s immediate edges
Compute mean(edge mark frequencies)
(Equation 1)
if mean ≥ threshold then
Add this edge to the attack graph
Move on to upstream edges
end if
It is assumed attackers are sending at much higher rate than
non-attackers. Larger traﬃc rate thus provides higher con-
ﬁdence in identifying an attack edge. Assuming that the
victim is interested in paths with packet rate greater than
Ratt, the packet mark threshold for edges at distance t from
the victim can be computed as
(1 − )(t−1) Ratt + Z
1
h
where Z is an estimated noise level. This can be estimated
using the average of a few randomly chosen sets of h tags.
RPM and AMS have similar reconstruction cost. Both
schemes use topology information to perform a breadth-ﬁrst
search.
4.3 System Parameters
There are two parameters in the model we presented, 
and h. Both of them aﬀects the identiﬁcation accuracy. The
number of tags h each marker should generate plays a very
important role in determining a scheme’s eﬀectiveness.
4.3.1 Choice of 
Assuming the marking probability  is uniform across all
markers, there are two factors aﬀecting the choice of the 
value. One is that the mixture of mark distributions must
retain portions of contribution from each upstream marker,
as the mixture is the basis for identifying markers. Markers
d hops away from the victim has a probability of 1−(1−)d−1
of its packet marks being overwritten. This probability
drops with decreasing ; larger portions of upstream mark-
ers’ contribution can be retained, especially for the farthest
markers. The other factor for choosing  concerns with the
marking workload. Smaller  means lighter workload for
each marker. Therefore, small values are preferred for .
Generally, the values between 0.03 to 0.06 provide a good
tradeoﬀ. If  is too small, the victim is required to handle
a large amount of traﬃc before it can gather a converged
mixture of packet mark distributions.
4.3.2 Choice of h
In this section, we analyze the eﬀect of diﬀerent h on the
false positives, when Bloom ﬁlter is used for reconstruction.
Recall from Section 3.3 that high entropy tags facilitates
high traceback accuracy. However, it is not always true that
the higher the packet mark entropy, the better the traceback
accuracy. Consider an extreme case where every marker
holds 2L distinct tags and uniformly randomly selects them
to mark packets. Entropy of the collection of tags is close
to the maximum, L, but the ability to diﬀerentiate markers
is lost. Bloom ﬁlter has its ﬁll factor increases quickly with
markers, if each marker has many distinct tags; so is the
false positive probability. Hence the choice of h is crucial to
the scheme’s eﬀectiveness.
Table 1: Comparison in bit allocation of PPM
Schemes
Path Info (x)
(ID Info, Dist)
Hash Index
Scheme #Bits
FMS
AMS
FIT
RPM
(L)
16
16
16+5
16
(8, 5)
(8, 5)
(13, 1 + 5)
(16, 0)
(log2 h)
3
3
2
0
Figure 5: False positives of AMS and RPM (noise-
less)
tive tends to be lower for number of attack edges less than
4,000. Beyond 4, β increases for large values of h. For num-
ber of attack edges from 4,000 to 8,000, h = 23 is an optimal
conﬁguration.
In general, the result shows that there is an optimal num-
ber of unique tags each marker should generate given the
number of attackers. However, as the number of attack-
ers cannot be predicted, h has to be set to a value that is
appropriate for the maximum attackers anticipated.
Based on the analysis and simulation, it is now useful
to compare the conﬁguration of existing PPMs with the
model presented. Table 1 summarizes the bit allocations
for packet marks of several PPM schemes. These schemes
are Fragment Marking Scheme(FMS) [14], Advanced Mark-
ing Scheme (AMS) [16], Fast Internet Traceback (FIT) [20]
and our proposed scheme, Random Packet Marking (RPM).
Randomize-and-Link (RnL) [9] and the algebraic encoding
approach [7] both exploit more than 16 bits as L, and have
ﬂexible settings in lengths of hash index and path informa-
tion (Section 3.4.1). Nevertheless, it is interesting to note
that most of the schemes, including RnL and the algebraic
encoding, use 2 or 3 bits for hash index, thus h is 4 or 8.
For a small number of attack edges, h = 22 or 23 suﬃces
though h = 23 is probably a better choice. With h = 23,
the schemes are optimized for more than 4,000 attack edges.
For a smaller number of attack edges, h = 24 will be a better
choice.
4.4 Performance
For evaluation, we compare RPM to AMS. AMS is se-
lected as it is the most scalable among existing schemes
that use 16-bit packet marks. The network topology used is
drawn from the Internet Mapping Project [1] data captured
on January 2006. The data set contains the route informa-
tion from a source to 111,342 (∼ 216.8) destinations. There
Figure 4: Eﬀect of marking component lengths
Consider a non-attack node i. It will be wrongly classiﬁed
as an attack node if all of its associated tags are received
by the victim. Let ˆβ be the probability that the node is
wrongly classiﬁed. Since the reconstruction is carried out
hop-by-hop, not all nodes in the network will be evaluated.
Hence, it is not easy to relate ˆβ to the false positive of the
overall scheme. Nevertheless, the analysis of ˆβ provides some
insights on the choice of h. We do not consider false negative
since the bloom ﬁlter will not miss any attacker.
We assume that the tags assigned to the markers are ran-
dom. Since there are m attack nodes, and each node is
assigned h tags, there are a total of mh tags chosen (there
are likely to have repetitions within the mh tags). We can
approximate this assignment as the random assignment of
mh balls into 2L boxes2, where each box correspond to a tag.
WLOG, let us assume that the ﬁrst h boxes are assigned to
the non-attack node i. Hence ˆβ can be approximated as the
probability that all the ﬁrst h boxes are ﬁlled, which can be
approximated by
(cid:182)h ≈
(cid:179)
(cid:180)h
ˆβ ≈
1 − (1 − 1
2L )mh
1 − e
− mh
2L
(2)
(cid:181)
where e is the based of natural logarithm.
We perform the following simulation to analyze the role
of h. The same edges data set as in Section 3.3 is used.
L is set to 16. Each edge generates 1,000 packets with h
randomly chosen tags. For each h, 1 to over 8,000 edges are