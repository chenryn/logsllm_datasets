title:Flexibly and Securely Shape Your Data Disclosed to Others
author:Qing-Qing Xie and
Yantian Hou and
Ke Cheng and
Gaby G. Dagher and
Liangmin Wang and
Shucheng Yu
Flexibly and Securely Shape Your Data Disclosed to Others
Qingqing Xie∗
Jiangsu University
Zhenjiang, Jiangsu
Gaby G. Dagher
Boise State University
Boise, Idaho, USA
PI:EMAIL
Yantian Hou†
Boise State University
Boise, Idaho
PI:EMAIL
Liangmin Wang
Jiangsu University
Zhenjiang, Jiangsu, China
PI:EMAIL
Ke Cheng∗
Xidian University
Xi’an, China
PI:EMAIL
Shucheng Yu
Stevens Institute of Technology
Hoboken, New Jersey, USA
PI:EMAIL
ABSTRACT
This work is to enhance existing fine-grained access control to
support a more expressive access policy over arithmetic operation
results. We aim to enable data owners to flexibly bind a user’s
identity with his/her authorized access target according to a given
access control policy, which indicates how a piece of data obfus-
cated by different noises. To this end, we design a cryptographic
primitive that decouples the noisy data to two components, one
associated with user identity, and the other one shared and dy-
namically changes, with the composite of these two components
evaluated and revealed at user sides. The security of our scheme is
formally proven using game based approach. We implement our sys-
tem on a commercial cloud platform and use extensive experiments
to validate its functionality and performance.
CCS CONCEPTS
• Security and privacy → Access control; Privacy protections; •
Theory of computation → Cryptographic primitives.
KEYWORDS
fine-grained access control; homomorphic encryption; privacy-
preserving cloud computing
ACM Reference Format:
Qingqing Xie, Yantian Hou, Ke Cheng, Gaby G. Dagher, Liangmin Wang,
and Shucheng Yu. 2019. Flexibly and Securely Shape Your Data Disclosed to
Others. In ACM Asia Conference on Computer and Communications Security
(AsiaCCS ’19), July 9–12, 2019, Auckland, New Zealand. ACM, New York, NY,
USA, 8 pages. https://doi.org/10.1145/3321705.3329851
∗Part of this work is done by Qingqing Xie and Ke Cheng as visiting students under
Dr. Yantian Hou’s advisory in Boise State University.
†Yantian Hou is the corresponding author.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6752-3/19/07...$15.00
https://doi.org/10.1145/3321705.3329851
1 INTRODUCTION
Cryptography-based fine-grained access control allows a data owner
to flexibly bind each of his/her data with an arbitrary user identity
for using the data. With this approach, data owners do not need
to trust any centralized gateway as used in the traditional access
control [10], which has been reported for abusing our data without
permissions [3]. However, the usages of fine-grained access control
are restrained in practice because they lack support for an expres-
sive function-level control, i.e., the access control targets are limited
to only the data itself, instead of any of its functional operations.
Adding functional features to fine-grained access control has
been an open problem, which indicates not only which user could
access what data, but also how to use that data. Enhancing the
access control from data level to function level is critical for re-
alizing a more expressive access control mechanism enforced by
data owner. Recently several researchers have started combining
attribute based encryption [2, 14] with homomorphic encryption
[13], which allows arithmetic operations over ciphertexts that are
associated with different attributes. Though facing several chal-
lenges such as the exponentially increased ciphertext size, these
studies could advance the applications that demand both compli-
cated on-line operations and flexible access control over the data
hosted by untrusted clouds/servers.
In this work, we aim to empower data owners to control the
access to their data in a more expressive and efficient manner,
by combining fine-grained access control with homomorphism.
Different from previous works, our goal is to perform additive op-
eration across an identity-associated (the identity is denoted by
user’s attributes) component, and a dynamically shared compo-
nent, as shown in Fig. 1. Our realization is driven by the need for
fine-grained access control on the same data, but with different
precisions for different data users. For example, a data owner de-
ploys the ciphertexts of zero noise, light noise, and heavy noise to
his family, common friends, and the “finding-nearest-restaurant”
application respectively. Meanwhile, the data owner publishes the
ciphertexts of the geo-location coordinates (x, y) in runtime. Each
of the three types of users could only access its authorized noisy ver-
sion through online homomorphic operations. Our solution should
meet the following requirements: 1) Flexibility. Each user could
be arbitrarily associated with a precision version according to a
fine-grained access policy enacted by the data owner. 2) Security.
Each user could only access its associated version according to its
Session 2B: Advanced Encryption AlgorithmsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand160identity defined by his/her attributes. 3) Efficiency. The data owner
should be able to efficiently enact and enforce the fine-grained
access policy, regardless of the policy’s size.
To meet these requirements simultaneously, we propose a cryp-
tographic primitive with a novel decoupling technique. In our
approach, the shared and identity-associated components are en-
crypted separately while holding additive homomorphism. When
decrypting, each user first “plugs” his/her ciphertext of identity-
associated component into the ciphertext of the shared-component,
and then unlocks the composite with only his/her secret key to
derive the noisy value.
The decoupling of the two components is a desirable feature for
data owner in practice. Enabled by it, the data owner only needs to
focus on the encryption of the single data component in runtime by
treating it as the shared component, which yields constant overhead
regardless of the granularity (the number of noises). Meanwhile the
enactment of fine-grained access policy and the noise-component
(which is treated as the identity-associated component) encryptions
could be entirely offloaded (e.g., to a separate policy enactment
module, a professional agent whom the data owner trusts, or a
parent of the child). This advantage could help the non-professional
data owners, who are deficient in access control knowledge or
resources, to better protect their data privacy.
None of previous efforts could satisfy our requirements. Re-
cently, several cryptography works have made efforts to establish
fine-grained access control over general arithmetic operation re-
sults by combining homomorphic encryptions with attribute-based
encryptions (ABE) [2, 9, 14]. Compared to our work, they consider
a different homomorphism across the ciphertexts associated with
the same/different attributes, by enabling authorized user/users to
access not only the computational result, but also the operands. In
addition, several of their schemes suffer from the exploded cipher-
text sizes, yielding exponentially large overhead for both the data
owners and the data storage in practice.
Our cryptographic scheme is formally proven secure through
the proof-by-reduction technique and the game-based approach.
We implement our system and deploy it on a commercial cloud
platform, through which the data owner performs the 1-to-n data
sharing towards multiple users with different precision levels. We
use extensive experiments to validate its complexity.
Summary of Contributions: 1) We propose a cryptographic prim-
itive, which is named as fine-grained access precision control (FAPC).
Our design is the first generic cryptographic primitive that enables
fine-grained access control over the additive computational results
Figure 1: The traditional fine-grained access control (top),
and our fine-grained control combined with homomorphic
operation of a shared component and an identity-associated
component (bottom). [x]i denotes the encryption of x under
identity i’s key.
of different identity-associated components and a shared compo-
nent, with only compact ciphertext size. 2) The security of our
scheme is formally presented through the game-based approach. 3)
We establish a prototype system on a commercial cloud platform,
where the performance of our design is validated through extensive
experiments.
The rest of the paper is organized as follows:
In Sec. 2 we introduce our system model and formally define
the problem. The FAPC primitive design is presented in Sec. 3.
The security and complexity analysis of our design, as well as its
experimental evaluations are presented in Sec. 4. Sec. 5 reviews the
related work. Sec. 6 concludes this paper.
2 PROBLEM STATEMENT
The problem we are studying is fine-grained access precision con-
trol (FAPC). Specifically, our goal is to enable the data owner (DO)
to associate each shared data with various noises, and disclose
the noisy data only to authorized user identity/identities. Differ-
ent from state-of-the-art works, our solution requires this task of
fine-grained access control to be lightweight for the data owner,
thus scalable to support a large number of users simultaneously.
Meanwhile, it should be privacy-preserving, thus no unauthorized
entity (e.g., unauthorized users, untrusted cloud platform for data
sharing) could access the noisy data. Before formulating our prob-
lem, we first define the noise function and the access precision
control policy as follows:
Definition 2.1 (Noisy Data). Use DS to denote the data space.
Given a data d ∈ DS, a noise ϵ ∈ DS, and any noise function f , a
noisy data is denoted as dϵ = f (d, ϵ ).
Definition 2.2 (Access Precision Control Policy). Use US
to denote the user space. The access precision control policy set Γ is a
set of identity-precision pairs (i, ϵj ), each associating a user’s identity
i ∈ US with a noise version ϵj .
The noise function f could be in any form. In this work, we con-
sider the basic additive function. Given the definition of noisy data
and the access precision control policy, we could then formulate
the FAPC problem as follows:
Definition 2.3 (FAPC problem). Given any data d ∈ DS and a
= f (d, ϵj )
policy set Γ, find a scheme Π, such that the noisy data dϵj
could be revealed to user i, iff (i, ϵj ) ∈ Γ.
Briefly, the FAPC problem is to find a scheme Π such that a user
i could only access its permitted noisy data f (d, ϵj ) according to a
pre-defined policy Γ. In practice, the policy Γ is normally defined
by the owner of data d. In the cases where the data owner demands
the finest policy granularity, each noisy version is associated with
a unique user identity.
3 OUR SOLUTION
To solve our problem, we design a cryptographic primitive, that is
partially based on the CP-ABE scheme [1]. Our scheme decouples
the ciphertext into a dynamically shared component and identity-
associated components, and then reuses the shared component
to pair with each identity-associated component in running time
when decrypted.
  +  ++  DecryptDecryptSession 2B: Advanced Encryption AlgorithmsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand1613.1 Framework
The FAPC scheme consists of five algorithms:
• Setup(1λ ) → mk, pk: is a probabilistic algorithm. It takes as
input a security parameter 1λ, then outputs a master key mk and a
public key pk.
• Encrypt′(pk, m, k,T∀) → CT m: is a probabilistic algorithm.
It takes the public key pk, a plaintext m (the shared component),
a session key k ∈ GT and a corresponding access tree T∀, then
outputs the ciphertext CT m of data m, where T∀ is constructed in
such a way that any authorized user, whose attribute set satisfying
any tree Ti , i ∈ [1, N ], should satisfy T∀ as well.
• Encrypt′′(pk,N , T , k ) → ET∀ (k ), CT N : is a probabilistic al-
gorithm. It takes as input a public key pk, a plaintext set N =
{τi}i∈[1, N ] (the identity-associated components), a set of access
trees (as described in Appendix. T = {Ti}i∈[1, N ]
1, a session key
k, then outputs the ciphertext ET∀ (k ) of session key k and the
ciphertext set CT N = {CTτi }i∈[1, N ] of plaintext set N .
• U pdate (pk, m, CT m, k, m′) → CT m′: is a probabilistic algo-
rithm. It takes as input the data m and its corresponding ciphertext
CT m, the session key k, and the new data m′, then outputs the
ciphertext CT m′ of m′.
• KeyGenerate (pk, mk, Au ) → SKu: is a probabilistic algorithm.
It takes as input a public key pk, a master key mk, and an attribute
set Au corresponding to a user u’s identity, then outputs a secret
attribute key SKu associated with Au.
m, ET∀ (k ), SKu ) → f ′(m, τi ) or null: is a deter-
ministic algorithm. It takes as input the public key pk, a ciphertext
m = {CTm, CTτi } of a certain data-noise pair (m, τi ), the
pair CT
τi
ciphertext ET∀ (k ) of session key k, and an attribute key SKu for
an attribute set Au. If Au satisfies the corresponding tree Ti, this
algorithm will decrypt the ciphertexts and return the corresponding
composite f ′(m, τi ), otherwise, it will return null.
• Decrypt (pk, CT
τi
Table 1: Major notations
m = e (д, д)d ∈ GT
τi = e (д, д)ϵi ∈ GT
N = {τi}i∈[1, N ]
f : Zq × Zq → Zq
f ′ : GT × GT → GT
= f (d, ϵi )
dϵi
= f ′(m, τi )
mτi
T = {Ti}i∈[1, N ]
Au
SKu
shared (data) component in GT transformed from
i-th piece of identity-associated (noise) component
original data d ∈ Zq
transformed from original noise ϵi ∈ Zq
noise function before space transformation
noise function after space transformation
set of noise
i-th noisy data before transformation
i-th noisy data after transformation
set of access trees, where Ti determines
who can access the noised data f ′(m, τi )
user’s attribute set
user’s attribute key
The major notations used in our scheme are shown in Table 1.
The correctness and security are defined as follows.
1. Correctness Definition
The correctness of the FAPC scheme is that the user is able to
access the noisy data if and only if the user’s attribute set satisfies
the corresponding access tree. Formally:
1We refer the reader to [1] for details.
T −cpa
A, Π
Definition 3.1 (FAPC Scheme Correctness). For algorithms
(Enc′, Enc′′, Dec), we have Decski (Enc′(m), Enc′′(τi )) = f ′(m, τi ),