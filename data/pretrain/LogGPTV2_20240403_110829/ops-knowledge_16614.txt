User: 请回答以下运维开发问题在不同的容器中对nginx和php进行docker化有什么优势？我刚开始使用Docker和Kubernetes，我已经观察了很多堆栈，其中有些人在单个映像中构建nginx+php，有些人用nginx构建映像，另一个用php构建映像（在Kubernete中安装相同的路径并将两个容器封装在同一部署中）。
构建两个docker镜像而不是在同一个镜像中安装两个nginx+php有什么好处？

Assistant: 使用nginx的PHP通常使用PHP-fpm来完成，PHP-fpm是一个单独的进程。
每个容器保留一个进程的docker的核心思想（关于这一点的更多细节，请参阅答案的末尾）——将nginx进程和php-fpm进程放在单独的容器中是有意义的。
由于nginx和php-fpm之间的通信是通过fastcgi产生的，php-fpm容器也可以在一个单独的主机上，这允许在nginx后面使用一个php-fpm集装箱集群。
在评论墙之后，这里有更多的背景，docker文档中有一段关于容器应该只有一个问题的想法。
linux容器（lxc）的主要思想是在cpu和内存级别的隔离命名空间中运行进程，docker在此基础上添加了文件系统级别的隔离。
其优点是，该命名空间中进程的折衷不允许读取其他进程的内存，因此应该防止主机上的其他折衷。
在谈到nginx和php-fpm时，它们是成对工作的，但每个都有自己的问题，nginx将负责HTTP部分、路由、头验证等，php-fpm将负责代码解释并将html部分返回给nginx。而通常情况下，两者一起为一个非强制性的应用提供服务。
根据上下文的不同，例如在开发人员工作站上，拥有一个包含应用整个堆栈的容器可能会更容易。但理想情况下，对于生产使用，尽量减少容器内的交互，在同一容器中使用supervisord分离进程会带来僵尸进程和日志处理方面的问题（此处的示例仅用于说明目的）。
因此，最后我将引用docker页面，并强调：
虽然“每个容器一个进程”通常是一条很好的经验法则，但它并不是一条硬性规定。使用您的最佳判断来保持容器尽可能干净和模块化。
没有适用于所有事物的“银弹法则”，它始终是容器内部复杂性和容器自身复杂性之间的平衡。