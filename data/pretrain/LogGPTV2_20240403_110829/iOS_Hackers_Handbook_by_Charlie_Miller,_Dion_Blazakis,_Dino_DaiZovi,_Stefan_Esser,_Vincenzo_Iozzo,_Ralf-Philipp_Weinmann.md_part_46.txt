### OpenBTS Configuration and Baseband Attacks

#### OpenBTS Configuration Changes
The following sections detail the changes made to the `OpenBTS.conf` file on March 12, 2012. The modifications include adjusting logging levels, transceiver paths, control settings, and GSM parameters.

```diff
+++ OpenBTS.conf 2012-03-12 11:31:27.029729225 +0100
@@ -30,3 +30,3 @@
# The initial global logging level: ERROR, WARN, NOTICE, INFO, DEBUG, DEEPDEBUG
-Log.Level NOTICE
+Log.Level INFO
```

```diff
@@ -86,4 +86,4 @@
# YOU MUST HAVE A MATCHING libusrp AS WELL!!
-TRX.Path ../Transceiver/transceiver
-#TRX.Path ../Transceiver52M/transceiver
+#TRX.Path ../Transceiver/transceiver
+TRX.Path ../Transceiver52M/transceiver
$static TRX.Path
```

```diff
@@ -182,3 +182,3 @@
# Things to query during registration updates.
-#Control.LUR.QueryIMEI
+Control.LUR.QueryIMEI
$optional Control.LUR.QueryIMEI
```

```diff
@@ -197,3 +197,3 @@
# Maximum allowed ages of a TMSI, in hours.
-Control.TMSITable.MaxAge 72
+Control.TMSITable.MaxAge 24
```

```diff
@@ -259,3 +259,3 @@
# Location Area Code, 0-65535
-GSM.LAC 1000
+GSM.LAC 42
# Cell ID, 0-65535
```

```diff
@@ -286,5 +286,5 @@
# Valid ARFCN range depends on the band.
-GSM.ARFCN 51
+#GSM.ARFCN 51
# ARCN 975 is inside the US ISM-900 band and also in the GSM900 band.
-#GSM.ARFCN 975
+GSM.ARFCN 975
# ARFCN 207 was what we ran at BM2008, I think, in the GSM850 band.
```

```diff
@@ -295,3 +295,3 @@
# Should probably include our own ARFCN
-GSM.Neighbors 39 41 43
+GSM.Neighbors 39 41 975
#GSM.Neighbors 207
```

#### Important Notes
- **Adjusting GSM Parameters**: Ensure that `GSM.ARFCN`, `GSM.Band`, and `GSM.Neighbors` are set according to the authorized frequency for transmission.
- **Open vs. Closed Configuration**: By default, OpenBTS runs in an open configuration, allowing any mobile device to register. This can lead to unintended roaming if not properly managed. To prevent this, switch to a closed configuration and register each IMSI with Asterisk.

#### Setting Up and Testing
1. **Install Required Libraries**:
   - Install the `libmich` library from [GitHub](https://github.com/mitshell/libmich) (not required if using the provided virtual machine).

2. **Register Your Device**:
   - Start OpenBTS and register your iPhone with the test network. Disable automatic network selection in the Settings app and choose the network named "00101".
   - If you encounter issues, enable airplane mode for 5 seconds, then disable it and select the network again.

3. **Simulate Call Establishment**:
   - Use the `tmsis` command to view registered devices.
   - Use the `testcall` command to establish a traffic channel to the iPhone.
   - Example:
     ```bash
     OpenBTS> tmsis
     TMSI IMSI IMEI(SV) age used
     0x4f5e0ccc 262XXXXXXXXXXXX 01XXXXXXXXXXXXXX 293s 293s
     1 TMSIs in table
     OpenBTS> testcall 262XXXXXXXXXXXX 60
     OpenBTS> calls
     1804289383 TI=(1,0) IMSI=262XXXXXXXXXXXX Test from=0 Q.931State=active SIPState=Null (2 sec)
     1 transactions in table
     ```

4. **Python Script for Call Setup**:
   - Run the following Python script to simulate call setup:
     ```python
     import socket
     import time
     from libmich.formats import *
     
     TESTCALL_PORT = 28670
     tcsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
     tcsock.sendto(str(L3Mobile.SETUP()), ('127.0.0.1', TESTCALL_PORT))
     ```

#### Asterisk Configuration
- **Basic Configuration**:
  - Append the following lines to `extensions.conf`:
    ```ini
    [sip-openbts]
    exten => 6666,1,Dial(SIP/IMSI2620XXXXXXXXX)
    exten => 7777,1,Dial(SIP/IMSI2620YYYYYYYYYYY)
    ```
  - Append the following lines to `sip.conf`:
    ```ini
    [IMSI2620XXXXXXXXXXX]
    callerid=6666
    canreinvite=no
    type=friend
    context=sip-openbts
    allow=gsm
    host=dynamic
    
    [IMSI2620YYYYYYYYYY]
    callerid=7777
    canreinvite=no
    type=friend
    context=sip-openbts
    allow=gsm
    host=dynamic
    ```

#### Real-Time Operating Systems (RTOSes)
- **Overview**:
  - Modern smartphones have a cellular baseband subsystem running its own RTOS, which manages real-time communication requirements.
  - Common RTOSes include Nucleus PLUS, ThreadX, and REX/OKL4/Iguana.

- **Nucleus PLUS**:
  - Tasks are the units of execution, with dynamic creation and deletion.
  - Memory management includes partition memory (fixed-size blocks) and dynamic memory (variable-sized allocations).
  - Synchronization and communication use semaphores, mailboxes, pipes, and queues.

- **ThreadX**:
  - Successor to Nucleus PLUS, with a simpler API and overhauled interrupt architecture.
  - Detailed in the book "Real-Time Embedded Multithreading: Using ThreadX and ARM" by William Lamie.

- **REX/OKL4/Iguana**:
  - Developed by Qualcomm for MSM products, with OKL4 as the microkernel and Iguana for virtual memory and process management.
  - Uses a single address space with per-process protection domains.
  - AMSS, including drivers, runs in user mode.

#### Heap Implementations
- **Nucleus PLUS**:
  - Uses a first-fit allocator for dynamic memory.
  - Each memory pool has a control block, and each allocated chunk has a header.
  - Example structure:
    ```c
    struct dynmem_pcb {
        void *cs_prev;
        void *cs_next;
        uint32_t cs_prio;
        void *tc_tcb_ptr;
        uint32_t tc_wait_flag;
        uint32_t id; /* magic value [‘DYNA’] */
        char name[8]; /* Dynamic Pool name */
        void *start_addr; /* Starting pool address */
        uint32_t pool_size; /* Size of pool */
        uint32_t min_alloc; /* Minimum allocate size */
        uint32_t available; /* Total available bytes */
        struct dynmem_hdr *memory_list; /* Memory list */
        struct dynmem_hdr *search_ptr; /* Search pointer */
        uint32_t fifo_suspend; /* Suspension type flag */
        uint32_t num_waiting; /* Number of waiting tasks */
        void *waiting_list; /* Suspension list */
    };
    ```

This document provides a comprehensive guide to configuring and testing OpenBTS, along with insights into the underlying RTOSes and their memory management.