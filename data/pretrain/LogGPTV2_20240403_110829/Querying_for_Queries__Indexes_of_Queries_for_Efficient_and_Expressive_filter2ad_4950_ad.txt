quite sparse, having at most 2 non-zero entries in each row and
in each column. Second, we observe that the t-privacy of requests
through the buckets is still an immediate consequence of [16, Theo-
rem 1]; indeed, the buckets are nothing more than 2-ary buckets of
a database obtained by appropriately splicing together the indexes
of queries Πsender and Πsize. Finally, we point out that, owing to the
fact that each entry of Πsender,size is an (at-most-)linear polynomial,
reconstructing the servers’ responses now requires one additional
response. Hence, the protocol just described implements t-private
(m, ℓ)-server IT-PIR for any m > t + 1.
4.3 Batching u indexes of queries
Definition 4.1 formalizes a generalization of the construction from
Section 4.2, which allows combining for arbitrarily many simple
indexes of queries.
Definition 4.1. Fix u > 1 and let x1, . . . , xℓ ∈ F \ {0, . . . ,u −
1} be pairwise distinct scalars. A sequence Π1, . . . , Πℓ ∈ Fp×r of
matrices is a u -batch index of queries for Goldberg’s IT-PIR with
for some i1, i2 ∈ [1. . ℓ],
bucket coordinates x1, . . . , xℓ if (i) Πi1
(cid:1)
and (ii) for each j = 0, . . . ,u − 1,
(cid:44) Πi2
(cid:1)
(cid:1)
(cid:1)(cid:0) j − xi +1
(cid:0) j − xi−1
(cid:0) j − xℓ
(cid:0) j − x1
ℓ(cid:80)
πj (cid:66)
Πi ·
i =1
xi − x1
· · ·
xi − xi−1
xi − xi +1
· · ·
xi − xℓ
is a simple index of queries.
The first requirement of Definition 4.1, which insists that Πi1
(cid:44)
for some i1, i2 ∈ [1. . ℓ], is a non-triviality requirement included
Πi2
merely to prevent simple indexes of queries from qualifying.6 The
second requirement is what captures the key property we intuitively
desire from batch indexes of queries. The expression arising in
that second requirement is just the familiar Lagrange interpolation
formula. Intuitively, the definition says that the sequence of buckets
is a u-batch index of queries if interpolating component-
Π1, . . . , Πℓ
wise through the Πi at each x = 0, . . . ,u − 1 yields a length-u
sequence of simple indexes of queries. The restriction that x1, . . . , xℓ
be elements of F \ {0, . . . ,u − 1} is necessary to guarantee that
users can actually request blocks through the constituent simple
indexes of queries without betraying the privacy of their requests
(see [16, proof of Theorem 1]).
∈
(cid:1)
) is t-private with respect to Π.
The next theorem follows easily from [16, Theorems 1&2].
(cid:0)
(cid:1)
(cid:0)
Theorem 4.2. Fix u > 1 and j ∈ [0 . .u − 1], and let Π =
Fp×r
ℓ be buckets of a u-batch index of que-
Π1, . . . , Πℓ
ries with bucket coordinates x1, . . . , xℓ ∈ F \ {0, . . . ,u − 1}. If
(x1, ⃗Qj1), . . . ,(xℓ, ⃗Qj ℓ
) is a sequence of component-wise (t + 1, ℓ)-
threshold shares of a standard basis vector ⃗e ∈ Fp encoded at x = j,
then (Π, x1, ⃗Qj1), . . . ,(Π, xℓ, ⃗Qj ℓ
Proof. The proof of this theorem is nearly identical to that
of Theorem 3.7. Consider a coalition S comprising t servers. Fix
i ∈ [1. .r] and let I, J, K, and QS respectively denote the random
variables describing the index (within D) of the block the user
requests, the index of the standard basis vector the user actually
encodes in its query, the x-coordinate at which it encodes that
standard basis vector, and the joint distribution of share vectors it
sends to servers in S (including the “hint” that the query should go
through the u-batch index of queries Π).
As per Definition 3.6, we need to show that Pr[I = i | QS =
(Π; ⃗Qj1 , . . . , ⃗Qjt
denotes the event
that the user’s request is through Π. The key observation is that
]
] · Pr[K = k | EΠ
Pr[I = i | EΠ
)] = Pr[I = i | EΠ
], where EΠ
k =0 Pr[⃗eJ · πk = ⃗ei | K = k, EΠ
] =(cid:80)u−1
6Omitting the non-triviality requirement would mean that whenever Π ∈ Fp×r is a
simple index of queries, the sequence of buckets Π, Π, . . . , Π ∈ Fp×r is a u-batch index
of queries for every u ≥ 1. Clearly, this fails to jibe with what we intuitively mean by
“u-batch” index of queries.
8
)] =(cid:80)u−1
(cid:14)
(cid:3)
and Pr[I = i | QS = (Π; ⃗Qj1 , . . . , ⃗Qjt
(cid:2)
K = k, QS = (Π; ⃗Qj1 , . . . , ⃗Qjt
Pr
k =0 Pr[⃗eJ · πk = ⃗ei
]. Hence, we have
)] · Pr[K = k | EΠ
] · Pr[K = k | EΠ
]
Pr[⃗eJ · πk = ⃗ei | K = k, EΠ
Pr[⃗eJ · πk = ⃗ei | K = k, QS = (Π; ⃗Qj1 , . . . , ⃗Qjt
I = i
EΠ
=
=
)]
|
u−1(cid:80)
u−1(cid:80)
(cid:2)
k =0
k =0
= Pr
(cid:14)
I = i
QS = (Π; ⃗Qj1 , . . . , ⃗Qjt
· Pr[K = k | EΠ
]
)(cid:3)
,
as desired. Note that the second line of the above derivation follows
immediately from the t-privacy of (x1, ⃗Q1), . . . ,(xℓ, ⃗Qℓ).
□
Corollary 4.3. The construction just described implements t-
private v-Byzantine-robust (m, ℓ)-server IT-PIR for any m ≥ t + u.
In each of the following results, when we speak of a “u-batch”
(cid:1)
index of queries, we are implicitly assuming that u is the largest
value for which Definition 4.1 is satisfied—i.e., that
· · ·
(cid:1)(cid:0) u − xi +1
(cid:0) u − xi−1
(cid:0) u − xℓ
(cid:0) u − x1
ℓ(cid:80)
· · ·
(cid:1)
(cid:1)
xi − xi−1
xi − xi +1
xi − xℓ
xi − x1
πu (cid:66)
i =1
Πi ·
is not another simple index of queries—and that the buckets have
minimal degree in this regard. More precisely, we assume that
interpolating through the buckets (at the indeterminate x) yields
a matrix of polynomials each having degree at most u − 1. We
also point out that the results all hold for u = 1, provided we
treat “1-batch index of queries” as synonymous with “simple index
of queries”. The first observation regards the sparsity of u-batch
indexes of queries, while the second regards the possible values
that their non-zero entries can take on.
Observation 4.4. Fix u > 1. If Πi ∈ Fp×r is a bucket of a u-
batch index of queries, then the rows and columns of Πi each
contain at most u non-zero entries; hence, the total number of
non-zero entries in Πi is at most min(p, r) · u.
Observation 4.5. Fix u > 1. If Πi ∈ Fp×r is a bucket of a u-
batch index of queries, then there exists a set S comprising at most
2u − 1 scalars from F such that every non-zero element in Πi is an
element of S.
Both observations are trivial to prove: it suffices to note that
all entries in a bucket are y-coordinates of points on polynomials
obtained via interpolating through the u values that reside in cor-
responding coordinates of the u constituent pseudo-permutation
matrices. When all u components are 0, interpolation yields the
zero polynomial (Observation 4.4); in all cases, every polynomial
corresponds to a particular non-zero u-bit binary string.
5 INDEXES OF BATCH QUERIES
In the previous section, we proposed batch indexes of queries as
a way to obtain all the benefits of simple indexes of queries but
with improved privacy guarantees. We now turn our attention to
a special kind of batch indexes of queries, called indexes of batch
queries, which improve on the earlier batch indexes of queries by
enabling users to fetch several related blocks (i.e., a batch of related
blocks) with a single request.
Suppose we wish to leverage indexes of queries for an applica-
tion in which typical requests seek the best k matches for some
search term z. An obvious straw man construction would involve
creating, for each possible search term z, a simple index of que-
ries Πz ∈ Fk ×r whose k rows are positional queries for the best k
matches for that z. Unfortunately, this trivial solution offers little
privacy: knowing which simple index of queries a user’s requests go
through immediately reveals precisely which blocks those requests
are for. In theory, merging all of the simple indexes of queries into
a batch index of queries would eliminate this leakage, but this ap-
proach does not scale; indeed, several of the motivating uses cases
from Section 1 require best k queries involving millions of possible
search terms, which would require millions of buckets held by mil-
lions of non-colluding servers! Indexes of batch queries provide an
alternative construction that facilitates such requests supporting
many—perhaps millions of—search terms much more efficiently
and without requiring a large number of servers.
5.1 IT-PIR with k-batch queries
Recall that in the vector-matrix model for PIR, a typical request
takes the form of a positional query represented by a standard basis
vector. In the case of Goldberg’s IT-PIR, the querier encodes this
vector component-wise into ℓ vectors of (t + 1, ℓ)-threshold shares,
and then it sends one such vector of shares to each of ℓ servers; thus,
a user seeking the blocks referenced by the k rows of one of the
simple indexes of queries Πz ∈ Fk ×r from our straw man construc-
tion would need to make k separate requests, respectively encoding
the standard basis vectors ⃗e1, . . . , ⃗ek ∈ Fk. Of course, as we already
noted, such a user should not expect any privacy.
Henry, Huang, and Goldberg [17] proposed k-batch queries as a
more efficient way to request k blocks at once. Their k-batch queries
are based on the same idea as u-ary codes: instead of encoding
each basis vector ⃗e1, . . . , ⃗ek in a separate request, a k-batch query
encodes them all in a single request using (t + 1, ℓ)-threshold ramp
shares, much like we saw in Section 4. Specifically, the user selects
a length-k vector of degree-(t + k − 1) polynomials uniformly at
random, subject to the requirement that, for each i = 1, . . . , k, the
vector passes component-wise through ⃗ei at x = i − 1. Nothing
changes from the perspective of the servers7 and yet a little algebra
establishes that, if such a request passes through the simple index
of queries Πz ∈ Fk ×r to a database D ∈ Fr ×s, then the servers’
responses reconstruct to ⃗e1 · Πz · D at x = 0, to ⃗e2 · Πz · D at x = 1,
and so on up to ⃗ek · Πz · D at x = k − 1. Of course, the user should
still not expect any privacy; we have only succeeded in making the
non-private solution more efficient.
Whereas k-batch queries commingle effortlessly with simple
indexes of queries, some technicalities interfere when one attempts
to naïvely perform k-batch queries through batch indexes of que-
ries (cf. [16, §5]), due to the way batch indexes of queries asso-
ciate their constituent simple indexes of queries with specific x-
coordinates.
5.2 k-batch queryable batch indexes of queries
Our indexes of batch queries are essentially just k-batch indexes of
queries that have been constructed so as to map specific k-batch
queries into other, meaningful k-batch queries over D. Conceptually,
7In fact, coalitions of up to t servers cannot distinguish k-batch from non-batch
queries [18].
we “transpose” the impractical straw man construction that began
this section in a way that makes the best k queries for each search
term z occupy a single row of a k-batch index of queries, at k
pairwise distinct x-coordinates. To see how this works, it is helpful
to think of the buckets comprising a k-batch index of queries as
2-dimensional projections of a particular 3-dimensional matrix; for
instance, if there are p possible search terms z, then the p-batch
index of queries arising from the straw man construction would be
projections of a matrix Π residing in Fk ×r ×p, say
0
0
...
0
0
0
0 · · ·
0
0
0 · · ·
...
...
...
. . .
0
0
1 · · ·
1
0
...
0
Π =
p
0
0
...
0
0
0
1 · · ·
0
0
0
0 · · ·
0
...
...
...
. . .
...
0
0
1 · · ·
1
0 · · ·
1
0 · · ·
0