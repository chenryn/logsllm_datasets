### 4.3 Batching u Indexes of Queries

#### Definition and Generalization
Definition 4.1 formalizes a generalization of the construction from Section 4.2, allowing for the combination of arbitrarily many simple indexes of queries.

**Definition 4.1.** Let \( u > 1 \) and let \( x_1, \ldots, x_\ell \in \mathbb{F} \setminus \{0, \ldots, u-1\} \) be pairwise distinct scalars. A sequence of matrices \( \Pi_1, \ldots, \Pi_\ell \in \mathbb{F}_p^{r \times r} \) is a \( u \)-batch index of queries for Goldberg’s IT-PIR with bucket coordinates \( x_1, \ldots, x_\ell \) if:
1. For some \( i_1, i_2 \in [1, \ldots, \ell] \), \( \Pi_{i_1} \neq \Pi_{i_2} \).
2. For each \( j = 0, \ldots, u-1 \),
   \[
   \pi_j = \sum_{i=1}^\ell \Pi_i \cdot \prod_{\substack{k=1 \\ k \neq i}}^\ell \frac{j - x_k}{x_i - x_k}
   \]
   is a simple index of queries.

The first requirement ensures that the sequence of matrices is non-trivial, preventing simple indexes of queries from qualifying as batch indexes. The second requirement captures the key property we desire: interpolating component-wise through the \( \Pi_i \) at each \( x = 0, \ldots, u-1 \) yields a length-\( u \) sequence of simple indexes of queries. The restriction that \( x_1, \ldots, x_\ell \) be elements of \( \mathbb{F} \setminus \{0, \ldots, u-1\} \) ensures that users can request blocks without compromising the privacy of their requests (see [16, proof of Theorem 1]).

#### Theorem on t-Privacy
The following theorem follows from [16, Theorems 1 & 2].

**Theorem 4.2.** Fix \( u > 1 \) and \( j \in [0, \ldots, u-1] \). Let \( \Pi = (\Pi_1, \ldots, \Pi_\ell) \in \mathbb{F}_p^{r \times r} \) be buckets of a \( u \)-batch index of queries with bucket coordinates \( x_1, \ldots, x_\ell \in \mathbb{F} \setminus \{0, \ldots, u-1\} \). If \( (x_1, \vec{Q}_{j1}), \ldots, (x_\ell, \vec{Q}_{j\ell}) \) is a sequence of component-wise \((t+1, \ell)\)-threshold shares of a standard basis vector \( \vec{e} \in \mathbb{F}_p \) encoded at \( x = j \), then \( (\Pi, x_1, \vec{Q}_{j1}), \ldots, (\Pi, x_\ell, \vec{Q}_{j\ell}) \) is \( t \)-private with respect to \( \Pi \).

**Proof.** The proof is similar to that of Theorem 3.7. Consider a coalition \( S \) comprising \( t \) servers. Fix \( i \in [1, \ldots, r] \) and let \( I, J, K, \) and \( Q_S \) denote the random variables describing the index (within \( D \)) of the block the user requests, the index of the standard basis vector the user encodes in its query, the \( x \)-coordinate at which it encodes that standard basis vector, and the joint distribution of share vectors it sends to servers in \( S \) (including the hint that the query should go through the \( u \)-batch index of queries \( \Pi \)).

We need to show that \( \Pr[I = i | Q_S = (\Pi; \vec{Q}_{j1}, \ldots, \vec{Q}_{jt})] = \Pr[I = i | E_\Pi] \), where \( E_\Pi \) denotes the event that the user's request is through \( \Pi \). The key observation is that
\[
\Pr[I = i | E_\Pi] = \sum_{k=0}^{u-1} \Pr[\vec{e}_J \cdot \pi_k = \vec{e}_i | K = k, E_\Pi] \cdot \Pr[K = k | E_\Pi].
\]
Hence,
\[
\Pr[I = i | Q_S = (\Pi; \vec{Q}_{j1}, \ldots, \vec{Q}_{jt})] = \sum_{k=0}^{u-1} \Pr[\vec{e}_J \cdot \pi_k = \vec{e}_i | K = k, Q_S = (\Pi; \vec{Q}_{j1}, \ldots, \vec{Q}_{jt})] \cdot \Pr[K = k | E_\Pi].
\]
Thus,
\[
\Pr[I = i | Q_S = (\Pi; \vec{Q}_{j1}, \ldots, \vec{Q}_{jt})] = \Pr[I = i | E_\Pi],
\]
as desired. This follows from the \( t \)-privacy of \( (x_1, \vec{Q}_1), \ldots, (x_\ell, \vec{Q}_\ell) \).

**Corollary 4.3.** The construction just described implements \( t \)-private \( v \)-Byzantine-robust \((m, \ell)\)-server IT-PIR for any \( m \geq t + u \).

In the following results, when we speak of a "u-batch" index of queries, we assume \( u \) is the largest value for which Definition 4.1 is satisfied, and that the buckets have minimal degree. Specifically, interpolating through the buckets (at the indeterminate \( x \)) yields a matrix of polynomials each having degree at most \( u-1 \). These results also hold for \( u = 1 \), treating "1-batch index of queries" as synonymous with "simple index of queries."

**Observation 4.4.** If \( \Pi_i \in \mathbb{F}_p^{r \times r} \) is a bucket of a \( u \)-batch index of queries, then the rows and columns of \( \Pi_i \) each contain at most \( u \) non-zero entries; hence, the total number of non-zero entries in \( \Pi_i \) is at most \( \min(p, r) \cdot u \).

**Observation 4.5.** If \( \Pi_i \in \mathbb{F}_p^{r \times r} \) is a bucket of a \( u \)-batch index of queries, then there exists a set \( S \) comprising at most \( 2u-1 \) scalars from \( \mathbb{F} \) such that every non-zero element in \( \Pi_i \) is an element of \( S \).

Both observations are straightforward to prove by noting that all entries in a bucket are \( y \)-coordinates of points on polynomials obtained via interpolating through the \( u \) values that reside in corresponding coordinates of the \( u \) constituent pseudo-permutation matrices.

### 5. Indexes of Batch Queries

In the previous section, we proposed batch indexes of queries to obtain the benefits of simple indexes of queries with improved privacy. We now focus on a special kind of batch indexes of queries called indexes of batch queries, which enable users to fetch several related blocks (i.e., a batch of related blocks) with a single request.

#### IT-PIR with k-Batch Queries
Recall that in the vector-matrix model for PIR, a typical request takes the form of a positional query represented by a standard basis vector. In Goldberg’s IT-PIR, the querier encodes this vector component-wise into \( \ell \) vectors of \((t+1, \ell)\)-threshold shares and sends one such vector to each of \( \ell \) servers. For a user seeking the blocks referenced by the \( k \) rows of a simple index of queries \( \Pi_z \in \mathbb{F}_k^{r \times r} \), they would need to make \( k \) separate requests, encoding the standard basis vectors \( \vec{e}_1, \ldots, \vec{e}_k \in \mathbb{F}_k \). Such a user should not expect any privacy.

Henry, Huang, and Goldberg [17] proposed \( k \)-batch queries as a more efficient way to request \( k \) blocks at once. Their \( k \)-batch queries encode all basis vectors \( \vec{e}_1, \ldots, \vec{e}_k \) in a single request using \((t+1, \ell)\)-threshold ramp shares. Specifically, the user selects a length-\( k \) vector of degree-\((t+k-1)\) polynomials uniformly at random, subject to the requirement that, for each \( i = 1, \ldots, k \), the vector passes component-wise through \( \vec{e}_i \) at \( x = i-1 \). From the servers' perspective, nothing changes, but algebra shows that if such a request passes through the simple index of queries \( \Pi_z \in \mathbb{F}_k^{r \times r} \) to a database \( D \in \mathbb{F}^{r \times s} \), the servers' responses reconstruct to \( \vec{e}_1 \cdot \Pi_z \cdot D \) at \( x = 0 \), to \( \vec{e}_2 \cdot \Pi_z \cdot D \) at \( x = 1 \), and so on up to \( \vec{e}_k \cdot \Pi_z \cdot D \) at \( x = k-1 \). However, the user still should not expect any privacy; we have only made the non-private solution more efficient.

While \( k \)-batch queries work well with simple indexes of queries, technicalities arise when attempting to perform \( k \)-batch queries through batch indexes of queries (cf. [16, §5]), due to the way batch indexes of queries associate their constituent simple indexes of queries with specific \( x \)-coordinates.

#### k-Batch Queryable Batch Indexes of Queries
Our indexes of batch queries are essentially \( k \)-batch indexes of queries constructed to map specific \( k \)-batch queries into other meaningful \( k \)-batch queries over \( D \). Conceptually, we "transpose" the impractical straw man construction, making the best \( k \) queries for each search term \( z \) occupy a single row of a \( k \)-batch index of queries at \( k \) pairwise distinct \( x \)-coordinates. To see how this works, think of the buckets comprising a \( k \)-batch index of queries as 2-dimensional projections of a particular 3-dimensional matrix. For example, if there are \( p \) possible search terms \( z \), the \( p \)-batch index of queries arising from the straw man construction would be projections of a matrix \( \Pi \) residing in \( \mathbb{F}_k^{r \times r \times p} \), such as:
\[
\Pi =
\begin{pmatrix}
0 & 0 & \cdots & 0 \\
0 & 0 & \cdots & 0 \\
\vdots & \vdots & \ddots & \vdots \\
0 & 0 & \cdots & 0 \\
0 & 0 & \cdots & 0 \\
\end{pmatrix}
\]
where each row corresponds to a different search term and each column to a different block.