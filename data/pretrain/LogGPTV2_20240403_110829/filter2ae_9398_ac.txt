     document.fgColor
    -document.fileCreatedDate
     […]
此外，我们还可通过IDA中名称窗口的查询来确认DOM对象的属性和方法：
通过跟踪名称窗口中列出的其中一个函数，我们最终可以找到表示DOM对象类型的实际EdgeHTML类：
伴随着新的特性被添加到Edge浏览器中[29]，相对应的可能会引入新的DOM对象类型，或者将新的属性/方法添加到已存在的DOM对象中，以此将这些新功能提供给开发人员。这些新的DOM对象类型、属性和方法反过来也会成为新的被攻击代码，从而增大了渲染引擎的攻击面。
#### 3.6 FLASH和PDF渲染器
虽然从技术层面上讲它们并不属于渲染引擎的一部分且它们自身各有一组复杂的解析及渲染操作，但Windows的内置PDF渲染器[30]（自Windows
8.1以来）和预安装的Adobe Flash Player（自Windows
8以来）仍可被认为是EdgeHTML引擎用于渲染各种文件格式的众多依赖之一，它们都是预安装的[3]，且默认情况下均可被EdgeHTML渲染引擎实例化：
其中，PDF渲染器是由CPDFHelper::LoadPdfDoc()函数实例化的，而Flash渲染器的实例化则是从CCodeLoad::BindToObject()函数开始的。
从攻击者的角度看，能额外借助复杂的渲染器必然会有下述优势：(1)这些复杂的渲染器都有一组可被利用的攻击面及对应漏洞；(2)它们的某些特性可被用来绕过漏洞的利用防护
- 一个例子是利用Flash的JIT生成代码绕过CFG保护 [31]，另一个例子是0day利用中借助Flash
Vector对象的corruption技术[32]绕过ASLR保护，此例由IE渲染引擎漏洞来实现内存Flash
Vector对象的corruption[33]。虽然对通过Flash的JIT绕过CFG保护以及借助Flash的Vector对象绕过ASLR保护已有相关的防护措施（见4.3小节和[34]），但这两个例子很好的阐述了如何借助程序的功能来实现利用。
#### 3.7 分析与总结：漏洞利用攻击面
在图像和字体渲染方面，EdgeHTML引擎的攻击面是在减少的，因为它不再支持EMF和WMF格式的图像以及EOT字体，处理这些格式的依赖库代码（GDI和T2EMBED）中含有远程利用漏洞也是小有历史了。此外，删除VML的支持（二进制行为）也有助于进一步减少EdgeHTML引擎的攻击面。
然而，同其它现代浏览器一样，这之中又引入了新的特性，而这些新功能则通过新的DOM对象类型/属性/方法以及新的标记/样式规范来实现。就EdgeHTML引擎而言，我们在DOM
API中发现了新的攻击维度，包括新的DOM对象类型以及已有DOM对象类型中新添加的属性和方法。
此外，下述依赖库在EdgeHTML引擎中是有用到的：
  * 用于XML解析的XmlLite
  * 用于XML转换的MSXML6
  * 用于图像解码的WIC(Windows Imaging Component)
  * 用于音频/视频解码的MF(Media Foundation)
  * 用于字体渲染的DirectWrite
  * 用于PDF渲染的内置WinRT PDF渲染器
  * 用于Flash渲染的预安装Adobe Flash Player程序
通过分析这些库的使用，我们进一步认识到了它们的重要性，毕竟我们现在对渲染引擎如何使用它们以及攻击者如何能通过恶意输入来远程访问这些代码有了更多的理解。
### 4 漏洞利用防护措施
既然我们对引擎的攻击面已经有了解了，那下面就来看看攻击者为了成功在EdgeHTML或其任何依赖中实现利用都需要绕过哪些漏洞利用防护，此外，我们还会讨论和提及那些由安全人员发现的已知防护措施绕过方法或防护中的薄弱点。
本节对EdgeHTML模块所在的内容处理单元中涉及的缓解方案仅作简要介绍，而把详细的讨论放在EdgeHTML引擎及其依赖的利用防护上。至于Windows堆相关的防护已经在各种论文或报告[35,36,37,38,39,40]中有详细讨论，这里就不再赘述了。
#### 4.1 64位、ASLR、DEP和APPCONTAINER保护
在Win10
64位系统中，EdgeHTML渲染引擎模块（`%System32%\edgehtml.dll`）所在的内容处理单元（MicrosoftEdgeCP.exe）默认运行在64位，且启用了ASLR保护（HEASLR，ForceASLR）和DEP保护，并通过AppContainer来实现沙箱功能：
Edge内容处理单元的防护措施与Windows 8中Immersive版的IE相同，但与Windows 10，Windows
8（Desktop版的IE）和Windows 7上的IE11不同。
下表给出了不同Windows版本上Edge和IE内容处理单元所默认用到的保护措施：
其中，64位技术有助于缓解传统的堆喷利用，该利用会将攻击者可控的数据在堆上进行喷射，从而把数据布局到特定的地址处。当然，根据漏洞的不同，“相对堆喷”[28,41]也是可能的，例如漏洞包含一个有效堆指针，但指针在计算时被加上了一个攻击者可控的或错误的数值。
同时，内容处理单元中还启用了高熵ASLR保护（HEASLR）以及强制ASLR保护（ForceASLR）[42,43]，其中，HEASLR保护给可重定位的内存区域增加了额外的信息熵，而ForceASLR保护能够避免将不支持ASLR保护的DLL模块加载到固定的内存地址。在启用ForceASLR保护的进程中，绕过ASLR保护一般需要利用那些可预测内存地址的对象指针或使用漏洞来实现内存信息泄露，由于微软目前正积极地解决前者[44,42]，因此越来越多的攻击将会依靠漏洞进行信息泄露[45,32]。
此外，AppContainer则是Windows
8中新引入的进程隔离机制，它被用在IE的增强型保护模式[46]沙箱中，可限制进程的读/写访问权限和相关功能。目前，有几种方法能够绕过AppContainer沙箱保护（以及其它沙箱保护），这些方法包括了利用内核漏洞[47,48]、利用中级或更高权限进程中的漏洞[46,49,50]以及利用可写资源[49]。
#### 4.2 栈缓冲区安全检查(/GS)
基于栈的缓冲区溢出通常被用于控制程序的执行流程，为了检测此类利用，EdgeHTML引擎及其依赖均采用缓冲区安全检查(/GS)
[51]选项进行编译。该检测机制会在保存局部变量的缓冲区后面设置一个安全cookie，然后在函数返回前检查此安全cookie，以确保返回地址和保存的寄存器没有被缓冲区溢出所覆盖。另外，该机制还对数据进行了备份，相关参数和局部变量的副本被存储在缓冲区之前，以防止它们在缓冲区溢出的情况下被破坏：
该缓解措施已在各种论文[52,53]中进行了深入讨论，并且相关机制还在不断地更新[42]，以期提高防护的覆盖面。当然，此机制的一个局限是它并未考虑攻击者能够控制特定位置写入数据的情况[54,20]（例如可控的缓冲区索引/指针），这允许攻击者直接越过安全cookie进行写入。
#### 4.3 执行流保护(CFG)
EdgeHTML引擎及其依赖中引入了新的漏洞利用防护措施，即CFG保护(Control Flow
Guard)[55,56]。当启用CFG保护时，编译器将在程序中添加额外的检测代码，以确保间接调用的目的地址是有效的。此策略主要用于检测并阻止异常的执行流程，比如通过设置执行地址的方式将流程重定向到ROP链中。
此防护机制的内部原理已被深入研究过了，相关内容发表于各种论文/报告中[57,58]。针对CFG保护的绕过[31]，一种方法是借助Flash的JIT生成代码，因为它是动态解析的，固其内部的间接调用不会被CFG保护覆盖到。然而，这种绕过技术现在已通过Flash中额外引入的代码得到了防护，只要生成调用指令，那么相应的就会通过ntdll!LdrpValidateUserCallTarget()函数进行检查。此外，其它绕过CFG保护的思路还包括跳转到有效的API地址（如LoadLibrary）[41]、覆盖堆栈数据（如返回地址）[57,41]等。
#### 4.4 虚表保护(VTGUARD)
VTGuard(Virtual Table
Guard)[42]是EdgeHTML中的另一漏洞利用防护措施，但此机制并没有被应用到相关依赖中。VTGuard是在IE10中首次引入的，其目的在于检测虚函数表是否有效，主要针对通过内存中可控的C++对象来控制程序执行流的利用情形，它在虚函数表中添加了一个__vtguard随机值，执行虚函数调用前将对该值进行检查：
此防护的一个缺点是它仅适用于EdgeHTML中的类对象，并且如果能通过内存信息泄露获取__vtguard的地址，那么就可以简单地进行绕过。
#### 4.5 内存垃圾回收(MEMGC)
Memory GC（MemGC）[59]是在Win10的EdgeHTML和MSHTML渲染引擎中首次引入的，它衍生于早期的Memory Protector
[60, 61, 62]漏洞利用防护。
与Memory Protector一样，MemGC的目的是通过阻止内存块（chunk）的释放（如果还能找到相关的引用）来缓解UAF（use-after-free）漏洞[26]的利用。但是，与Memory
Protector只检查寄存器以及堆栈中的内存块（chunk）引用不同，MemGC还会扫描托管堆中的内容来查找引用，这种附加检查意味着它能进一步减少攻击者可利用的UAF漏洞。
**配置**
MemGC是默认启用的，在Edge和IE中都可通过“OverrideMemoryProtectionSetting”属性进行配置，相应的注册表项如下：
    HKEY_CURRENT_USER\SOFTWARE\Microsoft\Internet Explorer\Main
    OverrideMemoryProtectionSetting = %DwordValue%
其中，%DwordValue%可取下述任意值：
**MEMGC堆管理**
MemGC使用单独的托管堆（MemGC堆）进行对象空间的分配，且通过并发的垃圾回收机制执行标记和清除操作，以此识别和回收堆中未被引用的内存块（chunk），这个过程中MemGC会依赖Chakra（JavaScript引擎）的内存管理代码来实现大部分功能。
在用到的分配方案中，MemGC首先会通过VirtualAlloc()函数申请大量被称为Segment的内存空间，接着将这些Segment按4096字节划分为Page页面，而后再将其中的一组Page作为一个Block块，在此基础上按照相似大小原则进行对象空间的分配：
其中，EdgeHTML/MSHTML
DOM对象以及大量的渲染引擎内部对象都是由MemGC管理的，此外，由于MemGC中已经使用了单独的托管堆，所以如果它是启用的，那么将不会再用到隔离堆。
**分配**
在EdgeHTML引擎的MemGC实现中，当需要分配一个托管对象时，edgehtml!MemoryProtection::HeapAlloc()或edgehtml!MemoryProtection::HeapAllocClear()函数将被调用，并转而通过chakra!MemProtectHeapRootAlloc()函数进行处理。而chakra!MemProtectHeapRootAlloc()函数首先会寻找合适的bucket，然后从指向的Block中为其分配一个相应的chunk，最后将此chunk标识为root。在垃圾回收中，root标识表示该对象/chunk在程序中存在直接引用，因此不能被回收，同时，在搜索chunk引用时也会扫描这些标识为root的对象/chunk。
**释放**
当对象需要被释放时，引擎将会调用edgehtml!MemoryProtection::HeapFree()函数进行处理并转而执行chakra!MemProtectHeapUnrootAndZero()调用。对于chakra!MemProtectHeapUnrootAndZero()函数，它将定位此chunk所在的具体Block，并将chunk的内容清零，然后去除它的root标识。通过清除root标识，此chunk成了潜在的回收目标，如果回收器未找到关于此chunk的相关引用，那么它就会被回收。
**垃圾回收**
一旦未被root标识的chunk总大小达到特定阈值，那么就会由chakra!MemProtectHeap::Collect()函数触发垃圾回收机制。垃圾回收过程（因其复杂性，这里仅描述相关的核心功能）将通过标记和清除操作来回收那些未被引用的且未被root标识的chunk，其中的部分操作将在chakra!Memory::Recycler::StartConcurrent()函数下发的独立线程（chakra!Memory::Recycler::ThreadProc）中进行。
在标记阶段，首先会清空所有的chunk标记位，然后标记所有root标识的chunk（通过chakra!Memory::Recycler::BackgroundResetMarks()函数），接着扫描root标识的chunk（通过chakra!Memory::Recycler::ScanImplicitRoots()函数）、寄存器以及堆栈（通过chakra!MemProtectHeap::FindRoots()函数）来搜索chunk指针，并将找到的那些存在引用的chunk进行标记。最终，当标记阶段完成后，那些仍未被标记的chunk将可重新用于对象的分配。
在撰写本文时，所涉案例中尚无已知的有关MemGC和Memory
Protector的绕过手法，但与其它利用防护一样，将来可能也会出现相关的绕过技术。另一方面，目前公开的有借助Memory
Protector实现32位IE中ASLR保护绕过的技术，以及借助Memory
Protector实现的64位IE上用于近似分配过程中（包括堆分配）地址区间的时序攻击，当然，这里给出的例子并不是针对Memory
Protector的绕过。
#### 4.6 分析与总结：漏洞利用防护措施
默认配置下，与Windows 10、Windows 8（Desktop版的IE）以及Windows
7上运行的IE11内容处理单元相比，EdgeHTML引擎所在的内容处理单元中涉及的漏洞利用防护措施要更加全面 -它默认运行在64位，从而允许ASLR保护工作于HEASLR模式，这导致了传统的堆喷技术变得不再可行或非常不可靠，因此，为了实现可控数据的内存布局，攻击者必然要开发出更为精确的利用技术。
另一主要区别是，Egde中采用了约束性更强的AppContainer来实现沙箱的功能，这极大限制了引擎中利用程序的访问权限和相应功能，所以除非此漏洞还存在于特权进程或系统组件[20]中，否则就需要借助另外的漏洞进行AppContainer沙箱逃逸。
同时，栈缓冲区安全检查（/GS）能减少潜在的可利用堆栈漏洞，而要绕过执行流保护则需要借助于新的利用技术，并且同Memory
Protector一样，MemGC将会进一步减少引擎中可利用的UAF漏洞。
总体来说，依托于这些防护手段，攻击者要想在EdgeHTML引擎中发掘可利用的漏洞则需要更多的投入，若需开发可靠利用则尤甚。言虽此，但攻击者势必会不断寻找新的方法来绕过这些保护，可以预见的是防护措施也将随着时间的推移而逐渐演变。
### 5 结论
EdgeHTML渲染引擎（以及其它浏览器渲染引擎）的攻击面将不可避免地随着Web新标准的实行而不断增多，其中的大部分将会来自对新标记/样式的解析，最明显的莫过于那些经由DOM
API导出给开发人员（当然还有攻击者）的新功能。
另一方面，引擎中新增的攻击面会通过应用于内容处理单元、相关依赖库以及其自身模块中全面的利用防护来进行缓解，这些防护措施将使许多引擎漏洞变得不可利用或者开发利用程序的难度变得非常大。
此外，下述与EdgeHTML引擎相关的研究领域不仅重要且很有意思，涉及内容都是可被远程访问且广泛用到的库/特性：
  * 引擎中所用Windows组件的原理研究、代码审计以及Fuzzing：XmlLite、MSXML6、Windows Imaging Component(WIC)、Media Foundation(MF)、DirectWrite和WinRT PDF Renderer。其中一些可能已经有公开成果了（比如DirectWrite [20]），但是还需要更多有关的研究，这样我们才能对此类关键组件的安全性有所了解。
  * 内部实现（算法细节，数据结构等）、Heap Grooming、堆元数据攻击（如果可能）以及对MemGC绕过技术的研究。本文对MemGC进行了初步的探讨，此外，针对其内部原理的进一步分析、研究如何通过MemGC堆进行攻击利用以及研究如何绕过MemGC保护将有助于理解其防护中的薄弱点，从而实现对它的改进。
最后，衷心希望本文能对你理解EdgeHTML渲染引擎安全性方面的知识起到帮助:P
*注：参考文献的信息详见原文
* * *