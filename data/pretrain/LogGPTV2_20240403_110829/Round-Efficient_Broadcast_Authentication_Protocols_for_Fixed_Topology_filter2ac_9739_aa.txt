title:Round-Efficient Broadcast Authentication Protocols for Fixed Topology
Classes
author:Haowen Chan and
Adrian Perrig
2010 IEEE Symposium on Security and Privacy
Round-Efﬁcient Broadcast Authentication Protocols for Fixed Topology Classes
Haowen Chan, Adrian Perrig
Carnegie Mellon University
Pittsburgh, Pennsylvania, USA
PI:EMAIL, PI:EMAIL
linear topologies,
Abstract—We consider resource-constrained broadcast au-
thentication for n receivers in a static, known network topology.
There are only two known broadcast authentication protocols
that do not use asymmetric cryptography, one-time signa-
tures, multi-receiver MACs, or time synchronization [1], [2].
Both these protocols require three passes of a message front
traversing the network. We investigate whether this amount of
interaction can be improved efﬁciently for speciﬁc common
topology classes, namely,
tree topologies
and fully connected topologies. We show modiﬁcations to the
protocols allowing them to complete in just two passes in
the linear and fully connected cases with a small constant
factor increase in per-node communication overhead, and a
further optimization that achieves the equivalent of just a single
pass in the linear case with O(log n) increase in per-node
communication overhead. We also prove new lower bounds
for round complexity, or the maximum number of consecutive
interactions in a protocol. We show that protocols with efﬁcient
per-node communication overhead (polylogarithmic in n) must
require at least 2 log n rounds in any topology; this implies that
our two-pass protocol in the fully-connected topology requires
the fewest possible passes, and this bound is asymptotically
tight for the full-duplex communication model. Furthermore,
we show that communication-efﬁcient protocols must take
asymptotically more than 2 log n rounds on trees; this implies
that that there are some tree topologies for which two passes
do not sufﬁce and the existing three-pass algorithms may be
optimal.
Keywords-Multicast Authentication, Broadcast Authentica-
tion, Linear Topology, Path Topology, Fully Connected Topol-
ogy
I. INTRODUCTION
Broadcast authentication is a critical security primitive in
computer networks. Due to the high computational overhead
of asymmetric cryptography and the high communication
costs of one-time signatures and multi-receiver message
authentication codes (MMACs), signature-free broadcast
authentication protocols have received a great amount of
attention in the research literature. Instead of a single cryp-
tographic construction transmitted from sender to receivers,
such protocols rely on multiple interactions among the
sender and the set of receivers. Of these, TESLA and related
protocols assume secure time synchronization and involve
long message buffering times. There are two remaining types
of efﬁcient broadcast authentication protocols: hash-chain
protocols based on the “Guy Fawkes” protocol ﬁrst proposed
by Anderson et al. [1] and a hash-tree protocol that we
described in previous work [2]. Both of these are three-
pass protocols, requiring message exchanges that traverse
the network a total of three times. Typically, the payload
message and an initial authenticator is disseminated from
the sender to the rest of the network; then a return pass
of messages is initiated from the edges of the network,
ﬂowing back towards the sender in a “converge-cast” trafﬁc
pattern; ﬁnally a third wave of messages ﬂows outwards
from the sender to the rest of the network. The fact that
the only known broadcast protocols that do not require
time synchronization all require three passes across the
network motivates the question of whether three passes is
universally minimal for such protocols. We show that this is
not the case by describing communication-efﬁcient two-pass
versions of both algorithms for certain general classes of
network topologies. At this point it may seem like there is no
further potential for improvement: a true single-pass protocol
implies the ability of each receiver to verify the broadcast
message upon reception; this seems unlikely without the
use of costly signatures or MMACs. However, we show
that this intuition is misleading. For the linear topology
(where all receivers are arranged in a simple path) we
can achieve a number of rounds of interaction functionally
equivalent to only taking a single pass across the network:
the optimization allows every receiver to authenticate the
message within the time it takes to reach the farthest receiver
from the sender. In addition to these optimizations, we
also show new theoretical lower bounds proving that our
optimizations do indeed achieve the lowest possible number
of passes in the topologies that we consider, as well as
showing that some classes of trees do require more than
two passes, and thus the three-pass algorithms may indeed
be optimal in general scenarios. This implies that analyses
which consider separate optimizations for separate network
topology classes are a necessary methodology for optimizing
protocol structure.
The concept of reducing the number of “passes” across
the network is intuitive; we quantify this more precisely.
Fundamentally, we are interested in optimizations for re-
ducing dependencies and increasing parallelism in terms
of interactions, such that the protocol requires a smaller
number of consecutive communication events. The metric
of choice is thus round complexity: we model the protocol
as taking a number of rounds, where, in each round, every
1081-6011/10 $26.00 © 2010 IEEE
DOI 10.1109/SP.2010.22
257
node exchanges information with at most one other node
(this is the standard “one-port” model used in the theory of
distributed systems [3], in which each machine has a single
network interface). Round complexity is a favored measure
of the time complexity of a protocol in the analysis of
distributed algorithms [4] because it is a fundamental prop-
erty of the protocol, reﬂecting how the protocol structures
its data/message dependencies: a protocol with low round
complexity necessarily has a shallow dependency graph.
As an intrinsic property of the protocol, round complexity
can thus be expressed solely in terms of n, the number of
nodes in the network, and, unlike more speciﬁc measures
of delay, remains constant regardless of the size of the
broadcast data payload and the particular physical or link-
layer characteristics of the network.
To measure the communication overhead of our protocols,
we use worst-case per-node communication, or congestion,
as a metric (this is more formally deﬁned in Section III).
Low communication congestion yields lower per-node en-
ergy consumption, which is important for many wireless
network applications. For completeness, we also consider
total communication overhead.
Our exploration of the design space for these protocols
thus yields various trade-offs between round complexity and
communication overhead. Consequently, different protocols
and optimizations will be most efﬁcient in terms of more
direct performance measures (such as latency, energy cost, or
usage of the medium) depending on the different deployment
environments.
We examine three topology classes covering most easily-
characterizable topology types in practice: paths, trees and
complete graphs. The path or linear topology occurs fre-
quently in wireless networks both directly in such examples
as networks deployed along corridors and roadways and
indirectly as a multi-hop routing path between a sender
and receiver. Trees are of prime importance in broadcast,
since spanning tree construction can occur implicitly in any
broadcast pattern: the sender is at the root of the tree, while
the parent of each receiver di is the node that ﬁrst forwarded
the broadcast message to di. The ease and generality of
deﬁning such a spanning tree explains why many broadcast
protocols are deﬁned only on trees [2], [5]. Trees can also
occur directly in sensor networks which are often deployed
in a hierarchical structure with a base station at the root [6].
The complete graph or fully connected topology occurs
frequently in Internet-scale distributed systems such as grid
computing and peer-to-peer networks, where any node can
communicate (via the Internet) with any other node.
Contributions: While there has been much work on
reducing the number of rounds of interaction in general
cryptographic protocols (such as secure multiparty compu-
tation), to the best of our knowledge, we present the ﬁrst
analysis on reducing the number of rounds of interaction
in broadcast authentication protocols deployed over network
topologies. We show the feasibility of this avenue of research
by deriving a variety of new optimizations and bounds
for round complexity in speciﬁc topology classes with n
receivers. For the linear topology, we show an algorithm that
completes in the equivalent of a single pass (n rounds), three
times less than the round complexity of any currently known
protocol. This optimization causes O(log n) communication
congestion overhead. We show another algorithm that com-
pletes in 2n rounds with constant congestion overhead; and
a general parameterization for 2-pass protocols that yields at
most n + n
(2k−1) round complexity for an additive k-factor
congestion overhead increase. We prove that any protocol
(in any topology) that achieves polylogarithmic congestion
overhead must require at least 2 log n rounds. For the fully-
connected topology under our communication model, we
show that this lower bound is achievable with an algorithm
that completes in 2(cid:2)log n(cid:3) + 1 rounds with O(log n) con-
bound of 2.44 log n − 2.33 rounds for polylogarithmic con-
gestion overhead. We also show a round complexity lower
gestion authenticated broadcast in trees. These are the ﬁrst
proven bounds linking the fundamental trade-offs between
round complexity and per-node communication in broadcast
authentication protocols.
II. RELATED WORK
In prior work [2], we describe using hash trees over
MACs for broadcast authentication. The construction is only
described for a tree topology; precise round complexity
and congestion optimizations for speciﬁc topologies are not
investigated. The general Guy Fawkes protocol framework
is proposed by Anderson et al. [1]; Bergadano et al. propose
CSA, a variant using explicit synchronization with acknowl-
edgments [7]. CSA uses per-receiver acknowledgments; Yao
et al. improve this for tree-based networks by proposing the
construction of an authenticated aggregate acknowledgment
using hashes [5]. Heer et al. suggest using a variant of
Guy Fawkes for authenticating two-party messages while
simultaneously securing message forwarding on the forward-
ing path [8]. In this protocol, message authentication is
only achieved between the two endpoints; the forwarding
nodes only achieve resistance against forwarding extraneous
amounts of spurious trafﬁc and cannot authenticate the
integrity of the actual message content being exchanged.
Perrig et al. propose TESLA [9], which replaces explicit
synchronization with loose time synchronization. There have
been a variety of improvements to TESLA, all requiring
some form of time synchronization [10], [11]. Zhu et al. pro-
pose a lightweight variant for one-hop communications
where messages are considered authentic if immediately
followed by a valid hash chain value [12]; this approach
does not work for multi-hop broadcasts. Luk et al. propose
families of broadcast authentication mechanisms [13], but
the communication overhead of their one-time signature
schemes can be quite substantial.
258
Multicast MACs (MMACs) are another major class of
broadcast authentication mechanisms. An inexhaustive list
of work on MMACs follows. Desmedt et al. propose
a polynomial-based multicast authenticator
[14], which
is generalized by Safavi-Naini and Wang [15]. Canetti
et al. propose an MMAC by concatenating bits of multiple
MACs [16]. Zhang et al. suggest adding perturbations to
improve the security of multi-MAC constructions [17]. All
MMACs involve communication overhead proportional to
the number of node compromises that the scheme tolerates.
this overhead is a lower bound
Boneh et al. show that
for all schemes which do not
involve digital signature
properties [18]. Stream signatures involve amortizing the
cost of a signature over a large number of packets [19],
[20], [21], [22], [23]. These approaches either require the
sender to know the data stream beforehand or use expensive
one-time signatures, or require the receiver to buffer a large
number of packets before it can reconstruct the authenticator,
and are hence more limited in their applicability than general
broadcast authentication techniques. Zhu et al. implement a
variant of the multiple-MAC approach in their interleaved
hop-by-hop packet ﬁltering system, essentially requiring
t individual MACs to protect against up to t malicious
nodes [24].
III. PROBLEM DEFINITION
We consider a network consisting of a sender node s
and n receiver/destination nodes d1, . . . , dn. The network
topology is represented by an undirected graph G = (V, E)
where V = {s, d1, . . . , dn} and an edge connects any two
nodes that can communicate (all communication links are
bidirectional).
We consider communication in the single-port model,
where each node has only one network interface and thus
can only communicate with only a single neighbor at a
time. We also do not consider local broadcast modes of
communication (where a single node broadcasts the same
message to all its neighbors) because the protocols we con-
sider are sensitive to packet loss; this implies the strong de-
sirability of a link-layer acknowledgment and retransmission
mechanism, which essentially reduces a local broadcast to
the equivalent of a series of point-to-point communications
(in terms of acknowledgments). Rather than model link-
layer acknowledgments as separate communication events,
for simplicity we consider only bidirectional point-to-point
communications in this model. Speciﬁcally, each node can
only communicate with one neighbor at any given point in
time, but this point-to-point communication can involve both
sending and receiving.
We assume that each receiver knows the number of
receivers n and its own index in the enumeration of the
receivers (i.e., node d1 knows that its index is 1, node d2
knows that its index is 2, and so on). Also, since we consider
topology-speciﬁc optimizations, the implicit assumption is
that the senders and receivers also know the general class
of the topology (e.g., linear, tree, or fully connected).
The sender s shares a unique secret key Ki with each
receiver node di. The nodes will not use asymmetric-key
cryptography in the protocol and rely on symmetric-key
methods for authenticity and integrity.
In the broadcast authentication problem,
the sender s
wishes to send a series of messages M1, M2, . . . , Mm to
all receivers such that each receiver can check that each
message is authentic, i.e., Mi was truly sent by s. Some
unknown fraction of the receivers may be malicious and may
behave in arbitrary ways to subvert the protocol. The goal of
the adversary is to cause some legitimate receiver to accept
some forged M (cid:2)
i that was never sent by the sender s. We
do not consider denial-of-service attacks, where a legitimate
message Mi that is sent by s is rejected by a legitimate node
due to the malicious actions of the adversary. We assume that
the messages contain sequence numbers such that message-
replay attacks are infeasible; speciﬁcally, each Mi contains
a unique sequence number identifying it as the ith message.