information to users in order to allow an informed choice as to whether con-
tent is desirable or should be blocked. It should be noted that defending against
drive-by downloads and general malware is not the focus of this paper. Rather,
the goal is to highlight injected ads to increase likelihood that user will make an
informed choice to not click on them.
We envision that OriginTracer could be used as a complementary app-
roach to existing techniques such as central approaches used by browser vendors.
Also, browser vendors can beneﬁt from using our system in addition to end users
to detect the content modiﬁcations by extensions in a more precise and reliable
way. In the following sections, we present design and implementation of our
system.
3 Web Content Provenance
In this section, we describe an in-browser approach for identifying third-party
content modiﬁcations in web browsers. The approach adds ﬁne-grained prove-
nance tracking to the browser, at the level of individual DOM elements. Prove-
nance information is used in two ways: (i) to distinguish between content that
originates from the web page publisher and content injected by an unassociated
third party, and (ii) to indicate which third party (e.g., extension) is respon-
sible for content modiﬁcations using provenance indicators. By integrating the
approach directly into the browser, we guarantee the trustworthiness of both
the provenance information and the visual indicators. That is, as the browser is
already part of the trusted computing base (TCB) in the web security model, we
leverage this as the appropriate layer to compute precise, ﬁne-grained provenance
information. Similarly, the browser holds suﬃcient information to ensure that
provenance indicators cannot be tampered with or occluded by malicious exten-
sions. While we consider malicious or exploited browser plug-ins such as Flash
Player outside our threat model, we note that modern browsers take great pains
to isolate plug-ins in least privilege protection domains. We report separately on
the implementation of the approach in Sect. 4.
Identifying Extension-Based Ad Injection
421
In the following, we present our approach to tracking and propagating content
provenance, and then discuss provenance indicators and remediation strategies.
3.1 Content Provenance
Web pages are composed of HTML that references resources such as stylesheets,
scripts, images, plug-ins such as Flash objects, or even other web pages loaded
inside frames. The document object model (DOM) is a natural structural rep-
resentation of a web page that can be manipulated through a standard API,
and serves as a suitable basis for provenance tracking. In particular, our system
tracks the provenance of each element e contained in a DOM. Provenance for a
DOM element is recorded as a set of labels (cid:2) ∈ P (L), where the set of all labels
L corresponds to a generalization of standard web origins to include extensions.
That is, instead of the classic origin 3-tuple of (cid:3)scheme, host, port(cid:4), we record
L = (cid:3)S, I, P, X(cid:4)
S = {scheme} ∪ {“extension”}
I = {host} ∪ {extension-identiﬁer}
P = {port} ∪ {null}
X = {0, 1, 2, . . .}
In other words, a label is a 4-tuple that consists of a normal network scheme or
extension, a network host or a unique extension identiﬁer, a port or the special null
value, and an index used to impose a global total order on labels as described
below. While browsers use diﬀerent extension identiﬁers, including randomly-
generated identiﬁers, the exact representation used is unimportant so long as
there is a one-to-one mapping between extensions and identiﬁers and their use
is locally consistent within the browser. An overview of provenance tracking is
depicted in Fig. 2.
Static Publisher Provenance. Content provenance tracking begins with
a web page load. As the DOM is parsed by the browser, each element is labeled
with a singleton label set containing the origin of the publisher, {l0}. Thus,
static provenance tracking is straightforward and equivalent to the standard use
of origins as a browser security context.
Dynamic Publisher Provenance. Content provenance becomes more
interesting in the presence of dynamic code execution. As JavaScript can add,
modify, and remove DOM elements in an arbitrary fashion using the DOM API
exposed by the browser, it is necessary to track these modiﬁcations in terms of
provenance labels.
New provenance labels are created from the publisher’s label set {l0} as
follows. Whenever an external script is referenced from the initial DOM resulting
from the page load, a new label li, i ∈ {1, 2, . . .} is generated from the origin of the
script. All subsequent DOM modiﬁcations that occur as a result of an external
script loaded from the initial DOM are recorded as {l0, li}. Successive external
script loads follow the expected inductive label generation process – i.e., three
422
S. Arshad et al.
Fig. 2. Element-granularity provenance tracking. (1) Content loaded directly from the
publisher is labeled with the publisher’s origin, l0. (2) An external script reference to
origin l1 is performed. (3) DOM modiﬁcations from l1’s script are labeled with the
label set {l0, l1}. (4) Further external script loads and subsequent DOM modiﬁcations
induce updated label sets – e.g., {l0, l1, l2}. (5) A DOM modiﬁcation that originates
from an extension produces provenance label sets {l0, l1, l2, l3} for the element.
successive external script loads from unique origins will result in a label set
{l0, li, lj, lk}. Finally, label sets contain unique elements such that consecutive
external script loads from a previously accessed origin are not reﬂected in the
label for subsequent DOM modiﬁcations. For instance, if the web page publisher
loads a script from the publisher’s origin, then any resulting DOM modiﬁcations
will have a provenance label set of {l0} instead of {l0, l0}. Content provenance
is propagated for three generic classes of DOM operations: element insertion,
modiﬁcation, and deletion.
Element insertions produce an updated DOM that contains the new element
labeled with the current label set, and potentially generates a new label set if
the injected element is a script. Element modiﬁcations produce a DOM where
the modiﬁed element’s label set is merged with the current label set. Finally,
element deletions simply remove the element from the DOM.
Extension Provenance. The third and ﬁnal form of provenance tracking
concerns content modiﬁcations due to DOM manipulations by extensions. In
this case, provenance propagation follows the semantics for the above case of
dynamic publisher provenance. Where these two cases diﬀer, however, is in the
provenance label initialization. While provenance label sets for content that orig-
inates, perhaps indirectly, from the web page publisher contains the publisher’s
origin label l0, content that originates from an extension is rooted in a label set
initialized with the extension’s label. In particular, content modiﬁcations that
originate from an extension are not labeled by the publisher’s origin. An excep-
tion to this occurs when the extension, either directly or indirectly, subsequently
loads scripts from the publisher, or modiﬁes an existing element that originated
from the publisher.
Identifying Extension-Based Ad Injection
423
3.2 Content Provenance Indicators
With the ﬁne-grained content provenance scheme described above, identifying
the principal responsible for DOM modiﬁcations is straightforward. For each
element, all that is required is to inspect its label set (cid:2) to check whether it
contains the label of any extension.
A related, but separate, question is how best to relay this information to the
user. In this design, several options are possible on a continuum from simply
highlighting injected content without speciﬁc provenance information to report-
ing the full ordered provenance chain from the root to the most recent origin.
The ﬁrst option makes no use of the provenance chain, while the other end
of the spectrum is likely to overwhelm most users with too much information,
degrading the practical usefulness of provenance tracking. We suspect that a
reasonable balance between these two extremes is a summarization of the full
chain, for instance by reporting only the label of the corresponding extension.
Finally,
if a user decides that the third-party content modiﬁcation is
unwanted, another design parameter is how to act upon this decision. Possible
actions include blocking speciﬁc element modiﬁcations, removing the oﬀending
extension, or reporting its behavior to a central authority. We report on the
speciﬁc design choices we made with respect to provenance indicators in the
presentation of our implementation in Sect. 4.
4 OriginTracer
In this section, we present OriginTracer, our prototype implementation for
identifying and highlighting extension-based web page content modiﬁcations.
We implemented OriginTracer as a set of modiﬁcations to the Chromium
browser. In particular, we modiﬁed both Blink and the extension engine to track
the provenance of content insertion, modiﬁcation, and removal according to the
semantics presented in Sect. 3. These modiﬁcations also implement provenance
indicators for suspicious content that does not originate from the publisher. In
total, our changes consist of approximately 900 SLOC for C++ and several lines
of JavaScript1. In the following, we provide more detail on the integration of
OriginTracer into Chromium.
4.1 Tracking Publisher Provenance
A core component of OriginTracer is responsible for introducing and propa-
gating provenance label sets for DOM elements. In the following, we discuss the
implementation of provenance tracking for publisher content.
Tracking Static Elements. As discussed in Sect. 3, provenance label sets
for static DOM elements that comprise the HTML document sent by the pub-
lisher as part of the initial page load are equivalent to the publisher’s web
origin – in our notation, l0. Therefore, minimal modiﬁcations to the HTML
1 SLOC were measured using David Wheeler’s SLOCCount [5].
424
S. Arshad et al.
parser were necessary to introduce these element annotations, which is performed
in an incremental fashion as the page is parsed.
Tracking Dynamic Elements. To track dynamic content modiﬁcations,
this component of OriginTracer must also monitor JavaScript execution.
When a script tag is encountered during parsing of a page, Blink creates
a new element and attaches it to the DOM. Then, Blink obtains the JavaScript
code (fetching it from network in the case of remote script reference), submits the
script to the V8 JavaScript engine for execution, and pauses the parsing process
until the script execution is ﬁnished. During execution of the script, some new
elements might be created dynamically and inserted into the DOM. According to
the provenance semantics, these new elements inherit the label set of the script.
In order to create new elements in JavaScript, one can (i) use DOM APIs to
create a new element and attach it to the web page’s DOM, or (ii) write HTML
tags directly into the page.
In the ﬁrst method, to create a new element object, a canonical example is to
provide the tag name to the createElement function. Then, other attributes
of the newly created element are set – e.g., after creating an element object for
an a tag, an address must be provided for its href attribute. Finally, the new
element should be attached to the DOM tree as a child using appendChild
or insertBefore functions. In the second method, HTML is inserted directly
into the web page using the functions such as write and writeln, or by mod-
ifying the innerHTML attribute. In cases where existing elements are modiﬁed
(e.g., changing an image’s src attribute), the element inherits the label set of
the currently executing script as well. In order to have a complete mediation
of all DOM modiﬁcations to Web page, Node class in Blink implementation
was instrumented in order to assign provenance label sets for newly created or
modiﬁed elements using the label set applied to the currently executing script.
Handling Events and Timers. An additional consideration for this Orig-
inTracer component is modiﬁcations to event handlers and timer registrations,
as developers make heavy use of event and timer callbacks in modern JavaScript.
For instance, such callbacks are used to handle user interface events such as click-
ing on elements, hovering over elements, or to schedule code after a time interval
has elapsed. In practice, this requires the registration of callback handlers via
addEventListener API for events, and setTimeout and setInterval
for timers. To mediate callbacks related to the addition and ﬁring of events and
timers, we slightly modiﬁed the EventTarget and DOMTimer classes in Blink,
respectively. Speciﬁcally, we record the mapping between the running scripts
and their registered callback functions, and then recover the responsible script
for DOM modiﬁcation during callback execution.
4.2 Tracking Extension Provenance
Chromium’s extension engine is responsible for loading extensions, checking their
permissions against those declared in the manifest ﬁle, injecting content scripts,
dispatching background scripts and content scripts to the V8 script engine for
Identifying Extension-Based Ad Injection
425
execution, and providing a channel for communication between content scripts
and background page.
Chromium extensions can manipulate the web page’s content by injecting
content scripts into the web page or using the webRequest API. Content scripts
are JavaScript programs that can manipulate the web page using the shared
DOM, communicate with external servers via XMLHttpRequest, invoke a lim-
ited set of chrome.* APIs, and interact with their owning extension’s back-
ground pages. By using webRequest, extensions are also able to modify and
block HTTP requests and responses in order to change the web page’s DOM.
In this work, we only track content modiﬁcations by content scripts and
leave identifying ad injection by webRequest for future engineering work. Prior
work, however, has mentioned that only 5 % of ad injection incidents occurred
via webRequest; instead, Chrome extensions mostly rely on content scripts
to inject advertisements [46]. Moreover, with modern websites becoming more
complex, injecting stealthy advertisement into the page using webRequest is
not a trivial task.
Tracking Content Script Injection and Execution. To track elements
created or modiﬁed during the execution of content scripts, extension engine
was modiﬁed to hook events corresponding to script injection and execution.
Content scripts can be inserted into the web page using diﬀerent methods. If
a content script should be injected into every matched web page, it must be
registered in the extension manifest ﬁle using the content scripts ﬁeld. By
providing diﬀerent options for this ﬁeld, one can control when and where the
content scripts be injected. Another method is programmatic injection, which
is useful when content scripts should be injected in response to speciﬁc events
(e.g., a user clicks the extension’s browser action). With programmatic injection,
content scripts can be injected using the tabs.executeScript API if the
tabs permission is set in the manifest ﬁle. Either way, content scripts have a
provenance label set initialized with the extension’s label upon injection.
Handling Callback Functions. Chromium’s extension engine provides a
messaging API as a communication channel between background pages and con-
tent scripts. Background pages and content scripts can receive messages from
each other by providing a callback function for the onMessage or onRequest
events, and can send messages by invoking sendMessage or sendRequest. To