title:Repackage-Proofing Android Apps
author:Lannan Luo and
Yu Fu and
Dinghao Wu and
Sencun Zhu and
Peng Liu
2016 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Repackage-prooﬁng Android Apps
Lannan Luo, Yu Fu, Dinghao Wu, Sencun Zhu, and Peng Liu
Email: {{lzl144,yuf123,dwu,pliu}@ist,szhu@cse}.psu.edu
The Pennsylvania State University
University Park, PA 16802
Abstract—App repackaging has become a severe threat to the
Android ecosystem. While various protection techniques, such as
watermarking and repackaging detection, have been proposed, a
defense that stops repackaged apps from working on user devices,
i.e., repackage-prooﬁng, is missing. We propose a technique that
builds a reliable and stealthy repackage-prooﬁng capability into
Android apps. A large number of detection nodes are inserted
into the original app without incurring much overhead; each is
woven into the surrounding code to blur itself. Once repackaging
is detected, a response node injects a failure in the form of
delayed malfunctions, making it difﬁcult to trace back. The
response nodes and detection nodes form high-degree connections
and communicate through stealthy communication channels, such
that upon detection several of the many response nodes are
selected stochastically to take actions, which further obfuscates
and enhances the protection. We have built a prototype. The
evaluation shows that the technique is effective and efﬁcient.
Keywords—Android apps; repackaging; tamper-prooﬁng; obfus-
cation
I.
INTRODUCTION
The explosive growth of the Android markets over the past
few years has led to a booming app economy [45]. However,
Android app piracy is rampant. Take game apps as an example, a
recent report showed a 95% piracy rate for Android games [16].
Among other forms of piracy, app repackaging is especially
notorious, because it does not only cause ﬁnancial loss to
honest developers, but also threatens the overall app ecosystem
and users. Attackers may repackage an app under their own
names to earn the app purchase proﬁt or change the app’s ad
library causing the ad proﬁt to go to attackers [14], [6], [27],
[15]. Furthermore, repackaging has become one of the main
forms of propagating malware. Previous research showed that
86% of more than 1200 Android malware families repackaged
legitimate app to include malicious payloads [59]. A popular
app may be repackaged by attackers with malicious payload
injected to steal user information, send premium SMS text
messages stealthily, or purchase apps without the victim user’s
awareness [14], [27], [58], [51], [9].
As Android app repackaging is prevalent and dangerous,
tremendous efforts have been made to address the problem
in recent years. Repackaging detection [14], [24], [8], [58],
[42], e.g., based on code similarity comparison, is performed
by authorities like Google Play, which, however, can be easily
evaded by various obfuscations; besides, depending on the
effect and timeliness of the detection, a repackaged app may
have been widely distributed before it is detected and removed
from the markets. Code obfuscation by legitimate authors is
used to increase the difﬁculty of reverse engineering [13], [35],
[36], so that it may take attackers more effort to inject malicious
code. Watermarking can be used to prove the ownership of a
repackaged app when disputes occur [45], [57]. However, none
of the existing techniques thwarts threats caused by repackaged
apps once they are installed on user devices. A defense that
prevents repackaged apps from working on user devices, which
we call repackage-prooﬁng, is needed.
Repackage-prooﬁng can be classiﬁed as a type of tamper-
prooﬁng (specialized in tackling app repackaging). Various
tamper-prooﬁng techniques exist. For example, Aucsmith [3]
proposed a cryptography-based approach, which breaks up
a binary program into individually encrypted segments. The
protected program is executed by jumping to a chain of tem-
porarily decrypted segments. The technique requires decryption
and jumps; while they are possible in Android bytecode, they
cannot be done in a stealthy way since such operations have
to go through calls to a class loader due the code-loading
mechanism in Android. Many tamper-prooﬁng techniques are
based on computing checksums of code segments [6]. They have
similar issues when applied to protecting Android bytecode,
since the code checking operation has to involve a call to a
custom class loader, and thus can be easily found and bypassed.
Instead of computing code checksums, Chen et al. [10] proposed
to calculate a hash value based on the actual execution trace
of the code and compare with a stored value. However, the
approach requires pre-computation of expected hash values
under all possible inputs; thus, it can only be applied to
relatively simple functions that produce deterministic hash
values. So far few existing tamper-prooﬁng techniques are
applicable to dealing with Android app repackaging. To the best
of our knowledge, there is no study in the open literature that
investigates repackage-prooﬁng—tamper-prooﬁng that prevents
repackaged apps from working on user devices.
Tamper-prooﬁng of type-safe distribution formats such as
bytecode in Android apps is more challenging than tamper-
prooﬁng native code [13]. Operations as simple as code
reading, which otherwise can be blended with the original
assembly code seamlessly, involve calls to a class loader
in Android. Thus, how to insert tampering detection into
bytecode stealthily is challenging. Furthermore, as in all
tamper-prooﬁng implementations, it requires a careful design
to hide the response code that injects failures upon tamper
detection, as an attacker can leverage debugging to locate the
response code once a failure is noticed. While the principle
of delaying the effect of an injected failure can be shared,
how to achieve it in Android apps needs fresh ideas. In
addition to hiding the statically inserted code and dynamic
failure generation operations, how to deliver an efﬁcient tamper-
prooﬁng implementation compatible with the current Android
system is a practical consideration as well as a challenge. We
identify these as the main challenges of designing an effective
repackage-prooﬁng technique resilient to evasion attacks.
We propose a repackage-prooﬁng technique, named Stochas-
tic Stealthy Network (SSN), that overcomes these challenges.
It builds the capability of repackage-prooﬁng into apps, such
that repackaged apps cannot run successfully on user devices.
978-1-4673-8891-7/16 $31.00 © 2016 IEEE
DOI 10.1109/DSN.2016.56
550
Our insight is that a unique identiﬁcation of the app author
and an immutable value bound with the app installation is the
public key contained in the certiﬁcate of an app package. So,
instead of calculating code checksums or hashes of execution
traces, our detection code detects repackaging by comparing
the public key hard-coded and hidden in the code against the
one contained in the app certiﬁcate.
Given an app, SSN inserts a large number of detection
nodes into the original code without incurring a high overhead.
To achieve stealthiness, each detection node is obfuscated
and then woven into the surrounding code, such that the
inserted detection code and original code blur together without
identiﬁable boundaries. Upon detection of repackaging, rather
than triggering a failure instantly, the detection node stealthily
transmits the detection result to a response node via a stealthy
communication channel, and the latter delays the failure for
a random period of time. As a result, the failure point is
apart from the response node, which makes it difﬁcult for
attackers to trace back to the response node. In addition, many
detection nodes and response nodes form a large network with
high-degree connections. Each time repackaging is detected, a
response node is picked stochastically to take actions. There are
a variety of response nodes, which means that, given the same
input, two consecutive executions of a repackaged app may end
up with different failures injected by different response nodes,
resulting in a more difﬁcult debugging scenario for attackers.
Through these strategies, our technique constructs a stochastic
and stealthy network of repackage-prooﬁng that is resilient to
evasion attacks.
We have implemented a prototype of SSN, which can be
applied by legitimate developers during compile time to build
repackage-prooﬁng into their apps. We evaluated SSN on 600
Android apps. The evaluation results show that the protection
provided by SSN is effective to defeat repackaging, resilient
to various evasion attacks, and incurs a very small overhead.
We made the following contributions.
•
To the best of our knowledge, this is the ﬁrst work
reported in the open literature that prevents repackaged
apps from working on user devices without relying on
authorities.
• We identify the main challenges in designing a
repackage-prooﬁng technique, and propose SSN that
overcomes those challenges. Unlike conventional
tamper-prooﬁng techniques, SSN leverages unique
characteristics of Android apps to construct effective
and stealthy protection.
• We have implemented a prototype of SSN compatible
with the Android platform. The evaluation shows that
SSN is effective, efﬁcient, and resilient to many evading
attacks.
II. OVERVIEW
A. Problem Statement
repackage the app without making changes for fun and fame.
Repackage-prooﬁng, as a type of tamper-prooﬁng, aims to
detect repackaging and prevent repackaged apps from working
properly on user devices.
On the Android platform, an app, no matter it is legitimate
or repackaged, has to be digitally signed with a certiﬁcate
before it is released. Each certiﬁcate contains a unique public
and private key pair. As the private key of the certiﬁcate is
held by the developer which is unknown to the public, an
attacker who wants to repackage an app has to choose a new
certiﬁcate to sign the repackaged app. Thus, the public key
contained in a certiﬁcate, which is a unique identiﬁcation of an
app developer, can be leveraged to determine whether an app
has been repackaged by an attacker. Speciﬁcally, our repackage-
prooﬁng technique monitors the change of the public key to
detect repackaging, and prevents any repackaged app from
working properly on user devices. As a consequence, few
users are willing to purchase and play the repackaged app,
which limits its propagation as well as harms. Other responses
upon detection are possible, for example, notifying legitimate
developers and authorities of the detection by emails and
removing repackaged apps from markets, which is not explored
in our current implementation but discussed in Section VIII.
B. Threat Model
We assume attackers can get the APK ﬁle of an app;
however, they cannot obtain the source code and the private key,
which is reasonable in practice. Moreover, it is possible that
end users are in collusion with attackers; for example, a user
may run a custom ﬁrmware that always generates the original
public key when running a repackaged app. We do not consider
such collusion attacks, and aim at protecting legitimate users.
Attackers may launch evasion attacks to bypass or nullify
the repackage-prooﬁng protection built into apps. There are
at least three types of evasion attacks. First, attackers can
utilize static analysis techniques, such as text searching, pattern
matching, static taint analysis, to ﬁnd the injected protection
code and make any code transformations necessary aiming
to disable/remove the protection code. Second, attackers can
also perform dynamic analysis, such as dynamic monitoring,
dynamic taint analysis, debugging, etc., to execute and examine
the app (bytecode and native binary), line by line, to identify
the injected protection code and disable/remove the code. Third,
in order to assist other evasion attacks and facilitate debugging,
an attacker may control the execution to provide the original
public key to bypass the detection, similar to the idea of replay
attacks in networks. We aim to address these evasion attacks.
Attackers may carefully infer the program semantics and
re-write parts of an app to bypass speciﬁc protection. Moreover,
they may be willing to sacriﬁce certain functionalities of the
original app and re-publish it. We handle both selective re-
writing and functionality-pruning attacks.
Android app developers produce apps and sell them in
the form of Android application packages (APK) ﬁles. Both
legitimate users and attackers can download the APK ﬁles, and
we consider that attackers try to repackage apps and re-release
them. An attacker may modify the code, such as the in-app
billing and ads components, to earn ﬁnancial proﬁt, insert
malicious payload to infringe upon user privacy, or simply
It is generally believed that a program protected by any
software-based approach can eventually be cracked as long as
a determined attacker is willing to spend time and effort, which
is also true with our protection. However, we assume attackers
are interested in repackaging an app only if it is cost-effective,
for example, when the cost of repackaging is less than that of
developing the app from scratch.
551
Source 
code A
Repackaging Detection
… 
Communication Channel
Protected 
source code A’
App 
developer
… 
Other app 
resources
APK file
Sign
Public key 
Repackaging Response
Fig. 1. The SSN architecture and deployment scheme.
Certificate
C. Architecture
We propose a repackage-prooﬁng technique called Stochas-
tic Stealthy Network (SSN), which builds reliable and stealthy
protection into apps without relying on authorities. Fig. 1 shows
its architecture and deployment scheme.
As shown in the dashed rectangle of Fig. 1, SSN is
comprised of three functional parts: Repackaging Detection,
Repackaging Response, and Communication Channel. An app
developer passes the app’s source code A and the public key
as inputs to SSN. Multiple distinct detection and response
nodes are then inserted into the original code for repackaging
detection and response. The communication channel is between
the detection and response nodes to construct a highly connected
network, so that whenever a detection node detects repackaging,
one of multiple response nodes takes actions stochastically in
order to confuse attackers. Finally, the resultant source code A(cid:2)
is generated as output and packaged with other app resources,
which are then signed with the original certiﬁcate to produce
an APK ﬁle for publication. In the following three sections, we
will present the design and implementation details of the three
functional parts: repackaging detection, repackaging response
and the communication channel, respectively.
III. REPACKAGING DETECTION
This section presents the repackaging detection part, includ-
ing how to construct and inject detection nodes.
A. Detection Node Construction
1) Construction Process: Repackaging detection consists
of multiple detection nodes; each checks the public key.
Speciﬁcally, a detection node extracts the public key from
an app during runtime and compares it against the original one
to detect whether or not the app has been repackaged. In the
following, we refer to Kr as the public key extracted during
runtime, and Ko as the original public key. Once a detection
node detects that Kr is different from Ko, it determines that
the app has been repackaged, and transmits the detection result
to response nodes via a communication channel (presented in
Section V).
Ko is provided by the legitimate developer who uses SSN.
The next question is how to retrieve Kr at runtime. We
leverage PackageManager, which is a class that (1) installs,
uninstalls, and upgrades apps, and (2) stores and retrieves
various kinds of application information. If an app being
installed has passed the signature veriﬁcation PackageManager
parses its APK ﬁle to read the application information and then
stores the information in three ﬁles under the /data/system
folder. One of the three ﬁles is packages.xml, which
contains package names, permissions, public keys, code paths,
1
2
3
4
5
6
7
8
9
10
11
12
CertificateFactory ctFty =
CertificateFactory.getInstance("X509");
//Get the X509certificate
X509Certificate cert =