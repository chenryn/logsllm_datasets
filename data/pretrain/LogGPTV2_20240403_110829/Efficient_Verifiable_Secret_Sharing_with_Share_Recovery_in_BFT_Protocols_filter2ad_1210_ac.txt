### 3.2.1 Hiding Property

**Informal Definition:**
The hiding property ensures that an adversary, even with access to \( k-1 \) of the replicas and their shares, cannot determine which of two secrets was shared with high probability. This property is computational, meaning it is designed to be as agnostic as possible to the underlying secret sharing scheme. Any information-theoretic secret sharing scheme would also satisfy these requirements.

**Formal Definition:**
A hiding adversary \( A_V \) is provided inputs \( q \) and \( \{ v_{pki} \}_{i \in [n]} \), where \( \langle q, \{ \langle v_{pki}, v_{ski} \rangle \}_{i \in [n]} \rangle \leftarrow \text{vssInit}(1^\kappa, k, n) \), and access to \( n + 1 \) oracles. The first \( n \) oracles are denoted \( \{ O_{V,i} \}_{i \in [n]} \); each \( O_{V,i} \) is initialized with \( v_{ski} \) and can be invoked as described below. The last oracle provided to \( A_V \) is denoted \( O_{bV} \), where \( b \in \{0, 1\} \). \( A_V \) can invoke this oracle with two inputs \( s_0, s_1 \in \mathbb{Z}_q \). When invoked, \( O_{bV} \) generates a random polynomial \( \hat{s} \in \mathbb{Z}_q[x] \) of degree \( k-1 \) such that \( \hat{s}(0) = s_b \) and performs \( \langle c, \{ u_i \}_{i \in [n]} \rangle \leftarrow \text{vssShare}(\hat{s}, q, \{ v_{pki} \}_{i \in [n]}) \), providing \( c \) to \( A_V \) and \( \langle c, u_i \rangle \) to \( O_{V,i} \).

The oracles \( \{ O_{V,i} \}_{i \in [n]} \) can be invoked by \( A_V \) as follows:
- \( A_V \) can invoke \( O_{V,i}.contrib(c) \), which returns the share \( u_i \) provided to \( O_{V,i} \) with commitment \( c \) by \( O_{bV} \).
- \( A_V \) can also invoke \( O_{V,i}.compromise \), which returns \( v_{ski} \) and all \( \langle c, u_i \rangle \) pairs received from \( O_{bV} \).

For any \( c \), let \( I_c \) be the set of oracle indices such that for each \( i \in I_c \), \( A_V \) invokes either \( O_{V,i}.compromise \) or \( O_{V,i}.contrib(c) \). Then, \( A_V \) is legitimate if \( |I_c| < k \) for every \( c \). Finally, \( A_V \) outputs a bit. We say that the VSS \( V \) is hiding if for all legitimate adversaries \( A_V \) that run in time polynomial in \( \kappa \),

\[
\left| \Pr \left[ A_V^{\{ O_{V,i} \}_{i \in [n]}, O_{1V}}(q, \{ v_{pki} \}_{i \in [n]}) = 1 \right] - \Pr \left[ A_V^{\{ O_{V,i} \}_{i \in [n]}, O_{0V}}(q, \{ v_{pki} \}_{i \in [n]}) = 1 \right] \right|
\]

is negligible in \( \kappa \).

### 3.2.2 Binding Property

**Informal Definition:**
The binding property ensures that the public commitment made by the dealer uniquely identifies the secret that is reconstructed. Essentially, the probability that the dealer can cause two different secrets to be reconstructed with the same public commitment is negligible.

**Formal Definition:**
A binding adversary \( A_V \) is provided inputs \( \langle q, \{ \langle v_{pki}, v_{ski} \rangle \}_{i \in [n]} \rangle \leftarrow \text{vssInit}(1^\kappa, k, n) \). \( A_V \) outputs \( c, \{ u_i \}_{i \in I} \), and \( \{ \hat{u}_i \}_{i \in \hat{I}} \). We say that VSS \( V \) is binding if for all binding adversaries \( A_V \) that run in time polynomial in \( \kappa \),

\[
\Pr \left[ \text{vssReconstruct}(c, \{ \langle v_{pki}, u_i \rangle \}_{i \in I}) = s \land \text{vssReconstruct}(c, \{ \langle v_{pki}, \hat{u}_i \rangle \}_{i \in \hat{I}}) = \hat{s} \land s \neq \bot \land \hat{s} \neq \bot \land s \neq \hat{s} \right]
\]

is negligible in \( \kappa \), where the probability is taken with respect to random choices made in \( \text{vssInit} \) and by \( A_V \).

### 3.3 Goals

Given a VSS scheme \( V \) and a DPRF \( F \), our goal is to construct a new VSS scheme \( V^* \) that provides the algorithms \( \text{vssInit}^*, \text{vssShare}^*, \text{vssVerify}^*, \) and \( \text{vssReconstruct}^* \) (denoted as \( \text{vssInit}^*, \text{vssShare}^*, \text{vssVerify}^*, \) and \( \text{vssReconstruct}^* \) for \( V^* \), respectively) as defined in Section 3.1, as well as three additional algorithms: \( \text{vssRecoverContrib}^*, \text{vssRecoverVerify}^*, \) and \( \text{vssRecover}^* \). The \( \text{vssShare}^* \) algorithm accepts additional arguments (a set of private keys for a DPRF) and returns an additional value \( r \) that is provided as input to all procedures except for \( \text{vssInit}^* \). The algorithms \( \text{vssRecoverContrib}^*, \text{vssRecoverVerify}^*, \) and \( \text{vssRecover}^* \) together permit a replica to recover its share from other replicas and behave as follows:

- **vssRecoverContrib\(^*\)**: A randomized procedure that returns \( \langle v^*_i, u^*_i \rangle \leftarrow \text{vssRecoverContrib}^*(c^*, r, v^*_{sk_i}, \hat{i}) \), where \( v^*_i \) is a recovery share with properties described below.
- **vssRecoverVerify\(^*\)**: A deterministic procedure that returns a boolean. \( \text{vssRecoverVerify}^*(c^*, r, v^*_{pk_i}, v^*_i, \hat{i}) \) must return true if \( v^*_i \) is output from \( \text{vssRecoverContrib}^*(c^*, r, v^*_{sk_i}, \hat{i}) \) with nonzero probability and \( \text{vssVerify}^*(v^*_{pk_i}, c^*, r, u^*_i) \) returns true.
- **vssRecover\(^*\)**: A deterministic procedure that returns \( u^*_{\hat{i}} \leftarrow \text{vssRecover}^*(c^*, r, \{ \langle v^*_{pk_i} \rangle \}_{i \in I}, \hat{i}, v^*_{pk_{\hat{i}}}, v^*_{\hat{i}}) \) if \( |I| \geq k \), \( \text{vssRecoverVerify}^*(c^*, r, v^*_{pk_i}, v^*_i, \hat{i}) \) returns true for all \( i \in I \), and \( \text{vssVerify}^*(v^*_{pk_{\hat{i}}}, c^*, r, u^*_{\hat{i}}) \) returns true. Otherwise, \( \text{vssRecover}^*(c^*, r, \{ \langle v^*_{pk_i} \rangle \}_{i \in I}, \hat{i}, v^*_{pk_{\hat{i}}}, v^*_{\hat{i}}) \) returns \( \bot \).

Due to the additional interfaces, we change the definition of hiding security as follows. Each oracle \( O^*_{V,i} \) additionally supports a query \( O^*_{V,i}.recover(c^*, \hat{i}) \) that returns \( \langle v^*_i, u^*_i \rangle \leftarrow \text{vssRecoverContrib}^*(c^*, r, v^*_{sk_i}, \hat{i}) \). For any \( c^* \), let \( I_{c^*} \) be the set of oracle indices such that for each \( i \in I_{c^*} \), \( A_{V^*} \) invokes \( O^*_{V,i}.compromise \), \( O^*_{V,i}.contrib(c^*) \), or \( \{ O^*_{V,\hat{i}}.recover(c^*, i) \}_{\hat{i} \in \hat{I}} \) where \( |\hat{I}| \geq k \). Then, \( A_{V^*} \) is legitimate if \( |I_{c^*}| < k \) for every \( c^* \).

### 3.4 Assumptions on Underlying VSS

Our construction combines an existing VSS scheme with a DPRF for which, if \( \langle q, \{ \langle v_{pki}, v_{ski} \rangle \}_{i \in [n]} \rangle \leftarrow \text{vssInit}(1^\kappa, k, n) \), then \( R = \mathbb{Z}_q \) and each share \( u_i \) output from \( \text{vssShare} \) is in \( \mathbb{Z}_q \). In addition, we require that the VSS offer additional procedures, as follows:

- **vssMakeSecret**: A procedure that creates \( s \leftarrow \text{vssMakeSecret}(q, \{ \langle x_i, y_i \rangle \}_{i \in I}) \) where \( s \in \mathbb{Z}_q[x] \) is of degree \( |I| \), and so that if \( \langle c, \{ u_i \}_{i \in [n]} \rangle \leftarrow \text{vssShare}(s, q, \{ v_{pki} \}_{i \in [n]}) \), then \( u_i = y_i \) for any \( i \in I \).
- **vssCombineCommitments**: A procedure such that if
  \[
  \text{vssReconstruct}(c, \{ \langle v_{pki}, u_i \rangle \}_{i \in I}) = s
  \]
  and
  \[
  \text{vssReconstruct}(\hat{c}, \{ \langle v_{pki}, \hat{u}_i \rangle \}_{i \in I}) = \hat{s}
  \]
  where \( s, \hat{s} \neq \bot \), and if
  \[
  \check{c} \leftarrow \text{vssCombineCommitments}(c, \hat{c})
  \]
  then
  \[
  \text{vssReconstruct}(\check{c}, \{ \langle v_{pki}, (u_i + \hat{u}_i) \rangle \}_{i \in I}) = s + \hat{s}
  \]
  An example of such a scheme is that due to Pedersen [42].

### 3.5 VSS Scheme with Recovery

Below, we describe the procedures that make up the VSS scheme \( V^* \). The algorithms are expressed in terms of constants \( n \) (the number of replicas), \( k \) (the reconstruction threshold), and \( \ell = \lceil n / (k - 1) \rceil \). Each share \( u^*_i \) and commitment \( c^* \) is a zero-indexed vector of \( \ell + 1 \) elements. We denote the \( j \)-th element of each by \( u^*_i[j] \) and \( c^*[j] \), respectively, for \( 0 \leq j \leq \ell \). Line numbers below refer to Figure 1.

- **vssInit\(^*\)**: Initializes the underlying VSS \( V \) in line 2, as well as a DPRF \( F \) in line 3. The public key \( v^*_{pk_i} \) for replica \( i \) consists of its public key \( v_{pki} \) for \( V \) and its public key \( d_{pki} \) for \( F \) (line 7) and similarly for the private key \( v^*_{sk_i} \).
- **vssShare\(^*\)**: Is modified to take in all of the private keys \( \{ d_{ski} \}_{i \in [n]} \) for the DPRF \( F \), as well as the other arguments included in its definition in Section 3.2. This enables the dealer to evaluate \( F \) itself, which it does on \( \langle r, i \rangle \) for each \( i \in [n] \) (lines 10–12), where \( r \) is a new, random \( \kappa \)-bit nonce (line 9). The resulting values \( \{ y_i \}_{i \in [n]} \) are divided into \( \ell \) groups of size \( k - 1 \), each group being used to construct a set of \( k - 1 \) points \( \text{Points}_j \leftarrow \{ \langle i, y_i \rangle \mid (j - 1)(k - 1) < i \leq j(k - 1) \} \) (line 14) on which \( \text{vssMakeSecret} \) is invoked (line 15). The resulting \( s_j \in \mathbb{Z}_q[x] \) is then shared using \( V \) (line 16). Recall that by the definition of \( \text{vssMakeSecret} \), each \( u^*_i[j] \) thus produced satisfies \( u^*_i[j] = y_i \). Of course, the input secret \( s \) is also shared (line 17). The results of these sharings are grouped according to replica index \( i \) and returned as \( u^*_i \) for each \( i \in [n] \), along with all of the sharing commitments \( c^* \) and the nonce \( r \) (line 18).
- **vssVerify\(^*\)**: Verifies the commitment \( c^*[0] \) and share \( u^*_i[0] \) (line 21) produced in the sharing of \( s \), as well as verifying the commitment \( c^*[j] \) and share \( u^*_i[j] \) (line 28) produced in the sharing of \( s_j \). In addition, it verifies (intuitively) that \( u^*_i[j] = y_i \) (line 25). The latter two verifications are skipped if \( u^*_i[1] = \bot \) (line 23), which occurs if the share \( u^*_i \) was recovered (see below). In this case, \( u^*_i[j] = \bot \) for all \( j \in [\ell] \) (or should be, and so any \( j \in [\ell] \) for which \( u^*_i[j] \neq \bot \) is just ignored). \( \text{vssReconstruct}^* \) simply uses \( \text{vssVerify}^* \) to verify each share \( u^*_i \) provided as input (line 33) and then submits \( c^*[0] \) and the inputs \( \{ \langle v_{pki}, u^*_i[0] \rangle \}_{i \in I} \) to \( \text{vssReconstruct} \) to reconstruct \( s \) (line 36).
- **vssRecoverContrib\(^*\)**: Invoked at replica \( i \) to construct its contribution to enable replica \( \hat{i} \) to reconstruct its share \( u^*_{\hat{i}}[j] \) (line 41) where \( j \leftarrow \lceil \hat{i} / (k - 1) \rceil \). Then, so that replica \( \hat{i} \) can recover its share of the original secret, replica \( i \) also returns its share of the DPRF scheme \( F \) evaluated at \( \langle r, \hat{i} \rangle \) (line 39).
- **vssRecoverVerify\(^*\)**: Executed by replica \( \hat{i} \) to verify that replica \( i \) performed \( \text{vssRecoverContrib}^* \) correctly. The output of \( \text{vssRecoverContrib}^* \) contributed by replica \( i \) is passed into \( \text{vssRecoverVerify}^* \) as \( v^*_i \) and is parsed into its constituent components in line 44. First, the DPRF contribution \( d_i \) is checked on line 46 to ensure that it corresponds to a correct evaluation of the DPRF scheme \( F \) at the point \( \langle r, \hat{i} \rangle \). \( \text{vssRecoverVerify}^* \) then combines the commitments (line 48) and uses \( \text{vssVerify} \) (line 49) to check that the blinded share \( u \) was created correctly. If both checks pass, then \( \text{vssRecoverVerify}^* \) returns true.
- **vssRecover\(^*\)**: Executed at replica \( \hat{i} \) to recover its share \( u^*_{\hat{i}}[0] \), which will be a share of the original polynomial for \( \hat{i} \). \( \text{vssRecover}^* \) first invokes \( \text{vssRecoverVerify}^* \) to make sure that the share sent by each replica \( i \in I \) is correct. \( \text{vssRecoverContrib}^* \) returns \( u^*_i \leftarrow \text{vssRecoverContrib}^*(c^*, r, v^*_{sk_i}, \hat{i}) \). \( \text{vssRecoverVerify}^* \) returns true if \( \text{vssRecoverVerify}^*(c^*, r, v^*_{pk_i}, v^*_i, \hat{i}) \) returns true. \( \text{vssRecover}^* \) returns \( u^*_{\hat{i}} \leftarrow \text{vssRecover}^*(c^*, r, \{ \langle v^*_{pk_i} \rangle \}_{i \in I}, \hat{i}, v^*_{pk_{\hat{i}}}, v^*_{\hat{i}}) \). In particular, \( u^*_{\hat{i}}[0] \) blinded by \( u^*_i \).

```plaintext
1: procedure vssInit∗(1κ , k, n)
2:   ⟨q, {⟨vpki , vski⟩}i∈[n]⟩ ← vssInit(1κ , k, n)
3:   ⟨{⟨dpki , dski⟩}i∈[n]⟩ ← dprfInit(1κ , k, n, {0, 1}κ × [n], Zq)
4:   for i ∈ [n] do
5:     vpk∗i ← ⟨vpki , dpki⟩
6:     vsk∗i ← ⟨vski , dski⟩
7:   return ⟨q, {⟨vpk∗i ⟩}i∈[n]⟩
8: 
9: procedure vssShare∗(s, q, {dski}i∈[n], {vpk∗i }i∈[n])
10:  r $← {0, 1}κ
11:  for i ∈ [n] do
12:    yi ← dprfEval(⟨r, i⟩, {dprfContrib(dskˆi , ⟨r, i⟩)}ˆi∈[n])
13:  for j ∈ [ℓ] do
14:    Pointsj ← {⟨i, yi⟩ | (j − 1)(k − 1) < i ≤ j(k − 1)}
15:    sj ← vssMakeSecret(q, Pointsj)
16:    ⟨c∗[j], {u∗i [j]}i∈[n]⟩ ← vssShare(sj , q, {vpki}i∈[n])
17:  ⟨c∗[0], {u∗i [0]}i∈[n]⟩ ← vssShare(s, q, {vpki}i∈[n])
18:  return ⟨q, {⟨vpk∗i ⟩}i∈[n], {u∗i }i∈[n], {c∗[j]}j∈[ℓ+1], r⟩
```

This structured and detailed explanation should provide a clear and professional understanding of the VSS scheme and its properties.