title:Lockable Signatures for Blockchains: Scriptless Scripts for All Signatures
author:Sri Aravinda Krishnan Thyagarajan and
Giulio Malavolta
5
6
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
Lockable Signatures for Blockchains:
Scriptless Scripts for All Signatures
Sri Aravinda Krishnan Thyagarajan
Giulio Malavolta
Friedrich Alexander Universität Erlangen-Nürnberg
Max Planck Institute for Security and Privacy
PI:EMAIL
PI:EMAIL
Abstract—Payment Channel Networks (PCNs) have given a
huge boost to the scalability of blockchain-based cryptocurren-
cies: Beyond improving the transaction rate, PCNs enabled cheap
cross-currency payments and atomic swaps. However, current
PCNs proposals either heavily rely on special scripting features
of the underlying blockchain (e.g. Hash Time Lock Contracts)
or are tailored to a handful of digital signature schemes, such as
Schnorr or ECDSA signatures. This leaves us in an unsatisfactory
situation where many currencies that are being actively developed
and use different signature schemes cannot enjoy the beneﬁts of
a PCN.
In this work, we investigate whether we can construct PCNs
assuming the minimal ability of a blockchain to verify a digital
signature, for any signature scheme. In answering this question
in the afﬁrmative, we introduce the notion of lockable signatures,
which constitutes the cornerstone of our PCN protocols. Our
approach is generic and the PCN protocol is compatible with any
digital signature scheme, thus inheriting all favorable properties
of the underlying scheme that are not offered by Schnorr/ECDSA
(e.g. aggregatable signatures or post-quantum security).
While the usage of generic cryptographic machinery makes our
generic protocol impractical, we view it as an important feasibility
result as it may serve as the basis for constructing optimized
protocols for speciﬁc signature schemes. To substantiate this
claim, we design a highly efﬁcient PCN protocol for the special
case of Boneh-Lynn-Shacham (BLS) signatures. BLS signatures
enjoy many unique features that make it a viable candidate for a
blockchain, e.g. short, unique, and aggregatable signatures. Yet,
prior to our work, no PCN was known to be compatible with it
(without requiring an advanced scripting language). The cost of
our PCN is dominated by a handful of calls to the BLS algorithms.
Our concrete evaluation of these basic operations shows that
users with commodity hardware can process payments with
minimal overhead.
Index Terms—Payment Channel Networks, Scriptless Scripts,
BLS Signatures
I . I N T R O D U C T I O N
Decentralized payments have become a reality with the
advent of blockchain based cryptocurrencies like Bitcoin,
Ethereum, etc. Users can now make payments among each other
without relying on a trusted central bank, but instead rely on a
public distributed ledger and a transaction scheme that helps
determine the validity of a payment publicly. However, a major
drawback of these cryptocurrencies is their low scalability due
to a low transaction rate. Traditional payment services like Visa,
Mastercard, etc, support order of 3 magnitude more payments
than even the most prominent cryptocurrencies like Bitcoin,
Ethereum, etc. This is because, a large amount of payments in
these currencies are ﬁghting for a few spots on the blockchain,
where they are validated and used to update the state of the
system.
Off-chain payments were proposed as a solution to this
problem where users no longer need to register every payment
on the blockchain. Instead, they can make several payments
locally and only register their ﬁnal balances on the chain.
Payment Channels (PC) [1] and its generalization Payment
Channel Networks (PCN) [1]–[4] are such off-chain (or layer
2) payment solutions that help improve the scalability of these
cryptocurrencies. In a PC protocol, two users Alice and Bob
open a payment channel by posting a single transaction on the
blockchain. This transaction locks some amount of coins in this
channel, referred to as channel capacity. Alice and Bob can
then make several payments locally by adjusting the balance of
the channel, without registering any of them on the chain. Once
the payment phase ends, a closing transaction that ﬁnalises
the balances of Alice and Bob in the channel is posted on the
chain, thus closing the channel. Given several payments can
be made at the price of only two transactions on the chain,
this is a dramatic boost to the number of payments when
the number of on-chain payments is limited. Consequently,
PCs have been practically deployed in major currencies like
Bitcoin [5], Ethereum [6], and Ripple [7].
Payment Channel Networks. A PCN generalizes the notion
of a PC and allows payments between users Alice and Bob
that do not directly share a PC, through a chain of intermediate
users that connects Alice with Bob, referred to as payment
path. PCNs also enable payments across different currencies
in a secure way: As an example, PCNs can be used to perform
atomic swaps of coins in different currencies. The ﬁrst proposals
of PCNs were based on a special scripting feature of the
blockchain, called Hash Time-Lock Contracts (HTLCs) [1], [2]:
parties setup payments along the payment path such that each
of these payments are successful if a pre-image of a hash value
is released before some time t. However, this approach has
several major limitations:
1) It suffers from wormhole attacks [3], where the adversary
can “skip” an honest intermediate user in the payment path,
thereby stealing his PCN participation fee.
2) It is compatible only with those blockchains that support
advanced scripts and several existing currencies like Monero [8],
Mimblewimble [9], Ripple [10], or Zcash [11] (shielded
© 2021, Sri Aravinda Krishnan Thyagarajan. Under license to IEEE.
DOI 10.1109/SP40001.2021.00065
937
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:49 UTC from IEEE Xplore.  Restrictions apply. 
addresses) are therefore left out.
3) It results in larger transactions and consequently larger
ledgers.
4) It lacks on-chain privacy as PCN transactions of a single
payment are linkable with each other,
5) Finally, PCN transactions are clearly distinguishable from
standard payments one-to-one payments, thus hampering the
fungibility of the coins.
To amend this, Malavolta et al. [3] proposed PCN protocols
without relying on any special scripts, also referred to as
scriptless scripts [12], that simultaneously solved all the above
issues. They presented two protocols exploiting the algebraic
structure of Schnorr and ECDSA signatures. More recently,
those techniques have been adapted to the lattice settings [13],
barring a few limitations in terms of on-chain privacy, as
discussed in [14].
Unfortunately, the techniques from [3] do not seem to extend
to PCN protocols for other popular signature schemes that
are of great interest to the cryptocurrency space as discussed
below. For instance, recently there has been a lot of interest in
developing new currencies or adapting existing currencies [15],
[16], with transaction schemes that use BLS signatures [17] and
its variants [18], that offer useful properties, such as key and
signature aggregation, which have the potential to drastically
reduce the size of the ledger. Furthermore, the looming threat
of quantum computers has motivated a large body of research
in lattice-based [13], [19]–[21] and hash-based [22] signatures,
and subsequent development of new currencies based on these
signatures [23]–[26]. It is plausible to foresee a near future
where all blockchains will have to move to a signature scheme
with post-quantum security.
Therefore, to enjoy all the beneﬁts of PCNs based on script-
less scripts in all existing (and possibly future) cryptocurrencies,
we require a PCN protocol that does not rely on advanced
scripts and can handle any signature scheme. This motivates
us to ask the following question:
Can we construct a PCN assuming only the bare
minimal ability of a blockchain to verify a signature?
In this work we give a positive answer to the above question,
for any signature scheme. Before delving into the description of
our approach, we explain the challenges that arise when trying
to construct PCN generically, without assuming any algebraic
structure of the signature scheme.
A. Challenges in Constructing PCNs
Let us recall the high-level idea of the PCN protocol from [3].
They consider a setting with n parties P1, . . . , Pn where P1 is
the sender and Pn is the receiver. Neighbouring parties Pi and
Pi+1 (for i ∈ {1, . . . , n − 1}) in this path have open channels
between them. Their PCN protocol consists of two phases: A
lock and a release phase. To make a payment of v coins, P1,
together with each pair of intermediate users, sets up a payment
lock as follows: For i ∈ {1, . . . , n − 1}, Pi and Pi+1 set up a
payment transaction denoted by tx pay,i paying v coins from
their channel to Pi+1, along with a partial signature ¯σi on this
transaction. The partial signature ¯σi is not a valid signature on
tx pay,i but can be transformed into a valid signature σi provided
that a certain release information ki is available. Generating
partial signatures requires exploiting the algebraic structure of
Schnorr or ECDSA signatures, where the sender “injects” some
randomness in the signing process that causes the signature to
be partial or incomplete. Things are set in such a way that if
Pi+1 obtains σi+1, he can locally recompute ki and learn the
valid signature σi.
Once the payment locks are setup until party Pn, the
sender P1 initiates the release phase by revealing the release
information for the n-th partial signature to Pn. A cascade
of payment release happens until party P2, which concludes
one payment of v coins from P1 to Pn. There are two main
properties that are satisﬁed by this locking mechanism:
1) Atomicity: Even if Pi and Pi+1 collude, they cannot
transform the lock ¯σi into the valid signature σi without the
help of the sender (P1). They may of course generate a new
i (cid:54)= σi, but only σi can help release the (i−1)-
valid signature σ(cid:48)
th lock. Therefore no two colluding intermediate neighbours
Pi and Pi+1 can initiate the payment release ahead of time.
This assures the sender that no intermediate user Pi+1 can
steal his v coins, that were intended for Pn.
2) Balance Security: Even if all parties but Pi are malicious,
Pi is guaranteed that a valid signature on a transaction tx pay,i+1
will always allow it to recover a valid signature on tx pay,i.
This is to ensure that intermediate users never lose coins. The
protocol enforces this by having intermediate users checking
whether the randomness injected by the sender is consistent
across different instances of the partial signing protocol.
To ensure both of the properties above, their protocol heavily
relies on the ability of the sender to inject consistent randomness
in the signing protocol, which in turn leverages the special