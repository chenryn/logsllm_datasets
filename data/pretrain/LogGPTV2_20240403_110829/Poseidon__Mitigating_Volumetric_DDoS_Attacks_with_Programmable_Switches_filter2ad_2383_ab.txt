like P4. In a P4 program, developers customize packet headers,
build packet processing graphs, and specify entries in match-
action tables. The compiler provided by switch vendors can
compile the programs into binaries and generate interactive
APIs. The binaries specify data plane contexts and are loaded
into switches, while the APIs are used by control plane
applications to interact with the data plane.
The programmable switching ASICs and P4 language make
it possible to implement custom terabit packet processing
devices, as long as the deﬁned logics can be ﬁtted into the
match+action model of switching ASICs. Given the perfor-
mance and ﬂexibility, we brieﬂy highlight some new opportu-
nities that programmable switches bring for DDoS defenses:
3
IngressPipelineEgressPipelineQueueing&Bufferpkt(a) Switch data plane architecturePacket Header & MetadataACLM.A.TableConn.M.A.TableProxyM.A.TableCountM.A.TableIPForwardM.A.Table(b) Ingress/Egress pipeline architecture(c) Match-action table architectureMatchActionAction Datasrc_ip:10.0.1.0/24set_next_hop()eport=4src_ip:192.0.0.0/8, tcp_flag:0x10validate_cookie()cookie_seed=531………defaultdrop()-Stage 1Stage 2Stage 3Stage 4work provides DDoS defenses “as-a-service” for its customers,
or builds its own trafﬁc scrubbing center to mitigate DDoS
attacks. As real-world examples, today’s ISPs have already
started to provide such value-added commercial services (e.g.,
AT&T [11]) to customers, and numerous cloud networks
also have such scrubbing centers (e.g., Google, Alibaba, and
Tencent [15], [16]). Of course, a customer network could also
build a scrubbing center of its own. If desired, the ISP or cloud
network could also allow its customers to deploy POSEIDON
DDoS defense polices for their own trafﬁc (e.g., the customer
would monitor and scrub potential attack trafﬁc to itself [61]).
The scenario we focus on is complementary to CDN-based
DDoS defenses, where users can ofﬂoad their content to CDNs
(Content Delivery Networks), and it can indeed co-exist with
other defenses. For instances, before the attack trafﬁc arrives
at CDNs, it may be ﬁltered out by some scrubbing center that
sits in front of them.
Threat Model: We focus on volumetric DDoS attacks against
victim destinations. We assume that attackers have a ﬁxed
budget to buy or rent a large number of bots in a botnet
(e.g., a collection of compromised IoT devices), and aim
to exhaust the bandwidth or computation resources of the
victims [77], [79]. Attackers can choose a composition from
a set of candidate DDoS attacks (e.g., Smurf attacks, SYN
ﬂood attacks, ICMP/UDP ﬂood attacks, Elephant ﬂow attacks,
DNS reﬂection attacks, NTP ampliﬁcation attacks, HTTP ﬂood
attacks, Slowloris attacks, and etc.) and launch multiple DDoS
attacks simultaneously. During the attack, attackers can change
the types and the mix of attacks dynamically.
B. POSEIDON Workﬂow and Challenges
i.e.,
We illustrate the general workﬂow of a classic DDoS de-
fense, i.e., attack detection, trafﬁc steering, policy declaration,
and attack mitigation. First, the ISP or cloud network uses
some in-band or out-of-band anomaly detection techniques
to determine whether a customer is under attacks [7], [52].
The detection algorithms are out-of-scope for this paper. We
assume that the detection procedure will produce some coarse-
grained characterizations of the suspicious trafﬁc,
the
attack types, the estimated volume of each type of suspicious
trafﬁc, and the suspicious IP preﬁxes. Alternatively, such
information could also be obtained from the victim customers.
Note that this is a common practice for many ISPs today [22].
In our scenarios, the estimation for attack trafﬁc does not
need to be very precise, and it is only used to help steer
the suspicious trafﬁc, to use the right defense polices, and
to allocate the switch resources. The monitor primitives in
the POSEIDON system will further obtain more ﬁne-grained
detection results for concrete attack responses. Second, the
suspicious trafﬁc is steered to the trafﬁc scrubbing center, and
operators specify the needed POSEIDON policies containing the
estimated information to mitigate the attack. Third, POSEIDON
orchestrates and manages the resource of the scrubbing center,
including programmable switches and commodity servers, to
coordinate them together for attack mitigation.
Fig. 2 shows this workﬂow. POSEIDON takes the DDoS
defense policies as input, and maps the policies to the available
pool of resources (i.e., switches and servers). Users of POSEI-
DON do not need to understand the details of the underlying
resources; instead, they only need to focus on choosing the set
Fig. 2: The overall architecture of POSEIDON.
of primitives for attack mitigation. In order to achieve this goal,
POSEIDON needs to address the following three challenges.
Simple, modular policy representation (§IV): Of course,
one could always directly write the defense programs in P4 or
C/C++, but this would be rather low-level and error-prone [4],
[72]. As a result, we desire a simple and modular way to
specify the defense policies. However, different DDoS attacks
target different protocol- and system-vulnerabilities, so the de-
fenses should necessarily differ in their working mechanisms.
For example, a SYN ﬂooding attack exploits the TCP three-
way handshake to consume resources on the targeted server
and render it unresponsive, a DNS reﬂection attack exploits
vulnerabilities in DNS servers to turn initially small queries
into much larger payloads to overwhelm victims, and some
new IoT-based DDoS attacks exploit the vulnerabilities of IoT
protocols to conduct attacks [64]. The heterogeneity in DDoS
attacks requires heterogeneous DDoS defense mechanisms,
which make it challenging to design a simple and modular
representation to capture the defense policies.
Optimized, efﬁcient defense orchestration (§V): Although
programmable switches could achieve several orders of mag-
nitude higher throughput and lower latency than commodity
servers,
they only have limited on-chip resources and re-
strictive computational models [10], [72], [74], [75], [44].
Therefore, it is necessary for us to utilize the resources on
the switching ASICs as efﬁciently as possible. Moreover,
some defenses may even go beyond the computational model
of the switching ASICs, which is impossible to be fully
implemented on the switches. The aforementioned points make
it challenging to fully explore the potential of switching ASICs
to mitigate multi-vectored DDoS attacks.
Handling dynamic attacks at runtime (§VI): Advanced
DDoS attacks are usually dynamic, where attackers change its
attack composition and the volume of each attack type over
time. This requires that POSEIDON should be adaptive to the
attack dynamics, i.e., POSEIDON should change the deployed
defenses based on the attacks. However, some DDoS defense
mechanisms (e.g., SYN proxy) are stateful, and na¨ıvely recom-
piling the P4 programs for deployment would lead to state loss
and ﬂow interruption. A strawman solution is to update the
defenses when all ﬂow states are no longer needed. However,
since some ﬂows could be long-lived,
it may be difﬁcult
to identify a single point
in time for this update. During
this unbound period, the precious resources on programmable
switches cannot be used to scrub the attack trafﬁc, which is a
waste of precious and high-density defense resources. Achiev-
4
Resource OrchestrationRuntime ManagementAttack trafficLegitimate trafficLegitimate trafficControl PlaneInfrastructureDefense PoliciesServerServerServer::= v | h | M ((cid:126)v) | E (cid:5) E
::= E ◦ E | P &P | P|P | ¬P
Expression
E
Predicate
P
Monitor
M ::= count(P ,(cid:126)h, every) | aggr(P ,(cid:126)h, every)
Action
A ::= drop | pass | log | rlimit | sproxy | puzzle
Policy
C ::= A | if P : C else : C | (C|C )
Fig. 3: The syntax for expressing POSEIDON defense
policies. (cid:5) describes calculative operators and ◦ describes
logical operators.
ing an efﬁcient (i.e., switch ASICs utilization) and correct
(i.e., without legitimate ﬂow interruption) DDoS defense with
programmable switching ASICs is another challenge.
IV. EXPRESSING DEFENSE POLICIES
POSEIDON presents a high-level interface to programmers
for developing DDoS defense policies. Instead of exposing
low-level interfaces in P4 or C/C++, POSEIDON modularizes
a set of defense primitives that can be shared across and
composed by different policies. Users can also extend this set
of primitives easily.
A. The POSEIDON Policy Language
At ﬁrst glance, DDoS attacks may seem very different
in nature, as they exploit different attack vectors and require
different defense strategies. However, we observe that there
are key components common to many volumetric attacks—
detecting an attack typically requires a set of tests on packet
headers or statistics, and responding to a detected attack
eventually boils down to speciﬁc actions taken on network
packets. Therefore,
it should be feasible to capture these
common components in a high-level abstraction.
In particular, we believe that the Frenetic (NetCore) family
of SDN programming languages [53], [2], [4] provides a good
starting point due to their high modularity [53]. A policy in
these languages consists of a series of match/action statements
over a selected set of packet headers. Since these languages are
primarily targeted at specifying packet forwarding behaviors,
we introduce several customizations for DDoS defense based
on a prototype language named NetCore [53]. A summary of
POSEIDON’s syntax is shown in Fig. 3.
Similar as NetCore, expressions could be formed over value
(v), header ﬁelds (h) or monitor instances (M ((cid:126)v)). Multiple
expressions can also be composed with different calculative
operators together (E (cid:5) E). predicates are constructed over
expressions with diverse logical operators (E ◦ E), which
are used by policies to perform tests and decide on actions.
There are also differences from NetCore, however. We allow
the deﬁnition of attack detection logic using monitors, which
collect aggregate statistics over certain header ﬁelds and use
them as indicators of speciﬁc attacks. The defense actions also
go beyond forwarding packets to switch ports—they might, for
instance, record needed states across packets (e.g., for SYN
ﬂooding defense), invoke more sophisticated actions supported
in software (e.g., client puzzles), or combine multiple actions
5
together for mixed-vector attacks. In the following discussion,
we mainly illustrate several distinct primitives from NetCore.
First, the detection of DDoS attacks typically relies on
trafﬁc statistics instead of per-packet information. Thus, we
introduce our monitor abstractions. Intuitively, a monitor prim-
itive should aggregate some certain packets during a period
into a block of memory, with a certain statistic granularity. The
statistic granularity is a set of header ﬁelds that collectively de-
ﬁnes the granularity for monitoring. For instance, some attacks
may be detected using statistics over source IP addresses (e.g.,
UDP ﬂood), whereas others may need a ﬁner granularity (e.g.,
detecting elephant ﬂows). We provide two monitor elements
here, count and aggr. As its name indicates, count(P ,(cid:126)h, every)
selects the packets that satisfy the predicate P, and counts
the number of the packets with granularity (cid:126)h every every
seconds. For example, count(pkt.tcp.ﬂag == SYN, [ip.src], 5)
denotes counting all
for each
source IP address every 5 seconds. As another example,
count(pkt.udp.dport == 53, [ip.src], 3600) would monitor the
source addresses that have sent DNS requests. The period every
is set as one hour so that the DNS replies that reply too late is
regarded as invalid. Different from count, which focuses on the
number of elements, aggr(P ,(cid:126)h, every) increments the counter
with packet sizes. It can be used as a powerful primitive to
collect statistics over the number of bytes for certain packets.
For instance, aggr(True, [ip.src], 5) would count the size of all
the packets for each source IP address every 5 seconds.
the TCP SYN packets
Second, primitive actions are central building blocks for
DDoS response: an action receives a set of packets and
conducts the corresponding processing for these packets. We
observe that although DDoS defenses are heterogeneous for
different attacks, the defense actions have many similarities,
and there is only a limited set of basic building blocks.
Once a malicious action is detected, some defense mechanisms
simply drop the packets with a speciﬁc predicate (drop). While
for benign identiﬁes (e.g., source IP address), most defense
mechanisms let their packets pass (pass). Rate limiter (rlimit)
rate-limits the packets that satisfy certain conditions. And for
most TCP-related DDoS attacks, SYN proxy (sproxy) is a
powerful defense element, and puzzle is effective for HTTP-
based ﬂood attacks. Meanwhile, for many attacks, operators
may have the need to log certain packets for forensic use,
so we also introduce a log primitive. Importantly, the set of
building blocks presented here is not meant to be an exhaustive
list—programmers can easily add new ones to the library of
defense primitives using our policy language (more discussion
in §IX).
Finally, for policy declaration, POSEIDON is very similar to
NetCore/NetKAT family of languages, which allows branches
(if . . . else . . . ) and policy composition (|). Users can include
conditional branches that invoke different defense primitives
based on certain conditions. They can also compose multiple
policies together using the composition operator |. We will
illustrate these primitives with concrete examples in the next
subsection.
B. Policies by Examples
Now, we describe DDoS defense policies for six typ-
two are adapted from
ical DDoS attacks, where the ﬁrst
1
2
3
4
5
6
7
8
9
1
2
3
4
5
6
7
syn_count = count(pkt.tcp.flag == SYN, [ip.src], 5)
ack_count = count(pkt.tcp.flag == ACK, [ip.src], 5)
if syn_count([pkt.ip.src]) - ack_count([pkt.ip.src]) > T:
else if syn_count([pkt.ip.src]) == ack_count([pkt.ip.src]):
drop
pass
else:
sproxy
Fig. 4: SYN ﬂood defense.
dns_query = count(pkt.tcp.dport == 53, [ip.src], 3600)
if pkt.tcp.sport == 53:
if dns_query([pkt.ip.dst]) > 0:
else:
pass
drop
Fig. 5: DNS ampliﬁcation defense.
Bohatei [22], and the third is a new policy supported by
POSEIDON. Please refer to Appendix A for the other three
defense examples. Our goal here is not to develop new defense
mechanisms, but
to illustrate the ﬂexibility and simplicity
of POSEIDON policy language in dealing with a diverse set
of DDoS attacks. Once the characteristics of one attack are
identiﬁed, operators can easily and simply express the defense
policy for the attack. It is worth mentioning that our primitives
do not have to be purely implemented in the programmable
switches, while some sophisticated primitives may need the
assistance of the servers.
SYN ﬂood attack. As shown in Fig. 4, we ﬁrst track the
number of open TCP sessions for each source IP every 5
seconds, which is implemented by counting SYNs and ACKs
with the count primitive (ﬁrst 2 lines). Based on the statistics
of the previous period, if a source IP has much more SYNs
than ACKs, we mark its future packets as attacks and drop
them (line 4, line 5). If a source IP has no asymmetry between
SYNs and ACKs, we mark it as benign and let its packets pass
(line 6, line 7). Otherwise, we mark this as a gray area and
send packets from these source IPs to a sproxy defense module
(line 8 and line 9).
DNS ampliﬁcation. In DNS ampliﬁcation attacks, attackers
use numerous spoofed protected servers’ IPs to request many
DNS queries that result
in a large number of answers to
overwhelm the protected servers’ bandwidth. To defend against
this kind of attacks, as shown in Fig. 5, we ﬁrst track all the
protected servers’ DNS queries (line 1). Only the incoming
DNS replies which have been queried by protected servers
within an hour are allowed to enter the network (lines 3–7).
HTTP ﬂood attack. In HTTP ﬂood attacks, each attacker
generates a large number of legitimate HTTP requests and
sends them to victim servers, which can easily overload the
web servers and make the service unavailable. To mitigate this
kind of attack, as illustrated in Fig. 6, a simple approach is to
track the number of HTTP requests for each source IP (line
1). If the number of client sessions exceeds a threshold (T)
during the previous period, adopt the puzzle mechanism for
this source IP (lines 3–4). Otherwise, forward the packets from
this source IP as normal (lines 5–6). Note that the puzzle
defense cannot be implemented within the programmable
switch. Rather, the switch redirects the ﬂow to an HTTP server
that implements the defense (e.g., a CAPTCHA). We discuss
puzzle defense further in §V-A.
http_get_counter = count(pkt.http == GET, [ip.src], 5)
if http_get_counter([pkt.ip.src]) >= T:
puzzle
else:
pass
Fig. 6: HTTP ﬂood defense.
From these examples and programs, we can see that PO-
SEIDON policy language is easy to understand and expressive
enough to convey operators’ defense intents.
V. ORCHESTRATING THE DEFENSE
POSEIDON has a resource orchestration component that
analyzes each primitive in a given policy, and partitions the