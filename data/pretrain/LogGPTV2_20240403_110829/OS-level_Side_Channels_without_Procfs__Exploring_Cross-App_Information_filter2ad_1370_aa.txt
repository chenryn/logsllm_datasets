# OS-level Side Channels without Procfs: Exploring Cross-App Information Leakage on iOS

## Authors
Xiaokuan Zhang, Xueqiang Wang, Xiaolong Bai, Yinqian Zhang, and XiaoFeng Wang

### Affiliations
- **Xiaokuan Zhang** and **Yinqian Zhang**: The Ohio State University, {zhang.5840, zhang.834}@osu.edu
- **Xueqiang Wang** and **XiaoFeng Wang**: Indiana University at Bloomington, {xw7, xw48}@indiana.edu
- **Xiaolong Bai**: Tsinghua University, PI:EMAIL

## Abstract
Previous studies have shown that Android and its underlying Linux operating systems do not adequately isolate mobile apps, making them vulnerable to cross-app side-channel attacks. These attacks allow malicious apps to infer sensitive user data (e.g., passwords) or private information (e.g., identity, location) without requiring specific permissions. However, no prior work has explored such side-channel attacks on iOS-based mobile devices. One reason is that iOS does not implement procfs, the most common attack vector in Android.

In this paper, we present the first study of OS-level side-channel attacks on iOS. We identified several new side-channel attack vectors (i.e., iOS APIs that enable cross-app information leakage), developed machine learning frameworks (i.e., classification and pattern matching) to improve the accuracy of inference attacks, and demonstrated three categories of attacks that exploit these vectors and frameworks to exfiltrate sensitive user information. We reported our findings to Apple, and some of our suggested countermeasures have been incorporated into iOS 11 and macOS High Sierra 10.13 and later versions.

## 1. Introduction
Android and iOS are the two most popular operating systems for smartphones, wearables, and tablets. Security in these mobile systems has been extensively studied, primarily focusing on Android [31, 36, 42, 45, 66, 67], with limited research on iOS [34, 37]. Of particular interest are side-channel attacks, which allow untrusted third-party apps (e.g., free games) to infer private user information by monitoring the execution of OS services or trusted apps (e.g., banking apps).

Side-channel attacks typically do not exploit software vulnerabilities directly but instead infer confidential user information from seemingly harmless vectors that reveal artifacts of the target app or service's execution. Examples include shared CPU caches (cache side channels), mobile sensors (sensor-based side channels), and public APIs provided by the OS for querying the status of the device, OS, or other apps (OS-level side channels).

This paper focuses on OS-level side channels, an area of research previously conducted only on Android. Numerous studies [31, 36, 42, 45, 64, 67] have shown that the OS and its underlying Linux kernel fail to properly control information leaks from procfs, a pseudo filesystem available on UNIX-like operating systems to export kernel statistics to the user space. These statistics can be categorized into per-process and global statistics. Most existing side-channel attacks exploit per-process statistics in procfs [31, 42, 45, 64, 67].

Unlike Android, iOS is known for its stringent security controls, which make many Android-style attacks less feasible. Specifically, the iOS kernel, built on Mach and FreeBSD, does not have a procfs, effectively closing the main avenue for such inference attacks. Although some procfs-like resources are still available on iOS (e.g., through sysctl()), they are heavily restricted. For example, since iOS 9, Apple has modified sysctl() to prevent sandboxed apps from accessing information about other running processes [16]. As a result, it is currently impossible to conduct side-channel analysis on iOS by exploiting per-app statistics, which defeats most known attacks on Android.

In this paper, we take the first step towards understanding cross-app side-channel risks on iOS. We identified several new attack vectors, including APIs reporting global system statistics (e.g., CPU usage, memory usage, network usage, storage usage). Although these functionalities are expected to be provided by the OS, they can be exploited for side-channel attacks. Individually, these global statistic counters are noisy and do not provide sufficient information about a specific target. However, collectively, they can be used to deduce detailed user data when integrated using machine learning techniques.

We developed machine learning frameworks that combine multiple noisy side-channel attack vectors. Our classification framework samples time series data from six global statistic counters, reduces their dimensions, and extracts key features using Symbolic Aggregate Approximation (SAX), Bag-of-Pattern (BOP) representation, and Support Vector Machine (SVM) classifiers. Additionally, we developed a pattern matching framework using a kNN classifier with a multi-dimensional Dynamic Time Warping (DTW) algorithm to calculate distance metrics. Our evaluation shows that these frameworks are effective, efficient, and robust.

We demonstrate three categories of attacks on iOS 10: classifying user activities, detecting sensitive in-app activities, and bypassing iOS sandbox restrictions to infer cross-container file existences using a timing-based side channel. Specifically, we found that an unprivileged malicious app can accurately identify foreground running apps, websites visited in Safari, and locations searched in Apple Maps. It can also collect enough information to link Bitcoin addresses, Venmo users, and Twitter users to a device and identify installed sensitive apps that reveal private information.

Although our focus is on iOS, our findings raise broader questions about the design of operating systems hosting mutually-distrusting entities. How should these entities be isolated to prevent cross-app side-channel leaks, given the complex interfaces between them? This question is important for iOS, Android, and other platforms like clouds and IoT frameworks.

We responsibly disclosed our findings to Apple in May 2017. To our surprise, Apple attached high importance to our findings and assembled a team to work on mitigations. Some of our proposed countermeasures have been adopted in iOS 11.1 and macOS High Sierra 10.13.1, fully addressing the threats.

### Contributions
- **New Attack Vectors:** We identified several iOS APIs that can be exploited for side-channel inferences, indicating that even on an OS without procfs, it is challenging to eliminate all vectors for cross-app information leaks.
- **New Attack Methods:** We developed new frameworks to integrate thin information from individual vectors into serious side-channel leaks using machine learning techniques. We also demonstrated the robustness of our approach by training and testing on different devices.
- **New Targets:** We presented attacks on targets not previously exploited in side-channel studies, such as location inference through map loading and user identification via Bitcoin transaction correlation.
- **Proposed Countermeasures:** Through responsible disclosure and technical discussions with Apple, some of our proposed countermeasures have been integrated into iOS 11.1 and macOS High Sierra 10.13.1.

### Roadmap
- **Section 2:** Background on iOS cross-app isolation.
- **Section 3:** Threat model and new side-channel attack vectors on iOS.
- **Sections 4, 5, and 6:** Three categories of attacks exploiting these vectors.
- **Section 7:** Practical issues and evaluation.
- **Section 8:** Countermeasures and related work.
- **Section 9:** Conclusion.

## 2. Background: iOS Cross-App Isolation
Side channels on Android mobile devices have been extensively studied [31, 36, 42, 45, 66, 67], but little attention has been paid to iOS cross-app side channels. In this section, we introduce iOS cross-app isolation and explain why side-channel attacks on iOS are more challenging.

### Sandboxing with Respect to File Access
Each iOS app is confined in a sandbox upon installation. A sandbox specifies how an app can access filesystem resources and communicate with other apps or interact with the OS. An app can only access files in its own bundle container directory and a few public directories [3]. The path name of each bundle container directory contains a UUID, a 32-digit random hexadecimal string (e.g., 7E698227-C8B6-4044-A215-B4CBCB8A97AB). Cross-container file accesses are prevented by both the randomness of the UUIDs and the sandbox isolation.

### System Resources
The Info.plist file of an application describes the system resources needed for the app to run. When an app first attempts to access certain sensitive resources (e.g., Location Services), the user is asked to grant permission explicitly. Only authorized apps can access the specific resource. Since iOS 8, Apple has introduced finer-grained access control policies, allowing users to control when an app can access Location Services (e.g., "Always" or "While Using") [7].

### Cross-App Communication
Apps commonly communicate through URL schemes. An app can register a custom URL scheme with the system (through its Info.plist file). Other apps can use the openURL API to send data to the app that registered the custom URL. For example, the URL scheme "comgooglemaps://?center=[Latitude,Longitude]" will launch Google Maps and navigate to the specified location. Another means to share data is the pasteboard, which provides system-wide read/write access, while named pasteboards are accessible only by apps with the same team ID.

### App Vetting
Information leakage can occur if iOS APIs are misused or undocumented APIs are used by a malicious app. To mitigate these attacks, all iOS apps must be vetted by Apple before reaching the market. Apple examines the app's functionality and potential malicious activities [21]. Although the code review process is private and continuously changing, it is believed to include checks for the use of private APIs and the collection and transmission of private data without user notification [28, 21]. Apps that fail the vetting are rejected.

## 3. Side-Channel Attack Vectors on iOS
In this section, we describe the threat model and new attack vectors that enable OS-level side-channel attacks on iOS without procfs.

### Threat Model
We focus on side-channel information leakage at the OS level. Specifically, we aim to explore the API interfaces that allow one iOS app to query information about the entire OS or a particular app running on the same device (e.g., iPhones and iPads) and the methods to exploit the leakage to infer private information about the user. We assume the user downloads a monitoring app from the iOS App Store. As discussed in Section 7, our monitoring app disguises itself as an audio player and registers the Audio background mode in its Info.plist file to run in the background. No additional permission requests are made at runtime. We show how this monitoring app can utilize OS-level side-channel attack vectors to breach user privacy. Out of scope are CPU cache side channels [66], electronic magnetic side channels [24, 39, 40], and mobile sensor-based side channels [50, 52, 53, 57], as they explore leakage through micro-architectures, electromagnetic emissions, or device orientation, which are not specific to iOS.

### New Attack Vectors
We identified several new attack vectors on iOS that enable cross-app information leakage. These vectors allow an iOS app to learn the global usage statistics of memory and network resources and the existence of files without any access permissions.

- **Memory Resources: host_statistics64()**
  - The global usage of memory resources, such as the number of free memory pages (free_count) and the cumulative number of page faults (faults), can be queried through this API. Apps do not need special entitlements to access host_statistics64(), which is an interface used by iOS apps to access memory information of the current device. We statically analyzed 7,418 iOS apps using a static tool based on Capstone [6] and found that 1,230 of them include this API.

- **Network Resources: getifaddrs()**
  - The usage of global network resources can be queried through this API without special entitlements. The getifaddrs() API returns a linked list data structure describing each of the network interfaces of the local system, storing the address of the first item of the list in *ifap, the argument passed to the API. One can iterate through ifap->ifap_next to enumerate all the interfaces. For each item in this linked list, one can read the interface details, such as the IP address, broadcast address, and network mask.