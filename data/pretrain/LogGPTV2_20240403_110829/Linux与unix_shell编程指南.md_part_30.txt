# 第21章 创建屏幕输出

用户可以使用Shell脚本创建交互性高且专业性强的屏幕输出。要实现这一点，系统需要一个彩色显示器和`tpu`t命令。

## 本章内容
- `tput` 命令
- 使用转义序列和生成控制码
- 使用颜色

### 关于 tput 命令
作者在编写本书时遇到了三种不同的 `tput` 版本。目前最好的版本是 GNU `tput`，如果您的系统上没有这个版本，建议首先下载并安装它。`tput` 利用 `/etc/terminfo` 或 `/etc/termcap` 文件来支持终端上的多种命令。尽管 `tput` 本身不直接识别颜色设置，但可以通过控制字符实现这一功能。

#### 21.1 初始化 tput
在使用 `tput` 之前，需要通过以下命令初始化终端：
```bash
$ tput init
```
`tput` 可以产生三类输出：字符串、数字和布尔值（真/假）。

##### 21.1.1 字符串输出
下面列出了一些常用的字符串及其含义：

| 名字 | 含义 |
| --- | --- |
| `bel` | 警铃 |
| `blink` | 闪烁模式 |
| `bold` | 粗体 |
| `civis` | 隐藏光标 |
| `clear` | 清屏 |
| `cnorm` | 显示光标 |
| `cup` | 将光标移动到屏幕位置 (x, y) |
| `el` | 清除至行尾 |
| `el1` | 清除至行首 |
| `smso` | 开始突出显示模式 |
| `rmso` | 结束突出显示模式 |
| `smul` | 开始下划线模式 |
| `rmul` | 结束下划线模式 |
| `sc` | 保存当前光标位置 |
| `rc` | 恢复光标到最后保存的位置 |
| `sgr0` | 正常显示 |
| `rev` | 反色显示 |

##### 21.1.2 数字输出
以下是一些常用的数字输出及其含义：

| 名字 | 含义 |
| --- | --- |
| `cols` | 列数 |
| `itab` | 设置制表位宽度 |
| `lines` | 行数 |

##### 21.1.3 布尔输出
`tput` 中只有两种布尔操作符：

| 名字 | 含义 |
| --- | --- |
| `chts` | 光标是否可见 |
| `hs` | 是否有状态行 |

#### 21.2 使用 tput
接下来，我们将学习如何在脚本中应用 `tput` 的各种功能。

##### 21.2.1 设置 tput 命令
可以将 `tput` 输出保存为更具意义的变量名，例如：
```bash
variable_name='tput name'
```

##### 21.2.2 使用布尔输出
可以在 `if` 语句中利用布尔类型的 `tput` 输出进行条件判断。

##### 21.2.3 在脚本中使用 tput
下面是一个示例脚本，展示了如何设置 `tput bel` 和 `clear` 为更有意义的变量名，并改变视图属性及开关光标。

##### 21.2.4 生成转义序列
注意，如果您正在使用的是仿真器，则某些转义序列可能无法正确执行。关闭光标的控制字符是 `\E[?25l`，而打开光标的则是 `\E[?25h`。所有控制字符都以转义序列开头，通常由 `\E[` 开始，后跟实际的序列以开启或关闭特定终端属性。

可以使用两种方法生成转义序列，具体取决于用户的系统配置。第三种方法适用于 UNIX 和 Linux 平台，因为它将控制序列嵌入到了 `echo` 语句中。为了发送一个转义序列以关闭光标，可以使用如下命令：
```bash
echo -e "\033[?25l"
```

对于清屏并将光标移至左上角的操作，可以使用以下命令：
```bash
echo -e "\033[H\033[J"
```

##### 21.2.5 定位光标
使用 `tput cup` 命令可以将光标置于屏幕任意位置，格式如下：
```bash
tput cup <row> <column>
```
其中 `<row>` 和 `<column>` 分别代表从顶部开始的行号以及从左边开始的列号。

##### 21.2.6 屏幕中心显示文本
要在屏幕中央显示文本，需先获取屏幕列宽，计算待显示文本长度，然后减去该长度的一半得到起始位置。以下脚本实现了此功能：
```bash
center_text() {
    local text="$1"
    local line="$2"
    local cols=$(tput cols)
    local len=${#text}
    local pos=$(( (cols - len) / 2 ))
    tput cup $line $pos
    echo "$text"
}
```
调用方式如：
```bash
center_text "THE MAIN EVENT" 10
```

##### 21.2.7 查找终端属性
以下脚本演示了如何使用 `tput` 访问 `terminfo` 数据库，从而显示一些终端转义码：
```bash
#!/bin/bash
for cap in $(infocmp $TERM | grep -oP '(?<=\w=)\S+'); do
    echo -n "$cap: "
    tput $cap
done
```

##### 21.2.8 功能键
利用 `cat -v` 命令可以查看特殊键（如 F1、F2 和方向键等）对应的控制序列。这有助于在脚本中添加额外的用户选择方法。例如，F1 键通常对应 `[OP]` 序列，而上箭头则对应 `[A]`。

##### 21.2.9 使用颜色
ANSI 标准定义了一系列可用于增强屏幕输出的专业色彩。以下是部分常见颜色代码：

- **前景色**:
  - 黑色: `30`
  - 红色: `31`
  - 绿色: `32`
  - 黄色: `33`
  - 蓝色: `34`
  - 紫色: `35`
  - 青色: `36`
  - 白色: `37`

- **背景色**:
  - 黑色: `40`
  - 红色: `41`
  - 绿色: `42`
  - 黄色: `43`
  - 蓝色: `44`
  - 紫色: `45`
  - 青色: `46`
  - 白色: `47`

设置颜色的通用格式为 `\E[<background_number>;<foreground_number>m`。

##### 21.2.10 生成颜色
通过在 `echo` 语句中嵌入控制字符的方式，可以在任何支持彩色终端的系统上产生所需的颜色效果。例如，要设置黑色背景加绿色文字，可使用：
```bash
echo -e "\E[40;32mYour Text Here"
```

为了便于管理和重用，建议将颜色设置封装成函数，比如：
```bash
colour() {
  case $1 in
    red-yellow) echo -e "\E[41;33m";;
    green-black) echo -e "\E[40;32m";;
    *) echo "Unknown color combination";;
  esac
}
```
这样就可以轻松地更改脚本中的颜色方案了。

以上就是关于如何使用 `tput` 和颜色增强 Shell 脚本输出的基本指南。希望这些信息能帮助您创建出既美观又实用的用户界面。