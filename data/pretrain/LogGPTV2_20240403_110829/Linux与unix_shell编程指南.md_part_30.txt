数，因此脚本可以做进一步处理。
加入java编程群：524621833
下载
第21章 创建屏幕输出
用户可以使用s h e l l脚本创建交互性的、专业性强的屏幕输出。要实现这一点，系统上需
要一个彩色监视器和t p u t命令。
本章内容有：
• tput命令。
• 使用转义序列和产生控制码。
• 使用颜色。
作者写这本书时，遇到了t p u t命令的三种不同变形。至今为止最好的是GNU tput，如果没
有这个版本，首先下载它并安装在你的系统里。 t p u t使用文件/ e t c / t e r m i n f o或/ e t c / t e r m c a p，这
样就可以在脚本中使用终端支持的大部分命令了。
虽然t p u t不识别颜色设置，但是可以使用控制字符实现这一点。
21.1 tput
在使用t p u t前，需要在脚本或命令行中使用t p u t命令初始化终端。
$ tput init
t p u t产生三种不同的输出：字符型、数字型和布尔型（真 /假）。以下分别介绍其使用功
能。
21.1.1 字符串输出
下面是大部分常用字符串：
名 字 含 义
b e l 警铃
b l i n k 闪烁模式
b o l d 粗体
c i v i s 隐藏光标
c l e a r 清屏
c n o r m 不隐藏光标
c u p 移动光标到屏幕位置（x，y）
e l 清除到行尾
e l l 清除到行首
s m s o 启动突出模式
r m s o 停止突出模式
s m u l 开始下划线模式
r m u l 结束下划线模式
s c 保存当前光标位置
rc 恢复光标到最后保存位置
s g r 0 正常屏幕
r e v 逆转视图
加入java编程群：524621833
237
第21章 创建屏幕输出
下载
21.1.2 数字输出
以下是大部分常用数字输出。
名 字 含 义
c o l s 列数目
i t t a b设置宽度
l i n e s 屏幕行数
21.1.3 布尔输出
在t p u t中只有两种布尔操作符。
名 字 含 义
c h t s 光标不可见
h s 具有状态行
21.2 tput用法
上面讲过了可能用到的t p u t的大多数常用名。现在学习在一段脚本中使用t p u t。
21.2.1 设置tput命令
可以取得所有t p u t名字输出，将其保存为更有意义的变量名。格式如下：
variable_name='tput name'
21.2.2 使用布尔输出
可以在i f语句中使用布尔型t p u t输出。
21.2.3 在脚本中使用tput
以下脚本设置tput bel和c l为更有意义的变量名。
下面脚本改变两个视图属性，并将光标关闭和打开。
加入java编程群：524621833
238
第四部分 基础s h e l l编程
下载
21.2.4 产生转义序列
注意，如果正在使用一个仿真器，要使光标不可见，这个操作可能会有问题。这是因为：
1) 一些仿真器并不捕获使光标不可见的控制字符。必须要求正在使用的软件仿真的制作
者修改源脚本以关闭光标。
2) tput civis命令的一些旧版本工作不正常。
关闭光标的控制字符是？2 5 l（这是字母l），将之打开是？2 5 h。
所有控制字符均以一个转义序列开始。通常转义键后紧跟字符 [。然后实际序列打开或关
闭某终端属性。
可以使用两种不同的方法产生转义序列。下面的列表依据用户系统列出两种方法。第三
种方法对于U N I X和L I N U X支持的变量均有效，因为控制序列嵌在e c h o语句中。本书将使用这
种方法。
要发送一转义序列以关闭光标：
\ 0 3 3为转义键取值，\通知e c h o命令接下来是一个八进制值。例如要反馈一个 @字符，键
入：
echo “@”或者e c h o - e“\ 1 0 0”
对于系统v ，使用
echo “\ 1 0 0”
结果是一样的。
命令c l e a r表示清屏并发送光标到屏幕左上角，此位置一般也称为 h o m e。在一个V T终端范
围实现此功能所需序列为E S C I J，可以使用e c h o语句发送这一序列。
对于嵌入在文本中的任何控制字符，不要试图剪切和粘贴，因为这样会失去其特殊含义。
例如，要插入控制字符，打开光标，方法如下：
e c h o '  hit the key then [?25h'
即先击 ,再击退格键，确保这不是一个仿真器。然后加入一小段脚本将之
加入java编程群：524621833
239
第21章 创建屏幕输出
下载
打开和关闭。可以将这段脚本编成一个函数或者在后面几页找一下这段脚本。
21.2.5 光标位置
可以用t p u t将光标放在屏幕任意位置。格式为：
cup r c
r为从上至下屏幕行数，c为穿过屏幕列数。
最好将之编成函数，这样就可以把行和列的值传递给它。
当然再传递一个字符串给它也很合适。以下是稍加改动后的函数脚本。
加入java编程群：524621833
240
第四部分 基础s h e l l编程
下载
这可以像下面这样调用：
21.2.6 在屏幕中心位置显示文本
在屏幕中心位置显示文本不是很麻烦。首先从 t p u t中得到列数，然后算出所提供的字符串
长度，从t p u t列数中减去该值，结果再除以2，所得结果可用于显示的字符串的行数。
以下脚本段实现此功能。只需稍加改动即可从文件中读取各行并在屏幕中间位置显示文本。
输入一些字符，点击回车键，文本将显示在屏幕中间第 1 0行。
将上述脚本编成函数，并带有两个参数：文本和行数，这样调用更加灵活，函数如下：
可使用下述格式调用上述函数：
centertxt 15“ THE MAIN EVEN”。T
或者用字符串作参数 ：
centertxt 15 $。1
21.2.7 查找终端属性
下面脚本使用t p u t访问t e r m i n f o，显示前面提到过的t p u t命令下的一些终端转义码。
加入java编程群：524621833
241
第21章 创建屏幕输出
下载
命令i n f o c m p从t e r m i n f o数据库中抽取终端信息，如果要查看终端定义文件的完整列表，
可使用命令：
$ infocmp $TERM
以下是t e r m p u t脚本的终端输出：
21.2.8 在脚本中使用功能键
使用c a t命令可以查看发送的任意特殊键控制序列（ F 1，上箭头等），键入cat -v，然后按
任意控制键，回车，在下一行就可以知道终端发送了什么功能键。结束后按 退出。
下面的例子运行c a t命令，输入键为F 1（^ [ O P ]），F 2 ( [ O Q ] )，上箭头[ ^ [ [ A ]。
有了这些信息，就可以在脚本中插入这些字符作为用户选择的另外一些方法。
下面脚本识别F 1、F 2和箭头键，取值可能不同，因此要先用 c a t命令查看用户终端控制键
发送的取值。
加入java编程群：524621833
242
第四部分 基础s h e l l编程
下载
21.2.9 使用颜色
对域使用颜色可以使数据输入屏幕看起来更加专业。下面将使用的颜色是 A N S I标准颜
色，并不是所有颜色都适合于所有系统。下面列出了大部分常用颜色。
1. 前景色：
数 字 颜 色 数 字 颜 色
3 0 黑色 3 4 蓝色
3 1 红色 3 5 紫色
3 2 绿色 3 6 青色
3 3 黄（或棕）色 3 7 白（或灰）色
2. 背景色：
数 字 颜 色 数 字 颜 色
4 0 黑色 4 4 青色
4 1 红色 4 5 蓝色
4 2 绿色 4 6 青色
4 3 黄（或棕）色 4 7 白（或灰）色
显示前景或背景颜色格式为：
加入java编程群：524621833
243
第21章 创建屏幕输出
下载
 [background_number;foreground_number m
21.2.10 产生颜色
产生颜色需要在e c h o语句中嵌入控制字符。这种方法适用于带有彩色终端的任何系统。
与在控制字符里一样，可以在e c h o语句里使用转义序列产生颜色。
要产生一个黑色背景加绿色前景色：
一般方法是先击，然后是键，接着是[ 4 0；32 m。本书使用这种方法。
可能发现将颜色设置与e c h o语句放在一个c a s e语句里，然后将之编成一个函数，这样做最
好。下面是作者编写的颜色函数。
要调用颜色r e d - y e l l o w（红色背景，黄色前景），方法如下：
colour red-yellow
在脚本中可以这样使用颜色：
作者终端的缺省屏幕颜色是黑色和白色。但是如果要用黑色背景加绿色前景，可插入一
个e c h o语句，同时将之放入用户. p r o f i l e文件中。
图2 1 - 2显示加入颜色设置后的基本输出屏幕。这种颜色看起来更加吸引人
加入java编程群：524621833
244
第四部分 基础s h e l l编程
下载
图21-1 下述脚本使用颜色和tput命令所得的屏幕概貌
下面是显示图2 1 - 1屏幕的脚本：
加入java编程群：524621833
245
第21章 创建屏幕输出
下载
加入java编程群：524621833
246
第四部分 基础s h e l l编程
下载