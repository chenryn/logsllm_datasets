o
N
NRR
NRC
NRC
Use Cases
Document Submission
Public Data Feed
Web Archive
Misbehaviour in P2P
(cid:32) (cid:32) (cid:32) (cid:32) Bytes (cid:32)
(cid:71)(cid:35) (cid:32) (cid:32) -
(cid:71)(cid:35) (cid:32) (cid:32) -
NRC,NRR (cid:71)(cid:35) (cid:32) (cid:71)(cid:35) (cid:71)(cid:35) Bytes (cid:32)
-
-
-
-
Table 1: For the use cases presented here, non-repudiation of
conversation NRC is the most commonly required one. We
also (cid:27)nd that most use cases require request-response bind-
ing and timing information. Additionally, some use cases
require privacy protection (e.g., hiding of access tokens or
passwords). (cid:32) = required property, (cid:71)(cid:35) = partially required
property, - = non-required property.
Order-Preserving: A total order of messages between the TLS
peers can be determined based on the proof.
Request-Response Binding: A TLS conversation might in-
clude multiple requests and responses. This property ensures a
binding between requests and responses based on the proof. This
is important as protocols such as HTTP/1.x do not reference the
request in the response, e.g. they contain no request ID.
Time: Based on the proof the content creation time (as seen by
the peers) can be identi(cid:27)ed.
Privacy Protecting: Privacy sensitive content (e.g., passwords
or cookies) transmitted in a TLS session can be e(cid:28)ciently hidden
in the proof.
Possible use cases that would bene(cid:27)t from a non-repudiation
solution are (cf. Table 1) (i) Document Submission Systems (e.g.,
HotCRP) and (ii) Public Data Feeds, e.g. for stock exchange rates and
currency exchange rates [35, 44]. Veri(cid:27)able, public data feeds are
essential for the further development and expansion of blockchain-
based smart contract applications [43]. Given such a feed, public
data can be securely inserted into the blockchain: a smart contract
can, on submission of data including a proof, verify the proof and
then store the veri(cid:27)ed data on the blockchain. Any other contract
can use such blockchain-based information. This disintermediation
removes the need for an additional third party acting as an ora-
cle [26, 45]. Further use cases are (iii) Web Archives [2, 37] for web
content or deleted social media content [13], and (iv) proving mis-
behaviour in P2P networks [15, 33].
2.1 Previous Work and its Limitations
Here, we brie(cid:30)y motivate why existing work is insu(cid:28)cient and
motivate our TLS-based design. For a more extensive discussion,
please refer to Section 6.
Our design is TLS-based as this comes with multiple key ad-
vantages. TLS is ubiquitous. Based on the layer approach, many
applications can bene(cid:27)t from a TLS-based solution. TLS provides
extension support, allowing for for incremental deployment as our
3
extension is backwards compatible. We can reuse existing, crypto-
graphic primitives of TLS reducing development and maintenance
overhead. Additionally, most TLS deployments are based on a few
cryptographic libraries simplifying standardization. Finally, TLS al-
ready uses an established public-key infrastructure (PKI) necessary
for authentication.
Existing TLS-based solutions: Existing TLS-based solutions
do not provide secure non-repudiation, as we will show in Sec-
tion 6.2. In particular, none of the solutions provides NRC. We
present attacks against all existing solutions and conclude that
none of them has all the required security properties.
(Existing) Application Layer solutions: Non-repudiation can
also be managed on the application layer. However, as we will
explain in Section 6.2, application layer solutions come with multi-
ple drawbacks. One drawback is that each of the application layer
solutions has to provide a separate non-repudiation implementa-
tion resulting in many presumably poorly maintained implemen-
tations. Therefore, we think that the TLS layer should provide
non-repudiation, because it already provides a frequently-used
layer o(cid:29)ering con(cid:27)dentiality and authentication to all kinds of
applications. Furthermore, application layer solutions need their
own authentication scheme, while a TLS-based solution can reuse
the existing PKI. Finally, in a design as ours, the application layer
still retains full (cid:30)exibility, as it decides what will be included in the
proof.
Other existing solutions: There are other solutions providing
similar properties, such as TLSnotary [41] and Town Crier [45]
that we will discuss in Section 6.3. While TLSnotary only works
for older TLS versions and requires trust in a third party, Town
Crier is a speci(cid:27)c solution for smart contracts that requires special
hardware and trust in the attestation service.
Our design, overcomes the shortcomings of previous work, re-
quires no special hardware, no trusted third party and provides a
general and portable solution for secure non-repudiation that reuses
existing TLS primitives. We describe our design in the following
section.
3 OUR DESIGN: TLS-N
Throughout this paper, we consider the following three parties:
(i) the requester (typically a client machine), (ii) the generator
(typically a web server) and (iii) the veri(cid:27)er (third party or smart
contract), as seen in Figure 1. Our design, called TLS-N, provides
generator-signed evidence about the TLS conversation to the re-
quester, who can then construct a (redacted) proof. The design is
similar to content extraction signatures [39] and redactable signa-
tures [22], which have not been used in combination with TLS. We
provide a comparison to these schemes in Section 6.
Figure 2 shows the evidence and proof generation between re-
quester and generator. Initially, they establish a TLS connection
and negotiate the TLS-N parameters in the handshake. During the
TLS session, the generator keeps a small TLS-N state that is up-
dated using all the sent and received records. This state contains a
hash value incorporating all previous records, an ordering vector
and a timestamp from the beginning of the session.
Once the requester asks for the evidence, the evidence window
that de(cid:27)nes which records will be included in the evidence closes.
Requester
Generator
Parameters
Record
Record
Record
Record
Proof
Generation
TLS Handshake
Req x
123
Req y
987
Return Evidence
Evidence
w
o
d
n
W
i
e
c
n
e
d
i
v
E
Sign
e
t
a
t
s
l
l
a
m
g
n
i
s
s
e
c
o
r
P
y
d
a
e
t
S
s
h
t
i
w
Figure 2: Simplied Overview of TLS-N: The “Return Evi-
dence” message closes the Evidence Window, which deter-
mines the evidence-relevant records. The dashed lines rep-
resent TLS messages and gray elements represent TLS-N.
Note, that in TLS-N and in contrast to previous work the evidence
window begins right after the handshake. To compute the evidence,
the generator signs its TLS-N state using its private key. Together
with the saved records, this evidence allows the requester to produce
non-repudiable proofs for the entire conversation or for a subset of
it.
Therefore, the requester retains full control what is included
in the proof. To protect sensitive TLS content, the requester can
hide entire records or chunks thereof. The generator is oblivious
to what the requester considers sensitive and is not involved in
the proof generation. By checking the proof, a veri(cid:27)er learns the
disclosed content of the TLS session in a non-repudiable manner.
We only make standard TLS assumptions, such that both requester
and veri(cid:27)er trust the certi(cid:27)cates to correctly identify the generator.
3.1 Parameter Negotiation
TLS sessions begin with the handshake during which settings such
as the cipher suite are negotiated. If the requester wants to use
TLS-N, it includes a TLS-N extension into the handshake. Here, the
requester also speci(cid:27)es its preferences for the TLS-N settings. To
hide sensitive content, the requester can chose between: record-
level and chunk-level granularity. While chunk-level granularity is
more precise it also has a higher computational overhead. In case
of chunk-level granularity the requester can also select the chunk
size. Again a smaller granularity leads to a higher computational
overhead.
Essentially, record-level granularity allows e(cid:28)cient proofs for
public data, e.g. in a web archive, or for conversations where entire
records can be censored. It represents the most e(cid:28)cient design, as
the conversation has to be parsed record-by-record.
The generator can reject or accept the TLS-N settings by includ-
ing a corresponding response in its handshake message. To ensure
that TLS-N cannot be abused for Denial-of-Service attacks, the gen-
erator can also enforce the use of a TLS client puzzle [34].
3.2 Evidence Generation
In this Section, we outline how the generator (server) produces the
evidence in TLS-N. We discuss the evidence window, the provided
evidence and provided auxiliary information to aid proof genera-
tion.
4
In our solution, the evidence collection starts immediately after
the TLS handshake. This has two main bene(cid:27)ts. One is to prevent
Content Omission Attacks (cf. Section 6.2.1) and the other is that
TLS-N then does not require an explicit “Collect Evidence” message
(proposed by related work [6]). In TLS-N, the evidence window
ends as soon the generator receives a “Return Evidence” message.
Order of records
The generation of the evidence is non-trivial as the requester and
generator might observe a di(cid:29)erent order of records. We label the
i-th requester and generator records ri and ❕i respectively. If both
peers simultaneously send records r0 and ❕0, each peer will observe
its sent record before observing its received record, resulting in two
di(cid:29)erent orders: (r0, ❕0) and (❕0, r0). Note, however, that the two
peers have identical partial orders over records generated by one
peer, i.e., they observe the same order for all {ri} and for all {❕i}.
Based on their partial orders, both peers have to agree on a total
order. In TLS-N the generator determines the total order of records,
as it generates the evidence. To inform the requester about the
chosen total order, the generator uses an ordering vector. As both
peers have the same partial order over {ri} and {❕i}, the ordering
vector is a bit vector encoding the interleaving of {ri} and {❕i}.
In the ordering vector, a 0 corresponds to a record sent by the
requester (ri) and a 1 to a record sent by the generator (❕i). An
ordering vector of (1, 0, 0, 1) results in the total record order of
(❕0, r0, r1, ❕1).
Commitments
To allow chunk-level censoring of sensitive information during
proof generation, each record of length lr is split into (cid:27)xed-sized
chunks of the negotiated chunk size lc. We construct hiding and
binding commitments for each of the chunks using a commitment
scheme C() that takes a chunk and a pseudo-random value, called
salt, as input. As the chunk might have low entropy the pseudo-
random salt is used to protect the hiding property of the commit-
ment against brute-force attacks.
Merkle Tree Generation
To e(cid:28)ciently include commitments in the proof, we construct a
Merkle Tree [29] over the commitments, as shown in Figure 3a.
The root hashes of the Merkle trees hi are generated from the
children hash values, the length of the record lr and the originator
information Oi. Oi is the i-th element of the ordering vector. We
assume that H() provides a binding commitment scheme, i.e., is
a collision-resistant hash function. To reuse secure, existing TLS
primitives we use the hash function negotiated in the cipher suite
(typically SHA-256) as H().
The records’ root hashes hi are combined in a hash chain (hci),
with hcn−1 being the (cid:27)nal hash chain state. Using a hash chain
ensures a very small storage overhead per TLS session, namely
only a single hash value. The hash chain uses markers (0x0, 0x1)
to prevent second preimage attacks, as explained in Section 4.3.
Salt Tree Generation
To create hiding commitments using C() we need independent,
random values Sir ,ic
, called salts, for record ir and chunk ic. To pre-
have to be independent,
serve hiding, the outputs SiR,ic
and Si(cid:48)
R,i(cid:48)
c
Salt Tree
TLS Tra(cid:28)c Secret
Nonce
E
Salt Secret0
E
S2
0,0
E
S2
0,1
E
S1
0,0
E
S1
0,1
E
S1
0,2
E
S1
0,3
E
S0,0 S0,1 S0,2 S0,3 S0,4 S0,5 S0,6 S0,7
0x1
0x0
O0
H
h0
H
h2
0,0
H
h1
0,0
H
h1
0,1
H
Hash Chain
0x1
H
hc0
0x1
hc1
H
hcn−1
h2
0,1
H