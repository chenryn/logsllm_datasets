47
48 server := mockServer()
49 defer server.Close()
50
51 t.Log("Given the need to test downloading content.")
52 {
53 t.Logf("\tWhen checking \"%s\" for status code \"%d\"",
54 server.URL, statusCode)
55 {
56 resp, err := http.Get(server.URL)
57 if err != nil {
58 t.Fatal("\t\tShould be able to make the Get call.",
59 ballotX, err)
60 }
61 t.Log("\t\tShould be able to make the Get call.",
62 checkMark)
63
64 defer resp.Body.Close()
65
66 if resp.StatusCode != statusCode {
67 t.Fatalf("\t\tShould receive a \"%d\" status. %v %v",
68 statusCode, ballotX, resp.StatusCode)
69 }
70 t.Logf("\t\tShould receive a \"%d\" status. %v",
71 statusCode, checkMark)
72 }
73 }
74 }
在代码清单9-15中再次看到了TestDownload函数，不过这次它在请求模仿服务器。在第
48 行和第 49 行，调用 mockServer 函数生成模仿服务器，并安排在测试函数返回时执行服务
器的Close方法。之后，除了代码清单9-16所示的这一行代码，这段测试代码看上去和基础单
元测试的代码一模一样。
代码清单9-16 listing12_test.go：第56行
56 resp, err := http.Get(server.URL)
这次由 httptest.Server 值提供了请求的 URL。当我们使用由模仿服务器提供的 URL
时，http.Get调用依旧会按我们预期的方式运行。http.Get方法调用时并不知道我们的调用
是否经过互联网。这次调用最终会执行，并且我们自己的处理函数最终被执行，返回我们预先准
备好的XML文档和状态码http.StatusOK。
在图9-5里，如果在没有互联网连接的时候运行测试，可以看到测试依旧可以运行并通过。
这张图展示了程序是如何再次通过测试的。如果仔细看用于调用的URL，会发现这个URL使用
了localhost作为地址，端口是52065。这个端口号每次运行测试时都会改变。包http与包
httptest和模仿服务器结合在一起，知道如何通过URL路由到我们自己的处理函数。现在，
我们可以在没有触碰实际服务器的情况下，测试请求goinggo.net的RSS列表。
图9-5 没有互联网接入情况下测试成功
9.1.4 测试服务端点
服务端点（endpoint）是指与服务宿主信息无关，用来分辨某个服务的地址，一般是不包含
宿主的一个路径。如果在构造网络API，你会希望直接测试自己的服务的所有服务端点，而不用
启动整个网络服务。包 httptest 正好提供了做到这一点的机制。让我们看一个简单的包含一
个服务端点的网络服务的例子，如代码清单 9-17 所示，之后你会看到如何写一个单元测试，来
模仿真正的调用。
代码清单9-17 listing17.go
01 // 这个示例程序实现了简单的网络服务
02 package main
03
04 import (
05 "log"
06 "net/http"
07
08 "github.com/goinaction/code/chapter9/listing17/handlers"
09 )
10
11 // main是应用程序的入口
12 func main() {
13 handlers.Routes()
14
15 log.Println("listener : Started : Listening on :4000")
16 http.ListenAndServe(":4000", nil)
17 }
代码清单9-17展示的代码文件是整个网络服务的入口。在第13行的main函数里，代码调
用了内部 handlers 包的 Routes 函数。这个函数为托管的网络服务设置了一个服务端点。在
main函数的第15行和第16行，显示服务监听的端口，并且启动网络服务，等待请求。
现在让我们来看一下handlers包的代码，如代码清单9-18所示。
代码清单9-18 handlers/handlers.go
01 // handlers包提供了用于网络服务的服务端点
02 package handlers
03
04 import (
05 "encoding/json"
06 "net/http"
07 )
08
09 // Routes为网络服务设置路由
10 func Routes() {
11 http.HandleFunc("/sendjson", SendJSON)
12 }
13
14 // SendJSON返回一个简单的JSON文档
15 func SendJSON(rw http.ResponseWriter, r *http.Request) {
16 u := struct {
17 Name string
18 Email string
19 }{
20 Name: "Bill",
21 Email: "PI:EMAIL",
22 }
23
24 rw.Header().Set("Content-Type", "application/json")
25 rw.WriteHeader(200)
26 json.NewEncoder(rw).Encode(&u)
27 }
代码清单9-18里展示了handlers包的代码。这个包提供了实现好的处理函数，并且能为
网络服务设置路由。在第10行，你能看到Routes函数，使用http包里默认的http.ServeMux
来配置路由，将 URL 映射到对应的处理代码。在第 11 行，我们将/sendjson 服务端点与
SendJSON函数绑定在一起。
从第 15 行起，是 SendJSON 函数的实现。这个函数的签名和之前看到代码清单 9-14 里
http.HandlerFunc 函数类型的签名一致。在第 16 行，声明了一个匿名结构类型，使用这个
结构创建了一个名为u的变量，并赋予一组初值。在第24行和第25行，设置了响应的内容类型
和状态码。最后，在第26行，将u值编码为JSON文档，并发送回发起调用的客户端。
如果我们构建了一个网络服务，并启动服务器，就可以像图9-6和图9-7展示的那样，通过
服务获取JSON文档。
图9-6 启动网络服务 图9-7 网络服务提供的JSON文档
现在有了包含一个服务端点的可用的网络服务，我们可以写单元测试来测试这个服务端点，
如代码清单9-19所示。
代码清单9-19 handlers/handlers_test.go
01 // 这个示例程序展示如何测试内部服务端点
02 // 的执行效果
03 package handlers_test
04
05 import (
06 "encoding/json"
07 "net/http"
08 "net/http/httptest"
09 "testing"
10
11 "github.com/goinaction/code/chapter9/listing17/handlers"
12 )
13
14 const checkMark = "\u2713"
15 const ballotX = "\u2717"
16
17 func init() {
18 handlers.Routes()
19 }
20
21 // TestSendJSON测试/sendjson内部服务端点
22 func TestSendJSON(t *testing.T) {
23 t.Log("Given the need to test the SendJSON endpoint.")
24 {
25 req, err := http.NewRequest("GET", "/sendjson", nil)
26 if err != nil {
27 t.Fatal("\tShould be able to create a request.",
28 ballotX, err)
29 }
30 t.Log("\tShould be able to create a request.",
31 checkMark)
32
33 rw := httptest.NewRecorder()
34 http.DefaultServeMux.ServeHTTP(rw, req)
35
36 if rw.Code != 200 {
37 t.Fatal("\tShould receive \"200\"", ballotX, rw.Code)
38 }
39 t.Log("\tShould receive \"200\"", checkMark)
40
41 u := struct {
42 Name string
43 Email string
44 }{}
45
46 if err := json.NewDecoder(rw.Body).Decode(&u); err != nil {
47 t.Fatal("\tShould decode the response.", ballotX)
48 }
49 t.Log("\tShould decode the response.", checkMark)
50
51 if u.Name == "Bill" {
52 t.Log("\tShould have a Name.", checkMark)
53 } else {
54 t.Error("\tShould have a Name.", ballotX, u.Name)
55 }
56
57 if u.Email == "PI:EMAIL" {
58 t.Log("\tShould have an Email.", checkMark)
59 } else {
60 t.Error("\tShould have an Email.", ballotX, u.Email)
61 }
62 }
63 }
代码清单9-19展示了对/sendjson服务端点的单元测试。注意，第03行包的名字和其他
测试代码的包的名字不太一样，如代码清单9-20所示。
代码清单9-20 handlers/handlers_test.go：第01行到第03行
01 // 这个示例程序展示如何测试内部服务端点
02 // 的执行效果
03 package handlers_test
正如在代码清单9-20里看到的，这次包的名字也使用_test结尾。如果包使用这种方式命
名，测试代码只能访问包里公开的标识符。即便测试代码文件和被测试的代码放在同一个文件夹
中，也只能访问公开的标识符。
就像直接运行服务时一样，需要为服务端点初始化路由，如代码清单9-21所示。
代码清单9-21 handlers/handlers_test.go：第17行到第19行
17 func init() {
18 handlers.Routes()
19 }
在代码清单9-21的第17行，声明的init函数里对路由进行初始化。如果没有在单元测试
运行之前初始化路由，那么测试就会遇到http.StatusNotFound错误而失败。现在让我们看
一下/sendjson服务端点的单元测试，如代码清单9-22所示。
代码清单9-22 handlers/handlers_test.go：第21行到第34行
21 // TestSendJSON测试/sendjson内部服务端点
22 func TestSendJSON(t *testing.T) {
23 t.Log("Given the need to test the SendJSON endpoint.")
24 {
25 req, err := http.NewRequest("GET", "/sendjson", nil)
26 if err != nil {
27 t.Fatal("\tShould be able to create a request.",
28 ballotX, err)
29 }
30 t.Log("\tShould be able to create a request.",
31 checkMark)
32
33 rw := httptest.NewRecorder()
34 http.DefaultServeMux.ServeHTTP(rw, req)
代码清单9-22展示了测试函数TestSendJSON的声明。测试从记录测试的给定要求开始，
然后在第25行创建了一个http.Request值。这个Request值使用GET方法调用/sendjson
服务端点的响应。由于这个调用使用的是GET方法，第三个发送数据的参数被传入nil。
之后，在第33行，调用httptest.NewRecoder函数来创建一个http.ResponseRecorder
值。有了http.Request和http.ResponseRecoder这两个值，就可以在第34行直接调用
服务默认的多路选择器（mux）的 ServeHttp 方法。调用这个方法模仿了外部客户端对
/sendjson服务端点的请求。
一旦ServeHTTP方法调用完成，http.ResponseRecorder值就包含了SendJSON处理
函数的响应。现在，我们可以检查这个响应的内容，如代码清单9-23所示。
代码清单9-23 handlers/handlers_test.go：第36行到第39行
36 if rw.Code != 200 {
37 t.Fatal("\tShould receive \"200\"", ballotX, rw.Code)
38 }
39 t.Log("\tShould receive \"200\"", checkMark)
首先，在第36行检查了响应的状态。一般任何服务端点成功调用后，都会期望得到200的
状态码。如果状态码是200，之后将JSON响应解码成Go的值。
代码清单9-24 handlers/handlers_test.go：第41行到第49行
41 u := struct {
42 Name string
43 Email string
44 }{}
45
46 if err := json.NewDecoder(rw.Body).Decode(&u); err != nil {
47 t.Fatal("\tShould decode the response.", ballotX)
48 }
49 t.Log("\tShould decode the response.", checkMark)”
在代码清单9-24的第41行，声明了一个匿名结构类型，使用这个类型创建了名为u的变量，
并初始化为零值。在第46行，使用json包将响应的JSON文档解码到变量u里。如果解码失
败，单元测试结束；否则，我们会验证解码后的值是否正确，如代码清单9-25所示。
代码清单9-25 handlers/handlers_test.go：第51行到第63行
51 if u.Name == "Bill" {