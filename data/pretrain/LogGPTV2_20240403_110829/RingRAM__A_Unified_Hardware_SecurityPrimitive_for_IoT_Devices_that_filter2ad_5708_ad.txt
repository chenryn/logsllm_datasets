min-entropy
Shannon’s Entropy
Transistors/unified bit
✓
✓
× [4, 40]
× [3]
99.1%11
49.4%
47.2%
✓
38M
0.97
0.99
1641.05
SRAM [1, 21]
× [30, 47]
× [27, 30, 35]
✓
✓
92.2%
48.7%
48.7%
×
N/A
0.031
0.058
99.75
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
RingRAM
✓
✓
✓
✓
98.4%–94.4%
48.2%–47.2%
48.4%–49.9%
✓
210M–228M
0.351–0.981
0.423–0.999
Table 4: RingRAM combines the best aspects of RO- and SRAM-based hard-
ware security primitives—without their security weaknesses. The range pre-
sented for RingRAM represents the base design on the left to the 5-gate active
learning on the right.
7.5–88.5
8 EVALUATION
A unified hardware security primitive must serve as the foundation
for both Physical Unclonable Functions (PUFs) and True Random
Number Generators (TRNGs). In earlier sections, we design and
implement RingRAM for this purpose. RingRAM is a hardware
security primitive that leverages a simple, bi-stable, feedback loop
that captures both manufacturing and operational chaos. In this
section, we discover where RingRAM resides on the PUF/TRNG
continuum, then validate that it is a unified hardware security
primitive.
The base system for all experiments is a 5-gate-per-chain version
RingRAM with active learning, implemented on the Xilinx Artix-7
FGPA [45] on a Digilent Arty-A7-100T evaluation board [13].12
Inside the FPGA, we implement a set of 64 RingRAM cells that are
broken-out dynamically into a 64-bit PUF response and a 64-bit
TRNG output by the active learning circuit. A custom state machine
reports the PUF response and TRNG output to a data collection
computer via a UART controller. A program running on a desktop
computer saves the UART data as a binary file.
8.1 RingRAM PUF
RingRAM provides ample stable cells, but are they useful for a PUF?
For use in a PUF, stable cells must repeatedly produce the same
response (i.e., reliable), while being non-biased (i.e., uniform), and
be device dependent (i.e., unique). To asses utility in a PUF, we
evaluate sets of 64 cells to prove that RingRAM meets these criteria,
quantitatively comparing to RO- and SRAM-based PUFs.
Reliability: The reliability of a cell is quantified by its ability to
repeatedly produce the same responses. To quantify response vari-
ance, we take 320K responses from our 64 cells, randomly select
one measurement to be the reference fingerprint, and calculate the
11 RO PUFs achieve high reliability by sacrificing area overhead and latency, averaging
up to 4 billion comparisons. A 64-bit RO-PUF requires 128 ROs (21.8%), two 32-bit
counters (25.6%), a 32-bit subtractor (15.0%), two 1:64 DEMUXs (18.8%), and two 64:1
MUXs (18.8%) [28].
12While we select an FPGA implementation for cost and speed reasons, we expect
the evaluation trends to hold for both discrete and ASIC implementations. Because
of their nature, we expect discrete implementations to be slightly more PUF oriented
(due to increased systematic and structural variation) and ASIC implementations to be
slightly more TRNG oriented (due to compactness and symmetry) than the FPGA.
Figure 12: Distance in 64-bit responses from the same location on the same
FPGA (Self), from the same location on four other FPGAs (Inter), and from
different locations on the same FPGA (Intra). RingRAM’s responses are near
the ideal of 0-bits for Self and 32-bits for Inter and Intra.
Hamming Distance between each measurement and the reference.
Figure 12 shows a histogram of these results as Self distance. The
graph follows a Gaussian distribution centered on 4 bits, indicating
that the resulting fingerprint contains 56 bits of potential device-
discrimination ability. To quantify reliability in a scalar value, we
evaluate response variation using Equation 1 [28], where m is 320K
responses, n is 64-bits, R0 is the enrolled response, and Ri is from
the set of responses to compare to.
Reliability = 100% − 1
HD(R0, Ri)
m
× 100%
(1)
m
i =1
n
RingRAM’s measured reliability is 94.5%, as shown in Table 4, a
2.5% increase over SRAM and a 4.8% decrease from a RO. This is
expected as SRAM’s more compact and controlled layout yields a
higher rate of TRNG cells than an FPGA implementation, thus has
to contend with more noise in its fingerprint. We expect an ASIC
RingRAM implementation to be closer to SRAM.
Uniformity: The uniformity of a set of cells is their ability to
produce balanced responses. A perfectly uniform response is a 1:1
ratio of 0’s and 1’s, otherwise there exists predictability that reduces
utility. Like SRAM, RingRAM responses are uniformly distributed
when looking at many cells. To quantify uniformity in a scalar value,
we determine the ratio of 1’s and 0’s across the set of 320K responses
from just 64 cells using Equation 2 [28], where the variables match
those in Eq. 1 and HW() is the Hamming Weight.
U ni f ormity = 1
m
× 100%
(2)
m
HW (Ri)
i =1
n
As shown in Table 4, RingRAM’s uniformity of 47% is on-par
with ROs and SRAM. We expect ASIC implementations to have a
small increase in uniformity due to tighter controls over cell layout
that increases symmetry.
Uniqueness: Uniqueness is dictated by a response’s dependency
on placement both within a chip (intra-chip distance) and across the
same location on multiple chips (inter-chip distance). We determine
0481216202428323640444852566064Hamming Distance (bits)05101520Percent of responsesSelf  distanceIntra distanceInter distance668ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Michael Moukarzel and Matthew Hicks
Statistical Test
Monobit
Frequency Within a Block
Runs
Longest-Run-of-Ones in a Block
Binary Matrix Rank
Discrete Fourier Transform
Non-Overlapping Template Matching
Overlapping Template Matching
Maurer’s "Universal Statistical"
Linear Complexity
Serial
Approximate Entropy
Cumulative Sums
Random Excursions
Random Excursions Variant
P-Value
0.839618578844032
0.0611787903895858
0.25424654016127324
0.4602661335812786
0.060600309853307055
0.831370987522874
0.9999962973281614
0.490469422296025
0.9989051372547096
0.4876367178175764
0.033925539965049746
0.05939790977947617
0.8750549175582036
0.024767950538244106
0.1453894509643879
Table 5: RingRAM passes the NIST test suite.
Result
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
intra-chip distance by measuring the Hamming Distance between
5 sets of 64 RingRAM cells placed in different locations in a single
chip and sampled 320K times. We determine inter-chip distance by
measuring the Hamming Distance between 5 sets of 64 RingRAM
cells placed in the same location on five different chips and sampled
320K times. Figure 12 shows that both intra- and inter-chip distances
are similar: 32-bits with a 99.9% confidence interval of +/- 3 bits.
Therefore, RingRAM’s responses have a 29 bit worst-case difference,
which is close to the ideal of 32-bits. More importantly, there is a
vast gulf between the distances between responses from the same
location and chip than from either other locations or other chips.
To quantify uniqueness, we condense the intra- and inter-chip
response differences using Equation 3 [28], the variables match
those in Eq. 1, except Ri and Rj are responses from chips/locations
i and j, respectively, and c is the number of chips/locations.
× 100%
HD(Ri , Rj)
U niqueness =
c−1
c
(3)
2
c(c − 1)
i =1
j=i +1
n
RingRAM’s measured intra-chip uniqueness is 46% and inter-
chip uniqueness 50%, giving RingRAM an average uniqueness of
48%. RingRAM is both device- and position-dependent, producing
uniqueness similar to RO and SRAM PUFs (Table 4).
8.2 RingRAM TRNG
For RingRAM to be a universal hardware primitive we must also
validate that its unstable cells are usable by TRNGs. Unstable cells
are created when the cross-coupled gates activate at nearly the same
voltage (i.e., time after enable goes high). The design of RingRAM
assumes that in such cases, chaotic operational variation controls
the winner of the hardware race condition. When this occurs, the
resulting cell response encodes some amount of chaos. In a TRNG
context, the amount of influence chaos has over a cell’s response is
referred to as its entropy; 0 entropy means the response is totally
deterministic, while 1.0 entropy means the response is totally non-
deterministic (i.e., completely random).
The goal of this experiment is to determine RingRAM’s entropy,
which dictates how many responses are required to produce a
truly random N-bit key. Unfortunately, this is a known challenging
problem that can only be approximated with entropy estimation
metrics. Though there are many different entropy metrics, the two
most popular metrics are min-entropy and Shannon’s Entropy.13
min-entropy is a worst-case metric that quantifies the guessing
odds of an attacker that has a large number of previous RingRAM
responses and uses that information to increase their chances of
guessing the next response correctly. As shown in Equation 4, the
best strategy is for the attacker to guess the most likely response.
min-entropy = loд2
1
PMAX(x)
(4)
The result is the number of bits of randomness provided by the
number of bits in X (64-bits in RingRAM’s case). To determine en-
tropy, which is randomness-per-response-bit, divide min-entropy
by the number of bits in X.
Most threat models do not afford such a powerful attacker, hence
we look at Shannon’s Entropy. Shannon’s Entropy is an average-
case metric that quantifies the guessing odds of an attacker under
the assumption that they have no special understanding of the
system. As shown in Equation 5, there is no better strategy than
blind guessing; so the metric considers how far every possible
1
response diverges from the expected even probability (i.e.,
2|X | ).
Shannon Entropy = − n
i =0
P(xi)loд2P(xi)
(5)
The result is treated the same way as that of min-entropy.
To calculate RingRAM’s entropy we collect 320K responses from
each of 64 cells. Because collecting enough responses to see suffi-
cient duplicates in a space of 264 possible responses is infeasible,
we leverage the earlier observation of cell independence14 to break
the problem into a combination of 8, 8-bit responses. For each 8-
bit chunk, we track the frequency every possible response. We
create an entropy for the entire 64-bits by averaging the 8, 8-bit
entropies. Table 4 shows that RingRAM’s min-entropy is 0.981 and
Shannon’s Entropy is >0.9999, better than SRAM- and RO-based
TRNGs. RingRAM also provides increased entropy throughput (i.e.,
random-bits-per-second) on our FPGA. Given RingRAM’s high
throughput advantage and unbounded nature, it represents
the superior primitive for a TRNG.
Entropy only quantifies predictability, it does not account for
statistical patterns in the responses. The National Institute of Stan-
dards and Technology (NIST) provides a statistical test suite used
to validate the entropy of TRNGs. While five-gate chains combined
with active learning provides high levels of Shannon’s Entropy and
min-entropy, those are coarse-grain metrics used to quantify the po-
tential for randomness. We use the NIST test suite to perform a more
comprehensive set of statistical tests using a SHA256-based distila-
tion of RingRAM TRNG outputs to meet the input requirements of
the NIST test. We compress ⌈ 256
.98⌉-bits of RingRAM responses down
to 256-bit values and pass them to the NIST test. As the results in
Table 5 show, RingRAM passes the entire NIST test suite.
13These two metrics come from the Rényi family of entropies, representing the worst
and average case, respectively [6].
14We select 8-bit symbol sizes so that our results directly compare to previous work [21].
Our script reports results from 1- to 16-bits, but every additional symbol bit requires
double the number of responses to remove the impact of random variations from the
resulting entropy.
669RingRAM: A Unified Hardware Security
Primitive for IoT Devices that Gets Better with Age
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Temperature
Self Distance
Reliability
Uniformity
Uniqueness-Intra
Uniqueness-Inter
F
U
P
G min-entropy
N