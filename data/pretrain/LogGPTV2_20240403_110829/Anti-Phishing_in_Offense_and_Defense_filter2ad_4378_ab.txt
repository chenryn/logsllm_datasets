enable a legitimate web site to exploit the ﬁltering
process initiated by the phisher for detecting victims’
stolen credentials in a timely manner.
3.2. Oﬀensive Line
To achieve its offensive objective, BogusBiter needs to
meet the following three requirements.
347347
• Massiveness: The number of bogus credentials fed
into a phishing site should be large so that the over-
whelming majority of credentials received by a phisher
are bogus.
• Indiscernibility: Without the credential veriﬁcation at
the legitimate web site, it is extremely difﬁcult for a
phisher to deterministically discern, either at credential
submission time or afterwards, who are real victims
and what are real credentials.
• Usability: The usage of BogusBiter at the client-side
should not incur undue overhead or unwanted side ef-
fects, nor should it produce any security or privacy
concerns.
3.2.1. Massiveness. We use the real-to-all ratio—the ra-
tio between the number of real credentials being stolen and
the total number of credentials being collected—to estimate
how many bogus credentials could be fed into a phishing
site to hide victims’ real credentials. Without BogusBiter,
most or perhaps all credentials collected by a phisher are
real credentials submitted by victims, thus the real-to-all
ratio is close to one. A phisher can easily verify these cre-
dentials at the legitimate web site, assess their values, and
ultimately use them to obtain money.
With BogusBiter equipped at each web browser, the real-
to-all ratio will be determined by two factors. The ﬁrst is
the set size S, i.e., the number of credentials submitted by
BogusBiter for each phishing site visit. The second is the
cheat-to-click ratio, which is the ratio between the number
of victims who reveal their credentials and the total num-
ber of users who visit the phishing site. The set size S is
a parameter that we can conﬁgure, while the cheat-to-click
ratio is related to the severity of phishing attacks. If all the
phishing site visitors become victims, the cheat-to-click ra-
tio equals one. Therefore, the upper bound of the real-to-all
ratio is 1
S . However, the experiments conducted by Jakob-
sson and Ratkiewicz [14] demonstrate that even with the
effects of modern anti-phishing efforts, about 11 ± 3% of
users will read a spoofed email, click the link it contains,
and enter their login credentials. In addition, Garera et al.
[11] found that on average, 8.24% of users become victims
after visiting phishing sites. If we use 10% as a realistic
value for the cheat-to-click ratio, the real-to-all ratio be-
comes
10S . Thus, if the value of the set size S is 10, a
real credential will be hidden among 100 bogus credentials.
Moreover, it is plausible to assume that the cheat-to-click
ratio will decrease in the long run due to technical advances
and educational efforts — a trend that favors BogusBiter.
1
Given the indiscernibility achieved by BogusBiter, we
now analyze the probability and the expected number of
tries for a phisher to single out a certain number of real
credentials by verifying them at the legitimate web site.
Since each set of S credentials are submitted by BogusBiter
from a user’s browser within a few milliseconds, a phisher
can easily group the collected credentials by sets and ver-
ify them. If a set of S credentials is submitted from a vic-
tim’s browser, the real credential will be singled out by a
phisher with an expected number of S+1
tries. However,
2
because a phisher cannot discern which set includes a real
credential, the phisher has to verify all sets of the collected
credentials in order to single out as many real credentials
as possible. Considering the very low cheat-to-click ratio,
without loss of generality, we simplify our analysis by mix-
ing together all sets of the collected credentials. Let n be
the total number of credentials collected at a phishing site,
and m be the number of real credentials revealed by vic-
tims. Let Xk be the discrete random variable representing
the number of tries performed by the phisher to single out
k real credentials. The probability and expectation for Xk
are described in Formula (1) and Formula (2), respectively,
where(cid:80)n−m+k
i=k
Pr(Xk = i) = 1 and k = 1, 2, ..., m.
Pr(Xk = i)=
E[Xk]=
k−1)
(n−m
i−k )(m
(n
i−1)
n−m+k(cid:88)
i · Pr(Xk = i)
· m − (k − 1)
n − (i − 1)
(1)
(2)
i=k
For example, we use 10% as the cheat-to-click ratio and
10 as the value of the set size S. If there are six real cre-
dentials hidden among all the collected credentials, the ex-
pected number of tries for a phisher to single out one real
credential, i.e. E[X1], is 86, and the expected number of
tries for a phisher to single out all the six real credentials is
515. This example indicates that BogusBiter has the poten-
tial to feed a relatively large number of bogus credentials
into a phishing site and well hide victims’ real credentials
among bogus credentials.
3.2.2. Indiscernibility. The indiscernibility requirement
has two implications: the submission actions initiated from
victims’ browsers are indiscernible from the submission ac-
tions initiated from security-conscious users’ browsers, and
victims’ real credentials are indiscernible from bogus cre-
dentials generated by BogusBiter.
For a victim who ignores a browser’s phishing warning,
BogusBiter ﬁrst intercepts the credential submission HTTP
request before it is sent out. Next, BogusBiter creates S − 1
bogus credentials based on the victim’s real credential and
spawns S − 1 new HTTP requests based on the original
HTTP request. Each of the S − 1 spawned requests is ex-
actly the same as the original request, except for carrying
a bogus credential instead of a real one. Then, BogusBiter
inserts the original HTTP request into the S − 1 spawned
requests and sends out all the S requests within a few mil-
liseconds. Finally, BogusBiter interprets and properly pro-
cesses the returned HTTP responses so that a phishing site
cannot identify the differences between the S submissions.
348348
For a security-conscious user who accepts a browser’s
phishing warning, BogusBiter ﬁrst imitates a victim’s be-
havior by entering a generated bogus credential into the
phishing page and submitting it. Next, similar to the above
case for a real victim, BogusBiter intercepts this original
HTTP request, spawns S − 1 new HTTP requests, and gen-
erates the corresponding S − 1 bogus credentials as well.
Finally, BogusBiter sends out the S requests and processes
the returned responses in the same way as it does for a vic-
tim, thereby making it hard for a phisher to distinguish these
submissions from those initiated from a victim’s browser.
As for bogus credential generation, BogusBiter uses the
original credential as the template to generate the S − 1
bogus credentials. For a victim, the original credential is
the victim’s real credential and thus is ready to use. For a
security-conscious user, the automatically generated origi-
nal credential should be similar to a human’s real creden-
tial.
In current design, BogusBiter randomly generates a
username/password pair as the original credential. For the
remaining S − 1 bogus credentials, a speciﬁc rule should
be followed to generate them so that neither a human nor a
computer can easily discern which is the original credential
and which are the rest. We will present the rule used by
BogusBiter in Section 3.3.
3.2.3. Usability.
In terms of usability, the major advan-
tage of BogusBiter is its transparency to users. Meanwhile,
because BogusBiter only needs to submit some extra bogus
credentials to a suspected phishing site and does not con-
tact any third-party service, it will not cause any security or
privacy problems.
The main usability concerns come from the scenario of
a false positive (i.e., a legitimate web site is wrongly classi-
ﬁed as a phishing site). While the occurrence of false pos-
itives is rare for Firefox 2, IE 7, and recent detection tech-
niques as mentioned in Section 2, BogusBiter should elim-
inate or reduce the possible side-effects on users’ access to
mis-classiﬁed legitimate web sites.
The ﬁrst side-effect is that submitting a set of S login
requests and waiting for responses will induce an additional
delay to users. To reduce the delay, BogusBiter sends out all
the S requests within a few milliseconds, so that the round-
trip times of the S submissions can be overlapped as much
as possible. Accordingly, as long as the set size S is not too
large, the additional delay incurred by BogusBiter should
be minimal and unobtrusive. Our experimental results in
Section 5 conﬁrm that the additional delays are negligible.
The second side-effect is that a user’s real account may
be locked because multiple login requests are submitted
from the user’s browser to a legitimate web site within a few
milliseconds. To defend against password guessing attacks,
some web sites may lock a user’s account for a period of
time after several failed login attempts. However, because
all the usernames are different for the S login requests sent
out by BogusBiter, the “account with many failed login at-
tempts” alarm will not be triggered as discussed in [20]. Our
experiments on 20 legitimate web sites conﬁrm that account
locking is not a concern for BogusBiter.
The third side-effect is that a user may be asked to com-
plete a CAPTCHA [25] test, for the same reason that mul-
tiple login requests are submitted from the user’s browser
within a few milliseconds. Some web sites may resort to
this mechanism to counter password guessing attacks or de-
nial of service attacks. However, in our legitimate site ex-
periments where false positives are assumed to occur, no
CAPTCHA test is triggered if the set size S is not greater
than 10, and only two of the 20 web sites ask a user to do a
CAPTCHA test if the set size S is greater than 10.
3.3. Defensive Line
Given the indiscernibility of BogusBiter, phishers can-
not single out real credentials without verifying the col-
lected credentials one by one at legitimate web sites. More-
over, with the unique design of BogusBiter, the forced
veriﬁcation process, either manually or automatically con-
ducted, will help legitimate sites to detect victims’ stolen
credentials and provide fraud protection in a timely manner.
3.3.1. Working Mechanism. BogusBiter makes such a
defensive feature feasible by imposing a correlation re-
quirement upon the generation of the S − 1 bogus creden-
tials, in addition to the indiscernibility requirement.
• Correlation Requirement: Based on the original cre-
dential, a speciﬁc rule is applied to generate the S − 1
bogus credentials. This rule must guarantee that the
S credentials in a set are correlated: given any one of
them, we can reversely derive a small superset that in-
cludes all the S credentials.
BogusBiter uses a simple substitution rule to meet both
the correlation and indiscernibility requirements. While
there are other ways to meet the two requirements, we
choose the substitution rule because of its simplicity and
efﬁciency for veriﬁcation. Due to our empirical experience
that if the set size S is not greater than 10, no usability prob-
lem occurs and the delay overhead is small (see Section 5),
the substitution rule is tailored to have S ≤ 10. Note that
the exact value of S should be publicly known.
To generate the S − 1 bogus username/password pairs,
BogusBiter ﬁrst uses Formula (3) to deterministically com-
pute an integer position i between 1 and S inclusively:
i=P RF (k, original username) mod S + 1 (3)
where k is a master secret that is randomly chosen when a
BogusBiter is installed or conﬁgured, and P RF is a secure
349349
pseudo-random function. The master secret k is securely
stored and used by BogusBiter. A user does not need to
memorize the master secret, but is allowed to export and
use the same master secret on different computers. Since
this formula only securely hashes the original username, it
is applicable both to web sites that ask a user to submit user-
name/password pair at the same time, and to web sites that
require a user to ﬁrst submit a username and then submit a
password.
Next, BogusBiter identiﬁes the ﬁrst digit in the original
username as the username replacement character, denoted
as username-rc; if the original username does not contains
a digit, the ﬁrst letter (upper or lower case) is identiﬁed
as the username-rc. Using the same method, BogusBiter
identiﬁes the password replacement character in the origi-
nal password, denoted as password-rc.
Then, for each integer position j from 1 to S inclu-
sively where j (cid:54)= i, BogusBiter generates a bogus user-
name/password pair by substituting both the username-rc
character and the password-rc character in the original user-
name/password pair using one of the following two replace-
ment methods:
(1) For the case of j − i > 0: if username-rc (also for
password-rc) is a letter, this lower (or upper) case let-
ter is replaced by another lower (or upper) case letter
j−i places further down the alphabet, wrapped around
if needed, i.e., ‘z’ is followed by ‘a’ (or ‘Z’ is fol-
lowed by ‘A’); if username-rc (also for password-rc) is