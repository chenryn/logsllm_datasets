title:An Interactive Prover for Protocol Verification in the Computational
Model
author:David Baelde and
St&apos;ephanie Delaune and
Charlie Jacomme and
Adrien Koutsos and
Solène Moreau
8
7
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
An Interactive Prover for
Protocol Veriﬁcation in the Computational Model
David Baelde∗, Stéphanie Delaune†, Charlie Jacomme‡, Adrien Koutsos§ and Solène Moreau†
∗ LMF, ENS Paris-Saclay & CNRS, Université Paris-Saclay, France
†Univ Rennes, CNRS, IRISA, France
‡CISPA Helmholtz Center for Information Security, Germany
§Inria Paris, France
Abstract—Given the central
importance of designing se-
cure protocols, providing solid mathematical foundations and
computer-assisted methods to attest
for their correctness is
becoming crucial. Here, we elaborate on the formal approach
introduced by Bana and Comon in [10], [11], which was originally
designed to analyze protocols for a ﬁxed number of sessions, and
lacks support for proof mechanization.
In this paper, we present a framework and an interactive
prover allowing to mechanize proofs of security protocols for an
arbitrary number of sessions in the computational model. More
speciﬁcally, we develop a meta-logic as well as a proof system
for deriving security properties. Proofs in our system only deal
with high-level, symbolic representations of protocol executions,
similar to proofs in the symbolic model, but providing security
guarantees at the computational level. We have implemented our
approach within a new interactive prover, the SQUIRREL prover,
taking as input protocols speciﬁed in the applied pi-calculus,
and we have performed a number of case studies covering
a variety of primitives (hashes, encryption, signatures, Difﬁe-
Hellman exponentiation) and security properties (authentication,
strong secrecy, unlinkability).
Index Terms—Security Protocols, Formal Methods, Observa-
tional Equivalence, Computational Security, Interactive Prover.
I. INTRODUCTION
terms subject
Given the importance and difﬁculty of designing secure
communication protocols, computer scientists have strived to
provide solid mathematical foundations, formal methods and
tools for the computer-aided veriﬁcation of security protocols.
A successful approach in this line of research is to model
cryptographic messages as formal
to some
equational theory representing attacker capabilities. Originally
proposed by Dolev and Yao [36], this idea has been reﬁned
over the years, resulting in a variety of so-called symbolic
models, based, e.g., on the applied pi-calculus [2] or multiset
rewriting [46]. These models capture large classes of attack-
ers and allow the automated veriﬁcation of protocols. This
has lead to tools such as PROVERIF [20], TAMARIN [45],
DEEPSEC [26] and others [5], [25], [32], [37], which have
been used to prove the security of widely deployed protocols,
e.g. [14], [18], [35].
The research leading to these results has received funding from the Euro-
pean Research Council (ERC) under the European Union’s Horizon 2020 re-
search and innovation program (grant agreement No 714955-POPSTAR), and
from the French National Research Agency (ANR) under the project TECAP.
To discuss the general principle and limitations of the
symbolic model, let us consider a simple protocol where a
tag (role T ) with identity id carrying its own hashing key k is
authenticated by a reader (role R) that has access to a database
of legitimate pairs (cid:104)id, k(cid:105):
R → T : n
T → R :
id ⊕ H(n, k)
the attacker cannot derive a message that
In words, the reader sends a random number n and, when
receiving a reply, veriﬁes that there is some (cid:104)id, k(cid:105) in its
database such that the reply is the identity id XORed with
the hash of n using the key k. To verify that an attacker
cannot impersonate a tag with data (cid:104)id0, k0(cid:105), we need to
check that
the
reader would accept, whatever knowledge they may have
obtained from previous interactions. Assuming for simplicity
two identities id0 and id1, and that the attacker is only active
during its last interaction, we have to verify that, for distinct
names (nj)0≤j≤p, and for any i1, . . . , ip ∈ {0, 1}, there is no
context C made of public function symbols such that:
C[nj, idij ⊕ H(nj, kij )]1≤j≤p =E id0 ⊕ H(n0, k0)
where =E is equality modulo a relevant equational theory.
Rephrased like this, the problem may be solved using rewrit-
ing techniques such as uniﬁcation, itself based on completion
or variant computation [30], [48]. However, the equational
theory E would need to contain equations reﬂecting the
algebraic properties of XOR which are typically problematic
for these techniques. In fact, PROVERIF and DEEPSEC do not
support XOR, and TAMARIN only provides limited support for
it. Supporting primitives with rich algebraic properties (e.g.,
blind signatures, exponentiation, XOR) is probably the main
challenge that these tools are currently facing.
An obvious limitation of the symbolic model is that it can
only be used to ﬁnd logical ﬂaws in protocols, e.g. man-in-
the-middle [44] or reﬂection attacks [15].
Indeed, security
in the symbolic model is weaker than the cryptographer’s
standard security notion, based on a computational model
where adversaries are arbitrary probabilistic polynomial-time
(PTIME) Turing machines. As an illustration, nonces are
modelled in the computational model as long bitstrings that
are drawn uniformly at random. Two nonces correspond to the
same probability distribution, and are thus indistinguishable,
© 2021, David Baelde. Under license to IEEE.
DOI 10.1109/SP40001.2021.00078
537
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:06 UTC from IEEE Xplore.  Restrictions apply. 
but the probability that two distinct nonces take the same value
is negligible. The attacker may guess a bit of a nonce but
has a negligible probability of guessing the whole nonce. In
the symbolic model, distinct names are indistinguishable and
are not equal modulo E, but the partial guessing of a nonce
cannot be modelled: a name is either known or unknown to the
attacker. Signiﬁcant research efforts have been done to get the
best of both worlds through the development of computational
soundness results, but unfortunately they only apply under
strong hypotheses, and have modularity issues [3], [33], [34].
In [10], [11], Bana and Comon have proposed a new
approach to security proofs, which they call computationally
complete symbolic attacker (CCSA). It relies on the sym-
bolic setting of ﬁrst-order logic, but avoids the limitations of
the symbolic models mentioned above. Instead of modelling
attacker capabilities using rules stating what the adversary
can do, their method relies on the speciﬁcation of what the
attacker cannot do. Starting from the security properties of
cryptographic primitives, they derive some axioms expressing
which pairs of sequences of messages are indistinguishable.
They show that their axioms are sound w.r.t. the interpretation
of terms as probabilistic PTIME Turing machines. Therefore, a
proof of a security property from these axioms implies security
in the computational model under the initial cryptographic
assumptions. This approach has been demonstrated on various
protocols to obtain formal proofs of security [8], [9], [28],
[41], [49]. Going back to our example, authentication would
be expressed more abstractly as:
EQ(att(frame), id0 ⊕ H(n0, k0)) ∼ false, where
frame
= (cid:104)n1, idi1 ⊕ H(n1, ki1 ), n2, idi2 ⊕ H(n2, ki2), . . .(cid:105).
Here, the binary function symbol EQ is interpreted as bitstring
equality, and ∼ as indistinguishability. The function symbol
att stands for an arbitrary probabilistic PTIME computation
performed by the attacker, taking past messages as input.
def
Intuitively, the overall statement expresses that there is a
negligible probability that att(frame) yields a message that the
reader would accept. It can be proved using just two axioms:
ﬁrst, we use the properties of XOR to obtain an equality
between H(n0, k0) and id0 ⊕ att(frame); second, assuming
that the keyed hash function satisﬁes existential unforgeability
under chosen message attack (EUF-CMA), we conclude that
this equality is false with overwhelming probability given that
the message n0 is fresh and has thus not been hashed in frame.
In contrast with the treatment of our example in the
symbolic model, the CCSA approach yields a proof that is
immediately relevant in the standard model of probabilistic
PTIME machines and which relies on explicit and standard
cryptographic assumptions. Finally, applying the axioms did
not require complex rewriting techniques: we only had to
verify a simple equality involving XOR, and never had to
consider all possible contexts as in the symbolic model.
Two problems prevent a more widespread use of the CCSA
approach. First, it is limited to bounded executions: given
a protocol and a bound on its execution traces, one can
is tedious; proving all
derive a series of indistinguishability goals that need to be
(separately) proved to guarantee the security of the protocol.
Second, proofs are manual: proving a non-trivial goal
in
detail
the goals resulting from all
possible executions is not manageable. Works on decision
procedures remain of limited use so far, as they are limited
to trace properties [29] (e.g. secrecy, authentication) or a very
restrictive set of axioms [42].
Contributions: In this paper, we elaborate on the CCSA
approach to solve these two problems. Our ﬁrst contribution,
presented in Sections III and IV, is a meta-logic over the base
logic of Bana and Comon [11].
In the base logic, one has
to separately prove a family of indistinguishability goals, one
for each possible protocol execution within a given bound.
Formulas of our meta-logic express properties of all execution
traces of a protocol, which allows to capture the family of base
logic goals as a single formula. Security properties expressed
in our meta-logic have the standard computational meaning,
and provide guarantees for an arbitrary number of sessions that
does not depend on the security parameter (this is discussed
in detail in Section IV-C).
We then design proof systems for deriving security prop-
erties expressed as meta-logic formulas, in part by lifting
base logic axioms. We consider both trace properties, which
are useful to model authentication properties, and equivalence
properties, which allow to express privacy properties such as
anonymity and unlinkability. Our meta-logic enables useful
interaction between the two kinds of properties. For instance,
in several of our case studies, we establish unlinkability by
proving en passant an authentication property. This second