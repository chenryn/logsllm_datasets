4. The  communications  between  the  server  and  the 
client takes place on secure channels. 
The  two  trusted  system  calls  mentioned  above  are 
described later in Sections 3.3.2 and 3.3.3.   
The Major Components of DARE 
3.2. 
DARE consists of the following components:   
•  A static analyzer that runs at the client that requests 
the execution of a program on a remote server.    The 
remote server (called the computation server, CS) 
is potentially untrusted.    This analyzer identifies the 
locations  of  the  control  flow  checkpoints  and 
determines their associated signatures.     
•  A  challenge  generator  that  runs  on  a  trusted  host 
that  performs  the  authentication  checks.    This  host 
(called the authentication server, AS) could be the 
client  machine  itself.    The  challenge  generator 
sends  a  list  of  randomly  chosen  checkpoints  that 
need  to  be  enabled  for  signature  generation  and 
other information to prevent replay attacks.     
•  A  checkpoint  enabling  module  that  runs  on  the 
remote  and  potentially  untrusted  host,  CS.    This 
the  specified  checkpoints  by 
module  enables 
functions 
dynamically 
for 
generating  signatures  and  stores 
the  original 
information  at  the  location  of  these  calls  for  later 
restoration  during  the  actual  execution  of  the 
program  being  validated.    This  module  is  invoked 
through one of the trusted system calls (Sec. 3.1). 
inserting  calls 
•  A  signature  generator  that  runs  on  the  CS  and 
generates  control  flow  signatures  at  the  enabled 
checkpoints.    The  signature  generator  is  invoked 
through  the  second  of  the  trusted  system  call 
mentioned  in  Sec.  3.1.    The  generated  signature  is 
sent to the AS on secure channels as the response to 
a challenge.    Some additional processing is required 
in the signature generation step as described later.     
•  A signature verifier that runs on the AS, whose role 
is  to  verify  if  the  response  to  a  challenge  matches 
the  expected  signatures  and 
takes  appropriate 
actions on potential validation failures. 
Figure  1  depicts  the  various  hosts  and  the 
messages  they  exchange  as  part  of  the  authentication 
process in the DARE framework.   
to 
3.3.  Functional Components of DARE 
We now present DARE’s functional components. 
3.3.1 The Static Analyzer 
DARE’s static analyzer is used on the client side 
to perform a basic block level data flow analysis of the 
binaries of the program whose remote execution has to 
be  authenticated.    This  analysis  derives  and  uses 
control  flow  probabilities  into  basic  blocks  as  is 
routinely done in many modern optimizing compilers.   
(A basic block is a set of consecutive instructions that 
does  not  have  any  branch.)    We  do  this  by  first 
identifying 
the  frequently  called  functions  (“call 
blocks”)  and  then  analyzing  the  basic  blocks  within 
each such call block.    A call block is a series of basic 
block  starting  from  the  call  instruction  and  ending 
with a ret instruction.   
Detecting the dynamically linked functions is easy 
but deciding the critical local functions that are called 
frequently is not as easy.    To identify the most critical 
basic blocks – that is blocks with the higher execution 
frequencies, we need to generate a jump tree that holds 
calls and indirect jump sequences for each call block.   
We  developed  a  utility  to  automate  this  step.    This 
Notifications of 
verifications or 
failures 
Request to execute the 
Client
CS 
Result of static analysis: 
full-set of checkpoints, 
signature database 
Responses to challenges: 
generated signatures 
combined with session tag 
AS
* All communication channels 
are encrypted 
Initial challenge: set of randomly enabled checkpoints, 
session tag 
Subsequent challenges: validate signatures, take appropriate 
actions: optionally reset MSRs, send new checkpoints, etc. 
Go-ahead message or message to suspend/halt execution 
Figure 1.    Hosts in the DARE framework and the 
types of messages they exchange (in bold)
This  static  analysis 
utility  program  generates  the  basic  blocks,  their  call 
frequencies and constructs the jump table.    For added 
flexibility,  DARE  permits  the  programmer  to  modify 
the critical basic block list produced by the analyzer.       
identifies  a  full  set  of 
checkpoints  within  the  most-likely  control  paths, 
located  at  the  entry  point  to  the  most  frequently 
executed basic blocks and ensures an acceptable level 
of  coverage  for  verifying  the  control  flow  within  the 
program  as  it  executes.  This  analysis  also  generates 
information  that  can  be  incorporated  into  verifiable 
signatures at each of these checkpoints.   
is 
3.3.2 The checkpoint enabling module 
This  module 
implemented  as  a  system  call, 
“sys_startcheck”, which selects a random subset of the 
checkpoints from the full set of such checkpoints, with 
the  random  selection  specified  by  the  verifier.    This 
random selection also ensures that a good coverage of 
the  control  flow  path.    sys_startcheck(  )  is  invoked 
once  before  application  is  run  to  request  a  challenge 
from  the  verification  server.    The  verification  server 
will respond  with challenge that includes a randomly 
generated  tag  value  (hereafter  called  the  session  tag) 
and a list of checkpoint locations.    After receiving the 
checkpoint list, the original codes at checkpoints will 
be  substituted  with  system  call 
for  signature 
generation  and  the  original  binary  contents  at  each 
such  location  will  be  saved.    These  original  contents 
are restored after successful signature generations and 
verifications at the checkpoints to enable the original 
456456
executions to continue.     
3.3.3 The Signature Generator 
The signature generator is implemented as another 
system call, “sys_checkpoint”, which is inserted by the 
call  to  “sys_startcheck”  at  each  of  the  randomly-
chosen checkpoints.    A call to sys_checkpoint( ) does 
the following: 
(cid:122) Collects 
information  and 
generate  the  signature  for  the  current  checkpoint 
location.    The  nature  of  the  signature  will  be 
described in the Section 4. 
the  signature-specific 
(cid:122) Encrypts and sends the signature combined with the 
session tag to the authentication server. 
(cid:122) Receives the response from the authentication server 
and  take  appropriate  action  depending  on  the 
response.    The authentication server can send a new 
list  of  the  checkpoint  locations,  or  modify  the 
existing  list  of  checkpoint  locations  by  adding  or 
deleting checkpoint locations. 
(cid:122) Patches  the  original  code  in  the  previously  passed 
checkpoint with a call to “sys_checkpoint” to permit 
signatures  to  be  generated  correctly  if  a  signature 
generation  is  required  at  a  future  time  at  this 
previous  checkpoint.    The  original  bit  sequence  at 
the  previous  checkpoint’s  location  is  saved  before 
this patchup. 
(cid:122) Copies  back  the  original  binary  contents  to  the 
current  checkpoint  location,  change  the  X86  eip 
register’s  value  appropriately  and  let  the  original 
execution continue until the next checkpoint.     
3.3.4 The Challenge Generator and Verifier 
  When 
The challenge generator is called by the signature 
verifier  component  when  needed. 
the 
verification  commences,  the  CS  will  wait  on  a 
challenge from the AS.    As this initial challenge, the 
AS  will  send  a  list  of  randomly  selected  checkpoint 
locations, as described earlier.    This random selection 
and enabling of checkpoints makes it very difficult to 
the  sequence  of  signatures  expected  as 
predict 
responses  to  subsequent  challenges  by  the  AS.    In 
effect,  we  dramatically  reduce  the  possibility  of  pre-
executing 
the  program  on  a  remote  host  and 
generating the signatures in advance for later replay by 
the  untrusted  CS  in  an  effort  to  deceive  the  AS.    To 
see this, suppose we have N call blocks and each call 
block  has  m  basic  blocks  that  are  critical  –  that  is, 
have  high  execution  frequencies.    The  challenge 
generator  will  randomly  select  k  basic  blocks  from 
these m basic blocks at the beginning of the challenge.   
Therefore,  the  total  number  of  different  checkpoint 
locations  in  the  checkpoint  list  will  be  equal  to 
457457
C(m,k)N  where  C(x,y)  stands  for  the  combination 
function.    As  an  example  if  N=200,  m=10,  and  k=3 
(which are fairly representative of a small to medium-
sized  application)  then,  the  total  number  of  different 
outcomes  is  (10!  /3!  x  [10-3]!)200  ≈  1.2  x  10400.    We 
believe  that  this  low  probability  of  predicting  a 
specific  random  sequence  of  signatures  make  it 
possible 
remote 
executions  as  genuine.    If  this  is  not  enough,  the 
DARE  framework  permits  the  AS  to  alter  the  list  of 
enabled  checkpoints  dynamically. 
fact,  as 
described in Section 8, we use a similar mechanism to 
handle  checkpoint  within  loops  and  for  reducing  the 
associated performance penalty. 
for  DARE 
to  certify 
typical 
In 
4.  The Nature of the Signature 
that  are 
indicative  of 
The crux of our authentication mechanism lies in 
the ability to characterize the unique, expected control 
flow  signatures  at  dynamically  and  randomly  chosen 
checkpoints  from  a  set  of  pre-generated  checkpoints.   
The signature at a checkpoint is multi-dimensional in 
nature  and  has  various  components  that  identify  the 
execution  path  taken  to  the  checkpoint  as  well  as 
components 
the  state  of 
execution  at  the  checkpoint.    To  derive  a  signature, 
we  can  use  a  variety  of  information  maintained  in 
MSR  registers,  such  as  number  of  cache  hits,  stall 
cycle  count,  sequence  of  past  few  system  calls  and 
other such  information.    Contents of  general purpose 
registers  can  also  be  used  as  signature  components.   
In  general,  a  signature  has  some  exact  components 
(specific  register  values,  last  few  branch  instruction 
addresses, last system call id), as well as components 
(“inexact  values”)  that  can  be  matched  to  expected 
values  within  a  given  range  of  deviations  (such  as 
number  of  cache  hit,  committed  instruction  counts, 
stall  cycle  counts  etc.). 
  (Committed  instruction 
counts  are  not  exact;  program  branches  can  cause 
variations.)    Because  of  these  two  diverse  class  of 
components  in  the  signature,  signature  verification  is 
not just a comparison for equality but rather a mix of 
comparison  for  equality  and  comparison  for  matched 
within a pre-specified range. 
The  actual  signature  generated  can  also  use 
constraints  based  on  specific  register  values  (regular 
registers,  not  MSRs)  and  verify,  for  example,  if  the 
value of register X is strictly greater than the value of 
register  Y.    In  general,  the  more  the  number  of 
components  we  use  in  a  control  flow  signature,  the 
better are the chances of producing a unique signature 
for the control flow path to the point of verification. 
Given  the  features  of  contemporary  hardware, 
what constitutes a practically viable, robust and unique 
signature  for  a  checkpoint  is  a  legitimate  area  of 
research by  itself.    We are investigating a  number of 
approaches  for 
identifying  and  using  exact  and 
"inexact"  components  for  a  control  flow  signatures 
that  allow  a  unique  control  flow  signature  to  be 
associated with a control flow path. 
target  application’s  need. 
We  have  developed  DARE  as  a  generic 
framework.  Users  are  free 
to  choose  signature 
components  and  verification  functions  depending  on 
the 
the  current 
implementation  signature  components  chosen  are 
unaffected by a context switch or process migration to 
another  core.    If  components  affected  by  a  context 
switch are present, one solution will be to reinitialize 
them on context switches.     
In 
5.  Run-time Validation of CS Libraries 
One  naïve  way  to  implement  assumption  (3)  of 
Sec.  3.1  is  to  statically  link  the  library  modules  with 
the  binaries  of  the  program  being  validated  and 
validate  the  resulting  binary  using  the  proposed 
framework.    Although,  this  approach  works,  it  is  not 
desirable, as all the advantages of dynamically linked 
libraries  are  lost.    An  alternative  approach  will  be  to 
set up an interrupt handler to generate a signature on 
every m committed instructions where m is chosen at 
random and small enough for a good coverage and big 
enough  for  an  acceptable  performance  penalty,  as  in 
[CM 05].    This, of course, requires the timer interrupt 
mechanism  to  be  validated  using  a  dynamic  root  of 
trust  or  similar  mechanisms.    Yet  another  approach 
for validating library functions will be to use the per-
branch tracing mechanisms supported in some modern 
hardware to track each and every branch executed in 
the  library  code  (Sec.  7).    The  current  version  of 
DARE  does  not  validate  the  library  functions.    Note 
that our approach to validate the execution of  library 
functions  does  rely  on  the  use  of  some  smaller  (and 
fixed)  components  that  are  certified  using  a  dynamic 
root  of  trust  mechanism.    This  is  still  significantly 
better  than  validating  these  libraries  before  their 
execution  using  a  dynamic  root  of  trust  mechanism 
that leaves out any run-time checks.    Finally, note that 
we  prefer  not  to  verify  the  actual  program  using  the 
approach  just  described  for  library  functions,  as  our 
signature  validation  approach  for  the  program  is  at  a 
more  finer-grained 
thus  more  robust.   
Where a similar level of validation is necessary for the 
library  functions,  the  practical  choice  will  be  to  link 
them  in  statically  with  the  program  binaries  and 
validate them like the rest of the program itself. 
level  and 
6.  Run-time Validation of Signatures 
Run-time verification of control flow signatures in 
a 
call 
DARE proceeds as follows: 
1. (CS side) Prior to commencing the actual execution, 
the  CS  connects  to  the  verifier  (AS,  authentication 
server) over a secure channel and sends a challenge 
request message to the AS.     
2. (AS side) As the initial challenge, the AS will send a 
randomly generated tag and a list of the checkpoint 
locations  which are selected from a  full-set of pre-
generated checkpoint locations (Sec.    3.3.1).     
3. (CS side) After receiving the checkpoint list, the CS 
will enable the specified checkpoints and patch the 
original 
to 
“sys_startcheck”,  as  described  in  Sec.    3.3.2  and 
starts the program execution 
code  with 
program 
4. (CS  side)  When  a  checkpoint  location  has  been 
reached, the CS  will generate a signature, combine 
the  signature  with  the  randomly  generated  session 
tag  received  in  Step  2,  encrypt  this  signature  and 
send  it  to  the  AS  for  verification.    The  encryption 
key is stored securely in the CS (Sec.    3.1). 
5. (AS side) If the signature verification component in 
the  AS  validates  the  signature  sent  by  the  CS,  it 
sends  a  go-ahead  message  to  the  CS.    This  go-
ahead  message  can  optionally  change  the  set  of 
currently  enabled  checkpoints  and  re-initialize 
variables/system-level 
counters  when 
necessary.    If the validation fails, the AS can enable 
additional  checkpoint  locations  to  scrutinize  any 
suspicious  behavior  (or  rule  out  false  positives) 
through  a  more 
frequent  challenge-response 
exchanges  or  abandon  server-side  execution  and 
mark  the  server  execution  as  compromised  (or 
untrusted).    The client decides on actions that have 
to be taken when validation fails. 
activity 
6. (CS  side)  After  receiving  a  go-ahead  message,  the 
server  side  system  call  restores  the  original  binary 
contents  for  the  current  checkpoint  and  returns.   
Before  returning  to  the  original  execution,  the 
original code in the previously validated checkpoint 
location  will  be 
re-substituted  with  a  call 
to  permit  a 
“sys_checkpoint” 
validation  of 
this  previous 
checkpoint, should it be required subsequently. 
  3.3.3) 
the  signature  at 
(Sec. 
7.  Resiliency of DARE 
In this section, we provide non-formal arguments 
to establish that the proposed authentication scheme is 
secure,  as  a  formal  proof  of  security  is  well-beyond 
the scope of this paper. 
First, we examine the impact of compromising the 
two functions calls installed at the CS.    If a different 