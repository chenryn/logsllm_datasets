already imposed with heavy workload. Therefore, launching
a power attack against a rack conducting VM migration can
amplify the damage caused the power attack and trip the CB
more easily. VM migration can also be leveraged to help
mount a power attack in PaaS and SaaS environments, where
virtualization and VM migration are used.
VI. POWER ATTACK IN SAAS
With SaaS being the most popular cloud service model, we
exploit the attack vectors in SaaS scenarios and conduct a set
of experiments to verify their feasibility.
A. SaaS and attack vectors
Software as a service (SaaS) delivers the application man-
aged by third-party vendors to cloud clients, and users can
access the applications via client-side interfaces. The most
typical SaaS service is web service. Compared with PaaS
and IaaS,
the users of SaaS have much less control over
the infrastructure. The service vendor manages the underlying
hardware, middleware, OS and applications, which are trans-
parent to users. A user can access the application only via
the interfaces provided. Therefore, standing at the perspective
of power attacker, SaaS provides very limited control over
the target. The attacker can only access the target via certain
APIs or interfaces (usually web browser). However, as pointed
out by many previous works, certain specially crafted web
service requests will consume more system resources, therefore
resulting in the potential of a power attack.
In a typical web service, HTML pages are dynamically
generated when receiving requests. Some contents of the
requested web page need to be constructed on the ﬂy or fetched
from database. During this process, two levels of caching,
object cache and in-memory cache, are used to help to optimize
the performance. Normally many cache misses can produce
considerable negative impact on the system performance and
lead to the increase of power consumption. Thus, an attacker
will attempt to generate requests that trigger a large number
of cache misses to launch a power attack.
Moreover, different computation will
induce different
power consumption for a system. For instance, ﬂoating point
operations may consume more power consumption than integer
operations. In modern processors such as x86 processors,
Arithmetic Logic Unit (ALU) performs integer operations
while the Floating-Point Unit (FPU) takes the responsibility of
executing ﬂoating point operations. FPU is more power hungry
8
)
W
(
r
e
w
o
P
250
200
150
100
50
0
0
Cache miss requests
Normal workload
50
100
150
200
250
300
Time (s)
)
W
(
r
e
w
o
P
250
200
150
100
50
0
0
Floating point operation intensive requests
Normal workload
50
100
150
200
250
300
Time (s)
)
W
(
r
e
w
o
P
300
250
200
150
100
50
0
0
Inject malicious workload
100
200
300
400
500
Time (s)
Fig. 11.
normal workload and cache miss workload
Power consumption of the server under
Fig. 12.
ﬂoating point operation intensive workload
Power consumption of the server under
Fig. 13.
power attack.
Power consumption of the server under
than ALU, indicating that ﬂoating point operations are more
power expensive than integer operations. Meanwhile, different
arithmetic computation will consume different amount of re-
sources as well, e.g., division operation is more costly than
add and multiplication operations. Such power consumption
discrepancy in computation provides another attack vector. An
attacker can launch a power attack by sending requests that
involve a large number of expensive ﬂoating point operations.
B. Attack evaluation
To evaluate a power attack in SaaS environments, we set
up a testbed to deploy web services and conduct a series of
experiments to generate power spikes. The server used in the
evaluation is Server B in Table I.
The RUBiS benchmark is used in our evaluation. RUBiS is
a web benchmark that emulates online-shopping web services.
RUBiS provides various features of classic online shopping
websites such as browsing goods, selling items, bidding on
items, registration and viewing user information. Meanwhile,
RUBiS also provides client emulators that behave as real world
users. The “transition table” deﬁned by RUBiS describes the
behaviors of the emulated clients. By modifying the transi-
tion table, the client emulator can generate different request
patterns.
We deploy RUBiS as a 3-tier web service, in which Apache
2, Tomcat7, and MySQL are used as the web server, the
application server,
the database, respectively. We populate
the database with 100,000 unique items and 50,000 different
users. To Make RUBiS more suitable for our experiments, we
modify the source code of RUBiS to include some additional
functionalities. For instance, we make RUBiS capable of
performing “discount” operations, i.e., a user can have coupons
to get discount, reducing the buy-out prices of items by certain
percentage. The users can purchase multiple items or a certain
number of one item, and RUBiS will calculate the overall price.
We also modify the client emulator to make it more ﬂexible
and capable of generating specially crafted requests.
In our experiments, we ﬁrst explore the requests that will
trigger cache misses. RUBiS provides a “default” transition
table that deﬁnes the normal trafﬁc, so we use it to represent
the normal workload of RUBiS. During the experiments, 4,000
clients are emulated. To generate the malicious cache-miss
trafﬁc, we modify the transition table so that the clients will
continuously browse items in a totally random manner. In
this way, both of the object caches and in-memory caches
will be ﬂushed frequently, resulting in considerable cache
misses. Figure 11 shows the comparison of power consumption
between normal
trafﬁc and cache-miss trafﬁc. The results
demonstrate that cache-miss trafﬁc can generate signiﬁcantly
more (over 15%) power consumption than normal trafﬁc.
We also conduct experiments to verify that ﬂoating point
operations generate more power consumption than integer
operations. First, we populate the database to set the prices
of all items to be integer numbers. Then we emulate 4,000
clients to browse and purchase items with the access pattern
provided by the default transition table. Such requests represent
the normal workload of the web service. After that, we update
the prices of all items to be ﬂoating point numbers. While the
requests still follow the access pattern provided by the default
transition table, the clients are crafted to purchase multiple
items and use coupons while checking out. Such malicious
requests cause the server to perform a considerable amount
of ﬂoating point operations. The experimental results are
illustrated in Figure 12. Compared with the normal workload,
it is evident that those malicious requests generating a large
number of ﬂoating point operations can force the web server
to experience a signiﬁcant rise of power consumption.
Finally, we combine the two attack vectors mentioned
above to generate a malicious trace and then launch a more
powerful attack. Again, we use the trace of 4,000 emulated
clients generated by the default transition table to represent
a normal workload of the server. To launch the attack, we
craft
the malicious requests to trigger both cache misses
and expensive ﬂoating point operations. While running the
normal workload, we launch the power attack by injecting
crafted requests from 2,000 malicious clients. These malicious
clients perform browse-and-purchase operations. Each of the
malicious client ﬁrst browses random goods with ﬂoating point
prices, then purchases a random number of the browsed items.
Meanwhile, the client uses coupons to get discount on the
items bought. In this way, the server has to perform numerous
add, multiplication and division ﬂoating point operations.
Moreover, since the clients are browsing and purchasing items
in a random fashion, a large number of cache misses are
triggered. Figure 13 illustrates the power consumption of the
victim server under the power attack, which is mounted at
180s. The results clearly demonstrate that our power attack
can induce a signiﬁcant rise in power consumption of servers
in SaaS environments.
9
TABLE II.
SIMULATION ENVIRONMENT SETUP.
Parameter
# of Servers
# of racks
# of PDU
# of CBs
Capacity of PDU-level CB
Capacity of DC-level CB
CPU Per Server
DRAM Per Server
Disk Per Server
Est. Peak Power per Server
Value
139,200
approximate 700
approximate 20
150kW
1MW
16GB
2TB
240Watt
approximate 30 (per PDU + per DC )
dual-core 2.0GHz Xeon
C. Damage assessment and discussion
Our experimental results verify that specially crafted web
requests can generate signiﬁcantly more power consumption of
servers in SaaS than normal requests. In our SaaS experiments,
the power attack can increase the power consumption of a
victim server by 30 to 40 percent, which is even more signiﬁ-
cant than those in PaaS and IaaS environments. Therefore, the
damage caused by a power attack in SaaS can be as great as in
PaaS and IaaS. In general, the attack impact upon SaaS mainly
depends on three factors, the per-request power consumption,
the malicious request rate, and the attack duration. To make
an attack powerful and stealthy, seeking an attack vector with
high per-request power consumption is the key.
Besides the attack vectors mentioned above, certain web
applications expose particular vulnerabilities that can be ex-
ploited by attackers. For instance, an attacker can launch
algorithmic complexity attacks [10] against web applications
that involve with many hash table operations. Algorithmic
complexity attacks can make hash table operations always
suffer from the worst case complexity, therefore consuming
much more resources. For web applications deployed with
large databases, requests that compete on database locks can
also generate signiﬁcantly more resource consumption [26].
VII. DATACENTER LEVEL SIMULATION
While we have shown the feasibility of mounting a power
attack at the server and rack levels, such attacks could be
spawned to the data center level, which may lead to more
severe and disastrous consequences. In this section, we study
the impact of power attacks at the data center level (DC-level)
including the large size PDU-level based on simulations. We
ﬁrst introduce the setup of simulations and then present the
simulation results and analysis.
A. Simulation Setup
1) Platform: Based on our server-level and rack-level ex-
perimental results, we build the simulation models and conﬁg-
ure the data center parameters following the description of the
Google data center in Lenoir, North Carolina, USA [11]. We
assume there exists a simple workload management scheme
in the data center, which can distribute all workloads to each
PDU evenly. All simulation parameters and their values are
shown in Table II.
In the simulation, we build the similar power infrastructure
as in Figure 1. Based on our threat model, a power attacker
can obtain the knowledge of racks and servers in the same
10
PDU to launch attacks to each single PDU inside the power
infrastructure. We use a boolean checker as the CB in the
simulation implementation. Once a PDU-level CB is tripped,
servers connected to the corresponding branch circuit shut
down consequently. As a result, we can observe that
the
monitored victim PDU power drops down to zero. All services
dispatched to servers in this PDU will be redistributed to
other servers with stable power supply from different PDUs.
A similar CB is implemented for the whole data center. From
the public information of the Google data center, we ﬁnd that
the nameplate capacity of the DC-level CB is smaller than
the sum of all capacity of PDU-level CBs. The reason is due
mainly to the unplanned capacity increase of the Google DC
(adding more servers and PDUs) without updating the whole
power infrastructure. Thus, there exists a possibility that the
DC-level CB could be tripped without failing any PDU-level
CBs, which is conﬁrmed by our simulation results shown in
Figure 17.
2) Workloads: Two workload traces are used in our simu-
lation, named as “Original” and “Attack” representing normal
and attack activities, respectively. The original trace consists of
the daily workloads of the Google data center [11]. The attack
trace includes the workloads similar to HPC workloads, which
can increase the power consumption of a target by up to 30%2
in a short time. As a sample of the daily workload, we show
a three-day workload trace from Google in Figure 14. Note
that, in Figure 14, we deﬁne three regions as peak, medium,
and valley, with respect to the workload dynamics. The peak
region is above the top 10-percentile of the workload, e.g.,
the workload density of 30,000 queries per second (qps) is
the top 4-percentile of the workload. By contrast, the valley
region is below the 90-percentile of the workload. The rest in
between is the medium region. The three regions represent the
three typical running states of a data center, busy, normal, and
idle. We design simulations that launch the power attacks in
these three regions, respectively, to examine the power attack
impact at the DC level under different running states of the
data center.
B. Simulation results
Prior to the simulation of the DC level power attacks, we
ﬁrst simulate the power attacks at the PDU level to demonstrate
the impact of power attacks on a victim PDU and how PDU
level attacks can affect the power consumption of the entire
data center.
When an attacker acquires the information of those servers
located in the same PDU, the attacker can launch a power
attack against this PDU to trigger a power outage. We simulate
this scenario where the power attacker targets several particular
PDUs. The capacity of the PDU-level CB is shown in Table
II.
First, we show a snapshot of the power attack on a large
size PDU (including 40 racks, 650 machines) in Figure 15.
The attack begins at time 12min and lasts for 22 minutes till
the PDU-level CB is tripped. The whole PDU fails and all the
servers powered by this PDU are shut down completely. Thus,
2 The number is based on our experimental results in Sections IV,V, andVI.
e
c
a
r
T
d
a
o
l
k
r
o
W
)
d
n
o
c
e
S
r
e
P
y
r
e
u