offers  n-tier  authentication  to  the  database  when  the  application 
can  have  multiple  user  sessions  within  a  single  database  server 
session [21]. This mechanism is called "lightweight sessions" and 
it can preserve the identity of the real user through the middle tier. 
But in order to support the fine-grained authorization, Oracle must 
maintain  all  the  application  users  and  attach  security  policies  to 
each one. Since the number of web users may be tremendous and 
they are created/dropped dynamically by the application (and not 
by DBA), this solution is not exactly practical for a typical web 
application. 
The  main  disadvantage  of  the  above  proposed  methods  is  clear: 
these  methods  are  not  native  for  databases  and  cannot  be 
implemented by the database built-in mechanisms. We call these 
methods  the  Virtual  Patching  methods  (this  terminology  is 
proposed by Chris Klaus, see [20]) as they try to shield databases 
from attacks instead of making databases resistant to them. 
Another  example  for  application  based  protection  appeared  in 
[19]. They use stored procedures or parameterized queries at the 
database, but calling them with parameters from the application. 
This can prevent SQL injections, but if there exists some place in 
the  application  that  can  access  the  database  without  using  this 
technique,  then  the  database  will  be  threatened.  Furthermore, 
stored procedures or parameterized queries can only prevent one 
specific  kind  of  attack:  the  SQL  injection.  But  we  need  new 
approaches, such that the database will be properly protected no 
matter how the application is written and what kind of an attack 
the intruder will run. We’ll show that our method will make the 
database  resistant  to  general  kind  of  attacks  instead  of  trying  to 
shield  vulnerable  databases  by  outside  ad  hoc  methods  as  the 
applicative approaches do. 
A  companion  approach  is  intrusion  detection.  Much  effort  was 
invested  in  developing  methods  for  detecting  intrusions  to 
databases  in  recent  years.  The  main  idea  is  based  on  analyzing 
transactions  that  arrive  to  the  database  with  the  purpose  of 
searching for signs of intrusions. Valeur, Mutz and Vigna in [17] 
suggest creating fingerprints for each sentence that the application 
can run. Low, Lee and Teoh in [10] and Srivastava and Reddy in 
[15]  suggest  not  only  to  structure  fingerprints  for  single  SQL 
sentences,  but  also  to  refer  to  the  order  of  sentences  within  the 
transaction. One of the difficulties of this method is that the web 
applications  have  a  tendency  to  use  very  short  transactions  and 
even  use  the  implicit  transaction;  namely,  each  SQL  sentence 
constitutes  of  a  separate  transaction.  So  there  is  no  point  in 
searching for order of sentences in a transaction that, in general, 
contains only one sentence. 
Hu and Panda in [8] suggest a different strategy: it’s possible to 
look  for  dependencies  between  the  different  items  in  SQL 
sentences. And these dependencies can be found by data mining 
algorithms. But the main disadvantage of all the above methods 
for detecting intrusions to databases is that they are not suitable 
for  web  systems.  These  methods  presume  that  it’s  possible  to 
analyze the log of databases when this log contains SQL sentences 
and indication to which user’s session each such sentence belongs 
to. But this is impossible for web systems as was explained above. 
For example, look for the following sentences: 
SELECT C1 FROM T2  
UPDATE T3 SET C4 = 5 
Figure 5:  SQL statements and their dependencies 
If we apply the approach proposed in [8], we can find dependency 
between C1 and C4. But for the web application these sentences 
can  be  submitted  by  different  users  so  they  can  be  completely 
independent! 
In this paper we present the parameter method as a method that 
transfers the identity of the user to the database. Such indication 
will be reliable and difficult to fake, so the database can rely on it. 
We’ll use the built-in access control mechanisms of databases that 
much resembles the use of the classical protection mechanism of 
views.  All  the  existing  methods  of  detecting  intrusions  to 
databases will also become relevant for web systems with the new 
parameter method. 
4.  OUR APPROACH 
Our  concept  is  based  on  the  use  of  parameterized  views  as  the 
means  to  supervise  the  accesses  to  the  database  from  web 
systems. In the parameterized view, the parameter will contain the 
identity  of  the  user.  The  main  requirement  is  that  the  parameter 
will be difficult to fake. For example in a University system, the 
natural parameter is the student identifier. Then, the sentence that 
the application can run for a student whose id is 1 is: 
SELECT *  
FROM  Student_Marks_View(1) 
WHERE  Course_No = 12345 
Figure 6: example of parameterized view 
But this method is not safe, because it does not prevent the SQL 
injection  attack.  It’s  possible,  for  example,  to  insert  a  whole 
sentence instead of the course number:   12345 UNION Select * 
From  Student_Marks_View(2).  This  way  the  original  sentence 
will become: 
SELECT *  
FROM  Student_Marks_View(1)  
WHERE  Course_No = 12345 
UNION 
SELECT *  
FROM  Student_Marks_View(2)  
Figure 7: unsafe parameterized view with SQL injection 
So  although  it  may  appear  that  the  parameter  limits  the  access, 
SQL  injection  allows  to  retrieve  every  row  from  the  table; 
namely, access indirectly the entire list of grades.  
The solution to this problem as we shall see below is not to use 
the explicit user identity in the SQL statement but instead use a 
run-time generated identifier which will be very difficult to fake. 
We will present two such solutions to the parameter method: the 
first solution is based on a key of the application session and the 
second is based on the technique of a rolling code. 
5.  THE PARAMETER METHOD 
The  parameter  method  is  supposed  to  distinguish  between  the 
accesses  of  different  users.  There  are  two  types  of  web 
applications:  applications  that  do  not  demand  identification  and 
applications  which  demand  user’s 
the 
applications  that  demand  identification,  the  parameter  method 
transfers this identification to the database and the access control 
of  the  database  is  based  on  this  identification.  The  aim  of  most 
attackers  is  to  attack  the  data  of  other  users.  So  this  method 
enables prevention of these attacks. 
In  case 
the  user’s 
identification, the goal of our method is to prevent unauthorized 
accesses and to distinguish between the sessions of the different 
users. But this will be done without violating the privacy of the 
anonymous  user.  In  the  next  two  paragraphs  we  only  refer  to 
applications  that  demand  a  process  of  identification.  We  will 
detail  our  method  for  applications  that  do  not  demand  user’s 
identification in Section 5.3. 
5.1  The Application Session Key Based 
the  application  does  not  request 
identification.  For 
that 
Parameter Method        
This type of solution is similar to the challenge-response protocol. 
It uses a random number which is generated at the beginning of 
the  protocol  for  each  application  session,  and  is  sent  thereafter 
with each SQL statement. It also assumes that the database stores 
in an internal table the Ids of the active users. The protocol works 
in the following way: 
•  A user requests to perform a process of identification when 
she provides a username and a password to the application. 
The application runs a database stored procedure that accepts 
the  user’s  username  and  password  and  returns  a  random 
number (AS_key). 
The database stores the random number in a  table of active 
users, for example, as follows: 
• 
• 
Student_No 
Table 1: active users for AS key 
User
Jona
Mikes
Pass
$#Hj#45
*&SD12qF
AS_key
01100…
10010…
1 
2 
• 
• 
The application knows the user who works with it, and stores 
the AS_key as well. Each SQL sentence that will be run on 
behalf  of  the  user  will  be  run  with  a  parameter  of  user’s 
corresponding AS_key. 
The  AS_key  is  cleared  when  a  user  disconnects  from  the 
application. 
This way, when the SQL sentence arrives, the view returns only 
the data which belongs to the user with the given identifier. For 
example, the following view definition can be used: 
CREATE VIEW Student_Marks_View  
WITH  pAS_key 
SELECT * FROM Student_Marks_Table 
WHERE  Student_No IN 
  (SELECT  Student_No 
   FROM    Users_Table 
   WHERE   Users_Table.AS_key=:pAS_key) 
Figure 8: parameterized view for AS key 
This approach significantly decreases the range of possible attacks 
on databases. The intruder still can execute her attacks, but with 
parameterized views she cannot affect the data of different users. 
Let us return to figure 3 that represented the SQL injection into 
select statement from Salary table. With parameterized view, the 
select will look as follows: 
SELECT Salary  
FROM   Salary_View(11011…)  
WHERE  Salary_Date = ‘01/2007’  
OR  
Figure 9: parameterized view resistant to SQL injection 
‘1’ = ‘1’ 
Because  Salary_View  returns  only  the  data  of  the  specific 
employee  with  AS_key  11011..  and  this  must  be  the  key  of  an 
attacker  (if  not,  the  attacker  must  guess  the  parameter  and 
probability  of  this  is  very  small),  this  attack  affects  only  the 
attacker’s  data.  Namely,  the  attacker  may  access  information 
about  her  salary  from  different  months,  but  not  the  salary  of 
different employees. 
5.2 The Rolling Key Based Parameter Method 
This  solution  uses  a  rolling  key  or  a  rolling  code.  In  order  to 
understand  the  concept,  we  will  examine  the  alarm  systems  of 
vehicles which use a rolling key. Old alarms used remote controls 
that sent a signal each time that the driver locked or opened the 
vehicle. So the burglars knew to record the signal sent from the 
remote control and later to open the car by playing the previous 
recording. More sophisticated alarms use a rolling key in a way 
that  the  signal  is  changed  each  time  that  the  remote  control  is 
activated,  so  recording  the  signal  has  no  meaning.  Similar 
techniques  are  used  in  rolling  Secure-Ids  tokens  provided  for 
example by RSA. Our protocol works in the following way: 
• 
The  first  three  steps  are  similar  to  the  previous  parameter 
method based on the application session key, except that now 
AS_key also serves as the seed of the rolling key. 
• 
The  database  and  the  application  agree  on  a  common 
encryption  key  (Enc_key),  for  example  using  the  Diffie-
Hellman  protocol  [16].  This  encryption  key  is  used  to 
generate the next rolling key from the current one as will be 
explained  below.  (Note  that  in  most  cases,  the  web  server 
and  the  database  server  are  placed  on  separated  network 
segment so the man-in-the-middle attack against the Diffie-
Hellman is not possible. In other cases we can prevent such 
attack by encrypting the channel between the web server and 
the database server.) 
•  Now the active users table may look like in Table 2: 
Stdnt 
No 
1 
2 
Table 2: active users for rolling key 
AS 
key 
011…
001…
User 
Jona 
Mikes 
Enc
key 
001…
111…
Pass 
$#45
*&qF
Roll
key 
011…
001…
•  Now,  when  the  SQL  sentence  arrives,  it  contains  a  request 
for a parameterized view with 2 parameters: the AS_key and 
a rolling key. As a result, two things occur:  
1.  The  view  returns  the  filtered  data  that  belongs only  to 
the user that the session and rolling keys belong to. 
2.  The rolling key is advanced to the next number both in 
the application and in the database. 
:enc, :roll, :stdnt_no   
Users_Table 
AS_key = :pAS_key 
The database view can use a stored function to perform the 
above actions as illustrated in Figures 10 and 11: 
CREATE FUNCTION Authorize(pAS_key, 
 pRoll_key) AS 
Begin 
   SELECT    Enc_key,Roll_key,Student_No 
   INTO   
   FROM    
   WHERE   
   If roll == pRoll_key Then 
UPDATE Users_Table SET Roll_key = 
WHERE  AS_key = :pAS_key 
COMMIT 
RETURN :stdnt_no 
    Else 
       RETURN NULL 
    End If 
End
Compute_Next_Key(:enc,:roll) 
Figure 10: Authorize function definition 
CREATE VIEW Student_Marks_View  
WITH  pAS_key, pRoll_key 
SELECT * FROM Student_Marks_Table 
WHERE  STUDENT_NO =  
 Authorize(:pAS_key,:pRoll_key) 
Figure 11: definition of Student_Marks view 
The  auxiliary  function  Compute_Next_Key  receives  the 
encryption key and the last rolling key and computes the next 
rolling  key.  We  suggest  one  of  symmetric  encryption 
protocols  as  a  pseudo  random  number  generator:  The  next 
code  can  be  calculated  according  to  the  following  formula: 
Roll
_
Roll
(
_
,  where 
key
=+
m
1
EncE _
E
Enc
_