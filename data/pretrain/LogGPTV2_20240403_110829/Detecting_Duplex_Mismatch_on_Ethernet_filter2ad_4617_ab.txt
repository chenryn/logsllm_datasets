sent by H at time tH. This frame will be lost if and only if there exists a
frame sent by F at time tF such that
tH + ξ  c.
(iii) Excessive collision loss. A frame will be lost if a collision occurs more than
16 times when H attempts to retransmit the frame.
In addition, delays can be introduced by H waiting for the network to go idle
before sending and by retransmitting. The more traﬃc goes in the F → H
direction, the more traﬃc going in the H → F direction will be delayed.
3.2 Manifestation of Duplex Mismatch in the Case of UDP
Using UDP per se imposes no particular sending schedule. For the purposes of
producing veriﬁable predictions made by our model, the case of Poisson streams
is considered in this section; this case is easy to analyze and, therefore, the
veriﬁcation of the predictions will help validate the model.
Assume that two Poisson streams of frames are injected into the system for
transmission by the interfaces. The average rate of the streams are cF and cH (in
bits/second, as above). Since F never delays packets, the stream that leaves F
is Poisson. Let us consider the situation when cF (cid:2) c and cH (cid:2) c. In this case,
the stream leaving H is not disturbed to a large extent and can be approximated
by a Poisson stream.
Our model then predicts loss in F → H direction, pF , to be
pF =
cH
c
.
(4)
3 For attempt n, the delay is a uniformly distributed pseudo-random integer between
0 and 2min(n,10) − 1, multiplied by slot time.
140
S. Shalunov and R. Carlson
In the H → F direction, since cF + cH (cid:2) c, buﬀer overrun loss will never
occur (cf. condition 3). Excessive collision loss rate, (cF /c)16, will be negligible.
Further, denote the size of packets that leave H by m. We have:
(cid:1)
(cid:2)
cH
c max
0, 1 − cξ
m
pH =
(5)
Note: Formula 5 allows one to measure ξ externally by observing max(0, 1−cξ/m)
(the proportion of bits in frames sent by H that are transmitted later than
ξ seconds after start of frame transmission).
.
3.3 Manifestation of Duplex Mismatch in the Case of TCP
TCP is a reliable transport protocol that uses ack packets to control the ﬂow
of data between two Internet nodes. Only unidirectional TCP data ﬂows with
acks ﬂowing in the opposite direction are considered. Denote the interface on
whose side the TCP sender is located S, and the interface on whose side the TCP
receiver is located R.4 In bulk transfer mode, a stream of MTU-sized packets
will go from S to R and a stream (with typically half as many packets per second
when delayed acks are used) of small packets containing TCP acks will go from
R to S. Acks are cumulative: if an ack is lost and a subsequent ack is delivered,
the same information is conveyed (and the eﬀect of the missed increment of the
TCP congestion window is minimized). Denote the period of time it takes the
receiver to generate an ack, and for this ack to reach interface R, by ∆.
Since, with TCP, packets ﬂow in both directions, there is a potential for
collisions and loss during normal TCP operation on a link with duplex mismatch.
Consider the case when TCP is not in a timeout state and congestion window
is not too small (at least a few packets). If the network path between the sender
and the receiver does not contain any tight links, then the arrival of several
back-to-back TCP data packets should cause a collision and a loss event will
occur.
For simplicity, consider two cases where a single duplex mismatch condition
exists on the last hop of the network path (e.g., next to the user’s computer):5
1. S = F , R = H: The interface R will obey the CSMA/CD protocol and
refrain from transmitting while a frame is being received. It will also detect
and re-transmit frames when collisions occur using the proper collision slot
time (deﬁned in 2.1). The interface S will follow the full-duplex protocol
and transmit frames whenever they become available without checking for
frames on the receive circuit. Collisions will be ignored by S and the entire
packet transmission time m/c will always be used.
4 Note that S and R are not the sender and receiver, but rather the two interfaces
on the sides of a link with duplex mismatch. Often, S could be on the sender or R
could be on the receiver, but for both to be true, the network path would need to
consist of exactly one layer-2 hop.
5 Only data and ack packets from a single TCP ﬂow are considered.
Detecting Duplex Mismatch on Ethernet
141
When gaps between data packets are wider than ∆, ack packets will be
transmitted and will arrive at the sender for processing by the TCP stack.
When gaps between data packets are less than ∆, a collision could occur.
Consider the case during slow start when the congestion window (cwnd) on
the sender reaches four packets; the sender could have four data packets to
transmit back-to-back. After receiving two data packets, the receiver would
generate an ack. The interface R will receive this ack in time ∆, attempt
to transmit it to S, and ﬁnd that S is currently transmitting the third data
packet, so R will delay the ack’s transmission. When this frame’s transmis-
sion completes, both R and S will wait an IFG time and simultaneously begin
to transmit (the fourth data packet and the ack packet) causing a collision
to occur. R will detect this collision and re-schedule another retransmission,
but S will continue to blindly send the entire frame. This frame will be dis-
carded by R as corrupted due to the collision. The sender will detect and
handle this loss event.
In general, whenever cwnd on the sender increases enough to allow for
a burst of at least four packets to arrive at the receiver, the ack generated
in response to the ﬁrst or second data packet in the burst will allow the
next packet to be delivered, but will cause all subsequent packets in the
burst to be lost; the ack itself will be delivered to S after the burst. TCP
would thus suﬀer from both inability to raise cwnd and timeouts caused
by multiple packet losses in a single RTT (whenever cwnd becomes large
enough). Empirically, TCP infrequently enters slow start in this case, since
cwnd remains small enough; the goodput obtained is thus better than that
in case 2.
The large number of lost data packets will cause the receiver to generate
a large number of duplicate acks. Thus, the TCP source node will receive a
larger number of ack packets than would normally be expected in a delayed
ack environment.
2. S = H, R = F : Consider the case where a burst of packets arrives at S
so that the next frame is ready to begin transmission before the previous
frame ends. The ﬁrst two data packets will arrive at the receiver, which will
generate an ack packet. This packet will be transmitted during the receipt
of the third data packet if ∆ is small enough. The switch will detect the
collision and abort the data transer, but the ack packet will be lost. If
∆ < ξ, then the data packet will be resent by S; otherwise, it will be lost.
This loss of acks not only has a detrimental eﬀect on TCP throughput by
reducing the number of increments of cwnd, but also creates a situation
when the last ack for a burst is not received, thus causing the sender to
timeout and reenter slow start.
The large number of lost ack packets will mean that the sender will see
fewer acks then would otherwise be expected (about one ack per burst).
142
S. Shalunov and R. Carlson
4 Validation of Predictions
To validate the model of section 3, we create the duplex mismatch condition
artiﬁcially, send test traﬃc, and compare the results with predictions.
4.1 Validation with UDP Streams
Since the loss pattern created by duplex mismatch is complex, it is easier to
analyze ﬁrst the results with simple synthetic traﬃc consisting of UDP packets.
Our model makes the following predictions (see section 3.2):
1. Unidirectional traﬃc (in either direction) will not suﬀer any loss;
2. When a small amount of traﬃc is sent in each direction as a Poisson stream,
loss is given by formulae 4 and 5.
Our UDP tests were run with a program thrulay (using option -u), which
had UDP mode added for the purposes of conducting these experiments.6 A
duplex mismatch condition was artiﬁcially created between a Linux host and
an Ethernet switch with mii-tool. A series of bidirectional 10-second UDP
tests were conducted between the host with the duplex mismatch condition and
another host connected to the same Ethernet switch. Both hosts were connected
at 100 Mb/s. The host without duplex mismatch was connected using full duplex.
The sending rate was varied from 1 Mb/s to 9 Mb/s on each side in 1-Mb/s
increments; 81 tests were run.
The results of these experiments are presented in ﬁgures 1 and 2. In ﬁgure 1,
the line predicted by equation 4, on which data points are expected to fall, is
shown; as can be seen, the match is quite good. In ﬁgure 2, data points for
any given value of cH are expected (in accordance with equation 5) to fall on
a horizontal line, which generally agrees with the observations. Prediction 2
thus holds. In might be of interest that indirectly, the value of ξ (inherent in
the Ethernet implementation of the HP switch we used in this experiment) is
measured here and it appear that the value is quite small—perhaps as small as
allowed by the standard.7
loss was observed during these tests, thus verifying prediction 1.
In addition, we conducted tests in each direction without opposing traﬃc; no
Formula 4 was only proven for cH (cid:2) c and cF (cid:2) c. However, empirically
(data not presented in this paper), this formula extends to values of cF /c as
large as 0.3 or even 0.4 and values of cH /c as large as 0.5.
6 Many network testing programs allow the use of a UDP mode. However, we found
no program that would generate a Poisson streams of packets that are sent with no
correlation with operating system’s time slice boundaries. Our tool can use a busy-
wait loop on the TSC timing register to eﬀect a true Poisson stream. The program
is made freely available at http://www.internet2.edu/~shalunov/thrulay/.
7 The best match for the value of the term max
is about 0.93. For these
tests, we had m = 1518 B; therefore, ξ was large enough to cover about 106 B of
each packet.
0, 1 − cξ
(cid:3)
(cid:4)
m
Detecting Duplex Mismatch on Ethernet
143
Fig. 1. Loss probability pF in the stream in F → H direction as a function of cH, the
rate of the stream going in the opposite direction. The prediction is based on equation 4
Fig. 2. Loss probability pH in the stream in H → F direction as a function of cH, the
rate of the stream
144
S. Shalunov and R. Carlson
4.2 Validation with TCP Streams