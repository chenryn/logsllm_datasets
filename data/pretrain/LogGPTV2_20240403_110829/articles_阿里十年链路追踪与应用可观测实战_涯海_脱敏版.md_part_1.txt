### 阿里巴巴十年链路追踪与应用可观测实战
- 日期：2021年11月27日
- 主讲人：夏明（涯海）

#### 个人简介
- **教育背景**：硕士毕业于华中科技大学。
- **工作经历**：
  - 2016年加入阿里巴巴中间件团队，参与EagleEye项目。
  - 2019年在GitHub上发起StabilityGuide稳定性专栏。
  - 2020年担任阿里巴巴中间件双十一大促队长。
  - 目前负责阿里云ARMS产品的开发与设计。

#### 关键技术及产品
- **EagleEye**：国内最早的链路追踪系统之一。
- **StabilityGuide**：GitHub上的稳定性领域知识库。
- **ARMS**：阿里云全栈可观测产品。

#### 阿里巴巴服务端架构与应用可观测能力演进
- **2011-2013年**：微服务化，推出EagleEye 1.0，具备单请求回溯和分析能力。
- **2013-2016年**：DevOps/运维自动化，发布EagleEye 2.0，支持无侵入业务埋点与染色能力。
- **2016-2017年**：业务中台化，推出EagleEye 3.0和ARMS 1.0，实现事前预防、事中监控、事后复盘功能，具备日志、指标、链路三位一体的能力。
- **2017-2019年**：IaaS核心系统上云，发布ARMS 2.0，向上连接用户体验，向下连接容器与云服务基础设施。
- **2019-2021年**：云原生全面升级，推出ARMS 3.0，具备自动化诊断能力、多语言无侵入埋点及去中心化计算能力。

#### 分享大纲
1. **微服务架构下的分布式链路追踪挑战**：
   - 在大型企业如何进行冷启动和规模化推广？（EagleEye 1.0 - EagleEye 2.0建设经验）
   - 如何解决大规模探针的持续管理以及随之而来的稳定性问题？
   - 如何解决项目初期成本与收益问题？
   - 如何解决最后一公里问题定位？
   - 如何建立告警响应与协同机制？

2. **如何通过应用可观测技术赋能业务**：
   - 通过应用可观测技术更好地解决业务稳定性挑战。（ARMS 1.0 - ARMS 2.0建设经验）

3. **云原生时代可观测技术的趋势和技术选型**：
   - 介绍ARMS 3.0的建设经验。

#### 微服务架构下的分布式链路追踪挑战
- **冷启动和规模化推广**：如何在大型企业中进行有效的链路追踪系统的部署和推广？
- **大规模探针管理与稳定性保证**：应对中间件客户端和微服务治理技术的快速演进，每月对探针进行一次升级。80%的探针引发故障源于内存泄漏或异常。
- **项目初期成本与收益**：识别有价值的数据，采用热数据短时全量存储和冷数据错慢定制存储策略，降低成本。
- **最后一公里问题定位**：结合多维度数据（如调用链、指标、日志、事件、方法栈等）综合分析，定位生产环境中的复杂问题。
- **建立告警响应与协同机制**：通过三个阶段（起步、爆发、应急协同）构建高效的告警响应体系。

#### 大规模探针管理与稳定性保证
- **第一代技术（Fat Jar Pandora）**：解决大规模场景下的中间件安装、配置管理和升级问题，但仅限于阿里中间件客户端，开源客户端支持有限。
- **第二代技术（Java Agent ARMS）**：通过字节码增强，植入中间件埋点和微服务路由，实现端侧监管控一体化。兼容近五年的主流中间件客户端，并与容器服务（ACK, ASK）、函数计算（FC）、应用托管（SAE, EDAS）高度集成。集成RASP安全防护能力和InitContainer自动注入与升级功能，通过灰度规则实现多版本管控。

#### 解决项目初期成本与收益问题
- **识别有价值的数据**：采用热数据短时全量存储和冷数据错慢定制存储策略，降低成本。通过Tail-based Sampling和边缘计算预聚合进一步优化存储成本。
- **热数据实时分析**：30分钟全量调用链实时查询与分析，满足在线诊断需求。
- **冷数据精准采样**：根据链路特征自定义采样策略，只持久化存储需要的调用链（如错慢调用），大幅降低存储成本。
- **监控指标客户端预聚合**：在业务应用容器内进行指标预聚合，确保监控告警数据的准确性不受调用链采样率影响。

#### 最后一公里问题定位
- **多维条件过滤**：根据多维组合条件筛选关键链路特征，如特定接口、IP、业务标签等。
- **上下游请求回溯**：查看调用链详情（含参数、SQL语句等），分析上下游调用关系，定位瓶颈节点。
- **关联业务日志**：查看异常调用相关联的业务日志，如业务错误码、订单ID等，分析业务行为或轨迹。
- **方法栈追踪**：查看慢调用本地方法堆栈，定位耗时高的代码行，及时优化。
- **综合诊断定位**：结合内存诊断、日志分析、线程池监控、在线Profiling工具（如Arthas）等综合定位根因。

#### 建立告警响应与协同机制
- **起步阶段（0到1）**：沉淀通用的应用/容器/中间件告警模板，一键快速构建预警能力。
- **爆发阶段（N到1）**：集成多种告警源数据，提炼风险信息，简化应急流程。
- **应急协同**：通过ChatOps等方式实现高效的告警响应与协同机制。