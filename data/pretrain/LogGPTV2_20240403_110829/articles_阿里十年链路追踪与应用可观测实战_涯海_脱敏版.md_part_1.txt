阿⾥里里⼗十年年链路路追踪与应⽤用可观测实战
- 2021/11/27
夏明（涯海海）
个⼈人简介
•
夏明（涯海海），硕⼠士毕业于华中科技⼤大学。
•
2016 EagleEye
年年加⼊入阿⾥里里巴巴中间件 团队。
•
2019 GitHub StabilityGuide
年年发起 稳定性专栏 。
•
2020
年年担任阿⾥里里中间件双⼗十⼀一⼤大促队⻓长。
•
ARMS
⽬目前从事阿⾥里里云 产品的开发与设计。
EagleEye StabilityGuide 中间件⼤大促队⻓长 ARMS
GitHub 稳定性领域知识库 业务视⻆角观察⼤大促稳定性与备战 阿⾥里里云全栈可观测产品
国内最早的链路路追踪系统之⼀一
2016年年 2019年年 2020年年 2021年年
阿⾥里里巴巴服务端架构与应⽤用可观测能⼒力力演进
代表产品 核⼼心能⼒力力
2011-
微服务化
2013
EagleEye 1.0 .
单请求回溯能⼒力力，基于单请求的分析能⼒力力
2013-
DevOps/
运维⾃自动化
2016
EagleEye 2.0 APM
具备⽆无侵⼊入的业务埋点与染⾊色能⼒力力，基础 能⼒力力。
2016-
业务中台化
2017
EagleEye 3.0 实现完备的应⽤用侧事前预防、事中监控、事后复盘功能；
/ ARMS 1.0
具备⽇日志、指标、链路路三位⼀一体的能⼒力力。
2017-
IaaS
核⼼心系统 上云
2019
ARMS 2.0
向上连接⽤用户体验、向下连接容器器与云服务基础设施。
2019-
云原⽣生全⾯面升级
具备⾃自动化诊断能⼒力力，多语⾔言⽆无侵⼊入埋点，以及全⾯面升级的
2021
ARMS 3.0
去中⼼心化计算能⼒力力。
分享⼤大纲
•
微服务架构下的分布式链路路追踪挑战，在中⼤大型企业如何进⾏行行冷启动和规模化推⼴广？
EagleEye 1.0 - EagleEye 2.0
（ 建设经验）
•
如何向上赋能业务，通过应⽤用可观测技术更更好解决业务稳定性挑战。
ARMS 1.0 - ARMS 2.0
（ 建设经验）
•
云原⽣生时代可观测技术的趋势和技术选型。
ARMS 3.0
（ 建设经验）
微服务架构下的分布式链路路追踪挑战
•
在中⼤大型企业如何进⾏行行冷启动和规模化推⼴广？
•
如何解决⼤大规模探针的持续管理理以及随之⽽而来的稳定性问题？
•
如何解决项⽬目初期成本与收益问题？
•
如何解决最后⼀一公⾥里里问题定位？
•
如何建⽴立告警响应与协同机制？
⼤大规模探针管理理与稳定性保证，以及与微服务管控⾯面的集成
•
⼤大规模探针管理理挑战
•
为应对中间件客户端、微服务治理理技术演进，平均每个⽉月要对探针做⼀一次升级。
• 80%
探针引发的故障来⾃自于埋点造成的内存泄漏漏或异常。
•
全链路路微服务治理理能⼒力力，⾼高度依赖链路路标记透传，⾼高质量量埋点是基础。
• Fat Jar Pandora
第⼀一代 技术：
• Java
解决⼤大规模场景下的 中间件安装、配置管理理与升级问题。
•
仅限于阿⾥里里中间件客户端，受限的开源客户端⽀支持能⼒力力。
•
⽀支持批量量版本检测与发布卡点。
• Java Agent ARMS
第⼆二代 技术：
•
通过字节码增强，植⼊入中间件埋点、微服务路路由，实现端侧
监管控⼀一体化。
•
对近五年年的主流中间件客户端全⾯面兼容。
• ACK, ASK
与应⽤用托管服务的⾼高度集成，如容器器服务（ ）
FC SAE EDAS
函数计算（ ），应⽤用托管（ ， ）。
• RASP
集成应⽤用级别安全防护能⼒力力（ ）。
• InitContainer
通过 实现探针⾃自动注⼊入与升级。
•
通过灰度规则实现多版本管控。
如何解决项⽬目初期成本与收益问题？
•
识别什什么是有价值的数据？
热数据（默认30分钟）
链 链
路路 路路
数 数
•
热数据短时全量量存储
据 据
•
冷数据错慢定制存储
价 价
值 值
分钟 ⼩小时 天 ⽉月 分钟 ⼩小时 天 ⽉月
数 数
据 据
存 存
储 储
费 费
⽤用 ⽤用
分钟 ⼩小时 天 ⽉月 分钟 ⼩小时 天 ⽉月
常规存储 冷数数据分离存储
+Tail-based Sampling +
边缘计算（预聚合 ） 冷热数据分离
• vs 3~10
全量量存储 按需存储，成本约下降 倍！
• 热数据实时分析：30 分钟全量量调⽤用链实时查询&
分析，满⾜足在线诊断需求。
• Tail-based Sampling
冷数据精准采样：根据链路路特征⾃自定义采样策略略（ ），只持久化存储需要的调⽤用链（⽐比如错慢调⽤用），⼤大幅降低存储成本。
•
监控指标客户端预聚合：在业务应⽤用容器器内进⾏行行指标预聚合，监控告警的数据准确度不不受调⽤用链采样率影响，低成本实现精准统计。
最后⼀一公⾥里里问题定位
⽣生产环境的复杂性，⽆无法仅通过调⽤用链定位根因，需要结合关联的指标、⽇日志、事件、⽅方法栈等多维度数据综合分析。
1.
多维条件过滤
•
根据多维组合条件，筛选影响性能或稳定性的关键链路路特征，
IP
⽐比如特定接⼝口、 、业务标签等。
2.
上下游请求回溯
• SQL
查看调⽤用链详情（含参数、 语句句等），分析上下游调⽤用关系，
定位瓶颈节点。
3.
关联业务⽇日志
• ID
查看异常调⽤用相关联的业务⽇日志，⽐比如业务错误码、订单 等，
分析业务⾏行行为或轨迹。
4.
⽅方法栈追踪
•
查看慢调⽤用本地⽅方法堆栈，定位耗时⾼高的代码⾏行行，及时优化。
5.
综合诊断定位
• GC
如果上述信息还不不⾜足以定位根因，还可以通过内存诊断、 ⽇日志
Profiling Arthas
分析、线程池监控、在线 （如 ）等⼯工具结合定位。
建⽴立告警响应与协同机制
• “ ”
告警建设的的 三个阶段
• “0 到1”
起步阶段：沉淀通⽤用的应⽤用/ 容器器/
中间件告警模板，⼀一键快速构建预警能⼒力力，解决 的问题。
• “N 到1”
爆发阶段：集成多种告警源数据，提炼⻛风险信息，简化应急流程，解决 的问题。
• “ 应急协同”
ChatOps