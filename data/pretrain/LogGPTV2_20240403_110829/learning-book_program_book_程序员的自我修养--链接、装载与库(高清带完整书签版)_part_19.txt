宏定义名
值
说明
STT_NOTYPE
0
未知类型符号
STT_OBJECT
1
该符号是个数据对象，比如变量、数组等
STT_FUNC
2
该符号是个函数或其他可执行代码
STT_SECTION
3
该符号表示一个段，这种符号必须是STB_LOCAL的
该符号表示文件名，一般都是该目标文件所对应的源文件名，
STT_FILE
它一定是STB_LOCAL类型的，并且它的 su_shndx一定是
SHN_ABS
符号所在段（st_shndx）如果符号定义在本目标文件中，那么这个成员表示符号所在的
段在段表中的下标：但是如果符号不是定义在本日标文件中，或者对于有些特殊符号，
sh_shndx的值有些特殊，如表3-17所示。
表3-17
符号所在段特殊常量
宏定义名
值
说明
S8VNHS
Oxfff1
表示该持号包含了一个绝对的值，比如表示文件名的符号就属
于这种类型的
表示该符号是一个“COMMON块”类型的符号，一般来说，
SHN_COMMON
0xfff2
未初始化的全局舒号定义就是这种类型的，比如
SimpleSection.o 卫面的 global_uninit_var, 有关*COMMON"
详见“深入静态链接”之“COMMON块”
SHN_UNDEF
表示该符号未定义，这个符号表示谊杆号在本目标文件被引用
0
到、但是定叉在其他目标文件中
符号值（st_value）我们前面已经介绍过，每个符号都有一个对应的值，如果这个符
号是一个函数或变量的定义，那么符号的值就是这个函数或变量的地址，更准确地讲应该按
下面这儿种情况区别对待。
在目标文件中，如果是符号的定义并且该符号不是“COMMON块”类型的（即st_shndx
程序员的自我修养一链接、装载与库
---
## Page 107
84
第3章目标文件里有什么
不为SHN_COMMON，具体请参照“深入静态链接”一章中的“COMMON块”），则
sL_value表示该符号在段中的偏移。即符号所对应的函数或变量位于由s_shndx指定的
段，偏移st_value的位置。这也是目标文件中定义全局变量的符号的最常见情况，比如
_eneqo8 ueu_ 1oung,。  ouoagadus
在目标文件中，如果符号是“COMMON块”类型的（即st_shndx为SHN_COMMON），
则st_value 表示该符号的对齐属性。比如 SimpleSection.o 中的“global_uninit_var”。
在可执行文件中，s_value表示符号的虚拟地址。这个虚拟地址对于动态链接器来说十
分有用。我们将在第3部分讲述动态链接器。
根据上面的介绍，我们对ELF文件的符号表有了大致的了解，接着将以SimpleSection.o
里面的符号为例子，分析各个符号在符号表中的状态。这里使用readelf工具来查看ELF文
件的符号，虽然objdumpT具也可以达到同样的目的，但是总体来看readelf的输出格式更
为清晰：
$ readelf -s SimpleSection.o
Symbol table ',symtab* contains 15 entries:
Num:
Value
Size
Type
Bind
Vi8
DEFAULT
Ndx Name
00000000:0
1 :
NOTYPE LOCAL
00000000
FILE
LOCAL
DEFAULT
ABS SimpleSectiin.c
UND
00000000
0
U
SECTION LOCAL
DEFAULT
00000000
SECTION LOCAL
SECTION LOCAL
DEFAULT
00000000
DEFAUL/T
3
4 :
00000000
n
SECTION
LOCAL
DEFAULT
4
5:
00000000
OBJECT
LOCAL
DEFAULT
4 static_var2.1534
7:
:9
00000004
4
OBJECT
LOCAL
DEFAUL/T
3 static_var,1533
8 :I
00000000
SECTION
SECTION LOCAL
LOCAL
DEFAULT
9: 00000000
DEFAULT
10 :
00000000
0
OBJECT
GLOBAL
DEFAULT
3 global_init_var
6
00000000
27
4
11 :
FUNC
GLOBAL
DEFAULT
UND printf
1func1
:ZT
00000000
0000001b
0
NOTYPE
FUNC
GLOBAL
GLOBAL
DSFAULT
14: 00000004
64
OBJECT
GLOBAL DEFAULT COM global_uninit_var
DEFAULT
1 main
4
readelf的输出格式与上面描述的 EIf32_Sym的各个成员儿乎一对应，第一列Num表
示符号表数组的下标，从0开始，共15个符号：第二列Value就是符号值，即st_value：第
三列Size为符号大小，即st_size：第四列和第五列分别为符号类型和绑定信息，即对应st_info
的低4位和高28位：第六列Vis目前在C/C++语言中未使用，我们可以暂时忽略它：第七
列Ndx即 st_shndx，表示该符号所属的段：当然最后一列也驳明暴，即符号名称。从上面的
输出可以看到，第一个符号，即下标为0的符号，永远是一个未定义的符号。对于另外几个
符号解释如下。
·func1和 main函数都是定义在SimpleSection.c里面的，它们所在的位置都为代码段，
所以 Ndx为1，即 SimpleSection.o 果面，text 段的下标为 1.这一点可以通过 readelfa
程序员的自我修养一链接、装载与库
---
## Page 108
3.5链接的接口——符号
85
或objdump-x得到验证。它们是函数，所以类型是STT_FUNC：它们是全局可见的，
所以是STB_GLOBAL：Size表示函数指令所占的字节数：Value表示函数相对于代码
段起始位置的偏移量。
·再来看printf这个符号，该符号在 SimpleSection.c里面被引用，但是没有被定义。所以
它的 Ndx 是 SHN_UNDEF。
·global_init_var是已初始化的全局变量，它被定义在.bss 段，即下标为3。
global_uninit_var是未初始化的全局变量，它是一个 SHN_COMMON类型的符号，它
本身并没有存在于BSS段：关于未初始化的全局变量具体请参见“COMMON块”。
static_var.1533 和l static_var2.1534 是两个静态变量，它们的绑定属性是 STB_LOCAL，
饰”中将会详细介绍。
·对于那些STT_SECTION类型的符号，它们表示下标为Ndx的段的段名。它们的符号
名没有显示，其实它们的符号名即它们的段名。比如2号符号的Ndx为1，那么它即
可以清楚地看到这些段名符号。
·“SimpleSection.e”这个符号表示编译单元的源文件名。
3.5.2特殊符号
当我们使用d作为链接器来链接生产可执行文件时，它会为我们定文很多特媒的符号，
这些符号并没有在你的程序中定义，但是你可以直接声明并且引用它，我们称之为特殊符号。
节中会再来回顾这个问题。目前你只须认为这些符号是特殊的，你无须定文它们，但可以声
明它们并且使用。链接器会在将程序最终链接成可执行文件的时候将其解析成正确的值，注
意，只有使用链接生产最终可执行文件的时候这些符号才会存在。儿个很具有代表性的
特殊符号如下。
·
_executable_star，该符号为程序起始地址，注意，不是入口地址，是程序的最开始的
地址。
·_ctext或_etext或elext，该符号为代码段结束地址，即代码段最末尾的地址。
·_edata或edata，该符号为数据段结束地址，即数据段最末尾的地址。
·_end或end，该符号为程序结束地址。
以上地址都为程序被装载时的虚拟地址，我们在装较这一章时再来回顾大于程序被装
载后的虚拟地址。
程序员的自我修养一链接、装载与库
---
## Page 109
86
第3章目标文件里有什么
我们可以在程序中直接使用这些符号：
/ *
* Specia1Symbo1.c
#include 
* /
extern char _executable_start []:
extern char edata[1, _edata[] ;
etext [];
extern char end[]。 _end [] ;
int main()
printf(*Executable Start ex\n*, _executable_start);
printf(*Text End $x $x ex\n*, etext, _etext, _etext) 1
print f (*Data End x &X\n*, edata, _edata) ;
printf (*Executable End $X $x\n*, end. _end) :
return 0;
$ gcc Specialsymbol.c -o SpecialSymbol
$./SpecialSymbol
Executable Start 8048000
Data Bnd 804963C 804963C
Text End 8048404 80484D4
80464D4
Executab1e End 8049640 8049640
另外还有不少其他的特殊符号，在此不一一列举了，它们跟Id的链接脚本有关。其体
请参阅本书第7章的“链接过程控制”。
3.5.3符号修饰与函数签名
约在20世纪70年代以前，编译器编译源代码产生目标文件时，符号名与相应的变量和
函数的名字是一样的。比如一个汇编源代码里面包含了一个函数foo，那么汇编器将它编译
成目标文件以后，foo在日标文件中的相对应的符号名也是foo。当后来UNIX平台和C语
言发明时，已经存在了相当多的使用汇编编写的库和目标文件，这样就产生了一个问题，那
就是如果一个C程序要使用这些库的话，C语言中不可以使用这些库中定义的函数和变量
的名字作为符号名，否则将会跟现有的目标文件冲突。比如有个用汇编编写的库中定义了一
个函数叫做main，那么我们在C语言里面就不可以再定义一个main函数或变量了。同样的
道理，如果一个C语言的目标文件要用到一个使用Fortran语言编写的目标文件，我们也必
须防止它们的名称冲突。
为了防止类似的符号名冲突，UNIX下的C语言就规定，C语言源代码文件中的所有全
局的变量和函数经过编译以后，相对应的符号名前加上下划线“_”。面Fortran语言的源代
程序员的自我修养——链接、装载与库
---
## Page 110
3.5链接的接口—特号
87
码经过编译以后，所有的符号名前加上“_”，后面也加上“_”。比如一个C语言函数“foo”
那么它编译后的符号名就是“_foo”：如果是Fortran语言，就是“_foo_”。