# Lua程序逆向之Luajit字节码与反汇编
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
#
## 传送门
[Lua程序逆向之Luajit文件格式](https://www.anquanke.com/post/id/87281)
## 简介
`Luajit`的字节码设计与指令的反汇编有很多值得学习的地方。`Luajit`除了将`Lua`原生40条左右的指令扩展到了93条（`Luajit`版本2.0.5）外，还更改了字节码中Opcode与操作数的排列方式，可以说，`Luajit`使用了一种完全全新的方式来编译与执行Lua程序。经过处理后的`Luajit`程序，字节码的编码实现更加简单，执行效率也比原生`Luac`指令更加高效。
## 指令格式分析
`Luajit`很多情况下需要与系统底层打交道，为了方便开发人员扩展与使用`Luajit`，在指令的设计细节上，`Luajit`官方提供了一份完整的指令参考文档。地址是：`http://wiki.luajit.org/Bytecode-2.0`。文档中详细说明了指令的编码格式与各条指令的含义。
首先是指令的编码，`Luajit`指令同样采用等长的32位，指令分为`Opcode`与操作数域两个部分，则每个域占用8字节，如下所示：
    /* Bytecode instruction format, 32 bit wide, fields of 8 or 16 bit:
    **
    ** +----+----+----+----+
    ** | B  | C  | A  | OP | Format ABC
    ** +----+----+----+----+
    ** |    D    | A  | OP | Format AD
    ** +--------------------    ** MSB               LSB
    **
    ** In-memory instructions are always stored in host byte order.
    */
这样做的好处显而易见，在处理32位指令数据时，对于每次只能处理8位的处理器来说，这种对齐后的优化，会减少处理器取指令时的运算周期，提高了指令的执行效率。`Luajit`只支持`ABC`与`AD`两种指令编码形式，其中，`A`、`B`、`C`各占8位，`D`占用16位。在编写解码程序时，代码部分比起`Luac`会简单许多。
###  Luajit OpCode
根据定义规则，每条指令最多拥有3个操作数，最少拥有1个操作数。指令的定义可以在`Luajit`源码的lj_bc.h头文件中找到。指令的声明部分采用宏定义，片断如下：
    #define BCDEF(_) 
      /* Comparison ops. ORDER OPR. */ 
      _(ISLT,    var,    ___,    var,    lt) 
      _(ISGE,    var,    ___,    var,    lt) 
      _(ISLE,    var,    ___,    var,    le) 
      _(ISGT,    var,    ___,    var,    le) 
      ......
        _(FUNCF,    rbase,    ___,    ___,    ___) 
      _(IFUNCF,    rbase,    ___,    ___,    ___) 
      _(JFUNCF,    rbase,    ___,    lit,    ___) 
      _(FUNCV,    rbase,    ___,    ___,    ___) 
      _(IFUNCV,    rbase,    ___,    ___,    ___) 
      _(JFUNCV,    rbase,    ___,    lit,    ___) 
      _(FUNCC,    rbase,    ___,    ___,    ___) 
      _(FUNCCW,    rbase,    ___,    ___,    ___)
    /* Bytecode opcode numbers. */
    typedef enum {
    #define BCENUM(name, ma, mb, mc, mt)    BC_##name,
    BCDEF(BCENUM)
    #undef BCENUM
      BC__MAX
    } BCOp;
所有的指令都使用`BCOp`表示，`BCDEF(BCENUM)`经过宏展开后，会声明每一条`LuaJit`指令。从声明中可以看出，指令由以下五部分组成：
  1. name。指令的名称，展开后指令名如`BC_ISLT`、`BC_ADDVV`。
  2. ma。指令第一个操作数域，展开后是一个`BCMode`类型常量。
  3. mb。指令第二个操作数域，展开后是一个`BCMode`类型常量。
  4. mc。指令第三个操作数域，展开后是一个`BCMode`类型常量。
  5. mt。指令的类型，展开后是一个一个`MMS`类型常量。
宏声明中的“`___`”展开后是`BCM___`，它被定义为`BCMnone`，即这个域为空，它是`BCMode`的一部分，稍后再讲。
指令列表中，有些指令有添加上一个或多个字符的后缀，来标识指令操作数的类型。它们的取值包括：
  * V variable slot。变量槽。
  * S string constant。字符串常量。
  * N number constant。数值常量。
  * P primitive type。原始类型。
  * B unsigned byte literal。无符号字节字面量。
  * M multiple arguments/results。多参数与返回值。
除了后缀外，部分指令还会有一些约定俗成的前缀，用来标识指令操作的目标数据的类型。例如：
  * T table。表。
  * F function。函数。
  * U UpValue。上值。
  * K constant。常量。
  * G global。全局。
例如，指令`USETS`是为一个UpValue设置字符串值；指令`TGETV`是获取一个表结构中指定索引的数据。
### `BCMode`
`ma`、`mb`、`mc`展开后是一个`BCMode`类型常量。它们的定义如下：
    typedef enum {
        BCMnone=0, 
        BCMdst, 
        BCMbase, 
        BCMvar, 
        BCMrbase, 
        BCMuv,
        BCMlit, 
        BCMlits, 
        BCMpri, 
        BCMnum, 
        BCMstr, 
        BCMtab, 
        BCMfunc, 
        BCMjump, 
        BCMcdata,
        BCM_max
    } BCMode;
当这3个标志的值都不为`BCMnone`时，表示当前指令使用三个操作数，例如`ADDVV`指令声明如下：
    _(ADDVV,    dst,    var,    var,    add)
展开后，变成了：
    BC_ADDVV,    BCMdst,    BCMvar,    BCMvar,    MM_add
即3个操作数都有用到，对于指令0xbbccaa1e，解析它可得知，最低8位0x1e表示为`ADDVV`指令，并且操作数A = 0xaa，B = 0xbb，C
= 0xcc。
对于少于3个操作数的情况，即`ma`、`mb`、`mc`中有1个或2个被设置成`BCMnone`，这种情况即为`AD`模式，如果只有一个操作数，则取A部分即可，如果有两个操作数，则取指令高16位为`CD`作为指令的第二个操作数。如指令0x10047，0x47表示它为`RET0`指令，它的指令声明如下：
    _(RET0,    rbase,    ___,    lit,    ___)
可见，其`mb`为`BCMnone`，，表示第二个操作数不占位，即第三个操作数可以与第二合并为`CD`。此时，第一个参数值A取值为0，第（二/三）个参数CD取值为1，即解析后的指令格式为“`RET0
0 1`”。
### `MMS`
`MMS`为指令的类型，它在`Luajit`源码的lj_obj.h头文件中通过宏定义为如下：
    #define MMDEF(_) 
      _(index) _(newindex) _(gc) _(mode) _(eq) _(len) 
      /* Only the above (fast) metamethods are negative cached (max. 8). */ 
      _(lt) _(le) _(concat) _(call) 
      /* The following must be in ORDER ARITH. */ 
      _(add) _(sub) _(mul) _(div) _(mod) _(pow) _(unm) 
      /* The following are used in the standard libraries. */ 
      _(metatable) _(tostring) MMDEF_FFI(_) MMDEF_PAIRS(_)
    typedef enum {
    #define MMENUM(name)    MM_##name,
    MMDEF(MMENUM)
    #undef MMENUM
      MM__MAX,
      MM____ = MM__MAX,
      MM_FAST = MM_len
    } MMS;
展开后，定义如下：
    typedef enum {
        MM_index=0, MM_newindex, MM_gc, MM_mode, MM_eq, MM_len, 
        MM_lt, MM_le, MM_concat, MM_call, 
        MM_add, MM_sub, MM_mul, MM_div, MM_mod, MM_pow, MM_unm, 
        MM_metatable, MM_tostring, MM_new, MM_pairs, MM_ipairs,
        MM__MAX,
        MM____ = MM__MAX,
        MM_FAST = MM_len
     } MMS;
它们的主要作用是将指令归类，辅助`Luajit`内部执行与调试时使用，对于指令的格式并没有影响，这里不再展开。
### `lj_bc_mode`
`Luajit`将所有的指令模式`BCMode`与`MMS`组合，生成了一张表，它就是`lj_bc_mode`。这张表与`Luac`中的`luaP_opmodes`一样，主要用于辅助指令的解析工作。`lj_bc_mode`的定义是通过builddvm_lib.c中的`emit_lib()`函数执行宏展开的，当`ctx->mode`被定义为`BUILD_bcdef`时，会执行如下片断代码：
    int i;
    fprintf(ctx->fp, "n};nn");
    fprintf(ctx->fp, "LJ_DATADEF const uint16_t lj_bc_mode[] = {n");
    fprintf(ctx->fp, "BCDEF(BCMODE)n");
    for (i = ffasmfunc-1; i > 0; i--)
      fprintf(ctx->fp, "BCMODE_FF,n");
    fprintf(ctx->fp, "BCMODE_FFn};nn");
整个核心的开展由`BCDEF(BCMODE)`完成。展开后的代码片断如下：
    const uint16_t lj_bc_mode[] = {(BCMvar|(BCMnone>> Result = 20889 [5199h]
当然，也可以使用代码将它们的值打印出来，如下所示：
    size_t sz = sizeof(lj_bc_mode) / sizeof(uint16_t);
    for (size_t i=0; i<sz; i++) {
        std::cout << "idx:" << std::dec << i << ": 0x" 
                  << std::hex << lj_bc_mode[i] 
                  << std::endl;
    }
输出如下：
    idx:0: 0x3183
    idx:1: 0x3183
    idx:2: 0x3983
    idx:3: 0x3983
    idx:4: 0x2183
    idx:5: 0x2183
    idx:6: 0x2503
    ......
    idx:88: 0xb004
    idx:89: 0xb004
    idx:90: 0xb304
    idx:91: 0xb004
    idx:92: 0xb004
可以看到，与它们的格式相关，输出的效果与`Luac`中的`luaP_opmodes`一样，会有很多的项的值是相同的。
## 反汇编引擎实现
`Luajit`的安装目录下的share/luajit-2.0.5/jit目录中的bc.lua文件为`Luajit`提供的反汇编模块，可以使用它来完成`Luajit`字节码文件的反汇编工作。执行如下命令，可以查看hello.lua的指令信息：
    $ luajit -jbc ./hello.lua
    -- BYTECODE -- hello.lua:2-4
    0001    ADDVV    2   0   1
    0002    RET1     2   2
    -- BYTECODE -- hello.lua:5-7
    0001    GGET     0   0      ; "print"
    0002    KSTR     1   1      ; "welcome to lua world "
    0003    CALL     0   1   2
    0004    RET0     0   1
    -- BYTECODE -- hello.lua:9-11
    0001    GGET     1   0      ; "print"
    0002    KSTR     2   1      ; "The string you input is "
    0003    MOV      3   0
    0004    CAT      2   2   3
    0005    CALL     1   1   2