启动 POST /containers/(id)/start
停止 POST /containers/(id)/stop t
重启 POST /containers/(id)/restart t
杀死 POST /containers/(id)/kill signal
附加终端 POST /containers/(id)/attach logs、stdin、stdout等
暂停 POST /containers/(id)/pause
重新运行暂停的容器 POST /containers/(id)/unpause
等待容器停止 POST /containers/(id)/wait
删除 DELETE /containers/(id) v、force
从容器复制目录/文件 POST /containers/(id)/copy
更多关于容器API的详情，请参见B.1节。
14.3.2 镜像相关的API
和镜像相关的操作主要有列出当前主机的所有镜像、创建镜像、查看镜像信息、查看镜像历
史、将镜像推送入库、给镜像添加标签、删除和搜索镜像等。所有和镜像相关的API，其访问路
径都在/images/之下。由于镜像的上传、下载和搜索都要和Docker Hub打交道，我们会在14.4节介
绍完Docker Hub的架构和流程之后学习它们。
1. 列出镜像
方法 ：GET /images/json
用例请求： GET /images/json?all=0 HTTP/1.1
用例返回：
HTTP/1.1 200 OK
Content-Type: application/json
[
{
"RepoTags": [
"ubuntu:12.04",
"ubuntu:precise",
"ubuntu:latest"
],
"Id": "8dbd9e392a964056420e5d58ca5cc376ef18e2de93b5cc90e868a1bbc8318c1c",
"Created": 1365714795,
"Size": 131506275,
"VirtualSize": 131506275
},
...
]
14.3 远程API 165
参数
1
 all：其值为1/True/true或者0/False/false，表示是否返回所有镜像，默认值为false。
 filters：JSON形式的条件过滤。 2
状态码：（略）
3
curl操作：curl -X POST http://localhost:2376/ images/json?all=0
2. 查看镜像详细信息 4
方法：GET /images/(name)/json
5
用例请求：GET /images/base/json HTTP/1.1
用例返回：
6
HTTP/1.1 200 OK
Content-Type: application/json 7
{
"Created":"2013-03-23T22:24:18.818426-07:00",
"Container":"3d67245a8d72ecf13f33dffac9f79dcdf70f75acb84d308770391510e0c23ad0", 9
"ContainerConfig":
{
"Hostname":"", 8
"User":"",
"Memory":0,
"MemorySwap":0,
10
"AttachStdin":false,
"AttachStdout":false,
"AttachStderr":false,
10
"PortSpecs":null,
"Tty":true,
"OpenStdin":true,
11
"StdinOnce":false,
"Env":null,
"Cmd": ["/bin/bash"],
13
"Dns":null,
"Image":"base",
"Volumes":null,
14
"VolumesFrom":"",
"WorkingDir":""
},
15
"Id":"b750fe79269d2ec9a3c593ef05b4332b1d1a02a62b4accb2c21d589ff2f5f2dc",
"Parent":"27cf784147099545",
"Size": 6824592
16
}
参数：（无）
17
状态码
 404：无该镜像。 18
166 第14章 Docker API
curl操作：
curl -X GET http://localhost:2376/ images/base/json
3. 创建镜像
创建镜像有3种方法：从Docker Hub等仓库下载，通过Dockerfile制作以及将容器提交为镜像。
关于通过从仓库下载来创建镜像，我们将会在14.4.2节中说明，这里我们主要说明如何通过
Dockerfile创建镜像和将容器提交成镜像。
 使用Dockerfile创建镜像
首先，我们编写一个Dockerfile文件，然后将其压缩，最后使用API build创建镜像。具体内
容如下：
$ cat Dockerfile
From Ubuntu
RUN echo “deb http://archive.ubuntu.com/ubuntu precise main univers” > /etc/apt/ sources.list
mkdir /root
RUN apt-get update
EXPOSE 22 80
CMD echo “Using Dockerfile to build image now !”
$tar zcf Dockerfile.tar.gz Dockerfile
Curl -v -X POST -H “Content-Type: application/tar” --data-binary ‘@Dockerfile.tar.gz’
http://localhost:2376/build?t=testbuild
参数HTTP头中的Content-Type: application/tar字段表明POST方法投递的是一个压缩包。
--data-binary则说明投递的是一个二进制数据。和--data-binary相对应的是--data-ascii，它表
示投递的数据以ASCII编码。参数t=testbuild表示所创建的镜像名为testbuild。
 将容器提交成镜像
在3.3节中，我们知道使用docker commit命令可以将一个容器提交成镜像。现在，我们通过
API来实现同样的操作，具体操作如下：
$curl –X POST –H "Content-Type: application/json" http://localhost:2376/commit? container=ae17d&
comment=test&repo=myrepo
这样，我们就将Id为ae17d的容器提交为名为myrepo的镜像。
关于镜像的API示例，现在就说到这里。和容器一样，为了方便读者查阅，我们将镜像相关
的API归纳为表14-2所示。
表14-2 镜像相关的API
功 能 方 法 参 数
列出镜像 GET /images/json all、filters
创建（下载创建）镜像 POST /images/create fromImage、repo、tag等
查看镜像信息 GET /images/(name)/json
14.4 平台API 167
（续） 1
功 能 方 法 参 数
获取镜像历史 GET /images/(name)/history 2
推送镜像到仓库 POST /images/(name)/push
给镜像贴标签 POST /images/(name)/tag repo、force、tag 3
删除镜像 DELETE /images/(name) force
搜索镜像 GET /images/search Term
4
更多关于镜像API的详细说明，可以参见附录B.2。
5
14.4 平台 API
6
本节主要介绍Docker Hub的API，但在这之前，我们有必要说明Docker Hub的组成结构以及
常见操作的交互流程。 7
14.4.1 注册服务器架构及流程 9
Docker的注册服务器，也称Docker Registry，它是Docker的重要组件之一。Docker Registry
8
包含3个角色，分别是Index（索引）、Registry（库）和Registry客户端。
 Index：负责维护用户账号、镜像校验以及公共命名空间这些信息。它通过Web UI、元数
10
据存储、认证服务和服务化等组件来维护这些信息。
 Registry：它是镜像和图标的仓库，由S3、云文件和本地文件系统来提供数据库支持。常
10
见的Registry有Sponsor Registry、Mirror Registry、Vendor Registry和Private Registry。
 Registry客户端：用户通过客户端来与Registry通信、鉴权、推送和拉取信息。
11
这三个组件是如何分工合作的呢？接下来，我们以Docker Hub为例，通过常见的拉取、推送
镜像的流程来说明一下。 13
1. 下载镜像
14
用户通过客户端向注册服务器下载一个指定名字的镜像，其流程如图14-2所示，具体步骤如
下所示。
15
(1) 客户端向Index发送下载某个镜像的请求。
(2) Index向客户端返回三部分信息：该镜像位于Registry库的位置、该镜像包括所有层的校验
16
信息、授权token。当第(1)步中的请求头有X-Docker-Token时，才会返回token，它对于私人仓库
是需要的，而对于公有库则不是必要的。
17
(3) 用户通过镜像的位置以及授权token向Registry发出请求。
(4) Registry向Index核实该token是否被授权。
18
(5) Index返回授权验证结果，如果合法，则Registry通知客户端可以下载该镜像，否则拒绝此
168 第14章 Docker API
次下载请求。
图14-2 客户端向注册服务器拉取镜像流程
2. 上传镜像
用户通过客户端向注册服务器上传镜像的流程如图14-3所示，具体步骤如下。
图14-3 客户端向注册服务器上传镜像的流程
14.4 平台API 169
(1) 用户发送带证书的请求到Index，要求分配库名。
1
(2) 在成功认证以及确定命名空间、库名都可以分配之后，Index向客户端返回一个临时的token。
(3) 镜像连带临时token被推送到Registry。
2
(4) Registry向Index验证该token的有效性，认证成功后开始读取来自客户端的数据流，否则
拒绝该次上传请求。
3
(5) Index更新此次镜像的校验信息。
介绍完Docker Hub的组件和工作流程之后，接下来开始介绍Hub API。 4
14.4.2 操作Hub API 5
在本节中，我们主要介绍如何在Docker Hub上操作API。首先介绍用户如何注册和登录，然
6
后说明如何通过API在Docker Hub上新建仓库，更新仓库，查看仓库中已有的镜像以及删除仓库。
最后，将介绍如何上传镜像到Docker Hub的库中以及如何下载镜像。
7
1. 用户注册
注册新用户需要设置邮箱、用户名和密码。 9
方法：POST /v1/users/
8
用例请求：
POST /v1/users/ HTTP/1.1
10
Host: index.docker.io
Accept: application/json
Content-Type: application/json
10
{"email": "PI:EMAIL",
"password": "toto42",
"username": "foobar"}
11
用例返回：
HTTP/1.1 201 OK 13
Vary: Accept
Content-Type: application/json
"User Created" 14
JSON参数
15
 email：电子邮箱，注册后需要去邮箱激活账号。
 username：用户名，最少4个字节，最大30个字节，必须由[a-z0-9_]组成。
16
 password：密码，最短为5个字节。
curl操作：
17
$ curl -X POST -v -H "Content-Type: application/json" https://index.docker.io/v1/users/ -d
'{"email":"PI:EMAIL","password":"110110","username":"zengjinlong123"}'
18
170 第14章 Docker API
2. 用户登录
注册完用户并激活之后，我们可以用该账号登录Docker Hub了。
方法：GET /v1/users/
用例请求：
GET /v1/users/ HTTP/1.1
Host: index.docker.io
Accept: application/json
Authorization: Basic akmklmasadalkm==
用例返回：
HTTP/1.1 200 OK
Vary: Accept
Content-Type: application/json
OK
状态码
 200：返回正确。
 401：认证失败。
 403：账号尚未激活。
curl操作
在HTTP 头的Authorization字段中，后面的值是Basic加“用户名:密码”的Base64编码。例
如，我的用户名为helloworld，密码为123456，则要先将其进行Base64加密，具体操作如下：
$ USER=`echo 'hellworld:12345' | base64 --wrap=0`
$ echo $USER
aGVsbHdvcmxkOjEyMzQ1Cg==
$ curl -v -X GET -H "Authorization: Basic $USER" https://index.docker.io/v1/users/
另一种不需要生成Base64的方法是使用--user参数，具体操作如下：
$ curl -v -X GET --user hellworld:123456 https://index.docker.io/v1/users/