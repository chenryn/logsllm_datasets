# 深入理解Win32编程（五）

## 译文声明
本文为翻译文章，具体内容和含义请以原文为准。

## 前言
在上一节中，我们初步了解了资源文件以及如何在OD（OllyDbg）中定位对话框的回调函数。今天我们将通过之前所学的知识来破解一个简单的小程序，并学习如何提取图标和查找标题在资源文件中的位置。

## 程序练习

### 找到正确的函数
在恭喜对话框前有一个 `test eax, eax` 语句，该语句的作用是：如果结果为1则返回1，否则返回0。

继续往上查看，可以看到一个函数调用。使用F7跟进去后，找到了编辑框、句柄以及获取编辑框内容的函数。接下来跟踪EAX的操作，可以看到函数的最后有两个 `retn` 语句：

- 第一个 `retn` 的EAX做了 `mov eax, 0x1` 的操作，因此从第一个出口出去的EAX值为1。
- 第二个 `retn` 的EAX做了 `xor eax, eax` 的操作，因此从第二个出口出去的EAX值为0。

由此可以猜测，如果条件成立，则从第一个 `retn` 出去并返回成功的 `MessageBox`；如果条件不成立，则从第二个 `retn` 出去并返回失败的 `MessageBox`。

继续往上查看，可以发现两个 `jnz` 语句直接跳转到了下面那个 `retn` 的地方，而这两个 `jnz` 语句上面都是 `cmp` 语句。这些 `cmp` 语句用于判断 `ecx == 0x3` 和 `ecx == 0x5` 是否成立。

再往上查看ECX的操作，可以看到这里使用了 `repne scas` 指令。这个指令通常用来计算字符串的长度。具体来说：
- `scasb` 用于判断AL数据是否在EDI中，配合 `repne` 使用（当不为零时继续遍历）。
- 将ECX置为-1（计数器），将EAX置为0（字符串结尾）。每扫描一个字符，ECX会减少1，当EDI中找到0时终止。
- 此时ECX存储的是长度的负数，通过 `not ecx` 获取其长度，然后 `dec ecx`（因为从1开始计数而非0开始计数），最终ECX存储着字符串的正确长度。

### 代码还原
根据上述分析，我们可以尝试进行正向代码的还原：

```c
switch (LOWORD(wParam)) {
    case IDC_BUTTON_Login:
        // 1. 先获取文本框的句柄
        hEditUser = GetDlgItem(hwndDlg, text1);
        hEditPass = GetDlgItem(hwndDlg, text2);

        // 2. 通过句柄得到里面的内容
        TCHAR szUserBuff[0x50];
        TCHAR szPassBuff[0x50];
        GetWindowText(hEditUser, szUserBuff, 0x50);
        GetWindowText(hEditPass, szPassBuff, 0x50);

        if (wcslen((const unsigned short *)szUserBuff) == 3) {
            if (wcslen((const unsigned short *)szPassBuff) == 5) {
                debugprintf("恭喜!");
                // MessageBox(NULL, TEXT("恭喜!"), TEXT("OK"), MB_OK);
            }
        }
}
```

## 添加图标

### 插入图标
1. 点击“插入图标”。
2. 在右侧点击“引入”并改名为 `IDI_ICON_BIG` 和 `IDI_ICON_SMALL`。大图标是在使用 Alt+Tab 切换时显示的图标，小图标是其他时候使用的图标。

在 `resource.h` 文件中可以看到多了两个宏定义。

### LoadIcon
```c
HICON LoadIcon(
    HINSTANCE hInstance,
    LPCTSTR lpIconName
);
```
- `hInstance` [in]：模块实例的句柄，包含要加载的图标资源。如果是标准图标，此参数必须为 NULL。
- `lpIconName` [in]：指向以 null 结尾的字符串，包含要加载的图标资源的名称。或者，此参数可以包含低字节中的资源标识符和高字节中的0。使用 `MAKEINTRESOURCE` 宏创建此值。

### 使用LoadIcon获取图标
```c
HICON hBigIcon;
HICON hSmallIcon;

case WM_INITDIALOG:
    hBigIcon = LoadIcon(hIconInstance, MAKEINTRESOURCE(IDI_ICON_BIG));
    hSmallIcon = LoadIcon(hIconInstance, MAKEINTRESOURCE(IDI_ICON_SMALL));
    return TRUE;
```

### SendMessage
```c
LRESULT SendMessage(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam
);
```
- `hWnd` [in]：接收消息的窗口句柄。
- `Msg` [in]：指定要发送的消息。
- `wParam` [in]：指定额外的消息特定信息。
- `lParam` [in]：指定额外的消息特定信息。

### 使用SendMessage显示图标
```c
SendMessage(hwndDlg, WM_SETICON, ICON_BIG, (LPARAM)hBigIcon);
SendMessage(hwndDlg, WM_SETICON, ICON_SMALL, (LPARAM)hSmallIcon);
```

### 查看效果
添加图标后的效果如下图所示（此处应插入图片）。

## 定位标题并修改

### 修改标题
1. 将生成的exe文件打开。
2. 使用LoadPE打开并找到对话框。
3. 点击保存到桌面。
4. 使用WinHex打开 `res.dmp` 文件，可以看到资源文件中的所有字符都是Unicode。
5. 搜索并修改字符串。例如，将名字全部修改为 "D" 并保存。

可以看到标题已成功修改。

希望以上内容对你有所帮助！