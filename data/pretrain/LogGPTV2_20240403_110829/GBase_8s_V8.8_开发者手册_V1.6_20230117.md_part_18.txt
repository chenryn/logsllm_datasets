步骤4 配置客户端接入认证参数，IP为所要连接的主机IP。
gs_gucreload-D/home/gbase/data/dn1/dn1_1/-h"hostsslall all 127.0.0.1/32
cert"
gs_gucreload-D/home/gbase/data/dn1/dn1_1/-h"hostsslall all IP/32 cert"
表示允许127.0.0.1/32网段的客户端以ssl认证方式连接到数据库服务器。
 如果服务端 pg_hba.conf 文件中 METHOD 配置为 cert，则只有客户端使用证书
（client.crt）中所设置的用户名（commonname）才能够成功连接数据库。如果设
置为md5、sm3或sha256则对连接数据库的用户没有限制。
 MD5加密算法安全性低，存在安全风险，建议使用更安全的加密算法。
步骤5 配置SSL认证相关的数字证书参数。各命令后所附为设置成功的回显。
gs_gucset-D/home/gbase/data/dn1/dn1_1/-c"ssl_cert_file='server.crt'"
gs_gucset:ssl_cert_file='server.crt'
gs_gucset-D/home/gbase/data/dn1/dn1_1/-c"ssl_key_file='server.key'"
gs_gucset:ssl_key_file='server.key'
gs_gucset-D/home/gbase/data/dn1/dn1_1/-c"ssl_ca_file='cacert.pem'"
gs_gucset:ssl_ca_file='cacert.pem'
步骤6 重启数据库。
gha_ctlstopall-lhttp://:2379
gha_ctlstartall-lhttp://:2379
----结束
南大通用数据技术股份有限公司
74
GBase 8s V8.8开发者手册
客户端配置
配置步骤如下：
上传证书文件，将在服务端配置章节生成出的文件client.key.pk8，client.crt，cacert.pem
放置在客户端。
示例
注：示例1和示例2选择其一。
publicclassSSL{
publicstaticvoidmain(String[]args){PropertiesurlProps=newProperties();
Stringurls="jdbc:postgresql://10.29.37.136:15432/postgres";
/**
*================== 示例1 使用NonValidatingFactory通道
*/urlProps.setProperty("sslfactory","org.postgresql.ssl.NonValidatingFactory");
urlProps.setProperty("user","world");
urlProps.setProperty("password","test@123");urlProps.setProperty("ssl","true");
/**
*================== 示例2 使用证书
*/
urlProps.setProperty("sslcert","client.crt");urlProps.setProperty("sslkey","client.key.pk8");
urlProps.setProperty("sslrootcert","cacert.pem");urlProps.setProperty("user","world");
urlProps.setProperty("ssl","true");
/*sslmode可配置为：require、verify-ca、verify-full，以下三个示例选择其一*/
/*================== 示例2.1 设置sslmode为require，使用证书 */
urlProps.setProperty("sslmode","require");
/*================== 示例2.2 设置sslmode为verify-ca，使用证书 */
urlProps.setProperty("sslmode","verify-ca");
/*================== 示例2.3 设置sslmode为verify-full，使用证书（Linux下验证）
*/urls="jdbc:postgresql://world:15432/postgres";
urlProps.setProperty("sslmode","verify-full");try{
Class.forName("org.postgresql.Driver").newInstance();
}catch(Exceptione){e.printStackTrace();
}
try{
Connectionconn;
conn=DriverManager.getConnection(urls,urlProps);conn.close();
}catch(Exceptione){e.printStackTrace();
}
}
}
南大通用数据技术股份有限公司
75
GBase 8s V8.8开发者手册
/**
注：将客户端密钥转化为DER格式:
opensslpkcs8-topk8-outformDER-inclient.key-outclient.key.pk8-nocrypt
opensslpkcs8-topk8-informPEM-inclient.key-outformDER-outclient.key.der-v1
PBE-MD5-DES
opensslpkcs8-topk8-informPEM-inclient.key-outformDER-outclient.key.der-v1
PBE-SHA1-3DES
以上算法由于安全级别较低，不推荐使用。
如果客户需要采用更高级别的私钥加密算法，启用bouncycastle或者其他第三方私钥解密
密码包后可以使用的私钥加密算法如下：
opensslpkcs8-inclient.key-topk8-outformDER-outclient.key.der-v2AES128
opensslpkcs8-inclient.key-topk8-outformDER-outclient.key.der-v2aes-256-cbc-iter
1000000
opensslpkcs8-inclient.key-topk8-outclient.key.der-outformDer-v2aes-256-cbc-v2prf
hmacWithSHA512
启用bouncycastle：使用jdbc的项目引入依赖：bcpkix-jdk15on.jar包，版本建议：1.65以
上。
*/
6.2.6 执行 SQL 语句
6.2.6.1 执行普通 SQL
应用程序通过执行SQL语句来操作数据库的数据（不用传递参数的语句），需要按以
下步骤执行：
Connectionconn=DriverManager.getConnection("url","user","password");Statementstmt=
conn.createStatement();
步骤1 调用Connection的createStatement方法创建语句对象。
intrc=stmt.executeUpdate("CREATETABLEcustomer_t1(c_customer_skINTEGER,
c_customer_nameVARCHAR(32));");
步骤2 调用Statement的executeUpdate方法执行SQL语句。
 数据库中收到的一次执行请求（不在事务块中），如果含有多条语句，将会被打包成一
个事务，事务块中不支持vacuum操作。如果其中有一个语句失败，那么整个请求都将
会被回滚。
 使用Statement执行多语句时应以“;”作为各语句间的分隔符，存储过程、函数、匿名块
不支持多语句执行。
南大通用数据技术股份有限公司
76
GBase 8s V8.8开发者手册
 “/”可用作创建单个存储过程、函数、匿名块的结束符。
步骤3 关闭语句对象。
stmt.close();
----结束
6.2.6.2 执行预编译 SQL 语句
预编译语句是只编译和优化一次，然后可以通过设置不同的参数值多次使用。由于已经
预先编译好，后续使用会减少执行时间。因此，如果多次执行一条语句，请选择使用预编译
语句。可以按以下步骤执行：
步骤1 调用Connection的prepareStatement方法创建预编译语句对象。
步骤2 调用PreparedStatement的setShort设置参数。
pstmt.setShort(1,(short)2);
步骤3 调用PreparedStatement的executeUpdate方法执行预编译SQL语句。
introwcount=pstmt.executeUpdate();
步骤4 调用PreparedStatement的close方法关闭预编译语句对象。
pstmt.close();
----结束
6.2.6.3 调用存储过程
GBase8s支持通过JDBC直接调用事先创建的存储过程，步骤如下：
步骤1 调用Connection的prepareCall方法创建调用语句对象。
ConnectionmyConn=DriverManager.getConnection("url","user","password");
CallableStatementcstmt=myConn.prepareCall("{?=CALLTESTPROC(?,?,?)}");
步骤2 调用CallableStatement的setInt方法设置参数。
cstmt.setInt(2,50);
cstmt.setInt(1,20);
cstmt.setInt(3,90);
步骤3 调用CallableStatement的registerOutParameter方法注册输出参数。
cstmt.registerOutParameter(4,Types.INTEGER);//注册out类型的参数，类型为整型。
南大通用数据技术股份有限公司
77
GBase 8s V8.8开发者手册
步骤4 调用CallableStatement的execute执行方法调用。
cstmt.execute();
步骤5 调用CallableStatement的getInt方法获取输出参数。
intout=cstmt.getInt(4);//获取out参数
示例：
//在数据库中已创建了如下存储过程，它带有out参数。
createorreplaceproceduretestproc(
psv_in1ininteger,psv_in2ininteger,psv_inoutinoutinteger
)
asbegin
psv_inout:=psv_in1+psv_in2+psv_inout;end;
/
步骤6 调用CallableStatement的close方法关闭调用语句。
cstmt.close();
 很多的数据库类如Connection、Statement和ResultSet都有close()方法，在使用完
对象后应把它们关闭。要注意的是，Connection的关闭将间接关闭所有与它关联的
Statement， Statement的关闭间接关闭了ResultSet。
 一些JDBC驱动程序还提供命名参数的方法来设置参数。命名参数的方法允许根据
名称而不是顺序来设置参数，若参数有默认值，则可以不用指定参数值就可以使用
此参数的默认值。即使存储过程中参数的顺序发生了变更，也不必修改应用程序。
目前GBase8s数据库的JDBC 驱动程序不支持此方法。
 GBase8s数据库不支持带有输出参数的函数，也不支持存储过程和函数参数默认值。
 当游标作为存储过程的返回值时，如果使用JDBC调用该存储过程，返回的游标将
不可用。
 存储过程不能和普通SQL在同一条语句中执行。
 存储过程中inout类型参数必需注册出参。
南大通用数据技术股份有限公司
78
GBase 8s V8.8开发者手册
6.2.6.4 Oracle 兼容模式启用重载时，调用存储过程
打开参数behavior_compat_options='proc_outparam_override'后，JDBC 调用事先创建的
存储过程，步骤如下：
步骤1 调用Connection的prepareCall方法创建调用语句对象。
Connectionconn=DriverManager.getConnection("url","user","password");CallableStatement
cs=conn.prepareCall("{CALLTEST_PROC(?,?,?)}");
步骤2 调用CallableStatement的setInt方法设置参数。
PGobjectpGobject=newPGobject();
pGobject.setType("public.compfoo");// 设置复合类型名，格式为“schema.typename”。
pGobject.setValue("(1,demo)");// 绑定复合类型值，格式为“(value1,value2)”。cs.setObject(1,
pGobject);
步骤3 调用CallableStatement的registerOutParameter方法注册输出参数。
// 注册out类型的参数，类型为复合类型,格式为“schema.typename”。
cs.registerOutParameter(2,Types.STRUCT,"public.compfoo");
步骤4 调用CallableStatement的execute执行方法调用。
cs.execute();
步骤5 调用CallableStatement的getObject方法获取输出参数。
PGobjectresult=(PGobject)cs.getObject(2); // 获取out参数
result.getValue();// 获取复合类型字符串形式值。
result.getArrayValue();//获取复合类型数组形式值，以复合数据类型字段顺序排序。
result.getStruct();//获取复合类型子类型名，按创建顺序排序。
步骤6 调用CallableStatement的close方法关闭调用语句。
cs.close();
 oracle兼容模式开启参数后，调用存储过程必须使用{callproc_name(?,?,?)}形式调
用，调用函数必须使用{?=callfunc_name(?,?)}形式调用（等号左侧的“？”为函数
返回值的占位符，用于注册函数返回值）。
 参数behavior_compat_options='proc_outparam_override'行为变更后，业务需要重新
建立连接，否则无法正确调用存储过程和函数。
 函数和存储过程中包含复合类型时，参数的绑定与注册需要使用schema.typename
南大通用数据技术股份有限公司
79
GBase 8s V8.8开发者手册
形式。
// 在数据库创建复合数据类型。
CREATETYPEcompfooAS(f1int,f3text);
// 在数据库中已创建了如下存储过程，它带有out参数。
createorreplaceproceduretest_proc(
psv_inincompfoo,psv_outoutcompfoo
)
asbegin
psv_out:=psv_in;end;
/
----结束
6.2.6.5 执行批处理
用一条预处理语句处理多条相似的数据，数据库只创建一次执行计划，节省了语句的编
译和优化时间。可以按如下步骤执行：
步骤1 调用Connection的prepareStatement方法创建预编译语句对象。
Connectionconn=DriverManager.getConnection("url","user","password");PreparedStatement
pstmt=conn.prepareStatement("INSERTINTOcustomer_t1VALUES(?)");
步骤2 针对每条数据都要调用setShort设置参数，以及调用addBatch确认该条设置完毕。
pstmt.setShort(1,(short)2);
pstmt.addBatch();
步骤3 调用PreparedStatement的executeBatch方法执行批处理。
int[]rowcount=pstmt.executeBatch();
步骤4 调用PreparedStatement的close方法关闭预编译语句对象。
pstmt.close();
在实际的批处理过程中，通常不终止批处理程序的执行，否则会降低数据库的性能。因
此在批处理程序时，应该关闭自动提交功能，每几行提交一次。关闭自动提交功能的语句为：
conn.setAutoCommit(false);
----结束
南大通用数据技术股份有限公司
80
GBase 8s V8.8开发者手册
6.2.7 处理结果集
设置结果集类型
不同类型的结果集有各自的应用场景，应用程序需要根据实际情况选择相应的结果集类
型。在执行SQL语句过程中，都需要先创建相应的语句对象，而部分创建语句对象的方法
提供了设置结果集类型的功能。具体的参数设置如表6-3所示。涉及的Connection的方法如
下：
//创建一个Statement对象，该对象将生成具有给定类型和并发性的ResultSet对象。
createStatement(intresultSetType,intresultSetConcurrency);
//创建一个PreparedStatement对象，该对象将生成具有给定类型和并发性的ResultSet对象。
prepareStatement(Stringsql,intresultSetType,intresultSetConcurrency);
//创建一个CallableStatement对象，该对象将生成具有给定类型和并发性的ResultSet对象。
prepareCall(Stringsql,intresultSetType,intresultSetConcurrency);
表 6-3 结果集类型
参数 描述
resultSetType 表示结果集的类型，具体有三种类型：
 ResultSet.TYPE_FORWARD_ONLY：ResultSet只能向前移动。
是缺省值。
 ResultSet.TYPE_SCROLL_SENSITIVE：在修改后重新滚动到修
改所在行，可以看到修改后的结果。
 ResultSet.TYPE_SCROLL_INSENSITIVE：对可修改例程所做的
编辑不进行显示。
说明：
结果集从数据库中读取了数据之后，即使类型是
ResultSet.TYPE_SCROLL_SENSITIVE，也不会看到由其他事务在这
之后引起的改变。调用ResultSet的refreshRow()方法，可进入数据
库并从其中取得当前游标所指记录的最新数据。
resultSetConcurrency 表示结果集的并发，具体有两种类型：
 ResultSet.CONCUR_READ_ONLY：如果不从结果集中的数据
建立一个新的更新语句，不能对结果集中的数据进行更新。
 ResultSet.CONCUR_UPDATEABLE：可改变的结果集。对于可
滚动的结果集，可对结果集进行适当的改变。
南大通用数据技术股份有限公司
81
GBase 8s V8.8开发者手册
在结果集中定位
ResultSet对象具有指向其当前数据行的光标。最初，光标被置于第一行之前。next方法
将光标移动到下一行；因为该方法在ResultSet对象没有下一行时返回false，所以可
以在while循环中使用它来迭代结果集。但对于可滚动的结果集，JDBC驱动程序提供
更多的定位方法，使ResultSet指向特定的行。定位方法如表6-4所示。
表 6-4 在结果集中定位的方法
方法 描述
next() 把ResultSet向下移动一行。
previous() 把ResultSet向上移动一行。
beforeFirst() 把ResultSet定位到第一行之前。
afterLast() 把ResultSet定位到最后一行之后。
first() 把ResultSet定位到第一行。
last() 把ResultSet定位到最后一行。
absolute(int) 把ResultSet移动到参数指定的行数。
relative(int) 通过设置为1向前（设置为1，相当于next()）或者向后（设