title:Acquisitional Rule-based Engine for Discovering Internet-of-Thing
Devices
author:Xuan Feng and
Qiang Li and
Haining Wang and
Limin Sun
Acquisitional Rule-based Engine for Discovering 
Internet-of-Thing Devices
Xuan Feng, Beijing Key Laboratory of IOT Information Security Technology, IIE, CAS, China, 
and School of Cyber Security, University of Chinese Academy of Sciences, China;  
Qiang Li, School of Computer and Information Technology, Beijing Jiaotong University, China; 
Haining Wang, Department of Electrical and Computer Engineering, University of Delaware, 
USA; Limin Sun, Beijing Key Laboratory of IOT Information Security Technology, IIE, CAS, 
China, and School of Cyber Security, University of Chinese Academy of Sciences, China
https://www.usenix.org/conference/usenixsecurity18/presentation/feng
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
ISBN 978-1-939133-04-5
Open access to the Proceedings of the 
27th USENIX Security Symposium 
is sponsored by USENIX.
Acquisitional Rule-based Engine for Discovering Internet-of-Thing Devices
Xuan Feng12, Qiang Li3∗, Haining Wang4,
Limin Sun12
1 Beijing Key Laboratory of IOT Information Security Technology, IIE, CAS, China
2 School of Cyber Security, University of Chinese Academy of Sciences, China
3 School of Computer and Information Technology, Beijing Jiaotong University, China
4 Department of Electrical and Computer Engineering, University of Delaware, USA
Abstract
The rapidly increasing landscape of Internet-of-Thing
(IoT) devices has introduced signiﬁcant technical chal-
lenges for their management and security, as these IoT
devices in the wild are from different device types, ven-
dors, and product models. The discovery of IoT devices
is the pre-requisite to characterize, monitor, and protect
these devices. However, manual device annotation im-
pedes a large-scale discovery, and the device classiﬁca-
tion based on machine learning requires large training
data with labels. Therefore, automatic device discovery
and annotation in large-scale remains an open problem
in IoT. In this paper, we propose an Acquisitional Rule-
based Engine (ARE), which can automatically generate
rules for discovering and annotating IoT devices without
any training data. ARE builds device rules by leverag-
ing application-layer response data from IoT devices and
product descriptions in relevant websites for device an-
notations. We deﬁne a transaction as a mapping between
a unique response to a product description. To collect
the transaction set, ARE extracts relevant terms in the re-
sponse data as the search queries for crawling websites.
ARE uses the association algorithm to generate rules of
IoT device annotations in the form of (type, vendor, and
product). We conduct experiments and three applications
to validate the effectiveness of ARE.
1
Introduction
Nowadays most of the industries have owned and run dif-
ferent Internet-of-Thing (IoT) devices, including, but not
limited to, cameras, routers, printers, TV set-top boxes,
as well as industrial control systems and medical equip-
ment. Many of these devices with communication capa-
bilities have been connected to the Internet for improv-
ing their efﬁciency. Undeniably, the development and
adoption of online IoT devices will promote economic
∗Qiang Li is the corresponding author.
growth and improvement of the quality of life. Gartner
reports [1] that nearly 5.5 million new IoT devices were
getting connected every day in 2016, and are moving to-
ward more than 20 billion by 2020.
Meanwhile, these IoT devices also yield substantial
security challenges, such as device vulnerabilities, mis-
management, and misconﬁguration. Although an in-
creasingly wide variety of IoT devices are connected to
residential networks, most users lack security concerns
and necessary skills to protect their devices, e.g., default
credentials and unnecessary exposure. It is difﬁcult for
end users to identify and troubleshoot the mismanage-
ment and misconﬁguration of IoT devices. Even if an IoT
device has a serious security vulnerability, users have no
capability of updating patches in a timely manner due to
their limited knowledge.
In general, there are two basic approaches to address-
ing security threats: reactive defense and proactive pre-
vention. The reactive defense usually requires download-
ing ﬁrmware images of devices for ofﬂine analysis, lead-
ing to a signiﬁcant time latency between vulnerability ex-
ploit and detection [38]. By contrast, a proactive security
mechanism is to prevent potential damages by predicting
malicious sources, which is more efﬁcient than the reac-
tive defense against large-scale security incidents (e.g.,
Mirai Botnet [21]). In order to protect IoT devices in a
proactive manner, discovering, cataloging, and annotat-
ing IoT devices becomes a prerequisite step.
The device annotation contains the type, vendor, and
product name. For instance, an IoT device has a type
(e.g., routers or camera), comes from a vendor (e.g.,
Sony, CISCO, or Schneider), with a product model (e.g.,
TV-IP302P or ISR4451-X/K9). The number of device
annotations is enormous, and we cannot enumerate them
by human efforts. In prior works [21, 25, 28, 35–37, 40],
ﬁngerprinting and banner grabbing are the two conven-
tional methods for discovering and annotating devices.
However, the ﬁngerprinting approach [35, 36, 40] can-
not be applied to the IoT device discovery and annota-
USENIX Association
27th USENIX Security Symposium    327
tion because of the high demand for training data and
a large number of device models. The banner grabbing
approach [21,25,28,37] usually generates device annota-
tions in a manual fashion, which is impossible for large-
scale annotations, particularly given the increasing num-
ber of device types. In this paper, we aim to automati-
cally discover and annotate IoT devices in the cyberspace
while mitigating the cost in terms of manual efforts and
the training data.
The key observation we exploit is that the response
data from those IoT devices in application layer proto-
cols usually contain the highly correlated content of their
manufacturers. A variety of websites on the Internet are
used to describe the device products since their initial
sale, such as description webpages of the products, prod-
uct reviews websites, and Wikipedia. Our work is rule-
based, and the automatic rule generation is mainly based
on the relationship between the application data in IoT
devices and the corresponding description websites. Al-
though the basic idea is intuitive, there are two major
challenges in practice, blocking the automation process
of building rules for IoT devices. First, the application
data is hardcoded by its manufacturer. Second, there
are massive device annotations in the market. Notably,
manufacturers would release new products and abandon
outdated products, due to the business policy. Manually
enumerating every description webpage is impossible.
To address these technical challenges, we propose an
Acquisitional Rule-based Engine (ARE) that can auto-
matically generate rules for discovering IoT devices in
the cyberspace. Speciﬁcally, ARE utilizes the transac-
tion dataset to mine rules. We deﬁne a transaction as
a mapping between a unique response from an IoT de-
vice to its product description. ARE collects the transac-
tion dataset as follows: (1) ARE receives the application-
layer response data from online IoT devices; (2) ARE
uses relevant terms in the response data as the search
queries; and (3) ARE crawls the websites from the list of
the searching result. For those relevant webpages, ARE
uses named-entity recognition (NER) to extract device
annotation, including device type, vendor, and product.
ARE learns rules from the transaction dataset through the
apriori algorithm. Furthermore, ARE provides RESTful
APIs to applications for retrieving the rules for discover-
ing and annotating IoT devices in the cyberspace.
We implement a prototype of ARE as a self-contained
piece of software based on open source libraries. We
manually collect two datasets as the ground truth to eval-
uate the performance of ARE rules. ARE is able to gen-
erate much more rules than the latest version of Nmap
in a much shorter time. Our results show that the ARE
rules can achieve a precision of 96%. Given the same
number of application packets, ARE can ﬁnd more IoT
devices than Nmap tool. Note that ARE generates rules
without the human efforts or the training data, and it can
dynamically learn new rules when vendors distribute new
products online.
To demonstrate the effectiveness of ARE, we perform
(1) The
three applications based on IoT device rules.
Internet-wide Device Measurement (IDM) application
discovers, infers and characterizes IoT devices in the en-
tire IPv4 address space (close to 4 billion addresses). The
number of IoT devices exposed is large (6.9 million), and
the distribution follows long-tail. (2) The Compromised
Device Detection (CDD) application deploys 7 honey-
pots to capture malicious behaviors across one month.
CDD uses ARE rules to determine whether the host is
an IoT device. We observe that thousands of IoT de-
vices manifest malicious behaviors, implying that those
devices are compromised.
(3) The Vulnerable Device
Analysis (VDA) application analyzes the vulnerability
entries with device models. We observe that hundreds
of thousands of IoT devices are still vulnerable to mali-
cious attacks.
Furthermore, ARE enables the security professionals
to collect the device information by leveraging those
rules in a large-scale measurement study or security inci-
dent. To facilitate this, we release ARE as an open source
project for the community. ARE is available to public at
http://are1.tech/, providing public the APIs on the tuple
(type, vendor, product) and the annotated data set.
In summary, we make the following contributions.
• We propose the framework of ARE to automatically
generate rules for IoT device recognition without
human effort and training data.
• We implement a prototype of ARE and evaluate its
effectiveness. Our evaluation shows that ARE gen-
erates a much larger number of rules within one
week and achieves much more ﬁne-grained IoT de-
vice discovery than existing tools.
• We apply ARE for three different IoT device dis-
covery scenarios. Our main ﬁndings include (1) a
large number of IoT devices are accessible on the
Internet, (2) thousands of overlooked IoT devices
are compromised, and (3) hundreds of thousands of
IoT devices have underlying security vulnerabilities
and are exposed to the public.
The remainder of this paper is organized as follows.
Section 2 provides the background of device discovery,
as well as our motivation. Section 3 describes how the
core of ARE, i.e., the rule miner, derives rules of IoT de-
vices. Section 4 details the design and implementation
of ARE. Section 5 presents the experimental evaluation
of ARE. Section 6 illustrates the three ARE-based appli-
cations. Section 7 surveys the related work, and ﬁnally,
Section 8 concludes.
328    27th USENIX Security Symposium
USENIX Association
2 Background and Motivation
In this section, we ﬁrst present the background of IoT
device discovery and annotation. Then, we describe the
motivation for automatic rule generation.
IoT Device Discovery
2.1
Fingerprinting-based Discovery. In network security,
ﬁngerprinting has been used for more than two decades,
which requires a set of input data and a classiﬁcation
function. The focus of the prior research [40] [36] [35] is
on the ﬁngerprints of operating systems (OS) rather IoT
devices. To ﬁngerprint an IoT device, the input data in-
cludes a pair of queries and responses from IoT devices,
and the class label (known as category or target) is what
the IoT device belongs to. The learning algorithms infer
a classiﬁcation model for mapping the input data to the
class labels based on the training data. When the number
of class labels is large, the learning algorithms require a
large training data to achieve high precision and cover-
age. However, currently there is no training data for IoT
devices. In contrast to the limited number of OS classes,
the number of device models is vast, and it is infeasible
to collect the training data manually. A device class in-
cludes device type, vendor, and product model. To boot-
strap our research, we have scraped some websites col-
lecting about 1,000 IoT device manufacturers, and every
vendor has hundreds of products. Also, it is noteworthy
that the number of products we have collected is substan-
tial, but it only constitutes a small portion of IoT devices
as the number of IoT devices continues growing at even
a faster pace. Therefore, it is very challenging to collect
a signiﬁcant amount of the training data that is sufﬁcient
for IoT device ﬁngerprinting.
Banner-grabbing Discovery. In practice, researchers
use banner grabbing [21, 25, 28, 37], instead of ﬁnger-
printing, to discover IoT devices, due to a large number
of IoT devices and the lack of training data. Banner-
grabbing is to extract textual information in the appli-
cation layer data for labeling an IoT device. Anton-
akakis et al. [21] applied the Nmap [8] banner rules to
analyze online devices from CENSYS and Honeypot.
Fachkha et al. [28] wrote rules through manual efforts
to identify industrial control system in the cyberspace.
Shodan [37] and Censys [25] are two popular search
engines for discovering online devices. They both ex-
ecute Internet-wide scans with different protocols (e.g.,
HTTP, SSH, FTP, and Telnet). Shodan also utilizes the
set of rules combined with the Nmap tool and manual
collection. Censys utilizes Ztag [16] to identify online
devices, which requires annotations for new types of de-
vices. However, the rule generation in banner grabbing is
a manual process. The technical knowledge is needed to
(cid:11)(cid:68)(cid:12)
(cid:11)(cid:69)(cid:12)
Figure 1: The application layer data (HTML) appears
in the online embedded devices. (b) There are several
relevant websites about this device in the search engine.
write a rule for banner grabbing. This manual process is
often arduous and incomplete, making it difﬁcult to keep
up-to-date with the increasing number of device mod-
els. So far, Nmap has several thousand rules for device
discovery (over multi-year development). Moreover, the
banner information itself is always incomplete, only con-
taining a part of device annotation.
2.2 Automatic Learning Rules
Our Motivation. As we mentioned before, manufac-
turers usually hardcode the correlated information into
IoT devices to distinguish their brands. After the initial
sale of products, there are many websites describing de-
vice products such as product reviews. As an example,
Figure 1(a) shows the response packet of an online IP-
camera having the term “TL-WR740/TL-WR741ND” in
the HMTL ﬁle. If we use “TL-WR740/TL-WR741ND”
as the search query in the Google search engine, we will
obtain a URL list including the description documents.
Figure 1(b) shows that Amazon and NEWEGG websites
provide the annotation description for this device. In the
development of ARE, we leverage a set of existing tools
(web crawler, NLP, and association algorithms) to ad-
dress several practical problems in the process of auto-
matic rule generation. These techniques are brieﬂy in-
troduced below.
Web Crawler. ARE needs to ﬁnd the description
webpages for IoT devices.
It is a challenging task to
crawl every webpage, especially given that we cannot
catalog every IoT device. Fortunately, today’s search
engines have crawled the Web and found documents to
add to their searchable indexes. The search engines
USENIX Association
27th USENIX Security Symposium    329
also keep the history snippets even if a product is out-
of-date without correlated webpages. We propose to
use a search query to narrow down the scale of web
crawling. ARE selects the terms from the response
data and encapsulates them into a query. For instance,
a search query (Figure 1) is formatted as “search en-
gine/search?hl=en&q=%22TL+WR740N+WR741ND+
&btnG=Search”, where the mark (?) indicates the end
of the URL and (&) separates arguments, q is the start
of the query, the plus mark (+) represents a space, and
btnG = Search denotes that the search button is pressed
on the web interface. The web crawler obtains the de-
scription webpages from the search result list.
Natural Language Processing. To present IoT de-
vice annotation, ARE needs to extract the relevant terms
from a related description website. Name Entity Recog-
nition (NER) is used to determine the words into pre-
deﬁned classes, such as organization names and loca-
tion names. NER is a typical technique for processing
natural language. The problem is that NER cannot di-
rectly identify device annotations from the description
websites. The reason is that the standard NER is highly
domain-speciﬁc, not designed for extracting device an-
notations and cannot achieve high precision. In this pa-
per, ARE uses a rule-based NER and local dependency
to identify device entities.
Data Mining. ARE needs to discover and infer the
relationships from the transaction set. Speciﬁcally, the
association algorithms (as a set of data mining) can iden-
tify the relationships between items, and then derive the