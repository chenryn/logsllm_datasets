title:A Devil of a Time: How Vulnerable is NTP to Malicious Timeservers?
author:Yarin Perry and
Neta Rozen Schiff and
Michael Schapira
A Devil of a Time: How Vulnerable is NTP to
Malicious Timeservers?
Yarin Perry, Neta Rozen-Schiff and Michael Schapira
The Hebrew University of Jerusalem
PI:EMAIL, PI:EMAIL, PI:EMAIL
Abstract—The  Network  Time  Protocol  (NTP)  synchronizes 
time  across  computer  systems  over  the  Internet  and  plays  a 
crucial role in guaranteeing the correctness and security of many 
Internet  applications.  Unfortunately,  NTP  is  vulnerable  to  so 
called  time  shifting  attacks.  This  has  motivated  proposals  and 
standardization  efforts  for  authenticating  NTP  communications 
and for securing NTP clients. We observe, however, that, even with 
such  solutions  in  place,  NTP  remains  highly  exposed  to  attacks 
by  malicious  timeservers.  We  explore  the  implications  for  time 
computation  of  two  attack  strategies:  (1)  compromising  existing 
NTP timeservers, and (2) injecting new timeservers into the NTP 
timeserver pool. We ﬁrst show that by gaining control over fairly 
few existing timeservers, an opportunistic attacker can shift time 
at  state-level  or  even  continent-level  scale.  We  then  demonstrate 
that  injecting  new  timeservers  with  disproportionate  inﬂuence 
into  the  NTP  timeserver  pool  is  alarmingly  simple,  and  can  be 
leveraged for launching both large-scale opportunistic attacks, and 
strategic,  targeted  attacks.  We  discuss  a  promising  approach  for 
mitigating  such  attacks.
I.
INTRODUCTION
The Network Time Protocol (NTP) synchronizes computer 
systems  across  the  Internet.  Internet  services  and  applications 
ranging  from  ﬁnancial  services  to  security  mechanisms  (TLS 
certiﬁcates,  Kerberos,  DNS  and  BGP  security,  BitCoin,  and 
more 
[7],  [21]–[23],  [27],  [43]),  crucially  rely  on  NTP  for 
both correctness and security. Unfortunately, as highlighted by 
recent  studies  [24],  NTP,  designed  over  three  decades  ago,  is 
vulnerable to many forms of attacks. Particularly disconcerting 
are  time-shifting  attacks,  in  which  an  attacker  shifts  the  local 
time  at  an  NTP  client  forward/backwards  [6],  [24]
Proposals  for  securing  NTP  have  thus  far  focused  on 
two complementary directions: (1) authenticating client-server 
communications  through  encryption  [8],  [9],  and  (2)  altering 
the  manner  in  which  local  time  is  computed  at  the  client  to 
minimize  the  impact  of  timeserver-provided  erroneous  time 
reports  [6].  However,  both  approaches  to  NTP  security  are 
very  limited  in  their  ability  to  protect  NTP  against  malicious 
timeservers. Clearly, when the timeserver with which an NTP 
client communicates is under the direct control of an attacker, 
encrypting  client-server  communications  offers  no  protection. 
In  addition,  the  security  of  client-side  algorithms  for  syncing 
with  timeservers  is  crucially  dependent  on  the  assumption 
that  the  set  of  timeservers  to  which  a  client  can  potentially
Network  and  Distributed  Systems  Security  (NDSS)  Symposium  2021
21-25  February  2021, Virtual 
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.24302
www.ndss-symposium.org
synchronize does not contain “too many” timeservers that are
under the attacker’s (direct or indirect) control. As our results
below demonstrate, this assumption can easily be violated in
practice.
Our focus, in contrast to the above discussed directions, is
on investigating and addressing NTP’s vulnerability to strategic
attacks by malicious timeservers. The natural starting point for
our investigation is the NTP Pool Project [20], which central-
izes access to thousands of timeservers across many countries
and organizational domains and is used, by default, by most,
if not all, major open source OS distributions (including the
major Linux distributions), router vendors, home automation
systems, security cameras, household appliances, and more [5],
[18]. As evidenced by the many millions of systems that rely
on the NTP server pool for time synchronization, the NTP Pool
Project successfully facilitates accurate time synchronization
at scale. However, as our results shall demonstrate, the pool’s
mechanisms for assigning timeservers to clients are vulnerable
to hazardous attacks.
We consider two strategies for an attacker: compromising
existing NTP timeservers and injecting new timeservers into
the NTP server pool.
Control over fairly few existing NTP timeservers can
impact time at many clients. An NTP client that uses the NTP
server pool is periodically assigned timeservers to sync to by
the pool. Recent proposals [6] call for signiﬁcantly increasing
the number of timeservers the client can potentially sync with
to avoid being overly dependent on the input of any single
timeserver. We observe, however, that even so, an attacker in
control of fairly few servers in the pool can inﬂict signiﬁcant
harm. As explained next, the root cause for this vulnerability
is that
the pool’s mechanism for assigning timeservers to
clients is oblivious to inter-server dependencies. Local time at
most NTP timeservers is derived from interaction with other
(lower strata [38]) timeservers. This implies that an attacker
in control of a low-stratum NTP timeserver can potentially
inﬂuence time at a client indirectly by manipulating time at
other (higher-stratum) timeservers. We show, through extensive
empirical analyses, how this can be leveraged by an attacker
for shifting time at country/state-scale, or even continent-scale,
adversely impacting the performance or security of various
applications. In particular, an attacker in control of merely
10s of timeservers in Europe or the US (out of thousands
of timeservers in Europe and many hundreds in the US) can
shift time forward/backwards by hours at many clients across
the entire continent/country,
impacting various applications
of interest. We observe, however, that more effective, and
also simpler to launch, attacks are feasible by injecting new
timeservers into the NTP server pool.
Inﬂuencing time computation at clients via the injection
of new timeservers is effective and simple. Entering a
new timeserver into the NTP server pool is remarkably easy.
Moreover, she/he entering the new timeserver, and operating
that timeserver, is trusted to provide truthful information about
the timeserver (e.g., its stratum [46]). We show how, through
the proper conﬁguration of parameters, an attacker that enters
a timeserver into the pool can increase the number of clients
its timeserver is assigned to by the pool by three orders of
magnitude (compared to the default timeserver conﬁguration).
As our empirical analyses establish, this translates to hundreds
of thousands of clients per hour trying to sync with that
timeserver. We show how this state of affairs can be leveraged
by an attacker for launching large-scale opportunistic attacks
(as with taking over existing NTP timeservers) but also for
launching strategic and stealthy attacks that target a speciﬁc
NTP client or group of clients. In addition, this attack strategy
is not limited in terms of the extent to which time can be
shifted and can be employed to shift time at clients by days,
weeks, months, and beyond, impacting a much broader range
of applications.
Towards mitigating attacks by malicious timeservers. The
manner in which the NTP server pool balances load across
timeservers when assigning timeservers to NTP clients reﬂects
differences across servers in terms of compute power and
network capacity, and in terms of the volume of NTP queries
the timeservers’ owners consent to support. Thus, any solution
for attacks on NTP by malicious timeservers must not only
preserve the time accuracy and precision of today’s NTP time
computation but also avoid overloading NTP timeservers. We
observe that promising recent proposals for “crowdsourcing”
NTP queries across many servers [6], namely, the Chronos
NTP client, if not applied with care, will not only fail to pro-
vide meaningful security beneﬁts but also, if widely deployed,
increase the load on a large fraction of NTP timeservers in
the pool by 200x − 300x. We propose backwards compatible
changes to the NTP Pool Project’s server-assignment scheme
for mitigating attacks by malicious servers. We explain how
Chronos can be coupled with our server assignment scheme in
manner that yields signiﬁcant security beneﬁts without over-
loading timeservers or impacting today’s NTP time accuracy
and precision. Our solution is compatible with the ongoing
efforts to standardize Chronos at the Internet Engineering Task
Force (IETF).
Organization. We provide necessary background on NTP and
the NTP server pool in Section II. We then provide a high-level
overview of the two considered attack strategies in Section III.
We present our empirical analyses of the two attack strategies
in Sections IV and V. We discuss how better security can be
attained without compromising today’s NTP time accuracy and
precision, or overloading timeservers, in Section VI, present
related work in Section VII, and conclude in Section VIII.
Ethics statement. Some of our results rely on experiments
with servers injected by us into the real NTP server pool. These
involved either measurements without manipulation or targeted
our own NTP clients. When not queried by our own clients, our
servers, which synced with popular stratum 1 servers in their
regions, and passed the NTP pool’s monitor tests, provided
truthful responses.
II. BACKGROUND: NTP AND THE NTP POOL PROJECT
A. NTP Overview
We present below a high-level overview of NTP’s client-
server architecture, focusing on the elements needed for the
exposition of our results. We refer the reader to the Appendix
and to [31], [32], [38] for a detailed exposition of NTP.
NTP clients. An NTP client periodically queries a set of time-
servers. The client exchanges messages with these timeservers
to learn the current clock readings at the timeservers and to
estimate the network delay with respect to each timeserver.
Based on the estimated delay and the reported clock readings
of a time server, the client computes the offset with respect to
that timeserver, i.e., the estimated difference in time between
the client’s local clock and the timeserver’s local clock. We
henceforth refer to the local time at a timeserver queried by
an NTP client, as estimated by that client from the server’s
offset, as the timeserver-provided “time sample”. To update its
local time, the client feeds the time samples obtained from
the timeservers into an algorithm that discards outliers and
computes, from the “surviving” time samples, a time to update
the local clock to. Speciﬁcally, Marzullo’s algorithm [28]–[30]
is applied in standard NTPv4 clients to ﬁnd a majority of
timeservers with accurate clocks (“truechimers” [1], [32]). See
Appendix A for a more thorough exposition of the NTPv4
client.
NTP timeservers. NTP timeservers are hierarchically ordered
according to strata. Stratum 0 devices are expected to be
highly accurate (e.g., atomic clocks, or clocks directly con-
nected to GPS antennas), and are not reachable via a network
connection. Stratum 1 timeservers are timeservers that use a
Stratum 0 device as a reference clock and are accessible via the
Internet. Stratum 2 timeservers are timeservers with Internet
connections that sync to Stratum 1 timeservers, and so on.
The NTP Pool Project. The NTP Pool Project centralizes
access to thousands of volunteer-provided NTP timeservers
across different countries and organizational domain. Prior
to the creation of the Project’s NTP timeserver pool, it was
customary to manually conﬁgure into an NTP client a hand-
ful of timeservers with which that client can synchronize.
Naturally,
this entailed the risk of overloading these few
servers, as well as high vulnerability to faulty or compromised
timeservers. Reliance on a small set of timeservers is still
common for users of products by various vendors (Apple,
Microsoft, Alibaba, etc.), which synchronize with timeservers
offered by these vendors by default [18], [41]. The NTP Pool
Project was started following the abuse of a small number
of public timeservers and is used, by default, by most, if
not all, open source OS distributions (including all major
Linux distributions), router vendors, home automation systems,
security cameras, household appliances, and more [5], [18].
The pool utilizes DNS to assign timeservers to NTP clients
based on client geolocation and also balances load across
2
Figure 1: The number of timeservers in several countries in Europe and North America.
Zone
Africa
Antarctica
Asia
Europe
North America
Oceania
South America
Pool size
46
0
307
2810
915
116
56
Table I: The number of timeservers per zone
these servers. The server pool is divided into zones based
on continent (e.g., europe.ntp.pool.org and asia.pool.ntp.org)
and country (e.g., us.pool.ntp.org and cn.pool.ntp.org). Table I
presents the number of servers in continent-level zones [12]. As
can be seen in the table, the timeservers in Europe and North
America constitute roughly 90% of all timeservers in the pool.
In addition, as shown in Fig. 1, which speciﬁes the number
of servers in different countries, there is high diversity in the
number of servers across countries (for instance, 30% of the
timeservers in Europe are in Germany, while France and the
Netherlands host about 15% and 7% of timeservers in Europe,
respectively). Moreover, only around 10% of timeservers in
the pool are stratum 1 servers.
New timeservers are entered into the pool via an interface
that enables specifying servers’ IP addresses and other conﬁg-
uration parameters. The best recommended practice for NTP
timeservers is to sync with a set of 4− 7 manually-conﬁgured
timeservers [13], which typically does not signiﬁcantly change
over time.
The pool monitors servers’ health by periodically (every
roughly 12 minutes [20]) querying servers for time reports
from a pool-controlled monitor server and removing servers
from the pool if these are unresponsive, or if their time reports
deviate from the monitor’s local time by “too much”.
B. Time-Shifting Attacks
As highlighted by recent studies [24], [26], NTP clients are
highly vulnerable to time-shifting attacks, in which an attacker
shifts the local time at the client forward/backwards.
Recall that the local time at a client is determined based
on the clock readings received from the timeservers the client
interacts with and the delay with respect to these timeservers,
as estimated by the client. By reporting false clock readings
in NTP messages, or affecting the experienced delay between
the client and the timeservers, an attacker can induce wrong
decisions at the NTP client. In particular, if the attacker has
sufﬁcient presence in the set of timeservers with which an NTP
client communicates, it can stealthily shift time at the client
forward/backwards by repeatedly pushing the client further
away from the actual time when queried by the client. For
instance, in ntpd v4.2.8p15 (released in June 2020), every
5 minutes, a malicious server can shift time at a client by
16 minutes, and so shifting the client’s local