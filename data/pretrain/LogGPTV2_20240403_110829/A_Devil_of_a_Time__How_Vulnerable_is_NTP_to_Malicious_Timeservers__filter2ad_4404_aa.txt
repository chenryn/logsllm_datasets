# A Devil of a Time: How Vulnerable is NTP to Malicious Timeservers?

**Authors:** Yarin Perry, Neta Rozen-Schiff, and Michael Schapira  
**Affiliation:** The Hebrew University of Jerusalem  
**Contact:** [PI:EMAIL, PI:EMAIL, PI:EMAIL]

## Abstract
The Network Time Protocol (NTP) synchronizes time across computer systems over the Internet and is crucial for ensuring the correctness and security of many Internet applications. Unfortunately, NTP is vulnerable to time-shifting attacks, which has motivated proposals and standardization efforts to authenticate NTP communications and secure NTP clients. However, even with these solutions in place, NTP remains highly exposed to attacks by malicious timeservers. This paper explores the implications of two attack strategies: (1) compromising existing NTP timeservers, and (2) injecting new timeservers into the NTP timeserver pool. We demonstrate that an opportunistic attacker can shift time at state-level or even continent-level scale by gaining control over a small number of existing timeservers. Additionally, we show that injecting new timeservers with disproportionate influence into the NTP timeserver pool is alarmingly simple and can be leveraged for both large-scale opportunistic and strategic, targeted attacks. We discuss a promising approach for mitigating such attacks.

## 1. Introduction
The Network Time Protocol (NTP) is essential for synchronizing computer systems across the Internet. Many Internet services and applications, including financial services, TLS certificates, Kerberos, DNS and BGP security, and Bitcoin, rely on NTP for both correctness and security. Unfortunately, as highlighted by recent studies, NTP, designed over three decades ago, is vulnerable to various forms of attacks, particularly time-shifting attacks, where an attacker shifts the local time at an NTP client forward or backward.

Proposals for securing NTP have focused on two complementary directions: (1) authenticating client-server communications through encryption, and (2) altering the manner in which local time is computed at the client to minimize the impact of erroneous time reports from timeservers. However, both approaches are limited in their ability to protect against malicious timeservers. When a timeserver is under the direct control of an attacker, encrypting client-server communications offers no protection. Moreover, the security of client-side algorithms for syncing with timeservers depends on the assumption that the set of timeservers does not contain "too many" that are under the attacker's control. Our results demonstrate that this assumption can easily be violated in practice.

In contrast to the above directions, our focus is on investigating and addressing NTP's vulnerability to strategic attacks by malicious timeservers. The NTP Pool Project, which centralizes access to thousands of timeservers across many countries and organizational domains, is used by default in most major open source OS distributions, router vendors, home automation systems, and more. While the NTP Pool Project successfully facilitates accurate time synchronization at scale, its mechanisms for assigning timeservers to clients are vulnerable to hazardous attacks.

We consider two attack strategies: (1) compromising existing NTP timeservers, and (2) injecting new timeservers into the NTP server pool. Control over a small number of existing NTP timeservers can significantly impact time at many clients. Even with recent proposals to increase the number of timeservers a client can sync with, an attacker in control of a few servers in the pool can inflict significant harm. This is because the pool's mechanism for assigning timeservers to clients is oblivious to inter-server dependencies. An attacker in control of a low-stratum NTP timeserver can potentially influence time at a client indirectly by manipulating time at other higher-stratum timeservers. Through extensive empirical analyses, we show how this can be leveraged to shift time at country/state-scale or even continent-scale, adversely impacting the performance or security of various applications.

However, more effective and simpler attacks can be launched by injecting new timeservers into the NTP server pool. Entering a new timeserver into the pool is remarkably easy, and the individual entering and operating the new timeserver is trusted to provide truthful information about it. We show how, through proper configuration, an attacker can increase the number of clients assigned to their timeserver by three orders of magnitude compared to the default configuration. This translates to hundreds of thousands of clients per hour trying to sync with that timeserver, enabling large-scale opportunistic and strategic, stealthy attacks. This strategy is not limited in terms of the extent to which time can be shifted and can be employed to shift time at clients by days, weeks, months, and beyond, impacting a much broader range of applications.

To mitigate attacks by malicious timeservers, any solution must preserve the time accuracy and precision of today’s NTP time computation and avoid overloading NTP timeservers. We propose backwards-compatible changes to the NTP Pool Project’s server-assignment scheme. We explain how the Chronos NTP client, if coupled with our server assignment scheme, can yield significant security benefits without overloading timeservers or impacting today’s NTP time accuracy and precision. Our solution is compatible with ongoing efforts to standardize Chronos at the Internet Engineering Task Force (IETF).

## 2. Background: NTP and the NTP Pool Project

### 2.1. NTP Overview
NTP operates in a client-server architecture. An NTP client periodically queries a set of timeservers to learn the current clock readings and estimate the network delay. Based on these estimates, the client computes the offset with respect to each timeserver and updates its local time using an algorithm that discards outliers and computes a time to update the local clock. Marzullo’s algorithm is commonly used in NTPv4 clients to find a majority of timeservers with accurate clocks ("truechimers").

NTP timeservers are hierarchically ordered according to strata. Stratum 0 devices are highly accurate (e.g., atomic clocks) and not reachable via a network connection. Stratum 1 timeservers use a Stratum 0 device as a reference clock and are accessible via the Internet. Stratum 2 timeservers sync to Stratum 1 timeservers, and so on.

### 2.2. The NTP Pool Project
The NTP Pool Project centralizes access to thousands of volunteer-provided NTP timeservers across different countries and organizational domains. Prior to the project, NTP clients were manually configured to synchronize with a small set of timeservers, which entailed the risk of overloading these servers and high vulnerability to faulty or compromised timeservers. The NTP Pool Project was started to address these issues and is used by default in most open source OS distributions, router vendors, home automation systems, and more.

The pool uses DNS to assign timeservers to NTP clients based on geolocation and balances load across these servers. The server pool is divided into zones based on continent and country. Table I presents the number of servers in continent-level zones. As shown, the timeservers in Europe and North America constitute roughly 90% of all timeservers in the pool. New timeservers are entered into the pool via an interface that enables specifying IP addresses and other configuration parameters. The best recommended practice for NTP timeservers is to sync with a set of 4-7 manually-configured timeservers, which typically do not change significantly over time.

The pool monitors servers' health by periodically querying them for time reports and removing unresponsive or inaccurate servers.

### 2.3. Time-Shifting Attacks
Recent studies highlight that NTP clients are highly vulnerable to time-shifting attacks, where an attacker shifts the local time at the client forward or backward. By reporting false clock readings or affecting the experienced delay, an attacker can induce wrong decisions at the NTP client. If the attacker has sufficient presence in the set of timeservers, they can stealthily shift time at the client. For example, in ntpd v4.2.8p15, a malicious server can shift time at a client by 16 minutes every 5 minutes.

## 3. Attack Strategies

### 3.1. Compromising Existing NTP Timeservers
Control over a small number of existing NTP timeservers can significantly impact time at many clients. The pool's mechanism for assigning timeservers to clients is oblivious to inter-server dependencies, allowing an attacker to influence time at a client indirectly by manipulating time at other higher-stratum timeservers. Through extensive empirical analyses, we show how this can be leveraged to shift time at country/state-scale or even continent-scale, adversely impacting the performance or security of various applications.

### 3.2. Injecting New Timeservers into the NTP Server Pool
Injecting new timeservers into the NTP server pool is remarkably easy, and the individual entering and operating the new timeserver is trusted to provide truthful information about it. We show how, through proper configuration, an attacker can increase the number of clients assigned to their timeserver by three orders of magnitude compared to the default configuration. This translates to hundreds of thousands of clients per hour trying to sync with that timeserver, enabling large-scale opportunistic and strategic, stealthy attacks. This strategy is not limited in terms of the extent to which time can be shifted and can be employed to shift time at clients by days, weeks, months, and beyond, impacting a much broader range of applications.

## 4. Mitigation Approaches
To mitigate attacks by malicious timeservers, any solution must preserve the time accuracy and precision of today’s NTP time computation and avoid overloading NTP timeservers. We propose backwards-compatible changes to the NTP Pool Project’s server-assignment scheme. We explain how the Chronos NTP client, if coupled with our server assignment scheme, can yield significant security benefits without overloading timeservers or impacting today’s NTP time accuracy and precision. Our solution is compatible with ongoing efforts to standardize Chronos at the Internet Engineering Task Force (IETF).

## 5. Conclusion
This paper highlights the vulnerabilities of NTP to attacks by malicious timeservers and proposes a promising approach for mitigating such attacks. By focusing on the NTP Pool Project and exploring two attack strategies, we demonstrate the need for robust and secure time synchronization mechanisms. Our proposed solution aims to enhance the security of NTP while maintaining its accuracy and precision.

## 6. Ethics Statement
Some of our results rely on experiments with servers injected by us into the real NTP server pool. These involved either measurements without manipulation or targeted our own NTP clients. When not queried by our own clients, our servers, which synced with popular stratum 1 servers in their regions and passed the NTP pool’s monitor tests, provided truthful responses.