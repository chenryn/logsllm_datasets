// produces equations that check d==Hash(block)
int block = GetBlock(d);
int block’ = block + 1;
// produces equations that check d’==Hash(block’)
Digest d’ = PutBlock(block’);
return d’;
}
Spice’s compiler translates each GetBlock call to a set of
121
equations that check if the hash of the supplied block equals
the input digest (this requires representing a hash function as a
set of constraints). PutBlock translates to a similar set of con-
straints. Since the veriﬁer supplies digests, unless the prover
identiﬁes a hash collision (which is infeasible), the prover is
compelled to supply the correct block to each GetBlock and
supply the correct digest as the response to each PutBlock.
Key-value store. Spice supports a key-value store using
a particular type of hash function H(·) that operates on sets
and is incremental [10, 11, 32]: given a set-digest dS for a set
S, and a set W, one can efﬁciently compute a set-digest for
S∪W. Speciﬁcally, there is a constant time operation ⊕ where:
H(S ∪ W) = H(S) ⊕ H(W) = dS ⊕ H(W). In more detail,
a key-value store is encoded using two sets: a read-set RS
and a write-set WS. These sets contain (key, value, timestamp)
tuples for every operation on the store. Neither the prover nor
the veriﬁer materializes these sets in full; they only operate
on them using the corresponding digest (which we illustrate
below). Thus, the veriﬁer’s digest of the key-value store is:
struct KVDigest {
SetDigest rs; // a set-digest of RS
SetDigest ws; // a set-digest of WS
}
Example. If the key-value store is empty, rs = ws = H({}).
Suppose the prover executes a program Ψ that invokes
insert(k, v), it is forced to return an updated KVDigest such
that the following holds (this is done by translating insert
into appropriate constraints, as in the GetBlock example):
rs = H({}), ws = H({(k, v, 1)}).
Now, suppose the prover executes Ψ(cid:2) that invokes get(k),
which should return a value v and update the timestamp associ-
ated of the tuple. To explain how KVDigest is updated, there
are two cases to consider. First, suppose the prover behaves
and returns v that was previously stored by insert(k, v),
then: rs = H({(k, v, 1)}), ws = H({(k, v, 1), (k, v, 2)}).
A key invariant here is that whenever the prover maintains
the key-value store correctly, the set underneath rs is a subset
of the set underneath ws. To illustrate the invariant further,
(cid:2) (cid:5)= v (for
consider the second case where the prover returns v
get(k)), then the set-digests returned by the prover will be:
(cid:2), 2)}).
rs = H({(k, v
(cid:2), 1)}), ws = H({(k, v, 1), (k, v
Observe that the set underneath rs is not a subset of the
set underneath ws. However, the veriﬁer cannot not detect
this (since set-digests have no structure to check the subset
property). Instead, the veriﬁer requires the prover to produce a
special proof πaudit periodically (e.g., for a sequence of inputs
x1, . . . xn) that proves the set underneath rs is a subset of the
set underneath ws. To do so, the prover’s πaudit proves:
∃{(ki, vi, tsi)} : ws (cid:9) rs = H({(ki, vi, tsi)}) ∧ ∀i, ki < ki+1,
where (cid:9) is the inverse of ⊕ (i.e., it results in removal of
elements from a set underneath the digest). This difference is
a set as the ki are distinct. An honest prover takes {(ki, vi, tsi)}
to be all key-value-timestamp tuples in its current state.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:25 UTC from IEEE Xplore.  Restrictions apply. 
To produce πaudit, the prover incurs costs linear in the num-
ber of key-value tuples, but the linear cost is amortized over
all transactions processed within the epoch, and the proof pro-
duced by the prover is π = (πx1, . . . , πxn, πaudit). Finally, as
an optimization atop Spice [73], we observe that the veriﬁer
only needs to track a single set-digest d = ws (cid:9) rs.
3 Design
This section describes the design of Piperine. We begin with
an overview of Piperine and then delve into its details.
Overview of Piperine. Piperine provides a generic mecha-
nism to transform a replicated state machine (RSM) R into
another RSM R(cid:2)—while retaining the safety and liveness
properties of R. To explain how Piperine realizes this trans-
formation, we start with a brief review of RSMs. Recall that
an RSM is a methodology to transform a state machine M
into a distributed computation running on a set of nodes such
that the distributed computation emulates a safe and live S
(under certain operating conditions about nodes, such as fault
thresholds, and the network connecting them).
In the context of an RSM, the safety property is that non-
faulty nodes progress through the same sequence of state
transitions; the liveness property is that non-faulty nodes can
eventually execute a state transition [55]. An RSM can have
one or more safety and liveness properties and Piperine is
oblivious to the speciﬁc properties (in other words, Piperine
simply preserves the safety and liveness properties of the
underlying RSM R in the transformed RSM R(cid:2)).
Constructing R(cid:2). To construct R(cid:2) for a given R that repli-
cates a state machine M, the high level recipe is as follows.
First, Piperine splits M into a preprocessing phase and a state
machine: the prover and the veriﬁer respectively (by employ-
ing the veriﬁable state machine primitive from Section 2).
The prover processes inputs (i.e., transactions) for S and
transforms them into inputs for the veriﬁer. The prover is fully
untrusted and maintains no private state, so the transactions
can be processed by any party on any untrusted infrastructure.
More concretely, a transaction can be processed by the client
that creates it, the RSM node that ﬁrst receives it, or a third
party; the choice is arbitrary and the choice can be made for
each transaction independently, so our transformation does
not incur any loss of decentralization. Such ﬂexibility exists
because the prover in Piperine is untrusted, by design, not
only for safety but also for liveness.
Finally, nodes in the original RSM then replicate the
veriﬁer—instead of S—using R. Thus, R(cid:2) is an RSM that
replicates the veriﬁer and processes transformed inputs and
proofs from the prover. Below, we provide an overview of
mechanics behind this instantiation and then provide intuition
for why R(cid:2) inherits any safety and liveness properties of R.
Overview of mechanics. Figure 1 summarizes the prover
and the veriﬁer machinery that Piperine uses.
In Piperine’s context, a state machine M is speciﬁed with
(Ψ,S0), where Ψ is a program that encodes state machine
transitions and S0 is the initial state of the machine. When
P is given a state S of S and a transaction x (S = S0 at
beginning of time), it produces:
(cid:2) of the new state S(cid:2), and a proof
• The output y, a digest d
(cid:2).
π = (πx, πaudit).
• A succinct representation Δ of the difference between S
and S(cid:2), and a proof πΔ that this difference is consistent
with the old and new digests d, d
For efﬁciency, πaudit and πΔ are produced by the prover
after processing a batch of transactions. For ease of exposition,
we include it with every transaction x (we relax this in (§3.3)).
V begins with a copy of S as well as its digest d. When V
(cid:2), π, Δ, πΔ) produced by the
is given as input a tuple (x, y, d
prover, it runs the local checks of Section 2, and in addition
checks that πΔ proves that Δ represents the correct difference
(cid:2). If these checks pass,
between states whose digests match d, d
V applies Δ to S to obtain S(cid:2).
Safety and liveness intuition. The veriﬁer’s initial state is
the initial state of the state machine S0 and a digest of
that state d. Since Piperine runs V as a state machine that
is replicated by RSM R and since R is safe, the veriﬁer
running at each node will only transition to a new state if
(cid:2), π, Δ, πΔ) pass the veriﬁer’s local checks. From the
(x, y, d
completeness and soundness properties of the underlying ver-
iﬁable state machine, this happens only if y is a correct output
(cid:2) is the digest of the state after
for the transaction x and d
executing x. Furthermore, the veriﬁer running at each node
obtains a correct copy of the updated state using Δ. Thus, R(cid:2)
is both safe and live as long as R is safe and live. The only ad-
ditional assumption in R(cid:2) compared to R is the cryptographic
hardness assumptions made by veriﬁable state machines. We
make this intuition more formal later (§3.3).
RSMs with an open membership model. In RSMs with
an open membership model such as blockchains, ensuring
liveness means that a new node joining the system must be
able to start with the initial state S0 and incrementally update
it using publicly available sequence of transformed inputs
until it reaches the up-to-date state S(cid:2). In other words, the
transformed inputs must be available to any new node as part
of the blockchain. We provide more details when we apply
Piperine to reduce per-transaction costs of Ethereum (§4).
3.1 Ensuring liveness
The usual way for nodes in RSMs to keep their state up-to-
date is to reexecute transitions on all the submitted inputs
that have been agreed upon by the replicated system. Because
nodes in Piperine avoid such reexecution, the veriﬁer running
at each node in the transformed RSM must be able to recover
a correct state S(cid:2) with a digest d
(cid:2) from S and Δ. Furthermore,
this must be efﬁcient both for V and P. As we illustrate via a
series of straw-man solutions below, this is non-trivial due to
122
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:25 UTC from IEEE Xplore.  Restrictions apply. 
state:
(cid:2288)
(cid:2285), (cid:2296)
if (cid:2024)(cid:1876),(cid:2024)(cid:2911)(cid:2931)(cid:2914)(cid:2919)(cid:2930),(cid:2024)(cid:2940)
(cid:2285)←(cid:2285)+Δ
(cid:2296)←(cid:2296)′
pass checks:
(cid:1876)
(cid:1876),(cid:1877),(cid:2296)(cid:4593),(cid:2024)(cid:1876)
(cid:2024)(cid:1853)(cid:1873)(cid:1856)(cid:1861)(cid:1872)
Δ,(cid:2024)(cid:2940)
(cid:2282)Ψ
Ψaudit
ΨΔ
verify (cid:2296),(cid:2296)(cid:4593),Δ
get
put
consistent
state(cid:2285)′
Δ
key-
value 
Store
FIGURE 1—Overview of Piperine’s proof machinery; our extensions
are depicted with dotted components. To apply this to RSMs, instead
of running a state machine, each node in an RSM runs the veriﬁer,
which veriﬁes proofs and state changes produced by an untrusted
prover who veriﬁably executes the designated state machine.
the requirements on computational efﬁciency, bandwidth re-
quirements, and a desire to execute transactions concurrently.
Straw-man #1. The prover could set Δ = S(cid:2) and have πΔ
prove that H(Δ) = d
(cid:2). Collision resistance of H ensures
that S(cid:2) is correct if the digests match, and the proof shows
that the digest is computed correctly. The veriﬁer running
at each node performs checks as above, and if they pass, it
overwrites its local state with Δ. Unfortunately, this approach
incurs unacceptable network and computational costs. Having
Δ = S(cid:2) means that the prover would need to send its whole
state over the network for each batch of state transitions, and
that the veriﬁer (running at each node in an RSM) would need
to incur costs linear in the size of S(cid:2).
Straw-man #2. The prover could augment the proof πx to
output the state changes (i.e. a list of updated key-value pairs)
caused by executing the transaction x. The veriﬁer could then
apply those state changes. However, for efﬁciency, Piperine’s
base operates in a setting where it produces πaudit after execut-
ing a set of transactions (§2). As a result, the prover does not
materialize a concrete ordering of transactions, but merely
proves that one exists. So a malicious prover can violate safety
by providing a different ordering to the veriﬁer(s) than the
one it used internally. A solution is to make the prover’s exe-
cution veriﬁably deterministic, but it is not entirely clear how
to achieve this—without incurring substantial costs.
Additionally, the network trafﬁc is proportional to the sum
of the count of state changes in each transaction processed
by the prover—rather than the overall state change from S
to S(cid:2). In workloads where a part of the state is updated by
many transactions, the network trafﬁc includes each of those
changes, instead of just the ﬁnal values, which is sub-optimal.
Our solution. Piperine’s prover sets Δ to be a minimal set
of writes needed to take S to S(cid:2), and directly proves that:
∃S : d = H(S) ∧ d
(cid:2) = H(Apply(S, Δ)).
Clearly, this approach is efﬁcient for V, as the number of
changes to make it to progress from S to S(cid:2) is the minimal
(cid:2)
, Δ)
sum ← H({})
for (k, vΔ, tΔ) in Δ do
1: function delta(d, d
2:
3:
4:
5:
6:
7:
8:
exists, vδ, tδ ← RPC(GETOLDVALUE, k)
sum ← sum ⊕ H({(k, vΔ, tΔ)})
if exists then
sum ← sum (cid:4) H({(k, vδ, tδ)})
assert(sum = d
(cid:2) (cid:4) d)
FIGURE 2—The description of ΨΔ, a computation that the prover
runs to prove that its purported state changes are correct.
possible. To explain how we make it efﬁcient for P to generate
this proof, it is necessary to unpack the details of how a key-
value store is supported in Spice [73].
Details. Recall that Piperine’s base machinery employs
an incremental hash function H(·) for sets to implement a
key-value store K. Let WS, RS be the sets of all writes and
reads to K at the end of the last epoch (i.e., at the time the last
πaudit was produced and veriﬁed). Note that neither the prover
nor the veriﬁer explicitly materializes these sets. A correct
prover simply maintains K’s current state S, and the veriﬁer
maintains a single set-digest d. Furthermore, at the end of an
epoch, the invariant is that S = WS − RS and H(S) = d.
Now, in the next epoch, when the prover executes a trans-
action x, it sends to the veriﬁer, as part of πx, the difference
δx = H(WSx)−H(RSx), where WSx, RSx are the set of writes