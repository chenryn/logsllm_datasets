(cid:2)
, Token
We built a micro-benchmark to evaluate the performance
of our privacy-preserving and auditing algorithms and com-
pare them with a state-of-the-art approach, zk-SNARKs.
For FabZK, we measure the run time for data encryption,
i.e., computing (cid:4)Com, Token(cid:5) tuples, for generating NIZK
proofs (i.e., (cid:4)RP, DZKP, Token
(cid:2)(cid:2)(cid:5) quartets), and for
verifying the ﬁve proofs. These are the three key functions
implemented in FabZK’s chaincode APIs and are the major
contributors to FabZK’s overhead. As comparison, we also
evaluate zk-SNARKs using libsnark [36], a library that im-
plements a zero-knowledge veriﬁcation scheme and has been
used by other blockchain systems such as Zerocash [12].
Libsnark follows a similar design pattern of data encryp-
tion (through key generation), proof generation, and proof
veriﬁcation. Libsnark is implemented in C++.
We run the micro-benchmark on a VM with eight
2.10GHz cores. We vary the number of organizations from
1 to 20. For each setting, we collect data for 100 runs. In
each run, the system processes 128 bytes of data (including
transfer amount, private key, asset, etc.) for every organiza-
tion.
As shown in Table II, FabZK outperforms libsnark in
both data encryption and proof veriﬁcation. Its proof gen-
eration has increasingly more overhead, as the number of
organizations increases. libsnark has almost constant proof
generation time (∼196ms), because it only needs to generate
one set of NIZK proofs for each transaction. In contrast, in
FabZK’s public ledger, each row consists of encrypted data
for all organizations. Hence, as the number of organizations
increases, it takes longer for FabZK to generate the proofs.
From Table II, one can also see that
the multithreaded
implementation of proof generation is effective. The latency
increase is moderate until the system supports more than
8 organizations, as the node used in our experiment only
has 8 cores. In our future work, we will further improve
FabZK’s performance by exploring cross-node job schedul-
ing schemes.
(cid:33)
(cid:24)
(cid:30)
(cid:28)
(cid:25)
(cid:32)
(cid:1)
(cid:25)
(cid:26)
(cid:22)
(cid:15)
(cid:14)
(cid:26)
(cid:21)
(cid:23)
(cid:15)
(cid:7)
(cid:39)(cid:36)(cid:36)
(cid:38)(cid:41)(cid:36)
(cid:38)(cid:36)(cid:36)
(cid:37)(cid:41)(cid:36)
(cid:37)(cid:36)(cid:36)
(cid:41)(cid:36)
(cid:36)
(cid:2)(cid:9)(cid:24)(cid:12)(cid:18)(cid:16)(cid:20)(cid:12)
(cid:29)(cid:17)(cid:5)(cid:12)(cid:11)(cid:14)(cid:12)(cid:23)
(cid:3)(cid:9)(cid:10)(cid:8)(cid:4)(cid:31)(cid:27)(cid:30)(cid:21)(cid:31)(cid:9)(cid:26)(cid:11)(cid:16)(cid:25)(cid:16)(cid:20)(cid:14)
(cid:3)(cid:9)(cid:10)(cid:8)(cid:4)(cid:31)(cid:27)(cid:31)(cid:9)(cid:26)(cid:11)(cid:16)(cid:25)(cid:16)(cid:20)(cid:14)
(cid:38)
(cid:40)
(cid:42)
(cid:43)
(cid:37)(cid:38)
(cid:6)(cid:26)(cid:19)(cid:10)(cid:12)(cid:23)(cid:1)(cid:21)(cid:13)(cid:1)(cid:21)(cid:23)(cid:14)(cid:9)(cid:20)(cid:16)(cid:29)(cid:9)(cid:25)(cid:16)(cid:21)(cid:20)(cid:24)
(cid:37)(cid:36)
(cid:37)(cid:40)
(cid:37)(cid:42)
(cid:37)(cid:43)
Figure 5: Throughput of asset exchange transactions for the
prototype using native Fabric APIs (baseline), zkLedger, and
FabZK’s APIs with and without auditing (higher is better).
B. Application Performance
Next, we evaluate the overhead introduced by FabZK’s
privacy and audit functionalities. We use the sample appli-
cation described in Section V-C for this evaluation.
Testbed: We deploy the sample application in a Hyper-
ledger Fabric network, where each organization owns one
peer node acting as its endorser and committer, and one
certiﬁcate authority (CA) node. We setup a Kafka-based
ordering service with 3 ZooKeeper nodes, 4 Kafka brokers,
and one Fabric orderer. The orderer node creates blocks
using the default conﬁguration: 2 second batch timeout and
≤10 transactions per block. We group 5 octa-core VMs
into a docker swarm cluster and then provision all Fabric
components as containers in the cluster. Peer nodes and CA
nodes of all organizations are evenly distributed to 4 VMs
and the ordering service nodes are on the other VM.
Throughput Evaluation: We compare the throughput of
the sample application running on three systems: FabZK,
zkLedger,2 and the native Fabric (i.e.,
the baseline). In
this experiment, all organizations generate transactions con-
currently, and each organization submits 500 transactions
sequentially. A round of auditing is triggered when the
ledger accumulates 500 new transactions. The results are
shown in Figure 5.
We observe that FabZK’s throughput scales similarly to
the baseline. Without turning on audit, FabZK introduces
only 3% to 10% throughput degradation, compared to the
baseline. With audit turned on for every 500 transactions,
FabZK’s throughput overhead becomes 3% to 32%, com-
pared to the baseline. Apparently, the additional overhead of
computing and verifying the range and disjunctive proofs is
quite signiﬁcant. In practice, however, this can be mitigated
by carefully selecting the audit frequency, especially during
2We implement a prototype of zkLedger on top of the Fabric architec-
ture, too. Our prototype uses the BulletProofs instead of Borromean ring
signatures to generate/validate range proofs for zkLedger. This change can
only improve the throughput.
551
(cid:17)(cid:29)(cid:34)(cid:30)(cid:26)(cid:23)(cid:1)(cid:11)(cid:9)(cid:1)(cid:7)(cid:10)(cid:4)(cid:3)(cid:9) (cid:21)(cid:24)(cid:20)(cid:25)(cid:29)(cid:21)(cid:30)(cid:22)(cid:23)
(cid:15)(cid:27)(cid:25)(cid:23)(cid:29)(cid:33)
(cid:7)(cid:1)(cid:14)(cid:1)(cid:9)(cid:10)(cid:4)(cid:8)
(cid:17)(cid:29)(cid:34)(cid:30)(cid:26)(cid:23)(cid:1)(cid:12)(cid:1)(cid:6)(cid:5)(cid:2)(cid:1)(cid:11)(cid:5)(cid:8)(cid:7) (cid:21)(cid:24)(cid:20)(cid:25)(cid:29)(cid:21)(cid:30)(cid:22)(cid:23)
(cid:7)(cid:4)(cid:14)(cid:1)(cid:8)(cid:7)(cid:4)(cid:9)
(cid:19)(cid:25)(cid:28)(cid:23)(cid:2)(cid:28)(cid:32)(cid:23)(cid:21)(cid:3)
(cid:16)(cid:29)(cid:22)(cid:30)(cid:31)(cid:32)(cid:23)(cid:31)
(cid:18)(cid:31)(cid:22)(cid:23)(cid:31)(cid:23)(cid:31)
(cid:15)(cid:30)(cid:28)(cid:28)(cid:25)(cid:33)(cid:33)(cid:23)(cid:31)
(cid:7)(cid:2)(cid:14)(cid:1)(cid:7)(cid:4)(cid:12)
(cid:7)(cid:3)(cid:14)(cid:1)(cid:11)(cid:5)(cid:4)(cid:5)
(cid:7)(cid:5)(cid:14)(cid:1)(cid:6)(cid:4)(cid:13)
(cid:7)(cid:6)(cid:14)(cid:1)(cid:11)(cid:5)(cid:4)(cid:5)
transfer
Figure 6: Timeline of an asset
transaction of
the sample application with 8 organizations. The transac-
tion involves two chaincode invocations: transfer (T1) and
validation (T4). The duration of ZkPutState (T2) and
ZkVerify (T5) are highlighted on the endorser’s axis. The
orderer spends about 70ms (T3 and T6) in creating the block
committed to the public ledger.
peak hours of operation.
Compared to zkLedger, the efﬁciency of FabZK is ob-
vious. Its throughput with (without) auditing is 5 (5) to
189 (235) times that of zkLedger. This is expected, be-
cause transactions in zkLedger are validated and committed
sequentially, while FabZK beneﬁts from the parallelized
execution described earlier.
Latency Evaluation: Figure 6 illustrates the timing of
each step during an asset exchange transaction, without
auditing being triggered. From the application’s perspective,
it takes about 45.3ms and 32.4ms to run a transfer chaincode
method and a validation method, respectively. The run time
of ZkPutState (2.8ms) includes 0.8ms of computing
(cid:4)Com, Token(cid:5) tuples and 2ms of serializing the tuples to
byte stream and writing it to the peer’s transient data store.
The run time of ZkVerify (1.9ms) includes 0.5ms of
verifying Proof of Balance and Proof of Correctness, and
1.4ms of serializing and writing them to the peer’s data store.
In addition, the orderer node often waits to batch-process
several transactions in a single block. Compared to the end-
to-end transaction latency in Fabric, the absolute overhead
of the FabZK APIs is relatively small: ZkPutState and
ZkVerify contribute to less than 10% of the overall
latency, while more than 90% of latency is caused by node-
to-node communications, serialization/deserialization, block
validation, I/O to the ledger, etc.
Next, we evaluate the audit latency, i.e., computing and
verifying the range proofs and disjunctive proofs for a
transfer row on the public ledger. In particular, we study
the effect of the number of CPU cores in a peer node on
the performance of FabZK’s chaincode APIs: ZkAudit and
ZkVerify. Figure 7 plots the latency of ZkAudit and
ZkVerify for a 4-organization network, as the number of
CPU cores increases from two to eight. For ZkAudit, using
peer nodes with 4 and 8 CPU cores improves its performance
by 50% and 90%, respectively, compared to using 2 cores.
This performance gain is due to the parallelized computation
of range proofs and disjunctive proofs (Section V-B). How-
Solidus [19] obscures the transaction graph via publicly
veriﬁable oblivious RAM machines (PVORM). A PVORM
provides users a map from logical memory addresses to
remote physical addresses. It provides the conﬁdentiality of
transaction graph and transaction details by obscuring mem-
ory access patterns. However, Solidus only works on bank-
intermediated networks, which means it can only hide the
information of bank’s users but still exposes the transaction
graph among banks (or organizations).
Most related to this work, zkLedger [20] uses a tabular
structured ledger to conceal the transaction graph. In each
transaction, zkLedger computes the commitments for all the
organizations. By adding extra indistinguishable commit-
ments in each transaction, zkLedger hides the identities of
senders and receivers, thus concealing the transaction graph.
However, zkLedger requires auditors and every participant
to actively validate each transaction before this transaction is
accepted to the ledger, which inevitably increases the latency
and reduces the throughput.
In FabZK design, We adopt the tabular structured ledger
from zkLedger, but develop additional proofs and validation
mechanisms to boost audit performance.
VIII. CONCLUSION
Data privacy and conﬁdentiality are critical for peer-to-
peer transactions in blockchain systems. Although Hyper-
ledger Fabric prohibits unidentiﬁed peers from accessing
channel resources, transaction data are exposed to all chan-
nel participants. To overcome this limitation, we present
FabZK, an extension to Fabric that supports auditable
privacy-preserving smart contracts via well-constructed and
veriﬁable cryptographic primitives, including Pedersen com-
mitments and non-interactive zero-knowledge proofs. FabZK
provides a set of APIs for both client code and chaincode to
achieve on-demand, automated validation. We have imple-
mented FabZK on Fabric v1.3.0, evaluated its performance
against other, state-of-the-art approaches (i.e., zk-SNARKs,
zkLedger). Our micro-benchmarking results show that the
cryptographic primitives used by FabZK outperform those
by zk-SNARKs in generating and verifying non-interactive
zero-knowledge proofs. We have also demonstrated a sam-
ple application using FabZK APIs. Evaluations on its
performance show that FabZK enables auditable privacy-
preserving transactions at the cost of 3% to 32% throughput
degradation and less than 10% latency increase, compared
to the native Fabric system. FabZK achieves throughput up
to 180 times higher than zkLedger.
ACKNOWLEDGMENTS
We would like to thank Alysson Bessani, our shepherd,
and the anonymous reviewers for their insightful feedback
and valuable comments.
Figure 7: Latency of running ZkAudit and ZkVerify on
VMs with different number of CPU cores.
ever, the improvement diminishes from 4 cores to 8 cores,
since the chaincode only needs to spawn 4 threads for the 4
organizations. We also observe that parallelized processing
has minimal impact on the performance of ZkVerify, as
the computation is less intensive for this veriﬁcation.
VII. RELATED WORK
Conﬁdential Transactions: Mechanisms for supporting
conﬁdential transactions have been studied extensively previ-
ously. To conceal balances and transaction values, publicly-
veriﬁable cryptographic commitment schemes have been
used to allow pseudonymous transfer of assets [14], [15],
[19], [20], [37], [38].
To prevent double spending, work has also been done
to show proof of assets using range proofs. For example,
the Borromean ring signature [39] is widely used for range
proofs in [14], [15], [19], [20], [40]. However, such range
proof’s overhead is signiﬁcant: a transaction with two out-
puts and 32 bits of precision requires 5 KiB of range proof
[31]. To reduce the size of range proofs, zero-knowledge
Succinct Non-interactive ARgument of Knowledge proofs
(zk-SNARKs) are used [12], [41], [42], [43], [44], [45], [46],
[47], [48]. Even though these approaches can provide short-
sized range proofs, they require an expensive trusted setup.
Recently, an inner-product range proof has been proposed in
Bulletproofs [31] with short proof size, and linear proving
and veriﬁcation time.
FabZK uses Pedersen commitments [14] and the inner-
product range proofs [31] to achieve efﬁcient conﬁdential
transactions.
Anonymized Transactions: Previous work has anonymized
the transaction participants to conceal the transaction graph
using identity mixes, oblivious RAM, or tabular structured
ledgers. Examples of using the identity-mix approach in
current cryptocurrency and blockchain systems are [49],
[50], [51], [52], [53], [54], [55], [56]. Although mixes can
protect participating users, it provides partial anonymity.
Mix-type approaches are vulnerable to adversary tools, such
as Coinjoin Sudoku [57],
that can identify users within
a transaction by correlating transaction outputs and inputs
[58].
552
APPENDIX
x1
Range Proof: An inner-product range proof in BulletProofs
[31] takes a user speciﬁed uRP and rRP as input, and gener-
ates a proof RP = rp, including 1) a Pedersen commitment
ComRP = rp.Com = com(uRP, rRP), 2) two Pedersen vector
commitments rp. (cid:2)A, rp.(cid:2)S with a binding value rp.μ, 3) an
inner-product of two linear vector polynomials denoted by
rp.ˆt with a binding value rp.τ and an inner-product proof
rp.IPP, 4) two Pedersen commitments to the two coefﬁcients
of rp.ˆt denoted by rp.T1, rp.T2, and 5) three challenges
(cid:2)m
rp.Cx, rp.Cy, rp.Cz. To prevent modular wraparound, i.e.,
com(u, r) = com(u+p, r), p is the prime order of the cyclic
i=1 ui ∈ [0, 2t) for
group G, we speciﬁcally prove that
some small integer t. In our implementation, we set t = 64.
Disjunctive Zero-knowledge Proof: A non-interactive vari-
ant of the Chaum-Pedersen zero-knowledge proofs for the
transaction txm is represented as:
w1
1 , y
w2
2 , y
(7)
where ZK(gx, yx ∧ gw, yw, chall, resp) represents a non-
interactive Σ-protocol [33] to prove the knowledge of the
secret key sk (i.e., x1 = sk) or the knowledge of random
numbers (i.e., x2 = r − rRP), g
are two gen-
eralized Schnorr proofs [59], w1 and w2 are two random
(cid:2)(cid:2)),
(cid:2)), chall2 = Hash(Token
(cid:3)m
(cid:3)m
numbers, chall1 = Hash(Token
resp1 = w1 + x1chall1, resp2 = w2 + x2chall2, g1 =
, g2 =
(
(cid:2)(cid:2)
pk, y2 = Token/Token
x1
DZKP = ZK1(g
1 , y
∧ZK2(g
x2
2 , y