# 基于内存 Webshell 的无文件攻击技术研究
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者: LandGrey@观星实验室
## 一. 情况介绍
红队人员在面对蓝队的严防死守与”盯梢”式的防御策略时，传统需要文件落地的攻击技术往往会受到掣肘，基于 Web 的无文件攻击技术逐渐成为 Web
安全的一种新的研究趋势。
所以我们重点研究了基于 Java 的常用 Web 框架 — SpringMvc，并实现了利用多种不同的技术手段，往内存中注入恶意 Webshell
代码的无文件攻击技术。
## 二. 必要知识
在切入正题前，首先需要了解下 Spring 框架中的几个必要的名词术语。
### Bean
bean 是 Spring 框架的一个核心概念，它是构成应用程序的主干，并且是由 Spring IoC 容器负责实例化、配置、组装和管理的对象。
通俗来讲：
  * bean 是对象
  * bean 被 IoC 容器管理
  * Spring 应用主要是由一个个的 bean 构成的
### ApplicationContext
Spring 框架中，BeanFactory 接口是 Spring IoC容器 的实际代表者。
从下面的接口继承关系图中可以看出，ApplicationContext 接口继承了 BeanFactory
接口，并通过继承其他接口进一步扩展了基本容器的功能。
因此，org.springframework.context.ApplicationContext接口也代表了 IoC容器
，它负责实例化、定位、配置应用程序中的对象(bean)及建立这些对象间(beans)的依赖。
IoC容器通过读取配置元数据来获取对象的实例化、配置和组装的描述信息。配置的零元数据可以用xml、Java注解或Java代码来表示。
另外，如下图，还有一堆各式各样的 context 继承了 ApplicationContext 接口，太繁杂不展开描述，仅供参考。
### ContextLoaderListener 与 DispatcherServlet
下面是一个典型 Spring 应用的 web.xml 配置示例：
        HelloSpringMVC
            contextConfigLocation
            /WEB-INF/applicationContext.xml
            org.springframework.web.context.ContextLoaderListener
            dispatcherServlet
            org.springframework.web.servlet.DispatcherServlet
                contextConfigLocation
                /WEB-INF/dispatcherServlet-servlet.xml
            1
            dispatcherServlet
            /
在正式了解上面的配置前，先介绍下关于 Root Context 和 Child Context 的重要概念：
  * Spring 应用中可以同时有多个 Context，其中只有一个 Root Context，剩下的全是 Child Context
  * 所有Child Context都可以访问在 Root Context中定义的 bean，但是Root Context无法访问Child Context中定义的 bean
  * 所有的Context在创建后，都会被作为一个属性添加到了 ServletContext中
**ContextLoaderListener**
ContextLoaderListener 主要被用来初始化全局唯一的Root Context，即 Root
WebApplicationContext。这个 Root WebApplicationContext 会和其他 Child Context 实例共享它的
IoC 容器，供其他 Child Context 获取并使用容器中的 bean。
回到 web.xml 中，其相关配置如下：
        contextConfigLocation
        /WEB-INF/applicationContext.xml
        org.springframework.web.context.ContextLoaderListener
依照规范，当没有显式配置 ContextLoaderListener 的 contextConfigLocation 时，程序会自动寻找 /WEB-INF/applicationContext.xml，作为配置文件，所以其实上面的  标签对其实完全可以去掉。
**DispatcherServlet**
DispatcherServlet 的主要作用是处理传入的web请求，根据配置的 URL pattern，将请求分发给正确的 Controller 和
View。DispatcherServlet 初始化完成后，会创建一个普通的 Child Context 实例。
从下面的继承关系图中可以发现： DispatcherServlet 从本质上来讲是一个 Servlet（扩展了 HttpServlet )。
回到 web.xml 中，其相关配置如下：
        dispatcherServlet
        org.springframework.web.servlet.DispatcherServlet
            contextConfigLocation
            /WEB-INF/dispatcherServlet-servlet.xml
        1
上面给 org.springframework.web.servlet.DispatcherServlet 类设置了个别名
dispatcherServlet ，并配置了它的 contextConfigLocation 参数值为 /WEB-INF/dispatcherServlet-servlet.xml。
依照规范，当没有显式配置 contextConfigLocation 时，程序会自动寻找 /WEB-INF/-servlet.xml，作为配置文件。因为上面的  是
dispatcherServlet，所以当没有显式配置时，程序依然会自动找到 /WEB-INF/dispatcherServlet-servlet.xml
配置文件。
综上，可以了解到：每个具体的 DispatcherServlet 创建的是一个 Child Context，代表一个独立的 IoC 容器；而
ContextLoaderListener 所创建的是一个 Root Context，代表全局唯一的一个公共 IoC 容器。
如果要访问和操作 bean ，一般要获得当前代码执行环境的IoC 容器 代表者 ApplicationContext。
## 三. 技术要点
  * Q: spring 内存注入 Webshell，要达到什么样的效果？
  * A: 一言以蔽之：在执行完一段 java 代码后，可通过正常的 URL 访问到内存中的 Webshell 获得回显即可。
在经过一番文档查阅和源码阅读后，发现可能有不止一种方法可以达到以上效果。其中通用的技术点主要有以下几个：
  1. 在不使用注解和修改配置文件的情况下，使用纯 java 代码来获得当前代码运行时的上下文环境；
  2. 在不使用注解和修改配置文件的情况下，使用纯 java 代码在上下文环境中手动注册一个 controller；
  3. controller 中写入 Webshell 逻辑，达到和 Webshell 的 URL 进行交互回显的效果；
## 四. 技术实现
### 获得当前代码运行时的上下文环境
**方法一** ：getCurrentWebApplicationContext
    WebApplicationContext context = ContextLoader.getCurrentWebApplicationContext();
如下图， getCurrentWebApplicationContext 获得的是一个 XmlWebApplicationContext 实例类型的
Root WebApplicationContext。
注意这里及下面实现方法中的 Root WebApplicationContext 都是后文的一个伏笔。
**方法二** ：WebApplicationContextUtils
    WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest()).getServletContext());
通过这种方法获得的也是一个 Root WebApplicationContext 。此方法看起来比较麻烦，其实拆分起来比较容易理解，主要是用
WebApplicationContextUtils的
    public static WebApplicationContext getWebApplicationContext(ServletContext sc)
方法来获得当前上下文环境。其中 WebApplicationContextUtils.getWebApplicationContext 函数也可以用
WebApplicationContextUtils.getRequiredWebApplicationContext来替换。
剩余部分代码，都是用来获得 ServletContext 类的一个实例。仔细研究后可以发现，上面的代码完全可以简化成方法三中的代码。
**方法三** ：RequestContextUtils
    WebApplicationContext context = RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest());
上面的代码使用 RequestContextUtils 的
    public static WebApplicationContext getWebApplicationContext(ServletRequest request)
方法，通过 ServletRequest 类的实例来获得 WebApplicationContext 。
如下图，可以发现此方法获得的是一个名叫 dispatcherServlet-servlet 的 Child WebApplicationContext。这个
dispatcherServlet-servlet 其实是上面配置中 dispatcherServlet-servlet.xml 的文件名。
进一步分析，代码中有个 RequestContextHolder.currentRequestAttributes() ，在前置知识中已经提到过
所有的Context在创建后，都会被作为一个属性添加到了 ServletContext中
然后如下图，查看当前所有的 attributes，发现确实保存有 Context 的属性名。
其中 org.springframework.web.servlet.DispatcherServlet.CONTEXT 和
org.springframework.web.servlet.DispatcherServlet.THEME_SOURCE 属性名中都存放着一个名叫
dispatcherServlet-servlet 的 Child WebApplicationContext 。
**方法四** ：getAttribute
    WebApplicationContext context = (WebApplicationContext)RequestContextHolder.currentRequestAttributes().getAttribute("org.springframework.web.servlet.DispatcherServlet.CONTEXT", 0);
从方法三的分析来看，其实完全可以将存放在 ServletContext 属性中的 Context 取出来直接使用。在阅读相关源码后发现，上面代码中的
currentRequestAttributes() 替换成 getRequestAttributes() 也同样有效；getAttribute 参数中的
0代表从当前 request 中获取而不是从当前的 session 中获取属性值。
因此，使用以上代码也可以获得一个名叫 dispatcherServlet-servlet 的 Child WebApplicationContext。
### 手动注册 controller
一个正常的 Controller 示例代码如下，当用浏览器访问 /hello 路径时，会在定义好的 View 中输出 hello World 字样。
    @Controller
    public class HelloController {
        @RequestMapping(value = "/hello", method = RequestMethod.GET)
        public String hello(@RequestParam(value="name", required=false, defaultValue="World") String name, Model model) {
            model.addAttribute("name", name);
            return "hello";
        }
    }
如下图：Spring 3.2.5 处理 URL 映射相关的类都实现了 HandlerMapping 接口。
Spring 2.5 开始到 Spring 3.1 之前一般使用
org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping
映射器 ；
Spring 3.1 开始及以后一般开始使用新的
org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping
映射器来支持[@Contoller](https://github.com/Contoller
"@Contoller")和[@RequestMapping](https://github.com/RequestMapping
"@RequestMapping")注解。
当然，也有高版本依旧使用旧映射器的情况。因此正常程序的上下文中一般存在其中一种映射器的实例 bean。又因版本不同和较多的接口等原因，手工注册动态