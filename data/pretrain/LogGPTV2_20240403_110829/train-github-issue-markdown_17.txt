Addressing issue #9691 uncovered a significant problem with the QuadPrefixTree's memory usage. Specifically, at 1-meter precision, the example shape provided in [this Gist](https://gist.github.com/nknize/abbcb87f091b891f85e1) consumes over 1 GB of memory. Initially, this issue can be mitigated by using 2-bit encoded quads instead of 1-byte encoded quads, but this only delays the problem. Furthermore, as more complex shapes are added, duplicate quadcells are created, leading to unnecessary and redundant memory consumption. An inverted index approach, similar to that used in Lucene, would be more efficient.

For now, if a QuadTree is used for complex shapes, extreme caution must be exercised, and precision may need to be sacrificed. This is currently managed automatically through the `distance_error_pct` parameter, which is not transparent to the user and is an undesirable solution.

Alternative improvements could include:
1. Implementing a Hilbert R-Tree, which will be explored as a separate issue.
2. Restricting the accuracy to a lower level of precision, which is currently under experimentation.