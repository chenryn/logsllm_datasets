same underlying plaintexts. If s = NoSwap, the plaintext order is
the same as the original ciphertexts, otherwise it is swapped. The
algorithm is as follows:
(α0, β0), (α1, β1)
0, β′
(α′
0), (α′
Algorithm ElGamal-Swap((c0, c1), pk, s ):
(cid:17);
(cid:16)
$←− Zp;
$←− Zp, r1
(α0, β0), (α1, β1)
parse (c0, c1) =
r0
if s = NoSwap
0, β′
1, β′
// s = Swap
0, β′
0) ← (α1pkr1, β1дr1 );
1, β′
1) ← (α0pkr0, β1дr0 );
0, c′
1)
c′
0 = (α′
c′
1 = (α′
else
c′
0 = (α′
c′
1 = (α′
output (c′
0) ← (α0pkr0, β0дr0 );
1) ← (α1pkr1, β1дr1 )
0, c′
It is possible to prove correct execution of ElGamal-Swap for
an input / output pair (c0, c1) and (c′
1) via a GSP specified in [33].
In Solidus, due to the fact that an account is represented by a
pair of ciphertexts on the public key of an account and the account
balance, we in fact need perform double El Gamal swaps, meaning
that two pairs of ciphertexts are swapped using the same value of
s. The proof of correctness involves a straightforward extension of
the GSP for a single swap.
A double swap proof requires 13 elliptic curve multiplications,
while verification requires 18.
A.5 Range Proofs
There are a number of protocols (e.g., [13]) for proving statements
of the form PoK(x : y = дx ∧ l0 ≤ x ≤ lp ).
15
, д
.
i =0
2i
(αi /д
2i
αi /д
i =1 :
i =1 βi
ri :
Thus the GSP
(cid:18)
(cid:18)
PoK(cid:42)(cid:44){ri}t
2i } under public key pk, it suffices to prove:
PoK
Drawing on the conceptually simple Confidential Transactions
approach [41], we use a GSP to prove that an El Gamal ciphertex
$v pkr , дr ) encrypts an account balance $v ≥ 0. To pre-
(α, β ) = (д
vent modular wraparound, we specifically prove that $v ∈ [0, 2t )
for some small integer t. In our prototype, we set t = 30.
The GSP we use to accomplish this operates on each bit of $v
separately. For ciphertext (αi , βi ), to show that (αi , βi ) (cid:55)→ $vi ∈
{д
0
= pkri ) ∨(cid:0)αi = pkri(cid:1)(cid:19) ∧ βi = дri
(cid:19)
(cid:18)(cid:16)
= pkri(cid:17) ∨(cid:16)(cid:0)αi = pkri(cid:1)(cid:17)
∧(cid:0)βi = дri(cid:1)(cid:19)(cid:43)(cid:45)
(cid:33)
t(cid:81)
proves that (α, β ) =
i =1 αi ,
be that $v ∈ [0, 2t ) as desired.
This range proof requires 5+10t elliptic curve multiplications and
t encryptions (requiring 2 multiplications each unless precomuta-
tion is employed), while verification requires 7 +12t multiplications.
We denote such a proof that ciphertext c encrypts a value in
. Thus if (α, β ) (cid:55)→ д
t−1(cid:94)
(cid:32) t(cid:81)
$v, it must
[0, 2t ) (in exponential space) by RangePf(c, t ).
A.6 Circuit ORAM
Solidus’s primary data structure used to store account balances on
the ledger is a PVORM based on the structure of Circuit ORAM [62].
PVORM, however, aims to provide very different guarantees than
classical ORAM. An ORAM enables a client with limited local mem-
ory to maintain a piece of large virtual memory M in a data structure
C outsourced to a more powerful external device generically called
a server. The goal is to enable the client to store M confidentially
with as little local storage as possible.
An ORAM ensures access-pattern confidentiality; despite its abil-
ity to observe the client’s accesses to C, the server learns nothing
(no non-negligible) information about the client’s pattern of access
to blocks in M. Blocks in C are encrypted using a symmetric-key
cipher to ensure data confidentiality. But note that encryption alone
does not conceal access patterns. M is structured as a set of blocks
M[1], M[2], . . . , M[N ]. Were C[idx] simply an encryption of the
current value of M[idx], for instance, then the server would know
every time the client reads from or writes to M[idx], as it would
see the client access C[idx].
Thus, to achieve access-pattern confidentiality, ORAM imple-
mentations require a more sophisticated approach.
In this approach, C is represented as a tree of depth L = log N +1
(N is assumed to be a power of 2). Each node in the tree contains a
bucket that has B slots for storage of blocks, where B is a system pa-
rameter. Most of these slots are empty at a given time, an important
fact, as we shall see below.
A block takes the form idx∥label∥data, where idx is the index
of a block—the value idx corresponding to its virtual memory slot
M[idx], label identifies a leaf in the tree along the path to which
from the root the block is located in C, and data stores the block
contents.
The client maintains a small amount of local memory called
a stash, which is a buffer to handle overflow from C. The client
also stores a position map PosMap, a data structure such that
PosMap[idx] = label. That is, PosMap maps a given block’s
index idx in M to its corresponding leaf value label. (PosMap can
be stored recursively in a separate ORAM on the server to reduce
storage overhead, a feature that is not relevant to PVORM.)
Reads and writes involve the same basic operation Access by
the client on C, which is as follows.
Algorithm Access(op):
)
, idx, data∗
, idx) or (“write′′
// Note: op = (“read′′
label ← PosMap[idx];
{idx||label||data} ← ReadAndRm(idx, label);
PosMap[idx] $←− [0, N − 1];
if op = “read′′ then data∗ ← data;
stash.add({idx∥PosMap[idx]∥data∗});
Evict();
output data
Here, ReadAndRm reads the full path in C containing the tar-
get block and removes the block (re-encrypting blocks along the
path), while stash.add performs the obvious operation of adding
a block to the stash. Evict can be implemented either randomly or
deterministically. The random approach picks two leaves leaf l and
leaf r uniformly at random from the left and right halves of the
three, respectively, and performs what is called an eviction pass
in the root-to-leaf paths they define. The deterministic approach
(which we adopt in our PVORM construction) does the same, but it
selects leaf l and leaf r in a rotating deterministic order designed
to place eviction passes on consecutive accesses as far away from
each other as possible while still rotating through every leaf over
enough accesses.
An eviction pass on a given path involves performing swaps on
pairs of adjacent path elements one by one from the top to bottom
of the tree, with the stash treated as a special “level 0,” i.e., sitting
above the root. These swaps aim to move blocks down the path
to the lowest possible levels. A block is “picked up” and moved
through successive swaps to the lowest point such that it remains
on the path defined by label and there is an empty slot available
for it. At this point it is “dropped”—inserted into the bucket at that
level. A block may be picked up from the slot into which the last
one was dropped or swapping may continue until another block
is reached that can be pushed further down the path. The reason
for performing evictions on two paths rather than one is to ensure
that blocks remain deep enough globally in C to prevent substantial
overflow into the stash.
This processing step in Circuit ORAM is in fact quite complicated.
The client does not have full local information about where blocks
reside in C, and therefore must plan swaps using metadata. (This
complication does not arise in PVORM, however, as we explain
below.)
Other tree-based ORAMs, such as Path ORAM [57], differ pri-
marily in their use of alternative eviction strategies. The use of
swaps in Circuit ORAM is especially conducive to efficient NIZK
production in Solidus, however, which is the reason it is used in
the Solidus PVORM.
16
B SOLIDUS PVORM CONSTRUCTION
We now present the details of the PVORM construction used in
Solidus and prove that it is a correct, oblivious, and publicly verifi-
able PVORM. Similar techniques allow construction of a PVORM
from any ORAM, ZK proof system, and encryption scheme. Our
PVORM is constructed to ensure efficient proof computations in
support of high throughputs. For this purpose, we use Circuit
ORAM, non-interactive Generalized Schnorr Proofs, and El Gamal
encryption.
Recall from above that Circuit ORAM consists of a binary tree
of buckets, each containing a fixed number of data blocks. Each
location contains an encryption of either a data block or a dummy
value. Each logical data block is associated with a single leaf in the
tree and physically resides somewhere along the path to that leaf.
To access a logical data block, a client reads all blocks along the
path to the associated leaf. The client then associates the accessed
logical block with a new random leaf, and writes new encryptions
of all accessed physical blocks and two other (deterministic) tree
paths. During these writes, the client pushes (evicts) existing data
blocks as far as possible towards leaves while ensuring that each
real data block remains on the path to its associated leaf. These
evictions can be done with a number of pairwise swaps of physical
memory locations linear in the depth of the tree. We take advantage
of the ability to do evictions via pairwise swaps in our PVORM
construction.
B.1 Construction
In Solidus, each bank maintains its own PVORM to store user ac-
count balances. Since the PVORM is uniquely associated with a
single bank, we a simple El Gamal key pair for the key pair spec-
ified in Section 4. Each logical address is specified by an account
ID and each data block is itself an account balance. To store these,
each data block contains a pair of El Gamal encryptions: one of the
account ID and one of the balance. We limit the maximum balance
to a relatively small value (e.g., 230 or 240). This allows us to encrypt
balances in exponential space, creating an additive homomorphism,
while still permitting decryption (using a lookup table). Let t denote
the binary log of the maximum balance.
Thus we interpret M as a map from account IDs to account
balances. We define the PVORM update function f ((id, $v), M )
that replaces M[id] with M[id] + $v if id (M[id] + $v) ∈ [0, 2t ) and
is a key in M. Otherwise f is undefined. Intuitively, f updates a
single account balance to any value within the valid range.
As noted in Section 4, we use a fixed-size public stash instead of
the dynamic private one assumed by Circuit ORAM. For simplicity,
we merge this stash into the root node of the tree. Each data block
in the stash is of the same form as those in the tree. We also employ
a distinguished fixed block that exists as a single deterministic block
on every path. It may be part of the root/stash or separate.
We now specify the implementation of the operations in Sec-
tion 4. Let (Gen, Enc, Dec) be the standard El Gamal cryptosystem.
Construction 1 (Solidus PVORM). We always initialize all bal-
ances to 0. The update space U consists of account ID/transaction
value pairs, with values being between the max balance and its
negative. Initialization proceeds as follows:
Init(1λ, {idi }n
i =1, 0, U ):
$←− Gen(1λ )
(pk, sk)
for i ∈ [1, n]
Insert (idi, 0) into a Circuit ORAM tree
Set all unused blocks to (0, 0)
for each block (id, 0)
Set C at that location to (Enc(pk, id), Enc(pk, 0))
Let (α, β ) be the encryption of 0
pf = PoK (x : (α = β x ) ∧ (pk = дx ))
return (pk, sk, C, {pf })
If M = Read(sk, C), then Update(sk, u, C) is only defined when
f (u, M ) is defined. This property is easy to check given u, sk, and
C, so we omit explicit validation. Let BF be the distinguished fixed
block and assume for simplicity that pk is derivable from sk.
Update(sk, u, C ):
$←− (Enc(pk, id), Enc(pk, $v ))
e = (eid, ev )
for each block Bi along the path associated with id:
$←− ElGamal-Swap((B F , Bi ), pk, s )
Let s = Swap if the ID in B is id and NoSwap otherwise.
(B F , B′
i )
pf i = proof of correct swap
Let (cid, cv ) ← B F
rangePf = RangePf(cv − ev, t ) // (see Appendix A.5)
Let (α, β ) = (cid − eid)
idPf = PoK (x : (α = β x ) ∧ (pk = дx ))
B F ← (cid, cv − ev )
for each block Bi along the eviction paths in Circuit ORAM
Let s = Swap or NoSwap as per Circuit ORAM
(B F , B′
$←− ElGamal-Swap((B F , Bi ), pk, s )
i )
pf i = proof of correct swap
return (C′
, e, ({B′
i }, {pf i }, rangePf , idPf ))
Verification is performed simply by verifying all NIZKs included
in the output of Update and by verifying that the updated BF was
computed correctly between the two sets of swaps.
B.2 Security Proofs
We now prove the security of the construction given in the previous
section.
Theorem B.1 (PVORM Correctness). Construction 1 is a correct
PVORM.
Proof. The following properties ensure correctness.
• Circuit ORAM is correct when the stash does not overflow and
Construction 1 modifies Circuit ORAM to leak transaction graph
information instead of lose data on overflows.
• El Gamal is correct and includes a multiplicative homomorphism,
while we encrypt account balances in exponential space, thus
making the homomorphism additive.
17
• Construction 1 employs correct NIZKs and only attempts to
prove true statements.
We now consider a set of three hybrid experiments. Let H0 =
Exp2CPA
(0, A, λ), H2 = Exp2CPA
(1, A, λ), and
□
Experiment H1:
To prove obliviousness, we provide a hardness reduction to the
Decisional Diffie-Hellman (DDH) problem. We do this through a se-
ries of reductions. First we consider the following classic definition