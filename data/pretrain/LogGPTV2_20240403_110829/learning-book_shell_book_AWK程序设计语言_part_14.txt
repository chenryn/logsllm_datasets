deposits, checks)
}
function addup()(
if (ck)
checks += amt
else if (dep)
deposits += amt
ck = dep = amt = 0
）
输出是
deposits $500.00, checks $418.95
程序非常简单，只要输入数据格式正确，不管记录中的条目以何种顺序出现，程序都能正确得工作，
但是程序也很脆弱，它需要非常认真地初始化，以及对文件结束标志的处理，我们还有另一种方案可供选
择，那就是一次读取一条记录，当需要时再对记录的条目进行挑选，下面的程序也是对存款与支票进行求
和，但它使用了一个函数，这个函数提取具有指定名字的条目的值：
# check2 - print total deposits and checks
BEGIN
{ RS = ""; FS = "\n" }
/(^|\n)deposit/ ( deposits += field("amount"); next )
/(~|\n)check/
{checks += field("amount"); next )
END
{ printf("deposits $&.2f, checks S.2f\n",
deposits, checks)
function field(name,i,f) {
for (i = 1; i file直接输出到文件中，然后
再利用单独的步骤对文件排序，这个方法适用于本章的所有例子.
现在载们已经完成了三个步骤中的前两个：准备与排序，现在所要做的是把数据格式化成我们想要
的报表格式，程序form1做的正是这个工作：
91
# forml - format countries data by continent, pop. den.
BEGIN { FS = ": "
printf("&-15s $-10s 10s $7s &12s\n",
"AREA","POP. DEN.")
{ printf(*&-15s &-10s 7d $10d &10.1f\n",
$1,$2,$3,$4, $5)
---
## Page 93
第四章报表与数据库
85
期望中的报表可以通过键入
得到.
prep1中sort的参数非常古怪，我们可以通过格式化输出，使得sort不再需要任何参数，然后再
让格式化程序对行重新格式化即可，默认情况下，sOrt对输入数据按照字母顺序进行排列，但是在最终
的报表中，输出首先按照大洲的字母顺序排列，然后再按人口密度的逆序排列，为了进免让Sort带上参
数，准备程序可以预先在每一行的开始处放置一个分量，分量的大小依赖于大测的字母顺序与人口密度，
使得按照这个量进行排序时，排序结果是正确的，分量的一种可取的表示方法是大测的名字，后面再跟者
人口密度的例数，见程序prep2：
# prep2 - prepare countries by continent, inverse pop. den.
BEGIN { FS = "\t"}
{den = 1000*$3/$2
printf ("-15s:#12.8f:$s:$d:$d:$.1f\n",
$4,1/den, $1，$3, $2, den) 1"sort"
当countries作为输入时，prep2的输出是：
Asia
:0.00120000 :Japan: 120:144:833.3
Asia
:0.00169839 :India: 746:1267:588.8
Asia
:0.00359012:China:1032:3705:278.5
Asia
:0.03145091:USSR:275:8649:31.8
Europe
:0.00157377:Germany:61:96 : 635.4
Europe
:0.00167857:Eng1and:56:94 :595.7
Europe
:0.00383636:France:55:211:260.7
North America  : 0.00976923:Mexico:78: 762:102.4
North America  :  0.01525316:USA:237:3615:65.6
North America  : 0.15408000:Canada:25:3852:6.5
South America  : 0.02452239:Brazi1:134:3286:40.8
格式名-15s对大洲名来说已经足够宽了，$12.8f对人口密度的例数来说，覆盖范困也已足够，最终的
格式化程序类似于form1，但是忽略了第2个字段，为了简化排序程序的选项而特意制造一个排序键一
这种技巧非常常见，我们会在第五章的索引程序中再次用到.
92
如果我们想要一个更加精美的输出，其只打印大洲名字一次，那么我们可以使用程序form2
# form2 - format countries by continent, pop. den.
BEGIN { FS = ":"
printf("s-15s $-10s 10s $7s 812s\n",
"CONTINENT"，"COUNTRY","POPULATION",
"AREA"，"POP.DEN.")
---
## Page 94
第四章报表与数据库
86
}
{if (S1 != prev){
print *"
prev = $1
}else
S1 = ""
printf(*$-15s -10s &7d $10d $10.1f\n",
$1,$2,$3,$4,$5)
执行程序的命令行是
awk -f prep1 countries | awk -f form2
程序的输出是
CONTINENT
COUNTRY
POPULATION
AREA
POP. DEN.
Asia
Japan
120
14 4
833.3
India
746
1267
588.8
China
1032
3705
278.5
USSR
275
8649
31.8
Europe
Germany
61
96
635.4
England
56
94
595 .7
France
55
211
260.7
North America
Mexico
78
762
102.4
USA
237
3615