(a) Original Contract.
contract C {
fail : bool;
i : int;i : int;
def foo(j : int) = i ← i + j;
else return i
def foo(j : int) = i ← i + j;
if (i > 100) then
fail ← true;return (cid:63)
if (i > 100) then
fail ← true;return (cid:63)
else return i
def foo(j : int) = fail ← false;
if ((cid:63)) then
else
r ← foo(j);
assume ¬ fail
i ← i;r ← foo(j);
assume fail
return r
def transfer(amt : int) =
def fallback() =
senderBal ← msg.sender.balance;
if senderBal < amt then revert;
this.balance ← this.balance + amt;
msg.sender.balance ← senderBal - amt;
fallback();
1
2
3
4
5
6
7
8
9
10
11
12
13
14
Fig. 8: Modeling semantics of transfer and fallback behavior
i ← 0;
while i < η ∧ (cid:63) do
c ← choose(C);
m ← choose(F);
if c.m((cid:63)) then revert;
i ← i + 1;
(Stmt.)
(Call)
(Transfer)
ι ≡ (gas ← gas − G(sA); if gas < 0 then revert)
sA (cid:32) ι; sA
ιpre ≡ (v.gas ← gas − G(s))
ιpost ≡ (gas ← v.gas)
s ≡ l ← v.m(v) (cid:32) ιpre; s; ιpost
ιpre ≡ (to.gas ← min(gas, gtransfer); t ← to.gas)
ιpost ≡ (gas ← gas − (t − to.gas))
s ≡ l ← to.transfer(v) (cid:32) ιpre; s; ιpost
Fig. 9: Gas usage instrumentation.
1
2
3
4
5
6
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
}
(b) Instrumented Contract.
Fig. 11: Toy Contract and its instrumented version.
statement respectively. Statement ιpre forwards the remaining
gas (minus the cost of performing the call) from the current
contract to the receiver contract. Conversely, ιpost retrieves
the remaining gas after the call returns. The last rule for
transfer is similar to the one for method calls, but, instead of
forwarding all the remaining gas to transfer, it only forwards
up to gtransfer of gas (statement ιpre). Any unused gas after
the call to transfer is claimed by the current contract.
Harness. Smart contracts are open programs, so we need to
generate a harness that models all possible ways that accounts
may interact with this contract. As shown in Figure 10, the
harness created by SMARTPULSE ﬁrst initializes the contract
state according to the environment model (line 3). It then
performs an arbitrary number of iterations where it (1) picks
a random contract c and one of its methods m (lines 6-7),
(2) updates auxiliary variables (e.g, msg, block,) (lines 8
and 9) and, (3) begins a transaction by providing arbitrary
parameters to the selected method (line 10).
B. Modeling Semantics of Revert Statements
Since our speciﬁcation language requires differentiating be-
tween successful and failed transactions, we need to precisely
model
the semantics of revert statements. We do this by
instrumenting the program with so-called history variables [1].
At a high level, the idea is as follows: First, we introduce
a history variable called fail that tracks whether the current
transaction is reverted. Then, for each function f, we create
1
2
3
4
5
6
7
8
9
10
def harness() =
aux ← initBlockchainVars();
assume
∧
ψi
(ci,ψi)∈σ0
while(true) do
c ← choose(Contracts(σ0));
m ← choose(CMethods(c));
aux ← updateBlockchainVars();
c.gas ← (cid:63);assume gmin ≤ c.gas ∧ c.gas ≤ gmax;
BeginTX(aux, c.m((cid:63)));
Fig. 10: Harness generated by SMARTPULSE.
two copies f and f, where f (resp. f) represents the
version of f that
is called in a successful (resp. failing)
execution. The bodies of f and f are identical except that
(a) f uses a shadow variable v instead of state variable v,
and (b) a call to function g in the original function is replaced
by a call to g in f and by g in f. Finally, the original
function f is replaced by a wrapper that “guesses” whether
the transaction is going to fail and then constrains the value
of the history variable (using assume statements) to ensure that
its “prediction” was correct. Intuitively, the reason we need to
create two copies of each method is that one copy (i.e., f)
affects blockchain state, while the other one (i.e., f) does not.
We illustrate this idea using the example in Figure 11, where
the original code reverts if i exceeds 100. We highlight the
following salient features of our instrumentation:
• The instrumented contract contains the history variable
fail, which is initialized to false (line 13 in Figure 11b),
and the call to revert in the original program (line 4 in
11a) is modeled as setting fail to true and then returning
immediately (lines 7 and 11 in Figure 11b).
• The instrumented contract contains two copies of foo that
are identical except that foo uses shadow variable i.
• The wrapper function foo initializes fail to false and then
non-deterministically calls either foo or foo. Before the
call to foo, we initialize the shadow state variable i to i.
• After the call to foo, we add a statement assume(¬fail) to
ensure that foo is only called during non-failing transac-
tions. For the same reason, we also add an assumption that
fail is true after the call to foo.
Here, note that the value of state variable i is unchanged in
failing executions since foo operates on shadow variable i.
Furthermore, the instrumented assume statements enforce that
failing executions only call foo whereas successful executions
only call foo. Since any program path where an assump-
tion is violated is considered infeasible by the veriﬁer, this
instrumentation allows us to faithfully and precisely capture
the semantics of revert.
Figure 12 presents this instrumentation more formally.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:07 UTC from IEEE Xplore.  Restrictions apply. 
560
ι ≡ (fail ← true; return (cid:63))
C, ε (cid:96) revert (cid:44)→ ι
ι ≡ (l ← v.mε(v); if fail then return (cid:63))
C, ε (cid:96) l ← v.m(v) (cid:44)→ ι
C, ε (cid:96) s1 (cid:44)→ s(cid:48)
C, ε (cid:96) s2 (cid:44)→ s(cid:48)
C, ε (cid:96) if v then s1 else s2 (cid:44)→ if v then s(cid:48)
1
2
1 else s(cid:48)
2
C, ε (cid:96) s (cid:44)→ s(cid:48)
C, ε (cid:96) def m(v : τ ) = s (cid:44)→ def mε(v : τ ) = s(cid:48)
(Stmt )
(While)
(Seq)
ε = 
f = Fields(C)
C, ε (cid:96) sA (cid:44)→ sA[f/f ]
C, ε (cid:96) s (cid:44)→ s(cid:48)
C, ε (cid:96) while v do s (cid:44)→ while v do s(cid:48)
C, ε (cid:96) s1 (cid:44)→ s(cid:48)
C, ε (cid:96) s2 (cid:44)→ s(cid:48)
1
2
C, ε (cid:96) s1; s2 (cid:44)→ s(cid:48)
1; s(cid:48)
2
C (cid:96) mi (cid:55)→ m(cid:48)
i, m, m
ι ≡ fail : bool
contract C {f m} (cid:44)→ contract C {ι f f m m m(cid:48)}
f = Fields(C), C,  (cid:96) m (cid:44)→ m, C,  (cid:96) m (cid:44)→ m
(Revert)
(Call)
(If)
(Method)
(Contract)
(Wrapper)
ιs ≡ (r := m(v); assume ¬fail; return r;)
ιf ≡ (f := f ; r := m(v); assume fail; return r;)
C (cid:96) m (cid:55)→ def m(v : τ ) = fail ← false; if (cid:63) then ιs else ιf , m, m
Fig. 12: Instrumentation for Solidity’s exception semantics. For statements that are not shown, we assume C, ε (cid:96) s (cid:44)→ s.
Speciﬁcally, we use two types of judgments: (1) The judgment
C, ε (cid:96) s (cid:44)→ s(cid:48) indicates that statement s in C is re-written into
s(cid:48) in context ε ∈ {, } indicating whether this is a failing
or successful execution. (2) C (cid:96) m (cid:55)→ m(cid:48), m, m indicates
that method m in contract C is re-written into three variants,
where m (resp. m) is the variant that is called in successful
(resp. failing) executions, and m(cid:48) is the wrapper method that
ensures that m (resp. m) is only called during successful
(resp. failing) executions.
We now explain the rules from Figure 12 in more detail.
Revert. Our re-write rules eliminate revert statements by
assigning the history variable fail to true and then returning.
Stmt . When rewriting atomic statements in context , we
replace any state variable v with its shadow version v.
Call. We re-write function calls by (a) calling the correct (i.e.,
successful or failing) version of the function depending on
context ε ∈ {, }, and (b) propagating any exceptions that
occur. For instance, consider the following method:
def bar(k : int) = j ← foo(k); return j;
Then, bar and bar would be as follows:
def bar(k : int) = j ← foo(k); (if fail then return (cid:63)); return j;
def bar(k : int) = j ← foo(k); (if fail then return (cid:63)); return j;
Wrapper. This rule synthesizes a wrapper for method m. Since
m serves as the entry point of a transaction, we initialize
fail to false and then predict whether the transaction will
succeed or fail by non-deterministically callling m and m.
The assumptions added after the call ensure that we made the
right prediction.
Contract. This
the whole contract by
introducing a history variable fail and shadow ﬁelds. It also
generates the wrapper, successful, and failed methods for
every method of the original contract.
rule instruments
C. Converting SmartLTL Speciﬁcations to Regular LTL
To build upon existing veriﬁcation techniques for checking
temporal properties, the speciﬁcations must be expressed in
standard LTL. Toward this goal, we show how to instrument
the program so that the veriﬁcation problem can be expressed
as checking a standard LTL property over the instrumented
program. Speciﬁcally, our method consists of three steps: First,
START-TRUE
s ≡ (v ← x.f (y)) φ ≡ started(f, ψ)
BoolVar(φ, b) ψ(cid:48) = Sub(ψ, Γ)
φ−−−→ P[b ← ψ(cid:48); s]
Γ (cid:96) P[s]
s ≡ (deff = s(cid:48)) φ ≡ started(f, ψ) BoolVar(φ, b)
START-FALSE
Γ (cid:96) P[s]
φ−−−→ P[deff = (b ← false; s(cid:48))]
FINISH-TRUE
Return(s)
InWrapper(s, f )
φ ≡ ﬁnish(f, ψ)
Γ (cid:96) P[s]
b = BoolVar(φ) ψ(cid:48) = Sub(ψ, Γ)
φ−−−→ P[b ← ¬fail ∧ ψ(cid:48); s]
REVERT-TRUE
Return(s)
InWrapper(s, f )
φ ≡ revert(f, ψ)
Γ (cid:96) P[s]
b = BoolVar(φ) ψ(cid:48) = Sub(ψ, Γ)
φ−−−→ P[b ← fail ∧ ψ(cid:48); s]
FINISH/REVERT-FALSE
φ ≡ R(f, ψ) R ∈ {ﬁnish, revert}
s ≡ (v ← x.f (y))
b = BoolVar(φ)
Γ (cid:96) P[s]
φ−−−→ P[s; b ← false]
d
Fig. 13: SmartLTL to LTL instrumentation. Γ is a mapping from
SMARTLTL expressions to their corresponding program variables.
Also, (cid:127) ∈ {¬,
, (cid:3), ♦}, (cid:126) ∈ {∧,∨,⇒,U,R}. The function
Sub(ψ, Γ) substitutes each SMARTLTL expression e in ψ with its
corresponding variable Γ(e)
we introduce variables that store values of SMARTLTL expres-
sions old(v), csum(v), fsum(f, i, ψ). Second, for each atomic
SMARTLTL predicate φ (e.g., start(f, ψ), we introduce a fresh
boolean variable b and rewrite the SMARTLTL speciﬁcation
into a pure LTL speciﬁcation by replacing every occurrence
of φ with b. Finally, we instrument the program to make the
correct assignments to these boolean variables.
Since the last step is non-trivial, we describe it in more
detail in Figure 13 using judgments Γ (cid:96) P[s]
φ−−−→ P[s(cid:48)].
Here, Γ maps SMARTLTL expressions to program variables
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:07 UTC from IEEE Xplore.  Restrictions apply. 
561
contract Auction {
L : address;
finish : bool;
fsum : int;
old : int;
...
def bid() = ...
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
if (*)
if(msg.sender = L)
fsum ← fsum + msg.value;
call bid();
assume ¬fail
...
def withdraw() = old ← L.bal;
...
finish ← ¬fail ∧
return
def harness() = L ← (cid:63);
finish ← false;
fsum ← 0;
old ← (cid:63);
...
while(true) do
(L.bal-old)=fsum;
...
if(*)
...
BeginTX(aux, c.withdraw((cid:63)));