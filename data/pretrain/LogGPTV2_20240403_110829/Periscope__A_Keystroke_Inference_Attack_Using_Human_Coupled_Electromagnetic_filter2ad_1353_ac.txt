Based on the above observation, we propose to recognize indi-
vidual key pairs from their EM measurements first and then the
whole PIN.
6 DESIGN RATIONALE
Our design first separates the received continuous EM emanations
into multiple segments, each representing signals from one key
pair. Recall that we are able to map an instant EM reading to the
associated finger-screen distance. Then we apply some transforma-
tions to convert time-dependent finger-screen distance to finger
movement traces, which finally recover key pairs and thus the PIN.
Decomposition of 3D finger movement trace. As shown in
Figure 11, the finger movement for entering one key pair can be
characterized by a 3D trace. By treating the first keystroke as
the origin point, we set up a 3D coordinate system, where the
x-y plane is where the screen resides and z-axis is vertical to the
screen. For any 3D finger movement trace, denoted as 𝑧(𝑥, 𝑦), let
its projection on the x-z plane and y-z plane be 𝑧(𝑥) and 𝑧(𝑦), re-
spectively. If we know the intersection between 𝑧(𝑥) (𝑧(𝑦)) and
x-direction (y-direction) of the keyboard, the key pair is recov-
ered. For this purpose, we further divide the x-direction, denoted
Arduino nanoMCUAnalog input pinConductive wire asan antenna00.511.522.530246Analytic resultMeasurement result00.1250.250.375Time (sec)00.20.40.60.81Norm. EM emanation amplitudeKey pair 42Key pair 46Key pair 43Release "4"Touch the second key41424344454647484940Key pairs41424344454647484940Key pairs0.20.40.60.85yxz890xz123647yzSession 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea705𝑧(𝑥) =
𝑎𝑛
(𝑣𝑝 cos 𝜃)𝑛 𝑥𝑛 +
𝑎𝑛−1
(𝑣𝑝 cos 𝜃)𝑛−1
Similarly, 𝑧(𝑦) can be expressed as
𝑥𝑛−1 + · · · + 𝑎0.
(13)
Figure 12: Coordinate systems for finger movement traces
from arbitrary key pairs.
as 𝐿𝑥, of the keyboard into 3 units; each represents one key. Sim-
ilarly, the y-direction, denoted as 𝐿𝑦, is divided into 4 units. Un-
der this setting, key pair “16”, for example, can be represented as
𝐿𝑥 = 2 units, 𝐿𝑦 = 1 unit. Our task now becomes how to determine
𝐿𝑥 and 𝐿𝑦 of a specific key pair from its EM emanation readings.
Relation between 𝐿𝑥 (𝐿𝑦) and EM readings. Denote by 𝜃 the
angle between 3D trace 𝑧(𝑥, 𝑦) and 𝑧(𝑥), its projection on the 𝑥 − 𝑧
plane. Let 𝑥(𝑡) (𝑦(𝑡)) be the finger’s instant position at time 𝑡 cast
on the x-axis (y-axis). Then we have
𝑥(𝑡) = 𝑣𝑝𝑡 cos 𝜃, 𝑦(𝑡) = 𝑣𝑝𝑡 sin 𝜃,
(11)
where 𝑣𝑝 is the finger movement speed2. Besides, the time-series
finger-screen distance 𝑧(𝑡) of one key pair can be approximated
with a high dimensional polynomial
𝑧(𝑡) = 𝑎𝑛𝑡𝑛 + 𝑎𝑛−1𝑡𝑛−1 + · · · + 𝑎𝑖𝑡𝑖 + · · · + 𝑎0.
(12)
The 𝑛 + 1 coefficients 𝑎0, · · · , 𝑎𝑛 can be determined by solving a lin-
ear equation system with 𝑛+1 samples: (𝑡1, 𝑧(𝑡1)), · · · , (𝑡𝑛+1, 𝑧(𝑡𝑛+1)),
where 𝑧(𝑡) can be calculated from 𝑉𝑚(𝑡) following (10). Combining
(11) and (12), 𝑧(𝑥) is expressed as
𝑎𝑛−1
𝑎𝑛
𝑧(𝑦) =
𝑦𝑛−1 + · · · + 𝑎0.
(𝑣𝑝 sin 𝜃)𝑛 𝑦𝑛 +
(𝑣𝑝 sin 𝜃)𝑛−1
(14)
With 𝑧(𝑥) (𝑧(𝑦)), by examining its intersection with the x-axis (y-
axis), we can easily obtain 𝐿𝑥 (𝐿𝑦). To be specific, solve 𝑥 by setting
𝑧(𝑥) = 0. 𝐿𝑥 is the unit that 𝑥 falls into. 𝐿𝑦 is obtained similarly.
The above calculation relies on the knowledge of 𝑣𝑝 and 𝜃. We will
discuss in Section 7.2 how to derive these two critical parameters.
To sum up, for each key pair, the attacker collects at least 𝑛 + 1
samples of EM readings. Their corresponding finger-screen dis-
tances are calculated following (10). Then a polynomial of 𝑛-degree
that characterizes time-series finger-screen distance 𝑧(𝑡) is con-
structed. With the knowledge of victim’s finger movement speed
𝑣𝑝 and direction 𝜃, 𝑧(𝑡) is converted to 𝑧(𝑥) and 𝑧(𝑦). Their inter-
sections with x-axis and y-axis are 𝐿𝑥 and 𝐿𝑦, respectively. From
the above analysis, we can tell that time-series 𝑧(𝑡) bears the infor-
mation of time interval for entering one key pair. To alleviate the
impact of EM variances to our analytic model, we resort to 𝑛 + 1
samples (𝑡1, 𝑧(𝑡1)), · · · , (𝑡𝑛+1, 𝑧(𝑡𝑛+1)) to derive 𝑧(𝑡) first.
Discussions. Note that a given pair of 𝐿𝑥 and 𝐿𝑦 may not
uniquely identify a specific key pair, but a set of key pair candidates.
2Soft keyboards are generally small in size. For most users, the entry of a PIN can be
performed smoothly within a short time. Thus, it is practical to assume a constant
finger movement speed for each user. Speeds from different users are not necessarily
the same though.
Figure 13: The system design of Periscope.
For example when 𝐿𝑥 = 2 units and 𝐿𝑦 = 1 units, satisfying key
pairs include "61", "16", "34", "43", "67", "76", "49", and "94". To alleviate
the inference ambiguity, we propose to model transitions between
key pairs into a HMM to eliminate impossible combinations of key
pairs. Details will be elaborated in Section 7.3.
In the above analysis, we use the key pair “16” to illustrate how
to model a finger movement trace shown in Figure 11. A coordinate
system, with “1” as the origin point, is set up. In fact, our method is
applicable to arbitrary key pairs. Figure 12 demonstrates the cases
of two other key pairs “59” and “92”. Their origin points become “5”
and “9”, separately. In either case, we have the trajectory exist in
the first quadrant of the coordinate system and thus 𝜃 ∈ [0, 𝜋/2]
to facilitate our analysis.
7 DESIGN DETAILS OF PERISCOPE
The system overview of Periscope is given in Figure 13. It consists
of three main components: preprocessing, key pair recovery, and PIN
recovery.
7.1 Preprocessing
The goal is to extract clean signal segments for individual key pairs
from continuous raw EM emanation readings.
Envelope extraction. As shown in Figure 14, raw EM emana-
tion readings are mixed with oscillating signals, which add small-
scale variations to the envelope. Essentially, the envelop signal is
caused by finger coupling effect and thus contains useful informa-
tion regarding finger movements. The oscillating signals, on the
other hand, are produced by touchscreen’s alternating driving volt-
age and useless for the attack. To extract the envelope, the extrema
sampling based algorithm is employed [35, 59]. Specially, a sliding
time window Δ𝑡 is applied over the raw reading. The local maximal
value within this window, max𝑉𝑚(𝑡′) (𝑡′ ∈ [𝑡, 𝑡 + Δ𝑡]), is deemed
as the filtered output for Δ𝑡.
Waveform segmentation. The purpose of this step is to seg-
ment the signal for each key pair out of a continuous waveform.
We first identify critical time instances associated with finger re-
lease/touch events. For finger touch, it appears at EM reading peaks.
We thus apply the classic peak detection algorithm [8] over the
envelope signal to identify such events. Once the finger leaves the
screen, the discharging coupling capacitance causes a sudden drop
36541yxz027893421yxz759806EM measure collectionEnvelopeextractionWaveformsegmentationPIN: 3594“35”“59”“94”Movement tracedecompositionPossible tracegenerationHMM predictionPINConfidence35940.95623810.761......PreprocessingKey pair recoveryPIN recovery1364789250"3""5"yxzzxzyRecoverusingRecoverusingMovement unitscalculationunitunitSession 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea706dialog box and asking the victim to enter designated numbers as
a confirmation message [1]. An alternative approach is to set up
a Text Captchas that asks the victim to input the chosen numbers
[27]. Following the same key pair segmentation approach, we first
separate victim entered number sequence into a series of key pairs.
Then the time duration for entering one key pair is known. Since
the exact key pair is known, so is the inter-key distance. The finger
movement speed is estimated by dividing the distance by the time
duration. We set 𝑣𝑝 as the median value of measured speeds of
all key pairs in one number sequence. To improve the estimation
accuracy, the attacker can have the victim enter more than one
sequence. According to our experiment result, three such digit
sequences are sufficient to deliver satisfactory estimation. Periscope
only needs a couple of user-specific samples to determine victim’s
typing speed. Some prior works apply user-agnostic models for
typing inference. They typically employ sophisticated deep learning
models that require large amounts of labeled training samples from
various users to avoid overfitting.
7.3 PIN Recovery
So far, the attacker is able to infer 𝐿𝑥 and 𝐿𝑦 of a given EM wave-
form segment. As discussed, a pair of 𝐿𝑥 and 𝐿𝑦 can be mapped to
multiple key pairs. We propose to leverage the interdependence
of consecutive key pairs to resolve the inference ambiguity. For
example, given 𝐿𝑥 = 2 units and 𝐿𝑦 = 1 units for the first waveform
segment, satisfying key pairs include "61", "16", "34", "43", "67", "76",
"49", and "94". Given 𝐿𝑥 = 2 units and 𝐿𝑦 = 2 units for the second
waveform segment, satisfying key pairs include "19", "91", "37", and
"73". Considering interdependence, the existing candidates for the
first key pair "16", "34", "76", and "94" can be eliminated immedi-
ately, as none of them ends with "1", "9", "3", or "7", the first digit of
the second key pair. Hence, viable candidates for the first key pair
are narrowed down to "61", "43", "67", and "49", by 50%. As more
key pairs are considered, this side information can be propagated
back-and-forth to further reduce the ambiguity. We propose to
model such interdependence between consecutive key pairs for PIN
recovery using HMM.
We model the keystroke process as HMM characterized by 𝜆 =
(𝑁 , 𝑀, 𝐴, 𝐵, 𝜋). In the HMM, 𝑁 is the number of hidden states.
We treat key pairs as hidden states. As there are 100 possible key
pairs, i.e., from “00” to “99”, we have 𝑁 = 100. The parameter 𝑀
represents the number of possible observations for hidden states,
i.e., 𝐿𝑥 and 𝐿𝑦. As there are three and four possible values of 𝐿𝑥
and 𝐿𝑦, respectively, we have 𝑀 = 3 × 4 − 1 = 11. 𝐴, with the size
of 𝑁 × 𝑁 , stands for the transition probability matrix, with each
element denoting the transition probability from one hidden state
to another. The observation probability matrix 𝐵, of the size 𝑁 × 𝑀,
gives the possibility that a given observation can be observed in a
hidden state. The initial state distribution vector 𝜋 represents the
belief about which state the HMM is in when our scheme is called
for the first time.
To build the HMM, we need to determine parameters 𝐴, 𝐵, and
𝜋. The transition probability matrix 𝐴 can be predefined by the
natural continuity of the typing process. For example, if we assume
equal probability of typing any keys, the hidden state “61” has a
chance of 0.1 to transfer to each hidden state “1x”, while the chance
Figure 14: Envelope extrac-
tion and waveform seg-
mentation.
Figure 15: Estimation of 𝜃.
in EM readings as shown in Figure 14. Hence, the finger release
event is identified by locating the maximum derivative along the
EM signal envelope between two consecutive peaks. Upon identi-
fying the above critical events, the EM signal of one key pair is the
waveform segment between the finger release (of the first key) and
the next finger touch (of the second key).
7.2 Key Pair Recovery
Section 6 presents how to recover a key pair, recognized via 𝐿𝑥,
𝐿𝑦, from EM readings. As discussed, the attacker should be aware
of the victim’s finger movement speed 𝑣𝑝 and direction 𝜃. In the
following, we focus on the estimation of these two parameters.
Estimation of 𝜃. Let Θ be the set of possible directions of finger
movement for entering a key pair. To estimate 𝜃, our idea is compare
among all the possible candidates in Θ and figure out the one that
produces the highest estimation confidence level.
As discussed in Section 6, we take the first press of a key pair
as the origin and set up a 3D coordinate system. Following the
steps, the coordinate of the second press (𝑥, 𝑦) is derived by solving
𝑧(𝑥) = 0 and 𝑧(𝑦) = 0. 𝐿𝑥 and 𝐿𝑦 are obtained accordingly. Let
𝑜 be the geometry center of the key identified by 𝐿𝑥 and 𝐿𝑦. A
user typically taps the center of a key to enter an input. If 𝜃 is the
correct direction, the derived (𝑥, 𝑦) should be close to a key’s center.
Otherwise, (𝑥, 𝑦) tends to deviate from the center, as illustrated in
Figure 15. We then define the confidence level under 𝜃 as
𝜃 ∈Θ |(𝑥, 𝑦) − 𝑜| .
|(𝑥, 𝑦) − 𝑜|
𝑙 = 1 −
(15)
𝑙 is a value between [0, 1]. It approximates 1 if (𝑥, 𝑦) is close to a
key center. Finally, finger movement direction is deemed as the
one that produces the maximum confidence level among all the
candidates, 𝜃 = arg max𝜃 ∈Θ 𝑙.
Generally speaking, most digit keyboards are asymmetric to
the diagonal, e.g., the inter-key spaces in the x-axis and y-axis
are distinct. Hence, multiple decomposition candidates are less
likely to share the same probability for a given key pair. Symmetric
keyboards, on the other hand, will impact the success inference
rate, as the attacker cannot distinguish between x-/y-movements.
Estimation of 𝑣𝑝. As examined in prior works [2, 17], finger
movement speed for typing is deemed consistent for each individual.
We propose to estimate it by eliciting victims to enter some digits in
their devices and estimating the speed from the collected samples.
Specifically, the attacker can set up free WiFi. Once a victim is
connected, the access point requires user approval by displaying a
1.21.41.61.8Time (sec)00.20.40.60.81Norm. EM emanation amplitudeRelease pointTouch point954yxz7806123Session 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea707Figure 16: The state and transitions of HMM.
to other states is 0. 𝐵 is obtained by evaluating the probability of
a given key pair that generates certain observations. It actually
reflects the accuracy of our proposed key recovery scheme. Due
to random errors occurred in EM measurements, our scheme may
generate false observations other than the ground truth at a certain
probability. We propose to run our scheme offline ahead of the
attack to derive 𝐵. In our design, we employ a uniform distribution
for the initial state distribution 𝜋.
Given the observation sequence of key pairs 𝑂 = 𝑂1𝑂2 · · · 𝑂𝑆,
the PIN recovery problem is to find optimal hidden sequence 𝑄 =
𝑄1𝑄2 · · · 𝑄𝑆] to maximize 𝑃(𝑄|𝑂, 𝜆). This problem can be solved
by the Viterbi algorithm [41], a commonly adopted approach for
HMM. In addition to search the most likely PIN, we also calculate
the probability of all possible PINs generated by the HMM. The
attacker can thus sort them according to their probabilities and
form a list of candidates to infer the target PIN with multiple trials.
8 EXPERIMENTAL EVALUATIONS
The experiments are conducted using our prototype described in
Section 5. It is built on a commercialized Arduino board that fol-
lows the FCC regulations and passively collects EM emanations.
Hence, no risk is posed to human health. The collected data are
anonymized and properly stored locally from potential leakage.
The entire research has been approved by IRB.
The goal is to evaluate the performance of our proposed attack
Periscope under different settings. A wide spectrum of impact fac-
tors are examined, such as system parameters, attack distances,
environmental contexts, devices, and keyboard layouts. A compre-
hensive comparison is also made with existing schemes. A total of
20 volunteers, 12 males and 8 females between 22 to 28 years old,
are recruited for the experiments. Before each experiment, detailed
instructions regarding experimental procedures are provided. We
design an App that mimics the UI that allows users to unlock the
screen via digit PINs. During the experiment, each volunteer is
asked to enter 60 randomly generated PINs into smartphones.
8.1 Key Pair Recovery Accuracy
As the basis of our attack, we first examine the accuracy of key
pair recovery. Figure 17 shows the success rate over all the 100
possible key pairs from “00” to “99”. Each row represents the first
key, whereas each column represents the second key. It is observed
that key pairs with longer inter-key distances tend to have better
recovery accuracy. For example, the recovery rate of “01” is 94%;
it becomes 89.5% for “08”. Besides, we find that the success rate is
not perfectly symmetric with respect to key pairs. In other words,
the success rates of “ab” and “ba” are not exactly the same. This is
because users may exhibit different typing behaviors when entering
the same pair of keys but with reverse orders.
Figure 17: Key pair recovery
accuracy.
Figure 18: Impact of the or-
der of polynomials.
Impact of degree of polynomials. To establish the relation
between EM readings and 𝐿𝑥 (𝐿𝑦), we employ an 𝑛-degree polyno-
mial to characterize the time-dependent finger-screen distance 𝑧(𝑡).
Figure 18 shows key pair recovery accuracy with respect to the
degree 𝑛. The success rate experiences a slight increase by adopting
a higher degree polynomial. For example, the success rate is 89.6%
when 𝑛 = 6 and then raised to 91.2% when 𝑛 = 12. It indicates
that a polynomial with a higher degree can nicely tract the finger
movement trace. Once 𝑛 surpasses 17, such benefit becomes negli-
gible. At the same time, a polynomial of higher degree incurs larger
computation overhead in solving 𝑧(𝑥) = 0 and 𝑧(𝑦) = 0. To strike a
balance between accuracy and efficiency, we set 𝑛 = 17 by default.
(a)
(b)
Figure 19: Recovery accuracy of 𝜃. (a) Confusion matrix. (b)
Recovery success rate of key pairs with different 𝜃’s.
Estimation of 𝜃. The estimation of finger movement direction
𝜃 is critical to key pair recovery. Figure 19(a) shows the confusion
matrix of 𝜃 estimation. A Google Pixel phone is adopted in the
experiment. The rows represent all possible finger movement di-