       +0x02c bAnyScrollButtonDown : Pos 20, 1 Bit
       +0x02c bScrollBarVerticalTracking : Pos 21, 1 Bit
       +0x02c bForceNCPaint    : Pos 22, 1 Bit
       +0x02c bForceFullNCPaintClipRgn : Pos 23, 1 Bit
       +0x02c FullScreenMode   : Pos 24, 3 Bits
       +0x02c bCaptionTextTruncated : Pos 27, 1 Bit
       +0x02c bNoMinmaxAnimatedRects : Pos 28, 1 Bit
       +0x02c bSmallIconFromWMQueryDrag : Pos 29, 1 Bit
       +0x02c bShellHookRegistered : Pos 30, 1 Bit
       +0x02c bWMCreateMsgProcessed : Pos 31, 1 Bit
       +0x030 ExStyle          : Uint4B
       +0x030 bWS_EX_DLGMODALFRAME : Pos 0, 1 Bit
       +0x030 bUnused1         : Pos 1, 1 Bit
       +0x030 bWS_EX_NOPARENTNOTIFY : Pos 2, 1 Bit
       +0x030 bWS_EX_TOPMOST   : Pos 3, 1 Bit
       +0x030 bWS_EX_ACCEPTFILE : Pos 4, 1 Bit
       +0x030 bWS_EX_TRANSPARENT : Pos 5, 1 Bit
       +0x030 bWS_EX_MDICHILD  : Pos 6, 1 Bit
       +0x030 bWS_EX_TOOLWINDOW : Pos 7, 1 Bit
       +0x030 bWS_EX_WINDOWEDGE : Pos 8, 1 Bit
       +0x030 bWS_EX_CLIENTEDGE : Pos 9, 1 Bit
       +0x030 bWS_EX_CONTEXTHELP : Pos 10, 1 Bit
       +0x030 bMakeVisibleWhenUnghosted : Pos 11, 1 Bit
       +0x030 bWS_EX_RIGHT     : Pos 12, 1 Bit
       +0x030 bWS_EX_RTLREADING : Pos 13, 1 Bit
       +0x030 bWS_EX_LEFTSCROLLBAR : Pos 14, 1 Bit
       +0x030 bUnused2         : Pos 15, 1 Bit
       +0x030 bWS_EX_CONTROLPARENT : Pos 16, 1 Bit
       +0x030 bWS_EX_STATICEDGE : Pos 17, 1 Bit
       +0x030 bWS_EX_APPWINDOW : Pos 18, 1 Bit
       +0x030 bWS_EX_LAYERED   : Pos 19, 1 Bit
       +0x030 bWS_EX_NOINHERITLAYOUT : Pos 20, 1 Bit
       +0x030 bUnused3         : Pos 21, 1 Bit
       +0x030 bWS_EX_LAYOUTRTL : Pos 22, 1 Bit
       +0x030 bWS_EX_NOPADDEDBORDER : Pos 23, 1 Bit
       +0x030 bUnused4         : Pos 24, 1 Bit
       +0x030 bWS_EX_COMPOSITED : Pos 25, 1 Bit
       +0x030 bUIStateActive   : Pos 26, 1 Bit
       +0x030 bWS_EX_NOACTIVATE : Pos 27, 1 Bit
       +0x030 bWS_EX_COMPOSITEDCompositing : Pos 28, 1 Bit
       +0x030 bRedirected      : Pos 29, 1 Bit
       +0x030 bUIStateKbdAccelHidden : Pos 30, 1 Bit
       +0x030 bUIStateFocusRectHidden : Pos 31, 1 Bit
       +0x034 style            : Uint4B
       +0x034 bReserved1       : Pos 0, 16 Bits
       +0x034 bWS_MAXIMIZEBOX  : Pos 16, 1 Bit
       +0x034 bReserved2       : Pos 0, 16 Bits
       +0x034 bWS_TABSTOP      : Pos 16, 1 Bit
       +0x034 bReserved3       : Pos 0, 16 Bits
       +0x034 bUnused5         : Pos 16, 1 Bit
       +0x034 bWS_MINIMIZEBOX  : Pos 17, 1 Bit
       +0x034 bReserved4       : Pos 0, 16 Bits
       +0x034 bUnused6         : Pos 16, 1 Bit
       +0x034 bWS_GROUP        : Pos 17, 1 Bit
       +0x034 bReserved5       : Pos 0, 16 Bits
       +0x034 bUnused7         : Pos 16, 2 Bits
       +0x034 bWS_THICKFRAME   : Pos 18, 1 Bit
       +0x034 bReserved6       : Pos 0, 16 Bits
       +0x034 bUnused8         : Pos 16, 2 Bits
       +0x034 bWS_SIZEBOX      : Pos 18, 1 Bit
       +0x034 bReserved7       : Pos 0, 16 Bits
       +0x034 bUnused9         : Pos 16, 3 Bits
       +0x034 bWS_SYSMENU      : Pos 19, 1 Bit
       +0x034 bWS_HSCROLL      : Pos 20, 1 Bit
       +0x034 bWS_VSCROLL      : Pos 21, 1 Bit
       +0x034 bWS_DLGFRAME     : Pos 22, 1 Bit
       +0x034 bWS_BORDER       : Pos 23, 1 Bit
       +0x034 bMaximized       : Pos 24, 1 Bit
       +0x034 bWS_CLIPCHILDREN : Pos 25, 1 Bit
       +0x034 bWS_CLIPSIBLINGS : Pos 26, 1 Bit
       +0x034 bDisabled        : Pos 27, 1 Bit
       +0x034 bVisible         : Pos 28, 1 Bit
       +0x034 bMinimized       : Pos 29, 1 Bit
       +0x034 bWS_CHILD        : Pos 30, 1 Bit
       +0x034 bWS_POPUP        : Pos 31, 1 Bit
       +0x038 hModule          : Ptr64 Void
       +0x040 hMod16           : Uint2B
       +0x042 fnid             : Uint2B
       +0x048 spwndNext        : Ptr64 tagWND
       +0x050 spwndPrev        : Ptr64 tagWND
       +0x058 spwndParent      : Ptr64 tagWND
       +0x060 spwndChild       : Ptr64 tagWND
       +0x068 spwndOwner       : Ptr64 tagWND
       +0x070 rcWindow         : tagRECT
       +0x080 rcClient         : tagRECT
       +0x090 lpfnWndProc      : Ptr64     int64 
       +0x098 pcls             : Ptr64 tagCLS
       +0x0a0 hrgnUpdate       : Ptr64 HRGN__
       +0x0a8 ppropList        : Ptr64 tagPROPLIST          
       +0x0b0 pSBInfo          : Ptr64 tagSBINFO
       +0x0b8 spmenuSys        : Ptr64 tagMENU
       +0x0c0 spmenu           : Ptr64 tagMENU
       +0x0c8 hrgnClip         : Ptr64 HRGN__
       +0x0d0 hrgnNewFrame     : Ptr64 HRGN__
       +0x0d8 strName          : _LARGE_UNICODE_STRING
       +0x0e8 cbwndExtra       : Int4B
       +0x0f0 spwndLastActive  : Ptr64 tagWND
       +0x0f8 hImc             : Ptr64 HIMC__
       +0x100 dwUserData       : Uint8B
       +0x108 pActCtx          : Ptr64 _ACTIVATION_CONTEXT
       +0x110 pTransform       : Ptr64 _D3DMATRIX
       +0x118 spwndClipboardListenerNext : Ptr64 tagWND
       +0x120 ExStyle2         : Uint4B
       +0x120 bClipboardListener : Pos 0, 1 Bit
       +0x120 bLayeredInvalidate : Pos 1, 1 Bit
       +0x120 bRedirectedForPrint : Pos 2, 1 Bit
       +0x120 bLinked          : Pos 3, 1 Bit
       +0x120 bLayeredForDWM   : Pos 4, 1 Bit
       +0x120 bLayeredLimbo    : Pos 5, 1 Bit
       +0x120 bHIGHDPI_UNAWARE_Unused : Pos 6, 1 Bit
       +0x120 bVerticallyMaximizedLeft : Pos 7, 1 Bit
       +0x120 bVerticallyMaximizedRight : Pos 8, 1 Bit
       +0x120 bHasOverlay      : Pos 9, 1 Bit
       +0x120 bConsoleWindow   : Pos 10, 1 Bit
       +0x120 bChildNoActivate : Pos 11, 1 Bit
通过结构体，我们可以清楚的知晓要操作哪一块内存，下面是优化后函数的部分截图，这里面的第二个和第三个参数可以通过在线网站
来查询内核函数的原型函数，不过问题不大，我们知道了v3就是pSBInfo就可以了，上面对一些结构体进行了介绍
如果只对这个漏洞进行POC的编写，分析到这一步就可以了，步骤大概为：
>
> 窗口创建->EnableScrollBar（后面两个参数为3）->CreateWindowExA->设置ShowWindow和UpdateWindow使窗口可见->Hook__ClientLoadLibrary并DestroyWindow
接下来继续看下哪里出了问题导致这次攻击的发生，观察伪代码发现，在2处堆pSBInfo进行了修改
方才的伪代码在汇编中的形式如下，正常情况下函数会走到1的位置
在上面的分析我们得出了结论，发现在这里将0x2改为了0xe，造成了UAF
#### 补丁前动态分析：
我们先看一下回调函数的调用栈，我们在调用xxxDrawScrollBar的地址和该地址的下一条指令下断点，再向nt!KeUserModeCallback下断点（因为任何的user-mode callback流程最终内核到用户层的入口点都会是 nt!KeUserModeCallback）
这时我们执行，观察函数调用栈
此时我们查看下tagWND的数据结构，rdi的值为tagWND的起始地址
现在前置内容已经讲完了，我们从头来看一下这个程序实际执行的时候会有什么样的动作
首先下硬件断点
之后执行exp，可以看到windbg中断在了函数起始的位置
然后执行到第一个xxxDrawScrollBar的位置上，此时观察下rbx和rdi+0xb0位置上的值，可以观察到，此时rdi+0xb0位置上的值还并未改变
这时F10进入下一步，执行完了xxxDrawScrollBar，再观察下rbx和rdi+0xb0位置的值，可以发现，两块缓冲区都被破坏掉了
此时我们看rdi已经没有用了，我们真正操作的桌面堆空间实际上是rbx附近的内存空间，而其附近的内存空间已被堆喷排布过了，该空间布局可供参考，有助于理解该漏洞对内存的操作
    d> dd rbx-0x200 L200
    fffff901`40974990  00000000 00000000 00000000 00000000
    fffff901`409749a0  40c9b9f0 fffff901 00000000 00000000
    fffff901`409749b0  00000000 00000000 00000000 00000000
    fffff901`409749c0  00000000 00000000 00000000 00000000
    fffff901`409749d0  00000000 00000000 00000000 00000000
    fffff901`409749e0  00000000 00000000 9ff56c80 08000874
    fffff901`409749f0  00000002 00000002 aaaabbbb aaaabbbb
    fffff901`40974a00  00000001 00000000 bbbbbbbb bbbbbbbb