title:Salus: a system for server-aided secure function evaluation
author:Seny Kamara and
Payman Mohassel and
Ben Riva
Salus: A System for Server-Aided
Secure Function Evaluation
Seny Kamara
Microsoft Research
PI:EMAIL
Payman Mohassel
University of Calgary
∗
Ben Riva
Tel Aviv University
PI:EMAIL
PI:EMAIL
ABSTRACT
Secure function evaluation (SFE) allows a set of mutually
distrustful parties to evaluate a function of their joint inputs
without revealing their inputs to each other. SFE has been
the focus of active research and recent work suggests that it
can be made practical. Unfortunately, current protocols and
implementations have inherent limitations that are hard to
overcome using standard and practical techniques. Among
them are: (1) requiring participants to do work linear in
the size of the circuit representation of the function; (2)
requiring all parties to do the same amount of work; and (3)
not being able to provide complete fairness.
A promising approach for overcoming these limitations is
to augment the SFE setting with a small set of untrusted
servers that have no input to the computation and that
receive no output, but that make their computational re-
sources available to the parties. In this model, referred to as
server-aided SFE, the goal is to tradeoﬀ the parties’ work
at the expense of the servers. Motivated by the emergence
of public cloud services such as Amazon EC2 and Microsoft
Azure, recent work has explored the extent to which server-
aided SFE can be achieved with a single server.
In this work, we revisit the sever-aided setting from a prac-
tical perspective and design single-server-aided SFE proto-
cols that are considerably more eﬃcient than all previously-
known protocols. We achieve this in part by introducing
several new techniques for garbled-circuit-based protocols,
including a new and eﬃcient input-checking mechanism for
cut-and-choose and a new pipelining technique that works
in the presence of malicious adversaries. Furthermore, we
extend the server-aided model to guarantee fairness which
is an important property to achieve in practice.
Finally, we implement and evaluate our constructions ex-
perimentally and show that our protocols (regardless of the
number of parties involved) yield implementations that are
4 and 6 times faster than the most optimized two-party SFE
∗Work done at Microsoft Research.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
implementation when the server is assumed to be malicious
and covert, respectively.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information
Systems]: Security and Protection
Keywords
Secure Computation, Server-Aided Computation, Multi-Party
Computation, Cloud Computing
1
Introduction
Secure function evaluation (SFE) allows a set of n parties,
each with a private input, to securely and jointly evaluate
an n-ary function f over their inputs. Roughly speaking,
a SFE protocol guarantees (at least) that: (1) the parties
will not learn any information from the interaction other
than their output and what is inherently leaked from it; and
(2) that the functionality was computed correctly. SFE is
useful in any setting where mutually distrustful parties need
to cooperate but do not wish to reveal their inputs to each
other. This often occurs in practice, for example, during
negotiations, auctions, data mining, and voting.
Towards practical SFE. Early work on SFE—and the
more general notion of multi-party computation (MPC)—
focused on feasibility results; that is, demonstrating that ev-
ery function can be computed securely [57, 58, 24, 10]. Mo-
tivated by these results, much of the work in SFE focused on
improving the security deﬁnitions [44, 9], on strengthening
the adversarial models, on decreasing the round and commu-
nication complexity and on improving eﬃciency [43, 45, 7,
38, 41, 4, 6, 52]. The special case of two-party SFE (2SFE)
in particular has been improved extensively with more ef-
ﬁcient semi-honest-to-malicious compilation techniques [43,
45, 56, 38, 41, 35, 40, 55], garbled circuit constructions and
implementations [49, 35, 52, 29, 42], and oblivious transfer
protocols [48, 30, 50]. In fact, recent work on practical SFE
has even led to the design and implementation of several
SFE/MPC frameworks such as Fairplay [43, 4], VIFF [15],
Sharemind [5], Tasty [28], HEKM [29] and VMCrypt [42].
Limitations of standard SFE. While these advances have
resulted in great improvements in eﬃciency and have eﬀec-
tively taken SFE from a purely theoretical idea to a poten-
tially practical technology, there are inherent limitations to
797these optimizations. Indeed, in all current implementations—
even with the state-of-the-art protocols and optimizations—
the parties’ running time is linear in the size of the circuit
representation of the function they wish to evaluate.
Unfortunately, the circuit representation of most functions
of practical interest can be quite large. For example, note
that the circuit for evaluating the AES function requires
roughly 30, 000 gates, while a circuit that evaluates the edit
distance between two 50 character strings requires about
250, 000 gates (see Section 4.2). It is easy to think of inter-
esting functionalities with circuits that go up to billions of
gates.
An additional limitation of standard SFE is that the work-
load is symmetric in the sense that each party has to do the
same amount of computation. In many real-world applica-
tions, however, some parties are weaker than others. Con-
sider, e.g., a mobile device that retrieves location-based in-
formation from a server; or a PC that searches a distributed
database hosted by a large-scale cluster of machines.
In
each case, SFE would allow the parties involved to per-
form the computation while keeping their inputs (i.e., the
location and the search term) private. Unfortunately, stan-
dard protocols— all of which require a symmetric amount of
work—are ill-suited for these settings since the size of both
parties’ inputs is bounded by the resources available to the
weakest device.
In other words, the mobile device would
only be able to search through a small amount of location
data, and the PC could only search through a small fraction
of the database.
Finally, achieving fairness is not always possible with stan-
dard SFE. Roughly speaking, fairness ensures that either all
the parties learn the output of the function being evaluated
or none will. This is crucial in many real-world applications
such as auctions, electronic voting, or collective ﬁnancial
analysis, where a dishonest participant should not be able
to disrupt the protocol if it is not satisﬁed with the outcome
of the computation. In 1986, Cleve showed that complete
fairness is impossible in general, unless the majority of the
players are honest [12]. A number of constructions try to
achieve fairness for a speciﬁc class of functionalities [27], or
consider limited (partial) notions of fairness instead [51, 19,
26].
Server-aided SFE. Several approaches to SFE have been
proposed to address the inherent limitations outlined above
and to achieve a sub-linear amount of work (in the size of the
circuit representation of the function). Of course, one pos-
sibility is to design special-purpose protocols, i.e., protocols
that work for a single functionality or a class of function-
alities (see, e.g., [46, 25]). Another approach, referred to
as server-aided or cloud-assisted SFE, augments the stan-
dard setting with a small set of servers that have no inputs
to the computation and receive no output but that make
their computational resources available to the parties.
In
this paradigm, the goal is to tradeoﬀ the parties’ work at
the expense of the servers. Server-aided SFE with two or
more servers has been considered in the past [16, 17] and
even deployed in practice [6].
Currently, there are two approaches to designing single-
server-aided SFE protocols: (1) combining fully-homomorphic
encryption (FHE) [21] with a proof system [3, 1]; or (2)
using Yao’s garbled circuit technique [57, 58]. The lat-
ter was proposed by Feige, Killian and Naor [18] in the
semi-honest model and recently formalized and extended to
stronger models by Kamara, Mohassel and Raykova [32].
The FHE-based approach is asymptotically optimal, but
currently only of theoretical interest. The garbled circuit
approach is slightly less eﬃcient asymptotically but yields
protocols that are eﬃcient in practice. In addition, it can
beneﬁt from almost all the optimizations discussed above so
it is complementary to previous work on practical SFE.
While the garbled-circuit approach yields practical proto-
cols, we note that it is in a weaker adversarial model than
the FHE-based solutions.
In standard SFE it is assumed
that if two or more parties are dishonest, they will collude.
The protocols of [18] and [32], however, are only secure in
settings where some of the dishonest parties do not collude.
There are many settings in practice where collusion does
not occur, e.g., due to physical restrictions, legal constraints
and/or economic incentives. In a server-aided setting where
the server is a large cloud provider (e.g., Amazon, Google or
Microsoft), it is reasonable—given the consequences of legal
action and bad publicity—to assume that the server will not
collude with the parties.
Another limitation of the garbled circuit approach is that
it yields protocols where at least one of the parties (other
than the server) has to do linear work (throughout we will as-
sume this party to be the ﬁrst party P1). It is shown in [32]
that any non-interactive single-server-aided protocol with-
out this limitation would imply a secure non-interactive del-
egated computation scheme which, currently, we only know
how to construct based on FHE.
Deploying server-aided SFE. Even with the limitations
outlined above, we believe that the garbled-circuit approach
to single-server-aided SFE could be useful in many real-
world scenarios. Consider, for example, the case of an en-
terprise (e.g., a small-to-medium-sized one) that may want
to use SFE to provide better privacy for itself and its cus-
tomers. The limitations of standard SFE outlined above
would make this completely impractical—especially if the
enterprise’s clients are resource-constrained devices such as
smartphones or tablets.
A better approach would be to use server-aided SFE where
the server is instantiated by a public cloud (e.g., Amazon
EC2, Windows Azure or Google Compute Engine), the en-
terprise plays the role of P1 and its clients play the roles of
the remaining parties. Note that such a setup is very natu-
ral in the setting of cloud computing since many business’s
already make use of public clouds to deliver services to their
own clients (e.g., Netﬂix, Instagram) and since they have
signiﬁcantly more resources than their clients.
1.1 Background on Garbled Circuits
We make use of several cryptographic building blocks in
our protocols, including garbled circuits, oblivious transfer
(OT) [53] and secret sharing [54]. We omit formal descrip-
tions of these building blocks due to lack of space and refer
the reader to [22]. However, we brieﬂy review garbled cir-
cuits before describing our contributions.
Yao’s garbled circuit technique [57, 58] transforms circuits
in such a way that they can be evaluated on encrypted in-
puts. We refer the reader to [39] for details on Yao’s garbled
circuit construction. At a very high level, a garbling scheme
consists of: (1) a circuit garbling procedure that transforms
a circuit into a garbled circuit consisting of garbled gates;
798(2) an input garbling procedure that generates a set of input
labels; (3) an evaluation procedure that evaluates a garbled
circuit over a set of input labels, resulting in a set of out-
put labels; and (4) a decoding procedure that recovers the
output from the output labels.
The main security property provided by garbled circuits is
input privacy, which guarantees that no information about
the inputs is revealed by the evaluation and decoding pro-
cedures beyond what can be inferred from the output. Our
protocols will rely on a slightly diﬀerent property called in-
put/output privacy which guarantees that no information
about the inputs or outputs are revealed by the evaluation
procedure (these properties are implied by the security proof
of [39]). Another useful property of garbled circuits is un-
forgeability which, informally, guarantees that an incorrect
evaluation can be detected with all but negligible probabil-
ity. This property has also been noted and used in works as
early as [49], but pointed out more explicitly in [20].
Cut-and-choose and input-consistency. A diﬃculty that
often comes up when designing protocols based on garbled
circuits is verifying whether a circuit was garbled correctly
(this occurs when adversaries can be malicious). Several
mechanisms exist to address this but the most eﬃcient is cut-
and-choose [47, 43, 45, 34, 56, 38]. With cut-and-choose, the
garbler starts by constructing many garbled circuits. The
evaluator chooses a random subset of these circuits and ver-
iﬁes their correctness by asking the garbler to reveal the se-
crets it used. If the veriﬁcation goes through, the evaluator
is left with several unopened garbled circuits and, with high
probability, most of them are properly constructed (other-
wise at least one malconstructed garbled circuit would have
been detected during veriﬁcation). The evaluator then eval-
uates the remaining garbled circuits and outputs the major-
ity value.
This last step, however, introduces new problems and to
avoid subtle attacks the evaluator has to check that the gar-
bler used the same inputs for all the remaining circuits. This
input checking step can be handled using several techniques.
Mohassel and Franklin [45] and Lindell and Pinkas [38] ex-
tend the cut-and-choose technique to cover the input labels
as well. Unfortunately, this requires a quadratic (in the secu-
rity parameter) number of commitments. Another approach
is to use specially-designed zero-knowledge proofs [40, 55]
which, under speciﬁc number-theoretic assumptions, require
only a linear number of exponentiations.
The techniques of [45] and [38] are extended to the server-
aided setting in [32], where an input checking mechanism is
described that requires a quadratic number of commitments.
Pipelined execution. Finally, since circuits can grow very
large, garbling and evaluating them in memory can be ex-
pensive. Several implementations, therefore, pipeline the
generation and evaluation of garbled circuits [31, 28, 29,
42] by having the garbler send (or stream) the garbled gates
immediately after generating them and having the evaluator
evaluate (or verify) them on the ﬂy. Using this approach, the
parties store in memory only the intermediate wires needed