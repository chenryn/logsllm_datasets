186 
CHAPTER 8 System mechanisms
wait DPC, which is the newest wait type introduced, lets the kernel know that there is no 
thread nor I/O completion port associated with this wait, but a DPC object instead. In this case, the 
immediate execution once the dispatcher lock is dropped.
The wait block also contains a volatile wait block state (KWAIT_BLOCK_STATE-
rent state of this wait block in the transactional wait operation it is currently engaged in. The different 
states, their meaning, and their effects in the wait logic code are explained in Table 8-28.
TABLE 8-28 Wait block states
State
Meaning
Effect
WaitBlockActive (4)
This wait block is actively linked to an 
object as part of a thread that is in a 
wait state.
During wait satisfaction, this wait 
block will be unlinked from the wait 
block list.
WaitBlockInactive (5)
The thread wait associated with this 
timeout has already expired while 
setting it up).
During wait satisfaction, this wait 
block will not be unlinked from the 
wait block list because the wait satis-
faction must have already unlinked it 
during its active state.
WaitBlockSuspended (6)
The thread associated with this wait 
block is undergoing a lightweight sus-
pend operation.
Essentially treated the same as 
WaitBlockActive but only ever used 
when resuming a thread. Ignored dur-
ing regular wait satisfaction (should 
never be seen, as suspended threads 
WaitBlockBypassStart (0)
A signal is being delivered to the 
thread while the wait has not yet been 
committed.
During wait satisfaction (which would 
be immediate, before the thread 
enters the true wait state), the wait-
ing thread must synchronize with the 
signaler because there is a risk that the 
wait object might be on the stack—
marking the wait block as inactive 
would cause the waiter to unwind the 
stack while the signaler might still be 
accessing it.
WaitBlockBypassComplete (1)
The thread wait associated with this 
wait block has now been properly 
synchronized (the wait satisfaction has 
completed), and the bypass scenario is 
now completed.
The wait block is now essentially 
treated the same as an inactive wait 
block (ignored).
WaitBlockSuspendBypassStart (2)
A signal is being delivered to the 
thread while the lightweight suspend 
has not yet been committed.
The wait block is treated essentially 
the same as a WaitBlockBypassStart.
WaitBlockSuspendBypassComplete (3)
The lightweight suspend associated 
with this wait block has now been 
properly synchronized.
The wait block now behaves like a 
WaitBlockSuspended.
dispatcher lock in Windows 7, the overall state of the thread (or any of the objects it is being required 
any global state synchronization, there is nothing to stop another thread—executing on a different 
logical processor—from signaling one of the objects being waited, or alerting the thread, or even 
sending it an APC. As such, the kernel dispatcher keeps track of a couple of additional data points for 
CHAPTER 8 System mechanisms
187
KWAIT_STATE, not to 
be confused with the wait block state) and any pending state changes that could modify the result 
of an ongoing wait operation. These two pieces of data are what make up the wait status register 
(KWAIT_STATUS_REGISTER).
When a thread is instructed to wait for a given object (such as due to a WaitForSingleObject 
attempts to enter the in-progress wait state (WaitInProgress) by beginning the wait. This operation suc-
ceeds if there are no pending alerts to the thread at the moment (based on the alertability of the wait and 
the current processor mode of the wait, which determine whether the alert can preempt the wait). If there 
is an alert, the wait is not entered at all, and the caller receives the appropriate status code; otherwise, the 
thread now enters the WaitInProgress state, at which point the main thread state is set to Waiting, and the 
Once the wait is in progress, the thread can initialize the wait blocks as needed (and mark them 
as WaitBlockActive in the process) and then proceed to lock all the objects that are part of this wait. 
Because each object has its own lock, it is important that the kernel be able to maintain a consistent 
locking ordering scheme when multiple processors might be analyzing a wait chain consisting of many 
objects (caused by a WaitForMultipleObjects call). The kernel uses a technique known as address order-
ing to achieve this: because each object has a distinct and static kernel-mode address, the objects can 
be ordered in monotonically increasing address order, guaranteeing that locks are always acquired 
and released in the same order by all callers. This means that the caller-supplied array of objects will be 
duplicated and sorted accordingly.
The next step is to check for immediate satisfaction of the wait, such as when a thread is being told to 
wait on a mutex that has already been released or an event that is already signaled. In such cases, the wait 
blocks have yet been inserted) and performing a wait exit (processing any pending scheduler operations 
marked in the wait status register). If this shortcut fails, the kernel next attempts to check whether the 
“timed out,” which results in slightly faster processing of the exit code, albeit with the same result.
the thread now attempts to commit its wait. (Meanwhile, the object lock or locks have been released, 
allowing other processors to modify the state of any of the objects that the thread is now supposed to 
attempt waiting on.) Assuming a noncontended scenario, where other processors are not interested in 
this thread or its wait objects, the wait switches into the committed state as long as there are no pend-
ing changes marked by the wait status register. The commit operation links the waiting thread in the 
PRCB list, activates an extra wait queue thread if needed, and inserts the timer associated with the wait 
timeout, if any. Because potentially quite a lot of cycles have elapsed by this point, it is again possible 
that the timeout has already elapsed. In this scenario, inserting the timer causes immediate signaling of 
the thread and thus a wait satisfaction on the timer and the overall timeout of the wait. Otherwise, in 
the much more common scenario, the CPU now context-switches away to the next thread that is ready 
for execution. (See Chapter 4 of Part 1 for more information on scheduling.)
In highly contended code paths on multiprocessor machines, it is possible and likely that the 
thread attempting to commit its wait has experienced a change while its wait was still in progress. One 
188 
CHAPTER 8 System mechanisms
possible scenario is that one of the objects it was waiting on has just been signaled. As touched upon 
earlier, this causes the associated wait block to enter the WaitBlockBypassStart
wait status register now shows the WaitAborted wait state. Another possible scenario is for an alert or 
APC to have been issued to the waiting thread, which does not set the WaitAborted state but enables 
one of the corresponding bits in the wait status register. Because APCs can break waits (depending on 
the type of APC, wait mode, and alertability), the APC is delivered, and the wait is aborted. Other op-
as with the previous cases mentioned.
versions of Windows implemented a lightweight suspend mechanism when SuspendThread and 
ResumeThread are used, which no longer always queues an APC that then acquires the suspend event 
embedded in the thread object. Instead, if the following conditions are true, an existing wait is instead 
converted into a suspend state:
I 
KiDisableLightWeightSuspend is 0 (administrators can use the DisableLightWeightSuspend value
optimization).
I 
The thread state is Waiting—that is, the thread is already in a wait state.
I 
The wait status register is set to WaitCommitted
engaged.
I 
The thread is not an UMS primary or scheduled thread (see Chapter 4 of Part 1 for more infor-
mation on User Mode Scheduling) because these require additional logic implemented in the
I 
The thread issued a wait while at IRQL 0 (passive level) because waits at APC_LEVEL require
special handling that only the suspend APC can provide.
I 
The thread does not have APCs currently disabled, nor is there an APC in progress, because
suspend APC can achieve.
I 
The thread is not currently attached to a different process due to a call to KeStackAttachProcess
because this requires special handling just like the preceding bullet.
I 
WaitBlockInactive block
state, its wait type must be WaitAll
WaitAny block.
As the preceding list of criteria is hinting, this conversion happens by taking any currently active wait 
blocks and converting them to a WaitBlockSuspended state instead. If the wait block is currently point-
no longer wake up this thread). If the thread had a timer associated with it, it is canceled and removed 
CHAPTER 8 System mechanisms
189
Because it no longer uses a true wait object, this mechanism required the introduction the three 
additional wait block states shown in Table 8-28 as well as four new wait states: WaitSuspendInProgress, 
WaitSuspended, WaitResumeInProgress, and WaitResumeAborted. These new states behave in a similar 
manner to their regular counterparts but address the same possible race conditions described earlier 
during a lightweight suspend operation. 
suspend state and essentially undoes the operation, setting the wait register to WaitResumeInProgress. 
Each wait block is then enumerated, and for any block in the WaitBlockSuspended state, it is placed in 
WaitBlockActive
became signaled in the meantime, in which case it is made WaitBlockInactive instead, just like in a regu-
-
sumes the threads are eligible for stack swapping). In this example, CPU 0 has two waiting (committed) 
threads: Thread 1 is waiting for object B, and thread 2 is waiting for objects A and B. If object A is sig-
for execution. On the other hand, if object B is signaled, the kernel can ready thread 1 for execution 
other objects but its wait type was a WaitAny, the kernel could still wake it up.)
State
Dispatcher objects
Object A
Wait list head
Object-type-
specific data
Size
Type
State
Object B
Wait list head
Object-type-
specific data
Size
Type
List entry
Thread 2 wait block
Thread 1 wait block
Thread
Object
Next link
Key
Type
List entry
Thread 2 wait block
Thread
Object
Next link
Key
Type
List entry
Wait blocks
Thread
Object
Next link
Key
Type
Thread 1
Wait block list
List entry
Thread 2
Wait block list
List entry
Thread object
PRCB 0
Wait list head
FIGURE 8-39 Wait data structures.
190 
CHAPTER 8 System mechanisms
EXPERIMENT: Looking at wait queues
!thread command. 
!process command shows that the 
thread is waiting for an event object:
lkd> !process 0 4 explorer.exe  
    THREAD ffff898f2b345080  Cid 27bc.137c  Teb: 00000000006ba000 
    Win32Thread: 0000000000000000 WAIT: (UserRequest) UserMode Non-Alertable 
ffff898f2b64ba60  SynchronizationEvent
You can use the dx command to interpret the dispatcher header of the object like this:
lkd> dx (nt!_DISPATCHER_HEADER*)0xffff898f2b64ba60 
(nt!_DISPATCHER_HEADER*)0xffff898f2b64ba60: 0xffff898f2b64ba60 [Type: _DISPATCHER_HEADER*] 
    [+0x000] Lock
: 393217 [Type: long] 
    [+0x000] LockNV
: 393217 [Type: long] 
    [+0x000] Type
: 0x1 [Type: unsigned char] 
    [+0x001] Signalling
: 0x0 [Type: unsigned char] 
    [+0x002] Size
: 0x6 [Type: unsigned char] 
    [+0x003] Reserved1
: 0x0 [Type: unsigned char] 
    [+0x000] TimerType
: 0x1 [Type: unsigned char] 
    [+0x001] TimerControlFlags : 0x0 [Type: unsigned char] 
    [+0x001 ( 0: 0)] Absolute
: 0x0 [Type: unsigned char] 
    [+0x001 ( 1: 1)] Wake
: 0x0 [Type: unsigned char] 
    [+0x001 ( 7: 2)] EncodedTolerableDelay : 0x0 [Type: unsigned char] 
    [+0x002] Hand
: 0x6 [Type: unsigned char] 
    [+0x003] TimerMiscFlags   : 0x0 [Type: unsigned char] 
    [+0x003 ( 5: 0)] Index
: 0x0 [Type: unsigned char] 
    [+0x003 ( 6: 6)] Inserted
: 0x0 [Type: unsigned char] 
    [+0x003 ( 7: 7)] Expired
: 0x0 [Type: unsigned char] 
    [+0x000] Timer2Type
: 0x1 [Type: unsigned char] 
    [+0x001] Timer2Flags
: 0x0 [Type: unsigned char] 
    [+0x001 ( 0: 0)] Timer2Inserted   : 0x0 [Type: unsigned char] 
    [+0x001 ( 1: 1)] Timer2Expiring   : 0x0 [Type: unsigned char] 
    [+0x001 ( 2: 2)] Timer2CancelPending : 0x0 [Type: unsigned char] 
    [+0x001 ( 3: 3)] Timer2SetPending : 0x0 [Type: unsigned char] 
    [+0x001 ( 4: 4)] Timer2Running    : 0x0 [Type: unsigned char] 
    [+0x001 ( 5: 5)] Timer2Disabled   : 0x0 [Type: unsigned char] 
    [+0x001 ( 7: 6)] Timer2ReservedFlags : 0x0 [Type: unsigned char] 
    [+0x002] Timer2ComponentId : 0x6 [Type: unsigned char] 
    [+0x003] Timer2RelativeId : 0x0 [Type: unsigned char] 
    [+0x000] QueueType        : 0x1 [Type: unsigned char] 
    [+0x001] QueueControlFlags : 0x0 [Type: unsigned char] 
    [+0x001 ( 0: 0)] Abandoned        : 0x0 [Type: unsigned char] 
    [+0x001 ( 1: 1)] DisableIncrement : 0x0 [Type: unsigned char] 
    [+0x001 ( 7: 2)] QueueReservedControlFlags : 0x0 [Type: unsigned char] 
    [+0x002] QueueSize
: 0x6 [Type: unsigned char] 
    [+0x003] QueueReserved    : 0x0 [Type: unsigned char] 
    [+0x000] ThreadType
: 0x1 [Type: unsigned char] 
    [+0x001] ThreadReserved   : 0x0 [Type: unsigned char] 
    [+0x002] ThreadControlFlags : 0x6 [Type: unsigned char] 
    [+0x002 ( 0: 0)] CycleProfiling   : 0x0 [Type: unsigned char] 
    [+0x002 ( 1: 1)] CounterProfiling : 0x1 [Type: unsigned char] 
EXPERIMENT: Looking at wait queues
!thread command. 
!process command shows that the 
thread is waiting for an event object:
lkd> !process 0 4 explorer.exe 
    THREAD ffff898f2b345080  Cid 27bc.137c  Teb: 00000000006ba000 
    Win32Thread: 0000000000000000 WAIT: (UserRequest) UserMode Non-Alertable
ffff898f2b64ba60  SynchronizationEvent
You can use the dx command to interpret the dispatcher header of the object like this:
lkd> dx (nt!_DISPATCHER_HEADER*)0xffff898f2b64ba60