= arg maxθ∈G (cid:5)α − θ(cid:5).
(cid:4)− N
2πσ2
2 exp
2σ2
(cid:5)
2
2πσ
(cid:3)
2
Based on Theorem 1, our search algorithm (Algorithm 1)
aims at ﬁnding θ that minimizes (cid:5)α− θ(cid:5). The main idea is to
maintain a list of potential vertices (i.e., road segments) from
which we develop the possible routes. The algorithm takes as
input the graph G = (V, E) and a sequence (α1, . . . , αN ).
The search consists of N rounds corresponding to a trace of
N intersections. While the algorithm is similar to trellis codes
decoding techniques in which paths are built up, maintained
or eliminated according to a metric, our search is improved by
ﬁltering routes based on speciﬁc selection rules and keeping
only top candidate routes after a number of iterations.
The algorithm starts by considering all vertices of the graph
as potential starting points (initialization U0 ← V ). In each
for v ∈ V such that (u, v) ∈ E do
if ﬁlter(u, v, αk) passed then
Input: G = (V, E), α1, . . . , αN
Output: UN
1 Initialization: U0 ← V ; U1 ← ∅; . . . UN ← ∅;
2 for k = 1 to N do
for u ∈ Uk−1 do
3
4
5
6
7
8
9
10
11
12
13 end
end
Uk ← pick top(Uk);
v.score ← u.score + scoring(u, v, αk);
v.prev ← u;
Uk ← Uk ∪ {v};
end
end
Algorithm 1: Search Algorithm
k-th round, we build a new list Uk of potential vertices as
follows. For each vertex u ∈ Uk−1, we explore all its outgoing
edges (u, v). During this traversal (line 4 – 10), ﬁltering is
applied (line 5) to eliminate such vertices/segments whose
corresponding map data deviates too much from the actual
sensor data. In this basic algorithm, the ﬁlter checks if the
turn angle (i.e., the edge weight) between the current vertex
u and the candidate vertex v is within a speciﬁc range of the
actual turn αk. Speciﬁcally, an edge (u, v) passes the ﬁlter,
only if |θ(u, v)− αk| ≤ γ, in which case v is put into Uk as a
candidate for the next search iteration (line 8). The threshold
γ depends on the quality of sensor data and is evaluated
in Section V. We note that when a vertex v does not satisfy
the ﬁltering rules, it simply means v is not used as a starting
point in the next iteration, but v may appear again if other
starting points connecting to v satisfy the conditions.
At the same time when ﬁltering is passed, the edge (u, v)
is also evaluated for the likelihood to match the actual trace
by the scoring function (line 6). The score for each k-th turn
is computed by
scoring(u, v, αk) = d(αk, θ(u, v)) = |αk − θ(u, v)|,
(1)
where we compute the angle distance based on L1 norm
instead of L2 norm for two main reasons: (a) computing L1
norm requires less overhead; (b) in practice, we observe that
L1-based matching generally outperforms L2-based, because
gyroscope errors are usually small (cf. Section V-A), allowing
L1-based estimation to better overcome sparse large errors,
while L2 norm tends to amplify such errors. The score of every
N
route is initialized to 0 (line 1) and evolves to
k=1 d(θ(u,
v), αk) after N iterations. When updating the score, we
additionally store the previous vertex (v.prev) of the candidate
in order to trace back the full route (without storing the whole
route) at the end of the search. We also note that as the list
of candidates is developed through each iteration with non-
negative metric, ﬁnding the actual route with loops is possible,
because loops simply increase the score and are treated as
regular routes (i.e., the search will terminate).
(cid:2)
402402
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:06 UTC from IEEE Xplore.  Restrictions apply. 
Since routes with lower score have higher matching proba-
bility P (α|θ), we only keep the top K candidates at the end
of every iteration by calling pick top function (line 12). It is
noted that depending on attack conﬁguration, pick top may
shorten the list of candidates only after some speciﬁc round.
At the end of the search, based on UN and previous vertex
information stored for each candidate, the outcome P = { ˆR1,
. . . , ˆRK} is appropriately produced and returned.
Effect of Filtering and Top Selection: While scoring
gradually distinguishes routes from each other, ﬁltering can
immediately eliminate a route at early stage, which will not
be recovered later. There is a trade-off when determining the
ﬁltering thresholds. A tight rule can reduce the search time
but may result in pruning more good routes due to early
errors, whereas loose criteria reduces false elimination rate but
increases running time and memory consumption. Similarly,
selecting top candidates after some speciﬁc iterations can de-
crease the search time yet potentially removes good candidates
that are bad at early stages. We leave the rigorous analysis of
such parameters as future work. Instead, based on simulations
and real driving experiments, we select appropriate parameters
with respect
to both attack performance and computation
constraints such as memory and timing requirements. Using
such parameters, we can verify that ﬁltering and top candidates
selection can actually improve the attack efﬁciency.
B. Advanced Algorithm & Scoring Metrics
While Algorithm 1 illustrates the main idea of our search
technique, it essentially represents a baseline attack, because
it relies only on the sequence of observed turn angles as the
single input source to the algorithm. We now incorporate, into
the basic search algorithm, the curvature of the undertaken
route and the travel time between turns.
Curve Similarity: We deﬁne the curvature of the route
as a sequence of angles between intersections. Consider the
victim’s travel between the k-th and (k + 1)-th intersections
and let Tkδ (δ is the sampling period, and Tk = 1, 2, . . .)
be the victim’s travel time for that distance. The curvature
is then expressed by C k = (αk,1, . . . , αk,Tk ), where αk,i are
instantaneous directions at sampling time iδ on the k-th curve.
In order to match the sampled curvature with a candidate
curve, we assume that the vehicle movement along the curve is
at constant speed. On one hand, this simpliﬁes the estimation
and greatly decreases the computation burden for each route.
Since on the other hand, no available data can provide sufﬁ-
cient accuracy of the instantaneous vehicular velocity, ﬁnding
the best curve ﬁt
is challenging. However, our evaluation
shows that curve matching with constant speed assumption
considerably improves the attack performance. Speciﬁcally,
we compute the angle sequence on each candidate curve as
follows. For a candidate segment corresponding to a vertex
u (which is either straight or curvy), we divide it into Tk
equal-length sub-segments and consider each sub-segment as
a straight line, then we ﬁnd the orientations of sub-segments
based on their geographic coordinates. Therewith, we obtain
Our goal
ϑu = ϑ(u) = (ϑu,1, . . . , ϑu,Tk ) as the curvature of u, where
ϑu,i is the orientation of the i-th sub-segment.
is to maximize the probability P (ϑu|C k) of
matching a candidate curve ϑu given the victim’s curve C k
observed by the adversary. As discussed previously in Sec-
tion IV-A, due to the assumption of victim route equiproba-
bility, we instead search for such ϑu that maximizes
−(cid:5)C k − ϑu(cid:5)2
(cid:5)
P (C k|ϑu) = P (n = C k − ϑu)
2 exp
(cid:4)− Tk
(cid:6)
where n ← N (0, σ) is the normally distributed random vector
approximating the gyroscope noise. We determine the curve
similarity by
(cid:3)
=
2
2πσ
2σ2
d(C k, ϑu) =
1
Tk
|αk,i − ϑk,i|.
Tk(cid:7)
i=1
We note that the curve similarity, different from turn scoring
in Equation (1), is normalized to mitigate the effect of bias
scoring due to error accumulation on long curves (large Tk).
Travel Time Similarity: The tracking of the actual route
based on turn angles and curvature information so far does not
take into account the time scale of the victim’s travel on each
road segment. To incorporate this information in the attack, we
extract from Nokia’s HERE map [13] the maximum allowed
speed for every road in the geographic area G and compute
the minimum time required to travel from one intersection
to another along each road segment. Let tk ∈ D be the
actual time spent by the victim to travel from the k-th to the
(k + 1)-th intersection, and τ (u, v) be the minimum required
time (computed from speed limit) for traveling from the last
intersection to the current intersection (u, v) on the candidate
route. The metric for the travel time similarity is computed by
d(tk, τ (u, v)) = |tk − τ (u, v)|.
Final Scoring Function: By incorporating the likelihood
of the turn angles, the curvature, and the travel time along the
search route, our ﬁnal scoring function becomes scoring(u, v,
αk, tk, C k) and is computed as
ωAd(αk, θ(u, v)) + ωT d(tk, τ (u, v)) + ωCd(C k, ϑu)
(2)
where different weights ωA, ωT , ωC can be selected depen-
dently on the geographic area.
C. Filtering Rules
We extend the ﬁltering rules in Algorithm 1 by exploiting
the magnetometer and the phone’s system time to quickly
exclude bad routes during the search.
1) Heading Check: At the time of each turn at an in-
tersection, we extract the heading of the vehicle from the
magnetometer sensor sample and check that the next segment’s
direction should be close to the heading direction after turning.
In practice, we observe that since the magnetometer may be
inﬂuenced by an external magnetic ﬁeld, the heading derived
from the magnetometer is not always accurate.
403403
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:06 UTC from IEEE Xplore.  Restrictions apply. 
In order to exploit this information properly, we ﬁrst verify
the magnetometer data to be reliable based on the magnitude of
the heading vector, which essentially depends3 on the speciﬁc
geographic area G. Speciﬁcally, the reliability is established
if Ml ≤ (cid:5)mt(cid:5) ≤ Mh, where mt ∈ D is the magnetometer
vector, and Ml, Mh are lower and upper bounds that depend
on G. Only after the reliability is assured, the orientation check
is performed. Speciﬁcally, with hk denoting the heading vector
(obtained after calibrating and rotating magnetometer vectors
mt, cf. Section IV-D) of the vehicle after turning at the k-
th intersection between u and v, and ϑv,1 be the orientation
of the ﬁrst sub-segment of segment v. The heading check is
satisﬁed, if |hk − ϑv,1| ≤ φm, where φm is the magnetometer
error threshold. Note that in case of unreliable magnetometer
data, the check is not performed but v is not eliminated.
2) Travel Time Check: Due to the maximum speed limit on
each road, the travel time cannot be arbitrarily small. Our idea
for pruning impossible routes is as follows. Given the actual
travel time duration tk ∈ D between the k-th and (k + 1)-th
intersections, the maximum distance traveled by the vehicle is
Lk ≤ Lmax = βVmaxtk, where Vmax is the regulated speed
limit, and β ≥ 1 is the over-speeding ratio that can be reached
by the vehicle. Consequently, during the search we only keep
such candidate routes that are not longer than Lmax. To reduce
the computation overhead, we instead precompute tv = Lv
Vmax
for each candidate road segment v of length Lv, and our
timing rule becomes tk ≥ tv
β , i.e., Lv ≤ Lmax. We emphasize
that in realistic scenarios, since the vehicle may drive at any
speed below the limit or may get stuck in the trafﬁc for an
unpredictable duration, the travel distance can be arbitrarily
small. Therefore, no non-zero lower bound on segment length
is established.
D. Sensor Data Processing
A big challenge in implementing this attack is extracting
accurate route information from noisy sensor data. Along with
the external factors discussed before (e.g., potholes, bumps,
road slopes, magnetic ﬁeld and driver behavior), some internal
misconﬁguration may also introduce errors in the data.
Axis Misalignment: Sensor x, y and z axes may not have
perfect orthogonal alignment. This causes a bias in the sensor
values which can be deﬁned as the deviation from the expected
x, y and z values when the device is at rest. The bias can
typically be removed by subtracting them from the reported
x, y and z sensor values.
Thermal Noise: The sensor’s x, y and z axes values may
also vary with the device/sensor temperature. Some Operating
Systems compensate for this noise by pre-ﬁltering the data,
but at the cost of reduced accuracy.
Given these errors, we decompose the sensor data process-
ing into error compensation and trace extraction tasks.
1) Error Compensation: Error compensation consists of a
calibration phase followed by rotation of the data. Note that
while our discussion focuses on gyroscope data, similar tasks
can be performed for accelerometer.
3Heading vector’s magnitude is higher for Temperate than Tropical cities.
404404
(a) Experimental route
(b) Recorded gyroscope data
(c) Calibrated gyroscope data
(d) Rotated gyroscope data
Fig. 4: Error compensation steps for gyroscope data.
Calibration: The gyroscope sensor bias and vehicle vibra-
tion result in angle drift, i.e., the values change linearly4 in
time even at idle. An example of experimental route is shown
in Figure 4a. As gyroscope data is reported as a sequence
of angle change between sampling periods, we integrate them
over time to obtain the relative (with respect to the initial
recording) angle sequence in x, y, z axes depicted in Figure 4b,
which shows a large positive drift in the y axis. To compensate
for the drift, we assume the vehicle is at parked state in
the calibration phase (we note that
this is only required
once for subsequent attacks). The drift vector is estimated
as Δα = E[Δα/Δt], the expected angle change rate. The
calibration is then performed by subtracting Δα from the angle
sequence (Figure 4c). Note that complete removal of drift is a
difﬁcult task and would require more computation-expensive
mechanisms, e.g., Sensor Fusion algorithms.
Rotation: Recall that a victim can place her smartphone
in any orientation in the vehicle. To simplify the attack com-
putation, we rotate the sensor data to a reference coordinate
system, where the x axis points from left to right of the driver,
the y axis aligns with the heading direction of the vehicle, and
the z axis points upward perpendicularly to the Earth surface.
After rotation, the x and y values are then used to measure
pitch and roll respectively, while turn angle information is
indicated in the z axis (Figure 4d).
2) Trace Extraction: In the reference coordinate system, we
use the z values of gyroscope data to extract the victim’s turn
angles at intersections and curves between them, while accel-
eration vectors are used to improve the search performance by
detecting vehicle’s idle states.
Turn and Curve Detection: Based on z values of gyro-
scope vectors after rotation, left and right turns are distin-
guished according to positive and negative angle changes. Our
idea for identifying intersections is illustrated in Figure 4d,
where left turns are identiﬁed by an increasing slope within a
short period of time and right turns correspond to decreasing
slope. More precisely, let zi be the gyroscope value on the z
4Our observation suggests linear model well approximate the angle drift.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:06 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I: Default parameters used in evaluation.
Parameter
Scoring weights
Turn/curve detection threshold
Turn angle ﬁltering threshold
Heading ﬁltering threshold
Travel time ﬁltering threshold
Noise distribution
Sampling period