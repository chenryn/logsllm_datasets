We use both pycurl and Selenium [44, 53] to simulate
a user’s activity of browsing a webpage. pycurl generates
simple HTTP/S requests and does not process Javascript.
We instrument Selenium with Firefox’s geckodriver (version
0.24.0) and fully render pages in the headless browser.
Table I reports the block rates—the percentage of top Alexa
10,000 sites that we found to block Tor—for both our HTTP
response header and HTML similarity-based techniques. We
ﬁnd that the two techniques yield similar block rates, but
that the block rates differ substantially between pycurl and
Selenium. This latter difference is likely due to the Cloudﬂare
Onion Service (COS) [40], which allows TorBrowser to bypass
CAPTCHAs that Cloudﬂare otherwise imposes on Tor users
that access its hosted sites.1 Selenium (using the Firefox
driver) is compatible with COS; pycurl is not.
1Cloudﬂare introduced the Cloudﬂare Onion Service (COS) in September
2018 [40]. Prior to its release, sites hosted on the popular Cloudﬂare platform
served CAPTCHAs to users arriving via Tor circuits. COS uses HTTP
Alternative Services [35], which is available in recent versions of the Tor
Browser, to redirect Tor users to hidden service versions of Cloudﬂare-hosted
sites and avoid CAPTCHAs.
255
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:25:23 UTC from IEEE Xplore.  Restrictions apply. 
Tor Browser
User Machine
Tor Browser 
(with Extension)
User Machine
Tor Network
Request
blocked
https://www.iblocktor.com
Tor-Blocking Sites
Tor Network
http://brokerxyz.onion
Tor Network
Exit Bridge
https://www.iblocktor.com
Request
Instance
Tor-Blocking Sites
Bridge Space
Exit bridge
(SOCKS5 Proxy Server)
Spawn
Instance
Toriﬁed 
TLS tunnel
http/https
request and response
https://www.iblocktor.com
Tor-Blocking Sites
Sync
conﬁg
TLS Relay
https req. over 
SOCKS5 proxy
Browser 
Extension
User Machine
Fig. 2: Visiting a Tor-blocking website through Tor (top) without exit
bridges and (bottom) with exit bridges.
in which a website discriminates against Tor users.) We
assume this adversary has full knowledge of the operation of
the Tor network, has access to publicly available information,
such as the list of all Tor relays, but has no control and
limited visibility as to how network trafﬁc is routed on the
Internet. This is a reasonable assumption given that such
adversaries are typically web content providers rather than
ISPs or other network-level adversaries, only the latter of
which may be willing or able to attack the network’s routing
infrastructure [42, 43]. In our threat model, the adversary can
block all trafﬁc that comes directly from the Tor network by
ﬁltering all trafﬁc originating from Tor exit relays.
C. Design goals
The intuition behind our system design is simple: since
Tor-blocking websites mostly rely on blacklisting the IPs of
Tor exit relays, we can simply add one (or more) extra hops
between the Tor exit relays and the destination website (as
shown in Figure 2) such that the destination website cannot
reliably differentiate trafﬁc from Tor and non-Tor users. We
name such extra hops exit bridges.
Our high-level goal is to enable practical exit bridges that
are accepted by Tor users as a viable solution to access
websites that are otherwise unavailable due to server-side
blocking. Speciﬁcally, we consider the following design goals:
Usability. The exit bridges should be compatible with existing
Tor, to keep Tor users in a familiar and, more importantly,
privacy-preserving environment. To ease deployment, exit
bridges should not require changes to Tor protocols and
should only require the installation of patched Tor Browsers
that are conﬁgured to support their use. To achieve this, we
implement the exit bridges as an optional service on top of
Tor that can be accessed by installing an open-source Tor
Browser extension. Our extension recognizes user-maintained
Tor-blocking websites and switches to route Tor trafﬁc through
exit bridges when the user attempts to browse to these sites.
Safety and unlinkability. The use of Tor exit bridges should
not compromise the user’s anonymity or unlinkability. Connec-
tions between the user and bridge are always tunneled through
Tor to ensure that the user’s anonymity is protected. More
detailed analyses of the security and anonymity properties of
exit bridges are provided in §IV-B and §VI.
Ephemerality. The bridges should be ephemeral such that they
are not easily enumerated; bridges with ﬁxed IPs will likely
eventually be exposed and adversaries can block such bridges
just as they block Tor exit relays. Even if an individual exit
Fig. 3: A typical workﬂow of a Tor user visiting Tor-blocking
websites through an exit bridge. Solid line indicates control ﬂow
and dotted line indicates data ﬂow.
bridge is detected and blocked, ephemerality ensures that the
overall system is not signiﬁcantly impacted. Each exit bridge
is dedicated to serving only one Tor user, and, by design, it
has a short life cycle—an exit bridge self-destructs after a
predeﬁned period.
High collateral damage. Additionally, the exit bridges should
have a wide IP range, such that if the adversaries decide to
block the whole range, as a means to block the ephemeral
bridges, they will suffer signiﬁcant collateral damage. Practi-
cally, the exit bridges should share IP space with services that
frequently communicate with Tor-blocking sites. For example,
we note that Amazon Workspaces [2], a service that provides
cloud-hosted virtual desktops, uses IP addresses associated
with AWS. Blocking AWS would thus prevent access from
potential customers who use Amazon Workspaces. We provide
further insight on the potential collateral damage due to
blocking clients from cloud service providers in §V-D.
Low overhead. Exit bridges should not add signiﬁcant over-
head on top of Tor. Tor is designed as a low-latency anonymity
network, and exit bridges should not incur latency and band-
width penalties that impact its usability.
Scalability. The cost of running exit bridges should be mini-
mal such that new bridges can be inexpensively spawned. The
infrastructure should be sufﬁciently scalable and cost effective
to support Tor’s millions of daily users [27, 49].
IV. IMPLEMENTATION
Having presented the high-level design principles of the exit
bridge infrastructure, we next describe our experiences imple-
menting exit bridges (§IV-A), and discuss our solutions for
addressing two particular challenges: (i) retaining unlinkability
(§IV-B) and (ii) evaluating and covering the system’s operating
costs (§IV-C).
A. Exit Bridge Architecture
Tor exit bridges are created, maintained, and utilized for Tor
users to visit web resources on demand. A typical workﬂow
is depicted in Figure 3; a concrete demonstration is presented
in §IV-D. The workﬂow follows the following steps:
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:25:23 UTC from IEEE Xplore.  Restrictions apply. 
256
1) Request exit bridge: As introduced in §III-C, a Tor
Browser extension serves as the client’s point of entry to using
exit bridges. When a Tor user attempts to visit a URL, the Tor
Browser extension intercepts each request and checks whether
it is on the user-maintained server-side blocking list of known
Tor-blocking websites. (This check occurs locally and the URL
is never leaked.)
If the Tor user’s intended destination is not on the blocking
list, the Tor Browser will proceed as normal and no exit bridge
will be used. Otherwise, the Tor Browser prompts the user that
an exit bridge is needed for visiting the website, and redirects,
if the user so chooses, to a broker site that is responsible
for curating ephemeral exit bridges. The broker site is hosted
within Tor as a hidden service, with the purpose of preserving
the anonymity of the Tor user.
A user may use multiple exit bridges at the same time,
where each exit bridge is dedicated to forwarding trafﬁc only
to a speciﬁc site for that user. That is, each exit bridge is
speciﬁc to a single user and a single site the user is visiting.
Additionally, we use a separate Tor circuit to connect to each
exit bridge. This design prevents a rogue exit bridge from
linking the user’s activities across different sites. We discuss
this design decision in more detail in §IV-B.
2) Spawn exit bridge: The main task of the broker site is to
control the lifecycle of ephemeral exit bridges. As spawning
and maintaining bridges on a cloud service provider incurs
a ﬁnancial cost,
the broker may optionally ask Tor users
to subsidize the service by contributing human work, for
example, by completing an online image labeling task. This
is advantageous not only for achieving the scalability design
goal (by offsetting the cost of running the bridges), but also
as a means to defend against na¨ıve denial-of-service attacks.
We provide more detailed cost and revenue analyses in §IV-C.
Once a user’s contribution is conﬁrmed, the broker then
spawns an exit bridge. The exit bridge can be deployed on
any IaaS cloud platform; in our current implementation, we
chose AWS EC2 t3-nano instances for a concrete evaluation.
To enforce ephemerality, the EC2 instance is conﬁgured to
terminate after 15 minutes or after transmitting 50MB trafﬁc,
whichever comes ﬁrst. If the user depletes the time or trafﬁc
budget, the user needs to contribute again to spawn another
exit bridge.
Creating an exit bridge on Amazon EC2 takes approx-
imately 50 seconds. Such a delay is likely intolerable to
most web users, even if it enables access to an otherwise
inaccessible website. To decrease this waiting time, the broker
site adopts a self-adaptive buffering mechanism that maintains
a pool of idle, never used exit bridges. When a user’s request
arrives, the broker associates it directly with one of the fresh
exit bridges to minimize startup costs.
Suppose tstart is the time required to create an instance of an
exit bridge on EC2, and tinstance is the average instance lifetime,
that is, the time from when a user starts to use an exit bridge to
the teardown of the exit bridge (either due to expiration of time
or exhaustion of bandwidth budget). We further write Nactive as
the number of instances that are actively being used by users,
and Nspawn as the number of instances that are currently being
spawned.
Without the buffering mechanism, the ratio of Nspawn to
Nactive should roughly match the ratio of tstart
to tinstance,
assuming the user requests are ﬂowing into the system at a
relatively steady rate. In other words, Nactive × tstart
users
are waiting for the completion of spawning new exit bridges.
Therefore, we use this to predict the number of idle exit
bridges needed to accommodate all
incoming requests. A
beneﬁt of this approach is its self-adaptiveness—the number
of idle exit bridges ﬂexibly scales up (or down) as the system
receives an increasing (or decreasing) number of requests.
tinstance
tinstance
As the cost for optimizing away the waiting time for
spawning new exit bridges, the buffering mechanism requires
that Nactive× tstart
exit bridges are kept idling, which generates
additional operating cost. Considering the typical numbers of
tstart = 50 seconds and tinstance = 15 minutes, the cost for
the additional idling bridges is estimated as 5.5% of the total
instance cost, which translates to $5,759 per year based on
our cost estimates that we derive in the next section; we show
there that this expense is easily covered by asking users to
perform a small amount of work.
Once the exit bridge is ready to operate, it further goes
through a number of initialization steps:
Create login credentials. The exit bridge is dedicated solely
for the Tor user who requested the service. We use a random
username/password pair as the login credentials.
Conﬁgure SSL/TLS certiﬁcate. When the Tor user connects
through Tor to the exit bridge and presents its login credentials,
the credentials should not be exposed to the Tor exit relay.
This is enforced by protecting the communication between the
Tor user and the exit bridge using TLS (wrapped within Tor’s
protocols). Each exit bridge uses a unique TLS certiﬁcate,
signed by the broker.
After these initialization steps, the broker sends back to the
Tor Browser extension the IP address and port of the bridge as
well as the login credentials; this process is transparent to the
actual human user. In short, after navigating to the broker site
and electing to create an exit bridge instance, the process of
initializing, conﬁguring, and using the exit bridge is automated
and handsfree.
3) Relay trafﬁc through exit bridge: Once the Tor browser
extension receives the IP, port number and login credentials
of the exit bridge, it conﬁgures a local relay that encapsulates
the user’s trafﬁc and tunnels it to the exit bridge through Tor.
Figure 4 depicts the end-to-end routing of the trafﬁc from
the Tor user to the destination website, which traverses over
the following architectural components:
Local relay. A local relay accepts local TCP connections
from the browser extension and decides which exit bridge
to use based on the destination hostname. It
then sends
communication from the Tor Browser to the exit bridge, via
the Tor-tunneled connection. Similarly, when it receives data
from the exit bridge (via a Tor circuit), it forwards the data
back to the Tor Browser.
Exit bridge. Each exit bridge consists of two modules. The
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:25:23 UTC from IEEE Xplore.  Restrictions apply. 
257
Tor
Local machine
Tor Browser 
Extension
TLS Relay
Exit Bridge
TLS Relay 
SOCKS5 
Proxy
Tor Traffic
TLS Tunnel Traffic
HTTP/S Traffic
Destination
Website
Fig. 4: Anonymous trafﬁc is relayed via Tor with an exit bridge towards its intended destination.
ﬁrst is a TLS endpoint, which operates similarly to the afore-
mentioned local relay. Once a TLS connection has been es-
tablished, it extracts the original HTTP/S trafﬁc and forwards
it to the second module, which can be any SOCKS5 proxy
server (we use dante [5] in our implementation). The SOCKS5
proxy then relays trafﬁc to the intended destination website.
Responses from the destination website will be relayed back
in the reverse direction.
The local relay and the exit bridge operate on the data
plane, and form a completed toriﬁed TLS tunnel for securely
transmitting HTTP/S requests and responses.
B. Per-destination Exit Bridges
Our design assigns dedicated exit bridges for each unique
user. This potentially risks unlinkability, since a curious exit
bridge operator (or an adversary that can observe trafﬁc from
the exit bridge) could associate trafﬁc to multiple websites as
originating from the same user.
This is more problematic for exit bridges than for exit relays,
since the shared use of exit relays among many Tor users
makes it more difﬁcult for an eavesdropper to determine which
exit streams belong to the same user.
To address this, we require that a user’s trafﬁc to different
Tor-blocking second-level domains2 be handled by different
exit bridges. The Tor Browser extension effectively maintains a
pool of exit bridges. Based on the destination of a web request,
it chooses the corresponding exit bridge to route trafﬁc. When
it detects trafﬁc to a new Tor-blocking site that has not been