减量：--变量，变量--。
负数：-值。
转变成数字：+值。
全局对象Math（参见1.17“Math”）还会以函数的方式提供更多算术运算。
JavaScript也有一些位运算符（如位“与”，参见11.9“位运算符”）。
1.8 字符串
字符串可以直接通过字符串字面量来创建。这些字面量限定在单引号或双引号之内。反斜杠（\）用于转义字符及产生一些控制字符。如以下示例：
可以通过方括号来访问字符串中的单个字符：
字符串的length属性可以对字符的个数进行计数：
像所有的原始值一样，字符串是不可变的；如果要改变一个已有的字符串，必须创建一个新的才行。
1.8.1 字符串运算符
字符串可以通过加号（+）进行连接，如果其中一个运算数是字符串的话，另一个运算数将被转换为字符串：
要在多个步骤中连接字符串，可以使用+=运算符：
1.8.2 字符串方法
字符串有一些常用的方法（参见12.10“字符串原型方法”）。如以下示例：
1.9 语句
JavaScript中的条件和循环语句将在接下来的小节介绍。
1.9.1 条件语句
if语句有一个then从句以及一个可选的else从句，具体的执行取决于布尔条件：
推荐始终使用大括号（它们表示零个或多个语句块）。不过如果从句仅有一个单独的语句时可以不必这么做（对for和while语句同样适用）：
以下是switch语句，fruit的值会决定要执行哪个case：
case之后跟的“运算数”可以是任意表达式；在switch里的参数会通过===来进行比较。
1.9.2 循环语句
for循环有如下格式：
初始化会在循环开始前执行。条件会在每次循环迭代之前做检查，如果是false则终止循环。后迭代会在每次循环迭代后执行。
以下示例将在控制台打印出数组arr里的每个元素：
while循环语句在条件成立的时候会持续循环：
do-while循环语句在条件成立时会持续循环。由于条件跟在代码体之后，所以，这些代码体至少会执行一次：
有两条语句适用于所有的循环方式：
break可以跳离循环；
continue会开始一个新的循环迭代。
1.10 函数
可以通过函数声明的方式来定义函数：
上面的代码定义了函数add，它有两个参数：param1和param2，返回值是这两个参数的和。可以这样去调用这个函数：
除此之外，我们还可以通过给变量add赋值为函数表达式的方式来定义add函数：
函数表达式会产生一个值，因此可以将函数作为参数直接传递给另外的函数：
1.10.1 函数声明的提升特性
函数声明具有提升特性——它们的实体会被移动到所在作用域的开始处。这使得我们可以引用后面声明的函数。
注意，var声明也具有提升的特性（参见1.13.2“变量的提升特性”），但通过它们执行的赋值却不具备该特性：
1.10.2 特殊的变量arguments
在JavaScript中，函数的所有参数都可以被自由调用，它会通过arguments变量来使所有参数可用。arguments看起来像个数组，但却不具备数组的方法：
1.10.3 参数太多或太少
我们可以通过以下函数来探知，在JavaScript中，函数参数太多或太少是如何处理的（toArray()函数会在1.10.6“将arguments转换为数组”中出现）：
额外的参数会被忽略（arguments除外）：
丢失的参数会得到undefined这个值：
1.10.4 可选参数
以下是一个给参数赋上默认值的通用模式：
在标记了(1)的这行，||运算符会在x为真值的时候（非null、undefined等值）返回x，否则，会返回第二个运算数：
1.10.5 强制参数长度
如果想强制一个参数长度（指定的参数长度），可以通过arguments.length来检查：
1.10.6 将arguments转换为数组
arguments不是数组，它只是类似于数组（参见17.15.3“类似数组的对象和泛型方法”）。它有length属性，可以通过方括号去访问它的元素。不能移除它的元素，也不能对它调用数组的方法。因此，有时候会需要将它转换成数组，方法如以下函数所示（在17.15.3“类似数组的对象和泛型方法”中会有详细介绍）：
1.11 异常捕获
最常见的捕获异常的方式如下所示（参考第14章）：
使用try语句包裹关键代码，如果try语句有异常会被抛出那么catch语句就会执行。使用之前的代码：
1.12 严格模式
严格模式（参见7.8“严格模式”）激活更多的警告以及使JavaScript变得更干净（非严格模式有时候被叫作“松散模式”）。要切换到严格模式，在JavaScript文件或者标签第一行输入：
你也可以在每一个函数中激活严格模式：
1.13 变量作用域和闭包
在JavaScript中，通过在变量前使用var语句声明变量：
你可以使用单个var语句声明和初始化多个变量：
但是我推荐使用单独声明每一个变量（原因参考26.4.1“语法”）。因此，我会将之前的语句重写为：
由于前置的缘故（参考1.13.2“变量的提升特性”），通常它的最佳实践是在一个函数的开始部分声明变量。
1.13.1 变量是函数作用域的
一个变量的作用域总是完整的函数（相对于当前块）。例如：
我们可以看到变量tmp并不局限于（1）行；直到函数结束它都存在。
1.13.2 变量的提升特性
所有变量声明都会被提升：声明会被移动到函数的开始处，而赋值则仍然会在原来的位置进行。例如，以下函数中的变量会被认为是在标记为（1）的这行声明的：
然而在程序内部，上述函数的执行过程其实是这样的：
1.13.3 闭包
每个函数都和它周围的变量保持着连接，哪怕它离开被创建时的作用域也是如此。例如：
函数从标记为（1）的这行开始被创建，在创建结束后即离开它的上下文环境，但它仍然保持着和start的连接：
函数以及它所连接的周围作用域中的变量即为闭包。所以，create Incrementor()的返回其实就是一个闭包。
1.13.4 IIFE模式：引入一个新的作用域
有时你会想要引入一个新的作用域，例如，防止一个变量变成全局变量。在JavaScript中，不能通过块来做，必须使用函数。不过有一种模式可以将函数当做类似块的方式来使用。这种模式被称作为IIFE（立即调用函数表达式，发音为“iffy”）：
请务必键入以上示例（注释除外）。IIFE是一个在定义之后就被立即调用的函数表达式。在函数内部，会有一个新的作用域，以防止tmp变成全局变量。更多关于IIFE的细节，参见16.6“通过IIFE引入新的作用域”。
IIFE用例：闭包造成的无意共享
闭包会持续地保持与外部变量的连接，而这有时候并不是你想要的：
标记为（1）的这行返回值总是i的当前值，而并非函数被创建时的值。在循环结束之后，i的值为5，所以数组中所有的函数都返回这个数值。如果你想要标记（1）这行的函数获得当前i值的一个快照，那么你可以使用IIFE：
1.14 对象和构造函数
本节涵盖了JavaScript两种基础的面向对象机制：单一对象和构造函数（类似其他语言中对象的工厂方法）。
1.14.1 单一对象
和所有的值一样，对象也具有属性。你可以认为对象是一组属性的集合，事实也是如此，每个属性都是一个（键，值）对。键名都是字符串，而值可以是JavaScript的任意值。
在JavaScript中，可以直接通过对象字面量去创建普通对象：
上述对象具有name和describe两个属性。你可以获取（get）以及设置（set）这些属性：
以函数作为值的属性被称为方法，如describe。它们使用this对调用它们的对象进行引用：
使用in运算符检查属性是否存在：
如果读取一个不存在的属性，会得到undefined。因此，之前的两个检查可以这样执行：
使用delete运算符移除属性：
1.14.2 任意属性名
属性的键名可以是任何字符串。迄今为止，我们见到过对象字面量中的属性名和点运算符后的属性名。然而，只有当它们是标识符的时候才可以这样使用（参见1.3.3“标识符与变量名”）。如果想用其他的字符串作为属性名，则必须将它们用引号引起来，再通过对象字面量和方括号来获取或设置这个属性：
方括号可以用来动态计算属性键名：
1.14.3 提取方法
如果对方法进行提取，则会失去与对象的连接。就这个函数而言，它不再是一个方法，this的值也会是undefined（在严格模式下）。
看如下示例，先回到之前的jane对象：
我们要从jane对象中提取describe方法，将它赋值给变量func，然后对它进行调用。你会发现，它不能正常运行：
处理这个问题的解决方案可以使用bind()方法，所有函数都支持。它会创建一个this总是指向给定值的新函数：
1.14.4 方法中的函数
所有函数都有其特殊的this变量。如果在方法中有嵌套函数，这可能会不太方便，因为在嵌套函数内部不能访问方法中的this变量。下面这个例子展示了调用forEach并结合一个函数来遍历数组：
调用logHiToFriends会产生一个错误：
让我们来看看这个问题的两种解决方法。第一种，我们可以将this保存在不同的变量中：
第二种，利用forEach的第二个参数，它可以给this指定一个值：
函数表达式在JavaScript中通常被当作函数调用中的参数来使用。在这些函数表达式中引用this时要特别小心。
1.14.5 构造函数：对象工厂
到现在为止，JavaScript对象字面量表现出的那种类似于其他语言中映射表/字典的印象，可能会使你觉得JavaScript对象仅仅是字符串到值的映射。然而，JavaScript对象也支持真正的面向对象：继承。本节不会去完全解释JavaScript的继承是如何工作的，而会展示一种简单的模式让你快速上手。想了解更多详情，请查看第17章。
除了“真正的”函数和方法，函数在JavaScript中还扮演了另外一个角色：如果用new运算符来调用的话，它们将变成构造函数即对象工厂。构造函数就是这样简单地模拟了其他语言的类。按照惯例，构造函数的名称以大写字母开头。例如：
可以看到构造函数包含两部分。第一部分，Point函数设置实例数据。第二部分，Point.prototype属性包含一个带有方法的对象。第一部分里的实例数据是特定于每一个实例的，而之后的方法数据则是对所有实例共享的。
可以通过new运算符来使用Point：
p是Point的一个实例：
1.15 数组
数组是一些有序的元素，可以通过证书索引从0开始被访问。
1.15.1 数组字面量
数组字面量可以方便地创建数组元素：
前面的数组有三个元素：字符串a、b、c。你可以通过整数索引来访问它们：
length属性表明数组有多少元素。你可以通过使用它来添加或者删除元素：
in操作符也可以在数组中正常使用：
注意数组是对象，所以可以拥有对象属性：
1.15.2 数组方法
数组拥有许多方法（参见18.7“数组原型方法”）。这里有一些例子：
1.15.3 遍历数组
有几种数组方法可以用来迭代元素（参见18.12“迭代（非破坏性）”）。其中两种最重要的方法是forEach以及map。
forEach迭代数组并且将当前的元素和元素的index扔到一个函数中：
前面的代码将输出下面的内容：
(1)处的函数可以被随意地忽略参数。例如，它可以只包含一个elem参数。
map通过应用一个函数映射到现有的数组的每个已经存在的元素创建一个新的数组：
1.16 正则表达式
JavaScript内置的支持正则表达式（第19章引用教程详细地阐述了它是如何工作的）。它们使用斜线分割：
1.16.1 test()方法：匹配吗
1.16.2 exec()方法：匹配以及捕获分组
返回的数组包含完整的匹配结果，它的索引从0开始，第一组被捕获的内容的索引是1，以此类推。有一种方法（详见19.6“RegExp.prototype.exec: 捕获分组”）可调用这个方法反复匹配所有内容。
1.16.3 replace()方法：搜索和替换
replace的第一个参数必须是一个带着/g标志的正则表达式；否则将只替换第一次出现的内容。还有一种方法（详见19.8“Srting.prototype.replace：查找和替换”）可使用一个函数来完成替换。
1.17 Math
Math（参见第21章）是一个包含运算功能的对象。示例如下：
1.18 标准库的其他功能
JavaScript的标准库相对简陋，但是有许多我们可以使用的：
Date（第20章）
一个日期构造器，主要功能是解析和创建日期字符串和访问组件的日期（年、小时等）。
JSON&lt（第22章）
一个可以解析和生成JSON数据的对象。
console.*系列方法（参考23.5“ConsoleAPI”）
这些浏览器特定的方法不是这个语言的一部分，但是有一些同样可以运行在Node.js中。
第2部分 背景
这个部分介绍了JavaScript的历史和本质，针对这种语言给出一个宽泛的前瞻视角以及介绍了它所处的上下文环境（没有太多地深入到技术细节）。
这部分的内容可以选择阅读，即使没有看过，也不影响对本书后面内容的理解。
第2章 为什么选择JavaScript
现在已经有许多种编程语言了，为什么还要用JavaScript呢？本章提到的7个方面在如何选择一门编程语言及如何评判JavaScript整体表现是否良好时都很重要：
1．它能自由使用吗？
2．它是一门优雅的编程语言吗？
3．它真实有用吗？
4．它是否有不错的工具，尤其是很好的集成开发环境（IDE）？
5．它在处理你要做的事情时够快吗？
6．它被广泛使用吗？
7．它有前途吗？
2.1 JavaScript可以自由使用吗
JavaScript可以说是最开放的编程语言：ECMA-262，JavaScript语言的规范，它是一个ISO标准，有着许多独立的实现，其中一些是开源的。此外，该语言是由TC39演变而来，TC39是一个由几家公司组成的委员会，包括所有主要的浏览器厂商。这些公司通常都是竞争对手，但是却能为JavaScript语言的福祉而一起工作。