goes in the same breadboard row as the 3.3V jumper. The shorter leg is the negative
terminal and goes in the same row as the resistor.
4. Power on the Raspberry Pi. If everything is hooked up correctly, you should see the LED
light up immediately.
 Let’s extend this experiment such that you gain control over the illumination state of the LED. To
do this, you again access the WiringPi libraries.
 Physically, all you have to do is relocate the female jumper pin currently plugged into GPIO #1
to GPIO pin #11.
 With that done, you need to perform a little bit of housekeeping with the WiringPi libraries to
send commands to the Raspberry Pi GPIO pins directly.
 Download and then compile the WiringPi executable code:
Click here to view code image
cd
git clone git://git.drogon.net/wiringPi
cd wiringPi
git pull origin
./build
Awesome! Now you can stay in the current directory and issue GPIO commands to your heart’s
content. For instance, try the following:
gpio mode 0 out
gpio write 0 1
gpio write 0 0
You should find that the gpio write 0 1 command turned the LED on and that the gpio write 0 0
line turned the LED off. It’s like you’re turning on a faucet: when you send 3.3V out of
programmable GPIO #11 pin into the LED, the electrical energy is consumed and emitted as
light.
Accessing the GPIO Pins via the Pi Cobbler
 The Adafruit Pi Cobbler (http://is.gd/B1U0bq) represents a more elegant way to make the Raspberry
Pi GPIO pins accessible to you and your projects. Instead of wiring individual jumpers from the
GPIO pins to the breadboard, you can break out from the GPIO header directly to the breadboard and
then access GPIO from there.
 Adafruit sells the Pi Cobbler either unassembled or assembled; I leave it up to you and your tolerance
for pain (just kidding) in deciding which product to purchase. In addition to the Pi Cobbler breakout
IC, you also get a ribbon cable.
 To mount the Pi Cobbler, you first must connect the cable to the Cobbler board itself. Adafruit was
nice enough to add a notch in the 26-pin ribbon cable, so it is impossible to insert the cable into the
Cobbler incorrectly.
 You can potentially get into trouble by inserting the other end of the ribbon cable into the Raspberry
Pi GPIO header, though. Locate the colored edge wire of the ribbon cable; this is pin #1 and needs to
be inserted into the GPIO on the side closest to the SD card slot and where P1 is marked on the
Raspberry Pi board.
 You also need to take care to insert the Pi Cobbler in the breadboard such that the Cobbler straddles
the bridge or center line. Be sure to press the Cobbler all the way into the breadboard. You can see a
close-up of my installed Pi Cobbler in Figure 20.10.
FIGURE 20.10 The Pi Cobbler is simultaneously connected to the breadboard and the Raspberry
Pi and serves to extend the GPIO to the board. The markings above each Cobbler pin match each
corresponding GPIO pin on the Raspberry Pi.
Whew! Now that you have that out of the way, what can you actually do with the Pi Cobbler?
 Well, look closely at the perimeter of the Cobbler—you should see markings that correspond to each
of the 26 pins of the Raspberry Pi GPIO.
 You can easily repeat your initial LED experiment by inserting male-to-male (note that you need male
ends when your connection begins and ends on the breadboard) jumper straps in the same breadboard
row as the corresponding GPIO header.
 The only change I make, as noted in Figure 20.11, is that I used a GPIO ground pin on the same side
of the breadboard as the power pin.
FIGURE 20.11 A replication of the earlier breadboarding experiment, this time by using the Pi
Cobbler breakout board
Programming the Atmel Microcontroller
That long, 28-pin DIP you see soldered in next to the left of the Gertboard logo on the PCB is none
other than an Atmel AVR ATmega328p microcontroller, the same chip that you experimented with in
the previous chapter.
Note: Subject to Parts Availability...
Take a moment to read the identification information on the surface of your Gertboard’s
Atmel chip. Gert states that due to parts availability, the Gertboard may be equipped with
either the ATmega 328 or 168.
This means you can perform Arduino experiments by compiling sketches on the Raspberry Pi and
sending them to the ATmega directly. Now then, recall that the Arduino operates at 5V, and the
Raspberry Pi operates at 3.3V. The upshot of this situation for our purposes is that the Gertboard’s
ATmega runs at a slower clock speed (12MHz instead of 16MHz).
 Thus, if you plan to reuse some of your sketches from Chapter 19, “Raspberry Pi and Arduino,” you
need to adjust any references to +5V or you may very well fry the Gertboard’s ATmega chip. You
also may need to adjust the timing of your sketch code to account for the Gertboard’s slower clock
speed.
Task: Preparing Your Arduino Environment
I covered installing the Arduino IDE in Chapter 19. However, I want to give you the
complete procedure now in case you haven’t done any work with the Arduino UNO yet.
Perform the following tasks from a terminal prompt on your Raspberry Pi:
1. Start by downloading and installing the Arduino IDE:
Click here to view code image
sudo apt-get install -y arduino
2. Use AVRDUDE to help you upload your Arduino sketches to the AVR microcontroller
on the Gertboard.
Click here to view code image
cd /tmp
wget http://project-downloads.drogon.net/gertboard/avrdude_5.10-4_armhf.deb
sudo dpkg -i avrdude_5.10-4_armhf.deb
sudo chmod 4755 /usr/bin/avrdude
3. The bad news is that there are several steps involved in completing the Raspberry Pi-
Gertboard Arduino setup. The good news is that Gordon Henderson, a British computer
consultant with jaw-dropping expertise with the Raspberry Pi, Gertboard, and Arduino
environments, graciously created a script that automates these steps. Check out Gordon
online at http://is.gd/7SPmYJ.
Click here to view code image
cd /tmp
wget http://project-downloads.drogon.net/gertboard/setup.sh
chmod +x setup.sh
sudo ./setup.sh
4. After the script completes, you are prompted to reboot your Raspberry Pi. Do that.
5. Initialize the ATmega chip. Make sure your Gertboard is installed and attach the jumper
wires as shown in Figure 20.12.
FIGURE 20.12 The wiring diagram to initialize the ATmega chip on the Gertboard
6. Issue the “magic” initialization command:
avrsetup
You see the following output:
Click here to view code image
Initialising a new ATmega microcontroller for use with the Gertboard.
Make sure there is a new ATmega chip plugged in, and press
.. 1 for an ATmega328p or 2 for an ATmega168: 1
7. If you have the ATmega 328 on your Gertboard, type 1 and press Enter. (Type 2 if you
have the ATmega168.) If all goes well, you’ll see the following output:
Click here to view code image
Initialising an ATmega328p ...
Looks all OK - Happy ATmega programming!
8. You’re almost home-free. You just have a bit of configuration to do in the Arduino IDE
itself. First, fire up the IDE:
arduino
9. In the Arduino IDE, Click Tools, Board and select Gertboard with ATmega328(GPIO)
from the flyout menu.
10. Next, click Tools, Programmer and select the Raspberry Pi GPIO option.
To test functionality by using the built-in Blink sketch, you first need to attach a jumper
strap from location PB5 on the left side of the Gertboard to one of the buffered LED
outputs. (I use BUF6 as a matter of practice.)
After you’ve connected the wire, go back to the Arduino IDE and click File, Examples,
01.Basics, Blink, and then click the Upload button (or click File, Upload using
Programmer) to send the sketch to the ATmega chip.
You should see the BUF6 LED begin to blink slowly.
Final Thoughts, and Thank You
Well, congratulations! You’ve reached the end of this book. We’ve certainly come a long way,
haven’t we?
 By way of a take-home message, I encourage you to stay current with all things Raspberry Pi-related
by plugging into and participating in the community. The most direct entry points into the Raspberry
Pi community are as follows:
 Official Raspberry Pi Community Forum: http://is.gd/6nBR5Z
 Google+ Raspberry Pi Forum: http://is.gd/jGajWj
 Stack Exchange: Raspberry Pi: http://is.gd/hWh8EK
 RPi Community Links at eLinux.org: http://is.gd/sN9O4g
 If you completed even the majority of tasks in this volume, then you have an excellent grasp of the
fundamentals of hardware and software hacking. Should you have any questions, or if you want to
share your experiences all the way, I’m all ears. You can reach me directly at
tim@timwarnertech.com.
 Thank you so very much for purchasing this book and for learning more about the Raspberry Pi. It is
people like you who keep information technology relevant and growing over time.
 Happy hacking!
Index
A
 Accessories command (LXDE main menu), 93
 Acorn BBC Micro personal computer, 7-8
 Acorn RISC Machines (ARM) processors, 8
 add-ons, media centers, installing, 197-198
 addresses, static IP, setting, 106
 advanced options, Raspo-Config utility, 84
 AlaMode (Arduino), 324-325, 332-335
 Amtel microcontroller, programming with, 354-357
 analog versus digital signals, 317
 analogWrite() function, 331
 Android Device, 2
 Apache, 235
 APIs (application programming interfaces), 10, 221-226
 Apple OS X, 49
 Application Launch Bar (LXDE), 92
 application layer (OS), 48
 applications
creating, 129-132
Dogeball Challenge, 137-149
Pi Store, downloading, 97
Python, writing, 158-160
remixing, 151
uploading, 149-151
writing simple, 168-170
XBMC, 181
 apt-get parameters, 313
 Arch Linux ARM, 54
 Arduino, 315, 317-319
AlaMode, 324-325, 332-335
connecting, 321-323
connecting, 321-323
development workflow, 323-332
Esplora, 316
IDE, 323-332, 355-357
LEDs, fading, 330-331
LilyPad, 315-316
Mega 2560, 316
microcontrollers, 10-11, 14
PAPERduino, 315
Playground, 321
shields, 317
starter kits, 319
Uno, 315-321
 ARM11 processors, 8, 20
 ARM (Acorn RISC Machines) processors, 8
 Atari 2600 Video Computer System (VCS), 199
 Atmel ATmega 328P AVR microcontroller (Gertboard), 339
 Atmel RISC chip, 10
 audio
HDMI cables, 26
Model B boards, 27-29
 Audio Book Player, 2
 autoclean parameter, 313
 Automated Chicken Coop Door, 2
 autoremove parameter, 313
B
 Bald Wisdom blog, 324
 Banzi, Massimo, 315
 BASIC programming, 7
 batteries, webcams, adding to, 273-274
 BBC Micro personal computers, 7-8, 12
 BeagleBone, 40-41
 benchmarking, 305-307
 bilaterally symmetric breadboards, 35
binary large object (BLOB) driver, 15
 bin directory, 70
 black boxes, 9, 17
 Blendtec, 181
 BLOB (binary large object) driver, 15
 blocks
Scratch, 127-129
unlinking, 131
 Blocks palette (Scratch), 125, 127
 Blum, Richard, 154
 boards
audio, 27-29
breadboards, 34-35
breakout, 36
daughterboards, 38-39
Gertboards, 38-39
networking, 27
single-board microcontrollers, 37-38
video, 27-29
 Boolean blocks, 129
 Boolean data type (Python), 172
 boot behavior, adjusting, Raspi-Config, 88
 boot directory, 70
 boot partition contents, 310
 breadboarding, 350-354
 breadboards, 34-35
 breakout boards, 36
 Bresnahan, Christine, 154
 bridges, 35
 Broadcom BCM2835 system-on-a-chip, 10
 Broadcom VideoCore IV GPU, 179
 browsers, 289
 browsing Internet, proxy servers, 278-280
 bs command, 60-63
 building Minecraft servers, 226-231
 bus strips, 35
 BYTEmark (nbench) benchmark, 307
 Bytes data type (Python), 172
C
 cables, 25-26
Ethernet, 24-25
ribbon, 35
 camera
enabling, 82
Model B board, 30
 Camera Board, 253-256, 259
capturing still pictures, 259-263
installing, 256-258
interface, 254
recording video, 263-266
specifications, 255
 Camera Serial Interface (CSI) connectors, 30
 Campidoglio, Enrico, 302
 CanaKit Raspberry Pi Complete Starter Kit, 44
 capacitors, PCBs (printed circuit boards), 17
 Cap blocks, 129
 Cartesian coordinate system, 130
 cases, 32
 C blocks, 129
 cd command, 63, 72-73
 Cheese-Powered Radio-Controlled Car, 1
 chipsets, 31
 Chrome web browser, 289
 Chromium web browser, 120
 Chun, Wesley, 178
 circuit prototyping equipment, 34-37
 classes, 221
 classes, SD cards, 23
 class libraries, 221
 clients, Hamachi, installing, 284-285
 codecs, XBMC, 181
 command prompt, Raspbian, 67-69
 commands
bs, 60-63
cd, 63, 72-73
cp, 77
dd, 60-62
if, 60-63
ifconfig, 104-105