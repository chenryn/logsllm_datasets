// Shorthand arithmetic
$num = 0;
$num += 1;       // Increment $num by 1
echo $num++;     // Prints 1 (increments after evaluation)
echo ++$num;     // Prints 3 (increments before evaluation)
$num /= $float;  // Divide and assign the quotient to $num
```
### Bitwise
| -    | -                  |
|------|--------------------|
| `&`  | And                |
| `|`  | Or (inclusive or)  |
| `^`  | Xor (exclusive or) |
| `~`  | Not                |
| `>` | Shift right        |
PHP Conditionals
---------------
### If elseif else
```php
$a = 10;
$b = 20;
if ($a > $b) {
    echo "a is bigger than b";
} elseif ($a == $b) {
    echo "a is equal to b";
} else {
    echo "a is smaller than b";
}
```
### Switch
```php
$x = 0;
switch ($x) {
    case '0':
        print "it's zero";
        break; 
    case 'two':
    case 'three':
        // do something
        break;
    default:
        // do something
}
```
### Ternary operator
```php
# => Does
print (false ? 'Not' : 'Does');
$x = false;
# => Does
print($x ?: 'Does');
$a = null;
$b = 'Does print';
# => a is unset
echo $a ?? 'a is unset';
# => print
echo $b ?? 'b is unset';
```
### Match
```php
$statusCode = 500;
$message = match($statusCode) {
  200, 300 => null,
  400 => 'not found',
  500 => 'server error',
  default => 'known status code',
};
echo $message; # => server error
```
See: [Match](https://www.php.net/manual/en/control-structures.match.php)
### Match expressions
```php
$age = 23;
$result = match (true) {
    $age >= 65 => 'senior',
    $age >= 25 => 'adult',
    $age >= 18 => 'young adult',
    default => 'kid',
};
echo $result; # => young adult
```
PHP Loops
---------------
### while
```php
$i = 1;
# => 12345
while ($i  12345
do {
    echo $i++;
} while ($i  12345
for ($i = 1; $i  123
for ($i = 1; $i  1235
for ($i = 1; $i  1, 'bar' => 2];
# => 12
foreach ($a as $k) {
    echo $k;
}
```
See: [Array iteration](#php-value-iteration)
PHP Functions
---------------
### Returning values
```php
function square($x)
{
    return $x * $x;
}
echo square(4);  # => 16
```
### Return types
```php
// Basic return type declaration
function sum($a, $b): float {/*...*/}
function get_item(): string {/*...*/}
class C {}
// Returning an object
function getC(): C { return new C; }
```
### Nullable return types
```php
// Available in PHP 7.1
function nullOrString(int $v) : ?string
{
    return $v % 2 ? "odd" : null;
}
echo nullOrString(3);       # => odd
var_dump(nullOrString(4));  # => NULL
```
See: [Nullable types](https://www.php.net/manual/en/migration71.new-features.php)
### Void functions
```php
// Available in PHP 7.1
function voidFunction(): void
{
	echo 'Hello';
	return;
}
voidFunction();  # => Hello
```
### Variable functions
```php
function bar($arg = '')
{
    echo "In bar(); arg: '$arg'.\n";
}
$func = 'bar';
$func('test'); # => In bar(); arg: test
```
### Anonymous functions
```php
$greet = function($name)
{
    printf("Hello %s\r\n", $name);
};
$greet('World'); # => Hello World
$greet('PHP');   # => Hello PHP
```
### Recursive functions
```php
function recursion($x)
{
    if ($x  1234
```
### Default parameters
```php
function coffee($type = "cappuccino")
{
    return "Making a cup of $type.\n";
}
# => Making a cup of cappuccino.
echo coffee();
# => Making a cup of .
echo coffee(null);
# => Making a cup of espresso.
echo coffee("espresso");
```
### Arrow Functions
```php
$y = 1;
$fn1 = fn($x) => $x + $y;
// equivalent to using $y by value:
$fn2 = function ($x) use ($y) {
    return $x + $y;
};
echo $fn1(5);   # => 6
echo $fn2(5);   # => 6
```
PHP Classes
---------------
### Constructor
```php
class Student {
    public function __construct($name) {
        $this->name = $name;
    }
  	public function print() {
        echo "Name: " . $this->name;
    }
}
$alex = new Student("Alex");
$alex->print();    # => Name: Alex
```
### Inheritance
```php
class ExtendClass extends SimpleClass
{
    // Redefine the parent method
    function displayVar()
    {
        echo "Extending class\n";
        parent::displayVar();
    }
}
$extended = new ExtendClass();
$extended->displayVar();
```
### Classes variables {.row-span-2}
```php
class MyClass
{
    const MY_CONST       = 'value';
    static $staticVar    = 'static';
    // Visibility
    public static $var1  = 'pubs';
    // Class only
    private static $var2 = 'pris';
    // The class and subclasses
    protected static $var3 = 'pros';
    // The class and subclasses
    protected $var6      = 'pro';
    // The class only
    private $var7        = 'pri';  
}
```
Access statically
```php
echo MyClass::MY_CONST;   # => value
echo MyClass::$staticVar; # => static
```
### Magic Methods
```php
class MyClass
{
    // Object is treated as a String
    public function __toString()
    {
        return $property;
    }
    // opposite to __construct()
    public function __destruct()
    {
        print "Destroying";
    }
}
```
### Interface
```php
interface Foo 
{
    public function doSomething();
}
interface Bar
{
    public function doSomethingElse();
}
class Cls implements Foo, Bar 
{
    public function doSomething() {}
    public function doSomethingElse() {}
}
```
Miscellaneous
-------------
### Basic error handling
```php
try {
    // Do something
} catch (Exception $e) {
    // Handle exception
} finally {
    echo "Always print!";
}
```
### Exception in PHP 8.0 {.col-span-2}
```php {.wrap}
$nullableValue = null;
try {
	$value = $nullableValue ?? throw new InvalidArgumentException();
} catch (InvalidArgumentException) { // Variable is optional
    // Handle my exception
    echo "print me!";
}
```
### Custom exception {.row-span-2}
```php
class MyException extends Exception {
    // do something
}
```
Usage
```php
try {
    $condition = true;
    if ($condition) {
        throw new MyException('bala');
    }
} catch (MyException $e) {
    // Handle my exception
}
```
### Nullsafe Operator {.row-span-2}
```php
// As of PHP 8.0.0, this line:
$result = $repo?->getUser(5)?->name;
// Equivalent to the following code:
if (is_null($repo)) {
    $result = null;
} else {
    $user = $repository->getUser(5);
    if (is_null($user)) {
        $result = null;
    } else {
        $result = $user->name;
    }
}
```
See also: [Nullsafe Operator](https://wiki.php.net/rfc/nullsafe_operator)
### Regular expressions
```php
$str = "Visit Quickref.me";
echo preg_match("/qu/i", $str); # => 1
```
See: [Regex in PHP](/regex#regex-in-php)
### fopen() mode
| -    | -                        |
|------|--------------------------|
| `r`  | Read                     |
| `r+` | Read and write, prepend  |
| `w`  | Write, truncate          |
| `w+` | Read and write, truncate |
| `a`  | Write, append            |
| `a+` | Read and write, append   |
### Runtime defined Constants
```php
define("CURRENT_DATE", date('Y-m-d'));
// One possible representation
echo CURRENT_DATE;   # => 2021-01-05
# => CURRENT_DATE is: 2021-01-05
echo 'CURRENT_DATE is: ' . CURRENT_DATE; 
```
Also see 
-------
- [PHP Docs](https://www.php.net/manual/en/index.php)
- [Learn X in Y minutes](https://learnxinyminutes.com/docs/php/)