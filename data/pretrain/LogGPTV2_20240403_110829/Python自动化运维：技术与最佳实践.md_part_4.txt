下面介绍IP类几个常见的方法，包括反向解析名称、IP类型、IP转换等。
192.168.0.8
192.168.0.7
192.168.0.6
192.168.0.5
192.168.0.4
192.168.0.3
192.168.0.2
192.168.0.1
192.168.0.0
65536
执行结果如下：
for x in ip:
print ip.len()
from IPy import IP
通过指定的网段输出该网段的IP个数及所有IP地址清单，代码如下：
>>>IP('::1').version()
>>>IP('10.0.0.0/8').version()
0x8080808
PUBLIC'
>>>ip.reverseNames()
print(x)
IP('192.168.0.0/16')
#6代表IPv6类型
#4代表IPv4类型
基础篇
Linux公社 www.linuxidc.com
#输出192.168.0.0/16网段的所有IP清单
#192.168.1.20为私网类型·PRIVATE
#输出192.168.0.0/16网段的IP个数
#十六进制转成IP格式
#转换成二进制格式
#转换成十六进制格式
#转换成整型格式
#8.8.8.8为公网类型
#反向解析地址格式
---
## Page 31
数值型数据的比较，以帮助IP对象进行比较，如：
于不同的网络地址，同样也视为不相等，如10.0.0.0/16不等于192.0.0.0/16。IPy支持类似于
认为是不相等的网段，如10.0.0.0/16不等于10.0.0.0/24，另外即使具有相同的prefxlen但处
1.2.2
输出类型为字符串，如下：
有时候我们想比较两个网段是否存在包含、重叠等关系，比如同网络但不同 prefixlen 会
>>>IP(*192.168.1.0/24')inIP('192.168.0.0/16')
判断IP地址和网段是否包含于另一个网段中，如下：
>>>IP('10.0.0.0/24')>>IP('192.168.1.0/24').strNormal(2）
192.168.1.0/24
>>>IP('192.168.1.0/24').strNormal(1)
192.168.1.0'
>>>IP('192.168.1.0/24').strNormal(0)
也可以通过 strNormal方法指定不同wantprefixlen参数值以定制不同输出类型的网段。
True
>>>*192.168.1.100*inIP(192.168.1.0/24')
True
>>>IP('192.168.1.0/24').strNormal(3)
192.168.1.0/24
>>>print(IP(*192.168.1.0-192.168.1.255',make_net=True))
192.168.1.0/24
>>>print(IP('192.168.1.0/255.255.255.0',make_net=True))
192.168.1.0/24
>>>print(IP('192.168.1.0').make_net('255.255.255.0))
IP方法也支持网络地址的转换，例如根据IP与掩码生产网段格式，如下：
True
>>from IPyimportIP
多网络计算方法详解
Linux公社 www.linuxidc.com
第1章
系统基础信息模块详解
9
---
## Page 32
10第一部分基础篇
iptype: PRIVATE
binaryip:11000000101010000000000100010100
hexadecimal:0xc0a80114
reverse address: 20.1.168.192.in-addr.arpa.
#python simplel.py
iptype:PRIVATE
00000000000000000000000000000000:00000000
hexadecimal:0xc0a80100
subnet:256
reverse address:1.168.192.in-addr.arpa
broadcast:192.168.1.255
netmask:255.255.255.0
net:192.168.1.0
Please input an IP or net-range: 192.168.1.0/24
#python simplel.py
分别输入网段、IP地址的运行返回结果如下：
print('iptype:%s'%ips.iptype())
else:
ips = IP(ip_s)
from IPy import IP
#!/usr/bin/env python
示例
>>>IP('192.168.1.0/24') .0verlaps('192.168.2.0')
>>>IP('192.168.0.0/23').0ver1aps('192.168.1.0/24')
判断两个网段是否存在重叠，采用IPy提供的overlaps方法，如：
lease input an IP or net-range:192.168.1.20
print('reverse address:%s% ips.reverseNames()[0])
print('subnet:
orint('reverse address:
print('netmask:%s'
print('net:%s'
根据输人的IP或子网返回网络、掩码、广播、反向解析、子网数、IP类型等信息。
#返回0代表不存在重叠
#返回1代表存在重叠
为单个IP地址
Linux公社 www.linuxidc.com
1：
s'%len（ips))
%ips.net())
#为一个网络地址
%ips.netmask())
ips.broadcast())
%ips.reverseNames()[o])
#输出网络地址
#输出地址类型，如 PRIVATE、PUBLIC、LOOPBACK等
#输出网络子网数
#输出二进制地址
#输出十六进制地址
#输出网络掩码地址
#输出网络广播地址
#接收用户输入，参数为IP
#输出IP反向解析
#输出地址反向解析
---
## Page 33
其中，qname 参数为查询的域名。rdtype 参数用来指定 RR 资源的类型，常用的有以下几种：
法的定义如下：
供了一个DNS 解析器类一
1.3.1模块域名解析方法详解
合，
服务监控以及解析结果的校验，可以代替nslookup及dig等工具，轻松做到与现有平台的整
验证消息和EDNSO（扩展DNS）。在系统管理方面，我们可以利用其查询功能来实现DNS
所有的记录类型，可以用于查询、传输并动态更新ZONE信息，同时支持TSIG（事务签名）
1.3
dnspython 模块提供了大量的 DNS 处理方法，最常用的方法是域名查询。dnspython提
，下面进行详细介绍。
dnspython（http://www.dnspython.org/）是Python实现的一个DNS工具包，它支持几乎
口SOA记录，SOA 标记，一个起始授权区的定义。
口PTR记录，反向解析，与A记录相反，将IP转换成主机名；
口NS记录，标记区域的域名服务器及授权子域；
口CNAME记录，指别名记录，实现域名间的映射；
口MX记录，邮件交换记录，定义邮件服务器的域名；
口A记录，将主机名转换成IP地址；
answer=True,source_port=0)
query(self,
首先介绍dnspython模块的安装，这里采用源码的安装方式，最新版本为1.9.4，如下：
DNS 处理模块 dnspython
python setup.py install
http://www.dnspython.org/kits/1.9.4/dnspython-1.9.4.tar.gz
cd dnspython-1.9.4
Lar
口1.2.1节官网文档与示例参考https://github.com/haypo/python-ipy/。
书中涉及的所有示例及源码的Github 地址为https://github.com/yorkoliu/pyauto。
等文章的IPy类说明。
Linux公社 www.linuxidc.com
qname，rdtype=l,
-resolver，使用它的query方法来实现域名的查询功能。query方
rdclass=l, tcp=False,
第1章系统基础信息模块详解
source=None,
raise_on_no
11
---
## Page 34
Linux公社微信公众号：linuxidc_com
专题
Linux公社（LinuxIDC.com）设置了有一定影响力的Linux专题栏目。
数据中心，LinuxIDC就是关于Linux的数据中心。
Linux现在已经成为一种广受关注和支持的一种操作系统，IDC是互联网
Linux公社（www.Linuxidc.com）于2006年9月25日注册并开通网站，
Hadoop专题RedHat专题SUSE专题红旗Linux专题CentOS
包括：Ubuntu 专题Fedora专题Android 专题Oracle专题
Linux公社主站网址：
技术。
证、SUSE Linux、Android、Oracle、Hadoop、CentOS、MySQL、
Linux公社是专业的Linux系统门户网站，实时发布最新Linux资讯，包括
欢迎点击这里的链接进入精彩的Linux公社网站
www.Linuxidc.com
inux公社
www.linuxidc.com
搜索微信公众号:linuxidc_Com
源技术教程。
订阅专业的最新Linux资讯及开
微信扫一扫
旗下网站:
Linxidc.com
---
## Page 35
介绍。
一个使用DNS 轮循业务的域名进行可用性监控，需要得到当前的解析结果。下面一一进行
query方法可以简单实现这些DNS类型的查询，为后面要实现的功能提供数据来源，比如对
1.3.2
于指定当查询无应答时是否触发异常，默认为True。
数作为指定查询源地址与端口，默认值为查询设备IP地址和0。raise_on_no_answer参数用
tcp参数用于指定查询是否启用TCP协议，默认为False（不启用）。source与source_port参
rdclass参数用于指定网络类型，可选的值有IN、CH与HS，其中IN为默认，使用最广泛。
12第一部分基础篇
#!/usr/bin/env python
【/home/test/dnspython/ simple2.py 】
实现MX记录查询方法源码。
（2）MX记录
运行代码查看结果，这里以www.google.com域名为例：
【/home/test/dnspython/simplel.py】
实现A记录查询方法源码。
（1）A记录
常见的DNS 解析类型包括A、MX、NS、CNAME等。利用dnspython的dns.resolver.
import dns.resolver
173.194.127.177
173.194.127.179
173.194.127.176
173.194.127.178
173.194.127.180
#python simplel.py
for
A=dns.resolver.query(domain,
domain = raw_input('Please input an domain:
importdns.resolver
#!/usr/bin/env python
常见解析类型示例说明
for j in i.items:
iin A.response.answer:
printj.address
Linux公社www.linuxidc.com
#遍历回应信息
#通过response.answer方法获取查询回应信息
"A')
#指定查询类型为A记录
#输入域名地址
---
## Page 36
是错误的。
#!/usr/bin/env python
【 /home/test/dnspython/ simple4.py 
实现CNAME记录查询方法源码。
（4）CNAME记录
Please input an domain: baidu.com
#python simple3.py
只限输人一级域名，如 baidu.com。如果输人二级或多级域名，如 www.baidu.com，则
import dns.resolver
ns3.baidu.com.
ns7.baidu.com.
ns2.baidu.com.
dns.baidu.com.
ns4.baidu.com.
for i in ns.response.answer:
ns = dns.resolver.query(domain,
import dns.resolver
#!/usr/bin/envpython
【 /home/test/dnspython/ simple3.py 】
实现NS 记录查询方法源码。
（3）NS记录
MXpreference=
MX preference =10 mai1exchanger= 163mx03.mxmail.netease.com
Please inputan domain:163.com
#python simple2.py
运行代码查看结果，这里以163.com域名为例：
foriin MX:
MX = dns.resolver.query(domain,
domain=raw_input('Pleaseinputan domain:')
for j in i.items:
print j.to_text()
Linux公社www.linuxidc.com
三
=
50mailexchanger=163mx00.mxmail.netease.com
10mai1exchanger=163mx02.mxmail.netease.com
10 mail exchanger
'NS'）
"MX')
=163mx01.mxmail.netease.com
#指定查询类型为NS记录
#指定查询类型为MX记录
'mail exchanger=',i.exchange
（
第1章
系统基础信息模块详解13
---
## Page 37
无须对监控脚本进行更改。实现架构图如图1-1所示。
当前域名的解析IP，再结合服务端口探测来实现自动监控，在域名解析中添加、删除IP时，
机不可用时无法被自动剔除，因此做好业务主机的服务可用监控至关重要。本示例通过分析
一个域名对应多个IP，从而实现最简单且高效的负载平衡，不过此方案最大的弊端是目标主
1.3.3实践：DNS域名轮循业务监控
14第一部分基础篇
大部分的DNS解析都是一个域名对应一个IP地址，但是通过DNS轮循技术可以做到
本示例第一步通过dns.resolver.queryO方法获取业务域名A记录信息，查询出所有IP地
2.代码解析
2）对IP列表进行HTTP级别的探测。
1）实现域名的解析，获取域名所有的A记录解析IP列表;
1.步骤
结果将返回cname后的目标域名。
for i in cname.response.answer:
cname=dns.resolver.query(domain,
for jin i.items:
print j.to_text()
Linux公社 www.linuxidc.com
监控主机
图1-1DNS多域名业务服务监控架构图
dnspython—→(www.abc.com
#
192.168.1.12
192.168.1.11
192.168.1.10
httplib
#结果将回应cname后的目标域名
CNAME')
#指定查询类型为CNAME记录
192.168.1.12
192.168.1.11
192.168.1.10
---
## Page 38
的IP是否服务正常。
址列表，
我们可以将此脚本放到crontab 中定时运行，再结合告警程序，这样一个基于域名轮循
def
#!/usr/bin/python
【/home/test/dnspython/simple5.py】
import
mport
import
if get_
：再使用httplib 模块的requestO方法以GET方式请求监控页面，监控业务所有服务
else:
_name_
finally:
try:
conn=httplib.HTTPConnection(checkurl)
httplib.socket.setdefaulttimeout(5)
getcontent=""
checkurl=ip+":80"
checkip(ip):
return
for
except Exception,e:
try:
print "dns resolver error."
A = dns.resolver.query(domain,'A')
httplib
OS
dns.resolver
for
else:
if getcontent=="":
getcontent =r.read(15)
conn.request("GET","/",headers
iinA.response.answer:
return