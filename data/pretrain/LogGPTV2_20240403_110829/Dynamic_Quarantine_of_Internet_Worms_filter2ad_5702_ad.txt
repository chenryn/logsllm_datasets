### Rate Limiting and Its Impact on Worm Propagation

#### Introduction
By implementing rate limiting, the total infected population can be reduced to 72%, a 10% decrease compared to scenarios without rate limiting. This effect is consistent across various delay periods. In summary, rate limiting slows down the spread of infections, providing system administrators with more time to patch systems and minimize the damage caused by worm outbreaks.

#### Practical Application of Rate Limiting
This section analyzes real network traces to identify practical rates at which connections can be throttled. The goal is to determine rate limits that significantly slow down worms while minimally impacting legitimate communications. These rates are then used in our models to predict propagation behavior that is viable in practice.

We focus on two recently proposed rate-limiting techniques:
1. **Williamson's Method** [17]: Limits the number of unique IP addresses a host can communicate with in a given period. The default setting is five per second per host.
2. **Ganger et al.'s Method** [5]: Restricts the number of unknown IP addresses (those without valid DNS cache entries and that did not initiate contact) a host can initiate connections with in a given period. The default setting is six per minute per host. This method targets the common approach used by self-propagating worms, which randomly generate 32-bit values as IP addresses without performing DNS translation.

#### Evaluation Using Network Traces
We evaluated these techniques using a 23-day trace from the edge router for Carnegie Mellon University’s Electrical and Computer Engineering (ECE) Department. The traces, recorded in an anonymized form, captured all IP and common second-layer headers of traffic entering or exiting the ECE network from August 15th to September 7th, 2003. This period included two major worm outbreaks: Blaster [14] and Welchia.

The ECE subnet (1128 hosts total) was partitioned into four types of hosts:
- **Normal Clients**: 999 hosts with traffic patterns driven by client-server communication (e.g., HTTP, AFS, FTP).
- **Servers**: 17 hosts providing network services (e.g., SMTP, DNS, IMAP/POP).
- **P2P Clients**: 33 clients running peer-to-peer applications (Kazaa, Gnutella, Bittorrent, edonkey), exhibiting greater connectivity due to periodic packet exchanges.
- **Infected Systems**: 79 systems infected by Blaster and/or Welchia. Both worms exploited the Windows DCOM RPC vulnerability. Blaster scanned subnets for vulnerable hosts by sending itself to TCP port 135, while Welchia first used ICMP ping requests to identify and infect vulnerable hosts, then patched the vulnerability and rebooted the host.

#### Contact Rates Analysis
Figure 9 shows the observed aggregate contact rates for normal and infected clients over a five-second interval. The solid lines indicate the number of distinct IP addresses contacted, while the dashed and dotted lines show the effects of refinements on rate limiting. For example, to avoid impacting 99.9% of the time, inside-to-outside contact rates could be limited to 16 per five seconds for all contacts, 14 per five seconds for contacts to hosts that did not initiate contact, or 9 per five seconds for contacts to hosts without valid DNS translations.

P2P and server systems require higher contact rate limits to avoid impacting regular traffic. For P2P clients, the network could be limited to 89 per five seconds for all contacts, 61 per five seconds for contacts to hosts that did not initiate contact, or 26 per five seconds for contacts to hosts without valid DNS translations. Alternatively, administrators could categorize systems and assign distinct rate limits, tightly restricting most systems while allowing special ones to contact at higher rates.

#### Per-Host vs. Aggregate Rate Limits
Per-host rate limits, such as those implemented in host network stacks or smart network cards, can safely limit a single "normal desktop" system to initiating contact with, for example, four unique IP addresses per five seconds or one unique non-DNS-translated IP address per five seconds. However, if all 1128 machines in the network use their full slot when infected, the aggregate contact rate from the intra-net would be much higher than the rate limits discussed for the edge router case. This suggests that per-host rate limits are less effective at protecting the external Internet from internal worm traffic but are better at protecting the internal network once worms get past the outer firewall.

#### Window Size Considerations
Longer rate limit windows accommodate lower long-term rate limits because heavy-contact rates tend to be bursty. For example, for aggregate non-DNS rates, the 99.9% values are five for one second, twelve for five seconds, and fifty for sixty seconds. However, longer windows may cause lengthy delays before the next connection is allowed, making them impractical. Hybrid windows with both short and long intervals could be explored to balance these trade-offs.

#### Analytical Model and Results
Figure 10 illustrates the effect of different rate limits on worm propagation. We approximated Williamson’s IP throttling scheme and Ganger’s DNS-based scheme using Equations (4) and (5) from Section 4. The DNS-based scheme, with a ratio of γ to β of 1:2, performs better than the IP throttling scheme, with a ratio of 1:6. The plots also show that aggregated rate limiting at the edge router outperforms per-host limits.

#### Conclusions
Recent work on rate limiting schemes, such as traffic throttling and secure NICs, shows potential in mitigating widespread worm attacks. Our contributions include:
1. **Modeling and Simulation**: Deploying rate limiting filters at backbone routers is highly effective. Edge router rate control helps against randomly propagating worms but has little impact on local preferential spreading worms. Individual host-based rate control results in a slight linear slowdown of the worm spread.
2. **Real Network Traces Study**: We identified reasonable rate limits for an enterprise network that severely restrict worm spread while having negligible impact on legitimate traffic. Per-host rate limiting alone is insufficient; aggregated rate limiting at the edge router must be employed to minimize worm spread. This is the first study to use real traffic traces to identify realistic rate limits in practice.

#### Acknowledgements
We thank Ken MacInnis, Val Henson, and the anonymous reviewers for their contributions. We also acknowledge the support of the members and companies of the PDL Consortium.

#### References
[1] N. Bailey. The Mathematical Theory of Infectious Diseases and its Applications. Grifﬁn, London, 1975.
[2] Z. Chen, L. Gao, and K. Kwiat. Modeling the spread of active worms. In Proceedings of IEEE INFOCOM 2003, San Francisco, CA, April 2003.
[3] S. Eugene. The internet worm program: An analysis, 1988.
[4] K. Fall and K. Varadhan, editors. The ns Manual. The VINT Project. UC Berkeley, LBL, USC/ISI, and Xerox PARC, 14 April 2002. World Wide Web, http://www.isi.edu/nsnam/ns/doc/. Ongoing.
[5] G. R. Ganger, G. Economou, and S. M. Bielski. Self-securing network interfaces: What, why and how, Carnegie Mellon University Technical Report CMU-CS-02-144, August 2002.
[6] J. O. Kephart and S. R. White. Directed-graph epidemiological models of computer viruses. In Proceedings of the 1991 IEEE Computer Society Symposium on Research in Security and Privacy, pages 343–359, May 1991.
[7] J. O. Kephart and S. R. White. Measuring and modeling computer virus prevalence. In Proceedings of the 1993 IEEE Computer Society Symposium on Research in Security and Privacy, pages 2–15, May 1993.
[8] A. G. McKendrick. Applications of mathematics to medical problems. In Proceedings of Edin. Math. Society, volume 14, pages 98–130, 1926.
[9] A. Medina, A. Lakhina, I. Matta, and J. Byers. Brite: Universal topology generation from a user’s perspective. Technical Report BUCS-TR2001-003, Boston University, 2001. World Wide Web, http://www.cs.bu.edu/brite/publications/.
[10] D. Moore, V. Paxson, S. Savage, C. Shannon, S. Staniford, and N. Weaver. Inside the slammer worm. In IEEE Security and Privacy journal, 2003, 2003.
[11] D. Moore, C. Shannon, G. Voelker, and S. Savage. Internet quarantine: Requirements for containing self-propagating code. In Proceedings of IEEE INFOCOM 2003, San Francisco, CA, April 2003.
[12] S. Singh, C. Estan, G. Varghese, and S. Savage. The early-bird system for real-time detection of unknown worms. Paper submitted to HOTNETS-II, August 2003.
[13] S. Staniford, V. Paxson, and N. Weaver. How to 0wn the internet in your spare time. In Proceedings of the 11th USENIX Security Symposium, August 2002.
[14] CERT Advisory CA-2003-04. Ms-sql server worm. World Wide Web, http://www.cert.org/advisories/CA-2001-19.html, 2003.
[15] Y. Wang, D. Chakrabarti, C. Wang, and C. Faloutsos. Epidemic spreading in real networks: An eigenvalue viewpoint. In Proceedings of the 22nd International Symposium on Reliable Distributed Systems, 2003.
[16] Y. Wang and C. Wang. Modeling the effects of timing parameters on virus propagation. In Proceedings of the 2003 ACM workshop on Rapid Malcode, pages 61–66. ACM Press, 2003.
[17] M. M. Williamson. Throttling viruses: Restricting propagation to defeat malicious mobile code. Technical Report HPL-2002-172, HP Laboratories Bristol, 17 June 2002.
[18] C. C. Zou, L. Gao, W. Gong, and D. Towsley. Monitoring and early warning for internet worms. In Proceedings of the 10th ACM conference on Computer and communication security, 2003.
[19] C. C. Zou, W. Gong, and D. Towsley. Code red worm propagation modeling and analysis. In Proceedings of the 9th ACM Conference on Computer and Communication Security, November 2002.