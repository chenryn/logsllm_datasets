ulation parameters but with rate limiting, which results in
a total infected population of 72%, a 10% drop from the
case where no rate limiting was implemented. The same re-
sults hold for other values of delay period d. In summary,
rate limiting helps to slow down the spread and as a result
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 10:03:30 UTC from IEEE Xplore.  Restrictions apply. 
buys time for system administrators to patch their systems
and ultimately minimize the damage of worm outbreaks.
7. Rate Limiting in Practice
This section presents an analysis of real network traces,
with a goal of identifying rates at which connections can be
throttled in practice. Speciﬁcally, we wish to identify rate
limits that an enterprise network can realistically implement
that will signiﬁcantly slow worms while having minimal
impact on legitimate communications. Using these rates in
our models produces a corresponding propagation predic-
tion that might be viable in practice.
We focus on two recently proposed techniques for rate
limiting. The ﬁrst, proposed by Williamson [17], restricts
the number of unique IP addresses with which a host com-
municates in a given period of time; the default discussed
in that paper was ﬁve per second (per host). The second,
proposed by Ganger et al. [5], restricts the number of un-
known IP addresses (those without valid DNS cache entries
and that did not initiate contact) to which a host can initi-
ate connections in a given period of time; the default dis-
cussed was six per minute (per host). The second technique
focuses on the common approach used by self-propagating
worms to identify target hosts: picking pseudo-random 32-
bit values to use as an IP address (thus performing no DNS
translation).
We evaluated these techniques using a 23-day trace from
the edge router for CMU’s Electrical and Computer En-
gineering (ECE) Department. The traces recorded in an
anonymized form all IP and common second layer head-
ers of trafﬁc (e.g., TCP or UDP) entering or exiting the ECE
network from August 15th until September 7th, 2003. The
contents of all DNS packets were recorded and anonymized.
In addition to the regular activity of the department, this pe-
riod includes two major worm outbreaks: Blaster [14] and
Welchia.
Through examining the traces, we were able to partition
the ECE subnet (1128 hosts total) into four types of hosts:
normal “desktop” clients, servers, clients running peer-to-
peer applications, and systems infected by worms. Each
type of hosts exhibited signiﬁcantly different connectivity
characteristics. The 999 “Normal Clients” exhibited traf-
ﬁc patterns driven by client-server communication, such
as HTTP, AFS, and FTP trafﬁc. 17 “Servers” provide net-
work services, such as SMTP, DNS, or IMAP / POP. The
33 clients running peer-to-peer applications (in these traces
Kazaa, Gnutella, Bittorrent, and edonkey) were placed in
their own category because they exhibit greater connectiv-
ity than normal hosts. This can be attributed to the nature
of peer-to-peer systems; packets must be exchanged period-
ically in order to establish which hosts are on the network
and the content they serve. Finally, 79 systems were ob-
served to have been infected by the Blaster and/or Welchia
worms. Both these worms exploited the Windows DCOM
RPC vulnerability. Blaster scanned subnets for other vul-
nerable hosts by attempting to send itself to TCP destina-
tion port 135. Welchia was a “patching” worm which ﬁrst
scanned subnets for vulnerable hosts using ICMP ping re-
quests. If a host replied, Welchia attempted to infect the
system, make further attempts to propagate, patch the vul-
nerability, and reboot the host. We were able to differenti-
ate between the two worms by looking for a large amount
of ICMP echo requests intermixed with TCP SYNs to port
135. We found that although Welchia’s intention was be-
nign, its peak scanning rate was an order of magnitude
greater than Blaster’s.1
Normal Clients  : 5 second window
e
m
i
t
f
o
n
o
i
t
c
a
r
F
1
0.8
0.6
0.4
0.2
0
1
distinct IPs
distinct IPs (no prior contact)
distinct IPs (no prior contact, no DNS)
10
100
1000
Attempted contacts to foreign hosts
(a) CDF of aggregate contact rates for 999 “normal
desktop” clients. Note how the contact classiﬁcation
reﬁnements result in lower values.
Worm-infected Hosts  : 5 second window 
e
m
i
t
f
o
n
o
i
t
c
a
r
F
1
0.8
0.6
0.4
0.2
0
1
distinct IPs 
distinct IPs (no prior contact)
distinct IPs (no prior contact, no DNS)
10
100
1000
Attempted contacts to foreign hosts
(b) CDF of aggregate contact rates for 79 clients infected
by the Blaster and/or Welchia worm.
Figure 9. CDF of Contact rates in a ﬁve second interval
for normal and infected clients
Figure 9 shows the observed aggregate contact rates for
1 We discovered an instance of Welchia that scanned 7068 hosts in a
minute. By contrast, Blaster’s peak scanning rate was only 671 hosts
in a minute. Blaster, however, was much more persistent in its propa-
gation attempts.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 10:03:30 UTC from IEEE Xplore.  Restrictions apply. 
(a) normal clients and (b) worm-infected clients. As shown,
they are very different. In addition to the solid lines, which
indicate the number of distinct IP addresses contacted in a
5-second period, two other lines are given to indicate the
effect of possible reﬁnements on rate limiting. The dashed
line shows the number of distinct IP addresses contacted
from within the network. The dotted line shows the num-
ber of distinct IP addresses contacted from within the net-
work and not counting those for which valid DNS transla-
tions are obtained. Clearly, these reﬁnements may be use-
ful in limiting contact rates to lower numbers while having
less impact on legitimate communications. For instance, to
avoid having impact 99.9% of the time, inside-to-outside
contact rate could be limited to 16 per ﬁve seconds for all
contacts at the edge router, 14 per ﬁve seconds for contacts
to hosts that did not initiate contact ﬁrst, or 9 per ﬁve sec-
onds for contacts to hosts for which a valid DNS translation
did not exist or did not initiate contact ﬁrst. The tightness of
the three lines in the worm-infected graph support this state-
ment, showing that worms trafﬁc spike all three metrics.
The P2P and server systems are less well-behaved than
normal systems and less ill-behaved (in terms of contact
rate) than worm-infected systems. But, the contact rate lim-
its would have to be greatly increased in order to avoid im-
pacting regular trafﬁc. Speciﬁcally for P2P clients, the net-
work could be limited to 89 per ﬁve seconds for all contacts,
61 per ﬁve seconds for contacts to hosts that did not initiate
contact ﬁrst, or 26 per ﬁve seconds for contacts to hosts for
which a valid DNS translation did not exist or did not ini-
tiate contact ﬁrst. Alternately, an administrator could cate-
gorize systems as we have done, and give them distinct rate
limits. This would tightly restrict most systems (those not
pre-determined to be special), while allowing special others
to contact at higher rates. Of course, performance penalties
will be faced by new P2P users, until they convince the se-
curity administrator to deem them ”special”. Many admin-
istrators would prefer this model to the unconstrained load
spikes that they currently face, and have to diagnose, as new
P2P applications are introduced to their environment.
Rather than aggregate limits at the edge routers, as dis-
cussed above, another way to limit contact rates is per indi-
vidual host (e.g., in host network stacks [17] on smart net-
work cards or switches [5]). Our analysis of the traces in-
dicates that the resulting restrictions can safely limit a sin-
gle “normal desktop” system initiating contact to, for exam-
ple, four unique IP addresses per ﬁve seconds or one unique
non-DNS-translated IP addresses per ﬁve seconds.
Although these numbers are lower, however, the 1128
machines in the network could conceivably each use their
full slot when a worm infects them, meaning that the aggre-
gate contact rate from the intra-net would be much higher
than the rate limits discussed for the edge router case. This
suggests that per-host rate limits are a poor way to protect
the external Internet from internal worm trafﬁc.
Per-host limits, however, are a much better at (in fact,
the only way) to protecting the internal network [5] once
worms get past the outer ﬁrewall. Section 5 quantiﬁes this
beneﬁt. A ﬁnal observation from the traces relates to the
choice of a rate limit window size. We observed that longer
windows accommodate lower long-term rate limits, because
heavy-contact rates tend to be bursty. For example, for ag-
gregate non-DNS rates, the 99.9% values are ﬁve for one
second, twelve for ﬁve seconds, and ﬁfty for sixty seconds.
The downside to a long window, however, is that one could
face a lengthy delay after ﬁlling it, before the next connec-
tion is allowed. Visible disruptions of this sort may make
long windows untenable in practice. One option worth ex-
ploring is hybrid windows with, for example, one short win-
dow to prevent long delays and one longer window to pro-
vide better rate-limiting.
Analytical Model for rate limiting (RL) rates from trace data
d
e
t
c
e
n
f
i
s
e
d
o
n
f
t
o
e
g
a
n
e
c
r
e
P
1
0.8
0.6
0.4
0.2
0
1
10
100
Time
No RL
1:2 (rate) RL
1:6 (rate) RL
Host based RL
1000
10000
Note graph is plotted in log scale
Figure 10. Effect of rate limiting given the rates pro-
posed by our trace study.
Figure 10 illustrates the effect of different rate limits on
worm propagation. We approximate Williamson’s IP throt-
tling scheme and Ganger’s DNS-based scheme using Equa-
tions (4) and (5) in Section 4. Although Equations (4) and
(5) model deployment-at-hub, they can be used to approx-
imate edge router rate limiting in the case of a single sub-
net. Recall β is the aggregated node contact rate while γ is
the contact rate per link. As the traces indicated a lower ag-
gregated rate for the DNS-based scheme, we choose the ra-
tio of γ to β as 1:2 to represent the DNS-based scheme and
the ratio of 1:6 for the IP throttling scheme. As shown, the
rate limiting method based on DNS queries gives better re-
sults than the rate limiting method based purely on IP ad-
dresses visited. The plots also indicate unmistakably that
aggregated rate limiting at the edge router performs better
than per-host limits.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 10:03:30 UTC from IEEE Xplore.  Restrictions apply. 
8. Conclusions
Recent work in rate limiting schemes such as traf-
ﬁc throttling [17] and secure NICs [5] show potential in
mitigating widespread worm attacks. However, it is not
known precisely how rate limiting ﬁlters should be de-
ployed throughout a network and what a reasonable rate
limit is in practice.
Our contributions in this work are twofold: First, we
showed through modeling and simulation experiments that
deploying rate limiting ﬁlters at the backbone routers is ex-
tremely effective. Rate control at the edge routers is help-
ful for randomly propagating worms, but does very little
to suppress local preferential spreading worms. Individual
host based rate control results in a slight linear slowdown
of the worm spread, regardless of the spreading algorithm.
A direct consequence of this analysis is that in order to se-
cure an enterprise network, one must install rate limiting ﬁl-
ters at the edge routers as well as some portion of the inter-
nal hosts.
Second, through a study of real network traces from a
campus computing network, we discovered that there exist
reasonable rate limits for an enterprise network that would
severely restrict the spread of a worm but would have neg-
ligible impact on almost all legitimate trafﬁc. This is espe-
cially encouraging since rate limiting ﬁlters can be easily
installed and conﬁgured at various strategic points through-
out a network. The result of the trace study conﬁrmed that
per-host rate limiting by itself is not sufﬁcient to secure
the enterprise network—aggregated rate limiting at the edge
router must be employed at the same time to minimize the
spread of worm attacks. This is the ﬁrst study in this area
of which we are aware of that has studied rate limiting with
real trafﬁc traces and has identiﬁed realistic rate limits in
practice.
9. Acknowledgements
We would like to thank Ken MacInnis, Val Henson and
the anonymous reviewers for helping to improve this paper.
We thank the members and companies of the PDL Consor-
tium for their support.
References
[1] N. Bailey. The Mathematical Theory of Infectious Diseases
and its Applications. Grifﬁn, London, 1975.
[2] Z. Chen, L. Gao, and K. Kwiat. Modeling the spread of ac-
tive worms. In Proceedings of IEEE INFOCOM 2003, San
Francisco, CA, April 2003.
[3] S. Eugene. The internet worm program: An analysis, 1988.
[4] K. Fall and K. Varadhan, editors.
The ns Man-
The VINT Project. UC Berkeley, LBL, USC/ISI,
ual.
and Xerox PARC, 14 April 2002. World Wide Web,
http://www.isi.edu/nsnam/ns/doc/. Ongoing.
[5] G. R. Ganger, G. Economou, and S. M. Bielski.
Self-
securing network interfaces: What, why and how, Carnegie
Mellon University Technical Report CMU-CS-02-144, Au-
gust 2002.
[6] J. O. Kephart and S. R. White. Directed-graph epidemio-
logical models of computer viruses. In Proceedings of the
1991 IEEE Computer Society Symposium on Research in Se-
curity and Privacy, pages 343–359, May 1991.
[7] J. O. Kephart and S. R. White. Measuring and modeling
computer virus prevalence. In Proceedings of the 1993 IEEE
Computer Society Symposium on Research in Security and
Privacy, pages 2–15, May 1993.
[8] A. G. McKendrick. Applications of mathematics to medi-
In Proceedings of Edin. Math. Society, vol-
cal problems.
ume 14, pages 98–130, 1926.
[9] A. Medina, A. Lakhina, I. Matta, and J. Byers. Brite: Uni-
versal topology generation from a user’s perspective. Tech-
nical Report BUCS-TR2001-003, Boston University, 2001.
World Wide Web, http://www.cs.bu.edu/brite/publications/.
[10] D. Moore, V. Paxson, S. Savage, C. Shannon, S. Staniford,
and N. Weaver. Inside the slammer worm. In IEEE Security
and Privacy journal, 2003, 2003.
[11] D. Moore, C. Shannon, G. Voelker, and S. Savage. Internet
quarantine: Requirements for containing self-propagating
code. In Proceedings of IEEE INFOCOM 2003, San Fran-
cisco, CA, April 2003.
[12] S. Singh, C. Estan, G. Varghese, and S. Savage. The early-
bird system for real-time detection of unknown worms. Pa-
per submitted to HOTNETS-II, August 2003.
[13] S. Staniford, V. Paxson, and N. Weaver. How to 0wn the in-
ternet in your spare time. In Proceedings of the 11th USENIX
Security Symposium, August 2002.
[14] CERT Advisory CA-2003-04. Ms-sql server worm.
World Wide Web, http://www.cert.org/advisories/CA-2001-
19.html, 2003.
[15] Y. Wang, D. Chakrabarti, C. Wang, and C. Faloutsos. Epi-
demic spreading in real networks: An eigenvalue viewpoint.
In Proceedings of the 22nd International Symposium on Re-
liable Distributed Systems, 2003.
[16] Y. Wang and C. Wang. Modeling the effects of timing param-
eters on virus propagation. In Proceedings of the 2003 ACM
workshop on Rapid Malcode, pages 61–66. ACM Press,
2003.
[17] M. M. Williamson. Throttling viruses: Restricting propa-
gation to defeat malicious mobile code. Technical Report
HPL-2002-172, HP Laboratories Bristol, 17 June 2002.
[18] C. C. Zou, L. Gao, W. Gong, and D. Towsley. Monitoring
and early warning for internet worms. In Proceedings of the
10th ACM conference on Computer and communication se-
curity, 2003.
[19] C. C. Zou, W. Gong, and D. Towsley. Code red worm prop-
In Proceedings of the 9th
agation modeling and analysis.
ACM Conference on Computer and Communication Secu-
rity, November 2002.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 10:03:30 UTC from IEEE Xplore.  Restrictions apply.