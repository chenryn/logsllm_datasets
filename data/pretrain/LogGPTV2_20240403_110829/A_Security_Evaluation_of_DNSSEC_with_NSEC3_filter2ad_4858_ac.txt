owner names that hashes to a value between the two hashed
names in the NSEC3 RR. Thus, even when a resolver re-
ceives a signed opt-out NSEC3 RR covering its queried
name, it must still consult unsigned information, such as
glue records indicating a delegation, to decide whether the
query answer exists lower in the DNS hierarchy. The
NSEC3 opt-out option is thus very dangerous and forms the
basis for the demonstrated attack that we will detail later in
this paper.
3.5 Temporal Speciﬁcations
Under DNS, a RR in a DNS reply packet included a spec-
iﬁcation of TTL as the time, starting from reply reception,
that the resolver may validly cache the RR. This speciﬁ-
cation of TTL relative to packet reception makes DNS re-
ply packets susceptible to replay attacks. To avoid replay
vulnerability, DNSSEC introduces absolute-time temporal
speciﬁcations for its signatures. Each RRSIG RR has a sig-
nature validity period, stated as absolute start and end times.
This introduces a dependency of TTL times upon signature
validity times at the resolver, as TTLs for RRs must not re-
main valid for longer than the valid periods of signatures
attesting to these RRs. The absolute timing eliminates the
possibly of replay after the expiration of the corresponding
RRSIG.
3.6 Packet Format & Attacker Capabilities
Because DNSSEC operates solely by adding RRs to reg-
ular DNS, its packet format is essentially unchanged from
DNS (see Figure 2). The security-related DNSSEC RRs are
carried alongside the original DNS RRs in the same packet
(see Figure 1). DNSSEC does introduces a single enable
bit, DNSSEC OK (DO), located in the EDNS0 header con-
tained in the Additional Section of DNS packets. It also de-
ﬁnes two bit in the DNS header: Authenticated Data (AD),
which indicates that the sending server has validated the
RRs in the packet, and Checking Disabled (CD), which tell
upstream servers to not perform RR validation.
The DNSSEC signature scheme only allows for individ-
ual RRSets to be signed by an associated RRSIG record.
Thus, the integrity provided by DNSSEC is at individual
RRSet+RRSIG granularity. Essentially, the only guaran-
tee of DNSSEC is that it is impossible, short of private key
compromise, for a network attacker to create a RRSet and
RRSIG pair containing manipulated data validly signed by
the originating zone. We thus incorporate capabilities for
manipulating all other aspects of DNSSEC packets into our
attacker model, including stripping RRSIGs from RRSets,
changing header bits, inserting and deleting recorded RRs,
etc. See Section 4.4 for a detailed description.
3.7 Robustness Against Cache Poisoning
DNSSEC is effective against the cache-poisoning attacks
described in Section 2.3.
In the presence of the attacker
capabilities listed in Section 4.4, which model a man-in-
the-middle network attacker, our ﬁnite-state model check-
ing results in Section 5.2 demonstrate that signed DNSSEC
records obtained using only secure delegations are not vul-
nerable to forgery. An end-user trusting only secure query
responses is thus safe from such a network attacker.
We will also now detail how DNSSEC successfully pro-
tects against out-of-path (Kaminsky) cache-poisoning. Re-
call that the Kaminsky attack works by redirecting the IP
addresses associated with glue NS and A records, causing
the recursive resolver to query a DNS server controlled by
an attacker. As noted by Bernstein, redirection of the child
zone query to an attacking DNSSEC server is still possible
under DNSSEC, since glue records are unsigned and forge-
able. However, with the DNSSEC protocol, a DS record
with RRSIG will also be sent in a secure delegation re-
sponse. The authenticity of this signed DS record is veri-
ﬁable by the recursive resolver via the attestation chain (it
should not follow delegation responses without a signed and
attested DS), thus giving the recursive resolver a way to ver-
ify the public key of the child zone.
With a trusted public key for the child zone, the resolver can
validate whether a RR contained in a response sent by the
attacking server is properly signed by the child zone. Short
of key compromise, the attacking server therefore cannot
falsify any signed RRSets in this child zone, including DS
records for further secure delegation. Since the ultimate
RRs requested by name resolution, usually A or MX, are
available in signed form in their authoritative zone, a re-
solver never has to rely on an unsigned record as its ﬁnal
answer. Thus, as long as a DNSSEC resolver accepts only
RRSets appropriately signed by their authoritative zone as
ﬁnal query answers, the response packets may come from
any server, redirected or not, without allowing the attacker
to violate the ultimate integrity of a DNSSEC name resolu-
tion.
In fact, server redirection does not increase the packet
forgery capabilities of the network attacker. Once an at-
tacker has caused a recursive resolver to query its attack-
ing DNSSEC server, it can form any type of response to
the resolver that it chooses except create a valid RRSet
and RRSIG pair signed with the zone’s private key. These
are exactly the same capabilities that we ascribed to the
man-in-the-middle network attacker in Section 3.6, albeit
made more convenient for the attacker by eliminating the
race with a legitimate DNSSEC server. Thus, glue record
forgery does not present any additional security threat to
States
Local Resolver State
Knowledge of TLD and Authoritative Zone
Address (and validity)
DS (and validity)
DNSKEY (and validity)
Names to Resolve (name1-name6)
Answer (and validity)
Network
Set of Packets
Attacker Knowledge
Set of Packets
Transition Rules
Local Resolver
Query Generation
Reply Handling
LocalResolverState → N etwork
N etwork → LocalResolverState
LocalResolverState → LocalResolverState
TTL and Signature Expiration
Root, TLD, and Authoritative Zone Servers
Query Response
N etwork → N etwork
Attackers
Learning Legitimate Replies
N etwork → AttackerKnowledge
AttackerKnowledge, N etwork → N etwork
Forgery Generation
Table 3. Overview of DNSSEC Murϕ Model. Arrows denote StatesRead → StatesWritten.
DNSSEC beyond the normal capabilities of a network at-
tacker, though it may allow the attacker to more easily in-
hibit DNSSEC performance with rogue packets that, for ex-
ample, consume resolver CPU time.
4 Finite State Model Checking
In order to evaluate the security of the DNSSEC proto-
col, we performed a ﬁnite-state “rational reconstruction” of
DNSSEC using Murϕ [13], a Nondeterministic Finite Au-
tomaton (NFA) enumerator to check its operations against
safety invariants derived from its stated security goals. In
the rational reconstruction process, decribed in [20], the
most basic parts of the protocol messages are modeled and
executed in the model checker, to see if any safety invariants
are violated. When invariants are violated, more protocol
components are added until the invariants pass or cannot
be passed. The entire process thus aids in understanding
the component design of the protocol and ensures that the
properties expressed in the invariants test the functionality
of each protocol component.
Furthermore, since Murϕ tries all possible combinations of
modeled attacker capabilities, when the reconstructed pro-
tocol runs to completion without violating any invariants,
we may draw the conclusion that the protocol preserves the
expressed safety invariants against the attacker described in
the model. In this section, we will detail our reconstruction
of the protocol, the network attacker mode, and the secu-
rity invariants. We will also report on an inconsistency in
the temporal dependencies of the DNSSEC attestation chain
found by our modeling.
4.1 Overview of Murϕ Model
is
at
available
http://crypto.
Our model
stanford.edu/protocols/murphi_models/
and is based on a typical usage scenario of the DNSSEC
service. Table 3 summarizes this ﬁnite-state model. We
model three layers of the DNSSEC hierarchy, representing
root zone servers (“.”), TLD zone servers (“com.”), and
an authoritative server for a single zone (“example.com.”).
The root zone DNSKEY is our modeled trust anchor.
In
the state machine, these zone servers are simply modeled
as a set of transition rules on network state; they do not
introduce any additional state themselves. We also model
a local recursive resolver, representing ISP-run DNSSEC
resolvers, as a set of transition rules on network state as
well as local state, representing name resolution status and
knowledge of the DNSSEC hierarchy, such as zone keys,
DS RRs, and server addresses. The network is simply a
set of modiﬁable packet state structures. The ﬁnal aspect
of our model is the attacker model, which consists both
of transition rules modifying network state and additional
state representing packet knowledge recorded by the
attacker.
4.2 Root, TLD, and Authoritative Servers
Model
The behaviors of the root, TLD, and authoritative zone
servers require no server state and are entirely described by
network state transition rules. Our modeled root and TLD
behaviors are quite simple. They respond to network state
containing a query packet addressed to them and will write
a response to the network containing either a secure delega-
Matching RRSets in
Attested Cache
Non-Attested
Cache
NS, A
NS, A
NS, A
A
DS
(covering
NSEC3 (owner name
matches query, shows
glue NS exists)
NSEC3
query, opt-out)
NSEC3
query, opt-out)
NSEC3
query, no opt-out)
(covering
(covering
Action
Answer
Secure
Delegation
Insecure
Delegation
Insecure
Delegation
Denial-of-
Existence
Authenticated
Denial-of-
Existence
Figure 3. Zone Response Behavior to an RR Query
Figure 4. Modeled Resolver Action Logic, Depending
on Resolver Cache Contents Matching Query
tion, with DS and RRSIG authoritative RRs and NS and A
glue RRs.
The modeled behavior of the authoritative “example.com.”
server is more complex, as it covers the entire set of zone
responses to an RR query. The full set is enumerated in
Figure 4.1. Response 1 represents the simple case where
the query matches an RR existent in the zone. Responses 2-
4 represent when the query matches an existent delegation
point instead of an RR in the zone. Response 2 is the secure
delegation case. Responses 3 and 4 represent the options
for an insecure delegation: a NS glue record used for inse-
cure delegation in DNSSEC may either be recorded by the
NSEC3 chain (response 3), or unrecorded, with the cover-
ing NSEC3 setting opt-out instead (response 4).
Finally, responses 5 and 6 represent cases when the query
matches neither existent RR nor delegation. The zone must
then indicate non-existence of the queried RR by returning
the covering NSEC3, which may happen to have opt-out set
(response 5), or not (response 6). Our modeled authorita-
tive zone has RR content that will elicit each of these six re-
sponses when queries for name1 through name6 are sent by
the resolver, allowing Murϕ to enumerate all possible states
of an authoritative zone responding to a query.
4.3 Local Recursive Resolver Model
The modeled local recursive resolver tries to resolve the set
of six names that elicit the full range of DNSSEC response
behavior as described in the previous section. These six
names also form the basis of our invariants, as we check that
the information associated with the names in the authori-
tative zone matches the understanding the resolver learns
from replies. The resolver state records the answer supplied
by the authoritative zone to each of the six query targets,
along with the temporal validity of the answer. When any
answer is in the expired state, the resolver will try to re-
solve the corresponding name by writing a query packet to
the authoritative zone server, provided its knowledge of au-
thoritative server address is valid. For the purpose of query-
ing and authenticating replies, the local resolver state also
maintains TLD and authoritative zone address, DNSKEY,
and DS, and will appropriately query when these expire.
(The root server address and DNKSEY are not modeled as
resolver state because they are hard-coded in a resolver im-
plementation).
4.3.1 TTL and Signature Expiration
We model validity expiration for all query answers and all
server addresses, DNSKEYs, and DSs. In DNSSEC, all of
this information is stored as a RR. RRs have an associated
TTL and, if signed, also a signature validity period for the
corresponding RRSIG. As per RFC 4033, TTLs for RRs
must expire when the corresponding RRSIGs expire; this is
strictly enforced in our model by combining RR TTL and
RRSIG validity into a single entity. Also, all modeled va-
lidity states initialize to ’expired’, and transition rules exist
for each record that change a ’valid’ state to an ’expired’
state.
4.3.2 Reply Validation Logic
The local resolver model also contains logic that validates
the contents of a reply packet and decides what actions to
RR Existsin ZoneRR NotIn ZoneRR inChild ZoneReturnsSigned RRSecure DelegationInsecureDelegationRR Does Not ExistReturns NSEC3Covering QueryOpt-outNSEC3Non-opt-outNSEC3Zone Receives RR QueryNS Glue Recordin NSEC3 ChainNS Glue Record not in NSEC3 Chain(Opt-out)123456take with regards to the query based on received informa-
tion. This logic is of utmost importance to the security of a
DNSSEC implementation. For example, incorrect resolver
validation behavior that accepts unsigned RRs from an ex-
pected DNSSEC zone opens up a downgrade path for at-
tackers to exploit. We distilled the guidance of RFC 4035
into our model.
In particular, our modeled resolver places RRSets contained
in replies into two separate entities for use in this logic:
an Attested Cache, whose contents are secure RRSets that
have a full attestation chain back to the trust anchor, and a
Non-Attested Cache, whose contents are RRSets the zone
expects to be insecure, such as glue records or data from
regular DNS zones. The attested cache consists of zone
DNSKEYs and DSes as well as signed A and NSEC3 RRs
from reply packets. For instance, to include an A record
signed by the authoritative zone in the attested cache, the
resolver’s TLD and authoritative zone DSes and DNSKEYs
must all be valid. The unattested cache consists of zone
addresses and glue records from reply packets. RRSets de-
termined to be bogus, such as those with invalid signatures,
or indeterminate, such as those with incomplete attestation
chains, are discarded by validation logic. We believe that
the attested/non-attested cache distinction may be useful to
future DNSSEC implementers.
The resolver decides what actions to take on behalf of each
query based on the contents of the attested and non-attested
caches. Table 4 summarizes these logical rules.
4.4 Modeled Attacker Capabilities
Our Murϕ model checks DNSSEC in the presence of a net-
work attacker possessing all reply packet manipulation ca-
pabilities short of key compromise. The attacker’s ultimate
goal is to induce the resolver to accept a corrupted query an-
swer. This is a standard attacker model, used by many pre-
vious studies including [18, 20]. The full list of attacker ca-
pabilities in our ﬁnite-state model is summarized here. Due
to the nature of a non-deterministic ﬁnite automaton (NFA),
all attacks involving any combination of the capabilities are