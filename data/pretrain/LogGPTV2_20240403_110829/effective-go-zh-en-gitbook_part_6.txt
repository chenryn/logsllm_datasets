for i := 0; i  cap(slice) { // reallocate
// Allocate double what's needed, for future growth.
newSlice := make([]byte, (l+len(data))*2)
// The copy function is predeclared and works for any slice type.
copy(newSlice, slice)
slice = newSlice
}
slice = slice[0:l+len(data)]
for i, c := range data {
slice[l+i] = c
}
return slice
}
45
数据
func Append(slice, data[]byte) []byte {
l := len(slice)
if l + len(data) > cap(slice) { // 重新分配
// 为了后面的增长，需分配两份。
newSlice := make([]byte, (l+len(data))*2)
// copy 函数是预声明的，且可用于任何切片类型。
copy(newSlice, slice)
slice = newSlice
}
slice = slice[0:l+len(data)]
for i, c := range data {
slice[l+i] = c
}
return slice
}
We must return the slice afterwards because, although Append can modify the elements of
slice, the slice itself (the run-time data structure holding the pointer, length, and capacity) is
passed by value.
最终我们必须返回切片，因为尽管 Append 可修改 slice 的元素，但切片自身（其运行时数据
结构包含指针、长度和容量）是通过值传递的。
The idea of appending to a slice is so useful it's captured by the append built-in function. To
understand that function's design, though, we need a little more information, so we'll return
to it later.
向切片追加东西的想法非常有用，因此有专门的内建函数 append。 要理解该函数的设计，我
们还需要一些额外的信息，我们将稍后再介绍它。
Two-dimensional slices
二维切片
Go's arrays and slices are one-dimensional. To create the equivalent of a 2D array or slice, it
is necessary to define an array-of-arrays or slice-of-slices, like this:
Go 的数组和切片都是一维的。要创建等价的二维数组或切片，就必须定义一个数组的数组，
或切片的切片，就像这样：
type Transform [3][3]float64 // A 3x3 array, really an array of arrays.
type LinesOfText [][]byte // A slice of byte slices.
46
数据
type Transform [3][3]float64 // 一个 3x3 的数组，其实是包含多个数组的一个数组。
type LinesOfText [][]byte // 包含多个字节切片的一个切片。
Because slices are variable-length, it is possible to have each inner slice be a different
length. That can be a common situation, as in our LinesOfText example: each line has an
independent length.
由于切片长度是可变的，因此其内部可能拥有多个不同长度的切片。在我们的 LinesOfText 例
子中，这是种常见的情况：每行都有其自己的长度。
text := LinesOfText{
[]byte("Now is the time"),
[]byte("for all good gophers"),
[]byte("to bring some fun to the party."),
}
Sometimes it's necessary to allocate a 2D slice, a situation that can arise when processing
scan lines of pixels, for instance. There are two ways to achieve this. One is to allocate each
slice independently; the other is to allocate a single array and point the individual slices into
it. Which to use depends on your application. If the slices might grow or shrink, they should
be allocated independently to avoid overwriting the next line; if not, it can be more efficient to
construct the object with a single allocation. For reference, here are sketches of the two
methods. First, a line at a time:
有时必须分配一个二维数组，例如在处理像素的扫描行时，这种情况就会发生。 我们有两种
方式来达到这个目的。一种就是独立地分配每一个切片；而另一种就是只分配一个数组， 将
各个切片都指向它。采用哪种方式取决于你的应用。若切片会增长或收缩， 就应该通过独立
分配来避免覆盖下一行；若不会，用单次分配来构造对象会更加高效。 以下是这两种方法的
大概代码，仅供参考。首先是一次一行的：
// Allocate the top-level slice.
picture := make([][]uint8, YSize) // One row per unit of y.
// Loop over the rows, allocating the slice for each row.
for i := range picture {
picture[i] = make([]uint8, XSize)
}
// 分配顶层切片。
picture := make([][]uint8, YSize) // 每 y 个单元一行。
// 遍历行，为每一行都分配切片
for i := range picture {
picture[i] = make([]uint8, XSize)
}
47
数据
And now as one allocation, sliced into lines:
现在是一次分配，对行进行切片：
// Allocate the top-level slice, the same as before.
picture := make([][]uint8, YSize) // One row per unit of y.
// Allocate one large slice to hold all the pixels.
pixels := make([]uint8, XSize*YSize) // Has type []uint8 even though picture is [][]ui
nt8.
// Loop over the rows, slicing each row from the front of the remaining pixels slice.
for i := range picture {
picture[i], pixels = pixels[:XSize], pixels[XSize:]
}
// 分配顶层切片，和前面一样。
picture := make([][]uint8, YSize) // 每 y 个单元一行。
// 分配一个大的切片来保存所有像素
pixels := make([]uint8, XSize*YSize) // 拥有类型 []uint8，尽管图片是 [][]uint8.
// 遍历行，从剩余像素切片的前面切出每行来。
for i := range picture {
picture[i], pixels = pixels[:XSize], pixels[XSize:]
}
Maps
映射
Maps are a convenient and powerful built-in data structure that associate values of one type
(the key) with values of another type (the element or value) The key can be of any type for
which the equality operator is defined, such as integers, floating point and complex numbers,
strings, pointers, interfaces (as long as the dynamic type supports equality), structs and
arrays. Slices cannot be used as map keys, because equality is not defined on them. Like
slices, maps hold references to an underlying data structure. If you pass a map to a function
that changes the contents of the map, the changes will be visible in the caller.
映射是方便而强大的内建数据结构，它可以关联不同类型的值。其键可以是任何相等性操作
符支持的类型， 如整数、浮点数、复数、字符串、指针、接口（只要其动态类型支持相等性
判断）、结构以及数组。 切片不能用作映射键，因为它们的相等性还未定义。与切片一样，
映射也是引用类型。 若将映射传入函数中，并更改了该映射的内容，则此修改对调用者同样
可见。
Maps can be constructed using the usual composite literal syntax with colon-separated key-
value pairs, so it's easy to build them during initialization.
48
数据
映射可使用一般的复合字面语法进行构建，其键 - 值对使用逗号分隔，因此可在初始化时很容
易地构建它们。
var timeZone = map[string]int{
"UTC": 0*60*60,
"EST": -5*60*60,
"CST": -6*60*60,
"MST": -7*60*60,
"PST": -8*60*60,
}
Assigning and fetching map values looks syntactically just like doing the same for arrays and
slices except that the index doesn't need to be an integer.
赋值和获取映射值的语法类似于数组，不同的是映射的索引不必为整数。
offset := timeZone["EST"]
An attempt to fetch a map value with a key that is not present in the map will return the zero
value for the type of the entries in the map. For instance, if the map contains integers,
looking up a non-existent key will return 0. A set can be implemented as a map with value
type bool. Set the map entry to true to put the value in the set, and then test it by simple
indexing.
若试图通过映射中不存在的键来取值，就会返回与该映射中项的类型对应的零值。 例如，若
某个映射包含整数，当查找一个不存在的键时会返回 0。 集合可实现成一个值类型为 bool 的
映射。将该映射中的项置为 true 可将该值放入集合中，此后通过简单的索引操作即可判断是
否存在。
attended := map[string]bool{
"Ann": true,
"Joe": true,
...
}
if attended[person] { // will be false if person is not in the map
fmt.Println(person, "was at the meeting")
}
49
数据
attended := map[string]bool{
"Ann": true,
"Joe": true,
...
}
if attended[person] { // 若某人不在此映射中，则为 false
fmt.Println(person, "正在开会")
}
Sometimes you need to distinguish a missing entry from a zero value. Is there an entry for
"UTC" or is that the empty string because it's not in the map at all? You can discriminate with
a form of multiple assignment.
有时你需要区分某项是不存在还是其值为零值。如对于一个值本应为零的 "UTC" 条目，也可
能是由于不存在该项而得到零值。你可以使用多重赋值的形式来分辨这种情况。
var seconds int
var ok bool
seconds, ok = timeZone[tz]
For obvious reasons this is called the “comma ok” idiom. In this example, if tz is present,
seconds will be set appropriately and ok will be true; if not, seconds will be set to zero and
ok will be false. Here's a function that puts it together with a nice error report:
显然，我们可称之为 “逗号 ok” 惯用法。在下面的例子中，若 tz 存在， seconds 就会被赋予
适当的值，且 ok 会被置为 true； 若不存在，seconds 则会被置为零，而 ok 会被置为 false。
func offset(tz string) int {
if seconds, ok := timeZone[tz]; ok {
return seconds
}
log.Println("unknown time zone:", tz)
return 0
}
To test for presence in the map without worrying about the actual value, you can use the
blank identifier ( _ ) in place of the usual variable for the value.
若仅需判断映射中是否存在某项而不关心实际的值，可使用 空白标识符 （ ）来代替该值的
_
一般变量。
_, present := timeZone[tz]
50
数据
To delete a map entry, use the delete built-in function, whose arguments are the map and
the key to be deleted. It's safe to do this even if the key is already absent from the map.
要删除映射中的某项，可使用内建函数 delete，它以映射及要被删除的键为实参。 即便对应
的键不在该映射中，此操作也是安全的。
delete(timeZone, "PDT") // Now on Standard Time
delete(timeZone, "PDT") // 现在用标准时间
Printing
打印
Formatted printing in Go uses a style similar to C's printf family but is richer and more
general. The functions live in the fmt package and have capitalized names: fmt.Printf,
fmt.Fprintf, fmt.Sprintf and so on. The string functions (Sprintf etc.) return a string rather than
filling in a provided buffer.
Go 采用的格式化打印风格和 C 的 printf 族类似，但却更加丰富而通用。 这些函数位于 fmt 包
中，且函数名首字母均为大写：如 fmt.Printf、fmt.Fprintf，fmt.Sprintf 等。 字符串函数
（Sprintf 等）会返回一个字符串，而非填充给定的缓冲区。
You don't need to provide a format string. For each of Printf, Fprintf and Sprintf there is
another pair of functions, for instance Print and Println. These functions do not take a format
string but instead generate a default format for each argument. The Println versions also
insert a blank between arguments and append a newline to the output while the Print
versions add blanks only if the operand on neither side is a string. In this example each line
produces the same output.
你无需提供一个格式字符串。每个 Printf、Fprintf 和 Sprintf 都分别对应另外的函数，如 Print
与 Println。 这些函数并不接受格式字符串，而是为每个实参生成一种默认格式。Println 系列
的函数还会在实参中插入空格，并在输出时追加一个换行符，而 Print 版本仅在操作数两侧都
没有字符串时才添加空白。以下示例中各行产生的输出都是一样的。
fmt.Printf("Hello %d\n", 23)
fmt.Fprint(os.Stdout, "Hello ", 23, "\n")
fmt.Println("Hello", 23)
fmt.Println(fmt.Sprint("Hello ", 23))
51
数据
The formatted print functions fmt.Fprint and friends take as a first argument any object that
implements the io.Writer interface; the variables os.Stdout and os.Stderr are familiar
instances.
fmt.Fprint 一类的格式化打印函数可接受任何实现了 io.Writer 接口的对象作为第一个实参；变
量 os.Stdout 与 os.Stderr 都是人们熟知的例子。
Here things start to diverge from C. First, the numeric formats such as %d do not take flags
for signedness or size; instead, the printing routines use the type of the argument to decide
these properties.
从这里开始，就与 C 有些不同了。首先，像 %d 这样的数值格式并不接受表示符号或大小的
标记， 打印例程会根据实参的类型来决定这些属性。
var x uint64 = 1<<64 - 1
fmt.Printf("%d %x; %d %x\n", x, x, int64(x), int64(x))
prints
将打印
18446744073709551615 ffffffffffffffff; -1 -1