0.6% (3232/515586)
~0% (1/100037)
~0% (3/441534)
Table 3: Study of 20 Popular Web Applications. < 1% of web application code needs to run in the TEMI to access sensitive info; < 1%
of all calls to JS data types trigger browser-TEMI interactions.
be loaded in the same page, and each may contain its own
JavaScript. If the listing is not protected, the script from one
seller may deface or tamper with that from another seller. We
also consider Babylon, since users can purchase items with-
out creating an account with Babylon. Therefore, by tamper-
ing with the purchaser’s email in the browser, an attacker can
have a software license purchased by a legitimate user, but
delivered to the attacker’s email address. We mark the email
address as a sensitive ﬁeld on Babylon. We mark product
search terms as sensitive for Amazon.
• Gmail. It is a rich webmail client used as our running exam-
ple. We mark search terms and certain emails as sensitive.
We manually (with browser instrumentation) identify all func-
tions that legitimately operate on sensitive information, including
event handlers. Our analysis details are shown in Table 3. We as-
sign the default policy κ0 → κ0 to these functions, and all user
keyboard inputs are marked as sensitive. We mark the Gmail spam
warning message as requiring proof-of-impression. We also mark
a post on Facebook as requiring proof-of-impression.
Results. We dynamically modify these web pages to encode sen-
sitive contents into CRYPTONs using a proxy server. We ﬁnd that
these applications render correctly in our CRYPTON-compliant browser
implementation, and the applications remain functional. This con-
ﬁrms our hypothesis that existing applications can be easily up-
graded to using CRYPTON-KERNEL’s functionality. Our test proxy
decodes encrypted content returned from the browser and checks
them against the expected values. It also veriﬁes that it receives
proof-of-impression tokens.
Developer effort. Table 3 demonstrates that the developer effort to
enable this functionality is modest. On average, only 1% of the to-
tal functions in the applications need to be included in CRYPTONs;
this amounts to 2 KB of miniﬁed JavaScript per web page. The ef-
fort required to verify such code as CRYPTON functions is feasible,
around 1-9 functions for each application. Figure 4 shows similar
results that about 0-9 functions need to be veriﬁed for each signup
page.
Figure 4: Number of User Input Fields and CRYPTON Func-
tions Required in Signup Pages
4.2 Reduction in Attack Surface
The isolation and controlled operations provided by CRYPTONs
signiﬁcantly reduce the size of code that sensitive information is
exposed to. We evaluate this reduction in both web application
code as well as in browser code.
Exposure to untrusted application code reduces by 99%. As
we show in Table 3, on average less than 1% of web application
code actually needs access to sensitive information, and is thus run
in CRYPTON functions. All the rest of web application code only
has access to opaque objects with encrypted data. On the contrary,
in current web browsers, all information is exposed to the entire
web application. Any malicious or compromised JavaScript library
can steal the information and leak it to external parties. By isolat-
ing sensitive information into CRYPTONs, the CRYPTON-KERNEL
places 99% of web application outside the TCB.
Exposure to browser vulnerabilities reduced by 92.5%. In exist-
ing web browsers, sensitive information being processed is largely
accessible to browser code running in the same process. To evaluate
how the CRYPTON-KERNEL reduces such over-exposure of sensi-
tive information to browser vulnerabilities, we study how many his-
0	
  1	
  2	
  3	
  4	
  5	
  6	
  7	
  8	
  9	
  10	
  WindowsLive	
  Yahoo	
  Amazon	
  Wordpress	
  AOL	
  Pinterest	
  Tumblr	
  Ebay	
  Wikipedia	
  Adobe	
  Paypal	
  Google	
  Facebook	
  StackOverFlow	
  Babylon	
  LinkedIn	
  TwiOer	
  IMDB	
  Info-­‐Release	
  FuncUons	
  Input	
  Fields	
  1320torical browser security vulnerabilities are prevented from affect-
ing the security guarantees provided by the CRYPTON-KERNEL.
From our study with historical security vulnerabilities in Firefox
reported separately [24], in total 333 vulnerabilities (92.5%) can-
not be exploited to violating the security guarantees provided by the
CRYPTON-KERNEL. The remaining vulnerabilities either reside in
our TCB (7 of them), or compromise our assumptions (another 20
vulnerabilities). The vast reduction in the exposure to browser vul-
nerabilities veriﬁes the effectiveness of the CRYPTON-KERNEL in
information protection.
4.3 Performance
We run the CRYPTON-KERNEL over the 20 web applications
listed in Table 3, with sensitive information transformed into CRYP-
TONs. The web sites remain responsive, without any perceivable
slowdown. To further evaluate potential performance bottlenecks,
we apply microbenchmarks to measure the performance overheads
(averaged over 20 runs each) arising from encryption/decryption
operations and browser-TEMI interactions when the TEMI exe-
cutes CRYPTON functions.
Encryption/decryption overhead. Figure 5 shows the performance
overhead of the CRYPTON-KERNEL compared to a vanilla WebKit-
GTK browser. We use ﬁve CPU-intensive test pages from the Dro-
maeo benchmark. To vary the workload of encryption and decryp-
tion, we mark different portions of texts in the pages as sensitive,
ranging from zero-sensitive pages (no sensitive text) to fully sen-
sitive pages (all texts marked as sensitive). During these tests, the
browser remains responsive and shows a maximum of 7.5% per-
formance overhead. We also manually craft a test page to eval-
uate the performance of the CRYPTON-KERNEL under pathologi-
cal scenarios. The performance overhead reaches 11.7% when all
texts on the page are marked as sensitive, which requires heavy
encryption/decryption operations. Considering such performance
overhead is measured from an initial unoptimized prototype, it is
reasonable.
Figure 5: Performance Overhead of CRYPTON-KERNEL with
Dromaeo Benchmarks & Manual Test Page, with varying por-
tions of sensitive texts
Overhead of browser-TEMI interactions. We run the CRYPTON-
KERNEL over the 20 web sites listed in Table 3, and measure the
number of IPC calls between the untrusted web browser and the
TEMI. The last column in Table 3 shows that for most cases, less
than 1% of all access to JavaScript data types requires crossing
the browser-TEMI boundary. Given that the overhead of sending
a message via Unix domain socket is around 5 microseconds, a
web site with 1,000 IPC messages may only incur 0.005 second
overhead.8 Thus, the design of separating the execution of CRYP-
TON functions in the TEMI does not cause any performance bottle-
neck.
5. RELATED WORK
In this section, we discuss research related to information pro-
tection in web browsers or operating systems, and key differences
with our work.
Enhancement of browser security mechanisms. There has been
extensive research on enhancing security mechanisms of web browsers.
One direction is to develop ﬂexible and ﬁne-grained access con-
trol on the web platform, so that untrusted JavaScript can be re-
stricted to access only limited resources in a web page [40, 54, 74].
A recent work proposes a multi-layered architecture for enforc-
ing mandatory access control policies, with a label-enforcing web
browser [35]. As with other in-browser security mechanisms [47,
50], these solutions do not prevent compromised browser code from
directly reading the data stored in the browser’s memory.
Privilege separation & trusted paths. Privilege separation is a
fundamental mechanism to enforce basic security principles [60].
Several research works have been proposed to facilitate [7] or au-
tomate [12] privilege separating legacy applications. Recently, im-
proving separation of privileges in web browsers has become an
active area of research [4, 5, 16, 21, 25, 33, 46, 63, 69]. These so-
lutions isolate software components into partitions, thus reducing
the potential damage to sensitive data from a compromised com-
ponent. Nevertheless, they do not provide ﬁrst-class abstractions
to control access to sensitive data, in terms of which information
can be disclosed to which entity. Further more, privilege separa-
tion does not provide sustained control on sensitive data. Once any
information is disclosed to a partition, any code in the partition can
further leak it to others. In contrast, our solution focuses on estab-
lishing several critical trusted paths in an untrusted web browser.
Our proposal is orthogonal to the underlying mechanisms of priv-
ilege separation, and to our best knowledge, is the ﬁrst in bringing
data-centric trusted paths to the web. In our threat model, we trust
the operating system beneath the web browser. Thus, our solu-
tion differs from other trusted path research on the x86 platform,
where the operating system is untrusted, and additional sources of
trust such as the hypervisor [75] or hardware root of trust [49] is
required.
Information ﬂow analysis.
Information ﬂow tracking has also
been used for detecting and preventing information leakage in web
applications [66]. However, without controlling the usage of sensi-
tive information of client-side JavaScript, once disclosed, the infor-
mation can be leaked by malicious scripts via self-exﬁltration at-
tacks [17]. Moreover, such solutions rely on the trust of browsers.
On the contrary, our solution is based on a small TCB, and protects
sensitive data against threats from all untrusted code or scripts in
the browser.
Cryptographic techniques. Cryptographic techniques have long
been protecting security in different systems. Lie et al. [45] pro-
8Outliers are Facebook Friend Search and WindowsLive Signup,
with high browser-TEMI interactions. A closer look at them re-
veals that they are caused by a particular CRYPTON function in each
of them, which processes both sensitive and non-sensitive infor-
mation. We separate each function into two versions accordingly,
and browser-TEMI interactions fall below 1% among all JavaScript
data type accesses.
0	
  2	
  4	
  6	
  8	
  10	
  12	
  0	
  20%	
  40%	
  60%	
  80%	
  100%	
  Dromaeo:	
  user	
  input	
  Dromaeo:	
  hash	
  MD5	
  Dromaeo:	
  regular	
  expression	
  Dromaeo:	
  SHA	
  long	
  string	
  Dromaeo:	
  string	
  Manually	
  craAed	
  pages	
  %	
  CPU	
  Ovrehead	
  %	
  CPU	
  Ovrehead	
  %	
  of	
  sensi2ve	
  texts	
  in	
  the	
  page	
  1321pose an abstract machine of execute-only memory (XOM) to pre-
vent tampering of instructions stored on memory. Borders et al.
propose Storage Capsules [10] to allow users to edit ﬁles on an
untrusted computer without risking leakage of the ﬁle content. Al-
though similar in concept, our solution protects data on the web,
which are ﬁner-grained, and computation over it is not packaged
as applications, but scattered across different functions. This work
addresses such challenges in protecting sensitive web content while
being functionally compatible with existing web applications.
A recent work [19] further applies memory encryption to data
conﬁdentiality, similar to the concept of Data Capsules [48]. It al-
lows unvetted programs to use sensitive data while enforcing policy
to conﬁne activities they can perform on the data. The high-level
application-speciﬁc policy is translated into low-level tags enforced
by the underlying hardware. One issue with this approach is: once
the plaintext is disclosed to certain code, it is difﬁcult to control
information leakage any further, such as via implicit control ﬂows.
Our solution prevents it by limiting the plain-text only to CRYPTON
functions, whose return values are also encrypted by default.
CleanOS [64] uses information ﬂow tracking and encryption to
protect mobile devices against threats to data when the mobile de-
vice is lost. Policy-sealed data [61] is a recent proposal on building
trusted cloud services that protects data from unintended access.
Their abstractions and cryptographic primitives (attribute-based en-
cryption) are well suited for the cloud environment. However, un-
like on the cloud, where environments can be summarized as con-
ﬁgurations, in web browsers, there is no static context or environ-
ment. Code from multiple sources with various privileges are run-
ning in and molding the mixed browser environment. Therefore,
we need more dynamic mechanisms to control data access and pro-
cessing.
6. CONCLUSION
In this paper, we present a novel abstraction, CRYPTON, which
protects sensitive web content and allows rich computation over it.
Based on this data-centric abstraction, we propose a solution that
integrates with the present web browser without trusting its code.
Instead, the security guarantees provided by our solution are solely
enforced by a small standalone engine, called CRYPTON-KERNEL,
which interprets sensitive web content in CRYPTONs and allows
trusted functions to securely compute over the sensitive data. Our