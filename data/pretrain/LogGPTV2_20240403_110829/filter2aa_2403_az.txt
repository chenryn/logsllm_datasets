|L0.16| 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 12 章  条件转移指令 
119 
  DCB       "it is ten",0 
|L0.28| 
  DCB       "it is not ten",0 
除非存在人为干预，否则 ADREQ 和 ADRNE 指令不可能在同一次调用期间都被执行。 
在启用优化功能之后，Keil 会给编译出的 Thumb 模式代码分配条件转移指令。毕竟在 Thumb 模式的
指令之中，没有支持标志位判断的赋值指令。 
指令清单 12.22  Optimizing Keil 6/2013 (Thumb mode) 
f PROC 
; compare input value with 10 
  CMP       r0,#0xa 
; jump to |L0.8| if EQual 
  BEQ       |L0.8| 
  ADR       r0,|L0.12| ; "it is not ten" 
  BX        lr 
|L0.8| 
  ADR       r0,|L0.28| ; "it is ten" 
  BX        lr 
  ENDP 
|L0.12| 
  DCB       "it is not ten",0 
|L0.28| 
  DCB       "it is ten",0 
12.3.3 ARM64 
启用优化功能之后，GCC（Linaro）4.9 编译出来的 ARM64 程序同样用条件转移指令实现条件运算符。 
指令清单 12.23  Optimizing GCC (Linaro) 4.9 
f: 
  cmp  
x0, 10 
  beq  
.L3  
; branch if equal 
  adrp 
x0, .LC1 ; "it is ten" 
  add  
x0, x0, :lo12:.LC1 
  ret 
.L3: 
  adrp 
x0, .LC0 ; "it is not ten" 
  add  
x0, x0, :lo12:.LC0 
  ret 
.LC0: 
  .string  "it is ten" 
.LC1: 
  .string  "it is not ten" 
ARM64 同样没有能够判断标志位的条件赋值指令。而 32 位的ARM指令集
①
12.3.4 MIPS 
，以及x86 的CMOVcc指
令都可以根据相应标志位进行条件赋值。虽然ARM64 存在“条件选择”指令CSEL（Conditional SELect），
但是GCC 4.9 似乎无法给这种程序分配上这条指令。 
不幸的是，GCC 4.45 在编译 MIPS 程序方面的智能程度也有待完善。 
指令清单 12.24  Optimizing GCC 4.4.5 (assembly output) 
$LC0: 
  .ascii   "it is not ten\000" 
$LC1: 
  .ascii   "it is ten\000" 
f: 
① 请参阅 ARM13a，p390，C5.5。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
120 
逆向工程权威指南（上册） 
  li        $2,10                           # 0xa 
; compare $a0 and 10, jump if equal: 
  beq  
$4,$2,$L2 
  nop ; branch delay slot 
; leave address of "it is not ten" string in $v0 and return: 
  lui  
$2,%hi($LC0) 
  j   
$31 
  addiu 
$2,$2,%lo($LC0) 
$L2: 
; leave address of "it is ten" string in $v0 and return: 
  lui  
$2,%hi($LC1) 
  j   
$31 
  addiu    $2,$2,%lo($LC1) 
12.3.5 使用 if/else 替代条件运算符 
const char* f (int a) 
{ 
  if (a==10) 
            return "it is ten"; 
  else  
            return "it is not ten"; 
}; 
启用优化功能之后，GCC 4.8 在编译 x86 程序时能够应用 CMOVcc 指令。 
指令清单 12.25  Optimizing GCC 4.8 
.LC0: 
  .string "it is ten" 
.LC1: 
  .string "it is not ten" 
f: 
.LFB0: 
; compare input value with 10 
  cmp  
DWORD PTR [esp+4], 10 
  mov  
edx, OFFSET FLAT:.LC1 ; "it is not ten" 
  mov  
eax, OFFSET FLAT:.LC0 ; "it is ten" 
; if comparison result is Not Equal, copy EDX value to EAX 
; if not, do nothing 
  cmovne eax, edx 
  ret 
Optimizing Keil 编译的 ARM 程序，与指令清单 12.21 相同。 
但是启用优化功能的 MSVC 2012 仍然没有什么起色。 
12.3.6 总结 
启用优化功能之后，编译器会尽可能地避免使用条件转移指令。本书的 33.1 节将详细讲解这个问题。 
12.4 比较最大值和最小值 
12.4.1 32 位 
int my_max(int a, int b) 
{ 
  if (a>b) 
return a; 
  else 
return b; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 12 章  条件转移指令 
121 
}; 
int my_min(int a, int b) 
{ 
  if (a=B) return R1 (B): 
  MOVS      r0,r1 
|L0.14| 
; return 
  BX        lr 
  ENDP 
两个函数所用的转移指令不同：一个是 BGT，而另一个是 BLT。 
在编译 ARM 模式程序时，编译器可能会使用条件执行指令（即“有分支”指令）。这种程序会显得更
为短小。在编译条件表达式时，Keil 编译器使用了 MOVcc 指令。 
指令清单 12.28  Optimizing Keil 6/2013 (ARM mode) 
my_max PROC 
; R0=A 
; R1=B 
; compare A and B: 
  CMP       r0,r1 
; return B instead of A by placing B in R0 
; this instruction will trigger only if AB), A is still in R0 register 
  MOVLE     r0,r1 
  BX        lr 
  ENDP 
my_min PROC 
; R0=A 
; R1=B 
; compare A and B: 
  CMP       r0,r1 
; return B instead of A by placing B in R0 
; this instruction will trigger only if A>=B (hence, GE - Greater or Equal) 
; if instruction is not triggered (in case of A=B, load A value into EAX 
; the instruction idle if otherwise (if AB) 
  cmovle  eax, edx 
  ret 
12.4.2 64 位 
#include  
int64_t my_max(int64_t a, int64_t b) 
{ 
  if (a>b) 
return a; 
  else 
return b; 
}; 
int64_t my_min(int64_t a, int64_t b) 
{ 
  if (a<b) 
return a; 
  else 
return b; 
}; 
虽然编译出来的程序里存在不必要的数据交换，但是代码功能一目了然。 
指令清单 12.30  Non-optimizing GCC 4.9.1 ARM64 
my_max: 
  sub     sp, sp, #16 
  str     x0, [sp,8] 
  str     x1, [sp] 
  ldr     x1, [sp,8] 
  ldr     x0, [sp] 
  cmp     x1, x0 
  ble     .L2 
  ldr     x0, [sp,8] 
  b       .L3  
.L2: 
  ldr     x0, [sp] 
.L3: 
  add     sp, sp, 16 
  ret 
my_min: 
  sub     sp, sp, #16 
  str     x0, [sp,8] 
  str     x1, [sp] 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
124 
逆向工程权威指南（上册） 
  ldr     x1, [sp,8] 
  ldr     x0, [sp] 
  cmp     x1, x0 
  bge     .L5 
  ldr     x0, [sp,8] 
  b       .L6  
.L5: 
  ldr     x0, [sp] 
.L6: 
  add     sp, sp, 16 
  ret 