Data Returns to Users: 
Practical Insights into User-facing Real-Time Analytics with Apache Pinot 
Xiang Fu
PMC, Apache Pinot
Co-Founder, StarTree
| Talk Structure | Talk Structure |
|---|---|
| ● |Rise of Real-time OLAP |
| ● |Layered Comparison of Real-time OLAP Databases |
| ● |Path towards Cloud Native |
| ● |SaaS Solution on Apache Pinot |
Value of Data over Time
Past >> Present >> FuturePast >> Present >> Future
Past — Present
Present — Future
| SQL Editors 
Dashboard | SQL Editors 
Dashboard | Analytical Data Apps 
latency-sensitive | Analytical Data Apps 
latency-sensitive |
|---|---|---|---|
| Analysts |Operators |Users |Customers |
Internal Facing Analytics
User Facing Analytics
Pushing the Boundaries of Real-time Analytics
| ● | Real-Time analytics landscape is rapidly changing. | User-Facing Analytics ||---|---|---|
| ● |Internal-Facing Analytics |User-Facing Analytics |
| ● |Structured Data |Semi-Structured Data |
Approximate Data / Query 
Consistency
Slice-and-Dice Queries
Strong Data / Query 
Consistency
Full-SQL semantics 
GB-to-TB of Data 	TB-to-PB of Data
Niche Use Cases 	Explosion of Use Cases
Rise of User-Facing Analytics
INTERNAL ANALYTICS Future USER-FACING ANALYTICS
Today 	ConsumersToday 	Consumers
Partners
| Dashboards  | Dashboards  | Freshness | Internal  | Your  | Customers | Data Apps | Data Apps |
|---|---|---|---|---|---|---|---|
| Dashboards  |Dashboards  |Freshness |Users |Your  |Customers |Data Apps |Data Apps |
| Dashboards  |Dashboards  |Freshness |Users |Company |Customers |Data Apps |Data Apps |
| ● |Multiple Tools |Freshness |Days |Minutes |Seconds |● |Live || ● |Information Overload |Freshness |Days |Minutes |Seconds |● |Simple and contextual |
| ● |Limited Audience |Freshness |Days |Minutes |Seconds |● |Everyone |
| ● |Limited Audience |Latency |Minute |Seconds |Milliseconds |● |Everyone |
| ● |Limited Audience |Concurrency |1  User |1 0’s |1 00’s - Millions |● |Everyone |
Semi-Structured Data Support
Structured Data
Semi-Structured Data Semi-Structured DataPre-Process
OLAP
OLAP
Strong Data/Query Consistency
| Real-Time | OLAP | Real-Time | OLAP | Upserts |
|---|---|---|---|---|
| Real-Time |OLAP |Insert + Updates +  |OLAP |Upserts |
| Insert |OLAP |Insert + Updates +  |OLAP |Upserts |
| Insert |OLAP |Deletes |OLAP |Upserts |
Best Effort Queries 
(Double Counting)
Accurate Business Metrics
FULL SQL Semantics
OLAP 	OLAP
OLAP Queries 	Full SQL Semantics!OLAP Queries 	Full SQL Semantics!
| ● | Aggregations | ● | OLAP Queries |
|---|---|---|---|
| ● |Order By |● |Nested Queries |
| ● |Group By |● |Joins |
| ● |UDFs |● |Window functions |
Data-Size Explosion
OLAP Data Nodes $$$$
Compute
Local Storage
GBs - TBs
of Data
| Data-Size Explosion - Tiered Storage | Data-Size Explosion - Tiered Storage | OLAP Data Nodes | $$ |
|---|---|---|---||---|---|---|---|
| OLAP Data Nodes |$$$$ |OLAP Data Nodes |$$ |
Compute
Compute 
	Local Storage
| Local Storage | TBs - PBs | Cloud Storage | $ |
|---|---|---|---|
| Local Storage |of Data |Cloud Storage |$ |
| GBs - TBs |of Data |Cloud Storage |$ |
| of Data |of Data |Cloud Storage |$ |
Typical Data Analytics Stack
| The three real-time OLAP databases | The three real-time OLAP databases | The three real-time OLAP databases |  ||---|---|---|---|
| Open Source Database | | | ClickHouse |
| Open Source Database |Apache Pinot |Apache Druid | ClickHouse |
| Commercial DBaaS  |  |  |  |
|---|---|---|---|
| Product Offering | | | |
| Product Offering |StarTree Cloud |Imply |ClickHouse Cloud |
High-level Architecture Overview
| Apache Pinot | Apache Druid | Apache Druid |
|---|---|---|
|  | | |
|  | |ClickHouse ||  | | |
|  | |ClickHouse |
| Architecture Overview Summary | Architecture Overview Summary | Architecture Overview Summary |  |  |
|---|---|---|---|---|
|  | | | | |
|  |Easy getting started experience | | | |
| Separation of  |Better scalability | | | |
| concerns |Better scalability | | | |
| Inbuilt functionality  |More operator friendly | | | |
| for management  |Better no-code experience | | | || and operability |Better no-code experience | | | |
Layer Deep-dives
Layers of a Real-time OLAP Database
Storage
Storage
Columnar 
Encoding and compression Data Layout within Segment
Partitioning
Sorting
Data Layout within 	Data Layout within 
Server 	Cluster
Segment to server assignment 	Storage tiers
Data Layout in Segment & ServersData Layout in Segment & Servers
| High level objective: Better p99 latency, increased throughput | High level objective: Better p99 latency, increased throughput |  |  |  |
|---|---|---|---|---|
|  | | | | |
|  |Pruning at segment / server  | | | |
| level |level | | | |
| Custom Sorting |Better data locality, smarter  | | | |
| encoding |encoding | | | |
| encoding |encoding | |Can only be  | || encoding |encoding | |primary time  | |
| encoding |encoding | |column | |
| Smart data assignment  |Reduce query fanout | | | |
| on serving layer |on serving layer | | | |
Why Data Layout helps
Total segments to process
| Query | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 |
|---|---|---|---|---|---|---|---|---|---|---|---|---|
| Pinot |1 |Server 1 |Server 1 |4 |Server 2 |Server 2 |Server 2 |Server 2 |9 |Server 3 |Server 3 |12 || Pinot |1 |Server 1 |Server 1 |4 |Broker level pruning |Broker level pruning |Broker level pruning |Broker level pruning |9 |Server 3 |Server 3 |12 |
| Broker |1 |Server 1 |Server 1 |4 |Broker level pruning |Broker level pruning |Broker level pruning |Broker level pruning |9 |Server 3 |Server 3 |12 |
| Broker |1 |2 |3 |4 |Broker level pruning |Broker level pruning |Broker level pruning |Broker level pruning |9 |10 |11 |12 || Broker |1 |2 |3 |4 |5 |6 |7 |8 |9 |10 |11 |12 |
Server level pruning
| 1 | 2 | 5 | 6 | 9 | 10 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 |
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|
| 1 |2 |5 |6 |1  1 |12 |5 |6 |7 |8 |9 |10 |11 |12 |
| 3 |4 |7 |8 |1  1 |12 |5 |6 |7 |8 |9 |10 |11 |12 |
| Server 1 |Server 1 |Server 2 |Server 2 |Server 3 |Server 3 |5 |6 |7 |8 |9 |10 |11 |12 |Data Layout on Cluster - Tiered Storage 	Server 1 	Server 2
| SSD | SSD | Server 1 | Server 2 | Server 1 | Server 2 |
|---|---|---|---|---|---|
| SSD |SSD |SSD |SSD |HDD |HDD |
Cloud Object Storage
Tiered Storage using compute node pools and local volumes
Tiered Storage using Cloud Object Storage
| Fully decoupled | Tiered, but still  | 23 |
|---|---|---|
| Fully decoupled |tightly coupled |23 || Real-Time Upserts: Apache Pinot & StarTree | Real-Time Upserts: Apache Pinot & StarTree | Real-Time Upserts: Apache Pinot & StarTree |
|---|---|---|
|  |Design Highlights |Design Highlights |
|  |● |Low Query overhead: Reconciled at  |
|  |ingestion time |ingestion time |
|  |● |Query Performance: Per segment  |
|  |bitmaps help in filtering out obsolete records in an efficient manner |bitmaps help in filtering out obsolete records in an efficient manner ||  |● |Scalability: Billions of primary keys  |
|  |per server and reduced heap usage |per server and reduced heap usage |
Indexing
Filter and aggregation optimizations 
	Total segments to process
| Query | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 |
|---|---|---|---|---|---|---|---|---|---|---|---|---|
| Pinot |1 |Server 1 |Server 1 |4 |Server 2 |Server 2 |Server 2 |Server 2 |9 |Server 3 |Server 3 |12 || Pinot |1 |Server 1 |Server 1 |4 |Broker level pruning |Broker level pruning |Broker level pruning |Broker level pruning |9 |Server 3 |Server 3 |12 |
| Broker |1 |Server 1 |Server 1 |4 |Broker level pruning |Broker level pruning |Broker level pruning |Broker level pruning |9 |Server 3 |Server 3 |12 |
| Broker |1 |2 |3 |4 |Broker level pruning |Broker level pruning |Broker level pruning |Broker level pruning |9 |10 |11 |12 || Broker |1 |2 |3 |4 |5 |6 |7 |8 |9 |10 |11 |12 |
Server level pruning
| 1 | 2 | 5 | 6 | 9 | 10 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 |
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|
| 3 |4 |7 |8 |1  1 |12 |Filter optimizations  |Filter optimizations  |Filter optimizations  |Filter optimizations  |Filter optimizations  |10 |11 |12 || Server 1 |Server 1 |Server 2 |Server 2 |Server 3 |Server 3 |Filter optimizations  |Filter optimizations  |Filter optimizations  |Filter optimizations  |Filter optimizations  |10 |11 |12 |
| Server 1 |Server 1 |Server 2 |Server 2 |Server 3 |Server 3 |Aggregation optimizations |Aggregation optimizations |Aggregation optimizations |Aggregation optimizations |Aggregation optimizations |10 |11 |12 || Indexing | ● | Minimize data scans | Minimize data scans |
|---|---|---|---|
|  |● |Minimize data scans |Minimize data scans |
|  |● |Keep query performance  |Keep query performance  |
|  |● |optimal and predictable |optimal and predictable |
|  |● |○ |High throughput |
|  |● |○ |Growing data size  |
| Index | 
 |  |  |  |
|---|---|---|---|---|
| Inverted |Fast filter | | | || Inverted |Fast filter | | | |
| Sorted |Personalized analytics | | | |
| Range |Range queries | | | |
| JSON |Semi-structured data | | | |
| Geospatial |Location queries | | | |
| Timestamp |Timestamp rollups | | | |
| Text |Log analytics | | | |
| Bloom |Approximate filter | | | |
| Sparse |Approximate filter | | | |
Power of Indexing
Star-tree Index
Star-tree indexStar-tree Index
Star-tree index 
Dimension split order = name, env_id Aggregations = sum(value) 
Max leaf records = 10
| name | env_id | type | value | ts | name | cpu_core | mem | * | * |
|---|---|---|---|---|---|---|---|---|---|
| cpu_core |a357 |... |20 |... |name |cpu_core |mem |* |* |
| mem |57f |... |70 |... |name |cpu_core |mem |instance |* |
| instance |57f |... |12 |... |name |cpu_core |mem |instance |* || cpu_core |57f |... |6 |... |name |cpu_core |mem |instance |* |
| cpu_core |a357 |... |9 |... |name |cpu_core |mem |instance |* |
| … |… |... |... |... |name |cpu_core |mem |instance |* |
< 10 records
env_id
| sum(value) | a357 | 57f | * | a357 | 57f | * | 30 |
|---|---|---|---|---|---|---|---|
| sum(value) |100 |386 |486 |250 |300 |550 |30 |
Star-tree Index
Star-tree indexStar-tree Index
Star-tree index 
Dimension split order = name, env_id Aggregations = sum(value) 
Max leaf records = 10
*
cpu_core *
| a357 | 57f | mem | instance | 57f | * |
|---|---|---|---|---|---|
| a357 |57f |* |a357 |57f |* |
| select sum(value)  | 100 | 386 | 486 | 250 | 300 | 550 | 31 |
|---|---|---|---|---|---|---|---|
| from table |100 |386 |486 |250 |300 |550 |31 || where name = cpu_core and env_id = a357 |100 |386 |486 |250 |300 |550 |31 |
| Materialized View vs Star-tree Index | Materialized View vs Star-tree Index | Materialized View vs Star-tree Index | Materialized View vs Star-tree Index | Materialized View vs Star-tree Index | Materialized View vs Star-tree Index | Materialized View vs Star-tree Index |
|---|---|---|---|---|---|---||---|---|---|---|---|---|---|
|  | | | | | | Materialized View |
|  | | | | |High: | |
|  | |● |Allows tuning space  | |● | |
| overhead |overhead |overhead |overhead |of selected dimensions |of selected dimensions |of selected dimensions |
| Creation/Update overhead | |Low: | | |Low/Moderate: |Low/Moderate: |
| Creation/Update overhead | |● | | |● |Could need internal/external  || data preprocessing workflow |data preprocessing workflow |data preprocessing workflow |data preprocessing workflow |data preprocessing workflow |data preprocessing workflow |data preprocessing workflow |
| Query overhead | |Low: |Engine picks right index  | |Low/Moderate: |Low/Moderate: |
| Query overhead | |● |Engine picks right index  | |● |Queries need to target a  || under the hood |under the hood |under the hood |under the hood |specific view |specific view |specific view |
Query