Zero Bugs Found? Hold My Beer AFL! How to Improve 
Coverage-guided Fuzzing and Find New Zero-days in Tough 
Targets 
Maksim Shudrak 
Security Researcher 
Salesforce  
 DEF CON 27 
About me 
●
Offensive Security Researcher at Salesforce Red Team 
●
Projects: 
○
EAOS: Extremely Abstract Operating System for Malware Analysis (at 
IBM Research 2015-2017) 
○
drAFL: AFL + DynamoRIO = fuzzing binaries with no source code on 
Linux (spare time) https://github.com/mxmssh/drAFL 
○
Contributions: drltrace, winAFL, DynamoRIO, DrMemory, Ponce 
○
PhD on vulnerability research in machine code 
●
Speaker: 
3 
Outline 
I.   Introduction 
II.  What is coverage-guided fuzzing ? 
III. Downsides of AFL and similar fuzzers 
IV.  Introducing Manul 
V.   DEMO 
VI.  Case Studies + Vulnerabilities 
VII. Conclusion & Future Work 
4 
What is Fuzzing? 
5 
AAAAA 
What is Fuzzing? 
6 
AAAAA 
What is Fuzzing? 
7 
BAAAA 
What is Fuzzing? 
8 
CAAAA 
What is Fuzzing? 
9 
PAAAA 
What is Fuzzing? 
10 
PWNIT 
What is Fuzzing? 
11 
PWNIT 
Very unlikely! 
What is Coverage-Guided Fuzzing? 
12 
AAAAA 
What is Coverage-Guided Fuzzing? 
13 
AAAAA 
What is Coverage-Guided Fuzzing? 
14 
BAAAA 
What is Coverage-Guided Fuzzing? 
15 
CAAAA 
What is Coverage-Guided Fuzzing? 
16 
PAAAA 
What is Coverage-Guided Fuzzing? 
17 
AAAAA 
PAAAA 
Input queue 
What is Coverage-Guided Fuzzing? 
18 
AAAAA 
PBAAA 
Input queue 
What is Coverage-Guided Fuzzing? 
19 
AAAAA 
PCAAA 
Input queue 
What is Coverage-Guided Fuzzing? 
20 
AAAAA 
PWAAA 
Input queue 
What is Coverage-Guided Fuzzing? 
21 
AAAAA 
PAAAA 
Input queue 
PWAAA 
What is Coverage-Guided Fuzzing? 
22 
AAAAA 
PAAAA 
Input queue 
PWBAA 
What is Coverage-Guided Fuzzing? 
23 
AAAAA 
PAAAA 
Input queue 
PWNAA 
What is Coverage-Guided Fuzzing? 
24 
AAAAA 
PAAAA 
Input queue 
PWNAA 
PWNBA 
What is Coverage-Guided Fuzzing? 
25 
AAAAA 
PAAAA 
Input queue 
PWNAA 
PWNIA 
What is Coverage-Guided Fuzzing? 
26 
AAAAA 
PAAAA 
Input queue 
PWNAA 
PWNIA 
PWNIB 
What is Coverage-Guided Fuzzing? 
27 
AAAAA 
PAAAA 
Input queue 
PWNAA 
PWNIA 
PWNIC 
What is Coverage-Guided Fuzzing? 
28 
AAAAA 
PAAAA 
Input queue 
PWNAA 
PWNIA 
PWNIT 
American Fuzzy Lop aka AFL 
29 
https://habr.com/ru/company/dsec/blog/449134/ 
30 
31 
32 
33 
Most Popular Languages in July 2019 
34 
https://www.tiobe.com/tiobe-index/ 
Fuzzing is Very Hot Today! 
35 
# of publications 
OSS-Fuzz Project 
●
~160 open-source projects 
●
~half-trillion test cases per week 
Open Issues Count per Month 
36 
Downsides. Volatile Paths 
37 
AAAAAAAAA 
Downsides. Volatile Paths 
38 
AAAAAAAAA 
ABAAAAAAA 
Downsides. Volatile Paths 
39 
AAAAAAAAA 
ABAAAAAAA 
ABAAAAAAA 
Downsides. Volatile Paths 
40 
AAAAAAAAA 
ABAAAAAAA 
ABAAAAAAA 
Downsides. Volatile Paths 
41 
ABAAAAAAA 
ABAAAAAAA 
Downsides. Volatile Paths 
42 
Downsides. Parallelization algorithm 
●
Parallelization is an obvious solution to speed up fuzzing and find 
more bugs. 
●
AFL was not designed to be parallel fuzzer 
43 
AFL master folder 
AFL slave #1 
AFL slave #2 
Downsides. Parallelization algorithm 
●
Parallelization is an obvious solution to speed up fuzzing and find 
more bugs. 
●
AFL was not designed to be parallel fuzzer 
44 
AFL master folder 
AFL slave #1 
AFL slave #2 
Downsides. Parallelization algorithm 
●
Parallelization is an obvious solution to speed up fuzzing and find 
more bugs. 
●
AFL was not designed to be parallel fuzzer 
45 
AFL master folder 
AFL slave #1 
AFL slave #2 
Downsides. Parallelization algorithm 
●
Parallelization is an obvious solution to speed up fuzzing and find 
more bugs. 
●
AFL was not designed to be parallel fuzzer 
46 
AFL master folder 
AFL slave #1 
AFL slave #2 
Downsides. Parallelization algorithm 
●
Parallelization is an obvious solution to speed up fuzzing and find 
more bugs. 
●
AFL was not designed to be parallel fuzzer 
47 
AFL master folder 
AFL slave #1 
AFL slave #2 
Network apps fuzzing. Current situation 
48 
● Linux: 
○ AFL’s forks, honggfuzz and blind fuzzers 
● Windows 
○ winAFL network mode 
● OS X 
○ honggfuzz? 
Windows applications fuzzing 
49 
winAFL 
clang (libfuzzer/honggfuzz) 
OS X applications fuzzing 
● Source code is required. Target should be able 
to compile with clang 
● DynamoRIO has no official support of OS X 
● Intel PIN has partial OS X support 
50 
Some Related Works & Tools 
●
The author is not the first one who wants to improve AFL. 
○
Userland: AFLSmart, AFLFast, winAFL, libfuzzer, driller, QSYM and others. 
○
Kernel: syzkaller, kAFL, TriforceAFL and others. 
●
Systematic research on all existing fuzzers: 
○
Valentin J.M. Manes, Hyung Seok Han, Choongwoo Han, Sang Kil Cha, Manuel Egele, Edward 
J. Schwartz, Maverick Woo Fuzzing: Art, Science, and Engineering. arXiv:1812.00140 
preprint. 
●
Some Presentations at DEF CON/BlackHat: 
○
Mateusz Jurczyk. Effective File Format Fuzzing - Thoughts, Techniques and 
Results. BlackHat EU London. 2016. 
○
Kang Li. AFL's Blindspot and How to Resist AFL Fuzzing for Arbitrary ELF 
Binaries. BlackHat USA 2018. 
○
Jonathan Metzman. Going Beyond Coverage-Guided Fuzzing with Structured 
Fuzzing. Black Hat USA 2019. 
51 
State-of-the-art Userland Fuzzers 
52 
AFL 
winAFL 
HongFuzz 
libFuzzer 
Desired fuzzer 
Network fuzzing 
No (Unix) 
Yes (Windows) 
Yes 
No 
Yes  
(all platforms) 
Volatile Paths 
No 
No 
No 
Yes 
Multiple Mutation 
Strategies 
No 
No 
No 
Yes 
Share over network 
Partial 
No 
No 
Yes 
Supported Platform 
Linux 
Windows 
Open/NetBSD 
GNU/Linux 
Windows/Cygwin 
Android 
OS X 
Anywhere where 
LLVM exist 
Anywhere where 
Python exist 
Language 
C 
C 
C 
Python 
●
Manul - an open-source fuzzer written in pure Python. 
○
Easy-to-use, pull and run concept. 
○
Coverage-guided fuzzing using AFL-GCC or DBI (Intel Pin or DynamoRIO). 
○
Parallel fuzzing is a basic feature. 
○
Default mutators. 
○
Third-party data mutators (Radamsa + AFL currently supported). 
○
Network fuzzing is supported by default. 
○
Blackbox binaries fuzzing. 
○
Supported: Linux, MacOS (beta) and Windows or any other OS where Python  
exist. 
Manul Overview 
53 
Why Manul? 
54 
Pallas’s Cat (lat. Otocolobus Manul) 
Manul Architecture 
55 
Mutators 
(plugins) 
Target 
Instrumentation 
module 
User Interface 