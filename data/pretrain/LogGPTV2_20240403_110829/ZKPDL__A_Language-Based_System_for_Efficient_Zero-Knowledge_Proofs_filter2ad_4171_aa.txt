title:ZKPDL: A Language-Based System for Efficient Zero-Knowledge Proofs
and Electronic Cash
author:Sarah Meiklejohn and
C. Christopher Erway and
Alptekin K&quot;upç&quot;u and
Theodora Hinkle and
Anna Lysyanskaya
ZKPDL: A Language-Based System for Efﬁcient Zero-Knowledge Proofs
and Electronic Cash
Sarah Meiklejohn
University of California, San Diego
C. Chris Erway
Brown University
Alptekin Küpçü
Brown University
smeiklej@ cs.ucsd.edu
cce@ cs.brown.edu
kupcu@ cs.brown.edu
Theodora Hinkle
University of Wisconsin, Madison
thea@ cs.wisc.edu
Anna Lysyanskaya
Brown University
anna@ cs.brown.edu
Abstract
In recent years, many advances have been made in
cryptography, as well as in the performance of commu-
nication networks and processors. As a result, many ad-
vanced cryptographic protocols are now efﬁcient enough
to be considered practical, yet research in the area re-
mains largely theoretical and little work has been done
to use these protocols in practice, despite a wealth of po-
tential applications.
This paper introduces a simple description language,
ZKPDL, and an interpreter for this language. ZKPDL
implements non-interactive zero-knowledge proofs of
knowledge, a primitive which has received much atten-
tion in recent years. Using our language, a single pro-
gram may specify the computation required by both the
prover and veriﬁer of a zero-knowledge protocol, while
our interpreter performs a number of optimizations to
lower both computational and space overhead.
Our motivating application for ZKPDL has been the
efﬁcient implementation of electronic cash. As such,
we have used our language to develop a cryptographic
library, Cashlib, that provides an interface for using e-
cash and fair exchange protocols without requiring ex-
pert knowledge from the programmer.
1
Introduction
Modern cryptographic protocols are complicated,
computationally intensive, and, given their security re-
quirements, require great care to implement. However,
one cannot expect all good cryptographers to be good
programmers, or vice versa. As a result, many newly pro-
posed protocols—often described as efﬁcient enough for
deployment by their authors—are left unimplemented,
despite the potentially useful primitives they offer to sys-
tem designers. We believe that a lack of high-level soft-
ware support (such as that provided by OpenSSL, which
provides basic encryption and hashing) presents a barrier
to the implementation and deployment of advanced cryp-
tographic protocols, and in this work attempt to remove
this obstacle.
One particular area of recent cryptographic research
which has applications for privacy-preserving systems is
zero-knowledge proofs [47, 46, 17, 39], which provide
a way of proving that a statement is true without re-
vealing anything beyond the validity of the statement.
Among the applications of zero-knowledge proofs are
electronic voting [49, 56, 38, 51], anonymous authenti-
cation [21, 36, 62], anonymous electronic ticketing for
public transportation [50], veriﬁable outsourced compu-
tation [9, 43], and essentially any system in which hon-
esty needs to be enforced without sacriﬁcing privacy.
Much recent attention has been paid to protocols based
on anonymous credentials [30, 35, 24, 26, 11, 8], which
allow users to anonymously prove possession of a valid
credential (e.g., a driver’s license), or prove relationships
based on data associated with that credential (e.g., that a
user’s age lies within a certain range) without revealing
their identity or other data. These protocols also prevent
the person verifying a credential and the credential’s is-
suer from colluding to link activity to speciﬁc users. As
corporations and governments move to put an increas-
ing amount of personal information online, the need for
efﬁcient privacy-preserving systems has become increas-
ingly important and a major focus of recent research.
Another application of zero-knowledge proofs is elec-
tronic cash. The primary aim of our work has been to
enable the efﬁcient deployment of secure, anonymous
electronic cash (e-cash) in network applications. Like
physical coins, e-coins cannot be forged; furthermore,
given two e-coins it is impossible to tell who spent them,
or even if they came from the same user. For this rea-
son, e-cash holds promise for use in anonymous settings
and privacy-preserving applications, where free-riding
by users may threaten a system’s stability.
Actions in any e-cash system can be characterized
as in Figure 1. There are two centralized entities: the
bank and the arbiter. The bank keeps track of users’ ac-
implement privacy-preserving protocols. We also pro-
vide a library, Cashlib, that builds upon our language to
provide simple access to cryptographic protocols such as
electronic cash, blind signatures, veriﬁable encryption,
and fair exchange.
The design and implementation of our language and
library were motivated by collaborations with systems
researchers interested in employing e-cash in high-
throughput applications, such as the P2P systems de-
scribed earlier. The resulting performance concerns, and
the complexity of the protocols required, motivated our
library’s focus on performance and ease of use for both
the cryptographers designing the protocols and the sys-
tems programmers charged with putting them into prac-
tice. These twin concerns led to our language-based ap-
proach and work on the interpreter.
The high-level nature of our language brings two ben-
eﬁts. First, it frees the programmer from having to worry
about the implementation of cryptographic primitives,
efﬁcient mathematical operations, generating and pro-
cessing messages, etc.; instead, ZKPDL allows the spec-
iﬁcation of a protocol in a manner similar to that of theo-
retical descriptions. Second, it allows our library to make
performance optimizations based on analysis of the pro-
tocol description itself.
ZKPDL permits the speciﬁcation of many widely-
used zero-knowledge proofs. We also provide an in-
terpreter that generates and veriﬁes proofs for protocols
described by our language. The interpreter performs
optimizations such as precomputation of expected ex-
ponentiations, translations to prevent redundant proofs,
and caching compiled versions of programs to be loaded
when they are used again on different inputs. More de-
tails on these optimizations are provided in Section 4.2.
Our e-cash library, Cashlib, described in Section 6, sits
atop our language to provide simple access to higher-
level cryptographic primitives such as e-cash [27], blind
signatures [25], veriﬁable encryption [28], and optimistic
fair exchange [10, 52]. Because of the modular nature of
our language, we believe that the set of primitives pro-
vided by our library can be easily extended to include
other zero-knowledge protocols.
Finally, we hope that our efforts will encourage pro-
grammers to use (and extend) our library to implement
their cryptographic protocols, and that our language will
make their job easier; we welcome contribution by our
fellow researchers in this effort. Documentation and
source code for our library can be found online at http:
//github.com/brownie/cashlib.
Figure 1: An overview of the entities involved in our e-cash
system. Users may engage in buy or barter transactions, with-
draw and deposit coins as necessary, and consult the arbiter for
resolution only in the case of a dispute.
count balances, lets the users withdraw money, and ac-
cepts coin deposits. The arbiter (a trusted third party) re-
solves any disputes that arise between users in the course
of their fair exchanges. Once the users have obtained
money from the bank, they are free to exchange coins for
items (or just barter for items) and in this way create an
economy.
In previous work [10] we describe a privacy-
preserving P2P system based on BitTorrent that uses our
e-cash and fair exchange protocols to incentivize users
to share data. Here, the application of e-cash provides
protection against selﬁsh peers, as well as an incentive
to upload for peers who have completed their download
and thus have no need to continue participating. This
system has been realized by our work on the Buy and
Barter protocols, described in Section 6.2, which allow
a user to fairly exchange e-coins for blocks of data, or
barter one block of data for another.
These e-cash protocols can also be used for payments
in other systems that face free-riding problems, such as
anonymous onion routing [27]. In such a system, routers
would be paid for forwarding messages using e-cash,
thus providing incentives to route trafﬁc on behalf of oth-
ers in a manner similar to that proposed by Androulaki et
al. [2]. Since P2P systems like these require each user to
perform many cryptographic exchanges, the need to pro-
vide high performance for repeated executions of these
protocols is paramount.
1.1 Our contribution
In this paper, we hope to bridge the gap between de-
sign and deployment by providing a language, ZKPDL
(Zero-Knowledge Proof Description Language), that en-
ables programmers and cryptographers to more easily
2 Cryptographic Background
There are two main modern cryptographic primitives
used in our framework: commitment schemes and zero-
knowledge proofs. Brieﬂy, a commitment scheme can
be thought of as cryptographically analogous to an enve-
lope. When a user Alice wants to commit to a value, she
puts the value in the envelope and seals it. Upon receiv-
ing a commitment, a second user Bob cannot tell which
value is in the envelope; this property is called hiding (in
this analogy, let’s assume Alice is the only one who can
open the envelope). Furthermore, because the envelope
is sealed, Alice cannot sneak another value into the enve-
lope without Bob knowing: this property is called bind-
ing. To eventually reveal the value inside the envelope,
all Alice has to do is open it (cryptographically, she does
this by revealing the private value and any randomness
used to form the commitment; this collection of values is
aptly referred to as the opening of the commitment). We
employ both Pedersen commitments [65] and Fujisaki-
Okamoto commitments [42, 37], which rely on the secu-
rity of the Discrete Log assumption and the Strong RSA
assumption respectively.
Zero-knowledge proofs [47, 46] provide a way of
proving that a statement is true to someone without that
person learning anything beyond the validity of the state-
ment. For example, if the statement were “I have access
to this sytem” then the veriﬁer would learn only that I
really do have access, and not, for example, how I gain
access or what my access code is. In our library, we make
use of sigma proofs [34], which are three-message proofs
that achieve a weaker variant of zero-knowledge known
as honest-veriﬁer zero-knowledge. We do not implement
sigma protocols directly; instead, we use the Fiat-Shamir
heuristic [41] that transforms sigma protocols into non-
interactive (fully) zero-knowledge proofs, secure in the
random oracle model [13].
A primitive similar to zero-knowledge is the idea of a
proof of knowledge [12], in which the prover not only
proves that a statement is true, but also proves that it
knows a reason why the statement is true. Extending
the above example, this would be equivalent to proving
the statement “I have access to the system, and I know a
password that makes this true.”
In addition to these cryptographic primitives, our li-
brary also makes uses of hash functions (both univer-
sal one-way hashes [61] and Merkle hashes [60]), digital
signatures [48], pseudo-random functions [45], and sym-
metric encryption [33]. The security of the protocols in
our library relies on the security of each of these individ-
ual components, as well as the security of any commit-
ment schemes or zero-knowledge proofs used.
3 Design
The design of our library and language arose from our
initial goal of providing a high-performance implemen-
tation of protocols for e-cash and fair exchange for use
in applications such as those described in the introduc-
tion. For these applications, the need to support many
repeated interactions of the same protocol efﬁciently is a
paramount concern for both the bank and the users. In the
bank’s case, it must conduct withdraw and deposit pro-
tocols with every user in the system, while in the user’s
case it is possible that a user would want to conduct many
transactions using the same system parameters.
Motivated by these performance requirements, we ini-
tially developed a more straightforward implementation
of our protocols using C++ and GMP [44], but found
that our ability to modify and optimize our implementa-
tion was hampered by the complexity of our protocols.
High-level changes to protocols required signiﬁcant ef-
fort to re-implement; meanwhile, potentially useful per-
formance optimizations became difﬁcult to implement,
and there was no way to easily extend the functionality
of the library.
Figure 2: Usage of a ZKPDL program: the same program is
compiled separately by the prover and veriﬁer, who may also
be provided with a set of ﬁxed public parameters. This pro-
duces an Interpreter object, which can be used by the prover to
prove to a veriﬁer that his private values satisfy a certain set of
relationships. Serialization and processing of proof messages
are provided by the library. Once compiled, an interpreter can
be re-used on different private inputs, using the same public
parameters that were originally provided.
These difﬁculties led to our current design, illustrated
in Figure 2. Our system allows a pseudocode-like de-
scription of a protocol to be developed using our descrip-
tion language, ZKPDL. This program is compiled by our
interpreter, and optionally provided a list of public pa-
rameters, which are “compiled in” to the program. At
compile time, a number of transformations and optimiza-
tions are performed on the abstract syntax tree produced
by our parser, which we developed using the ANTLR
parser generator [64]. Once compiled, these interpreter
objects can be used repeatedly by the prover to generate
zero-knowledge proofs about private values, or by the
VeriﬁerProverZKPDL ProgramInterpreter ProverInterpreter Veriﬁercompile()public values (security parameters, public keys, groups, generators, etc)private values to be provedZKProofMessageProof veriﬁed? (true/false)serializationveriﬁer to verify these proofs.
Key to our approach is the simplicity of our language.
It is not Turing-complete and does not allow for branch-
ing or conditionals; it simply describes the variables,
equations, and relationships required by a protocol, leav-
ing the implementation details up to the interpreter and
language framework. This framework, described in the
following section, provides C++ classes that parse, ana-
lyze, optimize, and interpret ZKPDL programs, employ-
ing many common compiler techniques (e.g., constant
substitution and propagation, type-checking, providing
error messages when undeﬁned variables are used, etc.)
in the process. We are able to understand and transform
mathematical expressions into forms that provide better
performance (e.g., through techniques for ﬁxed-base ex-
ponentiation), and recognize relationships between val-
ues to be proved in zero-knowledge. All of these low-
level optimizations, as well as our high-level primitives,
should enable a programmer to quickly implement and
evaluate the efﬁciency of a protocol.
We also provide a number of C++ classes that wrap
ZKPDL programs into interfaces for generating and ver-
ifying proofs, as well as marshaling them between com-
puters. We build upon these wrappers to additionally
provide Cashlib, a collection of interfaces that allows a
programmer to assume the role of buyer, seller, bank,
or arbiter in a fair exchange system based on endorsed
e-cash [27], as seen in Figure 1 and described in Sec-
tion 5.3.
4
Implementation of ZKPDL
To enable implementation of the cryptographic prim-
itives discussed in Section 2, we have designed a pro-
gramming language for specifying zero-knowledge pro-
tocols, as well as an interpreter for this language. The
interpreter is implemented in C++ and consists of ap-
proximately 6000 lines of code. On the prover side, the
interpreter will output a zero-knowledge proof for the re-
lations speciﬁed in the program; on the veriﬁer side, the
interpreter will be given a proof and verify whether or
not it is correct. Therefore, the output of the interpreter
depends on the role of the user, although the program
provided to the interpreter is the same for both.
4.1 Overview
Here we provide a brief overview of some fundamen-
tal language features to give an idea of how programs are
written; a full grammar for our language, containing all
of its features, can be found in our documentation avail-
able online, and further sample programs can be found
in Section 5. A program can be broken down into two
blocks: a computation block and a proof block. Each of
these blocks is optional: if a user just wants a calculator
for modular (or even just integer) arithmetic then he will
specify just the computation block; if, on the other hand,
he has all the input values pre-computed and justs wants a
zero-knowledge proof of relations between these values,
he will specify just the proof block. Here is a sample pro-
gram written in our language (indentations are included
for readability, and are not required syntax).
sample.zkp
given: // declarations
compute: // declarations and assignments
group: G = 
exponents in G: x[2:3]
random exponents in G: r[1:3]
x_1 := x_2 * x_3
for(i, 1:3, c_i := g^x_i * h^r_i)
1 computation: // compute values required for proof
2
3
4