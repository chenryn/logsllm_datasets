.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLFAQ3 1"
.TH PERLFAQ3 7 "2003-11-25" "perl v5.8.3" "Perl Programmers Reference Guide"
.SH "NAME"
perlfaq3 \- 编程工具 (2003/11/24 19:55:50)
.SH "DESCRIPTION 描述"
.IX Header "DESCRIPTION"
编程工具和编程支持
.Sh "我如何作 (任何事)?"
.IX Subsection "How do I do (anything)?"
你到 CPAN（见 perlfaq2）找过了吗?也许别人已经写了某个模组可以解决你的问题。你查过相关的说明文件了吗 (man pages)?以下是一份概要的索引:
.PP
.Vb 12
\&        基础Basics          perldata, perlvar, perlsyn, perlop, perlsub
\&        执行Execution       perlrun, perldebug
\&        函数Functions       perlfunc
\&        对象Objects         perlref, perlmod, perlobj, perltie
\&        数据结构Data Structures perlref, perllol, perldsc
\&        模块Modules         perlmod, perlmodlib, perlsub
\&        正则表达式Regexes         perlre, perlfunc, perlop, perllocale
\&        移植Moving to perl5 perltrap, perl
\&        连接Linking w/C     perlxstut, perlxs, perlcall, perlguts, perlembed
\&        其他Various         http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz
\&                        (这不是一个手册页，但是仍然很有用
\&                         是有关 Perl 技术的大量技巧)
.Ve
.PP
perltoc里有一份粗略的 perl 说明文件组的目录
.Sh "如何以交互的方式使用 Perl?"
.IX Subsection "How can I use Perl interactively?"
典型的作法是使用 perldebug(1)说明文件里提到的 Perl 除虫器，在一个“空的”（译者：即不存在的）程式上执行，像这样：
.PP
.Vb 1
\&    perl -de 42
.Ve
.PP
接下来所打入的任意合法 Perl程式码皆会立刻被计算。同时，你可以检查符号表 (symbol table)、取得堆叠的记录 (stack backtraces)、检视变数值、设定阻断点 (set breakpoints) 以及其他符号式除虫器 (symbolic debuggers) 所能作的动作。
.Sh "有 Perl shell吗?"
.IX Subsection "Is there a Perl shell?"
The psh (Perl sh) is currently at version 1.8. The Perl Shell is a
shell that combines the interactive nature of a Unix shell with the
power of Perl. The goal is a full featured shell that behaves as
expected for normal shell activity and uses Perl syntax and
functionality for control-flow statements and other things.
You can get psh at http://www.focusresearch.com/gregor/psh/ .
.PP
Zoidberg is a similar project and provides a shell written in perl,
configured in perl and operated in perl. It is intended as a login shell
and development environment. It can be found at http://zoidberg.sf.net/
or your local \s-1CPAN\s0 mirror.
.PP
The Shell.pm module (distributed with Perl) makes Perl try commands
which aren't part of the Perl language as shell commands.  perlsh
from the source distribution is simplistic and uninteresting, but
may still be what you want.
.Sh "怎样查找我的系统中安装了哪些模块？"
.IX Subsection "How do I find which modules are installed on my system?"
You can use the ExtUtils::Installed module to show all
installed distributions, although it can take awhile to do
its magic.  The standard library which comes with Perl just
shows up as \*(L"Perl\*(R" (although you can get those with
Module::CoreList).
.PP
.Vb 1
\&        use ExtUtils::Installed;
.Ve
.PP
.Vb 2
\&        my $inst    = ExtUtils::Installed->new();
\&        my @modules = $inst->modules();
.Ve
.PP
If you want a list of all of the Perl module filenames, you
can use File::Find::Rule.
.PP
.Vb 1
\&        use File::Find::Rule;
.Ve
.PP
.Vb 1
\&        my @files = File::Find::Rule->file()->name( '*.pm' )->in( @INC );
.Ve
.PP
If you do not have that module, you can do the same thing
with File::Find which is part of the standard library.
.PP
.Vb 2
\&    use File::Find;
\&    my @files;
.Ve
.PP
.Vb 2
\&    find sub { push @files, $File::Find::name if -f _ && /\e.pm$/ },
\&         @INC;
.Ve
.PP
.Vb 1
\&        print join "\en", @files;
.Ve
.PP
If you simply need to quickly check to see if a module is
available, you can check for its documentation.  If you can
read the documentation the module is most likely installed.
If you cannot read the documentation, the module might not
have any (in rare cases).