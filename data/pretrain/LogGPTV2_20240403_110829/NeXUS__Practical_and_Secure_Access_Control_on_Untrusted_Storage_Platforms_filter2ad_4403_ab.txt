service implicitly. Users interact with their data via their local
ﬁle system API, thus allowing arbitrary applications on their
systems to access and operate on the remotely stored data.
Beyond normal ﬁle system access, many services also provide
auxiliary sharing capabilities with other users of the service.
Within this context, we aim to provide users with additional
protections against unauthorized disclosure or modiﬁcation of
their ﬁles without hindering their ability to share these ﬁles
with other authorized users.
A. Scope, Assumptions, and Threat Model
Security objective. Unless granted explicit access by the
owner, a ﬁle’s contents must be inaccessible to unauthorized en-
tities and tamper-evident. In this case, unauthorized entities may
include other users of the storage service, entities monitoring
communication between the user and the storage service, and
the storage service provider itself. We are concerned solely with
the protection of user-created content: i.e., the conﬁdentiality
and integrity of the contents of ﬁles, ﬁle names, and directory
names; and the integrity of the directory structure itself. The
protection of other ﬁle attributes (e.g, ﬁle size or access patterns)
is considered an orthogonal problem that can be addressed
using other techniques.
Threat model. We consider an attacker who has complete
control of the server (including the OS or hypervisor), and
can thus access or alter any ﬁles stored on the server. The
attacker may also tamper with, delete, reorder, or replay all
network packets exchanged between the server and the client.
Since our primary concern is protecting the conﬁdentiality and
integrity of ﬁle content, we do not consider availability attacks
(e.g., denial-of-service). Since authorized users ultimately gain
EsrvclientserverremotestoragedataclientserverremotestoragedataEsrvserverEcliremotestorageserverclientdataEcliclientserverremotestoragedataaccess to decrypted ﬁle contents, we do not consider client-
side malware that may maliciously leak ﬁles that have been
decrypted by authorized users.
We assume that each user has access to an SGX-enabled CPU
running a commodity OS. The NEXUS enclave is assumed
to be correctly implemented, and free of any security-relevant
vulnerabilities. In addition, we assume the enclave attestation
and memory protection features of the SGX hardware function
properly: i.e., once the enclave’s identity is established, enclave-
provisioned secrets are not accessible from untrusted code.
B. Design Goals
In designing NEXUS, we chose to strike a balance between
security and ease of use with the following aims:
1) Practicality. After an initial setup, the user should be able
to access their data using their typical workﬂow. NEXUS
should be simple and impose minimal key management
on the user. Also, throughout its execution, the overheads
imposed by NEXUS should not signiﬁcantly degrade the
system’s performance.
2) Portability. All changes required to run NEXUS must occur
on the client. NEXUS’s design should be ﬂexible in a way
that allows users to either store data locally, or on a remote
storage platform. This implies no server-side coordination,
and the use of the underlying ﬁlesystem as the NEXUS
metadata store.
This approach closely follows the direction taken by existing
cryptographic ﬁlesystems (e.g., [28, 10, 12]). Our goal is
to offer similar protections with superior key management,
efﬁcient revocation, and no server participation. It is important
to note that NEXUS is not a full-blown standalone ﬁlesystem,
but is designed as a security layer over an existing host
ﬁlesystem. To minimize our TCB, it is essential for the trusted
portion of NEXUS to be small, and its interface minimal. Our
solution must be transparent and adaptable, such that users
can access their protected ﬁles without having to update their
applications, and integrating with various ﬁlesystems should
be possible with moderate effort. Moreover, the distribution
of generated metadata should not require the deployment of
additional services, instead our solution should allow the user
to use their available storage for both ﬁle data and metadata.
Access Control. NEXUS should adopt a standard discre-
tionary approach to access control in which object owners can
specify custom access control policies to selectively dictate
ﬁle access permissions. NEXUS must support standard ﬁle
access rights such as read and write. Administrative control
over a ﬁle’s access permission should remain with the owner,
and enforcement must occur without the cooperation of the
(untrusted) storage service provider. To achieve this, NEXUS
must internalize access control information as part of the
ﬁlesystem state, and enforce access control policies inside
the NEXUS TCB. In addition, NEXUS must ensure that the
unencrypted data contents never leave the TCB unless the
access control policy allows it.
IV. NEXUS
In order to meet the objectives outlined in Section III, we
have designed NEXUS to allow users transparent security
protections on existing ﬁle storage services. The design of
NEXUS is based on the concept of a protected volume, which
is presented to the user as a normal ﬁle system directory.
In order to ensure that the structure and contents of each
volume are only visible to authorized users, NEXUS internally
manages the volume layout in addition to the user’s data. The
entirety of the volume state is stored as a collection of data and
metadata objects that are managed by NEXUS, and tracked
using universally unique identiﬁers (UUIDs). Each object is
stored as a normal data ﬁle on the underlying storage service
using its UUID as the ﬁlename. In effect, NEXUS implements
a virtual ﬁle system on top of the underlying target ﬁle system.
Figure 2 shows a high level NEXUS conﬁguration.
Accessing data from a NEXUS volume consists of the user
issuing ﬁle system requests that are intercepted by NEXUS
and translated into a series of metadata and data operations
that are dispatched to the underlying storage service as ﬁle
operations from the NEXUS enclave. The data retrieved
from the underlying storage service is then routed to the
enclave where it is decrypted and either returned as part of
the original request (data) or used to drive further enclave
operations (metadata). Because NEXUS internally implements
a standard hierarchical ﬁle system in its metadata structures, this
allows NEXUS to be portable across a wide range of storage
service architectures. Both data and metadata are stored as
self-contained objects in NEXUS, thus allowing them to be
stored on a wide variety of potential storage services (including
object-based storage services).
Fig. 2: NEXUS architecture.
The linchpin of data conﬁdentiality and integrity in NEXUS
is an enclave-generated symmetric encryption key called the
volume rootkey. This rootkey allows a NEXUS enclave to
decrypt the volume state and all other encryption keys used
to individually encrypt volume objects. Since it is created by
the enclave, NEXUS is able to access the rootkey only when
running inside a restricted enclave environment. When the
NEXUS enclave is not running, the rootkey is sealed using
SGX (Section II-A2) and stored on the local ﬁlesystem in an
Host ﬁlesystem (AFS)Kernel VFSApplicationNEXUSFilesystem APImetadatabackingstoreStorage APIenclaveshimlayerocallsecalls23145Filesystem Call
Directory Operations
nexus_fs_touch()
nexus_fs_remove()
nexus_fs_lookup()
nexus_fs_filldir()
nexus_fs_symlink()
nexus_fs_hardlink()
nexus_fs_rename()
File Operations
nexus_fs_encrypt()
nexus_fs_decrypt()
Description
Creates a new ﬁle/directory
Deletes ﬁle/directory
Finds a ﬁle by name
Lists directory contents
Creates a symlink
Creates a hardlink
Moves a ﬁle
Encrypts a ﬁle contents
Decrypts a ﬁle contents
TABLE I: NEXUS Filesystem API.
encrypted state that can only be decrypted from inside the
NEXUS enclave running on the same machine that sealed
it. This approach requires that all decryption operations be
performed within the NEXUS enclave (Section II-A1), which
is also able to apply the ﬁle’s access control policy before
exposing the data to the user (Section IV-C). In this way, even
should a user obtain a copy of the enclave and a valid rootkey
for a volume, they would still be unable to access the protected
data unless they also possessed a valid identity that had been
granted access permissions. With this approach, NEXUS is
able to provide sharing capabilities (Section IV-C) using SGX
remote attestation (Section II-A3), where the rootkey may be
accessible to multiple users while still maintaining per-ﬁle
access controls that limit access to a subset of those users.
A. Filesystem Interface
Users access data in NEXUS using standard ﬁle system
interfaces, which are translated into a set of generic API calls
implemented by the NEXUS enclave. This API is shown in
Table I, and consists of 9 operations — 7 directory operations
and 2 ﬁle operations. Each operation takes as a target a ﬁle
or directory stored inside the NEXUS volume. Each target is
represented as a metadata object stored by NEXUS, as well as
a potential data object in the case of ﬁle operations. As part
of each operation, NEXUS traverses the volume’s directory
hierarchy decrypting and performing access control checks at
each layer. This has the side effect of turning single operations
in multiple potential operations on the underlying storage
service. While this does introduce additional overheads, we
show that these are acceptable for most use cases. In addition,
NEXUS contains a number of performance optimizations to
limit the impact of these overheads (Section V).
Next, we describe how the enclave manages and protects
metadata in order to provide a virtual hierarchical ﬁlesystem.
1) Metadata Structures: Figure 3 gives a high level overview
of the structure of a NEXUS volume. NEXUS stores the ﬁle
system structure internally using a set of encrypted metadata
ﬁles alongside the encrypted data ﬁles using obfuscated names.
These obfuscated names consist of a globally unique 16-byte
ID (UUID), that is tracked by the metadata structures. The
UUIDs are randomly generated within the enclave at metadata
creation, and are universally unique across all machines. The
unencrypted view of the ﬁle system (seen on the right side of
Figure 3) is only accessible by decrypting the metadata inside
the NEXUS enclave. The metadata ﬁles not only store the
ﬁle system layout, but also contain the cryptographic keys and
access control policies needed to ensure that the ﬁle system
data and metadata are conﬁdential and tamper-evident.
The metadata structures implement a standard hierarchical
ﬁle system approach. Each NEXUS ﬁle system is speciﬁed by
a supernode (corresponding to a superblock in a normal ﬁle
system). The ﬁle system hierarchy is then implemented using
a set of dirnodes (corresponding to dentries) and ﬁlenodes
(corresponding to inodes).
• Supernode: A supernode deﬁnes the context of a single
NEXUS volume. The supernode structure stores the UUID
of the ﬁle system’s root directory along with the identity
(public key) of the ﬁle system’s owner. It also contains a
list of other user identities that have been granted access
to the ﬁle system by the owner. These identities consist
of a user name along with an associated public key that
is used for authentication. The owner of a ﬁle system is
immutable, however, the owner has the ability to add and
remove authorized users at any time.
• Dirnode: Dirnodes represent directories in a NEXUS ﬁle
system. Each dirnode contains a list of directory contents
consisting of a mapping between ﬁle/directory names and
their UUIDs. It is important to note that each UUID in
a dirnode only references other metadata ﬁles, and never
directly references an actual data ﬁle. In NEXUS, because
access control is maintained at the directory level, the dirnode
also stores the directory’s access control policy.
• Filenode: Filenodes store the metadata that is necessary to
access the data ﬁles stored in NEXUS. Speciﬁcally, the
ﬁlenode stores the cryptographic keys needed to encryp-
t/decrypt the ﬁle contents. To support efﬁcient random ﬁle
access, NEXUS divides each data ﬁle into a set of ﬁxed-
sized chunks, each of which is encrypted with an independent
cryptographic context. These contexts are stored as an array
in the ﬁlenode structure, along with the UUID corresponding
to the actual data ﬁle.
2) Metadata Encryption: The general layout of a metadata
structure consists of three components, each of which has a
different degree of cryptographic protection.
(1) A preamble that is used to store non-sensitive information
(e.g., UUID, size). This section is integrity-protected.
(2) A cryptographic context containing the information used
to secure the metadata contents. It has a 128-bit encryption
key, an initialization vector and an authentication tag. This
section is integrity-protected, and the encryption key is
stored in keywrapped form to protect its conﬁdentiality.
(3) A section where the metadata’s sensitive information is
stored. This section is encrypted and integrity-protected
using the unique metadata key stored in (2).
Encryption of the metadata ﬁle occurs on every update, and
is performed within the enclave in two stages. After generating
a fresh encryption key and IV inside the cryptographic context
from (2), the ﬁrst stage of encryption is performed using the
AES-GCM cipher with metadata section (3) as input, and the
Fig. 3: Authenticated user view. Directory traversal by NEXUS to present the plain contents of the user’s data ﬁles.
other two sections as additional authenticated material. This
operation outputs an authentication tag, which is copied into
(2). The second stage involves a keywrapping scheme that
uses the volume’s rootkey to encrypt the freshly generated key.
We use the GCM-SIV [29] AEAD construction, and refer the
reader for a deeper discussion on keywrappring.
Essentially, the metadata is protected using its cryptographic
context which, in turn, is protected using the rootkey. This
simpliﬁes key management, as every encryption key is embed-
ded within its corresponding metadata. Therefore, to access a
volume, a user only needs to store the volume’s sealed rootkey,
which can only be unsealed within the NEXUS enclave.
3) Metadata Traversal: Because a volume is just a normal
directory, if directly accessed by the user, the ﬁles will be
encrypted and bear obfuscated names. Therefore, to expose
this protected state, — i.e., plain content and human-readable
ﬁlenames — NEXUS has to translate each local ﬁlesystem
request into the corresponding metadata. Figure 3 shows the
metadata traversal to access bar/cake.c. We abstracted all
metadata operations into a simple primary-key only interface
that provides access to metadata using a UUID. To begin, the
root dirnode is loaded using the root directory’s UUID stored
in the supernode. Then, for each path component, the current
dirnode’s directory list is used to lookup the UUID of the next
dirnode. As each metadata object is read into trusted memory,
the enclave uses the volume rootkey to decrypt and verify
its contents. Before performing the lookup, the enclave also
checks the parent_uuid ﬁeld of the loaded dirnode matches
the UUID of its parent. This guards against ﬁle swapping
attacks [10], and helps provide integrity protection for the
ﬁlesystem structure. If the veriﬁcation or lookup operation
fails, the metadata traversal terminates. Otherwise, the ﬁnal
metadata object is returned.
B. Authentication and User Sharing
To access a NEXUS volume, a user must ﬁrst be authenti-
cated to a NEXUS enclave in order to be granted access to