获取新的token
curl https://discovery.etcd.io/new
把获取的token放到user-data文件中，示例如下：
284
快速搭建CoreOS集群
#cloud-config
coreos:
etcd:
discovery: https://discovery.etcd.io/
启动集群
默认情况下，CoreOS Vagrantfile 将会启动单机。
我们需要复制并修改config.rb.sample文件.
复制文件
cp config.rb.sample config.rb
修改集群配置参数num_instances为3。
启动集群
vagrant up
=>
Bringing machine 'core-01' up with 'virtualbox' provider...
Bringing machine 'core-02' up with 'virtualbox' provider...
Bringing machine 'core-03' up with 'virtualbox' provider...
==> core-01: Box 'coreos-alpha' could not be found. Attempting t
o find and install...
core-01: Box Provider: virtualbox
core-01: Box Version: >= 0
==> core-01: Adding box 'coreos-alpha' (v0) for provider: virtua
lbox
core-01: Downloading: http://storage.core-os.net/coreos/amd6
4-usr/alpha/coreos_production_vagrant.box
core-01: Progress: 46% (Rate: 6105k/s, Estimated time remain
ing: 0:00:16)
添加ssh的公匙
285
快速搭建CoreOS集群
ssh-add ~/.vagrant.d/insecure_private_key
连接集群中的第一台机器
vagrant ssh core-01 -- -A
测试集群
使用fleet来查看机器运行状况
fleetctl list-machines
=>
MACHINE IP METADATA
517d1c7d... 172.17.8.101 -
cb35b356... 172.17.8.103 -
17040743... 172.17.8.102 -
如果你也看到了如上类似的信息，恭喜，本地基于三台机器的集群已经成功启动，
是不是很简单。
那么之后你就可以基于CoreOS的三大工具做任务分发，分布式存储等很多功能
了。
286
Kubernetes 项目
Kubernetes
Kubernetes 是 Google 团队发起并维护的基于Docker的开源容器集群管理系统，它
不仅支持常见的云平台，而且支持内部数据中心。
建于 Docker 之上的 Kubernetes 可以构建一个容器的调度服务，其目的是让用户透
过Kubernetes集群来进行云端容器集群的管理，而无需用户进行复杂的设置工作。
系统会自动选取合适的工作节点来执行具体的容器集群调度处理工作。其核心概念
是Container Pod（容器仓）。一个Pod是有一组工作于同一物理工作节点的容器构
成的。这些组容器拥有相同的网络命名空间\/IP以及存储配额，可以根据实际情况
对每一个Pod进行端口映射。此外，Kubernetes工作节点会由主系统进行管理，节
点包含了能够运行Docker容器所用到的服务。
本章将分为 5 节介绍 Kubernetes。包括
项目简介
快速入门
基本概念
实践例子
架构分析等高级话题
287
简介
项目简介
Kubernetes 是 Google 团队发起的开源项目，它的目标是管理跨多个主机的容器，
提供基本的部署，维护以及运用伸缩，主要实现语言为Go语言。Kubernetes是：
易学：轻量级，简单，容易理解
便携：支持公有云，私有云，混合云，以及多种云平台
可拓展：模块化，可插拔，支持钩子，可任意组合
自修复：自动重调度，自动重启，自动复制
Kubernetes构建于Google数十年经验，一大半来源于Google生产环境规模的经
验。结合了社区最佳的想法和实践。
在分布式系统中，部署，调度，伸缩一直是最为重要的也最为基础的功能。
Kubernets就是希望解决这一序列问题的。
Kubernets 目前在github.com/GoogleCloudPlatform/kubernetes进行维护，截至定
稿最新版本为 0.7.2 版本。
Kubernetes 能够运行在任何地方！
虽然Kubernets最初是为GCE定制的，但是在后续版本中陆续增加了其他云平台的
支持，以及本地数据中心的支持。
288
快速上手
快速上手
目前，Kubenetes 支持在多种环境下的安装，包括本地主机（Fedora）、云服务
（Google GAE、AWS 等）。然而最快速体验 Kubernetes 的方式显然是本地通过
Docker 的方式来启动相关进程。
下图展示了在单节点使用 Docker 快速部署一套 Kubernetes 的拓扑。
图 1.21.2.1 - 在 Docker 中启动 Kubernetes
Kubernetes 依赖 Etcd 服务来维护所有主节点的状态。
启动 Etcd 服务。
docker run --net=host -d gcr.io/google_containers/etcd:2.0.9 /us
r/local/bin/etcd --addr=127.0.0.1:4001 --bind-addr=0.0.0.0:4001
--data-dir=/var/etcd/data
启动主节点
289
快速上手
启动 kubelet。
docker run --net=host -d -v /var/run/docker.sock:/var/run/docker
.sock gcr.io/google_containers/hyperkube:v0.17.0 /hyperkube kub
elet --api_servers=http://localhost:8080 --v=2 --address=0.0.0.0
--enable_server --hostname_override=127.0.0.1 --config=/etc/kub
ernetes/manifests
启动服务代理
docker run -d --net=host --privileged gcr.io/google_containers/h
yperkube:v0.17.0 /hyperkube proxy --master=http://127.0.0.1:8080
--v=2
测试状态
在本地访问 8080 端口，应该获取到类似如下的结果：
$ curl 127.0.0.1:8080
{
"paths": [
"/api",
"/api/v1beta1",
"/api/v1beta2",
"/api/v1beta3",
"/healthz",
"/healthz/ping",
"/logs/",
"/metrics",
"/static/",
"/swagger-ui/",
"/swaggerapi/",
"/validate",
"/version"
]
}
290
快速上手
查看服务
所有服务启动后过一会，查看本地实际运行的 Docker 容器，应该有如下几个。
CONTAINER ID IMAGE
COMMAND CREATED STATUS
PORTS NAMES
ee054db2516c gcr.io/google_containers/hyperkube:v0.17.0
"/hyperkube schedule 2 days ago Up 1 days
k8s_scheduler.509f29c9_k8s-master-127.0.0.1_d
efault_9941e5170b4365bd4aa91f122ba0c061_e97037f5
3b0f28de07a2 gcr.io/google_containers/hyperkube:v0.17.0
"/hyperkube apiserve 2 days ago Up 1 days
k8s_apiserver.245e44fa_k8s-master-127.0.0.1_
default_9941e5170b4365bd4aa91f122ba0c061_6ab5c23d
2eaa44ecdd8e gcr.io/google_containers/hyperkube:v0.17.0
"/hyperkube controll 2 days ago Up 1 days
k8s_controller-manager.33f83d43_k8s-master-12
7.0.0.1_default_9941e5170b4365bd4aa91f122ba0c061_1a60106f
30aa7163cbef gcr.io/google_containers/hyperkube:v0.17.0
"/hyperkube proxy -- 2 days ago Up 1 days
jolly_davinci
a2f282976d91 gcr.io/google_containers/pause:0.8.0
"/pause" 2 days ago Up 2 days
k8s_POD.e4cc795_k8s-master-127.0.0.1_default_
9941e5170b4365bd4aa91f122ba0c061_e8085b1f
c060c52acc36 gcr.io/google_containers/hyperkube:v0.17.0
"/hyperkube kubelet 2 days ago Up 1 days
serene_nobel
cc3cd263c581 gcr.io/google_containers/etcd:2.0.9
"/usr/local/bin/etcd 2 days ago Up 1 days
happy_turing
这些服务大概分为三类：主节点服务、工作节点服务和其它服务。
主节点服务
apiserver 是整个系统的对外接口，提供 RESTful 方式供客户端和其它组件调
291
快速上手
用；
scheduler 负责对资源进行调度，分配某个 pod 到某个节点上；
controller-manager 负责管理控制器，包括 endpoint-controller（刷新服务和
pod 的关联信息）和 replication-controller（维护某个 pod 的复制为配置的数
值）。
工作节点服务
kubelet 是工作节点执行操作的 agent，负责具体的容器生命周期管理，根据从
数据库中获取的信息来管理容器，并上报 pod 运行状态等；
proxy 为 pod 上的服务提供访问的代理。
其它服务
etcd 是所有状态的存储数据库；
gcr.io/google_containers/pause:0.8.0 是 Kubernetes 启动后自动 pull
下来的测试镜像。
292
基本概念
基本概念
节点（Node）：一个节点是一个运行 Kubernetes 中的主机。
容器组（Pod）：一个 Pod 对应于由若干容器组成的一个容器组，同个组内的
容器共享一个存储卷(volume)。
容器组生命周期（pos-states）：包含所有容器状态集合，包括容器组状态类
型，容器组生命周期，事件，重启策略，以及replication controllers。
Replication Controllers（replication-controllers）：主要负责指定数量的pod在
同一时间一起运行。
服务（services）：一个Kubernetes服务是容器组逻辑的高级抽象，同时也对
外提供访问容器组的策略。
卷（volumes）：一个卷就是一个目录，容器对其有访问权限。
标签（labels）：标签是用来连接一组对象的，比如容器组。标签可以被用来
组织和选择子对象。
接口权限（accessing_the_api）：端口，ip地址和代理的防火墙规则。
web 界面（ux）：用户可以通过 web 界面操作Kubernetes。
命令行操作（cli）： kubecfg 命令。
293
基本概念
节点
在 Kubernetes 中，节点是实际工作的点，以前叫做 Minion。节点可以是虚拟机或
者物理机器，依赖于一个集群环境。每个节点都有一些必要的服务以运行容器组，
并且它们都可以通过主节点来管理。必要服务包括 Docker，kubelet 和代理服务。
容器状态
容器状态用来描述节点的当前状态。现在，其中包含三个信息：
主机IP
主机IP需要云平台来查询，Kubernetes把它作为状态的一部分来保存。如果
Kubernetes没有运行在云平台上，节点ID就是必需的。IP地址可以变化，并且可以
包含多种类型的IP地址，如公共IP，私有IP，动态IP，ipv6等等。
节点周期
通常来说节点有 Pending ， Running ， Terminated 三个周期，如果
Kubernetes发现了一个节点并且其可用，那么Kubernetes就把它标记为
Pending 。然后在某个时刻，Kubernetes将会标记其为 Running 。节点的结束
周期称为 Terminated 。一个已经terminated的节点不会接受和调度任何请求，
并且已经在其上运行的容器组也会删除。
节点状态
节点的状态主要是用来描述处于 Running 的节点。当前可用的有
NodeReachable 和 NodeReady 。以后可能会增加其他状
态。 NodeReachable 表示集群可达。 NodeReady 表示kubelet返回 StatusOk并
且HTTP状态检查健康。
节点管理
节点并非Kubernetes创建，而是由云平台创建，或者就是物理机器、虚拟机。在
Kubernetes中，节点仅仅是一条记录，节点创建之后，Kubernetes会检查其是否可
用。在Kubernetes中，节点用如下结构保存：
294
基本概念
{
"id": "10.1.2.3",
"kind": "Minion",
"apiVersion": "v1beta1",
"resources": {
"capacity": {
"cpu": 1000,
"memory": 1073741824
},
},
"labels": {
"name": "my-first-k8s-node",
},
}
Kubernetes校验节点可用依赖于id。在当前的版本中，有两个接口可以用来管理节
点：节点控制和Kube管理。
节点控制
在Kubernetes主节点中，节点控制器是用来管理节点的组件。主要包含：
集群范围内节点同步
单节点生命周期管理
节点控制有一个同步轮寻，主要监听所有云平台的虚拟实例，会根据节点状态创建
和删除。可以通过 --node_sync_period 标志来控制该轮寻。如果一个实例已经
创建，节点控制将会为其创建一个结构。同样的，如果一个节点被删除，节点控制
也会删除该结构。在Kubernetes启动时可用通过 --machines 标记来显示指定节
点。同样可以使用 kubectl 来一条一条的添加节点，两者是相同的。通过设置
--sync_nodes=false 标记来禁止集群之间的节点同步，你也可以使用
api/kubectl 命令行来增删节点。
容器组
295
基本概念
在Kubernetes中，使用的最小单位是容器组，容器组是创建，调度，管理的最小单
位。 一个容器组使用相同的Dokcer容器并共享卷（挂载点）。一个容器组是一个
特定运用的打包集合，包含一个或多个容器。
和运行的容器类似，一个容器组被认为只有很短的运行周期。容器组被调度到一组
节点运行，知道容器的生命周期结束或者其被删除。如果节点死掉，运行在其上的
容器组将会被删除而不是重新调度。（也许在将来的版本中会添加容器组的移
动）。
容器组设计的初衷
资源共享和通信
容器组主要是为了数据共享和它们之间的通信。
在一个容器组中，容器都使用相同的网络地址和端口，可以通过本地网络来相互通