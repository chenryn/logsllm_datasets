用方法是：使用UNION语句并通过将自身添加到原始查询的返回结果中来提取数据。UNION
语句允许攻击者以快速、可靠的方式提取大量信息，从面使该技术成为一种强大的武器。对于
无法使用基于UNION的攻击的情况，则可以使用条件语句来提取数据。条件语句会根据特定
信息位值的不同来触发不同的数据库响应。我们探讨了该技术的许多变量，它们会影响完成响
应所需要的时间、响应的成功或失败以及响应中返回页面的内容。
我们还讨论了怎样通过在数据库服务器和攻击者的机器之间启用一条完全不同的连接来
传输数据以及如何依靠不同的协议（比如HTTP、SMTP或数据库连接）来完成该任务。
183
---
## Page 198
SQL注入攻击与防御（第2版）
可以使用所有这些技术（单独使用或联合使用）来提取大量数据，从枚举数据库模式到获取
想要的表。如果用户只有有限的访问远程数据库的权限，可以尝试通过提升权限来扩大影响力。
提升权限时可以利用一些未打补丁的漏洞，也可以滥用数据库的某些特定功能。获取到权限之
后，接下来的目标就是数据库哈希口令，破解它们之后即可将攻击传播到目标网络的其他地方。
4.13快速解决方案
1.理解常见的漏洞利用技术
·SELECT语句中经常出现SQL注入漏润，但不会修改数据。SQL注入还会出现在修改
数据的语句（比如INSERT、UPDATE和DELETE)中，虽然可使用相同的技术，但此时
应仔细考虑该技术对数据库有可能会产生的影响。而对于SELECT语句，则应尽可能使
用SQL注入。如果不能利用SELECT语句，在攻击期间还可以使用其他一些技术以减
少修改所带来的危害程度。
·在本地安装一个与用于测试注入语法的数据库完全相同的数据库会非常有用。
●如果后台数据库和应用架构支持多条语句相连，那么利用漏洞会变得相当容易。
2.识别数据库
·在一个成功的攻击中，第一步始终会包含对远程数据库的精确跟踪。
·最直接的方法是强迫远程应用返回一条能揭示数据库服务器技术的消息（通常是一条
错误信息)。
·如果那样做不可行，可注入一条只能工作在特定数据库服务器上的查询。
3.使用OINON语句提取数据
·要想成功地向现有查询添加数据，就必须保证它们的列数和数据类型均匹配。
·所有数据类型均接受NULL值，GROUPBY是寻找要注入的准确列数的最快方法。
·如果远程Web应用只返回第一行，那么可通过添加一个永假条件来移除原来的行，然
后一次一行地提取想要的行。
4.使用条件语句
·使用条件语句，攻击者的每次请求可以提取一个数据位。
·根据所提取位值的不同，可以选择引入延迟、产生错误或强迫应用程序返回一个不同
的HTML页面。
·每种技术都有最适合使用的场景。基于延迟的技术速度虽慢但非常灵活，基于内容的
技术相比基于错误的技术则会留下更少的痕迹。
5.枚举数据库模式
·遵循一种分级的方法：首先枚举数据库，然后是每个数据库的表，之后是每个表的列，
最后是每一列的数据。
184
---
## Page 199
第4章利用SQL注入
·如果远程数据库很大，就不需要提取整个数据库。快速浏览一下表名通常就足以确定
想要的数据的位置。
6.注入INSERT查询
·如果要在INSERT、UPDATE或DELETE查询中利用 SQL注入漏洞，就必须小心处理，
以避免出现垃圾数据填充数据库或者大量修改或删除数据等副作用。
·安全注入的办法包括：修改INSERT或UPDATE查询以更新一个可以在应用程序的其
他地方查看到的值；或者修改INSERT、UPDATE或DELETE查询使之在整体上执行
失败，但可以返回数据或在结果上产生明显差别，比如时间上的延迟或不同的错误消息。
7.提升权限
·所有主流数据库服务器一直以来都深受权限提升漏洞之苦。我们正在攻击的数据库服
务器很可能未升级至最新的安全更新程序。
·对于其他情况，可以尝试暴力破解管理员账户，例如在SQLServer上使用OPENROWSET。
8.窃取哈希口令
·如果拥有管理员权限，请不要错过获取哈希口令的机会。人们都倾向于重用口令，这
些哈希可能成为进入整个“王国”的钥匙。
9.带外通信
·如果无法使用前面的方法提取数据，可尝试建立一种完全不同的通道。
·可能的选项包括e-mail(SMTP)、HTTP、DNS、文件系统或针对特定数据库的连接。
10.移动设备上的SQL注入
·很多移动设备和嵌入式设备使用本地SQL数据库来存储或缓存信息。
·虽然在访问方式上存在差异，但在适当的条件下，这些移动应用程序也存在可利用的
SQL注入漏润，就像任何Web应用程序一样。
11.自动利用SQL注入
·本章分析的大多数攻击都需要发送大量请求以达到目的。
·幸运的是，有几种工具可辅助实现自动攻击。
·这些工具提供了很多不同的攻击模式和选项，从远程数据库服务器跟踪到提取它所包
含的数据。
4.14常见问题解答
问题：是否有必要每次都通过跟踪数据库来启动攻击？
解答：是的。了解目标数据库服务器所使用技术的详细信息，有助于您调整自己的攻击，
从而使攻击更加有效。在跟踪阶段花点时间会为以后节省不少时间。
185
---
## Page 200
SQL注入攻击与防御（第2版）
问题：是否应尽可能使用基于UNION的技术？
解答：是的，因为该技术使您的每次请求都能提取合理的信息量。
问题：如果数据库很大，无法枚举所有表和列，那么该怎么办？
解答：尝试枚举那些名称可以匹配特定模式的表和列。在查询中添加约束条件（比如ike
%password%或like%private%有助于将精力放在最想要的数据上。
问题：使用OOB连接时，如何避免数据泄漏？
解答：第一道、也是最重要的一道防线是：确保应用正确审查了用户输入。不过要始终确
保数据库服务器未被授权向网外发送数据。禁止它们向外部发送SMTP流量，配置
防火墙以便过滤所有潜在的危险流量。
问题：获取到哈希口令后，破解它们的难易程度如何？
解答：这取决于很多因素。如果哈希算法比较弱，那么检索原始口令会很容易。如果哈希
是由强口令算法生成的，那么破解的难易程度将取决于原始口令的强度。不过，除
非施加了口令复杂性策略(passwordcomplexity policy)，否则至少能破解一部分哈希。
186
---
## Page 201
第5章SQL盲注利用
本章目标
·寻找并确认SQL盲注
·使用基于时间的技术
·使用基于响应的技术
·使用非主流通道
·自动SQL盲注利用
5.1概述
假设现在发现了一个SQL注入点，但应用只提供了一个通用的错误页面：或者虽然提供
在这里，没有有用的错误消息或者我们已经习惯的反馈内容——就像在第4章遇到的那样—可
以利用。不过请不用担心，即便在这种情况下，我们也仍然可以可靠地利用SQL注入。
第4章介绍了很多经典的 SQL注入示例，它们借助详细的错误消息来提取数据，这是从
这些漏洞中提取数据的第一种广泛使用的攻击技术。在未能很好地理解SQL注入之前，开发
人员一般被建议禁用所有详细的错误消息。他们误以为只要没有错误消息，攻击者的数据检索
目标就永远不可能实现。开发人负有时候会跟踪应用中的错误并显示通用的错误消息，而有时
候则不向用户显示任何错误。但攻击者很快就意识到，虽然基于错误的通道行不通了，但利用
漏洞的根源还在，即攻击者提供的SQL仍然在数据库查询中执行。摆在足智多谋的攻击者面
前的难题是如何提出新的通道。不久之后他们发现并公布了许多通道。在这个过程中，SQL盲
注这一概念被广泛使用，但每个作者在定义上都有细微的差别。ChrisAnley在其2002年的一
篇论文中首次引入了一种SQL盲注技术，该论文展示了在禁用详细的错误消息时如何引发注
入攻击，并提供了儿个示例。OferMaor和AmichaiShulman则在定义中要求禁用详细错误，并
且遭到破坏的SQL语法应该产生一个通用的错误页面。他们隐式地假设易受攻击的语句为
SELECT查询，其结果集最终会显示给用户。该查询结果（成功或失败）首先用于检索易受攻击
的语句，然后通过UNION SELECT来提取数据。KevinSpet的定义存在相似之处，他也要求
禁用详细的错误消息并且注入发生在SELECT语句中，但不是依靠通用的错误页面，面是通过
SQL逻辑操作以逐字节方式推断数据来修改页面中的内容，这与 Cameron Hotchkies 使用的技
术相同。
很明显，SQL盲注引起了攻击者的极大关注。这一技术在任何SQL注入工具集中都是一
个关键的组成部分。不过在详细介绍该技术之前，我们需要定义SQL盲注并探究它通常在什
么场合出现。为实现这一目标，本章将介绍使用推断和非主流通道（包括时间延迟、错误、域
---
## Page 202
SQL注入攻击与防御（第2版）
名系统(DNS)查询和HTML响应）从后台数据库中提取数据的技术。这将提供更多灵活的与数
据库通信的方法，即便遇到应用程序正确捕获了异常，但并未从所利用的Web接口中收到任
何反馈信息这样的情况。
提示：
本书中的SQL育注是指在无法使用详细数据库错误消息或带内数据连接的情况下，利用
数据库查询的输入审查漏洞从数据库提取信息或提取与数据库查询相关信息的攻击技术。
这个定义的范围很广，它没有假定专门的SQL注入点（除非SQL注入必定可行)，没有要
求特定的服务器或应用行为，并且也没有要求专门的技术（除了排除基于错误的数据提取以及
将数据连接成合法的结果外，比如通过UNIONSELECT).用于提取信息的技术有很多，我们
唯一的指导原则是无法使用两种最经典的提取技术，
请记住，SQL盲注主要用于从数据库提取信息，但也可用于获取正在注入SQL的查询的
结构。如果设计出了完整的查询（包括所有相关的列及其类型)，那么带内数据连接会变得很容
易，因而攻击者在转向更深奥的SQL盲注技术之前会力求确定查询结构。
5.2寻找并确认SQL盲注
要想利用SQL盲注漏洞，必须首先定位目标应用程序中潜在的易受攻击点并验证SQL注
入是可行的。我们已经在第2章详细介绍过这些内容，但有必要重温一下在专门进行SQL盲
注测试时用到的主要技术。
5.2.1强制产生通用错误
应用程序经常使用通用的错误页面来替换数据库错误，不过即使出现通用错误页面，也可
以推断SQL注入是否可行。最简单的例子是在提交给Web应用的一段数据中包含一个单引号
字符。如来应用程序只在提交单引号或其中的一个变量时才产生通用的错误页面，那么攻击成
功的可能性会比较大。当然，单引号会导致应用程序因其他原因而失败（例如，应用程序的防
御机制会限制输入单引号）。但总的来说，提交单引号时最常见的错误源是受损的SQL查询。
5.2.2注入带副作用的查询
要想进一步确认漏洞，通常可提交包含副作用(攻击者可观察到）的查询。最古老的技术是
使用计时攻击(timingattack)来确认攻击者的SQL是否已执行，有时也可以执行攻击者能够观
察到输出结果的操作系统命令。例如，在Microsoft SQL Server中，可使用下列SQL代码来产
生一次5秒的暂停：
WAITFOR DELAY '0:O : 5*
同样，MySQL用户可使用SLEEPO函数（适用于MySQL5.0.12及之后的版本）来完成相同
的任务。对于8.2及以上版本的PostgreSQL数据库，则可以使用pg_sleepO函数来实现。
最后，还可以利用观察到的输出进行判断。例如，如果将注入字符串
‘AND '1′='2
188
---
## Page 203
第5章SQL首注利用
插入到一个搜索字段中，将产生与
' OR '1'=*1
不同的响应。这看起来似乎很有希望进行SQL注入。第一个字符串向搜索查询引入一个
永假子句，它不返回任何内容：第二个字符串保证搜索查询能匹配所有的行。
我们曾在第2章详细介绍过这些内容。
5.2.3拆分与平衡
如果通用的错误或副作用不起作用，可以尝试“参数拆分与平衡（parameter spliting and
balancing)”技术（由 DavidLitchfield 命名)。这是很多SQL首注利用中经常用到的技术。分解
合法输入的操作称为拆分，平衡则保证最终的查询中不会包含不平衡的结尾单引号。其基本思
想是：收集合法的请求参数，之后使用SQL关键字对它们进行修改以保证与原始数据不同，
但当数据库解析它们时，二者的功能是等价的。看一个例子，假设在htp://www.victim.com/view_
review.aspx?id=5这个URL中，将id参数的值插入到一条SQL语句中以构成下列查询：
SELECT reviev_content, reviev_author FROM reviews WHERE id=5
如果使用2+3替换5，那么应用的输入将不同于原始请求中的输入，但SQL在功能上是
等价的：
SELECT reviev_content, reviev_author FROM reviews WHERE id=2+3
这里并不局限于数字值。假设http:/www.victim.com/view_review.jsp?review_author=MadBob
这个URL返回与某一数据库条目相关的信息，author参数的值被放到一条SQL查询中以构成
下列查询：
SELECT CoUNT (id) FROM reviews KHERE review_author='MadBob*
可以使用特定的数据库运算符将MadBob字符串拆分，向应用程序提供与MadBob相对应
的不同输入。在针对Oracle的利用中，使用“”运算符连接两个字符串：
qo,11,gpex
它将产生下列SQL查询：
SELECT COUNT (id) FROM reviews KHERE review_author='MadB'I1*ob*
它与第一个查询在功能上是等价的。
最后，Litchfield指出，该技术事实上可用来创建内容完全自由的漏洞字符串。通过与子查
询联合使用拆分与平衡技术，可构造在很多情况下不需要修改即可使用的漏洞。下列MySQL
查询将产生相同的输出：
SELECT review_content, review_author FROM reviews WHERE id=5
SELECT review_content, reviev_author FROM reviews WHERE id=10-5
SELECT reviev_content, reviev_author FROM reviews WHERE id=5+ (SELECT0/1)
我们在最后一条SQL语句中插入了一个子查询。由于这里可插入任何子查询，因而可先
使用拆分与平衡技术对要注入的更复杂查询（实际提取数据的查询）进行简单的封装，然后再将
189
---
## Page 204
SQL注入攻击与防御（第2版）
其插入到该位置。不过，MySQL不允许对字符串参数应用拆分与平衡技术（因为缺少二进制字
符串连接运算符），该技术只能用于数字参数。但是Microsoft SQLServer允许拆分、平衡字符