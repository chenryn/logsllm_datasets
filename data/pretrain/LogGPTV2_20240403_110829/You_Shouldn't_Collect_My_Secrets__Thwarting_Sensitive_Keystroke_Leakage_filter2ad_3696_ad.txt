to store ﬁles and data. By default, data saved to the in-
ternal storage are private to an app and other apps cannot
access them (nor can the user). I-BOX just copies all ﬁles
in the IME app’s private directory and then restores the
ﬁles modiﬁed during the input transaction upon rollback.
Since there are usually only a small number of ﬁles in the
internal storage for an IME app and the modiﬁed ones are
even less, the time cost is negligible.
For
storage,
external
any Android apps with
proper permissions (e.g., android.permission.
WRITE EXTERNAL STORAGE) can access the whole
external storage.
It would be very lengthy if I-BOX
scanned the whole external storage to ﬁnd the modiﬁed
ﬁles. Hence, I-BOX records all the ﬁles modiﬁed by the
IME app during the input transaction and then restores
them as needed. Speciﬁcally, once I-BOX detects the
IME app tries to write some data into a ﬁle, it duplicates
the ﬁle for subsequent restoring.
Note that as the checkpointed ﬁles are created by
I-BOX, which runs as a system process, the ﬁles are with
system privilege and thus cannot be read/written by the
IME app itself. This ensures that an IME app cannot ﬁrst
save sensitive key logs into such ﬁles and later read them
out. Actually,
I-BOX also removes the checkpointed
ﬁles after rolling back an IME app.
Saving and restoring memory states. Memory states
include the IME app process’s data in memory and
process-related metadata maintained by the OS ker-
nel (i.e., Linux). Linux uses a lot of data structures
to manage a process and maintain its state, such as
task struct, thread info and others.
I-BOX
relies on a kernel module to save and restore such data
structures. Speciﬁcally, this module maintains a shadow
process in the kernel to store the data of each running
IME app. The shadow process duplicates the process
states of the original IME app by copying the metadata
of the IME app into its own task struct but with
some modiﬁcations for consistency. For example, it
has its own kernel stack and redirects the stack pointer
in the task struct to its own one, although the
content on the stack is the same as in the original IME
app. For independent states like process ID or kernel
stack, I-BOX just copies the data into a buffer and writes
them back later. As for other states connected with
other processes or other events like a pipe or waitqueue,
I-BOX needs to record the states and the relationships
so that it can recover it correctly later. Besides this,
I-BOX also needs to save the process memory. Instead of
really copying the memory pages, I-BOX simply creates
a shadow page table that shares the memory with the
target IME app process and marks the page table of the
target process as COW. This omits lots of unnecessary
page copying since most pages will not be modiﬁed
during the input transaction and it just needs to switch
the page table root to restore the memory, which is very
fast. This helps reduce the stop-time of each IME app
process when I-BOX tries to do checkpoint and restore.
Multi-thread rollback. Most Android applications run
in the Dalvik virtual machine and have multiple threads
for different purposes. Besides the main thread for UI
and the core logic of the IME app, there are about another
10 threads for garbage collection, event handling, Binder
IPC, and so on. To roll back the process states of an IME
app correctly, I-BOX needs to deal with such threads
properly. Linux assigns task struct to a thread just
like a process to maintain its state and groups all threads
belonging to one process together through a list. So I-
BOX saves each thread with a separated shadow pro-
cess and groups these processes together through a list
to maintain their parent-child relationships just like the
original one. The sharing resources between threads will
be duplicated too. For example, I-BOX will save the pipe
states between two threads and restore it later.
4.2.3 Handling IPCs
One major challenge I-BOX faces in checkpoint and roll-
back is how to deal with the IPC states of an IME app
process. An IPC involves multiple processes or even
multiple machines, but I-BOX can only control one end
in the communication. One potential problem is that the
other side of an IPC may wait for a reply that will never
be sent, since the IME app process has forgotten this re-
quest after rollback. Another serious problem is that the
client app may communicate with an inactive IPC that
has been erased from the IME app process due to roll-
back.
As a result, I-BOX needs to ﬁnd proper timing to do
checkpoint and rollback such that the consistency of an
IPC is not violated. Proper timing requires several condi-
tions. First, there should not be any data in transmission
between two processes; otherwise it will lead to a cor-
rupted request with incorrect semantics. Second, there
should be no pending IPC requests. This means an IME
USENIX Association  
24th USENIX Security Symposium  683
app shall wait for all replies before doing checkpoint and
ensure that no request is pending to the process before
rollback. Fortunately, it is not hard for I-BOX to ﬁnd
suitable timing because I-BOX only does checkpoint and
rollback when a user does not input. In most cases, the
IME app processes should be sleeping at that point. If
not, we can safely enforce it without disturbing other
client apps since the user is not typing.
Inter-threads IPC. Linux provides a set of IPC mech-
anisms such as pipe, socket, and shared memory. An-
droid inherits such mechanisms but only uses them as a
method for communication between threads within a sin-
gle process. Hence, I-BOX can control both ends of these
inter-threads IPC, which avoids the inconsistency issues
due to unilateral actions. For example, the two commu-
nicating parties of a pipe in a single process have a pair
of pipe fd; the OS kernel allocates a buffer for them to
pass the message. To restore the pipe correctly, I-BOX
just keeps a record of current pipe status and its buffered
data, then restores it as needed. There is no restriction
on the timing for checkpoint and rollback. Other IPCs
within the same process are done similarly to this.
Android Binder. Android heavily uses its own IPC
mechanism: Binder, which helps the Android permission
system to provide access control to Android services and
resources. By mapping kernel memory into user space,
Binder IPC only requires one data copy for one transmis-
sion, i.e., from the sender’s user space to the kernel buffer
of the Binder driver. Then the receiver can directly read
the data from its read-only user space mapping, which is
more performance-friendly. There are two issues I-BOX
needs to take care for a consistent restore of the Binder.
More speciﬁcally:
• Reference counting for Binder proxies. An An-
droid app uses Binder proxies (e.g., BBinder, Bp-
Binder) as the reference to remote processes instead
of simple ﬁle descriptors. The Binder driver in the
kernel needs to manage the reference counter for
such proxies so that it can know whether a binder
instance is useless or not. I-BOX needs to track and
record modiﬁcations to references to Binder proxies
so that it can keep the consistency of the reference
counters.
• Conversation between the Binder request and re-
sponse.
I-BOX also needs to keep the conversa-
tion between the Binder transaction request and re-
sponse. As an Android service provider, an IME
app process will accept a Binder transaction request
from the client app and it will send back the transac-
tion response after disposing the request. To achieve
this, I-BOX tracks the transaction request and re-
sponse to ﬁnd a right timing when all requests have
been handled. It is not hard to ﬁnd such a point be-
cause usually I-BOX tries to do checkpoint or roll-
back when IME is idle without new requests.
example,
our
analysis with TouchPal
Content Provider. An IME app may also interact
with both third-party and system content providers.
For
IME
this app accesses third-party con-
app reveals that
like content://com.tencent.
tent providers
mm.sdk.plugin.provider/sharedpref
content://com.facebook.katana.
and
provider.AttributionIdProvider; our anal-
ysis with Guobi IME app shows that this app accesses
content://com.iflytek.speechcloud.
providers.LocalResourceProvider
content://com.tencent.mm.sdk.plugin.
provider/sharedpref. TouchPal accesses the sys-
tem content provider like content://sms/inbox
and both TouchPal and Guobi access content://
telephony/carriers/preferapn.
In Android,
all requests to content providers are issued through the
Binder mechanism, we rely on the Binder mechanism
to detect a quiescent point. Fortunately, we note that
accesses to content providers are request-oriented and
thus connection-less. Thus, there is no request on-the-ﬂy
and thus I-BOX can checkpoint such states accordingly.
and
Network. Different from Binder, the network driver
does not expose any semantic information to an upper
layer’s connections. Hence, it seems hard to maintain
the consistency of request and response between an IME
app process and its cloud-based server. Fortunately, there
are two observations that help relax the strict consis-
tency requirement. First, network connections between
an IME app and the cloud-based server, like fetching
the words by sending the keystrokes, synchronizing the
user’s library, and downloading news or advertisements,
are usually stateless and non-transactional; a redo opera-
tion does not cause any consistency issues. Second, net-
work connections during input transactions are mostly
short-time synchronized requests that are ﬁnished when
input is done; hence they will not be affected by rollback.
Lessons Learned. While it is generally hard to check-
point a complex app like an IME app, the event-driven
nature of I-BOX greatly helps simplify the design and
implementation of I-BOX. By leveraging a quiescence-
point based approach and conduct checkpointing at the
time at which an IME app likely to be quiescent (e.g.,
before an input session start), I-BOX enjoys both less im-
plementation complexity and runtime overhead.
4.3 Restricting IME Apps’ Behavior
When I-BOX detects a sensitive input session, it needs to
restrict an IME app’s behavior such that no sensitive data
684  24th USENIX Security Symposium 
USENIX Association
should be leaked during this process. A malicious IME
app may leverage various means to store and transform
the data during this process. For example, it may directly
send input data to the network, or store the input data to
a content provider to be restored and sent out later. To
this end, I-BOX needs to restrict an IME app’s behavior
to stop such channels for a sensitive input stream.
I-BOX constrains an IME app from using network and
accesses to content provider and services during a sen-
sitive input session. Speciﬁcally, during a sensitive in-
put session, I-BOX only grants an IME app with read
accesses (like query) to such content providers and ser-
vices. This is done by interposing the binder transaction
and acts according to the access types from the transac-
tion code (i.e., query, insert, update or delete).
One potential issue would be that the IME app may not
function correctly without such accesses. Fortunately,
most Android apps (including IME apps) are designed
to work gracefully with different permissions, due to the
fact that the user may grant different permissions and an
IME app may work without network accesses. As a re-
sult, it is non-intrusive to dynamically deprive the IME
app from certain accesses as evidenced by prior research
on dynamic permissions on Android [32]. After a roll-
back, as all residual states inside an IME app have been
cleaned, any pending actions like insertion or deletion
will not cleared as if they never happen. Thus, there
won’t be any confusions to the content provider and ser-
vices.
5 EVALUATION
We have implemented I-BOX based on Android 4.2.2
and Linux kernel OMAP 3.0.72. It consists of two main
parts: i) a user-level modiﬁcation of the Android appli-
cation framework to insert the I-BOX policy engine and
network control module; ii) a kernel module to handle
checkpoints and rollback of IME apps.
Experimental Setup. All of our experiments were per-
formed on a Samsung Galaxy Nexus smartphone with a
1.2 GHz TI OMAP4460 CPU, a 1GB memory and 16GB
internal storage. We evaluate I-BOX using 11 popular
IME apps to measure the performance overhead of I-
BOX. The 11 IME apps (as shown in the ﬁrst column of
Table 1) are ranked among the highest in popularity in a
large third-party market3. Many of these IME apps have
been installed more than millions of times (Figure 1).
In our testing, we set the security policies to include all
contacts in the phone and all commonly used accounts
and passwords. This forms a trie containing around 400
words.
3http://www.wandoujia.com/
5.1 Performance Evaluation
The time overhead of I-BOX comes from three parts: (1)
time to ﬁnd the quiescent points; (2) time to perform
memory checkpoint and rollback, and (3) time to per-
form ﬁle save and restore. To measure the performance
overhead, we asked a volunteer with an average typing
speed of about 100 characters per minute to enter a 10
word paragraph in an SMS app using the tested IME
apps. We did not use an automation tool like an Android
Monkey as it cannot handle the complex UI interface of
these IME apps.
Latency. As shown in Table 1, the time to ﬁnd a quies-
cent point is very small (less than 14ms). This conﬁrms
our observation that it is very easy and fast to ﬁnd or
force a quiescent point to do checkpoint and rollback on
an IME app. The time of saving and restoring an IME
app’s memory state is also very small (less than 29ms)
since I-BOX does not really copy the whole memory but
just mark them as COW. Based on the ﬁles touched by
the IME app process during the typing, I-BOX needs to
restore a few ﬁles to prevent the IME app from conceal-
ing the secret inside ﬁles. Hence, the time for ﬁle save
and restore is a little bit lengthy (60 ms), which can fur-
ther be improved by using a copy-on-write ﬁle system. In
total, the maximum total time to do a checkpoint (includ-
ing ﬁnding a quiescent point) is less than 103ms (14ms
+ 29ms + 60ms). In contrast, the world record of texting
is typing a complicated 25 word message (159 charac-
ters) in 25.94 seconds [5], which corresponding to 163
ms/character and 1.0376 second/word. Hence, the time
to do checkpointing is very small compared to user typ-
ing. As the time to search the trie is negligible, we didn’t
report it here.
Power. To measure the power overhead incurred by I-
BOX, we used the TouchPal IME to input an article and
its non-Latin translation to a text-note app called Catch
and count its power status. The total input process spans
30 minutes for both unmodiﬁed Android and I-BOX-
capable Android. We found that in both cases the power
dropped from 100% to 99%, whose differences were in-
distinguishable. This is probably because the IME app
is not power-hungry and the additional power consumed
by I-BOX was evened by the reduced network transmis-
sions, which is thus hard to be distinguished without a
highly accurate power meter. In our future, we plan to
further characterize the power consumption using an ac-
curate power meter.
5.2 Security Evaluation
Here, we evaluate whether I-BOX indeed has mitigated
the leakage of a user’s sensitive keystrokes. We still use
the IME apps in our performance testing, along with a
USENIX Association  
24th USENIX Security Symposium  685
Quiescent
Memory
File
IME app
w/o I-BOX
w/ I-BOX
IME app
C (ms)
R (ms)
C (ms)
R (µs)
C (ms)
R (ms)
Sogou
Baidu