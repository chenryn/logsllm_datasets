# A Look at the Elephant's Trunk: PostgreSQL 10

## PGDay UK, London, UK
### Speaker: Magnus Hagander
- **Email:** [PI:EMAIL]
- **Title:** Principal Database Consultant, Redpill Linpro
- **Roles:**
  - PostgreSQL Core Team Member
  - Committer
  - PostgreSQL Europe

## Versioning and Development Schedule

### Versioning
- **8.4, 9.0, 9.4, 9.5, 9.6, 10, 10.1, 11, 12**

### Development Schedule for PostgreSQL 10
- **August 2016:** Branch 9.6
- **September 2016:** CF1
- **November 2016:** CF2
- **January 2017:** CF3
- **March 2017:** CF4
- **May 2017:** Beta1 (Please test!)
- **August 2017:** Beta2

## New Features in PostgreSQL 10

### DBA and Administration
- **Monitoring Enhancements**
- **Backup and Replication Improvements**
- **Performance Enhancements**

### Small Changes
- **Drop Support for Protocol 1.0**
  ```sql
  postgres=# SELECT ts_headline('{"foo": "bar", "baz": 3}'::jsonb, 'foo');
  {"baz": 3, "foo": "bar"}
  ```

### ICU Collations
- **More Choice for Collations**
  - Not just OS-based collations
  - Stable across versions
  - Detected on ICU major version changes
- **Example Usage:**
  ```sql
  SELECT * FROM t ORDER BY a COLLATE "sv-SE-x-icu";
  -- Output: valle, vera, walle, wera

  SELECT * FROM t ORDER BY a COLLATE "sv-SE-u-co-standard-x-icu";
  -- Output: valle, walle, vera, wera
  ```

### New Defaults
- **postgresql.conf:**
  - `wal_level = replica`
  - `max_wal_senders = 10`
  - `max_replication_slots = 10`
- **pg_hba.conf:**
  - Default replication connections
  - Temporary replication slots
    - Automatically dropped at the end of the session
    - Prevents fall-behind with less risk

### pg_basebackup
- **WAL Streaming Supported in Tar Mode (-Ft)**
- **Better Excludes**
- **WAL Streaming (-X stream) Now Default**
  - Uses temporary replication slots by default

### Quorum-Based Synchronous Replication
- **Supports ANY and FIRST Modes**
  - Example:
    ```sql
    synchronous_standby_names = 'FIRST 2 (pg1, pg2, pg3, pg4)'
    synchronous_standby_names = 'ANY 2 (pg1, pg2, pg3, pg4)'
    ```

### Logical Replication
- **Based on WAL and Logical Decoding**
- **Replicate Individual Tables or Sets of Tables**
- **Example:**
  ```sql
  CREATE TABLE testtable (a int PRIMARY KEY, b text);
  CREATE PUBLICATION testpub FOR TABLE testtable;

  CREATE SUBSCRIPTION testsub
  CONNECTION 'host=/tmp port=5500 dbname=postgres user=mha'
  PUBLICATION testpub;
  ```
- **Limits:**
  - No schema replication
  - No sequence replication
  - Not suitable for fail-over

### Hash Indexes
- **Now WAL Logged**
- **Many Performance Enhancements**
  - Better caching
  - Supports page-level vacuum
  - Sometimes better than btree

### Partitioning
- **Based on Existing Inheritance**
- **Easier to Work With**
- **Automatic Tuple Routing**
- **Range and List Partitioning**
  - **Example:**
    ```sql
    CREATE TABLE testlog (t timestamptz DEFAULT now(), txt text)
    PARTITION BY RANGE(t);

    CREATE TABLE testlog_2017
    PARTITION OF testlog (t)
    FOR VALUES FROM ('2017-01-01') TO ('2018-01-01');

    INSERT INTO testlog (txt) VALUES ('test');

    CREATE TABLE testcat (category text, txt text)
    PARTITION BY LIST(category);

    CREATE TABLE testcat_cat13
    PARTITION OF testcat (category)
    FOR VALUES IN ('cat1', 'cat2', 'cat3');

    INSERT INTO testcat VALUES ('cat1', 'Test1');
    ```
- **Limitations:**
  - No row-movement
  - No cross-partition indexes
  - No cross-partition keys
  - No partition-wise processing
  - No tuple routing for foreign partitions

### More Parallelism
- **Introduced in 9.6:**
  - Sequential scans
  - Aggregates
  - Hash and loop joins
- **New Parameter: max_parallel_workers**
- **Query String Now in Workers**
  - Shows in `pg_stat_activity`
  - Example:
    ```sql
    pid | 28040
    ...
    wait_event_type | Timeout
    wait_event | PgSleep
    state | active
    query | select x, pg_sleep(2000) from tt;
    backend_type | background worker
    ```

### Index Scans
- **Regular and Index-Only Scans (btree)**
- **Bitmap Heap Scan**
- **Index Still Scanned Serially**

### Joins
- **Merge Joins**
- **Multi-Column Statistics**
  - Collect statistics across columns
  - Example:
    ```sql
    CREATE STATISTICS test_stats ON b, c FROM test
    COLLECTS dependency, n_distinct;
    ```

## Conclusion
- **Lots of Smaller Fixes and Performance Improvements**
- **Can't Mention Them All!**

## Call to Action
- **Download and Test!**
  - Apt packages available
  - RPM/Yum packages available
  - Both beta and dev snapshots

## Contact Information
- **Magnus Hagander**
  - Email: [PI:EMAIL]
  - Twitter: @magnushagander
  - Website: http://www.hagander.net/talks/

**This material is licensed.**