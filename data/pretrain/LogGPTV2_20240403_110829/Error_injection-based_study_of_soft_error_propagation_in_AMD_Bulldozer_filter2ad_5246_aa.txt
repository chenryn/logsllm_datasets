title:Error injection-based study of soft error propagation in AMD Bulldozer
microprocessor module
author:Cristian Constantinescu and
Mike Butler and
Chris Weller
Error Injection-based Study of Soft Error Propagation in AMD Bulldozer 
Microprocessor Module 
Cristian Constantinescu*, Mike Butler** and Chris Weller* 
Advanced Micro Devices, Inc. 
* Fort Collins, CO, USA 
** Sunnyvale, CA, USA 
e-mail: {cristian.constantinescu; mike.butler; chris.weller}@amd.com 
(SEU)  and 
Abstract—  Single-event  upsets 
single-event 
transients  (SET)  may  lead  to  crashes  or  even  silent  data 
corruption  (SDC)  in  microprocessors.    Error  detection  and 
recovery features are employed to mitigate the impact of SEU 
and  SET.  However,  these  features  add  performance,  area, 
power,  and  cost  overheads.  As  a  result,  designers  must 
concentrate their efforts on protecting the most sensitive areas 
of  the  processor.  Simulated  error  injection was  used  to  study 
the  propagation  of  the  SEU-induced  soft  errors  in  the  latest 
AMD microprocessor  module,  Bulldozer. This paper  presents 
the  Bulldozer  architecture,  error  injection  methodology,  and 
experimental results. Propagation of  soft errors is quantified 
by  derating  factors.  Error  injection  is  performed  both  at  the 
module  and  unit  level,  derating  factors  and  simulation  times 
being  compared.  Accuracy  is  assessed  by  deriving  confidence 
intervals of the derating factors. The experiments point out the 
most  sensitive  units  of  the  Bulldozer  module,  and  allow  
efficient implementation of the error-handling features. 
Keywords- 
error 
microprocessor design; RTL model; error handling 
simulated 
soft 
errors; 
injection; 
I. 
 INTRODUCTION  
Energetic  particles,  such  as  neutrons  and  protons,  may 
induce soft errors in the storage elements (SRAM, sequential 
logic) of a microprocessor. Similar effects may be observed 
due to alpha particles generated by the radioactive decay of 
packaging  and  interconnect  materials.  Such  events  are 
usually defined as single-event upsets (SEU). Strikes to the 
combinational  logic  generate  pulses,  also  known  as  single-
event  transients  (SET),  that  may  lead  to  soft  errors  when 
latched by sequential logic. The impact of SEU and SET on 
microprocessors  ranges  from  system  crashes  to  silent  data 
corruption  (SDC),  as  shown  by  previously  published 
accelerated neutron measurements [1, 2]. 
Fortunately, not all SEU and SET have a negative impact 
on the microprocessor. For instance, flipping a bit in a write 
buffer after the data was sent out has no real impact because 
new  data  will  overwrite  the  corrupted  bit.  Similarly,  a 
corrupted  bit  propagating  through  the  pipeline  logic  is 
masked by a NAND gate, which has a zero input. Significant 
research was conducted to evaluate the real impact of SEU 
978-1-4673-1625-5/12/$31.00 ©2012 IEEE
and SET on microprocessors. For instance, Hang and Yagil 
[3] used logic derating (LD) to determine the impact of SEU 
on  processor  behavior.  Fault  injection  was  employed  to 
estimate LD for an Intel Itanium processor [3, 4]. A different 
approach,  relying  on  architectural  vulnerability  factors 
(AVF) and architecturally correct execution (ACE) bits, was 
developed by Mukherjee et al. [5]. Corruption of an ACE bit 
is  assumed  to  lead  to  a  visible  error,  and  the  AVF  is 
expressed as the percentage of time different microprocessor 
structures  contain  ACE  bits.  AVF  is  commonly  estimated 
with  the  aid  of  performance  simulators.  Other  papers  also 
report research related to evaluation of derating factors and 
architectural  vulnerability.  Additional  details  on  this  topic 
may be found in [6-10].  
For  processor designers, it is also important to accurately 
estimate the soft error rates (SER) experienced by different 
circuits  in  future  process  technologies  to  be  used  for 
manufacturing new products. SER is derived by modeling in 
the  early  stages  of 
the  process  development  or  by 
measurements, when test-chips are available. This rate is also 
known  as  nominal  SER. Measurements  show  that  SER  per 
bit,  both  for  SRAM  and  sequential  logic,  is  decreasing 
slightly  with  scaling.  This  effect  is  explained  by  the  lower 
charge  collection area, and better  circuit design  techniques. 
However,  the  number  of  storage  cells  in  a  processor  is 
increasing  dramatically,  due  to  the  continuously  higher 
functionality. As a result, the SER of modern processors will 
increase  if  error  handling  features  are  not  added.  Presently 
sequential  logic  (latches,  flip-flops)  represent  the  main 
contributors  to  processor  SER  because  most  large  SRAM 
structures are protected by error correcting codes (ECC) and 
parity [11]. That is why our study concentrates on the impact 
of soft errors experienced by sequential logic. 
Computer  manufacturers  have  been  trying  to  mitigate  SEU 
impact  for  decades  [12-14].  However,  the  higher  the 
reliability the greater the performance, area, power, and cost 
penalties. As a consequence, it is vital to determine the most 
sensitive  units  of  the  processor  in  the  early  stages  of  the 
development  process.  In  this  way,  error  handling  features 
may be used to protect only the most sensitive areas, limiting 
the overhead. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:22:35 UTC from IEEE Xplore.  Restrictions apply. 
power-  and  area-efficiency  reasons,  significant  sections  of 
the  design  are  shared  between  the  two  threads.    Typically, 
executing code presents very bursty demands for bandwidth 
and execution resources, so efficiently sharing large on-chip 
bandwidth  and  structures  between  two  threads  reduces 
overall area and power.   However, some chip resources and 
latencies are critical for performance, so other sections of the 
module  are  replicated  and  dedicated  to  a  single  thread  to 
achieve  robust  per-thread  performance,  most  notably  the 
integer  units  including  the  load/store  units  and  level  1 data 
caches. As a consequence, a traditional dual-core processor 
uses one Bulldozer module, a quad-core processor employs 
two modules, and so forth. 
Figure  1  shows  a  block  diagram  for  the  Bulldozer 
module.    The  top  portion  of  the  diagram  shows  the  shared 
frontend of the design.  It is collectively referred to as the ID 
unit  and  is  comprised  of  the  branch  prediction  block,  the 
instruction fetch  block, and the decode block.  Each block is 
shared between the two threads and performs work to deliver 
decoded  instructions  to  the  dedicated  integer  units  and  the 
shared  floating-point  (FP)  unit  shown  across  the  middle  of 
the  diagram.    The  interface  to  the  execution  units  is  called 
dispatch  and  presents  the  internal  format  of  operations  that 
are required to fully implement x86 instructions. 
execution 
scheduler, 
out-of-order 
The  integer  units  are  identical  and  replicated  one  per 
thread.    Each  unit  performs  work  on  behalf  of  a  single 
thread,  and  all  resources  within  that  unit  are  dedicated  for 
that thread.  The integer unit consists of the integer renaming 
logic, 
datapaths 
(collectively  referred  to  as  EXSC),  and  the  load/store  unit 
and level 1 data cache (LS.)  The load/store unit performs all 
load and store accesses to the first-level data cache.  Any FP 
operations are dispatched to the shared FP unit, where they 
execute  and  report  completion  status  back  to  the  parent 
integer unit.  One key feature of the FP unit is support for FP 
multiply-accumulate  instructions  (FMAC)  in  which  the 
common  sequence  of  multiply  feeding  an  add  operation  is 
fused  into  a  single  instruction.    Each  integer  unit  is 
responsible  for  coordinating  instruction  retirement  and 
interrupts for the thread assigned to it.  
The  level  1  data  caches  and  data  translation  look-aside 
buffers (TLB) in each integer unit are backed by the shared 
level  2  cache  and  level  2  TLB  as  well  as  a  shared  data 
prefetcher.    These  shared  blocks  comprise  the  cache  unit 
(CU) and also service instruction fetch requests that miss the 
level 1 instruction cache and instruction TLBs. More details 
on  Bulldozer  module  architecture  and  design  solutions  are 
available in [15, 16]. 
III.  SIMULATED ERROR INJECTION FOR ESTIMATING SER 
DERATING  
A.  Deriving SER Derating 
Verilog  HDL  was  used  to  design  the  Bulldozer  module  at 
the  register-transfer 
level.  C++  custom  software  was 
developed  for  performing  error  injection  in  the  same 
environment. In   our   terminology “error” is  used instead 
of “fault”,  to denote   that   data is   always corrupted when  
Figure 1. Bulldozer module architecture. 
In this paper we present the error injection methodology, 
and 
the  experimental  results  obtained  by  performing 
simulated error injection in the register-transfer level (RTL) 
model of the latest Advanced Micro Devices multiprocessor 
building block, called the Bulldozer module. The errors are 
injected  into  sequential  logic  cells,  and  derating  factors  for 
SER are derived. The large number of latches and flip-flops 
in  the  module  (about  half  a million) and  the  complexity of 
the  design  raise  serious  practical  problems.  For  instance, 