#### 流流连线（视窗连线）
假设你的网站上有搜寻功能，而你想要找出搜寻 URL 的近期趋势。每当有人键入搜寻查询时，都会记录下一个包含查询与其返回结果的事件。每当有人点选其中一个搜寻结果时，就会记录另一个记录点选事件。为了计算搜寻结果中每个 URL 的点选率，你需要将搜寻动作与点选动作的事件连在一起，这些事件透过相同的会话 ID 进行连线。广告系统中需要类似的分析【85】。
如果使用者丢弃了搜寻结果，点选可能永远不会发生，即使它出现了，搜寻与点选之间的时间可能是高度可变的：在很多情况下，它可能是几秒钟，但也可能长达几天或几周（如果使用者执行搜寻，忘掉了这个浏览器页面，过了一段时间后重新回到这个浏览器页面上，并点选了一个结果）。由于可变的网路延迟，点选事件甚至可能先于搜寻事件到达。你可以选择合适的连线视窗 —— 例如，如果点选与搜寻之间的时间间隔在一小时内，你可能会选择连线两者。
请注意，在点选事件中嵌入搜寻详情与事件连线并不一样：这样做的话，只有当用户点选了一个搜寻结果时你才能知道，而那些没有点选的搜寻就无能为力了。为了衡量搜寻质量，你需要准确的点选率，为此搜寻事件和点选事件两者都是必要的。
为了实现这种型别的连线，流处理器需要维护 **状态**：例如，按会话 ID 索引最近一小时内发生的所有事件。无论何时发生搜寻事件或点选事件，都会被新增到合适的索引中，而流处理器也会检查另一个索引是否有具有相同会话 ID 的事件到达。如果有匹配事件就会发出一个表示搜寻结果被点选的事件；如果搜寻事件直到过期都没看见有匹配的点选事件，就会发出一个表示搜寻结果未被点选的事件。
#### 流表连线（流扩充）
在 “[示例：使用者活动事件分析](ch10.md#示例：使用者活动事件分析)”（[图 10-2](../img/fig10-2.png)）中，我们看到了连线两个资料集的批处理作业示例：一组使用者活动事件和一个使用者档案资料库。将使用者活动事件视为流，并在流处理器中连续执行相同的连线是很自然的想法：输入是包含使用者 ID 的活动事件流，而输出还是活动事件流，但其中使用者 ID 已经被扩充套件为使用者的档案资讯。这个过程有时被称为使用资料库的资讯来 **扩充（enriching）** 活动事件。
要执行此连线，流处理器需要一次处理一个活动事件，在资料库中查询事件的使用者 ID，并将档案资讯新增到活动事件中。资料库查询可以透过查询远端资料库来实现。但正如在 “[示例：使用者活动事件分析](ch10.md#示例：使用者活动事件分析)” 一节中讨论的，此类远端查询可能会很慢，并且有可能导致资料库过载【75】。
另一种方法是将资料库副本载入到流处理器中，以便在本地进行查询而无需网路往返。这种技术与我们在 “[Map 侧连线](ch10.md#Map侧连线)” 中讨论的杂凑连线非常相似：如果资料库的本地副本足够小，则可以是记忆体中的散列表，比较大的话也可以是本地磁碟上的索引。
与批处理作业的区别在于，批处理作业使用资料库的时间点快照作为输入，而流处理器是长时间执行的，且资料库的内容可能随时间而改变，所以流处理器资料库的本地副本需要保持更新。这个问题可以透过变更资料捕获来解决：流处理器可以订阅使用者档案资料库的更新日志，如同活动事件流一样。当增添或修改档案时，流处理器会更新其本地副本。因此，我们有了两个流之间的连线：活动事件和档案更新。
流表连线实际上非常类似于流流连线；最大的区别在于对于表的变更日志流，连线使用了一个可以回溯到 “时间起点” 的视窗（概念上是无限的视窗），新版本的记录会覆盖更早的版本。对于输入的流，连线可能压根儿就没有维护任何视窗。
#### 表表连线（维护物化检视）
我们在 “[描述负载](ch1.md#描述负载)” 中讨论的推特时间线例子时说过，当用户想要检视他们的主页时间线时，迭代使用者所关注人群的推文并合并它们是一个开销巨大的操作。
相反，我们需要一个时间线快取：一种每个使用者的 “收件箱”，在传送推文的时候写入这些资讯，因而读取时间线时只需要简单地查询即可。物化与维护这个快取需要处理以下事件：
* 当用户 u 传送新的推文时，它将被新增到每个关注使用者 u 的时间线上。
* 使用者删除推文时，推文将从所有使用者的时间表中删除。
* 当用户 $u_1$ 开始关注使用者 $u_2$ 时，$u_2$ 最近的推文将被新增到 $u_1$ 的时间线上。
* 当用户 $u_1$ 取消关注使用者 $u_2$ 时，$u_2$ 的推文将从 $u_1$ 的时间线中移除。
要在流处理器中实现这种快取维护，你需要推文事件流（传送与删除）和关注关系事件流（关注与取消关注）。流处理需要维护一个数据库，包含每个使用者的粉丝集合。以便知道当一条新推文到达时，需要更新哪些时间线【86】。
观察这个流处理过程的另一种视角是：它维护了一个连线了两个表（推文与关注）的物化检视，如下所示：
```sql
SELECT follows.follower_id AS timeline_id,
    array_agg(tweets.* ORDER BY tweets.timestamp DESC)
FROM tweets
JOIN follows ON follows.followee_id = tweets.sender_id
GROUP BY follows.follower_id
```
流连线直接对应于这个查询中的表连线。时间线实际上是这个查询结果的快取，每当底层的表发生变化时都会更新 [^iii]。
[^iii]: 如果你将流视作表的衍生物，如 [图 11-6](../img/fig11-6.png) 所示，而把一个连线看作是两个表的乘法u·v，那么会发生一些有趣的事情：物化连线的变化流遵循乘积法则：(u·v)'= u'v + uv'。换句话说，任何推文的变化量都与当前的关注联络在一起，任何关注的变化量都与当前的推文相连线【49,50】。
#### 连线的时间依赖性
这里描述的三种连线（流流，流表，表表）有很多共通之处：它们都需要流处理器维护连线一侧的一些状态（搜寻与点选事件，使用者档案，关注列表），然后当连线另一侧的讯息到达时查询该状态。
用于维护状态的事件顺序是很重要的（先关注然后取消关注，或者其他类似操作）。在分割槽日志中，单个分割槽内的事件顺序是保留下来的。但典型情况下是没有跨流或跨分割槽的顺序保证的。
这就产生了一个问题：如果不同流中的事件发生在近似的时间范围内，则应该按照什么样的顺序进行处理？在流表连线的例子中，如果使用者更新了它们的档案，哪些活动事件与旧档案连线（在档案更新前处理），哪些又与新档案连线（在档案更新之后处理）？换句话说：你需要对一些状态做连线，如果状态会随著时间推移而变化，那应当使用什么时间点来连线呢【45】？
这种时序依赖可能出现在很多地方。例如销售东西需要对发票应用适当的税率，这取决于所处的国家 / 州，产品型别，销售日期（因为税率时不时会变化）。当连线销售额与税率表时，你可能期望的是使用销售时的税率参与连线。如果你正在重新处理历史资料，销售时的税率可能和现在的税率有所不同。
如果跨越流的事件顺序是未定的，则连线会变为不确定性的【87】，这意味著你在同样输入上重跑相同的作业未必会得到相同的结果：当你重跑任务时，输入流上的事件可能会以不同的方式交织。
在资料仓库中，这个问题被称为 **缓慢变化的维度（slowly changing dimension, SCD）**，通常透过对特定版本的记录使用唯一的识别符号来解决：例如，每当税率改变时都会获得一个新的识别符号，而发票在销售时会带有税率的识别符号【88,89】。这种变化使连线变为确定性的，但也会导致日志压缩无法进行：表中所有的记录版本都需要保留。