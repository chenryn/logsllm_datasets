between the two execution traces. For instance, while the
instructions from thread 1 and 2 are interleaved in the ﬁrst
trace, they are executed in groups in the second trace. Note that
while the threads share global memory locations (a source of
dependency), the accesses are not concurrent in any interleaving.
For instance in Figure 1, although the main thread and the
ﬁrst thread access the ﬁrst slot in arr at lines 5 and 21, there
can be no other execution of the program where line 21 is
executed before line 5 due to the explicit synchronization call
pthread_join (line 19).
The goal of TraceSanitizer is to transform these traces in
a way that preserves functionally relevant deviations, e.g., de-
viating variable values, and eliminates functionally irrelevant
deviations, e.g., deviating addresses of memory objects repre-
0
...
1
2
...
3
4
5
6
0 call-main 0 1 7ffcfe3287e8
0 alloca 7ffcfe3282e8 8
0 alloca 7ffcfe3282e0 8
0 store 3 603d74
0 store 6 603d78
0 call-pthread_create 0
0 call-pthread_create 0
(cid:2)→ 7ffcfe3282e8 0 400ae0 0
(cid:2)→ 7ffcfe3282e0 0 4012c0 0
1 call-inc 0
1 alloca 7f0ccbc55d58 8
0 load 7f0ccbc56700 7ffcfe3282e8
7
8
9
10 1 alloca 7f0ccbc55d50 8
11 1 store 0 7f0ccbc55d50
12 1 load 3 603d74
13 2 call-dec 0
14 2 alloca 7f0ccb454d58 8
15 1 store 4 603d74
16 2 alloca 7f0ccb454d50 8
17 2 store 0 7f0ccb454d50
18 2 load 6 603d78
19 0 call-pthread_join 0 7f0ccbc56700 0
20 0 load 7f0ccb455700 7ffcfe3282e0
21 2 store 5 603d78
22 0 call-pthread_join 0 7f0ccb455700 0
...
0
...
1
2
...
3
4
5
6
0 call-main 0 1 7ffda8e0e598
0 alloca 7ffda8e0e098 8
0 alloca 7ffda8e0e090 8
0 store 3 603d74
0 store 6 603d78
0 call-pthread_create 0
0 call-pthread_create 0
(cid:2)→ 7ffda8e0e098 0 400ae0 0
(cid:2)→ 7ffda8e0e090 0 4012c0 0
0 load 7fd5571d9700 7ffda8e0e098
7
1 call-inc 0
8
1 alloca 7fd5571d8d58 8
9
10 1 alloca 7fd5571d8d50 8
11 1 store 0 0 7fd5571d8d50
12 1 load 3 603d74
13 1 store 4 603d74
14 2 call-dec 0
15 2 alloca 7fd5569d7d58 8
16 2 alloca 7fd5569d7d50 8
17 2 store 0 7fd5569d7d50
18 2 load 6 603d78
19 2 store 5 603d78
20 0 call-pthread_join 0 7fd5571d9700 0
21 0 load 7fd5569d8700 7ffda8e0e090
22 0 call-pthread_join 0 7fd5569d8700 0
...
Fig. 2. Execution traces from two executions of the program in Figure 1.
senting these variables. TraceSanitizer leverages the explicit
synchronization in multi-threaded programs to simplify the
comparison in EPA.
In summary, TraceSanitizer addresses two sources of execu-
tion non-determinism that cause spurious trace deviations.
1. Non-deterministic memory allocations: For portability
reasons, programs should not make assumptions about memory
layout, and leave memory management entirely to the OS.
Consequently, the addresses of memory objects that programs
operate on should be irrelevant to the program’s functionality,
and should not distort execution trace comparisons for EPA, nor
any other analysis reasoning about the program’s functionality.
2. Non-deterministic thread scheduling: To maximize
CPU utilization and thereby improve throughput, the CPU
scheduler may suspend threads that execute blocking instruc-
tions, e.g., when waiting for I/O or lock access, and schedule
another thread. The decision of which thread is executed after
some other thread has been suspended is dynamically made
by the CPU scheduler at run time, and may differ across re-
peated program executions depending on system load and other
factors. As a result, the sequence of instructions in the execu-
tion trace can deviate across repeated executions. For thread
safe programs, these deviations do not affect their function-
ality and should not affect trace comparisons. A deviation in
the order of instructions in an execution trace does not neces-
sarily result in non-deterministic values read or written by the
program (as shown in Figure 2). In this case, re-executing the
program might result in a different interleaving of instruction,
but still lead to the same effects on the program’s data, which
holds especially for programs that implement the MapReduce
paradigm.
The problem of whether a program is thread safe is outside
the scope of this work, and is covered elsewhere [19], [7].
IV. SANITIZING ALGORITHMS
We present a novel approach to address non-deterministic
memory allocation and thread scheduling in EPA. The core idea
behind our approach is to leverage the structure of a pseudo-
deterministic programs to apply two trace sanitizing algorithms,
54
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:30:10 UTC from IEEE Xplore.  Restrictions apply. 
(cid:31)
(cid:30)(cid:3)
(cid:9)(cid:23)(cid:10)(cid:12)(cid:13)(cid:1)
(cid:6)(cid:20)(cid:24)(cid:25)(cid:23)(cid:26)(cid:19)(cid:13)(cid:20)(cid:25)(cid:10)(cid:25)(cid:16)(cid:21)(cid:20)
(cid:32)
(cid:9)(cid:23)(cid:10)(cid:12)(cid:13)(cid:1)
(cid:5)(cid:13)(cid:20)(cid:13)(cid:23)(cid:10)(cid:25)(cid:16)(cid:21)(cid:20)
(cid:9)(cid:23)(cid:10)(cid:12)(cid:13)(cid:1)
(cid:5)(cid:13)(cid:20)(cid:13)(cid:23)(cid:10)(cid:25)(cid:16)(cid:21)(cid:20)
(cid:33)
(cid:34)
(cid:9)(cid:23)(cid:10)(cid:12)(cid:13)(cid:1)(cid:8)(cid:10)(cid:20)(cid:16)(cid:25)(cid:16)(cid:29)(cid:16)(cid:20)(cid:14)
(cid:7)(cid:13)(cid:27)(cid:13)(cid:23)(cid:24)(cid:16)(cid:11)(cid:16)(cid:18)(cid:16)(cid:25)(cid:28)(cid:1)
(cid:3)(cid:15)(cid:13)(cid:12)(cid:17)
(cid:2)(cid:11)(cid:21)(cid:23)(cid:25)
(cid:9)(cid:23)(cid:10)(cid:12)(cid:13)(cid:1)(cid:8)(cid:10)(cid:20)(cid:16)(cid:25)(cid:16)(cid:29)(cid:16)(cid:20)(cid:14)
(cid:35)
(cid:9)(cid:23)(cid:10)(cid:12)(cid:13)(cid:1)
(cid:3)(cid:21)(cid:19)(cid:22)(cid:10)(cid:23)(cid:16)(cid:24)(cid:21)(cid:20)
(cid:4)(cid:13)(cid:27)(cid:16)(cid:10)(cid:25)(cid:16)(cid:21)(cid:20)
(cid:7)(cid:13)(cid:22)(cid:21)(cid:23)(cid:25)
Fig. 3. Overview of TraceSanitizer.
each dealing with a speciﬁc source of non-determinism. We
ﬁrst introduce the notion of pseudo-deterministic traces and
describe a corresponding automated reversibility check. We
then describe TraceSanitizer, our prototype implementation,
and show how it soundly compares traces.
A. Overview
Figure 3 overviews TraceSanitizer’s workﬂow. To obtain a
fault-free execution trace (golden run), we ﬁrst instrument the
program to log the executed instructions (step 1 ) and generate
a trace by running the instrumented program 2 . These ﬁrst
two steps are fundamental building blocks of EPA and we can
reuse the existing implementation of LLFI EPA tool [17], which
we only slightly modify to deal with multi-threaded programs
and include more data in the traces. Next, we run our trace
sanitizing algorithms on the generated trace in step 3 . We then
run the reversibility check to verify whether the generated trace
satisﬁes the pseudo-deterministic condition. If the condition
holds, the comparison of its traces is guaranteed to be free
from false positives induced by scheduling non-determinism. In
case it does not satisfy it, we abort the process. It is important
to note that the reversibility check is run only once on the
fault-free trace and its results are valid for comparison with
any faulty trace given the same inputs. To perform EPA, we
inject multiple faults into the instrumented program, re-run
steps 2 - 3 to generate faulty execution traces (faulty runs),
and compare that trace against the fault-free trace (step 5 ) to
identify how the program execution has been affected by each
injected fault.
We introduce our notation and the pseudo-deterministic con-
dition in Section IV-B, followed by the sanitizing algorithms
and the reversibility check in Section IV-C.
B. System Model
We adopt a general and simple model to describe execution
traces of a multi-threaded program. An execution trace is a
sequence of events σ = e1, e2, ..., en. An execution trace is
said to be feasible for a program if its sequence of events
follows an order that is allowed by the program’s semantics.
Every event can be directly mapped to an executed instruction
such as spawning a new thread or synchronizing with other
threads. For simplicity, we focus on read and write events. We
write e ∈ σ for any event that has been executed by σ. To
refer to the total order of events incurred by a trace σ, we
write ei ≺σ ej if i < j and ei, ej ∈ σ. We refer to the thread
that executed an event e as T id(e) ∈ T where T is the set of
threads that are spawned during execution.
We deﬁne a binary dependency relation D between events
(cid:2)
based on the memory objects they access. Two events e and e
are said to be dependent if they both access the same object
o and at least one of them is a write event. In that case, we
(cid:2)) ∈ D. We write Dtr to refer to the transitive
write (e, e
closure of D. That is, if (ei, ej) ∈ Dtr and (ej, ek) ∈ Dtr
then (ei, ek) ∈ Dtr, and if (ei, ek) ∈ D then (ei, ek) ∈ Dtr.
For our sanitizing algorithms to be sound and to result in a
false-positive free EPA, the considered execution traces need
to satisfy the pseudo-deterministic condition.
Deﬁnition 1 (pseudo-deterministic traces): A trace σ =
e1, e2, ..., en is said to satisfy the pseudo-deterministic condi-
tion if and only if:
1) for every event e ∈ σ, the next event executed by T id(e)
and the value it reads or writes are solely determined by
, e) ∈ Dtr or T id(e) =
the events e
T id(e
2) for every two dependent events (ei, ej) ∈ D such that
ei ≺σ ej, there is no other feasible interleaving of the
trace σ
(cid:2) ≺σ e such that (e
(cid:2)
(cid:2)) (local determinism), and
(cid:2) where ej ≺σ(cid:3) ei (reversibility).
The local determinism condition excludes programs with inher-
ent non-deterministic behavior. The nature of an event (control
ﬂow) and the value it reads/writes (data ﬂow) is solely deter-
mined by the events it depends on or events executed by the
same thread. Threads in a multi-threaded program act accord-
ing to the data they read. Intuitively, the next instruction to
be executed by each thread and how it modiﬁes the program’s
data depends the values it has read and its program counter
position. That is, given two interleavings of a program, for a
certain thread t at a certain program counter position, if all
the values read by t so far are the same, the next instruction
to be executed by that same thread and the value it reads or
writes are guaranteed to be the same in both interleavings. For
instance, the value generated by invoking a random number
generator is neither determined by the events it depends on
nor the events executed by the same thread. We refer to the
subsequence of events that fully specify an event as its deter-
mining events. For a trace σ = e1, e2, . . . , en and event ei ∈ σ,
its determining events subsequence σei contains only events
ej ≺σ ei such that (ej, ei) ∈ Dtr or T id(ej) = T id(ei). Thus,
(cid:2)
e for a
given a feasible interleaving σ
common event e, the value written/read by e is guaranteed to
be the same.
(cid:2) of σ such that σe = σ
A trace satisﬁes the reversibility condition if there can be
(cid:2) where two dependent events (ei, ej) ∈ D
no interleaving σ
(cid:4)= σej since
occur in a reversed order. This implies that σ
ej and ei ∈ σej . In this case, it is possible for event ej
ei /∈ σ
(cid:2)
to read/write a different value (data deviation). Thus, different
data values may be observed over repeated executions.
(cid:2)
ej
C. Algorithms
If a trace satisﬁes the pseudo-deterministic condition, mem-
ory addresses are allocated in the same order by each thread.
The threads are spawned in the same order by the same parent
threads for any feasible interleaving of the trace. In this sec-
tion, we present our two sanitizing algorithms: 1) A memory
55
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:30:10 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 2: Thread abstraction algorithm.
input
output : A map M of concrete thread IDs in σ to canonical IDs
: Execution trace σ
that are deterministic across traces from repeated
executions, as long as the pseudo-deterministic
condition holds
1 M ← (cid:6)(cid:7);
2 Q ← ∅;
3 T ← σ.getAllThreads();
4 G ← (T,∅);
5 foreach t ∈ T do
foreach t
(cid:2) ∈ t.getSpawnedThreads() do
(cid:2)) to G;
append (t, t
8 tc ← G.getRootNode();
9 M [tc] ← “T 0”;
10 push tc to Q;
11 while Q (cid:8)= ∅ do // breadth-ﬁrst search
tc ← Q.pop();
i ← 0;