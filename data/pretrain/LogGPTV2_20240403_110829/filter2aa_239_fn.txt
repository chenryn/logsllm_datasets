        if (rootFrame.Content == null)
        {
          rootFrame.Navigate(typeof(MainPage), e.Arguments);
        }
        Window.Current.Activate();
      }
现在，可以运行应用程序，在Page2中输入状态，暂停和终止程序，再次启动它，再
次显示状态。
在应用程序的生命周期中，需要为UWP应用程序进行特殊的编程，以考虑电池的耗
费。下一节讨论在应用程序间共享数据，这也可以用于手机平台。
33.5 共享数据
如果应用程序提供与其他应用程序的交互，就会更有用。在Windows 
10中，应用程
序可以使用拖放操作共享数据，甚至桌面应用程序也这样做。在Windows应用程序之间，
也可以使用共享协定分享数据。
使用共享协定时，一个应用程序（共享源）可以用许多不同的格式共享数据，例如文
本、HTML、图片或自定义数据，用户可以选择接收数据格式的应用程序，作为共享目
标。Windows使用安装时应用程序注册的协定，找到支持相应数据格式的应用程序。
33.5.1 共享源
关于共享，首先要考虑的是确定哪些数据以何种格式共享。可以共享简单文本、富文
本、HTML和图像，也可以共享自定义类型。当然，其他应用程序（即共享目标）必须知
道且能使用所有这些类型。对于自定义类型，只有知道该类型且是该类型的共享目标的应
用程序才能共享它。示例应用程序提供了文本格式的数据和HTML格式的图书列表。
为了用HTML格式提供图书信息，定义了一个简单的Book类（代码文件SharingSource
\ Models\ Book.cs）：
    public class Book
    {
      public string Title { get; set; }
      public string Publisher { get; set; }
    }
Book对象列表从BooksRepository类的GetSampleBooks方法中返回（代码文件
SharingSource \Models \ BooksRepository.cs）：
    public class BooksRepository
    {
      public IEnumerable GetSampleBooks() =>
        new List()
        {
        new Book
        {
          Title = "Professional C# 6 and .NET 5 Core",
          Publisher = "Wrox Press"
        },
        new Book
        {
          Title = "Professional C# 5.0 and .NET 4.5.1",
          Publisher = "Wrox Press"
        }
        };
    }
要把Book对象列表转换为HTML，扩展ToHtml方法通过LINQ to XML返回一个HTML
表（代码文件SharingSource \ Utilities\ BooksExtensions.cs）：
    public static class BookExtensions
    {
      public static string ToHtml(this IEnumerable books) =>
        new XElement("table",
        new XElement("thead",
          new XElement("tr",
            new XElement("td", "Title"),
            new XElement("td", "Publisher"))),
        books.Select(b =>
          new XElement("tr",
            new XElement("td", b.Title),
            new XElement("td", b.Publisher)))).ToString();
    }
  注意： LINQ to XML参见第27章。
在MainPage中定义了一个按钮，用户可以通过它启动共享，再定义一个文本框控
件，供用户输入要共享的文本数据（代码文件SharingSource \ MainPage.xaml）：
在后台代码文件中，DataSharing属性返回ShareDataViewModel，其中实现了所有重要
的分享功能（代码文件SharingSource \ MainPage.xaml.cs）：
public ShareDataViewModel DataSharing { get; set; } = new ShareDataViewModel();
ShareDataViewModel定义了XAML文件绑定的属性SimpleText，用于输入要共享的简
单文本。对于分享，把事件处理程序方法ShareDataRequested分配给DataTransferManager
的事件DataRequested。用户请求共享数据时，触发这个事件（代码文件
SharingSource\ViewModels\ ShareDataViewModel.cs）：
    public class ShareDataViewModel
    {
      public ShareDataViewModel()
      {
        DataTransferManager.GetForCurrentView().DataRequested +=
        ShareDataRequested;
      }
      public string SimpleText { get; set; } = string.Empty;
      //...
当触发事件时，调用OnShareDataRequested方法。这个方法接收DataTransferManager
作为第一个参数，DataRequestedEventArgs作为第二个参数。在共享数据时，需要填充
args.Request.Data引用的DataPackage。可以使用Title、Description和Thumbnail属性给用户
界面提供信息。应共享的数据必须用一个SetXXX方法传递。示例代码分享一个简单的文
本和HTML代码，因此使用方法SetText和SetHtmlFormat。HtmlFormatHelper类帮助创建需
要共享的HTML代码。图书的HTML代码用前面的扩展方法ToHtml创建（代码文件
SharingSource\ViewModels\ShareDataViewModel.cs）：
    private void ShareDataRequested(DataTransferManager sender,
      DataRequestedEventArgs args)
    {
      var books = new BooksRepository().GetSampleBooks();
      Uri baseUri = new Uri("ms-appx:///");
      DataPackage package = args.Request.Data;
      package.Properties.Title = "Sharing Sample";
      package.Properties.Description = "Sample for sharing data";
      package.Properties.Thumbnail = RandomAccessStreamReference.CreateFromUri(
        new Uri(baseUri, "Assets/Square44x44Logo.png"));
      package.SetText(SimpleText);
      package.SetHtmlFormat(HtmlFormatHelper.CreateHtmlFormat(books.ToHtml()));
    }
如果需要共享操作何时完成的信息，例如从源应用程序中删除数据，DataPackage类
就触发OperationCompleted和Destroyed事件。
  注意： 除了提供文本或HTML代码之外，其他方法，比如SetBitmap、SetRtf
和SetUri，也可以提供其他数据格式。
  注意： 如果需要在ShareDataRequested方法中使用异步方法构建要共享的数
据，需要使用一个延期，在数据可用时提供信息。这类似于本章前面介绍的页面暂停
机制。使用DataRequestedEventArgs类型的Request属性，可以调用GetDeferral方法。这
个方法返回一个DataRequestedDeferral类型的延期。使用这个对象，可以在数据可用时
调用Complete方法。
最后，需要显示分享的用户界面。这允许用户选择目标应用程序：
    public void ShowShareUI()
    {
      DataTransferManager.ShowShareUI();
    }
图33-3展示了调用DataTransferManager的ShowShareUI方法后的用户界面。根据所提
供的数据格式和安装的应用程序，显示相应的应用程序，作为选项。
图33-3
如果选择Mail应用，就传递HTML信息。图33-4显示在这个程序中接收的数据。
图33-4
  注意： 在Windows 8中，用户可以使用功能区开始共享应用程序中的数据。
这样，如果数据不可用于分享，就一定要给用户提供信息，说明分享需要做什么工
作，例如，首先选择一项或者输入一些数据。可以返回这些错误信息，在
DataRequestedEventArgs类型的Request属性上调用方法FailWithDisplayText。在Windows
10中，需要显式地提供一个可见的控件（例如按钮），用户可以开始共享。如果没有
数据可用来分享，就不提供这个可见的控件。
33.5.2 共享目标
现在看看共享内容的接收者。如果应用程序应从共享源中接收信息，就需要将其声明
为共享目标。图33-5显示了清单设计器在Visual Studio中的Declarations页面，在其中可以
定义共享目标。在这里添加Share 
Target声明，它至少要包含一种数据格式。可能的数据
格式是Text、URI、Bitmap、HTML、StorageItems或RTF。还可以添加文件扩展名，以指
定应支持哪些文件类型。
图33-5
在注册应用程序时，要使用软件包清单中的信息。这告诉Windows，哪些应用程序可
用作共享目标。示例应用程序SharingTarget为Text和HTML定义了共享目标。
用户把应用程序启动为共享目标时，就在App类中调用OnShareTargetActivated方法，
而不是OnLaunched方法。这里创建另一个页面（ShareTargetPage），显示用户选择这款应
用程序作为共享目标时的屏幕（代码文件SharingTarget / App.xaml.cs）：
    protected override void OnShareTargetActivated(ShareTargetActivatedEventArgs 
args)
    {
      Frame rootFrame = CreateRootFrame();
      rootFrame.Navigate(typeof(ShareTargetPage), args.ShareOperation);
      Window.Current.Activate();
    }
为了不在两个不同的地方创建根框架，应该重构OnLaunched方法，把框架创建代码
放在一个单独的方法CreateRootFrame中。这个方法现在在OnShareTargetActivated和
OnLaunched中调用：
    private Frame CreateRootFrame()
    {
      Frame rootFrame = Window.Current.Content as Frame;
      if (rootFrame == null)
      {
        rootFrame = new Frame();
        rootFrame.NavigationFailed += OnNavigationFailed;
        Window.Current.Content = rootFrame;
      }
      return rootFrame;
    }
OnLaunched方法的变化如下所示。与OnShareTargetActivated相反，这个方法导航到
MainPage：
    protected override void OnLaunched(LaunchActivatedEventArgs e)
    {
      Frame rootFrame = CreateRootFrame();
      if (rootFrame.Content == null)
      {
        rootFrame.Navigate(typeof(MainPage), e.Arguments);
      }
      Window.Current.Activate();
    }
ShareTargetPage包含控件，用户可以在其中看到共享数据的信息，如标题和描述，还
包括一个组合框，显示了用户可以选择的可用数据格式（代码文件SharingTarget 
/
ShareTargetPage.xaml）：
在后台代码文件中，把ShareTargetPageViewModel分配给ViewModel属性。在前面的
XAML代码中，这个属性使用了编译绑定。另外在OnNavigatedTo方法中，把
ShareOperation对象传递给Activate方法，激活SharedTargetPageViewModel 
（代码文件
SharingTarget / ShareTargetPage.xaml.cs）：
    public sealed partial class ShareTargetPage: Page
    {
      public ShareTargetPage()
      {
        this.InitializeComponent();
      }
      public ShareTargetPageViewModel ViewModel { get; } =
        new ShareTargetPageViewModel();
      protected override void OnNavigatedTo(NavigationEventArgs e)
      {
        ViewModel.Activate(e.Parameter as ShareOperation);
        base.OnNavigatedTo(e);
      }
    }
类ShareTargetPageViewModel为应该显示在页面中的值定义了属性，还实现
INotifyProperty-Changed接口，为更改通知定义了属性（代码文件
SharingTarget/ViewModels/ShareTargetViewModel.cs）：
      public class ShareTargetPageViewModel: INotifyPropertyChanged
      {
        public event PropertyChangedEventHandler PropertyChanged;
        public void OnPropertyChanged([CallerMemberName] string propertyName = nu
ll)
        {
          PropertyChanged? .Invoke(this, new PropertyChangedEventArgs(propertyNam
e));
        }
        // etc.
        private string _text;
        public string Text
        {
          get { return _text; }
          set
          {
          _text = value;
          OnPropertyChanged();
          }
        }
        private string _html;
        public string Html
        {
          get { return _html; }
          set
          {
          _html = value;
          OnPropertyChanged();
          }
        }
        private string _title;
        public string Title
        {
          get { return _title; }
          set
          {
          _title = value;
          OnPropertyChanged();
          }
        }
        private string _description;
        public string Description
        {
          get { return _description; }
          set
          {
          _description = value;
          OnPropertyChanged();
          }
        }
      }
Activate方法是ShareTargetPageViewModel的一个重要部分。这里，ShareOperation对
象用于访问共享数据的信息，得到一些可用于显示给用户的元数据，如Title、Description
和可用数据格式的列表。如果出错，就调用ShareOperation的ReportError方法，把错误信
息显示给用户：
        public class ShareTargetPageViewModel: INotifyPropertyChanged
        {
          // etc.
          private ShareOperation _shareOperation;
          private readonly ObservableCollection _shareFormats =
            new ObservableCollection();
          public string SelectedFormat { get; set; }
          public IEnumerable ShareFormats => _shareFormats;
          public void Activate(ShareOperation shareOperation