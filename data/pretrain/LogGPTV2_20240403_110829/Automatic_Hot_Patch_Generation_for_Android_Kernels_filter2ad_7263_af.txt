patches have the same semantics as the oﬃcial patches, they
can ﬁx the real vulnerabilities rather than merely pass the
tests.
6.2 Hot Patching Framework
ClearView [41] is an automatic error patching framework at
the binary level. It builds models for the normal execution
of the program and detects abnormal executions, which are
considered as errors. Once errors occur, it looks for the in-
variants and generates patches based on them. ClearView will
perform the self-evaluation to determine whether the patches
ﬁx the errors. Bouncer [15] adopts attack detector DFI [12]
to identify vulnerability exploits. Then it leverages both static
and dynamic symbolic execution to generate the ﬁlters to
drop the bad input before passing to the vulnerable program.
Embroidery [55] is a hot-patching framework for outdated
Android systems. It uses both static and dynamic analysis to
build a binary rewriting engine to patch the vulnerabilities.
Instaguard [13] is a hot-patching framework for Android aims
to ﬁx the vulnerabilities without adding code to the original
programs. Instead, it uses the patch speciﬁcation to generate
rules to mitigate the vulnerabilities. Our work is complimen-
tary for those works as our output hot patches can serve as
the inputs for their patching frameworks.
7 Conclusions
In this work, we have deﬁned the automatic hot patch gener-
ation problem. We studied the patch behaviors of the recent
real-world Android vulnerabilities and proposed approaches
to automatically generate hot patches, which can be applied
directly to the Android kernels without aﬀecting the user ex-
periences. To demonstrate the capability of the approach, we
have developed a tool, named Vulmet, which can generate
the semantic equivalent code changes by learning from the
semantics of the oﬃcial vulnerability patches via program
analysis. The experiments demonstrated Vulmet’s capability
to generate correct hot patches for ﬁxing the real-world CVEs.
The generated hot patches were tested to show that they can
maintain the robustness of the program while keeping a very
low overhead.
Acknowledgement
This research was supported (in part) by the National
Research Foundation, Prime Ministers Oﬃce, Singapore
under its National Cybersecurity R&D Program (Award
No. NRF2018NCR-NCR005-0001), National Satellite of
Excellence in Trustworthy Software System (Award No.
NRF2018NCR-NSOE003-0001) administered by the Na-
tional Cybersecurity R&D Directorate, and Alibaba-NTU JRI
project (M4062640.J4A).
References
[1] Android security bulletin. https://source.android.
com/security/bulletin.
[2] Antutu benchmark. http://www.antutu.com/en/.
[3] Cf-bench.
https://play.google.com/store/
apps/details?id=eu.chainfire.cfbench&hl=
en_SG.
[4] Cve-2014-4943
patch.
https://git.
kernel.org/pub/scm/linux/kernel/
USENIX Association
29th USENIX Security Symposium    2411
git/torvalds/linux.git/commit/?id=
3cf521f7dc87c031617fd47e4b7aa2593c2f3daf.
[5] Cve-2014-9873
patch.
https:
//source.codeaurora.org/quic/
la/kernel/msm/commit/?id=
ef29ae1d40536fef7fb95e4d5bb5b6b57bdf9420.
[6] Cve-2015-8940
patch.
https:
//source.codeaurora.org/quic/
la/kernel/msm-3.10/commit/?id=
e13ebd727d161db7003be6756e61283dce85fa3b.
[7] Cve-2016-4470
patch.
https://git.
kernel.org/pub/scm/linux/kernel/
git/torvalds/linux.git/commit/?id=
38327424b40bcebe2de92d07312c89360ac9229a.
[8] Cve-2016-8457
patch.
https://github.
com/aosp-mirror/kernel_msm/commit/
e5c1b001a822e8b38680655c400e7b3f67cc3323.
[9] Cve-2018-17182
patch.
https://git.
kernel.org/pub/scm/linux/kernel/
git/torvalds/linux.git/commit/?id=
7a9cdebdcc17e426fb5287e4a82db1dfe86339b2.
[10] Ida pro. https://www.hex-rays.com/products/
ida/.
[11] List for hot patch semantics. https://sites.google.
com/view/usenix-auto-patch-paper.
[12] Castro, M., Costa, M., and Harris, T. Securing software
In Proceedings of
by enforcing data-ﬂow integrity.
the 7th symposium on Operating systems design and
implementation (2006), USENIX Association, pp. 147–
160.
[13] Chen, Y., Li, Y., Lu, L., Lin, Y.-H., Vijayakumar, H.,
Wang, Z., and Ou, X. Instaguard: Instantly deployable
hot-patches for vulnerable system programs on android.
In 2018 Network and Distributed System Security Sym-
posium (NDSS’18) (2018).
[14] Chen, Y., Zhang, Y., Wang, Z., Xia, L., Bao, C., and Wei,
T. Adaptive android kernel live patching. In Proceed-
ings of the 26th USENIX Security Symposium (USENIX
Security 17) (2017).
[15] Costa, M., Castro, M., Zhou, L., Zhang, L., and Peinado,
M. Bouncer: Securing software by blocking bad input.
In ACM SIGOPS Operating Systems Review (2007),
vol. 41, ACM, pp. 117–130.
[17] Dijkstra, E. W., and Scholten, C. S. Predicate calculus
and program semantics. Springer Science & Business
Media, 2012.
[18] Faruki, P., Bharmal, A., Laxmi, V., Ganmoor, V., Gaur,
M. S., Conti, M., and Rajarajan, M. Android security:
a survey of issues, malware penetration, and defenses.
IEEE communications surveys & tutorials 17, 2 (2015),
998–1022.
[19] Gupta, R., Pal, S., Kanade, A., and Shevade, S. Deepﬁx:
Fixing common c language errors by deep learning. In
AAAI (2017), pp. 1345–1351.
[20] Horn, J. A cache invalidation bug in linux memory
management.
[21] Kaleeswaran, S., Tulsian, V., Kanade, A., and Orso,
A. Minthint: Automated synthesis of repair hints. In
Proceedings of the 36th International Conference on
Software Engineering (2014), ACM, pp. 266–276.
[22] Ke, Y., Stolee, K. T., Le Goues, C., and Brun, Y. Re-
pairing programs with semantic code search (t).
In
Automated Software Engineering (ASE), 2015 30th
IEEE/ACM International Conference on (2015), IEEE,
pp. 295–306.
[23] Kim, D., Nam, J., Song, J., and Kim, S. Automatic patch
generation learned from human-written patches. In Pro-
ceedings of the 2013 International Conference on Soft-
ware Engineering (2013), IEEE Press, pp. 802–811.
[24] Le Goues, C., Dewey-Vogt, M., Forrest, S., and Weimer,
W. A systematic study of automated program repair: Fix-
ing 55 out of 105 bugs for $8 each. In 34th International
Conference on Software Engineering, ICSE 2012, June
2-9, 2012, Zurich, Switzerland (2012), IEEE, pp. 3–13.
[25] Li, F., and Paxson, V. A large-scale empirical study
of security patches. In Proceedings of the 2017 ACM
SIGSAC Conference on Computer and Communications
Security (2017), ACM, pp. 2201–2215.
[26] Lin, Z., Jiang, X., Xu, D., Mao, B., and Xie, L. Au-
topag: towards automated software patch generation
with source code root cause identiﬁcation and repair. In
Proceedings of the 2nd ACM symposium on Information,
computer and communications security (2007), ACM,
pp. 329–340.
[16] Cui, W., Peinado, M., Wang, H. J., and Locasto, M. E.
Shieldgen: Automatic data patch generation for un-
In Se-
known vulnerabilities with informed probing.
curity and Privacy, 2007. SP’07. IEEE Symposium on
(2007), IEEE, pp. 252–266.
[27] Liu, H., Chen, Y., and Lu, S. Understanding and gen-
erating high quality patches for concurrency bugs. In
Proceedings of the 2016 24th ACM SIGSOFT interna-
tional symposium on foundations of software engineer-
ing (2016), ACM, pp. 715–726.
2412    29th USENIX Security Symposium
USENIX Association
[28] Long, F., and Rinard, M. Staged program repair with
condition synthesis. In Proceedings of the 2015 10th
Joint Meeting on Foundations of Software Engineering
(2015), ACM, pp. 166–178.
[29] Long, F., and Rinard, M. An analysis of the search
spaces for generate and validate patch generation sys-
tems. In Software Engineering (ICSE), 2016 IEEE/ACM
38th International Conference on (2016), IEEE, pp. 702–
713.
[30] Long, F., and Rinard, M. Automatic patch generation
by learning correct code. ACM SIGPLAN Notices 51, 1
(2016), 298–312.
[31] Long, F., Sidiroglou-Douskos, S., Kim, D., and Rinard,
M. Sound input ﬁlter generation for integer overﬂow
errors. Acm sigplan notices 49, 1 (2014), 439–452.
[32] Ma, S., Thung, F., Lo, D., Sun, C., and Deng, R. H. Vurle:
Automatic vulnerability detection and repair by learning
from examples. In European Symposium on Research
in Computer Security (2017), Springer, pp. 229–246.
[33] Martinez, M., and Monperrus, M. Mining software
repair models for reasoning on the search space of auto-
mated program ﬁxing. Empirical Software Engineering
20, 1 (2015), 176–205.
[34] Mechtaev, S., Yi, J., and Roychoudhury, A. Direct-
ﬁx: Looking for simple program repairs. In Proceed-
ings of the 37th International Conference on Software
Engineering-Volume 1 (2015), IEEE Press, pp. 448–458.
[35] Medeiros, I., Neves, N. F., and Correia, M. Automatic
detection and correction of web application vulnerabil-
ities using data mining to predict false positives.
In
Proceedings of the 23rd international conference on
World wide web (2014), ACM, pp. 63–74.
[36] Mokhov, S. A., Laverdiere, M.-A., and Benredjem, D.
Taxonomy of linux kernel vulnerability solutions. In
Innovative Techniques in Instruction Technology, E-
learning, E-assessment, and Education. Springer, 2008,
pp. 485–493.
[37] Monperrus, M. Automatic software repair: a bibliog-
raphy. ACM Computing Surveys (CSUR) 51, 1 (2018),
17.
[38] Mulliner, C., Oberheide, J., Robertson, W., and Kirda,
E. Patchdroid: Scalable third-party security patches for
android devices. In Proceedings of the 29th Annual Com-
puter Security Applications Conference (2013), ACM,
pp. 259–268.
[39] Muntean, P., Kommanapalli, V., Ibing, A., and Eckert,
C. Automated generation of buﬀer overﬂow quick ﬁxes
In International
using symbolic execution and smt.
Conference on Computer Safety, Reliability, and Secu-
rity (2014), Springer, pp. 441–456.
[40] Nguyen, H. A., Nguyen, A. T., Nguyen, T. T., Nguyen,
T. N., and Rajan, H. A study of repetitiveness of code
changes in software evolution. In Proceedings of the
28th IEEE/ACM International Conference on Automated
Software Engineering (2013), IEEE Press, pp. 180–190.
[41] Perkins, J. H., Kim, S., Larsen, S., Amarasinghe, S.,
Bachrach, J., Carbin, M., Pacheco, C., Sherwood, F.,
Sidiroglou, S., Sullivan, G., et al. Automatically patch-
ing errors in deployed software. In Proceedings of the
ACM SIGOPS 22nd symposium on Operating systems
principles (2009), ACM, pp. 87–102.
[42] Qi, Z., Long, F., Achour, S., and Rinard, M. An analysis
of patch plausibility and correctness for generate-and-
validate patch generation systems. In Proceedings of
the 2015 International Symposium on Software Testing
and Analysis (2015), ACM, pp. 24–36.
[43] Razmov, V., and Simon, D. R. Practical automated ﬁlter
generation to explicitly enforce implicit input assump-
tions. In Computer Security Applications Conference,
2001. ACSAC 2001. Proceedings 17th Annual (2001),
IEEE, pp. 347–357.
[44] Schulte, E., Forrest, S., and Weimer, W. Automated
program repair through the evolution of assembly code.
In Proceedings of the IEEE/ACM international confer-
ence on Automated software engineering (2010), ACM,
pp. 313–316.
[45] Sidiroglou, S., and Keromytis, A. D. Countering net-
work worms through automatic patch generation. IEEE
Security & Privacy 3, 6 (2005), 41–49.
[46] Sidiroglou-Douskos, S., Lahtinen, E., Long, F., and Ri-
nard, M. Automatic error elimination by horizontal code
transfer across multiple applications. In ACM SIGPLAN
Notices (2015), vol. 50, ACM, pp. 43–54.
[47] Sotirov, A. Hotpatching and the rise of third-party
patches. In Black Hat Technical Security Conference,
Las Vegas, Nevada (2006).
[48] Soto, M., Thung, F., Wong, C.-P., Le Goues, C., and Lo,
D. A deeper look into bug ﬁxes: patterns, replacements,
In Proceedings of the 13th
deletions, and additions.
International Conference on Mining Software Reposito-
ries (2016), ACM, pp. 512–515.
[49] Sui, Y., and Xue, J. Svf: interprocedural static value-ﬂow
analysis in llvm. In Proceedings of the 25th Interna-
tional Conference on Compiler Construction (2016),
ACM, pp. 265–266.
USENIX Association
29th USENIX Security Symposium    2413
[50] Sui, Y., Ye, D., and Xue, J. Detecting memory leaks
IEEE
statically with full-sparse value-ﬂow analysis.
Transactions on Software Engineering 40, 2 (2014), 107–
122.
[51] Tian, Y., Lawall, J., and Lo, D. Identifying linux bug
In Proceedings of the 34th Interna-
ﬁxing patches.
tional Conference on Software Engineering (2012),
IEEE Press, pp. 386–396.
[52] Weimer, W., Nguyen, T., Le Goues, C., and Forrest, S.
Automatically ﬁnding patches using genetic program-
ming. In Proceedings of the 31st International Confer-
ence on Software Engineering (2009), IEEE Computer
Society, pp. 364–374.
[53] Xie, X., Chen, B., Zou, L., Lin, S.-W., Liu, Y., and Li, X.
Loopster: static loop termination analysis. In Proceed-
ings of the 2017 11th Joint Meeting on Foundations of
Software Engineering (2017), ACM, pp. 84–94.
[54] Zhang, M., and Yin, H. Appsealer: Automatic gener-
ation of vulnerability-speciﬁc patches for preventing
component hijacking attacks in android applications. In
NDSS (2014).
[55] Zhang, X., Zhang, Y., Li, J., Hu, Y., Li, H., and Gu, D.
Embroidery: Patching vulnerable binary code of frag-
mentized android devices. In Software Maintenance and
Evolution (ICSME), 2017 IEEE International Confer-
ence on (2017), IEEE, pp. 47–57.
[56] Zhong, H., and Su, Z. An empirical study on real bug
ﬁxes. In Proceedings of the 37th International Confer-
ence on Software Engineering-Volume 1 (2015), IEEE
Press, pp. 913–923.
2414    29th USENIX Security Symposium
USENIX Association