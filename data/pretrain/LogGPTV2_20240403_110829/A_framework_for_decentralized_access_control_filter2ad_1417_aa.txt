title:A framework for decentralized access control
author:Meenakshi Balasubramanian and
Abhishek Bhatnagar and
Namit Chaturvedi and
Atish Datta Chowdhury and
Arul Ganesh
Decentralized Access Control
Sandra Siby
School of Computer and Communication Sciences
Decentralized and Distributed Systems lab
EDIC Semester Project
January 2018
Responsible
Prof. Bryan Ford
EPFL / DEDIS
Supervisor
Eleftherios Kokoris-Kogias
EPFL / DEDIS
I. INTRODUCTION
Access control is the management of access to a resource.
This can be in the physical world (for example, access to a
room) or in the virtual world (for example, access to a ﬁle).
When we consider a simple access control model where a
public key is given access to a resource, we are faced with
various questions on how we can extend this model and create
a system that allows for easy, ﬂexible management of access
control and user identity management.
In this project, we design, implement and test a decentralized
access control system. Our system is based on the concept of
policies – a set of rules. We delve into the structure of these
policies and how they can be used to provide not only access
control, but also identity management. We investigate how ac-
cess requests can be created and veriﬁed. Finally, we evaluate
our system by performing some benchmark tests.
The report is organized as follows: In Section II, we discuss
the motivation and the key goals of the project. We describe
the design and implementation details in Section III. Section
IV outlines our benchmark tests to evaluate the system perfor-
mance. We discuss some related work in Section V. Finally,
we discuss possible improvements in Section VI.
II. MOTIVATION AND GOALS
We consider a simple access control model, as shown in
Figure 1. In this model, there is a resource which provides
some kind of access (for example, read access) to a public
key.
1
The aim of this project is to answer the questions posed above.
We want to design and implement a system that can achieve
the following:
• Creation and management of access control rules.
• Management of user identities independent of the access
control rules.
organization.
• Creation and management of groups of users for better
• Evolution of user identities and access control with time.
III. DESIGN AND IMPLEMENTATION
Currently, there are various models to enforce access control
[1]. Mandatory Access Control (MAC) is a model in which
both resources and users have certain security labels. A global
policy determines accesses based on the labels. MAC is typ-
ically used when security is of high priority (for example, in
military applications). It enforces a strict checking mechanism.
On the other hand, in the Discretionary Access Control (DAC)
model, the owner of a resource determines who can access
the resource. Role-based Access Control (RBAC) is based on
the concept of roles and privileges. Users are assigned roles,
which come with a set of access privileges. RBAC is a popular
system and can be used to implement DAC and MAC.
Attribute-based Access Control (ABAC)
[2] is a model that
provides greater ﬂexibility. In ABAC, users, resources and
other variables are described using attributes. Access rights
are controlled using policies which are a set of rules that
can combine attributes. With ABAC, we can describe more
complex relationships among the parties in the system using
policies. In this project, we use an ABAC model and deﬁne
our own policy structure.
There exist access control languages to express policies, such
as XACML [3]. However, several of these languages tend
to be verbose and more difﬁcult to understand. Hence, we
use a simple JSON based access control language to describe
policies.
In the following sections, we describe our policy structure,
access requests and request veriﬁcation in detail.
A. Policy Structure
Figure 1: Simple access control model with static binding
between resource and user key.
Several questions arise when we consider this model. For
example, if the owner of the key decides to change her key,
how does this impact her access to the resource? Also, if the
owner of the resource want to provide access to multiple users,
should she specify this access rule for each user separately or
can she organize users into groups? We are also interested
in investigating if we can expand this model to accommodate
multiple rules or rules with conditions. Finally, we want to see
how we can handle changes to access control rules.
A policy consists of three components: ID, Version and Rules.
ID is a random identiﬁer generated at policy creation. A policy
can be accessed by using its ID. Version indicates the version
of the policy. Updates to the policy result in an increase in
the version number. Rules refer to a list of access control
rules.
A rule comprises three components: Action, Subjects and
Expression. Action refers to the type of activity that can
be performed on the resource. It is an application speciﬁc
string indicating the activity. Subjects is the list of users that
are allowed to perform an Action. We want to allow both
individuals and groups of users to be Subjects and for users
2
to have control over their identity policies, independent of the
access control policy. Hence, a Subject can either be a public
key or an ID denoting another Policy object.
In certain cases, we may require the functionality to express
conditions in access control rules. For example, access to
a particular document might need approval from another
party. To build more sophisticated rules, we introduce the
concept of Expressions. An Expression is a string of the form:
{operator : [operands]}. operator can be a logical operator
(such as AND/OR/NOT) and [operands] can be a list of Sub-
jects. An example would be: {AN D : [IDGr ou p1, IDBob]}.
In the context of signatures, this means that both IDGr ou p1
and IDBob’s signatures are required by a particular rule. We
can combine expressions to express more complex conditions
for rules. For example, the expression: {‘OR(cid:48) : [{‘AN D(cid:48) :
: [S3, S4]}]} evaluates to ((S1 AND S2)
[S1, S2]}, {‘AN D(cid:48)
OR (S3 AND S4)).
Thus, a rule consists of an Action, Subject and Expression.
In our model, we assume that a policy has a default Admin
rule, which is created at policy creation time. The creator of
the policy adds users to the Subjects parameter. The Subjects
in the Admin rule indicate the list of users that are allowed to
update the policy. A sample policy for a document, expressed
in the JSON based language, is shown in Figure 2. The policy
states that it has one Admin rule. The admins are S1 and
S2 and any changes to the policy require both S1 and S2’s
signatures.
Figure 2: Sample policy in JSON access control language.
Figure 3 shows an example of how we can use policies to
achieve both identity management and access control. Report
X has a Policy with three rules. One of the rules gives
access to Group A and Bob. Group A’s Policy has a rule
that allows access for Amy and Jake. Amy’s Policy contains
a rule with her public keys PK1 and PK2. Note that an empty
Expression ﬁeld means that there are no special conditions for
the Subjects. The policies can refer to each other using IDs.
Not only this, groups of policies can be formed, as in the case
of Group A. However, the three policies are maintained by
three separate parties and evolve independently of one another.
Changes to each policy are made by the admin group for that
policy (as stated by the Admin rule in the policy). The arrows
show how the Policy IDs can be used to link policies together.
In this example, there is a link from Report X’s Policy to
Amy’s key PK1, as indicated by the arrows.
Figure 3: Policies and Rules.
B. Access Requests and Veriﬁcation
We describe how requests to access a resource are created
and veriﬁed. A request should have information about the
access policy that allows the action the requester wants to
perform. Hence, a request consists of the policy and the
speciﬁc rule invoked. In addition to this, there might be extra
information required to complete a request. For example, a
set of documents might be governed by the same policy but
the requester might require access to a speciﬁc document.
Our request structure also consists of a message ﬁeld where
extra information can be provided. A request, Req, is of the
form:
Req = [IDPol ic y, Index Rul e, M],
where IDPol ic y is the ID of the target policy outlining the
access rules, Index Rul e is the index of the rule specifying
the access required by the requester and M is a message
describing extra information relevant to the request.
To have accountability and verify that the requester is allowed
to access the resource, we use signatures. The requester signs
the request with his key and creates a signature consisting
of the signed message and the public key used. A request
signature SigReq is of the form:
SigReq = [RS K, PK],
where RS K is the Req signed with the requester’s signing
key, SK, and PK is the requester’s corresponding public key.
An access request consists of the request and the signature,
(Req, SigReq). Note that the public key corresponding to the
key used to sign the request must be a key that is allowed to
access the resource under the access control policy and must
be present in SigReq.
On receiving an access request, the veriﬁer checks that the
RS K is present and correct. The veriﬁer then checks the
access proof : that there is a valid path from the target policy,
IDPol ic y, to the requester’s public key, PK. This may involve
multiple levels of checks, if the requesters key is not present
directly in the list of subjects but is included transitively in a
policy that is a subject. The veriﬁer searches along all paths
till PK is found. This check also takes the policy versions
into account – the path should consist of the latest versions
of the policies for the access proof to be valid.
Multi-signature requests: Sometimes, an access request may
require multiple parties to sign off. Conditions for multi-
signature approval can be described using the Expression ﬁeld
in the rules. For example, a rule might have an Expression
as follows: {AN D : [SigGr ou p1, SigBob]}. This means that
for a request to be valid, it should have Group1 and Bob’s
signatures. Hence, we need to introduce multi-signature access
requests.
An access request
the form
(Req, [SigReq]) where [SigReq] is a list of signatures from
the parties that are required for the access.
in this case would be of
The veriﬁcation process is similar to the single signature case.
The veriﬁer checks all the signatures in the list and obtains
a link from IDPol ic y to PK. In addition to the signature
check, the veriﬁer also checks that the signatures adhere to
the expression stated in the rule.
Figure
4 shows an example of the path veriﬁcation per-
formed by the veriﬁer. Report X has a policy with a Rule
granting read access to Bob and Amy. There is an ex-
pression stating that both Bob’s an Amy’s signatures are
required to obtain access. Hence, if Bob wants to access,
he sends a request (Req, [SigReq, Bob, SigReq, Amy]), where
Req = [1234, 2, “ReportX(cid:48)(cid:48)], SigReq, Bob = [RS K4, PK4] and
SigReq, Amy = [RS K1, PK1]. The veriﬁer checks the paths
from the policy to Bob’s PK4 and Amy’s PK1. Paths are
shown in red and blue respectively. Then the expression AND
: [0,1] is checked against the signatures. If all checks pass,
the request is considered to be veriﬁed.
Multipath Requesters: In cases where there are multiple paths
from the target access policy to the requester, evaluation of
expressions can be confusing. An example is shown in Figure
5. There are three paths from EPFL’s policy to Sandra’s policy.
If there is a rule in the EPFL policy with an expression stating
that a member of EDIC should sign a particular request, the
path EPFL− > EDIC− > Sandra has to be validated. If one
of the other paths is chosen, there is no proof that Sandra is
a part of the required EDIC.
3
Figure 4: Veriﬁer’s path checking for multi-signature requests.
have the veriﬁer obtain all the paths and check them against
the expression. The other option is to push path selection to the
requester. We describe the latter option in more detail.
Figure 5: Multiple paths from target policy to requester.
If the requester performs path selection, the signing process
can be changed to do a path search. When a request has to
be signed, the requester searches for all the paths from the
access policy to the requester. If there are multiple paths,
the requester selects the speciﬁc path he/she wants to use
and sends this information along with the signature. Thus,
a request signature, SigReq, is now of the form:
SigReq = [RS K, PK, Path],
where Path is the path from the target policy to the re-
quester.
On the veriﬁcation side, the veriﬁer ﬁrst checks the signature.
Then, the veriﬁer conﬁrms that Path is correct and that PK
is present at the end of Path.
C. Evolving Policies
Multipaths indicate that there should be some mechanism to
choose the correct path. One option to resolve this issue is to
We use access requests to update policies. An update to a
policy refers to a change in its rule set. An update to a policy
4
results in an increment in its version number. One method of
ensuring that we have a veriﬁed record of all policy updates is
to use the skipchain architecture [4] [5]. Each policy creates
its own policy skipchain and updates to a policy results in the
creation of a new block.
Figure 6 shows an example of how this skipchain based
system would work. Report X has a policy skipchain. The
latest version of the policy grants read access to Group A, of
which Bob is a member. Report X, Group A and Bob have
their own policy skipchains which they independently manage.
Bob can access Report X since he is a member of the group
that has access. If a new version of Report X’s policy (v3)
is created where Group A does not have access, its members
will no longer be able to read the document.
In case of an access request from Bob’s Key1 to Report X’s
policy, the path is shown in red. The rules in the latest policy
skipblock indicate which skipchain to access. The skiplinks
allow for fast traversal through the versions of the policy.
All access proofs would check the latest versions of the
policies, which would be the last skipblock in each policy
skipchain.
Figure 6: Evolution of policies using skipchains.