浅谈公共安全漏洞报告（CVE&NVD）中不一致性的检测  
原文章发表于USENIX2019：
### 摘要
公共漏洞库如公共漏洞和暴露（CVE）、国家漏洞数据库（NVD）在促进漏洞披露和缓解方面取得了巨大的成功。虽然这些数据库已经积累了大量数据，但人们对它们的信息质量和一致性越来越关注。本文中提出了一个自动化系统VIEM来检测完全标准化的NVD数据库与非结构化的CVE描述及其引用的漏洞报告之间的不一致信息，即声明漏洞版本范围过高或过低。
使用VIEM和过去20年里的78,296个CVE
ID和70,569个漏洞报告组成的大数据集检查信息一致性。结果表明，漏洞软件版本不一致非常普遍。只有59.82%的漏洞报告/CVE摘要严格匹配标准化NVD条目，并且不一致性程度随着时间的推移而增加。
### 一、漏洞报告介绍
**CVE。** 当人们发现一个新的漏洞时，他们可以向CVE编号机构（CNAS）请求一个唯一的CVE-ID号。Mitre公司是编辑和主要CNA。然后，CNA将对漏洞进行研究以确定详细信息，并检查之前是否报告过该漏洞。如果漏洞确实是新的，那么将分配一个CVE
ID，并通过CVE列表公开发布相应的漏洞信息。
CVE列表由MITRE维护，作为一个网站，CVE团队在其上发布每个报告的漏洞的摘要。在编写CVE摘要时，CVE团队将分析（公开）第三方漏洞报告，然后在其描述中包括详细信息，如受影响软件的名称、漏洞软件版本、漏洞类型以及漏洞利用。
除了摘要之外，每个CVE条目还包含一个外部引用列表。外部参考是指向第三方技术报告或博客/论坛帖子的链接，这些报告或博客/论坛帖子为CVE团队提供所需的信息，以便制定官方漏洞描述。有关CVE的信息可以帮助软件供应商和系统管理员确定漏洞软件的版本，评估其风险级别，并相应地执行补救措施。
**NVD。**
NVD（国家漏洞数据库）由与CVE不同的组织（即NIST）维护。NVD与CVE列表完全同步。目标是对CVE的任何更新都将立即出现在NVD中。当一个新的CVE
ID出现在CVE列表上后，NIST NVD团队将首先进行分析，以在创建NVD条目之前添加增强信息，如严重性评分。
与CVE相比，NVD提供了两个附加功能。首先，NVD数据条目是结构化的。NIST
NVD团队会将非结构化的CVE信息转换为结构化的JSON或XML，其中，易受攻击的软件名称和版本等信息字段将根据通用通用弱点枚举规范（CWE）进行格式化和标准化。第二，数据条目不断更新。NVD中的信息可在初始漏洞报告后（手动）更新。例如，随着时间的推移，NIST员工或外部人员可能会发现新的易受攻击的软件版本，这些版本将添加到现有的NVD条目中。
CVE和NVD数据库主要通过人工维护，这导致了许多重要问题。首先考虑到可能会在许多不同的地方报告和讨论一个漏洞，CVE/NVD数据库中的信息（例如，漏洞软件名称及其版本）的完整性如何？第二，考虑到社区不断努力研究报告的漏洞，目前的手动方法如何保持CVE/NVD条目的最新？
### 二、VIEM设计
为了精确定位和匹配感兴趣的对象，设计了VIEM（漏洞信息提取模型）来完成三个单独的任务为了便于未来的研究和应用开发，标记数据集和VIEM的源代码在：
__
**命名对象识别模型。**
首先，VIEM利用最先进的命名对象识别（NER）模型来识别感兴趣的对象，即漏洞软件的名称和版本、漏洞组件的名称和版本以及漏洞软件依赖的基础软件系统的名称和版本（参见下图b）。
这种设计背后的原因有两个。首先，NER模型根据输入文本的结构和语义来定位对象，这使得能够跟踪训练数据中未观察到的软件名称。第二，NER模型可以学习和区分与漏洞攻击和非漏洞软件版本相关的上下文，这可以消除不受影响的软件版本，只确定感兴趣的对象。
**关系提取模型。**
对于提取的对象，VIEM的下一个任务是对已识别的对象进行相应的配对。软件名称和版本共同出现在报表中是很常见的。因此，一种本能的反应是将附近的软件名称和版本分组，然后将它们视为漏洞软件-版本对。然而，这种直接的方法不适合本文问题。如下图c所示，漏洞软件名称并不与所有漏洞版本紧密相连。仅仅应用上面的方法可能不可避免地会错过漏洞软件的版本。
为了解决这个问题，VIEM首先要进行版本和软件名称之间所有可能的组合。然后，它使用关系提取（RE）模型来确定最可能的组合，并将它们视为正确的对象对。这种设计的基本原理如下。RE模型的最初设计不是为了在对象之间找到正确的对。相反，它负责确定一对对象的属性。例如，假设对RE模型进行了训练，以便为一对实体分配以下三个属性之一--“born
in”,“employed by” 和“capital of”。给定在文本“Steve Jobs was born in California,and
was the CEO of Apple.”中的两对对象 _P_ 1 = (“Steve Jobs”, “Apple“) 和 _P_ 2 = (“Steve
Jobs”,“California”)，一个RE模型将“employed by”分配给P1，将“born in”属性分配给P2。
(a)Openwall报告，其中包含漏洞的软件版本(2.3.x)和非漏洞版本(3.0.0及更高版本)。
(b)包含与漏洞软件相关的多个实体的CVE摘要（易受攻击组件：Windows font
library;漏洞的软件：.NETFramework、SkypeforBusiness、Lync、Silverl。
从属软件：windows；绑定到这些实体的软件版本)
(c)CVE摘要，其中易受攻击的软件的名称和版本不相邻
在模型中，每个可能的版本和软件组合都可以被视为一对单独的对象。利用关系提取模型的思想，VIEM为每对对象分配一个属性，表明对应实体关系的真实性。然后，它将相应的属性作为真正的对。以下图中的情况为例，有4个对象由2个软件（Microsoft
vbscript和Internet
Explorer）表示，2个版本范围（5.7、5.8和9到11）。它们可以用4种不同的方式组合。通过将这些组合视为4对不同的对象，可以使用一个RE模型为每个组合分配一个二分类属性。假设二分类属性指定是否应将相应的对象对分组为软件及漏洞版本，VIEM可以使用属性分配作为指标来确定对象对。应该注意的是用通用平台枚举（CPE）格式表示成对的对象。例如，cpe:/a:google:chrome:3.0.193.2:beta，其中google表示供应商，chrome表示产品，3.0.193.2表示版本号，beta表示软件更新。下图中W.E.和P.E分别表示单词和位置嵌入。
首先从文本中提取命名对象（漏洞软件名称和版本）,除此之外还集成了一个名录，以提高其提取漏洞软件名称的准确性。在高层，NER模型首先使用单词和字符嵌入的串联将文本序列编码为单词向量序列。这种嵌入过程是必要的，因为深度神经网络不能直接处理文本。然后以矢量序列作为输入，利用双向递归神经网络预测序列中每个单词的标签。下面将介绍主要的技术细节。
对于单词和字符嵌入，NER模型首先使用标准的单词嵌入方法将每个单词编码为矢量表示。然后，它利用双向门控循环联合（Bi-GRU）网络在字符级别执行文本编码。如下图所示，NER模型将这两个嵌入连接为一个向量序列，然后将其作为另一个Bi-GRU网络的输入。
**迁移学习。**
本文需要测评不同漏洞类型的漏洞报告，不同漏洞类型的报告不一定共享相同的数据分布。因此，使用单一机器学习模型来处理所有漏洞报告是不可行的，除非能构建并手动注释一个涵盖所有漏洞的大型培训数据集。不幸的是，没有这样的标记数据集可用，标记一个大型数据集需要大量的人力。为了解决这个问题，VIEM采用了迁移学习策略，该策略学习前面提到的NER，并使用一个主要类别中的漏洞报告重新建模，然后将其能力转移到其他漏洞类别。通过这种方式可以减少数据标记的工作，使VIEM对任意类型的漏洞报告有效。
### 三、数据集
本实验收集了过去20年大量的公共漏洞报告和CVE和NVD条目。对这些漏洞报告中的一个子集进行人工标记（真实值），并使用标记的数据评估VIEM的性能。
**CVE IDs。** 首先从cvedetails.com获取一个CVE
ID列表，将cve/nvd数据库中索引的安全漏洞分为13类。为了收集公开报告的漏洞的代表性数据集，对从1999年1月到2018年3月（超过20年）的每个漏洞类别的CVE
ID进行了爬行。CVE ID是公开漏洞的唯一标识符。尽管CVE网站声称他们拥有105000多个CVE ID，但其中许多CVE
ID尚未公开，或已被合并或撤销。总共获得了78296个CVE ID，涵盖了下图所示的所有13个类别。每个CVE ID对应于表1所示漏洞的简短摘要。
**漏洞报告。** 每个CVE
ID的网页还包含指向外部报告的外部引用列表。本文研究集中在5个具有代表性的源网站上，以获取CVE引用的漏洞报告，包括ExploitDB、SecurityFocus、SecurityTracker、OpenWall和SecurityFocus论坛。请注意，本实验将SecurityFocus和SecurityFocus论坛视为两个不同的网站。SecurityFocus站点仅显示“结构化”信息（例如受影响的操作系统、软件版本）。SecurityFocus论坛（也称Bugtraq
_邮件列表_
）主要包含漏洞报告者和软件开发人员之间的“非结构化”文章和讨论帖。关于其他三个网站，SecurityTracker还包含结构良好的信息，而Openwall和ExploitDB包含非结构化信息。
总共获得了与56,642个CVE ID相关的70,569个漏洞报告。 这些CVE ID覆盖了所有78,296个公共CVE ID的72.34％。
这意味着72.34％的CVE
ID都有来自5个源网站之一的漏洞报告，证实了它们的受欢迎程度。有来自SecurityTracker和SecurityFocus的45，812份结构化报告，以及DevelopitDB、OpenWall和SecurityFocus论坛的24，757份非结构化报告。