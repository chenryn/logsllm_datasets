messaging will be used. The concrete scenario and protocol are determined with
usage of the network attacks ontology depending on a type of the realizable goal
(intention) and the attacked network response. All set of the involved agents
realizing the concrete scenario compose a hierarchical structure.
7 Related Works
The works relevant to attack modeling and simulation can be divided into the
following groups: (1) works describing attacks and attack taxonomies, (2) works
immediately coupled with attack modeling and simulation, (3) works devoted to
the description of attack speciﬁcation languages; (4) works on evaluating IDSs;
(5) works on signature and traﬃc generation tools. This list is not exhaustive.
There are a lot of works in which attack cases are systematized as attack tax-
onomies (for example, [2], [7], [18], [24], [25], etc.). Based on these taxonomies we
built our own taxonomy as an ontology comprising a hierarchy of intentions and
actions of malefactors directed to implementation of attacks of various classes
split into macro- and micro-levels.
In diﬀerent works on attack modeling and simulation, as a rule, attack is
considered as temporal orderings of actions ([6], [8], [22], [23], [36], etc.). In [22]
the state transition analysis technique was developed to model host-based in-
trusions. A description of an attack has a “safe” starting state, zero or more
intermediate states, and (at least) one “compromised” ending state. States are
characterized by means of assertions describing diﬀerent aspects of the security
state. The work [6] presents an approach to simulate intrusions in sequential and
parallelized forms. The paper [23] suggests formal models of both network and
attacks and extends the state transition analysis technique to network-based
intrusion detection in order to represent attack scenarios in networks. In [8]
a simple network security model “Cause-Eﬀect Model of Information System
Attacks and Defenses” was proposed. It is composed of network model repre-
sented by node and link, cause-eﬀect model, characteristic functions, and pseudo-
random number generator. In ([39], [40]) the descriptive models of the network
and the attacker’s capabilities, intentions, and courses-of-action are described.
These models are used to identify the devices most likely to be compromised.
Principles from economics are used to predict the attacker’s behavior. Concep-
tual models of computer penetration were presented in [36]. The paper com-
pares the traditional and “new” attack paradigms. Traditional attack paradigm
includes phases of “information gathering”, “exploitation”, and “metastasis”.
The metastasis phase of the attack can be logically divided into sub-phases of
“consolidation” and “continuation”. The core of the new distributed metastasis
Attacks against Computer Network
235
methodology is a desire to utilize the distributed nature of network environment,
and to perform an automation of the metastasis phase using a distributed agent-
based approach. We used in our formal model the temporal orderings of actions
and proposed multi-agent teamwork-based approach for modeling of coordinated
distributed attacks.
In ([19], [32] and some other) attacks are modeled in a structured and reusable
“tree”-based form. In [19] a high-level conceptual model of attack based on the in-
truder’s intention (attack strategy) is presented. The paper determines intrusion
intention as the goal-tree: the root node corresponds to ultimate goal of attack,
and lower level nodes represent alternatives or ordered sub-goals in achieving
the upper node goal. In [32] means for documenting attacks in a form of attack
trees are described. Each attack tree enumerates and elaborates the ways that an
attacker could cause the event to occur. Two structures are used for attack rep-
resentation: an attack pattern (characterizing an individual type of attack), and
an attack proﬁle (organizing attack patterns to make it easier to apply them).
As in [19] and [32] we apply intension- and tree-based attack strategy represen-
tation, but “go further” using for node decomposition a formal framework based
on context-free grammars implemented in terms of state machines.
A model to evaluate survivability of networked systems after network inci-
dents was developed in [31]. The model consists of three sub-models: the ﬁrst
one simulates the occurrence of incidents, the second one evaluates the impact
of an attack on the system, and the third one assesses the survivability of the
system. The model of incidents is determined as a marked stochastic process,
where the incidents are the events that occur at random points in time, and the
event type is the mark associated with an incident. Besides attack generation
model, our approach includes also the model of attacked computer network that
evaluates the impact of an attack on the network hosts and generates reaction of
the network. The attacked network is considered as environment that reacts on
the malefactors’ actions. The variance of attacks is ensured by the random choice
of the grammar productions (or, what is the same, the state machine transition
rules). The peculiarity of any attack is that the malefactor’s strategy depends on
the results of the intermediate actions.
The paper [5] describes the cyber attack modeling and simulation method-
ology based on SES/MB (system entity structure and model base) framework
and Discrete Event Simulation (DEVS) formalism. This simulation methodol-
ogy allows classifying threats, specifying attack mechanisms, verifying protec-
tion mechanisms, and evaluating consequences. Our approach has resembling
purposes, but it uses stochastic formal-grammar-based speciﬁcation of the male-
factor’s intentions and scenarios of network attacks.
For attack ﬁxing, reproduction, analysis, recognition, response, document-
ing, special attack languages are used [38]: event languages ([3], etc.), exploit
languages ([4], etc.), reporting languages ([10], [13], etc.), detection languages
([12], [29], [34], etc.), correlation languages, response languages, and integrated
languages ([9], [30], etc.). Our formal language is related mostly to the exploit
and event languages, because it is used to describe attack stages and the for-
236
V. Gorodetski and I. Kotenko
mat of events generated. Our attack representation language includes parts used
for description of attack preconditions, attack intentions and actions, formats of
actions of terminal level, and postconditions (states of the attacked hosts).
In all works devoted to the evaluation of IDSs the attack simulation issues
are considered. In [35] a methodology and software tools for testing IDSs using
scripts to generate both background traﬃc and intrusions are described. In eval-
uations performed by the Lincoln Laboratory at MIT ([26], etc.), investigators
were given sniﬀed network traﬃc, audit data, and ﬁle-system snapshots. The re-
port [11] discusses issues associated with the generation of suitable background
traﬃc; attacks are obtained from a vulnerability database. In ([2], [27]) it was
marked that benchmarking IDSs is not generic and systematic enough for eval-
uation needs. In [2] another approach is investigated. It consists of comparing
and evaluating IDSs at the level of their speciﬁcation rather than at the level of
their implementation. Our approach also presumes that IDSs can be evaluated
and veriﬁed at diﬀerent phases of their development and implementation. The
more detailed level of attack representation is used in the attack model the more
advanced level of IDS is evaluated.
Now there are a lot of signature and traﬃc generation tools: FlameThrower,
Fragrouter, Hailstorm, IDS Informer, MS WCAT, nidsbench, SmartBits, Stick,
etc. But the majority of these tools are doing only simulated pseudorandom
malicious packets. As Marcus Ranum noticed in discussions on focus-idssecurity-
focus.com “Make sure that you’re not only generating “signatures” but that they
are within the context of apparently valid sessions - otherwise you’re actually
benchmarking an IDS’ ability to detect false positives, not real attacks.” On our
sight Hailstorm (Cenzic) [17] and IDS Informer (BLADE Software) [21] have
the most interesting properties. Hailstorm generates traﬃc based on patterns
specifying how a packet is to be generated over the network. IDS Informer
has been designed to allow launch S.A.F.E. (Simulated Attacks for Evaluation)
attacks. The S.A.F.E. process builds the attacks based on previously recorded
real attacks. In our approach the malicious and background traﬃc on the terminal
levels is formed within the context of valid sessions.
8 Conclusion
In the paper, attack is considered as competition of malefactor(s) and computer
network security system, i.e. attack-modeling task is considered as an adversary
domain. We proposed a formal grammar-based framework for attack modeling
and considered the basic issues of the attack simulator development. Formal
framework is built as a hierarchy of attribute stochastic context-free grammars
interconnected via the “grammar substitution” operation. The framework makes
it possible to specify and to simulate a wide spectrum of attacks at various levels
of detail. Software prototype of the attack simulator is developed. The attack
simulator allows simulating a wide spectrum of real-life attacks. The respective
software code is written using Visual C++ 6.0, Java 2 version 1.3.1, KQML and
Attacks against Computer Network
237
XML languages. The basic ideas of the modeling and simulation of coordinated
distributed attacks are developed.
Acknowledgments. This research is being funded by European Oﬃce of
Aerospace R&D (Projects #1994 P) and grant #01-01-108 of Russian Foun-
dation of Basic Research.
References
1. Aho, A.V., Ullman, J.D.: The Theory of Parsing, Translation, and Compiling, Vol.
1, 2, Prentice-Hall, Inc. (1972)
2. Alessandri, D., Cachin, C., Dacier, M., Deak, O., Julisch, K., Randell, B., Rior-
dan, J., Tscharner, A., Wespi, A., Wuest, C.: Towards a Taxonomy of Intrusion
Detection Systems and Attacks. MAFTIA deliverable D3. Version 1.01. Project
IST-1999-11583. Malicious- and Accidental-Fault Tolerance for Internet Applica-
tions (2001)
3. Bishop, M.: A standard audit trail format. Technical report, Department of Com-
puter Science, University of California at Davis (1995)
4. Custom Attack Simulation Language (CASL). Secure Networks (1998)
5. Chi, S.-D., Park, J.S., Jung, K.-C., Lee, J.-S.: Network Security Modeling and Cy-
ber Attack Simulation Methodology. Lecture Notes in Computer Science, Vol.2119
(2001)
6. Chung, M., Mukherjee, B., Olsson, R.A., Puketza, N.: Simulating Concurrent In-
trusions for Testing Intrusion Detection Systems: Parallelizing Intrusions. Proceed-
ings of the 18th NISSC (1995)
7. Cohen, F.B.: Information System Attacks: A Preliminary Classiﬁcation Scheme.
Computers and Security, Vol.16, No.1 (1997)
8. Cohen, F.: Simulating Cyber Attacks, Defenses, and Consequences. IEEE Sympo-
sium on Security and Privacy, Berkeley, CA (1999)
9. Cuppens, F., Ortalo, R.: Lambda: A language to model a database for detection
of attacks. RAID’2000, Lecture Notes in Computer Science, Vol.1907 (2000)
10. Curry, D.: Intrusion detection message exchange format, extensible markup lan-
guage (xml) document type deﬁnition. draft-ietf-idwg-idmef-xml-02.txt (2000)
11. Debar, H., Dacier, M., Wespi, A., Lampart, S.: An experimentation workbench for
intrusion detection systems. Research Report RZ-2998 (# 93044). IBM Research
Division, Zurich Research Laboratory (1998)
12. Eckmann, S.T., Vigna, G., Kemmerer, R.A.: STATL: An Attack Language for
State-based Intrusion Detection. Proceedings of the ACM Workshop on Intrusion
Detection, Athens, Greece (2000)
13. Feiertag, R., Kahn, C., Porras, P., Schnackenberg, D., Staniford-Chen, S., Tung,
B.: A common intrusion speciﬁcation language (cisl). speciﬁcation draft (1999)
14. Fu, K.S.: Syntactic Methods in Pattern Recognition, Academic Press, New York
(1974)
15. Glushkov, V., Tseitlin, G., Yustchenko, E.: Algebra, Languages, Programming.
Naukova Dumka Publishers, Kiev (1978) (In Russian).
16. Gorodetski, V., Karsayev, O., Kotenko, I., Khabalov, A.: Software Development
Kit for Multi-agent Systems Design and Implementation. Lecture Notes in Artiﬁcial
Intelligence, Vol. 2296, Springer Verlag (2002)
238
V. Gorodetski and I. Kotenko
17. Hailstorm. Users Manual, 1.0 (2000) http://www.clicktosecure.com/
18. Howard, J.D., Longstaﬀ, T.A.: A Common Language for Computer Security Inci-
dents, SANDIA REPORT, SAND98-8667 (1998)
19. Huang, M.-Y., Wicks, T.M.: A Large-scale Distributed Intrusion Detection Frame-
work Based on Attack Strategy Analysis. RAID’98, Louvain-la-Neuve (1998)
20. Icove, D., Seger K., VonStorch, W.: Computer Crime: A Crimeﬁghter’s Handbook,
O’Reilly & Associates, Inc., Sebastopol, CA (1995)
21. IDS Informer 3.0. User Guide. BLADE Software (2001)
22. Iglun, K., Kemmerer, R.A., Porras, P.A.: State Transition Analysis: A Rule-Based
Intrusion Detection System. IEEE Transactions on Software Engineering, Vol. 21,
No.3 (1995)
23. Kemmerer, R.A., Vigna, G.: NetSTAT: A network-based intrusion detection ap-
proach. Proceedings of the 14th ACSAC, Scottsdale, Arizona (1998)
24. Krsul, I.V.: Software Vulnerability Analysis, Ph.D. Dissertation, Computer Sci-
ences Department, Purdue University, Lafayette, IN (1998)
25. Lindqvist, U., Jonsson, E.: How to Systematically Classify Computer Security In-
trusions. Proceedings of the 1997 IEEE Symposium on Security and Privacy, IEEE
Computer Society Press, Los Alamitos, CA (1997)
26. Lippmann, R., Haines, J.W., Fried, D.J., Korba, J., Das, K.: The 1999 DARPA
oﬀ-line intrusion detection evaluation. RAID’2000, Lecture Notes in Computer
Science, Vol.1907 (2000)
27. McHugh, J.: The 1998 Lincoln Laboratory IDS Evaluation: A Critique. RAID’2000,
Lecture Notes in Computer Science, Vol.1907 (2000)
28. McHugh, J.: Intrusion and intrusion detection. International Journal of Informa-
tion Security, No.1 (2001)
29. Me, L.: Gassata, a genetic algorithm as an alternative tool for security audit trails
analysis. RAID’98, Louvain-la-Neuve (1998)
30. Michel, C., Me, L.: ADeLe: an Attack Description Language for Knowledge-based
Intrusion Detection. Proceedings of the 16th International Conference on Informa-
tion Security, Kluwer (2001)
31. Moitra, S.D., Konda S.L.: A Simulation Model for Managing Survivability of Net-
worked Information Systems, Technical Report CMU/SEI-2000-TR-020 ESC-TR-
2000-020 (2000)
32. Moore, A.P., Ellison, R.J., Linger, R.C.: Attack Modeling for Information Security
and Survivability. Technical Note CMU/SEI-2001-TN-001 (2001)
33. http://www.ontology.org/
34. Paxson, V.: Bro: A system for detecting network intruders in real-time. Proceedings
of the 7th Usenix Security Symposium (1998)
35. Puketza, N., Chung, M., Olsson, R.A., Mukherjee, B.: A Software Platform for
Testing Intrusion Detection Systems. IEEE Software, Vol.14, No.5 (1997)
36. Stewart, A.J.: Distributed Metastasis: A Computer Network Penetration Method-
ology. The Packet Factory (1999) (Phrack Magazine, Vol. 9, Issue 55)
37. Tambe, M.: Towards Flexible Teamwork. Journal of Artiﬁcial Intelligence Research,
No.7 (1997)
38. Vigna, G., Eckmann, S.T., Kemmerer, R.A.: Attack Languages. Proceedings of the
IEEE Information Survivability Workshop, Boston (2000)
39. Yuill, J., Wu, F., Settle, J., Gong, F., Huang, M.: Intrusion Detection for an On-
Going Attack. RAID’99, West Lafayette, Indiana, USA (1999)
40. Yuill, J., Wu, F., Settle, J., Gong, F., Forno, R., Huang, M., Asbery, J.: Intrusion-
detection for incident-response, using a military battleﬁeld-intelligence process.
Computer Networks, No. 34 (2000)