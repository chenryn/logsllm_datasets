(cid:9)x := time(), pc, m, h, t(cid:10) mx
(cid:3) (cid:9)stop, pc, m[x (cid:12)→ t], h, t + 1(cid:10)
S-NEW
loc /∈ dom(h)
(cid:9)e, m(cid:10) ⇓ n
size(cid:2)(h
(cid:9)einit , m(cid:10) ⇓ v
(cid:3)) ≤ mx((cid:2))
(cid:9)x := new(cid:2)(e, einit ), pc, m, h, t(cid:10) mx
(cid:3) = h[loc (cid:12)→ (μ, (cid:2))]
h
(cid:3) (cid:9)stop, pc, m[x (cid:12)→ loc], h
μ(x) =
, t + 1(cid:10)
(cid:3)
S-SET
(cid:9)e1, m(cid:10) ⇓ n
(cid:9)e2, m(cid:10) ⇓ v
0 ≤ n  0 {
x := null
// array x can now be reclaimed
} else {
skip
}
}
t1 := time ();
// GC time depends on whether
// array x is reclaimable
y
t2 := time ();
low := t2 - t1
:= new L (N ,0);
As before, the timing of the high conditional is protected with
an at command. Consider allocation on Line 15 that may trigger
garbage collection. If semantics of the GC allows collecting
high allocation in the low program counter, the amount of time
that the collector spends here will depend on whether the array
x can be reclaimed, affecting the value of t2. This motivates
that garbage collection should not collect high allocations when
the program counter is low.
B. Formal semantics for garbage collection
Using the above examples as guideline, we now formulate
the formal semantics for secure garbage collection. The
rule for garbage collection is given by transition relation
(cid:9)c, pc, m, h, t(cid:10) (cid:3)(cid:3)(cid:4) (cid:9)c, pc, m, h
(cid:3)(cid:10) that relates two conﬁg-
, t
urations before and after collection. Collection does not update
the current command or memory or the program counter level,
but updates the heap and consumes some time.
(cid:3)
Figure 10 presents the collection rule formally. To explain
the rule, we introduce the auxiliary concepts that it uses.
1) Abstract collection relation: The amount of time con-
sumed by the collection is in general implementation-speciﬁc.
We require the implementation to provide an interface for
collecting speciﬁc parts of the heap. We model this by an
(cid:3), where h is a subheap, and where
abstract relation h (cid:5)m
(cid:3) is the result of collection in h that takes time δ, given
h
memory m. An important constraint that we place on the (cid:5)
relation is that if two subheaps and starting memories are
isomorphic, then it must take the same amount of time to
δ h
700
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:35 UTC from IEEE Xplore.  Restrictions apply. 
GC-COLLECT
reach(m, h1 (cid:6) h2) ∩ dom(h2) = ∅
(cid:4)=pc = ∅
=pc
h1 = h1
δ h1
(cid:9)c, pc, m, h1 (cid:6) h2, t(cid:10) (cid:3)(cid:3)(cid:4) (cid:9)c, pc, m, h1, t + δ(cid:10)
h2
=pc (cid:6) h2 (cid:5)m
(cid:4)=pc (cid:6) h1
=pc
h1
Fig. 10: Reduction rule for garbage collection
collect in them. To formally express this, we introduce the
notion of substitutions. This notion of substitution is closely
related to the one by Banerjee and Naumann [6]. As we will see,
the substitution is also used later in the paper when deﬁning
our GC requirement.
Deﬁnition 1. (Substitution) A substitution φ : Val → Val is a
mapping such that
1) φ is identity on integers:
∀n . φ(n) = n.
2) φ is injective on locations:
∀loc loc
(cid:3)
. φ(loc) = φ(loc
(cid:3)) ⇒ loc = loc
(cid:3)
.
3) φ maps locations to locations:
∀loc ∈ Loc . φ(loc) ∈ Loc.
(cid:3)
Given a substitution φ, we write φ(m) = {(x, φ(v)) |
(x, v) ∈ m} and φ(h) = {(φ(loc), φ ◦ μ, (cid:2)) | (loc, μ, (cid:2)) ∈ h}.
is assumed that
For the remaining parts of the paper it
substitutions are bijective. That is,
(cid:3) ⇔ φ
∀v, v
−1(v
∼=φ w (resp. (m, h) ∼=φ (s, w)) when φ(h) = w
∼= w (resp. (m, h) ∼=φ
(resp. (φ(m), φ(h)) = (s, w)) and h
∼=φ w (resp.
(s, w)) when there exists a bijection φ such that h
(φ(m), φ(h)) = (s, w)). Two heaps are then isomorphic when
∼= w.
h
Using the notion of substitution, we formulate our assump-
We write h
. φ(v) = v
(cid:3)) = v.
tion on the abstract collection relation.
Assumption (Abstract collection). Consider two memories m
and s and two heaps h and w and a substitution φ such that
(s, w) = (φ(m), φ(h)). Then h (cid:5)m
(cid:3) implies w (cid:5)s
δ h
δ w
(cid:3)
If two heaps are isomorphic they are equal up to renaming
of locations, and the speciﬁc names of locations should not
affect the behaviour of garbage collection.
2) Heap partitioning based on a level: Given a heap h and
a level (cid:2), write h=(cid:2) for the heap that includes all allocations
tagged with security level (cid:2):
=(cid:2) (cid:2) {(x, μ, (cid:2)
h
(cid:3)) ∈ h | (cid:2)
(cid:3) = (cid:2)}.
and similarly, deﬁne the complement partition as
(cid:4)=(cid:2) (cid:2) {(x, μ, (cid:2)
h
(cid:3)) ∈ h | (cid:2)
(cid:3) (cid:13)= (cid:2)}.
3) Reachable locations: Since deciding whether or not a
location will be accessed in the future is undecidable [22],
we follow real world implementations of garbage collection
schemes, and treat a variable as live if it is reachable from the
current set of variables in the program. The set of reachable
values is then the values that are pointed to by variables in the
memory, or by following a chain of reachable locations on the
heap.
Deﬁnition 2 (Reachable locations). Given a memory m and
a heap h, the set of reachable locations reach(m, h) ⊆ Loc is
the smallest set such that
1) all locations in memory m are reachable:
cod(m) ∩ Loc ⊆ reach(m, h)
2) if loc ∈ reach(m, h) and h(loc) = (μ, (cid:2)) then locations
that the allocation μ points to are reachable:
cod(μ) ∩ Loc ⊆ reach(m, h)
Note that reach is monotonic, as expressed by the following
lemma.
Lemma 1 (Monotonicity of heap reachability). Given two
heaps h and w, if h ⊆ w then reach(m, h) ⊆ reach(m, w).
With these deﬁnitions at hand, let us examine the garbage
collection rule in Figure 10. The rule is deﬁned when the
program heap is split in two disjoint heaps h1 and h2, where
h2 is collected after the transition. That it is functionally
safe to collect h2 is ensured by the ﬁrst premise of the rule
that stipulates that no location in h2 is reachable from the
current conﬁguration. The remaining premises induce security
restrictions on the collection. We restrict h2 to only contain
allocations that are exactly at the level of the program counter
(cid:4)=pc = ∅,
level pc – this is expressed by the requirement h2
=pc = h2. The idea
which could alternatively be stated as h2
is to constrain collections at a speciﬁc level only when the
program counter matches that level. The rule further splits the
non-collectable heap h1 into two parts, based on the security
(cid:4)=pc. Only the
level: the pc-part h1
pc-part of the heap is used when invoking the abstract collector.
=pc and its complement h1
C. Functional correctness
The remaining part of this section shows that our garbage
collection strategy is functionally correct. That is, the collector
never claims memory that is accessed in the future. We start
with a formal deﬁnition of dangling pointer-freedom.
Deﬁnition 3 (Dangling pointer-freedom). Given a memory m
and heap h, say that (m, h) is free of dangling pointers when
1) all locations in the memory point to a valid location in
the heap:
cod(m) ∩ Loc ⊆ dom(h)
Given a level (cid:2), any heap h can be decomposed into a disjoint
union of its partition and its complement: h = h=(cid:2) (cid:6) h
(cid:4)=(cid:2).
2) pointers within heap are valid:
∀(μ, (cid:2)) ∈ cod(h) . cod(μ) ∩ Loc ⊆ dom(h)
701
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:35 UTC from IEEE Xplore.  Restrictions apply. 
Informally, if m and h do not contain dangling pointers,
then extending the heap does not increase reachability.
Lemma 2. Given memory m and h such that (m, h) is free
of dangling pointers then for all heaps w ⊇ h, it holds
reach(m, h) = reach(m, w)
For functional correctness, we show that adding the garbage
collection rule in Figure 10 to the set of possible transitions
does not modify the memory, nor the reachable part of the
heap.
There is a technical challenge to overcome. The speciﬁc
location allocated in the heap, and stored in the memory,
depends on the current size of the heap (cf. the semantics in
Figure 9). Thus by adding a garbage collector, which reduces
the size of the heap, the locations allocated and stored in the
memory will be different from the locations allocated without
ﬁrst reducing the size of the heap.
We therefore prove that the reachable parts of the heaps will
be equal up to renaming of locations. We use the notion of
substitution introduced earlier in Section V-B1 to relate pairs
of memories and heaps that have isomorphic reachable parts
but may have different amounts of garbage.
Deﬁnition 4 (Matching up to garbage). Consider two pairs of
memory and heaps (m, h) and (s, w). Say that (s, w) matches
(m, h) up to garbage via substitution φ, written (m, h) (cid:23)φ
(s, w) if reach(φ(m), φ(h)) = reach(s, w).
We write (m, h) (cid:23) (s, w) if there exists φ s.t. (m, h) (cid:23)φ
(s, w).
depend on garbage.
The following lemma states that the semantics does not
Let ω((cid:2)) = ∞ denote the constant ∞ function. The
ω
(cid:3) deﬁnes the semantics in an abstract setting with
relation
unbounded available memory.
Lemma 3 (Garbage independence in unbound heaps). For all
heaps h and w such that w ⊇ h, and (m, h) and (m, w) are
free of dangling pointers it holds that if
(cid:3) (cid:9)c
(cid:9)c, pc, m, h, t(cid:10) ω
(cid:3) (cid:9)c
(cid:3)
(cid:3)
, pc
(cid:3)
(cid:3)
(cid:3)
, m
(cid:3)
(cid:3)(cid:10)
, t
(cid:3)
, h
(cid:3)(cid:10) and (m
(cid:3)
, t
, pc
(cid:3)
, s
, w
(cid:3)) (cid:23)
, h
then (cid:9)c, pc, m, w, t(cid:10) ω
(cid:3)
(s
(cid:3)).
, w
The next lemma states that garbage collection only collects
garbage from the heap. That is, if garbage collection collects
some portion of the heap, then succeeding transitions do not
depend on the portion of the heap that has been collected.
Lemma 4 (Garbage only). If (m, h) is free of dangling pointers
and
(cid:9)c, pc, m, h, t(cid:10) mx
(cid:3) (cid:9)c
(cid:3)
, pc
(cid:3)
(cid:3)
, m
(cid:3)
, h
(cid:3)(cid:10)
, t
then for all s, w such that (s, w) is free of dangling pointers,
and (s, w) (cid:23) (m, h) we have
(cid:9)c, pc, s, w, t(cid:10) mx
(cid:3) (cid:9)c