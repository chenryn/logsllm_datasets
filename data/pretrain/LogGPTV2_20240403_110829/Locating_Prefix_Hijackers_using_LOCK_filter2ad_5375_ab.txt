B   H   T
M 2
B
H   T
H
X
C   D   T
M 3
C
H   T
D
Y
Z
T
p
A     T
M 1
A
B   T
M 2
B
C   D   T
M 3
C
  T
D
  T
H
X
Y
Z
T
p
D
T
p
M 3
C
( a )   B e f o r e   t h e   a t t a c k
( b )   H i j a c k e r   a n n o u n c e s   i t s e l f  
( c )   H i j a c k e r   a n n o u n c e s   i t s e l f  
( d )   H i j a c k e r   a n n o u n c e s   i t s e l f   a s   T
  a s   o r i g i n   A S
  a s   a   n e i g h o b r   o f   T
Figure 1: Control plane examples
T :   T a r g e t   A S       H :   H i j a c k e r   A S
t r a c e r o u t e   r e s p o n s e
:   p o l l u t e d   n o d e
:   u n a f f e c t e d   n o d e
d a t a - p l a n e   A S   p a t h
A     H
B   H
M 1
A
M 2
B
C   D   T
M 3
C
H
D
H
H
X
Y
Z
T
p
A     H     X   Y   Z   T
M 1
A
H   X   Y   Z   T
A       C   D   T
M 1
A
B   H   X   Y   Z   T
M 2
B
C   D   T
M 3
X
H
H   X   Y   Z   T
Y
Z
C
D
T
p
B   D   T
M 2
B
C   D   T
M 3
C
  C   D   T
H
  D   T
D
X
Y
Z
T
p
( a )   B l a c k h o l i n g   o r   I m p o s t u r e
( b )   I n t e r c e p t i o n
( c )   H i j a k e r   m a n i p u l a t e s   t r a c e r o u t e  
r e s p o n s e
Figure 2: Data plane examples
Figures 1(c) and (d) and Figures 2 (b) and (c), for the
polluted vantage points M 1 and M 2, the upstream ASes
for hijacker AS H are A and B, and the portion of AS
path M 1A and M 2B are trustworthy. This is easy to
understand since the routers from the vantage points to
hijacker upstream ASes are all well-behaving ones thus
conform to BGP protocol in control-plane and ICMP
protocol used in traceroute in data-plane.
The second observation is that the trustworthy portion
of polluted AS paths from multiple vantage points to a
hijacked victim preﬁx “converge” “around” the hijacker
AS. This is also intuitive since, if the set of monitors are
topologically diverse enough, the trustworthy portion of
AS paths from all the polluted monitors to the target pre-
ﬁx must include the upstream AS neighbors of the hi-
jacker AS (e.g.
in Figure 1(d), and Figure 2 (c)) thus
converge “around” the hijacker AS, or directly converge
at hijacker AS (e.g. in Figure 1(b) and (c) and Figure 2(a)
and (b)).
Since we do not know beforehand the hijack scenarios
and whether there is any countermeasure, we focus on
identifying these upstream neighbors of the hijacker AS,
and then intuitively hijacker should be within the inter-
section of the 1-hop neighbor sets of the hijacker’s neigh-
bors. And chances are that the size of the intersection set
is very small if the monitors have diversiﬁed locations.
The neighbor sets of a given AS can be obtained from
a daily snapshot of the state-of-arts AS level topology
repository such as [16].
For example, in both Figures 1 and 2, ideally sup-
pose we know that ASes A, B (which are on the pol-
luted paths from vantage points M 1 and M 2, respec-
tively) are the upstream neighbors of the hijacker. We
can then infer that the hijacker AS should be within
the intersection of neighorset(A) = {M 1, B, H} and
neighborse(B) = {M 2, A, H}, which is H. Of course
in reality LOCK does not know beforehand which ASes
are the upstream neighbors of the hijackers, thus each
AS in a polluted path can potentially be such a neighbor
of the hijacker AS. And hence the hijacker could be a
neighbor of any of these nodes. We therefore put all the
neighbors of each AS on a polluted path together with
the path nodes themselves to form a neighborhood set of
the polluted path. The hijacker should be included in this
neighborhood set.
For reasons that we will explain in the Section 5, in-
stead of using the neighborhood set of an arbitrary path,
LOCK conservatively starts from the union of all the
neighborhood sets of all polluted paths, H. Then given
that all polluted paths go through a neighbor AS of the hi-
jacker, an AS which appears in more neighborhood sets
is more likely to be the hijacker. We thus “rank” the ASes
within H based on how many neighborhood sets an AS
is in to narrow down to the handful of top ranked ASes.
Also when there are multiple convergence points, the ear-
liest convergence point is more likely to be the hijacker
than the later ones. More detailed ranking algorithm will
be presented in Section 5.
As shown in this section, LOCK can utilize either
control-plane or data-plane information. However, for
the ease of presentation and due to space limitation, in
the rest of paper we focus on data-plane approach unless
otherwise speciﬁed.
4 Monitor Selection
LOCK operates in a distributed fashion from a number
of monitors on the Internet. Both the number of moni-
tors and locations of these monitors affect the accuracy in
locating preﬁx hijackers. In general, the more monitors
used by LOCK, the higher accuracy LOCK can achieve
in locating preﬁx hijackers, and the more measurement
overhead are incurred by LOCK. More importantly, the
measurement overhead increase linearly as the number
of monitors increases, while at the same time the im-
proved accuracy gained by each additional monitor can
gradually diminish. Therefore, it is hopeful to achieve
very good accuracy with a limited number of carefully
selected monitors.
In this section, we present a novel algorithm for select-
ing a number of monitors from a candidate set. In par-
ticular, we model the monitor selection problem as fol-
lows. Initially, we have M candidate monitors around the
world. For each target preﬁx, we select a subset m mon-
itors among the M candidates. In order to achieve the
highest possible hijacker-locating accuracy with a lim-
ited number of monitors, the selection of monitors should
be guided by two objectives: (i) maximize the likelihood
of observing hijacking events on the target preﬁx; and (ii)
maximize the diversity of paths from monitors to the tar-
get preﬁx so that a hijacking event can be observed from
multiple distinct vantage points.
Our monitor selection algorithm consists of three
steps:
1. Clustering: The M candidate monitors are grouped
into m clusters. Monitors in the same cluster have
more similar paths to the target preﬁx than those in
different clusters.
2. Ranking: Candidate monitors in each cluster are
ranked based on probability of their paths to the
target preﬁx being polluted when the preﬁx is hi-
jacked. The monitors with higher ranks are more
likely to observe the hijacking event.
3. Selecting: The monitor which ranks the highest in
each cluster is chosen to monitor the target preﬁx.
Thus, a total of m monitors are selected for each
target preﬁx.
4.1 Clustering
For a given target preﬁx, the candidate monitors are clus-
tered based on similarity of their AS-level paths to the
preﬁx. We measure the similarity between a pair of paths
as the number of common ASes between these two paths
over the length of the shorter path. If there is no com-
mon AS, the similarity score is 0. On the other hand, if
the two paths are identical or one path is a sub-path of
the other, the similarity score is 1. We also deﬁne the
similarity between two clusters of paths as the maximum
similarity between any two paths, one from each cluster.
We model the clustering part as a hierarchical clus-
tering problem. Such problems have well-known algo-
rithms, such as [17], that are polynomial-time complex.
In this paper, we adopt the following simple clustering
algorithm2. First, we start from M clusters, with one
candidate site in each cluster, and compute similarity
score for each pair of clusters. Second, we identify the
pair of clusters with the largest similarity score among
all pairs of clusters, and merge these two clusters into a
single cluster. Third, we recompute the similarity score
between this newly-formed cluster with each of the other
clusters. We repeat steps two and three until only m clus-
ters remain.
4.2 Ranking
We rank candidate monitors in each cluster based on their
likelihood of observing hijacking events on the target
preﬁx t (i.e., the path from monitor to target preﬁx is pol-
luted by hijacking). For a given candidate site s, whether
or not the route from s to t is polluted by hijacker h
depends on the original best route (before the hijacking
happens) from s to t and the fake route announced by h.
This has been demonstrated by previous analysis in [6].
We assume that “prefer customer route” and “valley-
free routing” are commonly adopted interdomain routing
policies on today’s Internet. We denote the original best
route from s to t as a “customer-route”, a “peer-route”, or
a “provider-route” if the next-hop AS on the route from s
to t is a customer, a peer, or a provider of the AS to which
s belongs, respectively. According to the interdomain
routing policies, a customer-route would be the most
preferable and a provider-route would be the least prefer-
able by each router; similarly, when policy preferences
are equal, the route with shorter AS path is more prefer-
able [10]. Therefore, when hijacker h announces a fake
path, the monitor whose original best route is provider-
route is more likely to be polluted than a original route
of peer-route, which in turn is more likely to be polluted
Algorithm 1: Ranking monitors in each cluster
1
2
3
4
5
foreach monitor i in the cluster
if provider-route R[i] = 300; /* Assign the
ranking. The larger the number is, the higher the
rank is. */
elseif peer-route R[i] = 200;
else R[i] = 100;
R[i]+ = D(i, t); /* Add the AS-level distance */
than a original route of customer-route; when the policy
preferences are equal, the monitor whose original best
route has a longer AS path to t is more likely to be pol-
luted than the one whose original best route has a shorter
AS path (Please refer to Table 1 of [6] for detailed anal-
ysis). Our ranking algorithm is shown in Algorithm 1.
Note that establishing AS topology itself is a challeng-
ing problem. We use most advanced techniques [30] to
infer the AS relationship. Admittedly, inferred results
could be incomplete. However, the evaluation part will
show that the ranking algorithm based on such data can
still achieve high location accuracy.
5 Hijacker-Locating Algorithm
LOCK locates hijacker AS based on AS paths from a set
of monitors to the victim preﬁx. The AS path from a
monitor to the victim preﬁx can be either obtained from
the control plane (e.g., BGP AS path) or from the data
plane (e.g., traceroute path). In the latter case, LOCK
will need to pre-process the path and compute the corre-
sponding AS path (described in Section 5.1).
5.1 Pre-Processing
When a preﬁx is hijacked, a portion of the Internet will
experience the hijack. Trafﬁc originated from this por-
tion of the Internet and destined for the hijacked pre-
ﬁx will be altered to go through the hijacker. Moni-
tors deployed in this affected portion of the Internet can
observe that their monitor-to-preﬁx paths being altered.
These monitor-to-preﬁx paths are the foundation of our
hijacker-locating algorithm. Only paths changed by the
hijack event should be supplied to the hijacker-locating
algorithm. Methods such as the one outlined in [45] help
separate real hijack induced path changes from changes
caused by other non-hijack reasons.
If the monitor-to-preﬁx path is obtained from the data
plane, then LOCK pre-processes the path in the follow-
ing way. The most common tool for acquiring IP for-
warding path in the data plane is the well known tracer-
oute program. This program sends out a series of trig-
gering packets with different initial TTL values to trig-
ger the routers en route to the destination to return ICMP
Timeout messages as soon as they observe a triggering
message’s TTL value reaching 0, hence revealing these
routers’ identities. These traceroute results are router-
level paths and they need to be converted to AS-level
paths. During this conversion, NULL entries in tracer-
oute results are simply discarded. This simpliﬁcation
rarely has any effect on the resulted AS path because as
traceroute proceeds within a particular AS, only if all
routers in this AS failed to show up in traceroute results
our results may be affected, which we have found this
to be very rare. These resulting AS paths are known as
the “reported paths” by the monitors in the rest of the
section.
We use publicly available IP to AS mapping data pro-
vided by the iPlane services [15] to convert router IP ad-
dresses to their corresponding AS numbers. It is known
that accurately mapping IP addresses to AS numbers
is difﬁcult due to problems such as Internet Exchange
Points (IXPs) and sibling ASes [6, 25]. We argue that
the impact of these mapping errors on the results of our
hijacker-locating algorithm is minor. Firstly the distribu-
tion of the nodes, either routers or ASes, that may cause
any mapping error in their corresponding Internet topolo-
gies, either router level or AS level, is sparse. If our paths
do not contain these problematic nodes, our results are
not affected by mapping errors. Secondly, it will become
apparent, as more of the details of the hijacker-locating
algorithm are described, that our algorithm is rather ro-
bust against such mapping errors. As long as these errors
do not occur when mapping nodes near the hijacker, they
will not affect the result of our algorithm. It is also worth-
while noting that the IP to AS mapping data do not need
to be obtained from realtime control plane data. That
is, the IP to AS mapping can be pre-computed and stored
since it usually does not change over short period of time.
It is also helpful to perform sanity checks on the AS
paths before we begin the hijacker-locating algorithm.