Proof: The proof, which we sketch here,
inductively
constructs a correspondence relation Q between the two
traces. A relation Q between partial run S of length n and
a corresponding run T can be extended to the partial run
S.(cid:6)on, (cid:6)Cn+1, σn+1, π(cid:7)(cid:7) of length n + 1 (if it exists) and an
extension of run T by zero or more steps. When the active
) has level L, this is done by a straightforward
command Λ(Cn
case analysis of the active command in the last conﬁguration
in S. When the active command has level H, the two runs
are extended until they both reach commands with level L.
Extending the correspondence is straightforward in these high
regions because the nondeclassiﬁable nature of the control
context makes output impossible and maintenance of state
compatibility hold trivially.
The key case in the proof handles output statements. In it,
we use the induction hypothesis, together with Theorems 9 and
15, to show that output equivalence is preserved. Because of
the centrality of this, we include here the proof that output
equivalence is preserved in the output case. Assuming that the
ﬁnal element of S is (cid:6)on, (cid:6)Cn, σn, π(cid:7)(cid:7) and the ﬁnal element
of T is (cid:6)o(cid:2)
=
m, σ(cid:2)
γ := x; C and Λ(Cn
m, π(cid:7)(cid:7), in this case we have Cn
) = γ := x.
m, (cid:6)C (cid:2)
= C (cid:2)
m
that
means
(cid:27)(C ,D) σ(cid:2)
cds((x, var), G(C), d)
Since outputs happen only under declassiﬁable conditionals,
this case can only occur when safe((x, var), G(C), d),
which
and
dds((x, var), G(C), d). From the
induction hypothesis,
m. This combines with cds((x, var), G(C), d)
σn
(x). By Theorems 9, we
to give us Eσn
(x) ∈ expG(C)((x, var)). It now follows from
have Eσn
dds((x, var), G(C), d) by using part (i) of Theorem 15
that public(Eσn
d π(cid:2) and
(x), π(cid:2)). Therefore
Lemma 17 that V (Eσn
the outputs in both these transitions are the same.
(x), d). It now follows from π ≈
(x), π) = V (Eσ(cid:2)
(x) = Eσ(cid:2)
m
m
) = ι(t(cid:2)
1 . . . t(cid:2)
j
)
VII. RELATED WORK
Many of the initial papers on language based security [1]
enforced the non-interference [2] property statically using
type-based [4], [5], [20] or dataﬂow-analysis based [6], [7],
[8], [9] approaches. Banˆatre, et al. [8] were the ﬁrst to propose
using accessibility graphs to specify data and control ﬂow
dependencies between different variables in the program and
thereby automatically inferring the security properties of the
program. Bergeretti, et al. [21] represent information ﬂows as
relations between different variables in the program and Clark,
et al. [22] represent ﬂows as relations between the variables
and the control ﬂow points represented by the program counter.
1) (output-equivalence) ι(t1 . . . ti
2) (state-compatibility) σi
d σ(cid:2)
j
3) (level-agreement) Γ(Ci
4) (code-agreement L) Γ(Ci
5) (code-agreement H) Γ(Ci
(cid:27)
) = Γ(C (cid:2)
j
)
L-cont(C (cid:2)
j
)
) = L ⇒ Ci
) = H ⇒ L-cont(Ci
= C (cid:2)
j
) =
6) (completeness) ∀i ∈ {1, . . . , n} : ∃j ∈ {1, . . . , m} :
i Q j and vice versa
We say two runs correspond if there exists a correspondence
relation between them.
From the ﬁrst requirement, ‘output-equivalence’, it is clear
that two corresponding runs produce the same output. The
104
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:11:48 UTC from IEEE Xplore.  Restrictions apply. 
Although the above approaches require dependency calcula-
tion similar to our expression graphs, we can additionally
represent declassiﬁcation policies, while they can only check
for pure non-interference. More recently, Hammer, et al. [23],
[24] propose an information ﬂow control algorithm for Java.
The variable dependencies are speciﬁed in the form of depen-
dency graphs. The declassiﬁcation policies are speciﬁed using
path conditions, which are a conjunction of all the conditional
expressions that are encountered before reaching the output
program point. Although the path conditions are certainly
useful to specify some kind of declassiﬁcation policies, they
do not compute what expressions are being declassiﬁed. Here,
we attempt to capture this information using our expression
graphs. Swamy, et al. [25] propose a formal language, AIR
(Automata for Information Release), for describing stateful
information release policies separately from the program that
is to be secured. Although the policies are speciﬁed in the
form of an automaton separate from the program, the approach
requires that the programs be written in λAIR, a core formal-
ism for a functional programming language, so that the AIR
policies can be provably enforced.
In type-based approaches the declassiﬁcation condition is
tagged to the security lattice [26], [27], [28], [29] or to
an expression inside the program [30]. Since declassiﬁcation
typically involves downgrading the security level from high
this is the right place to specify the policies. To
to low,
specify which policy to use at
the declassiﬁcation points,
new syntactic constructs are introduced into the programming
language, making the policy and the program to be inter-
dependent on each other. In most cases, a new declass
command is introduced into the program. The enforcement
is usually a hybrid of static analysis and dynamic execution.
In some approaches [31], [32], a particular section of code
is encapsulated in a conditional statement. The condition
speciﬁes the declassiﬁcation policy. This section of code is
executed only if the condition is true, thereby dynamically
enforcing declassiﬁcation. More recently, some approaches
advocate specifying a special security API [13], [25], [33]. If
the program is written using this API, declassiﬁcation policies
can be provably enforced.
Li and Zdancewic [26] use declassiﬁcation policies that take
the form of lambda terms over inputs, akin to our approach.
Expressing the policies in lambda calculus gives them the
ﬂexibility to compare different policy terms for equivalence.
This is a strength of the prior work in relation to our own.
The main strength of our work in relation to theirs lies in our
enforcement mechanism. For this, they use a type system that
labels each variable in the program with a security policy.
The security lattice is given over the lambda terms in the
policy. As they also point out, their enforcement mechanism
cannot handle policies such as λx : int.λp : int.(x + p) ∗ p.
On the other hand, our work handles this kind of situation,
since our program expression graphs implicitly keep track
of all the expressions that can ﬂow to an output channel,
enabling our approach to analyze expressions resulting from
global computations. Thus, using program graphs allows us
to enforce more expressive policies. The paper also hints that
that their approach can be applied to untrusted code if enforced
differently, but does not explain how to do so.
The type-based enforcement mechanism of delimited re-
lease [30] and localized delimited release [34] policies keep
track of the variables involved the in the declassiﬁed expres-
sions and ensure that they are not updated before declassiﬁ-
cation. This is required to prevent laundering of information.
Our ﬂow based enforcement automatically keeps track of the
changes in the variables, thereby precluding the need to have
an explicit declassiﬁcation construct in the program.
Jif [35] is one of the most advanced programming languages
designed to enforce ﬁne-grained declassiﬁcation policies in
the program. However, if the programs and policy are not
carefully designed, as stated in [13], there is a risk of burying
the policy deep inside the code and therefore requiring a
change in the program with every change in the policy. In
light of this observation, several researchers studied how large
programs can be written in a security typed language so
that their behaviour is provably secure. Askarov, et al. [36]
show how security typed languages can be used to implement
cryptographic protocols and propose several design patterns
to help the programmers to write their applications in Jif.
They program a large poker application to demonstrate their
approach. Hicks, et al. [13] propose FJifP, which includes all
the security features of Jif and also an option to use certain
methods as declassiﬁers. They also highlight the need for
effective programming tools in which to write Jif programs.
Askarov, et al. [19] provided the foundation for CGR with
their deﬁnition of the Gradual Release (GR) property. Their
paper quantiﬁes the knowledge obtained by the observer as
the set of possible secret inputs that could be generated by ob-
serving the public outputs, i.e., the notion of observed knowl-
edge. The GR property states that the observer’s knowledge
increases only at declassiﬁcation points. Our aim of supporting
policies that are as program-independent as possible prevents
our considering attacker models that involve program variables
other than output channels. Thus the observed knowledge in
our framework is the knowledge obtained from the outputs
and does not depend on any other program events. The CGR
property of [12] requires the GR property. Additionally, it
requires that the low-security observer of program behavior
is able to detect no difference between runs that are generated
from initial states that yield the same values for expressions
identiﬁed in the declassiﬁcation policies. Our formulations of
revealed and observed knowledge follow a similar approach.
Banerjee, et al. [12] achieve separation of code and declas-
siﬁcation policies. However, their approach does not achieve
complete separation of code and policy. The ﬂowspecs are
a combination of a formula over program variables (P ),
special predicates called the agreement predicates (ϕ) over the
program variables and a modiﬁable variable (x) whose type is
being changed. The ﬂowspecs are quite expressive and can be
used to specify policies in when, where and what dimensions.
However the technique only works for trusted code, which is
written according to the policy speciﬁcation. In their paper,
105
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:11:48 UTC from IEEE Xplore.  Restrictions apply. 
if P and ϕ only have global variables, then they say that x
can be a schematic variable instantiated with different local
variables. Although this allows them to have more ﬂexibility
in terms of applying the same policy to different parts of a
large code base, it does not allow them to use the policies for
entirely different programs. The policies cannot be reused for
any other code in which the data structures and global variable
names differ. Our policy speciﬁcations are more general and
can be applied to multiple, unrelated programs.
The notion of indistinguishability used in [37] is closely
related to our D-equivalence relation, as it is based on the
attackers’ knowledge of the initial values of high variables
in their escape hatches, which resemble the declassiﬁable
expressions identiﬁed by policy in our framework. However,
their expressions are identiﬁed individually, which prevents
them declassifying expressions of unbounded size, such as
result from iterative computations. They also do not share our
objective of completely separating policy from program. This
enables them to consider where declassiﬁcation occurs within
the program, and to handle attacker models in which non-
output events are observable, which we inherently cannot do.
Giambiagi and Dam [38] provide a framework for analyzing
a security protocol’s implementation against its speciﬁcation.
A dependency speciﬁcation deﬁnes an information ﬂow prop-
erty by characterizing the direct ﬂow along a path in the
form of allowed sequence of API and primitive function calls.
However, as the authors mention in the paper, dependency
speciﬁcations are very low-level objects, which can be used as
intermediate representations of ﬂow requirements. In general,
their dependency speciﬁcations should accurately capture the
exact number of times a method is called during a particular
ﬂow and it can only characterize a single ﬂow. By contrast,
our expression graph representation can represent several ﬂow
patterns, including loops.
Taint analysis [39], [40] considers direct data ﬂows, but,
unlike information ﬂow analysis, ignores control ﬂows. In this
sense, it is much less demanding than declassiﬁcation-policy
enforcement.
Giacobazzi and Mastroeni [41] provide a powerful frame-
work in which to specify the weakened variant of non-
interference that is enforced under a declassiﬁcation policy.
We think its likely that our Policy Controlled Release property
could be precisely stated in their framework, modulo the
fact
that our approach is communication channel-oriented,
while theirs focuses on state transformation. We view our
contribution as bringing the ﬁeld closer to being able to
implement a large class of practical analyses that can be
speciﬁed in their framework. This prior work is highly abstract,
and provides little guidance with respect to the construction
of usable analysis tools.
VIII. DISCUSSION
Our approach to policy speciﬁcation and enforcement
achieves a clean separation of code and policy. Because of
this separation, the system operator has the ability to select
different policies for different situations/uses, and to determine
through the use of our analysis whether a given program
is appropriate for each use. An additional advantage of our
framework is the ability to handle declassiﬁcation policies
depending on recursive structures such as loops.
We have identiﬁed two issues that remain to be addressed.
First, as illustrated in the discussion at the end of Section II,
one would like to be able to express requirements regarding
the number of times a loop runs before declassifying the