Loops, recursions, signals, and exceptions involved in the
execution of a program introduce new challenges in the rep-
resentation of a CFG since they can generate uncountable
executions paths. For example, loops and recursions can gen-
erate an indeﬁnite number of possible combinations of LoA,
while signals, as well as exceptions, can introduce an unpre-
dictable execution path at any time.
Loops. In Figure 2, we illustrate the approach used to han-
dle loops. Since it is not always possible to count the number
of iterations of a loop, we consider the conditional node of the
loop (N1) as a virtual-checkpoint. Thus, the LoAs associated
to the example shown in Figure 2 are as follows:
SA − N1 ⇒ []
N1 − N1 ⇒ [(N1,N2)]
N1 − SB ⇒ [(N1,N3)].
Recursions. In Figure 3, we illustrate our approach to han-
dle recursions, i.e., a function that invokes itself. Intuitively,
the LoAs connecting PB and PE should contain all the possible
invocations made by a() towards itself, but the number of
invocations is indeﬁnite. Thus, we consider the node perform-
ing the recursion as a virtual-checkpoint and model only the
path that could be chosen, without referring to the number
of times it is really undertaken. The resulting LoAs for the
Figure 3: Recursion example in the ScaRR control-ﬂow
model.
example in Figuree 3 are the following ones:
PB − N2 ⇒ [(PB,N1), (N1,N2)]
N2 − N2 ⇒ [(N2,N1), (N1,N2)]
N2 − N2 ⇒ [(N2,N1), (N1,N3), (N3,N2)]
N2 − PE ⇒ [(N2,N1), (N1,N3), (N3,PE )]
PB − PE ⇒ [(PB,N1), (N1,N3), (N3,PE )].
Finally, the virtual-checkpoint can be used as a general
approach to solve every situation in which an indirect jump
targets a node already present in the LoA.
Signals. When a thread receives a signal, its execution is
stopped and, after a context-switch, it is diverted to a ded-
icated handler (e.g., a function). This scenario makes the
control-ﬂow unpredictable, since an interruption can occur at
any point during the execution. To manage this case, ScaRR
models the signal handler as a separate thread (adding begin-
ning/end thread checkpoints) and computes the relative LoAs.
If no handler is available for the signal that interrupted the
program, the entire process ends immediately, producing a
wrong LoA.
Exception Handler. Similar to signals, when a thread rises
an exception, the execution path is stopped and control is trans-
ferred to a catch block. Since ScaRR has been implemented
for Linux, we model the catch blocks as a separate thread
(adding beginning/end thread checkpoints), but it is also pos-
sible to adapt ScaRR to fulﬁll different exception handling
mechanisms (e.g., in Windows). In case no catch block is
suitable for the exception that was thrown, the process gets
interrupted and the generated LoA is wrong.
5 System Design
To apply runtime RA on a complex system, there are two fun-
damental requirements: (i) handling the representation of a
complex CFG or execution path, (ii) having a fast veriﬁcation
process. Previous works have tried to achieve the ﬁrst require-
ment through different approaches. A ﬁrst solution [8, 22, 50]
is based on the association of all the valid execution paths of
the Prover with a single hash value. Intuitively, this is not a
scalable approach because it does not allow to handle complex
Figure 2: Loop example in the ScaRR control-ﬂow model.
SAN1SBN2N3virtual -checkpointPBvirtual -checkpointa()N3N1N2PEcallretcallret124          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX AssociationCFG/execution paths. On the contrary, a second approach [21]
relies on the transmission of all the control-ﬂow events to the
Veriﬁer, which then applies a symbolic execution to validate
their correctness. While addressing the ﬁrst requirement, this
solution suffers from a slow veriﬁcation phase, which leads
toward a failure in satisfying the second requirement.
Thanks to its novel control-ﬂow model, ScaRR enables
runtime RA for complex systems, since its design speciﬁcally
considers the above-mentioned requirements with the purpose
of addressing both of them. In this section, we provide an
overview of the ScaRR schema (Section 5.1) together with the
details of its workﬂow (Section 5.2), explicitly motivating how
we address both the requirements needed to apply runtime
RA on complex systems.
5.1 Overview
Even if the ScaRR control-ﬂow model is composed of check-
points and LoAs, the ScaRR schema relies on a different
type of elements, which are the measurements. Those are a
combination of checkpoints and LoAs and contain the neces-
sary information to perform runtime RA. Figure 4 shows an
overview of ScaRR, which encompasses the following four
components: a Measurements Generator, for identifying all
the program valid measurements; a Measurements DB, for
saving all the program valid measurements; a Prover, which is
the machine running the monitored program; a Veriﬁer, which
is the machine performing the program runtime veriﬁcation.
As a whole, the workﬂow of ScaRR involves two separate
phases: an Ofﬂine Program Analysis and an Online Program
Veriﬁcation. During the ﬁrst phase, the Measurements Gener-
ator calculates the CFG of the monitored Application A (Step
1 in Figure 4) and, after generating all the Application A valid
measurements, it saves them in the Measurements DB (Step
2 in Figure 4). During the second phase, the Veriﬁer sends a
challenge to the Prover (Step 3 in Figure 4). Thus, the Prover
starts executing the Application A and sending partial reports
to the Veriﬁer (Step 4 in Figure 4). The Veriﬁer validates the
freshness and correctness of the partial reports by comparing
the received new measurements with the previous ones stored
in the Measurements DB. Finally, as soon as the Prover ﬁn-
ishes the processing of the input received from the Veriﬁer, it
sends back the associated output.
5.2 Details
As shown in Figure 4, the workﬂow of ScaRR goes through
ﬁve different steps. Here, we provide details for each of those.
(1) Application CFG. The Measurements Generator exe-
cutes the Application A(), or a subset of it (e.g., a function),
and extracts the associated CFG G.
(2) Ofﬂine Measurements. After generating the CFG, the
Measurements Generator computes all the program ofﬂine
measurements during the Ofﬂine Program Analysis. Each
ofﬂine measurement is represented as a key-value pair as
follows:
(cpA,cpB,H(LoA))⇒ [(BBLs1,BBLd1), . . . , (BBLsn,BBLdn)]
The key refers to a triplet, which contains two checkpoints
(i.e., cpA and cpB) and the hash of the LoA (i.e., H(LoA))
associated to the signiﬁcant BBLs that are traversed when
moving from the source checkpoint to the destination one.
The value refers only to a subset of the BBLs pairs used
to generate the hash of the LoAs and, in particular, only to
procedure calls and procedure returns. Those are the control-
ﬂow events required to mount the shadow stack during the
veriﬁcation phase.
(3) Request for a Challenge. The Veriﬁer starts a chal-
lenge with the Prover by sending it an input and a nonce,
which prevents replay attacks.
(4) Online Measurements. While the Application A pro-
cesses the input received from the Veriﬁer, the Prover starts
generating the online measurements which keep trace of the
Application A executed paths. Each online measurement is
represented through the same notation used for the keys in
the ofﬂine measurements, i.e., the triplet (cpA,cpB,H(LoA)).
When the number of online measurements reaches a pre-
conﬁgured limit, the Prover encloses all of them in a partial
report and sends it to the Veriﬁer. The partial report is deﬁned
as follows:
Pi = (R,FK(R||N||i))
R = (T,M).
In the current notation, Pi is the i-th partial report, R the pay-
load and FK(R||N||i) the digital ﬁngerprint (e.g., a message
authentication code [15]). This is generated by using: (i) the
secret key K, shared between Prover and Veriﬁer, (ii) the
nonce N, sent at the beginning of the protocol, and (iii) the
index i, which is a counter of the number of partial reports.
Finally, the payload R contains the online measurements M
along with the associated thread T .
The novel communication paradigm between Prover and
Veriﬁer, based on the transmission and consequent veriﬁca-
tion of several partial reports, satisﬁes the ﬁrst requirement
for applying runtime RA on complex systems (i.e., handling
the representation of a complex CFG/execution path). This
is achieved thanks to the ScaRR control-ﬂow model, which
allows to fragment the whole CFG/execution path into sub-
paths. Consequently, the Prover can send intermediate reports
even before the Application A ﬁnishes to process the received
input. In addition, the fragmentation of the whole execution
path into sub-paths allows to have a more ﬁne-grained anal-
ysis of the program runtime behaviour since it is possible
to identify the speciﬁc edge on which the attack has been
performed.
(5) Report Veriﬁcation. In runtime RA, the Veriﬁer has
two different purposes: verifying whether the running appli-
cation is still the original one and whether the execution paths
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 125Figure 4: ScaRR system overview.
traversed by it are the expected ones. The ﬁrst purpose, which
we assume to be already implemented in the system [18, 47],
can be achieved through a static RA applied on the Prover
software stack. On the contrary, the second purpose is the
main focus in our design of the ScaRR schema.
As soon as the Veriﬁer receives a partial report Pi, it ﬁrst
performs a formal integrity check by considering its ﬁnger-
print FK(R||N||i). Then, it considers the online measurements
sent within the report and performs the following checks:
(C1) whether the online measurements are the expected ones
(i.e., it compares the received online measurements with the
ofﬂine ones stored in the Measurements DB), (C2) whether
the destination checkpoint of each measurement is equal to
the source checkpoint of the following one, and (C3) whether
the LoAs are coherent with the stack status by mounting a
shadow stack. If one of the previous checks fails, the Veriﬁer
notiﬁes an anomaly and it will reject the output generated by
the Prover.
All the above-mentioned checks performed by the Veri-
ﬁer are lightweight procedures (i.e., a lookup in a hash map
data structure and a shadow stack update). The speed of the
second veriﬁcation mechanism depends on the number of
procedure calls and procedure returns found for each mea-
surement. Thus, also the second requirement for applying
runtime RA on complex systems is satisﬁed (i.e., keeping a
fast veriﬁcation phase). Once again, this is a consequence of
the ScaRR control-ﬂow model since the fragmentation of the
execution paths allows both Prover and Veriﬁer to work on
a small amount of data. Moreover, since the Veriﬁer imme-
diately validates a report as soon as it receives a new one, it
can also detect an attack even before the Application A has
completed the processing of the input.
5.3 Shadow Stack
To improve the defences provided by ScaRR, we introduce
a shadow stack mechanism on the Veriﬁer side. To illustrate
Figure 5: Illustrative example to explain the shadow stack on
the ScaRR Veriﬁer.
it, we refer to the program shown in Figure 5, which contains
only two functions: main() and a(). Each line of the program
is a BBL and, in particular: the ﬁrst BBL (i.e., S) and the
last BBL (i.e., E) of the main() function are a beginning
thread and end thread checkpoints, respectively; the function
a() contains a function call to printf(), which is an exit-
point. According to the ScaRR control-ﬂow model, the ofﬂine
measurements are the following ones:
(S,C,H1) ⇒ [(M1,A1)],
(C,C,H2) ⇒ [(A2,M2), (M3,A1)],
(C,E,H3) ⇒ [(A2,M4)].
The signiﬁcant BBLs we consider for generating the LoAs
are: (i) the ones connecting the BBL S to the checkpoint C,
(ii) the ones connecting two checkpoints C, and (iii) the ones
to move from the checkpoint C to the last BBL E.
In this scenario, an attacker may hijack the return address
of the function a() in order to jump to the BBL M3. If this
happens, the Prover produces the following online measure-
Application AControl-Flow Graph: G=CFG(A(*))Offline     Measurements:M(G)Online Measurements and Execution*:O = Exec(A(I))R1...RN = T(A(I))Measurements DBOffline Program AnalysisOnline Program VerificationVerification ofthe report RiProverVerifierMeasurements GeneratorRequest for a challenge:(Input I, Nonce N)Application A(I,N)1235List of Reports RiOConsumption ofthe output O* execution and measurements generation  are performed in parallel4SM1M2M3M4EA1CA2int main(int argc, char ** argv) {  a(10);  /* irrelevant code */  a(6);  return 0;}void a(int x) {  /* irrelevant code */  printf("%d\n", x);  return;}126          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX AssociationDespite this approach, it is also possible to use frameworks
to lift the binary code to LLVM intermediate-representation
(IR) [5].
The Measurements Generator requires the program source
code to perform the following operations: (i) generating the
ofﬂine measurements, and (ii) detecting and instrumenting
the control-ﬂow events. During the compilation, the Mea-
surements Generator analyzes the LLVM IR to identify the
control-ﬂow events and generate the ofﬂine measurements,
while it uses the CRAB LLVM framework to generate the
CFG, since it provides a heap abstract domain that resolves in-
direct forward jumps. Again during the compilation, the Mea-
surements Generator instruments each control-ﬂow event to
invoke a tracing function which is contained in the trusted an-
chor. To map LLVM IR BBLs to assembly BBLs, we remove
the optimization ﬂags and we include dummy code, which
is removed after the compilation through a binary-rewriting
tool. To provide the above-mentioned functionalities, we add
around 3.5K lines of code on top of CRAB and LLVM 5.0.
6.2 Prover
The Prover is responsible for running the monitored appli-
cation, generating the application online measurements and
sending the partial reports to the Veriﬁer. To achieve the sec-
ond aim, the Prover relies on the architecture depicted in
Figure 7, which encompasses several components belonging
either to the user-space (i.e., Application Process and ScaRR
Libraries) or to the kernel-space (i.e., ScaRR sys_addaction,
ScaRR Module, and ScaRR sys_measure).
Each component works as follows:
• Application Process - the process running the monitored
application, which is equipped with the required instru-
mentation for detecting control-ﬂow events at runtime.
• ScaRR Libraries - the libraries added to the original
application to trace control-ﬂow events and checkpoints.
• ScaRR sys_addaction - a custom kernel syscall used to
trace control-ﬂow events.
• ScaRR Module - a module that keeps trace of the online
measurements and of the partial reports. It also extracts
the BBL labels from their runtime addresses, since the
ASLR protection changes the BBLs location at each run.
• ScaRR sys_measure - a custom kernel syscall used to
generate the online measurements.
When the Prover receives a challenge, it starts the execution
of the application and creates a new online measurement. Dur-
ing the execution, the application can encounter checkpoints
or control-ﬂow events, both hooked by the instrumentation.
Every time the application crosses a control-ﬂow event, the
ScaRR Libraries invoke the ScaRR sys_addaction syscall to
Figure 6: Implementation of the shadow stack on the ScaRR
Veriﬁer.
ments:
(S,C,H1) → (C,C,H2) → (C,C,H2) → . . . .
Although generated after an attack, those measurements are
still compliant with the checks (C1) and (C2) of the Veri-
ﬁer. Thus, to detect this attack, we introduce a new relation
(i.e., ret_to) to illustrate the link between two edges. The
Measurements Generator computes all the ret_to relations
during the Ofﬂine Program Analysis and saves them in the
Measurements DB using the following notation:
(A2,M2) ret_to (M1,A1),
(A2,M4) ret_to (M3,A1).
Figure 6 shows how the Veriﬁer combines all these infor-
mation to build a remote shadow stack. At the beginning, the
shadow stack is empty (i.e., no function has been invoked
yet). Then, according to the online measurement (S,C,H1),
the Prover has invoked the main() function passing through
the edge (M1,A1), which is pushed on the top of the stack
by the Veriﬁer. Then, the online measurement (C,C,H2) in-
dicates that the execution path exited from the function a()
through the edge (A2,M2), which is in relation with the edge