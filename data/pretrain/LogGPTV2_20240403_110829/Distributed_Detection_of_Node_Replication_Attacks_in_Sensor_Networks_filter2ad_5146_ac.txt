L−1(cid:3)
i=1
1 − i · p · d · g
n
(cid:2)p·d·g
Pnc =
(9)
Pnc ≤ L−1(cid:3)
≤ e
≤ e
i=1
−p
−p
−i·p
2·g
2
2·d
n
e
2·g
2
2·g
2
2·d
n
2·d
n
P
L−1
i=1 i
L(L−1)
(10)
(11)
Using the standard approximation that (1 + x) ≤ ex, we
have:
(12)
Since the probability of a collision, Pc, is simply 1−Pnc,
the probability of detecting L replicas is:
2
2·g
2
L(L−1)
Pc ≥ 1 − e
−p
2·d
n
2
(13)
Thus, if n = 10, 000, g = 100, d = 20, and p = 0.05,
we will detect a single replication of α with probability
greater than 63%, and if α is replicated twice, we will
detect it with probability greater than 95%.
Unlike the deterministic proposal (Section 4.2), we
no longer need to worry about the adversary using a lim-
ited number of captured nodes to enable an unlimited
amount of replication. If the adversary captures neigh-
boring nodes α and β, then the total number of claims
about either node is reduced by 1
d , essentially reducing
the neighbor count of each node by one. Since all of the
protocol decisions are made locally by individual nodes,
the adversary has only two options remaining: it can dis-
rupt the routing of packets from the remaining legitimate
neighbors or it can capture all of the legitimate neigh-
bors. Routing disruptions create tell-tale signs of the ad-
versary’s presence in the network and will be avoided by
a prudent adversary. Capturing all of the neighbors of a
node targeted for replication leads to a practical attack
which we address in Section 8.4.
5.4 Efﬁciency Analysis
√
This scheme still poses a relatively high storage cost.
On average, each node will have to store p · d · g loca-
tion claims. To ensure a collision with greater than 50%
probability, p·d·g will have to be on the order of O(
n).
Even if we can reduce the size of each claim to the pay-
load of a packet, 36B, our hypothetical network with
n = 10, 000, g = 100, d = 20, and p = 0.05 will re-
quire, on average, that each node store 3,700 B, which is
just under 91% of the Mica 2’s total RAM. Similarly, the
communication requirements of the protocol are non-
trivial. For each node, we generate p · d · g messages
that must be evenly spread throughout the network. In a
network randomly deployed on the unit square, the aver-
age distance between any two randomly chosen nodes is
approximately 0.521
n
2 , so the communication
n·p·d·g).
costs for the network are on the order of O(n
As mentioned before, p · d · g ≈ O(
n), so our com-
munication costs are O(n2), equivalent to those of the
naive broadcast scheme outlined in Section 4.1.
√
n ≈ √
√
√
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
We can employ a number of enhancements to im-
prove both the communication and space requirements
of our protocol. First, we can trade resiliency for mem-
ory and communication savings. For example, in our
hypothetical network3, if we are willing to allow the ad-
versary to create up to four replicas of α, then we can
reduce the number of messages sent out, g, by 75%.
Since communication costs are O(g2) we save on com-
munication and require less than 1KB of space, but we
would still detect the adversary’s presence with proba-
bility greater than 50%. We can also save both commu-
nication and space by reducing the number of location
claims sent out by 1
d. Each recipient of one
of these claims uses a broadcast message to query her
neighbors as to whether they have a conﬂicting value.
Even with these additional queries, the communication
n · p · g) messages per node. Fi-
costs are now O(
nally, we can reduce the storage burden by introducing
a loose notion of synchronization into the process – see
Section 8.2.
d, i.e. g
(cid:2) = g
√
6 Line-Selected Multicast
6.1 Overview
To reduce the communication costs of our ran-
domized multicast protocol, we investigate a different
scheme to detect conﬂicting location claims.
Inspired
by Braginsky and Estrin’s work on Rumor Routing [4],
we note that nodes in a sensor network function both
as sensing units and as routers. For a location claim to
travel from node α to node γ, it must pass through sev-
eral intermediate nodes as well.
If these intermediate
nodes also store the location claim, then we have effec-
tively drawn a line across the network. If a conﬂicting
location claim ever crosses the line, then the node at the
intersection will detect the conﬂict and initiate a revoca-
tion broadcast. Since the expected number of intersec-
tions, c, of x randomly drawn lines4 intersecting within
the bounds of the unit circle is given by:
(cid:1)
(cid:2)
E(c) = x(x − 1)
1
6
+
245
144π2
(14)
we only need a few such lines to insure an intersection.
For example, with only three lines, we expect two colli-
sions (see Solomon’s lecture notes [34] for details of the
derivation). With this insight in mind, we can craft an al-
ternate detection protocol with improved performance.
3The network in which n = 10, 000, g = 100, d = 20, and
p = 0.05.
4Lines drawn by randomly selecting two points, p1 and p2, from
within the unit circle, and drawing the line extending through them.
R
X
C2
R
B
R
C3
C1
A
R
α(cid:2)
(cid:2)
β1
(cid:2)
γ1
(cid:2)
β3
(cid:2)
β2
γ1
(cid:2)
γ3
γ3
σ
(cid:2)
γ2
γ2
β2
β3
β1
α
Figure 1. Line-Segment Intersection Given three
randomly selected points, A, B and X, then if the fourth
randomly-selected point Y falls in any of the Ci regions,
the resulting quadrilateral will be convex. If Y falls in
any of the R regions, the ﬁgure will be re-entrant. For
XY to intersect AB, Y must fall in region C3.
6.2 Protocol Outline
Our new protocol modiﬁes the Randomized Multi-
cast protocol, so that we ﬁx p · d · g as a small constant
r. When α’s neighbors send out the evidence of α’s lo-
cation claim to the r witnesses, each of the nodes along
the route stores a copy of the location claim as well. For
example, let βi send a copy of α’s location claim lα to γj
via σ1, σ2 . . . σm. Upon receiving lα, σk veriﬁes the sig-
nature on the claim, checks for a conﬂict with the claims
already in its buffer, stores a copy of lα in its buffer, and
then forwards lα to σk+1. If any of the nodes discov-
(cid:2) for α
ers a conﬂict, i.e., ﬁnds another location claim l
such that lα (cid:9)= l
(cid:2)
α, then it ﬂoods the network with the
unforgeable evidence (the conﬂicting set of signed loca-
tion claims) of α’s attempted replication, resulting in a
distributed revocation of α. If the collision happens to
occur at a replica, it still does not preclude another col-
lision from occurring elsewhere in the network. Also,
since all protocol decisions are made locally and proba-
bilistically, the adversary cannot predict the location of
the collision, so the probability of a collision occurring
at a node under the adversary’s control will be negligi-
ble, unless the adversary already has an overwhelming
presence within the network.
6.3 Analysis
As described above, our protocol actually “draws”
line-segments, not lines, through the network. Unfor-
tunately, the probability of two segments intersecting
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
Figure 2. Line-Selected Multicast In this ﬁgure, the
adversary has created a replica of α, α(cid:2)
. Neighbors
(βi and βi
) at these locations all report these claims to
randomly selected witnesses γi and γi
, which results in
an intersection at σ.
(cid:2)
(cid:2)
is considerably less than that of two lines intersecting
(given above by Equation 14). To ﬁnd the probability
that two line-segments intersect5, we can use the solu-
tion to Sylvester’s Four-Point Problem. The Four-Point
Problem asks for the probability that four randomly se-
lected points in a convex domain will form a re-entrant
quadrilateral, i.e., one in which one point falls within
the triangle formed by the other three points. Solomon
shows that if the points are selected from a circular do-
main, then the probability that the points form a re-
12π2 [34]. If we select our ﬁrst
entrant quadrilateral is
three points at random, then we can divide the region
into seven sections: four re-entrant and three convex (see
Figure 1). The two line-segments will only intersect if
the fourth point falls in the convex region C3. Thus, the
(cid:2)
probability of intersection is given by:
35
≈ 0.235
(15)
(cid:1)
1 − 35
12π2
1
3
Pintersect =
To further complicate the analysis, our line segments are
not drawn independently at random, but originate from
a central point and radiate out in random directions (see
Figure 2). However, Monte-Carlo simulations indicate
that even if we only draw two random segments origi-
(cid:2), the probability of at least
nating from α and two from α
one intersection is greater than 56%, and with ﬁve line
segments per point, we have a 95% probability of inter-
section. Since an intersection corresponds to detecting
a node replication attack, we can detect an attack with
5Segments drawn by randomly selecting two points, p1 and p2,
from within the unit circle, and drawing the line segment connecting
them.
Randomized Multicast
Line-Selected Multicast
SQRT(n)
3000
2500
2000
1500
1000
500
d
e
v
i
e
c
e
R
d
n
a
t
n
e
S
s
t
e
k
c
a
P
f
o
r
e
b
m
u
N
l
a
t
o
T
0
1000
2000
3000
4000
5000
Number of Nodes
6000
7000
8000
9000
10000
(a) Communication Overhead This ﬁgure indicates the
average amount of communication per node. Note that
Randomized Multicast scales linearly with the number of
n. The
nodes, while Line-Selected Multicast scales as
error bars on the data from the two Multicast schemes
represent the standard error.