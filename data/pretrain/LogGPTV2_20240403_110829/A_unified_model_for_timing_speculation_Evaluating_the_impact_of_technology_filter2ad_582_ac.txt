parameter 
operation 
constant 
of interest 
is: 
and C is capacitance. 
are covered in the literature 
constants, 
and eliminating 
Details 
on sub-threshold 
[21]. Holding Vdd 
the modeling 
equation 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
491 
DSN 2010: de Kruijfet al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:01:21 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEEIIFIP 
International 
Conference 
on Dependable 
Systems 
& Networks 
(DSN) 
Hardware Design Style Node  Vdd J.LVth  O"Vth 0" gate_rand O"path_rand O"path_sys 0" path_delay 
& 0" gate_sys 
High performance 
CMOS 45nm 1.0V 103mV O.311J.L O.149J.L O.043J.L O.017J.L O.046J.L 
11nm O.65V 118mV O.271J.L O.163J.L O.047J.L O.019J.L O.051J.L 
45nm 1.0V 535mV O.060J.L O.092J.L O.027J.L O.011J.L O.029J.L 
11nm O.70V 376mV O.085J.L O.136J.L O.039J.L O.016J.L O.042J.L 
power CMOS  45nm O.25V 535mV O.060J.L O.633J.L O.183J.L O.072J.L O.196J.L 
Low power CMOS 
Ultra-low 
Table 1. Values for O"path_delay (final 
column) and the values used to derive it. 
gate_dela
y ex e nq,t 
-Vth 
5. System recovery efficiency model 
In this section, 
we describe 
a mathematical 
Since gate delay is exponentially 
related 
distributed 
lith, gate delay is log-normally 
-V( 0"2 1) 21'+0"2 h  -O"Vth 
- e - e 
,  were 0" - ----;;:-n'l't 
0" gate_delay 
to the normally 
distributed, 
with: 
(4) 
The thermal 
voltage CPt is 26mV, and n =  1.5 is a typical 
point. Again assuming 
operating 
contribution 
O"gate_rand =  O"gate_sys =  O.633J.L. 
by random and systematic 
O"vth =  32m V, with equal 
we derive 
effects, 
To find O"path_rand, recall that the delay distribution 
limit theorem 
for 
gate delay dis­
and low power CMOS 
theory, 
With high performance 
by a normal distribution. 
large number of independent 
We apply the central 
which states 
power (sub-threshold) 
distributed. 
were normal distributions. 
However, 
for 
CMOS, gate delay is log­
the whole path is the sum of the individual 
tributions. 
these distributions 
ultra-low 
normally 
of probability 
ciently 
be approximated 
approximation 
that the sum of a suffi­
can 
With n =  12 the 
limit theorem and using 0" path_rand =  y'n X 0" gate_rand as 
We derive O"path_sys from O"gate_sys in the same man­
and low power CMOS and 
ner as with high performance 
compute O"path_sys   O.072J.L. For simplicity, 
O"path_rand (from a normal distribution) 
a log-normal 
normally 
we derive O"path_rand  O.183J.L. 
their sum as 
is largely 
This approximation 
by approximating 
distribution), 
strong. Applying 
distributed. 
is reasonably 
we combine 
and O"path_sys (from 
random variables 
before, 
justi­
the central 
fied by the fact that 0" path_rand is much larger 
effect is O"path_delay  O.196J.L. 
The combined 
than 0" path_sys. 
model for 
of recovery 
for 
and allow errors to 
time overheads 
of the underlying 
to backward 
execution 
any backward 
parameters 
error recovery 
the execution 
two high-level 
determining 
systems that use speculative 
occur. The model is specific 
which is the most commonly proposed 
ery [17]. Independent 
mentation, 
acterize 
cycles between checkpoints 
cles to restore 
these two parameters, 
rive the execution 
tem at a specific 
for use with timing speculation, 
ized for other uses and is not exclusive 
any simulation 
model does not require 
The two inputs to the model are cycles 
(cycles) 
it is possible 
the most recent checkpoint 
error recovery, 
approach 
to  recov­
hardware 
imple­
can be used to char­
the number of 
system: 
and the number of cy­
(restore). 
With 
to probabilistic 
ally de­
time overhead 
error rate. While we present 
for a given recovery 
sys­
this model 
the model can be general­
to timing errors. 
The 
to derive its inputs. 
and restore. 
Let 
time in cycles between check­
for the overhead 
and initiating 
re-execution. 
denote the execution 
denote the cost in cycles of restor­
cycles 
points and let restore 
ing the checkpoint 
equation 
tions: let failures 
execute 
reached), 
cution cycles that must be discarded 
Both functions 
two functions, 
To derive an 
we define two func­
to 
(i.e. the next checkpoint 
was not 
and let waste denote the number of wasted exe­
take as input an error rate, rate. With these 
the overhead 
denote the number of failed 
in cycles of recovery 
over a checkpoint 
of recovery, 
attempts 
when an error occurs. 
is: 
overhead(rate) 
=  failures(rate) 
x (waste(rate) 
+ restore) 
11nm. However, 
to the ITRS roadmap, lith changes by 
200mV from 45nm through 
11nm. According 
approximately 
4 the value of 0" gate_delay is relative 
with Equation 
to the ab­
solute value of O"Vth and not J.Lv",. Furthermore, 
of Vdd. With the absolute 
to 
is independent 
remain constant 
from 45nm to llnm, technology 
has essentially 
tions for sub-threshold 
energy efficiency 
son, we do not present 
ultra-low 
do not change. For this rea­
of the 11nm node for the 
0" gate_delay 
O"vth predicted 
scaling 
no impact on the effects 
power CMOS design. 
calculations 
and hence, 
operation, 
our hardware 
of process 
analysis 
varia­
First, we expand failures 
as follows. 
Let the ran­
denote the probability 
tion between checkpoints. 
dom variable X denote the number of cycles executed 
be­
fore an error occurs. X has a geometric 
with 
P(X =  k) =  (1 -rate)k-1rate. 
= 
(1 -rate )cycles. It follows 
to execute 
the random variable Y, has a geometric 
P(Y =  k) =  (1 -Psucc)k-1psucc 
distribution 
let Psucc 
Finally, 
(error-free) 
=  P(X > cycles) 
that the number of attempts 
denoted by 
with 
Psucc 
over the checkpoint 
of a successful 
distribution 
before success, 
and expected 
number of 
E(Y) =  _1_. However, Y includes 
executions 
the last, 
execu­
Psucc 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
492 
DSN 2010: de Kruijf 
et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:01:21 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEEIIFIP 
International 
Conference 
on Dependable 
Systems 
& Networks 
(DSN) 
fault rate by a factor called the ar­
vulnerability factor 
less than the hardware 
chitectural 
unlike Razor, Reunion and Paceline 
tirement 
rather than at individual 
error in logic that does not impact a retiring 
be safely ignored. 
0.25 for a simple in-order 
union and Paceline 
before applying 
In our evaluation, 
core, and account 
it to Equation 
(AVF) [9]. This is because, 
detect at instruction 
pipeline 
Hence, 
stages. 
instruction 
for it with Re­
rate by 0.25 
by effectively multiplying 
can 
an AVF of 
we estimate 
re­
5. 
7. Results 
successful 
Hence, failures 
execution, 
=  E(Y) -1: 
which is not included 
by failures. 
. 
1 
fazlures(rate) 
) I 
1 -rate eye es - 1  
( 
Second, we expand waste as follows. 
= 
Let the ran­
when a fault occurs. 
with P(Z =  k) =  P(::L s)' k = 
dom variable Z denote and the number of wasted execu­
tion cycles that must be discarded 
Z is distributed 
1,2, . . .  , cycles, and with expected 
c=-cles kP(X=k) 
E(Z) =  f(Jc<-eycles) 
. Hence, waste =  E(Z): 
( ) Lfes k(l -rate)k-1rate 
1 -(1 -rate)eycles 
waste rate =  == -=--------;-'------- ,--:-----;---
number of cycles 
This completes 
the derivation 
rate, and cycles. 
rate is the only remaining 
restore, 
constant, 
hence, rate can be used to directly 
relative 
cution without 
errors is expressed 
execution 
of overhead in terms of 
and cycles 
both 
free variable 
and, 
compute overhead. The 
versus exe­
time in cycles with recovery 
With restore 
. 
rate = 
(  ) 
exec_tzme 
as: 
+ overhead(rate) 
cycles 
(5) 
l cyc es 
This section  presents  quantitative  results  derived  from 
we show energy efficiency results 
efficiency 
apply­
3 to each 
model from Section 
4. We discuss 
scaling 
node. Second, 
by com­
implications 
our models. First, 
ing our hardware 
of the CMOS design styles from Section 
the quantitative 
of technology 
paring the 45nm and the llnm technology 
time overheads 
we show execution 
applying 
model from Section 
5 to each of the recovery 
scribed 
in Section 
covery execution 
results 
system-level 
ciency for each combination. 
for the three hardware 
time overheads 
6. Finally, 
trade-off 
our recovery 
systems de­
we combine our system re­
with the energy efficiency 
design styles 
the 
between error rate and energy effi­
to determine 
6. Recovery systems 
7.1. CMOS design styles 
In this section, 
we describe 
three error-recovery 
at the instruction 
systems. 
checkpointing 
We cover fine-grained 
ularity 
a thousand 
values for restore 
to coarse-grained 
instructions. 
and cycles. 
checkpointing 
For each system, 
gran­
of 
the 
we determine 
at the granularity 
critical 
path pipeline 
Razor. Razor [3] augments 
with a shadow latch that is placed with a slight 
the main latch and always receives 
the correct 
latches 
cycles 
ing technique, 
every cycle to detect faults, 
counterflow 
5 cycles. 
are compared 
is just 1. Using their proposed 
delay behind 
value. These 
and thus, 
the restore 
cost is roughly 
pipelin­
latches 
equation 
applying 
(Equation 
to translate 
Figure 4 shows the curves produced 
our hard­
2) to each of the 
For high performance 
and low 
clock period re­
top 
into both frequency 
reduction 
CMOS, we consider 
ware energy efficiency 
three CMOS design styles. 
power CMOS, we use convert 
duction 
row) and voltage 
For sub-threshold 
ing, since Vdd is already 
very low. Error rate is shown on 
the x-axis and the y-axis shows EDP normalized 
to EDP 
at a nominal error rate of 3.8 x 10-16. For high perfor­
mance and low power CMOS, the figure shows curves for 
both 45nm and Ilnm process 
(frequency 
scaling; 
scaling; 
bottom row). 
increase 
(voltage 
technologies. 
only frequency 
scal­
Reunion. Reunion [16] uses loosely-coupled 
execution 
as the sum of the fingerprint 
interval 
pointed 
on two cores to detect errors. 
interval 
The cost ofrestoring 
check­
at 100 cycles as well. 
at roughly 
state, restore, 
We estimate 
and the comparison 
redundant 
cycles 
we estimate 
100 cycles. 
[5] uses redundant 
to Reunion, Paceline 
on paired cores for error detection. 
Paceline. Similar 
execution 
is designed 
Paceline 
uses speculative 
gains. The cost is an additional 
the Ll caches. 
we approximate 
core overclocking 
recovery 
specifically 
Using the numbers from the Paceline 
cycles 
at 100 and restore 
in flushing 
paper, 
at 1000 cycles. 
However, 
for timing speculation 
to achieve 
penalty 
and 
performance 
Reunion and Paceline 
benefit from architectural 
mask­
where the error rate of the system is 
ing of hardware 
faults, 
energy effi­
provides 
across all design styles. 
Effectiveness. Timing speculation 
ciency improvements 
error rates of 10-5 to 10-4 it provides 
ductions 
are feasible 
combining 
the practicality 
at very high error rates, although 
system recovery 
of of 10% to 30%. Improvements 
of such high error rates. 
costs in Section 
At modest 
EDP re­
reasonable 
our results 
7.3 question 
of 40% or larger 
In all cases, there is a sudden dip at an error rate around 
4 x 10-3. This error rate is marked by the dash-dotted 
gray 
curve. Below this error rate, all the EDP reduction 
is due 
to timing speculation 
alone, which 
corresponds 
in Section 
tor kicks in -where some combinational 
design lower than the clock period. 
for process variability 
with the Variability 
3. Above this rate is where the Application 
Fac­
logic delays are by 
directly 
Factor described 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
493 
DSN 2010: de Kruijf 
et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:01:21 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP 
International 
Conference 
on Dependable 
Systems 
& Networks 
(DSN) 
Frequency 
scaling 
1. 01--
----.,--=-=-_ : 
 : '-1 ==-4s-n-m-'1 
0.2 - - llnm. 
10'15 10,10 10'5 
rate 
_ 
_ 
--\ 1.01 - __
 0.8 
 0.8 
0..'" 
Q 0.6 
Q 0.6 
r.t:l 0.41-
r.t:l 0.4 
-----....!.........J 
..J 
1-
0.2 C:. ::::;::::;::::;:::::;:::::::::
10'15  10,10 10'5  100  10'15 10,10 10,5  100 
0.2c:. ::::;::::;:. --,-::,-......:.......
- - llnm 
4Snml 
4snml 
rate 
rate 
Voltage 
scaling 
rate 
High performance CMOS 
rate 
Low power CMOS 
1.0 
 0.8 
 Q 0.6 
r.t:l 0.4 
N/A 
0.2  
10'15 10,10 rate 
Ultra-low 
power CMOS 
Figure 4. EDPhw curves considering 
each design style, process technology, 
and scaling technique. 
Sensitivity 
timing speculation 
ultra-low 
at manageably 
there is essentially 
for high performance 
to CMOS design style. Figure 4 shows that 
potential 
power CMOS, with EDP reduced by up to 40% 
the greatest 
provides 
gains for 
high error rates. The figure also shows that 
no difference 
between the EDP curves 
and low power CMOS. 
For sub-threshold 
CMOS, even though gate delay vari­
and 
proportional 
than for the other 
to 11th variations 
at 45nm, EDP improvement 
ations are exponentially 
(J' path_delay is more than 4 times greater 
two design styles 
ter by a factor of approximately 
high error rates above 4 x 10-3 the difference 
smaller. 
timing speculation 
sub-threshold operation compared 
styles. 
is only bet­
3 at low error rates. At 
is even 
improvements 
from 
energy efficiency 
Note that we are comparing 
and not the absolute 
to the other two design 
of 
scaling 
and voltage 
between error rate andEDP, Al­
Frequency versus voltage scaling. Figure 4 shows that 
the choice between frequency 
impact on the relationship 
though voltage 
of trading 
is reduced with each technology 
is essentially 
or voltage 
scaling 
the cost 
as Vdd 
increases 
for Vdd reduction 
no difference 
generation. 
change affects 
off frequency 
scaling. 
At Ilnm there 
EDP quadratically, 
between the choice of frequency 
has little 