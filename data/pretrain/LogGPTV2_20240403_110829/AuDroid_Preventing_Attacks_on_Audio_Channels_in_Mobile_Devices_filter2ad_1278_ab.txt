ules to evaluate unsafe operations [1, 2] and using trusted
modules to track user interaction with the device [6]. For ex-
ample, the Android Security Modules (ASM) framework [1]
allows apps to register for a callback for speciﬁc autho-
rization hooks. However, only the apps using audio chan-
nels should be notiﬁed and such callbacks should also en-
able the resolution of information ﬂow errors in addition to
authorization decisions. Also, User-Driven Access Control
(UDAC) [6] enables untrusted apps to choose when to use
trusted modules for the creation of a trusted path. Unfortu-
nately, that requires that the reference monitor to rely on the
app developers to create the trusted paths or risk breaking
functionality. However, we ﬁnd both the ASM and UDAC
ideas interesting, and propose enhancements that enable ef-
fective control of audio channels.
3. SECURITY MODEL
3.1 Threat Model
In our threat model we consider two sources of threats.
The ﬁrst source of threats is internal to the mobile device:
processes running market apps installed by the device owner.
We assume that the device owner is not aware of the ma-
liciousness of market apps. The second source of threats
is external to the device: external parties, including users
other than the device owner and other devices. Malicious
apps, users, and devices can perform any of the attacks de-
scribed in Section 2.2: eavesdropping and confused deputy
attacks on the three types of audio channels.
3.2 Trust Model
We assume that the operating system of the target de-
vice (e.g., Linux kernel and Android OS) is booted securely
(e.g., Veriﬁed Boot mechanism [22]), runs approved code
from device vendor, is free of malice, and is trusted to pro-
tect itself from the threats above. We assume that system
apps and services run approved code from the device vendor
and are free of malice. Some market apps might contain
native code that may try to gain access to system/hardware
resources. To prevent such native code from being able to
directly access system/hardware resources, we rely on the
use of SELinux [18] running in Enforcing Mode from boot
time. Therefore, only system services can access physical
devices through the use of the Java Native Interface (JNI)
[21]. We assume that SELinux for Android satisﬁes the ref-
erence monitor concept [27]. Thus, we assume market apps
can only access the microphone and the speaker through the
API provided by the standard Android SDK [20].
4. AuDroid DESIGN
In this section, we detail the design of AuDroid, an exten-
sion to the SELinux reference monitor, for enforcing Multi-
Level Security (MLS) over audio channels created by apps
and system services, while using the microphone and speaker,
to prevent the attacks described in Section 2.2. One key in-
sight of designing AuDroid is to authorize access to all three
types of dynamically-created audio channels highlighted in
Figure 3. AuDroid extends the reference monitor provided by
SELinux by placing 4 additional hooks in the Media Server
to mediate all accesses to the microphone and speaker by
apps and services, compute the audio channels that would
be created by the access, and authorize the resultant infor-
mation ﬂows of those audio channels if they comply with an
MLS policy. A second insight of designing AuDroid is to cre-
ate trusted paths with the device owners, authenticate them
and learn their intentions when attempting to use unsafe
information ﬂows. Additionally, to improve ﬂexibility, Au-
Droid enables the use of available methods to resolve some
information ﬂow errors, which we will call (information ﬂow)
resolvers.
4.1 AuDroid Overview
An overview of the AuDroid design is shown in Figure 3.
AuDroid implements an extension to the reference monitor
provided by SELinux to mediate accesses to the microphone
Droid identiﬁes the security levels of an external party listen-
ing to the speaker as low-secrecy and high-integrity (L3 =
(LS,HI)). This conﬁguration prevents a system app or ser-
vice from leaking security-sensitive information to an exter-
nal entity diﬀerent from the device owner, and at the same
time prevents market apps from producing audio that would
mislead the device owner or aﬀect an external, in-proximity
device. On the other hand, if the internal party is using the
microphone, AuDroid identiﬁes the security levels of an ex-
ternal party sending input to the microphone as high-secrecy
and low-integrity (L4 = (HS,LI)). This conﬁguration pre-
vents a market app from eavesdropping the external party,
and at the same time prevents any system app and service
from receiving voice commands from an external party dif-
ferent from the device owner.
In both cases, the security
levels of both external parties are elevated to high-secrecy
and high-integrity (L3 = L4 = (HS,HI)) upon authentica-
tion of the owner of the device, as shown in Figure 4. User
authentication is an orthogonal problem to out research ob-
jective. We assume there exists a authentication mechanism.
In the evaluation (Section 6), we use screen lock passcodes
to authenticate device owners. Exploring more suitable au-
thentication mechanisms is future work.
Figure 4: Security Levels for External Parties.
4.3 Prevention of Unsafe Information Flows
AuDroid considers an audio channel’s information ﬂow (au-
dio ﬂow) unsafe if produced by a low-integrity party and di-
rected to a high-integrity party, such as a ﬂow from a mar-
ket app to a system service. Similarly, AuDroid considers an
audio ﬂow unsafe if produced by a high-secrecy party and
directed to a low-secrecy party, such as a ﬂow from the de-
vice owner to a market app. Finally, audio ﬂows between
low-secrecy low-integrity parties (apps) are also considered
unsafe by AuDroid, which separate apps by assigning them
to diﬀerent categories. Unsafe audio ﬂows are shown in Fig-
ure 5, where C1 and C2 are categories assigned to apps.
Figure 5: Unsafe Audio Flows.
In AuDroid, attacks based on audio channels are prevented
by identifying and blocking unsafe information ﬂows by en-
forcing MLS access control policies, such as Biba [12] and
Bell-LaPadula (BLP) [13]. Consequently, AuDroid prevents
any audio produced by a low-integrity party from ﬂowing to
a high-integrity party, and any audio produced by a high-
secrecy party from ﬂowing to a low-secrecy party. Addition-
ally, to avoid unsafe ﬂows among apps, AuDroid prevents the
creation of audio channels between low-secrecy low-integrity
processes (apps) by leveraging the use of categories.
Extending the SELinux reference monitor is challenging
because AuDroid has to ensure complete mediation of all
security-sensitive operations [27]. For AuDroid, we must
identify the right locations to place its Audio Hooks to me-
diate every access to the microphone and speaker by any
process. There are two possible alternatives: inside the An-
droid framework/middleware or inside the Linux kernel. To
Figure 3: Overview of the AuDroid Design
and speaker by enhancing the Media Server. The reference
monitor extension is activated upon receiving a request from
a process, i.e., one of the two internal parties (P1 and P2), to
access either the microphone or the speaker (step 1 ). If the
access request is for the microphone, the reference monitor
ﬁrst checks the Android permissions (step 2 ), as it does
already. Then, the Media Server reasons about which of
the three possible audio channels would be created by con-
sidering the possible external parties (EP3 and EP4), and
identiﬁes the security levels (L1, L2, L3, and L4) associ-
ated with the parties that would communicate as result of
granting access to the microphone or speaker (steps 3 and
4 ), as described in Section 4.2. Subsequently, the Media
Server enforces an MLS policy over the three audio chan-
nels (step 5 ), as described in Section 4.3. If, for all three
audio channels, the corresponding information ﬂows are clas-
siﬁed as safe by the MLS policy, then the access request is
granted and the corresponding audio channels are created
(step 6 ). Otherwise, if an information ﬂow is identiﬁed as
unsafe, AuDroid has two ways to determine whether the un-
safe information can be resolved (i.e., made suﬃciently safe
to prevent eavesdropping and/or confused deputy attacks).
First, AuDroid proposes a known resolver and requires ap-
proval from the system app or service at risk to verify that
the proposed resolver will protect the system app or service
and enable it to function (step 7 ), as described in Sec-
tion 4.4. In addition, if the unsafe information ﬂows involve
the use of the microphone, AuDroid creates a trusted path for
the device owner to conﬁrm the access to the microphone is
acceptable (e.g., recording is not eavesdropping and/or out-
put is understood to be from a low-integrity source) to the
device owner (step 8 ), as described in Section 4.5. AuDroid
gathers system apps/services and the device owner willing-
ness to be part of the communication channels and accord-
ingly modiﬁes the security levels to resolve information ﬂow
errors. Neither the user nor the system apps/services are
allowed to change the policy under enforcement.
4.2
Identiﬁcation of Security Levels
In order to mediate accesses to the microphone and speaker,
it is necessary to identify the security levels associated to
the parties involved in all three audio channels. AuDroid
identiﬁes the security levels of each internal party by us-
ing the process ID (PID) speciﬁed in the access requests for
the microphone or speaker. AuDroid leverages the conven-
tion used by the Linux kernel in Android OS, according to
which market apps have PID greater than 2001, system apps
have PID between 1001 and 2000, and system services have
PID between 1 and 1000. According to this convention, Au-
Droid identiﬁes system apps and services as high-secrecy and
high-integrity (HS,HI) subjects, market apps are identiﬁed
as low-secrecy and low-integrity (LS,LI) subjects.
By default, if an internal party is using the speaker, Au-
achieve complete mediation of accesses to the microphone
and speaker, which are low-level system resources, kernel
mediation would seem to be most appropriate. Unfortu-
nately, hooks inside the kernel do not have visibility into
the actual processes that are requesting access to these re-
sources. This is due to the fact that accesses to system
resources are always performed by system services (Media
Server) on behalf of the some requesting process, the one
running an app or another system service. For the micro-
phone and speaker, the Media Server provides complete me-
diation, as shown in Figure 1, because it is the only system
service allowed to access the microphone and speaker device
ﬁles, due to speciﬁc MAC rules speciﬁed by SE Android
[18]. Therefore, we extend the SELinux reference monitor
by placing hooks in the Media Server in the Android frame-
work/middleware.
4.4 Resolution of Unsafe Audio Flows
Blocking every audio ﬂow from a high-secrecy party to a
low-secrecy party would prevent system apps and services
from performing some expected operations, such as produc-
ing a ring tone on an incoming call. Similarly, blocking ev-
ery audio ﬂow from a low-integrity party to a high-integrity
party would prevent market apps from performing some ex-
pected operations, such as producing sound when a message
is received. To preserve these functional requirements, Au-
Droid uses resolvers to enable privileged processes to resolve
some information ﬂow errors.
Figure 6 shows the information ﬂows in need of resolu-
tion. To implement information ﬂow error resolution, Au-
Droid uses a callback mechanism, as in the Android Security
Modules (ASM) [1] framework, to notify the system app or
service at risk about the information ﬂow error. The sys-
tem app or service is provided with the identity of one or
more resolvers, known methods for preventing information
ﬂow errors. We examine diﬀerent types of resolvers in Sec-
tion 6, but one example would be to only play approved
audio ﬁles (e.g., ring tones) that do not contain secrets or
malice. Unlike ASM, only system apps and services may re-
ceive callbacks and only those currently using audio channels
are notiﬁed.
The trusted module can also convey the results of the user
interaction to other trusted components, such as AuDroid.
Unfortunately, to use UDAC, each app must leverage trusted
modules when user interaction is needed, but such modules
are not currently deployed and app developers may fail to
use UDAC even when such modules become available. In-
stead, in the construction of AuDroid, we modify the Media
Server to recognize when there remains an unsafe informa-
tion ﬂow to external parties (after applying resolvers), so it
can apply a trusted module to notify and gain approval from
users. Therefore, AuDroid does not depend on untrusted
app developers. The user approval cannot change the access
control policy in a discretionary manner, it only changes the
labeling of the external party for the communication chan-
nel. An event cache is used to automatically resolve identical
information ﬂows happening in a short time interval, which
reduces the resolution overhead and avoids bothering the
user.
AuDroid provides two mechanisms for the creation of trust-
ed paths. First, whenever a low-integrity and low-secrecy
party (i.e., a market app) asks for access to the microphone,
AuDroid requires approval by the device owner. The com-
munication is not authorized until the user allows recording
through the trusted path. AuDroid provides the user with
the information about the parties that would communicate
through the creation of the audio channel if the access re-
quest is granted. Second, AuDroid notiﬁes the user as long
as the microphone is in use. AuDroid uses a microphone icon
on the status bar and a notiﬁcation light on the front side
of the device to notify the user that the microphone is be-
ing accessed, as shown in Figure 7. The notiﬁcation light
replaces the microphone icon as the notiﬁcation mechanism
as soon as the screen goes oﬀ.
A recent user study found that visual notiﬁcation catches
the user attention for between 64-77% of the cases [10].
Figure 6: Audio Flows Allowed and Resolved by AuDroid
4.5 Resolution of Flows to External Parties
Resolvers can automatically resolve information ﬂow er-
rors to/from speakers and microphones. However, some in-
formation ﬂow errors may only be resolved by the external
party, i.e., the device owner. For example, if the device
owner uses a market app that uses the microphone (and has
suﬃcient Android permissions), it is not possible for a sys-
tem app or service to ensure that the device owner is safe
from eavesdropping.
To enable resolution, AuDroid creates trusted paths [15]
between the device owner and AuDroid, by implementing
mechanism similar to those supported by User-Driven Ac-
cess Control (UDAC) [6]. In UDAC, each app may choose
a trusted module to run when user interaction is required.
Figure 7: Microphone Icon and Notiﬁcation Light.
5.
IMPLEMENTATION OF AuDroid
In this section, we provide details about the implementa-
tion of the AuDroid Framework based on a vanilla Android
OS (version 5.0.1 r1), obtained from the oﬃcial Android
Open Source Project (AOSP) repository [23]. The AuDroid
prototype has been tested on a Nexus 5 smartphone. The
AuDroid source code and the code for the apps implementing
attacks (described in this paper) will be made available on
https://github.com/audroid. The current AuDroid pro-
totype is implemented in less than 520 LOC in C++, less
than 130 LOC in C, and about 120 LOC in Java. Conse-
quently, the impact in terms of the customization needed
to integrate AuDroid in a vanilla Android OS distribution
is negligible. We have written a simple patch that auto-
matically integrates the additional modules into the vanilla
distribution.
An overview of the AuDroid Framework architecture is de-
picted in Figure 8. The diﬀerence between AuDroid and the
original Android Framework architecture (Figure 1) is at
the System Services layer. In AuDroid, the Media Server is
made context-aware by integrating it with the following new
additional modules: Audio Hooks, Security Level Identiﬁer,
Reference Monitor Extension, and User Notiﬁcation mod-
ules. Additional modules are shown as dashed, light-grey
boxes in Figure 8.
Figure 8: AuDroid Framework Architecture.
5.1 Audio Hooks
AuDroid makes use of four Audio Hooks to mediate access
to the microphone and speaker. It uses two hooks for each
system resource in order to capture the resource acquisition
and release. Audio Hooks are placed inside the Audio Sys-
tem module, part of the Media Server, and located at the fol-
lowing four mediation points: AudioSystem::startInput(),
AudioSystem::stopInput(), AudioSystem::startOutput()
and AudioSystem::stopOutput(). These are the only entry
and exit points for obtaining the microphone and speaker
for any apps or other system services, as validated through
dynamic analysis of the Android framework source code and
SDK API. Each hook retrieves the PID of the calling pro-
cess which is passed, together with the mediation point, as
parameter in a call to the Security Levels Identiﬁer module.
A code snippet of an Audio Hook is reported below:
1 pid_t pid = I P C T h r e a d S t a t e :: self () -> g e t C a l l i n g P i d () ;
2 int sec_l = S e c u r i t y L e v e l I d e n t i f i e r :: g e t L e v e l s ( pid ) ;
3 P o l i c y E n f o r c e r :: enforce ( sec_l , m e d i a t i o n P o i n t ) ;
Since SELinux restricts access to the microphone or speak-
er only to the Media Server and the Audio Hooks, complete
mediation by the Media Server would be suﬃcient to prevent
circumvention. We used dynamic analysis, of the Android
Framework source code and SDK API, to validate complete
mediation, checking that every access to the microphone or
speaker was accompanied by an invocation of an appropriate
Audio Hook. Retaining such logging could be used to detect
errors, if any exist.
5.2 Security Levels Identiﬁer
The Security Levels Identiﬁer is implemented in C++ and
uses the PID of the calling process to categorize processes
accessing the microphone or speaker, as described in Section
4.2. The Security Levels Identiﬁer categorizes processes re-
lated to market apps as low-secrecy and low-integrity, and
processes related to system apps or services as high-secrecy
and high-integrity, in accordance with our security model.
Furthermore, the Security Levels Identiﬁer uses information
provided by the Keyguard Manager, a module inside the An-
droid framework, to determine if the device screen is locked
or unlocked as optional mechanism to authenticate the de-
vice owner, as described in Section 4.2.
5.3 Reference Monitor Extension
The Reference Monitor Extension is a software module,
implemented in C++, in charge of enforcing the access con-
trol policy in response to calls coming from the Audio Hooks.
The Reference Monitor Extension is context-aware, in that,
it uses the security levels identiﬁed by the Security Levels
Identiﬁer while authorizing access to the audio channels pro-
duce at runtime. Additionally, the Reference Monitor Ex-
tension can leverage resolvers whenever an information ﬂow
violation is identiﬁed, as described in Section 4.4. When-
ever a resolver is involved, the Reference Monitor Extension
uses the callback mechanism to obtain approval from the
system app or service at risk. Finally, the Reference Mon-
itor Extension builds trusted paths with the device owner
to obtain approval for the use of the microphone by low-
secrecy low-integrity processes. Upon approval, the access
to the microphone is made visible to the user through the
notiﬁcation mechanism, as described in Section 4.5.
5.4 User Notiﬁcation
In AuDroid, the device owner is notiﬁed about accesses to
the microphone, by running processes, via two notiﬁcation
mechanisms. The ﬁrst one is the Microphone Icon that ap-
pears on the status bar anytime a process accesses the micro-
phone after being authorized by the Media Server. An icon
depicting a microphone is shown on the device system status
bar for the entire audio session, as depicted in Figure 7. By
tapping on the microphone icon the device owner obtains
further information about the app currently accessing the
microphone. The second notiﬁcation consists of a blinking
notiﬁcation light, on the front side of the mobile device, ac-
tivated whenever the screen goes oﬀ if a process is accessing
the microphone after being authorized by the Media Server.
These two notiﬁcation mechanisms increase the device owner
awareness anytime the microphone is accessed. We rely on
the user common sense in avoiding speaking about personal
matters or sensitive information whenever access to the mi-
crophone is signaled.
6. EVALUATION
In this section, we evaluate the eﬀectiveness of AuDroid in
preventing the six types of attack scenarios for audio chan-
nels discussed in Section 2.2, examine whether 17 widely-
used apps and services can still be run eﬀectively under Au-
Droid, and measure the performance impact of AuDroid.
6.1 Attack Prevention
Table 2 compares the eﬀectiveness of AuDroid in prevent-
ing the six types of attack scenarios on audio channels out-
lined in Section 2.2 to Android, other related work described
in Section 7, and Simple Isolation2. AuDroid is capable of
preventing all six types of attack scenarios. Other defenses
prevent no more than two types of these attack scenarios be-
cause they lack awareness of the impact of external parties.
Further, other defenses are of limited applicability or may
often cause false positives, as described in the next section.
2No simultaneous access to the microphone and speaker by
two diﬀerent processes.
Table 2: Attack Prevention Analysis
Legend:
Attack Prevented
Attack Succeeded
(cid:52) Attack might
be Prevented
Base Android
Simple Isolation
AuDroid
Google Voice Search bug fix
Control Access to Speaker
System Services Permission
Voiceprint Recognition
l
o
r