                $input =& $GLOBALS;    
                break;
            case 'data'    :   
                $input =& $datas;      
                break;
            default:
                return null;
        }
        if(''==$name) { // 获取全部变量
            $data       =   $input;
            $filters = isset($filter) ? $filter.','.C('DEFAULT_FILTER') : C('DEFAULT_FILTER');
            //$filters    =   isset($filter)?$filter:C('DEFAULT_FILTER');
            if($filters) {
                if(is_string($filters)){
                    $filters    =   explode(',',$filters);
                }
                foreach($filters as $filter){
                    $data   =   array_map_recursive($filter,$data); // 参数过滤
                }
            }
        }elseif(isset($input[$name])) { // 取值操作
            $data       =   $input[$name];
            $filters = isset($filter) ? $filter.','.C('DEFAULT_FILTER') : C('DEFAULT_FILTER');
            //$filters    =   isset($filter)?$filter:C('DEFAULT_FILTER');
            if($filters) {
                if(is_string($filters)){
                    if(0 === strpos($filters,'/')){
                        if(1 !== preg_match($filters,(string)$data)){
                            // 支持正则验证
                            return   isset($default) ? $default : null;
                        }
                    }else{
                        $filters    =   explode(',',$filters);                    
                    }
                }elseif(is_int($filters)){
                    $filters    =   array($filters);
                }
                if(is_array($filters)){
                    foreach($filters as $filter){
                        if(function_exists($filter)) {
                            $data   =   is_array($data) ? array_map_recursive($filter,$data) : $filter($data); // 参数过滤
                        }else{
                            $data   =   filter_var($data,is_int($filter) ? $filter : filter_id($filter));
                            if(false === $data) {
                                return   isset($default) ? $default : null;
                            }
                        }
                    }
                }
            }
            if(!empty($type)){
                switch(strtolower($type)){
                    case 'a':   // 数组
                        $data   =   (array)$data;
                        break;
                    case 'd':   // 数字
                        $data   =   (int)$data;
                        break;
                    case 'f':   // 浮点
                        $data   =   (float)$data;
                        break;
                    case 'b':   // 布尔
                        $data   =   (boolean)$data;
                        break;
                    case 's':   // 字符串
                    default:
                        $data   =   (string)$data;
                }
            }
        }else{ // 变量默认值
            $data       =    isset($default)?$default:null;
        }
        is_array($data) && array_walk_recursive($data,'think_filter');
        return $data;
    }
再上述I函数中，参数$name——>request.site_domain，参数$filter——>trim，所以首先会进入到一个if判断语句的elseif中，并且设置$tyep为's'，即数据类型未字符串，之后进入到紧跟着的"if(strpos($name,'.'))
{
"中，在这里分别从$name取值并将其分配指配给参数$method与$name，此时的$method即为requets，而$name为site_domain(即我们传递进来的参数值)，之后跟进$method进行匹配操作，在此处由于$method为$request，所以最终$input为$REQUEST，之后退出循环。  
之后在进行下面的另一个if...else判断，此处的$name不为空，所以直接进入else语句中，之后通过语句：isset($input[$name])来判断是否设置$name的值，此时的判断等级于isset($REQUEST[site_domain])，很显然我们的payload中构造的参数正是有site-domain传递进来的，所以此处定然不为空，之后继续下下分析，在这里会对$data进行一次赋值操作，数据为我们传递过来的site_domain的值，而此时的fileters为我们的trim(对字符串两侧的特定字符进行移除操作)，之后通过调用array_map_recursive函数对参数进行过滤操作，array_map_recursive代码如下所示：
    function array_map_recursive($filter, $data) {
        $result = array();
        foreach ($data as $key => $val) {
            $result[$key] = is_array($val)
             ? array_map_recursive($filter, $val)
             : call_user_func($filter, $val);
        }
        return $result;
     }
在array_map_recursive函数中会通过一个循环来递归对$data中的数据进行参数过滤，之后将传入的filter——>$trim()，以及$val—>$data作为参数通过call_user_func来调用用户自定义的函数，此处为trim()函数，所以此时会对我们构造的$data进行一次两边去空格、去Tab键等操作。  
之后我们再往下跟踪分析，之后会根据$type的值来对$data进行一次前置转换，此处为s，即字符串类型，在最后会通过array_walk_recursive来递归调用think_fliter对$data进行一次安全过滤操作，think_fliter函数代码如下所示：
    function think_filter(&$value){
        // TODO 其他安全过滤
        // 过滤查询特殊字符
        if(preg_match('/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i',$value)){
            $value .= ' ';
        }
    }
可以看到该函数主要过滤了一些查询特殊字符，此处应该为防止SQL注入的安全防护措施，此处对我们payload中的site_domain不会造成任何影响。  
下面我们继续返回之前的/Application/Admin/Controller/ConfigController.class.php文件中进行分析，之后可以看到此处的$site_domain会继续被传进trim函数中经一次移除"/"操作，之后判断$site_domain是否为空，以及$site_domain是否等于'qscms_site_domain'(此处的C函数用于获取和设置配置参数)，之后对$site_domain中的"[http://"或"https://"进行一次替换操作，并将其复制给$str，最后调用update_config函数进行一次更新配置操作，并以$config作为参数进行传递(反向溯源：$domain—>$str—>$site_domain——>request.site_domain](http://))
    public function edit(){
            if(IS_POST){
                $site_domain = I('request.site_domain','','trim');
                $site_domain = trim($site_domain,'/');
                $site_dir = I('request.site_dir',C('qscms_site_dir'),'trim');
                $site_dir = $site_dir==''?'/':$site_dir;
                $site_dir = $site_dir=='/'?$site_dir:('/'.trim($site_dir,'/').'/');
                $_POST['site_dir'] = $site_dir;
                if($site_domain && $site_domain != C('qscms_site_domain')){
                    if($site_domain == C('qscms_wap_domain')){
                        $this->returnMsg(0,'主域名不能与触屏版域名重复！');
                    }
                    $str = str_replace('http://','',$site_domain);
                    $str = str_replace('https://','',$str);
                    if(preg_match('/com.cn|net.cn|gov.cn|org.cn$/',$str) === 1){
                        $domain = array_slice(explode('.', $str), -3, 3);
                    }else{
                        $domain = array_slice(explode('.', $str), -2, 2);
                    }
                    $domain = '.'.implode('.',$domain);
                    $config['SESSION_OPTIONS'] = array('domain'=>$domain);
                    $config['COOKIE_DOMAIN'] = $domain;
                    $this->update_config($config,CONF_PATH.'url.php');
                }
                $logo_home = I('request.logo_home','','trim');
                if(strpos($logo_home,'..')!==false){
                    $_POST['logo_home'] = '';
                }
                // $logo_user = I('request.logo_user','','trim');
                // if(strpos($logo_user,'..')!==false){
                //     $_POST['logo_user'] = '';
                // }
                $logo_other = I('request.logo_other','','trim');
                if(strpos($logo_other,'..')!==false){
                    $_POST['logo_other'] = '';
                }
                if($default_district = I('post.default_district',0,'intval')){
                    $city = get_city_info($default_district);
                    $_POST['default_district'] = $city['district'];
                    $_POST['default_district_spell'] = $city['district_spell'];
                    /*选中最后一级，默认选择上一级
                    $s = D('CategoryDistrict')->get_district_cache($default_district);
                    $city = get_city_info($default_district);
                    if(!$s){
                        $citycategory = explode('.',$city['district']);
                        if(2 _edit();
            $this->display();
        }
之后跟进update_config函数，函数代码如下所示：  
文件位置：Application\Common\Controller\BackendController.class.php
    public function update_config($new_config, $config_file = '') {
            !is_file($config_file) && $config_file = HOME_CONFIG_PATH . 'config.php';
            if (is_writable($config_file)) {
                $config = require $config_file;
                $config = multimerge($config, $new_config);
                if($config['SESSION_OPTIONS']){
                    $config['SESSION_OPTIONS']['path'] = SESSION_PATH;
                }
                file_put_contents($config_file, " $v) {
                if (is_array($v) && count($v)) {
                    $a[$k] = in_array($k, array('SESSION_OPTIONS')) ? multimerge($a[$k], $v) : $v;
                } else {
                    $a[$k] = $v;
                }
            }
        } else {
            $a = $b;
        }
        return $a;
    }
之后返回到BackendController.class.php中在L475行会进行一次写文件操作，其中$config_file为Application/Common/Conf/url.php，内容$config为我们恶意请求中的site_domain的内容，再次我们可以向Application/Common/Conf/url.php写入我们构造的恶意PHP代码：
    public function update_config($new_config, $config_file = '') {
            !is_file($config_file) && $config_file = HOME_CONFIG_PATH . 'config.php';
            if (is_writable($config_file)) {
                $config = require $config_file;
                $config = multimerge($config, $new_config);
                if($config['SESSION_OPTIONS']){
                    $config['SESSION_OPTIONS']['path'] = SESSION_PATH;
                }
                file_put_contents($config_file, "  