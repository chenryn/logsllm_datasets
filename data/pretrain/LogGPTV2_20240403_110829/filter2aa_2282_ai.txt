### Comparison of AWID and NFC Tags

In the case of AWID, the tag repeatedly generates the same waveform, which is then demodulated by the reader. In contrast, NFC (Near Field Communication) tags support a variety of operating modes, including data sharing. While some NFC tags offer security features such as cryptography, many popular applications only verify basic, unprotected data, such as the tag's unique identifier (UID).

For example, Timo Kasper's PhD thesis from Ruhr-University Bochum describes how the Siemens SIPORT enterprise solution for access control was easily subverted. This system relied on the UID (transmitted in plaintext) and the first sector of a Mifare Classic card using default keys. Similarly, other access control systems, including the Android NFC 'Smart Unlock' feature and Samsung locks (like the SHS-3321), only check the unprotected UID.

### Enhancements to Proxmark3 Firmware

This section outlines the enhancements made to the Proxmark3 firmware to support standalone operation for capturing, cloning, and emulating UIDs from ISO1443a-compliant tags. The initial design supports cloning changeable Mifare Classic cards.

#### Standalone Mode

Standalone mode runs entirely on the ARM, with the source code contained in the `armsrc/appmain.c` file. Each loop of the main application checks for commands over USB and whether the push-button has been held down for a second. For low-frequency operations, the `SamyRun()` function provides replay and simulation logic for HID tags. High-frequency interactions require a different FPGA configuration and ISO14443-specific function calls. FPGA configurations are stored in the ARM's flash memory and can be loaded on demand using `FpgaDownloadAndGo()`. The `FPGA_BITSTREAM_HF` configuration arranges the pin-out to connect the appropriate coil and prepare the FPGA for high-frequency commands.

#### Structure of Standalone Operation

The general structure of standalone operation can be modeled around the existing `SamyRun()` function, but it requires replacing HID logic with ISO1443 logic. For HID reading mode, `SamyRun()` uses `CmdHIDdemodFSK()`, while the new logic will need to command the FPGA to act as an ISO14443a reader using `iso14443a_setup(FPGA_HF_ISO1443A_READER_MOD)`. The `iso14443a_select_card()` function reads the UID of a tag and returns false until a card is successfully selected and its UID saved to memory. The UID is printed and rearranged to the expected byte order for cloning and replay functions.

#### Cloning Process

For cloning, `SamyRun()` uses a single function, `CopyHIDtoT55x7()`, while the high-frequency equivalent for writing to a changeable UID card requires more effort. The UID value must be transformed to create a well-formed block 0. The relevant functions for working with changeable UID Mifare cards are `MifareCSetBlock()` and `MifareCGetBlock()`. An example usage of these functions to write a new UID to a card is presented in `mfCSetUID()`, which reads block 0 from the target tag, replaces the UID bytes, maintains the reserved bytes 5-7, and sets an appropriate block check character (BCC).

#### Tag Simulation

The final standalone feature is tag simulation, performed for HID tags with `CmdHIDsimTAG()`. For ISO14443, the equivalent function is `SimulateIso14443aTag()`, which takes high and low-order bytes for the UID and configures the device to act as a tag with that UID. However, simulating an ISO14443a tag may not work as well as cloning to a card. Using a PCB antenna from RyscCorp works well for simulating the tag when interrogated by some devices but not others. For example, when the coil is brought near certain Samsung locks, the simulation function reports unexpected commands, while a cloned card works perfectly. This may be due to timing discrepancies or antenna shape, but experiments with other hardware-based tag simulations (PN533 with libNFC and ChameleonMini) had similar results. These devices are generally not recognized as tags by the lock. Further testing is needed to debug this behavior and determine if it is an advanced security feature of the lock.

#### Workflow Considerations

Once the main functionality was working, the next challenge was to reconsider the usage workflow. In the traditional low-frequency standalone mode, it is necessary to use the button to enter standalone mode and then again to enter record mode. It is also possible to go directly into play mode, but since the ID is not initialized or preserved across sessions, this seemed extraneous. Instead, the NFC code has been designed to enter directly into reader mode.