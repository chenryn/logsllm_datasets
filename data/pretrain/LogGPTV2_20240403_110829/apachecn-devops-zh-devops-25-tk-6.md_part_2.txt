![](img/1fc859c6-1c3a-4f74-9196-b1b624a8292f.png)
Figure 6-2: Grafana's import dashboard option
请在*Grafana.com 仪表盘*栏中输入`3119`，点击加载按钮。您将看到几个字段。在这种情况下，唯一重要的是*普罗米修斯*下拉列表。我们必须用它来设置数据源。选择很容易，因为我们只定义了一个。选择普罗米修斯，然后单击导入按钮。
您眼前看到的是一个仪表板，其中包含一些基本的 Kubernetes 指标。
![](img/4059d071-a450-49c1-bf7e-a5ca29798723.png)
Figure 6-3: Kubernetes cluster monitoring dashboard
然而，有些图表可能不起作用。这是否意味着我们导入了错误的仪表板？简单的回答恰恰相反。在所有可用的仪表板中，这一个可能拥有最多可用的图表。至少，如果我们只计算那些或多或少有用的东西。这样的结果是常见的。这些仪表板由社区维护，但大多数是为个人使用而制作的。它们被配置为在特定的集群中工作，并使用特定的指标。您将无法找到许多不做任何更改就能工作的仪表板，同时显示您真正需要的东西。相反，我认为这些仪表板是一个很好的起点。
我导入它们只是为了获得一个可以修改以满足我的特定需求的基础。这就是我们接下来要做的，至少是部分要做的。
目前，我们将只关注旨在使其全面运行的变化。我们将制作一些目前没有数据的图表，并删除那些对我们没有用处的图表。
如果我们仔细查看*总使用量*行，我们会看到*集群文件系统使用量*为*不适用*。它使用的指标可能有问题。让我们仔细看看。
In some clusters (for example, EKS) the hard-coded file system in this dashboard is the correct one. If that's the case (if *Cluster filesystem usage* is not *N/A*) you do not have to make any changes. However, I suggest you still go through the exercise while imagining that your cluster uses a different file system. That way you'll learn a few tips that you could apply to other dashboards.
请按下*集群文件系统使用*标题旁边的箭头，然后单击编辑链接。
![](img/b8db47c6-c501-49eb-a072-1fea9b62c391.png)
Figure 6-4: Grafana's option to edit a panel
该图使用的查询(为可读性而格式化)如下。
```
 1  sum (
 2      container_fs_usage_bytes{
 3          device=~"^/dev/xvda.$",
 4          id="/",
 5          kubernetes_io_hostname=~"^$Node$"
 6      }
 7  ) / 
 8  sum (
 9      container_fs_limit_bytes{
10          device=~"^/dev/xvda.$",
11          id="/",
12          kubernetes_io_hostname=~"^$Node$"
13      }
14  ) * 100
```
我们不会详细讨论那个查询。你现在应该熟悉普罗米修斯的表情了。相反，我们将关注问题的可能原因。我们可能没有名为`/dev/xvda`的文件系统设备(除非您使用的是 EKS，或者在某些情况下是 GKE)。如果这是问题所在，我们可以通过简单地将值更改为我们的设备来修复图形。但是，在我们走这条路之前，我们可能会探索格拉夫纳变量。毕竟，如果我们甚至不知道我们的设备是什么，用另一个硬编码值来改变一个硬编码值对我们没有任何好处。
我们可以去普罗米修斯那里取回所有设备的清单，或者让格拉夫娜帮我们做。我们会选择后者。
仔细看看`kubernetes_io_hostname`。设置为`^$Node$`。这是一个使用 Grafana 变量的例子。我们接下来将探索它们，试图取代硬编码设备。
请单击位于屏幕右上角的返回仪表板按钮。
点击位于屏幕顶部的*设置*图标。您将看到我们可以更改的所有仪表板范围的配置。请随意探索左侧菜单中的选项。
由于我们有兴趣创建一个动态填充查询的`device`标签的新变量，我们的下一步操作是单击*设置*部分的变量链接，然后单击+ New 按钮。
请输入`device`作为变量名，`IO Device`作为标签。我们将从普罗米修斯(数据源)中检索值，因此我们将把类型留给查询。
接下来，我们需要指定数据源。选择$datasource。这告诉 Grafana，我们希望从导入仪表板时选择的任何数据源中查询数据。
到目前为止，一切可能都不言自明。接下来的不是。我们需要查阅文档并学习如何编写用作变量值的 Grafana 查询。
```
 1  open
    "http://docs.grafana.org/features/datasources/prometheus/#query-variable"
```
让这成为一个练习。通过文档，了解如何编写一个查询来检索`container_fs_usage_bytes`度量中可用的标签`device`的所有不同值。
Grafana 只支持四种类型的变量查询，所以我认为您不难发现我们应该添加到查询字段中的表达式是`label_values(container_fs_usage_bytes, device)`。
查询完成后，剩下的就是点击添加按钮。
![](img/c8cb3194-277c-4074-8c3e-6d72d9f9476e.png)
Figure 6-5: Grafana's screen for creating new dashboard variables
现在我们应该回到仪表板并确认新变量可用。
您应该会在屏幕左上角看到一个新的下拉列表，标签为*输入输出设备*。如果您扩展它，您将看到我们集群中使用的所有设备。确保选择了正确的设备。那很可能是`/dev/sda1`或`/dev/xvda1`。
接下来，我们需要更改图表以使用我们刚刚创建的变量。
请单击*集群文件系统使用情况*图表旁边的箭头，并选择编辑。度量(查询)包含两个硬编码的`^/dev/xvda.$`值。将其更改为`$device`，并单击位于屏幕右上角的返回仪表板按钮。
就这样。该图现在通过向我们显示集群文件系统使用率的百分比(`/dev/sda1`)来正确工作。
但是下面的*使用的*和*合计*号仍然是*不适用*。我相信你知道怎么修复它们。编辑那些图表并用`$device`替换`^/dev/xvda.$`。
该仪表板仍有两个问题需要解决。或者更准确地说，两张图对我们来说毫无用处。*系统服务 CPU 使用情况*和*系统服务内存使用情况*图表的目的应该可以从它们的标题中推断出来。然而，大多数 Kubernetes 集群不提供对系统级服务的访问(例如 GKE)。即使他们这样做了，我们的普罗米修斯也没有被配置为获取数据。如果你不相信我，复制其中一个图形的查询并在普罗米修斯中执行。现在，这些图表只是在浪费空间，所以我们将删除它们。
请点击*系统服务 CPU 使用率*行标题旁边的*垃圾桶*图标。单击是删除行和面板。对*系统服务内存使用*行重复相同的操作。
现在我们已经完成了对仪表板的更改。它是完全可操作的，我们应该通过点击屏幕右上角的*保存仪表盘*图标，或者按 **CTRL+S** 来保存更改。
我们不会讨论格拉夫纳的所有选择和我们能做的行动。我相信你能自己弄清楚。这是一个非常直观的应用。相反，我们将尝试创建自己的仪表板。或者，至少，探索一些能让你继续自己生活的事情。
# 创建自定义仪表板
如果我们所有的需求都能被现有的仪表板覆盖，那就太好了。但是，事实可能并非如此。每个组织都是“特殊的”，我们的需求必须反映在我们的仪表板上。有时我们可以侥幸逃脱别人做的仪表板，有时我们需要改变它们。在其他情况下，我们需要创建自己的仪表板。这就是我们接下来要探索的。
请点击左侧菜单中的+图标，选择`Create Dashboard`。您可以选择几种面板。选择`Graph`。
在定义第一个图形之前，我们将更改一些仪表板设置。请点击屏幕右上角的*设置*图标。
在*常规*部分，键入仪表板的名称。如果你今天没有灵感，可以称之为`My Dashboard`。将标签设置为`Prometheus`和`Kubernetes`。键入每个标签后，您必须按回车键。最后，将时区更改为本地浏览器时间。
![](img/61df4ee1-02ff-4141-bce7-d38c27e8c7f7.png)
Figure 6-6: Grafana's dashboard general settings screen
那是无聊的部分。现在让我们换个更有趣的话题。我们即将把我们在普罗米修斯中创建的一个警报转换成图形。我们将使用告诉我们实际 CPU 与保留 CPU 的百分比的那个。为此，我们需要一些变量。更准确地说，我们并不真正需要它们，因为我们可以对这些值进行硬编码。但是，如果我们决定改变它们，这将在以后引起问题。修改变量比更改查询容易得多。
具体来说，我们需要一些变量来告诉我们最小 CPU 是多少，这样我们就可以忽略被设置为使用非常低的保留的应用的阈值。此外，我们将定义作为上下边界的变量。我们的目标是在与实际使用情况相比时，如果保留的 CPU 太低或太高时得到通知，就像我们在普罗米修斯警报中所做的那样。
请从左侧菜单中选择变量部分，然后单击添加变量按钮。
当我们为导入的仪表板创建一个新的变量时，您已经看到了带有 Grafana 变量的屏幕。然而，这次我们将使用稍微不同的设置。
输入`minCpu`作为名称，选择常量作为类型。与我们之前创建的`device`变量不同，这次我们不需要 Grafana 来查询这些值。通过使用该类型，我们将定义一个常数值。请将*值设置为* `0.005`(五个 CPU 毫秒)。最后，我们不需要在仪表板中看到该变量，因为该值不太可能经常变化。如果我们将来确实需要改变它，我们总是可以回到这个屏幕并更新它。因此，请将“隐藏”值更改为“可变”。
剩下的就是点击添加按钮两次。
![](img/e0fc3634-99c7-4fb6-9cf9-5b77aa39567f.png)
Figure 6-7: Grafana's dashboard new variable screen
我们还需要两个变量。可能不需要重复相同的说明，因此请使用以下信息来创建它们。
```
 1  Name:  cpuReqPercentMin
 2  Type:  Constant
 3  Label: Min % of requested CPU
 4  Hide:  Variable
 5  Value: 50
 6
 7  Name:  cpuReqPercentMax
 8  Type:  Constant
 9  Label: Max % of requested CPU
10  Hide:  Variable
11  Value: 150
```
现在我们可以回去定义我们的图表。请点击屏幕右上角的*返回仪表盘*图标。
您已经知道如何编辑面板。点击*面板标题*旁边的箭头，选择编辑。