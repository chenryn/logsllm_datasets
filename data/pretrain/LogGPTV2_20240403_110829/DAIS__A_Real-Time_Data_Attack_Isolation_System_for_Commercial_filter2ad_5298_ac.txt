for suspicious user n
real database
... ...
... ...
... ...
table 1
... ...
table m
triggers
triggers
... ...
triggers
Figure 3. System Model of DAIS
3 DAIS
The major components of DAIS are shown in Figure
3. In general, the Intrusion Detector informs DAIS which
users are suspicious and should be isolated. The Media-
tor, which has three components, proxies every user trans-
action and SQL statement (or command). The triggers, the
SQL Statement Logger, and the Read Extractor are respon-
sible for keeping track of the read and write operations of
transactions, which are necessary to build the precedence
graph when a merging should be done. The SQL Statement
Rewriter and Redirector (SRR) is responsible for enforcing
the Version Control Algorithm. The Read Edge Manager
helps to maintain read edges. The Merger is responsible for
enforcing Conﬂict Identiﬁcation and Resolution Algorithm
and the Merging Algorithm. The On-the-ﬂy Isolation Con-
troller enables new user transactions to continue executing
without jeopardizing the correctness of merging processes.
3.1 Intrusion Detector
The Intrusion Detector informs DAIS which users should
be isolated. The Intrusion Detector does anomaly detec-
tion in terms of each transaction and each user. For each
transaction of a user, the Intrusion Detector will generate
an anomaly degree (based on the transaction’s behavior),
which indicates how abnormal (or suspicious) the transac-
tion is. Then the anomaly degrees of the transactions sub-
mitted by the user (within a session) will be synthesized to
generate the anomaly degree of the user. If the anomaly de-
5
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:09:56 UTC from IEEE Xplore.  Restrictions apply. 
gree is above a speciﬁc threshold, the user will be reported
to the SRR as suspicious. The threshold is adaptively de-
termined by the SSO and the Intrusion Detector based on
the probability that a suspicious transaction turns out to be
malicious, which can be indicated, to some extent, by the
detection history. Readers can refer to [29] for more details
about this detector.
3.2 Triggers
Oracle Redo logs record every write operation, however,
unfortunately its structure is conﬁdential, so getting infor-
mation about writes from Oracle Redo logs is very difﬁcult.
This is also why we use triggers to keep track of writes.
Triggers can capture the write operations associated with
a Update, Delete, or Insert statement. We use triggers
to keep track of the writes of both trustworthy and suspi-
cious transactions. To illustrate, consider a simple bank-
ing database that has two tables:
the the Account ta-
ble that keeps the current balance of each customer ac-
count, and the Money Transaction table that keeps the trails
of every deposit or withdraw. The Account table has
two ﬁelds: Account ID that is the primary key, and Bal-
ance. The Money Transaction table has four ﬁelds:
(1)
Money Transaction ID, the primary key; (2) Account ID;
(3) Amount; (4) Date; and (5) Teller ID. When a user de-
posits $500 to his account, we assume the database trans-
action inserts a new money transaction record into the
Money Transaction table and updates his account balance.
After this transaction, the new records added by the triggers
associated with these two tables to the Write Log are shown
in the following table:
Transaction ID Table Name
4.91.6240
4.91.6240
Money Transaction
Account
Key
2833
1591766 Update
OP Type
Insert
Note that Oracle uses a unique seven digit Transaction ID
to identify each (database) transaction. Note also that here
for simplicity we log writes at record level where each data
item represents a record. Logging writes at ﬁeld level can
achieve ﬁner isolation control, however, it causes more re-
sources.
3.3 SQL Statement Logger
Although triggers can capture every write, triggers are
generally not able to capture the reads by SQL statements.
Although every record that is updated or deleted is also a
record that is read, a Delete, Insert, or Update statement
can cause more reads especially when they contain nested
Select statements, which we will show shortly.
In order to capture reads, we take an approach to extract
reads from SQL statement proﬁles and transaction input ar-
guments. The job of the SQL Statement Logger is to keep
every SQL statement as well as its arguments in the SQL
Statement Table. To illustrate, Table 1 shows the corre-
sponding SQL statements kept by this component for the
example transaction introduced in Section 3.2. Here the
Seq No ﬁelds indicate the execution order of SQL state-
ments within a transaction.
3.4 Read Extractor
Triggers can capture every write operation, however, no
COTS DBMS logs read operations and triggers cannot cap-
ture reads. DAIS takes the approach of extracting reads
from SQL statement texts. In particular, the Read Extrac-
tor uses the SQL Statement Table and the Read Set Tem-
plate Table to extract read operations of transactions. We
assume each user transaction belongs to a speciﬁc transac-
tion type, and the transaction proﬁle (or program) for each
transaction type is known. DAIS cannot automatically ex-
tract reads from ad-hoc transactions without a known pro-
ﬁle. The Read Set Template Table, which keeps the read
set template for each transaction type, is extracted from the
proﬁles of these transaction types. The reads of a speciﬁc
transaction (cid:1) is restored by materializing the read set tem-
plate of (cid:1) ’s transaction type with the input arguments of (cid:1) ,
which are kept in the SQL Statement Table. We use a sim-
ple example to show the idea. Consider again the example
transaction introduced in Section 3.2, assume it belongs to
the Deposit transaction type, then the read set template of
Deposit transactions is shown in the following table:
Trans Type
Deposit
Table Name
Account
Identiﬁer
AccID
Here the Identiﬁer ﬁeld sometimes may contain only a part
of a primary key (In this case, an identiﬁer could identify
multiple records). Note that the Insert statement causes no
reads.
The read set template tells us which table is read, but
does not tell us which records are read. In order to ﬁgure
out which records are read, we need to materialize the Iden-
tiﬁer ﬁelds. For this purpose, we use the following input
argument extraction table:
Trans Type
Deposit
Identiﬁer Var
AccID
S Pattern
‘UPDATE’
After
‘Account ID =’
Before
‘;’
This table says that for a Deposit transaction the value of the
Identiﬁer variable AccID is the number after the string “Ac-
count ID =” and before the char “;” within the SQL state-
ment that starts with ”UPDATE”. Using this table and Ta-
ble 1, we can easily ﬁgure out that for transaction 4.91.6240
the Identiﬁer variable AccID is 1591766 (Note that since a
transaction could execute different sets of statements based
on different input arguments and database states, Seq No
sometimes can identify a wrong statement). Then based
on the previous Template table, we can know the transac-
tion has read only one record, which can be denoted as Ac-
count.1591766. Then this read operation will be inserted
into the Read Log, as shown in the following table:
Transaction ID Table Name
4.91.6240
Account
Primary Key
1591766
In the above example, we assume the type of transaction
4.91.6240 is known. However, the Read Extractor in fact
6
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:09:56 UTC from IEEE Xplore.  Restrictions apply. 
Trans ID
4.91.6240
SQL Type
INSERT
4.91.6240 UPDATE
Statement
INSERT INTO Money Transaction (Money Transaction ID,
Account ID, Amount, Date, Teller ID)
VALUES (2833, 1591766, 500, ‘21-Mar-00’, ‘Teller-1’);
UPDATE Account SET Balance = Balance+500
WHERE Account ID = 1591766;
Seq No
1
2
Table 1. Example SQL Statements Kept in the SQL Statement Table
does not know the type of transaction 4.91.6240 when Ta-
ble 1 is scanned. DAIS uses an additional table (called the
Transaction Pattern Table), which stores the proﬁle pattern
of each transaction type, to identify the type of a transaction.
For example, the proﬁle pattern for Deposit transactions can
say that each transaction has two statements and the ﬁrst
one starts with “INSERT INTO Money Transaction”. By
matching the real statements executed by a transaction with
the Transaction Pattern Table, we can ﬁgure out the type of
a transaction.
Our study has shown that for most real world Select, In-
sert, and Delete statements that have a simple structure, the
above method can work very well. However, it should be
noticed that for many complex SQL statements that con-
tain nested Select statements, extracting reads is not a easy
job. In [2], some general guidelines are given for extract-
ing reads from nested statements. Moreover, it should be
noticed that the method of extracting reads from transac-
tion proﬁles sometimes may only restore an approximation
of the real read set of a transaction because the complexi-
ties of transactions can result in such read set templates that
make exact materialization impossible. In order to guaran-
tee that approximate read sets will not affect the correctness
of DAIS, we need to enforce the following constraint during
the process of extracting read set templates:
Containment Rule: Whenever a read set template is ex-
tracted from a transaction proﬁle, any transaction (cid:1)
of that type, when executed, must have a real read set
contained by the materialized read set template.
3.5 SQL Statement Rewriter and Redirector
To save resources, DAIS does not use completely repli-
cated databases to do isolation, instead, DAIS maintains ex-
tra data versions only for the items that are updated (includ-
ing item creation) by an isolated transaction. In particular,
when a suspicious user is isolated, for each (real database)
table (cid:12)(cid:1) that the user wants to write, DAIS maintains one
extra table with the same structure, called a suspicious ver-
sion of (cid:12)(cid:1) (denoted (cid:4)(cid:1)), only during the isolation period. (cid:4) (cid:1)
keeps all and only the writes of the user on (cid:12) (cid:1). Hence, the
size of (cid:4)(cid:1) should be much smaller than (cid:12) (cid:1) in most cases.
In addition to maintaining suspicious data versions, the
SQL Statement Rewriter and Redirector (SRR) maintains
the information about each suspicious transaction in the Iso-
lated Transaction Table whose structure is shown as follows.
User ID Trans ID Status
Here the Status ﬁeld of a record indicates the corresponding
transaction commits, aborts, or is still active.
The key challenge of DAIS is how to enforce one-way
isolation. When an isolated user issues a SQL statement to
access a table (cid:12)(cid:1), according to one-way isolation, a record
 in (cid:12)(cid:1) can be read only if  does not have a version in
(cid:4)(cid:1), and only (cid:4)(cid:1) can be modiﬁed. To achieve this, changing
the way SQL statements are executed, i.e., using templates,
can cause substantial overhead, however, executing the SQL
statement solely on (cid:4)(cid:1) can generate invalid results, so the
only practical way is to rewrite the SQL statement.
To rewrite and redirect user SQL statements, we have to
proxy user transactions. DAIS assumes every Application
uses OCI calls, a standard interface for Oracle, to access
the database. To proxy user transactions, DAIS proxies ev-
ery OCI call by providing the Applications with a pseudo