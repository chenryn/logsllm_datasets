Telephone Scams,” in USENIX Security. USENIX, 2019, pp. 1327–1340.
[Online]. Available: https://www.usenix.org/system/ﬁles/sec19-tu.pdf
[79] L. Vaas, “Robocalls Now Flooding US Phones with 200m Calls per
Day,” 2019. [Online]. Available: https://nakedsecurity.sophos.com/2019/
09/17/robocalls-now-flooding-us-phones-with-200m-calls-per-day/
J. van den Hooff, D. Lazar, M. Zaharia, and N. Zeldovich, “Vuvuzela:
Scalable Private Messaging Resistant to Trafﬁc Analysis,” in Symposium
on Operating Systems Principles (SOSP). ACM, 2015, pp. 137–152.
[Online]. Available: https://doi.org/10.1145/2815400.2815417
[80]
[81] WhatsApp Inc., “WhatsApp Legal Info,” 2019. [Online]. Available:
https://www.whatsapp.com/legal?eea=0#terms-of-service
[82] G. Wondracek, T. Holz, E. Kirda, and C. Kruegel, “A Practical Attack
IEEE, 2010, pp.
to De-anonymize Social Network Users,” in S&P.
223–238. [Online]. Available: https://doi.org/10.1109/SP.2010.21
[83] WriteThat.Name, “Your Address Book Automagically Updated,” 2013.
[Online]. Available: http://writethat.name/
[61] B. Pinkas, T. Schneider, G. Segev, and M. Zohner, “Phasing: Private Set
Intersection Using Permutation-based Hashing,” in USENIX Security.
USENIX, 2015, pp. 515–530. [Online]. Available: http://ia.cr/2015/634
[84] x0rz, “A Look Into Signal’s Encrypted Proﬁles,” 2018. [Online].
Available: https://blog.0day.rocks/a-look-into-signals-encrypted-proﬁles
-5491908186c1
15
[85] L. Yapparova and A. Kovalev, “Comrade Major,” 2019. [Online].
Available: https://meduza.io/en/feature/2019/08/11/comrade-major
[86] G. Ye, Z. Tang, D. Fang, Z. Zhu, Y. Feng, P. Xu, X. Chen,
and Z. Wang, “Yet Another Text CAPTCHA Solver: A Generative
Adversarial Network Based Approach,” in CCS. ACM, 2018, pp.
332–348. [Online]. Available: https://doi.org/10.1145/3243734.3243754
[87] M. Zweerink, “WhatsApp Privacy is Broken!” 2015. [Online]. Available:
https://maikel.pro/blog/en-whatsapp-privacy-options-are-illusions/
[88] ——, “WhatsApp Privacy Problem Explained in Detail,” 2015. [Online].
Available: https://maikel.pro/blog/en-whatsapp-privacy-problem-explain
ed-in-detail/
[89] ——, “PoC WhatsSpy Public Support Ending Today,” 2016. [Online].
Available: https://maikel.pro/blog/whatsspy-public-support-ending-today
APPENDIX
A. Differences in the Number Spaces
Interestingly,
the amount of registrable mobile phone
numbers greatly differs between countries and is not necessarily
proportional to the country’s population. In Tab. VI we list
a selection of countries with their amount of registrable
mobile phone numbers (i.e., ﬁltered by libphonenumber
and our WhatsApp registration API check) and set it in relation
to the population. The ratio between the number space and the
population indicates whether the amount of resources spent
enumerating the entire number space can yield a satisfactory
amount of matches. For example, while the US and Germany
have roughly the same amount of registrable mobile phone
numbers, one would expect to ﬁnd many more active phone
numbers in the US due to the much larger population.
Our results show that small as well as less developed
countries often have a limited number space and therefore
can be crawled with very little effort. On the other hand,
we observe some outliers: Austria, for example, has such
a large number space that for every citizen there are more
than 10,000 registrable mobile phone numbers available. While
such a ratio seems to make crawling infeasible, one can still
exploit the fact that the phone numbers are typically not
uniformly distributed, but given away in blocks. Hence, one
could follow the strategy to ﬁrst randomly check a few numbers
for each possible preﬁx and then focus on the most fruitful
preﬁxes to still cover a good portion of the population.
B. Reduction Function for Our Optimized Rainbow Tables
The reduction function for our optimized rainbow tables
converts a hash value back to a valid (mobile) phone num-
ber (cf. § III-C). A trivial reduction function could be deﬁned
Country
# Numbers (in million)
# Numbers / Population
Cuba
Moldova
Australia
Canada
Japan
Russia
United States
Germany
China
Austria
0.3
6.3
48.6
76.0
127.9
327.0
505.7
538.3
4,496.0
93,658.7
0.03
1.9
1.9
2.0
1.0
2.2
1.5
6.5
3.2
10,573.4
Table VI: Comparison of countries with regard to their amount
and density of registrable mobile phone numbers.
(cid:18)
(cid:18)(cid:22) N
(cid:23)
lC
(cid:19)
(cid:19)
by taking the ﬁrst 64 bit h64 of hash h and calculating the
modulus with the total amount of phone numbers N, giving
us the index of the phone number in the table of all numbers.
However, the modulo operation introduces non-uniformity
in the output of the reduction function: The lower parts of the
number space are more likely to be chosen if N is not a divisor
of 264. We therefore introduce an offset into the calculation
that varies for every chain index iC. By choosing the offset
as the division of N by the chain length lC, each chunk of
the phone number space is more likely for one chain index,
producing a uniform distribution overall.
Another issue is collisions in the reduction function: As
soon as two different hashes produce the same phone number,
then all successive elements of the chain would be duplicate
entries. To prevent this, we vary our reduction function with
every chain index as well as with every table15.
Therefore, we deﬁne our reduction function as follows:
i =
h64 +
+ 65,536 × iT
× iC
mod N,
where the different parameters are explained in Tab. VII.
Parameter
Explanation
h64
N
lC
iT
iC
First 64 bit of hash h encoded as an unsigned integer
Number of possible plaintexts
Length of the chains
Index of the currently generated table
Current index in the chain
Table VII: Parameters for our reduction function.
The “magic” number 65,536 for the table offset was kept
from the original RainbowCrack implementation [35], since it
produces reasonable results.
C. A Note on Per-Character Alphabets
Rainbow table implementations like CryptoHaze [7] allow
to specify individual alphabets for each character position of
the input domain. While this might appear to be a solution
to optimize rainbow tables for (mobile) phone numbers, the
unique structure of phone numbers limits the usefulness of this
technique: the possibilities for each digit in a phone number
are strongly dependent on the preceding digits.
German mobile phone numbers can be used to illustrate
this point, since they always start with the digits +491. If
one were to limit the third character of the input domain only
to 1, the input space of the rainbow table could be reduced
by a factor of 10x. However, phone numbers from all other
countries where the third digit is not 1 would be missing from
the resulting table. While it would be possible to generate
rainbow tables with different alphabets for each country or
even mobile preﬁx, this would require considerable effort and
performance overhead, and ultimately closely resemble our
approach (at least conceptually).
15Rainbow tables are usually split into several ﬁles due to their large size.
16
Optimal TF
Fixed TF for c = 0.1 %/d
F. Supplemental Mitigation Techniques
r
e
t
a
R
y
r
e
v
o
c
s
i
D
)
d
/
s
t
c
a
t
n
o
c
#
n
i
(
80
60
40
20
0
0
0.05
0.1
0.15
0.2
Change Rate c (in %/d)
Figure 4: Minimal discovery rate for different change rates c
with optimal choices for TF (for Signal’s parameters) compared
to the discovery rate for ﬁxed TF when estimating c = 0.1 %/d.
D. Further Optimizations for Hash Reversal Methods
Given that the mobile number preﬁxes in our rainbow table
construction can be chosen freely (cf. § III-C), it is possible
to construct tables for arbitrary subsets of all phone numbers,
such as for one or multiple countries, or limited to a certain
length or type. As a result, storage space requirements and
lookup time can further be reduced for speciﬁc applications.
Splitting the tables into countries also allows probabilistic
searches based on some known or learned user distribution (e.g.,
if most users of a service are from the US, the rainbow table
containing US phone numbers will be searched ﬁrst), or other
available meta data (e.g., IP addresses, or previously cracked
numbers from the same address book).
Our experiments also reveal non-uniform distributions of
phone numbers within single countries (cf. § IV), which could
be used to further speed up the reversal process.
Hybrid constructions of hash databases (cf. § III-A) and
brute-force (cf. § III-B) can outperform each individual method,
since small batches of numbers, for which hashcat has signiﬁ-
cant overhead, can be handled efﬁciently by the hash database.
E. Optimal Parameters for Incremental Contact Discovery
Given that the popularity of mobile messengers ﬂuctuates
over time, the change rate c of the server database is not a
ﬁxed value but varies continuously. This results in different
optimal choices for the time TF . The inevitable non-optimal
values for TF between adjustments result in higher discovery
rates than the possible minimum: If c is higher than expected,
more users can be found by observing SD. If c is lower than
expected, the rate limits for SF are too generous.
The relative error between the minimal and the actual
discovery rate can be calculated as e = 0.5·|1−c/cest|, where c
is the actual change rate and cest is the estimated one used
for setting TF . Thus, if the real change rate is underestimated
by a factor of 2x, the discovery rate will be 50 % higher than
intended. For the parameters used by Signal (cf. § V), Fig. 4
shows how the discovery rate behaves compared to the minimal
one when a constant change rate of c = 0.1 %/d is assumed.
Obviously, underestimating the change rate is more problematic
than overestimating it. In a production environment it therefore
may be beneﬁcial to set c slightly higher than the expected value
to deal with ﬂuctuations. An implementation with dynamic sets,
as outlined in § V, could be an option for platforms where the
change rate ﬂuctuates more strongly and frequent adjustments
of TF are required.
17
A number of additional strategies could potentially supple-
ment the mitigations discussed in § VI, such as CAPTCHAs
for users with unusual contact discovery patterns, honeypot
numbers [40] to detect enumeration attacks, modeling user
behavior for anomaly detection, or the increase of the phone
number space by telecommunications providers. Yet these
approaches are either impractical (larger phone number space),
can result in a high number of false positives (honeypot
numbers, behavioral analysis), require the processing of user
data (behavioral analysis), or decrease usability (CAPTCHAs).
For the sake of completeness, we nevertheless discuss each of
these techniques shortly in the following.
Increased Phone Number Entropy. In § A, we observed
that some countries have a much larger number space than
others, which makes crawling these countries much more
difﬁcult. Telecommunication companies of vulnerable countries
could therefore agree to maintain larger number blocks to
increase the search space for attackers. However, it is important
that the numbers are randomly distributed such that there are
no clusters that can be efﬁciently crawled once detected by an
attacker. While this approach also makes hash reversal more
difﬁcult, we demonstrated in § III that it is feasible even for
countries with a large number space (e.g., Austria).
CAPTCHAs. In countless web applications, CAPTCHAs
are in place to prevent automated API abuse. Even though there
are ways to circumvent CAPTCHAs [52], [86], they still can
signiﬁcantly slow down an attack or at least increase the cost
of abuse. Therefore, we suggest to also use CAPTCHAs in
mobile messaging applications to differentiate legitimate users
with unusual contact discovery patterns from abusers.
Modeling User Behavior. Service providers could use
heuristics to detect abnormal user behavior that indicates a
crawling attempt. Such heuristics could include an unusually
large amount of contacts in the address book, exceptionally
many syncing requests, and constantly changing contacts.
However, using such heuristics to automatically ban accounts
is error-prone. This kind of detection can also be circumvented
by more sophisticated attackers that adapt their behavior to
evade detection.
Honeypot Numbers. Rate limits can be bypassed by
sophisticated attackers, e.g., by crawling with a low rate. As was
also suggested in [40], service providers could use honeypots
for detection of such attackers: They could acquire several
phone numbers themselves and detect if any of these numbers
are matched during contact discovery. A positive match would
indicate either a false positive (e.g., a typo when storing a
contact) or an attempt of crawling. Due to the potential of false
positives, it would be more reasonable to closely monitor the
activity of such accounts rather than blocking them instantly.
Educating Users. Users might not be aware of the fact
that their public information is indeed easily accessible to
third parties that perform data scraping. Messaging applications
therefore could show reminders about this fact whenever users
are in the process of sharing personal information publicly, e.g.,
when uploading a public proﬁle picture.
Additionally, on-device machine learning techniques could
be applied to automatically educate users about the sensitivity
of shared content, e.g., when extended nudity or children are
detected in uploaded proﬁle pictures.