the built-in media server consumes signiﬁcantly less energy per
byte. In cellular networks, the radio remains active for several sec-
onds after a data transmission, consuming additional energy called
tail energy [9]. Since tail energy consumption is dependent on the
number of trafﬁc bursts and the time between them rather than the
amount of data sent, apps sending data intermittently incur a dis-
proportionate amount of energy.
As we evaluate the impact of each app in the wild, rather than
the impact of apps in isolation, we assign any tail energy to the last
packet sent during the tail period to avoid double-counting energy
when there are multiple concurrent ﬂows.
In this way, the total
cellular network energy consumed by each device is the sum of the
energy assigned to each app.
Longitudinal Trends. We examined trends in network usage
and energy consumption over time. However, the diversity of apps,
the smaller user set, users’ propensity to change the apps they use
over time, and changes in user behavior, obscured the overall im-
pact of app design changes over time or any trends towards more
energy efﬁciency. Background energy ﬂuctuated by up to 60%
from week to week throughout the study. Examining speciﬁc apps,
we did determine that some apps have become more energy-efﬁcient
due to adjusting the inter-packet intervals of background trafﬁc,
which we discuss in more detail in §4.2.
4. BACKGROUND ENERGY CONSUMPTION
Energy consumption in the background makes up 84% of the
total network energy, and is thus the focus of this study. An app
running in the background may run until either the user kills it
manually or Android does (such as when more memory is needed).
Many apps sync with a server, receive push notiﬁcations, or run up-
dates in the background. Since no user interaction is present, these
processes have much more freedom to determine when they trans-
mit data than when running in the foreground, where they may be
2In the rest of the paper, “energy” refers to the network energy
unless otherwise noted.
 0 0.2 0.4 0.6 0.8 1Default browserChromeESPNFacebookInstagramPlusTwitterWeatherWeiboMapsPocketcastsPodcastaddictSpotifyGmailSamsung pushSkypeFraction in each stateforegroundvisibleperceptibleservicebackground341Figure 4: Chrome allows webpages to continue sending and
receiving data in the background.
Figure 5: Duration for which trafﬁc continues
to be
sent/received after the app is sent to the background. Each data
point represents one transition to the background.
ularly egregious case, a popular local transit information webpage
sends background requests roughly every 2 seconds, indeﬁnitely,
keeping the cellular radio alive and draining the battery until the
app is killed or the tab is closed.
To quantify the severity of the problem on a larger scale, we
plot the distribution of the length of time during which Chrome
continues to transmit data after being sent to the background in
Figure 5. This includes ﬂows that were started when Chrome was in
the foreground but persist after Chrome is sent to the background.
Each data point represents one instance of the app being minimized.
In some cases background trafﬁc ﬂows persist for more than a day!
While updating pages in the background may have some beneﬁt to
users who then revisit that page, in most cases continuing to send
data for so long is likely not intended or useful behavior. Note that
our data points do not include cases where the app remains in the
foreground but a tab other than the one being viewed is sending
data, and so the scope of the problem is likely even bigger.
We compared this behavior against that exhibited by Firefox and
the default Android browser. Neither allow data to be sent when the
app is in the background or the screen is off, and Firefox blocks data
from being sent by inactive tabs. To estimate the prevalence of this
problem among other apps, we examine the data sent by apps in the
background as a function of the time since the app was last in the
foreground. As we show in Figure 6, the more recently the app was
Figure 6: Total background data sent by all apps, as a function
of the time since switching from a foreground state. Note the
periodic spikes at 5 and 10 minute intervals, the large amount
of trafﬁc in the ﬁrst minute, and the long tail of persisting, con-
tinuous ﬂows.
sent to the background, the more trafﬁc is sent, with substantially
more trafﬁc being sent in the ﬁrst few minutes than any other time.
Some of this trafﬁc is periodic: there are peaks at 10 minute and 5
minute intervals, which are common time intervals for intentional
periodic background trafﬁc. However, there is also a non-periodic
pattern, where the overall volume of background trafﬁc falls off
rapidly in the ﬁrst few minutes. To estimate the prevalence of this
problem, we look for apps where 80% of the background trafﬁc is
sent within 60 seconds of the app going to the background than any
other time. 84% of apps meet this criteria.
There are some apps, like Dropbox, which may have valid rea-
sons to upload content immediately after the app is closed, but in
many other cases transmitting a large amount of trafﬁc after the
app is closed is undesirable. Developers of apps which send a
large amount of data immediately after sending the app to the back-
ground should determine if this is expected or necessary behavior.
4.2 Transfers Initiated in the Background
We next evaluate data transfers that intentionally occur in the
background. Even though these transfers may be beneﬁcial to the
user, depending on the frequency of user interaction with the app,
the overhead of these transfers can be disproportionate. We ex-
amine a number of energy-hungry apps in depth, as well as some
energy-conserving apps with similar functionality. Finally, we study
a number of apps examined in previous work to evaluate how back-
ground update energy efﬁciency has improved over time. The en-
ergy efﬁciency of background transfers are primarily determined
by their frequency, with small updates incurring a disproportionate
amount of tail energy. Large transfers are known to be more efﬁ-
cient, as they make better use of available bandwidth [17]. As a
result, apps with similar functionality can have very different over-
heads depending on the trafﬁc pattern used.
We summarize key ﬁndings in Table 4.2, focusing on ﬁve classes
of apps that are responsible for a substantial fraction of background
updates in the user study: social media apps, widgets, music stream-
ing, podcasts and services that provide background updates. We
break down the energy overhead into average per-day energy con-
sumption and average per-ﬂow energy consumption. Note that it is
not always the case that there is only one ﬂow per periodic update,
nor that for periodic updates that the updates necessarily continue
for the entire day, as background applications may be forced to
close for a variety of reasons.
First, we examine social media apps. These apps generally ask
for updates from a central server periodically, regardless of user ac-
tivity, and can thus potentially consume a large amount of energy.
 0 500 1000 1500 0 50 100 150 200 250 300 350 400Payload (Byte)Elapsed Time (s)FGBG 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 1 10 100 1000 10000 100000CDFTime (s) 0 5000 10000 15000 20000 0 10 20 30 40 50 60 70 80 90 100 110 120Data (MB)Elapsed Time in BG (min)342Social media
Weibo
Twitter
Facebook
Plus
Samsung Push
Urbanairship
Maps
Gmail
Periodic update services
Widgets
Go Weather widget
Go Weather
Accuweather
Accuweather widget
Streaming
Spotify
Pandora
Podcasts
Pocketcasts
Podcastaddict
MJ/ MJ/ MB/ Avg.
day
ﬂow ﬂow J/B
Update frequency
Notes
3500
220
930
180
1500
2000
190
410
300
220
1500
33
310
35
36
92
57
11
14
11
140
310
21
20
12
2.8
51
1.7
50
3.9
4.3
2.9
0.3
17
7.7
8.9
2.2
1.9
55
10
1.6
5.6
3.2
18
220
45
2200
750
190
0.65
1.8
1.2
64
163
0.38
2
7.5
0.5
16
0.094
0.23
0.087
0.002
0.004
5-10 min
1h
5 min ⇒ 1 h
1h
15 min to 15h
5-30 min
20-30 min
30 min ⇒ varying
Frequent, nearly-empty requests
Previously every 20-60s [21] in 2012
Rarely actively used but installed by default
Library; period varies by app
Decreased to a few hours near the end
30 min in 2012 [21]; updates appear to become
discontinuous.
5 min
5 min ⇒ 40 min
7 min but high variation
~3h
5 min ⇒ 40 min
1 min ⇒ 2h
Switched push notiﬁcation approaches
More efﬁcient than the app
Previously every 1 min [21] in 2012
~2h average
12 min average
0.4 mJ per minute running.
3.7 mJ per minute running.
Table 1: Case studies. Energy per ﬂow and per day are averages over time, and one ﬂow may not correspond to one periodic update.
These can vary as apps change over time or as background apps are forced to close, and energy consumption values vary by device
and carrier.
Apps with small, periodic background trafﬁc (such as Weibo) have
very high energy overhead and send little data, whereas apps with
similar functionality (such as Twitter) have a much smaller foot-
print. Facebook, which had previously been identiﬁed as a heavy
energy user, improved its energy efﬁciency over the course of our
study by decreasing its background update frequency from 5 min-
utes to 1 hour, which is much longer than the 1-minute periodicity
measured in 2012 [21].
Applications oriented towards providing periodic background up-
dates, such as certain push notiﬁcation services, may consume a lot
of energy compared to the amount of data they send. In an in-lab
experiment, one third-party library transmitted nearly empty HTTP
requests every ﬁve minutes for hours, but only provided one user-
visible notiﬁcation during this time. Another example is Google
Maps, which by default provides a background location service
which continuously collects anonymous location data. This ser-
vice consumed up to 90% of the app’s total energy usage at the
beginning of the study, but the frequency decreased to once every
few hours by the end. GMail also leverages periodic updates using
push notiﬁcations: it has actually increased its inter-update inter-
vals, but updates appear to no longer be periodic, arriving only on
demand, leading to an overall low degree of energy consumption.
Widgets are a class of apps that appear on the home screen and
have little or no direct user interaction. In many cases their func-
tionality revolves around periodic background updates (such as to