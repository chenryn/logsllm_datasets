## 0x01 写在前面
`jdk8u20`原生反序列化漏洞是一个非常经典的漏洞，也是我分析过最复杂的漏洞之一。
在这个漏洞里利用了大量的底层的基础知识，同时也要求读者对反序列化的流程、序列化的数据结构有一定的了解
本文结合笔者自身对该漏洞的了解，写下此文，如有描述不当或者错误之处，还望各位师傅指出
## 0x02 jdk8u20 漏洞原理
`jdk8u20`其实是对`jdk7u21`漏洞的绕过，在[《JDK7u21反序列化漏洞分析笔记》](https://www.cnpanda.net/sec/876.html)
一文的最后我提到了`jdk7u21`的修复方式：
>
> 首先来看存在漏洞的最后一个版本（`611bcd930ed1`）：
>
> 查看其 children
> 版本（`0ca6cbe3f350`）：
>
> `compare`一下：
>
>
> 
>
>
>     // 改之前
>             AnnotationType annotationType = null;
>             try {
>                 annotationType = AnnotationType.getInstance(type);
>             } catch(IllegalArgumentException e) {
>                 // Class is no longer an annotation type; all bets are off
>                return;
>             }
>  
>     // 改之后
>             AnnotationType annotationType = null;
>             try {
>                 annotationType = AnnotationType.getInstance(type);
>             } catch(IllegalArgumentException e) {
>                 // Class is no longer an annotation type; time to punch out
>                 throw new java.io.InvalidObjectException("Non-annotation
> type in annotation serial stream");
>             }
>  
>
> 可以发现，在第一次的修复中，官方采用的方法是网上的第二种讨论，即将以前的 return 改成了抛出异常。
我们来看第一次修复后的`AnnotationInvocationHandler.readObejct()`方法：
    private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
            s.defaultReadObject();
            // Check to make sure that types have not evolved incompatibly
            AnnotationType annotationType = null;
            try {
                annotationType = AnnotationType.getInstance(type);
            } catch(IllegalArgumentException e) {
                // Class is no longer an annotation type; time to punch out
                throw new java.io.InvalidObjectException("Non-annotation type in annotation serial stream");
            }
            Map> memberTypes = annotationType.memberTypes();
            // If there are annotation members without values, that
            // situation is handled by the invoke method.
            for (Map.Entry memberValue : memberValues.entrySet()) {
                String name = memberValue.getKey();
                Class memberType = memberTypes.get(name);
                if (memberType != null) {  // i.e. member still exists
                    Object value = memberValue.getValue();
                    if (!(memberType.isInstance(value) ||
                          value instanceof ExceptionProxy)) {
                        memberValue.setValue(
                            new AnnotationTypeMismatchExceptionProxy(
                                value.getClass() + "[" + value + "]").setMember(
                                    annotationType.members().get(name)));
                    }
                }
            }
        }
在`AnnotationInvocationHandler`类中，其重写了`readObejct`方法，那么根据 oracle 官方定义的 Java
中可序列化对象流的原则——如果一个类中定义了`readObject`方法，那么这个方法将会取代默认序列化机制中的方法读取对象的状态， **可选的信息**
可依靠这些方法读取，而 **必选数据部分** 要依赖`defaultReadObject`方法读取；
可以看到在该类内部的`readObject`方法第一行就调用了`defaultReadObject()`方法，该方法主要用来从字节流中读取对象的
**字段值** ，它可以从字节流中按照定义对象的类描述符以及定义的顺序读取 **字段的名称**
和类型信息。这些值会通过匹配当前类的字段名称来赋予，如果当前这个对象中的某个字段并没有在字节流中出现，则这些字段会使用类中定义的默认值，
**如果这个值出现在字节流中，但是并不属于对象，则抛弃该值** 。
在利用`defaultReadObject()`还原了一部分对象的值后，最近进行`AnnotationType.getInstance(type)`判断，如果传入的
type 不是`AnnotationType`类型，那么抛出异常。
也就是说，实际上在`jdk7u21`漏洞中，我们传入的`AnnotationInvocationHandler`对象在异常被抛出前，已经从序列化数据中被还原出来。换句话说就是我们把恶意的种子种到了运行对象中，但是因为出现异常导致该种子没法生长，只要我们解决了这个异常，那么就可以重新达到我们的目的。
这也就是`jdk8u20`漏洞的原理——逃过异常抛出。
那么具体该如何逃过呢？`jdk8u20`的作者用了一种非常牛逼的方式。
再具体介绍这种方式之前，先简单介绍一些与本漏洞相关的基础知识，以便读者更明白本文的分析流程和细节。
## 0x03 基础知识
### 1、 **Try/catch块的作用**
写程序不可避免的出现一些错误或者未注意到的异常信息，为了能够处理这些异常信息或错误，并且让程序继续执行下去，开发者通常使用`try ...
catch`语法。把可能发生异常的语句放在`try { ... }`中，然后使用`catch`捕获对应的`Exception`及其子类，这样一来，在 JVM
捕获到异常后，会从上到下匹配`catch`语句，匹配到某个`catch`后，执行`catch`代码块，从而达到继续执行代码的效果。
如jdk7u21中利用的正是这个：
    try {
                annotationType = AnnotationType.getInstance(type);
            } catch(IllegalArgumentException e) {
                // Class is no longer an annotation type; time to punch out
                throw new java.io.InvalidObjectException("Non-annotation type in annotation serial stream");
    }
当检测的结果不是`AbbitatuibType`时，匹配到了`IllegalArgumentException`异常，然后执行了`catch`中的代码块。
但如果`try ... catch`嵌套，又该如何判定呢？
可以看个例子
    package com.panda.sec;
    import java.io.IOException;
    import java.net.HttpURLConnection;
    import java.net.URL;
    public class test {
        static double TEST_NUMBER = 0;
        public static void math(int a, int b){
            double c;
            if (a != b) {
                try {
                    TEST_NUMBER = a*(a+b);
                    c = a / b;
                } catch (Exception e) {
                    System.out.println("内层出错了");
                }
            } else {
                c = a * b;
            }
        }
        public static void urlRequest(int a, int b, String url) throws IOException {
                try {
                    math(a, b);
                    URL realUrl = new URL(url);
                    HttpURLConnection connection = (HttpURLConnection)realUrl.openConnection();
                    connection.setRequestProperty("accept", "*/*");
                    connection.connect();
                    System.out.println("状态码：" + connection.getResponseCode());
                } catch (Exception e) {
                    System.out.println("外层出错了");
                    throw e;
                }
            System.out.println(TEST_NUMBER);
        }
        public static void main(String[] args) throws IOException {
            urlRequest(1,0,"https://www.cnpanda.net");
            System.out.println("all end");
        }
    }
先来看看代码逻辑，首先定义了全局变量`TEST_NUMBER=0`，然后定义了`math`和`urlRequest`两个方法，并且在`urlRequest`方法里，调用了`math`方法，最后在`main`函数中执行`urlRequest`方法。
**请读者不看下文的分析，先思考当变量值为以下情况时，这段代码会输出什么？**
  * 当`a=1,b=0`，url地址是`[www.cnpanda.net](https://www.cnpanda.net)`时
  * 当`a=1,b=0`，url地址是`[test.cnpanda.net](https://test.cnpanda.net)`时
  * 当`a=1,b=2`，url地址是`[www.cnpanda.net](https://www.cnpanda.net)`时
  * 当`a=1,b=2`，url地址是`[test.cnpanda.net](https://test.cnpanda.net)`时
来看具体运行结果：
**当`a=1,b=0`，url地址是`https://www.cnpanda.net`时：**
这种情况下，`b=0`使得`a/b`中的分母为0，导致内层出错，因此会进入`catch`块并打印出`内层出错了`字符串，但是由于内层的`catch`块并没有把错误抛出，因此继续执行剩余代码逻辑，向`https://www.cnpanda.net`地址发起http请求，打印状态码为200，由于在`math`方法中
`TEST_NUMBER = a*(a+b)=1*(1+0)=1`，因此打印出`TEST_NUMBER`为`1.0`，最后打印`all
end`结束代码逻辑。
**当`a=1,b=0`，url地址是`https://test.cnpanda.net`时：**
这种情况下，`b=0`使得`a/b`中的分母为0，导致内层出错，因此会进入`catch`块并打印出`内层出错了`字符串，但是由于内层的`catch`块并没有把错误抛出，因此继续执行剩余代码逻辑，向`https://test.cnpanda.net`地址发起http请求，但是由于无法解析导致出错，进入`catch`块，在`catch`块中打印`外层出错了`字符串，然后抛出错误，结束代码逻辑。
**当`a=1,b=2`，url地址是`https://www.cnpanda.net`时：**
这种情况下，`b!=0`，因此`a/b`会正常运算，不会进入`catch`块，继续执行剩余代码逻辑，向`https://www.cnpanda.net`地址发起http请求，打印状态码为200，由于在`math`方法中
`TEST_NUMBER = a*(a+b)=1*(1+2)=3`，因此打印出`TEST_NUMBER`为3，最后打印`all end`结束代码逻辑。
**当`a=1,b=2`，url地址是`https://test.cnpanda.net`时：**
这种情况下，`b!=0`，因此`a/b`会正常运算，不会进入`catch`块，继续执行剩余代码逻辑，向`https://test.cnpanda.net`地址发起http请求，但是由于无法解析导致出错，进入`catch`块，在`catch`块中打印`外层出错了`字符串，然后抛出错误，结束代码逻辑。
从上面的示例可以得出一个结论， **在一个存在`try ... catch`块的方法（有异常抛出）中去调用另一个存在`try ...
catch`块的方法（无异常抛出），如果被`调用的方法`（无异常抛出）出错，那么会继续执行完`调用方法`的代码逻辑，但是若`调用方法`也出错，那么`会`终止代码运行的进程**
这是`有异常抛出`调用`无异常抛出`，那么 **如果是`无异常抛出`调用`有异常抛出`呢？**
如下代码：
    package com.panda.sec;
    import java.io.IOException;
    import java.net.HttpURLConnection;
    import java.net.URL;
    public class test {
        static double TEST_NUMBER = 0;
        public static void math(int a, int b,String url) throws IOException {
            double c;
            try {
                urlRequest(url);
                if (a != b) {
                        TEST_NUMBER = a*(a+b);
                        c = a / b;
                } else {
                    c = a * b;
                }
            } catch (Exception e) {
                System.out.println("外层出错了");
            }
        }
        public static void urlRequest(String url) throws IOException {
            try {
                 URL realUrl = new URL(url);
                 HttpURLConnection connection = (HttpURLConnection)realUrl.openConnection();
                 connection.setRequestProperty("accept", "*/*");
                 connection.connect();
                 System.out.println("状态码：" + connection.getResponseCode());
            } catch (Exception e) {
                    System.out.println("内层出错了");
                    throw e;
                }
            System.out.println(TEST_NUMBER);
        }
        public static void main(String[] args) throws IOException {
            math(1,0,"https://test.cnpanda.net");
             System.out.println("all end");
         }