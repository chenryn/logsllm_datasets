在。但是，它的作用域定义在more()函数块中。只有在执行该函数时，程序
才能使用ct访问它所指定的对象（但是，该函数可以给其他函数提供该存储
区的地址以便间接访问该对象，例如通过指针形参或返回值）。
C 使用作用域、链接和存储期为变量定义了多种存储方案。本书不涉及
并发程序设计，所以不再赘述这方面的内容。已分配存储期在本章后面介
绍。因此，剩下5种存储类别：自动、寄存器、静态块作用域、静态外部链
接、静态内部链接，如表12.1所列。现在，我们已经介绍了作用域、链接和
存储期，接下来将详细讨论这些存储类别。
表12.1 5种存储类别
12.1.4 自动变量
属于自动存储类别的变量具有自动存储期、块作用域且无链接。默认情
况下，声明在块或函数头中的任何变量都属于自动存储类别。为了更清楚地
表达你的意图（例如，为了表明有意覆盖一个外部变量定义，或者强调不要
把该变量改为其他存储类别），可以显式使用关键字auto，如下所示：
int main(void)
866
{
auto int plox;
关键字auto是存储类别说明符（storage-class specifier）。auto关键字在
C++中的用法完全不同，如果编写C/C++兼容的程序，最好不要使用auto作
为存储类别说明符。
块作用域和无链接意味着只有在变量定义所在的块中才能通过变量名访
问该变量（当然，参数用于传递变量的值和地址给另一个函数，但是这是间
接的方法）。另一个函数可以使用同名变量，但是该变量是储存在不同内存
位置上的另一个变量。
变量具有自动存储期意味着，程序在进入该变量声明所在的块时变量存
在，程序在退出该块时变量消失。原来该变量占用的内存位置现在可做他
用。
接下来分析一下嵌套块的情况。块中声明的变量仅限于该块及其包含的
块使用。
int loop(int n)
{
int m; // m 的作用域
scanf("%d", &m);
{
int i; // m 和 i 的作用域
for (i = m; i 
int main()
{
int x = 30;       // 原始的 x
printf("x in outer block: %d at %p\n", x, &x);
{
int x = 77;     // 新的 x，隐藏了原始的 x
printf("x in inner block: %d at %p\n", x, &x);
868
}
printf("x in outer block: %d at %p\n", x, &x);
while (x++ 
int main()
{
int n = 8;
printf("  Initially, n = %d at %p\n", n, &n);
for (int n = 1; n 
void trystat(void);
int main(void)
{
int count;
for (count = 1; count <= 3; count++)
{
printf("Here comes iteration %d:\n", count);
trystat();
}
return 0;
}
void trystat(void)
{
int fade = 1;
static int stay = 1;
printf("fade = %d and stay = %d\n", fade++, stay++);
875
}
注意，trystat()函数先打印再递增变量的值。该程序的输出如下：
Here comes iteration 1:
fade = 1 and stay = 1
Here comes iteration 2:
fade = 1 and stay = 2
Here comes iteration 3:
fade = 1 and stay = 3
静态变量stay保存了它被递增1后的值，但是fade变量每次都是1。这表
明了初始化的不同：每次调用trystat()都会初始化fade，但是stay只在编译
strstat()时被初始化一次。如果未显式初始化静态变量，它们会被初始化为
0。
下面两个声明很相似：
int fade = 1;
static int stay = 1;
第1条声明确实是trystat()函数的一部分，每次调用该函数时都会执行这
条声明。这是运行时行为。第2条声明实际上并不是trystat()函数的一部分。
如果逐步调试该程序会发现，程序似乎跳过了这条声明。这是因为静态变量
和外部变量在程序被载入内存时已执行完毕。把这条声明放在trystat()函数
中是为了告诉编译器只有trystat()函数才能看到该变量。这条声明并未在运
行时执行。
不能在函数的形参中使用static：
876
int wontwork(static int flu); // 不允许
“局部静态变量”是描述具有块作用域的静态变量的另一个术语。阅读一
些老的 
C文献时会发现，这种存储类别被称为内部静态存储类别（internal
static storage class）。这里的内部指的是函数内部，而非内部链接。
12.1.7 外部链接的静态变量
外部链接的静态变量具有文件作用域、外部链接和静态存储期。该类别
有时称为外部存储类别（external storage class），属于该类别的变量称为外
部变量（external variable）。把变量的定义性声明（defining declaration）放