outside academia [Age15; Bra16a].
Worst-case vs. Average-case hardness. Traditionally, the standard for a ‚Äúhard problem‚Äù
was worst-case hardness, which says that some instances of the problem are hard to solve.
There might not be very many of these instances, or they might be difÔ¨Åcult to Ô¨Ånd.
Cryptographic primitives choose a random instance of a hard problem from some
distribution, so we require that all but a negligible fraction of instances from this distribution
are hard to solve. This is known as average-case hardness. It can be difÔ¨Åcult to choose a
distribution for which most instances of the problem are hard, though.
As an example, we consider integer factorization. Although most integers of a Ô¨Åxed size
are easy to factor (because they likely have small prime factors), cryptographers believe that
when integers have exactly two equal-size prime factors, their product is hard to factor. Thus
this is the distribution used for factoring-based cryptography, despite the lack any theoretical
evidence suggesting that this integers from this distribution are indeed hard to factor.
One way to avoid the problem of crafting a ‚Äúhard‚Äù distribution is with a worst-case to
average-case reduction, which says that an algorithm which solves some noticeable fraction
of random instances of some problem can be used to solve every instance of a (possibly
different) problem. In 1996, Ajtai showed that lattices admit this strong property [Ajt04].
SpeciÔ¨Åcally, he showed that Ô¨Ånding the shortest vector in a lattice chosen randomly from a
certain class is as hard as solving three problems on any lattice.
Applications. Almost all cryptographic applications that can be constructed from number-
theoretic assumptions can also be constructed with lattices. However, some advanced
constructions like attribute-based encryption (e.g., [GPV08; GVW13]), which reveals data
3
only to parties satisfying some arbitrary predicate, and fully homomorphic encryption
(e.g., [Gen09b; BGV14; GSW13]), which allows arbitrary computation on encrypted data,
have only been constructed from lattices. It is not known how to construct these applications
from any other cryptographic assumptions, making lattice cryptography the only choice for
this advanced functionality.
1.2 Lattice Cryptography Today
Lattice cryptography has seen enormous growth over the past decade. A broad movement
toward the practical implementation of lattice/ring-based schemes in the past few years
has led to an impressive array of results (e.g., [HPS98; Ber+16; Lyu+08; GLP12; Duc+13;
Bos+15; Alk+16; Bos+16b; HS; May16; LCP17]). While these have all been research
prototypes, there has been very recent progress in experimenting with lattice-based key
exchange [Duc+13] on the internet, e.g., in Google‚Äôs Chrome web browser [Bra16b], the
strongSwan IPSec implementation [Ste14], and the Tor protocol [LS16].
The most powerful lattice-based constructions, however, have not yet seen this level of
deployment. There are many possible explanations for this state of affairs, but we contend
that the challenges facing advanced lattice cryptosystems are primarily practical rather than
theoretical in nature. SpeciÔ¨Åcally, advanced cryptosystems require functionality that is not
included in implementations of simpler schemes, hence it is difÔ¨Åcult to build and test them.
Next, despite its great promise, homomorphic encryption remains difÔ¨Åcult to use: only
experts can write satisfactory homomorphic computations and select parameters for HE
schemes. Another problem facing all lattice cryptosystems is that it is difÔ¨Åcult to estimate
their security in practice. We explore these problems in more detail below.
1.2.1 Lattice Operations
All efÔ¨Åcient lattice cryptosystems rely on a handful of shared techniques such as integer mod-
ular arithmetic and rounding, error sampling, ‚Äúgadget‚Äù operations including discrete Gaus-
4
sian sampling, ring switching, ring arithmetic, and inter-ring operations [Mic07; LPR13b;
MP12; Gen+13]. Each of these components is much more complex than the tools used in
more traditional number-theoretic cryptography. Nevertheless, these primitive lattice opera-
tions have been implemented many times in various one-off implementations which, to date,
have been specialized to a particular cryptographic primitive, like collision-resistant hash-
ing [Lyu+08], digital signatures [GLP12; Duc+13], key-establishment protocols [Bos+15;
Alk+16; Bos+16b], and homomorphic encryption [NLV11; HS].
These tailored implementations typically use Ô¨Åxed parameter sets and have few reusable
interfaces, making them hard to implement other primitives upon. Those interfaces that do
exist are quite low-level; e.g., they require the programmer to explicitly convert between
various representations of ring elements, which calls for specialized expertise and can
be error prone. Finally, prior implementations either do not support, or use suboptimal
algorithms for, the important class of arbitrary cyclotomic rings, and thereby lack related
classes of homomorphic encryption functionality.
Thus with the current collection of implementations, it is difÔ¨Åcult to rapidly prototype
lattice cryptosystems (especially those requiring advanced functionality) and to experiment
with parameters, parallelism, and more. Lattice cryptography is also in need of well-designed
abstractions which make it easier and safer to implement lattice cryptosystems.
1.2.2 Complexity of Homomorphic Encryption
Homomorphic Encryption (HE) is a powerful cryptographic concept that allows a worker to
perform computations on client-encrypted data, without learning anything about the data
itself. There are two types of homomorphic encryption schemes: somewhat-homomorphic
encryption (SHE) schemes restrict the set of computations that can be performed (e.g.,
to a certain multiplicative depth), while fully homomorphic encryption (FHE) schemes
allow arbitrary computations.1 Although Ô¨Årst envisioned almost 40 years ago [RAD78]
1In much of this work, the distinction between these two concepts is not needed, and we use the generic
term ‚Äúhomomorphic encryption‚Äù (HE) for statements that apply to both.
5
as a cryptographic ‚Äúholy grail,‚Äù no plausible candidate FHE scheme was known until
Gentry‚Äôs seminal work in 2009 [Gen09b; Gen09a], which showed how to turn somewhat-
homomorphic schemes into fully homomorphic schemes. Prompted by HE‚Äôs potential to
enable new privacy-aware applications or enhance existing ones, a Ô¨Çurry of research activity
has led to schemes with better efÔ¨Åciency, stronger security assurances, and specialized
features. (See [Dij+10; SV14; BV11b; Cor+11; CNT12; BV14a; BGV14; Bra12; GHS12b;
GHS12a; Che+13; AP13; Gen+13; BV14b; AP14] for a sampling.)
The power of HE translates to a heavy burden on users of HE, because there are a
large number of tunable parameters and different routes to the user‚Äôs end goal. In current
implementations, merely expressing a homomorphic computation requires expertise in
the intricacies of the homomorphic encryption scheme and its particular implementation.
Some recent implementations like [LCP17] attempt to partially resolve this complexity by
automatically choosing (some) parameters, but many details are still left for the user to
manage. This usability challenge limits the impact and usefulness of an otherwise powerful
application.
1.2.3 Security Estimates
The security of factoring-based cryptography like RSA is reasonably well-understood:
there is a single parameter ùëõ (size of the modulus), and increasing ùëõ makes the problem
harder. Futhermore, the runtime of the general number Ô¨Åeld sieve, the most efÔ¨Åcient known
algorithm for factoring large numbers, is easily expressed as a function of ùëõ. By contrast,
lattice cryptography uses a large number of parameters, all of which interact in complex
ways to affect security. Moreover, the best algorithms for attacking lattice problems (like
the Block Korkin-Zolotarev (BKZ) basis-reduction algorithm [SE94; CN11]) are poorly
understood, and it is notoriously difÔ¨Åcult to estimate their runtime. As a result, it is very
difÔ¨Åcult to accurately estimate the concrete hardness of lattice schemes, for any combination
of parameters.
6
Lacking concrete security estimates, instantiations could rely on strong worst-case
hardness guarantees. In practice, the parameters needed to obtain this security guarantee
are so large as to be impractical when compared to alternative types of cryptography. There
remains, however, a large gap between parameters required for worst-case guarantees and
parameters that are known to be insecure against concrete attacks. Thus many proposed
instantiations live somewhere in this gap, with parameters that apparently thwart practical
attacks, but that do not support worst-case hardness guarantees [Lyu+08; Duc+13; Alk+16;
Bos+16b].
As lattice cryptography becomes more widely used in practice, especially with param-
eters that lack much (if any) theoretical support, there is an increasing need for further
cryptanalytic effort and higher-conÔ¨Ådence security estimates for its underlying computa-
tional problems.
1.3 Our Contributions
In this work we present a collection of tools which address the practical needs of lattice
cryptography. The goal of these tools is to facilitate broader use of lattice cryptography
by improving accessibility for researchers, implementors, and end-users. SpeciÔ¨Åcally, we
aim to make lattice cryptography easier to get right, simpler to use, and help set the stage
for widespread adoption of this leading post-quantum candidate. Our software frameworks
emphasize safety through programming language features like strong, static typing and
domain-speciÔ¨Åc languages.
The foundation of this thesis is a software framework for lattice cryptography that
provides modular and reusable interfaces for operations which appear in a variety of cryp-
tosystems. We also introduce ALCHEMY, a domain-speciÔ¨Åc language and compiler for
simplifying the process of writing homomorphic computations. Finally, we propose cryptan-
alytic challenges for a wide range of parameters for two related problems which are broadly
used in efÔ¨Åcient lattice cryptosystems. We explain these tools in more detail below.
7
1.3.1 A Functional Library for Lattice Cryptography
At the core of this work is Œõ‚àòùúÜ, a general-purpose software framework for lattice-based
cryptography. The Œõ‚àòùúÜ framework has several novel properties that address the limitations
of prior implementations of lattice cryptosystems, including the following:
Generality, modularity, concision: Œõ‚àòùúÜ deÔ¨Ånes a collection of general, highly composable
interfaces for mathematical operations used across lattice cryptography, allowing for a
wide variety of schemes to be expressed very naturally and at a high level of abstraction.
For example, we implement an advanced somewhat-homomorphic encryption scheme
in as few as 2‚Äì5 lines of code per feature, via code that very closely matches the
scheme‚Äôs mathematical deÔ¨Ånition.
Theory afÔ¨Ånity: Œõ‚àòùúÜ is designed from the ground-up around the specialized ring repre-
sentations, fast algorithms, and worst-case hardness proofs that have been developed
for the Ring-LWE problem and its cryptographic applications. In particular, it imple-
ments fast algorithms for sampling from theory-recommended error distributions over
arbitrary cyclotomic rings, and provides tools for maintaining tight control of error
growth in cryptographic schemes.
Safety: Œõ‚àòùúÜ has several facilities for reducing code complexity and programming errors,
thereby aiding the correct implementation of lattice cryptosystems. In particular,
it uses strong typing to statically enforce‚Äîi.e., at compile time‚Äîa wide variety of
constraints among the various parameters.
Advanced features: Œõ‚àòùúÜ exposes the rich hierarchy of cyclotomic rings to cryptographic
applications. We use this to give the Ô¨Årst-ever implementation of an important HE
operation known as ‚Äúring switching,‚Äù and also deÔ¨Åne and analyze a more efÔ¨Åcient
variant that we call ‚Äúring tunneling.‚Äù
8
Lastly, this work deÔ¨Ånes and analyzes a variety of mathematical objects and algorithms
for the recommended usage of Ring-LWE in cyclotomic rings, which we believe will serve
as a useful knowledge base for future implementations.
1.3.2 A Language and Compiler for Homomorphic Encryption
Homomorphic encryption (HE) allows a worker to perform computations on client-encrypted
data, without learning anything about the data itself. Since the Ô¨Årst plausible construction in
2009, a variety of real-world HE implementations have been given and used for particular
applications of interest. Unfortunately, using HE is currently very complicated, and a great
deal of expertise is required to satisfactorily implement a desired homomorphic computation.
This work introduces ALCHEMY, a modular and extensible system that greatly acceler-
ates and simpliÔ¨Åes the implementation of homomorphic computations. With ALCHEMY,
one expresses a desired ‚Äúin the clear‚Äù computation on plaintexts in a simple domain-speciÔ¨Åc
language, and then uses a compiler to automatically transform it into a corresponding ho-
momorphic program on ciphertexts. The compiler deals with the cumbersome but rote tasks
of tracking the ciphertext ‚Äúnoise‚Äù and scheduling appropriate ‚Äúmaintenance‚Äù operations to
control it, choosing (most of) the parameters, generating keys and hints, etc. In addition,
ALCHEMY compilers can be composed together to provide other useful functionality, such
as pretty-printing a representation of the programs, logging the empirical noise rates of
ciphertexts throughout a computation, etc. In short, ALCHEMY lets programmers write
clear and concise code describing what they really care about‚Äîthe plaintext computation‚Äî
and easily get a corresponding homomorphic computation without needing any particular
expertise in HE.
To demonstrate the simplicity of creating homomorphic computations with ALCHEMY,
we propose a design and implementation of ring-rounding on encrypted values. This opera-
tion is the main component of ‚Äúbootstrapping‚Äù (which makes any somewhat-homomorphic
encryption scheme fully homomorphic), the Ring-LWR problem, and symmetric encryption
9
using lattice-based pseudorandom functions like [BPR12; BP14]. The key idea behind our
design is to exploit the close ‚Äúalgebraic Ô¨Åt‚Äù between ring-rounding and known lattice-based
homomorphic encryption constructions.
1.3.3 Cryptanalytic Challenges for Ring Cryptography
Recent lattice cryptography implementations use constructions based on the Learning
With Errors (LWE) problem, its more efÔ¨Åcient ring-based variant Ring-LWE, and their
‚Äúdeterministic error‚Äù counterparts Learning With Rounding (LWR) and Ring-LWR. As these
problems are the most widely used in practice (especially the efÔ¨Åcient ring variants), it is
important to have a better understanding of their concrete security.
The standard approach for attracting cryptanalytic effort and obtaining better security
estimates for problems in cryptography is by issuing challenges (see, e.g., [91; 97; PS13a;
15; Yas+15]). Following these works, we give a broad collection of challenges for Ring-LWE
and Ring-LWR instantiations over cyclotomics rings. The challenges cover a wide variety
of instantiations, involving two-power and non-two-power cyclotomics; moduli of various
sizes and arithmetic forms; small and large numbers of samples; and error distributions
satisfying the bounds from worst-case hardness theorems related to ideal lattices, along with
narrower errors that still appear to yield hard instantiations. We estimate the hardness of
each challenge by giving the approximate Hermite factor and BKZ block size needed to
solve it via lattice-reduction attacks.
A central issue in the creation of challenges for LWE-like problems is that dishonestly
generated instances can be much harder to solve than properly generated ones, or even
impossible. To address this, we devise and implement a simple, non-interactive, publicly
veriÔ¨Åable protocol which gives reasonably convincing evidence that the challenges are
properly distributed, or at least not much harder than claimed.
10
1.3.4 Organization
The rest of this thesis is organized as follows:
Chapter 2 contains the technical background needed to understand this thesis, including
mathematical background and a primer for the functional programming language
Haskell, which was used to implement Œõ‚àòùúÜ and ALCHEMY.
Chapters 3 and 4 are devoted to Œõ‚àòùúÜ. Chapter 3 introduces the main library component
of Œõ‚àòùúÜ which contains the primary interfaces. In chapter 4, we implement advanced
SHE with Œõ‚àòùúÜ, and give a detailed evaluation of the overall framework.
Chapters 5 and 6 introduce ALCHEMY. We discuss the design and interfaces in chapter 5,
and use it to implement homomorphic evaluation of symmetric-key primitives in chap-
ter 6. This implementation serves as our primary method of evaluating the ALCHEMY
system.
Chapter 7 introduces our cryptanalytic challenges for ring-based cryptography, including
the cut-and-choose protocol for providing convincing evidence that the challenges are
honestly generated.
11
CHAPTER 2
BACKGROUND
This chapter provides the necessary background to understand the technical content of
this thesis. Section 2.1 includes basic concepts related to algebra, the ring of integers,
an introduction to lattices, the theory of Gaussian distributions, and other miscellaneous
topics. In section 2.2 we introduce the concept and structure of cyclotomic rings, and
also formally deÔ¨Åne two important computational problems used in lattice cryptography.
Finally, section 2.3 gives a brief introduction to Haskell.
2.1 Mathematical Background and Notation
Notation. We write ÀúùëÇ(ùëõ) for ùí™(ùëõ log(ùëõ)) and similarly for ÀúŒò(ùëõ) and Àú‚Ñ¶(ùëõ). For a vector
ùë• ‚àà Rùëõ, we write ‚Äñùë•‚Äñ to denote the standard Euclidean (or ‚Ñì2) norm, i.e., ‚Äñùë•‚Äñ = ‚Äñùë•‚Äñ2 =
‚àöÔ∏Ä(‚ü®ùë•, ùë•‚ü©).
Rings and Ideals. For an arbitrary ring ùëÖ, an ideal ‚Ñê ‚äÜ ùëÖ is a nontrivial additive
subgroup that is also closed under multiplication by ùëÖ, i.e., ùë• ¬∑ ùëü ‚àà ‚Ñê for any ùë• ‚àà ‚Ñê, ùëü ‚àà ùëÖ.
When an ideal ùêº = ùëéùëÖ for some ùëé ‚àà ùêº, we say ùêº is generated by ùëé and write ùêº = (ùëé).
Kronecker Product The Kronecker product of two matrices gives their corresponding
tensor product. For example ùëÄ = ùê¥ ‚äó ùêµ (where ùê¥ is ùëüùê¥ √ó ùëêùê¥ and ùêµ is ùëüùêµ √ó ùëêùêµ) is the
ùëüùê¥ ¬∑ ùëüùêµ √ó ùëêùê¥ ¬∑ ùëêùêµ matrix corresponding to replacing each ùëéùëñùëó with the matrix ùëéùëñùëóùêµ. We show
12