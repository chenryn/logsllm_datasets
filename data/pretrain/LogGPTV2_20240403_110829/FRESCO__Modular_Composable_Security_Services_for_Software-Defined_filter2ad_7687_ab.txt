sign the FRESCO DE with two considerations. First, this
environment must export an API that allows the developer
to detect threats and assert ﬂow constraints while abstract-
ing the NOX implementation and OF protocol complexi-
ties. Second, the component must relieve applications from
the need to perform redundant data collection and manage-
ment tasks that are common across network security appli-
cations. The FRESCO development environment provides
four main functions: (i) script-to-module translation, (ii)
database management, (iii) event management, and (iv) in-
stance execution.
Script-to-module translation: This function automati-
cally translates FRESCO scripts to modules, and creates in-
stances from modules, thus abstracting the implementation
complexities of producing OF controller extensions. It is
also responsible for validating the registration of modules.
Registration is performed via a registration API, which en-
ables an authorized administrator to generate a FRESCO ap-
plication ID and an encryption key pair. The developer em-
beds the registered application ID into the FRESCO script,
and then encrypts the script with the supplied private key.
The naming convention of FRESCO applications incorpo-
rates the application ID, which is then used by FRESCO to
associate the appropriate public key with the application. In
addition to registering modules, the module manager coor-
dinates how modules are connected to each other and deliv-
ers input and event values to each module.
Database management: The DB manager collects var-
ious kinds of network and switch state information, and
provides an interface for an instance to use the informa-
tion.
It provides its own storage mechanism that we call
the FRESCO-DataBase (F-DB), which enables one to share
state information across modules. For example, if an in-
stance wants to monitor the number of transferred packets
by an OpenFlow enabled switch, it can simply request the
F-DB for this information. In addition, this database can be
used to temporarily store an instance.
Event management: The event manager notiﬁes an in-
stance about the occurrence of predeﬁned events. It checks
whether the registered events are triggered, and if so deliv-
ers these events to an instance. FRESCO supports many
different kinds of events, including ﬂow arrivals, denied
connections, and session resets.
In addition, the event
manager exposes an API that enables event reporting from
legacy DPI-based security applications, such as Snort [38]
or BotHunter [12]. The security community has developed
a rich set of network-based threat monitoring services, and
the event manager’s API enables one to tigger instances that
incorporate ﬂow rule response logic. 1
Instance execution: This function loads the created
instances into memory to be run over the FRESCO frame-
work. During load time, FRESCO decrypts the application
using the associated public key, and conﬁrms that the ID
embedded in the script corresponds to the appropriate pub-
lic key. The application then operates with the authority
granted to this application ID at registration time.
4.2 FRESCO Resource Controller
The FRESCO resource controller monitors OpenFlow
network switches and keeps track of their status. A ﬂow
rule that is distributed from a FRESCO application is in-
serted into a ﬂow table in an OpenFlow switch. Because the
ﬂow table has a limit on the number of entries it can hold, it
is possible that a ﬂow rule from a FRESCO application can-
not be inserted into the ﬂow table. However, because ﬂow
rules from a FRESCO application deal with security policy
enforcement, such ﬂow rules require immediate installation
into the ﬂow table of an OpenFlow network switch. Thus,
FRESCO may forcibly evict some old or stale ﬂow rules,
both FRESCO and non-FRESCO, from the switch ﬂow ta-
ble to make space for new ﬂow rules. This operation is
done by the resource controller. Garbage collecting inac-
tive FRESCO rules does not compromise the network se-
curity policy: if a prohibited ﬂow is re-attempted later, the
FRESCO SEK will prevent other OF applications from per-
forming the ﬂow setup.
1The example case for this scenario is shown in section 6.
The resource controller performs two main functions.
The ﬁrst function, which we call the switch monitor, period-
ically collects switch status information, such as the number
of empty ﬂow entries, and stores the collected information
in the switch status table. The second component, i.e., the
garbage collection, checks the switch status table to moni-
tor whether the ﬂow table in an OpenFlow switch is nearing
capacity. If the availability of a ﬂow table becomes lower
than a threshold value (θ), the garbage collector identiﬁes
and evicts the least active ﬂow, using least frequently used
(LFU) as FRESCO’s default policy.
4.3 FRESCO Script Language
To simplify development of
security applications,
FRESCO provides its own script language to assist develop-
ers in composing security functions from elementary mod-
ules. The textual language, modeled after the Click lan-
guage [19], requires the deﬁnition of six different variables
per instance of modular element: (i) type, (ii) input, (iii)
output, (iv) parameter, (v) action, and (vi) event.
To conﬁgure modules through a FRESCO script, devel-
opers must ﬁrst create an instance of a module, and this in-
stance information is deﬁned in type variable. For example,
to use a function that performs a speciﬁc action, a developer
can create an instance of the ActionHandler module (de-
noted as type:ActionHandler within a FRESCO script).
Developers can specify a script’s input and output, and
register events for it to process by deﬁning the script’s in-
put, output, parameter, and event variables. Multiple value
sets for these variables (e.g., specifying two data inputs to
input) may be deﬁned by using a comma as the ﬁeld sep-
arator.
Deﬁning an instance is very similar to deﬁning a function
in C or C++. A module starts with the module name, two
variables for representing the number of inputs and outputs,
and left braces (i.e., { ). The numbers of inputs and outputs
are used to sanity check the script during module transla-
tion. Like C or C++ functions, a module deﬁnition ends
with a right brace (i.e., } ).
The action variable represents actions that a module
will perform based on some conditions, where the condi-
tions are determined by one of the input items. There may
be multiple conditions in the action, which are separated
by semicolons. We summarize these variables in Table 1,
and Figure 3 shows example scripts of the port comparator
application shown in Figure 2 (right) with two connecting
modules.
FRESCO Script Execution: We use a simple running
example, shown in Figures 3 and 4, to illustrate the exe-
cution of a FRESCO script. First, an administrator com-
poses a FRESCO script (shown in Figure 3) (1), and loads
it into FRESCO (2). Next, when Host A sends a packet
to port 80 of Host B through an OpenFlow switch, as il-
lustrated in Figure 4 (3), this packet delivery event is re-
ported to the FRESCO DE (4). The FRESCO DE cre-
Variable
instance name (#input)(#output)
type: [module]
input: a1,a2,...
output: b1, b2,...
parameter: c1,c2,...
event: d1,d2,...
action : condition ? action,...
{ }
Explanation
denotes an instance name (should be unique)
denotes a module for this instance
denotes input items for a module
denotes output items for a module
denotes conﬁguration values of a module
denotes events delivered to a module
denotes set of conditions and actions per-
formed in the module
denotes the module start ({) and end (})
Possible Values
(#input) and (#output) denote the number of inputs and outputs
[module] names an existing module
an may be set of ﬂows, packets or integer values
bn may be set of ﬂows, packets or integer values
cn may be real numbers or strings
dn may be any predeﬁned string
condition follows the same syntax of if condition of python lan-
guage; action may be one of the following strings (DROP, FOR-
WARD, REDIRECT, MIRROR, QUARANTINE)
-
Table 1. Key variables in the FRESCO scripting language
port_comparator (1)(1) {
do_action (1)(0) {
type:Comparator
event:INCOMING_FLOW
input:destination_port
output:comparison_result
parameter:80
/* no actions are defined */
action: -
}
type:ActionHandler
event:PUSH
input:comparison_result
output: - /* no outputs are defined */
parameter: - /* no parameters are defined */
/* if input equals to 1, drop, otherwise, forward */
action:comparator_result == 1 ? DROP : FORWARD
}
Figure 3. FRESCO script with two connecting modules used to build the naive port comparator
ply setting an action variable, as listed in Table 1. These
high-level security policies can help developers focus on
implementing security applications, and these policies will
be automatically translated into ﬂow rules for OpenFlow en-
abled switches by FRESCO DE (e.g., the REDIRECT ac-
tion will be translated into three ﬂow rules). Thus, develop-
ers do not need to care about network-level ﬂow rules.
However, when FRESCO DE enforces translated ﬂow
rules to switches, it will face a new challenge, which stems
from the fact that OpenFlow provides no inherent mecha-
nisms to reconcile rule conﬂicts as competing OpenFlow
applications assert new rules into a switch. For example,
a set of rules designed to quarantine an internal computing
server (i.e., the QUARANTINE action in a FRESCO script)
might subsequently be overridden by a load-balancing ap-
plication that may determine that the quarantined host is
now the least-loaded server. One needs a mechanism to en-
sure that ﬂow rules produced by a security application will
take precedence over those produced from non-security-
aware applications. OpenFlow also incorporates a packet
alteration functions (i.e., the set action), speciﬁable within
its ﬂow rule format. This feature enables virtual tunnels be-
tween hosts, such that a virtual tunnel can be used to cir-
cumvent a ﬂow rule that was inserted to prevent two hosts
from establishing a connection.
To address this issue, FRESCO incorporates a security
enforcement kernel (SEK), which is integrated directly into
the OpenFlow controller upon which FRESCO operates. A
more complete discussion of FRESCO SEK is provided in a
published workshop paper [31]. FRESCO SEK offers sev-
eral important features upon which FRESCO relies to en-
sure that ﬂow rules derived from security services are prior-
itized and enforced over competing ﬂow rules produced by
Figure 4. Operational illustration of running
FRESCO script (case of the FRESCO script
shown in Figure 3)
ates instances from modules deﬁned in the FRESCO script
(i.e., port comparator instance from comparator module and
do action instance from ActionHandler module) and dy-
namically loads them. The FRESCO DE runs each instance
(5, 6), and when it receives an action from the do action
module (i.e., drop) (7), it translates this action into ﬂow
rules, which can be understood by an OpenFlow switch. Fi-
nally, these ﬂow rules are installed into the switch through
the FRESCO SEK (8).
5 FRESCO Security Enforcement Kernel
Security applications developed in FRESCO scripts can
enforce diverse security policies, such as DROP, REDI-
RECT, QUARANTINE, to react to network threats by sim-
non-security-critical applications:
• Rule source identiﬁcation: The SEK introduces a trust
model that allows FRESCO applications to digitally
sign each candidate ﬂow rule, thus enabling the SEK
to determine if a candidate ﬂow rule was produced by
a FRESCO security module, by an OpenFlow applica-
tion, or by a network administrator.
• Rule conﬂict detection: To detect conﬂicts between a
candidate rule set and the set of rules currently active
in the switch, the SEK incorporates an inline rule con-
ﬂict analysis algorithm called alias set rule reduction,
which detects ﬂow rule conﬂicts, including those that
arise through set actions that are used to produce vir-
tual tunnels. Since this is not the main focus of this pa-
per, we include a relatively more detailed description
of our rule conﬂict detection algorithm in Appendix
A.1 for interested readers.
• Conﬂict resolution: When a conﬂict arises, the SEK
applies a hierarchical authority model that enables a
candidate rule to override (replace) an existing ﬂow
rule when the digital signature of the rule source is
deemed to possess more authority than the source
whose rule is in conﬂict.
6 Working Examples
We show two case studies by creating real working se-
curity applications written in FRESCO script.
6.1
Implementing Reﬂector Net
FRESCO’s power stems from its ability to use OpenFlow
to effectively reprogram the underlying network infrastruc-
ture to defend the network against an emerging threat. To
illustrate this notion, consider a FRESCO application that
allows OF network operators to redirect malicious scanners
to a third-party remote honeypot. Using FRESCO script, we
compose two modules that ﬁrst detect an active malicious
scanner, and then reprogram the switch data plane to redi-
rect all the scanner’s ﬂow into a remote honeynet. We refer
to our composed security service as a threat reﬂector net,
which effectively turns the address space of any OpenFlow
network that deploys this service into a contact surface for a
remote high-interaction honeypot. The incentive for an op-
erator to use such a service is that the forensic evidence col-
lected by the honeypot can be shared back for the purpose
of reﬁning the operator’s local FRESCO-based ﬁrewall.
First, we create and conﬁgure a simple threshold-
Since FRESCO already
based scan detector instance.
provides a “ScanDetector” module, we can instantiate an
instance from this module for selecting malicious exter-
nal targets.
let us assume that our
scan analysis is triggered by an external entity producing
large numbers of failed TCP connections. Thus, we es-
tablish TCP CONNECTION FAIL, which is captured in
For this example,
FRESCO’s native DB service, as an input trigger event for
our scan detection, which outputs a scan detection event
when a threshold number of failed connections is observed.
Our FRESCO script instantiates the scan detection mod-
(i) input, (ii) out-
ule using four key script variables:
put, (iii) parameter, and (iv) action. The input for this
instance is a source IP address for a ﬂow that causes
TCP CONNECTION FAIL event. The parameter will de-
termine a threshold value for a scan detection algorithm,
and here, we set this value as 5 (i.e., if a source IP generates
ﬁve failed TCP connections, we regard it as a scan attacker).
The output is a source IP address and a scan detection result
(noted as scan result), which are delivered to the second in-
stance as input variables. The action variable is not deﬁned
here, as the logic required to formulate and insert ﬂow rules
to incorporate duplex redirection is modularized into a sec-
ond ﬂow redirection instance. The FRESCO script for our
ﬂow redirection instance is shown in Figure 5 (left).
We conﬁgure a redirector instance to redirect ﬂows from
the malicious scanner to a honeynet (or forward benign
ﬂows). This function is an instance of FRESCO’s “Action-
Handler” module. This instance uses a PUSH event, which
triggers the instance each time “ﬁnd scan” is outputted from
the scan detection instance Finally, we need to deﬁne an ac-
tion to redirect ﬂows produced by scan attackers. Thus, we
set the action variable of this instance as “scan result == 1 ?
REDIRECT : FORWARD”, which indicates that if the input
variable of scan result equals 1 (denoting the scanner) this
instance redirects all ﬂows related to the source IP address.
The FRESCO script for this instance is shown in Figure 5
(right).
We test this script in an OpenFlow simulation environ-
ment with Mininet [25], which is commonly used to emu-
late OpenFlow networks, to show its real operation. In this
test, we created three hosts (scanner, target host, and hon-
eynet) and an OpenFlow enabled switch. All three hosts are
connected to the switch and able to initiate ﬂows to each
another.
As illustrated in Figure 6,
the malicious scanner
(10.0.0.2) tries to scan the host (10.0.0.4) using Nmap tool
[28]. The scan packets are delivered through an OpenFlow
switch (1), where the switch then forwards the ﬂow statistics
to a FRESCO application (i.e., ﬁnd scan instance) through
a controller. The ﬁnd scan instance determines that these
packets are scan-related, and it sends the detection result
to the do redirect instance to instantiate ﬂow rules to redi-
rect these packets to our honeynet (10.0.0.3) (2). At this
time, the network conﬁguration of the honeypot is different
from the original scanned machine (10.0.0.4), which opens
network port 445 while the honeypot opens network port
444. Then, the honeypot returns packets to the scanner as
if it is the original target (3). Finally, the scanner receives