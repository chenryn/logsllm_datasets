本书中我们使用的是 Metasploit Console。
使用方法可参见 Metasploit 网站。
▲ 搜索 CVE 1
▲ 搜索 CVE 2
Metasploit 是一个博大精深的工具，关于它的内容可以写成一本书，如
果有兴趣深入学习的话，推荐大家读一读这本书。
4
Metasploit The Penetration Tester's Guide
http://shop.oreilly.com/product/9781593272883.do
4
本书中文版名为《Metasploit 渗透测试指南》，电子工业出版社，2012 年出版。——译者注
A.6 分析工具
下面我们来汇总一下本书中出现的各种分析工具。
Stirling / BZ Editor
Stirling 是一个功能强大的二进制编辑器，本书中就使用了这个工具。
它唯一的缺点是无法流畅地处理以 GB 为单位的大文件，要处理这样的
文件，可以选择 BZ Editor。
▲ Stirling
（http://www.vector.co.jp/soft/win95/util/se079072.html ）
▲ BZ Editor
（http://www.vector.co.jp/soft/win95/util/se032859.html ）
Process Monitor
这是一个对指定进程的文件、注册表访问进行监控的工具，可以从
Windows Sysinternals 进行下载。
▲ Process Monitor
（https://technet.microsoft.com/en-us/sysinternals/bb896645 ）
Process Explorer
这是一个用来确认当前运行中的进程之间的父子关系以及各进程详细信
息的工具，可以理解为是一个高级版的任务管理器。
▲ Process Explorer
（https://technet.micosoft.com/en-us/sysinternals/bb896653.aspx ）
Sysinternals 工具
Windows Sysinternals 中还提供了一些本书中没有介绍到的工具，大家
可以从 Utilities Index 页面上找到所有工具的列表。
Windows Sysinternals (Utilities Index)
https://technet.microsoft.com/en-us/sysinternals/bb545027
这里面有很多有意思的工具，主要包括文件访问、进程监控、网络、安
全等方面。
兔耳旋风
兔耳旋风是一个用于查看和修改进程内存空间的工具，它和一般的调试
器在方向性上有些差异。
▲ 兔耳旋风（うさみみハリケーン）
（http://www.vector.co.jp/soft/win95/prog/se375830.html ）
这个工具有一些一般调试器所不具备的功能，例如对进程挂载任意代码
和 DLL、查看某个特定地址中值的变更履历等。
本书由“行行”整理，如果你不知道读什么书或者想获得更多免费电子书
请加小编微信或QQ：2338856113 小编也和结交一些喜欢读书的朋友 或
者关注小编个人微信公众号名称：幸福的味道 id：d716-716 为了方便书
友朋友找书和看书，小编自己做了一个电子书下载网站，网站的名称
为：周读 网址：http://www.ireadweek.com
参考文献
プログラミングの力を生み出す本（オーム社／ 1998年 3月）
デバッガによるx86プログラム解析入门
（秀和システム／ 2007年 7月）
Binary Hacks ―ハッカー秘伝のテクニック 100选
（オライリ－·ジャパン／ 2006年 11月）
はじめて読む 486―32ビットコンピュータをやさしく语る
（アスキ－／ 1994年 9月）
Advanced Windows 第 5版 上
（日経BPソフトプレス／ 2008年 10月）
Advanced Windows 第 5版 下
（日経BPソフトプレス／ 2008年 10月）
Linkers & Loaders（オーム社／ 2001年 9月)
Windowsダンプの极意
（アスキー·メディアワークス／ 2008年 11月）
デバッガの理论と実装（アスキー·メディアワークス／ 1998年 1
月）
12ステップで作る组込みOS自作入门
（カットシステム／ 2010年 5月）
30日でできる! OS自作入门
（マイナビ／ 2006年 3月）
アナライジング·マルウェア ――フリーツールを使った感染事案
対処
（オライリージャパン／ 2010年 12月）
リバースエンジニアリング ――Pythonによるバイナリ解析技法
（オライリージャパン／ 2010年 5月）
HACKING 美しき策谋 第 2版
（オライリージャパン／ 2011年 10月）
実践 Metasploit ―ペネトレーションテストによる脆弱性评価
（オライリージャパン／ 2012年 5月）
デコンパイリングJava ―逆解析技术とコードの难読化
（オライリージャパン／ 2010年 6月）
ハッカーのたのしみ ―本物のプログラマはいかにして问题を解
くか
（エスアイビ－·アクセス／ 2004年 9月）
それがぼくには楽しかったから
（小学馆プロダクション／ 2001年 5月）
Reversing: Secrets of Reverse Engineering
（Wiley ／ 2005年 4月）
The Shellcoder's Handbook
（Wiley ／ 2007年 8月）
后记
“二进制”这个词的涵义十分宽泛。可执行文件、图像、声音、视频……
只要是在计算机上处理的数据，都是“二进制”数据。“二进制”原本只是
一个数学用语，不过现在人们更多地将它看成是一个和“文本数据”相对
的概念。
其实，文本数据也是一种用二进制来表现的数据，我们也可以将它归为
二进制的范畴。比如说，字母 A 其实就是 0x41 嘛。按照这样的思路，
学习计算机实际上也就是在学习二进制数据。
现在的计算机可以访问互联网，还可以编写文档和收发邮件。不仅如
此，它还能用来作曲、画画、开发软件。我们还可以用计算机将拍摄的
照片和视频上传到网上。在人类的历史上，似乎没有哪一样工具像计算
机这样万能，然而实现这一切的也无非是 0 和 1 的组合而已。
如今，大数据、机器学习、人工智能等字眼正热，通过这些技术可以推
测用户的偏好，将相似的东西匹配起来，或者检测服务器的异常，其应
用范围十分广泛。在计算机安全领域，基于攻击模式的启发式分析技术
也正在研究之中。在这些研究的影响下，对于 20 年前的人来说宛如魔
法一般的世界，现在正一步一步地变为现实。
信息工程最有趣的地方，就是通过 0 和 1 这样简单的组合能够组成机器
语言、定义文件格式、构建软件，从而解决各种各样的问题。计算机能
够推测出人的偏好，实现这种科幻般的技术的最小单位依然是二进制数
字。怎么样，是不是觉得心潮澎湃呢？
原子组成分子，然后组成细胞、生物，最终由生物组成了社会。而在计
算机的世界里，二进制就是创造一切的基础。
也许这样的比喻有点夸张，但计算机和软件的工作原理对于大多数人来
说都是类似黑箱一样的存在，即使不懂这些，在日常生活中也不会遇到
任何问题，但如果能够有机会去接触一下这一领域的知识，说不定能够
发现新的乐趣。
不知道大家有没有读过 Linux 之父 Linus Torvalds 的自传 Just for Fun:
1
1
The Story of an Accidental Revolutionary ，也许“好玩”真的是推动计算机
世界不断发展的原动力。
1
中文版名为《只是为了好玩：Linux 之父林纳斯自传》，人民邮电出版社，2014 年。——译
者注
本书中只是介绍了软件技术和二进制技术中很小的一部分，希望各位读
者能够从中找到“好玩”的地方，同时也希望大家能够从这本书中获益。
看完了
如果您对本书内容有疑问，可发邮件至PI:EMAIL，会有编
辑或作译者协助答疑。也可访问图灵社区，参与本书讨论。
如果是有关电子书的建议或问题，请联系专用客服邮箱：
PI:EMAIL。
在这里可以找到我们：
微博 @图灵教育 : 好书、活动每日播报
微博 @图灵社区 : 电子书和好文章的消息
微博 @图灵新知 : 图灵教育的科普小组
微信 图灵访谈 : ituring_interview，讲述码农精彩人生
微信 图灵教育 : turingbooks
图灵社区会员 或许未必不过（PI:EMAIL） 专享 尊重版权
Table of Contents
版权声明
译者序
免责声明
关于商标和注册商标
前言
第 1 章 通过逆向工程学习如何读懂二进制代码
1.1 先来实际体验一下软件分析吧
1.1.1 通过 Process Monitor 的日志来确认程序的行为
1.1.2 从注册表访问中能发现些什么
1.1.3 什么是逆向工程
1.2 尝试静态分析
1.2.1 静态分析与动态分析
1.2.2 用二进制编辑器查看文件内容
1.2.3 看不懂汇编语言也可以进行分析
1.2.4 在没有源代码的情况下搞清楚程序的行为
1.2.5 确认程序的源代码
1.3 尝试动态分析
设置 Process Monitor 的过滤规则
1.3.2 调试器是干什么用的
1.3.3 用 OllyDbg 洞察程序的详细逻辑
1.3.4 对反汇编代码进行分析
1.3.5 将分析结果与源代码进行比较
1.4 学习最基础的汇编指令
1.4.1 没必要记住所有的汇编指令
1.4.2 汇编语言是如何实现条件分支的
1.4.3 参数存放在栈中
1.4.4 从汇编代码联想到 C 语言源代码
1.5 通过汇编指令洞察程序行为
1.5.1 给函数设置断点
1.5.2 反汇编并观察重要逻辑
第 2 章 在射击游戏中防止玩家作弊
2.1 解读内存转储
2.1.1 射击游戏的规则
2.1.2 修改 4 个字节就能得高分
2.1.3 获取内存转储
2.1.4 从进程异常终止瞬间的状态查找崩溃的原因
2.1.5 有效运用实时调试
2.1.6 通过转储文件寻找出错原因
2.2 如何防止软件被别人分析
2.2.1 反调试技术
2.2.2 通过代码混淆来防止分析
2.2.3 将可执行文件进行压缩
2.2.4 将压缩过的可执行文件解压缩：解包
2.2.5 通过手动解包 UPX 来理解其工作原理
2.2.6 用硬件断点对 ASPack 进行解包
第 3 章 利用软件的漏洞进行攻击
3.1 利用缓冲区溢出来执行任意代码
3.1.1 引发缓冲区溢出的示例程序
3.1.2 让普通用户用管理员权限运行程序
3.1.3 权限是如何被夺取的
3.1.4 栈是如何使用内存空间的
3.1.5 攻击者如何执行任意代码
3.1.6 用 gdb 查看程序运行时的情况
3.1.7 攻击代码示例
3.1.8 生成可用作 shellcode 的机器语言代码
3.1.9 对 0x00 的改进
3.2 防御攻击的技术
3.2.1 地址随机化：ASLR
3.2.2 除存放可执行代码的内存空间以外，对其余内存空间尽量禁
用执行权限：Exec-Shield
3.2.3 在编译时插入检测栈数据完整性的代码：StackGuard
3.3 绕开安全机制的技术
3.3.1 使用 libc 中的函数来进行攻击：Return-into-libc
3.3.2 利用未随机化的模块内部的汇编代码进行攻击：ROP
第 4 章 自由控制程序运行方式的编程技巧
4.1 通过自制调试器来理解其原理
4.1.1 亲手做一个简单的调试器，在实践中学习
4.1.2 调试器到底是怎样工作的
4.1.3 实现反汇编功能
4.1.4 运行改良版调试器
4.2 在其他进程中运行任意代码 ：代码注入
4.2.1 向其他进程注入代码
4.2.2 用 SetWindowsHookEx 劫持系统消息
4.2.3 将 DLL 路径配置到注册表的 AppInit_DLLs 项
4.2.4 通 过 CreateRemoteThread 在其他进程中创建线程
4.2.5 注入函数
4.3 任意替换程序逻辑 ：API 钩子
4.3.1 API 钩子的两种类型
4.3.2 用 Detours 实现一个简单的 API 钩子
4.3.3 修改消息框的标题栏
第 5 章 使用工具探索更广阔的世界
5.1 用 Metasploit Framework 验证和调查漏洞
5.1.1 什么是 Metasploit Framework
5.1.2 安全漏洞的信息从何而来
5.1.3 搭建用于测试漏洞的环境
5.1.4 利用漏洞进行攻击
5.1.5 一个 ROP 的实际例子
5.2 用 EMET 观察反 ROP 的机制
5.2.1 什么是 EMET
5.2.2 Anti-ROP 的设计获得了蓝帽奖
5.2.3 如何防止攻击
5.2.4 搞清楚加载器的逻辑
5.2.5 DLL 的程序逻辑
5.2.6 CALL-RETN 检查
5.2.7 如何防止误判
5.2.8 检查栈的合法性
5.3 用 REMnux 分析恶意软件
5.3.1 什么是 REMnux
5.3.2 更新特征数据库
5.3.3 扫描目录
5.4 用 ClamAV 检测恶意软件和漏洞攻击
5.4.1 ClamAV 的特征文件
5.4.2 解压缩 .cvd 文件
5.4.3 被检测到的文件详细信息
5.4.4 检测所使用的打包器以及疑似恶意软件的文件
5.5 用 Zero Wine Tryouts 分析恶意软件
5.5.1 REMnux 与 Zero Wine Tryouts 的区别
5.5.2 运行机制
5.5.3 显示用户界面
5.5.4 确认分析报告
5.6 尽量减少人工分析 ：启发式技术
5.6.1 恶意软件应对极限的到来：平均每天 60000 个
5.6.2 启发式技术革命
5.6.3 用两个恶意软件进行测试
附录
A.1 安装 IDA
A.2 安装 OllyDbg
A.3 安装 WinDbg
A.4 安装 Visual Studio 2010
A.5 安装 Metasploit
A.6 分析工具
Stirling / BZ Editor
Process Monitor
Process Explorer
Sysinternals 工具
兔耳旋风
参考文献
后记