 4000
 2000
s
n
o
i
t
a
t
o
n
n
A
d
e
v
i
r
e
D
e
v
i
t
a
l
u
m
u
C
 0
 0
 45000
 40000
 35000
 30000
 25000
 20000
 15000
 10000
 5000
s
k
c
e
h
C
e
v
i
t
a
l
u
m
u
C
 0
Cumulative Derived Annotations
Cumulative Checks
Cumulative Errors
 20
 40
 60
 80
 100  120  140
Cumulative Root Annotations
Figure 13: A cumulative view of the data presented
in Table 2. There are total 154 errors messages,
uniqued by ﬁle, function and line number, which is
scaled up in order to ﬁt in the graph.
is not just the labor saved, but the fact that they eliminate
the opportunity to forget an annotation.
Table 2 gives the number of manual annotations and counts
for formal parameters and expressions. On average one man-
ual annotation derives 147 annotations, marks 1098 expres-
sions and leads to 682 checks. Figure 13 gives a cumulative
view for the same data. It shows that 15% of the root anno-
tations are able to derive 85% of all the derived annotations
and do 85% of the total checks.
8.2 Coverage
The checker validates that every node in a propagation
graph has the same annotation as all the other nodes. Larger
subgraphs are better than small ones since they force more
nodes to be internally consistent. Additionally, larger num-
ber of “inference events” (those that cause a pointer to be
annotated as tainted or !tainted) per graph are better
since they make it more likely that a labeling occurs (and is
cross checked). The ideal would be two subgraphs for a sys-
tem: one labeled as tainted, one as !tainted with many
tainted
!tainted
Average Graph Size
Events per Graph
31
4
18
6
Table 3: Average subgraph size (i.e., the number
of related parameters that are checked against each
other) and average number of inference events per
subgraph (e.g., a pointer dereference or passing a
pointer to tainted function).
tainted
!tainted
imply
Total
Manual Annotations
Derived Parameter Declarations
Declarations per Manual Annotation
Derived Expressions
Expressions per Manual Annotation
Checks
Checks per Manual Annotation
19
2498
131
13495
710
3329
175
9
7881
876
64470
7163
44930
4992
36
57
1.6
-
-
169
4.7
71 (7 ignore)
10436
147
77965
1098
48428
682
Table 2: Total number of manual annotations, and the count of derived declarations and expressions. Derived
Parameter Declarations counts the number of unique formal parameters that were annotated as tainted or
!tainted. Derived Expressions counts the total number of expressions that are automatically tainted or un-
tainted. These are uniqued by ﬁle name, function name and line number. There are 71 manual annotations
in total (global annotator excluded). Nearly 2/3 of them are for suppressing false positives. On average one
manual annotation derives 147 annotations, 1098 expressions and does 682 checks.
t
s
r
e
e
m
a
r
a
P
f
o
r
e
b
m
u
N
0
0
0
5
0
0
0
2
0
0
0
1
0
0
5
0
0
2
0
0
1
0
5
0
100
200
300
400
500
600
Tainted Subgraph Size
s
r
e
t
e
m
a
r
a
P
f
o
r
e
b
m
u
N
e
v
i
t
a
l
u
m
u
C
Cumulative Percentage of Subgraphs
 0
 20
 40
 60
 80
 100
 100
 2.5e+06
 2e+06
 1.5e+06
 1e+06
 500000
 90
 80
 70
 60
 50
 40
 30
 20
 10
 0
 0
 0  20000 40000 60000 80000 100000 120000 140000
Cumulative Number of Subgraphs
s
r
e
t
e
m
a
r
a
P
f
o
e
g
a
t
n
e
c
r
e
P
e
v
i
t
a
l
u
m
u
C
Figure 14: This graph shows the tainted subgraph
sizes and the total number of pointers in subgraphs
with this size. The rightmost four subgraphs are
formed by function pointer propagation.
Figure 15: This graph shows the cumulative number
of subgraphs and the cumulative number of pointer
parameters. Subgraphs are ordered by decreasing
order of the their sizes. 25% of the subgraphs con-
tains about 75% of the total pointers annotated.
inference events in each. Table 3 shows the average sizes
of the tainted and !tainted subgraphs, and the average
number of tainting or untainting events per subgraph.
Figure 14 shows the tainted subgraph size and the total
number of pointer parameters in subgraphs with this size.
There are four enormous graphs on the right that cross-check
359, 437, 537, and 629 parameters against each other.
Figure 15 orders subgraphs labeled as tainted or !tainted
by size and shows how many subgraphs are needed to cover
a given percentage of pointers. For example, that 25% of
the subgraphs are suﬃcient to label 75% of all pointers that
were annotated.
8.3 Robustness
Annotation propagation must be stable and robust. Oth-
erwise noise in the inputs such as missing manual annota-
tions or program errors are likely to pollute the propagation
graph and generate thousands of false positives or false neg-
atives. MECA achieves robustness by massive redundancies
and statistics. For example, one annotation for a function is
suﬃcient to annotate all other functions which are assigned
to the same function pointer. Statistical inference of formal
parameters annotations can infer other missing annotations.
We believe this is the key diﬀerence between MECA and
traditional type inference.
We measure the eﬀectiveness of function pointer propaga-
tion by computing the average node degree E/N , where E
is the number of edges in the propagation graph and N is
the number of nodes. This can be viewed as an approxima-
tion for how many paths can lead to a speciﬁc annotation. If
this number is high, breaking one path will unlikely stop the
propagation since there are many redundant paths that keep
the propagation graph connected. Table 4 shows that func-
tion pointer propagation increases the average node degree
by a factor of 7.
To measure the eﬀectiveness of statistical inference of for-
mal parameter annotations, we ﬁrst run MECA with only
one tainted annotation for function copy from user, then
annotates all the missing roots inferred and run MECA
again. Table 5 shows the top eleven parameters statistically
inferred as described in Section 5. Bottom ranked parame-
ters are not shown. We inspected a few of them and they
are either !tainted parameters or non-pointers. We also
use the number of distinct sources for a derived annotation
as a metric for robustness. Not surprisingly, statistical in-
without FNPTR with FNPTR
Type
Warnings Fixed
tainted nodes
tainted edges
Average Degree
!tainted nodes
!tainted edges
Average Degree
Total nodes
Total edges
Average Degree
12662
16331
1.29
480783
613497
1.28
493445
629828
1.28
14503
250214
17.3
542778
5212683
9.60
557281
5462897
9.80
Table 4: Propagation results with and without func-
tion pointer propagation.
ference increased the average number of distinct sources by
a factor of 12.
8.4 Security holes and false positives
We found 44 bugs in Linux; 19 of them allowed a malicious
user to take control of the machine. Error messages are
uniqued by ﬁle and functions since once a user pointer is
dereferenced it tends to be dereferenced many times in one
function. Table 6 shows the bugs we found, broken down by
the ease and severity of exploit:
1. Arbitrary write: there were eleven cases where a user
could write to arbitrary kernel memory.
2. Arbitrary read: there were eight cases where the user
could read out arbitrary kernel memory (usually by pass-
ing a user-chosen pointer to a kernel print function).
3. Fault at will: there were nineteen places where a user
could cause the kernel to crash in a straightforward way.
4. Always fail: these were six cases where a kernel pointer
was passed to a routine that expected user pointers. These
calls would always fail with an error code. Two of such er-
rors are intentional where the return values of the “para-
noid” functions are not checked intentionally.
After the annotations described at the beginning of Sec-
tion 7, there were eight false positives that remained. Two
of them are because in Linux “paranoid” functions some-
times can take kernel pointers when the global data segment