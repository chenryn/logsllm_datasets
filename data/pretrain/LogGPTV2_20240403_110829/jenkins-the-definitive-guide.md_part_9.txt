controlPort=disabled
[Winstone 2011/07/01 20:55:08] - AJP13 Listener started: port=8009
In a Linux environment, the procedure is similar. Note how we start the Jenkins server from with the
“jenkins” user account we created earlier:
john@lambton:~$ sudo su - jenkins
jenkins@lambton:~$ java -jar /usr/local/jeknins/jenkins.war
[Winstone 2011/07/16 02:11:24] - Beginning extraction from war file
[Winstone 2011/07/16 02:11:27] - No webapp classes folder found - /home/jenkins/
.jenkins/war/WEB-INF/classes
jenkins home directory: /home/jenkins/.jenkins
...
[Winstone 2011/07/16 02:11:31] - HTTP Listener started: port=8080
[Winstone 2011/07/16 02:11:31] - AJP13 Listener started: port=8009
[Winstone 2011/07/16 02:11:31] - Winstone Servlet Engine v0.9.10 running:
controlPort=disabled
This will start the embedded servlet engine in the console window. The Jenkins web application will now
be available on port 8080. When you run Jenkins using the embedded server, there is no web application
context, so you access Jenkins directly using the server URL (e.g., http://localhost:8080).
To stop Jenkins, just press Ctrl-C.
By default, Jenkins will run on the 8080 port. If this doesn’t suit your environment, you can specify the
port manually, using the --httpPort option:
$ java -jar jenkins.war --httpPort=8081
In a real-world architecture, Jenkins may not be the only web application running on your build server.
Depending on the capacity of your server, Jenkins may have to cohabit with other web applications
or Maven repository managers, for example. If you are running Jenkins along side another application
server, such as Tomcat, Jetty, or GlassFish, you will also need to override the ajp13 port, using the --
ajp13Port option:
$ java -jar jenkins.war --httpPort=8081 --ajp13Port=8010
Some other useful options are:
--prefix
This option lets you define a context path for your Jenkins server. By default Jenkins will run on
the port 8080 with no context path (http://localhost:8080). However, if you use this option, you
can force Jenkins to use whatever context path suits you, for example:
$ java -jar jenkins.war --prefix=jenkins
52
In this case, Jenkins will be accessible on http://localhost:8080/hudson.
This option is often used when integrating a stand-alone instance of Jenkins with Apache.
--daemon
If you are running Jenkins on a Unix machine, you can use this option to start Jenkins as a
background task, running as a unix daemon.
--logfile
By default, Jenkins writes its logfile into the current directory. However, on a server, you often
need to write your log files into a predetermined directory. You can use this option to redirect
your messages to some other file:
$ java -jar jenkins.war --logfile=/var/log/jenkins.log
Stopping Jenkins using Ctrl-C is a little brutal, of course—in practice, you would set up a script to start
and stop your server automatically.
If you are running Jenkins using the embedded Winstone application server, you can also restart and
shutdown Jenkins elegantly by calling the Winstone server directly. To do this, you need to specify the
controlPort option when you start Jenkins, as shown here:
$ java -jar jenkins.war --controlPort=8001
A slightly more complete example in a Unix environment might look like this:
$ nohup java -jar jenkins.war --controlPort=8001 > /var/log/jenkins.log 2>&1 &
The key here is the controlPort option. This option gives you the means of stopping or restarting
Jenkins directly via the Winstone tools. The only problem is that you need a matching version of the
Winstone JAR file. Fortunately, one comes bundled with your Jenkins installation, so you don’t have
to look far.
To restart the server, you can run the following command:
$ java -cp $JENKINS_HOME/war/winstone.jar winstone.tools.WinstoneControl reload: \
--host=localhost --port=8001
And to shut it down completely, you can use the following:
$ java -cp $JENKINS_HOME/war/winstone.jar winstone.tools.WinstoneControl shutdown \
--host=localhost --port=8001
Another way to shut down Jenkins cleanly is to invoke the special “/exit” URL, as shown here:
$ wget http://localhost:8080/exit
53
On a real server, you would typically have set up security, so that only a system administrator could
access this URL. In this case, you will need to provide a username and a password:
$ wget --user=admin --password=secret http://localhost:8080/exit
Note that you can actually do this from a different server, not just the local machine:
$ wget --user=admin --password=secret http://buildserver.acme.com:8080/exit
Note that while both these methods will shut down Jenkins relatively cleanly (more so than killing the
process directly, for example), they will interrupt any builds in progress. So it is recommended practice
to prepare the shutdown cleanly by using the Prepare for Shutdown button on the Manage Jenkins screen
(see Section 4.2, “The Configuration Dashboard—The Manage Jenkins Screen”).
Running Jenkins as a stand-alone application may not be to everyone’s taste. For a production server,
you might want to take advantage of the more sophisticated monitoring and administration features of
a full blown Java application server such as JBoss, GlassFish, or WebSphere Application Server. And
system administrators may be wary of the relatively little-known Winstone server, or may simply prefer
Jenkins to fit into a known pattern of Java web application development. If this is the case, you may
prefer to, or be obliged to, deploy Jenkins as a standard Java web application. We look at this option
in the following section.
3.9. Running Jenkins Behind an Apache Server
If you are running Jenkins in a Unix environment, you may want to hide it behind an Apache HTTP
server in order to harmonize the server URLs and simplify maintenance and access. This way, users
can access the Jenkins server using a URL like http://myserver.myorg.com/jenkins rather than http://
myserver.myorg.com:8081.
One way to do this is to use the Apache mod_proxy and mod_proxy_ajp modules. These modules let
you use implement proxying on your Apache server using the AJP13 (Apache JServer Protocol version
1.3). Using this module, Apache will transfer requests to particular URL patterns on your Apache server
(running on port 80) directly to the Jenkins server running on a different port. So when a user opens
a URL like http://www.myorg.com/jenkins, Apache will transparently forward traffic to your Jenkins
server running on http://buildserver.myorg.com:8081/jenkins.Technically, this is known as “Reverse
Proxying,” as the client has no knowledge that the server is doing any proxying, or where the proxied
server is located. So you can safely tuck your Jenkins server away behind a firewall, while still providing
broader access to your Jenkins instance via the public-facing URL.
The exact configuration of this module will vary depending on the details of your Apache version and
installation details, but one possible approach is shown here.
First of all, if you are running Jenkins as a stand-alone application, make sure you start up Jenkins using
the --prefix option. The prefix you choose must match the suffix in the public-facing URL you want
54
to use. So if you want to access Jenkins via the URL http://myserver.myorg.com/jenkins, you will need
to provide jenkins as a prefix:
$ java -jar jenkins.war --httpPort=8081 --ajp13Port=8010 --prefix=jenkins
If you are running Jenkins on an application server such as Tomcat, it will already be running under a
particular web context (/jenkins by default).
Next, make sure the mod_proxy and mod_proxy_ajp modules are activated. In your httpd.conf
file (often in the /etc/httpf/conf directory), you should have the following line:
LoadModule proxy_module modules/mod_proxy.so
The proxy is actually configured in the proxy_ajp.conf file (often in the /etc/httpd/conf.d
directory). Note that the name of the proxy path (/jenkins in this example) must match the prefix or
web context that Jenkins is using. An example of such a configuration file is given here:
LoadModule proxy_ajp_module modules/mod_proxy_ajp.so
ProxyPass /jenkins http://localhost:8081/jenkins
ProxyPassReverse /jenkins http://localhost:8081/jenkins
ProxyRequests Off
Once this is done, you just need to restart your Apache server:
$ sudo /etc/init.d/httpd restart
Stopping httpd: [ OK ]
Starting httpd: [ OK ]
Now you should be able to access your Jenkins server using a URL like http://myserver.myorg.com/
jenkins.
3.10. Running Jenkins on an Application Server
Since Jenkins is distributed as an ordinary WAR file, it is easy to deploy it on any standard Java
application server such as Tomcat, Jetty, or GlassFish. Running Jenkins on an application server is
arguably more complicated to setup and to maintain. You also loose certain nice administration features
such as the ability to upgrade Jenkins or restart the server directly from within Jenkins. On the other
hand, your system administrators might be more familiar with maintaining an application running on
Tomcat or GlassFish than on the more obscure Winstone server.
Let’s look at how you would typically deploy Jenkins onto a Tomcat server. The easiest approach is
undoubtedly to simply unzip the Tomcat binary distribution onto your disk (if it is not already installed)
and copy the jenkins.war file into the Tomcat webapps directory. You can download the Tomcat
binaries from the Tomcat website1.
1 http://tomcat.apache.org
55
You start Tomcat by running the startup.bat or startup.sh script in the Tomcat bin directory.
Jenkins will be available when you start Tomcat. You should note that, in this case, Jenkins will be
executed in its own web application context (typically “jenkins”), so you will need to include this in the
URL you use to access your Jenkins server (e.g., http://localhost:8080/jenkins).
However, this approach is not necessarily the most flexible or robust option. If your build server is a
Windows box, for example, you probably should install Tomcat as a Windows service, so that you can
ensure that it starts automatically whenever the server reboots. Similarly, if you are installing Tomcat
in a Unix environment, it should be set up as a service.
3.11. Memory Considerations
Continuous Integration servers use a lot of memory. This is the nature of the beast—builds will consume
memory, and multiple builds being run in parallel will consume still more memory. So you should
ensure that your build server has enough RAM to cope with however many builds you intend to run
simultaneously.
Jenkins naturally needs RAM to run, but if you need to support a large number of build processes, it is
not enough just to give Jenkins a lot of memory. In fact Jenkins spans a new Java process each time it
kicks off a build, so during a large build, the build process needs the memory, not Jenkins.
You can define build-specific memory options for your Jenkins build jobs—we will see how to do this
later on in the book. However if you have a lot of builds to maintain, you might want to define the
JAVA_OPTS, MAVEN_OPTS and ANT_OPTS environment variables to be used as default values for your
builds. The JAVA_OPTS options will apply for the main Jenkins process, whereas the other two options
will be used when Jenkins kicks off new JVM processes for Maven and Ant build jobs respectively.
Here is an example of how these variables might be configured on a Unix machine in the .profile file:
export JAVA_OPTS=-Djava.awt.headless=true -Xmx512m -DJENKINS_HOME=/data/jenkins
export MAVEN_OPTS="-Xmx512m -XX:MaxPermSize=256m"
export ANT_OPTS="-Xmx512m -XX:MaxPermSize=256m"
3.12. Installing Jenkins as a Windows Service
If you are running a production installation of Jenkins on a Windows box, it is essential to have it running
as a Windows service. This way, Jenkins will automatically start whenever the server reboots, and can
be managed using the standard Windows administration tools.
One of the advantages of running Jenkins on an application server such as Tomcat is that it is generally
fairly easy to configure these servers to run as a Windows service. However, it is also fairly easy to
install Jenkins as a service, without having to install Tomcat.
Jenkins has a very convenient feature designed to make it easy to install Jenkins as a Windows servers.
There is currently no graphical installer that does this for you, but you get the next best thing—a web-
based graphical installer.
56
First, you need to start the Jenkins server on your target machine. The simplest approach is to run Jenkins
using Java Web Start (see Figure 3.4, “Starting Jenkins using Java Web Start”). Alternatively, you can
do this by downloading Jenkins and running it from the command line, as we discussed earlier:
C:\jenkins> java -jar jenkins.war
This second option is useful if the default Jenkins port (8080) is already being used by another
application. It doesn’t actually matter which port you use—you can change this later.
Figure 3.4. Starting Jenkins using Java Web Start
Once you have Jenkins running, connect to this server and go to the Manage Jenkins screen. Here you
will find an Install as Windows Service button. This will create a Jenkins service on the server that
will automatically start and stop Jenkins in an orderly manner (see Figure 3.5, “Installing Jenkins as a
Windows service”).
Jenkins will prompt you for an installation directory. This will be the Jenkins home directory
(JENKINS_HOME). The default value is the default JENKINS_HOME value: a directory called .jenkins
57
in the current user’s home directory. This is often not a good choice for a Windows installation. When
running Jenkins on Windows XP, you should avoid installing your Jenkins home directory anywhere
near your C:\\Documents And Settings directory—not only is it a ridiculously long name, the
spaces can wreak havoc with your Ant and Maven builds and any tests using classpath-based resources.
It is much better to use a short and sensible name such as C:\Jenkins. The Vista and Windows 7 home
directory paths like C:\Users\john will also work fine.
Figure 3.5. Installing Jenkins as a Windows service
A short home directory path is sometimes required for other reasons, too. On many versions of Windows
(Windows XP, Windows Server 2003, etc.), file path lengths are limited to around 260 characters. If
you combine a nested Jenkins work directory and a deep class path, you can often overrun this, which
will result in very obscure build errors. To minimize the risks of over-running the Windows file path
limits, you need to redefine the JENKINS_HOME environment variable to point to a shorter path, as we
discussed above.
This approach won’t always work with Windows Vista or Windows 7. An alternative strategy is
to use the jenkins.exe program that the Web Start installation process will have installed in the
directory you specified above. Open the command line prompt as an administrator (right-click, “Run as
administrator”) and run the jenkins.exe executable with the install option:
C:\Jenkins> jenkins.exe install
This basic installation will work fine in a simple context, but you will often need to fine-tune your
service. For example, by default, the Jenkins service will be running under the local System account.
However, if you are using Maven, Jenkins will need an .m2 directory and a settings.xml file in the
58
home directory. Similarly, if you are using Groovy, you might need a .groovy/lib directory. And so
on. To allow this, and to make testing your Jenkins install easier, make sure you run this service under
a real user account with the correct development environment set up (see Figure 3.6, “Configuring the
Jenkins Windows Service”). Alternatively, run the application as the system user, but use the System
Information page in Jenkins to check the /Users/johnsmart/Projects/Books/jenkins-the-
definitive-guide directory, and place any files that must be placed in the user home directory here.
Figure 3.6. Configuring the Jenkins Windows Service
You configure the finer details of the Jenkins service in a file called jenkins.xml, in the same directory
as your jenkins.war file. Here you can configure (or reconfigure) ports, JVM options, an the Jenkins
work directory. In the following example, we give Jenkins a bit more memory and get it to run on port
8081:
jenkins
Jenkins
This service runs the Jenkins continuous integration system
java
-Xrs -Xmx512m
-Dhudson.lifecycle=hudson.lifecycle.WindowsServiceLifecycle
-jar "%BASE%\jenkins.war" --httpPort=8081 --ajp13Port=8010
Finally, if you need to uninstall the Jenkins service, you can do one of two things. The simplest is to
run the Jenkins executable with the uninstall option:
59
C:\jenkins> jenkins.exe uninstall
The other option is to use the Windows service tool sc:
C:> sc delete jenkins
3.13. What’s in the Jenkins Home Directory
The Jenkins home directory contains all the details of your Jenkins server configuration, details that
you configure in the Manage Jenkins screen. These configuration details are stored in the form of a set
of XML files. Much of the core configuration, for example, is stored in the config.xml file. Other
tools-specific configuration is stored in other appropriately-named XML files: the details of your Maven
installations, for example, are stored in a file called hudson.tasks.Maven.xml. You rarely need to
modify these files by hand, though occasionally it can come in handy.
The Jenkins home directory also contains a number of subdirectories (see Figure 3.7, “The Jenkins
home directory”). Not all of the files and directories will be present after a fresh installation, as some
are created when required by Jenkins. And if you look at an existing Jenkins installation, you will see
additional XML files relating to Jenkins configuration and plugins.
The main directories are described in more detail in Table 3.1, “The Jenkins home directory structure”.
Table 3.1. The Jenkins home directory structure
Directory Description
.jenkins The default Jenkins home directory (may be .hudson in older
installations).
fingerprints This directory is used by Jenkins to keep track of artifact
fingerprints. We look at how to track artifacts later on in the book.
jobs This directory contains configuration details about the build jobs
that Jenkins manages, as well as the artifacts and data resulting from
these builds. We look at this directory in detail below.
plugins This directory contains any plugins that you have installed. Plugins
allow you to extend Jenkins by adding extra feature. Note that,
with the exception of the Jenkins core plugins (subversion, cvs,
ssh-slaves, maven, and scid-ad), plugins are not stored with the
jenkins executable, or in the expanded web application directory.
This means that you can update your Jenkins executable and not
have to reinstall all your plugins.
updates This is an internal directory used by Jenkins to store information
about available plugin updates.
60