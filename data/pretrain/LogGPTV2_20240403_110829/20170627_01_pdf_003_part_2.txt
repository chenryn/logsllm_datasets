wordmaybestoredinaleafafterthethree-nodepath“i”,“m”,“p”,and“lementation”,
sincebasedonthecurrentwordsinthetrie,splittinguptotheletter“p”makesaunique
leaf entry for the word “implementation”. Finally, in the case of PathShrink = “Tree
Shrink”, the input word may be stored in a leaf after a three-node path “i”, “mp”, l,
“ementation”. Since the only child of the index node “m” is the index node “p”, both
nodesaremergedtogethertoreducepathlength.
PathShrinkisthewaytheframeworkusestomapthestructuraldifferences SD and
3
SD . Asshown,manyvariantsofspatialtreecanberealizedaccordingtothesestructural
4
differences.
• NodeShrink: This parameter determines if empty partitions should be kept in the tree
or not. When NodeShrink is set to true, the resulting space partitioning tree is best
describedasaforest,becauseonlythepartitionsthathavesubtreesarerepresented. When
NodeShrink is set to false all the partitions are kept. In case of shrinking index nodes,
the nodes become variable-length nodes. Figure 4 shows the effect of the parameter
NodeShrinkonthetriewherethewordsintheleafnodesaretheonlydatainserted. Note
thatNodeShrinkhasnoeffectonthepathlengthofthetree(asopposedtoPathShrink).
• BucketSize: This parameter gives the maximum number of data items a data node can
hold. ItalsorepresentstheSplitThresholdfordatanodes. Forexample,quadtreeshave
the notion of a bucket size that determines when to split a node (e.g., as in the PMR
quadtree (Nelson and Samet, 1986)). The use of buckets (SD ) is an attractive design
5
option for many database applications where we are concerned about storing multiple
dataitemsperbucketforstorageperformanceefficiency.
3.2. Externalmethods(behavior)
TheexternalmethodsarethesecondpartoftheSP-GiSTinterfacethatallowstheuserto
specify the behavior of each tree. The main purpose is to map the behavioral difference
BD inSection2. Notethesimilaritybetweenthenamesofthefirsttwomethodsandthe
1
onesintroducedintheGiSTframework(Hellersteinetal.,1995)althoughtheyaredifferent
intheirfunctionalities.
LetE:(p,ptr)beanentryinanSP-GiSTnode,wherepisanodepredicateoraleafdatakey
andptrisapointer. Whenpisanodepredicate,ptrpointstothechildnodecorrespondingto
itspredicate. Whenpisaleafdatakey,ptrpointstothedatarecordassociatedwiththiskey.
222 AREFANDILYAS
(a)
(b)
Figure4. TheeffectoftheparameterNodeShrink:(a)NodeShrink=false,and(b)NodeShrink=true.
• Consistent(Entry E, Query Predicate q, level): A Boolean function that is false when
(E.p ∧q)isguaranteedunsatisfiable,andistrueotherwise. Thismethodwillbeusedby
the tree search method as a navigation guide through the tree. Argument level is used
in order to determine consistency depending on the current decomposition level. For
example,inaquadtree,aqueryofadatapoint(x,y)isconsistentonlywiththeentrythat
pointstothequadrantcontainingthispoint.
• PickSplit(P, level, splitnodes, splitpredicates): Returns Boolean, where P is a set of
BucketSize+1 entries that cannot fit in a node. PickSplit defines a way of splitting the
entries into a number of partitions equal to NumberOfSpacePartitions and returns a
Boolean value indicating whether further partitioning should take place or not. The
parameter level is used in the splitting criterion because splitting will depend on the
currentdecompositionlevelofthetree. Forexample,inatrieofEnglishwords,atlevel
SP-GiST 223
i, splitting will be according to the ith character of each word in the over-full node.
PickSplit will return the entries of the split nodes in the output parameter splitnodes,
which is an array of buckets, where each bucket contains the elements that should be
insertedinthecorrespondingchildnode. Thepredicatesofthechildrenarealsoreturned
insplitpredicates.
• Cluster(): Thismethoddefineshowtreenodesareclusteredintodiskpages. Themethod
isexplainedinmoredetailinSection6.
TheinterfacemethodsrealizethebehavioraldesignoptionslistedinSection2. Methods
ConsistentandPickSplitdetermineifthetreefollowsthespace-drivenorthedata-driven
partitioning. For example, in a k-D tree, which is a data-driven space partitioning tree,
methodConsistentcomparesthecoordinatesofthequerypoint(thepointtobeinsertedor
searchedfor)againstthecoordinatesofthepointattachedtotheindexnode. Thevaluesof
thesecoordinatesaredeterminedbasedondatathatisinsertedearlierintothek-Dtree. On
theotherhand,methodConsistentforaspace-drivenspacepartitioningtree,e.g.,thetrie,
willonlydependonthelettersofthenewlyinsertedword. Thecomparisonisperformed
against the letter associated with the index node entry, which is space-dependent, and is
independentofthepreviouslyinserteddata.
We can also show that method PickSplit completes the specification of the behavioral
designoptionbyspecifyingthewaytodistributenodeentriesamongtheproducedpartitions.
ExamplesofPickSplitforvarioustreestructuresaregiveninthefollowingsection.
3.3. Realizationofspace-partitioningtrees
UsingtheSP-GiSTinterface,givenintheprevioussections,wedemonstratehowtorealize
some commonly used space-partitioning indexes. More specifically, we present the real-
izationofthek-Dtree,variantsofthequadtree,thetrie,andthePatriciatrie.
The k-D tree: k-D trees (Bentley, 1975) are a special kind of search trees, useful for
answering range queries about a set of points in the k-dimensional space. The k-D tree
usesadata-drivendecompositionofthespace(seeSection2). Thetreeisconstructedby
recursivelypartitioningthespaceintotwosub-spaceswithrespecttooneofthedimensions
ateachtreelevel.
Thek-Dtreeinsertionalgorithmforthetwo-dimensionalcase(i.e.,k = 2)withpoints
inthexy planeisasfollows: Thealgorithmselectsanypointanddrawsalinethroughit,
paralleltothey-axis. Thislinepartitionstheplaneverticallyintotwosub-planes. Another
point is selected and is used to horizontally partition the sub-plane in which it lies. In
general,apointthatfallsinaregioncreatedbyahorizontalpartitionwilldividethisregion
vertically, andviceversa. Thisdivisionprocessinducesabinarytreestructure, (e.g., see
figure5).
The realization of the k-D tree is given in Table 1. PathShrink is set to “Leaf Shrink”
because we put each input point at the first available place depending on the previously
insertedpoints. Eachnodewillholdonlyonepoint,(BucketSize=1). NodeShrinkissetto
false,soeachindexnodewillhaveaslotfortheleftsubtreeandaslotfortherightsubtree.
224 AREFANDILYAS
Table1. Realizationofthek-DTreeusingSP-GiST.
Parameters PathShrink=LeafShrink
NodeShrink=False
BucketSize=1
NumberOfSpacePartitions=2
NodePredicate=“left”,“right”,orblank.
KeyType=Point
Consistent(E,q,level) IF(levelisoddANDq.xsatisfiesE.p.x)
OR
(levelisevenANDq.ysatisfiesE.p.y)
RETURNTRUE
ELSERETURNFALSE
PickSplit(P,level) Puttheoldpointinachildnodewithpredicate“blank”
Putthenewpointinachildnodewithpredicate“left”or“right”,
RETURNFALSE
Figure5. Anexamplek-Dtree.
Wehaveonlytwospacepartitionsforthe“right”and“left”toapoint(NumberOfSpacePar-
titions=2).
The Quadtree: The term quadtree describes a class of hierarchical data structures whose
commonpropertyistherecursivedecompositionofspaceintoquadrants. Thequadtreecan
berealizedbySP-GiST.Inthenextsubsections,examplesofvarioustypesofquadtreesare
presentedforpointdata,rectangles,andpolygonaldata. Notethatforallthevariants,the
numberofspacepartitionsisequaltofour(NumberOfSpacePartitions=4),withabucket
sizeofBitems(BucketSize=B).NodeShrinkissettofalse,soeachindexnodewillhave
a slot for each partition even if it is empty. Setting NodeShrink to true would realize a
quadtreewithallwhitenodeseliminated(seefigure6)(Samet,1990a).
SP-GiST 225
(a)
(b)
Figure6. AnexampleMXquadtree:(a)NodeShrink=false,and(b)NodeShrink=true.
Thequadtreecanbeviewedasatriestructureintwodimensions—withonlytwopossible
charactersineachdimension,intrieterminology,orevenaonedimensionaltriewithonly
afourcharacteralphabetset. Thusintheliterature,space-drivenquadtreesareoftencalled
quadtries(Samet,1990b).
When we treat data points as nonzero elements in a square matrix, the resulting data
structure is called the MX quadtree (MX for matrix). In the MX quadtree, leaf nodes
areblackorempty(white)correspondingtothepresenceorabsence,respectively,ofdata
pointsintheappropriatepositioninthematrix. EachpointinanMXquadtreecorresponds
to a 1×1 square. Figure 6 gives an example of an MX quadtree. Notice that data nodes
oftheMXquadtreeallappearatthesamelevel. Thenumberofspacedecompositionsis
predefineddependingonthedesiredspaceresolution.
FortheMXquadtree,realizedinTable2,PathShrinkissetto“NeverShrink”. Therefore,
thetreeisexpandedthroughsuccessivesplittingtothemaximumspaceresolution. Thus,
PickSplitwillnotbeinvokedaseachpointwillfallinonenode.
The MX quadtree is applicable as long as the domain of data points is discrete and
finite. Ifthisisnotthecase,thedatapointscannotberepresentedusinganMXquadtree
since the minimum separation between the data points will be unknown. This leads to
226 AREFANDILYAS
Table2. RealizationoftheMXquadtreeusingSP-GiST.
Parameters PathShrink=NeverShrink
NodeShrink=False
BucketSize=B
NumberOfSpacePartitions=4
NodePredicate=Quadrantrepresentedby(x1,y1,x2,y2)
where(x1,y1)arethevaluesofthecoordinates
ofthetopleftcorner
and(x2,y2)arethevaluesofthecoordinates
ofthebottomrightcorner
KeyType=Point
Consistent(E,q,level) IF(qcoordinatesinsideE.quadrant)
RETURNTRUE
ELSERETURNFALSE
PickSplit(P,level) RETURNFALSE
Table3. RealizationofthePRquadtreeusingSP-GiST.
Parameters PathShrink=LeafShrink
NodeShrink=False
BucketSize=B
NumberOfSpacePartitions=4
NodePredicate=Quadrantrepresentedby(x1,y1,x2,y2)
where(x1,y1)arethevaluesofthecoordinates
ofthetopleftcorner
and(x2,y2)arethevaluesofthecoordinates
ofthebottomrightcorner
KeyType=Point
Consistent(E,q,level) IF(qcoordinatesinsideE.quadrant)
RETURNTRUE
ELSERETURNFALSE
PickSplit(P,level) Partitionandallocatedatapointsintoquadrants
accordingtothelocationsofthedatapoints
IFanypartitionisstillover-fullRETURNTRUE
ELSERETURNFALSE
theideaofassociatingdatapointswithquadrantsandhencerealizingthePRquadtree(P
for point and R for region) (Orenstein, 1982). Now, each data point maps to a quadrant
and not to a 1×1 square as in the MX quadtree. Figure 1 gives an example of the PR
quadtree.
ThePRquadtreecanberealizedusingSP-GiSTbysettingPathShrinkto“LeafShrink”
asweputeachinputpointatthefirstavailableleafnode. Theleafnodeisnotnecessarily
ofsize1×1. RealizationofthePRquadtreeusingSP-GiSTisgiveninTable3.
SP-GiST 227
Figure7. AnexampleMX-CIFquadtree.
TheMX-CIFquadtreeisaquadtreevariationforstoringrectangles. Itassociateseach
rectangle,sayR,withthequadtreenodecorrespondingtothesmallestblockthatcontainsR
initsentry. Rectanglescanbeassociatedwithbothleafandnon-leafnodes. Thesubdivision
ceaseswheneveranode’sblockcontainsnorectangles. Figure7givesanexampleMX-CIF
quadtree. Noticethatmorethanonerectanglecanbeassociatedwithagivennode.
TheMX-CIFquadtreecanberealizedbySP-GiST,asgiveninTable4. PickSplitisnot
applicablehere,becauseaccordingtotheMX-CIFinsertionalgorithm,thereisnotmuch
choiceastowherearectanglegetsinserted.
Table4. RealizationoftheMX-CIFquadtreeusingSP-GiST.
Parameters PathShrink=LeafShrink
NodeShrink=False
BucketSize=B
NumberOfSpacePartitions=4
NodePredicate=Quadrantrepresentedby(x1,y1,x2,y2)
where(x1,y1)arethevaluesofthecoordinates
ofthetopleftcorner
and(x2,y2)arethevaluesofthecoordinates
ofthebottomrightcorner
KeyType=Rectangle
Consistent(E,q,level) IF(Nodepredicateistheminimumboundingquadrant
ofqANDtheE.pisBlank)
RETURNTRUE
IF(E.pcontainsq)RETURNTRUE
ELSERETURNFALSE
PickSplit(P,level) RETURNFALSE
228 AREFANDILYAS
Table5. RealizationofthePMRquadtreeusingSP-GiST.
Parameters PathShrink=LeafShrink
NodeShrink=False
BucketSize=B
NumberOfSpacePartitions=4
NodePredicate=Quadrantrepresentedby(x1,y1,x2,y2)
where(x1,y1)arethevaluesofthecoordinates
ofthetopleftcorner
and(x2,y2)arethevaluesofthecoordinates
ofthebottomrightcorner
KeyType=LineSegmentrepresentedbyendpoints
Consistent(E,q,level) IF(insertedlineintersectsE.quadrant)