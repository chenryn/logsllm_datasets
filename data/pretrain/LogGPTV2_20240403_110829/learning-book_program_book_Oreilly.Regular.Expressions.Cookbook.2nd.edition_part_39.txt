works a bit differently. It uses a plus (one or more) instead of an asterisk (zero or more)
quantifier, and explicitly allows matching zero characters only i the matching process
which is necessary to ensure accuracy since b is not Unicode-enabled in XRegExp,
has reached the end of the string. This allows us to avoid the word boundary token,
PCRE, or Ruby.  is Unicode-enabled in Java, even though Java’s \w> is not (unless
you use the UNICoDE_CHARACTER_CLASS flag in Java 7).
Unfortunately, none of these options allow standard JavaScript or Ruby 1.8 to correctly
handle words that use non-ASCII characters. A possible workaround is to reframe the
regex to count whitespace rather than word character sequences, as shown here:
282 | Chapter 4: Validation and Formatting
---
## Page 299
^s*(?: \S+(?: \s+|$)){10, 100}$
Regex options: None
Regexflavers: .NET, Java, JavaScript, Perl, PCRE, Python, Ruby
In many cases, this will work the same as the previous solutions, although it’s not
exactly equivalent. For example, one difference is that compounds joined by a hyphen,
such as *far-reaching,” will now be counted as one word instead of rwo. The same
1,uop, se qons soudosode m spom o sadde
See Also
Recipe 4.8 shows how to limit input by character set (alphanumeric, ASCII-only, etc.)
instead of length.
Recipe 4.10 explains the subtleties that go into precisely limiting the number of lines
in your text.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
character. Recipe 2.5 explains anchors. Recipe 2.7 explains how to match Unicode
Recipe 2.3 explains character classes. Recipe 2.4 explains that the dot matches any
characters. Recipe 2.12 explains repetition. Recipe 2.16 explains lookaround.
4.10Limit the Number of Linesin Text
Problem
You need to check whether a string is composed of five or fewer lines, without regard
for how many total characters appear in the string.
Solution
The exact characters or character sequences used as line separators can vary depending
on your operating system’s convention, application or user preferences, and so on.
Crafting an ideal solution therefore raises questions about what conventions for indi-
cating the start of a new line should be supported. The following solutions support the
standard MS-DOS/Windows (\r\n), legacy Mac OS (^r), and Unix/Linux/BSD/OS
X (\ns) line break conventions.
Regular expression
The following thre flavor-speific regexes contain wo diferences. Thefirst regexuses
atomic groups, written as -), instead of noncapruring groups, written as
(?:--), because they have the potential to provide a minor efficiency improvement
here for the regex flavors that support them. Python and JavaScript do not support
atomic groups, so they are not used with those flavors. The other difference is the tokens
used to assert position at the beginning and end of the string (\A or ^ for the beginning
4.10 Limit the Number of Lines in Text | 283
---
## Page 300
of the string, and ^z), \Z>, or  for the end). The reasons for this variation are dis
cussed in depth later in this recipe. All three flavor-specific regexes, however, match
exactly the same strings:
A(？>[rn]*(?>rn？|\n)){0,4}[^r\n]*\z
Regex options: None
Regexflavers: .NET, Java, PCRE, Perl, Ruby
\A(？:[r\n]*(？:r\n？|\n)){0,4)[r\n]*\z
Regex options: None
Regexflavor: Python
^(?：[{r\n]*(?:\r\n？|n)){0,4}[\r\n]*$
Regexoptions: None (* ^ and $ match at line breaks"” must not be set)
Regex flaver: JavaScript
PHP (PCRE) example
1f (preg_match(/A(>[^r\n](?>\r\n²|n)){o,4}[^r\n]\z/”,
$_PosT[’subject’]))(
_print *Subject contains five or fewer lines′;
}else {
print
:Subject contains nore than five lines′;
See Recipe 3.6 for help implementing these regular expressions with other program-
ming languages.
Discussion
All of the regular expressions shown so far in this recipe use a grouping that matches
any number of non-line-break characters followed by an MS-DOS/Windows, legacy
Mac OS, or Unix/Linux/BSD/OS X line break sequence. The grouping is repeated be-
rween zero and four times, since four line breaks occur in five lines of text. After the
grouping, we allow one last sequence of non-line-break characters to fill out the fifth
line, if present.
In the following example, we’ve broken up the first version of the regex into its indi-
vidual parts. We'll explain the variations for alternative regex flavors afterward:
\A
# Assert position at the beginning of the string.
(?>
[^\r\n]*
# Group but don’t capture or keep backtracking positions:
#
Match zero or more characters except CR and LF.
(?>
#
Group but don’t capture or keep backtracking positions:
↓r\n?
#
Match a CR, with an optional following LF (CRLF).
#
110
\n
#
Match a standalone LF character.
）
End the noncapturing, atomic group.
)(0,4}
# End group; repeat between zero and four times.
284 | Chapter 4: Validation and Formatting
---
## Page 301
[\rin]*
# Match zero or more characters except CR and LF.
Z
# Assert position at the end of the string-
Regex options: Free-spacing
Regexflavers: .NET, Java, PCRE, Perl, Ruby
The leading , because then the text would have to end with a line break to match at all. So
long as the last line was empty, it would also allow matching six lines, since six lines
are separated by five line breaks. That's no good.
In all of these regexes, the subgroup matches any of three line break sequences;
•A carriage returm followed by a line feed (\r\no, the conventional MS-DOS/Win-
dows line break sequence)
•A standalone carriage retum (r, the legacy Mac OS line break character)
•A standalone line feed (, and \z instead? The short explanation is that
the meaning of these metacharacters differs slightly berween regular expression flavors.
The long explanation leads us to a bit of regex histor...
4.10 Limit the Number of Linesin Text | 285
---
## Page 302
When using Perl to read a line from a file, the resulting string ends with a line break.
Hence, Perl introduced an “enhancement” to the traditional meaning of  matches just before a string-terminating line break. Perl also introduced
two more assertions that match the end of a string:  and \z. Perl’s Z anchor has
the same quirky meaning as , except that it doesn’t change when the option to let
^ and \V*\R){0,4}\V*\z
Regex options: None
Regexflavers: PCRE 7.2 (with the PCRE_BSR_UNICODE option), Perl 5.10
\A(？>[^\n-\r\x85x{2028}\×{2029}]*(>\r\n？|
[n\f\x85x{2028}x{2029}])){0,4}[^\nrx85x{2028}×{2029}]*\z
Regex options: None
286 | Chapter 4: Validation and Formatting
---
## Page 303
Regexflaver: Java 7, PCRE, Perl
\A(?>[^\n-\r\u0085\u2028\u2029]*(?>\r\n？| 
[n\f\u0085\u2028u2029])){0,4}[^nr\u0085u2028u2029]*\z
Regex options: None
Regexflavors: .NET, Java, Ruby 1.9
\A(?>[^\n-\r\x85\u2028\u2029]*(?>\r\n？|
[n\f\x85\u2028u2029]))(0,4)[^\n\rx85\u2028\u2029]*z
Regex options: None
Regexflavers: .NET, Java
\A(？:[^\n-\r\x85\u2028\u2029]*(？:\r\n？| 
[n-\fx85u2028u2029)){0,4}[^\n\rx85u2028u2029]*
Regexoptions: None
Regexflaver: Python
(?:[^\n-\rx85\u2028\u2029]*(?:\rn？|
[\n{f\x85u2028u2029])){0,4}[^\n\rx85u2028\u2029]*$
Regexoptions: None (*^ and $ match at line breaks" must not be set)
Regex flarer: JavaScript
Ruby 1.8 does not support Unicode regular expressions, and therefore cannot use any
of these options. Ruby 1.9 does not support the shorter  syntax for non-ASCII
character positions (anything greater than Ox7F), and therefore must use \uoo85 in-
stead of \x85>,
All of these regexes handle the line separators in Table 4-1, listed with their Unicode
positions and names. This list comprises the characters that the Unicode standard rec-
ognizes as line terminators.
Table 4-1. Linte separators
Unicode sequence
Regex equivalent
Name
Abbr.
Common usage
U+0000 U+000A
(z′\n)
Carriageretuandline feed
JTH)
Windoms and MS-DOS tet
fles
U+000A
(\n)
Linefeed
LF
Unis, Linux,SD,and0Xtet
fles
g00o+n
(v> or x08)
Linetabulation (aka vertial
VT
(Rare)
tab)
U+000C
(\f)
Form feed
FF
(Rare)
U+0000
Carriage retun
CR
Legacy Mac OStext files
U+0085
x85>or \u0085
Nest linte
NEL
IBM maitfame tet fles
gz0z+n
u2028> er
Linesepeator
(\x(2028))
(Rare)
U+2029
\u2029> αr
Paragraph separator
PS
(Rare)
(\x{2029))
4.10 Limit the Number of Linesin Text I  287
---
## Page 304
See Also
Recipe 4.9 shows how to limit the length of text based on characters and words, rather
than lines.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
classes. Recipe 2.5 explains anchors. Recipe 2.7 explains how to match Unicode char-
Recipe 2.2 explains how to match nonprinting characters. Recipe 2.3 explains character
acters. Recipe 2.9 explains grouping. Recipe 2.12 explains repetition. Recipe 2.14 ex-
plains atomic groups.
4.11ValidateAffirmativeResponses
Problem
You need to check a configuration option or command-line response for a positive
value. You want to provide some flexibility in the accepted responses, so that true, t,
yes, y, okay, ok, and 1 are all accepted in any combination of uppercase and lowercase.
Solution
Using a regex that combines all of the accepted forms allows you to perform the check
with one simple test.
Regular expression
(?:1|t(?:rue)?ly(?:es)?|ok(?:ay)?)$
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
JavaScript example
var yes = /^(?:1|t(?:rue)?|y(?:es)?|ok(?:ay)?)$/1;
if (yes.test(subject)){
alert("Yes");
}else {
alert("No°);
Follow Recipe 3.6 to run this regex with other programming languages. Recipe 3.4
shows how to apply the *case insensitive" regex option, among others.
Discussion
The following breakdown shows the individual parts of the regex. Combinations of
tokens that are easy to read together are shown on the same line:
288 | Chapter 4: Validation and Formatting
---
## Page 305
# Assert position at the beginning of the string-
(?:
# Group but don’t capture:
1
Match *1*.
130
t(?:rue)?
'_an1, Aq pamoo Aeuotdo 1, 4ten
#Or:
y(?:es)?