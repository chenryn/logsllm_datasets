to the target devices. These limitations are particularly sig-
niﬁcant for BLE advertisements, especially in the case of
Exposure Notiﬁcation which is setup to transmit at low power.
In crowded scenarios with multiple wireless devices, as the
interference and collisions are unavoidable, the quality of our
snifﬁng is signiﬁcantly impacted.
Unexpected timing offset pattern. The coupling of BLE
advertisements and BTC transmissions appear as a constant
offset but not always small. Furthermore, the timing offsets are
a combination of multiple patterns resulting in the challenge
of distinguishing between a bias misalignment, which can be
compensated for, and a real misalignment of a non-coupling.
Tight coupling of BTC and BLE in Android. The Android
OS provides no automated mechanism to disable BTC even
when all paired devices are disconnected. Furthermore, the OS
couples BTC and BLE together such that apps must enable
BTC on the device if they need to use BLE advertisements.
The above scenarios increase the possibility of a device to
reconnect with a previously paired device even when not
required. The OS provides no notiﬁcations of concurrent BTC
and BLE transmissions making mitigations more challenging.
E. Privacy Implications of the Attack
The linking of BLE advertisements to a device BDADDR
breaks a key assumption of privacy-preserving BLE-based
protocols as most explicitly and critically rely on the un-
linkability (randomization) of BLE advertisements. In case
of the Exposure Notiﬁcation service, the BLE advertisement
data consists of the RP Is broadcast by the user devices.
These RP Is are generated such that they do not reveal the
user’s identity. However,
the vulnerability we expose will
link them to the BDADDR. An adversary (or coalition) that
periodically downloads the Diagnosis keys, can then generate
the RP Is of infected users and compare them to RP Is
previously recorded and linked to BDADDRs. This does
not fully de-anonymize the infected users. However, it can
serve as a stepping stone to full de-anonymization of infected
users when combined with any other side-channel or attack
that
links the BDADDR to users private information. For
instance, on Android, system apps can already access the
BDADDR of the device, Bluetooth multi-player games can
access the BDADDR of paired devices, as can paired IoT
devices such as smart speakers. These apps can potentially
link the BDADDR to any information they have about the
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:04 UTC from IEEE Xplore.  Restrictions apply. 
1322
-150-100-500501001500246810106-400-2000200400024681010602040608010012014000.20.40.60.81ProbabilityImmuniuser. Recent works [34], [35] demonstrated that other BLE-
based Apple protocols such as AWDL, AirDrop and Nearby
Action can reveal user identiﬁers such as hostnames, email
hashes and phone number hashes. In case of hostname, the
study revealed that about 75% of these hostnames contain the
user’s ﬁrst or last name or both. With sufﬁcient incentives, it
is imaginable that an underground market could emerge for
linking BDADDR to user identities especially because it is
now possible to track users based on their BDADDR [11].
In case of the Apple Find My service, the BLE advertise-
ments broadcast transient public keys that are not tied to a
user. Since the only information retrievable (by an adversary
who knows the transient public key hash) from Apple’s servers
is the location encrypted with the transient key, it is harder to
imagine powerful attacks that leverage the BTC-BLE linkage
vulnerability. One possible attack assuming an adversary who
knows the BDADDR of a target user (as discussed above) is
that he can then link the public keys to the user identiﬁer.
An adversary (or coalition) can use this knowledge to launch
a targeted attack where they ﬁrst steal the user’s device, and
then start spooﬁng their location and encrypting the spoofed
location using the user’s public keys. This can cause the user
to identify the lost device location at a spoofed location of the
attacker(s) choice, leading to physical threats to the user.
Given that the BTC-BLE linkage vulnerability appears to
have more severe impact on the Exposure Notiﬁcation proto-
cols, we will focus mostly on such applications.
V. THE DETAILED ATTACK
A. Analyzing BLE and BTC Coupling
We ﬁrst analyze the nature of the coupling between BLE and
BTC. We setup a Samsung Galaxy S6 phone to stream audio
to a Bluetooth headset over BTC, while broadcasting BLE
advertisements using a mobile app. The app called Immuni
uses Exposure Notiﬁcation service as its underlying BLE
advertiser. Immuni is the ofﬁcial exposure notiﬁcation app
of the Italian government and is used by over one million
users. For this part, we posit that Immuni is representative of
many contact tracing apps. We note that this experiment was
performed in an environment with proximity to several other
devices using BTC communication and BLE advertisements.
This enabled us to also determine whether there could be other
devices with clocks aligned with our test device.
Our analysis follows the attacker model of Section III-B.
We built an integrated and synchronized SDR-based BLE
decoder [36] with BTC decoder [11]. We use a USRP B210
SDR to sample half of the Bluetooth spectrum. First, we
record all BTC transmissions and BLE advertisements over
a 10s interval. To protect the privacy of individuals in our
environment, we record only timestamps, BLE randomized
address and service UUID. From the recordings, we calculated
the time difference between each BLE advertisement and
the closest BTC transmissions (modulo 625 µs). This time
difference is used to determine whether a BTC transmission
and BLE advertisement are from the same device, speciﬁcally
our test device. A low time difference indicates a higher
probability of linkage between same device BTC and BLE
transmissions. Similarly, a higher difference may indicate that
the BTC transmissions and BLE advertisements are from
different devices.
To analyze the coupling, we collect 10 second recordings
every minute for a 1 hour period. Our goal was to determine if
the attack is achievable and repeatable over extended periods
of time. The attack system is implemented following the ﬂow
graph of Figure 4. We compute the time alignment between
each BLE advertisement and BTC transmission. In order to
have a single metric to determine how well linked -or not-
BTC and BLE transmissions are, we compute the Root Mean
Square Error (RMSE) of the misalignment values for each
recording. A linkability threshold is set
to determine the
maximum misalignment per packet.
Irregular transmissions. As described in Section II-B, a
BLE advertiser should transmit the same advertisement over
all three channels (37, 38 and 39) within an advertisement
event. We found the transmissions over the ﬁrst channel
typically aligned to BTC transmissions from the same device.
However, subsequent transmissions within the event are not
necessarily aligned to the BTC transmissions. In other words,
if advertisements within an event are sent over channels N,
N + 1 and N + 2 in that order, the transmission on channel N
will be aligned to BTC transmissions from the same device,
but N + 1 and N + 2 will see an offset to channel N. Further-
more, in our initial experiments on several Android devices,
we observed a second abnormality. Frequently transmissions
on a speciﬁc channel would not occur, but the remaining
channels would still transmit an advertisement. This irregular
behavior was what led to the low performance for the attack
described in Section IV-C. The behavior mandates that a robust
attack algorithm should not rely on a speciﬁc channel and ﬁxed
offset but should adapt to account for such variability. To rule
out problems with our SDR setup, we implemented a simple
BLE scanner app for Android to monitor advertisements. The
scanner app conﬁrmed the irregular behavior that advertise-
ments are sometimes not transmitted over speciﬁc channels
for extended periods, up to 10 seconds.
Unexpected channel offset. In a BLE advertising session,
subsequent advertisements transmitted over the same channel
are typically aligned for the entire duration of the session. As
such, the time offset from channel N to N + 1 or to N + 2
remains constant. However, this is not always the case. An
example is the presence of a connectable or scannable ﬂag in
the advertisement (e.g., ADV IND, ADV SCAN IND). Such
ﬂags trigger a response after transmitting the advertisement
on channel N that can cause a delay in advertising packets
on subsequent channels. Furthermore, the separation between
channels N, N +1 and N +2 can vary depending on the device
as well as advertisement conﬁguration. Analyzing the channel
offset for a set of devices, we found a varying interval between
advertisement packets. Even for the same app, we measured
separations between channels 37 and 38 of 380us and 1.25ms
for two different devices. Moreover, the advertising interval is
affected by the choice of advertising app.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:04 UTC from IEEE Xplore.  Restrictions apply. 
1323
B. Linking Same Device BTC-BLE Transmissions
To link a BLE advertisement to the BTC BDADDR, we
need to quantify the misalignment of corresponding packets
timestamps. This quantity is computed as the time difference
between each BLE advertisement and the nearest BTC trans-
mission (modulo 625µs). The modulus 625µs is in fact the
time unit deﬁned in BTC, to which all BTC transmissions in
a piconet are aligned to. In BLE, the advertisements instead
align to advertising events with random intervals. Despite
different schedule procedures in BLE and BTC, our techniques
still infer the alignment and reveal the linking. For ease of
presentation, we describe the attack for a window of samples:
1) Record I&Q RF samples of considered spectrum.
2) Process signal and decode to reveal N BTC transmitters
{BT Ci}, i ∈ [0, N − 1] and M × K BLE advertisements
{BLEj,k}, j ∈ [0, M − 1], k ∈ [0, K − 1], where M and
K are the number of different advertisements and number
of different advertising channel indices respectively.
3) For each combination of BT Ci and BLEj,k, compute
the time distance (modulo 625µs) {D(l)
i,j,k}, l ∈ [0, L− 1]
for each of L BLEj,k advertising packets and the nearest
BT Ci packets then derives the combination’s score as:
• Si,j,k =
• Si,j,k =
i,j,k)2 if k = 0
i,j,k − mode({Di,j,k}))2 if k > 0
4) The attacker links BT Ci and BLEi if (Si,j,k  ¯L), where ¯S and ¯L are the thresholds of score and
of number of advertising packets respectively.
(cid:80)L−1
(cid:80)L−1
l=0 (D(l)
l=0 (D(l)
(cid:113) 1
(cid:113) 1
L
L
Consider an attacker performing a linking attack against N
BTC devices and M BLE Advertisements. In this scenario,
each BTC device is a master in a connection with a slave.
The master devices, as combined BTC-BLE cores, broadcast
M BLE advertisements in parallel with BTC transmissions.
First, the attacker starts a recording of the wireless envi-
ronment to capture signals emitted by the Bluetooth devices.
Then, process the recording to derive information such as BTC
BDADDRs and timing of its packets, and BLE Advertisements
(MAC address) and timing of associating packets. The attacker
now has two sets of data, one of N BTC devices {BT Ci} and
the other of BLE advertisements {BLEj}.
Second, the attacker analyzes the coupling of each pair of
BTC device and BLE advertisement. To analyze the coupling
of a pair, we use the time difference (modulo 625µs) between
each BLE advertising packet and the nearest BTC packet.
This searching for the nearest
is limited to a window of
time around the examining BLE advertising packet to prevent
possible effect of the drift in the device’s Bluetooth clock. If
there is no BTC packet found in this window, we discard
the BLE advertising packet. Since each advertisement can
be transmitted on multiple channels, we consider the timing
on each channel separately and denote k ∈ [0, K − 1] as
channel index of K advertising channels in use. At the end
of this stage, for each pair of BTC device BT Ci and BLE
advertisement BLEj,k, we obtain a vector of L elements
timing offset values {D(l)
i,j,k}, l ∈ [0, L − 1] for each BLE
(cid:113)
(cid:80)L−1
advertising packet on each channel to nearest BTC packet.
1
L
l=0 (D(l)
In the last stage, we quantify the coupling by computing
a score Si,j,k =
i,j,k)2 as the Root-Mean-
Square-Error of the timing offsets for each pair of BT Ci
and BLEj,k. Lower score correlates with likely linkability.
A linking decision is made based on experimental thresholds
as 1) if Si,j,k  ¯L, where Lk is the number of BLE advertising packets
and ¯L is its required amount. From our measurements, we
ﬁnd that an experimental threshold of 10 µs is able to clearly
delimit transmissions originating from one device.
As stated in the previous subsection, we ﬁnd that channels
following the initial channel are not aligned to 625 µs, a
priori limiting the use of channels other than the initial one.
Nonetheless, we ﬁnd that although the offset on subsequent
channels appears to be device and advertisement speciﬁc, this
offset is constant for the same advertisement. This fact makes
it possible to align channels k + 1 and k + 2 to 625 by
computing and substracting the most repeated offset value -the
mode- for a given advertisement. Transmissions coming from
other devices do not have a constant offset, as they drift over
time (ﬁg. 5). In this way, we are able to rely on channels other
than the initial one for our linkability attack.
We also observed abnormal offset values caused by scanning
procedures triggered within an advertisement event. Due to the
asynchronous nature of the scanning, an advertising packet
on the second and third advertising channels can be delayed
by a speciﬁc or random amount of time depending on the
manufacturer’s implementation, adding unexpected values to
the timing offset on these channels. As the actual value of
the added offset is not possible to forecast, we do not rely on
measurements from an advertisement event that had a scanning
procedure triggered.
VI. EXPERIMENTAL EVALUATION SETUP
The goal of our measurements is to understand the potential
of the vulnerabilities across devices with different chipsets,
across multiple apps, as well as the impact of range, density
of devices, and existence of a BTC connection.
For our experiments, we use a low-cost USRP B210 SDR
to record a portion of the Bluetooth RF spectrum. The USRP
B210 is able to cover 56 MHz of the target RF bandwidth.
We sample the lower 44 MHz of the BT spectrum. In this
way, measurements with the B210 board include half the BTC
bandwidth and channels 37 (2402 MHz) and 38 (2426 MHz) of
BLE advertisements. Note that this does not limit the attack, as
advertising apps broadcast the same information on channels
37, 38 and 39. We do not record the whole bandwidth as it
would require two B210 or more expensive SDRs. Later, we
show this setup sufﬁcient for highly accurate attacks. The SDR
records the RF spectrum in the form of I&Q samples that it
relays to the host computer over USB 3.0.
To evaluate the effect on multiple smartphone models in
differing scenarios, we chose the following devices for our
experiments - Samsung Galaxy S6 (SGS6), Pixel 3A, Xiaomi
Mi8, Motorola Moto G5 Plus and iPhone X. These devices
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:04 UTC from IEEE Xplore.  Restrictions apply. 
1324
encompass different chipsets, operating systems and hardware