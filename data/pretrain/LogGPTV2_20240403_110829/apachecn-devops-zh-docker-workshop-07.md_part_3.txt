*   Create a volume as an independent entity outside any container by using the `docker volume create` subcommand.
    将卷创建为独立于容器的对象增加了数据管理的灵活性。这些类型的卷也被称为**命名卷**，因为您为其指定了一个名称，而不是让 Docker 引擎生成一个匿名的数字名称。命名卷比系统中所有容器的寿命都长，并保留其数据。
    尽管这些卷已装载到容器中，但即使删除了系统中的所有容器，这些卷也不会被删除。
*   使用`docker container run`子命令中的`--mount`或`-v`或`--volume`选项创建一个卷。Docker 为您创建了一个匿名卷。移除容器时，也不会移除体积，除非通过使用`docker container rm`子命令的`-v`选项或使用`docker volume rm`子命令明确指示。
以下练习将提供每种方法的示例。
## 练习 7.05:管理容器范围之外的卷并将其安装到容器上
在本练习中，您将创建一个不限于容器的体积。您将首先创建一个卷，将其装载到一个容器中，并在其上保存一些数据。然后，您将删除容器并列出卷，以检查即使系统上没有容器，卷是否仍然存在:
1.  Create a volume named `vol1` using the `docker volume create` command:
    ```
    $docker volume create vol1
    ```
    该命令将返回卷的名称，如图所示:
    ```
    vol1
    ```
2.  List all the volumes using the `docker volume ls` command:
    ```
    $docker volume ls
    ```
    这将导致以下输出:
    ```
    DRIVER            VOLUME NAME
    Local             vol1
    ```
3.  Inspect the volume to get its mount point using the following command:
    ```
    $docker volume inspect vol1
    ```
    您应该得到如下输出:
    ```
    [
        {
            "CreatedAt": "2020-06-16T16:44:13-04:00",
            "Driver": "local",
            "Labels": {},
            "Mountpoint: "/var/lib/docker/volumes/vol1/_data",
            "Name": "vol1",
            "Options": {},
            "Scope": "local"
        }
    ]
    ```
    卷检查显示其创建日期和时间、装载路径、名称和范围。
4.  Mount the volume to a container and modify its contents. Any data that is added to `vol1` will be copied to the volume inside the container:
    ```
    $ docker container run -it -v vol1:/container_vol --name container1 ubuntu:14.04 bash
    ```
    在前面的命令中，您已经使用`bash`命令从`ubuntu:14.04`映像中创建了一个容器。`bash`命令允许您在容器内输入命令。`-it`选项用于拥有交互式终端。`-v`选项用于同步主机上的`vol1`和容器内的`container_vol`之间的数据。使用`--name`选项命名容器`container1`。
5.  提示发生变化，表明您现在在容器内。将名为`new_file.txt`的文件中的单词`hello`写入卷中。容器内的容积称为`container_vol`。在这种情况下，该卷在主机和容器之间共享。从主机上看，这个卷叫做`vol1` :
    ```
    root@acc8900e4cf1:/# echo hello > /container_vol/new_file.txt
    ```
6.  列出卷的内容，验证文件是否保存:
    ```
    root@acc8900e4cf1:/# ls /container_vol
    ```
7.  使用`exit`命令退出容器:
    ```
    root@acc8900e4cf1:/# exit
    ```
8.  Check the contents of the new file from the host by running the following command:
    ```
    $ sudo ls /var/lib/docker/volumes/vol1/_data
    ```
    该命令将返回新文件的名称:
    ```
    new_file.txt
    ```
9.  通过运行以下命令来验证作为文件内容的单词`hello`是否也已保存:
    ```
    $ sudo cat /var/lib/docker/volumes/vol1/_data/new_file.txt
    ```
10.  Remove the container with the `-v` option to remove any volumes that are created within the container's scope:
    ```
    $docker container rm -v container1
    ```
    该命令将返回容器的名称:
    ```
    container1
    ```
11.  Verify that the volume still exists by listing all the volumes:
    ```
    $docker volume ls
    ```
    卷`vol1`被列出，表示该卷是在容器外部创建的，即使使用`-v`选项，在移除容器时也不会被移除:
    ```
    DRIVER        VOLUME NAME
    Local         vol1
    ```
12.  Now, remove the volume using the `rm` command:
    ```
    $docker volume rm vol1
    ```
    该命令应返回卷的名称:
    ```
    vol1
    ```
13.  Verify that the volume is removed by listing the current list of volumes:
    ```
    $docker volume ls
    ```
    将显示一个空列表，指示卷已被删除:
    ```
    DRIVER        VOLUME NAME
    ```
在本练习中，您学习了如何在 Docker 中将卷创建为独立对象，而不在容器的范围内，以及如何将该卷装入容器。当您移除容器时，该卷未被移除，因为该卷是在容器范围之外创建的。最后，您学习了如何删除这些类型的卷。
在下一个练习中，我们将创建、管理和删除容器范围内的未命名或匿名卷。
## 练习 7.06:管理容器范围内的卷
您不需要像前面的示例那样在运行容器之前创建卷。Docker 会自动为您创建一个未命名的卷。同样，除非您在`docker container rm`子命令中指定`-v`选项，否则移除容器时不会移除体积。在本练习中，您将在容器的范围内创建一个匿名卷，然后学习如何删除它:
1.  Create a container with an anonymous volume using the following command:
    ```
    $docker container run -itd -v /newvol --name container2 ubuntu:14.04 bash
    ```
    该命令应该返回一个长的十六进制数字，即卷标识。
2.  List all the volumes:
    ```
    $ docker volume ls
    ```
    注意这次，`VOLUME NAME`是一个很长的十六进制数字，不是名字。这种类型的卷称为匿名卷，可以通过在`docker container rm`子命令中添加`-v`选项来删除:
    ```
    DRIVER     VOLUME NAME
    Local      8f4087212f6537aafde7eaca4d9e4a446fe99933c3af3884d
    0645b66b16fbfa4
    ```
3.  Remove the container with the volume, this time. Use the `-f` option to force remove the container since it is in detached mode and running in the background. Add the `v` option (making this `-fv`) to remove the volume as well. If this volume is not anonymous, and you named it, it will not be removed by this option and you must use `docker volume rm ` to remove it:
    ```
    $docker container rm -fv container2
    ```
    该命令将返回容器的名称。
4.  验证该卷是否已被删除。使用`docker volume ls`子命令，你会发现列表是空的:
    ```
    $ docker volume ls
    ```
与前面的练习相比，当使用`rm`子命令中的`-v`选项移除容器时，体积被移除。Docker 这次删除了该卷，因为该卷最初是在容器的范围内创建的。
注意
1.如果要将卷装入服务而不是容器，则不能使用`-v`或`--volume`选项。您必须使用`--mount`选项。
2.要删除容器被移除时未被移除的所有匿名卷，可以使用`docker volume prune`子命令。
欲知详情，请访问 https://docs.docker.com/storage/volumes/.
现在，我们将看到更多卷与有状态容器一起使用的例子。请记住，将带有状态容器的卷用作数据库是最佳做法。容器是短暂的，而数据库中的数据应该保存为一个持久的卷，任何新的容器都可以在其中获取和使用保存的数据。因此，卷必须命名，您不应该让 Docker 自动生成一个十六进制数字作为其名称的匿名卷。
在下一个练习中，您将运行一个带有卷的 PostgreSQL 数据库容器。
## 练习 7.07:运行带有卷的 PostgreSQL 容器
假设您在一个组织中工作，其中使用了一个带有数据库卷的 PostgreSQL 容器，并且该容器由于一些意外而被删除。但是，数据会持续存在，并且比容器更长。在本练习中，您将运行一个带有数据库卷的 PostgreSQL 容器:
1.  运行带有卷的 PostgreSQL 容器。命名容器`db1`。如果您本地没有该映像，Docker 将为您提取该映像。根据`postgress`映像创建一个名为`db1`的容器。使用`-v`选项与容器内的`/var/lib/postgresql/data`共享主机上的`db`卷，并使用`-e`选项将 SQL 回显到标准输出流。使用`POSTGRES_PASSWORD`选项设置数据库密码，使用`-d`选项以分离模式运行该容器:
    ```
    $docker container run --name db1 -v db:/var/lib/postgresql/data -e POSTGRES_PASSWORD=password -d postgres
    ```
2.  Use the `exec` command to interact with the container from `bash`. The `exec` command does not create a new process but rather replaces `bash` with the command to be executed. Here, the prompt will change to `posgres=#` to indicate that you are inside the `db1` container:
    ```
    $ docker container exec -it db1 psql -U postgres
    ```
    `psql`命令允许您交互输入、编辑和执行 SQL 命令。`-U`选项用于输入数据库的用户名，即`postgres`。
3.  创建一个表，`PEOPLE`，有两列–`Name`和`age`:T3
4.  在`PEOPLE`表中插入一些值:
    ```
    INSERT INTO PEOPLE VALUES('ENGY','41');
    INSERT INTO PEOPLE VALUES('AREEJ','12');
    ```
5.  Verify that the values are inserted correctly in the table:
    ```
    SELECT * FROM PEOPLE;
    ```
    该命令将返回两行，验证数据是否已正确插入:
    ![Figure 7.4: Output of the SELECT statement ](img/B15021_07_04.jpg)
    图 7.4:SELECT 语句的输出
6.  退出容器以退出数据库。外壳提示将返回:
    ```
    \q
    ```
7.  Verify that your volume is a named one and not anonymous using the `volume ls` command:
    ```
    $ docker volume ls
    ```
    您应该得到如下输出:
    ```
    DRIVER            VOLUME NAME
    Local             db
    ```
8.  Remove the `db1` container with the `-v` option:
    ```
    $ docker container rm -fv db1
    ```
    该命令将返回容器的名称:
    ```
    db1
    ```
9.  List the volumes:
    ```
    $ docker volume ls
    ```
    该列表显示卷仍然存在，并且没有随容器一起移除:
    ```
    DRIVER          VOLUME NAME
    Local           db
    ```
10.  如同在*步骤 1* 中一样，创建一个名为`db2`的新容器，并挂载该卷，`db` :
    ```
    $docker container run --name db2 -v db:/var/lib/postgresql/data -e POSTGRES_PASSWORD=password -d postgres
    ```
11.  Run the `exec` command to execute the commands from `bash` and verify that the data persists even when `db1` is removed:
    ```
    $ docker container exec -it db2 psql -U postgres
    postgres=# SELECT * FROM PEOPLE;
    ```
    上述命令将产生如下输出:
    ![Figure 7.5: Output of the SELECT statement ](img/B15021_07_05.jpg)
    图 7.5:SELECT 语句的输出