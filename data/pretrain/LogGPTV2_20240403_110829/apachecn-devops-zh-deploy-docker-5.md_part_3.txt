Are you sure you want to continue? [y/N] y 
Deleted Images:
untagged: ubuntu@sha256:2b9285d3e340ae9d4297f83fed6a9563493945935fc787e98cc32a69f5687641
deleted: sha256:8b72bba4485f1004e8378bc6bc42775f8d4fb851c750c6c0329d3770b3a09086
deleted: sha256:f4744c6e9f1f2c5e4cfa52bab35e67231a76ede42889ab12f7b04a908f058551
Total reclaimed space: 188MB
```
If you are intent on cleaning any and all images not tied to containers, you can also run `docker image prune -a`. Given that this command is pretty destructive I would not recommend it in most cases other than maybe running it on Docker slave nodes in clusters on a nighty/weekly timer to reduce space usage.
这里需要注意的是，您可能已经注意到，删除对映像层的所有引用也会级联到子层。
最后但同样重要的是卷清理，可以使用`docker volume`命令进行管理。我建议您在执行此操作时格外小心，以避免删除您可能需要的数据，并且仅使用手动卷选择或`prune`:
```
$ docker volume ls
DRIVER              VOLUME NAME
local               database_volume
local               local_storage
local               swarm_test_database_volume
$ docker volume prune 
WARNING! This will remove all volumes not used by at least one container.
Are you sure you want to continue? [y/N] y 
Deleted Volumes:
local_storage
swarm_test_database_volume
database_volume
Total reclaimed space: 630.5MB
```
作为参考，在我写本章的那一周，我相当轻松地运行了 Docker，删除陈旧的容器、映像和卷已经减少了大约 3 GB 的文件系统使用。虽然这个数字大多是轶事，可能看起来不多，但在具有小实例硬盘的云节点上，以及在添加了持续集成的集群上，保留这些东西会让您比您可能意识到的更快地用完磁盘空间，因此，希望花一些时间手动完成这个过程，或者在`systemd`计时器或`crontab`之类的东西中为您的节点自动化这个过程。
# 持久存储
由于我们已经介绍了临时本地存储，现在我们可以考虑在容器死亡或移动时还有哪些其他选项来保证数据安全。正如我们之前所讨论的，如果一个节点或容器在提供服务时意外死亡(例如您的数据库)，而无法以某种方式将数据从容器保存到外部源，您很可能会丢失其中包含的部分或全部数据，这肯定是我们希望避免的。使用某种形式的容器外部存储您的数据，就像我们在前面几章中对装载卷所做的那样，我们可以开始使集群真正具有弹性，并使在其上运行的容器无状态。
通过使容器无状态化，您获得了信心，不用太担心哪个容器在哪个 Docker Engine 上运行，只要他们能够提取正确的映像并使用正确的参数运行它。如果你想一想，你甚至可能会注意到这种方法与线程有很多相似之处，但都是固步自封的。你可以把 Docker Engine 想象成一个虚拟的 CPU 核心，把每个服务想象成一个进程，把每个任务想象成一个线程。考虑到这一点，如果系统中的所有东西都是无状态的，那么您的集群实际上也是无状态的，因此，您必须利用容器之外的某种形式的数据存储来保证数据的安全。
Caution! Lately, I have noticed a number of sources online that have been recommending that you should keep data through massive replication of services with sharding and clustering of backing databases without persisting data on disk, relying on the cloud provider's distributed availability zones and trusting **Service Level Agreements** (**SLA**) to provide you with resilience and self-healing properties for your cluster. While I would agree that these clusters are somewhat resilient, without some type of permanent physical representation of your data on some type of a volume, you may hit cascade outages on your clusters that will chain before the data is replicated fully and risk losing data with no way to restore it. As a personal advice here, I would highly recommend that at least one node in your stateful services uses storage that is on physical media that is not liable to be wiped when issues arise (e.g. NAS, AWS EBS storage, and so on).
# 节点本地存储
容器外部的这种类型的存储特别适合于将数据从容器实例中分离出来，正如我们所期望的那样，但仅限于部署到同一节点的容器中的可用性。这种存储允许无状态的容器设置，并具有许多面向开发的用途，例如隔离构建和读取配置文件，但对于集群部署来说，这是非常有限的，因为在其他节点上运行的容器将无法访问在原始节点上创建的数据。无论是哪种情况，我们都将在这里介绍所有这些节点本地存储类型，因为大多数大型集群都使用节点本地存储和可重定位存储的某种组合。
# 绑定安装
我们以前见过这些，但也许我们不知道它们是什么。绑定挂载获取一个特定的文件或文件夹，并将其挂载到容器沙箱中的指定位置，中间用`:`隔开。到目前为止，我们使用的一般语法应该类似于以下内容:
```
$ docker run  \
             -v /path/on/host:/path/on/container \
             ...
```
这个功能的更新的 Docker 语法正在成为一个标准，其中`-v`和`--volume`现在被`--mount`取代，所以你也应该习惯这个语法。事实上，从现在开始，我们将尽可能多地使用这两种风格，以便您对这两种风格都感到舒适，但是在编写本书时，`--mount`还没有完全像替代方案那样起作用，因此根据什么有效，什么无效，期待一些互换。
In particular here, at this time, a simple bind mount volume with an absolute path source just does not work with `--mount` style which is almost all the examples we have used so far which is why we have not introduced this form earlier.
尽管如此，与`--volume`不同的是，`--mount`是一个由逗号分隔的参数列表`=`:
*   `type`:坐骑的类型，可以是`bind`、`volume`或者`tmpfs`。
*   `source`:坐骑的来源。
*   `target`:容器中将要装载源的位置的路径。
*   `readonly`:使挂载以只读方式挂载。
*   `volume-opt`:音量的额外选项。可以输入多次。
这是我们用于`--volume`的一个比较版本:
```
$ docker run  \
             --mount source=/path/on/host,target=/path/on/container \
             ...
```
# 只读绑定装载
另一种绑定挂载类型是只读绑定挂载，我们之前并没有真正介绍过。当装载到容器中的数据需要保持只读时，使用此配置，这在从主机将配置文件传递到多个容器中时非常有用。对于两种语法风格，这种挂载卷的形式看起来都有点像这样:
```
$ # Old-style
$ docker run  \
             -v /path/on/host:/path/on/container:ro \
             ...
$ # New-style
$ docker run  \
             --mount source=/path/on/host,target=/path/on/container,readonly \
             ...
```
如前所述，与常规装载相反，只读卷可以为我们提供的是从主机向容器传递配置文件。当 Docker Engine 主机的配置中有影响运行代码的容器(即存储或获取数据的路径前缀、我们在哪个主机上运行、机器从`/etc/resolv.conf`使用什么 DNS 解析器以及许多其他)时，通常会使用这种方法。因此，在大型部署中，它被广泛使用，预计会经常看到。
As a good rule of thumb, unless you explicitly need to write data to a volume, always mount it as read-only to the container. This will prevent the inadvertent opening of security holes from a compromised container spreading onto the other containers and the host itself.
# 命名卷
卷装载的另一种形式是使用命名卷。与绑定装载不同，命名数据卷(通常称为数据卷容器)提供了一种更方便的方法来引用卷，因为它们不依赖于对主机的任何了解。在封面下，它们的工作方式几乎与绑定安装完全相同，但由于使用更简单，它们更容易处理。此外，它们还有一个额外的好处，即能够在容器之间轻松共享，甚至可以由独立于主机的解决方案或完全独立的后端来管理。
Caution! If the named data volume is created by simply running the container, unlike bind-mounts that literally replace all content the container had at that mounted path, the named data volume will copy the content that the container image had at that location into the named data volume when the container launches. This difference is very subtle but can cause serious issues, as you might end up with unexpected content in the volume if you forget about this detail or assume that it behaves the same way as bind-mounts.
现在我们知道了什么是命名数据卷，让我们使用早期配置方法来创建一个(而不是通过直接运行容器来创建):
```
$ # Create our volume
$ docker volume create mongodb_data
mongodb_data
$ docker volume inspect mongodb_data
[
 {
 "Driver": "local",
 "Labels": {},
 "Mountpoint": "/var/lib/docker/volumes/mongodb_data/_data",
 "Name": "mongodb_data",
 "Options": {},
 "Scope": "local"
 }
]
$ # We can start our container now
$ # XXX: For non-bind-mounts, the new "--mount" option
$ #      works fine so we will use it here
$ docker run -d \
             --mount source=mongodb_data,target=/data/db \
             mongo:latest
888a8402d809174d25ac14ba77445c17ab5ed371483c1f38c918a22f3478f25a
$ # Did it work?
$ docker exec -it 888a8402 ls -la /data/db
total 200
drwxr-xr-x 4 mongodb mongodb  4096 Sep 16 14:10 .
drwxr-xr-x 4 root    root     4096 Sep 13 21:18 ..
-rw-r--r-- 1 mongodb mongodb    49 Sep 16 14:08 WiredTiger
-rw-r--r-- 1 mongodb mongodb    95 Sep 16 14:08 storage.bson
$ # Stop the container
$ docker stop 888a8402 && docker rm 888a8402
888a8402
888a8402
$ # What does our host's FS have in the
$ # volume storage? (path used is from docker inspect output)
$ sudo ls -la /var/lib/docker/volumes/mongodb_data/_data
total 72
drwxr-xr-x 4  999 docker 4096 Sep 16 09:08 .
drwxr-xr-x 3 root root   4096 Sep 16 09:03 ..
-rw-r--r-- 1  999 docker 4096 Sep 16 09:08 collection-0-6180071043564974707.wt
-rw-r--r-- 1  999 docker 4096 Sep 16 09:08 WiredTiger.wt
$ # Remove the new volume
$ docker volume rm mongodb_data
mongodb_data
```
在使用卷之前手动创建卷(使用`docker volume create`)通常是不必要的，但是在这里已经演示了这样做的长形式，但是我们可以作为第一步启动我们的容器，Docker 会自己创建卷:
```
$ # Verify that we don't have any volumes
$ docker volume ls
DRIVER              VOLUME NAME