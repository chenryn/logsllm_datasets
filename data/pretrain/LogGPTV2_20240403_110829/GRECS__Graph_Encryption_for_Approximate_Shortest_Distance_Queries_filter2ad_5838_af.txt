8.2
1.91
1.83
1.91
1.7
1.71
1.41
1.48
1.25
1.31
1.21
Table 3: A full performance summary for GraphEnc1, GraphEnc2, and GraphEnc3
a random value and its inverse value that are unique for
each node.
If two diﬀerent nodes collide, the product of
these values will be a random value, whereas if the same
node is mapped to the same entry the product will give 1.
More discussion about this technique will appear in the full
version of this work.
6.5.2 Query Time
(a) Query Time (in ms) using DO1
Figure 4: Collision probabilities for diﬀerent datasets
6.5 Performance of GraphEnc3
The GraphEnc3 columns in Table 3 show that GraphEnc3
is as eﬃcient as GraphEnc1 in terms of setup time and en-
crypted sketch size. Moreover, it achieves O(1) commu-
nication of 34B like GraphEnc2. Using a single machine,
GraphEnc3.Setup took less than 10 hours to encrypt as-
skitter, but like the other schemes, it is highly paralleliz-
able, and this could be brought down to an hour using 10
machines. We instantiated the hash function h using a cryp-
tographic keyed hash function HMAC-SHA-256.
6.5.1 Construction time & encrypted sketch size
Since the performance of GraphEnc3 depends only on the
size of the underlying sketches we investigate the relation-
ship between the performance of GraphEnc3.Setup and the
sampling and rank parameters of the Das Sarma et al. and
Cohen et al. oracles, respectively. We use values of σ and ρ
ranging from 3 to 6 in each case which resulted in maximum
sketch sizes S ranging from 43 to 80. Figure 5 and Figure 6
give the construction time and size overhead of an encrypted
sketch when using the Das Sarma et al. oracle and Cohen
et al. oracle respectively.
In each case, the construction time scales linearly when σ
and ρ increase. Also, unlike the previous schemes, GraphEnc3
produces encrypted sketches that are compact since it does
not use 0-encryptions for padding purposes.
(b) Query Time (in ms) DO2
Figure 7: Average Query time
We measured the time to query an encrypted graph as a
function of the oracle sampling/rank parameter. The aver-
age time at the server (taken over 10K random queries) is
given in Figure 7 for all our graphs and using both distance
oracles. In general, the results show that query time is fast
and practical. For as-skitter, the query time ranges from 6.1
to 10 milliseconds with the Das Sarma et al. oracle and from
5.6 to 10 milliseconds with the Cohen et al. oracle. Query
time is dominated by the homomorphic multiplication oper-
ation of the BGN scheme. But the number of multiplications
only depends on the number of common seeds from the two
encrypted sketches and, furthermore, these operations are
independent so they can be parallelized. We note that we
use mostly un-optimized implementations of all the underly-
ing primitives and we believe that a more careful implemen-
tation (e.g., faster pairing library) would reduce the query
time even further. We also measure the decryption time at
369123456ρAverage Query Time (in ms)As−skittercondmatenrongowallayoutube369123456ρAverage Query Time (in ms)As−skittercondmatenrongowallayoutube514Construction Time (in ms)
Size Overhead (in KB)
Figure 5: Construction time and size overhead (DO1)
Construction Time (in ms)
Size Overhead (in KB)
Figure 6: Construction time and size overhead (DO2)
the client. As pointed out previously, decryption time de-
pends on N which itself is a function of the diameter of the
graph. Since all our graphs have small diameter, client de-
cryption time—which itself consists of a BGN decryption—
was performed very eﬃciently.
In particular, the average
decryption time was less than 4 seconds and in most cases
the decryption ranged between 1 and 3 seconds.
Finally, we would like to mention that there is some ad-
ditional information that is leaked. In our construction, we
leak the parameter ρ and σ that are related to the size of
the encrypted graph and this may leak some information
about how “hard” it is to approximate the shortest distance
values for the particular graph at hand. Also, the time that
it takes to estimate the ﬁnal result at the client may reveal
the diameter of the graph, since it is related to the N and
the max distance in the sketches.
6.6 Approximation errors
We investigate the approximation errors produced by our
schemes. We generate 10K random queries and run the
QueryC,S protocol. For client decryption, we recover 2N −
log m and round it to its ﬂoor value. We used breadth-ﬁrst
search (BFS) to compute the exact distances between each
pair of nodes and we compare the approximate distance re-
turned by our construction to exact distances obtained with
BFS. We report the mean and the standard deviation of the
relative error for each dataset. We used both oracles to com-
pute the sketches. We present our results in Figure 8, which
shows that our approximations are quite good. Indeed, our
experiments show that our constructions could report bet-
ter approximations than the underlying oracles. This is due
to the fact that both oracles overestimate the distance so
subtracting log |I| can improve the approximation. For the
DO1
DO2
Figure 8: Mean of Estimated Error with Standard Deviation
Gowalla dataset, the mean of the relative error ranges from
0.36 to 0.13 when using the Das Sarma et al. oracle DO1.
For as-skitter, it ranges from 0.45 to 0.22. The mean error
and the variance decreases as we increase the size of each
sketch. In addition, we note that DO2 performs better in
0.00.20.40.63456σmean of relative error with sdas−skittercondmatenrongowallayoutube0.00.10.20.30.40.53456ρmean of relative error with sdas−skittercondmatenrongowallayoutube515all datasets. Also, half of the distances returned are exact
and most of the distances returned are at most 2 away from
the real distance. Figure 9 shows the histogram for the ab-
solute error when using DO2 with ρ = 3. All the other
datasets are very similar to them, so we omit them due to
space limitations.
Figure 9: Absolute error histogram DO2 and ρ = 3
We note that a very small number of distances were neg-
ative and we removed them from the experiments. Nega-
tive distances result from the intersection size |I| being very
large. Indeed, when the client decrypts the SWHE cipher-
text returned by the server, it recovers d ≥ mindist − log |I|.
If |I| is large and mindist is small (say, 1 or 2) then it is very
likely that d is negative. However, in the experiments, the
number of removed negative values were very small (i.e., 80
out of 10000 queries).
7 Conclusion
In this work, we described three graph encryption schemes
that support approximate shortest distance queries. Our
ﬁrst solution, GraphEnc1, is based only on symmetric-key
primitives and is computationally very eﬃcient while our
second solution, GraphEnc2, is based on somewhat homomor-
phic encryption and is optimal in terms of communication
complexity. Furthermore, our third solution, GraphEnc3,
achieves the “best of both worlds” and is computationally
very eﬃcient with optimal communication complexity. Our
schemes work with any sketched-based distance oracle. We
implemented our constructions and evaluated their eﬃciency
experimentally, showing that our constructions are practical
for large-scale graphs.
8 Acknowledgments
George Kollios and Xianrui Meng were partially supported
by NSF grants IIS-1320542 and CNS-1414119. Kobbi Nis-
sim was supported by NSF grant CNS-1237235, a Simons
Investigator grant, and ISF grant 276/12. The ﬁrst author
would like to thank Edith Cohen for clarifying the imple-
mentation of the all-distance sketches. The authors would
also like to thank the anonymous reviewers for their useful
comments.
9 References
[1] A. Aly, E. Cuvelier, S. Mawet, O. Pereira, and M. V.
Vyve. Securely solving simple combinatorial graph
problems. In Financial Cryptography, pages 239–257,
2013.
[2] M. Blanton, A. Steele, and M. Aliasgari.
Data-oblivious graph algorithms for secure
computation and outsourcing. In ASIACCS, pages
207–218, 2013.
[3] D. Boneh, E.-J. Goh, and K. Nissim. Evaluating 2-dnf
formulas on ciphertexts. In TCC 2005, pages 325–342,
2005.
[4] D. Cash, J. Jaeger, S. Jarecki, C. Jutla, H. Krawczyk,
M. Rosu, and M. Steiner. Dynamic searchable
encryption in very-large databases: Data structures
and implementation. In NDSS ’14, 2014.
[5] D. Cash, S. Jarecki, C. Jutla, H. Krawczyk, M. Rosu,
and M. Steiner. Highly-scalable searchable symmetric
encryption with support for boolean queries. In
CRYPTO ’13, pages 353–373, 2013.
[6] Y. Chang and M. Mitzenmacher. Privacy preserving
keyword searches on remote encrypted data. In ACNS
’05, pages 442–455. Springer, 2005.
[7] M. Chase and S. Kamara. Structured encryption and
controlled disclosure. In ASIACRYPT ’10, volume
6477, pages 577–594, 2010.
[8] S. Chechik. Approximate distance oracles with
constant query time. In STOC, pages 654–663, 2014.
[9] J. Cheng, A. W.-C. Fu, and J. Liu. K-isomorphism:
privacy preserving network publication against
structural attacks. In SIGMOD, pages 459–470, 2010.
[10] E. Cohen. All-distances sketches, revisited: Hip
estimators for massive graphs analysis. In PODS,
pages 88–99, 2014.
[11] E. Cohen, D. Delling, F. Fuchs, A. V. Goldberg,
M. Goldszmidt, and R. F. Werneck. Scalable similarity
estimation in social networks: closeness, node labels,
and random edge lengths. In COSN, pages 131–142,
2013.
[12] E. Cohen, E. Halperin, H. Kaplan, and U. Zwick.
Reachability and distance queries via 2-hop labels.
SIAM J. Comput., 32(5):1338–1355, 2003.
[13] R. Curtmola, J. Garay, S. Kamara, and R. Ostrovsky.
Searchable symmetric encryption: Improved
deﬁnitions and eﬃcient constructions. In CCS, pages
79–88. ACM, 2006.
[14] A. Das Sarma, S. Gollapudi, M. Najork, and
R. Panigrahy. A sketch-based distance oracle for
web-scale graphs. In WSDM, pages 401–410, 2010.
[15] C. Dwork, F. McSherry, K. Nissim, and A. Smith.
Calibrating noise to sensitivity in private data
analysis. In TCC, pages 265–284, 2006.
[16] J. Feigenbaum, Y. Ishai, T. Malkin, K. Nissim, M. J.
Strauss, and R. N. Wright. Secure multiparty
computation of approximations. ACM Transactions on
Algorithms, 2(3):435–472, 2006.
[17] J. Gao, J. X. Yu, R. Jin, J. Zhou, T. Wang, and
D. Yang. Neighborhood-privacy protected shortest
distance computing in cloud. In SIGMOD, pages
409–420, 2011.
[18] C. Gentry. Fully homomorphic encryption using ideal
lattices. In STOC ’09, pages 169–178. ACM Press,
2009.
[19] C. Gentry, S. Halevi, and V. Vaikuntanathan. A
simple bgn-type cryptosystem from lwe. In
EUROCRYPT, pages 506–522. Springer, 2010.
516[20] E.-J. Goh. Secure indexes. Technical Report 2003/216,
IACR ePrint Cryptography Archive, 2003. See
http://eprint.iacr.org/2003/216.
[21] O. Goldreich and R. Ostrovsky. Software protection
and simulation on oblivious RAMs. Journal of the
ACM, 43(3):431–473, 1996.
[22] S. Halevi, R. Krauthgamer, E. Kushilevitz, and
K. Nissim. Private approximation of np-hard
functions. In STOC, pages 550–559. ACM, 2001.
[23] W. Han, S. Lee, K. Park, J. Lee, M. Kim, J. Kim, and
H. Yu. Turbograph: a fast parallel graph engine
handling billion-scale graphs in a single PC. In KDD,
pages 77–85, 2013.
[24] S. Kamara and C. Papamanthou. Parallel and
dynamic searchable symmetric encryption. In FC ’13,
2013.
[25] S. Kamara, C. Papamanthou, and T. Roeder.
Dynamic searchable symmetric encryption. In CCS.
ACM Press, 2012.
[26] S. P. Kasiviswanathan, K. Nissim, S. Raskhodnikova,
and A. Smith. Analyzing graphs with node diﬀerential
privacy. In TCC, pages 457–476, 2013.
[27] J. Katz and Y. Lindell. Introduction to Modern
Cryptography. Chapman & Hall/CRC, 2008.
[28] K. Kurosawa and Y. Ohtaki. Uc-secure searchable
symmetric encryption. In Financial Cryptography and
Data Security (FC ’12), Lecture Notes in Computer
Science, pages 285–298. Springer, 2012.
[29] A. Kyrola and C. Guestrin. Graphchi-db: Simple
design for a scalable graph database system - on just a
PC. CoRR, abs/1403.0701, 2014.
[30] J. Leskovec, J. M. Kleinberg, and C. Faloutsos. Graphs
over time: densiﬁcation laws, shrinking diameters and
possible explanations. In KDD, pages 177–187, 2005.
[31] C. Liu, Y. Huang, E. Shi, J. Katz, and M. W. Hicks.
Automating eﬃcient ram-model secure computation.
In IEEE SP, pages 623–638, 2014.
[32] C. Liu, X. S. Wang, K. Nayak, Y. Huang, and E. Shi.
Oblivm: A programming framework for secure
computation. In IEEE SP, pages 359–376, 2015.
[33] K. Liu and E. Terzi. Towards identity anonymization
on graphs. In SIGMOD, pages 93–106, 2008.
[34] Y. Low, J. Gonzalez, A. Kyrola, D. Bickson,
C. Guestrin, and J. M. Hellerstein. Graphlab: A new
framework for parallel machine learning. In UAI,
pages 340–349, 2010.
[35] G. Malewicz, M. H. Austern, A. J. C. Bik, J. C.
Dehnert, I. Horn, N. Leiser, and G. Czajkowski.
Pregel: a system for large-scale graph processing. In
SIGMOD, pages 135–146, 2010.
[36] K. Mouratidis and M. L. Yiu. Shortest path
computation with no information leakage. PVLDB,
pages 692–703, 2012.
[37] M. Naveed, M. Prabhakaran, and C. Gunter. Dynamic
searchable encryption via blind storage. In Oakland
S& P, pages 639–654, 2014.
[38] M. Potamias, F. Bonchi, C. Castillo, and A. Gionis.
Fast shortest path distance estimation in large
networks. In CIKM, pages 867–876, 2009.
[39] N. Przulj, D. A. Wigle, and I. Jurisica. Functional
topology in a network of protein interactions.
Bioinformatics, 20(3):340–348, 2004.
[40] Z. Qi, Y. Xiao, B. Shao, and H. Wang. Toward a
distance oracle for billion-node graphs. In VLDB,
pages 61–72, 2013.
[41] R. Rivest, L. Adleman, and M. Dertouzos. On data
banks and privacy homomorphisms. In Foundations of
Secure Computation, pages 169–180, 1978.
[42] M. Sarwat, S. Elnikety, Y. He, and G. Kliot. Horton:
Online query execution engine for large distributed
graphs. In ICDE, pages 1289–1292, 2012.
[43] D. Shanks. Class number, a theory of factorization,
and genera. In 1969 Number Theory Institute, pages
415–440. Providence, R.I., 1971.
[44] B. Shao, H. Wang, and Y. Li. Trinity: a distributed
graph engine on a memory cloud. In SIGMOD, pages
505–516, 2013.
[45] E. Shen and T. Yu. Mining frequent graph patterns
with diﬀerential privacy. In KDD 2013, pages 545–553,
2013.
[46] D. Song, D. Wagner, and A. Perrig. Practical
techniques for searching on encrypted data. In
Oakland S & P, pages 44–55, 2000.
[47] E. Stefanov, C. Papamanthou, and E. Shi. Practical
dynamic searchable encryption with small leakage. In
NDSS, 2014.
[48] M. Thorup and U. Zwick. Approximate distance
oracles. Journal of the ACM, 52(1):1–24, Jan. 2005.
[49] X. S. Wang, K. Nayak, C. Liu, T. H. Chan, E. Shi,
E. Stefanov, and Y. Huang. Oblivious data structures.
In CCS, pages 215–226, 2014.
517