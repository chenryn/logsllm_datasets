and 𝐏𝐚𝐭(𝕂) = 𝐄𝐱𝐩(𝕂) because only encryption gives raise to
nontrivial patterns.
d) Computational evaluation: Throughout this paper we
let 𝜅 be the security parameter for cryptographic primitives in
the computational setting. For simplicity, all keys are assumed
to have length 𝜅. We use 𝗇𝖾𝗀𝗅(𝜅) to denote an arbitrary
negligible function of 𝜅, i.e., 𝗇𝖾𝗀𝗅(𝜅)  0 and suﬃciently large 𝜅. To instantiate our symbolic
framework, we assume the existence of a length-doubling
pseudorandom generator  and an IND-CPA secure symmetric
encryption scheme (, ) with keys of length 𝜅.
Deﬁnition 1 (Pseudorandom generator). A deterministic func-
tion  ∶ {0, 1}𝜅 → {0, 1}2𝜅 is a secure length-doubling
pseudorandom generator if it can be computed in polynomial
time and, for any PPT distinguisher  we have
||||| ≤ 𝗇𝖾𝗀𝗅(𝜅).
|||||
Pr
{(𝑠) = 1} − Pr
𝑟←{0,1}𝜅{(𝖦(𝑟)) = 1}
𝑠←{0,1}2𝜅
For any symmetric encryption scheme (, ) and 𝑏 ∈
{0, 1}, the left-right encryption oracle ,𝑏 ﬁrst samples a
uniformly random key 𝑘 ← {0, 1}𝜅
, and then it answers
any encryption query of the form (𝑚0, 𝑚1) with a ciphertext
(𝑘, 𝑚𝑏), where 𝑚0 and 𝑚1 are of the same length.
Deﬁnition 2 (IND-CPA secure symmetric encryption scheme).
A pair of PPT algorithms (, ) is an IND-CPA secure sym-
metric encryption scheme with key length 𝜅 if the followings
hold:
Pr{(𝑘, (𝑘, 𝑚)) = 𝑚} = 1;
∙ Correctness: For any 𝑘 ∈ {0, 1}𝜅 and 𝑚 ∈ {0, 1}∗,
∙ Security: For any PPT distinguisher ,
|||Pr{,0(1𝜅) = 1} − Pr{,1(1𝜅) = 1}
||| ≤ 𝗇𝖾𝗀𝗅(𝜅),
where the probability is over the random choices of .
We assume that the size of a cipher-text (𝑘, 𝑚) is a function
of the size of the input 𝑚, i.e., if two messages have the same
length, then their encryption also have the same length. We
do not make any special assumption on the encoding of pairs
(𝑒0, 𝑒1), except that 𝑒0 and 𝑒1 can be recovered from (𝑒0, 𝑒1),
and that the size of (𝑒0, 𝑒1) depends only on the size of 𝑒0 and
the size of 𝑒1. For any 𝑥 ∈ {0, 1}𝜅
, let 0(𝑥) and 1(𝑥) be the
ﬁrst and second halves of the bit-string (𝑥), so that (𝑥) =
0(𝑥)1(𝑥). Let 𝜎 be a function mapping 𝐁 to {0, 1}, and 𝐊
to {0, 1}𝜅
. We can extend 𝜎 to map any symbolic expression
to a distribution on bit-strings as follows:
𝜎(1) = 1,
𝜎(¬𝑏) = 1 − (𝜎(𝑏)),
𝜎(⦃𝑒⦄𝑘) = (𝜎(𝑘), 𝜎(𝑒)),
𝜎(0) = 0,
𝜎(𝖦0(𝑘)) = 0(𝜎(𝑘)),
𝜎(𝖦1(𝑘)) = 1(𝜎(𝑘)),
𝜎((𝑒0, 𝑒1)) = (𝜎(𝑒0), 𝜎(𝑒1)),
{
𝜎(𝜋[𝑏](𝑒0, 𝑒1)) =
(𝜎(𝑒0), 𝜎(𝑒1))
(𝜎(𝑒1), 𝜎(𝑒0))
if 𝜎(𝑏) = 0
if 𝜎(𝑏) = 1
distribution obtained by ﬁrst choosing a uniformly random key
and bit assignment 𝜎, and then picking a sample from 𝜎(𝑒).1
It is easy to check (by induction) that any two expressions of
the same shape evaluate to bit-strings of the same length.
Lemma 1. For any shape 𝑠, all strings in (cid:2)𝐄𝐱𝐩(𝑠)(cid:3) have the
same bit-length.
shape 𝑠 as the bit-length |𝑠| of any string in the set (cid:2)𝐄𝐱𝐩(𝑠)(cid:3),
Using this property, we can associate a bit-length to any
and extend the evaluation of expressions to evaluation of
patterns by deﬁning
𝜎(⦃𝑠⦄𝑘) = (𝜎(𝑘), 0|𝑠|).
e) Independence of pseudorandom keys: The following
deﬁnitions are given in [18] to provide a (computationally
sound) treatment of symbolic pseudorandom generators. For
any two keys 𝑘1, 𝑘2 ∈ 𝐊∗, if 𝑘2 ∈ 𝖦∗(𝑘1) then we say that 𝑘1
yields 𝑘2, and denote this as 𝑘1 ⪯ 𝑘2, meaning that 𝑘2 can be
obtained from 𝑘1 by repeated application of the pseudorandom
generator. By 𝑘1 ≺ 𝑘2 we mean that 𝑘1 ⪯ 𝑘2 and 𝑘1 ≠ 𝑘2.
We say that 𝑘1 and 𝑘2 are independent if neither 𝑘1 ⪯ 𝑘2 nor
𝑘2 ⪯ 𝑘1. The keys {𝑘1, … , 𝑘𝑛} form an independent set if 𝑘𝑖
and 𝑘𝑗 are independent for all 𝑖 ≠ 𝑗. The root of any set of keys
𝑆 is 𝐑𝐨𝐨𝐭𝐬(𝑆) = 𝑆⧵𝖦+(𝑆). Thus 𝑆 is independent if and only
if 𝑆 = 𝐑𝐨𝐨𝐭𝐬(𝑆). We recall the following theorem from [18]
which shows that independent symbolic keys correspond to
(computational) pseudorandom bit-strings.
Theorem 1 ([18, Theorem 1]). Let 𝑘1, … , 𝑘𝑛 ∈ 𝐊∗ be a se-
quence of symbolic keys. Then for any secure length-doubling
pseudorandom generator , the following two conditions are
equivalent:
1) The keys 𝑘1, … , 𝑘𝑛 are symbolically independent (i.e.,
𝑘𝑖 ⪯ 𝑘𝑗 if and only if 𝑖 = 𝑗).
2) The probability distribution (cid:2)𝑘1, … , 𝑘𝑛(cid:3) is compu-
tationally indistinguishable from (cid:2)𝑟1, … , 𝑟𝑛(cid:3) where
𝑟1, … , 𝑟𝑛 ∈ 𝐊 are distinct atomic key symbols.
f) Equivalence and Renaming of patterns: We consider
patterns up to simple operations that do not change the
probability distributions associated to them. First, let ≡ be the
smallest congruence relation on 𝐏𝐚𝐭 such that
¬0 ≡ 1
¬1 ≡ 0
¬(¬𝑏) ≡ 𝑏
𝜋[0](𝑒0, 𝑒1) ≡ (𝑒0, 𝑒1)
𝜋[1](𝑒0, 𝑒1) ≡ (𝑒1, 𝑒0)
𝜋[¬𝑏](𝑒0, 𝑒1) ≡ 𝜋[𝑏](𝑒1, 𝑒0)
for all 𝑒0, 𝑒1 ∈ 𝐏𝐚𝐭(𝑠), and 𝑏 ∈ 𝐏𝐚𝐭(𝔹). It should be clear
from the computational interpretation of 𝜋[𝑏] and ¬𝑏 that
for any two equivalent patterns 𝑒0 ≡ 𝑒1 and any assignment
𝜎, the probability distributions 𝜎(𝑒0) and 𝜎(𝑒1) are identical.
Similarly, we deﬁne a random bit renaming as a function
𝐵 ∶ 𝐁 → 𝐁
𝛼𝐵 ∶ 𝐁 → {𝑏, ¬𝑏 ∣ 𝑏 ∈ 𝐁} such that its projection 𝛼′
(deﬁned by the condition 𝛼𝐵(𝑏) ∈ {𝛼′
𝐵(𝑏), ¬𝛼′
𝐵(𝑏)}) is a
bijection on 𝐁. Random bit renamings are extended to patterns
𝛼𝐵 ∶ 𝐏𝐚𝐭(𝑠) → 𝐏𝐚𝐭(𝑠) in the obvious way, and it is easy to
check that for any pattern 𝑒 ∈ 𝐏𝐚𝐭(𝑠) and assignment 𝜎, the
distributions 𝜎(𝑒) and 𝜎(𝛼𝐵(𝑒)) are identical.
For keys, we consider a form of renaming that may change
the distribution associated to an expression or pattern, but in
a computationally indistinguishable way. Following [18], we
deﬁne a pseudorandom key renaming as a mapping 𝛼𝐾 ∶ 𝑆 →
𝐊∗ on 𝑆 ⊆ 𝐊∗ that preserves 𝖦, i.e.,
𝖦𝑤(𝑘1) = 𝑘2 ⟺ 𝖦𝑤(𝛼𝐾(𝑘1)) = 𝛼𝐾(𝑘2)
for all 𝑤 ∈ {0, 1}∗ and 𝑘1, 𝑘2 ∈ 𝑆. We restate some useful
properties of key renamings proved in [18]:
1) [18, Lemma 1] Any pseudorandom key renaming
𝛼𝐾 ∶ 𝑆 → 𝐊∗ is a bijection from 𝑆 to 𝛼𝐾(𝑆). Moreover,
𝑆 is independent if and only if 𝛼𝐾(𝑆) is independent.
2) [18, Lemma 2] Any pseudorandom key renaming 𝛼𝐾
with domain 𝑆 can be uniquely extended to a pseu-
dorandom key renaming ̄𝛼𝐾 with domain 𝖦∗(𝑆). In
particular, any pseudorandom key renaming can be
uniquely speciﬁed as an extension ̄𝛼𝐾 of a bijection
𝛼𝐾 ∶ 𝐴 → 𝐵 between independent sets 𝐴 = 𝐑𝐨𝐨𝐭𝐬(𝑆)
and 𝐵 = 𝛼𝐾(𝐴).
3) [18, Lemma 5] For any pseudorandom key renaming
𝛼𝐾 ∶ 𝑆 → 𝐊∗ and set of keys 𝐴 ⊆ 𝑆, 𝛼𝐾(𝐑𝐨𝐨𝐭𝐬(𝐴)) =
𝐑𝐨𝐨𝐭𝐬(𝛼𝐾(𝐴)).
Pseudorandom key renamings 𝛼𝐾 can also be extended to
patterns 𝛼𝐾 ∶ 𝐏𝐚𝐭(𝑠) → 𝐏𝐚𝐭(𝑠) in the obvious way, and while
the distributions 𝜎(𝑒) and 𝜎(𝛼𝐾(𝑒)) may, in general be diﬀerent,
they are always computationally indistinguishable.
The following lemma is an easy consequence of Theorem 1,
and, despite the fact that we use a larger class of expressions,
the proof is virtually identical to that of [18, Corollary 1].
Lemma 2. For any pattern 𝑒 and pseudorandom key renaming
𝛼𝐾, the distributions (cid:2)𝑒(cid:3) and (cid:2)𝛼𝐾(𝑒)(cid:3) are computationally
indistinguishable.
We refer to a pair of mappings 𝛼 = (𝛼𝐵, 𝛼𝐾) (consisting of
a random bit renaming 𝛼𝐵 and a pseudorandom key renaming
𝛼𝐾 ) as a pseudorandom renaming, or simply a renaming.
For any pattern 𝑒 ∈ 𝐏𝐚𝐭(𝑠), we write 𝛼(𝑒) = 𝛼𝐾(𝛼𝐵(𝑒)) =
𝛼𝐵(𝛼𝐾(𝑒)) for the result of applying the renamings to the
pattern 𝑒.2 Two patterns 𝑒0 and 𝑒1 are equivalent up to
renaming, denoted as 𝑒0 ≈ 𝑒1, if there exists a renaming
𝛼 = (𝛼𝐵, 𝛼𝐾) such that 𝑒0 ≡ 𝛼(𝑒1). When we want
to
emphasize the renaming 𝛼, we write 𝑒0 ≈𝛼 𝑒1. It follows
from the previous statements that patterns that are equivalent
up to renaming evaluate to probability distributions that are
computationally indistinguishable.
g) Pattern computation: Following [12], the mapping
from expressions to patterns is deﬁned by two functions:
∙ A function 𝐩(𝑒, 𝑆) mapping an expression (or pattern) 𝑒
and set of keys 𝑆 ⊆ 𝐊∗ to the pattern representing the
1Notice that, even for ﬁxed 𝜎 and 𝑒, the image 𝜎(𝑒) is a probability
distribution because it involves the use of a probabilistic encryption scheme  .
2Notice that the mappings 𝛼𝐵 and 𝛼𝐾 commute, so they can be applied in
any order.
151
𝐩(𝑏, 𝑆) = 𝑏
𝐩(𝑘, 𝑆) = 𝑘
𝐩(⦃𝑠⦄𝑘, 𝑆) =⦃𝑠⦄𝑘 𝐩(⦃𝑒⦄𝑘, 𝑆) =
𝐩((𝑒0, 𝑒1), 𝑆) = (𝐩(𝑒0, 𝑆), 𝐩(𝑒1, 𝑆))
𝐩(𝜋[𝑏](𝑒, 𝑒0), 𝑆) = 𝜋[𝑏](𝐩(𝑒, 𝑆), 𝐩(𝑒0, 𝑆))
if 𝑘 ∈ 𝑆
if 𝑘 ∉ 𝑆
{ ⦃𝐩(𝑒, 𝑆)⦄𝑘
⦃𝑠⦄𝑘
Fig. 1. The pattern function 𝐩 ∶ 𝐏𝐚𝐭 × ℘(𝐏𝐚𝐭(𝕂)) → 𝐏𝐚𝐭, deﬁned for all
𝑏 ∈ 𝐄𝐱𝐩(𝔹), 𝑘 ∈ 𝐄𝐱𝐩(𝕂), 𝑒, 𝑒0 ∈ 𝐄𝐱𝐩(𝑠), 𝑒1 ∈ 𝐄𝐱𝐩(𝑡)
𝐊𝐞𝐲𝐬(⦃𝑒⦄𝑘) = {𝑘} ∪ 𝐊𝐞𝐲𝐬(𝑒)
𝐊𝐞𝐲𝐬(⦃𝑠⦄𝑘) = {𝑘}
𝐊𝐞𝐲𝐬(𝑏) = ∅
𝐊𝐞𝐲𝐬(𝑘) = {𝑘}
𝐊𝐞𝐲𝐬((𝑒0, 𝑒1)) = 𝐊𝐞𝐲𝐬(𝑒0) ∪ 𝐊𝐞𝐲𝐬(𝑒1)
𝐏𝐚𝐫𝐭𝐬(⦃𝑒⦄𝑘) = {⦃𝑒⦄𝑘} ∪ 𝐏𝐚𝐫𝐭𝐬(𝑒)
𝐊𝐞𝐲𝐬(𝜋[𝑏](𝑒0, 𝑒1)) = 𝐊𝐞𝐲𝐬(𝑒0) ∪ 𝐊𝐞𝐲𝐬(𝑒1)
𝐏𝐚𝐫𝐭𝐬(⦃𝑠⦄𝑘) = {⦃𝑠⦄𝑘}
𝐏𝐚𝐫𝐭𝐬(𝑏) = {𝑏}
𝐏𝐚𝐫𝐭𝐬(𝑘) = {𝑘}
𝐏𝐚𝐫𝐭𝐬((𝑒0, 𝑒1)) = {(𝑒0, 𝑒1)} ∪ 𝐏𝐚𝐫𝐭𝐬(𝑒0) ∪ 𝐏𝐚𝐫𝐭𝐬(𝑒1)
𝐏𝐚𝐫𝐭𝐬(𝜋[𝑏](𝑒0, 𝑒1)) = {𝜋[𝑏](𝑒0, 𝑒1)} ∪ 𝐏𝐚𝐫𝐭𝐬((𝑒0, 𝑒1))
Fig. 2. The deﬁnition of the keys and parts of a sub-expression. As usual