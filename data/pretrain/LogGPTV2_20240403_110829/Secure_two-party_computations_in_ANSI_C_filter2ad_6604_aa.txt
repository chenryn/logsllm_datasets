title:Secure two-party computations in ANSI C
author:Andreas Holzer and
Martin Franz and
Stefan Katzenbeisser and
Helmut Veith
Secure Two-Party Computations in ANSI C
Andreas Holzer
TU Wien
Martin Franz
CrypTool Project
Helmut Veith
TU Wien
Stefan Katzenbeisser
TU Darmstadt & CASED
ABSTRACT
The practical application of Secure Two-Party Computation
is hindered by the diﬃculty to implement secure computa-
tion protocols. While recent work has proposed very simple
programming languages which can be used to specify se-
cure computations, it is still diﬃcult for practitioners to use
them, and cumbersome to translate existing source code into
this format. Similarly, the manual construction of two-party
computation protocols, in particular ones based on the ap-
proach of garbled circuits, is labor intensive and error-prone.
The central contribution of the current paper is a tool
which achieves Secure Two-Party Computation for ANSI C.
Our work is based on a combination of model checking tech-
niques and two-party computation based on garbled circuits.
Our key insight is a nonstandard use of the bit-precise model
checker CBMC which enables us to translate C programs
into equivalent Boolean circuits. To this end, we modify
the standard CBMC translation from programs into Boolean
formulas whose variables correspond to the memory bits ma-
nipulated by the program. As CBMC attempts to minimize
the size of the formulas, the circuits obtained by our tool
chain are also size eﬃcient; to improve the eﬃciency of the
garbled circuit evaluation, we perform optimizations on the
circuits. Experimental results with the new tool CBMC-GC
demonstrate the practical usefulness of our approach.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—
security and protection
General Terms
Security, Programming Languages
Keywords
Secure Computations, Privacy, Model Checking, Compilers
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
1.
INTRODUCTION
In the thirty years since Yao’s seminal paper [31], Se-
cure Multiparty Computation (SMC) and Secure Two-Party
Computation (STC) have emerged from purely theoretic
constructions to practical tools. In STC, two parties jointly
evaluate a function f over two inputs A and B provided
by the parties in such a way that either party keeps its in-
put unknown to the other; SMC is an analogous method
for multiple parties. STC and SMC enable the construction
of Privacy-Enhancing Technologies which protect sensitive
data during processing steps in untrusted environments.
The SMC/STC concept has been applied successfully to
secure electronic auctions (the most famous being the sugar-
beet auction of [9]), to conceal valuable biometric data while
allowing authentication [16], to analyze and cluster private
data on untrusted devices [18, 21] and to analyze medical
signals [3]. Technically, the implementations either use the
approach of “garbled circuits” introduced by Yao [31], where
f is transformed into a Boolean circuit Cf and encrypted in
a special way, or homomorphic encryption [15], where the in-
puts are encrypted and the operation f is directly performed
on encryptions. A series of recent publications including [20,
28] demonstrated that secure computations are feasible on
today’s standard computing equipment.
In this paper we focus on the practical implementation
of STC. Despite the versatile use and the obvious beneﬁts
of STC, it is currently rarely used in industrial large-scale
applications. The main reason for the slow adoption of STC
by practitioners is, besides performance problems for large-
scale problem settings, the lack of a good tool chain. The
implementation of a concrete new functionality f in STC is
still cumbersome and error-prone, and even more so with-
out a professional background in computer security. Indeed,
most of the publications cited above introduced new proto-
cols and primitives that were tailored towards improving the
eﬃciency of one speciﬁc application scenario (in most cases,
this included the design of eﬃcient Boolean circuits for spe-
ciﬁc complex functions which are needed in the construction
of garbled circuits).
During the last years we have witnessed the emergence
of a number of frameworks such as Fairplay [29], VIFF [1],
Tasty [19] and Sharemind [8] that allow to construct STC
applications in a generic fashion by specifying the desired
functionality f as a program in a tailor-made high-level lan-
guage. The source code is subsequently transformed into
code that runs on a special interpreter or in a dedicated run-
time environment. Unfortunately, all existing frameworks
are severely limited in their practical usability. Some frame-
772works, like the one by Huang et al. [20] or VMCrypt [28],
do only oﬀer basic (albeit highly optimized) libraries, which
leaves the burden on the programmer to securely realize the
desired complex functionality out of very basic blocks. For
example [20] does not even provide a re-usable implemen-
tation for an integer multiplication operation. Most exist-
ing frameworks aiming at automatizing the construction of
STC protocols [29, 1, 19] can only cope with fairly small
programs and come with their own dedicated syntax; fur-
thermore, code is meant to be used stand-alone and cannot
easily be integrated with existing code or libraries.
As new technology, STC reminds in certain aspects of
computer science in the ﬁfties: there were no general-purpose
programming languages, hardware and software were de-
signed together, and it was hard to transfer existing solu-
tions between hardware platforms. The picture changed dra-
matically when programming languages and compilers were
introduced. While the ﬁrst compilers did not produce very
eﬃcient code, they quickly reached the maturity to become
the most important commodity tools of a programmer.
In this paper we argue that the technology is available to
make the same step with STC:
• We view STC as a cryptographic analogue to a secure
hardware platform which gives STC-speciﬁc security
guarantees. For the working programmer, STC pro-
gramming should be similar as programming a (quite
slow) embedded processor or micro-controller.
• STC programming will become a normal programming
task in a standard programming language that has a
compiler and other productivity tools (e.g. for testing
and debugging).
• The programming language should be standardized.
This will allow developing and debugging STC pro-
grams on normal hardware before deploying it for STC.
Moreover, standardization will aid security and safety
certiﬁcations.
• The proposed approach will decouple cryptographic re-
search in STC from compiler research for the program-
ming language. The history of programming languages
gives ample support for this separation of concerns.
In this paper, we provide a signiﬁcant step towards this
direction. We present CBMC-GC, the ﬁrst compiler for se-
cure computation of ANSI C programs. CBMC-GC allows
a programmer to write the function f in the form of a C
program. Thus, the programmer can view STC as a dedi-
cated hardware platform, and compile standard C programs
to this platform. To achieve this functionality, the CBMC-
GC compiler transforms the C source code into an optimized
Boolean circuit, which can subsequently be implemented se-
curely utilizing the garbled circuit approach, for example by
re-using VMCrypt, the fastest currently available implemen-
tation of garbled circuits [28].
At ﬁrst sight, our choice of ANSI C may look surprising:
While C has a standardized ANSI semantics (cf. Sec. 3.2.6),
C is not the latest fashion in programming languages, it
does not achieve the platform independence of Java, and
it is also lacking advanced programming features such as
object orientation. While these objections are valid, they
are outweighed by technical and practical arguments in favor
of C:
• The C language is quite close to the underlying hard-
ware, and a competent programmer has good control
of the actual computation on the processor.
In par-
ticular, the programmer can control the memory and
CPU use of his program better than in other high level
languages. This proximity to the hardware platform
has made C the language of choice for areas like em-
bedded systems, device drivers and operating systems.
For similar reasons, hardware vendors are customarily
prototyping hardware components in C.
• As we demonstrate in this paper, this advantage of C
translates to STC. The sizes of the circuits that we ob-
tain from compiling C programs are surprisingly small.
Since the practicality of STC is heavily dependent on
the circuit size, we conclude that with current tech-
nology, C is a high level language very suitable for our
task. As the history of compiler technology shows, a
large number of optimizations can be made to improve
our translation further. Thus STC will proﬁt from ad-
vances in compiler technology.
• While the semantics of C may be less than pretty to
the eye of programming language theorists, the concep-
tual simplicity of C makes automated safety analysis
of C programs (e.g. by software model checking and
static analysis) much simpler than for languages such
as Java and C++. The last decade has seen dramatic
improvements in practical source code analysis tools
for C such as Microsoft’s SLAM [2], the abstract inter-
preter ASTREE [14] and the bit-precise model checker
CBMC [10]. Our compiler CBMC-GC will make use
of existing CBMC technology in an atypical way.
• The availability of software veriﬁcation tools for C has
the additional advantage that we can address correct-
ness of the program in a systematic way. We note that
the limited size of programs realizable in STC makes
them amenable to the most advanced safety analysis
tools.
• C and Java are the two linguae francae of computer
science: C still holds top positions in rankings of pro-
gramming language popularity1 and in the TIOBE
programming community index2. Many programmers
can write C programs at ease, and a large base of
legacy code is available. Working programmers are
supported by a multitude of productivity tools, e.g. for
debugging, testing and code generation.
Technically, CBMC-GC is based on the software archi-
tecture of the model checker CBMC by Clarke et al. [10],
which was designed to verify ANSI C source code. CBMC
transforms an input C program f , including assertions that
encode properties to be veriﬁed, into a Boolean formula Bf
which is then analyzed by a SAT solver. The formula Bf is
constructed in such a way that the Boolean variables corre-
spond to the memory bits manipulated by the program and
to the assertions in the program. CBMC is an example of
a bit-precise model checker, i.e., the formula Bf is encod-
ing the real life memory footprint of the analyzed program
on a speciﬁc hardware platform under ANSI C semantics.
1http://langpop.com
2http://tiobe.com/index.php/content/paperinfo/tpci
773(CBMC allows the user to conﬁgure the hardware platform,
e.g. the word size.) The construction of the formula Bf
moreover ensures that satisfying assignments found by the
SAT solver are program traces that violate assertions in the
program.
Thus, CBMC is essentially a compiler that translates C
source code into Boolean formulas. The code must meet
some requirements, detailed in Section 3, so that this trans-
formation is possible in an eﬃcient manner. In particular,
the program must terminate in a ﬁnite number of steps;
CBMC expects a number k as input which bounds the size
of program traces (and CBMC also determines if this bound
is suﬃcient). Our tool CBMC-GC inherits these constraints
from CBMC. In practice, these limitations are not overly
signiﬁcant, as every program with bounded runtime can in
principle be compiled to a circuit. To our knowledge, this
class includes all problems that were considered so far in the
context of STC. In fact, the same restrictions typically hold
for software used in real-time and embedded systems, which
needs to guarantee certain response times.
The architecture of our tool CBMC-GC builds on the core
engine of CBMC. We modify CBMC to transform a C pro-
gram into a Boolean circuit (rather than a formula). While
CBMC optimizes the resulting formulas for easy solvabil-
ity using a SAT solver, we changed the CBMC engine such
that it outputs circuits optimized for STC performance, i.e.,
for garbled circuit evaluation. (Note that our tool CBMC-
GC does not require a SAT solver.) The circuit obtained by
CBMC-GC is subsequently ready for use in a garbled-circuit
based STC framework. In our implementation, for simplic-
ity we use the STC framework of [20], which provides se-
curity in the semi-honest attacker model. Nevertheless, the
circuit generation process is completely decoupled from its
evaluation; by choosing a diﬀerent underlying STC frame-
work that provides security against malicious adversaries,
one can support the malicious case as well.
We evaluated the performance of CBMC-GC on a num-
ber of tests that are typically applied to assess the eﬃ-
ciency of STC; furthermore, we show the applicability of
CBMC-GC to the problem of secure two-party computa-
tions with private functions (i.e., the case where the func-
tionality to be computed is only available to one party). In
particular, we consider the size of the circuits produced by
CBMC-GC and evaluate their runtime when used in com-
bination with the above mentioned highly eﬃcient STC im-
plementation [20]. We show that CBMC-GC allows STC
on ANSI C programs to be deployed with good practical
performance. Furthermore, we conclude that separating the
problems of garbled circuit evaluation and eﬃcient auto-
matic circuit generation from a standard high-level program-
ming language is a promising strand of research, enabling the
practical uptake of STC.
2. RELATED WORK
2.1 Secure Two-Party Computation
Garbled Circuits (GC) have been introduced in [32] as
a generic solution for the problem of securely evaluating a
function. GC enable two parties to evaluate a Boolean cir-
cuit on their respective private inputs in a way that the
computation reveals only the output of the function. In a
nutshell, the function to be evaluated is represented by a
Boolean circuit, where the input wires of the circuit repre-
sent the inputs of the respective parties. One party ﬁrst
garbles the circuit by assigning two random keys to each
wire and encrypting the operation table of each gate: assum-
ing that the gate has in-degree two, each entry in the table
is replaced by the corresponding key and encrypted twice,
namely with the keys that correspond to the truth values
on the input wires, and all entries of the gate are permuted.
Finally, the party hands the garbled circuit including the
keys corresponding to his input values to the other party,
who ﬁrst obtains the keys to her input values using Oblivi-
ous Transfer and subsequently evaluates the garbled circuit.
For details as well as a security proof we refer to [27].
Since the pioneering work of [32] garbled circuits have
been frequently improved. Currently the two most advanced
implementations of the garbled circuit approach are [20, 28].
The authors use the GC construction proposed in [26] com-
bined with optimizations in [24, 30]. This allows XOR-gates
to be evaluated at essentially no cost and each garbled circuit
table consists of three entries instead of four. Furthermore,
the implementation is tailored towards eﬃciency; thus, even
circuits consisting of several million gates can be handled.
Several eﬀorts have been made by diﬀerent authors to im-
prove the practical uptake of STC. Fairplay [29] was the ﬁrst
framework which allows to implement generic STC in a high
level language. Later this was generalized to FairplayMP, a
framework for secure multiparty computation [4]. Programs
for Fairplay have to be speciﬁed in a high-level programming
language, the Secure Function Deﬁnition Language (SFDL),
which shares some similarity to the VHDL language, allow-
ing basic support for integers and instructions for Boolean
operations. The Fairplay compiler translates these programs
into a garbled circuit, which is executed in a special runtime
environment written in Java. Although SFDL 2.1 supports
data types like structs and arrays, it lacks support for un-
signed integer data types, enumerations, unions, and point-
ers. ANSI C also provides a richer set of statements like
while-loops or recursive function calls. CBMC-GC strives
to support these features (for limitations see Section 3.2.6).
Tasty [19] was the ﬁrst tool that allowed to combine SMC
techniques from homomorphic encryption with garbled cir-
cuits. Programs are speciﬁed in a Python-like programming
language, which allows for basic data types and arithmetic
operations.
So far, none of the aforementioned tools provides the de-
sired properties as mentioned in the introduction: A wide
distribution and acceptance of the programming language;
existing code which can be reused; books and tutorials which
make the programming language broadly accessible; a large
number of existing tools, e.g. for testing or veriﬁcation.
2.2 Model Checking
The last decade has seen a revolution in practical safety
analysis tools for software. Due to its simplicity and its
relevance for safety-critical industries, C has become the
primary target for these tools. The majority of the tools
is based on overapproximation, e.g. by abstract interpreta-
tion [14] or by predicate abstraction and CEGAR abstrac-
tion reﬁnement [2, 5, 13]. The alternative to overapproxima-
tion is bit-precise reasoning – the work relevant to our paper.
In bit-precise reasoning, the program semantics is precisely
modeled in a suitable logical formalism, most importantly
in Boolean logic. While overapproximating model checkers
often model e.g. integer variables by unbounded (mathemat-
774ical) integer values, a bit-precise model checker will typically
model them as a bit vector with real-life overﬂow behavior.
The most well-known bit-precise model checkers are Kroen-
ing’s tool CBMC [10] and NEC’s tool DiVer [17].
For a given bound k, the model checker CBMC transforms
the program into a Boolean constraint whose solutions are
program traces of size at most k which violate one or more
assertions in the program. These solutions are then deter-
mined by a Boolean SAT solver. Importantly, this transfor-
mation identiﬁes the bits manipulated during program exe-
cution with Boolean variables in the formula. Notwithstand-
ing the high theoretical complexity of SAT solving, modern
SAT solvers [7] can often solve veriﬁcation constraints with
millions of clauses. The Boolean encoding also enables the
SAT solver to determine whether the bound k was suﬃcient,
i.e., whether the program terminates after k steps. Note that
in common terminology, CBMC can also be classiﬁed as an
instance of SAT-based model checking and bounded model
checking [6].
The important property of CBMC for our purposes is its
capability to generate bit-precise Boolean descriptions of the
program execution from the source code. This capability
forms the basis for the compiler which we describe in the
next section.
3. FROM C PROGRAMS TO CIRCUITS
In this section, we describe our compiler, which takes C
source code and generates a circuit representation by us-
ing techniques adapted from the software model checker
CBMC [10, 11].
As explained above, CBMC reads a C program f contain-
ing assertions along with a bound k, and generates a Boolean
constraint Bf in CNF such that the satisfying assignments of
Cf encode program traces of size at most k that violate the
assertions. Our goal is to reuse the functionality of CBMC
to generate a Boolean circuit Cf which is bit-equivalent to
the C program. We will ﬁrst describe the functionality of
CBMC, and then explain our modiﬁcations.
3.1 CBMC Architecture
We will now summarize the workﬂow inside the bit-precise
bounded model checker CBMC.
On input of an ANSI C program f and a bound k, CBMC
ﬁrst translates the program into a cycle-free GOTO pro-