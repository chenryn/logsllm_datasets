1.  编辑`chapter14/yaml/gitlab-trust.yaml`，用集群运行的服务器 IP 替换`192-168-2-140`。我的集群在`192.168.2.114`上，我换成`192-168-2-114`。将`chapter14/yaml/gitlab-trust.yaml`添加到您的集群中。这个文件告诉 OpenUnison 为 SSO 与 GitLab 建立信任。
2.  编辑`chapter14/yaml/gitlab-url.yaml`，用集群运行的服务器 IP 替换`192-168-2-140`。我的集群在`192.168.2.114`上，我换成`192-168-2-114`。将`chapter14/yaml/gitlab-url.yaml`添加到您的集群中。这个文件告诉 OpenUnison 为 GitLab 的门户添加一个徽章。
3.  以 root 用户身份登录 GitLab。转到您用户的个人资料区域，点击**访问令牌**。对于**名称**，使用`openunison`。将**过期**留空，检查原料药范围。点击**创建个人访问令牌**。将令牌复制并粘贴到记事本或其他地方。一旦离开此屏幕，您将无法再次检索此令牌。
4.  编辑`openunison`命名空间中的`orchestra-secrets-source`机密。添加两个键:
    ```
    apiVersion: v1
    data:
      K8S_DB_SECRET: aW0gYSBzZWNyZXQ=
      OU_JDBC_PASSWORD: c3RhcnR0MTIz
      SMTP_PASSWORD: ""
      unisonKeystorePassword: aW0gYSBzZWNyZXQ=
     gitlab: c2VjcmV0  GITLAB_TOKEN: S7CCuqHfpw3a6GmAqEYg
    kind: Secret
    ```
记住对值进行 Base64 编码。`gitlab`密钥与我们`oidc-provider`机密中的机密相匹配。`GITLAB_TOKEN`将被 OpenUnison 用来与 GitLab 交互，以提供我们在入职工作流程中定义的项目和小组。配置了 GitLab，接下来就是 ArgoCD 了。
## 整合 ArgoCD
ArgoCD 内置了对 OpenID Connect 的支持。不过，在部署中没有为我们配置:
1.  Edit the `argocd-cm` `ConfigMap` in the `argocd` namespace, adding the `url` and `oidc.config` keys, as shown in the following cde block. Make sure to update `192-168-2-140` to match your cluster's IP address. Mine is `192.168.2.114`, so I'll be using `192-168-2-114`:
    ```
    apiVersion: v1
    data:
      url: https://argocd.apps.192-168-2-140.nip.io
      oidc.config: |-
        name: OpenUnison
        issuer: https://k8sou.apps.192-168-2-140.nip.io/auth/idp/k8sIdp
        clientID: argocd
        requestedScopes: ["openid", "profile", "email", "groups"]
    ```
    重要说明
    我们没有用 ArgoCD 指定客户端机密，因为它既有 CLI 又有 web 组件。就像使用应用编程接口服务器一样，担心需要驻留在用户已知的每个工作站上的客户端机密是没有意义的。在这种情况下，它不会增加任何安全性，因此我们将跳过它。
2.  编辑`chapter14/yaml/argocd-trust.yaml`，将`192-168-2-140`替换为集群运行的服务器 IP。我的集群在`192.168.2.114`上，我换成`192-168-2-114`。将`chapter14/yaml/argocd-trust.yaml`添加到您的集群中。这个文件告诉 OpenUnison 为 SSO 与 ArgoCD 建立信任。
3.  编辑`chapter14/yaml/argocd-url.yaml`，用集群运行的服务器 IP 替换`192-168-2-140`。我的集群在`192.168.2.114`上，我换成`192-168-2-114`。将`chapter14/yaml/argocd-url.yaml`添加到您的集群中。这个文件告诉 OpenUnison 给 ArgoCD 的入口添加一个徽章。
4.  虽然大多数 ArgoCD 是由 Kubernetes 定制资源控制的，但也有一些 ArgoCD 特定的 API。为了使用这些 API，我们需要创建一个服务帐户。我们需要创建这个帐户并为其生成一个密钥:
    ```
    $ kubectl patch configmap argocd-cm -n argocd -p '{"data":{"accounts.openunison":"apiKey","accounts.openunison.enabled":"true"}}'
    $ argocd account generate-token --account openunison
    ```
5.  获取`generate-token`命令的输出，并将其添加为`openunison`命名空间中`orchestra-secrets-source` `Secret`的`ARGOCD_TOKEN`键。别忘了对它进行 Base64 编码。
6.  最后，我们想创建 ArgoCD RBAC 规则，这样我们就可以控制谁可以访问网络用户界面和命令行界面。编辑`argocd-rbac-cm` `ConfigMap`并添加以下键。第一个密钥将让我们的系统管理员和我们的应用编程接口密钥在 ArgoCD 中做任何事情。第二个键将所有没有被`policy.csv`映射到角色的用户映射到一个不存在的角色，这样他们就不能访问任何东西:
    ```
    data:  
      policy.csv: |- 
        g, k8s-cluster-administrators,role:admin
        g, openunison,role:admin
      policy.default: role:none
    ```
集成 ArgoCD 后，实现世界自动化的最后一步是更新我们的 OpenUnison 定制资源！
## 更新开放协调
OpenUnison 已经部署。使用内置的开发人员工作流启动自动化门户的最后一步是更新`orchestra` OpenUnison 定制资源。按照下面的代码块更新映像。添加`non_secret_data`，替换`hosts`以匹配您集群的 IP。最后，将新创建的机密添加到操作员需要导入的机密列表中:
```
.
.
.
  image: docker.io/tremolosecurity/openunison-k8s-definitive-guide:latest
.
.
.
  non_secret_data:
.
.
.
  - name: GITLAB_URL
 value: https://gitlab.apps.192-168-2-140.nip.io
 - name: GITLAB_SSH_HOST
 value: gitlab-gitlab-shell.gitlab.svc.cluster.local
 - name: GITLAB_WEBHOOK_SUFFIX
 value: gitlab.192-168-2-140.nip.io
 - name: ARGOCD_URL
 value: https://argocd.apps.192-168-2-140.nip.io
 - name: GITLAB_WRITE_SSH_HOST
 value: gitlab-write-shell.gitlab.svc.cluster.local
.
.
.
  secret_data:
  - K8S_DB_SECRET
  - unisonKeystorePassword
  - SMTP_PASSWORD
  - OU_JDBC_PASSWORD
  - GITLAB_TOKEN
 - ARGOCD_TOKEN
```
几分钟后，自动化门户将开始运行。当你登录的时候，你会看到 GitLab 和 ArgoCD 的徽章。您还可以点击**新应用**开始根据我们的工作流程部署应用！您可以将此作为设计您自己的自动化平台的起点，或者将其用作创建集成您平台上的工具所需的各种对象的地图。
# 总结
进入这一章，我们没有花太多时间部署应用。我们想以对应用部署和自动化的简单介绍来结束本文。我们了解了管道，它们是如何构建的，以及它们如何在 Kubernetes 集群上运行。我们探索了通过部署 GitLab 进行源代码控制来构建平台的过程，构建了一个 Tekton 管道在 GitOps 模型中工作，并使用 ArgoCD 使 GitOps 模型成为现实。最后，我们用 OpenUnison 实现了整个过程的自动化。
使用本章中的信息可以为您提供如何构建自己的平台的方向。使用本章中的实际示例将帮助您将组织中的需求映射到自动化基础架构所需的技术。我们在这一章搭建的平台还远远没有完成。它应该给你一张地图来规划你自己的符合你需求的平台。
最后，谢谢大家。感谢您加入我们构建 Kubernetes 集群的冒险。我们希望你能像我们创作这本书一样，从阅读和构建例子中获得乐趣！
# 问题
1.  True or false: A pipeline must be implemented to make Kubernetes work.
    A.真实的
    B.错误的
2.  What are the minimum steps of a pipeline?
    A.构建、扫描、测试和部署
    B.构建和部署
    C.扫描、测试、部署和构建
    D.以上都不是
3.  What is GitOps?
    A.运行 gitlab on kubernetes
    B.使用 Git 作为操作配置的权威来源
    C.愚蠢的营销术语
    D.新创企业的产品
4.  What is the standard for writing pipelines?
    A.所有管道都应该用 YAML 书写。
    B.没有标准；每个项目和供应商都有自己的实现。
    C.JSON 结合 Go。
    D.生锈。
5.  How do you deploy a new instance of a container in a GitOps model?
    A.使用`kubectl`更新命名空间中的`Deployment`或`StatefulSet`。
    B.更新 Git 中的`Deployment`或`StatefulSet`清单，让 GitOps 控制器更新 Kubernetes 中的对象。
    C.提交运营部门人员需要执行的票证。
    D.以上都不是。
6.  True or false: All objects in GitOps needs to be stored in your Git repository.
    A.真实的
    B.错误的
7.  True or false: Your way is the right way to automate your processes.
    A.真实的
    B.错误的*