title:Inside dropbox: understanding personal cloud storage services
author:Idilio Drago and
Marco Mellia and
Maurizio M. Munafò and
Anna Sperotto and
Ramin Sadre and
Aiko Pras
Understanding Personal Cloud Storage Services
Inside Dropbox:
Idilio Drago
University of Twente
PI:EMAIL
Anna Sperotto
University of Twente
PI:EMAIL
Marco Mellia
Politecnico di Torino
PI:EMAIL
Ramin Sadre
University of Twente
PI:EMAIL
Maurizio M. Munafò
Politecnico di Torino
PI:EMAIL
Aiko Pras
University of Twente
PI:EMAIL
ABSTRACT
Personal cloud storage services are gaining popularity. With
a rush of providers to enter the market and an increasing of-
fer of cheap storage space, it is to be expected that cloud
storage will soon generate a high amount of Internet traﬃc.
Very little is known about the architecture and the perfor-
mance of such systems, and the workload they have to face.
This understanding is essential for designing eﬃcient cloud
storage systems and predicting their impact on the network.
This paper presents a characterization of Dropbox, the
leading solution in personal cloud storage in our datasets.
By means of passive measurements, we analyze data from
four vantage points in Europe, collected during 42 consecu-
tive days. Our contributions are threefold: Firstly, we are
the ﬁrst to study Dropbox, which we show to be the most
widely-used cloud storage system, already accounting for a
volume equivalent to around one third of the YouTube traﬃc
at campus networks on some days. Secondly, we character-
ize the workload users in diﬀerent environments generate to
the system, highlighting how this reﬂects on network traf-
ﬁc. Lastly, our results show possible performance bottle-
necks caused by both the current system architecture and
the storage protocol. This is exacerbated for users connected
far from storage data-centers.
All measurements used in our analyses are publicly avail-
able in anonymized form at the SimpleWeb trace repository:
http://traces.simpleweb.org/dropbox/
Categories and Subject Descriptors
C.2 [Computer-Communication Networks]: Miscella-
neous; C.4 [Performance of Systems]: Measurement
Techniques
General Terms
Measurement, Performance
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not  made  or  distributed  for  profit  or  commercial  advantage  and  that 
copies  bear  this  notice  and  the  full  citation  on  the  first  page.  To  copy 
otherwise,  or  republish,  to  post  on  servers  or  to  redistribute  to  lists, 
requires prior specific permission and/or a fee. 
IMC’12, November 14–16, 2012, Boston, Massachusetts, USA. 
Copyright 2012 ACM  978-1-4503-1705-4/12/11...$15.00. 
Keywords
Dropbox, Cloud Storage, Internet Measurement.
1.
INTRODUCTION
Recent years have seen the introduction of cloud-based
services [18], oﬀering people and enterprises computing and
storage capacity on remote data-centers and abstracting
away the complexity of hardware management. We witness
a gold rush to oﬀer on-line storage capabilities, with players
like Microsoft, Google and Amazon entering the market at
the end of April 2012. They face a crowded scenario against
popular solutions like Box.com, UbuntuOne, and Dropbox.
The latter, active since 2007, currently counts over 50 mil-
lion users, uploading more than 500 million ﬁles daily.1
It is thus not surprising that cloud storage has gained
increasing momentum within research community. Some
works explicitly consider system architecture design [12],
while others focus on security and privacy issues concern-
ing the storage of user data [19]. Considering commer-
cial oﬀers,
little is known, with most players providing
proprietary solutions and not willing to share information.
Some studies present a comparison among diﬀerent storage
providers [13, 17]: by running benchmarks, they focus on
the user achieved performance, but miss the characteriza-
tion of the typical usage of a cloud service, and the impact of
user and system behavior on personal storage applications.
In this paper, we provide a characterization of cloud-
based storage systems. We analyze traﬃc collected from
two university campuses and two Points of Presence (POP)
in a large Internet Service Provider (ISP) for 42 consecutive
days. We ﬁrst devise a methodology for monitoring cloud
storage traﬃc, which, being based on TLS encryption, is
not straightforward to be understood. We then focus on
Dropbox, which we show to be the most widely-used cloud
storage system in our datasets. Dropbox already accounts
for about 100GB of daily traﬃc in one of the monitored net-
works – i.e., 4% of the total traﬃc or around one third of the
YouTube traﬃc at the same network. We focus ﬁrst on the
service performance characterization, highlighting possible
bottlenecks and suggesting countermeasures. Then, we de-
tail user habits, thus providing an extensive characterization
of the workload the system has to face.
To be best of our knowledge, we are the ﬁrst to provide
an analysis of Dropbox usage on the Internet. The authors
1http://www.dropbox.com/news
481of [11] compare Dropbox, Mozy, Carbonite and CrashPlan,
but only a simplistic active experiment is provided to assess
them.
In [16], the possibility of unauthorized data access
and the security implications of storing data in Dropbox are
analyzed. We follow a similar methodology to dissect the
Dropbox protocol, but focus on a completely diﬀerent topic.
Considering storage systems in general, [8, 9] study security
and privacy implications of the deployment of data dedu-
plication – the mechanism in place in Dropbox for avoiding
the storage of duplicate data. Similarly, [1] presents a per-
formance analysis of the Amazon Web Services (AWS) in
general, but does not provide insights into personal storage.
Finally, several works characterize popular services, such as
social networks [7, 15] or YouTube [3, 6]. Our work goes in
a similar direction, shedding light on Dropbox and possibly
other related systems. Our main ﬁndings are:
• We already see a signiﬁcant amount of traﬃc related
to personal cloud storage, especially on campus networks,
where people with more technical knowledge are found. We
expect these systems to become popular also at home, where
penetration is already above 6%.
• We highlight that Dropbox performance is mainly driven
by the distance between clients and storage data-centers.
In addition, short data transfer sizes coupled with a per-
chunk acknowledgment mechanism impair transfer through-
put, which is as little as 530kbits/s on average. A bundling
scheme, delayed acknowledgments, or a ﬁner placement of
storage servers could be adopted to improve performance.
• Considering home users’ behavior, four groups are clear:
7% of people only upload data; around 26% only download,
and up to 37% of people do both. The remaining 30% aban-
don their clients running, seldom exchanging ﬁles.
• Interestingly, one of the most appreciated features of
Dropbox is the simpliﬁed ability to share content: 30% of
home users have more than one linked device, and 70% share
at least one folder. At campuses, the number of shared fold-
ers increases, with 40% of users sharing more than 5 folders.
Our ﬁndings show that personal cloud storage applica-
tions are data hungry, and user behavior deeply aﬀects their
network requirements. We believe that our results are use-
ful for both the research community and ISPs to understand
and to anticipate the impact of massive adoption of such so-
lutions. Similarly, our analysis of the Dropbox performance
is a reference for those designing protocols and provisioning
data-centers for similar services, with valuable lessons about
possible bottlenecks introduced by some design decisions.
The remainder of this paper is organized as follows: Sec. 2
provides insight into the Dropbox architecture. Sec. 3 de-
scribes our data collection and compares the popularity of
well-known cloud-based storage systems. Sec. 4 presents a
characterization of Dropbox performance. User habits and
the generated workload are presented in Sec. 5. While those
sections mostly focus on the usage of the Dropbox client
software, Sec. 6 discusses the less popular Web interface. Fi-
nally, Sec. 7 concludes this paper, and Appendix A provides
some additional characteristics of Dropbox storage traﬃc.
2. DROPBOX OVERVIEW
2.1 The Dropbox Client
The Dropbox native client is implemented mostly in
Python, using third-party libraries such as librsync. The
application is available for Microsoft Windows, Apple OS X
Table 1: Domain names used by diﬀerent Dropbox
services. Numeric suﬃxes are replaced by a X letter.
sub-domain
client-lb/clientX Dropbox
Dropbox
notifyX
Dropbox
api
Dropbox
www
Dropbox
d
Amazon
dl
Amazon
dl-clientX
Amazon
dl-debugX
Amazon
dl-web
Amazon
api-content
Data-center Description
Meta-data
Notiﬁcations
API control
Web servers
Event logs
Direct links
Client storage
Back-traces
Web storage
API Storage
and Linux.2 The basic object in the system is a chunk of
data with size of up to 4MB. Files larger than that are split
into several chunks, each treated as an independent object.
Each chunk is identiﬁed by a SHA256 hash value, which is
part of meta-data descriptions of ﬁles. Dropbox reduces the
amount of exchanged data by using delta encoding when
transmitting chunks. It also keeps locally in each device a
database of meta-data information (updated via incremen-
tal updates) and compresses chunks before submitting them.
In addition, the client oﬀers the user the ability to control
the maximum download and upload speed.
Two major components can be identiﬁed in the Dropbox
architecture: the control and the data storage servers. The
former are under direct control of Dropbox Inc., while Ama-
zon Elastic Compute Cloud (EC2) and Simple Storage Ser-
vice (S3) are used as storage servers.
In both cases, sub-
domains of dropbox.com are used for identifying the diﬀer-
ent parts of the service oﬀering a speciﬁc functionality, as
detailed in Tab. 1. HTTPS is used to access all services,
except the notiﬁcation service which runs over HTTP.
2.2 Understanding Dropbox Internals
To characterize the usage of the service from passive mea-
surements, we ﬁrst gained an understanding of the Dropbox
client protocol. We performed several active experiments
to observe what information is exchanged after a particu-
lar operation. For instance, among others, we documented
the traﬃc generated when adding or removing ﬁles on local
folders, when downloading new ﬁles and when creating new
folders. During our data collection, Dropbox client version
1.2.52 was being distributed as the stable version.3
Since most client communications are encrypted with
TLS, and no description about the protocol is provided by
Dropbox, we set up a local testbed, in which a Linux PC
running the Dropbox client was instructed to use a Squid
proxy server under our control. On the latter, the mod-
ule SSL-bump4 was used to terminate SSL connections and
save decrypted traﬃc ﬂows. The memory area where the
Dropbox application stores trusted certiﬁcate authorities
was modiﬁed at run-time to replace the original Dropbox
Inc. certiﬁcate by the self-signed one signing the proxy
server. By means of this setup, we were able to observe
and to understand the Dropbox client communication.
2Mobile device applications access Dropbox on demand us-
ing APIs; those are not considered in this work.
3http://www.dropbox.com/release_notes
4http://wiki.squid-cache.org/Features/SslBump
482c
o
m
m
i
t
_
b
a
t
c
h
[...]
[
h
a
s
h
e
s
]
]
s
e
h
s
a
h
[
s
k
c
o
l
b
_
d
e
e
n
r
e
g
i
s
t
e
l
i
r
s
t
_
h
o
s
t
k
o
s
s
t
t
o
o
r
r
e
e
k
o
k
o
c
o
m
m
i
t
_
b
a
t
c
h
[
h
a
s
h
e
s
]
]
[
s
k
c
o
l
b
_
d
e
e
n
l
i
s
t
c
l
o
s
e
_
c
h
a
n
g
e
s
e
t
k
o
Dropbox
client/client-lb
Amazon
dl-client
Dropbox
client/client-lb
Each device linked to Dropbox has a unique identiﬁer
(host int). Unique identiﬁers (called namespaces) are also
used for each shared folder. The client identiﬁer is sent
in notiﬁcation requests, together with the current list of
namespaces. Devices and number of shared folders can,
therefore, be identiﬁed in network traces by passively watch-
ing notiﬁcation ﬂows. Finally, diﬀerent devices belong-
ing to a single user can be inferred as well, by comparing
namespace lists.
Figure 1: An example of the Dropbox protocol.
2.3.2 Meta-data Information Protocol
For instance, Fig. 1 illustrates the messages we observed
while committing a batch of chunks. After registering with
the Dropbox control center via a clientX.dropbox.com
server, the list command retrieves meta-data updates. As
soon as new ﬁles are locally added, a commit batch com-
mand (on client-lb.dropbox.com) submits meta-data in-
formation. This can trigger store operations, performed di-
rectly with Amazon servers (on dl-clientX.dropbox.com).
Each chunk store operation is acknowledged by one OK
message. As we will see in Sec. 4, this acknowledgment
mechanism might originate performance bottlenecks. Fi-
nally, as chunks are successfully submitted, the client ex-
changes messages with the central Dropbox servers (again
on client-lb.dropbox.com) to conclude the transactions.
Note that these messages committing transactions might oc-
cur in parallel with newer store operations.
A complete description of the Dropbox protocols is outside
the scope of this paper. We, however, exploit this knowledge
to tag the passively observed TCP ﬂows with the likely com-
mands executed by the client, even if we have no access to
the content of the (encrypted) connections. In the follow-
ing, we describe the protocols used to exchange data with
the Dropbox control servers and with the storage servers at
Amazon.
2.3 Client Control Flows
The Dropbox client exchanges control information mostly
with servers managed directly by Dropbox Inc. We iden-
tiﬁed three sub-groups of control servers: (i) Notiﬁcation,
(ii) meta-data administration, and (iii) system-log servers.
System-log servers collect run-time information about the
clients,
including exception back-traces (via Amazon, on
dl-debug.dropbox.com), and other event logs possibly use-
ful for system optimization (on d.dropbox.com). Since ﬂows
to those servers are not directly related to the usage of the
system and do not carry much data, they have not been con-
sidered further. In the following we describe the key TCP
ﬂows to the meta-data and notiﬁcation servers.
2.3.1 Notiﬁcation Protocol
The Dropbox client keeps continuously opened a TCP
connection to a notiﬁcation server (notifyX.dropbox.com),
used for receiving information about changes performed else-
where. In contrast to other traﬃc, notiﬁcation connections
are not encrypted. Delayed HTTP responses are used to im-
plement a push mechanism: a notiﬁcation request is sent
by the local client asking for eventual changes; the server
response is received periodically about 60 seconds later in
case of no change; after receiving it, the client immediately
sends a new request. Changes on the central storage are
instead advertised as soon as they are performed.
Authentication and ﬁle meta-data administration mes-
sages are exchanged with a separate set of
servers,
(client-lb.dropbox.com and/or clientX.dropbox.com).
Typically, synchronization transactions start with messages
to meta-data servers, followed by a batch of either store
or retrieve operations through Amazon servers. As data
chunks are successfully exchanged, the client sends mes-
sages to meta-data servers to conclude the transactions (see
Fig. 1). Due to an aggressive TCP connection timeout han-
dling, several short TLS connections to meta-data servers
can be observed during this procedure.
Server responses to client messages can include general
control parameters. For instance, our experiments in the
testbed reveal that the current version of the protocol limits
the number of chunks to be transferred to at most 100 per
transaction. That is, if more than 100 chunks need to be
exchanged, the operation is split into several batches, each
of at most 100 chunks. Such parameters shape the traﬃc
produced by the client, as analysed in Sec. 4.