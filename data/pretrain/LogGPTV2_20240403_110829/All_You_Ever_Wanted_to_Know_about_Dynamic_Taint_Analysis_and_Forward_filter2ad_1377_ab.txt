rect support for functions or dynamically generated
code. This could slightly enhance our analyses (e.g.,
allowing us to reason about function arguments), while
requiring only small changes to our semantics and
analyses. Figure 4 presents the CALL and RET rules
that need to be added to the semantics of SIMPIL to
provide support for call-by-value function calls. Note
that several new contexts were introduced to support
functions, including a stack context (λ) to store return
addresses, a scope context (ζ) to store function-local
variable contexts and a map from function names to
addresses (φ).
In a similar manner we can enhance SIMPIL to support
µ, ∆ (cid:96) 2 ⇓ 2 CONST
20 is input
µ, ∆ (cid:96) get input(·) ⇓ 20 INPUT
µ, ∆ (cid:96) 2*get input(·) ⇓ 40
v(cid:48) = 2 ∗ 20
Σ, µ, ∆, pc, x := 2*get input(·) (cid:32) Σ, µ, ∆(cid:48), pc + 1, ι
BINOP ∆(cid:48) = ∆[x ← 40]
ι = Σ[pc + 1]
ASSIGN
Figure 3: Evaluation of the program in Listing 1.
dynamically generated code. We redeﬁne the abstract
machine transition to allow updates to the program
context (Σ (cid:32) Σ(cid:48)) and provide the rules for adding
generated code to Σ. An example GENCODE rule is
shown in Figure 4.
III. DYNAMIC TAINT ANALYSIS
The purpose of dynamic taint analysis is to track in-
formation ﬂow between sources and sinks. Any program
value whose computation depends on data derived from a
taint source is considered tainted (denoted T). Any other
value is considered untainted (denoted F). A taint policy
P determines exactly how taint ﬂows as a program ex-
ecutes, what sorts of operations introduce new taint, and
what checks are performed on tainted values. While the
speciﬁcs of the taint policy may differ depending upon the
taint analysis application, e.g., taint tracking policies for
unpacking malware may be different than attack detection,
the fundamental concepts stay the same.
Two types of errors can occur in dynamic taint analysis.
First, dynamic taint analysis can mark a value as tainted
when it is not derived from a taint source. We say that such
a value is overtainted. For example, in an attack detection
application overtainting will
in reporting
an attack when no attack occurred. Second, dynamic taint
analysis can miss the information ﬂow from a source to a
sink, which we call undertainting. In the attack detection
scenario, undertainting means the system missed a real
attack. A dynamic taint analysis system is precise if no
undertainting or overtainting occurs.
typically result
In this section we ﬁrst describe how dynamic taint analysis
is implemented by monitoring the execution of a program.
We then describe various taint analysis policies and trade-
offs. Finally, we describe important issues and caveats that
often result in dynamic taint analysis systems that overtaint,
undertaint, or both.
A. Dynamic Taint Analysis Semantics
Since dynamic taint analysis is performed on code at
runtime, it is natural to express dynamic taint analysis in
terms of the operational semantics of the language. Taint
policy actions, whether it be taint propagation, introduction,
or checking, are added to the operational semantics rules.
To keep track of the taint status of each program value, we
redeﬁne values in our language to be tuples of the form
(cid:104)v, τ(cid:105), where v is a value in the initial language, and τ is
taint t
value
τ∆
τµ
::= T | F
(cid:104)v, t(cid:105)
::=
::= Maps variables to taint status
::= Maps addresses to taint status
Table II: Additional changes to SIMPIL to enable dynamic
taint analysis.
the taint status of v. A summary of the necessary changes
to SIMPIL is provided in Table II.
Figure 5 shows how a taint analysis policy P is added to
SIMPIL. The semantics show where the taint policy is used;
the semantics are independent of the policy itself. In order
to support taint policies, the semantics introduce two new
contexts: τ∆ and τµ. τ∆ keeps track of the taint status of
scalar variables. τµ keeps track of the taint status of memory
cells. τ∆ and τµ are initialized so that all values are marked
untainted. Together, τ∆ and τµ keep the taint status for all
variables and memory cells, and are used to derive the taint
status for all values during execution.
B. Dynamic Taint Policies
A taint policy speciﬁes three properties: how new taint is
introduced to a program, how taint propagates as instructions
execute, and how taint is checked during execution.
Taint Introduction. Taint introduction rules specify how
taint is introduced into a system. The typical convention is
to initialize all variables, memory cells, etc. as untainted.
In SIMPIL, we only have a single source of user input:
the get input(·) call. In a real implementation, get input(·)
represents values returned from a system call, return values
from a library call, etc. A taint policy will also typically
distinguish between different input sources. For example, an
internet-facing network input source may always introduce
taint, while a ﬁle descriptor that reads from a trusted
conﬁguration ﬁle may not [2, 50, 65]. Further, speciﬁc taint
sources can be tracked independently, e.g., τ∆ can map not
just the bit indicating taint status, but also the source.
Taint Propagation. Taint propagation rules specify the taint
status for data derived from tainted or untainted operands.
Since taint is a bit, propositional logic is usually used to
express the propagation policy, e.g., t1 ∨ t2 indicates the
result is tainted if t1 is tainted or t2 is tainted.
µ, ∆ (cid:96) e1 ⇓ v1
. . . µ, ∆ (cid:96) ei ⇓ vi ∆(cid:48) = ∆[x1 ← v1, . . . , xi ← vi] pc(cid:48) = φ[f]
λ, Σ, φ, µ, ∆, ζ, pc, call f(e1,. . . ,ei) (cid:32) (pc + 1) :: λ, Σ, φ, µ, ∆(cid:48), ∆ :: ζ, pc(cid:48), ι
ι = Σ[pc(cid:48)]
CALL
pc(cid:48) :: λ(cid:48), Σ, φ, µ, ∆, ∆(cid:48) :: ζ(cid:48), pc, return (cid:32) λ(cid:48), Σ, φ, µ, ∆(cid:48), ζ(cid:48), pc(cid:48), ι
ι = Σ[pc(cid:48)]
RET
µ, ∆ (cid:96) e ⇓ v
v (cid:54)∈ dom(Σ)
s = disassemble(µ[v]) Σ(cid:48) = Σ[v ← s]
Σ, µ, ∆, pc, jmp e (cid:32) Σ(cid:48), µ, ∆, v, ι
ι = Σ(cid:48)[v]
GENCODE
Figure 4: Example operational semantics for adding support for call-by-value function calls and dynamically generated code.
Policy Check
Component
Pinput(·), Pbincheck(·), Pmemcheck(·) T
F
Pconst()
Punop(t), Passign(t)
t
t1 ∨ t2
Pbinop(t1, t2)
Pmem(ta, tv)
tv
¬ta
Pcondcheck(te, ta)
¬ta
Pgotocheck(ta)
Table III: A typical tainted jump target policy for detecting
attacks. A dot (·) denotes an argument that is ignored. A
taint status is converted to a boolean value in the natural
way, e.g., T maps to true, and F maps to false.
Taint Checking. Taint status values are often used to
determine the runtime behavior of a program, e.g., an attack
detector may halt execution if a jump target address is
tainted. In SIMPIL, we perform checking by adding the
policy to the premise of the operational semantics. For
instance, the T-GOTO rule uses the Pgotocheck(t) policy.
Pgotocheck(t) returns T if it is safe to perform a jump
operation when the target address has taint value t, and
returns F otherwise. If F is returned, the premise for the
rule is not met and the machine terminates abnormally
(signifying an exception).
C. A Typical Taint Policy
A prototypical application of dynamic taint analysis is
attack detection. Table III shows a typical attack detection
policy which we call the tainted jump policy. In order to be
concrete when discussing the challenges and opportunities in
taint analysis, we often contrast implementation choices with
respect to this policy. We stress that although the policy is
designed to detect attacks, other applications of taint analysis
are typically very similar.
The goal of the tainted jump policy is to protect a
potentially vulnerable program from control ﬂow hijacking
attacks. The main idea in the policy is that an input-derived
value will never overwrite a control-ﬂow value such as a
return address or function pointer. A control ﬂow exploit,
however, will overwrite jump targets (e.g., return addresses)
with input-derived values. The tainted jump policy ensures
safety against such attacks by making sure tainted jump
targets are never used.
The policy introduces taint into the system by marking
all values returned by get input(·) as tainted. Taint is then
propagated through the program in a straightforward manner,
e.g., the result of a binary operation is tainted if either
operand is tainted, an assigned variable is tainted if the right-
hand side value is tainted, and so on.
Example 3. Table IV shows the taint calculations at each
step of the execution for the following program:
1
2
3
x := 2∗ g e t
y := 5 + x
goto y
i n p u t (· )
On line 1, the executing program receives input, assumed
to be 20, and multiplies by 2. Since all input is marked as
tainted, 2 ∗ get input(·) is also tainted via T-BINOP, and
x is marked in τ∆ as tainted via T-ASSIGN. On line 2,
x (tainted) is added to y (untainted). Since one operand is
tainted, y is marked as tainted in τ∆. On line 3, the program
jumps to y. Since y is tainted, the T-GOTO premise for P
is not satisﬁed, and the machine halts abnormally.
Different Policies for Different Applications. Different
applications of taint analysis can use different policy de-
cisions. As we will see in the next section, the typical
taint policy described in Table III is not appropriate for
all application domains, since it does not consider whether
memory addresses are tainted. Thus,
it may miss some
attacks. We discuss alternatives to this policy in the next
section.
D. Dynamic Taint Analysis Challenges and Opportunities
There are several challenges to using dynamic taint
analysis correctly, including:
• Tainted Addresses. Distinguishing between memory
addresses and cells is not always appropriate.
• Undertainting. Dynamic taint analysis does not prop-
erly handle some types of information ﬂow.
v is input from src
τµ, τ∆, µ, ∆ (cid:96) get input(src) ⇓ (cid:104)v, Pinput(src)(cid:105) T-INPUT
τµ, τ∆, µ, ∆ (cid:96) var ⇓ (cid:104)∆[var], τ∆[var](cid:105) T-VAR
τµ, τ∆, µ, ∆ (cid:96) v ⇓ (cid:104)v, Pconst()(cid:105) T-CONST
τµ, τ∆, µ, ∆ (cid:96) e ⇓ (cid:104)v, t(cid:105)
τµ, τ∆, µ, ∆ (cid:96) load e ⇓ (cid:104)µ[v], Pmem(t, τµ[v])(cid:105) T-LOAD
τµ, τ∆, µ, ∆ (cid:96) e ⇓ (cid:104)v, t(cid:105)
τµ, τ∆, µ, ∆ (cid:96) ♦ue ⇓ (cid:104)♦uv, Punop(t)(cid:105) T-UNOP
τµ, τ∆, µ, ∆ (cid:96) e1 ⇓ (cid:104)v1, t1(cid:105)
τµ, τ∆, µ, ∆ (cid:96) e2 ⇓ (cid:104)v2, t2(cid:105) Pbincheck(t1, t2, v1, v2, ♦b) = T
τµ, τ∆, µ, ∆ (cid:96) e1♦be2 ⇓ (cid:104)v1♦bv2, Pbinop(t1, t2)(cid:105)
T-BINOP
τµ, τ∆, µ, ∆ (cid:96) e ⇓ (cid:104)v, t(cid:105) ∆(cid:48) = ∆[var ← v]
τµ, τ∆, Σ, µ, ∆, pc, var := e (cid:32) τµ, τ(cid:48)
∆ = τ∆[var ← Passign(t)]
τ(cid:48)
∆, Σ, µ, ∆(cid:48), pc + 1, ι
ι = Σ[pc + 1]
T-ASSIGN
τµ, τ∆, µ, ∆ (cid:96) e1 ⇓ (cid:104)v1, t1(cid:105)
ι = Σ[pc + 1] Pmemcheck(t1, t2) = T
τµ, τ∆, µ, ∆ (cid:96) e2 ⇓ (cid:104)v2, t2(cid:105) µ(cid:48) = µ[v1 ← v2]
µ = τµ[v1 ← Pmem(t1, t2)]
τ(cid:48)
τµ, τ∆, Σ, µ, ∆, pc, store(e1, e2) (cid:32) τ(cid:48)
τµ, τ∆, µ, ∆ (cid:96) e ⇓ (cid:104)1, t(cid:105)
µ, τ∆, Σ, µ(cid:48), ∆, pc + 1, ι
ι = Σ[pc + 1]
τµ, τ∆, Σ, µ, ∆, pc, assert(e) (cid:32) τµ, τ∆, Σ, µ, ∆, pc + 1, ι
T-ASSERT
T-STORE
τµ, τ∆, µ, ∆ (cid:96) e ⇓ (cid:104)1, t1(cid:105)
τµ, τ∆, µ, ∆ (cid:96) e1 ⇓ (cid:104)v1, t2(cid:105) Pcondcheck(t1, t2) = T ι = Σ[v1]
τµ, τ∆, Σ, µ, ∆, pc, if e then goto e1 else goto e2 (cid:32) τµ, τ∆, Σ, µ, ∆, v1, ι
τµ, τ∆, µ, ∆ (cid:96) e ⇓ (cid:104)0, t1(cid:105)
τµ, τ∆, µ, ∆ (cid:96) e2 ⇓ (cid:104)v2, t2(cid:105) Pcondcheck(t1, t2) = T ι = Σ[v2]
τµ, τ∆, Σ, µ, ∆, pc, if e then goto e1 else goto e2 (cid:32) τµ, τ∆, Σ, µ, ∆, v2, ι
T-TCOND
T-FCOND
τµ, τ∆, µ, ∆ (cid:96) e ⇓ (cid:104)v1, t(cid:105) Pgotocheck(t) = T ι = Σ[v1]
τµ, τ∆, Σ, µ, ∆, pc, goto e (cid:32) τµ, τ∆, Σ, µ, ∆, v1, ι
T-GOTO
Figure 5: Modiﬁed operational semantics of SIMPIL that enforce a taint policy P. T denotes true.
Line #
1
2
3
Statement
start
x := 2*get input(·)
y := 5 + x
goto y
∆
{}
{x → 40}
τ∆
{}
{x → T}
{x → 40, y → 45}
{x → 40, y → 45}
{x → T, y → T}
{x → T, y → T}
Rule
T-ASSIGN
T-ASSIGN
T-GOTO
pc
1
2
3
error
Table IV: Taint calculations for example program. T denotes tainted.
• Overtainting. Deciding when to introduce taint is often
easier than deciding when to remove taint.
• Time of Detection vs. Time of Attack. When used
for attack detection, dynamic taint analysis may raise
an alert too late.
Table V summarizes the alternate policies proposed for
addressing some of these challenges in particular scenarios.
In the remainder of the section we discuss the advantages
and disadvantages of these policy choices, and detail com-
mon implementation details and pitfalls.
Tainted Addresses. Memory operations involve two values:
the address of the memory cell being referenced, and the
value stored in that cell. The tainted jump policy in Ta-
ble III independently tracks the taint status of addresses and
memory cells separately. This policy is akin to the idea that
the taint status of a pointer (in this case, an address) and
the object pointed to (in this case, the memory cell) are
independent [32].
Example 4. Given the tainted jump policy, consider the
Substitutions
Pmem(ta, tv) ≡ tv
Pmem(ta, tv) ≡ ta ∨ tv
Policy
Tainted Value
Tainted Addresses
Control Dependent Not possible
Tainted Overﬂow
Pbincheck(t1, t2, v1, v2, ♦b) ≡ (t1 ∨ t2) ⇒ ¬overﬂows(v1♦bv2)
Table V: Alternate taint analysis policy choices.
following program:
1
2
3
i n p u t (· )
x := g e t
y := load ( z + x )
goto y
The user provides input to the program that is used as
a table index. The result of the table lookup is then used
as the target address for a jump. Assuming addresses are
of some ﬁxed-width (say 32-bits), the attacker can pick an
appropriate value of x to address any memory cell she
wishes. As a result, the attacker can jump to any value
in memory that is untainted. In many programs this would
allow the user to violate the intended control ﬂow of the
program, thus creating a security violation.
The tainted jump policy applied to the above program