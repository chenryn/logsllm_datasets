    rdi = 165
    t = f1(10,itum,rsi,rdi)
    rsi = 403
    rdi = 171
    t = f1(11,itum,rsi,rdi)
    rsi = 449
    rdi = 179
    t = f1(13,itum,rsi,rdi)
    rsi = 548
    rdi = 196
    t = f1(17,itum,rsi,rdi)
    rsi = 578
    rdi = 230
    #0 1 2 3 4 5 6 7 10 11 13 17
    import copy
    for i in xrange(18,100):
        itum1 = copy.deepcopy(itum)
        rsi1 = rsi
        rdi1 = rdi
        t = f1(i,itum1,rsi1,rdi1)
        if t:
           print i
           print 'rsi = %s'% t[0]
           print 'rdi = %s'% t[1]
###  lost in the deep(part 2)
那么在第二问的条件下，即rdi=1050。我们必须使用算法才能找到最优解，事实证明这个解只有一个。
把结构体链表整理成类似邻接表的形式如下。观察可以发现是一个树结构。再根据上面的算法描述可以知道，算法要做的事就是求一个子树，并且子树任一节点的父节点也要包含在子树中，使得各个节点的的权重rsi,rdi满足一定的条件即可。由于我们打的是CTF，考虑的更多的是写代码的时间复杂度（雾），所以这里直接就可以用回溯的形式来实现算法（大概20s可以跑出来）。
    {0: [1, 2, 3, 4],
     1: [5, 6, 7],
     2: [],
     3: [8, 9, 10, 11, 12],
     4: [13, 14],
     5: [15, 16],
     6: [],
     7: [17, 18, 19, 20],
     8: [21, 22, 23],
     9: [],
     10: [24, 25, 26],
     11: [27, 28, 29],
     12: [],
     13: [],
     14: [],
     15: [30],
     16: [31, 32, 33, 34, 35],
     17: [36],
     18: [37],
     19: [],
     20: [38],
     21: [39, 40, 41],
     22: [42, 43],
     23: [44],
     24: [],
     25: [],
     26: [45],
     27: [46, 47, 48],
     28: [49],
     29: [],
     30: [],
     31: [50, 51],
     32: [52, 53, 54, 55],
     33: [],
     34: [],
     35: [56, 57, 58, 59],
     36: [],
     37: [],
     38: [60, 61],
     39: [62],
     40: [63],
     41: [64],
     42: [],
     43: [65],
     44: [66],
     45: [67],
     46: [],
     47: [68],
     48: [69],
     49: [],
     50: [],
     51: [70],
     52: [],
     53: [71],
     54: [],
     55: [72, 73],
     56: [74, 75, 76],
     57: [],
     58: [77, 78],
     59: [],
     60: [79],
     61: [],
     62: [],
     63: [80],
     64: [],
     65: [],
     66: [81],
     67: [],
     68: [],
     69: [82, 83],
     70: [84],
     71: [85],
     72: [],
     73: [86],
     74: [87],
     75: [88, 89, 90],
     76: [91],
     77: [92],
     78: [],
     79: [],
     80: [],
     81: [93],
     82: [],
     83: [],
     84: [],
     85: [],
     86: [],
     87: [],
     88: [],
     89: [94],
     90: [95],
     91: [96, 97],
     92: [],
     93: [98, 99],
     94: [],
     95: [],
     96: [],
     97: [],
     98: [],
     99: []}
**solution 1**
    rsi = 0
    rdi = 0
    cand = []
    ncand = []
    # 把大数替换为下标，效果一样，方便遍历
    n_table=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
    n_itum = {44: [84, 17, 0, 23], 69: [12, 7, 0, 48], 9: [43, 17, 0, 3], 33: [19, 29, 0, 16], 4: [2, 18, 0, 0], 93: [11, 135, 0, 81], 31: [71, 2, 0, 16], 49: [36, 11, 0, 28], 0: [82, 6, 0, 0], 17: [30, 34, 0, 7], 32: [49, 8, 0, 16], 14: [75, 50, 0, 4], 37: [65, 22, 0, 18], 91: [59, 15, 0, 76], 77: [84, 28, 0, 58], 16: [6, 2, 0, 5], 48: [74, 40, 0, 27], 87: [64, 24, 0, 74], 84: [99, 5, 0, 70], 81: [49, 37, 0, 66], 3: [15, 10, 0, 0], 67: [29, 22, 0, 45], 34: [15, 29, 0, 16], 90: [66, 25, 0, 75], 12: [47, 34, 0, 3], 94: [70, 33, 0, 89], 30: [98, 44, 0, 15], 15: [54, 41, 0, 5], 60: [40, 36, 0, 38], 85: [45, 44, 0, 71], 2: [53, 40, 0, 0], 66: [8, 43, 0, 44], 89: [86, 12, 0, 75], 28: [54, 8, 0, 11], 98: [398, 68, 0, 93], 92: [19, 42, 0, 77], 79: [99, 37, 0, 60], 54: [54, 28, 0, 32], 27: [82, 32, 0, 11], 39: [14, 27, 0, 21], 71: [9, 34, 0, 53], 11: [46, 8, 0, 3], 19: [79, 11, 0, 7], 38: [13, 20, 0, 20], 22: [25, 1, 0, 8], 8: [1, 36, 0, 3], 42: [71, 13, 0, 22], 6: [54, 22, 0, 1], 83: [93, 46, 0, 69], 70: [73, 41, 0, 51], 5: [51, 22, 0, 1], 35: [61, 50, 0, 16], 55: [59, 28, 0, 32], 68: [20, 21, 0, 47], 80: [97, 8, 0, 63], 20: [44, 23, 0, 7], 45: [26, 4, 0, 26], 29: [71, 48, 0, 11], 13: [99, 17, 0, 4], 57: [4, 26, 0, 35], 36: [100, 5, 0, 17], 59: [35, 3, 0, 35], 82: [22, 10, 0, 69], 23: [82, 48, 0, 8], 47: [19, 17, 0, 27], 97: [82, 1, 0, 91], 63: [85, 34, 0, 40], 7: [14, 16, 0, 1], 46: [11, 34, 0, 27], 25: [16, 3, 0, 10], 86: [86, 3, 0, 73], 18: [56, 33, 0, 7], 58: [16, 25, 0, 35], 24: [4, 2, 0, 10], 51: [45, 50, 0, 31], 88: [91, 11, 0, 75], 56: [99, 6, 0, 35], 73: [86, 39, 0, 55], 40: [72, 28, 0, 21], 41: [46, 45, 0, 21], 75: [24, 27, 0, 56], 50: [79, 32, 0, 31], 1: [46, 31, 0, 0], 65: [31, 43, 0, 43], 10: [86, 6, 0, 3], 72: [100, 36, 0, 55], 76: [19, 16, 0, 56], 64: [18, 4, 0, 41], 26: [92, 15, 0, 10], 96: [37, 14, 0, 91], 61: [35, 19, 0, 38], 99: [480, 55, 0, 93], 95: [58, 34, 0, 90], 53: [7, 17, 0, 32], 78: [10, 20, 0, 58], 62: [19, 13, 0, 39], 74: [24, 41, 0, 56], 43: [59, 39, 0, 22], 21: [26, 43, 0, 8], 52: [81, 21, 0, 32]}
    g = {}
    for i in range(100):
        g[i] = []
        for k,v in n_itum.items():
            if v[3] == i and k != i:
                g[i].append(k)
        g[i].sort()
    def find(m, cand):
        global rsi, rdi, ncand,n_itum
        rsi += n_itum[m][0]
        rdi += n_itum[m][1]
        ncand.append(m)