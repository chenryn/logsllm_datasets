    releases:
    - name: myapp
      values:
        - values.yaml.gotmpl
    ```
!!! note "File: `production.yaml`"
    ```yaml
    domain: prod.example.com
    ```
!!! note "File: `values.yaml.gotmpl`"
    ```yaml
    domain: {{ .Values | get "domain" "dev.example.com" }}
    ```
Sadly you [can't use templates in the secrets
files](https://github.com/jkroepke/helm-secrets/issues/126), so you'll need to
repeat the code.
### Loading the chart variables and secrets
For each chart definition in the `helmfile.yaml` we need to load it's secrets
and values. We could use the next snippet:
```yaml
  - name: chart_1
    values:
      - ./chart_1/values.yaml
      - ./chart_1/{{ Environment.Name }}_values.yaml
    secrets:
      - ./chart_1/secrets.yaml
      - ./chart_1/{{ Environment.Name }}_secrets.yaml
```
This assumes that the `environment` variable is set, as it's going to be shared
by all the `helmfiles.yaml` you can add it to the `vars` files:
!!! note "File: `vars/production_values.yaml`"
    ```yaml
    environment: production
    ```
!!! note "File: `vars/default_values.yaml`"
    ```yaml
    environment: staging
    ```
Instead of `.Environment.Name`, in theory you could have used
`.Vars | get "environment"`, which could have prevented the variables and secrets of the default
environment will need to be called `default_values.yaml`, and
`default_secrets.yaml`, which is misleading. But you can't use `.Values` in the
`helmfile.yaml` as it's not loaded when the file is parsed, and you get an
error. A solution would be to [layer the helmfile state
files](https://github.com/helmfile/helmfile/blob/8594944f6374454e6ddea61d04b201133798cd95/docs/writing-helmfile.md#layering-state-template-files)
but I wasn't able to make it work.
# Avoiding code repetition
Besides environments, `helmfile` gives other useful tricks to prevent the
illness of code repetition.
## [Using release templates](https://github.com/helmfile/helmfile/blob/master/docs/writing-helmfile.md#release-template--conventional-directory-structure)
For each chart in a `helmfile.yaml` we're going to repeat the `values` and
`secrets` sections, to avoid it, we can use release templates:
```yaml
templates:
  default: &default
    # This prevents helmfile exiting when it encounters a missing file
    # Valid values are "Error", "Warn", "Info", "Debug". The default is "Error"
    # Use "Debug" to make missing files errors invisible at the default log level(--log-level=INFO)
    missingFileHandler: Warn
    values:
    - {{`{{ .Release.Name }}`}}/values.yaml
    - {{`{{ .Release.Name }}`}}/{{`{{ .Values | get "environment" }}`}}.yaml
    secrets:
    - config/{{`{{ .Release.Name }}`}}/secrets.yaml
    - config/{{`{{ .Release.Name }}`}}/{{`{{ .Values | get "environment" }}`}}-secrets.yaml
releases:
- name: chart_1
  chart: stable/chart_1
   0
        for: 15m
        labels:
          severity: warning
  ```
## Error: "release-name" has no deployed releases
This may happen when you try to install a chart and it fails. The best solution
until [this issue is resolved](https://github.com/roboll/helmfile/issues/471) is
to use `helm delete --purge {{ release-name }}` and then `apply` again.
## Error: failed to download "stable/metrics-server" (hint: running `helm repo update` may help)
I had this issue if `verify: true` in the helmfile.yaml file. Comment it or set
it to false.
## Cannot patch X field is immutable
You may think that deleting the resource, usually a deployment or daemonset will
fix it, but `helmfile apply` will end without any error, the resource won't be recreated
, and if you do a `helm list`, the deployment will be marked as failed.
The solution we've found is disabling the resource in the chart's values so that
it's uninstalled an install it again.
This can be a problem with the resources that have persistence. To patch it,
edit the volume resource with `kubectl edit pv -n namespace volume_pvc`, change
the `persistentVolumeReclaimPolicy` to `Retain`, apply the changes to uninstall,
and when reinstalling configure the chart to use that volume (easier said than
done).
# Links
* [Git](https://github.com/helmfile/helmfile)