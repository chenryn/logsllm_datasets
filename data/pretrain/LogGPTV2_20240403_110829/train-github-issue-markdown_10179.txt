 _Original tickethttp://projects.scipy.org/scipy/ticket/35 on 2006-03-09 by
trac user russel@..., assigned to unknown._
Run the following program and watch it's memory usage. Removing the jacobian
from the call to leastsq  
keeps memory usage constant. It also leaks at the same rate if the jacobian is
transposed and col_deriv=0.
    import numpy as N
    from scipy.optimize import leastsq
    x=N.arange(0,1,0.0001)
    y=(x-0.3)**2
    def residual(p, x, y):
      return (p[0]*x+p[1])*x+p[2]-y
    def jacobian(p, x, y):
      jac=N.zeros(shape=(len(p),len(x)),dtype=float)
      jac[0]=x*x
      jac[1]=x
      jac[2]=1
      return jac
    def fit_j(x, y):
      p=N.ones(3, dtype=float)
      fit, mesg = leastsq(residual, p, args=(x, y), Dfun=jacobian, col_deriv=1)
      return p
    def test_leak(nfit=10000):
      for k in xrange(nfit):
        p=fit_j(x,y)
    if __name__=="__main__":
      test_leak()