and Distributed System Security Symposium (NDSS), 2005.
[65] Y. Kwon, F. Wang, W. Wang, K. H. Lee, W.-C. Lee, S. Ma, X. Zhang,
D. Xu, S. Jha, G. Ciocarlie et al., “MCI: Modeling-based causality
inference in audit logging for attack investigation,” in Proc. of the
Network and Distributed System Security Symposium (NDSS), 2018.
[66] K. H. Lee, “Ubsi,” https://github.com/kyuhlee/UBSI, last accessed 04-
20-2019.
[67] K. H. Lee, X. Zhang, and D. Xu, “High accuracy attack provenance
via binary-based execution partition.” in Proc. of the Symposium on
Network and Distributed System Security (NDSS), 2013.
[69]
[68] ——, “LogGC: Garbage collecting audit log,” in Proc. of the ACM
conference on Computer and Communications Security (CCS), 2013.
J. Lind, C. Priebe, D. Muthukumaran, D. O’Keeffe, P.-L. Aublin,
F. Kelbert, T. Reiher, D. Goltzsche, D. Eyers, R. Kapitza et al.,
“Glamdring: Automatic application partitioning for Intel SGX,” in
Proc. of the USENIX Annual Technical Conference (ATC), 2017.
[70] Linux Audit, “audit-userspace,” https://github.com/linux-audit/audit-
userspace, last accessed 04-20-2019.
[71] Y. Liu, M. Zhang, D. Li, K. Jee, Z. Li, Z. Wu, J. Rhee, and P. Mittal,
“Towards a timely causality analysis for enterprise security,” in Proc.
of the Symposium on Network and Distributed System Security (NDSS),
2018.
[72] K. Lucas, “UnixBench,” https://github.com/kdlucas/byte-unixbench,
last accessed 04-20-2019.
[73] D. Ma and G. Tsudik, “A new approach to secure logging,” ACM
Transactions on Storage (TOS), vol. 5, no. 1, 2009.
[74] S. Ma, K. H. Lee, C. H. Kim, J. Rhee, X. Zhang, and D. Xu, “Accurate,
low cost and instrumentation-free security audit logging for Windows,”
in Proc. of the Annual Computer Security Applications Conference
(ACSAC), 2015.
[75] S. Ma, J. Zhai, F. Wang, K. H. Lee, X. Zhang, and D. Xu, “MPI: Mul-
tiple perspective attack investigation with semantics aware execution
partitioning,” in Proc. of the USENIX Security Symposium (USENIX),
2017.
[76] S. Ma, X. Zhang, and D. Xu, “ProTracer: Towards practical provenance
tracing by alternating between logging and tainting.” in Proc. of the
Network and Distributed System Security Symposium (NDSS), 2016.
[77] maldevel, “ClearLogs,” https://sourceforge.net/projects/clearlogs/, last
accessed 02-07-2020.
[78] S. Matetic, M. Ahmed, K. Kostiainen, A. Dhar, D. Sommer, A. Ger-
vais, A. Juels, and S. Capkun, “ROTE: Rollback protection for trusted
execution,” in Proc. of the USENIX Security Symposium (USENIX),
2017.
[79] S. Matetic, M. Schneider, A. Miller, A. Juels, and S. Capkun, “Del-
egaTEE: Brokered delegation using trusted execution environments,”
in Proc. of the USENIX Security Symposium (USENIX), 2018.
J. M. McCune, B. J. Parno, A. Perrig, M. K. Reiter, and H. Isozaki,
“Flicker: An execution infrastructure for TCB minimization,” ACM
SIGOPS Operating Systems Review, vol. 42, no. 4, 2008.
[80]
[81] F. McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas, H. Shaﬁ,
V. Shanbhogue, and U. R. Savagaonkar, “Innovative instructions and
software model for isolated execution.” Proc. of the International
Workshop on Hardware and Architectural Support for Security and
Privacy (HASP), 2013.
[82] L. McVoy, “LMbench,” http://www.bitmover.com/lmbench/, last ac-
cessed 04-20-2019.
[83] S. M. Milajerdi, R. Gjomemo, B. Eshete, R. Sekar, and V. Venkatakr-
ishnan, “HOLMES: Real-time APT detection through correlation of
suspicious information ﬂows,” in Proc. of the IEEE Symposium on
Security and Privacy (S&P), 2019.
[84] K.-K. Muniswamy-Reddy, D. A. Holland, U. Braun, and M. I. Seltzer,
“Provenance-aware storage systems,” in Proc. of the USENIX Annual
Technical Conference (ATC), 2006.
[85] National Institute of Standards and Technology, “NIST special pub-
lication 800-53 (rev. 4), security controls and assessment procedures
for federal information systems and organizations,” 2013.
[86] National Security Agency, “Controlled access protection proﬁle, ver-
sion 1.d,” https://www.niap-ccevs.org/Proﬁle/Info.cfm?PPID=14&id=
14, 1999.
[87] NGINX Inc., “Nginx 1.13.1,” https://www.nginx.com/, last accessed
04-20-2019.
[88] D. Nguyen, J. Park, and R. Sandhu, “Adopting provenance-based
access control in OpenStack cloud IaaS,” in Proc. of the International
Conference on Network and System Security (NSS), 2014.
[89] H. Nguyen, B. Acharya, R. Ivanov, A. Haeberlen, L. T. X. Phan,
O. Sokolsky, J. Walker, J. Weimer, W. Hanson, and I. Lee, “Cloud-
based secure logger for medical devices,” in Proc. of
the IEEE
International Conference on Connected Health: Applications, Systems
and Engineering Technologies (CHASE), 2016.
[90] OccupytheWeb, “How to cover your tracks & leave no trace behind on
the target system,” https://null-byte.wonderhowto.com/how-to/hack-
like-pro-cover-your-tracks-leave-no-trace-behind-target-system-
0148123/, 2013, last accessed 04-20-2019.
[91] O. Ohrimenko, F. Schuster, C. Fournet, A. Mehta, S. Nowozin,
K. Vaswani, and M. Costa, “Oblivious multi-party machine learning
on trusted processors,” in Proc. of the USENIX Security Symposium
(USENIX), 2016.
[92] P. H. O’Neill, “Zero day exploits are rarer and more expensive than
ever, researchers say,” https://www.cyberscoop.com/zero-day-vulns-
are-rarer-and-more-expensive-than-ever/, apr 2017.
[93] A. Oprea, Z. Li, T.-F. Yen, S. H. Chin, and S. Alrwais, “Detection
of early-stage enterprise infection by mining large-scale log data,” in
Proc. of the Conference on Dependable Systems and Networks (DSN),
2015.
[94] A. Ortiz Cornet and J. M. Bardera Bosch, “Method and system of
[95]
generating immutable audit logs,” Patent US20 090 016 534, 2009.
J. Park, D. Nguyen, and R. Sandhu, “A provenance-based access
control model,” in Proc. of the Annual International Conference on
Privacy, Security and Trust (PST), 2012.
[96] T. Pasquier, X. Han, T. Moyer, A. Bates, O. Hermant, D. Eyers, J. Ba-
con, , and M. Seltzer, “Runtime analysis of whole-system provenance,”
in Proc. of the ACM Conference on Computer and Communications
Security (CCS), 2018.
[97] T. Pasquier, J. Singh, D. Eyers, and J. Bacon, “Camﬂow: Managed
data-sharing for cloud services,” IEEE Transactions on Cloud Com-
puting (TCC), 2015.
[98] K. Pei, Z. Gu, B. Saltaformaggio, S. Ma, F. Wang, Z. Zhang, L. Si,
X. Zhang, and D. Xu, “HERCULE: Attack story reconstruction via
community discovery on correlated log graph,” in Proc. of the Annual
Computer Security Applications Conference (ACSAC), 2016.
[99] D. Pohly, S. McLaughlin, P. McDaniel, and K. Butler, “Hi-Fi: Col-
lecting high-ﬁdelity whole-system provenance,” in Proc. of the Annual
Computer Security Applications Conference (ACSAC), 2012.
[100] C. Priebe, K. Vaswani, and M. Costa, “EnclaveDB: A secure database
using SGX,” in Proc. of the IEEE Symposium on Security and Privacy
(S&P), 2018.
[101] T. Pulls and R. Peeters, “Balloon: A forward-secure append-only
the European
persistent authenticated data structure,” in Proc. of
Symposium on Research in Computer Security (ESORICS), 2015.
[102] H. Raj, S. Saroiu, A. Wolman, R. Aigner, J. Cox, P. England,
C. Fenner, K. Kinshumann, J. Loeser, D. Mattoon et al., “fTPM: A
software-only implementation of a TPM chip,” in Proc. of the USENIX
Security Symposium (USENIX), 2016.
[103] A. Rane, C. Lin, and M. Tiwari, “Raccoon: Closing digital side-
the USENIX
channels through obfuscated execution.” in Proc. of
Security Symposium (USENIX), 2015.
[104] Rapid7, “Metasploit, the world’s most used penetration testing frame-
work,” https://www.metasploit.com/, last accessed 04-20-2019.
[105] Red Hat Customer Portal, “System auditing,” https://access.redhat.
com/documentation/en-us/red hat enterprise linux/6/html/security
guide/chap-system auditing, last accessed 04-20-2019.
[106] Redis Labs, “Redis 3.0.6,” https://redis.io/, last accessed 04-20-2019.
[107] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn, “Design and
implementation of a tcg-based integrity measurement architecture,” in
Proc. of the USENIX Security Symposium (USENIX), 2004.
[108] B. Schneier and J. Kelsey, “Cryptographic support for secure logs
on untrusted machines.” in Proc. of the USENIX Security Symposium
(USENIX), 1998.
[109] ——, “Secure audit logs to support computer forensics,” ACM Trans-
actions on Information and System Security (TISSEC), 1999.
[110] F. Schuster, M. Costa, C. Fournet, C. Gkantsidis, M. Peinado,
G. Mainar-Ruiz, and M. Russinovich, “VC3: Trustworthy data ana-
lytics in the cloud using SGX,” in Proc. of the IEEE Symposium on
Security and Privacy (S&P), 2015.
17
[111] C. Shepherd, R. N. Akram, and K. Markantonakis, “EmLog: tamper-
resistant system logging for constrained devices with tees,” in Proc.
of the International Conference on Information Security Theory and
Practice (WISTP), 2017.
[112] M.-W. Shih, M. Kumar, T. Kim, and A. Gavrilovska, “S-NFV:
Securing NFV states by using SGX,” in Proc. of the ACM International
Workshop on Security in Software Deﬁned Networks & Network
Function Virtualization, 2016.
[113] S. Shinde, D. Tien, S. Tople, and P. Saxena, “Panoply: Low-TCB
Linux applications with SGX enclaves,” in Proc. of the Network and
Distributed System Security Symposium (NDSS), 2017.
[114] A. Sinha, L. Jia, P. England, and J. R. Lorch, “Continuous tamper-
proof logging using TPM 2.0,” in Proc. of the International Conference
on Trust and Trustworthy Computing (TRUST), 2014.
[115] Splunk Inc., “Splunk,” https://www.splunk.com, last accessed 02-07-
2020.
[116] P. Subramanyan, R. Sinha, I. Lebedev, S. Devadas, and S. A. Seshia, “A
formal foundation for secure remote execution of enclaves,” in Proc.
of the ACM Conference on Computer and Communications Security
(CCS), 2017.
[117] SUSE Linux AG, “Linux audit-subsystem design documenta-
tion for Linux kernel 2.6, v0.1,” http://uniforum.chi.il.us/slides/
HardeningLinux/LAuS-Design.pdf, 2004.
[118] C. Tan, L. Yu, J. B. Leners, and M. Walﬁsh, “The efﬁcient server
audit problem, deduplicated re-execution, and the web,” in Proc. of
the Symposium on Operating Systems Principles (SOSP), 2017.
[119] The Apache Software Foundation, “ab 2.3,” https://httpd.apache.org/
docs/2.4/programs/ab.html, last accessed 04-20-2019.
[120] ——, “httpd 2.4.18,” https://httpd.apache.org/, last accessed 04-20-
2019.
[121] The MITRE Corporation, “Capec-81: Web logs tampering,” https:
//capec.mitre.org/data/deﬁnitions/81.html, 2017, last accessed 04-20-
2019.
[122] S. Tople and P. Saxena, “On the trade-offs in oblivious execution
techniques,” in Proc. of the International Conference on Detection
of Intrusions and Malware, and Vulnerability Assessment (DIMVA),
2017.
utds3lab, “sgx-log,” https://github.com/utds3lab/sgx-log, last accessed
04-20-2019.
[123]
[124] Q. Wang, W. U. Hassan, D. Li, K. Jee, X. Yu, K. Zou, J. Rhee,
Z. Chen, W. Cheng, C. Gunter, and H. Chen, “You are what you do:
Hunting stealthy malware via data provenance analysis,” in Proc. of
the Symposium on Network and Distributed System Security (NDSS),
2020.
[125] W. Wang, G. Chen, X. Pan, Y. Zhang, X. Wang, V. Bindschaedler,
H. Tang, and C. A. Gunter, “Leaky cauldron on the dark land:
Understanding memory side-channel hazards in SGX,” in Proc. of the
ACM Conference on Computer and Communications Security (CCS),
2017.
[126] O. Weisse, V. Bertacco, and T. Austin, “Regaining lost cycles with
HotCalls: A fast interface for sgx secure enclaves,” in Proc. of the
Annual International Symposium on Computer Architecture (ISCA),
2017.
[127] A. A. Yavuz, P. Ning, and M. K. Reiter, “Efﬁcient, compromise
resilient and append-only cryptographic schemes for secure audit
logging,” in Proc. of the International Conference on Financial Cryp-
tography and Data Security (FC), 2012.
[128] A. A. Yavuz and P. Ning, “BAF: An efﬁcient publicly veriﬁable secure
audit logging scheme for distributed systems,” in Proc. of the Annual
Computer Security Applications Conference (ACSAC), 2009.
J. Yu, L. Hsiung, M. El Hajj, and C. W. Fletcher, “Data oblivious ISA
extensions for side channel-resistant and high performance comput-
ing.” in Proc. of the Symposium on Network and Distributed System
Security (NDSS), 2019.
[129]
[130] W. Zheng, A. Dave, J. G. Beekman, R. A. Popa, J. E. Gonzalez, and
I. Stoica, “Opaque: An oblivious and encrypted distributed analytics
platform.” in Proc. of the USENIX Symposium on Networked Systems
Design and Implementation (NSDI), 2017.
[131] W. Zhou, Q. Fei, A. Narayan, A. Haeberlen, B. T. Loo, and M. Sherr,
Algorithm 7: Recovery Phase
Input: sealed-key-id
Unseal(sealed-key-id,(cid:104)sk, mcID(cid:105));
DestroyMC(mcID);
run Initialization Phase;
“Secure network provenance,” in Proc. of the ACM Symposium on
Operating Systems Principles (SOSP), 2011.
APPENDIX A
RECOVERY FROM ERRORS
Recall from Section V that if corrupted or stale data is
provided as input to the Startup Phase, the Logger will raise
an error. There exist multiple scenarios where this situation
might happen: (1) the adversary, after achieving root access,
shuts down the Logger and then erases, corrupts or replaces the
sealed data stored on disk; (2) the adversary, after achieving
root access, force kills the Logger causing it
to skip the
Shutdown Phase; (3) benign failures, such as power loss,
system crash, or disk corruption, happen. We discussed why, in
its current design, CUSTOS cannot distinguish between these
different scenarios (they all cause an error at the next Startup,
which will cause the generation of an alert at the next audit)
and requires manual intervention in both the benign and the
adversarial cases (Section XII). We now provide a discussion
of how CUSTOS recovers from these errors.
Algorithm 7 presents the Recovery phase that CUSTOS pro-
vides to recover from errors. This phase takes as an input the
sealed key and monotonic counter ID (sealed-key-id). Recall
that these data were copied onto the administrative machine at
the end of the Initialization Phase, and thus will not be lost,
even if the adversary corrupted them on the compromised host.
The enclave then unseals these data, destroys the monotonic
counter ID associated with them by calling DestroyMC (cf.
Table I) and runs the Initialization phase again, to create a
new key-pair and monotonic counter. Finally, the administrator
copies the new sealed-key-id (associated with the new key-pair
and monotonic counter ID) onto their machine and registers the
updated node’s public key into the key management service. It
is important to delete the previous monotonic counter before
re-initializing CUSTOS’ Logger in order not to reach the limit
of monotonic counters available to SGX. Also observe that it
is not in the adversary’s interest to abuse the Recovery phase
in an attempt to prevent detection (scenario 2), as it would
result in the host utilizing an unregistered pk and this would
still cause the generation of an alert at the next audit.
Once CUSTOS has been re-initialized, the integrity of the
logs for which a signature was generated prior to the failure
will remain veriﬁable using the previous public key. Future
logs will be veriﬁable using the new public key. Only the logs
which belonged to the current block at the time of the fault
(in scenarios 2 and 3) will not have an associated signature,
but the fact itself that CUSTOS generated an alert and the
administrator had to intervene to re-initialize it with a new key
pair and counter means that this tampering (whether benign
or malicious) did not go undetected, and thus faults do not
violate G1 (tamper-evident logs).
18