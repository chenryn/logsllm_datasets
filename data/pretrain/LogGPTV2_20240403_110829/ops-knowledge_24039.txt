### Problem Description
You installed Python and pip using Homebrew, and they are now your default versions, as confirmed by the `which` command. However, you have an installation of IPython that was not installed via Homebrew, located at `/opt/local/bin/ipython`. This version of IPython is likely from MacPorts. You have installed several libraries (e.g., Matplotlib) on this version of IPython, and you want to continue installing new libraries (e.g., Python Imaging Library, libjpeg) on this version rather than on the Homebrew-managed Python.

### Solution
To install new libraries on the existing IPython installation, you need to use the package manager associated with that installation. Since your IPython is located at `/opt/local/bin/ipython`, it is likely managed by MacPorts. Hereâ€™s how you can proceed:

1. **Install Libraries Using MacPorts:**
   - First, ensure that MacPorts is up to date:
     ```sh
     sudo port selfupdate
     ```
   - Install the desired libraries using MacPorts. For example, to install the Python Imaging Library (Pillow) and libjpeg:
     ```sh
     sudo port install py-pillow
     sudo port install jpeg
     ```

2. **Verify Installation:**
   - After installing the libraries, you can verify that they are available in your IPython environment:
     ```sh
     /opt/local/bin/ipython
     import PIL
     import matplotlib
     print(PIL.__version__)
     print(matplotlib.__version__)
     ```

3. **Alternative: Use pip for IPython:**
   - If you prefer to use `pip` to install libraries, you can use the `pip` associated with the IPython installation. First, find the correct `pip`:
     ```sh
     which pip
     ```
   - If the `pip` found is not the one associated with your IPython, you can use the following command to find the correct `pip`:
     ```sh
     /opt/local/bin/python -m pip --version
     ```
   - Install the libraries using the correct `pip`:
     ```sh
     /opt/local/bin/python -m pip install pillow
     /opt/local/bin/python -m pip install libjpeg
     ```

### Long-Term Considerations
- **Consistency:** It is generally a good practice to use a single package manager (either Homebrew or MacPorts) to avoid conflicts and inconsistencies.
- **Virtual Environments:** Consider using virtual environments (e.g., `venv` or `conda`) to manage different sets of libraries for different projects. This can help avoid conflicts between different Python installations and their libraries.

### Example of Uninstalling MacPorts and Reinstalling IPython via Homebrew
If you decide to switch to using Homebrew for all your Python and IPython needs, you can follow these steps:

1. **Uninstall MacPorts:**
   - Remove MacPorts and its installed packages:
     ```sh
     sudo port -fp uninstall installed
     sudo rm -rf /opt/local
     sudo rm -rf /Applications/DarwinPorts
     sudo rm -rf /Applications/MacPorts
     sudo rm -rf /Library/LaunchDaemons/org.macports.*
     sudo rm -rf /Library/Receipts/DarwinPorts*.pkg
     sudo rm -rf /Library/Receipts/MacPorts*.pkg
     sudo rm -rf /Library/StartupItems/DarwinPortsStartup
     sudo rm -rf /Library/Tcl/darwinports1.0
     sudo rm -rf /Library/Tcl/macports1.0
     sudo rm -rf ~/.macports
     ```

2. **Reinstall IPython via Homebrew:**
   - Install IPython using Homebrew:
     ```sh
     brew install ipython
     ```

3. **Reinstall Libraries:**
   - Reinstall the necessary libraries using `pip`:
     ```sh
     pip install matplotlib
     pip install pillow
     pip install jupyter
     ```

By following these steps, you can either continue using your existing IPython installation with MacPorts or switch to a more consistent setup with Homebrew.