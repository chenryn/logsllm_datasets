Details are discussed in Section III-C.
Fig. 2: The overall architecture of Chaser.
III. IMPLEMENTATION
A. Fault Injection Component
a) Dynamic binary translation in QEMU: To support
multiple architectures, QEMU makes use of a compiler back-
end called Tiny Code Generator (TCG) as its dynamic binary
translation engine. QEMU translates each guest instruction
into a series of architecture-independent TCG instructions
grouped together as a TCG translation block (TB). The TCG
compiler translates each TB into a piece of native code that
can be executed on the host.
b) Placement of Fault Injector: The fault
injector is
placed where the target process starts and the interested
instruction is translated. Chaser relies on DECAF’s built-in
Virtual Machine Introspection (VMI) technique to retrieve
the process’s states. Once the target process creation event
is captured, Chaser ﬂushes the code translation cache and
triggers the next round of binary code translation. During
this translation process, the fault injector is injected into the
(cid:19)(cid:91)(cid:19)(cid:27)(cid:19)(cid:71)(cid:23)(cid:68)(cid:20)(cid:71)(cid:29)(cid:3)(cid:3)(cid:73)(cid:68)(cid:71)(cid:71)(cid:79)(cid:3)(cid:3)(cid:19)(cid:91)(cid:22)(cid:24)(cid:27)(cid:11)(cid:8)(cid:72)(cid:70)(cid:91)(cid:12)
(cid:11)(cid:68)(cid:12)(cid:3)(cid:82)(cid:85)(cid:76)(cid:74)(cid:76)(cid:81)(cid:68)(cid:79)
(cid:3)(cid:16)(cid:16)(cid:16)(cid:16)(cid:3)(cid:19)(cid:91)(cid:27)(cid:19)(cid:71)(cid:23)(cid:68)(cid:20)(cid:71)
(cid:3)(cid:80)(cid:82)(cid:89)(cid:66)(cid:76)(cid:22)(cid:21)(cid:3)(cid:87)(cid:80)(cid:83)(cid:21)(cid:15)(cid:72)(cid:70)(cid:91)
(cid:3)(cid:80)(cid:82)(cid:89)(cid:76)(cid:66)(cid:76)(cid:22)(cid:21)(cid:3)(cid:87)(cid:80)(cid:83)(cid:20)(cid:23)(cid:15)(cid:7)(cid:19)(cid:91)(cid:22)(cid:24)(cid:27)
(cid:3)(cid:68)(cid:71)(cid:71)(cid:66)(cid:76)(cid:22)(cid:21)(cid:3)(cid:87)(cid:80)(cid:83)(cid:21)(cid:15)(cid:87)(cid:80)(cid:83)(cid:21)(cid:15)(cid:87)(cid:80)(cid:83)(cid:20)(cid:23)
(cid:3)(cid:84)(cid:72)(cid:80)(cid:88)(cid:66)(cid:79)(cid:71)(cid:25)(cid:23)(cid:3)(cid:87)(cid:80)(cid:83)(cid:24)(cid:15)(cid:87)(cid:80)(cid:83)(cid:21)(cid:15)(cid:7)(cid:19)(cid:91)(cid:20)
(cid:3)(cid:80)(cid:82)(cid:89)(cid:76)(cid:66)(cid:76)(cid:25)(cid:23)(cid:3)(cid:87)(cid:80)(cid:83)(cid:20)(cid:25)(cid:15)(cid:7)(cid:73)(cid:79)(cid:71)(cid:79)(cid:66)(cid:41)(cid:55)(cid:19)
(cid:3)(cid:70)(cid:68)(cid:79)(cid:79)(cid:3)(cid:87)(cid:80)(cid:83)(cid:20)(cid:25)(cid:15)(cid:7)(cid:19)(cid:91)(cid:19)(cid:15)(cid:7)(cid:19)(cid:15)(cid:87)(cid:80)(cid:83)(cid:24)
(cid:66)
(cid:3)(cid:80)(cid:82)(cid:89)(cid:76)(cid:66)(cid:76)(cid:25)(cid:23)(cid:3)(cid:87)(cid:80)(cid:83)(cid:20)(cid:25)(cid:15)(cid:7)(cid:73)(cid:68)(cid:71)(cid:71)(cid:66)(cid:54)(cid:55)(cid:19)(cid:66)(cid:41)(cid:55)(cid:19)
(cid:66)
(cid:66)
(cid:11)(cid:69)(cid:12)(cid:3)(cid:90)(cid:76)(cid:87)(cid:75)(cid:82)(cid:88)(cid:87)(cid:3)(cid:73)(cid:68)(cid:88)(cid:79)(cid:87)(cid:3)(cid:76)(cid:81)(cid:77)(cid:72)(cid:70)(cid:87)(cid:82)(cid:85)
(cid:83)
(cid:3)(cid:16)(cid:16)(cid:16)(cid:16)(cid:3)(cid:19)(cid:91)(cid:27)(cid:19)(cid:71)(cid:23)(cid:68)(cid:20)(cid:71)
(cid:3)(cid:80)(cid:82)(cid:89)(cid:76)(cid:66)(cid:76)(cid:25)(cid:23)(cid:3)(cid:87)(cid:80)(cid:83)(cid:20)(cid:24)(cid:15)(cid:7)(cid:19)(cid:91)(cid:26)(cid:73)(cid:26)(cid:28)(cid:21)(cid:24)(cid:72)(cid:25)(cid:28)(cid:23)(cid:27)(cid:19)
(cid:3)(cid:80)(cid:82)(cid:89)(cid:76)(cid:66)(cid:76)(cid:25)(cid:23)(cid:3)(cid:87)(cid:80)(cid:83)(cid:20)(cid:25)(cid:15)(cid:7)(cid:39)(cid:40)(cid:38)(cid:36)(cid:41)(cid:66)(cid:76)(cid:81)(cid:77)(cid:72)(cid:70)(cid:87)(cid:66)(cid:73)(cid:68)(cid:88)(cid:79)(cid:87)
(cid:3)(cid:70)(cid:68)(cid:79)(cid:79)(cid:3)(cid:87)(cid:80)(cid:83)(cid:20)(cid:25)(cid:15)(cid:7)(cid:19)(cid:91)(cid:19)(cid:15)(cid:7)(cid:19)(cid:15)(cid:72)(cid:81)(cid:89)(cid:15)(cid:87)(cid:80)(cid:83)(cid:20)(cid:24)
(cid:3)(cid:80)(cid:82)(cid:89)(cid:66)(cid:76)(cid:22)(cid:21)(cid:3)(cid:87)(cid:80)(cid:83)(cid:21)(cid:15)(cid:72)(cid:70)(cid:91)
(cid:3)(cid:80)(cid:82)(cid:89)(cid:76)(cid:66)(cid:76)(cid:22)(cid:21)(cid:3)(cid:87)(cid:80)(cid:83)(cid:20)(cid:23)(cid:15)(cid:7)(cid:19)(cid:91)(cid:22)(cid:24)(cid:27)
(cid:3)(cid:68)(cid:71)(cid:71)(cid:66)(cid:76)(cid:22)(cid:21)(cid:3)(cid:87)(cid:80)(cid:83)(cid:21)(cid:15)(cid:87)(cid:80)(cid:83)(cid:21)(cid:15)(cid:87)(cid:80)(cid:83)(cid:20)(cid:23)
(cid:3)(cid:84)(cid:72)(cid:80)(cid:88)(cid:66)(cid:79)(cid:71)(cid:25)(cid:23)(cid:3)(cid:87)(cid:80)(cid:83)(cid:24)(cid:15)(cid:87)(cid:80)(cid:83)(cid:21)(cid:15)(cid:7)(cid:19)(cid:91)(cid:20)
(cid:3)(cid:80)(cid:82)(cid:89)(cid:76)(cid:66)(cid:76)(cid:25)(cid:23)(cid:3)(cid:87)(cid:80)(cid:83)(cid:20)(cid:25)(cid:15)(cid:7)(cid:73)(cid:79)(cid:71)(cid:79)(cid:66)(cid:41)(cid:55)(cid:19)
(cid:3)(cid:70)(cid:68)(cid:79)(cid:79)(cid:3)(cid:87)(cid:80)(cid:83)(cid:20)(cid:25)(cid:15)(cid:7)(cid:19)(cid:91)(cid:19)(cid:15)(cid:7)(cid:19)(cid:15)(cid:87)(cid:80)(cid:83)(cid:24)
(cid:3)(cid:80)(cid:82)(cid:89)(cid:76)(cid:66)(cid:76)(cid:25)(cid:23)(cid:3)(cid:87)(cid:80)(cid:83)(cid:20)(cid:25)(cid:15)(cid:7)(cid:73)(cid:68)(cid:71)(cid:71)(cid:66)(cid:54)(cid:55)(cid:19)(cid:66)(cid:41)(cid:55)(cid:19)
(cid:11)(cid:70)(cid:12)(cid:3)(cid:90)(cid:76)(cid:87)(cid:75)(cid:3)(cid:73)(cid:68)(cid:88)(cid:79)(cid:87)(cid:3)(cid:76)(cid:81)(cid:77)(cid:72)(cid:70)(cid:87)(cid:82)(cid:85)
Fig. 3: Demonstration of fault injection for an fadd instruction.
instruction of interest. Figure 3 illustrates a demonstration of
how the fault injector is injected into an fadd instruction. (a) is
the original instruction fadd while (b) is the generated TCG IR
by QEMU without the fault injector. If the fadd is labeled as
the targeted instruction, Chaser generates a callback function
DECAF inject fault and invokes it before the fadd is executed.
As shown in (c), this is achieved by inserting the TCG IR code
at the beginning of the fadd’s translated TCG IRs.
Fig. 4: Overview of Chaser’s fault injection plugin.
c) Software Structure of Fault Injection Plugin: Figure 4
presents the software structure of the fault injection plugin
of Chaser, which injects faults for designated instructions
into the target application. When this plugin is loaded into
the fault injection framework, its plugin_init() function
is called to initialize the plugin and returns a pointer to
fi_interface_st, which speciﬁes a new terminal com-
mand inject_fault deﬁned by the plugin. Additionally,
the plugin registers callback fi_creation_cb() for the
process creation event.
When the user enters the inject_fault command in the
terminal, the registered callback do_fi_fault() is called.
This callback function sets the targeted program,
targeted
instruction, injection condition, and self-deﬁned fault injector,
and saves this information into fi_cmds_st. Once there is
a newly created process, the callback fi_creation_cb()
is called to check if
is the targeted program. If so,
it enables the fault
injector and registers two callbacks -
tainted_mem_wt_cb() and tainted_mem_rd_cb(),
to log the fault propagation process.
it
the
During
program,
execution
fault_injector() is
targeted
instruction (fadd, mov, etc.) is executed. The instructions
of
invoked before
targeted
the
the
Authorized licensed use limited to: Middlesex University. Downloaded on October 19,2020 at 21:20:43 UTC from IEEE Xplore.  Restrictions apply. 
357
executed counter is then updated. Once the value of the
instructions executed counter reaches the injection condition,
the actual fault injection is called to emulate different kinds of
soft errors, which are deﬁned in fi_trigger_st. After the
injection is ﬁnished, the callback function fi_clean_cb()
will turn off the screening on incoming new processes and
detach the injector.
It is worth noting that the design of Chaser satisﬁes our de-
sign goals mentioned in Section II-B. The user can customize
the fault injector (ﬂexible) to inject faults into a target program
and instruction (ﬁne-grained) under customized injection con-
dition (accountable). And because only the targeted program
and instruction are instrumented, the performance overhead is
minimized (efﬁcient). Detailed performance overhead results
are discussed in IV-D.
B. Fault Injection Interfaces
Chaser exports its fault injection capabilities as interfaces
for users. These interfaces allow users to customize the fault
injector in the following ways.
a) what application: Leveraging DECAF’s Virtual Ma-
chine Introspection technology, users can specify the tar-
geted application at runtime. Using the callback function
VMI_CREATEPROC_CB, users can retrieve the information of
a created process to determine if it is the application targeted
for fault injection.
b) when to inject: Chaser allows the user to deﬁne
different injection conditions for every X86 instruction. At
runtime, these conditions are checked by the user to determine
when to inject faults. For example, to inject a fault to fadd
after it is executed 1000 times, the user can deﬁne when
to inject faults and and how many bits to ﬂip through the
data structure template deﬁned in Chaser. This design makes
Chaser both highly customizable and extendable. Chaser, by
default, provides three types of fault models: probabilistic fault
model, deterministic fault model and group fault model. Table I
shows the deﬁnitions of the supported fault models.
TABLE I: Chaser supported fault models
Fault Model
Probabilistic
Deterministic
Group
Functions
fault injection location is based on a predeﬁned
probability distribution function.
fault injection location is the exact predeﬁned location.
multiple faults are injected.
c) how to inject: For every X86 instruction, the user
can deﬁne custom fault injectors. Chaser maintains a func-
tion pointer to the fault
injector for every instruction. If
the injection condition is satisﬁed, the corresponding fault
injector is invoked. Chaser also provides functions such as
CORRUPT_REGISTER and CORRUPT_MEMORY to ease the
injection process. These functions can write to any user
speciﬁed registers and memory locations.
TABLE II: Lines of code (LOC) required to develop injectors
InjectorName
Probabilistic Injector
Deterministic Injector
Group Injector
LOC
97
100
98
d) Flexibility : We discuss the ﬂexibility of the injection
interfaces in terms of lines of code (LOC) and time required
to develop new fault injection models. We implemented three
fault injectors described in F-SEFI - a probabilistic injector,
which injects faults at a predeﬁned probability; a deterministic
injector, which injects faults into target instruction at certain
condition; and a group injector, which injects faults into all
ﬂoating point instrcutions. Table II summarizes the LOC and
time required to develop these fault injectors. As shown in the
table, it takes about 2 hours and 100 LOC to develop a new
fault injector, which is a relatively small task for researchers.
This demonstrates that with Chaser’s injection interfaces, it is
much easier to construct new fault injection models compared
to starting from scratch, which may require deep systemic
knowledge and tedious engineering work.
C. Fault Propagation Tracing
a) Dynamic Taint Analysis in DECAF: Dynamic taint
analysis runs an application and observes which computations
are affected by predeﬁned taint sources such as user input
[34]. The purpose of dynamic taint analysis is to track the
ﬂow of information between sources and sinks. This technique
allows Chaser to trace the propagation of faults by marking
the injected faults as sources.
b) Taint Propagation for MPI applications:
DECAF implements its lightweight, bitwise taint propa-
gation mostly at the TCG instruction level. To achieve bit-
level precision, DECAF propagates tainted bits through CPU
registers, memory, and IO devices. TCG translates a basic
block of guest instructions into a translation block (TB) of
TCG instructions (a). The taint propagation rules are enforced
with TCG instructions (b). More details can be found at [21].
In MPI
applications, a fault can propagate from MPI process P1 to
MPI process P2. Neither the sender nor the receiver process
have enough information to accurately track the propagation
of faults through inter-process communication.
[4] tackles
this problem by adding an extra header to the original MPI
message, and then propagating the faults with the assistance
of this extra header. This solution requires the modiﬁcation of
source code.
Chaser takes a different approach. Figure 5 illustrates the
overview of our solution. We create a TaintHub module
to store and share the tainting status of MPI messages with
different MPI processes. Each MPI process can send and
receive messages using standard MPI interfaces. Chaser hooks
these functions, extracts the message information from the
stack, and then shares them with TaintHub.
To ensure the error related information is synchronized
between MPI ranks, on the sender side, Chaser hooks the
MPI message sending functions to collect
the taint status
and broadcasts that status to TaintHub before sending
Authorized licensed use limited to: Middlesex University. Downloaded on October 19,2020 at 21:20:43 UTC from IEEE Xplore.  Restrictions apply. 
358
categories combined represent the majority of usage for fault
injection techniques.
1) Rodinia : We select bfs, kmeans and lud from Ro-
dinia [3]. During each run, Chaser randomly injects faults into
the operands (fadd,fmul and mov) of the and instructions after
it is executed n times and the faults are x bits ﬂipped within
the operand. We executed each application 5000 times.
2) Matvec: Matvec [2] uses MPI to compute a matrix-
vector product b = A*x. We use this to illustrate our fault
injection capabilities on MPI applications. Matvec is conﬁg-
ured to use four MPI ranks running on four Chaser hypervised
nodes. Faults are only injected into the master node. During
each run, Chaser injects faults into the operands of the mov
instruction after it is executed n times and the faults are x bits
ﬂipped within the operand. We executed Matvec 5000 times.