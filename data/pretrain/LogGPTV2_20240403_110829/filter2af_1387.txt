### 一、前言
在前面的稿件中我们更多的会去选择分析如何在已知合约中寻找存在的漏洞，并利用漏洞以达到获取非法token的目的或者利用漏洞进行作恶。
研究安全的读者应该都清楚，在进行安全防御的时候，我们除了会对已经发生的安全事件进行跟踪之外，我们还会自行设置一个陷阱，让攻击者自己掉入我们布置好的陷阱中以便能让我们更好的分析作恶者的手法。而这个陷阱又被称为
**蜜罐** 。
在本文中，我们就针对智能合约的蜜罐进行分析。而这里的蜜罐不同于上面的传统的web中的蜜罐概念。在这里我们的蜜罐通常是攻击者编写的某种合约并部署在网络上，面向的对象是那些对Solidity语言不能够深入理解的一类投机用户。这些用户以为合约出现了严重漏洞就想通过合约去盗取token，然而不仅没有成功，反而把自己的本钱都赔进去了。
### 二、易于忽略的继承问题
#### 1 代码分析
在讲述这个问题之前，我们首先看一个例子，代码如下：
    pragma solidity ^0.4.18;
    contract Owned {
        address public owner;
        function Owned() { owner = msg.sender; }
        modifier onlyOwner{ if (msg.sender != owner) revert(); _; }
    }
    contract TestBank is Owned {
        event BankDeposit(address from, uint amount);
        event BankWithdrawal(address from, uint amount);
        address public owner = msg.sender;
        uint256 ecode;
        uint256 evalue;
        function() public payable {
            deposit();
        }
        function deposit() public payable {
            require(msg.value > 0);
            BankDeposit(msg.sender, msg.value);
        }
        function setEmergencyCode(uint256 code, uint256 value) public onlyOwner {
            ecode = code;
            evalue = value;
        }
        function useEmergencyCode(uint256 code) public payable {
            if ((code == ecode) && (msg.value == evalue)) owner = msg.sender;
        }
        function withdraw(uint amount) public onlyOwner {
            require(amount =this.balance)
            {        
                adr.transfer(this.balance+msg.value);
            }
        }
    }
与往常一样，我们首先需要对这个合约进行一个简单的分析。
这个合约有个`withdraw()`函数，这个函数用于使合约的拥有者将合约的所有余额进行提取。而这个函数目前对于我们来说无法用到，因为我们无法改变`owner`的值，所以对于普通用户来说是无法使用这个函数的。
下面是`Command`函数，这个函数同样是owner使用的。所以这里不再分析。
最重要的函数是`multiplicate`函数，我们来看看：
    function multiplicate(address adr)
        public
        payable
        {
            if(msg.value>=this.balance)
            {        
                adr.transfer(this.balance+msg.value);
            }
        }
在这个函数中，我们受害者首先看到函数内容就会以为：用户可以调用此函数，并赋值value一个大于合约余额的数，然后就会满足if条件，之后合约就会向adr地址进行转账操作。
然而真正的情况会有用户所想的这么美好吗？我们来做个实验。
首先我们将合约部署：
为了方便我们查看合约余额，我们写入查看余额的函数。
此时余额为0，并可以查看到owner的地址。
之后我们更换账户信息为`0xca35b7d915458ef540ade6068dfe2f44e8fa733c`。
然后我们将value的值设置为1 eth，然后调用`multiplicate`。
此时我们注意账户的金额：
并且观察此时合约中账户的余额：
因为我们之前向合约转账了3 eth，所以此时里面有余额。
此时我们更换用户，模拟被害用户，此时用户为了投机向合约中转账4 eth。目的是收到合约转回来的7 eth。
然而调用函数后我们发现账户余额只减少却没有增加。
再次查看合约发现其内部金额只增加反而没有减少。用户的钱白白成为了“战利品”。
根据我们的实验，我们发现，代码中的`this.balance`是`原来的余额+value`，而此处的`msg.value>=this.balance`可以等价为`msg.value>=this.originBalance
+ msg.value`，所以是用户不可能满足的。
这也就是用户对solidity语法了解的不清楚导致的，应该引以为戒。
### 四、参考文献
  * 
  * 
  * 
**本稿为原创稿件，转载请标明出处。谢谢。**