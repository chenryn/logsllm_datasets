ciphertext, then the noise scales additively in the number
of multiplications, and the result is still a high-rate Regev
ciphertext. This is the basis of the theoretical PIR construction
of Gentry and Halevi [20] and the recently-implemented
OnionPIR protocol [23]. Our approach further builds upon
and expands this technique of composing Regev encryption
with GSW encryption to get a better handle on noise growth
while enabling fast computation.
B. Our Contributions and Construction Overview
In this work, we present the SPIRAL family of single-server
PIR protocols that leverages the combination of matrix Regev
and GSW encryption schemes to simultaneously reduce the
query size, response size, and the server computation time
compared to all previous implemented protocols (see Section V).
Here, we provide an overview of our techniques.
High rate via ciphertext amortization. To achieve higher
rate, we take the Gentry-Halevi [20] approach of using the
amortized version of Regev encryption [37] (over rings [38])
as our base encryption scheme. Here, the rate of the encryption
scheme (i.e., the ratio of plaintext size to ciphertext size) scales
with n2/(n2 + n) where n is the plaintext dimension. Higher
dimensions enable a better rate at the cost of higher server
computation. For example, by using the high-rate version of
Regev encryption, the base version of SPIRAL is able to achieve
a rate that is 1.5×–6× better than OnionPIR (Table I) on a
broad range of database conﬁgurations.
Ciphertext translation and query compression. To take
advantage of the Regev-GSW homomorphism, the client would
have to include GSW ciphertexts as part of their query. Even
with the query compression techniques of [5, 39], Gentry and
Halevi estimate that the size of the queries in their construction
to be 30 MB, which is more than 450× worse compared
to existing schemes. The reason for this blowup is that the
Angel et al. query compression technique [5] relies on the
ability to homomorphically compute automorphisms; while
this is possible on matrix Regev ciphertexts, the same does
not seem to hold for GSW ciphertexts. As such, in the Gentry-
Halevi construction, the client has to send multiple large GSW
ciphertexts as part of its query. The OnionPIR scheme avoids
this issue by observing that in the 1-dimensional case, a GSW
ciphertext can be viewed as a BFV ciphertext, in which case,
they can use the same type of packing approach from [5, 39].
In this work, we describe a general technique for translating
between matrix Regev ciphertexts (of any dimension) and
GSW ciphertexts (Section III). Our transformations leverage
the similar algebraic structure shared by Regev ciphertexts and
GSW ciphertexts, and can be viewed as a particular form of key
switching between two different encryption schemes. We then
compose our translation algorithms with the query-packing
approach from [5, 39], and compress our query into a single
scalar Regev ciphertext of just 14 KB. Our query expansion
procedure expands this single Regev ciphertext into a collection
of matrix Regev ciphertexts and GSW ciphertexts encoding
the client’s query along each dimension of the database
hypercube. More generally, our ciphertext translation protocols
can be viewed as a way to “compress” GSW ciphertexts
(Remark III.1), and may be useful in other settings where
users are sending/receiving GSW ciphertexts.
The SPIRAL family of PIR protocols. The SPIRAL family of
PIR protocol follows a similar high-level structure as previous
lattice-based PIR protocols (Section I-A). We describe the main
steps here and also visually in Fig. 1:
• Query generation: The client’s query consists of a single
scalar Regev ciphertext that encodes the record index the
client wants to retrieve. We structure the database of N =
2ν1×ν2 records as a 2ν1 × 2 × ··· × 2 hypercube. A record
index can then be described by a tuple (i, j1, . . . , jν2) where
i ∈ {0, . . . , 2ν1 − 1} and j1, . . . , jν2 ∈ {0, 1}. The query
consists of an encoding of the vector (i, j1, . . . , jν2 ), which
we can pack into a single scalar Regev ciphertext using the
Angel et al. [5] technique.
• Query expansion: Upon receiving the client’s query, the
server expands the query ciphertext as follows:
– Initial expansion: The server starts by applying the
expansion technique from [5] to expand the query into a
collection of (scalar) Regev ciphertexts that encode the
queried index (i, j1, . . . , jν2 ). This yields two collections
of Regev ciphertexts, which we will denote by CReg and
CGSW.
– First dimension expansion: Next, the server uses CReg
to expand the ciphertexts into a collection of 2ν1 matrix
Regev ciphertexts that “indicate” index i: namely, the
ith ciphertext is an encryption of 1 while the remaining
ciphertexts are encryptions of 0. We can view this
collection of ciphertexts as an encryption of the ith basis
vector. This step relies on a scalar-to-matrix algorithm
ScalToMat that takes a Regev ciphertext encrypting a bit
µ ∈ {0, 1} and outputs a matrix Regev ciphertext that
encrypts the matrix µIn, where In is the n-by-n identity
matrix. We describe this construction in Section III-A.
– GSW ciphertext expansion: The server then uses CGSW
to construct GSW encryptions of the indices j1, . . . , jν2 ∈
{0, 1}. This step relies on a Regev-to-GSW translation
algorithm RegevToGSW that we describe in Section III-B.
• Query processing: After expanding the query into matrix
Regev encryptions of the ﬁrst dimension and GSW encryp-
tions of the subsequent dimension, the server follows the
Gentry-Halevi blueprint [20] and homomorphically computes
the response as follows:
– First dimension processing: First, it uses the matrix
Regev encryptions of the ith basis vector to project the
database onto the sub-database of records whose ﬁrst index
is i. This step only requires linear homomorphisms since
the database records are available in the clear while the
query is encrypted. At the end of this step, the server has
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:41 UTC from IEEE Xplore.  Restrictions apply. 
3932
1 Query Expansion
Scalar
Regev Coefﬁcient
Expansion
Query
Scalar
Regev
0
1
0
0
Scalar
Regev
1
z
z2
0
0
0
Matrix
Regev
Matrix
Plaintext
Database
ScalToMat
RegevToGSW
×
0
1
0
0
Matrix
GSW
1
0
0
1
1
0
Matrix
Regev
Result
2
First Dim.
Processing
3
Folding
Fig. 1: Server processing for a single SPIRAL query. The parameter z here is a decomposition base and is used for the translation
between Regev ciphertexts and GSW ciphertexts. We refer to Section III-B for more details.
matrix Regev encryptions of the projected database.
– Folding in subsequent dimensions: Next, the server uses
the Regev-GSW external product to homomorphically
multiply in the GSW ciphertexts encrypting the subsequent
queries. Each GSW ciphertext selects for one of two
possible dimensions. Since each multiplication involves a
“fresh” GSW ciphertext derived from the original query,
we can take advantage of the asymmetric noise growth
property of Regev-GSW multiplication. The result is a
single matrix Regev ciphertext encrypting the desired
record.
• Response decoding: At the conclusion of the above protocol,
the server replies with a single matrix Regev ciphertext
encrypting the desired record.
We provide the full protocol description in Section IV and a
high-level illustration in Fig. 1.
SPIRALPACK: New trade-offs via response packing. Using
matrix Regev ciphertexts for the bulk of the computation
improves the rate of the protocol but does incur some compu-
tational overhead (from the need to operate on matrices rather
than scalars). The SPIRALPACK protocol is a variant of SPIRAL
that allows the server to simultaneously operate on scalar Regev
ciphertexts while retaining the high rate beneﬁts of using matrix
Regev ciphertexts. In particular, we show how to adapt our
ciphertext translation techniques to pack multiple scalar Regev
ciphertexts into a single matrix Regev ciphertext. The server
processing then operates on 1-dimensional ciphertexts, while
the response consists of n-dimensional ciphertexts. The main
cost of this packing procedure is it requires a larger set of
public parameters. We describe the construction details in
Section IV-A.
Automated parameter selection. Our design introduces mul-
tiple tunable parameters that allow us to explore new trade-
offs between server computation, query size, and response
size. Since the overall server computation and communication
of our PIR protocol is a complex function of the underlying
parameters of our scheme, we introduce an automatic parameter
selection procedure that takes as input a database conﬁguration
(i.e., number of records and record size), and systematically
searches through the space of possible parameters to minimize
the server cost. A similar approach was also used in the XPIR
system [19]. We describe our parameter selection methodology
in Section V-A. Our system allows choosing parameters that
either minimize the estimated cost of the protocol (based on the
costs associated with server computation and communication),
or focuses solely on maximizing either the server throughput or
rate. The system also supports selecting parameters that satisfy
a constraint on the query size or the public parameter size.
The parameter selection tool searches over candidate parameter
sets for all of the SPIRAL variants described in this paper and
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:41 UTC from IEEE Xplore.  Restrictions apply. 
4933
describing our construction, it is more convenient to view
Regev encryption as a noisy encoding scheme over Rq, which
does not support decryption for all encoded values. If we apply
a redundant encoding of a message (i.e., scaling the message
as in standard Regev encryption) then it is possible to recover
the encoded value. Here, we provide an informal description
of the encoding scheme and defer the formal description to
the full version of this paper [42].
q
q
q
q
p
Let n be the plaintext dimension and q be the encoding
modulus. The encoding scheme consists of a pair of efﬁcient
algorithms (KeyGen, Encode). The KeyGen algorithm samples
a secret key S ∈ R(n+1)×n
. The Encode algorithm takes the
secret key S and a matrix M ∈ Rn×n
, and outputs an encoding
C ∈ R(n+1)×n
where STC = M + E and the entries of E are
small (i.e., sampled from the error distribution χ). The Regev
encoding scheme supports homomorphic addition (Add) and
scalar multiplication (ScalarMul). In particular, if C1 and C2
are encodings of M1 and M2, then C1 + C2 is an encoding
of M1 + M2 with a larger error. Similarly, if T ∈ R(n+1)×n
,
then C1T is an encoding of M1T.
Finally, if p (cid:28) q is a plaintext modulus, we say that C
is a redundant encoding of a plaintext matrix ˆM ∈ Rn×n
if STC = (cid:98)q/p(cid:99) ˆM + E, for some (cid:107)E(cid:107) (cid:28) q/(2p). In this
case, we can recover the encoded message M by computing
p/q · STC and rounding to the nearest integer. We denote this
operation by Decode(STC).
GSW encodings. Next, we describe the key properties of
the Gentry-Sahai-Waters encryption scheme [32]. Similar to
the case for Regev encodings, we describe the scheme as an
encoding scheme (without an explicit decryption functionality).
We provide the high-level details here and defer the formal
description to the full version of this paper [42].
Let n be the dimension and z ∈ N be a decomposition base.
The GSW encoding scheme also consists of a pair of algorithms
(KeyGen, Encode). The KeyGen algorithm is identical to that
for the Regev encoding scheme while Encode takes the secret
key S and a scalar µ ∈ Rq and outputs an encoding C ∈
R(n+1)×n
where STC = µSTGn+1,z + E and the entries of
E are small. By construction, if C is a GSW encoding of a bit
µ ∈ {0, 1}, then Complement(C) := Gn+1,z − C is a GSW
encoding of the complement 1 − µ.
Regev-GSW multiplication. The main homomorphism that we
rely on in this work is a way to multiply a Regev encoding with
a GSW encoding to obtain a Regev encoding of the product [36,
20, 39, 23]. In particular, if CRegev is an encoding of a matrix
M ∈ Rn×n
and CGSW is an encoding of a scalar µ ∈ Rq
under the same secret key S ∈ R(n+1)×n
, the multiplication
algorithm Multiply(CGSW, CRegev) outputs the Regev encoding
CGSWG−1
n+1,z(CRegev). By deﬁnition,
q
q
selects the system that best achieves the target objective.
Performance evaluation and trade-offs. Finally, we pro-
vide a complete implementation of SPIRAL and a detailed
experimental analysis and comparison with previous PIR
protocols. We provide the full evaluation and accompanying
microbenchmarks in Section V-C. In Appendix D, we also
estimate the concrete monetary costs of applying the SPIRAL
family of protocols to support several privacy-preserving
applications. For instance, based on current cloud computing
costs, we show that SPIRALSTREAMPACK enables a user to
privately stream a 2 GB movie from a library of 214 movies
with a server cost of $0.34, which is just 1.9× higher than the
no-privacy baseline (where the client directly downloads the
movie of interest). This is a 9× reduction in cost compared to
the previous state of the art, OnionPIR [23].
II. PRELIMINARIES
We write λ to denote the security parameter. For a positive
integer n ∈ N, we write [n] to denote the set {1, . . . , n}. For
integers a, b ∈ Z, we write [a, b] to denote the set {a, a +
1, . . . , b}. For a positive integer q ∈ N, we write Zq to denote
the integers modulo q. We write poly(λ) to denote a function
that is O(λc) for some c ∈ N and negl(λ) to denote a function
that is o(λ−c) for all c ∈ N. An algorithm is efﬁcient if it runs
in probabilistic polynomial time in its input length. We say
that two families of distributions D1 = {D1,λ}λ∈N and D2 =
{D2,λ}λ∈N are computationally indistinguishable if no efﬁcient
algorithm can distinguish them with non-negligible probability.
We recall the formal deﬁnition of a private information retrieval
protocol in Appendix A.
A. Lattice-Based Homomorphic Encodings
Like previous lattice-based PIR protocols [19, 5, 20, 25, 23,
22], SPIRAL operates over cyclotomic rings R = Z[x]/(xd +1)
where d is a power of two. For a positive integer q ∈ N, we
write Rq = R/qR.
Ring learning with errors. The security of our PIR protocol
relies on the ring learning with errors (RLWE) problem [38].
Very brieﬂy, the RLWE assumption (in normal form [40])
states that the following two distributions are computationally
indistinguishable: (a, sa+e) and (a, u), where a R← Rm
q , s ←
χ, e ← χm, u R← Rm
q , m = poly(λ) is the number of samples,
and χ is an error distribution (typically a discrete Gaussian).
Gadget matrices. In this work, we use gadget matrices with
different bases [41]. Fix a dimension n ∈ N, and a base z ∈ N.
q where t = (cid:98)logz q(cid:99) + 1.
Let gT
We deﬁne the gadget matrix Gn,z = In ⊗ gT
, where
m = nt. We write g−1
q to denote the function that
expands the input into a base-z representation where each digit
is in the range [−z/2, z/2]. We write G−1
to
denote the function that applies g−1
to each component of the
input vector, and extend G−1
n,z to operate on matrices M by
applying G−1
Regev encoding scheme for matrices. SPIRAL uses the matrix
version of Regev encryption over rings [33, 37, 38]. When