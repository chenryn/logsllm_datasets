密钥，并利用其他方法来破坏 PAC 的对称性。然而，我无法在内核中找到 secure monitor 存在的证据。
另一种选择是，苹果将真正的 PAC 密钥转移到 A12 本身，这样即使是最强大的软件攻击者也无法读取密钥。密钥可以在引导时随机生成，也可以通过 iBoot
的特殊寄存器进行设置。然后，提供给 QARMA-64
算法(或自己开发的算法)的密钥将是一种混合密钥，它结合了随机密钥、通过特殊寄存器设置的标准密钥和当前的异常级别。
比如说， A12 可以存储 10 个 128 比特的密钥，分别对应了两个异常级别(EL0和EL1)以及五个基本 PAC
密钥(IA,IB,DA,DB,GA)。那么，用于任何特定操作的 PAC 密钥可以是与该操作相对应的随机PAC密钥(如用户空间中的 PACIB
指令对那个的IB-EL0)与标准 PAC 密钥(如
APIBKey)的异或。这种方法它将彻底打破跨EL和密钥交叉的对称性，并防止密钥被公开，从而完全缓解之前确定的三个弱点。
虽然我不能确定它真正实现的方法，但我决定在我研究的其余部分都假设苹果采用最健壮的设计:真正的键是随机的，并存储在SoC本身中。这样，无论实际实现如何，我之后发现的任何绕过策略都会有效。
###  跨 EL 的PAC仍然可行
由于没有系统缺陷的线索，我决定是时候研究 PAC 的 signing gadget了。
第一个 PACIA 指令出现在 vm_shared_region_slide_page() 函数中，它是
vm_shared_region_slide_page_v3() 的一个内联副本。这个函数出现在XNU源代码中，在它的主循环的注释十分有趣:
    uint8_t* rebaseLocation = page_content;
    uint64_t delta = page_entry;
    do {
       rebaseLocation += delta;
       uint64_t value;
       memcpy(&value, rebaseLocation, sizeof(value));
       delta = ( (value & 0x3FF8000000000000) >> 51) * sizeof(uint64_t);
       // A pointer is one of :
       // {
       //     uint64_t pointerValue : 51;
       //     uint64_t offsetToNextPointer : 11;
       //     uint64_t isBind : 1 = 0;
       //     uint64_t authenticated : 1 = 0;
       // }
       // {
       //     uint32_t offsetFromSharedCacheBase;
       //     uint16_t diversityData;
       //     uint16_t hasAddressDiversity : 1;
       //     uint16_t hasDKey : 1;
       //     uint16_t hasBKey : 1;
       //     uint16_t offsetToNextPointer : 11;
       //     uint16_t isBind : 1;
       //     uint16_t authenticated : 1 = 1;
       // }
       bool isBind = (value & (1ULL value_add;
           value += value_add;
       } else {
           // The new value for a rebase is the low 51-bits of the threaded value
           // plus the slide. Regular pointer which needs to fit in 51-bits of
           // value. C++ RTTI uses the top bit, so we'll allow the whole top-byte
           // and the bottom 43-bits to be fit in to 51-bits.
           ...
       }
       memcpy(rebaseLocation, &value, sizeof(value));
    } while (delta != 0);
尽管真正执行 PAC 操作的所有代码都已从公共源码中删除，但这部分代码中包含 authenticated 、hasBKey 和
hasDKey，表明该代码正是处理经过指针验证的函数。此外，关于 C++ RTTI
的另一个注释表明，这段代码是为了承接用户空间的代码。这意味着内核很有可能会对用户空间的指针执行 PAC 操作。
下面是这个循环在IDA中的反编译，我们可以看到在公共源代码中有许多不存在的操作:
    slide_amount = si->slide;
    offset = uservaddr - rebaseLocation;
    do
    {
       rebaseLocation += delta;
       value = *(uint64_t *)rebaseLocation;
       delta = (value >> 48) & 0x3FF8;
       if ( value & 0x8000000000000000 )       // isAuthenticated
       {
           value = slide_amount + (uint32_t)value + slide_info_entry->value_add;
           context = (value >> 32) & 0xFFFF;   // diversityData
           if ( value & 0x1000000000000 )      // hasAddressDiversity
               context = (offset + rebaseLocation) & 0xFFFFFFFFFFFF
                       | (context UNKNOWN_FIELD && !(BootArgs->bootFlags & 0x4000000000000000) )
           {
               daif = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 1));// DAIF
               if ( !(daif & 0x80) )
                   __asm { MSR             #6, #3 }
               _WriteStatusReg(S3_4_C15_C0_4,
                   _ReadStatusReg(S3_4_C15_C0_4) & 0xFFFFFFFFFFFFFFFB);
               __isb(0xFu);
               key_bits = (value >> 49) & 3;
               switch ( key_bits )
               {
                   case 0:
                       value = ptrauth_sign...(value, ptrauth_key_asia, &context);
                       break;
                   case 1:
                       value = ptrauth_sign...(value, ptrauth_key_asib, &context);
                       break;
                   case 2:
                       value = ptrauth_sign...(value, ptrauth_key_asda, &context);
                       break;
                   case 3:
                       value = ptrauth_sign...(value, ptrauth_key_asdb, &context);
                       break;
               }
               _WriteStatusReg(S3_4_C15_C0_4, _ReadStatusReg(S3_4_C15_C0_4) | 4);
               __isb(0xFu);
               ml_set_interrupts_enabled(~(daif >> 7) & 1);
           }
       }
       else
       {
           ...
       }
       memmove(rebaseLocation, &value, 8);
    }
    while ( delta );
内核似乎会代表用户空间对指针进行签名。这很有趣，因为正如前面所讨论的，A12 否定了我们跨 EL
伪造指针的思路，这应该意味着内核在用户空间指针上的签名，而这个签名在用户空间中本应该是无效的。
但是这写隐藏起来的代码不太可能是无效的，因此必定有一些机制，内核通过这种机制能够对用户空间指针进行签名。之后，我们搜索其他的 PAC*
指令实例，可以找到一个固定的模式：每当内核为用户空间指针签名时，它会清除并设置S3_4_C15_C0_4系统寄存器中的一个比特来封装PAC指令：
    MRS         X8, #4, c15, c0, #4 ; S3_4_C15_C0_4
    AND         X8, X8, #0xFFFFFFFFFFFFFFFB
    MSR         #4, c15, c0, #4, X8 ; S3_4_C15_C0_4
    ISB
    ...         ;; PAC stuff for userspace
    MRS         X8, #4, c15, c0, #4 ; S3_4_C15_C0_4
    ORR         X8, X8, #4
    MSR         #4, c15, c0, #4, X8 ; S3_4_C15_C0_4
    ISB
同样，设置和清除 S3_4_C15_C0_4 为 0x4 的内核代码通常伴随着禁用中断并检查引导BootArgs->bootFlags
内容((BootArgs->bootFlags &
0x4000000000000000))，正如我们在上面vm_shared_region_slide_page_v3()中所看到的那样。
我们可以推断，S3_4_C15_C0_4 为 0x4 控制内核中的 PAC* 指令是使用 EL0
密钥还是EL1密钥:当设置这个位时，使用内核密钥，否则使用用户空间密钥。在清除这个位时，需要禁用中断，这也是十分合理的。否则，其他内核代码在使用EL0
PAC密钥时遇到中断，会导致PAC验证失败，从而使内核崩溃。
###  SCTLR_EL1 中发现了 PAC 的控制位。
我在调查系统寄存器时注意到的另一件事是，以前SCTLR_EL1的保留位现在被用于启用或禁用某些密钥的PAC指令。在研究
Lel0_synchronous_vector_64 时，我注意到一些代码引用了bootFlags并为 SCTLR_EL1 设置了一些值。
    ADRP        X0, #const_boot_args@PAGE
    ADD         X0, X0, #const_boot_args@PAGEOFF
    LDR         X0, [X0,#(const_boot_args.bootFlags - 0xFFFFFFF0077A21B8)]
    AND         X0, X0, #0x8000000000000000
    CBNZ        X0, loc_FFFFFFF0079B3320
    MRS         X0, #0, c1, c0, #0                  ;; SCTLR_EL1