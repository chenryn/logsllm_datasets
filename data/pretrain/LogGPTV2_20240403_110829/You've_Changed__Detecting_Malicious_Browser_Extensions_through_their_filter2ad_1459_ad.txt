Administrator” cluster (named after an English extension in that
cluster) and contains 13 extensions, two of which have already been
removed from the extension store. These 13 extensions have a total
of 250K users with only 90 reviews and only 190 users actually rating
them. The extensions appear to offer no legitimate functionality
but exhibit clearly abusive behavior, such as, changing the search
engine of the browser and blocking users from visiting URLs related
to Google support and the removal of unwanted extensions. Perhaps
to avoid getting flagged, this blocking is done by the injection of a
large and opaque HTML div element that hides the actual content of
these pages, instead of outright blocking pages based on their URLs.
// (A) New Tab Takeover
$("#hpNewTab").removeClass("hidden");
if (initialToolbarVersionCheck
!== -1 && ATB.localStorage.get("pf") !== "V5") //HP New tabs
ATB.NewTab
.init(bgPg, $("#mostVisitedLinks"), $('#recentlyClosedLinks'));
else
ATB.NewTab.init(bgPg, $("#mostVisited"), $('#recentlyClosed'));
// (B) Search engine to Searchgist
(function (f,e) {
var a = [/.*google\.com$/, /.*bing\.com$/, /.*yahoo\.com$/];
var k = false;
for (var c=0; c < a.length; c++) {
if (window.location.hostname.match(a[c])) {
k=true;
break } }
var g = "//g.searchgist.com";
var h = "//ssl-g.searchgist.com";
var b = e.createElement("script");
b.src = ((e.location.protocol ==
"https:") ? h : g) + "/html/scripts/inject/chrome.js?tag=" + l;
(e.head || e.body).appendChild(b)
}) (window, document);
// (C) Search engine to Searchkska
var SEARCH_ENGINES = {
'bing' :
{ "SearchUrl": "http://searchkska.xyz/ap/?n=40517&id=SY10" }};
var SEARCH_ENGINES_ORDER = ['bing'];
Listing 4: New Tab Takeover
5.5.3 Uninstall Cluster. Malicious extensions can engage in behav-
ior that makes them difficult to uninstall, even when the user has
identified them. These extensions can redirect the uninstall page,
hide the uninstall button, and hide the extensions interface page, so
they disable all ways to uninstall the extension. In our clusters, we
discovered four extensions that redirect the uninstall page, with one
of them creating a clickjacking-like popup with a link to install a
different extension when the user clicks on the uninstall button.
5.5.4 Monetization Code. The developers of a browser extension
may eventually decide that they want to monetize the userbase that
they have attracted. One way of monetizing extensions is by using
dedicated, extension-monetizing services which pay developers in
exchange for data collection and the display of ads (typically injected
in pages where the extension is active). One of our clusters contains
three such extensions, one of which had 17K users that started includ-
ing a file called monetizus.js starting from March 2019. Because of
the intrusive nature of the injected ads, this extension was eventually
taken down but still exposed users to malvertising for more than two
weeks before its takedown. Like before, this example shows how our
system is capable of detecting malicious extensions in a wide range
of scenarios, including when independent developers all attempt to
monetize their extensions through the same low-quality services.
5.5.5 Obfuscated Code. There is a very thin line between obfusca-
tionandminificationofanextension’ssourcecode.Whileextensions
are not allowed to include obfuscated code according to webstore
guidelines,wediscoveredatleast20extensionswithobfuscatedcode,
most of which were online and available to users. Listing 6 (in the
Appendix) shows an example of obfuscation discovered in the wild,
originating from an extension that is violating webstore guidelines
but is available on the webstore at the time of this writing [28].
5.5.6 Malicious Theme Cluster. As a final example, we discovered
three clusters with a total of 800 extensions all of which were vari-
ations of each other and advertised the same type of theme-related
functionality. The developers of these extensions secretly monetized
their users by adding affiliate identifiers to regular web links (e.g.
links to products on amazon) and injecting ads. This brings the total
number of malicious extensions discovered by our system to 943
extensions. We do not include these 800 extensions in our reported
counts since these were independently discovered by others, with
multiple examples of comments from bots, negative reviews and
specific keywords mentioned throughout different extensions from
the same bots. We do, however, mention them as further evidence
that our system can group together malicious extensions and aid in
the attribution of the attacks.
5.6 System Verification
False Positives. Here, we present our cluster-related findings, to
demonstrate that our system does not suffer from significant false
positive cases. Our system detected 21 malicious clusters involving
145 (143 true positives) extensions. Through manual inspection, we
identified only two false positives, which leads to a false positive rate
was 1.4%. Both false-positive extensions added thousands of lines
of code, including calls to the abused APIs used by true positives in
the malicious clusters and thus were clustered with them.
True Negatives. Similarly, because we want to verify that our sys-
tem detects as many malicious extensions as possible, we calculate
the true negatives from the clustering stage. We sampled 100 ex-
tensions from clusters with no malicious seed and through manual
inspection we verified them all as true negatives, i.e. in this sampling
our system did not miss any malicious extensions.
False Negatives. In general, it is incredibly challenging to quantify
false negatives in an open-world setting such as the one used in
our paper. Our approach generated thousands of clusters and we
can therefore systematically analyze only the ones containing one
or more seed malicious extensions. The fact that our system finds
malicious extensions that have passed all the dynamic and manual
analyses of the Chrome Web Store speaks to its practical ability to de-
tect abuse that is evading all other deployed procedures and systems.
Comparing to past systems that detect malicious browser exten-
sions,onlyJagpaletal.[20]andXingetal.[45]explorefalsenegatives,
with the latter using a 2014 dataset (originating from the now defunct
ExtensionDefender)forgroundtruth.Jagpaletal.[20]relyonhuman
experts and abuse reports to create ground truth for their dataset, nei-
ther of which are publicly available. From the rest of the papers that
provide raw numbers of extensions with malicious behavior, none
of them [5, 6, 14, 23, 36, 41] attempted to quantify false negatives.
6 DISCUSSION
In this section we briefly discuss the results of a 30-day evaluation
period of our results and whether attackers could evade our system.
30-day Evaluation. In total, from the 143 malicious extensions
we discovered, only nine of them had comments from real users,
suggesting that the extension was exhibiting suspicious behavior.
Meanwhile, throughout the period of our experiments we continued
crawling the webstore for comments and ratings. For the extensions
that had new versions, we crawled and collected the newly added
comments from the users.
For a period of 30 days, we run our system for discovering seed
extensions through user feedback (described in Section 4.1) and
concluded that no new extensions could be identified through new
comments and ratings. We did find comments containing some of the
low-trustworthiness keywords associated with malicious extensions
but none of these instances were true positives.
On the other hand, we observed that five of the extensions that
our system identified as malicious, were removed from the webstore
during these 30 days. Among these extensions, were two that had a
significantly large userbase (and therefore a significantly large pool
of users who were affected). The first extension was named Pdf Con-
verted Hub and had more than 800,000 users but only six ratings from
these users. The second extension, Musixmatch, was substituted by
another extension with the official one having more than 5,000 users
before it was taken down. Our system had identified both of these ex-
tensions via our clustering-deltas approach and had flagged versions
that were active for months before they were eventually taken down.
Interestingly, none of the reviews and comments of these exten-
sions mentioned anything related to malicious behavior. This shows
that while user-feedback is useful for identifying some malicious
extensions in the webstore, it cannot be solely relied on for the de-
tection of malware. Our system was able to detect them because
updates of these extensions clustered together with other malicious
extensions that were flagged by users, and therefore discovered by
our system during the user-feedback step.
Artificial introduction and removal of code. In order to evade our
system, a malicious extension author could attempt to push a ma-
licious code update with additional APIs in order to simulate an
update from a benign extension. Similarly, attackers could attempt
to remove certain APIs to make the extension cluster in one of the
non-malicious APIs, when we run our system.
Both scenarios are far from trivial for the attacker to execute cor-
rectly given the nature of our system. Attackers would need to have
access to the exact same dataset so that they could perfectly predict
how their updates would cluster and then keep mutating their ma-
licious changes until a desired clustering is achieved. Injecting less
codethannecessarymaystoptheattackerfromsuccessfullycomplet-
ing his attack whereas injecting more code than necessary increases
the detection surface of the malicious update and could therefore
be discovered by other malicious-extension-detection systems. Fur-
thermore, introducing and removing code in order to brute-force the
set of APIs that will bypass our system, is not a zero-cost approach.
After a threshold of unsuccessful bypasses, the attacker’s account
will be flagged by the Web Store and deleted based on the store’s
policies. Therefore, the attacker will not only need to establish a
new developer account (with email and mobile-phone requirements)
but, more importantly, lose control of the entire userbase of the
extension(s) associated with the hijacked/purchased account.
Orthogonally to these technical reasons, the types of malicious
extensions that our system can detect are, by definition, non targeted,
since we rely on multiple code deltas clustering together with one
or more of them being a known malicious extension. We therefore
argue that attackers who can patiently mutate their malicious up-
dates to bypass a detection system are not part of the threat model
that we tackle in this paper.
7 LIMITATIONS AND FUTURE WORK
False Reviews from Competitors and Scarcity of Reviews. While the
majority of users have no reason to leave untrue reviews, we did
find evidence of fake negative reviews that appeared to be part of
an orchestrated attempt to discredit an extension, by the developers
of a competing extension.
Specifically,whileexaminingtheanomaliesflaggedbytheAnoma-
lize package on the 2,256 extensions with 50 or more ratings, we
discovered that the website of an extension developer claimed that
their extension was under attack through negative reviews, by some
known competitors [16, 31]. The extension developer of the pur-
portedly affected extension, not only encouraged users to report
the competing extensions but also opened a ticket with Google [42]
reporting this illicit behavior, claiming that the competitors cloned
the extension in question, added malicious functionality to it, and
then started downvoting the original extension through automated
means (i.e. most likely using bots).
In general, as Figure 3 shows, most ratings of extensions concen-
trate on the highest and lowest scores (i.e. 1 and 5). This is expected
since most users do not leave feedback unless they are exceptionally
satisfied or exceptionally dissatisfied with a product or a service.
Extensions that have very few comments limit our ability to perform
any statistical analysis in them to identify anomalies. The fewer the
organic comments on a given extension, the more damage a negative
campaign from a competing developer can have on an extension,
and on the ability to identify true negative comments as anomalies.
This concentration of ratings and the occasional fake-review cam-
paign does make anomaly detection more challenging but, as we
showed in this paper, given enough ratings, there is still sufficient
variance to detect anomalies and identify extensions that turned
malicious. Better bot detection and incentives for users to leave feed-
back could further improve the quality and number of comments
and therefore also improve the user-feedback step of our system.
Evasions through JavaScript libraries. It is not uncommon for de-
velopers to adopt a given library in their extension and therefore
push that library in their next update. During our analysis, jQuery
was the most commonly added JavaScript library. We identified
221,118 files claiming to be jQuery (through naming conventions)
but we could only match 33,890 of them to known jQuery versions
through comparing their hashes with the hashes of known jQuery
libraries. Given the large number of unmatched files, we opine that
the majority of the unmatched jQuery files are not malicious but may
rather be customizations that we are not aware of and therefore did
not include in our database of known jQuery versions. At the same
time, we cannot guarantee that some of these jQuery versions are
not maliciously modified scripts that use jQuery to hide their malice.
Identifying benign vs. malicious customizations of large JavaScript
libraries is a research topic in and of itself and we therefore leave
this task for future work.
Another method that attackers may use in the future is to direct
their API calls through jQuery, in order to hide the API functional-
ity from our static analysis model. A future version of our pipeline
can straightforwardly deal with this potential evasion by mapping
jQuery calls to specific APIs using existing JS analysis tools [22].
it focuses on the deltas of browser extensions and capitalizes on
previously-detected malicious extensions to label future ones.
Missing versions of browser extensions. Our system relies on being
able to identify the last benign version of an extension so that it
can identify its update deltas and cluster them with other updates.
Given that we are not associated with the Chrome webstore, we
could not always obtain all the versions that were necessary for our
experiments. While this is a limitation of our work, we argue that
extension stores could deploy our system with “perfect” fidelity since
they observe all extensions versions and therefore can compare an
extension update with all other updates.
Requirement of manual analysis. Lastly, it is worth noting that our
system requires an amount of manual analysis, both for identifying
the true positives of malicious extensions that can serve as seeds for
identifying others, but also to differentiate between true positives
and false positives after the clustering-deltas step. We therefore see
our system as a helping tool for security analysts who have a finite
amount of time and resources and therefore need to prioritize the
analysis of extensions that are likely to be malicious.
8 RELATED WORK
Given their privileged position in a user’s browser, the security and
privacy of browser extensions have attracted a significant amount
of work from the community.
Security. The majority of prior work on the security of browser
extensions, has focused on either detecting malicious browser exten-
sions, or benign extensions that are vulnerable to attacks and could
therefore be exploited by malicious websites.
On the malicious-extension front, Kapravelos et al. proposed
Hulk [23], a dynamic-analysis system that exposed extensions to
honeypot-like content and monitored whether these extensions
exfiltrated that content. Using these techniques, Hulk discovered
130 malicious browser extensions that had evaded prior detection
systems and were installed by millions of users. Thomas et al. [41]
and Xing et al. [45] also use dynamic analysis to identify whether
malicious extensions added new advertisements on websites vis-
ited by users, or replace the affiliate identifiers of existing ads. By
analyzing extensions from Chrome, Opera and Firefox, Somé [36]
demonstrated the security and privacy concerns that extensions may
pose, identifying 171 Chrome extensions with malicious behavior.
Jagpal et al. [20] report on three years worth of detecting mali-
cious extensions at the official Chrome Web Store, using a combina-
tion of dynamic analysis, permission analysis, developer reputation,
and static analysis. Our proposed system also uses static analysis
but, instead of trying to determine whether an extension is benign
or malicious in isolation, clusters the deltas of extension updates
and focuses on the clusters containing known malicious extensions.
Leontiadis et al. described how Facebook detects malicious browser
extensions, by identifying suspicious behaviors suggesting the pres-
ence of malicious extensions [14]. Bán and Livshits, in the context
of the Brave browser, recently discussed the various approaches
proposed to detect malicious extensions, concluding that there is
still a need for techniques and systems that can scale to the size
and dynamics of modern extension markets [5]. We therefore argue
that our proposed system offers a step in the right direction since
Next to infecting users with malicious extensions, attackers also
capitalize on benign but vulnerable extensions, to steal data and
obtain a foothold on privileged browser APIs. To protect against vul-
nerable extensions, prior work proposed techniques to detect vulner-
abilities (e.g. Bandhakavi [6] proposing detection using information-
flow analysis) as well as more secure architectures for developing
and deploying browser extensions [7, 18].
Privacy. Next to detecting extensions that intentionally as well as
unintentionallyleakprivateuserdata[10,38,44],browserextensions
have also been investigated from a browser-fingerprinting perspec-
tive. Being able to detect the extensions that users have voluntarily
installed, not only enables trackers to use the resulting entropy for
re-identifying users, but for also determining sensitive information
about users, such as, their socioeconomic class, and political affili-
ations. Prior work has shown that extensions are fingerprintable via
their web-accessible resources [19, 33], the unique ways in which
they modify a webpage’s DOM [24, 37, 39], timing channels [32], as
wellastheirresponsetotailoredpostmessages[24].Unliketheexten-
sions we study in this paper, these fingerprintable extensions are not
malicious but unintentionally make users less private on the web.
9 CONCLUSION
In this work, we explored the malicious browser extension landscape
by observing deltas in extension code over time. We built a system
that analyzed 1.5 million comments from Google Web Store in order
to identify malicious extensions that we can use as seeds. We ana-
lyzed 922,684 extension versions, a dataset of collected extensions
that spans over six years, and performed clustering based on the sim-
ilarity of the code between version updates. By using our initial mali-
cious seeds, we discovered 21 malicious clusters with 143 extensions
that share similar updates to their code. Although some of these ma-
licious extensions were already flagged as malicious by the webstore,
we discovered 64 (44%) that were still available and installed by a total
of 2,458,881 users. Our work demonstrates that clustering extensions
based on the similarity of their code deltas is a step to the right direc-
tion and can detect malicious extensions, in an abuse-agnostic way.
Current systems that aim to limit the abuse from malicious exten-
sions can benefit greatly by our proposed extension-analysis tech-
niques to identify extensions that are currently evading detection.
10 REPRODUCIBILITY
To enable reproducibility and future quantitative comparisons, we
open-source our code as well as the dataset of all the malicious
clusters. The code for reproducing this project is available at:
https://github.com/wspr-ncsu/extensiondeltas
ACKNOWLEDGMENTS
We thank the anonymous reviewers for their feedback. This work
was supported by the Office of Naval Research (ONR) under grants
N00014-17-1-2541, N00014-20-1-2720 and by the National Science
FoundationundergrantsCNS-1703375,CMMI-1842020,CNS-1941617.
REFERENCES
[1] DBSCAN Algorithm. 2020. https://scikit-learn.org/stable/modules/generated/
sklearn.cluster.DBSCAN.html. [Online].
[2] Chrome announces no obfuscation anymore on extensions. 2020.
https:
//blog.chromium.org/2018/10/trustworthy-chrome-extensions-by-default.html.
[3] Extension Apis. 2020. https://cs.chromium.org/chromium/src/chrome/common/
[4] Native Apis. 2020. https://cs.chromium.org/chromium/src/chrome/browser/
extensions/api/. [Online].
resources/. [Online].
[5] Dénes Bán and Benjamin Livshits. 2019. Extension Vetting: Haven’t We Solved
This Problem Yet?. In Proceedings of the Workshop on Measurements, Attacks, and
Defenses for the Web (MADWeb).
[6] Sruthi Bandhakavi, Samuel T King, Parthasarathy Madhusudan, and Marianne
Winslett. 2010. VEX: Vetting Browser Extensions for Security Vulnerabilities.