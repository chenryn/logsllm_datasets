### Administrator Cluster Analysis

The "Administrator" cluster, named after an English extension within it, consists of 13 extensions, two of which have already been removed from the extension store. These 13 extensions collectively have 250,000 users, with only 90 reviews and 190 user ratings. The extensions appear to offer no legitimate functionality but exhibit abusive behavior, such as changing the browser's search engine and blocking users from visiting URLs related to Google support and the removal of unwanted extensions. To avoid detection, these extensions use a large, opaque HTML `div` element to hide the actual content of these pages rather than outright blocking them based on their URLs.

### Code Examples

#### (A) New Tab Takeover
```javascript
$("#hpNewTab").removeClass("hidden");
if (initialToolbarVersionCheck !== -1 && ATB.localStorage.get("pf") !== "V5") {
    // HP New tabs
    ATB.NewTab.init(bgPg, $("#mostVisitedLinks"), $('#recentlyClosedLinks'));
} else {
    ATB.NewTab.init(bgPg, $("#mostVisited"), $('#recentlyClosed'));
}
```

#### (B) Search Engine Redirect to Searchgist
```javascript
(function (f, e) {
    var a = [/.*google\.com$/, /.*bing\.com$/, /.*yahoo\.com$/];
    var k = false;
    for (var c = 0; c < a.length; c++) {
        if (window.location.hostname.match(a[c])) {
            k = true;
            break;
        }
    }
    var g = "//g.searchgist.com";
    var h = "//ssl-g.searchgist.com";
    var b = e.createElement("script");
    b.src = ((e.location.protocol == "https:") ? h : g) + "/html/scripts/inject/chrome.js?tag=" + l;
    (e.head || e.body).appendChild(b);
})(window, document);
```

#### (C) Search Engine Redirect to Searchkska
```javascript
var SEARCH_ENGINES = {
    'bing': {
        "SearchUrl": "http://searchkska.xyz/ap/?n=40517&id=SY10"
    }
};
var SEARCH_ENGINES_ORDER = ['bing'];
```

### Uninstall Cluster

Malicious extensions can engage in behavior that makes them difficult to uninstall, even when the user has identified them. These extensions can redirect the uninstall page, hide the uninstall button, and obscure the extensions interface page, effectively disabling all ways to uninstall the extension. In our analysis, we discovered four extensions that redirect the uninstall page, with one of them creating a clickjacking-like popup with a link to install a different extension when the user clicks on the uninstall button.

### Monetization Code

Developers of browser extensions may eventually decide to monetize their user base. One way to do this is by using dedicated, extension-monetizing services that pay developers in exchange for data collection and the display of ads. We found three such extensions in one of our clusters, one of which had 17,000 users and started including a file called `monetizus.js` starting from March 2019. Due to the intrusive nature of the injected ads, this extension was eventually taken down but still exposed users to malvertising for more than two weeks before its takedown. This example demonstrates how our system can detect malicious extensions in various scenarios, including when independent developers attempt to monetize their extensions through low-quality services.

### Obfuscated Code

There is a fine line between obfuscation and minification of an extension’s source code. While extensions are not allowed to include obfuscated code according to webstore guidelines, we discovered at least 20 extensions with obfuscated code, most of which were available to users. An example of such obfuscation is provided in Listing 6 (in the Appendix), originating from an extension that violates webstore guidelines but is still available on the webstore.

### Malicious Theme Cluster

We also discovered three clusters with a total of 800 extensions, all variations of each other, and advertising the same type of theme-related functionality. The developers of these extensions secretly monetized their users by adding affiliate identifiers to regular web links (e.g., links to products on Amazon) and injecting ads. This brings the total number of malicious extensions discovered by our system to 943. We do not include these 800 extensions in our reported counts since they were independently discovered by others, with multiple examples of comments from bots, negative reviews, and specific keywords mentioned throughout different extensions from the same bots. However, we mention them as further evidence that our system can group together malicious extensions and aid in the attribution of attacks.

### System Verification

#### False Positives
Our system detected 21 malicious clusters involving 145 (143 true positives) extensions. Through manual inspection, we identified only two false positives, leading to a false positive rate of 1.4%. Both false-positive extensions added thousands of lines of code, including calls to the abused APIs used by true positives in the malicious clusters and thus were clustered with them.

#### True Negatives
To verify that our system detects as many malicious extensions as possible, we sampled 100 extensions from clusters with no malicious seed and manually inspected them. All 100 were verified as true negatives, indicating that our system did not miss any malicious extensions in this sampling.

#### False Negatives
Quantifying false negatives in an open-world setting is challenging. Our approach generated thousands of clusters, and we can systematically analyze only those containing one or more seed malicious extensions. The fact that our system finds malicious extensions that have passed all dynamic and manual analyses of the Chrome Web Store speaks to its practical ability to detect abuse that evades other deployed procedures and systems. Comparing to past systems, only Jagpal et al. [20] and Xing et al. [45] explore false negatives, with the latter using a 2014 dataset. None of the other papers [5, 6, 14, 23, 36, 41] attempted to quantify false negatives.

### Discussion

In this section, we discuss the results of a 30-day evaluation period and whether attackers could evade our system.

#### 30-day Evaluation
From the 143 malicious extensions we discovered, only nine had comments from real users suggesting suspicious behavior. During our 30-day evaluation, we continued crawling the webstore for comments and ratings. For extensions with new versions, we collected newly added comments. No new extensions were identified through new comments and ratings. However, five of the extensions our system identified as malicious were removed from the webstore during this period. Two of these extensions, "Pdf Converted Hub" and "Musixmatch," had a large userbase. Our system flagged versions that were active for months before they were taken down. This shows that while user feedback is useful, it cannot be solely relied upon for detecting malware.

#### Artificial Introduction and Removal of Code
To evade our system, a malicious extension author could push a malicious code update with additional APIs to simulate an update from a benign extension. Alternatively, attackers could remove certain APIs to make the extension cluster with non-malicious ones. Both scenarios are challenging for attackers due to the need for precise predictions and the risk of detection. After a threshold of unsuccessful bypasses, the attacker’s account will be flagged and deleted, requiring the establishment of a new developer account and losing control of the userbase.

### Limitations and Future Work

#### False Reviews from Competitors and Scarcity of Reviews
While most users leave genuine reviews, we found evidence of fake negative reviews orchestrated by competing extension developers. Most ratings concentrate on the highest and lowest scores, limiting statistical analysis. Extensions with few comments are more vulnerable to negative campaigns. Better bot detection and incentives for user feedback could improve the quality and number of comments.

#### Evasions through JavaScript Libraries
It is common for developers to adopt libraries like jQuery in their extensions. During our analysis, we identified 221,118 files claiming to be jQuery, but only 33,890 matched known jQuery versions. The unmatched files are likely customizations or potentially malicious modifications. Identifying benign vs. malicious customizations of large JavaScript libraries is a research topic. Attackers might also direct API calls through jQuery to hide functionality, which future versions of our pipeline can address by mapping jQuery calls to specific APIs.

#### Missing Versions of Browser Extensions
Our system relies on identifying the last benign version of an extension to detect update deltas. As we are not associated with the Chrome webstore, we could not always obtain all necessary versions. Extension stores could deploy our system with perfect fidelity since they observe all extension versions.

#### Requirement of Manual Analysis
Our system requires manual analysis to identify true positives and differentiate between true and false positives. We see our system as a tool for security analysts to prioritize the analysis of potentially malicious extensions.

### Related Work

Browser extensions' security and privacy have attracted significant attention. Prior work has focused on detecting malicious extensions and vulnerabilities in benign extensions. Our system uses static analysis to cluster extension updates and focuses on clusters containing known malicious extensions, offering a step towards scalable and dynamic detection.

### Conclusion

In this work, we explored the malicious browser extension landscape by observing code deltas over time. We built a system that analyzed 1.5 million comments from the Google Web Store to identify malicious extensions. We analyzed 922,684 extension versions, spanning six years, and performed clustering based on code similarity. Using initial malicious seeds, we discovered 21 malicious clusters with 143 extensions sharing similar updates. Although some were flagged as malicious, 64 (44%) were still available and installed by 2,458,881 users. Our work demonstrates that clustering based on code deltas is effective in detecting malicious extensions in an abuse-agnostic manner.

### Reproducibility

To enable reproducibility and future comparisons, we open-source our code and dataset of all malicious clusters. The code is available at: https://github.com/wspr-ncsu/extensiondeltas

### Acknowledgments

We thank the anonymous reviewers for their feedback. This work was supported by the Office of Naval Research (ONR) under grants N00014-17-1-2541, N00014-20-1-2720, and by the National Science Foundation under grants CNS-1703375, CMMI-1842020, CNS-1941617.

### References

[1] DBSCAN Algorithm. 2020. https://scikit-learn.org/stable/modules/generated/sklearn.cluster.DBSCAN.html. [Online].
[2] Chrome announces no obfuscation anymore on extensions. 2020. https://blog.chromium.org/2018/10/trustworthy-chrome-extensions-by-default.html.
[3] Extension APIs. 2020. https://cs.chromium.org/chromium/src/chrome/common/resources/. [Online].
[4] Native APIs. 2020. https://cs.chromium.org/chromium/src/chrome/browser/extensions/api/. [Online].
[5] Dénes Bán and Benjamin Livshits. 2019. Extension Vetting: Haven’t We Solved This Problem Yet?. In Proceedings of the Workshop on Measurements, Attacks, and Defenses for the Web (MADWeb).
[6] Sruthi Bandhakavi, Samuel T King, Parthasarathy Madhusudan, and Marianne Winslett. 2010. VEX: Vetting Browser Extensions for Security Vulnerabilities.