### Exponent and AES Vulnerability

The exponent is also susceptible to our attack. AES (Advanced Encryption Standard) is another example of an implementation that relies on lookup tables. Each round operation in AES involves several lookups to T-tables, which can result in input-dependent prefetching activities. Such AES implementations are already known to be vulnerable to cache side-channel attacks [24, 29]. However, our attack against AES is more challenging compared to those cache-based attacks because the prefetching is triggered only if the key bytes form a regular stride. Additionally, our attack requires the target implementation to have a loop structure (i.e., not fully unrolled); otherwise, the stride prefetching would not be triggered.

### Mitigation Strategies

#### Disabling Prefetcher
The root cause of the attack is the secret-dependent activity patterns from the IP-based stride prefetcher. A possible mitigation strategy is to disable this prefetcher on the processor core. Intel processors provide a method to control individual hardware prefetchers via a Model Specific Register (MSR). The stride prefetcher can be turned off by setting the leftmost bit (Bit #3) in the MSR with address 0x1a4 [54]. In Linux, user-level utilities like `msr-tools` [44] are available to manipulate the register. However, disabling the prefetcher may lead to a certain level of performance degradation.

#### Ensuring Constant Access Pattern
One software-based mitigation is to eliminate any involved lookup tables in the given implementation. For example, in the OpenSSL library's `GF2m_Square` function, the lookup to `SQR_tb` can be removed by replacing it with on-the-fly calculation. This countermeasure has already been applied in the patched version of the OpenSSL library [2]. Although the lookup-based technique generally achieves the highest performance optimization, this method results in inevitable performance degradation. The OpenSSL benchmarking tool reports that the patch causes a 4-8% performance drop.

Another possible mitigation is to make the memory access pattern of table lookups constant, regardless of the input. For instance, recent implementations of RSA modular exponentiation in OpenSSL use a scatter-gather technique [21]. This technique arranges elements in the lookup table so that all elements are accessed via a constant pattern. This approach can be generalized to any kind of lookup-based implementation.

#### Preventing Flush+Reload Attack
Our prefetching attack is based on the Flush+Reload technique. Therefore, any mitigation strategies against Flush+Reload attacks will also be effective against our attack. One prerequisite for this attack is that the memory in use must be shared between the attacker and the victim. The copy-on-access mechanism [59] is a software-based solution that hinders memory pages from being shared across security domains (e.g., processes or VMs). Specifically, it duplicates a shared copy of a physical page whenever it is accessed by multiple security domains.

Software diversification [10, 51] is another defense mechanism against Flush+Reload attacks. This technique dynamically randomizes the executable binary of software, thereby inherently restricting memory sharing.

### Conclusion

In this paper, we presented a new microarchitectural attack that exploits hardware-based data prefetching to leak secret data. Our attack targets the IP-based stride prefetcher, one of the hardware prefetchers included in recent Intel processors. We demonstrated the potential of the attack by recovering a private key in the ECDH algorithm using the latest version of the OpenSSL library. The proposed attack is not limited to this specific cryptographic algorithm; any implementation that utilizes a lookup table is subject to the attack, which exploits hardware prefetchers. Therefore, system developers and researchers should consider this attack as a new security threat when designing future systems. As a temporary countermeasure, we recommended several methods to mitigate the prefetching vulnerability on the processor. However, more effective and fundamental countermeasures need to be devised to minimize any possible performance degradation.

### Responsible Disclosure

We responsibly reported our findings of the hardware prefetching vulnerability to both OpenSSL and Intel. In response, OpenSSL addressed the issue and patched the `GF2m_Sqare` function (in `bn_gf2m.c`) by eliminating the table lookup operation.

### Acknowledgements

We are grateful to the anonymous reviewers and our shepherd, Boris Köpf, for their valuable feedback. We also thank Matt Caswell for suggesting the mitigation of the prefetching vulnerability in the OpenSSL library. This work was supported by the National Research Foundation of Korea (NRF) grant funded by the Korean government (MSIT) (No. 2017R1C1B5015045 and No. 2016R1A2A2A05005402) and by the MSIP (Ministry of Science, ICT & Future Planning), Korea, under the National Program for Excellence in SW supervised by the IITP (Institute for Information & Communications Technology Promotion) (2017-0-00096). This work was also supported in part by NSR grant (2018-057) and by an IITP grant funded by the MSIP (No. 2017-0-00184, Self-Learning Cyber Immune Technology Development).

### References

[1] Michael R Anderberg. 1973. Cluster Analysis for Applications (1st ed.). Elsevier.
...
[59] Ziqiao Zhou, Michael K. Reiter, and Yinqian Zhang. 2016. A Software Approach to Defeating Side Channels in Last-Level Caches. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (CCS 2016). 871–882.