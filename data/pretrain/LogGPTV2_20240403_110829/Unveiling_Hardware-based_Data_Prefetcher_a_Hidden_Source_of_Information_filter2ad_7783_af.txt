on the exponent, it is also susceptible to our attack.
AES is yet another instance of lookup-based implementations.
Each round operation involves several lookups to T-tables, which
will result in input-dependent prefetching activities. In fact, such
AES implementations are already known to be vulnerable to cache
side-channel attacks [24, 29]. However, our attack against AES is
a little more challenging compared to those cache-based attacks,
since the prefetching is triggered only if the key bytes form a regular
stride. Moreover, our attack requires the target implementation to
have a loop structure (i.e., not fully unrolled); otherwise, the stride
prefetching would not be triggered.
6.4 Mitigation
Disabling prefetcher. The root cause of the attack is the secret-
dependent activity patterns from the IP-based stride prefetcher.
Possible mitigation may involve disabling this prefetcher on the
processor core. The targeted Intel processors provide a method
to control individual hardware prefetchers via a Model Specific
Register (MSR). The stride prefetcher can be turned off by setting
the leftmost bit (Bit #3) in the MSR with address of 0x1a4 [54]. In
Linux, some user-level utilities are available such as msr-tools [44]
to manipulate the register. Achieving protection by suppressing the
prefetcher may incur a certain level of performance degradation.
Ensuring constant access pattern. One of the possible software-
based mitigations is to eliminate any involved lookup tables in a
given implementation. In our targeted function (i.e., GF2m_Sqare)
in the OpenSSL library, the lookup to SQR_tb can be removed by
replacing it with on-the-fly calculation. Such a countermeasure has
already been applied in the patched version of OpenSSL library2.
Since the lookup-based technique generally achieves the highest
performance optimization, this method results in inevitable perfor-
mance degradation. The OpenSSL benchmarking tool reports that
the patch causes 4-8% performance drop.
Another possible mitigation is to make the memory access pat-
tern of table lookup always constant regardless of the input. For
instance, recent implementations of RSA modular exponentiation
in OpenSSL adopt a scatter-gather technique [21]. It arranges el-
ements on the lookup table so that all the elements are accessed
via the constant pattern. This technique can be generalized to any
kind of lookup-based implementations.
Preventing Flush+Reload attack. Our prefetching attack is con-
structed upon Flush+Reload technique. Hence, any suggested miti-
gation strategies against Flush+Reload attack will be effective as a
countermeasure against our attack. One prerequisite of this attack
is that memory in use has to be shared between attacker and victim.
Copy-on-access mechanism [59] is a software-based solution that
hinders memory pages from being shared across security domains
(e.g., processes or VMs). Specifically, it duplicates a shared copy of
physical page whenever it is accessed by multiple security domains.
Software diversification [10, 51] is another defense mechanism
against Flush+Reload attack. This technique dynamically random-
izes the executable binary of software so that memory sharing is
inherently restricted.
7 CONCLUSION
In this paper, we presented a new microarchitectural attack that
exploits hardware-based data prefetching to leak secret data. Our at-
tack targets the IP-based stride prefetcher, which is one of the hard-
ware prefetchers enclosed in recent Intel processors. We demon-
strated the potential of the attack by recovering a private key in
ECDH algorithm with the latest version of OpenSSL library. The
proposed attack is not limited to this specific cryptographic algo-
rithm; any implementation that utilizes a lookup table are subject
to the attack, which exploits hardware prefetchers. Therefore, sys-
tem developers and researchers should consider this attack as a
new security threat when designing future systems. As a tempo-
rary countermeasure, we recommended several mitigating methods
against the prefetching vulnerability on the processor. However,
more effective and fundamental countermeasures need to be de-
vised against the attack to minimize any possible performance
degradation.
2https://github.com/openssl/openssl/commit/b336ce57f2d5cca803a920d2a9e622b588cead3c
Session 2A: Side Channel 1 CCS’18, October 15-19, 2018, Toronto, ON, Canada143RESPONSIBLE DISCLOSURE
We responsibly reported to OpenSSL as well as Intel about our
findings of the hardware prefetching vulnerability. In response,
OpenSSL addressed the issue and patched the GF2m_Sqare func-
tion (in bn_gf2m.c) by eliminating the table lookup operation.
ACKNOWLEDGEMENT
We are grateful to the anonymous reviewers and our shepherd,
Boris Köpf, for their valuable feedbacks. We also would like to
thank Matt Caswell for suggesting the mitigation of prefetching
vulnerability in OpenSSL library. This work was supported by the
National Research Foundation of Korea (NRF) grant funded by
the Korean government (MSIT) (No.2017R1C1B5015045 and No.
2016R1A2A2A05005402) and by the MSIP (Ministry of Science,
ICT & Future Planning), Korea, under the National Program for
Excellence in SW supervised by the IITP (Institute for Information &
communications Technology Promotion)(2017-0-00096). This work
was also supported in part by NSR grant (2018-057) and by an IITP
grant funded by the MSIP (No. 2017-0-00184, Self-Learning Cyber
Immune Technology Development).
REFERENCES
[1] Michael R Anderberg. 1973. Cluster Analysis for Applications (1st ed.). Elsevier.
[2] Diego F Aranha, Julio López, and Darrel Hankerson. 2010. Efficient software
implementation of binary field arithmetic using vector instruction sets. In In-
ternational Conference on Cryptology and Information Security in Latin America
(LATINCRYPT 2010). Springer, 144–161.
[3] AWS. 2018. Instance types of AWS EC2. https://aws.amazon.com/intel/
[4] G Berk, Mehmet Sinan Inci, Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar.
2015. A Faster and More Realistic Flush + Reload Attack on AES. In International
Workshop on Constructive Side-Channel Analysis and Secure Design (COSADE
2015). 111–126.
[5] Sarani Bhattacharya and Chester Rebeiro. 2016. A Formal Security Analysis of
Even-Odd Sequential Prefetching in Profiled Cache-Timing Attacks. In Proceed-
ings of the Hardware and Architectural Support for Security and Privacy (HASP
2016). 1–8.
[6] Sarani Bhattacharya, Chester Rebeiro, and Debdeep Mukhopadhyay. 2012. Hard-
ware prefetchers leak : A revisit of SVF for cache-timing attacks. In IEEE/ACM
45th International Symposium on Microarchitecture Workshops (MICROW 2012).
17–23.
[7] Ferdinand Brasser, Urs Müller, Alexandra Dmitrienko, Kari Kostiainen, Srdjan
Capkun, and Ahmad-Reza Sadeghi. 2017. Software Grand Exposure: SGX Cache
Attacks Are Practical. In 11th USENIX Workshop on Offensive Technologies (WOOT
2017). 1–12.
[8] Tien-Fu Chen and Jean-Loup Baer. 1995. Effective hardware-based data prefetch-
ing for high-performance processors. IEEE Trans. Comput. 44, 5 (1995), 609–623.
[9] Jean-Sebastien Coron. 1999. Resistance against differential power analysis for el-
liptic curve cryptosystems. In International Workshop on Cryptographic Hardware
and Embedded Systems (CHES 1999). Springer, 292–302.
[10] Stephen Crane, Andrei Homescu, Stefan Brunthaler, Per Larsen, and Michael
Franz. 2015. Thwarting Cache Side-Channel Attacks Through Dynamic Software
Diversity. In Proceedings of the 22th Network and Distributed System Security
Symposium (NDSS 2015). 8–11.
[11] Craig Disselkoen, David Kohlbrenner, Leo Porter, and Dean Tullsen. 2017.
PRIME+ABORT: A Timer-Free High-Precision L3 Cache Attack using Intel TSX.
In Proceedings of the 26th USENIX Security Symposium. 51–67.
[12] Goran Doychev, Dominik Feld, Boris Köpf, Laurent Mauborgne, and Jan Reineke.
2013. CacheAudit: A Tool for the Static Analysis of Cache Side Channels. In
Proceedings of the 22th USENIX Security Symposium. 431–446.
[13] Goran Doychev and Boris Köpf. 2017. Rigorous Analysis of Software Coun-
termeasures Against Cache Attacks. In Proceedings of the 38th ACM SIGPLAN
Conference on Programming Language Design and Implementation. 406–421.
[14] Dmitry Evtyushkin, Ryan Riley, Nael Abu-Ghazaleh, and Dmitry Ponomarev.
2018. BranchScope : A New Side-Channel Attack on Directional Branch Predictor.
In Proceedings of the 23rd International Conference on Architectural Support for
Programming Languages and Operating Systems (ASPLOS 2018). 693–707.
[15] Hongyu Fang, Sai Santosh Dayapule, Fan Yao, and Guru Venkataramani. 2018.
Prefetch-guard: Leveraging hardware prefetchers to defend against cache timing
channels. In IEEE International Symposium on Hardware Oriented Security and
Trust (HOST 2018). 1–4.
[16] John W C Fu, Janak H Patel, and Bob L Janssens. 1992. Stride directed prefetching
in scalar processors. Proceedings of the 25th annual ACM/IEEE International
Symposium on Microarchitecture (MICRO 25) (1992), 102–110.
[17] Adi Fuchs and Ruby B. Lee. 2015. Disruptive prefetching: Impact on Side-Channel
Attacks and Cache Designs. In Proceedings of the 8th ACM International Systems
and Storage Conference (SYSTOR 2015). 1–12. https://doi.org/10.1145/2757667.
2757672
[18] Cesar Pereida García and Billy Bob Brumley. 2017. Constant-Time Callees with
Variable-Time Callers. In Proceedings of the 26th USENIX Security Symposium.
83–98.
[19] Qian Ge, Yuval Yarom, David Cock, and Gernot Heiser. 2018. A Survey of Microar-
chitectural Timing Attacks and Countermeasures on Contemporary Hardware.
Journal of Cryptographic Engineering 8, 1 (2018), 1–27.
[20] Daniel Genkin, Luke Valenta, and Yuval Yarom. 2017. May the Fourth Be With You:
A Microarchitectural Side Channel Attack on Several Real-World Applications of
Curve25519. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security (CCS 2017). 845–858.
[21] Vinodh Gopal, James Guilford, Erdinc Ozturk, Wajdi Feghali, Gil Wolrich, and
Martin Dixon. 2009. Fast and Constant-Time Implementation of Modular Expo-
nentiation. In Embedded Systems and Communications Security.
[22] Daniel Gruss, Clementine Maurice, Anders Fogh, Moritz Lipp, and Stefan Man-
gard. 2016. Prefetch SideChannel Attacks: Bypassing SMAP and Kernel ASLR. In
Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications
Security (CCS 2016). 368–379.
[23] Daniel Gruss, Clementine Maurice, Klaus Wagner, and Stefan Mangard. 2016.
Flush+Flush: A Fast and Stealthy Cache Attack. In Proceedings of the 13th Inter-
national Conference on Detection of Intrusions and Malware, and Vulnerability
Assessment (DIMVA 2006). 279–299.
[24] Daniel Gruss, Raphael Spreitzer, and Stefan Mangard. 2015. Cache Template
Attacks: Automating Attacks on Inclusive Last-Level Caches. In Proceedings of
the 24th USENIX Security Symposium. 897–912.
[25] Berk Gulmezoglu, Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar. 2016.
Cache Attacks Enable Bulk Key Recovery on the Cloud. In International Confer-
ence on Cryptographic Hardware and Embedded Systems (CHES 2016). 368–388.
[26] Taylor Hornby. 2016. Side-Channel Attacks on Everyday Applications: Distin-
guishing Inputs with FLUSH+RELOAD. In BlackHat USA 2016.
[27] Intel. 2018. Intel 64 and IA-32 Architectures Optimization Reference Manual (April
2018).
[28] Intel. 2018. Intel 64 and IA-32 Architectures Software Developer Manuals (March
2018).
[29] Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar. 2015. S$A: A shared cache
attack that works across cores and defies VM sandboxing - And its application to
AES. In Proceedings of 2015 IEEE Symposium on Security and Privacy. 591–604.
[30] Teresa L Johnson, Matthew C Merten, and Wen-Mei W Hwu. 1997. Run-time
spatial locality detection and optimization. In Proceedings of the 30th annual
ACM/IEEE International Symposium on Microarchitecture (MICRO 30). IEEE Com-
puter Society, 57–64.
[31] Norman P Jouppi. 1990. Improving direct-mapped cache performance by the
addition of a small fully-associative cache and prefetch buffers. In Proceedings of
the 17th annual international symposium on Computer Architecture (ISCA 1990).
IEEE, 364–373.
[32] Marc Joye and Sung-Ming Yen. 2002. The Montgomery Powering Ladder. In
International Workshop on Cryptographic Hardware and Embedded Systems (CHES
2002). 291–302.
[33] Thierry Kaufmann, Herve Pelletier, Serge Vaudenay, and Karine Villegas. 2016.
When constant-time source yields variable-time binary: Exploiting curve25519-
donna built with MSVC 2015. In 15th International Conference on Cryptology and
Network Security (CANS 2016). 573–582.
[34] Neal Koblitz. 1987. Elliptic curve cryptosystems. Math. Comp. 48, 177 (1987),
203–209.
[35] Paul Kocher, Daniel Genkin, Daniel Gruss, Werner Haas, Mike Hamburg, Moritz
Lipp, Stefan Mangard, Thomas Prescher, Michael Schwarz, and Yuval Yarom. 2018.
Spectre Attacks: Exploiting Speculative Execution. arXiv preprint arXiv:1801.01203
(2018).
[36] Moritz Lipp, Daniel Gruss, Raphael Spreitzer, Clementine Maurice, and Stefan
Mangard. 2016. ARMageddon: Cache Attacks on Mobile Devices. In Proceedings
of the 25th USENIX Security Symposium. 549–564.
[37] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas,
Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom, and Mike Hamburg.
2018. Meltdown. arXiv preprint arXiv:1801.01207 (2018).
[38] Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and Ruby B. Lee. 2015. Last-
level cache side-channel attacks are practical. In Proceedings of 2015 IEEE Sympo-
sium on Security and Privacy. 605–622.
[39] Julio Lopez and Ricardo Dahab. 1999. Fast Multiplication on Elliptic Curves over
GF(2 to m) without Precomputation. In CRYPTO 1999. 316–327.
[40] James MacQueen. 1967. Some methods for classification and analysis of multivari-
ate observations. In Proceedings of the 5th Berkeley Symposium on Mathematical
Session 2A: Side Channel 1 CCS’18, October 15-19, 2018, Toronto, ON, Canada144[41] Giorgi Maisuradze and Christian Rossow. 2018.
Statistics and Probability, Vol. 1. Oakland, CA, USA, 281–297.
SPECULOSE: Analyzing
the Security Implications of Speculative Execution in CPUs. arXiv preprint
arXiv:1801.04084 (2018).
[42] Ahmad Moghimi, Gorka Irazoqui, and Thomas Eisenbarth. 2017. CacheZoom:
How SGX Amplifies The Power of Cache Attacks. In International Conference on
Cryptographic Hardware and Embedded Systems (CHES 2017). 69–90.
[43] Peter L Montgomery. 1987. Speeding the Pollard and elliptic curve methods of
factorization. Math. Comp. 48, 177 (1987), 243–264.
[44] Msrtool. 2018. The website of Msrtool project. https://www.coreboot.org/Msrtool
[45] National Institute of Standards and Technology. 2013. FIPS PUB 186-4 Digital
Signature Standard (DSS).
[46] Katsuyuki Okeya, Hiroyuki Kurumatani, and Kouichi Sakurai. 2000. Elliptic
Curves with the Montgomery-Form and Their Cryptographic Applications. In
International Workshop on Public Key Cryptography (PKC 2000), Hideki Imai and
Yuliang Zheng (Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg, 238–257.
[47] OpenSSL. 2018. OpenSSL, Cryptography and SSL/TLS Toolkit. http://www.
openssl.org
[48] Dag Arne Osvik, Adi Shamir, and Eran Tromer. 2006. Cache attacks and counter-
measures: The case of AES. In Cryptographers Track at the RSA Conference (CT-RSA
2006). 1–20.
[49] Subbarao Palacharla and Richard E Kessler. 1994. Evaluating stream buffers as
a secondary cache replacement. In Proceedings of the 21st annual international
symposium on Computer Architecture (ISCA 1994). IEEE Computer Society Press,
24–33.
[50] Cesar Pereida García, Billy Bob Brumley, and Yuval Yarom. 2016. "Make Sure
DSA Signing Exponentiations Really are Constant-Time". In Proceedings of the
2016 ACM SIGSAC Conference on Computer and Communications Security (CCS
2016). 1639–1650.
[51] Ashay Rane, Calvin Lin, and Mohit Tiwari. 2015. Raccoon: Closing Digital
Side-Channels through Obfuscated Execution. In Proceedings of the 24th USENIX
Security Symposium. 431–446.
[52] Michael Schwarz, Samuel Weiser, Daniel Gruss, Clementine Maurice, and Ste-
fan Mangard. 2017. Malware Guard Extension: Using SGX to Conceal Cache
Attacks. In International Conference on Detection of Intrusions and Malware, and
Vulnerability Assessment (DIMVA 2017). 3–24.
[53] Alan Jay Smith. 1982. Cache memories. ACM Computing Surveys (CSUR) 14, 3
(1982), 473–530.
Disclosure of H/W prefetcher control on
[54] Vish Viswanathan. 2014.
https://software.intel.com/en-us/articles/
some Intel processors.
disclosure-of-hw-prefetcher-control-on-some-intel-processors
[55] Shuai Wang, Pei Wang, Xiao Liu, Danfeng Zhang, and Dinghao Wu. 2017. CacheD:
Identifying Cache-Based Timing Channels in Production Software. In Proceedings
of the 26th USENIX Security Symposium. 235–252.
[56] Yuval Yarom and Naomi Benger. 2014. Recovering OpenSSL ECDSA Nonces
Using the Flush+Reload Cache Side-channel Attack.
IACR Cryptology ePrint
Archive, Report 2014/140 (2014).
[57] Yuval Yarom and Katrina Falkner. 2014. Flush + Reload : a High Resolution , Low
Noise , L3 Cache Side-Channel Attack. In Proceedings of the 23th USENIX Security
Symposium. 719–732.
[58] Yinqian Zhang, Ari Juels, Michael K. Reiter, and Thomas Ristenpart. 2014. Cross-
Tenant Side-Channel Attacks in PaaS Clouds. In Proceedings of the 2014 SIGSAC
ACM conference on Computer and communications security (CCS 2014). 990–1003.
[59] Ziqiao Zhou, Michael K. Reiter, and Yinqian Zhang. 2016. A Software Approach
to Defeating Side Channels in Last-Level Caches. In Proceedings of the 2016
ACM SIGSAC Conference on Computer and Communications Security (CCS 2016).
871–882.
Session 2A: Side Channel 1 CCS’18, October 15-19, 2018, Toronto, ON, Canada145