The DFAs generated by our scheme include weights on the edges
that can be used in order to generate “characteristic” synthetic ses-
sions using the augmented hit counts we discussed in §5.3. This can
be achieved by simply simulating a “probabilistic” DFA, where we
determine the next state using weighted sampling from the various
outgoing edges, terminating the procedure when none of the outgo-
ing edges are chosen. This procedure only captures the qualitative
structure; for self-loops that allow a variable number of connec-
tions, the distribution of the number of connections needs to be
explicitly determined. We also note that since we infer our DFAs
based on the output of session extraction—whose false negative
performance may not be uniform across all types of sessions—this
may bias the hit counts, depending on the degree to which the par-
ticular application conforms with our Poisson assumptions. In such
cases, it may be possible to improve on the weights in these DFAs
by comparing synthetic output with traces.
A particularly fruitful area for near-term future work is extending
our methods to extract application sessions that involve multiple
remote hosts (per the discussion in §4.3). Our work in [16] gives
some preliminary results in this regard, ﬁnding that this extension
better captures the behavior of peer-to-peer applications, proxies
(mail and Web), and a number of other applications. For example,
proxies typically demonstrate the characteristic session structure
of an incoming connection from one remote host followed by an
outgoing connection on the same port to another remote host.
More broadly, we hope that our session extraction and structure
abstraction tools comprise a useful addition to the toolbox of ad-
ministrators and researchers. Our session extraction approach can
be thought of as inferring “hidden causality” in network connec-
tions; it identiﬁes causally related connections by exploiting the ob-
servation that they typically occur closer to each other in practice
compared to causally unrelated connections. This observation is
the basis of our statistical test, which is by no means a bullet-proof
causality test, in that it has non-negligible false negative ratio (and
in the adversarial input case, an adversary simply needs to ensure
that this connections are far apart enough in time to evade our test).
However, its false positive ratio is bounded (as shown in §4.3), and
thus most of the inferred sessions are indeed casually related con-
nections. Furthermore, in cases such as worm propagation, where
(if we extend the model to include multiple remote hosts) we can
relate outgoing infection attempts to the initial infection connec-
tion, the scale of the number of connections originated by the host
and the speed of the post-compromise activity may prove readily
and quickly detectable by our session extraction mechanism.
8. CONCLUSION
In this work we have demonstrated a statistical technique to ex-
tract application sessions from a connection-level trace of network
activity, and shown how to deduce descriptors that can be used by
an analyst to capture the qualitative structure of such sessions. Our
results demonstrate that a simple Poisson-based statistical tech-
nique, combined with a greedy approach for inferring DFA de-
scriptors, works well over many of the applications in our trace.
The results were, in some ways, surprising to us in terms of the
various ways in which a particular application’s structure manifests
in our traces, and it is for this reason the validation of our results is
still incomplete. Sessions reﬂecting protocol speciﬁcations are rel-
atively easy to validate (although even this is hard for closed-source
applications), while others reﬂecting user behavior (or) server-side
conﬁguration (or) client-side conﬁguration are considerably more
difﬁcult to validate purely from in-network data.
In the future, we aim to evaluate and validate our methods over
more applications; extend our approach to the case where a lo-
cal host interacts during a session with multiple remote hosts; and
devise mechanisms to collate descriptors for closely-related pro-
tocols. More broadly, the fact that our methods offer a general
“causality” tool that can detect some forms of anomalous sessions
also holds promise for detecting a variety of network attacks.
9. ACKNOWLEDGMENTS
We would like to thank Mark Allman, Rodrigo Fonseca, Dilip
Joseph, Christian Kreibich, Karthik Lakshminarayanan, Ruoming
Pang, Ananth Rao, Robin Sommer, Ion Stoica, and Mythili Vu-
tukuru, for their helpful comments about the paper. We would
also like to thank Manikandan Narayanan for helpful discussions.
This work was supported in part by grants STI-0334088, ITR/ANI-
0205519 and NSF-0433702 from the National Science Foundation,
for which we are grateful.
10. REFERENCES
[1] P. Barford and M. Crovella. Generating representative web
workloads for network and server performance evaluation. In
Proc. SIGMETRICS, pages 151–160, New York, NY, USA,
1998. ACM Press.
[2] A. Blum, D. Song, and S. Venkataraman. Detection of
interactive stepping stones: Algorithms and conﬁdence
bounds. In 7th International Symposium on Recent Advances
in Intrusion Detection (RAID 2004), pages 20–29, Sep 2004.
[3] J.-C. Bolot. End-to-end packet delay and loss behavior in the
internet. In Proc. SIGCOMM, Sept 1993.
[4] K. Claffy, H.-W. Braun, and G. Polyzos. A parameterizable
methodology for internet trafﬁc ﬂow proﬁling. IEEE JSAC,
13(8):1481–1494, 1995.
[5] M. Costa, J. Crowcroft, M. Castro, A. Rowstron,
C. Shannon, and J. Brown. Can we contain Internet worms?
In Proc. HOTNETS, 2004.
[6] J. R. Crandall and F. T. Chong. Minos: Control Data Attack
Prevention Orthogonal to Memory Model. In Proc.
International Symposium on Microarchitecture, Oregon, Dec
2004.
[7] M. Crovella and A. Bestavros. Self-similarity in world wide
web trafﬁc: Evidence and possible causes. In Proc.
SIGMETRICS, May 1996.
[8] W. Cui, V. Paxson, N. Weaver, and R. H. Katz.
Protocol-Independent Adaptive Replay of Application
Dialog. In Proc. NDSS, San Deigo, CA, Feb 2006.
[9] P. Danzig, S. Jamin, R. Caceres, D. Mitzel, and D. Estrin.
”an empirical workload model for driving wide-area tcp/ip
network simulations”. Internetworking: Research and
Experience, 3(1):1–26, 1992.
[10] S. Floyd and V. Paxson. Difﬁculties in simulating the
internet. IEEE/ACM Transactions on Networking,
9(4):392–403, 2001.
[11] H. Fowler and W. Leland. Local area network trafﬁc
characteristics, with implications for broadband network
congestion management. IEEE JSAC, 9(7):1139–1149, 1991.
http://odur.let.rug.nl/∼vannoord/Fsa/.
[12] Finite State Automata Utilities (version 6.2).
[13] Graphviz - Graph Visualization Software.
http://www.graphviz.org/.
[14] S. Heimlich. Trafﬁc characterization of the nsfnet national
backbone. In Proc. Winter USENIX Conference, 1990.
[15] R. Jain and S. Routhier. Packet trains — measurements and a
new model for computer network trafﬁc. IEEE JSAC,
4(6):986–995, 1986.
[16] J. Kannan, J. Jung, V. Paxson, and C. E. Koksal. Detecting
hidden causality in network connections. Technical report,
University of California, Berkeley, 2005.
[17] A. Kumar, V. Paxson, and N. Weaver. Exploiting underlying
structure for detailed reconstruction of an internet-scale
event. In Proc. ACM IMC, Oct 2005.
[18] W. Leland, M. Taqqu, W. Willinger, and D. Wilson”. ”on the
self-similar nature of ethernet trafﬁc”. IEEE/ACM
Transactions on Networking, 2(1), 1994.
[19] J. Ma, K. Levchenko, C. Kreibich, S. Savage, and
G. Voelker. Automatic protocol inference: Unexpected
means of protocol inference. In Proc. ACM IMC, Oct 2006.
[20] D. A. Menasc´e, V. A. F. Almeida, R. Fonseca, and M. A.
Mendes. A methodology for workload characterization of
e-commerce sites. In Proc. ACM conference on Electronic
commerce, pages 119–128, 1999.
[21] J. Mogul. End-to-end internet packet dynamics. In Proc.
SIGCOMM, Sept 1997.
[22] A. W. Moore and D. Zuev. Internet trafﬁc classiﬁcation using
Bayesian analysis techniques. In SIGMETRICS ’05, pages
50–60, 2005.
[23] J. Newsome and D. Song. Dynamic taint analysis for
automatic detection, analysis, and signature generation of
exploits on commodity software. In Proc. NDSS, 2005.
[24] C. Nuzman, I. Saniee, W. Sweldens, and A. Weiss. A
compound model for TCP connection arrivals for LAN and
WAN applications. Computer Networks, 40(3):319–337,
2002.
[25] J. Padhye, V. Firoiu, D. Towsley, and J. Krusoe. Modeling
TCP throughput: A simple model and its empirical
validation. In Proc. ACM SIGCOMM, 1998.
[26] V. Paxson. Empirically-derived analytic models of wide-area
tcp connections. IEEE/ACM Transactions on Networking,
2(4), 1994.
[27] V. Paxson. Automated packet trace analysis of tcp
implementations. In Proc. SIGCOMM, pages 167–179, New
York, NY, USA, 1997. ACM Press.
[28] V. Paxson. End-to-end internet packet dynamics. In Proc.
SIGCOMM, Sept 1997.
[29] V. Paxson and S. Floyd. Wide area trafﬁc: the failure of
Poisson modeling. IEEE/ACM Transactions on Networking,
3(3):226–244, 1995.
[30] TCP Ports List, UDP Ports List.
http://seifried.org/security/ports/.
[31] The Protocol Informatics Project.
http://www.baselineresearch.net/PI/.
[32] S. M. Ross. Introduction to Probability Models, 8th Edition.
Academic Press, 2003.
[33] F. D. Smith, F. Hernandez-Campos, K. Jeffay, and D. Ott.
What TCP/IP protocol headers can tell us about the web. In
SIGMETRICS/Performance, pages 245–256, 2001.
[34] S. Staniford, S. Cheung, R. Crawford, M. Dilger, J. Frank,
J. Hoagland, K. Levitt, C. Wee, R. Yip, and D. Zerkle. GrIDS
– A graph-based intrusion detection system for large
networks. In Proc. National Information Systems Security
Conference, 1996.
[35] S. Staniford-Chen and L. T. Heberlein. Holding intruders
accountable on the internet. In Proc. IEEE Symposium on
Security and Privacy, Washington, 1995.
[36] Timbuktu Pro Remote Control Software. http:
//www.netopia.com/software/products/tb2/.
[37] W. Willinger, M. Taqqu, R. Sherman, and D. Wilson.
Self-similarity through high-variability: Statistical analysis
of ethernet lan trafﬁc at the source level. In Proc.
SIGCOMM, Sept 1995.
[38] Y. Xie, V. Sekar, D. Maltz, M. Reiter, and H. Zhang. Worm
Origin Identiﬁcation Using Random Moonwalks. In Proc.
IEEE Security and Privacy, Oakland, CA, May 2005.
[39] K. Yoda and H. Etoh. Finding a connection chain for tracing
intruders. In Proc. ESORICS, pages 191–205, London, UK,
2000. Springer-Verlag.
[40] Y. Zhang, L. Breslau, V. Paxson, and S. Shenker. On the
characteristics and origins of internet ﬂow rates. In Proc.
ACM SIGCOMM, 2002.
[41] Y. Zhang, N. Dufﬁeld, V. Paxson, and S. Shenker. On the
constancy of internet path properties. In Proc. ACM
SIGCOMM Internet Measurement Workshop, 2001.
[42] Y. Zhang and V. Paxson. Detecting Stepping Stones. In Proc.
9th USENIX Security Symposium, Denver, CO, Aug 2000.
APPENDIX
A. DERIVATION OF THE FALSE
POSITIVE RATE
In this section we prove Theorem 1 in two steps: First, we con-
sider the case of a single Poisson process with rate λ, and compute
the probability that it has two arrivals within x time units of each
other in the time interval [0, τ ]. Then, we generalize this to the
scenario where there are two independent Poisson processes with
different rates.
LEMMA 1. Let {Xi, i (cid:3) 1} be the interarrival times of the
Poisson process {N (t), t (cid:3) 0} with an arrival rate λ. Then, for
some τ > 0
Pr[Xi  x|N (τ ) = n] =
“ τ − x
”n
τ
”
=
1 − x
τ
n
.
“
”
x
τ
This holds since the conditional distribution for arrival epochs fol-
lows the order statistics for a joint uniform distribution of n random
variables [32]. Therefore
Pr[Xi < x|N (τ ) = n] = 1 −
(cid:2) 1 −
1 − x
τ
1 − n
n
”
=
nx
τ
,
(2)
(3)
“
“
where (3) follows since the higher order terms in the Binomial ex-
pansion satisfy 
!“ x
τ
n
2
”2 −
!“ x
”3
n
3
τ
+ ··· (cid:3) 0.
Since the time for the ﬁrst arrival is identically distributed with the
ith interarrival time,
Pr[Xi < x|N (τ ) = N ] ≤ N
x
τ , for 1 ≤ i ≤ N − 1
Next, let us look at the probability that there exists such an inter-
arrival time within all n arrivals.
3
Pr[Xi < x for some i ≤ N (τ )|N (τ ) = n]
5
2
4[
X
i(cid:2)n
Pr [Xi < x|N (τ ) = n]
{Xi < x|N (τ ) = n}
= Pr
(cid:2)
i(cid:2)n
= (n − 1)n
x
τ
,
(5)
where (4) follows from the union bound.
Finally, using (5) we ﬁnd a bound for the unconditional proba-
bility that there exists an interarrival of size smaller than x in the
entire window of τ seconds, where for some i ≤ N (τ ),
Pr[Xi < x] =
(E[N (τ )])2 = λ2τ x
(6)
x
τ
where (6) follows since the variance of a Poisson random variable
is equal to its mean. Note that the bound we ﬁnd becomes tight if
the average interarrival time is large compared to x, i.e., λx (cid:8) 1.
In this regime, the probability that two or more occurrences of such
interarrivals is highly unlikely. Thus, the higher order terms in the
binomial expansion are negligible and the union bound is tight.
We now generalize the previous lemma to the case when there
are two types of sessions, T1 and T2, seen at a given local host.
LEMMA 2. Let {N1(t), t (cid:3) 0} and {N2(t), t (cid:3) 0} be
two independent Poisson processes with rates λ1 and λ2 respec-
tively. Let P [N1(τ ), N2(τ ), x] be the probability that an arrival in
N1(t), t (cid:2) τ is followed by an arrival of N2(t), t (cid:2) τ within x
time units. Then,
P [N1(τ ), N2(τ ), x] (cid:2) λ1λ2τ x.
(7)
PROOF. Consider the combined process consisting of arrivals
from both N1 and N2. Since this aggregate process is Poisson with
rate (λ1 + λ2), the probability that an interarrival of less than x
occurs is upper bounded by (λ1 + λ2)2τ x by Lemma 1. Among
such pairs we need to count those for which the ﬁrst arrival belongs
to N1 and the second arrival belongs to N2. From the independence
of the two processes,
P [N1(τ ), N2(τ ), x] (cid:2) (λ1 + λ2)2τ x ·
λ1
λ1 + λ2
·
λ2
λ1 + λ2
= λ1λ2τ x.
(8)
Note that Theorem 1 is a direct consequence of Lemma 2. We
simply plug τ = 1 since we deal with the rate of false positives,
i.e., number of false positives per time unit. This is the basis for the
statistical test in our session extraction approach.
(4)