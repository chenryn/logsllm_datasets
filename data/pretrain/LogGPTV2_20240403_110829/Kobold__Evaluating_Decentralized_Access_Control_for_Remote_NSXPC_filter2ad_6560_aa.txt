title:Kobold: Evaluating Decentralized Access Control for Remote NSXPC
Methods on iOS
author:Luke Deshotels and
Costin Carabas and
Jordan Beichler and
Razvan Deaconescu and
William Enck
Kobold: Evaluating Decentralized Access Control for
Remote NSXPC Methods on iOS
Luke Deshotels
North Carolina State University,
Samsung Research America
PI:EMAIL
Costin Carabas,
University POLITEHNICA of Bucharest
PI:EMAIL
Jordan Beichler
North Carolina State University
PI:EMAIL
R˘azvan Deaconescu
University POLITEHNICA of Bucharest
PI:EMAIL
William Enck
North Carolina State University
PI:EMAIL
Abstract—Apple uses several access control mechanisms to
prevent third party applications from directly accessing secu-
rity sensitive resources, including sandboxing and ﬁle access
control. However, third party applications may also indirectly
access these resources using inter-process communication (IPC)
with system daemons. If these daemons fail to properly enforce
access control on IPC, confused deputy vulnerabilities may
result. Identifying such vulnerabilities begins with an enumer-
ation of all IPC services accessible to third party applications.
However, the IPC interfaces and their corresponding access
control policies are unknown and must be reverse engineered at
a large scale. In this paper, we present the Kobold framework
to study NSXPC-based system services using a combination
of static and dynamic analysis. Using Kobold, we discovered
multiple NSXPC services with confused deputy vulnerabilities
and daemon crashes. Our ﬁndings include the ability to activate
the microphone, disable access to all websites, and leak private
data stored in iOS File Providers.
Keywords-access control, iOS, iPhone, inter-process commu-
nication, fuzzer, attack surface, automation, policy analysis
I. INTRODUCTION
Apple’s iOS App Store offers over 2 million applica-
tions [26], and in 2017 was used by half a billion customers
per week [27]. To protect users, third party applications run
within the conﬁnes of a sandbox that limits the number of
directly accessible resources. However, applications can also
indirectly access sensitive resources through inter-process
communication (IPC) with system daemons. For example, an
application does not have direct access to a user’s calendar,
but can use services provided by a calendar managing
daemon to view and modify calendar events. If a system
daemon does not properly enforce access control, a third-
party application may be able to abuse the daemon as a
confused deputy [20] to perform some action that damages
the system or violates the user’s privacy.
IPC-based confused deputy vulnerabilities are not new.
Woodpecker [17] uses data-ﬂow analysis on pre-loaded
Android applications to enumerate dangerous services ex-
posed to other applications. However, several features (e.g.,
dynamic dispatching for method calls) make data ﬂow
analysis less practical for iOS binaries. To the best of our
knowledge, there exists no systematic enumeration of iOS
remote methods accessible to third party applications. The
closest related work is existing IPC fuzzers for iOS [2],
[22], [30] that probe for code ﬂaws such as type confusion
or dereferencing vulnerabilities, which can be exploited
to obtain arbitrary code execution. However, these fuzzers
do not attempt to enumerate remote methods or identify
confused deputy vulnerabilities. From a policy perspective,
SandScout [10] and iOracle [9] detect access control policy
ﬂaws in iOS; however, they are limited to the ﬁle system.
iOS system daemons frequently protect IPC using static
capabilities called entitlements, which are immutable key-
value pairs bound to an executable’s code signature at
compile time. To enforce access control policy on IPC,
system daemons often use hard-coded conditional checks
based on a caller’s entitlements. Unfortunately,
there is
limited understanding of IPC on iOS, despite the growing
amount of literature on iOS application [4], [8], [12], [19],
[25], [29] and platform security [9], [10]. iOS deﬁnes several
IPC interface abstractions, many of which exist for legacy
reasons. The state-of-the-art interface type is called XPC.1
This paper focuses on the object-oriented version of XPC
called NSXPC (Next Step XPC). Speciﬁcally, we seek
to answer: Which security and privacy sensitive NSXPC
methods are accessible to third party applications? The
answer represents an attack surface of remote methods that
may be exploited by third party apps through IPC.
To answer this question, we address three research chal-
lenges. First, the set of entitlements available to third party
applications is unknown. We identify two sets of entitle-
ments available to third party applications: a public set
accessible to all developers, and a semi-private set that Apple
1To the best of our knowledge, Apple has not expanded this acronym
provides only to select developers. For example, the Uber
application was found to possess a potentially dangerous en-
titlement normally unavailable to third party applications [6].
Second, the set of NSXPC services accessible to third party
applications is unknown. The executables that provide these
services are closed source and there is no centralized policy
mapping services to their entitlement requirements. Third,
which NSXPC services are security or privacy sensitive is
unknown. The semantics of these services are not publicly
documented, and data ﬂow analysis in iOS is nontrivial.
In this paper, we present
the Kobold2 framework for
studying NSXPC services in iOS. Kobold leverages two
key insights. First, the standardized IPC interfaces (e.g.,
NSXPC) contain predictable patterns in compiled code that
are identiﬁable via static analysis. Second, error messages
returned by unauthorized attempts to access IPC services can
provide a model of the iOS IPC access control policy. Using
these insights, Kobold provides a pattern-based, static binary
program analysis to enumerate NSXPC interfaces and then
dynamically uses systematic probing to extract an approxi-
mation of the access control policy encoded by conditional
checks within a given service. We used Kobold to study
iOS 9, 10 and 11 and found multiple NSXPC services with
confused deputy vulnerabilities and daemon crashes. The
discovered vulnerabilities allow third-party applications to
activate the microphone, disable access to all websites, and
leak private data stored in iOS File Providers. All issues
have been reported to Apple. At the time of writing, Apple
has provided two CVEs in response to our disclosure and is
working to resolve remaining issues. After ﬁxes are made,
we plan to publicly release Kobold as open source code.
This paper makes the following contributions:
• We present Kobold, the ﬁrst framework for evaluating
NSXPC access control policies implemented in iOS
system code. Kobold enumerates the NSXPC services
accessible to third party applications and uses heuristics
to determine which services are likely to be exploited.
• We perform the ﬁrst measurement of semi-private enti-
tlements. We analyze approximately six thousand popu-
lar third party applications and 100 thousand randomly
selected third party applications to determine which
semi-private entitlements Apple distributes to an undis-
closed subset of third party developers.
• We identify previously unknown security issues includ-
ing three categories of confused deputy vulnerabilities
and fourteen daemon crashes. Our ﬁndings include
crashes for root authority daemons, unprivileged access
to Mobile Device Management (MDM) functionality,
and microphone activation without user permission.
Kobold does not require a jailbroken device. However, a
jailbroken device can provide supplemental data that may
assist in identifying vulnerabilities. Furthermore, Kobold is
2A spirit from German folklore that haunts mines.
2
not restricted to a speciﬁc version of iOS and can be used
to study new versions as they are released.
The remainder of the paper proceeds as follows. Section II
provides background on iOS IPC and access control. Sec-
tion III overviews Kobold. Section IV details the implemen-
tation of Kobold. Section V presents the results of the semi-
private entitlement survey. Section VI quantiﬁes the ports,
methods, arguments, and entitlement requirements enumer-
ated by Kobold. Section VII demonstrates Kobold’s ability
to detect previously unknown policy ﬂaws and crashes.
Section VIII discusses limitations. Section IX overviews
related work. Section X concludes.
II. BACKGROUND
iOS is Apple’s operating system for mobile devices (i.e.,
iPhone, iPad, iPod). It is very similar to macOS, watchOS,
and tvOS, which are all based on the XNU (X is Not Unix)
kernel. XNU is a hybrid kernel that combines the Mach
microkernel, FreeBSD, and a driver framework called I/O
Kit. Mach provides much of the Inter-Process Communica-
tion (IPC) functionality through mach-messages. FreeBSD
provides the ﬁle system and the TrustedBSD Mandatory
Access Control (MAC) Framework, which allows Apple
to hook system calls and implement sandboxing. Finally,
as interfaces between user space and kernel space, I/O
Kit drivers are often the target of fuzzing. The remainder
of this section will explain Mach IPC and access control
mechanisms that regulate IPC on iOS.
A. Mach IPC
IPC on iOS is built upon the Mach microkernel. The
primitive components of Mach IPC are mach-messages
and mach-ports. A service-providing process can host re-
mote methods by registering a name for a mach-port, and
clients can send messages to that port
in order to call
the remote methods. The mach-port name registration is
facilitated by launchd, which also assists clients in con-
necting to mach-ports. For example, the location daemon,
locationd, offers remote methods on the mach-port named
“com.apple.locationd.registration”. A client process can ac-
cess these methods by asking launchd to connect it to the
“com.apple.locationd.registration” mach-port. If the connec-
tion is successful, the client can then send messages to the
server via the mach-port. If the messages are well formed,
and the client has sufﬁcient capabilities, the server will the
execute the methods for the client (e.g., locationd could
provide access to the user’s coordinates). While launchd
plays a low-level role in securely facilitating mach-port
connections, ﬂaws in launchd are out of scope for Kobold.
XPC and NSXPC: The process of encoding and decod-
ing mach-messages is complex, error prone, and security
sensitive. Abstractions are provided by Apple to make IPC
simpler for developers. The state-of-the-art interface types
are XPC and its object oriented variant, NSXPC. In object-
oriented IPC, an object and its methods reside in the service-
providing process, but the client can access the object as
though it existed in the client’s address space. Therefore, a
service-providing process using NSXPC can register mul-
tiple mach-port names that each provide access to remote
objects, and each remote object exposes remote methods.
NSSecureCoding: In order to mitigate type confusion at-
tacks [14], remote methods exposed with NSXPC have strict
parameter types that must adhere to a protocol called NSSe-
cureCoding.3 Any attempts to invoke these methods with
invalid parameter types are immediately rejected. Therefore,
Kobold must perform three tasks: 1) identify the mach-ports
associated with NSXPC interfaces; 2) ﬁnd the names of
remote methods provided by remote objects; and 3) obtain
the expected argument types of those remote methods.
B. IPC Access Control
Apple uses app vetting and code signing requirements to
help protect iOS users from malicious applications. How-
ever, code signing and app vetting are not sufﬁcient to stop
all attacks, and researchers have demonstrated several attacks
that bypass these defenses [19], [29], [33]. To mitigate such
attacks, Apple has implemented multiple layers of access
control including capability systems and the sandbox.
Entitlements: The capability most relevant to IPC access
control is called an entitlement. Entitlements are key-value
pairs statically embedded into an executable’s code signa-
ture. An application’s entitlements can only be changed as
part of a formal app update, and the entitlements are not
made visible to users installing the application. Apple uses
entitlements to help determine which privileges are accessi-
ble to each application. The most dangerous entitlements
(e.g., bypassing code-signing restrictions) are private and
reserved for executables created by Apple. Less sensitive
entitlements (e.g., inter-app audio) are publicly available
to third party developers who can add them to apps by
toggling switches in Xcode during development. A third,
poorly understood class of semi-private4 entitlements are not
available through Xcode toggles, but can still be found in a
number of third party apps on App Store.
Enforcement: Figure 1 illustrates the three locations of
NSXPC IPC access control enforcement. At stage one, the
sandbox can allow or deny requests to connect to speciﬁc
mach-port names. The sandbox can prevent the client from
making the system call that would cause launchd to make
the connection. Apple must allow third party applications to
access some IPC functionality (e.g., accessing location data),
so it cannot use the sandbox to block access to all mach
ports. Sandbox enforcement is also not sufﬁciently granular
to support ports that offer some methods intended for third
3https://developer.apple.com/documentation/
foundation/nssecurecoding?language=objc
4https://forums.developer.apple.com/thread/77704
Figure 1. Stages of NSXPC Access Control: 1) Sandbox Access to Port;
2) Entitlement Checks for Port; 3) Entitlement checks for Remote Method
party apps and some methods intended for only system apps.
At stage two, the service-providing process can accept or
deny attempts to connect to one of its mach-ports based on
the client’s capabilities. Finally, at stage three, each remote
method can accept or deny attempts to invoke them based on
the client’s capabilities. For stages two and three, service-
providing processes can check the entitlements of clients
by using the SecTaskCopyValueForEntitlement
API [23]. This API allows a process to specify an entitlement
key and a client (i.e., a token representing the client’s id), and
the API will return the value associated with that entitlement
key for the speciﬁed client.
III. OVERVIEW
This paper seeks to answer the research question: Which
security and privacy sensitive NSXPC methods are acces-
sible to third party applications? The answer helps charac-
terize the attack surface of iOS with respect to third party
applications. Historically, iOS security has strongly relied
on the App Store review process, allowing malicious apps
to circumvent protections by obfuscating calls to sensitive
system services [29]. Recent years have seen substantial
improvements to the iOS platform’s access control policies
and mechanisms. However, the policies have become com-
plex and difﬁcult to deﬁne. Prior work [9], [10] addressed
this complexity by systematically studying ﬁle-based access
control in iOS. Kobold compliments this prior work by
investigating IPC access control.
In order to determine which security and privacy sensitive
NSXPC methods are accessible to third-party applications,
we must overcome three research challenges.
• The set of entitlements available to third-party applica-
tions is unknown. While Xcode deﬁnes a set of “public”
entitlements available to all iOS application developers,
reports indicate that there is a set of “semi-private”
entitlements that Apple grants to select developers [6].
• The set of NSXPC services accessible to third party
applications is unknown. NSXPC services are dynami-
cally resolved via service names. There is no documen-
tation or conﬁguration ﬁle mapping NSXPC services
(i.e., method names) to corresponding daemons, much
less IPC entry points within those daemons. Moreover,
access control policy for accessing NSXPC services
is hard-coded into daemons. Unlike prior-work [9],
3
Figure 2. Kobold Overview
[10], we cannot consult a policy speciﬁcation, encoded
in a proprietary format or otherwise. Apple could
more easily obtain the method names for IPC services.
However, they cannot automatically determine where
the entitlement checks will be (e.g., they could occur
indirectly in libraries), and they cannot determine which
resources are being protected by entitlement checks.
• Which NSXPC services are security or privacy sensitive
is unknown. There is no public information on service
semantics. And code and data ﬂow analysis of NSXPC
services is non-trivial due to the complex and closed
source implementation of iOS programs.
We address these challenges through a combination of
static analysis and dynamic testing, as shown in Figure 2.
First, services are enumerated (i.e., identify the port, method
name, and arguments). Second, Kobold triages only those
services that are accessible to third party applications. Third,
we use heuristics to choose accessible, security sensitive
services for manual analysis.
Kobold’s static analysis helps to enumerate the attack sur-
face, while the dynamic analysis allows an analyst to triage
which NSXPC services are likely to contain vulnerabilities.
This approach led to the discovery of confused deputy vul-
nerabilities and daemon crashes that we disclosed to Apple.
A simpler approach using only dynamic analysis would
likely overlook several services that are rarely called at run-
time. Likewise, an approach that focuses only static analysis
would risk spending signiﬁcant time analyzing services that
are not actually accessible to third party applications.
Enumeration of services: A common approach to ﬁnding
IPC vulnerabilities is to dynamically record IPC messages
during normal system activity and replay these messages
with slight mutations. However, this “record and replay” ap-
proach has two disadvantages. First, it will not reveal rarely
used services that were not invoked during the “record”
phase. Second, it is highly dependent on using a jailbroken
device to record the IPC activity. Instead, we apply static
analysis to extract object-oriented (i.e., NSXPC) services
from iOS ﬁrmware, which is available for download from
Apple.5 This analysis is based on the intuition that high level
abstractions create patterns in binaries that are amenable to
5https://developer.apple.com/download/
static analysis. Our enumeration approach does not require
a jailbroken device and will reveal the ports, method names,
and argument types for services regardless of how often
those services are used.
Triaging accessible services: Signiﬁcant manual effort can
be saved by triaging the services accessible to third party ap-
plications. We use three techniques to perform this triaging.
First, we use a model of the iOS sandbox policy for third
party apps (i.e., the container policy) to determine which
mach ports a third party application has access to. Second,
we use an iOS application to dynamically invoke services. A
signiﬁcant number of services provide responses in the form
of completion handlers (callbacks). These responses allow
us to conﬁrm when a service was successfully accessed.
Third, the sandbox model and service responses (e.g., error
messages) sometimes indicate that a speciﬁc entitlement
is required to access a service. In order to determine if
the required entitlement can be possessed by a third party
application, we performed an automated survey of the Apple
App Store and created a list of entitlements observed there.
Vulnerability Analysis: Our initial dynamic testing uses
uninitialized values for the variables passed as arguments
into services. In many cases, uninitialized values are suf-
ﬁcient
to trigger unusual system activity (e.g., crashes,
prompts to the user, disabling system resources, audible