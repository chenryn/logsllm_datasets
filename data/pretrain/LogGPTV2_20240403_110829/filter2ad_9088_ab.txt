      FILE *v8; // rbx@4
      __int64 v10; // [sp+0h] [bp-C8h]@1
      __int64 v11; // [sp+30h] [bp-98h]@1
      int v12; // [sp+9Ch] [bp-2Ch]@4
      v1 = fileno(stream);
      __fxstat(1, v1, (struct stat *)&v10);
      v2 = v11 - 8;
      v3 = v11 - 8;
      v4 = malloc((signed int)v11 - 8);
      fread(v4, v2, 1uLL, stream);
      fclose(stream);
      if ( v2 > 0 )
      {
        v5 = v4;
        do
        {
          v6 = (signed int)((((_BYTE)v2 + ((unsigned int)(v2 >> 31) >> 28)) & 0xF) - ((unsigned int)(v2 >> 31) >> 28));
          *(_BYTE *)v5 = ~(*(_BYTE *)v5 ^ (d[v6] + p[2 * v6] + 5));
          v5 = (char *)v5 + 1;
          --v2;
        }
        while ( v2 );
      }
      v7 = zdecode((__int64)v4, v3, (__int64)&v12);
      v8 = tmpfile();
      fwrite(v7, v12, 1uLL, v8);
      free(v4);
      free((void *)v7);
      rewind(v8);
      return v8;
    }
该部分代码的关键部分应该是在
22-33行，这段代码明显是在做一个对称加密（易得，证略～～2333终于可以说这句话了），虽然没看到密钥，但是我们发现这里面`d`和`p`这俩盒子是放在data段的:
然后这个对称加(解)密做完之后，解密后的内容又进入到了 `zdecode` 这个函数中，跟进去看一眼，
`zdecode`其实就是`zcodecom`又封装了一层，直接看`zcodecom`：
    void *__fastcall zcodecom(int a1, __int64 a2, int a3, __int64 a4)
    {
      int v4; // er13@1
      __int64 v5; // r12@1
      int v6; // er14@3
      void *v7; // r13@3
      int v8; // eax@4
      int v10; // ST08_4@21
      v4 = a3;
      v5 = a4;
      *((_QWORD *)&z + 8) = 0LL;
      *((_QWORD *)&z + 9) = 0LL;
      *((_QWORD *)&z + 10) = 0LL;
      z = 0LL;
      *((_DWORD *)&z + 2) = 0;
      if ( a1 )
        inflateInit_(&z, "1.2.8", 112LL);
      else
        deflateInit_(&z, 1LL, "1.2.8", 112LL);
      z = a2;
      *((_DWORD *)&z + 2) = v4;
      *((_DWORD *)&z + 8) = 100000;
      v6 = 0;
      *((_QWORD *)&z + 3) = &outbuf;
      v7 = malloc(0x186A0uLL);
      while ( 1 )
      {
        if ( a1 )
        {
          v8 = inflate(&z, 0LL);
          if ( v8 == 1 )
          {
    LABEL_9:
            if ( 100000 == *((_DWORD *)&z + 8) )
            {
              if ( a1 )
                goto LABEL_11;
    LABEL_16:
              deflateEnd(&z);
            }
            else
            {
              v10 = 100000 - *((_DWORD *)&z + 8);
              v7 = realloc(v7, v6 + 100000);
              memcpy((char *)v7 + v6, &outbuf, v10);
              v6 += v10;
              if ( !a1 )
                goto LABEL_16;
    LABEL_11:
              inflateEnd((__int64)&z);
            }
            *(_DWORD *)v5 = v6;
            return v7;
          }
        }
        else
        {
          v8 = deflate(&z, 4LL);
          if ( v8 == 1 )
            goto LABEL_9;
        }
        if ( v8 )
          break;
        if ( !*((_DWORD *)&z + 8) )
        {
          v7 = realloc(v7, v6 + 100000);
          memcpy((char *)v7 + v6, &outbuf, 0x186A0uLL);
          *((_QWORD *)&z + 3) = &outbuf;
          *((_DWORD *)&z + 8) = 100000;
          v6 += 100000;
        }
      }
      if ( a1 )
        inflateEnd((__int64)&z);
      else
        deflateEnd(&z);
      *(_DWORD *)v5 = 0;
      return v7;
    }
发现这个函数有点复杂，看了半天没看懂在干啥，然后我就把代码复制下来本地编译了一发，但是这段代码调了半晚上都没跑起来，我想了一下，感觉问题应该是出在 `z`
和 `outbuf`
这俩全局变量上，这段代码中对`z`上的偏移频繁操作，`z`应该是某个比较复杂的结构体，并且`inflate`、`inflateEnd`等等这几个函数在编译的时候必须link
zlib，`gcc 1.c -o a -lz -g3` ，我猜测 `z`
应该是zlib中某个结构体，我就去查了zlib的手册，看个`Example`（为啥这个zlib的logo看上去这么像某lv文。。。。）：
此处的`z`应该是
`z_stream`结构，这个过程应该就是使用zlib解压。我按照zlib手册中的结构和宏试图复原`zcodecom`函数，但是每当执行到这句解压代码时`v8
= inflate(&z, 0LL);`
总会返回一个`0xfffffffb`，查手册发现是`Z_BUF_ERROR`，没辙，c语言太菜搞不定，只能想另外的方法。
此时我已经基本确定这里是一个解压流程，尽管不知道有没有啥另外的操作，索性把数据导出来用python解压下。
此时我已经把从`pcompile_file`到解压流程前的代码都调通了，编译好之后在`zdecode`前下个断点，文件长度存在v3中，此处直接print出来，为0x4f7，查看下`v4`的地址，然后直接从该地址dump
binary memory 0x4f7个字节：
file 瞅一眼:
    root@penGun:/tmp# file aaa
    aaa: zlib compressed data
感觉没啥毛病，上python直接解：
    Python 2.7.12 (default, Nov 19 2016, 06:48:10)
    [GCC 5.4.0 20160609] on linux2
    Type "help", "copyright", "credits" or "license" for more information.
    >>> from zlib import *
    >>> data = open('aaa','rb').read()
    >>> data = decompress(data)
    >>> file = open('ddd.php','wb')
    >>> file.write(data)
    >>> file.close()
搞定：
#### 0x03 关于抄ida中c代码
注意导入ida的定义头文件，因为某些类型比较蛋疼，其实手动typedef也是可以的：
    typedef unsigned long long __int64;
    typedef unsigned long _DWORD;
    typedef unsigned long long _QWORD;
    typedef unsigned short _WORD;
    typedef unsigned char _BYTE;
    typedef int bool;
直接include plugins目录下的defs.h就好啦。
还要注意某些结构体ida不能识别，所以可能f5出来的代码存在这种形式：
    __int64 v10; // [sp+0h] [bp-C8h]@1
    __int64 v11; // [sp+30h] [bp-98h]@1
    int v12; // [sp+9Ch] [bp-2Ch]@4
这几个变量应该本在一个结构体中的，但是这样看下面的代码似乎他们没经过赋值就使用了，此时可以重新写一个结构体，也可以手动布局下堆栈，把变量放在指定的偏移上，其实这两种方法原理完全一样，就是操作起来可能形式不同。
* * *