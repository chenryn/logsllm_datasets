# 四、多阶段 Docker 文件
概观
在本章中，我们将讨论正常的 Docker 构建。您将回顾和练习`Dockerfile`最佳实践，并学习使用构建器模式和多阶段`Dockerfile`创建和优化 Docker 映像的大小。
# 简介
在前一章中，我们了解了 Docker 注册中心，包括私有和公共注册中心。我们创建了自己的私有 Docker 注册表来存储 Docker 映像。我们还学习了如何在 Docker Hub 中设置访问和存储我们的 Docker 映像。在本章中，我们将讨论多阶段`Dockerfiles`的概念。
多阶段`Dockerfiles`是 Docker 版本中引入的一个特性。当我们希望在生产环境中运行 Docker 映像时优化 Docker 映像大小时，此功能更可取。为了实现这一点，多阶段`Dockerfile`将在构建过程中创建多个中间 Docker 映像，并选择性地仅将基本工件从一个阶段复制到另一个阶段。
在引入多阶段 Docker 构建之前，构建器模式用于优化 Docker 映像大小。与多阶段构建不同，构建器模式需要两个`Dockerfiles`和一个 shell 脚本来创建高效的 Docker 映像。
在本章中，我们将首先检查正常的 Docker 构建以及与之相关的问题。接下来，我们将学习如何使用构建器模式来优化 Docker 映像大小，并讨论与构建器模式相关的问题。最后，我们将学习使用多阶段`Dockerfiles`来克服构建器模式的问题。
# 正常 Docker 建造
使用 Docker，我们可以使用`Dockerfiles`创建自定义 Docker 映像。正如我们在*第二章，Dockerfiles* 中所讨论的那样，`Dockerfile`是一个文本文件，其中包含如何创建 Docker 映像的说明。然而，在生产环境中运行时，拥有最小大小的 Docker 映像至关重要。这允许开发人员加快 Docker 容器的构建和部署时间。在本节中，我们将构建一个定制的 Docker 映像，以观察与正常 Docker 构建过程相关的问题。
考虑一个例子，我们构建一个简单的 Golang 应用。我们将使用下面的`Dockerfile`部署一个用 Golang 编写的`hello world`应用:
```
# Start from latest golang parent image
FROM golang:latest
# Set the working directory
WORKDIR /myapp
# Copy source file from current directory to container
COPY helloworld.go .
# Build the application
RUN go build -o helloworld .
# Run the application
ENTRYPOINT ["./helloworld"]
```
这个`Dockerfile`以最新的 Golang 映像作为父映像开始。这个父映像包含构建我们的 Golang 应用所需的所有构建工具。接下来，我们将把`/myapp`目录设置为当前工作目录，并将`helloworld.go`源文件从主机文件系统复制到容器文件系统。然后，我们将使用`RUN`指令执行`go build`命令来构建应用。最后，`ENTRYPOINT`指令用于运行上一步创建的`helloworld`可执行文件。
以下是`helloworld.go`文件的内容。这是一个简单的文件，执行时会打印文本`"Hello World"`:
```
package main
import "fmt"
func main() {
    fmt.Println("Hello World")
}
```
一旦`Dockerfile`准备好了，我们可以使用`docker image build`命令构建 Docker 映像。该映像将被标记为`helloworld:v1`:
```
$ docker image build -t helloworld:v1 .
```
现在，使用`docker image ls`命令观察构建的映像。您将获得类似如下的输出:
```
REPOSITORY   TAG   IMAGE ID       CREATED          SIZE
helloworld   v1    23874f841e3e   10 seconds ago   805MB
```
请注意映像大小。这个构建产生了一个 805 兆字节的巨大 Docker 映像。在生产环境中使用这些大型 Docker 映像效率不高，因为它们需要大量时间和带宽才能通过网络推送和拉出。小 Docker 映像的效率要高得多，可以快速地推拉和部署。
除了映像的大小之外，这些 Docker 映像也容易受到攻击，因为它们包含可能存在潜在安全漏洞的构建工具。
注意
潜在的安全漏洞可能因给定 Docker 映像中的包而异。例如，爪哇 JDK 有许多漏洞。您可以通过以下链接详细了解与 Java JDK 相关的漏洞:
[https://www . cvedetails . com/漏洞-列表/vendor _ id-93/product _ id-19116/Oracle-JDK . html](https://www.cvedetails.com/vulnerability-list/vendor_id-93/product_id-19116/Oracle-JDK.html)。
为了减少攻击面，建议在生产环境中运行 Docker 映像时，只包含基本的工件(例如，编译的代码)和运行时。例如，对于 Golang，构建应用需要 Go 编译器，但运行应用则不需要。
理想情况下，您需要一个最小大小的 Docker 映像，它只包含运行时工具，不包含我们用来构建应用的所有构建工具。
我们现在将在下面的练习中使用正常的构建过程来构建这样一个 Docker 映像。
## 练习 4.01:用正常的构建过程构建 Docker 映像
您的经理要求您整理一个简单的 Golang 应用。您获得了 Golang 源代码文件，您的任务是编译和运行该文件。在本练习中，您将使用正常的构建过程构建 Docker 映像。然后，您将观察最终 Docker 映像的映像大小:
1.  为本练习创建一个名为`normal-build`的新目录:
    ```
    $ mkdir normal-build
    ```
2.  导航至新创建的`normal-build`目录:
    ```
    $ cd normal-build
    ```
3.  在`normal-build`目录下，创建一个名为`welcome.go`的文件。该文件将在构建期间复制到 Docker 映像中:
    ```
    $ touch welcome.go
    ```
4.  现在，使用您最喜欢的文本编辑器打开`welcome.go`文件:
    ```
    $ vim welcome.go
    ```
5.  Add the following content to the `welcome.go` file, save it, and exit from the `welcome.go` file:
    ```
    package main
    import "fmt"
    func main() {
        fmt.Println("Welcome to multi-stage Docker builds")
    }
    ```
    这是一个用 Golang 编写的简单的`hello world`应用。这将在执行时输出`"Welcome to multi-stage Docker builds"`。
6.  在`normal-build`目录下，创建一个名为`Dockerfile` :
    ```
    $ touch Dockerfile
    ```
    的文件
7.  现在，使用您最喜欢的文本编辑器打开【T0:
    ```
    $ vim Dockerfile 
    ```
8.  Add the following content to the `Dockerfile` and save the file:
    ```
    FROM golang:latest
    WORKDIR /myapp
    COPY welcome.go .
    RUN go build -o welcome .
    ENTRYPOINT ["./welcome"]
    ```
    `Dockerfile`以`FROM`指令开始，该指令指定最新的 Golang 映像作为父映像。这将把`/myapp`目录设置为 Docker 映像的当前工作目录。然后，`COPY`指令将把您在*步骤 3* 中创建的`welcome.go`源文件复制到 Docker 文件系统。接下来是`go build`命令，它将构建您创建的 Golang 代码。最后，将执行欢迎代码。
9.  Now, build the Docker image:
    ```
    $ docker build -t welcome:v1 .
    ```
    您将看到映像已成功构建，映像标识为`b938bc11abf1`，标记为`welcome:v1`:
    ![Figure 4.1: Building the Docker image ](img/B15021_04_01.jpg)
    图 4.1:构建 Docker 映像
10.  Use the `docker image ls` command to list all the Docker images available on your computer:
    ```
    $ docker image ls
    ```
    该命令应返回以下输出:
    ![Figure 4.2: Listing all Docker images ](img/B15021_04_02.jpg)
图 4.2:列出所有 Docker 映像
在前面的输出中可以观察到`welcome:v1`映像的映像尺寸为`805MB`。
在本节中，我们讨论了如何使用正常的 Docker 构建过程来构建 Docker 映像并观察其大小。结果是一个巨大的 Docker 映像，大小超过 800 MB。这些大型 Docker 映像的主要缺点是，它们将花费大量时间来构建、部署、推送和接管网络。因此，建议尽可能创建最小尺寸的 Docker 映像。在下一节中，我们将讨论如何使用构建器模式来优化映像大小。
# 什么是建设者模式？
**构建器模式**是一种用于创建最佳大小的 Docker 映像的方法。它使用两个 Docker 映像，并有选择地将重要的工件从一个复制到另一个。第一个 Docker 映像被称为`build image`，用作构建环境，从源代码构建可执行文件。这个 Docker 映像包含编译器、构建工具和构建过程中所需的开发依赖项。
第二个 Docker 映像称为`runtime image`，用作运行环境来运行由第一个 Docker 容器创建的可执行文件。这个 Docker 映像只包含可执行文件、依赖项和运行时工具。外壳脚本用于使用`docker container cp`命令复制工件。
使用构建器模式构建映像的整个过程包括以下步骤:
1.  创建`Build` Docker 映像。
2.  从`Build` Docker 映像创建一个容器。
3.  将工件从`Build` Docker 映像复制到本地文件系统。
4.  使用复制的工件构建`Runtime` Docker 映像:
![Figure 4.3: Building images using the builder pattern ](img/B15021_04_03.jpg)
图 4.3:使用构建器模式构建映像
如上图所示，`Build` `Dockerfile`用于创建构建容器，该容器将包含构建源代码所需的所有工具，包括编译器和构建工具，如 Maven、Gradle 和开发依赖项。一旦构建容器被创建，shell 脚本将把可执行文件从构建容器复制到 Docker 主机。最后，将使用从`Build`容器复制的可执行文件创建`Runtime`容器。
现在，观察构建器模式如何用于创建最少的 Docker 映像。以下是用于创建`Build` Docker 容器的第一个`Dockerfile`。这个`Dockerfile`被命名为 Dockerfile.build，以区别于`Runtime` `Dockerfile`:
```
# Start from latest golang parent image
FROM golang:latest
# Set the working directory
WORKDIR /myapp
# Copy source file from current directory to container
COPY helloworld.go .
# Build the application
RUN go build -o helloworld .
# Run the application
ENTRYPOINT ["./helloworld"]
```
这与我们在正常 Docker 构建中观察到的`Dockerfile`相同。这用于从`helloworld.go`源文件创建`helloworld`可执行文件。
以下是用于构建`Runtime` Docker 容器的第二个`Dockerfile`:
```
# Start from latest alpine parent image
FROM alpine:latest
# Set the working directory
WORKDIR /myapp
# Copy helloworld app from current directory to container
COPY helloworld .
# Run the application
ENTRYPOINT ["./helloworld"]
```
与从父映像创建的第一个`Dockerfile`不同，第二个`Dockerfile`使用`alpine`映像作为其父映像，因为它是最小尺寸的 Docker 映像，只有 5 MB。这张图片使用的是 Alpine Linux，一个轻量级的 Linux 发行版。接下来，`/myapp`目录被配置为工作目录。最后，`helloworld`工件被复制到 Docker 映像中，并且`ENTRYPOINT`指令被用来运行应用。
这个`helloworld`神器是第一个`Dockerfile`执行`go build -o helloworld .`命令的结果。我们将使用一个 shell 脚本将这个工件从`build` Docker 容器复制到本地文件系统，从那里这个工件将被复制到运行时 Docker 映像。
考虑以下用于在 Docker 容器之间复制构建工件的外壳脚本:
```
#!/bin/sh
# Build the builder Docker image 
docker image build -t helloworld-build -f Dockerfile.build .
# Create container from the build Docker image
docker container create --name helloworld-build-container   helloworld-build
# Copy build artifacts from build container to the local filesystem
docker container cp helloworld-build-container:/myapp/helloworld .
# Build the runtime Docker image
docker image build -t helloworld .
# Remove the build Docker container
docker container rm -f helloworld-build-container
# Remove the copied artifact
rm helloworld
```
这个 shell 脚本将首先使用`Dockerfile.build`文件构建`helloworld-build` Docker 映像。下一步是从`helloworld-build`映像中创建一个 Docker 容器，这样我们就可以将`helloworld`工件复制到 Docker 宿主中。一旦容器被创建，我们需要执行命令将`helloworld`工件从`helloworld-build-container`复制到 Docker 主机的当前目录。现在，我们可以用`docker image build`命令构建运行时容器。最后，我们将通过移除中间工件来执行必要的清理任务，例如`helloworld-build-container`容器和`helloworld`可执行文件。
一旦我们执行了 shell 脚本，我们应该能够看到两个 Docker 映像:
```
REPOSITORY         TAG      IMAGE ID       CREATED       SIZE
helloworld         latest   faff247e2b35   3 hours ago   7.6MB
helloworld-build   latest   f8c10c5bd28d   3 hours ago   805MB
```
请注意两个 Docker 映像之间的大小差异。`helloworld` Docker 映像的大小只有 7.6 MB，与 805 MB 的`helloworld-build`映像相比有了巨大的缩减。
正如我们所看到的，构建器模式可以通过只将必要的工件复制到最终映像中来大幅减小 Docker 映像的大小。然而，构建器模式的缺点是我们需要维护两个`Dockerfiles`和一个 shell 脚本。
在下一个练习中，我们将获得使用构建器模式创建优化的 Docker 映像的实践经验。
## 练习 4.02:使用构建器模式构建 Docker 映像
在*练习 4.01* 、*使用正常构建过程*构建 Docker 映像中，您创建了一个 Docker 映像来编译和运行 Golang 应用。现在应用已经准备就绪，但是经理对 Docker 映像的大小不满意。您被要求创建一个最小大小的 Docker 映像来运行该应用。在本练习中，您将使用构建器模式优化 Docker 映像:
1.  为本练习创建一个名为`builder-pattern`的新目录:
    ```
    $ mkdir builder-pattern