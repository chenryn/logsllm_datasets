PRESENTED BY:
© Mandiant, A FireEye Company. All rights reserved.
Investigating 
PowerShell Attacks
Defcon 2014
(Pre-Conference Draft)
Ryan Kazanciyan, Matt Hastings
© Mandiant, A FireEye Company. All rights reserved.
Background Case Study
2
Attacker 
Client 
Victim 
VPN
WinRM, 
SMB, 
NetBIOS
Victim workstations, 
servers
 Fortune 100 organization
 Compromised for > 3 years
 Active Directory
 Authenticated access to 
corporate VPN
 Command-and-control via
 Scheduled tasks
 Local execution of 
PowerShell scripts
 PowerShell Remoting
© Mandiant, A FireEye Company. All rights reserved.
It  can  do  almost  anything…
Why PowerShell?
3
Execute commands
Reflectively load / inject code
Download files from the internet
Enumerate files
Interact with the registry
Interact with services
Examine processes
Retrieve event logs
Access .NET framework
Interface with Win32 API
© Mandiant, A FireEye Company. All rights reserved.
 PowerSploit
 Reconnaissance
 Code execution
 DLL injection
 Credential harvesting
 Reverse engineering
 Nishang
 Posh-SecMod
 Veil-PowerView
 Metasploit
 More  to  come…
PowerShell Attack Tools
4
© Mandiant, A FireEye Company. All rights reserved.
PowerShell Malware in the Wild
5
© Mandiant, A FireEye Company. All rights reserved.
Investigation Methodology
6
evil.ps1
Local PowerShell script
backdoor.ps1
Persistent PowerShell
Registry
File System
Event Logs
Memory
Network 
Traffic
Sources of Evidence
WinRM
PowerShell Remoting
© Mandiant, A FireEye Company. All rights reserved.
 Has admin (local or domain) on target system
 Has network access to needed ports on target system
 Can use other remote command execution methods to:
 Enable execution of unsigned PS scripts
 Enable PS remoting
Attacker Assumptions
7
© Mandiant, A FireEye Company. All rights reserved.
Version Reference
8
2.0
3.0
4.0
Default
Default (R2)
Default
Default
Default (SP1)
Default 
(R2 SP1)
Requires 
WMF 3.0 
Update
Requires 
WMF 3.0 
Update
Requires WMF 
4.0 Update
Requires WMF 
4.0 Update
Requires WMF 
4.0 Update
Memory Analysis
© Mandiant, A FireEye Company. All rights reserved.
 Scenario: Attacker interacts with target host through 
PowerShell remoting
 What’s  left  in  memory  on  the  accessed  system?
 How can you find it?
 How long does it persist?
Memory Analysis
10
© Mandiant, A FireEye Company. All rights reserved.
WinRM Process Hierarchy
11
Invoke-Command
{c:\evil.exe}
Client
wsmprovhost.exe
svchost.exe 
(DcomLaunch)
evil.exe
wsmprovhost.exe
Get-ChildItem C:\
svchost.exe 
(WinRM)
Remote Host
Invoke-Command 
{Get-ChildItem C:\}
Kernel
Invoke-Mimikatz.ps1
© Mandiant, A FireEye Company. All rights reserved.
Remnants in Memory
12
wsmprovhost.exe
svchost.exe 
(DcomLaunch)
evil.exe
wsmprovhost.exe
Get-ChildItem C:\
svchost.exe 
(WinRM)
Terminate at 
end of session
Remnants of C2 
persist in 
memory
Kernel
Cmd history
Cmd history
© Mandiant, A FireEye Company. All rights reserved.
Example: In-Memory Remnants
13
SOAP in WinRM service memory, after interactive PsSession with command: 
echo teststring_pssession > c:\testoutput_possession.txt
© Mandiant, A FireEye Company. All rights reserved.
Example: In-Memory Remnants
14
WinRM service memory - Invoke-Mimikatz.ps1 executed remotely on target host
© Mandiant, A FireEye Company. All rights reserved.
 XML / SOAP 
strings
/wsman.xsd
 Known attacker 
filenames
 View context 
around hits
 Yes, this is painful
What to Look For?
15
""xmlns:r
sp="http://schemas.microsoft.com/wbem/wsman/1
/windows/shell"""C80927B1-C741-4E99-9F97-
CBA80F23E595prompt""/rsp:Comma
nd>AAAAAAAAAFkAAAAAAAAAAAMAAAa
jAgAAAAYQAgC2Yc+EDBrbTLq08PrufN+rij8VmjyqZEaG
AKwYZTnxB++7vzxPYmogUmVmSWQ9IjAiPjxNUz48T2JqI
E49IlBvd2VyU2hlbGwiIFJlZklkPSIxIj48TVM+PE9iai
BOPSJDbWRzIiBSZWZJZD0iMiI+PFROIFJlZklkPSIwIj4
8VD5TeXN0ZW0uQ29sbG
. . .
© Mandiant, A FireEye Company. All rights reserved.
wsmprovhost.exe
• Best source of intact evidence
• Only lasts until PS session exits
svchost.exe for 
WinRM
• Fragments of evidence
• Retention depends on # of remoting sessions
• May last until reboot
Kernel pool
• Fragments of evidence
• Brief lifespan, depends on system utilization
Pagefile
• Fragments of evidence
• Brief lifespan, depends on system utilization
• May last beyond reboot
How Long Will Evidence Remain?
16
© Mandiant, A FireEye Company. All rights reserved.
 Timing is everything
 Challenging to recover evidence
 Many variables
 System uptime
 Memory utilization
 Volume of WinRM activity
Memory Analysis Summary
17
Event Logs
© Mandiant, A FireEye Company. All rights reserved.
 Scenario: Attacker interacts with target host through 
 Local PowerShell execution
 PowerShell remoting
 Which event logs capture activity?
 Level of logging detail?
 Differences between PowerShell 2.0 and 3.0?
Event Logs
19
© Mandiant, A FireEye Company. All rights reserved.
 Application Logs
 Windows PowerShell.evtx
 Microsoft-Windows-
PowerShell/Operational.evtx
 Microsoft-Windows-
WinRM/Operational.evtx
 Analytic Logs
 Microsoft-Windows-
PowerShell/Analytic.etl
 Microsoft-Windows-
WinRM/Analytic.etl
PowerShell Event Logs 
20
© Mandiant, A FireEye Company. All rights reserved.
 What you do get
 Start & stop times of activity
 Loaded providers
 User account context
 What  you  don’t  get
 Detailed history of executed commands
 Console input / output
 Analytic logs help (somewhat)
 Disabled by default
 High volume of events
 Encoding & fragmentation
PowerShell 2.0 Event Logging
21
© Mandiant, A FireEye Company. All rights reserved.
Local PowerShell Execution
22
PowerShell
EID 400: Engine state is changed 
from None to Available. 
EID 403: Engine state is changed 
from Available to Stopped. 
Start & stop times of 
PowerShell session
© Mandiant, A FireEye Company. All rights reserved.
Local PowerShell Execution
23
PowerShell 
Operational**
EID 40961: PowerShell console is 
starting up
EID 4100: Error Message = File 
C:\temp\test.ps1 cannot be loaded 
because running scripts is disabled 
on this system
** Events exclusive to PowerShell 3.0 or greater
Start time of 
PowerShell session
Error provides path to 
PowerShell script
© Mandiant, A FireEye Company. All rights reserved.
Local PowerShell Execution
24
PowerShell 
Analytic**
EID 7937: Command test.ps1 is Started.