安装完成后，直接在命令行运行sysdig，不加任何参数， sysdig 会捕获所有的事件并将其写入标准输出 ：
    $ sysdig
    285304 01:21:51.270700399 7 sshd (50485) > select
    285306 01:21:51.270701716 7 sshd (50485)  rt_sigprocmask
    285308 01:21:51.270702258 7 sshd (50485)  rt_sigprocmask
    285310 01:21:51.270702660 7 sshd (50485)  read fd=13(/dev/ptmx) size=16384
    285313 01:21:51.270703971 1 sysdig (59131) > switch next=59095 pgft_maj=0 pgft_min=1759 vm_size=280112 vm_rss=18048 vm_swap=0
    ...
默认情况下，sysdig 在一行中打印每个事件的信息，格式如下
`%evt.num %evt.time %evt.cpu %proc.name (%thread.tid) %evt.dir %evt.type
%evt.args`
其中
  * evt.num 是递增的事件编号 
  * evt.time 是事件时间戳 
  * evt.cpu 是捕获事件的 CPU 编号 
  * proc.name 是生成事件的进程的名称 
  * thread.tid 是产生事件的TID，对应单线程进程的PID 
  * evt.dir 是事件方向，> 表示进入事件， **BPF操作码**
>
>  hamburg.de/physnet/Tru64-Unix/HTML/MAN/MAN7/0012____.HTM>
>
> **seccomp_rule_add**
>
> 
>
> **seccomp和seccomp bfp**
>
> 
>
> **seccomp 概述**
>
> 
>
> **seccomp沙箱机制 & 2019ByteCTF VIP**
>
> 
>
> **prctl(2) — Linux manual page**
>
> 
>
> **seccomp-tools**
>
> 
>
> **libseccomp**
>
>
> 
>
> docker seccomp
>
> 
>
> Docker seccomp 与OCI
>
>  issued-by-oci-runtime/297/9>