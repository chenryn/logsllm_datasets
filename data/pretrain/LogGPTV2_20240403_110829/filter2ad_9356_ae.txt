安装完成后，直接在命令行运行 `sysdig` 命令（不带任何参数），它将捕获所有系统事件并将它们输出到标准输出。例如：

```bash
$ sysdig
285304 01:21:51.270700399 7 sshd (50485) > select
285306 01:21:51.270701716 7 sshd (50485)  rt_sigprocmask
285308 01:21:51.270702258 7 sshd (50485)  rt_sigprocmask
285310 01:21:51.270702660 7 sshd (50485)  read fd=13(/dev/ptmx) size=16384
285313 01:21:51.270703971 1 sysdig (59131) > switch next=59095 pgft_maj=0 pgft_min=1759 vm_size=280112 vm_rss=18048 vm_swap=0
...
```

默认情况下，`sysdig` 在一行中打印每个事件的信息，其格式如下：

```
%evt.num %evt.time %evt.cpu %proc.name (%thread.tid) %evt.dir %evt.type %evt.args
```

其中：
- `%evt.num` 是递增的事件编号。
- `%evt.time` 是事件的时间戳。
- `%evt.cpu` 是捕获事件的 CPU 编号。
- `%proc.name` 是生成事件的进程名称。
- `%thread.tid` 是产生事件的线程 ID（对于单线程进程，这与进程 ID 相同）。
- `%evt.dir` 是事件方向，`>` 表示进入事件。
- `%evt.type` 是事件类型。
- `%evt.args` 是事件的参数。

此外，您可能对以下相关主题感兴趣：
- **seccomp_rule_add**：用于添加 seccomp 规则。
- **seccomp 和 seccomp BPF**：关于 seccomp 及其 BPF 机制的概述。
- **seccomp 概述**：介绍 seccomp 的基本概念。
- **seccomp 沙箱机制 & 2019 ByteCTF VIP**：讨论 seccomp 在沙箱中的应用及其在竞赛中的使用。
- **prctl(2)**：Linux 手册页，介绍 `prctl` 系统调用。
- **seccomp-tools**：一组用于管理和调试 seccomp 配置的工具。
- **libseccomp**：一个库，用于简化 seccomp 过滤器的创建和管理。
- **Docker seccomp**：Docker 中使用的 seccomp 配置。
- **Docker seccomp 与 OCI**：Docker seccomp 配置与 Open Container Initiative (OCI) 标准的关系。

这些资源可以帮助您更深入地了解 `sysdig` 和相关的安全机制。