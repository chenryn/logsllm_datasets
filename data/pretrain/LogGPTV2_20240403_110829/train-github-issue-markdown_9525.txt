I'm currently trying to improve the overall scheduling throughput. It seems we
can achieve significant gains from different kind of parallelization.  
However, I would like to avoid parallizing individual predicate/priority
function and support parallelization at the framework level.
For predicate function, it is easy to parallelize computations of them between
nodes, since they are independent.  
However, it's not the case for priorities - the interface of priority function
is that it computes priorities for all nodes at the same time.
It would be much easier to parallelize everything, when priority function
would also take a node as an argument and would compute priority wrt to
current priority function just for this particular node.  
However, there are two problematic functions for now (maybe more in the
future):
  * SelectorSpreading
  * NodeAffinity
Both of them have the same main problem - they are computing some partial
scores for nodes independently, but then to compute the final score for the
node, they rely on the maximum of those partial scores from all nodes.
### Proposal
  1. I'm proposing to change the interface of priority functions to take a node for which they are supposed to compute priority.
  2. We also extend the HostPriority type to include "priorityFunctionName" string
  3. We will split priority functions into two phases:
  4. per-node computations (which are generally cpu-intensive and would benefit from parallelization)
  5. aggregation (which is generally much cheaper) and we can afford not parallelizing it
Thoughts?
@davidopp @kubernetes/sig-scheduling @kubernetes/sig-scalability