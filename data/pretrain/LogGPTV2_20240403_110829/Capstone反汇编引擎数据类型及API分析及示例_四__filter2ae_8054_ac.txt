            return -1;
        }
        if (!insn->detail) {
            handle->errnum = CS_ERR_DETAIL;
            return -1;
        }
        handle->errnum = CS_ERR_OK;
        switch (handle->arch) {
            default:
                handle->errnum = CS_ERR_HANDLE;
                return -1;
            case CS_ARCH_ARM:
                for (i = 0; i detail->arm.op_count; i++) {
                    if (insn->detail->arm.operands[i].type == (arm_op_type)op_type)
                        count++;
                    if (count == post)
                        return i;
                }
                break;
            case CS_ARCH_ARM64:
                for (i = 0; i detail->arm64.op_count; i++) {
                    if (insn->detail->arm64.operands[i].type == (arm64_op_type)op_type)
                        count++;
                    if (count == post)
                        return i;
                }
                break;
            case CS_ARCH_X86:
                for (i = 0; i detail->x86.op_count; i++) {
                    if (insn->detail->x86.operands[i].type == (x86_op_type)op_type)
                        count++;
                    if (count == post)
                        return i;
                }
                break;
            case CS_ARCH_MIPS:
                for (i = 0; i detail->mips.op_count; i++) {
                    if (insn->detail->mips.operands[i].type == (mips_op_type)op_type)
                        count++;
                    if (count == post)
                        return i;
                }
                break;
            case CS_ARCH_PPC:
                for (i = 0; i detail->ppc.op_count; i++) {
                    if (insn->detail->ppc.operands[i].type == (ppc_op_type)op_type)
                        count++;
                    if (count == post)
                        return i;
                }
                break;
            case CS_ARCH_SPARC:
                for (i = 0; i detail->sparc.op_count; i++) {
                    if (insn->detail->sparc.operands[i].type == (sparc_op_type)op_type)
                        count++;
                    if (count == post)
                        return i;
                }
                break;
            case CS_ARCH_SYSZ:
                for (i = 0; i detail->sysz.op_count; i++) {
                    if (insn->detail->sysz.operands[i].type == (sysz_op_type)op_type)
                        count++;
                    if (count == post)
                        return i;
                }
                break;
            case CS_ARCH_XCORE:
                for (i = 0; i detail->xcore.op_count; i++) {
                    if (insn->detail->xcore.operands[i].type == (xcore_op_type)op_type)
                        count++;
                    if (count == post)
                        return i;
                }
                break;
            case CS_ARCH_M68K:
                for (i = 0; i detail->m68k.op_count; i++) {
                    if (insn->detail->m68k.operands[i].type == (m68k_op_type)op_type)
                        count++;
                    if (count == post)
                        return i;
                }
                break;
            case CS_ARCH_TMS320C64X:
                for (i = 0; i detail->tms320c64x.op_count; i++) {
                    if (insn->detail->tms320c64x.operands[i].type == (tms320c64x_op_type)op_type)
                        count++;
                    if (count == post)
                        return i;
                }
                break;
            case CS_ARCH_M680X:
                for (i = 0; i detail->m680x.op_count; i++) {
                    if (insn->detail->m680x.operands[i].type == (m680x_op_type)op_type)
                        count++;
                    if (count == post)
                        return i;
                }
                break;
        }
        return -1;
    }
示例
    #include 
    #include 
    #include "capstone.h"
    #include "platform.h"
    using namespace std;
    struct platform {
        cs_arch arch;
        cs_mode mode;
        unsigned char* code;
        size_t size;
        const char* comment;
        cs_opt_type opt_type;
        cs_opt_value opt_value;
    };
    static void print_string_hex(unsigned char* str, size_t len)
    {
        unsigned char* c;
        printf("Code: ");
        for (c = str; c detail->x86);
            print_string_hex(platforms[i].code, platforms[i].size);
            printf("Disasm:\n");
            address = 0x1000;
            code = platforms[i].code;
            size = platforms[i].size;
            while (cs_disasm_iter(handle, &code, &size, &address, insn)) {
                int n;
                printf("0x%" PRIx64 ":\t%s\t\t%s          ",
                    insn->address, insn->mnemonic, insn->op_str);
                cout operands[index].imm);
                        if (x86->encoding.imm_offset != 0) {
                            printf("\timm_offset: 0x%x\n", x86->encoding.imm_offset);
                        }
                        if (x86->encoding.imm_size != 0) {
                            printf("\timm_size: 0x%x\n", x86->encoding.imm_size);
                        }
                    }
                }
            }
            printf("\n");
            cs_free(insn, 1);
            cs_close(&handle);
        }
    }
    int main()
    {
        test();
        return 0;
    }
输出  
### cs_regs_access
    cs_err CAPSTONE_API cs_regs_access(csh handle, const cs_insn *insn,
            cs_regs regs_read, uint8_t *regs_read_count,
            cs_regs regs_write, uint8_t *regs_write_count);
检索由一条指令显式或隐式访问的所有寄存器。
注意： 在“diet”模式下，此API不可用，因为引擎不存储寄存器。
handle: cs_open()返回的句柄  
insn: 从cs_disasm()或cs_disasm_iter()返回的反汇编指令结构  
regs_read:返回时，这个数组包含所有按指令读取的寄存器。  
regs_read_count:保存在regs_read数组中的寄存器数。  
regs_write:返回时，这个数组包含所有由指令修改的寄存器。  
regs_write_count:保存在regs_write数组中的寄存器数。  
成功时返回CS_ERR_OK，失败时返回其他值(详细错误请参阅cs_err enum)。
代码实现
    cs_err CAPSTONE_API cs_regs_access(csh ud, const cs_insn *insn,
            cs_regs regs_read, uint8_t *regs_read_count,
            cs_regs regs_write, uint8_t *regs_write_count)
    {
        struct cs_struct *handle;
        if (!ud)
            return -1;
        handle = (struct cs_struct *)(uintptr_t)ud;
    #ifdef CAPSTONE_DIET
        // This API does not work in DIET mode
        handle->errnum = CS_ERR_DIET;
        return CS_ERR_DIET;
    #else
        if (!handle->detail) {
            handle->errnum = CS_ERR_DETAIL;
            return CS_ERR_DETAIL;
        }
        if (!insn->id) {
            handle->errnum = CS_ERR_SKIPDATA;
            return CS_ERR_SKIPDATA;
        }
        if (!insn->detail) {
            handle->errnum = CS_ERR_DETAIL;
            return CS_ERR_DETAIL;
        }
        if (handle->reg_access) {
            handle->reg_access(insn, regs_read, regs_read_count, regs_write, regs_write_count);
        } else {
            // this arch is unsupported yet
            handle->errnum = CS_ERR_ARCH;
            return CS_ERR_ARCH;
        }
        return CS_ERR_OK;
    #endif
    }
示例：
    #include 
    #include 
    #include "capstone.h"
    #include "platform.h"
    using namespace std;
    struct platform {
        cs_arch arch;
        cs_mode mode;
        unsigned char* code;
        size_t size;
        const char* comment;
        cs_opt_type opt_type;
        cs_opt_value opt_value;
    };
    static void print_string_hex(unsigned char* str, size_t len)
    {
        unsigned char* c;
        printf("Code: ");
        for (c = str; c detail->x86);
            print_string_hex(platforms[i].code, platforms[i].size);
            printf("Disasm:\n");
            address = 0x1000;
            code = platforms[i].code;
            size = platforms[i].size;
            while (cs_disasm_iter(handle, &code, &size, &address, insn)) {
                int n;
                printf("0x%" PRIx64 ":\t%s\t\t%s          ",
                    insn->address, insn->mnemonic, insn->op_str);
                cout << endl;
                if (!cs_regs_access(handle, insn,       //每条指令所有读取和修改的寄存器
                    regs_read, &regs_read_count,
                    regs_write, &regs_write_count)) {
                    if (regs_read_count) {
                        printf("\tRegisters read:");
                        for (i = 0; i < regs_read_count; i++) {
                            printf(" %s", cs_reg_name(handle, regs_read[i]));
                        }
                        printf("\n");
                    }
                    if (regs_write_count) {
                        printf("\tRegisters modified:");
                        for (i = 0; i < regs_write_count; i++) {
                            printf(" %s", cs_reg_name(handle, regs_write[i]));
                        }
                        printf("\n");
                    }
                }
            }
            printf("\n");
            cs_free(insn, 1);
            cs_close(&handle);
        }
    }
    int main()
    {
        test();
        return 0;
    }
输出  
## 结语
Capstone反汇编引擎的所有数据类型和API基本就分析完了，自己在研究的这几天也学到了很多，之后可能会发一系列使用Capstone制作自己的调试器的文章，希望共勉。
Blog： kabeor.cn