# 代码生成的工作目录，也就是我们的项目路径$ ROOT_PACKAGE="github.com/resouer/k8s-controller-custom-resource"
# API Group$ CUSTOM_RESOURCE_NAME="samplecrd"
# API Version$ CUSTOM_RESOURCE_VERSION="v1" 
# 安装 k8s.io/code-generator$ go get -u k8s.io/code-generator/...$ cd $GOPATH/src/k8s.io/code-generator 
# 执行代码自动生成，其中 pkg/client 是生成目标目录，pkg/apis 是类型定义目录$ ./generate-groups.sh all "$ROOT_PACKAGE/pkg/client" "$ROOT_PACKAGE/pkg/apis" "$CUSTOM_RESOURCE_NAME:$CUSTOM_RESOURCE_VERSION"代码生成工作完成之后，我们再查看一下这个项目的目录结构：    $ tree.├── controller.go├── crd│   └── network.yaml├── example│   └── example-network.yaml├── main.go└── pkg    ├── apis    │   └── samplecrd    │       ├── constants.go    │       └── v1    │           ├── doc.go    │           ├── register.go    │           ├── types.go    │           └── zz_generated.deepcopy.go    └── client        ├── clientset        ├── informers        └── listers其中，pkg/apis/samplecrd/v1 下面的 zz_generated.deepcopy.go文件，就是自动生成的 DeepCopy 代码文件。而整个 client 目录，以及下面的三个包（clientset、informers、listers），都是 Kubernetes 为 Network类型生成的客户端库，这些库会在后面编写自定义控制器的时候用到。可以看到，到目前为止的这些工作，其实并不要求你写多少代码，主要考验的是"复制、粘贴、替换"这样的"基本功"。而有了这些内容，现在你就可以[在 Kubernetes 集群里创建一个 Network 类型的API 对象]{.orange}了。我们不妨一起来实验一下。**首先**，使用 network.yaml 文件，在 Kubernetes 中创建 Network 对象的CRD（Custom Resource Definition）：    $ kubectl apply -f crd/network.yamlcustomresourcedefinition.apiextensions.k8s.io/networks.samplecrd.k8s.io created这个操作，就告诉了 Kubernetes，我现在要添加一个自定义的 API对象。而这个对象的 API 信息，正是 network.yaml里定义的内容。我们可以通过 kubectl get 命令，查看这个 CRD：    $ kubectl get crdNAME                        CREATED ATnetworks.samplecrd.k8s.io   2018-09-15T10:57:12Z**然后**，我们就可以创建一个 Network 对象了，这里用到的是example-network.yaml：    $ kubectl apply -f example/example-network.yaml network.samplecrd.k8s.io/example-network created通过这个操作，你就在 Kubernetes 集群里创建了一个 Network 对象。它的 API资源路径是`samplecrd.k8s.io/v1/networks`。这时候，你就可以通过 kubectl get 命令，查看到新创建的 Network 对象：    $ kubectl get networkNAME              AGEexample-network   8s你还可以通过 kubectl describe 命令，看到这个 Network 对象的细节：    $ kubectl describe network example-networkName:         example-networkNamespace:    defaultLabels:       ...API Version:  samplecrd.k8s.io/v1Kind:         NetworkMetadata:  ...  Generation:          1  Resource Version:    468239  ...Spec:  Cidr:     192.168.0.0/16  Gateway:  192.168.0.1当然 ，你也可以编写更多的 YAML 文件来创建更多的 Network 对象，这和创建Pod、Deployment 的操作，没有任何区别。