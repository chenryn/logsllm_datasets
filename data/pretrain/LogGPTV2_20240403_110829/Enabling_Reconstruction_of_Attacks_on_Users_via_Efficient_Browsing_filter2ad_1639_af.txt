allow for storing network trafﬁc information for long periods of
time, Time Machine only records the ﬁrst portion of each network
connection. Even with partial recordings, [19] demonstrates that
this approach enables the analysis of security incidents. Krishnan
et al. [21] propose a virtualization-based forensic engine to
keep track and record access to data objects read from disk.
The proposed system follows the chain of access operations on
the objects as they are copied into memory and accessed by
different processes. The output is an audit log that enables the
reconstruction of the sequence of data changes. Ma et al. [25]
develop a low cost audit logging system for Windows, which
aims to enable accurate attack investigation and signiﬁcant log
reduction.
The instrumentation of Chrome has been proposed in the
past in different security contexts. For example, Bauer et al. [5]
propose an information-ﬂow tracking system that allows for
enforcing ﬁne-grained browser security policies. Excision [2], is
an instrumentation of Chrome that aims at detecting and blocking
the inclusion of malicious third-party content into web pages.
To this end, Excision keeps track of the origin of third-party
content to be loaded as part of the page.
Our ChromePic system is different, in that it ams to introduce
ﬁne-grained logging in Chromium to enable the recording and
post-mortem investigation of web-based attacks, with particular
focus on attacks on users that have a signiﬁcant visual component.
Record-and-Repaly Systems. ReVirt’s main goal is to enable
whole-system record-and-reply [11]. To this end, it uses a
virtualization-based approach to log detailed information about
a VM’s guest system execution instruction-by-instruction. This
enables deterministic replay of the entire system, thus also
allowing an exact replay of previously recorded intrusions. Other
whole-system record-and-replay engines, such as PANDA [10],
share similar goals. Whole-system record-and-replay is expensive
and difﬁcult to deploy on resource-constrained mobile devices. To
obviate these problems, Neasbitt et al. propose WebCapsule [28],
which aims to enable browser-level record-and-replay. WebCap-
sule is implemented by instrumenting Blink, Chrome’s rendering
engine. Because recording occurs at a higher level, compared
to [11], WebCapsule does not allow for fully deterministic replay.
On the other hand, WebCapsule is portable to multiple platforms,
including mobile devices.
ChromePic is different from the above systems, in that it does
not aim to enable replay. Rather, our system aims to introduce
very low overhead, and to record enough detailed information
about the state of the browser to enable an accurate reconstruction
of web-based attacks towards users, such as social engineering
and phishing.
leverages deep packet
Automated Incident Investigation. WebWitness [30] is an incident
investigation system that
inspection
to reconstruct the steps followed by users who reach social
engineering or drive-by malware download pages. The system
relies on full network packet traces to performs a (network-based)
analysis of both the content of web pages and the way in which
the content is requested (e.g., by analyzing referrers and HTTP
redirections), and is able to reconstruct the web browsing path
that brought the user to the ﬁnal attack page. Unlike WebWitness,
which is purely based on an analysis of network traces using a
set of heuristics and inference methods, ClickMiner [29] aims
to reconstruct the path to an attack page by replaying network
traces into an instrumented browser.
BackTracker [18] is a system for automatically reconstructing
the sequence of steps followed by an attacker to compromise a
machine. Given an initial detection point, such as a malicious ﬁle
identiﬁed by a security analyst, BackTracker traces back processes
and ﬁles that have a causal relation to the detection point,
by leveraging OS-level logs. The ﬁnal result is a dependency
graph that explains what system objects affected (or caused)
the presence of the malicious ﬁle on disk, thus potentially
revealing the attacker’s entry point into the system. Taser [13]
and RETRO [17] use OS-level logs and perform forward tracking
to identify and recover form intrusions, whereas other recent
works [22], [23], [26] have focused on improving accuracy in
backward- and forward-tracking of intrusions, and on reducing
the space for OS logs.
Our work is different from the systems discussed above,
in that ChromePic’s main goal is to produce highly efﬁcient
ﬁne-grained browser logs. In the future, these logs could be
used to enable and improve the accuracy of automated incident
investigation systems.
X. CONCLUSION
In this paper, we presented ChromePic, a web browser
equipped with a novel forensic engine whose goal is to greatly
enhance the browser’s logging capabilities. ChromePic enables a
ﬁne-grained post-mortem reconstruction and trace-back of web
attacks without incurring the high overhead of record-and-replay
systems. ChromePic works by recording a detailed snapshot of
the state of a web page, including a screenshot of how the page
is rendered and a “deep” DOM snapshot, at every signiﬁcant
interaction between the user and web pages. If an attack is later
suspected, these ﬁne-grained logs can be processed to reconstruct
the attack and trace back the sequence of steps the user followed
to reach the attack page.
We developed ChromePic by implementing several careful
modiﬁcations and optimizations to the Chromium code base, to
minimize overhead and make always-on logging practical. Using
both real-world and simulated web attacks, we demonstrated that
ChromePic can successfully capture and aid the reconstruction
of attacks on users. Our evaluation included the analysis of an
in-the-wild social engineering download attack on Android, a
phishing attack, and two different clickjacking attacks, as well
as a user study aimed at accurately measuring the overhead
introduced by our forensic engine. The experimental results
showed that browsing snapshots can be logged very efﬁciently,
making snapshot logging events practically unnoticeable to users.
ACKNOWLEDGMENT
This material is based in part upon work supported by the
National Science Foundation, under grant No. CNS-1149051, and
by the United States Air Force and Defense Advanced Research
Agency (DARPA), under Contract No. FA8650-15-C-7562.
Any opinions, ﬁndings, and conclusions or recommendations
expressed in this material are those of the authors and do not
necessarily reﬂect the views of the National Science Foundation
or DARPA.
REFERENCES
[1] D. Akhawe, W. He, Z. Li, R. Moazzezi, and D. Song, “Clickjacking
revisited: A perceptual view of ui security,” in 8th USENIX Workshop on
Offensive Technologies (WOOT 14), Aug. 2014.
[2] S. Arshad, A. Kharraz, and W. Robertson, “Include me out: In-browser
detection of malicious third-party content inclusions,” in Proceedings of
the 20th International Conference on Financial Cryptography and Data
Security (FC), 2 2016.
[3] L. Ballard, “No more deceptive download buttons,” 2016, https://security.
googleblog.com/2016/02/no-more-deceptive-download-buttons.html.
[4] A. Barth, C. Jackson, and J. C. Mitchell, “Robust defenses for cross-site
request forgery,” in Proceedings of the 15th ACM Conference on Computer
and Communications Security, ser. CCS ’08, 2008.
[5] L. Bauer, S. Cai, L. Jia, T. Passaro, M. Stroucken, and Y. Tian, “Run-time
monitoring and formal analysis of information ﬂows in Chromium,” in
Proceedings of the 22nd Annual Network and Distributed System Security
Symposium, Feb. 2015.
[6] Chrome, “Background pages,” https://developer.chrome.com/extensions/
background pages.
[7] ——, “Extensions,” https://developer.chrome.com/extensions.
[8] D. E. Denning and D. K. Branstad, “A taxonomy for key escrow encryption
systems,” Commun. ACM, vol. 39, no. 3, pp. 34–40, 1996.
[9] R. Dhamija, J. D. Tygar, and M. Hearst, “Why phishing works,” in
Proceedings of the SIGCHI Conference on Human Factors in Computing
Systems, ser. CHI ’06, 2006.
14
[31] ——, “Towards measuring and mitigating social engineering software
download attacks,” in Proceedings of the 25th USENIX Conference on
Security Symposium, ser. SEC’16, 2016.
J. Palme, A. Hopmann, and N. Shelness, “Mime encapsulation of aggregate
documents, such as html (mhtml),” 1999, https://tools.ietf.org/html/rfc2557.
J. Saltzer and M. Schroeder, “The protection of information in computer
systems,” http://web.mit.edu/Saltzer/www/publications/protection/.
[32]
[33]
[34] B. Schneier and J. Kelsey, “Secure audit logs to support computer forensics,”
ACM Trans. Inf. Syst. Secur., vol. 2, no. 2, pp. 159–176, May 1999.
[35] The
Chromium
Project,
“Blick
scheduler,”
https:
//docs.google.com/document/d/16f RIhZa47uEK
OdtTgzWdRU0RFMTQWMpEWyWXIpXUo/edit#heading=h.
srz53ﬂt1rrp.
[36] ——, “Compositor
thread architecture,” https://www.chromium.org/
developers/design-documents/compositor-thread-architecture.
[37] ——,
“GPU
in
https://www.chromium.org/developers/design-documents/
gpu-accelerated-compositing-in-chrome.
compositing
accelerated
Chrome,”
[38] ——, “How chromium displays web pages,” https://www.chromium.org/
developers/design-documents/displaying-a-web-page-in-chrome.
[39] ——,
“Inter-process
communication,”
https://www.chromium.org/
developers/design-documents/inter-process-communication.
[40] ——, “Multi-process architecture,” https://www.chromium.org/developers/
design-documents/multi-process-architecture.
[41] ——, “Out-of-process iframes,” http://www.chromium.org/developers/
design-documents/oop-iframes.
for
[42] ——,
tent
1gRndVmVn7gWJ-rbIHaaOMNsCjSIBn4CAJbZuwLM2ROE/edit.
frame
con-
https://docs.google.com/document/d/
capture
“Proposal
API,”
[43] ——, “The rendering critical path,” https://www.chromium.org/developers/
the-rendering-critical-path.
[44] ——, “Scheduling js timer execution,” https://docs.google.com/document/
d/163ow-1wjd6L0rAN3V U6t12eqVkq4mXDDjVaA4OuvCA/edit#.
[45] ——,
“Threading,”
https://www.chromium.org/developers/
design-documents/threading.
[46] K. Thomas, J. A. E. Crespo, R. Rasti, J.-M. Picod, C. Phillips, M.-A.
Decoste, C. Sharp, F. Tirelo, A. Toﬁgh, M.-A. Courteau, L. Ballard,
R. Shield, N. Jagpal, M. A. Rajab, P. Mavrommatis, N. Provos,
E. Bursztein, and D. McCoy, “Investigating commercial pay-per-install
and the distribution of unwanted software,” in 25th USENIX Security
Symposium (USENIX Security 16), Aug. 2016.
[47] N. Tolia, D. G. Andersen, and M. Satyanarayanan, “Quantifying interactive
user experience on thin clients,” Computer, vol. 39, no. 3, pp. 46–52,
March 2006.
[48] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna,
“Cross site scripting prevention with dynamic data tainting and static
analysis.” in NDSS, vol. 2007, 2007, p. 12.
[10] B. Dolan-Gavitt, J. Hodosh, P. Hulin, T. Leek, and R. Whelan, “Repeatable
reverse engineering with panda,” in Proceedings of the 5th Program
Protection and Reverse Engineering Workshop, ser. PPREW-5, 2015.
[11] G. W. Dunlap, S. T. King, S. Cinar, M. A. Basrai, and P. M. Chen, “Revirt:
Enabling intrusion analysis through virtual-machine logging and replay,”
SIGOPS Oper. Syst. Rev., vol. 36, no. SI, Dec. 2002.
[12] R. Geambasu, J. P. John, S. D. Gribble, T. Kohno, and H. M. Levy,
“Keypad: An auditing ﬁle system for theft-prone devices,” in Proceedings
of the Sixth Conference on Computer Systems, ser. EuroSys ’11. ACM,
2011, pp. 1–16.
[13] A. Goel, K. Po, K. Farhadi, Z. Li, and E. de Lara, “The taser intrusion
recovery system,” in Proceedings of the Twentieth ACM Symposium on
Operating Systems Principles, ser. SOSP ’05, 2005.
[14] C. Grier, L. Ballard, J. Caballero, N. Chachra, C. J. Dietrich, K. Levchenko,
P. Mavrommatis, D. McCoy, A. Nappa, A. Pitsillidis, N. Provos, M. Z.
Raﬁque, M. A. Rajab, C. Rossow, K. Thomas, V. Paxson, S. Savage, and
G. M. Voelker, “Manufacturing compromise: The emergence of exploit-
as-a-service,” in ACM Conference on Computer and Communications
Security, ser. CCS ’12, 2012.
[15] L.-S. Huang, A. Moshchuk, H. J. Wang, S. Schecter, and C. Jackson,
“Clickjacking: Attacks and defenses,” in Presented as part of the 21st
USENIX Security Symposium (USENIX Security 12), 2012.
[16] S.
Institute, “A multi-level defense against
social engineering,”
https://www.sans.org/reading-room/whitepapers/engineering/
2003,
multi-level-defense-social-engineering-920.
[17] T. Kim, X. Wang, N. Zeldovich, and M. F. Kaashoek, “Intrusion recovery
using selective re-execution,” in Proceedings of the 9th USENIX Conference
on Operating Systems Design and Implementation, ser. OSDI’10, 2010.
[18] S. T. King and P. M. Chen, “Backtracking intrusions,” in Proceedings of
the Nineteenth ACM Symposium on Operating Systems Principles, ser.
SOSP ’03, 2003.
[19] S. Kornexl, V. Paxson, H. Dreger, A. Feldmann, and R. Sommer, “Building
a time machine for efﬁcient recording and retrieval of high-volume network
trafﬁc,” in Proceedings of the 5th ACM SIGCOMM Conference on Internet
Measurement, ser. IMC ’05, 2005.
[20] P. Kotzias, L. Bilge, and J. Caballero, “Measuring pup prevalence and pup
distribution through pay-per-install services,” in 25th USENIX Security
Symposium (USENIX Security 16), Aug. 2016.
[21] S. Krishnan, K. Z. Snow, and F. Monrose, “Trail of bytes: Efﬁcient support
for forensic analysis,” in Proceedings of the 17th ACM Conference on
Computer and Communications Security, ser. CCS ’10, 2010.
[22] K. H. Lee, X. Zhang, and D. Xu, “High accuracy attack provenance via
binary-based execution partition,” in NDSS, 2013.
[23] ——, “Loggc: garbage collecting audit log,” in Proceedings of the 2013
ACM SIGSAC conference on Computer &#38; communications security,
ser. CCS ’13, 2013.
[24] Linux Man Pages, “Chattr,” http://man7.org/linux/man-pages/man1/chattr.
1.html.
[25] S. Ma, K. H. Lee, C. H. Kim, J. Rhee, X. Zhang, and D. Xu, “Accurate,
low cost and instrumentation-free security audit logging for windows,” in
Proceedings of the 31st Annual Computer Security Applications Conference,
ser. ACSAC 2015, 2015.
[26] S. Ma, X. Zhang, and D. Xu, “Protracer: Towards practical provenance
tracing by alternating between logging and tainting,” in NDSS, 2016.
[27] Mozilla Developers Network, “Using images,” https://developer.mozilla.
org/en-US/docs/Web/API/Canvas API/Tutorial/Using images.
[28] C. Neasbitt, B. Li, R. Perdisci, L. Lu, K. Singh, and K. Li, “Webcapsule:
Towards a lightweight forensic engine for web browsers,” in Proceedings
of the 22Nd ACM SIGSAC Conference on Computer and Communications
Security, ser. CCS ’15, 2015.
[29] C. Neasbitt, R. Perdisci, K. Li, and T. Nelms, “Clickminer: Towards
forensic reconstruction of user-browser interactions from network traces,”
in Proceedings of the 2014 ACM SIGSAC Conference on Computer and
Communications Security, ser. CCS ’14, 2014.
[30] T. Nelms, R. Perdisci, M. Antonakakis, and M. Ahamad, “Webwitness:
Investigating, categorizing, and mitigating malware download paths,” in
Proceedings of the 24th USENIX Conference on Security Symposium, ser.
SEC’15, 2015.
15