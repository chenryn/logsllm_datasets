the opportunity to provide us feedback at the end of the survey.
We launch our attacks after the user launches a victim app
to complete the given task. In order to correctly infer the iden-
tity of the foreground app with certainty, we modiﬁed the op-
erating system to change the behavior of getRunningTasks
API–which was modiﬁed by Google in Android 5.0 to not
provide this information anymore for privacy reasons as de-
scribed in Section 4.2–to reﬂect its old behavior. Please note
that such a change is not feasible for an attacker in our threat
model and is done solely for the purpose of simplifying our
experiments to remove the noise that might be introduced
due the use of ProcHarvester. With this approach, we can
now focus on assessing how realistic our attacks seem to the
users and their potential to be effective to be without having
to worry about having correctly inferred the foreground app
with ProcHarvester when we launched our attack.
426    29th USENIX Security Symposium
USENIX Association
Overall awareness. None of our participants were able to
notice our attacks, despite the natural tendency for tech-
savviness and security-consciousness among them. It appears
that they were mostly preoccupied with completing the tasks
and only provided feedback regarding the mundane details
of the tasks (e.g., Shazam not identifying the song the ﬁrst
time, late receipt of responses via Messenger etc.). A majority
of them (18 out of 20) granted all the permissions when pre-
sented with the malicious permission dialogs. One of these
participants complained about having to deal with too many
permission requests but granted all permissions regardless.
From the two participants that did not grant all permissions,
one granted the microphone permission to Shazam but de-
nied the location and contacts permissions to Google Maps
and Messenger, respectively because they thought neither
app needed the requested permissions to perform their tasks
(which is indeed true). The other one denied the contacts per-
mission to Messenger because the app did not need it for this
task but said they granted the location permission to Google
Maps because the app requires it for its main utility so they
thought it would still be useful to grant. Even these two par-
ticularly security-conscious participants did not seem to catch
our attacks. In conclusion, we found all of our participants
to be vulnerable to our attacks. We believe these ﬁndings
indicate that false transparency attacks are indeed practical.
7 Defenses and Countermeasures
Phishing attacks have been long dreaded on the Android plat-
form as they are hard to detect and protect against [6, 13]. In
a classic phishing attack on mobile platforms, the adversary
utilizes existing APIs or side channels to identify the victim
in the foreground and immediately launches their own attack
app which realistically spoofs victim’s components (e.g., UI,
name etc.). Hence, they mislead the user to believe they are
actually interacting with the victim. Here, we discuss some of
the existing defense mechanisms against mobile phishing and
why they fall short in the context of false transparency attacks.
In addition, we present a serious security vulnerability we
discovered in a key security mechanism added in Android
10 with the potential to counteract phishing attacks. We then
demonstrate the viability of false transparency attacks on this
Android version and onward. Finally, we propose counter-
measures that can be implemented on the Android platform
and on app stores such as Google Play to practically tackle
false transparency attacks.
Provenance-based techniques. As a defense mechanism
against UI deception, both [14] and [6] advocated for help-
ing users identify the origin of a UI shown on the screen
with a security indicator added to the system bar. Unfortu-
nately, these approaches require invasive modiﬁcations to the
Android framework, which proved their adoption unpractical.
Blocking side-channels. Android’s response to phishing at-
tacks has long revolved around blocking access to certain
APIs and public resources that provide a medium to obtain
the necessary information (i.e., identity of the foreground
app) to successfully carry out such attacks. For example, as
we have previously explained, the getRunningTask() API
and similar APIs that provide information regarding the run-
ning apps and services on the device have been deprecated in
Android 5. In addition, access to the proc ﬁlesystem, which
provides a side channel to infer the state of the apps running
on the device, has been gradually closed down. However, as
we have proven with our attacks, these security measures still
fall short and only serve as a band-aid to a deeper problem.
We argue that it is infeasible to continue putting effort into
identifying and closing down all side channels that provide
information about the foreground as some of these channels
cannot be made private or deprecated due to utility reasons.
For instance, monitoring apps depend on procfs to report app
statistics. Hence, a different approach might be necessary to
address phishing on Android without compromising utility.
Removing key enablers. Our observation is that the main
enabler of phishing on Android is the ability of apps to start
activities in the background to replace foreground apps. If we
can stop background apps from surreptitiously replacing fore-
ground apps, phishing attacks can be conveniently addressed
on Android. In fact, we observed that Google implemented
a security mechanism that adopts this approach in Android
10. Activity starts from background apps will now be blocked
on Android unless the app can justify this action, such as by
having a service that is bound by the system or by another vis-
ible app [15], or by having recently started an activity (within
around 10s). Even though this approach might ﬁrst appear
as an effective countermeasure for phishing, we identiﬁed
ways to evade it and still start activities in the background
without satisfying any of the required conditions checked by
the system to allow such an operation. Hence, we were able
to verify that our attacks still work on Android 10 and later.
In particular, we discovered that there are two main ways
that we can start activities in the background without get-
ting blocked by the system. First, background apps are now
subject to time restrictions in terms of how long they can
stay in the background while still being able to successfully
start activities (i.e., 10s grace period). However, one can pe-
riodically start an invisible activity around every 10s and
immediately move to the back of the task stack again via the
moveTaskToBack API to retain the ability to start activities in
the background at any point. Second, we have discovered that
the moveTaskToForeground API is not being held subject to
the same restrictions by the Android platform; regardless of
how long an app has been in the background, it can always
call this API to conveniently move to the foreground. These
are both serious design issues that hinder the effectiveness of
this security mechanism against phishing attacks.
Upon our correspondence with Google, we have learned
USENIX Association
29th USENIX Security Symposium    427
that the speciﬁc attack with moveTaskToForeground has
been addressed in a more recent revision of Android 10. How-
ever, the periodic restart issue created by the 10s grace period
seems inherently harder to address and is likely to stay as it
might require redesign of the implemented security mecha-
nism. In fact, we veriﬁed that the 10s grace period still exists
in Android 11, which is available in beta version at the time
of writing. In order to at least minimize the practicality of
this speciﬁc attack vector, Google has attempted at a counter-
measure by implementing a mechanism to cancel the grace
period on certain user interaction (i.e., pressing the home but-
ton). However, we observed that this implementation was also
problematic and unfortunately not effective on Android 10.
What we have shown here is that addressing the problem is
not trivial and guaranteeing correctness may require many
versions, redesigns, and steps of testing. In the end, these
vulnerabilities have the potential to make our attack more
likely to succeed because users will not be expecting activ-
ity starts or permission requests from background apps at all
on Android 10. Google has acknowledged our ﬁndings as a
serious security vulnerability that required swift remediation.
In addition, this vulnerability was featured in the upcoming
Android Security bulletin due to its signiﬁcance.
Our suggestions. We propose multiple strategies that can be
implemented simultaneously or as stand-alone techniques to
address false transparency attacks in a practical manner.
• New app store policies. False transparency attacks can be ad-
dressed at the app store level with the addition of new policies
into these stores. For example, Google Play (GP) can imple-
ment name checks to ensure the uniqueness of app names
across all the apps served on GP. In addition, GP can perform
additional checks to catch confusing app names like “this
app”. Such checks would have to be implemented on all exist-
ing app stores to provide uniform security across app markets.
However, one can argue that implementing the checks on GP
can be sufﬁcient as the majority of trustworthy apps that can
be utilized as victims in our attacks are only served on GP.
Nevertheless, side-loaded apps will not be subject to these
checks performed on app stores.
• Enforcing app name integrity in the Android framework.
Perhaps a more effective and efﬁcient way of addressing our
attacks can be achieved by enforcing the uniqueness of an
app name on the Android platform itself. This enforcement
can be performed during installation to ﬁlter out apps with
suspicious app names on a ﬁrst-come-ﬁrst-serve basis.
• Additional app identiﬁers in the permission dialog. Cur-
rently the permission dialog on Android only contains the
name of the app in the dialog to help users identify the app.
Additional identiﬁers, such as an app logo, can be added to the
system dialog to remove any confusion regarding the origin
of an app. Google Play readily implements mechanisms to
prevent logo-based phishing to ensure logos of different apps
will not be dangerously similar. Hence, this can indeed be a
viable approach in addressing false transparency attacks.
• Mandatory app transition effects. In false transparency at-
tacks, one of the problems is that the context change between
apps is not visible to the user. In order to make the con-
text change more visible, mandatory transition effects can
be added between foreground app switches. This way, when
the attacker launches their attack, the user might be able to
catch that the request is not coming from the victim app as
they have just observed the foreground change. It is worth
mentioning that Android 10 attempts to solve this problem
by introducing a security mechanism that prohibits apps from
starting activities from the background; however, there seems
to be design issues with this mechanism as we have explained.
• Prohibition of transparent activities. Android platform can
ban the use of transparent activities altogether to eliminate
phishing attacks that make use of such UI components. Al-
though transparent activities might have some legitimate use
cases, we expect these to be limited.
8 Related Work
Mobile UI spooﬁng attacks. In mobile UI spooﬁng attacks,
users are tricked into misidentifying apps. As a result they
inadvertently either provide sensitive information or perform
critical operations that will be beneﬁcial to adversaries [6].
These attacks can be classiﬁed into two categories. In phishing
attacks, the adversary surreptitiously replaces or mimics the
UI of the victim to lead the user into falsely believing that
they are interacting with the victim [13, 16, 17]. Phishing
attacks rely on existing APIs or side-channels to identify the
foreground app [7, 9, 10, 18]. In clickjacking, also known as
the UI redress attacks, the adversary places opaque and click-
through overlays covering either parts or the entirety of the
victim. While the user assumes they are interacting with the
UI provided by the overlays, their clicks in fact reach the
victim where they induce a state change [19–22].
Android permissions. Android’s permission model has been
subject to much criticism due to a range of issues including its
coarse granularity [23], side-channels to permission-protected
resources [24–27], and design issues with custom permissions
[28,29]. Previous work has also investigated the effectiveness
of install-time permissions and concluded that users would
beneﬁt from having the ability to revoke permissions [3].
Micinski et al. conducted a user study on Android runtime
permissions and concluded that authorization might not be
required for permissions tied to user interactions as users
are generally aware that such interactions will result in the
utilization of certain permissions [30]. In addition, Alepis et
al. discovered transformation attacks on runtime permissions
[31], which are similar to our attacks in essence but lack the
important execution details (e.g., the design strategies and
their implementation, design of multi-targeted attack scenario
that expands the attack surface, user studies to support stealthy
428    29th USENIX Security Symposium
USENIX Association
attacks etc.) that are crucial for the success of the attacks.
Finally, [32] presents a preliminary version of our work.
9 Limitations and Future Work
We veriﬁed that the vulnerability we describe in this paper
(i.e., permission requests with confusing app names from
transparent background apps) exists on all Android versions
that support runtime permissions (Android 6-11). However,
we demonstrated the effectiveness of our foreground app in-
ference technique only on one such Android version (i.e.,
Android 7) to show the viability of our attacks. The reason
is that we expect to obtain similar accuracy results since we
found the same procfs resources that we utilized in our anal-
ysis to be available and given the signiﬁcant structural sim-
ilarities across all these Android versions. In fact, based on
the ProcHarvester measurements [7], we estimated that there
would be no more than about 5-10% variation in accuracy
between the versions. However, we acknowledge that there is
still value in performing further experiments on other versions
for a more complete analysis and leave this for future work.
Our foreground app inference implementation might have
impact on the device’s battery life as it currently runs in the
background to periodically check for changes in the fore-
ground. However, an adversary can poll for these changes
less often by sacriﬁcing some of the attack opportunities. In
addition, it seems possible to optimize the periodicity for
polling based on how often users change between apps (18.9s
or more on average) [11]. We leave the utilization of such
techniques for future work. It is also worth mentioning that
the methods we use in this work are meant to be modular. If a
better approach to foreground inference is developed in the
future, an attacker can use that instead.
Finally, our in-lab user study demonstrates the feasibility of
our attacks for an ideal condition where the attacker is always
able to correctly infer the foreground app due to our use
of the modiﬁed Android version, as explained in Section 6.
However, future work is needed to show the feasibility of
the attacks under a more realistic scenario where there may
be some errors in the foreground inferences made by our
ProcHarvester-based technique.
10 Conclusion
In this work, we presented false tranparency attacks, a class
of phishing-based privilege escalation attacks on Android run-
time permissions. We conducted a user study to understand if
users’ understanding of runtime permissions would innately
create susceptibility to these attacks. We designed these at-
tacks to launch strategically in order to minimize the possi-
bility of alerting the user while retaining effectiveness and
veriﬁed the validity of our design decisions through our user
study. In addition, we conducted a lab study to demonstrate
the feasibility of our attacks in a realistic setting and showed
that none of the participants were able to notice our attacks.
We discussed why existing defenses fall short in the context
of false transparency attacks. In particular, we disclosed the
vulnerabilities in a key security mechanism implemented in
Android 10, which consequently allowed us to still launch our
attacks on this recent Android version. Finally, we proposed
a list of countermeasures to practically defend against false
transparency attacks.
Acknowledgments. This work was supported in part by NSF
CNS 13-30491 (THaW). The views expressed are those of
the authors only.
References
[1] Android app permissions best practices.
https://developer.
android.com/training/permissions/usage-notes.
[2] B. Bonné, S. T. Peddinti, I. Bilogrevic, and N. Taft. Exploring decision
making with android’s runtime permission dialogs using in-context
surveys. In SOUPS, 2017.
[3] P. Wijesekera, A. Baokar, A. Hosseini, S. Egelman, D. Wagner, and
K. Beznosov. Android permissions remystiﬁed: A ﬁeld study on con-
textual integrity. In USENIX Security, 2015.
[4] Android permissions. https://tinyurl.com/y863owbb.
[5] Android dashboard. https://tinyurl.com/qfquw3s.
[6] A. Bianchi, J. Corbetta, L. Invernizzi, Y. Fratantonio, C. Kruegel, and
G. Vigna. What the app is that? deception and countermeasures in the
android user interface. In IEEE Security and Privacy, 2015.
[7] R. Spreitzer, F. Kirchengast, D. Gruss, and S. Mangard. Procharvester:
Fully automated analysis of procfs side-channel leaks on android. In
Asia CCS, 2018.
[8] Background execution limits. https://developer.android.com/
about/versions/oreo/background.
[9] Q. A. Chen, Z. Qian, and Z M. Mao. Peeking into your app without
actually seeing it: UI state inference and novel android attacks. In
USENIX Security, 2014.
[10] W. Diao, X. Liu, Zhou Li, and K. Zhang. No pardon for the interruption:
New inference attacks on android through interrupt timing analysis. In
IEEE Security and Privacy, 2016.
[11] L. Leiva, M. Böhmer, S. Gehring, and A. Krüger. Back to the app:
In Human-computer
the costs of mobile application interruptions.