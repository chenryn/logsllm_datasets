both instructions and data. Both L1 and L2 caches are organized as
N-way Set Associative Cache. Specifically, the entire cache space is
divided into ùëÅ equally-sized pieces, called ways. Further, each way
is indexed with ùëò cache lines, and each line serves as the unit of
data saved in the cache. Meanwhile, the cache lines from all ways
L2 cacheTZASCCore_0MemoryNormal WorldUser ApplicationsL1 cacheNS=1Line DataNS=1Line DataRich OSCore_1Secure WorldTrusted ApplicationsL1 cacheNS=0Line DataNS=0Line DataTrusted OSSecure ResourcesNon-secure ResourcesNS=1Line DataNS=0Line DataNS=1Line DataNS=0Line DataSession 3E: Fuzzing/Trusted Execution Environments CCS '20, November 9‚Äì13, 2020, Virtual Event, USA1003an application, or a system, whose sensitive data is well protected
against the untrusted rich OS. However, existing IEE systems focus
more on protecting the main memory that is commonly utilized to
accommodate the sensitive IEE data, while the security of cache in
IEE systems has not been well studied. In the following, we provide
a brief description on three recently proposed IEE systems, i.e.,
SANCTUARY [14], Ginseng [56], and TrustICE [55].
SANCTUARY supports to run sensitive apps and a micro kernel
in an IEE concurrently with the rich OS on multi-core platforms.
Each IEE is allocated to run on a dedicated core with core-isolated
memory, and the execution of the IEE could not be interrupted
by other non-secure cores. To prevent the cache-based attacks,
the micro kernel will clean the L1 cache during the IEE context
switch processes (i.e., before an IEE is terminated or before the
sensitive apps are loaded). Also, the L2 cache is disabled for the
core running the IEE. Since the L1 cache locates inside each core
and cannot be directly accessed from the other cores, SANCTUARY
provides no extra protection on L1 cache during the run time of
an IEE. Ginseng is an IEE system that protects sensitive data of
selected functions on multi-core platforms. To defend against the
concurrently running malicious OS, the sensitive data is stored and
processed only in the registers, which is inaccessible from the other
cores. Since the sensitive data are only stored in registers instead of
core-isolated memory, Ginseng provides no protection on the cache.
TrustICE is an IEE system implemented on single core platforms,
where the IEE and untrusted rich OS could not run concurrently.
The security-sensitive application running in one IEE consists of
a user program and a micro kernel. Memory is leveraged to store
and process the sensitive data, and the sensitive data protection is
achieved by dynamically configuring the security attribute of IEE
memory, i.e., memory allocated for an IEE will be set as non-secure
when the IEE is running and as secure otherwise. TrustICE also
lacks of protection on the cache.
3 THREAT MODEL
In this paper, we focus on investigating the attacks against the
sensitive data in Isolated Execution Environments (IEEs), as illus-
trated in Figure 1(b). We assume the rich OS in the normal world
cannot be trusted, and the attacker with the root privilege aims
to break the confidentiality and integrity of the sensitive data in
the IEE, i.e., stealing and tampering with the sensitive data in the
IEE. We assume the ARM TrustZone technique can be trusted to
provide secure isolation between the normal world and the secure
world. The software running inside the secure world (e.g., the IEE
monitor) can be trusted and cannot be compromised by the rich
OS. We assume the security-sensitive application running in the
IEE will not deliberately disclose its sensitive data to the outside,
and its code is well protected by the IEE monitor.
4 CITM ATTACKS
We first abstract two generic data protection models in IEE systems.
Next, we uncover three types of cache-based CITM attacks that
can compromise the security of the IEE data against these two
data protection models. Also, we introduce the cache lockdown
technique which is frequently leveraged in the CITM attacks.
4.1 IEE Data Protection
Two generic data protection models have been adopted to protect
the IEE data in two scenarios, namely, (i) allowing untrusted proce-
dures to run concurrently with one security-sensitive application in
the normal world and (ii) suspending all untrusted procedures when
a security-sensitive application is running in the normal world.
Model 1: Untrusted procedures are allowed to run concur-
rently with a security-sensitive application on two (or more)
different cores in the normal world. On multi-core platforms,
when the security-sensitive application is running on one core in
the normal world, untrusted procedures (e.g., the untrusted rich
OS) may run concurrently on different cores [14] and/or run on
the same core in a time-sharing manner [56]. Such IEE systems
usually have three security measures in place to protect its sensi-
tive data. First, the core-isolated storage (e.g., memory allocated
for one core and inaccessible to the other cores [14], or the on-core
storage like registers [56]) is allocated for each security-sensitive
application to process its sensitive data during concurrent execu-
tion. Second, when the execution of a security-sensitive application
is suspended or finished, all its sensitive data is protected against
untrusted procedures by cleaning the core-isolated storage [14]
during the "switch out" process. Third, when the execution of a
security-sensitive application is resumed or started, the IEE mon-
itor is responsible for restoring the core-isolated storage [56] or
allocating blank core-isolated storage [14] during the "switch in"
process.
Model 2: Untrusted procedures are NOT allowed to run con-
currently with security-sensitive applications in the normal
world. On single-core platforms, when one security-sensitive ap-
plication is running in the normal world, all untrusted procedures
are always suspended [55]. On multi-core platforms, all untrusted
procedures are suspended by the IEE monitor even if there are
cores available [23]. Since all cores can only run either the security-
sensitive application or the untrusted procedure at any time in the
normal world, there is no need to allocate core-isolated storage.
Meanwhile, it still requires to enforce the security measures that
should be performed during the IEE‚Äôs context switching processes.
Besides the security measures introduced in model 1, when concur-
rently running is not allowed, the protection could also be achieved
through configuring the IEE memory as inaccessible to the nor-
mal world [55] during the "switch out" process, and restoring it as
accessible to the normal world [55] during the "switch in" process.
4.2 CITM Attack Types
Existing IEE systems focus more on protecting the memory, but the
security of cache in IEE systems has not been well studied. After
conducting a comprehensive investigation of the cache features on
the ARM platforms, we find both data protection models enforced
in the IEE systems might be compromised via manipulating the
cache in the normal world by the untrusted rich OS. From the
attacker‚Äôs point of view, the two IEE data protection models could
be defeated from two main directions, i.e., manipulating the core-
isolated memory during concurrent execution and tampering with the
context switching of the IEE. In the following, we introduce three
types of CITM attacks identified on the IEE systems.
Session 3E: Fuzzing/Trusted Execution Environments CCS '20, November 9‚Äì13, 2020, Virtual Event, USA1004Type I. Manipulating core-isolated memory during concurrent
execution.
In multi-core systems, when main memory is used as the core-
isolated storage for the security-sensitive application, the concur-
rently running malicious OS may steal or modify the IEE data in
the core-isolated memory by manipulating the cache in the normal
world. When the core-isolated memory is set as cacheable, the IEE
data in the memory will pass through the cache when the memory
is accessed. Since the memory is accessed by the security-sensitive
application in the normal world, the corresponding cache lines are
tagged as non-secure (see Section 2.2) and may be manipulated by
the untrusted rich OS. For example, by crafting a page table entry
with the physical address pointing to a core-isolated memory page,
the malicious OS could manipulate its cache lines through accessing
the corresponding virtual address. As an example, we illustrate how
the IEE data in SANCTUARY [14] might be compromised by the
concurrently running malicious OS through manipulating cache in
Section 5.1. Note modern ARM platforms provide hardware features
to ensure memory isolation, but they lack similar features to ensure
cache isolation. For example, the Identity-based Filtering feature on
the TZC-400 (see Section 2.1) can be used to isolate memory, but it
does not guarantee the isolation of cache.
Type II. Bypassing security measures during IEE "switch out" pro-
cess.
The attackers may aim to bypass the security measures that are
enforced to ensure data protection during IEE‚Äôs context switching
processes. Since the rich OS cannot be trusted, the security measures
during the "switch in" process are always initiated and accomplished
by the trusted IEE monitor in the secure world. Therefore, since
the associated cache lines are tagged as secure and could not be
manipulated in the normal world, it is difficult to bypass those
security measures by manipulating the cache lines. For security
reason, the security measures enforced during "switch out" process
should be performed either by the IEE itself in the normal world
or the IEE monitor in the secure world. However, we uncover the
security measures could be bypassed in both cases.
When the security measures are performed by the IEE in the
normal world, data cleaning could be achieved through overwriting
the IEE memory with random data or all zero data if memory is
leveraged to store IEE data. Since the memory cleaning is performed
in the normal world, the corresponding cache lines are non-secure.
Thus, it is possible to constrain the memory writings in the cache
and retain the memory unchanged by controlling the non-secure
cache. For example, when the memory is set as write-back, write-
allocate, all memory writing will be buffered in the corresponding
cache set until the cache set is evicted (see Section 2.2). The attack-
ers can leverage the cache lockdown technique (see Section 4.3)
to prevent the cache eviction, so that the sensitive data on IEE
memory might not be securely cleaned after the security-sensitive
application has been suspended or finished.
When the security measures are performed by the IEE monitor
in the secure world, the IEE should be able to directly transfer the
control to the IEE monitor in the secure world without involving the
rich OS. Otherwise, the attacker may manipulate the cross-world
context switching to bypass the security measures. However, the
context switching from the normal world to the secure world is
Figure 3: Locking Specified Cache Set via Page Table Control
normally initiated by invoking a high-privileged instruction called
Secure Monitor Call (SMC) in the rich OS kernel. When the security-
sensitive application is a function or an application [56], the SMC
instruction cannot be directly invoked inside the IEE. To solve this
problem, some IEE systems choose to trigger the context switching
by raising an external abort in the secure world via intentionally
accessing secure memory from the security-sensitive application.
However, since the cache lines mapping to the secure memory are
non-secure when being accessed in the normal world, the malicious
rich OS may manipulate the corresponding cache lines to bypass the
control switching and the security measures (e.g., IEE data cleaning).
We show how the security measures during the "switch out" process
in the Ginseng system [56] can be bypassed via controlling the non-
secure cache in Section 5.2.
Type III. Misusing incomplete security measures during IEE‚Äôs con-
text switching.
In some IEE systems, the memory protection during context
switching is achieved by dynamically controlling the security at-
tribute of the IEE memory, i.e., configuring it as non-secure during
"switch in" and secure during "switch out". In those systems, even
if the security measures during context switching are securely en-
forced, the cache may still be misused by attackers to manipulate
the IEE data. This is because the memory configuration is achieved
through TZASC (see Section 2.1), but the corresponding cache lines
might be still non-secure in the normal world. Therefore, inappro-
priate cache cleaning during "switch out" might lead to IEE data
leakage. Similar, malicious data might be loaded into the cache be-
fore "switch in" and later be fed to the security-sensitive application
rather than the original sensitive data in the IEE memory. Note
Type III attack is due to the incomplete security measures on cache,
which is different from Type II attack that focuses on bypassing the
existing security measures during context switching. We illustrate
how TrustICE [55] system becomes vulnerable by manipulating
cache during the "switch in" and "switch out" processes.
In summary, when the IEE systems use Model 1 for data protec-
tion, they may suffer from all three identified attacks. When using
Model 2, the IEE systems are vulnerable to Type II and III attacks,
but not Type I attack since the concurrently running is not allowed.
Also, Type I and III attacks work only when memory is employed to
store IEE data, and Type II attack has this requirement only when
the security measures for "switch out" process are performed in
IEEs.
Page Num  Page Attribute Page 1  Cacheable Page 2  CacheableCache WayPage Cache Set 2}Page SizePage Cache Set 1 Page 7  Cacheable Page 6  Non-cacheable ‚Ä¶  ‚Ä¶  ‚Ä¶  ‚Ä¶ Page Cache Set 3Page Cache Set 4Page Cache Set 5Session 3E: Fuzzing/Trusted Execution Environments CCS '20, November 9‚Äì13, 2020, Virtual Event, USA10054.3 Cache Lockdown Technique
Cache lockdown is a feature that enables a program to load code
and data into cache and mark it as exempt from eviction [52]. The
main purpose of locking the code or data in cache is to provide
faster system response and avoid the unpredictable execution times
due to the cache line eviction. Attackers may misuse this technique
to launch the CITM attacks, e.g., locking the writing operation for
memory in the cache to invalidate the memory-cleaning operations.
Three approaches may be adopted to achieve cache lockdown.
First, some ARM development boards (e.g., i.MX53 and i.MX6Quad
development boards) allow the users to lock certain L2 cache ways
by configuring the L2 auxiliary cache control register [59]. However,
this hardware-based locking control register is not supported on
ARMv8 processors. Second, by setting the memory regions con-
trolled by the attackers as outer cacheable and all other memory
regions as outer non-cacheable, attackers can exclusively occupy the
L2 cache. This method may introduce huge performance overhead
on the normal execution of the system due to the exclusive usage of
L2 cache. Third, attackers may exclusively occupy some L2 cache
sets by conducting a fine-grained control on each memory page‚Äôs
caching attributes. Specifically, since the caching attributes are set
at the granularity of memory page, we divide each cache way into
page-sized blocks. Blocks with the same index compose a page
cache set (see the cache lines marked gray in Figure 3). To lock the
data of a specified memory page on the L2 cache, attackers can
configure that memory page as outer cacheable, and set all other
memory pages sharing the same page cache as outer non-cacheable.
For example, in Figure 3, when page 1 and page 6 share the same
page cache set, attackers can lock the data of page 1 on the L2
cache by setting page 1 as outer cacheable and page 6 as outer non-
cacheable. This technique has been leveraged in the SecTEE [61]
system to prevent cache-based side-channel attacks. Considering
the small size of L1 cache, we choose to lock only L2 cache using
the third method in our attacks.
5 CASE STUDY OF CITM ATTACKS
We conduct case studies of the CITM attacks on three well-
known IEE systems including SANCTUARY [14], Ginseng [56], and
TrustICE [55] to illustrate how they could be utilized to compromise
IEE systems on real hardware testbeds. Since SANCTUARY system
is achieved through the ARM Fast Models virtualization tools rather
than on the actual development board, we simulate the cache oper-
ations of SANCTUARY on the i.MX6Quad development board, and
successfully steal and modify the sensitive IEE data via the cross-
core L1 cache manipulation. The cache operations of SANCTUARY
are mainly obtained through carefully studying the published pa-
per [14]. The CITM attacks of the Ginseng and TrustICE systems
are implemented with the source codes shared from their authors
on two real hardware development boards, namely, HiKey620 and
i.MX6Quad SABRE.
5.1 SANCTUARY: Manipulating L1 Cache
In the following, we first introduce the security measures of SANC-
TUARY on IEE data protection. Next, we elaborate that SANCTU-
ARY suffers from Type I Attack due to the lack of protection on
the L1 data cache at the run time of an IEE. Then, we detail the
attacking procedure that can leak and tamper with sensitive data
in IEE of the SANCTUARY system.
5.1.1 Data Protection Mechanisms. SANCTUARY includes a num-
ber of data protection mechanisms to protect the sensitive data
in IEE. When the IEE finishes its running (i.e., during the "switch
out" process), the sensitive data will be cleaned by the micro kernel
running inside the IEE, which overwrites all-zero data to the pro-
tected core-isolated memory and invalidate the L1 cache (L2 cache
is disabled for the core-isolated memory in SANCTUARY). Before
booting up one IEE (i.e., during the "switch in" process), the IEE
monitor in the secure world constructs a clean environment for the
IEE. In addition, the micro kernel invalidates the L1 cache before
the sensitive apps are loaded. Therefore, SANCTUARY is immune
to Type III attack, since the core-isolated memory and L1 cache
are safely cleaned by the micro kernel during both "switch in" and
"switch out" processes and L2 cache is disabled. Also, SANCTUARY
is immune to Type II attack, since the data cleaning operation is