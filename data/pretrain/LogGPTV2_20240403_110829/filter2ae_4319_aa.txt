**作者：p1g3@D0g3**  
**原文链接:**  
**本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！**  
**投稿邮箱：PI:EMAIL**
这一周把时间都花在学习RMI上了...在很多位师傅的帮助下，终于搞懂了RMI是个什么东西，他的攻击流程是怎么样的，遂记录一篇笔记。
# RMI是什么?
RMI（Remote Method Invocation），是一种跨JVM实现方法调用的技术。
在RMI的通信方式中，由以下三个大部分组成：
  * Client
  * Registry
  * Server
其中Client是客户端，Server是服务端，而Registry是注册中心。
客户端会Registry取得服务端注册的服务，从而调用服务端的远程方法。
注册中心在RMI通信中起到了一个什么样的作用？我们可以把他理解成一个字典，一个负责网络传输的模块。
服务端在注册中心注册服务时，需要提供一个key以及一个value，这个value是一个远程对象，Registry会对这个远程对象进行封装，使其转为一个远程代理对象。当客户端想要调用远程对象的方法时，则需要先通过Registry获取到这个远程代理对象，使用远程代理对象与服务端开放的端口进行通信，从而取得调用方法的结果。
RMI我认为实际上更偏向于面向接口编程，客户端不需要具体的接口实现类，只需要接口实现的代码，就可以调用远程服务端中实现了这个接口具体类的方法。
强烈建议在学习RMI之前，先看看B站马士兵的这个视频来了解RPC的演练过程，以及底层的原理：[https://www.bilibili.com/video/BV1zE41147Zq?from=search&seid=13740626242455157002](https://www.bilibili.com/video/BV1zE41147Zq?from=search&seid=13740626242455157002)
# RMI的通信原理
在低版本的JDK中，Server与Registry是可以不在一台服务器上的，而在高版本的JDK中，Server与Registry只能在一台服务器上，否则无法注册成功。
## 测试源码 & JDK版本
  * JDK 7u80
### Client
Client用来调用远程方法，由于需要调用具体方法，所以本地需要有服务端注册的远程对象类所实现的接口。
User.java
    import java.rmi.RemoteException;
    public interface User extends java.rmi.Remote {
        ublic String getName() throws RemoteException;;
        public User getUser() throws RemoteException;
        public void updateName(String name) throws RemoteException;;
    }
接口需要继承java.rmi.Remote接口，这是一个空接口，和Serializable接口一样，只作标记作用，接口中的每个方法都需要抛出RemoteException异常。
Client.java
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class Client {
        public static void main(String[] args) throws Exception {
            Registry registry = LocateRegistry.getRegistry("127.0.0.1",8888);
            registry.lookup("user");
        }
    }
Client与注册中心和服务端交互。
### Server
User.java
    import java.rmi.RemoteException;
    public interface User extends java.rmi.Remote {
        public String getName() throws RemoteException;;
        public User getUser() throws RemoteException;
        public void updateName(String name) throws RemoteException;;
    }
同样的，Server中也需要有一个User接口。
LocalUser.java
    import java.io.Serializable;
    import java.rmi.RemoteException;
    import java.rmi.server.UnicastRemoteObject;
    public class LocalUser extends UnicastRemoteObject implements User  {
        public String name;
        public int age;
        public LocalUser(String name, int age) throws RemoteException {
            super();
            this.name = name;
            this.age = age;
        }
        public User getUser(){
            return this;
        }
        public String getName(){
            return "["+this.name+"]";
        }
        public void updateName(String name){
            this.name = name;
        }
    }
LocalUser实现了User接口，其需要继承UnicastRemoteObject类。
Server.java
    import java.rmi.AlreadyBoundException;
    import java.rmi.NotBoundException;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.util.concurrent.CountDownLatch;
    public class Server {
        public static void main(String[] args) throws RemoteException, AlreadyBoundException, InterruptedException, NotBoundException {
            User liming = new LocalUser("liming",15);
            Registry registry = LocateRegistry.createRegistry(8888);
            registry.bind("user",liming);
            System.out.println("registry is running...");
            System.out.println("liming is bind in registry");
            CountDownLatch latch=new CountDownLatch(1);
            latch.await();
        }
    }
Server.java负责将远程对象绑定至注册中心。
### Registry
上面的Server里其实已经包含Registry了，上面的是大多数人的写法，当然如果注册中心和Server不写在一个文件里的话，我们还可以单独写一个创建注册中心的文件。
Registry.java
    import java.rmi.AlreadyBoundException;
    import java.rmi.NotBoundException;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.util.concurrent.CountDownLatch;
    public class Registry {
        public static void main(String[] args) throws RemoteException, AlreadyBoundException, InterruptedException, NotBoundException {
            Registry registry = LocateRegistry.createRegistry(8888);
            System.out.println("registry is running...");
            CountDownLatch latch=new CountDownLatch(1);
            latch.await();
        }
    }
或者我们还可以使用bin目录下的rmiregistry来创建注册中心：
用法：rmiregistry port
### 调用
在这里写一下如何在客户端调用服务端的远程方法，首先编译并运行Server.java：
接着运行客户端，即可调用远程方法：
## 流程图
上面一张图是我自己画的，可能不太完善，具体可以看先知中这个师傅里边用的流程图：
上图来源：https://xz.aliyun.com/t/2223
# 源码分析
## 客户端或服务端与注册中心的通信
获取注册中心有两种方式，一种是创建时获取（LocateRegistry#createRegistry），另外一种则是远程获取（LocateRegistry#getRegistry）。接下来会分析这两种方式的异同。
### 本地获取注册中心
createRegistry有两个方法，其中传递的参数不同：
第一种只需要传递port，即注册中心监听的端口，第二种方式除了需要传递port外，还需要传递RMIClientSocketFactory以及RMIServerSocketFactory对象。
两个方法最终获取到的都是RegistryImpl对象，对于攻击者的我们关系并不大，只需要分析第一种方法即可。
        public static Registry createRegistry(int var0) throws RemoteException {
            return new RegistryImpl(var0);
        }
var0即我们传递的port，这里new了一个RegistryImpl对象，跟入：
        public RegistryImpl(int var1) throws RemoteException {
            LiveRef var2 = new LiveRef(id, var1);
            this.setup(new UnicastServerRef(var2));
        }
LiveRef里封装了一些信息，包括ip和要监听的端口等：
第二行的setup方法中传递的参数是UnicastServerRef对象，在new的过程中把LiveRef对象传递进去了：
        public UnicastServerRef(LiveRef var1) {
            super(var1);
            this.forceStubUse = false;
            this.hashToMethod_Map = null;
        }
    super#UnicastRef
    public UnicastRef(LiveRef var1) {
        this.ref = var1;
    }
在这里也只是做了一些数据的封装，并没有涉及到网络请求，我们就行跟RegistryImpl#setup：
跟入UnicastServerRef#exportObject：
这里调用了Util.createProxy，传入了RegistryImpl.class、Ref以及一个不知道是干嘛用的参数：
接着跟CreateStub：
在这里返回了RegistryImpl_Stub对象，所以var 5实际上是RegistryImpl_Stub对象。
回到上边的setSkeleton：
同样的，这里也会通过一样的方式来获取RegistryImpl_Skel对象：
继续回到上边，再创建完Stub和Skel对象时，会实例化一个Target对象：
var
6实际上也只是初始化了一些信息，把上面获取到的Stub、Skel对象以及一些ip端口信息封装在一个对象里边，之后会调用LiveRef#exportObject，并且将Target对象传进去，接着会来好几个exportObject，调用栈如下：
到了TCPTransport#exportObject之后，会做一系列网络层的操作，包括监听端口、设置当遇到请求时该怎么做：
跟入listen方法：
在调用TCPEndpoint#newServerSocket时，会开启端口监听：
接着会设置AcceptLoop线程，此时会触发其run方法：
跟入TCPTransport#executeAcceptLoop：
这里会获取到请求的一些相关信息，比如Host之类，之后在下边会创建一个线程调用ConnectionHandler来处理请求：
跟入ConnectionHandler#run：
这里的var2就是上边传进来的ServerSocket对象，接着跟入run0方法：
在上边会获取一些客户端发来的信息，下边会调用TCPTransport#handleMessages来处理请求：
跟入handlerMessages：
上面还是获取客户端传来的数据，我们这里直接看下边：
这里只需要关注80，因为客户端发送数据的时候这里发的是80，具体后边会说。
在上面的代码中先是创建了一个StreamRemoteCall对象，并传入var1，var1是当前连接的Connection对象，接着跟入TCPTransport#serviceCall：
在上边获取了传来的一些信息，比如ObjID，接着会获取Target对象，在下边会调用UnicastServerRef#dispatch来处理请求：
这里传递了两个参数，一个是Remote对象，一个是当前连接的StreamRemoteCall对象，接着跟dispatch：
前面也是读一些数据，接着会调用到UnicastServerRef#oldDispatch：
最后一行调用了this.skel.dispatch，此时的this.skel为刚刚创建的RegistryImpl_Skel对象，接着跟其dispatch方法：
在这里就是真正处理请求的核心了，var3是传递过来的int类型的参数，在这里有如下关系的对应：
  * 0->bind
  * 1->list
  * 2->lookup
  * 3->rebind
  * 4->unbind
在这里会对每个调用的方法进行处理，比如你调用了bind方法，就会先readObject反序列化你传过来的序列化对象，之后再调用var6.bind来注册服务，此时的var6位RegistryImpl对象，这个对象其实就是调用createRegistry获得的，这里说这个的目的是想让大家知道，其实无论是客户端还是服务端，最终其调用注册中心的方法都是通过对创建的RegistryImpl对象进行调用。
在上面那部分，我们已经分析完了当注册中心监听的端口被请求时，是如何处理这些请求的。
通过createRegistry返回的是RegistryImpl对象，最终是像这样的：
这里的bindings是一个Hashtable，里边以键-值的方式存储了服务端注册的服务。
### 远程获取注册中心
通过getRegistry方法获得的对象是RegistryImpl_Stub对象，与通过createRegistry获得的对象不同，createRegistry获得的微RegistryImpl对象。
当我们调用这两者的方法时，其对应的处理方式也十分不同，以bind方法举例，通过createRegistry获得的注册中心调用bind方法十分简单：
在第一步会checkAccess，里边有一些判断，会对你当前的权限、来源IP进行判断，之前说了，高版本JDK中不允许除了localhost之外的地址注册服务也是在这里进行判断的：
之后其实很简单了，只是这个键是否已经被绑定过，如果已经被绑定过，则抛出一个AlreadyBoundException的错误，反之则将键和对象都put到Hashtable中。
而如果是远程调用bind方法呢？那将会变得十分麻烦，测试代码：
    User liming = new LocalUser("liming",15);
    Registry registry = LocateRegistry.createRegistry(8888);
    Registry reg = LocateRegistry.getRegistry("127.0.0.1",8888);
    reg.bind("user",liming);
这里我先创建了注册中心，之后通过getRegistry的方式远程获取注册中心，此时获得到的对象为RegistryImpl_Stub，跟入其bind方法：
这里会先调用UnicastRef#newCall：
注意这里的var3，前面说过，bind方法对于的数字为0，此时的var3就代表了bind方法对应的数字。
在newConnection这里，会写入一些已经约定好的数据，比如ip、端口等，在StreamRemoteCall里，同样会写入一些数据：
这里在最开始写入了80，也就和我们上边分析时说的80对上了，然后还会写一些数据比如要调用的方法所对应的num和ObjID之类的。
当调用完这些之后，回到bind方法：
此时会往写入两个内容：
  * 序列化后的var1，var1为我们要绑定远程对象对应的名称