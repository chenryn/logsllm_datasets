(ii) Fixed Ingress Router implies that as long as there is
no path ﬂuctuations caused by routing updates, load balanc-
ing, or equal cost multi-path routing, there is a single path
from a vantage point to any interface on a given subnet S.
As an important result; two immediately successive probe
packets released from the same vantage point and destined
to two diﬀerent interfaces on a subnet S are expected to
reach the subnet through the same router. This ﬁxed router
is called ingress router. In Figure 3, R2 is the ingress router
of the subnet S with respect to the vantage (see Section 3.7
for more information on path ﬂuctuations).
A ﬁxed ingress router is resistant to intermediate path
ﬂuctuations as long as the ﬂuctuated routes converge at or
before the ingress router.
(iii) Unit Subnet Diameter implies that two interfaces
on the same subnet are located at most one hop distance
apart with respect to a vantage point. That is, for inter-
faces i, j ∈ S ⇒ |ih
In Figure 3, interfaces
{R2.w, R3.s, R4.e, R6.n} ∈ S are at most one hop apart from
each other with respect to the vantage.
(iv) Mate-31 Adjacency implies that given that iip and
jip are alive and mate-31 of each other, then i ∈ S ⇒ j ∈ S.
3.3 Network Exploration (Growing)
v | ≤ 1.
v − jh
In this section we detail how tracenet builds the subnet
accommodating an IP address obtained at a particular hop
and introduce the related algorithm. Similar to traceroute,
tracenet gradually extends a trace path by obtaining an IP
address lip (or anonymous) via indirect probing at each hop
on the way from a vantage point to a destination. However,
after obtaining IP address lip at a particular hop, tracenet
collects other IP addresses that are hosted on the same sub-
net which accommodates interface l before moving to the
next hop. We refer to the ﬁrst step of acquiring an IP ad-
dress at a certain hop via indirect probing as trace collection
and refer to the second step of collecting other IP addresses
sharing the same subnet as subnet exploration.
Given an acquired IP address lip at trace collection step,
the main idea of subnet exploration is forming a subnet of
/31 which covers lip and growing it as long as it does not
conﬂict with one of the heuristics (Section 3.5) that we use
for verifying the authenticity of the subnet.
Figure 3 freezes a tracenet session P = {. . . , R2.e, R4.e}
at hop d. Interface R2.e was acquired at previous hop and
interface R4.e is obtained at current hop via indirect prob-
ing in trace collection mode. Those two interfaces are called
ingress interface and pivot interface, respectively. The router
hosting the ingress interface (R2 in Figure 3) is called the
In the ﬁgure, the interface R2.w, which is
ingress router.
located on the ingress router R2 and accommodated on the
same subnet with the pivot interface R4.e, is called contra-
Destination
R
4
R
5
R .e
4
hop d
R .e
hop d-1
2
R .s
1
hop d-2
Vantage
R
3
S
Vantage
R
2
R1
pivot
contra-pivot
ingress
R
6
R
7
R
.n
i
R
.w
i
R
.e
i
R
.s
i
Interface Legend
Figure 3: Subnet Exploration. Observed subnet is
grown around the pivot interface discovered in trace
collection mode by forming /31, /30, ... subnets.
pivot interface. Observe that the interface R4.e belongs to
subnet S which hosts a number of other interfaces that we
want to discover.
To fully discover a subnet under investigation (S in Fig-
ure 3), tracenet forms a temporary subnet starting from
/31 which covers the pivot interface and grows the subnet
with decreasing preﬁx lengths (increasing subnet sizes). For
each formed subnet, it directly probes the possible IP ad-
dresses within the range of the subnet to ensure that the
probed IP address is assigned to an interface. Then, it ap-
plies the heuristics deﬁned in Section 3.5 to decide whether
or not the probed candidate IP address is on the subnet be-
ing explored. An investigated IP address breaking one of the
heuristics implies that it is not on the subnet being built. As
a result, subnet growing process immediately stops and the
subnet gets shrunk to its last known valid state (i.e., the pre-
vious subnet preﬁx) by removing all interfaces that do not
belong to the last valid state. Additionally, subnet growing
stops if the number of successfully probed IP addresses for
a subnet preﬁx is equal or less than half of the total number
of IP addresses that such a subnet could accommodate.
Algorithm 1 shows the pseudocode for subnet exploration.
Let (cid:2)→ operator (read as “results in”) be a syntactical el-
ement. (cid:6)iip, ttl(cid:7) (cid:2)→ (cid:6)jip, RESP ON SE M SG T Y P E(cid:7) im-
plies that probing of an IP address iip with TTL value of tll
results in a response message of type RESP ON SE M SG
T Y P E with jip as the source IP address ﬁeld of the mes-
sage. If probing does not yield any response message, then
jip and RESP ON SE M SG T Y P E are set to nil. In cases
where we are not interested in the value of jip but only the
response message type, we use “. . .” in place of jip.
In the algorithm, the outer loop forms temporary growing
of subnets S(cid:2)
starting from a /31 preﬁx. Inner loop traverses
each candidate IP address in S(cid:2)
by ﬁrst testing the aliveness
of the IP address at distance d (line 6) and then applies the
heuristics explained in Section 3.5 (line 7). As long as the
heuristics hold for the current IP address, it is assumed to be
part of subnet S being gradually built (line 12). Whenever
any heuristic fails, the subnet gets shrunk to previous preﬁx
(line 9). Obtaining an ICMP TTL-Exceeded message as a
result of the test at line 6 implies that the subnet is over-
359grown and needs to be shrunk (lines 14-17). Lines 19-21
ensure that more than half of the potential IP addresses of
S are utilized before growing S one more level further.
covering lpivot with preﬁx m
APPLY HEURISTICS TO l
if l breaks any heuristics then
if (cid:6)lip, jh(cid:7) (cid:2)→ (cid:6). . . , ECHO REP LY (cid:7) then
Algorithm 1 Subnet Exploration
Input: lingress, lpivot /*ingress and pivot interfaces respectively*/
Output: S /*observed subnet*/
1 S ← ∅
2 S ← S ∪ {lpivot}
3 for m ← 31 to 0 do
Form temporary S(cid:2)
4
for each lip ∈ S(cid:2) do
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
end if
22 end for
Sp ← m + 1 /*Shrink S and STOP*/
return
S ← S ∪ {l}
end if
end for
if m ≤ 29 and |S| ≤ (232−m)/2 then
else if (cid:6)lip, jh(cid:7) (cid:2)→ (cid:6). . . , T T L EXCD(cid:7) then
end if
Sp ← m + 1 /*Shrink S and STOP*/
return
return
else
3.4 Subnet Positioning
As discussed in Section 3.1, routers usually report the
queried IP addresses in their reply messages to direct probes.
However, for indirect probes, a router may report the IP
address of the incoming interface, a default interface or the
interface on the shortest path from itself back to the van-
tage point. Tracenet builds the subnet which accommodates
the interface obtained with indirect probing at trace collec-
tion mode. Therefore, it needs to correctly designate a pivot
and an ingress interface, determine the distance to the pivot
interface from the vantage point, and decide whether or not
the subnet is on the trace path before growing the subnet
(Section 3.3). Subnet positioning, discussed in this section,
is the process of designating pivot and ingress interfaces, de-
termining the distance of the pivot interface from the van-
tage point and deciding if the subnet is on the trace path.
In most cases, the perceived direct distance of a vantage
point to an interface l that is obtained indirectly at hop d
is also d. In some other cases, however, it might diﬀer by
one or a few hops. Consequently, direct distance to other
interfaces on the subnet accommodating l changes. To deter-
mine the hop distance from the vantage point to an interface
l obtained with indirect probing at hop d in trace collection
mode, tracenet sends probe packets with increasing (for-
ward) and decreasing (backward) TTL values starting from
d until it locates the exact location of l.
Figure 4 shows portion of a tracenet session frozen at
hop d passing through the routers R1 and R3. Diﬀerent
from Figure 3, it does not show the reported interfaces (ﬁlled
black) by the routers in order to discuss various scenarios.
Let u and v be the two successive interfaces obtained from
R1 and R3 in trace collection mode at hops d − 1 and d,
respectively.
A subnet S to be explored in subnet exploration mode is
said to be “on-the-trace-path” if the indirect probe packet
in trace collection mode passes through it. For instance, in
Figure 4, if router R3 returns R3.e and the path to R3.e is P
Destinaton
.
R3
v
hop d
.u
R1
hop d-1
D e s t i n a t i o n
R2
R3
  S
m
R1
Path P’’
Path P
R4
S
n
R5
R6
R7
Path P’
Trace Path
Vantage
V a n t a g e
Ri.n
R
.w
i
Ri.e
Ri.s
Interface Legend
Figure 4: Subnet Positioning. Assuming path to
Sm and Sn is P or P (cid:2)(cid:2)
, if R3.v = R3.e then lpivot =
R3.e, on the other hand, if R3.v = R3.s then lpivot =
mate31(R3.e) or lpivot = mate30(R3.e)
or P (cid:2)(cid:2)
then the subnet to be explored is Sm and it is on-the-
trace-path. On the other hand, if it returns R3.s then the
subnet to be explored is Sn and it is “oﬀ-the-trace-path”. In
Figure 4, tracenet assumes that a subnet to be explored at
hop d is oﬀ-the-trace-path if the perceived direct distance to
v is diﬀerent from d. Instead, if the perceived direct distance
to v is d and probing vip with TTL value d − 1 results in an
ICMP TTL EXCEEDED message with source IP address
uip, i.e., (cid:6)vip, d − 1(cid:7) (cid:2)→ (cid:6)uip, T T L EXCD(cid:7) then the subnet
to be explored is on-the-trace-path. On the other hand, if
perceived direct distance to v is d and probing vip with TTL
value d − 1 results in an ICMP TTL EXCEEDED message
with source IP address other than uip i.e., (cid:6)vip, d − 1(cid:7) (cid:2)→
(cid:6)lip, T T L EXCD(cid:7) where l (cid:8)= u, tracenet probabilistically
concludes that the subnet to be explored is oﬀ-the-trace-
path.
Under a stable path to a subnet S, the pivot interface
is always selected among the farthest interfaces of a sub-
net to be explored with respect to the vantage point, i.e.,
∃lcontra−pivot ∈ S : ∀(l (cid:8)= lcontra−pivot), lh = lh
contra−pivot +
1, l ∈ S, and lpivot (cid:8)= {lcontra−pivot} in S. To illustrate in
Figure 4, in case R3 returns R3.e and the path to subnet
Sm is P or P (cid:2)(cid:2)
then R3.e serves as pivot interface. Con-
versely, if R3 returns R3.s and the path to subnet Sn is P
then some other alive interface l ∈ Sn (usually /31
or P (cid:2)(cid:2)
mate or /30 mate of R3.s) serves as pivot interface. Let
mate31(lip) and mate30(lip) be functions returning /31 and
/30 mate of a given IP address lip. Tracenet exploits mate-
31 adjacency deﬁned in Section 3.2 to determine the pivot
In Figure 4, if sending a probe packet to /31
interface.
mate of the IP address vip ∈ R3 with TTL value of vh = d
results in an ICMP response of T T L EXCEEDED, i.e.
(cid:6)mate31(vip), vh(cid:7) (cid:2)→ (cid:6). . . , T T L EXCD(cid:7), then pivot inter-
face is mate /31 or mate /30 of vip, otherwise pivot inter-
face is v itself. Similar argument applies to /30 mate in case
probing /31 does not yield any response.
After determining the pivot interface lpivot at a distance
d for the subnet to be explored, the ingress interface lingress
is obtained by sending a probe packet to the pivot interface
with a TTL value of d− 1 from the vantage point. Formally,
(cid:6)lip
, T T L EXCD(cid:7).
pivot
Algorithm 2 details the process of subnet positioning. In
the algorithm dst(lip) is a function that determines the di-
rect distance to the interface l from the vantage point. Lines
pivot − 1(cid:7) (cid:2)→ (cid:6)lip
ingress
, lh
3602-10 determine if the subnet to be explored is on-the-trace-
path. Lines 11-21 designate the pivot interface and line 22
designates the ingress interface of the subnet to be explored.
Algorithm 2 Subnet Positioning
Input: u, v, d /*last two interfaces obtained in trace collection mode
at hop d − 1 and d*/
Output: lpivot, lingress /*pivot and ingress interfaces*/
1 vh ← dst(vip)
2 if vh (cid:10)= d then
3
4 else
5
6
7
Subnet to be explored is oﬀ-the-trace-path
if (cid:6)vip, vh − 1(cid:7) (cid:2)→ (cid:6)uip, T T L EXCD(cid:7) then
Subnet to be explored is on-the-trace-path
else if (cid:6)vip, vh − 1(cid:7) (cid:2)→ (cid:6)iip, T T L EXCD(cid:7) where iip (cid:10)= uip
then
end if
lip
pivot
if mate31(vip) is in use then
else if mate30(vip) is in use then
Subnet to be explored is oﬀ-the-trace-path
← mate31(vip)
← mate30(vip)
8
9
10 end if
11 if (cid:6)mate31(vip), vh(cid:7) (cid:2)→ (cid:6). . . , T T L EXCD(cid:7) then
12
13
14
15
16
end if
17
lh
pivot
18 else
lip
19
pivot
20
lh
pivot
21 end if
22 lingress ← i where (cid:6)lip
← vh + 1
← vip
← vh
lip
pivot
, lh
pivot
pivot
− 1(cid:7) (cid:2)→ (cid:6)iip, T T L EXCD(cid:7)
3.5 Heuristics
Heuristics given in this section are based on the common
IP address assignment practices and routing behavior on the
Internet. They are devised to capture a subnet regardless of
its location at the core or edge of the Internet and regardless
of its being a multi access LAN or a point to point link.
Let u and v be two consecutive interfaces obtained in trace
collection mode and i and j be the ingress and pivot inter-
faces respectively determined by the subnet positioning al-
gorithm. Note that u = i and v = j may or may not hold.
Let lip be the IP address suspected to be sharing the same
subnet with jip and S be the subnet we are trying to infer
such that j, v ∈ S.
Far Fringe
Interfaces
Far Fringe
Interfaces
Vantage
Close Fringe Interfaces
Ingress Fringe Interfaces
p i v o t
i n t e r f a c e
c o n t r a - p i v o t
i n t e r f a c e
Ingress Interface
Ingress Fringe Interfaces
Close Fringe Interfaces