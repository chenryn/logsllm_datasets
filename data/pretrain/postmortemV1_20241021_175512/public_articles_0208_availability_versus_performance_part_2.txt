Highly reliable software systems never use shared memory. They are shared-nothing
architecturessothatfaultsarecontainedwithinfaultymodules.
This means that a communication method such as message passing must be used for
intermodule communication. Message passing is far more cumbersome than simply using
memory structures for communication. Thus, it negatively impacts performance and makes the
system slower. However, the reliability of the system is greatly enhanced since software failures
arelessfrequent,thusextendingtheMTBFofthesystem.
ModuleRebooting
The common way to attempt to recover a modern-day server is to reboot it (how many times a
week do you reboot your PC?). Rebooting can take several minutes, during which time the users
aredeniedservice.
An alternative is to design the software so that it is not only modularized (the common paradigm
in today’s software), but so that each module can be individually rebooted without impacting the
rest of the system. Then, if a fault does occur, and if the guilty module can be identified, that
module can be restarted. Done correctly, module restart and recovery can be done in a few
seconds, thus leading to very short recovery times compared to the minutes required to reboot
theentiresystem.
To achieve the fastest restart time, each module should be designed to be “crash/restart.”6 That
is,themodulecanbeshutdowninstantlywithnonoticeandwithnoimmediateimpactontherest
of the system; and it can then be restarted quickly. The attributes for a crash/restart module
include:
LooselyCoupled
Crash/restart modules must be loosely coupled. Not only should modules communicate via
messaging, but each module must be able to survive in the absence of one or more other
6
Candea, G., Cutler, J. Fox, A., Improving Availability with Recursive Microreboots: A Soft-State System Case Study,
PerformanceEvaluationJournal,Vol.56,Nos.1-3;March,2004.
4
©2007SombersAssociates,Inc.,andW.H.Highleyman

modules.Impliedis thata modulewillnotcrashsimplybecauseitdoes notreceivearesponseto
amessagesenttoanothermodule.Rather,itwilltimeout,perhapsreportthefault,andretry.
This attribute implies that there is no implicit sequence in which modules must be brought up
duringsystem rebootsinceeachmodulesurvivesindependentlyofits abilitytocommunicatewith
other modules. It also implies that communications between modules be connectionless since a
module will not be able to establish a connection with another module that is not yet up or which
isbeingrebooted.
As described in the earlier section on shared memory, loose coupling via intermodule
communicationcangreatlyimproveavailabilitywithsomesacrificeinperformance.
Stateless
Each module must be stateless. Any state that it requires must be safely stored in a persistent
store(typically,disk).Inthisway,uponreboot,thereisnotimerequiredtoreestablishitsstate.
Writing state to disk certainly has a negative impact on performance, but availability is improved
because of the reduced recovery time provided by module-level rebooting. In actual fact, state is
written to disk cache. Recovery of state following a system crash is not important since all
modulesstartinaninitialstate.
IdempotentTransactions
All requests and transactions submitted to a module must be idempotent. That is, they must be
able to be repeated without causing an error. For instance, the request to “replace a value with
two” is idempotent. A request to “add two to a value” is not idempotent. Systems that use an
update sequence number can also be constructed so that all updates are idempotent since
duplicaterequestswillbediscarded.
When a module is identified as needing to be rebooted, it may not be known whether or not it
successfully processed the last request. In fact, this request may have been rerouted to another
module during the reboot of the faulty module. If all requests are idempotent, reprocessing the
lastrequesthasnoimpactontheconsistencyofthesystem.
LeasedResources
All resources used by a module should be leased and not permanently held. This includes heap
space, connections, and so forth. The leases should be protected by timeouts or otherwise
releaseduponthefailureofamodule.
For instance, if heap space is not leased and is not reliably released, then over a period of time,
modulerebootswillresultinmemoryleakswhichmighttakedownthesystem.
Leasing resources takes more processing time than simply assigning resources permanently to
modules.Itthereforeimpactsperformancebutprovidesasignificantavailabilityenhancement.
SystemMonitoring
Application monitoring should be provided at the module level. This may be done via heartbeats
or other mechanisms, such as monitoring module response activity or notification from other
modules that are finding a module to be nonresponsive. In this way, a module failure can be
rapidlydetectedandamodulerebootattempted.
5
©2007SombersAssociates,Inc.,andW.H.Highleyman

System monitoring imposes its own load on the system, thus slowing it down somewhat.
However, this is usually more than compensated for by the increased system reliability achieved
bybeingabletocorrectpendingproblemsbeforetheybecomecatastrophic.
RebootingattheModuleLevel
If the above constraints (and perhaps others) are imposed on the modules in a system, the
system can be rebooted at a module granularity. This can reduce recovery time by orders of
magnitudewhilesomewhatreducingperformanceinavarietyofways.
RecursiveRebooting
The concept of module rebooting has been taken to a new level byresearchers at the Recovery-
Oriented Computing (ROC) project, a joint effort between researchers at UC Berkeley and
StanfordUniversityinCalifornia.7
They apply rebooting recursively to a system composed of crash/restart modules. When a fault
occurs, the system determines the most suspicious module, perhaps based on failure reports
from other modules. The system reboots the most suspicious module and any of its children
basedonafault graphcreatedbythesystem through experience.If thatrebootdoesn’t work,the
system will reboot the first module’s parent node and all of its children. If this doesn’t work, the
system continues up the fault graph, rebooting on an ever coarser basis. This process continues
untileitherrecoveryissuccessful,untiltheentiresystemmustberebooted,oruntiltheoperations
staffmustbenotified.
Intheresearchers’ work,asystem module is either a process (in aUNIX environment) or aJVM.
If Java Virtual Machines are used, each rebootable component runs in its own JVM; and it is the
JVMthatisrebooted.
The researchers have shown impressive reductions in system recovery time using recursive
rebooting.
SoftwareRejuvenation
Another important use of module rebooting is software rejuvenation. In many of today’s
applications, software ages. That is, it gets sicker and more fragile as it runs longer and longer.
Why is this? One reason is memory leaks. The longer a module runs, the more memory it may
haveseizedandforgottentorelease.Infact,anypooledresourceissubjecttosuchdegradation.
Software aging is almost always solved by rebooting the system. If the system is built of
rebootable modules, proactive rebooting can be used to eliminate the availability effects of
softwareaging.Basedonexperience or onjudgment, eachmodulecanberebootedaccordingto
anestablishedscheduleinordertorejuvenateit.
The Impact of Software Availability on Multiple Node Architectures
Thesoftwareavailabilitytechniquesdescribedabovegenerallyapplytosinglesystems.However,
multinode architectures such as active/active systems and clusters are made up of single
systemsandbenefitgreatlybyincreasednodeavailability.
7
RecoveryOrientedComputing,AvailabilityDigest;February,2007.
MicrorebootingforFastRecovery,AvailabilityDigest;March,2007.
SeealsothepaperbyCandea,Cutler,andFox,referencedearlier.
6
©2007SombersAssociates,Inc.,andW.H.Highleyman

In such a system, there are two primary reasons for the temporary suspension of services to a
groupofusers:8
 One node has failed, and the users being serviced by that node must be failed over to a
survivingnode.Duringthefailovertime,thoseusersaredown.
 All nodes in the system fail (typically a problem only in two-node systems). During the
timethatittakestoreturnatleastonenodetoservice,allusersaredown.
The probability that a failover occurs is the probability that one node will go down. If a node’s
availabilitycan be increasedfrom three9s to four 9s, user downtimedue tofailover will decrease
byafactoroften.
The probability of failure of a complete two-node system is the square of the probability of failure
of one of its nodes.9 If the availability of the two nodes in the application network can be
increased from three 9s to four 9s, the probability that users will be down due to a dual-node
failureisdecreasedbyafactorof100.
Improving single-node availability has a significant impact on the availability of active/active
systemsandclusters.
Summary
Increased availability does not usually come for free. There are hardware approaches that
increasecost,andtherearesoftwaretechniquesthatreduceperformance.
Becauseof thetremendous improvements insystem performanceover the years as comparedto
the modest improvements in system availability, it is often desirable to trade off some of these
performance gains for improved availability. This is especially true for applications which are
involvedinthe24x7operationsoftoday’senterprises.
The techniques for availability improvement at the expense of performance are substantially
software-based. They improve the availability of a single system. However, improved single-
systemavailabilitytranslatestomuchhigheravailabilityformultinodesystems.
8
Weignoreplanneddowntime,whichcanbeeliminatedbyusingrollingupgradesinamultinodesystem.
9
CalculatingAvailability–RedundantSystems,AvailabilityDigest:October,2006.
7
©2007SombersAssociates,Inc.,andW.H.Highleyman

