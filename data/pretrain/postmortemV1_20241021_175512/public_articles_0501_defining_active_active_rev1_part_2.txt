Thisleadstofourasynchronousactive/activearchitectures:
 AA+:Amorphousdatabasewithcollisionsupport.
 AA-: Amorphousdatabasewithoutcollisionsupport.
 AP-: Partitioneddatabasewithoutcollisionsupport.
 AT-: Transactionreplication.
ThereisnoAP+architecturesincetheintentofpartitioningistoavoidcollisions.
There is no AT+ architecture since with transaction replication (as described above), there is no
way to detect data collisions. Each application processes each transaction to completion and
does not share or receive database information from the other application copies. In fact, one
application copymight commit a transaction and another abort it; and neither will know about the
actionsoftheother.
Inthefollowingdescriptionsofthesearchitectures,theactive/activeattributesoftheapproachare
described followed by the characteristics of the replication engine required to support the
architecture.
ArchitectureAA+:AmorphousDatabasewithCollisionSupport
Architecture
The database is fully distributed and appears amorphous to the application. Any transaction,
update, or read can be applied to any database in the application network and is typically
directed to the closest processing node. Data collisions are anticipated, and they are
detected and resolved by facilities built into the replication engine.6 Should a node fail,
transactionsareautomaticallyroutedtosurvivingnodes.
6 Chapter 4, Active/Active Topologies, Breakingthe Availability Barrier II: Achieving Century Uptimes with Active/Active
Systems,AuthorHouse;2007.
6
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

ReplicationEngine
This architecture requires bidirectional replication.7 All database copies must be open for full
read/write access by the applications. The architecture also requires that full data collision
detectionandresolutionbesupportedbythereplicationengine.
ArchitectureAA-:AmorphousDatabasewithoutCollisionSupport
Architecture
This architecture assumes that the application
update data data update
issuchthatcollisionswillnotoccurorthatthey
base base
read read
may be ignored. Any transaction, update, or copy copy
read can be applied to any database in the replication
application network and is typically directed to
the closest node. Data collisions are not
update data
anticipated, nor are they handled. Should a base
nodefail,transactions areautomaticallyrouted read copy
tosurvivingnodes.
AA+andAA-Architecture
ReplicationEngine
This architecture requires bidirectional replication. All database copies must be open for full
read/write access by the applications. Data collision detection and resolution need not be
supportedbythereplicationengine.
ArchitectureAP-:PartitionedDatabasewithoutCollisionSupport
Architecture
The database is partitioned, and each update partition partition read
partition is owned by one node. Only the read ownera replication copya update
owning node can update its partition, and partition partition
allupdatesforapartitionmustberoutedto read copyb ownerb read
the owning node. The owning node will AP-Architecture
replicate all updates to its partition to the
other nodes. However, all nodes can read all partitions. Data collisions cannot occur.
Provision must be made to detect the failure of a node. Should a node fail, its partition
ownershipmustbetransferredtoanothernode.
ReplicationEngine
This architecture requires unidirectional replication. All database partitions must be open for
read/write access on all nodes to support fast failover. Data collision detection and resolution
arenotrequired.
ArchitectureAT-:TransactionReplicationwithoutCollisionSupport
Architecture
All transactions are sent simultaneously to every node in the application network by each
clientapplication.Eachnodeexecutes thetransactions or updates independentlyof theother
7Bidirectionalreplicationimpliesthatthereplicationenginepreventsping-ponging,orthereturnofareplicateddataitem
toitssource.
7
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

nodes. Updates submitted by different clients may be executed in
different order by the nodes. Therefore, the databases may data data
diverge over time due to data collisions unless the application is base base
copy copy
insensitivetotransactionorder.
ReplicationEngine
The replication engine required by this architecture submits
transaction
transactions simultaneously to all nodes in the application
network. AT-Architecture
Master/SlaveArchitectures
There are other active/active architectures known as “master/slave.” In these systems, one
node is themaster.Itcontrols allupdates andreplicates updates totheslavesystems.There
aretwotypesofmaster/slavearchitectures:
 In one architecture, all nodes – master and slaves – can update their local
databases. Slave updates are replicated to the master node, which resolves all data
collisions. Its updates are replicated back to the slaves, including the originating
slaves, to maintain a consistent database in the application network.8 In this case,
update activity can be balanced across all nodes as transactions can be routed to
any node. These are AA+ systems differentiated by dual replication and by a single
point of collision detection and resolution. The master database can be considered
thedatabaseofrecord.
 Inanotherarchitecture,allupdatesaresentdirectlytothemaster,whichreplicatesits
changes to its slaves. This is an AP- architecture with a single partition. It is often
usedinupdateseldom,readoftenapplicationstodistributereadactivity.
AsynchronousSummary
These levels are summarized in the following table, which shows the support for the desirable
active/activecharacteristics.
Archi- Fast Disaster Data Data Balance Balance Scalable Locality Split-
tecture Failover Tolerance Loss Collision Updates Reads (routetx Brain
Avoided Support anywhere) Avoided
AA+ Y Y N Y Y Y Y Y N
AA- Y Y N N Y Y Y Y N
AP- Y Y N N Y* Y Y* N Y
AT- Y Y Y N N Y N N N**
*onlybyrepartitioningthedatabase.
**AT-isalwaysinsplit-brainmode
Asynchronous Active/ActiveCharacteristics
Thearchitectureshavedifferentcharacteristics:
 AA-,AP-,andAT-cannotbeusedifdatacollisionsareaconcernorcannotbemanaged.
 AA+andAA-allowatransactiontoberoutedtoanynode.
8HP’sOpenCallINSGoesActive/Active,AvailabilityDigest,June2007.
http://www.availabilitydigest.com/private/0206/motorola.pdf
8
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

 AT-requiresthattransactionsberoutedtoallnodes.
 Alllevelssupportreadloadbalancing.
 AA+andAA-supportupdateloadbalancing.
 AP-requiresthatthedatabaseberepartitionedtobalanceupdateload.
 AT-cannotbebalancedforupdateload.
 AA+andAA-databaseswilldivergeifreplicationislost(split-brainmode).
 AP-preventssplit-braindatabasedivergence.
 AT-isalwaysinsplit-brainmode.
In general, an asynchronous replication engine can be categorized by the active/active
architecture that it supports (its level) and its inherent replication latency (exclusive of
communication latency). For instance, a particular replication engine might be a 100 millisecond
AA+asynchronousengine.
Note that active/active architecture AA+ has all of the characteristics of our definition of an ideal
active/active system except for the potential of data loss following a node failure. An AA-
architecturealsomeetsthistestifdatacollisionscannothappenorcanbeignored.
SynchronousActive/ActiveArchitectures
Though general-purpose synchronous replication engines can certainly be built, synchronous
active/active architectures have followed a different path. Using today’s available technology,
most synchronous active/active systems are entire systems available from a system vendor.
OpenVMSsplit-siteclusters,IBMParallelSysplex,andStratusAvanceareexamplesofthese.9
This may change when coordinated-commit synchronous replication engines become available.4
These engines use asynchronous replication to propagate updates and to synchronize
transactionsonlyatcommittime.
RecoveryfromaNodeFailure
Synchronous replication faces a unique problem should a node fail or lose connectivity or should
one node becomes so slow that it slows down all transactions. In this case, the system must
removethatnodefromallfurthertransactionsandmustswitchtoasynchronousreplicationtothat
nodesothattransactionprocessingcancontinue.This leads tosplit-brainmode; andif this is not
acceptable,thedisconnectedormalfunctioningnodemustbeshutdown.
Recoveryfrom a node failure is far more complex in synchronous recoverythan in asynchronous
recovery. During resynchronization, queued changes are replicated asynchronously from the
operating nodes to the node being recovered. When the node is recovered, replication switches
tosynchronousmode.
This leads to a synchronous recovery problem. There are two approaches to the transition from
asynchronousrecoverytosynchronousproduction:
(1) When the recovery change queues are sufficiently short, pause all operations until the
resynchronizationiscomplete.Thenresumeoperationsinsynchronousmode.
9OpenVMSActive/ActiveSplit-SiteClusters,AvailabilityDigest;June2008.
http://www.availabilitydigest.com/public_articles/0306/openvms.pdf
ParallelSysplex–FaultTolerancefromIBM,AvailabilityDigest;April2008.
http://www.availabilitydigest.com/public_articles/0304/ibm_sysplex.pdf
Stratus’AvanceBringsAvailabilitytotheEdge,AvailabilityDigest;February2009.
http://www.availabilitydigest.com/public_articles/0402/avance.pdf
9
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

(2) If there are long transactions (such as batch transactions), pausing the system prior to
switching to synchronous replication may not be feasible. In this case, operations must
continue while the recovering system is receiving both asynchronous and synchronous
replicated transactions. This may cause data collisions between asynchronous changes
andsynchronouschanges.10
CategorizationofSynchronousActive/ActiveSystems
Therefore,thereisaform ofdatacollisionsinsynchronousreplicationduringrecovery.Thisleads
totwocategoriesofsynchronousreplicationengines:
S+: Operations are not paused during recovery. Asynchronous/synchronous data collisions
mustbeavoidedorresolved.
S-: Operations are paused during recovery. There are no asynchronous/synchronous data
collisions.
SynchronousSummary
Eachsynchronous technique varies inhow itmaintains databasecopies in synchronism andhow
it resynchronizes following a node or network fault. However, the result is the same. The
active/active attribute is met in full except for the limits on disaster tolerance. There is no data
loss.Therearenodatacollisions.Failoverisfast,andsystem upgradescanberolledthroughthe
application network one node at a time to eliminate planned downtime. Read and update activity
canbeuniformlydistributedacrossthenodes,andthesystemisscalablebyaddingnodes.
Archi- Fast Disaster Data Data Balance Balance Scalable Locality Split-
tecture Failover Tolerance Loss Collision Updates Reads (routetx Brain
Avoided Support anywhere) Avoided
S+ Y Y Y Y Y Y Y Y N
S- Y Y Y Y Y Y Y Y N
Synchronous active/active architectures generally meet all of the characteristics of our ideal
active/active architecture except for limits on geographical separation. Since a transaction or an
update must be completed on all copies of the database across the application network,
transaction response times are increased. Most vendors of synchronous replication systems limit
their support of geographical dispersion to some specified distance, which may not meet the
disaster-tolerancerequirementsoftheapplication.
Therefore, a convenient means of classification of synchronous replication systems is simply to
state the distance limitation. For instance, a system may be a 20-kilometer S+ synchronous
replicationsystem.
Summary
This categorization of active/active technologies is still a work-in-progress. To those looking to
implement active/active systems, a categorization that achieves substantial consensus is
importanttobeableto weedoutvendor offerings (or in-houseimplementationstrategies) that will
notmeettheapplication’sneeds.
Please contribute to this important subject by sharing your comments with us on our LinkedIn
ContinuousAvailabilityForumat
10 B. Highleyman, J. Hoffmann, P. Holenstein, Recovering from Synchronous Replication Failures, The Connection;
September/October2009.
10
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

http://www.linkedin.com/groupsDirectory?results=&sik=1260921605283&pplSearchOrigin=GLHD
&keywords=continuous+availability+forum.
If this link doesn’t work for you, search on Continuous Availability Forum under “Groups” in
LinkedIn.
11
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com
