HP’s NonStop Synchronous Gateway
June2009
HP has recently announced the release of its NonStop Synchronous Gateway (SG). The SG
allows third-party synchronous-replication engines to participate in transactions coordinated by
theNonStopTransactionManagementFacility(TMF).
Data replication is used to keep distributed databases in an active/active network1 synchronized.
There are two fundamental types of data replication – asynchronous replication and synchronous
replication.
Synchronous replication2 solves the asynchronous-replication problems of data loss following a
node failure and of data collisions.3 However, it brings with it its own problem - application
latency. The application must wait for each operation to complete over the application network
and for the updates to be committed to all copies of the database, thus delaying transaction
completion. Since a big factor in these delays is communication channel latency, application
latency limits the distance by which nodes in an active/active system can be separated, thus
imposinglimitsonthedegreeofdisastertolerancethatcanbeachieved.Typicalseparationlimits
areintheorderoftensofkilometersoverfibrechannel.4
An alternative solution is to use a coordinated-commit replication engine - a combination of
asynchronous- and synchronous-replication technologies - to eliminate the problems of data loss
anddatacollisionsandtomitigatetheeffectsofapplicationlatency.
Inthisarticle,wereviewSGanditsapplicationtocoordinatedcommits.
The Two-Phase Transaction-Commit Protocol
Before we delve into SG, let us review the two-phase commit protocol (2PC) used bytransaction
managers suchas TMF toensuretheACID properties5of transactions. 2PC is definedbytheXA
specificationoftheX/OpenGroupforDistributedTransactionProcessing(DTP).6
1WhatisActive/Active?,AvailabilityDigest;October2006.
2Chapter4,SynchronousReplication,BreakingtheAvailabilityBarrier,AuthorHouse;2004.
SynchronousReplication,AvailabilityDigest;December,2006.
SynchronousReplication:Pros,Cons,andMyths,TheConnection;November/December,2008.
3AsynchronousReplicationEngines,AvailabilityDigest;November2006.
4Throughtheuseofaremotemirror,ZLT(ZeroLostTransactions)allowsNonStopnodestobeseparatedbyarbitrary
distances without loss of transactional data due to a node loss when using RDF to asynchronously replicate data.
However,theremotemirrorseparationislimitedtoafewkilometers,limitingthedegreeofdisastertolerancethatcanbe
provided.Furthermore,theRDF/ZLTsolutiondoesnotsupportactive,asthetargetdatabasecannotbeopenedforwrites.
5TheACIDpropertiesofatransactionareatomicity,consistency,independence,anddurability.SeeJ.Gray,A.Reuter,
TransactionProcessing:ConceptsandTechniques,pp.6-7,MorganKaufmannPublishers;1993.
6DistributedTransactionProcessing:TheXASpecification,TheOpenGroup;1991.
1
©2009SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

AsshowninFigure1,theX/OpenDTPmodelcomprisesfivecomponents:
 applicationprograms.
 aTransactionManager(TM). (2)
application
 resources such as disks, queue RM
managers,orapplications.
 Resource Managers (RMs) that hide the
(4)
attributesofresources. (1)
 atransactionlog(TxLog).
Applications use resources such as databases or Tx (3) Transaction resources
Log Manager
queues. Each resource is managed by a
Resource Manager (RM). The RMs hide the
details of their resources from the applications TheX/OpenDistributedTransaction
and from the Transaction Manager (TM) by ProcessingModel
Figure1
providing a common interface used by the other
components.
When an application begins a transaction (1), the TM assigns the transaction an ID and monitors
its progress,takingresponsibilityfor its success or failure. Allchanges to aresourcesuchas toa
database (2) are typically logged in a transaction log by the TM (3). The transaction log provides
the change information necessary should a transaction abort and need to be backed out or
shouldasystemfailanditsdatabaserequirereconstruction.
The TM has a particularly important responsibility at commit time. When the application directs
the TM to commit a transaction (1), the TM first queries each RM to ensure that it is prepared to
committhetransaction(4).This is Phase1of thetwo-phasecommitprotocol,the preparephase.
An RM will respond positivelyto the prepare query (that is, it votes “yes” for the commit) only if it
has safe-stored or has tentatively applied the change data for the transaction to the target
database, thereby assuring that the RM can ultimately make all of the transaction’s changes to
thedatabase.
If allRMs replythattheycancommitthetransaction,theTMissues acommitdirectiveto allRMs
(4). This is Phase 2 of the 2PC, the commit phase. When an RM receives a commit directive, it
commitsthechangestothedatabase.
Alternatively, if any RM votes “no” because it cannot make the transaction’s changes, the TM
issues an abort directive to all RMs. Each RM either makes no changes, or it rolls back the
transaction’s changes if it has already tentatively applied them to the database. The transaction
hasnoeffectonthedatabase.
Volatile-Resource Managers
Normally,aresourcemanagernotonlyparticipatesinthe2PCprotocol,butitalsoengagesinthe
TM’s recovery process. The recovery process is used to recover the resource (such as a
database) following a failure that may have left the resource in a corrupted or inconsistent state.
However, there is a class of resource managers called volatile-resource managers (VRMs) that
participate in the 2PC protocol but not in the recovery process. A VRM manages a volatile
resource that is assumed to be nondurable and therefore does not benefit from recovery. In SG,
foreignresourcemanagersaretreatedasVRMs.Ifthey,infact,aredurable,theyareresponsible
fortheirownrecovery.
2
©2009SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

A third-party application like a synchronous-replication engine that participates in TMF
transactions is treated as a VRM. TMF enforces this so that third-party applications cannot
preventTMFfromrestartingfollowingafailurebecauseitcannotrecoveritsdatabase.
The HP Synchronous Gateway
InteractingwithTMF
Though HP NonStop systems follow the X/Open DTP model, they are not XA-compliant.
Specifically, they do not use the XA API; and they do not support heterogeneous databases.
Historically, their TM, known as the Transaction Management Facility, or TMF, supported only
Enscribe and NonStop SQL RMs. Other Resource Managers could not participate in a TMF
transaction.
HP has recently announced its NonStop Synchronous Gateway (SG) (code-named “Open TMF”
or OTMF during development). SG provides the facilities for a foreign resource not classically
supported by TMF to participate in TMF transactions via a Volatile Resource Manager (VRM).
Though under the X/Open DTP model, Resource Managers are external to the TM, HP has
implementedSGsothattheVRMstatemachineisapartofTMF.SGrequiresagatewayprocess
that is an interfacetotheforeignresource.Thegatewayprocess communicates withTMF viathe
VRMsuppliedbyTMF.
SG is a library that provides
anAPIforusebyagateway
to communicate with TMF.
As shown in Figure 2, the
library uses a Resource
Manager pseudo-file (RM
file) to identify the gateway
and to exchange TMF
signals (messages) between the gatewayand the VRM via libraryAPI calls and several standard
Guardianprocedures. A gatewayprocess mayhave multipleRMfiles open– this canbe useful if
the gateway must manage more simultaneous transactions than a single VRM can process.
However,anRMfilecanbeopenedbyonlyonegateway.
Communication between a VRM and a gateway is via TMF signals (messages) that indicate
requests,responses,andstatechanges.AgatewaywritestotheRMfiletodeliversignalstoTMF
viatheVRM,anditpostsareadontheRMfiletoreceivesignalsfromTMF.
There is at least one RM file associated with each gateway. Before a gateway can communicate
with TMF, it must open an RM file. RM files are opened with a sync depth of 1 so that gateway
readsfromthefilecanbewaitedornowaited.
Signals
TMFsignalsareusedbyTMFtocommunicatewithallResourceManagers.Theyinclude,among
others:
 TMF_SIGNAL_EXPORT_DONE: A nowaited request to the VRM from the gateway
tojoinatransactionhascompleted.
 TMF_SIGNAL_REQUEST_PREPARE: The VRM is requesting the gateway to vote
ontheoutcomeofthetransaction.
3
©2009SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

 TMF_SIGNAL_READ_ONLY: The gateway indicates to the VRM that the gateway
hadnoworktodoandisleavingthetransaction.
 TMF_SIGNAL_READY: The gateway is indicating to the VRM that the gateway’s
transactionispreparedtocommit.
 TMF_SIGNAL_REQUEST_COMMIT: The VRM is indicating to the gateway that the
transactionhasbeencommitted.
 TMF_SIGNAL_REQUEST_ROLLBACK: Either the VRM or the gatewayis indicating
that the transaction should be aborted. The signal also carries the reasons for the
abort.
 TMF_SIGNAL_FORGET: The gateway is informing the VRM that the gateway has
completedprocessingthetransaction.
AbortreasonssignaledbyTMF_SIGNAL_REQUEST_ROLLBACKinclude:
 communicationfailure
 deadlock
 integrityviolation
 protocolerror
 timeout
 transient
 unspecified
TMF also generates signals to notifythe VRMs about significant TMF state changes. The signals
are:
 TMF_SIGNAL_TMF_ENABLED: TMF is started, and BEGINTRANSACTION is
enabled.
 TMF_SIGNAL_TMF_DISABLED: BEGINTRANSACTIONhasbeendisabled.
 TMF_SIGNAL_TMF_DOWN: TMFhascrashedorhasshutdown.
API
TheTMFAPIissimple.Itcontainsonlysixcalls.
 OTMF_VOL_RM_OPEN: Opens a VRM file. A VRM file must be open before the
gateway process can communicate with the VRM. As soon as the file is opened, the
gateway is informed as to whether TMF is enabled, disabled, or down. The file can
beclosedviaastandardfileclosecall.
 OTMF_EXPORT: Allowsthegatewaytoparticipateinatransaction.
 OTMF_EXPORT_ASYNC: Allows the gateway to make a no-waited request to the
VRM to participate in a transaction. The request’s completion is indicated by the
receiptofaTMF_SIGNAL_EXPORT_DONEsignal.
 OTMF_WRITE_SIGNAL: Used by the gateway to send a signal to the VRM via the
RMfile.
4
©2009SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

 OTMF_WAIT_SIGNAL: Waits for a signal from a VRM following a READX on the
RMfile.
 OTMF_INTERPRET_SIGNAL: Interprets a signal returned in a call to AWAITIOX
instead of a call to OTMF_WAIT_SIGNAL. Instead of calling OTMF_WAIT_SIGNAL
and blocking waiting for the signal, the gatewaycan call AWAITIOX instead, allowing
other I/O completions to be processed as they complete. OTMF_INTERPRET_
SIGNAListhencalledtoparsethedatasentbytheVRM.
SGStateTransitions
A state diagram for SG is shown in Figure 3, which shows state transitions from the viewpoint of
the VRM and the gateway. In this figure, “send” means sending a signal to TMF via
OTMF_WRITE_SIGNAL, and “receive” means receiving a signal from TMF via a nowaited
READX/AWAITIOX/OTMF_INTERPRET_SIGNAL sequence or a waited READX/OTMF_WAIT_
SIGNALsequence.
When the gateway wants to join a transaction, it does so via the OTMF_EXPORT API call.
Among other parameters, it provides the ID of the transaction that it wishes to join. The EXPORT
call can either be waited or nowaited. OTMF_EXPORT is the waited call. If a nowaited call is
desired, OTMF_EXPORT_ASYNC is called for a nowaited export. When the export has
completed, the gateway will be notified by a TMF_SIGNAL_EXPORT_DONE signal. At the
