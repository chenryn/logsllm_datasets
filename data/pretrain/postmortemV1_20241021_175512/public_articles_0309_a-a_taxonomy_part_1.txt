Active/Active Systems – A Taxonomy
September2008
Defining an Active/Active System
Inourpublications,wehavedefinedactive/activesystemsintermsoftheirarchitecture:
Active/Active Architectural Rule: An active/active system is a network of independent
processing nodes, each having access to a common replicated database. All nodes can
cooperateinacommonapplication,anduserscanbeservicedbymultiplenodes.
As we have seen in the Digest’s articles and many product reviews, several ways exist to
architect active/active systems. But focusing on their architecture obfuscates what active/active
systems really are about, and that is the benefits they provide. An alternative definition of an
active/activesystemisthereforealistoftheattributesrequiredofsuchsystems.
Takingthisfocus,wesubmitthatanactive/activesystemhasthefollowingfourattributes:
 Availability: An active/active system has a mean time between failure (mtbf) measured
in centuries. In practical terms, this means an availability of at least six 9s - an average of 30
seconds per year of downtime.Given an averagerepair timeof onehour,six 9s translates to
an mtbf of 120 years. Six 9s also implies that there is no planned downtime required for
maintenanceandupgradeactivities.
 Survivability: An active/active system can withstand a disaster that takes down a
processing node. Survivability implies that redundant nodes be far enough apart so that the
probabilityoflosingtwonodestoacommondisasterisextremelyunlikely.
 Scalability: An active/active system is easily scalable by simply adding additional
computing resources. These resources can be put into service without affecting ongoing
operations.
 Consistency: Two identical operations issued simultaneously anywhere in the
applicationnetworkwillprovidethesameresult.
Like the ACID properties of transactions, we will call the above attributes the ASSC properties of
active/activesystems.
We submit that any system architecture having these four properties qualifies to be called an
active/activesystem:
Active/Active Attribute Rule: An active/active system must be available, survivable,
scalable, and consistent. It is available if it has an mtbf measured in centuries. It is
1
©2008SombersAssociates,Inc.,andW.H.Highleyman

survivableifitcanwithstandanentireprocessing-nodeoutage.Itis scalableifcomputing
resources can be added or deleted with no impact on ongoing operations. It is consistent
ifitalwaysbehavesthesame.
It is possible to build active/active systems in many ways. However, the systems which we have
studied all fall within a particular class of virtualized architectures. These architectures are
describedbythefollowingActive/ActiveVirtualizationRule,whichisadependentextensionofthe
Active/Active Architectural Rule stated above. The Active/Active Virtualization Rule will form the
basisofourtaxonomy:
Active/Active Virtualized Rule: An active/active system is a collection of redundant,
geographically-distributed, context-free compute resources with no single point of failure.
Each redundant compute resource is a virtualized pool of computing elements that
appears externally as a single resource. Within a virtualized pool, computing elements
canbeaddedorremovedtransparentlytotheusers.1
noitazilautriv noitazilautriv noitazilautriv
reyal reyal reyal
clients compute compute comphuhte
resource1 resource2 resource3
AnActive/ActiveSystem
This definition is consistent with our earlier definition given above, but represents a specific
architecture that satisfies both the Active/Active Architectural Rule and the Active/Active Attribute
Rule.ThereareseveralpointstonoteabouttheActive/ActiveArchitectureRule:
 Redundant compute resources: Each compute resource must be redundant. Should one
compute resource fail, there must be another that can take over its operation. The time
required to fail over to an alternate compute resource must be such as to meet the
availabilityrequirement.
 Virtualized pool: One way to achieve rapid failover is for each redundant compute
resource to be a pool of compute resources all actively participating in the application.
The pool of compute resources is accessed via a virtualization layer that provides a
single compute-resource view of the compute-resource pool. Via the virtualization layer,
any request or transaction that was being processed by a failed or removed compute
resource is resubmitted to a surviving compute resource. Thus, failover time becomes
resubmissiontime.
 Context-free:Inorderforarequesttobehandledbyanyoneofthecomputeresourcesin
a compute-resource pool, the compute resources must not have to store context from
previous requests. Request context, if any, must be contained within each request
message;or itmustbe stored in acommondatabase accessible byeach of thecompute
resourcesinthepool.
 No single point of failure: Since virtualized compute-resource pools inherently have no
single point of failure, this requirement generally applies to the virtualization layer.
1Theterm“virtualization”hasmultipleuses.Forone,itisthelogicalrepresentationofanunderlyingstructure,suchasin
storagevirtualization.Foranother,itisprovidingmultiplepersonalitiestoanunderlyingstructure,suchasmultiplevirtual
machinesonaphysicalserver.Weusethefirstmeaningofvirtualizationinthisarticle.
2
©2008SombersAssociates,Inc.,andW.H.Highleyman

Incoming requests must be routed to a compute resource via redundant means, such as
redundantLANs,redundantrouters,orredundantnetworks.
The Active/Active Attribute Rule is a necessary and sufficient rule. It is necessary that the
attributes of availability, survivability, scalability, and consistency must be met if the system is to
be considered an active/active system. If these attributes are met, then that is sufficient for a
systemtobeanactive/activesystem.
The Active/Active Virtualization Rule is a sufficient rule. If a system is implemented according to
this architecture, then the system can be considered an active/active system. However, it is not
necessary that the system be implemented according to the Active/Active Virtualization Rule. It
maybe that other implementations will also satisfythe Active/Active Attribute Rule. For purposes
ofourtaxonomy,wewillusetheActive/ActiveVirtualizationRule.
Context versus State
Wehavenotedthatcomputeresourcesshouldbecontext-free.Theyneednothaveknowledgeof
previousresultsforagiventransaction.
However, this does not eliminate the requirement that a compute resource may have to
remember global application state. The current state of the application may have to be available
tomembersofoneormorecompute-resourcepools.
The recording and dissemination of application state is typically the responsibility of a special
class of compute-resource pool, the database pool. The database pool is stateful in that it
remembers the state of the application. Typically, the other virtualized pools are stateless since
they remember no application state. Rather, they obtain application state when needed from the
databasepool.
Though the compute-resources in a database pool are stateful, they must nevertheless comply
with the context-free requirement. That is, a database request can be routed to any member of
thedatabasepoolforexecution.Nomatterwhichmemberreceivestherequest, itsactionsonthe
databasemustbethesameasanyothermemberthatmighthavereceivedthatrequest.
This means that the contents of each database held by a database pool member must be
identical to the databases held by the other members of that pool. The synchronization of these
database copies is one of the challenges of active/active systems, for which there are several
solutions,asweshallseeinthetaxonomy.
The Three-Tier Active/Active Architecture
For purposes of an active/active taxonomy, we view an active/active system as comprising three
tiers–anapplicationtier,adatabase-servertier,andastoragetier.2
 Theapplicationtierprovidesalloftheapplication-specificfunctionsofthesystem.
 The database-server tier manages the database that contains the application state. This
maybearelationaldatabaseorafilesystem.
 The storage tier comprises the data storage for the application state. This tier consists
typically of direct-attached storage (DAS), network-attached storage (NAS), or storage
areanetworks(SAN).
2 This is at variance with the usual definition of a three-tier architecture, which comprises a presentation tier, an
applicationtier,andadatabasetier.Wefoldthepresentationtierintotheapplicationtierandseparatethedatabasetier
intotwotiers–thedatabaseserverandthestoragedevices.
3
©2008SombersAssociates,Inc.,andW.H.Highleyman

(optional) (optional)
noitazilautriv noitazilautriv noitazilautriv
clients application database- data- reyal reyal reyal
servertier storage
tier(A)
(D) tier(S)
Active/ActiveThree-TierArchitecture
One or more of these tiers can be virtualized to insulate them from the other tiers. However, the
application tier is always virtualized. The application-virtualization layer ensures that a client
requestcanberoutedtoanyapplicationserver.
Virtualization techniques for the application layer can be implemented in many ways. For
instance, the client may be intelligent enough to detect a failure and resubmit its request to
anotherapplicationserver.Alternatively,intelligentroutersmayredirectrequests.Inanyevent,as
notedabove,thisvirtualizationlayermustberedundantsoastobefault-tolerant.
The application-tier virtualization layer may also perform other functions, such as load balancing
orthepartitioningofrequestsamongtheapplicationserversaccordingtodatacontent.
An Active/Active Architectural Taxonomy
The above definition of the active/active architecture results in four configurations. Let us
designatethesefourconfigurationsbyidentifyingeachtierbyaletter:
 Aistheapplicationtier.
 Disthedatabase-servertier.
 Sisthestoragetier.
Wedesignateeachconfigurationbylistingthelettersofthetiersthatarevirtualized:
 Configuration A: Only the application tier is virtualized. Each compute element in the
pool is a complete server comprising the application logic, a database server, and a
privatedatabase.Aclientrequestcanbepassedtoanycomputeelementinthepool.
noitazilautriv
reyal
clients
database-
application data-
servertier
tier(A) storage
(D)
tier(S)
 Configuration AD: In addition to the application tier, the database-server tier is
virtualized. Any data request can be passed from the application tier to any database
server,whichwillexecuteitagainstitsprivatecopyoftheapplicationdatabase.
4
©2008SombersAssociates,Inc.,andW.H.Highleyman

noitazilautriv noitazilautriv
reyal reyal
clients
database-
application data-
servertier
tier(A) storage
(D)
tier(S)
Active/ActiveADArchitecture
 ConfigurationAS:Inadditiontotheapplicationtier,thedata-storagetier is virtualized.A
client request is sent to an application server that has its own database server. The
databaseserver canexecuteits databaserequests on anyof the virtualizeddata-storage
computeelements.
noitazilautriv noitazilautriv
reyal reyal
clients
database-
application data-
servertier
tier(A) storage
(D)
tier(S)
Active/ActiveASArchitecture
 Configuration ADS: All tiers are virtualized. Any request can be sent to any application
compute element. An application compute element can send a database request to any
database server. A database server can request reads and updates from any data-
storagecomputeelement.
noitazilautriv noitazilautriv noitazilautriv
reyal reyal reyal
clients
database-
application data-
servertier
tier(A) storage
(D)
tier(S)
Active/ActiveADSArchitecture
An Active/Active Database Synchronization Taxonomy
The architectural taxonomy suggested above does not consider how the databases are
synchronized. The only way that the data-storage tier can be virtualized is if all of the data
storagedevicesaremaintainedinthesamestate.
Inusetodayaretwoprimarytechniquesforachievingdatabasesynchronization.Theyinclude:
5
©2008SombersAssociates,Inc.,andW.H.Highleyman

 Asynchronous Replication (A): As changes aremadetoa data-storage element,those
changes are replicated in the background asynchronously to the other data-storage
elements,independentlyoftheapplication.3
 SynchronousReplication (S): A change to thedatabaseis executedsimultaneouslyon
all data-storage elements. Either the change is applied successfully to all data-storage
elements,oritisnotappliedtoanydata-storageelement.4
Eachofthesetechniquescanreplicateeitherindividualoperationsortransactions:
 Operation Replication (O): The replication scope is a single change command (insert,
update, delete). Several rows or fields may be affected by a single operation - for
instance,asingleSQLstatement.
 Transaction Replication (T): The replication scope is all of the change operations
containedwithinthescopeofasingletransaction.
Thus,therearefourreplicationtechniquesinthetaxonomy:
 A/O:Asynchronousoperationreplication.
 A/T:Asynchronoustransactionreplication.
 S/O:Synchronousoperationreplication.
 S/T:Synchronoustransactionreplication.
Interestingly, none of these replication techniques are totally compliant with the Active/Active
Attribute Rule. They each suffer some deficiency that must be taken into account when an
active/activearchitectureischosen.
 Except for the AD architecture, consistency is not guaranteed by any of the replication
techniques. That is, there can be race conditions between reads and replicated updates
so that, at any given instant in time, a read processed by one data-storage element may
give a different result than a simultaneous equivalent read processed by another data-
storageelement.Whetherareadretrieves datajustbeforeachangeismadeor justafter
a change is made depends upon the temporal relation of the read and change
operations.
This problem is aggravated by asynchronous replication because there can be a
significant delay between the time that an update is applied to a source data-storage
elementandthetimethatitisappliedtothetargetdata-storageelements.
The AD architecture can provide consistency because the virtualized database server
behavesasasingledatabaseserverandcanproperlyorderalldatabaseoperations.
The lack of consistency does not seem to be a practical problem in practice today
