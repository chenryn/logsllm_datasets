HP’s Reliable Transaction Router
May2010
HP’s Reliable Transaction Router (RTR) provides reliable transaction-messaging services
between multivendor clients and servers. The clients and servers in an RTR application network
can be any mix of HP’s OpenVMS, HP-UX, Linux, and Windows servers. Therefore, RTR allows
heterogeneous systems to be consolidated into a single, highly-redundant, reliable, and scalable
applicationnetwork.
Transactionintegrityis provided viathetwo-phasecommitprotocol.Recoveryfrom anodefailure
is immediate and transparent to the users. In-flight transactions are preserved; and no data is
lost,allowingRPOs(RecoveryPointObjectives)ofzerotobemet.
Planned downtime can be eliminated by rolling upgrades through the network. The network can
bescaledbyaddingnodeswithnoapplicationchanges.
Toalargeextent,RTRisbasedonthesametechnologyasthatofHP’sOpenVMSactive/active
split-siteclusters.1
The RTR Architecture
RTR is based on a three-tier software model. The three tiers are the client applications, the RTR
router, and server applications. RTR distinguishes between hardware and software components
in its terminology, which we will use in this article. Clients are applications that run on physical
frontend nodes. Servers are applications that run on backend nodes. Routers are software
servicemodulesthatrunonrouternodes.
Theremaybeanynumber of eachkind of nodein an RTR network.Inaddition, a nodemayhost
anyofthesoftwaretiers.Forinstance,aroutercanbehostedonafrontendnode,onadedicated
router node, or on a backend node. A single node can host the entire RTR network for
development purposes, though this is not a recommended production configuration for reliability
reasons.
Nodes are interconnected via TCP/IP links and may be geographically distributed for disaster
tolerance.
1ThereaderisreferredtotheJune,2008,AvailabilityDigestarticleOpenVMSActive/ActiveSplit-SiteClusters,whichcan
befoundathttp://www.availabilitydigest.com/public_articles/0306/openvms.pdf,foradescriptionoftheclusterdistributed
lockmanageranddiskshadowsetsthatareusedbyRTR.
1
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

London
London
Paris
Berlin Berlin
clients routers servers
frontendnodes routernodes backendnodes
RTRThreeTierArchitecture
Clients andservers areprovided withanAPI(C,C++, or Java) thattheycanusetocommunicate
witharouter.Typically,aclient willsendatransactionmessagetoarouter.Basedonthecontent
of the message, the router will send the transaction’s updates to one or more servers as
appropriate under the two-phase commit protocol. Only if all involved servers vote to accept the
transactionisthetransactioncommitted.Otherwise,itisaborted.
Facilities
Many applications can use an RTR network
simultaneously. To keep applications
separate, RTR defines a facility for each
application. The facility includes the clients, facility1
(application1)
routers, and servers currently being used by
the application. In effect, a facility is an
application network running in the RTR
network environment. It encompasses
software components – clients, routers, and
servers, not hardware components – frontend facility2
(application2)
nodes,routernodes,backendnodes.
Facilities become important, for instance, in
the scope of the callout server, described frontend router backend
later. RTRFacilities
RTR Clients
Client applications run on frontend nodes. Frontend nodes may be Windows, Linux x86_32 or
x86_64, HP-UX, or HP OpenVMS systems. Clients typically provide presentation services to the
usersandmayincludesomebusinesslogic.
2
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Clients are given an API for use in communicating with the routers. A client normally connects to
one router instance for the duration of a session. However, if a client’s router fails, RTR
automatically fails over the client to a surviving router that may also be currently serving other
clients.Failoveristransparenttotheclient;in-flighttransactionsarereplayedbythenewrouter.
RTR Routers
The routers are the heart of RTR. They accept transactions from their clients and route the
transactions to one or more servers as appropriate. Routing of transaction updates are based on
transaction-message content. For instance, consider a banking application in which savings
accountsaremanagedbyoneserver andcheckingaccountsaremanagedbyanother.Ifarouter
receivesatransactionmessageinstructingthatanamountbemovedfrom asavingsaccounttoa
checking account, the router will route the debit amount to the savings account server and the
creditamounttothecheckingaccountserver.
Transactionsareexecutedaccordingtothetwo-phasecommitprotocol.Allinvolvedserversmust
vote to commit the transaction, or else the transaction is aborted. RTR guarantees the ACID
propertiesofatransaction–atomicity,consistency,isolation,anddurability.2
Routers may run on any node – frontend nodes, router nodes, or backup nodes. However,
multiple routers are typically deployed on multiple router nodes to provide independence,
scalability and redundancy. Routing nodes may run on OpenVMS, HP-UX, Linux x86_64,
WindowsServer2003,WindowsXPServicePack2,Windows2008R2,orWindows7nodes.
Routingnodes can beeasilyadded ifmorecapacityis needed. Shouldarouter fail,its clients are
seamlessly reconnected to a surviving router if there is one. The routers hide the network from
the clients – the clients are unaware that they are dealing with a distributed application network
supportingmultipleservers.
Arouterinvolvesnoapplicationsoftwareunlessitisrunningcalloutservers,describedlater.
RTR Servers
ServersinanRTRnetworkmanagetheapplicationdatabases.Theymayalsoincludesomeorall
of the business logic. Servers run on backend nodes comprising OpenVMS, HP-UX, Linux
x86_64, Windows Server 2003, Windows XP Service Pack 2, Windows 2008 R2, or Windows 7.
Each server can be managing the database of its choice, such as Oracle, Microsoft SQL Server,
Sybase, Informix, or Microsoft Access. Any number of servers of any mix may be included in an
RTRnetwork.
RTR provides an API for servers to communicate with their routers. Servers are voting
participants in the transactional two-phase commit protocol. They can vote to commit or abort a
transactioninwhichtheyareinvolved.Ifanyservervotestoabortthetransaction,thetransaction
isabortedandhasnoeffectonthedatabases.
Servers canbeconfigured inseveral ways for reliabilityandscalability.Inadditiontoactinginthe
primary role, servers can be configured as primary/standby pairs, shadow sets, or concurrent
servers.Inaddition,calloutserverscanbeemployedtoprovidetransactionauthentication.
2 Jim Gray, Andreas Reuter, pg. 6, Transaction Processing: Concepts and Techniques, Morgan Kaufmann Publishers,
Inc.;1993.
3
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

PrimaryServer
The fundamental configuration for a server is as the primaryserver for an application. If there is
only a primary server configured for a database, there is no possibility of failover should the
serverfail.Anytransactionsinwhichitwouldhavebeenaparticipantwillabort.
clients
data
base
router
server
PrimaryServer
StandbyServer
A standby server may be configured to back up the primary server. This is typically done via a
standard cluster configuration. Should the primary server fail, the router will direct further
transactiontothebackupserver.
Both servers must have a connection to the
database. In standard clusters such as
Microsoft’s Windows Server Failover
Cluster (WSFC)3 – formerly known as the
Microsoft Cluster Server (MSCS) – or HP’s
ServiceGuard cluster,4 only the primary primary
server can have a set of application clients server data
partitions mounted. The standby server can base
be handling application processing for
different partitions, or it can be running router
otherapplications.
The primary and standby servers in
standby
standard clusters must be collocated in the
server
same facility. In these clusters, failover
requires applications to be started in the Primary/StandbyServerPair
standby server, disk volumes to be
mounted by the standby applications, and the database checked for corruption. Failover is
typically measured in minutes. During this time, the application is paused; and transactions will
time out. In-flight transactions are not protected and must be resubmitted to the standby server
whenitcomesonline.
OpenVMS clusters, on the other hand, provide distributed lock and cache management.
Therefore, if the servers are running on OpenVMS nodes, both the primary and standby servers
can have the database open for reads and writes (see footnote 1) and can actively share in the
transaction load. This leads to instantaneous failover times transparent to the users. In-flight
transactions are protected. In addition, the primary and standby servers can be located in
differentdatacenters,thoughdegradedperformanceof astandbynodeusing aremotedatabase
mustbeconsidered.
3WindowsServerFailoverClustering,AvailabilityDigest;April2010.
http://www.availabilitydigest.com/public_articles/0504/microsoft_cluster.pdf
4HP’sServiceGuardClusteringFacility,AvailabilityDigest;May2007.
http://www.availabilitydigest.com/public_articles/0205/serviceguard.pdf
4
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

There can be many instances of a standby server. RTR will cascade failover to other standby
servers should therebea standby-server failure.Furthermore,aprimaryserver canalso actas a
standbyserverforotherprimarynodes.
In an active/standby configuration, there is only one copy of the database. Therefore, the
databaseshoulduse aredundanttechnologysuch as RAIDso thatno single disk failure will take
down the system. The primary/standby configuration will survive any single node failure but will
not survive a site failure. Even if an OpenVMS cluster with geographically-distributed nodes is
used, a failure of the site containing the database will take out the application. To get protection
againstsitefailures,shadowservers,describednext,shouldbeused.
ShadowServer
The application database can be shadowed at the server level with shadow servers. In this
configuration, a remote standby shadow server is provided and has its own copy of the
application database. The router submits transactions to both the active shadow and the standby
shadow, which independently process them. Using the facilities provided by OpenVMS clusters,
RTR ensures that both database copies are kept in synchronism. This method is called
transactionshadowing.
Furthermore,theactiveandstandbyserverscaneachbeconfiguredascollocatedactive/standby
pairsasdescribedearlier.
Should there be a node failure, database failure, or even an entire site failure, the RTR network
and all of its applications survive since the
other site continues processing. Failover is
transparent to the users since in-flight
data
transactionsareprotected. base
There can only be two members in a shadow OpenVMS
