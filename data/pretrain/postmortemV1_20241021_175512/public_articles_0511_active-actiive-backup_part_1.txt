Does Data Replication Eliminate Backups?
November2010
Data replication has become the standard way to keep the database of a standby system
synchronized with its production system. In such an architecture, there are two copies of the
database–oneattheproductionsystemandoneatthegeographicallyremotestandbysystem.
Because there are nowtwo independent copies of the database, is there no need to back up the
database to magnetic tape or virtual tape, especially since the backup copy is only seconds or
minutesold,nothoursordays?
The fact is, a company would be foolish not to perform periodic backups. Data replication does
notprotectdata.Itprotectssystemoperations.Itisbackupthatprotectsdata.
A Review of Data-Replication Methods
LogicalDataReplication
There are many techniques for data replication. Logical data replication typically replicates
changes within the scope of a transaction. Therefore, the target database at the standby system
is usually guaranteed to be consistent and can be used for query and reporting. Should the
standby system need to take over following a source-node failure, all that needs to be done is to
rollbackincompletedtransactions.
BlockReplication
MostSANssupportblock-levelreplication,in whichdiskblocksarereplicatedfromtheproduction
SAN. However, since the consistency of the database at the production system depends upon
the contents of cache, and since cache is typically not replicated between SANs, the standby
SAN is effectivelyin a corrupted state and must be cleansed before the standbysystem can take
over(similartorunningchkdskinaWindowsenvironment).
Asynchronous/SynchronousReplication
Both logical replication and block replication can be either synchronous or asynchronous. With
synchronous replication,1 no data is lost following a source-node failure since no change can be
madetoadataobjectunlessthatchangecanalsobemadetoallofthedataobjectcopiesacross
the application network (though synchronous block replication may lose data that is still in the
productionSAN’scache).
1SynchronousReplication,AvailabilityDigest;December2006.
http://www.availabilitydigest.com/private/0103/synchronous_replication.pdf.
1
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Some data may be lost with asynchronous replication2 since data is replicated only after it has
been applied to the source database – data still in the replication pipeline may be lost. Real-time
asynchronous replication engines can limit this loss to fractions of a second because they
replicate changes in real time as soon as they happen. Some asynchronous replication engines
arescheduledandmayloseminutesofdatafollowingaproduction-nodefailure.
Active/ActiveSystems
The ultimate in replicated databases are active/active systems.3 In these systems, multiple
processing nodes are all cooperating in a common application. Their local copies of the
application database are kept synchronized via bidirectional replication. Whenever a change is
made to one database, that change is immediately replicated to all of the other database copies
in the application network so that all processing nodes have the same view of the application
state.
A Review of Database Backup Methods
MagneticTape
Classically, databases have been periodically backed up to magnetic tape. This provides a level
of data protection should the production system fail. A cold standby system can be brought into
servicebyfirst loadingonto itthelast backed-up copyof thedatabase.Theapplications canthen
be started, the network switched, and the system tested. At this point, the backup system can be
putintooperationtorestoreITservicestotheusers.
Today’s IT service requirements for high availability have exposed some limitations of magnetic
tape backup. The first limitation is the amount of data lost following a production-system failure.
Since backing up to magnetic tape is an operator-intensive activity, backups are not frequent. A
full database backup may be taken once per week. If will typically be followed by several
incremental backups, sayonce per day. At some point, another full backup willbe taken; and the
fullbackup/incrementalcyclewillberepeated.
The magnetic tapes are typically sent to a secure storage facility for safekeeping in an
atmospherethatisenvironmentallyfriendlytothetapes.
Should the production node fail, the tapes must be retrieved from storage. The last full backup
must first be loaded onto the standby database, and then each incremental backup must be
loaded. Only when all incremental backups have been loaded is the standby system ready to be
placedintooperation.
Consequently, all datasincethelastfullorincrementalbackup is lost.Inour exampleabove,this
can be up to a day’s worth of data. Furthermore, for large databases, it can take one or more
days to load the standby database. During this time, the application services are unavailable to
theusers.Andthisdoesnottakeintoaccountwhathappensifatapeislostorisunreadable.
VirtualTape
The problems posed by magnetic tape backup are greatly alleviated by virtual tape. Virtual tape
replaces magnetic tape with disk. Instead of writing backups to tape, virtual tape systems write
2AsynchronousReplicationEngines,AvailabilityDigest;November2006.
http://www.availabilitydigest.com/private/0102/asynchronous_replication.pdf.
3WhatIsActive/Active?,AvailabilityDigest;October2006.
http://www.availabilitydigest.com/public_articles/0101/what_is_active-active.pdf.
2
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

magnetic-tape images to a geographically remote disk. In fact, to the system being backed up, a
virtual-tape backup system looks exactlylike magnetic tape drives. The systemis unaware that it
isbackinguptodiskinsteadoftotape.
Virtual tape brings many advantages to the backup process when compared to magnetic tape.
Since backup to virtual tape is faster and can be substantially operator-free, it is convenient to
back up the database more frequently. Full and incremental database backups are often done
everyfewhoursratherthandays.
Restoringfromdiskismuchfasterthanrestoringfromtape.Whatmighttakedaystorestorefrom
tape can be reduced to hours using virtual tape. Furthermore, restoring from disk is much more
reliablethanrestoringfromtape.Therearenoproblemswithlostorunreadabletapes.
So Why Bother with MessyBackups?
The replicated database is not only a consistent copy of the production database, but it is also
only seconds or minutes old instead of hours or days old. Therefore, only seconds to minutes of
datawillbelostfollowingasource-nodefailure(zerodatalossifsynchronouslogicalreplicationis
used).Recoverytimecanbemeasuredinminutestohoursratherthaninhourstodays.
The replicated backup is far superior to any backup that is achievable by tape or virtual tape. So
whyevenbotherwiththesebackupmethods?Relegatethemtothedustbinoftechnologypast.
Theanswerissimple.Woebetothosewhoelectnottobackup.Hereiswhy.
DatabaseCorruption
Perhaps the biggest reason is database corruption. If the source database becomes corrupted,
thecorruption willbe replicated tothestandbydatabase.Nowbothdatabasesarecorrupted, and
thedatabaseislost.
There are two types of replication corruption – data and structural. Data corruption is typically
caused by an application bug. Both logical replication and block replication will replicate data
corruption. The problem here is not so much a lost database as it is wrong data in the database.
Both the production database and its standby copy are in error, and there is no way within the
replication environment to repair the error Even the transaction log files, which usually provide a
waytobackoutbadtransactionsandrepairthedatabase,willcontainthecorruption.
Structural corruption is more serious. This occurs if the structure of the database should be
damaged. Structural corruption is not likelyto be replicated by logical replication. However, it will
be replicated by block replication since the exact copy of the contents of disk blocks are
replicated. If both the production database and its standby copy experience structural corruption,
thedatabaseisprobablyunrecoverable.
Inbothcases,databasebackupscometotherescue.Byrestoringthedatabase toacertainpoint
in time prior to the corruption, the database can be returned to a correct and consistent copy.
True,somedatawillbelost;butthisisbetterthanlosingtheentiredatabase.
Acaseinpoint:
Amajor bankintheSouth Pacificran threeredundant nodesforitscriticalATM,POS,andonline
banking services – a production node, a disaster-recovery (DR) node, and a development node.
Thedevelopmentnodecouldbepressedintoserviceastheproductionnodeifneedbe.
3
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

In December, 2008, an operating-system patch was made to the production system to correct a
processor problem.4The patch had worked on earlier versions of the operating systemto correct
the problem but had not been tried on the current version being run by the bank. The bank
installedthepatch,anditseemedtoworkfine.
However, the patch was actually causing write errors, which corrupted the production disks.
These errors eventually brought down the production system. When the bank tried to fail over to
the DR site and then to the development site, it found the same problem. The corruption had
beenreplicatedtoallofthesystems.
Unfortunately,thebankhadnotmadebackups.Ithadnowaytorestorethedatabase.Itwasable
to get some data from unrelated systems and from some of its partners. Partial operations took
over three weeks to restore. However, much of the database was never recovered. It took the
