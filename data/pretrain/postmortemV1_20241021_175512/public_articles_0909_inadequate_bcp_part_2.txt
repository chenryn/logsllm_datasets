the standbysystem is “hot.” The business applications are all up and running on the standbysystem with
the database open for read-write access; the only difference between it and the active system is that it is
not processing online transactions that update the database (it can be processing read-only queries).
Sizzling-hot-standbyhasseveralimportantbenefits:
 It greatlyreducesRISK. Whenaprimaryoutage does occur,failover willbeto aknown-working
standby system with a running application, thereby obviating failover faults. It also removes
managementindecisionissuessincethestandbysystemisknowntobeoperational.
 It greatly improves RTO. The application is already running, in full read/write mode, on the
standby system. It is ready to receive user requests at any time. There is no need to waste the
timetobringtheapplicationupforprocessing.
 It simplifies testing. A feature of sizzling-hot-standby is that because the applications are hot
andthedatabaseopenforread-writeaccess,itcanbetested,end-to-end,atanytimeevenwhile
the production system is in full operation. To verify the end-to-end operation of the standby
system, occasionally send it a verification test update transaction. There is no need to take an
outage of the active system and worry whether the standby system will come up, or that the
testingwillcausedamagetotheproductionenvironment.
 Standby database is consistent. Replication products that support standby applications
opening the database read/write typically maintain transactional database consistency, so there
arenoissueswithusingthestandbysystemforqueryprocessing.
 Easier to recover the failed system. Although all updates are being executed by one system,
bi-directional replication is in place between both systems. When the failed system is restored, it
isstraightforwardtorecoveritandbringthedatabasesbackintosynchronization.
Overall, a sizzling-hot-standby architecture improves RTO and failover reliability significantly, decreasing
recoverytimes and outage costs substantially(Figure 2).Butit does stillsuffer from thefactthatallusers
are affected when a primary system outage occurs, and causes more data loss than fully active/active
architectures.Nevertheless,thisarchitecturerepresentsanexcellentsolutionwhentheapplicationcannot
run in full active/active mode for some reason, and it is no more complex to implement than an
active/passivearchitecture.
Next we turn to active/active architectures. In an active/active configuration there are two or more
geographically separated systems, each running online business transactions and updating their local
copy of the database, with data replication occurring between each system. Replication is bi-directional,
meaningtwo-waybetweeneachactivesystem.
Note that both systems are using replicated copies of the same database, and are running the same
applications, with the transaction workload apportioned between them. As shown in Figure 1,
active/activesolutionsprovidetheabsolutefastesttakeovertimes(RTO),withminimaldataloss,because
only half the data in the replication pipeline is lost in an outage of one system. Recovery times are
measured in seconds, and because half of the users see no outage at all, outage costs are half those of
thesizzling-hot-standbyarchitecture(Figure2).
Ifthesizzling-hot-standbyandfullyactive/activebusinesscontinuitytechnologiesoffersuchgreatbenefits
versus active/passive architectures, whydoesn’t everyone use them? Good question. There are reallyno
5
©2014SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

additional complexities or limitations with a sizzling-hot-standby architecture. It is just an incremental
extension of the active/passive model, which needs a replication product that allows the standby
databasetobeopenforread/writeaccessandcanbeconfiguredforbi-directionalreplication.
Active/activesolutionsontheotherhandcansufferfrom complexities whichdonotariseinactive/passive
or sizzling-hot-takeover modes. Principal among these complexities is the possibility of data collisions.
Because the same logical database is being updated on multiple nodes, and the same business
applications are executing on those nodes, it is possible for a transaction to be executed simultaneously
on each system, which updates the same record in the database. When that change is replicated to the
other system, each will overwrite its update with that from the other system, and consequently both
databaseswillbeincorrect.
There are two potential solutions to this problem. The first is to avoid the possibility of data collisions
altogether, which can be done by partitioning either the data or the applications, with transactions routed
to the appropriate system, such that the same record will never be updated on both systems at the same
time. For example, transactions for customer data records with names A-M are executed by one system,
and those for names N-Z by the other system. One downside of this approach is that not all business
services are amenable to partitioning in this way; the other is that workload maynot be evenlydistributed
betweeneachsystem,under-utilizingcapacityandaffectingresponsetimes.
The second solution is to route the requests to either system based on load (the so-called “route
anywhere” model) and detect and reconcile any data collisions which do occur. Data replication solutions
whichsupport active/active modes generallyinclude automatedmechanisms fordetecting datacollisions,
and resolving them using pre-defined rules (e.g., the transaction update with the more recent timestamp
wins). This approach does not suffer from the workload distribution issue, but may not be feasible where
there is no easy way to automaticallyresolve the collision (or where collisions cannot be tolerated by the
applicationatall).
But what of those business services where application or data partitioning is not possible, and data
collisions and/or loss of any data cannot be tolerated? Up until now this discussion has been all about
asynchronous replication, wherethereplicationenginesends datatothe standbysystem asynchronously
from the updates made by the application. In this mode, data can be lost (the replication latency
mentionedabove),anddatacollisionscanoccur(inactive/activerouteanywherearchitectures).
Synchronous replication resolves all of these issues. With synchronous replication, application data
updates are not committed (made visible and permanent) by either system unless the updated data has
been replicated to the standby system. This technology guarantees that no data is lost in the event of an
outageofthesystemperformingtheupdate(knownas“zerodataloss,”orZDL).
Additionally, in an active/active environment, it is not possible for data collisions to occur because the
updated data records are locked on both systems before any changes are committed on either system.
The same simultaneous update situation is instead manifested as a transaction deadlock, which is easily
resolved via application programming using timeout and retry/resubmission logic similar to any other
application processing error requiring a request resubmission. There is never any visible data
inconsistency.Therefore,synchronousreplicationfurtherreducesoutagecostsbyavoidinganydataloss,
and by eliminating data collisions, opening up the benefits of active/active architectures to any
application.Itisthepinnacleofbusinesscontinuityreplicationsolutions.
For comparison, Figure 3 gives a summary of the most significant characteristics of each of the various
replicationarchitecturesdiscussed.
6
©2014SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

1 All users affected,but takeovertimesameas forActive/Activemodes
2 “None”ifruninSynchronous mode
3 “Required”ifruninReciprocal mode
4 “Yes”ifruninReciprocal mode
Figure3:ReplicationTechnologies–ProsandCons
We have discussed the sizzling-hot-standby and fully active/active architectures that offer greater
protection than an asynchronous active/passive architecture, but are they cost effective? Yes, because
the recovery times are generally so much better. With sizzling-hot-standby and active/active
configurations, the outage costs and application risk are greatly reduced (Figure 2). While there may be
someincrementalcostincreases withthesesolutions (e.g.,thepriceofreplicationsoftwarelicensesused
in these higher availability modes), any such increases are more than offset by the significant reductions
inoutagecosts,resultinginloweroveralltotalcostofownership(TCO)forthesesolutions(Figure4).
Figure4:BusinessContinuityTechnologyandTCO
7
©2014SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Time for a Reassessment?
Even though you may already have a business continuity plan in place, it may not be adequate, well-
tested,or well-supported. Worse,itmaybeproviding you withafalsesenseof security, and willfail when
called upon. If this plan relies on an active/passive replication architecture, there are significant issues
with this approach whichcouldhamper afastandsuccessfultakeover in the eventof an outage. Thekey
point is that you can avoid this risk, since there are other replication technologies readily available, such
as sizzling-hot-standbyand active/active architectures, which mitigate the issues with active/passive, and
with better TCO. Further, for the highest levels of availability with no data collisions and zero data loss,
synchronous replication may be utilized. If your business is relying on an active/passive architecture for
service continuity, take another look at whether or not it really provides a sufficient guarantee of
availability. It may now be time to consider moving to one of the other higher level replication
architectures.
Keith B. Evans began his professional life in 1981 as a software engineer at IBM UK Laboratories,
developing the CICS application server. He then moved to Digital Equipment Corp. as a pre-sales
specialist. In 1988 he took a position at Amdahl in Silicon Valley as a software architect, working on
transactionprocessingmiddlewareforits UTS(Unix) O/S.In1992 Mr.Evans joinedTandemandwasthe
lead architect for its open TP application server program (NonStop Tuxedo). After the Tandem mergers
he became a Distinguished Technologist with HP NonStop Enterprise Division (NED) and was involved
withthecontinuingdevelopmentofmiddlewareapplicationinfrastructures(Pathway,J2EE,SOA,etal).In
2006hemovedintoaProductManagerpositionatNED,responsibleformiddlewareproducts.In2010he
also became Product Manager for the NonStop Business Continuity product suite (TMF, RDF, AutoTMF,
AutoSync, et al). Mr. Evans joined Gravic in 2012 and focuses on Shadowbase business development
and product management for the Shadowbase synchronous replication products. He earned a BSc
(Honors)inCombinedSciencesfromDeMontfortUniversity,Leicester,England.
Paul J. Holenstein is Executive Vice President of Gravic, Inc. He is responsible for the Shadowbase
suite of products. The Shadowbase replication engine is a high-speed, unidirectional and bidirectional,
homogeneous and heterogeneous data replication engine that moves data updates between enterprise
systemsinfractionsofasecond.Italsoprovidescapabilitiestointegratedisparateoperationalapplication
information into real-time business intelligence systems. Shadowbase Total Replication Solutions®
provides products to leverage this technology with proven implementations. For further information
regarding Shadowbase data integration and application integration capabilities that can assist in solving
big data integration problems, please refer to the companion documents Shadowbase Streams for Data
Integration and Shadowbase Streams for Application Integration, or visit www.Gravic.com/Shadowbase
formoreinformation.Tocontacttheauthor,pleaseemail:SBProductManagement@gravic.com.
8
©2014SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com
