apologizefortheuseofGreek symbols(whichIusuallytrytoavoid),butIdousethem heretobe
consistentwiththeNTPdocumentation.
round-tripdelay
clockerror
1091
T2 T3
time
10 11 12 13 14 15
server
time
9 10 11 12 13 14
client
T1 T4
 
2 2
2 2
MeasuringClockError
Figure1
Let
δ(delta) betheround-tripdelaytimeofthecommunicationchannel.
θ(theta) bethetimeoffsetoftheclientclockfromtheserverclock.
Morespecifically,θis
θ=time-serverclocktime–clientclocktime
In Figure 1, the client system timeline is shown on the bottom with its clock ticks, and the time
server system is shown atthetop with its clock ticks.Inthis example,theclient is slowrelativeto
the server by one clock tick.When the server thinks that the time is 10, the client thinks that it is
only9.Thus,θ = +1. The question is how can the client determine that it isslowbyonetick?
Theclientcandeterminetheoffsetofitsclock bysendingtheserveramessagewithatimestamp
T1.When the server receives it, it immediately adds its current time as timestamp T2.When it is
ready to reply to the message, the server adds a second timestamp T3. The client then receives
theresponsemessageattimeT4,accordingtoitslocalclock.
From the above figure, the channel latency, δ, which is the round-trip time for sending a
message,is
(T4T1)(T3T2) (1)
Intheaboveexample,thechannellatencyis[(14–9)–(13–12)]=4clockticks.
Assuming that the channel is symmetric - that is, the communication latency is the same in both
directions (more about this later), T2 will be equal to T1 plus half of the communication latency
(thetimethatittookthemessagetogetfromtheclienttotheserver)plusthetimeoffsetθ:

T2T1  (2)
2
4
©2007SombersAssociates,Inc.,andW.H.Highleyman

Likewise, T4 will be equal to T3 plus half of the channel latency (for the time that it takes the
messagetogetfromtheservertotheclient)minusthetimeoffsetθ:

T4T3  (3)
2
UsingEquation(1)forδandsolvingeitherequation(2)or(3)forθ yields
(T2T1)(T4T3)
 (4)
2
Thus,theclient’sclockoffsetiseasilydeterminedfromthetimestampsinthemessagethatitsent
the server. In the above example, θ=[(12–9)–(14–13)]/2=1clocktick,asexpected.
ClockAdjustment
Oncetheclient’sclock offsetisknown,theclient’sclock canbeadjustedtobeequaltotheserver
clock. There are a couple of problems that must be faced, however. First of all, time cannot go
backwards. Therefore, if θ is negative (the client’s clock is fast) and if the client’s clock must be
set back, the clock must be adjusted over a (short) period of time byslowing it down, typically by
extending the tick interval or by skipping an occasional tick. Likewise, if the clock must be
advanced by a large amount (typically more than 128 milliseconds), this may be done over an
extendedtimeinterval.Theseproceduresarecalledclockslewing.
However,if theclock offsetis verylarge(typically,minutes),acasualclock adjustmentwillnotbe
made. The clock is simply reset (if it has to be reset backwards, one has to accept the
consequences). This might occur, for instance, if the time server is offline for an extended period
oftime.
Inaddition,theremostlikelywillbe“jitter”associatedwithchannellatency.Thatis,thetimetoget
a message across the channel is not absolutely constant and will vary somewhat with each
transmission. This is especially true when communication is over the Internet, where congestion
can build and where rerouting may occur. Therefore, the calculation of clock offset, θ, may be in
error; and subsequent measurements may not agree. (Software will also cause jitter; but with
today’ssystems,thisjitteristypicallymeasuredinmicroseconds,whereaschanneljittercanbein
theorderofmilliseconds).
Jitter is compensated for by taking many measurements and by averaging the clock offset over
these samples. For instance, clock offset may be averaged over the last eight measurements.
The last measurements are stored in a buffer. When a new measurement is made, the oldest
measurement is dropped from the buffer, the new measurement is added, and the average of
theseeightmeasurementsbecomesthelatestestimateoftheclockoffset.
Finally, the derivation of θ above assumed that the channel is symmetric – that is, the time that it
takestosendamessagefromtheclienttothetimeserveristhesameasthetimethatittakesfor
the time server to send a message to the client. This will probably not be the case over the
Internet since the request message’s route might be quite different from the response message’s
route. There is also the problem that the time used by the time server itself may be in error. The
results of this and other similar problems are improved by taking time measurements over
multiple time servers and averaging them. This clock combining strategy is described in more
detailinPart2.
5
©2007SombersAssociates,Inc.,andW.H.Highleyman

FrequencySkew
Sofar, wehavecalculated thetimeoffsetof the client’s clock.If thereis aconsistent error over a
sequenceofmeasurements,itcanbededucedthattheclient’sclockisrunningalittlefastorslow
withrespecttotheserver’sclock.Thisiscalledfrequencyskew.
With frequent clock adjustments, frequency skew may not pose a problem. However, if the time
server should be lost for an extended period of time, the time difference due to frequency skew
may be so great once the time server is again available that a forced reset of the clock is
required.Thisisnotadesirableactiontotake.
Thefrequencyof someclocks canbeadjusted. An exampleis aclock thatis drivenbya voltage-
controlled oscillator (VCO). A VCO is an oscillator the frequency of which can be controlled by a
controlvoltage.Ifthefrequencyskewcanbedetermined,afeedbackcircuitcanbeusedtoadjust
the VCO’s voltage to bring the oscillator’s frequency more into line with the time server. In this
way, the client’s clock can provide a fairlyaccurate clock over an extended period of time even if
thetimeserver is down.(Ofcourse,if clock timeis determinedbyaveragingthetimeoffsetsfrom
multiple time servers as suggested above and as described in more detail in Part 2, the loss of
onetimeserverisnotsuchaproblem.)
Frequency skew is easily calculated based on the measured offset and on the measurement
interval.IfthemeasurementintervalisT ,thefrequencyskewis
m
Frequency skew = θ / T (5)
m
For instance, if the measurement interval, T , is 5 minutes (300 seconds), and if the clock offset
m
is measuredtobe100microseconds, thefrequencyskewis 10-4/ 300 = 3.33x 10-5,or .00333%.
If the offset is positive (i.e., the client clock is running slow), the VCO must be sped up by
.0033%.If theoffsetis negative,theclientclock mustbesloweddown. This adjustmentwouldbe
calculatedoneachtimemeasurementandperhapsaveragedoverseveralmeasurementssothat
theclientclockratecanbesynchronizedwiththetimeserver’sclockrateascloselyaspossible.
What’s Next?
In this Part 1 of Time Synchronization for Distributed Systems, we have talked about what is real
civil time today and what are the basics of keeping a client system in time synchronization with a
timeserverusingNTP.Wehavenotedthatsynchronizingtoasingletimeserver maynotprovide
highly precise times because of asymmetric channel latency, jitter, time-server errors, and other
problems. We discuss in Part 2 NTP’s algorithms for combining the readings from multiple time
serversandforsynchronizingthesetimeswithrealciviltime.
In Part 3, we leave NTP and move to an alternate algorithm proposed in a seminal paper by
Leslie Lamport for synchronizing clocks in a distributed system so that all are the same but are
not necessarilytiedto atimestandard. This is a simpler algorithm than used by NTP.Inaddition,
it leads to a powerful way to virtually eliminate data collisions in active/active systems without
goingtosynchronousreplication.
6
©2007SombersAssociates,Inc.,andW.H.Highleyman

