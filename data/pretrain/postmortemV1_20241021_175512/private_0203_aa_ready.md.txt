Migrating Your Application to Active/Active
March2007
In production today are many 24x7 mission-critical applications that are candidates for migrating
to an active/active architecture. The cost of downtime for these systems is very expensive; and
too often downtime can be excessively damaging to a company’s business, to its reputation, and
eventoitsmarketvalue.
Active/active technology is here today. It can
provide availabilities measured in centuries. server
node
Simply stated, an active/active system is one in data
base
which multiple geographically-distributed nodes
cooperate in a common application. Multiple
independent database copies ensure that any
server
nodehas accesstotheapplication’s dataevenin redundant node data
the event of a failure. The database copies are network replication
typically kept synchronized by replicating data
changesbetweenthem.
server
node
Is this migration simply a matter of installing a data
AnActive/ActiveNetwork base
data replication tool, bringing up a second node
with the applications that are to run active/active,
synchronizing the new database with the existing
one, and then shipping transactions to both?
Probablynot.Therearemanyotherfactorstoconsider.Letusexplorethisfurther.1
Is Your Application Suitable for Active/Active?
The first question to answer is whether your application is suitable for an active/active
environment. There are some applications that cannot, or should not be run in an active/active
mode.
One such example is an application in which all inputs must be processed in the same order as
they were received. An example of this sort of application is a process control system. The
sequence of events generated in the field is very important and must be maintained during
processing. The processing of one event is dependent upon the current system state, which has
been established by prior events. Therefore, events cannot be processed independently by
differentnodes.
It may be unacceptable for a large financial system to lose a transaction which might be worth
millions of dollars. Unless synchronous data replication can be used, active/active is not an
1 This topic is discussed in detail in Chapter 8 – Eliminating Planned Outages with Zero Downtime Migrations (ZDM),
BreakingtheAvailabilityBarrier:AchievingCenturyUptimeswithActive/ActiveSystems,AuthorHouse;2007.
1
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

option.Under asynchronous replication,shouldanode fail,transactions inthereplicationpipeline
cangetlost.
Of course, these applications can still make good use of active/active technology to support
sizzling-hot standbys, which are ready to take over from a failed node in an instant’s notice. The
application requirements needed to support these architectures are much more relaxed than
thoseneededtosupportfullactive/activefunctionality.
Short of these caveats, any application that requires extreme availability is a candidate for
migration to an active/active architecture. However, depending upon the application’s structure,
this maynot be a trivial task, as changes maybe needed to the application’s structure and code.
Thesechangesarediscussedbelow.
The Migration Steps
The major steps in migrating a legacy system to an active/active architecture include the
following:
 Maketheapplicationactive/activeready:
o Decomposethelegacysystem sothatthedatabaselayeris looselycoupledfrom
theapplication.
o Chooseandtestadatareplicationengine.
o Modify application functions that cannot be distributed across a network of
applications.
 Migratetheapplicationtoanactive/activeenvironment:
o Putthenewapplicationintoserviceandensurethatitisperformingsatisfactorily.
o Addnodestocreateanactive/activeapplicationnetwork.
Make the Application Active/Active Ready
Making your application active/active ready is probably the most difficult task in migrating to
active/active.
DecomposetheLegacySystem
A fundamental requirement for an active/active system is that the database can be replicated.
This implies that the database should be loosely coupled with the application so that data
changescanbesenttoandreceivedfromremotedatabaseswithoutimpactingtheapplication.
Fortunately, for newer systems using modern-day databases (or even modern file systems), this
isnotaproblemsincethesystemarchitectureisalreadyalayeredarchitecture.
However,inmanyoftheolderlegacysystems,somedatingback decades,theapplicationdatais
tightly integrated with the application logic. This is especially true if the data is held in a file
system rather than in a database. It may preclude replicating the data to another database copy.
In this case, the system must be decomposed so that the database layer is separated from the
applicationlogic.Ifdecompositionisrequired,thismaybethemostdauntingtask inthemigration
process.
2
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

Ifdecompositionofthelegacysystem isrequired,thisisastandardlegacymigrationproblem and
cannot be taken lightly. It oftenmust be done with no downtime whatsoever. Legacysystems are
often huge and undocumented. Migrations are often done as a single big-bang cutover from the
originalsystemtothemodifiedsystem.Thistechniqueoftenleadstofailure.
systems systems
users users
interfaces
nonseparableinterfacesandapplications
andthedatabaseservice
data
application bases
modules
data
bases NotSuitableforActive/Active
SuitableforActive/Active
Inourcompanionarticle,2MichaelBrodieandMichael Stonebrakerdescribeamethod wherebya
legacy system can be migrated incrementally. By using gateways to bridge between legacy and
target system components (user interfaces, applications, and databases), the migration can be
broken up into many small and manageable mini-migrations. The risk associated with each mini-
migrationis verysmallcomparedtoabig-bangcutover.Ifamini-migrationdoesn’twork,itcanbe
reversed until the proper corrections are made. For this reason, they call their approach the
ChickenLittleapproachascomparedtothebig-bangColdTurkeyapproach.
In any event, before migration can proceed any further, the system must be restructured if
necessary to provide database isolation from the applications. Legacy migration is generally a
risky, complex, and costly effort. It may well be that the need to restructure may preclude any
considerationofmovingtheapplicationtoanactive/activeenvironment.
ChooseaDataReplicationEngine
The heart of an active/active architecture is the data replication engine. Data replication tools do
not exist for all databases. By choosing a data replication tool early on, you can ensure that this
capabilityexists.
Be aware that hardware data replication is not suitable for active/active systems.3 The advantage
of hardware replication is that it will replicate anything, including old file systems and database
systems. However, its target database is not consistent and cannot be used for processing as
requiredbyactive/activesystems.
If asynchronous replication is to be used, the replication latency of the data replication engine is
very important. The longer the replication latency, the more data will be lost following a node
failure (poorer RPO, or Recovery Point Objective) and the more likely it will be for data collisions
to occur. Choose an asynchronous replication engine that has a very small replication latency
time.
2MigratingLegacySystems:Gateways,Interfaces,&theIncrementalApproach,TheAvailabilityDigest;March,2007.
3SeeHardwareReplication,TheAvailabilityDigest;January,2007.
3
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

If synchronous replication is to be used, determine the impact on application response time; and
ensure that it is acceptable. Since a synchronous replication engine must coordinate transaction
commitsacrossthenetwork,itwilldelaythecommitcompletiontotheapplicationuntilitiscertain
that the transaction can complete across the network. In addition, distributed deadlocks are a
problemandmustbeeliminated,asdescribedlater.
EliminateDistributedPitfalls
Justbecauseanapplicationworksfineinasingle-instanceenvironmentdoesnotmeanthatitwill
work properly if there are multiple instances all processing transactions independently. Many of
these problems are discussed in some detail by Dr. Werner Alexi in Breaking the Availability
Barrier–Volume2.4
DistributedDeadlocks
In monolithic applications, deadlocks are often avoided by using an intelligent locking
protocol (ILP). Under this protocol, locks are always acquired in the same order. Thus,
deadlocksareavoided.
In a distributed system, a local ILP does not work since two different application
instances at two different nodes might legitimately acquire a lock on the same data item.
Under an ILP, the first lock is, in effect, a master lock that prevents any other application
from acquiring locks on secondary data items as long as an application is holding the
masterlock.Inadistributedsystem,asimilarfacilityisneeded.
This is often implemented as a global lock. The global lock resides on one system and
must be acquired by an application anywhere in the network before that application can
acquire local subservient locks. This global lock could be a separate data structure
implementedjustfor this purpose,or itmightbethedataitem inquestion inadesignated
masterdatabase.
Provision must be made to release global locks held by a node that has just failed.
Provisionmustalsobemadetoreassign themaster attributeto another databaseshould
themasterdatabasefail.
UniqueNumberGenerators
Many applications generate unique numbers that are used to assign customer numbers,
part numbers, and other identifiers. Likewise, some applications generate random
numbersforsimilarpurposes.
If these numbers are generated in different nodes, there will be duplications. To avoid
duplicates, the generated numbers could contain a node id. Alternatively, different blocks
of numbers could be assigned to each node; or each node could generate numbers that
are of the form nx + a, where n is the number of nodes in the system, a is the node’s
identificationnumber,andxistheincrementingvariablestartingatzero.
TransactionRouting
There must be some way to determine to which node a transaction should be routed.
Routing can be done via intelligent routers or by having a routing application module
whichwillrouteatransactiontotheappropriatenode.
4 Appendix 4 – A Consultant’s Critique, Breaking the Availability Barrier: Achieving Century Uptimes with Active/Active
Systems,AuthorHouse;2007.
4
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

A simple routing algorithm is round-robin, in which each transaction is routed to the next
node in turn. Transactions could be routed according to content if certain nodes are
responsible for handling all transactions within a certain category, such as a customer
identificationrange.Transactionscouldberoutedtobalancetheloadacrossthesystem.
Care must be taken if the routing is done by database partitioning since a single
transaction might have to update data held by another node. In this case, the application
wouldhavetobreak upthetransactionintosubtransactions.Theremustbethecapability
toensuretheintegrityofsuchadistributedtransaction.
LocalContext
Often, context is stored in memory and not on disk. In this case, it is not globally
accessibleeventhoughitisneededbythedistributedapplications.
An example of such context is the description of a connection. If a message requiring a
response is sent to a remote system asynchronouslyso that the response is returned on
aseparateconnection,itmaynotbepossiblefortherespondingsystem toknowtowhich
nodetheresponseshouldbesent.
BatchProcessing
Batch processes are expected to run only in one node. In a distributed environment,
provisionmustbemadetodesignateanodeinwhichbatchprocessingwillbedone.
However,sometimesapplicationdecisionsaremadebasedonthestatusofbatchjobs.If
this is a local decision (don’t provide this function while batch jobs are running to control
processor loading), there is no problem. In other cases, global decisions must be made
which depend upon batch status. In these cases, batch status must be made available
globally.
ApplicationManagement
In an active/active system, applications are running in a distributed environment. The
application management tool currently being used to monitor and configure the system
may not be extendable to a networked environment. In this case, a new distributed
managementtoolwillhavetobeselected.
Furthermore, there must be a means to distribute configuration changes to the nodes in
the application network without taking down the system. Configuration changes can
range from parameter changes to application upgrades. Configuration parameters must
includeparameterswhosevaluesarenode-specific.
These are only some of the challenges that will be faced when making an application
active/active ready. None of these problems are insolvable. It is just that they and other such
problemsmustberecognizedanddealtwith.
Migrate to an Active/Active Architecture
Now that you have a system which you believe to be ready to migrate into an active/active
environment,youcanbegintobuildyouractive/activesystem.
5
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

TryOuttheNewSystem
If the original system was already layered so that the database was loosely coupled, and if the
required changes to the application to make it active/active ready were not major, your system
may be ready to move into an active/active environment. Any changes that needed to be made
wereprobablyinstalledaspartofthenormalmaintenanceproceduresandarenowinproduction.
However, if the changes were of a fundamental nature, such as new hardware, a new operating
system, a new database, major changes to the system architecture, or major changes to the
application, the new system must be put into service and prove its correctness before the next
step can be taken. Hopefully, you do not plan to put the system into service with a big bang.
Rather, you have implemented your new target system with incremental migration steps in a
process similar to that described by Brodie and Stonebraker in their book (see footnote 2). As a
result,thesystemisalreadywelltestedandisreadytogo.
MigratetoActive/Active
Once you are confident that you have a properly operating system that is ready to cooperate in
anactive/activenetwork,youarereadyforthefinalstep.Thisisthebringingupofasecondnode
intheapplicationnetwork.
The procedure for doing this is described in detail in Chapter 8 – Eliminating Planned Outages
with Zero Downtime Migrations (ZDM), Breaking the Availability Barrier – Volume 2, referenced
earlier.Insummary,theprocedureisasfollows:
1. Bringupthesecondsystem.
2. Copythedatabasefromtheactivesystemtothenewsystem.
3. Enablebidirectionaldatareplicationbetweenthedatabasesofthetwosystems.
4. Keepthenewdatabasecurrentwithdatareplication.
5. Moveafewuserstothenewsystemasatrialrun.
6. If problems are experienced with the new system, move its users back to the original
systemuntiltheproblemsareresolved.
7. If operation of the new system is satisfactory, move more users over until the second
systemhasitsfullcontingentofusers(ortransactionload).
8. Addadditionalnodestotheapplicationnetworkifdesiredviatheaboveprocess.
data copy data data repl. data data repl. data
base base base base base base
original node node node node
system clone 1 2 1 2
addnode trialrun active/active
6
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

Summary
Some applications or systems simply cannot be reasonably moved to an active/active
architecture. This may be because of the nature of the application or because of the application
orsystemstructure.
However, if a system is a candidate, the application and system structure must first be made
active/active ready by making those modifications necessary to allow them to work properly in a
distributed environment. The active/active application network can then be implemented by
cloning the original system, synchronizing the cloned databases with the original system, and
thenmovingusersortransactionloadtotheclonedsystems.
7
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman
