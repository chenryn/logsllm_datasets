Raima’s High-Availability Embedded Database
December2011
Embedded processing systems are everywhere. You probably cannot go a day without interacting with
dozens of these powerful systems. Software applications embedded in microprocessor chips control
airplanes and toasters. They provide the intelligence for our smart phones and GPS devices.
Manufacturingrobots andpatentmonitoringsystems dependuponthem.Theaveragecar todayis runby
aboutfortymicroprocessorswithfortymillionlinesofcode.
Many of these embedded applications depend upon sophisticated databases. RDM Embedded (RDMe)
fromRaima,Inc.(www.raima.com)fulfillsthisneedwithahighlyavailableembeddeddatabase.
RDMe Database Fundamentals
Aneffectiveembeddeddatabasemustmeetseveralcriteria:
 Itmusthaveasmallfootprint.RDMecanuseaslittleas400KofRAMmemory.
 Itmustbefast.RDMedoesnotdependupondiskaccesses.
 Itmustbereliable.RDMeprovidestransactionsemanticsandmirroringtoprotectdata.
 It must be scalable. RDMe’s Database Union and Multi-Version Concurrency Control (MVCC)
featuresletapplicationsworkseamlesslyacrosspartitioneddatabases.
 It must be predictable. RDMe’s core database uses the network model with fixed length records
thatmakeaccesstimesanddatabasememorysizeseasilypredictable.
 It must provide a low level of control. The RDMe API includes more than 150 low-level control
functionsimplementedinC.
 It must optionally provide high-level access. RDMe databases are accessible via C++ object
models,SQLstatements,andODBC,amongothers.
 It should allow geographical distribution of data. RDMe’s replication facility and remote login
capabilitiesletRDMebethedatabaseinhighlydistributedpeerorhierarchicalapplications.
RDMe Architecture
The basic RDMe database functionality is implemented in its core database engine. This engine is
suitable for manyapplications and has been put to use in hundreds of thousands of installations over the
last twenty-five years. It has served many industries including aerospace, automotive, business, finance,
government,healthcare,manufacturing,andtelecommunications.
1
©2011SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Raima offers several extensions to its core database engine.
Theseinclude:
RDMe
 RDMeHigh Availability– RDMe’sgoalis toachieve RDMe
Distributed
five9sofreliability. HA
 RDMe DataFlow – An RDMe core database can be
replicatedtooneormoreexternalSQLdatabases.
RDMeCore
 RDMe Distributed – An RDMe database can be Database
partitioned across multiple locations and viewed as a Engine
singledatabase.
 RDMeInterop –Externalapplications can access an
RDMe database via ODBC, JDBC, and ADO.NET, RDMe RDMe
andviaabrowseroverHTTP. Interop DataFlow
The RDMe Core Database Engine
RDMeExtensions
The RDMe core database engine comprises the database
itself, a Transaction File Server to manage the database, and a Runtime Library that applications use to
issuedatabasecommands.
DatabaseModels
NetworkModelDatabase
To achieve maximum efficiency in the use of space and
time, the underlying database architecture of RDMe is a
network model database. It is based on owner/member
relationships.Afilecomprisesanownerrecordandmany
member records. The members form a linked list, with
each member record pointing to the previous and next
member record as well as to the owner. The owner
record points to the first and last member record in the
list.
All records in a file are fixed length. They are organized
into fixed-length pages with multiple records per page. It
is the page that is the block that is written to and read
fromdisk.
Thecoredatabasesupportsfivetypesoffiles:
 DatabaseDictionaryFileswhichcontainthedatadefinitionschemaforeachfile.
 DataFileswhichcontainthefiledata.
 KeyFileswhichcontainB-treeindicesonfieldswithinafile.
 Hash Files which can provide quicker lookup of records than going through a B-tree index
providingkeyorderingisnotnecessaryintheapplication.
 VardataFileforholdingvariablelengthdatathatisreferencedbyapointerinadatarecord.
Files may be fully resident in memory. A file may also be resident on disk, with memory being used as
cache to hold the most recently used records from the disk-resident file. To maintain persistence, an
applicationcan“sync”thememory-residentcontentofafileatanytimebywritingittodisk.
Thus, a core RDMe file is a linked list of fixed length records. The network model is extremely efficient
whenrecordsmustbereadinsequence.
2
©2011SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

RelationalModelDatabase
Throughthe useof its Key Files,theRDMe database is extendedto arelationaldatabasethatsits ontop
of the core network model database. Records maybe selected in keyorder via the keys in the KeyFiles.
This allows the database to be used as a SQL database. SQL DDL statements are translated into core
DDL statements and stored in the core Database Dictionary Files.1 Relational equi-joins, based on
primary/foreign key relationships, are actually implemented in the core database as network model sets,
resultinginveryfastjoinprocessinginSQL.
RuntimeLibrary
The RDMe Runtime Library provides applications with the functionality needed to make effective use of
the RDMe database. A copy of the Runtime Library is bound into each application that needs to access
RDMe.RuntimeLibraryfunctionsinclude:
 DatabaseControl–Addanddeletetables,openandclosefiles.
 RecordSetControl–Createanddeleterecords,connectordisconnectrecordsfromsets.
 DataManipulation–Readorwriteindividualfieldsorentirerecords.
 Locking–Lockrecordsforsharedreadingorexclusivewriting.
 TransactionControl–Begin,commit,andaborttransactions.
 Navigation–Keylookup,hashlookup,andscanning.
TransactionFileServer(TFS)
The Transaction File Server (TFS) serves the role of a database controller, much like a disk controller
manages disk activity. An RDMe configuration can have multiple TFSs, and they all operate
independently.ThoughaTFScanmanagemultipledisks,typicallyonlyonedisk is assignedtoeachTFS
toachievethemaximumparallelismfordiskactivity.
Any number of applications may connect to a specific TFS through their Runtime Libraries. It is the
responsibility of the TFS to execute commands invoked by applications via their calls to the Runtime
Libraryfunctions.
Afile partitionis always contained on one disk.Therefore,allcommands executedagainst agivenfile(or
partition thereof) always flow through the same TFS. The TFS manages the cache and the locks for its
files.
DistributedProcessing
In addition to multiple TFSs on the same computer, there can be TFSs on multiple computers. Any
application can connect to TFSs on any computer. Therefore, the database may be distributed over
severalcomputersthatmay,infact,begeographicallydistributed.
Applications connect to the TFSs via TCP/IP. A TFS is identified via a domain name and a port. If an
application is connecting to a TFS on its own computer, the TCP/IP stack is optimized for local
communication.
1Forabenchmarkcomparisonofnetworkversusrelationaldatabases,seetheRaimawhitepaperentitledDatabaseManagement
inReal-timeandEmbeddedSystems.
http://www.raima.com/wp-content/uploads/Database_Management_in_Real_Time_and_Embedded_Systems.pdf
3
©2011SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

TFSVersions
TherearethreedifferentversionsofTFS:
 TFStisafull-featuredTFSthatlinksdirectlytoanapplication.Itismultithreadedandcanexecute
severalruntimecommandssimultaneously.Itisoptimizedforamulticoreenvironment.
 TFSr has the same functionality as TFSt but applications connect to it via RPCs (remote
procedurecalls).ThiscapabilityisusediftheapplicationandtheTFSareondifferentcomputers.
 TFSs is asingle-threadedTFSthatis intendedfor batchprocessing.It is notthreadsafe,andthe
databaseshouldbebackedupbeforeprocessingitwithTFSs.
daerht daerht daerht
daerht daerht daerht daerht
TransactionControl
When an application issues a begin transaction directive,
application
the Runtime Library initiates a transaction. As data
manipulation commands are issued, TFS is notified and runtimelibrary
locks the records that are being changed. The Runtime
Librarykeepsacopyofthechangedrecords.
txlog
TFS
Upon the receipt of a commit transaction, the Runtime
Library bundles all of the pages that have been newly
application
created or updated by the transaction and sends these
data
as a transaction log to the TFS. The TFS updates its runtimelibrary base
cache with the changes and releases the locks on the
txlog
changed records. It writes the transaction log to a disk-
txlog
resident log for persistence. At this time, the transaction
is safe-stored and is considered committed. The commit RDMeTransactionProcessing
directive issued by the application is completed with a
statusresponse.
Periodically, TFS will update the disk-resident database with the transaction logs that have accumulated
since the last synchronization point. The synchronization interval is configurable from ten milliseconds to
tenseconds.
IfatransactionaffectsfilesmanagedbymultipleTFSs,thechangesaresentasseparatetransactionlogs
toeachinvolvedTFS.However,thereisnotwo-phasecommitprotocolbetweentheTFSs.
4
©2011SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

SQLAccess
A fully functional SQL implementation is much too massive for an embedded system. Fortunately, many
of the SQL functions are not typically needed in an embedded application. Raima has implemented a
subsetofSQLthatprovidesthenecessaryfunctionsrequiredbymostembeddedapplications.2
Raima’s abridged SQL does not include Grant/Revoke security statements, views, triggers, or dynamic
DDL. It typically executes precompiled SQL statements but, as an option, Raima provides a SQL
compiler.
The SQL engine is linked with the RDMe Runtime Library and uses the underlying RDMe core database
to execute SQL statements. A SQL application can interact with multiple TFSs on the same or different
computers.
OperatingSystemSupport
RDMe runs under many operating systems, including Linux (many flavors), Windows, HP-UX, Solaris,
iOS,AIX,andMacOS.
RDMe Extensions
Asdescribedearlier,RaimaoffersseveralextensionstoRDMe.
RDMeHighAvailability
RDMe provides manyfeatures to achieve high availability of its database. Raima’s goal is to achieve five
9s of availability (downtime of about five minutes per year) and 100% protection of the data in the
database.
TransactionManagement
RDMe availability starts with its transaction management capabilities. Once a transaction is committed, it
is durable. Thus, the database remains intact following a system failure. Upon recovery, the safe-stored
transaction logs are read to replay any transactions that had not yet been materialized at the time of the
failure.
HotBackup
RDMe provides a hot backup facilityto take full or incremental snapshots of active files and to write them
to an offline medium. The backup facility does not interfere with normal processing, which continues
unabatedduringthebackup.Databasebackups allow thedatabasetoberestoredshouldthediskssuffer
damage.
Mirroring
To provide rapid recovery from a total system failure, the RDMe database can be mirrored. Mirroring
provides a byte-by-byte copy of the database on a backup system. The backup system can then be put
intoservicerapidlyshouldtheprimarysystemgodown.
Database mirroring is accomplished by copying the transaction logs from the primary system to the
backup system. The backup system replays the transaction logs against its copy of the database to keep
thetwodatabasessynchronized.
2SeeIsUsingSQLinanEmbeddedComputerApplicationLikeTryingtoSqueezeanElephantintoaMini?,RaimaWhitePaper.
http://www.raima.com/wp-content/uploads/sql_in_an_embedded_application.pdf
5
©2011SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Mirroring can be either synchronous or
asynchronous. With synchronous
mirroring, both systems will synchronize
their databases with the accumulated
transaction logs simultaneously.
Database synchronization is not
considered complete until both systems
have materialized all of the data
changes in the transaction logs. In this
case,theprimaryandbackupdatabases
arealwaysexactcopiesofeachother.
With asynchronous mirroring, the
backup system will synchronize its
database independently of the primary
system. The backup database will be
out of synchronization with the primary
databasebysomesmallincrementoftime.
Raimasupportsthird-partyHAManagers.HAManagersrunoneachsystem andcoordinatethemirroring
process. It is the responsibilityof the backup HA Manager to determine when the backup system should
take over. A Raima-supplied HA Manager is scheduled to be available in the future, along with user-
definedcalloutsfortakingspecifiedactionsoncertainfailures.
RDMeDataFlow
ViaRDMeDataFlow,thecontentsofanRDMedatabasecanbedistributedtoothersystemsfortheiruse.
RDMe DataFlow uses data replication rather than mirroring to do this. As opposed to mirroring, RDMe
DataFlow replicates core database actions such as create, update, and delete rather than byte changes.
The Runtime Library creates replication logs containing these actions for each transaction when
configuredtodoso.
The replication logs are sent asynchronously from the primary system to one or more target systems.
Resident on each target system is a Replication Client that is responsible for mapping the replication log
tothetargetsystem’sdatabaseandforreplayingthereplicationlogstothatdatabase.
A primary use of RDMe DataFlow is to move data from remote non-indexed databases to a heavily
indexed persistent query database. For instance, it can feed SQL databases such as MySQL, SQL
Server, Oracle, or another RDMe SQL database. It can also be used to aggregate data from several
sources onto a single target. For instance, data from multiple remote sensors can be aggregated in the
databaseofacentralcontrolcomputer.
RDMeDistributed
RDMe Distributed provides a unified view of a geographically distributed partitioned database. The
partitions are identically structured, and each partition can reside on a different computer. Through
RDMe’sDatabaseUnionfeature,anapplicationcanaccessthedistributedpartitionsasasingledatabase
withoutbeingawareofthefactthattheyresideondifferentcomputers.
RDMeuses Multi-Version ConcurrencyControl(MVCC) topresent aconsistentsnapshotof thedatabase
to a reader even while the database is being actively updated. This allows readers to view the database
without having to lock records in order to maintain a consistent view. As a result, MVCC read activity is
transparenttoapplicationsthatareactivelyupdatingthedatabase.
6
©2011SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

RDMeInterop
RDMe Interop allows other systems to interoperate with an RDMe database via standard protocols.
RDMe Interop supports ODBC, JDBC, and ADO.NET. RDMe databases can be read and updated with
InternetbrowsersoverHTTPusingRDMe’sMicroHTTPServer.
Use Cases
Aseries of detailedusecases for RDMecanbefound intheRaimawhitepaper entitledRDM Embedded
10.1ArchitectureandFeatures.3
Summary
Embedded systems are all around us and control many aspects of our lives without our ever thinking of
them. Some of these are simple systems that control our coffee makers and dish washers. Others are
quitecomplex,controllingmanufacturingprocessesandjetairplanes.
Complex embedded applications often require sophisticated, efficient, and high-performing databases.
Raima’s RDMe database fulfills this need. It can be configured as an elemental network database
requiringlessthan400KbytesofmemoryallthewayuptoasophisticatedSQLrelationaldatabase.
RDMe has many features to support high-availability applications with a goal of achieving five 9s of
availability.Itcanbegeographicallydistributedinpeerandhierarchicalarchitectures.
RDMe is a mature database. It has been used in hundreds of thousands of embedded installations over
thelasttwenty-fiveyears.
3http://www.raima.com/wp-content/uploads/RDMe-10-1-Technical-Summary.pdf
7
©2011SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com