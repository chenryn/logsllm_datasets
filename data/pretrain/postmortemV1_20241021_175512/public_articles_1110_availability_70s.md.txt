High Availability, 1970s Style
October2016
In1972,Istartedasmallpayrollservicescompany,MiniDataServices,Inc.Theintent
behind MiniData was to provide payroll services to small companies via inexpensive
computers.Ourbillboardsread“Youpay$9,Wepay15.”Inother words,wewoulddo
afifteen-manpayrollfor$9perpayperiod.
What were inexpensive computers? The choice at the time was the PDP-8 from
Digital Equipment Corporation. A basic PDP-8 sat on a desktop. It was a 12-bit
machine with 4K ofmemory(yes,kilo,notmegaor giga).It was thefirstsuccessful
commercialminicomputer.
Why a 12-bit word length? At the time of its introduction, the 8-bit byte had not yet
beenformulated.Characterswerestoredinsixbits,givingenoughcombinationsfor
the upper and lower case letters, numbers, and a couple of special characters. A
PDP-8 word could store two characters. With a 12-bit word length, the addressing
capability was 4K words. Thus, the basic PDP-8 was configured with 4K of
memory.
Additional 4K memory banks could be added and could be addressed by switching memory banks via
specialcommands.
A PDP-8 instruction included a three-bit operation code, an eight-bit address field, and an indirect
addressflag(i).Theeight-bitaddressfielddividedthe4Kmemorybank intosixteen“pages”of256words
each. Any word in a page could be addressed directly via an instruction in that page. If the indirect
address flag were set, the 12-bit address in that location was used as the operation address, thus
allowingaccesstoall4Kwordsinamemorybankviaindirectaddressing.
Of course, to run a payroll service, we needed a bit more than a basic PDP-8. First of all, we needed two
systems. Payrolls had to get out on time. If our PDP-8 failed, that was
not an excuse to fail to deliver paychecks to the employees of our
customers. Therefore, we purchased two PDP-8s. Active/backup
systems kept synchronized via data replication were unknown at the
time. Rather, we would normally use both systems to process different
payrolls. However, if one system failed, we could still get the payrolls out
using the surviving system. This was high availability, 1970s style.
(Interestingly, in the many years that we used PDP-8s, we never had a
systemfailure.)
1
©2016SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

We also had to beef up the peripherals on our systems. The basic PDP-8 came with a Model 33
Teletypewriter as a console. It did not come with an operating system – only device drivers. In order to
boot the system,one hadtoenter a 22-wordbootstraproutine via theswitches onthefrontof thesystem
and then load the console driver (the Model 33 Teletypewriter driver) via the paper-tape reader of the
Teletypewriter.
We needed to add disk memory, magnetic tape, a high-speed line
printer, and morememoryto our systems. Themagnetic tape drives
were Digital’s DECTape drives. They were unique in that they were
formatted in 256-word blocks. Any block on a tape could be located,
read, updated, and rewritten to tape in the same location. Thus, the
DECTapedrivesservedasanextensiontothediskdrives.
Weadded a second 4K memoryblock to each system,giving a total
of 8K of memory. Digital’s disk drives provided 32K words of
memory. We added two disk drives to each system, giving a total of
64Kofdiskcapacitytoeachsystem.
Then came the software. We had to write a payroll package that would process up to fifty small payrolls
simultaneously(this is howweplannedtoprovidepayrollservices soeconomically).Itwas notfeasibleto
write this package in assembly language (which at the time was the only option on the PDP-8), so we
developed our own software language – SAIBOL-8. SAIBOL stands for SAI Business Oriented Language
(a takeoff on COBOL). SAI was the name of mycompany – Sombers Associates, Inc. (Digital later came
outwithasimilarlanguagecalledDIBOL,butitwastoolateforus).
Fortunately, the PDP-8 provided a convenient mechanism for developing SAIBOL-8. One of its
instructions was a JMS instruction – Jump to Subroutine. We defined a language that was COBOL-like.
Eachverb(suchasMOVE orADD) was implementedasasubroutine.Thenameoftheverb was defined
to be a JMS instruction that called the verb subroutine via an indirect address in the following location.
Parameters of the call were stored in the words following the JMS instruction so that the verb subroutine
had all the information it needed to perform the operation. For instance, to move twenty characters from
location A to location B, the SAIBOL-8 statement was MOVE 20 A B. It would be compiled as the
assemblylanguagesequence:
JMS*+1 (Jumptothesubroutinewhoseaddressisinthefollowingword)
MOVE (MOVEsubroutineaddress)
20 (charactercount)
A (fromaddress)
B (toaddress)
where“*”indicatesthecurrentaddress.
We called the SAIBOL-8 compiler an “interpretive compiler.” Fortunately, we did not have to write a
compiler. Since all the compiler did was to take a SAIBOL-8 statement and convert it to a PDP-8
assemblylanguage sequence, we simplymodified the Digital PDP-8 assembler to “interpret” a SAIBOL-8
statementasanassemblylanguagestatement.
Fortunately, the entire set of SAIBOL-8 verb subroutines fit within one 4K bank of memory. We used the
first bank of memory in our PDP-8s to store the SAIBOL-8 verb subroutines and paged various
applications into the second bank of memory. Consequently, we could write all of our payroll applications
inaCOBOL-likelanguageusingonly8Kofmemory.
One problem we had was that our payrolls were small (an average of seventeen employees), and each
company needed its own checks with its name, its bank’s name, and the MICR (magnetic ink character
recognition) encoding printed on its checks. If we had to break down the printer and change check forms
2
©2016SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

for every customer, it would take hours each day (1,000 customers per day and one minute to change
checkswouldaddsixteenhoursperday!).
So what we did was to process fiftycustomers atatimeandprintall of their checks withtheir names and
bank names on the checks. We would then burst the checks and run each company’s checks through a
MICR encoder to print the MICR information on the bottom of the check. We were told by many that this
wasn’tlegal,butweneverhadanyproblemwiththepractice.
Our PDP-8s cranked out payrolls for our customers for many years. However, the onset was almost a
disaster.Wesoldourfirstpayrollservicetoalocalsmallbank.Whenwedeliveredthebank’sfirstpayroll,
our telephone rang; and we were met with cries of anguish. It turned out that they delivered their payroll
information to us as hours worked, but our payroll program took the weekly pay as the hourly pay.
Paychecks were issued for thousands of dollars each. We quickly learned from that experience to check
each payroll very carefully before delivering it. We also did payrolls manually, comparing them to the
computer output, before delivering them. We did this until we were absolutely confident in our payroll
processing.
The PDP-8s served us well for many years until we upgraded to Digital’s PDP-11 and its more modern
16-bitwordsize.
Early on, I had hired a superb technologist turned businessman, Ed Bindel, to run MiniData. He grew
MiniData over almost twenty years and then arranged the sale of MiniData to Control Data Corporation
(CDC)in1991.Atthetime,MiniDatawasprocessingover5,000payrolls.
Afinalthought.Can youimaginetodayprogrammingamulti-companypayrollonacomputer withonly8K
ofmemory?Backthen,wedidn’tknowitcouldn’tbedone.Sowedidit.
3
©2016SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com
|---|--|--|
| 0 |  |  |
| 1 |  |  |