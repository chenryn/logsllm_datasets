Build to Fail
November2014
What do “build to fail” and “chaos monkey” have to do with continuous availability?
Plenty,as Netflix has shown.Netflix survivedamassiveAmazonWebServices rebootof
manyof its virtual machines with hardlya hiccup. It attributed this success to its policyof
building applications to run continuously on systems that can fail (build to fail) and to test these
applicationsperiodicallywithrandomsystemfailures(chaosmonkey).
Netflix
Netflix streams TV shows, movies, and other video content to almost 50 million
subscribers around the world. It uses AmazonWeb Services (AWS) as the platform
tomanageitsmanyapplications.
Netflix has taken great care in the design of its applications to ensure continuous availability. If it should
godown,millions of its customerswouldbefrustratedbynotbeingableto viewtheshows theywishedto
seeduringtheoutage.
Netflix achieves this level of availability via two mechanisms – consistent reliability design patterns and
periodicrandomfailureinjections.
DesigningforAvailability
The first step in achieving continuous availability is to design for availability. To do this, Netflix creates
micro-services for the smallest level of abstraction to minimize the effect of any service failure. It utilizes
consistent reliability design patterns to tie these micro-services into applications that are distributed
acrossmanynodes.
ThisintegrationisimplementedviaHystrix,anopen-sourcefacilitydevelopedbyNetflixin2012.Hystrixis
designed to control interactions between distributed services. It provides tolerance to latency between
nodes and to failures of nodes. It isolates points of access between services and prevents failures from
cascadingacrosstheaccesspoints.Itprovidesfallbacktoredundantservicesshouldaservicefail.
DesigningforFailure
Thesecondstepistoverifythattheapplicationdesignsarereliableandthattheywillrecoverfrom
unexpectedfailures.Netflixperiodicallyinjectsrandomfailuresintoitssystemstoensurethattheycan
toleratefailures.Followingeachtestisa“no-blamepostmortem”thatseekstoimprovetheapplications
sothatobservedfailureswillnotrecur.
Thisprocessleadstoimprovementinitsreliabilitydesignpatterns.
1
©2014SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Netflix’s Use of Amazon Web Services
NetflixusesAmazonWebServicestohostitsapplications.AWSisanidealplatformforNetflixbecauseit
providesmultipleAvailabilityZones(AZs)thatarefault-isolated.ApplicationsmayruninmultipleAZs.If
oneAZshouldexperienceproblems,theapplicationscanfailovertoapplicationinstancesinotherAZs.
NetflixrunsitsapplicationsinthreeAZstoensureavailability.
A major component of the Netflix applications is its database. Among other items, the massive database
holds the personalized content recommendations for individual subscribers based on their prior viewing
history.NetflixisoneofAmazon’slargestcustomers.
Netflix uses Cassandra, a NoSQL database. Apache Cassandra is an open-source database
management system in which the database can be distributed across many nodes, avoiding any single
point of failure. Netflix chose Cassandra because of its capability to distribute a database, unlike other
databasessuchasOracle.Ifanodefails,thedatabaseisstillintactonthesurvivingnodesandcontinues
to be usable. Cassandra does not guarantee consistency among its database copies, but it does
guarantee eventual consistency. That is, should updates be quiesced, all databases will eventually come
toanidenticalstate.
Within AWS, the Elastic Compute Cloud (EC2) is the primary infrastructure for the Amazon cloud,
providing resizable compute resources. The fundamental building block of the Elastic Compute Cloud is
an EC2 instance. An EC2 instance is an application running in the AWS cloud as a virtual machine.
MultipleEC2instancesofanapplicationcanberuninthesameordifferentAvailabilityZones.
Netflix’s Cassandra database is distributed across 2,700 EC2 instances. It is designed to monitor for
failedinstancesandtocreateareplacementinstanceshouldonefail.
The Amazon Reboot
In September, 2014, a serious vulnerability was discovered in the open-source Xen hypervisor that AWS
uses to host its virtual machines. This vulnerability allowed one EC2 instance to read the memory of
another EC2 instance hosted on the same physical server. This is a violation of an important security
barrier in multi-tenant virtual environments. The vulnerability did not affect all EC2 instances. Only those
hostedonx86serversthatdidnotuseXen’sparavirtualization(PV)modewereaffected.
It was imperative that Amazon correct this vulnerability immediately. Consequently, Amazon announced
on September 25th that it would be updating its servers and that as many as 10% of its EC2 instances
would require rebooting. Amazon did not identify the EC2 instances that would be affected, but while an
EC2 instance was being rebooted, the services which it provided would be unavailable. Amazon
scheduledtherebootssothatonlyoneAvailabilityZonewasaffectedatatime.
Netfliximmediatelywentonalert.ArebootofanEC2virtualmachinecouldpotentiallytakedownsomeof
Netflix’s services. Would its “built-to-fail” services survive this real-life test? This was the first serious test
oftheavailabilityofNetflix’sreliabilitydesignpatterns.
As it turned out, 218 of Netflix’s 2,700 Cassandra instances were rebooted. 22 instances did not reboot
successfully,butNetflix’s automatedfailurerecoverymechanism replacedthem withother EC2instances
whichitcreated.NetflixexperiencednodowntimeinanyofitsservicesduringtheAmazonreboot.
2
©2014SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Chaos Engineering
Clouds have had a record of massive failures, including Amazon, Google, Azure, and Rackspace.1
Netflix’s experience demonstrates that companies thinking of moving to a cloud infrastructure need to
buildtheirsystemstofail.
To ensure that their applications could withstand unexpected failures, Netflix repeatedly and regularly
exposed them tounexpectedfailures.Todothis, itbuilt its own Simian Army (“Simian”means monkeyor
ape).
The Simian Army
Netflix’s Simian Army is open-source software developed by Netflix that deliberately attempts to cause
failures in a system. It is designed to identify groups of systems and to randomly disable one of the
systems in the group. By periodically injecting controlled failures into its systems, Netflix guarantees that
theyarefaulttolerant.
Thefirstmember of theSimianArmywas Chaos Monkey. Chaos Monkey
was launched in 2010. Its task is to randomly disable production EC2
instances in AWS. Next came Latency Monkey that induces delays in
client-server interactions. Chaos Gorilla simulates an outage of an entire
AmazonAvailabilityZone.
Byusingthese virtual vandals,Netflix ensures that its automatedsystems
cope with real-life failures. Its no-fault post mortems at the end of each
exercise lead to improvements in its systems to prevent recurrences of
problemsfoundduringtheexercise.
The Simian Army operates only during business hours. Strange as it may seem to inject failures during
peak hours,thereareseveralreasons for this.Oneis thattheNetflix peak hours tendto beearlyevening
when people have returned home from work and want to watch a movie or a TV show. Equally important
is that during business hours, key technical staff are available to fix any problems that have cropped up
due to the test. Most of the time, no problems result from the failure injections – after all, the Netflix
systems are supposed to be fault tolerant. However, if there is a problem, it is better to have it when staff
areavailableratherthangettingacallat3AMinthemorning.
Summary
Netflix focuses on the continuous availability of its services. It achieves this level of availability by
adheringtoitsreliabilitydesignpatternstoarchitectits software.Itthenchecksthatthesedesignshavein
factledtofault-tolerancebyperiodicallyinjectingfailureswithitsSimianArmy.
The result of this effort was a near-perfect survival of the Amazon reboot of 10% of Netflix’s database
nodes.
1Amazon'sCloudDownedbyFatFinger,AvailabilityDigest;May,2011.
AmazonDownedbyMemoryLeak,AvailabilityDigest;November2012.
GoogleTroubles-ACaseStudyinCloudComputing,AvailabilityDigest;April2009.
PoorDocumentationSnagsGoogle,AvailabilityDigest;April2010.
Rackspace-AnotherHostingServiceBitestheDust,AvailabilityDigest;December,2007.
WindowsAzureCloudSuccumbstoLeapYear,AvailabilityDigest;March,2012.
WindowsAzureDownedbyaSinglePointofFailure,AvailabilityDigest;November2013.
3
©2014SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Acknowledgements
Materialforthisarticlewastakenfromthefollowingsources:
IntroducingHystrixforResilienceEngineering,Netflix;November26,2012.
ChaosMonkey,GitHub;February27,2014.
IntroducingChaosEngineering,Netflix;September10,2014.
XenProjectdisclosesseriousvulnerabilitythatimpactsvirtualizedservers,ComputerWorld;October2,
2014.
Seriousaboutthecloud?FollowNetflix’sleadandgetintochaosengineering,TechRepublic;October3,
2014.
HowNetflixsurvivedtheAmazonEC2reboot,PCWorld;October3,2014.
ThreelessonsfromNetflixonhowtoliveinthecloud,InfoWorld;October9,2014.
4
©2014SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com