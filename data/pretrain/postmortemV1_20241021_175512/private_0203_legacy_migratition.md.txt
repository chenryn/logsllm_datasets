Migrating Legacy Systems:
Gateways, Interfaces, & the Incremental Approach
March2007
In their book, Migrating Legacy Systems: Gateways, Interfaces, & the Incremental Approach,
Michael Brodie and Michael Stonebraker explore the quagmire of migrating legacy systems to
modern architectures. They demonstrate through examples and case studies that many legacy
migrations fail or are never completed after considerable time and expense have been
committed. They argue that this is caused by the urge to do a “big-bang” cutover. Instead, they
describe an incremental approach to migration that allows a legacy system to be migrated to a
modern architecture in small, controllable steps. They call their approach “Chicken Little” as
opposedtothebig-bang“ColdTurkey”approach.
What does legacy migration have to do with continuous processing architectures? The answer is
another question: “How do I get to there from here?” For instance, how do I migrate my current
legacysystemtoanactive/activesystem?1
There are still many legacy applications that provide mission-critical services but are burdened
with the inflexibility, high cost, and brittleness that is characteristic of such systems. If we want to
move such a system to, say, an active/active architecture, is it as simple as replicating its
database to a like system?Generallynot. The legacysystem must, in general, be migrated to an
architecture in which its database is decomposable from its applications. This is not a simple
processandiswhatthisbookisallabout.2,3
What is a Legacy System?
Legacy systems are any systems that cannot be modified to adapt to constantly changing
business requirements. They often use aged languages and file systems that tie the user
interfaces, the application logic, and the databases into an unbreakable monolith. They typically
are poorly, if at all, documented and are maintained by an aging staff thatknows them intimately.
Their maintenance is expensive, and they are quite brittle in that they tend to break easily
whenevermodified.
Consequently,legacysystemsarenotveryadeptatadaptingtochangingbusinessrequirements.
Many were built before the concept of layered systems, in which presentation, application, and
databaselayersareseparatedbycleaninterfaces.
1
See our companion article in this issue, Migrating Your Application to Active/Active, The Availability Digest; March,
2007.
2Brodie,M.L.,Stonebraker,M.,MigratingLegacySystems:Gateways,Interfaces,&theIncrementalApproach,Morgan
KaufmannPublishers,Inc.;1995.
3OurthankstoHarryScottofCarrScottSoftwareforpointingustothisbook.
1
©2007SombersAssociates,Inc.,andW.H.Highleyman

Over the decades, legacy systems often
systems
had layered appendages attached in
order to provide new functionality. New
user devices were attached via interface users
layers that translated between the legacy systems
interface requirements and those of the interfaces
new devices. New applications were users
systems
implemented that accessed the legacy
data by imitating legacy user devices. interfaces
Thus, these legacy systems became a users application
modules
hybridoflegacyandmodernsystems.
nonseparableinterfacesandapplications
In many cases, it has become imperative andthedatabaseservice
to phase out these legacy systems and
replace them with modern architectures data
HybridLegacySystem
that support the rapidly-changing bases
business conditions of today. However,
this migration from old to new has proven to be very difficult; and many, if not most, legacy
migrationsareneverfinished.
Chicken Little versus Cold Turkey
Themigration of a legacysystem could involve hundreds of millions of lines of code, terabytes of
data, and millions of customers. It must be done with no downtime as these systems are often
fulfilling 24x7 mission-critical functions. Michael Brodie and Michael Stonebraker liken these
migrationstotryingtooverhaulanairplanewhileitisinflight.
Another serious problem is that the legacy database and the target database to which it is being
migrated must maintain transaction integrity even though the legacy database probably cannot
participateinglobaltransactions.
In their book, the authors describe a formal methodology for migrating from legacy systems to
modernarchitectures.Theycouplethiswithcasestudiesofactualmigrations.
Their technique emphasizes incremental migration. They dub this the Chicken Little approach as
opposedtotheColdTurkeyapproach.
The Cold Turkey approach is the common approach to take. The legacy system is such a black
box to the current development team that it seems that the only alternative is to completely
rewrite the system and cut over to the new system on one fateful day. However, experience has
shown that this approach is very likely to fail after years of development effort and millions of
dollarsinvested.
TheintentoftheChickenLittleapproachistocompartmentalizethemigrationeffortsothatonlya
small amount of functionality is migrated at a time. In the event that a migration increment fails,
one can return to the previous system configuration, correct the problem, and try again. In this
way, as the business continues to reengineer itself, the migration effort and the partially
completed target system can be more easily modified to support newly required business
functionsastheyoccur.
Gateways
Thebasicmigrationphilosophyistodecomposethelegacysystem asmuchaspossible(ifatall),
and then to construct gateways that allow the remaining legacy components to cooperate with
theirmodernreplacements(thetargetcomponents)asthemigrationproceeds.Atanygivenpoint
2
©2007SombersAssociates,Inc.,andW.H.Highleyman

in the process, any given user request mayneed the services of either or both
of the legacy and the target applications and may need to access data from
either or both of the legacy and target databases. This cooperation is provided gateway
bygateways,whichareattheheartoftheChickenLittletechnique.
It may be decided not to migrate certain legacy functions due to cost,
complexity, risk, or importance. If this is the case, some gateways mayremain
legacy target
inthefinishedtargetsystem. function function
Somegatewaysarecommerciallyavailable,butgatewaysaresoapplication-dependentthateven
commercially-availablegateways needsignificantmodification.Inmanycases,gatewaysmustbe
written in their entirety. The effort of decomposing the legacy system into migratable elements
and the effort required to implement and maintain the gateways can be perceived to be daunting
efforts.However,theauthorspointoutthatwithoutthiseffort,themigrationislikelytofail.
ComparisonofChickenLittleandColdTurkey
The authors’ comparison of the Chicken Little and Cold Turkey approaches is given in the
followingtable:
ColdTurkey ChickenLittle
Risk Huge Controllable
Failure Entireprojectfails Onlyonestepfails
Benefits Immediate,probablyshort-lived Incrementalovertime
Outlook Unpredictableuntildeadline Optimistic
Decomposability
A key consideration in legacy migration is to what extent can the legacy system be decomposed
into the presentation, application, and database layers. The complexity of the migration is
controlledbythestructureofthelegacysystem.
The decomposability of the system defines the migration approach and greatly affects the
complexity of the migration. The more decomposable the system is, the easier will be the
migration.
systems systems systems
users users users
interfaces interfaces nonseparableinterfacesandapplications
andthedatabaseservice
nonseparableinterfacesandapplications data
andthedatabaseservice bases
application
modules
data data
bases bases
decomposable semidecomposable nondecomposable
A decomposable system is one in which the presentation, application, and data layers can be
easilyseparated.(Thepresentationlayeriscalledthe“interface”intheauthor’sdiagrams.)
A semidecomposable system is one in which the presentation layer can be separated, but the
applicationanddatalayersarecloselyentwined.
3
©2007SombersAssociates,Inc.,andW.H.Highleyman

Anondecomposablesystemisoneinwhichthesystemcannotbepartitionedinanyway.
Gateways
Itis thegatewaythatisthekeytotheChickenLittlemigrationprocess.Thefunctionofagateway
isthreefold:
 Itinsulatescertaincomponentsfromchangesmadetoothercomponents.
 Ittranslatesrequestsandresponsesbetweenthecomponentswhichitserves.
 Itguaranteesconsistencyofdatainlegacyandtargetdatabasecopies.
Gateways are complex. The implementation of a gateway is a major project in itself as it must
understand the nuances of both the legacy interfaces and the target interfaces so that it can
translate accurately between the two. Furthermore, as the migration proceeds, the functions
requiredofagatewaychangesothatitmustbecontinuallymaintained.
GatewayDirection
Therearetwodirectionsthatagatewaymightserve.Aforwardgatewaytransfersrequestsfroma
legacy component to a target component. A reverse gateway transfers requests from a target
componenttoalegacycomponent.
legacy forward target target reverse legacy
applications gateway data applications gateway data
bases bases
GatewayTypes
Likewise,thereareseveraltypesofgateways.
 A database gateway transfers requests from an application to a database as shown
above.
 Anapplicationgatewaytransfersrequestsfromapresentationinterfacetoanapplication.
 Aninterfacegatewaytransfersrequestsfromuserstoapresentationinterface.
Typically, a single gateway will present a legacy or target interface to the component which it is
servicing, as appropriate. It will route requests to legacy and target components as needed,
based on application logic contained in the gateway. It will format responses to meet the
expectationsofthecomponentwhichitisservicing.
Thus, a sourcecomponent (whether it be legacyor target) is unaware of what kind of component
(legacy, target, or a combination) is servicing its request. It is insulated from changes in the
servicing components as they migrate from legacy to target and sees only the defined target
interface.
4
©2007SombersAssociates,Inc.,andW.H.Highleyman

Migration Gateway Configurations
The use of gateways depends upon the level of decomposability exhibited by the legacy
application.
Decomposable
In a decomposable legacy system, each of the layers can be isolated. Therefore, every layer can
be migrated individually, independently of the other layers. Gateways provide isolation of the
layers and hide the source of servicing, whether it be legacy or target, from the components
requestingservice.
The users interface with an interface gateway. systems systems
This gateway provides the interface which the
legacy target
users expect and can route requests to either the users users users users
legacyinterfaceorthetargetinterfaceasrequired. interface interface
gateway gateway
The interfaces connect to the applications via
application gateways. An application gateway can
route requests to either a target application or a
legacy target
legacy application. In some cases, the request interfaces interfaces
may have to be broken up into subrequests that
application application
areroutedtoeach. gateway gateway
As the migration proceeds, data sets will migrate
from the legacy databases to the target legacy target
applications applications
databases. A particular request may need to
access data items resident in both databases.
Therefore, the legacy and target applications use
database database
database gateways, which will take a request in gateway gateway
legacy or target format as applicable and access
thedatawhereveritresides.
legacy target
data decomposablesystem data
Semidecomposable bases bases
systems systems A semidecomposable legacy system is one
in which the presentation layer can be
users users cleanly separated from the applications.
legacy target However, the applications and databases
interfaces interfaces
are still closely entwined. Therefore, they
cannotbeseparatedandmustbetreatedas
application application
gateway gateway amonolithicwhole.
For migration purposes, application
gateways are used to route user requests
nonseparableinterfacesandapplications appt la icrg ae tit ons from legacy and target interfaces to the
andthedatabaseservice appropriate legacy or target applications as
required to satisfy the request. Responses
legacy
data target returned to the gateways are reformatted to
bases data
bases suittheissuinginterface.
semidecomposablesystem
5
©2007SombersAssociates,Inc.,andW.H.Highleyman

Nondecomposable
Theinterface,application,anddatabase systems systems
functionsinanondecomposablelegacysystem
legacy target
aresocloselyentwinedthattheycannotbe users users users users
separated.Therefore,thelegacysystemmust
interface interface
betreatedasamonolithicwholethroughout gateway gateway
theentiremigration.Aninterfacegateway
routesrequestsfromlegacyusersandtarget
userstotheappropriatelegacyortarget
system.Ifarequestneedstoaccess
nonseparableinterfacesandapplications target
applicationfunctionsinboththelegacyand andthedatabaseservice interfaces
targetsystemstoordertobesatisfied,the
gatewayisresponsibleforbreakingtherequest le dg aa tc ay appt la icrg ae tit ons
intosubrequests,submittingthemtothe bases
appropriatesystem,andthencombiningthe
target
responsesintoanappropriateresponseforthe data
nondecomposablesystem bases
legacyortargetuser.
Hybrid
Of course, in general, any particular legacy system will comprise a range of nondecomposable,
semidecomposable, and decomposable functions. As the system has been modified over the
years, it is likely that newer functions have been implemented to be more and more
decomposable.
Inthissituation,theappropriatecombinationoftheabovetechniquesmaybeusedtoperform the
migration.
Migration Steps
The Chicken Little migration strategy utilizes an eleven-step process.
Though these steps may be different for different levels of
decomposition, they follow basically the same pattern. In their book,
Brodie and Stonebraker go into great detail concerning what is to be
1 3 4 5 6
performedineachstepasafunctionofthelevelofdecomposability.
The steps apply to each increment of migration and in general are as
2
follows:
1. Incrementallyanalyzethelegacysystem.
2. Incrementallydecomposethelegacysystemstructure.
3. Incrementallydesignthetargetinterfaces.
4. Incrementallydesignthetargetapplications.
5. Incrementallydesignthetargetdatabase.
8 9 10 7
6. Incrementallyinstallthetargetenvironment.
7. Incrementallycreateandinstallnecessarygateways.
8. Incrementallymigratethelegacydatabase.
9. Incrementallymigratethelegacyapplications.
10. Incrementallymigratethelegacyinterfaces.
11
11. Incrementallycutovertothetargetsystem.
6
©2007SombersAssociates,Inc.,andW.H.Highleyman

Case Studies
Brodie and Stonebraker detail as case studies two legacy migrations in which they were heavily
involved. One migration was for a major global telephone company. This legacy system
comprisedhundredsofmillionsoflinesofcodeandterabytesofdata.Theothermigrationwasfor
alargecashmanagementsystem.
Interestingly, neither of these migrations was completed. The global telephone company
migration project was terminated when it became apparent that further business process
reengineeringwasneeded.Thecashmanagementsystemmigrationprojectwas terminatedafter
one year due to a merger in which the new management had a broader information services
mandate.However,theChickenLittleprocess,whichwasusedinbothinstances,wasdeemedto
beasuccessfortheportionsoftheprojectsthatwerecompleted.
7
©2007SombersAssociates,Inc.,andW.H.Highleyman
