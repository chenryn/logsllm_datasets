solidDB – A Five-9s Memory-Resident Database
May2008
Disk-based database systems are on a collision course with Moore’s Law.1 New multicore
processors can support massive amounts of memory. The databases for many real-time
applications can now comfortably fit in these large, high-speed memories. solidDB, from Solid
InformationTechnology(www.soliddb.com),is amemory-residentdatabasethattakes advantage
ofthisnewreality.2
Sowhynotsimplyconfigureasystem withenoughcachememorytoholdthedatabase?This will
certainly eliminate most disk activity and will provide very fast database access. However, the
database structures that are optimum for disk-resident databases are far from optimum for
memory-resident databases. Therefore, a database specifically structured for memory residence
canhaveasignificantperformanceimprovementoveradisk-residentdatabase.
There is one problem, however. If the intent is to eliminate disk activity, what happens to the
“durable” in ACID?3 solidDB solves this dilemma through efficient disk logging or by providing a
synchronized in-memory copy of the database in another server. In the latter case, should the
primarydatabase fail, the secondary database can take over with a complete, up-to-date copy of
thedatabaseintensofmilliseconds.
What is solidDB?
solidDB, is a memory-resident SQL database that is extremely fast.. It is multithreaded so that it
can take advantage of multicore processors. Performance tests have shown linearly-scalable
on-disk replication on-disk
database database
read-only
transactions transactions
replication
in-memory in-memory
database database
application application
server server
primary standby
solidDB
1http://en.wikipedia.org/wiki/Moore%27s_law
2InFebruary2008,SolidInformationTechnologywasacquiredbyIBM.
3TheACIDproperties of atransactional databaseareatomicity(eitherall operations inatransactionarecompletedor
none are), consistency (the database is always left in a legal state by a transaction), isolation (the operations in a
transaction are independent of those in other transactions), and durability (the outcome of a transaction will persist
throughanysubsequentfailuresofthedatabase).
1
©2008SombersAssociates,Inc.,andW.H.Highleyman

transactionprocessingratesofthousandsoftransactionspersecondpercore.
solidDB is also highly reliable. Properly configured, it can achieve availabilities in excess of five
9s. It accomplishes this via the strategy espoused in our active/active system descriptions - “let it
fail, but fix it fast.” solidDB can be run as a tightly synchronized active/standby pair. Should the
active copy of the database fail, the standby copy can take over in tens of milliseconds with no
lossofdata.Evensessions,preparedSQLstatements,andsessionattributesaremaintained.
solidDB is highly flexible in terms of trading availability for performance according to an
application’s needs. The degree of transaction protection can be adjusted over a range from total
synchronization for full data protection to asynchronous synchronization for maximum
performance.Thelessdataprotectionthatischoosen,thegreatertheperformance.
solidDB is well-suited for applications whose databases can fit entirely in memory. However, it
can also provide a disk-resident database for tables that are too large for memory or that are
seldom accessed, such as archive tables. Beyond establishing the configuration, the location of
tablesistotallytransparenttotheprogrammer.
solidDB has a small footprint, requiring only three megabytes of memory. Used in many
embeddedsystems,itrequiresnomanualadministration.
Applications
Hundreds of customers have deployed over 3,000,000 instances of solidDB around the world. It
is especially used in telecommunications applications for embedded systems but has also found
applicationinretail,finance,healthcare,andotherenterpriseapplications.
In the telecommunications industry, solidDB is used to support home-location registers (HLRs)
that track a cell-phone user’s location and that maintain the services to which he is entitled. It is
alsousedextensivelyinVoIP(VoiceoverIP)andinServiceControlPoints(SCPs).
In some applications, it is used to synchronize the databases of mobile devices with a central
master database. These applications are characterized by the fact that the mobile device is not
permanently connected to the master database. Rather, when it does connect, it must exchange
updates with the master database in order to synchronize the in-memory mobile database with
themasterdatabase.
The solidDB Transactional Interface
SQLStandardSupport
solidDBisatransaction-orientedrelationaldatabase.Bothitsin-memorydatabaseanditson-disk
database comply with the SQL-92 standard. solidDB also provides numerous features of the
SQL-99 and SQL-2003 standards. Feature support includes stored procedures, triggers, events,
encryption,anduserandrolesecurity.solidDBincorporatesacost-basedoptimizer.
DataaccessisprovidedeitherbyODBCorJDBCstatements.
Linking
solidDB can be incorporated into an application as a linked library with application programming
interfaces implemented as C-language calls. This type of linkage eliminates the overhead of
Interprocess messaging that would be suffered if solidDB were run as a separate process.When
running at the transaction processing speeds of in-memory solidDB, processing overheads such
asthoseimposedbyinterprocessmessagingbecomesignificant.
2
©2008SombersAssociates,Inc.,andW.H.Highleyman

ConcurrencyOptions
Severallevelsofconcurrencycontrolareprovided.Read-concurrencyoptionsinclude:
 Uncommitted Reads – Also known as “dirty reads,” a row that is being modified by a
transactioncanbereadbyotherapplications.
 Repeatable Reads – If a transaction reads a row, it will always get the same data on
subsequentreadsofthatrow.
 ReadCommitted–Onlytheresultsofcommittedtransactionsareavailabletoberead.
 Serializable – Once a transaction reads a row, no other transaction may modify that row
untiltheoriginaltransactionhasbeencommitted.
Write-concurrencyoptionsinclude:
 Pessimistic Row-Level Locking – Before modifying a row, the row is locked so that no
other transaction can modify that row (nor read it if Read Committed concurrency is
configured).
 Optimistic Row-Level Locking – This is used if it is unlikely that two transactions will be
attempting to simultaneously update the same row. The row is not locked by a
transaction prior to updating it. Rather, it is versioned. If a concurrencyviolation does not
occur, the overhead of locking is avoided. If a concurrency violation does occur, the
transactionsareabortedandmustberetried.
Recovery
solidDB is a classic transaction-oriented relational database. The results of all committed
transactionsarecarriedinatransactionlog.
As described later, there arevarious availabilityoptions thataffectthecurrencyof thetransaction
log. They provide compromises between availability, recovery time, and performance. However,
should the system crash, either because it is a single system without a backup or because of a
dual primary/backup failure, the database can be recovered by rolling forward those completed
transactions that have made it to the transaction log. If strict logging is being used (i.e., each
transaction is written to the transaction log before the transaction is committed), no completed
transactionswillbelost.
Configurations
solidDBcanbeconfiguredtomeetavarietyofapplicationneeds.
SingleSystem
solidDB can be run in a single server without a backup. To ensure durability, updates to the
transaction log can be written to disk as each transaction completes. Furthermore, the entire in-
memory database can be periodically checkpointed, with the checkpointing interval specified in
timeorinthenumberofupdates.
If performance is more important than durability in an application, transaction log updates can be
buffered and written to disk periodically. This improves performance because a disk write is not
needed for each transaction. However, should the system crash, all transactions whose log
entrieshavenotbeenwrittentodiskarelost.
3
©2008SombersAssociates,Inc.,andW.H.Highleyman

Primary/Standby
solidDB can be run in a primary/standbyconfiguration on two servers. All updates must be made
to the primary database. These updates are replicated to the standby database in such a way
thatthestandbydatabaseisalways inaconsistentstate.Thestandbydatabasecanthereforebe
usedbyread-onlyapplications.solidDBcanprovideautomaticloadbalancinginthisconfiguration
byroutingreadrequeststotheleastloadedsystem.
Should the primary database fail, the secondary database is available to immediately take over
operations. Because of this, asynchronous disk logging can be used on both the primary and
standby servers without the risk of losing any transactions in the event of a single failure. This
furtherimprovesperformance.
Master/Replica
A database can be configured to be the master database in a master/replica configuration. All
updates must be made to the master database. This database can then be replicated via
asynchronous replication to one or more replica databases, all of which may be used in a read-
only mode. To ensure durability, the master database can also be backed up with a standby
databasethatiskeptsynchronizedbysynchronousreplication.
Replicas can be instantiated on-the-fly to accommodate load variations or changing locality
requirementsinthefield.
Multimaster/Multitier
The target of solidDB’s replication can be a full mirror of the primary system, or it can hold a
subset of the primary’s database. For instance, a master database might be replicated in part to
severalreplicastodistributedatatotheusers.Thisisoftenthecaseinmobileapplications.
A database can hold copies of many primary databases. In this way, a database can act as a
standbyfortwoormoreprimarydatabases.
In addition, multiple primary databases might replicate to each other. As an example, two
systems running independent applications might replicate their databases to each other. In this
way, each system acts as a backup for the other system while at the same time being used
activelyforitsownapplications.
Replication
In-memory and on-disk database copies are kept synchronized by data replication from the
primary (or master) database to the standby database or its replicates. solidDB provides two
replicationmechanisms–synchronousreplicationandasynchronousreplication.
SynchronousReplication
Synchronous replication provides carrier-grade high availability. With synchronous replication, a
