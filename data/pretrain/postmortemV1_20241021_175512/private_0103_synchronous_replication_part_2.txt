applicationlatencyimposedbynetworktransactionsforthisexample.
Of course, if the nodes are closely located, such as in a campus environment, network
transactionsmaybemoreefficientthancoordinatedcommits.
One advantage of the coordinated commit technique is that it need not be invasive. It uses a
standard asynchronous replication engine decoupled from the application until commit time. It
must then intercept the commit and go through the “readyto commit” sequence prior to releasing
the application’s commit. The only affect on the application is a delay equal to the application
latencyinreceivingitscommitconfirmation.
Another advantage of coordinated commits is communication efficiency. With network
transactions, each update results in one or more messages sent across the network. Under
heavy transaction loads, this can impose large loads on the network, not to mention the valuable
4
©2006SombersAssociates,Inc.,andW.H.Highleyman

interrupt time required to process each message. Because asynchronous replication is used,
coordinated commits can buffer messages into large blocks, thus significantly reducing network
trafficandthecorrespondinginterruptprocessingload.
DistributedLockManagement
Distributed lock management (DLM) is a synchronous replication technique that is a cross
between network transactions and coordinated commits. When a transaction is started, DLM
begins a transaction on all database copies. As each update is received, DLM first reaches
across the network to obtain a lock on the data item to be updated. Only if it is successful in
acquiring the lock is the update released. Therefore, locks are held on all data items across the
networkbeforethosedataitemsareupdated.
The actual update data is sent to the target systems via asynchronous replication so that the
propagation of the data updates across the network is transparent to the transaction. Likewise,
when the application commits the transaction, the commit can be immediately replicated to the
targetdatabasesbecauseDLMknowsthatitisholdingallrequiredlocks.
application
1.begin
2.update
3.commit
2a.requestlock
disk disk
driver driver
2b.grantlock
2c.update
3a.commit
data change data
async.replication
base queue base
2d.update
3b.commit
DistributedLockManagement
Distributed lock management has substantially the same application latency characteristics as
network transactions since each update requires a network round-trip time to acquire a lock.
Therefore, it is just as sensitive to communication latency as are network transactions. However,
like coordinated commits, DLM makes more efficient use when propagating data to the target
systemssinceitusesasynchronousreplicationforthispurpose.
Distributed lock management can, in principle, be implemented with no application modifications.
However, as a general rule, the database drivers (or database management system) must
supportdistributedlocks,asdescribedabove.
Synchronous Replication Issues
Though synchronous replication solves the problems inherent with asynchronous replication, it
comes with its own set of problems. Problems peculiar to synchronous replication include
application latency, as described above, network deadlocks, application invasiveness (in some
cases),nodefailures,andthecurrentlackofproductsupport.
5
©2006SombersAssociates,Inc.,andW.H.Highleyman

ApplicationLatency
All synchronous replication techniques delay the completion of a transaction due to having to
apply the transaction across the application network to all database copies. This delay is known
asapplicationlatency,anditaffectstheresponsetimeofapplications.2
As described above, network transactions and distributed lock management are sensitive to
communication latency, while coordinated commits are sensitive to replication latency. As a
general rule, network transactions and distributed lock management will be more efficient if the
nodes are reasonably close together and if transactions are small. Coordinated commits will be
moreefficientforgeographicallydispersednodesorforlargetransactions.
In addition, because individual messages need not be generated for each update, coordinated
commitswillimposelessofaloadonthecommunicationchannel.
NetworkDeadlocks
Synchronous replication can result in deadlocks across the network. There are two kinds of
deadlocksthatcanoccur.
The first type of deadlock is common to all applications, whether monolithic or distributed. This
type of deadlock occurs if data items are locked in different sequences. One application locks
data item A and then tries to lock data item B. However, a different application has locked data
itemBfirstandistryingtoacquirealockondataitemA.Neitherapplicationcanproceed.
The correct solution to this problem is to define an intelligent locking protocol that specifies the
order in which locks are acquired so that all applications lock all data items in the same order.
Otherwise, one or both applications must back off and retry at random times so that one will be
successful.Theotherapplicationwillthenwaituntilthefirstapplicationhasreleaseditslocks.
The second type of deadlock is peculiar to distributed systems such as active/active systems.
Even if an intelligent protocol is used, it is possible that two applications in different nodes may
lock the same data item in their local database copies without knowing that this data item has
beensimultaneouslylockedinanotherdatabasecopy.Asaconsequence,neitherapplicationcan
acquirethelockonthisdataitemintheothersystem;andadeadlockoccurs.
This problem is even more pronounced if coordinated commits are used since the asynchronous
replicationofupdatesdelaystheattempttolocktheremotedataitembyareplicationlatencytime
(ratherthanjustacommunicationlatencytime).Thisadditionallocklatencyincreasesthewindow
oftimethatcompetinglockscanbeacquiredondifferentnodes.
The correct solution to this deadlock condition is to define a global mutex. In order to update a
data item, a lock must be acquired on a data item in a designated master node before the
application can proceed. Coupled with an intelligent locking protocol, this will assure that there
will be no deadlocks. Short of this, one or both of the applications will have to back off and try
againatarandomtimelater.
2
Note that application latency does not affect the throughput of the system. While an application is waiting for a
transaction to commit, it is not using any system resources. For instance, in amultiserver system, one need only start
additionalserverprocessestomaintainthroughput.
6
©2006SombersAssociates,Inc.,andW.H.Highleyman

ApplicationInvasiveness
Application invasiveness is the requirement to modify the application to support synchronous
replication. All synchronous replication techniques can be noninvasive if appropriate intercept
libraries are provided to perform the synchronous replication functions. Short of that, the use of
network transactions will require that the applications be modified to include all database copies
inthescopeofatransaction.
Distributed lock management can be noninvasive if the database manager supports distributed
locks. Otherwise, the applications have to be modified to acquire locks on a data item before it is
senttothereplicationengine.
Coordinatedcommitsingeneralprovideanoninvasivesolution.
NodeFailures
Provision must be made to exclude a downed node from the scope of a transaction. Otherwise,
alltransactionswillbeaborted;andtheactive/activenetworkisdown.
Furthermore, there must be procedures for bringing a failed node back online. This means
synchronizingitsdatabasewiththeotherdatabasecopiesinthenetwork andthenreintroducingit
intothenetworkbyhavingallnodesbegintoincludeitinfurthertransactions.
Thismayrequirespecialfacilitiestobebuiltforapplicationsusingnetworktransactions.However,
sinceasynchronousreplicationisusedtopropagateupdatesifcoordinatedcommitsordistributed
lock management is used, these replication engines can queue changes for the downed node.
Whenthatnode is returned toservice,allthatneeds tobedone is todrain thereplicationqueues
to that node to bring it into synchronization. The node can then be returned to synchronous
service.
ProductSupport
As of this writing, as opposed to the plethora of products available for asynchronous replication,
there is not much in the way of off-the-shelf product support for synchronous replication.
However, efforts are underway to provide a coordinated commit product;3 and there may be
databasemanagersthatsupportdistributedlocks.
As a consequence, most synchronous replication implementations today use specially-
implemented versions of network transactions. These typically are limited to those systems in
which the nodes are collocated (see the article My SQL Clusters Go Active/Active in this issue of
theAvailabilityDigest).
Synchronousreplicationisinsuchdemandthatitisatechniquesuretobecommonlyavailablein
thenearfutureasanoff-the-shelfproduct.
Summary
Synchronous replication solves the asynchronous replication problems of data collisions, data
lossfollowinganodefailure,andfairness.
3Holenstein,B.D.,etal.;CollisionAvoidanceinBidirectionalDatabaseReplication,UnitedStatesPatent
6,662,196;December9,2003.
7
©2006SombersAssociates,Inc.,andW.H.Highleyman

However, it imposes its own problems, including application latency, network deadlocks,
application invasiveness in some cases, and the handling of node failures and recovery. In
addition,productsupportisjustbeginningtobecomeavailable.
However, if data collisions are intolerable, and if the active/active system cannot be configured to
avoid datacollisions,synchronous replicationis theonlychoiceif anactive/active configuration is
tobeused.Likewise,ifdatalossisunacceptable,synchronousreplicationcanpreventthis.There
maybe other solutions to enforce fairness, but synchronous replication is a good solution for this
problemaswell.
The demand for synchronous replication in active/active systems is currently sufficient to
guaranteetheavailabilityofproductstosupportthisfeatureinthenearfuture.
8
©2006SombersAssociates,Inc.,andW.H.Highleyman

