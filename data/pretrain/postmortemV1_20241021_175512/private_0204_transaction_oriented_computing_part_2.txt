befromdifferentvendors.
 Start/restartfollowingafailuretobringalldatabasestoaconsistentstate.
TheTransactionLog
The transaction log is the heart of the recovery mechanism for transactional computing. It is a
persistent log of the before and after images of any changes made to a row or a record in the
database. Before the changes to a row or record are physically written to the database, the
transaction log recording those changes must be written to persistent storage. The actual
database changes can be written at some time later. Until that time, they exist only in non-
persistentcachememory.
The transaction log also records begin, commit, and abort operations associated with each
transaction. All transaction log records carry a transaction ID which is used to tie together all of
therecordspertainingtoasingletransaction.
4
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

To be persistent, the transaction log is usually written to a redundant disk system that is different
than the database disk system.This allows it to survive should the database system fail, become
corrupted,orbedestroyed.
TheLogManager
It is important to maintain the transaction log for a long period of time so that a damaged
databasecanberestored.Therefore,atransactionlogcangrowwithoutbound.
Managing this growth is the responsibility of the Log Manager. The transaction log is typically
implemented as a set of files. When one file fills, the Log Manager closes it. The next file is
purged and used for the next set of transaction logs. At this time, the oldest transaction log file is
rolledofftotapeandmadereadytobecomethenexttransactionlogfile.
Insomesystems,multipletransactionlogsmaybeusedtoimproveperformance.
ResourceManagers
A transaction may span multiple independent databases. The database management system for
each database is considered a Resource Manager. (There may also be other Resource
Managers – anyentitythat canbe affectedbyatransaction is a Resource Manager.) Adatabase
Resource Manager receives begin/end transaction commands from the Transaction Manager,
describednext,andI/Ooperationssuchasreads,writes,anddeletesfromtheapplication.
The Resource Manager maintains the transaction log for the database’s rows or records that are
affectedbyatransaction.
TheTransactionManager
The Transaction Manager provides the “A,” ”C,” and “D” of the ACID properties (that is, the
atomicity, consistency, and durability properties). It receives transaction begin and end
commands from the application and communicates these to the various Resource Managers in
thesystem.The“I”ofACIDisprovidedbythelockingmechanisms.
When the Transaction Manager
receives a begin transaction command, application
it sends that with a transaction ID to all
involved Resource Managers. It also
starttx
returns the transaction ID to the i/ooperations
endtx
application. Each Resource Manager
will optionally write a begin transaction
record to the transaction log (some begin resource data
transaction
Transaction Managers do not do this readyto manager base
manager
and rely instead on the first I/O commit?
operation to signal the beginning of a commit/abort
transaction).
recovery trans.
log
As the application issues I/O operations
under this transaction, the before and
after images for each operation are tagged with the transaction ID before writing them to the
transaction log. The application may switch between concurrent transactions by switching
transactionIDs,buteachoperationmustbeassociatedwithitsowntransaction.
Whentheapplicationissuesanendtransactioncommand,theTransactionManagerdoessowith
atwo-phasecommit.Duringthefirstphase,itasksallResourceManagersiftheyarepreparedto
5
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

commit the transaction. A Resource Manager may not be able to complete the transaction, for
instance, if it could not obtain a necessary lock, if it suffered a disk error, or if the changes would
violate its referential integrity. If it can commit its part of the transaction, it ensures that its
transactionloghasbeenwrittentodiskandrepliesaffirmativelytotheprepare-to-commitquery.If
itcannotcommititspartofthetransaction,itrepliesnegatively.
The second phase of the protocol depends upon the responses generated by the Resource
Managers during the first phase. If all Resource Managers replied affirmatively, the Transaction
Manager informs all Resource Managers to commit the transaction. If any of the Resource
Managers replied negatively, the Transaction Manager instructs all Resource Managers to abort
the transaction. In either event, the Transaction Manager informs the application as to the
outcomeofthetransaction.
Recovery
Should there be a system failure of any sort that would damage the database, the Transaction
Manager is responsible for repairing the database. It does this by using the before and after
imagesofthetransactionlog.
Startingatanappropriatepointinthelog,theTransactionManagersearchesfortransactionsthat
have committed and for transactions that have not completed. A transaction may have been
committed in the transaction log, but the actual database changes may not have been written to
disk iftheywerestillresidentincachememoryatthetimeofthefailure.Usingtheafterimagesin
thetransaction log,theTransaction Manager ensures thatallchanges for committedtransactions
havebeenmadetothephysicaldatabase.
Conversely,somechanges tothephysicaldatabasemayhavebeenmadebeforethetransaction
couldcommitorabort.Inthesecases,theTransactionManagerusesthebeforeimagestoreturn
thedatabasetoitsstatebeforethetransactionbegan.
Theresultofthisprocessisthatthedatabaseisreturnedtoitslastknownconsistentstate.
Anotheruseoftherecoverymechanismistorecoveraccidentallydeletedfilesortables.
Performance
Aside benefitof transactionalprocessing is performance.Thetransaction logis writtenseriallyto
disk and is therefore veryfast and efficient.Writing the transaction log is muchfaster than writing
random changestothedatabase.Theserandom writescanbedeferreduntilafter thetransaction
has completed. Therefore, transaction completions are very much faster under a transaction
monitor than they are with nontransactional updates and result in faster response times to the
users.3
Inlargesystems,transactionlogflushingisoftendelayedafewmillisecondstoattempttowriteto
disk asmanyblocks aspossibleatonetime.Afewmilliseconds delaymaybesmallcomparedto
the reduction in transaction response time obtained via the use of a log file instead of random
updates. This technique also results in a reduced load on the disk subsystem. In fact, with this
technique,thebusierthesystembecomes,themoreefficientitbecomes.
3
This was not always the case and was one of the impediments to early acceptance of transaction processing. In an
early Stratus manual, the user was warned not to use transactions unless absolutely necessary due to performance
issues.
6
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

Replication
Andnowthegoodpart.Extremeavailabilitiesareachievedbyhavingaredundantsystem upand
ready to take over processing in an instant’s notice. Whether this is done by using a backup
systemoranactive/activeconfiguration,theproductiondatabaseisreplicatedtoaremotesystem
viadatareplication.
A data replication engine depends upon a queue of changes that it can send to the remote
system.Thetransactionlogisanidealqueueofchangesforthispurpose.
Many data replication engines use the transaction log as the source of changes to be replicated
toaremotesite.4
Distributed Transactions
In many cases, the multiple databases involved in a transaction are not resident on the same
system. They may be distributed across many systems using database offerings from many
vendors.Transactionswillbeexecutedinahighlyheterogeneousenvironment.
To accomplish this, each of the diverse Resource Managers must comply with a specified
interface so that the Transaction Manager on any one of the systems can communicate with
them. Typically, the Transaction Manager on the system hosting the application which originated
the transaction is the transaction coordinator for that transaction. Its Transaction Manager
communicateswiththeResourceManagersacrossthenetworktobeginatransaction.
Whentheapplicationsignals the end of thetransaction,the transactioncoordinator’s Transaction
Manager uses the two-phase commit protocol described earlier to complete the transaction. It
asks all Resource Managers across the network if they are ready to commit the transaction. If all
are ready, the transaction is committed. If one or more Resource Managers cannot commit the
transaction,thetransactionisaborted.
The standard interface between the Transaction Managers and the Resource Managers is
spelled out in the XA specification5 from The Open Group, an industry consortium. Most
commercialandopendatabasestodaysupporttheXAstandard.
Summary
Transaction-oriented processing is now an established technology that guarantees database
consistency and durability. It has progressed to the point that it even has the potential to improve
transactionresponsetime.
From an availability viewpoint, the transaction log maintained by the transaction processing
system often is used by data replication engines to maintain a remote database in synchronism
withtheprimaryactivedatabaseforfastrecoveryfollowingasystemfailure.
4
See Flexible Availability Options with GoldenGate’s Transactional Data Management Platform (TDM), Availability
Digest,February,2007,andShadowbase–TheActive/ActiveSolution,AvailabilityDigest,March,2007.
5
DistributedTP:TheXASpecification,TheOpenGroup;1992(http://www.opengroup.org/bookstore/catalog/c193.htm).
7
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

