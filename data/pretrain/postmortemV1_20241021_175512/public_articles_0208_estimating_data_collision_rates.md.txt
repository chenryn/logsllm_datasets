Estimating Data Collision Rates
August2007
Asynchronous Replication and Data Collisions
Active/active systems relyin large part on bidirectional asynchronous data replication to keep the
databasecopiesintheapplicationnetworksynchronized.
With asynchronous replication, changes to the database are logged in a Change Queue of some
sort. This Change Queue can be, for instance, the transaction log maintained by a transaction
monitor, a log of changes maintained by the application, or a log of changes built via database
triggers. As changes are entered into the Change Queue at the source system, they are
subsequently sent to one or more target systems, where they are applied to the target’s
database.
There is necessarily a time delay between when a change is posted to the source database and
when it is applied to the target database. This time delay is called replication latency. During this
time, data collisions may occur if bidirectional replication is being used (as it will be in an
active/activesystem).
A data collision occurs when the same record or row is changed at two different systems within
thereplicationlatencytime.Neithersystemisyetawarethattheothersystemismakingachange
tothatrecordorrow.Theupdatedrecordorrowisreplicatedbyeachsystemtotheothersystem,
where it overwrites the original change made by that system. The result is that the record or row
isdifferentineachsystem,andbotharewrong.
There are several techniques that one may find applicable for avoiding or for automatically
resolving data collisions. Many of these are covered in our earlier article, Collision Detection and
Resolution, April, 2007. If data collisions cannot be avoided or automatically resolved, they must
beresolvedmanually.
Manual resolution can be a time consuming task. It is therefore often desirable to be able to
estimatewhatthedatacollisionratefor anapplication willbebeforeenteringinto anactive/active
project.Inthisarticle,wederiveasimpleequationfordoingjustthatanddiscusstheproper ways
touseit.
Thisresultwas originallypublishedbyJim Gray,1andthisarticlereliesheavilyuponhis work with
someextensions.
1
Gray,J.;etal.;“TheDangersofReplicationandaSolution,”ACMSIGMOD96,pp.173-182;June,1996.
1
©2007SombersAssociates,Inc.,andW.H.Highleyman

The Result
For those readers who do not wish to dig through the mathematics of this derivation, we present
theresultfirst.Itis
(d-1)u2
collisionspersecond= L
d D
where
d isthenumberofdatabasecopiesintheapplicationnetwork.
u isthetotalsystemroworrecordupdaterate(updates/second).
D isthesizeofthedatabaseintermsofrowsorrecords.
L isthereplicationlatencytime(seconds).
Note that the collision rate increases as the square of the database update rate, u. It increases
linearly with replication latency, L, and decreases with the database size, D. It is a monotonically
increasing function of the number of database copies, d, in the application network, starting at
zero for one database copy (d = 1) since there are no collisions if there is onlya single database
copyandasymptoticallyapproachingoneasthenumberofdatabasecopiesincreases.
The Model
The active/active architecture which we will analyze comprises an application network of k
processing nodes and ddatabase copies (for instance,six processingnodes with three database
copies). It makes no difference whether the database copies are directlyattached to some of the
processing nodes, are configured as network attached storage (NAS), are geographically
distributeddatabasesinastorageareanetwork(SAN),orareanycombinationofthese.
processing
node
r r
data
base
copy
r replication r
data data
processing processing
base base
node node
r copy copy r
kprocessingnodes
ddatabasecopies
AnActive/ActiveApplicationNetwork
Thedatabasecomprisesaseriesoffilesand/ortables containingatotalof Drows orrecordsthat
are subject to updating. Each database copy in the application network contains a copy of all of
thesefiles and tables.It is initiallyassumedthatupdateactivityis uniformlydistributed across the
entire database. The analysis is extended later to cover the case of nonuniform update
distributionand“hotspots.”
2
©2007SombersAssociates,Inc.,andW.H.Highleyman

Each of the k nodes is assigned to a specific database copy. Each node generates r updates per
second and applies these updates to its assigned database copy. These updates are then
replicatedasynchronouslytotheotherd-1databasecopiesintheapplicationnetwork,wherethey
are applied after a time delay equal to the replication latency, L. It is assumed that the system is
balanced so that each database copy is fed by an equal number of nodes (i.e., there are k/d
processingnodesassignedtoeachdatabasecopy).
Based on the above, the system update rate is the number of processing nodes multiplied bythe
nodalupdaterate.Thatis,u=kr.
The Analysis
ConsideradatabasecopyA.Itisbeingupdatedbyk/dnodes.Eachnodeisgeneratingrupdates
per second.Thus,databasecopyAis beingupdated atarateof kr/dupdates per second.During
areplicationtime,L,databasecopyAwillreceivekrL/dupdates:
k
primaryupdatesto adatabasecopyduring areplicationinterval rL
d
Duringthesamereplication latencyinterval,thenumber of updates beingmadetotheother (d-1)
databasecopiesintheapplicationnetworkis:
k
updatesmadetotheotherdatabasecopiesduring areplicationinterval(d1) rL
d
Theupdates madetothedatabasecopies are distributedover the entire databaseof D rows and
records. The probability that a specific update made to database copy A will collide with another
update made to one of the other database copies during the replication interval is equal to the
number of updates made to the other database copies during this interval divided by the size of
thedatabase:
probabilitythataspecificupdatetodatabaseAwillcollidewith an update
(d1)k
madeatanotherdatabasecopy= rL
D d
Since database copy A has made krL/d updates during the replication latency interval L, the
numberofcollisionsinotherdatabasecopiescausedbydatabaseAupdatesis
k (d1)k  (d1)k 2
numberofcollisionscreated byupdates todatabasecopyA  rL rL    rL
d  D d  D d 
Database copy A is just one of d nodes that is making updates. Therefore, the total number of
collisionsintheapplicationnetworkis
(d1)k 2 (d1) 1
numberofcollisionsin theapplication network d  rL  (krL)2
D d  d D
This is the number of collisions that will be generated during the replication latency time L.
DividingthisbyLgivesusthecollisionrate:
1(d1) 1 (d1) 1
collisionrate intheapplicationnetwork  (krL)2  (kr)2L
L d D d D
3
©2007SombersAssociates,Inc.,andW.H.Highleyman

As noted earlier, the term kr is the system update rate u. This relationship can therefore be
writtenas
(d1)u2
collisionrateintheapplicationnetwork  L
d D
Examples
Let us consider an application network with three database copies supporting a network-wide
updaterateof100updatespersecondtoadatabasecontaining10,000,000rows and/orrecords.
Let us also assume a replication latencytime of 0.5 seconds. The network-wide collision rate will
be
2(100)2
collisionrate  0.5.00033 collisions/second=1.2collisions/hour
3 107
If there were only two database copies in the application network, the collision rate would be 0.9
collisionsperhour.
For three database copies, if the update rate were to increase to 1,000 updates per second, the
collision rate would increase to 120 collisions per hour, or two per minute. Carrying this further, if
the database size were only one million records or rows, the collision rate would be 1,200
collisionsperhour,oroneeverythreeseconds.
Hot Spots
We have assumed in this analysis that all updates may cause collisions and that collisions are
evenlydistributedacrosstheentiredatabase.However,natureisnotgenerallysokind.Thereare
severalcaseswherecaremustbetakeninchoosingtheparameterswhichwehaveused.
File/TableHotSpots
It is quite likely that some files or tables will be updated much more frequently than others and
thereforewillcontributeadisproportionatesharetodatacollisions.Itisthereforewisetocalculate
the data collision rate individually for each file and table. This affects the choice of values for the
update rate, u, and for the file or table size, D. The update rate should be the rate at which the
specific file or table is updated; and the database size, D, should be the number of records or
rowsinthatfileortable.
DormantRowsorRecords
Some files or tables may contain records or rows that are unlikely to be updated, whereas the
otherrecordsorrowsmaybeactivelyupdated.For instance,inageneralledger file,accountsfor
the current month may be frequently updated; whereas accounts for previous months exist for
reportingandauditpurposesonlyandmaybeinfrequentlyupdated,ifatall.
In such a case, the file or table size D should reflect just that portion of the file or table which will
beactivelyupdated.
NotallActionsCollide
It is quite possible that not all update actions will cause collisions. Inserts probably will not cause
collisions.Applicationdependenciesmaymakecertainkindsofupdatesrelativelycollision-free.
4
©2007SombersAssociates,Inc.,andW.H.Highleyman

For instance, transactions against a nonreloadable gift card will probably not cause collisions
sincethere is onlyonegiftcard.Therecannotbe(at leastlegally) morethan one transaction ata
timeinprogressforthatcard.
In this case, the file or table update rate, u, should only reflect those updates that can create
collisions.
Summary
Data collisions are an important and undesirable byproduct of bidirectional asynchronous
replication. They should be thoroughly understood and analyzed before venturing into an
active/active system implemented with asynchronous replication, especially if automatic collision
resolutionisnotpossibleforasetofcollisionsthatcanhappenatahighrate.
Using our previous example, if manual resolution is required, one collision per hour may well be
acceptable. Two collisions per minute would certainly keep a team of people busy. If there is
going to be a collision every three seconds, automatic collision resolution would probably be a
requirement.
Though synchronous replication will avoid data collisions, an equivalent mechanism will create
network deadlocks instead due to lock latency, the synchronous equivalent of asynchronous
replicationlatency.ThisisRule32ofBreakingtheAvailabilityBarrier:2
Locklatencydeadlocksundersynchronousreplicationbecomecollisionsunder
asynchronousreplication.
Chapter 9 of that volume, Data Conflict Rates, delves much more deeply into this topic. It
analyzes data collisions during asynchronous replication and network deadlocks during
synchronous replication. A variety of replication engine architectures are studied, including those
that broadcast updates as soon as they are applied to the source database (our model in the
above analysis),thosethat broadcast updates onlyfollowinga successfulcommit,and thosethat
sendupdatesseriallytothedatabasecopiesratherthanbybroadcast.
2
W. H. Highleyman, P. J. Holenstein, B. D. Holenstein, Breaking the Availability Barrier: Survivable Systems for
EnterpriseComputing,AuthorHouse; 2004.
5
©2007SombersAssociates,Inc.,andW.H.Highleyman
