Asymmetric Active/Active at Banco de Credito
November2007
Banco de Credito e Inversiones (Bci) (www.bci.cl) is the third largest bank in Chile
andserves10%ofChile’spopulationof16,000,000people.Itoffersvariousfinancial
services, including personal, commercial, and corporate banking. Bci finances foreign trade and
offers financial support for Latin American banks. It has 243 offices in Chile and has a presence
in Peru, Mexico, Hong Kong, and the U.S. It also has
several subsidiaries that provide services such as fixed
income, financial trading, fund management, risk
protection advice, international factoring, and recovery
ofbaddebt.
Having introduced NonStop systems in 1993, Bci has
been a technological pioneer in the Chilean banking
industry.
The Challenge
Bci had chosen NonStop servers to run a critical
proprietary checking account system developed in
Cobol85 and imbedded SQL/MP. Bci had initially
implemented its system with a pair of NonStop
S76006s (each being a six-processor system). One
system ran as the active system and the other as the
standbysystemtwokilometersaway.
However, it became apparent that having a passive
standbysystemwasnotinthebestinterestsofthebankforseveralreasons:
 Maintaining an idle standby system did not maximize the value of the bank’s IT
investment.
 Over 300 batch processes had to be run every day. The batch processing requirements
had grown as thebank had grown tothe point that bank personnel had to work overtime.
This violated a new human resources policy at the bank. If the standby system could be
puttowork,allprocessingcouldbecompletedduringnormalbusinesshours.
 Moving to an active/active configuration would allow the bank to be compliant with new
government regulations promulgated by the SBIF (loosely translated, the Superintendent
ofBanksandFinancialInstitutions,Chile’scentralbank).
 The separation of the standby site, only two kilometers away, was not considered a
sufficientdistanceforman-madeornaturaldisastertolerances.Adistanceofatleast100
1
©2007SombersAssociates,Inc.,andW.H.Highleyman

kilometers was needed. After all, the largest earthquake in recorded history, a massive
9.5ontheRichterscale,occurredinChile.
Therefore, it was decided to reconfigure the bank’s two systems into an active/active architecture
sothatbothcouldbeactivelyprocessingonlinetransactionsduringthebusinessday.1
The Options
Thebankconsideredfouralternativearchitecturesbeforemakingachoice.
Option1:Active/Passive
Thisisthearchitecturewithwhichthebank
started.
Option2:PartitionedApplication
application application application application
Withthisarchitecture,bothsystemshavea
complete copy of the database, and the A A' A B
application is running on both systems.
Option1: B' A'
However, the database is partitioned so Active/Passive
that the two instances of the application, Option2:
one running in each system, can be PartitionedApplication
processing transactions simultaneously
without data collisions. One of the
application instances processes
transactions against the data in one of the
partitions, and the other processes
transactionsagainsttheotherpartition. application writes application application application
Aschangesaremadetoonepartition,they
A A' A A
are replicated to the copy of that partition
on the other system. Therefore, both Option3: Option4:
systemshaveacompleteandcurrentcopy AsymmetricActive/Active Active/Active
of the database and consequently have access to all of the data in the database for query
purposes.Therecanbeno datacollisions,as thereis no wayfor bothapplication instances to be
processingthesamedataitemduetothedatabasepartitioning.
Option3:AsymmetricActive/Active
In an asymmetric active/active configuration, one system is the master, or principal, system; and
the other system is the slave system. Both systems have a copy of the current application
database.
All transactions that require database modification are routed to the master system, where they
are processed and the database updated. All updates made bythe master system are replicated
to the database copy on the slave system so that both systems maintain a current copy. This
allows either system to process any transaction that requires read-only access to the database.
Since many applications are read-intensive (typically 80% read and 20% write in OLTP
applications),thisallowstheprocessingloadtobedistributedevenlyacrossthenodes.
1ThematerialforthisarticlewastakenfromapresentationgivenbyJuanPabloNahuelAlvarado,BciSystemArchitect,
entitled“AnAsymmetricalActive/ActiveImplementationatBci,”givenatthe2007HPTFconferenceinLasVegas.
2
©2007SombersAssociates,Inc.,andW.H.Highleyman

Routing of write transactions to the master node can be done by intelligent routers, an intelligent
front-end system, or by the applications themselves. Since only the master system can update a
dataitem,therecanbenodatacollisions.
Option4:Active/Active
In a full active/active configuration, any system in the application network can process any
transaction against its copy of the application database. Any changes that it makes to its
databasecopyarereplicatedtotheotherdatabasecopiesinthenetwork.
In this configuration, all nodes are equal. If asynchronous replication is used, there may be data
collisions caused by two systems trying to update the same row at the same time. If they can
occur,datacollisionsmustbedetectedandresolved.2
The Choice
Option1, an active/standbyconfiguration, was alreadyimplementedand was not aviable choice.
The bank decided not to follow Option 2, application partitioning, since its applications were
complex and the data highly interdependent. This prevented any consideration of partitioning the
databaseandthereforeprecludedthischoice.
Likewise, Option 4, a fully active/active configuration, was ruled out. It was felt that the
complexities of bidirectional replication and data collisions would require special application
managementfacilitiesinordertobalancetheaccounts.
The bank’s choice was Option 3, asymmetric active/active. This configuration allowed it to go
active/active with a minimum of application changes. However, Bci sees this as an intermediate
steptowardachievingfullactive/activeprocessingasitgainsexperienceinthisarena.
The System
SystemArchitecture
In Bci’s asymmetric active/active
configuration, one of its NonStop
read/write
systems acts as the read/write, or transactions
master, node and the other as the
Sun Sun
read-only, or slave, node. In the (Tuxedo) (Tuxedo)
future, additional read-only slave load
balancing
nodes may be added to provide a
scale-up of processing capacity. All
write transactions are forwarded to
Tuxedo Tuxedo
the master node for processing, NonStop NonStop
read/write readonly
whereas a read-only transaction node node
canbeprocessedbyeithernode. router router
(Opsol) (Opsol)
writetransactions
ThetwoNonStopsystemsarefront-
ended by a pair of Sun systems for unidirectional
replication
transaction routing. The routing of
transactions is done intelligently by application bd aa sta e GoldenGate bd aa sta e application
the Sun systems so as to maintain read/ read
a balanced load on both systems. write only
However, the Sun systems cannot journal GoldenGate journal
distinguish between write
bidirectional
replication
2CollisionDetectionandResolution,AvailabilityDigest;April,2007.
3
©2007SombersAssociates,Inc.,andW.H.Highleyman

transactionsandreadtransactions.Therefore,theydistributealltransactionsamongtheNonStop
nodesevenly.
Tuxedo is used to move transactions from the Sun systems to the NonStop systems. There they
are passed to the intelligent RTFS router, provided by Opsol Integrators (www.opsol.com), that
can distinguish write transactions from read-only transactions. The Opsol router in the master
nodetakesnoaction.Itpassesalltransactionstoitscopyoftheapplicationforprocessing.
However, the router in the slave node will not pass write transactions to its application copy.
Rather, it sends these transactions to the application copy on the master node. Read-only
transactionsaresent,however,toitslocalapplicationcopy.
The application copy in the master node processes all write transactions, thus updating its copy
of the database. These updates are replicated to the slave’s database copy to keep it in
synchronism with the master database copy. Each node processes against its local database
copyanyread-onlytransactionsthathavebeenroutedtoit.
The application maintains an application journal that tracks all of its processing activities. Each
application copy maintains its own journal. All entries in either journal are replicated via
bidirectional replication to the journal on the other system. In this way, both nodes have a
complete copy of the application journal. Since all updates to the journals are inserts only, there
canbenocollisions.
Bci uses GoldenGate’s data replication engine (www.goldengate.com) for both the unidirectional
replicationoftheapplicationdatabaseandthebidirectionalreplicationoftheapplicationjournal.
FailoverProcedures
Thereareseveralfailuremodestoconsiderinthisasymmetricactive/activeconfiguration.
SlaveNodeFailure
Shouldaslavenodeoritsattacheddatabasefail,thesystemsimplycontinuesunaffected(except
foritsavailablecapacity).TheSunroutersnowroutealltransactionstothemasternode.
The master node, which had been processing write and read transactions, continues to do so
with no impact on the users except perhaps for slower response times due to the increased load
whichitiscarrying.
Prior to returning the slave node to service, its database must be resynchronized with the
master’s database either by draining the queue of updates that had accumulated during the
outageorbycopyingthemasterdatabasetotheslavedatabase.
MasterNodeFailure
Should the master node fail, the slave node must be promoted to master. It will now handle all
transactions–bothreadandwrite.
Whenthefailedsystem is returnedtoservice,its databasemustfirstbesynchronized withthatof
the new master as described above. At this point, operation in asymmetric active/active mode
may continue uninterrupted with the old slave node now acting as master. Alternatively, the role
ofthemasterandslavemayberevertedtotheoriginalconfiguration.
4
©2007SombersAssociates,Inc.,andW.H.Highleyman

CommunicationFailure
A communication failure can occur in several ways. It can isolate one of the systems so that it is
not receiving any transactions. In that case, the isolated system should be taken out of service
untilcommunicationisrestored.Thesurvivingsystemcarriesonasmaster.
Acommunicationfailure could prevent the slavefrom sending writetransactions tothe master.In
thiscase,theslavemustbetakenoutofserviceandalltransactionsroutedtothemaster.
Acommunicationfailurecould also interruptreplication.Inthis case,theslavecould betakenout
of service; or in some applications it could perhaps continue as a query node, albeit with a
databasethatwillbecomemoreout-of-datewithtime.
In any case, the database copy of the system being restored must be resynchronized with the
onlinedatabasebeforethatsystemcanbereturnedtoservice.
The Implementation
ProofofConcept
Bci wisely divided this complex project into two distinct phases. One was a proof-of-concept
phase,inwhichittestedthearchitectureandthevariouscomponentsthathadtobedevelopedto
supportthenewsystem.Testingincluded:
 therouterintegrationintotheBcitransactionalenvironment.
 router failure modes, including manual and automatic failover, and the change in the
system’spersonality(fromslavetomaster,ortomasterwithnoslave).
 the backup recovery process under all failure modes such as system, database, and
communicationchannelfailures.
 databasesynchronizationusingtheGoldenGatedatareplicationengines.
 automaticreactionsofthesystemtoallpossibilitiesofsimulatedfailures.
Asitturnedout,onlyminimalchangestotheapplicationwererequired.
Fromthestarttotheend,Bciaccomplishedtheproof-of-conceptintwomonths.
ProjectImplementation
With the proof-of-concept experience behind them, and with a closely knitted team of Bci
employees and thosefrom HP,Opsol, andGoldenGate,thesystem went live in justfour months.
This included all program modifications to accommodate the routing mechanisms and the
database replication issues, the creation of automated scripts, and thorough testing of all failure
conditions.
The system then underwent extensive testing and certification. This included tests of all failure
conditions and the verification of all automatic scripts. Certification of the system took an
additionaltwomonthsbeforethesystemwentoperational.
Recommendations
As a result of its successful experience, Bci recommends the following to any organization
wantingtofollowinitsfootsteps:
 Isolatetheworkingteamfromnormalday-to-dayoperations.Itshouldbe100%dedicated
tothetaskofbuildingthenewsystem.
5
©2007SombersAssociates,Inc.,andW.H.Highleyman

 Provideacommonwork spacefor thedevelopmentteam sothattheycanhavecontinual
face-to-facecontact.
 Createandmaintainadetailedprojectplanthatfocusesonprojectdeliverydates.
 Performintensiveloadandstresstestingonthesystembeforeputtingitintoservice.
 Bci developed the SQL queries using SYSKEY. However, for today’s fast processors,
SYSKEY values across the network might not be the same for a query or unique across
queries (they are based on time calculations). This parameter must be managed inside
theapplicationtoensureitsuniquenessanditsconsistencyacrossthenodes.
Summary
This implementation by Bci shows the viability of migrating an existing complex application to an
active/active environment. Such a move can provide improved utilization of systems, vastly
improvedapplicationavailability,andrapid(almostinstant)failover.
As seen here, the first step is in clearly understanding the application. Bci considered several
options for active/active configurations and was guided to an appropriate architecture by its
knowledge of its own application. Also of immense importance was its detailed understanding of
active/activearchitecturesandissues.
Interestingly, we have written much on the use of asymmetric active/active configurations to
offload extensive query processing to slave nodes.3 This case studyshows another powerful use
of this architecture – migrating an application that would require significant modification to move
to a full symmetric active/active configuration. In Bci’s case, it avoided the need for significant
applicationmodificationbymovingtoanasymmetricconfiguration.
3P.J.Holenstein,B.D.Holenstein,W.H.Highleyman,Chapter14,BenefitsofMultipleNodesinPractice,Breakingthe
AvailabilityBarrierIII:Active/ActiveSystemsinPractice,AuthorHouse;2007.
6
©2007SombersAssociates,Inc.,andW.H.Highleyman
|---|--|
| 0 |  |
| 1 |  |