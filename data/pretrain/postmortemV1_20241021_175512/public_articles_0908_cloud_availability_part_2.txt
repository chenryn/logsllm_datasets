Figure4: ADataReplicationEngineintheCloud
For data transfer from an external system into the cloud, the Applier is configured in a VM. It receives
updates via its external IP address from the Extractor resident in the external system and sends these
updatestoapplicationsviatheirinternalIPaddressesorappliestheseupdatesdirectlyintothedatabases
storedintheNASorSAN.
Multiple instances of the data replication engine can be configured to support multiple external systems.
Thus, by configuring replication engine components inside VMs running in the cloud, replication engines
cantransferdataineitherdirectionbetweenthecloudandexternalsystems.
Data Replication In-The-Cloud Use Cases
Therearemanyways that adatareplication enginecanbeusedtoenable businesses totakeadvantage
of thebenefits of thecloud while avoidingsomeof the issues discussed earlier. Mostof these techniques
exploit the replication engine’s ability to keep cloud applications and data synchronized with external
systems, thereby enabling businesses to shift noncritical functions to the cloud while maintaining critical
orsensitivefunctionsinthecompany’sinternalsystems(i.e.,inahybridcloudarchitecture).
In the following examples, the critical systems could be HP NonStop servers; they are the pinnacle of
massively parallel, continuously available systems and are typically used for the most demanding IT
5
©2014SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

businessservices.Alternatively,theycouldbeanyofthemanyotherplatformanddatabasetypesusedin
data processing applications. Potential uses of data replication engines to add resiliency to cloud
applicationsaredisplayedinFigure5.
Figure5:ReplicationUseCases
6
©2014SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

CriticalSystemastheMasterDatabase
In this example the critical system is used as the master database with a replicated copy kept locally by
all cloud applications (Figure 5a). This configuration can operate in two modes depending on the
applicationarchitecture.
In the first mode, all updates are made to the critical system master database. The replication engine
replicates these updates to local copies of the database in the cloud, so the cloud applications have
access to the latest data and can perform fast, local, read operations on that data. This configuration is
particularly useful for applications that have a high look-to-book ratio. For instance, a travel agency
system spends a lot of time searching for deals and answering queries about hotel, plane, and car
reservations.Thesesearches arereadoperations and canall be executedquicklyagainstthecloud local
replicatedcopiesofthemasterdatabase.Onlywhenareservationistobemadeisitnecessarytoupdate
themasterdatabase.
In the second mode, update operations are made by applications to the cloud local database(s).The
replication engine replicates these updates to the critical system master database, applies them, and can
re-replicate these changes back to any other cloud-based copies of the data. In this way, the master
database is kept current and comprises all updates made by applications anywhere in the cloud. It is the
single,complete,databaseofrecord.
CriticalSystemasaBackupDatabase
Anothersolutiontoprotectcriticaldatainthecloudistoprovidebackupfacilitiesoutsideofthecloud.The
replication engine can be used to make periodic (or continuous, streaming) backups of data that is being
applied to a cloud-resident database (Figure 5b). The backup database can then be used to recover and
restoredataintheeventthattheclouddatabasesarelostorbecomecorrupted.
CloudBursting
Cloud bursting entails sending some of the transaction load to the cloud if the critical system becomes
heavily loaded. If the critical system begins to grow heavily loaded, then it can send low-value
transactions to the cloud applications for processing. High-value transactions can continue to be
processed by the critical server. Replication technology supports cloud bursting architectures (Figure 5c)
by replicating database changes between the cloud and critical system databases, thereby ensuring that
applicationsrunningineitherenvironmentareoperatingonthesame,current,andconsistentdata.
DistributedCloudApplicationIntegration
Some applications may be distributed between both the cloud and critical systems (or between clouds).
When an event is generated by one application, it needs to be propagated to another application for
further processing. The travel agency application is a good example. When a reservation is to be made,
the cloud based “look” application may raise an event to cause the critical system “book” application to
actually make the reservation. Some replication architectures (Figure 5d) provide mechanisms to detect
such application events when they are raised and send them to target applications (or databases) to be
acted upon. In this way, replication technology provides the event detection and distribution fabric
between distributed applications, enabling applications running in the cloud to be integrated with other
applicationsrunningeitherinthecloudoroncriticalsystems.
CloudIntegrationforHigh/ContinuousAvailabilityaswellasApplicationInteroperability
Figure 5e shows the replication engine integrating one cloud environment with another for providing high
or continuous application availability. Insomecases,thecloud operators mayprovidesufficientcapability
to provide these business continuity services, but their offerings may not be sufficient, complete, or able
toworkheterogeneously.Theysimplymaybetooexpensive.Forthesecases,thedatareplicationengine
can replicate the data from one cloud environment uni-directionally into another (for example to
7
©2014SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

implement a highly available disaster recovery cloud-based architecture), as well as bi-directionally
between two cloud environments (e.g., to implement a continuously available active/active business
continuitycloud-basedarchitecture).
In another similar example, the major clouds todayare proprietary and cannot work together. However, a
replication engine can be used to connect VMs and their applications in one cloud with those of another
heterogeneous cloud. In this case (Figure 5e), the VMs in the different clouds are communicating with
eachother.
Thisarchitectureallows applicationstobespreadamongmultipleclouds andstillinteroperate.Infact,the
same application can be running in multiple clouds in an active/active mode. If one cloud fails, then all
transactions are simplyroutedtothe surviving cloud, and the application users areunaffected.Moreover,
if the shift in transaction workload is significant, the surviving cloud will automatically assign additional
resources to the application to maintain the application’s performance levels. The replication software is
able to handle the necessary data reformatting between heterogeneous cloud-resident databases and
applications.
Shadowbase Data Replication Software – Integrates Applications with the Cloud
The Shadowbase replication engine is designed to integrate diverse applications and databases. Its
application to the cloud is simply an extension of the multiple source and target environments that it
alreadysupports.
A large, cloud-based application may comprise many different systems with different missions. Each
system is implemented on a “best-fit” platform. There may be a myriad of heterogeneous platforms,
applications,anddatabasesthatmakeuptheapplication.Addtothismixtheapplicationcomponentsthat
reside in one or more clouds. A powerful, flexible, fast, and reliable data distribution fabric is required to
interconnectthesesystems.TheShadowbasedatareplicationenginefulfillsthisrole.
Data must be passed from external information sources to the cloud applications and between the
systems and cloud applications themselves. Data transfer must be secure and Shadowbase software
supports encrypting the communication traffic, for example via SSL connections. Data transfer must be
very fast, with high capacity and minimum latency. The Shadowbase engine’s process-to-process
architecture eliminates disk-queuing points that can slow down replication and otherwise consume
extensive disk resources. Sub-second replication latency is achieved. The replication engine can be
multithreaded, including the communication channels, so that any desired data transfer capacity can be
attained.
In some cases, the data is being generated by an application. In other cases, it is being taken from a
database. The data must be delivered to a target application or to a target database. The Shadowbase
engine supports heterogeneity. It can receive data as it is generated from any supported application or
databaseandcandeliverittoanysupportedapplicationordatabase,insideoroutsidethecloud.
Replication between diverse applications and databases often requires complex reformatting and
restructuring of the data. Shadowbase software includes provisions for many types of reformatting. If it
does not inherently support a specific type of reformatting, it provides user exits so the user can define
extendedreformattingalgorithms.
The Shadowbase engine can replicate data synchronously or asynchronously. Asynchronous replication
takes place after the fact and has no impact on the source application. Synchronous replication
guarantees that anupdateis either madeto boththesourceandtargetenvironments or thatitis madeto
neither. Both synchronous and asynchronous replication guarantee the transactional consistency of the
targetdatabaseandthatthetargetdatabaseisavailableforapplicationprocessingduringreplication.
Shadowbase software is architected for continuous availability. If one of its components fails, it is
automatically restarted and replication continues uninterrupted. If the target environment fails, then the
8
©2014SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Shadowbasereplicationenginequeuesalleventsuntilthetargetenvironmentisrestoredtoservice.Itwill
then drain its queue of saved events to bring the target environment back into synchronization with the
datasourceandresumereplication.
The data distribution fabric within a complex cloud environment and between the cloud and external
systems must be low latency and provide high capacity. It must be fundamentally heterogeneous and be
able to deal with any application or database as a source or as a target. It must be able to reformat and
restructure data on the fly as it moves data from one source to another totally different target. It must be
highlyreliable.
Allof theseareattributes of Shadowbasereplication:lowlatency, highcapacity, heterogeneous,powerful
message processing, flexible end points, and high availability. Integrating heterogeneous data resources
is a formidable challenge, and one that has been solved byShadowbase software, which is positioned to
formtheidealfoundationforthedatadistributionfabricforcloudcomputing,public,private,orhybrid.
Summary
Tremendous incentives exist for organizations to move to cloud computing, since there are few initial
expenditures and hiring new staff is not necessary. However, the track record for clouds is still spotty.
Major cloudfailures routinelymaketheheadlines,andsecurityis an issue.Thus,executives arereluctant
totrusttheircriticalapplicationsanddatatothecloud.
The Shadowbase data replication engine is an example of a tool which can alleviate many of these
concerns. It serves as the glue that binds a company’s critical applications and data to trusted corporate
internal systems while allowing the cloud to perform less critical functions, for which the cloud is well-
suited. With Shadowbase software solutions, an optimum compromise of application safety versus cost
can be achieved, enabling businesses to take advantage of the benefits of the cloud while avoiding the
pitfalls.
9
©2014SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com
