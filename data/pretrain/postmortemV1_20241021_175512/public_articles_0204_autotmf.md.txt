Virtual Transactions with NonStop AutoTMF
April2007
In previous articles, we have discussed various ways to keep database copies in an active/active
application network synchronized. A frequently used method to accomplish this is data
replication.1 Data replication engines require a log of database changes that they can use to
replicate changes from a source database to a target database. Transaction monitors generate
transactionlogsthatareidealforthispurpose.
Transactional applications benefit from many other advantages as well, including guaranteed
databaseconsistency,higherperformance,andthecapabilitytorecoverlostorcorrupteddata.2
However,manyolderapplicationswerewrittenasnontransactionalapplicationsandcannotshare
in these benefits. NonStop AutoTMF bridges this gap for applications written for HP NonStop
servers.Itseamlesslyconvertsnontransactionalapplicationstotransactionalapplications.
What is a Transaction?
Simplystated,atransactionisagroupofoperationsthataresocloselyrelatedthateitherallmust
beperformedornonemustbeperformed.Indataprocessingapplications,weconcernourselves
withdatabaseandfileoperationssinceotherfunctionssuchasprintingorsendingmessages
cannotberevokedoncetheyhavebeenexecuted.
In an application program, the operations comprising a transaction are bounded by a begin
statement of some sort and an end statement. If the end statement is successfully reached, the
transaction is committed. That is, it is made permanently to disk and will not be lost even should
the system fail (short of a physical destruction of the storage device). If the end statement is not
reached due to some sort of error, the transaction is aborted; and the effects of all previous
operationswithinthetransactionarereversed.3
Why Transactions?
Transactions ensure that the database is always consistent. This is because no partial set of
relatedoperationsareeverexecuted.
The database changes within the scope of a transaction do not really need to be physically
written to disk to ensure that they are durable. It is only necessary to record enough information
on disk so that the changes can be reconstructed, if necessary. This significantly improves
applicationperformance.
1
AsynchronousReplicationEngines,AvailabilityDigest;November,2006.
SynchronousReplication,AvailabilityDigest;December,2006.
2SeeourarticleinthisissueentitledTransaction-OrientedComputing.
3
Seethebookreview,TransactionProcessing:ConceptsandTechniques,inthisissueoftheAvailabilityDigest.
1
©2007SombersAssociates,Inc.,andW.H.Highleyman

In many transaction management systems, such as HP’s NonStop TMF, change recording is
accomplished by maintaining a log of all changes (the audit trail in NonStop’s case). This
transaction log typically contains before and after images of each record whose changes have
been committed. It improves application performance because only the serial log has to be
written,nottheindividualrandomdatachangeswhichcanbeappliedlater.
The transaction log can be used to recover lost or corrupted transactions and ensures the
durabilityofthedatabase.
Furthermore, the transaction log becomes the source of changes to be replicated to other
systemsfordisastertoleranceoractive/activepurposes.
Nontransactional Applications
If transaction-oriented computing provides so many benefits, whyare there applications currently
inoperationthatarenontransactional?Therearemanyreasons:
 Some applications were developed before the advent of transaction management
facilities.
 Some applications were developed after this time but before significant performance
problemsweresolved.4
 Some later applications were developed without transaction protection because of a
misunderstandingoftransactionprocessingtechnologyandbenefits.
Sufficeittosay,thereisalargebodyofnontransactionalapplications,currentlydeployedinthe
field,thatcouldbenefitiftheycouldbemadetransactional.
NonStop AutoTMF
MovingnontransactionalapplicationstotransactionalistheroleofNonStopAutoTMF.AutoTMF
wasdevelopedbyCarrScottSoftwareandismarketedandsupportedworldwidebyHPas
NonStopAutoTMF.
AutoTMF watches all disk activity for selected programs so that it can automatically generate
transactions that group related disk activity. When AutoTMF detects the beginning of a business
transaction, it will insert a begin transaction command in the I/O stream being sent to the
operating system. Later, when it detects that the transaction is complete, it will insert an end
transactioncommandtocommitthetransaction.
It will create transactions only for database operations on audited files. It ignores operations on
nonauditedfiles,passingthesethroughdirectlytotheoperatingsystemforexecution.
SomeapplicationsarenotcandidatesforAutoTMF.Forinstance,applicationsthatbypassnormal
operatingsystemfunctionsbyrunninginprivilegedmodecannotbeservicedbyAutoTMF.
4
InanearlyStratusmanual,userswerewarnedaboutusingtransactionsbecauseofperformanceproblemsunlessthe
reasonstodosowerecompelling.
2
©2007SombersAssociates,Inc.,andW.H.Highleyman

InterceptLibrary
AutoTMF is implemented as an intercept library that is bound to the application program at
compile time. It comes in the form as a user library for non-Integrity systems and as a DLL for
Integrity systems. It makes no changes to the program source code and is therefore totally non-
invasivetotheprogram.
The AutoTMF library intercepts all I/O
state
calls totheoperatingsystem sothatit
can decide on transaction bound-
begin/end
aries. It passes on any I/O operations
transaction
that are not pertinent, such as
commands
operations on nonaudited files and
communicationcalls. AutoTMF i/ooperations operating
application
library system
It monitors the other I/O calls to i/oerrors
maintain a transaction state for the
application. This state contains such
information as the number of open
files and the number of locked configu-
records. It uses this state to help it ration
determine when to generate a begin
transactionorendtransactioncommand.Onceatransactionisstarted,alldiskI/Otoauditedfiles
isincludedwithinthescopeofthattransaction.
AutoTMF will never abort one of its automatic transactions as this would undo an I/O operation
that the application intended to execute. In addition, it intercepts all operations, including traps
and other exceptions that could terminate the process to ensure that all transactions are
committed.
Configuration
AutoTMFhasnumerousconfigurationparametersthatcanbesettocontrolitsbehavior.Itcanbe
configured to create automatic transactions for all files and programs or for just specified files or
programs.Forinstance,logfilesareusuallynotauditedbecauseiftheapplicationabendedorthe
system crashed any uncommitted log records would be backed out and lost. However, one can
configure AutoTMF to use a separate transaction for log files and to immediately commit log
writes.
The maximum number of updates prior to a commit can be specified as well as the maximum
amount of time since the last begin transaction command. Should either of these limits be
reached, AutoTMF will automatically commit the transaction. These parameters are especially
usefultoaddtransactioncapabilitytobatchprocessingprograms.
The level of isolation can be set. The impact of this parameter is described later under Options.
Thelevelofisolationisusedtorefineeventsthatwillgenerateacommitofthetransaction.
StartingaTransaction
Ifthereisnocurrenttransactioninprogress,AutoTMFwillstartanewtransactiononanyoneofa
numberofeventsthatsignalsthatdatabaseactivityisabouttobegin.Forinstance,theseinclude:
 Alockforafileorarecordisrequested(suchasareadwithlock).
 Awrite(insert),update,ordeletecommandisexecuted.
3
©2007SombersAssociates,Inc.,andW.H.Highleyman

CommittingaTransaction
The logic that evaluates I/O events to determine when an open automatic transaction is to be
committed is the heart of AutoTMF.5 This logic is driven by the transaction state table as each
new I/O operation is analyzed. Events and states that will cause a transaction commit to be
generatedinclude:
 Anunlockoperationthatreleasesthelastlockbeingheldisexecuted.
 Thelastopenfileisclosed.
 Themaximumupdatecounthasbeenreached.
 Themaximumtimesincethebegincommandhasbeenreached.
 The process replies to a message (presumably a reply to the request that was just
processed).
 Areadon$RECEIVEisissued(presumablylookingforthenextrequest).
 Theprocessterminates.
AutoTMFextendedtoOSSapplications
AutoTMFalsonowsupportsautomaticTMFtransactionprotectionforOpenSystemServices
(OSS)programsdevelopedinC,COBOL,andJava™classesthatusetheJEnscribe
EnscribeFileclassonHPIntegrityNonStopservers.
Options
AutoTMFhasseveraloptionalmodesthatcanbeinvoked.
SeparateTransactions
Normally,onceatransactionhasstarted,allchangestoallauditedfilesandtablesareincludedin
thescopeofthattransaction.
However, AutoTMF can be instructed to create a separate transaction for each audited file or
table as a change is received for it. This is useful in some cases to eliminate lock contention in
programs that have complex lock behavior. Each transaction can be committed as soon as there
arenooutstandinglocksonthefileortableinvolvedinthetransaction.
Isolation
AutoTMF supports three levels of transaction isolation for a process. These isolation levels are
intended to reduce the effect of AutoTMF on other processes with which the process is
interacting.
Weak–Thisisthedefaultlevelofisolationandgeneratescommitsasdescribedabove.
Normal – A commit is generated if the process sends a message to another process.
This takes care of the case in which a requesting process, for instance, sends an
intermediatetransactiontoanotherserverprocess.Thenewservermayattempttolock a
record alreadylocked bythe sending process, resulting in a deadlock. Bycommitting the
transactionbeforeitissent,deadlocksofthisnatureareavoided.
5
Carr,R.W.,Schilling,B.E.,Corbeil,J.C.,Scott,H.P.,AutomaticTransactionManagement,UnitedStatesPatent
Application20050102250;May12,2005.
4
©2007SombersAssociates,Inc.,andW.H.Highleyman

Strong– This isolation levelis thesameas normalisolation with the additionof a commit
being generatedif a changeis tobemadeto an unauditedfile.This is required if there is
achancethattheunauditedupdatemightbelaterundonebytheapplication.
AuditedFileCreation
The configuration file can specify the names of files that, if created by a program, are to be
createdasauditedfiles.
AuditAttributeConcealment
In some cases, a program will ask for the attributes of a file. It is not expecting that one of the
attributeswillbe“audited”sinceitthinksthatallofitsfilesareunaudited.
AutoTMF will hide this attribute from the program when it returns the attributes given to it by the
operatingsystem.
BulkTransfers
Especially for batch programs, it is possible that the program will be writing blocks too large for
the transaction manager to handle. This option instructs AutoTMF to break large blocks into
smallerblocksthatcanbehandled.
No-waitCommits
With no-wait commits, AutoTMF will return a commit complete indication to the program as soon
as the program issues the ENDTRANSACTION command without waiting for the transaction to
actuallycommit.This will improvetheperformanceoftheprogram.However,the nexttransaction
willnotbestarteduntilthepreviouscommithascompleted.
I/O errors
Any I/O operation can generate an error. If the error is for an I/O operation generated by the
program,thaterrorissimplyreturnedtotheprogram.However,iftheerroroccurredonabeginor
end transaction command issued by AutoTMF, AutoTMF will close the current automatic
transaction,ifany,andwillterminatetheprocess.
Experience with AutoTMF
Thoughnotconfirmedbyformaltesting,CarrScottestimatesfromfieldexperiencethatAutoTMF
generatesbetweenoneandtwotransactionsforeachrealbusinesstransaction.
Many customers report significantly improved performance of their applications. After installing
AutoTMF, Barclay’s Bank measured a throughput capability of 650 transactions per second on a
pair on NonStop 72014s. The peak load which they had been handling was 230 transactions per
second.6
Some very large and popular third-party applications are for the most part nontransactional. A
good example is Base24 from ACI, used by financial institutions around the world. AutoTMF has
beensuccessfullyusedtoaddtransactioncapabilitytoapplicationssuchas Base24.7As aresult,
performance is increased, and the applications database can be replicated to a remote site for
6
BusinessContinuityCustomerExperiences,2002ETUGpanelpresentation,www.itug.org.
7
P.J.Nye,UsingAutoTMF,TMF,andRDFtoEnableDisasterRecoveryforBase24Systems,phil@cardlink.co.uk;
undated.
5
©2007SombersAssociates,Inc.,andW.H.Highleyman

disaster tolerance. Barclaycard Merchant Services is one such organization that has gone this
route.8
NonStop AutoSYNC
Another requirement for managing an active/active application or a migration to a new system is
to be able to replicate nonaudited files. Carr Scott Software is also the developer of HP’s
NonStopAutoSYNC.
AutoSYNC will monitor a list of files supplied to it and will replicate them to a remote system
should they be changed. This is intended for files that are seldom updated, such as edit and
object files or static database files or tables that see little update activity since the source file
needs to be quiesced during the replication and since the target file is not available until the
replicationiscomplete.
With AutoSYNC and an appropriate replication engine for maintaining synchronization of active
databases,allofthesystemsinanapplicationnetworkcanbemaintainedinthesamestate.
Carr Scott Software
Founded by Dr. Richard Carr and Harry Scott in 1995, Carr Scott (www.carrscott.com) is a
privately held company which focuses on enabling software for HP NonStop servers. Located in
Duxbury, Massachusetts, and Cupertino, California, Carr Scott maintains strong technology
sharing agreements with HP. Their AutoTMF and AutoSYNC products are jointly marketed by
HP.
Other products of Carr Scott include Escort SQL, SQL database middleware for Enscribe
applications which allows NonStop Enscribe files to be transparentlyreplaced with NonStop SQL
tables. Escort Ranger analyzes Enscribe files and NonStop SQL tables to determine the optimal
file partitioning ranges. Escort Journaling allows online database loading during an Enscribe to
SQL migration by capturing changes that occur during the online database load so that they can
beappliedtothetargetfileatthecompletionoftheload.
CarrScottproductsareusedbyover300NonStopcustomersworldwide.
8
http://www.carrscott.com/barclays.pdf.
6
©2007SombersAssociates,Inc.,andW.H.Highleyman
