Document Your System
November2006
Why Don’t Systems Get Documented?
Perhaps the activity that gets the most lip-service from management is documentation. But also,
perhaps the activity that is most likely to get cut due to budget and time considerations is
documentation.
With mission-critical systems, documentation takes on an even more important meaning since
failover and recovery procedures must be well-documented (and practiced). But good
documentationgoesmuchfurtherthanthat.
Think of all the non-maintainable but critical applications that are out there now because
documentation was never completed or was not kept up-to-date. Think of those operational
failuresthatoccurredbecauseordinaryprocedureswerenotwell-documented.
Oneofthereasonsthatdocumentationends upatthebottom oftheprioritylistis thatitis viewed
as too costlyand too timeconsuming. In part, this reputation is well-founded because of an over-
zealous approach to documentation in the past. Organizations tried to document in far too much
detail. The more detailed the documentation, the more difficult it was to keep it maintained.
Compoundingthisproblemisthatmostpeoplejustdon’tliketodocument.
With today’s self-documenting programming languages such as Java, the level of required
documentation should certainly be revisited. Coupled with modern documentation standards and
the powerful tools that are now available to create documentation according to these standards,
there is now little excuse for not providing at least the core system documentation necessary to
operateandmaintainyoursystemsoverthelongrun.
This article is motivated by a documentation solution adopted by a large company as presented
recently at a major computer conference. This company is a major supplier of services to the
financialexchangecommunity.Thispaperdrawsheavilyfromthatpresentation.
The company has decided to use the Universal Modeling Language, UML, as its documentation
standard.ThisarticleexploresitsuseofUML.
1
.
©2006SombersAssociates,Inc.,andW.H.Highleyman

The Core Documentation
It does not make sense anymore to provide detailed documentation of code. It is expensive, time
consuming and difficult to maintain, especially when the development staff is always running in
“crunch mode.” Today’s programming languages, properly commented, provide easily readable
roadmapsthroughthecode.
However, what is not provided is an overall structure that relates how modules interact with each
other and how they combine to perform a business function. More importantly, code
documentation does not provide the procedures required for operations, development, and
support people to properly do their jobs. Without this documentation, people are leaning upon
theirexperienceandgoodjudgmenttodothejobright.Thisdoesn’talways work.
Inattemptingtofindadocumentationstandard,thecompanyfacedseveralchallenges:
 Its systems undergo frequent changes to keep up with business needs, new technology,
andcapacitygrowth,
 There were culture clashes among the development groups. Each had its own
documentationpractices.
 Documentationisatime-consumingjob.Ifthebaristoohigh,itsimplywillnotgetdone.
The company listed the following needs that it sought to satisfy with a new documentation
standard:
 Development
o requirements
o functionality
o architecturaldesign
o bugfixes
o trackingknownerrors
 Operations
o howtofunction
o whattoexpect
o recoveryfromfailures
o whotocontactwhenproblemsoccur
o training
o dependencies
 Support
o installationprocedures
o configurationsettings
o startup
o shutdown
o troubleshooting
Enter UML
Years ago, in the dawn of object-oriented technology, when documentation was often being
ignored, there were an abundance of attempts to come up with documentation standards for
2
.
©2006SombersAssociates,Inc.,andW.H.Highleyman

modelingsystems.Itwasfeltthatifsuchstandards wereadopted,tools wouldfollowwhichwould
makethedocumentationtaskmucheasier.
The number of identified modeling languages exceeded fifty in the early 1990s and fueled the
“method wars.” As early as 1985, James Martin’s book Diagramming Techniques for Analysts
andProgrammersdescribedindetailalmosttwodozendifferentmodelingtechniques.
In the mid-1990s, some of these methods began to coalesce. In particular, three researchers in
the field, each with his passionately supported method, began to work together to incorporate
each other’s techniques into a common modeling language. They were Grady Booch, Jim
Rumbaugh, and Ivar Jacobson. They became known as the “Three Amigos” for their frequent
argumentswitheachotherregardingmethodologicalpreferences.
Ultimately, their work was accepted by the OMG (Object Management Group) and became
known as the Unified Modeling Language (UML).1 Today, UML is the accepted standard for
documentation;andmanypowerfulproductsexisttohelponeeasilycreateUMLdocuments.
UML defines many different modeling diagrams that can be grouped into three categories –
Structure,Behavior,andInteraction.Thediagramsinclude:
 StructureDiagramsmodelthestructureofphysicalorconceptualthings.
o ClassDiagramsdescribethetypesofobjectsinasystemandtheirrelationships.
o ComponentDiagramsshowthesoftwarecomponentsofasystemandhowthey
arerelatedtoeachother.
o CompositeStructureDiagramsaresimilartocomponentdiagrams.
o DeploymentDiagramsshowthephysicalrelationshipsbetweenthehardware
andsoftwareofasystem.
o ObjectDiagramsareusedtoexplaininstancesofobjectswithcomplicated
relationships.
o ArtifactDiagramsshowthephysicalconstituentsofasystemassignedtoa
computer.
o PackageDiagramsgrouprelatedclassesintopackages.
 BehaviorDiagramsdepictthewaysinwhichstructurescanbehave.
o ActivityDiagramsdescribethestatesofactivitiesbyshowingthesequenceof
activitiesperformed.
o StateDiagramsaresimilartoActivityDiagrams.Theydescribethebehaviorofa
systembydescribingallofthepossiblestatesofanobjectaseventsoccur.
o UseCaseDiagramsdescribetheinteractionbetweenusersandthesystem.
 InteractionDiagramsmodelthebehaviorofusecasesbydescribingthewaythat
groupsofobjectsinteracttocompleteatask.
1
Seethereviewoftheirbook,TheUnifiedModelingLanguageUserGuide,inthismonth’sRecommendedReading.
3
.
©2006SombersAssociates,Inc.,andW.H.Highleyman

o SequenceDiagramsdemonstratethebehaviorofobjectsinausecaseby
describingtheobjectsandthemessagestheypass.
o CommunicationDiagramsaresimilartoSequenceDiagrams.Theyshowthe
relationshipbetweenobjectsandtheorderofmessagespassedbetweenthem.
o InteractionOverviewDiagramsareaformofactivitydiagraminwhichthenodes
representinteractiondiagrams.Theyintroducetwonewelements,interaction
occurrencesandinteractionelements.
o TimingDiagramsareusedtodisplaythechangeinstateorvalueofoneormore
elementsovertime.
Which Diagrams to Use
The company decided that four of these diagrams satisfied all of their documentation needs.
These included the following, and examples from the presentation are included to illustrate the
useofeachdiagram.
 System Deployment Diagrams represent the physical packaging of the software modules
and their inter-dependencies. The dependencies between components show how
changesmadetoonecomponentmayaffecttheothercomponentsinthesystem.
4
.
©2006SombersAssociates,Inc.,andW.H.Highleyman

 Use Case Diagrams are used to show all operational and support procedures. They not
only diagram standard procedures but also diagram the actions to be taken to recover
fromallexceptionconditions.
IInncclluuddeess
RenameFiles
SSaavveePPrroodduuccttiioonn
FFiilleess OOnnDDiisskk
SSaavveeDDaattaattoo
IInnssttaallllSSooffttwwaarree VViirrttuuaallTTaappee
RReelleeaassee
CCoonnffiirrmmNNeeww
SSooffttwwaarree
TTeessttSSooffttwwaarree
RRuunnTTeessttCCaasseess
BBaacckkOOuuttCChhaannggeess
CCoonnffiirrmmPPrroodduuccttiioonn
RReeaaddyy
IInnssttaalllliinnggaanneewwssooffttwwaarreerreelleeaasseeiinnpprroodduuccttiioonnffoorrtteessttiinngg
 PackageDiagramsareusedtodescribethecontentsofallreleases.
HHPPXXPP HHPPNNoonnSSttoopp
1122000000SSAANN RReelleeaasseeHH0066..0066
AApppplliiccaattiioonn
DDeeppeennddss RReelleeaassee11..00 DDeeppeennddss
CCoommmmoonn
OOSSSSGGaatteewwaayy SSooffttwwaarree OOppeerraattiioonnaall
SSooffttwwaarree
RReelleeaassee11..22 DDeeffiinniittiioonnFFiillee11..00 RRuunnssttrreeaammss11..xx
RReelleeaassee55..xx
5
.
©2006SombersAssociates,Inc.,andW.H.Highleyman

 Sequence Diagrams are used to diagram all operational procedures and to give an
estimateofthetimerequired.
VViirrttuuaall BBaattcchh IIBBMM PPrroodduuccttiioonn QQAA
TTaappee JJoobb SSyysstteemm AApppplliiccaattiioonn AApppplliiccaattiioonn
SSttaarrttBBaacckkupp
BBaacckkuuppCCoommpplleettee
SSttaarrttBBaattcchhjjoobb
BBaattcchhjjoobbCCoommpplleetteedd
SSttaarrttDDaatteaTTrraannssffeerrss((FFTTPP))
SSuucccceessssffuullCCoonnffiirrmmaattiioonn
SShhuuttddoowwnnAApppplliiccaattiioonnss
CCoonnffiirrmmssuucccceessssffuullsshhuuttddoowwnn
IInniittiiaalliizzeeQQAAAApppplliiccaattiioonnss
TTeessttiinnPPrroodduuccttiioonnEEnnvviirroonnmmeenntt
1166::3300-- 1177::3300-- 1199::0000-- 1199::3300-- 2200::0000--
1177::3300 1199::0000 1199::3300 2200::0000 2233::5599
Documenting Complex Algorithms
UML is intended to document processes (software, business, or otherwise) that can be
represented by a set of objects. It specifically is not aimed at code documentation or algorithm
diagramming(thoughactivitydiagramscandothistosomeextent).
However, certain methods supported by an object may be quite complex and should be
documented for future reference bydevelopers and perhaps even bybusiness staff. An excellent
toolforthisistheNassi-Shneidermanchart.2
N-S charts are, in effect, an intuitive two-dimensional representation of modular psuedo-code.
They are very easy to read. The two-dimensionality of the chart effectively reduces the effort to
understandthealgorithmbythesquareofitscomplexity.
N-S charts can be time-consuming to draw, but there is an excellent tool to generate them
automatically from a psuedo-code representation of the algorithm. This tool is available from
RobertKast,aleadingpromoterofN-Scharts,atbobk@legato.com.
Forinstance,thefollowingexampleofpsuedo-coderepresentsasomewhatsimplealgorithm:
Initialize
IFMessageToProcessTHEN
WHILEWhileMessageQueueNotEmptyDO
SWITCHMessageType;
2
SeeChapter15,Nassi-ShneidermanCharts,DiagrammingTechniquesforAnalystsandProgrammers,byJamesMartin
andCarmaMcClure,Prentice-Hall;1985.
SeealsotheSomberswhitepaper,StructuredDesignwithNassi-ShneidermanCharts,at
http://www.sombers.com/white_papers.htm).
6
.
©2006SombersAssociates,Inc.,andW.H.Highleyman

CASEA;
*MSGA*
CASEB;
*MSGB*
CASEOther;
SendErrorMessage\l
Exit
EXIT
END
END
ELSE
SendI'mAliveMessage
END
UpdateStatistics
AclickonabuttonyieldsthefollowingN-SChart:
Initialize
MessageToProcess
yes no
WhileMessageQueueNotEmpty SendI'm
MessageType Alive
A Message
*MSGA*
B
*MSGB*
Other
SendErrorMessage
Exit
UpdateStatistics
In addition to documenting existing algorithms, N-S charts represent a valuable design tool to
enforce structure and modularity and to ensure a consistent quality of design throughout a
programmingorganization.Inaddition,thesechartspresentaneasilyunderstandabledepictionof
data flow to the non-designers – the programmers and the users – and as such form an
invaluablebasisformaintenancedocumentation.
UML Products
WehadsaidearlierthattherewereseveralgoodproductstoaidintheconstructionofUML
diagrams.AnupdatedlistoftheseproductsismaintainedbytheObjectManagementGroupon
itswebsite,www.uml.org.
Summary
Documentation has always been a necessary evil, and too often the “evil” wins out over the
“necessary.”Documentationinmanyshopsisoftennonexistentorminimal.
7
.
©2006SombersAssociates,Inc.,andW.H.Highleyman

The lack of good documentation, at least at a rudimentary level, is a must for proper operations
andapplicationmaintenance.
Overthelastdecade,UMLhasbecometheacceptedsolutiontosolvethis problem.ItisanOMG
standard recognized worldwide. As a result, many good off-the-shelf tools are now available to
easethecreationandmaintenanceofUMLdocumentation.
There should no longer be an excuse for not supporting the development, operations, and
supportstaffwithproperdocumentation.
8
.
©2006SombersAssociates,Inc.,andW.H.Highleyman
