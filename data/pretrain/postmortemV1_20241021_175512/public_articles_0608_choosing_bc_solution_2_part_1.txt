Choosing a Business Continuity Solution
Part 2 – Data Replication
August2011
In Part 1 of this series, we reviewed various concepts of availability.We pointed out that systems
canbehighlyavailable,exhibitingminutes of downtimeper outage,or continuouslyavailable with
secondsofdowntimeperoutage.Ifabackupdatacenterexiststocontinueoperationsfollowinga
disaster of somesort,thebackupdatacenter canprovidedisaster recoveryor disaster tolerance.
With disaster recovery, IT services can be restored, though it may take days or weeks. With
disastertolerance,ITservicescontinueuninterruptedfollowingadisaster.
Fundamental to all highly available and continuously available architectures is data replication.
Suchavailabilityrequires redundancy.Itis datareplicationthatmaintains redundantdatabases in
synchronization so that an up-to-date database copy is immediately available following an
outage.Part2ofthisseries1exploresthevariousreplicationtechnologies andtheir strengths and
weaknesses.
Data Replication - The Fundamental Force Behind Availability
Improving your availability via data replication depends upon having at least two nodes, each
being capable of hosting a database. Typically, each node also can host the application that is
beingprotected.2
Figure1:DataReplication
1ThisseriesofarticlesisareprintofaGravic,Inc.,whitepaperandispublishedwiththepermissionofGravic.
2Therearereplicationarchitecturesinwhichthetargetnodeisa“databunker”whosepurposeistosafe-storedata.Inthe
event of a primary-system failure, the data bunker is used to bring the database of the backup system up-to-date.
Dependinguponthearchitectureused,theseapproachescanofferlittletonodataloss.However,theytypicallyhavevery
longrecoverytimes(manyhourstodays).Inthispaper,wewillfocusonreplicationarchitecturesthatprovidelowtono
datalossbutthathaveveryfastrecoverytimes.
1
©2011SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

As showninFigure1,thepurposeof datareplicationis tokeepatargetdatabase insynchronism
withasourcedatabasethatisbeingupdatedbyasourceapplication.
Wetalk aboutthesourcedatabasehostedbythesourcenodeandthetargetdatabasehostedby
the target node. The two nodes comprise the distributed data-processing system. As an
application makes changes (inserts, updates, and deletes) to its local database (the source
database), those changes are sent immediately over a communication channel to the target
system, where they are applied to the target database (Figure 2). The target database typically
resides on another independent node that maybe hundreds or thousands of miles away.Wecall
the facility that gathers changes made to the source database and applies them to the remote
targetdatabaseareplicationengine.
Figure2:Data-ReplicationEngine
Data-Replication Techniques – An Overview
Data-replicationenginescanbecategorizedinseveralways:3
 HardwareversusSoftwareReplication–Withhardwarereplication,thereplicationengine
is implemented via low-level device drivers, typically in the storage subsystem. A
software-based replication engine can reside either in the storage subsystem or, as is
usuallythecaseinthesystemswewilldiscuss,intheprocessingnodesthemselves.
 Asynchronous versus Synchronous Replication– Asynchronous replicationsends source
database changes to the target database without impacting the source application.
Changesaresentafter-the-factfrom aqueueofchangesmaintainedonthesourcenode.
The application and the data-replication engine are decoupled from each other via the
changequeue.
Synchronous replication allows no changes to be made unless they can be made to all
database copies simultaneously. The application and the data-replication facilities are
coupledtoeachother.Asweshallsee,dependingupontheapproachused,theymaybe
eithertightlycoupledorlooselycoupled.
 Unidirectional versus Bidirectional Replication – With unidirectional replication, changes
are sent in just one direction from a source database to a target database. With
bidirectional replication, both databases can be active; and changes made to either are
3BreakingtheAvailabilityBarrier:SurvivableSystemsforEnterpriseComputing,AuthorHouse;2004.
BreakingtheAvailabilityBarrierII:AchievingCenturyUptimeswithActive/ActiveSystems,AuthorHouse;2007.
BreakingtheAvailabilityBarrierIII:Active/ActiveSystemsinPractice,AuthorHouse;2007.
2
©2011SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

replicated to the other. In this case, each database is both a source and a target.4 In
eithercase,replicationcanbeeitherasynchronousorsynchronous.
Hardware Versus Software Replication
HardwareReplication
ReplicateonCacheFlush
Hardware replication is usually implemented in the storage-system controller. It replicates disk
blocks as they are written to the source disk, thus guaranteeing that the contents of the target
diskarealwaysidenticaltothesourcedisk.
However, disk blocks are typically only written to disk when they are flushed from the disk’s
cache. There is no logical order to the disk-write sequence since other factors control cache
flushing - disk blocks that are the least recently used are flushed to disk when cache space is
needed for new blocks that must be read from disk. As a consequence, the target disk is not
guaranteed to be consistent. Target disk blocks may be partially split. Indices may exist without
therowsorrecordstowhichtheyrefer.Childrenmayexistwithoutparents.Thedataisconsistent
in cache, but the target-disk image is generally useless. As a result, applications cannot use the
target database for any application processing. Should the source node fail, a lengthy recovery
processisrequiredtobringthetargetdatabaseintoauseful,consistentstate.
Additionally, because of the cache-flushing issue, large amounts of data may be lost due to a
source-system failure even if synchronous replication is used, as any data still in cache will not
havebeenflushedatthetimeoffailure.
ReplicateonCacheUpdate
Some storage controllers replicate changes as they are made to cache regardless of whether
they have been physically written to the source disk or not. The replication of cache updates can
ensure the logical consistency of the target database since changes are replicated to the target
system as soon as they are made at the source system. Therefore, the target database can
provideaconsistentviewofthesourcedatabase.
Hardwarereplication, whether basedondisk flushing or cacheupdating,typicallysends blocksof
changes to the target. In some cases, the controller can compress data to only those bytes that
have changed. Hardware replication is limited to specific hardware and may not be possible in
yourconfiguration.
Thetworeplicationtechniquesdescribedabovegenerallyrequiretheidenticalstoragetechnology
down to the version to be usedat boththesourceand thetarget. Theyalso do nottypicallyallow
thetargetdatabasetobeopenedbyapplicationsatthesametimethatreplicationistakingplace,
thus preventing their use in active/active systems. Therefore, hardware replication is not an
option if recovery times measured in seconds or minutes is to be achieved. As a consequence,
hardwarereplicationwillbediscussednofurtherinthispaper.
4 Bidirectional replication may cause problems with certain applications that are not designed to be distributed. In this
case, an alternative architecturethat can be used is a “sizzling-hot standby.”Bidirectional replicationis configured with
applicationsrunningonbothsystems.However,alltransactionsaresentonlytoonesystem,whiletheothersystemacts
asahotstandby.Shouldtheprimarysystemfail,allthatneedstobedoneistoreroutetransactionactivitytothestandby
system. Since it is already configured for replication, the failed system can be easily restored to operation once it is
repaired.
3
©2011SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

SoftwareReplication
In the high-availability systems that we will consider, higher-level software carries out the
replicationtask.Adata-replication enginerunning onthesource andtargetsystems performs the
replication. Only in this way can the continuously available active/active systems that we will
describelaterbeimplemented.
Software-replication engines typically read changes from a change queue of some sort and send
them to the target system to update its database. So long as updates are made to the target
system in the same order as they were made at the source system, the target database will be
consistent and usable by other applications. Some high-performance replication engines are
multithreaded to improve replication throughput. In these engines, resynchronizing facilities
reorder updates that may be received out-of-order from the various threads before the updates
areappliedtothetargetdatabase.
Software replication may be by event, by transaction, or by request. Event replication replicates
DML (data manipulation language) events as they occur. DML events include insert, update, and
delete operations. Event replication in some cases may also replicate DDL (data definition
language)operationsthataffectthedatabase’sdatastructureandschema.
Transaction replicationreplicates entire transactions, either one operation ata timeas theyoccur
or as a group of operations once the transaction has committed on the source.When replayed at
the target, the transaction is either committed or, if the entire transaction is not received, is
aborted.
Request replication replicates the entire request, which is reprocessed in its entiretybythe target
system.
Asynchronous versus Synchronous Replication
AsynchronousReplication
An asynchronous data-replication
engine is completely transparent to
the applications running in the
Application
source node. As shown in Figure 3,
it extracts changes made to the
source database from a change changes
queue and sends them after-the-fact change
changes
t ro eplict ah te eta nr gg ie nt md aa kt ea sba chse a. ngeT sh toe so du ar tace queue rea ps liy cn ac tih or non eno gu is ta dr ag taet
ion e ne
base base
the target-database copy somewhat
later than they were made to the
sourcesystem targetsystem
source database. The result is that
the databases are synchronized, but
Figure3: AsynchronousReplicationEngine
the target database copy lags the
source database by a short interval. This interval is known as the replication latency of the data-
replicationengine.
The replication latency associated with an asynchronous replication engine creates an issue that
must be considered when using such technology. This issue is data loss following a failure of the
source node. Any changes that were in the replication pipeline and that did not make it to the
target node may be lost. The data loss in this case is the replication latency of the replication
engine,whichistypicallymeasuredinthetensorhundredsofmilliseconds.
4
©2011SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

SynchronousReplication
A synchronous data-replication engine solves the asynchronous-replication problem of data loss
following a node failure. Synchronous replication makes no permanent changes to any database
copy unless those changes can be applied to all database copies. Therefore, should a node or
the network fail, no data is lost. Synchronous replication can satisfy RPOs (Recovery Point
Objectives)ofzero(thatis,nodataloss).
Synchronous replication has its own issue, and that is application latency. Since the application
mustwaitforthetransaction’sdatatobesafe-storedandoptionallyappliedtoalldatabasecopies
intheapplicationnetwork,thesourceapplication’stransactioncompletionisdelayed.
There are two primary synchronous-replication methods that we will describe – dual writes and
