GRIDSCALE – A Virtualized Distributed Database
July2008
As its name implies, GRIDSCALE, from xkoto, Inc. (www.xkoto.com), is a
scalable grid of database servers. GRIDSCALE virtualizes a pool of
database servers so that they appear to be a single, consistent database
server to the applications they serve. The database servers may be geographically dispersed for
disaster tolerance. The failure of any one database server is transparent to the users of the
database. This virtual database is readily scalable by adding or subtracting additional database
serverson-the-fly.
The Three-Tier Syndrome
ContemporaryThree-TierArchitecture
Commonpracticetodayistoimplementsystemsinthreetiers:
 The Presentation Tier manages data received from and sent to the clients of the system.
Perhaps the most widespread example of a presentation tier is that comprising web
servers.
 The Application Tier processes requests from clients received from the presentation tier
andreturnsresultstotheclientsthroughthepresentationtier.
 The Database Tier provides the application database needed by the application tier to
performitsprocessingfunctions.
databasecluster
virtualizedweb virtualizedapplication
serverpool serverpool active
database
server
clients web application data
servers servers base
backup
database
server
ContemporaryThree-TierArchitecture
Intypicalsystems today, thepresentationtier andthe application tier are virtualized.Thatis,they
comprise a pool of similar servers, any of which can provide the required processing. Should a
server fail, it can be removed from the pool; and the rest of the pool will continue to carry the
1
©2008SombersAssociates,Inc.,andW.H.Highleyman

system load with no interruption to the users. If more capacity is needed in a tier, additional
serverscanbeaddedtohelpcarrytheload.
However, the database tier is typically a single system – often a cluster. Although it may be
configured as an active/backup system with redundant data storage such as RAID, it is not
scalable without installing larger servers since only one server is active at a time. Furthermore,
failover is nottransparenttotheuser.Clusters typicallytakeminutes tofailover,andthatis onlyif
therehasbeennodatabasecorruptioncausedbythefailureoftheprimaryserver.
VirtualizedThree-TierArchitecture
Therearegreatbenefits to beobtainedif virtualization couldbeextendedtothedatabasetier.By
virtualizing a pool of database servers, the system can be made impervious to database failures.
Furthermore, query loads can be spread among the individual database servers, thus allowing
scalabilitybyaddingadditionaldatabaseservers.
ThisisthemissionofGRIDSCALE.
virtualizedweb virtualizedapplication virtualized
serverpool serverpool databasepool
clients web application hh
database data
servers servers
server base
GRIDSCALE
VirtualizedThree-TierArchitcture
GRIDSCALE
GRIDSCALEprovides a single-imageview of apool of databaseservers,each managing its own
private database. The database servers may be geographically distributed to provide disaster
tolerance. If a database server is lost, it is automatically evicted from the server pool; and
transactionsarehandledbytheremainingdatabaseservers.GRIDSCALEmaintainsitsownSQL
statementlogtoresynchronizeanevictedserveruponitsreturntothepool.
GRIDSCALEensuresdatabaseconsistencysothatalldatabasesarealways inthesamestate.It
does this through asynchronous transaction replication. Each operation within a transaction is
sent simultaneously to all database servers to be executed. GRIDSCALE guarantees that each
server will execute transactions in exactly the same order so that read consistency is maintained
acrossthepool.1
GRIDSCALE provides high performance even while managing synchronized copies of the
database. Unlike synchronous transaction replication systems, which must wait for all of the
database servers to commit the transaction before completion is returned to the application,
GRIDSCALE will return completion as soon as the transaction completes on just one database
server. Typically, there is at least one local database server so that transaction response time is
substantiallythatofastandalonetransactionprocessingsystem.
Queries are load-balanced across the database servers. A read operation is directed to the
database server that is most likely to deliver the fastest response. A byproduct of this is that for
1GRIDSCALEcanalsobeusedinan“operation”modeinwhichtheatomicelementisasinglereadorwriteoperation
rather than a transaction. The description of this mode is the same as that for the transaction mode, where a single
operationcanbeconsideredatransaction.
2
©2008SombersAssociates,Inc.,andW.H.Highleyman

write-seldom, read-often applications, a GRIDSCALE virtual database is nearly linearly scalable
by adding additional database servers to spread the read load. In addition, query-only
applicationsmayrunindependentlyonthedatabaseservers.
GRIDSCALE supports views, triggers, materialized views, and stored procedures. It also
replicates DDL commands entered by operations personnel to reconfigure the virtualized
database.
WhileGRIDSCALE workswithSMPsystems,GRIDSCALEalsoallows theuseofheterogeneous
commodity servers as the database servers rather than large SMP systems. Since all
GRIDSCALE database servers are running in an active/active configuration and are contributing
to load handling, two or more small systems can match the capacity of a much more expensive
pair of large SMP systems needed for a database cluster. This is because only one of the
systems in a cluster can be active at any one time. Currently, GRIDSCALE supports IBM’s DB2
database running on IBM AIX, Linux, MicrosoftWindows, or Sun Solaris. Support for SQL Server
databasesisinbetanow,andsupportforotherdatabaseswillbereleasedinthefuture.
GRIDSCALE is noninvasive. It can be installed for use by any application without modification
provided that the application makes database calls via ODBC, JDBC, DB2 CLI, native DB2 SQL
calls,orSQLServerwith.NETcalls.
GRIDSCALEismanagedfromasinglepointviaaweborcommandlineinterface.
GRIDSCALE Architecture
GRIDSCALEcomprisesthreecomponents:
 Application Drivers that provide standard interfaces to the GRIDSCALE virtualized
database.
 A GRIDSCALE server that orders application requests and passes them to the database
serversinsuchawayastoguaranteeconsistency.
 Database Connectors that manage the execution of transaction I/O requests in the order
specifiedbytheGRIDSCALEserver.
application application application
JDBC ODBC DB2CLI
Driver Driver Driver
GRIDSCALE
GRIDSCALE
virtualized
database Connector Connector Connector
server
database database database
server server server
data data data
base base base
3
©2008SombersAssociates,Inc.,andW.H.Highleyman

ApplicationDrivers
GRIDSCALE provides drivers for applications to use to access GRIDSCALE servers. These
drivers support ODBC, JDBC, and DB2 CLI as well as native DB2 SQL calls. SQL Server .NET
calls willbesupported.Ifanapplicationusesoneoftheseinterfacestomakeitsdatabasecalls,it
canuseGRIDSCALEwithoutmodificationsimplybylinkingintheappropriatedriver.
GRIDSCALEServer
The GRIDSCALE Server (GSS) is the heart of the GRIDSCALE system.2 It receives all database
transactionrequestsfromtheapplicationsandserializesthemforthedatabaseservers.
The GSS analyzes each operation within a transaction and determines which are read and write
operations.Itsendsallwrites(inserts,updates,deletes)toalldatabaseservers.
Itanalyzes eachreadrequesttodeterminewhichdatabaseserver is bestabletohandletheread
request. It may select a database server based on the server’s load, on its computing capacity,
andonthe distanceseparatingtheserver from the GSS.Havingselected aserver,theGSSthen
sends the read request to that server but also sends a virtual read request to all of the other
serverssothattheymayappropriatelylocktherowbeingread.
Each read or write request is sent with an appropriate lock and a sequence number. The
sequence numbers guarantee that all operations are performed by each database server in
exactlythesameorder.
The GSS typically runs on its own hardware server, where best practices suggest a two-
processor, two-gigahertz. server running Linux, AIX, Solaris, or Windows. An active/backup pair
ofserversmaybeconfiguredtoprotectagainstaGSSfailure.
AGSScomprisesthefollowingsixmodulesthatinconcertprocessatransactionrequest.
transaction AnalyzerModule
LockModule
Scheduler
Sequencer
Table
ServerLoad
Table Scheduler database
server
Log
RewriterModule cache
Table
Batchmodule
GRIDSCALEDatabaseLoadBalancer
AnalyzerModule
The Analyzer Module parses the SQL statement and determines which read and write requests
arebeingmade.ItpassestheseaselementaloperationstotheothermodulesintheGSS.
2 Ferguson, Gregory; Heisz, Jeffrey; Tung, David; Jamal, Muhammad Mansoor; Kassam, Ariff; Method and System for
LoadBalancingaDistributedDatabase,U.S.Patent20070203910;August30,2007.
4
©2008SombersAssociates,Inc.,andW.H.Highleyman

LockModule
The Lock Module determines what kind of lock is to be carried with each data operation in order
toguaranteeconsistencyofthedatabase.TheANSISQLisolationlevelsaresupported:
 ReadUncommitted(dirtyreads)-Unimpededreadingofaroworrecordisprovided.
 Read Committed - If a transaction reads a row, it will always get the same data on
subsequentreadsofthatrow.
 RepeatableRead-Onlytheresultsofcommittedtransactionsareavailabletoberead.
 Serializable - Once a transaction reads a row, no other transaction may modify that row
untiltheoriginaltransactionhasbeencommitted.
A lock carries four pieces of information: a Lock Number, which uniquely identifies the lock and
associates it with a particular row or record; a Lock Type, which specifies whether the lock is a
read or a write lock; a Lock Scope, which specifies how long the lock is to be held (for the
read/write operation or until the transaction is committed); and a Lock Sequence, which specifies
thesequentialpositionofitsassociatedoperationwithrespecttoallotheroperations.
Sequencer
The Sequencer receives the results from the Analyzer Module and assigns a sequence number
to each of the transaction operations that will access a particular database row or record.
Sequence numbers are assigned so that the transaction operations will be ordered across all
transactions, guaranteeing that all transactions and all operations within each transaction are
executed in exactly the same order in each database server. The sequence number assigned to
each database read/write operation is associated with the lock for that operation, as described
above.
Scheduler
The Scheduler tracks the execution of the respective transactions and their operations on the
database. It receives the operations that make up a transaction from the Analyzer Module, the
locks associated with each operation from the Lock Module, and the sequence number
