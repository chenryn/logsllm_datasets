server set, and the systems implementing the clients backend
two members must be identical. Reads are
distributed between the shadow-set members
for load balancing. The shadow-set members
router
can be geographically separated, though data
distance may be limited for performance base
considerations.
OpenVMS
Should there be a failure of one member of backend
the shadow set, the surviving member will
TransactionShadowing
journal further transactions until the failed
member is restored. At this time, the surviving member will use the journal to recover the
database of the member being returned to service. There is no impact on ongoing operations
duringtherecoveryprocess.
ConcurrentServers
Concurrent servers provide a pool of servers in server
a single backend node. All servers can be
updating the same partitions in the database clients
data
connected to that node. As a transaction is server
base
received,RTRroutesittooneoftheconcurrent
servers, which processes it against the
router server
application database. If a server fails, the
5
backend
©2010SombersAssociates,Inc.,andW.H.Highleyman
ConcurrentServers
Fordiscussion,contacteditorest.com

transactionistransparentlyresubmittedtoanotherserverinthepool.
Concurrent servers can increase the performance of a backend node by introducing an element
of parallel processing. The system administrator can adjust the number of servers in the pool
according to current or projected volume. Thus, concurrent servers also provide a measure of
scalability.
One problem with concurrent servers is that a programming error can cascade through the entire
pool of servers. If a transaction causes a server to fail because of a programming error, the
transaction will be submitted to another server. That server may fail as well, and the process will
continueuntilallserversinthepoolhavefailed.Topreventthisfrom happening,atransactionwill
beabortedifitcausesthreeinstancesofaservertocrash.
Concurrent servers can be configured in any backend, whether the backend is acting as a
primary server, a standby server, or a shadow server. The implementation of concurrent servers
varies by operating system. They may be implemented as threads within a single process, as
lightweightprocesses,orasmultipleprocesses.
CalloutServer
A callout server provides authentication services for a facility. It is associated with a particular
facility and receives all transactions directed to or passing through that facility. It may run on a
routernodeoronabackendnodeinthefacility.
Though it makes no database updates, a callout server is a voting member of each transaction
presented to it. It is typically used for authorization and validation checks. If it finds that a
transaction is inappropriate, it votes not to commit; and the transaction is aborted. Consequently,
acalloutservercanprovidetransactionauthenticationwithnoapplicationchanges.
Calloutserversmayalsobeusedforotherpurposes,suchasforaudit-traillogging.
Broadcast
RTR provides a broadcast capability for clients and servers to send mass notifications to each
other. Aclient or server mayestablishaclass of broadcast.Clients andservers maysubscribeto
oneormorebroadcastclassestoreceivenotifications.
One caveat is that if the client network does not provide a broadcast capability, and if there are a
large number of clients, broadcast messages to clients will have to be sent to clients on a point-
to-point basis. This could create a large network load. Broadcasts to servers do not share this
problemastherearegenerallyalimitednumberofservers.
Fault Recovery
Properly configured, RTR survives any single fault. Most recovery is transparent with in-flight
transactionspreserved.
RouterFailures
Multiple instances of the router can be configured on router nodes and backend nodes. Clients
areassignedtoaparticularrouterinstancetoroutetheirtransactions.
If a router fails either because it crashes or because its node fails, RTR will reconnect the clients
servedbythefailedroutertosurvivingroutersintheRTRnetwork.Recoveryistransparenttothe
userssinceRTRreroutestransactionsinprogresstothenewrouters.
6
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Whenafailedrouterisreturnedtoservice,theclientsthatithadbeenservicingarereturnedtoit.
ServerFailures
Concurrent servers provide multiple servers on the same node. Standbyservers provide multiple
servers on different nodes. Shadow servers provide multiple servers on different clusters. The
recovery procedures are different for each. However, properly configured, RTR recovers
transparentlyfromanysingleserverfaultaslongasthereisanotherservertowhichtofailover.
PrimaryServer
IfthereisonlyasingleprimaryserverintheRTRfacility,itsfailureisnotrecoverable.Thereisno
backuptowhichtorecover.Theapplicationisdownuntiltheserverisreturnedtoservice.
ConcurrentServers
If oneof theservers inaconcurrentserver poolfails,anytransactionthat it was in the process of
handling is resubmittedtransparentlyto another server inthepool. RTR willattempttorestartthe
failedserver;andifsuccessful,theserverwillbereturnedtothepool.
StandbyServers
Standby servers are paired with primary servers in standard cluster architectures. The primary
serverandoneormorestandbyserversconnecttoacommon(presumablyredundant)database.
In standard clusters, only the primary server may have the database mounted. In OpenVMS
clusters, the primary and all standby servers mayconnect to the common database; and all may
be active in processing transactions. The distinction between primary and standby servers is
blurredinthiscase.
In standard clusters, the failure of the primary server causes a standby server to take over
transaction processing. Failover is controlled by a cluster manager. Typically, applications on the
standby server are started, the database is mounted by the new application instances, and the
database is checked for corruption (a failure at the wrong time could corrupt the database, for
instance by interrupting a block split). If the database is corrupted, it must be repaired. Onlythen
can the standby server begin accepting transactions. Failover time for standard servers is
typicallymeasuredinminutes.Duringthistime,theapplicationisdown.
In OpenVMS clusters, all servers are actively processing transactions. Therefore, the failure of a
server simply means that further transactions are routed to surviving servers. Any transactions
that were being processed by the failed server are simply routed to surviving servers. Failover is
instantaneousandtransparenttotheusers.
ShadowServers
With concurrent servers and standbyservers, there is no database recoveryrequired since there
isonlyonedatabase.Itcontinuesinusefollowingfailoverandfallback.
However, with shadow servers, there are two databases that must be kept in synchronism.
During normal operation, synchronization is the responsibility of RTR. This is accomplished by
sendingeachtransactiontobothshadowservers.
However, if one server (or database) fails, all transactions are processed only by the surviving
shadow server. There must be a mechanism to resynchronize the database of the failed server
whenitisreturnedtoservice.
7
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Journaling solves this problem. When one member of a shadow set fails, the other member
records all subsequent transactions in a journal. When the failed member is returned to service,
its database is broughtuptodate bydrainingto itthe queue of transactions storedinthe journal.
Whenitsdatabaseissynchronized,itisreturnedtoservice.
Facilities within the OpenVMS cluster also allow the two databases to be compared and the
standbydatabase to be corrected if it differs in any wayfrom the primarydatabase. Furthermore,
facilities existtocopythecontents of ashadow databasetoarecoveringdatabaseif journalingis
notsufficient.
NetworkFailures
The failure of a network link is generally detected by timeout. If a link between a client and a
router fails, the failure is treated as a router failure; and the client is connected to another router.
If the failure is in a link connecting a router to a server, the failure is treated as a server failure;
andtherouterisreconnectedtoastandbyserverortoashadowserverifthereisone.
Scalability
RTR supports several levels of scalability. Additionalfrontend,router, andbackendnodes can be
added to an existing RTR network with no application changes and without impacting current
operations. Thus, if a node is becoming too heavily loaded, one or more additional nodes of the
same type can be added; and clients, routers, or servers can be relocated to reduce the load on
theaffectednode.Likewise,nodescanberemovedifdesired.
Different partitions of an application database can run on different nodes to allow parallel
updatingofthedatabase.
Thesizeofaconcurrentserverpoolcanbeexpandedorreducedbythesystemadministrator.
Eliminating Planned Downtime
RTR eliminates planned downtime for configurations comprising standby or shadow servers. A
server can be taken down, upgraded, and returned to service without affecting operations. The
upgradecanberolledthroughtheRTRnetworkinthiswaynode-by-node.
If a database in a cluster needs to be upgraded, for instance, to change its schema, the cluster
must be taken down since there is only one database instance in the cluster. In this case,
planned downtime is required. However, if a database in a shadow set must be upgraded, this
canbeaccomplishedbyperformingtheupgradeontheshadowsetdatabasesoneatatime;and
planneddowntimeisnotrequired.
Programming Interfaces
The client and server APIs provided by RTR support several programming languages, including
Java, C++, and C. The XA interface is supported for Oracle, Microsoft SQL Server, and any
conformingX/OpenDTPresourcemanager.
RTR supports object-orientedprogramming.RTR functions canbemappedintoJavaobjects and
C++foundationclasses.
8
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

System Management
RTR provides several system-management options. A CLI (command line interpreter) allows a
systemadministratortoenteranyoftheRTRconfigurationandmanagementcommands.
TheRTR Manager provides aweb-browser interfacetosetupandmanageanRTRconfiguration
andindividualnodes.Likewise,theRTRExplorerprovidesaweb-browserinterfacetomonitorthe
behavior of an RTR network. RTR Explorer generates warning, error, and fatal alarms. The
administrator can zoom in on specific nodes to get a more detailed view of current operations.
Between these two facilities, the most popular RTR commands can be executed by an intuitive
GUIinterface.
A smart plug-in (SPI) is available for the HP OpenView systems management facility. OpenView
monitors,manages,andcontrolsdistributedapplicationsrunningonawidevarietyofsystems.
An RTR network can be managed from a node on which RTR is running, on an independent
remotenode,orviaawebbrowseronoraccessinganoderunningRTR.
Summary
RTR allows the expansion of an existing application to incorporate previously incompatible
systems. RTR allows heterogeneous systems to be consolidated into a single highly-redundant,
reliable,andscalableapplicationnetwork.
Failover from software or hardware faults is automatic and is generally transparent to the users.
Transaction integrity is guaranteed via the use of the two-phase commit protocol. Extensive
management facilities are provided via intuitive web-browser interfaces. Though the use of RTR
in an existing application is somewhat invasive because RTR API calls must be added to clients
and servers, no other application changes need be made except to add additional business
functions.
RTR is an important adjunct to OpenVMS clusters. These clusters execute commands at the
database read/write/update level and do not support transaction processing. RTR running in an
OpenVMSclusterbringstransactionprocessingtotheseactive/activeclusters.
9
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com
