Transaction Replication
February2007
Active/active systems depend upon the applications at different nodes having access to
distributed copies of the application database. The database copies must all be synchronized so
thattheypresentthesameapplicationstatetotheirlocalapplicationinstances.
This is typically done by real-time replication of data changes made at one database to the other
copies in the application network. In our previous articles, we have discussed software and
hardware replication of changes. In this article, we discuss database synchronization by
transactionreplication–theapplicationofeachtransactionindependentlytoalldatabasecopies.
Wefirstreviewtheotherreplicationtechnologiesbeforediscussingtransactionreplication.
A Review of Replication Techniques
We have previously reviewed data replication sync
techniques that replicated source database application
changes toatarget database.Therearetwomajor
techniques for doing this – software data
replicationandhardwaredatareplication. source or change changes target
database queue database
Software data replication1 depends upon some
sort of a Change Queue that contains an ordered SoftwareReplication
sequence of changes that have been made to the
source database. This Change Queue could be,
application
for instance, an audit trail maintained by a
database manager, or a log of changes created by
theapplicationorbydatabasetriggers.
blocks
source target
A data replication engine reads changes from the database database
Change Queue and applies them to the target
database. In active/active applications, the HardwareReplication
changes made to each database copy are
replicatedtoalloftheotherdatabasecopiestomaintainallcopiesinsynchronism.
Software replication can be done asynchronously, in which case it is transparent to the
application.However, with asynchronous replication thereis the potentialfor data loss should the
1
SeeourarticlesentitledAsynchronousReplicationEngnesandSynchronousReplicationintheNovemberand
December,2006,issuesoftheAvailabilityDigest.
1
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

source system fail – transactions in the replication pipeline will be lost. Furthermore, there is the
chancethatsimultaneousupdatestothesamerowatdifferentnodeswillresultindatacollisions.
Datalossanddatacollisionscanbeavoidedbyusing synchronousreplication.Withsynchronous
replication, the commit of a transaction is delayed until all database copies have informed the
source system that they have safe-stored the changes associated with that transaction and are
readytocommit.Thisresultsinsomewhatlongertransactiontimes.
Hardware replication2 replicates changed physical blocks as they are flushed from cache to disk
rather than replicating logical database changes. Hardware replication can also be asynchronous
or synchronous. However, hardware replication suffers from the fact that the target database is
not consistent during replication and cannot be used for processing. Therefore, hardware
replicationisnotsuitableforactive/activesystems.
Transaction Replication
Transaction replication3 is yet another technique for maintaining database copy synchronization.
Rather than replicating changes, transaction replication replicates entire transactions. Each
system node that is directly attached to a database copy independently processes each and
everytransactionandupdatesitsdatabasecopy.
As a result, each database copy contains an up-to-date copy of the application. All nodes are
actively processing transactions, and the various copies can be used by applications at different
nodescooperatinginanactive/activeenvironment.
TransactionRouting
There are two ways in which transactions can be distributed to the nodes in the application
network.Oneis for thenetwork torouteeachtransactiontoallnodes.Eachnode thenprocesses
thetransactionindependentlyoftheothernodesandnearlysimultaneouslywiththosenodes.
data data data data
base base base base
nodeA nodeB nodeA nodeB
transactions
router
transactions transactions
transactions
NetworkRouting NodeRouting
The other technique is for each node to receive transactions from its own sources. As part of its
processing, a node transmits each transaction to the other nodes, which also process the
transaction. Thus, all nodes process all transactions. A potential advantage of this technique is
2
SeeourarticleentitledHardwareReplicationintheJanuary,2007,issueoftheAvailabilityDigest.
3
SeeChapter4,Active/ActiveTopologies,BreakingtheAvailabilityBarrier:AchievingCenturyUptimeswithActive/Active
Systems,tobepublishedin2007.
2
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

that partially processed transactions may be sent to the other nodes, thus reducing their
processing time for “second-hand” transactions. The downside of this method is that additional
communicationfacilitiesmaybeneeded.
DataCollisions
With asynchronous change replication as described earlier, there is the problem of data
collisions. A data collision occurs when two users at different nodes attempt to update the same
row almost simultaneously – within the replication latency time of the data replication engine
(replicationlatencyisthetimethatittakesforatransactiontobepostedtothetargetsystemafter
ithasbeenpostedtothesourcesystem). Theresultisthateachupdateisreplicatedtotheother
system and overwrites the update that already had been made there. The database copies are
nowdifferent,andeachiswrong.
Transactionreplication does notsufferfrom datacollisions.However, itbrings withit its ownform
of potential database corruption. It is possible for each system to process the transaction
differently.Thiswillgenerallybecausedbythenodesreceivingtransactionsinadifferentorder.
For instance, consider an order entry system comprising a two-node active/active system. Node
Areceivesanorderfrom Customer1forsixitems.NodeBreceivesanorderfromCustomer2for
three of the same item. There are seven such items in stock. Node A processes its order and
sendsittoNodeB.Atthesametime,NodeBprocessesitsorderandsendsittoNodeA.NodeA
thenprocessesNodeB’sorder,andNodeBprocessesNodeA’sorder.
The result is that Node A has satisfied Customer 1’s order for six items and Customer 2’s order
for one item and has backordered two items for Customer 2. However, Node B has satisfied
Customer2’sorderforthreeitemsandCustomer1’sorderforfouritems.Ithasback orderedtwo
itemsforCustomer1.
This particular case can be disastrous if both systems have taken subsequent action
independently and have attempted to send six items to Customer 1 (Node A) and three items to
Customer2(NodeB).Theerrorwouldbenotedbytheshippingsystem,andonecustomerwould
have to be reprocessed and notified of the changed status of his order (to his consternation, no
doubt).
Thepossibilityforandtypeofdatacorruptionthatcanbecausedbytransactionreplicationisvery
application-sensitive. The above example shows that data corruption can indeed happen. The
onlycorrectionis toperiodicallycomparethedatabases viaan onlinecompareandrepair facility4
and denote one of the databases as the database of record. Any discrepancies are resolved by
synchronizing the divergent databases with the database of record. This, however, corrects the
problemafterthefactandmaynotbeacceptable.
In some cases, after-the-fact database correction may be acceptable, especially if no immediate
action is taken based on the outcome of the transactions. There are also applications for which
thistypeofdatabasecorruptionwillnotoccur.Applications whichonlyinsertrows intoadatabase
aresuch an example.For instance, atelephonyapplication which logs call detail records for later
billingissuchanexample.
4
SeeChapter12,SOLV,inBreakingtheAvailabilityBarrier:AchievingCenturyUptimeswithActive/ActiveSystems,to
bepublishedin2007.
3
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

SystemCapacity
With transaction replication, all systems are processing all transactions; so the highly scalable
attributeofactive/activesystemsislost.Thoughthesystem willprovidetherapidfailoverinherent
with active/active systems, its capacity is limited to that of a single node. It cannot be scaled by
simplyaddingnodes.
This problem can be somewhat softened if node routing is used and if the “second-hand”
transactions are partially processed so that their subsequent processing time in the other nodes
is reduced. In this case, each node fully processes the transactions directly routed to it but has
reduced processing requirements for transactions that have been forwarded to it by other nodes.
Partialscalabilityhasbeenachieved.
This capacity issue may not be of concern in a two-node active/active system if each node must
beconfiguredanywaytobeabletohandlethefullloadshouldtheothernodefail.
Applicability to Active/Active Configurations
In spite of the data corruption and scalability problems, transaction replication has found
applicabilitytoactive/activesystems.
 It may be easier to implement an active/active system with transaction replication since
nospecialfacilitiesneedbeinstalledandmanagedfordatareplication.
 In a two-node system, the dual processing of each transaction may not be seen as a
problem sinceeachnodehastohandlethefullprocessingloadanywayshouldtheother
nodefail.
 Sending transactions to the nearest node can take advantage of locality to improve
performancebyminimizingnetworklatency.
 Spreading transaction processing across multiple nodes gives one the confidence that
the backup systems will be working when needed since each is actively processing
transactions.
 Transactionreplicationis a better use of abackupsystem thanletting itsit idle as acold
standby. By letting the backup system also process all transactions, it is immediately
available as a “sizzling-hot standby.” It can take over processing in the event of a failure
of the primarysystem bysimplyswitching users to it. Its applications are already up and
running, and its database is current. If transactions are sent to it by the primary system
rather than by the network, transaction order is guaranteed; and the possibility of data
corruptionasdescribedaboveisvirtuallyeliminated.
A caveat is appropriate here for transaction replication and is applicable to all active/active
systems. Special care must be taken to ensure that the application is active/active-ready.5 There
are many application constructs that are not compatible with active/active processing. For
instance, if unique number generators are used (for instance, to create customer or part
numbers), node uniqueness must be added to prevent the duplication of numbers. Locking
protocols may have to be modified. Memory-resident context may have to be made available to
5
SeeChapter8,EliminatingPlannedOutageswithZeroDowntimeMigration,BreakingtheAvailabilityBarrier:Achieving
CenturyUptimeswithActive/ActiveSystems,tobepublishedin2007.
4
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

othernodes.Caremustbetakentoensurethattheapplicationcan,infact,runinanactive/active
environment.
Advantages of Transaction Replication
Insummary,theadvantagesoftransactionreplicationincludethefollowing:
 Itprovidestheavailabilityadvantagesofactive/active systems.Extremeavailabilities with
near-instantaneousrecoverycanbeachieved.
 It is nonintrusive. Applications do not need to be changed (providing that they are
active/active-ready).
 Itcanprovidelocalityfortransactionprocessing.
 Itcanbeusedeasilyforinsert-onlyapplications.
 It is a better use of a cold standby system and provides the capability for immediate and
assuredrecovery.
Disadvantages of Transaction Replication
Transactionreplicationcomeswithsomesignificantdisadvantages:
 It is not scalable. If some pre-processing is done on second-hand transactions, it maybe
somewhatscalable.However,scalabilitymaynot bea problem if eachnodemusthandle
theentiretransactionloadinafailuresituation.
 Itcancreateinconsistentdatabasecopiesforapplicationsotherthaninsert-only.
 Recovery of a failed node requires an online database copy. There is no Change Queue
available from which to recover by simply draining the queue of changes that had
accumulatedduringitsdowntime.
Examples
Therearemanyexamplesofthesuccessfuluseoftransactionreplication.
 Bank-Verlag uses transaction replication to operate a pair of NonStop nodes in an
active/active configuration.6 This system provides debit card maintenance and
authorization for 300 German banks. Because this system is fundamentally subject to
data corruption due to different processing paths for a transaction, Bank-Verlag verifies
the database periodically by comparing the two databases. Interestingly, they report that
theyhavenotseenacaseofdatacorruptioninseventeenyearsofoperation.
 TheNew York Racing Association’s firsttotalizator system usedtransactionreplication to
provide a sizzling-hot standby configuration.7 The totalizator system accepts wagers and
posts odds and payoffs on the large infield boards and on monitors around its Aqueduct,
Belmont, and Saratoga race tracks. In its case, means are provided to synchronize the
order of transaction processing between the active and backup systems to avoid
databasecorruption.
 A major retailer uses transaction replication to run a gift-card system. This is an insert-
onlyapplicationsothatdatacorruptionisnotaproblem.
6
Seeourarticleentitled,Bank-Verlag–TheActive/ActivePioneer,intheDecember,2006,issueoftheAvailability
Digest.
7
Seeourarticleentitled,CPAatAqueduct,Belmont,andSaratogaRaceTrack,intheJanuary,2007,issueofthe
AvailabilityDigest.
5
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

Summary
Transactionreplicationisanothertechniquethatisbeingusedtodayforsynchronizingdatabase
copiesinanactive/activesystem.Itcomeswithitsownsetofadvantagesandissues.
The primary issue with transaction replication is database corruption should a transaction be
processed differently in two different nodes. There are certain types of applications that are
corruption-safe,suchasinsert-onlyapplications.
Scalability is another concern since all nodes must process all transactions. However, in two-
node active/active applications, this may not be a problem if the nodes have to be sized anyway
to carry the entire transaction load. This is necessary if a node is to be able to provide the
requiredcapacityintheeventofthefailureoftheothernode.
Replicated transactions may provide an easier implementation path than data replication. It is an
idealtechniquetosupportasizzling-hotstandbysystemforimmediateandassuredfailover.
6
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman
