The 25 Most Exploitable Programming Errors
February2013
The Department of Homeland Security (DHS) Office of Cybersecurity and
Communications publishes a detailed list of the twenty-five most egregious
programming errors that lead to exploitable security vulnerabilities that have made
software so vulnerable to hackers and cybercriminals. International in scope and free
forpublicuse,theCommonWeaknessEnumeration(CWE)(https://buildsecurityin.us-
cert.gov/swa/cwe/) is acommunity-developeddictionaryofsoftware weaknesses.The
toptwenty-fiveCWEsrepresentthemostsignificantexploitablesoftwareconstructs in
thisdictionary
The CWE provides descriptions of the most common and serious exploitable software constructs. They
are often easy to find and to exploit by cybercriminals. They are dangerous because they will frequently
allow attackers to completely take over the system, steal data, or prevent the system from working at all.
Consequently,theCWEcanaidintheeducationandtrainingofprogrammersonhowtoeliminateall-too-
commonerrorsthatcanbecompromisedbymalware.
The CWE is the result of collaboration between the SANS Institute, MITRE, and many top software
security experts in the US and Europe. MITRE maintains the CWE web site with the support of the U.S.
Department of Homeland Security's National Cyber Security Division. The web site provides detailed
descriptions of these errors along with authoritative guidance for mitigating and avoiding them.
Furthermore, the CWE web site contains data on more than 800 programming errors, design errors, and
architectureerrorsthatcanleadtoexploitablevulnerabilities.
The CWE top twenty-five vulnerabilities are updated each year. The hundreds of vulnerabilities listed on
the CWE web site are prioritized using inputs from over twenty organizations. Prioritization is based on
prevalence, importance, and likelihood of exploit using the Common Weakness Scoring System, CWSS
(http://cwe.mitre.org/cwss/).
The Top Twenty-Five Vulnerabilities
Themostrecenttoptwenty-fivevulnerabilitieslistedontheCWEwebsiteincludethefollowinginorderof
theirseriousness:
Rank Vulnerability
1 ImproperNeutralizationofSpecialElementsusedinanSQLCommand('SQLInjection')
2 ImproperNeutralizationofSpecialElementsusedinanOSCommand('OSCommand
Injection')
3 BufferCopywithoutCheckingSizeofInput('ClassicBufferOverflow')
4 ImproperNeutralizationofInputDuringWebPageGeneration('Cross-SiteScripting')
5 MissingAuthenticationforCriticalFunction
1
©2013SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

6 MissingAuthorization
7 UseofHard-codedCredentials
8 MissingEncryptionofSensitiveData
9 UnrestrictedUploadofFilewithDangerousType
10 RelianceonUntrustedInputsinaSecurityDecision
11 ExecutionwithUnnecessaryPrivileges
12 Cross-SiteRequestForgery(CSRF)
13 ImproperLimitationofaPathnametoaRestrictedDirectory('PathTraversal')
14 DownloadofCodeWithoutIntegrityCheck
15 IncorrectAuthorization
16 InclusionofFunctionalityfromUntrustedControlSphere
17 IncorrectPermissionAssignmentforCriticalResource
18 UseofPotentiallyDangerousFunction
19 UseofaBrokenorRiskyCryptographicAlgorithm
20 IncorrectCalculationofBufferSize
21 ImproperRestrictionofExcessiveAuthenticationAttempts
22 URLRedirectiontoUntrustedSite('OpenRedirect')
23 UncontrolledFormatString
24 IntegerOverfloworWraparound
25 UseofaOne-WayHashwithoutaSalt
Types of Vulnerabilities
The top twenty-five vulnerabilities are further characterized into categories that describe the general form
ofthevulnerabilitythattheypose:
InsecureInteractionBetweenComponents
These weaknesses are related to insecure ways in which data is sent and received between separate
components,modules,programs,processes,threads,orsystems.
Rank Vulnerability
1 ImproperNeutralizationofSpecialElementsusedinanSQLCommand('SQLInjection')
2 ImproperNeutralizationofSpecialElementsusedinanOSCommand('OSCommand
Injection')
4 ImproperNeutralizationofInputDuringWebPageGeneration('Cross-SiteScripting')
9 UnrestrictedUploadofFilewithDangerousType
12 Cross-SiteRequestForgery(CSRF)
22 URLRedirectiontoUntrustedSite('OpenRedirect')
RiskyResourceManagement
The weaknesses in this category are related to ways in which software does not properly manage the
creation,usage,transfer,ordestructionofimportantsystemresources.
Rank Vulnerability
3 BufferCopywithoutCheckingSizeofInput('ClassicBufferOverflow')
13 ImproperLimitationofaPathnametoaRestrictedDirectory('PathTraversal')
14 DownloadofCodeWithoutIntegrityCheck
16 InclusionofFunctionalityfromUntrustedControlSphere
18 UseofPotentiallyDangerousFunction
20 IncorrectCalculationofBufferSize
23 UncontrolledFormatString
24 IntegerOverfloworWraparound
2
©2013SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

PorousDefenses
The weaknesses in this category are related to defensive techniques that are often misused, abused, or
justplainignored.
Rank Vulnerability
5 MissingAuthenticationforCriticalFunction
6 MissingAuthorization
7 UseofHard-codedCredentials
8 MissingEncryptionofSensitiveData
10 RelianceonUntrustedInputsinaSecurityDecision
11 ExecutionwithUnnecessaryPrivileges
15 IncorrectAuthorization
17 IncorrectPermissionAssignmentforCriticalResource
19 UseofaBrokenorRiskyCryptographicAlgorithm
21 ImproperRestrictionofExcessiveAuthenticationAttempts
25 UseofaOne-WayHashwithoutaSalt
Detailed Vulnerability Description
Foreachvulnerability,agreatdealofinformationisgiven.
Summary
Anoverallevaluationof the seriousness of thevulnerabilityis given.For instance, SQLInjection(Rank 1)
isevaluatedasfollows:
WeaknessPrevalence: High
RemediationCost: Low
AttackFrequency: Often
Consequences: Securitybypass,dataloss
EaseofDetection: Easy
AttackerAwareness: High
Discussion
A general description is given of the effects of the vulnerability. For instance, for SQL Injection, the CWS
points out that if attackers can influence the SQL statements that you use to access your database, they
have access to all of your data. If you use SQL queries in security controls such as authentication,
attackers can alter the logic of these queries to bypass security. SQL injection was responsible for the
high-profilecompromisesofcompaniessuchasSony,PBS,andMySQL.com.
TechnicalDetails
The CWE goes into depth in its explanation of the vulnerability. The explanation includes a detailed
technical description, the points in the project life cycle where the vulnerability might be introduced, and
itscommonconsequences.
CodingExamples
Extensive coding examples showing improper codingtechniques that can be exploited byan attacker are
provided. An illuminating example is given for SQL Injection. This example is copied directly from the
CWE.ConsiderthefollowingSQLstatement:
3
©2013SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

stringquery="SELECT*FROMitemsWHEREowner='"+userName+"'ANDitemname='"+
ItemName.Text+"'";
Thequerythatthiscodeintendstoexecuteis:
SELECT*FROMitemsWHEREowner=<userName>ANDitemname=<itemName>;
However,becausethequeryisconstructeddynamicallybyconcatenatingaconstantbasequery
stringandauserinputstring,thequeryonlybehavescorrectlyifitemNamedoesnotcontainasingle-
quotecharacter.Ifanattackerwiththeusernamewileyentersthestring:
name'OR'a'='a
foritemName,thenthequerybecomesthefollowing:
SELECT*FROMitemsWHEREowner='wiley'ANDitemname='name'OR'a'='a';
Theadditionofthe:
OR'a'='a'
conditioncausestheWHEREclausetoalwaysevaluatetotrue,sothequerybecomeslogically
equivalenttothemuchsimplerquery:
SELECT*FROMitems;
Thissimplificationofthequeryallowstheattackertobypasstherequirementthatthequeryonly
returnitemsownedbytheauthenticateduser.Thequerynowreturnsallentriesstoredintheitems
table,regardlessoftheirspecifiedowner.
Thisisjustoneexampleofthemultitudeofcodingexamplesforthetoptwenty-fivevulnerabilitiesfoundin
theCWE.
DetectionMethods
Various methods for detecting the vulnerability are presented, including the effectiveness of automatic
staticanalysis,automaticdynamicanalysis,andmanualanalysis.
Preventionand Mitigation
Several suggestions are offered for preventing or mitigating the vulnerability. They include procedures to
followinthearchitectural,design,implementation,deployment,andoperationalphasesoftheproject.
Summary
The CWE is another example of the Department of Homeland Security’s fight against cybercrime. Last
December,2012,itissuedawarningtodisableJava7becauseofvulnerabilitiesthatOraclehas yetbeen
unabletocorrect.1
The detailed descriptions for the “CWE Top 25 Most Dangerous Software Errors” can be found at
http://cwe.mitre.org/top25/#CWE-89.
1DepartmentofHomelandSecuritySays,“DisableJava”,AvailabilityDigest;January2013.
http://www.availabilitydigest.com/public_articles/0801/disable-java.pdf
4
©2013SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

A handy Pocket Guide (30 pages) summarizing the top twenty-five vulnerabilities, entitled “Key Practices
forMitigatingtheMostEgregiousExploitableSoftwareWeaknesses,”maybefoundat
https://buildsecurityin.us-cert.gov/swa/downloads/KeyPracticesMWV13_02AM091111.pdf.
5
©2013SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com