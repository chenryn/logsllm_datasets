Distributed Systems: Principles and Paradigms
January2008
Distributed Systems: Principles and Paradigms1 is a thorough description of the theory and
practice behind distributed systems. Authored by Andrew Tanenbaum and Maarten Van Steen,
Professors of Computer Sciences at Vrije University in Amsterdam, The Netherlands, this book
dealswiththemyriadissuesthatmustbefacedwhenimplementingdistributedsystems.
Theauthors define adistributedsystem as acollection ofindependentcomputers thatappears to
itsusersasasinglecoherentsystem.
Inherent in this definition is the concept of transparency. There are several aspects of
transparencyapplicabletoadistributedsystem,allrelatedtoitssystemresources:
 Access–Hidethedifferencesindatarepresentationandhowaresourceisaccessed.
 Location–Hidewherearesourceislocated.
 Migration–Hidethataresourcemaymovetoanotherlocation.
 Relocation–Hidethataresourcemaybemovedtoanotherlocationwhileinuse.
 Replication–Hidethataresourceisreplicated.
 Concurrency–Hidethataresourcemaybesharedbyseveralcompetitiveusers.
 Failure–Hidethefailureandrecoveryofaresource.
Anothermajorissuefacedindistributedsystemsisscalability.Adistributedsystem:
 must be scalable with respect to its size – more users and resources can be easily
added.
 mustbegeographicallyscalable–usersandresourcesmaybefarapart.
 must be administratively scalable – system management is easy even if the system
spansmanyindependentorganizations.
Commonmisassumptionsinthedesignofdistributedsystemsinclude:
 Thenetworkisreliable.
 Thenetworkissecure.
 Thenetworkishomogeneous.
 Thetopologydoesnotchange.
 Latencyiszero.
 Bandwidthisinfinite.
 Transportcostiszero.
 Thereisoneadministrator.
1A.S.Tanenbaum,M.VanSteen,DistributedSystems:PrinciplesandParadigms,PearsonPrenticeHall;2007.
1
©2008SombersAssociates,Inc.,andW.H.Highleyman

This book explores various distributed system attributes that are associated with transparency
and scalability and that relate to problems that are caused by one or more of the above
assumptionsbeingfalse.
Distributed System Architectures
The authors point out that there are two aspects to a distributed system architecture – the
hardwareconfigurationandthesoftwarearchitecture.Softwarearchitecturalstylesinclude:
 Layered architectures, in which components are organized into layers. A component can
invoketheservicesofanunderlyingcomponentbutnottheotherwayaround.
 Object-based architectures, in which components (the objects) are organized in a mesh
andinteractviaremoteprocedurecalls.
 Data-centered architectures, in which components communicate through a common
repository.
 Event-based architectures, in which components communicate via events, such as in a
publish/subscribesystem.
The client/server model of component interaction is described in detail and is applied to each of
these architectures. It is noted that in peer-to-peer architectures, a process may act as both a
clientandaserver.
Self-managementofdistributedsystemsisbrieflyexploredwithseveralexamples.
Processes
A process is a program in execution. In centralized systems, the management and scheduling of
processes are the most important issues with which to deal. However, in distributed systems,
there are many additional issues, such as concurrent processing within a process, virtualization,
andprocessmigration.
Concurrent processing within a process is typically implemented bythreads. The authors discuss
indetailuserthreads,kernelthreads,andlightweightprocesses.Animportantpropertyofthreads
isthattheyprovideameanstoallowblockingsystemcallswithoutblockingtheentireprocess.
In distributed systems, threads are particularly important for clients that would otherwise be
blocked due to communication latency as they make a request to a remote server and await its
response.Asincentralizedsystems,threadsareimportanttoserverstoletthemprocessmultiple
requestsatatime.
Virtualization allows many processes to run on a single physical server in their own virtual
machines. Virtualization is important in today’s large data centers to support the “new legacy”
applications as hardwareandoperatingsystems evolveandtoconsolidatethenumber ofservers
requiredtosupportanenterprise’sneeds.Theauthorsdescribefourapproachestovirtualization:
 An interface between hardware and software consisting of machine instructions that can
beinvokedbyaprogram.
 An interface between hardware and software consisting of machine instructions that can
beinvokedonlybyprivilegedprogramssuchasanoperatingsystem.
 Aninterfaceconsistingofsystemcallsasofferedbyanoperatingsystem.
 Aninterfaceconsistingoflibrarycalls.
2
©2008SombersAssociates,Inc.,andW.H.Highleyman

Process migration is important to optimize performance through load balancing and by moving
parts of a client or server process closer to the data that is being processed. Various models for
process migration are described. These models allow code to be moved even while it is active.
One common model is to move blocks of code casually, resending those blocks that have
changed. When most of the code has been moved, a brief stop-and-copy phase is entered in
whichanyremainingcodeblocksaremoved.
Communication
Interprocess communication is at the heart of all distributed systems. The authors look at three
widely-used models for Interprocess communication: remote procedure calls (RPCs), message-
orientedmiddleware(MOM),anddatastreaming.
RPCs use client and server stubs to pass procedure calls to the server. The syntax for the
procedure calls is defined in an IDL (interface definition language). RPC mechanisms are
inherently synchronous in that the client is blocked after making a procedure call until the
procedure completes. However, some RPC systems provide facilities for asynchronous client
operation in which the client is released immediately after sending its request and is later
interruptedwiththereply.TheDCE(DistributedComputingEnvironment)RPCispresentedasan
example.
MOM supports both transient and persistent communications. With transient messaging, the
receiver mustbeupandrunninginorder toreceivethemessage.Withpersistentmessaging,the
receiving process does not have to be running when the sending process transmits a message.
Rather, a sender moves a message to a send queue; and the MOM engine sends the queued
message to a receiver queue. At its leisure (perhaps after it is once again running), the receiving
process reads the message from its queue and processes it. IBM’s WebSphere MQ (originally
knownasMQseries)isusedasanexampleofMOM.
Data streaming is used to send temporally sensitive data. This might include video and audio
signals. A particular problem in data streaming is synchronizing related streams. Examples of
related streams are video with its associated audio, multichannel stereo audio, and audio
associatedwithslidesinWebcasts.Severalsolutionstostreamsynchronizationarecovered.
Finally,multicasting,inwhichinformationissenttomultiplereceivers,iscovered.
Naming
Names areusedtoshareresources,to uniquelyidentifyentities,andtorefer to locations, among
otheruses.Namesmaybeflat(suchasanIPaddress)ormaybestructured(suchasaURL).
Namingservicesmaybedistributedacrossmultiplemachinesforperformanceandreliability.The
authorsexplorevarious waysinwhichnamescanberesolvedtothephysicalentity.Forinstance,
finding the physical resource corresponding to an IP address (a flat name) on a LAN is done via
an ARP (address resolution protocol) request. The requester broadcasts a request message that
askswhohastheIPaddress,andthatentityrespondswithitsphysicaladdress.
An example of the resolution of structured names is the use of distributed DNS (Domain Name
System)serverstoresolveWebURLnames.DNSisdescribedindetail.
Home agents can be used to resolve mobile names to their locations. For instance, a cell phone
is registered with a HomeLocation Register (HLR) that is kept informed of the location of the cell
phone via the cell-phone network. The HLR is used by the network to resolve the cell-phone
numbertoalocation(i.e.,itsclosestcelltower).
3
©2008SombersAssociates,Inc.,andW.H.Highleyman

An entity can be described by a set of its attributes rather than by a name. The use of LDAP
(Lightweight Directory Access Protocol) is described as an example of resolving attribute-based
names.
Synchronization
There are three major areas in which distributed systems must synchronize with each other. One
is time synchronization. Another is in the competition for common resources. The third is the
electionofcoordinators.
The authors explain several algorithms for keeping geographically-separated systems in time
synchronization. They start by describing current techniques for maintaining accurate time within
asystem,includingatomicclocks,GPS,andradiostationsthatbroadcastthetime.Algorithmsfor
synchronizing remote systems with a system that has an accurate clock or for simply
synchronizing systems with no reference to an accurate clock are discussed. Primary among
theseisNTP,theNetworkTimeProtocol,incommonusetoday.
Also explained in some depth are Lamport logical clocks that can not only maintain systems in
timesynchronism,butcanalsoguaranteethecorrectorderingof theprocessing of events across
thenetwork.
Methods for controlling access to common resources using mutual exclusion mechanisms are
