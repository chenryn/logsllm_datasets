Roadmap to the Megaplex
July2010
TheStandishGroup
In our December, 2009, issue of the Availability Digest, we reviewed Megaplex: An Odyssey of
Innovation, a history prepared by The Standish Group (www.standishgroup.com). The history
covers 35 years of unique technical innovations brought to us by Tandem computers, now HP
NonStop servers.1 Standish defined the Megaplex as “a fabric of resources that will provide for
application services for the next 35 years.” It goes on to predict that ”in the future, NonStop
technologywillbethebasisfortheMegaplex.”
The Standish Group has now published a roadmap of how this is going to happen. In its white
paper, Roadmap to the Megaplex,2 Standish further defines the Megaplex as “a collection of
server blades acting together as a single system using multiple types of operating systems,
databases, and other computer resources. The Megaplex is the cornerstone technology for the
truly integrated data center where resources are acting in virtualized peer collaboration. The
Megaplex will operate Linux, Microsoft Server, NonStop OS, OpenVMS, and various types of
Unix, including NonStop OSS. The Megaplex will also integrate databases such as Oracle,
Sybase,DB2,NonStopSQL,andSQLServer.”
Standish submits that shifting critical applications from running purely on NonStop systems to
running in the Megaplex shifts much of the workload from higher-priced processing to lower-
priced processing without sacrificing availability. It estimates that this move can save in the order
of 40% for safety-critical applications, 35% for mission-critical applications, 33% for business-
criticalapplications,and20%fortask-criticalapplications.
The purpose of Standish’s paper is to provide a roadmap for moving vertical NonStop stovepipe
applications into the horizontal services of the fully integrated data center – the Megaplex. It
proposessixstepsformodernizingNonStopapplications:
1. Database Modernization: Movingfrom Enscribe,the NonStop legacyfilesystem from the
Tandemdays,toNonStopSQL,theopenstandardrelationaldatabase.
2. User Experience Modernization: Moving from green screens to modern graphical user
interfaces(GUIs)andawebpresence.
3. ApplicationModernization: Changingtheapplications toreflectthefeatures andfunctions
ofcurrentprinciples,processes,andtechniques.
1Megaplex:AnOdysseyofInnovation,AvailabilityDigest;December2009.
http://www.availabilitydigest.com/public_articles/0412/megaplex.pdf.
2http://standishgroup.com/sample_research/register.php?pid=nsmx.
1
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

4. Availability Modernization Changing from traditional availability and disaster-recovery
methodstocontinuousavailability.
5. Security Modernization: Moving from the traditional passive security and protection
systemstoproactivemeasures.
6. Operational Modernization: Moving from a vertical structure to a horizontal structure by
addinghorizontalserviceviews.
The paper reviews each of these steps, illustrating them with case studies, estimated savings,
andtypicalproducts.
Step 1: Database Modernization
ConvertingfromEnscribetoNonStopSQL
This first step is fundamental to progressing to the further steps. For NonStop systems, it means
converting from the old Enscribe file system to HP NonStop SQL, the open-standard relational
database. Many of the modern GUI, SOA (service-oriented architecture), data mining, reporting,
anddevelopmenttoolsdependuponSQL.
There are two ways to migrate legacy databases. One is to extract and move the data from
Enscribe to a SQL database and to reprogram the applications to use SQL rather than Enscribe.
The other is to use a database gateway to make the conversion in real time and then to convert
applications and tables in an orderly manner. The first method is expensive and risky. Using a
gatewayiscosteffectiveandsafe.
Logica–ACaseStudy
Logica is a $6 billion management and IT consultancy providing IT system
integration, products, services, and support to the financial community. It
markets its thirty-year oldBESS wireserviceandpaymentssystem tobanks
aroundthe world.BESSfullysupports theFED,CHIPS,SWIFT,andTELEX
protocolsandmessageformats.
Originally developed by Data Architects in the early 1980s, BESS was built using TAL and
Enscribe running on the Tandem platform. After its acquisition of Data Architects, Logica
significantly expanded the core product over the years. However, several important advanced
functionsthatwouldbedesirableinBESS wereconsideredtooriskyandexpensivetoundertake,
mainlyduetotheEnscribedatabase.
To solve this problem, Logica started a program to modernize BESS in 2007. It used the
database gateway approach and chose Escort SQL from Carr Scott Software to make the
conversion. Using this approach, Logica had its first database converted and functioning within
oneweek.
The heart of BESS’ first modernized release in 2009 was the conversion from Enscribe to SQL.
This allowed the banks to add new functionality such as data mining, new business lines, and
new program flows. It also allowed Logica to make many fundamental improvements that would
havebeentooriskywiththeoriginalEnscribefiles.
LogicaiscontinuingthemodernizationofBESSwithgreatsuccess.
2
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Step 2: User Experience Modernization
ReplacingGreenScreensandProvidingAccesstotheWeb
Nothing is more visible to users than a modern GUI. It will change the perception of users and
managementregardingtheapplicationandtheNonStopplatform.
Opening up the application to theWeb gives it access to the greater world, providing more value
for the application investment. This one change will make a significant difference in user
productivityandacceptance.
There are basically two ways to modernize the user experience – rewrite all of the screens, and
modify the applications to use web services; or use a conversion tool. The first method is time-
consuming, expensive and risky; whereas the use of a conversion tool makes the migration safe
andefficient.
AIT–ACaseStudy
Applied Industrial Technologies is a major distributor of
industrial parts. It developed OMNEX, an enterprise
distribution application, 15 years ago. OMNEX quickly
became the core of AIT’s IT services. OMNEX was written in COBOL and Screen COBOL
(SCOBOL)usingthestandardTandemrequestor/servermodel.
AIT developed the application for use by its industrial sales specialists using green-screen
technology. Its sales professionals adapted quickly to the early system because of its limited
functionality. However, as time passed, significant functionality was added; and new sales
personnelfoundthesystemdifficultandintimidating.
Consequently, in 2005, AIT initiated a modernization program called Asyst to replace its green
screenswithmodernGUIsandtointegrateOMNEXwithotherAITapplicationsandtheWeb.The
new system is now substantially complete, and the learning time for new sales associates has
been cut from two years to two weeks. Furthermore, much more information is now available on
anorder-entryscreen,suchasproductspecificationsanddrawings.
AIT selected the Application Modernization Suite (AMS) from comForte GmbH to do the
conversion. Five developers worked on the conversion for only one year before the initial rollout
inlate2005.AIThascontinuedsincethentoaddfunctionalitywithlittlerisktotheapplication.
Step 3: Application Modernization
IntegratingNonStopApplicationsWiththeRestoftheEnterprise
Application modernization is the process of taking legacy code and using modern languages,
tools, components, and other services to add substantial value to the application. This allows
changingtheapplicationtoreflectthefeaturesandfunctionsofcurrentprinciples,processes,and
techniquesoftheorganization.
Thereareseveralwaysthatapplicationmodernizationcanbeachieved.Onewaythatissafeand
relatively quick is to purchase an off-the-shelf product. However, it may need significant
enhancement to meet the organization’s needs. Another approach is to rewrite the application
using modern tools and technology. However, this approach is expensive, time consuming, and
risky.
3
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

An alternative is to renovate the existing application with a Service Oriented Architecture (SOA).
SOA allows the reuse of existing code on the NonStop server with a standard messaging
interface that allows the application to interface with other applications running on different
platforms. Using SOA technology, an organization can modernize an application while continuing
toleverageitscurrentfunctionality.
RoyalBankofCanada–ACaseStudy
The Royal Bank of Canada (RBC) is the largest financial institution in Canada,
serving more than 17 million clients worldwide. Its Royal International Money
Management System (RIMMS) provides wholesale high-value payment
processing. RIMMS started out as an off-the-shelf application package in the early
1980s,butRBCpurchasedthesourcecodeandhassignificantlyenhancedit.
Today, RIMMS supports a full range of international wholesale banking
instruments, including FX, MM, derivatives, synthetics, debt equities, and loans. It has become a
core part of the RBC treasury function. However, RIMMS was written in TAL and COBOL using
greenscreensandwasdifficulttoenhance.
RBC needed to add a web presence for RIMMS and a way for it to interface with other RBC
functions such as trading. To do this, RBC decided to encapsulate RIMMS in a service-oriented
architecture to bring agility and flexibility to RBC’s treasury business. This architecture would
