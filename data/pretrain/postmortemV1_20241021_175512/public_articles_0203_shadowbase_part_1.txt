Shadowbase – The Active/Active Solution
March2007
Active/active systems achieve their extreme availabilities through distributed processing. Multiple
independentnodessharethetransactionprocessingloadsuchthatanytransactioncanberouted
to any node and be processed properly. Should a node fail, all subsequent transactions are
routed to the surviving nodes. Transaction rerouting can be accomplished so quickly that users
are unaware of the failure. In effect, there has been no failure; and the perceived availability of
thesystemcanbemeasuredincenturies.
The proper implementation of an active/active system requires that multiple geographically-
distributed database copies be kept in synchronization so that any processing node in the
application network has access to at least two database copies should one fail. Proper database
synchronizationrequirestheabilityto
 replicatedatachanges from onedatabasetotheother databasecopies intheapplication
networksothatalldatabasecopiesmaintainthesameapplicationstate,
 copy a database that is being actively updated in order to create or recover a remote
databasecopy,
 comparetwodatabasestoverifythattheyareidentical,and
 bringtwodatabasesintosynchronismifnecessary.
The Shadowbase suite of data replication tools from Gravic, Inc., performs all of the above
functions. In addition to active/active systems, these products have many other uses, such as
providing a hot standby; integrating disparate systems in heterogeneous applications; offloading
query, backup, and extract activities from one system to another; online restoration of corrupted
databases;andeliminatingplanneddowntime.
TheShadowbasesuiteofproductsincludes:
 theShadowbasedatareplicationengine,and
 SOLV,theShadowbaseonlinecopy,verification,andvalidationutility.
1
©2007SombersAssociates,Inc.,andW.H.Highleyman

The Shadowbase Data Replication Engine
The Shadowbase data replication engine1 replicates changes from one database to another in
highly heterogeneous configurations. It is an asynchronous replication engine and therefore is
transparent to application processing. It imposes no performance impact on application
processing and is non-intrusive in that it requires no changes to be made to the applications
themselves.
Shadowbase can be configured for unidirectional replication for applications such as hot standby
or query offloading. It can also be configured for bidirectional replication to support active/active
architectures.
Itprovides veryfastreplicationandminimizesreplicationlatency(thetimefrom whenachangeis
made to the source database to when it is applied to the target database) by eliminating disk
queuing points. Its throughput can be expanded by running it in a multithreaded configuration. In
this configuration, it ensures the proper ordering of transactions being applied to the target
databasetomaintainreferentialintegrity.
In its bidirectional configuration, Shadowbase prevents ping-ponging (the rereplication of a
change from the target system back to the source system). A major issue with bidirectional
asynchronous replication is data collisions. A data collision occurs when nearly simultaneous
changes aremadetothesamerowin differentdatabasecopies suchthatthereplicatedchanges
will overwrite the original changes. Shadowbase provides data-collision detection and supports
manystrategiesforautomaticcollisionresolution.
Heterogeneity
The Shadowbase data replication engine replicates data between a variety of databases running
ona number of differentsystems. Anyvalid sourcedatabase runningonanyvalidsourcesystem
can replicate to any valid target database running on any valid target system, thus supporting a
wide range of heterogeneous operations. The current valid source and target systems are
tabulated below. Note that any database or system that can act as a source system can also act
asatargetsystem.
Source/Target Source/Target Target Target
Databases Systems Databases Systems
NonStopSQL NonStopserver DB2 OpenVMS
NonStopEnscribe Linux Sybase AS400
Oracle Unix MySQL
SQLServer Windows
Topologies
AShadowbasenetworkcanconsistofanynumberofheterogeneousnodesconnected
unidirectionallyorbidirectionallyinanytopologydesired.Typicalofthesetopologiesare:
 Active/Standby, in which an active database is replicated to a standby system which can
take over processing should the active system fail. In these cases, the standby
applicationsaregenerallynotactiveandmustbestartedpriortotakeover.
1
ShadowbaseisdescribedinmoredetailinChapter11,Shadowbase,BreakingtheAvailabilityBarrier:Achieving
CenturyUptimeswithActive/ActiveSystems,AuthorHouse;2007.
2
©2007SombersAssociates,Inc.,andW.H.Highleyman

 Active/HotStandby,in whichbothsystems arefullyoperational,butonlyonesystem (the
activesystem) is handlingtheprocessing load.Should theactivesystem fail,thestandby
can take over processing instantly (often called a sizzling hot standby configuration). By
using bidirectional replication, failover testing is simple and virtually risk-free since the
backup system is fully operational and can have test or verification transactions
submitted to it at any time to verify operability. When a failure of the active system
occurs, all that is needed is to switch the transaction stream to the hot standby. This
system will then become the active system and will keep the alternate system
synchronizedsothatprocessingloadcanbeswitchedbacktoitifdesired.
active active active active
application application application application
shadowbase shadowbase
application application application application application
standby hotstandby active active active
SomeShadowbaseTopologies
 Active/Active,inwhichdatabasecopiesattwoormorenodesarekeptinsynchronism via
bidirectional replication, and all nodes are participating in processing the transaction
stream.
 Database Distribution, in which an active database is distributed to other nodes for query
processing, data warehousing, or to support other processing activities. In this topology,
the systems are often heterogeneous (e.g., NonStop server transaction processing
systemtoWindowsandLinuxqueryprocessors).
Architecture
Shadowbase uses two different architectures – one for NonStop systems and one for the other
systems(Windows,Linux,Unix,OpenVMS,andAS400).
NonStopSystems
In NonStop systems, Shadowbase obtains changes made to the source database from the
NonStop server’s audit trail. The audit trail contains all transaction information, including
transactionboundariesandthebeforeandafterimagesforallupdates,inserts,anddeletes.
This transaction data is read from the source audit trail by a Collector process. It is buffered,
compressed and sent to the target system either via NonStop’s Expand protocol or via a TCP/IP
session. At the target system, the changes are received by a Consumer process, which will
unblock the changes and apply them to the target database. Transaction order is maintained to
ensurereferentialintegrity.
One significant advantage of Shadowbase’s NonStop architecture is that replication is strictly
process-to-process. There are no intermediate disk-queuing points. Shadowbase utilizes the
3
©2007SombersAssociates,Inc.,andW.H.Highleyman

NonStop audit trail to ensure recovery of transactional data following a node failure. Thus,
replication is very fast and leads to minimal replication latency times (and consequently, reduced
datacollisionsandreduceddatalossfollowinganodefailure).
OtherSystems
For Windows, Linux, Unix, OpenVMS, and AS400 systems, the Shadowbase architecture is
somewhat different. Changes are received from the application by a Collector. In this case,
changes could be generated by the application, by a library bound into the application, or by
databasetriggers.
To provide recovery services in the event of a node failure, these changes are written by the
Collector to a persistent Database of Change (DOC). From the DOC, a Transaction Forwarding
Server (TFS) reads the changes, buffers and compresses them, and sends them to the target
system viaaTCP/IPsession.TherethechangesarereceivedbyanOpenServer process,which
unblocksthemandwritesthemtothetargetdatabase.
As an option, the Open Server could instead write the changes to a target-side DOC. This might
be used, for instance, to filter aborted transactions. If a target-side DOC is used, a Transaction
Replay Server (TRS) reads committed transactions from the DOC and applies them to the target
database. In addition, a DOC Reader is provided; it can send changes to other application
processes.
In this architecture, the source system can be any one of the source systems supported by
Shadowbase. Likewise, the target system can be any one of the target systems supported by
Shadowbase.
changes audit tcp/iporexpand target
trail Collector Consumer data
base
tcp/ip
NonStopserver
other
tcp/ip
changes Collector DOC TFS Open target
Server data
tcp/ip base
ShadowbaseArchitecture DOC TRS
DOC
Reader
MixedSystems
Shadowbase provides for NonStop systems to act as either source systems or as target systems
for any other supported system. If replication is to be from a NonStop server to another type of
system, changes made to the NonStop database are sent by the NonStop Collector to the Open
Serveronthetargetsystem.
If replication is to be from another type of system to a NonStop server, data changes are sent by
thesourceTFSprocesstotheNonStopserver’sConsumerprocess.
In this way, Shadowbase provides complete heterogeneity between any supported systems and
databases.
4
©2007SombersAssociates,Inc.,andW.H.Highleyman

Multithreading
The three critical threads in Shadowbase may be multithreaded to increase replication
throughput. These threads are the Collector, the communication channel, and the Consumer.
Eachcanhaveitsownsetofthreadsindependentoftheothers.
Multiple Collectors can read changes made to the source database and can queue them
independently to the communication channels. Multiple communication channels may be used to
transfer blocks of changes from the source system to the target system. Multiple Appliers (e.g.
Consumers or Transaction Replay Servers) will receive communication blocks and will apply the
