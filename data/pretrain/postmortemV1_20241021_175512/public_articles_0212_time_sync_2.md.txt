Time Synchronization for Distributed Systems – Part 2
December2007
Distributed systems often require that their nodes and the clients that access them all have the
same view of time. In Part 1 of this three-part series, we showed how NTP calculates the time
offset of a client relative to a time server. However, coordinating a client with a single time server
leaves a lot of room for error. Here in Part 2, we describe the NTP facilities that allow us to
reducethiserrorsignificantly.
NTP Time Offset Determination – AReview
Reviewing Part 1, we showed how a client can estimate the time difference (the time offset)
betweenitselfandatimeserverthatispresumablyamoretrustedkeeperoftime.Theclientdoes
this simplybysending atimestampedmessagetothetimeserver, which adds its own timestamp
andreturnsthemessagetotheclient.ThisprocessisshowninFigure1:
offset=1
T2 T3
server
10 11 12 13 14 15
time
9 10 11 12 13 14
client
T1 T4
channellatency channellatency
Measuring Clock Error
Figure 1
TheclientsendsamessagetothetimeserverwithatimestampT1.Uponreceipt,thetimeserver
addsitstimestampT2tothemessage.Itthenreturnsthemessagetotheclient,addingitstimeof
transmission, T3, to the message. The client notes that it receives the message at time T4. In
Part1,weshowedthatthetimeoffsetbetweentheclientandthetimeserveris
(T2T1)(T4T3)
timeoffset 
2
InFigure1,weseethattheclientisslowcomparedtothetimeserverbyoneclock tick(whenthe
time server thinks that the time is 10, the client thinks that it is 9). From the above equation, the
timeoffsetintheexampleofFigure1is[(12–9)–(14–13)]/2=1,asexpected.Therefore,one
tickmustbeaddedtotheclientclock.
1
©2007SombersAssociates,Inc.,andW.H.Highleyman

Time Offset Errors
One source of error in this offset calculation is channel latencyjitter. Over the Internet especially,
the time that it will take a message to get from its source to its destination may change rapidly
and significantly as congestion comes and goes and as routing changes. Software can also
causejitter,thoughthisistypicallymuchlessthancommunicationjitter(microsecondsratherthan
milliseconds). This problem of jitter was discussed in Part 1 and is solved by averaging the time
offsetoverseveralmeasurementstakenoverseveralminutes.
Another problem is channel asymmetry. As is seen in Figure 1, it takes a certain amount of time
for theclientmessagetoreachtheserver.Wecallthis timethechannellatency.Theresponseto
the server is also delayed by the channel latency. In Figure 1, the channel latency in either
directionisthesameandistwoclockticks.
The derivation of the time offset shown previously assumes that the two channel latencies are
equal. That is, the channel is symmetric. Over a dedicated line, this assumption might be valid.
However, over the Internet, these latencies are very likely to be different; and perhaps they may
be even significantly different. This is because the request message from the client and the
response message from the time server may flow over different routes. Furthermore, the
congestion over these routes may be significantly different. Even worse, routing and congestion
maychangeovertime.Thisrepresentsamajorsourceoftimecalculationerror.
For instance, in Figure 1, if the channel latency from the client were only one tick, and if the
channel latencyfrom the timeserver were three clicks, T2 would be 11 and T3 would be 12. The
calculatedtimeoffsetwouldbe[(11-9)–(14–12)]/2=0,whichiswrong.
The problems of channel asymmetryand other less significant problems are solved byaveraging
the time offset derived from time readings from several time servers rather than just one. To
accomplishthis,thetimeserversandtheirclientsarearrangedinanNTPsubnet.
NTPSubnetTopology
An NTP subnet comprises distributed time servers operating in a self-organizing, hierarchical
master/slaveconfiguration,asshowninFigure2.
reference
clocks
time time
stratum1
server server
time time time time
stratum2
server server server server
client client client client client client client client client stratum3
NTPHierarchicalOrganization
Figure2
2
©2007SombersAssociates,Inc.,andW.H.Highleyman

At the top of the hierarchy are the civil-time reference clocks with which we want to synchronize.
These may be considered stratum 0, and may include atomic clocks, radio sources, satellite
sources,andsoon.
Time servers that synchronize directly with the reference clocks are said to be stratum 1 time
servers. Time servers that synchronize from stratum 1 clocks are stratum 2 time servers, and so
on. Though NTP allows many stratum levels, typical NTP subnets comprise only a few levels
(typically four or less). This is because as the stratum level increases, the accuracy of the clock
decreases.
Clearly, the lower the stratum level, the more accurate the time server. Whenever a time server
(or client for that matter) enters the network, it synchronizes with some time server that is a
stratum k time server. It then becomes a node at the stratum (k+1) level. Thus, the network is
self-organizing.
SubnetNodeRelationships
Thereareseveraldifferentrelationshipsthatnodesmayhavewitheachother.
Peer-to-Peer
Nodes may be peers to each other at a given stratum level. Each peer node in a peer group
validates its time against that of the other peers by acting as a client to the other peer time
servers. In this way, the nodes in the peer group maintain a consensus among themselves as to
what the correct time is. Each member of the peer node may also adjust its time by
communicatingwithatimeserverinthenextlowerstratum.
Only one of the peers acts as a time server. The peers can decide which among them has the
mostaccuratetime,andthatpeer becomes thetimeserver.Thus,theactualphysicaltimeserver
inapeergroupcanchangefromtimetotime.
Client/Server
In a client server, or master/slave, relationship, a client node at one stratum level will adjust its
time to be that of a time server at the next lower stratum level. The client may do so with a
number of time servers at that stratum level and average the results to achieve better accuracy,
asdescribedlater.
Broadcast/Multicast
In a subnet characterized by many clients, network traffic can be minimized by having a time
server broadcast or multicast time messages to many clients (similar to a radio broadcast to
stratum1 time servers). The clients add measured or preconfigured channel latency times to the
time contained in the message from the time server to determine their own clock settings.
Broadcast/multicast does not provide the accuracy that is obtained by client/server interactions,
butitismoreefficientintermsofnetworktrafficandtimeserverload.
MultipleRoles
As can be seen from Figure 2, any particular physical system can play one or more of these
roles. A system may be a client to one or more time servers. It can act as a peer to other time
serversinapeergroup.Itcanalsoactasatimeservertootherclients.
3
©2007SombersAssociates,Inc.,andW.H.Highleyman

CombiningClocks
The effects of errors due to jitter, channel asymmetry, and other causes can be smoothed out by
takingreadings from severaltimeservers and averagingthem.NTPdoes not treatthis averaging
casually. There are two steps to this process – discarding clocks whose times are inconsistent
with the group and then weighting the remaining offsets according to the perceived accuracies of
theirclocks.
ClockSelection-TruechimersandFalsetickers
Thefirststeptakenbyanodethatusesclock-combiningistosendatimemessagetoeachofthe
timeservers thatit is using andthentocalculatetheoffsetsfrom eachtimeserver. Thenextstep
is to determine the optimum set of offsets to average. This is done via the Intersection Algorithm,
which is a refined version of Marzullo’s algorithm.1 Finally, the chosen sets of offsets are
averagedtoobtainthefinaloffsetestimate.
The Intersection Algorithm uses the confidence intervals of each time server to determine which
clocks are out of range with the majority of clocks and thus should be ignored (the falsetickers)
and which are reasonable to use (the truechimers). The confidence interval for a time server is
determined from the dispersion of its measured offsets over a period of time. Figure 3 shows this
processinsimplifiedform.
truechimer
server1
falseticker
server2
truechimer
server3
truechimer
server4
consistent
interval
offset= 8 10 12 14 16
The Intersection Algortihm
Figure 3
This figure shows offset measurements taken from four time servers, along with their confidence
intervals. For instance, the offset measured with respect to Server 1 is 12.5 ± 1.5 (i.e., within a
specifiedconfidencelevel,theoffsetissomewherebetween11and14).
The intersection of these confidence intervals that includes the most servers is then chosen. In
Figure3,theinterval12to13includesthreeservers,Server1,Server3,andServer 4,andisthe
chosen interval. All servers that include this interval are the truechimers (Servers 1, 2, and 3).
Anyserversthatdonotincludethisintervalarefalsetickers(Server2).
Offsets from falsetickers are discarded. The offsets of truechimers are included in the averaging,
describednext.
1
Marzullo, Keith,MaintainingtheTimeinaDistributedSystem:AnExampleof aLoosely-CoupledDistributedService,
Ph.D.dissertation,StanfordUniversity,DepartmentofElectricalEngineering;February,1984.
4
©2007SombersAssociates,Inc.,andW.H.Highleyman

ClockAveraging
A weighted average of the offsets of the truechimers is now taken. The weight of each offset is
basedontheconfidencelevelofthatoffset.Therefore,offsetsobtainedfromtimeserversthatare
deemedtobemorereliablearegivenheavierweightsintheresultingaverage.
This weighted average is used as the offset for the client’s clock and is used to adjust its clock.
Over a period of time, the effects of jitter, asymmetric channels, and other random errors will be
averagedoutbythisprocess.
SNTP
SNTP (Simple Network Time Protocol) is a stripped down version of NTP. It is a client-only
protocol that supports only synchronizing with a single time source. Since this is a common
configuration, SNTP can lead to a smaller footprint in the client system and is easier to manage.
The downside is that it does not provide the accuracy of NTP since it cannot average over
multipletimeservers.Onesecondaccuraciesaretypical.
SNTPisspecifiedbyRFC1361.
Security
One final point is to be made. If time adjustmentmessages are sent in the clear, the NTP subnet
is susceptible to attack. For instance, an attacker could intercept time responses and modify the
time stamps in the message before passing them on to the client. Great havoc can be wreaked
byforcingthesubnetnodestoshowdrasticallydifferingtimes.
To thwart this, NTP provides a security function that encodes the time messages so that they
cannotbehacked.Therecommendedencryptionmethodusessymmetrickeycryptography.
What’s Next?
In these first two parts on time synchronization in distributed systems, we have described what
today’s civil time really is and how NTP synchronizes a network of distributed systems to that
time.
However, there are cases in which the nodes in a system must be kept in time synchronism but
notnecessarilyinsynchronismwithrealtime.Inthesesystems,thenodesmustagreeontimefor
proper eventordering;butif thetimeobserved bythesesystems is afewseconds off,thereis no
penalty. In Part 3, we describe logical clocks first proposed by Leslie Lamport in a seminal paper
thataccomplishesthistaskinawaythatismuchsimplerthanNTP.
5
©2007SombersAssociates,Inc.,andW.H.Highleyman
