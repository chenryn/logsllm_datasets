Grocery Chain Achieves Continuous Availability with OmniReplicator
YashKapadia
CEO,OpsolIntegratorsInc.
January2015
A large, privatelyheld grocery-store chain operates 300 supermarkets. It had been using
aBASE24financial-transactionswitchfromACIonanHPNonStopservertoroutecredit-
card and debit-card payments from its point-of-sale (POS) terminals for authorization to
thebanksthatissuedthecards.1
Furthermore, its POS terminals provided additional customer services such as cell-phone topping, bank
deposits,andbillpayments.Thechain’sPOSterminalswereconnectedtothefinancialswitchviain-store
serversthatprovidedthisadditionalfunctionality.
The BASE24 financial-transaction switch ran on a single HP NonStop server. Should the switch fail, the
grocery stores were limited to cash sales only and were basically out of business. Following ACI’s
announcement that it would no longer support BASE24 on HP NonStop servers, the grocerychain opted
to move to the OmniPayments financial-transaction switch from Opsol Integrators Inc. Via its replication
engine OmniReplicator, OmniPayments was able to provide an active/active system that guaranteed
continuous availabilityfor thechain’s stores.This packagedsolution savedthegrocerychainasignificant
amountofmoney.
The Sunset
When ACI announced that it would no longer support BASE24 on the HP NonStop platform, the grocery
chain was given anopportunitytoreviewits approachtoPOSterminalsupport.Thecompanydecidedon
severaladditionalfeaturesthatitwouldliketohaveinanewsystem:
 It wanted to incorporate geographical redundancy so that it could implement a rapid failover
response to a backup system in the event of a system outage. It wanted to avoid grocery store
outagesthatoccurredduetoafinancial-transactionswitchoutage.
 Allcommunications betweenthegrocerystores andits BASE24 financial-transactionswitch were
unencrypted.ThisisaviolationofthePCIDSS(PaymentCardIndustryDataSecurityStandards)
specifications.ThechainwantedtobeincompliancewithPCIDSS.
 AdditionalcustomerservicesthatthegrocerychainwantedtoofferviaitsPOSterminalsrequired
modificationstothein-storeservers.Thesemodificationswouldhavetoberolledouttoall300in-
storeservers,amassivejob.
1ThisarticlewasoriginallypublishedintheSeptember/October2014issueofTheConnection.
1
©2015SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

 The grocery chain wanted to be able to accept the new EMV (Europay, MasterCard, Visa) smart
cards that prevent payment-card fraud via an embedded processor chip that offers encryption
andriskmanagementservices.
After an evaluation of its various options, the grocery chain selected Opsol Integrator’s OmniPayments
financial-transaction authorization system that is resident on fault-tolerant HP NonStop servers.
OmniPayments and its componentsmetallof thechain’s criteria.Continuous operationinits stores could
be ensured by using OmniReplicator’s bidirectional data-replication capabilities to architect an
active/active switch. OmniCrypto supported PCI DSS-compliant in-flight and at-rest encryption.
OmniPayments’ Business Logic Modules could be easily implemented to supply the additional services
provided by the in-store servers, thus eliminating the need for these servers. OmniPayments offered
support for EMV POS terminals and the protocols used to communicate with the acquiring and issuing
banks.
The OmniPayments Active/Active Financial Authorization System
The key immediate benefit that the grocery chain realized by moving to OmniPayments was achieving
continuous availability for its store systems. The OmniPayments financial-transaction switch implements
anoptionalactive/active architecture via its OmniReplicator bidirectional datareplicationengine.Withthis
architecture,twoormoreHPNonStopnodessharetheprocessingloadoftheapplication.
TheActive/ActiveArchitecture
In order for an active/active architecture to be implemented, all of the nodes in the active/active
application network need to have access to the application database. However, the nodes may be
separated bythousands of miles for geographical redundancy. Performance issues preclude the use of a
single database located at some central site with which all nodes can communicate. Furthermore, a
common central database represents a single point of failure. As a result, continuous availability cannot
beachievedwiththisapproach.Eachnodeneedsitsownlocalcopyoftheapplicationdatabase.
Toaddressthechallengeofacommon,distributedapplicationdatabase,datareplicationisemployed.As
shown in Figure 1, two geographically distributed nodes each have its own copy of the application
database. The databases are kept synchronized by bidirectional replication. Whenever an application
makes a change to its local copy of the database, that change is replicated to the database of the other
node. Thus, applications on both nodes see the same application state and will process transactions in
thesameway.
Consequently, a transaction can be sent to either node and be processed identically. Should a node fail,
all that needs to be done is to route all transactions to the surviving node. Recovery time can be
measured in seconds. In addition, failover faults are avoided (i.e., the surviving node does not come into
service) because it is known that both nodes are functioning – they are both actively processing
transactions.
2
©2015SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

OmniReplicatorArchitecture
In the OmniPayments system, data replication is performed by the OmniReplicator. The architecture of
the OmniReplicator is reflected in Figure 2, where the source node contains the database that is being
updated by the application. The target node contains the database that is to be kept synchronized with
thesourcedatabase.
WithinOmniReplicator,theAuditReaderprocessfollowstheNonStopAuditTraillogs.Thesearethelogs
thatNonStopTMF maintains of allupdates madetoauditedtables andfiles. TheAuditReader captures
the application database changes as they are written to the Audit Trail and passes them to the SAF
Loggerprocess,whichwritesthem toanintermediateSAFfile.ThepurposeoftheSAFfileistoqueueall
databasemodificationsintheeventthatthetargetsystemshouldfail.Uponrecoveryofthetargetsystem,
changes that have occurredsince its failurecan besentfrom theSAF file tothe targetdatabasefollowed
bythenormaldata-replicationflow.
The SAF Reader reads changes from the SAF file and sends them to the Outbound Server. All of this
activitytakesplaceonthesourcenode.
TheOutboundserver is taskedwithsending the changes over acommunicationchannel tothe Database
Loaderonthetargetsystem,whichthenappliesthemtothetargetdatabase.
BidirectionalReplication
3
©2015SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

In order to implement an active/active architecture, OmniReplicator is configured on each node to
replicate changes made its node’s database to the database on the other node, as shown in Figure 3. In
this way, as application changes are made to either database, they are replicated to the other database.
The two databases are therefore (nearly) kept in synchronism so that applications on either node can
properlyexecutetransactionssenttothem.
DataCollisions
One problem with bidirectional replication is data collisions. A data collision occurs if an application on
each node makes a change to the same row of the application database at substantially the same time.
Each change will get replicated to the database on the other node and will overwrite the change made to
therowinthatdatabase.Nowthetwodatabasesaredifferent,andeachiswrong.
Many applications can be structured so that data collisions are avoided. As we shall see, the grocery
chain was able to do this. However, if data collisions cannot be avoided, they must be detected and
resolvedtokeepthedatabasesproperlysynchronized.
OmniPaymentsdetectsdatacollisionsandautomaticallyacceptsthelatestchange.
The Use of Active/Active by the Grocery Chain
Thegrocerychaininstalledanactive/activeOmniPaymentsswitchcomprisingtwoHPNonStopserversto
manageits POSterminals.Oneserver is locatedinthe company’s headquarters,andtheother is located
ataremotesite500milesaway.
POSTerminalDistribution
To split the load between the two NonStop
servers, the POS terminals in each store are
divided into two partitions, as shown in Figure
4. One set of POS terminals is connected to
one of the HP NonStop servers in the
active/activepair,andtheothersetisroutedto
the other NonStop server. The communication
channels connecting the POS terminals to the
NonStop servers use the standard ISO 8583
protocol utilized for transaction-switching
networks.This in itself is an improvement over
the earlier system, which incorporated the
proprietaryVISA2communicationprotocol.
Because communication between the POS
terminals and the HP NonStop servers is
encrypted and there are no in-store servers,
the chain has no concern about being hacked
andhavingdatastolen,as happenedtoTarget
overthe2013year-endholidays.
Since the POS terminals are split between the
NonStop servers, should a NonStop server
fail, half of the POS terminals in the store will
still be operational. The failed terminals will
auto-reconnect to the other HP NonStop
server. Thus, the grocery stores can continue
toservetheircustomerseveninthepresenceofaNonStopserverfailure.
4
©2015SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com
