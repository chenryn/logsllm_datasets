From the earliest days of commercial computing, systems have used magnetic tape as a backup
medium (Figure 2). Operations staff take full backups followed by intermediate incremental
backups takenperiodically, suchas everyday. Atthetimeoffailure,therecoverypointis the last
backup. Therefore, the time between backups leads to very long RPOs – hours to days.
Furthermore, the time involved in retrieving the tapes, recovering the database, bringing up
applications, and testing the resulting backup system also results in RTOs of hours to days,
assumingthatyouhaveasystemtowhichtorecover.
Figure2:MagneticTapeBackup
4
©2011SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Virtual-TapeBackup
Virtual tape replaces magnetic tape with disk images of the database communicated to an offsite
disk-storage system (Figure 3). Because the need to handle and store large numbers of tapes is
eliminated, the frequency of backups can be increased, significantly reducing RPOs to hours.
When a recovery needs to be performed, the loading of the backup database is much faster,
though applications must still be started and the system tested, leading to RTOs typically
measuredinhoursormore.
Figure3:VirtualTapeBackup
Because of the lengthy requirement to procure an alternate system, load it, synchronize its
database, and bring the application environment online following the loss of the primary system,
magnetic-tape and virtual-tape approaches do not meet high- or continuous-availability
requirements.Wewillnotconsiderthesetechnologiesfurtherinthispaper.
ClustersandVirtualization
Clusters6 and virtualization7 can lead to very good availabilities within the data center or campus
environment(five 9s is oftenquoted), but these techniques applyonlytocollocatedsystems.The
backup system and the storage shared between the systems typically must be in the same data
center or otherwise located in close proximitywith extensive high-speed interconnects (Figure 4).
Therefore, these technologies do not satisfy the dispersion attribute of highly available systems.
Theycannotsurvivealocaldisaster.
Figure4:ClustersandVirtualizedEnvironments
UnidirectionalReplication
Unidirectional data replication is the simplest form of data replication (Figure 5). An active node
processesalltransactionsandreplicatesthedatabasechangesthatitmakestoaremotestandby
6Active/ActiveVersusClusters,AvailabilityDigest;May2007.
http://www.availabilitydigest.com/public_articles/0205/clusters.pdf
7Fault-ToleranceforVirtualEnvironments–Parts1to3,AvailabilityDigest;March2008.
http://www.availabilitydigest.com/public_articles/0303/virtualizatiion_1.pdf
5
©2011SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

database. Therefore, the two databases are in (or are nearly in) synchronization. With
asynchronous replication, only the data in the replication pipeline at the time of a source node
failure will be lost, thus supporting subsecond RPOs. With synchronous replication, no data will
belostfollowinganactivenodefailure(RPOofzero).
datareplication
source target
application
data data
changes
base base
productionsystem backupsystem
Figure5:UnidirectionalReplication
Applications may be up and running in read-only mode in the standby node so that the standby
database may be actively used for query and reporting purposes (we call this a hot standby).
Should the active node fail, the applications at the backup node can remount the database for
read/writeaccessandcantakeovertheroleoftheoriginalactivenode.Thistypicallytakesonlya
fewminutes,leadingtoRTOsmeasuredinminutes.
Thus, unidirectional architectures provide high availability – RTOs measured in minutes and
RPOsmeasuredinsubseconds(orzeroifsynchronousreplicationisused).8
DisasterTolerance
The above systems meet the needs of disaster recovery but not necessarily disaster tolerance.
Wesaythis becausetheir recoverytimes aremeasuredinminutes ormore.If users aredownfor
several minutes, or even worse, hours or days, the outage has certainly affected them. To be
disaster-tolerant, recovery must be so fast that users are unaware of the outage or at least are
notoverlyinconveniencedbyit.Recoverytimesmeasuredinsecondsorless withlittleornodata
lossqualifyasystemtobecalleddisaster-tolerant.
Disaster tolerance requires that there be a backup node that can take over in subseconds or
seconds in the event of an active-node failure. We now describe two data-replication
configurationsthatcansatisfythisrequirement.
Sizzling-HotStandby
A sizzling-hot standby is similar to a standby or passive node using unidirectional replication, as
described earlier, except that it is immediately ready to start processing transactions (Figure 6).
This means that its applications are running and have the local copy of the application database
already open for read/write access. Using data replication, the sizzling-hot standby can
immediately take over processing because its local database is synchronized with the active
databaseandiscompletelyconsistentandaccurate.
Should the active node fail, all that is required for failover is to switch the users or their
transactions to the standby node. This can be done in subseconds to seconds, leading to very
smallRTOs.
8 In some cases, the application on the passive target node can already have the target database open for read/write
access,therebyimprovingrecoverytime.Wecallthisasizzling-hotstandbysystemanddescribeitnext.
6
©2011SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Tooperateinthismode,itisessentialthatthereplicationengineallowstheapplicationprocesses
toalsoopenthetargetdatabaseforread/writeaccess.
Figure6:Sizzling-HotStandbywithOptionalReverseReplication
The sizzling-hot standby configuration has another big advantage over the disaster-recovery
systems described earlier, and that is the absence of failover faults. In active/passive systems,
the standby system is not actively involved in the application. Therefore, one does not know
whether it is really operational. Should a failover attempt be made to a nonfunctioning backup
system,theapplicationisdown.Thisisknownasafailoverfault.
With a sizzling-hot standby, one knows that the backup node is working (it can be periodically
exercised by submitting test or verification transactions to the application to ensure this).
Consequently, failover can be automated, which is a requirement if very short RTOs are to be
satisfied.
Finally, the sizzling-hot standby can be optionally configured with reverse replication up and
running so that it has a backup as soon as the old primary node is recovered. With reverse
replication enabled, the standby will queue the changes that it is making to its copy of the
databasesothatthefailednodecanberesynchronizeduponrecovery.
This configurationcan achieve a zero RPO if synchronous replication is used or RPOs measured
in tens or hundreds of milliseconds if asynchronous replication is used. If failover is automatic,
RTOsmeasuredinsubsecondsorsecondscanoftenbesatisfied.
Active/Active
An active/active configuration takes the sizzling-hot standby arrangement one step further. All
nodes in an active/active network may be simultaneously processing transactions for the same
application using their local copies of the application database (Figure 7). Bidirectional data
replicationis configuredbetweeneachnodepair sothatanychangethat anapplicationmakesto
its local copy of the database is immediately replicated to the other nodes in the application
network.Therefore,allnodeshavethesameviewoftheapplicationdatabase.
Figure7: Active/Active
One issue with active/active systems using asynchronous replication is that of data collisions. If
two applications on different nodes attempt to change the same row within the replication latency
of the data-replication engine, they will both succeed, not knowing that the application on the
7
©2011SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

other node is also doing so. Each will then replicate its change to the other node, overwriting the
change to the data item originallymade at that node. Now both databases are different,and both
are wrong. This is known as a data collision. Data replication engines that support active/active
architecturesprovidemechanismstodetectandresolvedatacollisions.
In an active/active environment, data collisions will not occur if synchronous replication is used
becausethelockingofdataitemsensuresthatonlyonechangecanbemadetoalldatacopiesat
anyonetime.
Eliminating Planned Downtime
The above discussions have focused on eliminating unplanned downtime. But what about
planneddowntime?
The answer is simple. Using either of the continuously available, disaster-tolerant architectures
that we have described – sizzling-hot standby or active/active – a node to be serviced can easily
and safely be taken out of service by moving its users to other nodes in seconds. The node can
then be upgraded, resynchronized, and returned to service, continuing once again to provide
application services to its users. Upgrades can be rolled through the application network in this
manner.9
A highly available system using unidirectional replication can be upgraded in the same way,
except that users may be down for minutes or longer as the backup system is brought into
operation.
Summary
We have now applied the various data replication technologies to achieve a variety of high
availability architectures. But which one matches your application’s needs from both an uptime
andacostperspective?WelookatthisquestioninPart4ofthisseries.
9UsingShadowbasetoEliminatePlannedDowntimewithZeroDowntimeMigrations,GravicWhitePaper.
8
©2011SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com
