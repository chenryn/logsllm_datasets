The Smarts Behind EMV Smart Cards
Part 2 – Offline Transaction Processing
YashKapadia,CEO,OmniPayments,Inc.
December2014
It seems that every month comes with an announcement of another hack in which the
dataofmillionsofpaymentcardshasbeenstolen.Thisdataisusedtoclonecreditcards
anddebitcards,whicharethensoldintheundergroundInternet.Isthereanyprotectionavailabletousto
thwartsuchattacks?
The answer is yes – smart cards.1 A smart card, also called a chip card or
an integrated-circuit card (ICC), includes an embedded computer chip that
employs cryptographic and risk-management features. In conjunction with
a smart-card POS or ATM terminal, these features are designed to thwart
skimming,card-cloning,card-counterfeiting,andotherfraudulentattacks.
A decade or more ago, a consortium of card issuers comprising Europay,
MasterCard, and Visa (EMV) began the specification of smart cards or as
they are formally known today, EMV cards. EMV card technology has been adopted by most of the
countries on all continents in the world except for the United States. The United States is the laggard.
Representing almost half of all payment cards and terminals in the world, the U.S. still runs its payment-
cardservicesonoutdatedmagnetic-stripetechnology.
However, this is about to change. The U.S. payment-card industry has mandated that all merchants be
EMV-compatible by October, 2015 (except for gas stations, which have until 2017) or face a “liability
shift.” If a merchant does not process at least 75% of its transactions through an EMV-enabled terminal
(whether via chip-cards or magnetic-stripecards) and accepts a disputedor fraudulentcard payment,the
merchantwillbeliableforthetransactionratherthantheissuer.
Most card-payment networks include one or more HP NonStop servers. It is therefore important that the
NonStopcommunityunderstandsmart-cardtechnology, whichis becominganimportantcomponent inall
financial networks. In this article, we describe how smart cards add significant security to payment-card
transactions. Part 1 in the November issue of the Availability Digest covered the methods for authorizing
EMV transactions online with the issuing bank2. In Part 2, we discuss the procedures for securely
authorizingEMVtransactionsofflinewithoutdirectissuerinvolvement.
1ThisarticlewasfirstpublishedintheNovember/DecemberissueofTheConnection.
2TheSmartsBehindEMVSmartCards,AvailabilityDigest;November2014.
http://www.availabilitydigest.com/public_articles/0911/emv_1.pdf
1
©2014SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

OfflineTransactions
The processing of an EMV card transaction is shown in Figure 1. It comprises several steps, with
interaction between the card, the terminal, and the issuer. Processing time for an EMV transaction is
comparable to that for a magnetic-stripe transaction, where communication delays account for the
majorityofthetime.
Figure1:EMVProcessingFlow
2
©2014SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

EMV transaction processing begins with some preliminary steps that help determine whether the
transaction should be handled online with the issuer or offline with no issuer involvement. Once this
decisionhasbeenmade,processingsplitsintotwodistinctflows–oneforonlinetransactionsandonefor
offlinetransactions.Part1ofthisarticledescribedthecommonprocessingflowandtheonlineprocessing
flow.Part2describestheofflineprocessingflow.
Most transactions will be processed online, sending the transaction data to the issuer for authorization.
However, in some cases, a transaction may be processed offline with no issuer involvement. This can
take place if there is no communication link (for instance, terminals used in airplanes to sell food, drinks,
and other items), if the communication link between the terminal and the issuer should fail (allowing a
retailertocontinuetoservicecustomerpaymentsatitsownrisk),orforverysmalltransactions.
The processing of an offline transaction as shown in Figure 1 is a bit more complicated than the
processingofanonlinetransactionbutfollowssimilarsteps.
IssuerParametersStoredontheCard
The processing of online and offline transactions is controlled by parameters stored on the card by the
issuingbank.Theseparametersaredescribedbyathree-bytebit-encodeddesignatorandinclude:
Byte1:CardData Byte2:Cardholder Byte3:Security
InputCapability VerificationMethod(CVM) Capability
Manualkeyentry PlaintextPINforICC SDA
verification
Magneticstripe DDA
EncipheredPINforonline
IC(integratedcircuit) CDA
verification
withcontacts
(These capabilities are
Signature(paper)
describedlater)
EncipheredPINforoffline
verification
NoCVMrequired
Table1:EMVPOSTerminalCapabilities
CardholderVerification
As with online transactions, if the transaction is to be processed offline, the person presenting the card
must be verified as the legitimate cardholder. Offline cardholder verification is also accomplished via the
Cardholder Verification Method (CVM) that the issuer has specified in its parameters stored on the card
(Table1).Fourmethodscanbeusedforofflinecardholderverification:
-offlineencryptedPIN
-offlineplaintextPIN
-signature
-noCVM
Themethods selected bythe issuer maybe arranged in priorityorder,or theymaybeselectedaccording
to other transaction parameters. For instance, a transaction at an attended POS terminal such as in a
store may require both a PIN and a signature. An ATM may require a PIN but no signature. A terminal
with no PIN pad may require just a cardholder signature. A small transaction may require no cardholder
verification.
If an encrypted PIN is selected, the cardholder enters his PIN into the terminal’s PIN pad. The terminal
encrypts the PIN with the card’s PIN public key and sends it to the card. The card decrypts the PIN with
its PIN private key and compares the PIN entered by the cardholder to the PIN value stored in its secret
3
©2014SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

data. If the PIN is wrong, the terminal is informed. According to a PIN counter, the cardholder may be
given additional opportunities to enter his PIN. If he reaches a specified limit, the transaction is rejected.
Thecardisblockedandcannolongerbeused.
IfaplaintextPINisselected,theprocessisthesameasforanencryptedPINexceptthatthePINentered
intothePINpadbythecardholderissenttothecardunencrypted.
CardValidation
Anextrasteprequiredfor offlinetransactions is thattheterminalmustvalidatethecardtoensurethatthe
card is not counterfeit or is not a clone of another card. For online transactions, card validation is the
responsibilityoftheissuer.
Three techniques for offline card validation provide incrementally improved security – SDA, DDA, and
CDA, as described next. The technique to use is specified in the issuer’s parameters stored on the card
(seeTable1).Typically,DDAorCDAisselected.
StaticDataAuthentication(SDA)
Static Data Authentication proves that the card is a valid card prepared by the issuer. Included in the
static data that the terminal reads from the card is the card’s Static Application Data, encrypted with the
issuer’s private key. This cryptogram includes all of the static data that the issuer has entered into the
cardatthetimethecardwasproduced(PAN,cardholdername,publickeys,ApplicationIDs,etc.)
Theterminalalsoreads the issuer’s public keyfrom thestatic dataonthecard.Theterminaldecrypts the
StaticApplicationDatacryptogram withtheissuer’spublickeyandcomparesthesignedstaticdatatothe
static data that it has read from the card. If the data sets match, the terminal has verified that the card
wasthecardpreparedbytheissuer.Itthedatadoesn’tmatch,thetransactionisrejected.
SDA validates thecard’s authenticity,butitdoes notpreventcloning.If anattacker somehowmanages to
cloneanEMVcard,thestaticdataincludingitscryptogramwillstillpasstheSDAtest.
DynamicDataAuthentication(DDA)
Dynamic Data Authentication adds cloning protection to the counterfeit protection afforded by SDA. The
key to DDA is that the card carries variable data that changes with each transaction. For instance, a
transactioncounterisincrementedwitheachcardinsertionintoaterminal.
For DDA card validation, the card encrypts its variable data with its private key and sends this dynamic
data cryptogram to the terminal. Using the card’s public key, the terminal decrypts the variable data
containedinthecryptogramandcomparesittothevariabledatathatithasreadfrom thecard.Ifthedata
sets match, the terminal knows that this data has come from the original card and not from a clone
because the clone would not have the card’s private key (a secret data item that will be erased if an
attemptweremadetoaccessit).
Furthermore,anattacker cannotsimplyadd its owncardpublic keyandprivatekeytothecardtofoolthe
terminal. The terminal will discover that the attacker’s public keyis not a valid key when it checks thekey
againstthekey’spresumedCertificateAuthority,asfoundinthecard’sstaticdata.
Thus,betweentheSDAandtheDDA,theterminalcandeterminethatthecardis neithercounterfeitnora
clone.Itisavalidcard.
4
©2014SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

CombinedDDA/ApplicationCryptogram(CDA)
SDA and DDA do not protect against an unlikely but sophisticated attack known as a wedge attack. In a
wedge attack, a real EMV card is inserted into the terminal so that the SDA and DDA validation tests are
passed. The attacker then substitutes the real card with a device that acts like the card but is under
control of the attacker. The attacker can force the acceptance of a transaction that the card otherwise
wouldhavedeclined.
Toprotectagainstthiskindofattack,anapplicationcryptogram(AC),generatedbythecard’sprivatekey,
is included with the SDA and DDA cryptograms. The AC’s purpose is to inform the terminal of the card’s
ultimate decision as to whether to process the transaction online, to process the transaction offline, or to
decline the transaction (see the section entitled Card Action Analysis in Part 1 of this article). The wedge
attackercannotgenerateavalidACbecauseitdoesnotknowthecard’sprivatekey.
OfflineTerminalRiskManagement
For offline transactions, the card and the terminal must cooperate to manage the risk of a transaction, a
function performed by the issuer for online transactions. This function is executed under the control of a
