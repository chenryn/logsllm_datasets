analyzedinsomedetail.Theauthorsdistinguishbetweenfourmutualexclusionalgorithms:
 Centralized,inwhichoneprocessinthesystemiselectedtobethecoordinator.
 Decentralized, in which the coordinator is replicated across the network to solve the
problem of coordinator failure. Mutual access is granted by a majority vote of all
coordinators.
 Distributed,inwhichallprocessesthatmaywanttoaccesstheresourceparticipateinthe
decision of which process will get access to the resource next. Decisions are based on
thetimeofrequests,withtheearliestrequestgettingaccess.
 Token, in which a token is passed among all possible requesters. The requester that
currentlyhasthetokenhasexclusiveaccesstotheresource.
Manydistributedalgorithms requirethattherebeoneprocess that performs somespecific role.A
centralized mutual access coordinator is one example. Another example is a master node in a
datareplicationnetwork.Severalalgorithmsaregivenforanelectionprocesstochoosethisnode
either initially or following the failure of the current process performing the role. Special attention
isgiventowirelessenvironmentsandverylargesystems.
Data Consistency and Replication
There are many reasons why a database needs to be replicated. Among these are performance
(locating data closetothose who will useitmost),and reliability, or theabilitytosuffer theloss of
adatabasecopy.
A major problem with replicated databases is keeping the database copies consistent. If
synchronous replication is used, it is guaranteed that all database copies will be consistent.
However, this approach imposes a potentially unacceptable performance penalty in many
applications.
Itis importanttodefinethelevelofconsistencythatis requiredbyanapplication.Thisisdonevia
aconsistencymodel.Forinstance,theconsistencymodelmightspecify:
 aminimumdeviationinnumericalvaluesbetweenthereplicas.
4
©2008SombersAssociates,Inc.,andW.H.Highleyman

 aminimumdeviationinstalenessbetweenthereplicas.
 aminimumdeviationwithrespecttotheorderingofupdateoperations.
Events thathaveacausalrelationshipmustbeapplied inthesameorder.Concurrentevents that
arenotrelatedarenotsoconstrained.
The placement of permanent and transient database replicas is considered. Transient replicas
are those requested by a client or a server to temporarily improve performance. Replication
models that pull (poll) or push data to replicas are described as are those that distribute data by
unicasting(point-to-point)ormulticastingchangesorchangenotices.
Considerations with respect to maintaining a local replica by caching a portion of a database are
described.
Special attention is given to client-centric models for data replication. Client-centric models
ensurethatanyclientwillalways seeanupdatethatis thesameorlaterthanthatseenonits last
access even if the client accesses different database copies (such as a mobile user). These
models ensure eventual consistency in that, in the absence of updates, the databases will
eventuallyconverge.Implementationschemesforthisclassofdatareplicationmodelaregiven.
Though the possibility of data collisions is acknowledged, there is no discussion of data-collision
detection or resolution. However, architectures are proposed that will preclude data collisions.
One is a master/slave configuration in which all updates are sent to a master node, where they
areappliedtothedatabase.Themasternodethenreplicatesthechangestoallslaves.Theother
is also a master/slave configuration in which the slave makes updates to its local copy with the
permission of the master. These updates are then replicated to the master, which will then
replicatetheupdatestotheotherslavesystems.
Fault Tolerance
As opposed to single-machine systems, a distributed system can suffer partial failures. Fault
tolerance is the ability for a distributed system to survive a partial failure. The authors consider
severalfailuremodes:
 CrashFailure–Aserverhaltsbutisworkingproperlyuntilithalts.
 Omission Failure – A server fails to receive an incoming message or fails to send an
outgoingmessage.
 TimingFailure–Aserver’sresponsetimeisexcessive.
 ResponseFailure–Aserver’sresponseisincorrect.
 Arbitrary Failure – (Byzantine Failure) A server produces arbitrary responses at arbitrary
times.
Theauthorsalsoconsidertransientfaults,intermittentfaults,andpermanentfaults.
Fault masking is accomplished via redundancy. The book focuses on process resilience through
flatprocessgroupsorprocessgroupsorganizedasahierarchy.Thedetectionofafailureandthe
recovery from any of the failure modes listed above by a process group is described. This is
complicated if the process group is not stable – that is, processes may be entering and leaving
thegroupastheprocessgroupisactive.
Reliable communications between processes is a necessarycondition for fault tolerance. A great
dealofattentionisgiventoreliablemulticastingtoachievethisend.Reliablemulticastingrequires
thatreceiverscandetectamessagelossandcanrequestthatthemessageberetransmitted.
5
©2008SombersAssociates,Inc.,andW.H.Highleyman

The distributed two-phase commit protocol for transactions is explained. This protocol allows the
reliable application of a group of changes to a set of database copies. It requires a transaction
coordinator to coordinate the actions of the distributed systems. Described also is a three-phase
commitprotocolthatwillsurvivethefailureofthetransactioncoordinator.
Once a failure has occurred, it is essential that the process in which the failure occurred can
recover to a correct state. This is done via periodic checkpoints of the process’ state to stable
storage and via an optional message log to be able to roll forward the process state from its last
checkpoint. (There is no mention of checkpointing to other processes rather than to disk as is
doneinHPNonStopserverprocesspairs.)
A brief description is given of recovery-oriented computing (ROC).2 ROC is implemented by
recursivelyrebootingthefailedprocessesorsubsystems.Thesmallestsuchunitisfirstrebooted.
If this does not restore the system, its parent unit is rebooted. This process continues until the
systemisrestoredtooperationoruntiltheentiresystemisrebooted.
Security
Security is one of the most difficult aspects of distributed systems. It needs to be pervasive
throughoutthesystem,andasingledesignflawmayrenderituseless.
Securitythreatsinclude:
 Interception–Anunauthorizedpartyhasgainedaccesstoaserviceortodata.
 Interruption – Services or data become unavailable, unusable, or destroyed. A denial-of-
serviceattackisaninterruption.
 Modification – Data has undergone unauthorized changes, or services have been
modifiedsothattheydonotadheretotheiroriginalspecifications.
 Fabrication–Additionalactivityordataiscreatedthatwouldnototherwiseexist.
Once a security policy has been established that describes which actions the entities in the
system are allowed to take and which are prohibited, the security mechanisms can be designed.
Securitymechanismsinclude:
 Encryption–thetransformationofdataintoaformthatanattackercannotunderstand.
 Authentication – the verification of the identity of a person, a process, or other entity that
isrequestingservices(aclient).
 Authorization – a determination that an authenticated client is authorized to perform a
requestedaction.
 Auditing–arecordofactionstakenbyclients.
Therearethree ways in whichthesecuritymechanisms canfocus onensuring thesecurityof the
system: protection of the data, control of operations that can be executed by a client, and control
oftheusers.Eachoftheseisevaluatedbytheauthors.
Extensive attention is given to encryption methods. Secret keys and public keys are described
along with the mathematics behind their encryption algorithms. The use of channels secured by
encryptionforauthenticationisexploredingreatdetail,asaredigitalsignatures.Kerberosisused
asanexampleimplementation.
Other topics discussed are access control lists, keymanagement (especially the difficult problem
ofinitialkeyestablishmentandkeydistribution),andsecuregroupmanagement.
2
Recovery-OrientedComputing,AvailabilityDigest;February,2007.
MicrorebootingforFastRecovery,AvailabilityDigest;March,2007.
6
©2008SombersAssociates,Inc.,andW.H.Highleyman

Examples
Theauthorsprovidefourin-depthexamplesoftheuseoftheseprinciplesindistributedsystems:
 Distributed Object-Based Systems, using Enterprise Java Beans (EJBs) and CORBA
(CommonObjectRequestBrokerArchitecture)asexamples.
 DistributedFileSystems,usingNFS(NetworkFileSystem)asanexample.
 Distributed Web-Based Systems, describing HTML, XML, HTTP, and SOAP and using
theApacheWebServerasanexample.
 Distributed Coordination-Based Systems (publish-subscribe systems), using as an
exampleTIB/Rendezvous.
For each of these system models, the application of the paradigms for processes,
communication, naming, synchronization, replication, fault-tolerance, and security is described in
somedetail.
Summary
Distributed Systems: Principles and Paradigms is anexhaustive discourseonthe technologythat
goes into building effective distributed systems. Though the book borders on the erudite rather
than the practical (the authors often lapse into notational descriptions that fortunately can be
ignored by the theoretically-challenged), it makes extensive use of well-known systems as
examples to demonstrate the principles described. It is a must reference for any serious
practitionerofdistributedsystems.
7
©2008SombersAssociates,Inc.,andW.H.Highleyman

