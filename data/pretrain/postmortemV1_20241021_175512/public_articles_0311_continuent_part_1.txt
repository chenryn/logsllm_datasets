Scaling MySQL with Continuent’s uni/cluster
November2008
A company’s data is its life blood in these days of 24x7 operations. Its data must always be
available,anditmustbeprotectedagainstloss.
Continuent, Inc., of San Jose, California
(www.continuent.com), meets these requirements with
Continuent uni/cluster for MySQL. Continuent uni/cluster virtualizes two or more MySQL
databases to make them appear to the application as a single, highly scalable MySQL database
with extremely high reliability. Continuent uni/cluster protects against data
loss by synchronously replicating updates across all copies of the
database. Furthermore, it improves query performance by load-sharing
read queries across the copies. The virtual database can be easily scaled
bysimplyaddingadditionalMySQLdatabaseservers.
There is no single point of failure in a uni/cluster. Recovery from a component anywhere in
theclusteristransparenttothecluster’sclients.
Continuent uni/cluster for PostgreSQL provides the same features for PostgreSQL
databases.
uni/cluster started out in the MySQL open-source community. It is available today as the
Sequoia open-source implementation (http://community.continuent.com/). Continuent uni/cluster
isthecommerciallysupportedversionofSequoia.
uni/cluster Three-Tiered Architecture
A Continuent uni/cluster is a shared-nothing architecture that virtualizes multiple MySQL
database servers to look like a single MySQL database. It comprises three components – client
drivers, controllers, and database servers.1 There are always two controllers in a uni/cluster for
redundancy.Theremaybetwoormoredatabaseservers.
Client systems connect to the virtual MySQL database via proprietary uni/cluster drivers.
Eachclientconnects tooneof thetwouni/cluster controllers viaits driver.Theseconnections are
completelytransparenttotheclientsystems.Nomodificationstotheapplicationsoftwareneedbe
made. The application interface provided by the uni/cluster drivers is exactly the same as that
usedbytheapplicationstoaccessastandardMySQLdatabase.
1Continuentuni/clusterforMySQL:HighAvailability,ScalabilityandManageabilityServicesforMySQL –Overview
WhitePaper,Continuent;2007.
Continuentuni/clusterforMySQL–release2007.1:BasicConcepts,Continuent;2008.
Continuentuni/cluster:HighAvailability,ScalabilityandManageabilityforDatabases –FrequentlyAskedQuestions,
Continuent;February18,2008.
1
©2008SombersAssociates,Inc.,andW.H.Highleyman

Each uni/cluster driver monitors its controller connection. Should that connection fail, or
should the controller fail, the driver transparently reconnects to the alternate controller.
Connectionstateandtransactionstatearepreserved.Theclientisunawareofthefailover.
A uni/cluster comprises two controllers backing up each other.2 A client connects to only one
controller. However, should that controller fail, all of its client connections are transparently
switchedtotheothercontrollertocontinueoperation.
clients clients
failover
driver driver
updatereplication
controller controller
recovery recovery
log log
MySQL MySQL MySQL MySQL
server server server server
Continuentuni/clusterArchitecture
A controller receives all SQL queries from its clients and ensures that they are executed
across the cluster. Read-only queries are distributed among the database servers to balance the
load. Update queries are replicated between the controllers and are synchronously executed
simultaneouslyon all database servers. The controllers coordinate with each other to ensure that
alltransactionsareexecutedinthesameorder.
Acontroller canconnectto one or more MySQL databaseservers.Thedatabase servers are
any mix of standard MySQL database servers. Should a database server fail, it is removed from
the cluster until it is repaired. Upon recovery, its database is synchronized with the cluster’s
virtualdatabase;andtheserveristhenreturnedtoservice.
Each controller maintains a recovery log of all queries and transactions that modified the
virtual database. The recovery log is used to recover a failed or downed database node prior to
returning it to service. In the event of a controller failure, the Recovery Log on the surviving
controllerisusedtorecoverallofthedatabaseserversonthefailedcontrollerafterthatcontroller
hasbeenreturnedtoservice.
Cost
A major advantage of Continuent uni/clusters is cost. No proprietary database-management
systems or proprietary hardware are required. The controllers run under Linux on off-the-shelf
hardware.
2Laterreleasesmaysupportmorethantwocontrollers.
2
©2008SombersAssociates,Inc.,andW.H.Highleyman

Likewise,commodityhardwareis all thatis needed for thedatabaseservers runningMySQL,
anopensourcedatabase.
Communication is via standard TCP/IP over LANs so that only commodity network elements
arerequired.
uni/cluster Components
ClientDrivers
A client system uses a uni/cluster driver to connect to one of the two controllers. The driver
forwards SQL queries to the virtualized database and returns the results of the queries to its
client. The driver hides the cluster details from the client. So far as the client is concerned, it is
dealingdirectlywithasingleMySQLdatabaseserver.
Each uni/cluster driver monitors its controller connection via periodic pings and automatically
switches over to the alternate controller should the connection or the controller fail. The driver
maintains not only connection state but also transaction state so that the failover is completely
transparenttoitsclient.
Thechoiceofthecontrollertowhichtoconnectcanbebasedononeofthreealgorithms:
 Random – The controller choice is made randomly when a client initiates a connect
request.
 Round-Robin–Connectionsaremadetothecontrollersinaround-robinfashion.
 Fixed–Thecontrollertowhichaclientconnectsisspecifiedatconfigurationtime.
Connections can be persistent or nonpersistent. However, Continuent recommends that
nonpersistent connections be used wherever possible for performance reasons. For instance, a
database server cannot be taken offline if a client has a persistent connection to the virtualized
database.
uni/cluster provides two types of drivers – JDBC
PHP
drivers and the uni/cluster Connection drivers. If an
Perl
application already uses a JDBC driver to access Java
Ruby
Application
the database, it can continue to use the same C/C++
interface but with a uni/cluster JDBC driver instead.
The native JDBC driver must be replaced with a MySQL JDBC
uni/cluster JDBC driver to achieve the benefits of driver
clustering.Forinstance,as describedabove,itisthe Connector
driver that monitors the connection to the controller JDBC
and that transparently switches over to the alternate driver
controller should its controller or controller
connectionfail. JDBC JDBC
Alternatively, if some other application platform
controller
is being used to access the MySQL database, a
uni/cluster Connector is used instead. The
Connector emulates the standard MySQL interface,
uni/clusterDrivers
thus supporting applications such as those written in
PHP, Perl, Ruby, and C or C++. The Connector provides conversion between any MySQL
interface and the uni/cluster JDBC driver interface, which then connects directly to a uni/cluster
controller. Using the Connector, applications use the MySQL cluster exactly as they would a
singleMySQLdatabase.Theyrequirenomodification.
3
©2008SombersAssociates,Inc.,andW.H.Highleyman

Aclient’sConnectorcanberesidenteither ontheclientoronthecontroller.Ifitis residenton
the controller, it must have a copy on both controllers to accommodate the initial connection
choiceaswellasfailover.
Therefore, except for the case that a native JDBC driver is replaced with a uni/cluster JDBC
driver,thereisnochangerequiredtobemadetoanyapplication.
Controllers
The uni/cluster controller manages the execution of all queries. It receives queries from the
clients that are connected to it, passes the queries to the virtualized database servers, and
returnstheresponsestotheclients.Itcontainsalloftheclusterlogicrequiredbytheuni/cluster.
The uni/cluster controller is also responsible for recovering the database servers connected
toitfollowingadatabaseserveroracontrollerfailure.
To the clients, the controller looks like a JDBC database. To the MySQL database servers
that it drives, it appears as a JDBC client. Thus, it is a transparent insert between the uni/cluster
clients and the virtual database made up of the multiple MySQL database servers. It hides the
virtualization structure from the clients. So far as the clients are concerned, they are talking
directlytoaMySQLdatabase.
There are always two controllers configured in a uni/cluster virtual database for fault
tolerance. Normally, the two controllers share the load. Some clients connect to one controller,
andtheother clients connecttotheother controller.Shouldacontroller fail,alloftheconnections
toitsclientsaretransferredtransparentlytothesurvivingcontrollerbytheuni/clusterdrivers.
The uni/cluster controller can reside either on a database server or on a dedicated server. In
small applications, only one database server may be provided for each controller. In this case,
eachcontrollercanresideonthenodesupportingthedatabase.
For larger applications, multiple database servers may be provided for each controller. Each
controllermustthenruninitsowndedicatednodethatconnectstothemultipledatabaseservers.
ItisrequiredthatthecontrollersrununderaLinuxoperatingsystem.RedHatAS/ES4and5,
CentOS 4.4 and later, Fedora 4, SUSE Enterprise Linux 9 and 10, OpenSUSE 10, and Debian
SargeLinuxoperatingsystemsaresupported.
The controller is responsible for distributing queries to the database servers connected to it.
For read-only queries, a single database server is selected to execute the query. In this way, the
query load is distributed across the database servers connected to the controller. Since total
query traffic is distributed between the two controllers via the driver connections, the read query
loadisdistributedacrossalldatabaseserversmakingupthevirtualMySQLdatabase.
Aquerythatmodifiesthedatabaseissenttoalldatabaseserversconnectedtothecontroller.
Suchaqueryisalsoreplicatedtotheothercontroller,whichsendsthequerytoallofitsdatabase
servers.Eachupdatequerycontainsauniquesequencenumberthat guaranteesthatthequeries
will be executed in the same sequence. Queries that are independent are executed in parallel.
However, queries that modify the same tables are executed sequentially. A response is returned
totheclientwhenalldatabaseservershavesuccessfullycompletedtheupdatequery.
Thecontroller comprisesfourmodules –aRequestScheduler,anoptionalRequestCache,a
LoadBalancer,andaRecoveryLog.
4
©2008SombersAssociates,Inc.,andW.H.Highleyman

RequestScheduler
The Request Scheduler sequences update queries, and it may take advantage of previous
resultsstoredintheRequestCache.
An update query may update table data, or it may update the database schema. The
Scheduler assigns auniqueidentifier toeachupdate query.This identifier ensures thatallupdate
queries directedtoallcontrollers areexecutedinthesame order tomaintaintransactionintegrity.
Independenttransactions thatdonotupdatethesametables areexecutedinparallel.Dependent
transactionsaffectingthesametableortablesareexecutedinsequence.
When an update query has been assigned an identifier, it is uni/clusterdrivers
senttothecompanioncontrollerforexecution.Thereliablegroup
