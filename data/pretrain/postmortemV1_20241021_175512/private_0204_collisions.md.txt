Collision Detection and Resolution
April2007
In an active/active system, the various database copies in the application network are kept in
synchronism through some mechanism. These mechanisms include synchronous replication,
asynchronousreplication,andtransactionreplication.1
Asynchronous replication is the most commonly used
technique today for database synchronization. data rowA rowA data
X
However, it presents a database consistency base base
problem. There is a certain amount of time for a
change made to one database to be propagated to
datacollision
another database copy. This time is called replication
latency. If applications attempt to update the same
update update
data item on two different nodes within the replication
rowA rowA
latency time, these updates will be replicated to the
other database copy and will overwrite the changes originally made there. The two database
copieswillbedifferent,andbothwillbewrong.Thisiscalledadatacollision.2
If data collisions cannot be avoided, they must be detected and resolved in order to maintain
consistencyofthedistributedapplicationdatabase.Thisisthefocusofthisarticle.
However, synchronous replication and transaction replication are not without their similar
problems.Theseproblemsarealsodiscussed.
Probability of Collisions
The probability that a data collision will occur is directly proportional to the replication latency of
the asynchronous data replication engine. Knowing this probability is key to determining the
extentofthedatacollisionproblem.
For a two-node active/active system with updates distributed uniformly over the database, the
datacollisionrateisgivenby
u2
datacollisionrate=2 L
D
where
uistheupdaterate(rowspersecond)
1
See the Availability Digest articles Asynchronous Replication Engines, Synchronous Replication, and Transaction
ReplicationintheNovemberandDecember,2006,issuesandintheFebruary,2007,issue,respectively.
2
Data collisions are discussed in much more detail in Chapter 4, Active/Active and Related Topologies, Breaking the
AvailabilityBarrier:AchievingCenturyUptimeswithActive/ActiveSystems,AuthorHouse;2007.
1
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

Disthedatabasesize(rows)
Listhereplicationlatency(seconds)
Forinstance,inasystemwithareplicationlatencyof100milliseconds,tenupdatespersecondto
adatabasecontainingonemillionrowsleadstoacollisionrateoflessthantwoperday.Thismay
not be deemed to be a problem. But if the update rate grew to 100 updates per second, data
collisionsgrowtoalmost200datacollisionsperday.Thiscouldbeamajorheadache.
Collision Avoidance
There are certain types of applications for which data collisions will not occur. These include
applications whichareinsert-only,suchasloggingapplications,andapplications inwhichthereis
only one physical entity (such as a patient in a hospital management system), which precludes
multipletransactionsonthatentityfrombeingactivesimultaneously.
However, in applications that are susceptible to data collisions, there are certain architectures
thatcanbeusedtoavoidcollisions.
SynchronousReplication
If synchronous replication can be used, there will be no data collisions. Synchronous replication
obtains locks on all required data items in all database copies across the network before making
changes to them. Thus, no other application can modify these data items until the locks are
released.Thisguaranteesproperserializationofupdates.
Synchronous replication is subject to deadlocks just as any other locking protocol, and standard
deadlock resolution techniques are applicable. This includes using an intelligent locking protocol,
whichspecifies theorder in whichlocks areobtained, or deadlock-resolutionprocedures,suchas
backingoffandtryingagain.
However, synchronous replication is also subject to a special form of deadlock due to the
replication latency of the data replication engine. Since it takes a time equal to the replication
latency to propagate a lock from one database copy to another, it is possible for applications in
two different nodes to obtain a lock on the same data item. Neither application can proceed
because another application is holding a lock that it needs. In this case, the replication latency
becomeslocklatency;anddatacollisionsbecomedeadlocks.
Suchdeadlockscanberesolvedbytimingoutorbackingoff.Alternatively,globalmutexescanbe
established with an intelligent locking protocol. In this case, global mutexes reside on a
designated master node. Applications must acquire the lock on the remote global mutex before
proceeding.
PartitionedDatabase
partition1
Data collisions can be avoided by partitioning part.1 part.1'
the database so that each partition is “owned” partition2
part.2' part.2
by only one node and can only be updated by
the owning node. All updates to a partition
must be sent to the owning node. As the
collisionavoidance
owning node makes updates to its partition,
viapartitioning
these updates are replicated to the other update update
partitioncopiesintheapplicationnetwork. partition1 partition2
Transactions might be routed by intelligent routers based on data content, or they might be
forwardedtotheowningnodebyroutingsoftwareineachnode.
2
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

If may be acceptable to back up each partition on only one other database copy. If this is
acceptable,therewillonlybetwocopiesofthedatabaseintheapplicationnetwork.
HierarchicalArchitecture
data
base
A hierarchical structure comprising one master node and
multiple slave nodes can be used to avoid collisions. In this
architecture, all updates are sent to the master node. The
master node makes all updates to its database copy and replication
replicates these updates to the slave copies. Since all
updates are being made to only the master database copy, data data
therewillbenodatacollisions. base base
However, all transactions at the slave nodes will be slowed
because the transactions mustbesentacross the network to master/slave
themasternode.
update update
Collision Detection
If collisions cannot be avoided, they must be detected and resolved either automatically or
manually.Datacollisionscanbedetectedbyensuringthattheversionoftheroworrecordonthe
target system is the same as that which was updated on the source system. If the target row
versionisdifferentfromthatofthesourcerow,acollisionhasoccurred.
Version checking is accomplished by sending some sort of row version indicator with the update
sothatthesourceandtargetrowversionscanbecomparedandverified.Thereareseveralways
inwhichthiscanbeaccomplished,including:
 sendingthebeforeimageofthesourcerow.
 time stamping each row with the time of its last update and sending the timestamp of the
sourcerow.
 addingaversionnumbertoeachrowandsendingtheversionnumberofthesourcerow.
 sendingachecksumofthesourcerow.
If a collision is detected, the participating systems must make a determination as to how to
resolveit,asdescribednext.
Collision Resolution
There are many techniques for resolving data collisions. Some of the more common ones are
discussedbelow.
ResolutionbyDataContent
The collision can be resolved based on data contained in the row. For instance, the latest (or
earliest)updatecouldbeaccepted.
NodePrecedence
3
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

The nodes in the active/active network could be given precedence. If a collision occurs, the
updatefromthenodewiththehighestprecedencewouldbeacceptedbybothsystems.
RelativeReplication
Most replication engines send the entire image (or a compressed version thereof) of themodified
row to the target system. This image overwrites the current contents of the row on the target
system.
With relative replication, only the operation on the field is replicated. For instance, if Node A
added 10 to a field, and if at the same time Node B subtracted 4 from that field, then Node A
would tell Node B to add 10 and Node B would tell Node A to subtract 4. The result is that the
fieldwouldbeincreasedby6inbothnodes.
When using relative replication, one must be careful not to combine operations that are not
commutative. As we have seen above, addition and subtraction can be replicated. Likewise,
multiplicationanddivisioncanbereplicated.Forinstance,(10x2)/5=(10/5)x2=4.
However,additionandsubtractioncannotbeintermixedwithmultiplicationanddivision.(10+2)x
3=36isnotthesameas(10x3)+2=32.
IgnoretheCollision
In some cases, it may be decided to ignore collisions. For instance, a statistical application may
belittleaffectedifahandfulofnumbersinaverylargesetareinaccurate.
It also may be felt that collisions will be self-correcting over time as later noncolliding updates
overwriteearliererroneousresultscausedbycollisions.
BusinessRules
There may be cases in which collisions can be resolved via specialized business rules. Many
replication engines allow such business rules to be bound into the engine and invoked as user
exits.
ManualResolution
Should all else fail, the collision should be logged for later manual resolution. It is, of course, the
goal of the automatic collision resolution algorithms described above to minimize the need for
manualresolution.
LoggingDataCollisions
No matter the outcome, all collisions and their resolutions should be logged for later review to
ensurethatthecollisionresolutionsareappropriate.
Transaction Replication
Transaction replication is another architecture for active/active systems. With transaction
replication,atransaction is senttotwoor moresystems,where itis independentlyexecuted.If all
goes well, the databases at the various systems will remain identical without the need for data
replication.
4
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

Aside from the loss of the scalability of active/active
architectures (all nodes must process all transactions), data data
transaction replication systems bring their own form of base base
data collisions. Unless the systems are run in lockstep,3
there is no guarantee that all systems will process the
transactions in the same way. For instance, transactions nodeA nodeB
may be received in different orders. Functions depending
upon the current time may execute differently. A disk
error may cause a transaction to abort in one system but
notintheothers.
There is no way to detect such collisions as they occur.
router
Rather, the databases should be compared periodically
to find any differences and then resolved.4 In fact, such a
comparison should also be run against databases
synchronized via asynchronous replication to ensure that
alldatacollisionshavebeen successfullyresolved. transactions
Summary
Since each node in an active/active system is processing transactions independently of each
other, there is the possibility that nodes may process transactions in different orders. Depending
uponthemethodusedtosynchronizethedatabasecopies,thiscanleadtovariousproblems:
 If synchronous replication is used, deadlocks may occur. Deadlocks are immediately
observabletotheapplicationsandcanberesolvedwithwell-understoodtechniques.
 If asynchronous replication is used, data collisions may occur. Data collisions can
sometimes be avoided by proper application structure. Otherwise, they can be detected
andinsomecasesresolvedautomatically.
 If transaction replication is used, the results of the transaction may lead to diverging
database copies. Diverging database copies can only be detected by periodic database
comparisonsandrequiremanualcorrection.
In the design of active/active systems, it is important that these problems be understood and that
proceduresbeinplacetoresolvethemshouldtheyoccur.
3
SeeCPAatAqueduct,Belmont,andSaratogaintheNovemberissueoftheAvailabilityDigestforanexampleofalock-
steppedtransactionreplicationsystem.
4
SeeFlexibleAvailabilityOptionswithGoldenGate’sTDMandShadowbase–TheActive/ActiveSolution,theAvailability
Digest;February,2007,andMarch,2007,respectively.
5
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman
