coordinatedcommits.
When using dual writes, all copies of the database are included
within the scope of the transaction (Figure 4). The application
must wait for each database update to complete across the
network before proceeding to the next update. It must then wait
for the transaction to be committed across the network before
informing the application that the transaction is complete. This
delay is a function primarily of the communication latency
between the nodes (which is related to the distance separating
the nodes) and of the size of the transaction. Thus, the nodes
typically must be near each other – such as in the same campus
or metropolitan area – and connectedbyveryfastmedia suchas
fiber, which may not allow the degree of separation required for
properdisastertolerance.
The coordinated-commit method for synchronous replication
minimizes application latency. A coordinated-commit replication
engine is a combination of synchronous-replication and Figure4:DualWrites
asynchronous-replication techniques. The coordinated-commit
replication engine registers as a voting member of the source system’s transaction. As shown in
Figure 5, changes are sent to the target database asynchronously so that they do not impact the
application. It is only at commit time that the coordinated-commit replication engine must wait for
onereplicationlatencytocheck
with the target database to
ensure that it can vote “yes” on
thetransaction.
Thus, the coordinated-commit
technique imposes an
application latency of one
replication latency plus one
channel latency as it
coordinates with its target
database at commit time. Even
Figure5:CoordinatedCommits if the nodes are separated by
thousands of miles, application
latencywiththismethodcanbeassmallastensofmilliseconds.
5
©2011SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Unidirectional versus Bidirectional Replication
UnidirectionalReplicationandActive/PassiveSystems
A unidirectional data-replication engine replicates data in one direction ̶ from a source database
to a target database. Figures 3, 4, and 5 are examples of unidirectional asynchronous- and
unidirectional synchronous data replication engines. Unidirectional replication is often used to
maintain a passive backup system in synchronism with an active production system. These
systemsareknownasactive/passivesystems.
Unidirectional replication for active/passive systems will always have much longer recoverytimes
thanbidirectional-replicationactive/activesystems,describednext.
BidirectionalReplicationandActive/ActiveSystems
A bidirectional data-replication engine replicates data in both directions between two databases.
Each database is acting both as a source database and as a target database. Anychange made
to one database is reflected in the other database via data replication. Therefore, every node in
the application network has a current copy of the application database and can participate in the
application. Since each processing node is activelyengaged in the application, such systems are
knownasactive/activesystems.
AdvantagesofActive/ActiveSystems
Active/active systems provide a wide range of advantages compared to active passive/systems.
Advantagesinclude:
 There are fewer users affected by a failure. In an active/passive architecture, all users
are down. In an active/active system, only the users connected to the failed node are
affected.
 Failover of affected users can be very rapid, supporting RTOs (Recovery Time
Objectives) measured in subseconds to seconds. This is because all that needs to be
done is toreroutetransactions or toreconnectusers toasurvivingnodefollowinganode
failure.
 Failovercanbeperiodicallyandsafelytestedsinceallnodesareknowntobeoperational
because they are actively processing transactions. When a failover does occur, it is to a
knownworkingsystem,providingpeaceofmindformanagement.
 Planned downtime can be eliminated by taking down one node at a time, performing
upgradeormaintenanceactivitiesonit,andthenreturningittoservice.
 Anapplicationcanuseallavailableprocessingcapacity.Thereisnoidlestandbysystem.
 Capacity can be added simply by adding nodes to the application network. There is no
need to replace existing systems with larger systems. Alternatively, an existing node can
be replaced with a larger or smaller node to increase or decrease the capacity of the
system. The new node’s database is synchronized with the application database, and
usersarethenreroutedtoit.Atthispoint,theoldnodecanbetakenoutofservice.
 Load easily can be balanced by rerouting some transaction activity to underutilized
nodes.
6
©2011SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

 Processing nodes can be located near clusters of users, thereby providing data locality
andareductioninresponsetime.
 A node can be located in a “lights-out” facility since its failure will not deny users access
totheapplication’sservices.
 If an application cannot run in a distributed environment, it can still be beneficial to run it
in an active/active environment. However, all activity is routed to only one node, which
provides all transaction processing.This configuration is calleda“sizzling-hotstandby.” It
resolves the application distributed-processing issues but retains all of the continuous-
availabilityfeaturesofanactive/activesystem.
Figure6:BidirectionalReplicationEngine
Figure 6 shows an example of an asynchronous bidirectional data-replication engine. In effect,
two unidirectional asynchronous replication engines (see Figure 3) are each replicating in
oppositedirections.However,thetworeplicationenginesarenotindependent;andtheyaremore
complex than a unidirectional replication engine. For one thing, each side must cooperate to
ensurethatachangereceivedviareplicationisnotreplicatedback tothesourceofthechange,a
conditionknownasdataoscillationorping-ponging.5
In addition, with asynchronous replication, it is possible that the same data item might be
changed in each copy of the application database within the replication-latency interval. If this
should happen, neither database will know of the conflict. Each will replicate its change to the
other database, and the replicated changes will overwrite the original change in each database.
Nowbothdatabasesaredifferent,andbotharewrong.Thisiscalledadatacollision.
DataCollisions
There are some applications in which data collisions can be ignored. For instance, perhaps a
temporarydatabase divergence is not important; and the databases will be resynchronized when
thatdataitemisonceagainupdated.
Some applications avoid data collisions. For instance, an application that is insert-only will not
sufferdatacollisions.
5Replicatedchangesareupdatestothedatabaseandarereflectedinthetargetsystem’schangequeue.Sincechanges
arereplicatedfromthechangequeue,unlesssomeprotectionisprovided,replicatedchangeswillbereplicatedbackto
the source system; and the process will be repeated. See Strickler, G., et al., “Bi-directional Database Replication
SchemeforControllingPing-Ponging,”UnitedStatesPatent6,122,630;Sept.19,2000.
7
©2011SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Some active/active architectures avoid collisions. One frequently used method is to partition the
database between the nodes. For instance, if the database can be partitioned by customer range
so that only one node updates anygiven partition of customer data, data collisions cannot occur.
In this case, the application must route all updates to the proper node that owns the customer
datapartitionbeingupdated.
The preferable method is for data collisions to be avoided. However, if data collisions are
possible, they must be detected and resolved. There are several techniques by which the
replicationenginecanautomaticallydetectandresolvedatacollisions.Theyinclude:6
 Detection – Detection is generally accomplished by sending with the source change a
row version of some sort that identifies the version of the row that the source system is
changing.Therowversioncantakemanyforms,suchasatimestamp,aversionnumber,
orabeforeimageoftherow.Ifthetargetsystemfindsthattherowversionbeingupdated
bythesourcesystem isnotthesameasthecurrentrowversioninthetargetdatabase,a
datacollisionhasoccurred.
 Resolution – Once the replication engine has detected a data collision, it must make a
decision as to which change to accept and which to reject. The decision rule must
provide consistency so that all nodes will make the same decision. Otherwise, the
database copies may diverge. Many collision resolution rules exist. The selection of a
resolutionalgorithmdependsupontheapplicationandhowitprocessesdata.
Examplesofcollision-resolutionrulesinclude:
Choosingtheupdatethatcarriesthelatest(orearliest)timestamp.
Choosingtheupdatethatwasmadebythenodewiththehighestprecedence.
Using relative replication, in which operations such as add and subtract are
replicated rather than row contents. Since these operations are commutative
(that is, they can be executed in any order and arrive at the same result), data
collisionsdonotresultindatabasedivergence.
Choosing the update according to specialized business rules bound into the
data-replicationengine.
In those cases where automatic resolution is not possible, collisions will have to
beresolvedmanually.
Bidirectional synchronous replication avoids data collisions since the replication engine must
acquire locks on all copies of the data item across the network before it can change (or as it
changes) any of them. Therefore, only one application at a time can change a data item, thus
avoiding collisions. A bidirectional synchronous replication engine can be implemented using two
unidirectional, coordinated-commit synchronous replication engines (see Figure 5), one for each
direction,asshowninFigure7.
6 Chapter 3, Asynchronous Replication, and Chapter 4, Synchronous Replication, Breaking the Availability Barrier:
SurvivableSystemsforEnterpriseComputing,AuthorHouse;2004.
8
©2011SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Figure7:BidirectionalSynchronousReplicationEngine
Summary
A wide variety of data-replication technologies are in use today. They support active/passive
systems, in which the backup system is passively standing by ready to take over if it is needed.
Also supported are active/active systems, in which all systems are actively involved in the
application. It can take minutes to hours to fail over to a passive backup in an active/passive
system. Failover in active/active systems is immediate since all that needs to be done is to
reroutetransactiontrafficfromthefailedsystemtosurvivingsystems.
In Part 3, we look more carefully at the various architectures used to achieve a wide range of
availabilities.WecomparethesetechnologiestoeachotherinaBusinessContinuityContinuum.
9
©2011SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com
|---|--|--|--|
| 0 |  |  |  |
| 1 |  |  |  |
| 2 |  |  |  |
