Roll-Your-Own Replication Engine – Part 2
February2010
Data replication is a fundamental requirement of active/active systems. It is this capability that
keepsthedatabasecopiesinanactive/activeapplicationnetworkinsynchronization.
There are many good commercially-available data-replication engines that have been in
production use for some time and are quite mature. However, it is often tempting to build your
own engine to (hopefully) save costs and to ensure that your needs are met. A replication engine
is a complex facility, and it is important that you have addressed all of its issues before you
launch such a project. The purpose of this two-part series is to review many of these issues to
makesurethatyouhavetakenthemintoaccount.
There are two types of data-replication engines – asynchronous engines and synchronous
engines. They were described in some detail in Part 1, which went on to discuss issues common
to both technologies. Here in Part 2, we look further at issues specific to each technology. We
also look at some management considerations that should be addressed before undertaking a
projecttobuildyourownreplicationengine.
Asynchronous and Synchronous Replication Engines
In summary, an asynchronous replication engine replicates changes to a target database after
the fact – after the changes have been applied to the source database. Therefore, the target
database lags the source database by a brief interval, which we call the replication latency.
Replication latency can lead to data loss following a node failure and to data collisions when two
nodesattempttoupdatethesamedataitematthesametime.
Synchronous replication engines update all database copies at the same time. Either all copies
areupdatedornoneare.Synchronousreplicationsolvestheasynchronousproblemsofdataloss
and data collisions but introduces a new problem.Theapplication is delayed while it waits for the
changes tobeappliedacross theapplicationnetwork.This delayis called applicationlatency and
can have a significant impact on application performance if the nodes in the application network
are widely separated. As a result, the geographical separation of nodes in a synchronous
replication network is limited and may not support the disaster-tolerance requirements of the
application.
Asynchronous Replication Issues
Someissuesareuniquetoasynchronousreplicationengines.
1
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

BidirectionalReplication
In an active/active system, each node is replicating its changes to all other nodes. Therefore,
replication is bidirectional. Node A is sending its changes to Node B, and Node B is sending its
changestoNodeA.Ifnothingisdonetopreventit,ping-pongingmayoccur.WhenNodeAsends
a change to Node B, Node B will update its database. This will cause the change to be written to
Node B’s change log. The replication engine in Node B will then read the change and send it
back to Node A, where the sequence is repeated. The change will continue to circulate ad
infinitumbetweenthenodes.
Therefore,itisimportanttobeabletodistinguishbetweenchangesinitiatedlocallyandthosethat
arereplicatedandtohavethecapabilitytonotrereplicatereplicatedchanges.
DataCollisions
If data collisions are possible and are unacceptable, collisions must be detected and resolved.
Therearetwobasicwaystoresolveadatacollision:
 Embed business rules in the replication engine to pick a winner. For instance, the latest
changemaybeaccepted;orthechangefromthehighest-prioritynodemaybeaccepted.
 Reportthecollisionforlatermanualresolution.
Evenifcollisionsareautomaticallyresolved,theyshouldbereportedforlatermanualreview.This
is especially true if the losing node may have already taken some action before its change was
rejected.
DataLoss
If a node fails, some changes may be lost. These changes are unknown to the other nodes,
which may then perform inappropriate processing. In the worst case, the lost changes may be
irretrievable.Proceduresmustbeinplacetohandletheseproblems.
ReferentialIntegrity
Since the target database is being actively used by other application copies, its consistency and
referential integrity must be assured. This is especially important if the replication engine is to be
multithreaded since updates may arrive out of order at the target database. Certainly, it must be
guaranteedthattransactionsthatimpactthesamedataobjectsbeexecutedinthesameorderas
they were at the source database. If intratransaction referential integrity is required, all changes
withinatransactionmustbeexecutedinthesameorderasatthesource.
NodeFailure
If a node fails, the surviving nodes in the application network must be able to queue changes to
thefailednodesothatthenodecanberesynchronizedwhenitisreturnedtoservice.
NodeRecovery
When a node is returned to service, changes that have accumulated in the other nodes must be
drained to the recovering node. The node cannot be returned to service until its database is
currentwithinthereplicationlatencyinterval.
2
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

OnlineCopy
If a node is down for an extended period of time, it may not be feasible to resynchronize it by
replicating accumulated changes to it. In some cases, this may take longer than simply copying
the entire database to the new node. In other cases, the changes may no longer be available,
havingbeenrolledoffofthesurvivingsystems.
In this case, an online copy utility must be used to copy the database of record to the recovering
node. We say an “online copy utility” since the copy must be performed without affecting the
sourcesystem from whichthecopyis beingmade.Further changes madeduringthecopyperiod
mustthenbeappliedbeforetherecoveredsystemcanbeputintoservice.
For very large copies, the mass of updates accumulated during the copy may seriously extend
therecoverytime.Inthiscase,acopyutilitythatcankeepthatpartofthedatabasethathasbeen
copiedinsynchronizationwiththerestofthesystemshouldbeprovided.
Synchronous Replication Issues
Though synchronous replication in an active/active system is bidirectional, ping-ponging is not a
problem.Thisisbecausechangesarenotbeingreplicatedasynchronouslyfromachangequeue.
Referential integrity is also not a problem since update order at the target database is controlled
bythelocksheldbythesourcesystem.
However,synchronousreplicationhasitsownsetofissues.
DistributedDeadlocks
Even if the application uses an intelligent locking protocol to avoid deadlocks (such as requiring
applications to always acquire locks in the same order), once the application is distributed,
distributed deadlocks can occur. This is due to the delay in the propagation of a local lock to
remotelocks.
Whentheapplicationacquiresalock onalocalcopyofadataobject,thereisabriefdelaybefore
it can acquire the remote lock. This delay is known as lock latency. During this time, an
application on the other system may acquire a lock on its copy of the same data object. Neither
cannowacquiretheremotelock,andadistributeddeadlockhasoccurred.
Either the replication engine must detect this deadlock and back off to try again later, or the
application mustdothis.In either event,the applicationmustbemodifiedto be deadlock-aware if
itisnotalready.
An alternative strategy is to modify the application to use global mutuxes – locks held by some
master node. The global mutex must be acquired before any of its subordinated data can be
modified. For instance, a master node may hold locks on invoice headers. The global invoice
headerlockmustbeacquiredbeforeanydetaillinesmaybeupdated.
NodeFailure
Should a node fail, that node must be removed from the scope of all further transactions. Further
changes must be queued for later synchronization in a manner similar to that used by an
asynchronousreplicationengine.
3
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

NodeRecovery
Whenafailednodeis tobe restoredtoasynchronous replicationnetwork,its databasemustfirst
be resynchronized with the database of record, as described earlier for asynchronous replication
– either by draining the change queues or by an online copy. During this time, resynchronization
isbeingdoneasynchronously.
When the failed node is close to being synchronized, it must then transition to full synchronous
replicationsothat itis includedinfurther transactions.This transitioncanbeverycomplex.There
aretwostrategiestoaccomplishthis:
 Whentherecoverednodeisnearlysynchronized,pausetheinitiationofnewtransactions
until synchronization is complete. Then resume synchronous operation. During this time,
the system is effectively down as it is not performing any processing. In some
applications, this delay may be brief and may be acceptable. However, if long
transactions(suchasbatchtransactions)arepossible,thistimemaybeindeterminate.
 If pausing processing during the final stage of resynchronization is unacceptable, then
the system must enter an intermediate phase in which asynchronous and synchronous
replication are occurring simultaneously. This is an extremely complex process. See
Achieving Century Uptimes – Part 18: Recovering from Synchronous Replication
Failures,TheConnection,September/October,2009,forafurtherdiscussionofthistopic.
Management Issues
In addition to the many technical issues that we have discussed, several management issues
shouldbeconsidered.
 A replication engine is a complex component of the underlying infrastructure of your
mission-criticalapplications.Itsdesignanddevelopmentis wellbeyondthecapabilitiesof
applicationdevelopers.Experiencedseniorsystemdevelopersareneededforthisproject
tobesuccessful.Canyouaffordtodivertsuchpersonneltothisproject?
 Since the replication engine is an important part of the system infrastructure, it must be
thoroughlytestedpriortodeploymentandthenpreferablyputintoproductiongradually.
 The development and proper testing of a replication engine is a lengthy project.
Requirements are likely to change as the project progresses, lengthening even further
thetimetodeployment.
 Building the replication engine is just the beginning. The same level of senior staff is
required for ongoing maintenance. The replication engine will need to be periodically
upgradedtoconform tonewoperatingsystem anddatabaseversionsastheyareputinto
use. Changing application requirements mayrequire further enhancements, suchas new
data transformations and modifications to handle higher replication loads. Industry
studies have shown that the cost of maintenance is often many times the cost of the
initialdevelopment.
 A great deal of replication technology is covered by patents. Though one can take the
risk that a vendor will not attempt to enforce its patents against an end user, are you
willingtotakethatchance?Ifnot,astudyoftheextensivebodyofpatentsisrequired.
4
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Summary
Organizations have built their own data-replication engines. However, this is quite a complex
task.The purpose of this series of articles is to ensure that you have thought out all of the issues
so that you don’t get caught in an embarrassing or untenable situation either because of
deploymentdelaysorbecauseofproductionoutages.
5
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com