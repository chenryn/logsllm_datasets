deployed using our Quicksilver distributed key-value (KV) store that can
push changes globally in seconds. This technology is used by all our
customers when making configuration changes in our dashboard or via the
API and is the backbone of our service's ability to respond to changes
very, very rapidly.

We haven't really talked about Quicksilver much. We previously used
[Kyoto Tycoon](https://fallabs.com/kyototycoon/) as a globally
distributed key-value store, but we ran into operational issues with it
and wrote our own KV store that is replicated across our more than 180
cities. Quicksilver is how we push changes to customer configuration,
update WAF rules, and distribute JavaScript code written by customers
using Cloudflare Workers.

From clicking a button in the dashboard or making an API call to change
configuration to that change coming into effect takes seconds, globally.
Customers have come to love this high speed configurability. And with
Workers they expect near instant, global software deployment. On average
Quicksilver distributes about 350 changes per second.

And Quicksilver is very fast.  On average, we hit a p99 of 2.29s for a
change to be distributed to every machine worldwide. Usually, this speed
is a great thing. It means that when you enable a feature or purge your
cache you know that it'll be live globally nearly instantly. When you
push code with Cloudflare Workers it\'s pushed out at the same speed.
This is part of the promise of Cloudflare fast updates when you need
them.

However, in this case, that speed meant that a change to the rules went
global in seconds. You may notice that the WAF code uses Lua. Cloudflare
makes use of Lua extensively in production and details of the [Lua in
WAF](https://blog.cloudflare.com/cloudflares-new-waf-compiling-to-lua/)
have been [discussed
before](https://www.youtube.com/watch?v=nlt4XKhucS4). The Lua WAF uses
[PCRE](https://www.pcre.org/) internally, and it uses backtracking for
matching and has no mechanism to protect against a runaway expression.
More on that and what we\'re doing about it below.

![](https://blog.cloudflare.com/content/images/2019/07/rule-deployment.png)

Everything that occurred up to the point the rules were deployed was
done "correctly": a pull request was raised, it was approved, CI/CD
built the code and tested it, a change request was submitted with an SOP
detailing rollout and rollback, and the rollout was executed.

![Cloudflare WAF deployment
process](https://blog.cloudflare.com/content/images/2019/07/WAF-deploy-1.png)

### What went wrong

As noted, we deploy dozens of new rules to the WAF every week, and we
have numerous systems in place to prevent any negative impact of that
deployment. So when things do go wrong, it's generally the unlikely
convergence of multiple causes. Getting to a single root cause, while
satisfying, may obscure the reality. Here are the multiple
vulnerabilities that converged to get to the point where Cloudflare's
service for HTTP/HTTPS went offline.

1.  An engineer wrote a regular expression that could easily
    [backtrack](https://www.regular-expressions.info/catastrophic.html)
    enormously.
2.  A protection that would have helped prevent excessive CPU use by a
    regular expression was removed by mistake during a refactoring of
    the WAF weeks prior---a refactoring that was part of making the WAF
    use less CPU.
3.  The regular expression engine being used didn't have complexity
    guarantees.
4.  The test suite didn't have a way of identifying excessive CPU
    consumption.
5.  The SOP allowed a non-emergency rule change to go globally into
    production without a staged rollout.
6.  The rollback plan required running the complete WAF build twice
    taking too long.
7.  The first alert for the global traffic drop took too long to fire.
8.  We didn't update our status page quickly enough.
9.  We had difficulty accessing our own systems because of the outage
    and the bypass procedure wasn't well-trained on.
10. SREs had lost access to some systems because their credentials had
    been timed out for security reasons.
11. Our customers were unable to access the Cloudflare Dashboard or API
    because they pass through the Cloudflare edge.

### What's happened since last Tuesday 

Firstly, we stopped all release work on the WAF completely and are doing
the following:

1.  Re-introduce the excessive CPU usage protection that got removed.
    (Done)
2.  Manually inspecting all 3,868 rules in the WAF Managed Rules to find
    and correct any other instances of possible excessive backtracking.
    (Inspection complete)
3.  Introduce performance profiling for all rules to the test suite.
    (ETA:  July 19)
4.  Switching to either the [re2](https://github.com/google/re2) or
    [Rust regex engine](https://docs.rs/regex/1.1.9/regex/) which both
    have run-time guarantees. (ETA: July 31)
5.  Changing the SOP to do staged rollouts of rules in the same manner
    used for other software at Cloudflare while retaining the ability to
    do emergency global deployment for active attacks.
6.  Putting in place an emergency ability to take the Cloudflare
    Dashboard and API off Cloudflare\'s edge.
7.  Automating update of the [Cloudflare
    Status](https://www.cloudflarestatus.com/) page.

In the longer term we are moving away from the Lua WAF that I wrote
years ago. We are porting the WAF to use the [new firewall
engine](https://blog.cloudflare.com/how-we-made-firewall-rules/). This
will make the WAF both faster and add yet another layer of protection.

### Conclusion

This was an upsetting outage for our customers and for the team. We
responded quickly to correct the situation and are correcting the
process deficiencies that allowed the outage to occur and going deeper
to protect against any further possible problems with the way we use
regular expressions by replacing the underlying technology used.

We are ashamed of the outage, and sorry for the impact on our customers.
We believe the changes we've made mean such an outage will never recur.

### Appendix: About Regular Expression Backtracking

To fully understand how
`` (?:(?:\"|'|\]|\}|\\|\d|(?:nan|infinity|true|false|null|undefined|symbol|math)|\`|\-|\+)+[)]*;?((?:\s|-|~|!|{}|\|\||\+)*.*(?:.*=.*))) ``
 caused CPU exhaustion you need to understand a little about how a
standard regular expression engine works. The critical part is
`.*(?:.*=.*)`. The `(?:` and matching `)` are a non-capturing group
(i.e. the expression inside the parentheses is grouped together as a
single expression).

For the purposes of the discussion of why this pattern causes CPU
exhaustion we can safely ignore it and treat the pattern as
[`.*.*=.*`](https://www.debuggex.com/r/DpHY-UOB9tRCJ62L). When reduced
to this, the pattern obviously looks unnecessarily complex; but what\'s
important is any \"real-world\" expression (like the complex ones in our
WAF rules) that ask the engine to \"match anything followed by
anything\" can lead to catastrophic backtracking. Here's why.

![](https://blog.cloudflare.com/content/images/2019/07/regex.png)

In a regular expression, `.` means match a single character, `.*` means
match zero or more characters greedily (i.e. match as much as possible)
so `.*.*=.*` means match zero or more characters, then match zero or
more characters, then find a literal `=` sign, then match zero or more
characters.

Consider the test string `x=x`. This will match the expression
`.*.*=.*`. The `.*.*` before the equal can match the first `x` (one of
the `.*` matches the `x`, the other matches zero characters). The `.*`
after the `=` matches the final `x`.

It takes 23 steps for this match to happen. The first `.*` in `.*.*=.*`
acts greedily and matches the entire `x=x` string. The engine moves on
to consider the next `.*`. There are no more characters left to match so
the second `.*` matches zero characters (that's allowed). Then the
engine moves on to the `=`. As there are no characters left to match
(the first `.*` having consumed all of `x=x`) the match fails.

At this point the regular expression engine backtracks. It returns to
the first `.*` and matches it against `x=` (instead of `x=x`) and then
moves onto the second `.*`. That `.*` matches the second `x` and now
there are no more characters left to match. So when the engine tries to
match the `=` in `.*.*=.*` the match fails. The engine backtracks again.

This time it backtracks so that the first `.*` is still matching `x=`
but the second `.*` no longer matches `x`; it matches zero characters.
The engine then moves on to try to find the literal `=` in the `.*.*=.*`
pattern, but it fails (because it was already matched against the first
`.*`). The engine backtracks again.

This time the first `.*` matches just the first `x`. But the second `.*`
acts greedily and matches `=x`. You can see what's coming. When it tries
to match the literal `=` it fails and backtracks again.

The first `.*` still matches just the first `x`. Now the second `.*`
matches just `=`. But, you guessed it, the engine can't match the
literal `=` because the second `.*` matched it. So the engine backtracks
again. Remember, this is all to match a three character string.

Finally, with the first `.*` matching just the first `x`, the second
`.*` matching zero characters the engine is able to match the literal
`=` in the expression with the `=` in the string. It moves on and the
final `.*` matches the final `x`.

23 steps to match `x=x`. Here's a short video of that using the Perl
[Regexp::Debugger](https://metacpan.org/pod/Regexp::Debugger) showing
the steps and backtracking as they occur.

![](https://blog.cloudflare.com/content/images/2019/07/23-steps-1.gif)

That's a lot of work but what happens if the string is changed from
`x=x` to `x=xx`? This time is takes 33 steps to match. And if the input
is `x=xxx` it takes 45. That's not linear. Here's a chart showing
matching from `x=x` to `x=xxxxxxxxxxxxxxxxxxxx` (20 `x`'s after the
`=`). With 20 `x`'s after the `=` the engine takes 555 steps to match!
(Worse, if the `x=` was missing, so the string was just 20 `x`'s, the
engine would take 4,067 steps to find the pattern doesn't match).\

![](https://blog.cloudflare.com/content/images/2019/07/matching-x-x.png)

\
This video shows all the backtracking necessary to match
`x=xxxxxxxxxxxxxxxxxxxx`:

![](https://blog.cloudflare.com/content/images/2019/07/555-steps.gif)

That's bad because as the input size goes up the match time goes up
super-linearly. But things could have been even worse with a slightly
different regular expression. Suppose it had been `.*.*=.*;` (i.e.
there's a literal semicolon at the end of the pattern). This could
easily have been written to try to match an expression like `foo=bar;`.

This time the backtracking would have been catastrophic. To match `x=x`
takes 90 steps instead of 23. And the number of steps grows very
quickly. Matching `x=` followed by 20 `x`'s takes 5,353 steps. Here's
the corresponding chart. Look carefully at the Y-axis values compared
the previous chart.

![](https://blog.cloudflare.com/content/images/2019/07/failing-x-x.png)

To complete the picture here are all 5,353 steps of failing to match
`x=xxxxxxxxxxxxxxxxxxxx` against `.*.*=.*;`

![](https://blog.cloudflare.com/content/images/2019/07/5353.gif)

Using lazy rather than greedy matches helps control the amount of
backtracking that occurs in this case. If the original expression is
changed to `.*?.*?=.*?` then matching `x=x` takes 11 steps (instead of
23) and so does matching `x=xxxxxxxxxxxxxxxxxxxx`. That's because the
`?` after the `.*` instructs the engine to match the smallest number of
characters first before moving on.

But laziness isn't the total solution to this backtracking behaviour.
Changing the catastrophic example `.*.*=.*;` to `.*?.*?=.*?;` doesn't
change its run time at all. `x=x` still takes 555 steps and `x=`
followed by 20 `x`'s still takes 5,353 steps.

The only real solution, short of fully re-writing the pattern to be more
specific, is to move away from a regular expression engine with this
backtracking mechanism. Which we are doing within the next few weeks.

The solution to this problem has been known since 1968 when Ken Thompson
wrote a paper titled "[Programming Techniques: Regular expression search
algorithm](https://dl.acm.org/citation.cfm?doid=363347.363387)". The
paper describes a mechanism for converting a regular expression into an
NFA (non-deterministic finite automata) and then following the state
transitions in the NFA using an algorithm that executes in time linear
in the size of the string being matched against.

![](https://blog.cloudflare.com/content/images/2019/07/thompson-1968.png)

Thompson's paper doesn't actually talk about NFA, but the linear time
algorithm is clearly explained and an ALGOL-60 program that generates
assembly language code for the IBM 7094 is presented. The implementation
may be arcane but the idea it presents is not.

![](https://blog.cloudflare.com/content/images/2019/07/nfa.png)

Here's what the `.*.*=.*` regular expression would look like when
diagrammed in a similar manner to the pictures in Thompson's paper.

![](https://blog.cloudflare.com/content/images/2019/07/figure-0@1.5x.png)

Figure 0 has five states starting at 0. There are three loops which
begin with the states 1, 2 and 3. These three loops correspond to the
three `.*` in the regular expression. The three lozenges with dots in
them match a single character. The lozenge with an `=` sign in it
matches the literal `=` sign. State 4 is the ending state, if reached
then the regular expression has matched.

To see how such a state diagram can be used to match the regular
expression `.*.*=.*` we'll examine matching the string `x=x`. The
program starts in state 0 as shown in Figure 1.

![](https://blog.cloudflare.com/content/images/2019/07/figure-1@1.5x.png)

The key to making this algorithm work is that the state machine is in
multiple states at the same time. The NFA will take every transition it
can, simultaneously.

Even before it reads any input, it immediately transitions to *both*
states 1 and 2 as shown in Figure 2.

![](https://blog.cloudflare.com/content/images/2019/07/figure-2@1.5x.png)

Looking at Figure 2 we can see what happened when it considers  first
`x` in `x=x`. The `x` can match the top dot by transitioning from state
1 and back to state 1. Or the `x` can match the dot below it by
transitioning from state 2 and back to state 2.

So after matching the first `x` in `x=x` the states are still 1 and 2.
It's not possible to reach state 3 or 4 because a literal `=` sign is
needed.

Next the algorithm considers the `=` in `x=x`. Much like the `x` before
it, it can be matched by either of the top two loops transitioning from
state 1 to state 1 or state 2 to state 2, but additionally the literal
`=` can be matched, and the algorithm can transition state 2 to state 3
(and immediately state 4). That's illustrated in Figure 3.

![](https://blog.cloudflare.com/content/images/2019/07/figure-3@1.5x.png)

Next the algorithm reaches the final `x` in `x=x`. From states 1 and 2
the same transitions are possible back to states 1 and 2. From state 3
the `x` can match the dot on the right and transition back to state 3.

At that point every character of `x=x` has been considered and because
state 4 has been reached the regular expression matches that string.
Each character was processed once so the algorithm was linear in the
length of the input string. And no backtracking was needed.

It might also be obvious that once state 4 was reached (after `x=` was
matched) the regular expression had matched and the algorithm could
terminate without considering the final `x` at all.

This algorithm is linear in the size of its input.


