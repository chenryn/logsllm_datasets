Defining Active/Active
Revision 1
January2010
Last month, we started a discussion of the definition of active/active systems.1Wenoted that the
general consensus is probably that it is a technique for building extremely reliable computing
systems.Butwhen weprobeddeeper, westartedtofindthecaveats –thelimitations imposedby
one technology or another to achieve such high reliability. How far can these caveats reach
before we must conclude that a particular approach is really not suitable for our applications
becauseoftheapproach’slimitations?
Wetookafirstpassatanactive/activedefinitionandstartedaLinkedInContinuousAvailability
Forumtoelicitdiscussiononthistopic.Tojoinus,searchonContinuousAvailabilityForum under
“Groups”inLinkedIn.2
Several excellent and constructive suggestions were made, and we incorporate them into this
Revision 1 of the document. As more suggestions come in, we will continue to keep the
documentupdated.
A Reader’s Dilemma
Rich Rosales of U.S. Bank, one of the Digest’s readers, expressed this concern to us recently in
some detail:3 Excerpts from his comments follow (his full comments are contained in the original
versionofthisdocument.1
Thevalueofprovidingactive/activehasrisentothepointofmanysoftwarevendorsclaiming
theysupportit-wheninfacttheydonot.…Inmyrecentexperience,everyvendorIspoke
withclaimedtheysupportedanactive/activearchitecture. WhenIpressedthemfordetails
onhowtheywouldhandlecollisions,theyallasked"Whywouldyouletthatoccur?"-asifthe
realityofupdatingthesamerecord(near)simultaneouslyontwogeographicallydistributed
systemswassimplyunthinkable-"Wouldn'tthatbefraud?"onevendorasked.
Ithinkwhatwehavehereisanopportunitytohelpclarifythedifferentlevelsofactive/active.
…Weneedtocomeupwithnewterminology-topreventvendorsfromfloodingthemarket
1DefiningActive/Active,AvailabilityDigest;December2009.
http://www.availabilitydigest.com/public_articles/0412/defining_active_active.pdf
2Orgoto
http://www.linkedin.com/groupsDirectory?results=&sik=1260921605283&pplSearchOrigin=GLHD&keywords=continuous+
availability+forum.
3SeeRich’sdescriptionofhisexperienceswithimplementinganactive/activesystem,publishedinU.S.BankCritiques
Active/Active,AvailabilityDigest;May2009.
http://www.availabilitydigest.com/public_articles/0405/usbank.pdf
1
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

withactive/active…architectures,andprovideameansbywhichthosevendorsthatcanand
doprovidehigherlevelsofavailabilitycandistinguishthemselves.
The Gold Standard – the “Perfect” Active/Active System
We agree wholeheartedly with Rich. Those of you who have been involved intimately with
active/activesystemsunderstandthemanyshadesoftheterm.
Togetahandleoncategorizingactive/activesystems,letusfirstdefinethe“perfect”active/active
system. If we can agree on such a reference definition, we can measure anyarchitecture against
that definition and can decide where the architecture complies and where it falls short. This will
giveusalevelplayingfieldwhencomparingactive/activetechnologies.
Wesubmitthata“perfect”active/activesystemwillhavethefollowingattribute:
An active/active system comprises multiple geographically-distributed processing nodes
using geographically-distributed consistent copies of the application database, such that the
application network survives any single point of failure with no data loss. Furthermore, a
transaction can be directed to any processing node in the application network; and the
recovery time from the failure of a processing node or database copy is short enough that
usersarenotawareofthefault.
A“perfect”active/activesystemmeetingthisattributehasmanydesirablecharacteristics:
(1) Disaster Tolerance - The system is disaster-tolerant since it comprises fully redundant,
geographically-distributed components (processing nodes and database copies) and will
survivethefailureofanyonecomponent(ormoreifproperlyarchitected).
(2) No Data Loss - Should the system suffer a fault, no data is lost. All completed
transactionsorupdatessurviveinalldatabasecopies.
(3) No Idle Nodes - All processing nodes and all database copies are available to equally
share the application load since reads and updates can be routed to any processing
node. The amount of excess capacity that must be licensed decreases with the number
of nodes in the network since the loss of a node results in a smaller decrease in overall
capacity.
(4) Locality–Databaserequestscanbedirectedtotheclosestprocessingnodeto maximize
performance.Processingnodescanusetheclosestdatabasecopy.
(5) Load Balancing -The system can be easily load balanced byredirecting read and update
activity.
(6) Scalability - The system can be easily scaled since processing nodes and database
copiescanbeaddedandtheloadrebalanced.
(7) No Unplanned Downtime - Unplanned downtime can be eliminated since transactions
canberoutedaroundanodefailurewithnoimpactonusers.
(8) NoPlannedDowntime-Planneddowntimecanbeeliminatedbyredirectingtrafficpriorto
the scheduled outage, downing a node, upgrading it, and returning it to service while the
othernodeshandletheapplicationworkload.
2
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

We understand that in today’s world, no technology achieves this goal.4 However, different
active/active technologies achieve different elements of this attribute; and users can select a
technologythatbestsuitstheirneeds.
Categorizing Active/Active Architectures
The first thing to recognize is that there is a natural dichotomy in active/active architectures –
asynchronoussystemsandsynchronoussystems.
AsynchronousActive/ActiveSystems
Inanasynchronousactive/activesystem,achangemadetoasourcedatabasecopyisreplicated
to the target database copies after-the-fact. There are two primary methods for implementing an
asynchronousactive/activesystem–datareplicationandtransactionreplication.
DataReplication
Using data replication, changes (inserts, updates, deletes) made to one database are queued for
transmission to the other database copies in the application network. A replication engine reads
changes from the change queue of the source database and sends them to a target system,
wheretheyareappliedtothetargetdatabase.
Thereareseveralwaysthatchangescanbeorganizedforreplication:
 Changesmaybereplicatedindependentlyoneatatime.
 Changes may be replicated independently one at a time as they are made at the source
system but are contained within the scope of a transaction. The begin and commit
directives for the transaction are replicated independently. All changes within the scope
of the transaction are committed (or aborted) at the target system when a commit (or
abort) directive is replicated to the target system. (Note that the begin-transaction
directivemaybyimpliedbythefirstchange.)
 Changes within the scope of a transaction successfully committed at the source system
may be sent as a batch of changes to be applied to the target database by the target
system.
 Operations may be replicated. (Note: If these are commutative operations that can be
applied in any order, such as add/subtract or multiply/divide, data collisions discussed
latercanbeavoided).
 SQLoperationsmaybereplicated.
TransactionReplication
With transaction replication, an entire transaction is routed simultaneously to all nodes in the
applicationnetwork.Eachnodewillexecutethetransactionindependently.
4Thoughatechnologycalled“coordinatedcommits,”tobeintroducedperhapsinthenextyear,maysubstantiallyclose
thisgap.SeeHP’sNonStopSynchronousGateway,AvailabilityDigest;June2009.
http://www.availabilitydigest.com/public_articles/0406/hp_srg.pdf
3
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

ReplicationLatency
Ineitherevent,datareplicationortransactionreplication,databasechangesaremadeatdifferent
times to different database copies. The difference in update times caused by asynchronous
replicationiscalledreplicationlatency.Replicationlatencyhastheeffectthatnearlysimultaneous
updatestoadataitem bydifferentprocessingnodesmightbemadeindifferentorder,leavingthe
database copies in different states. This is called a data collision and can lead to distributed
databasecorruption.
Furthermore, if data replication is used to keep the databases in synchronism, there can be data
loss if a node fails, as some of the data committed at the failed node may not have been
replicated to the other nodes yet. This is not true of transaction replication if transactions are
routedbythenetworkorclientandnotbyforwardingthemfromthereceivingnode.
SynchronousActive/ActiveSystems
In a synchronous active/active system, an update must be successfully applied to all database
copies in the application network before the update is complete. Therefore, data collisions and
datalossareeliminated.
However,synchronous replicationcreates another problem.Theapplication is delayedas it waits
for its changes to be applied across the application network, thus affecting performance. This
delay is known as application latency and is strongly influenced by the distance separating the
nodes. The internodal distance in a synchronous network is typically limited to a few kilometers
bytheseperformanceconsiderations.Consequently,disastertolerancemaybecompromised.5
Split-Brain Mode
A common problem with active/active systems occurs if connectivitybetween the systems is lost.
In this case, changes made by one node cannot be replicated to the other node. If the system is
asynchronous,andifbothnodesareallowedtocontinueinoperation,theirdatabaseswilldiverge
over time and must be resynchronized when the network is restored. Data collisions will have to
bedetectedandresolved.Thisiscalledsplit-brainmode.
If the system is synchronous, it must first convert to asynchronous mode or else no transaction
will be able to complete – the system will be down. It is now operating in split-brain mode, as
describedabove.
If split-brain is allowed, and if collisions can occur, collisions must be resolved when the nodes
are reconnected. If split-brain mode is not acceptable, separated nodes must be shut down until
connectivityisrestored.
Letuslookindependentlyatasynchronousandsynchronousarchitectures.
Asynchronous Active/Active Architectures
Aswehavediscussedearlier,asynchronousactive/activesystemsmaybeimplementedinoneof
two ways. One way is to allow a transaction to be processed by any node and to replicate the
updates created by the transaction to the other nodes via an asynchronous replication engine.
We call this data replication. The other way is to send the entire transaction to all nodes, which
will independently process the transaction. We call this transaction replication. Both have their
advantagesanddisadvantages.
5Newsynchronousalgorithmsbeingdevelopedmaylessenthisproblem.SeeFootnote3.
4
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

DataReplication
Asynchronous active/active architectures are generally implemented with asynchronous
replication engines such as those from HP, IBM, Oracle, Gravic, Network Technologies, Oracle,
Double-Take, and Continuent. In all cases, changes made to one database copy (which we will
call the source database) are placed in a change queue of some sort and then sent after-the-fact
overthereplicationnetworktotheother(target)databasecopiesintheapplicationnetwork.
The result is that all database copies are kept in synchronism in “near-real time.” By near-real
time, we mean that changes made to one database copy are reflected in the other database
copies after a short delay - the replication latency. Replication latency includes not only the
processing and intermediate storage delays in the replication engine but also the communication
channeldelayaschangespropagateacrossthereplicationnetwork(thecommunicationlatency).
Replicationlatencyhastwoundesirableconsequences:
(1) Should a processing node fail, all the changes that are currently in its replication pipeline
willbelost.
(2) Itis possiblefor two nodes toupdatethesamedata item atapproximatelythe sametime
(withinthereplicationlatencyinterval).Eachchangewillbereplicatedtotheother system
andwilloverwritetheoriginalchangethere.Asaconsequence,bothdatabasecopiesare
different;andbotharewrong.
To handle the problem of data collisions, many asynchronous replication engines incorporate
data collision and resolution facilities. Once detected, a collision is resolved by business rules
eitherbuiltintothereplicationengine,addedviauserexits,orperformedmanually.
Data loss and uncorrected data collisions result in a corrupted distributed database. Thus, there
aretwoimportantaspectstounderstandwithrespecttoanasynchronousdatareplicationengine:
(1) What is its replication latency? This will determine the expected data loss following a
nodefailureandthedatacollisionrate.
(2) Whatareitscapabilitiestoavoidortoidentifyandresolvedatacollisions?
The first aspect is simply a number (though it is system-dependent and may not be easily
determined).Itis thesecondaspectthat leads toavarietyof active/activearchitectures thatmust
beclearlyunderstood.
TransactionReplication
With transaction replication, there is no data loss if transactions are routed to the different nodes
by the client or by the network. If instead, transactions are routed by the nodes, data loss may
occurifthetransactionisprocessedbyanodebeforeitisrouted.
There is also a replication latency interval with transaction replication, but it is in the time interval
during which different nodes process the transaction. The longer this interval, the more likelyit is
that transactions will be applied in a different order, causing data collisions to occur. However,
with transaction replication, there is no way to detect a data collision. Therefore, data collisions
cannot be corrected as they occur. Many systems employ a validation utility to compare the
databasecopiessothatdiscrepanciesmaybecorrectedafterthefact.
5
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

CategorizationofAsynchronousActive/ActiveSystems
We suggest the following categorizations of active/active architectures. The category names use
thefollowingnomenclature:
Nomenclature Description
A asynchronousreplication
S synchronousreplication
A amorphousdatabase(updateanywhere)–a
transactioncanberoutedtoanynode.
P partitioneddatabase(updatespecific)–atransaction
mustberoutedtothenodeowningthepartition.
T transactionreplication(updateall)–atransaction
mustberoutedtoallnodes.
+ datacollisiondetectionandresolutionsupported
- datacollisionsnotsupported
