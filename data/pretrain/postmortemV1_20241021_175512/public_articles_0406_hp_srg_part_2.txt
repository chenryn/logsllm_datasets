completionoftheexport,thegatewayenterstheactivestate.
While in the active state, the gateway posts to the RM file a read that listens for a signal from
TMF. At the end of the transaction, when TMF has received a commit request call from the
application (e.g., via the application calling ENDTRANSACTION or via an SQL program calling
COMMITWORK),itsendstoallRMsaTMF_SIGNAL_REQUEST_PREPAREsignalaskingthem
tovoteonthetransaction.Thisbeginsthepreparephase(thefirstphase)ofthe2PCprotocol.
The gateway enters the preparing state at this point. It checks to see if it is in a position to
guarantee that it can complete the transaction (that is, it has acquired all locks; and all updates
have been safe-stored or tentatively applied). If so, it responds to TMF with a
TMF_SIGNAL_READYsignal.
If TMF receives a TMF_SIGNAL_READY signal from all of the RMs that have joined the
transaction, it enters the commit phase of the 2PC protocol and sends a
TMF_SIGNAL_REQUEST_COMMIT to all RMs. Upon receipt of this signal, the gateway will
commit the transaction and will respond with a TMF_SIGNAL_FORGET signal, indicating that it
hasreceivedthecommitandisleavingthetransaction.
If the gateway cannot commit the transaction, at the end of the prepare phase it will send a
TMF_SIGNAL_REQUEST_ROLLBACK signal to TMF. If TMF receives a TMF_SIGNAL_
REQUEST_ ROLLBACK signal from any of the RMs involved in the transaction, it will abort the
transactionbysendingaTMF_SIGNAL_REQUEST_ROLLBACKsignaltoallRMs.
Should the gateway detect a fatal error in transaction processing while it is either in the active
stateorinthepreparingstate,itmayimmediatelyabortitstransactionandsendaTMF_SIGNAL_
REQUEST_ROLLBACKsignaltoTMF,causingTMFtoabortthetransactionwithallRMs.
Upon entering the preparing state, if the gateway has received no work to do during the
transaction,itreturnsaTMF_SIGNAL_READ_ONLYsignalandleavesthetransaction.
5
©2009SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

send
begin
OTMF_EXPORT_ASYNC
tx
send exporting
OTMF_EXPORT
receive
EXPORT_DONE
end
active failed
sendorreceive tx
REQUEST_ROLLBACK
receive
REQUEST_PREPARE
preparing end
done
send tx
READ_ONLY
send
READY
prepared
receive
receive receive
REQUEST_COMMIT
REQUEST_COMMIT REQUEST_ROLLBACK
committed aborted
receive
TMF_DOWN
send
FORGET
forgotten TransactionStateTransitions
for
VolatileResourceManager
Figure3
end
tx
6
©2009SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

SG and Coordinated-Commit Replication
Let us use the coordinated-commit protocol7 as an example to illustrate the application of the SG
API to synchronous replication. Anasynchronous-replication enginesuffers from thepossibilityof
lostdatafollowingasource-nodefailureandfrom data collisions whenrunningin anactive/active
environment. A synchronous-replication engine suffers from increased transaction-response time
due to application latency as it waits for each operation to complete across the network. A
coordinated-commit replication engine is an interesting combination of asynchronous and
synchronous replication technology that eliminates data loss and data collisions while minimizing
applicationlatency.
TheCoordinated-CommitProtocol
With coordinated commits, when the application starts a transaction, the coordinated-commit
replication engine participates in the transaction via the SG API through a VRM. Asynchronous
replication is used to replicate updates to the target database, locking the data objects as it does
so. Thus, there is no additional latency imposed upon the application during this process.
However, transaction commit is synchronous. As a result, no data is lost should the source node
fail. Likewise, since all data objects are locked at both the source and target databases until
commit time, there can be no data collisions. Application latency only occurs as the source
systemwaitsforthereplicationenginetovoteratherthanaftereveryupdatethathasbeenissued
bythesourcesystem,asisthecasewithclassicalsynchronousreplication.
The coordinated-commit
protocol is shown in Figure 4 as
application
it would be implemented on a 1a.begintx
NonStop server. The
8.tx
coordinated-commit replication 4.commit
committed
engine is a VRM gateway. Both 2.jointx
TMF and the replication engine 6b.ready
3a.updates TMF
are informed when the (Transaction 5b.prepare
application begins a transaction Manager) 7b.commit
(1a). At this point, the
replication engine requests that audit replication target
log 3c.updates engine(VRM) db
it join the transaction (2). This
lets it vote on the outcome. It 1b.begintx
3b.updates
also requests that TMF on the 6a.ready 5a.prepare
target system begin an 7a.commit
independent transaction (1b),
DP2
one that is local to the target
(RM)
environment.
CoordinatedCommitReplication
ss osos dduo duo du bre cu brc ercc Figure4
A ups dateth se (3aa ),p tp hl eic ya atio ren wrii ts tes nue tos e bber
the DP2 disk processes (3b)
that are the RMs for the NonStop disks. Updates are also written to the TMF audit log. The
replication engine reads the updates from the audit log (3c) and replicates them to the target
database,wheretheyaretentativelyapplied.
When the application issues a Commit directive (4), TMF sends Prepare signals in parallel to all
of its ResourceManagers (5a),includingtheVRMs (thereplication engineinthis case) (5b).This
7 B. D. Holenstein, P. J. Holenstein, G. E. Strickler, Collision avoidance in data replication systems, U. S. Patent
7,103,586;September5,2006.
B.D.Holenstein,P.J.Holenstein,W.H.Highleyman,Asynchronouscoordinatedcommitreplicationanddualwritewith
replicationtransmissionandlockingoftargetdatabaseonupdatesonly,U.S.Patent7,177,866;February13,2007.
7
©2009SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

is the prepare phase of the two-phase commit protocol. The Resource Managers check that they
have safe-stored or tentatively applied all updates within the scope of the transaction and if so
replywitha“yes” vote- aReadysignal(6a,6b)-toTMF.IfallRMshavevoted“yes,”TMFsends
a Commit signal (7a, 7b) to all RMs – the commit phase - and notifies the application that its
transactionhasbeencommitted(8).
If anyRM cannot commit the transaction, it votes “no;” and TMF will send a Rollback signal to all
RMs,informingthemtoabortthetransaction.
Should a target database failure occur, it is the responsibility of TMF on the target system to
recoverthetargetdatabase.
MappingCoordinated-CommitReplicationtotheSGAPI
The use of the SG API and TMF signals to implement a coordinated-commitreplication engine in
a NonStop environment is shown in Figure 5. As in Figure 3, “send” means sending a signal via
OTMF_WRITE_SIGNAL, and “receive” means receiving a signal via a READX/
OTMF_WAIT_SIGNALoraREADX/AWAITIOX/OTMF_INTERPRET_SIGNALsequence.
rreecceeiivveeRREEQQUUEESSTT__
RPORLELPBAARCEK
application receiveREQUEST_ receiveREQUEST_
PREPARE COMMIT
readARLIB
receivebegintx
fromapplication receiveupdate preparing committed aborted
EXPORT
sendREADY sendFORGET
replicateupdate
active prepared forget
BeginTransaction ReplicateUpdates Vote Commit Abort
(applicationlatency)
TheUseoftheSGAPIbyaCoordinated-CommitReplicationEngine
Figure5
BeginTransaction
When an application issues a begin transaction, it notifies the coordinated-commit replication
engine via an interface provided by the replication engine. The replication engine joins the
transaction via the OTMF_EXPORT or OTMF_EXPORT_ASYNC API call. At this point, the VRM
enterstheactivestate.
ReplicateUpdates
While in the active state, the replication engine asynchronously replicates updates by extracting
changes from the TMF audit trail via ARLIB, the Audit Reader Library provided by TMF. Each
update is buffered and sent over the replication channel to the target database, where it is
tentativelyappliedawaitingacommitdirective.
8
©2009SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Vote(thePreparePhase)
WhenthereplicationenginereceivesaTMF_SIGNAL_REQUEST_PREPAREsignalfrom TMF,it
enters the preparing state. It waits until it can confirm that all of the updates within the scope of
the transaction have been tentatively applied to the target database, and it then returns a
TMF_SIGNAL_READYsignaltoTMF.Thisdelayistheapplicationlatencyaddedbycoordinated-
commitreplication.Atthis point,thereplicationengine enters the preparedstate. If thereplication
engine is unable to commit the transaction at the target database, it returns a
TMF_SIGNAL_REQUEST_ROLLBACK signal instead, which causes the transaction to be
aborted(notshowninFigure3).
Commit/Abort(theCommitPhase)
When the replication engine receives a TMF_SIGNAL_REQUEST_COMMIT or
TMF_SIGNAL_REQUEST_ROLLBACKsignalinthe preparedstate,itcaninitiate theappropriate
target-side processing and immediately send a TMF_SIGNAL_FORGET signal to complete the
source-sidetransaction.
Summary
The SG API allows TMF to safely support gateways to foreign resources through volatile-
resource managers. This capability allows replication engines to be integrated with TMF so that
updatestoremotedatabasescanbesynchronouslyreplicated.8
8 The material for this article is taken in part from the article Achieving Century Uptimes – Part 17: HP Unveils is
SynchronousReplicationAPIforTMF,The Connection;July/August2009.
9
©2009SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com
