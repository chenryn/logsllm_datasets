160516
June2016
To comply with full disclosure, we must point out that this article was submitted by an
AvailabilityDigestsubscriberwhowishestoremainanonymous.
160516.Whatisthat?
It is a NonStop date routine bug that has lain dormant for over thirty years. Just after midnight of Friday,
May13,2016,supportpersonnelfrom severalvendors werealertedbyaNonStopvendortoacriticalbug
thatwouldimpactpayment-processingapplicationsonMonday,May16th.
Severalvendorproductsexhibitedtheverysamedatebug. WhenthedatechangedtoMay16,2016,the
application processes wouldabend.Theywouldcontinue to abend with an arithmetic overflow everytime
theywererestarted.
WhatpossiblycouldbespecialaboutMay16,2016,sospecialthatnobodysawitcoming?
Thelineofcodethatcausedtheissuewas:
int day := $UDBL (JULIAN^DAY^NUMBER '\' %177776 + 1) '\' 7 + 1;
This code calculates a day of the week (1-7) from a Julian day number. The Julian day is the number of
days since January 1, 4714 B.C. The Julian day for Monday, May 15, 2016, is 2457525. This Julian day
is what causes the overflow. One would assume that every date afterwards would cause an issue also,
but none of them do. Date tests have been run out for weeks. Very large Julian days were tried. All
functionedcorrectly.
This date routine is probably over 30 years old. It was written well before there was a Guardian call to do
thesamething.TodayaGuardianprocedureexiststocalculatethedayoftheweekfromaJulianday:
int day := DAYOFWEEK(julian^day^number);
Fortunately, most systems would not switch to a processing date of 160516 until the coming Sunday
evening. The problem was identified by a payment-processing vendor that switched to the Monday
processing date following completion of Fridays’ processing in order to test its applications. The vendor’s
actual production impact was minimal, since it would not require OLTP capability until opening time
Monday.Thevendorimmediatelynotifiedtwootherpayment-processingvendorsofthebug.
Application code was changed overnight on Friday with vendors pulling all-nighters to ensure code was
built, tested, and ready for shipping to customers on Saturday. Developers and testers pulled out the
stops that weekend to ensure customers would not be impacted by the impending issue. This was not a
1
©2016SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

risk of system failure - it was a certainty. A high number of ATM’s would have been without service had
thecorrectionnotbeenmadeinatimelymanner.
Theinterestingquestioniswhatiswrongwiththatlineofcode?
Thecodedoesthefollowingtofindthedayoftheweek:
DivideJuliandayby7thenadd1.
Unfortunately, even in the 70s, the Julian day number was so big that the result of dividing it by 7
producesaquotienttoolargetobeheldinaninteger.Forinstance,
January1,1970=theJulianday2440588
2440588/7=248,655
What this code does is to make the number smaller.To do this, it divides the Julian day by the biggest
number you can store in an unsigned integer (16 bits) that is exactly divisible by seven (ie %177776 =
65,534) andthenadds 1, yielding aresultof 65,535. Ineffect,itis dividingtheJuliandaybyseven9,362
times and then adding 1. The remainder will never be more than 65,533, which is just less than the
maximum capacityofanunsignedinteger(65,536).Thus,youcanperform thedivideby7andadd1 with
amanageablenumber.
Unfortunately,thecodeinquestionusedasignedadd,anditisthisbugthatlaydormantforsolong.
int day;
day := $UDBL (JULIAN^DAY^NUMBER '\' %177776 + 1) '\' 7 + 1;
Thecodeaboveresults in aarithmeticoverflowerror whenappliedtoMay16,2016,sincethecapacityof
the unsigned integer is just 15 bits, or 32,768. The code below shows the error corrected. It uses an
unsignedaddoperation:
int day;
day := $UDBL (JULIAN^DAY^NUMBER '\' %177776 '+' 1) '\' 7 + 1;
The faulty code has been found in applications produced by at least two different vendors. These
applicationsinsomeformoranotherdatebacktowhennoGuardianprocedurewasavailabletocalculate
the day of week. Errors in other minor NonStop utilities were also observed on this date, indicating that
theuseofthiscodecouldbeevenmorewidespread.
Is it possible that the above method was published in an ITUG article or in a programming guide from
HP?Isitpossiblethatthesamedeveloperworkforallthreevendors?
Fortunately, testing indicates that the above routine, even if unfixed, will be behave correctly for at least
thenext100years.
Lesson Learned
IfyouhaveoldapplicationsthatcalculatetheJulianday,replacethatcodewiththeGuardianprocedure.
Acknowledgement
We would like to thank our anonymous subscriber for providing us the information contained in this
article.
2
©2016SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com