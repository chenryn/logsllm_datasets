Configuring to Meet a Performance SLA – Part 2:
Multiserver Response Times
January2009
Many applications carry with them a performance Service Level Agreement (SLA) that specifies
the response times that they must achieve. After all, if an application’s response time is so slow
thattheapplicationisnotuseful,theapplicationis,ineffect,down.
The performance requirement is often expressed as a probability that the system’s transaction
response time will be less than a given interval. For instance, “98% of all transactions must
completewithin500milliseconds.”
InPart1ofthisseries,wederivedthebasicresponse-timeexpressionforasingle-serversystem.
Here in Part 2, we extend that result to a multiserver system in which multiple servers work off a
common work queue. In Parts 3 and 4, we will further extend our results to answer the SLA
question posed above for servers with exponential and arbitrary service time distributions. We
concludewithanexampleofacomplexsysteminPart5.
Reviewing the Basic Single-Server Queuing Relationship
InPart1, weshowedthattheaverageresponsetimefor asingle-server system was givenbythe
Khintchine-Pollaczekequation:
T
T  s [1(1k)L] (1)
r 1L
where
T istheaveragetransactionresponsetime.
r
T istheaverageservicetimeoftheserver.
s
L istheloadontheserver.
k isthedistributioncoefficientoftheserver’sservicetime.
Thedistributioncoefficient kdependsupontheprobabilitydistributionoftheserver’sservicetime.
For instance, k = 1 applies to server distribution times that are random (that is, exponentially
distributed),whichisthecommonassumption.1Inthiscase,Equation(1)reducesto
T
T  s , (2)
r (1L)
which for many of you is the well-recognized transaction response time expression relating
transactionresponsetimetoserverload.
1Morespecifically,kis1/2theratiooftheservicetime’ssecondmomenttothesquareofitsmean.
1
©2009SombersAssociates,Inc.,andW.H.Highleyman

Note that the transaction response time, T, given by Equation (1) is the time that the transaction
r
must wait in the server plus its service time, T . The time that the transaction must wait in the
s
serveriscalleditsqueuingtime,T ,andfromEquation(1)is
q
T kL
T T T  s [1(1k)L]T  T (3)
q r s 1L s 1L s
Response Time for a Multiserver System
TheModel
We now consider the case in which multiple servers process transactions from a common
transactionqueue,asshowninFigure1.Atransactionentersthecommontransactionqueueand
waits until it arrives at the head of the queue. It is then serviced by the next server that becomes
available.
server1 response
server2 response
transaction
.
transaction .
queue .
serverc response
T T
q s
T
r
MultiserverSystem
Figure1
You have probably experienced the advantage of this arrangement yourself. If you are waiting in
line for an airline agent, would you rather have individual lines in front of each agent and try to
determine which will be faster; or would you rather wait in a common line and be serviced by the
nextavailableagentwhenyouarriveattheheadoftheline?Ivoteforthelatter.
Multiserver systems abound in today’s technology. For instance, web farms are often configured
this way. Multiple web servers provide pages upon request to remote browsers. Each browser
request is satisfied by the next available web server. Since these requests are context-free, each
maybeservicedbyanyserverintheserverpool.
Likewise, transaction monitors such as Tuxedo or HP NonStop’s Pathway route transaction
requeststothenextavailableprocess(theserverinthiscase)intheprocesspool.
Wedefinethefollowingparameters:
T istheaveragetransactionresponsetime.
r
c isthenumberofserversinthesystem.
L istheloadoneachserver.
T istheaveragetimethatthetransactionwaitsinthetransactionqueue.
q
T istheaverageservicetimeoftheserver.
s
NotethatListheloadoneachserver.Theloadcarriedbythesystem iscLandisthetransaction
arrivalratemultipliedbytheservers’servicetime.Ifthetransactionarrivalrateisr,then
2
©2009SombersAssociates,Inc.,andW.H.Highleyman

rT
L s
c
Thus,ifeachserverisrunning50%busy(L=0.5),andiftherearefiveserversinthesystem(c=
5),thesystem iscarryingatransactionloadof2.5.Putanother way,iftheaverageservicetimeis
10 milliseconds, and if the system is handling 250 transactions per second, the system load is
2.5. If there are five servers, each server is handling 50 transactions per second; and its load is
0.5.
TheAnalysis
The solution for the multiserver system is not pretty2 and is presented here without proof. The
formal derivation has only been made for exponential service times (k =1), but simulation studies
show that the queuing time, T , varies in about the same way as single server systems with
q
respect to the Khintchine-Pollaczek distribution coefficient, k.3 Noting from Equation (3) that T
q
variesdirectlywithk,weapplythatobservationhere.
Giventhat,theaveragetimethatatransactionwaitsinthetransactionqueue,T ,is
q
k(cL)c
T  p T (4)
q c(c!)(1L)2 0 s
andtheaveragetransactionresponsetime,T,is
r
T T T (5)
r q s
The term p is a new term. It is the probabilitythat there are no transactions waiting for service –
0
thatis,theservercomplexisidle.p isgivenby
0
1 c1(cL)n (cL)c
  (6)
p n! c!(1L)
0 n0
Ascomplexastheseexpressionsare,wecangleansomeinsightfromthem.Letustakethecase
of a single server (c = 1). Then Equation (6) evaluates to p = (1 - L), which is what we would
0
expect (L is the probability that the server is busy, so (1 – L) is the probability that it is idle).
SubstitutingthisintoEquation(4)forc=1,wehave
kL kL
T  (1L)T  T forc=1
q (1L)2 s (1L) s
whichisEquation(3).
Forc=2andk=1,
1L
p 
0 1L
and
L2
T  T
q 1L2 s
2T.L.Saaty,ElementsofQueuingTheory,pg.116,McGraw-Hill;1961.
W,H.Highleyman,PerformanceAnalysisofTransaction-ProcessingSystems,pg.126,Prentice-Hall;1989.
3J.Martin,SystemsAnalysisforDataTransmission,pg.461,Prentice-Hall;1972.
3
©2009SombersAssociates,Inc.,andW.H.Highleyman

T
T T T  s forc=2
r q s 1L2
ComparedtoEquation(2)forasingleserver,twoserverscanprocesstwicetheloadwithafaster
responsetime.Forinstance,ifT were10msec.,asingleservercouldhandle50transactionsper
s
second and be 50% loaded. Its response time would be 20 msec. However, a two-server system
could handle 100 transactions per second with each server being loaded 50%; and its response
timewouldbe13.3msec.
Thisisthepowerofmultiserverconfigurations.
The Results
Figure 2 shows transaction response time normalized to service time (T/T ) as a function of load
r s
for multiserver systems using 1, 2, 4, 8, and 16 servers. The improvement in response time is
clearly shown. The response time curve flattens out as the number of servers is increased and
6.00
5.00
c=1
4.00
T r/T s 3.00
2
4
2.00
8
16
1.00
0.00
0 .2 .4 .6 .8 1.0
L
Multiserver Transaction Time
Figure 2
breaksmuchmorerapidlyastheserversbecomefullyloadedat100%.
This leads to a caveat when using multiserver systems. They can be run at much higher loads,
but small increases in transaction rates at high load levels will break the system much more
quickly. An often used rule-of-thumb is that the load on a single server should not exceed 60%,
andtheloadonamultiserversystemshouldnotexceed80%.
Another caveat is that the transaction response time shown in Figure 2 applies to the number of
servers involved in the application, not the number of servers in the system. For instance, in a
sixteen-processor NonStop system, if a server class for an application is spread among four
processors,theperformanceadvantageforthatapplicationisthatofafour-processorsystem,not
asixteen-processorsystem.
Summary
The use of multiserver systems can greatly improve transaction response times. In addition,
availabilityis significantlyincreasedsinceshouldaserver fail,the other servers in thesystem will
simply continue to process the common transaction queue. However, care must be taken not to
run the multiserver system at too high a load. Though the transaction response time may be
4
©2009SombersAssociates,Inc.,andW.H.Highleyman

acceptable, response time may rapidly increase with a small increase in load, perhaps bringing
thesystemtoitsknees.
An Excel spread sheet that is useful in making these response time calculations can be found at
http://www.availabilitydigest.com/public_articles/0401/performance_sla_2.xls.
So far, the analyses that we have presented in Parts 1 and 2 have dealt with average response
times. But in order to answer the SLA question of what size server do we need to guarantee that
a certain percentage of transactions will be completed within a specified time, we need to know
thedistribution of response times.Weattack this problem inour upcomingPart 3 for servers with
exponentialservicetimesandinPart4forserverswitharbitraryservicetimedistributions.
5
©2009SombersAssociates,Inc.,andW.H.Highleyman
