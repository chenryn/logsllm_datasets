Defining Active/Active
December2009
If we ask a dozen people what the term “active/active” means1, the general consensus will
probablybethatitis atechniquefor buildingextremelyreliablecomputingsystems.Infact,this is
true.Theoryshowsthatactive/activesystemscanachievefailureintervalsmeasuredincenturies.
There are many examples of such systems that have been in production for a decade or more
withoutafailure.
But when we probe deeper, we start to find the caveats – the limitations imposed by one
technologyoranothertoachievesuchhighreliability. Howfarcanthesecaveats reachbeforewe
must conclude that a particular approach is reallynot suitable for our applications because of the
approach’slimitations?
In this article, we start a LinkedIn group to discuss just this issue. Please contribute to this work-
in-progress by sharing your comments with us on our LinkedIn Continuous Availability Forum at
http://www.linkedin.com/groupsDirectory?results=&sik=1260921605283&pplSearchOrigin=GLHD
&keywords=continuous+availability+forum.
If this link doesn’t work for you, search on Continuous Availability Forum under “Groups” in
LinkedIn.
As we refine the definition based on your comments, we will be revising this article with the
resultsofyourdiscussions.
A Reader’s Dilemma
Rich Rosales of U.S. Bank, one of the Digest’s readers, expressed this concern to us recently in
somedetail:2
Thevalueofprovidingactive/activehasrisentothepointofmanysoftwarevendorsclaiming
theysupportit-wheninfacttheydonot. Idon'tbelievethatthisisadirectattemptto
misleadtheconsumer-ratherasymptomofveryconfusingterminology.
Inmyrecentexperience,everyvendorIspokewithclaimedtheysupportedanactive/active
architecture. WhenIpressedthemfordetailsonhow theywouldhandlecollisions,theyall
asked"Whywouldyouletthatoccur?"-asiftherealityofupdatingthesamerecord(near)
simultaneouslyontwogeographicallydistributedsystemswassimplyunthinkable-"Wouldn't
1WhatisActive/Active?,AvailabilityDigest;October2006.
http://www.availabilitydigest.com/public_articles/0101/what_is_active-active.pdf
2SeeRich’sdescriptionofhisexperienceswithimplementinganactive/activesystem,publishedinU.S.BankCritiques
Active/Active,AvailabilityDigest;May2009.
http://www.availabilitydigest.com/public_articles/0405/usbank.pdf
1
©2009SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

thatbefraud?"onevendorasked.
Allofthesevendorssharedothersimilarprofilesaswell:
 Nochangesweremadetotheapplicationtohandleadual-sitedesignortofacilitate
collisionhandling.
 Alldatabasesynchronization,verification,detection,andconflictresolutionwaslefttothe
databasevendor.
 AtleastintheexamplesIhavelookedat,databaseupdateswereasynchronous.
Whatwehavehereisacommondual-sitearchitecturebeing"used"foractive/active-withno
attemptattransactionhomingorconflictresolution-they'resimplylettingcollisionsoccur.
I think what we have here is an opportunity to help clarify the different levels of active/active.
I'dliketoofferthefollowingasastartingpointforthisdiscussion:
Let’s first assume that all examples given here describe a dual-site architecture with
bidirectional replication - the same database record could be updated on either side of the
active/activeequation.
Level 0 - No collision detection or conflict resolution. If the communications link connecting
the two sites is lost or brought down, both sites will store updates for later application when
communications is re-established. In this scenario the likely result is that databases at both
sites will be out-of-sync. Impact will depend on the nature of the application and how the
databasesareused.
Level 1 - No collision detection or conflict resolution. If the communications link connecting
the two sites is lost or brought down, minimally one side of the sites has to be either brought
down or put into read-only mode to reduce data collisions. NOTE: I believe Level 1
describessynchronousreplication.
Level 2 - No collision detection or conflict resolution. To help avoid collisions, transactions
are "homed" to one site or the other - the goal being unidirectional updates at a record level.
If the communications link connecting the two sites is lost or brought down, routing of
transactions can no longer occur. The impact of this design can be mitigated through
network design - attempting to keep traffic localized to the respective database. As
enormous as this challenge may seem, it has been a staple strategy in many dual-site
architectures. Very few of the true advantages of active/active can be realized using this
technique. Arguably,thisarchitectureisnotsustainable.
Level 3 - Customized collision detection and conflict resolution. Although all practical
methods of collision avoidance are put into use, collisions are acknowledged as a fact of life
in a busy active/active architecture. Collisions are anticipated, and when they do occur they
are detected, categorized, and resolved using logic specifically designed for the type of
collision situation. Loss of communication between sites causes no disruption in processing,
and the increase in synchronization latency is anticipated and handled as a part of normal
processing.
I think this is a start - it certainly has helped us to understand the challenges of a fully
active/active architecture - and the decisions and architectural considerations that must be
madetoachievemorethansimplyadual-sitearchitecture.
Weneedtocomeupwithnew terminology - toprevent vendors fromfloodingthe marketwith
2
©2009SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

active/active (level 0) architectures, and provide a means by which those vendors that can
anddoprovidehigherlevelsofavailabilitycandistinguishthemselves.
The Gold Standard – the “Perfect” Active/Active System
We agree whole-heartedly with Rich. Those of you who have been involved intimately with
active/activesystemsunderstandthemanyshadesoftheterm.
Togetahandleoncategorizingactive/activesystems,letusfirstdefinethe“perfect”active/active
system. If we can agree on such a reference definition, then we can measure any architecture
against that definition and can decide where the architecture complies and where if falls short.
Thiswillgiveusalevelplayingfieldwhencomparingactive/activetechnologies.
Wesubmitthata“perfect”active/activesystemwillhavethefollowingattribute:
An active/active system comprises multiple geographically-distributed processing nodes
using geographically-distributed consistent copies of the application database, such that the
application network survives any single point of failure with no data loss. Furthermore, a
transaction can be directed to any processing node in the application network, and the
recovery time from the failure of a processing node or database copy is short enough that
usersarenotawareofthefault.
A“perfect”active/activesystemmeetingthisattributehasmanydesirablecharacteristics:
(1) Disaster Tolerance - The system is disaster tolerant since it comprises fully redundant,
geographically-distributed components (processing nodes and database copies) and will
survivethefailureofanyonecomponent(ormoreifproperlyarchitected).
(2) No Data Loss - Should the system suffer a fault, no data is lost. All completed
transactionsorupdatessurviveinalldatabasecopies.
(3) No Idle Nodes - All processing nodes and all database copies are available to equally
share the application load, since reads and updates can be routed to any processing
node.
(4) Locality–Databaserequestscanbedirectedtotheclosestprocessingnodeto maximize
performance.Processingnodescanusetheclosestdatabasecopy.
(5) Load Balancing -The system can be easily load balanced byredirecting read and update
activity.
(6) Scalability - The system can be easily scaled since processing nodes and database
copiescanbeaddedandtheloadrebalanced.
(7) No Unplanned Downtime - Unplanned downtime can be eliminated since transactions
canberoutedaroundanodefailurewithnoimpactonusers.
(8) NoPlannedDowntime-Planneddowntimecanbeeliminatedbyredirectingtrafficpriorto
the scheduled outage, downing a node, upgrading it, and returning it to service while the
othernodeshandletheapplicationworkload.
3
©2009SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

We understand that in today’s world, no technology achieves this goal.3 However, different
active/active technologies achieve different elements of this attribute, and users can select a
technologythatbestsuitstheirneeds.
Categorizing Active/Active Architectures
The first thing to recognize is that there is a natural dichotomy in active/active architectures –
asynchronoussystemsandsynchronoussystems.
 In an asynchronous active/active system, the database copies in the application network
are updated asynchronously. There are two primary methods for implementing an
asynchronousactive/activesystem:
o with data replication, in which changes made to one node are subsequently
replicatedtotheothernodes,and
o with transaction replication, in which changes are routed to all nodes, which
executethemindependently.
In either event, database updates are made at different times to different database
copies.Thismeansthatnearly-simultaneous(typicallywithinasecond) updatestoadata
item by different processing nodes might be made to different data item copies in
differentorder,leavingthemindifferentstates.Thisiscalledadatacollisionandcanlead
todistributeddatabasecorruption.
Furthermore, if a data replication engine is used to keep the databases in synchronism,
there can be data loss if a node fails, as some of the data committed at the failed node
may not have been replicated to the other nodes yet. This is not true of transaction
replication if transactions are routed by the network or client and not by forwarding from
thereceivingnode.
 In a synchronous active/active system, updates are made to the database copies
synchronously. An update must be successfully applied to all database copies in the
application network before the update is complete. Therefore, data collisions and data
loss areeliminated,butthe distanceseparatingthenodes is typicallylimited(generallyto
a few kilometers) by performance considerations. Consequently, disaster tolerance may
becompromised.4
Split-Brain Mode
A common problem with active/active systems occurs if connectivitybetween the systems is lost.
In this case, changes made by one node cannot be replicated to the other node. If the system is
asynchronous and both nodes are allowed to continue in operation, then their databases will
diverge over time and must be resynchronized when the network is restored. Data collisions will
havetobedetectedandresolved.Thisiscalledsplit-brainmode.
If the system is synchronous, then it must first convert to asynchronous mode or else no
transaction will be able to complete – the system will be down. It is now operating in split-brain
modeasdescribedabove.
3Thoughatechnologycalled“coordinatedcommits,”tobeintroducedperhapsinthenextyear,maysubstantiallyclose
thisgap.SeeHP’sNonStopSynchronousGateway,AvailabilityDigest;June2009.
http://www.availabilitydigest.com/public_articles/0406/hp_srg.pdf
4Newsynchronousalgorithmsbeingdevelopedmaylessenthisproblem.SeeFootnote3.
4
©2009SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Ifsplit-brainisallowedandifcollisionscanoccur,collisionsmustberesolvedwhenthenodesare
reconnected. If split-brain mode is not acceptable, then separated nodes must be shut down until
connectivityisrestored.
Letuslookindependentlyatasynchronousandsynchronousarchitectures.
AsynchronousActive/ActiveArchitectures
Anasynchronousactive/activesystemmaybeimplementedinatleastoneoftwoways.Oneway
is to allow atransactionto beprocessed byanynode andtoreplicatethe updates createdbythe
transaction to the other nodes via an asynchronous replication engine. We call this data
replication. The other way is to send the entire transaction to all nodes, which will independently
process the transaction. We call this transaction replication. Both have their advantages and
disadvantages.
DataReplication
Asynchronous active/active architectures are generally implemented with asynchronous
replication engines such as those from HP, IBM, Goldengate, Gravic, Network Technologies,
Oracle, Double-Take, and Continuent. In all cases, changes made to one database copy (which
we will call the source database) are placed in a change queue of some sort and then sent after-
the-fact over the replication network to the other (target) database copies in the application
network.
The result is that all database copies are kept in synchronism in “near-real time.” By near-real
time, we mean that changes made to one database copy are reflected in the other database
copies after a short (typically subsecond) delay. We call this delay the replication latency.
Replication latency includes not only the processing and intermediate storage delays in the
replication engine but also the communication channel delay as changes propagate across the
replicationnetwork(thecommunicationlatency).
Replicationlatencyhastwoundesirableconsequences:
(1) If changes are being replicated from one node to another, and should a processing node
fail,allthechangesthatarecurrentlyinitsreplicationpipelinewillbelost.
(2) Itis possiblefor two nodes toupdatethesamedata item atapproximatelythe sametime
(withinthereplicationlatencyinterval).Eachchangewillbereplicatedtotheother system
andwilloverwritetheoriginalchangethere.Asaconsequence,bothdatabasecopiesare
different,andbotharewrong.
To handle the problem of data collisions, many asynchronous replication engines incorporate
data collision and resolution facilities. Once detected, a collision is resolved by business rules
eitherbuiltintothereplicationengineoraddedviauserexits.
Datalossanduncorrecteddatacollisionsresultinacorrupteddistributeddatabase.
Thus, there are two important aspects to understand with respect to an asynchronous data
replicationengine:
(1) What is its replication latency? This will determine the expected data loss following a
nodefailureandthedatacollisionrate.
(2) Whatareitscapabilitiestoidentifyandresolvedatacollisions?
5
©2009SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

The first aspect is simply a number (though it is system-dependent and may not be easily
determined).Itis thesecondaspectthat leads toavarietyof active/activearchitectures thatmust
beclearlyunderstood.Itis this aspectthat leads totheactive/activelevels to whichRichRosales
refersashesuggestsdifferentlevelsofactive/active.
TransactionReplication
With transaction replication, there is no data loss if transactions are routed to the different nodes
bythe client or bythe network. If transactions are routed bythe nodes, then data loss mayoccur
ifthetransactionisprocessedbyanodebeforeitisrouted.
There is also a replication latency interval with transaction replication, but it is in the time interval
during which different nodes process the transaction. The longer this interval, the more likelyit is
thattherewillbedatacollisions.
CategorizationofAsynchronousActive/ActiveSystems
FollowingRich’s thoughts, wesuggestthe followingcategorizations of active/activearchitectures.
Thecategorynamesusethefollowingnomenclature:
Nomenclature Description
A asynchronousreplication
S synchronousreplication
A amorphousdatabase(updateanywhere)
U partitioneddatabase(updatespecific)
T transactionreplication(updateall)
+ datacollisionandresolutionsupported
- datacollisionsnotsupported
Thisleadstosixasynchronousactive/activearchitectures:
