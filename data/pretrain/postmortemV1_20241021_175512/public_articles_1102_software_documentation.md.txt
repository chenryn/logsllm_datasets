Software Documentation
February2016
I’llstartcoding.
Yougofindoutwhatthecustomerwants.
Withthosewords,thesoftwareformanylegacyapplications began decades ago.Little wonder thatmany
legacysystemstodayareunmaintainable.
Back in the 1970s through the 1990s, I ran a software development company, The Sombers Group. We
developed real-time, mission-critical software for many large companies including The New York Stock
Exchange,Time,McGrawHill,GeneralElectric,andtheChicagoTransitAuthority,amongmanyothers.
Back then, real-time systems were by and large programmed in assembly language to get the maximum
performance out of the underlying hardware. Unlike today’s languages such as Java and C#, these
languages were hardly self-documenting. Therefore, a major part of our effort was in software
documentation. In fact, it was our practice to thoroughly document the software before we began coding.
We than coded according to the documentation, which could be hundreds of pages long for a major
project.
We supported many of these systems for decades. In doing so, we kept the documentation up-to-date.
There was never a maintainability problem because of a lack of knowledge of how the software was
organized. We did not face the legacy software problem that so manyolder systems face today, such as
inthebankingandfinanceindustries.1
I can remember well-publicized programming contests in which programmers were given a task to
complete.Theprogrammerthatfinishedthefastestwonthecontest.Nevermindthemaintainabilityofthe
result.Nevermindthelevelofthedocumentation.Ifthecodeworked,thatwasallthatmattered.
And that was the mindset of many software projects of the time. Major systems were built without
documentation. The languages that were used were not self-documenting or were marginally human-
readable such as Cobol, PL/1, and Fortran. The developers moved on, retired, passed away. The skill
setstodealwiththeolderlanguagesbecamescarce.Oldlegacyapplicationsbecameunmaintainable.
Things have changed. With self-documenting languages such as Java and with advanced programming
techniques, the need for software documentation has taken a different tack. Today, there are two
common software development models – Waterfall and Agile. Both take a different approach to
documentation.
1RBS–APosterChildforOutages,AvailabilityDigest;January2016.
http://www.availabilitydigest.com/public_articles/1101/rbs.pdf
1
©2016SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

The Waterfall Model
The Waterfall model is really a throwback to how we handled documentation decades ago. It is a
sequential design process flowing through several formal phases, from requirements specification to the
design of the software, its implementation (coding), testing, and maintenance. The Waterfall model
requires that a new phase be entered only after the previous phase has been completed and verified. In
the 1980s, the Waterfall model was the standard used by the U.S. Department of Defense to work with
softwarecontractors.
TheWaterfallmodelplaces emphasisondocumentationsuchastherequirementsdocumentation,design
documentation,andtestprocedures.InatypicalWaterfallproject,aboutathirdof thetimeisspentonthe
initial requirements and design documentation, about a third of the time is spent on coding, and about a
thirdofthetimeisspentontestingandimplementation.
One argument for the Waterfall model is that it places emphasis on documentation. In less thoroughly
designed and documented methodologies, knowledge may be lost if team members leave before the
project is completed; and it may be difficult for the project to recover from such a loss. If a complete
design document exists, new team members can familiarize themselves with the project via the
documentation.
Itis also notedthat timespent in the earlyphases of thesoftware developmentcycle canreducecosts at
later stages. For example, studies have shown that a problem found in the early stages of the project,
such as during the creation of the requirements specification, is cheaper to fix than the same problem
foundlaterduringthetestingprocess,perhapsbyafactorof50to200.
Critics of theWaterfallmodel argue that the potential users of the software productmaynot know exactly
what their requirements are before they see working software. This leads to changes in requirements,
requiring redesign, redevelopment, retesting, and increased costs. It is better to be flexible during the
project and to deliver useful results in small increments that can be vetted by the end users. In this way,
changescanbemadequicklyandefficiently.
The U.S. Department of Defense now has a stated preference against Waterfall-type methodologies.
Rather, it encourages iterative and incremental development, such as the Agile software development
methodologydescribednext.
Agile Software Development
Compared to traditional software engineering such as the Waterfall method, Agile software development
targets complex projects with dynamic characteristics, in which accurate estimates, stable plans, and
predictions are often hard to get in the early stages. Big up-front specifications and designs would
probablybewrong,causealotofwastedtime,andwouldnotbeeconomicallypractical.
With Agile software development, requirements and solutions evolve through collaboration between
cross-functional teams including management, marketing, the end users, the developers, and the
maintainers. It promotes adaptive planning, evolutionary development, early incremental delivery,
continuous improvement, and rapid and flexible response to change. Agile software development
minimizestheneedtoprepareaprioridocumentation.
Proponents of Agilesoftwaredevelopmentargue that thereare oftenbetter ways toachievedesign goals
than by writing static documentation. Documentation should be “just good enough.” Too much
documentation can be a waste of developers’ time and is subject to rapid change, which often is not
incorporated into the documentation. Therefore, the documentation rapidly becomes out of sync with the
code. However, too little documentation may cause problems for later maintenance, user manuals, and
marketingcommunications.
2
©2016SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Therefore, a main goal of Agile software development is to reduce the amount of documentation created
duringaprojectandfocusontheactualcode.Thisis incontrasttoWaterfallmodels wheretheprocessis
often highly controlled, and minor changes to the system require significant revision of supporting
documentation.Oneof the keyfeatures of Agiledevelopmentis thatitis aniterativeprocess.Whendone
correctly, deliveries of small increments of the project occur frequently (weeks rather than months or
years) and provide immediate feedback for correction. Agile methods are focused on quick responses to
change and continuous development. Working software is more useful to clients than documentation for
managingthesoftwaredevelopmentproject.
The Agile development method breaks tasks into small increments with minimal planning. Iterations are
short time frames that typically last from one to four weeks. Each iteration involves a cross-functional
team working in all functions: planning, requirements analysis, design, coding, unit testing, and
acceptance testing. At the end of the iteration, a working product is demonstrated to stakeholders. This
minimizes overallrisk andallows theprojecttoadapt tochanges quickly.Workingsoftwareis theprimary
measureofprogress.
One unique method used by Agile software development is the use of pair programming. This is a
technique in which twoprogrammers work as apair together onone workstation. Oneprogrammer writes
the code while the other reviews each line of code as it is typed in. The two programmers switch roles
frequently. Pair programming results in a small amount of additional effort to create the code, but the
incidenceofcodingerrorsisremarkablyreduced.
Agile software development covers many of the purported advantages of the Waterfall model. For
instance, pair programming means that knowledge will not be lost if a team member leaves the project.
Furthermore,thedeliveryofthesoftwareinfrequentincrementalstagesallowserrorstobedetectedearly
intheprojectandcorrectedwithlittleexpense
Documentation
There is a massive difference between the Waterfall model and the Agile method in terms of the amount
of documentation that is developed. However, the documents can take on the same form even though
oneset(Waterfallmodel)isvoluminousandtheotherset(Agilemethod)isminimal.
TechnicalDocumentation
The first step in writing technical documentation is to determine what information needs to be included.
This documentation will be used bythe designers of the interfaces, bythe developers of the code, bythe
database administrators building the project database, and by the testers who verify that the software
worksasintended.Thisinformationwillprobablyinclude:
 Thedatatobemaintainedinthedatabase.
 Adescriptionofeachfunction.
 The overall program structure. For a disk-based application, this may include the individual
program modules. For a Web application, it may mean describing which pages use which
backendfilesortables.
Specify how much documentation should be within the program code and how much should be in a
separate document. For the Waterfall model, most of the documentation will be in separate documents
(though it may be included in the code as well). For the Agile method, most of the documentation will be
in the code, with perhaps a general guideline in a separate document. The modern programming
languagesusedbytheAgilemethod,suchasJava,C++,C#,andPHP,haveself-documentationfacilities
thatshouldbeused.
The technical documentation should describe the purpose of the functions, subroutines, variables, and
constantsusedintheprogram.Itshouldprovideamappingofwhichfunctionscallwhichfunctions.
3
©2016SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

The documentation should be indexed or searchable so appropriate functions can be rapidly accessed.
For legacysystems that have outdated technical documentation, there are several tools available to help
inrecreatingup-to-datedocumentation,suchasthosefrom CGI(www.cgi.com).
UserDocumentation
The primary reason for providing user documentation is to help users understand how to use the
application.Inaddition,itcanserveasavaluableresourceformarketingcommunications.
User documentation should not assume any familiarity with computer concepts on the part of the users.
Someusers suchassystem administrators willbehighlyknowledgeable.Other users,suchas data-entry
clerks,willmostlikelyonlyknowtheapplicationandhowtoenterdata.
There are several formats that can be used for user documentation. A reference manual explains the
individual data-entry features of an application, such as buttons, tabs, fields, and dialog boxes. This
formatcanbeusefultosupportcontext-sensitivehelpfilesthatdisplayarelevanttopic whenevertheuser
clicksthehelpbuttononaparticularscreenorhoversoveraparticularfieldorbutton.
A user guide explains how to use the application for a given task. User guides often take the form of
tutorials, with a summary of the tasks to be performed in the introduction and instructions given in
numberedsteps.
User documentation can take many forms, including printed manuals, online manuals, or help files. Help
files and online manuals should be indexed and keyword-searchable to allow users to quickly find the
informationtheyarelookingfor.
The creation of user manuals is an area of specialty for those of us at the Availability Digest. We have
created user manuals for companies such as the New York Stock Exchange, McGraw-Hill, and the
ChicagoTransitAuthority.Pleasecontactusifyouhaveaneedforusermanuals.
Summary
Theroleofsoftwaredocumentationhaschangedagreatdealoverthelastseveraldecades.Movingfrom
the extensive upfront documentation of the Waterfall model to the minimal documentation of the Agile
method, software documentation in now more of a matter of including it in the code than it is of writing
largedocumentsthatrapidlyageandbecomeuseless.
The one area that has not changed is user documentation. Though user documentation is more likely to
be an online function than it was years ago, it is still needed in all of its detail to guide users through the
useoftheapplication.
Acknowledgements
Informationforthisarticlewastakenfromthefollowingsources:
HowtoWriteSoftwareDocumentation,wikiHow.
Waterfallmodel,Wikipedia.
Agilesoftwaredevelopment,Wikipedia.
Pairprogramming,Wikipedia.
4
©2016SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com