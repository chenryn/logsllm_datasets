Choosing a Database of Record in an Active/Active System
November2008
In this age of corporate expansion, mergers, and acquisitions, companies find themselves with a
hodgepodge of new corporate databases that must somehow be consolidated. Many of these
databases containsimilar datasuch as names andaddresses.However, not onlymaytheformat
ofaparticulardataitem bedifferentindifferentdatabases,butitsvaluealsomaybedifferent.For
instance, a person may have moved. His new address is reflected in one database, but another
containsanolderaddress.Whichoneiscorrect?
Active/active systems further complicate this question, since there are multiple copies of the
databaseintheapplicationnetwork,allof whicharepresumablycorrect.Butwhatifsomesystem
problemcausesthesecopiestodiverge?Whichoneiscorrect?Weexplorethisissuebelow.
The Database of Record
What is needed is a master database that reflects the “single version of truth.” Its contents are
considered to be correct, even if the values of its data items maybe different from those in other
databases. This database is referred to as the database of record. A database of record is not
only necessary for the efficient operation of a company but is often required by government
regulations.
To address the challenge of creating a master database, companies often build a data
warehouse or an operational data store (ODS) to hold all of their data. Such a system contains
theone“versionofthetruth;”anditsdatabaseisthedatabaseofrecord.
There are several problems with data warehouse and ODS solutions. First, many of the
enterprise’s applications may need to be modified to account for the changes in data structures
usedbythecommoncentralizeddatabasemaintainedbythesesystems.
Even more critical is the need for the database of record to be continuously available. The
enterprise’s operations may well be seriously compromised if this database is not available. It
must be always accessible in order for a company to provide the necessary IT services to its
employees, customers, and vendors. Though today’s storage systems are very reliable, they do
fail.Forthisreason,itisimperativethatabackupsystembeconfiguredtoprotectthedatabaseof
recordandtoprovidecontinuedaccesstothecorporatedatashouldtheprimarysystemfail.
Today’s backup facilities generally rely on magnetic tape, virtual tape, or unidirectional data
replication to provide a backup copy of the corporate data. Should the primary system fail, the
backup system is brought into service, the database is loaded, and the system is put into service
tocontinuethefunctionsofthefailedprimarysystem.
However, in the event of a primarysystem failure, there is typically a failover time interval during
which data is unavailable (defined by the RTO, or recovery time objective); and some data may
1
©2008SombersAssociates,Inc.,andW.H.Highleyman

be lost (defined by the RPO, or recovery point objective).1 For instance, if magnetic tape is used
as the backup mechanism, it may take hours to load the backup database and bring the backup
system into service. Furthermore, all transactions that have occurred since the last backup are
lost.
An active/active system largely solves these twin problems of data unavailability and data loss.
However, inanactive/activesystem,therearemultiplecopies of theapplication database.Which
oneshouldbethedatabaseofrecord?
Database of Record in an Active/Active System
An active/active system comprises multiple
distributed processing nodes all cooperating in a updates data data updates
common application.2 Not only are there multiple queries base2 base3 queries
data
processing nodes in the application network, but
replication
there also are two or more copies of the
application database. Every user has access to
two or more processing nodes via the updates
data
communication network (this is necessary should queries
base1
oneoftheactivenodesfail).
In many active/active systems, a user is assigned AnActive/ActiveSystem
to a processing node; and that node processes all
of his transactions. Should the user’s node fail, his transaction activityis simplyrouted to another
node inthenetwork.Inother systems,eachtransactionis routedtoanodebased onnodal loads
orotherparameterssetbythenetwork.
Thus, should a node fail, transactions are simply no longer routed to it. If the node had users
assigned to it, those users are reassigned to surviving nodes. If the network is doing transaction
routing, then transactions are no longer routed to the failed node. Recovery from a node failure
canbeaccomplishedinsecondsorinsubseconds.
The database copies in the application network must all contain the same data so that any
application applied against any database will be correctly processed. To accomplish this, the
databases are synchronized by data replication. Whenever a transaction makes changes to a
database copy, those changes are immediately replicated to the other database copies in the
applicationnetwork.Therefore,alldatabasecopieswillalwaysbeinthesamestate.
However, one of these copies must be designated as the database of record. Furthermore, there
must be a process to promote another database to be the database of record should the primary
database of record fail. These choices are determined by the architecture of the active/active
applicationnetworkandarethesubjectofthisarticle.
Asymmetric Active/Active Systems Using Asynchronous Replication
AsynchronousReplication
There are two primary types of data replication that can be used to keep application database
copies synchronized – asynchronous replication and synchronous replication. Synchronous
replicationisdiscussedlater.
1Highleyman,W.H.; Holenstein,P.J.; Holenstein,B. D.; Chapter6 –RPOandRTO, BreakingtheAvailabilityBarrier:
SurvivableSystemsforEnterpriseComputing,AuthorHouse;2004.
2Highleyman,W.H.,WhatisActive/Active?,AvailabilityDigest,www.availabilitydigest.com;October,2006.
2
©2008SombersAssociates,Inc.,andW.H.Highleyman

With asynchronous replication,3 changes made to a source database are captured in a change
log. A replication engine follows the change log and extracts changes, which the engine sends
over the network to be applied to the target database. Replication activity is totally transparent to
the source system and to the application, and the target database is kept identical to the source
databasewithinaverysmalltimeinterval.
source change replication target
data log engine data
base base
AsynchronousDataReplication
The“verysmalltimeinterval” is knownas replicationlatency.Itis thetimefrom whenachangeis
applied to the source system to the time that it is applied to the target system and is typically
measured in the tens or hundreds of milliseconds for efficient replication engines. Replication
latencybringswithittwosignificantproblems:
 Lossofdatainthereplicationpipelineshouldthesourcesystemfail.
 Data collisions caused by changes made at separate database copies within the
replication interval. These changes will be replicated and will overwrite each other unless
otherwiseaccountedfor.
There are in use several active/active configurations designed to eliminate or easily resolve data
collisions when asynchronous replication is used. These configurations generally weight nodes
differently so that there is a predominant node.4 Therefore, these configurations are asymmetric.
That is, the nodes are not all equal; and the database of record is that maintained by the
predominantnode.
Master/Slave
In one such configuration, one of the nodes in slave slave
the application network is designated as the
queries queries
master node; and the other nodes are slave data data
nodes. All updates are routed to the master updates base base updates
node by the slave nodes. Changes made to the data
master database are then replicated to the repl.
slave databases. Since all updates are always
made to only one database, the master
updates data master
database,collisionsareavoided.
queries base dbofrecord
In this configuration, the master database is
chosen as the database of record. Should its Master/SlaveConfiguration
node fail, another node is promoted to be the
newmaster;anditsdatabasebecomesthenewdatabaseofrecord.
3Highleyman,W.H.;Holenstein,P.J.;Holenstein,B.D.;Chapter3–AsynchronousReplication,BreakingtheAvailability
Barrier:SurvivableSystemsforEnterpriseComputing,AuthorHouse;2004.
4Highleyman,W.H.;Holenstein,P.J.;Holenstein,B.D.;Chapter4–Active/ActiveTopologies,BreakingtheAvailability
BarrierII:AchievingCenturyUptimeswithActive/ActiveSystems,AuthorHouse;2007.
3
©2008SombersAssociates,Inc.,andW.H.Highleyman

Designated Master
The designated master configuration is similar to the master/slave configuration in that one node
isdesignatedasthemaster.However,inthisconfiguration,allupdatesaremadetothedatabase
ownedbywhichevernodereceivesthetransaction,whetheritisaslavenodeorthemasternode.
If the node is a slave node, it replicates its database changes only to the master node. The
master node will resolve any collisions according to business rules and will then replicate those
changes to all of the slave nodes, including the
slave slave
one, if any, that initiated the transaction. Data
collisions can occur between two slave nodes queries queries
data data
or between a slave node and a master node, updates updates
base base
butthemasternodeisthefinaladjudicator. data
repl.
In this case, the database managed by the
master node is declared the database of
queries
record. Again, should this node fail, one of the data master
updates
slave nodes is promoted to be the new master; base dbofrecord
and its database becomes the database of
record. DesignatedMasterConfiguration
NodePrecedence
The node precedence configuration involves assigning a precedence (or priority) to each node. If
adatacollisionshouldoccur,itisresolvedbyacceptingthecompetingchangefromthenodewith
thehighestprecedenceorpriority.
For instance, consider the example in which there
updates
are three nodes in the application network with data data updates
queries
precedences 1, 2, and 3, with precedence 1 being base2 base3 queries
data
the highest. If a node receives a data collision
replication
betweennodes2and3,thedatachangeinitiatedby
node 2 will beacceptedandthatfrom node3 willbe
rejected. updates data database
queries base1 ofrecord
In a node precedence configuration, the database
managed by the node with the highest precedence
NodePrecedenceConfiguration
is chosen to be the database of record. Should this
node fail, the database managed by the node with the next highest precedence will become the
databaseofrecord.
PartitionedDatabase
In some active/active systems, the database is partitioned among the nodes. Typically, one node
willownapartition;andthatpartitionwillbebackeduponthedatabaseofanothernode.
For instance, in a three-node active/active update
partitionA
system, the database might be partitioned into partB partC
partitions A, B, and C. One node provides data partA' partB'
storage for partition A and for the backup, C’, for
replication
partition C. Another node provides storage for
replicateto
partition B and for the backup, A’, for partition A.
partitionA'
The third node houses partition C and the
backup,B’,forpartitionB. partA
partC'
When a node receives an update for a partition,
PartitionedDatabaseConfiguration
it routes that update to the node owning that
4
©2008SombersAssociates,Inc.,andW.H.Highleyman

partition. The owning node will make the update to its partition and will replicate that change to
the other database copies in the application network. Since all changes to any given data object
willonlybemadeatonesystem,therewillbenodatacollisions.
Inthis case,thedatabaseof recordis alsopartitioned.Itcomprises theprimarypartitions thatare
distributedacrossthenetwork.
Should a node fail, the backup partition for the primary partition on the failed node becomes the
newprimarypartitionandthenewdatabaseofrecordforthatpartition.
GlobalMutex
If all nodes in an active/active network are queries
data data queries
peers, data collisions can be avoided by 2.update base base
using a global mutex. A mutex is a data
mutually exclusive lock (or other replication
deterministic sequencing algorithm) on a
data object. The lock must be acquired
before that data object can be modified. A 1.acquiremutex data queries
base
global mutex is a unique mutex 3.releasemutex
somewhere in the network. The global mutex database
ofrecord
mutex protects all of the copies of a data
objectacrossthenetwork.
GlobalMutexConfiguration
If a global mutex is used, an application that wants to update a data object must first acquire the
global mutex for that object. It can then update the object, knowing that no other updates can be
made while it is holding the mutex. Thus, data collisions are avoided. When the application has
finisheditsupdate,itreleasestheglobalmutex.
The global mutexes are generally resident on one of the nodes in the application network. The
application database managed by the node containing the global mutexes is designated the
databaseofrecord.
Shouldthenodecontainingtheglobalmutexesfail,theglobalmutexesmustbemovedtoanother
node.Thedatabasemanagedbythatnodenowbecomesthedatabaseofrecord.
Symmetric Active/Active System Using Asynchronous Replication
A symmetric active/active system is one in which there is no distinction between the nodes. The
nodes are equal peers, and there is no configuration
reason to designate one as holding the database of updates
data data updates
record. queries
base2 base3 queries
data
In this case, the determination of the database of replication
recordcanbebasedonotherattributes,suchas:
updates
data database
 Latency:Thedatabasethatismostcentralin queries
base1 ofrecord
the application network can be chosen to be
the database of record. Its maximum
SymmetricActive/ActiveSystem
replication latency to any other node will be
the shortest in the network, and it therefore has the potential to lose less data should it
fail.
5
©2008SombersAssociates,Inc.,andW.H.Highleyman

 Support: The database copy that is the best supported from an administrative and
maintenance viewpoint might be chosen as the database of record. This may be the
databasecopythatisresidentatcorporateheadquarters.
 Capacity: The database copy that is assigned to the node with the greatest capacity
mightbechosenasthedatabaseofrecord.
Symmetric Active/Active Systems Using Synchronous Replication
An alternative to asynchronous replication to keep
the database copies synchronized is the use of
data data
synchronous replication.5 With synchronous
base2 base3
replication,locksmustbeacquiredonallcopies of lock
the data object to be modified before any change update
can be made. Only if locks are acquired by all commit
databasecopies onalldata itemswithinthescope
of the transaction does the transaction initiator update
data
authorize the commitment of the transaction. At
base1
this point, the changes are made permanently to
eachdatabasecopy,andthelocksarereleased.
Synchronous Active/Active System
If a lock cannot be acquired by one database
copy, the transaction is aborted; and no changes are made to any database copy. Thus,
synchronous replication guarantees that either all data object copies are changed or that none
are. All data objects remain locked until their locks are simultaneously released by the updating
application.
As a result, no data collisions can occur; and no data will be lost following a failure. However,
transaction response times will be slowed due to the necessity to coordinate updates across the
network.
Synchronous replication is symmetric inthatno node has precedence.Theconsiderations for the
choice of a database of record are the same as those for symmetric active/active configurations
usingasynchronousreplication,asdiscussedearlier.
Node Promotion Following a Failure
Should the node containing the database of
record fail, another node must be chosen and updates data data updates
promoted to become the new database of queries
base2 base3 queries
record. The failed database is removed from new data
service, and the active/active system continues database replication
inoperationwithonelessnode. ofrecord
failed
Thefollowingconsiderationsmightbeusedas a data
database
basisforthisdetermination: base1
ofrecord
 Verification and Validation: Often, a
NodePromotion
verification and validation facility is used
to periodically compare the databases to the database of record. Should a discrepancy
be found, it is corrected to bring the database being tested into synchronism with the
database of record. If this is the case, the database copy that has been most recently
validatedcanbechosenasthenewdatabaseofrecord.
5Highleyman,W.H.;Holenstein,P.J.;Holenstein,B.D.;Chapter4–SynchronousReplication,BreakingtheAvailability
Barrier:SurvivableSystemsforEnterpriseComputing,AuthorHouse;2004.
6
©2008SombersAssociates,Inc.,andW.H.Highleyman

 Minimize Data Loss: The database copy that is geographically closest to the failed
database of record can be chosen to be the new database of record since it is likely to
have lost the least data following the failure of the node maintaining the database of
record. This is not a consideration if synchronous replication is used since there will be
nodatalostfollowinganodefailure.
 Support: The surviving node with the best administrative and maintenance support can
bechosenasthenewdatabaseofrecord.
Summary
Becauseanactive/activesystemcontainsmultiplecopiesoftheapplicationdatabase,theremust
be some method to determine which database copy is to be considered the database of record.
In architectures in which one node has a predominant role, the database managed by the
predominantnodeshouldbedesignatedthedatabaseofrecord.Thisincludesthemasternodein
master/slave and designated master configurations, the node with the highest precedence in
node-precedence configurations, the node that owns a partition in partitioned databases, and the
nodethatownstheglobalmutexifglobalmutexesareusedtoavoiddatacollisions.
If the system is totally symmetric, and if there is no dominant node, the determination of the
databaseofrecordcanbemadebasedongeographicallocation,administrativeandmaintenance
support,ornodalcapacity.
7
©2008SombersAssociates,Inc.,andW.H.Highleyman
