Microrebooting for Fast Recovery
March2007
In our article from last month entitled Recovery-Oriented Computing, we described the research
efforts being undertaken by the Recovery-Oriented Computing project at UC Berkeley and
Stanford University in California. We first summarize that article below and then describe an
important contribution of the ROC project toward achieving very fast recovery times of failed
systems–microrebooting.
The Recovery-Oriented Computing Project
In the past, high availability was brought to the marketplace by large mainframes and fault-
tolerant systems. However, with the advent of the Internet, enterprises have turned to large
complexes of heterogeneous off-the-shelf components. The availability of these hybrid
configurations as compared to mainframes and fault-tolerant systems has suffered for a number
ofreasons:
 The large number of components – servers, routers, databases, and so on - has led to
significantlyhigherfailurerates,whichmustbemanaged.
 The heterogeneous systems have been acquired from different vendors, with each
systemrequiringitsownformofsystemadministration.
 Theapplicationsarecharacterizedbyrapidinnovation.Consequently,thereisnotimefor
formalsoftwaredesignandtestingwhichleadstolessreliableapplicationsoftware.
 Becauseofthesystemcomplexity,itisoftendifficulttolocatethesourceofafailure.
 Because of the complexity of system management, there is a high incidence of operator
errors.
The user perception of availability is more important than actual system availability. It is the user
that counts. Perceived availability is different from actual availability because the user does not
see faults if they are repaired quickly enough. If faults can be recovered fast enough, there has
beennofaultsofarastheuserisconcerned.
ThegoaloftheRecovery-OrientedComputingprojectisto
 reduceoperatorandsoftwarefailurerates,
 automaticallylocatethesourceoffaults,and
 rapidlyrecoverfromthosefaults.
Fastrecoveryistheessenceofimprovingtheusers’perceptionofsystemavailability.
1
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

To provide fast recovery from operator errors, the ROC project is investigating the obvious – an
“undo” function for operator commands that simply doesn’t exist now. When an operator makes
anerror,heusuallyknowsitimmediatelyandcouldcorrectitifhesimplyhadanundokey.
A ROC facility for quickly locating software faults uses a tracing technique to determine the
processing path that each request takes. Byrecording these paths for both successful and failed
requests, the facility can determine the most suspicious software component in the path that has
causedafault.
Fast recovery depends upon microrebooting in which the smallest component that might be
causing the fault is simply rebooted. If the microreboot is fast enough so that other components
invokingitaresuccessfulonaretry,theuserisunawareofthefault.Microrebootingisthesubject
ofthispaper.
Microrebooting
Rebooting a system lets the software start with a clean slate. Its parameters are properly
reinitialized. Resources such as memory and file descriptors which it has leased are returned to
the system pools. Whatever problems that the system had been experiencing have been
eliminated.Rebootingis theultimatefixtoasoftwareproblem shortof trackingdownthebugand
correctingit.Ineffect,rebootingcuresagingsoftware.
The problem with rebooting as a generic recovery procedure is that it can be time consuming. It
can take minutes or more. Furthermore, all user sessions are lost; and critical data may also be
lost.Totheuser,thesystemiscertainlyseenasbeingdownduringthereboottime.
Usually,whenasoftwarefaulthasoccurred,itisonlyinoneapplication.Ifitispossibletoreboot
onlythatapplicationandnottheentiresystem,thisisastepintherightdirection.
Microrebooting1 takes this philosophy to the extreme. In an object-oriented environment, it
attempts to deduce the most likely object that caused the fault and reboots just that object.
Microrebooting can be done typically in a fraction of a second and is orders of magnitude faster
than a full reboot. Even more important is that the system unavailability is transparent to the
typicaluserbecauseoftheshortrecoverytimeandthefactthathedoesnotlosehissession.
PinpointingtheProblem
InInternetapplications,theareainwhichROCfocuses,asoftwarefaultgenerallyresultsineither
an error message returned to the user in response to a request or in that request timing out. To
correct the error, the first step is to locate the problem. The ROC project has built a prototype
facilitythatdoesthisquiteefficiently.ItiscalledPinPoint.
PinPoint is a cross between a trace facility and a data mining utility. When operational, it traces
thepaththateachrequesttypetakes throughthesoftwareataveryfinelevel,object-by-object.It
recordsthesesequencesforeachrequestwhethertherequestwassuccessfulornot.
By later analyzing the unsuccessful request paths against the successful request paths, PinPoint
can deduce the object that most likely created the fault. When a software fault occurs, it is this
objectthatisfirstrebootedtoattempttocorrecttheproblem.
1
G. Candea, S. Kawamoto, Y. Fujiki, G. Friedman, A. Fox, Microrebooting – A Technique for Cheap Recovery,
Proceedingsofthe6thSymposiumonOperatingSystemsDesignandImplementation;December,2004.
2
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

PinPoint overhead has been determined to be about 10% in a JBoss application server
environment.
RestartTree
SupportingPinPointisaRestartTreethatiscompiledbasedonknowledgeoftheapplicationthat
is being instrumented. The Restart Tree shows the interdependencies between the various
objects in the application. When an object is rebooted, so are all of the objects that are
subservienttoit.
ArchitecturalRequirements
In order for microrebooting to work, the system components must be well isolated and stateless.
Isolation is important so that other components can tolerate the temporary unavailability of a
componentwhichisbeingrebooted.
Isolation is generally achieved by having loosely-coupled components interacting by messages
only. In this way, a component can be defensive and ensure that it approves any change in state
or response which it may give. In no way should one software component be allowed to directly
invokeinternallogic of another component or tochangeits state. Commonmemoryarchitectures
shouldbeavoided.Theseareallattributesofobjectsintoday’stechnology.
Stateless means that the component’s important state must be physicallystored externallyto the
component in some sort of state store that is independent of the component. This creates what
ROC calls a crash-only software module. That is, the module can be rebooted without losing any
state.Crash-onlysoftwareisdiscussedinmoredetaillater.
TheseconsiderationsleadtotheROCframeworkforamicrorebootablesystem:
 Thesystemmustbecomposedoffine-graincomponents(suchasobjects).
 The components must be loosely coupled so that they can tolerate the momentary
outageofacomponentwhoseservicestheyaretryingtoinvoke.
 Requeststhatonecomponentmakestoanothercomponentmustberetryable.
 Thecomponentsmustnotencapsulateanystateinformation.
Theseareallwell-knownprinciplesofrobustprogramming,thoughsimplyinfinerdetail.
The combination of the isolation of components and the retryability of requests means that a
component will not fail simply because a service that it needs from another component is
temporarily unavailable. If a component is being rebooted, any component attempting to invoke
itsservicessimplywaitsabitandthenretries.Theinvokingcomponentneednotpanicandabort.
Isolation and retryability, coupled with a fine-grain structure and crash-only components, sets the
stageformicrorebooting.
TheRebootProcedure
Microrebooting is intended to achieve as fast a recovery as possible. However, there is no
guaranteethatmicrorebootingatthelowestlevelwillwork.
Therefore, the strategy is to attempt recovery by rebooting at ever more coarse levels. The first
attempt is to reboot the suspicious lowest-level component. Typically, this is so fast that if it
3
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

doesn’twork,thereisnosignificantrecoverytimepenalty.Ifitdoesn’twork,thenexthighestlevel
componentisrebooted.Thiscontinuesuntiltheonlyrecourseistoreboottheentiresystem.
Thehopeisthatthesystemwillproperlyrecoveratsomelowerlevelthanafullreboot.
MicrorebootingPrototype
The Recovery-Oriented Computing project has prototyped microrebooting with some impressive
results.Asatestvehicle,theychoseanauctionapplicationwhichrunsunderJBossandmodified
it to be crash-only. They also added a microreboot method to JBoss to perform microreboots on
any crash-only J2EE application. They injected faults into the system, and the response to the
faults was monitored. The recovery was deemed unsuccessful if the user received an error
messageandhadtoretryhisrequest.
In order to inject faults, they created hooks in JBoss to cause errors such as deadlocks, infinite
loops,memoryleaks,JVM(JavaVirtualMachine)memoryexhaustion,Javaexceptions,anddata
structure corruption. They also used a utilitycalled FIG to introduce faults. FIG stands for Failure
Injectioninglibc.glibcistheGNUClibraryusedbyJBoss.
Running in the J2EE framework, JBoss applications are implemented via Enterprise Java Beans
(EJBs). Java Beans are fine-grained objects that are isolated and retryable so that they are ideal
formicrorebooting.
PinPoint, described above, was used to monitor the application to determine the likely Java
Beans involved in a fault. When a Java Bean detected an error, it reported that error to a
Recovery Agent before retrying. Determining the likely culprit from the PinPoint study, the Agent
wouldrebootthatJavaBeanandallofitssubservientBeans.Thishappenedveryquickly.
If errors were still reported, the Agent would reboot the application reporting the errors. If that did
not correct the problem, JBoss was rebooted, followed by the JVM, and finally the operating
system. If none of this worked, a message was sent to the operator requesting human
intervention.Theoperatorwasalsonotifiedofrecurrentfaultstoavoidcontinualmicrorebooting.
A microreboot of a Java Bean took on the order of 500 milliseconds. Any reboot beyond this
resulted in a user error. The application took about 8 seconds to reboot, the JVM 20 seconds,
andfurtherrebootsweremeasuredintheminutes.
The result was that failed user requests were reduced by 98%! Clearly, microrebooting has a
future.
TheBottomLine
The advantage that microrebooting brings is that a sick node can continue to process requests
while it is beingrecovered. Ifmicrorebooting is successful, it is done withinthe timingparameters
ofthesystem.Theresultisthattheuserisoblivioustothenodefailure.
Application to Clusters
Canmicrorebootingbeadvantageousinclusters?Definitely.
When a node in a cluster fails, the system must fail over to another node in the cluster. User
sessionsarelost,andittakesseveralminutestobringuptheapplicationinthenewnode.During
thistime,thesystemisnotavailabletoitsusers.
4
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

If microrebooting is used, there is a good chance that a failed node can be salvaged. No user
sessionswillbelost,andthenodewillberepairedwithoutfailover.
In tests on an eight-node cluster, user errors were reduced by 93%. However, as the size of the
cluster grows, this effect is reduced because there is a smaller percentage of users on each
node.Thus,theadvantageofmicrorebootingbecomeslesssignificant(thoughitwillalwaysresult
inbetterrecoveryperformance).
Microrebootingaddedlessthan2%overheadtoeachnode.
Aside benefitof clustermicrorebooting is thatthereis less of aneedtoover-provisionthecluster
toprovidesufficientcapacityandresponsetimeduringafailure.
Microregeneration
Another use for microrebooting is microregeneration. Some shops make it a practice to
preemptivelyreboottheirsystemsperiodicallytorecoverresourcessuchasmemoryleaks(which
occurdespitegarbagecollection)inordertopreventunanticipatedproblems.
Microrebooting can be a better solution to system regeneration. Using memory usage as an
example, the amount of available memory can be monitored. When it falls below an acceptable
level, microrebooting can be employed on a rolling basis to reboot objects until available memory
has been returned to an acceptable level. This process is concurrent with normal use. The users
seenooutages.
Initially, the choice of object order is arbitrary. But by keeping track of the amount of memory
returnedoneachmicroreboot,thesystemcanlearntheoptimumorderformicrorebooting.
Crash-Only Software
As we have said, microrebooting requires that the components that are being rebooted be crash-
only software.2 This means that the components must have the capability of being stopped and
rebooted,thencontinueonfromwheretheyleftoff.
This implies that components cannot embed within themselves anystate which will be lost if they
arestoppedandthenrebooted.Theymustbestatelesssothattheycansurvivemicroreboots.
To accomplish this, important state must be stored in a dedicated state store. The state store
need not be persistent. It just needs to be stored outside of the components so that it survives
microreboots.Ifitispersistent,itwillsurvivehigher-levelreboots.
Summary
Microrebooting is the rebooting of fine-grain software components following an application fault.
Microrebootingcanachieve rapidrecovery,sorapidthatuser sessions arenot lostandtheusers
are unaware of the fault. If the microreboot is not successful, ever-coarser reboots are attempted
untiltheapplicationisreturnedtoservice.
In order to be microrebootable, an application must comprise fine-grain components that are
looselycoupled,retryable,andstateless.
2 G.Candea,A.Fox,Crash-OnlySoftware,Proceedingsofthe9thWorkshoponHotTopicsinOperatingSystems;May,
2003.
5
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

In prototype experiments, microrebooting has shown a 98% reduction in user-perceived faults.
Thisallowsafailednodetocontinueinoperationwithouthavingtorebootit.
6
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman
