The Business and Economics of Linux and Open Source
December2006
Martin Fink is responsible for driving Hewlett-Packard’s Linux and open source strategy. He
heads HP’s Business Critical Systems which includes not only the open source and Linux
operations but also NonStop servers and business critical servers. His book1 is a clear and
concise explanation of the advantages and pitfalls of open source for those management teams
who are reluctant to move to open source because they don’t understand the business model. It
isalsovaluableforthosewhohavebreachedthatbarrierandareanxioustolearnmore.Assuch,
thisbookisformanagement,notfordevelopers(naryacodestatementintheentirebook).
ThefollowingreviewisanencapsulationofMartin’seasy-to-readandtimelybook.
Introduction
Theconceptofopensourcesoftwarecanbeincreduloustomany.HowcanItrustmybusinessto
it?Whatcontrolmechanisms driveit?How doIsupportitif Iam notbuyingitfrom somevendor?
Is it really free; and if so, how do people make money on it? After all, if there is no money to be
made,thismovementisn’tgoingtolastverylong.
First of all, open source software is known as free software. But the first lesson to learn is that
“free”doesn’tmeanfreeofcost.Itmeansthefreedom touse,modify,anddistributethesoftware.
Theexistenceofalargecommunityoftalentedpeoplecontinuallyimprovingasoftwareproductis
the basis for the strength of open source software. The only requirement is to comply with the
opensourcelicensingagreement.
PerhapstheleadingopensourceprojectistheLinuxoperatingsystemkernel.Itisestimatedthat
40,000,000copiesofLinuxarenowinuse.Speakingofthealternatemeaningof“free,”about
halfofthesecopiesarepurchasedfromLinuxvendors.
Linuxlargelyowesitssuccesstoonekillerapplication–theApacheWebServer,whichisused
onabout50%ofallInternetsites.
Martin’sbookrevolvesaroundLinuxastheprimeexampleofopensource.
History
Theconceptofopensourcestartedin1984withtheformationoftheFreeSoftwareFoundation.
1Fink,M.,TheBusinessandEconomicsofLinuxandOpenSource,PrenticeHallPTR;2003.
1
©2006SombersAssociates,Inc.,andW.H.Highleyman

Linux was first released in 1991. It had, in fact, simply been a college project of Linus Torvalds,
who wanted a version of UNIX to run on his Intel-based 386 PC. He released it as free software,
and a multitude of other developers began porting it to other platforms and adding
enhancements.
Today, Linux is the most widely ported of all operating systems. Most major hardware and
software vendors support it, including HP, IBM, Dell, Oracle, SAP, and BEA.. It is strongly
supported by a variety of tools, especially the GNU (GNU is Not Unix) compilers, editors, and
othertools.
Red Hat, the first Linux distributor, was founded in 1994. Today, Linux is widely distributed by a
varietyofvendors,includingRedHat,SuSE,andmanyothers,
The term “open source” was coined in 1998 as a more meaningful and less confusing term for
“freesoftware.”
Open Source Development Model
An open source project is generally sponsored by a corporation, foundation, committee, or
individual. The development of the project proceeds with the efforts of a worldwide, loosely
coupledcommunityofdeveloperswhoareinterestedintheproject.
Thereareavarietyofsponsorsforthemultitudeofopensourceprojects,including;
 Linuxanditscomponents
 WebServicesandApplicationServers(Apache,JBOSS)
 Languages(GCC,Perl,Python)
 DesktopandOfficeProductivity(GNOME,Mozilla)
 Databases(MySQL)
 PDA(handheldLinux)
 Clusters(Beowulf)
For each sponsor, there is typically one individual who assumes the role of maintainer. It is the
maintainer who accepts or rejects code for the project. In the case of Linux, however, the
development effort is so large that there is a hierarchy of maintainers working under the direction
ofLinusTorvalds.LinusremainsthemaintainerforalargepartoftheLinuxkernel.
It is the maintainer who decides when to issue a release. Interim releases will be issued quite
frequently. Theymaybe buggy, but the intent is to get a lot of eyes on the code to make it stable
and complete. A production release will be issued when and only when the maintainer decides
that the code is ready. He is not under any pressure of committed deadlines. The schedules are
whattheyare.
Code quality is basically a matter of trust and respect within the development community. Code
additions and modifications are viewed by many, and the community is quick to praise and to
criticize. Developers who consistently deliver faulty code are not welcome in the community and
arelikelytohavetheircoderejectedbythemaintainer.
This development culture is indeed quite different from the corporate development culture, and
this is a fundamental reason why the concept of open source is so often difficult to sell in an
organization.Aclassicdescribingthedifferenceinphilosophybetweencorporationsandtheopen
sourcecommunityis thebook,CathedralandtheBazaar:Musings onLinux and OpenSourceby
2
©2006SombersAssociates,Inc.,andW.H.Highleyman

an Accidental Revolutionary, by Eric Raymond.2 The cathedral is the traditional software
developmentmodel.TheBazaaristheopensourcedevelopmentmodel.
Distributions
There are many distributors of Linux. Red Hat and SuSE have already been mentioned. Other
major open source projects have their own set of distributors working in a similar fashion to the
Linuxdistributors.
A Linux distributor will combine the Linux kernel with compilers, editors, and tools from GNU as
wellaswithotheropensourcecomponents.Theymaythenaddtheirownenhancementstomeet
aparticularmarketneed.
Distributors often will bundle their open source products with optional services and support. This
isonebusinessmodeltomakemoney.
Because each distributor may add its own enhancements to the open source product, Linux was
threatened with the UNIX syndrome of manyincompatible versions. To avoid this pitfall, the Free
Standards Group was established. Its role is to establish standards that all distributors will follow.
Itdoesthisnotbywritingnewstandardsbutbydocumentingwhatexiststoday.
ThisgrouphascompletedaLinuxstandardcalledtheLinuxStandardsBase(LSB).
Business Benefits
As a radically new and different approach to software development and acquisition, open source
comeswithitsownsetofbusinessbenefitsandconcerns.
At the top of the benefits list is the total cost of ownership, or TCO, of an open source-based
system. Low TCO starts with the low acquisition cost of an open source product. It can often be
obtained at no cost by downloading it from the Internet. Alternatively, it can often be purchased
fromadistributorforacostapproximatingthemediaandmanualcosts.
Open source products run on commodity hardware, thus greatly reducing hardware acquisition
costscomparedtoproprietarysystems.
Supportcanalsobeobtainedatnocostifoneisinapositiontoacceptadhochelpfrom theuser
community. Alternatively, since the source code is freely available, inhouse technical staff can
provide support. Finally, support can be purchased from any one of a number of vendors who
have built up a support business around the freelyavailable source code. Since there are often a
varietyofvendorsofferingsupport,supportcostscanbecompetitivelyreasonable.
Becauseopensourceisnowawell-supportedtopicincollegesandtradeschools,thereisagood
availabilityoftrainedtalent.
Open source products are vendor neutral since they have been developed by a wide-ranging
community.Therefore,thereisnocommitmenttoproprietaryhardwareorsoftware.
There is no formal end-of-life associated with an open source product. It does not become
“functionally stabilized,” nor is support terminated at some point in the future. It will always be
supported so long as there is interest in the development community. Should support lag after a
2AvailablefromAmazon.comorfreeonmanyWebsites.JustGoogleit.
3
©2006SombersAssociates,Inc.,andW.H.Highleyman

time, the using organization always has the capability to take over its own support. This is
typicallynotpossiblewithproprietarysoftware.
Finally, since an organization has access to the source code, it can customize the product for its
ownneeds andremoveits relianceonthedisparatedevelopmentcommunity.As discussedlater,
this is no problem if the product is to be used internally. If it is to be resold, there are significant
licensingrequirementswithwhichonemustcomply..
Business Concerns
Notwithstanding the significant business benefits of open source, there are several serious
concernsthatanorganizationfaces.
There is a concern that the open source development community may be unreliable. There is no
formalaccountabilityforproductquality.Thereis,infact,nocontroloverthedevelopmenteffort–
its product direction, its schedules, its plans, its road maps. Even worse, there typically are no
plansorroadmaps.
The company cannot own the intellectual property that is included in open source projects of its
employees.
Since the development responsibility is so spread out, it often is not possible to get
indemnification that someone else’s intellectual property is being used improperly. This applies
eventoacquiringanopensourceproductfromadistributor.
Thereis oftenno wayto getaservice levelagreementfor downtimeandother malfunctions even
iftheopensourceproductispurchasedthroughadistributor.
There may be government regulatory issues. For instance, many countries prohibit the export of
encryption products for security reasons. As a result, open source projects such as these are
often carried out in countries with no such restrictions. The U.S. government has recently eased
these restrictions by allowing the export of open source encryption so long as the relevant
governmentagenciesarenotified.
Business Uses
Giventhe pros andcons of opensource,there areseveraluseful ways in which opensourcecan
beputtoworkforthebenefitofacompany.
InhouseUse
If an open source product is only going to be used internally, there are no restrictions. It may be
freelymodifiedandusedinanyway.Supportcanbepurchasedexternallyorprovidedbyinhouse
staff.
Theonlycaveatisthatadecisioncannotbemadelatertodistributeitwithoutcarefullyevaluating
the changes that have been made to the open source portion of the product. These changes will
havetobemadeavailabletothecommunityatlargeunderanopensourcelicense.
4
©2006SombersAssociates,Inc.,andW.H.Highleyman

HardwareVendors
It is common today for hardware vendors to take advantage of open source in two ways. They
maymake their products compatible with open source products, or they maycreate open source
productstosupporttheirhardware.
In either case, it is valuable for them to participate with the development community to ensure
that their open source facilities are kept up-to-date and provide the ever-expanding support that
thehardwaremayrequire.
SoftwareVendors
The most difficult decisions have to be made by those software vendors who currently market
proprietary products. They could avoid open source all together but face a long-term product
devaluationasopensourceproductsimpingeontheirterritory.
Particularly, if they are not in a niche market but rather are in a market of wide interest, it is a
virtual certainty that one or more open source products will begin to offer serious competition at
sometimeinthefuture.Thetimingcannotbepredicted; but when it does occur,theopen source
product can move to meet market demands very quickly and can make enhancements available
atnocharge.
This is a difficult movement to oppose. Software patents and defense of intellectual property
rights havegenerallynotbeensuccessful.Itis simplytooeasyfor thedevelopmentcommunityto
rewriteitscodesothatitis notinfringing.Besides,whoareyougoingtosue?Theenduser?This
hascertainlybackfiredinthepast.
Therefore, there should be strong motivation to join the open source movement rather than to
fight it. But this does not mean abandoning the corporate business model for making money. A
key strategy is to work high on the stack to offer proprietary products while cooperating with the
open source community to contribute to the lower layers of the stack to keep it moving in the
direction needed by the proprietary products. In this way, maximum benefit is achieved from the
opensourcecommunityinoptimizingthelowerlayerswhilekeepingtheupperlayersproprietary.
Especially for software vendors, there is a tremendous leap of faith to move from inhouse
developmenttoopensourcedevelopment.Manyoftheproblemshavebeendiscussedabove–a
large, unmanageable team, frequent buggy releases, no planning or road maps, no guarantee
thatmarketrequirementswillbemet.
On the other hand, as also discussed above, open source brings with it a number of significant
advantages – free development, rapid response to changing market conditions, a plethora of
highly qualified people, and an ultimate quality product. As Eric Raymond, author of Cathedral
andtheBazaarsaid,“Givenenougheyeballs,allbugsareshallow.”
Given the wide disparity between corporate culture and open source culture, Martin Fink has
made an interesting and powerful attempt to contrast the two for the wavering manager in his
Chapter 9, The Corporate Bazaar. In this chapter, he overlays a standard corporate organization
ontotheopensourcemodelandrelateseachfunctionquitesuccinctly.
Open Source Licensing
The basic rule in open source licensing is reciprocity. If open source code is used in a product
that is to be distributed or sold, that part that is the original open source code must be distributed
5
©2006SombersAssociates,Inc.,andW.H.Highleyman

under an equivalent open source license. This applies even if the open source code has been
modified.Allofthemodificationsmustbedistributedunderanequivalentlicense.
The one exception is that code that uses open source but does not integrate with it (for instance,
it sits on top of an open source product and accesses it only through a public interface) can be
soldunderaproprietarycorporatelicense.
There are many open source licenses. The most common is the GPL (GNU General Purpose
License). All licenses must be certified by the Open Source Initiative in order qualify as an open
sourcelicense.Theselicensesgenerallyrequirethat
 allapplicablesourcecodeisfreelydistributed.
 thesourcecodeisavailabletoalllicensees.
 thelicenseeisfreetomodifythecodeandtoredistributeit.
 theauthorisknownsothattheintegrityofthecodeisguaranteed.
 itsusecannotbelimitedtoaspecificproduct.
 itmustnotdiscriminateagainstanyusergrouporapplication.
 itcannotcontaminatethelicensesofothersoftwaredistributedwithit.
 all derivative works must be licensed to everyone under an equivalent license (known as
copyleft).
As we have previously said, these license restrictions apply only to open source which is to be
redistributed.Ifitistobeusedonlyforinternalpurposes,therearenolicensingrequirements.
Dual licensing is allowed. That is, an open source product provided by a company (that is, the
company is the developer, is the maintainer, and owns the copyright to the code) can be offered
both under an open license and a commercial license. The advantage of this is that the open
license serves to increase the user base and the awareness of the product in the marketplace.
The commercial license can charge a fee such as a royalty and can be made attractive to the
marketplace as an upgrade to the open source license. For instance, it could be better tested, it
could contain special enhancements, new versions could be released earlier than the open
sourceversions,anditcouldcommittoscheduledroadmaps. Noreciprocityis requiredunder the
commerciallicense.
Linux is available only under an open source license. It is not available under a commercial
license.
Business Models
Theabovediscussionsleadtotherealconclusionofthebook –howdo youmakemoneyinopen
source.Therearethreebasicmodels:
 Outboundopensource–moveproprietaryproductstoopensource.
 Inboundopensource–integrateopensourceintoyourproprietaryproducts.
 Internaluse–bringinopensourcetobenefityourowninternaloperations.
Theseleadtothefollowingstrategies:
 Createproprietarysoftware(orhardware)thatrunsontopofopensourceandsellit.
 Providesupportandservicesforyouropensourceproducts.
 Use dual licensing to create a body of users of your open source products and to
establish a credible record of qualityso that users will turn to you for proprietary versions
aswellassupportandservices.
6
©2006SombersAssociates,Inc.,andW.H.Highleyman

 Contribute to open source projects that are important to you to keep them moving in the
rightdirection.
Summary
Whethermanagementlikesitornot,opensourcesoftwareisgainingmomentum.Atsometimein
thefuture,mostofusaregoingtohavetodealwithit.Thequestionisn’t“if.”Itis“when.”
MartinFink’s book is anexcellenttutorialondetails of opensourcefor thosemanagers who want
to dip a toe into this rising tide, who want to know more about it so that they can decide whether
ornottoembraceit,orwhowanttodiginforafight.Itiseasytoreadandisquitecomplete.
[Editor’s Note: Though open source is generally associated with commodity hardware, it is
importanttonotethatmanyproprietarysystemsalsosupportopensource.Opensourcesoftware
runs on HP’s NonStop servers under the OSS personality. Linux is supported on Stratus’
ftServersandisbeingportedtoIBMSystem390mainframes.]
7
©2006SombersAssociates,Inc.,andW.H.Highleyman
