Transaction Processing: Concepts and Techniques
April2007
Jim Grayis arguablyoneof themostreadabletechnicalauthors today. Coauthored with Andreas
Reuter, Jim’s book, Transaction Processing: Concepts and Techniques, is an in-depth (1,070
pages) and easily readable description of transaction-oriented processing. It carries the reader
from the basic concepts of transaction processing through a straw man implementation of a
ResourceManagertoareviewofcurrenttransactionmonitors.
Oneof themostpleasing aspects of this book is that notonlyareconcepts clearlyexplained with
manyexamplesandwithoutexcessivetechnicaljargon,butmaterialpresentedearlierisreviewed
in later chapters when it is once again referenced. For such a complex topic, this book is clearly
firesidereading.
Introduction to Transaction Processing Systems
A transaction processing (TP) system is big. It provides the tools to ease or automate application
programming, execution and administration. It typically includes application generators,
operationstools,oneormoredatabasesystems,utilities,andnetworkingandoperationsoftware.
Thecoreservicesofatransactionprocessingsystemareprovidedbyatransactionmonitor.
A TP system is organized around the concept of a transaction. A transaction is a collection of
operations on the application state. A transaction has several important properties, including
maintainingtheapplicationinaconsistentanddurablestate.
The management of transactions is the responsibility of the Transaction Manager. The
Transaction Manager coordinates the application of transactions to Resource Managers, which
holdthedataandotherobjectswhosestateistobechangedbythetransaction.
The bulk of the book is devoted to descriptions of the transaction processing monitor, the
Transaction Manager, and Resource Managers. Before immersing the reader in these
descriptions, Gray and Reuter devote a chapter to carefully defining a wide range of hardware,
software,data,andsystemtermsthattheywilluseintheirlatermaterial.
Fault Tolerance
The durability property of transactions implies the requirement for a level of fault tolerance in TP
systems.Over the years,thesatisfaction of this requirementhas progressedfrom tape backupto
fully redundant systems. Gray and Reuter report on studies concerning the nature of system
failures. The distribution of the causes of failures and failure frequencies are often quoted in the
literature.
1
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

HardwareandSystemSoftware 43% HardwareandSystemSoftware 6months
Communications 12% Communications 2years
ApplicationSoftware 25% ApplicationSoftware 8months
Operations 9% Operations 2years
Environment 11% Environment 2years
CausesofSystemFailures MeanTimetoFailure
The book then describes hardware and software approaches to fault tolerance. Hardware
approaches are all based on failfast modules which will fail before an error can be propagated.
Failfastarbbchitecturesincludeduplexedandtriplexedvotingsystems.
Software fault tolerance is a much more difficult problem than hardware fault tolerance.
Approaches to software fault tolerance include process pairs which bring redundancy to the
systemsoftware.
Transactions bring the ultimate in fault tolerance. If all else fails, they allow the system to crash
andrestartgracefullyinafullyconsistentstate.
Transaction-Oriented Computing
The remainder of the book is devoted to transaction-oriented computing. As stated earlier, a
transaction is a collection of operations on the application state. There are four important
properties of a transaction, known as its ACID properties – atomicity, consistency, isolation, and
durability:
 Atomicity means that either all of the operations in the transaction are executed or that
none are. A transaction is atomic if it appears to cause the application to jump from one
statetoanother(orbacktotheinitialstate)withnoobservableintermediatestates.
 Consistency requires that a new application state fulfills all of the consistencyconstraints
ofitsspecification.Atransactionproducesonlyconsistentresults;otherwise,itaborts.
 Isolation means that the processing of a transaction behaves as if the system only had a
single user even though several transactions may be executing simultaneously. There is
noimpactontheresultsofthetransactionbyothersimultaneouslyexecutingtransactions
except for the case of simultaneous attempts to update the same data item. These
attemptswillbeserialized,andatransactionwillawaititsturn.
 Durability requires that the results of a completed transaction are never forgotten. They
become part of reality. This means that the system must be able to reestablish the
transaction’sresultsafteranytypeoffailure.
Thereexistseveralmodelsfortransactions.
FlatTransactions
A flat transaction is the simplest form of a transaction. It comprises a collection of operations that
are bounded by a begin statement and an end statement. Either all of the operations in the
bounded collection are executed (committed) or none are (aborted). A transaction may be
aborted either by the program executing it or because of an external failure, such as a system
crash.
2
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

FlatTransactionswithSavepoints
There are cases in which flat transactions are too simple a model to be effective. Consider a
travel agent attempting to book a complex itinerary. She mayhave booked airlines and hotels for
several legs but then finds that a booking attempt for the next leg fails. She either must abort the
entire transaction and try again or put in a compensating transaction to back out the failed
operations.Neitherisdesirable.
It would be much better if she could simply return the current transaction to some previous
transaction state that is consistent. This is what savepoints are all about. A save work command
saves the current state of the transaction. At any later time, the application can roll back the
transactiontoanyofthetransactionsavepointsthathavebeenestablished.
ChainedTransactions
Chained transactions are a variant of savepoints. However, rather than simplymarking a point of
consistency to which the transaction can return, the chain work command actually commits the
worksofar.Therefore,thereisnoopportunitytorollbackanyofthepreviouswork.
However, the transaction itself survives. Any locks held by the transaction continue to be held as
furtherworkisdone.Onlywhenthefulltransactioniscommittedareitslocksreleased.
NestedTransactions
A nested transaction comprises a tree of transactions. The root transaction can spawn
subtransactions which themselves can spawn additional subtransactions. The leaves of the
transactiontreeareflattransactions.
A parent transaction can pass its locks to a child subtransaction. A subtransaction can commit or
abort at any time. In this case, any locks owned by the subtransaction are counter-inherited by
theparent.Onlywhentheroottransactioncommitsarealllocksreleased.
DistributedTransactions
Distributed transactions are those that must execute across a network of databases. They are
similar to nested transactions. However, the transaction tree for a nested transaction is
application-dependent,whereasthetreeforadistributedtransactionisdata-dependent.
Distributed transactions are basically flat transactions. However, if data held by a remote
database must be updated, a subtransaction is started on that database. The scope of the
subtransaction is the set of operations on the database. At commit time, the parent transaction
queries all of its subtransactions to ensure that all of them are prepared to commit before issuing
acommitcommand.Ifoneormoresubtransactionscannotcommit,thetransactionisaborted.
Today’s distributed transaction standard for heterogeneous systems is XA from The Open Group
(http://www.opengroup.org/bookstore/catalog/c193.htm).
Long-LivedTransactions
Batch transactions are an example of long-lived transactions which can contain millions of
updatesandlastforhours.Thiscanbeanintolerablesituation.
3
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

One solution is to break the batch job into mini-batches operating on data with a common
attribute, such as a range of keys. This is not a perfect solution since the atomicity of the entire
transactioncannotbemaintained.
TP Monitors
There is no commonly accepted definition of what a transaction processing monitor is. Several
have evolved over the years to meet specific needs. However, a common thread is that TP
monitors control Resource Managers. A Resource Manager is a subsystem, suchas a database,
thatprovidesprotectedactionsonitsstatetomaintainitsinternalACIDproperties.
ThecommonfunctionsprovidedbyaTPmonitorinclude:
 Manage Heterogeneity – If the application function requires access to heterogeneous
databases such as those from different vendors, each database manages its own
transactions. The databases are structured to act as Resource Managers that can be
coordinated by a remote transaction coordinator. The TP monitor must provide the
facilities to coordinate these Resource Managers so that the ACID properties of the
parenttransactioncanbeensured.
 Control Communication – Communication resources are managed by a Communication
Manager. TheCommunication Manager informs theTransaction Manager of the beginor
end of anydistributedtransaction, whether initiated locallyor remotely. Tothe extentthat
the Communication Manager is maintaining sessions with and handing messages to the
ResourceManagers,itisalsoaResourceManager.
 Manage Terminals – Transactions are typically initiated by users at terminals, and
therefore the terminal must be considered part of the transaction. Thus, the TP monitor
mustberesponsibleforterminalmanagement.Inparticular,itmustdealwiththeproblem
ofwhetheramessagewasactuallydeliveredtotheterminal.
 Presentation Services – If the terminal uses sophisticated presentation services, the TP
monitor must be responsible for recreating the terminal state following a terminal crash.
This includes reestablishing the windows environment, the cursor position, and so forth.
Inthiscase,theterminalclientsoftwarealsobecomesaResourceManager.
 Manage Context – If context is to be carried between transactions, the TP monitor must
maintainthiscontextandmakeitavailabletothenexttransaction.
 Start/Restart – Following a failure, the TP monitor must bring up all of the transaction
processing components in a state that maintains the ACID properties of all committed
transactions.
The authors describe in great detail the structure of a typical TP monitor and provide a strawman
implementation.
Concurrency Control
Transaction isolation (the “I” in ACID) is variously called consistency (the static property),
concurrencycontrol(theproblem),serializability(thetheory),andlocking(theimplementation).
Therearetwolawsofconcurrencycontrol:
(1)Concurrentexecutionshouldnotcauseapplicationprogramstomalfunction.
4
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

(2) Concurrent execution should not have lower throughput or much higher response times
thanserialexecution.
Isolationisviolatedif:
 Lostupdate–Transaction2ignoresTransaction1’supdateandoverwritesit.
 Dirtyread–Aninconsistentreadthroughalockisallowed.
 Unrepeatable read – An item read by Transaction 1 is updated by Transaction 2 before
Transaction1hascompleted.
Isolationcanbedefinedasaprocessinwhichtransactionscanexecuteinparalleland:
 a transaction does not overwrite data that has been locked and updated by another
transaction.
 transaction writes are neither read nor overwritten by other transactions until that
transactioncommits.
 atransactiondoesnotreadupdatedandlockeddata(dirtydata)ofanothertransaction.
 Othertransactions donot writeanydatareadbyanothertransactionuntilthattransaction
completes.
The authors introduce a transactional syntax and proceed to prove several transactional
theorems.
Isolation is implemented via locks. Several locking protocols beyond simple semaphores are
described.
PredicateLocks
One problem is represented bya SQL statement that reads with lock a set of rows. The locks do
not prevent another transaction from inserting another row into this sequence, thus making the
readsequencenonrepeatable.
Predicate locks lock asubsetof thedatabase defined bya predicatefor theparticular transaction
so that insertions cannot occur. However, predicate locks can cause performance problems
becauseofthetimerequiredtocomputethepredicatesothattheparticularrowscanbelocked.
GranularLocks
Granular locks are similar to predicate locks except that the predicate is precomputed according
to some application-dependent algorithm. This improves the performance of predicate locks
because predicates do not have to be computed on the fly. Several types of granular locks are
defined.
NestedTransactionLocks
Locks for nested sequential transactions form a lock tree similar to the transaction tree. Nested
locksforparallelnestedtransactionsisanontrivialproblem.Conceptualideasarediscussed.
Deadlocks
Deadlockscanoccurwhentwotransactions attempttolock apairofdataitemsinoppositeorder.
Deadlock resolution can be implemented by having both transactions abort and retry, or by
having them time out. Deadlocks can be avoided by specifying a linear locking order that all
transactionsfollow.
5
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

LockImplementation
Actual implementation algorithms and accompanying code are presented to show the difference
inperformanceofdifferentlockingmethodologies.
Recovery
A major function of a TPmonitor is to recover the system to a consistent state following a failure.
This is the responsibility of the Transaction Manager. The Transaction Manager depends upon a
transactionlogtoperformthisfunction.
LogManager
Thetransactionlogistheheartoftherecoveryprocess.ItismaintainedbytheLogManager.
Recorded in the transaction log are the before state and the after state of anyresource (typically,
a data item in a file or database) affected by a transaction. The transaction log grows without
bound over time and can become quite large in a short period of time. Therefore, it must be
periodicallyrolledoffofthesystemontosecondarystorage.
The Log Manager is responsible for managing the archiving of the log. Typically, there will be
severalrotatinglogfiles.Whenonefills,itis closed;andtheoldestfile is purged andusedfor the
nexttransactionlog.Asafilebecomestheoldestfile,itisrolledofftosecondarystorage,typically
magnetictape.Themagnetictapesilosmaybecollocatedwiththesystem ormaybelocatedata
remotesitefordisaster-recoverypurposes.
The Log Manager also provides a public interface to the logs for the Transaction Manager and
the Resource Managers. This is used primarily for recovery as the transaction log provides all
informationnecessarytoreturnadamageddatabasetoitslastconsistentstate.
Amajor performanceadvantageof transaction processingsystems is providedbythetransaction
log. Rather than having to randomly write all updates within the scope of a transaction to disk
before the transaction can be committed, it is only necessary to flush the transaction log to disk.
This is aserialwritethatis veryfast.Inaddition,inverybusysystems,theLogManager canwait
until there are several blocks to write and still only penalize the transaction with a few
milliseconds of delay.This makes loggingevenmoreefficient. Infact,thebusier thesystem gets,
the more efficient logging becomes. As a result, transaction-oriented systems typically show
muchbetterperformancethannontransactionalsystems.
Some transaction logs use physical logging in which actual before and after images are logged.
For large records or rows with minor changes, log blocks can be compressed. An alternate
techniqueistologtheoperations,suchasSQLstatements(logicallogging).
Log files are often redundant. They use RAID arrays or are mirrored on separate disk units to
ensurethatthesystemcanberecoveredfollowingafailure.
TransactionManager
The Transaction Manager is responsible for creating the information needed to recover the
system following a failure. It receives begin, commit, and abort commands from the application
and passes these to the appropriate Resource Managers. The Resource Managers will write
these to the log along with the before and after images of data items that they modify. In effect,
the Transaction Manager is responsible for the “A” (atomicity), “C” (consistency), and “D”
(durability)ACIDpropertiesofthetransactions.Locksprovidesthe“I”(isolation)ofACID.
6
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman

For large systems, there may be multiple transaction logs to improve performance. The
TransactionManagermustcoordinatethetransactionswrittentoandreadfromtheselogs.
Usingthetransactionlog,theTransactionManagerhasseveralresponsibilities:
 transaction rollback – Should any participant in a transaction abort the transaction, state
changesmadesofarareundonebyapplyingthebeforeimagesfromthetransactionlog.
 Resource Manager restart – If a Resource Manager fails, the Transaction Manager
restarts it and presents it with the log records necessary to bring it to its last consistent
state. Completed transactions are rolled forward via the after images, and incomplete
transactionsarerolledbackviathebeforeimages.
 system restart – The Transaction Manager restarts all Resource Managers as described
above. In addition, it resolves any transactions which were left in doubt (that is, it is not
knownwhetherornottheResourceManagerreceivedthelastcommitorabort).
 media recovery – Should a disk fail, the transaction log is used to reconstruct the data
held by that disk. This function can also be used to recover corrupted or accidentally
deletedfilesortables.
The authors then describe in detail the Transaction Manager structure with sample
implementationcode.
Severaladvancedtopicsarediscussed:
 Heterogeneous transactions, which include within their scope systems that use different
databasesorarefromdifferentvendors.
 Highly available commit coordinators using redundant Log Managers and Transaction
Managers.
 Transferofthecommitcoordinatorroletoamorereliableorhigherperformancenode.
 Disaster recoveryat a remote site byreplicating the transaction file to the remote system
inrealtime.
A Sample Resource Manager
A sample Resource Manager is designed in detail (three chapters). This design embodies the
conceptspresentedpreviouslyinthebook.
System Surveys
Finally, several transaction processing systems are reviewed. These include IBM’s IMS and
CICS,HP’sNonStopGuardianandACMS,X/OpenDTP,UTM,ADABAS,Encina,andTuxedo.
Postscript
Jim Graywas reported missing at sea during a sailing trip off the California coast on January 28,
2007. His contributions to transaction-oriented computing are fundamental to the implementation
ofactive/activesystems,aprimaryfocusoftheAvailabilityDigest.
7
Thisdocumentmaynotbedistributedinanywaybyelectronicmeans.
©2007SombersAssociates,Inc.,andW.H.Highleyman
