What is Active/Active?
October2006
It is a fundamental fact that any system can and will fail at some point. The secret to achieving
extreme availabilities is to let it fail, but fix it fast. This is the premise behind active/active. If a
service outage is too short for users to notice, it will not be perceived as a service outage. In
effect,serviceavailabilityhasbeenmaintained.
From a high-level perspective, active/active architectures accomplish fast recovery bydistributing
theuserbaseovermultipleindependentandgeographicallydistributedprocessingnodes.Should
a node fail, the users of that node are switched to one or more surviving nodes in the application
network. This switchover can often be done in subseconds – taking no more time than the
resubmissionofafailedtransaction,anotherwisecommonoccurrence.1
Active/Active Architectures
An active/active system is a network of independent processing nodes, each having access to a
commonreplicateddatabasesuchthatallnodescanparticipateinacommonapplication.
server server
data
base
users users
replication
users users
server
data
base data
redundant redundant base
users network replication users network
server
server replication
users data server users data
base
base
AnActive/ActiveSystemwith AnActive/ActiveSystemwith
Network-AttachedStorage Direct-AttachedStorage
The application network comprises two or more processing nodes connected to a redundant
communications network. Any user can be connected to any node over this network. The nodes
all have access to two or more copies of the database. The database copies may be connected
directlytothenetwork,ortheymayeachbedirectlyattachedtooneofthenodes.
1Muchmoreinformationconcerningactive/activearchitecturesmaybefoundinthebookentitledBreakingtheAvailability
Barrier: Survivable Systems for Enterprise Computing, by Dr. Bill Highleyman, Paul J. Holenstein, and Dr. Bruce
Holenstein,publishedbyAuthorHouse;2004.
©2006SombersAssociates,Inc.,andW.H.Highleyman 1

The database copies are kept in synchronism by ensuring that any change to one copy is
immediately propagated to the other copies. There are many techniques for doing this, such as
networktransactionsordatareplication.Thesetechniquesaredescribedlaterinthisarticle.
Should a node or its attached database fail, the users connected to that node have lost their
services. In this case, they are switched to another node or are distributed across multiple
surviving nodes to immediately restore service. Users at other nodes are unaffected. (See Do
YouKnowWhereYourTrainIs?foradescriptionofoneeffectivewaytoswitchusers.)
Providing that the nodes and database copies are geographically distributed, active/active
systems provide disaster tolerance. Should a disaster take out a node or a database site, there
areothersinthenetworktotakeitsplace.
There are many ways to keep two or more database copies in synchronization. These include
networktransactions,asynchronousdatareplication,andsynchronousreplication.
Whatever the technique, one result is mandatory. The database copies must always maintain
referentialintegritysothateachcanbeusedactivelybyanyapplicationcopy.Referentialintegrity
typicallymeansthattransactions initiatedbyanodebecommittedinthesameorderatanyofthe
databasecopies.Insomecases,thisrequirementmayextendtotheupdateswithinatransaction.
Thisisknownaspreservingthe“naturalflow”ofallupdates.
NetworkTransactions
Using network transactions, the scope of a transaction
includes all database copies.This results in each copy
of a data item across the network being locked before
application
any copy is updated. As a result, all database copies
arekeptinexactsynchronism.
2.update
One problem with network transactions is that each 2.update
lock request and each update must individually flow
1.starttransaction
across the network and a completion response
3.commit
received. In widely dispersed systems, such a round
trip could take tens of milliseconds; and application
database database
performance can be seriously affected. This is a clear
example of the compromise between availability and
performance.
NetworkTransaction
AsynchronousReplication
An asynchronous replication engine application
extracts changes made to its source
database from some sort of a
change queue (such as a change
logoranaudittrail)andsendsthese 3.update
1.update target
changes to a target database. This
replication is done “under the 2.sendchange
covers” with respect to the source change target
replicationengine
application, which is therefore db queue db
unaware of the replication activity.
Consequently, there is no per- AsynchronousReplication
formanceimpactontheapplication.
©2006SombersAssociates,Inc.,andW.H.Highleyman 2

However, there is a delay between the time that a change is applied to the source database and
the time that it is subsequently applied to the target database. This delay is known as replication
latency and typicallyranges from hundreds of milliseconds to a few seconds. As a consequence,
should a node fail, there will likely be transactions that, having been applied to the source
database, are still in the replication pipeline at the
time of the failure. These transactions never make
ittothetargetdatabaseand,ineffect,arelost.
application application
Another issue with asynchronous replication is
datacollisions.Ifadataitemisupdatedoneachof
1.update 1.update two database copies within the replication latency
time, each will be replicated to the other database
2.sendchanges
copy and will overwrite the original update to that
replicationengine copy. The two database copies are now different,
database database
replicationengine and both are wrong. There are several techniques
for avoiding data collisions or for detecting and
3.update 3.update resolving them. These techniques will be
target target
DataCollision discussedinlaterarticles.
SynchronousReplication
Withsynchronousreplication,changes are
replicated to the target database via
asynchronous replication but are held application
6.commit?
there and used only to lock the affected
data items. When the source node is
5.yes
ready to commit the transaction, it checks
with all database copies to ensure that 1.update
4.ready?
they have been able to obtain locks on all
of the affected data items. It does this by 2.sendchange
sending a query behind the last update so du brce c qh ua en ug ee replicationengine ta drg bet
over the replication channel. If all
database copies are ready, the source 3.update
SynchronousReplication target
node instructs them to apply the updates
andtoreleasetheirlocks.Otherwise,allcopiesareinstructedtoabortthetransaction.2
Synchronous replication, like network transactions, guarantees that all database copies will be in
exact synchronism (as opposed to asynchronous replication, which keeps the database copies in
near-synchronism becauseofreplicationlatency).Thus,notransactionsarelostastheresultofa
failure;anddatacollisionscannotoccur.
In this case, the application is delayed as it waits for the commit to complete across the network.
This is called application latency. However, this delay compares to network transaction delays,
which must wait for each update as well as the commit to complete across the network. As a
consequence, synchronous replication is generally more efficient if database copies are widely
distributed or if transactions are large. Network transactions may be more efficient for collocated
databasecopiesandshorttransactions.
2SeeHolenstein,B.D.,Holenstein,P.J.,Strickler,G.E.,CollisionAvoidanceinBidirectionalDatabaseReplication,
UnitedStatesPatent6,662,196;December9,2003.
©2006SombersAssociates,Inc.,andW.H.Highleyman 3

Other Advantages of Active/Active
Therearemanyotheradvantagesthatanactive/activearchitecturebrings:
 Elimination of planned downtime: A node can be upgraded by simply switching its
users to other nodes. The node then can be brought down and its hardware, operating
system, database, or applications upgraded and tested. At this point, the node can be
returned to service by returning its users to it. This technique effectively eliminates
planneddowntime.
 Data locality: As compared to an active/backup configuration in which the backup
system is notprocessingtransactions,an active/active configurationcanbe distributedto
provide data locality. Users can be connected to their nearest respective node, thus
improvingperformance.
 Use of all purchased capacity: There is no idle backup system sitting around in an
active/active system. Therefore, in a multinode active/active architecture, less capacity
may need to be purchased. For instance, in a five-node configuration, if each node can
carry 25% of the load, full capacity is provided even in the event of a node failure.
However, only 125% of required capacity must be purchased rather than 200% for an
active/backupsystem.
 Online capacityexpansion: Capacityeasilycan be added by installing a new node and
thenswitchingsomeuserstothenewnode.
 Load balancing: The load across the application network can be rebalanced by moving
usersfromaheavilyloadednodetolightlyloadednodes.
 Risk-free failover testing: Failover testing can be risk-free and not require any user
downtime. In an active/backup system, it may take hours to fail over, during which time
the users are denied service. The same downtime impact occurs when users are
switched back to the primary node following failover testing. Furthermore, what if the
backup node turns out to be nonoperational? In an active/active system, it is known that
theothernodesareworking;andfailovertakessecondsatmost.
 Lights-out operation: In a multinode active/active application network, it may not be
necessary to have every site staffed since should a node fail, the system continues
operating anyway. Time to recover the failed node is less time-critical, especially if
servicecanstillbeprovidedevenafterasecondnodefailure.
RPO and RTO
When deciding upon which active/active architecture to use, one has to consider two important
corporategoals,RPOandRTO.
 RPO is therecovery point objective.Itspecifies theamountofdatathatcanbelostinthe
event of a failure. Tape backups can lose hours of data (as well as having hours of
recoverytime). Asynchronous replication can lose seconds of data, depending upon how
fast the replication engine is (some have replication latencies measured in subsecond
times).SynchronousreplicationandnetworktransactionsprovideazeroRPO.
 RTO is the recovery time objective. It states the tolerance of the operation to an outage.
Some applications can be down for minutes or hours without disastrous consequences.
©2006SombersAssociates,Inc.,andW.H.Highleyman 4

For other applications, downtime of minutes or even seconds can be unacceptable. The
primaryadvantageofactive/activesystemsisthattheyprovideessentiallyazeroRTO.
Active/Active Issues
Thereareseveralimportantactive/activesystemissuesthatmustbeunderstoodandresolved.
 Howwilluserswitchingbehandled?Canitbedoneautomatically?
 Isthereachanceofdatacollisions?Ifso,howwilltheybehandled?
 Are lost transactions acceptable following a node failure? To what extent? Can they be
recovered?
 Can the applications be run in an active/active environment? Do they require
modification?
 What performance impact can be tolerated when implementing an active/active
architecture?
 What additional cost can be tolerated? This may include hardware, software licenses,
networking,people,andsites.
In Summary
There is always a fundamental compromise between availability, cost, and performance.
Active/activetechnologycanbetailoredtoaparticularapplicationtooptimizethiscompromise.
©2006SombersAssociates,Inc.,andW.H.Highleyman 5
