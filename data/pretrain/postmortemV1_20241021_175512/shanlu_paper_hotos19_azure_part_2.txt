Every incident report contains a “discussion” section inconsistenciesbetweendataproducersanddatacon-
and a “root cause” section, by reading these sections, sumers(83%ofthecases),aswellasbetweentwodata
andsometimestheworkitemdescription,wefigureout consumers(17%ofthecases).Intheformercase,data
the root cause of each incident, and categorize them producedbyonepartofthesystemcannotbeproperly
intodata-formatbugincidents(21%),fault-relatedbug consumedbyanotherpartofthesystem;inthelatter
incidents(31%),timingbugincidents(13%),constant- case, different system components draw inconsistent
valuebugincidents(7%),andothers(28%). conclusionsaboutwhethersomeuserdataisvalidor
not.
Inmostcases,thesebugsaretriggeredbysoftware
3.1 Data-formatincidents
updates that fail to fully consider the data-format as-
Different components of cloud services interact with sumptionsheldbyallstakeholders.
eachotherthroughvarioustypesof“data”,including Discussion: Among all the bugs we studied, only
inter-process/nodemessages,persistentfiles,andsoon. one of them occurs inside one process, and the other
Atthesametime,cloudsoftwaregoesthroughfrequent onesallinvolvemultipleprocessesand/ornodes.This
updates.Asaresult,differentsoftwarecomponentsin is probably not a coincidence: persistent data related
thecloudcouldholdconflictingassumptionsaboutthe bugsaremorelikelytoexistinmulti-processsystems;
formatofcertaindata,leadingtoserviceincidents.We messagerelatedbugsareprobablyuniquetonetworked
refertotheseasdata-formatbugs.Theyhavenotbeen systems. The large scale, frequent updates, and long
atypeofcommonbugsintraditionalsoftwaresystems runningnaturesofcloudserviceslikelyhavefacilitated
[10,29,13,28],butareamongthemostcommonones theoccurrenceofthesebugs.
inourstudy(21%ofallsoftwarebugincidents). Techniques are needed to automatically extract as-
We can categorize these bugs based on the type of sumptionsaboutdataformats,sothatwecanautomat-
datawhoseformatbecomesincompatiblewithnewer ically detect data-format bugs or automatically raise
versionsofthesoftware. warningsaboutinconsistentcodeversionsamongdif-
(1)Localorglobalfiles(about40%ofdata-formatinci- ferentsoftwarecomponents.
dents):differentpartiesassumedifferentformatsabout
certainfilesordatabasetables.Forexample,aservice,
3.2 Fault-relatedincidents
let’s call it Service-X, allows users to store their cus-
tomizedconfigurationinthecloud.Afterafeatureup- Componentfailures(i.e.,faults)areinevitableincloud
grade,Service-Xchangestheformatofsuchcustomized environment, and 31 % of software bug incidents are
configurationfiles—areferencetothesourceconfigu- aboutnotdetectingorhandlingfaultscorrectly.
rationhastoexistinthecustomizedconfigurationfile. Inourstudy,acomponentcanrefertoauserrequest,
This reference is added to any configuration created auser/systemjob,anodeinthesystem,afile,andsoon.
bythenew-versionofService-X.However,nosuchref- Therearethreemaintypesofcomponentfailures(i.e.,
erence exists in customized configuration created by faults)thatleadtofault-relatedincidentsinourstudy:
earlierversionsofService-X.Therefore,loadingoldcus- (1) Error component: a specific task or job fails and
tomizedconfigurationfilesleadtonull-referenceexcep- reports an error that cannot be handled by the cloud
tionsandthenserviceincidents. serviceplatform(43%amongallfault-relatedincidents);

HotOS’19,May13–15,2019,Bertinoro,Italy HaopengLiu,ShanLuandMadanMusuvathi,SumanNath
(2)Unresponsivecomponent:ahangingjoboradis- theyarecausedbyaraceconditionwithoutanydetailed
ablednodeisnothandledbytheserviceplatform(i.e., information.
noerrorcodeeverreturned)andeventuallyleadstoa Therearetwomaindifferencesbetweennon-deadlock
timeoutperceivedbyusersorwatchdogs(29%among timingbugsinourstudyfromthoseintraditionalcon-
allfault-relatedincidents); currentsystems[25].
(3)Silentcorruption:persistentdataorcachedpersis- First,halfofthesebugsareaboutraceconditionsbe-
tentdatabecamecorruptedorinconsistentwithoutany tweenmultiplenodesratherthanmultiplethreadsin
errorcodeandledtoincorrectresultsreturnedtousers traditionalbugs.Evenwhenaraceisamongmultiple
(17%amongallfault-relatedincidents). threads,atleastoneofthethreadsisanevent/message
Weobservedthreemainreasonsforafaultincompo- handlingthreadthatisservingtherequestfromadif-
nentF notbeingdetectedbyacomponentG (inmost ferentnodelikethemessage-timingbugsdiscussedin
cases,Gthenwaitsinfinitelyforanoperationo,notreal- previousempiricalstudies[20].
izingthatowillneveroccurduethefaultinF).1)G did Second, half of these bugs are racing on persistent
notcontainanyfaultdetectioncodeforpotentialfault datalikecachedfirewallrules,configurationentries,zn-
inF;2)G typicallycheckscertainsignalorlogtodetect odesinZookeeper,databasedata,andothers,insteadof
faultsinF,notrealizingthatthesignal/logitselfcould sharedmemoryvariablesthattraditionaltimingbugs
disappearduetothefaultinF.3)Gtypicallycheckscer- raceon.Forexample,inonecase,twosystemprocesses
tainsignalorlogtodetectfaultsinF,notrealizingthat readandwritethesameentryinthemachine’sconfig-
thesignal/logcoulddisappearalongthetransmission urationfile.Racesbetweenthesetwoprocesses’reads
pathfromF toG.Thisproblemsometimeshappensdue andwritesledtorepeatedmachinerestarts.
tofileandprocessre-locationafteracomponentfailure. Discussion:Timingbugscontinuetobeathreatto
Weobservedthreemaintypesoffaulthandlingprob- systemavailabilityinthecloud.Traditionaltiming-bug
lems: (1) handler ignores the error report (35 %); (2) detectiontechniquesneedtobeadaptedtotackleraces
handlerover-reactsandcausesincidents(35%);(3)han- onpersistentdataandracesbetweendifferentnodes.
dlercontainsbugslikeinfiniteloops,timingbugs,etc
(30%).Thefirsttwotypesofproblemshavealsobeen 3.4 Constant-valuesettingincidents
reportedinopen-sourcesystems[32].
Theseincidentsarecausedbyanincorrectsetting,in-
Discussion:Faultdetectionandhandlingisusually
cludingtypos,ofconstantvariablesinthesoftware.They
notanissueforsingle-machinesystems,butisamajor
contributeto7%ofallsoftwarebugincidents.
problemincloudservices.Thisfindingisconsistentwith
Theseconstantvariablesincludehard-codedconfig-
previousstudiesaboutopen-sourcecloudsystems[14].
urations,special-purposestringslikeURLs,andenum-
Thepredominanceoffault-relatedproblemsconfirms
typedvalues.Forexample,cloudsoftwareoftencontains
ourexpectationthatthesebugsonlyshowupinscale
statemachinesforeverynode,everyjob,andsoon.The
andarenotlikelytobeexposedduringin-housetesting.
variablethatrepresentsthecurrentstateofastatema-
Moreover,recentresearchhaslookedatvariousas-
chineoftenhasenumtype.Insomecases,anincorrect
pectsoffault/exceptionhandlingproblemsindistributed
constantvalueofthestatevariablecausestheexecution
systems,includingdetectingemptyerrorhandlersand
toenterincorrectcodepath.
certaintypeofoverreactionhandlers[32],dealingwith
Discussion:Comparingwithgenericandarbitrary
graycomponentfailures[17,16],detectingfault-related
typosandsemanticbugs,theseconstant-settingbugs
timing bugs [23], fault injection testing [3], and oth-
mightbeeasiertoautomaticallydiscoverandfix:some
ers.Ourstudyindicatesthatevenwithintensivefault-
ofthesebugsareessentiallymisconfigurationproblems;
injectiontestinginsideMicrosoft(Section5),faultre-
some of these bugs are very easy to fix as there are
lated bugs are still common, and hence call for more
veryfewchoicesfortheconstantvalues(considering
researchtohelpdetectandhandlefaults.
anenum-typedvalue).
3.5 Othersoftwarebugs
3.3 Timingincidents
There are about one quarter of the bugs that do not
Overall,thereare13%timingincidentsinourstudyset. belongtotheabovefourcategories.Theyinclude7re-
Amongalltimingincidentsinourstudy,72%incidents sourceleakbugsandthen24miscellaneoussemantic
arenon-deadlockissueand14%incidentsaredeadlock bugs.These7resourceleakincidentsincludetwoout-of-
issue.Intheremaining14%incidents,weonlyknow memoryincidents,fourVirtualMachineresourceleaks,

Whatbugscauseproductioncloudincidents? HotOS’19,May13–15,2019,Bertinoro,Italy
100%
80%
16%
60%
44% 56%
15% 25% 40%
20%
0%
Data-format Fault-related Timing Constant-value Others
Fix Mitigate-Code Mitigate-Data Mitigate-Env
Software bugs
Mitigate-Code Mitigate-Data Mitigate-Env Fix
Figure1:Incidentresolvestrategy
Figure2:Resolvestrategyineachrootcause
andonelockleak.Differentfromthatintraditionalsoft-
waresystems,memorybugs,otherthanmemoryleaks, Incident Resolving Time
didnotappearatallinourstudy. 160
155
50
4 HOWWERETHEYRESOLVED?
40
Facingtighttimepressure,moreoftenthannot,software-
30
bugincidentswereresolvedthroughavarietyofmitiga-
20
tiontechniques(56%)withoutpatchingthebuggycode
(44%),providingquicksolutionstousersandmaximiz- 10
ingserviceavailability.Notethat,itispossiblethatan 1
0 Data-format Fault-related Timing Constant-value Others
incidentfirstgotresolvedbyamitigationtechniqueand
laterledtoasoftwarepatchthatwasnottrackedbythe
Figure 3: Resolving time for incidents caused by
incidentreport.
differenttypesofbugs(Y-axisshowsthenormalized
Q1. What are the common strategies for mitigating
resolving time with the median resolving time of all
software-bugincidents?
software-bugincidentsas1;eachboxrepresents25–75
Wecategorizeallmitigationtechniquesintothreecat-
percentileofeachtype)
egories:codemitigation,datamitigation,andrunning-
environment mitigation. As shown in Figure 1, these
threestrategiesareallwidelyused,withenvironment
Q3.Dodifferenttypesofincidentstakedifferentamount
mitigationthemostcommoninourstudy.
oftimetogetresolved?
Codemitigationmainlyinvolvesrollingbackthesoft-
Figure3comparesthenormalizedresolvingtimeamong
waretoanolderversion,ordisablingcertaincodesnip-
incidents caused by different types of software bugs,
petssuchasanunnecessary/outdatedsanitycheckthat
withthemedianresolvingtimeamongallsoftware-bug
failedusers’requestsandcausedsevereincidents.
