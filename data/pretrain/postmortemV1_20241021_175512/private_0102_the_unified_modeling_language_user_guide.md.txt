The Unified Modeling Language User Guide
November2006
The Unified Modeling Language User Guide1 is a well-organized and easy-to-read tutorial on
UMLbytheoriginatorsofthelanguage,GradyBooch,JamesRumbaugh,andIvarJacobson.
What Is UML?
UML is a modeling technique focused on describing
object-oriented software systems, though it can be used
for any business process. However, it is more than just Design Implementation
View View
diagrams. It is, as its name implies, a modeling
language. It has nouns (structural things), verbs
UseCase
(behavioral things), adjectives and adverbs (annotational
View
things), and chapters (grouping things). A “thing” is a
UML element. Additional UML elements include Interaction Deployment
relationshipsanddiagrams. View View
UML defines thirteen several intuitive diagrams
Views SupportedbyUML
describingstructureandbehavior.UMLisextensibleand
allowstheusertodefineadditionalthingsanddiagrams.
The History of UML
Years ago, in the dawn of object-oriented technology when documentation
oftenwasbeingignored,therewereanabundanceofattemptstocomeupwith
documentation standards for the modeling of systems. It was felt that if such
standards were adopted, what would follow would be tools which would make
thedocumentationtaskmucheasier.
The number of identified modeling languages exceeded fifty in the early 1990s andfueled the
“method wars.” As early as 1985, James Martin’s book, Diagramming Techniques for Analysts
andProgrammers,describedindetailalmosttwodozendifferentmodelingtechniques.
In the mid-1990s, some of these methods began to coalesce. In particular, three researchers in
the field, each with his passionately supported method, began to work together to incorporate
each other’s techniques into a common modeling language. They were Grady Booch, Jim
Rumbaugh, and Ivar Jacobson. They became known as the “Three Amigos” for their frequent
argumentswitheachotherregardingmethodologicalpreferences.
1
Booch,G.,Rumbaugh,J.,Jacobson,I.,TheUnifiedModelingLanguageUserGuide–SecondEdition,Addison-Wesley;
2005.
1
.
©2006SombersAssociates,Inc.,andW.H.Highleyman

Their efforts led to the Unified Modeling Language, which was adopted as a standard by OMG,
theObjectManagementGroup,in1997.Amajorrevision,UML2.0,wasreleasedin2005.
In its ten short years of existence, UML has become the de facto standard for system
documentation. It provides views of all phases of the life cycle of a software project – design,
interaction, implementation, deployment, and use. Many powerful products exist to help one
easilycreateUMLdocuments.
Thefollowingreviewisbasically“UMLinanutshell,”astakenfromtheUMLUserGuide.
Structural Things
Structural things are the nouns of UML. They are the static parts of a model and represent
elements that are either conceptual or physical. Structural things include classes, interfaces,
collaborations,components,usecases,artifacts,andnodes.
Classes
name
The class is the fundamental building block of UML. All other diagrams are attributes
collections of classes or represent relations between classes. As in object-oriented
languages, a class has a name, attributes, and operations. The current value of its
attributesdefineitsstate.Itsoperationsdefineitsbehavior. operations
ActiveClasses class
Aspecialcaseofaclassisanactiveclass.Anactiveclassdoesnotsimply
name
executeoperationsinitsinterfaceonbehalfofotherclasses.Itcaninitiate
attributes
actionsonitsown.Processesandthreadsareactiveclasses.
operations
Interfaces
activeclass
A class provides access to its public operations for other classes to use. This
interface defines its behavior. In addition to providing an
class interface, it may also require the services of the interfaces of
otherclasses.
provided required
interface
Collaborations
Collaborations define interactions between elements that provide
name
cooperativebehavior.
collaboration
Components
A component is a modular part of a system and contains other elements. It is a
replaceable unit. It may be replaced with another component that exhibits an
identicalinterfacetotheoutsideworld.
component
2
.
©2006SombersAssociates,Inc.,andW.H.Highleyman

UseCases
A use case is a description of the sequence of actions that the system
name
performs to yield specified results for an actor. An actor is a user of the
system,andcanbeaperson,aprocess,oranothersystem.
use case
Artifacts
An artifact is a replaceable part of a system and contains physical
<<artifact>>
information. Artifacts are deployable and include such items as source
name
codefiles,executables,andscripts.
artifact
Nodes
A node represents a computational resource. Components may reside on a
name
nodeandmaymigratefromnodetonode.
Behavioral Things
node
BehavioralthingsaretheverbsofUML.Theydefinethedynamicpropertiesofelements.They
includeinteractions,states,andactivities.
Interactions
name
An interaction is a set of messages exchanged among objects to
accomplish a specific purpose. The behavior of objects are specified
withaninteraction. interaction
States
A state is a condition of an object. It satisfies some condition, performs some state
activity, or waits for some event. The sequence of states, known as a state name
machine,focusesonthelifecycleofoneobject.
state
Activities
An activity is the sequence of states that a computational process performs. It
activity
name is concerned with the flows among steps without regard to which object
performseachstep.
activity
3
.
©2006SombersAssociates,Inc.,andW.H.Highleyman

Annotational Things
Structural things are the adjectives and adverbs of UML. They are used to further explain
structuralthingsandbehavioralthings.
Notes
A note is an explanatory thing. It can be applied to any element in a UML
diagram. comment
Grouping Things note
GroupingthingsarethechaptersofUML.TheyorganizeUMLelementsintolikecategories.
Packaging
A package is a conceptual thing. It exists only at development time and
package
groups elements that are semantically close. It might represent the set of
name
tasks being worked on by one development team. A package can contain
classes, interfaces, components, nodes, collaborations, use cases,
diagrams,andotherpackages. package
Relationships
Arelationshipisasemanticconnectionbetweenelements.Therearefourkindsofrelationships–
dependency,association,generalization,andrealization.
Dependencies
A dependency occurs when a change to one independent dependent
independent element may affect the semantics of a dependency
dependentelement.
Associations
0,1 *
An association is a relationship among classes. It may
employer employee
show the class instance names and the multiplicity of
instancesoneithersideoftheassociation.
association
Generalizations
A generalization shows parent/child relationships. A child child parent
shares the structures and behavior of its parent and can
generalization
addfurtherstructuresandbehaviorsofitsown.
Realizations
A realization specifies a contract between elements. It is request provider
usedmostlyforinterfacesandusecases.
realization
4
.
©2006SombersAssociates,Inc.,andW.H.Highleyman

Extensibility
UML elements are extensible. Stereotypes can be used to define new building blocks from
existing ones. Tagged Values can be used to extend the properties of a stereotype. Constraints
addnewrulestoanelement.
Diagrams
Diagrams arewhatUML is all about. A diagram is acollection of things andrelationships. Behind
everydiagramisaspecificationthatdescribesthediagram.Specificationsareusuallytextual.
UML diagrams are of two types – static and dynamic. Static diagrams define things. Dynamic
diagrams define the operations that implement business functions. The UML diagrams are
categorizedasfollows:
StaticDiagrams DynamicDiagrams
Class UseCase
Component Sequence
CompositeStructure Communication
Object State
Artifact Activity
Deployment
There are also Timing diagrams and Interaction Overview diagrams which are not covered in the
UMLUserGuide.
RelateddiagramscanbeorganizedintopackagesandshownasPackageDiagrams.
In the following descriptions of the diagrams, a brief statement of the purpose of each diagram is
given, as taken from Chapter 2 of the UML User Guide. Following each statement is a simple
example of the diagram based upon User Guide examples. These diagram examples, without
furtherexplanation,illustratetheintuitivepowerofUML.
ClassDiagrams class
name
A class diagram shows a set of
related classes, interfaces, and class
attributes
dependency
collaborations and their relation- name
(uses)
ships. These diagrams are the most
common diagram found in modeling
operations
object-oriented systems. Class
diagrams address the static design name
view of a system. Class diagrams parent
realization
that include active classes address generalizations
thestaticprocessviewofasystem. (request)
association
name name name
(name)
child child
ClassDiagram
5
.
©2006SombersAssociates,Inc.,andW.H.Highleyman

ComponentDiagrams
componentname
Component diagrams are variants of class diagrams. A
name1
component diagram shows an encapsulated class and its
direct
ports, interfaces, and internal structure consisting of nested
connector
port
components and connectors. Component diagrams address
thestaticdesignimplementationviewofasystem.
name3 name2
CompositeStructureDiagrams
connectorbyinterface
Acompositestructurediagramismuchlikeacomponent
diagramwithonlysubtledifferences. ComponentDiagram
object1
ObjectDiagrams
object2 object3
An object diagram shows a snapshot of a set of objects
and their relationships at a moment in time. Object name name
diagrams represent static snapshots of instances of the
things found inclass diagrams.Thesediagrams address
thestatic design viewor static process viewof asystem,
object4
as do class diagrams, but from the perspective of real or
object5
prototypical cases. (Note: An object is an instance of a
classandisdesignatedinUMLbyunderliningitsname.) name name
attributes
ObjectDiagram
prog1.h prog1.h prog1.h
version3.5 version4.0 version4.1
ArtifactDiagrams
<<predecessor>> <<predecessor>>
An artifact diagram shows the physical
constituents of a system on the
computer.Artifactdiagramscanbeused
to model such things as source code,
executables, databases, and distributed
systems. Often, stereotypes are used to
more clearly represent the artifact
elements.
prog3.cpp prog2.cpp
prog4.cpp
ArtifactDiagramofSourceCode
6
.
©2006SombersAssociates,Inc.,andW.H.Highleyman

ServerA ServerB
DeploymentDiagrams
replicate
A deployment diagram shows the run-time configuration name
of processing nodes and the components that live on
them. A node typically hosts one or more artifacts. As
with artifact diagrams, stereotypes are often used to
Internet
moreclearlyrepresenttheelementsinthediagram.
DeploymentDiagramforanActive/
ActiveSystem
usecasename
UseCaseDiagrams
action1 action2
Ause casediagram shows aset of usecases and
actor
actors and their relationships. Use case diagrams
address the static use case view of a system. action3
These diagrams are especially important in
modelingthebehaviorofsystems.
action4
UseCaseDiagram
node1 node2
create
node3
SequenceDiagrams
msg1
msg2
(asyncmsg)
(syncmsg)
A sequence diagram emphasizes the time-ordering of
messages and the temporal ordering of message flow
msg3
(syncreply)
throughthesystem.
(asyncmsg)
destroy
X
SequenceDiagram
CommunicationDiagrams
node1
Communication diagrams and sequence diagrams are
together known as interaction diagrams. A 1.create
communication diagram shows the same information as 2.msg1 4.msg3
5.destroy
a sequence diagram except from a different perspective.
It emphasizes the structures through which the 3.msg2
messages flow. Each diagram can be created from the node3 node2
other.
CommunicationDiagram
7
.
©2006SombersAssociates,Inc.,andW.H.Highleyman

StateDiagrams
A state diagram shows the dynamic view of an object. It comprises a state machine consisting of
states,transitions,events,andactivities.
transition4
transition2 transition3
state1 state2 state3
transition5
transition1
state4
StateDiagram
swimlanes
organization1 organization2
action2 action1
ActivityDiagrams
action3
An activity diagram shows the structure of a process or
other computation as the flow of control and data from
step to step within the computation. It addresses the sequential
branch
dynamic view of a system. An activity diagram may
condition2
contain actions which are atomic and other activities. It
fork
is much like a flow chart. It introduces the concept of
condition1
“swim lanes,” which represent different organizations.
Using swim lanes, the activity diagram can show how
actionsflowacrossorganizations.
(concurrent
action5 action4
operation)
join
merge
activity1
ActivityDiagram
8
.
©2006SombersAssociates,Inc.,andW.H.Highleyman

name
PackageDiagrams
A package diagram shows the decomposition of the
name1 name1
model into organizational groups and their
dependencies. It is often used to package together the
classes, diagrams, and other work products of a team of
developers. name1
OtherDiagrams
PackageDiagram
In addition to these diagrams, the UML specification also describes timing diagrams and
interaction overview diagrams. However, these diagrams are little used and are not covered in
theUMLUserGuide.
Summary
TobecomeanexpertinUMLcouldbealifetimecareer.Thegoodnewsisthatthebulk ofsystem
documentation needs can be satisfied with a relatively cursory knowledge of UML. As with any
language, facility comes with use. As you use UML, you will become more proficient with it. The
major advantage of UML is that as an accepted standard, the models depicted by it are
understandableto a wide audience.Furthermore,thereareseveraltools availableoff-the-shelf to
supportUML(seewww.uml.org).
The Unified Modeling Language User Guide is a well-organized and easy-to-read description of
UML that will get you started on the use of UML. Especially recommended is a thorough reading
of Chapter 2, Introducing the UML, which is an excellent broad discussion of the structures,
behaviors, relationships, and diagrams of UML. The rest of the UML User Guide can then be
used as a reference to solve particular documentation problems. A useful summary of UML
documentationtechniquesisgiveninAppendix1,UMLNotation.
If further depth is required, referenceis madetothebook,Unified ModelingLanguage Reference
Manual, by the same authors. Beyond that, there is the ultimate description in the UML Version
2.0specificationfrom theObjectManagementGroup, availableatOMG’s website, www.uml.org.
OMGstatesthatthisspecificationisthemost-usedofallofitsspecifications.
9
.
©2006SombersAssociates,Inc.,andW.H.Highleyman
