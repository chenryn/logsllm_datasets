Asynchronous Replication Engines
November2006
Active/Active Systems
A fundamental tenet of active/active systems is that there are at least two copies of the
application database in the network. These copies and the processing nodes which use them
should be geographically distributed to ensure that the application will be tolerant to problems
affectingawidearea.
The database copies must be kept in synchronism to
application application
ensure that any node can use any database copy and
database database
end up with the same result. This means that as soon as
a change is made to one of the copies, it must be
replicated to the other database copies in the application
network.
replication
Therearemanywaystodothis,including: NodeA NodeB
 asynchronousreplication
 synchronousreplication
 transactionreplication
 networktransactions
Inthis article, we willlook atthetechniques and issues of
asynchronous replication. We will talk about the other
methodsinlaterarticles. AnActive/ActiveSystem
The Replication Engine
With asynchronous replication, the source and target systems are loosely coupled. Changes
madetothesourcedatabasearequeuedforreplicationtothetargetdatabase.Atsomelatertime
(which maybe in milliseconds), a replication engine picks up the changes and sends them to the
targetsystem wheretheyareappliedtothetargetdatabase.Thesourceapplicationsareineffect
unawareofthistransferofdatachangesandareunaffectedbyreplication.
Asynchronous replication is done via an asynchronous replication engine.1 Although there are
manyforms of replication engines in the marketplace, by and large they follow the same general
architectureinordertoreplicatedatafromasourcedatabasetoatargetdatabase.
1
Asynchronous replication engines are described in great detail in the book entitled Breaking the Availability Barrier:
SurvivableSystemsforEnterpriseComputing,byDr.BillHighleyman,PaulJ.Holenstein,andDr.BruceHolenstein.
1
©2006SombersAssociates,Inc.,andW.H.Highleyman

A replication engine typically depends upon some form of a real-time log of changes.We will call
this log the Change Queue. Information describing each change made to the source database is
entered into the Change Queue either by the database manager, by triggers in the database, or
bythe applicationitself.TheChange Queue is usuallydisk-residentsothatthereplicationengine
canrecoverfromnodeorenginefailures.
An Extractor process follows the tail of the Change Queue and extracts the description of a data
change as itis logged.Itsends thedatachangeinformationtothetargetsystem sothat itcanbe
appliedtothetargetdatabase.
Data changes may be sent directly to the target system by the Extractor, or they may first pass
throughanother disk queue usedfor recoverypurposes.Inthe latter case, the Extractor will write
the change to the disk-resident Recovery Queue. A Transmitter process then reads the recovery
queueandsendsthedatatothetargetsystem.
sourcesystem
application
trans-
source change extractor recovery
mitter
database queue queue
targetsystem target applier apply receiver
database queue
Asynchronous Replication Engine
At the target system, change information may be received directly by an Applier process, which
updates the target database with the changes. Alternatively, the change information may be
written to another intermediate disk queue which is used to control the sequence of changes
applied to the target database. The Applier can use this Apply Queue to filter out aborted
transactionsandtoapplytransactionsintheiroriginalordertoguaranteereferentialintegrity.
Replication Latency
One of the most important characteristics of a data replication engine is its replication latency.
Replicationlatencyisthetimethatittakesforachangetopropagatefrom thesourcedatabaseto
the target database. As we shall see later, replication latency creates some of the undesirable
2
©2006SombersAssociates,Inc.,andW.H.Highleyman

characteristicsofdatareplication.Thesecharacteristicsincludedatalossfollowinganodefailure,
datacollisions,andapplicationperformanceifsynchronousreplicationisbeingused.2
Manyreplicationengineshavereplicationlatencymeasuredassubseconds.Othersrequiremany
secondsormoretopropagatechanges.Therearemanycausesofreplicationlatency,including:
 Thenumberofdiskqueuingpointsinthereplicationpath.
 Buffering delays at the communication channel as changes are batched to improve
communicationefficiency.
 Thespeedofthecommunicationchannel.
 Whether the processes that follow the tail of a disk queue are event-driven or use
polling.
 Ifdisk-readingprocessesarepoll-driven,whatistheirpollinginterval.
 Thedelayrequiredtoreserializecommitstoguaranteereferentialintegrity.
It is important to choose a replication engine whose replication latency is satisfactory for the
application.
Bidirectional Replication
The replication engine which we described above is a one-way replication engine. Of course, for
active/active systems, replication has to be bidirectional. This is accomplished simply by
configuringtworeplicationengines,onereplicatingineachdirection.
If there are more than two nodes in an
active/active network, a bidirectional pair of
replicationengine replication engines is required between
application application
enough of the nodes to create a fully
database database
replicationengine
connected network. Note that not all nodes in
an active/active network need have database
BidirectionalReplication
copies, and some nodes might be configured
toforwardchangestoothernodes.
Advantages of Asynchronous Replication
Since an asynchronous replication engine feeds off a Change Queue that maybe created bythe
application anyway (such as a change log created by a database manager), the replication
process is totally transparent to the applications. It happens under the covers, and except for a
smalladditionalprocessor loadrequired tosupport the replication engine, it has noimpacton the
application.
In addition, asynchronous replication is totally noninvasive. No changes to the application are
required.Replicationenginesareoff-the-shelfproductsthatsimplyplugin.
Oneexceptiontotheaboveis ifthereisnoinherentChangeQueuecreatedbytheapplication.In
this case, the application must be modified to create a change log of some sort. This will also
increasetheprocessingloadsomewhat.
2
AdetailedperformanceanalysisforreplicationenginesisprovidedintheforthcomingbookentitledBreakingthe
AvailabilityBarrier:AchievingCenturyUptimeswithActive/ActiveSystems,byPaulJ.Holenstein,Dr.BillHighleyman,
andDr.BruceHolenstein.
3
©2006SombersAssociates,Inc.,andW.H.Highleyman

Of course, the most obvious advantage of an active/active system is the ability to switch users
rapidlyto surviving nodes should a node fail. However, this is a characteristic of the active/active
architecture.Eachofthedatareplicationmethodsmentionedaboveprovidesthiscapability.
Asynchronous Replication Issues
There are several considerations that must be taken into account when contemplating
asynchronous replication for active/active systems. These include referential integrity, ping-
ponging,datalossfollowinganodefailure,anddatacollisions.
ReferentialIntegrity
The data replication engine must guarantee referential integrity. Only then can all database
copiesbeusedforapplicationprocessing.
If a data replication engine does not guarantee that transactions are applied to the target
databaseinthesameorderthattheywereappliedtothesourcedatabase,thedatabasecopywill
not be consistent. Child rows may exist without parents. Indices may point to nothing. New data
maybeoverwrittenbyolddata.
This is particularlya problem with hardwarereplication schemes in whicha physical data block is
replicated without regard to transaction boundaries. It is also a characteristic of some software-
basedreplicationengines.
Ping-Ponging
In order to run in a bidirectional configuration, the
replication engine must prevent ping-ponging. This
is the return to the source system of a change just data data
receivedfromthesourcesystem. base X base
DataLossFollowingaNodeFailure ping-ponging
Should a node containing a database copy fail, it is
likelythattherewillbechangesstillinthereplication
X
pipeline at the time of failure. These changes will
data data
never be propagated to the target system and will base base
be lost. There is no way to recover them unless the
failednodecanberestoredquickly.3
lostdata
This is one case in which replication latency is
important. The longer the replication latency, the
dataitema
morelikelyitisthatdatawillbelostfollowinganode
X
failure. data data
base dataitema base
X
DataCollisions
datacollision
A data collision occurs if two users should update
AsynchronousReplicationIssues
the same data item at two different database copies
within the replication latency interval. In this case,
3
HPNonStopserverssupportaremotemirroroftheiraudittrail.Theremotemirrorguaranteesthatnotransactionswill
belostfollowinganodefailure.HPcallsthisconfigurationZLTforZeroLostTransactions.
4
©2006SombersAssociates,Inc.,andW.H.Highleyman

each new value of the data item will be replicated to the other system and will overwrite the
original change made at that system. As a result, the database copies are different and both are
wrong.
This is another case in which replication latency is important. The shorter the latency time, the
lesslikelyitisthattherewillbeadatacollision.4
Thereareseveralwaystoattacktheproblemofdatacollisions:
Avoidance:Datacollisionscanbeavoidedby:
 Partitioning the database so that a particular data item is always updated on a
designated database copy. Those changes are then replicated from that copy to
theotherdatabasecopiesintheapplicationnetwork.
 Creating a master node to which all updates are directed. The master node then
replicateschangestotheothernodesinthenetwork.
 Using relative replication to replicate operations on the data rather than repli-
catingthefinalvalueofthedataitemitself(forinstance,add10orsubtract5).
 Usingsynchronousreplicationasdescribedinournextarticle.
Detection and Resolution: Collisions can be detected by comparing the version of the
data item to be updated to the version of the update. If they differ, a collision has
occurred.Thereareseveraloptionsforresolvingadetectedcollision:5
 Establish a node precedence. The node with the highest precedence wins, and
itsdatavalueisaccepted.
 Use data content to resolve a collision. For instance, the update with the most
recenttimestampmaywin.
 Ignore collisions if the database will be self-correcting over time due to other
noncollidingupdates.
 Ignore collisions and periodicallyresynchronize the databases to one designated
asthedatabaseofrecord.
 Ifallelsefails,collisionsmustberesolvedmanually.
Products
There are several replication engines off the shelf that purport to support active/active
architectures. Following is only a partial list of the many available products.6 Be aware that some
4
TheprobabilitiesofdatacollisionsfordifferentcircumstancesarederivedinChapter9,DataConflictRates,inthebook
entitledBreakingtheAvailabilityBarrier:SurvivableSystemsforEnterpriseComputing,referredtoearlier.
5
ThehandlingofdatacollisionsisextensivelycoveredintheBreakingtheAvailabilityBarrierseriesofbooksreferenced
earlier. See especially Chapter 4, Active/Active and Related Technologies in the forthcoming book, Breaking the
AvailabilityBarrier:AchievingCenturyUptimeswithActive/ActiveSystems.
6
Others are also listed in Appendix 4, Implementing a Data Replication Project, in the book entitled Breaking the
AvailabilityBarrier:SurvivableSystemsforEnterpriseComputing,referredtoearlier.
5
©2006SombersAssociates,Inc.,andW.H.Highleyman

vendors may redefine the term active/active to fit their product’s capabilities, so be sure to
analyzethecharacteristicsofadatareplicationenginebeforecommittingtoitsuse.
 StreamsfromOracle(www.oracle.com)
 TimesTenfromOracle(memory-to-memoryreplication)(www.oracle.com)
 DRNetfromNetworkTechnologies(www.network-tech.com)
 ShadowbasefromGravic(www.gravic.com)
 GoldenGateforActive/ActivefromGoldenGate(www.goldengate.com)
 SunClusterGeographicEdition(AvailabilitySuite)forSun(www.sun.com)
 MetroMirror(forParallelSysplex)fromIBM(www.ibm.com)
 GlobalMirror(forParallelSysplex)fromIBM(www.ibm.com)
 RepliStorfromEMCLegato(software.emc.com)
 ClusterReplicaSQLforMSSQLfromXLink(www.xlink.com)
 NSIDouble-TakefromDouble-Take(www.doubletake.com)
 DataXtendREfromProgress(www.progress.com)
 MetiLinxDatabaseSuite(forMySQL)fromMetiLinx(www.metilinx.com)
 ColadafromMARSYS(www.marsys.com)
Summary
Asynchronous replication is by far the most popular replication tool used in today’s active/active
systems.Itisfast,non-intrusive,andunder-the-covers.
It does have its issues, which must be understood before moving to an asynchronous
active/active environment. These issues include the assurance of referential integrity of the
replicated data, lost data following a node failover, data collisions, and minimizing replication
latency.
Available today are many products that support asynchronous replication. There is virtually a
product for any platform, and many products are heterogeneous in that they can replicate
betweendisparateplatforms.
Active/activeisheretoday,asaretheproductsthatsupportit.
6
©2006SombersAssociates,Inc.,andW.H.Highleyman
