Reliable Multicasting
January2008
What is Multicasting?
Many applications exist in which messages must be sent to a group of readers. Replicating
database changes to the database copies in an active/active network is one such example with
which we deal frequently in the Availability Digest. However, there are many other applications
that require this capability. The distribution of actionable events, of stock market activity, and of
newsstreamsareotherexamples.
Thestraightforwardapproachis forthesender tosend itsmessagetoeachreceiver over apoint-
to-point connection using a protocol such as TCP/IP (a unicast). However, this approach is not
scalableandbreaksdownwithalargenumberofreceivers.
A more practical approach is to multicast a single
message to a group of receivers in a multicast sender receiver
group. The group contains all of the receivers that
haveaninterestinthemessage.
receiver
Multicasting in its simplest form is unreliable.
Messages are sent via a one-way best-efforts receiver
protocol such as UDP. There is no guarantee that a receiver
message will be received by a specific receiver. If a
receiver misses a message, it may not only be AMulticastNetwork
unawarethatithasmissedthatmessage,butevenif
itisaware,ithasnowaytorecoverthatmessagefromthesender.
In many applications, this is not acceptable. It must be guaranteed that every receiver in a
multicast group receives every message. This is known as reliable multicasting. Building reliable
multicast networks that can scale to a large number of receivers across a wide-area network is a
difficultproblem.Nosinglebestsolutionexists,andeachsolutionintroducesnewproblems.1
The problem of reliable multicasting has different solutions for local area networks and wide area
networks.The problem is further complicated if there aremultiple senders and if proper message
orderingisrequiredamongthesenders.Theseconsiderationsarediscussedbelow.
Classes of Multicasting Applications
There are two primary types of multicasting applications. One is the distribution of actionable
events. For instance, processes in a distributed environment may need to know when control
parameters have changed. An event can be multicast to all concerned processes so that they
canreadthenewparametersfrom acentralsource.Alternatively,an eventcould bebroadcastto
1A.S.Tanenbaum,M.VanSteen,DistributedSystems:PrinciplesandParadigms,PearsonPrenticeHall;2007.
1
©2008SombersAssociates,Inc.,andW.H.Highleyman

all processes of a class indicating that an updated version of the process is available or that all
processesshouldbeginorendprocessing.
sender sender
events updates
receiver receiver receiver receiver
receiver receiver
action action
data data
base base
action data
base
EventMulticasting UpdateMulticasting
The other type of application is the maintenance of multiple copies of a database. The database
might be, for instance, the application database in an active/network, a securities database
accessed by the customers of an information distribution service, or news stories available over
the Internet. Database multicasting applications are further complicated by the fact that new
database copies joining the group need to be initialized and by the possibility that subtle errors
couldcausethedatabasestodivergeoveraperiodoftime.
Either of these types of multicast networks may be preconfigured, or they may be dynamic. An
example of a dynamic multicast network is a publish/subscribe environment. In such an
environment,asubscribersubscribestocertainmessagetypes,suchascertainclassesofevents
or certain database changes. The publisher then sends an event or database update message
only to those subscribers who have expressed an interest in the content of that message. In
dynamic multicast networks, members may join (subscribe) or leave (unsubscribe) the group at
anytime.
Reliable Multicasting over Local Area Networks
Multitasking over LANs is fairly straightforward. A multicast group may be established with
preconfigurednodesasreceiversorasadynamicmulticastgroupinwhichmembersjoinorleave
at their will using, for instance, a publish/subscribe mechanism. The Internet Group Management
Protocol(IGMP) supports suchmulticasting.2Asender canthensend amessagetothemulticast
group members. The message will be delivered only to those members of the group but not to
other nodesontheLAN thatarenotincludedinthegroup.Themulticastmessagecanpropagate
through the various subnets on the LAN network via routers connecting the subnets. In order to
limit subnet loading, the routers should be configured to block a multicast message to a subnet
thatservesnomembersofthemulticastgroup.
Messages to multicast groups on a LAN are sent via UDP (the Internet’s User Datagram
Protocol). UDP is a best-efforts only protocol that tries to deliver the message but has no
feedback as to which receivers actually got the message. It is the goal of reliable multicast to
correctthissituation.
LostMessageDetection
The first problem is that a receiver must be able to identify a lost message. This is
straightforward. The sender simply provides a sequence number in each message that it sends.
2H.R.Stevens,TCP/IPIllustrated,Volume1,AddisonWesleyLongman;1994.
2
©2008SombersAssociates,Inc.,andW.H.Highleyman

Eachreceivercanthenmonitorthesequencenumberandcandeterminenotonlythat itmisseda
message,butitcanidentifyforthesenderwhichmessageitmissed.
MessageBuffering
Fundamental to reliable multicasting is the capabilityfor a sender to resend a lost message. This
means that the sender must buffer all of its recently-sent messages. If a receiver requests the
retransmission of a lost message, the sender can retrieve that message from its buffer and
resendit.
One issue with message buffering is the determination of the time at which a message can be
discarded.Thisdependsuponthemeansforretransmissionrequests,asdiscussednext.
PositiveAcknowledgements
Theonecertain wayfor asender to verifythateach receiver has received the multicastmessage
is for each receiver to acknowledge that it has received the message. These acknowledgements
canbesentoverunicastconnectionsbetweeneachreceiverandthesender,suchasprovidedby
TCP/IP. Only when the sender has received an acknowledge message from each member of the
multicastgroupcanthemessagebedeletedfromthesender’smessagebuffer.
A receiver will know that it has missed a message when it receives a message with a later
sequence number. At this point, the receiver will return a negative acknowledge (NAK) to the
sender;andthesenderwillretransmitthelostmessage,asdescribedlater.
The obvious problem with this solution is the load imposed on the sender by the
acknowledgement traffic. Though acknowledge messages can be piggybacked on top of other
messages, the advantage of multicasting is that only one message need be sent by the sender
regardless of the number of receivers. Now, however, the sender must receive an acknowledge
message from all receivers. If the number of receivers is small, this load may be acceptable.
However, this technique is not scalable and will rapidly break down as the number of receivers
increases.
NegativeAcknowledgements
The scalability problem is solved by eliminating the positive acknowledgements. With this
technique, receivers return only negative acknowledgements. If the sender does not hear from a
receiver,itassumesthatthereceiverhasreceivedallmessagestodate.
Inthismodel,thesender hasnospecificinformationastohowlongitmustretainmessagesinits
buffer. Therefore, it must depend upon timeouts. A message is held long enough so that the
sender can be ensured that all receivers have received it and that there will be no further
retransmissionrequests.
There are two ways in which negative acknowledgements can be sent from a receiver to the
sender–unicastandmulticast.
 Unicast: Negative acknowledgements can be sent from each receiver to the sender over
point-to-point connections suchas TCP/IP.Themissingmessagemaybe returnedto the
receiveroverthischannel.
 Multicast: A receiver can multicast a negative acknowledgement to the multicast group
includingthesender.Themissingmessageismulticasttothemulticastgroup.
The use of negative acknowledgement multicasting can be put to good use to reduce negative
acknowledgement traffic. First, each receiver imposes an arbitrary delay on its transmission of a
3
©2008SombersAssociates,Inc.,andW.H.Highleyman

negative acknowledgement message. Each receiver monitors the negative acknowledgements of
the other receivers. If it detects a negative acknowledgement from another receiver that is the
sameasonethatitwishes tomake,thenitdoesnothavetosenditsnegativeacknowledgement.
It knows that the message it needs will be coming shortly (if, in fact, it has not already been
retransmitted).Consequentlyif multiplereceivers havemissedaparticular message,onlyone(or
averyfew,dependingupontiming)negativeacknowledgementsneedbemulticast.
message message
buffer buffer
nak
sender sender
resend
LAN nak
router router
LAN nak
receiver receiver receiver receiver receiver receiver receiver receiver
ReliableLANMulticastwithUnicastNAKs ReliableLANMulticastwithMulticastNAKs
MessageRetransmission
When the sender receives a negative acknowledgement, it must resend the missed message to
therequestingreceiver.Thiscanbedoneinoneofseveralways:
