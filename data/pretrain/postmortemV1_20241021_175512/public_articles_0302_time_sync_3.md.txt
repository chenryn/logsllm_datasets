Time Synchronization in Distributed Systems – Part 3
February2008
In distributed systems, it is often imperative that all nodes in the system have the same view of
time; and that time must be synchronized with real civil time according to some standard time
reference. In the Internet world, this is typically done with the Network Time Protocol, NTP. NTP
is one of the earliest Internet protocols used and is probably one of the most used protocols
today. In Parts 1 and 2 of this series,1 we described the processes by which NTP accurately
synchronizeseverynodeinadistributedsystemwithareferencecivil-timesource.
However, in many cases, we can relax the time requirements provided by NTP. Specifically,
though it is imperative that the clocks of all nodes be synchronized with each other, it is often not
necessary that the network be synchronized with civil time. If the network time is a few seconds
or even more in error, this may not cause a problem so long as all nodes agree upon a common
time.
This occurs when relative time is necessary to properly order events but when the measurement
ofabsolutetimeforeacheventneednotbeterriblyaccurate.
Logical clocks, first proposed by Leslie Lamport in a 1978 paper published in the
Communications of the ACM (Association for Computing Machinery), 2 provide just this function
in a much simpler way than NTP. Lamport was awarded the prestigious Dijkstra Prize by the
ACMforhisworkonlogicalclocks.
Logical Clocks
A logical clock is a clock that keeps accurate time independent of any precise reference time.
Therefore,thoughitmaymeasuretimeintervalscorrectly,itsrelationshiptoactualtimemaybein
error.
Manydistributedtransactionprocessingsystemsdependuponallnodesseeingthesametimeso
that they may properly order events (for instance, which transaction occurred first?). However, if
there are no critical ties with other independent systems, then the absolute time of these events
maynot be terribly important so long as the timestamps are not out of reason. For instance, how
many nondistributed transaction processing systems depend only upon their own internal clock,
whichmaynothavebeenaccuratelysetbytheoperatorinitiallyandwhichmaydriftovertime?
Lamport’slogicalclockssolvethisproblemwithasimplealgorithm.
1TimeSynchronizationforDistributedSystems–Part1,AvailabilityDigest;November,2007.
TimeSynchronizationforDistributedSystems–Part2,AvailabilityDigest;December,2007.
2
Lamport,L.,Time,Clocks,andtheOrderingofEventsinaDistributedSystem,CommunicationsoftheACM;July,1978
1
©2007SombersAssociates,Inc.,andW.H.Highleyman

Lamport’sLogicalClocks
As with anyclock, a logical clock keeps track of time via clock ticks. The greater the value of the
clocktick,thelaterthetime.Lamport’salgorithmdependsonlyupontwoobviousrules:
Rule1: Withinasystem,thereisaminimumofoneclocktickbetweenanytwoevents.
Rule2: IfNodeAsendsamessagetoNodeB,NodeBreceivesthatmessageafterNodeA
sentit.
Figure 1 shows an example in which three nodes, P1, P2, and P3, are cooperating with each
other. Each has its own clock, in which the frequencies are slightly off (greatly off in the example
for purposes of illustration). P1’s clock increases by a factor of 6 on each tick. P2’s clock
increases by a factor of 8 on each tick. P3’s clock increases by a factor of 10 on each tick. Left
aloneoveraperiodoftime,theywoulddiverge,asshowninFigure1a.
P1 P2 P3 P1 P2 P3
0 0 0 0 0 0
m1 m1
6 8 10 6 8 10
12 16 20 12 16 20
m2 m2
18 24 30 18 24 30
24 32 40 24 32 40
30 40 50 30 40 50
m3 m3
36 48 60 36 48 60
42 56 70 42 61 70
m4 m4
48 64 80 48 69 80
54 72 90 70 77 90
60 80 100 76 85 100
ClocksRunningatDifferentRates Lamport'sAlgorithmicCorrection
(a) (b)
Lamport'sLogicalClocks
Figure1
Using Lamport’s algorithm, these clocks can be forced into synchronization, as shown in Figure
1b. Node P1 is shown sending a timestamped message m1 to P2. The message leaves P1 at
time 6 and arrives at P2 at time 16. This satisfies Lamport’s second rule. The same holds for
messagem2sentbyP2toP3.
However, when P3 returns a message to P2 at time 60, it is received by P2 at time 56. This
violates Rule 2 as the message must arrive after it was sent. Therefore, P2’s clock is advanced
so that its clock tick 56 is advanced to 61, one tick after the message was sent by P3. All further
ticksofP2aresimilarlyadjusted,incrementingby8oneachtick.
Likewise, when message m4 is sent to P1 by P2, it leaves P2 at its new time 69 and is received
by P1 at time 54. This again violates Rule 2, so P1’s clock is advanced so that its old tick 54 is
nowoneticklaterthanwhenP2sentthemessage,or70.
2
©2007SombersAssociates,Inc.,andW.H.Highleyman

As can be seen from Figure 1, following this exchange of messages, the clocks are more closely
synchronizedthantheywerebeforetheLamportadjustments.Overtime,thisprocedurewillbring
the clocks even more in synchronism until theyare synchronized arbitrarilyaccurately, especially
forhighmessagetraffic.
Thus, Lamport logical clocks will be maintained in close synchronism across the network, though
theirrelationtorealciviltimeisindeterminate.
EffectofChannelLatency
Figure 1 has used the example of clock ticks being greater than the channel latency. Each clock
tick represents 6 or more units of time, and the channel latency is one unit of time. In this case,
theclockswillapproachperfectsynchronismovertime.
However, synchronization between two clocks can be no better than the latency of the
communication channel connecting the two systems (a situation not considered by Lamport). To
understandthis,considerFigure2.Figure2showsapairoflogicalclocksinwhicheachclocktick
is one unit of time, and the channel latency is three units of time (just the opposite situation from
thatofFigure1).
P1 is shown as being behind P2 by two clock ticks. P2 sends P1 P2
message m2 at its time 12. On the next clock tick, P1 sends P2
itsmessagem1.Clearly,m1wassentafterm2. 10 12
m2
Message m2 will arrive at P1 three time ticks later at P1’s time 11 13
13. P1 is happy with this sequence. P2’s message indicates that
it was sent at time 12, and it is received by P1 at time 13, thus 12 14
satisfying Lamport’s second rule. Likewise, P1’s message sent at
time 11 is received by P2 at time 16, also satisfying this rule. 13 m1 15
Based on the message timestamps, P1 would conclude that its
message, m1, was sent before P2’s message m2. Furthermore, 14 16
no adjustment in time is made; and the system clocks remain in
relativeerrorbytwoclockticks. 15 17
Clocktick=1unit
If the channel latency had been two clock ticks rather than three,
ChannelLatency=3units
m2 sent at time 12 would be received by P1 at time 12. P1’s
EffectofChannelLatency
clock would be advanced by one, but there would be no further
Figure2
corrections. The clocks would remain in relative error by one
clocktick.
Ifthechannellatencyhadbeenoneclock tick,m2wouldbereceivedbyP1attime11.P1’sclock
would be advanced to time 13 (one tick later than when m2 was sent), putting it in synchronism
withP2’sclock.Inthiscase,theclocktickintervalisequaltothechannellatency.
The lesson here is that there is no advantage to making the clock tick any shorter than the
channel latencytime, since the channel latencytime will be the limit of synchronization accuracy.
If the systems are 1,000 miles apart (representing a channel latency of about 10 milliseconds),
there is no advantage to having a clock tick any shorter than 10 milliseconds. The resolution of
eventtimesislimitedtothechannellatencyseparatingthesystems.
3
©2007SombersAssociates,Inc.,andW.H.Highleyman

Total Ordering of Events
AnomalousBehaviorWhenEventsCan’tBeOrdered
The messages in Figure 1 may be related, or they may simply be independent messages.
However, in many cases, the messages represent events that also must be ordered. For
instance, consider two banking nodes in a distributed system, as shown in Figure 3, each with its
own database that is intended to be an exact copy of the other. Each transaction is applied
directly to the database that is closest to where it originated and is then applied across the
networktothedatabaseoftheremotenode.
In this example, an ATM user withdraws $100 from an ATM near database 1. At nearlythe same
time, the bank increases the ATM charge by $1; and this is applied to database 2. The $100
withdrawal is propagated across the network to database 2, where it is applied after the increase
in the withdrawal charge. Likewise, the withdrawal charge increase is propagated across the
networktodatabase1,whereitisappliedafterthewithdrawal.
increasewithdrawal
withdraw charge by$1
$100
data data
base1 base2
EventOrdering
Figure3
Though the order in which these two events occur is not terribly important from an application
viewpoint, it can be disastrous from the database’s viewpoint. In this case, if the original
withdrawal charge was $1, then database 1 would show a decrement to the user’s account of
$101, whereas database 2 would show a decrement of $102. The databases are now
inconsistent.Thissituationmustbeavoided.
TheLamportEvent-OrderingAlgorithm
A simple extension of the Lamport algorithm3 described above can provide complete ordering of
events in addition to keeping the clocks synchronized. This is done by simply specifying that no
event occurring at a node can be processed until that node has received messages from every
othernodewithalatertimestamp.
If there were no control on this, it might be a while before the node hears from all other nodes,
thus delaying the processing of the event. However, this challenge can be solved by having the
node experiencing the event notify the other nodes of the event and then having the other nodes
acknowledgethatmessage.Thisis,infact,thewaythattransactionprocessingsystemsnormally
work. More specifically, the additional rules in the algorithm when acknowledge messages are
usedare:
Rule3: Each node has a request queue of messages, which are ordered by message send
time. When the node sends a message to other nodes, that message is placed in its
requestqueueinsend-timeorder.
Rule4: When a node receives a message from another node, it returns an acknowledge
message to the sending node, puts the message in its request queue in send-time
order,andmarksthemessageasacknowledged.
3
Tanenbaum,A.S.;VanSteen,M.;DistributedSystems:ParadigmsandPrincipals,PearsonEducation;2007.
4
©2007SombersAssociates,Inc.,andW.H.Highleyman

Rule5: When a node receives an acknowledgement to one of its own messages from all of
the nodes to which it had sent that message, it marks the message in its message
queueasacknowledged.
Rule6: If the message at the head of the queue has been acknowledged, it is sent to the
application.
This process is illustrated in Figure 4. In Figure 4, there are two nodes in the system, P1 and P2.
Theirclocksaresynchronized.P1sendsamessagem1toP2attime1.P2sends amessagem2
toP1 attime2.If nothingelseis done, P1 willprocessmessagem1beforemessagem2; andP2
willprocessmessagem2beforemessagem1.Therefore,thereisnosystem-wideeventordering.
P1 P2
0 0
m1
queuem1 1 1
m2 queue
2 2
m2
queuem2
3 3
behindm1
a2
4 4
queuem1
5 5 aheadofm2
processm1
a1
6 6
ackm1
7 7
processm1
ackm2
processm2 8 8
processm2
9 9
OrderedExecutions
Figure4
Let us now apply Lamport’s algorithm for total ordering, as shown in Figure 4. The sequence of
eventsisasfollows:
Time1: P1sendsmessagem1toP2andputsm1initsmessagequeue.
Time2: P2sendsmessagem2toP1andputsm2initsmessagequeue.
Time3: P1 receives message m2 and puts it in its message queue as an acknowledged
messageafterm1becauseitstimestampislater.
Time4: P1acknowledgesmessagem2withacknowledgemessagea2.
Time5: P2 receives message m1 and puts it in its queue as an acknowledged message
aheadofm2becauseitis timestampedearlier.Sincem1isattheheadof P2’s queue
andismarkedasacknowledged,itisprocessed.
Time6: P2acknowledgesmessagem1viaitsmessagea1.
Time7: P1receives theacknowledgementtoitsmessagem1andmarksm1acknowledgedin
itsmessagequeue.Sincem1isattheheadofthequeue,itcannowbeprocessed.
Time8: P2receives theacknowledgementtoitsmessagem2andmarksm2acknowledgedin
its message queue. Since m2 is at the head of the P2 queue, it can now be
5
©2007SombersAssociates,Inc.,andW.H.Highleyman

processed.
Also,m2isnowattheheadofP1’smessagequeueandcannowbeprocessed.
As a result, m1 has been processed first at both nodes; and m2 has been processed second.
Totaleventorderinghasbeenachieved.
Thoughthis algorithm is an extension of Lamport’s logicalclocks for timesynchronization, it does
not depend on those sorts of clocks. It can be used with any mechanism that closely
synchronizesclocks,suchasNTP.
DataCollisions
The above example has avoided the issue of data collisions. What if messages m1 and m2 had
been generated with the same timestamp? Neither system would have been able to determine
which message was, in fact, generated first. However, it is imperative that both systems come to
thesameconclusion.
Thus,analgorithm for resolvingdatacollisions is necessary.For instance,Lamportsuggests that
the systems have an ordered hierarchy. The system higher in the hierarchy would win the data
collisionatbothsystems.
Summary
The synchronization of time between nodes in a distributed system is a complex process. The
Network Transport Protocol (NTP) has been used successfully for years to do this and has thus
becomeapowerfulandmaturefacility.
Lamport’s logical clocks are a simpler means to synchronize time throughout the system if it is
only necessary to synchronize the nodes and not to tie them precisely to civil time references.
However, the accuracy of system clock synchronization is limited to the channel latency time
separatingthesystems.
An extension to Lamport’s algorithm can guarantee the total proper ordering of event processing
in a distributed system within the clock resolution. This extension depends upon the node clocks
being properly synchronized. Though this algorithm is an extension of Lamport’s work on logical
clocks, it is equally applicable to distributed systems time-synchronized by NTP or by any other
means.
6
©2007SombersAssociates,Inc.,andW.H.Highleyman
