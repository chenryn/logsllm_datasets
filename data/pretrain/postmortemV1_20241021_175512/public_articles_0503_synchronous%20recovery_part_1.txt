Synchronous Replication Recovery Strategies
March2010
The recovery of a database in an active/active network following a processing node failure is
somewhat more complex if synchronous replication is used to keep the database copies in
synchronism rather than asynchronous replication. This article explores several methods for
resynchronizing a database in a synchronous-replication environment and points out their
advantagesanddisadvantages.
Active/Active Networks
Active/active networks1 comprise one or more geographically-separated processing nodes all
cooperating in a common application. Each node has access to a distributed copy of the
application database. Consequently, a transaction may be sent to any processing node in the
application network andbeproperlyprocessed.Should anodefail,allthatneeds tobedoneis to
reroute its transactions to surviving nodes. As a result, recovery from a node failure can be
accomplished in seconds, leading to extremely high availabilities. If recovery is so fast that no
onenoticestheoutage,continuousavailabilityhasbeeneffectivelyachieved.
Data Replication
The distributed database copies in the active/active network are kept synchronized via data
replication.Whenaprocessingnodemakesachange toits database,thatchangeis immediately
replicated to the other database copies in the application network so that each processing node
alwaysseesanup-to-dateapplicationdatabase.
There are two fundamental methods for data replication in active/active systems – asynchronous
replication and synchronous replication. They both support bidirectional replication and
concurrent access necessary for active/active systems. Bidirectional replication is necessary
since each node must be able to update all other nodes even as those nodes are updating it.
Concurrent access is required since an application in a processing node must be able to update
itslocaldatabaseinparallelwithothernodes.
AsynchronousReplication
Asynchronous replication2 replicates changes “under the covers.” It has no impact on the
applications themselves. As updates are made to the local database, the changes are entered
into a change queue of some sort. This can be done, for instance, by a transaction monitor, by
theapplication,orviadatabasetriggers.
1WhatisActive/Active?,AvailabilityDigest;October2006.
2AsynchronousReplicationEngines,AvailabilityDigest;November2006.
1
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

An asynchronous replication engine follows the change queue, extracting changes and sending
them to the target system. There, the replication engine applies them to the target database.
There is some delay (typically tens or hundreds of milliseconds) from the time that a change is
madetothesource databasetothe timethat it is madeto the target database. This timedelayis
calledreplicationlatency.
Replicationlatencycausestwoproblemsthatmustbeaccommodated:
 Shouldthesourcenodefail,changesstillinthereplicationpipelinemaybelost.
 Should applications at two nodes modify the same data object simultaneously (that is,
within the replication interval), the databases will be different and will diverge. This is
calledadatacollision.
Recovery of a failed node is straightforward. Should a node fail, the surviving node simply
continues to queue changes to the failed node. When the failed node is restored, the queue of
changes is drained to the recovering node to resynchronize it. Changes that arrive during the
recoveryprocessaresimplyaddedtotheendofthechangequeue.Whenthechangequeuehas
reachedanacceptablelength,therecoverednodecanbereturnedtoservice.
SynchronousReplication
Synchronous replication3 solves the asynchronous-replication problems of data loss and data
collisions. With synchronous replication, no change is made to any database copy unless all
copies can accept that change.Thesynchronous replication engineobtains locksonall copies of
thedataobjecttobeupdatedbeforeapplyingtheupdates.
Therefore,thedatabasecopiesarekeptinexactsynchronism.Sincealldatabasecopiesmustbe
updated or none are, there can be no lost data. Also, the locks ensure that only one change at a
timewillbeappliedtoanygivendataobjectcopyintheapplicationnetwork,thus eliminatingdata
collisions.
However,synchronousreplicationcomeswithitsownproblems:
 Because the applications must wait for all updates to be made across the application
network before proceeding, transaction-response times are extended. This time is called
application latency. As a consequence, most synchronous replication engines impose
limits on how far apart the processing nodes may be – typically several kilometers. This
maynotallowthedegreeofseparationneededforrequireddisastertolerance.
 If a processing node fails, transactions can no longer be committed since the failed node
cannot vote “yes” on the commit. Therefore, if no corrective action is taken, the
applicationnetworkcomestoahalt.
It is this latter problem that we address in this article. How does an active/active system using
synchronous replication continue in operation following a node failure, and how is that node
subsequentlyreturnedtoservice?
3SynchronousReplication,AvailabilityDigest;December2006.
2
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Continuing in the Presence of a Node Failure
SynchronousReplicationWhileAllNodesareOperational
Most synchronous replication is performed using a two-phase commit protocol. When a set of
changes within the scope of a transaction is to be made, the synchronous replication engine first
obtains locks across the application network on all copies of the data object to be modified. The
source node then asks the replication engine to confirm that all nodes are prepared to execute
thetransaction(the preparephase).If a node is holdingall of therequisite locks,itresponds with
a“yes”vote.Ifitcannotobtainalllocks,itwillvote“no.”
The second phase is the commit phase. If all participants in the transaction voted “yes,” the
replicationenginesareinstructedtoapplythechangesandtoreleasetheirlocks.Inthiscase,the
transaction has been committed across the application network. If any participant votes “no,” the
replication engines are instructed to release their locks and to apply no changes to the data
objectcopies.Thetransactionhasbeenaborted.
SynchronousReplicationinthePresenceofaNodeFailure
NodeFailure
Should a node fail, it can no longer respond to prepare requests. This lack of response will be
taken as a “no” vote, and the transaction is aborted. Therefore, all transaction processing is
halted.
To cure this situation, the failed node must be taken out of service. All further transaction
processing must exclude that node’s database copy from the scope of transactions, and all user
requests must be directed to the surviving nodes. In this way, synchronous replication can
continuewiththeremainingnodes.
ReplicationNetworkFailureandSplit-BrainMode
One serious problem occurs if thefailure is not the processing node but rather is the network link
connectingtheprocessingnodetotherestoftheapplicationnetwork.Inthiscase,anodecannot
tell if a remote node is not voting because it has failed or because communication with it has
beenlost.Animportantandcomplexdecisionmustbemade.Shouldprocessingcontinueornot?
Ifprocessingcontinuesinthepresenceofanetworkfailure,thenodesoneither sideofthefailure
will assume that the nodes with which they cannot communicate are down and will remove them
from the scope of their transactions. The two isolated sets of nodes will proceed in what is called
split-brain mode. Both node subsets will continue to process transactions, and their databases
will diverge. In addition, if the database is not partitioned so that updates are limited to a master
node for that partition, data collisions will occur. This is exactly what synchronous replication is
supposedtoavoid.
Therefore,adecisionmustbemadeas to whether the failureisanodefailureandtoremovethat
node from the scope of further transactions or whether the failure is a replication-link failure. In
the latter case, a further decision must be made as to which subset of nodes to take out of
service before continuing on with the remaining nodes. This is a complex decision, during which
timetransactionprocessingishalted.
Thereareatleasttwosolutionstothisdilemma:
 Pause processing until the problem can be determined and a course of action can be
taken.
3
©2010SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

 Use an independent quorum system to monitor the health of all nodes and to take
correctiveactionimmediately.
The first solution adds downtime. The second solution adds complexity. Neither is attractive.
Therefore, it is of utmost importance that the replication link be highly reliable. It should be
redundant with automatic failover and with no single point of failure. The probability of a dual (or
even triple) link failure should be so small that it is almost impossible to happen during the life of
thesystem.
Recovering a Failed Node
Removing a failed node from the scope of transactions is one problem. Returning it to service is
quiteadifferentproblem.
The firststep is to recover the failed node’s database copyand to bring it into exact synchronism
with the application network’s database. This has to be done while the application database is
being actively updated to avoid having to stop processing. The failed node’s database must then
bekeptsynchronized withtheapplication database as thefailed nodeis reentered into thescope
ofapplicationtransactions.
There are several ways that synchronous node recovery is being done in today’s products. We
reviewthesemethodsbelow.
SynchronousOnlineCopy
One technique is to copy the operational application database to the recovering database and to
keepsynchronizedthatpartof therecoveringdatabasethat has beencopied.Oncethecopyhas
been completed, the recovered database can be reintroduced into the scope of transactions
withoutanyimpactontransactionprocessing.
