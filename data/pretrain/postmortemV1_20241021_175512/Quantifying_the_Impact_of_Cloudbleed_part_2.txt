- The ratio of bandwidth per request would increase. Since the bug leaks a large amount of data onto the page, if the bug were being exploited then the bandwidth per request would increase.
- The ratio of bandwidth per unique IP would also increase. Since youâd expect that more data was going to the smaller set of IPs the attacker would use to pull down data then the bandwidth per IP would increase.We used the data from before the bug impacted sites to set the baseline for each site for each of these three ratios. We then tracked the ratios above across each site individually during the period for which it was vulnerable and looked for anomalies that may suggest a hacker was exploiting the vulnerability ahead of its public disclosure.This data is much more noisy than the sampled log data because it is rolled up and averaged over one hour windows. However, we have not seen any evidence of exploitation of this bug from this data.Reviewing Crash DataLastly, when the bug was triggered it would, depending on what was read from memory, sometimes cause our parser application to crash. We have technical operations logs that record every time an application running on our network crashes. These logs cover the entire period of time the bug was in production (22 September 2016 â 18 February 2017).We ran a suite of known-vulnerable HTML through our test platform to establish the percentage of time that we would expect the application to crash.We reviewed our application crash logs for the entire period the bug was in production. We did turn up periodic instances of the parser crashing that align with the frequency of how often we estimate the bug was triggered. However, we did not see a signal in the crash data that would indicate that the bug was being actively exploited at any point during the period it was present in our system.Purging Search Engine CachesEven if an attacker wasnât actively exploiting the bug prior to our patching it, there was still potential harm because private data leaked and was cached by various automated crawlers. Because the 6,457 sites that could trigger the bug were generally small, the largest percentage of their traffic comes from search engine crawlers. Of the 1,242,071 requests that triggered the bug, we estimate more than half came from search engine crawlers.Cloudflare has spent the last 12 days working with various search engines â including Google, Bing, Yahoo, Baidu, Yandex, DuckDuckGo, and others â to clear their caches. We were able to remove the majority of the cached pages before the disclosure of the bug last Thursday.Since then, weâve worked with major search engines as well as other online archives to purge cached data. Weâve successfully removed more than 80,000 unique cached pages. That underestimates the total number because weâve requested search engines purge and recrawl entire sites in some instances. Cloudflare customers who discover leaked data still online can report it by sending a link to the cache to[email protected]and our team will work to have it purged.Analysis of What Data LeakedThe search engine caches provide us an opportunity to analyze what data leaked. While many have speculated that any data passing through Cloudflare may have been exposed, the way that data is structured in memory and the frequency of GET versus POST requests makes certain data more or less likely to be exposed. We analyzed a representative sample of the cached pages retrieved from search engine caches and ran a thorough analysis on each of them. The sample included thousands of pages and was statistically significant to a confidence level of 99% with a margin of error of 2.5%. Within that sample we would expect the following data types to appear this many times in any given leak:67.54 Internal Cloudflare Headers    0.44 Cookies    0.04 Authorization Headers / Tokens       0 Passwords       0 Credit Cards / Bitcoin Addresses       0 Health Records       0 Social Security Numbers       0 Customer Encryption KeysThe above can be read to mean that in any given leak you would expect to find 67.54 Cloudflare internal headers. Youâd expect to find a cookie in approximately half of all leaks (0.44 cookies per leak). We did not find any passwords, credit cards, health records, social security numbers, or customer encryption keys in the sample set.Since this is just a sample, it isnot correctto conclude that no passwords, credit cards, health records, social security numbers, or customer encryption keys were ever exposed. However, if there was any exposure, based on the data weâve reviewed, it does not appear to have been widespread. We have also not had any confirmed reports of third parties discovering any of these sensitive data types on any cached pages.These findings generally make sense given what we know about traffic to Cloudflare sites. Based on our logs, the ratio of GET to POST requests across our network is approximately 100-to-1. Since POSTs are more likely to contain sensitive data like passwords, we estimate that reduces the potential exposure of the most sensitive data from 1,242,071 requests to closer to 12,420. POSTs that contain particularly sensitive information would then represent only a fraction of the 12,420 we would expect to have leaked.This is not to downplay the seriousness of the bug. For instance, depending on how a Cloudflare customerâs systems are implemented, cookie data, which would be present in GET requests, could be used to impersonate another userâs session. Weâve seen approximately 150 Cloudflare customersâ data in the more than 80,000 cached pages weâve purged from search engine caches. When data for a customer is present, weâve reached out to the customer proactively to share the data that weâve discovered and help them work to mitigate any impact. Generally, if customer data was exposed, invalidating session cookies and rolling any internal authorization tokens is the best advice to mitigate the largest potential risk based on our investigation so far.How to Understand Your RiskWe have tried to quantify the risk to individual customers that their data may have leaked. Generally, the more requests that a customer sent to Cloudflare, the more likely it is that their data would have been in memory and therefore exposed. This is anecdotally confirmed by the 150 customers whose data weâve found in third party caches. The customers whose data appeared in caches are typically the customers that send the most requests through Cloudflareâs network.Probabilistically, we are able to estimate the likelihood of data leaking for a particular customer based on the number of requests per month (RPM) that they send through our network since the more requests sent through our network the more likely a customerâs data is to be in memory when the bug was triggered. Below is a chart of the number of total anticipated data leak events from 22 September 2016 â 18 February 2017 that we would expect based on the average number of requests per month a customer sends through Cloudflareâs network:Requests per Month       Anticipated Leaks  ------------------       -----------------         200B â 300B         22,356 â 33,534         100B â 200B         11,427 â 22,356          50B â 100B          5,962 â 11,427           10B â 50B           1,118 â 5,926            1B â 10B             112 â 1,118           500M â 1B                56 â 112         250M â 500M                 25 â 56         100M â 250M                 11 â 25          50M â 100M                  6 â 11           10M â 50M                   1 â 6               < 10M                     < 1More than 99% of Cloudflareâs customers send fewer than 10 million requests per month. At that level, probabilistically we would expect that they would have no data leaked during the period the bug was present. For further context, the 100th largest website in the world is estimated to handle fewer than 10 billion requests per month, so there are very few of Cloudflareâs 6 million customers that fall into the top bands of the chart above. Cloudflare customers can find their own RPM by logging into the Cloudflare Analytics Dashboard and looking at the number of requests per month for their sites.The statistics above assume that each leak contained only one customerâs data. That was true for nearly all of the leaks we reviewed from search engine caches. However, there were instances where more data may have been leaked. The probability table above should be considered just an estimate to help provide some general guidance on the likelihood a customerâs data would have leaked.Interim ConclusionWe are continuing to work with third party caches to expunge leaked data and will not let up until every bit has been removed. We also continue to analyze Cloudflareâs logs and the particular requests that triggered the bug for anomalies. While we were able to mitigate this bug within minutes of it being reported to us, we want to ensure that other bugs are not present in the code. We have undertaken a full review of the parser code to look for any additional potential vulnerabilities. In addition to our own review, we're working with the outside code auditing firmVeracodeto review our code.Cloudflareâs mission is to help build a better Internet. Everyone on our team comes to work every day to help our customers â regardless of whether they are businesses, non-profits, governments, or hobbyists â run their corner of the Internet a little better. This bug exposed just how much of the Internet puts its trust in us. We know we disappointed you and we apologize. We will continue to share what we discover because we believe trust is critical and transparency is the foundation of that trust.
