Active/Active on Commodity Servers
September2013
InarecentposttoourLinkedInContinuousAvailabilityForum,Iaskedthequestion:
“WhyisActive/Activestuckinthemainframeworld?
“Itseems thatallofmycasestudies onactive/activesystemsintheAvailabilityDigestusemainframe
systems – HP NonStop, OpenVMS Clusters, and IBM Parallel Sysplex. There are plenty of mission-
criticalsystems usingLinux andWindows runningonlargecommodityservers thatcouldbenefitfrom
active/active, and there are bidirectional replication products that support active/active on commodity
servers (Shadowbase and GoldenGate are examples). Why has active/active technology not
penetratedthecommodity-servermarketplace?”
This was one of the most active threads we have had on the Forum, and there were many good points
made. All agreed that active/active has found a place in the mainframe world – NonStop servers,
OpenVMS clusters, and IBM Parallel Sysplex systems. However, there has not been much active/active
penetrationinthecommodityservermarketplace.
One of the few exceptions that I have come across is the use of the Stratus ftServer. It is used by S1 for
its financial-transaction switch.1 Also, payment applications such as ACI's Postilion on Windows and
Alaric's Authentic with Stratus Advanced Transaction Router on Linux support an active/active
deployment. The latter has provided greater than six 9s of business availabilityfor a customer doing over
sixbilliontransactionsper yearforthepast5 years.True,Stratusisnotexactlyacommodityserver,butit
is a fault-tolerant x86 server that runs unmodified Windows and Linux applications. It seems that
organizations willing to split for the cost of Stratus fault tolerance are willing to absorb the higher cost of
runningactive/active.
There were two main themes throughout the thread to explain the lack of use of active/active in
commodity servers.. One was the effect on system performance imposed by active/active bidirectional
data replication. The other was system architecture limitations that have to be observed in order for an
applicationtobeactive/activeready.
Itshouldbe notedthatthereareactive/activeapplications,butnotactive/activesystems.Asystem thatis
supporting active/active applications may also be supporting other applications that are using passive
backuporthatarenotbackedupatall.
Architecting an application to be active/active-ready will certainly add complexity to a project
implementation and will require additional testing before production can begin. However, if the cost of
downtime is high (in some critical applications, the hourly cost of downtime can approach or exceed six
figures), the additional cost and schedule required for an active/active implementation may be well worth
it.
1MaximizePaymentsAvailabilitywithS1Active/ActiveSoftwareandStratusftServerSystems,S1WhitePaper:2011.
http://www.availabilitydigest.com/misc/active-active_s1%20project.pdf
1
©2013SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Active/Active Bidirectional Replication Performance
ReplicatorPerformance
There was concern by some respondents that contemporary bidirectional replication products could not
support high performance. This is, indeed, a valid concern. If the replication latency (the time from when
an update is made to the source database to the time that it is made to the target database) is measured
in several seconds or even minutes, then the databases will be significantly out of synchronization. A
transactionsenttoeachmaybeprocesseddifferentlybecausethedatabasecontentsdiffer.
If the transaction capacity of the replication product cannot support the peak transaction loads, things get
even worse. The backup database copy could get hours behind the active copy and take hours to catch
upwhentheloadlessens.
This means that one must ensure that the replication product used in the active/active system has
sufficiently low replication latency and sufficiently high capacity to meet the application needs. For most
applications running on commodity servers, there are replication products that meet these important
requirements. They provide sub-second replication latencies and can support thousands of transactions
persecond.TheseproductsincludeShadowbasefromGravic,Inc.,(http://www.gravic.com/shadowbase/)
and GoldenGate from Oracle GoldenGate (http://www.oracle.com/us/products/middleware/data-
integration/goldengate/overview/index.html).
Another important parameter is the footprint imposed by the data replicator. If it consumes 50% of the
CPU capacity, it is not going to be very effective. Today’s replication products such as those mentioned
abovetypicallyhaveverysmallfootprintsrequiringonlyafewpercentofCPUcycles.
SystemLoading
Another concern was the load imposed upon the target system bythe replication of transactions from the
source system. Every transaction must update both the source database on the system processing the
transactionandmustalso updatethetarget database onthesystem backingup thesourcesystem.Also,
bothsystemsmustbeconfiguredtohandletheentiretransactionloadshouldonesystemfail.
However, this is a fact of replication backup. Even in an active/passive system in which one system is
handling all transactions but is keeping a backup database synchronized, the backup system is carrying
the database update load; and both systems must be configured to handle the entire load as only one
systemisinactiveoperationatatime.
Is there a performance difference between an active/active configuration and an active/passive
configuration?Consider the followingcomparison.Let's startwithanactive/passivesystem.Let's saythat
theproductionsystem isrunning80%loadedatpeak,andthathalfofthisisdiskactivity.Thatmeansthat
the backup system is 40% loaded due to replication disk activity (data replication has a very small CPU
footprint-itismostlydisk).Transactionsseean80%loadedhost.
If we moved to an active/active architecture, then each system is handling half of the transaction load
(40%)andhalfofthereplicationload(20%).Eachsystemis60%loaded.
Which would you rather have - an 80% loaded production system with an hour failover to its backup or
two 60% loaded production systems with instant failover? Of course, if one of the active/active servers
fails, then the remaining one is handling all 80% of the transaction load (there is no replication load),
whichisthesameastheproductionsysteminanactive/passiveconfiguration.
I think that assuming that the replication load is 50% of the transaction load is too high based on my
knowledge of current installations, but it serves to illustrate the argument that active/active beats
active/passiveeverytimeifactive/activecanbeimplemented.
2
©2013SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

Is the Application Active/Active Ready?
There are several architectural challenges to deploying an application in an active/active environment.
For current applications, one must determine if there are any impediments that must be corrected before
deployment. The modified application must be thoroughly tested to make sure that all potential problems
havebeencorrected.
For new applications, the problem is simpler. One must be aware of the architectural limitations and
ensurethattheapplicationdesignresultsinanactive/active-readyproduct.
Structuraldeficienciesintheapplicationarchitecturetobeavoidedincludethefollowing:
DataCollisions
Most active/active systems today use asynchronous replication. Replication is “under the covers” and is
transparenttotheapplication.Thisis typicallydonebyreplicatingchangesfromthetransactionlogfileon
the source system and applying these changes to the target database. Therefore, there is a lag from
when an update is made to the source system and when it is applied to the target system. This lag is
knownasreplicationlatency.
Becauseofreplicationlatency,itis possiblefortwotransactions,oneateachsystem,toupdatethesame
data item. Each system will replicate its change to the other system. Both systems will have a different
valueforthedataitem,andbotharewrong.Thisisadatacollision.
If the application can be designed to avoid data collisions, this is the optimum solution. However, if data
collisions can occur, they must be detected and resolved. These capabilities are built into most
bidirectionaldatareplicationengines.
ExclusiveOpens
If the application opens certain tables for exclusive access, these tables cannot be synchronized via data
replication. The replication engine will not be able to open the tables for writes. Great care mustbe taken
if the application is to be modified to open these tables on a non-exclusive basis as there may be
undesirable side effects. It must be understood why such tables are dedicated to one application. Are
therefunctionalreasonsforthis,orisitsimplyconservativecoding?
Memory-ResidentData
Some data structures may be memory-resident and will not be replicated by a database replication
engine. There are several solutions to this problem. One solution is to move memory-resident data to
disk. However, performance considerations may preclude this. Another solution is to build logic into the
applicationtoreplicatethisdatafrommemorytomemory.
Insomecases,theapplicationmightbeabletobechangedtoaccommodatememory-residentstructures.
For instance, if invoice numbers are assigned by incrementing an in-memory counter, multiple
active/activenodeswillassignduplicateinvoicenumbers.Thisproblem canbecorrectedbyprependinga
nodeIDtotheinvoicenumberorbyassigningblocksofinvoicenumberstodifferentnodes.
Hard-CodedParameters
Though it represents poor coding, many applications have hard-coded parameters in their source codes.
Often,thismayprecludedistributedoperation.For instance,if anodeIDor IPaddresses arehard-coded,
they cannot be changed across the nodes in an active/active application network. These parameters will
havetobereplacedwithparametersthatcanbespecifiedforeachnode.
3
©2013SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

SequentialEventProcessing
In some applications, inputs must be processed in the same order as they were received. An example of
this sort of application is a power-control system. Whether the tripping of a circuit breaker caused the
transformer to be overloaded or the overloaded transformer caused the circuit breaker to trip is of
paramountimportancetotheresolutionofthepoweroutage.
Thesesorts of events cannotbeprocessedbyindependentnodes unless there is intelligenteventrouting
orunlesssomesynchronizationmechanismcanbeimplemented.
Networking
The active/active network must be able to reroute transactions from a failed node to one or more
surviving nodes in the event of a node failure. Rerouting requires two capabilities – detecting a node
failureandnetworkrerouting.
With respect to node-failure detection, unlike a single system in which the node fails and simply must be
restored, a node failure in an active/active system requires immediate action – namely, rerouting users to
surviving nodes. Therefore, there must be an effective mechanism for one node to know that another
node has failed. This is often done via heartbeats between the nodes. However, care must be taken to
avoid a tug-of-war in which each node thinks that the other node is down; and both try to take over the
othernode’susers.
Onceanodefailureis determined,theremustbeameans totransfer transactions from thefailed nodeto
surviving nodes. There are manyways to do this.2 Oneis for the clients to be intelligent enough to detect
the failure and to switch to backup IP addresses to which to send further transactions. Another technique
is for the network to be intelligent enough to detect link failures and to reroute further traffic over an
alternateroute.Stillanother is tousevirtualIPaddresses andtohaveasurviving nodeadvertisethatitis
nowtheownerofthevirtualaddressofafailednode.
ConnectionsandSessions
If a client has to be rerouted, it is ideal that it does not lose its connection or session. One solution is to
provide intelligence in the client so that it can reconnect automatically to a surviving node and log in to
create a new session. Another solution is to have all clients open two connections and to establish two
sessions,oneonthe primarynodeand one onabackupnode.Inthis case,if aclientfinds thatithas lost
thelinktoitsprimarynode,itcansimplybeginsendingtransactionstoitsbackupnode.
If connections or sessions are lost, a human user may have to log onto the system again. This impacts
thefault-transparencybenefitaffordedbyactive/activeapplications.
LocalNetworkingContext
Typically, communication context is stored in memory. In this case, it is not globally accessible even
thoughitisneededbythedistributedapplications.
An example of such context is the description of a connection. If a message requiring a response is sent
toaremotesystem asynchronouslysothattheresponseis returnedonaseparateconnection, itmaynot
bepossiblefortherespondingsystemtoknowtowhichnodetheresponseshouldbesent.
2AchievingFastFailoverinActive/ActiveSystems–Parts1and2,AvailabilityDigest;August,September2009.
http://www.availabilitydigest.com/public_articles/0408/user_redirection.pdf
http://www.availabilitydigest.com/public_articles/0409/user_redirection_2.pdf
4
©2013SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

This is a particular problem if the remote system is that of another organization. The remote system
cannotbemodifiedtocorrectthissituation,andsomeothersolutionmustbefound.
BatchProcessing
Batch processes are expected to run only in one node. In a distributed environment, provision must be
made to designate a node in which batch processing will be performed. In some cases, batches are
scheduledtorunduringabatchwindow.Inthesecases,itiseasytoassignbatchjobstoaspecificnode.
However, in other cases, batches are run when some application status is reached. The application
shouldbemodifiedtoallowthistooccurinonlyonenode.
Sometimes, application decisions are made based on the status of batch jobs. For instance, the
application may not provide certain functions while a batch job is running in order to control processor
loading.This creates noproblem.However,inother cases,globaldecisions mustbemadewhichdepend
uponbatchstatus.Inthesecases,batchstatusmustbemadeavailableglobally.
Recovery
When a failed node returns to service, it must be resynchronized with one of the active nodes. This can
be accomplished via an online copy that updates the recovered node’s database from an active node
while the active node is still processing transactions. Alternatively, the changes that occurred during the
failure can be queued on an active node and flushed to the recovering system. It may be desirable to
implement both procedures. Normally, the change queue will be used to recover a failed system. But if
the system has been down for so long that it will be faster to copy the database rather than to drain a
largequeueofchanges,thentheonlinecopywillbeused.
ApplicationManagement
In an active/active system, applications are running in a distributed environment. The application
management tool currently being used to monitor and configure the system may not be extendable to a
networkedenvironment.Inthiscase,anewdistributed-managementtoolwillhavetobeselected.
Furthermore, there must be a means to distribute configuration changes to the nodes in the application
network without taking down the system. Configuration changes can range from parameter changes to
application upgrades.Configuration parameters mayhave to include parameters whose values are node-
specific.
Sizzling-Hot Standby
If an application cannot be architected to be active/active, it maystill be possible to obtain the availability
of an active/active architecture without having to modify the application. This is accomplished by
employing two systems that are up and running with all applications active and with bidirectional
replication configured, but all transactions are sent to only one system. The backup system can, of
course,beusedforqueriesandreports.
In this case, the application is not running in a distributed environment. It is processing all transactions
just as if it were an isolated system. The onlydifference is that it is replicating its database to the backup
system.
Because the backup system has all of its applications up and running, it is available to take over
processing immediately. Should the primary system fail, all that needs to be done is to reroute
transactionstothestandbysystem.
Even more important, the standby system is known to be working (it can be easily tested by sending it
periodictesttransactions)sothatfailoverwillbereliable.Failoverfaultsareeliminated.
5
©2013SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com

There are still some application concerns as listed above, but most are irrelevant. Data collisions are
eliminated. However, data maintained in memory will not be replicated, and a distributed application
managementframeworkisstillrequired.
Summary
Converting an existing application or designing a new application to run in a distributed active/active
environment is not a trivial task. It seems that the complexity of this task has dissuaded organizations
frombenefitingfromtheextremeavailabilityofactive/activearchitectures.Onlyifthereisaninvestmentin
mainframe-type systems such as HP NonStop, OpenVMS clusters, or IBM Parallel Sysplex do
organizationsmakethisinvestment.
However, there are many applications using commodity Windows and Linux servers that suffer major
costs due to downtime. The common method today to protect these applications is to run them in a
cluster. However, clusters are difficult to configure and manage and typically take several minutes to fail
over – much longer if the common database has been corrupted by the failure of the active server.
Furthermore, clusters cannot be distributed geographically – all of the servers in the cluster must be
collocated.
Though it may be difficult (and perhaps impossible) to modify existing applications to run in a distributed
environment, organizations should consider implementing new mission-critical applications to run
active/active. The savings in downtime costs may well overwhelm the cost of some architectural
complexities.
6
©2013SombersAssociates,Inc.,andW.H.Highleyman
Fordiscussion,contacteditorest.com