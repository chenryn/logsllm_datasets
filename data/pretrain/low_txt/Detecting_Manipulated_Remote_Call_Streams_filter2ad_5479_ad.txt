### Efficiency Measurements

Our efficiency measurements are conducted using the UNIX utility `time` to measure the execution time of each application in a simulated environment without any model in operation. This baseline measurement indicates the delay due to the simulated network transit overhead, which is equivalent to the runtime conditions in a remote execution environment. We then enable checking and various optimizations to measure the overhead introduced by our checking agent.

- **NFA Model**: We find that the NFA (Non-deterministic Finite Automaton) model operates efficiently.
- **Bounded PDA Model**: The bounded PDA (Pushdown Automaton) model, however, is disappointingly slow. However, the inclusion of null calls in the bounded PDA model significantly improves its efficiency.

### 4.3 The NFA Model

We evaluate the models of six test programs with respect to precision and efficiency. Our baseline analyzer includes renaming, argument recovery, dead automaton removal, and single-edge replacement. Using the NFA model, we compare the results of several null call placement strategies against this baseline, considering the trade-off between performance and efficiency due to null call insertion.

**Null Call Placement Strategies:**
1. **No Calls Inserted**: No null calls are inserted.
2. **Fan-in ≥ 10**: Null calls are inserted at the entry point of every function with a fan-in of 10 or more.
3. **Fan-in ≥ 5**: Null calls are inserted at the entry point of every function with a fan-in of 5 or more.
4. **Fan-in ≥ 2**: Null calls are inserted at the entry point of every function with a fan-in of 2 or more.

We have also tested three other placement strategies but found that they occasionally introduce an excessive number of null calls, overwhelming the network:
- Adding calls to all functions on recursive cycles.
- Adding calls to all functions in specific configurations.

### Precision Improvements

Figure 12 shows the precision improvements with renamed call sites and argument recovery. Initially, it may seem counter-intuitive that argument recovery reduces imprecision more than renaming. However, since an attacker cannot manipulate a recovered argument, system calls that were dangerous with unknown arguments become non-threatening with argument recovery.

### Bounded PDA Model Analysis

We analyzed the bounded PDA model for `procmail` with stack bounds from 0 to 10. Figure 13 illustrates the average branching factors of our PDA at varying levels of null call instrumentation and bounded stack depth. Figures 14 and 15 show the run-time overheads of these models at two different time scales.

**Key Observations:**
- **Null Call Insertion**: Surprisingly, the added precision from null calls decreases run-time overheads. In some cases, the bounded-stack PDA with null call instrumentation is nearly as efficient as the NFA model but with higher precision.
- **Stack Size Impact**: Increasing the stack size has a similar effect. Up to a stack bound of size 6, the model's efficiency improves. Beyond this, the cost of increased state begins to dominate.

### 4.5 Discussion on Metrics

Measuring precision with the dynamic average branching factor metric has limitations:
1. **Sequence of System Calls**: An attack likely consists of a sequence of system calls, not a single isolated call.
2. **Safe System Calls**: An attacker could use "safe" system calls to reach a portion of the model that accepts an attack sequence. These safe edges should not mask the potential for an attack downstream.

**Proposed Metric:**
- **Average Adversarial Opportunity Metric**: Combines static and dynamic measurements. First, the automaton modeling the application is composed with a set of attack automata to identify all model states with attack potential. Then, the monitor counts the dangerous states encountered during runtime.

### 5 Comparison with Existing Work

We measured the dynamic average branching factor and execution overhead for comparison with the earlier work of Wagner and Dean. We compared only the NFA model, as it is the only model common to both studies. They analyzed four programs, two of which, `procmail` and `finger`, intersect with our experimental set. Although we do not know the version of `finger` used by Wagner and Dean, we compared their numbers against our analysis of GNU `finger`.

**Key Findings:**
- **Discrepancies**: There is a significant discrepancy between their reported precision values and ours. Upon investigation, it appears that our approach, which includes call site renaming, argument recovery, and single-edge replacement, provides more accurate and precise results.

### Figures

- **Figure 12**: Precision improvements with renamed call sites and argument recovery.
- **Figure 13**: Effect of stack depth and null call insertion on PDA precision.
- **Figure 14**: Effect of stack depth and null call insertion on PDA run-time overhead (7-second time scale).
- **Figure 15**: Effect of stack depth and null call insertion on PDA run-time overhead (700-second time scale).
- **Figure 16**: The socket model in Solaris libc.

This revised text aims to be more structured, clear, and professional, providing a better flow and easier understanding of the content.