### Benefits of Our Framework
Our framework offers numerous features that can be utilized without modifying the binaries of existing applications. However, advanced users with root access to their devices can install our modifications directly, eliminating the need to wait for an official update or to make significant changes such as flashing the device.

A key feature of our solution is its maintenance of binary compatibility, allowing it to potentially protect existing applications as well. Our modifications are limited to private final methods within the Java Framework, ensuring that they do not disrupt modularity or conflict with developer code. This approach would immediately address the vulnerabilities we identified in our studies. However, there are some rare, pathological cases that must be considered if our system were applied to all applications without discrimination. These issues and the potential trade-offs are discussed in Appendix B.1.

### Limitations
We reached out to 78 developers to participate in interviews about the SSL issues identified in their applications. Only 14 developers agreed to be interviewed, while the others either did not respond or declined due to company policies prohibiting discussions about confidential information. Despite the small number of participants, we were able to identify a wide range of causes leading to serious security issues in app development and SSL. Following the developer study, we conducted a large-scale code analysis and found no additional issues that would necessitate further interviews.

### Conclusion
In this paper, we advocate for a new approach to handling SSL connections on mobile platforms, given the severe problems identified in previous research. To understand the root causes of these issues, we conducted a study of 1,009 iOS apps to determine if iOS faces similar problems as Android. We also surveyed developer forums and conducted a developer study. Based on our findings, we propose a new way for developers to interact with SSL: instead of requiring them to work with SSL at the code level, we designed and implemented a framework that allows them to secure their network connections through configuration.

Our solution prevents developers from inadvertently or deliberately compromising SSL, while providing easy access to additional features such as pinning and the secure use of self-signed certificates. We evaluated our proposal with existing Android apps and demonstrated that all use-cases can be implemented more easily and securely using our approach. The feedback from developers was overwhelmingly positive.

### Future Work
Several important areas for future work include:
- **Alternative Certificate Validation Strategies**: Our framework supports alternative validation strategies like Certificate Transparency and Accountable Key Infrastructure (AKI). We are currently developing plugins to implement these promising solutions. Given the ongoing research in this area, our framework can facilitate the deployment and adoption of these approaches.
- **Application to Existing Apps**: While we currently recommend our solution for new or updated apps, it is theoretically possible to apply our modifications to all existing apps, thus fixing all broken SSL implementations with a single update. In future work, we will investigate how to discover and mitigate potential side effects in apps that have made benign code modifications to the SSL validation process. For more details, see Appendix B.

### Acknowledgments
We would like to thank all the developers who supported our research, openly discussed security issues in their apps, and provided the necessary background to design our solution.

### References
[1] P. P. F. Chan, L. C. K. Hui, and S. M. Yiu. Droid-Checker: Analyzing Android Applications for Capability Leaks. In WISEC ’12: Proceedings of the Fifth ACM Conference on Security and Privacy in Wireless and Mobile Networks. ACM Press, Apr. 2012.
[2] L. Davi, A. Dmitrienko, A. Sadeghi, and M. Winandy. Privilege Escalation Attacks on Android. In Proceedings of the 13th International Conference on Information Security, pages 346–360, 2011.
[3] P. Eckersley. Sovereign Key Cryptography for Internet Domains. https://git.eff.org/?p=sovereign-keys.git;a=blob;f=sovereign-key-design.txt;hb=master.
[4] A. Egners, B. Marschollek, and U. Meyer. Messing with Android’s Permission Model. In Proceedings of the IEEE TrustCom, pages 1–22, Apr. 2012.
[5] S. Fahl, M. Harbach, T. Muders, L. Baumgärtner, B. Freisleben, and M. Smith. Why Eve and Mallory Love Android: An Analysis of Android SSL (In)Security. In Proceedings of the 19th ACM Conference on Computer and Communications Security. ACM Press, Oct. 2012.
[6] A. Felt, E. Ha, S. Egelman, A. Haney, E. Chin, and D. Wagner. Android Permissions: User Attention, Comprehension, and Behavior. In Proceedings of the Eighth Symposium on Usable Privacy and Security. ACM Press, 2012.
[7] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner. Android permissions Demystified. In Proceedings of the 18th ACM Conference on Computer and Communications Security. ACM Press, Oct. 2011.
[8] M. Georgiev, S. Iyengar, S. Jana, R. Anubhai, D. Boneh, and V. Shmatikov. The Most Dangerous Code in the World: Validating SSL Certificates in Non-Browser Software. In Proceedings of the 2012 ACM Conference on Computer and Communications Security. ACM Press, Oct. 2012.
[9] P. Hoffman and J. Schlyter. The DNS-Based Authentication of Named Entities (DANE) Protocol for Transport Layer Security (TLS): TLSA. https://tools.ietf.org/html/rfc6698, Aug. 2012.
[10] T. Hyun-Jin Kim, L.-S. Huang, A. Perrig, C. Jackson, and V. Gligor. Accountable Key Infrastructure (AKI): A Proposal for a Public-Key Validation Infrastructure. In Proceedings of the 2013 Conference on World Wide Web, to appear, 2013.
[11] B. Laurie, A. Langley, and E. Kasper. Certificate Transparency. Network Working Group Internet-Draft, v12, work in progress. http://tools.ietf.org/html/draft-laurie-pki-sunlight-12, Apr. 2013.
[12] M. Marlinspike. TACK: Trust Assertions for Certificate Keys. http://tack.io/draft.html.
[13] M. Marlinspike. SSL And The Future Of Authenticity. In BlackHat USA 2011, 2011.
[14] P. Saint-Andre and J. Hodges. RFC 6125, Mar. 2011.
[15] R. Schlegel, K. Zhang, X. Zhou, M. Intwala, and e. al. Soundcomber: A Stealthy and Context-aware Sound Trojan for Smartphones. Proceedings of the Network and Distributed System Security Symposium, 2011.
[16] J. Sunshine, S. Egelman, H. Almuhimedi, N. Atri, and L. Cranor. Crying Wolf: An Empirical Study of SSL Warning Effectiveness. In Proceedings of the 18th USENIX Security Symposium, pages 399–416, 2009.
[17] T. Vidas, D. Votipka, and N. Christin. All Your Droid Are Belong To Us: A Survey Of Current Android Attacks. In Proceedings of the 5th USENIX Workshop on Offensive Technologies, pages 10–10, 2011.
[18] D. Wendlandt, D. G. Andersen, and A. Perrig. Perspectives: Improving SSH-Style Host Authentication with Multi-Path Probing. In USENIX 2008 Annual Technical Conference on Annual Technical Conference, ATC’08, pages 321–334, Berkeley, CA, USA, 2008. USENIX Association.
[19] Y. Zhou and X. Jiang. Dissecting Android Malware: Characterization and Evolution. In Security and Privacy (SP), 2012 IEEE Symposium on, pages 95–109, 2012.

### Appendix

#### A. iOS Survey Details
Several of the vulnerable apps we identified were created using popular programming frameworks. Since any bug introduced by such a framework could affect a large number of apps, we decided to take a closer look at these frameworks. During our analysis, we identified two cross-platform mobile application SDKs and an iOS networking wrapper library that generate code with vulnerable SSL certificate validation.

- **MKNetworkKit**: MKNetworkKit is a networking wrapper library for iOS designed to be easy to use and simplify the default iOS networking stack. It is popular among developers who face issues with iOS's built-in networking APIs. However, the library fails to properly validate SSL server certificates.
- **Titanium Framework**: The Titanium cross-platform mobile application SDK is a JavaScript-based platform that enables developers to write mobile apps in JavaScript and automatically translates them into native mobile apps. While it generates secure SSL code for Android, SSL certificate validation for iOS apps is turned off. This could affect more than 30,000 apps built with the framework.
- **PhoneGap**: PhoneGap is a free, open-source framework for developing mobile apps for seven platforms, including Android and iOS, using HTML, CSS, and JavaScript. It contains dedicated classes for data transfer that include customized SSL verification code. For both Android and iOS, the framework produces code that effectively turns SSL certificate validation off. If developers do not manually check the generated code, they may not be aware of the problem. According to PhoneGap, more than 23,000 apps could be affected.

#### B. Transition Period/Cold-Turkey Update
Given the high number of users at risk and the slow or non-existent response time from developers in fixing vulnerabilities, it might be worth considering activating our framework not only for new apps but also for all existing apps. This would instantly fix all instances of apps with broken SSL. There are two ways to deploy our framework in such a case:

1. **Override Custom SSL Code**: This approach would work for 98% of the 13,500 apps we analyzed and fix all the broken ones. However, the remaining 2% would lose important functionality (such as custom pinning) until the developers update their apps. They would still have standard certificate validation, but their custom improvements would be disabled.
2. **Combine Framework and App Validation**: This approach would combine our framework's validation code with the app's custom SSL validation code. The rule would be that a connection is established only if both validation methods accept a certificate. If one of the two validation processes rejects a certificate, a warning message is shown to the user. The main issue is that users could potentially see two warning messages for the same connection. However, our code analysis has shown that these cases should be very rare when no MITM attacker is present, making this an acceptable trade-off to fix many vulnerabilities.

#### B.1 Pathological Cases
There are some pathological cases that need to be considered when activating our framework for existing apps:

- **IP Addresses Instead of Hostnames**: The current Android API allows URLs and socket connections to be established with IP addresses instead of hostnames. Using an IP address can hinder effective hostname verification, as common names for SSL certificates typically are fully qualified domain names. However, there are certificate authorities that issue certificates with IP addresses as the common name. We analyzed 13,500 Android apps and found that 1.21% included IP address-based URLs, pointing to 118 different hosts. Only one of the 30 SSL-supported IP addresses used a certificate for which hostname verification did not fail, but it was self-signed, indicating that none of the IP address-based apps used SSL correctly.
- **Custom Sockets**: If an app implements a custom application layer socket that resolves hostnames itself, it may rely on the SSLSocketFactory to create an SSL-secured socket based on only an IP, but handle hostname verification later. With our modifications, this implementation would break because our modified SSLSocketFactory would attempt to verify the hostname (in this case, the IP address) during the handshake and fail. While it is uncommon to not delegate hostname resolution to the operating system, such implementations would need to be updated to work with our modifications.