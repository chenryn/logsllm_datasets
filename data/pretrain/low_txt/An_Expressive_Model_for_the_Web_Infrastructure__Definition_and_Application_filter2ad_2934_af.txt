### Implementation Details
The implementation follows a straightforward approach as outlined in Section IV. The script `script_RP_index`, issued by the Relying Party (RP), includes a script that is, in reality, loaded from the Login Provider Organization (LPO). Specifically, this script creates the Cross-Origin IFrame (CIF) and the Login Dialog (LD) iframes/subwindows, whose contents (scripts) are loaded from the LPO.

### Formal Security Properties
The security properties for BrowserID, informally introduced in Section V-A, are formally defined as follows:

1. **Service Token Creation**: Every RP service token \((n, i)\) recorded at an RP is created by the RP as a result of a unique HTTPS POST request \(m\) with a valid CAP for ID \(i\). We refer to \(m\) as the request corresponding to \((n, i)\).

2. **Mozilla Recommendations**:
   - Protect against Cross-site Request Forgery (CSRF) by checking the Origin header, which is always set in our model.
   - Verify CAPs on the server rather than in the browser.
   - Check if the CAP is issued for the correct RP.
   - Verify SSL certificates.

**Definition 7**: Let BID be a BrowserID web system. BID is considered secure if, for every run \(\rho\) of BID, every state \((S_j, E_j)\) in \(\rho\), every \(r \in \text{RP}\), and every RP service token of the form \((n, i)\) recorded in \(r\) in the state \(S_j(r)\), the following two conditions are satisfied:

- **Condition A**: If \((n, i)\) is derivable from the attacker's knowledge in \(S_j\) (i.e., \((n, i) \in dN_{\text{attacker}}(S_j(\text{attacker})))\), then the browser owning \(i\) is fully corrupted in \(S_j\), i.e., the value of `isCorrupted` is `FULLCORRUPT`.

- **Condition B**: If the request corresponding to \((n, i)\) was sent by some \(b \in \text{B}\) which is honest in \(S_j\), then \(b\) owns \(i\).

### Security of the Fixed System
We define a fixed BrowserID web system BID as one incorporating the fixes proposed in Section V-B. The following theorem states that such a system satisfies the security properties (A) and (B).

**Theorem 1**: Let BID be a fixed BrowserID web system. Then, BID is secure.

The complete proof with all details is provided in the full version of this paper [14]. Due to space limitations, we provide a rough sketch of the proof for security property (A):

- **Assumption and Contradiction**: Assume that (A) is not satisfied and lead this to a contradiction.
- **Lemmas**: We first prove a sequence of twelve lemmas. For example, one lemma shows that in every run of BID, if a CAP \(c\) is created by `script_LPO_ld`, then the origin for which \(c\) is issued is the origin of the script that receives the `postMessage` containing \(c\) (refer to Figure 3).
- **Cases**: Using these lemmas, we distinguish between two main cases to lead the assumption that (A) does not hold to a contradiction: 
  - The attacker, in state \(S_j\), knows the key used to encrypt the service token \((n, i)\) recorded in and issued by \(r\).
  - The attacker, in state \(S_j\), does not know the key used to encrypt the service token \((n, i)\) recorded in and issued by \(r\).

### Related Work
Early work in the direction of formal web security analysis includes Kerschbaum [21], who formally analyzed a Cross-Site Request Forgery (CSRF) protection proposal using a simple model expressed in Alloy, a finite-state model checker [19].

In seminal work, Akhawe et al. [2] initiated a more general formal treatment of web security, again using the Alloy modeling language. Inspired by this, Bansal et al. [5], [6] built the WebSpi model for the web infrastructure, encoded in the ProVerif modeling language, a specialized tool for cryptographic protocol analysis [8]. Both models have successfully been applied to find attacks in standards and web applications.

Our work complements these models: while the above models support fully automated analysis, our model is more comprehensive and accurate but not directly suitable for automation. We believe both approaches—automated and manual analysis—are valuable. Automated analysis is highly desirable due to its efficiency, but it may miss important problems due to less accurate models. Manual approaches, though laborious and error-prone, can provide a more detailed and accurate model, summarizing and condensing relevant aspects of various web standards and specifications.

The BrowserID system has been analyzed using the AuthScan tool developed by Bai et al. [4], focusing on the automated extraction of a model from a protocol implementation. Their analysis identified only two trivial attacks, such as replaying unencrypted CAPs. Other works on web-based single sign-on systems like SAML, OpenID, and OAuth (e.g., [3], [7], [11], [15], [17], [22], [26]–[29]) do not use a model of the web infrastructure.

In [16], [25], [26], [29], problematic usage of `postMessages` and the OpenID interface are discussed, but they do not consider BrowserID or formal models. Bohannon and Pierce [9] propose a formal model of a web browser core, and Börger et al. [10] present an approach for analyzing web application frameworks, focusing on the server side.

### Conclusion
We presented an expressive model of the web infrastructure and web applications, the most comprehensive model for the web infrastructure to date. It contains many security-relevant features and closely mimics web standards and specifications. This model serves as a solid basis for the analysis of a broad range of web standards and applications.

In our case study, we analyzed the BrowserID system, found several critical attacks, proposed fixes, and proved the security of the fixed system for the secondary Identity Provider (IdP) case. Future work includes incorporating further features such as subdomains, cross-origin resource sharing, and finer-grained settings for cookie paths and domains. Our model could also serve as a reference for automated approaches, where one could extend existing methods or develop new ones, such as theorem provers. Additionally, we plan to apply our model to other web applications and standards.

### Acknowledgements
The first author is supported by the Studienstiftung des Deutschen Volkes (German National Academic Foundation).

### References
[1] M. Abadi and C. Fournet. Mobile Values, New Names, and Secure Communication. In Proceedings of the 28th ACM Symposium on Principles of Programming Languages (POPL 2001), pages 104–115. ACM Press, 2001.

[2] D. Akhawe, A. Barth, P. E. Lam, J. Mitchell, and D. Song. Towards a Formal Foundation of Web Security. In Proceedings of the 23rd IEEE Computer Security Foundations Symposium, CSF 2010, pages 290–304. IEEE Computer Society, 2010.

[3] A. Armando, R. Carbone, L. Compagna, J. Cuéllar, and M. L. Tobarra. Formal analysis of SAML 2.0 web browser single sign-on: breaking the SAML-based single sign-on for Google Apps. In V. Shmatikov, editor, Proceedings of the 6th ACM Workshop on Formal Methods in Security Engineering, FMSE 2008, pages 1–10. ACM, 2008.

[4] G. Bai, J. Lei, G. Meng, S. S. Venkatraman, P. Saxena, J. Sun, Y. Liu, and J. S. Dong. AUTHSCAN: Automatic Extraction of Web Authentication Protocols from Implementations. In Proceedings of the 20th Annual Network and Distributed System Security Symposium (NDSS’13). The Internet Society, 2013.

[5] C. Bansal, K. Bhargavan, A. Delignat-Lavaud, and S. Maffeis. Keys to the Cloud: Formal Analysis and Concrete Attacks on Encrypted Web Storage. In D. A. Basin and J. C. Mitchell, editors, Principles of Security and Trust - Second International Conference, POST 2013, volume 7796 of Lecture Notes in Computer Science, pages 126–146. Springer, 2013.

[6] C. Bansal, K. Bhargavan, and S. Maffeis. Discovering Concrete Attacks on Website Authorization by Formal Analysis. In S. Chong, editor, 25th IEEE Computer Security Foundations Symposium, CSF 2012, pages 247–262. IEEE Computer Society, 2012.

[7] J. Bellamy-McIntyre, C. Luterroth, and G. Weber. OpenID and the Enterprise: A Model-Based Analysis of Single Sign-On Authentication. In Proceedings of the 15th IEEE International Enterprise Distributed Object Computing Conference, EDOC 2011, pages 129–138. IEEE Computer Society, 2011.

[8] B. Blanchet. An Efficient Cryptographic Protocol Verifier Based on Prolog Rules. In Proceedings of the 14th IEEE Computer Security Foundations Workshop (CSFW-14), pages 82–96. IEEE Computer Society, 2001.

[9] A. Bohannon and B. C. Pierce. Featherweight Firefox: formalizing the core of a web browser. In Proceedings of the 2010 USENIX conference on Web application development, pages 11–11. USENIX Association, 2010.

[10] E. Börger, A. Cisternino, and V. Gervasi. Contribution to a Rigorous Analysis of Web Application Frameworks. In J. Derrick, J. A. Fitzgerald, S. Gnesi, S. Khurshid, M. Leuschel, S. Reeves, and E. Riccobene, editors, Abstract State Machines, Alloy, B, VDM, and Z - Third International Conference, ABZ 2012, volume 7321 of Lecture Notes in Computer Science, pages 1–20. Springer, 2012.

[11] S. Chari, C. S. Jutla, and A. Roy. Universally Composable Security Analysis of OAuth v2.0. IACR Cryptology ePrint Archive, 2011:526, 2011.

[12] Cross-Origin Resource Sharing - W3C Recommendation 29 January 2013. Available at http://www.w3.org/TR/2013/CR-cors-20130129/.

[13] N. Durgin, P. Lincoln, J. Mitchell, and A. Scedrov. Multiset rewriting and the complexity of bounded security protocols. Journal of Computer Security, 12(2):247–311, 2004.

[14] D. Fett, R. Küsters, and G. Schmitz. An Expressive Model for the Web Infrastructure: Definition and Application to the BrowserID SSO System. Technical Report arXiv:1403.1866, arXiv, 2014. Available at http://arxiv.org/abs/1403.1866.

[15] T. Groß. Security Analysis of the SAML Single Sign-on Browser/Artifact Profile. In 19th Annual Computer Security Applications Conference (ACSAC 2003), pages 298–307. IEEE Computer Society, 2003.

[16] S. Hanna, R. Shin, D. Akhawe, A. Boehm, P. Saxena, and D. Song. The emperor’s new APIs: On the (in)secure usage of new client-side primitives. In Proceedings of the 4th Web 2.0 Security and Privacy Workshop (W2SP), 2010, 2010.

[17] S. M. Hansen, J. Skriver, and H. R. Nielson. Using static analysis to validate the SAML single sign-on protocol. In C. Meadows, editor, Proceedings of the POPL 2005 Workshop on Issues in the Theory of Security, WITS 2005, pages 27–40. ACM, 2005.

[18] HTML5, W3C Candidate Recommendation. Dec. 17, 2012.

[19] D. Jackson. Alloy: A new technology for software modeling. In J.-P. Katoen and P. Stevens, editors, Tools and Algorithms for the Construction and Analysis of Systems, 8th International Conference, TACAS 2002, volume 2280 of Lecture Notes in Computer Science, page 20. Springer, 2002.

[20] C. Karlof, U. Shankar, J. D. Tygar, and D. Wagner. Dynamic pharming attacks and locked same-origin policies for web browsers. In P. Ning, S. D. C. di Vimercati, and P. F. Syverson, editors, Proceedings of the 2007 ACM Conference on Computer and Communications Security, CCS 2007, pages 58–71. ACM, 2007.

[21] F. Kerschbaum. Simple cross-site attack prevention. In Third International Conference on Security and Privacy in Communication Networks and the Workshops, SecureComm 2007, pages 464–472. IEEE Computer Society, 2007.

[22] A. Kumar. Using automated model analysis for reasoning about security of web protocols. In R. H. Zakon, editor, 28th Annual Computer Security Applications Conference, ACSAC 2012, pages 289–298. ACM, 2012.

[23] Mozilla Identity Team. Persona. Mozilla Developer Network. Last visited May 1, 2013. https://developer.mozilla.org/en/docs/persona.

[24] OpenID Foundation website. http://openid.net.

[25] S. Son and V. Shmatikov. The Postman Always Rings Twice: Attacking and Defending postMessage in HTML5 Websites. In 20th Annual Network and Distributed System Security Symposium, NDSS 2013, San Diego, California, USA, February 24-27, 2013. The Internet Society, 2013.

[26] P. Sovis, F. Kohlar, and J. Schwenk. Security Analysis of OpenID. In Sicherheit, volume 170 of LNI, pages 329–340. GI, 2010.

[27] S.-T. Sun and K. Beznosov. The devil is in the (implementation) details: an empirical analysis of OAuth SSO systems. In T. Yu, G. Danezis, and V. D. Gligor, editors, ACM Conference on Computer and Communications Security, CCS’12, pages 378–390. ACM, 2012.

[28] S.-T. Sun, K. Hawkey, and K. Beznosov. Systematically breaking and fixing OpenID security: Formal analysis, semi-automated empirical evaluation, and practical countermeasures. Computers & Security, 31(4):465–483, 2012.

[29] R. Wang, S. Chen, and X. Wang. Signing me onto your accounts through Facebook and Google: A traffic-guided security study of commercially deployed single-sign-on web services. In IEEE Symposium on Security and Privacy (S&P 2012), 21-23 May 2012, San Francisco, California, USA, pages 365–379. IEEE Computer Society, 2012.

[30] R. Wang, S. Chen, X. Wang, and S. Qadeer. How to shop for free online - security analysis of cashier-as-a-service based web stores. In 32nd IEEE Symposium on Security and Privacy, S&P 2011, pages 465–480. IEEE Computer Society, 2011.

[31] Web Storage - W3C Recommendation 30 July 2013. http://www.w3.org/TR/2013/REC-webstorage-20130730/.

[32] whatwg.org. Fetch. http://fetch.spec.whatwg.org/.