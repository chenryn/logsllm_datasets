### Extra Parity Bits Compared to SECDED

In high-performance, high-reliability, and expensive systems, single symbol correcting, double symbol detecting (SSCDSD, also known as Chipkill) coding is used to tolerate up to single chip failures. However, the standard 4-bit symbol Chipkill code used today can only support x4 DRAM chips [28]. To use x8 DRAM, one data access must be split into two, which significantly impacts performance. Since entire chip failures are rare, Chipkill is considered overkill in most systems today [28].

### Comparison with Past Works

Several past works have proposed stronger memory reliability, but most either do not improve on-die ECC or incur overheads and require changes to the standard protocol. Table III compares the COMET schemes with some related works.

- **XED [28]**: Proposes using error detection within each DRAM die and exposing the detection result to the in-controller code for correction. However, it assumes that on-die codes implemented in today’s DRAM have guaranteed double-error detection capability, while in most known cases [4], the on-die code only guarantees single-error correction. Using the same code for multi-bit error detection will not be effective as the code would miscorrect. Additionally, it does not support silent SBE correction within DRAMs, which is desired by DRAM vendors.
  
- **DUO [15]**: Eliminates on-die SBE correction and uses those additional bits for stronger in-controller protection. This makes it unusable for DRAM vendors to improve yield and requires non-negligible changes to existing memory protocols.

- **Minimal Aliasing SEC [32]**: Highlights the aliasing problem in SEC codes and provides a construction technique that results in minimal aliasing. However, their code still results in SDCs (average ~5 percentage points reduction in SDC probability compared to 20 random SEC codes) when paired with in-controller SECDED, unlike COMET, which completely eliminates SDCs by carefully steering the miscorrected bit.

- **PAIR [21]**: Uses on-die SECDED, requiring N on-die ECC decoding cycles for xN DRAM. It ensures that each DQ bit comes from a separate codeword, incurring significant latency overhead and making it infeasible for larger data widths (x16/x32). It also requires an additional signal to transfer multi-bit error detection information.

- **Bamboo-ECC [24]**: Uses large ECC symbols and codewords to provide stronger protection but incurs performance overhead.

- **ArchShield [29]**: Provides protection against single-bit scaling induced errors but requires storing fault maps within the DRAMs, which need to be updated in-field using a Built-In Self Test (BIST) engine.

- **CiDRA [36]**: Proposes using on-die ECC to provide protection against multi-bit failures but requires large SRAM overheads, making its usage prohibitive.

### Accommodating Wider Data Widths

As mentioned in Sections IV-A and V-A, with 8 bits of parity for 128 bits of dataword, SEC-COMET (SEC-COMET-DBC) construction works up to per-chip beat width of 64 (16) bits. For wider interfaces, COMET cannot avoid SDCs or correct DBEs. To enable COMET, the 64-bit SECDED dataword must be formed using multiple 128-bit SEC datawords. Therefore, within the DRAM chip, every 16 bits of the 64-bit data transferred needs to be part of a different 128-bit SEC dataword. Thus, a single write or read command would require multiple rounds of on-die SEC encoding and decoding.

During a read/write operation, an entire DRAM row gets activated into the row buffer. The size of a DRAM row is usually a few kBs and contains multiple SEC datawords. Hence, to enable COMET for wider per-chip beat widths, the multiple on-chip encoding and decoding can be done in parallel without requiring multiple activations of DRAM rows.

### Conclusion

Aggressive technology scaling in modern DRAMs is leading to a rapid increase in single-cell DRAM error rates. As a result, DRAM manufacturers have started adopting on-die ECC mechanisms to achieve reasonable yields. The commonly used on-die SEC ECC scheme interacts with in-memory controller SECDED ECC, causing silent data corruption in >25% of double-bit-error cases. To prevent this, we introduce COllaborative Memory ECC Technique (COMET), a mechanism to efficiently design the on-die SEC ECC or in-controller SECDED ECC that steers the miscorrection to guarantee no silent data corruption happens when a DBE occurs inside the DRAM.

We develop the SEC-COMET-DBC on-die ECC code and a collaborative correction mechanism between the on-die and in-controller ECC decoders, allowing us to correct the majority of DBEs within the DRAM array without adding any additional redundancy bits to either of the two codes. Overall, COMET can eliminate all double-bit error-induced SDCs and correct 99.9997% of all DBEs with negligible area, power, and performance impact.

### Acknowledgment

The authors thank the DSN’22 program committee and the anonymous reviewers for their detailed and constructive feedback. Special thanks to Professor Onur Mutlu for being the shepherd of the paper and providing valuable feedback.

### References

[1] “SPEC releases major new CPU benchmark suite.” [Online]. Available: https://www.spec.org/cpu2017/press/release.html

[2] “Zen+ - Microarchitectures - AMD.” [Online]. Available: https://en.wikichip.org/wiki/amd/microarchitectures/zen%2B

[3] “Zen 3 - Microarchitectures - AMD.” [Online]. Available: https://en.wikichip.org/wiki/amd/microarchitectures/zen_3

[4] “ECC Brings Reliability and Power Efficiency to Mobile Devices,” Micron Technology, Inc., Tech. Rep., 2017.

[5] S. Beamer, K. Asanovic, and D. A. Patterson, “The GAP Benchmark Suite,” CoRR, vol. abs/1508.03619, 2015. [Online]. Available: http://arxiv.org/abs/1508.03619

[6] C. Bienia, “Benchmarking Modern Multiprocessors,” Ph.D. dissertation, Princeton University, January 2011.

[7] N. Binkert, B. Beckmann, G. Black, S. K. Reinhardt, A. Saidi, A. Basu, J. Hestness, D. R. Hower, T. Krishna, S. Sardashti, R. Sen, K. Sewell, M. Shoaib, N. Vaish, M. D. Hill, and D. A. Wood, “The gem5 Simulator,” SIGARCH Comput. Archit. News, vol. 39, no. 2, p. 1–7, Aug. 2011. [Online]. Available: https://doi.org/10.1145/2024716.2024718

[8] S. Cha, O. Seongil, H. Shin, S. Hwang, K. Park, S. J. Jang, J. S. Choi, G. Y. Jin, Y. H. Son, H. Cho, J. H. Ahn, and N. S. Kim, “Defect Analysis and Cost-Effective Resilience Architecture for Future DRAM Devices,” in 2017 IEEE International Symposium on High Performance Computer Architecture (HPCA), 2017, pp. 61–72.

[9] K. K. Chang, D. Lee, Z. Chishti, A. R. Alameldeen, C. Wilkerson, Y. Kim, and O. Mutlu, “Improving DRAM Performance by Parallelizing Refreshes with Accesses,” in 2014 IEEE 20th International Symposium on High Performance Computer Architecture (HPCA), 2014, pp. 356–367.

[10] K. K. Chang, A. Kashyap, H. Hassan, S. Ghose, K. Hsieh, D. Lee, T. Li, G. Pekhimenko, S. Khan, and O. Mutlu, “Understanding Latency Variation in Modern DRAM Chips: Experimental Characterization, Analysis, and Optimization,” in Proceedings of the 2016 ACM SIGMETRICS International Conference on Measurement and Modeling of Computer Science, ser. SIGMETRICS ’16. New York, NY, USA: Association for Computing Machinery, 2016, p. 323–336. [Online]. Available: https://doi.org/10.1145/2896377.2901453

[11] J. Chung, I. Lee, M. Sullivan, J. H. Ryoo, D. W. Kim, D. H. Yoon, L. Kaplan, and M. Erez, “Containment Domains: A Scalable, Efficient, and Flexible Resilience Scheme for Exascale Systems,” in SC ’12: Proceedings of the International Conference on High Performance Computing, Networking, Storage and Analysis, 2012, pp. 1–11.

[12] I. Corporation, “8th and 9th Generation Intel Core Processor Families and Intel Xeon E Processor Families.” [Online]. Available: https://www.intel.com/content/dam/www/public/us/en/documents/datasheets/8th-gen-core-family-datasheet-vol-1.pdf

[13] S. Electronics, “Mobile DRAM Stack Specification.”

[14] S.-L. Gong, J. Kim, and M. Erez, “DRAM Scaling Error Evaluation Model Using Various Retention Time,” in 2017 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks Workshops (DSN-W), 2017, pp. 177–183.

[15] S.-L. Gong, J. Kim, S. Lym, M. Sullivan, H. David, and M. Erez, “DUO: Exposing On-Chip Redundancy to Rank-Level ECC for High Reliability,” in 2018 IEEE International Symposium on High Performance Computer Architecture (HPCA), 2018, pp. 683–695.

[16] R. W. Hamming, “Error Detecting and Error Correcting Codes,” The Bell System Technical Journal, vol. 29, no. 2, pp. 147–160, 1950.

[17] M. Horiguchi and K. Itoh, Nanoscale Memory Repair. New York: Springer SBM, 2011.

[18] M. Y. Hsiao, “A Class of Optimal Minimum Odd-Weight-Column SEC-DED Codes,” IBM Journal of Research and Development, vol. 14, no. 4, pp. 395–401, 1970.

[19] JEDEC, “DDR4 SDRAM Specification,” 2012.

[20] JEDEC, “Low Power Double Data Rate 4 (LPDDR4) SDRAM Specification,” 2014.

[21] S. Jeong, S. Kang, and J.-S. Yang, “PAIR: Pin-Aligned In-DRAM ECC Architecture Using Expandability of Reed-Solomon Code,” in 2020 57th ACM/IEEE Design Automation Conference (DAC), 2020, pp. 1–6.

[22] M. Jung, C. Weis, N. Wehn, M. Sadri, and L. Benini, “Optimized Active and Power-Down Mode Refresh Control in 3D-DRAMs,” in 2014 22nd International Conference on Very Large Scale Integration (VLSI-SoC), 2014, pp. 1–6.

[23] U. Kang, H. soo Yu, C. Park, H. Zheng, J. Halbert, K. Bains, S.-J. Jang, and J. Choi, “Co-Architecting Controllers and DRAM to Enhance DRAM Process Scaling,” in The Memory Forum, 2014.

[24] J. Kim, M. Sullivan, and M. Erez, “Bamboo ECC: Strong, Safe, and Flexible Codes for Reliable Computer Memory,” in 2015 IEEE 21st International Symposium on High Performance Computer Architecture (HPCA), 2015, pp. 101–112.

[25] Y. Kim, V. Seshadri, D. Lee, J. Liu, and O. Mutlu, “A Case for Exploiting Subarray-Level Parallelism (SALP) in DRAM,” in 2012 39th Annual International Symposium on Computer Architecture (ISCA), 2012, pp. 368–379.

[26] J. Liu, B. Jaiyen, Y. Kim, C. Wilkerson, and O. Mutlu, “An Experimental Study of Data Retention Behavior in Modern DRAM Devices: Implications for Retention Time Profiling Mechanisms,” in Proceedings of the 40th Annual International Symposium on Computer Architecture, ser. ISCA ’13. New York, NY, USA: Association for Computing Machinery, 2013, p. 60–71. [Online]. Available: https://doi.org/10.1145/2485922.2485928

[27] I. Micron Technology, “8Gb: x4, x8, x16 DDR4 SDRAM.”

[28] P. J. Nair, V. Sridharan, and M. K. Qureshi, “XED: Exposing On-Die Error Detection Information for Strong Memory Reliability,” in 2016 ACM/IEEE 43rd Annual International Symposium on Computer Architecture (ISCA), 2016, pp. 341–353.

[29] P. J. Nair, D.-H. Kim, and M. K. Qureshi, “ArchShield: Architectural Framework for Assisting DRAM Scaling by Tolerating High Error Rates,” in Proceedings of the 40th Annual International Symposium on Computer Architecture, ser. ISCA ’13. New York, NY, USA: Association for Computing Machinery, 2013, p. 72–83. [Online]. Available: https://doi.org/10.1145/2485922.2485929

[30] Q. Nguyen, ISA Simulator, Tests) – git commit 816a252.” [Online]. Available: https://github.com/riscv/riscv-tools

[31] T.-Y. Oh, H. Chung, Y.-C. Cho, J.-W. Ryu, K. Lee, C. Lee, J.-I. Lee, H.-J. Kim, M. S. Jang, G.-H. Han, K. Kim, D. Moon, S. Bae, J.-Y. Park, K.-S. Ha, J. Lee, S.-Y. Doo, J.-B. Shin, C.-H. Shin, K. Oh, D. Hwang, T. Jang, C. Park, K. Park, J.-B. Lee, and J. S. Choi, “25.1 A 3.2GB/s/pin 8GB 1.0V LPDDR4 SDRAM with Integrated ECC Engine for Sub-1V DRAM Core Operation,” in 2014 IEEE International Solid-State Circuits Conference Digest of Technical Papers (ISSCC), 2014, pp. 430–431.

[32] S.-I. Pae, V. Kozhikkottu, D. Somasekar, W. Wu, S. G. Ramasubramanian, M. Dadual, H. Cho, and K.-W. Kwon, “Minimal Aliasing Single-Error-Correction Codes for DRAM Reliability Improvement,” IEEE Access, vol. 9, pp. 29 862–29 869, 2021.

[33] M. Patel, J. S. Kim, H. Hassan, and O. Mutlu, “Understanding and Modeling On-Die Error Correction in Modern DRAM: An Experimental Study Using Real Devices,” in 2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), 2019, pp. 13–25.

[34] M. Patel, J. S. Kim, T. Shahroodi, H. Hassan, and O. Mutlu, “Bit-Exact ECC Recovery (BEER): Determining DRAM On-Die ECC Functions by Exploiting DRAM Data Retention Characteristics,” in 2020 53rd Annual IEEE/ACM International Symposium on Microarchitecture (MICRO), 2020, pp. 282–297.

[35] Sanghyuk Kwon, Young Hoon Son, and Jung Ho Ahn, “Understanding DDR4 in Pursuit of In-DRAM ECC,” in 2014 International SoC Design Conference (ISOCC), 2014, pp. 276–277.

[36] Y. H. Son, S. Lee, O. Seongil, S. Kwon, N. S. Kim, and J. H. Ahn, “CIDRA: A Cache-Inspired DRAM Resilience Architecture,” in 2015 IEEE 21st International Symposium on High Performance Computer Architecture (HPCA), 2015, pp. 502–513.

[37] V. Sridharan and D. Liberty, “A Study of DRAM Failures in the Field,” in SC ’12: Proceedings of the International Conference on High Performance Computing, Networking, Storage and Analysis, 2012, pp. 1–11.

[38] D. Tiwari, S. Gupta, and S. S. Vazhkudai, “Lazy Checkpointing: Exploiting Temporal Locality in Failures to Mitigate Checkpointing Overheads on Extreme-Scale Systems,” in Proceedings of the IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), 2014.

[39] A. N. Udipi, N. Muralimanohar, N. Chatterjee, R. Balasubramonian, A. Davis, and N. P. Jouppi, “Rethinking DRAM Design and Organization for Energy-Constrained Multi-Cores,” in Proceedings of the 37th Annual International Symposium on Computer Architecture, ser. ISCA ’10. New York, NY, USA: Association for Computing Machinery, 2010, p. 175–186. [Online]. Available: https://doi.org/10.1145/1815961.1815983

[40] S. Wang, H. Hu, H. Zheng, and P. Gupta, “MemRes: A Fast Memory System Reliability Simulator,” IEEE Transactions on Reliability, vol. 65, no. 4, pp. 1783–1797, 2016.

[41] A. Waterman, “RISC-V Proxy Kernel – git commit 85ae17a.” [Online]. Available: https://github.com/riscv/riscv-pk/commit/85ae17a

[42] A. Waterman and Y. Lee, “Spike, a RISC-V ISA Simulator – git commit 3bfc00e.” [Online]. Available: https://github.com/riscv/riscv-isa-sim

[43] A. Waterman, Y. Lee, D. Patterson, and K. Asanovic, “The RISC-V Instruction Set Manual Volume I: User-Level ISA Version 2.0,” 2014. [Online]. Available: https://riscv.org

[44] A. Yazdanbakhsh, D. Mahajan, H. Esmaeilzadeh, and P. Lotfi-Kamran, “AxBench: A Multiplatform Benchmark Suite for Approximate Computing,” IEEE Design & Test, vol. 34, no. 2, pp. 60–68, 2017.

---

**Authorized licensed use limited to: Tsinghua University. Downloaded on August 07, 2022 at 13:14:36 UTC from IEEE Xplore. Restrictions apply.**