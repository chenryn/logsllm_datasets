# Technique and Bypassing Defense Mechanisms
**Date:** July 2010  
**Organization:** STRI/Advanced Technology Lab/Security  
**Topic:** Exploitation on ARM  
**Classification:** CONFIDENTIAL

## Presenter Information
- **Name:** Itzhak (Zuk) Avraham
- **Role:** Researcher at Samsung Electronics, Partner at PIA
- **Contact:**
  - Twitter: @ihackbanme
  - Blog: [http://imthezuk.blogspot.com](http://imthezuk.blogspot.com)
  - For any questions, talks, or requests, please contact me directly.

## Presentation Overview
This presentation is a summary of the full paper. The complete document can be found in the provided CDs under the name "Itzhak Zuk Avraham.*" Alternatively, it is available online at:
- [http://imthezuk.blogspot.com](http://imthezuk.blogspot.com)

## Outline
1. **Exploitation on X86 vs. ARM**
2. **ARM Calling Convention (APCS)**
3. **Why Simple Ret2libc Will Not Work?**
4. **Understanding the Vulnerable Function**
5. **Adjusting Parameters**
6. **Controlling the PC**
7. **Ret2ZP (Return To Zero Protection) - For Local Attacker**
8. **Ret2ZP (Return To Zero Protection) - Attack Explained in Depth (For Remote Attacker)**
9. **Ret2ZP - Registers/Variable Values Injections**
10. **Ret2ZP - Using the Attack to Enable Stack**

## Introduction
### Why Hack into a Phone?
- **Remote Attacks:** SMS, Calls, Zombie Phone
- **Local Attacks by App Holder:** Privilege Escalation
- **More:** Additional vectors and attack scenarios

## Stack-Based Buffer Overflows on X86/ARM
- **X86 Status:**
  - Stack/Heap are not executable.
  - Protections like stack cookies and ASLR are common.
- **ARM Status:**
  - Almost no protection.
  - Architecture differences.
  - Stack/Heap are not executable on most devices.

## X86 Ret2Libc Attack
- **Overview:**
  - Overwrites the return address and passes parameters to the vulnerable function.
  - EBP+4: Stores the function to call.
  - EBP+8: Stores the exit function.
  - EBP+12: Contains the pointer to the parameters for the called function.
- **Example:**
  - Use the `system` function, which is easy to use and requires only one parameter.

## Why It Won’t Work on ARM
- **Calling Conventions:**
  - ARM assembly uses different commands and argument passing mechanisms (APCS).
  - Standard ARM calling convention allocates registers as follows:
    - R15: Program Counter
    - R14: Link Register
    - R13: Stack Pointer
    - R12: Intra-Procedure-call scratch register
    - R4-R11: Local variables
    - R0-R3: Arguments to and from subroutines

## ARM Ret2Libc Attack
- **Challenges:**
  - Parameters are passed via R0-R3, not on the stack.
  - Can only override existing local variables and the Program Counter (PC).
  - No direct "Ret2Libc" on ARM; adjustments are necessary.

## Exploitation Theory
- **Control of Link Register (R14):**
  - When returning to the original caller, the Link Register (R14) is popped into the Program Counter (R15).
  - Controlling R14 before the function exits allows control of the application.

## Proof of Concept (PoC) - Maintaining R0
- **Scenario:**
  - Use a function that returns void and has no actions after overflow.
  - Small buffer size (~16 bytes) to prevent stack overrun.
- **Real-life Scenario:**
  - Keeping R0 to point to the beginning of the buffer is impractical due to strict conditions.

## Successful Exploitation Requirements
- **Key Steps:**
  - Parameter adjustments
  - Variable adjustments
  - Gaining control of the PC
  - Stack lifting
  - Combining RoP, Ret2Libc, stack lifting, and parameter/variable adjustments to create Ret2ZP (Return to Zero-Protection).

## Ret2ZP for Local and Remote Attackers
- **Local Attacker:**
  - Jump to a pop instruction that also pops the PC.
  - Example: `erand48` function epilog.
- **Remote Attacker:**
  - Adjust R0 to point to the beginning of the buffer.
  - Use relative places and adjust the stack pointer.
  - Example: `wprintf` function epilog.
- **Parameter Adjustments:**
  - Use functions like `mcount` to control R0, R1, R2, R3, R11, and LR.

## Ret2ZP on Android
- **Challenges:**
  - Different compilation flags and libraries.
  - No direct `pop R0` instruction.
- **Solution:**
  - Use tricks with functions like `mallinfo` to move `/system/bin/sh` to R0.

## Summary
- **Buffer Overflows on ARM:**
  - Real threat, more security mechanisms needed.
  - Never say never; one security hole can lead to device control.

## Prevention
- **Best Practices:**
  - Randomize static code.
  - Use stack cookies.
  - Implement multiple security vectors.

## Questions and Contact
- **Questions?**
  - Itzhak (Zuk) Avraham
  - Researcher at Samsung Electronics
  - Follow on Twitter: @ihackbanme
  - Blog/Full Paper/Presentation: [http://imthezuk.blogspot.com](http://imthezuk.blogspot.com)
  - Email: (for special offers, questions, comments)

## Acknowledgments
- **Thanks to:**
  - Ilan (NG!) Aelion
  - Moshe Vered
  - Matthew Carpenter

## References
- Full paper: [http://imthezuk.blogspot.com](http://imthezuk.blogspot.com)
- Phrack Magazine p66,0x0c – Alphanumeric ARM Shellcode (Yves Younan, Pieter Philippaerts)
- Phrack Magazine p58,0x04 – Advanced ret2libc attacks (Nergal)
- Defense Embedded Systems Against BO via Hardware/Software (Zili Shao, Qingfeng Zhuge, Yi He, Edwin H.-M. Sha)
- iPwnning the iPhone: Charlie Miller
- ARM System-On-Chip Book: Steve Furber
- Understanding the Linux Kernel: Bovet & Cesati

**Thank You!**  
감사합니다!