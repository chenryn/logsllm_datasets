### Data and Expected Output in eXpert-BSM Reports

The provided data set, along with a description of the expected output, serves as a foundation for regression testing during the development phase. Additionally, this data set is valuable to eXpert-BSM operators in several ways. Typically, an operator would want to ensure that the monitor functions correctly after installation. When started in test mode, eXpert-BSM loads the configuration settings specific to the test battery and initiates a batch mode run. This process exercises the analysis and presentation components of eXpert-BSM, allowing the operator to view all possible types of reports the monitor can generate.

If the operator wishes to conduct live attacks for end-to-end testing in real-time, the test battery documentation provides detailed instructions. The test battery is designed to be a concentrated collection of attack data, with minimal normal data, to minimize the size of the data file and the time required to run through it. The primary purpose of the test is to validate the proper operation of all intrusion models in eXpert-BSM and to demonstrate the contents of the resulting reports. Although generating such data can be time-consuming and challenging, feedback from registered eXpert-BSM operators strongly supports the value of this type of test battery.

Another form of testing involves processing large amounts of normal data to ensure there are no false alarms. We continuously perform such testing in our development and production environments. The DARPA IDS evaluation data from 1998 and 1999 is a good example, featuring several weeks of large data sets with a small suite of attacks inserted daily. The selected attacks aim to exploit a broad range of vulnerabilities representative of major threats used today.

### Experimentation, Deployment, and Evaluation

Throughout its development, versions of eXpert-BSM have been deployed in third-party laboratories, such as groups within the Air Force Research Laboratory and the National Security Agency, for operational evaluations and experiments. These components have also participated in multiple yearly live red-team exercises, primarily within the DARPA Information Assurance and Survivability research programs. These activities have provided valuable input for the ongoing development of the knowledge base and other features of eXpert-BSM.

In April 2000, the first release of eXpert-BSM was made available for download on the Internet. Those who registered their contact information were granted a time-limited evaluation license. As of now, over 200 organizations have registered. We are aware of at least one military operational center and one commercial data center where the evaluation version has been operationally fielded to monitor critical servers. At both centers, eXpert-BSM has been in continuous use for more than a year.

### Optimization and Performance

Expert systems built with P-BEST generally outperform those using traditional interpreting models. This is because P-BEST code is translated to C, which is then compiled like any C program. Additionally, P-BEST has undergone several modifications to enhance its performance in terms of speed and integration with other programs. These modifications include language extensions that allow most C native types to be used in P-BEST, translator directives to pass some constructs directly to the C code, and an improved execution model for the inference engine. We have also developed C libraries to optimize the evaluation of complex antecedent expressions.

For any IDS analyzing a high-bandwidth event stream, it is crucial to discard as much irrelevant data as early as possible. The eXpert-BSM knowledge base uses only 58 of the over 250 possible types of BSM audit records in its intrusion models. In real-time mode, the Solaris audit kernel module is configured to produce only these 58 types of records. For batch mode, our preprocessing component, ebsmgen, performs the same selection. Our experiments show that for large sets of typical audit data (approximately 1 GB), this preselection reduces the amount of data that needs to be produced and processed to about 10% of the total amount that would be produced if full auditing were enabled.

The original auditd is designed to write audit records only to files. The eXpert-BSM package includes a component called ebsmprobe that replaces auditd, reads audit records directly from the kernel, and uses interprocess communication to pass the records to the preprocessing and analysis components for direct consumption. This approach avoids expensive disk I/O operations for audit records and eliminates the need to reserve large amounts of disk space for audit files.

We recommend installing eXpert-BSM on local disk space rather than on network-mounted volumes for better security and to avoid unpredictable file access delays. Internally, any kind of over-the-network access, such as NIS or DNS lookup, is avoided, except during the short initialization phase. Because many sites use NIS for user account information, eXpert-BSM uses its own local file for mapping numerical user IDs to usernames, which includes the information in /etc/passwd and NIS.

If the monitored host is running an extremely active process producing very large volumes of audit records, such as a heavily loaded DBMS, auditing can be turned off for that process to let the IDS be more responsive in monitoring other processes on the host. We propose creating a separate account for the sole purpose of running the heavy process and excluding the account from auditing by an entry in /etc/security/audit user.

To measure performance, we deployed eXpert-BSM on a Sun Enterprise 450, which is used as a file server and compute server for about 15 users. The machine is equipped with two UltraSparcII 400 MHz processors and 1 GB of RAM. The additional load imposed by eXpert-BSM was studied in an experiment where we measured the completion time for building a relatively large software package, both with and without the eXpert-BSM monitor. We ran make for a clean distribution of openssl-0.9.6 and measured the completion time using /usr/bin/time. A total of 10 runs were performed for each situation, and each run was followed by other operations to eliminate the effects of file-system caches, etc.

When eXpert-BSM was not running, the 10 builds took an average of 428 seconds each to complete, with a standard deviation of 0.8. With eXpert-BSM running in its "out-of-the-box" configuration, each build produced 94,684 audit event records and took an average of 454 seconds to complete, with a standard deviation of 1.1. We can conclude that the presence of the eXpert-BSM monitor caused a 6% increase in completion time for the task.

### Acknowledgments

We are grateful to all the people who have contributed to the design, implementation, evaluation, and evolution of eXpert-BSM and other EMERALD components. Special thanks to Martin Fong and Keith Skinner at SRI for their extensive contributions to the eXpert-BSM package. The feedback provided by beta testers and users has been invaluable and greatly appreciated. We also thank the OS security group at Sun Microsystems for answering our many questions about the Solaris audit subsystem.

### Related Work

Operating system audit logs offer a unique vantage point into the security-relevant operations of host systems. In [15], the design of effective auditing for security-critical systems is explored. Standardization efforts for handling audit content have been examined [1], as have issues of what additional network-related activity should be represented in host audit trails [4]. A more recent work on applying formality to audit log structures is [6], which discusses some of the difficulties in automated BSM audit trail parsing.

There are various research efforts exploring what can be done with audit data to automatically detect threats to the host. MIDAS [20] is a significant work, as it was one of the original applications of expert systems—using P-BEST—to monitor user activity logs for misuse and anomalous user activity. CMDS, by SAIC, demonstrated another application of a forward-chaining expert system, CLIPS, to a variety of operating system logs [18]. USTAT [9] offered another formulation of intrusion heuristics using state transition diagrams [16], but remained a classic forward-chaining expert system inference engine. ASAX [7] introduced the Rule-based Sequence Evaluation Language (RUSSEL) [12], specifically tuned for the analysis of host audit trails.

### Conclusion

Host-based intrusion detection offers the ability to detect a wide variety of computer misuse through the direct analysis of process activity inside the host. Host-based analysis complements network traffic analysis, providing threat detection coverage that is not easily available through the analysis of raw network traffic.

eXpert-BSM is a powerful and mature service for isolating security misuse and important security-relevant warning indicators. It analyzes the rich content of the Solaris BSM audit stream in real-time, providing operators with distilled alert information and response recommendations. eXpert-BSM has been under development since 1998 and continues to improve in effectiveness and usability through extensive testing, experimentation, and deployment experience.

eXpert-BSM is available for download at: http://www.sdl.sri.com/emerald

### References

[1] M. Bishop. A standard audit trail format. In Proceedings of the 18th National Information Systems Security Conference, pages 136–145, Baltimore, Maryland, Oct. 10–13, 1995. National Institute of Standards and Technology/National Computer Security Center.

[2] D. Bruschi, E. Rosti, and R. Banfi. A tool for pro-active defense against the buffer overrun attack. In J.-J. Quisquater et al., editors, Computer Security – Proceedings of ESORICS 98, volume 1485 of LNCS, pages 17–31, Louvain-la-Neuve, Belgium, Sept. 16–18, 1998. Springer-Verlag.

[3] CERT Coordination Center, Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA 15213-3890, USA. Buffer Overﬂow in Sun Solstice AdminSuite Daemon sadmind, Dec. 14, 1999. CERT Advisory CA-1999-16, http://www.cert.org/advisories/CA-1999-16.html.

[4] T. E. Daniels and E. H. Spafford. Identification of host audit data to detect attacks on low-level IP vulnerabilities. Journal of Computer Security, 7(1):3–35, 1999.

[5] J. de Haas. Vulnerability in Solaris ufsrestore. Bugtraq, June 14, 2000. http://archives.neohapsis.com/archives/bugtraq/2000-06/0114.html.

[6] C. Flack and M. J. Atallah. Better logging through formality: Applying formal specification techniques to improve audit logs and log consumers. In H. Debar, L. M´e, and S. F. Wu, editors, Recent Advances in Intrusion Detection (RAID 2000), volume 1907 of LNCS, pages 1–16, Toulouse, France, Oct. 2–4, 2000. Springer-Verlag.

[7] J. Habra, B. Le Charlier, A. Mounji, and I. Mathieu. ASAX: Software architecture and rule-based language for universal audit trail analysis. In Y. Deswarte et al., editors, Computer Security – Proceedings of ESORICS 92, volume 648 of LNCS, pages 435–450, Toulouse, France, Nov. 23–25, 1992. Springer-Verlag.

[8] L. T. Heberlein et al. A network security monitor. In Proceedings of the 1990 IEEE Symposium on Security and Privacy, pages 296–304, Oakland, California, May 7–9, 1990.

[9] K. Ilgun. USTAT: A real-time intrusion detection system for UNIX. In Proceedings of the 1993 IEEE Symposium on Security and Privacy, pages 16–28, Oakland, California, May 24–26, 1993.

[10] U. Lindqvist and P. A. Porras. Detecting computer and network misuse through the production-based expert system toolset (P-BEST). In Proceedings of the 1999 IEEE Symposium on Security and Privacy, pages 146–161, Oakland, California, May 9–12, 1999.

[11] R. Lippmann, J. W. Haines, D. J. Fried, J. Korba, and K. Das. Analysis and results of the 1999 DARPA off-line intrusion detection evaluation. In H. Debar, L. M´e, and S. F. Wu, editors, Recent Advances in Intrusion Detection (RAID 2000), volume 1907 of LNCS, pages 162–182, Toulouse, France, Oct. 2–4, 2000. Springer-Verlag.

[12] A. Mounji. Languages and Tools for Rule-Based Distributed Intrusion Detection. PhD thesis, Institut d’Informatique, University of Namur, Belgium, Sept. 1997.

[13] P. G. Neumann and P. A. Porras. Experience with EMERALD to date. In Proceedings of the 1st Workshop on Intrusion Detection and Network Monitoring, Santa Clara, California, Apr. 9–12, 1999. The USENIX Association.

[14] A. One. Smashing the stack for fun and profit. Phrack Magazine, 7(49), Nov. 8, 1996. http://www.fc.net/phrack/files/p49/p49-14.

[15] J. Picciotto. The design of an effective auditing subsystem. In Proceedings of the 1987 IEEE Symposium on Security and Privacy, pages 13–22, Oakland, California, Apr. 27–29, 1987.

[16] P. A. Porras and R. A. Kemmerer. Penetration state transition analysis: A rule-based intrusion detection approach. In Proceedings of the Eighth Annual Computer Security Applications Conference, pages 220–229, San Antonio, Texas, Nov. 30–Dec. 4, 1992.

[17] P. A. Porras and P. G. Neumann. EMERALD: Event monitoring enabling responses to anomalous live disturbances. In Proceedings of the 20th National Information Systems Security Conference, pages 353–365, Baltimore, Maryland, Oct. 7–10, 1997. National Institute of Standards and Technology/National Computer Security Center.

[18] P. Proctor. Audit reduction and misuse detection in heterogeneous environments: Framework and application. In Proceedings of the Tenth Annual Computer Security Applications Conference, pages 117–125, Orlando, Florida, Dec. 5–9, 1994.

[19] T. H. Ptacek and T. N. Newsham. Insertion, evasion, and denial of service: Eluding network intrusion detection. Technical report, Secure Networks, Inc., Calgary, Alberta, Canada, Jan. 1998. http://www.clark.net/~roesch/idspaper.html.

[20] M. M. Sebring, E. Shellhouse, M. E. Hanna, and R. A. Whitehurst. Expert systems in intrusion detection: A case study. In Proceedings of the 11th National Computer Security Conference, pages 74–81, Baltimore, Maryland, Oct. 17–20, 1988. National Institute of Standards and Technology/National Computer Security Center.

[21] Sun Microsystems, Inc., 901 San Antonio Road, Palo Alto, SunSHIELD Basic Security Module Guide, Solaris 7, Oct. 1998. Part No. 805-2635-10.

[22] U.S. Department of Defense. Trusted Computer System Evaluation Criteria, Dec. 1985. DoD 5200.28-STD.

[23] A. Valdes and K. Skinner. Adaptive, model-based monitoring for cyber attack detection. In H. Debar, L. M´e, and S. F. Wu, editors, Recent Advances in Intrusion Detection (RAID 2000), volume 1907 of LNCS, pages 80–92, Toulouse, France, Oct. 2–4, 2000. Springer-Verlag.