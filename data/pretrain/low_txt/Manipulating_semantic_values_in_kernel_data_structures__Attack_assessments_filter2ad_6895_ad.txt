### Volatility and Security Tools Evaluation

We evaluated a range of security tools, including volatility memory forensic tools (both traversal and scan versions), Sig-Graph [4], and Robust-Signature [3]. To further expand our analysis, we also included an in-house Virtual Machine Introspection (VMI) tool. This VMI tool, implemented for inspecting guest execution from QEMU, retrieves semantic information by first locating the global data structures in the guest memory and then traversing them. Specifically, it can retrieve process, thread, and module information from the guest operating system.

To ensure system stability, we ran TDSS for over three hours before recording the outputs of the various security tools. This was to confirm that neither the system nor the program would crash due to the SVM rootkit.

### Impact on Security Tools

Table VIII summarizes the impact of the SVM rootkit on the selected security tools, detailing the primary semantic fields manipulated and the resulting effects. The symptoms observed can be categorized into two main types: either the OS entities are hidden (H) or misleading new values are fetched and displayed (N).

- **Volatility Traversal Tools (e.g., pslist, threads, modules)**: These tools were misled to show meaningless values.
- **Scan Tools (e.g., psscan, thrdscan, modscan)**: While psscan and thrdscan could not detect process and thread information, modscan identified module information, which, however, had been manipulated and thus became meaningless. The reason for the hiding of process and thread objects is the manipulation of their pool tags, which these tools rely on for identification.
- **Robust Signature Schemes**:
  - **Sig-Graph [4]**: Although reliable enough to find the malware's process, the obtained process information was invalid.
  - **Value-Invariant Signature [3]**: This scheme failed to identify the malware process because the ExitTime of the malware process had been manipulated, causing the signature to incorrectly remove the process as noisy or dead.

The results from our VMI tool were similar to those of the Volatility traversal tools. While the tool could extract information about the malware execution, the extracted information was incorrect. Consequently, we could not leverage the knowledge obtained from this VMI tool to perform meaningful analysis on the malware execution.

### Discussion

#### SVM Attack Space

The attack space for SVM is vast. Our experiments demonstrate that several OS semantic fields can be mutated without compromising system stability. Once the kernel is infiltrated, an attacker can manipulate any semantic value to achieve malicious goals. In our tests, we limited changes to single value mutations and duplicate set mutations, but an attacker is not restricted to these methods.

We did not test multiple mutations due to the infeasibility of testing a large number of combinations. However, our testing infrastructure supports multi-mutation-based tests and can be extended in the future. The primary focus of our tests was to highlight the seriousness of single value and duplicate set mutations, which we believe represent a significant attack space.

#### Memory Forensics Vulnerability

Memory forensics involves obtaining digital evidence from a live system. Our study shows that the digital evidence, particularly OS semantics, obtained from a memory snapshot cannot be assumed correct, given the possibility of SVM attacks. Recent efforts in robust signature schemes [3], [4] can help detect hidden kernel objects, but the extracted semantic information can still be misleading.

#### Need for Trustworthy VMI Techniques

Current VMI techniques [20]–[23] largely depend on memory analysis and can, therefore, be incorrect. These techniques traverse important kernel data structures of the guest system and extract OS semantics. Virtuoso [22], VMST [23], and Exterior [24] have narrowed the semantic gap and improved VMI usability, but they still directly read from the virtual machine memory, disregarding other runtime events. If the guest kernel is compromised by Direct Kernel Object Manipulation (DKOM) attacks, current VMI techniques will fail, just like memory forensics.

### Related Work

#### Fuzz Testing

Numerous research efforts, such as SAGE [18], KLEE [25], and S2E [26], have focused on fuzz testing to discover bugs and security vulnerabilities. Our fuzz testing targets OS semantic fields, aiming to evaluate their mutability. Dolan-Gavitt et al. proposed a fuzz testing technique to detect value invariants in kernel data structures and use these invariants to construct more robust signatures [3]. Our approach differs in that it focuses on OS semantic fields, automatically identifies duplicates, and designs test cases and mutation rules to explore potential attacks without crashing the system.

#### Dynamic Dataflow Analysis

We developed a new dynamic dataflow analysis algorithm to track duplicate values. This algorithm shares similarities with abstract variable binding for reverse engineering malware emulators [27], dynamic type inference [28], and data structure reverse engineering [29], [30]. In MOSS, we need to update membership information for all variables in the duplicate value set.

#### Virtual Machine Introspection

Virtual Machine Introspection (VMI) requires interpreting low-level bits and bytes of the guest OS kernel into high-level semantic states, a non-trivial task due to the semantic gap [31]. Early approaches relied on manual efforts, while recent advances have automated this process [22]–[24]. Our work highlights the need for more trustworthy VMI techniques, as most semantic knowledge extracted by VMI cannot be trusted.

### Limitations and Future Work

Our study aimed to identify mutable semantic fields in Windows and Linux OSes. While we identified several mutable fields, the list is not exhaustive. A thorough analysis of all semantic fields and their mutability is needed. Additionally, some semantic fields may be derived from multiple data structures, which we intend to address in future work. We also plan to include anti-virus software in our future experiments for a more comprehensive result.

Trustworthy VMI should be dynamic and more involved with the guest kernel execution. Instead of querying static semantic values, it should capture the creation, modification, and deletion of these values, ensuring that these operations are not performed by attackers. We aim to explore this direction in future work.

Certain attacks on kernel code modify the interpretation of kernel data structures, altering the mapping between semantic meaning and the data structures. MOSS does not address such attacks.

### Conclusion

In this paper, we conducted a systematic assessment of Semantic Value Manipulation (SVM) attacks in Windows XP and Ubuntu Linux. Using a prototype system, MOSS, we implemented a new fuzz testing technique to explore the SVM attack space. Our results show that most security-sensitive semantic fields can be freely mutated in both operating systems. Consistency checking for duplicate values only helps in some cases. We also implemented a proof-of-concept SVM rootkit, which manipulated all mutable semantic values related to a real-world bot sample, TDSS. The selected security tools were misled or bypassed entirely.

Our study implies that memory forensics and current VMI techniques will fail if attackers fully exploit SVM attacks. We call for a reevaluation of existing security solutions and encourage serious research into effective SVM attack mitigation.

### Acknowledgements

We thank the anonymous reviewers for their comments. This research was supported in part by NSF grants #1018217 and #1054605, McAfee Inc., and VMware Inc. Any opinions, findings, conclusions, or recommendations are those of the authors and not necessarily of the funding agencies.

### References

[1] "FU Rootkit," http://www.rootkit.com/project.php?id=12, 2005.

[2] M. Carbone, W. Cui, L. Lu, W. Lee, M. Peinado, and X. Jiang, "Mapping kernel objects to enable systematic integrity checking," in Proceedings of ACM CCS, 2009.

[3] B. Dolan-Gavitt, A. Srivastava, P. Traynor, and J. Giffin, "Robust signatures for kernel data structures," in Proceedings of ACM CCS conference, 2009.

[4] Z. Lin, J. Rhee, X. Zhang, D. Xu, and X. Jiang, "Siggraph: Brute force scanning of kernel data structure instances using graph-based signatures," in Proceedings of NDSS, 2011.

[5] W. Cui, M. Peinado, Z. Xu, and E. Chan, "Tracking rootkit footprints with a practical memory analysis system," in Proceedings of USENIX Security Symposium, Aug. 2012.

[6] S. Golovanov, "Analysis of tdss rootkit technologies," Securelist, Tech. Rep., Aug 2010. [Online]. Available: http://www.securelist.com/en/analysis/204792131

[7] A. Seshadri, M. Luk, N. Qu, and A. Perrig, "Secvisor: a tiny hypervisor to provide lifetime kernel code integrity for commodity OSes," in Proceedings of SOSP, 2007.

[8] R. Riley, X. Jiang, and D. Xu, "Guest-transparent prevention of kernel rootkits with VMM-based memory shadowing," in Proceedings of the 11th international symposium on Recent Advances in Intrusion Detection, 2008, pp. 1–20.

[9] M. C. Grace, Z. Wang, D. Srinivasan, J. Li, X. Jiang, Z. Liang, and S. Liakh, "Transparent protection of commodity OS kernels using hardware virtualization," in Conference on Security and Privacy in Communication Networks (SecureComm), 2010.

[10] J. Nick L. Petroni and M. Hicks, "Automated detection of persistent kernel control-flow attacks," in Proceedings of ACM CCS, 2007.

[11] Z. Wang and X. Jiang, "Countering persistent kernel rootkits through systematic hook discovery," in Proceedings of the 14th International Symposium on Recent Advances in Intrusion Detection (RAID’08), September 2008.

[12] Z. Wang, X. Jiang, W. Cui, and P. Ning, "Countering kernel rootkits with lightweight hook prevention," in Proceedings of ACM CCS, 2009.

[13] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager, M. G. Kang, Z. Liang, J. Newsome, P. Poosankam, and P. Saxena, "BitBlaze: A new approach to computer security via binary analysis," in Proceedings of the 4th International Conference on Information Systems Security, Hyderabad, India, Dec. 2008.

[14] "TEMU: The BitBlaze dynamic analysis component," http://bitblaze.cs.berkeley.edu/temu.html.

[15] "Volatility: Memory Forensics System," https://www.volatilesystems.com/default/volatility/.

[16] J. Newsome and D. Song, "Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software," in Proceedings of 12th Annual NDSS conference, 2005.

[17] H. Agrawal and J. R. Horgan, "Dynamic program slicing," in Proceedings of ACM SIGPLAN'90 Conference on Programming Language Design and Implementation, 1990.

[18] P. Godfroid, M. Y. Levin, and D. Molnar, "Automated whitebox fuzz testing," in Proceedings of the 15th Annual Network and Distributed System Security Symposium (NDSS’08), February 2008.

[19] M. Russinovich, "Windows Sysinternals utilities," http://technet.microsoft.com/en-us/sysinternals.

[20] T. Garfinkel and M. Rosenblum, "A virtual machine introspection based architecture for intrusion detection," in Proceedings of Network and Distributed Systems Security Symposium (NDSS’03), February 2003.

[21] X. Jiang, X. Wang, and D. Xu, "Stealthy malware detection through VMM-based 'out-of-the-box' semantic view reconstruction," in Proceedings of the 14th ACM conference on Computer and Communications Security (CCS’07), October 2007.

[22] B. Dolan-Gavitt, T. Leek, M. Zhivich, J. Giffin, and W. Lee, "Virtuoso: Narrowing the semantic gap in virtual machine introspection," in Proceedings of the IEEE Symposium on Security and Privacy (Oakland), May 2011.

[23] Y. Fu and Z. Lin, "Space traveling across VM: Automatically bridging the semantic-gap in virtual machine introspection via online kernel data redirection," in Proceedings of the 2012 IEEE Symposium on Security and Privacy, San Francisco, CA, May 2012.

[24] ——, "Exterior: Using a dual-VM based external shell for guest-OS introspection, configuration, and recovery," in Proceedings of the 9th Annual International Conference on Virtual Execution Environments, Houston, TX, March 2013.

[25] C. Cadar, D. Dunbar, and D. Engler, "Klee: Unassisted and automatic generation of high-coverage tests for complex systems programs," in Proceedings of OSDI 2008, 2008.

[26] V. Chipounov, V. Kuznetsov, and G. Candea, "S2E: a platform for in-vivo multi-path analysis of software systems," in Proceedings of the sixteenth international conference on Architectural support for programming languages and operating systems, ser. ASPLOS ’11. New York, NY, USA: ACM, 2011, pp. 265–278.

[27] M. Sharif, A. Lanzi, J. Giffin, and W. Lee, "Automatic reverse engineering of malware emulators," in Proceedings of the 30th IEEE Symposium on Security and Privacy, 2009, pp. 94–109.

[28] M. Zhang, A. Prakash, X. Li, Z. Liang, and H. Yin, "Identifying and analyzing pointer misuses for sophisticated memory-corruption exploit diagnosis," in In Proceedings of 19th Annual Network & Distributed System Security Symposium, 2012.

[29] Z. Lin, X. Zhang, and D. Xu, "Automatic reverse engineering of data structures from binary execution," in Proceedings of the 17th Annual Network and Distributed System Security Symposium (NDSS’10), February 2010.

[30] A. Slowinska, T. Stancescu, and H. Bos, "Howard: a dynamic excavator for reverse engineering data structures," in Proceedings of NDSS 2011, San Diego, CA, 2011.

[31] P. M. Chen and B. D. Noble, "When virtual is better than real," in Proceedings of the Eighth Workshop on Hot Topics in Operating Systems, 2001.

[32] N. L. Petroni, Jr., T. Fraser, J. Molina, and W. A. Arbaugh, "Copilot - a coprocessor-based kernel runtime integrity monitor," in Proceedings of the 13th USENIX Security Symposium, 2004.

[33] F. Baiardi and D. Sgandurra, "Building trustworthy intrusion detection through VM introspection," in Proceedings of the Third International Symposium on Information Assurance and Security. IEEE Computer Society, 2007, pp. 209–214.