# Reducing False Positives in Anomaly Detection

To reduce the number of false positives, one approach is to adjust the training and detection thresholds to account for the higher variability in Google traffic. Nearly half of the false positives are caused by anomalous search strings containing non-printable characters (likely due to incompatible character sets) or extremely long strings (such as URLs pasted directly into the search field). Another method is to perform post-processing of the output, possibly using a signature-based intrusion detection system to discard known anomalous queries. Additionally, it is feasible to handle this volume of alerts manually; one or two full-time employees could quickly review and discard obviously incorrect instances, focusing on the few suspicious ones.

## Analysis of University Log Files

When analyzing the output for the log files from the two universities, we encountered several anomalous queries with attributes that, while not malicious, were still incorrect. For example, our tool reported a character string in a field used by the application to transmit an index. Discussions with the site administrators revealed that some of these errors may have been introduced by users testing the system for purposes other than security.

## Estimating False Alarm Rates and Detection Capabilities

After estimating the false alarm rates, we analyzed the detection capabilities of our tool. For this experiment, we introduced a number of attacks into the data set of TU Vienna. We chose this data set for two reasons: first, we had access to the log file and could inject queries, which was not possible with the Google data set. Second, the vulnerable programs that were attacked had already been installed at this site and were regularly used, allowing us to base the evaluation on real-world training data.

We used eleven real-world exploits downloaded from popular security sites [6, 27, 29] for our experiment. The set of attacks included:
- A buffer overflow against Phorum [26], a PHP message board.
- Three directory traversal attacks against Htmlscript [24].
- Two XSS (cross-site scripting) exploits against IMP [15], a web-based email client.
- Two XSS exploits against csSearch [8], a search utility.
- Webwho [9], a web-based directory service, was compromised using three variations of input validation errors.

We also wanted to assess the ability of our system to detect worms such as Nimda or Code Red. However, since all log files were created by Apache web servers, which are not vulnerable to these attacks, we installed a Microsoft IIS server, manually created training data for the vulnerable program, and injected the signature of a Code Red attack [5]. We then transformed the log file into Apache format and ran our system on it.

All eleven attacks and the Code Red worm were reliably detected by our anomaly detection system using the same thresholds and training data used to evaluate the false alarm rate for this data set. Although the attacks were known to us, they were based on existing, unmodified code. The malicious queries were injected into the log files after the model algorithms were designed and the false alarm rate was assessed, with no manual tuning or adjustment necessary.

## False Positive Rates and Detection Capabilities

| Data Set   | Number of Alerts | Number of Queries | False Positive Rate | Alarms per Day |
|------------|------------------|-------------------|---------------------|----------------|
| Google     | 4,944            | 0.01              | 1.89                | 0.000419       |
| UCSB       | 0.000650         | 0.000212          | 206                 | 3              |
| TU Vienna  | 151              | 490,704           | 4,617               | 713,500        |

| Attack Class          | Buffer Overflow | Directory Traversal | XSS (Cross-Site Scripting) | Input Validation | Code Red |
|-----------------------|-----------------|---------------------|----------------------------|------------------|----------|
| Length                | x               | x                   | x                          | x                | x        |
| Character Distribution| x               | x                   | x                          |                  | x        |
| Structure             | x               | x                   | x                          |                  | x        |
| Token Presence        | x               | x                   | x                          | x                |          |
| Order                 | x               | x                   | x                          | x                |          |

Table 5 shows the models that reported an anomalous query or attribute for each class of attacks. It is evident that no single model raises an alert for all attacks, emphasizing the importance of combining different properties of queries and attributes to cover a wide range of possible attack vectors.

The length model, character distribution model, and structural model are highly effective against a broad range of attacks that inject a substantial amount of malicious payload into an attribute string. Attacks such as buffer overflow exploits (including the Code Red worm, which spreads via a buffer overflow in Microsoft’s IIS) and cross-site scripting attempts require a significant number of characters, increasing the attribute length noticeably. A human operator can easily identify that a maliciously modified attribute does not "look right," reflected in its anomalous character distribution and structure.

Input validation errors, including directory traversal attempts, are more challenging to detect. The required number of characters is smaller than those needed for buffer overflow or XSS exploits, often within the range of legitimate attributes. Directory traversal attempts stand out due to the unusual structure of the attribute string (repetitions of slashes and dots). However, this is not true for general input validation attacks. The three attacks exploiting an error in Webwho did not result in an anomalous attribute for the character distribution or structural model. In this case, the token finder raised an alert because only a few different values of the involved attribute were encountered during the training phase.

The presence/absence and parameter order models can be evaded with sufficient knowledge of the structure of a legitimate query. However, the available exploits used in our experiments resulted in reported anomalies from at least one of the two models in 8 out of 11 cases (one buffer overflow, four directory traversal, and three input validation attacks). Therefore, we decided to include these models in our IDS, especially given their low false alarm rates.

## Conclusions

Our system is capable of detecting a high percentage of attacks with a very limited number of false positives (all attacks, with less than 0.2% false alarms in our experiments). Some attacks are also detectable by signature-based intrusion detection systems like Snort, as they represent variations of known attacks (e.g., Code Red, buffer overflows). Other attacks, which use malicious manipulation of query parameters, are correctly flagged by our anomaly detection system.

A limitation of the system is its reliance on web access logs. Attacks that compromise the security of a web server before logging may not be detected. The approach described in [1] advocates direct instrumentation of web servers for timely detection of attacks, even before a query is processed. This approach may introduce some delay but could be adapted if the delay is acceptable.

## Acknowledgments

We thank Urs Hoelzle from Google, Inc., for providing log files from one of the world's most popular websites. This research was supported by the Army Research Office under agreement DAAD19-01-1-0484. The views and conclusions contained herein are those of the authors and should not be interpreted as representing the official policies or endorsements of the Army Research Office or the U.S. Government.

## References

[1] M. Almgren and U. Lindqvist. Application-Integrated Data Collection for Security Monitoring. In Proceedings of Recent Advances in Intrusion Detection (RAID), LNCS, pages 22–36, Davis, CA, October 2001. Springer.
[2] Apache 2.0 Documentation, 2002. http://www.apache.org/.
[3] D. Barbara, R. Goel, and S. Jajodia. Mining Malicious Data Corruption with Hidden Markov Models. In 16th Annual IFIP WG 11.3 Working Conference on Data and Application Security, Cambridge, England, July 2002.
[4] Patrick Billingsley. Probability and Measure. Wiley-Interscience, 3rd edition, April 1995.
[5] CERT/CC. “Code Red Worm” Exploiting Buffer Overflow In IIS Indexing Service DLL. Advisory CA-2001-19, July 2001.
[6] CGI Security Homepage. http://www.cgisecurity.com/, 2002.
[7] K. Coar and D. Robinson. The WWW Common Gateway Interface, Version 1.1. Internet Draft, June 1999.
[8] csSearch. http://www.cgiscript.net/.
[9] Cyberstrider WebWho. http://www.webwho.co.uk/.
[10] D.E. Denning. An Intrusion Detection Model. IEEE Transactions on Software Engineering, 13(2):222–232, February 1987.
[11] R. Fielding et al. Hypertext Transfer Protocol – HTTP/1.1. RFC 2616, June 1999.
[12] S. Forrest. A Sense of Self for UNIX Processes. In Proceedings of the IEEE Symposium on Security and Privacy, pages 120–128, Oakland, CA, May 1996.
[13] A.K. Ghosh, J. Wanken, and F. Charron. Detecting Anomalous and Unknown Intrusions Against Programs. In Proceedings of the Annual Computer Security Applications Conference (ACSAC’98), pages 259–267, Scottsdale, AZ, December 1998.
[14] K. Ilgun, R.A. Kemmerer, and P.A. Porras. State Transition Analysis: A Rule-Based Intrusion Detection System. IEEE Transactions on Software Engineering, 21(3):181–199, March 1995.
[15] IMP Webmail Client. http://www.horde.org/imp/.
[16] H. S. Javitz and A. Valdes. The SRI IDES Statistical Anomaly Detector. In Proceedings of the IEEE Symposium on Security and Privacy, May 1991.
[17] C. Ko, M. Ruschitzka, and K. Levitt. Execution Monitoring of Security-Critical Programs in Distributed Systems: A Specification-based Approach. In Proceedings of the 1997 IEEE Symposium on Security and Privacy, pages 175–187, May 1997.
[18] C. Kruegel, T. Toth, and E. Kirda. Service Specific Anomaly Detection for Network Intrusion Detection. In Symposium on Applied Computing (SAC). ACM Scientific Press, March 2002.
[19] T. Lane and C.E. Brodley. Temporal sequence learning and data reduction for anomaly detection. In Proceedings of the 5th ACM conference on Computer and communications security, pages 150–158. ACM Press, 1998.
[20] W. Lee and S. Stolfo. A Framework for Constructing Features and Models for Intrusion Detection Systems. ACM Transactions on Information and System Security, 3(4), November 2000.
[21] W. Lee, S. Stolfo, and K. Mok. Mining in a Data-flow Environment: Experience in Network Intrusion Detection. In Proceedings of the 5th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining (KDD ’99), San Diego, CA, August 1999.
[22] J. Liberty and D. Hurwitz. Programming ASP.NET. O’REILLY, February 2002.
[23] U. Lindqvist and P.A. Porras. Detecting Computer and Network Misuse with the Production-Based Expert System Toolset (P-BEST). In IEEE Symposium on Security and Privacy, pages 146–161, Oakland, California, May 1999.
[24] Miva HtmlScript. http://www.htmlscript.com/.
[25] V. Paxson. Bro: A System for Detecting Network Intruders in Real-Time. In Proceedings of the 7th USENIX Security Symposium, San Antonio, TX, January 1998.
[26] Phorum: PHP Message Board. http://www.phorum.org/.
[27] PHP Advisory Homepage. http://www.phpadvisory.com/, 2002.
[28] M. Roesch. Snort - Lightweight Intrusion Detection for Networks. In Proceedings of the USENIX LISA ’99 Conference, November 1999.
[29] Security Focus Homepage. http://www.securityfocus.com/, 2002.
[30] Andreas Stolcke and Stephen Omohundro. Hidden Markov Model Induction by Bayesian Model Merging. Advances in Neural Information Processing Systems, 1993.
[31] Andreas Stolcke and Stephen Omohundro. Inducing Probabilistic Grammars by Bayesian Model Merging. In Conference on Grammatical Inference, 1994.
[32] K. Tan and R. Maxion. ”Why 6?” Defining the Operational Limits of Stide, an Anomaly-Based Intrusion Detector. In Proceedings of the IEEE Symposium on Security and Privacy, pages 188–202, Oakland, CA, May 2002.
[33] Robert Tarjan. Depth-First Search and Linear Graph Algorithms. SIAM Journal of Computing, 1(2):10–20, June 1972.
[34] Security Tracker. Vulnerability statistics April 2001-march 2002. http://www.securitytracker.com/learn/statistics.html, April 2002.
[35] N. Ye, Y. Zhang, and C. M. Borror. Robustness of the Markov chain model for cyber attack detection. IEEE Transactions on Reliability, 52(3), September 2003.