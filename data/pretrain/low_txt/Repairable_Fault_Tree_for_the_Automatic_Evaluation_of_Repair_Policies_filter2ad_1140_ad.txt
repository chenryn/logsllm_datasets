### The Second Repair Policy: Single (Basic) Event Repair Time with Infinite Repair Facilities (SRT-I)

The second repair policy, referred to as Single (Basic) Event Repair Time with Infinite Repair Facilities (SRT-I, Fig. 4), requires a repair rate for each arc connecting the Repair Box (RB) to the basic events. Each basic event is repaired individually, and the repair process concludes when all basic events in the coverage set are restored. In this model, an initial time period elapses, representing the time required to initiate the repair after a subsystem failure. Subsequently, the single basic event repair is enabled (timed transition RepBE) with no restrictions on the number of parallel repair processes, adhering to the infinite repair facilities hypothesis. Each basic event is repaired at its specified repair rate.

### The Third Repair Policy: Single (Basic) Event Repair Time with Finite Repair Facilities (SRT-F)

The third and final repair policy, Single (Basic) Event Repair Time with Finite Repair Facilities (SRT-F, Fig. 5), also requires a repair rate for each arc connecting the RB to the basic events. Additionally, a parameter (Nrf) is introduced to indicate the number of available repair facilities. As in the previous policy, each basic event is repaired separately, and the repair process ends when all basic events in the set are repaired. However, only Nrf repairs can occur in parallel, which affects the total repair time. A "free repair facilities" place (RepFac) is included in the Generalized Petri Net (GPS), initially marked with the number of available repair facilities. The basic event repair subnets in the Stochastic Petri Net (SPS) are augmented with an immediate transition (GetRepFac) used to acquire a repair facility. The facility is released when the basic event repair (timed) transition fires. Note that multiple BE repair subnets will be present, and the GetRepFac immediate transitions from different BE subnets will compete for the repair facilities. By setting their priority and/or probability, different repair order strategies can be modeled.

### An Example

To illustrate the steps described in the previous sections, we apply the proposed technique to a simple example of a redundant multiprocessor computing system. The configuration consists of three main subsystems connected by two communication buses. Each subsystem is equipped with one CPU, a redundant disk, and a redundant memory. The system structure is shown in Fig. 6, and the Fault Tree (FT) for the system is depicted in Fig. 7. In the FT, the triangles represent replicas of the subtree connected to SUB1. Our policies assume that the desired repair action will be applied whenever a subsystem fails, and the repair action will be performed on all its components.

Three different types of repair models have been built and analyzed, varying some parameters to compare results and choose the most effective configuration. The fault and repair rates are provided in Table 3. The steady-state analysis results (Table 4) show that the simplest repair policy (GRT with an average global repair time equal to the setup time of the other policies) yields a subsystem fault probability of \(1.257 \times 10^{-6}\). A more realistic SRT-I policy, where every component requires its own repair time, shows a result of \(4.127 \times 10^{-7}\), and a similar result can be obtained with an equivalent SRT-F with at least 2 repair facilities. The presence of a single repair facility results in a fault probability of \(2.228 \times 10^{-7}\), losing 23% compared to the situation with two facilities.

Another measure of interest is the fault probability at time \(t\) of the whole system, which includes non-repairable network components and can only be studied through transient analysis. The steady-state analysis of a (sub)system is meaningful if it can be recovered after a failure by an RB. For a Common Subsystem Module (CSM), the steady-state analysis will always yield a probability of failure of 1 because there are no repairable components inside the CSM. For a Subsystem Module (SSM), the steady-state analysis provides a significant result if the RB returns the subsystem to a working state after a failure, even if not all basic components are fully recovered. This occurs when every Minimal Cut Set (MCS) of the SSM includes at least one repairable basic event, and the trigger event of the RB is activated when such an MCS has occurred. If the MCS occurrence activates the RB, at least one component is repaired, and the subsystem can return to a working state. For the RFT in Fig. 7, the steady-state analysis for the whole system failure probability would return 1 due to the presence of the CSM whose root is the event called BUS. Therefore, significant results are obtained through transient analysis, as shown in Fig. 8, which depicts the failure probability of the whole system as a function of time.

### Conclusions and Future Work

In this paper, we introduced an extension to the Fault Tree (FT) formalism, called RFT, which can be used in Fault Tree Analysis (FTA) to model and evaluate repair policies for systems. A formal definition has been proposed, and the simplifying hypotheses under which our current solution method for RFT works have been clearly stated. The technique is supported by an enhanced solution algorithm based on the minimization of state space computing needs. The algorithm has been implemented within a post-processor that can be integrated into the OsMoSys framework. The post-processor uses GreatSPN for the state space part of the solution process and SHARPE for the combinatorial part. An example has been illustrated to demonstrate the results that can be obtained. Three repair models have been built and analyzed, and the obtained results have been discussed to suggest trade-off criteria for system design choices. Our next step will be to extend the solution technique to remove the simplifying hypotheses stated in Section 3. Further extensions will integrate RFT with Parametric Fault Trees (PFT) and Dynamic Fault Trees (DFT). Another extension will include diverse triggering conditions in the RFT formalism, possibly not corresponding to any event in the FT, to enable RFT models to represent predictive maintenance by observing sensible events or to model situations where a component is repairable only before a critical crash or with different policies before and after a critical crash.

**Acknowledgments:**
The work of D. Codetta Raiteri and G. Franceschinis was partially funded by the MIUR FIRB project "Perf." The work of M. Iacono was partially funded by the Centro Regionale Di Competenza per l’ICT of Regione Campania local government.

**References:**
[1] Anand and A. K. Somani. Hierarchical analysis of fault trees with dependencies, using decomposition. In Proc Annual Reliability and Maintainability Symposium, pages 69–75, 1998.
[2] A. Bobbio, G. Franceschinis, R. Gaeta, and G. Portinale. Parametric fault tree for the dependability analysis of redundant systems and its high-level petri net semantics. IEEE Transactions on Software Engineering, 29(3):270–287, March 2003.
[3] A. Bobbio and D. Codetta Raiteri. Parametric fault-trees with dynamic gates and repair boxes. In Proc. Reliability and Maintainability Symposium, 459–465, Los Angeles, CA USA, Jan. 2004.
[4] G. Chiola, C. Dutheillet, G. Franceschinis, and S. Haddad. Stochastic well-formed colored nets and symmetric modeling applications. IEEE Transactions on Computers, 42:1343–1360, 1993.
[5] G. Chiola, G. Franceschinis, R. Gaeta, and M. Ribaudo. GreatSPN 1.7: Graphical Editor and Analyzer for Timed and Stochastic Petri Nets. Performance Evaluation, special issue on Performance Modeling Tools, 24(1&2):47–68, November 1995.
[6] J. B. Dugan, K. J. Sullivan, and D. Coppit. Developing a low-cost high-quality software tool for dynamic fault-tree analysis. IEEE Transactions on Reliability, 49:49–59, 2000.
[7] J. B. Dugan, S. J. Bavuso, and M. A. Boyd. Dynamic fault-tree models for fault-tolerant computer systems. IEEE Transactions on Reliability, 41:363–377, 1992.
[8] Y. Dutuit and A. Rauzy. A linear-time algorithm to find modules of fault trees. IEEE Transactions on Reliability, 45:422–425, 1996.
[9] G. Franceschinis, M. Gribaudo, M. Iacono, N. Mazzocca, and V. Vittorini. Towards an object-based multi-formalism multi-solution modeling approach. In Proc. of the 2nd Workshop on Modelling of Objects, Components and Agents, MOCA02, Aarhus, DK, August 2002.
[10] R. Manian, D. W. Coppit, K. J. Sullivan, and J. B. Dugan. Bridging the gap between systems and dynamic fault tree models. In Proc. IEEE Annual Reliability and Maintainability Symposium, pages 105–111, 1999.
[11] R.A. Sahner, K.S. Trivedi, and A. Puliafito. Performance and Reliability Analysis of Computer Systems; An Example-based Approach Using the SHARPE Software Package. Kluwer Academic Publisher, 1996.
[12] M. Ajmone Marsan, G. Balbo, G. Conte, S. Donatelli, and G. Franceschinis. Modelling with Generalized Stochastic Petri Nets. J. Wiley and Sons, 1995.
[13] D. P. Siewiorek and R. S. Swarz. Reliable Computer Systems: Design and Evaluation. Digital Press, 1992.
[14] V. Vittorini, G. Franceschinis, M. Gribaudo, M. Iacono, and N. Mazzocca. Drawnet++: Model objects to support performance analysis and simulation of complex systems. In Proc. of the 12th Int. Conference on Modelling Tools and Techniques for Computer and Communication System Performance Evaluation (TOOLS 2002), London, UK, April 2002.
[15] V. Vittorini, M. Iacono, N. Mazzocca, and G. Franceschinis. OsMoSys: a new approach to multi-formalism modeling of systems. Journal of Software and System Modeling, vol. 3(1):68–81, March 2004.