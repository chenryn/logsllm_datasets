### Requirement for Known Faulted Iterations

To effectively exploit a fault, it is necessary to know the number of faulted iterations. Given this fault condition and an abstract algorithmic description of the ECDSA (Elliptic Curve Digital Signature Algorithm), our tool identifies that forcing the branch condition at line 5 (Figure 5) to false for a specific number of iterations towards the end of the loop can yield an exploitable result. More generally, if line 6 or its implementation is faulted such that it computes \( R_0 \leftarrow \pm R_0 \) instead of \( R_0 \leftarrow R_0 + P \), the same exploitable result can be achieved.

### Faults in Point Addition

This observation leads us to consider more concrete refinements of the point addition algorithm. Specifically, we examine a register-level algorithm for Jacobian-Jacobian point addition, as presented by Murdica [35, Algorithm 36]. This algorithm, detailed in the extended version of this paper, is only valid when applied to distinct curve points that are not at infinity or inverses of each other.

In an implementation where the partial point addition algorithm is wrapped in tests ensuring it is applied correctly (i.e., \( Q, R \neq \infty \) and \( Q \neq \pm R \)), our tool quickly finds that faulting the conditional checks is sufficient to force the fault condition. By faulting the test that checks whether the second argument is infinite, we can easily force the wrapped addition algorithm to return its first argument, thereby forcing the fault condition.

However, since the base point \( P \) is of order \( q \) and \( R_0 \) is always a scalar multiple of \( P \), these checks can be optimized away when the addition algorithm is used for scalar multiplication. With the additional condition that none of the scalar multiples of \( P \) lie on the vertical axis, our tool finds null faults and some combined models involving null faults and instruction skips, which lead to the faulted computation of \( R_0 + P \) returning \( -R_0 \). Performing this fault during the last iterations of the Double-and-Add loop then yields a faulted ECDSA signature that fulfills fault condition 4(2) and can be used in a lattice-based attack. Our tool generates a list of over 100 ways to fault point addition such that the faulted ECDSA signature meets fault condition 4(2).

### Related Work

#### Formal Methods for Cryptography

This work is closely related to recent articles that apply formal methods to fault attacks. However, our focus is on discovering fault attacks against implementations, whereas other works aim to prove the absence of fault attacks against algorithmic descriptions or implementations. For instance, Christoﬁ, Chetali, Goubin, and Vigilant [15] and Rauzy and Guilley [40] independently prove the absence of fault attacks against RSA-CRT with the Vigilant countermeasure. In a similar vein, Moro et al. [33] propose an approach based on redundancy to protect implementations against instruction skip attacks. More recently, Barthe, Dupressoir, Fouque, Grégoire, Tibouchi, and Zapalowicz [6] formally verify the security of RSA-PSS against non-random faults using EasyCrypt [8].

Another series of papers use type systems and SMT solvers to verify whether cryptographic implementations are correctly masked [34, 10, 18]. Eldib and Wang [17] have developed a method for synthesizing masking countermeasures.

#### Synthesis

Program synthesis is an active area of research that has seen rapid and significant progress due to novel and practically achievable approaches and advances in SMT solvers. Unlike early works that pursued deductive program synthesis, where the program is extracted from the proof of a theorem, typically a ∀∃ statement, most current work focuses on inductive program synthesis and uses SMT solvers. Many inductive synthesis works, especially earlier ones, focused on loop-free programs [43, 23, 24]. Recent works, such as Srivastava, Gulwani, and Foster [44], allow synthesizing programs with loops, combining inference of loop invariants and synthesis of loop-free programs. However, this approach is limited to programs with loop invariants that fall into a restricted class of assertions.

Syntax-guided program synthesis [1] is a recently proposed framework that subsumes many previous approaches to synthesis. One ambition of this project is to develop a framework for testing and comparing different implementations, providing a common input format inspired by SMT-LIB for synthesis tools. In the future, it would be interesting to suggest automated discovery of fault attacks as a challenge for syntax-guided synthesis competitions.

Our approach shares many similarities with program repair, an instance of program synthesis that aims to automatically eliminate deficiencies in code. Informally, a program repair algorithm takes a program \( p \) and a property \( \phi \) that must be satisfied by the output of \( p \), and computes, through small successive modifications of \( p \), a program \( p' \) that satisfies \( \phi \). There are many approaches to program repair, some based on genetic algorithms [29] and others on code contracts [46]. The connection with program repair is very direct; indeed, one can even view faulted implementations as a form of program repair for the attacker. However, the techniques used in program repair are not immediately applicable to finding fault attacks on cryptographic implementations.

### Concluding Remarks

We have presented a new approach to automatically discover fault attacks on cryptographic implementations. The technical core of our approach is a new and practical form of program synthesis. Our tool successfully discovers new and interesting attacks. An exciting direction for future work is to apply our tool to a broader class of implementations. Additionally, there are several avenues for improving and extending our tool, such as integrating state-of-the-art invariant generation and synthesis techniques and implementing a synthesis algorithm based on relational verification to handle relational fault conditions, i.e., fault conditions that relate faulted and valid signatures. Although cast in a different context, the work reported in [5] provides an excellent starting point. Another direction would be to use synthesis for discovering countermeasures against fault attacks, as done in [18] for side-channel attacks.

While this paper focuses on public key cryptography, our method can also be applied to symmetric settings. Finding good fault conditions and dealing with the considerable size of the implementations would make such an application challenging but should allow for relatively easy discovery of attacks on the last few rounds of computation.

### Acknowledgments

The work of Barthe and Dupressoir has been partially supported by ONR grant N00014-12-1-0914, Madrid regional project S2009TIC-1465 PROMETIDOS, and Spanish projects TIN2009-14599 DESAFIOS 10 and TIN2012-39391-C04-01 Strongsoft.

### References

[1] R. Alur, R. Bodík, G. Juniwal, M. M. K. Martin, M. Raghothaman, S. A. Seshia, R. Singh, A. Solar-Lezama, E. Torlak, and A. Udupa. Syntax-guided synthesis. In FMCAD, pages 1–17. IEEE, 2013.
[2] R. J. Anderson and M. G. Kuhn. Low cost attacks on tamper resistant devices. In Security Protocols Workshop, pages 125–136, 1997.
[3] A. Barenghi, G. Bertoni, A. Palomba, and R. Susella. A novel fault attack against ECDSA. In HOST, pages 161–166, 2011.
[4] A. Barenghi, G. M. Bertoni, L. Breveglieri, and G. Pelosi. A fault induction technique based on voltage underfeeding with application to attacks against AES and RSA. Journal of Systems and Software, 86(7):1864–1878, 2013.
[5] G. Barthe, J. M. Crespo, S. Gulwani, C. Kunz, and M. Marron. From relational verification to SIMD loop synthesis. In PPOPP, pages 123–134. ACM, 2013.
[6] G. Barthe, F. Dupressoir, P.-A. Fouque, B. Grégoire, M. Tibouchi, and J.-C. Zapalowicz. Making RSA-PSS provably secure against non-random faults. Cryptology ePrint Archive, Report 2014/252, 2014. http://eprint.iacr.org/2014/252.
[7] G. Barthe, F. Dupressoir, P.-A. Fouque, B. Gregoire, and J.-C. Zapalowicz. Synthesis of fault attacks on cryptographic implementations. Cryptology ePrint Archive, Report 2014/436, 2014. http://eprint.iacr.org/2014/436.
[8] G. Barthe, B. Grégoire, S. Heraud, and S. Z. Béguelin. Computer-aided security proofs for the working cryptographer. In P. Rogaway, editor, CRYPTO 2011, volume 6841 of LNCS, pages 71–90. Springer, Aug. 2011.
[9] A. Bauer, E. Jaulmes, E. Prouff, and J. Wild. Horizontal collision correlation attack on elliptic curves. In Selected Areas in Cryptology. Springer, 2013.
[10] A. G. Bayrak, F. Regazzoni, D. Novo, and P. Ienne. Sleuth: automated verification of software power analysis countermeasures. In Cryptographic Hardware and Embedded Systems-CHES 2013, pages 293–310. Springer, 2013.
[11] M. Bellare and P. Rogaway. The security of triple encryption and a framework for code-based game-playing proofs. In S. Vaudenay, editor, EUROCRYPT 2006, volume 4004 of LNCS, pages 409–426. Springer, May / June 2006.
[12] I. Biehl, B. Meyer, and V. Müller. Differential fault attacks on elliptic curve cryptosystems. In M. Bellare, editor, CRYPTO 2000, volume 1880 of LNCS, pages 131–146. Springer, Aug. 2000.
[13] D. Boneh, R. A. DeMillo, and R. J. Lipton. On the importance of checking cryptographic protocols for faults (extended abstract). In W. Fumy, editor, EUROCRYPT’97, volume 1233 of LNCS, pages 37–51. Springer, May 1997.
[14] E. Brier, D. Naccache, P. Q. Nguyen, and M. Tibouchi. Modulus fault attacks against RSA-CRT signatures. In B. Preneel and T. Takagi, editors, CHES 2011, volume 6917 of LNCS, pages 192–206. Springer, Sept. / Oct. 2011.
[15] M. Christofi, B. Chetali, L. Goubin, and D. Vigilant. Formal verification of a CRT-RSA implementation against fault attacks. J. Cryptographic Engineering, 3(3):157–167, 2013.
[16] M. Ciet and M. Joye. Elliptic curve cryptosystems in the presence of permanent and transient faults. Designs, Codes and Cryptography, 36(1):33–43, 2005.
[17] H. Eldib and C. Wang. Synthesis of masking countermeasures against side channel attacks. In Computer Aided Verification (CAV’14). Springer, 2014. To appear.
[18] H. Eldib, C. Wang, and P. Schaumont. SMT-based verification of software countermeasures against side-channel attacks. In Tools and Algorithms for the Construction and Analysis of Systems, pages 62–77. Springer, 2014.
[19] P.-A. Fouque, N. Guillermin, D. Leresteux, M. Tibouchi, and J.-C. Zapalowicz. Attacking RSA-CRT signatures with faults on Montgomery multiplication. In E. Prouff and P. Schaumont, editors, CHES 2012, volume 7428 of LNCS, pages 447–462. Springer, Sept. 2012.
[20] P.-A. Fouque, D. Leresteux, and F. Valette. Using faults for buffer overflow effects. In SAC, pages 1638–1639, 2012.
[21] P.-A. Fouque, G. Martinet, and G. Poupard. Attacking unbalanced RSA-CRT using SPA. In C. D. Walter, Çetin Kaya Koç, and C. Paar, editors, CHES 2003, volume 2779 of LNCS, pages 254–268. Springer, Sept. 2003.
[22] N. Gama and P. Q. Nguyen. Predicting lattice reduction. In N. P. Smart, editor, EUROCRYPT 2008, volume 4965 of LNCS, pages 31–51. Springer, Apr. 2008.
[23] S. Gulwani, S. Jha, A. Tiwari, and R. Venkatesan. Synthesis of loop-free programs. In PLDI, 2011.
[24] S. Jha, S. Gulwani, S. Seshia, and A. Tiwari. Oracle-guided component-based program synthesis. In ICSE, 2010.
[25] M. Joye, A. K. Lenstra, and J.-J. Quisquater. Chinese remaindering based cryptosystems in the presence of faults. Journal of Cryptology, 12(4):241–245, 1999.
[26] M. Joye and M. Tunstall, editors. Fault Analysis in Cryptography. Information Security and Cryptography. Springer, 2012.
[27] J. C. Lagarias. The computational complexity of simultaneous Diophantine approximation problems. In 23rd FOCS, pages 32–39. IEEE Computer Society Press, Nov. 1982.
[28] C. Le Goues, S. Forrest, and W. Weimer. Current challenges in automatic software repair. Software Quality Journal, 21:421–443, 2013.
[29] C. Le Goues, T. Nguyen, S. Forrest, and W. Weimer. Genprog: A generic method for automatic software repair. IEEE Transactions on Software Engineering, 38:54–72, 2012.
[30] A. Lenstra, H. Lenstra, and L. Lovász. Factoring polynomials with rational coefficients. Math. Ann., 261:515–534, 1982.
[31] D. Maimut, C. Murdica, D. Naccache, and M. Tibouchi. Fault attacks on projective-to-affine coordinates conversion. In COSADE, pages 46–61, 2013.
[32] P. L. Montgomery. Modular multiplication without trial division. Mathematics of Computation, 44:519–521, 1985.
[33] N. Moro, K. Heydemann, E. Encrenaz, and B. Robisson. Formal verification of a software countermeasure against instruction skip attacks. Journal of Cryptographic Engineering, pages 1–12, 2014.
[34] A. Moss, E. Oswald, D. Page, and M. Tunstall. Compiler assisted masking. In CHES, pages 58–75. Springer, 2012.
[35] C. Murdica. Physical Security of Elliptic Curve Cryptography. PhD thesis, Télécom ParisTech, 2014.
[36] D. Naccache, P. Q. Nguyen, M. Tunstall, and C. Whelan. Experimenting with faults, lattices and the DSA. In S. Vaudenay, editor, PKC 2005, volume 3386 of LNCS, pages 16–28. Springer, Jan. 2005.
[37] P. Q. Nguyen and J. Stern. Merkle-Hellman revisited: A cryptoanalysis of the Qu-Vanstone cryptosystem based on group factorizations. In B. S. Kaliski Jr., editor, CRYPTO’97, volume 1294 of LNCS, pages 198–212. Springer, Aug. 1997.
[38] P. Q. Nguyen and J. Stern. Lattice reduction in cryptology: An update. In ANTS, pages 85–112, 2000.
[39] D. Page and F. Vercauteren. Fault and side-channel attacks on pairing based cryptography. Cryptology ePrint Archive, Report 2004/283, 2004. http://eprint.iacr.org/2004/283.
[40] P. Rauzy and S. Guilley. A formal proof of countermeasures against fault injection attacks on CRT-RSA. Journal of Cryptographic Engineering, pages 1–13, 2013.
[41] J.-M. Schmidt and M. Medwed. A fault attack on ECDSA. In Fault Diagnosis and Tolerance in Cryptography (FDTC), 2009 Workshop on, pages 93–99, Sept 2009.
[42] C.-P. Schnorr and M. Euchner. Lattice basis reduction: Improved practical algorithms and solving subset sum problems. Math. Program., 66:181–199, 1994.
[43] A. Solar-Lezama, R. M. Rabbah, R. Bodík, and K. Ebcioglu. Programming by sketching for bit-streaming programs. In PLDI, 2005.
[44] S. Srivastava, S. Gulwani, and J. S. Foster. From program verification to program synthesis. In POPL, 2010.
[45] W. Stein et al. Sage Mathematics Software (Version 4.8). The Sage Development Team, 2012. http://www.sagemath.org.
[46] Y. Wei, Y. Pei, C. A. Furia, L. S. Silva, S. Buchholz, B. Meyer, and A. Zeller. Automated fixing of programs with contracts. In ISSTA, pages 61–72. ACM, 2010.