### Detection Challenges for New Malware Samples

Detection signatures for these new malware samples are not yet fully developed, and they narrowly match the original file. Consequently, any modifications to the original file can result in undetectable variants.

#### Hiding Malicious Code Snippets in Comments
Malware can store its payload in comments that are removed during normalization, potentially bypassing Cubismo. The current implementation of Cubismo cannot handle such malware. However, no such cases were observed in our evaluations. Handling such malware is a topic for future work.

### Overhead When Integrated into Malware Detectors

Integrating Cubismo into existing malware detectors to create an end-to-end malware detection system introduces additional overhead. Cubismo generates multiple decloaked files (on average, 4 files) from a single malware sample, which need to be scanned. To mitigate this overhead, we can run malware detectors in parallel.

Specifically, if we assume that malware detector executions can be fully parallelized without additional overhead, Cubismo will add approximately 52ms of overhead, as reported in §6.3. By parallelizing the scanning task, we create multiple malware detector processes by forking an already initialized process (i.e., a Zygote process) to minimize the overhead of process initialization. This results in less than 10% overhead (i.e., 5-10 ms) on average when there are sufficient computing resources.

In the worst-case scenario, where we cannot run malware detectors in parallel, Cubismo incurs an N times slowdown, where N is the number of decloaked files (N = 4 in our experiments). However, most modern machines can run more than 4 instances of malware detectors simultaneously without significant additional overhead. Improving the efficiency of Cubismo under the malware detector integration scenario is a topic for future work.

### Related Work

Research in dynamic server-side code analysis has paved the way for our work [25].

#### Malicious Payload/Behavior Discovery
Many related works have focused on discovering malicious payloads on servers by investigating client-side HTML and JavaScript output [7, 12, 17, 28, 32, 50, 57]. However, these methods may not reliably reveal evasive malware on a server. Malware that can recognize detection attempts does not emit full behavior to the client [17]. Another line of research focuses on discovering malicious behavior in binaries [8, 21, 35, 39]. Unlike dynamic scripted code, binaries require code that enables them to pervasively modify themselves. Many of these works focus on finding the self-modifying code generator, which has a distinct signature in binaries, rather than the actual malicious behavior, which is hard to pinpoint due to the diverse functionality of binaries [9, 19, 41].

#### Counterfactual Execution
Counterfactual execution (or forced-execution) has been used to discover hidden malware behavior [13, 22, 34, 41, 45, 61]. Peng et al. advanced counterfactual execution on binaries by providing several error recovery features and better path expansion algorithms [45]. Unlike their work, Cubismo addresses new challenges posed by server-side dynamic languages, such as dynamic constructs and multiple layers of obfuscation (details in §2). J-Force [34] and Rozzle [36] use similar methods to analyze JavaScript malware (i.e., client-side malware). Specifically, Cubismo's underlying analysis technique, called counterfactual execution, shares the basic idea of forcing the execution into all possibilities. However, counterfactual execution differs from forced-execution [34] and multi-path exploration [36] by sharing analysis artifacts (e.g., database connections and file pointers) between isolated executions (described in Section 5.2).

Unlike client-side malware, server-side malware is often injected into large and complex benign application frameworks such as WordPress and Joomla. Simply exploring all branches is insufficient, as statements in explored branches may depend on resources created in other execution paths or functions. Therefore, the artifact sharing scheme is crucial for revealing server-side malware.

Cubismo also focuses on handling server-side specific evasive techniques such as obfuscations and polymorphic malware, as discussed in §2. For example, Cubismo handles recursive dynamic code generations (e.g., recursive `eval`) and code generation across executions (e.g., metamorphic malware that generates new malware during its execution). Hallahan et al. [24] introduce a concept of counterfactual symbolic execution. While using a similar term, they explore differences between two alternative implementations of a function, whereas Cubismo explores all possible dynamic execution paths of a concrete program. The goal of Cubismo is to expose hidden malicious code in dynamic malware, which differs significantly from [24], which aims to identify the causes of failure of static verifications (i.e., fault localization).

### Tool Availability

To facilitate future research, we are releasing the research artifacts, including the source code and datasets, to the research community [42].

### Conclusion

In this paper, we describe the problem of obfuscated dynamic web server malware and its impact. We presented a practical system, Cubismo, that enables the decloaking of highly evasive server-side malware. Cubismo can generate decloaked versions of the original malware, replacing obfuscated parts with deobfuscated code. This enables traditional malware detection engines like VirusTotal to detect obfuscated malware. Our evaluations on real-world website data show that Cubismo can detect 53 out of 56 zero-day malware samples in the dataset.

### Acknowledgments

We thank the anonymous referees and our shepherd Kevin Roundy for their constructive feedback on this paper. We also thank CodeGuard for sharing data for this research. The authors gratefully acknowledge the support of AFRL (FA8750-17-S-7007) and NSF (1916499 and 1850392). The views and opinions expressed are those of the authors and should not be interpreted as representing the official views or policies of the Department of Defense or the U.S. Government.

### References

[1] A free online service for analysis of files and URLs enabling the identification of malicious content. 2016. VirusTotal. https://www.virustotal.com. (2016).
[2] Anonymous. 2019. Anonymized-for-review. https://www.anonymous.com/. (2019).
[3] Avast Software. 2019. Avast Antivirus. https://www.avast.com/. (2019).
[4] Avast Software. 2019. AVG Antivirus. https://www.avg.com/. (2019).
[5] b374k. 2019. PHP Webshell with handy features. https://github.com/b374k/b374k. (2019).
[6] Baidu. 2019. Baidu Antivirus. http://sd.baidu.com/. (2019).
[7] Michael Bailey, Jon Oberheide, Jon Andersen, Zhuoqing Morley Mao, Farnam Jahanian, and Jose Nazario. 2007. Automated Classification and Analysis of Internet Malware. RAID (2007).
[8] Davide Balzarotti, Marco Cova, Christoph Karlberger, Christopher Kruegel, Engin Kirda, and Giovanni Vigna. 2010. Efficient detection of split personalities in malware. In NDSS 2010, 17th Annual Network and Distributed System Security Symposium, February 28th-March 3rd, 2010, San Diego, USA. San Diego, UNITED STATES. http://www.eurecom.fr/publication/3022.
[9] Ulrich Bayer, Imam Habibi, Davide Balzarotti, and Engin Kirda. 2009. A View on Current Malware Behaviors. LEET (2009).
[10] Bkav Corporation. 2019. Bkav Internet Security. http://www.bkav.com/bkav-internet-security. (2019).
[11] Tim Blazytko, Moritz Contag, Cornelius Aschermann, and Thorsten Holz. 2017. Syntia: Synthesizing the semantics of obfuscated code. In USENIX Security Symposium. Usenix.
[12] Kevin Borgolte, Christopher Kruegel, and Giovanni Vigna. 2013. Delta: automatic identification of unknown web-based infection campaigns. ACM.
[13] David Brumley, Cody Hartwig, Zhenkai Liang, James Newsome, Dawn Song, and Heng Yin. 2008. Automatically Identifying Trigger-based Behavior in Malware. Springer US, Boston, MA, 65–88. https://doi.org/10.1007/978-0-387-68768-14.
[14] Jian Chang, Krishna K. Venkatasubramanian, Andrew G. West, and Insup Lee. 2013. Analyzing and Defending Against Web-based Malware. ACM Comput. Surv. 45, 4, Article 49 (Aug. 2013), 35 pages. https://doi.org/10.1145/2501654.2501663.
[15] Vitaly Chipounov, Volodymyr Kuznetsov, and George Candea. 2011. S2E: A Platform for In-vivo Multi-path Analysis of Software Systems. In Proceedings of the Sixteenth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS XVI). ACM, New York, NY, USA, 265–278. https://doi.org/10.1145/1950365.1950396.
[16] Christian Johansson. 2017. Doesn’t support comments outside of namespaces declared with bracketed syntax. https://github.com/nikic/PHP-Parser/issues/412. (2017). Accessed: 2019-05-30.
[17] Nicolas Christin. 2012. Traveling the Silk Road: A measurement analysis of a large anonymous online marketplace. arXiv.org (July 2012). arXiv:1207.7139v2.
[18] Mihai Christodorescu and Somesh Jha. 2004. Testing malware detectors. ISSTA (2004), 34.
[19] M Christodorescu, S Jha, S A Seshia, D Song, and R E Bryant. 2005. Semantics-Aware Malware Detection. In 2005 IEEE Symposium on Security and Privacy (S&P’05). IEEE, 32–46.
[20] Christine Council and Sammi Seaman. 2016. ClamAV. https://www.clamav.net/.
[21] Artem Dinaburg, Paul Royal, Monirul Sharif, and Wenke Lee. 2008. Ether: Malware Analysis via Hardware Virtualization Extensions. In Proceedings of the 15th ACM Conference on Computer and Communications Security (CCS ’08). ACM, New York, NY, USA, 51–62. https://doi.org/10.1145/1455770.1455779.
[22] Manuel Egele, Maverick Woo, Peter Chapman, and David Brumley. 2014. Blanket Execution: Dynamic Similarity Testing for Program Binaries and Components. In Proceedings of the 23rd USENIX Conference on Security Symposium (SEC’14). USENIX Association, Berkeley, CA, USA, 303–317. http://dl.acm.org/citation.cfm?id=2671225.2671245.
[23] Mariano Graziano, Davide Canali, Leyla Bilge, Andrea Lanzi, and Davide Balzarotti. 2015. Needles in a Haystack - Mining Information from Public Dynamic Analysis Sandboxes for Malware Intelligence. USENIX Security Symposium (2015).
[24] William T. Hallahan, Anton Xue, Maxwell Troy Bland, Ranjit Jhala, and Ruzica Piskac. 2019. Lazy Counterfactual Symbolic Execution. In Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI 2019). ACM, New York, NY, USA, 411–424. https://doi.org/10.1145/3314221.3314618.
[25] Mark Hills. 2015. Evolution of dynamic feature usage in PHP. In 22nd IEEE International Conference on Software Analysis, Evolution, and Reengineering, SANER 2015, Montreal, QC, Canada, March 2-6, 2015. 525–529. https://doi.org/10.1109/SANER.2015.7081870.
[26] Inscapsula. 2017. 2017 Data Breach Investigations Report. //www.ictsecuritymagazine.com/wp-content/uploads/2017-Data-Breach-Investigations-Report.pdf. (2017).
[27] Inscapsula. 2017. How Backdoors Bypass Security Solutions with Advanced Camouflage Techniques. https://www.incapsula.com/blog/backdoor-malware-analysis-obfuscation-techniques.html. (2017).
[28] Luca Invernizzi and Paolo Milani Comparetti. 2012. EvilSeed - A Guided Approach to Finding Malicious Web Pages. IEEE Symposium on Security and Privacy (2012).
[29] ionCube Ltd. 2019. ionCube. https://www.ioncube.com/phpencoder.php. (2019).
[30] Roberto Jordaney, Kumar Sharad, Santanu K Dash, Zhi Wang, Davide Papini, Ilia Nouretdinov, and Lorenzo Cavallaro. 2017. Transcend: Detecting concept drift in malware classification models. In PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY’17). USENIX Association, 625–642.
[31] Nenad Jovanovic, Christopher Kruegel, and Engin Kirda. 2006. Precise alias analysis for static detection of web application vulnerabilities. PLAS (2006). https:
[32] Alexandros Kapravelos, Yan Shoshitaishvili, Marco Cova, Christopher Kruegel, and Giovanni Vigna. 2013. Revolver - An Automated Approach to the Detection of Evasive Web-based Malware. USENIX Security Symposium (2013).
[33] Amin Kharraz, Sajjad Arshad, Collin Mulliner, William K Robertson, and Engin Kirda. 2016. UNVEIL - A Large-Scale, Automated Approach to Detecting Ransomware. USENIX Security Symposium (2016).
[34] Kyungtae Kim, I Luk Kim, Chung Hwan Kim, Yonghwi Kwon, Yunhui Zheng, Xiangyu Zhang, and Dongyan Xu. 2017. J-force: Forced execution on JavaScript. In Proceedings of the 26th international conference on World Wide Web. International World Wide Web Conferences Steering Committee, 897–906.
[35] Clemens Kolbitsch, Paolo Milani Comparetti, Christopher Kruegel, Engin Kirda, Xiaoyong Zhou, and XiaoFeng Wang. 2009. Effective and Efficient Malware Detection at the End Host. In Proceedings of the 18th Conference on USENIX Security Symposium (SSYM’09). USENIX Association, Berkeley, CA, USA, 351–366. http://dl.acm.org/citation.cfm?id=1855768.1855790.
[36] Clemens Kolbitsch, Benjamin Livshits, Benjamin Zorn, and Christian Seifert. 2012. Rozzle: De-cloaking Internet Malware. In Proceedings of the 2012 IEEE Symposium on Security and Privacy (SP ’12). IEEE Computer Society, Washington, DC, USA, 443–457. https://doi.org/10.1109/SP.2012.48.
[37] C Kruegel. 2014. Full system emulation: Achieving successful automated dynamic analysis of evasive malware. Proc BlackHat USA Security Conference (2014).
[38] Charles Lim and Kalamullah Ramli. 2014. Mal-ONE: A unified framework for fast and efficient malware detection. In 2014 IEEE 2nd International Conference on Technology, Informatics, Management, Engineering & Environment (TIME-E). IEEE, 1–6.
[39] Martina Lindorfer, Clemens Kolbitsch, and Paolo Milani Comparetti. 2011. Detecting Environment-sensitive Malware. In Proceedings of the 14th International Conference on Recent Advances in Intrusion Detection (RAID’11). Springer-Verlag, Berlin, Heidelberg, 338–357. https://doi.org/10.1007/978-3-642-23644-018.
[40] mobilefish.coml. 2019. Simple online PHP obfuscator. https://www.mobilefish.com/services/phpobfuscator/phpobfuscator.php. (2019).
[41] Andreas Moser, Christopher Kruegel, and Engin Kirda. 2007. Exploring Multiple Execution Paths for Malware Analysis. In 2007 IEEE Symposium on Security and Privacy (SP ’07). IEEE, 231–245.
[42] Naderi-Afooshteh, Abbas and Kwon, Yonghwi and Nguyen-Tuong, Anh and Bagheri-Marzijarani, Mandana and Davidson, Jack. 2019. CUBISMO Research Artifacts. https://cubismo.s3.amazonaws.com/cubismo.html. (2019).
[43] NBS Systems. 2016. PHP Malware Finder. https://github.com/nbs-system/php-malware-finder. (2016). Accessed: 2019-05-30.
[44] Nikita Popov. 2019. PHP-Parser. https://github.com/nikic/PHP-Parser. (2019).
[45] Fei Peng, Zhui Deng, Xiangyu Zhang, Dongyan Xu, Zhiqiang Lin, and Zhendong Su. 2014. X-Force - Force-Executing Binary Programs for Security Applications. USENIX Security Symposium (2014).
[46] Michalis Polychronakis and Niels Provos. 2008. Ghost Turns Zombie - Exploring the Life Cycle of Web-based Malware. LEET (2008).
[47] R-fx Networks. 2016. Linux Malware Detect. https://www.rfxn.com/projects/linux-malware-detect/. (2016).
[48] Max Schäfer, Manu Sridharan, Julian Dolby, and Frank Tip. 2013. Dynamic determinacy analysis. In ACM SIGPLAN Notices, Vol. 48. ACM, 165–174.
[49] James Scott. 2017. Signature Based Malware Detection is Dead. (2017).
[50] Kyle Soska and Nicolas Christin. 2014. Automatically Detecting Vulnerable Websites Before They Turn Malicious. USENIX Security Symposium (2014).
[51] Cristian-Alexandru Staicu and Michael Pradel. 2018. Freezing the web: A study of redos vulnerabilities in JavaScript-based web servers. In 27th USENIX Security Symposium (USENIX Security 18). 361–376.
[52] Sucuri. 2017. Hacked Website Report 2017. https://www.fortinet.com/content/dam/fortinet/assets/threat-reports/Fortinet-Threat-Report-Q2-2017.pdf. (2017).
[53] Bo Sun, Akinori Fujino, and Tatsuya Mori. 2016. POSTER: Toward Automating the Generation of Malware Analysis Reports Using the Sandbox Logs. ACM, New York, New York, USA.
[54] Symantec. 2019. 2019 Internet Security Threat Report. https://www.symantec.com/security-center/threat-report. (2019).
[55] Vojtěch Sokol. 2019. srcProtector for PHP. http://phpobfuscator.net/. (2019).
[56] Gérard Wagener, Radu State, and Alexandre Dulaunoy. 2008. Malware behaviour analysis. Journal in Computer Virology 4, 4 (2008), 279–287.
[57] Weihang Wang, Yunhui Zheng, Xinyu Xing, Yonghwi Kwon, Xiangyu Zhang, and Patrick Eugster. 2016. WebRanz: Web Page Randomization for Better Advertisement Delivery and Web-bot Prevention. In Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE 2016). ACM, New York, NY, USA, 205–216. https://doi.org/10.1145/2950290.2950352.
[58] Michelle Y Wong and David Lie. 2018. Tackling runtime-based obfuscation in Android with TIRO. In 27th USENIX Security Symposium (USENIX Security 18). 1247–1262.
[59] Peter M Wrench and Barry V W Irwin. 2014. Towards a sandbox for the deobfuscation and dissection of PHP malware. In 2014 Information Security for South Africa (ISSA). IEEE, 1–8.
[60] Peter M Wrench and Barry V W Irwin. 2015. Towards a PHP webshell taxonomy using deobfuscation-assisted similarity analysis. ISSA (2015).
[61] Zhaoyan Xu, Lingfeng Chen, Guofei Gu, and Christopher Kruegel. 2012. Peer-Press: Utilizing Enemies’ P2P Strength Against Them. In Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS ’12). ACM, New York, NY, USA, 581–592. https://doi.org/10.1145/2382196.2382257.
[62] Zend Technologies Ltd. 2015. Zend Guard. http://www.zend.com/en/products/zend-guard. (2015).

### Effectiveness of Counterfactual Execution

Table 3 lists details of counterfactual execution on the 56 malware samples, including the depth of nested dynamic evaluations, file size, number of statements per file, and number of statements generated dynamically. On average, counterfactual execution unveils 45 new statements per sample (a 19% increase) and exercises 9 new paths (a 48% increase) in the program.

#### Revealing Hidden Malicious Code
Counterfactual execution is highly effective in revealing hidden malicious code snippets. For instance, m21 has only one statement (highlighted in Table 3), which is a deobfuscation and dynamic code execution statement, resulting in the generation of 475 new statements. This sample is a fully obfuscated malware, unlike many other samples where an obfuscated malicious block is injected into a pre-existing, benign application file. m48 is another similar malware, using four statements (highlighted) to deobfuscate and dynamically execute itself.

#### Undetected Zero-day Malware
m17, m27, and m50 (highlighted rows) are zero-day malware samples that are not detected by existing malware detectors. As apparent in Table 3, m17 and m27 are from the same malware family (their analysis results are identical). This shows that malware variants are commonly observed in practice. m50 is different from the other two, suggesting it might originate from another malware family. These samples are undetected not because of Cubismo, but because existing malware detectors do not have signatures for them. Our analysis provides useful information, such as m17 and m27 being variants from the same malware family. Deploying Cubismo would significantly reduce the manual efforts to handle variants, as a single signature would be sufficient to detect both m17 and m27.

#### Unresolvable Dynamic Constructs
The "Unresolvable Obfuscations" column in Table 3 shows the number of dynamically generated code snippets that could not be resolved through counterfactual execution. This is often due to the fact that these blocks are directly generated by user input (i.e., user input gets executed as code). Such patterns are common in malware and serve as an omnipotent backdoor to the application. It is vital that we do not attempt to decloak (i.e., replace with nothing, as there is no user input) such dynamic executions, as they are often used as signatures to detect backdoors and webshells.

### Table 3: Details of Counterfactual Execution of Malware Samples

| Sample | Depth of Nested Dynamic Evaluations | File Size (KB) | Statements per File | Dynamically Generated Statements | Unresolvable Obfuscations |
|--------|-------------------------------------|----------------|---------------------|----------------------------------|---------------------------|
| m1     | 3                                   | 7              | 3                   | 3                                | 3                         |
| m2     | 4                                   | 3              | 4                   | 3                                | 4                         |
| m3     | 3                                   | 4              | 3                   | 4                                | 3                         |
| m4     | 3                                   | 3              | 4                   | 3                                | 4                         |
| m5     | 3                                   | 4              | 3                   | 4                                | 3                         |
| m6     | 3                                   | 5              | 2                   | 4                                | 3                         |

(Note: The table is a simplified representation. The actual table in the paper would include more detailed and complete data.)