### Policy Reconsideration and Module Management

When a new module is added to the system, it is necessary to reconsider the entire policy. This approach is common in SELinux for Fedora, where modules are created by trusted entities and can freely modify the system policy. Consequently, the binary representation of existing types may need to be updated. However, as previously discussed, the requirements for using `appPolicyModules` in Android differ. In our scenario, an `appPolicyModule` cannot modify the system policy (Req1 in Section 5). This not only enhances security but also simplifies the management of policy modules, as there is no need to re-install the system policy and other modules. This allows for an "incremental" solution, significantly reducing the installation time for `appPolicyModules`.

### Performance Analysis

**Figure 4: Installation Time Comparison**

The graph in Figure 4 illustrates the observed installation times when the current system policy is extended with 100 modules, added one by one. The tests were conducted 100 times, and each data point in the graph represents the range of measured values and the average. As the number of modules increases, the re-compilation approach shows a significant increase in compilation time due to the growing size of the policy. In contrast, the incremental approach maintains a constant response time, unaffected by the increasing policy size. The average installation time for the incremental approach is approximately 0.2 seconds, which is compatible with real-world system requirements.

### Runtime Performance Evaluation

We evaluated the performance overhead of our approach at runtime using two well-known benchmark applications: (i) AnTuTu [1] by AnTuTu Labs and (ii) Benchmark by Softweg [16]. We ensured that the same number of apps and services were loaded and running during both benchmarks.

**Table 2: Binary Policies Used in the Tests**

| Policy            | # Rules | Size  |
|-------------------|---------|-------|
| sepolicy          | 1319    | 73KB  |
| sepolicy + 1000 APMs | 35319  | 631KB |

**Table 3: AnTuTu Benchmark (100 iterations), Higher Values Are Better**

| Test       | sepolicy      | sepolicy + 1000 APMs |
|------------|---------------|----------------------|
| svm        | 1130.467      | 1132.867             |
| smt        | 3334.533      | 3341.400             |
| database   | 630.600       | 631.333              |
| sram       | 1534.840      | 1538.533             |
| float      | 1938.600      | 1939.200             |
| snand      | 1159.320      | 1159.400             |
| memory     | 1121.280      | 1120.800             |
| integer    | 2285.933      | 2284.133             |

AnTuTu Benchmark is a popular Android utility for benchmarking devices. As explained in [15], the overhead introduced by SELinux is minimal and primarily affects sd-write, sdread, and database I/O tests. The tests by Smalley et al. consider a "static" policy. In our scenario, the policy size changes with each installation and can become quite large. However, experimental results show that the policy size does not impact system performance. Table 3 presents the benchmark results, indicating that the larger policy does not have a detectable effect on performance.

**Table 4: Softweg Benchmark (100 iterations): Total File System Score, Higher Values Are Better**

| Operation                   | sepolicy  | sepolicy + 1000 APMs |
|-----------------------------|-----------|----------------------|
| Create 250 empty files       | 1.222 s   | 1.230 s              |
| Create 1000 empty files      | 0.302 s   | 0.303 s              |
| Delete 250 empty files       | 0.351 s   | 0.351 s              |
| Delete 1000 empty files      | 0.130 s   | 0.130 s              |
| Total file system score      | 342.835   | 341.158              |

Similar to the AnTuTu results, SELinux does not affect CPU and graphics scores. For filesystem and SDCard tests, the overhead introduced by the increased policy size is negligible. The time taken to create or delete 1000 empty files increased by less than 1 percent, as highlighted by the create and delete tests. As explained by Smalley et al. [15], these tests represent a worst-case scenario, as the overhead of managing the security context is not amortized over any real usage of the file.

### Related Work

In recent years, there has been significant interest in enhancing Android security. Several solutions have been proposed to protect the system and apps from various threats. The central role of the proposal by Smalley et al. [15] has already been discussed. Here, we summarize other important contributions in this area.

**TaintDroid** [8] by Enck et al. provides functions to detect unauthorized leakage of sensitive data using dynamic taint analysis. While TaintDroid identifies information leakage, our proposal goes further by preventing leakage at the SELinux level.

**FlaskDroid** [6], **TrustDroid** [5], and **XManDroid** [4] are more similar to our work. FlaskDroid is a security architecture for Android that implements mandatory access control (MAC) on both middleware and kernel layers, inspired by the Flask architecture. However, it uses booleans in the SELinux policy, which is discouraged in the current SEAndroid implementation. Compared to our proposal, FlaskDroid focuses on the security of system modules and does not support third-party app security. It also does not allow dynamic addition of policy modules without recompiling the entire policy.

**TrustDroid** and **XManDroid** provide MAC at both the middleware and kernel layers, relying on TOMOYO Linux [9] for the kernel layer. TOMOYO supports policy updates at runtime, but SELinux offers a more flexible and richer security model.

**RootGuard** [14] is an enhanced root-management system that monitors system calls to detect abnormal behavior of apps with root privileges. It consists of three components: (i) SuperuserEx, (ii) Policy storage database, and (iii) Kernel module. The SuperuserEx is built on top of the open-source Superuser app, the Policy storage database stores the RootGuard policy, and the Kernel module introduces hooks to intercept system calls. This implementation is similar to SELinux, but SELinux code is already integrated into the mainline Linux kernel, providing a more robust solution.

### Conclusions

Security is a critical property of mobile operating systems, and the integration of SELinux into Android is a significant step toward more robust and flexible security services. The SEAndroid initiative has focused on protecting system components, which is consistent with the high priority of securing core privileged resources. Our approach extends this work to consider the presence of apps more comprehensively. The potential for app-specific policy modules is extensive, supporting scenarios where developers define their own policies and where policies are automatically generated to enhance privilege enforcement and app isolation. The extensive reuse of SELinux constructs in the `appPolicyModules` language demonstrates the flexibility of SELinux and facilitates the deployment of our solution. The evolution of the official SEAndroid project confirms that `appPolicyModules` address a concrete need and that Android is moving in this direction.

### Acknowledgements

This work was partially supported by a Google Research Award (winter 2014), the Italian Ministry of Research within the PRIN project "GenData 2020," and the European Commission under grant agreements 257129 and 644579.

### References

[1] AnTuTu labs. AnTuTu Benchmark. https://play.google.com/store/apps/details?id=com.antutu.ABenchMark.

[2] M. Arrigoni Neri, M. Guarnieri, E. Magri, S. Mutti, and S. Paraboschi. Conflict Detection in Security Policies using Semantic Web Technology. In Proc. of IEEE ESTEL - Security Track, 2012.

[3] M. Balanza, K. Alintanahin, O. Abendan, J. Dizon, and B. Caraig. Droiddreamlight Lurks Behind Legitimate Android Apps. In Malicious and Unwanted Software (MALWARE), 2011 6th International Conference on, pages 73–78. IEEE, 2011.

[4] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi, and B. Shastry. Towards Taming Get Off of My Market: Detecting Malicious Apps in Official and Alternative Android Markets. In NDSS, 2012.

[5] S. Bugiel, L. Davi, A. Dmitrienko, S. Heuser, A.-R. Sadeghi, and B. Shastry. Practical and Lightweight Domain Isolation on Android. In Proceedings of the 1st ACM workshop on Security and privacy in smartphones and mobile devices. ACM, 2011.

[6] S. Bugiel, S. Heuser, and A.-R. Sadeghi. Flexible and Fine-Grained Mandatory Access Control on Android for Diverse Security and Privacy Policies. In 22nd USENIX Security Symposium. USENIX, 2013.

[7] Dolphin Browser. Dolphin Browser for Android. https://play.google.com/store/apps/details?id=mobi.mgeek.TunnyBrowser.

[8] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. Sheth. Taintdroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones. In OSDI, volume 10, 2010.

[9] T. Harada, T. Horie, and K. Tanaka. Task Oriented Management Obviates Your Onus on Linux. In Linux Conference, volume 3, 2004.

[10] J. Lepreau, R. Spencer, S. Smalley, P. Loscocco, M. Hibler, and D. Andersen. The Flask Security Architecture: System Support for Diverse Security Policies, 2006.

[11] A. Ludwig. Android - Practical Security from the Ground Up, October 2013. http://goo.gl/z0RIwu.

[12] F. Mayer, K. MacMillan, and D. Caplan. SELinux by Example: Using Security Enhanced Linux (Prentice Hall Open Source Software Development Series). Prentice Hall PTR, NJ, USA, 2006.

[13] C. Mulliner, W. Robertson, and E. Kirda. VirtualSwindle: An Automated Attack against In-App Billing on Android. In Proceedings of the 9th ACM Symposium on Information, Computer and Communications Security, ASIACCS '14, pages 459–470, New York, NY, USA, 2014. ACM.

[14] Y. Shao, X. Luo, and C. Qian. RootGuard: Protecting Rooted Android Phones. Computer, 47(6):32–40, 2014.

[15] S. Smalley and R. Craig. Security Enhanced (SE) Android: Bringing Flexible MAC to Android. In Network and Distributed System Security Symposium (NDSS 13), 2013.

[16] Softweg. Benchmark. https://play.google.com/store/apps/details?id=softweg.hw.performance.

[17] Titanium Track. Titanium Backup. https://play.google.com/store/apps/details?id=com.keramidas.TitaniumBackup.

[18] C. Yang, V. Yegneswaran, P. Porras, and G. Gu. Detecting Money-Stealing Apps in Alternative Android Markets. In Proceedings of the 2012 ACM Conference on Computer and Communications Security, CCS '12, pages 1034–1036, New York, NY, USA, 2012. ACM.

[19] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang. Hey, You, Get Off of My Market: Detecting Malicious Apps in Official and Alternative Android Markets. In NDSS, 2012.