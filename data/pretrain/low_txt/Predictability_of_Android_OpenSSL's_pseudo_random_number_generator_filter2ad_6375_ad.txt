### Probability and the Security of Android OpenSSL

In this section, we analyze how the vulnerability in the Android OpenSSL's pseudo-random number generator (PRNG) affects its security. The primary concern is whether the PRNG issue poses a threat to the confidentiality of OpenSSL, particularly in the context of session key recovery.

#### 6.1 PMS Restoration

The generation of the Pre-Master Secret (PMS) varies depending on the key exchange scheme of the negotiated cipher suite. In the RSA scheme, the 46 random bytes of the PMS are generated directly by the APRNG on the client side. In the (EC)DH scheme, the PMS is computed using the client’s randomly generated private key and the server’s public key.

Notably, the random data related to the PMS are generated immediately after the ClientHello nonce. An additional time value is added to the APRNG states, which can be predicted as it is almost the same as the time of the ClientHello packet. By knowing the APRNG states after outputting the ClientHello nonce, the remaining challenge is to estimate the existing value of the output buffer.

- **Buffer Definitions:**
  - **RSA:** The buffer is a local variable.
  - **(EC)DH:** The buffer is a dynamic variable.

While tracking the values of a dynamic variable is challenging, local variables, stored in stack memory, can be more easily traced. We focus on the RSA key exchange scheme for our analysis.

**Table 5: Comparison of Buffer Memory Values**

| Example | Memory Value |
|---------|--------------|
| Case I  | 0063 00000000 6bdae5f2 0000000a 4e900379 403382cc 6bdae5f2 0000000a 4e900379 006257a0 6bdae5f2 0000000a |
| Case II | 00ed 00000000 869f1107 0000000a 4e9da379 403492cc 869f1107 0000000a 4e9da379 00529fc0 869f1107 0000000a |

**Pattern Analysis:**
- **WORD-1:** Address of a parameter of `SSL_get_server_certificate()`.
- **WORD-2:** Result when `verify_mode` of SSL is `SSL_VERIFY_NONE`, always `0x00000000`.
- **WORD-3:** Value of `stack_chk_guard` required by `locking_callback()`.
- **WORD-4:** Value of a variable used in `locking_callback()`, always `0x0000000a`.
- **WORD-5:** Starting address of `locking_callback()`.
- **WORD-6:** Address of a file where `X509_pubkey_get()` is stored when the lock is set.
- **WORD-7:** Address of memory where the signature algorithm is stored when `X509_Certificate_type()` is executed.

**Fixed and Variable Values:**
- **Fixed Values:**
  - WORD-2: `0x00000000`
  - WORD-4: `0x0000000a`
- **Variable but Predictable Values:**
  - WORD-1: Upper 7 bits are always 0.
  - WORD-5: Upper 9 and lower 12 bits are fixed.
  - WORD-6: Upper 12 and lower 12 bits are fixed.
  - WORD-7: Upper 7 and lower 3 bits are fixed.

We can estimate all variables except WORD-3 with a complexity of \(O(2^{50})\). WORD-3 (`stack_chk_guard`) is fully random but can be predicted from `ktime` and `utsname` when restoring the APRNG states. The maximum complexity for restoring the PMS is thus \(O(2^{58})\).

**Note:** This complexity is not bitwise. To verify the accuracy of the estimated unknowns, we need to calculate the session key and decrypt the SSL packets, which requires dozens of hash computations and negotiated cipher operations such as RC4 or AES. This is computationally intensive and may be feasible only for well-funded attackers.

**Improving the Attack:**
The randomness of WORD-1, 5, 6, and 7 is due to Address Space Layout Randomization (ASLR) introduced in Android 4.0. If ASLR can be predicted more accurately, the PMS recovery attack may be improved. However, this is beyond the scope of this paper and will be the subject of future work.

#### 6.2 Effect of Decrypting the First Session

If an attacker obtains the first session of HTTPS requests using the recovered session key, they can decrypt the request, including the request-line, resource identifier, HTTP header, and message bodies. The most critical part is the HTTP header, which includes cookies. Cookies store login and preference information, which can be used as authentication tokens.

An attacker can impersonate a user by stealing a full set of cookies from the recovered first session, leading to further exploitation and theft of important information.

### 7. Countermeasures

The vulnerability in the APRNG stems from:
1. Direct use of SSL CTX forked by Zygote.
2. Boot-time entropy hole of LPRNG.
3. Insufficient external entropy of APRNG.

**Countermeasure 1:**
Saving the status at shutdown and writing it back to the pools at startup can correct the boot-time entropy hole of LPRNG. This method is recommended for general Linux systems and can be implemented using scripts during system startups and shutdowns. However, this countermeasure is currently absent in Android.

**Countermeasure 2:**
Adding more entropy sources to APRNG before generating the ClientHello nonce can defeat the attack. This is also important because the Zygote forking structure in Android makes it difficult to change the initial PRNG states. Additional unpredictable entropy sources should be mixed when each application starts.

### 8. Conclusion

This paper reveals the vulnerability in the Android OpenSSL PRNG. After investigating the operating process, implementation, and entropy sources, we verified that the initial states of APRNG can be practically recovered. This discovery poses a real threat to Android, as it affects every application using OpenSSL.

Most previously revealed Android SSL vulnerabilities were application-specific and could be corrected at the application level. In contrast, the problem we identified is due to structural limits in the Android architecture and LPRNG. Further studies on memory allocation and device characteristics may reduce the complexity of practical attacks. We recommend immediate adoption of adequate countermeasures.

The security of Android is increasingly important due to the widespread use of mobile devices. Our study highlights the need for more research and improvements to ensure Android's security.

### 9. Acknowledgements

We thank Peter Gutmann and the anonymous reviewers for their valuable comments and suggestions. Dong Hoon Lee is supported by the Next-Generation Information Computing Development Program through the National Research Foundation of Korea (NRF), funded by the Ministry of Science, ICT & Future Planning (2010-0020726).

### 10. References

[1] Address space layout randomization. http://en.wikipedia.org/wiki/Address_space_layout_randomization
[2] Android debug bridge. http://developer.android.com/tools/
[3] Android Security Overview. http://source.android.com/devices/tech/security/
[4] Break DES in less than a single day. http://www.sciengines.com/company/news-a-events/74-des-in-1-day.html
[5] IDC - Press Release. http://www.idc.com/getdoc.jsp?containerId=prUS24257413
[6] OpenSSL. http://www.openssl.org/
[7] RFC 4507: Transport Layer Security (TLS) Session Resumption without Server-Side State.
[8] The Debian Project. Openssl-Predictable Random Number Generator, DSA-1571-1. Available from http://www.debian.org/security/2008/dsa-1571
[9] Trace32. http://www.lauterbach.com/
[10] N. J. Alfardan and K. G. Paterson, Plaintext-Recovery Attacks Against Datagram TLS. In Network and Distributed System Security Symposium (NDSS 2012), 2012.
[11] T. Biege. Analysis of a Strong Pseudo Random Number Generator by anatomizing Linux’ Random Number Device. Tech. rep., PhoneFactor, Inc., Nov. 2006.
[12] D. Brumley and D. Boneh. Remote Timing Attacks Are Practical. In Proceedings of the 12th conference on USENIX Security Symposium - Volume 12 (Berkeley, CA, USA, 2003), USENIX Association, 2003.
[13] B. Canvel, A. Hiltgen, S. Vaudenay, and M. Vuagnoux. Password Interception in a SSL/TLS Channel. In Proceedings of Advances in Cryptology - CRYPTO 2003, Springer-Verlag, pp. 583–599, 2003.
[14] T. Duong and J. Rizzo. Here Come the Xor Ninjas. Tech. rep., May 2011.
[15] S. Fahl, M. Harbach, T. Muders, L. Baumgärtner, B. Freisleben, and M. Smith. Why Eve and Mallory Love Android: An Analysis of Android SSL (In)Security. In Proceedings of the 2012 ACM conference on Computer and communications security, pp. 50–61, 2012.
[16] M. Georgiev, S. Iyengar, S. Jana, R. Anubhai, D. Boneh, and V. Shmatikov. The Most Dangerous Code in the World: Validating SSL Certificates in Non-browser Software. In Proceedings of the 2012 ACM conference on Computer and communications security, pp. 38–49, 2012.
[17] N. Heninger, Z. Durumeric, E. Wustrow, and J. A. Halderman. Mining Your Ps and Qs: Detection of Widespread Weak Keys in Network Devices. In Proceedings of the 21st USENIX Security Symposium, pp. 205–220, 2012.
[18] V. Klíma, O. Pokorný, and T. Rosa. Attacking RSA-Based Sessions in SSL/TLS. In Proceedings of Cryptographic Hardware and Embedded Systems (CHES) 2003, Springer, pp. 426–440, 2003.
[19] P. Lacharme. The Linux Pseudorandom Number Generator Revisited. IACR ePrint Archive 2012/251. Available from http://eprint.iacr.org/2012/251
[20] M. Marlinspike. More Tricks for Defeating SSL in Practice. In Black Hat USA, 2009.
[21] C. Meyer and J. Schwenk. Lessons Learned from Previous SSL/TLS Attacks: A Brief Chronology of Attacks and Weakness. IACR ePrint Archive 2013/049. Available from http://eprint.iacr.org/2013/049
[22] M. Ray and S. Dispensa. Renegotiating TLS. Technical Report, PhoneFactor, Inc., Nov. 2009.
[23] T. Ristenpart and S. Yilek. When Good Randomness Goes Bad: Virtual Machine Reset Vulnerabilities and Hedging Deployed Cryptography. In Proceedings of the Network and Distributed System Security Symposium (NDSS) 2010. Internet Society, 2010.
[24] T. Vuillemin, F. Goichon, C. Lauradoux, and G. Salagnac. Entropy Transfers in the Linux Random Number Generator. Research Report 8060, INRIA, Sept. 2012.
[25] S. Yilek, E. Rescorla, H. Shacham, B. Enright, and S. Savage. When Private Keys Are Public: Results From the 2008 Debian OpenSSL Vulnerability. In Proceedings of IMC 2009, pp. 15–27, 2009.