### 4.1.2 Server Name Indication (SNI) and Hidden Virtual Hosts

Server Name Indication (SNI) is a TLS extension that enables web servers to multiplex multiple X.509 certificates on a single IP address. This is achieved by the client sending the desired host name directly in the TLS handshake. In a simple TLS handshake, only one default virtual host certificate is returned, thereby hiding other virtual hosts from the scan. The default certificate is often generated during server installation and may not be relevant to the context.

### 4.1.3 Rapid7 Sonar SSL

Project Sonar [6] conducts regular scans of IPv4 SSL services on TCP port 443. The dataset includes both raw X.509 certificates and processed subsets, with snapshots taken within an 8-hour timeframe. The project has been active since 2013-10-30, with many samples available. The files containing certificates are incremental, meaning each scan from a particular day includes only new certificates not seen in the preceding scan. We transform these increments into full snapshots. The scanning periodicity varies, complicating the analysis. The project also maintains a time-evolving IP address blacklist. Additionally, the scanner code evolves (e.g., cipher suite selection, bug fixes, methodology changes), causing data fluctuations.

### 4.1.4 HTTPS Certificate Ecosystem

The IPv4 TLS scanning dataset [18] covers the period from 2012-06-10 to 2014-01-29. It is similar to the Sonar SSL dataset in format and properties. This dataset contains one host-to-certificate fingerprint mapping file for each scan and a large certificate database for the entire dataset. The scanning periodicity varies significantly, with some snapshots only two days apart and others up to 50 days apart. We recoded this dataset to the Sonar SSL format with an incremental certificate database and then transformed it into the full snapshot format identical to that of Sonar SSL.

### 4.1.5 Certificate Transparency (CT)

The CT specification (RFC 6962) allows retrieving a range of entries from a log. We processed all entries in logs maintained by Google up to May 2017. All entries must be submitted with the necessary intermediate certificates to verify the certificate chain up to a root certificate published by the log. We process only the leaf certificates. Since the logs are append-only, there is no reliable way to determine if an older certificate is still active (the validity period provides an upper estimate). Therefore, we do not have a sample of all active certificates for a given date. Instead, we process incremental samples—certificates submitted during a specific period (a day or a week).

### 4.1.6 Client SSH Keys – GitHub

GitHub provides SSH-authenticated access to Git repositories. Developers upload their public SSH keys, and a user can have zero, one, or more SSH keys. GitHub offers an API to list all registered users and another endpoint to download SSH keys on a per-user basis. We downloaded a list of almost 25 million GitHub users, finding almost 4.8 million SSH keys. The scan was performed in February 2017 and took three weeks to complete on commodity hardware. We implemented a custom multi-threaded crawler to download the user list, SSH keys, parse them, and produce a file for classification.

### 4.1.7 Pretty Good Privacy (PGP)

PGP key servers play a crucial role in the PGP infrastructure as public registers of PGP keys. These servers periodically synchronize among themselves. We downloaded a database dump in April 2017, parsed it, and extracted RSA master and sub-keys for analysis. Anyone can upload a valid PGP public key to the key server and download it later. This must be considered during analysis, as anyone can generate and upload thousands of keys, potentially skewing statistics. This issue was highlighted when the Evil 32 group [29] generated new PGP keys for thousands of identities with a collision on the short key ID, demonstrating the weakness of using a 32-bit identifier in the PGP ecosystem.

### 4.2 Internet-wide TLS Scans

Various projects have conducted Internet-wide TLS scans since 2010, with different periods, frequencies, and techniques. We extracted unique RSA keys from certificates collected by EFF SSL Observatory, HTTPS Ecosystem, Rapid7 SonarSSL, and Censys IPv4 TLS. The processing details are described in Section 4.1.

The overlapping portions of different scans generally match well, except for Group 11 (Microsoft libraries) in the Rapid7 Sonar SSL scan between 11/2013 and 06/2015. The significant decrease in Microsoft libraries is due to an improper implementation of the TLS 1.2 handshake in the scanning software, which excluded a significant portion of Microsoft IIS servers for 18 months.

### 4.3 Popularity Between Usage Domains

While the TLS ecosystem is the most frequently studied, large datasets of RSA keys exist for other usage domains. We analyzed and compared the relative popularity of cryptographic libraries as of March 2017 for Internet-wide TLS scans (Censys), the 1 million most popular domains according to the Alexa survey, and certificates uploaded to Google’s Certificate Transparency logs. We also present TLS keys as of December 2010 to illustrate progress over time. Additionally, we analyzed SSH authentication keys of all GitHub users and all keys from PGP key servers. The differences are shown in Figure 6.

The analysis reveals significant differences among usage domains. The GitHub SSH dataset is dominated by OpenSSL, with more than 96% of keys, followed by Group 12 (containing the popular SSH client PuTTY for Microsoft Windows) with fewer than 3%. PGP keys are mostly generated by Group 13 (Libgcrypt from GnuPG software) with about 85% share, followed by OpenSSL with approximately 11%.

### 4.4 TLS to CT Comparison

According to a survey based on IPv4 scans, Certificate Transparency (CT) and a large set of active domain names [37], the combination of CT and IPv4 scans provides a representative sample of the Internet. We are interested in the differences between these methodologies.

CT logs contain almost an order of magnitude more certificates than those reachable by direct IPv4 TLS scans. Due to browser validation, all valid TLS certificates are present in CT, along with additional certificates hidden from IPv4-based scans due to SNI. According to a study of the CT landscape [22], almost 95% of certificates stored in CA-operated logs are also seen in CT logs operated by Google (Pilot, Icarus, Rocketeer, Skydiver, Aviator). We use these logs with newly inserted certificates during certain time frames (a day, a week, a month) for our analysis.

We compare selected results for certificates submitted to CT during March 2017 with a Censys scan from the same month in Figure 6. While OpenSSL is the most common library in CT, it is responsible for about 60% of unique RSA keys, whereas the Censys scan contains about 70%. Microsoft libraries (Group 11) are a minority with 3.5% in CT, compared to almost 20% in TLS. The longer validity of certificates generated by Microsoft software (especially compared to Let’s Encrypt CA with 3-month validity) and SNI multiplexing are potential reasons. Groups 12 and 13 are relatively common in CT with 20% and 15%, respectively, whereas both are below 5% in TLS.

### 4.5 Detection of Transient Events

We used our method to estimate the proportion of libraries for keys newly submitted every week to Google’s CT servers between October 2016 and May 2017, limited to certificates issued by Let’s Encrypt CA, as shown in Figure 7. The number of certificates added weekly fluctuates, as do the responsible libraries. Only a small number of keys from Group 11 were inserted, suggesting that Microsoft libraries are less likely to be used with Let’s Encrypt software. Periodic monthly and bi-monthly insertion events are visible for Groups 12 and 13, respectively. Most Let’s Encrypt certificates from these events are reissued after 60 days.

### 5 Related Work

Few prior publications focus on identifying the library responsible for generating an RSA key. Our work builds on [36], while [32] observed biases in private keys generated by OpenSSL, but the method only worked due to insufficient entropy in key generation. The popularity of a library can be estimated from open-source repository ratings, but this is a poor method for closed-source libraries like Microsoft CAPI/CNG. Server fingerprints have been used to determine operating systems and software versions, and similar analyses have been performed for SSH connection software, confirming the dominance of OpenSSH. Debian-based Linux distributions offer public statistics on software package popularity, providing insights into package installations but not the number of keys in use.