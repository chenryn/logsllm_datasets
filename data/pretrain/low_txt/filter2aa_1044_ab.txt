### EAP Implementations and Methods

EAP (Extensible Authentication Protocol) can be implemented in various ways, each known as an EAP method [16]. In this section, we will review some of the most commonly used EAP methods that are directly relevant to the material covered in this paper.

#### II.4.A EAP-MD5

The EAP-MD5 authentication process begins when the authentication server sends an `EAP-Request-Identity` message to the supplicant [16]. The supplicant responds with an `EAP-Response-Identity`, prompting the authentication server to generate a random challenge string. This challenge string is then sent to the supplicant as an `MD5-Challenge-Request` [16].

The supplicant concatenates its username, plaintext password, and the challenge string into a single value, and computes the MD5 hash of this value. The resulting hash, known as the `MD5-Challenge-Response`, is sent back to the authentication server. Upon receiving this response, the authentication server performs the same hashing process: it concatenates the username, password, and challenge string, and computes the MD5 hash. The server compares this hash with the one received from the supplicant. If the two hashes match, the authentication attempt is successful; otherwise, it fails [16].

**Figure 2 – EAP-MD5 Authentication Process**

This authentication method, when used alone, lacks encryption. As noted by Josh Wright and Brad Antoniewicz in their presentation at Schmoocon 2008, an attacker who intercepts the traffic between the supplicant and the authenticator can capture both the `MD5-Challenge-Request` and the `MD5-Challenge-Response` [13]. Wright and Antoniewicz describe a dictionary attack to derive the plaintext password, as illustrated in Figure 3 below [13].

**Figure 3 – Dictionary Attack Against EAP-MD5 (Algorithmic Flowchart)**

Further research by Fanbao Liu and Tao Xie of the National University of Defense Technology in Changsha, China, has revealed an even more efficient EAP-MD5 cracking technique using a length-recovery attack [19].

#### II.4.B EAP-PEAP / EAP-TTLS

The EAP-PEAP and EAP-TTLS authentication processes consist of two phases: outer authentication and inner authentication. Outer authentication begins when the supplicant initiates an authentication request to the authentication server via the authenticator [21][29][30]. The authenticator responds with an x.509 certificate to prove its identity. If the supplicant accepts the certificate, outer authentication succeeds, and a secure tunnel is established between the authentication server and the supplicant [21][29][30]. The inner authentication process then proceeds through this secure tunnel. The use of a secure tunnel was developed to address the vulnerabilities in unprotected EAP methods such as EAP-MD5.

**Figure 4 – EAP-PEAP Authentication Process**

While there are many protocols available for inner authentication, MS-CHAPv2 is the most commonly used [21][29][30]. However, this system has its drawbacks. Although mutual authentication can be enforced using inner-authentication mechanisms like MS-CHAPv2, the x.509 certificate is the only means for the supplicant to verify the identity of the authentication server. If the supplicant does not always reject invalid certificates, the onus is on the user to do so, which is often impractical [13][20].

EAP is not only used for wired authentication as specified by 802.1x but also for wireless authentication in conjunction with WPA2 [21]. The inability to validate the identity of the authentication server led to the classic attack against WPA2-EAP wireless networks presented by Brad Antoniewicz and Joshua Wright at Schmoocon in 2008 [13]. When WPA2-EAP is implemented using weak EAP methods like EAP-PEAP and EAP-TTLS, an attacker can use a rogue access point to force the supplicant to authenticate with a rogue authentication server [13][21]. If the supplicant accepts the attacker's certificate, the EAP challenge and response can be captured and cracked to obtain the plaintext username and password [13][21].

MS-CHAPv2, the strongest inner authentication protocol for EAP-PEAP and EAP-TTLS, is itself vulnerable to a cryptographic weakness discovered by Moxie Marlinspike and David Hulton in 2012 [22][23]. This weakness allows an attacker to reduce the captured MS-CHAPv2 challenge and response hashes to a single round of DES encryption, which is only 56 bits long. These 56 bits are weak enough to be converted into a password-equivalent NT hash within 24 hours using FPGA-based hardware with a 100% success rate [22][23].

**Page 13 of 37**

Although similar attacks against wired port security have not been extensively explored, this paper demonstrates that such attacks are crucial for bypassing 802.1x-2010.

#### II.4.C EAP-TLS

In 2008, EAP-TLS was introduced by RFC 5216, primarily to mitigate the security issues affecting weaker EAP methods like EAP-PEAP and EAP-TTLS [24]. The strength of EAP-TLS lies in its use of mutual certificate-based authentication during the outer authentication process, preventing man-in-the-middle attacks that can compromise weaker EAP implementations [24]. However, the inconvenience of installing client certificates on all supplicant devices has limited its adoption [25].

### III. Research Environment and Architecture

Our lab environment consisted of the following core components:

- **Simulated Network Environment**: A test network for performing our attacks.
- **Rogue Device A**: A device configured to use a bridged-based approach for 802.1x bypasses.
- **Rogue Device B**: A device equipped with remotely controllable mechanical A/B Ethernet splitters.

In the remainder of this paper, we will discuss attacks requiring either Rogue Device A or Rogue Device B configurations, as described below.

#### III.1 Simulated Network Environment

Our simulated network environment emulates an enterprise internal network protected by 802.1x authentication.

**Figure 5 – Simulated Network Environment**

As shown in Figure 5, the simulated network environment includes:

- **Supplicant**: A MACsec-capable Linux workstation running Fedora 28, equipped with NetworkManager and wpa_supplicant, configured to connect and authenticate automatically with the network.
- **Authenticator**: A MACsec-capable Cisco Catalyst 3560-CX switch with the following interfaces:
  - GigabitEthernet 0/1: Upstream link to the network gateway.
  - GigabitEthernet 0/2: Administrative access to the switch.
  - GigabitEthernet 0/3: Connection to the external RADIUS server.
  - GigabitEthernet 0/5: Standard 802.1x protected port.
  - GigabitEthernet 0/6: 802.1x protected port with MACsec.
- **Authentication Server (RADIUS)**: A Raspberry Pi running FreeRADIUS 3.0.17 as the authentication server for the switch.

**Figure 6 – Objective: Introducing a Rogue Device Between the Supplicant and Authenticator**

The goal of this experiment was to bypass multiple variations of 802.1x by introducing a rogue device to the network, either by placing it as a bridge between the supplicant and authenticator (see Figure 6) or by connecting it directly to the authenticator (see Figure 7).

**Figure 7 – Objective: Introducing a Rogue Device Directly to the Authenticator**

To achieve this, we constructed two rogue devices: one for purely bridge-based bypass methods and the other for mechanically assisted bypass methods.

#### III.2 Rogue Device A: Pure Bridge-based Design

Rogue Device A followed a pure bridge-based design, as shown in Figure 8. More details about the side channel and transparent bridge can be found in sections III.4 and IV.

**Figure 8 – Rogue Device A**

The device consisted of an Intel NUC micro-computer running Fedora 28, equipped with the following network interface cards:

- **Upstream**: An upstream interface to connect the rogue device with the authenticator, using a Ugreen USB 2.0 to RJ45 Network Adapter.
- **PHY**: A PHY interface to connect the rogue device with the authenticator, using a Ugreen USB 2.0 to RJ45 Network Adapter.
- **Sidechannel**: A sidechannel interface consisting of a USB LTE modem to provide a backdoor into the device.

Additionally, the device was equipped with the `silentbridge` software we developed for this research project.

#### III.3 Rogue Device B: Mechanically Assisted Bypass

Rogue Device B builds upon the design of Rogue Device A, adding two physical A/B Ethernet splitters to bypass the device entirely. When the splitters are in position A, they connect directly to each other using an Ethernet patch cable, effectively bypassing the rogue device. When in position B, Ethernet traffic passes directly to the upstream and PHY interfaces of the rogue device, connecting the upstream interface to the authenticator and the PHY interface to the supplicant.

**Figure 9 – Rogue Device B**

Both A/B splitters can be operated independently. We modified a pair of MT-VIKI FBA_MT-RJ45-2M RJ-45 Ethernet splitters to be controlled by 12mm, 24V solenoids, managed by an Arduino-compatible microcontroller connected to the rogue device over a serial connection.

We recognize that this may not be the most efficient way of controlling the device, but designing an Ethernet relay free of impedance issues was beyond the scope of this research.

#### III.4 Establishing a Side Channel

Establishing a side channel is essential for remotely accessing the device and performing the Rogue Gateway and Bait n Switch attacks. It also provides a way to control the rogue device even when it is not connected to the target network.

Both rogue devices were equipped with Linux-compatible LTE modems configured to obtain an IP address on boot. The devices were set up to allow remote access through the LTE modem using a reverse SSH tunnel to an SSH redirector, as shown in Figure 11.

**Figure 11 – Establishing a Side Channel Using a Reverse SSH Tunnel Over LTE**

In this configuration, the rogue device initiates a reverse SSH tunnel from the sidechannel interface to the redirector on boot. The redirector then forwards incoming SSH connections through the reverse tunnel to the rogue device. We followed the configuration described by Stanislav Sinyagin in his blog posts "Call Home SSH Scripts" and "Improved Call Home SSH Scripts" [26][27].

#### III.5 Putting It All Together

The full lab setup is shown in the diagrams below. The first configuration uses Rogue Device A (Figure 12), and the second configuration uses Rogue Device B (Figure 13).

**Figure 12 – Complete Lab Environment (Using Rogue Device A)**

**Figure 13 – Complete Lab Environment (Using Rogue Device B)**

### IV. Improvements to Classical Bridge-based 802.1x Bypass

One of the first steps in our research was to recreate the classical bridge-based 802.1x bypass attack developed by Alva Duckwall [4]. This attack uses a transparent bridge to silently introduce a rogue device between the authenticator and the supplicant. The ability to interact with the network is granted by using `iptables` to perform source NAT (SNAT) on traffic originating from the device [4]. To reduce the risk of discovery, `iptables` is used to prevent the rogue device from using a source port already in use by the supplicant [4]. Additionally, a hidden SSH service is created on the rogue device by using `iptables` to forward traffic destined for the supplicant’s IP address on a specific port to the rogue device on port 22 [4].

In this section, we will discuss the improvements we made to this original attack, all of which were developed during the process of recreating it.

#### Leveraging Native EAPOL Forwarding

One of the immediate drawbacks of the traditional bridge-based approach is that the Linux kernel does not natively support EAPOL (EAP over LAN) forwarding. This limitation can be addressed by implementing custom kernel modules or using existing tools that support EAPOL forwarding. By leveraging native EAPOL forwarding, we can ensure that the rogue device can seamlessly pass EAP messages between the supplicant and the authenticator without the need for additional configuration.