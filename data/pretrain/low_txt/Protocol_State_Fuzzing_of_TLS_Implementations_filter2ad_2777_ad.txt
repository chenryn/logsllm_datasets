### Modification of the Test Harness

Adjusting the test harness to change the point at which keys are computed can lead to a successful exploitation of the bug.

### Evolution of OpenSSL Code

An interesting observation regarding the evolution of OpenSSL code is that, across the four different versions we analyzed (1.0.1g, 1.0.1j, 1.0.1l, and 1.0.2), the number of states decreases with each version. In version 1.0.2, there is still one additional state, but it is an error state from which all messages result in a closed connection.

### nqsb-TLS Implementation

A recent TLS implementation, nqsb-TLS, aims to be both a specification and a usable implementation written in OCaml [25]. We analyzed version 0.4.0 and discovered a bug: alert messages are not encrypted even after a ChangeCipherSpec is received. This bug was reported to the nqsb-TLS developers and has been fixed in a newer version. More intriguing is a design decision concerning the state machine: after the client sends a ChangeCipherSpec, the server immediately responds with a ChangeCipherSpec. This differs from other implementations, which first wait for the client to send a Finished message before responding. This example highlights how the TLS specifications can be ambiguous, and adding a state machine would reduce room for interpretation.

### Conclusion

We presented a comprehensive analysis of commonly used TLS implementations using a systematic approach called protocol state fuzzing. This method involves state machine learning, which relies on black box testing to infer a state machine, followed by a manual analysis of the obtained state machines. Our technique proved to be powerful and fast, revealing security flaws in 3 out of 9 tested implementations. We applied this method to both server- and client-side implementations. By using our modified version of the W-method, we significantly reduced the number of equivalence queries, resulting in a much lower running time for the analysis.

Our approach can identify mistakes in the logic of the state machine. However, deliberate backdoors, such as those triggered by sending a particular message 100 times, would not be detected. Similarly, errors in parsing messages or certificates would not be identified.

### Comparison with Other Approaches

[38] provides an overview of different approaches to prevent security bugs and improve software security, using the Heartbleed bug as a basis. While our method would not have detected the Heartbleed bug, it makes a useful addition to the discussed approaches. It is related to some of the listed methods, particularly state machine learning, which involves a form of negative testing. The tests carried out during state machine learning include many negative tests, where messages are sent in unexpected orders, which should result in the closing of the connection.

In parallel with our research, Beurdouche et al. [6] independently conducted similar research, analyzing protocol state machines of TLS implementations and finding numerous security flaws. Both approaches share the fundamental idea that protocol state machines are a great formalism for systematically analyzing security protocol implementations. Both require constructing a framework to send arbitrary TLS messages and reveal that OpenSSL and JSSE have the most (over)complicated state machines.

However, the approach of Beurdouche et al. differs: they start with a manually constructed reference protocol state machine and use it as a basis to test TLS implementations. Their testing is not truly random, as it uses a set of test traces generated with heuristics.

The differences in issues identified by Beurdouche et al. and us can be partly explained by the functionality supported by the test frameworks. For example, our framework supports the Heartbeat extension, while theirs supports Difﬁe-Hellman certificates and export cipher suites. Additionally, our approach has higher coverage due to its 'blind' nature.

One advantage of our approach is that we do not need to construct a correct reference model by hand beforehand. However, we must ultimately decide which behavior is unwanted. A visual model helps in identifying redundant states or transitions. Both approaches rely on manual analysis to assess the security impact of any deviant or superfluous protocol behavior.

### Implementation Freedom in TLS

When implementing TLS, the specifications leave significant freedom, especially in handling errors or exceptions. Many differences between the inferred models are variations in error messages, which are not fixed in the specifications and can be freely chosen. While this might be useful for debugging, different error messages are not beneficial in production, especially since they vary per implementation.

There is no single 'correct' state machine for the TLS protocol, and every implementation we analyzed resulted in a different model. However, there are clearly incorrect state machines. Ideally, a state machine should have one correct path (or more, depending on the configuration) and all other paths leading to an error state, preferably with the same error code. The model for RSA BSAFE for Java, shown in Fig. 6, conforms to this ideal.

### Future Directions

Applying the same technique to other security protocols would be interesting. The main effort in protocol state fuzzing is developing a test harness, but this is a worthwhile investment as only one test harness is needed to test all implementations for a given protocol.

The initial manual analysis of the state machines is straightforward, and any superfluous strange behavior is easy to spot visually. This step could be automated by providing a correct reference state machine. Deciding whether any superfluous behavior is exploitable is the most challenging part of the manual analysis, but for security protocols, it makes sense to require that there should not be any superfluous behavior.

The differences in behavior between various implementations might be traced back to Postel's Law: "Be conservative in what you send, be liberal in what you accept." This approach is risky in security protocols, as suspicious inputs should be discarded, connections closed, and no response given that could aid an attacker.

Ideally, state machines should be included in the official specifications of protocols to provide a more fundamental solution to reduce implementation freedom. This would avoid the need for each implementer to interpret English prose specifications, reducing the variety of state machines and the bugs they introduce.

### References

[1] AARTS, F., DE RUITER, J., AND POLL, E. Formal models of bank cards for free. In Software Testing Verification and Validation Workshop, IEEE International Conference on (2013), IEEE, pp. 461–468.
[2] AARTS, F., SCHMALTZ, J., AND VAANDRAGER, F. Inference and abstraction of the biometric passport. In Leveraging Applications of Formal Methods, Verification, and Validation, T. Margaria and B. Steffen, Eds., vol. 6415 of Lecture Notes in Computer Science. Springer, 2010, pp. 673–686.
[3] AL FARDAN, N., AND PATERSON, K. Lucky Thirteen: Breaking the TLS and DTLS record protocols. (SP), 2013 IEEE Symposium on (2013), IEEE, pp. 526–540.
[4] ALFARDAN, N., BERNSTEIN, D. J., PATERSON, K. G., POETTERING, B., AND SCHULDT, J. C. N. On the security of RC4 in TLS. In Presented as part of the 22nd USENIX Security Symposium (USENIX Security 13) (2013), USENIX, pp. 305–320.
[5] ANGLUIN, D. Learning regular sets from queries and counterexamples. Information and Computation 75, 2 (1987), 87–106.
[6] BENJAMIN BEURDOUCHE, KARTHIKEYAN BHARGAVAN, A. D.-L., FOURNET, C., KOHLWEISS, M., PIRONTI, A., STRUB, P.-Y., , AND ZINZINDOHOUE, J. K. A messy state of the union: Taming the composite state machines of TLS. In Security and Privacy (SP), 2015 IEEE Symposium on (2015), IEEE, pp. 535–552.
[7] BHARGAVAN, K., FOURNET, C., CORIN, R., AND ZALINESCU, E. Cryptographically verified implementations for TLS. In Proceedings of the 15th ACM Conference on Computer and Communications Security (2008), CCS '08, ACM, pp. 459–468.
[8] BHARGAVAN, K., FOURNET, C., KOHLWEISS, M., PIRONTI, A., AND STRUB, P. Implementing TLS with verified cryptographic security. 2013 IEEE Symposium on Security and Privacy (2013), 445–459.
[9] BLEICHENBACHER, D. Chosen ciphertext attacks against protocols based on the RSA encryption standard PKCS #1. In Advances in Cryptology – CRYPTO '98, H. Krawczyk, Ed., vol. 1462 of Lecture Notes in Computer Science. Springer, 1998, pp. 1–12.
[10] BRUBAKER, C., JANA, S., RAY, B., KHURSHID, S., AND SHMATIKOV, V. Using Frankencerts for automated adversarial testing of certificate validation in SSL/TLS implementations. In Security and Privacy (SP), 2014 IEEE Symposium on (2014), pp. 114–129.
[11] CHALUPAR, G., PEHERSTORFER, S., POLL, E., AND DE RUITER, J. Automated reverse engineering using Lego. In 8th USENIX Workshop on Offensive Technologies (WOOT 14) (2014), USENIX.
[12] CHOW, T. Testing software design modeled by finite-state machines. IEEE Transactions on Software Engineering 4, 3 (1978), 178–187.
[13] CODENOMICON. Heartbleed bug. http://heartbleed.com/. Accessed on June 8th 2015.
[14] COMPARETTI, P., WONDRACEK, G., KRUEGEL, C., AND KIRDA, E. Prospex: Protocol specification extraction. In Security and Privacy, 2009 30th IEEE Symposium on (2009), IEEE, pp. 110–125.
[15] DE RUITER, J. Lessons learned in the analysis of the EMV and TLS security protocols. PhD thesis, Radboud University Nijmegen, 2015.
[16] DÍAZ, G., CUARTERO, F., VALERO, V., AND PELAYO, F. Automatic verification of the TLS handshake protocol. In Proceedings of the 2004 ACM Symposium on Applied Computing (2004), SAC '04, ACM, pp. 789–794.
[17] DIERKS, T., AND ALLEN, C. The TLS protocol version 1.0. RFC 2246, Internet Engineering Task Force, 1999.
[18] DIERKS, T., AND RESCORLA, E. The Transport Layer Security (TLS) protocol version 1.1. RFC 4346, Internet Engineering Task Force, 2006.
[19] DIERKS, T., AND RESCORLA, E. The Transport Layer Security (TLS) protocol version 1.2. RFC 5246, Internet Engineering Task Force, 2008.
[20] GAJEK, S., MANULIS, M., PEREIRA, O., SADEGHI, A.-R., AND SCHWENK, J. Universally composable security analysis of TLS. In Provable Security, J. Baek, F. Bao, K. Chen, and X. Lai, Eds., vol. 5324 of Lecture Notes in Computer Science. Springer, 2008, pp. 313–327.
[21] GEER, D. Vulnerable compliance. login: The USENIX Magazine 35, 6 (2010), 10–12.
[22] HE, C., SUNDARARAJAN, M., DATTA, A., DEREK, A., AND MITCHELL, J. C. A modular correctness proof of IEEE 802.11i and TLS. In Proceedings of the 12th ACM Conference on Computer and Communications Security (2005), CCS '05, ACM, pp. 2–15.
[23] HSU, Y., SHU, G., AND LEE, D. A model-based approach to security flaw detection of network protocol implementations. In Network Protocols, 2008. ICNP 2008. IEEE International Conference on (2008), IEEE, pp. 114–123.
[24] JAGER, T., KOHLAR, F., SCHÄGE, S., AND SCHWENK, J. On the security of TLS-DHE in the standard model. In Advances in Cryptology – CRYPTO 2012, R. Safavi-Naini and R. Canetti, Eds., vol. 7417 of Lecture Notes in Computer Science. Springer, 2012, pp. 273–293.
[25] KALOPER-MERŠINJAK, D., MEHNERT, H., MADHAVAPEDDY, A., AND SEWELL, P. Not-quite-so-broken TLS: Lessons in re-engineering a security protocol specification and implementation. In 24th USENIX Security Symposium (USENIX Security 15) (2015), USENIX Association.
[26] KAMIL, A., AND LOWE, G. Analysing TLS in the strand spaces model. Journal of Computer Security 19, 5 (2011), 975–1025.
[27] KIKUCHI, M. OpenSSL #ccsinjection vulnerability. http://ccsinjection.lepidum.co.jp/. Access on June 8th 2015.
[28] KRAWCZYK, H., PATERSON, K., AND WEE, H. On the security of the TLS protocol: A systematic analysis. In Advances in Cryptology – CRYPTO 2013, vol. 8042 of Lecture Notes in Computer Science. Springer, 2013, pp. 429–448.
[29] MEYER, C., AND SCHWENK, J. SoK: Lessons learned from SSL/TLS attacks. In Information Security Applications, Y. Kim, H. Lee, and A. Perrig, Eds., Lecture Notes in Computer Science. Springer, 2014, pp. 189–209.
[30] MEYER, C., SOMOROVSKY, J., WEISS, E., SCHWENK, J., SCHINZEL, S., AND TEWS, E. Revisiting SSL/TLS implementations: New bleichenbacher side channels and attacks. In 23rd USENIX Security Symposium (USENIX Security 14) (2014), USENIX Association, pp. 733–748.
[31] MORRISSEY, P., SMART, N., AND WARINSCHI, B. A modular security analysis of the TLS handshake protocol. In Advances in Cryptology – ASIACRYPT 2008, J. Pieprzyk, Ed., vol. 5350 of Lecture Notes in Computer Science. Springer, 2008, pp. 55–73.
[32] OGATA, K., AND FUTATSUGI, K. Equational approach to formal analysis of TLS. In Distributed Computing Systems, 2005. ICDCS 2005. Proceedings. 25th IEEE International Conference on (2005), IEEE, pp. 795–804.
[33] PAULSON, L. C. Inductive analysis of the internet protocol TLS. ACM Trans. Inf. Syst. Secur. 2, 3 (1999), 332–351.
[34] RAFFELT, H., STEFFEN, B., AND BERG, T. LearnLib: a library for automata learning and experimentation. In Formal methods for industrial critical systems (FMICS'05) (2005), ACM, pp. 62–71.
[35] SASSAMAN, L., PATTERSON, M. L., AND BRATUS, S. A patch for Postel's robustness principle. Security & Privacy, IEEE 10, 2 (2012), 87–91.
[36] SEGGELMANN, R., TUEXEN, M., AND WILLIAMS, M. Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) Heartbeat Extension. RFC 6520, Internet Engineering Task Force, 2012.
[37] TURNER, S., AND POLK, T. Prohibiting Secure Sockets Layer (SSL) version 2.0. RFC 6176, Internet Engineering Task Force, 2011.
[38] WHEELER, D. Preventing Heartbleed. Computer 47, 8 (2014), 80–83.