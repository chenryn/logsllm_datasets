### The Rapid Increase in Malware and the Need for Robust Detection Strategies

The rapid increase in malware has rendered manual methods of disassembly or reverse engineering impractical. Consequently, security experts have shifted their focus to efficient and robust runtime malware detection strategies. These strategies often involve analyzing API calls made by both malicious and benign processes running on an operating system.

However, some researchers [2] use API call capture tools that operate in user mode, which can only capture API calls in user mode and not those in kernel mode. This limitation means they cannot detect malware that operates in kernel mode. Regardless of whether a program runs in user mode or kernel mode, any I/O request will generate an I/O Request Packet (IRP). Therefore, analyzing IRP sequences can help distinguish between malware and benign processes.

### Our Method

We developed an IRP capture tool called MBMAS [1], which is based on kernel driver technology. This tool can capture process information and IRPs generated by each running process. Statistical analysis of the captured IRPs revealed 30 different types of IRP.

To detect malware, we use 4-grams as detectors. If a sequence contains a 4-gram as a subsequence, it is considered a match. Initially, all permutations of 4-grams are generated as candidate detectors. We then apply two methods to filter these detectors:

1. **First Method**: Use Non-Self Analysis (NSA) to filter out detectors that match self, leaving only mature detectors.
2. **Second Method**: First, use NSA to filter out detectors that match self, then use Positive Selection Algorithm (PSA) to select detectors that match nonself. The final detectors are those that exist only in nonself sequences.

Figure 1 shows the statistics of unique 4-gram sequences as the total number of IRPs increases.

### Experiment

We collected 600 malware samples and 300 benign Windows executables. Of the 600 malware samples, 300 were sourced from VX Heaven [3], and the remaining 300 were collected from the internet. The 900 files were divided into two groups:
- **Group 1**: 200 benign, 200 malware from VX Heaven, and 200 malware from the internet.
- **Group 2**: 100 benign, 100 malware from VX Heaven, and 100 malware from the internet.

Group 1 was used as training data, while Group 2 served as testing data. In the testing phase, Group 2 was further divided into two subgroups: benign + VX Heaven malware and benign + internet malware.

Using the 200 benign files in Group 1 for self-tolerance, we obtained 807,368 mature detectors. When tested with Group 2, we achieved a true positive rate of 96% for benign + VX Heaven malware and 99% for benign + internet malware, with a false positive rate of 9%.

Using the 807,368 detectors as candidate detectors, we selected 311 detectors that matched at least one of the 400 malware samples in Group 1 using PSA. Testing with Group 2 again, we achieved the same true positive rates as before, but with a false positive rate of 0%.

### References

1. Zhang, F.Y., Qi, D.Y., Hu, J.L.: MBMAS: A System for Malware Behavior Monitor and Analysis. In: International Symposium on Computer Network and Multimedia Technology (CNMT 2009), pp. 1–4 (2009)
2. Manzoor, S., Shaﬁq, M.Z., Tabish, S.M., Farooq, M.: A sense of ‘danger’ for windows processes. In: Andrews, P.S., Timmis, J., Owens, N.D.L., Aickelin, U., Hart, E., Hone, A., Tyrrell, A.M. (eds.) Artiﬁcial Immune Systems. LNAI, LNBI, vol. 5666, pp. 220–233. Springer, Heidelberg (2009)
3. VX Heaven, http://vx.netlux.org

### Author Index

- Giuﬀrida, Cristiano
- Guo, Li
- Hadˇziosmanovi´c, Dina
- Haq, Irfan Ul
- Hartel, Pieter
- Holz, Thorsten
- Hsu, Ching-Hsiang
- Huang, Chun-Ying
- Hu, JingLin
- Ioannidis, Sotiris
- Jahanian, Farnam
- Jiang, Jianchun
- Jiang, Xuxian
- Ahaniha, Mohammad Mahdi
- Ahmed, Ezzat
- Aiken, Alex
- Ali, Sardar
- AlShaikh, Raed
- Antonakakis, Manos
- Asplund, Mikael
- Bailey, Michael
- Balduzzi, Marco
- Balzarotti, Davide
- Bellmor, Justin
- Bertino, Elisa
- Bolzoni, Damiano
- Bowen, Brian M.
- Braje, Timothy
- Callegari, Christian
- Cavallaro, Lorenzo
- ˇCeleda, Pavel
- Chen, Kuan-Ta
- Chen, Shenlong
- Chen, Weifeng
- Connelly, Christopher
- Cova, Marco
- Crispo, Bruno
- Cucurull, Jordi
- Cunningham, Robert K.
- Dacier, Marc
- Dagon, David
- Debbabi, Mourad
- Ding, Liping
- Draˇsar, Martin
- Dreo Rodosek, Gabi
- Fattori, Aristide
- Ganapathy, Vinod
- Gao, Debin
- Gazzarrini, Loris
- Ghosh, Anup
- Giﬃn, Jonathon
- Giordano, Stefano
- Kaeli, David
- Kamra, Ashish
- Karim, Rezwana
- Kemerlis, Vasileios P.
- Keromytis, Angelos D.
- Khan, Hassan
- Khayam, Syed Ali
- Killourhy, Kevin
- Kirda, Engin
- Koch, Robert
- Kong, Ying
- Krejˇc´ı, Radek
- Kruegel, Christopher
- Kulkarni, Ashutosh V.
- Lee, Wenke
- Leita, Corrado
- Li, Jun
- Li, Peng
- Liu, Limin
- Liu, Qixu
- Luo, Xiapu
- Ma, Qiang
- Martignoni, Lorenze
- Mathew, Sunu
- Matsuura, Kanta
- Maxion, Roy
- Memon, Nasir
- Miller, Barton P.
- Mokhov, Serguei A.
- Nadjm-Tehrani, Simin
- Ngo, Hung Q.
- Niksefat, Salman
- Oliner, Adam J.
- Ortolani, Stefano
- Pagano, Michele
- Paleari, Roberto
- Paquet, Joey
- Pepe, Teresa
- Perdisci, Roberto
- Petropoulos, Michalis
- Platzer, Christian
- Prabhu, Pratap
- Qi, DeYu
- Rabek, Jesse C.
- Reiter, Michael K.
- Rhee, Junghwan
- Riley, Ryan
- Rossey, Lee M.
- Roundy, Kevin A.
- Sadeghiyan, Babak
- Shajari, Mehdi
- Sidiroglou, Stelios
- Smith, Randy
- Sqalli, Mohammed
- Srivastava, Abhinav
- Staﬀord, Shad
- Stavrou, Angelos
- Stolfo, Salvatore J.
- Takurou, Hosoi
- Thonnard, Olivier
- Upadhyaya, Shambhu
- Vander Weele, Eric
- Vasiliadis, Giorgos
- Vykopal, Jan
- Wang, Jiang
- Wang, Yipeng
- Whelan, Ryan
- Wright, Charles V.
- Xing, Luyi
- Xu, Dongyan
- Xu, Kui
- Xu, Yunjing
- Yang, Liu
- Yao, Danfeng (Daphne)
- Zhang, FuYong
- Zhang, Yuqing
- Zhang, Zhibin