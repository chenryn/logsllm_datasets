### Starting Position
**Figure 10: Recovery Rate of Base64 Encoded Passwords vs. "Normal" Passwords for 6-Character Passwords (T = 5, 1 ≤ r ≤ 251, Double-Byte Algorithm)**

Both the code and the algorithm can be easily modified to handle this scenario. We have conducted simulations using the resulting shift attack, and the full results are reported in [12].

### 5. Practical Validation
In this section, we describe proof-of-concept implementations of our attacks against a specific application-layer protocol running over TLS, namely BasicAuth. In the full version [12], we also consider the IMAP protocol as a target.

#### 5.1 Introduction to BasicAuth
Basic Access Authentication (BasicAuth) is defined in the HTTP/1.0 specification [3] and extended in [11]. It provides a simple method for controlling access to web pages and other protected resources. Due to its simplicity, BasicAuth remains widely used in enterprise applications. The protocol involves the client sending the server a username and password in Base64 encoded form, requiring a lower-layer secure protocol like TLS to mitigate trivial eavesdropping attacks. Many web browsers display a login dialog when an initiating challenge message is received from the server, and some browsers offer the option to store user credentials, which are then automatically presented on behalf of the user.

The client response to the challenge is structured as follows:
```
Authorization: Basic Base64(userid:password)
```
where `Base64(·)` denotes the Base64 encoding function, which maps 3 characters at a time onto 4 characters of output.

#### 5.2 Attacking BasicAuth
To execute a successful attack on BasicAuth, two conditions must be met:
1. The Base64-encoded password included in the BasicAuth client response must be located early enough in the plaintext stream.
2. There must be a method to force the browser to repeatedly send the BasicAuth client response.

We observed that the first condition is satisfied for certain browsers, including Google Chrome. For example, we inspected HTTPS traffic sent from Chrome to an iChair server. The user's Base64-encoded password was sent with every HTTP(S) request in the same position in the stream, specifically at position \( r = 133 \) (including 16 bytes consumed by the client’s Finished message and 20 bytes consumed by the TLS Record Protocol tag). For Mozilla Firefox, the value of \( r \) was 349, which is less useful for our purposes.

**iChair** is a popular system for conference reviewing, widely used in the cryptography research community and available from http://www.baigneres.net/ichair. It uses BasicAuth for user authentication.

**Figure 9: Value of T Required to Achieve a Given Password Recovery Rate \( \alpha \) for \( S = 2^s \) with \( s \in \{14, 16, \ldots, 28\} \) (n = 6, r = 133, double-byte algorithm).**

For the second condition, we adopt methods used in the BEAST, CRIME, and Lucky 13 attacks on TLS, as well as in attacking RC4 in [2]. We assume the user visits a site `www.evil.com` which loads JavaScript into the user’s browser. The JavaScript makes GET or POST requests to the target website at `https://www.good.com` using XMLHttpRequest objects, permitted under Cross Origin Resource Sharing (CORS). The Base64-encoded BasicAuth password is automatically included in each such request. To force the password to be repeatedly encrypted at an early position in the RC4 keystream, we use a Man-in-the-Middle (MITM) attacker to break the TLS connection by injecting sequences of TCP FIN and ACK messages. This requires careful timing coordination between the JavaScript and the MITM attacker.

We built a proof-of-concept demonstration to illustrate these principles. We set up a virtual network with three virtual machines, each running Ubuntu 14.04, kernel version 3.13.0-32. On the first machine, we installed iChair and configured the web server to use RC4 as its default TLS cipher. The second machine ran the Chrome 38 browser and acted as the client. We installed the required JavaScript directly on this machine rather than downloading it from another site. The third machine acted as the MITM attacker, intercepting the TLS-protected traffic and tearing down the TLS connections. We used the Python tool Scapy to run an ARP poisoning attack, hijacking the connection and forcing a graceful shutdown after observing and recording the password-bearing record. We observed that forcing a graceful shutdown of each subsequent connection allowed for TLS resumption.

With this setup, the JavaScript running in the client browser sent successive HTTPS GET requests to the iChair server every 80ms. This choice of 80ms was motivated by the fact that, for our configuration, we observed a total time of around 80ms for TLS resumption, delivery of the password-bearing record, and the induced shutdown of the TCP connection. This enabled us to capture \( 2^{16} \) encrypted password-bearing records in 1.6 hours. Running at this speed, the attack was stable over a period of hours.

We note that the latency involved in our setup is much lower than would be found in a real network, where the server may be many hops away from the client. Typical latencies for establishing an initial TLS connection to a remote site range from 500ms to 1000ms, with session resumptions being roughly half that. However, browsers open multiple TLS connections in parallel to reduce perceived latency; the maximum number of concurrent connections per server is 6 for both Chrome and Firefox. Assuming a TLS resumption latency of 250ms and the JavaScript running fast enough to maintain 6 connections in parallel, the amount of time needed to mount an attack with \( S = 2^{26} \) would be approximately 776 hours. If the latency was further reduced to 100ms, the attack execution time would be reduced to 312 hours.

Setting \( n = 6 \), \( T = 100 \), \( r = 133 \), and using the simulation results displayed in Figure 10, we would expect a success rate of 64.4% for this setup (with \( S = 2^{26} \)). For \( T = 5 \), the corresponding success rate would be 44.5%.

We emphasize that we have not executed a complete attack on these scales but have demonstrated the feasibility of the attack in our laboratory setup.

### 6. Conclusion and Open Problems
We have presented plaintext recovery attacks derived from a formal Bayesian analysis of the problem of estimating plaintext likelihoods given an a priori plaintext distribution, suitable keystream distribution information, and a large number of encryptions of a fixed plaintext under independent keys. We applied these ideas to the specific problem of recovering passwords encrypted by the RC4 algorithm with 128-bit keys as used in TLS, though they are more generally applicable to other uses of RC4 and to stream ciphers with non-uniform keystream distributions.

Using large-scale simulations, we investigated the performance of these attacks under different settings for the main parameters. We then studied the applicability of these attacks for a specific application-layer protocol, BasicAuth. For certain browsers and clients, the passwords were located at a favorable point in the plaintext stream, and we could induce the password to be repeatedly encrypted under fresh, random keys. We built a proof-of-concept implementation of the attack. It was challenging to achieve a high rate of encryption generation, mainly due to the latency associated with TLS connection establishment, even with session resumption.

Good-to-excellent password recovery success rates can be achieved using \( 2^{24} \) to \( 2^{28} \) ciphertexts in our attacks. We also demonstrated that our single-byte attack for password recovery significantly outperforms a naive password recovery attack based on the ideas of [2]. We observed an improvement over a guessing strategy even for low numbers (\( 2^{22} \) or \( 2^{24} \)) of ciphertexts. By contrast, the preferred double-byte attack of [2] required on the order of \( 2^{34} \) encryptions to recover a 16-byte cookie, without incurring the time overheads arising from TLS session resumption that our approach incurs.

Our research has led to the identification of several areas for further work:
- Our Bayesian approach can be applied to model the plaintext as a word from a language described as a Markov model with memory. It would be interesting to investigate the extent to which this approach can be applied to either password recovery or more general analysis of typical HTTP traffic.
- We have focused on the use of the single-byte biases described in [2] and the double-byte biases of Fluhrer and McGrew (and from our own extensive computations for the first 512 keystream positions). Other biases in RC4 keystreams are known, for example, [14]. It is a challenge to integrate these into our Bayesian framework, with the aim of further improving our attacks.
- We identified new double-byte biases early in the RC4 keystream, which deserve a theoretical explanation.
- It would be an interesting challenge to develop algorithms for constructing synthetic, site-specific dictionaries along with a priori probability distributions. Existing work in this direction includes Marx’s WordHound tool [7].
- We identified several open questions in the discussion of our simulation results, including the effect of the choice of password data sets on success rates and the evaluation of different methods for recovering the target password’s length.

### Acknowledgements
We would like to thank Google, Dan Kaminsky at White Ops, and Ingo von Maurich at Ruhr Universit¨at Bochum for their generous donation of computing resources. Dan gave us free rein on a 512-core system for the 4800 core-days necessary to perform our double-byte keystream distribution estimates, while resources from Google and Ruhr Universit¨at Bochum were used to conduct our attack simulations. We would also like to thank Alexei Melnikov for acting as our IMAP oracle.

Garman was funded by a generous grant from the Mozilla Foundation and supported by the Office of Naval Research under contract N00014-14-1-0333; Paterson was supported by an EPSRC Leadership Fellowship, EP/H005455/1; van der Merwe was supported by the EPSRC as part of the Centre for Doctoral Training in Cyber Security at Royal Holloway, University of London.

### References
[1] ADAMS, A., AND SASSE, M. A. Users are not the enemy. Commun. ACM 42, 12 (Dec. 1999), 40–46.
[2] ALFARDAN, N. J., BERNSTEIN, D. J., PATERSON, K. G., POETTERING, B., AND SCHULDT, J. C. N. On the Security of RC4 in TLS. In Proceedings of the 22nd USENIX Conference on Security (Berkeley, CA, USA, 2013), SEC’13, USENIX Association, pp. 305–320.
[3] BERNERS-LEE, T., FIELDING, R., AND FRYSTYK, H. The Hypertext Transfer Protocol HTTP/1.0. RFC 1945 (Informational), May 1996.
[4] BONNEAU, J. The science of guessing: Analyzing an anonymized corpus of 70 million passwords. In IEEE Symposium on Security and Privacy, SP 2012, 21-23 May 2012, San Francisco, California, USA (2012), IEEE Computer Society, pp. 538–552.
[5] BONNEAU, J., AND PREIBUSCH, S. The password thicket: Technical and market failures in human authentication on the web. In 9th Annual Workshop on the Economics of Information Security, WEIS 2010, Harvard University, Cambridge, MA, USA, June 7 - 8 (2010).
[6] DIERKS, T., AND ALLEN, C. The TLS Protocol Version 1.0. RFC 2246, Internet Engineering Task Force, Jan. 1999.
[7] DIERKS, T., AND RESCORLA, E. The Transport Layer Security (TLS) Protocol Version 1.1. RFC 4346, Internet Engineering Task Force, Apr. 2006.
[8] DIERKS, T., AND RESCORLA, E. The Transport Layer Security (TLS) Protocol Version 1.2. RFC 5246, Internet Engineering Task Force, Aug. 2008.
[9] FLORENCIO, D., AND HERLEY, C. A Large-scale Study of Web Password Habits. In Proceedings of the 16th International Conference on World Wide Web (New York, NY, USA, 2007), WWW ’07, ACM, pp. 657–666.
[10] FLUHRER, S. R., AND MCGREW, D. Statistical analysis of the alleged RC4 keystream generator. In FSE (2000), B. Schneier, Ed., vol. 1978 of Lecture Notes in Computer Science, Springer, pp. 19–30.
[11] FRANKS, J., HALLAM-BAKER, P., HOSTETLER, J., LAWRENCE, S., LEACH, P., LUOTONEN, A., AND STEWART, L. HTTP Authentication: Basic and Digest Access authentication. RFC 2617 (Informational), June 1999.
[12] GARMAN, C., PATERSON, K. G., AND VAN DER MERWE, T. Attacks only get better: Password recovery attacks against RC4 in TLS. Full version of this paper. Available from http://www.isg.rhul.ac.uk/tls/RC4mustdie.html.
[13] ISOBE, T., OHIGASHI, T., WATANABE, Y., AND MORII, M. Full plaintext recovery attack on broadcast RC4. In Preproceedings of FSE (2013).
[14] MANTIN, I. Predicting and distinguishing attacks on RC4 keystream generator. In EUROCRYPT (2005), R. Cramer, Ed., vol. 3494 of Lecture Notes in Computer Science, Springer, pp. 491–506.
[15] MANTIN, I., AND SHAMIR, A. A practical attack on broadcast RC4. In FSE (2001), M. Matsui, Ed., vol. 2355 of Lecture Notes in Computer Science, Springer, pp. 152–164.
[16] OHIGASHI, T., ISOBE, T., WATANABE, Y., AND MORII, M. How to recover any byte of plaintext on RC4. In Selected Areas in Cryptography - SAC 2013 - 20th International Conference, Burnaby, BC, Canada, August 14-16, 2013, Revised Selected Papers (2013), T. Lange, K. E. Lauter, and P. Lisonek, Eds., vol. 8282 of Lecture Notes in Computer Science, Springer, pp. 155–173.
[17] SALOWEY, J., ZHOU, H., ERONEN, P., AND TSCHOFENIG, H. Transport Layer Security (TLS) Session Resumption without Server-Side State. RFC 5077 (Proposed Standard), Jan. 2008.
[18] SARKAR, S., SEN GUPTA, S., PAUL, G., AND MAITRA, S. Proving TLS-attack related open biases of RC4. IACR Cryptology ePrint Archive 2013 (2013), 502.
[19] SEN GUPTA, S., MAITRA, S., PAUL, G., AND SARKAR, S. (Non-) random sequences from (non-) random permutations – analysis of RC4 stream cipher. Journal of Cryptology 27, 1 (2012), 67–108.
[20] WEIR, M., AGGARWAL, S., COLLINS, M. P., AND STERN, H. Testing metrics for password creation policies by attacking large sets of revealed passwords. In Proceedings of the 17th ACM Conference on Computer and Communications Security, CCS 2010, Chicago, Illinois, USA, October 4-8, 2010 (2010), E. Al-Shaer, A. D. Keromytis, and V. Shmatikov, Eds., ACM, pp. 162–175.
[21] YAN, J., BLACKWELL, A., ANDERSON, R., AND GRANT, A. Password Memorability and Security: Empirical Results. IEEE Security and Privacy 2, 5 (Sept. 2004), 25–31.
[22] ZVIRAN, M., AND HAGA, W. J. Password Security: An Empirical Study. J. Manage. Inf. Syst. 15, 4 (Mar. 1999), 161–185.
[23] https://bitbucket.org/mattinfosec/wordhound.