### Tag Analysis and Privacy Concerns

We analyze the distribution of tags for users at the 1%, 5%, 10%, and 20% positions. In a scenario where photos are set to be viewable only by friends, we explore how many photos of strangers (users not in the viewer's friend list) can still be accessed. Specifically, for each participant, we calculate the number of photos uploaded by that user or their friends that contain tags of users not in their friend list. Figure 6 presents the results, showing that 92% of participants have access to photos where strangers are tagged. On average, these users can view 647 photos of 169 different strangers, regardless of the privacy settings those users have set. One user can view up to 1,866 photos depicting 1,073 different strangers, while each of the top 10% of users can view photos of at least 358 strangers. This indicates that even if the online social network (OSN) adopts a more privacy-oriented approach with "friends-only" as the default setting, users' faces will remain visible to many strangers.

Overall, our study confirms concerns about the privacy risks associated with shared photos and highlights the need for a fine-grained access control mechanism, such as the one we propose.

### Access Control Model

The core concept of our approach is to refine the object of the access control model from photos (coarse-grained) to faces (fine-grained). As summarized in Figure 7, the objects in our model are the faces, the subjects are the users, and the photos are modeled as object groups. This allows us to define a fine-grained, content-based, multi-owner control policy for photos.

- **Photo Owner Rights**: The photo owner has write-only rights for publishing the photo.
- **Read Rights**: Read rights are enforced by the users whose faces are depicted in the photo. For example, in Figure 7, user U2 owns the photo P2, which depicts U1, U3, and U5's faces. This model can be implemented using a simple 2D sparse matrix, replacing or extending existing access control models. By visualizing it as a 3D matrix, we highlight that our model is an extension of the current model and does not interfere with it.

### System Design

#### Step 1: Face Recognition
We use face recognition to detect faces of known users, which become objects in the access control model. This process occurs when a user uploads a photo. Detected faces are first compared to the uploader's contacts, and if no match is found, they are compared to the contacts of other depicted users. Auto-suggestions of identified faces are displayed to the user for verification, and unidentifiable faces are requested to be tagged by the uploader.

#### Step 2: Template Generation
Recognized users are notified about the photo and can set their own permissions. A template of the processed photo is generated, where each face is represented by a layer. Until the depicted user processes the specific face, it remains hidden and no tag appears. The output is a template photo composed of the uploaded photo and a set of F layers, each representing a recognized face.

#### Step 3: Template Rendering
When a photo is to be viewed, we select the corresponding row in the access control matrix to determine which faces the viewer is allowed to see. Based on this information, a photo is created "on the fly" by superimposing the required layers on the original photo.

### User Lists and Access Control
Each user has personalized lists of contacts, which can be used to assign permissions to groups of contacts. These lists can be managed during the permission assignment phase, allowing for dynamic and flexible access control. Our goal is to provide an efficient, face-level, fine-grained access control mechanism that operates on top of traditional photo-level mechanisms.

### Implementation Details
We built a proof-of-concept implementation as a third-party Facebook app hosted on our web server. This prototype stores all user data locally and demonstrates the functionality of our approach without altering the existing backend. The fact that we were able to implement our approach externally indicates its unobtrusiveness.

### Evaluation

#### Performance Evaluation
We measured the overhead introduced by our system. The photo preparation phase, which includes cropping detected faces and creating blurred layers, takes 0.0023 seconds per tag on average. The access control enforcement and photo transformation phase, including retrieving access control lists, selecting faces to blur, overlaying blurred sections, and saving the transformed image, takes 0.001 seconds per tag on average. These overheads are negligible, especially considering that OSNs already perform various transformations on uploaded photos.

### Conclusion
Our study confirms the privacy risks associated with shared photos and demonstrates the necessity of a fine-grained access control mechanism. The proposed model, which refines the access control from photos to faces, provides a more robust and flexible solution for protecting user privacy.