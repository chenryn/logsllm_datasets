# Hacking the Matrix: Embedded Systems and Network Vulnerabilities

## FX of Phenoelit, Las Vegas 2003

### Agenda
- Hacking the Matrix
- GSM 3G Basics
- GPRS Backbone Hacks
- Anonymous HTTP via WAP
- Siemens S55 Vulnerabilities
- Phenoelit’s Usual Cisco 0-day Vulnerability and Exploit

## Hacking the MATRIX

### Enterasys Matrix E1
- **Vulnerabilities in the Matrix:**
  - SSH can only fork 10 times.
  - Unfinished connections remain open.
  - TCP ISN 64k rule on switch ports.
  - OSPF neighbors added to neighbor list in state HELO.
  - HTTP Server negative content-length integer bug.

## GSM Basics

- **Global System for Mobile Communications (GSM)**
  - Authentication based on key material on SIM card and network.
  - Core network relies on caller identification via MSISDN and key material for authentication and billing.
  - Caller spoofing is generally considered difficult.

### GPRS (General Packet Radio Service)
- Packet-oriented data transfer for mobile devices.
- Backbone built using TCP/IP.
- Authentication via GSM and optional PPP (CHAP, PAP).
- Network access, routes, and IP addressing depend on Access Point Name (APN).

### GPRS Components
- SGSN (Serving GPRS Support Node)
- GGSN (Gateway GPRS Support Node)
- HLR (Home Location Register)
- Internet
- PLMN (Public Land Mobile Network)
- WAP GW (Wireless Application Protocol Gateway)

### GPRS Attack Points
- The GGSN is a TCP/IP device facing the Internet.
- @stake: Nokia GPRS 1 IPSO DoS with TCP Option 0xFF.
- APN guessing (WarAPNing?).
- APNs often selected by company name for mobile VPNs.
- APN filtering in HLR is possible but rarely implemented.
- APNs are not considered a secret ☺.

### Backbone Hacks: GTP (GPRS Tunneling Protocol)
- Transports user protocols in the GPRS backbone.
- Controls inter-network roaming.
- Control channel and user data channel.
- xGSN must support all old protocol versions from 0 on.

#### What's So Cool?
- Fully UDP-based protocol.
- No authentication.
- Full control over all GPRS nodes.
- Creation, update, or deletion of user contexts and tunnels.
- Rerouting, redirection, and relocation control.
- Context billing configuration.
- "Invitation" of mobile users to APNs.
- Forced roaming of users.

## Anonymous HTTP

### Wireless Application Protocol (WAP)
- Uses Wireless Transport Protocol (WTP) and Wireless Session Protocol (WSP).
- WSP uses connections over UDP.
- Not easily spoofable due to 32-bit session IDs.
- Supports connectionless transactions.
- No acknowledge messages.
- Single UDP packet transfer.
- Full HTTP Request capabilities.

#### Steps:
1. GPRS WAP APN or open WAP Gateway.
2. Send HTTP request to WAP Gateway using someone else's IP address.
3. Destination UDP port 9200.
4. Enjoy.

**Note:** Victim IP addresses can be collected by running a WAP site using the HTTP header field "X-Forwarded-For".

## Siemens S55

### Bluetooth
- Pairing to death.
- Every connection creates a dialog.
- Connection structures not cleared.
- Bluetooth connection exhaustion.
- All you need is l2ping.
- The Big Inbox: S55 accepts any file sent to it.
- Sending 2100 files is possible, but deleting them is not.

### Java
- NULL Pointer Exceptions: Generally crash JVM (white screen of death).
- JAD file parsing: Missing "MIDlet-Name" and "MIDlet-1" tags crash JVM.
- Overlong "MIDlet-Name" leads to buffer overflow in filesystem.

### Spy.jar
- Outgoing WAP connections.
- Java Applications can connect to WAP sites without user permission.
- `Com.siemens.mp.gsm.PhoneBook.getMDN()` allows access to missed call list.
- `System.getProperty("IMEI")` returns the International Mobile Equipment Identity.

### Time.jar
- Sending SMS or placing calls via Java applications requires user permission.
- Permission is obtained via dialog.
- Filling the screen obscures the dialog.
- User answers a different question.
- Outgoing call triggered but terminates Java application.

### GIFt
- S55 supports GIF for MMS.
- GIF file format has a Virtual Screen section.
- Changing the virtual screen offset for a picture or one frame in an animated GIF crashes the device.
- Placing such a pic as background renders the device unusable.

## A Small Bug...

### Cisco IOS 11.x and Below
- UDP Echo service memory leak.
- Device sends as much data back to the sender as the UDP length field said it got.
- Leaks IO memory blocks.
- IO memory contains actual packet data—and not just ours.
- We are talking about 19kbytes here.
- Comparable bug surfaced in IOS 12.x Cisco Express Forwarding (CEF) code.

### IOS Fingerprinting
- Leaked IO memory contains memory block headers.
- Block headers contain the address of who allocated the block.
- Address of allocating function changes per image.
- Address range changes per platform.
- Result: Reliable remote IOS fingerprint.

### IOS Fingerprinting [2]
- In detail:
  - MAGIC
  - PID
  - Alloc Chk
  - Alloc Name
  - Alloc PC
  - NEXT ptr
  - PREV ptr
  - Size + Usage
  - mostly 0x01
  - REDZONE
  - Echo Data
  - 0x00 … Receive Buffer
  - Receive Buffer
  - Ring buffer info
  - Ethernet hdr
  - IP packet
  - Image Specific
  - Platform specific, describes location

### Remote IOS Sniffing
- Leaked IO memory contains packets in the receive buffers (RX ring ds elements).
- Phenoelit IOSniff: Repeated memory leak retrieval, memory block identification, packet offset identification, packet decoding, caching, and duplicate prevention.

### IOS HTTP Bug
- Almost all embedded HTTP implementations are vulnerable—Cisco is no exception.
- Integer or counting-related issue.
- IOS 11.x – 12.2.x.
- Requires sending of a 2GB sized URL to the device.
- Stack-based buffer overflow.

### Exploitation Issues in the Past
- For heap overflows, we need several image and configuration-dependent addresses.
- PREV pointer in the memory block.
- Size value in IO memory exploitation.
- Stack location.
- Own code location.
- Requirements made reliable remote exploitation hard/impossible.

### What We Got Now
- UDP Echo memory leak.
- Attacker-provided binary data (the delivered Echo content).
- Live IOS memory addresses (leaked IO memory block headers).
- Ability to fill multiple memory areas with our binary data (Ring buffer).
- HTTP Overflow: Direct frame pointer and return address overwrite.

### What We Can Do Now
- Send full binary shell code.
- Calculate the address of the code using IO memory block header information.
- Select the shell code that is most likely not modified.
- Directly redirect execution in the provided shell code.
- Own the box.

### Combining
1. Send the maximum URL length allowed by IOS.
2. Send 2GB of additional URL elements in correctly sized chunks.
3. Perform UDP memory leak several times with shell code in the request packet.
4. Make intelligent decision on which address to use.
5. Complete overflow and gain control.

### Again, in Color
- HTTP Connect + legal size URL.
- 2GB of /AAAAAA/AAA..../.
- Shell code to UDP Echo.
- Leaked memory back.
- Complete HTTP overflow.
- 0wned.
- Repeat until happy.

### Binary via HTTP
- Cisco’s HTTP doesn't like all characters.
- Slash, 0x0a, 0x0d, and 0x00 are obviously bad for HTTP.
- Some others are bad as well.
- HTTP encoding (%XY) supported.
- Decoding seems to take place in the exact same buffer.
- Return address HTTP encoded.

### Return Address Selection
- Several address selection strategies tested.
- Last address obtained (about 50% success).
- Randomly selected address (about 50%-60% success).
- Highest memory location (about 0%-10% success).
- Lowest memory location (about 90% success).
- Most frequently seen address (about 30%-40% success).

### Cisco Shell Code
- In the past: Complete configuration replacement in NVRAM and requires reboot.
- Required knowledge: Attacked interface, IP address, basic routing information.
- Loses information of original configuration: Passwords, keys, other routing information, access lists, logging information.

### Researching Binary IOS
- Cisco supports serial gdb.
- ROM Monitor (rommon) allows limited debugging: Breakpoints, watchpoints, disassembly.
- Code identification is simple.
- Related debug strings can be found in the code.
- Data and text segments are intermixed.
- Strings stored before the related function.

### Next Generation Code
- Runtime IOS patching.
- Patched (disabled) elements: IOS text segment checksum function, authentication requirement for incoming VTY connections, verification return code from "enable mode" function.
- In the future: ACLs or BGP neighbor check?
- Keep IOS running… but how?

### Clean Return
- Overflow destroys significant amounts of stack due to HTTP encoding.
- 24 bytes encoded: %fe%fe%ba%be%f0%0d%ca%fe.
- 8 bytes decoded.
- Motorola call structure uses frame pointer in A6 and saved stack pointer on stack.
- Moving the stack pointer before the saved SP of any function restores SP and A6.
- Search stack "upward" for return address of desired function.
- SP = - 4, unlk a6, rts.

### Clean Return Code
- IOS 11.3(11b) HTTP overflow find-return code:
  ```assembly
  move.l a7,a2
  findret:
  addq.l #0x01,a7
  cmp.l #0x0219fcc0,(a7)
  bne findret
  move.l a7,(a2)
  sub.l #0x00000004,(a2)
  move.l (a2),a6
  clr.l d0
  movem.l -4(a6),a2
  unlk a6
  rts
  ```

### Runtime IOS Patching
- Advantages: Router stays online, configuration preserved, backdoor in IOS runtime code.
- Disadvantages: Depending on image, large target list required (code addresses per image), annoying “checksum error” message on console ☺.

### CISCO CASUM EST
- Reliable remote IOS exploitation.
- Address calculation and shell code placement via UDP Echo info leak.
- Address selection using second smallest address—first used for HTTP transfer itself.
- Runtime IOS patch disables VTY and enable mode password verification.

### Tribute to DEFCON
- Image-independent shell code anyone?
- Modifying IOS code is image dependent.
- Modifying IOS configuration is not.
- Runtime config modification code preserves original config and changes only a few "elements."
- Shell code needs: `strstr()`, `memcpy()`, `checksum()`.

### Config Modification Code
- Find beginning of configuration in NVRAM.
- Find occurrences of "\n password", "\nenable".
- Replace occurrences with your "data."
- Hereby replace authentication information for:
  - Console passwords.
  - VTY line passwords.
  - Enable passwords.
  - Enable secrets.
- Recalculate checksum.
- Reboot.

### Advantages and Disadvantages
- Advantages: Image independent, configuration preserved, more choices of what to do.
- Disadvantages: Depending on platform, router has to reboot once.

### So What?
- Didn’t we mention that...
  - You shouldn’t run unneeded services.
  - You should protect your infrastructure.
  - You shouldn’t copy data into buffers that are not large enough to hold it.
- IOS moves "forward."
- Legal interception is built into IOS: "My other computer is your legal interception system." — Hey Jaya, it’s no longer a joke.
- If your infrastructure is owned, you can’t defend your systems.
- Other people exploit IOS as well—only we do it in public.

### Defense: Mobile Phones
- Turn off unneeded interfaces on your phone: Bluetooth, IRDA.
- Do not run Java code you don’t trust.
- When receiving files, delete them directly instead of opening them (remember your Outlook).
- Keep your Phone firmware up to date.
- Don’t use GPRS-based VPN solutions.

### Defense: Cisco
- Do not trust devices, just because they are in a black box.
- Keep your IOS up to date.
- If possible, block direct communication to your infrastructure devices.
- Do not run unneeded services on routers and other devices.
- Prefer out-of-band management.
- Include your router in your IDS watch list.

### Thanks and Greetings
- The Phenoelit Members, all@ph-neutral, The DEFCON goons, Halvar, Johnny Cyberpunk, PI:EMAIL, PSIRT & STAT @ Cisco.

**THIS IS THE POWER IN THE NETWORK. now.**
**THIS IS YOUR POWER IN THE NETWORK. now.**