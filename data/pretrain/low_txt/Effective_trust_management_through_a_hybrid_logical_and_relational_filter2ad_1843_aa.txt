# Effective Trust Management Through a Hybrid Logical and Relational Approach

**Authors:**
- Adam J. Lee†
- Ting Yu‡
- Yann Le Gall†

**Contact Information:**
- †Department of Computer Science, University of Pittsburgh
- ‡Department of Computer Science, North Carolina State University

**Abstract:**
Despite extensive recent research on trust management for authorization, little attention has been given to the practical deployment of these technologies. In this paper, we explore how established logical trust management systems can be effectively deployed in enterprise environments. Specifically, we develop a framework that integrates logical trust management policies with a relational database management system (DBMS). We present a correct and complete procedure for compiling CTM (Composite Trust Management) credentials into dynamic views within a database, enabling efficient role membership checks and enumeration. We also propose a hybrid algorithm that leverages both logical rules and the DBMS to efficiently enumerate user capabilities. Our evaluation of a prototype implementation demonstrates the practicality of our approach. As CTM extends the RT family of trust management languages, our work is likely generalizable to other Datalog-based trust management systems.

**Categories and Subject Descriptors:**
- D.4.6 [Operating Systems]: Security and Protection—access controls, authentication
- K.6.5 [Management of Computing and Information Systems]: Security and Protection

**General Terms:**
- Security

**Keywords:**
- Credentials, databases, policy, reputation, trust

## 1. Introduction
Modern organizations have evolved from centralized monoliths to distributed entities, leveraging the Internet's pervasiveness and reliability. This shift has led to the formation of virtual organizations and increased user involvement in content development and dissemination. However, traditional identity-based access control technologies are ill-suited for these dynamic environments.

In response, significant research has focused on trust management, trust negotiation, and distributed proof construction. Recently, researchers have integrated these systems with decentralized reputation and recommendation systems used in P2P and social networks, providing a more comprehensive approach to managing trust. These systems allow administrators to manage and query the protection state of distributed systems, leveraging their decentralized nature.

For trust management systems to be viable in emerging networked environments, they must efficiently answer queries over the protection state, even with complex policies and reputation functions. While existing research has addressed the proof of compliance question, less attention has been given to policy satisfaction and capability questions. These questions are essential for administrators to fully understand the protection state and must be answered efficiently.

Additionally, trust management systems must be deployable on existing IT infrastructures. De Capitani Di Vimercati et al. demonstrated that a basic trust management system can be implemented within a DBMS. However, this does not address the adoption of more sophisticated logical trust management systems.

In this paper, we extend this work by developing an implementation of the composite trust management system CTM, which efficiently answers proof of compliance, policy satisfaction, and capability queries using both logical inference and an open-source DBMS. CTM extends the RT family of role-based logical trust management systems with support for aggregate horizontal trust calculations. Our contributions include:

- A framework for trust management policy management built on a commercial relational DBMS, which synchronizes logical policy rulesets with the underlying database.
- A correct and complete compilation procedure for transforming CTM policy credentials into dynamic views over a standard relational database.
- A novel hybrid algorithm for answering capability review queries, combining logical forward-chaining with the DBMS's ability to perform complex joins and aggregations.
- A comprehensive evaluation of a prototype implementation, demonstrating the efficiency and practicality of our approach.

This work shows that even complex CTM policies can be evaluated efficiently in centralized systems and that existing commercial technologies form a viable substrate for feature-rich trust management.

## 2. Background
To provide a concrete discussion, we focus on the design of a framework to support CTM, an extension of the RT family of logical trust management languages. CTM supports aggregate trust evaluation and the composition of credential-based and reputation-based trust, enhancing expressiveness but posing challenges for efficient policy evaluation.

### 2.1 Composite Trust Management
CTM addresses two types of trust: vertical and horizontal. Vertical trust involves credentials issued by authorities, while horizontal trust is inferred from peer feedback. CTM uses role membership to define set-based semantics for policies, where roles represent sets of principals with similar properties. Policy statements are expressed as role definitions encoded as signed credentials.

CTM supports four basic role definitions:
- **Simple Member**: \( KA.R \leftarrow KD \) indicates that principal \( KA \) considers \( KD \) a member of role \( KA.R \).
- **Simple Containment**: \( KA.R \leftarrow KB.R1 \) defines \( KA.R \) to contain all members of \( KB.R1 \).
- **Linking Containment**: \( KA.R \leftarrow KA.R1.R2 \) defines \( KA.R \) to contain all members of \( KB.R2 \) for each \( KB \) in \( KA.R1 \).
- **Intersection Containment**: \( KA.R \leftarrow KB1.R1 \cap \ldots \cap KBn.Rn \) defines \( KA.R \) to contain principals who are members of all specified roles.

To support horizontal trust, CTM models interactions through transactions and feedback, using a trust function \( f: 2F \times P \times P \rightarrow R \), where \( F \) is a set of feedbacks, \( P \) is the set of principals, and \( R \) is the reputation domain. CTM also supports aggregate containment roles, allowing roles to be defined based on reputation evaluations.

### 2.2 Trust Query Types
Effective trust management requires support for various privilege review queries:
- **Proof of Compliance Query**: Determine if a principal is a member of a role.
- **Role Membership Query**: Enumerate all members of a role.
- **Capability Query**: Determine all roles a principal is a member of.

While proof of compliance queries are frequent, role membership and capability queries are also important for policy analysis and should be answered efficiently.

## 3. The Design of a Trust Evaluation Engine
A trust evaluation engine ensures the correct mapping between users and roles and supports policy analysis. Instead of building a standalone system, we advocate for integrating it with a commodity relational DBMS, offering benefits such as easy deployment and integration with existing IT infrastructures.

Our framework includes:
- **Policy Maintenance Module**: Handles policy updates.
- **Trust Query Evaluation Module**: Processes trust queries.
- **Policy Analysis Module**: Supports policy analysis.

By leveraging both logical inference and the DBMS, our framework provides an efficient and practical solution for trust management in enterprise environments.