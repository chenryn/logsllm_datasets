### Table 1: Self-Propagating Worms Caught by GQ in Early 2006

| Total Infections | Connections per Infection | Incubation Time (minutes) |
|-----------------|---------------------------|--------------------------|
| 5.9             | 6.6                       | 8.6                      |
| 24.4            | 7.9                       | 10.4                     |
| 329.7           | 11.3                      | 20.1                     |
| 24.9            | 27.5                      | 27.5                     |
| 63.1            | 76.1                      | 18.0                     |
| 58.2            | 210.9                     | 9.4                      |
| 7.2             | 10.0                      | 32.5                     |
| 34.2            | 4.8                       | 7.0                      |
| 4.1             | 5.3                       | 5.4                      |
| 5.6             | 5.0                       | 4.3                      |
| 5.4             | 186.7                     | 208.9                    |
| 384.9           | -                         | -                        |

**Note:** Events correspond to the total infections during the experiment with the same executable. The table also includes the number of connections required per infection for propagation and the incubation times (the delay from initial infection in our farm to subsequent infection of the next host). Delays of over 3 minutes are highlighted in bold.

### SMTP Policy Adjustments
Due to the string manipulation, we decided to discontinue the policy of allowing seemingly innocuous non-spam test SMTP exchanges. 

### Fidelity Enhancements
It became evident that Waledac was not the only spambot family that closely monitored the greeting banners returned by SMTP servers. As a result, we upgraded our SMTP sink to support banner grabbing for select connections. This involved connecting to the target SMTP server to obtain the greeting message and relaying it back to the spambot. The closer malware tracks expected behavior, the more likely we are to engage in an arms race of emulating and testing fidelity.

### Protocol Violations
During our ongoing spam extraction from spambots [18], we observed that while many connections were established, the actual content transmission was minimal for some bot families. Further investigation revealed that our SMTP sink protocol engine adhered too strictly to the SMTP specification [26], preventing the DATA stage from being reached. Discrepancies included repeated HELO/EHLO greetings and the format of email addresses in MAIL FROM and RCPT TO stanzas (with or without colons, with or without angle brackets).

### Exploratory Containment
Containment policies do not always need to facilitate continuous malware operation. To better understand a sample, it is often equally important to create specific environmental conditions that elicit new behaviors. For example, in preparing for our infiltration of Storm, we used a dual approach of live experimentation and binary analysis to understand the error codes in Storm’s delivery reports [18]. Neither approach alone could explain all behaviors, but by iterating between the two, we eventually identified the meanings of the error codes. We applied this method again during our infiltration of the MegaD botnet [4] and in a recent investigation of clickbots [21].

### Unclear Phylogenies
When we subject specimens labeled as belonging to malware family X to a corresponding containment policy, we assume that the family membership is correct. However, this assumption is increasingly violated in practice. We have observed inconsistent labeling, including cases of split personalities in malware. For instance, in February 2010, we encountered a specimen that exhibited both MegaD’s C&C behavior and Grum family behavior. While tight containment ensures no harm, it raises doubts about the idea of developing a library of containment policies. A batch-processing setup that enables automated family classification is thus essential. We reflect all outgoing network activity to our catch-all sink and apply network-level fingerprinting on the samples’ initial activity trace. This approach has successfully classified approximately 10,000 unique malware samples harvested from pay-per-install distribution servers [3].

### System Scalability
Traditional honeyfarms like Potemkin [29] emphasize scalability of the inmate population. These systems quickly "flash-clone" new inmates to provide additional infectees. However, today's requirements for malware execution have shifted. Self-propagating malware infections, while not extinct, play a lesser role and use different vectors. Therefore, careful filtering and resource management for unsolicited inbound traffic are less critical, especially for home-user machines behind network address translators. We now prioritize scalability in terms of providing independent experiments at varying stages of "production-readiness" with moderate inmate population sizes and mechanisms for controlled infection.

The architecture outlined in § 5 constrains scalability in several ways:
1. **VLAN IDs**: Limited to twelve bits, allowing up to 4,096 inmates. Physical switches may support fewer.
2. **Single Containment Server Bottleneck**: With a large number of inmates, a single containment server can become a bottleneck. This can be addressed by using a cluster of containment servers managed by the subfarm’s packet router.
3. **Central Gateway Bottleneck**: As the number of inmates and subfarms grows, the central gateway can become a bottleneck. Currently, a 3GHz quad-core Xeon machine with 5GB of memory serves 5-6 subfarms in parallel.
4. **Limited IP Address Space**: There is an incentive to avoid blacklisting and leaking actively used addresses. If necessary, we may use GRE tunnels to connect additional routable address space available in other networks.

### Conclusion
The GQ malware farm introduces containment as a primary component for malware analysis. Over six years, we have treated containment as a tool to improve our understanding of monitored malware. While modern malware resists longitudinal analysis in completely contained environments, GQ allows flexible and precise containment policies while maintaining safety. Ongoing development will continue to provide core functionality for monitoring malware and botnet operations.

We acknowledge the manual and time-consuming nature of this process. However, GQ makes it explicit and feasible. Recent work on automated C&C protocol extraction from binaries [4, 17] could aid in understanding individual flows, but currently, human-driven analysis provides deeper insights. Future work includes developing a domain-specific, abstract language for expressing containment policies, which could simplify the creation of a toolchain for processing policies.

### Acknowledgements
This work would not have been possible without the support of many parties. We thank the U.S. Department of Energy’s ESnet, Hewlett/Packard, Microsoft, and VMware for their generous in-kind donations. Special thanks to Randy Bush, Eli Dart, Chris Grier, Craig Leres, Stefan Savage, Helen Wang, and our colleagues at the Lawrence Berkeley National Laboratory and the University of California, San Diego. This work was supported in part by National Science Foundation grants NSF-0433702, CNS-0831535, and CNS-0905631, and by the Office of Naval Research MURI grant N000140911081.

### References
[1] P. Barford and M. Blodgett. Toward botnet mesocosms. In Proceedings of the First Workshop on Hot Topics in Understanding Botnets, Berkeley, CA, USA, 2007. USENIX Association.
[2] U. Bayer, C. Kruegel, and E. Kirda. TTAnalyze: A tool for analyzing malware. In 15th Annual Conference of the European Institute for Computer Antivirus Research (EICAR), 2006.
[3] J. Caballero, C. Grier, C. Kreibich, and V. Paxson. Measuring Pay-per-Install: The Commoditization of Malware Distribution. In Proceedings of the 20th USENIX Security Symposium, San Francisco, CA, USA, August 2011.
[4] J. Caballero, P. Poosankam, C. Kreibich, and D. Song. Dispatcher: Enabling active botnet infiltration using automatic protocol reverse-engineering. In Proceedings of the 16th ACM CCS, pages 621–634, Chicago, IL, USA, November 2009.
[5] J. Calvet, C. R. Davis, J. M. Fernandez, J.-Y. Marion, P.-L. St-Onge, W. Guizani, P.-M. Bureau, and A. Somayaji. The case for in-the-lab botnet experimentation: creating and taking down a 3000-node botnet. In Proceedings of the 26th ACSAC Conference, pages 141–150, New York, NY, USA, 2010. ACM.
[6] CBL. Composite Blocking List. http://cbl.abuseat.org, 2003.
[7] J. Chen, J. McCullough, and A. C. Snoeren. Universal Honeyfarm Containment. Technical Report CS2007-0902, UCSD, September 2007.
[8] X. Chen, J. Andersen, Z. Mao, M. Bailey, and J. Nazario. Towards an understanding of anti-virtualization and anti-debugging behavior in modern malware. In Proceedings of the 38th Conference on Dependable Systems and Networks (DSN), pages 177–186. IEEE, 2008.
[9] W. Cui, V. Paxson, and N. Weaver. GQ: Realizing a System to Catch Worms in a Quarter Million Places. Technical Report TR-06-004, International Computer Science Institute, September 2006.
[10] A. W. Jackson, D. Lapsley, C. Jones, M. Zatko, C. Golubitsky, and W. T. Strayer. SLINGbot: A System for Live Investigation of Next Generation Botnets. In Proceedings of the 2009 Cybersecurity Applications & Technology Conference for Homeland Security, pages 313–318, Washington, DC, USA, 2009. IEEE Computer Society.
[11] X. Jiang and D. Xu. Collapsar: A VM-based architecture for network attack detention center. In Proceedings of the 13th USENIX Security Symposium, page 2. USENIX Association, 2004.
[12] J. John, A. Moshchuk, S. Gribble, and A. Krishnamurthy. Studying spamming botnets using Botlab. In Proceedings of the 6th USENIX Symposium on Networked Systems Design and Implementation, pages 291–306. USENIX Association, 2009.
[13] C. Kanich, C. Kreibich, K. Levchenko, B. Enright, G. M. Voelker, V. Paxson, and S. Savage. Spamalytics: An empirical analysis of spam marketing conversion. In Proceedings of the 15th ACM Conference on Computer and Communications Security, pages 3–14, Alexandria, Virginia, USA, October 2008.
[14] T. Kerremans and B. Verstricht. Trinity Rescue Kit. http://trinityhome.org.
[15] D. Koblas. SOCKS. In Proceedings of the 3rd USENIX Security Symposium. USENIX Association, September 1992.
[16] E. Kohler, R. Morris, B. Chen, J. Jannotti, and M. Kaashoek. The Click modular router. ACM Transactions on Computer