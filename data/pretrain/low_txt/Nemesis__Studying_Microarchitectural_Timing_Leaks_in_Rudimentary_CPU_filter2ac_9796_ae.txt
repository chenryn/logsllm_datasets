### Context of Intel SGX

Recent techniques have been employed to exploit unprotected page table memory in the context of Intel SGX [75]. Additionally, it has been demonstrated that enclave-private control flow can be leaked through the CPU's branch prediction mechanisms [18, 42]. This leakage has become particularly relevant in the context of Spectre-type speculative execution attacks [9, 40]. Intel has addressed these Spectre attacks against SGX enclaves by clearing the Branch Target Buffer (BTB) upon enclave entry and exit [9].

At the microarchitectural level, Nemesis-style interrupt latency timing attacks are closely related to Meltdown [44] because both exploit the fact that asynchronous CPU events, such as faults and interrupts, are only handled upon instruction retirement. Initially, Intel SGX was thought to be resistant to Meltdown-type transient execution vulnerabilities. However, recent work introduced Foreshadow [71, 78], which enables arbitrary in-enclave reads and completely undermines the isolation and attestation guarantees in the SGX ecosystem. To facilitate Trusted Computing Base (TCB) recovery, Intel has revoked compromised attestation keys and released microcode patches to address Foreshadow at the hardware level.

### Conclusion

The security implications of asynchronous CPU events, such as interrupts and faults, have not been extensively studied from a microarchitectural perspective. We have contributed Nemesis, a subtle timing channel in the CPU's fundamental interrupt logic. Our work represents the first controlled-channel attack against embedded enclaved execution processors, and we have demonstrated Nemesis's applicability on modern Intel SGX x86 platforms.

### Acknowledgments

We thank Job Noorman for his guidance on the Sancus secure interrupt extensions and Pieter Maene for his valuable feedback on early versions of this text. The research presented in this paper was partially supported by the Research Fund KU Leuven and by a gift from Intel Corporation. Jo Van Bulck and Raoul Strackx are supported by a grant from the Research Foundation – Flanders (FWO).

### References

[1] Onur Acıiçmez and Çetin Kaya Koç. 2006. Trace-driven cache attacks on AES. Cryptology ePrint Archive, Report 2006/138. http://eprint.iacr.org/2006/138.

[2] Onur Aciiçmez, Çetin Kaya Koç, and Jean-Pierre Seifert. 2007. On the power of simple branch prediction analysis. In Proceedings of the 2nd ACM Symposium on Information, Computer and Communications Security. ACM, 312–320.

[3] Ittai Anati, Shay Gueron, Simon Johnson, and Vincent Scarlata. 2013. Innovative technology for CPU-based attestation and sealing. In Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy, Vol. 13.

[4] Marc Andrysco, David Kohlbrenner, Keaton Mowery, Ranjit Jhala, Sorin Lerner, and Hovav Shacham. 2015. On subnormal floating point and abnormal timing. In Security and Privacy (SP), 2015 IEEE Symposium on. IEEE, 623–639.

[5] ARM. 2009. Cortex-M0 Technical Reference Manual r0p0. http://infocenter.arm.com/help/topic/com.arm.doc.ddi0432c/DDI0432C_cortex_m0_r0p0_trm.pdf.

[6] Andrew Baumann, Marcus Peinado, and Galen Hunt. 2014. Shielding applications from an untrusted cloud with Haven. In 11th USENIX Symposium on Operating Systems Design and Implementation. USENIX Association, 267–283.

[7] Ferdinand Brasser, Brahim El Mahjoub, Ahmad-Reza Sadeghi, Christian Wachsmann, and Patrick Koeberl. 2015. TyTAN: Tiny trust anchor for tiny devices. In Design Automation Conference (DAC 2015). IEEE, 1–6.

[8] Ferdinand Brasser, Urs Müller, Alexandra Dmitrienko, Kari Kostiainen, Srdjan Capkun, and Ahmad-Reza Sadeghi. 2017. Software grand exposure: SGX cache attacks are practical. In 11th USENIX Workshop on Offensive Technologies (WOOT '17). USENIX Association.

[9] Guoxing Chen, Sanchuan Chen, Yuan Xiao, Yinqian Zhang, Zhiqiang Lin, and Ten H Lai. 2018. SGXPECTRE attacks: Leaking enclave secrets via speculative execution. arXiv preprint arXiv:1802.09085 (2018).

[10] Sanchuan Chen, Xiaokuan Zhang, Michael K Reiter, and Yinqian Zhang. 2017. Detecting privileged side-channel attacks in shielded execution with Déjà Vu. In Proceedings of the 2017 ACM on Asia Conference on Computer and Communications Security. ACM, 7–18.

[11] Jeroen V Cleemput, Bart Coppens, and Bjorn De Sutter. 2012. Compiler mitigations for time attacks on modern x86 processors. ACM Transactions on Architecture and Code Optimization (TACO) 8, 4 (2012), 23.

[12] Bart Coppens, Ingrid Verbauwhede, Koen De Bosschere, and Bjorn De Sutter. 2009. Practical mitigations for timing-based side-channel attacks on modern x86 processors. In 2009 IEEE Symposium on Security and Privacy. IEEE, 45–60.

[13] Victor Costan and Srinivas Devadas. 2016. Intel SGX explained. Technical Report. Computer Science and Artificial Intelligence Laboratory MIT. https://eprint.iacr.org/2016/086.pdf.

[14] Victor Costan, Ilia Lebedev, and Srinivas Devadas. 2016. Sanctum: Minimal hardware extensions for strong software isolation. In 25th USENIX Security Symposium. USENIX Association, 857–874.

[15] Ruan De Clercq, Frank Piessens, Dries Schellekens, and Ingrid Verbauwhede. 2014. Secure interrupts on low-end microcontrollers. In Application-specific Systems, Architectures and Processors (ASAP), 2014 IEEE 25th International Conference on. IEEE, 147–152.

[16] Karim Eldefrawy, Gene Tsudik, Aurélien Francillon, and Daniele Perito. 2012. SMART: Secure and minimal architecture for (establishing a dynamic) root of trust. In NDSS, Vol. 12. Internet Society, 1–15.

[17] Dmitry Evtyushkin, Jesse Elwell, Meltem Ozsoy, Dmitry Ponomarev, Nael Abu Ghazaleh, and Ryan Riley. 2014. ISO-X: A flexible architecture for hardware-managed isolated execution. In 2014 47th Annual IEEE/ACM International Symposium on Microarchitecture. IEEE, 190–202.

[18] Dmitry Evtyushkin, Ryan Riley, Nael CSE Abu-Ghazaleh, Dmitry Ponomarev, et al. 2018. BranchScope: A new side-channel attack on directional branch predictor. In Proceedings of the Twenty-Third International Conference on Architectural Support for Programming Languages and Operating Systems. ACM, 693–707.

[19] Andrew Ferraiuolo, Andrew Baumann, Chris Hawblitzel, and Bryan Parno. 2017. Komodo: Using verification to disentangle secure-enclave hardware from software. In Proceedings of the 26th Symposium on Operating Systems Principles. ACM, 287–305.

[20] Andrew Ferraiuolo, Yao Wang, Rui Xu, Danfeng Zhang, Andrew Myers, and Edward Suh. 2015. Full-processor timing channel protection with applications to secure hardware compartments. Computing and Information Science Technical Report. Cornell University. http://hdl.handle.net/1813/41218.1.

[21] Andrew Ferraiuolo, Rui Xu, Danfeng Zhang, Andrew C Myers, and G Edward Suh. 2017. Verification of a practical hardware security architecture through static information flow analysis. In Proceedings of the Twenty-Second International Conference on Architectural Support for Programming Languages and Operating Systems. ACM, 555–568.

[22] Agner Fog. 2018. Instruction tables. Lists of instruction latencies, throughputs, and micro-operation breakdowns for Intel, AMD, and VIA CPUs. Technical Report. Technical University of Denmark. http://www.agner.org/optimize/instruction_tables.pdf.

[23] Qian Ge, Yuval Yarom, David Cock, and Gernot Heiser. 2018. A survey of microarchitectural timing attacks and countermeasures on contemporary hardware. Journal of Cryptographic Engineering 8, 1 (2018), 1–27.

[24] Travis Goodspeed. 2008. Practical attacks against the MSP430 BSL. In Twenty-Fifth Chaos Communications Congress.

[25] Johannes Götzfried, Moritz Eckert, Sebastian Schinzel, and Tilo Müller. 2017. Cache Attacks on Intel SGX. In Proceedings of the 10th European Workshop on Systems Security (EuroSec’17).

[26] Johannes Götzfried, Tilo Müller, Ruan de Clercq, Pieter Maene, Felix Freiling, and Ingrid Verbauwhede. 2015. Soteria: Offline software protection within low-cost embedded devices. In Proceedings of the 31st Annual Computer Security Applications Conference. ACM, 241–250.

[27] Ben Gras, Kaveh Razavi, Erik Bosman, Herbert Bos, and Christiano Giuffrida. 2017. ASLR on the line: Practical cache attacks on the MMU. NDSS (Feb. 2017) (2017).

[28] Daniel Gruss, Julian Lettner, Felix Schuster, Olya Ohrimenko, Istvan Haller, and Manuel Costa. 2017. Strong and efficient cache side-channel protection using hardware transactional memory. In USENIX Security Symposium.

[29] Daniel Gruss, Clémentine Maurice, Klaus Wagner, and Stefan Mangard. 2016. Flush+Flush: A fast and stealthy cache attack. In Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA). Springer.

[30] Jago Gyselinck, Jo Van Bulck, Frank Piessens, and Raoul Strackx. 2018. Off-limits: Abusing legacy x86 memory segmentation to spy on enclaved execution. In International Symposium on Engineering Secure Software and Systems (ESSoS ’18). Springer, 44–60.

[31] Marcus Hähnel, Weidong Cui, and Marcus Peinado. 2017. High-resolution side channels for untrusted operating systems. In 2017 USENIX Annual Technical Conference (ATC ’17). USENIX Association.

[32] Matthew Hoekstra, Reshma Lal, Pradeep Pappachan, Vinay Phegade, and Juan Del Cuvillo. 2013. Using innovative instructions to create trustworthy software solutions. In HASP@ ISCA. 11.

[33] Owen S. Hofmann, Sangman Kim, Alan M. Dunn, Michael Z. Lee, and Emmett Witchel. 2013. InkTag: Secure applications on an untrusted operating system. In Proceedings of the Eighteenth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS). ACM, 265–278.

[34] Intel Corporation. 2014. Intel Software Guard Extensions Programming Reference. Order no. 329298-002US.

[35] Intel Corporation. 2018. Intel 64 and IA-32 Architectures Optimization Reference Manual. Order no. 248966-040.

[36] Intel Corporation. 2018. Intel 64 and IA-32 Architectures Software Developer’s Manual. Order no. 325384-067US.

[37] Intel Corporation. 2018. Intel Software Guard Extensions (SGX) SW Development Guidance for Potential Bounds Check Bypass (CVE-2017-5753) Side Channel Exploits. Rev. 1.1.

[38] Simon Johnson. 2017. Intel SGX and side-channels. https://software.intel.com/en-us/articles/intel-sgx-and-side-channels.

[39] Gerwin Klein, Kevin Elphinstone, Gernot Heiser, June Andronick, David Cock, Philip Derrin, Dhammika Elkaduwe, Kai Engelhardt, Rafal Kolanski, Michael Norrish, et al. 2009. seL4: Formal verification of an OS kernel. In Proceedings of the ACM SIGOPS 22nd Symposium on Operating Systems Principles. ACM, 207–220.

[40] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss, Werner Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, Michael Schwarz, and Yuval Yarom. 2019. Spectre attacks: Exploiting speculative execution. In 40th IEEE Symposium on Security and Privacy (S&P’19).

[41] Patrick Koeberl, Steffen Schulz, Ahmad-Reza Sadeghi, and Vijay Varadharajan. 2014. TrustLite: A security architecture for tiny embedded devices. In Proceedings of the Ninth European Conference on Computer Systems. ACM, Article 10, 14 pages.

[42] Sangho Lee, Ming-Wei Shih, Prasun Gera, Taesoo Kim, Hyesoon Kim, and Marcus Peinado. 2017. Inferring fine-grained control flow inside SGX enclaves with branch shadowing. In Proceedings of the 26th USENIX Security Symposium. Vancouver, Canada.

[43] Andy Leiserson. 2018. Side channels and runtime encryption solutions with Intel SGX. https://www.fortanix.com/assets/Fortanix_Side_Channel_Whitepaper.pdf. (2018).

[44] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas, Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom, and Mike Hamburg. 2018. Meltdown: Reading kernel memory from user space. In 27th USENIX Security Symposium (USENIX Security 18).

[45] P. Maene, J. Götzfried, R. de Clercq, T. Müller, F. Freiling, and I. Verbauwhede. 2017. Hardware-based trusted computing architectures for isolation and attestation. IEEE Trans. Comput. 99 (2017).

[46] Jonathan M. McCune, Yanlin Li, Ning Qu, Zongwei Zhou, Anupam Datta, Virgil D. Gligor, and Adrian Perrig. 2010. TrustVisor: Efficient TCB reduction and attestation. In 2010 IEEE Symposium on Security and Privacy. IEEE, 143–158.

[47] Jonathan M. McCune, Bryan Parno, Adrian Perrig, Michael K. Reiter, and Hiroshi Isozaki. 2008. Flicker: An execution infrastructure for TCB minimization. In Proceedings of the 2008 EuroSys Conference, Glasgow, Scotland, UK, April 1-4, 2008. ACM, 315–328.

[48] Frank McKeen, Ilya Alexandrovich, Alex Berenzon, Carlos V Rozas, Hisham Shafi, Vedvyas Shanbhogue, and Uday R Savagaonkar. 2013. Innovative instructions and software model for isolated execution. In Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy. ACM, Article 10, 1 pages.

[49] Mike Mitchell. 2002. Implementing an ultralow-power keypad interface with the MSP430. Technical Report. Texas Instruments. http://www.ti.com/lit/an/slaa139/slaa139.pdf.

[50] Ahmad Moghimi, Thomas Eisenbarth, and Berk Sunar. 2018. MemJam: A false dependency attack against constant-time crypto implementations in SGX. In Cryptographers’ Track at the RSA Conference. Springer, 21–44.

[51] Ahmad Moghimi, Gorka Irazoqui, and Thomas Eisenbarth. 2017. CacheZoom: How SGX amplifies the power of cache attacks. In Conference on Cryptographic Hardware and Embedded Systems (CHES ’17).

[52] Job Noorman. 2017. Sancus: A low-cost security architecture for distributed IoT applications on a shared infrastructure. Ph.D. Dissertation. KU Leuven. https://lirias.kuleuven.be/bitstream/123456789/574995/1/thesis.pdf.

[53] Job Noorman, Pieter Agten, Wilfried Daniels, Raoul Strackx, Anthony Van Herrewege, Christophe Huygens, Bart Preneel, Ingrid Verbauwhede, and Frank Piessens. 2013. Sancus: Low-cost trustworthy extensible networked devices with a zero-software trusted computing base. In 22nd USENIX Security Symposium. USENIX Association, 479–494.

[54] Job Noorman, Jan Tobias Mühlberg, and Frank Piessens. 2017. Authentic execution of distributed event-driven applications with a small TCB. In STM ’17 (LNCS), Vol. 10547. Springer, Heidelberg, 55–71.

[55] Job Noorman, Jo Van Bulck, Jan Tobias Mühlberg, Frank Piessens, Pieter Maene, Bart Preneel, Ingrid Verbauwhede, Johannes Götzfried, Tilo Müller, and Felix Freiling. 2017. Sancus 2.0: A low-cost security architecture for IoT devices. ACM Transactions on Privacy and Security (TOPS) 20, 3 (September 2017), 7:1–7:33.

[56] Guevara Noubir and Amirali Sanatinia. 2016. Trusted code execution on untrusted platform using Intel SGX. Virus Bulletin (2016).

[57] Open Whisper Systems. 2017. Technology preview: Private contact discovery for Signal. https://signal.org/blog/private-contact-discovery/.

[58] Dag Arne Osvik, Adi Shamir, and Eran Tromer. 2006. Cache attacks and countermeasures: The case of AES. In Cryptographers’ Track at the RSA Conference. Springer, 1–20.

[59] Marco Patrignani, Pieter Agten, Raoul Strackx, Bart Jacobs, Dave Clarke, and Frank Piessens. 2015. Secure compilation to protected module architectures. ACM Transactions on Programming Languages and Systems (TOPLAS) 37, 2 (2015).

[60] Peter Puschner, Raimund Kirner, Benedikt Huber, and Daniel Prokesch. 2012. Compiling for time predictability. In International Conference on Computer Safety, Reliability, and Security. Springer, 382–391.

[61] Felix Schuster, Manuel Costa, Cédric Fournet, Christos Gkantsidis, Marcus Peinado, Gloria Mainar-Ruiz, and Mark Russinovich. 2015. VC3: Trustworthy data analytics in the cloud using SGX. In 2015 IEEE Symposium on Security and Privacy. IEEE, 38–54.

[62] Michael Schwarz, Samuel Weiser, Daniel Gruss, Clémentine Maurice, and Stefan Mangard. 2017. Malware guard extension: Using SGX to conceal cache attacks. In Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA) (DIMVA).

[63] Ming-Wei Shih, Sangho Lee, Taesoo Kim, and Marcus Peinado. 2017. T-SGX: Eradicating controlled-channel attacks against enclave programs. In Proceedings of the 2017 Annual Network and Distributed System Security Symposium (NDSS). San Diego, CA.

[64] Shweta Shinde, Zheng Leong Chua, Viswesh Narayanan, and Prateek Saxena. 2016. Preventing page faults from telling your secrets. In Proceedings of the 11th ACM on Asia Conference on Computer and Communications Security (ASIA CCS ’16). ACM, 317–328.

[65] Shweta Shinde, Shruti Tople, Deepak Kathayat, and Prateek Saxena. 2015. Podarch: Protecting legacy applications with a purely hardware TCB. Technical Report. National University of Singapore.

[66] Raoul Strackx, Job Noorman, Ingrid Verbauwhede, Bart Preneel, and Frank Piessens. 2013. Protected software module architectures. In ISSE 2013 Securing Electronic Business Processes. Springer, 241–251.

[67] Raoul Strackx and Frank Piessens. 2017. The Heisenberg defense: Proactively defending SGX enclaves against page-table-based side-channel attacks. https://arxiv.org/abs/1712.08519. arXiv preprint arXiv:1712.08519 (Dec. 2017).

[68] Raoul Strackx, Frank Piessens, and Bart Preneel. 2010. Efficient isolation of trusted subsystems in embedded systems. In Security and Privacy in Communication Networks. Springer, 344–361.

[69] Texas Instruments. 2006. MSP430x1xx Family: User’s Guide. http://www.ti.com/lit/ug/slau049f/slau049f.pdf.

[70] Florian Tramer, Fan Zhang, Huang Lin, Jean-Pierre Hubaux, Ari Juels, and Elaine Shi. 2017. Sealed-glass proofs: Using transparent enclaves to prove and sell knowledge. In 2nd IEEE European Symposium on Security and Privacy (Euro S&P). IEEE.

[71] Jo Van Bulck, Marina Minkin, Ofir Weisse, Daniel Genkin, Baris Kasikci, Frank Piessens, Mark Silberstein, Thomas F. Wenisch, Yuval Yarom, and Raoul Strackx. 2018. Foreshadow: Extracting the keys to the Intel SGX kingdom with transient out-of-order execution. In Proceedings of the 27th USENIX Security Symposium. USENIX Association.

[72] Jo Van Bulck, Jan Tobias Mühlberg, and Frank Piessens. 2017. VulCAN: Efficient component authentication and software isolation for automotive control networks. In Proceedings of the 33rd Annual Computer Security Applications Conference (ACSAC’17). ACM.

[73] Jo Van Bulck, Job Noorman, Jan Tobias Mühlberg, and Frank Piessens. 2016. Towards availability and real-time guarantees for protected module architectures. In MODULARITY Companion Proceedings ’16. ACM, New York, 146–151.

[74] Jo Van Bulck, Frank Piessens, and Raoul Strackx. 2017. SGX-Step: A practical attack framework for precise enclave execution control. In Proceedings of the 2nd Workshop on System Software for Trusted Execution (SysTEX’17). ACM, 4:1–4:6.

[75] Jo Van Bulck, Nico Weichbrodt, Rüdiger Kapitza, Frank Piessens, and Raoul Strackx. 2017. Telling your secrets without page faults: Stealthy page table-based attacks on enclaved execution. In Proceedings of the 26th USENIX Security Symposium. USENIX Association.

[76] Marcus Völp, Jérémie Decouchant, Christoph Lambert, Maria Fernandes, and Paulo Esteves-Verissimo. 2017. Enclave-based privacy-preserving alignment of raw genomic information: Information leakage and countermeasures. In Proceedings of the 2nd Workshop on System Software for Trusted Execution (SysTEX’17). ACM, Article 7, 6 pages.

[77] Wenhao Wang, Guoxing Chen, Xiaorui Pan, Yinqian Zhang, XiaoFeng Wang, Vincent Bindschaedler, Haixu Tang, and Carl A Gunter. 2017. Leaky cauldron on the dark land: Understanding memory side-channel hazards in SGX. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2421–2434.

[78] Ofir Weisse, Jo Van Bulck, Marina Minkin, Daniel Genkin, Baris Kasikci, Frank Piessens, Mark Silberstein, Raoul Strackx, Thomas F. Wenisch, and Yuval Yarom. 2018. Foreshadow-NG: Breaking the virtual memory abstraction with transient out-of-order execution. Technical Report (2018).

[79] Yuanzhong Xu, Weidong Cui, and Marcus Peinado. 2015. Controlled-channel attacks: Deterministic side channels for untrusted operating systems. In 2015 IEEE Symposium on Security and Privacy. IEEE, 640–656.

[80] Yuval Yarom and Katrina Falkner. 2014. Flush+Reload: A high resolution, low noise, L3 cache side-channel attack. In 23rd USENIX Security Symposium. USENIX Association, 719–732.

### Appendix A: MSP430 Instruction Cycles

This appendix provides the full instruction timings for the MSP430 architecture, as published by Texas Instruments [69]. All jump instructions require two clock cycles to execute, regardless of whether the jump is taken or not. The number of CPU cycles required for other instructions depends on the addressing modes of the source and destination operands, not the instruction type itself. Tables 1 and 2 provide detailed timings for different instructions and addressing modes.