### E. Cross-Browser Deployment of Extensions

In addition to verifying extensions, our approach enables the development of platform-independent extensions. Our toolkit includes a new code generator that can compile extension code into either JavaScript or .NET. This allows developers to write an extension once in Fine and deploy it across multiple browsers. Specifically, the extension can be deployed in Chrome and Firefox using JavaScript, in Internet Explorer via bindings from .NET to native code, and directly in .NET for C3.

Cross-browser deployment is further enhanced by JavaScript code generation, which allows our approach to integrate with existing extension security models. For instance, we demonstrate how to verify authorization properties for Chrome extensions by partially porting their content scripts (the interface between a Chrome extension and the DOM) from JavaScript to Fine. The core of the extension can remain in JavaScript, inter-operating with the code generated from Fine. While this hybrid approach offers ease of use and migration, the security guarantee is weaker, as unverified extension cores may violate information flow properties.

### IV. A Language for Fine-Grained Policies

This section introduces our policy language, a Datalog-based framework for specifying fine-grained data confidentiality and integrity policies for browser extensions. We also present our policy visualization tool and discuss how policies can be analyzed for robustness.

#### A. Language Design

**Distinguishing Data from Metadata:**
We view the structure of web content as security metadata, which can be used to restrict the privileges of extensions at a fine granularity. This dynamic, data-driven security labeling [35] allows the extension's behavior to depend on the metadata of a page. It is most convenient if the metadata itself is not considered security-sensitive.

**Determining Metadata:**
Deciding which elements of semi-structured web content constitute metadata involves weighing several factors. In this work, we consider elements' tag names and certain attributes (e.g., styles and identifiers) as security metadata that an extension can freely inspect but not modify. By default, the text, links, images, and other content on a web page are considered high confidentiality (secret) and immutable. Extension-specific policies must explicitly grant an extension privileges to access or modify non-metadata content. This balance provides a familiar programming model while protecting sensitive web content.

**Stability of Security Policy and Choice of Datalog:**
The design of our policy language is influenced by the execution model for extensions. JavaScript on the web page can interact with extensions via shared state in the DOM, and their execution can be interleaved arbitrarily. We require that security policies be stable, meaning a well-behaved extension deemed compliant with a policy will not become insecure due to actions of unanticipated JavaScript. To achieve this, we base our policy language on Datalog, which ensures stability through its restricted use of negation.

**Predicates in the Policy Language:**
Figure 5 shows a selection of the predicates we provide. These predicates reflect the structure of web content and are split into two parts: metadata and permission predicates. Most predicates are self-explanatory, but a few warrant further discussion. For example, `EltTextValue` and `EltAttr` appear in the metadata section, but both the text and attribute content of a web page are, by default, considered sensitive information. An extension must be granted explicit `CanReadValue` and `CanReadAttr` privileges to access these elements.

**Example Policy:**
Figure 6 shows part of the policy used with FacePalm. The first rule grants the extension the ability to read class attributes on all elements in the page. The second rule grants read access to the text content of immediate children of elements with the "label" class. The third rule grants the right to read a link stored in a specific sub-element tagged with "Website:".

#### B. Understanding Policies

Extensions are often designed for specific websites, and policies can be closely tied to the page structure. To assist users in understanding these policies, we provide a visualization tool. This tool interprets predicates as XML selectors and highlights elements in a web page for which an extension has read or write access. Figure 6 shows a screenshot of this tool applied to FacePalm’s policy, highlighting accessible elements on a Facebook profile.

While visualization is helpful, it is imprecise and should not replace manual inspection or formal analysis. Visualization only renders the impact of a policy on a particular web page and cannot provide complete coverage. Additionally, some policy elements, such as information-flow policies, are difficult to depict visually.

**Robustness of a Policy:**
To assist with understanding and vetting policies, we envisage building several useful tools. Using Datalog as the basis of our language allows for automatic analysis to detect undesirable patterns. For example, a policy should not grant an extension the privilege to modify a page in a way that allows it to grant itself access to protected resources. Detecting such situations is straightforward, and we leave the implementation of such an analysis to future work.

### V. The Semantics of Security Policies

This section formalizes a core language and execution model for browser extensions. The distinctive feature of this model is that the execution of extension code is interleaved arbitrarily with JavaScript on the web page. We use this model to provide a semantics for security policies and define a safety property for extensions—safe extensions never cause runtime security failures.

#### A. BX: A Core Calculus for Browser Extensions

The listing below shows the syntax of BX, a tiny lambda calculus used to model extensions and their interactions with the DOM. We also show a syntax () for a model of the policy language. Both BX and  are minimal core models, omitting many practical implementation details.

**Syntax of BX and Policies :**
- **Constants:** 
- **Values:** 
- **Expressions:** 
- **Operators:** F
- **Policy:** 
- **Predicates:** 

**Example:**
- **In Fine:**
  ```let extensionCode (e:elt) = if tagName e = "div" && getAttr e "class" = "website" then textContent (firstChild e) else ""```
- **In BX:**
  ```if (IJH-G (CAJ)JJH (, “tagName”), “div”) then if (IJH-G (CAJ)JJH (, “class”), “website”) then CAJ)JJH ((CAJ+DE@HA ), “textContent”) else ”” else ””```

#### B. Dynamic Semantics of BX

This section presents a dynamic semantics for BX programs governed by  policies. Our semantics is carefully designed to account for the possibility of interleavings between untrusted JavaScript and extension code.