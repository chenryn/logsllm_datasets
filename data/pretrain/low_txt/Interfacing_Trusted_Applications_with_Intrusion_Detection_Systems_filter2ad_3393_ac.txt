### Instrumentation and Third-Party Monitoring

In addition to direct application instrumentation, we have also instrumented several wrappers for third-party monitoring and interception. Examples include:

- **TCP Wrapper Replacement**: A TCP wrapper [25] replacement that makes access control decisions for services started by the `inetd` superserver. Services such as `finger` and `telnet` can be controlled using this wrapper.
- **Application-Level Proxies**: A suite of application-level proxies [13] similar to the TIS firewall toolkit [19].
- **Preloaded Library**: A preloaded library that intercepts `exec` system calls to invoke new programs.

These examples demonstrate that the IDS/A interface can be used not only for direct application instrumentation but also for third-party instrumentation and interception.

Additionally, we have provided applications that use idsad primarily as an extended logger rather than a reference monitor. For instance, a syslog shim maps syslog messages to IDS/A events and reports them to idsad.

Further applications are in various stages of development, with particular interest in those that cross internal protection domains (e.g., groupware). This could help counter internal threats, which are often the most damaging.

### Example Signatures

An example illustrates how IDS/A can be used to restrict the functionality of an application with a known vulnerability, a typical use case for a misuse detection system. Some versions of `ftpd` implement the `SITE` command insecurely. If updating `ftpd` is not immediately possible, the following idsad rule can be used to reject `SITE` commands instead of disabling `ftpd` entirely:

```plaintext
service ftpd & scheme ftp & uid ftp & cmd=string SITE:
deny; log file /var/log/idsa/ftpd-site-attempts
```

This rule applies to applications registered as `ftpd` using the `ftp` scheme and running under the Unix user ID `ftp`.

Access rules/signatures can also be specified at a higher level:

```plaintext
service ftpd & scheme ftp & uid ftp & irisk > 0.4
& (! ipsrc 192.168.1.1/24 | %time wday Sat, Sun):
deny; log file /var/log/idsa/ftpd-risky-deny
```

This rule denies risky FTP operations to users outside the local network or those connecting on weekends. If the `SITE` command has a risk rating (`irisk`) over 0.4, this rule disables the command under threatening circumstances.

The author of access rules can apply their own domain knowledge or leverage the application designer's knowledge without needing to understand the application internals.

Our system provides state variables to retain information across rules and events, enabling more complex reactions to intrusions. For example, a state variable can store the IP address of an attacker probing the FTP daemon. This information can then be used to block access to other services, such as using our TCP wrapper replacement to block `finger` or `telnet`, or having `mod idsa` block HTTP access. More sophisticated tests might involve machine learning systems to detect anomalous usage patterns. However, the above rules are sufficient to block intrusions without manual intervention and with minimal risk of subversion.

### Results

We have created signatures to transiently block bulk vulnerability scanners. For example, `mod idsa` can block CGI vulnerability scanners, while application-level proxies or TCP wrapper replacements can block banner-grabbing scanners. Although the block is transient, the response codes sent to the scanner indicate a permanent failure, discouraging further probing.

We have tested idsad on a server during normal operation, and it has blocked several real-world banner-grabbing scans and rogue web crawlers that did not honor `robots.txt` or accessed forbidden areas deliberately.

To further validate IDS/A as a reliable misuse detection system, more tests are being conducted, and additional rule bases are being constructed. The anomaly detection capabilities of idsad are still under development.

### Performance Impact

Estimating the performance cost of using our system to instrument an application is challenging, as it depends on how and where the application designer inserts IDS/A calls. We provide a brief overview of the performance impact for `mod idsa`, the Apache module. Tests were performed using the `httperf` tool with 1,000 GET requests for the same entity. Three tests were conducted:

1. **Local Directory Listing**: A request for a directory listing on a local host, which generates multiple IDS/A calls.
2. **Small File on Local Server**: A request for a small file on a local host.
3. **Small File on Remote Server**: A request for a small file on a remote server on the same Ethernet.

| Test Case | No mod idsa (s) | With mod idsa (s) | Cost (%) |
|-----------|-----------------|-------------------|----------|
| Local Dir Listing | 5.22 | 14.69 | 82.4% |
| Small File Local | 6.28 | 15.60 | 19.0% |
| Small File Remote | 5.86 | 16.51 | 2.3% |

For expensive operations like directory listings, the cost of contacting idsad is significant, with an overall slowdown of 82%. For realistic scenarios, such as requesting a short file from a remote server, the instrumentation cost drops to an acceptable 2.3%.

### Discussion

Our approach has limitations, as it requires modifying applications to provide reliable information, and some attacks might compromise a trusted application before it can report the attack. However, conventional intrusion detection systems are also fallible. Our approach can be seen as an additional layer of defense with different failure modes compared to conventional systems.

By making a generic reference monitor available to application programmers, it becomes possible to provide a unified system for securing applications. Our API makes it easier for developers to secure their applications without creating their own reference monitors. As applications become more complex and feature-rich, our API allows for selective disabling of functionality.

### Related Work

Our interface extends unidirectional application logging interfaces like Unix `syslog` or NT event logs. More complex logging subsystems include the X/OPEN Distributed Auditing Standard (XDAS) [23], which can be described as logging middleware. An example of an IDS using application-specific audit information is DEMIDS [6], a database misuse detection system.

Some system management architectures, such as SNMP [5] or the X/OPEN XEMS [24], provide bidirectional instrumentation of applications. However, these interfaces focus on tasks like starting and stopping services or exporting service definitions.

Interfaces with a primary focus on security information exchange include those designed by the IETF IDWG [7] or the communication channels of distributed intrusion detection systems like AAFID [3]. These interfaces couple different IDS components, whereas our interface couples an IDS to applications.

Recent examples of directly instrumented systems include the Embedded Sensor Project (ESP) [12], which modifies a kernel to log network misuse, and Kava [26], which enforces access control policies for mobile code.

The concept of consulting a third party for additional security decisions relates to N-version programming, where several instances perform the same computation. In our case, access control decisions are verified by a second, external reference monitor.

Systems like JANUS [9], Medusa DS9 [27], and LOMAC [8] also influence applications actively, typically by rewriting operating system calls. Our interface, however, attempts to do so directly.

### Conclusion

We have presented an external, non-specific, voluntary reference monitor accessible through a simple API. Requests are described to the reference monitor in two ways: as a domain-independent set of risk assessments and as a domain-specific description.

We believe that such a reference monitor can be used as an adjunct or alternative to conventional intercepting intrusion detection systems. Conventional IDSs are vulnerable to desynchronization attacks and have limited response and prevention capabilities. By encoding misuse signatures as negative access rights, our reference monitor can prevent attempted intrusions with a reasonable degree of safety and limited potential for desynchronization. The domain-independent risk ratings can guide anomaly detection systems.

While our approach requires the cooperation of application programmers and accurate application logging, its failure modes differ sufficiently from those of conventional IDSs to make it an interesting component of an in-depth defense.

### Source

The IDS/A homepage is http://jade.cs.uct.ac.za/idsa/, and parts of the implementation are available for download.

### References

[1] J. Abela, T. Debeaupuis, and E. Guttman. Universal format for logger messages. http://www.hsc.fr/gulp/, 1997.
[2] S. Axelsson. The base-rate fallacy and its implications for the difficulty of intrusion detection. In Proceedings of the 6th ACM Conference on Computer and Communications Security, pages 1–7, November 1999.
[3] J. Balasubramaniyan, J. O. Garcia-Fernandez, E. H. Spafford, and D. Zamboni. An architecture for intrusion detection using autonomous agents. Technical report, COAST Laboratory, June 1998.
[4] M. Bishop. A standard audit trail format. In National Information Systems Security Conference, pages 136–145, October 1995.
[5] J. Case, M. Fedor, M. Schoffstall, and J. Davin. A simple network management protocol. http://www.ietf.org/rfc/rfc1157.txt, 1990.
[6] C. Chung, M. Gertz, and K. Levitt. DEMIDS: A misuse detection system for database systems. In Third Annual IFIP TC-11 WG 11.5 Working Conference on Integrity and Control in Information Systems, 1999.
[7] M. Erlinger, S. Staniford-Chen, et al. IETF intrusion detection working group. http://www.ietf.org/html.charters/idwg-charter.html, 1999.
[8] T. Fraser. LOMAC: Low water-mark integrity protection for COTS environments. In Proceedings of the IEEE Symposium on Security and Privacy, pages 230–245, May 2000.
[9] I. Goldberg, D. Wagner, R. Thomas, and E. Brewer. A secure environment for untrusted helper applications. In Proceedings of the 6th USENIX Security Symposium, pages 1–13, July 1996.
[10] G. S. Goldszmidt. Distributed Management by Delegation. PhD thesis, Columbia University, 1996.
[11] K. Ilgun. USTAT: A real-time intrusion detection system for UNIX. Master’s thesis, University of California, July 1992.
[12] F. Kerschbaum, E. H. Spafford, and D. Zamboni. Using embedded sensors for detecting network attacks. In 1st ACM Workshop on Intrusion Detection Systems, November 2000.
[13] M. Kirkwood and I. Lynagh. Firewall kit. http://ferret.lmh.ox.ac.uk/~weejock/fk/, 2000.
[14] W. Lee, S. J. Stolfo, and K. Mok. Mining audit data to build intrusion detection models. In International Conference on Knowledge Discovery and Data Mining, September 1998.
[15] A. Mounji. Languages and Tools for Rule-Based Distributed Intrusion Detection. PhD thesis, Universite de Namur, September 1997.
[16] K. E. Price. Host-based misuse detection and conventional operating systems’ audit data collection. Master’s thesis, Purdue University, December 1997.
[17] T. H. Ptacek and T. N. Newsham. Insertion, evasion and denial of service: Eluding network intrusion detection. Technical report, Secure Networks, 1998.
[18] Rain Forest Puppy. Whisker. http://www.wiretrip.net/rfp/, 1999.
[19] M. K. Ranum and F. M. Avolio. A toolkit and methods for internet firewalls. In Proceedings of the USENIX Conference, pages 37–44, 1994.
[20] J. Riordan and D. Alessandri. Target naming and service apoptosis. In Proceedings of the 3rd Workshop on Recent Advances in Intrusion Detection, pages 217–225, October 2000.
[21] V. Samar and R. Schemers. Unified login with pluggable authentication modules (PAM), October 1995.
[22] D. Song. Fragrouter. http://www.anzen.com/research/nidsbench/, 1999.
[23] The Open Group. Distributed Audit Service (XDAS) Base. The Open Group, 1997.
[24] The Open Group. Systems Management: Event Management Service. The Open Group, 1997.
[25] W. Venema. TCP wrapper, network monitoring, access control and booby traps. In Proceedings of the 3rd USENIX Security Symposium, pages 85–92, September 1992.
[26] I. Welch and R. Stroud. Reflection as a mechanism for enforcing security policies in mobile code. In Proceedings of the 6th European Symposium on Research in Computer Security, October 2000.
[27] M. Zelem, M. Pikula, and M. Ockajak. Medusa DS9 security system. http://medusa.fornax.sk/, 1999.