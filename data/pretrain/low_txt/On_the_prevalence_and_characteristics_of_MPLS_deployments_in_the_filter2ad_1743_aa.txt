# Title: Prevalence and Characteristics of MPLS Deployments in the Open Internet

## Authors:
- Joel Sommers, Colgate University, PI:EMAIL
- Brian Eriksson, Boston University, PI:EMAIL
- Paul Barford, University of Wisconsin-Madison and Qualys, Inc., PI:EMAIL

---

### Abstract

Multi-Protocol Label Switching (MPLS) is a mechanism that enables service providers to specify virtual paths through IP networks. The use of MPLS in the open Internet (i.e., public end-to-end paths) has significant implications for users and network neutrality, as MPLS is frequently used in traffic engineering applications. In this paper, we present a longitudinal study of the prevalence and characteristics of MPLS deployments in the open Internet. We use path measurement data collected over the past 3.5 years by the CAIDA Archipelago project (Ark), which consists of over 10 billion individual traceroutes between hosts throughout the Internet. We employ two techniques for identifying MPLS paths in Ark data: direct observation via ICMP extensions that include MPLS label information, and inference using a Bayesian data fusion methodology. Our direct observation method can only identify uniform-mode tunnels, which likely underestimates MPLS deployments. Nonetheless, our results show that the total number of tunnels observed in a given measurement period has varied widely over time, with the largest deployments in tier-1 providers. Approximately 7% of all autonomous systems deploy MPLS, and this level of deployment has been consistent over the past three years. The average length of an MPLS tunnel has decreased from 4 hops in 2008 to 3 hops in 2011, and the path length distribution is heavily skewed. About 25% of all paths in 2011 cross at least one MPLS tunnel, while 4% cross more than one. Finally, data observed in MPLS headers suggest that many ASes employ some types of traffic classification and engineering in their tunnels.

### Categories and Subject Descriptors
- C.2.3 [Network Operations]: Network management, Network monitoring
- C.2.5 [Local and Wide-Area Networks]: Internet (e.g., TCP/IP)
- C.4 [Performance of Systems]: Measurement Techniques

### General Terms
- Algorithms, Design, Experimentation, Measurement, Performance

### Permission
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers, or to redistribute to lists, requires prior specific permission and/or a fee.

### Keywords
MPLS, traceroute, traffic engineering, tunnels

---

## 1. Introduction

In the late 1990s, the limitations and inflexibility in IP routing and forwarding, coupled with the ongoing quest to improve switching performance, led to the development of Multi-Protocol Label Switching (MPLS). MPLS was envisioned and designed as a simple mechanism that would operate between layers 2 and 3 in the standard Internet protocol stack, enabling efficient lookups at each hop on a designated path. Standardization efforts in the IETF began in 1997, resulting in a variety of drafts and RFCs that define and specify the protocol. Today, MPLS is a standard feature in routers and is available on a wide variety of platforms from many different vendors.

Along with improved switching speeds, MPLS was quickly recognized as a highly useful protocol for traffic engineering. MPLS allows the configuration of multi-hop tunnels that supersede shortest path routes for definable traffic aggregates, enabling service providers to operate their infrastructures in a manner that more directly addresses their business and operational requirements. Anecdotal reports suggest that MPLS is currently used by service providers in various ways, including facilitating traffic engineering, implementing multi-service networks (including virtual private networks), and improving robustness. Despite its appeal and broad use, there are no systematic empirical assessments of MPLS deployments in the Internet.

In this paper, we present a longitudinal analysis of MPLS deployments in the open Internet (i.e., paths that are not part of virtual private networks). The goal of our work is to establish a broad empirical baseline for MPLS, as tunnels have a direct impact on traffic behavior and measurement and have significant implications for network neutrality. We seek to answer questions such as: How many networks use MPLS? Has the use of MPLS grown over time? What are the characteristics of individual MPLS tunnels? How likely is it that my traffic will encounter an MPLS tunnel? To address these questions, we require measurements of a large set of Internet paths conducted over a period of years.

Studies of Internet-wide phenomena related to end-to-end, router-level path properties typically rely on active probe-based measurement tools such as traceroute. At first glance, MPLS appears to present an insurmountable challenge to standard TTL-limited active probing methods that rely on layer 3 messaging, as MPLS is not a layer 3 protocol. However, recent extensions to the ICMP protocol enable it to include the entire MPLS label stack, overcoming this challenge. Traceroute-style path measurements that include MPLS label stacks are the starting point for our work.

We use data collected by the Ark project, which, since 2008, includes MPLS label stacks wherever they are in use and visible on an end-to-end path. Network operators can configure MPLS tunnels in such a way as to hide them from traceroute. Thus, our work relies on tunnels configured in uniform (visible) mode, which we describe below. The Ark infrastructure and methodologies have been designed to efficiently measure all routable /24s in the Internet. Since its inception, Ark has conducted over 10 billion individual traceroute measurements, making it a compelling source of data for our longitudinal study.

Our analysis of MPLS labels in Ark path measurement data reveals a broad set of characteristics about the deployment and use of the protocol. Specifically, we find that the total number of tunnels observed in any measurement period has varied widely over time, from a low of about 200K in 2009 to a recent high of around 350K. Interestingly, the variability of tunnel deployments correlates closely with key economic indicators. Roughly 7% of all autonomous systems use MPLS on some subset of their paths, with the largest deployments in tier-1 providers. This level of deployment has been relatively stable over the past three years. We also find that the average length of an MPLS tunnel has decreased from 4 hops in 2008 to 3 hops in 2011. The tunnel length distribution is heavily skewed, with over 90% of tunnels at 7 hops or less, though some tunnels extend beyond 15 hops. Approximately 25% of all paths in 2011 cross at least one MPLS tunnel, while 4% cross more than one, and data observed in MPLS headers suggest that many ASes employ some kinds of traffic classification and engineering in their tunnels.

While label-based analysis provides a compelling characterization of MPLS path properties, it precludes analysis of other path measurement data archives (e.g., Skitter) that do not include labels. To address this problem, we develop an MPLS tunnel identification method based on round trip time measurements instead of labels. The observation is that, with some MPLS configurations, when a packet's TTL expires, the ICMP time exceeded message will be encapsulated in an MPLS header and forwarded to the end of the tunnel before being sent back to the source host. This observation forms the basis for a Bayesian inference method that we show to be effective for identifying MPLS tunnels. Applying this method to additional data sets to gain a broader view of MPLS deployments over time is a goal for future work.

The key findings of our work are as follows: First, the increasing trend in deployments over the past three years and the wide use by tier-1 providers mean that it is increasingly likely that packets will encounter an MPLS tunnel. Second, tunnels are likely to span the entire edge-to-edge distance of a transit provider, with typical transit times on the order of tens of milliseconds. Third, our examination of the use of traffic classifiers indicates that while multiple classes are not uncommon, the diversity of classes has not changed over the past three years.

The remainder of this paper is organized as follows: In Section 2, we provide an overview of MPLS, how MPLS interacts with traceroute, and our label-based method for identifying MPLS hops on an end-to-end path. In Section 3, we provide details on the Ark data set and report the details of our label-based MPLS deployment study. In Section 4, we describe our inference-based method for identifying MPLS paths and report our findings on applying this method to the Ark data. We summarize our work and describe next steps in our study in Section 6.

---

## 2. MPLS and Traceroute

MPLS is typically thought of as a protocol that exists between layers 2 and 3 of the Internet protocol stack. Fundamentally, it is a path-based encapsulation and forwarding protocol that adds a 32-bit header to packets as they enter an MPLS tunnel, or label-switched path (LSP). We use the terms tunnel and LSP interchangeably in this paper. The MPLS header consists of a 20-bit label, an 8-bit time-to-live (TTL) field, a 3-bit traffic class field, and a 1-bit end of label stack field.

Specific labels are applied to packets based on forwarding equivalence class (FEC), which is a generalization of longest-prefix match. As packets traverse an MPLS tunnel, forwarding decisions are made based on exact matching of the MPLS label. Labels are only locally significant between a pair of routers, so as packets traverse a tunnel, labels are swapped (overwritten) prior to forwarding. Hierarchies of tunnels can also be created (i.e., an already-tunneled packet can enter a new tunnel); stacks of MPLS headers can be used for this purpose.

MPLS tunnels must be configured (and labels distributed) on each label switch router (LSR) along a designated path (series of LSRs), and they supersede layer 3 routes. The flexibility to define paths through a network not simply based on shortest paths makes MPLS highly attractive for traffic engineering tasks. Details on MPLS can be found in [31] and several other IETF RFCs.

Our work relies on recent modifications to routers and traceroute programs that implement extensions to ICMP specified in RFC 4950. These extensions permit the inclusion of the entire MPLS label stack (i.e., all MPLS header information) in the ICMP message that is returned to a source host [12]. Thus, it is this information included in ICMP time exceeded messages that are generated as part of the traceroute process that allows us to positively identify a router as participating in an MPLS tunnel.

There are two basic ways in which the IP time-to-live (TTL) field is processed in the presence of an MPLS tunnel. These are referred to as uniform mode and pipe mode [9], and they determine whether an MPLS tunnel is visible to a public user of traceroute or not. Figure 1 illustrates these two modes of operation.

In pipe mode, the MPLS tunnel is not exposed to a traceroute user. At LSR B in Figure 1, the IP TTL is decremented by one and inspected upon router ingress. After that, the packet is encapsulated in an MPLS header and forwarded to the next LSR along the path. The MPLS header that is constructed at the first LSR is initialized with a prespecified TTL value, typically 255. Upon egress from a pipe mode tunnel, the MPLS header is removed, and the TTL value in the IP header is unchanged. Thus, the MPLS TTL field has no relationship to the IP TTL in a pipe-mode tunnel, and the IP TTL is only decremented by one regardless of the number of LSRs that switch the packet through the tunnel.

Note that, with the pipe model, the first router of an MPLS tunnel is visible, but the ICMP time exceeded response generated from the router (if the IP TTL is decremented to zero) does not indicate that the packet expired at the edge of a tunnel, since it has not actually entered one yet. Thus, there is no indication to a traceroute user that an MPLS tunnel is traversed, and only the ingress router is visible at all. (Note that penultimate hop-popping (PHP) does not affect this picture from the standpoint of traceroute [9]. We discuss PHP further in § 3.3.) The upshot is that identifying pipe mode tunnels with end-to-end measurements remains a significant measurement challenge and one that we do not address in this paper.

In uniform mode, the LSRs along an MPLS tunnel are visible to a traceroute user. At the first LSR (B in the figure), the IP TTL is decremented by one and inspected upon router ingress, just as in the pipe model. Upon encapsulation in an MPLS header, however, the IP TTL is copied into the MPLS header. At each LSR along the tunnel, the TTL in the MPLS header is decremented by one. Upon egress from a uniform mode tunnel, the MPLS TTL field is copied back to the IP header. If the TTL falls to zero at any router along the tunnel, an ICMP time exceeded message will be generated and sent back to the source of the original packet. Thus, all routers in the tunnel are visible to a user of traceroute. Importantly, only if the router implements MPLS extensions for ICMP [12] will a traceroute user be able to clearly identify the fact that the packet’s TTL expired while inside an MPLS tunnel.

Interestingly, uniform mode is the default mode of operation for Cisco and Juniper routers (among others) [4, 5]. This behavior is likely due to language in the MPLS architectural RFC (3031) that specifies that the total number of hops through a tunnel SHOULD be reflected in the IP TTL when the packet emerges from the tunnel. Also, it is important to note that pipe and uniform mode TTL processing can be configured on a per-LSP basis. Even nested tunnels can have different visibility characteristics (i.e., while the innermost tunnel may be visible via traceroute, a nested tunnel may not be). From a practical perspective, this means that network operators must explicitly configure routers not to propagate the IP TTL to the MPLS header, thus hiding tunnels from the public’s eye.

Another important impact that MPLS tunnels can have is on delay measurements of individual traceroute packets. When the TTL of a packet is decremented to zero inside an MPLS tunnel (in uniform mode, since that is the only way that an outsider can observe an MPLS tunnel), the ICMP time exceeded message may need to be re-encapsulated in an MPLS header and forwarded to the end of the tunnel [8]. If the LSR at which the ICMP packet is generated does not have sufficient information (e.g., routes imported via BGP), the packet will be re-encapsulated and traverse the entire length of the tunnel. At the end of the tunnel, the ICMP message can be routed back to the source host. The result is that the traceroute output will show roughly equivalent delay for the series of hops along the MPLS tunnel. In that case, we would measure the latency across the tunnel to be approximately zero. This observation is the starting point for our tunnel inference method described in Section 4.

While we focus on measurement of MPLS tunnels from outside a service provider’s network, internal network operators can use other mechanisms for measuring and troubleshooting MPLS LSPs. For example, RFC 4379 describes MPLS-based versions of ping and traceroute for this purpose [24].

---

## 3. Ark Data Analysis

In this section, we present our analysis of MPLS tunnels and their characteristics as observed in the CAIDA IPv4 Routed /24 AS Links Dataset [22]. Our focus in this section is on characteristics of MPLS tunnels that can be directly observed through ICMP extension information.

### 3.1 Data and Limitations

Since we do not have insight into the ways in which labels have been assigned or generally how MPLS has been configured in a given provider network, we use a pragmatic definition of tunnel in our data analysis. Our goal in the present work is not to try to identify how different MPLS tunnels have been configured, but rather to report and analyze their observed characteristics. Our working definition of a tunnel is based on the presence of MPLS label information in the ICMP time exceeded messages.