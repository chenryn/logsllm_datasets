### 5.2.1 Ensuring Sequential Call Verification

To ensure the sequential verification of calls without the risk of race conditions, we can check each call in the sequence after the application has made the call. This is based on the principle that if there cannot be a race condition that can deceive the application, then there cannot be one that will deceive the monitor. It is important to note that this is a very specific behavior pattern that applications do not typically follow. However, we can employ certain techniques to enforce good behavior patterns in applications.

### 5.2.2 Enforcing Good Behavior

There are several mechanisms we can use to "force" an application to conform to our definition of good behavior, i.e., to access the filesystem in a manner that we can easily verify as safe.

1. **Induce Safe Call Sequences:**
   - The monitored process can be forced to execute a safe sequence of calls using a process tracing mechanism. For example, if a monitored process makes the call `open("/tmp/foo", ...)`, we can force the operating system to make the appropriate safe sequence of system calls in the context of the traced process.

2. **Static or Dynamic Library Replacement:**
   - Using this approach, we replace problematic library calls with code that converts these calls to their easy-to-check counterparts. For instance, we could have a shared library replacement for `open` which, if called with `/tmp/foo`, would make the safe sequence of calls. When using this approach, we still rely only on Janus for the security of our system; the libraries are not trusted but merely serve to facilitate easy checking.

3. **Force Access Through a Proxy:**
   - Instead of allowing an application to access the filesystem directly, we can require it to go through a proxy process. This proxy accesses the filesystem on behalf of the application and uses safe operations, thereby preventing it from falling victim to filesystem races. Preliminary experiments with this approach, combined with shared library replacement, have shown promising results. This method also addresses the problem of argument races.

### 5.3 Denying System Calls Without Breaking Applications

Often, the reason for denying a system call is to prevent a process from modifying sensitive global state, such as a sensitive file, its own resource limits, or its user ID (UID). However, it is often possible to give the process its own local copy of this state without affecting its functionality. This approach, known as virtualization, allows us to isolate an untrusted application from sensitive resources while preserving normal system semantics, thus avoiding the risk of breaking the application. There are several ways to virtualize sensitive resources:

- **Emulate Normal Semantics:**
  - We can emulate the normal semantics of an unauthorized portion of the operating system interface using shared library replacement. For example, this technique can simulate the semantics of running as root for processes running without privilege, as used by tools like `fakeroot`.

- **Redirect Calls to Sensitive Resources:**
  - We can redirect calls to sensitive resources to a copy of those resources. This can be done by modifying the arguments to system calls, either directly through the tracing mechanism (as in MapBox) or indirectly through shared library replacement.

- **Replicate Resources:**
  - We can use the normal operating system facilities to replicate resources. For example, using `chroot`, we can give an untrusted application its own copy of the filesystem.

Whenever possible, it is preferable to virtualize the resources rather than deny access, as this provides the highest level of certainty that the sandboxed application remains functional.

### 5.4 Let the Kernel Do the Work

If the kernel performs a complex operation, it is better to call the kernel's code rather than replicating it. In Section 4.1, we discussed the problem of canonicalizing file names. Some operating systems provide a system call specifically for this purpose. Janus addresses this issue by having `mod janus` canonicalize path names at the same time they are fetched from the untrusted process upon system call entry. This approach is advantageous for several reasons:

- **Per-Process Namespace:**
  - Canonicalizing path names in the execution context of the monitored processes ensures that per-process differences in the filesystem namespace are taken into account.

- **Correct Canonicalization:**
  - By calling the kernelâ€™s canonicalization code, we can be sure that we are getting the correct canonicalization.

- **Simplified Policy Engine:**
  - Allowing the kernel to handle canonicalization simplifies our policy engine by several hundred lines of code.

### 5.5 Lessons for the Implementer

To summarize the lessons from our experience:

- **Avoid Replicating OS State and Functionality:**
  - Reuse OS functionality and query the OS directly for state whenever possible. Be wary of inconsistency.

- **Be Conservative in Design:**
  - Do not underestimate the complexity of the system call API and do not overestimate your understanding of its nuances.

- **Be Aware of Race Conditions:**
  - Consider all the state that a system call relies upon to perform its function. Think about what parts of the system can modify that state and what can happen between the time you make a policy decision and when the system call finishes.

- **Understand Multi-Threading Semantics:**
  - Be aware of the multi-threading semantics of your particular operating system.

- **Be Explicit:**
  - Document and justify the decisions you have made in your design and the assumptions that must hold for your implementation to be correct. These assumptions may be violated as the OS evolves or when your tool is ported to another platform.

- **Know All Paths to Resources:**
  - Be aware of all direct and indirect paths to resources. Know all the ways a process can modify the filesystem, network, and other sensitive system resources.

- **Filesystem Challenges:**
  - The filesystem is a large chunk of mutable shared state, fraught with both obvious and non-obvious race conditions. Dealing with the filesystem interface is the most difficult part of confining/monitoring an application.

- **Avoid Breaking Applications:**
  - Any time you change the behavior of your operating system, such as by aborting system calls, you risk breaking applications and potentially introducing new security holes. Avoid making changes that conflict with normally specified OS semantics or diverge from application designers' expectations.

### 6. Future Work

Several problems remain to be solved to demonstrate a system call interposition-based sandbox that can support the full range of potential applications securely. One notable omission is the question of how to support multi-threaded applications. A potential solution is to offer functionality in a kernel module to allow locking of per-thread metadata. Since this is per-process state and not globally shared state like filesystem metadata, it seems feasible that a user-level process could safely lock it. The performance implications of such a solution require further study.

An important trend from first-generation sandboxes (e.g., the Janus prototype, MapBox, Consh) to second-generation sandboxes (e.g., Janus and Systrace) has been to abandon a purely user-level approach to application sandboxing and instead embrace a hybrid solution where a dedicated kernel module/patch is used for tasks such as system call interposition, canonicalizing pathnames, and fetching system call arguments. Significant performance and security benefits have already been realized through the reliance on a small amount of additional kernel code (well under 2K lines of C for `mod janus` and a comparable number in the Systrace kernel patch).

Another important question is whether the system call boundary remains the best place to interpose on applications' access to sensitive resources. Under Linux, an alternative approach may soon be available in the form of the Linux Security Module (LSM), which provides low-level hooks for adding new access control mechanisms to the kernel. While LSM does not provide a complete solution, it offers a common foundation on which to build other mechanisms that could potentially yield a cleaner abstraction for controlling access to sensitive resources.

We have briefly touched on the relationship between this work and host-based intrusion detection. There are likely unique challenges in that application of interposition, and we hope to see comparable studies examining the interactions between policy, mechanism, and implementation in the context of a real interposition-based HIDS system.

### 7. Conclusion

We have presented a variety of problems and pitfalls that can occur in the design and implementation of system call interposition-based security tools. We have broadly categorized these problems under the headings of incorrectly replicating OS semantics, overlooking indirect paths to resources, race conditions, incorrectly subsetting a complex interface, and side effects of denying system calls. We have shown how these problems can allow sandboxes and related tools to be circumvented. We have considered various solutions to the identified problems and noted principles that can aid the implementer in avoiding common pitfalls. Finally, we have highlighted several areas that merit further study.

### 8. Acknowledgments

This work and the present implementation of Janus would not exist without the significant effort and guidance provided by David Wagner. The development of the first version of Janus by Ian Goldberg, David Wagner, and Marti Hearst was also crucial. Steve Gribble and Nikita Borisov provided invaluable feedback and encouragement. This work greatly benefited from feedback and discussions with Niels Provos, Constantine Sapuntzakis, Michael Constant, and Ben Pfaff. Ben Pfaff and Steven Bergsieker offered significant editorial help. Eric Brewer, David Culler, Mendel Rosenblum, and Dan Boneh provided the excellent research environment in which this work was conducted. This material is based upon work supported in part by the National Science Foundation under Grant No. 0121481 and in part by NSF CAREER CCR-0093337.

### References

[1] Subterfugue: strace meets expect.
http://subterfugue.org/.

[2] D. A., M. A., R. R., and S. D. Chakravyuha(cv): A sandbox operating system environment for controlled execution of alien code. Technical Report 20742, IBM T.J. Watson Research Center, Sept. 1997.

[3] A. Acharya and M. Raje. MAPbox: Using parameterized behavior classes to confine untrusted applications. In Proceedings of the Ninth USENIX Security Symposium, Aug. 2000.

[4] A. Alexandrov, M. Ibel, K. Schauser, and C. Scheiman. Extending the operating system at the user level: the ufo global file system. In Proc. of the USENIX Annual Technical Conference, January 1997.

[5] A. Alexandrov, P. Kmiec, and K. Schauser. Consh: A confined execution environment for internet computations, 1998.

[6] M. Bishop and M. Dilger. Checking for race conditions in file accesses. Computing Systems, 9(2):131â€“152, Spring 1996.

[7] S. Cesare. Linux anti-debugging techniques. http://www.big.net.au/~silvio/linux-anti-debugging.txt, January 1999.

[8] C. Cowan, S. Beattie, G. Kroach-Hartman, C. Pu, P. Wagle, and V. Gligor. Subdomain: Parsimonious server security. In Proceedings of the Systems Administration Conference, Dec. 2000.

[9] Entercept Security Technologies. System call interception whitepaper. http://www.entercept.com/whitepaper/systemcalls/.

[10] S. Forrest, S. A. Hofmeyr, A. Somayaji, and T. A. Longstaff. A sense of self for unix processes. In Proceedings of the 1996 IEEE Symposium on Research in Security and Privacy, pages 120â€“128. IEEE Computer Society Press, 1996.

[11] T. Fraser, L. Badger, and M. Feldman. Hardening COTS software with generic software wrappers. In Proceedings of the IEEE Symposium on Security and Privacy, 1999.

[12] T. Garfinkel and D. Wagner. Janus: A practical tool for application sandboxing. http://www.cs.berkeley.edu/~daw/janus.

[13] D. P. Ghormley, D. Petrou, S. H. Rodrigues, and T. E. Anderson. Slic: An extensibility system for commodity operating systems. pages 39â€“52, June 1998.

[14] I. Goldberg, D. Wagner, R. Thomas, and E. Brewer. A secure environment for untrusted helper applications, 1996.

[15] S. A. Hofmeyr, S. Forrest, and A. Somayaji. Intrusion detection using sequences of system calls. Journal of Computer Security, 6(3):151â€“180, 1998.

[16] K. Jain and R. Sekar. User-level infrastructure for system call interposition: A platform for intrusion detection and confinement. In Proc. Network and Distributed Systems Security Symposium, 2000.

[17] M. B. Jones. Interposition agents: Transparently interposing user code at the system interface. In Symposium on Operating Systems Principles, pages 80â€“93, 1993.

[18] Joost Witteveen. Fakeroot: A fake root environment. http://packages.debian.org/stable/utils/fakeroot.html.

[19] C. Ko, T. Fraser, L. Badger, and D. Kilpatrick. Detecting and countering system intrusions using software wrappers. In Proceedings of the 9th USENIX Security Symposium, August 2000.

[20] B. W. Lampson. A Note on the Confinement Problem. Communications of the ACM, 16(10):613â€“615, Oct. 1973.

[21] Y. Liao and V. R. Vemuri. Using text categorization techniques for intrusion detection. In Proc. 11th USENIX Security Symposium, August 2002.

[22] M. K. McKusick, K. Bostic, M. J. Karels, and J. S. Quarterman. The Design and Implementation of the 4.4 BSD Operating System. Addison-Wesley, 1996.

[23] V. Nakra. Architecture study: Janus - a practical tool for application sandboxing.

[24] N. Provos. Improving host security with system call policies. Technical Report 02-3, CITI, November 2002.

[25] Steve Bellovin. Shifting the Odds, Writing More Secure Software. http://www.research.att.com/~smb/talks/odds.ps.

[26] R. W. Stevens. Advanced Programming in the Unix Environment. Addison-Wesley, 1992.

[27] D. Wagner and D. Dean. Intrusion detection via static analysis. In Proc. IEEE Symposium on Security and Privacy, 2001.

[28] D. Wagner and P. Soto. Mimicry attacks on host-based intrusion detection systems. In Proc. Ninth ACM Conference on Computer and Communications Security, 2002.

[29] D. A. Wagner. Janus: An approach for confinement of untrusted applications. Technical Report CSD-99-1056, 12, 1999.

[30] A. Wespi, M. Dacier, and H. Debar. Intrusion detection using variable length audit trail patterns. In RAID 2000, pages 110â€“129, 2000.

[31] N. J. Williams. An implementation of scheduler activations on the NetBSD operating system. In USENIX Annual Technical Conference, 2002.

[32] C. Wright, C. Cowan, J. Morris, S. Smalley, and G. Kroah-Hartman. Linux security modules: General security support for the Linux kernel. In Linux Security Modules: General Security Support for the Linux Kernel, 2002.