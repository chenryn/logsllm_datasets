### 图5：AFL及其优化版本在1到120核上对Google Fuzzer测试套件及libjpeg进行模糊测试时每秒执行次数

- **原始版本**：
  - 300k
  - 200k
  - 100k
  - 0k
  - 250k
  - 200k
  - 150k
  - 100k
  - 50k
  - 0k

- **优化版本**：
  - (c) woff
    - 1
    - 15
    - 30
    - 45
    - 60
    - 75
    - 90
    - 105
    - 120
  - (f) c-ares
    - 1
    - 15
    - 30
    - 75
    - 60
    - 45
  - (i) libjpeg
    - 90
    - 105
    - 120
    - 1
    - 15
    - 30
    - 45
    - 60
  - #core
    - 75
    - 90
    - 105
    - 120

**说明**：对于openssl-1.0.2d，从90核开始，每个模糊测试实例超时，导致没有进一步的执行，因为性能瓶颈严重，无法生成有效的输入测试用例。

### 图6：LibFuzzer及其优化版本在1到120核上对Google Fuzzer测试套件进行模糊测试时每秒执行次数

- **原始版本**：
  - 1600k
  - 1200k
  - 800k
  - 400k
  - 0k
  - 150k
  - 1
  - 100k
  - 50k
  - 0k

- **优化版本**：
  - (b) libpng
    - 1
    - 15
    - 30
    - 45
    - 60
  - (e) libxml
    - 75
    - 90
    - 105
    - 120
  - (a) harfbuzz
    - stock
    - opt
    - 15
    - 30
    - 45
    - 60
  - (d) woff
    - 75
    - 90
    - 105
    - 120
  - (c) sqlite
    - 1
    - 15
    - 30
    - 60
    - 45
    - 75
  - (f) boringssl
    - 90
    - 105
    - 120
    - 1
    - 15
    - 30
    - 45
    - 60
  - #core
    - 75
    - 90
    - 105
    - 120

**说明**：我们测量了从1.1倍到735.7倍的改进。libpng和boringssl由于LibFuzzer的同步阶段效率低下而表现不佳，通过内存中的测试用例日志（见§3.3），我们分别将它们的可扩展性提高了145.8倍和735.7倍。其他库虽然不受不良测试用例的影响，但其可扩展性也通过共享内存中的测试用例日志和双文件系统服务得到了1.1至1.3倍的提升。

### 6.3 设计选择评估

我们通过评估一些基准来评估每个设计决策的有效性。选择libpng进行评估，因为在图5和图6中，它显示了相对于模糊器版本的最大改进。我们在tmpfs文件系统上评估了优化后的AFL的可扩展性行为，包括内存中的测试用例日志（见§3.3）和snapshot()系统调用实验（见§3.1）。随后，我们将展示物理介质对AFL的影响（见§3.2）。

#### 6.3.1 共享内存中的测试用例日志

我们在libpng库上运行了带有和不带有共享内存中的测试用例日志的原版AFL，并在图7中展示了实验结果。图7(a)显示了新的模糊测试执行次数，而图7(b)显示了在同步阶段花费的时间百分比。在排除同步阶段的重新执行后，内存中的共享日志使AFL在120核上的速度提高了约13倍。我们可以观察到，AFL在同步阶段花费的时间线性增加，在最坏的情况下，总模糊测试时间的90%用于同步。请注意，同步阶段并不直接贡献于目标程序的探索进度。通过我们的新机制，成功消除了性能瓶颈，同步阶段花费的时间百分比降至最多8.05%，这是完全可以接受的。

#### 6.3.2 快照

尽管内存队列将同步阶段的开销降低到8.1%，但我们观察到AFL的可扩展性在45核之后仍然饱和（见图7）。这种饱和的主要原因是fork()系统调用。图8(a)显示了用snapshot()系统调用替换fork()的影响，这将libpng模糊测试的可扩展性提高了12.6倍，现在模糊测试受到文件操作（如open()/close()）的限制。为了进一步验证snapshot()系统调用的必要性，我们创建了一个微基准来压力测试现有的进程创建API，如fork()和pthread_create()。该微基准首先为每个核心生成一个进程，然后使用上述API（包括snapshot()系统调用）单独创建进程或线程并立即终止。图8(b)展示了进程创建的结果以及libpng库的模糊测试执行次数，清楚地显示了fork()和pthread_create()在超过15核后无法扩展，并在45核后出现可扩展性崩溃。另一方面，snapshot()系统调用几乎随核心数量线性扩展，并且比两种进程生成API快3004.5倍。此外，snapshot()被认为是通用的模糊器系统调用。

希望这些修改能帮助您的文档更加清晰、连贯和专业。如果有任何进一步的需求，请告诉我！