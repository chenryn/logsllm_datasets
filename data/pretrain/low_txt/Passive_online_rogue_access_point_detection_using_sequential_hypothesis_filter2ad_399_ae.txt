### Optimized Text

#### Packet Translation and Forwarding
The device then translates the packet addresses and forwards them to the Internet through its Ethernet card.

#### Experiment Conducted on 10/26/2006
We conducted an experiment on October 26, 2006, which lasted approximately two minutes. During this period, we observed 163 ACK-pairs. Of these, 92% were from web traffic via port 80, while the remaining ACK-pairs originated from port 1935, used by Macromedia Flash Communication Server MX for the Real-Time Messaging Protocol (RTMP). The sequential hypothesis test with training made 37 online detections, all of which identified the host as a WLAN host. On average, one detection was made every four ACK-pairs. These results demonstrate that our test can effectively detect wireless networks behind NAT boxes.

#### NATs in the Computer Science Department
Two NAT boxes in the Computer Science Department provide a free local network to users. A host may connect to a NAT box using either Ethernet or WLAN. All traffic through a NAT box will have the IP address of the NAT box. We monitored the IP addresses of these two NAT boxes. Both offline detection (from October 18, 2006, to October 20, 2006) and online detection (from October 25, 2006, to October 27, 2006) indicated a mixture of WLAN and Ethernet connections. The ACK-pair ratios were higher than those of pure WLAN hosts but lower than those of pure Ethernet hosts, consistent with the setting where both WLAN and Ethernet connections are provided.

#### Detection of Connection-Type Switchings
Next, we explored a scenario where an end host switches between wired and wireless connections. Our goal was to examine whether our detection approach could accurately report these switchings. We used an IBM laptop equipped with both 100 Mbps Ethernet and 54 Mbps 802.11g WLAN connections. The laptop used a web crawler to download the first 200 web files from cnn.com (8.3 MB of data) using Ethernet, then switched to WLAN to download the first 200 web files from nytimes.com (6.5 MB of data). This process was repeated three times. We ran the sequential hypothesis test with training using \( T = 240 \mu s \), \( K = 106 \), and \( N = 100 \). Our algorithm made 284 detections, with 283 correct and one incorrect, resulting in a correct detection ratio of 99.65%. This demonstrates that our approach is effective in detecting connection-type switchings. Therefore, if a host switches between using Ethernet and WLAN provided by a rogue AP, our approach can effectively detect this rogue AP.

#### Detection under High CPU, Disk, or Network Utilization
We investigated whether the performance of our approach would be affected when an end host has very high CPU, disk, or network utilization. For this purpose, we stressed either the CPU, disk, or network connection of an end host while downloading the first 200 web files from cnn.com using a web crawler at the host. For each scenario, we conducted experiments for both Ethernet and WLAN connections and detected the connection type using the sequential hypothesis test with training. All experiments were conducted on an IBM laptop with both a 100 Mbps Ethernet and a 54 Mbps 802.11g WLAN connection card.

- **CPU Stress Test (100% Utilization):** For the Ethernet connection, we observed 1077 ACK-pairs and 53 detections. For the WLAN connection, we observed 921 ACK-pairs and 123 detections. All detections were correct.
- **Disk Stress Test (Virus Scanning):** For the Ethernet connection, we observed 1158 ACK-pairs and 57 detections. For the WLAN connection, we observed 872 ACK-pairs and 84 detections. All detections were correct.
- **Network Stress Test:**
  - **Downlink Stress:** For the Ethernet connection, we observed 848 ACK-pairs and 42 detections. For the WLAN connection, we observed 660 ACK-pairs and 72 detections.
  - **Uplink Stress:** For the Ethernet connection, we observed 438 ACK-pairs and 21 detections. For the WLAN connection, we observed 487 ACK-pairs and 46 detections.
  - All detections were correct. We noted that the number of ACK-pairs was significantly smaller when stressing the downlink or uplink compared to CPU or disk stress, due to cross-traffic generated by local downloading or uploading activities. Additionally, the number of ACK-pairs was less when stressing the uplink than the downlink, likely because uploading data packets may be inserted between ACKs, leading to fewer ACK-pairs.

In summary, these results indicate that our detection approach remains effective even when hosts have high CPU, hard disk, or network utilization.

### Discussion

#### Locating Rogue APs
Our approach to detecting rogue APs also helps in locating them. Consider a common scenario where a WLAN host is connected to a rogue AP, which is connected to an access router via one or multiple switches. The rogue AP can be located using the following steps:
1. A network manager detects the IP address of the WLAN host at the monitoring point.
2. The network manager locates the access router based on the host's IP address and the subnet addressing structure.
3. From the ARP table at the access router, the network manager determines the MAC address of the WLAN host.
4. The network manager uses the identified MAC address to obtain the corresponding switch port by querying the first downstream switch connected to the access router.
5. Finally, the network manager sequentially queries downstream switches (if any) to locate the switch port (and hence the physical location) of the rogue AP.

#### Rogues by Authorized Users
Our scheme can easily detect rogue APs installed by unauthorized hosts. However, we also consider the case where rogues are installed by authorized WLAN users. We discuss two types of local networks: purely wireless networks and mixed networks.

- **Purely Wireless Networks:** In such a network, a wireless host A may set up another wireless card as a rogue AP for an illegitimate host B. In this case, packets from B will have the IP address of A, which is an authorized WLAN address. Our scheme does not directly detect this type of rogue. However, since host B connects to the Internet through two wireless hops, its traffic characteristics differ from those of a single wireless hop or Ethernet, and can be detected through traffic analysis. An accurate detection scheme for this type of rogue is left as future work.
- **Mixed Networks:**
  - **Non-Overlapping IP Address Blocks:** If the IP address blocks for Ethernet and WLAN connections do not overlap, a host will have different IP addresses for its Ethernet and WLAN connections. If a host authorized to use both Ethernet and WLAN installs a rogue AP on its Ethernet connection, the associated rogue AP will be easily detected by our scheme. If the host uses its authorized WLAN connection to connect to the Internet and sets up another wireless card as a rogue AP for an illegitimate host, this illegitimate host can be detected through traffic analysis.
  - **Overlapping IP Address Blocks:** If the IP address blocks for Ethernet and WLAN connections overlap, a host may maintain the same IP address for both connections. Similar to the non-overlapping case, we can detect rogue APs that provide hosts with Internet connections using two wireless hops through traffic analysis. However, a host authorized to use WLAN may also set up a rogue AP on its Ethernet connection for itself, which cannot be detected by our scheme or traffic analysis. In this case, our scheme can be combined with RF-sensing schemes to monitor only hosts in the authorization list.

These discussions imply that, for tighter security, it is better to use separate IP blocks for Ethernet and WLAN connections.

#### Possible Attacks on Our Approach
Our approach is based on inter-ACK times and is effective for the common scenario where a rogue AP is installed by an innocent user. It is also robust against MAC-address spoofing attacks. However, a rogue AP may change the inter-ACK times to evade detection. For instance, it may reduce the inter-ACK times by buffering ACKs and releasing them in batches to disguise the traffic as Ethernet traffic. Such a camouflage will inevitably increase local RTTs. Therefore, combining inter-ACK time and local RTT measurements can help detect such camouflages. An effective scheme for this is left as future work.

### Conclusions
In this paper, we proposed two online algorithms to detect rogue access points based on real-time passive measurements collected at a gateway router. Both algorithms exploit the fundamental properties of the 802.11 CSMA/CA MAC protocol and the half-duplex nature of wireless channels to differentiate between Ethernet and WLAN TCP traffic. Central to both algorithms are sequential hypothesis tests that determine a hostâ€™s connection type in real time by extending our earlier TCP ACK-pair techniques. One algorithm requires training sets, while the other does not. Extensive experiments in various scenarios and over hosts with various operating systems have demonstrated the excellent performance of our approach. The algorithm that requires training provides rapid and highly accurate detection, while the algorithm that does not require training detects 60%-76% of wireless hosts without false positives. Both algorithms require computation and storage well within the capability of commodity equipment. Furthermore, our scheme can detect connection switchings and wireless networks behind a NAT box. Lastly, our scheme remains effective for hosts with high CPU, hard disk, or network utilizations.

### Acknowledgements
This research was supported in part by the National Science Foundation under NSF grants ANI-0325868, ANI-0240487, ANI-0085848, CNS-0519998, CNS-0519922, CNS-0524323, and EIA-0080119. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the funding agencies. We would like to thank the anonymous reviewers for their insightful comments, and our shepherd, Dr. Dina Papagiannaki, for her valuable suggestions on the final version of the paper. We also thank Prof. Richard S. Ellis (UMass, Amherst), Prof. Guanling Chen (UMass, Lowell), and Dr. Sharad Jaiswal (Bell Labs, India) for helpful discussions. Finally, we wish to thank Rick Tuthill from the Office of Information Technology at UMass Amherst for helping us understand the UMass network architecture and in the installation and management of the monitoring equipment.

### References
[1] AirDefense, Wireless LAN Security. http://airdefense.net.
[2] AirMagnet. http://www.airmagnet.com.
[3] AirWave, AirWave Management Platform. http://airwave.com.
[4] Cisco Wireless LAN Solution Engine (WLSE). http://www.cisco.com/en/US/products/sw/cscowork/ps3915/.
[5] Host AP. http://hostap.epitest.fi.
[6] http://www.endace.com.
[7] Microsoft Windows 2000 TCP/IP implementation details, http://www.microsoft.com/technet/itsolutions/network/deploy/depovg/tcpip2k.mspx.
[8] NetStumbler. http://www.netstumbler.com.
[9] Rogue Access Point Detection: Automatically Detect and Manage Wireless Threats to Your Network. http://www.proxim.com.
[10] A. Adya, V. Bahl, R. Chandra, and L. Qiu. Architecture and techniques for diagnosing faults in IEEE 802.11 infrastructure networks. In Proc. ACM MOBICOM, September 2004.
[11] P. Bahl, R. Chandra, J. Padhye, L. Ravindranath, M. Singh, A. Wolman, and B. Zill. Enhancing the security of corporate Wi-Fi networks using DAIR. In Proc. ACM MOBISYS, 2006.
[12] V. Baiamonte, K. Papagiannaki, and G. Iannaccone. Detecting 802.11 wireless hosts from remote passive observations. In Proc. IFIP/TC6 Networking, Atlanta, GA, May 2007.
[13] R. Beyah, S. Kangude, G. Yu, B. Strickland, and J. Copeland. Rogue access point detection using temporal traffic characteristics. In Proc. IEEE GLOBECOM, December 2004.
[14] G. Casella and R. L. Berger. Statistical Inference. Duxbury Thomson Learning, 2002.
[15] L. Cheng and I. Marsic. Fuzzy reasoning for wireless awareness. International Journal of Wireless Information Networks, 8(1), 2001.
[16] S. Garg, M. Kappes, and A. S. Krishnakumar. On the effect of contention-window sizes in IEEE 802.11b networks. Technical Report ALR-2002-024, Avaya Labs Research, 2002.
[17] IEEE 802.11, 802.11a, 802.11b standards for wireless local area networks. http://standards.ieee.org/getieee802/802.11.html.
[18] J. Jung, V. Paxson, A. W. Berger, and H. Balakrishnan. Fast portscan detection using sequential hypothesis testing. In Proc. IEEE Symposium on Security and Privacy, May 2004.
[19] C. Mano, A. Blaich, Q. Liao, Y. Jiang, D. Salyers, D. Cieslak, and A. Striegel. RIPPS: Rogue identifying packet payload slicer detecting unauthorized wireless hosts through network traffic conditioning. ACM Transactions on Information Systems and Security, to appear.
[20] Packet trace analysis. http://ipmon.sprintlabs.com/packstat/packetoverview.php.
[21] P. Sarolahti and A. Kuznetsov. Congestion control in Linux TCP. In Proc. USENIX02, June 2002.
[22] A. N. Shiryaev. Probability. Springer, 2nd edition.
[23] K. Thompson, G. Miller, and R. Wilder. Wide-area Internet traffic patterns and characteristics. IEEE Network, 11(6):10â€“23, Nov./Dec. 1997.
[24] A. Wald. Sequential Analysis. J. Wiley & Sons, 1947.
[25] W. Wei, S. Jaiswal, J. Kurose, and D. Towsley. Identifying 802.11 traffic from passive measurements using iterative Bayesian inference. In Proc. IEEE INFOCOM, 2006.
[26] W. Wei, B. Wang, C. Zhang, J. Kurose, and D. Towsley. Classification of access network types: Ethernet, wireless LAN, ADSL, cable modem, or dialup? In Proc. IEEE INFOCOM, March 2005.
[27] H. Yin, G. Chen, and J. Wang. Detecting Protected Layer-3 Rogue APs. In Proceedings of the Fourth IEEE International Conference on Broadband Communications, Networks, and Systems (BROADNETS), Raleigh, NC, September 2007.

### Appendix

#### Proof of Theorem 1
In the Ethernet setting, we ignore the transmission time of an ACK since it is negligible. For convenience, we introduce a time unit of 30 Âµs. Measurement studies show that the average packet size on the Internet is between 300 and 400 bytes [23, 20]. For ease of calculation, we assume that all cross-traffic packets are 375 bytes. The transmission time of a cross-traffic packet on a 100 Mbps link is 1 time unit.

Recall that \(\Delta A\) denotes the inter-ACK time of ACKs A1 and A3. We discretize \(\Delta A\) using the time unit and denote the discretized value as \(I_A\), that is, \(I_A = \lfloor \Delta A / 30 \rfloor\). Let \(\Delta D\) denote the inter-departure time of packets P1 and P3 at queue \(Q_D\) (i.e., the queue at the router in the direction of data packets). Similarly, we discretize \(\Delta D\) and denote the discretized value as \(I_D\), that is, \(I_D = \lfloor \Delta D / 30 \rfloor\). We next state three lemmas that are used to prove Theorem 1.