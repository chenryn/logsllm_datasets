### DAML+OIL
- **Extension of RDFS**: DAML+OIL extends the Resource Description Framework Schema (RDFS) to enable machine understanding and automated reasoning.

### OWL (Web Ontology Language)
- **Enhanced Machine Interpretability**: OWL provides greater machine interpretability of web content compared to XML, RDF, and RDF Schema (RDF-S) by offering additional vocabulary and formal semantics.
- **Sublanguages**:
  - **OWL Lite**: Supports a classification hierarchy and simple constraints.
  - **OWL DL**: Provides maximum expressiveness while maintaining computational completeness (all conclusions are guaranteed to be computed) and decidability (all computations will finish in finite time).
  - **OWL Full**: Offers maximum expressiveness and the syntactic freedom of RDF but without computational guarantees.

### Stack of W3C Recommendations
- **XML**: A syntax for structured documents with no semantic constraints on the meaning of these documents.
- **XML Schema**: A language for defining the structure of XML documents.
- **RDF (Resource Description Framework)**: A data model for objects and their relationships, providing a simple semantics for this data model. It is represented in an XML syntax.
- **RDF Schema (RDFS)**: A vocabulary for describing properties and classes of RDF resources.
- **OWL**: Adds more vocabulary for describing properties and classes, including relations between classes (e.g., disjointness), cardinality (e.g., "exactly one"), equality, characteristics of properties (e.g., symmetry), and enumerated classes.

### OWL Example
- **Example Statement**: "A full SVG figure must have one chart type."
- **Chart Types**: "A chart type is a Bar, or a Pie, or a Radar, or a..."

### Ontology Editors
- **Tools**:
  - **Protégé 2000**: Supports OWL.
  - **OILed**: Supports DAML+OIL.
  - **WebOnto**: An ontology browsing and editing tool.
  - **GKB-Editor (Generic Knowledge Base Editor)**.
  - **Chimaera**: Supports DAML+OIL.

### METEOR-S Project @ LSDIS Lab
- **Focus Areas**: Semantic Web services and process composition.
- **Process Composition**:
  - **Functional Perspective**: Web service discovery and handling semantic heterogeneity.
  - **Operational Perspective**: QoS specification for web services and processes.
- **Technologies Exploited**: Workflow, Semantic Web, Web Services, and Simulation technologies.
- **Applications**:
  - **Annotation, Discovery, Composition, and QoS**: Adding semantics to different layers of the web services conceptual stack.
  - **Use of Ontologies**: For information sharing and semantic interoperability.

### METEOR-S Components for Semantic Web Services
- **Discovery Infrastructure (MWSDI)**:
  - **Semantic Annotation and Discovery of Web Services**.
  - **Semantic Peer-to-Peer network of Web Services Registries**.
- **Composer**:
  - **SCET (Service Composition and Execution Tool)**.
  - **Semantics Process Template Builder and Process Generator**.
  - **QoS Management**: Specify, compute, monitor, and control QoS (SWR algorithm).
- **Orchestrator (Under development)**:
  - **Analysis and Simulation**.
  - **Execution and Monitoring**.

### METEOR-S Web Service Annotation Framework (MWSAF)
- **Purpose**: Annotates web services with semantics.
- **Functionality**:
  - **Mapping**: Maps web service input/output data and functional descriptions using relevant data and function/operation ontologies.
  - **Annotating WSDL**: Uses ontologies to annotate WSDL.
  - **Matching**: Matches concepts from WSDL schema to ontological concepts, addressing issues like different names for the same entity and same names for different entities.
- **Architecture**:
  - **User-provided WSDL File**: Processes through parsers and matchers to generate annotated WSDL files.
  - **Matching Algorithms**: Element level match, schema level match, and context match.

### METEOR-S Web Service Discovery Infrastructure (MWSDI)
- **Uses Functional, Data, and QoS Semantics**:
  - **Service Discovery**: Finds and selects services based on functional, data, and QoS requirements.
  - **Dynamic Binding**: Chooses new services at runtime, enabling dynamic selection of the best supplier.

### Web Process Life-Cycle
- **Design**:
  - **Create Process WSDL and Template**.
  - **Add Activities and Annotate Requirements**.
  - **Find Matches and Add Control Flow**.
  - **Rank and Select Services**.
- **Composition and Execution**:
  - **Add to Process and Generate Process**.
  - **Data Transformation and Syntax Validation**.
  - **Execute**.

### Ongoing Projects
- **SWSI (Semantic Web Services Initiative)**:
  - **SWSA (Semantic Web Services Architecture)**.
  - **SWSL (Semantic Web Services Language)**.
- **WonderWeb**: Develops techniques and methodologies for building and using ontologies.
- **OWL-S**: A set of ontologies to describe functionalities of web services.
  - **OWL-S Matchmaker**: Matches service requestors with providers.
  - **Web Service Composer**: Semi-automatic process for dynamic composition of web services.

### Conclusions
- **Semantic Web Service Annotation and Discovery**:
  - **Data, Functional, and QoS Semantics**.
  - **Web Processes vs. Semantic Web Processes**.
  - **Web Process Composition**.
  - **Web Services Semantic Degree of Integration**.
  - **QoS Models, Techniques, and Algorithms**.
- **Challenges and Propositions**:
  - **Static Discovery and Design-time Binding**.
  - **Proposition**: Semantics as an enabler to address scalability, heterogeneity, and machine understandability.
  - **Dimensions of Semantics**: Data, Functional, Execution, and Quality (QoS).

### References
- **Related Work**: IBM, Karlsruhe, U. Manchester, OWL-S (CMU, Stanford, UMD).
- **Resources**: [Link to Resources](http://lsdis.cs.uga.edu/lib/presentations/SWSP-tutorial-resource.htm)
- **Key Papers**:
  - **Kreger**: [Link to Paper](http://www-3.ibm.com/software/solutions/webservices/pdf/WSCA.pdf)
  - **Sivashanmugam et al.-1**: Adding Semantics to Web Services Standards.
  - **Sivashanmugam et al.-2**: Framework for Semantic Web Process Composition.
  - **Verma et al.**: MWSDI: A Scalable Infrastructure of Registries for Semantic Publication and Discovery of Web Services.
  - **Chandrasekaran et al.**: Performance Analysis and Simulation of Composite Web Services.
  - **Cardoso et al.**: Modeling Quality of Service for Workflows and Web Service Processes.
  - **Silver et al.**: Modeling and Simulation of Quality of Service for Composition of Web Services.
  - **Paolucci et al.**: Importing Semantic Web in UDDI.
  - **UDDI-v3**: [Link to Specification](http://uddi.org/pubs/uddi-v3.00-published-20020719.htm)
  - **DAML and BPEL**: [Links to DAML and BPEL](http://www.daml.org/services/), [IBM DeveloperWorks](http://www-106.ibm.com/developerworks/webservices/library/ws-bpel/)

### End of Presentation
- **Questions?**

For more information, visit: [METEOR-S Project Page](http://lsdis.cs.uga.edu/proj/meteor/SWP.htm)