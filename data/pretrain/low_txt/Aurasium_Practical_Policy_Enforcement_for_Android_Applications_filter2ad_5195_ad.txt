### 4.3 Red Pill
Currently, Aurasium is not designed to be stealthy. Obvious traces, such as changes in the application signature, the presence of the Aurasium native library, and specific Java classes, allow applications to easily detect whether they are running under Aurasium. A malicious application can refuse to run under Aurasium, thereby forcing the user to use a potentially more dangerous, unmodified version. Legitimate applications may also verify their integrity (via the application signature) to prevent malicious repackaging by malware writers. Although Aurasium has control over the application's execution, it is possible to clean up these traces, for example, by spoofing signature access to the `PackageManager`. However, this is fundamentally an arms race, and a determined adversary will likely find ways to overcome such measures.

### 5 Related Work
With the growing popularity of Android and the increasing threat of malware, numerous approaches to securing Android have been proposed. Many traditional security methods used on desktops have been adapted for mobile platforms, particularly Android. The most common approach is signature-based malware detection, which is still in its early stages for mobile platforms. This method is ineffective against zero-day attacks and is unlikely to be more successful in the mobile context. Program analysis and behavioral analysis have proven more effective in the Android environment.

#### Static Analysis
Static analysis of Android application package files is generally more straightforward than static analysis of malware on desktops. Obfuscation techniques, commonly used in today's malware, are primarily aimed at hindering static analysis. Without effective deobfuscation methods, static analysis of native binaries will always face significant limitations. Due to the prevalence of malware on x86 Windows machines, little effort has been focused on reverse engineering ARM binaries. In contrast, static analysis of Java code is more feasible through decompilation of Dalvik bytecode. Tools like DED [20] and dex2jar [5] aim to translate Dalvik bytecode into Java bytecode.

#### Dynamic Analysis
Despite its limitations, dynamic analysis remains the preferred approach among researchers and antivirus companies for profiling malware and extracting distinctive features. The lack of automated methods to explore the entire state space is often a limiting factor. Techniques such as multipath exploration [31] can be useful, but the ability of mobile malware to load arbitrary libraries may reduce their effectiveness. The Honeynet Project offers a virtual machine for profiling Android applications, similar to profiling desktop malware [36]. Stowaway [23] is a tool that detects over-privilege in compiled Android applications by building a permission map using testing on the Android API and static analysis to determine which calls an application invokes.

#### Monitoring
Much of the research related to securing Android has focused on extending and enforcing security policies, starting with [21]. TaintDroid [19] taints private data to detect leaks, modifying both Binder and the Dalvik VM, but extends only partially to native code. Quire [17] uses provenance to track permissions across application boundaries through the IPC call chain to prevent privilege escalation. Crepe [15] allows access to system services requested at install-time only in certain contexts at runtime. Similarly, Apex [33] uses user-defined runtime constraints to regulate applications' access to system services. AppFence [27] blocks application access to data from imperious applications that demand unnecessary information and covertly substitutes shadow data. Airmid [32] uses cooperation between in-network sensors and smart devices to identify the provenance of malicious traffic.

#### Virtualization
Recent approaches to Android security have focused on bringing virtualization technology to Android devices. Running multiple versions of the Android OS on the same physical device allows for strong separation and isolation but comes at a higher performance cost. L4Android [30] is an open-source project derived from the L4Linux project, combining L4Linux and Google modifications of the Linux kernel to enable running Android on top of a microkernel. To address performance issues, Cells [11] is a lightweight virtualization architecture where multiple phones run on the same device. It is possible to run multiple versions of Android on a bare-metal hypervisor, ensuring strong isolation where shared security-critical device drivers run in individual virtual machines, as demonstrated by [26]. Logical domain separation, where two single domains are considered and isolation is enforced as a dataflow property without running each domain as a separate virtual machine, can also be employed [35].

### 6 Conclusion and Future Work
We have presented Aurasium, a robust and effective technology that protects users of the widely used Android OS from malicious and untrusted applications. Unlike many other security solutions, Aurasium does not require rooting or device reflashing.

Aurasium allows full control over the execution of an application, enabling the enforcement of arbitrary policies at runtime. Using the Aurasium Security Manager (ASM), we can apply policies not only at the individual application level but also across multiple applications simultaneously. This allows us to effectively orchestrate the execution of various applications on the device and mediate their access to critical resources and user’s private data. It also enables the detection of attempts by multiple applications to collaborate and implement malicious logic. With its low overhead and high repackaging success rate, Aurasium can implement effective isolation and separation at the application layer without the need for complex virtualization technology.

Although Aurasium currently treats applications as black boxes and focuses on their external behavior, the idea of enforcing policies at the per-application level by repackaging applications to attach side-by-side monitoring code is powerful. By carefully instrumenting the application’s Dalvik VM instance on the fly, it is even possible to apply more advanced dynamic analysis, such as information flow and taint analysis. We leave this as a direction for future work. We also plan to expand our investigation of potential threat models against Aurasium and provide practical ways to mitigate them, especially in the case of executing untrusted native code.

### 7 Acknowledgments
This material is based on work supported by the Army Research Office under Cyber-TA Grant No. W911NF-06-1-0316 and by the National Science Foundation Grant No. CNS-0716612.

### References
[1] Android apktool: A tool for reengineering Android apk files. <https://code.google.com/p/android-apktool/>

[2] Android.OS/Fakeplayer. <https://www.f-secure.com/v-descs/trojan_androidos_fakeplayer_a.shtml>

[3] Android.OS/NickiSpy. <https://www.maikmorgenstern.de/wordpress/?tag=androidnickispy>

[4] Bothunter community threat intelligence feed. <http://www.bothunter.net>

[5] dex2jar: A tool for converting Android’s .dex format to Java’s .class format. <https://code.google.com/p/dex2jar/>

[6] OpenBinder. <https://www.angryredplanet.com/~hackbod/openbinder/docs/html/>

[7] smali: An assembler/disassembler for Android’s dex format. <https://code.google.com/p/smali/>

[8] UI/Application exerciser Monkey. <https://developer.android.com/guide/developing/tools/monkey.html>

[9] In U.S. market, new smartphone buyers increasingly embracing Android. <https://blog.nielsen.com/nielsenwire/online_mobile/>

[10] ANDROID OPEN SOURCE PROJECT. Platform versions. <https://developer.android.com/resources/dashboard/platform-versions.html>

[11] ANDRUS, J., DALL, C., HOF, A. V., LAADAN, O., AND NIEH, J. Cells: a virtual mobile smartphone architecture. In Proceedings of the Twenty-Third ACM Symposium on Operating Systems Principles (New York, NY, USA, 2011), SOSP '11, ACM, pp. 173–187.

[12] BLÄSING, T., SCHMIDT, A.-D., BATYUK, L., CAMTEPE, S. A., AND ALBAYRAK, S. An Android application sandbox system for suspicious software detection. In 5th International Conference on Malicious and Unwanted Software (MALWARE’2010) (Nancy, France, France, 2010).

[13] BURGUERA, I., ZURUTUZA, U., AND NADJM-TEHRANI, S. Crowdroid: behavior-based malware detection system for Android. In Proceedings of the 1st ACM Workshop on Security and Privacy in Smartphones and Mobile devices (New York, NY, USA, 2011), SPSM '11, ACM, pp. 15–26.

[14] CHIN, E., FELT, A. P., GREENWOOD, K., AND WAGNER, D. Analyzing inter-application communication in Android. In Proceedings of the 9th International Conference on Mobile Systems, Applications, and Services (New York, NY, USA, 2011), MobiSys '11, ACM, pp. 239–252.

[15] CONTI, M., NGUYEN, V. T. N., AND CRISPO, B. Crepe: context-related policy enforcement for Android. In Proceedings of the 13th International Conference on Information Security (Berlin, Heidelberg, 2011), ISC'10, Springer-Verlag, pp. 331–345.

[16] DEGUSTA, M. Android orphans: Visualizing a sad history of support. <https://theunderstatement.com/post/11982112928/android-orphans-visualizing-a-sad-history-of-support>

[17] DIETZ, M., SHEKHAR, S., PISETSKY, Y., SHU, A., AND WALLACH, D. S. Quire: lightweight provenance for smart phone operating systems. In Proceedings of the 20th USENIX Conference on Security (Berkeley, CA, USA, 2011), SEC'11, USENIX Association, pp. 23–23.

[18] ENCK, W. Defending users against smartphone apps: Techniques and future directions. In Proceedings of the 7th International Conference on Information Systems Security (Kolkata, India, Dec 2011), ICISS.

[19] ENCK, W., GILBERT, P., CHUN, B.-G., COX, L. P., JUNG, J., MCDANIEL, P., AND SHETH, A. N. TaintDroid: an information-flow tracking system for real-time privacy monitoring on smartphones. In Proceedings of the 9th USENIX Conference on Operating Systems Design and Implementation (Berkeley, CA, USA, 2010), OSDI'10, USENIX Association, pp. 1–6.

[20] ENCK, W., OCTEAU, D., MCDANIEL, P., AND CHAUDHURI, S. A study of Android application security. In Proceedings of the 20th USENIX conference on Security (Berkeley, CA, USA, 2011), SEC'11, USENIX Association, pp. 21–21.

[21] ENCK, W., ONGTANG, M., AND MCDANIEL, P. On lightweight mobile phone application certification. In Proceedings of the 16th ACM Conference on Computer and Communications Security (New York, NY, USA, 2009), CCS '09, ACM, pp. 235–245.

[22] ENCK, W., ONGTANG, M., AND MCDANIEL, P. Understanding Android security. IEEE Security and Privacy 7 (January 2009), 50–57.

[23] FELT, A. P., CHIN, E., HANNA, S., SONG, D., AND WAGNER, D. Android permissions demystified. In Proceedings of the 18th ACM Conference on Computer and Communications Security (New York, NY, USA, 2011), CCS '11, ACM, pp. 627–638.

[24] FELT, A. P., FINIFTER, M., CHIN, E., HANNA, S., AND WAGNER, D. A survey of mobile malware in the wild. In Proceedings of the 1st ACM Workshop on Security and Privacy in Smartphones and Mobile Devices (Oct. 2011), SPSM '11, ACM, pp. 3–14.

[25] GARFINKEL, T., PFAFF, B., AND ROSENBLUM, M. Ostia: A delegating architecture for secure system call interposition. In Proceedings of the Network and Distributed Systems Security Symposium (February 2004).

[26] GUDETH, K., PIRRETTI, M., HOEPER, K., AND BUSKEY, R. Delivering secure applications on commercial mobile devices: the case for bare metal hypervisors. In Proceedings of the 1st ACM Workshop on Security and Privacy in Smartphones and Mobile devices (New York, NY, USA, 2011), SPSM '11, ACM, pp. 33–38.

[27] HORNYACK, P., HAN, S., JUNG, J., SCHECHTER, S., AND WETHERALL, D. These aren’t the droids you’re looking for: retrofitting Android to protect data from imperious applications. In Proceedings of the 18th ACM Conference on Computer and Communications Security (New York, NY, USA, 2011), CCS '11, ACM, pp. 639–652.

[38] WATSON, R. N. M. Exploiting concurrency vulnerabilities in system call wrappers. In Proceedings of the first USENIX Workshop On Offensive Technologies (Berkeley, CA, USA, 2007), USENIX Association, pp. 2:1–2:8.

[39] YAJIN, Z., AND XUXIAN, J. Dissecting android malware: characterization and evolution. In Proceedings of the 33rd IEEE Symposium on Security and Privacy (May 2012).

[40] YEE, B., SEHR, D., DARDYK, G., CHEN, J. B., MUTH, R., ORMANDY, T., OKASAKA, S., NARULA, N., AND FULLAGAR, N. Native Client: a sandbox for portable, untrusted x86 native code. Commun. ACM 53 (January 2010), 91–99.

[41] YOU, I., AND YIM, K. Malware obfuscation techniques: A brief survey. In Proceedings of the 2010 International Conference on Broadband, Wireless Computing, Communication and Applications (Washington, DC, USA, 2010), BWCCA '10, IEEE Computer Society, pp. 297–300.

[28] KIRIANSKY, V., BRUENING, D., AND AMARASINGHE, S. P. Secure execution via program shepherding. In Proceedings of the 11th USENIX Security Symposium (Berkeley, CA, USA, 2002), USENIX Association, pp. 191–206.

[29] McAfee threats report: Second quarter 2011. <https://www.mcafee.com/us/resources/reports/rp-quarterly-threat-q2-2011.pdf>, Aug 2011.

[30] LANGE, M., LIEBERGELD, S., LACKORZYNSKI, A., WARG, A., AND PETER, M. L4Android: a generic operating system framework for secure smartphones. In Proceedings of the 1st ACM Workshop on Security and Privacy in Smartphones and Mobile devices (New York, NY, USA, 2011), SPSM '11, ACM, pp. 39–50.

[31] MOSER, A., KRUEGEL, C., AND KIRDA, E. Exploring multiple execution paths for malware analysis. In Proceedings of the 2007 IEEE Symposium on Security and Privacy (Washington, DC, USA, 2007), SP '07, IEEE Computer Society, pp. 231–245.

[32] NADJI, Y., GIFFIN, J., AND TRAYNOR, P. Automated remote repair for mobile malware. In Proceedings of the 2011 Annual Computer Security Applications Conference (Washington, DC, USA, 2011), ACSAC '10, ACM.

[33] NAUMAN, M., KHAN, S., AND ZHANG, X. Apex: extending Android permission model and enforcement with user-defined runtime constraints. In Proceedings of the 5th ACM Symposium on Information, Computer and Communications Security (New York, NY, USA, 2010), ASIACCS '10, ACM, pp. 328–332.

[34] SCOTT, K., KUMAR, N., VELUSAMY, S., CHILDERS, B., DAVIDSON, J. W., AND SOFFA, M. L. Retargetable and reconfigurable software dynamic translation. In Proceedings of the international symposium on Code Generation and Optimization: feedback-directed and runtime optimization (Washington, DC, USA, 2003), CGO '03, IEEE Computer Society, pp. 36–47.

[35] SVEN, B., LUCAS, D., ALEXANDRA, D., STEPHAN, H., AHMAD-REZA, S., AND BHARGAVA, S. Practical and lightweight domain isolation on Android. In Proceedings of the 1st ACM Workshop on Security and Privacy in Smartphones and Mobile devices (New York, NY, USA, 2011), SPSM '11, ACM, pp. 51–62.

[36] THE HONEYNET PROJECT. Android reverse engineering virtual machine. <https://www.honeynet.org/node/783>

[37] VIDAS, T., VOTIPKA, D., AND CHRISTIN, N. All your droid are belong to us: a survey of current Android attacks. In Proceedings of the 1st ACM Workshop on Security and Privacy in Smartphones and Mobile devices (New York, NY, USA, 2011), SPSM '11, ACM, pp. 3–14.