# Trust Negotiation in TLS: The TNT Protocol

## Module Overview
- **IBM Trust Establishment Module**
  - (a) Remote Certificates / Policies
  - (b) Remote Certificates / Local Policies
  - (c) Local Certificates / Remote Policies
  - (d) Unlocked Local Certificates / Policies
  - (e) Authorization Decision

- **Certificates, Policies, and Services**

**Figure 5.** The implementation architecture for a trust negotiation prototype supporting the TNT protocol, an extension to the TLS handshake protocol. The implementation extends PureTLS, a freely available Java implementation of TLS. The architecture includes XML role-based access control policies and a compliance checker from the IBM Trust Establishment system.

### Policy Message Syntax
The syntax for the TNT Policy message is as follows:
``` 
Struct {Policy policy;}  
opaque Policy
```
The syntax and semantics of the Policy message are not specified in the TNT protocol and are dependent on the specific implementation. Section 5 discusses the policy representation in our implementation of TNT.

## Implementation
There are two approaches to supporting confidential trust negotiation using TLS:
1. Build an application-level protocol above TLS.
2. Integrate trust negotiation into TLS client/server authentication.

The TNT protocol is an example of the latter approach. In our research, we are exploring both approaches through the design and development of TrustBuilder, a middleware consisting of reusable trust negotiation components.

### Advantages of Integration
Integrating trust negotiation into TLS allows leveraging capabilities already available in a TLS implementation, such as verifying certificate contents and proving certificate ownership. An application-level protocol would require a custom solution with similar capabilities.

### Prototype Implementation
We have implemented a research prototype supporting the TNT protocol described earlier. The implementation architecture is illustrated in Figure 5. Our implementation extends PureTLS, a free Java-only implementation of SSL V3.0 and TLS V1.0 protocols, developed by Eric Rescorla and distributed by RFTM at http://www.rtfm.com/puretls/.

In our implementation, the client and server each rely on a TrustBuilder component to manage certificates, policies, and services. TrustBuilder implements the negotiation strategy and handles all decision-making aspects of a negotiation. Once the client and server receive remote certificates and policies during a negotiation, they submit them to TrustBuilder for evaluation. TrustBuilder determines which local certificates and policies to disclose and when to disclose them.

### IBM Trust Establishment System
In our research, we utilize the IBM Trust Establishment (TE) system [6] to create X.509v3 certificates and XML role-based access control policies that govern access to sensitive services and certificates. Additionally, the TE runtime provides a compliance checker that TrustBuilder uses to verify whether a set of certificates satisfies an access control policy.

During trust negotiation, the TLS client and server each rely on the compliance checker to verify:
1. Whether the remote certificates received during the negotiation satisfy the local policies governing access to local services or certificates.
2. Whether local certificates satisfy remote policies received during the negotiation.

### Compliance Checker Usage
The typical usage model for a compliance checker in trust management systems is to input a set of certificates and a policy to a Boolean decision function. Our trust negotiation prototype requires an extended usage model whenever policies are disclosed during trust negotiation. For example, when a TLS client receives a policy from the TLS server, the client can search for local certificates that satisfy the server’s policy and submit those certificates to the server. This allows the negotiation to focus on only those certificates that can advance the negotiation to a successful conclusion.

However, this requires that the compliance checker accept a set of local certificates and a remote policy and return not only a Boolean result indicating whether the policy is satisfied but also the set of certificates that satisfy the policy so that they can be disclosed to the other party. The TE system developers provided an API to their compliance checker that supports this extended usage model, prompted by our requirements for trust negotiation.

### Flexible Architecture
In our implementation, the TrustBuilder trust negotiation manager and compliance checker run in a separate process, providing a flexible architecture for TLS clients and servers. For instance, multiple TLS servers operating in a high-performance web server environment can share the compliance checker, permitting all private key operations to be encapsulated within a separate process that can be isolated on a secure server with a cryptographic coprocessor.

### Experience and Compatibility
Our experience demonstrates that the protocol extensions to TLS outlined in this paper can be readily incorporated into existing TLS implementations while still providing backward compatibility with existing TLS implementations. The TNT implementation provides a trust negotiation protocol supporting interoperable trust negotiation strategies. A research prototype implementation of TNT is available from BYU’s Security Research Lab (http://isrl.cs.byu.edu/).

### IETF Internet Draft
A recent IETF Internet draft from the TLS Working Group [2] discusses work in progress to define extensible hello messages in the TLS handshake protocol. Extensibility will allow a TLS client and server to negotiate additional features. One example taken from the draft document illustrating the use of extensions is to allow TLS clients to indicate to TLS servers which CA root keys they possess in the hello message. This example overcomes a limitation in TLS authentication where a TLS client cannot inform a TLS server regarding the CAs they trust. The negotiation strategy family field added to the hello messages in TNT is another example of an item that could be included in an extensible hello message.

### Client Puzzles
Dean et al. [3] describe an extension to TLS that uses client puzzles to prevent denial of service attacks on TLS servers. An imbalance in the computational requirements of TLS places an undue burden on the server. An attacker can exploit this to launch a successful denial of service attack. The use of client puzzles places additional computational demands on the client, balancing the load enough to discourage and prevent successful denial of service attacks. This paper introduces trust negotiation into TLS, potentially increasing the requirements on TLS servers. Adopting the use of client puzzles into our work has the potential to prevent denial of service attacks against TNT.

## Related Work
Yu et al. [15] introduce the notion of a family of trust negotiation strategies guaranteed to interoperate. They also introduce the idea of a trust negotiation protocol supporting a variety of negotiation strategies. Our work represents the design and implementation of these ideas in TNT, an extension of the TLS handshake protocol. Previous trust negotiation prototypes [13, 11] focused on languages for trust negotiation and negotiation strategies. The trust negotiation protocols were implemented at the application layer. Our work extends these earlier efforts by providing confidential trust negotiation and the verification of private keys associated with certificates disclosed during a trust negotiation. The TNT protocol is designed to support negotiation strategy interoperability.

Persiano et al. [7] introduce the SPSL protocol to extend TLS so that a portion of a disclosed certificate remains private from the party to which the certificate was disclosed. This is desirable when an attribute certificate contains some sensitive attributes that need not be disclosed to establish trust. Our work on trust negotiation focuses on establishing trust in another party to disclose a certificate to them. The two approaches complement one another and could be combined to authenticate another party prior to certificate disclosure.

## Conclusions and Future Work
This paper presents TNT, an extension to the TLS handshake protocol supporting advanced client/server authentication in TLS. TNT incorporates recent advances in trust negotiation from TrustBuilder [15] into TLS client/server authentication. This integration overcomes the existing limitations in TLS client/server authentication for establishing trust between strangers.

By integrating trust negotiation into TLS, the strengths of the TLS protocol are leveraged to provide confidential trust negotiation and the verification of private keys associated with certificates disclosed during a trust negotiation. TNT exploits the rehandshake facility of TLS to enable a TLS server to "pull" certificates from the client as needed, according to the access control policies of a sensitive resource accessed by a TLS client.

An implementation of TNT has been built that extends PureTLS, a Java TLS package that is freely available. This implementation is the first to provide confidential trust negotiation, the verification of private keys during trust negotiation, and a trust negotiation protocol designed to support interoperable trust negotiation strategies [15].

In the future, we will explore alternative trust negotiation strategies to ensure that the current protocol is sufficiently general to support all useful negotiation strategy families. Policy languages for trust negotiation are an active area of research, and requirements for a trust negotiation policy language are emerging. We believe it unlikely that a single policy language will be universally adopted. We intend to examine current policy languages in terms of ease of use, expressiveness, and efficiency for use during trust negotiation. This exploration will help identify any needed extensions to TNT to support policy language interoperability, including additional negotiation parameters in TLS handshake hello messages, such as certificate format and policy language.

Trust negotiation places greater computational demands on TLS servers, requiring further study of performance optimizations and scalable security architectures for TNT. Our research to date has not addressed performance. The current TNT prototype consists of non-optimized Java code.

At times, a client may want to authenticate a server prior to sending a sensitive service request, known as client-initiated trust establishment [1]. To illustrate when this might occur, suppose a client refuses to send personal information gathered by the service until the server discloses a TRUSTe certificate declaring that the server handles private information appropriately, such as not disclosing it to a third party unless the client provides explicit authorization. Since TLS allows a client to initiate a rehandshake, the client could establish trust in the server before any sensitive application data is transmitted, using a similar approach to the server-initiated rehandshake approach adopted by TNT in this paper.

This paper considered trust negotiations involving sensitive certificates, requiring that trust negotiations be confidential. In the future, we will consider extending TLS to support the simplest negotiations not involving sensitive certificates. Simple negotiations could occur frequently in practice, for example, during client-initiated trust establishment when the client verifies that a TLS server satisfies a general, well-known security requirement that need not be kept confidential. These trust negotiations could be conducted during the initial TLS handshake, since they do not require confidentiality.

## Acknowledgements
This research was supported by DARPA through AFRL contract number F33615-01-C-0336 and the Space and Naval Warfare Systems Center San Diego grant number N66001-01-18908. The authors express thanks to Marianne Winslett for her helpful feedback and discussions on an earlier version of this paper and to Ryan Jarvis for his help preparing the final submission. They also thank the anonymous reviewers for their comments.