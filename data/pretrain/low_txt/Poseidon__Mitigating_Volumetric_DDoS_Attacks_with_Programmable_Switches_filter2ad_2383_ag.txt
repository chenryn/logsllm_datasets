### 参考文献优化

1. A. Sivaraman, A. Cheung, M. Budiu, C. Kim, M. Alizadeh, H. Balakrishnan, G. Varghese, N. McKeown, and S. Licking, “Packet transactions: High-level programming for line-rate switches,” in *Proceedings of the 2016 ACM SIGCOMM Conference*. ACM, 2016, pp. 15–28.

2. V. Sivaraman, S. Narayana, O. Rottenstreich, S. Muthukrishnan, and J. Rexford, “Heavy-hitter detection entirely in the data plane,” in *Proceedings of the Symposium on SDN Research*. ACM, 2017, pp. 164–176.

3. J. Sonchack, A. J. Aviv, E. Keller, and J. M. Smith, “Turboflow: Information-rich flow record generation on commodity switches,” in *Proceedings of the Thirteenth EuroSys Conference*. ACM, 2018, p. 11.

4. J. Sonchack, O. Michel, A. J. Aviv, E. Keller, and J. M. Smith, “Scaling hardware-accelerated network monitoring to concurrent and dynamic queries with* flow,” in *2018 USENIX Annual Technical Conference (USENIX ATC 18)*. USENIX Association, 2018.

5. T. Spring, “Mirai variant targets financial sector with IoT DDoS attacks,” *Threatpost*, 2018, [Online; accessed Jul. 29, 2019]. Available at: <https://threatpost.com/mirai-variant-targets-financial-sector-with-iot-ddos-attacks/131056/>

6. StressThem, “The next IP stresser,” 2019, [Online; accessed Aug. 19, 2019]. Available at: <https://www.stressthem.to/>

7. Y. Tokusashi, H. T. Dang, F. Pedone, R. Soulé, and N. Zilberman, “The case for in-network computing on demand,” in *Proceedings of the Fourteenth EuroSys Conference 2019*. ACM, 2019, p. 21.

8. TS3Booter, “ts3booter.net,” 2019, [Online; accessed Aug. 19, 2019]. Available at: <https://ts3booter.net/>

9. W. Turton, “An interview with Lizard Squad, the hackers who took down Xbox Live,” *Daily Dot*, 2017, [Online; accessed Jul. 15, 2019]. Available at: <https://www.dailydot.com/debug/lizard-squad-hackers/>

10. Colorado State University, “DARPA 2009 Intrusion Detection Dataset,” 2019, [Online; accessed Aug. 19, 2019]. Available at: <http://www.darpa2009.netsec.colostate.edu/>

11. X. Wang and M. K. Reiter, “Defending against denial-of-service attacks with puzzle auctions,” in *Security and Privacy, 2003. Proceedings. 2003 Symposium on*. IEEE, 2003, pp. 78–92.

12. S. Weagle, “The rise of IoT botnet threats and DDoS attacks,” *Corero Blog*, 2018, [Online; accessed Jul. 30, 2019]. Available at: <https://www.corero.com/blog/870-the-rise-of-iot-botnet-threats-and-ddos-attacks.html>

13. S. Woo, J. Sherry, S. Han, S. Moon, S. Ratnasamy, and S. Shenker, “Elastic scaling of stateful network functions,” in *15th USENIX Symposium on Networked Systems Design and Implementation (NSDI 18)*. USENIX Association, 2018.

14. Y. Xu and Y. Liu, “DDoS attack detection under SDN context,” in *INFOCOM 2016 - The 35th Annual IEEE International Conference on Computer Communications*. IEEE, 2016, pp. 1–9.

15. T. Yang, J. Jiang, P. Liu, Q. Huang, J. Gong, Y. Zhou, R. Miao, X. Li, and S. Uhlig, “Elastic sketch: Adaptive and fast network-wide measurements,” in *Proceedings of the 2018 Conference of the ACM Special Interest Group on Data Communication*. ACM, 2018, pp. 561–575.

16. N. Yaseen, J. Sonchack, and V. Liu, “Synchronized network snapshots,” in *Proceedings of the 2018 Conference of the ACM Special Interest Group on Data Communication*. ACM, 2018, pp. 402–416.

17. M. Yu, L. Jose, and R. Miao, “Software-defined traffic measurement with OpenSketch,” in *NSDI*, vol. 13, 2013, pp. 29–42.

18. T. Yu, S. K. Fayaz, M. P. Collins, V. Sekar, and S. Seshan, “PSI: Precise security instrumentation for enterprise networks,” in *NDSS*, 2017.

19. S. T. Zargar, J. Joshi, and D. Tipper, “A survey of defense mechanisms against distributed denial of service (DDoS) flooding attacks,” *IEEE Communications Surveys & Tutorials*, vol. 15, no. 4, pp. 2046–2069, 2013.

20. M. Zhang, G. Li, L. Xu, J. Bi, G. Gu, and J. Bai, “Control plane reflection attacks in SDNs: New attacks and countermeasures,” in *International Symposium on Research in Attacks, Intrusions, and Defenses*. Springer, 2018, pp. 161–183.

21. Y. Zhu, H. Eran, D. Firestone, C. Guo, M. Lipshteyn, Y. Liron, J. Padhye, S. Raindel, M. H. Yahia, and M. Zhang, “Congestion control for large-scale RDMA deployments,” in *ACM SIGCOMM Computer Communication Review*, vol. 45, no. 4. ACM, 2015, pp. 523–536.

### 附录 A. POSEIDON 语言中的防御示例

以下是几个使用 POSEIDON 语言编写的防御示例。

#### SlowLoris 攻击
在 SlowLoris 攻击中，僵尸网络与受害服务器之间建立 TCP 会话。会话建立后，僵尸程序不发送 ACK 包，从而使会话保持打开状态直到超时。空会话占用 CPU 和 RAM 资源，导致受害服务器无法处理新的请求。为了缓解这种攻击，操作员可以统计每个源 IP 发送的字节数和每个源 IP 建立的 TCP 会话数（第 1 行和第 2 行）。如果在前一个周期内，平均每个连接的字节数小于某个阈值 T，则对该源 IP 的会话建立速率进行限速（第 4 行、第 5 行和第 6 行）。否则，允许其数据包通过（第 7 行和第 8 行）。

```python
packet_byte = aggr(True, [ip.src], 5)
connection_number = count(pkt.tcp.flag == SYN, [ip.src], 5)
if packet_byte([pkt.ip.src]) / connection_number([pkt.ip.src]) < T:
    rlimit
else:
    pass
```

#### 大流量检测
为了检测某些源 IP 地址的大流量，我们可以首先每 5 秒统计每个流发送的字节数（第 1 行和第 2 行）。如果在前一个周期内，某一流发送的总字节数超过某个阈值，则对该流进行限速（第 4 行至第 6 行）。否则，允许其数据包通过（第 7 行和第 8 行）。

```python
packet_byte_counter = aggr(True, [ip.src, ip.dst, ip.protocol, tcp.sport, tcp.dport], 5)
if packet_byte_count([ip.src, ip.dst, ip.protocol, tcp.sport, tcp.dport]) >= T:
    rlimit
else:
    pass
```

### 附录 B. POSEIDON 策略的 P4 实现示例

这里我们提供了一个 POSEIDON 策略（SYN 洪水防御）的 P4 实现示例，如图 4 所示。P4 代码片段已简化以提高可读性。

```p4
/* Header declaration */
struct headers {
    ether_t ether;
    ipv4_t ipv4;
    tcp_t tcp;
}

// Definitions of ether_t, ipv4_t and tcp_t are omitted

/* Metadata declaration */
header_type syn_proxy_meta_t {
    fields { ... }
}
metadata syn_proxy_meta_t meta;

// We remove the specific fields of metadata

/* Parser declaration */
parser parse_ether {
    extract(ether);
    return select(latest.etherType) {
        ETHERTYPE_IPV4: parse_ipv4;
        default: ingress;
    }
}

parser parse_ipv4 {
    extract(ipv4);
    return select(latest.protocol) {
        IP_PROTOCOLS_TCP: parse_tcp;
        default: ingress;
    }
}

parser parse_tcp {
    extract(tcp);
    return ingress;
}

// Calculation of checksum is ignored

/* Monitor (counter) declaration */
register syn_count_cm_sketch_row1 {
    width: WIDTH;
    instance_count: COLUMN;
}

register syn_count_cm_sketch_row1_last_period {
    width: WIDTH;
    instance_count: COLUMN;
}

register ack_count_cm_sketch_row1 {
    width: WIDTH;
    instance_count: COLUMN;
}

register ack_count_cm_sketch_row1_last_period {
    width: WIDTH;
    instance_count: COLUMN;
}

// We omit the other rows of two count-min sketches

/* Match-Action Table declaration */
table syn_count_update_table {
    read {
        tcp.syn: exact;
    }
    actions {
        update_syn_count;
        _nop;
    }
}

action update_syn_count() {
    index_calculate(meta.syn_count_index, ipv4.srcAddr);
    syn_count_cm_sketch_add(meta.syn_count_index, 1);
}

// Definitions of other tables and actions are skipped

/* Control flow declaration */
control ingress {
    // Monitoring period
    apply(syn_count_update_table);
    apply(ack_count_update_table);
    apply(syn_count_read_table);
    apply(ack_count_read_table);

    // Packet processing period
    if (meta.ack_count_value == 0) {
        apply(drop_table);
    } else if (meta.syn_count_value == meta.ack_count_value) {
        apply(forward_table);
    } else {
        apply(syn_proxy_table);
    }
}

// We ignore some details in the ingress control
// and the definition of egress control
```

这样修改后的文本更加清晰、连贯和专业。