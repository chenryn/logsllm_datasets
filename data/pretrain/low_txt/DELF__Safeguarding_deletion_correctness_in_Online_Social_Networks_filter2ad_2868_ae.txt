### Type Matches and Heuristic Triggers

- **True Positive:** When the heuristic type matches the edge annotation and the heuristic triggers.
- **False Positive:** When the heuristic type does not match the edge annotation, but the heuristic triggers.
- **True Negative:** When the heuristic type does not match the edge annotation and it does not trigger.
- **False Negative:** When the heuristic type matches the edge annotation, but it does not trigger.

We define the aggregate deep (resp. shallow) heuristic to trigger if any deep (resp. shallow) heuristic triggers. The overall heuristic is considered to trigger if exactly one of the deep or shallow aggregate heuristics triggers. If both deep and shallow heuristics trigger on an edge type, the overall heuristic is considered not to trigger.

### Table 5: Summary of Results

DELF deep heuristics demonstrate a precision of 89.7% at 60.7% recall, accurately discovering the majority of deep types in our sample. DELF heuristics prioritize precision. In our experience, developers are likely to ignore all predictions when precision drops. One obstacle to further increasing deep heuristics recall without sacrificing precision is ambiguous edge types. For example, consider the photo object type from Figure 1. The `created_photo` edge type pinpoints all photos a user creates and is annotated as deep. If this photo object type is extended with an additional, optional edge type from a user to a photo to mark the user’s current profile photo, such an edge type should be annotated as deep. However, a shallow annotation does not result in inadvertent data retention. The original deep edge type triggers the deletion of all photos, including the current profile photo, when a user object is deleted. We observe that developers prefer to annotate ambiguous edge types as shallow to avoid inadvertent data deletion.

### Conclusion on DELF Static and Dynamic Verification Methods

DELF static and dynamic verification methods, when used as a safety net to validate developer annotations, provide significant privacy protection against mistakes leading to inadvertent data retention. While DELF cannot detect all instances of inadvertent retention, it detects most, making such mistakes significantly less common.

### Inadvertent Data Deletion

#### Impact on Avoiding Data Loss

We next cover DELF's impact in avoiding data loss in situations where mistakes lead to inadvertent deletions.

**Identified Issues:**
- **Avoided Exploitation:** We sampled all reports generated during one week of November 2019 by DELF privilege escalation checks while blocking suspicious writes of edge types annotated as deep (§4.3). Our sample contained 38 distinct edge types, which we forwarded to Facebook's security team for inspection. The team considered the 38 edge types potentially exploitable, modulo the DELF privilege escalation checks and the existence of public API methods to perform writes. To the best of our knowledge, inadvertent deletion never occurred despite the underlying insufficient authorization checks.
- **Incidents Requiring Logging or User Reports:** We inspected 21 incidents between February and December 2019 where inadvertent deletions occurred, detection required separate logging or user reports, and DELF restoration logs were used for recovery. For effective mitigation, inadvertent deletions must be detected before restoration logs expire, and the restoration process must be operationally simple.

**Notable Incident:**
- **Instagram Photo Deletion:** In October 2019, developers changed how photos were handled. An edge type initially used to associate a discussion thread with the photo object was annotated as deep—deleting the thread necessitated deleting the associated photo. Later, the same edge type was reused for photo sharing, allowing users who shared a photo in a new share thread to delete it by deleting the new share thread. This led to the deletion of approximately 17,000 photos, including multiple popular public photos with tens of millions of interactions. The issue was surfaced by user reports within 10 days. The recovery process involved one product engineer and the DELF oncall, and restorations ran for approximately 10 days.

**Other Incidents:**
- **Internal Maintenance Processes:** Many incidents did not require exploitation by a third party. Inadvertent deletions were triggered by internal maintenance processes or user actions, affecting only the user who performed the action. A representative example occurred in April 2019, where a Facebook developer triggered a cleanup data migration to delete invalid user devices. A bug in the object selection logic caused the deletion of approximately 100 million devices, adversely affecting users' ability to log in and service integrity protections. The recovery process spanned 12 hours and involved 2 engineers.

**Prevention:**
- **Restoration Logs:** Assuming timely detection, restoration logs reduce the issue of data loss to temporary data unavailability. To quantify DELF’s ability to detect data loss independently, we measured the effectiveness of shallow edge type annotation heuristics. DELF shallow heuristics demonstrated a precision of 93.0% at 89.5% recall, pinpointing the majority of mistakes leading to inadvertent deletion.
- **Data Loss Risks:** Shallow heuristics cannot flag cases where application logic requests the deletion of the wrong object. During our investigation period, significant data loss occurred in a single incident involving the deletion of the wrong video objects, which remained undetected for 2 years.

**Conclusion:**
- **Practical Data Loss Prevention:** DELF restoration logs offer practical data loss prevention capabilities for most scenarios where inadvertent deletions occur. While some data loss risk remains, usable restoration logs combined with a sufficiently long backup retention period provide a practical protection mechanism even when automated detection mechanisms fail.

### Execution

**Impact on Deletion Completion:**
- **Deletion Time Analysis:** Our analysis is based on observed deletion end-to-end wall time in a production workload. Our sample includes approximately 12 billion deletions that finished execution at Facebook on July 31, 2019, illustrated in Figure 6.
- **Identified Issues:**
  - **Transient and Persistent Errors:** We observed transient and persistent errors delaying deletions. DELF drives deletions to completion by retrying persistently and surfacing detected issues for engineers to fix.
  - **Longest-Running Deletion:** The longest-running deletion involved deleting a photo and performed 30,134 restoration log writes, suffering from three types of transient infrastructure failures.
  - **Persistent Errors:** A deletion affected by persistent errors involved deleting a user account and performed 1,770 restoration log writes, stuck for 45 days due to two issues requiring engineering intervention.

**Prevention:**
- **Distribution of Wall Time:** We observed three important points in the distribution of end-to-end wall time: P1 (35th percentile), P2 (86th percentile), and P3 (99.99999th percentile). P1 captures deletions of a single object, P2 indicates that a single run in the asynchronous tier completes the majority of deletions, and P3 illustrates that 99.99999% of deletions complete within 90 days.
- **Correlation with Deletion Size:** In the absence of infrastructure reliability and capacity issues, deletions would execute to completion without monitoring from DELF, and completion time would correlate strongly with deletion size. However, the correlation is weak for long-running deletions, indicating that reliability and capacity limitations are the root cause.

**Conclusion:**
- **Significant Contribution:** DELF contributes to completing a significant proportion of all deletions. Any deletions that require at least two runs in the asynchronous execution tier (approximately 14% of all deletions) benefit from DELF. Without DELF, up to 14% of all deletions triggered might not complete.

### Related Work

There is limited prior work on deletion correctness. Garg et al. [61] formalize deletion but do not suggest technical solutions. Uber’s deletion service [62] focuses on user account deletion reliability but lacks safeguards for correctness. Ritzdorf et al. [64] study deletion correctness in local file systems using data loss prevention techniques. DELF is the first system to apply such techniques in complex web applications built on distributed data stores.

DELF restoration logs use checkpointing, a technique for recovering from exploited security vulnerabilities [48, 66–68]. WARP [48] targets web applications and uses a browser extension, but is assessed in a single-node deployment. DELF demonstrates the applicability of checkpointing in large-scale, distributed OSNs.

Recent user research highlights misconceptions and mistrust in the deletion process [69, 4]. Another line of research studies motives for data deletion [2, 5]. Prior work explores the effectiveness of individual point deletes [3, 70, 71], suggesting special file systems and scrubbing tools [72, 73]. Minai et al. [74] highlight the problem of ineffective deletion for public content in OSNs.

### Overhead

**System Overhead:**
- **Profiling Deletions:** We profiled deletions and broke down how time is spent in different operations. We measured throughput while deleting a tree-structured graph with unit height stored in TAO, requiring 104 point deletes. The tree contains 100 edges from types annotated as deep, with the remaining types annotated as shallow.
- **Batching Configurations:** We executed each deletion 10 times on distinct machines and measured throughput under four distinct batching configurations, varying the size of read and write batching windows.
- **Results:** Batching reads and writes reduces overall system overhead from 336% down to 29% (C1 over C4). Write-intensive operations (point deletes and restoration log writes) are the most time-consuming. Batching writes with a batch size of 100 (C2 over C4) has a substantial impact, reducing time spent in restoration log writes by a factor of approximately 100× and in point deletes by a factor of approximately 5×. Read batching reduces time spent on reads by a factor of 5× (C3 over C4).

**Conclusion:**
- **Limited Overhead:** DELF introduces limited overhead during deletion, in line with systems offering similar guarantees [48].

### Future Work

**Applicability Outside OSNs:**
- **Declarative Annotations:** We anticipate deletion frameworks based on declarative annotations similar to DELF to be widely applicable across application domains and data stores.
- **Validation Techniques:** Some DELF validation techniques can be adapted to discover mistakes in existing applications without necessitating changes, facilitating correctness studies.

**Enhancing Validation:**
- **Machine-Learned Models:** Replacing edge type classification heuristics with machine-learned models trained on prior developer annotations could significantly improve precision and recall.
- **Data Item Level Enforcement:** DELF can enforce annotations at the data item level to preclude the creation of undeletable objects.

**Privacy Impact Assessments:**
- **Tying Decisions to Implementation:** DELF annotations can be extended to be tied to tooling used for Privacy Impact Assessments, ensuring that mandated deletion behaviors are implemented correctly.

**Further Improvements:**
- **Transparency and Accountability:** Systems like DELF can expose transparency interfaces to indicate what data items get deleted from data stores and when. Security researchers could use such interfaces to conduct external correctness verification.