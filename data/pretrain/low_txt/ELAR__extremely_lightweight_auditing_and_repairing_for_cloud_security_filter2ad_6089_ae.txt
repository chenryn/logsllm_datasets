### 6. EFFICIENCY ANALYSIS

#### 6.1 Theoretical Analysis
In addition to the feature comparison presented in Table 1, a detailed efficiency comparison between the schemes proposed in [24–26] and our proposed ELAR scheme is provided in Table 3. Let \(\xi\) denote the size of an element in \(F_q\) in terms of bits (\(\xi = \log_2 q\)). The coded block size is \((z + m)\xi\) because \(c_{ij} \in F_{q^{z+m}}\).

From Table 3, it is evident that the encoding costs for all schemes are nearly identical. However, while [24] does not support public authentication (i.e., no TPA), [25, 26] and ELAR do. Consequently, the client-side computation cost in [24] is not \(O(1)\) as it is in [25, 26] and ELAR.

Furthermore, [26] lacks spot-checking, resulting in higher server-side computation costs compared to [25] and ELAR. In the repair phase, [24] does not support direct repair, and [25] only supports uncompleted-direct-repair (as mentioned in Section 1). Therefore, their client-side computation costs are not \(O(1)\) as in [26] and ELAR. As a result, the communication costs in [24, 25] are also higher than those in [26] and ELAR. Additionally, [26] does not include spot-checking during the repair phase, leading to higher healthy-server-side computation costs compared to ELAR.

In summary, ELAR offers the lowest costs for all phases under complexity analysis.

#### 6.2 Implementation
In this section, we evaluate the computational performance of our scheme. A program written in Python 2.7.11 was executed on a MacBook Pro with an Intel Core i5 processor, 2.7 GHz, 16 GB of RAM, and OS X El Capitan version 10.11.3. The prime \(q\) was set to 256 bits. The number of servers \(n\) was set to 10, and the number of coded blocks stored in each server \(d\) was set to 10. The number of spot checks for each server \(s\) was set to half of \(d\) (i.e., \(s = d/2\)).

Since \(|F| = m \times |v_k|\) (where \(|F|\), \(m\), and \(|v_k|\) denote the file size, the number of file blocks, and the file block size, respectively), the implementation is divided into two cases:

- **Case 1: Fix \(m\) and change \(|v_k|\) according to \(|F|\)**: In this case, we fix \(m = 80\). The experimental results can be observed in Figure 3, which shows four sets of computational performance (keygen, encode, check, and repair) by varying the file size \(|F|\).
  
- **Case 2: Fix \(|v_k|\) and change \(m\) according to \(|F|\)**: In this case, we fix the file block size \(|v_k| = 223\) bits (1 MB). The experimental results can be observed in Figure 4, which shows four sets of computational performance (keygen, encode, check, and repair) by varying the file size \(|F|\).

**Comparison of Case 1 and Case 2:**
- **Keygen Phase**: Case 1 (Figure 3(a)) has lower time than Case 2 (Figure 4(a)), but the time in Case 1 grows exponentially, whereas in Case 2, it grows linearly. For \(|F| = 1\) GB (Figure 5(a)), the time in Case 1 is significantly higher than in Case 2.
- **Encode Phase**: The time in Case 1 (Figure 3(b)) and Case 2 (Figure 4(b)) are almost the same. For \(|F| = 1\) GB (Figure 5(b)), the time in both cases is similar.
- **Check Phase**: The time in Case 1 (Figure 3(c)) is linear, while in Case 2 (Figure 4(c)) it is constant. For \(|F| = 1\) GB (Figure 5(c)), the time in Case 1 is much higher than in Case 2.
- **Repair Phase**: Similar to the check phase, the time in Case 1 (Figure 3(d)) is linear, while in Case 2 (Figure 4(d)) it is constant. For \(|F| = 1\) GB (Figure 5(d)), the time in Case 1 is much higher than in Case 2.

It is important to note that the keygen and encode phases are executed only once at the beginning, while the check and repair phases are executed frequently during the system's lifetime. Therefore, the performance of the check and repair phases is crucial. For a 1 GB file in Case 2, the check time is 0.002 seconds for challenging, 0.61 seconds for responding, and 0.78 seconds for verifying. The repair time is 0.84 seconds for the new server and 0.61 seconds for other servers. These results demonstrate that ELAR is highly efficient and suitable for real-world systems.

### 7. CONCLUSION AND FUTURE WORK
In this paper, we present ELAR, a network-coding-based Proof of Retrievability (POR) scheme designed to address data audit and data repair in cloud backup storage. ELAR allows a third-party auditor (TPA) to periodically check cloud servers without using asymmetric-key cryptography and provides a direct repair process when a server is corrupted. This frees the client from the burden of data audit and data check. The implementation results show that the audit and repair phases are efficient, making ELAR highly applicable for real cloud systems. Future work will focus on handling file updates and addressing potential malicious TPAs.

### 8. REFERENCES
[1] R. Curtmola, O. Khan, R. Burns, and G. Ateniese. MR-PDP: Multiple-Replica Provable Data Possession. In: Proceedings of the 28th Distributed Computing Systems Conference - ICDCS’08, pp. 411-420, 2008.
[2] K. Bowers, A. Juels, and A. Oprea. HAIL: A High-Availability and Integrity Layer for Cloud Storage. In: Proceedings of the 16th ACM Computer and Communications Security Conference - CCS’09, pp. 187-198, 2009.
[3] H. Lin, and W. Tzeng. A Secure Erasure Code-Based Cloud Storage System with Secure Data Forwarding. In: IEEE Transactions on Parallel and Distributed Systems, vol. 23, no. 6, pp. 995-1003, 2012.
[4] R. Ahlswede, N. Cai, S. Li, and R. Yeung. Network Information Flow. In: IEEE Transactions on Information Theory, vol. 46, no. 4, pp. 1204-1216, 2000.
[5] S. Li, R. Yeung, and N. Cai. Linear Network Coding. In: IEEE Transactions on Information Theory, vol. 49, no. 2, pp. 371-381, 2003.
[6] R. Koetter and M. Muriel. An Algebraic Approach to Network Coding. In: IEEE/ACM Transactions on Networking (TON), vol. 11, no. 5, pp. 782-795, 2003.
[7] A. Dimakis, P. Godfrey, Y. Wu, M. Wainwright, and K. Ramchandran. Network Coding for Distributed Storage Systems. In: IEEE Transactions on Information Theory, vol. 56, no. 9, pp. 4539-4551, 2010.
[8] H. Chen, Y. Hu, P. Lee, and Y. Tang. NCCloud: A Network-Coding-Based Storage System in a Cloud-of-Clouds. In: IEEE Transactions on Computers, vol. 63, no. 1, pp. 31-44, 2013.
[9] G. Ateniese, R. Burns, R. Curtmola, J. Herring, L. Kissner, Z. Peterson, and D. Song. Provable Data Possession at Untrusted Stores. In: Proceedings of the 14th ACM Conference on Computer and Communications Security - CCS’07, pp. 598-609, 2007.
[10] G. Ateniese, R. D. Pietro, L. V. Mancini, and G. Tsudik. Scalable and Efficient Provable Data Possession. In: Proceedings of the 4th Conference on Security and Privacy in Communication Networks - SecureComm’08, article no. 9, 2008.
[11] A. Juels and B. Kaliski. PORs: Proofs of Retrievability for Large Files. In: Proceedings of the 4th ACM Conference on Computer and Communications Security - CCS’07, pp. 584-597, 2007.
[12] H. Shacham and B. Waters. Compact Proofs of Retrievability. In: Proceedings of the 14th International Conference on the Theory and Application of Cryptology and Information Security - ASIACRYPT’08, pp. 90-107, 2008.
[13] K. Bowers, A. Juels, and A. Oprea. Proofs of Retrievability: Theory and Implementation. In: Proceedings of the 1st ACM Workshop on Cloud Computing Security - CCSW’09, pp. 43-54, 2009.
[14] D. Cash, A. Kupcu, and D. Wichs. Dynamic Proofs of Retrievability via Oblivious RAM. In: Proceedings of the 32nd Annual International Conference on the Theory and Applications of Cryptographic Techniques - EUROCRYPT’13, pp. 279-295, 2013.
[15] Q. Zheng and S. Xu. Fair and Dynamic Proofs of Retrievability. In: Proceedings of the 1st ACM Conference on Data and Application Security and Privacy - CODASPY’11, pp. 237-248, 2011.
[16] C. Wang, S. Chow, Q. Wang, and K. Ren. Privacy-Preserving Public Auditing for Secure Cloud Storage. In: IEEE Transactions on Computers, vol. 62, no. 2, pp. 362-375, 2011.
[17] C. Wang, Q. Wang, K. Ren, and W. Lou. Privacy-Preserving Public Auditing for Data Storage Security in Cloud Computing. In: Proceedings of the 29th Conference on Computer Communications - INFOCOM’10, pp. 525-533, 2010.
[18] Q. Wang, C. Wang, J. Li, K. Ren, and W. Lou. Enabling Public Verifiability and Data Dynamics for Storage Security in Cloud Computing. In: Proceedings of the 14th European Symposium on Research in Computer Security - ESORICS’09, pp. 355-370, 2009.
[19] L. Wei, H. Zhu, Z. Cao, X. Dong, W. Jia, Y. Chen, and A. Vasilakos. Security and Privacy for Storage and Computation in Cloud Computing. In: Springer Journal on Information Sciences, vol. 258, 2014, pp. 371-386.
[20] K. Yang and X. Jia. An Efficient and Secure Dynamic Auditing Protocol for Data Storage in Cloud Computing. In: IEEE Transactions on Parallel and Distributed Systems, vol. 24, no. 90, pp. 1717-1726, 2012.
[21] B. Wang, B. Li, and H. Li. Panda: Public Auditing for Shared Data with Efficient User Revocation in the Cloud. In: IEEE Transactions on Services Computing, vol. 8, no. 1, pp. 92-106, 2013.
[22] Q. Wang, C. Wang, K. Ren, W. Lou, and J. Li. Enabling Public Auditability and Data Dynamics for Storage Security in Cloud Computing. In: IEEE Transactions on Parallel and Distributed Systems, vol. 22, no. 5, pp. 847-859, 2011.
[23] Y. Dodis, S. Vadhan, and D. Wichs. Proofs of Retrievability via Hardness Amplification. In: Proceedings of the 6th Theory of Cryptography Conference on Theory of Cryptography - TCC’09, pp. 109-127, 2009.
[24] B. Chen, R. Curtmola, G. Ateniese, and R. Burns. Remote Data Checking for Network Coding-based Distributed Storage Systems. In: Proceedings of the 2nd ACM Cloud Computing Security Workshop - CCSW’10, pp. 31-42, 2010.
[25] A. Le and A. Markopoulou. NC-Audit: Auditing for Network Coding Storage. In: Proceedings of the International Symposium on Network Coding (NetCod), pp. 155-160, 2012.
[26] K. Omote and T. Thao. MD-POR: Multi-source and Direct Repair for Network Coding-based Proof of Retrievability. In: Journal of Distributed Sensor Networks (IJDSN) on Advanced Big Data Management and Analytics for Ubiquitous Sensors - IJDSN, vol. 2015, article ID: 586720, 2015.
[27] W. Yan, M. Yang, L. Li, and H. Fang. Short Signature Scheme for Multi-Source Network Coding. In: Journal of Computer Communications, vol. 35, no. 3, pp. 344-351, 2012.
[28] B. Wang, B. Li, and H. Li. Knox: Privacy-Preserving Auditing for Shared Data with Large Groups in the Cloud. In: Proceedings of the 10th International Conference on Applied Cryptography and Network Security - ACNS’12, pp. 507-525, 2012.
[29] F. Chen, T. Xiang, Y. Yang, and S. Chow. Secure Cloud Storage Meets with Secure Network Coding. In: Proceedings of the IEEE Conference on Computer Communications - INFOCOM’14, pp. 673-681, 2014.
[30] B. Chen and R. Curtmola. Towards Self-Repairing Replication-Based Storage Systems Using Untrusted Clouds. In: Proceedings of the 3rd ACM Conference on Data and Application Security and Privacy - CODASPY, pp. 377-388, 2013.
[31] S. Agrawal and D. Boneh. Homomorphic MACs: MAC-Based Integrity for Network Coding. In: Proceedings of the 7th Applied Cryptography and Network Security Conference - ACNS’09, pp. 292-305, 2009.
[32] A. Le and A. Markopoulou. On Detecting Pollution Attacks in Inter-Session Network Coding. In: Proceedings of the 31st IEEE Conference on Computer Communications - INFOCOM’12, pp. 343-351, 2012.