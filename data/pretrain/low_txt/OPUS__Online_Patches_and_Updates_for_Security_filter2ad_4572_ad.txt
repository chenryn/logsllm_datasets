### Thread Safety and Patch Application

Instead of maintaining a single-threaded head, we manage a list of threads that are not in a safe state, based on the single-threaded safety criterion. The patch is applied when this list is empty. This list is initialized when the patch injector first attaches to the process and stops all threads to gather necessary information. This is the only point where every thread's stack is inspected simultaneously.

A thread is added to this list when it hits a breakpoint upon entering an old version of a patched function. A thread is removed from the list when a notification of its return from the topmost patched function on the stack is received. At this point, if the list is empty, the patching process can proceed.

### Patching Process

#### Function Redirection
To redirect function execution, we force the thread to execute `dlopen(3)` and `dlsym(3)` with the correct arguments, followed by a breakpoint, using pre-constructed code placed in a pre-allocated playground. When `dlopen(3)` and `dlsym(3)` return successfully, they provide the address of the new version of the patched function. We then redirect execution to the new code via an indirect jump, which involves specifying a location in the indirection table that stores the address of the new function. The atomicity of the patch is ensured as all functions are patched simultaneously. Race conditions are prevented because breakpoints at the beginning of each old version act as barrier synchronization primitives, trapping any thread attempting to run the old version and resuming it in the new version.

### Experience and Evaluation

The goal of our evaluation is to assess the applicability of OPUS in real-world settings, particularly for patching security vulnerabilities. We first isolate the raw performance penalty imposed by OPUS in dynamically applying patches, separate from application-specific overhead. Next, we report on the prevalence of OPUS-amenable patches through an extensive survey of CERT vulnerabilities issued between December 2001 and February 2005. Finally, we present three detailed case studies of using OPUS on typical vulnerabilities and the experience gained in the process.

### Performance

We consider the raw performance penalty of dynamically applying a patch. OPUS introduces two types of overhead: a one-time cost for applying the patch and a recurring cost for each call to a patched function. The patch application process has three phases: initialization of the code playground, assessment of patch application safety, and patch application. Our measurements show that the overhead of initializing and applying a patch ranges from 39.25ms to 81.44ms, scaling linearly with the number of functions in the patch. The cost of detecting patch application safety was not determined due to its dependency on the process state at the time of patch application.

Once it is determined that a patch can be applied, the process is carried out atomically. The patching process involves two steps: (1) loading the new version of the code into the target threadâ€™s address space and (2) overwriting the first instruction within the old code with an indirect jump to the new code. To load the new code, we execute `dlopen(3)` and `dlsym(3)` on behalf of the patched thread. After the initial assessment of patch application safety, the patch injection tool inspects the process only when specific conditions with safety implications occur, such as when the stack is being unwound. Otherwise, the process's performance remains unaffected.

### Recurring Overhead

To measure the recurring runtime overhead introduced by function indirection, we evaluated the cycle times for a series of simple functions. We tested a no-argument, no-work function, a function with a simple loop, and functions with varying numbers of arguments. The standard deviation of the measurements is 4 cycles, and the average ranges from 3 to 9 cycles. This suggests that the recurring overhead incurred by function indirection is fixed in all tested cases.

### CERT Survey

To evaluate and refine the patch model, we examined several years of public application vulnerability reports available on the CERT website. Our goal was to determine the characteristics of common vulnerabilities and their associated patches, and to assess the suitability of OPUS for applying them. We found that most security patches were small and isolated to function bodies. We identified five prevalent vulnerability classes: (1) buffer overflows, (2) failed input checks, (3) format string errors, (4) logic and off-by-one errors, and (5) memory errors (double frees and leaks).

Our survey of CERT announcements proceeded in three phases: high-level classification, source code inspection, and real-world patch testing. Of the 883 CERT notifications, 445 (50.4%) were amenable to patching with OPUS based on the vulnerability description. We inspected the source code of 115 out of the 445 CERTs and found that 111 were amenable. We tested 26 real patches through OPUS, and 22 were successfully applied. The four failures were due to implementation bugs in our current prototype, which we are addressing.

### Experience with OPUS

To evaluate the practicality of using OPUS with real-world security patches, we tested OPUS on 26 vulnerabilities from our CERT survey. In many cases, patches were applied without intervention. For larger upgrades, we manually isolated the relevant changes. Table 2 summarizes the vulnerabilities tested, including patch type, testing methods, and results.

### Case Study: Patching Real Vulnerabilities

We provide case studies of three different patches: one for the Apache webserver and two for the MySQL DBMS.

#### Apache Chunked Transfer Bug

We selected a vulnerability in the Apache webserver's handling of chunked transfer encoding, which led to a buffer overflow. The patch affected 7 functions in one file and consisted of 16 changed lines and 37 new lines. We successfully patched a running Apache process. Functional evaluation confirmed that the patch correctly fixed the vulnerability. Front-end and back-end experiences helped refine our annotation format and improve our handling of static functions. We tested patch injection under heavy load, showing that OPUS works well on both single-threaded and multithreaded applications.

### Conclusion

We demonstrated success in fixing a wild exploit using a patch developed without foresight of using OPUS, meeting our goals.