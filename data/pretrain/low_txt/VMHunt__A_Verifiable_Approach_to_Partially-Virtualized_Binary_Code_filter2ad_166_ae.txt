### References

1. Anthony Desnos. 2010. Dynamic, Metamorphic (and Open-Source) Virtual Machines. Hack.lu.
2. Robert B. K. Dewar. 1975. Indirect Threaded Code. Commun. ACM 18, 6 (1975).
3. M. Anton Ertl and David Gregg. 2001. The Behavior of Efficient Virtual Machine Interpreters on Modern Architectures. In Proceedings of the 2001 European Conference on Parallel Processing.
4. Nicolas Falliere, Patrick Fitzgerald, and Eric Chien. 2009. Inside the Jaws of Trojan.Clampi. Symantec Technical Report.
5. Vijay Ganesh and David L. Dill. 2007. A Decision Procedure for Bit-Vectors and Arrays. In Proceedings of the 2007 International Conference on Computer Aided Verification (CAV’07).
6. Patrice Godefroid, Michael Y. Levin, and David Molnar. 2008. Automated White-Box Fuzz Testing. In Proceedings of the 15th Annual Network and Distributed System Security Symposium (NDSS’08).
7. Yoann Guillot and Alexandre Gazet. 2010. Automatic Binary Deobfuscation. Journal in Computer Virology 6, 3 (2010).
8. Anatoli Kalysch, Johannes Götzfried, and Tilo Müller. 2017. VMAttack: De-Obfuscating Virtualization-Based Packed Binaries. In Proceedings of the 12th International Conference on Availability, Reliability, and Security (ARES’17).
9. Yuhei Kawakoya, Makoto Iwamura, Eitaro Shioji, and Takeo Hariu. 2013. API Chaser: Anti-Analysis Resistant Malware Analyzer. In Proceedings of the 16th International Symposium on Research in Attacks, Intrusions, and Defenses (RAID’13).
10. Johannes Kinder. 2012. Towards Static Analysis of Virtualization-Obfuscated Binaries. In Proceedings of the 19th Working Conference on Reverse Engineering (WCRE’12).
11. Samuel T. King, George W. Dunlap, and Peter M. Chen. 2003. Operating System Support for Virtual Machines. In Proceedings of the 2003 USENIX Annual Technical Conference (ATC’03).
12. Dhilung Kirat, Giovanni Vigna, and Christopher Kruegel. 2014. BareCloud: Bare-Metal Analysis-Based Evasive Malware Detection. In Proceedings of the 23rd USENIX Conference on Security Symposium (USENIX Security’14).
13. Kaiyuan Kuang, Zhanyong Tang, Xiaoqing Gong, Dingyi Fang, Xiaojiang Chen, Tianzhang Xing, Guixin Ye, Jie Zhang, and Zheng Wang. 2016. Exploiting Dynamic Scheduling for VM-Based Code Obfuscation. In Proceedings of the 15th IEEE International Conference on Trust, Security, and Privacy in Computing and Communications (TrustCom’16).
14. Boris Lau. 2008. Dealing with Virtualization Obfuscators. CARO Workshop.
15. Mingyue Liang, Zhoujun Li, Qiang Zeng, and Zhejun Fang. 2017. Deobfuscation of Virtualization-Obfuscated Code through Symbolic Execution and Compilation Optimization. In Proceedings of the 19th International Conference on Information and Communications Security (ICICS’17).
16. Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood. 2005. Pin: Building Customized Program Analysis Tools with Dynamic Instrumentation. In Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI’05).
17. Ramya Manikyam, J. Todd McDonald, William R. Mahoney, Todd R. Andel, and Samuel H. Russ. 2016. Comparing the Effectiveness of Commercial Obfuscators Against MATE Attacks. In Proceedings of the 6th Workshop on Software Security, Protection, and Reverse Engineering (SSPREW’16).
18. Jiang Ming, Dongpeng Xu, Yufei Jiang, and Dinghao Wu. 2017. BinSim: Trace-Based Semantic Binary Diffing via System Call Sliced Segment Equivalence Checking. In Proceedings of the 26th USENIX Conference on Security Symposium (USENIX Security’17).
19. Jiang Ming, Dongpeng Xu, Li Wang, and Dinghao Wu. 2015. LOOP: Logic-Oriented Opaque Predicate Detection in Obfuscated Binary Code. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS’15).
20. Andreas Moser, Christopher Kruegel, and Engin Kirda. 2007. Exploring Multiple Execution Paths for Malware Analysis. In Proceedings of the 28th IEEE Symposium on Security and Privacy (S&P’07).
21. Philip OKane, Sakir Sezer, and Kieran McLaughlin. 2011. Obfuscation: The Hidden Malware. IEEE Security and Privacy 9, 5 (2011).
22. Oreans Technologies. 2015. Protecting Better with Code Virtualizer. http://oreans.com/codevirtualizer.php.
23. Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens, Mario Polino, Andrew Dutcher, John Grosen, Siji Feng, Christophe Hauser, Christopher Kruegel, and Giovanni Vigna. 2016. SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis. In Proceedings of the 37th IEEE Symposium on Security and Privacy (S&P’16).
24. Craig Smith. 2008. Creating Code Obfuscation Virtual Machines. RECON.
25. Jim Smith and Ravi Nair. 2005. Virtual Machines: Versatile Platforms for Systems and Processes (The Morgan Kaufmann Series in Computer Architecture and Design). Morgan Kaufmann Publishers Inc., San Francisco, CA, USA.
26. Dawn Song, David Brumley, Heng Yin, Juan Caballero, Ivan Jager, Min Gyung Kang, Zhenkai Liang, James Newsome, Pongsin Poosankam, and Prateek Saxena. 2008. BitBlaze: A New Approach to Computer Security via Binary Analysis. In Proceedings of the 4th International Conference on Information Systems Security (ICISS’08). Keynote invited paper.
27. Aditya K Sood, Richard J Enbody, and Rohit Bansal. 2011. SpyEye Malware Infection Framework. Virus Bulletin.
28. StrongBit Technology. Last reviewed 10/01/2017. EXECryptor: Bulletproof Software Protection. http://www.strongbit.com/execryptor.asp.
29. Zhanyong Tang, Lei Wang, Kaiyuan Kuang, Chao Xue, Xiaoqing Gong, Xiaojiang Chen, Dingyi Fang, and Zheng Wang. 2017. SEEAD: A Semantic-Based Approach for Automatic Binary Code De-Obfuscation. In Proceedings of the 16th IEEE International Conference on Trust, Security, and Privacy in Computing and Communications (TrustCom’17).
30. Clark Taylor and Christian Collberg. 2016. A Tool for Teaching Reverse Engineering. In Proceedings of the 2016 USENIX Workshop on Advances in Security Education.
31. The Enigma Protector. Last reviewed 10/01/2017. Enigma Protector: A Professional System for Executable Files Licensing and Protection. http://enigmaprotector.com/.
32. Tora. 2012. Devirtualizing FinSpy. POC 2012.
33. Xabier Ugarte-Pedrero, Davide Balzarotti, Igor Santos, and Pablo G. Bringas. 2015. SoK: Deep Packer Inspection: A Longitudinal Study of the Complexity of Runtime Packers. In Proceedings of the 36th IEEE Symposium on Security & Privacy (S&P’15).
34. Julien Vanegue, Sean Heelan, and Rolf Rolles. 2012. SMT Solvers for Software Security. In Proceedings of the 6th USENIX Workshop on Offensive Technologies (WOOT’12).
35. Oreans Technologies. Last reviewed 10/01/2017. Code Virtualizer: Total Obfuscation against Reverse Engineering. http://oreans.com/codevirtualizer.php.
36. VMProtect Software. Last reviewed 10/01/2017. VMProtect Software Protection. http://vmpsoft.com.
37. Oreans Technologies. Last reviewed 10/01/2017. Themida: Advanced Windows Software Protection System. https://www.oreans.com/themida.php.
38. Joshua Phillips, Vitaly Zaytsev, and Abhishek Karnik. 2009. Parasitics: The Next Generation. Kaspersky Lab Technical Report.
39. Ian Piumarta and Fabio Riccardi. 1998. Optimizing Direct Threaded Code by Selective Inlining. In Proceedings of the 1998 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI’98).
40. Mario Polino, Andrea Continella, Sebastiano Mariani, Stefano D’Alessio, Lorenzo Fontana, Fabio Gritti, and Stefano Zanero. 2017. Measuring and Defeating Anti-Instrumentation-Equipped Malware. In Proceedings of the 14th Conference on Detection of Intrusions and Malware and Vulnerability Assessment (DIMVA’17).
41. Michalis Polychronakis. 2011. Reverse Engineering of Malware Emulators. Springer US, Chapter Encyclopedia of Cryptography and Security.
42. Jason Raber. 2013. Virtual Deobfuscator: Removing Virtualization Obfuscations from Malware. Black Hat USA.
43. Ben Read and Jonathan Leathery. 2017. CVE-2017-0199 Used as Zero Day to Distribute FINSPY Espionage Malware and LATENTBOT Cyber Crime Malware. FireEye Threat Research Blog.
44. ReWolf. Last reviewed 10/01/2017. x86 Virtualizer. http://www.openrce.org/blog/view/847/x86_Virtualizer_-_source_code.
45. Thomas Roccia. 2017. Malware Packers Use Tricks to Avoid Analysis, Detection. McAfee Blogs.
46. Rolf Rolles. 2009. Unpacking Virtualization Obfuscators. In Proceedings of the 3rd USENIX Workshop on Offensive Technologies (WOOT’09).
47. Kevin A. Roundy and Barton P. Miller. 2013. Binary-Code Obfuscations in Prevalent Packer Tools. Comput. Surveys 46, 1 (2013).
48. Jonathan Salwan, Sébastien Bardin, and Marie-Laure Potet. 2017. Deobfuscation of VM Based Software Protection. In Symposium sur la sécurité des technologies de l’information et des communications (SSTIC’17).
49. Florent Saudel and Jonathan Salwan. 2015. Triton: A Dynamic Symbolic Execution Framework. In Symposium sur la sécurité des technologies de l’information et des communications (SSTIC’15).
50. Monirul Sharif, Andrea Lanzi, Jonathon Giffin, and Wenke Lee. 2009. Automatic Reverse Engineering of Malware Emulators. In Proceedings of the 30th IEEE Symposium on Security and Privacy (S&P’09).
51. Yunhe Shi, David Gregg, Andrew Beatty, and M. Anton Ertl. 2005. Virtual Machine Showdown: Stack Versus Registers. In Proceedings of the 1st ACM/USENIX International Conference on Virtual Execution Environments (VEE’05).
52. C. Wang, J. Davidson, J. Hill, and J. Knight. 2001. Protection of Software-Based Survivability Mechanisms. In Proceedings of International Conference on Dependable Systems and Networks (DSN’01).
53. Huaijun Wang, Dingyi Fang, Guanghui Li, Na An, Xiaojiang Chen, and Yuanxiang Gu. 2014. TDVMP: Improved Virtual Machine-Based Software Protection with Time Diversity. In Proceedings of the 3rd Program Protection and Reverse Engineering Workshop.
54. Huaijun Wang, Dingyi Fang, Guanghui Li, Xiaoyan Yin, Bo Zhang, and Yuanxiang Gu. 2013. NISLVMP: Improved Virtual Machine-Based Software Protection. In Proceedings of the 9th International Conference on Computational Intelligence and Security.
55. Pei Wang, Shuai Wang, Jiang Ming, Yufei Jiang, and Dinghao Wu. 2016. Translingual Obfuscation. In Proceedings of the 1st IEEE European Symposium on Security and Privacy (Euro S&P’16).
56. Zhenxiang Jim Wang. 2010. Virtual Machine Protection Technology and AV Industry. CARO Workshop.
57. Josh Watson. 2017. An Extra Bit of Analysis for cLEMENCy. Trail of Bits Blog.
58. Haijiang Xie, Yuanyuan Zhang, Juanru Li, and Dawu Gu. 2017. Nightingale: Translating Embedded VM Code in x86 Binary Executables. In Proceedings of the 20th Information Security Conference (ISC’17).
59. Dongpeng Xu, Jiang Ming, and Dinghao Wu. 2017. Cryptographic Function Detection in Obfuscated Binaries via Bit-Precise Symbolic Loop Mapping. In Proceedings of the 38th IEEE Symposium on Security and Privacy (S&P’17).
60. Babak Yadegari and Saumya Debray. 2015. Symbolic Execution of Obfuscated Code. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS’15).
61. Babak Yadegari, Brian Johannesmeyer, Ben Whitely, and Saumya Debray. 2015. A Generic Approach to Automatic Deobfuscation of Executable Code. In Proceedings of the 36th IEEE Symposium on Security and Privacy (S&P’15).
62. Lok-Kwong Yan, Manjukumar Jayachandra, Mu Zhang, and Heng Yin. 2012. V2E: Combining Hardware Virtualization and Software Emulation for Transparent and Extensible Malware Analysis. In Proceedings of the 8th ACM SIGPLAN/SIGOPS Conference on Virtual Execution Environments (VEE’12).
63. Qinghua Zhang and Douglas S. Reeves. 2007. MetaAware: Identifying Metamorphic Malware. In Proceedings of the 23rd Annual Computer Security Applications Conference (ACSAC’07).
64. Yongxin Zhou, Alec Main, Yuan X. Gu, and Harold Johnson. 2007. Information Hiding in Software with Mixed Boolean-Arithmetic Transforms. In Proceedings of the 8th International Workshop on Information Security Applications (WISA’07).

### Appendix A: Common Virtualization Procedure

A typical virtualization procedure involves the following steps:

1. **Marking Sensitive Areas:**
   - In the source code of the program that will be virtualized, insert marks around the sensitive area. In C/C++ code, these marks are typically implemented as macros. Figure 8 shows an example.

   ```c
   #include "VirtualizerSDK.h"
   int f(int a)
   {
       int b = 1;
       VIRTUALIZER_START
       a++;
       VIRTUALIZER_END
       return a + b;
   }
   // The macro marks the starting point of the virtualized area
   // The macro marks the ending point of the virtualized area
   ```

   **Figure 8:** Example showing the virtualization marks in the source code. The macros mark the starting and ending points of the sensitive area that will be virtualized.

2. **Compilation:**
   - Compile the source code using a normal compiler like GCC or MS VC++. The code is linked to a library provided by the virtualization tool. The result is an executable file. At this stage, the sensitive area in the executable file is not obfuscated; it is only marked.

3. **Virtualization:**
   - Run the virtualization tool to process the executable file. The tool will translate the marked area into virtualized code and append the virtual machine to the binary code.

### Sensitive Area Considerations

According to the manuals of virtualization tools, users should avoid the following when applying virtualization to a program:

- **Performance Overhead:** Users should avoid virtualizing loops that repeat many times to prevent significant performance loss.
- **Compatibility Issues:** Switch/Case statements and exception handling inside a sensitive area might not work properly after virtualization. Therefore, these program structures are not recommended for virtualization.

In practice, due to performance overhead and compatibility problems, virtualization can only be applied to limited program structures and areas. It is recommended to apply virtualization only to protect the sensitive areas in your program.

**Example: Registration Checking Function**

One typical situation for a sensitive area is the checking procedure in a trial/registration scheme of an application. The same application can run in two modes: trial mode or registered mode. The registered mode provides full features, whereas the trial mode only provides limited features. Figure 9 shows an example of the registration checking function and the recommended way of protecting it by virtualization.

```c
bool reg_mode;

int main()
{
    ...
    VIRTUALIZER_START
    reg_mode = checkRegistration(); // sensitive area 1
    VIRTUALIZER_END
    ...
}

void f()
{
    VIRTUALIZER_START
    if (reg_mode) {
        // sensitive area 2
        // code for registered version
    } else {
        // code for trial version
    }
    VIRTUALIZER_END
}
```

**Figure 9:** Example showing a registration checking function and the sensitive area being virtualized. The global boolean variable `reg_mode` stores the mode of the application. `true` means the program is running under the registered mode, and `false` means the trial mode. The function `checkRegistration()` verifies whether a serial number is eligible. The function `f` includes two branches for the registered and trial modes, respectively. The global variable `reg_mode` is sensitive because the trial/registration scheme can be bypassed if its value is modified. Therefore, any snippet that reads or writes `reg_mode` should be considered a sensitive area and should be virtualized.