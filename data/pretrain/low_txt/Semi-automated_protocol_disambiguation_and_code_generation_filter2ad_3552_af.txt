以下是优化后的参考文献列表，使其更加清晰、连贯和专业：

1. Beckett, R., Mahajan, R., Millstein, T., Padhye, J., and Walker, D. (2017). Network Configuration Synthesis with Abstract Topologies. *SIGPLAN Not.*, 52(6), 437-451.
2. Berant, J., Chou, A., Frostig, R., and Liang, P. (2013). Semantic Parsing on Freebase from Question-Answer Pairs. In *Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing* (pp. 1533-1544).
3. Bertero, C., Roy, M., Sauvanaud, C., and Trédan, G. (2017). Experience Report: Log Mining Using Natural Language Processing and Application to Anomaly Detection. In *2017 IEEE 28th International Symposium on Software Reliability Engineering (ISSRE)* (pp. 351-360). IEEE.
4. Bhargavan, K., Obradovic, D., and Gunter, C. A. (2002). Formal Verification of Standards for Distance Vector Routing Protocols. *Journal of the ACM (JACM)*, 49(4), 538-576.
5. Bishop, S., Fairbairn, M., Norrish, M., Sewell, P., Smith, M., and Wansbrough, K. (2005). Rigorous Specification and Conformance Testing Techniques for Network Protocols, as Applied to TCP, UDP, and Sockets. In *Proceedings of the 2005 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications* (pp. 265-276).
6. Bolognesi, T., and Brinksma, E. (1987). Introduction to the ISO Specification Language LOTOS. *Computer Networks and ISDN Systems*, 14(1).
7. Boussinot, F., and De Simone, R. (1991). The Esterel Language. *Proceedings of the IEEE*, 79(9), 1293-1304.
8. Budkowski, S., and Dembinski, P. (1987). An Introduction to Estelle: A Specification Language for Distributed Systems. *Computer Networks and ISDN Systems*, 14(1), 3-23.
9. Chen, D. L., and Mooney, R. J. (2011). Learning to Interpret Natural Language Navigation Instructions from Observations. In *Twenty-Fifth AAAI Conference on Artificial Intelligence*.
10. Clark, D. D. (1992). A Cloudy Crystal Ball: Visions of the Future. *Proceedings of the Twenty-Fourth Internet Engineering Task Force* (pp. 539-544).
11. Harkins, D. (2019). Secure Password Ciphersuites for Transport Layer Security (TLS). *RFC 8492*.
12. Date, C. J. (1987). *A Guide to the SQL Standard: A User’s Guide to the Standard Relational Language SQL*. Addison-Wesley Longman Publishing Co., Inc., USA.
13. Deering, D. S. E. (1989). Host Extensions for IP Multicasting. *RFC 1112*.
14. Devlin, J., Chang, M.-W., Lee, K., and Toutanova, K. (2018). BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding. *arXiv preprint arXiv:1810.04805*.
15. Dong, L., and Lapata, M. (2018). Coarse-to-Fine Decoding for Neural Semantic Parsing. *arXiv preprint arXiv:1805.04793*.
16. Editor, R., and Flanagan, H. (2014). RFC Style Guide. *RFC 7322*.
17. Feng, Z., Guo, D., Tang, D., Duan, N., Feng, X., Gong, M., Shou, L., Qin, B., Liu, T., Jiang, D., and Zhou, M. (2020). CodeBERT: A Pre-trained Model for Programming and Natural Languages. *ArXiv abs/2002.08155*.
18. Feser, J. K., Chaudhuri, S., and Dillig, I. (2015). Synthesizing Data Structure Transformations from Input-Output Examples. *ACM SIGPLAN Notices*, 50(6), 229-239.
19. Fu, Q., Lou, J.-G., Wang, Y., and Li, J. (2009). Execution Anomaly Detection in Distributed Systems through Unstructured Log Analysis. In *2009 Ninth IEEE International Conference on Data Mining* (pp. 149-158). IEEE.
20. Gao, X., Kim, T., Wong, M. D., Raghunathan, D., Varma, A. K., Kanan, P. G., Sivaraman, A., Narayana, S., and Gupta, A. (2020). Switch Code Generation Using Program Synthesis. In *Proceedings of the Annual Conference of the ACM Special Interest Group on Data Communication on the Applications, Technologies, Architectures, and Protocols for Computer Communication* (SIGCOMM '20) (pp. 44-61). Association for Computing Machinery.
21. Stanford NLP Group. (n.d.). CoreNLP Coreference Resolution. Retrieved from <https://stanfordnlp.github.io/CoreNLP/coref.html>.
22. Hockenmaier, J., and Bisk, Y. (2010). Normal-Form Parsing for Combinatory Categorial Grammars with Generalized Composition and Type-Raising. In *Proceedings of the 23rd International Conference on Computational Linguistics (Coling 2010)* (pp. 465-473). Coling 2010 Organizing Committee.
23. Honnibal, M., and Montani, I. (2017). spaCy 2: Natural Language Understanding with Bloom Embeddings, Convolutional Neural Networks and Incremental Parsing. To appear.
24. Hutchinson, N. C., and Peterson, L. L. (1991). The X-Kernel: An Architecture for Implementing Network Protocols. *IEEE Transactions on Software Engineering*, 1, 64-76.
25. Allen Institute for Artificial Intelligence. (n.d.). AllenNLP Coreference Resolution. Retrieved from <https://demo.allennlp.org/coreference-resolution>.
26. IETF. (2018). IPP Interoperability Testing Event #2. Retrieved from <http://www.pwg.org/ipp/testing/>.
27. Katz, D., and Ward, D. (2010). Bidirectional Forwarding Detection (BFD). *RFC 5880*.
28. Kempson, R. M., and Cormack, A. (1981). Ambiguity and Quantification. *Linguistics and Philosophy*, 4(2), 259-309.
29. Kessens, D., Bates, T. J., Alaettinoglu, C., Meyer, D., Villamizar, C., Terpstra, M., Karrenberg, D., and Gerich, E. P. (1999). Routing Policy Specification Language (RPSL). *RFC 2622*.
30. Killian, C., Anderson, J. W., Jhala, R., and Vahdat, A. (2007). Life, Death, and the Critical Transition: Finding Liveness Bugs in Systems Code. In *4th USENIX Symposium on Networked Systems Design & Implementation (NSDI 07)*. USENIX Association.
31. Killian, C. E., Anderson, J. W., Braud, R., Jhala, R., and Vahdat, A. M. (2007). Mace: Language Support for Building Distributed Systems. *ACM SIGPLAN Notices*, 42(6), 179-188.
32. Kohler, E., Kaashoek, M. F., and Montgomery, D. R. (1999). A Readable TCP in the Prolac Protocol Language. In *Proceedings of the Conference on Applications, Technologies, Architectures, and Protocols for Computer Communication* (pp. 3-13).
33. Krishnamurthy, J., Dasigi, P., and Gardner, M. (2017). Neural Semantic Parsing with Type Constraints for Semi-Structured Tables. In *Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing* (pp. 1516-1526).
34. Kurose, J., and Ross, K. (2012). *Computer Networking: A Top Down Approach*.
35. Lan, Z., Chen, M., Goodman, S., Gimpel, K., Sharma, P., and Soricut, R. (2019). ALBERT: A Lite BERT for Self-Supervised Learning of Language Representations. *arXiv preprint arXiv:1909.11942*.
36. Lantz, B., Heller, B., and McKeown, N. (2010). A Network in a Laptop: Rapid Prototyping for Software-Defined Networks. In *Proceedings of the 9th ACM SIGCOMM Workshop on Hot Topics in Networks* (pp. 1-6).
37. Lee, H., Seibert, J., Killian, C. E., and Nita-Rotaru, C. (2012). Gatling: Automatic Attack Discovery in Large-Scale Distributed Systems. In *NDSS*.
38. Liang, C., Berant, J., Le, Q., Forbus, K. D., and Lao, N. (2016). Neural Symbolic Machines: Learning Semantic Parsers on Freebase with Weak Supervision. *arXiv preprint arXiv:1611.00020*.
39. Lin, X. V., Wang, C., Pang, D., Vu, K., and Ernst, M. D. (2017). Program Synthesis from Natural Language Using Recurrent Neural Networks. *University of Washington Department of Computer Science and Engineering, Seattle, WA, USA, Tech. Rep. UW-CSE-17-03-01*.
40. Ling, W., Grefenstette, E., Hermann, K. M., Kočiský, T., Senior, A., Wang, F., and Blunsom, P. (2016). Latent Predictor Networks for Code Generation. *arXiv preprint arXiv:1603.06744*.
41. Loper, E., and Bird, S. (2002). NLTK: The Natural Language Toolkit. *arXiv preprint cs/0205028*.
42. McClurg, J., Hojjat, H., Černý, P., and Foster, N. (2015). Efficient Synthesis of Network Updates. *ACM SIGPLAN Notices*, 50(6), 196-207.
43. McClurg, J., Hojjat, H., Foster, N., and Černý, P. (2016). Event-Driven Network Programming. *ACM SIGPLAN Notices*, 51(6), 369-385.
44. McMillan, K. L., and Zuck, L. D. (2019). Formal Specification and Testing of QUIC. In *Proceedings of ACM SIGCOMM*.
45. McQuistin, S., Band, V., Jacob, D., and Perkins, C. (2020). Parsing Protocol Standards to Parse Standard Protocols. In *Proceedings of the Applied Networking Research Workshop* (ANRW '20) (pp. 25-31). Association for Computing Machinery.
46. Mills, D. (1988). Network Time Protocol (Version 1) Specification and Implementation. *RFC 1059*.
47. Monsanto, C., Reich, J., Foster, N., Rexford, J., and Walker, D. (2013). Composing Software Defined Networks. In *10th USENIX Symposium on Networked Systems Design and Implementation (NSDI 13)* (pp. 1-13). USENIX Association.
48. Nagaraj, K., Killian, C., and Neville, J. (2012). Structured Comparative Analysis of Systems Logs to Diagnose Performance Problems. In *Presented as part of the 9th USENIX Symposium on Networked Systems Design and Implementation (NSDI 12)* (pp. 353-366).
49. Osera, P.-M., and Zdancewic, S. (2015). Type-and-Example-Directed Program Synthesis. *ACM SIGPLAN Notices*, 50(6), 619-630.
50. Pedrosa, L., Fogel, A., Kothari, N., Govindan, R., Mahajan, R., and Millstein, T. (2015). Analyzing Protocol Implementations for Interoperability. In *12th USENIX Symposium on Networked Systems Design and Implementation (NSDI 15)* (pp. 485-498).
51. Peters, M. E., Neumann, M., Iyyer, M., Gardner, M., Clark, C., Lee, K., and Zettlemoyer, L. (2018). Deep Contextualized Word Representations. *arXiv preprint arXiv:1802.05365*.
52. Piterman, N., Pnueli, A., and Sa’ar, Y. (2006). Synthesis of Reactive (1) Designs. In *International Workshop on Verification, Model Checking, and Abstract Interpretation* (pp. 364-380). Springer.
53. Pnueli, A., and Rosner, R. (1989). On the Synthesis of a Reactive Module. In *Proceedings of the 16th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages* (pp. 179-190).
54. Postel, J. (1981). Internet Control Message Protocol. *RFC 792*.
55. Rabinovich, M., Stern, M., and Klein, D. (2017). Abstract Syntax Networks for Code Generation and Semantic Parsing. *arXiv preprint arXiv:1704.07535*.
56. Radford, A., Wu, J., Child, R., Luan, D., Amodei, D., and Sutskever, I. (2019). Language Models are Unsupervised Multitask Learners. *OpenAI Blog*, 1(8), 9.
57. Rayner, K., and Duffy, S. A. (1986). Lexical Complexity and Fixation Times in Reading: Effects of Word Frequency, Verb Complexity, and Lexical Ambiguity. *Memory & Cognition*, 14(3), 191-201.
58. RFC Editor. (n.d.). Retrieved from <http://www.rfc-editor.org/>.
59. Gueron, S., Langley, A., and Lloyd, Y. (2019). AES-GCM-SIV: Nonce Misuse-Resistant Authenticated Encryption. *RFC 8452*.
60. Sidhu, D., and Chung, A. (1990). A Formal Description Technique for Protocol Engineering. University of Maryland at College Park.
61. First SIP Interoperability Test Event. (2008). Retrieved from <https://www.cs.columbia.edu/sip/sipit/1/>.
62. Sipos, R., Fradkin, D., Moerchen, F., and Wang, Z. (2014). Log-Based Predictive Maintenance. In *Proceedings of the 20th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining* (pp. 1867-1876).
63. Srivastava, S., Gulwani, S., and Foster, J. S. (2010). From Program Verification to Program Synthesis. In *Proceedings of the 37th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages* (pp. 313-326).
64. Srivastava, S., Labutov, I., and Mitchell, T. (2017). Joint Concept Learning and Semantic Parsing from Natural Language Explanations. In *Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing* (pp. 1527-1536).
65. Steedman, M., and Baldridge, J. (2011). Combinatory Categorial Grammar. In *Non-Transformational Syntax: Formal and Explicit Models of Grammar* (pp. 181-224).
66. tcpdump & libpcap Public Repository. (2020). Retrieved from <https://www.tcpdump.org/>. Accessed: 2020-05-22.
67. Tellex, S., Kollar, T., Dickerson, S., Walter, M. R., Banerjee, A. G., Teller, S., and Roy, N. (2011). Understanding Natural Language Commands for Robotic Navigation and Mobile Manipulation. In *Twenty-fifth AAAI Conference on Artificial Intelligence*.
68. Thomson, M. (2019). Example Handshake Traces for TLS 1.3. *RFC 8448*.
69. Vaarandi, R. (2003). A Data Clustering Algorithm for Mining Patterns from Event Logs. In *Proceedings of the 3rd IEEE Workshop on IP Operations & Management (IPOM 2003)* (IEEE Cat. No. 03EX764) (pp. 119-126). IEEE.
70. von Bochmann, G. (1987). Methods and Tools for the Design and Validation of Protocol Specifications and Implementations. Université de Montréal, Département d’informatique et de recherche.
71. Wang, S. I., Liang, P., and Manning, C. D. (2016). Learning Language Games Through Interaction. *arXiv preprint arXiv:1606.02447*.
72. Wang, Z., Qin, Y., Zhou, W., Yan, J., Ye, Q., Neves, L., Liu, Z., and Ren, X. (2020). Learning from Explanations with Neural Execution Tree. In *International Conference on Learning Representations*.
73. White, M., and Rajkumar, R. (2008). A More Precise Analysis of Punctuation for Broad-Coverage Surface Realization with CCG. In *Coling 2008: Proceedings of the Workshop on Grammar Engineering Across Frameworks* (pp. 17-24).
74. Xu, W., Huang, L., Fox, A., Patterson, D., and Jordan, M. I. (2009). Detecting Large-Scale System Problems by Mining Console Logs. In *Proceedings of the ACM SIGOPS 22nd Symposium on Operating Systems Principles* (pp. 117-132).
75. Yang, Z., Dai, Z., Yang, Y., Carbonell, J., Salakhutdinov, R. R., and Le, Q. V. (2019). XLNet: Generalized Autoregressive Pretraining for Language Understanding. In *Advances in Neural Information Processing Systems* (pp. 5754-5764).
76. Yin, P., and Neubig, G. (2017). A Syntactic Neural Model for General-Purpose Code Generation. *arXiv preprint arXiv:1704.01696*.
77. Yin, P., and Neubig, G. (2017). A Syntactic Neural Model for General-Purpose Code Generation. In *Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)* (Vancouver, Canada, July 2017). Association for Computational Linguistics.
78. Yin, P., Zhou, C., He, J., and Neubig, G. (2018). StructVAE: Tree-Structured Latent Variable Models for Semi-Supervised Semantic Parsing. *arXiv preprint arXiv:1806.07832*.
79. Zhang, S., Ma, X., Duh, K., and Durme, B. V. (2019). AMR Parsing as Sequence-to-Graph Transduction. *ArXiv abs/1905.08704*.
80. Zhang, S., Ma, X., Duh, K., and Durme, B. V. (2019). Broad-Coverage Semantic Parsing as Transduction. In *EMNLP/IJCNLP*.

### 附录

#### A. ICMP测试场景设置

**目标不可达消息：**
在路由器/接收端，我们假设路由器只识别三个子网，分别是10.0.1.1/24、192.168.2.1/24 和 172.64.3.1/24。在发送端，我们构造一个目的IP地址不属于这三个子网的包。接收端读取该包并调用生成的函数来构建目标不可达消息返回给发送端。

**生存时间超时消息：**
在发送端，我们故意生成一个IP头中的生存时间字段设置为1且目的IP地址设置为服务器1地址的包。在路由器端，路由器检查生存时间字段的值，并发现该包在生存时间字段计数到零之前无法到达目的地。路由器接口调用生成的函数来构建生存时间超时消息并将其发送回客户端。

**参数问题消息：**
在路由器端，我们假设路由器只能处理类型服务值为零的IP包。在发送端，我们将发送的包修改为类型服务值为一。路由器接口识别出不支持的类型服务值，并调用生成的函数来构建参数问题消息返回给客户端。

**源抑制消息：**
在接收端，我们假设一个出站缓冲区已满，因此没有空间存储新的数据报。在发送端，我们生成一个发往服务器1的包。如果路由器还有缓冲区空间可以将包转发到服务器1所在的子网，则路由器应将包推送到与该子网相连的出站缓冲区。在这种情况下，路由器会决定丢弃接收到的包，并构建一个源抑制包返回给客户端。

**重定向消息：**
在发送端，客户端生成了一个发往同一子网内的IP地址但发送到路由器的包。路由器发现下一个网关与发送主机在同一子网内，因此通过调用生成的函数构建重定向消息并将重定向网关地址发送给客户端。

**回显和回显应答消息：**
在RFC 792中，回显和回显应答是同时解释的，但有些句子仅适用于回显，而有些句子仅适用于回显应答。经过分析，Sage生成了两段不同的代码。一段是针对发送端的，另一段是针对接收端的。客户端调用生成的函数向路由器接口发送回显消息。路由器接口发现它是目的地，并通过调用接收端代码构建回显应答消息返回给客户端。

**时间戳和时间戳应答消息：**
此场景下的发送方和接收方行为与回显/回显应答相同。发送方通过调用生成的函数发送一个包，接收方匹配ICMP类型并通过生成的函数回复包。不同之处在于生成的包的内容。时间戳或时间戳应答消息没有数据报数据，但在其头部有三个不同的时间戳字段。生成的函数正确地根据角色和计算时间分离了这三个不同的时间戳。

**信息请求和应答消息：**
此场景下的发送方和接收方行为与回显/回显应答和时间戳/时间戳应答相同。类似于时间戳/时间戳应答，不同之处在于生成的包没有数据；字段值不同。

#### B. CCG解析示例

我们展示一个更复杂的例子，从句子“为了计算校验和，校验和应该为零”中导出一个最终逻辑形式（见图7）。首先，句子中的每个词都被映射到其词汇条目（例如，checksum → NP: "checksum"）。一个词可能有多个词汇条目；在这种情况下，我们尝试使用每个条目来解析整个句子。这一步之后，CCG解析算法自动应用组合规则并为整个句子导出最终的逻辑形式。

![](Figure_7.png)

1. For computing the checksum, the checksum should be zero.
2. For$For
3. computing$Computethe$The
4. checksum“checksum”$Punctuate,
5. thechecksum“checksum”
6. shouldbe$Iszero.“0”

希望这些优化能帮助您更好地组织和呈现您的文献列表。