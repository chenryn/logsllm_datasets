### Optimizing the Performance of SENG with LibOS Primitives

Leveraging existing and upcoming LibOS primitives, such as Occlum [53], can significantly enhance SENG’s performance for complex applications like NGINX. In the following section, we focus on addressing the memory bottleneck (ii).

SGX currently restricts EPC memory to 128 MB, with only about 90 MB being usable by applications, and does not support memory sharing across enclaves. Running multiple enclaves in parallel thus puts significant stress on memory, leading to expensive paging operations. We propose several strategies to mitigate this issue in SENG:

1. **Dynamic Memory Management**: Recent Intel CPUs now support dynamic memory management for SGX [39], which reduces memory pressure through lazy loading and page unloading. Studies on library debloating [46, 47] have shown that applications often use only a small fraction of the loaded code, including libraries. Tools like RAZOR [46] can trim over 70% of bloated binaries. With widespread dynamic paging support, SENG can integrate compiler- and loader-based schemes into the LibOS to reduce the enclave footprint.

2. **Shared Enclaves**: SENG could adopt the approach of Panoply [55] by splitting the SENG runtime library and other shared libraries into separate SGX enclaves. These enclaves can be shared by all shielded applications and used for attested RPC calls.

3. **Single Enclave Multitasking**: Upcoming LibOSes like Occlum [53] use hardware isolation mechanisms along with software-based fault isolation to run multiple processes securely and efficiently within a single enclave. By integrating SENG inside Occlum rather than Graphene-SGX, multiple shielded applications with the same privileges could directly share common libraries inside SGX.

While the current memory limitations of SGX pose a significant challenge for LibOSes and SENG, these mid-term and long-term strategies offer promising directions for improvement.

### Frequent Measurement Updates

Any change to an application will also cause a change in the enclave report and identity. Alternative designs limit the number of updates by including only a loader in the measurement [5]. However, our approach roots the application identity directly in the hardware, allowing us to specify app-grained policies based on the exact application identity without the need for additional, potentially vulnerable, software-based authentication schemes. As discussed in Section 5.4, integrating measurement updates into today’s continuous build chains is practical. Additionally, SENG is flexible enough to group multiple application versions into shared enclave IP subnetworks. Future work may explore the use of shared "library enclaves" ("micron" in Panoply [55]) to compartmentalize enclaves while maintaining hardware-based identification.

### Other TEEs and Improvements

Although our current design uses SGX, it relies on common properties of other TEEs, such as trusted execution and remote attestation. Therefore, SENG can likely be adapted to other TEEs [6, 30]. We chose SGX because it is widely available on commodity systems and poses challenges due to its restriction to user-space code.

### Prototype Limitations

Our current prototype does not yet support all system calls, particularly `fork` and `exec`, which could be extended as in other LibOSes [9, 55]. Furthermore, we have not yet integrated a database.

### Conclusion

Network administrators have lost control over which client applications communicate in their sensitive networks. The inability to centrally, precisely, and reliably govern network accesses frequently results in data exfiltration by malware or exploitation attempts against vulnerable client software. Existing solutions, such as anti-virus, malware sandboxes, and IDS, are susceptible to evasion. SENG’s ability to specify app-grained policies enables fine-grained and application-aware traffic control. Moreover, SENG provides strong security guarantees rooted in hardware, even withstanding system-level attackers. SENG thus addresses a long-standing need since the introduction of firewalls: per-app attribution of network traffic.

### Artifacts

The SENG prototype is available as an open-source project at https://github.com/sengsgx/sengsgx.

### Acknowledgments

We thank our anonymous paper and artifact reviewers and our shepherd Adrian Perrig for their valuable feedback. We also thank Cas Cremers for his feedback on the initial SENG design and Giorgi Maisuradze for his review of the paper draft.

---

**References**

[1] A. Ahmad, K. Kim, M. I. Sarfaraz, and B. Lee. OBLIVIATE: A data oblivious filesystem for Intel SGX. In Network and Distributed System Security Symposium (NDSS), 2018.

[2] S. Arnautov, B. Trach, F. Gregor, T. Knauth, A. Martin, C. Priebe, J. Lind, D. Muthukumaran, D. O’Keeffe, M. L. Stillwell, D. Goltzsche, D. Eyers, R. Kapitza, P. Pietzuch, and C. Fetzer. SCONE: Secure Linux containers with Intel SGX. In USENIX Symposium on Operating Systems Design and Implementation (OSDI), 2016.

[3] D. E. Asoni, T. Sasaki, and A. Perrig. Alcatraz: Data Exfiltration-Resilient Corporate Network Architecture. In International Conference on Collaboration and Internet Computing (CIC), 2018.

[4] T. Barabosch and E. Gerhards-Padilla. Host-based code injection attacks: A popular technique used by malware. Proceedings of IEEE International Conference on Malicious and Unwanted Software (MALCON), 2014.

[5] A. Baumann, M. Peinado, and G. Hunt. Shielding Applications from an Untrusted Cloud with Haven. In USENIX Symposium on Operating Systems Design and Implementation (OSDI’14).

[6] F. Brasser, D. Gens, P. Jauernig, A.-R. Sadeghi, and E. Stapf. SANCTUARY: ARMing TrustZone with User-space Enclaves. In Network and Distributed System Security Symposium (NDSS), 2019.

[7] S. Brenner, C. Wulf, D. Goltzsche, N. Weichbrodt, M. Lorenz, C. Fetzer, P. Pietzuch, and R. Kapitza. SecureKeeper: Confidential ZooKeeper Using Intel SGX. In Middleware Conference (Middleware), 2016.

[8] S. Cabuk, C. E. Brodley, and C. Shields. IP Covert Timing Channels: Design and Detection. In Conference on Computer and Communications Security (CCS), 2004.

[9] C. che Tsai, D. E. Porter, and M. Vij. Graphene-SGX: A Practical Library OS for Unmodified Applications on SGX. In USENIX Annual Technical Conference (USENIX ATC), 2017.

[10] S. Checkoway and H. Shacham. Iago Attacks: Why the System Call API is a Bad Untrusted RPC Interface. In Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2013.

[11] Cisco. NVM. https://www.cisco.com/c/dam/global/en_au/assets/pdf/anyconnect-network-visibility.pdf.

[12] The CLIP OS Project, 2020. https://clip-os.org/en/.

[13] V. Costan and S. Devadas. Intel SGX Explained. IACR Cryptology ePrint Archive, 2016:86, 2016.

[14] Docker networking. https://docs.docker.com/network/.

[15] J. A. Donenfeld. WireGuard: Next Generation Kernel Network Tunnel. In Network and Distributed System Security Symposium (NDSS), 2017.

[16] H. Duan, C. Wang, X. Yuan, Y. Zhou, Q. Wang, and K. Ren. LightBox: Full-Stack Protected Stateful Middlebox at Lightning Speed. In Conference on Computer and Communications Security (CCS), 2019.

[17] S. Eskandarian, J. Cogan, S. Birnbaum, P. C. W. Brandon, D. Franke, F. Fraser, G. G. Jr., E. Gong, H. T. Nguyen, T. K. Sethi, V. Subbiah, M. Backes, G. Pellegrino, and D. Boneh. Fidelius: Protecting User Secrets from Compromised Browsers. In IEEE Symposium on Security and Privacy (SP), 2019.

[18] FireEye. M-Trends 2019. https://content.fireeye.com/m-trends/rpt-m-trends-2019.

[19] FireMon’s State of the Firewall, 2019. https://www.firemon.com/2019-state-of-the-firewall-report/.

[20] S. Gallenmüller, D. Schöffmann, D. Scholz, F. Geyer, and G. Carle. DTLS Performance - How Expensive is Security? 2019. https://arxiv.org/pdf/1904.11423.pdf.

[21] C. Gkantsidis, T. Karagiannis, D. Naylor, R. Li, and P. Steenkiste. And Then There Were More: Secure Communication for More Than Two Parties. Technical Report MSR-TR-2017-24, July 2017.

[22] D. Goltzsche, S. Rüsch, M. Nieke, S. Vaucher, N. Weichbrodt, V. Schiavoni, P. Aublin, P. Cosa, C. Fetzer, P. Felber, P. Pietzuch, and R. Kapitza. EndBox: Scalable Middlebox Functions Using Client-Side Trusted Execution. In IEEE/IFIP Conference on Dependable Systems and Networks (DSN), 2018.

[23] D. Goltzsche, C. Wulf, D. Muthukumaran, K. Rieck, P. R. Pietzuch, and R. Kapitza. TrustJS: Trusted Client-side Execution of JavaScript. In Workshop on Systems Security (EuroSec’17).

[24] A. Houmansadr, C. Brubaker, and V. Shmatikov. The Parrot Is Dead: Observing Unobservable Network Communications. In IEEE Symposium on Security and Privacy (SP), 2013.

[25] Intel. SGX SDK. https://software.intel.com/sgx/sdk.

[26] iPerf3. https://iperf.fr/.

[27] iptables Application level fire-walling, 2005. debian-administration.org/article/120/Application_level_fire-walling.

[28] T. Jaeger, D. H. King, K. R. Butler, S. Hallyn, J. Latten, and X. Zhang. Leveraging IPsec for Mandatory Per-Packet Access Control. In 2006 Securecomm and Workshops.

[29] Y. Jang. Building trust in the user I/O in computer systems. PhD thesis, 2017.

[30] Keystone Enclave, 2019. https://keystone-enclave.org/.

[31] S. Kim, J. Han, J. Ha, T. Kim, and D. Han. Enhancing Security and Privacy of Tor’s Ecosystem by Using Trusted Execution Environments. In USENIX Symposium on Networked Systems Design and Implementation (NSDI), 2017.

[32] T. Knauth, M. Steiner, S. Chakrabarti, L. Lei, C. Xing, and M. Vij. Integrating Remote Attestation with Transport Layer Security. CoRR, abs/1801.05863, 2018.

[33] D. Kuvaiskii. Add exitless system calls (pr 405). https://github.com/oscarlab/graphene/pull/405.

[34] R. Lal and P. Pappachan. An architecture methodology for secure video conferencing. Conference on Technologies for Homeland Security (HST), 2013.

[35] S. Lee, M.-W. Shih, P. Gera, T. Kim, H. Kim, and M. Peinado. Inferring Fine-grained Control Flow Inside SGX Enclaves with Branch Shadowing. In USENIX Security Symposium, 2017.

[36] libuv. https://libuv.org/.

[37] J. Lind, C. Priebe, D. Muthukumaran, D. O’Keeffe, P.-L. Aublin, F. Kelbert, T. Reiher, D. Goltzsche, D. Eyers, R. Kapitza, C. Fetzer, and P. Pietzuch. Glamdring: Automatic Application Partitioning for Intel SGX. In USENIX Annual Technical Conference (USENIX ATC), 2017.

[38] lwIP. https://savannah.nongnu.org/projects/lwip/.

[39] F. McKeen, I. Alexandrovich, I. Anati, D. Caspi, S. Johnson, R. Leslie-Hurd, and C. Rozas. Intel SGX Support for Dynamic Memory Management Inside an Enclave. In Hardware and Architectural Support for Security and Privacy (HASP), 2016.

[40] netfilter, 2019. https://www.netfilter.org/.

[41] O. Oleksenko, B. Trach, R. Krahn, M. Silberstein, and C. Fetzer. Varys: Protecting SGX Enclaves from Practical Side-Channel Attacks. In USENIX Annual Technical Conference (USENIX ATC), 2018.

[42] M. Orenbach, P. Lifshits, M. Minkin, and M. Silberstein. Eleos: ExitLess OS Services for SGX Enclaves. In European Conference on Computer Systems (EuroSys). ACM, 2017.

[43] B. Parno, Z. Zhou, and A. Perrig. Using Trustworthy Host-based Information in the Network. In Workshop on Scalable Trusted Computing (STC). ACM, 2012.

[44] S. Pinto and N. Santos. Demystifying Arm TrustZone: A Comprehensive Survey. ACM Comput. Surv., 51(6), Jan. 2019.

[45] R. Poddar, C. Lan, R. A. Popa, and S. Ratnasamy. SafeBricks: Shielding Network Functions in the Cloud. In Symposium on Networked Systems Design and Implementation (NSDI), 2018.

[46] C. Qian, H. Hu, M. Alharthi, P. H. Chung, T. Kim, and W. Lee. RAZOR: A Framework for Post-deployment Software Debloating. In USENIX Security Symposium, 2019.

[47] A. Quach, A. Prakash, and L. Yan. Debloating Software through Piece-Wise Compilation and Loading. In USENIX Security Symposium, 2018.

[48] The Qubes OS Project, 2020. https://www.qubes-os.org/.

[49] S. Sasy, S. Gorbunov, and C. W. Fletcher. ZeroTrace: Oblivious Memory Primitives from Intel SGX. In Network and Distributed System Security Symposium (NDSS), 2018.

[50] V. Scarlata, S. Johnson, J. Beaney, and P. Zmijewski. Supporting Third Party Attestation for Intel SGX with Intel Data Center Attestation Primitives, 2018.

[51] SELinux, 2019. http://selinuxproject.org/page/NB_LSM.

[52] shadowsocks. https://shadowsocks.org/en/index.html.

[53] Y. Shen, H. Tian, Y. Chen, K. Chen, R. Wang, Y. Xu, and Y. Xia. Occlum: Secure and Efficient Multitasking Inside a Single Enclave of Intel SGX. In Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS). ACM, 2020.

[54] M.-W. Shih, S. Lee, T. Kim, and M. Peinado. T-SGX: Eradicating Controlled-Channel Attacks Against Enclave Programs. In Network and Distributed System Security Symposium, 2017.

[55] S. Shinde, D. L. Tien, S. Tople, and P. Saxena. Panoply: Low-TCB Linux Applications With SGX Enclaves. In Network and Distributed System Security Symposium (NDSS), 2017.

[56] Smack (LSM), 2019. http://schaufler-ca.com/.

[57] B. Trach, A. Krohmer, F. Gregor, S. Arnautov, P. Bhatotia, and C. Fetzer. ShieldBox: Secure Middleboxes Using Shielded Execution. In Symposium on SDN Research (SOSR’18). ACM.

[58] W. Wang, G. Chen, X. Pan, Y. Zhang, X. Wang, V. Bindschaedler, H. Tang, and C. A. Gunter. Leaky Cauldron on the Dark Land: Understanding Memory Side-Channel Hazards in SGX. In Conference on Computer and Communications Security (CCS), 2017.

[59] Y. Xiao, M. Li, S. Chen, and Y. Zhang. STACCO: Differentially Analyzing Side-Channel Traces for Detecting SSL/TLS Vulnerabilities in Secure Enclaves. In Conference on Computer and Communications Security (CCS), 2017.

[60] J. Xing, A. Morrison, and A. Chen. NetWarden: Mitigating Network Covert Channels without Performance Loss. In Workshop on Hot Topics in Cloud Computing (HotCloud), 2019.

[61] D. Zhuo, K. Zhang, Y. Zhu, H. H. Liu, M. Rockett, A. Krishnamurthy, and T. Anderson. Slim: OS kernel support for a low-overhead container overlay network. In USENIX Symposium on Networked Systems Design and Implementation (NSDI), 2019.