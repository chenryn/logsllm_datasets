### Execution Authentication Mechanism for Different Values of M

**Abstract:**
This document presents an execution authentication mechanism designed to validate the remote execution of programs. The mechanism uses dynamic checkpoint selection and control flow signatures to ensure that the execution is authentic. We evaluate the performance overhead of this mechanism using the SPEC CPU2006 benchmarks and explore ways to optimize it.

**1. Introduction:**
We applied our approach to authenticate the remote execution of the well-known SPEC CPU2006 benchmarks [SPEC 06]. The results presented here do not show the complete set of benchmarks for brevity; instead, we have selected a few benchmarks whose behavior is representative.

**2. Methodology:**
- **Signature Components:** The prototype implementation uses the following signature components:
  - Addresses of the four most recently executed branches
  - Selected general register values
  - Stall cycle count
  - ID of the most recent system call

- **Evaluation Setup:**
  - Each benchmark was run 5 times.
  - The harmonic mean of the five runs was used to report the execution times.
  - Our compute server and authentication server are identical, each equipped with a 2.4 GHz Intel Core Duo processor and 2 GB of RAM, connected via a 100 Gbps switched Ethernet.

**3. Results:**

**Figure 2.** Percentage increase in execution time with the use of our remote authentication mechanism against the base case (normal execution).

For the results shown in Figure 2, the value of N, the threshold count for disabling signature checking at a specific checkpoint, was set at 1000. If a checkpoint was encountered 1000 times, signature checking was temporarily disabled at this checkpoint for the following M executed instructions. The values of M used ranged from 100,000 (1E5) to 109 (1E9).

- **Observations:**
  - For some benchmarks, increasing M reduces the overhead for execution authentication.
  - For benchmarks like gobmk and soplex, increasing M has little effect on the overhead due to fewer instructions between checkpoints and small average basic block sizes, resulting in high authentication overhead.
  - To reduce the execution overhead, overlapping signature transmission and verification with execution and using different values for M and N can be effective.
  - Another approach is to use the notion of superblocks [Hwu+ 93] or dominator blocks to reduce the number of checkpoints while retaining a high degree of coverage of the expected control flow paths.
  - M and N need to be tuned independently for each benchmark and possibly for each checkpoint.

**Table I.** Absolute run times, the number of traps (calls) made to `sys_checkpoint`, and the percentage increase in execution time with the proposed authentication mechanism enabled for N=1000 and different values of M.

**Figure 3.** Run times (in seconds) of benchmarks with and without execution authentication. Optimized authentication configurations from Table 1 are used.

**4. Discussion:**
- **Overlapping Execution and Verification:** Overlapping execution and control flow signature verification can reduce the overhead of authenticating execution. We are currently implementing optimizations to further reduce this overhead.
- **DARE Framework Advantages:**
  - **Generic Customization:** DARE is a generic framework that can be customized to use a variety of signatures, permit users to take optional actions, and change the frequency of challenges and responses dynamically.
  - **Automated Checkpoint Generation:** Unlike other approaches, DARE can generate a set of checkpoints into a pool of checkpoint addresses automatically.
  - **Dynamic Checkpoint Selection and Trapping:** This allows us to overcome fundamental security holes in existing solutions.
  - **Secure Control Flow Signatures:** DARE uses control flow-specific properties to generate the signature of execution at each checkpoint, preventing attacks like guessing the signature.
  - **Localized Performance Impact:** DARE affects only the target process/monitored code, unlike globally intrusive mechanisms.
  - **Transparency:** DARE is fully transparent to both the user and the programmer, who does not need to decide on the checkpoint list or function calls for monitoring.

**5. Conclusions:**
This paper proposes a generic framework with a new approach for validating the remote execution of a program. DARE uses dynamic checkpoint selection and dynamic generation of signatures based on the control flow path and side effects of execution. We described the implementation of a prototype system in Linux and proposed a technique for reducing the overhead of execution authentication by temporarily disabling signature generation at heavily encountered checkpoints.

**Acknowledgements:**
This work is supported in part by the NSF (Award Nos. CNS 0454298) and by the Center of Computing Technologies at SUNY-Binghamton.

**References:**
- [AMD 05] Advanced Micro Devices, Secure Virtual Machine Architecture Reference Manual, 2005.
- [Ba 02] Bill Arbaugh, "Improving the TCPA Specification," Computer, vol. 35, no. 8, pp. 77-79, Aug., 2002.
- [BOY 03a] Mario Baldi, Yoram Ofek, Moti Yung, “The TrustedFlow Protocol: Idiosyncratic Signatures for Authenticated Execution,” in Proc. IEEE Workshop on Information Assurance, 2003.
- [BOY 03b] Mario Baldi, Yoram Ofek, Moti Yung, “Idiosyncratic Signatures for Authenticated Execution, The TrustedFlow, Protocol and its Application to TCP,” in Proc. Sym. on Comm. Systems and Networks (CSN), 2003.
- [CM 05] Simon P. Chung, Aloysius K. Mok, "On Random-Inspection-Based Intrusion Detection," in Proc. of the 8-th Int’l Symp. on Recent Advances in Intrusion Detection (RAID 2005).
- [HFS 98] Steven A. Hofmeyr, Stephanie Forrest, Anil Somayaji, “Intrusion Detection using Sequences of System Calls,” Journal of Computer Security, Vol. 6, No. 3, 1998.
- [Hwu+ 93] W. Hwu et al, “The Superblock: An Effective Technique for VLIW and Superscalar Compilation,” The Jrnl of Supercomputing, 1993, pp. 229-248.
- [Int 04] Intel Corpn., Trusted Platform Module (TPM): Quick Reference Guide, 2004.
- [Int 07] Intel Corporation, Model-specific registers and functions. Available at: http://www.intel.com/design/intarch/techinfo/Pentium/mdelregs.htm, 2007.
- [Int 08] Intel Corporation, Intel® 64 and IA-32 Architectures Software Developer’s Manual, Available at: http://www.intel.com/products/processor/manuals/.
- [Ka 07] Kauer, B., "OSLO: Improving the Security of Trusted Computing," in Proc. of the 16th USENIX Security Symposium, 2007.
- [KJ 03] Rick Kennell and Leah H. Jamieson, “Establishing the genuinity of remote computer systems,” in Proc. 12th USENIX Security Symposium, USENIX Association, 2003.
- [MPP+ 07] Jonathan M. McCune, Bryan Parno, Adrian Perrig, Michael K. Reiter, Hiroshi Isozaki, Flicker: An Execution Infrastructure for TCB Minimization, in Proc. EuroSys, 2008.
- [MPPRS 07] Jonathan M. McCune, Bryan Parno, Adrian Perrig, Michael K. Reiter, Arvind Seshadri, Minimal TCB Code Execution, in Proc. IEEE Symposium on Security and Privacy, 2007.
- [MWR 99] F. Monrose, P. Wyckoff, and A. Rubin, “Distributed Execution with Remote audit,” in Proc. of ISOC Network and Distributed System Security Symposium (NDSS 99), Feb. 1999.
- [SLQP 07] Arvind Seshadri, Mark Luk, Ning Qu, Adrian Perrig, SecVisor: A Tiny Hypervisor to Provide Lifetime Kernel Code Integrity for Commodity OSes, Symposium on Operating Systems Principles, 2007.
- [SPD 04] Arvind Seshadri, Adrian Perrig, Leendert van Doorn, “Using Software Based Attestation for Verifying Embedded Systems in Cars,” in Proc. Embedded Security in Cars Conference (ESCAR), 2004.
- [SPD 05] Elaine Shi, Adrian Perrig, Leendert Van Doorn, “BIND: A Fine-grained Attestation Service for Secure Distributed Systems,” Proc. of the IEEE Symposium on Security and Privacy, 2005.
- [SLS+ 05] Arvind Seshadri, Mark Luk, Elaine Shi, Adrian Perrig, Leendert van Doorn, Pradeep Khosla, “Pioneer: Verifying Code Integrity and Enforcing Untampered Code Execution on Legacy Systems,” ACM Symposium on Operating Systems Principles, 2005.
- [SPEC 06] Standard Performance Evaluation Corporation. SPEC CPU2000 benchmark suite, 2000.
- [Tri 07] Tripwire product pages at: http://www.tripwire.com/products/enterprise/ost/, 2007.
- [TCG 07] Home page of the Trusted Computing Group at: http://www.tcg.org.
- [UCT 04] Umesh Shankar, Monica Chew, J. D. Tygar. “Side effects are not sufficient to authenticate software,” in Proc. 13th USENIX Security Symposium, 2004.
- [XDC 04] Haizhi Xu, Wenliang Du, and Steve J. Chapin, “Context Sensitive Anomaly Monitoring of Process Control Flow to Detect Mimicry Attacks and Impossible Paths,” in Proc. 7-th Int’l. Symp. on Recent Advances in Intrusion Detection, 2004 (RAID 2004).