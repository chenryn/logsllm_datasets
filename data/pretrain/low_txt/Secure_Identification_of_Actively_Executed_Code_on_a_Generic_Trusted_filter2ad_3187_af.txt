# Performance Model Validation and Efficiency Condition

## Figure 11: Validation of the Performance Model
- **Trend Line Slope**: The slope of the trend line in Figure 11 represents the \( \frac{t_1}{k} \) constant in the efficiency condition.
- **Code Base Size (\(|C|\))**: The size of the entire code base.
- **Execution Flow Size (\(|E|\))**: The size of the code in an execution flow.

### Efficiency Condition
- **Definition**: The efficiency condition is defined as:
  \[
  \frac{k|C| + t_1}{k|E| + n t_1} > 1 \quad \Rightarrow \quad \frac{|C| - |E|}{n - 1} > \frac{t_1}{k}
  \]
  where \( k \) is a constant, \( t_1 \) is the time for a single operation, and \( n \) is the number of operations.

- **Interpretation**:
  - A positive efficiency ratio indicates that it is more efficient to protect only the active code in the execution flow.
  - A negative efficiency ratio suggests that it is better to protect the entire code base.

- **Dependence on Code Sizes**: The efficiency ratio depends on both the size of the code base (\(|C|\)) and the size of the execution flow (\(|E|\)). However, the efficiency condition itself depends only on their difference, along with \( n \) and \( \frac{t_1}{k} \).

### Experimental Validation
- **Experiment Setup**: We validated the model using different sets of PALs (Protected Active Layers) with cardinality ranging from 2 to 16. For each set, we varied the aggregated size (\(|E|\)) of the executed code.
- **Empirical Check**: The maximum aggregated size for each set, for which the fvTE protocol is faster than the traditional monolithic approach, was empirically measured. This corresponds to the empirical check in Figure 11.
- **Trend Line**: The trend of these empirical measurements is well approximated by a straight line, dividing the plane into two areas: one where the efficiency condition is false (shaded area) and another where it is true. The slope of this line represents the constant \( \frac{t_1}{k} \).

### Discussion
- **Constant \( \frac{t_1}{k} \)**: This constant is highly dependent on the Trusted Computing Component (TCC). In our experiments, it depends on the hardware platform and the software (XMHF/TrustVisor) providing trusted computing services.
- **Future Technologies**: Future technologies like Intel SGX are expected to significantly reduce both \( t_1 \) and \( k \). However, predicting the exact trend without running experiments on a real platform is challenging due to the dependency on the supporting software.

## Related Work

### Code Identity and Trusted Executions
- **Code Identity**: Originally defined as the digest of a program's code [30], code identity has been used in trusted hardware-based code executions [17, 18] for sealed storage and attestation.
- **Current Platforms**: Platforms such as AEGIS [41], Intel TXT [24], Intel SGX [25], OASIS [36], and TrustLite [28] allow code identification before execution by hashing its content.
- **Monolithic Applications**: Tools like Flicker [33], TrustVisor [32], and Haven [10] execute monolithic applications whose identity can be verified remotely.
- **Our Approach**: We do not change the definition of code identity (i.e., the hash of the binary). Instead, we propose that the client can make trust inferences by building a robust chain of trust through the modules of a large code base, verifying only part of the chain to infer the correct execution of the whole code base.

### OASIS
- **Merkle Tree**: OASIS [36] proposes to handle applications larger than the cache by building a Merkle tree over code blocks. However, it requires new hardware support and does not provide a general solution for existing trusted computing components.
- **Integration with Our Protocol**: Our protocol could leverage OASIS by implementing our TCC abstraction (Section III) and, with minimal modifications, include our novel secure storage construction (Section IV-D).

### BIND Service
- **Fine-Grained Attestation**: The BIND service [38] leverages fine-grained code attestation to secure distributed systems, targeting small pieces of code.
- **Comparison**: Our protocol provides execution integrity guarantees for large code bases and addresses verification efficiency and loop issues. Additionally, BIND’s security kernel was not implemented [33].

### On-board Credential (ObC) Project
- **Open Architecture**: The ObC Project [16, 29, 12] defines an open architecture based on secure hardware for the installation and execution of credential mechanisms on constrained devices.
- **Credential Programs**: These programs are executed slice-wise in a secure environment, possibly using the TPM’s late launch mechanism. The chain of trust among slices is based on the slice endorsement token.
- **Our Approach**: In our case, the chain is explicit in each PAL through a reference to the previous/next PAL’s identity, requiring only an offline setup. Access to secured data is controlled through the trusted component, allowing secure data exchange among PALs pairwise.

### Defining Code Modules
- **Programming Language Problem**: Making modules/partitions out of programs is a well-studied problem in the context of privilege separation [27], parallel program execution [19, 48], and secure distributed computation [49].
- **Implementation**: For our SQLite-based prototype (Section V-C), we used static and dynamic program analysis to distinguish non-active code and remove it, followed by extensive testing to ensure the correctness of the resulting active code.

## Conclusions
In this paper, we have shown that current trends in Trusted Computing create a trade-off between security and efficiency due to code identity assignment. We presented a general protocol that enables efficiently verifiable (at the client) and flexible (at the UTP) trusted executions of arbitrarily sized code bases by identifying only the actively executed code. We successfully applied our protocol to a real-world database engine, showing positive results even with a 1MB code base.

## Acknowledgments
We thank the anonymous reviewers for their valuable comments. This work was partially supported by the EC through project H2020-643964 (SUPERCLOUD), by national funds of Fundação para a Ciência e a Tecnologia (FCT) through project UID/CEC/00408/2013 (LaSIGE), and by the research grant SFRH/BD/51562/2011.

## References
[1] “Exploit-DB,” http://www.exploit-db.com/.
[2] “Open Sourced Vulnerability Database,” http://www.osvdb.org/.
[3] “SQLite Deployments,” http://sqlite.org/mostdeployed.html.
[4] “SQLite in Android,” http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html.
[5] “SQLite in iCloud,” https://developer.apple.com/library/ios/documentation/DataManagement/Conceptual/UsingCoreDataWithiCloudPG/UsingSQLiteStoragewithiCloud/UsingSQLiteStoragewithiCloud.html.
[6] Amazon, “AWS CloudHSM, Secure Key Storage and Cryptographic Operations,” http://aws.amazon.com/cloudhsm.
[7] I. Anati and S. Gueron, “Innovative technology for CPU-based attestation and sealing,” in Proceedings of the 2nd Workshop on Hardware and Architectural Support for Security and Privacy (HASP), 2013.
[8] A. M. Azab, P. Ning, and X. Zhang, “SICE: a hardware-level strongly isolated computing environment for x86 multi-core platforms,” in Proceedings of the 18th Conference on Computer and Communications Security (CCS), 2011, pp. 375–388.
[9] S. Bajaj and R. Sion, “TrustedDB,” in Proceedings of the International Conference on Management of Data (SIGMOD), 2011, pp. 205–216.
[10] A. Baumann, M. Peinado, and G. Hunt, “Shielding applications from an untrusted cloud with Haven,” in Proceedings of the 11th USENIX conference on Operating Systems Design and Implementation (OSDI), oct 2014, pp. 267–283.
[11] S. Bratus, N. D’Cunha, E. Sparks, and S. W. Smith, “Trusted Computing - Challenges and Applications,” in Proceedings of the 1st international conference on Trusted Computing and Trust in Information Technologies (TRUST), vol. 4968, 2008, pp. 14–32.
[12] S. Bugiel and J.-E. Ekberg, “Implementing an application-specific credential platform using late-launched mobile trusted module,” in Proceedings of the 5th ACM workshop on Scalable trusted computing (STC), 2010, p. 21.
[13] B. Chen and R. Morris, “Certifying program execution with secure processors,” in Proceedings of the 9th conference on Hot Topics in Operating Systems (HOTOS), may 2003, p. 23.
[14] C. J. Cremers, “The Scyther Tool: Verification, Falsification, and Analysis of Security Protocols,” in Proceedings of the 20th international conference on Computer Aided Verification (CAV), vol. 5123, Berlin, Heidelberg, jul 2008, pp. 414–418.
[15] ——, “Unbounded verification, falsification, and characterization of security protocols by pattern refinement,” in Proceedings of the 15th conference on Computer and Communications Security (CCS), oct 2008, p. 119.
[16] J.-E. Ekberg, N. Asokan, K. Kostiainen, and A. Rantala, “Scheduling execution of credentials in constrained secure environments,” in Proceedings of the Workshop on Scalable Trusted Computing (STC), 2008.
[17] P. England, B. Lampson, J. Manferdelli, M. Peinado, and B. Willman, “A Trusted Open Platform,” Computer, vol. 36, no. 7, pp. 55–62, 2003.
[18] P. England and M. Peinado, “Authenticated Operation of Open Computing Devices,” in Proceedings of the 7th Australian Conference on Information Security and Privacy (ACISP), jul 2002, pp. 346–361.
[19] M. Girkar and C. Polychronopoulos, “Partitioning programs for parallel execution,” in Proceedings of the 2nd Int. Conference on Supercomputing (ICS), 1988, pp. 216–229.
[20] D. Grawrock, Dynamics of a Trusted Platform: A Building Block Approach. Intel Press, apr 2009.
[21] L. Gu, X. Ding, R. H. Deng, B. Xie, and H. Mei, “Remote attestation on program execution,” in Proceedings of the 3rd ACM workshop on Scalable Trusted Computing (STC), 2008, pp. 11–20.
[22] C. Hawblitzel, J. Howell, J. R. Lorch, A. Narayan, B. Parno, D. Zhang, and B. Zill, “Ironclad apps: end-to-end security via automated full-system verification,” in Proc. of the 11th USENIX conference on Operating Systems Design and Implementation (OSDI), oct 2014, pp. 165–181.
[23] O. S. Hofmann, S. Kim, A. M. Dunn, M. Z. Lee, and E. Witchel, “InkTag,” ACM SIGPLAN Notices, vol. 48, no. 4, p. 265, apr 2013.
[24] Intel, “Intel Trusted Execution Technology,” http://www.intel.com/content/dam/www/public/us/en/documents/guides/intel-txt-software-development-guide.pdf.
[25] ——, “Software Guard Extensions,” https://software.intel.com/sites/default/files/managed/48/88/329298-002.pdf.
[26] B. Kauer, “OSLO: improving the security of trusted computing,” in Proceedings of 16th USENIX Security Symposium, aug 2007, p. 16.
[27] D. Kilpatrick, “Privman: A library for partitioning applications,” in the USENIX Annual Technical Conference (Freenix Proceedings of track), 2003.
[28] P. Koeberl, S. Schulz, A.-R. Sadeghi, and V. Varadharajan, “TrustLite,” in Proceedings of the 9th European Conference on Computer Systems (EuroSys), 2014, pp. 1–14.
[29] K. Kostiainen, J.-E. Ekberg, N. Asokan, and A. Rantala, “On-board credentials with open provisioning,” in Proceedings of the 4th International Symposium on Information, Computer, and Communications Security (ASIACCS), 2009, p. 104.
[30] B. Lampson, M. Abadi, M. Burrows, and E. Wobber, “Authentication theory and practice,” ACM Transactions on Computer Systems (TOCS), vol. 10, no. 4, pp. 265–310, nov 1992.
[31] Y. Li, J. McCune, J. Newsome, A. Perrig, B. Baker, and W. Drewry, “MiniBox: a two-way sandbox for x86 native code,” in Proc. of the USENIX Annual Technical Conference (ATC), jun 2014, pp. 409–420.
[32] J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor, and A. Perrig, “TrustVisor: Efficient TCB Reduction and Attestation.” in Proc. of the IEEE Symposium on Security and Privacy (S&P), 2010, pp. 143–158.
[33] J. M. McCune, B. Parno, A. Perrig, M. K. Reiter, and H. Isozaki, “Flicker: An Execution Infrastructure for TCB Minimization,” in Proceedings of the European Conference in Computer Systems (EuroSys), vol. 42, no. 4, 2008, pp. 315–328.
[34] F. McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas, H. Shafi, V. Shanbhogue, and U. R. Savagaonkar, “Innovative instructions and software model for isolated execution,” in Proceedings of the 2nd Workshop on Hardware and Architectural Support for Security and Privacy (HASP), 2013, pp. 1–1.
[35] Microsoft, “BitLocker,” http://windows.microsoft.com/en-us/windows7/products/features/bitlocker.
[36] E. Owusu, J. Guajardo, J. McCune, J. Newsome, A. Perrig, and A. Vasudevan, “OASIS,” in Proceedings of the 2013 Conference on Computer & Communications Security (CCS), nov 2013, pp. 13–24.
[37] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn, “Design and implementation of a TCG-based integrity measurement architecture,” in Proceedings of the 13th USENIX Security Symposium, 2004, p. 16.
[38] E. Shi, A. Perrig, and L. van Doorn, “BIND: A Fine-Grained Attestation Service for Secure Distributed Systems,” in Proceedings of the IEEE Symposium on Security and Privacy (S&P), may 2005, pp. 154–168.
[39] S. W. Smith and S. Weingart, “Building a high-performance, programmable secure coprocessor,” Computer Networks, vol. 31, no. 9, pp. 831–860, 1999.
[40] SQLite, “http://www.sqlite.org/.”
[41] G. E. Suh, D. Clarke, B. Gassend, M. van Dijk, and S. Devadas, “AEGIS,” in Proceedings of the 17th Annual International Conference on Supercomputing (ICS), 2003, pp. 160–171.
[42] G. E. Suh, C. W. O’Donnell, I. Sachdev, and S. Devadas, “Design and Implementation of the AEGIS Single-Chip Secure Processor Using Physical Random Functions,” in Proceedings of the 32nd International Symposium on Computer Architecture (ISCA), 2005, pp. 25–36.
[43] Trusted Computing Group, “MTM Specification v1.0 rev. 7.02,” 2010.
[44] ——, “Mobile Trusted Module 2.0 Use Cases,” 2011.
[45] ——, “TPM Main Specification Version 1.2, Rev. 116,” 2011.
[46] A. Vasudevan, S. Chaki, L. Jia, J. McCune, J. Newsome, and A. Datta, “Design, Implementation and Verification of an eXtensible and Modular Hypervisor Framework,” in Proceedings of the IEEE Symposium on Security and Privacy (S&P), may 2013, pp. 430–444.
[47] B. Vavala, N. Neves, and P. Steenkiste, “Securing Passive Replication Through Verification,” in Proceedings of the 34st IEEE Symposium on Reliable Distributed Systems (SRDS), 2015, pp. 176–181.
[48] E. Yardimci and M. Franz, “Mostly static program partitioning of binary executables,” ACM Transactions on Programming Languages and Systems (TOPLAS), vol. 31, no. 5, pp. 1–46, jun 2009.
[49] S. Zdancewic, L. Zheng, N. Nystrom, and A. C. Myers, “Secure program partitioning,” ACM Transactions on Computer Systems (TOCS), vol. 20, no. 3, pp. 283–328, aug 2002.
[50] ZeroMQ, “http://zeromq.org/.”

Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021 at 09:20:56 UTC from IEEE Xplore. Restrictions apply.