# Visibility Testing and Performance Evaluation of BlackMirror

## Visibility Testing Accuracy and False Negative Rate
- **Accuracy and False Negative Rate:**
  - 262 (0.037%)
  - 216 (0.030%)
  - 185 (0.026%)

- **Performance Metrics:**
  - 163,834
  - 160,009
  - 151,185

**Figure 11:** Accuracy and false negative rate of BlackMirror’s visibility testing.

**Figure 12:** Time taken to prepare a depth map (per frame) while varying its resolution.

### Analysis
The visibility testing time is negligible in all cases, with all tests taking less than 0.50 milliseconds. This suggests a minimal impact on user experience. As expected, precise geometry takes more time due to the increased number of vertices to check. Additionally, as the number of sensitive entities increases, the visibility testing time also increases because it has to enumerate all of them.

**Figure 13:** A comparison of the depth testing performance while varying:
- i) The number of sensitive entities to test.
- ii) The testing resolution.
- The time is measured with a per-frame depth testing time.

## End-to-End Performance Evaluation

To evaluate the end-to-end performance impact of BlackMirror, we conducted tests using our fully-functional BlackMirror-protected Quake II with two participants. The goal was to determine if the client and server overheads are acceptable, ensuring that BlackMirror has a low impact on the client experience and is scalable for the server to implement.

### Client-Side Overhead
We divided the client application into three parts:
1. **Update:** The client updates the game states with server messages.
2. **Predict:** The client predicts the player state using local inputs.
3. **Render:** The client renders the scene on the GPU or with the software renderer.

**Note:** For BlackMirror, the update and predict phases occur within the enclave, and it performs trusted visibility testing before rendering on the GPU. This introduces some overhead.

**Baseline:**
- Runs updates and predictions without an enclave.
- Renders the scene on the GPU.

**BlackMirror:**
- Runs updates and predictions within the enclave.
- Performs trusted visibility testing before rendering the scene on the GPU.

**Software Renderer:**
- Identical to the baseline but uses a software renderer (SwiftShader [37] utilizing 12 threads).

**Figure 14:** A comparison of the overhead to run a frame.
- (a) Baseline runs updates and predictions without an enclave and renders the scene on the GPU.
- (b) BlackMirror runs updates and predictions within the enclave and performs trusted visibility testing before rendering the scene on the GPU.
- (c) Software renderer is identical to the baseline, except that it renders the scene with a software renderer.

**Results:**
- BlackMirror adds an average of 0.57 ms overhead per frame.
- If the native game operates at 60 frames-per-second (16 ms per frame), BlackMirror demonstrates 58-59 frames-per-second, which is negligible and acceptable.
- Software-rendering with SwiftShader [37] exhibits a 34× slowdown compared to BlackMirror, even when running without an enclave and utilizing 12 threads.

### Server-Side Overhead
Since BlackMirror-based Quake II requires a secure channel for communication, the server performs encryption over all packets sent to and received from clients. 

**Figure 15:** The overhead of packet encryption at the server while varying the size of packets. The encryption overhead is always less than 0.23 ms (0.06 ms on average), which should not interfere with the gaming experience for 60 fps games.

## Discussion

### Applicability to a Broader Range of Games
Although BlackMirror was prototyped on Quake II, we expect it to be applicable to a broader range of games for the following reasons:
1. **General Interface:** The interface is general enough to be adopted by most multiplayer shooter games.
2. **Modern Game Engines:** Modern game engines are equipped with features that can be retrofitted to realize our design.

#### Open-Source Games
We investigated the client applications of the latest open-source 3D multiplayer shooter games, Xonotic [56] and Red Eclipse [57], and found that they share the same game architecture as Quake II. Specifically, within the main processing loop, all of them perform:
- Updating the game state with server messages.
- Predicting the player state with inputs (optionally running a physics engine).
- Rendering the scene with updated view values.

From this observation, we conclude that the interfaces of BlackMirror can be smoothly integrated into these games without intrusive changes to their architecture. We also expect closed-source games to follow the same architectural footprint, making BlackMirror applicable to them as well.

#### Modern Game Engines
Modern game engines, including Unreal Engine, already provide in-CPU visibility testing features [58, 59]. This makes it easier for game engine developers to adopt our approaches. However, their goal for testing visibility on the CPU is to improve performance rather than preventing wallhacks.

### Advanced Rendering Techniques
While we successfully demonstrated a prototype of BlackMirror using a nontrivial game, integrating it into games with more complex rendering pipelines may require further efforts. For example:
- **GPU Transformations:** Modern game engines often transform the shape of entities on the GPU, e.g., using geometry and tessellation shaders. To apply BlackMirror, game developers need to use conservative trusted geometry to tolerate possible updates to the shapes on the GPU.
- **Complex Graphics Effects:** An entity behind the wall may affect the scene with complex graphics engines. For instance, the shadow of a hidden entity may appear in the scene, or it may be a light source, enlightening neighboring pixels. We can modify BMTest to account for these effects, but specific implementations are left for future work.

## Limitations

### Aimbots
Aimbots generate inputs to move cursors on enemies, allowing attackers to make more accurate shots. BlackMirror does not prevent these attacks since it does not protect visible enemy states used to calculate required fake inputs. Without trusted input devices [15, 16], it is difficult to distinguish between artificial and genuine user inputs. While the current version of BlackMirror does not address aimbots, it is an important step towards bringing TEE technologies to cheat prevention in online games, reducing the need for over-privileged anti-cheat software.

### Noticeability vs. Visibility
In some games, the vision of a player is hindered by environmental objects (e.g., bushes or foliage) and particle effects (e.g., explosions), which partially cover sensitive entities or have similar colors. Attackers may attempt to nullify these features by leaking their position or modifying textures. BlackMirror struggles to prevent these attacks because the state of the entities would be declassified unless the entire object is hidden behind the wall, and due to the lack of trusted memory regions on the GPU for tamper-evident textures.

## Related Works

### OpenConflict
OpenConflict [34] introduces a multi-party computation (MPC) protocol for preventing maphacks in 2D RTS games. Each client computes its current visible area and sends it as a query to opponents, who return a list of their units overlapping with the requested visible area. However, such MPC schemes are not suitable for 3D games, where visibility testing is more complex and the visible area is typically larger and obstructed by various objects.

### AVM
AVM [60] provides accountability to the execution of virtual machines through tamper-evident logging and deterministic replay.

### Watchmen
Watchmen [49] uses distributed proxies for cheat prevention in multiplayer games, focusing more on the distributed proxy architecture rather than specific visibility testing mechanisms.

### Bauman et al.
Bauman et al. [61] showcased how to leverage Intel SGX technology for protecting games, primarily focusing on DRM and leaving solutions for cheat prevention as future work.

## Conclusion

Online game cheating, particularly wallhacks, is a critical issue for competitive games. Anti-cheat solutions deployed on a machine where the attacker has absolute control are fundamentally flawed. This paper presents BlackMirror, a new game design leveraging Intel SGX's trusted execution environment. The implementation and evaluation with BlackMirror-protected Quake II demonstrate that BlackMirror can enable fully functional and secure games while meeting user experience requirements.

## Acknowledgments

We thank the anonymous reviewers and our shepherd, Yan Shoshitaishvili, for their insightful and thoughtful feedback, which guided the final version of this paper. This work was partly supported by the National Research Foundation (NRF) of Korea grant funded by the Korean government MSIT (NRF-2019R1C1C1006095). The Institute of Engineering Research at Seoul National University provided research facilities for this work.

## References

[1] Global games market report. https://newzoo.com/products/reports/global-games-market-report/
[2] Report: Cheating is becoming a big problem in online gaming. https://www.forbes.com/sites/nelsongranados/2018/04/30/report-cheating-is-becoming-a-big-problem-in-online-gaming
[3] Battleye: The anti-cheat gold standard. https://www.battleye.com
[4] Valve anti-cheat system (VAC). https://support.steampowered.com/kb/7849-RADZ-6869/#whatisvac
[5] Easy anti-cheat. https://www.easy.ac/en-us/
[6] Joel Noguera. Unveiling the underground world of anti-cheats. Recon Montreal
[7] Cheat engine. https://www.cheatengine.org/
[8] Joel Noguera. Creating your own wallhack. https://niemand.com.ar/2019/01/13/creating-your-own-wallhack/
[9] Carl Schou. Hooking the graphics kernel subsystem. https://secret.club/2019/10/18/kernel_gdi_hook.html
[10] Peter Andreasen. Deep dive into networking for Unity’s FPS sample game. Unite LA, 2018
[11] Quake 2 GPL release. https://github.com/id-Software/Quake-2
[12] Frank McKeen, Ilya Alexandrovich, Alex Berenzon, Carlos V. Rozas, Hisham Shafi, Vedvyas Shanbhogue, and Uday R. Savagaonkar. Innovative instructions and software model for isolated execution. In Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy, HASP '13, pages 10:1–10:1, New York, NY, USA, 2013. ACM
[13] Ittai Anati, Shay Gueron, Simon P Johnson, and Vincent R Scarlata. Innovative technology for CPU based attestation and sealing
[14] Samuel Weiser and Mario Werner. Sgxio: Generic trusted I/O path for Intel SGX. In Proceedings of the Seventh ACM on Conference on Data and Application Security and Privacy, CODASPY '17, 2017
[15] S. Eskandarian, J. Cogan, S. Birnbaum, P. C. W. Brandon, D. Franke, F. Fraser, G. Garcia, E. Gong, H. T. Nguyen, T. K. Sethi, V. Subbiah, M. Backes, G. Pellegrino, and D. Boneh. Fidelius: Protecting user secrets from compromised browsers. In Proceedings of the 40th IEEE Symposium on Security and Privacy (Oakland), San Francisco, CA, May 2019
[16] Aritra Dhar, Enis Ulqinaku, Kari Kostiainen, and Srdjan Capkun. Protection Root-of-trust for IO in compromised platforms. In Proceedings of the 2020 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, February 2020
[17] Stavros Volos, Kapil Vaswani, and Rodrigo Bruno. Graviton: Trusted execution environments on GPUs. In Proceedings of the 13th USENIX Symposium on Operating Systems Design and Implementation (OSDI), Carlsbad, CA, October 2018
[18] Insu Jang, Adrian Tang, Taehoon Kim, Simha Sethumadhavan, and Jaehyuk Huh. Heterogeneous isolated execution for commodity GPUs. In Proceedings of the 24th ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), Providence, RI, April 2019
[19] Y. Xu, W. Cui, and M. Peinado. Controlled-channel attacks: Deterministic side channels for untrusted operating systems. In 2015 IEEE Symposium on Security and Privacy, San Jose, CA, May 2015
[20] Jo Van Bulck, Nico Weichbrodt, Rüdiger Kapitza, Frank Piessens, and Raoul Strackx. Telling your secrets without page faults: Stealthy page table-based attacks on enclaved execution. In Proceedings of the 26th USENIX Security Symposium (Security), Vancouver, Canada, August 2017
[21] Ferdinand Brasser, Urs Müller, Alexandra Dmitrienko, Kari Kostiainen, Srdjan Capkun, and Ahmad-Reza Sadeghi. Software grand exposure: SGX cache attacks are practical. In 11th USENIX Workshop on Offensive Technologies (WOOT 17), Vancouver, BC, August 2017. USENIX Association
[22] Jo Van Bulck, Frank Piessens, and Raoul Strackx. Sgx-step: A practical attack framework for precise enclave execution control. In Proceedings of the 2nd Workshop on System Software for Trusted Execution, SysTEX'17, 2017
[23] Jo Van Bulck, Marina Minkin, Ofir Weisse, Daniel Genkin, Baris Kasikci, Frank Piessens, Mark Silberstein, Thomas F. Wenisch, Yuval Yarom, and Raoul Strackx. Foreshadow: Extracting the keys to the Intel SGX kingdom with transient out-of-order execution. In Proceedings of the 27th USENIX Security Symposium (Security), Baltomore, MD, August 2018
[24] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss, Werner Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, Michael Schwarz, and Yuval Yarom. Spectre attacks: Exploiting speculative execution. In Proceedings of the 40th IEEE Symposium on Security and Privacy (Oakland), San Francisco, CA, May 2019
[25] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas, Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom, and Mike Hamburg. Meltdown: Reading kernel memory from user space. In Proceedings of the 27th USENIX Security Symposium (Security), Baltomore, MD, August 2018
[26] Jaehyuk Lee, Jinsoo Jang, Yeongjin Jang, Nohyun Kwak, Yeseul Choi, Changho Choi, Taesoo Kim, Marcus Peinado, and Brent ByungHoon Kang. Hacking in darkness: Return-oriented programming against secure enclaves. In Proceedings of the 26th USENIX Security Symposium (Security), Vancouver, Canada, August 2017
[27] Andrea Biondo, Mauro Conti, Lucas Davi, Tommaso Frassetto, and Ahmad-Reza Sadeghi. The guard’s dilemma: Efficient code-reuse attacks against Intel SGX. In Proceedings of the 27th USENIX Security Symposium (Security), Baltomore, MD, August 2018
[28] Jaebaek Seo, Byounyoung Lee, Seongmin Kim, Ming-Wei Shih, Insik Shin, Dongsu Han, and Taesoo Kim. Sgx-shield: Enabling address space layout randomization for SGX programs. In Proceedings of the 2017 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, February 2017
[29] Dmitrii Kuvaiskii, Oleksii Oleksenko, Sergei Arnautov, Bohdan Trach, Pramod Bhatotia, Pascal Felber, and Christof Fetzer. Sgxbounds: Memory safety for shielded execution. In Proceedings of the Twelfth European Conference on Computer Systems, EuroSys '17. ACM, 2017
[30] Nicilas Guigo and Joel St. John. Next level cheating and leveling up mitigations. Black Hat Europe 2014, 2014
[31] Osiris. https://github.com/danielkrupinski/Osiris
[32] Charlatano. https://github.com/Jire/Charlatano
[33] Onebytewallhack. https://github.com/danielkrupinski/OneByteWallhack
[34] E. Bursztein, M. Hamburg, J. Lagarenne, and D. Boneh. Openconflict: Preventing real-time map hacks in online games. In Proceedings of the 32nd IEEE Symposium on Security and Privacy (Oakland), Oakland, CA, May 2011
[35] imgui. https://github.com/ocornut/imgui
[36] Chia che Tsai, Donald E. Porter, and Mona Vij. Graphene-sgx: A practical library OS for unmodified applications on SGX. In Proceedings of the 2017 USENIX Annual Technical Conference (ATC), Santa Clara, CA, July 2017
[37] Swiftshader. https://github.com/google/swiftshader
[38] Xigncode3. https://www.wellbia.com/home/en/pages/xigncode3/
[39] Riot’s approach to anti-cheat. https://technology.riotgames.com/news/riots-approach-anti-cheat
[40] Carl Schou. Battleye anticheat: analysis and mitigation. https://vmcall.github.io/reversal/2019/02/10/battleye-anticheat.html/
[41] Youren Shen, Hongliang Tian, Yu Chen, Kang Chen, Runji Wang, Yi Xu, Yubin Xia, and Shoumeng Yan. Occlum: Secure and efficient multitasking inside a single enclave of Intel SGX. In Proceedings of the 25th ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), Lausanne, Switzeland, April 2020
[42] Guoxing Chen, Yinqian Zhang, and Ten-Hwang Lai. Opera: Open remote attestation for Intel’s secure enclave. In Proceedings of the 26th ACM Conference on Computer and Communications Security (CCS), London, UK, November 2018
[43] Adil Ahmad, Kyungtae Kim, Muhammad Ihsanulhaq Sarfaraz, and Byoungyoung Lee. OBLIVIATE: A data oblivious filesystem for Intel SGX. In Proceedings of the 2018 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, February 2018
[44] Meni Orenbach, Pavel Lifshits, Marina Minkin, and Mark Silberstein. Eleos: Exitless OS services for SGX enclaves. In Proceedings of the 12th European Conference on Computer Systems (EuroSys), Belgrade, Serbia, April 2017
[45] Surenthar Selvaraj. Overview of protected file system library using software guard extensions, 2016
[46] Timothy Ford. Overwatch gameplay architecture and netcode. GDC 2017, 2017
[47] Daniel Lupei, Bogdan Simion, Don Pinto, Matthew Misler, Mihai Burcea, William Krick, and Cristiana Amza. Transactional memory support for scalable and transparent parallelization of multiplayer games. In Proceedings of the 5th European Conference on Computer Systems (EuroSys), Paris, France, April 2010
[48] Vladimir Gajinov, Ferad Zyulkyarov, Osman S. Unsal, Adrian Cristal, Eduard Ayguade, Tim Harris, and Mateo Valero. Quaketm: Parallelizing a complex sequential application using transactional memory. In Proceedings of the 23rd International Conference on Supercomputing (ICS), Yorktown Heights, NY, June 2009
[49] A. Yahyavi, K. Huguenin, J. Gascon-Samson, J. Kienzle, and B. Kemme. Watchmen: Scalable cheat-resistant support for distributed multi-player online games. In Proceedings of the 33st International Conference on Distributed Computing Systems (ICDCS), 2013
[50] Ferad Zyulkyarov, Vladimir Gajinov, Osman S. Unsal, Adrián Cristal, Eduard Ayguadé, Tim Harris, and Mateo Valero. Atomic quake: Using transactional memory in an interactive multiplayer game server. In Proceedings of the 14th ACM Symposium on Principles and Practice of Parallel Programming (PPOPP), Releigh, USA, February 2009
[51] Q2RTX. https://github.com/NVIDIA/Q2RTX
[52] Q2PRO. https://github.com/skullernet/q2pro
[53] Masked software occlusion culling. https://github.com/gametechdev/maskedocclusionculling
[54] J. Hasselgren, M. Andersson, and T. Akenine-Möller. Masked software occlusion culling. In Proceedings of High Performance Graphics, HPG '16, 2016
[55] ARB_occlusion_query. https://www.khronos.org/registry/OpenGL/extensions/ARB/ARB_occlusion_query.txt
[56] Xonotic. https://github.com/xonotic/xonotic
[57] Red eclipse 2. https://github.com/redeclipse/base
[58] Visibility and occlusion culling. https://docs.unrealengine.com/en-US/Engine/Rendering/VisibilityCulling/index.html
[59] Michal Valient. Practical occlusion culling in Killzone 3: Will Vale — Second Intention Limited — contract R&D for Guerrilla BV. In ACM SIGGRAPH 2011 Talks, SIGGRAPH '11, 2011
[60] Andreas Haeberlen, Paarijaat Aditya, Rodrigo Rodrigues, and Peter Druschel. Accountable virtual machines. In Proceedings of the 9th USENIX Symposium on Operating Systems Design and Implementation (OSDI), Vancouver, Canada, October 2010
[61] Erick Bauman and Zhiqiang Lin. A case for protecting computer games with SGX. In Proceedings of the 1st Workshop on System Software for Trusted Execution, SysTEX '16, 2016