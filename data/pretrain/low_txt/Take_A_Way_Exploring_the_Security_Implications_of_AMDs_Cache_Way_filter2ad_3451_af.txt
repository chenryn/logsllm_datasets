### Acknowledgments

We would like to thank the anonymous reviewers for their valuable comments and suggestions, which significantly improved the quality of this paper. This project was supported by the Austrian Research Promotion Agency (FFG) through the K-project DeSSnet, funded under the COMET - Competence Centers for Excellent Technologies program by BMVIT, BMWFW, Styria, and Carinthia. Additionally, it received support from the European Research Council (ERC) under the European Union’s Horizon 2020 research and innovation program (grant agreement No 681402). The work also benefited from the ANR-19-CE39-0007 MIAOUS project, funded by the French National Research Agency (ANR). We also acknowledge the generous contributions from Intel. The opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of the funding parties.

### References

[1] Andreas Abel and Jan Reineke. 2013. Measurement-based Modeling of the Cache Replacement Policy. In *Real-Time and Embedded Technology and Applications Symposium (RTAS)*.

[2] Alejandro Cabrera Aldaya, Billy Bob Brumley, Sohaib ul Hassan, Cesar Pereida García, and Nicola Tuveri. 2018. Port Contention for Fun and Profit. In *S&P*.

[3] Alex Christensen. 2015. Reduce resolution of performance.now. https://bugs.webkit.org/show_bug.cgi?id=146531

[4] Ricardo Alves, Stefanos Kaxiras, and David Black-Schaffer. 2018. Dynamically Disabling Way-Prediction to Reduce Instruction Replay. In *International Conference on Computer Design (ICCD)*.

[5] AMD. 2013. BIOS and Kernel Developer’s Guide (BKDG) for AMD Family 15h Models 00h-0Fh Processors.

[6] AMD. 2014. Software Optimization Guide for AMD Family 15h Processors.

[7] AMD. 2017. AMD64 Architecture Programmer’s Manual.

[8] AMD. 2017. Software Optimization Guide for AMD Family 17h Processors.

[9] AMD. 2018. Software Techniques for Managing Speculation on AMD Processors.

[10] AMD. 2019. 2nd Gen AMD EPYC Processors Set New Standard for the Modern Datacenter with Record-Breaking Performance and Significant TCO Savings.

[11] Antonio Barresi, Kaveh Razavi, Mathias Payer, and Thomas R. Gross. 2015. CAIN: Silently Breaking ASLR in the Cloud. In *WOOT*.

[12] Daniel J. Bernstein. 2004. Cache-Timing Attacks on AES.

[13] Atri Bhattacharyya, Alexandra Sandulescu, Matthias Neugschwandtner, Alessandro Sorniotti, Babak Falsafi, Mathias Payer, and Anil Kurmus. 2019. SMoTher-Spectre: Exploiting Speculative Execution Through Port Contention. In *CCS*.

[14] Boris Zbarsky. 2015. Reduce resolution of performance.now. https://hg.mozilla.org/integration/mozilla-inbound/rev/48ae8b5e62ab

[15] Leon Groot Bruinderink, Andreas Hülsing, Tanja Lange, and Yuval Yarom. 2016. Flush, Gauss, and Reload–a Cache Attack on the BLISS Lattice-Based Signature Scheme. In *CHES*.

[16] Claudio Canella, Daniel Genkin, Lukas Giner, Daniel Gruss, Moritz Lipp, Marina Minkin, Daniel Moghimi, Frank Piessens, Michael Schwarz, Berk Sunar, Jo Van Bulck, and Yuval Yarom. 2019. Fallout: Leaking Data on Meltdown-Resistant CPUs. In *CCS*.

[17] Claudio Canella, Jo Van Bulck, Michael Schwarz, Moritz Lipp, Benjamin von Berg, Philipp Ortner, Frank Piessens, Dmitry Evtyushkin, and Daniel Gruss. 2019. A Systematic Evaluation of Transient Execution Attacks and Defenses. In *USENIX Security Symposium*.

[18] Mike Clark. 2016. A New x86 Core Architecture for the Next Generation of Computing. In *IEEE Hot Chips Symposium (HCS)*.

[19] Stephen Crane, Andrei Homescu, Stefan Brunthaler, Per Larsen, and Michael Franz. 2015. Thwarting Cache Side-Channel Attacks Through Dynamic Software Diversity. In *NDSS*.

[20] Joan Daemen and Vincent Rijmen. 2013. The Design of Rijndael: AES-The Advanced Encryption Standard.

[21] Helder Eijs. 2018. PyCryptodome: A Self-Contained Cryptographic Library for Python. https://www.pycryptodome.org

[22] Dmitry Evtyushkin, Dmitry Ponomarev, and Nael Abu-Ghazaleh. 2016. Jump Over ASLR: Attacking Branch Predictors to Bypass ASLR. In *MICRO*.

[23] W. Shen Gene and S. Craig Nelson. 2006. MicroTLB and Micro Tag for Reducing Power in a Processor. US Patent 7,117,290 B2.

[24] Ben Gras, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. 2018. Translation Leak-Aside Buffer: Defeating Cache Side-Channel Protections with TLB Attacks. In *USENIX Security Symposium*.

[25] Ben Gras, Kaveh Razavi, Erik Bosman, Herbert Bos, and Cristiano Giuffrida. 2017. ASLR on the Line: Practical Cache Attacks on the MMU. In *NDSS*.

[26] William Gropp, Ewing Lusk, Nathan Doss, and Anthony Skjellum. 1996. A High-Performance, Portable Implementation of the MPI Message Passing Interface Standard. *Parallel Computing* (1996).

[27] Daniel Gruss, Moritz Lipp, Michael Schwarz, Richard Fellner, Clémentine Maurice, and Stefan Mangard. 2017. KASLR is Dead: Long Live KASLR. In *ESSoS*.

[28] Daniel Gruss, Clémentine Maurice, Anders Fogh, Moritz Lipp, and Stefan Mangard. 2016. Prefetch Side-Channel Attacks: Bypassing SMAP and Kernel ASLR. In *CCS*.

[29] Daniel Gruss, Clémentine Maurice, Klaus Wagner, and Stefan Mangard. 2016. Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript. In *DIMVA*.

[30] Daniel Gruss, Raphael Spreitzer, and Stefan Mangard. 2015. Cache Template Attacks: Automating Attacks on Inclusive Last-Level Caches. In *USENIX Security Symposium*.

[31] Shay Gueron. 2012. Intel Advanced Encryption Standard (Intel AES) Instructions Set – Rev 3.01.

[32] Richard W Hamming. 1950. Error Detecting and Error Correcting Codes. *The Bell System Technical Journal* (1950).

[33] Joel Hruska. 2019. AMD Gains Market Share in Desktop and Laptop, Slips in Servers. https://www.extremetech.com/computing/291032-amd

[34] Ralf Hund, Carsten Willems, and Thorsten Holz. 2013. Practical Timing Side Channel Attacks Against Kernel Space ASLR. In *S&P*.

[35] Koji Inoue, Tohru Ishihara, and Kazuaki Murakami. 1999. Way-Predicting Set-Associative Cache for High Performance and Low Energy Consumption. In *Symposium on Low Power Electronics and Design*.

[36] Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar. 2015. S$A: A Shared Cache Attack That Works Across Cores and Defies VM Sandboxing – and Its Application to AES. In *S&P*.

[37] Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar. 2016. Cross-Processor Cache Attacks. In *AsiaCCS*.

[38] Yeongjin Jang, Sangho Lee, and Taesoo Kim. 2016. Breaking Kernel Address Space Layout Randomization with Intel TSX. In *CCS*.

[39] Paul C. Kocher. 1996. Timing Attacks on Implementations of Diffe-Hellman, RSA, DSS, and Other Systems. In *CRYPTO*.

[40] Richard E Kessler. 1999. The Alpha 21264 Microprocessor. *IEEE Micro* (1999).

[41] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss, Werner Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, Michael Schwarz, and Yuval Yarom. 2019. Spectre Attacks: Exploiting Speculative Execution. In *S&P*.

[42] Robert Könighofer. 2008. A Fast and Cache-Timing Resistant Implementation of the AES. In *CT-RSA*.

[43] Esmaeil Mohammadian Koruyeh, Khaled Khasawneh, Chengyu Song, and Nael Abu-Ghazaleh. 2018. Spectre Returns! Speculation Attacks Using the Return Stack Buffer. In *WOOT*.

[44] Marcin Krzyzanowski. 2019. CryptoSwift: Growing Collection of Standard and Secure Cryptographic Algorithms Implemented in Swift. https://cryptoswift.io

[45] Linux. 2019. Complete Virtual Memory Map with 4-Level Page Tables. https://www.kernel.org/doc/Documentation/x86/x86_64/mm.txt

[46] Linux. 2019. Linux Kernel 5.0 Process (x86). https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/x86/kernel/process.c

[47] Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and Ruby B. Lee. 2015. Last-Level Cache Side-Channel Attacks Are Practical. In *S&P*.

[48] G. Maisuradze and C. Rossow. 2018. ret2spec: Speculative Execution Using Return Stack Buffers. In *CCS*.

[49] Moritz Lipp, Daniel Gruss, Raphael Spreitzer, Clémentine Maurice, and Stefan Mangard. 2016. ARMageddon: Cache Attacks on Mobile Devices. In *USENIX Security Symposium*.

[50] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas, Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom, and Mike Hamburg. 2018. Meltdown: Reading Kernel Memory from User Space. In *USENIX Security Symposium*.

[51] Clémentine Maurice, Nicolas Le Scouarnec, Christoph Neumann, Olivier Heen, and Aurélien Francillon. 2015. Reverse Engineering Intel Complex Addressing Using Performance Counters. In *RAID*.

[52] Clémentine Maurice, Manuel Weber, Michael Schwarz, Lukas Giner, Daniel Gruss, Carlo Alberto Boano, Stefan Mangard, and Kay Römer. 2017. Hello from the Other Side: SSH over Robust Cache Covert Channels in the Cloud. In *NDSS*.

[53] Ahmad Moghimi, Gorka Irazoqui, and Thomas Eisenbarth. 2017. CacheZoom: How SGX Amplifies the Power of Cache Attacks. In *CHES*.

[54] Richard Moore. 2017. pyaes: Pure-Python Implementation of AES Block-Cipher and Common Modes of Operation. https://github.com/ricmoo/pyaes

[55] Louis-Marie Vincent Mouton, Nicolas Jean Phillippe Huot, Gilles Eric Grandou, and Stephane Eric Sebastian Brochier. 2012. Cache Accessing Using a Micro TAG. US Patent 8,151,055.

[56] Yossef Oren, Vasileios P Kemerlis, Simha Sethumadhavan, and Angelos D Keromytis. 2015. The Spy in the Sandbox: Practical Cache Attacks in JavaScript and Their Implications. In *CCS*.

[57] Dag Arne Osvik, Adi Shamir, and Eran Tromer. 2006. Cache Attacks and Countermeasures: The Case of AES. In *CT-RSA*.

[58] Colin Percival. 2005. Cache Missing for Fun and Profit. In *BSDCan*.

[59] Peter Pessl, Daniel Gruss, Clémentine Maurice, Michael Schwarz, and Stefan Mangard. 2016. DRAMA: Exploiting DRAM Addressing for Cross-CPU Attacks. In *USENIX Security Symposium*.

[60] Moinuddin K Qureshi. 2019. New Attacks and Defense for Encrypted-Address Cache. In *ISCA*.

[61] Chester Rebeiro, A. David Selvakumar, and A. S. L. Devi. 2006. Bitslice Implementation of AES. In *Cryptology and Network Security (CANS)*.

[62] Thomas Ristenpart, Eran Tromer, Hovav Shacham, and Stefan Savage. 2009. Hey, You, Get Off of My Cloud: Exploring Information Leakage in Third-Party Compute Clouds. In *CCS*.

[63] David J Sager and Glenn J Hinton. 2002. Way-Predicting Cache Memory. US Patent 6,425,055.

[64] Michael Schwarz, Claudio Canella, Lukas Giner, and Daniel Gruss. 2019. Store-to-Leak Forwarding: Leaking Data on Meltdown-Resistant CPUs. arXiv:1905.05725 (2019).

[65] Michael Schwarz, Daniel Gruss, Samuel Weiser, Clémentine Maurice, and Stefan Mangard. 2017. Malware Guard Extension: Using SGX to Conceal Cache Attacks. In *DIMVA*.

[66] Michael Schwarz, Moritz Lipp, Daniel Gruss, Samuel Weiser, Clémentine Maurice, Raphael Spreitzer, and Stefan Mangard. 2018. KeyDrown: Eliminating Software-Based Keystroke Timing Side-Channel Attacks. In *NDSS*.

[67] Michael Schwarz, Moritz Lipp, Daniel Moghimi, Jo Van Bulck, Julian Stecklina, Thomas Prescher, and Daniel Gruss. 2019. ZombieLoad: Cross-Privilege-Boundary Data Sampling. In *CCS*.

[68] Michael Schwarz, Clémentine Maurice, Daniel Gruss, and Stefan Mangard. 2017. Fantastic Timers and Where to Find Them: High-Resolution Microarchitectural Attacks in JavaScript. In *FC*.

[69] Michael Schwarz, Martin Schwarzl, Moritz Lipp, and Daniel Gruss. 2019. NetSpectre: Read Arbitrary Memory Over Network. In *ESORICS*.

[70] Mark Seaborn. 2015. How Physical Addresses Map to Rows and Banks in DRAM. http://lackingrhoticity.blogspot.com/2015/05/how-physical-addresses-map-to-rows-and-banks.html

[71] Raphael Spreitzer and Thomas Plos. 2013. Cache-Access Pattern Attack on Disaligned AES T-Tables. In *COSADE*.

[72] Junko Takahashi, Toshinori Fukunaga, Kazumaro Aoki, and Hitoshi Fuji. 2013. Highly Accurate Key Extraction Method for Access-Driven Cache Attacks Using Correlation Coefficient. In *ACISP*.

[73] Jo Van Bulck, Marina Minkin, Ofir Weisse, Daniel Genkin, Baris Kasikci, Frank Piessens, Mark Silberstein, Thomas F. Wenisch, Yuval Yarom, and Raoul Strackx. 2018. Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient Out-of-Order Execution. In *USENIX Security Symposium*.

[74] Stephan van Schaik, Alyssa Milburn, Sebastian Österlund, Pietro Frigo, Giorgi Maisuradze, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. 2019. RIDL: Rogue In-Flight Data Load. In *S&P*.

[75] VMWare. 2018. Security Considerations and Disallowing Inter-Virtual Machine Transparent Page Sharing (2080735). https://kb.vmware.com/s/article/2080735

[76] Mario Werner, Thomas Unterluggauer, Lukas Giner, Michael Schwarz, Daniel Gruss, and Stefan Mangard. 2019. ScatterCache: Thwarting Cache Attacks via Cache Set Randomization. In *USENIX Security Symposium*.

[77] Felix Wilhelm. 2016. PoC for Breaking Hypervisor ASLR Using Branch Target Buffer Collisions. https://github.com/felixwilhelm/mario_baslr

[78] Henry Wong. 2013. Intel Ivy Bridge Cache Replacement Policy. http://blog.stuffedcow.net/2013/01/ivb-cache-replacement/

[79] John C Wray. 1992. An Analysis of Covert Timing Channels. *Journal of Computer Security* 1, 3-4 (1992), 219–232.

[80] Mengjia Yan, Read Sprabery, Bhargava Gopireddy, Christopher Fletcher, Roy Campbell, and Josep Torrellas. 2019. Attack Directories, Not Caches: Side-Channel Attacks in a Non-Inclusive World. In *S&P*.

[81] Xiaokuan Zhang, Yuan Xiao, and Yinqian Zhang. 2016. Return-Oriented Flush-Reload Side Channels on ARM and Their Implications for Android Devices. In *CCS*.

[82] Yinqian Zhang, Ari Juels, Michael K. Reiter, and Thomas Ristenpart. 2012. Cross-VM Side Channels and Their Use to Extract Private Keys. In *CCS*.

[83] Yinqian Zhang, Ari Juels, Michael K. Reiter, and Thomas Ristenpart. 2014. Cross-Tenant Side-Channel Attacks in PaaS Clouds. In *CCS*.

### Appendix A: RDTSC Resolution

We measure the resolution of the `rdtsc` instruction using the following experimental setup. We assume that the timestamp counter (TSC) is updated at a fixed interval. This assumption is based on the documentation in the manual, which states that the TSC is independent of the CPU frequency [8]. Therefore, there exists a modulus \( x \) and a constant \( C \) such that \( \text{TSC} \mod x \equiv C \) if and only if \( x \) is the TSC increment. We can find this \( x \) using brute force, i.e., by trying all possible values until we find one that always results in the same value \( C \). Table 3 shows the `rdtsc` increments for the CPUs we tested.

| Setup | CPU | µ-arch. | Increment |
|-------|-----|--------|-----------|
| Lab   | AMD Athlon 64 X2 3800+ | K8 | 1 |
| Lab   | AMD Turion II Neo N40L | K10 | 1 |
| Lab   | AMD Phenom II X6 1055T | K10 | 1 |
| Lab   | AMD E-450 | Bobcat | 1 |
| Lab   | AMD Athlon 5350 | Jaguar | 1 |
| Lab   | AMD FX-4100 | Bulldozer | 1 |
| Lab   | AMD FX-8350 | Piledriver | 1 |
| Lab   | AMD A10-7870K | Steamroller | 1 |
| Lab   | AMD Ryzen Threadripper 1920X | Zen | 35 |
| Lab   | AMD Ryzen Threadripper 1950X | Zen | 34 |
| Lab   | AMD Ryzen Threadripper 1700X | Zen | 34 |
| Lab   | AMD Ryzen Threadripper 2970WX | Zen+ | 30 |
| Lab   | AMD Ryzen 7 3700X | Zen 2 | 36 |
| Cloud | AMD EPYC 7401p | Zen | 20 |
| Cloud | AMD EPYC 7571 | Zen | 22 |

### Appendix B: Covert Channel Error Rate

Figure 6 illustrates the error rate of the covert channel described in Section 5.1. The error rate increases drastically when transmitting more than 64 bits in parallel. Therefore, we evaluated different Hamming codes on an AMD Ryzen Threadripper 1920X (Figure 7).

### Appendix C: Userspace ASLR

Linux also uses ASLR for user processes by default. However, randomizing the code section requires compiler support for position-independent code. The heap memory region is of particular interest because it is located just after the code section with an offset of up to 32 MB [47]. User programs use 4 kB pages, giving an effective 13-bit entropy for the start of the brk-based heap memory.

It is possible to fully break heap ASLR through the use of μTags. An attack requires an interface to the victim application that incurs a victim access to data on the heap. We evaluated the ASLR break using a client-server scenario in a toy application, where the attacker is the malicious client. The attacker repeatedly sends benign requests until it is distinguishable which tag is being accessed by the victim. This already reduces the ASLR entropy by 8 bits because it reveals a linear combination of the address bits. It is also possible to recover all address bits up to bit 27 by using the μTags of multiple pages and solving the resulting equation system.

A limitation is that the attack is susceptible to noise. Too many accesses while processing the attacker’s request negatively impact the measurements such that the attacker will always observe a cache miss. In our experiments, we were not able to mount the attack using a socket-based interface. Hence, attacking other userspace applications that rely on a more complex interface, e.g., using D-Bus, is currently not practical. However, future work may refine our techniques to also mount attacks in more noisy scenarios. For our evaluation, we targeted a shared-memory-based API for high-speed transmission without system calls [26] provided by the victim application. We were able to recover 13 bits with an average success rate of 88.9% in 1.94 seconds (σ = 1.76 seconds, n = 1000).