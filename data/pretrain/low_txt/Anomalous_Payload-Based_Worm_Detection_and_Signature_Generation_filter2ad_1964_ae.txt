A packet payload can be represented by its 1-gram frequency distribution (see Figure 2). This representation aggregates the actual content byte values in a form that makes it nearly impossible, though not entirely, to reconstruct the original payload. Since byte value distributions do not contain sequential information, the actual content is difficult to recover. Using 2-gram and 3-gram distributions simplifies the problem, making it more likely to recover the content, as they represent adjacent byte values.

However, we observe that reordering the 1-gram frequency distribution into a rank-ordered frequency distribution produces a distribution that closely resembles an exponentially decreasing Zipf-like distribution. The rank-ordered string of distinct byte values is referred to as the “Z-string” (as discussed in Section 3.1). The Z-string does not reveal the actual content; instead, it provides an aggregated representation of byte value frequencies without the specific frequency information. This representation may convey sufficient information to correlate suspect payloads while maintaining privacy, as false positive content alerts would not expose the true content, thereby upholding privacy policies across sites.

In this cross-domain correlation experiment, we propose two additional metrics that do not require exchanging raw payloads but only the 1-gram distributions and the privacy-preserving Z-string representation of the payload:

1. **Manhattan Distance (MD)**: This metric requires the exchange of the byte distribution of the packet, which consists of 256 float numbers. Two payloads are considered similar if their Manhattan distance is small. The maximum possible MD is 2. Therefore, we define the similarity score as (MD)/2 to normalize the score range to the same range as the other metrics.

2. **Longest Common Subsequence (LCS) of Z-string (Zstr)**: While maintaining maximal privacy, we perform the LCS on the Z-strings of two alerts. The similarity score is the same as that for LCS, but here it evaluates the similarity of two Z-strings rather than the raw payload strings.

### Anomalous Payload-Based Worm Detection and Signature Generation

Figure 7 presents the results achieved by sharing PAYL alerts among three sites using CR and CR II and their variant packet fragments. The results are shown in terms of the similarity scores computed by each of the metrics. Each plot includes two representations: one for false alerts (histogram) and the other for worm alerts (dots on the x-axis). The bars in the plots are histograms of the similarity scores for false PAYL alerts. The x-axis shows the similarity score, defined within the range [0...1], and the y-axis represents the number of pairs of alerts within the same score range. The similarity scores for the worm alerts are shown separately as dots on the x-axis. All scores calculated between worm alerts are much higher than those of the "false" PAYL alerts, indicating that they would be correctly detected as true worms among collaborating sites. Alerts with low scores would not have sufficient corroboration to be deemed true worms.

**Figure 7. Similarity scores of Zstr and LCSeq metrics for collaboration**

The above two plots show the similarity scores using Zstr and LCSeq metrics. LCS produced similar results to LCSeq. String equality and Manhattan distance metrics did not perform well in distinguishing true alerts from false ones, so their plots are not shown. The other two metrics presented in Figure 7 provide particularly good results. The worms and their variant packet fragments have much higher similarity scores than all other alerts generated at each distinct site. This suggests that this approach may work very well in practice and provide reliable information about ongoing zero-day attacks at different sites. Each site can contribute to reducing false positives since the scores of suspects are relatively low compared to true worms. Furthermore, the Zstr metric shows the best separation and has the added advantage of preserving the privacy of the exchanged content. These metrics can also be applied to ingress/egress traffic correlation, especially for polymorphic worms that might reorder their content.

Two interesting observations arise from this data. In the LCSeq plot, the circle represents the similarity score when exchanging alerts among sites that PAYL generated for CR and CR II. LCSeq is the only metric that provided a relatively high score, while the others provided less compelling scores. Upon reviewing the tcpdump of CR and CR II, both contained the string: 
```
GET./default.ida?........u9090%u6858%ucbd3%u7801%u9090%u6858%ucbd3%
```
CR had a string of repeated "N," and CR II had a string of repeated "X" padding their content. Since subsequences do not need to be adjacent in the LCSeq metric, LCSeq ignored the repetitions of the unmatched "N" and "X" substrings and successfully identified the common substrings. LCS also had a higher-than-average score but not as good as LCSeq. This example suggests that polymorphic worms attempting to mask themselves by changing their padding may be detectable by cross-site collaboration under the LCSeq metric.

Another observation is that the LCSeq and LCS results display several packet content alerts with high similarity scores. These were false alerts generated by the correlation among the sites, with scores ranging from 0.4 to 0.5. Although these scores are still much smaller than the worm scores, they are outliers since they exceeded the score threshold used in this experiment. Upon inspecting the content of these packets, we found long padded strings attempting to hide the HTTP headers. Some proxies try to hide query identity by replacing some headers with meaningless characters, such as a string of "Y"s. Such payloads were correlated as true alerts using LCSeq/LCS metrics, although they are not worms. However, these anomalies did not appear when using the Zstr metric, as the long string of "Y"s used in padding the HTTP header only influences one position in the Z-string and has no impact on the remainder.

These results suggest that cross-site collaboration can greatly help identify the early appearance of new zero-day worms while reducing the false positive rates of the constituent PAYL anomaly detectors. The similarity scores between worms and their variants are much higher than those between true false positives (normal data incorrectly deemed anomalies) and can be readily separated with high accuracy.

When several sites on the Internet detect similar anomalous payloads directed at them, they can confirm and validate with high confidence that an attack is underway. As mentioned earlier, this strategy can also solve the limited buffer size problem described in Section 4.3. If we consider only one single host, a stealthy worm can hibernate for a long period until a record of its appearance as an anomaly is no longer stored in the buffer of suspect packets. However, in the context of collaborating sites, the suspect anomaly can be corroborated by another site that may have a record of it in their buffer, as a remote site may have a larger buffer or may have received the worm at a different time. The distributed sites essentially serve as a remote long-term store of information, extending the local buffer memory available at one site. Further, this strategy concurrently generates content filtering signatures. Any two sites that correlate and validate suspects as being true worms both have the actual packet content from which to generate a signature, even if only Z-strings are exchanged between those sites.

### Conclusion

In this paper, we provided experimental evidence that payload anomaly detection and content alert correlation, either on the host or across hosts and sites, hold promise for the early detection of zero-day worm outbreaks. It is important to note that the range of worms tested and reported in the paper is limited in number and scope. We hope that others with substantially larger zoos might make them available for testing or to repeat the experiments reported herein to validate the results. Although we used real packet traces from three sources, a larger-scale study of the methods described in this paper is necessary to understand whether the methods scale as we conjecture and whether sites' content flows provide the necessary diversity to more readily detect common attack exploits that each may see during a worm outbreak.

PAYL can accurately detect new worms without signatures. Correlating content alerts generated by PAYL reduces false alarms and generates detailed content signatures that may be used for filtering worm attacks at multiple sites. We believe that worm writers will face substantially new and effective defenses, and we wish them nothing but failure and frustration in attempting to thwart these new generation defensive systems. We further posit that the worm problem will ultimately be solved by defensive "coalitions," making network systems generally safe from at least this class of cyber attacks for the foreseeable future.

### Acknowledgments

We would like to thank Janak J. Parekh and Wei-Jen Li for their help in collecting data, setting up the experiments, and for useful discussions and helpful comments on this paper.

### References

[1] S. Bhatkar, D. C. DuVarney, R. Sekar. Address Obfuscation: An Efficient Approach to Combat a Broad Range of Memory Error Exploits, 12th USENIX Security Symposium, 2003.
[2] M. Damashek. Gauging Similarity with n-grams: Language-Independent Categorization of Text. Science, 267(5199):843--848, 1995.
[3] D. Gusfield. Algorithms on Strings, Trees and Sequences, Cambridge University Press, 1997.
[4] J. O. Kephart and W. C. Arnold. Automatic Extraction of Computer Virus Signatures. In Proceedings of the 4th International Virus Bulletin Conference, Sept. 1994.
[5] K.-A Kim and B. Karp. Autograph: Toward Automated Distributed Worm Distribution, In Proceedings of the USENIX Security Symposium, August 2004.
[6] O. Kolesnikov, W. Lee, "Advanced Polymorphic Worms: Evading IDS by Blending in with Normal Traffic", Tech Report, GIT-CC-05-09, 2005.
[7] C. Kreibich and J. Crowcroft. Honeycomb: Creating Intrusion Detection Signatures Using Honeypots, In Proceedings of the 2nd Workshop on Hot Topics in Networks (HotNets-II), November 2003.
[8] W. Li, K. Wang, S. Stolfo, and B. Herzog. Fileprints: Identifying File Types by N-gram Analysis, In the Proceedings of the 2005 IEEE Workshop on Information Assurance and Security, June 2005.
[9] R. Lippmann, et al. The 1999 DARPA Off-Line Intrusion Detection Evaluation, Computer Networks 34(4) 579-595, 2000.
[10] M. Locasto, J. Parekh, S. Stolfo, A. Keromytis, T. Malkin, and V. Misra. Collaborative Distributed Intrusion Detection, Columbia University Tech Report CUCS-012-04, 2004.
[11] D. Moore, V. Paxson, S. Savage, C. Shannon, S. Staniford, and N. Weaver. The Spread of the Sapphire/Slammer Worm, http://www.cs.berkeley.edu/~nweaver/sapphire/
[12] D. Moore and C. Shannon. Code-Red: A Case Study on the Spread and Victims of an Internet Worm, In Proceedings of the 2002 ACM SIGCOMM Internet Measurement Workshop (IMW 2002), November 2002.
[13] D. Moore, C. Shannon, G. Voelker, and S. Savage. Internet Quarantine: Requirements for Containing Self-Propagating Code. In IEEE Proceedings of the INFOCOM, Apr. 2003.
[14] S. Sidiroglou and A. D. Keromytis. Countering Network Worms through Automatic Patch Generation. To appear in IEEE Security and Privacy 2005.
[15] S. Singh, C. Estan, G. Varghese, and S. Savage. Automated Worm Fingerprinting, Sixth Symposium on Operating Systems Design and Implementation (OSDI), 2004.
[16] S. Staniford, V. Paxson, and N. Weaver. How to Own the Internet in Your Spare Time. In Proceedings of the USENIX Security Symposium, Aug. 2002.
[17] S. Stolfo. Collaborative Security, The Black Book on Corporate Security, Ch 9. Larstan Publishing, 2005.
[18] V. Yegneswaran, P. Barford, and S. Jha. Global Intrusion Detection in the DOMINO Overlay System. In Proceedings of Network and Distributed System Security Symposium (NDSS), Feb, 2004.
[19] H. J. Wang, C. Guo, D. R. Simon, and A. Zugenmaier. Shield: Vulnerability-Driven Network Filter for Preventing Known Vulnerability Exploits. In Proceedings of the ACM SIGCOMM Conference, Aug. 2004.
[20] K. Wang and S. Stolfo. Anomalous Payload-Based Network Intrusion Detection, in Proceedings of Recent Advances in Intrusion Detection (RAID), Sept. 2004.