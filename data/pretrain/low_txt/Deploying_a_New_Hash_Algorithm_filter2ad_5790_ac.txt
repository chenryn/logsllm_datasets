### Section 5.4: Transition to a Negotiated PRF

As with the digitally-signed element, we recommend that the transition to a negotiated Pseudorandom Function (PRF) occur in a future version of TLS.

### 5.6: The Finished Message

The TLS Finished message is computed by applying the TLS PRF over the master secret and the concatenation of two digests of the handshake messages, one using MD5 and the other using SHA-1. The same considerations apply here as with the PRF. The hash itself is unkeyed, although both sides contribute random nonces. This design modestly reduces memory requirements on the client and server. HMAC-based MACs require the key to be available at the beginning of the MAC computation, but the key is only available after the key exchange. Therefore, using HMAC directly would require storing the initial handshake messages. The hash-then-PRF technique only requires storing the hash state.

There is a potential risk in this design, as keyed hashes are generally more resistant to attacks than simple hashes. However, because the attacker cannot control the client messages and can only slightly influence the server’s messages (by modifying the client messages in flight to produce a different negotiation result), the ability to create collisions is insufficient to mount a successful attack.

#### Transition Approaches

The obvious approach to transition is to replace the pair of hashes with the negotiated hash function used for the message MAC. However, this requires both sides to store the handshake messages until the MAC algorithm is decided (in the ServerHello). This necessitates a modest change in TLS implementation behavior and a slight increase in storage requirements.

An alternative design would be to replace the "digest then PRF" construction with a MAC directly over the handshake messages. This would have only slightly higher storage requirements and be modestly more secure in the event of preimage attacks on the underlying hash function. We consider either approach adequate, though we believe that the security considerations outweigh the memory issue and therefore recommend transitioning to a simple MAC over the messages.

### 5.7: Attacks

As with S/MIME, we consider the problem of protecting switch-hitting implementations during the transition period. The general form of the attack is for the adversary to force one or both sides to believe that the other side is an old implementation and convince them to use weaker algorithms, thus rendering them susceptible to attack.

We can divide these attacks into two categories:

1. **Attacker with a Valid Certificate**: If the attacker has obtained a valid certificate for one side of the connection (most likely the server) and knows the corresponding private key, no complete defense is possible other than turning off the old algorithm. The attacker can simply intercept the connection and use its certificate. Partial defenses include rejecting newer certificates signed with weak algorithms and SSH-style fingerprint comparison.

2. **Attacker without a Valid Certificate**: If the attacker does not have a valid certificate, they must attack the negotiation more indirectly. However, because the negotiation is protected by a MAC computed using the PRF, the attacker must be able to predict the PRF output to predict the key used for the PRF. As argued in Section 5.5, this would require a very serious break of HMAC and most likely that the attacker can compute preimages, making a direct attack on certificates possible.

### 6: Design Principles for Algorithm Agility

It is clear from our analyses that designing for algorithm agility is more challenging than initially thought. In this section, we present some suggestions for protocol design that may make future transitions smoother.

#### 6.1: Avoid Hardwired Cryptographic Algorithms

Any protocol that depends on a single hardwired algorithm is inherently brittle. If that algorithm is broken, it can be very difficult to repair the protocol. This is particularly evident in the case of DSA; the transition from SHA-1 to another digest algorithm will be much more difficult than with RSA, as the hash algorithm and the signature algorithm will need to be replaced simultaneously. Similarly, the decision to hardwire MD5 and SHA-1 into the basic structure of SSL/TLS necessitates far more protocol re-engineering than if the algorithms had been parameterized in the first place.

#### 6.2: Provide Mechanisms for Capability Discovery and/or Negotiation

Even if a protocol allows for the use of multiple algorithms, algorithm transitions can be difficult to accomplish if the agents do not have good information about the capabilities of the peers with which they wish to communicate. In session-oriented protocols such as TLS or IPsec, this information is easy to exchange by incorporating an algorithm negotiation phase in the session establishment. In store-and-forward protocols, however, the problem is much more difficult and generally requires some sort of directory that can be used by agents to advertise their capabilities. In both kinds of protocols, it is important to allow for the advertisement of capabilities for every parameter. S/MIME, TLS, and IPsec all fail this test.

#### 6.3: Early Capability Discovery

Even protocols that allow negotiation often fail to do so early enough in the exchange. In the best case, one party must try to adapt to whatever is eventually chosen, possibly resulting in increased computational costs (as with TLS CertificateVerify messages or S/MIME multiple signatures). In the worst case, one side must guess about the other side’s capabilities, and a wrong guess results in non-interoperability or a requirement for manual reconfiguration (as with S/MIME single signatures or IPsec hash functions).

To avoid this, protocol designers should allow negotiation/capability discovery to happen as early in the communication process as possible. There is a tradeoff to consider: if discovery is done entirely before cryptography, it can introduce extra latency (e.g., one round trip for the discovery/negotiation, then another for the cryptography). Careful protocol design can mitigate this to some extent. For instance, the hash negotiation technique described in Section 5.4 implies some cryptography before algorithm negotiation but can be implemented with only a small working buffer. IKE already includes a capability discovery exchange in the right place; the problem is that some necessary capabilities were not negotiated. Another approach is to design protocols where one peer is optimistic but can fall back if they guess wrong, as in [35].

#### 6.4: Avoid Downgrade Attacks

Downgrade attacks are a persistent problem with negotiation in security protocols. There are generic techniques for protecting negotiation in session-oriented protocols (typically by computing a MAC over the handshake messages), but they cannot be guaranteed to work if the MAC or key exchange algorithms are broken. Although TLS and IPsec do a fairly good job of this via HMAC, which is largely unaffected by the current level of attacks, they are still at risk if hash compromises lead to compromise of the certificate system used to authenticate the key establishment phase. The downgrade problem is substantially harder with store-and-forward protocols. For instance, in the case of S/MIME multiple signatures, the attacker can simply delete the stronger signature. In general, although defenses against downgrade are important to incorporate, sufficiently powerful attacks on the cryptographic algorithms will require agents to stop accepting those algorithms.

### 7: Conclusions

It is clear that new hash functions or new methods of employing hash functions are necessary. However, as we have demonstrated, neither the specifications nor the implementations are ready for the transition. We have presented an analysis of transition strategies for S/MIME and TLS; analysis of other protocols, including IPsec and DNSsec, appears in [1]. We strongly urge the analysis of other protocols that use hash functions. Prominent candidates include OpenPGP [4] and Secure Shell [38, 39].

For the protocols we analyzed, we present recommendations to implementors and the IETF. These changes are necessary to prepare for the transition. We suggest that they be made as quickly as possible to provide maximum secure interoperability when new hash functions are ready.

When protocol upgrades are being designed, consideration should be given to signature algorithm agility as well. In most cases, the signaling will have to be done in the same place as for hash functions. However, some of the overloading options are inappropriate for signature algorithms. For example, in IPsec, one might use the appearance of a new hash algorithm in the SA proposal as a signal that one party supports a new hash algorithm in one context, and hence presumably in another. There is no obvious way to extend this to, say, support of ECC signatures.

### S/MIME Recommendations

Implementors of S/MIME should ensure that their product handles multiple signatures properly. Programs should report success with one signature while warning about unverifiable signatures. MD5 should never be used for digests, as all conforming implementations already support SHA-1.

The IETF should develop a method for indicating digest function capabilities in certificates, CA vendors should implement it, and new certificates should contain explicit statements about hash functions supported.

The IETF should define a TLS extension by which servers can signal support for newer certificates. The IETF should pick one of the two suggested alternatives for supporting client-side certificates properly. The IETF should consider making the PRF depend on the MAC algorithm in a future version of TLS. The definition of the digitally-signed element should be amended to support new hash functions. The definition of the Finished message should be amended to support new hash functions.

### DSA Considerations

DSA presents a special problem, as it may only be employed with SHA-1. NIST needs to clarify this situation, either by defining DSA-2 or by describing how DSA can be used with randomized hashes or truncated longer hashes.

The problems we have described here are symptomatic of a more general problem. Most security protocols allow for algorithm negotiation at some level. However, it is clear that this has never been thoroughly tested. Virtually all of the protocols we have examined have some wired-in assumptions about a common base of hash functions. It is a truism in programming that unexercised code paths are likely to be buggy. The same is true in cryptographic protocol design.

### Acknowledgments

The authors would like to thank Russ Housley for his detailed review of this paper. We would also like to thank Alex Alten, Steve Burnett, Hal Finney, Eu-Jin Goh, Peter Gutmann, Steve Henson, Charlie Kaufman, John Kelsey, Ben Laurie, Arjen Lenstra, Blake Ramsdell, Hovav Shacham, Benne de Weger, and the referees for their advice and comments.

### References

[1] S. M. Bellovin and E. K. Rescorla. Deploying a new hash algorithm. Technical Report CUCS-036-05, Dept. of Computer Science, Columbia University, October 2005.
[2] E. Biham, R. Chen, A. Joux, P. Carribault, C. Lemuet, and W. Jalby. Collisions of SHA-0 and Reduced SHA-1. Proceedings of Eurocrypt '05, 2005.
[3] S. Blake-Wilson, M. Nystrom, D. Hopwood, J. Mikkelsen, and T. Wright. Transport Layer Security (TLS) Extensions. RFC 3546, June 2003.
[4] J. Callas, L. Donnerhacke, H. Finney, and R. Thayer. OpenPGP Message Format. RFC 2440, November 1998.
[5] G. Chudov and S. Leontiev. Addition of GOST ciphersuites to Transport Layer Security (TLS), May 2004. draft-chudov-cryptopro-cptls-01.txt.
[6] T. Dierks and C. Allen. The TLS Protocol Version 1.0. RFC 2246, January 1999.
[7] H. Dobbertin. Cryptanalysis of MD4 (Third Workshop on Cryptographic Algorithms, Cambridge 1996). Lecture Notes in Computer Science, pages 55–72, 1996.
[8] H. Dobbertin. The First Two Rounds of MD4 are Not One-Way. Lecture Notes in Computer Science, 1372, 1998.
[9] P. Gutmann. Personal communication, 2005.
[10] S. Halevi and H. Krawczyk. Strengthening Digital Signatures via Randomized Hashing, May 2005. draft-irtf-cfrg-rhash-00.txt.
[11] S. Henson. Personal communication, 2005.
[12] R. Housley. Cryptographic Message Syntax (CMS). RFC 3852, July 2004.
[13] R. Housley, W. Polk, W. Ford, and D. Solo. Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile. RFC 3280, April 2002.
[14] J. Jonsson and B. S. Kaliski. Public-key cryptography standards (PKCS) #1: RSA cryptography specifications version 2.1. RFC 3447, Internet Engineering Task Force, Feb. 2003.
[15] A. Jøsang, D. Povey, and A. Ho. What you see is not always what you sign.
[16] K. Kain, S. Smith, and R. Asokan. Digital Signatures and Electronic Documents: A Cautionary Tale. Kluwer Academic Publishers, 2002.
[17] J. Klensin. Simple Mail Transfer Protocol. RFC 2821, April 2001.
[18] L. D. Kozaryn. DoD issues time-saving Common Access Cards, 10 October 2000. American Forces Information Service, http://www.defenselink.mil/news/Oct2000/n10102000_200010107.html.
[19] H. Krawczyk. SIGMA: The ‘SIGn-and-MAc’ Approach to Authenticated Diffie-Hellman and its Use in the IKE Protocol, June 2003. http://www.ee.technion.ac.il/~hugo/sigma.ps.
[20] H. Krawczyk, M. Bellare, and R. Canetti. HMAC: Keyed-Hashing for Message Authentication. RFC 2104, February 1997.
[21] A. Lenstra, X. Wang, and B. de Weger. Colliding X.509 Certificates. In Proceedings of ACISP, 2005. To appear. Online: http://eprint.iacr.org/2005/067.
[22] National Institute of Standards and Technology, U.S. Department of Commerce. Digital Signature Standard, 2000. FIPS PUB 186-2.
[23] National Institute of Standards and Technology, U.S. Department of Commerce. Secure Hash Standard, 2002. FIPS PUB 180-2.
[24] National Institute of Standards and Technology, U.S. Department of Commerce. Personal identity verification (PIV) of federal employees and contractors, 2005. FIPS PUB 201.
[25] B. Ramsdell. Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.1 Certificate Handling. RFC 3850, July 2004.
[26] B. Ramsdell. Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.1 Message Specification. RFC 3851, July 2004.
[27] B. Ramsdell. Personal communication, 2005.
[28] E. Rescorla. Diffie-Hellman Key Agreement Method. RFC 2631, June 1999.
[29] E. Rescorla. HTTP Over TLS. RFC 2818, May 2000.
[30] E. Rescorla. "MD5 Collisions in PostScript Files", June 2005. http://www.educatedguesswork.org/movabletype/archives/2005/06/md5_collisions.html.
[31] R. Rivest. MD4 Message Digest Algorithm. RFC 1186, October 1990.
[32] R. Rivest. The MD5 Message-Digest Algorithm. RFC 1321, April 1992.
[33] J. Rosenberg, H. Schulzrinne, G. Camarillo, A. Johnston, J. Peterson, R. Sparks, M. Handley, and E. Schooler. SIP: Session Initiation Protocol. RFC 3261, June 2002.
[34] S. Santesson. X.509 Certificate Extension for S/MIME Capabilities, May 2005. draft-ietf-smime-certcapa-05.txt.
[35] H. Shacham, D. Boneh, and E. Rescorla. Client-side caching for TLS. ACM Transactions on Information and System Security (TISSEC), 7:553–575, Nov 2004.
[36] X. Wang, Y. Yin, and H. Yu. Collision Search Attacks on SHA1, 2005. http://theory.csail.mit.edu/~yiqun/shanote.pdf.
[37] X. Wang and H. Yu. How to Break MD5 and Other Hash Functions. In Proceedings of Eurocrypt '05, 2005.
[38] T. Ylonen. SSH – secure login connections over the Internet. In Proceedings of the Sixth Usenix Unix Security Symposium, pages 37–42, July 1996.
[39] T. Ylonen. SSH protocol architecture, 2005. draft-ietf-secsh-architecture-22.txt.