### Defensive Solutions Against Pivoting-Based Techniques

Several defensive solutions have been proposed to counter pivoting-based techniques [28, 33, 34]. One of the most widely deployed is EMET (Enhanced Mitigation Experience Toolkit) [28], a solution developed by Microsoft. EMET is a utility designed to prevent vulnerabilities in software from being successfully exploited. Among its features, EMET addresses stack pivoting attacks by checking if the stack pointer points outside the process stack boundaries whenever a dangerous API is invoked. However, multiple researchers have demonstrated that it is possible to bypass EMET in various ways [24, 18, 37]. These studies highlight the importance of extensively testing and carefully designing technologies that operate at the same execution level as malicious code to ensure they provide the desired protection and avoid potential bypasses. Consequently, these findings also underscore the need for reference monitors that operate at a lower level, such as at the hypervisor level, to mitigate such trivial attacks. An example of such a solution is Graffiti.

### New Countermeasures by Microsoft

Microsoft has recently introduced two new countermeasures to hinder browser exploitation: isolated heap and delayed free [25, 45]. These techniques raise the bar for use-after-free attacks. According to Fortinet Labs researchers [19], these measures make heap manipulation more difficult, but they are not a comprehensive solution, as they only protect the Internet Explorer browser.

### Conclusion

In this paper, we propose an efficient and comprehensive solution to defeat spraying attacks by tracking memory allocations in an OS-independent manner. Our contributions include:

1. **Introduction of Micro-Virtualization**: This concept allows us to design an efficient and effective memory allocator tracker.
2. **Graffiti Framework**: We present Graffiti, a general and extensible memory analysis framework that offers good performance and is freely available and open-source.
3. **Heuristics for Detecting and Preventing Spraying Attacks**: We have developed three heuristics to detect and prevent spraying attacks.

We believe that Graffiti can be extended and adopted in other domains, such as malware analysis and memory forensics, in the future.

### References

[1] Alexa top domains. http://www.alexa.com/topsites/category/.

[2] Rop attack against data execution prevention technology, http://www.h-online.com/security/news/item/Exploit-s-new-technology-trick-dodges-memory-protection-959253.html. 2009.

[3] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. Control-flow integrity. In Proceedings of the 12th ACM Conference on Computer and Communications Security, CCS '05, pages 340–353, New York, NY, USA, 2005. ACM.

[4] Greg Gagne, Avi Silberschatz, and Peter Baer Galvin. Operating system concepts. http://os-book.com/.

[5] Piotr Bania. Jit spraying and mitigations. arXiv preprint arXiv:1009.1038, 2010.

[6] Emery D. Berger and Benjamin G. Zorn. Diehard: Probabilistic memory safety for unsafe languages. SIGPLAN Not., 41(6):158–168, June 2006.

[7] Eep Bhatkar, Daniel C. Duvarney, and R. Sekar. Address obfuscation: An efficient approach to combat a broad range of memory error exploits. In Proceedings of the 12th USENIX Security Symposium, pages 105–120, 2003.

[8] Sandeep Bhatkar, R. Sekar, and Daniel C. DuVarney. Efficient techniques for comprehensive protection from memory error exploits. In Proceedings of the 14th Conference on USENIX Security Symposium - Volume 14, SSYM'05, pages 17–17, Berkeley, CA, USA, 2005. USENIX Association.

[9] Sang Kil Cha, Thanassis Avgerinos, Alexandre Rebert, and David Brumley. Unleashing Mayhem on binary code. In IEEE Symposium on Security and Privacy, pages 380–394, May 2012.

[10] Liang Chen and Qidan He. Shooting the OSX El Capitan kernel like a sniper, 2016. https://speakerdeck.com/flankerhqd/shooting-the-osx-el-capitan-kernel-like-a-sniper.

[11] Ping Chen, Yi Fang, Bing Mao, and Li Xie. Jitdefender: A defense against JIT spraying attacks. In Jan Camenisch, Simone Fischer-Hbner, Yuko Murayama, Armand Portmann, and Carlos Rieder, editors, SEC, volume 354 of IFIP Advances in Information and Communication Technology. Springer, 2011.

[12] Crispin Cowan, Matt Barringer, Steve Beattie, Greg Kroah-hartman, Mike Frantzen, and Jamie Lokier. Formatguard: Automatic protection from printf format string vulnerabilities. In Proceedings of the 10th USENIX Security Symposium, 2001.

[13] Crispin Cowan, Calton Pu, Dave Maier, Heather Hinton, Jonathan Walpole, Peat Bakke, Steve Beattie, Aaron Grier, Perry Wagle, and Qian Zhang. Stackguard: Automatic adaptive detection and prevention of buffer-overflow attacks. In Proceedings of the 7th USENIX Security Symposium, pages 63–78, 1998.

[14] Mark Daniel, Jake Honoroff, and Charlie Miller. Engineering heap overflow exploits with JavaScript, 2008.

[15] eEye Research. Microsoft Internet Information Services remote buffer overflow (system level access), https://web.archive.org/web/20061026101830/http://research.eeye.com/html/advisories/published/AD20010618.html. 2001.

[16] Manuel Egele, Peter Wurzinger, Christopher Kruegel, and Engin Kirda. Defending browsers against drive-by downloads: Mitigating heap-spraying code injection attacks. In Proceedings of the 6th International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment, DIMVA '09, pages 88–106, Berlin, Heidelberg, 2009. Springer-Verlag.

[26] Lixin Li, James E. Just, and R. Sekar. Address-space randomization for Windows systems. In ACSAC, pages 329–338. IEEE Computer Society, 2006.

[17] Aristide Fattori, Roberto Paleari, Lorenzo Martignoni, and Mattia Monga. Dynamic and transparent analysis of commodity production systems. In Proceedings of the 25th International Conference on Automated Software Engineering (ASE), Antwerp, Belgium, September 2010. https://code.google.com/p/hyperdbg/.

[18] FireEye. Using EMET to disable EMET. https://www.fireeye.com/blog/threat-research/2016/02/using_emet_to_disabl.html.

[19] Fortinet Labs. Is use-after-free exploitation dead? The new IE memory protector will tell you. http://blog.fortinet.com/.

[20] Ivan Fratric. Exploiting Internet Explorer 11 64-bit on Windows 8.1 preview, 2013. https://ifsec.blogspot.com/2013/11/exploiting-internet-explorer-11-64-bit.html.

[21] Francesco Gadaleta, Yves Younan, and Wouter Joosen. Bubble: A JavaScript engine level countermeasure against heap-spraying attacks. In Fabio Massacci, Dan Wallach, and Nicola Zannone, editors, ESSoS, Pisa, 3-4 February 2010. Springer Berlin / Heidelberg, January 2010.

[22] Wei Hu, Jason Hiser, Dan Williams, Adrian Filipi, Jack W. Davidson, David Evans, John C. Knight, Anh Nguyen-Tuong, and Jonathan Rowanhill. Secure and practical defense against code-injection attacks using software dynamic translation. In Proceedings of the 2nd International Conference on Virtual Execution Environments, VEE '06, pages 2–12, New York, NY, USA, 2006. ACM.

[23] Intel Corporation. Intel 64 and IA-32 Architectures Software Developer’s Manual - Volume 3 (3A,3B,3C combined), March 2013.

[24] Bromium Labs. Bypassing EMET 4.1. http://bromiumlabs.files.wordpress.com/2014/02/bypassing-emet-4-1.pdf.

[25] MWR Labs. Isolated heap & friends - object allocation hardening in web browsers. https://labs.mwrinfosecurity.com/blog/2014/06/20/isolated-heap-friends---object-allocation-hardening-in-web-browsers/.

[27] Martin Jauernig, Matthias Neugschwandtner, Paolo Milani-Comparetti, and Christian Platzer. Lobotomy: An architecture for JIT spraying mitigation. In Proceedings of the International Conference on Availability, Reliability and Security (ARES), September 2014.

[28] Microsoft. The Enhanced Mitigation Experience Toolkit. http://support.microsoft.com/kb/2458544.

[29] Microsoft. Structured exception handling overwrite protection (SEHOP). http://support.microsoft.com/kb/956607.

[30] Gil Neiger, Amy Santoni, Felix Leung, Dion Rodgers, and Rich Uhlig. Intel Virtualization Technology: Hardware Support for Efficient Processor Virtualization. Intel Technology Journal, 10(3):167–177, August 2006.

[31] Gene Novark, Emery D. Berger, and Benjamin G. Zorn. Exterminator: Automatically correcting memory errors with high probability. In Jeanne Ferrante and Kathryn S. McKinley, editors, PLDI, pages 1–11. ACM, 2007.

[32] Michalis Polychronakis and Angelos D. Keromytis. ROP payload detection using speculative code execution. In Malicious and Unwanted Software (MALWARE), 2011 6th International Conference on, pages 58–65. IEEE, 2011.

[33] Aravind Prakash and Heng Yin. Defeating ROP through denial of stack pivot. In Proceedings of the 31st Annual Computer Security Applications Conference, ACSAC 2015, pages 111–120, New York, NY, USA, 2015. ACM.

[34] Rui Qiao, Mingwei Zhang, and R. Sekar. A principled approach for ROP defense. In Proceedings of the 31st Annual Computer Security Applications Conference, ACSAC 2015, pages 101–110, New York, NY, USA, 2015. ACM.

[35] Rapid7. Metasploit penetration testing software. http://www.metasploit.com.

[36] Paruj Ratanaworabhan, Benjamin Livshits, and Benjamin Zorn. Nozzle: A defense against heap-spraying code injection attacks. In Proceedings of the Usenix Security Symposium, August 2009.

[37] Duo Security. Wow64 and so can you: Bypassing EMET with a single instruction. https://duo.com/assets/pdf/wow-64-and-so-can-you.pdf.

[38] Skylined. Microsoft Internet Explorer 6 - (iframe tag) buffer overflow exploit, 2004. https://www.exploit-db.com/exploits/612/.

[39] Skylined. Heap spraying high addresses in 32-bit Chrome/Firefox on 64-bit Windows, 2016. http://blog.skylined.nl/20160622001.html.

[40] Kevin Snow, Srinivas Krishnan, Fabian Monrose, and Niels Provos. Shellos: Enabling fast detection and forensic analysis of code injection attacks. In USENIX Security Symposium, 2011.

[41] Kevin Z. Snow, Fabian Monrose, Lucas Davi, Alexandra Dmitrienko, Christopher Liebchen, and Ahmad-Reza Sadeghi. Just-in-time code reuse: On the effectiveness of fine-grained address space layout randomization. In Proceedings of the 2013 IEEE Symposium on Security and Privacy, SP '13, pages 574–588, Washington, DC, USA, 2013. IEEE Computer Society.

[42] Alexander Sotirov. Heap feng shui in JavaScript, 2007.

[43] The PaX Team. PaX address space layout randomization. Technical report http://pax.grsecurity.net/docs/aslr.txt.

[44] Team Teso. 7350854.c, 2001. https://www.exploit-db.com/exploits/409/.

[45] TrendMicro Labs. Mitigating UAF exploits with Delay Free for Internet Explorer. http://blog.trendmicro.com/trendlabs-security-intelligence/mitigating-uaf-exploits-with-delay-free-for-internet-explorer/.

[46] Vupen. Microsoft Internet Explorer javaprxy.dll COM Object Vulnerability / Exploit (Security Advisories). http://www.vupen.com/english/advisories/2005/0935.

[47] Vupen. Microsoft Internet Explorer "Msdds.dll" Remote Code Execution / Exploit (Security Advisories). http://www.vupen.com/english/advisories/2005/1450.