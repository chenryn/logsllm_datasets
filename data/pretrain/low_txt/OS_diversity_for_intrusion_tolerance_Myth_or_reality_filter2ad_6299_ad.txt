### Two Subsets: Historical and Observed Periods

The data is divided into two subsets: the historical period, which includes data from 1994 to 2005 (comprising 2/3 of the valid vulnerabilities), and the observed period, which covers the years 2006 to 2010 (comprising 1/3 of the valid vulnerabilities). The objective is to use the historical period to select groups of operating systems (OSes) for a hypothetical intrusion-tolerant system (e.g., BFS [3] or DepSpace [7]), and then use the data from the observed period to verify if the number of shared vulnerabilities is as low as expected.

Table V presents the results of the analysis for groups of Isolated Thin Servers. The experiment excludes Ubuntu, OpenSolaris, and Windows 2008 due to insufficient data during the historical period. In the table, values above the diagonal line and to the right correspond to common vulnerabilities in pairs of OSes during the historical period. Values to the left and below the diagonal line represent the results from the observed period.

### Base Case: Tolerating a Single Intrusion

For the base case, consider a scenario where one wants to tolerate a single intrusion (i.e., f = 1) in a set of four identical (non-diverse) replicas. The best strategy in this scenario would be to select the OS with the fewest vulnerabilities during the historical period. Debian would be the optimal choice because it had only 16 vulnerabilities that could be remotely exploited, either in the drivers, kernel, or system programs. Over the observed period, this system would have 9 shared vulnerabilities (i.e., those reported for Debian between 2006 and 2010) that could compromise the four replicas of the hypothetical system (see Figure 3).

If one had chosen to employ the "most diverse" operating system group based on the historical period, the selected OSes would be Set1 in Figure 3, consisting of {Windows 2003, Solaris, Debian, and OpenBSD}. During the observed period, this set would only have one vulnerability affecting two of the replicas—OpenBSD and Windows 2003. Alternatively, if NetBSD were substituted for OpenBSD, three extra common vulnerabilities would be added during the historical period. However, during the observed period, there would still be only one common vulnerability (between NetBSD and Windows 2003). Therefore, in both configurations of the intrusion-tolerant system, the number of common vulnerabilities would be extremely small and lower than in the base case.

### Exploring Diversity Across OS Releases

This section presents preliminary results on exploring diversity across OS releases. We examined security advisories (or trackers) available on various OS websites to determine if they correlate the vulnerabilities patched in each release with the information in the National Vulnerability Database (NVD). This correlation was found in a meaningful way in four of the OSes under study: NetBSD, Debian, Ubuntu, and RedHat. From all combinations of pairs of these OSes in an Isolated Thin Server configuration, the pair with the highest number of common vulnerabilities is Debian-RedHat (see Tables III and IV).

Table VI presents the number of common vulnerabilities for three releases of Debian and RedHat, spread over the following years: Debian 2.1 (1999), Debian 3.0 (2002), Debian 4.0 (2007), RedHat 6.2* (2000), RedHat 4.0 (2005), and RedHat 5.0 (2007). One can observe that even though Debian-RedHat shared a total of eleven vulnerabilities, the (OS, release) pairs are mostly without common flaws, both in the case of the same OS but different releases (left side of the table) and between different operating systems (right side of the table). These benefits were also reported in previous work related to non-security bugs for database management systems [18].

### Summary of the Results

The main findings of the study can be summarized as follows:

1. The number of common vulnerabilities in the studied operating system pairs was reduced by 56% on average if application and locally-exploitable vulnerabilities are filtered out.
2. More than 50% of the 55 OS pairs studied have at most one non-application, remotely exploitable common vulnerability.
3. The top-3 diverse setups for a four-replica system (tolerating a single failure in typical intrusion-tolerant systems) are: {Windows 2003, Solaris, Debian, and OpenBSD}, {Windows 2003, Solaris, Debian, and NetBSD}, and {Windows 2003, Solaris, RedHat, and NetBSD}.
4. A preliminary analysis of the diversity among different versions of Debian and RedHat distributions suggests that there are possible setups with the same OS that have a disjoint set of vulnerabilities.
5. There are two vulnerabilities from 2007 and 2008 that affect six OSes, and one vulnerability from 2008 that affected nine OSes.
6. Driver vulnerabilities account for only a very small set (less than 1.5%) of all reported OS vulnerabilities.

### Limitations of NVD and Its Implications

The numbers presented are intriguing and point to potential security gains from assembling an intrusion-tolerant system using different operating systems. However, they are not definitive evidence. Even though the NVD is arguably the most complete and referenced database for security vulnerabilities and is regularly updated with contributions from several sources, there are several uncertainties about the data, which limit the claims we can make about the benefits of diversity to increase security.

Ozment [31] points out some problems with the NVD, including chronological inconsistency, inclusion, separation of events, and documentation. For our purposes, the first two and the last one are the most relevant. "Chronological inconsistency" means that the NVD data has inherent inaccuracies about the dates when vulnerabilities were discovered and when the vulnerable code was released, complicating reasoning about the lifetime of vulnerabilities and affecting the versions that are vulnerable. "Inclusion" refers to the fact that not all vulnerabilities are included in the NVD, only those with a CVE number. Finally, there is little documentation about the NVD, and the meaning of some fields has occasionally changed without prior notice, making comparisons less meaningful.

### Decisions About Deploying Diversity

We have underscored that these results are only prima facie evidence for the usefulness of diversity. On average, we would expect our estimates to be conservative as we analyzed aggregated vulnerabilities across releases: common vulnerabilities could be much smaller in a "specific set" of diverse OS releases. However, there are limitations on what can be claimed from the analysis of the NVD data alone without further manual analysis. A better analysis would be obtained if the NVD vulnerability reports were combined with exploit reports (including exploit counts) and even better if they also had indications about the users' usage profiles. However, vendors are often wary of sharing such detailed dependability and security information with their customers.

Given these limitations, how can individual user organizations decide whether diversity is a suitable option for them, with their specific requirements and usage profiles? The cost is reasonably easy to assess: costs of the software products, the required middleware (if any), added complexity of management, difficulties with client applications that require vendor-specific features, hardware costs, run-time cost of the synchronization and consistency enforcing mechanisms, and possibly more complex recovery after some failures. The gains in improved security (from some tolerance to 0-day vulnerabilities and easier recovery from some exploits, set against possible extra vulnerabilities due to the increased complexity of the system) are difficult to predict except empirically. This uncertainty will be compounded, for many user organizations, by the lack of trustworthy estimates of their baseline security. We note that, for some users, the evidence we have presented would already indicate that diversity is a reasonable and relatively cheap precautionary choice, even without highly accurate predictions of its effects. These are users who have serious concerns about security (e.g., high costs for interruptions of service or undetected exploits) and applications that can run on multiple operating systems.

### Conclusions

One way to decrease the probability of common vulnerabilities in the replicas of intrusion-tolerant systems is by using diverse OTS software components. In this paper, we analyzed the likelihood of common vulnerabilities in an important class of OTS components used in intrusion-tolerant systems: operating systems. We analyzed more than 15 years of vulnerability reports from the NVD, totaling 2120 vulnerabilities of eleven operating system distributions. The results suggest substantial security gains by using diverse operating systems for intrusion tolerance. We also discussed in detail the limits on the claims we can make about the benefits of diversity from NVD data alone and discussed what additional data, analysis, and clarifications may be needed to increase our confidence about the claims on the benefits of diversity. Despite these limitations, we argue that, on average, our estimates may be seen as conservative as we analyzed aggregated vulnerabilities across releases—hence, common vulnerabilities could be smaller in a "specific set" of diverse OS releases.

### Acknowledgments

We would like to thank Paulo Sousa for his early work on this research effort and Peter Bishop for commenting on earlier drafts. This work was partially supported by the EC through project FP7-257475 (MASSIF) and by the FCT through the Multiannual and the CMU-Portugal Programmes, and the project PTDC/EIA-EIA/100894/2008 (DIVERSE). Ilir Gashi is supported by a Strategic Development Fund (SDF) grant from City University London.

### References

[1] L. Lamport, R. Shostak, and M. Pease, “The Byzantine generals problem,” ACM Trans. on Programming Languages and Systems, vol. 4, no. 3, 1982.

[2] P. Verissimo, N. F. Neves, and M. P. Correia, “Intrusion-tolerant architectures: Concepts and design,” in Architecting Dependable Systems, ser. LNCS, 2003, vol. 2677.

[3] M. Castro and B. Liskov, “Practical Byzantine fault-tolerance and proactive recovery,” ACM Trans. on Computer Systems, vol. 20, no. 4, 2002.

[4] J. Yin, J.-P. Martin, A. Venkataramani, L. Alvisi, and M. Dahlin, “Separating agreement from execution for Byzantine fault-tolerant services,” in Proc. of the ACM Symp. on Operating Systems Principles, 2003.

[5] M. Correia, N. F. Neves, and P. Veríssimo, “How to tolerate half less one Byzantine nodes in practical distributed systems,” in Proc. of the IEEE Symp. on Reliable Distributed Systems, 2004.

[6] M. Abd-El-Malek, G. Ganger, G. Goodson, M. Reiter, and J. Wylie, “Fault-scalable Byzantine fault-tolerant services,” in Proc. of the ACM Symp. on Operating Systems Principles, 2005.

[7] A. N. Bessani, E. P. Alchieri, M. Correia, and J. S. Fraga, “DepSpace: a Byzantine fault-tolerant coordination service,” in Proc. of the ACM/EuroSys Conference on Computer Systems, 2008.

[8] M. Serafini, P. Bokor, D. Dobre, M. Majuntke, and N. Suri, “Scrooge: Reducing the costs of fast Byzantine replication in presence of unresponsive replicas,” in Proc. of the IEEE/IFIP Dependable Systems and Networks, 2010.

[9] H. Moniz, N. F. Neves, M. Correia, and P. Verissimo, “RITAS: Services for randomized intrusion tolerance,” IEEE Trans. on Dependable and Secure Computing, vol. 8, no. 1, 2011.

[10] “National Vulnerability Database,” http://nvd.nist.gov/.

[11] B. Randell, “System structure for software fault tolerance,” IEEE Trans. on Software Engineering, vol. 1, no. 2, 1975.

[12] A. Avizienis and L. Chen, “On the implementation of N-version programming for software fault tolerance during execution,” in Proc. of the IEEE Computer Software and Applications Conf., 1977.

[13] M. K. Joseph and A. Avizienis, “A fault-tolerant approach to computer viruses,” in Proc. of the IEEE Symp. on Research in Security and Privacy, 1988.

[14] S. Forrest, A. Somayaji, and D. H. Ackley, “Building diverse computer systems,” in Proc. of the Workshop on Hot Topics in Operating Systems, 1997.

[15] S. A. Hofmeyr and S. Forrest, “Architecture for an artificial immune system,” Evolutionary Computation, vol. 8, no. 4, 2000.

[16] Y. Deswarte, K. Kanoun, and J.-C. Laprie, “Diversity against accidental and deliberate faults,” in Computer Security, Dependability, and Assurance: From Needs to Solutions, 1998.

[17] R. R. Obelheiro, A. N. Bessani, L. C. Lung, and M. Correia, “How practical are intrusion-tolerant distributed systems?” Department of Informatics, University of Lisbon, DI/FCUL TR 06–15, 2006.

[18] I. Gashi, P. Popov, and L. Strigini, “Fault tolerance via diversity for off-the-shelf products: A study with SQL database servers,” IEEE Trans. on Dependable and Secure Computing, vol. 4, no. 4, 2007.

[19] B. P. Miller, L. Fredriksen, and B. So, “An empirical study of the reliability of UNIX utilities,” Communications of the ACM, vol. 33, no. 12, 1990.

[20] B. Miller, D. Koski, C. Lee, V. Maganty, R. Murthy, A. Natarajan, and J. Steidl, “Fuzz revisited: A re-examination of the reliability of UNIX utilities and services,” University of Wisconsin-Madison, CS-TR 1995–1268, 1995.

[21] A. Chou, J.-F. Yang, B. Chelf, S. Hallem, and D. Engler, “An empirical study of operating systems errors,” in Proc. of the ACM Symp. on Operating Systems Principles, 2001.

[22] A. Ozment and S. E. Schechter, “Milk or wine: Does software security improve with age?” in Proc. of the USENIX Security Symp., 2006.

[23] P. Anbalagan and M. Vouk, “Towards a unifying approach in understanding security problems,” in Proc. of the IEEE Int. Symp. on Software Reliability Engineering, 2009.

[24] P. Koopman and J. DeVale, “Comparing the robustness of POSIX operating systems,” in Proc. of the IEEE Int. Symp. on Fault-Tolerant Computing, 1999.

[25] R. J. Anderson, “Security in open versus closed systems—the dance of Boltzmann, Coase and Moore,” in Conf. on Open Source Software: Economics, Law and Policy, 2002.

[26] E. Rescorla, “Is finding security holes a good idea?” IEEE Security & Privacy, vol. 3, no. 1, 2005.

[27] O. H. Alhazmi and Y. K. Malaiya, “Quantitative vulnerability assessment of systems software,” in Proc. of the Annual Reliability and Maintainability Symp., 2005.

[28] ——, “Application of vulnerability discovery models to major operating systems,” IEEE Trans. on Reliability, vol. 57, no. 1, 2008.

[29] M. R. Lyu, Ed., Handbook of Software Reliability Engineering. McGraw-Hill, 1995.

[30] G. Schryen, “Security of open source and closed source software: An empirical comparison of published vulnerabilities,” in Proc. of the Americas Conf. on Information Systems, 2009.

[31] A. Ozment, “Vulnerability discovery & software security,” Ph.D. dissertation, University of Cambridge, 2007.

[32] B. Littlewood, P. Popov, and L. Strigini, “Modeling software design diversity: A review,” ACM Computing Surveys, vol. 33, no. 2, 2001.

[33] B. Littlewood and L. Strigini, “Redundancy and diversity in security,” in Proc. of the European Symp. on Research Computer Security, 2004.

[34] “CVE terminology,” http://cve.mitre.org/about/terminology.html.

[35] “Common platform enumeration,” http://cpe.mitre.org/.

[36] “CVE details website,” http://www.cvedetails.com/.

[37] A. Ganapathi, V. Ganapathi, and D. Patterson, “Windows XP kernel crash analysis,” in Proc. of the Large Installation System Administration Conference, 2006.

[38] T. Newsham, “Format string attacks,” Guardent, Inc., Tech. Rep., 2000, available from http://www.thenewsh.com/~newsham/format-string-attacks.pdf.

[39] D. Ahmad, “The rising threat of vulnerabilities due to integer errors,” IEEE Security & Privacy, vol. 1, no. 4, 2003.

[40] D. Litchfield, “Hackproofing Oracle Application Server,” NGSSoftware Insight, Whitepaper, 2002.

[41] M. Labs, “2010 threat predictions,” Whitepaper, 2009, available from http://www.mcafee.com/us/local_content/white_papers/7985rpt_labs_threat_predict_1209_v2.pdf.