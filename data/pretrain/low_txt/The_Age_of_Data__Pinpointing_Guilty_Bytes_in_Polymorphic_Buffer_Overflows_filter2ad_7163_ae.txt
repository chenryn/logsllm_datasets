### WvTftp Heap Overflow

A heap-based overflow in WvTftp 0.9 allows remote attackers to execute arbitrary code via a long option string in a TFTP packet [26]. The options are provided as NULL-terminated name-value pairs, where the value is an ASCII representation of a number. The `atoi()` function is used to convert the value string to an integer. If the original part of the string represents a value greater than 8 and less than 65464, the string is copied into a heap buffer using `strcpy()`. By providing a long string for the value, the buffer can be overflowed. The emulator correctly identified that the heap control red region was overwritten with network data. The resulting signature is as follows:

```
(application: WvTFTP, version: 0.9,
(type: value field, name: Opcode, value: Read Request (1)),
(type: critical field, name: Blocksize Option),
(type: critical length, value: 557))
```

### Asterisk Heap Overflow

The Asterisk Skinny channel driver for Cisco SCCP phones in versions up to and including v1.0.11 and v1.2.12 (chan skinny.so) incorrectly validates a length value in the packet header. This leads to an integer wrap-around, causing a heap overwrite and enabling arbitrary remote code execution [27]. Asterisk checks if the inequality (length value + 8 ≤ 1000) holds to ensure the user-supplied message fits in a local buffer of size 1000. Due to the integer wrap, the comparison result is positive, and 4 bytes of the length are copied to the vulnerable buffer. A read operation then stores (length value + 4) bytes of the message on the heap. The emulator detects that the control red region on the heap is overwritten with network data and dumps the corresponding memory area. In the analysis phase, the entire SKINNY message, except for the length field, is identified. The 4 bytes representing the length are included in the critical tainted memory region, forming the complete SKINNY Packet for Asterisk 1.0.10, which should not exceed 1000 bytes. Although the length field does not need to be included in the signature, the attack description remains accurate.

### libmusicbrainz Stack Overflow

A boundary error within the `Download` function in `lib/http.cpp` (versions up to and including v2.1.2) can be exploited to cause a buffer overflow via a large "Location" field in an HTTP redirection received from a malicious MusicBrainz server [19]. Our analysis engine detected a 4-byte discontinuity in the critical tainted memory region. The final signature is as follows:

```
(application: libmusicbrainz, version: v2.1.2,
(type: value field, name: response header, value: Location),
(type: critical field, name: Location Header),
(type: critical length, value: 73))
```

### Performance Evaluation

For realistic performance measurements, we compared the speed of code running on Argos and Prospector with that of code running without emulation. While this method accurately shows the slowdown incurred by our system, it may not be the most relevant measure. We do not use Prospector as a desktop machine, and in practice, we are less concerned with the speed of results compared to non-emulated environments. The only time slowdown becomes an issue is when attackers avoid slow hosts, suspecting them to be honeypots. To the best of our knowledge, automated versions of such attacks do not exist in practice.

Performance evaluation was conducted by comparing the observed slowdown of guests running on various configurations of Prospector and unmodified Argos with the original host. The host used for these experiments was an Intel(R) Xeon(TM) CPU at 2.8GHz with 2048KB of L2 cache and 4GB of RAM, running Gentoo Linux with kernel 2.6.15.4. The guest OS ran Ubuntu Linux 5.05 with kernel 2.6.12.9, on top of Qemu 0.8, Argos, and Prospector. To quantify the observed slowdown, we used Apache 2.2.3, measuring its throughput in terms of processed requests per second and the corresponding average response time. We used httperf to generate requests.

Figure 3 shows the results of the evaluation. We tested the benchmark application at the guest running over Argos and two different configurations of Prospector: one with and one without the double free extension module. The graph indicates that the achieved throughput increases linearly with the offered load until the server saturates at a load of 48 calls per second for Prospector and 57 for Argos. The response time starts at about 20-30ms and gradually increases until the server becomes saturated, after which the response time for successful calls remains largely constant at 3000ms.

We conclude that the overhead in throughput of a web server incurred by Prospector compared to Argos is approximately 16%. We also measured the slowdown in comparison with the original host (refer to [24] for the full performance evaluation of Argos). Apache on Argos is about 15 times slower than on the native operating system (18 times on Prospector). We emphasize that we have not used any of the optimization modules available for Qemu, which can speed up the emulator to roughly half the performance of the native system. While we may not achieve the same level of speed-up, significant optimization is still possible. Despite the large performance penalty, personal experience with Argos and Prospector has shown that it is tolerable.

### Conclusions

We have described Prospector, an emulator capable of tracking which bytes contribute to an overflow attack on the heap or stack. Through careful analysis and by keeping track of the age of data, we provide this information with greater accuracy than previous approaches while maintaining reasonable performance. This information is crucial for security experts. We have also used the information to generate signatures for polymorphic attacks by examining the length of protocol fields rather than their actual contents. In practice, the number of false positives and false negatives for the signatures is low, and the signatures allow for efficient filters.

### References

[1] P. Akritidis, E. P. Markatos, M. Polychronakis, and K. D. Anagnostakis. Stride: Polymorphic sled detection through instruction sequence analysis. In Proceedings of the 20th IFIP/SEC 2005, 2005.
[2] Anonymous. Once upon a free(). http://doc.bughunter.net/buffer-overflow/free.html.
[3] W. X. S. Bhatkar and R. Sekar. Taint-enhanced policy enforcement: A practical approach to defeat a wide range of attacks. In Proceedings of 15th USENIX Security Symposium, 2006.
[4] D. Brumley, J. Newsome, D. Song, H. Wang, and S. Jha. Towards automatic generation of vulnerability-based signatures. In Proceedings of the 2006 IEEE Symposium on Security and Privacy, May 2006.
[5] R. Chinchani and E. Berg. A fast static analysis approach to detect exploit code inside network flows. In In Recent Advances in Intrusion Detection, Seattle, WA, 2005.
[6] M. Christodorescu, S. Jha, S. Seshia, D. Song, and R. Bryant. Semantics-aware malware detection. In Security and Privacy Conference, Oakland, CA, May 2005.
[7] M. Costa, J. Crowcroft, M. Castro, A. Rowstron, L. Zhou, L. Zhang, and P. Barham. Vigilante: end-to-end containment of Internet worms. In Proceedings of the 20th ACM Symposium on Operating Systems Principles, 2005.
[8] Crispin Cowan, Calton Pu, Dave Maier, Heather Hintony, Jonathan Walpole, Peat Bakke, Steve Beattie, Aaron Grier, Perry Wagle, and Qian Zhang. StackGuard: Automatic Adaptive Detection and Prevention of Buffer-Overflow Attacks. In 7th USENIX Security Symposium, 2002.
[9] H. Feng, J. Griffin, Y. Huang, S. Jha, W. Lee, and B. Miller. Formalizing sensitivity in static analysis for intrusion detection. In Proceedings the IEEE Symposium on Security and Privacy, Oakland, CA, 2004.
[21] J. Newsome and D. X. Song. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In Proceedings of the NDSS, 2005.
[10] H. Feng, O. Kolesnikov, P. Fogla, W. Lee, and W. Gong. Anomaly detection using call stack information. In Proceedings of the IEEE Security and Privacy Conference, Oakland, CA, 2003.
[11] P. Fogla and W. Lee. Evading network anomaly detection systems: formal reasoning and practical techniques. In Proceedings of the 13th ACM CCS, 2006.
[12] J. T. Griffin, S. Jha, and B. P. Miller. Automated discovery of mimicry attacks. In D. Zamboni and C. Krügel, editors, RAID, volume 4219 of Lecture Notes in Computer Science. Springer, 2006.
[13] C. Krügel, E. Kirda, D. Mutz, W. Robertson, and G. Vigna. Automating mimicry attacks using static binary analysis. In 14th Usenix Security Symposium, Baltimore, MD, August 2005.
[14] C. Krügel, E. Kirda, D. Mutz, W. Robertson, and G. Vigna. Polymorphic worm detection using structural information of executables. In RAID, Seattle, WA, October 2005.
[15] C. Krügel and G. Vigna. Anomaly detection of web-based attacks. In CCS '03: Proceedings of the 10th ACM conference on Computer and communications security, pages 251–261, New York, NY, USA, 2003. ACM Press.
[16] Z. Liang and R. Sekar. Fast and automated generation of attack signatures: a basis for building self-protecting servers. In Proceedings of the 12th ACM conference on Computer and communications security, 2005.
[17] M. V. Mahoney. Network traffic anomaly detection based on packet bytes. In SAC '03: Proceedings of the 2003 ACM symposium on Applied computing, pages 346–350, New York, NY, USA, 2003. ACM Press.
[18] National Vulnerability Database. Multiple buffer overflows in AlsaPlayer. CVE-2006-4089. http://nvd.nist.gov/nvd.cfm?cvename=CVE-2006-4089, 2006.
[19] National Vulnerability Database. Multiple buffer overflows in libmusicbrainz. CVE-2006-4197. http://nvd.nist.gov/nvd.cfm?cvename=CVE-2006-4197, 2006.
[20] J. Newsome, B. Karp, and D. X. Song. Polygraph: Automatically generating signatures for polymorphic worms. In IEEE Symposium on Security and Privacy, May 2005.
[22] Open Source Vulnerability Database. Subversion parsing overflow. http://osvdb.org/displayvuln.php?osvdbid=6301, 2004.
[23] R. Perdisci, D. Dagon, W. Lee, P. Fogla, and M. Sharif. Misleading worm signature generators using deliberate noise injection. In Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P'06), May 2006.
[24] G. Portokalidis, A. Slowinska, and H. Bos. Argos: an emulator for fingerprinting zero-day attacks. In Proc. ACM SIGOPS EUROSYS'2006, Leuven, Belgium, April 2006.
[25] A. Rahbar. Stack overflow on Windows Vista. http://www.sysdream.com/article.php?story id=241&section id=77, July 2006.
[26] Secunia. CVE-2004-1636 WvTftp Buffer Overflow Vulnerability, October 2004.
[27] SecuriTeam. Asterisk Skinny unauthenticated heap overflow, October 2006.
[28] SecurityFocus. psprintf memory corruption vulnerability. CAN-2003-0245. http://www.securityfocus.com/bid/7723/, 2003.
[29] SecurityFocus. Cast Remote Buffer Overflow Vulnerability. CVE-2006-1148. http://www.securityfocus.com/bid/17040/info, 2006.
[30] T. Toth and C. Krügel. Accurate buffer overflow detection via abstract payload execution. In Recent Advances in Intrusion Detection, 5th International Symposium, 2002.
[31] US-CERT. Vulnerability notes database. http://www.us-cert.gov, 2007.
[32] H. J. Wang, C. Guo, D. R. Simon, and A. Zugenmaier. Shield: vulnerability-driven network filters for preventing known vulnerability exploits. SIGCOMM Comput. Commun. Rev., 34(4):193–204, 2004.
[33] K. Wang, G. Cretu, and S. J. Stolfo. Anomalous payload-based worm detection and signature generation. In Proceedings of the 8th International Symposium on Recent Advances in Intrusion Detection, 2005.
[34] X. Wang, Z. Li, J. Xu, M. K. Reiter, C. Kil, and J. Y. Choi. Packet vaccine: black-box exploit detection and signature generation. In Proceedings of the 13th ACM CCS, 2006.
[35] X. Wang, C.-C. Pan, P. Liu, and S. Zh. Sigfree: A signature-free buffer overflow attack blocker. In Proceedings of 15th USENIX Security Symposium, 2006.