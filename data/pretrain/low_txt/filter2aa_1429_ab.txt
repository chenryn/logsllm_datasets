### Malware Analysis and Two-Factor Authentication Bypass

#### Malware Analysis Report

**Debug Information - Goat Machine Changes**

- **File Paths:**
  - `{'1276,1464': '%windir%\\system32\\net1.exe'}`,
  - `{'536,1276': '%windir%\\system32\\net.exe'}`,
  - `{'536,360': '%temp%\\frame2_276.exe'}`,
  - `{'536,492': '%temp%\\liar3.exe'}`,
  - `{'840,536': 'c:\\documents and settings\\user\\win.exe'}`

- **Date and Time:** 2008/05/21 16:52:19
- **Target URL:** http://www.interclass.dir.bg/
- **Priority Level:** 5
- **URL ID:** 365
- **Remaining Failure Retry:** 3
- **URL Type:** Web browser interpretable URL
- **Content Length:** 1,540 bytes
- **Content-Type:** text/html
- **Server Date:** Wed, 21 May 2008 08:52:19 GMT
- **Server Type:** Zeus/4.3
- **Last Modified:** Tue, 20 May 2008 09:17:55 GMT
- **Environment:** WXPSP2-1 (Windows XP Pro SP2 + Firefox 1.0 and IE 6.0)
- **Enabled Browsers:** IE6.0/IE7.0, Firefox1.0/2.0
- **Network IO Check Interval:** 5 seconds
- **Network IO Activity Tolerance:** 512 bytes
- **Analysis Time Elapsed:** 0 minutes and 30 seconds
- **Process IDs:**
  - Goat Process ID: 1648
  - IE 6.0/7.0 Process ID: 840
  - FireFox 1.0/2.0 Process ID: 1768
- **Pop-up Windows Found:** 0
- **Tracer Log Analysis Time:** 0.0320420265198 second
- **Exploited Web Browser:** Internet Explorer
- **Suspicious Actions:**
  - Folder Creation Count: 0
  - File Creation Count: 4
  - Registry Key Creation Count: 1
  - Process Creation Count: 5
- **Threat Percentage:** 100%
- **Conclusion:** Malicious

**Malware Behavior:**
- The malware is likely trying to execute commands using `net start` to start or manage system services.
- Example 4: Website with drive-by download
- **Date and Time:** 2008/06/09 11:58:41
- **Target URL:** http://www.mx5e.com
- **Priority Level:** 4
- **URL ID:** 4096881
- **HTTP Request Metadata:** null
- **Remaining Failure Retry:** 3
- **URL Type:** Web browser interpretable URL
- **Content Length:** 157,608 bytes
- **Content-Type:** text/html; charset=utf-8
- **Server Date:** Mon, 09 Jun 2008 03:58:20 GMT
- **Server Type:** Microsoft-IIS/6.0
- **X-Powered By:** ASP.NET
- **Environment:** WXPSP2-3 (Windows XP Pro SP2 + Firefox 2.0.0.14 and IE 7.0)
- **Enabled Browsers:** IE6.0/IE7.0, Firefox1.0/2.0
- **Network IO Check Interval:** 5 seconds
- **Network IO Activity Tolerance:** 512 bytes
- **Analysis Time Elapsed:** 1 minute and 22 seconds
- **Process IDs:**
  - Goat Process ID: 1688
  - IE 6.0/7.0 Process ID: 776
  - FireFox 1.0/2.0 Process ID: 1024
- **Pop-up Windows Found:** 0
- **Tracer Log Analysis Time:** 0.110128164291 second
- **Exploited Web Browsers:** IE and Firefox
- **Suspicious Actions:**
  - Folder Creation Count: 1
  - File Creation Count: 6
  - Registry Key Creation Count: 2
  - Process Creation Count: 2
- **Threat Percentage:** 100%
- **Conclusion:** Malicious

**Analysis Environment:**
- VMware image with fully patched Windows XP Professional SP2 and the latest versions of web browsers.
- No zero-day exploit was used.

**Exploit Method:**
- The honey client was exploited through a drive-by download, which did not require a zero-day vulnerability.

#### Two-Factor Authentication Bypass

**Two-Factor Authentication (2FA) in a Nutshell**

- **Source:**
  - Images: [Wikipedia](http://en.wikipedia.org/wiki/Security_token)
  - Article: [Finextra](http://www.finextra.com/fullstory.asp?id=15169)

**How 2FA Works:**
- Source: [MoCom Systems](http://www.mocomsystems.com/Information/RSA.htm)

**Bypassing 2FA:**

1. **Victim Logs In:**
   - The victim logs into a fake banking website using their username, password, and one-time-use security token generated from a device provided by the bank.

2. **Attacker Uses Login Info:**
   - The attacker uses the login information entered by the victim at the fake banking website to log into the real banking website.

3. **Maintaining Access:**
   - To maintain access to the authenticated session, the attacker writes an automation script that reloads the real website or randomly clicks on main links at the website.

**Technique Used:**
- The technique employs "local session riding" at the attacker’s server to forge requests on behalf of the victim to the real banking site.

**Retrieving Information:**
- The attacker retrieves and stores information from the real banking website to the simulated fake banking website database, including:
  - Account number
  - Account Owner Full Name
  - Account Balance
  - Last Login Date and Time
  - Transaction history
  - Other details

**Automation Script:**
- The automation script keeps running at the simulated fake banking website to maintain the authenticated session with the real banking website.

**Transaction Security:**
- In online banking systems protected with 2FA, a security token is required for each transaction.
- When the victim enters a security token to perform a transaction, the attacker uses the token entered at the fake website to perform a fund transfer from the victim’s account to a money mule’s account.

**Transferring Money:**
- The automation script maintains the authenticated session for hours or days, depending on the web application design and server maintenance.
- If the victim’s account has a daily transaction limit, the attacker performs several transactions over multiple days to steal all the money.

**Example:**
- **Account Balance:** $100,000
- **Daily Transfer Limit:** $20,000
- **Day 1:**
  - Victim pays electricity bill: -$20,000 (1 security token)
  - Attacker transfers: -$20,000
- **Day 2:**
  - Victim logs in to check balance: -$20,000 (1 security token)
  - Attacker transfers: -$20,000
- **Day 3:**
  - Victim logs in to check balance: -$20,000 (1 security token)
  - Attacker transfers: -$20,000
- **Final Balance:** $0

**Local Session Riding (LSR) Attack:**
- **Why is it possible?**
  - The attack exploits the lack of proper session management and the reliance on user-provided tokens, allowing the attacker to maintain and manipulate the session.