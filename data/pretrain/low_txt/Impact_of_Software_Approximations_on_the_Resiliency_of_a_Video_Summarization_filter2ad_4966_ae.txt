### Outcomes and Detection Mechanism for EDC

Based on the heuristics learned from EDC (Error Detection and Correction) characterization, a detection mechanism is proposed to identify variables and locations that require protection against EDC. Additionally, we introduce a novel quantitative metric for evaluating EDC in a complete video stitching algorithm. This metric, combined with approximation algorithms, aims to improve energy efficiency and performance without significantly compromising the end-quality.

### Computer Vision for UAV-Based Mobile Cognition

Extensive research has been conducted on image-stitching algorithms within the field of computer vision. Szeliski [63] provides a comprehensive overview of various algorithms for aligning and stitching images into seamless 2D photo-mosaics. In [27], state-of-the-art algorithms for handling and summarizing video content captured by on-board UAV processors are described. Rane et al. [64] propose a method to evaluate mosaic quality using maximum information retrieval, which assesses the similarity between mosaic stripes and original frames. However, this method is limited to scenarios where the camera undergoes only translational movement, unlike the more complex movements in the VIRAT dataset, which include both translational and rotational components.

Camargo et al. [65] use the distances between corresponding keypoints in all frames after mosaic generation to compare different optimization methods for parameter estimation. This approach, however, does not account for image distortions caused by fault injection. The empirical evaluation in [66] assesses the detectability of objects of interest for human observers when temporally local mosaics are applied to live aerial video, but it lacks a quantitative measure for fault injection. Paalanen et al. [67] propose a method to evaluate mosaic quality using ground truth data, which is typically available only in synthetic datasets. Since our evaluations use real-world data, determining the ground truth is challenging. El-Saban et al. [68] use human visual assessment to measure the precision and recall of mosaic quality, but this method also fails to provide a scientific measurement of the distortion caused by fault injection.

### Conclusion

In this work, we study an end-to-end video summarization (VS) application as a representative emerging workload for real-time edge computing. We characterize the workflow of the application and examine three different approximation techniques to enhance power and performance efficiency while maintaining sufficient output integrity. A detailed resiliency study of the application and its approximate versions demonstrates that these approximations do not degrade the baseline algorithm's resiliency. We introduce metrics to quantify errors in the output image and use them to understand the behavior of silent data corruptions (SDCs) in various video summarization algorithms. Our findings show that many SDCs produced by the application can be tolerable to the end user, thereby reducing the cost of protecting the application against transient faults.

### References

[1] G. Ananthanarayanan, P. Bahl, P. Bodk, K. Chintalapudi, M. Philipose, L. Ravindranath, and S. Sinha, “Real-time video analytics: The killer app for edge computing,” IEEE Computer, vol. 50, no. 10, pp. 58–67, 2017.

[2] M. Satyanarayanan, “The emergence of edge computing,” Computer, vol. 50, pp. 30–39, Jan 2017.

[3] R. Viguier et al., “Resilient mobile cognition: Algorithms, innovations, and architectures,” in ICCD, 2015.

[4] L. Wang et al., “Power-efficient embedded processing with resilience and real-time constraints,” in ISLPED, 2015.

[5] J. Han and M. Orshansky, “Approximate computing: An emerging paradigm for energy-efficient design,” in ETS, pp. 1–6, 2013.

[6] H. Esmaeilzadeh, A. Sampson, L. Ceze, and D. Burger, “Architecture support for disciplined approximate programming,” SIGPLAN Not., 2012.

[7] S. Sidiroglou-Douskos, S. Misailovic, H. Hoffmann, and M. C. Rinard, “Managing performance vs. accuracy trade-offs with loop perforation,” in SIGSOFT FSE, pp. 124–134, 2011.

[8] W. Baek and T. M. Chilimbi, “Green: A framework for supporting energy-conscious programming using controlled approximation,” in Programming Language Design and Implementation, PLDI, pp. 198–209, 2010.

[9] M. Samadi, J. Lee, D. A. Jamshidi, A. Hormati, and S. Mahlke, “Sage: Self-tuning approximation for graphics engines,” in International Symposium on Microarchitecture, MICRO, pp. 13–24, 2013.

[10] J. Sartori and R. Kumar, “Branch and data herding: Reducing control and memory divergence for error-tolerant GPU applications,” Multimedia, IEEE Transactions on, vol. 15, no. 2, pp. 279–290, 2013.

[11] D. Mahajan, A. Yazdanbakhsh, J. Park, B. Thwaites, and H. Esmaeilzadeh, “Towards statistical guarantees in controlling quality trade-offs for approximate acceleration,” in International Symposium on Computer Architecture, ISCA, 2016.

[12] X. Sui, A. Lenharth, D. S. Fussell, and K. Pingali, “Proactive control of approximate programs,” in Architectural Support for Programming Languages and Operating Systems, ASPLOS, pp. 607–621, 2016.

[13] M. Carbin, S. Misailovic, and M. C. Rinard, “Verifying quantitative reliability for programs that execute on unreliable hardware,” in Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications, OOPSLA ’13, (New York, NY, USA), pp. 33–52, ACM, 2013.

[14] S. Misailovic, M. Carbin, S. Achour, Z. Qi, and M. C. Rinard, “Chisel: Reliability- and accuracy-aware optimization of approximate computational kernels,” SIGPLAN Not., vol. 49, pp. 309–328, Oct. 2014.

[15] J. Park, H. Esmaeilzadeh, X. Zhang, M. Naik, and W. Harris, “FlexJava: Language support for safe and modular approximate programming,” in Joint Meeting on Foundations of Software Engineering, 2015.

[16] A. Sampson, A. Baixo, B. Ransford, T. Moreau, J. Yip, L. Ceze, and M. Oskin, “Accept: A programmer-guided compiler framework for practical approximate computing,” in Technical Report UW-CSE-15-01-01, University of Washington, 2015.

[17] A. Sampson, W. Dietl, E. Fortuna, D. Gnanapragasam, L. Ceze, and D. Grossman, “EnerJ: Approximate data types for safe and general low-power computation,” in Programming Language Design and Implementation, PLDI, pp. 164–174, 2011.

[18] B. Boston, A. Sampson, D. Grossman, and L. Ceze, “Probability type inference for flexible approximate programming,” in International Conference on Object-Oriented Programming, Systems, Languages, and Applications, OOPSLA, pp. 470–487, 2015.

[19] J. Park, X. Zhang, K. Ni, H. Esmaeilzadeh, and M. Naik, “ExpAx: A framework for automating approximate programming,” in Technical Report, Georgia Institute of Technology, 2014.

[20] A. B. Kahng, S. Kang, R. Kumar, and J. Sartori, “Designing a processor from the ground up to allow voltage/reliability tradeoffs,” in International Symposium on High-Performance Computer Architecture (HPCA), pp. 1–11, 2010.

[21] J. Sartori and R. Kumar, “Architecting processors to allow voltage/reliability tradeoffs,” in International Conference on Compilers, Architectures and Synthesis for Embedded Systems, CASES, pp. 115–124, 2011.

[22] H. Esmaeilzadeh, A. Sampson, L. Ceze, and D. Burger, “Neural acceleration for general-purpose approximate programs,” in Microarchitecture (MICRO), International Symposium on, pp. 449–460, 2012.

[23] J. San Miguel, J. Albericio, A. Moshovos, and N. E. Jerger, “Doppelganger: A cache for approximate computing,” in International Symposium on Microarchitecture (MICRO), 2015.

[24] S. Liu, K. Pattabiraman, T. Moscibroda, and B. G. Zorn, “Flikker: Saving DRAM refresh-power through critical data partitioning,” SIGPLAN Not., vol. 46, no. 3, pp. 213–224, 2011.

[25] S. Agarwal, H. Milner, A. Kleiner, A. Talwalkar, M. I. Jordan, S. Madden, B. Mozafari, and I. Stoica, “Knowing when you’re wrong: Building fast and reliable approximate query processing systems,” in International Conference on Management of Data, SIGMOD, pp. 481–492, 2014.

[26] K. Swaminathan et al., “A case for approximate computing in real-time mobile cognition,” in Workshop on Approximate Computing Across the System Stack (WACAS), 2015.

[27] C. Lin et al., “Moving camera analytics: Emerging scenarios, challenges, and applications,” IBM JRD, 2015.

[28] E. Rosten and T. Drummond, “Fusing points and lines for high-performance tracking,” in ICCV, 2005.

[29] E. Rosten and T. Drummond, “Machine learning for high-speed corner detection,” in ECCV, 2006.

[30] E. Rublee, V. Rabaud, K. Konolige, and G. Bradski, “ORB: An efficient alternative to SIFT or SURF,” in ICCV, 2011.

[31] M. Fischler and R. Bolles, “Random sample consensus: A paradigm for model fitting with applications to image analysis and automated cartography,” Commun. ACM, 1981.

[32] S. Oh et al., “A large-scale benchmark dataset for event recognition in surveillance video,” in CVPR, 2011.

[33] A. Vega et al., “Resilient, UAV-embedded real-time computing,” in ICCD, 2015.

[34] A. Meixner, M. Bauer, and D. Sorin, “Argus: Low-cost, comprehensive error detection in simple cores,” in MICRO, 2007.

[35] M.-L. Li et al., “Understanding the propagation of hard errors to software and implications for resilient systems design,” in ASPLOS, 2008.

[36] M.-L. Li et al., “Accurate microarchitecture-level fault modeling for studying hardware faults,” in HPCA, 2009.

[37] A. Pellegrini et al., “CrashTest: A fast high-fidelity FPGA-based resiliency analysis framework,” in ICCD, 2008.

[38] A. Pellegrini et al., “CrashTest’ing SWAT: Accurate, gate-level evaluation of symptom-based resiliency solutions,” in DATE, 2012.

[39] S. Nomura et al., “Sampling + DMR: Practical and low-overhead permanent fault detection,” in ISCA, 2011.

[40] S. Hari, S. Adve, H. Naeimi, and P. Ramachandran, “Relyzer: Exploiting application-level fault equivalence to analyze application resiliency to transient faults,” in ASPLOS, 2012.

[41] “perf: Linux profiling with performance counters.”

[42] “Open source computer vision library (OpenCV),” 2015.

[43] M. Carbin and M. C. Rinard, “Automatically identifying critical input regions and code in applications,” in International Symposium on Software Testing and Analysis, ISSTA, pp. 37–48, 2010.

[44] B. Nongpoh, R. Ray, S. Dutta, and A. Banerjee, “Autosense: A framework for automated sensitivity analysis of program data,” IEEE Transactions on Software Engineering, vol. PP, no. 99, pp. 1–1, 2017.

[45] Q. Shi, H. Hoffmann, and O. Khan, “A cross-layer multicore architecture to tradeoff program accuracy and resilience overheads,” IEEE Computer Architecture Letters, vol. 14, no. 2, pp. 85–89, 2015.

[46] R. Venkatagiri, A. Mahmoud, S. K. S. Hari, and S. V. Adve, “ApproxiLyzer: Towards a systematic framework for instruction-level approximate computing and its application to hardware resiliency,” in International Symposium on Microarchitecture (MICRO), pp. 1–14, 2016.

[47] P. Roy, R. Ray, C. Wang, and W. F. Wong, “ASAC: Automatic sensitivity analysis for approximate computing,” in Conference on Languages, Compilers and Tools for Embedded Systems, LCTES ’14, pp. 95–104, 2014.

[48] A. Thomas and K. Pattabiraman, “Error detector placement for soft computation,” in Dependable Systems and Networks (DSN), pp. 1–12, 2013.

[49] J. Ziegler et al., “IBM experiments in soft fails in computer electronics (1978 - 1994),” IBM JRD, 1996.

[50] E. Czeck and D. Siewiorek, “Effects of transient gate-level faults on program behavior,” in Int. Symp. on Fault-Tolerant Computing, 1990.

[51] P. Shivakumar et al., “Modeling the effect of technology trends on the soft error rate of combinational logic,” in DSN, 2002.

[52] S. Kim and A. Somani, “Soft error sensitivity characterization for microprocessor dependability enhancement strategy,” in DSN, 2002.

[53] N. Wang, J. Quek, T. Rafacz, and S. Patel, “Characterizing the effects of transient faults on a high-performance processor pipeline,” in DSN, 2004.

[54] S. Mukherjee et al., “A systematic methodology to compute the architectural vulnerability factors for a high-performance microprocessor,” in MICRO, 2003.

[55] A. Biswas et al., “Computing architectural vulnerability factors for address-based structures,” in ISCA, 2005.

[56] X. Li, S. Adve, P. Bose, and J. Rivers, “SoftArch: An architecture-level tool for modeling and analyzing soft errors,” in DSN, 2005.

[57] X. Li, S. Adve, P. Bose, and J. Rivers, “Architecture-level soft error analysis: Examining the limits of common assumptions,” in DSN, 2007.

[58] M.-L. Li et al., “Trace-based microarchitecture-level diagnosis of permanent hardware faults,” in DSN, 2008.

[59] M.-L. Li et al., “Understanding the propagation of hard errors to software and implications for resilient system design,” in ASPLOS, 2008.

[60] S. Sahoo et al., “Using likely program invariants to detect hardware errors,” in DSN, 2008.

[61] S. Hari et al., “mSWAT: Low-cost hardware fault detection and diagnosis for multicore systems,” in MICRO, 2009.

[62] A. Thomas and K. Pattabiraman, “Error detector placement for soft computation,” in DSN, 2013.

[63] R. Szeliski, “Image alignment and stitching: A tutorial,” 2004.

[64] K. Rane et al., “Mosaic evaluation: An efficient and robust method based on maximum information retrieval,” Int. J. Computer Applications, 2013.

[65] A. Camargo, Q. He, and K. Palaniappan, “Performance evaluations for super-resolution mosaicing on UAS surveillance videos,” Int J Adv Robotic Systems, 2013.

[66] B. Morse et al., “Application and evaluation of spatio-temporal enhancement of live aerial video using temporally local mosaics,” in CVPR, 2008.

[67] P. Paalanen, J.-K. Kämäräinen, and H. Kälviäinen, “Image-based quantitative mosaic evaluation with artificial video,” in Image Analysis, pp. 470–479, 2009.

[68] M. El-Saban, M. Izz, A. Kaheel, and M. Refaat, “Improved optimal seam selection blending for fast video stitching of videos captured from freely moving devices,” in ICIP, 2011.