### Density and Constraint Definitions

- **Density** is the ratio, expressed as a percentage, of the number of users \( u \) for which \( t(u) = \text{true} \) to the total number of user-task pairs \( n_t \cdot n_u \), where \( t \) ranges over the set of tasks.
- **Constraint Density (pc)** is the ratio between the number of SoD (Separation of Duties) constraints in the set \( C \) and the total number of tasks \( n_t \).

### Random Sequence Generation

The generator also produces random (finite) sequences \((r_0, r_1, ..., r_n)\) of authorization requests, where each \( r_i = (t, u) \) represents a task \( t \) and a user \( u \). These sequences encode the question: "Can user \( u \) perform task \( t \) according to the authorization policy specified by the \( at \)'s and the constraints in \( C \) while ensuring the workflow terminates?"

### Workflow Parameters and Evaluation

Based on our experience with real-world workflows (cf. Section 4.1), we set \( n_{tw} \) to 5 and increase the number \( n_w \) of subflows so that the total number \( n_t \) of tasks in the generated workflows ranges from 10 to 500 (note that [12] considers workflows with at most 150 tasks). Specifically, we let \( n_t = 10, 20, ..., 150, 200, 250, ..., 500 \) and, following [12], set \( n_u = n_t \), \( p_a = 100\%, 50\%, 10\% \), and \( p_c = 5\%, 10\%, 20\% \).

### Performance Analysis

Figure 7 shows the behavior of our prototype tool for both the offline (left) and online (right) phases on the hierarchical workflows produced by the random generator with the parameters described above. The x-axis represents the number of tasks \( n_t \) in the workflow, and the y-axis shows the timings in seconds. Each line corresponds to different values of the parameter pair \( (p_a, p_c) \) (recall that \( n_u = n_t \)). The timings were obtained on a MacBook 2014 laptop with a 1.3GHz dual-core Intel Core i5 processor and 8GB of RAM, running MAC OS X 10.9.4.

It is evident that the computation time of our tool in both the online and offline phases is linear in the number of tasks in the workflows for any value of the parameter pair \( (p_a, p_c) \). For the offline phase, this is due to the divide-and-conquer strategy supported by hierarchical workflows. For the online phase, the linear growth is because the synthesized Datalog programs belong to a class whose requests can be answered in linear time. Notably, for workflows with \( n_t \leq 200 \), the median time to answer a request is under 1 second, while for workflows with \( 200 < n_t \leq 500 \), it is around 1.6 seconds. This demonstrates that the monitors synthesized by our tool are suitable for online use.

### Request Distribution

To provide an idea of the distribution of the answers given by the synthesized monitors to the randomly generated sequences of authorization requests, Figure 8 shows the number of denied (in red) and granted (in green) requests (y-axis) for workflows with \( n_t = 10, ..., 400 \) (x-axis) and \( (p_a, p_c) = (10, 20) \) (the number shown on the x-axis must be multiplied by 10 to obtain the number of tasks in the workflow). These results clearly show the scalability and practical applicability of our approach on the important class of hierarchically specified workflows.

### Related Work

#### Verification of Array-Based Systems

Model Checking Modulo Theories (MCMT) [16] is an approach for verifying array-based systems based on the computation of pre-images of a set of states using first-order formulae and reducing fix-point checks to SMT solving. This approach is implemented by the model checker mcmt [17]. The link between array-based systems and security-sensitive workflows was established in [8], where composed array-based systems represent security-sensitive workflows, with a terminating procedure for verifying reachability properties for this class of systems.

#### Workflow Satisfiability

Bertino et al. [6] described the specification and enforcement of authorization constraints in workflow management systems, presenting constraints as clauses in a logic program and an exponential algorithm for assigning users and roles to tasks without violating them, but considering only linear workflows. Crampton [11] showed another model for specifying constraints, considering workflows as DAGs, and an algorithm to determine whether there is an assignment of users to tasks that satisfies the constraints, showing that it can be incorporated into a reference monitor. [13] extended the previous work to consider the effects of delegation on satisfiability, showing algorithms to only allow delegations that can still satisfy a workflow. Crampton et al. [12] used model checking on an NP-complete fragment of linear temporal logic to decide the satisfiability of workflow instances. The authors presented three different encodings in LTL(F) that can compute a set of solutions, minimal user bases, and a safe bound on resiliency. The synthesis of monitors was left as future work.

### Conclusions

We have introduced and implemented a precise technique to automatically synthesize runtime monitors capable of ensuring the successful termination of workflows while enforcing authorization policies and SoD constraints, thus solving the runtime version of the WSP. It consists of an offline phase in which we compute a symbolic representation of all possible behaviors of a workflow and an online phase in which the monitor is derived from such a symbolic representation. An advantage of the technique is that changes in the policies can be taken into account without re-running the offline phase since only an abstract interface to policies is required. The interface is refined to the concrete policy only in the online phase. We have also described the assumptions for the correctness of the technique (cf. Theorem 3.4). An extensive experimental evaluation with an implementation of the technique shows the scalability of our approach on the important class of hierarchical workflows.

As future work, we plan to present a detailed description of our heuristics to obtain equivalent hierarchical specifications of monolithic workflows. This would allow us to further enlarge the scope of applicability of our approach. We also intend to integrate our prototype in available workflow execution engines—e.g., the one available in the SAP HANA platform (http://www.sap.com/hana)—to collect data about the performance of our monitors on real workflows and compare the results with those in this paper. This would be an important step towards the creation of a library of benchmarks to set a standard for the evaluation of workflow analysis techniques.

### References

[1] P. A. Abdulla, K. Cerans, B. Jonsson, and Y.-K. Tsay. General decidability theorems for infinite-state systems. In Proc. of LICS, pages 313–321, 1996.
[2] A. Armando and S. E. Ponta. Model Checking of Security-sensitive Business Processes. In 6th Int. Ws. on Formal Aspects in Security and Trust (FAST), 2009.
[3] D. Basin, S. J. Burri, and G. Karjoth. Obstruction-free authorization enforcement: Aligning security with business objectives. In Proc. of CSF’11, pages 99–113, Washington, DC., 2011. IEEE Computer Society.
[4] D. Basin, S. J. Burri, and G. Karjoth. Dynamic enforcement of abstract separation of duty constraints. ACM TISSeC, 15(3):13:1–13:30, Nov. 2012.
[5] D. Basin, S. J. Burri, and G. Karjoth. Optimal workflow-aware authorizations. In Proc. of SACMAT ’12, pages 93–102, New York, NY, 2012. ACM.
[6] E. Bertino, E. Ferrari, and V. Atluri. The specification and enforcement of authorization constraints in workflow management systems. TISSeC, 2:65–104, 1999.
[7] C. Bertolissi and S. Ranise. A Methodology to build run-time Monitors for Security-Aware Workflows. In Proc. of ICITST’13. IEEE, 2013.
[8] C. Bertolissi and S. Ranise. Verification of Composed Array-based Systems with Applications to Security-Aware Workflows. In Proc. of FROCOS’13. Springer, 2013.
[9] C. Bertolissi and S. Ranise. A smt–based methodology for monitoring of security–aware workflows. Int. J. of ITST, 5(3):275–290, 01 2014.
[10] S. Ceri, G. Gottlob, and L. Tanca. What You Always Wanted to Know About Datalog (And Never Dared to Ask). IEEE TKDE, 1(1):146–166, 1989.
[11] J. Crampton. A reference monitor for workflow systems with constrained task execution. In 10th ACM SACMAT, pages 38–47. ACM, 2005.
[12] J. Crampton, M. Huth, and J.-P. Kuo. Authorized workflow schemas: deciding realizability through ltl(f) model checking. STTT, 16(1):31–48, 2014.
[13] J. Crampton and H. Khambhammettu. Delegation and satisfiability in workflow systems. In SACMAT, pages 31–40, New York, NY, USA, 2008. ACM.
[14] E. W. Dijkstra. A Discipline of Programming. Prentice-Hall, 1976.
[15] H. B. Enderton. A Mathematical Introduction to Logic. Academic Press, New York-London, 1972.
[16] S. Ghilardi and S. Ranise. Backward reachability of array-based systems by SMT solving: Termination and invariant synthesis. In LMCS, Vol. 6, Issue 4, 2010.
[17] S. Ghilardi and S. Ranise. MCMT: A Model Checker Modulo Theories. In IJCAR, volume 6173 of LNCS, pages 22–29, 2010.
[18] N. Li and J. C. Mitchell. Datalog with constraints: a foundation for trust management languages. In PADL’03, pages 58–73, 2003.
[19] T. Murata. Petri nets: properties, analysis and applications. Proc. of the IEEE, 77(4):541–580, 1989.
[20] I. R. P. Yang, X. Xie and S. Lu. Satisfiability analysis of workflows with control-flow patterns and authorization constraints. IEEE TSC, 99, 2013.
[21] S. Sankaranarayanan, H. Sipma, and Z. Manna. Petri net analysis using invariant generation. In In Verification: Theory and Practice, LNCS 2772, pages 682–701. Springer Verlag, 2003.
[22] A. U. Shankar. An Introduction to Assertional Reasoning for Concurrent Systems. ACM Comput. Surv., 25(3):225–262, Sept. 1993.
[23] W. van der Aalst. Workflow verification: Finding control-flow errors using petri-net-based techniques. In Business Process Management, volume 1806 of LNCS, pages 161–183. Springer, 2000.
[24] W. van der Aalst and A. H. M. T. Hofstede. Yawl: Yet another workflow language. Inf. Systems, 30:245–275, 2003.
[25] W. van der Aalst, K. van Hee, A. ter Hofstede, N. Sidorova, H. Verbeek, M. Voorhoeve, and M. Wynn. Soundness of workflow nets: classification, decidability, and analysis. Formal Aspects of Comp., 23(3):333–363, 2011.
[26] W. M. P. Van Der Aalst, A. H. M. Ter Hofstede, B. Kiepuszewski, and A. P. Barros. Workflow patterns. Distrib. Parallel Databases, 14(1):5–51, July 2003.
[27] Q. Wang and N. Li. Satisfiability and resiliency in workflow authorization systems. TISSeC, 13:40:1–40:35, December 2010.