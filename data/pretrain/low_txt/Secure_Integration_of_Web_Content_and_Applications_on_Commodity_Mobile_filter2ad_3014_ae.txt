### Figure 6: Runtime Overhead of WIREframe Protection Mechanisms

The following table presents the runtime overhead (relative) for API invocations on different devices. The overhead includes the IPC invocation and policy checks. Note that the complex object shadowing of `capturePicture` includes the time needed to copy an entire screenshot of a WebView between apps.

| Device   | Nexus 5 | Samsung S5 |
|----------|---------|------------|
| Basic API | 0.95    | 0.93       |
| Complex API | 4.25   | 1.72       |

### Figure 8: Resource Utilization of CPU and Memory

WIREframe incurs modest overhead, mostly composed of time and memory in user space. The following table shows the resource utilization with and without WIREframe.

| Metric                | Client – Kernel time (s) | Client – User time (s) | Client – VSS (KB) | Client – RSS (KB) |
|-----------------------|-------------------------|-----------------------|-------------------|-------------------|
| Without WIREframe     | 7.6                     | 3.7                   | 1061              | 100               |
| With WIREframe        | 0.8                     | 8.7                   | 1021              | 72.7              |

### 7.2.2 Effectiveness

For each of the four attack apps we tested, WIREframe was effective in preventing the malicious behavior that we inserted.

- **Effective Enforcement**: The attack apps import and exploit authentication libraries from Facebook, Foursquare, LinkedIn, and Twitter, all of which use WebViews. To exploit these libraries, the attack apps inject JavaScript into the login window for each service. For all four libraries, we successfully extracted the username and password when the app used a default in-app WebView. We then rewrote each app using WIRE and replayed the attacks. In each case, WIREframe successfully prevented the exfiltration of credentials.
  
- **Origin-Based Policy Enforcement**: We simulated web-to-app attacks and examined WIREframe’s origin-based policy enforcement. We created a test app that, employing dynamic policies, exports a range of sensitive Java interfaces exclusively to web content from a trusted origin. We also composed a mash-up page with multiple iframes and scripts from different origins that all try to access the exported app-web interfaces. During the test, the app first loads the mash-up page using a regular in-app WebView and then does the same using WIREframe. Our results show that the sensitive interfaces were universally accessible to all web content loaded in the regular WebView but were only accessible to the trusted domain from within WIREframe.

These tests demonstrate that WIREframe’s enforcement is effective at isolating the threats that apps and embedded web content may impose on each other.

### 7.2.3 Efficiency

The extra security protections provided by our approach have overheads in terms of resource utilization (CPU and memory) and runtime overhead. While correctness and effectiveness are the primary concerns of our system, we also evaluate its efficiency.

- **Resource Utilization**: Figure 8 lists the resources used by an app with and without WIREframe. VSS (Virtual Set Size) measures the maximum utilization of virtual memory, while RSS (Resident Set Size) measures the maximum footprint in resident memory. Apps using WIREframe have a smaller memory footprint across both metrics because web content is now being loaded in the WIREframe process. There is a constant overhead of less than 1 MB for running the additional process, which is negligible given that modern Android devices such as the S5 are equipped with 2GB of RAM.

- **Runtime Overhead**: Rewritten apps incur overhead from the extra bookkeeping performed for WIREframe protection mechanisms. We measured the runtime increase across representative web APIs of both basic and complex types. Figure 6 shows the runtime of invocations of two basic APIs, where the arguments to the call do not require object shadowing, and complex APIs, which do. These functions measure the additional overhead of app-to-web protections, accounted for by the actual IPC invocation and related marshaling. For basic APIs, we experience an approximately 1x increase in overhead. For complex APIs, we experience a 3-4x increase.

- **Overhead of Origin Tagging**: Figure 7 shows the overhead of loads with and without origin tagging. This overhead is accounted for by building and inspecting the web origin. As expected, we experience negligible overhead without origin tagging (within the margin of error of our timing tool, DDMS).

Although these overheads are high in relative terms, they are mitigated by the fact that the absolute overheads are small. Given that these WebView APIs are called infrequently in an app, the runtime overhead accounts for a negligible factor of the total runtime of the app. We have found these latencies to be acceptable in use, but there is room to optimize our techniques, especially with regards to object shadowing. Furthermore, interacting with web content is especially amenable to absorbing the overheads introduced by IPC, since the runtime of such operations is often dominated by network latency.

### 8. Related Work

- **Studying WebView-Related Attacks**: Previous studies have reported several types of WebView attacks that exploit the app-web bridge. Luo et al. [16] demonstrated that, using WebView APIs, apps may inject malicious scripts into embedded web content, and unauthorized web code may invoke app-exported Java methods. Roesner et al. [24] noted that apps can read passwords from embedded WebViews. Many works have noted the scope and severity of malicious web content on benign apps (web-to-app attacks). Chin et al. [6] studied two types of WebView attacks whereby malicious JavaScript scripts perform unauthorized Java invocations and file system access in vulnerable apps. Neugschwandtner et al. [19] showed that WebViews can serve as a powerful attack vector when the server is compromised. Thomas et al. [28] formulated a model for determining the lifetime of vulnerabilities in Android using JavaScript attacks on WebView as a case study. Wang et al. [31] demonstrated origin-confusion attacks and provided a mitigation that requires OS modifications. Son et al. [27] found that untrusted advertisements rendered in WebViews may infer user profiles by testing the mere existence of certain files, an operation that the current WebView design cannot forbid. Motivated by these previous studies, our work solves an open and pressing issue—generalizing and preventing WebView-related attacks.

- **Isolating External Web in Apps**: There is a rich body of work on mobile ads isolation, which isolates ads from hosting apps by placing them in separate processes or apps. NativeWrap [18] expands this isolation to cover web applications in WebViews. Our work also uses process boundaries to separate apps and web content but is compatible with all kinds of WebView usages and considers both web-to-app and app-to-web attacks. Unlike previous work, our system allows for policy-driven and origin-based security and includes a static rewriting tool, WIRE, to help app users conveniently apply WIREframe to existing apps that use WebView. Draco [29] is the latest work that mitigates untrusted web content rendered in WebView by extending the WebView system app on recent versions of Android. In comparison, our work does not require rooted devices or deployment assistance from OS or device vendors and applies to both web-to-app and app-to-web attacks.

- **Securing Sensitive Web Content in Untrusted Apps**: Web-based logins are a common embedded web element that previous research has sought to secure [5, 15, 25] by means of trusted devices, verified UI, and scrutinized implementation of authentication protocols. In contrast, WIREframe prevents the web content manipulations unique to WebView, caused by faulty security assumptions and coarse security control over the app-web bridge. LayerCake [24] is a modified version of Android that prevents UI confusion and clickjacking attacks. It supplies secure user interface elements, including SecureWebView, which can be embedded in an app but run in a separate process. SecureWebView statically disallows the use of JavaScript and the app-web bridge, preventing SSO attacks. However, SecureWebView only aims to protect sensitive web content, whereas WIREframe protects both apps and web content as per the policies from both sides. WIREframe is backward-compatible with the existing Android architecture. While the goals of our systems are different, it would be interesting to combine them: LayerCake could enable the app-web bridge but enforce the policies described in this paper, and WIRE could retarget legacy apps to use the OS-provided SecureWebView.

- **Hybrid Frameworks**: Frameworks such as PhoneGap/Cordova [3] allow developers to write apps in web languages, including HTML and JavaScript. The abstractions provided by such frameworks could implement some of the protections against malicious web content that we describe. For example, Cordova can hook URL loading and inject filtering. However, it is the responsibility of the developer to use the framework correctly, and thus enforcement is not mandatory. Some recent works [13, 9] attacked hybrid apps via local code injection or remote resource abuse and proposed mitigations specific to hybrid apps. In comparison, WIREframe focuses on native apps that embed web content. Since hybrid frameworks all use WebView as their building blocks, they may in principle adopt WIREframe’s policy-driven, origin-based security model to govern web elements in hybrid apps.

### 9. Acknowledgment

We thank the anonymous reviewers for their insightful comments. This project was supported by the Army Research Office (Grant#: W911NF-17-1-0039), the National Science Foundation (Grant#: CNS-1421824, CNS-1228782), and other funding sources.