# A View on the Past and Future of Fault Injection

**Authors:**
- Nuno Silva, Critical Software SA, Coimbra, Portugal (nsilva@criticalsoftware.com)
- Ricardo Barbosa, Critical Software SA, Coimbra, Portugal (rbarbosa@criticalsoftware.com)
- João Carlos Cunha, Polytechnic Institute of Coimbra/CISUC, Coimbra, Portugal (jcunha@ipc.pt)
- Marco Vieira, CISUC-University of Coimbra, Coimbra, Portugal (mvieira@uc.pt)

## Abstract
Fault injection is a well-established technique for assessing the dependability attributes of computer systems. This paper provides a brief overview of past applications of fault injection, particularly in embedded systems, and discusses potential future directions, both in terms of application areas and business markets.

**Keywords:** Fault Injection, Dependability, Fault Models

## I. Introduction
Over the past few decades, research on fault injection (FI) has primarily focused on emulating hardware faults. Numerous studies have demonstrated that these faults can be realistically emulated. More recently, there has been an increased interest in injecting software faults, leading to several new works. In terms of application areas and business markets, fault injection has been predominantly used in the validation of safety-critical embedded systems, with the aerospace industry being a prominent example. However, fault injection tools are highly dependent on the underlying technology, necessitating continuous evolution to keep pace with technological advancements, system complexity, and criticality.

This paper reviews the fundamental concepts, typical fault models, and well-known tools in fault injection. Based on this analysis, we propose ideas for new application areas, fault models, and market needs. Our goal is to contribute to the ongoing discussion about the future of fault injection research and technology development.

## II. Fault Injection Basics

### A. Applications of Fault Injection
Critical systems are designed with fault and error handling mechanisms to tolerate various types of faults, such as development, physical, or interaction faults [1]. Fault injection is commonly used to evaluate the effectiveness of these fault-tolerant mechanisms during system development. Fault injection tools provide means to measure fault coverage, error detection latency, and the impact of fault tolerance on the system.

Another successful application of fault injection is in the robustness testing of embedded systems. By deliberately corrupting parameters provided to operating system calls, the resilience of the system in avoiding crashes can be evaluated. In distributed environments, fault injection in messages is useful for testing protocol implementations and system security.

### B. Typical Fault Models
A fault model describes the scope of faults considered for injection experiments. These models represent real faults and are limited by the tool's ability to reproduce or emulate their effects. For hardware faults, common models include bit corruption (e.g., bit-flip or stuck-at), bridging (short circuits), and open (broken lines). These models are complemented by defining the location, persistence, activation time, dimension, and duration of the faults. Software fault models, on the other hand, describe common mistakes made by developers, including defects and their manifestations at the program state.

### C. Fault Injection Tools
Several fault injection tools have been developed for both hardware and software faults. Hardware fault injection techniques include hardware-implemented, software-implemented, and radiation-based methods. Software fault injection techniques involve the mutation of source code and machine code. An overview of these tools can be found in [2].

Among the many hardware fault injection tools, csXception (www.xception.org) is the only commercial fault injector available for embedded systems. It leverages the debugging and monitoring capabilities of modern processors to provide spatial, temporal, and data manipulation fault triggers with minimal intrusion.

For software fault injection, FINE and DEFINE were among the first tools to implement mutations. The Generic Software Fault Injection Technique (G-SWFIT) for emulating software faults at the machine-code level is described in [3]. However, existing tools are still largely in the prototype stage, with no commercial tools available yet (although csXception implements some operators).

Other tools, such as Holodeck, use fault injection to simulate real-world application and system errors for Windows applications and services. Additionally, commercial automated testing tools like LDRA and VectorCast are starting to incorporate fault injection tests, providing facilities for boundary value and unit testing.

## III. Fault Injection Towards the Future

### A. Fault Models as a Challenge
Testing systems for all possible failures is not feasible, so a restricted and suitable fault model must be selected. The fault model should be based on a deep understanding of the domain, the system, and its interaction with the environment. Appropriate fault models can be derived from known failures, identified hazards, feared events, and specific requirements (e.g., non-functional, safety, and reliability requirements).

Selecting and composing fault models is crucial, as they must trigger real problems that are recognized as such. These models must also be adapted to the available interfaces, monitoring, and control capabilities. With more critical and complex systems, and the efficiency of automated testing tools, fault injection techniques face new challenges. Having a realistic fault model is one of the biggest challenges, and these models need to be continuously updated and adapted to technological evolutions (both hardware and software).

The constant evolution and need for updated tools raise questions about the advantages of fault injection: are they effectively and efficiently solving real problems? Another key question is which areas or domains should research on fault models focus on, and what problems are they addressing?

### B. Needs and Markets
Industrial domains generally accept fault injection when it becomes easy and cost-effective to use, or when it becomes mandatory. Recent standards, such as ISO26262 for the automotive market, strongly recommend the use of fault injection tests, but there is no strict requirement. There are few public works describing the use of fault injection to support compliance with these standards, even though it could be an excellent tool for achieving MC/DC coverage for DO-178B, for example.

Traditional markets for fault injection include space and aeronautics, where systems operate in harsh environments and safety concerns are paramount. Other markets, such as transportation and nuclear power plants, can also benefit from non-functional testing techniques, and the industry is increasingly recognizing this, especially in light of recent failures [4][5]. Although there is limited information on the use of fault injection in these areas, the recommendation of ISO26262 has led to broader application in the automotive industry.

On the academic side, while many fault injection tools exist, none are ready-to-use, and a common framework would be a significant breakthrough. The real needs often relate to specific requirements of the system/architecture, the environment, and the maturity of the technologies involved. Fault injection is commonly used to complement regular/functional testing, identify dependability bottlenecks, analyze system behavior under faults, prove the coverage of error detection, isolation, and recovery mechanisms, test fault tolerance, and study availability and performance losses. The key is to understand new trends in fault injection applicability by learning from field problems that can be solved by fault injection.

## IV. Conclusion
The goal of this paper is to foster discussion on the direction of fault injection research, technology development, and industrial fit. While many research groups work on and use fault injection, a common view on methodologies and tools is not yet available. It is also unclear what the best direction to follow is and what real problems can be efficiently solved with these technologies. Markets such as automotive and nuclear seem promising, but it is not clear if fault injection technology will be widely adopted in these scenarios. These are the types of questions that we believe should be jointly discussed between academia and industry.

## Acknowledgment
This work was partially supported by the project “CECRIS - CErtification of CRItical Systems”, FP7 - Marie Curie (IAPP) number 324334.

## References
[1] A. Avizienis et al., "Basic Concepts and Taxonomy of Dependable and Secure Computing," IEEE TDSC, 2004.
[2] R. Barbosa et al., “Fault Injection,” Resilience Assessment and Evaluation of Computing Systems, ISBN: 978-3-642-29031-2, 2012.
[3] J. Durães, H. Madeira, “Emulation of Software Faults: A Field Data Study and a Practical Approach,” IEEE TSE, 2006.
[4] M. Holt et al., “Nuclear Disaster Summary,” Report, Jan. 18, 2012, http://www.fas.org/sgp/crs/nuke/R41694.pdf, visited 12-04-2013.
[5] C. Bubinas, “GM recalls nearly 27,000 vehicles over software problem,” April 10, 2013, http://www.klocwork.com/blog/coding-standards/gm-recalls-nearly-27000-vehicles-over-software-problem/, visited 12-04-2013.