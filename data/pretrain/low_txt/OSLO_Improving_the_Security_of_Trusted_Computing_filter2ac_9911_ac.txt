### Linux Kernel Performance and Boot Time

The Linux kernel's implementation of the SHA-1 hash function is significantly faster compared to other versions, primarily due to optimizations such as loop unrolling. The throughput of the Linux version is three to four times higher. As shown in Figure 4, booting a system with our SHA-1 implementation takes 0.315 seconds, whereas a highly optimized `sha1sum` version takes only 0.084 seconds. Given that the typical system boot time is several minutes, an additional 0.231 seconds for the SHA-1 implementation is considered acceptable.

### Source and Binary Sizes

Figure 5 compares the source and binary sizes for BIOS, GRUB, and OSLO. The table also includes the size of gzip-compressed binaries to account for the effect of empty sections in the images. Unfortunately, the source code for the HP BIOS is not available. A similar but older Award BIOS consists of approximately 150,000 lines of assembler code. The numbers provided for GRUB do not include the drivers used for network booting; adding these would nearly double the given figures.

OSLO is significantly smaller than GRUB and two orders of magnitude smaller than the BIOS we examined. Assuming that more code generally leads to more bugs, and disregarding the effects of a code size-optimizing compiler, we can infer that OSLO has fewer bugs due to its smaller size compared to GRUB or the BIOS.

In a typical system like Windows or Linux, where the Trusted Computing Base (TCB) of an application comprises millions of lines of code and programs consume tens or hundreds of megabytes, the size of GRUB and the BIOS might seem less critical. However, as secure systems trend toward smaller kernels and hypervisors (e.g., L4/NIZZA or Xen), the TCB reduction through OSLO can be highly beneficial.

### Security Benefits of OSLO

In summary, OSLO offers a smaller attack surface due to its minimal size and the use of Dynamic Root of Trust for Measurement (DRTM), which mitigates TPM reset and BIOS attacks as discussed in Section 3.1.

### Related Work

Previous research has highlighted the vulnerability of trusted computing platforms to hardware attacks. Kursawe et al. [18] demonstrated eavesdropping on the LPC bus to capture and analyze communication between the CPU and the TPM. They noted that an active hardware attack on the LPC bus could deceive the TPM about the platform state, allowing untrusted code to masquerade as DRTM.

Several studies have identified limitations in the trusted computing specification and its implementations. Bruschi et al. [4] showed that TPM authorization protocols are susceptible to replay attacks. Sadeghi et al. [27] reported that many TPM implementations do not meet the TCG specification. Garriss et al. [8] found that public computing kiosks using remote attestation are vulnerable to boot-between attestation attacks. They suggested a reboot counter in the TPM to make reboots visible to remote parties. However, this counter would not prevent our TPM reset attack, as it needs to detect whether the TPM was powered on later than the rest of the platform, a property a reboot counter cannot achieve.

There are more sophisticated BIOS attacks documented in the literature. For example, Heasman [12] demonstrated at Blackhat Federal 2006 that a rootkit can be hidden in ACPI code stored in the BIOS. In a subsequent paper [11], he described how a rootkit can persist in a system with a secured BIOS by using other flash chips. By combining our attack to disable the Core Root of Trust for Measurement (CRTM) with Heasman’s work, it seems possible to hide a rootkit in the BIOS while reporting correct hash values to the TPM.

To prevent BIOS attacks, Phoenix Technologies offers a firmware called TrustedCore [26] that allows only signed updates. Intel Active Management Technology [15] also provides this feature. Sailer et al. [28] describe an integrity measurement system for Linux using a static root of trust. Their architecture, which focuses on operating system enhancements, is not limited to Static Root of Trust for Measurement (SRTM). An implementation like OSLO could benefit from a smaller attack surface, a shorter trust chain, and reduced vulnerability to TPM and BIOS attacks.

### Acknowledgements

We would like to thank Hermann Härtig, Michael Peter, Udo Steinberg, Neal Walfield, Carsten Weinhold, and Björn Döbel for their comments. Additionally, we thank Adrian Perrig, Jonathan McCune, and the reviewers for their suggestions to improve the paper. Special thanks go to Adam Lackorzynski for providing the necessary hardware in a timely manner.

### Future Work and Conclusion

OSLO is not yet feature-complete. We plan to finish implementing DMA protection and add support for the ACPI event log, which should facilitate integration into larger projects that use the event log for remote attestation. We also aim to port OSLO to use the `senter` instruction on an Intel TET platform, demonstrating the portability of the multiboot chainloader design or showing that `senter` implies an integrated design, as proposed for Xen [38]. Our future work will also include searching for new attack points in other trusted computing implementations.

It was not necessary to look at more sophisticated attack points, such as buffer overflows or cryptographic algorithm strength, to find the vulnerabilities and attacks presented in this paper. Compared to a similar analysis of another secure system, such as an RFID chip [3], it is clear that current trusted computing implementations are not resilient to even simple attacks and do not meet the assumptions of a secure design. A small bug can compromise the additional security provided by a TPM.

We suspect that most platforms are vulnerable to the TPM reset and many to the BIOS attack. Consequently, software based on SRTM, such as Microsoft’s BitLocker, cannot provide secure TPM-driven encryption and attestation on these systems.

### References

[1] AMD. Secure Virtual Machine Architecture Reference Manual, May 2005.
[2] BitLocker Drive Encryption: Technical Overview. URL: http://technet.microsoft.com/en-us/windowsvista/aa906017.aspx.
[3] Steve Bono, Matthew Green, Adam Stubblefield, Ari Juels, Avi Rubin, and Michael Szydlo. Security Analysis of a Cryptographically-Enabled RFID Device. In USENIX Security Symposium, Baltimore, Maryland, USA, July 2005. USENIX.
[4] D. Bruschi, L. Cavallaro, A. Lanzi, and M. Monga. Attacking a Trusted Computing Platform - Improving the Security of the TCG Specification. Technical Report RT 05-05, Università degli Studi di Milano, Milano MI, Italy, May 2005.
[5] eCryptfs: An Enterprise-class Cryptographic Filesystem for Linux. URL: http://ecryptfs.sourceforge.net.
[6] EMSCB Downloads. URL: http://www.emscb.com/content/pages/turaya.downloads.
[7] Enforcer Project. URL: http://enforcer.sourceforge.net.
[8] Scott Garriss, Ramón Cáceres, Stefan Berger, Reiner Sailer, Leendert van Doorn, and Xiaolan Zhang. Towards Trustworthy Kiosk Computing. In "Proceedings of the 8th IEEE Workshop on Mobile Computing Systems & Applications (HotMobile 2007)". IEEE Computer Society Press, February 2007.
[9] David Grawrock. The Intel Safer Computing Initiative. Intel Press, January 2006.
[10] Hermann Härtig, Michael Hohmuth, Norman Feske, Christian Helmuth, Adam Lackorzynski, Frank Mehnert, and Michael Peter. The Nizza Secure-System Architecture. In Proceedings of the 1st International Conference on Collaborative Computing: Networking, Applications and Worksharing (CollaborateCom 2005), December 2005.
[20] John Marchesini, Sean W. Smith, Omen Wild, and Rich MacDonald. Experimenting with TCPA/TCG Hardware, or: How I Learned to Stop Worrying and Love the Bear. Technical Report TR2003-476, Dartmouth College, Hanover, NH, December 2003.
[21] H. Maruyama, F. Seliger, N. Nagaratnam, T. Ebringer, S. Munetoh, S. Yoshihama, and T. Nakamura. Trusted Platform on Demand. Technical Report RT0564, IBM Corporation, February 2004.
[22] Multiboot Specification. URL: http://www.gnu.org/software/grub/manual/multiboot/multiboot.txt.
[23] Chris J. Mitchell, editor. Trusted Computing. IEE, London, Nov 2005.
[11] John Heasman. Implementing and Detecting a PCI Rootkit. November 2006.
[24] OSLO - Open Secure Loader. URL: http://os.inf.tu-dresden.de/~kauer/oslo.
[12] John Heasman. Implementing and Detecting an ACPI Rootkit. In BlackHat Federal, January 2006.
[25] Siani Pearson, editor. Trusted Computing Platforms. Prentice Hall International, Aug 2002.
[13] Christian Helmuth, Alexander Warg, and Norman Feske. Mikro-SINA—Hands-on Experiences with the Nizza Security Architecture. In Proceedings of the D.A.CH Security 2005, Darmstadt, Germany, March 2005.
[14] Intel Corporation. LaGrande Technology Preliminary Architecture Specification. Intel Publication no. D52212, May 2006.
[15] Intel Advanced Management Technology. URL: http://www.intel.com/technology/manage/iamt.
[16] Bernhard Kauer. Authenticated Booting for L4. Study thesis, TU Dresden, November 2004.
[17] Kexec Article. URL: http://lwn.net/Articles/15468.
[18] Klaus Kursawe, Dries Schellekens, and Bart Preneel. Analyzing Trusted Platform Communication. In ECRYPT Workshop, CRASH - CRyptographic Advances in Secure Hardware, September 2005.
[19] Rich MacDonald, Sean W. Smith, John Marchesini, and Omen Wild. BEAR: An Open-Source Virtual Secure Coprocessor Based on TCPA. Technical Report TR2003-471, Dartmouth College, Hanover, NH, August 2003.
[26] Phoenix Technologies, TrustedCore. URL: http://www.phoenix.com/en/Products/Core+System+Software/TrustedCore.
[27] Ahmad-Reza Sadeghi, Marcel Selhorst, Christian Stüble, Christian Wachsmann, and Marcel Winandy. TCG Inside? - A Note on TPM Specification Compliance. In The First ACM Workshop on Scalable Trusted Computing (STC’06), November 2006.
[28] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn. Design and Implementation of a TCG-Based Integrity Measurement Architecture. In Proceedings of the USENIX Security Symposium, August 2004.
[29] Reiner Sailer, Trent Jaeger, Enriquillo Valdez, Ramón Cáceres, Ronald Perez, Stefan Berger, John Linwood Griffin, and Leendert van Doorn. Building a MAC-Based Security Architecture for the Xen Open-Source Hypervisor. In ACSAC, pages 276–285, 2005.
[30] Lenin Singaravelu, Calton Pu, Hermann Hartig, and Christian Helmuth. Reducing TCB Complexity for Security-Sensitive Applications: Three Case Studies. In EuroSys 2006, April 2006.
[31] SYSLINUX Project. URL: http://syslinux.zytor.com.
[32] Richard Ta-Min, Lionel Litty, and David Lie. Splitting Interfaces: Making Trust Between Applications and Operating Systems Configurable. In 7th USENIX Symposium on Operating Systems Design and Implementation (OSDI 2006), November 2006.
[33] TCG: Trusted Computing Group. URL: https://www.trustedcomputinggroup.org.
[34] TCG PC Client Implementation Specification for Conventional BIOS. URL: https://www.trustedcomputinggroup.org/specs/PCClient.
[35] TrustedGRUB. URL: http://www.prosec.rub.de/trusted_grub.html.
[36] GRUB TCG Patch to Support Trusted Boot. URL: http://trousers.sourceforge.net/grub.html.
[37] Wave’s Embassy Security Center. URL: http://www.wave.com/products/esc.html.
[38] [Xen-devel] Intel(R) LaGrande Technology Support. URL: http://lists.xensource.com/archives/html/xense-devel/2006-09/msg00047.html.