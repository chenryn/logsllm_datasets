### Materials
- 18-gauge twisted pair wire for the CAN bus backbone
- Wire nuts
- Tie wraps
- 12V DC power source
- Mini Cooper S Instrument Cluster
- 18” x 14” board
- 2 x 1.5” x 1.625” x 1.25” brackets with bolts

### Procedure

#### Mounting the Hardware
The first step was to mount the hardware onto a self-contained board. For prototyping, we used an 18” x 14” wooden board to house the platform of our CAN clock. We then mounted the Mini Cooper instrument cluster using brackets, screws, and bolts (Figure 2-5).

**Figure 2-5: Mounting Mini Cooper instrument cluster to platform board**

#### Reverse Engineering CAN Message IDs
Since BMW does not publicly disclose CAN message IDs for their ECU devices in passenger vehicles, we applied our reverse engineering methodology described in Section 2. This allowed us to identify the necessary message IDs and byte offsets to control the speedometer and tachometer on the instrument cluster.

#### Building the CAN Network
The next step was to build a small CAN network and a CAN node capable of introducing messages onto the data bus. We started by constructing the CAN bus infrastructure. Adhering to the CAN standard, we used approximately 18 inches of 18-gauge twisted pair wire for the CAN bus backbone (Figure 2-6).

**Figure 2-6: 18-gauge twisted pair wire being used for the CAN bus backbone**

To reduce reflections, we terminated both ends of the twisted pair wire with 120 Ω resistors (Figure 2-7).

**Figure 2-7: Wire terminated with 120 ohm resistors on both ends**

#### Connecting the Instrument Cluster
We then connected the Mini Cooper instrument cluster (which includes both the speedometer and tachometer) to the network via its CAN data lines. To ensure proper connections, we referenced the electrical schematics from Mitchell1 (www.prodemand.com), which provides extensive vehicle service manuals, diagnostic codes, and wiring schematics (Figure 2-8).

**Figure 2-8: Wires coming off of the Mini Cooper instrument cluster**

From the 2003 Mini Cooper S service manual, we identified the following wires:
- **Power Wires:**
  - BRN/BLK: Ground
  - VIO/BLK: 12V power source (HOT IN ACCY, RUN, AND START)
  - BLK/VIO: 12V power source (HOT IN START)
  - RED/YEL: 12V power source (HOT AT ALL TIMES)
  - GRN/BLU: 12V power source (HOT IN ON OR START)
- **CAN Data Lines:**
  - YEL/BRN: CAN-L
  - YEL/BLK: CAN-H

After identifying these wires, we stripped, spliced, and soldered them as needed. We connected wires 2, 3, 15, and 16 to the positive lead of the 12V power source and wire 1 (ground) to the negative lead (Figure 2-9). We also spliced the CAN high and low data lines into the CAN bus.

**Figure 2-9: Splicing instrument cluster wires together with CAN bus and 12V power source**

#### Configuring the CAN Node
With the instrument cluster successfully connected to the CAN bus, we configured the node responsible for transmitting data to the instrument cluster. We used an Arduino Uno Rev 3 and a CAN-Shield for this purpose (Figure 2-10).

**Figure 2-10: Arduino Uno and CAN shield simulating a rogue CAN device**

To interface the CAN shield with the data bus, we spliced the 18-gauge twisted pair wire from the CAN bus and soldered the CAN-H and CAN-L wires to the pins on the CAN shield (Figure 2-11).

**Figure 2-11: CAN shield used to connect to CAN bus**

The Arduino was powered from the same 12V DC power source that powers the instrument cluster. The Arduino Uno features a built-in voltage regulator at the power port, allowing it to handle 7-12 volts (Figure 2-12).

**Figure 2-12: 12V power source and Arduino voltage regulator**

For accurate timekeeping, we used a real-time clock (RTC) module powered by a small battery to retain the current time during power loss. The Arduino polls the time from the RTC to transmit accurate time to the instrument cluster gauges (Figure 2-13).

**Figure 2-13: RTC used by Arduino to poll accurate time**

#### Programming the Microcontroller
Finally, we programmed the microcontroller using the MCP2515 library for CAN communication and the SPI library for the CAN shield. The microcontroller was configured to operate in two modes: Clock Mode and Demo Mode, toggled by the joystick button on the CAN-Shield (Figure 2-14).

**Figure 2-14: Joystick button used to toggle between clock mode and demo mode**

The final product, the CAN Clock, is shown displaying a time of 2:47 p.m. (Figure 2-15).

**Figure 2-15: Mini Cooper CAN clock final product**

### Discussion
This proof of concept demonstrates the ease with which an attacker can manipulate ECM components on passenger vehicles. As vehicles become more interconnected, the attack surface will grow. Previous research has shown how flooding the CAN network with traffic can cause a denial of service (DoS) attack, rendering critical systems like the braking system useless [2].

To mitigate such attacks, conventional network security concepts, such as firewalls and intrusion detection/prevention systems, should be considered for CAN networks. However, implementing these measures in a dynamic vehicle environment is challenging due to the need to balance security, reliability, and efficiency.

### Conclusion
This work describes a methodology for reverse engineering proprietary CAN message IDs on passenger vehicles. We demonstrated how to identify and manipulate these message IDs by building a CAN network and controlling the Mini Cooper's instrument cluster. Future work will focus on monitoring CANs and possibly introducing customized CAN firewalls and intrusion prevention systems.

### References
[1] Bosch, C. A. N. (1991). Specification version 2.0. Published by Robert Bosch GmbH (September 1991).
[2] Koscher, K., Czeskis, A., Roesner, F., Patel, S., Kohno, T., Checkoway, S., ... & Savage, S. (2010, May). Experimental security analysis of a modern automobile. In Security and Privacy (SP), 2010 IEEE Symposium on (pp. 447-462). IEEE.
[3] Checkoway, S., McCoy, D., Kantor, B., Anderson, D., Shacham, H., Savage, S., ... & Kohno, T. (2011, August). Comprehensive experimental analyses of automotive attack surfaces. In Proceedings of the 20th USENIX conference on Security (pp. 6-6). USENIX Association.
[4] Davis, R. I., Burns, A., Bril, R. J., & Lukkien, J. J. (2007). Controller Area Network (CAN) schedulability analysis: Refuted, revisited and revised. Real-Time Systems, 35(3), 239-272.