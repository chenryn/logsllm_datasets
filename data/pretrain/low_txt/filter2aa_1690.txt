# Fuzzing AOSP for Non-Crash Bugs

## Authors
- Elphet
  - Security Researcher (Intern) at 360 Alpha Team
  - Focus: Android system and application security
- Guang Gong
  - Senior Security Researcher and Team Leader at 360 Alpha Team
  - Focus: Android/Chrome

## Introduction
- **Fuzzers** are effective in identifying memory corruption bugs by detecting crashes. However, if a bug does not result in a crash, it may be overlooked.
- **Memory debugging tools** (e.g., ASAN, MSAN, TSAN) increase the crash rate of a program by reporting errors during runtime. These tools help in finding software memory issues but may miss certain types of bugs, such as intra-object overflows.
- We developed a tool based on LLVM to assist our fuzzers in uncovering ~30 vulnerabilities in AOSP.

## Agenda
1. Fuzzers and Sanitizers
2. Intra-Object Overflow Bugs
3. LLVM and IOODetector
4. Case Study
5. Related Work and Discussion

## Fuzzers and Sanitizers
- **Fuzzing** is an effective method for discovering memory corruption bugs.
- **General Workflow of a Fuzzer:**
  - **Seed Selector**: Selects initial test cases.
  - **Mutator/Generator**: Generates new test cases.
  - **Target Program**: The program being tested.
  - **Monitor/Filter**: Filters out uninteresting test cases and reports crashes.
  - **Initialization Seed Corpus**: Initial set of test cases.
  - **Report Crash**: Identifies and reports vulnerabilities.
  - **Discarded Boring Test Cases**: Uninteresting test cases are discarded.
  - **Interesting Test Cases**: Potentially interesting test cases.
  - **Real Vulnerabilities**: Confirmed vulnerabilities.

- **Crash Handling in Popular Fuzzers:**
  - **AFL**: Uses a specific crash handler.
  - **honggFuzz**: Employs a different crash handler.
  - **libFuzzer**: Has its own crash handling mechanism.

- **Memory Debugging Tools (Sanitizers):**
  - **Address Sanitizer (ASAN)**: Detects use-after-free, heap buffer overflow, stack buffer overflow, global buffer overflow, use-after-return, use-after-scope, and initialization order bugs.
  - **Leak Sanitizer (LSAN)**: Detects memory leaks.
  - **Memory Sanitizer (MSAN)**: Detects use of uninitialized memory.
  - **Thread Sanitizer (TSAN)**: Detects data races and deadlocks.
  - **Undefined Behavior Sanitizer (UBSAN)**: Detects undefined behavior.

- **Bugs that ASAN Cannot Detect:**
  - **Intra-Object Overflows**: Overflows within an object's fields or large array indices.

## Intra-Object Overflow Detector (IOODetector)
- **Manual Approach**:
  - Manually sanitize indices to prevent buffer overflows after reviewing the project. This is tedious and prone to missing bugs.

- **Automatic Approach**:
  - **Static Analysis**: Using LLVM passes and data flow analysis.
  - **Dynamic Analysis**: Using LLVM instrumentation and data flow tracing.
  - **Fuzzing**: Combining with fuzzing techniques.

- **LLVM and IR:**
  - **Clang Frontend**: Translates source code into Intermediate Representation (IR).
  - **LLVM Optimizer**: Performs optimizations on IR.
  - **Backend**: Translates optimized IR into machine code.
  - **Custom LLVM Passes**: Custom passes can be added to the IR.

- **LLVM IR GEP Instruction:**
  - `getelementptr` instruction calculates the address of a subelement in an aggregate data structure.
  - **APIs**:
    - `getSourceElementType()`
    - `getResultElementType()`
    - `getNumIndices()`
    - `hasIndices()`
    - `Indices()`
    - `getPointerOperand()`
    - `getPointerOperandType()`
    - `getOperand()`

- **IOODetector's Simplest Solution:**
  - Inserts a check function call before every GEP instruction whose source type is an array.
  - Checks if the index is within bounds.

- **Challenges and Solutions:**
  - **Recursion**: Tags in the same function are constants. Solution: Introduce `call_layer` field to simulate the call stack.
  - **Multiple Modules**: Use a global tag generator to ensure unique and consistent tags across modules.

## Case Study: libxaac in AOSP
- **libxaac**:
  - New OMX component introduced in Android P.
  - Stands for xHE-AAC (Extended High Efficiency Advanced Audio Coding).
  - Efficient bit rates and seamless switching for better audio delivery.
  - Memory management is handled by the API caller, with large chunks (~64MB) allocated for efficiency.
  - Contains many intra-object arrays, making it unfriendly to fuzzers and ASAN.

- **Fuzzing libxaac:**
  - **ConfigFuzzer**: Tests the configuration process and generates good config buffers.
  - **DecodeFuzzer**: Tests the decoding process using random good config buffers.

- **Vulnerabilities Found:**
  - **Confirmed Bugs**: CVE-2018-9569, CVE-2018-9570, ..., CVE-2019-2086.
  - **Duplicated Issues**: Various AndroidID issues.
  - **Case Examples**:
    - **CVE-2019-2065**: Out-of-bounds write due to controllable `impd_read_bits_buf`.
    - **CVE-2018-9575**: Out-of-bounds access in `dwnmix_instructions[]`.
    - **CVE-2019-2064**: Out-of-bounds write in `str_filter_elements`.

- **False Positives and Performance:**
  - Strange accessing patterns can lead to false positives.
  - Performance overhead of IOODetector is ~2.6x, optimized to minimize unnecessary checks.

## Further Stories
- **Libxaac**: Marked as experimental and no longer included in production builds since November 2018.
- **BoundSan**: Introduced by Google to automatically instrument arrays and prevent overflows with minimal performance overhead (<1%).

## Thanks
- Q&A

---

This version of the text is more structured, clear, and professional, with improved readability and coherence.