### 5. Related Work

JStap is a modular system designed to detect malicious JavaScript by leveraging not only lexical and syntactic information but also semantic information such as control and data flow. Our approach aims to combine the predictions of multiple JStap modules, sending only samples with conflicting labels to more resource-intensive dynamic analysis components.

#### 5.1 Lexical Analysis

Several approaches in the literature have been proposed to detect malicious JavaScript inputs using lexical analysis. Rieck et al. developed Cujo [45], which combines n-gram features from JavaScript lexical units with dynamic code features, using an SVM classifier for accurate malware detection. Similarly, Laskov et al. implemented PJScan [34], which uses n-grams based on lexical features combined with a model of normality to detect malicious PDF documents. Stock et al. used tokens to implement Kizzle [49], a malware signature compiler focused on exploit kits. Additionally, Kar et al. [29] leveraged lexical analysis to detect SQL injection attacks.

#### 5.2 Syntactic Units Extracted from the AST

Other systems analyze JavaScript inputs by leveraging the Abstract Syntax Tree (AST). Curtsinger et al. implemented Zozzle [12], which extracts features from the AST and their corresponding node values, using a Bayesian classifier to detect malicious JavaScript. Fass et al. [17] proposed JaSt, which uses n-gram features from an AST traversal. Kapravelos et al. [28] introduced Revolver, which uses the AST to identify similarities between JavaScript inputs. If its dynamic detector labels similar files differently, they are reported as evasive.

#### 5.3 PDG for Security Analysis

JStap can be compared to systems that use ASTs or Program Dependence Graphs (PDGs) for vulnerability detection. For example, Yamaguchi et al. extrapolated known vulnerabilities using structural patterns from the AST to find similar flaws in other projects [58]. They also combined AST, Control Flow Graph (CFG), and PDG to mine more source code [57]. Backes et al. used this combination to identify different types of web application vulnerabilities [5].

#### 5.4 Dynamic Detectors

In addition to lexical and syntactic analyses, dynamic approaches can be effective in detecting malicious JavaScript. Cova et al. [11] combined anomaly detection with emulation in JSAND to identify malicious JavaScript by emulating its behavior and comparing it to benign profiles. Kolbitsch et al. implemented Rozzle [31], which imitates multiple browser and environment configurations to explore various execution paths and detect malicious JavaScript dynamically. J-Force [30] forces the JavaScript execution engine to test all execution paths systematically. We envision that JStap could be combined with such dynamic detectors to classify samples with conflicting labels. Filtering systems like EvilSeed from Invernizzi et al. [24] search the web for pages likely to be malicious using similarity detection and relation to an initial set of malicious seeds. Canali et al. [9] worked on Prophiler, which discards benign pages based on HTML-derived lexical features, the JavaScript AST, and URL-based analysis.

### 6. Conclusion

Attackers often obfuscate malicious JavaScript to hinder analysis and signature creation. However, these evasion techniques leave recurrent traces in the source code, making them detectable by systems that leverage lexical and syntactic features. Such systems are robust against time- or environment-dependent malware variants. In this paper, we proposed and built JStap, a modular system that can work at the lexical level and on AST, CFG, and PDG representations to automatically, statically, and accurately detect malicious JavaScript. We use random forest classifiers in combination with different semantic and syntactic representations of JavaScript samples for classification.

We evaluated our system on an extensive, up-to-date, and balanced dataset of over 270,000 unique JavaScript scripts, both benign and malicious. Each module independently achieved high accuracy, with the best one yielding accurate predictions 99.44% of the time, a low false-positive rate of 0.33%, and 0.8% false-negatives. To make more accurate predictions, we combined the predictions of three modules working at different levels, leveraging different aspects of the samples for classification. This combination could be used as a pre-filtering step, sending samples with conflicting labels to more costly follow-up analysis. In this scenario, we classified almost 93% of our dataset with a detection accuracy of 99.73% and 6.5% of our dataset with an accuracy still over 99%, meaning that less than 1% of our samples required additional scrutiny.

### Acknowledgments

We would like to thank the German Federal Office for Information Security (BSI), VirusTotal, and Kafeine DNC for providing us with malicious JavaScript samples for our experiments. We also thank the anonymous reviewers of this paper for their valuable feedback. Special thanks go to Dennis Salzmann for re-implementing Cujo. Furthermore, we gratefully acknowledge the help and inspiring discussions of Christian Rossow, Konrad Rieck, Marius Steffens, and Pierre Laperdrix. This work was partially supported by the German Federal Ministry of Education and Research (BMBF) through funding for the Center for IT-Security, Privacy, and Accountability (CISPA) (FKZ: 16KIS0345).

### References

[1] Esben Andreasen and Anders Møller. 2014. Determinacy in Static Analysis for jQuery. In International Conference on Object-Oriented Programming Systems Languages & Applications (OOPSLA).
[2] AtomEditor. [n.d.]. Atom: a hackable text editor for the 21st Century. In: https://atom.io. Accessed on 2019-06-05.
[3] Aurore54F. [n.d.]. JaSt - JS AST-Based Analysis. In: https://github.com/Aurore54F/JaSt. Accessed on 2019-05-24.
[4] Michael Backes and Mohammad Nauman. 2017. LUNA: Quantifying and Leveraging Uncertainty in Android Malware Analysis through Bayesian Machine Learning. In Euro S&P.
[5] Michael Backes, Konrad Rieck, Malte Skoruppa, Ben Stock, and Fabian Yamaguchi. 2017. Efficient and Flexible Discovery of PHP Application Vulnerabilities. In S&P.
[6] Davide Balzarotti, Marco Cova, Christoph Karlberger, Christopher Kruegel, Engin Kirda, and Giovanni Vigna. 2010. Efficient Detection of Split Personalities in Malware. In NDSS.
[7] Michael Brengel, Michael Backes, and Christian Rossow. 2016. Detecting Hardware-Assisted Virtualization. In DIMVA.
[8] BSI. [n.d.]. German Federal Office for Information Security (BSI). In: https://www.bsi.bund.de/EN. Accessed on 2019-07-18.
[9] Davide Canali, Marco Cova, Giovanni Vigna, and Christopher Kruegel. 2011. Prophiler: A Fast Filter for the Large-scale Detection of Malicious Web Pages. In International Conference on World Wide Web (WWW).
[10] The SciPy community. [n.d.]. scipy.sparse.csr_matrix. In: https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_matrix.html#scipy.sparse.csr_matrix. Accessed on 2019-06-05.
[11] Marco Cova, Christopher Kruegel, and Giovanni Vigna. 2010. Detection and Analysis of Drive-by-download Attacks and Malicious JavaScript Code. In International Conference on World Wide Web (WWW).
[12] Charlie Curtsinger, Benjamin Livshits, Benjamin Zorn, and Christian Seifert. 2011. Zozzle: Fast and Precise In-Browser JavaScript Malware Detection. In USENIX Security.
[13] Hung Dang, Yue Huang, and Ee-Chien Chang. 2017. Evading Classifiers by Morphing in the Dark. In CCS.
[14] Andreas Dewald, Thorsten Holz, and Felix C. Freiling. 2010. ADSandbox: Sandboxing JavaScript to Fight Malicious Websites. In ACM Symposium on Applied Computing (SAC).
[15] Ecma International. [n.d.]. ECMAScript 2018 Language Specification (ECMA-262, 9th edition, June 2018). In: https://www.ecma-international.org/ecma-262/9.0. Accessed on 2019-06-04.
[16] Aurore Fass, Michael Backes, and Ben Stock. 2019. HideNoSeek: Camouflaging Malicious JavaScript in Benign ASTs. In CCS.
[17] Aurore Fass, Robert P. Krawczyk, Michael Backes, and Ben Stock. 2018. JaSt: Fully Syntactic Detection of Malicious (Obfuscated) JavaScript. In DIMVA.
[18] Tom Fawcett. 2006. An Introduction to ROC Analysis. Pattern Recogn. Lett.
[19] Asger Feldthaus and Anders Møller. 2013. Semi-Automatic Rename Refactoring for JavaScript. In Proc. ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA).
[20] Jeanne Ferrante, Karl J. Ottenstein, and Joe D. Warren. 1987. The Program Dependence Graph and Its Use in Optimization. ACM Transactions on Programming Languages and Systems (TOPLAS).
[21] GeeksOnSecurity. [n.d.]. Malicious Javascript Dataset. In: https://github.com/geeksonsecurity/js-malicious-dataset. Accessed on 2019-04-22.
[22] Kathrin Grosse, Nicolas Papernot, Praveen Manoharan, Michael Backes, and Patrick McDaniel. 2017. Adversarial Perturbations Against Deep Neural Networks for Malware Classification. In European Symposium on Research in Computer Security.
[23] Ariya Hidayat. [n.d.]. ECMAScript Parsing Infrastructure for Multipurpose Analysis. In: http://esprima.org. Accessed on 2019-06-04.
[24] Luca Invernizzi, Stefano Benvenuti, Marco Cova, Paolo Milani Comparetti, Christopher Kruegel, and Giovanni Vigna. 2012. EvilSeed: A Guided Approach to Finding Malicious Web Pages. In S&P.
[25] Simon Holm Jensen, Peter A. Jonsson, and Anders Møller. 2012. Remedying the Eval That Men Do. In International Symposium on Software Testing and Analysis (ISSTA).
[26] Simon Holm Jensen, Anders Møller, and Peter Thiemann. 2009. Type Analysis for JavaScript. In International Symposium on Static Analysis (SAS).
[27] Kafeine. [n.d.]. MDNC - Malware don’t need coffee. In: https://malware.dontneedcoffee.com. Accessed on 2019-04-22.
[28] Alexandros Kapravelos, Yan Shoshitaishvili, Marco Cova, and Christopher Krügel and Giovanni Vigna. 2013. Revolver: An Automated Approach to the Detection of Evasive Web-based Malware. In USENIX Security.
[29] Debabrata Kar, Suvasini Panigrahi, and Srikanth Sundararajan. 2016. SQLiGot: Detecting SQL Injections Attacks using Graph of Tokens and SVM. In Computers & Security.
[30] Kyungtae Kim, I Luk Kim, Chung Hwan Kim, Yonghwi Kwon, Yunhui Zheng, Xiangyu Zhang, and Dongyan Xu. 2017. J-Force: Forced Execution on JavaScript. In WWW.
[31] Clemens Kolbitsch, Benjamin Livshits, Benjamin Zorn, and Christian Seifert. 2012. Rozzle: De-cloaking Internet Malware. In S&P.
[32] J. Zico Kolter and Marcus A. Maloof. 2006. Learning to Detect and Classify Malicious Executables in the Wild. In Journal of Machine Learning Research.
[33] Radhesh Krishnan Konoth, Emanuele Vineti, Veelasha Moonsamy, Martina Lindorfer, Christopher Kruegel, Herbert Bos, and Giovanni Vigna. 2018. MineSweeper: An In-depth Look into Drive-by Cryptocurrency Mining and Its Defense. In CSS.
[34] Pavel Laskov and Nedim Šrndić. 2011. Static Detection of Malicious JavaScript-Bearing PDF Documents. In ACSAC.
[35] Victor Le Pochat, Tom Van Goethem, Samaneh Tajalizadehkhoob, Maciej Korczyński, and Wouter Joosen. 2019. Tranco: A Research-Oriented Top Sites Ranking Hardened Against Manipulation. In NDSS.
[36] Peter Likarish, Eunjin Jung, and Insoon Jo. 2009. Obfuscated Malicious JavaScript Detection Using Classification Techniques. In International Conference on Malicious and Unwanted Software (MALWARE).
[37] Davide Maiorca, Igino Corona, and Giorgio Giacinto. 2013. Looking at the Bag is Not Enough to Find the Bomb: An Evasion of Structural Methods for Malicious PDF Files Detection. In ASIACCS.
[38] Mozilla Developer Network. [n.d.]. Inheritance and the prototype chain. In: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain. Accessed on 2019-06-04.
[39] Mozilla Developer Network. [n.d.]. JavaScript Conditional Compilation: cc_on. In: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/at-cc-on. Accessed on 2019-06-04.
[40] Mozilla Developer Network. [n.d.]. SpiderMonkey. In: https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey. Accessed on 2019-09-10.
[41] Patricio Palladino. [n.d.]. Non alphanumeric JavaScript. In: http://patriciopalladino.com/blog/2012/08/09/non-alphanumeric-javascript.html. Accessed on 2019-06-10.
[42] Feargus Pendlebury, Fabio Pierazzi, Roberto Jordaney, Johannes Kinder, and Lorenzo Cavallaro. 2019. TESSERACT: Eliminating Experimental Bias in Malware Classification across Space and Time. In USENIX Security Symposium.
[43] Hynek Petrak. [n.d.]. Javascript Malware Collection. In: https://github.com/HynekPetrak/javascript-malware-collection. Accessed on 2019-04-22.
[44] Konrad Rieck. [n.d.]. Jassi: A Simple and Robust JavaScript Lexer. In: https://github.com/rieck/jassi. Accessed on 2019-05-24.
[45] Konrad Rieck, Tammo Krueger, and Andreas Dewald. 2010. Cujo: Efficient Detection and Prevention of Drive-by-Download Attacks. In ACSAC.
[46] scikit-learn developers. [n.d.]. Scikit-learn: HashingVectorizer. In: https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.HashingVectorizer.html. Accessed on 2019-06-05.
[47] scikit-learn developers. [n.d.]. sklearn.ensemble.RandomForestClassifier. In: https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html#sklearn.ensemble.RandomForestClassifier.feature_importances_. Accessed on 2019-06-12.
[48] Philippe Skolka, Cristian-Alexandru Staicu, and Michael Pradel. 2019. Anything to Hide? Studying Minified and Obfuscated Code in the Web. In The World Wide Web Conference (WWW).
[49] Ben Stock, Benjamin Livshits, and Benjamin Zorn. 2016. Kizzle: A Signature Compiler for Detecting Exploit Kits. In Dependable Systems and Networks (DSN).
[50] VirusTotal. [n.d.]. VirusTotal - Analyze suspicious files and URLs to detect types of malware, automatically share them with the security community. In: https://www.virustotal.com. Accessed on 2019-04-22.
[51] Nedim Šrndić and Pavel Laskov. 2013. Detection of Malicious PDF Files Based on Hierarchical Document Structure. In NDSS.
[52] Edwin B. Wilson and Margaret M. Hilferty. 1931. The Distribution of Chi-Squared. National Academy of Sciences of the United States of America.
[53] Wilco Wisse and Cor J. Veenman. 2015. Scripting DNA: Identifying the JavaScript Programmer. In Digital Investigation.
[54] Christian Wressnegger, Guido Schwenk, Daniel Arp, and Konrad Rieck. 2013. A Close Look on n-Grams in Intrusion Detection: Anomaly Detection vs. Classification. In ACM workshop on Artificial intelligence and security (AISec).
[55] Weilin Xu, Yanjun Qi, and David Evans. 2016. Automatically Evading Classifiers: A Case Study on PDF Malware Classifiers. In NDSS.
[56] Wei Xu, Fangfang Zhang, and Sencun Zhu. 2012. The Power of Obfuscation Techniques in Malicious JavaScript Code: A Measurement Study. In International Conference on Malicious and Unwanted Software (MALWARE).
[57] Fabian Yamaguchi, Nico Golde, Daniel Arp, and Konrad Rieck. 2014. Modeling and Discovering Vulnerabilities with Code Property Graphs. In S&P.
[58] Fabian Yamaguchi, Markus Lottmann, and Konrad Rieck. 2012. Generalized Vulnerability Extrapolation Using Abstract Syntax Trees. In ACSAC.