Certainly! Below is the optimized version of your text, with improved clarity, coherence, and professionalism:

---

### References

1. ABLON, L., LIBICKI, M. C., AND GOLAY, A. A. *Markets for Cybercrime Tools and Stolen Data: Hackers’ Bazaar*. Rand Corporation, 2014.

2. AMANI, S., BÉGEL, M., BORTIN, M., AND STAPLES, M. *Towards Verifying Ethereum Smart Contract Bytecode in Isabelle/HOL*. CPP. ACM. To appear (2018).

3. ARGHIRE, I. *Researchers Claim Wickr Patched Flaws but Didn’t Pay Rewards*. October 2016. [Online]. Available: http://www.securityweek.com/researchers-claim-wickr-patched-flaws-didnt-pay-rewards

4. ATZEI, N., BARTOLETTI, M., AND CIMOLI, T. *A Survey of Attacks on Ethereum Smart Contracts (SoK)*. In *International Conference on Principles of Security and Trust* (2017), Springer, pp. 164–186.

5. AVIŽIENIS, A. *The Methodology of N-Version Programming*. In *Software Fault Tolerance*, M. R. Lyu, Ed. John Wiley & Sons Ltd, 1995.

6. BANISADR, E. *How $800k Evaporated from the PoWH Coin Ponzi Scheme Overnight*. 2018. [Online]. Available: https://blog.goodaudience.com/how-800k-evaporated-from-the-powh-coin-ponzi-scheme-overnight-1b025c33b530

7. BENTOV, I., BREIDENBACH, L., DAIAN, P., JUELS, A., LI, Y., AND ZHAO, X. *The Cost of Decentralization in 0x and EtherDelta*. August 2017. [Online]. Available: http://hackingdistributed.com/2017/08/13/cost-of-decent/

8. BHARGAVAN, K., DELIGNAT-LAVAUD, A., FOURNET, C., GOLLAMUDI, A., GONTHIER, G., KOBEISSI, N., KULATOVA, N., RASTOGI, A., SIBUT-PINOTE, T., SWAMY, N., ET AL. *Formal Verification of Smart Contracts: Short Paper*. In *ACM PLAS* (2016), ACM, pp. 91–96.

9. BOGATTY, I. *Implementing Ethereum Trading Front-Runs on the Bancor Exchange in Python*. October 2017. [Online]. Available: https://medium.com/@ivanbogatyy/front-running-bancor-in-150-lines-of-python-with-ethereum-api-d5e2bfd0d798

10. BREIDENBACH, L., DAIAN, P., JUELS, A., AND SIRER, E. G. *An In-Depth Look at the Parity Multisig Bug*. July 2017. [Online]. Available: http://hackingdistributed.com/2017/07/22/deep-dive-parity-bug/

11. BREIDENBACH, L., DAIAN, P., JUELS, A., AND TRAMÈR, F. *To Sink Frontrunners, Send in the Submarines*. August 2017. [Online]. Available: http://hackingdistributed.com/2017/08/28/submarine-sends/

12. BREIDENBACH, L., DAIAN, P., TRAMÈR, F., AND JUELS, A. *Enter the Hydra: Towards Principled Bug Bounties and Exploit-Resistant Smart Contracts*. Cryptology ePrint Archive, Report 2017/1090, 2017. [Online]. Available: https://eprint.iacr.org/2017/1090

13. BUTERIN, V. *Ethereum: A Next-Generation Smart Contract and Decentralized Application Platform*. 2014. [Online]. Available: https://github.com/ethereum/wiki/wiki/White-Paper

14. BUTERIN, V. *Hard Fork Completed*. July 2016. [Online]. Available: https://blog.ethereum.org/2016/07/20/hard-fork-completed/

15. BUTERIN, V. *Thinking About Smart Contract Security*. June 2016. [Online]. Available: https://blog.ethereum.org/2016/06/19/thinking-smart-contract-security/

16. CHEN, L., AND AVIŽIENIS, A. *N-Version Programming: A Fault-Tolerance Approach to Reliability of Software Operation*. In *Fault-Tolerant Computing* (1995), IEEE, p. 113.

17. DAIAN, P. *Analysis of the DAO Exploit*. June 2016. [Online]. Available: http://hackingdistributed.com/2016/06/18/analysis-of-the-dao-exploit/

18. DELMOLINO, K., ARNETT, M., KOSBA, A., MILLER, A., AND SHI, E. *Step by Step Towards Creating a Safe Smart Contract: Lessons and Insights from a Cryptocurrency Lab*. In *Financial Cryptography* (2016), Springer, pp. 79–94.

19. DINGLEDINE, R., MATHEWSON, N., AND SYVERSON, P. *Tor: The Second-Generation Onion Router*. Tech. rep., Naval Research Lab Washington DC, 2004.

20. ECKHARDT, D. E., CAGLAYAN, A. K., KNIGHT, J. C., LEE, L. D., MCALLISTER, D. F., VOUK, M. A., AND KELLY, J. P. J. *An Experimental Evaluation of Software Redundancy as a Strategy for Improving Reliability*. IEEE TSE 17, 7 (1991), 692–702.

21. ECKHARDT, D. E., AND LEE, L. D. *A Theoretical Basis for the Analysis of Multiversion Software Subject to Coincident Errors*. IEEE TSE, 12 (1985), 1511–1517.

22. ETHEREUM. *Security Considerations*. Solidity Documentation. [Online]. Available: http://solidity.readthedocs.io/en/develop/security-considerations.html

23. ETHEREUM. *Ethereum Bug Bounty*. June 2018. [Online]. Available: https://bounty.ethereum.org/

24. EYAL, I., AND SIRER, E. G. *Majority is Not Enough: Bitcoin Mining is Vulnerable*. In *Financial Cryptography* (2014), Springer, pp. 436–454.

25. HIGH-TECH BRIDGE SA. *What’s Your Email Security Worth? 12 Dollars and 50 Cents According to Yahoo*. September 2013. [Online]. Available: https://www.htbridge.com/news/what_s_your_email_security_worth_12_dollars_and_50_cents_according_to_yahoo.html

26. HILDENBRANDT, E., SAXENA, M., ZHU, X., RODRIGUES, N., DAIAN, P., GUTH, D., AND ROSU, G. *KEVM: A Complete Semantics of the Ethereum Virtual Machine*. 2017.

27. HIRAI, Y. *Formal Verification of Deed Contract in Ethereum Name Service*. 2016.

28. HIRAI, Y. *Defining the Ethereum Virtual Machine for Interactive Theorem Provers*. In *International Conference on Financial Cryptography and Data Security* (2017), Springer, pp. 520–535.

29. JAKOBSSON, M., AND JUELS, A. *X-Cash: Executable Digital Cash*. In *Financial Cryptography* (1998), Springer, pp. 16–27.

30. JUELS, A., KOSBA, A., AND SHI, E. *The Ring of Gyges: Investigating the Future of Criminal Smart Contracts*. In *ACM CCS* (2016), ACM, pp. 283–295.

31. KATZENBEISSER, S., AND PETITCOLAS, F. *Information Hiding Techniques for Steganography and Digital Watermarking*. Artech House, 2000.

32. KNIGHT, J. C., AND LEVESON, N. G. *An Experimental Evaluation of the Assumption of Independence in Multiversion Programming*. IEEE Transactions on Software Engineering, 1 (1986), 96–109.

33. KNIGHT, J. C., AND LEVESON, N. G. *A Reply to the Criticisms of the Knight & Leveson Experiment*. ACM SEN 15, 1 (1990), 24–35.

34. KOSBA, A., MILLER, A., SHI, E., WEN, Z., AND PAPAMANTHOU, C. *Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts*. In *IEEE S&P* (2016), IEEE, pp. 839–858.

35. KRUPP, J., AND ROSSOW, C. *teEther: Gnawing at Ethereum to Automatically Exploit Smart Contracts*. In *USENIX Security* (2018).

36. NAGY, L., FORD, R., AND ALLEN, W. *N-Version Programming for the Detection of Zero-Day Exploits*. In *IEEE Topical Conference on Cybersecurity* (2006).

37. RANDELL, B. *System Structure for Software Fault Tolerance*. IEEE TSE, 2 (1975), 220–232.

38. REDDIT USER “JUPITER0”. *From the MAKER DAO Slack: “Today We Discovered a Vulnerability in the ETH Token Wrapper Which Would Let Anyone Drain It.”* June 2016. [Online]. Available: https://www.reddit.com/r/ethereum/comments/4nmohu/

39. RO, S. *29 Instances of a Major World Stock Market Shutdown*. March 2014. [Online]. Available: http://www.businessinsider.com/history-of-world-stock-market-breaks-2014-3

40. SOLANA, J. *$500K Hack Challenge Backfires on Blockchain Lottery SmartBillions*. October 2017. [Online]. Available: https://calvinayre.com/2017/10/13/bitcoin/500k-hack-challenge-backfires-blockchain-lottery-smartbillions/

41. STEINER, J. *Security is a Process: A Postmortem on the Parity Multi-Sig Library Self-Destruct*. 2017. [Online]. Available: https://blog.ethcore.io/security-is-a-process-a-postmortem-on-the-parity-multi-sig-library-self-destruct

42. SWENDE, M. H. *Blockchain Frontrunning*. July 2017. [Online]. Available: http://www.swende.se/blog/Frontrunning.html

43. SZABO, N. *Formalizing and Securing Relationships on Public Networks*. First Monday 2, 9 (1997).

44. TRAMÈR, F., ZHANG, F., LIN, H., HUBAUX, J.-P., JUELS, A., AND SHI, E. *Sealed-Glass Proofs: Using Transparent Enclaves to Prove and Sell Knowledge*. In *IEEE EuroS&P* (2017), pp. 19–34.

45. VAAS, L. *PayPal Refuses to Pay Bug-Finding Teen*. May 2013. [Online]. Available: https://nakedsecurity.sophos.com/2013/05/29/paypal-refuses-to-pay-bug-finding-teen/

46. VOGELSTELLER, F., AND BUTERIN, V. *ERC-20 Token Standard*. Ethereum Improvement Proposal, November 2015. [Online]. Available: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md

47. WIKIPEDIA. *Monty Hall Problem*. [Online]. Available: https://en.wikipedia.org/wiki/Monty_Hall_problem

48. WOOD, G. *Ethereum: A Secure Decentralised Generalised Transaction Ledger*. 2014.

49. ZHANG, F., CECCHETTI, E., CROMAN, K., JUELS, A., AND SHI, E. *Town Crier: An Authenticated Data Feed for Smart Contracts*. In *ACM CCS* (2016), ACM, pp. 270–282.

### Analysis of NNVP in the NASA Experiment

We briefly justify the results we obtained when applying our NNVP paradigm to the experimental results in [21]. The experiment consisted of 20 different program versions evaluated on six workloads (corresponding to different initial system states). For \( y \in [0, 20] \), Eckhardt et al. report \( g(y) \), the empirical proportion of inputs in each of their test suites that induce a failure in exactly \( y \) out of 20 programs. They do not distinguish whether the failures are identical or not. Compared to our setting in Section 2, Eckhardt et al. further consider a distribution over programs. That is, the \( N \) programs to be aggregated are chosen at random from the pool of 20 programs.

Following the notation and analysis for majority-voting in [21], we define the empirical probability \( \tilde{P}_{\text{maj}} \) that a majority of the \( N \) programs (randomly chosen from the 20) fail simultaneously (see [21, Equation 6]):

\[
\tilde{P}_{\text{maj}} = \left( \binom{20}{N} \right)^{-1} \sum_{y=0}^{20} g(y) \sum_{l=\frac{N+1}{2}}^{N} \binom{y}{l} \binom{20-y}{N-l}
\]

Similarly, we define the empirical probability \( \tilde{P}_{\text{all}} \) that all \( N \) chosen programs fail simultaneously on a given input:

\[
\tilde{P}_{\text{all}} = \left( \binom{20}{N} \right)^{-1} \sum_{y=0}^{20} g(y) \binom{y}{N}
\]

---

This version is more organized, with consistent formatting and clearer language. The references are now properly formatted and the equations are presented in a more readable manner.