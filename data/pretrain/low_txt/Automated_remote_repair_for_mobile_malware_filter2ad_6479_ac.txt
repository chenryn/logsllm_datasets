### Airmid: Automated System for Remote Remediation of Mobile Malware

#### 1. Repair Actions Based on User ID (u)
Depending on the value of `u`, the user ID identified in the previous step, the Airmid software initiates one or more of the following repair actions:
- **Creation of Kernel-Protected Local Firewall Rules:** To block malicious traffic.
- **Termination of Processes Running Under `u`:** To stop any active malicious processes.
- **Removal of the Application Package (APK) Owned by `u`:** To remove the source of the malicious behavior.
- **Removal of All Files Owned by `u`:** To ensure that all associated files are deleted.

If `u < 10000`, it is a system user ID corresponding to a core service. In this case, Airmid will only block the malicious traffic by creating appropriate firewall rules to avoid disrupting essential services.

If `u ≥ 10000`, it is an application user ID. Airmid will terminate all processes running with ID `u` and remove the application package owned by `u`. The application packages are identified by parsing the `/data/system/packages.xml` file, which contains information about all installed application packages and their corresponding user IDs.

Finally, Airmid scans the list of running processes to check if any native ARM processes are executing with user ID `u`. If such processes are found, Airmid purges all files owned by `u` from the device's storage.

#### 2. Firewalling Malicious Traffic
To firewall malicious traffic, the client interfaces with the Android kernel’s netfilter [35] hooks to provide lightweight packet filtering. Airmid adds rules that prohibit traffic destined for IP addresses actively used by processes owned by `u`. Additional provenance checks determine all active IP addresses if multiple processes are running under `u`. To prevent observation or alteration of these rules from userland, Airmid maintains its own shadow `ip_tables` data structure instead of registering its rules with `ip_tables`.

#### 3. Performance Evaluation
We characterized the overheads associated with the Airmid architecture through a performance analysis. Each operation was measured 100 times, and 95% confidence intervals were provided. Table 2 summarizes our experiments.

| Command                         | Mean (µs) | C.I. (µs)  |
|---------------------------------|-----------|------------|
| Factory Reset                   | 1504      | ± 38       |
| Device Status (Process List)    | 2991      | ± 48       |
| Process Termination             | 6537      | ± 1423     |
| File Removal                    | 6115      | ± 31       |
| Device-Side Filtering Rule      | 7149      | ± 826      |
| Application Removal             | 9174      | ± 1123     |

The factory reset function, which simply deletes a single configuration file (`data.img`), takes the least time with an average of 1504 µs (±38 µs). The most expensive operation, application removal, requires an average of 9174 µs (±1123 µs) due to the costs of process termination and deletion of multiple files.

These results demonstrate the lightweight nature of Airmid. Unlike traditional anti-virus architectures, which require regular scanning of all phone contents (an operation taking on the order of tens of seconds), Airmid attributes malicious behavior directly to an application and allows a targeted response. This approach is more power-efficient, making it suitable for mobile devices.

#### 4. Discussion

##### 4.1. Airmid Control
Airmid provides a powerful architecture to respond to the growing problem of mobile malware. While we believe this approach can help the vast majority of individual users, we recognize that some parties may not trust a cellular network provider to perform these operations. For example, phones used by government agencies or rival companies may prefer not to outsource malware remediation.

Our architecture is flexible enough to be implemented by a separate entity or cloud service. Companies that already proxy data traffic from corporate phones via a VPN can deploy an Airmid-speaking service in their network and configure their devices to accept commands only from that server. Individuals who do not want such control can alert the provider through an out-of-band resource, such as a web interface or when purchasing the device/service plan.

Airmid does not tie a device’s security to arbitrary cellular providers. When traveling abroad, mobile phones running the modified Airmid kernel can receive roaming telephony and data service without providing their "visited" network with control over Airmid’s functionality. This ensures that the device remains secure even when outside the home network.

The effectiveness of Airmid depends on the detection mechanisms used by the network sensor. Policies against known malicious domains or bots are likely to be effective, but systems relying on IDS to report anomalous traffic may produce false positives. Careful selection of these mechanisms is necessary.

##### 4.2. Device Hardening
The correct operation of Airmid requires that the device can protect the Airmid software. In our proof-of-concept implementation, we hardened the stock Android Linux kernel by disabling dynamic loading of kernel modules. Given that a significant proportion of traditional malware abuses this mechanism and that mobile devices generally do not use it, this is a strong first step in preventing kernel compromise. However, additional hardening may be required for real-world deployment. Virtualization is an increasingly popular approach, but it is relatively expensive and may not yet be ready for widespread deployment. Our threat model indicates that a protection layer with reasonable trade-offs is necessary for Airmid to run effectively.

#### 5. Conclusion
As mobile devices face an increasing volume of malicious applications, the ability of application markets to identify and remove such applications in a timely manner is becoming more challenging. Airmid addresses this problem by providing an automated system for remote remediation of mobile malware. Upon detecting malicious traffic, the cellular network interacts directly with the source device to identify the origin of the traffic. The device can then perform remediation, ranging from filtering the offending traffic to uninstalling the application. We have demonstrated that Airmid has very low overhead, making it scalable and efficient for outsourcing detection and removal of malicious applications to cellular providers and application markets, ultimately providing faster responses to infections.

#### 6. Acknowledgments
We would like to thank Michael Iannacone, Ferdinand Schober, and our anonymous reviewers for their helpful comments in the completion of this paper. This work was supported in part by the US National Science Foundation (CNS-0916047). Any opinions, findings, conclusions, or recommendations expressed in this publication are those of the authors and do not necessarily reflect the views of the National Science Foundation.

#### 7. References
[1] 3rd Generation Partnership Project. General packet radio service (GPRS). Technical Report 3GPP TS 23.060 v8.0.0.
[2] Airscanner AntiVirus for Windows Mobile, Accessed 2011. http://www.airscanner.com/downloads/av/av.html.
[3] C. Albanesius. Google pulls malware-infected apps from Android market. PCmag.com, June 2011.
[4] Android Developers. Security and permissions, Accessed 2011. http://developer.android.com/guide/topics/security/security.html.
[5] V. Balasubramaniyan, A. Poonawalla, M. Ahamad, M. Hunter, and P. Traynor. PinDr0p: Using Single-Ended Audio Features to Determine Call Provenance. In Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2010.
[6] P. Biondi. Scapy. http://www.secdev.org/projects/scapy/, Accessed 2011.
[7] A. Bose, X. Hu, K. G. Shin, and T. Park. Behavioral detection of malware on mobile handsets. In Proceedings of the International Conference on Mobile Systems, Applications, and Services (MobiSys), June 2008.
[8] A. Bose and K. Shin. Proactive security for mobile messaging networks. In Proceedings of the ACM Workshop on Wireless Security (WiSe), Sept. 2006.
[9] Bullguard mobile antivirus, Accessed 2011. http://www.bullguard.com/why/bullguard-mobile-antivirus.aspx.
[10] R. E. Calem. Scam costs net users thousands in transatlantic telephone bills. New York Times, Feb. 11, 1997.
[11] R. Cannings. Exercising our remote application removal feature. Android developers blog, June 2010. http://android-developers.blogspot.com/2010/06/exercising-our-remote-application.html.
[12] R. Cannings. An update on Android market security. Google Mobile blog, Mar. 2011. http://googlemobile.blogspot.com/2011/03/update-on-android-market-security.html.
[13] X. Chen, J. Andersen, Z. Mao, M. Bailey, and J. Nazario. Towards an understanding of anti-virtualization and anti-debugging behavior in modern malware. In Proceedings of the IEEE International Conference on Dependable Systems and Networks (DSN), June 2008.
[14] D. Dagon, T. Martin, and T. Starner. Mobile phones as computing devices: The viruses are coming! IEEE Pervasive Computing, 3(4):11–15, 2004.
[15] M. Egele, C. Kruegel, E. Kirda, and G. Vigna. PiOS: Preventing your cellphone from spies (sic). In Proceedings of the Symposium on Recent Advances in Intrusion Detection (RAID), Sept. 2009.
[16] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth. TaintDroid: An information-flow tracking system for realtime privacy monitoring on smartphones. In Proceedings of the USENIX Symposium on Operating Systems Design and Implementation (OSDI), Oct. 2010.
[17] F-Secure mobile security, Accessed 2011. http://www.f-secure.com/en_US/products/mobile/mobile-security/.
[18] F-Secure Corporation. F-Secure computer virus descriptions: Cabir, Dec. 2004. http://www.f-secure.com/v-descs/cabir.shtml.
[19] F-Secure Corporation. F-Secure computer virus descriptions: Mabir.A, Apr. 2005. http://www.f-secure.com/v-descs/mabir.shtml.
[20] F-Secure Corporation. F-Secure computer virus descriptions: Skulls.A, Jan. 2005. http://www.f-secure.com/v-descs/skulls.shtml.
[21] F-Secure Corporation. F-Secure malware information pages: Worm:SymbOS/Commwarrior, 2008. http://www.f-secure.com/v-descs/commwarrior.shtml.
[22] T. Garfinkel, K. Adams, A. Warfield, and J. Franklin. Compatibility is not transparency: VMM detection myths and realities. In Proceedings of the Workshop on Hot Topics in Operating Systems (HotOS), May 2007.
[23] G. Gu, P. Porras, V. Yegneswaran, M. Fong, and W. Lee. BotHunter: Detecting malware infection through IDS-driven dialog correlation. In Proceedings of the 16th USENIX Security Symposium, Aug. 2007.
[24] C. Guo, H. J. Wang, and W. Zhu. Smart phone attacks and defenses. In Proceedings of Third ACM Workshop on Hot Topics in Networks (HotNets), Nov. 2004.
[25] Hack Forums. Windows botnet source, Accessed 2011. http://www.hackforums.net/showthread.php?tid=108411.
[26] InfoSecurity.com. Premium rate calling Android malware spotted in the wild, May 2011. http://www.infosecurity-us.com/view/18301/premium-rate-calling-android-malware-spotted-in-the-wild/.
[27] Kaspersky mobile security, Accessed 2011. http://www.kaspersky.com/mobile_downloads.
[28] H. Kim, J. Smith, and K. Shin. Detecting energy-greedy anomalies and mobile malware variants. In Proceedings of the International Conference on Mobile Systems, Applications, and Services (MobiSys), June 2008.
[29] L4Android - Android on top of L4, Accessed 2011. http://l4android.org/.
[30] L. Liu, G. Yan, X. Zhang, and S. Chen. VirusMeter: Detecting privacy leaks in iOS applications. In Proceedings of the ISOC Networking & Distributed Systems Security Symposium (NDSS), Feb. 2011.
[31] McAfee Labs. McAfee threats report: First quarter 2011, June 2011.
[32] D. Moore, G. M. Voelker, and S. Savage. Inferring Internet denial-of-service activity. In Proceedings of the USENIX Security Symposium, Aug. 2001.
[33] My Weather, Accessed 2011. http://island.byu.edu/unclass/content/android-web-service-app-my-weather-running-and-full-source-code.
[34] Nanotweeter, Accessed 2011. http://code.google.com/p/nanotweeter/.
[35] Netfilter/iptables project, Accessed 2011. http://netfilter.org/.
[36] P. Porras, H. Saidi, and V. Yegneswaran. An analysis of the iKee.B (Duh) iPhone botnet. Technical report, SRI International, Dec. 2009.
[37] R. Schlegel, K. Zhang, X. Zhou, M. Intwala, A. Kapadia, and X. Wang. Soundcomber: A stealthy and context-aware sound trojan for smartphones. In Proceedings of the ISOC Network and Distributed Systems Security (NDSS) Symposium, Feb. 2011.
[38] SecurityWeek News. New malware jumps to 73,000 samples every day, says PandaLabs, Mar. 2011. http://www.securityweek.com/new-malware-jumps-73000-samples-every-day-says-pandalabs.
[39] M. Shipman. Enter the hacker: New DroidKungFu malware is bad news for Androids. The Abstract blog, June 2011. http://web.ncsu.edu/abstract/technology/wms-droidkungfu/.
[40] A. Srivastava and J. Griffin. Tamper-resistant, application-aware blocking of malicious network flows. In Recent Advances in Intrusion Detection (RAID), Cambridge, Massachusetts, Sept. 2008.
[41] P. Traynor, M. Lin, M. Ongtang, V. Rao, T. Jaeger, T. La Porta, and P. McDaniel. On cellular botnets: Measuring the impact of malicious devices on a cellular network core. In Proceedings of the ACM Conference on Computer and Communications Security (CCS), Nov. 2009.
[42] T. Wimberly. Cyanogenmod in trouble? Android and Me blog, Sept. 2009. http://androidandme.com/2009/09/hacks/cyanogenmod-in-trouble/.
[43] N. Xu, F. Zhang, Y. Luo, W. Jia, D. Xuan, and J. Teng. Stealthy video capturer: A new video-based spyware in 3G smartphones. In Proceedings of the ACM Conference on Wireless Network Security (WiSec), Mar. 2009.