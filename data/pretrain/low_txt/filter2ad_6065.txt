# Scaling Out the Performance of Service Monitoring Applications with BlockMon

**Authors:**
- Davide Simoncelli<sup>1</sup>
- Maurizio Dusi<sup>2</sup>
- Francesco Gringoli<sup>1</sup>
- Saverio Niccolini<sup>2</sup>

**Affiliations:**
- <sup>1</sup> University of Brescia – CNIT, Brescia, Italy
- <sup>2</sup> NEC Laboratories Europe, Heidelberg, Germany

**Contact:**
- {davide.simoncelli, francesco.gringoli}@unibs.it
- {maurizio.dusi, saverio.niccolini}@neclab.eu

## Abstract

To address the challenge of real-time data analysis as the volume of network-exchanged data increases, we propose redesigning algorithms originally implemented on monitoring probes to operate in a distributed manner over a stream-processing platform. This paper presents a preliminary performance analysis of a Twitter trending algorithm running on BlockMon, an open-source monitoring platform that we extended to support distributed data-analytics algorithms. Our results show that BlockMon outperforms Storm and Apache S4, achieving up to 23.5x and 34.2x faster performance, respectively.

## 1. Introduction

The exponential growth of data exchanged on the Internet has rendered traditional (monolithic) approaches to data monitoring inadequate for real-time collection and processing. As a result, alternative designs based on distributed computing are being explored. While Hadoop and MapReduce [1,2] are well-known frameworks for offline (batch) data processing, new frameworks such as Storm and Apache S4 are emerging for the real-time analysis of unbounded data streams.

In this paper, we evaluate the performance of a Twitter trending application, which monitors and ranks topics discussed by Twitter users in real time. We run this application on Storm and Apache S4, platforms specifically designed for such use cases, and on BlockMon [3], an open-source monitoring platform that we extended to execute distributed applications.

### Overview of Stream-Processing Systems

- **BlockMon**: An open-source, modular system for flexible, high-performance traffic monitoring and analysis, implemented in C++11 under the BSD license. Initially designed for single multi-core machines, we added interfaces to connect blocks running on different machines, enabling the implementation of distributed applications.
- **Storm**: A Java-based platform that supports multi-language programmability. Data is exchanged in the form of tuples through ZMQ sockets, which handle local and remote transmission over TCP. We used version v0.8, available under the EPL license [5].
- **Apache S4**: A Java-based framework where an external adapter converts data into events and injects them into the cluster using the `put` method. Elements exchange events using TCP or UDP. We used version v0.5, available under the Apache 2.0 license [6].

## 2. Experimental Analysis

### Dataset and Testbed

We used a dataset of approximately 20 million tweets in JSON format. To ensure privacy, we do not disclose the actual data. Our testbed consists of 14 commodity machines, each equipped with two AMD Opteron(tm) Processors 246 (single core) and 4GB RAM, connected via a 1GbE interface through a 16-port switch.

### Design

Our design includes multiple JSON parsers (Hashtag Finder), one per Tweet Source, and a single Hashtag Counter, as shown in Figure 1a.

### 2.1 Performance Tests

For each experiment, we assigned only one task per machine and ran the controller of the platform under test on a dedicated machine to avoid any load introduced by the controller affecting our measurements. We also assumed no failures during the experiments.

#### Results

Figure 1b shows the performance of the Twitter trending application with an increasing number of hashtag finders (HF). On all platforms, the application scales linearly (dashed line represents the theoretical trend). BlockMon outperformed Storm and Apache S4, achieving up to 23.5x and 34.2x faster performance, respectively. The CPU load of the hashtag counter was below 4% even in the worst case (with six HFs on Storm), indicating that a single counter is sufficient to handle multiple HFs, which account for about 75% of the total CPU resources.

In Apache S4, the source is a limiting factor due to nested copies required for sending events, resulting in a 10x slower performance compared to Storm. For Storm, the bottleneck is related to the extraction of messages from the network and passing them to the HFs. The rate of the sources is higher than that of the HFs, and the JSON parser library (jackson) used in Storm performs similarly to jsmn in BlockMon when used standalone. Developers should be aware of these pitfalls in applications like Twitter trending, where efficient data movement among nodes is crucial.

## 3. Conclusions

This work provides developers of monitoring applications with insights into the distributed architectures suitable for real-time data processing. Our preliminary results highlight some limitations in existing platforms and demonstrate that BlockMon achieves the best performance. Future work will extend the analysis to more applications and explore specialized hardware, such as 10Gb/s network cards, to mitigate network bottlenecks.

## References

1. Apache Hadoop, http://hadoop.apache.org (accessed September 01, 2012)
2. Dean, J., Ghemawat, S.: MapReduce: Simplified Data Processing on Large Clusters. Commun. ACM 51(1), 107–113 (2008)
3. di Pietro, A., Huici, F., Bonelli, N., Trammell, B., Kastovsky, P., Groleat, T., Vaton, S., Dusi, M.: BlockMon: Toward High-Speed Composable Network Traffic Measurement. In: Proceedings of the IEEE Infocom Conference, Mini-conference (2013)
4. BlockMon, http://blockmon.github.com/blockmon (accessed August 30, 2012)
5. Storm, http://storm-project.net (accessed August 30, 2012)
6. Apache S4, http://incubator.apache.org/s4 (accessed August 30, 2012)