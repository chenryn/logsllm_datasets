### Network Protocol Reverse Engineering: Literature Survey for "Eavesdropping on the Machines"

**Presented on August 5, 2016, at DEF CON 24 by Tim Estell and Katea Murray**

#### Prior DEF CON Talks

- **DEF CON 22 (Jesus Molina)**
  - **Title:** "Learn how to control every room at a luxury hotel remotely: the dangers of insecure home automation deployment"
  - **Summary:** This presentation provided an in-depth analysis of a specific protocol but did not offer a repeatable process for Network Protocol Reverse Engineering (NPRE).

- **DEF CON 22 (Geoff McDonald)**
  - **Title:** "Meddle: Framework for Piggy-back Fuzzing and Tool Development"
  - **Summary:** The presenter argued that understanding the protocol is not necessary to break it. His fuzzing tool bypasses the need for NPRE, but it does not provide a generalized process for reverse engineering.

- **DEF CON 22 (Dustin Hoffman and Thomas Kinsey)**
  - **Title:** "What the Watchers See: Eavesdropping on Municipal Mesh Cameras for Giggles (or Pure Evil)"
  - **Summary:** The presenters decoded an undocumented protocol, effectively performing NPRE. However, they did not focus on providing a repeatable process for others to reverse engineer their own protocols.

- **DEF CON 23 (Peter Shipley and Ryan Gooler)**
  - **Title:** "Insteon's False Security and Deceptive Documentation"
  - **Summary:** The presenters asserted that the published protocol documentation from Insteon is incorrect and deceptive. They did not provide a generalized process for NPRE.

#### Summary of Research

Published research on Network Protocol Reverse Engineering (NPRE) has addressed several challenges. Key contributions include:

- **The Protocol Informatics Project (PI Project) [Beddoe 2004]**
  - Used network traces and two string alignment algorithms (Needleman-Wunsch and Smith-Waterman) to perform protocol reverse engineering.

- **Semi-automated Approach [Gopalratnam 2006]**
  - Utilized packets from the protocol of interest and at least one packet with labeled fields. Gaussian models were used to cluster the fields and provide information about field values. The algorithm, however, does not scale well with the number of fields or message size.

- **Limitations of Network Traces [Caballero 2007]**
  - Researchers noted that network traces lack protocol semantics and only contain syntactic information. To overcome this, they used dynamic binary analysis and data tainting [Caballero 2007, Lin 2008, Caballero 2009], or a combination of network traces and binary access [Cui 2008].

- **Binary Features and State Machine Builder [Trifilo 2009]**
  - Demonstrated that discovering binary features in a protocol and using a state machine builder can determine states and transitions from network packet captures alone.

- **Netzob [Netzob]**
  - An open-source tool for TCP/IP networks that includes vocabulary inference from network traces, semi-autonomous grammar inference, and dynamic analysis through protocol simulation.

- **Incremental Clustering Using Tree Structures [Lin 2008, Wondracek 2008, Trifilo 2009]**
  - Several researchers implemented incremental clustering using tree structures, but these methods require data normalization or other grooming techniques, which may not be applicable in all environments.

- **Augmenting Protocol Specifications [Wondracek 2008, Caballero 2009]**
  - Researchers added semantic information to protocol specifications by including running statistical information and a confidence metric.

- **Resource-Constrained Environments**
  - Existing approaches do not address resource-constrained environments. A potential solution is the use of Balanced Iterative Reducing and Clustering using Hierarchies (BIRCH) [Zhang 1996]. BIRCH is a hierarchical clustering method that can incrementally and dynamically cluster, execute within given memory and time constraints, classify on a single scan of the data, and handle data with errors or noise. Further optimization would prioritize high-level completeness over accuracy initially, then reset the in-memory data structure to prioritize the accuracy of individual message types.

- **Domain-Specific Language (DSL) Development**
  - Research should begin with a survey of message protocol features to develop a DSL suitable for compact representation of features. The DSL could extend existing work done by the Open Grid Forum’s Data Format Description Language (DFDL) [OGF-DFDL] and other Data Description Languages (DDL) such as XML Schema [XML Schema]. These sources use human-readable text formatted in an XML manner, making them unsuitable for machine processing or automated reasoning. The DSL might also extend Abstract Syntax Notation One (ASN.1) encoding rules for more efficient serialization than the text-based XML format.

#### Bibliography

- **[Beddoe 2004]** Beddoe, M. (2004 August). The Protocol Informatics Project (PI Project). <http://www.4tphi.net/~awalters/PI/PI.html>
- **[Gopalratnam 2006]** Gopalratnam, K., Basu, S., Dunagan, J., & Wang, H. (2006, June). Automatically extracting fields from unknown network protocols. In First Workshop on Tackling Computer Systems Problems with Machine Learning Techniques (SysML06).
- **[Cui 2007]** Cui, W., Kennan, J., & Wang, H. J. (2007, August). Discoverer: Automatic protocol reverse engineering from network traces. In Proceeding of 16th USENIX Security Symposium on USENIX Security Symposium (pp. 1-14).
- **[Cui 2008]** Cui, W., Peinado, M., Chen, K., Wang, H. J., & Irun-Briz, L. (2008). Tupni: automatic reverse engineering of inputs formats. In Proceedings of the 15th ACM conference on Computer and Communications Security (CCS ’08). ACM.
- **[Lin 2008]** Lin, Z., Jian, X., Xu, D., & Zhang, X. (2008). Automatic Protocol Format Reverse Engineering through Context-Aware Monitored Execution. In 15th Symposium on Network and Distributed System Security (NDSS), 2008. Internet Society.
- **[Wondracek 2008]** Wondracek, G., Comparetti, P. M., Kruegel, C., & Kirda, E. (2008). Automatic Network Protocol Analysis. In 15th Symposium on Network and Distributed System Security (NDSS), 2008. Internet Society.
- **[Caballero 2007]** Caballero, J., Yin, H., Liang, Z., & Song, D. (2007, October). Polyglot: Automatic extraction of protocol message format using dynamic binary analysis. In Proceedings of the 14th ACM Conference on Computer and Communications Security (pp. 317-329). ACM.
- **[Caballero 2009]** Caballero, J., Poosankam, P., Kreibich, C., & Song, D. (2009). Dispatcher: enabling active botnet infiltration using automatic protocol reverse-engineering. In Proceeding of the 16th ACM Conference on Computer and Communications Security (CCS ’09). ACM.
- **[Trifilo 2009]** Trifilo, A., Burschka, S., Biersack, E. (2009 July). Traffic to protocol reverse engineering. In Proceedings of the Computational Intelligence for Security and Defense Applications, 2009 (CISDA 2009). IEEE
- **[Zhang 1996]** Zhang, T., Ramakrishnan R., & Livny, M. (1996, June). “BIRCH: An Efficient Data Clustering Method for Very Large Databases, 1996. In ACM SIGMOD Record (Vol. 25, No. 2, pp 103-114). ACM.
- **[Netzob]** <http://www.netzob.org>. An open-source tool for reverse engineering, traffic generation, and fuzzing of communication protocols.
- **[OGF-DFDL]** <http://www.ogf.org/dfdl/>. Data Format Description Language (DFDL) is a language for describing text and binary data formats. A DFDL description allows any text or binary data to be read from its native format and presented as an instance of an information set. DFDL also allows data to be taken from an instance of an information set and written out to its native format. DFDL achieves this by leveraging W3C XML Schema Definition Language (XSDL) 1.0.
- **[XML Schema]** <http://www.w3.org/standards/xml/schema>. An XML Schema is a language for expressing constraints about XML documents. There are several different schema languages in widespread use, but the main ones are Document Type Definitions (DTDs), Relax-NG, Schematron, and W3C XSD (XML Schema Definitions).