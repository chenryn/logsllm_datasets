### Table I: Protocol Overview

Table I outlines the steps and communication costs involved in the protocol. Over the course of the protocol, each of the \( n \) parties commits to and sends a single proof-of-knowledge-of-discrete-logarithm to all other parties via broadcast. Each party then verifies the \( n-1 \) proofs it receives. Subsequently, the parties compute and send Lagrange coefficients to one another, which requires \( O(n^2) \) (parallel) communication in total. This pattern is repeated for verification. Finally, each party evaluates a single KOS Setup instance with every other party, resulting in \( \frac{n^2 - n}{2} \) instances in total. The entire protocol involves four broadcast rounds, plus the messages required by the KOS Setup instances.

### Communication Costs Comparison

For ease of comparison, Table II lists the concrete communication costs for our signing protocol alongside those of Gennaro et al. [3], Boneh et al. [4], and Lindell [2]. The schemes by Gennaro et al. and Boneh et al. are related, with Boneh et al. reducing the number of messages from six to four in Gennaro et al.'s protocol to minimize communication costs. Our signing protocol, requiring only two messages, incurs approximately one-twentieth of the communication cost compared to either of these schemes.

Lindell's signing scheme, while requiring four messages, excels in terms of communication efficiency, transferring only a commitment, two curve points, two zero-knowledge proofs, and one Paillier ciphertext. However, the Paillier homomorphic operations it requires are computationally expensive. Specifically, Lindell's scheme involves one encryption, one homomorphic scalar multiplication, and one homomorphic addition with a Paillier modulus \( N > 2q^4 + q^3 \), or 2048 bits for a 256-bit curve. In contrast, the schemes by Gennaro et al. and Boneh et al. require one to three encryptions and three to five homomorphic additions and scalar multiplications per party, with \( N > q^8 \), also resulting in a 2048-bit modulus for 256-bit curves. Additionally, Lindell's protocol requires 12 Elliptic Curve multiplications, while the other two protocols require approximately 100. These Paillier and group operations dominate the computational cost of the protocols.

### Implementation

We developed a proof-of-concept implementation of our 2-of-2 and 2-of-n setup and signing protocols in Rust. As a prerequisite, we also created an elliptic curve library in Rust. We use SHA-256 to instantiate the Hash function, as per the ECDSA specification, and also to instantiate the Pseudorandom Generator (PRG). Consequently, our protocol relies on both the same theoretical assumptions as ECDSA and the practical assumption that SHA-256 is secure. The SHA-256 implementation used in signing can parallelize vectors of hash operations, and the 2-of-n setup protocol can parallelize OT-extension initializations. Otherwise, the code is strictly single-threaded. While this approach likely results in reduced performance compared to an optimized C implementation, we believe the safety provided by Rust justifies the trade-off.

### Benchmarking

We benchmarked our implementation on a pair of Amazon C5.2xlarge instances from Amazon’s Virginia datacenter, both running Ubuntu 16.04 with Linux kernel 4.4.0, and compiled our code using Rust 1.25 with the default level of optimization. The bandwidth between our instances was measured at 5 Gbps, and the round-trip latency was 0.1 ms. Our signatures were calculated over the secp256k1 curve, as standardized by NIST [7]. Thus, \( \kappa = 256 \), and we chose \( s = 80 \) and \( \kappa_{OT} = 128 + s \), following the analysis of KOS [34]. We performed both strictly single-threaded benchmarks and benchmarks allowing parallel hashing with three threads per party, collecting 10,000 samples for setup and 100,000 for signing. Note that signatures were not batched, and thus each sample was individually impacted by the full network latency. The average wall-clock times for both signing protocols and the 2-of-2 setup protocol are reported in Table III, along with results from previous works for comparison.

We also benchmarked our 2-of-n setup algorithm using a set of 20 Amazon C5.2xlarge instances from the Virginia datacenter, configured as before with one instance per party. For initializing OT-extensions, each machine was allowed to use as many threads as there were parties, but the code was otherwise single-threaded. We collected 1,000 samples for groups of parties ranging in size from 3 to 20, and we report the results in Figure 2.

### Transoceanic Benchmarks

We repeated our 2-of-2 setup, 2-of-2 signing, and 2-of-n signing benchmarks with one of the machines relocated to Amazon’s Ireland datacenter, collecting 1,000 samples for setup and 10,000 for signing, and in the latter case allowing three threads for hashing. In this configuration, the bandwidth between our instances was measured at 161 Mbps, and the round-trip latency was 74.6 ms. Additionally, we performed a 2-of-4 setup benchmark among four instances in Amazon’s four US datacenters (Virginia, Ohio, California, and Oregon), and a 2-of-10 setup benchmark among ten instances in ten geographically distributed datacenters (Virginia, Ohio, California, Oregon, Mumbai, Sydney, Canada, Ireland, London, and Paris). The round-trip latency between the US datacenters ranged from 11.2 ms to 79.9 ms, and the bandwidth ranged from 152 Mbps to 1.10 Gbps. The round-trip latency between the most distant pair of datacenters, Mumbai and Ireland, was 282 ms, and the bandwidth was 39 Mbps. Results are reported in Table IV. We note that, in contrast to our single-datacenter benchmarks, our transoceanic benchmarks are dominated by latency costs. We expect that our protocol’s low round count constitutes a greater advantage in this setting than its computational efficiency.

### Comparison to Prior Work

We compare our implementation to those of Lindell [2], Gennaro et al. [3], and Boneh et al. [4] (who also provide an optimized version of Gennaro et al.’s scheme, against which we make our comparison). Although Boneh et al. and Gennaro et al. support thresholds larger than two, we consider only their performance in the 2-of-n case. Neither Gennaro et al. nor Boneh et al. include network costs in the timings they provide, nor do they provide timings for the setup protocol that their schemes share. However, Lindell observes that Gennaro et al.’s scheme involves a distributed Paillier key generation protocol that requires roughly 15 minutes to run in the semi-honest setting. Unfortunately, this means we have no reliable point of comparison for our 2-of-n setup protocol.

Lindell benchmarks his scheme using a single core on each of two Microsoft Azure Standard_DS3_v2 instances in the same datacenter, which can expect bandwidth of roughly 3 Gbps. Lindell’s performance figures include network costs. Despite Lindell’s protocol requiring vastly less communication, as reported in Section VII, we find that, not accounting for differences in benchmarking environment, our implementation outperforms his for signing by a factor of roughly 16 (when only a single thread is allowed), and for setup by a factor of roughly 55. Given that each 2-of-2 signature requires 85.7 KiB of data to be transferred under our scheme, but only 769 Bytes under Lindell’s, there must be an environment in which his scheme outperforms ours. Specifically, Lindell has an advantage when the protocol is bandwidth-constrained but not computationally constrained. Such a scenario is likely when a large number of signatures must be calculated in a batched fashion (mitigating the effects of latency) by powerful machines with a comparatively weak network connection.

Finally, we note that an implementation of the ordinary (local) ECDSA signing algorithm in Rust using our own elliptic curve library requires an average of 179 microseconds to calculate a signature on our benchmark machines—a factor of only 11.75 faster than our 2-of-2 signing protocol.

### Acknowledgments

We thank Megan Chen and Emily Wang for their contributions to this project during the summer of 2017. The authors of this work are supported by NSF grants TWC-1646671 and TWC-1664445. This work used the Extreme Science and Engineering Discovery Environment (XSEDE) Jetstream cluster [54] through allocation TG-CCR170010, which is supported by NSF grant number ACI-1548562.

### Code Availability

Our implementation is available under the three-clause BSD license from https://gitlab.com/neucrypt/mpecdsa/.

### References

[1] Y. Desmedt, “Society and group oriented cryptography: A new concept,” in CRYPTO, 1987.
[2] Y. Lindell, Fast Secure Two-Party ECDSA Signing, 2017.
[3] R. Gennaro, S. Goldfeder, and A. Narayanan, Threshold-Optimal DSA/ECDSA Signatures and an Application to Bitcoin Wallet Security, 2016.
[4] D. Boneh, R. Gennaro, and S. Goldfeder, “Using level-1 homomorphic encryption to improve threshold dsa signatures for bitcoin wallet security,” http://www.cs.haifa.ac.il/~orrd/LC17/paper72.pdf, 2017.
[5] W. Diffie and M. Hellman, “New directions in cryptography,” IEEE Trans. Inf. Theor., vol. 22, no. 6, Sep. 1976.
[6] S. Goldwasser, S. Micali, and R. L. Rivest, “A digital signature scheme secure against adaptive chosen-message attacks,” SIAM J. Comput., vol. 17, no. 2, Apr. 1988.
[7] National Institute of Standards and Technology, “FIPS PUB 186-4: Digital Signature Standard (DSS),” http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf, 2013.
[8] American National Standards Institute, “X9.62: Public Key Cryptography For The Financial Services Industry: The Elliptic Curve Digital Signature Algorithm (ECDSA),” 2005.
[9] D. R. L. Brown, “Sec 2: Recommended elliptic curve domain parameters,” 2010. [Online]. Available: http://www.secg.org/sec2-v2.pdf
[10] D. Kravitz, “Digital signature algorithm,” jul 1993, uS Patent 5,231,668.
[11] S. Blake-Wilson, N. Bolyard, V. Gupta, C. Hawk, and B. Moeller, “Elliptic curve digital signature algorithm (DSA) for DNSSEC,” https://tools.ietf.org/html/rfc4492, 2006.
[12] P. Hoffman and W. Wijngaards, “Elliptic curve digital signature algorithm (DSA) for DNSSEC,” https://tools.ietf.org/html/rfc6605, 2012.
[13] Bitcoin Wiki, “Transaction,” https://en.bitcoin.it/wiki/Transaction, 2017, accessed Oct 22, 2017.
[14] G. Wood, “Ethereum: A secure decentralised generalised transaction ledger,” 2017. [Online]. Available: https://ethereum.github.io/yellowpaper/paper.pdf
[15] Y. G. Desmedt and Y. Frankel, “Threshold cryptosystems,” in CRYPTO, 1989.
[16] T. ElGamal, “A public key cryptosystem and a signature scheme based on discrete logarithms,” in CRYPTO, 1984.
[17] A. Shamir, “How to share a secret,” Commun. ACM, vol. 22, no. 11, Nov. 1979.
[18] T. P. Pedersen, “A threshold cryptosystem without a trusted party,” in EUROCRYPT, 1991.
[19] Y. Desmedt and Y. Frankel, “Shared generation of authenticators and signatures (extended abstract),” in CRYPTO, 1991.
[20] R. L. Rivest, A. Shamir, and L. Adleman, “A method for obtaining digital signatures and public-key cryptosystems,” Commun. ACM, vol. 21, no. 2, Feb. 1978.
[21] Y. Desmedt and Y. Frankel, “Parallel reliable threshold multisignature,” 1992.
[22] R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin, “Robust and efficient sharing of RSA functions,” in CRYPTO, 1996.
[23] A. De Santis, Y. Desmedt, Y. Frankel, and M. Yung, “How to share a function securely,” in STOC, 1994.
[24] V. Shoup, “Practical threshold signatures,” in EUROCRYPT, 2000.
[25] C.-P. Schnorr, “Efficient identification and signatures for smart cards,” in CRYPTO, 1989.
[26] D. R. Stinson and R. Strobl, “Provably secure distributed Schnorr signatures and a (t, n) threshold scheme for implicit certificates,” in ACISP, 2001.
[27] S. K. Langford, “Threshold DSS signatures without a trusted party,” in CRYPTO, 1995.
[28] R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin, “Robust threshold DSS signatures,” in EUROCRYPT, 1996.
[29] P. MacKenzie and M. K. Reiter, Two-Party Generation of DSA Signatures, 2001.
[30] Bitcoin Wiki, “Multisignature,” https://en.bitcoin.it/wiki/Multisignature, 2017, accessed Oct 22, 2017.
[31] P. Paillier, “Public-key cryptosystems based on composite degree residuosity classes,” in EUROCRYPT, 1999.
[32] N. Gilboa, “Two party RSA key generation,” in CRYPTO, 1999.
[33] T. Chou and C. Orlandi, “The simplest protocol for oblivious transfer,” in LATINCRYPT, 2015.
[34] M. Keller, E. Orsini, and P. Scholl, “Actively secure OT extension with optimal overhead,” in CRYPTO, 2015.
[35] E. Hauck and J. Loss, “Efficient and universally composable protocols for oblivious transfer from the CDH assumption,” Cryptology ePrint Archive, Report 2017/1011, 2017, http://eprint.iacr.org/2017/1011.
[36] J. Katz and Y. Lindell, Introduction to Modern Cryptography, Second Edition, 2015, ch. Digital Signature Schemes, pp. 443–486.
[37] D. R. L. Brown, “Generic groups, collision resistance, and ECDSA,” Cryptology ePrint Archive, Report 2002/026, 2002, http://eprint.iacr.org/2002/026.
[38] S. Vaudenay, “The security of DSA and ECDSA,” in PKC, 2003.
[39] N. Koblitz and A. Menezes, “Another look at generic groups,” Cryptology ePrint Archive, Report 2006/230, 2006, https://eprint.iacr.org/2006/230.
[40] S. Even, O. Goldreich, and A. Lempel, “A randomized protocol for signing contracts,” Commun. ACM, vol. 28, no. 6, Jun. 1985.
[41] M. O. Rabin, “How to exchange secrets with oblivious transfer,” Cryptology ePrint Archive, Report 2005/187, 1981, http://eprint.iacr.org/2005/187, Harvard University Technical Report 81.
[42] S. Wiesner, “Conjugate coding,” SIGACT News, 1983.
[43] M. Naor and B. Pinkas, “Computationally secure oblivious transfer,” J. Cryptol., vol. 18, no. 1, Jan. 2005.
[44] D. Beaver, “Correlated pseudorandomness and the complexity of private computations,” in STOC, 1996.
[45] Y. Ishai, E. Kushilevitz, R. Ostrovsky, M. Prabhakaran, and A. Sahai, “Efficient non-interactive secure computation,” in EUROCRYPT, 2011.
[46] A. Beimel, A. Gabizon, Y. Ishai, E. Kushilevitz, S. Meldgaard, and A. Paskin-Cherniavsky, “Non-interactive secure multiparty computation,” in CRYPTO, 2014.
[47] V. Shoup, “Lower bounds for discrete logarithms and related problems,” in EUROCRYPT, 1997.
[48] A. Fiat and A. Shamir, “How to prove yourself: Practical solutions to